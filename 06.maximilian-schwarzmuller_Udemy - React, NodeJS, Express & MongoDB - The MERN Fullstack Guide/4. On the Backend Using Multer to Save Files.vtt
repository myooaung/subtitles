WEBVTT
1
00:00:02.450 --> 00:00:06.690
Thus far we worked on the front end and we can't pick a file there.

2
00:00:06.710 --> 00:00:12.590
Now let's move on to the back end and let's ensure that there we also accept such a file so that you

3
00:00:12.590 --> 00:00:14.940
can indeed attach to a request.

4
00:00:14.990 --> 00:00:20.390
And here on the back and we then extract it and store it now for Dad we'll add a third party package

5
00:00:20.420 --> 00:00:23.100
which helps us with debt Malta.

6
00:00:23.120 --> 00:00:24.920
You can just google for Malta.

7
00:00:24.950 --> 00:00:28.550
It's a notorious middleware and it's built for Express charges as well.

8
00:00:28.550 --> 00:00:31.580
So a note expressed to us middleware to be precise.

9
00:00:31.580 --> 00:00:35.380
That helps us work with multipart foreign data.

10
00:00:35.390 --> 00:00:40.870
Now that's the specific type of request body we can submit to the back end.

11
00:00:40.880 --> 00:00:42.920
Thus far we use to Jason data.

12
00:00:42.920 --> 00:00:48.470
Now we will actually switch to this different type of data for some requests and the special thing about

13
00:00:48.470 --> 00:00:56.900
this type of data or dis data format is that it can contain a mixture of normal text data and file data

14
00:00:56.930 --> 00:01:02.490
or binary data because Jason can only work with text data in the end.

15
00:01:02.540 --> 00:01:06.470
Of course he can also include numbers but ultimately that's all just text right.

16
00:01:06.470 --> 00:01:09.500
You can print it now binary data is different.

17
00:01:09.500 --> 00:01:17.210
And Jason format can't deal with binary data multipart format I can and I will show you how to adjust

18
00:01:17.300 --> 00:01:21.370
our requests we send to the back end to use this kind of data.

19
00:01:21.740 --> 00:01:27.120
But first of all let's prepare to back in with this package to accept such data.

20
00:01:27.140 --> 00:01:30.760
So for this we need to run npm install dash dash save Mulder.

21
00:01:30.890 --> 00:01:32.470
And then here you can learn all about it.

22
00:01:32.480 --> 00:01:37.300
But of course it will all to guide you through the steps you need to do to set up Mulder.

23
00:01:37.310 --> 00:01:42.560
So let's first of all install it on the back end not on the front end but on the back and let's run

24
00:01:42.590 --> 00:01:45.200
npm install dash dash safe Mulder.

25
00:01:45.560 --> 00:01:51.180
And this will now installed this package into the back and there on the back end.

26
00:01:51.340 --> 00:01:57.640
I will now add a new folder the middleware folder you can named as folder however you want but I created

27
00:01:57.970 --> 00:02:04.330
because there I want to store my own custom middleware and one middleware as you file dash upload J.S.

28
00:02:04.330 --> 00:02:09.970
middleware of course Malta already is a middleware that will help us but I will basically configured

29
00:02:09.970 --> 00:02:13.960
to my requirements and wrap it into my own middleware which had an export.

30
00:02:14.680 --> 00:02:18.490
So how does this work in the file upload J.S. file.

31
00:02:18.490 --> 00:02:29.000
I will import Mulder first of all like this and with it imported I will execute it as a function a function

32
00:02:29.000 --> 00:02:35.930
to which we can pass a conflagration object the result of this function is the actual file upload middleware

33
00:02:35.930 --> 00:02:39.230
Malta provides and you find these same steps.

34
00:02:39.230 --> 00:02:41.390
Basically new official Malta docks as well.

35
00:02:41.450 --> 00:02:47.450
So this is now a middleware which we could use in our Express middleware chain.

36
00:02:47.450 --> 00:02:54.110
They are for here in the end I will export file upload so I will export this middleware and then we

37
00:02:54.110 --> 00:02:59.900
can adjust our configuration here in a global place and use that pre configured export middleware in

38
00:02:59.960 --> 00:03:07.370
any Arab file we want for example in the user routes there we have to sign up out and on the sign up

39
00:03:07.420 --> 00:03:11.390
route we of course want to accept images to be uploaded.

40
00:03:11.390 --> 00:03:20.810
So here we can import our file upload middleware by requiring it from the middleware folder file upload

41
00:03:20.810 --> 00:03:21.850
like this.

42
00:03:22.220 --> 00:03:29.510
And then here on the post request on sign up request before we run any other middleware we can add file

43
00:03:29.540 --> 00:03:32.990
upload thoughts single image.

44
00:03:33.050 --> 00:03:39.200
This is how you use the multiple middleware concrete Middleware is actually the result of this single

45
00:03:39.200 --> 00:03:41.330
call file upload.

46
00:03:41.330 --> 00:03:47.090
So the thing I'm export to gear is not yet the middleware it's an object that has a bunch of pre configured

47
00:03:47.090 --> 00:03:52.340
Middleware is for example a Mila where to retrieve a single file which we get access to with the single

48
00:03:52.340 --> 00:03:59.510
method and then we have to specify the name the name in that to be expect the body of the incoming request

49
00:03:59.750 --> 00:04:05.570
that will hold the image or the file that should be extracted and I here expect to have an image key

50
00:04:05.570 --> 00:04:10.120
on the incoming request which should then hold the well image.

51
00:04:10.130 --> 00:04:16.520
I want to extract so this instructs Malta to extract that image or that file on that image key on the

52
00:04:16.520 --> 00:04:20.240
incoming request before we continue with the obvious steps.

53
00:04:20.360 --> 00:04:25.010
The question just is what does Malta do with that extract that image.

54
00:04:25.130 --> 00:04:27.410
Of course you want to store it somewhere.

55
00:04:27.410 --> 00:04:34.520
So here in the file upload J File we can configure Malta a little bit we can configure it to tell it

56
00:04:34.520 --> 00:04:40.280
where to store is something and all the which files to accept first of all I want to set a little filter

57
00:04:40.280 --> 00:04:48.110
here a limit for our files we can set a limit and byte here and I want to set this to five hundred thousand

58
00:04:48.110 --> 00:04:53.690
bytes to ever upload limit of 500 kilobytes and of course you can adjust this to your personal likings

59
00:04:53.690 --> 00:05:02.700
here Mulder also takes a storage key and here we can control how data should get stored now this storage

60
00:05:03.060 --> 00:05:10.860
key requires a multi-year storage driver and Malta has a built in disk storage driver so we can call

61
00:05:10.860 --> 00:05:16.300
Malta disk storage to generate such a driver which we provide to storage.

62
00:05:16.440 --> 00:05:24.000
Now here we can set certain object properties on an object we provide to disk storage to configure dead

63
00:05:24.030 --> 00:05:31.230
disk storage and there we can specifically set a destination key to control the destination where files

64
00:05:31.230 --> 00:05:39.000
get stored and also a file name key to control the file name that's being used now both take functions

65
00:05:39.000 --> 00:05:47.010
here so we pass a function to each of these keys the destination function here gets the request object

66
00:05:47.040 --> 00:05:53.340
the file which was extracted and a callback which we have to call once we're done the file name function

67
00:05:53.340 --> 00:05:58.000
here also gets the request object although the file and also callback.

68
00:05:58.040 --> 00:06:04.500
Now let's maybe start with the file name there first of all one to extract my extension off the incoming

69
00:06:04.500 --> 00:06:12.480
file and for Dad I will trade a little help or a constant up there which I'll name MIME type map.

70
00:06:12.480 --> 00:06:19.530
This is a simple javascript object where I will map certain MIME types which look like this to certain

71
00:06:19.530 --> 00:06:29.260
file extensions and I'll do this for image PMG and also for the Q Jay Peak types we have why am I doing

72
00:06:29.260 --> 00:06:29.970
this.

73
00:06:30.040 --> 00:06:35.290
Because Mulder gives us some information about the MIME type it found for the uploaded file.

74
00:06:35.470 --> 00:06:36.850
MIME types look like this.

75
00:06:36.850 --> 00:06:39.790
And basically tell us which kind of file we're dealing with.

76
00:06:40.210 --> 00:06:48.700
So with this map I can drive to right extension from the identified MIME type so I can use my MIME type

77
00:06:48.700 --> 00:06:55.990
map here and dynamically access the property that matches my file dog MIME type.

78
00:06:56.020 --> 00:07:02.230
This is the file object Mulder gives me and there I have various fields one of them is the MIME type.

79
00:07:02.230 --> 00:07:08.770
Mulder found MIME type will look like this and therefore then I extract the right extension here because

80
00:07:08.770 --> 00:07:11.610
it dynamically access is one of these properties here.

81
00:07:11.620 --> 00:07:14.170
These are valid properties in JavaScript.

82
00:07:14.170 --> 00:07:16.300
We just have to wrap them in quotes.

83
00:07:16.300 --> 00:07:20.620
I dynamically X is one of these properties and gets the extension that's mapped to it.

84
00:07:21.210 --> 00:07:27.750
So this gives me the extension I want to use then I want to call this callback pass null as a first

85
00:07:27.780 --> 00:07:28.430
argument.

86
00:07:28.500 --> 00:07:32.760
We could throw an error here passing an error if something went wrong but that shouldn't be the case

87
00:07:32.760 --> 00:07:33.460
here.

88
00:07:33.540 --> 00:07:38.730
And then the file name I want to use and there I want to generate a unique idea and for this we can

89
00:07:38.730 --> 00:07:41.020
reuse a package we installed earlier.

90
00:07:41.190 --> 00:07:50.040
The you you I.D. package and import V1 for example and then call you you Aidid to generate a random

91
00:07:50.040 --> 00:07:54.790
unique file name here and then just add a dot and then the extension.

92
00:07:54.870 --> 00:07:57.900
So this generates a random filing with the right extension.

93
00:07:57.930 --> 00:08:02.370
This is passed as a second argument to call back and this in the end is handled internally by Malta

94
00:08:02.370 --> 00:08:04.530
to then use this file name.

95
00:08:04.530 --> 00:08:09.970
Now in destination we do something similar for deriving the path where we want a stewardess.

96
00:08:10.050 --> 00:08:13.110
It's simpler though I just have to call callback here.

97
00:08:13.230 --> 00:08:20.070
I got no error so I'll pass null as a first argument and then the string which describes the path where

98
00:08:20.070 --> 00:08:28.540
I want to stored is in here when I go for uploads slash images and I will therefore create a new folder

99
00:08:28.540 --> 00:08:34.990
here which I'll name uploads and in there a new folder images and that is where I want to store my data.

100
00:08:35.050 --> 00:08:39.350
Just like that with all of that disk storage is configured.

101
00:08:39.350 --> 00:08:46.600
Now let's continue configuring Mulder because I also want to set up a so-called file filter and no proper

102
00:08:46.600 --> 00:08:49.880
TB can pass to the object we use to configure Mulder.
