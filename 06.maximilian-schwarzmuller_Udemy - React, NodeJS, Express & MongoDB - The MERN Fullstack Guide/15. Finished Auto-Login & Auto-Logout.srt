1
00:00:02,360 --> 00:00:10,990
I want to set a timer which basically ensures that we lock the user out automatically if the token expired.

2
00:00:11,000 --> 00:00:19,060
To do this I will add a new variable up there logout timer it's actually outside of my app because it's

3
00:00:19,060 --> 00:00:24,280
just some behind the scenes data I need to manage not data which should re rendered as component or

4
00:00:24,280 --> 00:00:25,120
anything like that.

5
00:00:25,150 --> 00:00:29,920
So it's not a state of this component but just a general variable in this file.

6
00:00:29,920 --> 00:00:35,860
And now I want to use or I want to set this timer here whenever our token changes so we'll add a new

7
00:00:35,860 --> 00:00:43,030
use effect call here we can have more than one effect and the dependency here is my token if the token

8
00:00:43,030 --> 00:00:46,520
changes then I want to work with my timer.

9
00:00:46,540 --> 00:00:52,300
Now it either changed because we locked in no matter if we locked in through the form or through order

10
00:00:52,300 --> 00:00:56,100
log in or it changed because we locked out.

11
00:00:56,320 --> 00:01:01,780
So you don't want to check if token is valid which is the case after a log in.

12
00:01:02,200 --> 00:01:07,300
And in this case I want to call set time out here like this.

13
00:01:07,300 --> 00:01:11,530
And point at the log function if this timeout triggers.

14
00:01:11,650 --> 00:01:17,410
So log out the log function also as a dependency here thanks to use callback it's never recreated and

15
00:01:17,410 --> 00:01:23,000
we have no infinite loop now to duration here of course depends.

16
00:01:23,080 --> 00:01:29,060
Sometimes it's an hour but after all to log in it all is very likely is less than an hour.

17
00:01:29,290 --> 00:01:36,540
So we should make sure that we reflect this expiration time here as well.

18
00:01:36,910 --> 00:01:45,880
Now the expiration time changes whenever we call log in India end then we got a new expiration date

19
00:01:46,930 --> 00:02:00,100
hence we can store it is as a state here token expiration date and set token expiration date.

20
00:02:00,580 --> 00:02:06,330
And here I call use state and setters to nothing at the beginning in log in.

21
00:02:06,370 --> 00:02:10,870
Then create a constant named Token expiration date thanks to scoping.

22
00:02:10,900 --> 00:02:15,340
This will be a different constant than up there but if this is confusing to you you can choose a different

23
00:02:15,340 --> 00:02:20,610
name here and here then of course but this will not overwrite our state or anything like that.

24
00:02:20,650 --> 00:02:24,520
It's just a shadowed variable in the end.

25
00:02:24,910 --> 00:02:31,720
I do want to call set token expiration date here though to also set my state and set it to the derived

26
00:02:31,750 --> 00:02:32,790
token expiration date.

27
00:02:32,800 --> 00:02:40,760
We got here so I set this here and react will batch these state updates together so it will not update

28
00:02:40,760 --> 00:02:47,000
the same component three times instead it will just batches all into one update and thereafter in the

29
00:02:47,000 --> 00:02:53,680
next three render cycle of this component will have to correct token expiration date so this will then

30
00:02:53,680 --> 00:02:55,150
be the token expiration date.

31
00:02:55,150 --> 00:03:00,790
So here in use of fact down there we should also add this as a dependency now because I will use it

32
00:03:01,060 --> 00:03:08,890
in this use affect function if I got a token and I got a token expiration date then I want to set my

33
00:03:08,890 --> 00:03:09,590
timer.

34
00:03:09,640 --> 00:03:15,500
Now of course the timeout here does not take token expiration date as a second argument though because

35
00:03:15,500 --> 00:03:21,610
it is is a date year and not duration not a number which I need to enter here though.

36
00:03:21,610 --> 00:03:29,590
So we need to calculate the remaining time so remaining time for the token to be valid is basically

37
00:03:30,100 --> 00:03:37,420
the token expiration time which is a date object minus new dates so minus the current date.

38
00:03:37,470 --> 00:03:43,870
Now like this this won't work but we can call get time here to again get this in milliseconds since

39
00:03:43,870 --> 00:03:48,910
the beginning of time which is somewhere around 1970 in JavaScript.

40
00:03:48,910 --> 00:03:50,440
And here we call get time.

41
00:03:50,440 --> 00:03:55,590
So now we got the difference in milliseconds and that's exactly what we need here because set time out

42
00:03:55,590 --> 00:04:01,460
wants a duration in milliseconds so I can parse remaining time as our argument here.

43
00:04:01,600 --> 00:04:07,330
And with that we set the timer to take as long as it takes for this token to expire.

44
00:04:07,360 --> 00:04:13,170
Now if we have no token or no token exploration time.

45
00:04:13,170 --> 00:04:16,470
Then I want to clear my time out.

46
00:04:16,470 --> 00:04:23,280
So I want to clear any ongoing timers because maybe we got no token anymore because we manually clicked

47
00:04:23,280 --> 00:04:24,240
on logout.

48
00:04:24,240 --> 00:04:30,240
In this case we set the token to no use effect with trigger and it would want to clear my timer because

49
00:04:30,240 --> 00:04:35,460
there is no need to trigger logout again later if we locked out manually.

50
00:04:35,460 --> 00:04:39,000
We just might end up with multiple timers or something like this.

51
00:04:39,000 --> 00:04:42,320
If we then log in again which is definitely not what we want.

52
00:04:42,570 --> 00:04:51,400
Thankfully set time out returns us an I.D. off the timer created and we can store it is in logout timer.

53
00:04:51,400 --> 00:04:53,540
So in this variable I have up there.

54
00:04:53,650 --> 00:04:58,090
It's just some behind the scenes data is stored so we don't need to manage this in state.

55
00:04:58,300 --> 00:05:03,950
And then I can use the same logout timer here to clear this timer whenever the token changes again.

56
00:05:03,970 --> 00:05:06,220
So when we log out we cleared a timer.

57
00:05:06,220 --> 00:05:08,670
When we log in we set a new timer.

58
00:05:08,920 --> 00:05:13,090
So with that we hopefully have a flow that now works.

59
00:05:13,090 --> 00:05:14,380
Now let's see this.

60
00:05:14,680 --> 00:05:21,370
If I authenticate and I log in I am locked in of course.

61
00:05:21,370 --> 00:05:26,200
Now if I reload here I stay locked in.

62
00:05:26,260 --> 00:05:32,290
Now if I go to the application area off my def tools here I can edit the state a bit and go to the end

63
00:05:32,710 --> 00:05:42,200
and now change that time here to actually 1 hour early on and then let's say 50 here.

64
00:05:42,200 --> 00:05:48,260
If I now hit enter and I reload I was still locked in but if I wait for a few seconds this time will

65
00:05:48,260 --> 00:05:54,800
be reached and I should not be logged in automatically anymore because my time is no longer in the future

66
00:05:54,800 --> 00:06:03,490
then so let's wait a couple of seconds here and indeed now over reload I'm on authenticated again.

67
00:06:03,500 --> 00:06:10,670
So this work because I manually hacked is of course but just to prove that this auto log in logic works.

68
00:06:10,670 --> 00:06:17,240
Now let's see if we are logged out of the timer expires and for Dad temporarily I will reduce his log

69
00:06:17,240 --> 00:06:20,600
in period to not 1 hour but just 2 seconds.

70
00:06:20,600 --> 00:06:27,850
So did we see if we are locked out after these two seconds so if I do log in here I am locked in of

71
00:06:27,850 --> 00:06:30,930
course but after two seconds you see the switches.

72
00:06:30,940 --> 00:06:37,080
However now if I try to log in again I immediately am unsophisticated.

73
00:06:37,300 --> 00:06:44,080
So something is not working correctly here and that most likely has something to do with logout because

74
00:06:44,080 --> 00:06:48,760
remember we're having token expiration date as a state now but in logging.

75
00:06:48,760 --> 00:06:52,490
I'm not clearing this I'm clearing the token but not expiration date.

76
00:06:52,570 --> 00:06:54,460
I should reset this to null here as well.

77
00:06:54,460 --> 00:06:59,530
Otherwise we still have our old expiration date managed in state here which of course will lead to an

78
00:06:59,530 --> 00:07:01,840
immediate log out which I don't want.

79
00:07:01,840 --> 00:07:07,930
So when we log in I also want to clear my existing token expiration date with that if we tried as again

80
00:07:07,960 --> 00:07:14,820
and I do log in here I am logged in and after 2 seconds I should be logged out.

81
00:07:14,820 --> 00:07:18,200
But if I log in again this should be possible.

82
00:07:18,210 --> 00:07:23,850
Yeah and if I reload real quick you see then I had my auto logging going on but of course a new timer

83
00:07:23,850 --> 00:07:27,300
was set which is super short and I am logged out.

84
00:07:27,300 --> 00:07:28,940
So this all seems to work.

85
00:07:28,950 --> 00:07:35,820
And with Dad we can of course increase does again and not wait for 2 seconds but 1000 times 60 times

86
00:07:35,880 --> 00:07:37,680
60 instead.

87
00:07:37,680 --> 00:07:44,520
And we d forgot properly implemented authentication with the functionality to automatically log a user

88
00:07:44,520 --> 00:07:51,930
in and the functionality to automatically log our user out both after our regular form based logging

89
00:07:52,020 --> 00:07:55,230
or dis auto log in I just talked about.

90
00:07:55,290 --> 00:07:58,320
So this is our finished authentication flow.

91
00:07:58,320 --> 00:08:00,920
Now let's just do some refactoring to clean it up.
