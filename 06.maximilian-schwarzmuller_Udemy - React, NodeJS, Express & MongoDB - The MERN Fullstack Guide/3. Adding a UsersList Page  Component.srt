1
00:00:02,260 --> 00:00:06,520
So now with routing setup let's start working on the actual components and there.

2
00:00:06,520 --> 00:00:12,520
I want to start with the users component the users component is not where we sign up but where even

3
00:00:12,550 --> 00:00:14,080
we're not locked in.

4
00:00:14,080 --> 00:00:18,380
We can see a list of users and how many places they shared.

5
00:00:18,430 --> 00:00:22,560
It's this list of users page here at the very top of our plan.

6
00:00:22,570 --> 00:00:25,810
We created so data for here in the users component.

7
00:00:25,810 --> 00:00:33,520
The goal is to output a list of users you could say so we'll create a new component here already because

8
00:00:33,580 --> 00:00:35,380
splitting is always good.

9
00:00:35,380 --> 00:00:42,300
And in that new component in the user folder in the components folder I want to output my list of users.

10
00:00:42,340 --> 00:00:47,100
So we'll named a component users list J S is the file name.

11
00:00:47,290 --> 00:00:52,270
We will also need some styling so add users list dot c as s here as well.

12
00:00:52,390 --> 00:00:56,860
And I also want to have a separate component for every item in that list.

13
00:00:56,860 --> 00:01:02,200
So I'll have a user item j as fall as well as a user item C is as follows.

14
00:01:02,260 --> 00:01:08,110
Now as always how you exactly split and structure your code is always up to you.

15
00:01:08,200 --> 00:01:11,430
There isn't a single best way there isn't a single right way.

16
00:01:11,560 --> 00:01:18,310
But having a granular structure where every component is relatively small and focused is rarely a bad

17
00:01:18,310 --> 00:01:21,190
idea in this day for what I will do here.

18
00:01:21,220 --> 00:01:28,510
So in users list J.S. I'll set up a default component by importing react from react so that we can use

19
00:01:28,510 --> 00:01:35,050
J as X then we have users list here and we will get some props here because we will get the list of

20
00:01:35,050 --> 00:01:40,990
users from outside later so from the parent component and then it will export this and it will copy

21
00:01:40,990 --> 00:01:48,660
this into user item and just rename users list here to user item both here and then the export numbers

22
00:01:48,700 --> 00:01:49,080
than dead.

23
00:01:49,080 --> 00:01:50,020
It's the same.

24
00:01:50,020 --> 00:01:51,990
I will also import the C is as follows.

25
00:01:52,030 --> 00:01:58,000
So here I import user item not see us s and in the User List in the users list.

26
00:01:58,000 --> 00:02:06,120
J is fall I will import users list dot c as s so that we have the style false imported as well.

27
00:02:07,170 --> 00:02:17,250
Now in the users list component here My idea is to output either a message of no users found if we have

28
00:02:17,250 --> 00:02:24,210
no users in the app yet if we just launched or most of the time when we do have at least one user a

29
00:02:24,210 --> 00:02:25,840
list of our users.

30
00:02:26,040 --> 00:02:33,570
So there are two possible branches of J.S. ex code I want to return and dead in the end will depend

31
00:02:33,570 --> 00:02:40,710
on some data which I expect to get from outside via props so which I expect to get from the parent component.

32
00:02:40,740 --> 00:02:47,610
So here we can add if check and say if props items I expect to get items property the name is up to

33
00:02:47,610 --> 00:02:47,940
you.

34
00:02:47,970 --> 00:02:54,870
You just and later have to use it on your users list component when you use it in J as X as well.

35
00:02:54,870 --> 00:03:00,780
So here I'll go with items as a name for this prop if the length of that because I expect items to be

36
00:03:00,780 --> 00:03:06,690
an array and hence it should have a length property if length is equal to zero which means we have no

37
00:03:06,690 --> 00:03:16,110
users yet I want to return a div with a class name of center which is a class name I defined here in

38
00:03:16,170 --> 00:03:28,910
index CSA s it just centers to contain and in there I want to output a h to tag where I say no users

39
00:03:29,000 --> 00:03:33,270
found so that's my first possibility.

40
00:03:34,140 --> 00:03:39,480
Alternatively if we don't make it in here and that's not dead J is X code we return in this component

41
00:03:39,490 --> 00:03:40,040
therefore.

42
00:03:40,050 --> 00:03:48,090
So if we do have at least one user we will return something else will return an unordered list and then

43
00:03:48,090 --> 00:03:49,300
that unordered list.

44
00:03:49,320 --> 00:03:57,360
I want a map my items which is an array of objects not an array of J is X but an array of vanilla javascript

45
00:03:57,390 --> 00:04:02,080
objects into an array of J as X elements.

46
00:04:02,100 --> 00:04:09,000
So here we can use the curly braces to output a javascript expression or to be precise the result of

47
00:04:09,000 --> 00:04:11,970
that expression in J is X code.

48
00:04:11,970 --> 00:04:18,720
And here I want to go through my items which I get on my props and map every item into a J as X element

49
00:04:18,810 --> 00:04:25,780
so that this can be rendered SJ as X here so every item here will be a user of course you can named

50
00:04:25,780 --> 00:04:32,470
as whoever you want but it will be a user so that name makes sense I guess and I will return a single

51
00:04:32,470 --> 00:04:36,990
user item for every user so we'll import that other component.

52
00:04:37,060 --> 00:04:41,330
Import user item from dot slash user item.

53
00:04:41,350 --> 00:04:49,670
So from that I'll profile here and return user item as a self closing JSA X element by the way here

54
00:04:49,670 --> 00:04:54,980
we can also shorten it is get rid of the curly brace in off the return statement and take advantage

55
00:04:54,980 --> 00:04:58,380
of the shorter arrow function syntax which looks like this.

56
00:04:59,390 --> 00:05:04,880
Now every user item needs to get to that special key property which we don't need to handle inside of

57
00:05:04,880 --> 00:05:09,400
the user item but which react needs to manage lists efficiently and there.

58
00:05:09,410 --> 00:05:16,670
I expect every user to have an I.D. I can expect all of that because we are the one writing this application

59
00:05:16,670 --> 00:05:17,300
code.

60
00:05:17,300 --> 00:05:21,260
So it's our duty to provide the right data later.

61
00:05:21,260 --> 00:05:29,350
I also want to forward the idea of a user on a separate prop to the user item though and I also will

62
00:05:29,350 --> 00:05:37,870
pass on an image which we can output user dot image let's say has that image data and the name of the

63
00:05:37,870 --> 00:05:40,510
user which I expect to get on user dot name

64
00:05:43,470 --> 00:05:51,480
I also want to output to count the number of places does user has created and hence I will pass a place

65
00:05:51,480 --> 00:05:56,040
count property to user item and forward user dot places.

66
00:05:56,040 --> 00:06:02,730
I expect places to be a property on the user object that holds the number of places not the other place

67
00:06:02,730 --> 00:06:04,690
data just a number of places.

68
00:06:04,710 --> 00:06:12,410
This user created so that's a lot of I want to right now nothing of that will happen because all we

69
00:06:12,410 --> 00:06:17,990
have at the moment is a simple user item that receives a bunch of data and doesn't do anything with

70
00:06:17,990 --> 00:06:18,520
that.

71
00:06:18,680 --> 00:06:25,630
And even worse all our logic is based on the assumption that we get items prop in the users list and

72
00:06:25,630 --> 00:06:27,320
that's also not the case.

73
00:06:28,190 --> 00:06:35,480
So before we work on the user item and the styling let's make sure we do pass and the items prop to

74
00:06:35,480 --> 00:06:43,150
the users list and that will be passing as a value is an array of users where every user has the data.

75
00:06:43,250 --> 00:06:49,450
We're trying to extract down their now the question is Where should this be passed in.

76
00:06:49,480 --> 00:06:53,860
Well in our users page that is where I want to use that users list in the end.

77
00:06:53,860 --> 00:07:01,030
So here I will import users list from And now let's go up one level to be back in the user folder and

78
00:07:01,030 --> 00:07:05,500
then into components and then here its users list which I want to import.

79
00:07:05,500 --> 00:07:10,630
And then here I will return users list in the end.

80
00:07:10,720 --> 00:07:16,600
So my page is very simple because I outsource the rendering of the list into a separate component and

81
00:07:16,600 --> 00:07:20,430
that's a default approach in react to keep your components lean.

82
00:07:20,440 --> 00:07:24,180
Only do very few things in every component on its own.

83
00:07:24,310 --> 00:07:27,490
Instead then delegate tasks to other components.

84
00:07:27,490 --> 00:07:32,970
In this case delegated to rendering of the list of users to the user list component.

85
00:07:33,070 --> 00:07:38,560
So now users list requires and items prompt because that's what we try to extract in there.

86
00:07:38,590 --> 00:07:44,260
Right here props items and props items and that should be an array what we pass in as a value should

87
00:07:44,260 --> 00:07:45,560
be an array.

88
00:07:45,640 --> 00:07:54,100
So here in my component I will create a user's constant and that is written in all caps because it's

89
00:07:54,100 --> 00:08:00,220
kind of a dummy constant later in the course we will fetch our users from our back and from our node

90
00:08:00,220 --> 00:08:01,500
express application.

91
00:08:01,600 --> 00:08:06,580
But at the moment we have no such back and so I will work with dummy data for the moment.

92
00:08:06,580 --> 00:08:13,080
So here users is an array an array of objects in our every object will represent a user.

93
00:08:13,240 --> 00:08:18,310
And since we try to extract some data from every user we should make sure that this data is all provided

94
00:08:18,640 --> 00:08:25,660
specifically every user needs to have an I.D. and image a name in places later of course a user will

95
00:08:25,660 --> 00:08:27,360
also have an email and password.

96
00:08:27,400 --> 00:08:29,620
But on this component we're not interested in that.

97
00:08:29,620 --> 00:08:32,980
So here we will never extract that data from a user.

98
00:08:33,010 --> 00:08:35,210
So here it's OK if a user has an I.D..

99
00:08:35,230 --> 00:08:38,860
Let's say you one has a name up to you.

100
00:08:38,860 --> 00:08:43,190
Let's say Mark Schwartz has an image property.

101
00:08:43,690 --> 00:08:49,480
And here I just picked a random image you URL from the web because right now we have no image upload

102
00:08:49,540 --> 00:08:56,200
in our application so we'll have to pick some you or l of some person somewhere in the web and last

103
00:08:56,200 --> 00:09:01,750
but not least every person also needs a place as property and here I'll set this to free any arbitrary

104
00:09:01,750 --> 00:09:03,760
number of your choice.

105
00:09:03,820 --> 00:09:09,940
Now instead users a ray which I'll pass two items and then I will reformat this with a shortcut.

106
00:09:09,940 --> 00:09:11,290
And this is what we get.

107
00:09:11,350 --> 00:09:18,670
So I got one user a year with free places and have forward data Ray off that one user to users list.

108
00:09:18,670 --> 00:09:25,180
Now in users list we then output our user items and in user item nothing happens so time to let something

109
00:09:25,180 --> 00:09:26,920
happen there in the next lecture.
