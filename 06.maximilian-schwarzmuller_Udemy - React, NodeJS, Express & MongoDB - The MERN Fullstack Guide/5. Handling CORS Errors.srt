1
00:00:02,430 --> 00:00:08,550
What's causing this error here this error is a course error.

2
00:00:08,550 --> 00:00:14,500
It is an error you might see sometimes when building something like this when communicating to an API

3
00:00:14,510 --> 00:00:22,350
from inside your front and app course is a security concept it stands for cross origin resource sharing

4
00:00:22,740 --> 00:00:31,350
and the general idea in courts or with this course concept is dead resources on a server can only be

5
00:00:31,350 --> 00:00:35,910
requested by requests that are coming from the same server.

6
00:00:35,910 --> 00:00:39,510
So for our back end which runs on local host five thousand.

7
00:00:39,510 --> 00:00:46,770
The idea is that we can only request data from there from an app that also runs on local host five thousand

8
00:00:46,950 --> 00:00:52,950
which our app of course thousand runs on local host three thousand and you might say it's both on local

9
00:00:52,950 --> 00:00:56,610
host but actually these are two totally different domains.

10
00:00:56,610 --> 00:00:58,470
It's like having a page on your page.

11
00:00:58,470 --> 00:01:01,670
Dot com and the cool backend dot com.

12
00:01:01,680 --> 00:01:08,580
So really two totally separate domains now course is a security concept and forced by the browser which

13
00:01:08,580 --> 00:01:15,510
is why we had no problems with postmen but the browser and for systems and the browser sees that here

14
00:01:15,570 --> 00:01:21,600
we're trying to send a request from local hosts thousand to local host five thousand and hence it does

15
00:01:21,600 --> 00:01:24,000
not take the response by that server.

16
00:01:24,030 --> 00:01:30,060
So it's not a service site error it's a front and error it's an error in our browser because course

17
00:01:30,090 --> 00:01:38,880
is a browser security concept to work around that the server has to attach certain headers to the responses

18
00:01:38,880 --> 00:01:45,750
it sends back to the client that basically allow the client to access the resources and then the browser

19
00:01:45,840 --> 00:01:49,590
automatically detects these headers and sees OK.

20
00:01:49,710 --> 00:01:56,760
It's fine you may access this and the browser will not throw this error here so we need to do some work

21
00:01:56,760 --> 00:02:03,660
on the backend and we need to make sure we attach to right headers to our response and a great place

22
00:02:03,660 --> 00:02:10,140
to do that is in the app J.S. file because we will attach these headers to every response we sent back

23
00:02:10,530 --> 00:02:11,630
on the back end.

24
00:02:11,700 --> 00:02:16,560
So it's not just on user routes it's really on every response.

25
00:02:16,560 --> 00:02:24,120
Therefore a here let's add a middleware before we forward the request to our specific routes here and

26
00:02:24,210 --> 00:02:27,390
we were just a middleware with app use as you learned.

27
00:02:27,390 --> 00:02:33,090
And there I will have a regular middleware function with request response and next.

28
00:02:33,090 --> 00:02:38,880
So basically what we already learned about in previous modules and the idea here is that we don't send

29
00:02:38,880 --> 00:02:46,500
back a response but that we just add certain headers to the response so that when later a response is

30
00:02:46,560 --> 00:02:52,150
sent back from our more specific routes it does have these headers attached.

31
00:02:52,230 --> 00:02:57,620
So here in the end we will call next to let the request continue its journey to other middle wears.

32
00:02:57,810 --> 00:03:04,530
But before we call that we want to add certain headers and we can do that with rest set header.

33
00:03:04,620 --> 00:03:12,750
This sets a header on the response and there we will need to set free headers the first header is access

34
00:03:12,840 --> 00:03:21,870
dash control dash allow dash origin so make sure you don't introduce a typo year it really has to be

35
00:03:21,870 --> 00:03:28,490
named like this the value which is the second argument we passed to set header then can be start.

36
00:03:28,530 --> 00:03:34,770
This basically allows us to control which domains should have access so where the browser should allow

37
00:03:34,770 --> 00:03:35,390
this.

38
00:03:35,460 --> 00:03:41,280
We could restrict us to local host three thousand but actually here on this API I'm fine with opening

39
00:03:41,280 --> 00:03:43,140
this up to any domain.

40
00:03:43,140 --> 00:03:49,380
Keep in mind that this is not a general security concept but that it's just enforced by browsers so

41
00:03:49,380 --> 00:03:55,620
you can't lock down API access in general here for example postmen simply doesn't care about these headers

42
00:03:56,700 --> 00:03:57,450
for the browser.

43
00:03:57,450 --> 00:04:00,520
However this is a first step but not the only step.

44
00:04:00,570 --> 00:04:05,070
It allows any domain to send requests but it's still not enough.

45
00:04:05,070 --> 00:04:11,960
We also need to specify which headers these requests sent by the browser may have.

46
00:04:11,970 --> 00:04:21,810
Therefore we send a new header to the responses the access dash controlled dash allow dash headers header.

47
00:04:21,930 --> 00:04:28,270
This controls which headers incoming requests may have so that they are handled.

48
00:04:28,530 --> 00:04:32,470
We can set this to star as well but here I want to be a bit more specific.

49
00:04:32,580 --> 00:04:41,490
I want to allow the original header the ex requested dash with header the content type header the first

50
00:04:41,490 --> 00:04:47,280
two are basically set automatically but the content type header is one we set explicitly on the front

51
00:04:47,280 --> 00:04:57,930
end D except header which is also set automatically by the browser and also the authorization header

52
00:04:57,930 --> 00:05:03,180
which is not set automatically by the browser but which we will set later in the course.

53
00:05:03,220 --> 00:05:07,940
So we'll already configure it here as a next step here.

54
00:05:07,960 --> 00:05:17,320
I will add a last header and that's the Axis dash control dash allowed dash methods header and this

55
00:05:17,320 --> 00:05:25,270
basically controls which H P methods may be used on the front end or maybe attached to incoming requests

56
00:05:25,690 --> 00:05:31,310
and they don't want to handle get post patch delete requests.

57
00:05:31,420 --> 00:05:38,860
Because if we have a look at our routes these are the type of incoming words we handled there with that

58
00:05:38,860 --> 00:05:44,560
if we saved it our back and restarts and now we should be able to test this again.

59
00:05:44,560 --> 00:05:46,380
Let's go to authenticate again.

60
00:05:46,510 --> 00:05:51,740
Switch to sign up enter our data here and click sign up.

61
00:05:51,800 --> 00:05:55,010
And it now works.

62
00:05:55,010 --> 00:06:00,140
Now you can see that here indeed we are allowing this access.

63
00:06:00,170 --> 00:06:07,250
And here as a response we hence get back our user data with all that entered data.

64
00:06:07,250 --> 00:06:12,710
Now we do still include the password here for example in plain text which we might not want to submit

65
00:06:12,710 --> 00:06:13,870
like this.

66
00:06:13,910 --> 00:06:17,810
It is something we can change later once we add authentication for the moment.

67
00:06:17,810 --> 00:06:19,060
This is fine.

68
00:06:19,220 --> 00:06:22,840
And therefore here we see that the general of flow works.

69
00:06:22,970 --> 00:06:30,630
If we now check our collections on the back end and we go through that learn database here we see there

70
00:06:30,630 --> 00:06:33,000
is a new user's collection in there.

71
00:06:33,020 --> 00:06:35,820
Indeed the user I just created.

72
00:06:35,930 --> 00:06:37,790
So that's not looking too bad.

73
00:06:37,790 --> 00:06:44,960
We are able to send this request and we made a huge step forward deal for of course though that's not

74
00:06:44,990 --> 00:06:50,630
all for example at the moment we're not giving the user of our application any indication that we're

75
00:06:50,630 --> 00:06:52,130
waiting for a response.

76
00:06:52,250 --> 00:06:54,290
And we're also not handling errors.

77
00:06:54,380 --> 00:06:56,570
So we definitely want to do that as well.
