WEBVTT
1
00:00:02.110 --> 00:00:06.120
So to create a new product here we have to well define it.

2
00:00:06.130 --> 00:00:07.830
We have a new javascript object right here.

3
00:00:07.870 --> 00:00:15.400
So in this object I create a new constant named new product maybe this constant will hold an object

4
00:00:15.460 --> 00:00:19.400
which represents the product we want to create and store in the database.

5
00:00:19.510 --> 00:00:23.610
And then this content we now have to provide the structure of a new product.

6
00:00:23.620 --> 00:00:28.420
Now a product code typically have two properties a name and a price for example.

7
00:00:28.420 --> 00:00:31.690
So the name would be our request body.

8
00:00:31.690 --> 00:00:32.380
Right.

9
00:00:32.380 --> 00:00:40.930
And here the Name property second part price would be the same would be all request body and we want

10
00:00:40.930 --> 00:00:44.800
to get the price of our products by the way.

11
00:00:44.800 --> 00:00:47.080
We should also name our database accordingly.

12
00:00:47.080 --> 00:00:52.410
So this should be products not places test places is what we use in our course project.

13
00:00:52.420 --> 00:00:53.970
Therefore the confusion here.

14
00:00:53.980 --> 00:00:58.000
So now we created a new javascript object that represents a new product.

15
00:00:58.000 --> 00:01:01.590
Now we need to get this into our Mongo TB database.

16
00:01:01.600 --> 00:01:03.250
This is the next thing we have to add here.

17
00:01:03.280 --> 00:01:09.460
And for that I'll use a new constant named client maybe here we use a new instance of our Mongo client

18
00:01:09.460 --> 00:01:15.790
that we've previously created and the Mongol client now needs information regarding the server we want

19
00:01:15.790 --> 00:01:17.080
to establish any connection to.

20
00:01:17.200 --> 00:01:21.890
And for us this is about you are L so we can add this constant right here.

21
00:01:22.060 --> 00:01:27.280
Very important note though this part right here does not establish t connection.

22
00:01:27.310 --> 00:01:28.990
We'll do that in a few seconds.

23
00:01:29.020 --> 00:01:31.310
This code just tells Hmong would be.

24
00:01:31.360 --> 00:01:36.940
And the Hmong client which server we want to connect all but initiating the connection is not taking

25
00:01:36.940 --> 00:01:41.340
place at this stage of the code because this is what you will add right now.

26
00:01:41.470 --> 00:01:48.340
And for that will add a try catch block y try catch it because connecting to the server can fail or

27
00:01:48.340 --> 00:01:50.440
creating a product can also fail.

28
00:01:50.470 --> 00:01:56.110
Therefore we want to make sure in case any of these things go wrong then we catch this error and we

29
00:01:56.110 --> 00:01:58.060
stop the code execution for that.

30
00:01:58.060 --> 00:02:05.490
Let's quickly add to catch cold block here in the Arora case and if you have an error we want to return.

31
00:02:05.500 --> 00:02:10.600
That's important you have to return your otherwise to code execution won't stop at this point and we

32
00:02:10.600 --> 00:02:11.900
want it to stop.

33
00:02:11.920 --> 00:02:18.790
So we want to return a response in Jason format and the response should contain a message stating that

34
00:02:19.240 --> 00:02:23.050
we could not store data.

35
00:02:23.950 --> 00:02:29.080
So that's the case but actually we want to make sure that our connection is established and we can use

36
00:02:29.170 --> 00:02:34.150
our client that we defined right here because the client knows that we want to target a specific server

37
00:02:34.240 --> 00:02:40.660
a specific you are L and for that we have an asynchronous task because connecting to the server is a

38
00:02:40.660 --> 00:02:42.160
task that can take a few moments.

39
00:02:42.170 --> 00:02:47.140
Therefore we have an asynchronous operation right here and now we want to refer to our client and here

40
00:02:47.140 --> 00:02:55.030
to the Connect method this number finally established a connection to our Mongo DB server wifi connection

41
00:02:55.030 --> 00:02:57.720
being established we have to continue with what.

42
00:02:58.000 --> 00:03:05.290
Well now we want to access a specific database on that server for that we can create another constant

43
00:03:05.320 --> 00:03:09.280
maybe name it TB for database and we again refer to our client.

44
00:03:09.280 --> 00:03:15.490
But here to DDP effort now and here we can either provide an argument or not if we don't provide an

45
00:03:15.490 --> 00:03:22.090
argument as we do it right here TB will take the connection string so to your elo that is provided up

46
00:03:22.100 --> 00:03:29.260
here no you are L constant we could also provide an argument then TB would take this database now we

47
00:03:29.260 --> 00:03:34.750
got access to the database and what we want to do right now is we actually want to well access a collection

48
00:03:34.840 --> 00:03:40.200
in that database and inside this collection with them on to create a new product.

49
00:03:40.300 --> 00:03:45.880
Here we could now use a new constant resolved in this case and our result should not be added to our

50
00:03:45.880 --> 00:03:49.080
database and here to a new collection right.

51
00:03:49.090 --> 00:03:55.030
The connection is what contains all our different documents and in the collection you know to provide

52
00:03:55.210 --> 00:04:01.450
the name of the collection as an argument in case a collection with the name you provide is not existing.

53
00:04:01.450 --> 00:04:05.630
The collection will be created automatically among would you be in case the collection is existing.

54
00:04:05.860 --> 00:04:09.870
But then the document will be added to this existing collection in our case.

55
00:04:09.940 --> 00:04:18.700
I will name the collection products here and now inside this collection we want to insert one as you

56
00:04:18.700 --> 00:04:20.540
can see have different insert methods.

57
00:04:20.550 --> 00:04:26.800
All too many but in our case we want to insert one single new document one single new product and this

58
00:04:26.800 --> 00:04:36.590
new product we want to insert is our new product right here with that we almost have a working code

59
00:04:36.590 --> 00:04:36.970
right here.

60
00:04:36.980 --> 00:04:42.680
So we open the connection got database access that access to the collection and created a new document

61
00:04:42.950 --> 00:04:44.450
and we catch any errors.

62
00:04:44.490 --> 00:04:50.210
What's missing now here is the closing of our connection because if you open the connection it will

63
00:04:50.210 --> 00:04:52.600
remain open until you manually close it.

64
00:04:52.760 --> 00:04:59.060
And that's not necessarily what you want because having opened hundreds of connections is not very efficient

65
00:04:59.150 --> 00:05:03.000
and also not the way you should interact with your database.

66
00:05:03.020 --> 00:05:09.250
Therefore after each creation of a new product we should make sure that our current connection is closed.

67
00:05:09.350 --> 00:05:14.930
Therefore we again refer to our client and now to the close method with that connection it is closed

68
00:05:15.350 --> 00:05:17.880
and we also should send a response here.

69
00:05:17.900 --> 00:05:24.440
So we refer to our response and refer to the adjacent method and to Europe want to send back our newly

70
00:05:24.440 --> 00:05:26.150
created product.

71
00:05:26.150 --> 00:05:28.360
So this would be our basic syntax here.

72
00:05:28.370 --> 00:05:33.900
What is missing of course is the connection to our aptly as file because at the moment D monger j ust

73
00:05:33.900 --> 00:05:34.730
file is not related.

74
00:05:34.760 --> 00:05:43.240
So we should make sure that once we enter our post path with Slash products well then our manager s

75
00:05:43.240 --> 00:05:48.630
code should be executed and therefore we should be able to create a new product to do so.

76
00:05:48.650 --> 00:05:55.960
We need to import the failure for that let's create a new constant and let's maybe call it Mongol practice

77
00:05:55.960 --> 00:05:58.130
right here and here we require

78
00:06:00.870 --> 00:06:06.100
all filed this is located in thoughts slash Mongol.

79
00:06:06.110 --> 00:06:13.160
No need to add defied extension right here and now we can add Mongol practice as an argument for the

80
00:06:13.160 --> 00:06:13.980
post method.

81
00:06:14.000 --> 00:06:18.050
And here we have to refer to create product because that's what we want to do right here.

82
00:06:18.050 --> 00:06:23.010
We're going to create a new product so this was a lot of work.

83
00:06:23.020 --> 00:06:31.440
Let's now start our development server with NPM start and now go to postmen and create a new post request

84
00:06:33.100 --> 00:06:40.750
targeting local host 3000 slash products and you want to create a new product.

85
00:06:40.760 --> 00:06:50.060
Therefore we have to provide the body raw and the Jason format here and our body must contain a name.

86
00:06:50.440 --> 00:07:00.480
The name is maybe Apple here and the price may be 99 cents right here so let's see if we now sent this

87
00:07:00.480 --> 00:07:01.830
request.

88
00:07:01.860 --> 00:07:07.080
Yeah we see we get back the name price and decided this was automatically added among wouldbe that's

89
00:07:07.110 --> 00:07:08.960
a default feature in the end.

90
00:07:09.270 --> 00:07:14.190
We will have a look at the idea what it is and how it works towards the end of this module.

91
00:07:14.190 --> 00:07:20.290
So for the moment you can just ignore it and if we now go to our database here's our cluster right.

92
00:07:20.310 --> 00:07:21.570
And then two collections

93
00:07:24.320 --> 00:07:26.860
we can see the products test database.

94
00:07:26.870 --> 00:07:32.230
Now this database was created due to the fact that we named it products test and we get the products

95
00:07:32.240 --> 00:07:37.760
collection that's a collection name that we defined and in this collection we now got our first document

96
00:07:38.150 --> 00:07:40.350
the apple for pseudocode ninety nine.

97
00:07:40.400 --> 00:07:47.380
So this is working fine now with that we are now able to create new products in our among would be database.

98
00:07:47.420 --> 00:07:50.120
The next step now is to work on getting the products.
