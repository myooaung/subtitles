WEBVTT
1
00:00:02.200 --> 00:00:04.100
To make sure does looks good on mobile view.

2
00:00:04.120 --> 00:00:05.430
There are two main things.

3
00:00:05.440 --> 00:00:12.130
The first one is simple in main navigation here on the NAF element which wraps NAF links add a class

4
00:00:12.460 --> 00:00:17.410
which should be main dash navigation underscore underscore header dash Nath.

5
00:00:17.580 --> 00:00:18.490
If you do that.

6
00:00:18.610 --> 00:00:24.370
Thanks to the provided CSF styling you see now the links here on the right are gone.

7
00:00:24.430 --> 00:00:30.250
But now we need to enable that button here and make sure we estimate and show a side draw which gives

8
00:00:30.250 --> 00:00:33.120
us our links to do that.

9
00:00:33.160 --> 00:00:37.360
We have to go to site draw of course and work on that a little bit.

10
00:00:37.420 --> 00:00:49.340
So here it will import react from react and import dot slash side draw dot see as s and then create

11
00:00:49.370 --> 00:00:56.100
the side draw here as a component and export it of course as we always do

12
00:00:59.760 --> 00:01:02.260
and now in here in the side draw.

13
00:01:02.620 --> 00:01:06.790
I want to do a couple of things which we haven't done before.

14
00:01:06.790 --> 00:01:11.260
For one I want to add animations so that it slides in and slides out.

15
00:01:11.560 --> 00:01:19.290
And I also want to render it in a different part of the page then where I will include the draw.

16
00:01:19.290 --> 00:01:21.060
Now what do I mean by that.

17
00:01:21.070 --> 00:01:24.340
Well for this let's first of all return an aside here.

18
00:01:24.340 --> 00:01:31.420
A default H html element which should render props children dead will be my draw for data will add a

19
00:01:31.420 --> 00:01:33.940
class name here which is site Dash.

20
00:01:33.940 --> 00:01:36.310
Draw just like that.

21
00:01:36.970 --> 00:01:42.830
Now attached you find a site draw see as this file and you can copy its content here into site or see

22
00:01:42.820 --> 00:01:51.600
as s now with that let's use the site draw in main navigation in main navigation.

23
00:01:51.850 --> 00:02:03.140
I WANT TO RENDER IT NEXT TO THE MAIN HEADER so I will import side draw from dot slash site draw and

24
00:02:03.140 --> 00:02:06.050
now render it for example here.

25
00:02:06.170 --> 00:02:07.110
Side draw.

26
00:02:07.220 --> 00:02:17.240
Opening and Closing Tax because inside I want to have a nav element with a class name of main dash navigation

27
00:02:17.330 --> 00:02:22.600
underscore underscore draw Nath which is basically opposite to my header Nath.

28
00:02:22.610 --> 00:02:29.090
If we are in a smaller screen and dare I again want to pass on my nav links I set up styling which is

29
00:02:29.090 --> 00:02:35.000
flexible enough to render NAF links horizontally or vertically depending on whether we're on the smaller

30
00:02:35.000 --> 00:02:42.240
screen and hence a draw or on a bigger screen and hence in the header but here we have a syntax error

31
00:02:42.600 --> 00:02:46.160
in react and that is just a rule you have to memorise.

32
00:02:46.260 --> 00:02:53.280
You must only have one route it she has X element per component you can't have as many nested as you

33
00:02:53.280 --> 00:02:59.310
want but here having a site or next to a main header as the values we returned won't work.

34
00:02:59.460 --> 00:03:03.330
And that's actually not a react limitation it's a javascript limitation.

35
00:03:03.330 --> 00:03:08.940
In a normal function you can't return to numbers like this for example even if that just doesn't work

36
00:03:09.890 --> 00:03:17.010
so to return multiple root level elements react gives you a special wrapper react dot fragment.

37
00:03:17.060 --> 00:03:20.680
This doesn't render any real H to Al element to the screen.

38
00:03:20.810 --> 00:03:26.320
It just fulfills this requirement of having one root element and then in there you can have as many

39
00:03:26.330 --> 00:03:30.230
side by side or nested elements as you want.

40
00:03:30.230 --> 00:03:35.060
So now we need react fragment and now we can render the draw if we save this.

41
00:03:35.150 --> 00:03:38.300
Here is our draw and it works that's great.

42
00:03:38.300 --> 00:03:44.570
But of course we can't close it we can't open it and it's also not animated because it's also always

43
00:03:44.570 --> 00:03:51.050
stare I guess in addition to that however if we inspect this in the real Dom we see our draw does a

44
00:03:51.060 --> 00:03:58.190
side is rendered here in the root which isn't too bad but semantically since this really is an overlay

45
00:03:58.190 --> 00:04:02.780
to the entire page I would rather have it being rendered right under body.

46
00:04:02.780 --> 00:04:09.560
So somewhere here which leads to the same result regarding the tail the look of it but semantics is

47
00:04:09.560 --> 00:04:10.460
a bit different.

48
00:04:10.460 --> 00:04:16.430
It's a tiny thing but still something which I'd like to have we can implement this with a concept called

49
00:04:16.430 --> 00:04:17.760
react portals.

50
00:04:17.810 --> 00:04:18.830
Let's have a look at that.
