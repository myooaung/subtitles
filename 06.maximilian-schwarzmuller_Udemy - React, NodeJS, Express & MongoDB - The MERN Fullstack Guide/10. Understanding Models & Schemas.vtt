WEBVTT
1
00:00:02.440 --> 00:00:04.640
So let's not create our product schema here.

2
00:00:04.690 --> 00:00:10.750
Now besides the schema of also create a so-called model D schema is basically the blueprint for our

3
00:00:10.750 --> 00:00:16.660
product and the model it builds up on the blueprint and then allows us to really use that schema in

4
00:00:16.720 --> 00:00:19.170
our project but would see the step by step now.

5
00:00:19.450 --> 00:00:23.890
Therefore I refer to both schema and model as well kind of interchangeable here.

6
00:00:23.890 --> 00:00:25.990
What does a product look like in the end.

7
00:00:25.990 --> 00:00:29.170
Well if we go through Mongo s file we can seed up here already.

8
00:00:29.200 --> 00:00:30.480
We have a pretty simple product.

9
00:00:30.490 --> 00:00:36.430
We only need a name and a price in the end therefore let's not create this schema for our product.

10
00:00:36.430 --> 00:00:40.380
And typically you create a new folder named models for example.

11
00:00:40.540 --> 00:00:47.300
And in this folder we now create our file for our product schema and therefore naming it product J.S.

12
00:00:47.320 --> 00:00:52.600
file is probably not the first decision here now to create the schema.

13
00:00:52.600 --> 00:01:00.770
We need to import Mongoose first so we create a new constant named Mongoose and d require syntax and

14
00:01:00.790 --> 00:01:03.400
people require Mongols here.

15
00:01:03.400 --> 00:01:09.430
So with that package imported now we want to create the schema for that we create another constant maybe

16
00:01:09.440 --> 00:01:15.860
named product schema here and this constant now refers to the imported Mongoose package and here to

17
00:01:15.860 --> 00:01:19.550
these schema method important with a capital S here.

18
00:01:19.550 --> 00:01:23.330
Now it turns out that this schema method here is a construct a function.

19
00:01:23.330 --> 00:01:29.510
Therefore if we add new right here we can pass in a javascript object and this object then defines the

20
00:01:29.510 --> 00:01:34.860
structure of a newly created product and therefore off the document that we want to store.

21
00:01:34.880 --> 00:01:38.600
Now we saw that the product contains two properties the name and the price.

22
00:01:38.600 --> 00:01:44.180
So let's start with the name here and in its simplest form now we can all simply add a string for example

23
00:01:44.180 --> 00:01:44.800
to define it.

24
00:01:44.810 --> 00:01:49.380
Our name should be well a string but Mongoose actually gives us more power than this.

25
00:01:49.460 --> 00:01:56.180
We can pass in a javascript object here and now say that it should be of type String and we can also

26
00:01:56.180 --> 00:02:01.430
pass an additional properties for example you required property and set this to true.

27
00:02:01.460 --> 00:02:05.780
This will simply mean that we have to provide the name here and you actually got more properties you

28
00:02:05.780 --> 00:02:11.490
can add to a schema you can find this here in the official Mongoose stocks if you click onto a read

29
00:02:11.490 --> 00:02:17.570
the docs here you get a nice general introduction to the old schema topic here and if you click on schema

30
00:02:17.600 --> 00:02:24.570
types and scroll down a bit then you'll see all schema types here.

31
00:02:24.590 --> 00:02:29.420
Here we use require you cannot use default and so on so you can dive deeper at this point if you want

32
00:02:29.420 --> 00:02:29.660
to.

33
00:02:30.200 --> 00:02:32.150
But for our purposes this should be fine.

34
00:02:32.210 --> 00:02:37.820
So let's now define also the private property again we pass in a javascript object this time not of

35
00:02:37.820 --> 00:02:38.490
type String No.

36
00:02:38.510 --> 00:02:43.570
But this should be a number and it should also be required.

37
00:02:43.580 --> 00:02:49.010
So this is our schema already but as I said before to be able to use the schema which Indian is the

38
00:02:49.010 --> 00:02:55.100
blueprint for a document a product we want to create we need to add a model based on the schema of the

39
00:02:55.100 --> 00:02:58.760
model we can then use the schema in our app in the end.

40
00:02:59.180 --> 00:03:02.070
To do that we again refer to our Mongoose package here.

41
00:03:02.120 --> 00:03:05.960
But this time we use the modern function here.

42
00:03:05.960 --> 00:03:08.000
The model function requires two arguments.

43
00:03:08.000 --> 00:03:10.720
The first argument is the name of the schema.

44
00:03:10.910 --> 00:03:15.560
But in our case product would be a fitting name by the way when we used this model.

45
00:03:15.560 --> 00:03:19.730
This would also become the name of the collection without the capital starting character though and

46
00:03:19.730 --> 00:03:23.810
the plural form so our collection will be called products then which was kind of a ring name.

47
00:03:23.810 --> 00:03:28.640
And the second argument should refer to the name of the schema that we created.

48
00:03:28.880 --> 00:03:33.950
And as we also want to use this model in other files we will create a mongoose J.S. fight in the next

49
00:03:33.950 --> 00:03:34.640
lecture.

50
00:03:34.670 --> 00:03:43.730
We also have to export it with the export syntax so module dot exports is equal to our Mongoose model.

51
00:03:43.800 --> 00:03:49.110
So this is our model and let's not see how we can use this to create a new product.
