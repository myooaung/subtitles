WEBVTT
1
00:00:02.400 --> 00:00:06.570
So let's continue working on our connection between front and back end.

2
00:00:06.570 --> 00:00:09.680
And let's now focus on adding places.

3
00:00:09.810 --> 00:00:13.990
That's something which is missing right now which of course should work too.

4
00:00:14.010 --> 00:00:19.060
So in the front and under Places Pages new place.

5
00:00:19.090 --> 00:00:22.440
Yes of course I want to send the request here into place.

6
00:00:22.470 --> 00:00:26.450
Submit handler instead of console logging this here.

7
00:00:26.520 --> 00:00:27.900
Now that shouldn't be too hard.

8
00:00:27.930 --> 00:00:38.390
We can import our custom hook so we import use HP Client from a shared folder to hooks folder.

9
00:00:38.390 --> 00:00:46.990
The HP hook file and then justice before execute does here in this new place component use object restructuring

10
00:00:47.050 --> 00:00:52.320
to get the interesting pieces out of it like is loading our or a sand request.

11
00:00:52.330 --> 00:00:53.740
And of course clear error.

12
00:00:54.400 --> 00:00:56.430
And now we can use all of that here.

13
00:00:56.440 --> 00:01:03.460
So for example here once we submit it the place I want to send my request of course to you are L Here

14
00:01:03.490 --> 00:01:12.960
is HP local hosted 5000 slash API slash places and then let's check our backend here.

15
00:01:12.970 --> 00:01:15.870
Other places routes we see for creating a new place.

16
00:01:15.880 --> 00:01:17.160
It's really just slash.

17
00:01:17.170 --> 00:01:25.070
Nothing there after it is a post request as we just saw in the back end.

18
00:01:25.140 --> 00:01:31.560
And for the data which is attached it has to be Jason data here sold string of fighters and pass on

19
00:01:31.570 --> 00:01:38.120
the object which needs to have a title needs to have a description needs to have an address and all

20
00:01:38.160 --> 00:01:43.270
important on the places controller in the create place function.

21
00:01:43.440 --> 00:01:49.950
We see we also try to extract the creator so the I.D. of the user who is responsible for this place.

22
00:01:50.610 --> 00:01:52.760
So we should provide all that information here

23
00:01:55.390 --> 00:02:03.070
title of course here is from state inputs dot title dot value because on this form we are managing title

24
00:02:03.070 --> 00:02:10.060
description and address so we can all the copy does to also pass on the description from form state

25
00:02:10.090 --> 00:02:15.360
inputs description entered here the address from form state inputs address.

26
00:02:15.460 --> 00:02:21.730
Now for the creator we have a problem at the moment we're not really managing the user I.D. here on

27
00:02:21.730 --> 00:02:28.070
the front and in a central place now with the help of our off context we could actually do that.

28
00:02:28.120 --> 00:02:31.480
We're currently just managing is logged in here.

29
00:02:31.480 --> 00:02:37.810
We could also manage a user I.D. here which initially let's say is NULL which we then want to send once

30
00:02:37.810 --> 00:02:39.460
a user is locked in.

31
00:02:39.520 --> 00:02:47.730
So here in the app yes where we do manage to data for our off context we could manage user I.D. as a

32
00:02:47.730 --> 00:02:55.400
new state and set user I.D. here on log in on this log in function we could expect the user I.D. to

33
00:02:55.400 --> 00:03:01.590
use ideas argument and then call set user I.D. here and set it to that user I.D..

34
00:03:01.890 --> 00:03:08.400
And when we log out we reset it and said user I.D. back to now and then we feed dead user I.D. back

35
00:03:08.430 --> 00:03:10.110
into our context.

36
00:03:10.140 --> 00:03:17.640
So down there where we set the value we now also set user I.D. and we set that to the user I.D. state

37
00:03:17.640 --> 00:03:18.900
we're managing here.

38
00:03:19.230 --> 00:03:26.340
Now actually we could Wired is all up and go to the off page and there when we call log in we want to

39
00:03:26.340 --> 00:03:28.980
forward that I.D. we get back.

40
00:03:28.980 --> 00:03:36.510
So here from send request we do actually get back response data both for logging in and for a signing

41
00:03:36.510 --> 00:03:37.260
up.

42
00:03:37.260 --> 00:03:43.140
And if we have a brief look at the back end again we see the data which we do get back there in sign

43
00:03:43.140 --> 00:03:50.940
up for example is our created user here and the same for logging in there we also in the end can return

44
00:03:50.940 --> 00:03:57.630
our user at the moment I'm just returning a message here but I can return existing user Queue object

45
00:03:58.230 --> 00:04:00.090
getters true here

46
00:04:02.960 --> 00:04:06.020
and map that to a user property.

47
00:04:06.110 --> 00:04:08.260
With this we return to user data as well.

48
00:04:08.270 --> 00:04:14.330
And on that user object we of course can get the I.D. so we can it on the back end and on the front

49
00:04:14.330 --> 00:04:21.200
end to respond state and now has to I.D. so on response data we can now access a certain key and for

50
00:04:21.200 --> 00:04:24.230
that let's go back to the back and really quick again for logging in.

51
00:04:24.230 --> 00:04:28.860
It's the user key which holds our user for signing up it's the same.

52
00:04:29.000 --> 00:04:35.570
So we access dot user here dot I.D. and that should be our user I.D. we can do that both for signing

53
00:04:35.570 --> 00:04:36.880
up and for logging in.

54
00:04:37.010 --> 00:04:44.630
And now we should actually manage that idea globally in our front end and now back on NEW PLACE creator

55
00:04:45.710 --> 00:04:51.560
is actually the idea of the user which we can now get from our off context.

56
00:04:51.560 --> 00:05:01.070
So there we just need to import used context from react and import auth context from this file here

57
00:05:02.320 --> 00:05:15.850
so import of context from shared context of context and then in here is simply get access to this by

58
00:05:15.850 --> 00:05:18.340
using our off context.

59
00:05:18.340 --> 00:05:22.330
This sets up a listener to our context here in the new place component.

60
00:05:22.330 --> 00:05:27.430
And on this off object we can now retrieve the user I.D. That's the idea at least.

61
00:05:27.430 --> 00:05:34.090
So here we can point that off user I.D. and attach this to the outgoing request as well.

62
00:05:34.110 --> 00:05:40.150
Now let's add async in front of this function here so that here we can use a wait.

63
00:05:40.200 --> 00:05:49.920
So do we know once this is done I also want to wrap this with try catch so that we can continue differently

64
00:05:49.950 --> 00:05:53.460
in a success case than we do in the error case.

65
00:05:53.490 --> 00:05:58.410
So here in the error case I don't need to do anything actually because we set the error state instead

66
00:05:58.410 --> 00:05:59.250
of our hook.

67
00:05:59.460 --> 00:06:06.840
But in the success case I later want to redirect the user to a different page.

68
00:06:06.840 --> 00:06:13.410
We can do this as a next step though for the moment let's instead take advantage of is loading and error

69
00:06:13.500 --> 00:06:14.940
and clear error.

70
00:06:14.940 --> 00:06:23.630
And for that I will again import components we used before the error or modal from shared components

71
00:06:26.160 --> 00:06:39.440
you are UI elements error or modal and also import the loading spinner from shared components UI elements

72
00:06:39.590 --> 00:06:41.240
loading spinner.

73
00:06:41.240 --> 00:06:49.700
And now we can use that here if we scroll down to our J is X code and for 1 Wrap the form with react

74
00:06:49.700 --> 00:06:57.020
fragment so that we can have multiple top level J as X elements here because next to the form I want

75
00:06:57.020 --> 00:07:05.000
to add my error or modal here and forward a potential error we might be having and on clear on the other

76
00:07:05.000 --> 00:07:12.020
hand Justice before should point at the clear error function and for the loading state inside of the

77
00:07:12.020 --> 00:07:19.940
form I will check if we are loading and if we are loading I want to render the loading spinner in that

78
00:07:20.090 --> 00:07:28.580
as overlay mode which I set by adding this prop for now safeties let's give it a try let's go back here

79
00:07:28.610 --> 00:07:30.580
and log in real quick.

80
00:07:30.800 --> 00:07:38.060
That hopefully sets our user I.D. and I now go to ad place and add a place here like the Marine plots

81
00:07:38.480 --> 00:07:47.600
a great place in Munich and the address is Marine plots one in Munich let's say a click ad place I get

82
00:07:47.600 --> 00:07:51.140
an error Invalid inputs Pass please check your data.

83
00:07:51.160 --> 00:07:58.550
OK let's check the outgoing request and the network tab there does read request is the one which failed

84
00:07:59.320 --> 00:08:06.070
and let's see what did we attach a stay the I did attach all my data here including the creators so

85
00:08:06.070 --> 00:08:12.870
that's looking good we got dead user ideas it seems and still I get back invalid inputs past please

86
00:08:12.870 --> 00:08:20.940
check your data so something was not liked about that data which I attached here and yep I know what

87
00:08:20.940 --> 00:08:27.390
the problem is it can be difficult to spot this issue though when I sent the request here in New Place

88
00:08:27.540 --> 00:08:35.280
I do add to your l the method and the body what am I not setting here the headers and I said we would

89
00:08:35.280 --> 00:08:43.050
need to add the content type header and set it to application Jason otherwise the body parts are on

90
00:08:43.050 --> 00:08:48.270
the back and would not be able to parse that and correctly data for the back end would not find the

91
00:08:48.420 --> 00:08:50.240
appropriate data.

92
00:08:50.310 --> 00:08:57.000
So now with that added here with this header added on the front then let's try this again let's log

93
00:08:57.000 --> 00:09:07.480
in again create a place here the Marine plots right place in Munich and at this address and click Add

94
00:09:07.480 --> 00:09:14.890
place and now at least we get a different error it fails but with a different error the message is creating

95
00:09:14.890 --> 00:09:15.910
place failed.

96
00:09:15.910 --> 00:09:22.060
Please try again it's a five hundred status code so not a validation error and this area now has a very

97
00:09:22.060 --> 00:09:24.130
tricky error source.

98
00:09:24.220 --> 00:09:27.910
Keep in mind that on the back end we're working with transactions here.

99
00:09:27.910 --> 00:09:28.340
Right.

100
00:09:28.360 --> 00:09:35.440
And if you're working with transactions this on the fly collection creation which normally works won't

101
00:09:35.440 --> 00:09:36.130
work.

102
00:09:36.400 --> 00:09:43.690
So you need to make sure that you first of all create a new place this collection here in your database

103
00:09:44.050 --> 00:09:46.360
before this operation can succeed.

104
00:09:46.360 --> 00:09:52.360
This is of course just a one time task you only do this when you set up your application for the first

105
00:09:52.360 --> 00:10:00.410
time with the place's collection added here if we now click Add place this should succeed and this is

106
00:10:00.410 --> 00:10:01.690
looking pretty good to me.

107
00:10:01.790 --> 00:10:08.210
We get back a success status code we're not redirected because we have no logic for that but we do get

108
00:10:08.210 --> 00:10:14.750
the right status code and if we now inspect our places collection year we should see our new place here

109
00:10:15.170 --> 00:10:23.650
we see it points at a user who ends with 1 5 is 7 and if we have a look at our users we see that's this

110
00:10:23.650 --> 00:10:29.170
first user and there if we have a look at the places array we see that idea of the place we just added

111
00:10:29.410 --> 00:10:39.650
which ends with 0 5 6 1 6 that's this place so storing places works now on the front and I just want

112
00:10:39.650 --> 00:10:42.110
to make sure that if we do succeed.

113
00:10:42.410 --> 00:10:47.540
So here instead of this comment we really do redirect and that's easy to do.

114
00:10:47.690 --> 00:10:53.790
We can import something from react ruder Dom and that's the use history hook from.

115
00:10:53.780 --> 00:10:56.470
React or dom.

116
00:10:56.540 --> 00:11:01.550
So it's a custom hook provided by this package you could say and it's very easy to use.

117
00:11:01.550 --> 00:11:08.390
You just executed let's say here after our custom hooks we call you as history and this gives you a

118
00:11:08.390 --> 00:11:13.370
so-called history object which you can store in a constant a constant.

119
00:11:13.370 --> 00:11:14.910
I will here name history.

120
00:11:14.930 --> 00:11:21.680
The name is up to you and you can then use this to redirect because it is history object has a push

121
00:11:21.710 --> 00:11:27.470
and a replace method for example which allows you to go to a new page by adding it on the stack or by

122
00:11:27.470 --> 00:11:29.210
replacing the current page.

123
00:11:29.210 --> 00:11:35.400
And here I want to allow the user to go back after the navigation cycle push and I will push to user

124
00:11:35.420 --> 00:11:42.080
to slash nothing so to the starting page with that if we save all of that and we create a no place here

125
00:11:42.410 --> 00:11:48.560
in our application we first of only to log in later we will ensure that users stay locked in for the

126
00:11:48.560 --> 00:11:53.040
moment we'll have to re log in and then I will add a new place here.

127
00:11:53.150 --> 00:12:07.540
Empire State Building and amazing skyscraper and here I search for Empire State Building in New York.

128
00:12:07.550 --> 00:12:11.590
Let's see where that works if I click ad place.

129
00:12:11.720 --> 00:12:15.860
This seems to work and we are redirected as you can clearly tell.

130
00:12:15.980 --> 00:12:22.160
And now just to double check if we reload this page here in the collections screen we should now see

131
00:12:22.160 --> 00:12:28.190
two documents and one of them is the Empire State Building with the automatically fetched location and

132
00:12:28.190 --> 00:12:34.540
so on and our a user with whom I logged in should now have two places at whom it points.

133
00:12:34.550 --> 00:12:36.190
So this is working.

134
00:12:36.260 --> 00:12:43.520
And with that let's ensure that now that we can add places we can all to fetch them on a per user basis

135
00:12:43.520 --> 00:12:44.990
if I click on a user.

136
00:12:45.080 --> 00:12:47.470
And don't worry that they're all looking the same here.

137
00:12:47.480 --> 00:12:51.850
Later we will add a functionality to upload your own profile picture.

138
00:12:51.860 --> 00:12:56.870
So for now let's make sure and when I click on Max here I do actually fetch the actual places off that

139
00:12:56.870 --> 00:13:02.990
user of course that is something you can try on your own first before we then do it together in the

140
00:13:02.990 --> 00:13:03.830
next Deckchair.
