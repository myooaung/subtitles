1
00:00:02,160 --> 00:00:07,830
So back in our code again I got two windows one for the back end and one for the front then you can

2
00:00:07,830 --> 00:00:09,750
see it on the top left corner.

3
00:00:10,170 --> 00:00:16,400
And I want to start on the back and there I want to start by ensuring that we are generating such a

4
00:00:16,400 --> 00:00:17,340
token.

5
00:00:17,340 --> 00:00:23,810
But I actually want to start one step earlier when a new user signs up when we create a new user.

6
00:00:23,820 --> 00:00:30,330
Right now we always stored a password as plaintext in the database and thus far this was OK because

7
00:00:30,330 --> 00:00:32,590
we had no real authentication anyways.

8
00:00:32,790 --> 00:00:40,410
But now I want to change that because we never ever should store passwords as plain text in the database.

9
00:00:40,410 --> 00:00:40,950
Why.

10
00:00:41,460 --> 00:00:48,940
Well if our database gets compromised by an intruder or by an employee who isn't happy.

11
00:00:48,960 --> 00:00:55,920
So if someone gets access to our database and is able to extract data from there if the password is

12
00:00:55,920 --> 00:01:01,770
stored in plain text this attacker has everything all the information it needs.

13
00:01:01,770 --> 00:01:04,640
If the password instead is encrypt it.

14
00:01:04,680 --> 00:01:11,370
So if it's a string which can't be decomposed to the original password then the attacker might still

15
00:01:11,370 --> 00:01:18,060
have to email and the name which is bad enough but at least the attacker doesn't have the valid password.

16
00:01:18,060 --> 00:01:23,820
So the data which can be extracted is less useful therefore we don't want to stored a password like

17
00:01:23,820 --> 00:01:27,780
this but instead encrypted hash it before we store it.

18
00:01:28,440 --> 00:01:34,350
And for that we can install a third party library with NPM installed dash dash safe in the name of that

19
00:01:34,350 --> 00:01:35,910
library is be tripped.

20
00:01:35,910 --> 00:01:44,460
J.S. This is a notorious library that helps us create secure passwords or not create passwords but hash

21
00:01:44,460 --> 00:01:50,790
passwords which means encrypt them convert them to a unreadable string or to a string which can't be

22
00:01:50,790 --> 00:01:53,580
reverse engineered to be precise.

23
00:01:53,580 --> 00:01:59,720
So with that installed we can rerun NPM start and now in the user's controller.

24
00:02:00,120 --> 00:02:02,370
I want to import does library.

25
00:02:02,370 --> 00:02:09,610
So there I will import be tripped by requiring be tripped J.S. like this.

26
00:02:09,930 --> 00:02:13,350
This library now helps us with hashing passwords.

27
00:02:13,380 --> 00:02:21,170
So in the create user function and the sign up function here therefore we first of all still check if

28
00:02:21,170 --> 00:02:22,090
we have a user.

29
00:02:22,100 --> 00:02:23,250
That's fine.

30
00:02:23,510 --> 00:02:30,380
But if we come to the conclusion that we can create a new user I don't want to create this password

31
00:02:30,380 --> 00:02:38,690
but instead as I said such a hashed password now to generate this we can call B crypt and then there

32
00:02:38,690 --> 00:02:46,010
we have a hash method to the hash method we pass in the password we want to hash and that is the password

33
00:02:46,070 --> 00:02:48,140
we're extracting from the incoming request.

34
00:02:48,380 --> 00:02:54,890
So the plain text password a little side note by the way of course data between the front end and the

35
00:02:54,890 --> 00:02:58,410
server should be exchanged why are H2 G.P.S..

36
00:02:58,610 --> 00:03:04,400
But data is something which you don't control here in this controller or on the front end but in the

37
00:03:04,400 --> 00:03:08,020
end with the service you use for hosting your application.

38
00:03:08,030 --> 00:03:14,930
So I assume that this is the case in production by the time we receive the password on the server side.

39
00:03:14,930 --> 00:03:22,020
We of course automatically unpack it back to plain text but ideally it was transmitted while HBP yes.

40
00:03:22,850 --> 00:03:29,720
So once we got the password here we pass it to hash and then hash all that takes a second argument which

41
00:03:29,720 --> 00:03:33,980
is the so-called salt or the number of salting rounds.

42
00:03:33,980 --> 00:03:36,570
Now here 12th is a good value.

43
00:03:36,680 --> 00:03:43,880
And this simply influences the strength of the hash and how easy or hard it is to reverse engineer it

44
00:03:44,330 --> 00:03:49,460
and with twelve salting rounds we should have a hash which can't be reverse engineered and which still

45
00:03:49,460 --> 00:03:56,450
doesn't take hours to generate now hash then returns a promise.

46
00:03:56,480 --> 00:04:02,690
So since we're already in a async function year thanks to async in front of our function parameters

47
00:04:03,230 --> 00:04:11,480
we can of course await this generation and the result will be the hashed password here.

48
00:04:11,480 --> 00:04:13,840
Now of course as always this could fail.

49
00:04:13,880 --> 00:04:14,990
It shouldn't but it could.

50
00:04:14,990 --> 00:04:19,980
So let's wrap it with try catch and catch any potential errors here.

51
00:04:20,090 --> 00:04:21,600
And if we got an error here.

52
00:04:21,620 --> 00:04:27,190
Well then I will create a new HP error and say could not create user.

53
00:04:27,190 --> 00:04:34,530
Please try again and send back a 500 status code because this that is some kind of technical server

54
00:04:34,530 --> 00:04:35,780
side error.

55
00:04:36,050 --> 00:04:43,740
And then we can return this error with next year as we did it before so normally we should make it past

56
00:04:43,770 --> 00:04:45,330
this try catch block though.

57
00:04:45,510 --> 00:04:48,240
And then we have a hashed password.

58
00:04:48,240 --> 00:04:54,630
Now when we create a new user we set the password key the password property of that user object to that

59
00:04:54,630 --> 00:04:58,950
hashed password now and we don't store a plain text password Dale for.

60
00:04:59,010 --> 00:05:04,560
But the hash password now was that we stored his hash password.

61
00:05:04,560 --> 00:05:09,960
But of course the next question is how do we identify the user by the password then.

62
00:05:10,020 --> 00:05:13,170
Because comparing passwords like this won't work anymore.

63
00:05:13,350 --> 00:05:19,530
After all in the database we won't have to plaintext password so we can't compare it to password entered

64
00:05:19,530 --> 00:05:20,760
by the user.

65
00:05:20,760 --> 00:05:26,860
And if we did this if we're assured that we have the right password how do we generate this token.

66
00:05:26,910 --> 00:05:29,410
These are the next questions we have to take care of.
