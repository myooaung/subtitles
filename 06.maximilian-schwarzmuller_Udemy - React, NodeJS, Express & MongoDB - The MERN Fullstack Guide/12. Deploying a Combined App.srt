1
00:00:02,160 --> 00:00:06,800
To serve everything from one server we need to work on our node application.

2
00:00:06,810 --> 00:00:11,880
We need to deploy this onto a host which is capable of executing our notorious code.

3
00:00:11,880 --> 00:00:13,360
For example Morocco.

4
00:00:13,480 --> 00:00:15,210
But that's the new thing.

5
00:00:15,210 --> 00:00:19,960
We now don't just need to render our rude stare but in a dish.

6
00:00:19,950 --> 00:00:27,180
Now we also need routes that serve our ReACT files so these single page application we get there in

7
00:00:27,180 --> 00:00:27,830
the end.

8
00:00:28,020 --> 00:00:29,620
And that is new.

9
00:00:29,880 --> 00:00:31,800
It isn't too difficult though.

10
00:00:31,920 --> 00:00:38,250
What we need to do in the end is we need to grab our built applications so we still run NPM run build

11
00:00:38,250 --> 00:00:40,290
here on the react side.

12
00:00:40,290 --> 00:00:43,610
We can do that right now to apply our latest style changes.

13
00:00:43,710 --> 00:00:52,080
So we still need to run NPM run build here but then we will grab our build folder and copied over into

14
00:00:52,080 --> 00:00:58,800
the back and folder though before we do that let's double think about our production environment variables

15
00:00:59,040 --> 00:01:04,860
in react the back and you are L now will be a different one.

16
00:01:04,860 --> 00:01:10,460
Or to be precise it will be the one where our node application will be served on later.

17
00:01:10,500 --> 00:01:12,420
Now in my case this is correct here.

18
00:01:12,450 --> 00:01:16,830
This is the you are L under which I will still serve my node application later.

19
00:01:16,830 --> 00:01:23,730
But if you know one is served as on a new he Roku project or on a different node hosting provider then

20
00:01:23,730 --> 00:01:29,580
you need to ensure that you find out which you are L you will have after you deployed your node app

21
00:01:29,820 --> 00:01:32,090
and enter dis here.

22
00:01:32,130 --> 00:01:37,710
So in my case it should be fine though so let's now grab the build folder and go back to the back and

23
00:01:37,710 --> 00:01:44,520
folder and there may be at a public folder and copy everything that's in the build folder so we'll actually

24
00:01:44,520 --> 00:01:48,570
grab the content of the build folder into this public folder here.

25
00:01:48,750 --> 00:01:53,710
The name is up to you but public is the more common name you would choose for that.

26
00:01:53,730 --> 00:02:00,900
Now we want to ensure that everything in the public folder is statically served and we did something

27
00:02:00,900 --> 00:02:08,810
similar already in app trials with our images so in the end we can copy this line here.

28
00:02:09,570 --> 00:02:15,580
And added after and that's not really important added after our roots here.

29
00:02:15,600 --> 00:02:21,210
It also means that dissimilar where here where we handle unknown requests is no longer needed because

30
00:02:21,210 --> 00:02:33,890
now I want to say any request going to any you are l will be served statically so you're I remove that

31
00:02:33,890 --> 00:02:42,600
filter at the beginning and I want to serve my public folder here just like this.

32
00:02:42,630 --> 00:02:48,450
So what I'm saying here is any request which reaches my back end which was not handled by these routes

33
00:02:48,780 --> 00:02:54,960
and I need to do this first so that my API still works but any requested was not handled by these routes

34
00:02:55,380 --> 00:03:00,780
will now be handled by this route and this road will simply return to content in the public folder.

35
00:03:00,780 --> 00:03:03,620
So for example the index H Timo file.

36
00:03:03,630 --> 00:03:07,700
Now if we rethink this solution however it doesn't look that great anymore.

37
00:03:07,710 --> 00:03:13,170
Indeed we would serve everything in that folder statically and that generally is something we want to

38
00:03:13,170 --> 00:03:19,770
do because we want to ensure that for example any javascript file and any see us as file that is requested

39
00:03:19,770 --> 00:03:24,380
from our ReACT app can be served but that's now the problem.

40
00:03:24,450 --> 00:03:27,310
This alone is not enough.

41
00:03:27,510 --> 00:03:34,950
We can move this back up there actually to our other static serving solution here so that we simply

42
00:03:34,950 --> 00:03:40,920
registered as as another static path or we basically say if you're requesting something which does not

43
00:03:40,920 --> 00:03:47,560
start with uploads images we'll see if we find a file here and we will serve it what does unfortunately

44
00:03:47,570 --> 00:03:53,710
you won't do is it will support our front end routes if we are on our running react app and we go to

45
00:03:53,710 --> 00:03:55,450
slash off there.

46
00:03:55,450 --> 00:04:01,330
So in the front and now then the request which gets sent to express is actually that we're looking for

47
00:04:01,330 --> 00:04:05,260
a off folder and by default for index H html file in there.

48
00:04:05,350 --> 00:04:08,870
And of course we have no of folder here in the public folder.

49
00:04:08,950 --> 00:04:14,770
So this works for the initial index H demo file and it works for all the JavaScript files and all the

50
00:04:14,770 --> 00:04:17,720
C is as follows so for all the assets we need here.

51
00:04:17,770 --> 00:04:22,910
But this does not work for our different routes to make dad work.

52
00:04:22,910 --> 00:04:28,760
I will now go to that place after my other routes and use a new one where I want to catch all on handled

53
00:04:28,760 --> 00:04:36,470
requests because here I now want to set up a middleware function with request response and the next

54
00:04:36,470 --> 00:04:40,990
of course where I will always return the index H terminal file.

55
00:04:41,060 --> 00:04:46,730
So in here the idea is simply is that I call rest send file and that's a method provided by express

56
00:04:47,030 --> 00:04:54,050
where I sent back a response that is basically made up of one file in there I always for any unknown

57
00:04:54,050 --> 00:05:01,310
wrote one sent back the index H Tim l file so that the front and routing the react router can take over

58
00:05:01,310 --> 00:05:08,440
and resolve the unknown you are L so here I want to send that file and we can build a path for that

59
00:05:08,470 --> 00:05:13,320
with path resolve where the first argument is dir name.

60
00:05:13,480 --> 00:05:19,330
So that constant which is available in node and expressed it gives us the current folder of this app

61
00:05:19,400 --> 00:05:26,920
guess file and then we want to go into the public folder of course and in data serve de index H table

62
00:05:26,920 --> 00:05:27,330
file.

63
00:05:27,340 --> 00:05:28,690
That's my idea here.

64
00:05:28,690 --> 00:05:36,640
This file should be served with Dad we should have a setup where we can request any route and even if

65
00:05:36,640 --> 00:05:43,210
it's a back and route and these rules kick in or it's a static file like a javascript file then these

66
00:05:43,310 --> 00:05:50,170
routing or these handlers help us or it is anything else and in this case we always sent back our single

67
00:05:50,170 --> 00:05:57,820
page and we can also test as here we can start up our local server and for that just make sure that

68
00:05:57,820 --> 00:06:00,490
in packaged our Jason you also add a script like this.

69
00:06:00,490 --> 00:06:04,600
Def script which I edit here that allows us to still run this with Node 1.

70
00:06:04,630 --> 00:06:10,960
So add such a script because starting this with node would not work because that wouldn't take d environment

71
00:06:10,960 --> 00:06:16,360
variables into account and for local development I want to use them so let's use death which uses Node

72
00:06:16,360 --> 00:06:24,250
1 and then run NPM run def to start this node server locally and let's see where that works and locally

73
00:06:24,250 --> 00:06:26,970
we are using port five thousand.

74
00:06:27,100 --> 00:06:30,950
We can ignore the fact that this image is missing we'll take care about this later.

75
00:06:31,090 --> 00:06:37,000
But what we can tell is that this works and if I reload on the off page this also is getting served

76
00:06:37,450 --> 00:06:39,420
and if I try setting a request here.

77
00:06:39,430 --> 00:06:46,270
So our API should be hit does all the works and we can see in the network tab that indeed we send the

78
00:06:46,270 --> 00:06:47,260
request there.

79
00:06:47,320 --> 00:06:53,650
We got back our places here for example so we are interacting with the API so this is working but in

80
00:06:53,650 --> 00:06:59,710
addition to that serving you react reactive through that very same node express app that hosts our back

81
00:06:59,710 --> 00:07:02,410
and API is also working now.

82
00:07:02,480 --> 00:07:07,500
Also remember what I said early on in the slide when you were serving both from the same host.

83
00:07:07,510 --> 00:07:11,920
You can also omit these cores headers so I will comment out this middleware.

84
00:07:11,920 --> 00:07:12,960
You can leave it here.

85
00:07:12,970 --> 00:07:15,280
It's not a problem but you can also get rid of it.

86
00:07:15,280 --> 00:07:16,620
We don't need it anymore.

87
00:07:16,690 --> 00:07:22,260
If I commented out and I reload here you will see this still works if I tried to log in again.

88
00:07:23,920 --> 00:07:28,600
This still works without any errors besides the image which it doesn't find to which I will come back

89
00:07:28,600 --> 00:07:29,430
later.

90
00:07:29,740 --> 00:07:36,040
So this works and this is now the app prepared for hosting with combined apps where we have no ID Express

91
00:07:36,130 --> 00:07:39,220
and react in the same project.

92
00:07:39,220 --> 00:07:46,140
So with that we should also be able to deploy this node JSA application so whenever we have a new version

93
00:07:46,140 --> 00:07:51,340
of the react that we just build it and then we copy the content of the build folder into the public

94
00:07:51,340 --> 00:07:54,470
folder and replace everything in it with it.

95
00:07:54,470 --> 00:07:59,260
And once we got that replaced we deploy our reactor up here.

96
00:07:59,260 --> 00:08:00,630
So how does this work.

97
00:08:01,650 --> 00:08:11,020
Well we use get ad again where we can say added new react app front end whereas in whatever you want

98
00:08:11,020 --> 00:08:11,440
to name it

99
00:08:14,770 --> 00:08:22,390
and then we use get push you Roku monster again to push this updated node application to Hiroko and

100
00:08:22,390 --> 00:08:29,350
this is basically the same application as before but it now includes our ReACT application and the logic

101
00:08:29,380 --> 00:08:30,640
to serve it.

102
00:08:30,790 --> 00:08:33,110
So let's wait for this process to finish now.

103
00:08:34,340 --> 00:08:42,540
Enter after let's visit this you are El again and if we entered like this we should see our application.

104
00:08:42,680 --> 00:08:49,520
Now you will notice that the image of the user is missing though and it was there a second ago.

105
00:08:49,550 --> 00:08:54,490
Now we'll come back to why Data's missing in a second but let's first of all try authentication and

106
00:08:54,490 --> 00:08:56,420
so on if dad works.

107
00:08:56,420 --> 00:08:57,490
This seems to work.

108
00:08:57,590 --> 00:08:59,720
Let's all try creating a new place.

109
00:09:04,930 --> 00:09:13,230
Like we did many times before let's look at place here and this really all seems to work.

110
00:09:13,450 --> 00:09:16,770
So why are we not seeing the user's image here.

111
00:09:16,780 --> 00:09:21,460
Because in general the deployment seems to be all right and that's the important thing I'll come back

112
00:09:21,460 --> 00:09:24,220
to that image thing here in the next lecture.

113
00:09:24,250 --> 00:09:28,600
But first of all let me make it really clear that this is now our app.

114
00:09:28,600 --> 00:09:35,560
Both the reactive and the note API served on one machine on one server on one service provider.

115
00:09:35,560 --> 00:09:37,500
He Roko in my case here.

116
00:09:37,560 --> 00:09:42,820
So we got everything on one server and this therefore is the other option of deploying this you can

117
00:09:42,820 --> 00:09:49,870
use to hosting providers like firebase or any other static host for react and then no chance hosting

118
00:09:49,870 --> 00:09:55,590
provider for the back end for the node rest api or you use one combined setup.

119
00:09:55,630 --> 00:10:01,480
It's up to you which one you prefer splitting it onto two servers can give you a certain performance

120
00:10:01,480 --> 00:10:08,110
advantages because requests are split up and not all requests hit the same server but depending on the

121
00:10:08,110 --> 00:10:10,880
size of your app that also might not really matter.

122
00:10:10,930 --> 00:10:15,340
And then you might find it easier to just host everything on one host.

123
00:10:15,340 --> 00:10:16,740
Ultimately it's up to you.

124
00:10:16,750 --> 00:10:21,970
I just wanted to show you both alternatives and now let's find out why this image is missing.
