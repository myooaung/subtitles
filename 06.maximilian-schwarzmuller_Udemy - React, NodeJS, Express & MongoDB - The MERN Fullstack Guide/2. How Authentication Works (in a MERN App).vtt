WEBVTT
1
00:00:02.210 --> 00:00:07.910
Now if we speak about authentication let's have a look at our current implementation because on the

2
00:00:07.910 --> 00:00:11.320
back end here we got a log in route right.

3
00:00:11.330 --> 00:00:12.380
We can log in.

4
00:00:12.380 --> 00:00:15.590
We can send the request to the log in route at least.

5
00:00:15.680 --> 00:00:21.620
But if we then have a look at our users controller and there at the log and function we see that what

6
00:00:21.620 --> 00:00:24.920
we do in there isn't the end very very trivial.

7
00:00:24.920 --> 00:00:31.880
We check whether we find a user for the provided email address and then if we don't find that user or

8
00:00:31.880 --> 00:00:36.640
if de password off the user does not match the entered password we return an error.

9
00:00:36.650 --> 00:00:43.670
Now thus far does logic isn't too wrong though I'm not happy with storing the plain password like this

10
00:00:43.670 --> 00:00:46.160
the plaintext password like this in the database.

11
00:00:46.280 --> 00:00:52.610
We certainly one changed this but still even with that logic would you return is is not really helpful.

12
00:00:52.610 --> 00:00:57.670
I return a user object and I return a message where I say locked in.

13
00:00:57.800 --> 00:01:02.070
This is not really anything that helps us on the front end.

14
00:01:02.240 --> 00:01:07.310
It's not a proof that this user is locked in and right the server servers say so.

15
00:01:07.340 --> 00:01:07.650
OK.

16
00:01:07.660 --> 00:01:13.590
That is nice but if we did in the future send requests from the front end to the back end.

17
00:01:13.700 --> 00:01:20.950
How exactly would we remind the server about the fact that the user in our front end is logged in.

18
00:01:20.990 --> 00:01:27.050
We get no data from the server which we could send back to the server to prove that the server in the

19
00:01:27.050 --> 00:01:30.310
past decided that we are logged in.

20
00:01:30.320 --> 00:01:36.800
So how would this normally work and how is should this work in a single page application REST API scenario.

21
00:01:36.950 --> 00:01:43.430
We have our ReACT app and we got our back and server and there we got certain routes were certain requests

22
00:01:43.430 --> 00:01:51.860
we accept we use agent be client on the front end like the fetch API or like access and we send requests

23
00:01:51.920 --> 00:01:57.020
to the back end and summer outs there should be protected which means only authenticated users should

24
00:01:57.020 --> 00:02:00.270
have access and our routes are open to everyone.

25
00:02:00.410 --> 00:02:07.700
Now traditionally and with that I mean web application where we render H terminal on the server with

26
00:02:07.700 --> 00:02:09.350
the help of templating engines.

27
00:02:09.560 --> 00:02:15.510
Traditionally we would establish a session we would create a session on the server a session is a server

28
00:02:15.510 --> 00:02:21.350
side idea which we Indians store in the database there and we would send the session ideas to the front

29
00:02:21.350 --> 00:02:23.870
end and they're stored in a cookie.

30
00:02:23.870 --> 00:02:30.920
Now this approach is generally nice but if we're having a single page application and then a server

31
00:02:30.920 --> 00:02:38.450
side API these two ends are not as closely connected as they are in an application where the server

32
00:02:38.450 --> 00:02:46.850
side renders SDH HTML code to be precise the API is stateless which means it's totally decoupled from

33
00:02:46.850 --> 00:02:54.290
the front end it doesn't want to remember sessions and to which front end a session belong and so on.

34
00:02:54.290 --> 00:02:59.240
Instead we'll use a different approach when we're working with a single page application on the front

35
00:02:59.240 --> 00:03:06.980
end and API like a rest api on the back end instead of creating and storing such a session on the server

36
00:03:07.040 --> 00:03:14.420
which we don't want because the server is stateless we generate a token does in the end is a string

37
00:03:14.420 --> 00:03:21.680
generated with a certain algorithm whereas certain pieces of data are encoded in this token is returned

38
00:03:21.680 --> 00:03:26.920
to the front end and there it can be stored in a cookie or in local storage.

39
00:03:27.050 --> 00:03:36.050
Now this token then can be attached by the front end to requests dad request protected resources and

40
00:03:36.050 --> 00:03:42.620
now the interesting thing is the server generates this token as I said with a certain algorithm and

41
00:03:42.740 --> 00:03:49.220
also by using a private key which again is just a string that's fed into the algorithm and the same

42
00:03:49.220 --> 00:03:56.210
key for the same data which is encoded will always yield the same token a different key with the same

43
00:03:56.210 --> 00:03:58.410
data will yield a different token.

44
00:03:58.700 --> 00:04:05.240
So the server is the only one who knows this private key which in the end led to this exact token and

45
00:04:05.240 --> 00:04:10.730
therefore the server is able to validate the token which is attached to an incoming request.

46
00:04:10.820 --> 00:04:16.190
So on the front end if you try to fake a token if you would try to change anything there you don't know

47
00:04:16.190 --> 00:04:22.430
the private key so you will get a different token and such a token would be identified as invalid by

48
00:04:22.430 --> 00:04:23.170
the server.

49
00:04:23.570 --> 00:04:30.440
And with this approach we don't need to store any data on the server except for days private key because

50
00:04:30.440 --> 00:04:37.310
we then on the server know which tokens makes sense for this provided private key and on the front that

51
00:04:37.310 --> 00:04:44.010
we can use this token to attach it to requests where we need to identify ourselves as authenticated.

52
00:04:44.180 --> 00:04:50.630
That's the idea here data is how authentication typically works in modern web applications where we

53
00:04:50.630 --> 00:04:54.860
have a single page application and the API back and talk to each other.

54
00:04:55.040 --> 00:04:59.210
And this is the approach we will therefore also implement in this course.
