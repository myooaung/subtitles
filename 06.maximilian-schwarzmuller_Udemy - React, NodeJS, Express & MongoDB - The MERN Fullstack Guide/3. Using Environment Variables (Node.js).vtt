WEBVTT
1
00:00:02.350 --> 00:00:04.300
So back in the app we worked on.

2
00:00:04.300 --> 00:00:10.030
Again I have my back and opened in one window and front and opened in another window.

3
00:00:10.060 --> 00:00:18.100
Now in this project here we want to have a look at the different api keys and you are elsewhere using

4
00:00:18.370 --> 00:00:21.940
to ensure that we can use the same keys and same you are else.

5
00:00:21.940 --> 00:00:24.610
Once we push our app onto a server.

6
00:00:24.930 --> 00:00:28.250
Now let's start here on the back end there.

7
00:00:28.250 --> 00:00:35.900
I got a couple of values which I might want to swap between development and production.

8
00:00:35.930 --> 00:00:43.850
Most importantly if we go to the app J.S. file there we connect to mongo D.B. with a certain user a

9
00:00:43.850 --> 00:00:46.840
certain password and a certain database.

10
00:00:46.850 --> 00:00:53.030
Now it's not unlikely that we might want to use a different Hmong would you be Atlas account here a

11
00:00:53.030 --> 00:00:59.360
different database so different values for our app that runs in production than we do for our app that

12
00:00:59.360 --> 00:01:00.830
we test locally.

13
00:01:00.830 --> 00:01:06.440
The database should definitely be a different one so that we don't interfere with the data of our real

14
00:01:06.440 --> 00:01:07.250
users.

15
00:01:07.340 --> 00:01:11.140
If we then continue working on the app locally in development.

16
00:01:11.150 --> 00:01:17.690
So if we then add new features add new dummy data and we mess with the database our real users are writing

17
00:01:17.690 --> 00:01:18.680
too as well.

18
00:01:18.680 --> 00:01:20.070
We don't want to do that.

19
00:01:20.150 --> 00:01:27.410
So it would be nice if these values User name password and also the database name would be kind of variable

20
00:01:27.740 --> 00:01:35.410
and depending on where we run does the locally or on a real server we insert different value stare.

21
00:01:35.420 --> 00:01:41.060
Now thankfully that is something we can do without too much effort locally here.

22
00:01:41.120 --> 00:01:42.950
I am using Node 1 right.

23
00:01:42.950 --> 00:01:46.060
We were starting aptly as with Node 1.

24
00:01:46.100 --> 00:01:52.120
Now we can add a node Monbiot Jason File to provide some configuration to Node 1.

25
00:01:52.130 --> 00:01:58.670
Now you can check out node Mohn stocks to learn all about the configuration values you can provide there.

26
00:01:58.670 --> 00:02:00.050
This should be a Jason format.

27
00:02:00.050 --> 00:02:06.410
And here I am interested in the end key which we can set up their end for environment.

28
00:02:06.590 --> 00:02:09.530
And there we can set up so-called environment variables.

29
00:02:09.590 --> 00:02:16.000
These are variables variable data which depends or where the values depend on the environment you're

30
00:02:16.010 --> 00:02:17.090
running in.

31
00:02:17.090 --> 00:02:18.880
And you can refer to them in your code.

32
00:02:18.890 --> 00:02:24.920
And therefore based on the environment your code is being executed in you will be using different values

33
00:02:24.950 --> 00:02:29.670
in your code ends in the Node 1 conflict takes an object.

34
00:02:29.840 --> 00:02:36.640
And now there you can't have any names any keys of your choice for example D.B. user you don't have

35
00:02:36.640 --> 00:02:41.790
to write it like this this can be any name of your choice and then you enter the value here.

36
00:02:41.830 --> 00:02:46.990
So here it will actually stick to this value and it will use Academy and here as a user and hence enter

37
00:02:46.990 --> 00:02:50.320
this year between double quotes on the right side as a value.

38
00:02:50.320 --> 00:02:57.960
I will also store my password here with DB password and then here go back to AB J.S. and grab that password.

39
00:02:59.030 --> 00:03:01.150
And copy that into Node 1 Jason.

40
00:03:01.970 --> 00:03:09.620
And then also the be names so the database name here I will use merge because that is the value I'm

41
00:03:09.620 --> 00:03:11.790
using here too.

42
00:03:11.840 --> 00:03:14.310
Now these are my development values.

43
00:03:14.360 --> 00:03:18.400
You might wonder where do we enter the value is we want to use in production.

44
00:03:18.410 --> 00:03:21.060
So when our app really runs on a server.

45
00:03:21.260 --> 00:03:25.380
Well that depends on the hosting provider you're using in the end.

46
00:03:25.490 --> 00:03:31.040
If you're using some service that does all the general setup for your application as we will do later

47
00:03:31.460 --> 00:03:36.540
then this service will give you an easy to use way to provide such environment variables.

48
00:03:36.620 --> 00:03:41.770
And it will come back to that once we really move our application onto such a real server.

49
00:03:41.810 --> 00:03:46.900
So you will later see how to configure values for the production mode as well.

50
00:03:46.910 --> 00:03:53.810
These are our development mode values and now we just have to refer to them in our script of course.

51
00:03:53.810 --> 00:03:59.450
Now here I'm already setting this connection string as with back ticks so that they can dynamically

52
00:03:59.450 --> 00:04:00.500
inject values.

53
00:04:00.530 --> 00:04:03.060
If you're not doing that make sure you do so.

54
00:04:03.440 --> 00:04:08.660
And with that here we can inject the value instead of the hardcoded user name.

55
00:04:08.690 --> 00:04:15.140
We have to refer to process thought and dot and then the name of your environment variables.

56
00:04:15.140 --> 00:04:23.060
So in my case your DV user this process dot ends thing is something no Che s provides to you.

57
00:04:23.060 --> 00:04:26.910
There is a global process variable which is always available.

58
00:04:26.960 --> 00:04:32.870
It has an end key and this gives you access to the environment variables that are injected into the

59
00:04:32.870 --> 00:04:38.060
running no chase process and no adman injects these values.

60
00:04:38.060 --> 00:04:43.710
And as I mentioned later when we run this on a server different values will be injected.

61
00:04:43.730 --> 00:04:55.090
So with that we can refer to a value for the user here and all of for DV password and then here at the

62
00:04:55.090 --> 00:05:01.870
end instead of this hardcoded database named Stevie underscore a name which I chose here in Node 1 Jason.

63
00:05:01.870 --> 00:05:04.840
So with that we're injecting dynamic values here.

64
00:05:05.050 --> 00:05:12.310
Now in the back and I got two other things I could inject and that for one is in the Utah folder my

65
00:05:12.310 --> 00:05:19.390
Google API key here we might always want to use that in that case we could also hardcoded here but if

66
00:05:19.390 --> 00:05:24.520
we want to use a different key for local development and for running those in production which is not

67
00:05:24.520 --> 00:05:30.390
unlikely then we might want to inject this here or get this from our environment variables as well.

68
00:05:30.400 --> 00:05:39.030
So here we could then refer to process that ends Google API key or however you want to name it and now

69
00:05:39.030 --> 00:05:42.200
you just have to provide such API key here in Node 1.

70
00:05:42.390 --> 00:05:49.560
Jason now the concrete value is something I will come back to because I want to tweak that API key or

71
00:05:49.560 --> 00:05:54.330
at least have a look at it in the Google developer console before we actually use it again.

72
00:05:54.360 --> 00:05:59.630
So I'll just enter a placeholder here will take care about the actual value soon.

73
00:05:59.820 --> 00:06:08.900
And one other last place I want to replace with an environment variable on the back end here is my private

74
00:06:08.900 --> 00:06:12.320
key for the Jason Webb token in the user's controller.

75
00:06:12.350 --> 00:06:16.720
When we create a web token I use this private key here.

76
00:06:16.720 --> 00:06:22.570
Right now we can definitely hardcoded into this file like this but of course keep in mind that we are

77
00:06:22.630 --> 00:06:24.580
reusing it multiple times.

78
00:06:24.580 --> 00:06:31.150
We're using the same key here in sign up and then all here in our check of middleware hence alone from

79
00:06:31.150 --> 00:06:33.690
the code reuse such perspective.

80
00:06:33.940 --> 00:06:39.180
It would make sense to outsource this or to store it is in an environment variable.

81
00:06:39.220 --> 00:06:46.100
So here I will add the JWT key and store my key in there without the single quotes.

82
00:06:46.120 --> 00:06:48.250
And of course this can be any string you want.

83
00:06:48.250 --> 00:06:53.710
And again you could be using a different string for local development than you do for production.

84
00:06:53.710 --> 00:07:00.160
This might be a good idea because if you push your local development code to get hub or to some public

85
00:07:00.160 --> 00:07:07.390
repository you might want to ensure that you're not using keys here which you also use in production.

86
00:07:07.390 --> 00:07:13.690
Though if you are pushing your data to a public repository you might in general not want to include

87
00:07:14.110 --> 00:07:19.560
this entire node one chase and file in the repository because it contains a lot of confidential data.

88
00:07:19.660 --> 00:07:24.480
But if you would push it it's still better to have different values for development than you do have

89
00:07:24.490 --> 00:07:25.370
for production.

90
00:07:25.390 --> 00:07:31.300
So that at least your production environment is safe well and now with that we can again inject this

91
00:07:31.330 --> 00:07:41.240
JWT key so in check off here where I need that key I can use process thought and dot JWT key.

92
00:07:41.560 --> 00:07:44.860
And of course do the same in the user's controller.

93
00:07:44.860 --> 00:07:46.780
When ever we use that private key.

94
00:07:47.080 --> 00:07:51.520
So here in sign up and also if we scroll up a bit.

95
00:07:51.760 --> 00:07:55.410
That was log in all of you scroll up a bit here in sign up now.

96
00:07:56.520 --> 00:08:01.290
Now with this if I start dead I get an error or db name.

97
00:08:01.290 --> 00:08:01.900
Yeah.

98
00:08:02.100 --> 00:08:07.290
Here in my connection string of course it always has to be processed not inthe dot environment variable

99
00:08:07.290 --> 00:08:08.110
name.

100
00:08:08.160 --> 00:08:13.380
So with that fixed if I now start as it should start again it should connect to the database that should

101
00:08:13.440 --> 00:08:16.170
all be working and with it up and running.

102
00:08:16.170 --> 00:08:22.830
Let's next have a look at the front end before I then also come back here to this Google API key thing.
