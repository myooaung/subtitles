1
00:00:02,130 --> 00:00:08,810
So let's start by adding validation to our patch road in the places rules file they are all at the second

2
00:00:08,810 --> 00:00:11,540
middleware which is actually an array of millionaires.

3
00:00:11,570 --> 00:00:14,060
And again we can check the incoming data here.

4
00:00:14,120 --> 00:00:19,790
Now when we update a place there are two pieces of information which are extracting title and description.

5
00:00:20,210 --> 00:00:22,920
So I want to validate these two pieces.

6
00:00:23,030 --> 00:00:29,700
I want to check the title with the title field here and check that it's not empty.

7
00:00:29,750 --> 00:00:33,040
So the same criteria I had up there.

8
00:00:33,560 --> 00:00:35,980
Well before the description I always want to have the same.

9
00:00:36,020 --> 00:00:39,800
So I will check that we have a min length of five characters.

10
00:00:40,070 --> 00:00:45,560
And now with that let's go to the places controller and actually we can now copy that logic which we

11
00:00:45,560 --> 00:00:47,060
got and create place.

12
00:00:47,150 --> 00:00:53,570
We can simply copy that over to update place so that we first check if we do have validation errors

13
00:00:53,840 --> 00:00:57,830
and if we do I sent back my error response.

14
00:00:57,830 --> 00:01:02,400
If we don't I continue with my normal updating logic here.

15
00:01:02,660 --> 00:01:04,160
So with Dad let's give it a try.

16
00:01:04,160 --> 00:01:12,140
Let's try it running this patch request with an empty string for a title and this fails.

17
00:01:12,140 --> 00:01:17,750
Now let's enter something valid here but have a description which is too short and it fails.

18
00:01:17,840 --> 00:01:20,630
And you also see that it does not just fail.

19
00:01:20,720 --> 00:01:24,800
It really also doesn't apply any of the updates of course.

20
00:01:24,810 --> 00:01:30,570
Now if I do enter a valid description however this succeeds and therefore if I get that single place

21
00:01:30,570 --> 00:01:33,330
we see that updated data here as well.

22
00:01:33,330 --> 00:01:37,370
Now that's the validation for the other places right now for the user routes.

23
00:01:37,380 --> 00:01:39,090
I also want to validate.

24
00:01:39,090 --> 00:01:46,650
So first of all let's import the check method here in the places where it's file and now the question

25
00:01:46,650 --> 00:01:52,810
is Where do we need validation the obvious answer is these two routes.

26
00:01:52,810 --> 00:01:53,080
Right.

27
00:01:53,080 --> 00:02:00,510
These two post routes but actually I would argue that we only need to validate on the sign up road.

28
00:02:00,510 --> 00:02:01,430
Why.

29
00:02:01,480 --> 00:02:08,800
Because when the user logs in we're searching for a user with that email and thereafter we're comparing

30
00:02:08,800 --> 00:02:09,880
passwords.

31
00:02:09,880 --> 00:02:14,350
So if invalid data was entered there the log in will fail anyways.

32
00:02:14,500 --> 00:02:19,300
So there isn't really a need to validated before we run our logic.

33
00:02:19,300 --> 00:02:23,890
Hence I will only add validation here on the sign up around there.

34
00:02:23,920 --> 00:02:28,770
I want to check the name of the user and make sure that it's not empty.

35
00:02:28,840 --> 00:02:34,240
I'll not require a minimum length because well we have very short names in the world as well.

36
00:02:34,240 --> 00:02:34,540
Right.

37
00:02:34,540 --> 00:02:36,670
Just as we have very long ones.

38
00:02:36,670 --> 00:02:42,040
So I certainly don't want to check for any minimum or maximum length just not being empty would be a

39
00:02:42,040 --> 00:02:43,420
great thing.

40
00:02:43,450 --> 00:02:47,140
I also want to check the email and there I will validate something else.

41
00:02:47,140 --> 00:02:48,960
I don't care whether it's empty or not.

42
00:02:49,060 --> 00:02:54,670
I want to make sure it's a valid e-mail address and for that we have the normalized email method which

43
00:02:54,670 --> 00:03:06,650
for example makes sure that test at test dot com is converted to test at test dot com enter after after

44
00:03:06,740 --> 00:03:09,530
normalize email.

45
00:03:09,570 --> 00:03:16,650
I also want to call is email and this now validates that this really is a valid email address after

46
00:03:16,650 --> 00:03:23,680
being normalized and last but not least the password the user chose also has to be checked.

47
00:03:23,750 --> 00:03:32,050
Here I want to check that it has a min length of six characters for security reasons now justice before

48
00:03:32,370 --> 00:03:39,370
this is one half of the validation logic we all need to copy this year where we check for validation

49
00:03:39,430 --> 00:03:42,330
errors into our sign up middleware.

50
00:03:42,610 --> 00:03:46,340
And that means we need to import devaluation result function.

51
00:03:46,420 --> 00:03:53,620
So here I will use object D structuring to get validation result out of the object I import from Express

52
00:03:53,620 --> 00:03:59,790
validator and then down there we sent back our error response.

53
00:03:59,790 --> 00:04:09,470
If we couldn't validate the input data now with that back to postman and let's try to sign up with an

54
00:04:09,500 --> 00:04:18,050
empty name invalid inputs past let's try to sign up with a valid name but an invalid email address.

55
00:04:18,050 --> 00:04:22,040
I deleted the at symbol does not work.

56
00:04:22,040 --> 00:04:29,280
Let's try to sign up with a password which is too short doesn't work and let's enter validator everywhere.

57
00:04:29,420 --> 00:04:31,860
And this works now for a log in.

58
00:04:31,850 --> 00:04:37,930
If I for example leave the email field empty we simply couldn't identify a user.

59
00:04:37,940 --> 00:04:39,350
And that's totally fine.

60
00:04:39,350 --> 00:04:41,710
We need no extra validation there.

61
00:04:42,460 --> 00:04:44,560
So this all is looking good.

62
00:04:44,560 --> 00:04:50,200
The added validation I noticed there is one place where we can add some extra logical step and that

63
00:04:50,200 --> 00:04:51,880
is for a delete place.

64
00:04:51,880 --> 00:04:55,220
I want to check if we have a place before we try to delete it.

65
00:04:55,420 --> 00:05:01,990
So I'll check if dummy places find finds a place where the idea is equal to the place idea we're trying

66
00:05:01,990 --> 00:05:03,140
to get rid of.

67
00:05:03,280 --> 00:05:11,950
And if that is not the case if this is false see then I actually want to throw a new HP error where

68
00:05:11,950 --> 00:05:15,370
I want to say could not find a place for that I.D..

69
00:05:16,940 --> 00:05:20,720
And hence not returned is delete place message.

70
00:05:20,720 --> 00:05:27,020
That's just a little bonus which I want to add to ensure that when we do delete a place it works.

71
00:05:27,020 --> 00:05:33,590
If we do have the I.D. but we get back could not find a place if we don't have to I.D. or don't have

72
00:05:33,590 --> 00:05:40,670
a place with that I.D. instead of always returning delete place with that validation was added and now

73
00:05:40,670 --> 00:05:47,450
the only missing piece which I still want to implement here is that when we create a place I don't want

74
00:05:47,450 --> 00:05:53,120
to assume that we get the coordinates from the client but instead my assumption here is that we get

75
00:05:53,120 --> 00:06:00,740
the address and we then translate that to coordinates by actually working together with the never rest

76
00:06:00,740 --> 00:06:08,330
api which we won't write on our own but which instead already exists a rest api created by Google which

77
00:06:08,330 --> 00:06:12,130
helps us well convert addresses to coordinates.
