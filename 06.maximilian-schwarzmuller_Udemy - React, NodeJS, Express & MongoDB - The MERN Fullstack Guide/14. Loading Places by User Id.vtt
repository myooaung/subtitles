WEBVTT
1
00:00:02.460 --> 00:00:04.680
So let's ensure we can fetch places.

2
00:00:04.740 --> 00:00:08.430
As I mentioned definitely tried this on your own first if you haven't already.

3
00:00:08.490 --> 00:00:10.590
Otherwise we'll now do it together.

4
00:00:10.590 --> 00:00:12.320
First of all let's have a look at the back end.

5
00:00:12.390 --> 00:00:18.330
There we have our places roots and we got Dad root which allows us to fetch a place by user I.D. which

6
00:00:18.330 --> 00:00:20.920
is exactly what we want or to be precise.

7
00:00:20.970 --> 00:00:23.390
Fetch multiple places by user I.D..

8
00:00:24.090 --> 00:00:29.100
So there we need to send a GET request to this you are L and of course we want to do that on the user

9
00:00:29.130 --> 00:00:30.180
Places page.

10
00:00:30.180 --> 00:00:32.810
That's the page where we render our places.

11
00:00:32.820 --> 00:00:36.000
That's where I currently use the dummy places.

12
00:00:36.000 --> 00:00:37.350
I'll comment this out.

13
00:00:37.380 --> 00:00:38.460
You could also delete it.

14
00:00:38.460 --> 00:00:43.710
Actually let's delete it to save some space because we're not using the dummy places anymore.

15
00:00:43.710 --> 00:00:46.640
Instead let's now use our custom hook here.

16
00:00:46.680 --> 00:00:58.070
The use age to be client hook from shared hooks h the p hook and let's use that to make our HBP request.

17
00:00:58.640 --> 00:01:05.060
So here I will call use h to be client and we get back and object which I'll D structure with the is

18
00:01:05.060 --> 00:01:11.930
loading state the error state the send request function and the clear error function.

19
00:01:12.350 --> 00:01:18.650
Then here we extract the user I.D. from the U R L which we definitely need under after we want to send

20
00:01:18.650 --> 00:01:22.100
our request and we want to do this only once.

21
00:01:22.100 --> 00:01:28.550
So again I will use use effect here to ensure that we send the request when this component renders but

22
00:01:28.550 --> 00:01:30.740
not when it re renders.

23
00:01:30.740 --> 00:01:37.220
So here as a dependency I will provide send request which will never be recreated because it's wrapped

24
00:01:37.220 --> 00:01:38.370
in use callback.

25
00:01:38.450 --> 00:01:44.300
So this will never trigger this function here to re render and therefore this function will only render

26
00:01:44.300 --> 00:01:46.860
once when this component is mounted.

27
00:01:46.880 --> 00:01:52.880
Now in this component I want to manage my my load at places here as a state now because initially it

28
00:01:52.880 --> 00:01:55.780
will be empty and I want to set it once I got the data.

29
00:01:55.790 --> 00:01:57.710
And then this component should re render.

30
00:01:57.710 --> 00:02:05.170
So it definitely should be some component state loaded places and set loaded places here.

31
00:02:05.330 --> 00:02:12.480
Initialize on the find here we can get rid of this line down for it now and use effect.

32
00:02:12.600 --> 00:02:20.640
I will call send request and justice before I want to use async await but adding async here is not really

33
00:02:20.640 --> 00:02:26.600
something you should do so I will wrap this into a new function fetch places.

34
00:02:26.730 --> 00:02:30.280
This now can be an async function.

35
00:02:30.360 --> 00:02:35.640
And in this function I will use send request for my custom hook and I will simply call fetch places

36
00:02:35.640 --> 00:02:36.760
here now.

37
00:02:37.050 --> 00:02:44.400
So send request now can be waited for so to say and we'll get our response data here.

38
00:02:44.400 --> 00:02:50.760
Now let's have a brief look at the back and what we get there in the places controller in get places

39
00:02:51.750 --> 00:03:00.840
by user I.D. ie in the end expect to get my user ideas part of the of the URL and then either return

40
00:03:00.840 --> 00:03:04.560
in the end an object with a place as key with my places.

41
00:03:05.100 --> 00:03:09.150
So back on the front end this will have a place as key or it should have.

42
00:03:09.780 --> 00:03:19.150
Let's wrap it and try catch so that we only set our loaded places here.

43
00:03:19.190 --> 00:03:24.970
If we do have a successful response so then I will call set loaded places and set as equal to response

44
00:03:24.970 --> 00:03:25.340
data.

45
00:03:25.350 --> 00:03:32.150
Dark Places because Dad is Dad key we are getting on the back end and this will be an array so we'll

46
00:03:32.150 --> 00:03:36.470
set this year and otherwise I'll not do anything.

47
00:03:38.960 --> 00:03:42.590
Now the user I.D. here of course is required to send that request.

48
00:03:42.680 --> 00:03:48.800
So here it will set up a template literal with tactics so that we can easily inject dynamic data into

49
00:03:48.800 --> 00:03:49.920
this string.

50
00:03:49.940 --> 00:03:56.750
It of course starts as it always starts with local host five thousand slash API slash places and then

51
00:03:57.380 --> 00:04:01.340
per hour back at API definition it's slash user.

52
00:04:01.520 --> 00:04:08.210
You can check the back and roots here if you're not sure slash user and then slash the actual user I.D..

53
00:04:08.390 --> 00:04:16.850
So in my case you slash user slash and then I inject the user I.D. I get year out of my you are El we

54
00:04:16.850 --> 00:04:18.160
want to send a get request.

55
00:04:18.170 --> 00:04:25.250
We need no special headers so no our argument needs to be passed to send request however user I.D. now

56
00:04:25.280 --> 00:04:28.510
also needs to be added as a dependency on the user effect.

57
00:04:28.550 --> 00:04:34.490
Function here because while we do use user I.D. in there but this also won't change as long as we are

58
00:04:34.490 --> 00:04:42.900
on the same page with the same user I.D. in the you are El obviously I want to show an error if we got

59
00:04:42.900 --> 00:04:43.160
one.

60
00:04:43.260 --> 00:04:45.240
And I also want to show a loading state.

61
00:04:45.420 --> 00:04:54.330
So just as before we can import the error model from shared components UI elements error modal and repeat

62
00:04:54.360 --> 00:05:00.810
that step to also import our loading spinner from there.

63
00:05:00.900 --> 00:05:07.610
And with these two pieces imported down there just as we did it before I will wrap this into react fragments

64
00:05:07.620 --> 00:05:14.070
so that we can have multiple root level react elements or J as X elements I should say and then we can

65
00:05:14.460 --> 00:05:17.430
render our error model layer forward.

66
00:05:17.430 --> 00:05:19.970
Any error we might have like this.

67
00:05:20.040 --> 00:05:23.110
And on clear should point at clear error.

68
00:05:23.490 --> 00:05:28.920
And if we're loading I want to show a loading spinner so if as loading is true I want to render a div

69
00:05:28.950 --> 00:05:36.570
let's say with a class name of center to have a nicely centered loading spinner like this year and last

70
00:05:36.570 --> 00:05:44.940
but not least let's make sure we only show the places here if we're not loading and we do have load

71
00:05:44.990 --> 00:05:52.260
at places only in that case I want to output them by the way you could also add a fallback scenario

72
00:05:52.260 --> 00:05:57.780
for cases where you have no load at places with debt I don't mean that it's an empty array but that

73
00:05:57.780 --> 00:06:03.600
it's undefined for whatever reason an empty array is handled inside of place list there we render a

74
00:06:03.600 --> 00:06:05.910
fallback if this is empty.

75
00:06:05.950 --> 00:06:13.460
So with that if we save this we can reload here and we see our places.

76
00:06:13.460 --> 00:06:17.750
Now we all see some things wrong with the you are L here.

77
00:06:17.900 --> 00:06:24.560
I do have an image but the source is not rendered correctly so the source is not set correctly here

78
00:06:24.590 --> 00:06:31.670
because in place list I render a place item I forward the image and I extract placed dot image you are

79
00:06:31.670 --> 00:06:38.450
L for that now I'm storing this differently on the back end if you check your collections in places

80
00:06:39.400 --> 00:06:47.740
we do have an image property not image you are L so actually here we should retrieve dot image and not

81
00:06:47.800 --> 00:06:52.840
image you are L if we do that and we go back we see our images.

82
00:06:52.960 --> 00:06:59.320
Now this is a bit a pixel ish we will later of course be able to upload our own images and then we can

83
00:06:59.320 --> 00:07:00.660
upload proper images.

84
00:07:00.880 --> 00:07:06.520
Other than that that would work that if we view it as on a map this is the Marine plus the image just

85
00:07:06.520 --> 00:07:11.260
as wrong because at the moment on the back end we always use the same dummy image.

86
00:07:11.260 --> 00:07:16.840
As I said later in this app will be able to provide our own ones here on the Empire State Building of

87
00:07:16.840 --> 00:07:21.080
course is a better fit and dare we point at the Empire State Building.

88
00:07:21.130 --> 00:07:27.360
So this is already working we are able to load places as a next step.

89
00:07:27.370 --> 00:07:34.360
I want to make sure that if I am logged in with the correct user an idea for a c edit and delete these

90
00:07:34.360 --> 00:07:40.780
two buttons work as well and they can go to edit and then load the place correctly and edit it and save

91
00:07:40.780 --> 00:07:47.350
these changes to the server and the same of course for deleting that this also works ask before your

92
00:07:47.350 --> 00:07:49.780
chance to try this on your own updating.

93
00:07:49.810 --> 00:07:56.050
So editing is probably a bit more challenging deleting should be straightforward in the next lectures.

94
00:07:56.140 --> 00:07:57.640
Of course do it together though.
