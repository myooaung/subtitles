WEBVTT
1
00:00:02.210 --> 00:00:04.350
So let's create the place model now.

2
00:00:04.350 --> 00:00:07.450
Well before we do that what is the place model actually.

3
00:00:08.000 --> 00:00:12.990
Well Mongo debriefings in database collections and documents logic.

4
00:00:13.010 --> 00:00:19.790
This means we have a database which can contain one or multiple collections and the collection can contain

5
00:00:19.880 --> 00:00:21.950
one or multiple documents.

6
00:00:21.950 --> 00:00:26.950
And in our case each single document is a new place that we stored.

7
00:00:27.010 --> 00:00:29.630
That's among the D.B. side from on side.

8
00:00:29.630 --> 00:00:36.760
We think in schema and model logic a schema is the blueprint of a document that we want to store.

9
00:00:36.770 --> 00:00:44.130
So in our case the blueprint of a place for example we can make sure that a place must contain a title.

10
00:00:44.150 --> 00:00:49.940
So this is the blueprint the schema based on the schema we create the so-called model.

11
00:00:49.940 --> 00:00:55.690
And each instance of this model in our code will then result in a new document.

12
00:00:55.700 --> 00:00:57.620
So that's what we want to achieve right here.

13
00:00:57.650 --> 00:01:03.260
We want to create the schema and the model and the next lecture we want to instantiate the model to

14
00:01:03.260 --> 00:01:07.730
make sure that we can store a new document or a new place in our project.

15
00:01:07.730 --> 00:01:12.950
Let's get started with the place schema therefore for this I'll go to the models folder create a new

16
00:01:12.950 --> 00:01:20.670
file named place dot J.S. not a schema and Mongoose model are concepts related to mongoose.

17
00:01:20.690 --> 00:01:24.630
Therefore we have to import Mongoose first.

18
00:01:24.710 --> 00:01:32.130
So we require Mongoose here and the schema is also a special concept part of mongoose.

19
00:01:32.150 --> 00:01:37.940
Therefore we have to create a schema constant here which accesses this schema method.

20
00:01:37.970 --> 00:01:40.070
Now we can create another constant.

21
00:01:40.070 --> 00:01:45.530
This will now be our actual schema and we could call it place schema as this is the specific schema

22
00:01:45.560 --> 00:01:47.240
for a single place.

23
00:01:47.240 --> 00:01:54.230
Here we now instantiate our schema and create a new javascript object and this object now contains the

24
00:01:54.230 --> 00:01:58.520
logic for our blueprint all for later document.

25
00:01:58.520 --> 00:02:06.110
We have such a blueprint already actually s dummy code though here in our places controller's file dummy

26
00:02:06.110 --> 00:02:11.260
places also has the general idea behind a document.

27
00:02:11.330 --> 00:02:17.570
We for example don't need this I.D. property anymore because the I.D. will be created automatically

28
00:02:17.570 --> 00:02:19.850
by Mongo DV When we store a document.

29
00:02:19.850 --> 00:02:20.910
We'll see that later.

30
00:02:21.020 --> 00:02:23.450
But title description location and so on.

31
00:02:23.450 --> 00:02:28.340
These are properties that we want to have in our document and therefore also in our schema.

32
00:02:29.210 --> 00:02:31.160
Let's start with the title.

33
00:02:31.220 --> 00:02:38.590
And at the same call in here and we could say that the title should just be a string that would be possible

34
00:02:38.840 --> 00:02:44.900
but here I would rather add an object because I want to add more information to the title because as

35
00:02:44.900 --> 00:02:52.110
I said the title should be of type String but the title should also be required.

36
00:02:52.130 --> 00:02:59.180
This means the title must not be empty and I guess this makes sense because a place of the title well

37
00:02:59.390 --> 00:03:04.240
not too helpful therefore we should set required here to true.

38
00:03:04.490 --> 00:03:10.230
We can actually copy this because you might need that more off near the second property is our.

39
00:03:10.250 --> 00:03:15.330
This corruption that is corruption well should also be a string and is required.

40
00:03:15.410 --> 00:03:21.050
Now I want to add a new property we didn't have so far in our places comptroller and this is the image.

41
00:03:21.120 --> 00:03:25.850
Now one important note here the image is not the actual file.

42
00:03:26.060 --> 00:03:33.050
When you work with databases the image always is a you are L so your l pointing towards a file which

43
00:03:33.050 --> 00:03:39.530
is not stored in our database because storing files or images in a database is not a good idea because

44
00:03:39.530 --> 00:03:45.590
it kind of contradicts the idea of a database which should be fast and we should be able to execute

45
00:03:45.740 --> 00:03:47.330
queries as quick as possible.

46
00:03:47.810 --> 00:03:51.920
If you imagine storing big files there well this would slow down your database.

47
00:03:51.920 --> 00:03:54.200
And this is definitely not what you want.

48
00:03:54.200 --> 00:04:00.560
Therefore you will use a you r l your l will also be a string and will be required so we can again use

49
00:04:00.620 --> 00:04:02.150
same logic.

50
00:04:02.240 --> 00:04:04.580
We also need an address in the address.

51
00:04:04.580 --> 00:04:12.110
Well it would also be a string and required to get rid of these double empty spaces here and then we

52
00:04:12.110 --> 00:04:13.790
also need to location.

53
00:04:14.000 --> 00:04:19.370
The location is a bit different because in contrast to all previous properties we now have a nested

54
00:04:19.400 --> 00:04:24.890
object because here in all places controller you can see that the location contains the lat and long

55
00:04:24.890 --> 00:04:32.060
properties no mongoose is able to interpret that so we can easily also add a nested object here and

56
00:04:32.060 --> 00:04:42.820
now at the latitude which here should not be of type String but of type no and required should again

57
00:04:42.910 --> 00:04:44.670
be true.

58
00:04:44.780 --> 00:04:48.310
Can actually copy paste this and also do the same thing for the long etude.

59
00:04:48.520 --> 00:04:52.000
So here we can also use this nested object logic.

60
00:04:52.000 --> 00:04:54.680
The last thing we need is our creator here.

61
00:04:54.910 --> 00:05:02.440
The Creator will again be of type String and will be required to come in here and the creator later

62
00:05:02.440 --> 00:05:04.980
will be replaced by a real unique idea.

63
00:05:04.990 --> 00:05:09.200
I mentioned that with the places already that the idea will be created automatically among would be

64
00:05:09.550 --> 00:05:13.090
same thing will happen later when we create a new user for the moment.

65
00:05:13.090 --> 00:05:20.580
We just use dummy information so we enter the user idea manually and with that we actually created our

66
00:05:20.580 --> 00:05:22.330
schema already.

67
00:05:22.470 --> 00:05:26.820
This was only step one though as I said we have schema then we need to model.

68
00:05:26.850 --> 00:05:29.960
And then each instance off the model we create the document.

69
00:05:30.240 --> 00:05:38.730
So to create this model we now simply add module exports and this should be equal to our mongoose.

70
00:05:38.730 --> 00:05:41.700
And now the model method.

71
00:05:41.700 --> 00:05:48.360
That's a special method available here in Mongoose and model the return a constructor function later

72
00:05:48.510 --> 00:05:50.880
we have to add two arguments to this function.

73
00:05:50.880 --> 00:05:53.190
The first argument is the name of the model.

74
00:05:53.220 --> 00:05:59.720
The convention here is to use an uppercase starting character and a singular form no plural form.

75
00:05:59.790 --> 00:06:06.120
Well as our model is here to create a new place place is actually a fitting name I guess by the way

76
00:06:06.130 --> 00:06:08.490
this will also be the name of our later collection.

77
00:06:08.490 --> 00:06:12.950
The collection will not have the upper case starting character and it will be plural though.

78
00:06:12.960 --> 00:06:15.290
So our collection will be named places.

79
00:06:15.300 --> 00:06:22.200
Then the second argument is our schema that we want to refer to in our model and that's our place schema

80
00:06:22.320 --> 00:06:23.700
right here.

81
00:06:23.700 --> 00:06:28.060
With that we created our Mongo schema and the corresponding model.

82
00:06:28.080 --> 00:06:32.040
Now it's time to use this model and to create our first document.
