WEBVTT
1
00:00:02.220 --> 00:00:03.480
Were you successful.

2
00:00:03.480 --> 00:00:05.360
Let's implement together.

3
00:00:05.370 --> 00:00:13.870
I want to register a root for a slash user slash colon you I.D. to have that dynamic you I.D. segment.

4
00:00:14.160 --> 00:00:19.550
Then we have the default middleware function with request response and next.

5
00:00:19.770 --> 00:00:28.470
And in that function I now want to get the user I.D. and then find the place where the creator has that

6
00:00:28.470 --> 00:00:29.940
user I.D..

7
00:00:30.090 --> 00:00:38.460
So here a user I.D. is of course request persons you I.D. and my place then is again found with the

8
00:00:38.460 --> 00:00:46.290
help of defined method where we have does function we pass to find and return p dot creator equal to

9
00:00:46.350 --> 00:00:47.090
user I.D..

10
00:00:47.340 --> 00:00:53.850
If the Creator property in a place holster user I.D. that's part of the U R L it's the place which I

11
00:00:53.850 --> 00:00:54.560
want to find.

12
00:00:55.110 --> 00:00:59.440
So thereafter I can return that place here in my response.

13
00:00:59.460 --> 00:01:03.960
So the logic is very similar to the logic we had up there of course.

14
00:01:03.960 --> 00:01:09.000
The only difference is that now we're searching for the user I.D. If we now test this and we search

15
00:01:09.000 --> 00:01:12.270
for a user you one.

16
00:01:12.400 --> 00:01:15.600
We do find a place where the creator is you one.

17
00:01:15.640 --> 00:01:17.880
If I search for you too.

18
00:01:18.070 --> 00:01:22.710
Then we get no place if we try that other route from before again with p 1.

19
00:01:22.840 --> 00:01:25.300
That of course also still works.

20
00:01:25.300 --> 00:01:33.120
So we got these working routes registered here now one for a place idea and one for our user.

21
00:01:33.220 --> 00:01:41.990
Now one important note if we enter just slash user here we of course find no place that all is not a

22
00:01:41.990 --> 00:01:43.280
valid route.

23
00:01:43.520 --> 00:01:50.720
But why do we actually get back this empty object instead of an error as we would for example get it

24
00:01:50.930 --> 00:01:54.470
if I search for Slash place instead of slash places.

25
00:01:54.470 --> 00:01:59.920
Then we get this cannot get error which basically means no route is defined.

26
00:01:59.930 --> 00:02:03.110
Why do we not get this if I search for Slash user.

27
00:02:03.110 --> 00:02:08.670
Well that's a little gotcha we have here the order of routes matters.

28
00:02:08.750 --> 00:02:16.280
This first route handles all requests which start with Slash API slash places and then have any value

29
00:02:16.340 --> 00:02:20.830
because here we handle any value and we store it as a place.

30
00:02:21.200 --> 00:02:28.090
This route handles all requests which start with Slash API slash places slash user slash.

31
00:02:28.100 --> 00:02:29.060
Any value.

32
00:02:29.060 --> 00:02:37.270
The problem is if we enter just slash user this is the any value which is interpreted here as a place.

33
00:02:37.310 --> 00:02:38.750
I.D..

34
00:02:38.860 --> 00:02:44.710
Now when we add more for example user you 1 express correctly identifies that we don't want to make

35
00:02:44.710 --> 00:02:50.350
it in here but that we have a more specific route down there for Slash users slash more.

36
00:02:50.380 --> 00:02:57.810
But if we only have slash user like this Express does not find that this is an undefined route.

37
00:02:57.850 --> 00:03:05.710
Instead it makes it in here because while here we do handle any arbitrary value after slash API slash

38
00:03:05.710 --> 00:03:08.890
places and that's just something to be aware of.

39
00:03:08.980 --> 00:03:15.430
That of course this handles all values even if they're not valid I.D. Now it's not a huge problem because

40
00:03:15.430 --> 00:03:19.940
we simply don't find a place for user which is interpret that as I do here.

41
00:03:19.990 --> 00:03:24.790
It's just important for you to memorize that order can matter here as well.

42
00:03:24.850 --> 00:03:30.100
If you for example had a slash user route you want to handle like this which we don't need here.

43
00:03:30.100 --> 00:03:37.240
But if you had that you would have to move it in front of this route so that this does not already consume

44
00:03:37.420 --> 00:03:41.020
this user value as an I.D..

45
00:03:41.020 --> 00:03:46.390
Here it does not matter because here we have one extra segment which makes this route more specific

46
00:03:46.720 --> 00:03:48.850
and a different route than this one.

47
00:03:49.030 --> 00:03:56.050
But if you had slash one value only like Slash user you would have to switch order here to make sure

48
00:03:56.170 --> 00:04:00.610
that this route does actually reach and this route doesn't consume it in advance.

49
00:04:00.640 --> 00:04:03.140
That's just little gotcha to be aware of.

50
00:04:03.190 --> 00:04:08.320
It's not a problem here in our app because of the way we structure our routes and because of the paths

51
00:04:08.350 --> 00:04:11.640
we're working with but it might be a problem in our apps.

52
00:04:11.650 --> 00:04:18.110
Which is why I want to highlight it with that however we got our two main routes implemented here.

53
00:04:18.130 --> 00:04:25.450
Our two main get routes and we're able to get places by their I.D. or by the idea of their creator which

54
00:04:25.450 --> 00:04:31.070
is a nice step the for we now work on our routes.

55
00:04:31.270 --> 00:04:35.140
Let's actually handle errors in a bit of a better way.
