1
00:00:02,440 --> 00:00:07,010
So let's ensure that only authorized users can delete a place.

2
00:00:07,060 --> 00:00:11,820
Now here we again extract our place and we populate the creator.

3
00:00:11,830 --> 00:00:12,700
That's important.

4
00:00:12,700 --> 00:00:18,700
Creator is now not just an idea here as it is here in update place where I just find the place and I

5
00:00:18,700 --> 00:00:25,750
don't populate creator instead with populate creator the creator field holds the full User object that's

6
00:00:25,750 --> 00:00:30,670
important to keep in mind here though still here we find a place and if we don't find a place we throw

7
00:00:30,670 --> 00:00:37,180
an error but if we did find a place I want to check if the place was really created by the user who

8
00:00:37,180 --> 00:00:38,350
sent the request.

9
00:00:38,350 --> 00:00:45,940
So here we can check if place start create or dot I.D. And again keep in mind that creator here is the

10
00:00:45,940 --> 00:00:49,540
full User object which is why I access idols like this here.

11
00:00:49,570 --> 00:00:57,730
If that is not equal to request user data dot user I.D. so a similar check as we have it up here in

12
00:00:57,730 --> 00:01:04,330
the update place route no important here you don't need to call to string the cost Costas I.D. gather

13
00:01:04,330 --> 00:01:09,080
here already gives us the I.D. as a string and effort a check should be good like this.

14
00:01:10,490 --> 00:01:15,170
If we have a problem here we can basically use the same error we used up there.

15
00:01:15,170 --> 00:01:21,890
So Copy that down and return this error where we say you are not allowed to delete this place in this

16
00:01:21,890 --> 00:01:23,410
case here.

17
00:01:23,410 --> 00:01:25,770
So now if we save this let's give it a quick try.

18
00:01:26,080 --> 00:01:32,290
Let's try to delete a place by here switching patch to delete and postman the U R L is right and the

19
00:01:32,290 --> 00:01:38,590
headers are right now if I sent this I get you are not allowed to delete this place on the other hand

20
00:01:38,620 --> 00:01:46,750
on the front end with the right user year if I click delete and I confirm this it should succeed and

21
00:01:46,750 --> 00:01:53,980
it does so this year is now working we got authorization added now as a last step as a little bonus

22
00:01:53,980 --> 00:01:58,750
actually I'll fix some status codes thus far I always used 401.

23
00:01:58,780 --> 00:02:03,490
And to be honest in the end it's up to you what you use here it's not that strict but if you want to

24
00:02:03,490 --> 00:02:10,420
be very correct here then four hundred and one means an authorized which means your you might be authenticated

25
00:02:10,540 --> 00:02:16,240
but you're still not allowed to do this operation to perform this operation we have four hundred and

26
00:02:16,240 --> 00:02:21,980
free which means this is forbidden in general which you could translate with your not authenticated.

27
00:02:22,000 --> 00:02:27,610
So here I want to search for my 401 cases and check if they are all correct.

28
00:02:27,640 --> 00:02:29,950
So this is my user a d comparison and this is.

29
00:02:29,950 --> 00:02:36,190
So here they are correct in the user's controller on the other hand if I have 401.

30
00:02:36,220 --> 00:02:43,240
Then here we have invalid credentials so 403 makes more sense there and then check off it's the same

31
00:02:43,540 --> 00:02:50,020
if we fail because we have no valid token I would say it's rather a 403 error but ultimately it's up

32
00:02:50,020 --> 00:02:54,040
to you and it's not the end of the world if you use four hundred and one instead of four hundred and

33
00:02:54,030 --> 00:02:56,280
free or wise whereas.

34
00:02:56,710 --> 00:02:59,440
The important thing is that we have this logic added here.
