WEBVTT
1
00:00:02.240 --> 00:00:08.660
Somebody is set up now it's time to make sure we can interact with this database for that attached to

2
00:00:08.660 --> 00:00:09.440
this lecture.

3
00:00:09.440 --> 00:00:11.030
You can find this code.

4
00:00:11.030 --> 00:00:13.440
Make sure to download it and run npm install.

5
00:00:13.670 --> 00:00:20.540
And as you can see it's a really basic node express application you could say if you run NPM start we

6
00:00:20.540 --> 00:00:22.310
again got a development server.

7
00:00:22.310 --> 00:00:25.290
Could this process now as we don't need it for the moment.

8
00:00:25.430 --> 00:00:31.430
And as we can see we want to send a POST request here to slash products or a GET request all of those

9
00:00:31.430 --> 00:00:32.270
left products.

10
00:00:32.270 --> 00:00:37.880
So in the end we want to make sure that if we send a POST request that a new product is stored in our

11
00:00:37.880 --> 00:00:43.580
database or if we send a GET request that we get all the products stored in our database in the Hmong

12
00:00:43.580 --> 00:00:44.990
would it be terminology.

13
00:00:44.990 --> 00:00:50.000
This would mean we want to store a documents for each product would be a document in our collection

14
00:00:50.210 --> 00:00:52.050
with post and get put mean.

15
00:00:52.070 --> 00:00:55.770
Simply give me all the documents stored in a specific collection.

16
00:00:55.910 --> 00:00:58.170
We'll dive deeper into that from this module.

17
00:00:58.190 --> 00:01:04.040
Now the idea is that the Mongo D.B. logic or the logic related to the connection among Ruby is outsourced

18
00:01:04.040 --> 00:01:10.790
to a separate file create this file soon and that we then simply refer to this file here as part of

19
00:01:10.790 --> 00:01:13.310
our efforts as a separate argument.

20
00:01:13.310 --> 00:01:21.510
Therefore let's get started with creating this file and we can simply named as Mongo J SMB and what

21
00:01:21.510 --> 00:01:26.970
I want to do in this file or the logic I need in this file is actually quite straightforward.

22
00:01:26.970 --> 00:01:32.150
First I want to create a constant here which could be called create product.

23
00:01:32.280 --> 00:01:38.160
This would be the content related to our post request that we send to our server and this will be an

24
00:01:38.250 --> 00:01:39.390
asynchronous task.

25
00:01:39.390 --> 00:01:46.560
I can tell you this already because if you are working with databases your these tasks for example storing

26
00:01:46.560 --> 00:01:49.500
new data or touching data can take a moment.

27
00:01:49.500 --> 00:01:52.470
Therefore these are always asynchronous operations here.

28
00:01:52.500 --> 00:02:02.950
So we'll add async and we have a request a response and next and we will have a second constant.

29
00:02:02.980 --> 00:02:13.610
This will be our both maybe get products again an asynchronous task here then we're going to need this

30
00:02:13.620 --> 00:02:15.600
logic in here in our app is fine.

31
00:02:15.610 --> 00:02:21.630
As I said for the post and get request as an argument therefore we can already export our functions

32
00:02:21.900 --> 00:02:30.240
with exports create product being equal to create product and with export stopped get products equal

33
00:02:30.240 --> 00:02:32.010
to get products.

34
00:02:32.040 --> 00:02:36.300
So now we'll be able to reference these functions from inside other files.

35
00:02:36.300 --> 00:02:42.600
I'll come back to actually as soon though so let's focus on three mortgages final and if we now focus

36
00:02:42.630 --> 00:02:47.040
onto our logic maybe 4 create product here then we need the code to create the product.

37
00:02:47.040 --> 00:02:48.000
So the core logic.

38
00:02:48.120 --> 00:02:54.990
But before we do so we need to establish a connection to mongo D.B. and to do that we first need to

39
00:02:54.990 --> 00:02:55.650
install it.

40
00:02:55.650 --> 00:03:00.990
Therefore let's run npm install dash dash save Mongo DB.

41
00:03:01.830 --> 00:03:03.840
So we now installed Mongo TB.

42
00:03:03.870 --> 00:03:07.380
And in case you're wondering how I knew this command.

43
00:03:07.380 --> 00:03:14.790
If you go to the official docs now a link is attached to this lecture you can select the specific driver

44
00:03:14.790 --> 00:03:15.930
you're using what would you be worth.

45
00:03:15.930 --> 00:03:18.840
So you could all use it with Python for example or Java.

46
00:03:18.840 --> 00:03:21.650
We are using no checks here so you can set no checks.

47
00:03:21.690 --> 00:03:26.250
And if you go to installation you can see the command to install longer TB as this one right here.

48
00:03:26.280 --> 00:03:29.730
Just to be precise at this stage just avoid confusion.

49
00:03:29.730 --> 00:03:35.280
You don't install the database of course you only installed the driver so an ESTA K which allows you

50
00:03:35.280 --> 00:03:37.620
to interact with the database.

51
00:03:37.680 --> 00:03:43.350
The next thing we need is we need to use these so-called Mongo client de Mongo client will simply help

52
00:03:43.350 --> 00:03:47.050
us to create a new Mongo client instance Indian.

53
00:03:47.430 --> 00:03:51.040
So basically to make sure we can connect to a specific server.

54
00:03:51.060 --> 00:03:52.460
This means we have to import it.

55
00:03:52.500 --> 00:04:01.850
So we create not a constant named Mongo client which is equal to require Mongo.

56
00:04:01.950 --> 00:04:03.080
And very important.

57
00:04:03.120 --> 00:04:06.590
We refer to the Mongol client class right here.

58
00:04:06.600 --> 00:04:10.120
What we need next though is we need to specify which Hmong would you be Serb.

59
00:04:10.140 --> 00:04:14.430
We want to connect to and for that we have to go back to Mongolia be Atlas.

60
00:04:14.430 --> 00:04:16.530
And here we are now in our class that we created.

61
00:04:16.530 --> 00:04:18.540
We can select connect.

62
00:04:18.540 --> 00:04:22.730
And here we have different methods to connect to our Mongol TB server.

63
00:04:22.830 --> 00:04:26.540
In our case we want to connect through our application so we click here.

64
00:04:28.200 --> 00:04:31.380
Our diversion version is notorious for its error and later this is fine.

65
00:04:31.560 --> 00:04:39.440
And here we can see our connection string and we have to copy this string and now we can create a new

66
00:04:39.440 --> 00:04:41.410
constant named u r l.

67
00:04:41.780 --> 00:04:47.680
And here we now simply copy paste this connection string in the string.

68
00:04:47.690 --> 00:04:51.770
You see you have three interesting fields still the first one is this manual.

69
00:04:51.800 --> 00:04:54.310
That's the name of the user I just created.

70
00:04:54.350 --> 00:04:59.250
Then we have to provide the password and then we have this test part right here.

71
00:04:59.330 --> 00:05:04.520
But the password is quite straightforward I would say this is just the password to be created when we

72
00:05:04.520 --> 00:05:05.870
created the new user.

73
00:05:05.870 --> 00:05:07.420
This was this man user here.

74
00:05:07.460 --> 00:05:13.700
Here I just paste the password I created previously and the last step in our connection string is this

75
00:05:13.700 --> 00:05:15.840
part right here this test.

76
00:05:15.890 --> 00:05:20.600
This is the default name for the so-called database so we have the database which contains the collection

77
00:05:20.630 --> 00:05:28.840
which then contain the single documents in our case decimal places and we can give this in your name.

78
00:05:28.850 --> 00:05:36.100
Maybe places test not the most creative name but I guess it's fine for our purposes with that.

79
00:05:36.110 --> 00:05:42.470
We now added the Mongo client and have all your ls so theoretically we would be able to interact with

80
00:05:42.470 --> 00:05:43.060
our database.

81
00:05:43.070 --> 00:05:46.890
Now what's missing though of course is the logic to create the product.

82
00:05:46.940 --> 00:05:48.310
Let's continue with this now.
