WEBVTT
1
00:00:02.290 --> 00:00:10.180
So let's create a custom H to the p hook which handles all this data passing response status code checking

2
00:00:10.240 --> 00:00:15.850
and state management logic so that we just have a function let's say which we can call which then sends

3
00:00:15.850 --> 00:00:21.360
our request and which then updates all that state behind the scenes automatically for that and hooks

4
00:00:21.370 --> 00:00:23.350
folder in our shared folder.

5
00:00:23.410 --> 00:00:31.000
I'll add a new file and that is the H the p dash hook J.S. file which should have this H if you hook

6
00:00:31.000 --> 00:00:32.590
I want to create.

7
00:00:32.680 --> 00:00:36.350
So in there I will export a function.

8
00:00:36.580 --> 00:00:40.180
Use h to be client sounds like a fitting name to me.

9
00:00:40.540 --> 00:00:47.740
And this function year will then well do all that stuff we do manually in each component behind the

10
00:00:47.740 --> 00:00:49.250
scenes for us.

11
00:00:49.480 --> 00:00:57.210
Now it should be named use something to fulfill this rule of hooks using use at the beginning and we

12
00:00:57.210 --> 00:01:04.170
now need to import some things from react of course we'll definitely use state because we need to manage

13
00:01:04.170 --> 00:01:10.200
the loading and error state here so that in the components that use our custom hook we got that state

14
00:01:10.200 --> 00:01:12.030
managed automatically.

15
00:01:12.030 --> 00:01:16.680
Now what do we want to do inside of this use HDD to be client hook.

16
00:01:16.680 --> 00:01:23.760
Now I would say we certainly want to manage our loading and our estate in there.

17
00:01:23.760 --> 00:01:31.550
So when I copy that and move that into my HP hook then in here I want to have a function maybe rename

18
00:01:31.550 --> 00:01:34.690
it send request because that is what I want to do there.

19
00:01:34.940 --> 00:01:37.290
Which in the end should do just added.

20
00:01:37.400 --> 00:01:38.990
It should send the request.

21
00:01:38.990 --> 00:01:41.660
Now of course this function needs to be configurable.

22
00:01:41.720 --> 00:01:48.910
We need a U R L layer to which we want to send the request the request method which by default could

23
00:01:48.910 --> 00:01:59.420
be get the request data so the body estimate let's maybe name it body day for which by default will

24
00:01:59.420 --> 00:02:05.690
be no headers which by default will be an empty object not now but an empty object that's important

25
00:02:06.650 --> 00:02:08.670
and yep that looks good to me.

26
00:02:08.810 --> 00:02:16.130
Now instead of send request we can then call fetch and send it to a U R L and pass this configuration

27
00:02:16.190 --> 00:02:22.730
object in in this object we want to set the method to the method key we're getting here which is get

28
00:02:22.730 --> 00:02:28.130
by default which is fine if we set it but which could be post and so on and I'll use the shortcut here

29
00:02:28.160 --> 00:02:36.090
where we don't write this but let javascript expand this we want to set the body and our headers with

30
00:02:36.090 --> 00:02:41.700
this we have a reusable function which thus far only wraps fetch though right in the end we just forward

31
00:02:41.820 --> 00:02:44.370
all the parameters here to fetch.

32
00:02:44.370 --> 00:02:47.490
So right now we have no real benefit of using this.

33
00:02:47.760 --> 00:02:50.140
Well for one of course is async function now.

34
00:02:50.220 --> 00:02:56.060
So let's use a wait here and now we can do all that data extraction logic in here.

35
00:02:56.160 --> 00:03:02.790
So if we go back to the off page all that logic we're doing in here where we get the response data and

36
00:03:02.790 --> 00:03:11.480
check the response status code we can do that in here now we extract the response data and then we throw

37
00:03:11.480 --> 00:03:12.080
an error.

38
00:03:12.290 --> 00:03:15.850
If we have a 400 or 500 initial response code.

39
00:03:15.950 --> 00:03:20.630
So now we're doing this in our custom hook and in this function there as well.

40
00:03:20.630 --> 00:03:33.410
Now I will also wrap this now with try catch here of course is that off my hook like this so did in

41
00:03:33.420 --> 00:03:36.200
here I can set my error to error message.

42
00:03:36.210 --> 00:03:41.840
If we got an error I also want to manage the loading stay here of course.

43
00:03:41.840 --> 00:03:50.080
So here before we tried as I will set is loading to true and it will set is loading two faults once

44
00:03:50.080 --> 00:03:52.640
we're done now.

45
00:03:52.670 --> 00:03:56.690
If we stay in the success case so if you make it past does if check.

46
00:03:56.690 --> 00:04:02.150
I just want to return to response data so that the component which uses our hook and uses this function

47
00:04:02.420 --> 00:04:05.990
can handle the data because we need the data in that component.

48
00:04:06.020 --> 00:04:15.360
So here I will return responds data then we could also manage some data as state and here in the U.S.

49
00:04:15.380 --> 00:04:17.620
aid should be client hook but I don't want to do that.

50
00:04:17.630 --> 00:04:24.530
I just want to return it now this hook should return is loading an error and send request so that the

51
00:04:24.530 --> 00:04:29.300
component where we use this hook has access to these pieces of information and to dysfunction.

52
00:04:29.750 --> 00:04:33.380
So in the end here in at the end of my custom hook I will return.

53
00:04:33.380 --> 00:04:40.880
Let's say an array or actually maybe an object and there I want to return is loading and we could write

54
00:04:40.910 --> 00:04:44.390
is loading as loading like this or again use the shortcut.

55
00:04:44.390 --> 00:04:48.850
Return my error and the send request function.

56
00:04:48.860 --> 00:04:53.510
Now one important note about send a request to a wide infinite loops.

57
00:04:53.660 --> 00:04:56.580
I will wrap it with use callback.

58
00:04:56.600 --> 00:05:03.590
So the dysfunction never gets recreate it when the component that uses this hook re renders this function

59
00:05:03.890 --> 00:05:09.530
has no specific dependencies so I add an empty array as a second argument to use callback.

60
00:05:09.530 --> 00:05:15.430
But now we ensure well that this function as I said never gets recreated and we never have inefficient

61
00:05:15.430 --> 00:05:24.320
re render cycles or infinite loops at worst this can now be our agent to be client here one additional

62
00:05:24.320 --> 00:05:33.470
thing I want to add here though is one other function inside of my hook the let's say clear error function

63
00:05:34.040 --> 00:05:38.480
which will call set error and set this to null.

64
00:05:38.480 --> 00:05:44.930
And I want to expose that as well here in the object I return so that the components which use my hook

65
00:05:45.010 --> 00:05:51.940
all that can call this function and now there's one last piece I want to add to this hook which we didn't

66
00:05:51.940 --> 00:05:54.660
really take care about before.

67
00:05:54.700 --> 00:06:00.240
What if our request is on its way and we then switch to page.

68
00:06:00.400 --> 00:06:02.140
Then we would get an error right.

69
00:06:02.170 --> 00:06:07.570
If I safeties for example here I don't use the hook yet but we have our logic and there the same problem

70
00:06:07.570 --> 00:06:18.100
applies and now here I go to all users and authenticate then enter my data here and press this and go

71
00:06:18.100 --> 00:06:19.190
back immediately.

72
00:06:19.360 --> 00:06:25.810
If I would do the super fast and unfortunately here it loads too fast then we might get an error because

73
00:06:25.810 --> 00:06:33.430
we're trying to update our state on a component that's not on the screen anymore in such a case I actually

74
00:06:33.430 --> 00:06:38.770
want to cancel my ongoing HDP request to do that.

75
00:06:38.770 --> 00:06:46.270
I will create a new constant here and a custom hook active HDP request which is an array and which actually

76
00:06:46.270 --> 00:06:51.310
is not an array like this but instead I'll use to use ref hook which is built into react to turn it

77
00:06:51.310 --> 00:06:58.690
into a reference a reference here in the end is just a piece of data which will not change or in this

78
00:06:58.690 --> 00:07:02.460
case which will not be reinitiate lies to win this function runs again.

79
00:07:02.620 --> 00:07:07.180
And this function does run again whenever the component which uses this hook renders.

80
00:07:07.240 --> 00:07:10.840
So now it is will basically stored data across re render cycles.

81
00:07:10.840 --> 00:07:18.240
You could say so I got active HDP requests here and I want to add an active agent if you request.

82
00:07:18.250 --> 00:07:27.530
Once we sent a request so effectively here right after I set is loading to true so before I sent my

83
00:07:27.530 --> 00:07:34.790
request I will create a Agent P A board controller with new a board controller.

84
00:07:34.790 --> 00:07:44.480
This is an API supported in modern browsers and it will add this to my active HP requests so here to

85
00:07:44.480 --> 00:07:51.300
dot current use ref always wraps the data you store in it in an object which has a current property.

86
00:07:51.680 --> 00:07:56.750
So this current property holds does array which doesn't change across re render cycles to this I will

87
00:07:56.750 --> 00:08:04.450
push the board controller I'm not managing this as state for a state react would also manage it to survive

88
00:08:04.460 --> 00:08:08.900
reentry cycles because I don't want to update the UI when I change this data.

89
00:08:08.900 --> 00:08:14.270
This is just some behind the scenes state I am managing here so I'm storing such a board controller

90
00:08:14.270 --> 00:08:21.020
here again a board controller is a functionality built into modern browsers and we can assign an a board

91
00:08:21.020 --> 00:08:25.180
controller to our request basically.

92
00:08:25.190 --> 00:08:31.310
So here when we send the request with fetch we can add a signal property to the configuration object

93
00:08:31.730 --> 00:08:34.580
and point at our created a board.

94
00:08:34.580 --> 00:08:43.660
Controller and there at DOT signal this basically links does a board controller to this request and

95
00:08:43.660 --> 00:08:51.840
now we can use as a board controller to cancel this connect that request for this I will use the use

96
00:08:51.840 --> 00:08:58.640
of fact took here because use effect can not just be used to run some logic whenever a component re

97
00:08:58.640 --> 00:09:06.350
renders but also to clean up or to run some cleanup logic when a component on mounts and for dad lets

98
00:09:06.390 --> 00:09:14.070
say here at the bottom I will use a will call use a fact here and my second argument is an empty array

99
00:09:14.070 --> 00:09:18.990
the first argument is a function and therefore it is only runs when a component mounts.

100
00:09:19.200 --> 00:09:25.920
But in this first function when you return a function so you return a function in this first function

101
00:09:26.370 --> 00:09:33.900
then does return function is executed as a cleanup function before the next time use effect runs again

102
00:09:34.110 --> 00:09:38.530
or also when the component that uses use effect.

103
00:09:38.550 --> 00:09:43.180
So in our case the component that uses our custom hook on mounts.

104
00:09:43.290 --> 00:09:50.030
So in this cleanup function here I can then have a look at my active HBP request.

105
00:09:50.040 --> 00:09:56.400
Dot Kurd property which is an array of our board controllers in the end and then with the for each I

106
00:09:56.400 --> 00:10:04.110
can go through all these abort controllers and on every a board controller I can call a board and a

107
00:10:04.110 --> 00:10:07.290
request to which it is linked will therefore be aborted.

108
00:10:07.290 --> 00:10:14.720
Then and Now that warning which I get here that the value incurred will likely have changed by the time

109
00:10:14.720 --> 00:10:15.740
this cleanup runs.

110
00:10:15.740 --> 00:10:16.980
That is fine for me.

111
00:10:17.060 --> 00:10:23.540
I want it to reflect the latest state so to change state I want to go through all the board controllers

112
00:10:23.810 --> 00:10:26.060
we registered up to this point.

113
00:10:26.060 --> 00:10:32.570
So this is really just some logic added here to make sure that we never continue with a request.

114
00:10:32.570 --> 00:10:35.420
Data is on its way out.

115
00:10:35.480 --> 00:10:41.980
If we then switch away from the component that triggered to request this is our finished HP hook.

116
00:10:41.990 --> 00:10:45.390
Let's now use it in the components we already have.

117
00:10:45.410 --> 00:10:47.780
For example the off component.
