1
00:00:02,190 --> 00:00:09,150
So let's make sure we feed the information about the input value and the validity back to the place

2
00:00:09,150 --> 00:00:10,010
where we use the input.

3
00:00:10,020 --> 00:00:14,060
So in our case to the new place component so any input component here.

4
00:00:14,280 --> 00:00:20,100
When the end want to call some function which we expect to get from from outside.

5
00:00:20,100 --> 00:00:27,570
So in this case from new place through some prop when ever our input state changes basically or to be

6
00:00:27,570 --> 00:00:32,840
precise when ever the value or the validity of the input changes.

7
00:00:32,970 --> 00:00:41,670
So for that here in the input component I will use a new or a no reactive which we already used before

8
00:00:41,700 --> 00:00:48,120
and that's use of fact use a fact as you learn allows us to run some logic when some dependencies change

9
00:00:48,330 --> 00:00:54,270
we can use it to run something after the first render as we did it in the case of Google Maps but we

10
00:00:54,270 --> 00:01:01,440
can also use it to runs on logic in our case here whenever the input value or validity changes because

11
00:01:01,470 --> 00:01:07,530
that are the two conditions and typically they change together of course under which we want to emit

12
00:01:07,590 --> 00:01:14,450
a new value back to the place back to the component where we use the input component so maybe here we

13
00:01:14,450 --> 00:01:17,260
can use use of fact like this.

14
00:01:17,420 --> 00:01:20,050
Then here we have the function that should be executed.

15
00:01:20,090 --> 00:01:23,240
And here we have our array of dependencies.

16
00:01:23,240 --> 00:01:26,920
So array of things that should trigger this function.

17
00:01:26,930 --> 00:01:29,250
Now what do we want to do in this function.

18
00:01:29,270 --> 00:01:37,310
I want to call props on input for example because that is stand the prop we can set in new place to

19
00:01:37,310 --> 00:01:39,480
be basically informed about changes.

20
00:01:39,530 --> 00:01:42,060
So where we then pass a function to input.

21
00:01:42,110 --> 00:01:48,200
So when I call props on input here as a function because I expect to get a function on this prop and

22
00:01:48,200 --> 00:01:55,860
then maybe pass our I.D. off that input back to the component where we use the input component pass

23
00:01:55,880 --> 00:02:01,300
input stage stored value and pass input state that is valid.

24
00:02:01,400 --> 00:02:07,270
Now we need to specify our dependencies here and we could say our dependencies are props and input state.

25
00:02:07,340 --> 00:02:11,080
Right because we use data from props and we use data from input state in there.

26
00:02:11,330 --> 00:02:17,540
Dad would make sure that this function runs whenever anything in our props changes or whenever anything

27
00:02:17,630 --> 00:02:19,080
in our input state changes.

28
00:02:19,160 --> 00:02:24,290
This can actually create infinite loops because we call a function and the parent component.

29
00:02:24,290 --> 00:02:29,540
And if that then leads to the parent component giving us new props we call that function again.

30
00:02:29,540 --> 00:02:34,190
And even if it does not lead to infinite loops it might execute too often.

31
00:02:34,190 --> 00:02:40,670
It would also execute if our touch state changes even though that's not a state that yields any new

32
00:02:40,670 --> 00:02:43,190
value or validity information.

33
00:02:43,460 --> 00:02:51,300
So therefore I will not feed in these dependencies but pull out the relevant pieces with object D structuring

34
00:02:51,800 --> 00:03:00,740
from the props I want to get the I.D. and the on input prop like this so that here I can use I.D. and

35
00:03:00,770 --> 00:03:12,320
just call on input and from the input state I want I get the value and is valid from input state like

36
00:03:12,320 --> 00:03:17,730
this and that means here I just forward value and is valid.

37
00:03:17,960 --> 00:03:26,570
And here I have I.D. value is valid and actually also on input as dependencies because the on input

38
00:03:26,660 --> 00:03:29,660
thing here is also something we get from outside.

39
00:03:29,870 --> 00:03:36,170
So whenever one of these things changes over the function it should be called the I.D. or most importantly

40
00:03:36,170 --> 00:03:44,120
value or is valid we will call on input so the value we get on the on input prop that takes us to the

41
00:03:44,120 --> 00:03:50,270
new place the new place component there of course we now have to provide a function that should be called

42
00:03:51,340 --> 00:04:04,500
so here in New Place J.S. we can add a function and named add tidal change or tidal Input handler.

43
00:04:04,500 --> 00:04:10,110
It's a function which will receive the I.D. you might say that's kind of redundant because we know it

44
00:04:10,110 --> 00:04:11,700
will be the title that changed.

45
00:04:11,790 --> 00:04:13,110
This will become important later.

46
00:04:13,110 --> 00:04:19,050
So for now let's just get it it will get the idea of the input that changed the value and the answer

47
00:04:19,050 --> 00:04:21,990
whether Dad input is now valid or not.

48
00:04:21,990 --> 00:04:29,580
Because these are the three pieces of information we pass here in our input component idea value and

49
00:04:29,580 --> 00:04:30,290
is valid.

50
00:04:30,390 --> 00:04:32,930
So we get these free pieces of information here.

51
00:04:32,970 --> 00:04:37,170
Of course you could pick different names here for the parameters though it's a brand new function in

52
00:04:37,170 --> 00:04:39,330
a different component after all.

53
00:04:39,330 --> 00:04:40,800
So now here we can bind

54
00:04:43,640 --> 00:04:48,640
on input to the title Input handler so that this is the function that does get executed.

55
00:04:48,650 --> 00:04:50,340
Now we should be careful though.

56
00:04:50,690 --> 00:04:55,610
We will have one problem or we could have one problem whenever an input.

57
00:04:55,610 --> 00:04:58,410
We call on input and be forward disinformation.

58
00:04:58,640 --> 00:05:00,840
We trigger this function here right.

59
00:05:01,370 --> 00:05:08,030
And if in this function we now do anything that changes to state of the new place component and re renders

60
00:05:08,030 --> 00:05:14,480
it what will happen technically is that a new title Input handler function gets created because we create

61
00:05:14,480 --> 00:05:16,340
this function instead of the function.

62
00:05:16,340 --> 00:05:22,430
So whenever a component function runs this function is recreated even if it has the same logic as before.

63
00:05:22,460 --> 00:05:24,200
It's a new function object.

64
00:05:24,230 --> 00:05:26,150
That's how javascript works.

65
00:05:26,240 --> 00:05:32,750
So that means that the function will technically change the function is fed into the input component

66
00:05:33,080 --> 00:05:36,780
and there on input is a dependency of this function.

67
00:05:36,800 --> 00:05:42,290
So then does affect function would run again would trigger this function again and would effectively

68
00:05:42,290 --> 00:05:45,340
lead to an infinite loop to avoid this.

69
00:05:45,470 --> 00:05:52,680
We import another hook from react and that's the use callback hook we can use use callback to wrap a

70
00:05:52,680 --> 00:05:53,410
function.

71
00:05:53,520 --> 00:05:59,850
So in this case this function here and to find the pendency is off this function under which it should

72
00:05:59,940 --> 00:06:06,200
read render and here for the moment I specify no dependencies which now means if the component renders

73
00:06:06,200 --> 00:06:13,500
if the component functionary executes this function here will be stored away by react and will be reused

74
00:06:13,710 --> 00:06:20,040
so that no new function object is created whatever the function the component function renders but that

75
00:06:20,040 --> 00:06:25,890
instead this function is reused and doesn't change and that then does not lead to use of fact to run

76
00:06:25,890 --> 00:06:26,540
again.

77
00:06:26,610 --> 00:06:32,160
That's really important here to avoid an infinite loop and with that of course the question is what

78
00:06:32,160 --> 00:06:35,200
do we want to do in title input handler.

79
00:06:35,250 --> 00:06:42,930
Well we want in the end managed the overall validity and values of the entire form because we will have

80
00:06:42,930 --> 00:06:49,020
multiple inputs there we can already create a second one for example we can create a second input and

81
00:06:49,020 --> 00:06:56,490
Dad let's say is actually a text area maybe hence we don't need to type the label then could be description.

82
00:06:56,670 --> 00:06:59,550
We also should provide an I.D. by the way here.

83
00:06:59,550 --> 00:07:05,580
Ideas should be title and here idea would be description let's say.

84
00:07:05,780 --> 00:07:09,130
And I also want to provide my validators here.

85
00:07:09,140 --> 00:07:14,900
I want to require this but I also want to make sure that we have a min length of 5 and therefore we

86
00:07:14,900 --> 00:07:20,990
don't actually need require because if we have a minimum length of 5 Well it must not be empty anyways.

87
00:07:20,990 --> 00:07:29,110
Here we can enter please enter a valid description at least 5 characters as extra hint maybe

88
00:07:31,970 --> 00:07:37,430
and we could also specify a row is here but I'm happy with the default of 3 which we coded into our

89
00:07:37,430 --> 00:07:45,980
input component so now we have a second input and now we want to find out in our input handlers whether

90
00:07:45,980 --> 00:07:47,340
the overall form is valid.

91
00:07:47,360 --> 00:07:51,310
And of course we want to store all the values of the individual inputs.

92
00:07:51,440 --> 00:07:59,060
So actually we'll need a second handler here a description input handler and we'll bind this description

93
00:07:59,060 --> 00:08:03,980
input handler to this second input here to the on input prop there.

94
00:08:04,830 --> 00:08:06,830
So now we've got two input handlers.

95
00:08:06,870 --> 00:08:09,540
Now we need to manage the overall form validity.
