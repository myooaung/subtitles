WEBVTT
1
00:00:02.180 --> 00:00:08.060
Now to come to an end in this very long module but rebuild an entire reactor up from scratch.

2
00:00:08.060 --> 00:00:15.020
I want to make sure that when we click log in or sign up we don't just locks to the console but we instead

3
00:00:15.050 --> 00:00:20.900
do log the user in at least we fake to do so we can't really lock the user in because we have no back

4
00:00:20.900 --> 00:00:23.500
end where we would send and validate the data.

5
00:00:23.660 --> 00:00:26.770
But at least we can change something on the user interface.

6
00:00:26.780 --> 00:00:28.940
For example if we are logged in.

7
00:00:28.970 --> 00:00:31.040
I don't want to see the authenticate button here.

8
00:00:31.070 --> 00:00:33.500
Instead a logout button would be nice.

9
00:00:33.500 --> 00:00:41.360
I also don't want to see my places if I'm not locked in because we can only reach our places if we are

10
00:00:41.420 --> 00:00:42.630
logged in.

11
00:00:42.650 --> 00:00:48.920
So I want to manage the log in status of the user in the react application here even though we have

12
00:00:48.920 --> 00:00:55.110
no full log in flow yet we're missing the back end to manage that status.

13
00:00:55.130 --> 00:01:02.600
We need a brand new react concept which is called context context allows us to pass data between any

14
00:01:02.600 --> 00:01:06.620
components in our application without using props.

15
00:01:06.770 --> 00:01:13.090
And that is very useful if you have some general application white data like is the user logged in.

16
00:01:13.130 --> 00:01:19.520
So such a central vital question which affects a lot of parts in your application which you simply don't

17
00:01:19.520 --> 00:01:22.610
want to pass around with props because that would be madness.

18
00:01:22.670 --> 00:01:26.170
You would have to pass props from everywhere to everywhere.

19
00:01:26.210 --> 00:01:28.130
It would be super annoying.

20
00:01:28.130 --> 00:01:34.040
So context is some behind the scenes data transfer mechanism you could say and it's built right into

21
00:01:34.040 --> 00:01:43.260
react now to use context I will add a new folder in the shared folder next to components and hooks and

22
00:01:43.260 --> 00:01:43.860
I will name it.

23
00:01:43.950 --> 00:01:48.310
Well context the name is up to you but I will manage some context in there.

24
00:01:48.390 --> 00:01:51.230
So I guess the name makes sense in there.

25
00:01:51.240 --> 00:01:51.660
I'll add a.

26
00:01:51.680 --> 00:01:53.140
Off dash context.

27
00:01:53.180 --> 00:02:00.190
J.S. file and here I will import create context from.

28
00:02:00.190 --> 00:02:02.910
React a function react offers.

29
00:02:03.250 --> 00:02:10.000
We can call it to create such a context object which we later can share between our components to share

30
00:02:10.000 --> 00:02:15.850
some data behind the scenes we can initialized with some initial data and there it will have a very

31
00:02:15.850 --> 00:02:17.290
simple piece of data.

32
00:02:17.500 --> 00:02:25.690
I'll have to is logged in key which initially is false and I will have a log in function which here

33
00:02:26.320 --> 00:02:28.900
is just an empty function for the moment.

34
00:02:29.120 --> 00:02:35.190
I don't want to have a logout function as well so a method to be precise because it's a function in

35
00:02:35.190 --> 00:02:37.890
object and that is called a method.

36
00:02:37.890 --> 00:02:43.020
So what is logged in is a property in this object with which we initialize our context and we got log

37
00:02:43.020 --> 00:02:53.560
in and log out as methods they're now all stored is in a constant off context and it will export this

38
00:02:53.560 --> 00:02:56.240
constant.

39
00:02:56.250 --> 00:03:02.790
So this is my off context does it some object we can now share between components and when we updated

40
00:03:03.090 --> 00:03:06.870
any component that kind of listens to it will always update.

41
00:03:06.900 --> 00:03:09.900
However we're not ready to use it just like this.

42
00:03:09.900 --> 00:03:15.300
There is a reason why it's not a regular javascript object but why we have to created with create context

43
00:03:15.300 --> 00:03:20.520
in the end because with our context created we can now go to app J.S..

44
00:03:20.520 --> 00:03:28.080
So to a place in our application that is on top of our component hierarchy you could say an app component

45
00:03:28.080 --> 00:03:34.230
is clearly at the very top it's our root component if you want to call it like this in there I'll import

46
00:03:34.740 --> 00:03:40.190
off context from shared context

47
00:03:43.510 --> 00:03:52.410
of context and now how do we use of context there we wrap the parts of our application that should be

48
00:03:52.410 --> 00:03:55.690
able to use that context with it.

49
00:03:55.710 --> 00:03:58.790
So here we have the entire router.

50
00:03:58.980 --> 00:04:06.780
In the end I go there and wrap everything the entire router with off context dot provider.

51
00:04:06.780 --> 00:04:11.140
So does context which is created with the help of create context.

52
00:04:11.200 --> 00:04:18.270
Indian is the object which has a property which turns out to be a react component the provider property.

53
00:04:18.330 --> 00:04:24.650
So we use this component here and wrap our entire router with it with off context provider.

54
00:04:24.670 --> 00:04:30.780
Now every component in there like main navigation and every loaded page and every component used in

55
00:04:30.780 --> 00:04:33.810
a page has access to this off context.

56
00:04:33.810 --> 00:04:35.560
That's one nice thing.

57
00:04:35.640 --> 00:04:39.110
Now the provider also takes a value prop.

58
00:04:39.210 --> 00:04:46.460
And here we bind the value we manage with our context which we initialize to this object here we bind

59
00:04:46.490 --> 00:04:50.780
this to a new value we bind this initial value to a new value.

60
00:04:50.810 --> 00:04:57.170
And whenever this value here changes all the components that listen to our context so that actively

61
00:04:57.170 --> 00:05:03.230
tap into the context will re render not all the components that are wrapped by all context provider

62
00:05:03.440 --> 00:05:08.490
but only two components where we then will add some code to listen to our context.

63
00:05:08.490 --> 00:05:14.270
And now that's a cool thing we can now manage some state here in the app component and bind this to

64
00:05:14.270 --> 00:05:20.690
the value of our context and hence when the state here changes and the value changes and this component

65
00:05:20.730 --> 00:05:27.200
renders because our state changed we will be able to rebrand or update the components that are interested

66
00:05:27.350 --> 00:05:39.700
in our context so for that let's import use state here in our app component and also already use callback

67
00:05:39.730 --> 00:05:41.680
because we'll need that as well.

68
00:05:41.770 --> 00:05:50.800
And then India component let's add a new state and that is is locked in and set is locked in and with

69
00:05:50.800 --> 00:05:57.690
you as a state we can initialize this and at the beginning let's say this is false then I add a log

70
00:05:57.690 --> 00:06:06.090
and function here which I wrap with use callback so that it is not re created unnecessarily to avoid

71
00:06:06.840 --> 00:06:07.760
infinite loops.

72
00:06:07.800 --> 00:06:11.190
So my dependencies of use callback is an empty array for now.

73
00:06:11.300 --> 00:06:17.130
What this means does function here will never have to be recreated now in there.

74
00:06:17.280 --> 00:06:27.930
I simply want to set is locked in to true and then it will copy that and create a log out function which

75
00:06:27.930 --> 00:06:34.740
looks very similar but where a set is logged in sets the locked in state to false of course and now

76
00:06:34.740 --> 00:06:45.190
value here is bound to a new object where is locked in is set to hour is logged in state here and where

77
00:06:45.190 --> 00:06:52.150
to log in method is set to our log and function here and log out is set to our log out function and

78
00:06:52.150 --> 00:06:57.430
now whenever it just changes which is the case when is locked in changes this new value will be passed

79
00:06:57.430 --> 00:07:01.960
down to all the components that are interested and that's the nice thing here.
