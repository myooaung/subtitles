1
00:00:02,200 --> 00:00:06,340
To convert an address to coordinates Google has a nice API.

2
00:00:06,340 --> 00:00:11,340
You can search for a Google geo coding API and below the ads.

3
00:00:11,350 --> 00:00:14,330
You should find this API here.

4
00:00:14,470 --> 00:00:20,450
That's a documentation of the API and you can of course check that out to learn all about that API.

5
00:00:20,530 --> 00:00:26,040
In the end what we want to do is we want to do a geo coding request here on the right.

6
00:00:26,110 --> 00:00:32,350
We want to search for an address and get back coordinates now to be able to send the request there.

7
00:00:32,360 --> 00:00:33,940
We need an API key.

8
00:00:33,980 --> 00:00:40,220
That's not something we need on our API we build but a lot of API which are exposed to the public which

9
00:00:40,220 --> 00:00:42,590
is not the idea of our API.

10
00:00:42,590 --> 00:00:48,740
A lot of API which are exposed to the public require api keys so that they can kind of keep track of

11
00:00:48,740 --> 00:00:51,360
the users working with their API.

12
00:00:51,360 --> 00:00:55,420
Now to create such a API key we first of all need a Google account.

13
00:00:55,520 --> 00:01:00,710
So let's sign and by the way in case you can't create a Google account or you can set a building with

14
00:01:00,710 --> 00:01:06,080
a credit card which you will also need unfortunately to work with the Google API as you can just write

15
00:01:06,080 --> 00:01:12,200
some dummy code that simply translates every address into the same pair of coordinates so that you can

16
00:01:12,200 --> 00:01:14,120
follow along and of course just fine.

17
00:01:14,120 --> 00:01:17,250
I will show this in the next minutes as well.

18
00:01:17,300 --> 00:01:23,240
So now I did log in with my account and I can now click on get started here at the top and you'll be

19
00:01:23,240 --> 00:01:27,400
forwarded to a page where you can pick the products you want to work with.

20
00:01:27,440 --> 00:01:32,060
Now there we only need places but it all doesn't hurt to choose maps.

21
00:01:32,060 --> 00:01:39,440
If you decide to also use Google Maps on your front end with one of their SDK is like a Javascript SDK

22
00:01:39,650 --> 00:01:45,260
they are exposing but places is the thing we absolutely need right now so you can't continue.

23
00:01:45,260 --> 00:01:50,270
Then select a project or simply create a new project which is what all do here.

24
00:01:50,270 --> 00:01:56,900
Course project you can of course pick a more meaningful name click next and now wait for it to finish.

25
00:01:56,900 --> 00:02:01,790
Now you might be prompted to set up a billing account and add a credit card.

26
00:02:01,790 --> 00:02:09,380
What we do here is free though you can search for Google Maps pricing to find detailed information about

27
00:02:09,380 --> 00:02:15,950
their pricing and you will see that you have a two hundred dollar free you search every month for their

28
00:02:15,950 --> 00:02:18,580
API is and that will get you very far.

29
00:02:18,590 --> 00:02:22,670
You'll find examples down there where you see what this costs and so on.

30
00:02:22,670 --> 00:02:28,050
So what we do with the frequency and volume we use in the course will be free.

31
00:02:28,140 --> 00:02:34,870
But of course checked is in case you are working with Google Maps or any Google API in real application

32
00:02:36,000 --> 00:02:38,970
so here I will confirm that I want to use this account for billing.

33
00:02:39,000 --> 00:02:44,070
And again if you can't set up billing you can continue here but I will show you some dummy fallback

34
00:02:44,070 --> 00:02:45,780
code in just a second.

35
00:02:46,740 --> 00:02:53,630
Here it will just confirm that it will enable all API eyes and then this will load a bit more and I

36
00:02:53,630 --> 00:02:55,530
get my api key by the way.

37
00:02:55,580 --> 00:02:57,140
No need in copying mine.

38
00:02:57,140 --> 00:03:01,760
By the time you're watching this I will already have invalidated my key of course.

39
00:03:01,790 --> 00:03:06,710
Now this key is something you should copy or just leave his window open for now because we will need

40
00:03:06,710 --> 00:03:08,040
it now.

41
00:03:08,060 --> 00:03:14,480
I will add a new folder to the node application which I'll name you till for utility you can of course

42
00:03:14,480 --> 00:03:18,980
named a folder how you want and then they are all at a location J as fall in data.

43
00:03:18,980 --> 00:03:25,640
I'll add a API key constant all caps to make it clear that this is like at the local constant I will

44
00:03:25,640 --> 00:03:31,860
use in this file and this is the API key I got here by Google.

45
00:03:32,130 --> 00:03:38,220
Now with that we can write a function here in that file which takes an address reaches out to Google's

46
00:03:38,220 --> 00:03:41,490
API and converts does address to coordinates.

47
00:03:41,520 --> 00:03:45,490
Now if you can set up billing and you therefore don't have an API key.

48
00:03:45,680 --> 00:03:52,770
Here is a dummy function you can use get coords for address and by the way of course it does not matter

49
00:03:52,770 --> 00:04:00,720
if you create a function like this in the declaration form or if you do get coords for address and use

50
00:04:00,720 --> 00:04:06,810
an arrow function for example you can use either notation here to mix things up.

51
00:04:06,930 --> 00:04:11,470
All use this declaration form and I expect to get my address here as the argument.

52
00:04:11,490 --> 00:04:18,090
Now if you have no API key if you consider building you have no credit card you can simply return coordinates

53
00:04:18,090 --> 00:04:28,340
here coordinates where we have a latitude and there I will use the dummy latitude I have in the places

54
00:04:28,340 --> 00:04:29,220
controller.

55
00:04:29,360 --> 00:04:32,100
So essentially I will use this object here to be precise.

56
00:04:32,120 --> 00:04:41,400
I will return this object here they are now that's my dummy however actually in the real function which

57
00:04:41,400 --> 00:04:47,100
will write in a second will make age the BP request which will be a asynchronous task in which they

58
00:04:47,100 --> 00:04:49,860
offer will work with promises.

59
00:04:49,860 --> 00:04:56,100
So we'll turn this function to a async function by using the async keyword in front of it async await

60
00:04:56,160 --> 00:04:59,430
is a functionality built into modern javascript.

61
00:04:59,510 --> 00:05:05,520
It in the end make sure that this function or the return value of that function gets wrapped into a

62
00:05:05,520 --> 00:05:11,670
promise and it makes sure that when you're working with promises in there you can use a wait in front

63
00:05:11,670 --> 00:05:16,670
of the promise to wait for its response instead of promise then.

64
00:05:16,760 --> 00:05:23,160
And if this all doesn't tell you anything attached you find more resources on promises and async await

65
00:05:23,280 --> 00:05:24,590
since as Javascript.

66
00:05:24,600 --> 00:05:30,140
I assume that this knowledge is there here or that you're picking it up side by side with this course

67
00:05:30,960 --> 00:05:36,840
and therefore for now what we have here that's the main takeaway is a function which will return to

68
00:05:36,840 --> 00:05:45,210
coordinates but wrapped in a promise so not immediately not synchronicity but asynchronously through

69
00:05:45,210 --> 00:05:46,360
that promise.

70
00:05:46,470 --> 00:05:52,050
But returning this year is the fallback anyways so only required if you have no credit card otherwise

71
00:05:52,230 --> 00:05:59,910
now will write to code which will send the request to Google's API and get us the coordinates for a

72
00:05:59,910 --> 00:06:05,720
given address now to send the request from insert a node app.

73
00:06:05,740 --> 00:06:11,560
We have some built in core modules that help us with that but it's a bit cumbersome to use them to be

74
00:06:11,560 --> 00:06:12,220
honest.

75
00:06:12,220 --> 00:06:18,100
So I will use a third party package here which I installed with npm install dash dash safe and that's

76
00:06:18,100 --> 00:06:20,140
the access package.

77
00:06:20,140 --> 00:06:25,840
Now if you have some javascript and especially some front end javascript experience you might already

78
00:06:25,840 --> 00:06:26,990
know this package.

79
00:06:27,010 --> 00:06:34,660
It's a very popular package for sending H to p requests from front end applications to back ends now

80
00:06:34,750 --> 00:06:36,180
not known by everyone.

81
00:06:36,250 --> 00:06:41,110
Is that this package can also be used on a node server to send the request from there.

82
00:06:41,110 --> 00:06:43,160
And that's exactly what I'll do here.

83
00:06:43,160 --> 00:06:50,190
Full install access and it will allow me to send a request from my notes server to yet another server.

84
00:06:50,230 --> 00:06:51,740
So together no backing.

85
00:06:52,330 --> 00:07:01,420
So let's run this here with NPM start and then here I will import access by requiring access like this.

86
00:07:01,420 --> 00:07:09,640
Now here I can send a get request to a U R L and now the question is which you are l Well we get that

87
00:07:09,640 --> 00:07:11,330
from the Google Docs.

88
00:07:11,500 --> 00:07:18,910
Again search for a Google geo coding API to get back to their docs and there was this geo coding request.

89
00:07:18,910 --> 00:07:24,560
Here you can simply copy this you are L here and go back to your code.

90
00:07:24,580 --> 00:07:30,130
Now I will use back tricks here to create a template real literal and no default javascript feature

91
00:07:30,580 --> 00:07:36,850
which allows me to create a string where I can easily inject dynamic segments because here this address

92
00:07:36,880 --> 00:07:39,670
does dummy address should be replaced.

93
00:07:39,850 --> 00:07:47,110
So Mark all that address so everything after that equal sign in front of that ampersand symbol and then

94
00:07:47,110 --> 00:07:49,920
add a dollar sign an opening closing curly brace.

95
00:07:49,960 --> 00:07:56,650
That's the syntax for injecting I dynamic value into a string or into a template literal.

96
00:07:56,740 --> 00:08:02,710
Now that is the address we're getting as an argument but we need to convert that to get rid of special

97
00:08:02,710 --> 00:08:04,450
character or whitespace.

98
00:08:04,690 --> 00:08:10,960
With the help of a global function away lable in JavaScript in note J.S. and that's the ENCODE you are

99
00:08:10,990 --> 00:08:12,180
I component.

100
00:08:12,400 --> 00:08:15,320
Function simply pass your string to it.

101
00:08:15,340 --> 00:08:21,680
So the address string and it will give you back a string which and codes everything into where you are

102
00:08:21,700 --> 00:08:23,410
L friendly format.

103
00:08:23,410 --> 00:08:31,370
Now we all need to inject our API key here and that's of course the global API key constant we created.

104
00:08:31,390 --> 00:08:37,240
Now this sends a gat request to this you are L and should return us the coordinates for that given address.

105
00:08:38,620 --> 00:08:46,270
So here I get my response by a weighting that is available because I added async here for the response.

106
00:08:46,270 --> 00:08:51,920
It's the same as if I would have called then here and then added My response handling function here.

107
00:08:51,940 --> 00:08:55,230
It's just a bit easier to read which is why I use it.

108
00:08:55,390 --> 00:09:01,180
And then there we can get the data out of the response axis gives us a data field on the response object

109
00:09:01,210 --> 00:09:03,360
that holds our data.

110
00:09:03,360 --> 00:09:09,250
And I have first of all want a check of data is not set or and that's special for a Google API.

111
00:09:09,250 --> 00:09:20,140
You can read all about that here in their docs if there is a status field whips data dot status which

112
00:09:20,140 --> 00:09:24,400
is equal or which holds a value of zero results written like this.

113
00:09:24,490 --> 00:09:30,490
Google will give us this field with this text a if no coordinates were found for a specified address

114
00:09:30,880 --> 00:09:36,540
and this will handle the scenario that the user entered a valid address when it comes to our validation

115
00:09:36,670 --> 00:09:41,770
so that it was a non empty field but an address which simply can't be found.

116
00:09:41,770 --> 00:09:45,250
Well in that case we'll get back this response by Google.

117
00:09:45,520 --> 00:09:48,630
If we do get back that response I'll create a new error.

118
00:09:48,670 --> 00:09:54,130
A new age to the p error and therefore I will import my own age.

119
00:09:54,130 --> 00:10:04,730
The P error class here from the models folder a new P error where the messages could not find location

120
00:10:04,790 --> 00:10:07,030
for the specified address.

121
00:10:07,130 --> 00:10:14,970
I mean 422 could be a status code we set here because it would probably happened because of an invalid

122
00:10:14,970 --> 00:10:17,930
user input but you could also go for 404.

123
00:10:17,940 --> 00:10:24,400
It's up to you and I don't want to throw that error here.

124
00:10:24,410 --> 00:10:29,720
Now if you throw an error here in the async function the promise that is automatically created and wraps

125
00:10:29,720 --> 00:10:35,510
everything in the function will basically also throw that error if we make it past this.

126
00:10:35,510 --> 00:10:41,520
If check we know we have no error so then I want to extract my coordinates and I get that from data

127
00:10:41,550 --> 00:10:47,820
dot results and you can read more about the structure of the response you get from Google here in their

128
00:10:47,820 --> 00:10:49,100
docs.

129
00:10:49,110 --> 00:10:51,540
So the coordinates can be found in data results.

130
00:10:51,550 --> 00:10:56,520
They're the first element because this turns out to be an array but the first element is the one that

131
00:10:56,520 --> 00:11:04,620
best matches to give an address their geometry and then location and this will be an object which looks

132
00:11:04,710 --> 00:11:06,510
like this year.

133
00:11:06,510 --> 00:11:08,000
So does the location object.

134
00:11:08,040 --> 00:11:16,780
So it has this lat and LNG key with no values in it which we need and here I will then return the coordinates.

135
00:11:16,780 --> 00:11:21,700
So that will then all the return of coordinates object just as we did it before with the dummy code

136
00:11:21,700 --> 00:11:23,860
in case you don't have an API key.

137
00:11:24,100 --> 00:11:29,800
And with that we just have to make sure we export this function so we can use it so we can use module

138
00:11:29,800 --> 00:11:32,880
exports and set this equal to get coords for address.

139
00:11:32,920 --> 00:11:40,120
Of course not executing it just pointing at it so that we can execute it from inside our files specifically

140
00:11:40,390 --> 00:11:42,460
the place controller there.

141
00:11:42,610 --> 00:11:44,210
I want to use this now.

142
00:11:44,260 --> 00:11:51,150
So here I'll have get coords from address which all will require from the you till folder and there

143
00:11:51,150 --> 00:11:53,050
to location file.

144
00:11:53,050 --> 00:11:59,340
And now we need to call this when we create a place to translate our address to coordinates.

145
00:11:59,530 --> 00:12:05,680
For that I will convert my create place func here to a async function as well by adding the async keyword

146
00:12:05,710 --> 00:12:11,890
in front of the argument list simply so that we can use to await keyword in here and work with promises

147
00:12:11,890 --> 00:12:13,060
in a more elegant way.

148
00:12:13,600 --> 00:12:21,880
Now since I did this however we should also not throw errors anymore but call next year instead because

149
00:12:21,880 --> 00:12:29,230
when working with async code throw will not work correctly in Express so you always need to next your

150
00:12:29,230 --> 00:12:29,720
error.

151
00:12:29,740 --> 00:12:35,650
Now with that I still do my validation first and once I extracted the address it's time to convert the

152
00:12:35,650 --> 00:12:37,630
address to coordinates.

153
00:12:37,630 --> 00:12:43,400
So here we can call get coords for address and pass in the address.

154
00:12:43,420 --> 00:12:50,250
This returns a promise so we can await it and get our coordinates here.

155
00:12:50,320 --> 00:12:53,850
Now this might fail it might throw an error right.

156
00:12:53,890 --> 00:13:01,330
I'm throwing an error in there and if you want to handle an error when using async await we have to

157
00:13:01,330 --> 00:13:05,080
wrap this into a try catch block that's all.

158
00:13:05,110 --> 00:13:05,770
But Mila.

159
00:13:05,770 --> 00:13:12,610
Javascript so we'll actually create a coordinates variable here and assign a value to it instead of

160
00:13:12,610 --> 00:13:20,080
try catch so that coordinates is not just scoped to the dry block and then here we might catch an error.

161
00:13:20,090 --> 00:13:24,810
If that fails if we do catch an error I simply want to next it.

162
00:13:24,860 --> 00:13:26,750
I want to forward it.

163
00:13:26,810 --> 00:13:31,970
I also want to return so that no other code they're off to runs since we catch the error.

164
00:13:31,970 --> 00:13:35,030
We don't quit the function execution automatically.

165
00:13:35,030 --> 00:13:40,850
So we have to quit it by calling return Album wise if we don't make it into Catch.

166
00:13:40,850 --> 00:13:45,490
So if we do get coordinates coordinates will be populated with our coordinates.

167
00:13:45,500 --> 00:13:49,970
That also means that I no longer expect them here on my incoming request.

168
00:13:49,970 --> 00:13:54,740
Instead I get them here when we convert the address to coordinates.

169
00:13:54,740 --> 00:13:59,840
Therefore we will still have coordinates down there if we make it thus far and everything in general

170
00:13:59,840 --> 00:14:02,730
down there can stay the way it is.

171
00:14:02,810 --> 00:14:08,540
Let's now give this a try save everything and let's see whether it works.

172
00:14:08,570 --> 00:14:10,630
So here I'll try to create a new place.

173
00:14:10,640 --> 00:14:13,480
I no longer need to provide my coordinates here.

174
00:14:13,610 --> 00:14:18,080
I will create my title here.

175
00:14:18,100 --> 00:14:27,810
New York Stock Exchange so that this is all valid and hit send and I got an unexpected token error here

176
00:14:28,260 --> 00:14:31,440
because of that extra trading karma which I forgot to delete.

177
00:14:31,440 --> 00:14:34,000
Make sure you do and then send it again.

178
00:14:34,290 --> 00:14:35,900
And this is looking good.

179
00:14:35,940 --> 00:14:37,490
We got a location here.

180
00:14:37,560 --> 00:14:43,410
And since I'm not passing coordinates here these have to be the coordinates inferred by Google.

181
00:14:43,410 --> 00:14:45,770
Let's also try a different place here.

182
00:14:45,780 --> 00:14:52,200
By entering a different address for example the Marine plots in mention Munich.

183
00:14:52,200 --> 00:14:53,640
You could enter anything here.

184
00:14:53,670 --> 00:14:55,410
Google will translate and look it up.

185
00:14:55,410 --> 00:14:56,790
That's really good.

186
00:14:56,790 --> 00:15:08,550
So here we have the Marine plots a place you probably have to visit when you were in Munich and let's

187
00:15:08,550 --> 00:15:09,270
look Dad up.

188
00:15:09,270 --> 00:15:10,850
Keep the old coordinates in mind.

189
00:15:10,860 --> 00:15:14,420
We should get different ones now and we do.

190
00:15:14,460 --> 00:15:16,080
So this is really looking great.

191
00:15:16,080 --> 00:15:21,900
We got that up and running we also got no errors here on the server side and therefore now we're even

192
00:15:21,900 --> 00:15:28,530
sending a request from our back end to another back end to another API which already gives us an idea

193
00:15:28,530 --> 00:15:31,790
of how we could communicate with our own API later.

194
00:15:32,130 --> 00:15:39,390
And we're doing this to convert an address to coordinates and with that I'd say with a pretty nice dummy

195
00:15:39,480 --> 00:15:46,830
Rest Api already a node express application which gives us exactly the API we planned and the biggest

196
00:15:46,830 --> 00:15:52,690
thing that is missing right now of course is the database access which will add an extra module.

197
00:15:52,700 --> 00:15:58,650
Now one thing I just noticed here of course we should return now because I'm no longer throwing an error

198
00:15:58,740 --> 00:16:04,590
so function execution would not stop otherwise hence we have to return now to make sure we don't execute

199
00:16:04,680 --> 00:16:06,640
any other code thereafter.

200
00:16:06,720 --> 00:16:12,300
We didn't need to do that before when we threw an error because when we throw function execution automatically

201
00:16:12,300 --> 00:16:12,990
stops.

202
00:16:12,990 --> 00:16:16,560
If we just next it it does not stop item automatically.

203
00:16:16,650 --> 00:16:17,890
So we have to return it.
