1
00:00:02,060 --> 00:00:07,390
Let's now use our model and ask for the places where we started with creating a new place so we've creating

2
00:00:07,400 --> 00:00:08,360
a document.

3
00:00:08,360 --> 00:00:10,430
We have to follow the same approach right here.

4
00:00:10,520 --> 00:00:16,130
So first we just have to look at the create process creating a new document meaning we should have a

5
00:00:16,130 --> 00:00:18,580
look at the user sign up here.

6
00:00:18,610 --> 00:00:25,880
So to create a new user for that we go through users controller and now first import our newly created

7
00:00:25,880 --> 00:00:27,200
user model right here.

8
00:00:27,200 --> 00:00:33,520
So we use a new constant named user which is equal to our path.

9
00:00:33,520 --> 00:00:38,260
So this is dot dot slash models slash user.

10
00:00:38,260 --> 00:00:43,210
Now we can use the user model and we'll work on get users later.

11
00:00:43,240 --> 00:00:47,740
But here our sign up constant this is where we have to change some code now.

12
00:00:48,010 --> 00:00:49,230
The first code block.

13
00:00:49,270 --> 00:00:55,120
So this part right here is OK we'll come back to that later though because we have to adjust a little

14
00:00:55,120 --> 00:00:57,700
thing but this is not important at the moment.

15
00:00:57,850 --> 00:01:03,550
But here our has user content that created user and how we add to the user.

16
00:01:03,790 --> 00:01:06,220
These are the areas we have to change now.

17
00:01:06,250 --> 00:01:07,350
Let's start with this.

18
00:01:07,450 --> 00:01:09,400
Has user constant here.

19
00:01:09,490 --> 00:01:15,610
Here we have some kind of dummy validation all ready to check whether a user email exists already.

20
00:01:15,790 --> 00:01:18,520
We have our newly created user model.

21
00:01:18,520 --> 00:01:20,780
This whole logic does not apply anymore.

22
00:01:20,860 --> 00:01:22,060
So let's change it here.

23
00:01:22,090 --> 00:01:28,760
But one important note as I said before we have a validation already in here with our unique validator

24
00:01:28,770 --> 00:01:29,780
package.

25
00:01:29,920 --> 00:01:35,040
The little issue about this package is that we get a default validation.

26
00:01:35,050 --> 00:01:41,020
This means we get an error message in case the e-mail exists already but it might be a very technical

27
00:01:41,020 --> 00:01:42,020
error message.

28
00:01:42,040 --> 00:01:49,350
So to make sure we have a nice user experience we should add a manual validation logic right here.

29
00:01:49,360 --> 00:01:57,550
This means we will get rid of this code right here and now let's say this is our existing user and this

30
00:01:57,550 --> 00:02:02,170
should be equal to user so I'll use a model dot.

31
00:02:02,210 --> 00:02:05,650
Now how can we check whether an email exists already.

32
00:02:05,920 --> 00:02:09,060
Well we've defined one method here.

33
00:02:09,280 --> 00:02:16,360
Find one simply finds one document matching the criteria in the argument of our method and what would

34
00:02:16,360 --> 00:02:17,710
be the criteria in our case.

35
00:02:17,710 --> 00:02:20,470
Well it would be the user email.

36
00:02:20,950 --> 00:02:25,210
So with that we can easily check if the e-mail of the user exists already.

37
00:02:25,690 --> 00:02:30,130
So as we've save or find as we had it before this right here is again what.

38
00:02:30,250 --> 00:02:39,940
Well an asynchronous task and therefore we of course should wrap this in our tri catch code block like

39
00:02:39,940 --> 00:02:40,860
this.

40
00:02:40,930 --> 00:02:45,330
And this also means we cannot use a constant right here due to block scoping.

41
00:02:45,520 --> 00:02:54,820
So we add let existing user right here and get rid of the constant additionally we have to add async

42
00:02:56,170 --> 00:03:01,000
appear and a wait ahead of our user.

43
00:03:01,000 --> 00:03:02,790
So this was step one.

44
00:03:02,830 --> 00:03:05,460
Now we check whether an e-mail exists already.

45
00:03:05,800 --> 00:03:07,140
If checking this doesn't work.

46
00:03:07,150 --> 00:03:08,930
So not if we find that e-mail.

47
00:03:08,950 --> 00:03:15,280
But just if this find one method does not work as intended then we want to catch any potential errors

48
00:03:15,930 --> 00:03:17,800
and store it in a constant

49
00:03:20,360 --> 00:03:21,620
new HDP error.

50
00:03:21,630 --> 00:03:23,610
We did this a lot of time already.

51
00:03:23,610 --> 00:03:29,250
As I said we could refactor the code a bit but for demonstration purposes I rewrite this code again

52
00:03:30,300 --> 00:03:35,080
and we could say that signing up failed.

53
00:03:35,160 --> 00:03:38,000
Please try again later.

54
00:03:41,240 --> 00:03:43,510
Of an error code of 500.

55
00:03:43,520 --> 00:03:46,800
And we also have to return next error.

56
00:03:47,180 --> 00:03:51,110
So let's not say we find a user or already so the user exists.

57
00:03:51,110 --> 00:04:01,150
Well then if existing users if this is true in the end then I want to create another error HP error

58
00:04:01,150 --> 00:04:11,010
here and I want to return user exists already please log in instead.

59
00:04:11,850 --> 00:04:21,750
And the error code he will be for 2 2 and we want to return next error to stop the code execution one

60
00:04:21,750 --> 00:04:22,980
side note here.

61
00:04:22,980 --> 00:04:28,460
You can argue whether you want to expose the information right here so that the user exists already.

62
00:04:28,500 --> 00:04:34,320
You can also be more cryptic here and say log in failed I think for a better user experience at this

63
00:04:34,320 --> 00:04:34,720
point.

64
00:04:34,740 --> 00:04:38,990
We should give the user information that the user is existing already.

65
00:04:39,030 --> 00:04:41,910
Let us now finally say we don't have an existing user.

66
00:04:41,970 --> 00:04:44,370
So creating a new user is possible.

67
00:04:44,970 --> 00:04:50,570
Well then we are at this code block and again as we did it for our places just to remind you.

68
00:04:50,570 --> 00:04:57,030
Down here in the places we now have to make sure that we add all the properties we created in our user

69
00:04:57,030 --> 00:05:01,710
j s file so name email password image and places.

70
00:05:01,710 --> 00:05:07,450
Let's do this by maybe getting rid even of these and creating it again from scratch.

71
00:05:07,560 --> 00:05:13,770
So let's not say that our created user should be a new instance of this class of our user model in the

72
00:05:13,770 --> 00:05:14,690
end.

73
00:05:14,730 --> 00:05:21,570
And this should be the name which the user enters the email the user enters and an image.

74
00:05:21,570 --> 00:05:26,050
Again the image should not be a file but the you are L to a file.

75
00:05:26,160 --> 00:05:29,330
I got a link to a file from the web here.

76
00:05:29,340 --> 00:05:34,870
Again for demonstration purposes it's exactly the same process that we followed when we used our place

77
00:05:34,870 --> 00:05:35,440
this model.

78
00:05:35,580 --> 00:05:37,830
So we have this dummy image.

79
00:05:37,830 --> 00:05:41,330
Then the user password right here this is a user input.

80
00:05:41,370 --> 00:05:48,260
Another very important side note here we will save the plane user password at this stage of the course

81
00:05:48,300 --> 00:05:49,320
but very important.

82
00:05:49,350 --> 00:05:52,300
This is not the way to go here at this point.

83
00:05:52,320 --> 00:05:57,930
We don't care but later in the off indication module of this course will of course encrypt the passwords

84
00:05:57,930 --> 00:06:02,980
here because storing did not encrypted password is of course a serious security issue.

85
00:06:03,000 --> 00:06:04,630
So don't do it this way.

86
00:06:04,650 --> 00:06:08,170
This is just the right approach at this stage of the project.

87
00:06:08,730 --> 00:06:15,810
And finally we add our places as I said places will be a dummy value for the moment such as what the

88
00:06:15,810 --> 00:06:20,800
user adds as the place idea once the relation was set up.

89
00:06:20,810 --> 00:06:22,640
This will be a lot more dynamic.

90
00:06:22,760 --> 00:06:26,710
With that we can create the new user actually.

91
00:06:26,810 --> 00:06:29,750
What is missing though is how can we now save the user for data.

92
00:06:29,750 --> 00:06:34,470
Again delete the dummy user's code here and well for saving the data.

93
00:06:34,490 --> 00:06:38,800
What do we use well we use again the safe method.

94
00:06:38,920 --> 00:06:43,510
If we go to the places controller than here that's actually exactly the code we need right here.

95
00:06:43,600 --> 00:06:50,050
And this time I will actually copy paste the code to speed things up a bit at this stage like this.

96
00:06:50,050 --> 00:06:52,790
So we await not decreed.

97
00:06:52,840 --> 00:06:58,820
Please but created user at this stage and we catch an error.

98
00:06:58,840 --> 00:07:07,220
And if this fails we will simply say not creating plays but maybe signing up failed.

99
00:07:07,270 --> 00:07:09,830
Please try again later error code five hundred.

100
00:07:09,850 --> 00:07:17,260
So that's the same logic that before and here of our response will again also use a well known approach.

101
00:07:17,260 --> 00:07:25,590
So we will convert our Mongoose object created user to a default javascript object and will also set

102
00:07:25,800 --> 00:07:27,430
getters to true.

103
00:07:27,570 --> 00:07:28,530
What's the reason for that.

104
00:07:28,620 --> 00:07:36,150
Well it removes the idea so the underscore in front of the property to make it easier to access the

105
00:07:36,270 --> 00:07:37,660
later idea.

106
00:07:38,100 --> 00:07:39,180
Very important here.

107
00:07:39,180 --> 00:07:42,330
What you get back as a response also includes the password.

108
00:07:42,360 --> 00:07:45,050
As I said this is all done with what you would typically do.

109
00:07:45,270 --> 00:07:47,700
It's just here for demonstration purposes.

110
00:07:47,700 --> 00:07:55,810
At this stage of the project and here you can actually make small you the capital you so let us know

111
00:07:56,960 --> 00:08:07,580
restart our development server and go back to postman create a new post request here again HDP locals

112
00:08:07,600 --> 00:08:20,210
5000 slash API slash users this time not places and now slash signed up to create a new user here.

113
00:08:20,220 --> 00:08:25,420
Now we need a body of Jason data once again.

114
00:08:25,430 --> 00:08:28,470
And here we have to add all the properties we added in our model.

115
00:08:28,830 --> 00:08:34,350
So first we need a name which could be menu my name here.

116
00:08:34,590 --> 00:08:40,700
An email test at test dot com.

117
00:08:40,830 --> 00:08:43,130
We don't need an image we provided that in the code.

118
00:08:43,170 --> 00:08:47,300
So we need to add password here.

119
00:08:47,640 --> 00:08:55,350
Maybe test should be a string and we add the places asset before with dummy input here.

120
00:08:55,350 --> 00:08:57,670
We'll change it later when we create the relation.

121
00:08:57,690 --> 00:09:02,870
So if I know its end and as we can see we have a problem but we actually have two problems.

122
00:09:02,880 --> 00:09:05,040
First our request doesn't work.

123
00:09:05,070 --> 00:09:08,300
And second we don't have an error message.

124
00:09:08,310 --> 00:09:13,290
So let's first check the problem of the error message here Yeah I got it.

125
00:09:13,380 --> 00:09:19,530
Yep that's the problem we are using fro here but we are now in an asynchronous task so this doesn't

126
00:09:19,530 --> 00:09:19,890
work.

127
00:09:19,920 --> 00:09:25,130
We have to use return next year to avoid this error.

128
00:09:25,140 --> 00:09:28,220
So let's put this in here.

129
00:09:29,520 --> 00:09:35,370
Now this should at least work and we should also correct this for all our other cases where we have

130
00:09:37,310 --> 00:09:46,360
for all as part of an asynchronous task for example here in our place as controller I think we got the

131
00:09:46,360 --> 00:09:52,110
same problem down here for update place here.

132
00:09:52,110 --> 00:10:00,980
We should also use return next to ops like this.

133
00:10:00,980 --> 00:10:04,800
So with that we also corrected this problem here.

134
00:10:04,820 --> 00:10:12,200
Don't think we have any other fro errors so if you know go back to postmen and send the request we at

135
00:10:12,200 --> 00:10:15,220
least get an error message that we passed invalid inputs.

136
00:10:15,920 --> 00:10:23,540
And the reason for that message now is well our password you remember here in our user model and we

137
00:10:23,540 --> 00:10:30,320
said that the password should have a minimum length of six well and our current password doesn't fulfill

138
00:10:30,320 --> 00:10:34,340
these requirements as we only have four characters in our password.

139
00:10:34,340 --> 00:10:41,280
So if we add two or three characters let's say should be testers and it sent once again then we are

140
00:10:41,280 --> 00:10:42,510
again in another loop.

141
00:10:42,510 --> 00:10:43,910
So that's the first problem we have.

142
00:10:43,920 --> 00:10:45,030
But what's this problem.

143
00:10:45,030 --> 00:10:49,610
Well as we're using our dummy property for the places here.

144
00:10:49,620 --> 00:10:57,510
So this one in our schema and also here in our model we of course also have two added right here to

145
00:10:57,510 --> 00:10:58,740
our a constant.

146
00:10:58,740 --> 00:11:05,490
So if we add places right here safeties go back to postmen and hit send.

147
00:11:05,610 --> 00:11:09,090
You can see we've finally created our new user.

148
00:11:09,090 --> 00:11:11,900
We have the idea with our guidance logic.

149
00:11:11,940 --> 00:11:14,820
We got the name the EMA and all our results.

150
00:11:14,820 --> 00:11:16,560
Again we get back the password here.

151
00:11:16,680 --> 00:11:19,260
That's not the final implementation we will have.

152
00:11:19,350 --> 00:11:27,980
But if we have a look at Mongo TB we should see that we have our places database and in the user's collection

153
00:11:28,970 --> 00:11:36,810
we can find our newly created user so that we can now create a new user.

154
00:11:36,840 --> 00:11:38,710
So to sign up is done.

155
00:11:38,820 --> 00:11:41,040
Now it's time to log in our user.
