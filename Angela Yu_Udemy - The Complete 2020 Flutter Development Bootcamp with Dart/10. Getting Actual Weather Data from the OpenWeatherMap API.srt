0
1
00:00:00,570 --> 00:00:07,680
So you can see that in the Open Weather Map documentation, they tell us that to get data based on geographic
1

2
00:00:07,680 --> 00:00:13,050
coordinates, the API call looks like this: api.openweathermap
2

3
00:00:13,050 --> 00:00:14,160
.org
3

4
00:00:14,160 --> 00:00:17,180
And then we simply add the latitude and longitude.
4

5
00:00:17,190 --> 00:00:22,640
Now if we click on this link however, it actually takes us to a separate subdomain.
5

6
00:00:22,650 --> 00:00:30,210
It takes us to samples.openweathermap.org where it's provided a couple of samples that will work and
6

7
00:00:30,210 --> 00:00:32,050
their own app ID.
7

8
00:00:32,250 --> 00:00:38,880
And this is so that we can see some sample data before we register on their service to get our own app
8

9
00:00:38,880 --> 00:00:39,600
ID.
9

10
00:00:39,780 --> 00:00:44,760
But in this lesson, we're going to learn how we can use our latitude and longitude that we're getting
10

11
00:00:44,760 --> 00:00:51,690
back from our geolocator to get the actual current live weather data for that location.
11

12
00:00:51,690 --> 00:00:56,360
So to do that, we first have to register for the API.
12

13
00:00:56,730 --> 00:01:05,490
So go ahead and click on to the API tab and sign up for a new account. And once you've done that, you
13

14
00:01:05,490 --> 00:01:08,820
can sign in to Open Weather Map.
14

15
00:01:08,820 --> 00:01:12,880
And once you've signed in, you should be looking at something like this.
15

16
00:01:13,110 --> 00:01:20,360
Now here under this second list of tabs, you've got something called API keys, and that's where you're
16

17
00:01:20,360 --> 00:01:27,680
gonna go to grab your own API key. So go ahead and copy that key.
17

18
00:01:27,920 --> 00:01:30,560
And we're going to paste it into our project.
18

19
00:01:30,590 --> 00:01:35,630
So right off the top of the loading screen, we're going to create a new constant because this is never
19

20
00:01:35,630 --> 00:01:36,580
going to change.
20

21
00:01:36,710 --> 00:01:43,070
We are going to call it apiKey and we're going to set it to equal that string that we copied over just now.
21

22
00:01:43,070 --> 00:01:52,910
So now we're able to substitute this app ID with our own API key. So we can add a $ and add
22

23
00:01:53,000 --> 00:02:01,880
our API key in here. And then we're going to change the URL from samples to API to get the actual
23

24
00:02:02,030 --> 00:02:10,060
live data and we're going to change our latitude and longitude to the actual latitude and longitude
24

25
00:02:10,100 --> 00:02:12,750
that we're getting back from our geolocator.
25

26
00:02:12,830 --> 00:02:16,790
So inside our state class, _LoadingScreenState,
26

27
00:02:16,820 --> 00:02:21,980
we're going to create a new variable of type double that's going to be the latitude.
27

28
00:02:21,980 --> 00:02:26,120
And we're also going to create another one for the longitude.
28

29
00:02:26,330 --> 00:02:31,940
And now we're going to save this data. Instead of printing it into the console,
29

30
00:02:31,940 --> 00:02:34,370
we're going to save it into those new variables.
30

31
00:02:34,580 --> 00:02:42,770
So latitude is going to equal location.latitude and longitude is going to equal location.longitude.
31

32
00:02:42,770 --> 00:02:48,020
So now that we have access to latitude and longitude, we can put them into our URL.
32

33
00:02:48,020 --> 00:02:55,460
So the latitude is here. So after the equal sign and before the ampersand, we're going to add our dollar
33

34
00:02:55,460 --> 00:02:58,970
sign and our latitude variable.
34

35
00:02:58,970 --> 00:03:07,030
And then the longitude instead of 139 is going to be the current longitude.
35

36
00:03:07,130 --> 00:03:13,070
So just check to make sure that you've got those values matching, so lat equals latitude and long equals
36

37
00:03:13,130 --> 00:03:13,960
longitude.
37

38
00:03:14,870 --> 00:03:22,670
And now before we hit run, we're going to move the call to get data out of our build method which we
38

39
00:03:22,670 --> 00:03:25,780
know happens after the init state.
39

40
00:03:25,940 --> 00:03:32,870
Instead we're going to add it right here into our getLocation. And we're going to make sure that we've
40

41
00:03:32,870 --> 00:03:38,270
actually got the current location before we call getData.
41

42
00:03:38,270 --> 00:03:43,220
This way we don't end up parsing over some empty latitude and longitude values.
42

43
00:03:43,230 --> 00:03:52,870
Now let's rerun our app and let's check the console. And we can see that my current value that's detected
43

44
00:03:52,930 --> 00:04:01,180
by my emulator is in cupertino and has the temperature of 285K and the weather
44

45
00:04:01,180 --> 00:04:04,760
condition is the value 803,
45

46
00:04:04,760 --> 00:04:14,900
so perfect. Our code is now able to take the current live latitude and longitude of the device and get
46

47
00:04:14,900 --> 00:04:22,670
the corresponding weather data for that location through the use of the Open Weather Map API. And then
47

48
00:04:22,670 --> 00:04:29,840
we're able to pass the result that we get back from a JSON into various values that we want including
48

49
00:04:29,840 --> 00:04:33,620
the temperature, the condition code and the city name.
49

50
00:04:33,620 --> 00:04:38,580
Now all we have to do is to tidy up our code and refactor it
50

51
00:04:38,660 --> 00:04:46,200
so it looks a little bit better than the way it does now. Instead of doing all of the networking and
51

52
00:04:46,260 --> 00:04:54,390
requesting and response checking inside our loading screen, I'm going to split it off into its custom
52

53
00:04:54,480 --> 00:04:57,640
networking.dart service file.
53

54
00:04:58,110 --> 00:05:04,450
So I'm going to move over both the dart:convert and also the http Dart imports.
54

55
00:05:04,500 --> 00:05:09,600
So I'm going to cut it from here and I'm gonna paste it into networking.dart. And I'm going to create
55

56
00:05:09,630 --> 00:05:12,900
a new class here called NetworkHelper.
56

57
00:05:12,900 --> 00:05:20,570
And when this class is initialized, so in the constructor of the class, I'm going to pass over a URL.
57

58
00:05:20,610 --> 00:05:24,870
So I'm going to have a final variable which is going to be a string,
58

59
00:05:24,990 --> 00:05:32,310
and it's gonna be called url And when our class initializes, I'm going to give it a value for that
59

60
00:05:32,340 --> 00:05:38,790
url. Now I'm gonna create a new method called getData.
60

61
00:05:39,010 --> 00:05:45,250
And again it's gonna be asynchronous because we need to wait for the networking to complete before we
61

62
00:05:45,250 --> 00:05:52,180
can work on the data that we get back. So we're gonna move over all of this code where we're using the
62

63
00:05:52,450 --> 00:05:58,540
http get and then where we're checking our status code and wherewe're also decoding our data.
63

64
00:05:58,570 --> 00:06:04,670
So I'm gonna cut that out from here and I'm gonna paste it into this new getData function.
64

65
00:06:04,780 --> 00:06:08,340
Then we're also going to include the else parts of the statement.
65

66
00:06:08,360 --> 00:06:11,350
I'm going to cut that as well and we're going to paste it in here.
66

67
00:06:11,950 --> 00:06:19,720
So now we're saying get data asynchronously and we're going to wait for the http get request to
67

68
00:06:19,720 --> 00:06:21,220
be made to this
68

69
00:06:21,220 --> 00:06:25,320
URL. And we're gonna check to see if the response is 200
69

70
00:06:25,480 --> 00:06:31,030
in which case we're going to save the response body as a variable called data. And then we're going to
70

71
00:06:31,030 --> 00:06:34,090
decode that data using jsonDecode.
71

72
00:06:35,020 --> 00:06:40,010
So now we're getting some errors because it doesn't know the latitude and longitude and the API key.
72

73
00:06:40,180 --> 00:06:46,570
So we're going to cut out all of this and instead we're going to use this url property that we get
73

74
00:06:46,570 --> 00:06:48,580
passed over.
74

75
00:06:48,580 --> 00:06:56,830
So inside this get method, we're going to use that url. Now inside our loading screen,
75

76
00:06:56,830 --> 00:07:03,400
I'm going to combine getting location and getting data into one method. I'm going to call it geLlocation
76

77
00:07:03,730 --> 00:07:13,520
Data. And inside here we're going to initialize a new network helper. And of course for it to recognize
77

78
00:07:13,520 --> 00:07:13,860
this
78

79
00:07:13,880 --> 00:07:22,670
we have to import that file. So import the services folder and the networking.dart file. And now it
79

80
00:07:22,670 --> 00:07:25,170
should recognize what a NetworkHelper is.
80

81
00:07:25,250 --> 00:07:31,520
And I'm going to call it a networkHelper  and it's going to be created from that constructor where we
81

82
00:07:31,520 --> 00:07:33,230
have to pass in the URL.
82

83
00:07:33,590 --> 00:07:39,590
So I'm going to just paste that URL that I copied over from earlier, where it takes the latitude
83

84
00:07:39,830 --> 00:07:46,210
from our geolocator, the longitude from our geolocator and the app key from our constant up here.
84

85
00:07:47,690 --> 00:07:55,340
So now I can delete this getData method and instead move everything that I've got in there to this
85

86
00:07:55,430 --> 00:08:03,320
getLocationData. And I can delete that extra curly brace. I'm going to delete also all my print statements
86

87
00:08:04,430 --> 00:08:10,910
and I'm going to tap into that weather data we get back by creating a new variable called weatherData
87

88
00:08:11,540 --> 00:08:21,130
and it's going to be set to equal await for the networkHelper to get the data. So it tells us that
88

89
00:08:21,130 --> 00:08:23,560
we can only await on futures.
89

90
00:08:23,710 --> 00:08:25,440
So we have to change this
90

91
00:08:25,450 --> 00:08:31,270
getData method to return instead, of a void, to return a future.
91

92
00:08:31,270 --> 00:08:35,160
So this way we can perform this asynchronous function,
92

93
00:08:35,350 --> 00:08:46,350
wait for it to happen and then we're going to return this decoded data as the output of our method. So
93

94
00:08:46,410 --> 00:08:52,590
we can either structure it like this or for simplicity's sake we can simply just return our JSON decoded
94

95
00:08:52,680 --> 00:08:55,170
data. Now
95

96
00:08:55,180 --> 00:09:01,210
we're going to move all of these parts where we're taking out particular things that we need from our
96

97
00:09:01,210 --> 00:09:02,920
decoded data
97

98
00:09:02,920 --> 00:09:05,870
and I'm going to paste that into our location screen.
98

99
00:09:05,890 --> 00:09:10,360
I'm simply going to put it right at the bottom of the file and I'm going to comment it out for
99

100
00:09:10,360 --> 00:09:11,970
use a little bit later on
100

101
00:09:11,980 --> 00:09:16,840
when we actually need to take these values and put it into our widgets here.
101

102
00:09:17,530 --> 00:09:26,140
So now our loading screen is a lot simpler and all it's doing is simply using the geoLocation package
102

103
00:09:26,410 --> 00:09:28,290
to get the latitude and longitude.
103

104
00:09:28,810 --> 00:09:37,180
And then we put that into our URL and we finally use our network helper to get the data by networking
104

105
00:09:37,180 --> 00:09:38,530
with the Open Weather Map
105

106
00:09:38,530 --> 00:09:45,490
URL that we provided here, and we check to see what the status code is and return the data that
106

107
00:09:45,490 --> 00:09:48,790
we get back parsing it using that JSON decoder.
107

108
00:09:51,390 --> 00:09:55,460
And we no longer need to call getData and getLocationData.
108

109
00:09:55,560 --> 00:10:01,050
We can combine it into one single call right here.
109

110
00:10:01,160 --> 00:10:10,580
So now all we have to do is pass this data over to our location screen so that we can format it using
110

111
00:10:10,670 --> 00:10:16,040
these lines of code and put the result into our text widgets.
111

112
00:10:16,090 --> 00:10:19,130
So for all of that and more, I'll see you on the next lesson.
