WEBVTT
0
1
00:00:00.330 --> 00:00:04.890
So if we think about in this list we've already come across set state,
1

2
00:00:04.920 --> 00:00:09.800
we know how to use that to control and manage local state really well
2

3
00:00:09.930 --> 00:00:15.990
and that of course has to be used in conjunction with a stateful widget. But because stateful  widgets
3

4
00:00:16.140 --> 00:00:22.770
are a lot more complex than stateless widgets, for one stateful  widgets actually needs have a memory.
4

5
00:00:22.770 --> 00:00:28.710
They need to remember what their state is so that it can be changed whereas stateless widgets are much
5

6
00:00:28.710 --> 00:00:34.050
more simple to work with and they could just get created, destroyed and rebuilt.
6

7
00:00:34.050 --> 00:00:43.620
Now we also saw lifting state up earlier on using a combination of callbacks and lifting the state up
7

8
00:00:43.710 --> 00:00:44.920
in the widget tree,
8

9
00:00:45.000 --> 00:00:54.330
we were able to manage our state. But of course as our app gets more complex and if we need to have callbacks
9

10
00:00:54.330 --> 00:01:02.850
that traverse the entire tree or if we need our state to be passed multiple levels down then we might
10

11
00:01:02.850 --> 00:01:05.040
encounter some problems.
11

12
00:01:05.040 --> 00:01:14.010
So currently the most flexible way of managing state is through the use of the provider package.
12

13
00:01:14.010 --> 00:01:20.160
And this is currently the recommendation from the Google Flutter team for us to use.
13

14
00:01:20.580 --> 00:01:26.790
But I guess what I'm trying to say is that keep in mind that even though this is the officially recommended
14

15
00:01:26.790 --> 00:01:31.530
way of managing state in your Flutter apps, it's not the only way.
15

16
00:01:31.710 --> 00:01:39.180
And in a lot of cases you might find you need a different way or you might find that you need a combination
16

17
00:01:39.570 --> 00:01:41.970
of these different ways of managing state.
17

18
00:01:42.180 --> 00:01:44.110
And that's not wrong.
18

19
00:01:44.130 --> 00:01:47.010
It really depends on your use case,
19

20
00:01:47.010 --> 00:01:53.880
so your requirements, your particular sense of style for how you want to organize your code and also
20

21
00:01:53.910 --> 00:01:57.540
the maturity of the framework of Flutter.
21

22
00:01:57.540 --> 00:02:02.250
But let's talk about Provider because it's a really really great tool.
22

23
00:02:02.250 --> 00:02:06.620
It's a package that was actually created by the community.
23

24
00:02:06.660 --> 00:02:14.340
Google had a similar package called Provide which did something kind of similar but along came this
24

25
00:02:14.340 --> 00:02:24.060
guy Remi and he decided to build a version that was actually deemed to be better. So full credit to the
25

26
00:02:24.060 --> 00:02:25.470
Google Flutter team
26

27
00:02:25.530 --> 00:02:30.750
they realized the potential of this package and actually put their full weight behind it.
27

28
00:02:31.170 --> 00:02:39.150
And now not only is it officially recommended, but it's also supported both by Remi himself as well as
28

29
00:02:39.150 --> 00:02:40.700
the Google Flutter team.
29

30
00:02:40.800 --> 00:02:45.690
So it has all the resources it needs to achieve its full potential.
30

31
00:02:45.780 --> 00:02:54.330
Now in order to fully appreciate why Provider is so useful we first have to consider what is the problem
31

32
00:02:54.390 --> 00:02:56.630
that its actually trying to solve.
32

33
00:02:56.670 --> 00:03:02.430
So firstly from our code, you might have already realized that there's a couple of things that's getting
33

34
00:03:02.460 --> 00:03:04.720
a little bit hairy right?
34

35
00:03:04.740 --> 00:03:10.700
We have all of these callbacks in order to pass data back up the tree and we have a whole bunch of state
35

36
00:03:10.700 --> 00:03:19.020
ful widgets which needs to use sets date to call the build method of the child widgets and lots of
36

37
00:03:19.020 --> 00:03:24.600
things are getting rebuilt constantly. And it's probably not the most efficient way of going about this.
37

38
00:03:25.230 --> 00:03:31.440
But because our app is getting quite large and it's quite hard to see at a glance what's going on when
38

39
00:03:31.440 --> 00:03:37.740
we are managing our state, I've created a really simple app to be able to illustrate the problem a little
39

40
00:03:37.740 --> 00:03:38.960
bit better.
40

41
00:03:38.970 --> 00:03:48.360
So in this case I have a top level class which is MyApp which then has two children and one of which
41

42
00:03:48.390 --> 00:03:55.530
is something called Level 1. And then Level 1 creates another one called level 2 and Level 2 Creates
42

43
00:03:55.530 --> 00:03:56.280
Level 3.
43

44
00:03:57.420 --> 00:04:01.620
So here's where that code looks like. It's pretty simple
44

45
00:04:01.650 --> 00:04:08.490
and the important part is that we've got a MyApp class that creates a level 1 class that then creates
45

46
00:04:08.490 --> 00:04:12.300
a level 2 and Level 3 class in that order.
46

47
00:04:12.300 --> 00:04:19.020
So here is our material app which creates level 1 and then Level 1 creates Level 2, Level 2 Creates Level
47

48
00:04:19.020 --> 00:04:20.100
3.
48

49
00:04:20.110 --> 00:04:23.140
We basically have exactly this structure.
49

50
00:04:23.150 --> 00:04:25.320
Now here's the problem.
50

51
00:04:25.320 --> 00:04:34.290
Let's say that I had a property that needed to be used over here as well as over here. In order to do
51

52
00:04:34.290 --> 00:04:38.880
that we have to lift the state up for it to live within my app.
52

53
00:04:38.940 --> 00:04:45.510
Now that's all very well and good but when I pass that property or the state of that property down to
53

54
00:04:45.510 --> 00:04:53.850
Level 3, in order to get it there I have to traverse through Level 1 and level 2 and Level 3 which means
54

55
00:04:53.850 --> 00:05:00.200
that that data has to be updated within these two classes which doesn't actually need it.
55

56
00:05:00.270 --> 00:05:08.100
So I have to essentially drill down through my tree in order to be able to reach the lower levels. And
56

57
00:05:08.190 --> 00:05:09.580
in reactive programming
57

58
00:05:09.600 --> 00:05:12.000
this is something that we might call Prop Drilling,
58

59
00:05:12.000 --> 00:05:19.830
so drilling through the tree in order to pass down the property. Let's see this in action in our code.
59

60
00:05:19.830 --> 00:05:27.680
Let's say that we have our string which is just called data and it's, I don't know, a 'Top Secret Data'.
60

61
00:05:27.990 --> 00:05:32.940
And this needs to be used within both the AppBar here
61

62
00:05:32.970 --> 00:05:41.250
so it's gonna be used inside the title as a text widget and that is gonna contain that data. But it also
62

63
00:05:41.250 --> 00:05:43.680
needs to be used down here in Level 3,
63

64
00:05:43.740 --> 00:05:53.220
so this level 3 text widget also needs data. But in order to get it down into level 3 I need to drill
64

65
00:05:53.220 --> 00:05:55.030
through all my levels.
65

66
00:05:55.140 --> 00:06:02.580
So it means that inside Level 1 I'll need a property which I'll just call data and when I initialize
66

67
00:06:02.580 --> 00:06:11.160
Level 1, I'm going to initialize it by passing over this data property. And then I'm going to pass it
67

68
00:06:11.160 --> 00:06:17.310
over to level 1 through its constructor and then now that data is inside Level 1.
68

69
00:06:17.370 --> 00:06:22.070
But in order to get it down to Level 3, I have to keep passing it to Level 2
69

70
00:06:22.080 --> 00:06:22.390
right?
70

71
00:06:22.410 --> 00:06:29.610
So let's pass it over to level 2 and let's create that final String property which we call data
71

72
00:06:29.940 --> 00:06:37.370
and then when Level 2 gets initialized, we also pass over the property to this.data.
72

73
00:06:37.740 --> 00:06:41.610
And then finally we just need to pass it over to Level 3.
73

74
00:06:41.610 --> 00:06:49.710
So again I'm going to create my final string data and when I initialize Level 3, then I pass over the
74

75
00:06:49.770 --> 00:06:52.590
value of the data that I need.
75

76
00:06:52.620 --> 00:06:59.640
And now finally I have the data where I need it down in Level 3 so that I can actually put it inside
76

77
00:06:59.670 --> 00:07:00.960
my text widget.
77

78
00:07:01.500 --> 00:07:08.090
So now if I hit save and I run my app, then you can see that it works right?
78

79
00:07:08.100 --> 00:07:17.850
My data which lives inside MyApp, my top level widget, is able to pass this data property both down to
79

80
00:07:17.880 --> 00:07:27.000
my AppBar as well as to my level 3 widget which is this one that has the text widget. But in order to
80

81
00:07:27.000 --> 00:07:34.380
do that I had to pass that data through a whole bunch of unrelated and really widgets that didn't care
81

82
00:07:34.380 --> 00:07:40.530
for this data at all, because you can see that in level 2 I don't need that data in Level 1 I don't need
82

83
00:07:40.530 --> 00:07:47.160
that data. I'm just passing this data through in order to get it down to Level 3.
83

84
00:07:47.400 --> 00:07:55.350
So for any lazy programmers out there, this is pretty painful to watch and it also massively increases
84

85
00:07:55.350 --> 00:07:56.620
the complexity.
85

86
00:07:56.630 --> 00:08:04.710
Say, I don't know, have a typo in here or say I had some sort of other piece of data inside level 1 and
86

87
00:08:04.710 --> 00:08:10.240
I get confused between the data that gets passed in and the local version of it,
87

88
00:08:10.380 --> 00:08:12.690
it's really not pretty.
88

89
00:08:12.690 --> 00:08:15.960
So what can we do instead?
89

90
00:08:15.960 --> 00:08:23.940
Well if we have the Provider package well then we could move the state up to the top but then we can
90

91
00:08:23.940 --> 00:08:32.400
have widgets that simply subscribe to the state. So we might have our level 3 widget put its hand up
91

92
00:08:32.400 --> 00:08:39.540
saying I'm going to listen for any changes in the state. And when it does change I'll be notified and
92

93
00:08:39.630 --> 00:08:45.130
instead of traversing through level 1 and level 2 in order to get to level 3,
93

94
00:08:45.240 --> 00:08:53.430
it's simply only passes the data to the level 3 widget which actually cares for this updated state instead
94

95
00:08:53.430 --> 00:08:57.580
of rebuilding level 1, level 2 and level 3.
95

96
00:08:57.840 --> 00:09:06.270
Instead of having that tree rebuild to pass the state down so that we actually get it to level 3,
96

97
00:09:06.300 --> 00:09:11.280
we simply just let level 3 listen to updates.
97

98
00:09:11.280 --> 00:09:15.740
So how do we use provider to get all of these cool features?
98

99
00:09:15.750 --> 00:09:20.480
Well we first have to include the provider package in our app.
99

100
00:09:20.670 --> 00:09:25.790
So let's head over to installing and let's add provider as a dependency.
100

101
00:09:26.610 --> 00:09:33.930
So I'm gonna open up my pubspec.yaml and just below my Cupertino icons where all my dependencies
101

102
00:09:33.930 --> 00:09:41.460
go, I'm going to add the provider package and I'm going to call packages get to fetch the code from that
102

103
00:09:41.460 --> 00:09:42.570
package.
103

104
00:09:42.570 --> 00:09:47.920
And now I should be able to import the provider.dart file.
104

105
00:09:48.150 --> 00:09:54.120
So now that I've got provider in my code, I'm able to use it.
105

106
00:09:54.150 --> 00:10:01.410
The first thing I have to do is to expose my data, so to say what is the data that we're going to be
106

107
00:10:01.410 --> 00:10:04.170
providing? In order to do that
107

108
00:10:04.170 --> 00:10:10.770
it's as you can imagine and we're in Flutterland so it's gonna be achieved using a widget. And I'm going
108

109
00:10:10.770 --> 00:10:18.510
to put that provider as high up as it needs be given that I need the data both in my AppBar as well
109

110
00:10:18.510 --> 00:10:20.830
as all the way down in level 3.
110

111
00:10:20.910 --> 00:10:29.310
Well then I'm going to put it at the very top so that my data is provided to my entire material app.
111

112
00:10:29.310 --> 00:10:36.940
So here I'm going to wrap with a new widget and that widget is going to be a provider widget.
112

113
00:10:37.020 --> 00:10:44.430
Now with the provider widget, we also have to specify a data type of the kind of data that this provider
113

114
00:10:44.460 --> 00:10:48.530
is going to provide. That data type is just going to be a string
114

115
00:10:48.530 --> 00:10:52.790
because our data is just a really simple string right?
115

116
00:10:52.880 --> 00:11:01.520
So now that I've created my provider widgets and it has a child which all subsequent levels are going
116

117
00:11:01.520 --> 00:11:05.250
to be able to listen to the data that I provide,
117

118
00:11:05.300 --> 00:11:09.920
we also have to add one more property which is the provider builder.
118

119
00:11:10.190 --> 00:11:16.580
The builder takes the current build context so it knows where it is within the widget tree, and then
119

120
00:11:16.640 --> 00:11:25.160
it has to return the data that needs to be available to all the children. That is going to be our data
120

121
00:11:25.340 --> 00:11:26.040
right here.
121

122
00:11:27.180 --> 00:11:34.590
Now that I've got my data being provided at the very top level of the tree, then I can ask the provider
122

123
00:11:34.860 --> 00:11:38.430
to give me that data wherever I need it.
123

124
00:11:38.430 --> 00:11:40.740
So firstly let's simplify this code.
124

125
00:11:40.740 --> 00:11:48.570
We have a simple one line return so we don't need all of this curly brackets etc. and the return keyword.
125

126
00:11:48.780 --> 00:11:53.550
We could simply just use our fat arrow, does exactly the same thing.
126

127
00:11:54.610 --> 00:12:02.500
So now we are providing our data at the very top level of our app above our material app so we can now
127

128
00:12:02.500 --> 00:12:06.110
reach into it and use it wherever we need to.
128

129
00:12:06.230 --> 00:12:09.890
The first place where we need it is within our text.
129

130
00:12:10.220 --> 00:12:17.330
So now instead of having to pass our data through our level 1 level 2 widgets which really don't
130

131
00:12:17.330 --> 00:12:22.500
need this data, we can't actually go ahead and delete all of this code
131

132
00:12:22.700 --> 00:12:26.570
all of it here and here and here.
132

133
00:12:26.720 --> 00:12:30.620
And instead we're just going to be using it within level 3.
133

134
00:12:31.160 --> 00:12:38.150
And in order to access that data, all we have to do is say provider.of
134

135
00:12:38.150 --> 00:12:46.880
and again, the 'of' method expects us to specify what kind of data we're trying to get hold of.
135

136
00:12:46.880 --> 00:12:54.110
So this is going to be the string that we're providing right here to all of the children in our tree.
136

137
00:12:54.110 --> 00:13:02.210
So now if I hit save and I check my app, you can see that I'm still getting my Top Secret Data being
137

138
00:13:02.210 --> 00:13:07.230
passed all the way down to my level 3 stateless widget.
138

139
00:13:07.640 --> 00:13:17.740
And that comes from right here. As you can see let's say I decide to change this data to, I don't know, let's
139

140
00:13:17.750 --> 00:13:20.140
say a top secret code.
140

141
00:13:20.450 --> 00:13:29.900
And now if I rerun my app, you can see that data is actually being passed over to level 3 without
141

142
00:13:29.960 --> 00:13:35.410
needing to drill through level 1 and level 2. Now
142

143
00:13:35.460 --> 00:13:36.780
that's all very well and good.
143

144
00:13:36.990 --> 00:13:45.930
We were able to provide our data at the very top level and then we were able to read the data all the
144

145
00:13:45.930 --> 00:13:51.150
way down here without needing to go through any of the in-between parts in our tree.
145

146
00:13:52.080 --> 00:14:01.500
So now when the state of that property changes up here, because level 3 is listening to those changes
146

147
00:14:01.800 --> 00:14:07.740
well it can receive it immediately and rebuild itself without needing to rebuild level 1 or level
147

148
00:14:07.770 --> 00:14:08.240
2,
148

149
00:14:08.340 --> 00:14:11.370
so faster more efficient code.
149

150
00:14:11.520 --> 00:14:17.220
Now let's make this a little bit more complex because at the moment all that we're doing with provider
150

151
00:14:17.250 --> 00:14:24.900
is we're providing and we're reading. What if we also had to update the state from somewhere down within
151

152
00:14:24.900 --> 00:14:25.780
our tree?
152

153
00:14:25.890 --> 00:14:30.610
So let's update our simple app to still have level 1, 2 and 3
153

154
00:14:30.630 --> 00:14:36.390
but now we also have a text widget over here called MyText in a separate class
154

155
00:14:36.810 --> 00:14:40.830
and we also have a MyTextField widget down here
155

156
00:14:40.840 --> 00:14:42.940
that's a child of Level 2.
156

157
00:14:42.960 --> 00:14:51.030
So the idea is how can we get an update that happens down here all the way over to MyText which is
157

158
00:14:51.210 --> 00:14:58.350
higher up in the tree and also in level 3 using the power provider?
158

159
00:14:58.350 --> 00:15:05.160
So here I have my separate class MyText and the other class which is MyTextField and I'm going to
159

160
00:15:05.160 --> 00:15:07.560
slot them in to my tree.
160

161
00:15:07.560 --> 00:15:12.760
So my text is going to go as the text widget here in the AppBar.
161

162
00:15:13.240 --> 00:15:21.030
So let's change that to MyText and then MyTextField is going to be a child of my level 2 widget.
162

163
00:15:21.090 --> 00:15:26.790
So instead of this empty container here, I'm going to add MyTextField right here.
163

164
00:15:26.790 --> 00:15:34.620
So now we basically have this exact structure of widget tree and I have to be able to get this data
164

165
00:15:35.070 --> 00:15:41.570
all the way over here as well as over here without needing to rebuild any of the intervening widgets.
165

166
00:15:41.640 --> 00:15:43.640
So how do we do this?
166

167
00:15:43.650 --> 00:15:46.890
Well we need the use of a class called a ChangeNotifier.
167

168
00:15:47.790 --> 00:15:55.860
So let's create another class here which is going to be our data class and make this data class extend
168

169
00:15:55.950 --> 00:15:58.540
the ChangeNotifier class.
169

170
00:15:58.590 --> 00:16:03.690
Now this ChangeNotifier class actually comes from Flutter itself.
170

171
00:16:03.690 --> 00:16:06.060
This is not something that came with provider.
171

172
00:16:06.180 --> 00:16:14.670
It already exists and it exists for the purpose of notifying listeners to this particular class of any
172

173
00:16:14.730 --> 00:16:16.490
updates in the class.
173

174
00:16:16.530 --> 00:16:25.920
So let's move our data down into our data class and instead of having it being final we need to be able
174

175
00:16:25.920 --> 00:16:26.720
to change it
175

176
00:16:26.730 --> 00:16:27.000
right?
176

177
00:16:27.000 --> 00:16:29.910
We want to we have to make updates to our data.
177

178
00:16:29.970 --> 00:16:38.280
So let's start it off with just some dummy data, let's call it 'Some data'. And let's start providing this
178

179
00:16:38.520 --> 00:16:44.250
data object instead of just the simple string that we had from before.
179

180
00:16:44.250 --> 00:16:51.240
So instead of returning data which now no longer exists, we're going to return a object of the data class.
180

181
00:16:52.110 --> 00:17:00.300
And this object is going to no longer be using a normal provider which just provides a string data type,
181

182
00:17:00.340 --> 00:17:09.210
well instead it's going to be a ChangeNotifier provider and it's going to be providing a Data data
182

183
00:17:09.210 --> 00:17:09.590
type.
183

184
00:17:10.590 --> 00:17:21.060
So now in order to get access to our data right here, we will still use our provider.of
184

185
00:17:21.060 --> 00:17:27.780
and instead of using the string data type we actually have to provide the data type that we want to
185

186
00:17:27.780 --> 00:17:36.180
provide which is data. And instead of providing this entire object, this data object that gets created
186

187
00:17:36.180 --> 00:17:43.530
from the class, we're going to be providing the data object's data property because that is the thing
187

188
00:17:43.530 --> 00:17:45.190
that is a string.
188

189
00:17:45.590 --> 00:17:51.750
And that string is then going to be put into our text widget and be displayed.
189

190
00:17:51.750 --> 00:18:00.240
So now I can also copy that and put it into the MyText widget as well so that it's rendered in my App
190

191
00:18:00.240 --> 00:18:03.420
Bar as well as my level 3 text widget.
191

192
00:18:03.510 --> 00:18:09.960
So let's first run our app and check to make sure that we're actually able to both provide our data
192

193
00:18:10.140 --> 00:18:17.850
as well as read our data in both the MyText widget in the app bar as well as the text widget in level
193

194
00:18:17.850 --> 00:18:19.070
3.
194

195
00:18:19.110 --> 00:18:21.840
So that's working pretty well.
195

196
00:18:21.870 --> 00:18:28.620
So now we have to achieve our next goal which is to update the data and we're going to update it within
196

197
00:18:28.800 --> 00:18:30.630
MyTextField.
197

198
00:18:30.630 --> 00:18:39.010
So we all know that MyTextField has a property called onChanged which takes a callback that has access
198

199
00:18:39.070 --> 00:18:44.110
to the new value or the new text that gets typed into the text field.
199

200
00:18:44.350 --> 00:18:51.690
And we now need to be able to move this text into our data class to update this string.
200

201
00:18:51.820 --> 00:18:59.690
So let's create a method inside our data class. Let's create a void method so it doesn't return anything.
201

202
00:18:59.860 --> 00:19:03.300
And it's going to change our string.
202

203
00:19:03.310 --> 00:19:10.060
So it's the changeString method. And we'll pass in a new string which is going to take the place of
203

204
00:19:10.060 --> 00:19:19.270
our data and I'm going to set the data to equal the new string. And then most crucially, I'm going to
204

205
00:19:19.270 --> 00:19:25.220
use a method that's available to us because we are inheriting from the ChangeNotifier.
205

206
00:19:25.510 --> 00:19:29.350
And that method is the notifyListeners method.
206

207
00:19:29.860 --> 00:19:38.770
So what this does is as soon as we update our data to the new value, we call notify listeners so that
207

208
00:19:38.860 --> 00:19:46.840
everybody who's listening to our provider can rebuild their widgets as well because they're notified
208

209
00:19:46.930 --> 00:19:48.190
of that state change.
209

210
00:19:48.880 --> 00:19:58.750
So now if inside our onChanged we tap into our provider.of and we specify the type of data we're interested
210

211
00:19:58.750 --> 00:20:01.230
in which is our data class,
211

212
00:20:01.360 --> 00:20:08.260
Well then we can tap into that method called changeString and we're gonna pass in the newText as the
212

213
00:20:08.260 --> 00:20:09.000
newString
213

214
00:20:09.010 --> 00:20:12.560
that's gonna be put in to this data property.
214

215
00:20:12.580 --> 00:20:23.140
So now if we rerun our app and I go into here and I start typing, then you can see that all the listeners
215

216
00:20:23.200 --> 00:20:30.490
to this data, namely the myText widget and the text widget in level 3, well they're going to be rebuilding
216

217
00:20:30.670 --> 00:20:37.780
because the state is now updating every time I change the text in my text field.
217

218
00:20:39.480 --> 00:20:42.300
So let's just review the code once more.
218

219
00:20:42.450 --> 00:20:49.530
So I created this class called Data which extends something called a ChangeNotifier that allows pieces
219

220
00:20:49.530 --> 00:20:57.840
of the data inside this class to notify any listeners which are trying to track the state of a piece
220

221
00:20:57.840 --> 00:21:05.610
of data namely this property called data. And that property is being read both inside this text widget
221

222
00:21:05.940 --> 00:21:11.010
in the AppBar as well as this text widget inside level 3.
222

223
00:21:11.220 --> 00:21:19.330
So the appearance of these two text widgets are tied to the state of this data property.
223

224
00:21:19.470 --> 00:21:26.040
And when that data property updates, then this text widget is going to rebuild itself to reflect that
224

225
00:21:26.040 --> 00:21:27.400
change.
225

226
00:21:27.450 --> 00:21:35.080
Now that data property comes from right here and we update it inside our change
226

227
00:21:35.130 --> 00:21:43.320
String method where we pass in a new string to replace the old string inside the data property. And then
227

228
00:21:43.410 --> 00:21:52.530
and crucially we call notifyListeners so that everybody who's listening to that data property gets
228

229
00:21:52.530 --> 00:21:57.340
notified and they can rebuild themselves to update the latest state.
229

230
00:21:57.390 --> 00:22:01.270
Now because we need to call this notifyListeners
230

231
00:22:01.410 --> 00:22:09.600
this is also why we can't just simply tap into provider of data which we know is basically this data
231

232
00:22:09.630 --> 00:22:16.250
object and simply tap into that data property and set it equal to the new text.
232

233
00:22:16.350 --> 00:22:21.960
Because in this case when we're just updating this string from the outside, we're not actually calling
233

234
00:22:21.960 --> 00:22:23.000
notifyListeners.
234

235
00:22:23.040 --> 00:22:33.900
We're just updating this property's value. So we must use a method to change the string so that we actually
235

236
00:22:33.900 --> 00:22:35.260
call notifyListeners.
236

237
00:22:36.030 --> 00:22:44.400
Now another important thing to remember is that this provider.of method actually has a optional
237

238
00:22:44.400 --> 00:22:47.130
parameter called listen.
238

239
00:22:47.130 --> 00:22:53.620
So let's say that MyText which is the text widget inside the AppBar
239

240
00:22:53.850 --> 00:22:59.330
well let's say that we don't actually want it to update with every single update of MyTextField.
240

241
00:22:59.340 --> 00:23:05.910
Let's say that we want it to get the original value of the data that's stored but we don't want it to
241

242
00:23:05.910 --> 00:23:07.470
listen for updates.
242

243
00:23:07.470 --> 00:23:09.360
We don't want it to rebuild
243

244
00:23:09.450 --> 00:23:11.790
every time this data changes.
244

245
00:23:11.820 --> 00:23:20.100
Well then all we have to do is to add the listen property and we can set it to false.
245

246
00:23:20.340 --> 00:23:26.670
Now by default this property is set to true which is why every time you use provider.of you're getting
246

247
00:23:26.670 --> 00:23:32.190
a listener which is going to update itself based on changes in that thing that you're listening for.
247

248
00:23:32.670 --> 00:23:40.020
But now that we've said listen to false let's rerun our app and you can see that both text properties
248

249
00:23:40.020 --> 00:23:43.620
start out with some data which comes from here
249

250
00:23:43.620 --> 00:23:47.250
when data gets initialized that's going to be the value of data.
250

251
00:23:47.790 --> 00:23:53.070
But when I start typing in the text field, because my text widget
251

252
00:23:53.220 --> 00:23:56.960
this one here is not listening to the changes,
252

253
00:23:57.120 --> 00:24:00.150
it doesn't update and it doesn't redraw.
253

254
00:24:00.150 --> 00:24:06.000
So this gives you quite a fine and granular control over what are the things where you want to listen
254

255
00:24:06.000 --> 00:24:12.030
for updates to the data and redraw and what are the things where you just want an initial value of the
255

256
00:24:12.030 --> 00:24:12.510
data
256

257
00:24:12.780 --> 00:24:19.740
and to never change again even if it changes. Now that you've seen the provider package in action, you
257

258
00:24:19.740 --> 00:24:24.030
might be wondering to yourself, 'Well how exactly does it work?'
258

259
00:24:24.030 --> 00:24:30.810
So in order to understand that let's pop up in the hood and see what's going on behind the scenes. Out
259

260
00:24:30.810 --> 00:24:34.280
of all of these different ways of managing state
260

261
00:24:34.320 --> 00:24:42.810
there is one where we use an inherited widget. Now an inherited widget is basically a widget that allows
261

262
00:24:42.810 --> 00:24:49.180
us to pass data down the tree without having to rebuild the intervening part of the tree.
262

263
00:24:49.200 --> 00:24:52.310
So that sounds kind of familiar right?
263

264
00:24:52.410 --> 00:24:54.360
That's kind of how provider works.
264

265
00:24:54.960 --> 00:25:04.070
Essentially the provider package it's just a wrapper around the inherited widget. But because the inherit
265

266
00:25:04.100 --> 00:25:10.550
widget class has some specific requirements in order to construct it and you have to construct it in
266

267
00:25:10.550 --> 00:25:17.510
a certain way that ensures that it's still being efficient and it's running as expected.
267

268
00:25:17.510 --> 00:25:23.390
So there's quite a bit of boilerplate code and you have to be quite mindful of how it works when you're
268

269
00:25:23.390 --> 00:25:24.130
using it.
269

270
00:25:24.530 --> 00:25:31.730
So I recommend taking a look at the inherited widget class and having a listen through the explanation
270

271
00:25:31.940 --> 00:25:39.170
of this widget by Philip with his very cool Google bicycle shirt and learning a little bit more about
271

272
00:25:39.260 --> 00:25:46.130
how it actually works behind the scenes. Because essentially our provider package is just leveraging
272

273
00:25:46.130 --> 00:25:53.180
the power of this class but it's doing it in a way that makes it easier to work with it and to force
273

274
00:25:53.180 --> 00:25:55.960
you to use it in a safe and effective way.
274

275
00:25:57.630 --> 00:26:05.130
And once you're done with that, I recommend you to build your very own version of this widget tree. So
275

276
00:26:05.160 --> 00:26:06.540
have separate classes
276

277
00:26:06.540 --> 00:26:14.460
well in this case I've got about six different classes which are organized in this way and to use the
277

278
00:26:14.460 --> 00:26:21.990
provider package yourself to see how you can provide data at the very top level, how you can read data
278

279
00:26:22.140 --> 00:26:27.220
at a lower level and to update data using the ChangeNotifier provider.
279

280
00:26:27.600 --> 00:26:32.730
So have a play around with that and if you want to see the code that we've been using in this lesson
280

281
00:26:33.000 --> 00:26:36.540
then you'll be able to download it in the course resources too.
281

282
00:26:36.690 --> 00:26:43.410
But in the next lesson, we're actually going to plug in provider into our actual Todoey app and see
282

283
00:26:43.410 --> 00:26:47.060
it in a much more complex and more real life scenario.
283

284
00:26:47.280 --> 00:26:50.040
So for all that and more, I'll see on the next lesson.
