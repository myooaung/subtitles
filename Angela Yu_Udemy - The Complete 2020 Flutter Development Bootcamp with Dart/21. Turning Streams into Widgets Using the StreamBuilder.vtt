WEBVTT
0
1
00:00:00.420 --> 00:00:07.650
Now in the last lesson we talked about Dart streams and how they allow us to listen for data that might
1

2
00:00:07.650 --> 00:00:16.140
be updated at any moment in time, so that we can subscribe to the stream by awaiting for it. And then once
2

3
00:00:16.140 --> 00:00:22.170
new data does come through, we can get some code to be triggered and we can get access to that new data.
3

4
00:00:22.710 --> 00:00:25.530
Now coming back to Flutter land
4

5
00:00:25.530 --> 00:00:32.720
however, we need to convert this data that we're getting back from these streams into actual widgets.
5

6
00:00:32.820 --> 00:00:39.270
In other words, we need to find a way of taking the data inside our Firebase collection and display it
6

7
00:00:39.360 --> 00:00:41.960
inside some widgets in our chat screen.
7

8
00:00:42.060 --> 00:00:44.970
So how can we accomplish this?
8

9
00:00:44.970 --> 00:00:47.270
Well let's tackle this in two steps.
9

10
00:00:47.280 --> 00:00:51.680
Step one is just displaying the data in the simplest possible way.
10

11
00:00:52.170 --> 00:00:55.610
And step two will be to make it look pretty.
11

12
00:00:55.650 --> 00:01:00.480
And in this lesson we're going to focus on step one, just getting the data to display.
12

13
00:01:00.930 --> 00:01:08.040
And I reckon the simplest possible way to show our chat messages is to show them all inside a column.
13

14
00:01:08.580 --> 00:01:14.340
So before doing anything fancy, I'm simply going to display my chat messages by creating a column with
14

15
00:01:14.340 --> 00:01:17.550
a list of text widgets as its children.
15

16
00:01:17.640 --> 00:01:19.930
Here's what our app looks like right now
16

17
00:01:20.100 --> 00:01:22.170
and here's what we're aiming for.
17

18
00:01:22.170 --> 00:01:28.900
This is what our screen with that column of text widgets will look like by the end of the lesson. But
18

19
00:01:29.050 --> 00:01:29.980
here's the rub,
19

20
00:01:30.250 --> 00:01:34.370
our Dart snapshots method gives us a stream.
20

21
00:01:34.390 --> 00:01:40.690
So we need something that can handle a stream and will create a list of text widgets for us.
21

22
00:01:41.140 --> 00:01:47.920
But it doesn't just need to create our widgets, it needs to update our widgets every time a new chat
22

23
00:01:47.920 --> 00:01:49.830
message comes into the stream.
23

24
00:01:50.770 --> 00:01:52.420
So how can we do that?
24

25
00:01:52.530 --> 00:01:58.030
Well we can use the help of a widget called a stream builder.
25

26
00:01:58.050 --> 00:02:04.690
Now this is something that will turn our snapshots of data into actual widgets
26

27
00:02:04.800 --> 00:02:12.690
every time new data comes through. So it's able to rebuild every time that there's new data coming from
27

28
00:02:12.690 --> 00:02:13.620
the stream,
28

29
00:02:13.800 --> 00:02:17.220
and it does that using the set state.
29

30
00:02:17.220 --> 00:02:24.760
So in other words, set state will be called every time there's a new value in the stream. So down here
30

31
00:02:24.850 --> 00:02:26.680
inside our column,
31

32
00:02:26.830 --> 00:02:34.750
we currently only have one child inside the list of children. So let's go ahead and add another one.
32

33
00:02:34.840 --> 00:02:41.890
And because we've set our column to have the main axis as spaceBetween, if we have more than one item
33

34
00:02:41.890 --> 00:02:50.170
inside here, then it'll push this send text field and button down to the bottom and we'll get our messages
34

35
00:02:50.230 --> 00:02:57.220
showing up at the top. And we're going to show those messages using a stream builder. Here's a stream
35

36
00:02:57.220 --> 00:03:01.390
builder and we can use it just as we use any other widget.
36

37
00:03:01.390 --> 00:03:08.410
So it goes into our column and our stream builder has two properties that are really important.
37

38
00:03:08.410 --> 00:03:12.100
One is the stream, where is the data gonna come from?
38

39
00:03:12.100 --> 00:03:15.330
That's gonna be the same as what we did up here.
39

40
00:03:15.370 --> 00:03:19.830
You can either copy this part of the stream or you can just type it out from scratch.
40

41
00:03:19.840 --> 00:03:26.950
So we're gonna be using our firestore.collection tapping into the messages collection and then
41

42
00:03:27.010 --> 00:03:35.410
we're going to fetch these snapshots which is a stream. In particular, it's a stream of query snapshots.
42

43
00:03:35.740 --> 00:03:41.800
The query snapshot is a class from Firebase which will ultimately contain the chat messages that we're
43

44
00:03:41.800 --> 00:03:47.620
after. Now that we've got the stream that we're subscribing our stream builder for,
44

45
00:03:47.640 --> 00:03:51.680
so it now knows when new data comes in to rebuild itself.
45

46
00:03:51.780 --> 00:03:55.770
Well the next thing that we have to provide is a builder.
46

47
00:03:56.190 --> 00:03:58.080
The builder is a strange one.
47

48
00:03:58.110 --> 00:04:03.400
If you read the quick docs, you see that we have to provide something called a build strategy.
48

49
00:04:03.450 --> 00:04:08.850
In other words, we have to provide the logic for what the stream builder should actually do.
49

50
00:04:08.940 --> 00:04:09.860
Why?
50

51
00:04:09.880 --> 00:04:16.440
Well remember the stream builder is interacting with our stream and with each new event like a chat
51

52
00:04:16.440 --> 00:04:23.580
message being sent, our stream builder receives a snapshot. At this point the builder function needs to
52

53
00:04:23.670 --> 00:04:27.500
update the list of messages displayed on the screen.
53

54
00:04:27.540 --> 00:04:33.720
In other words the builder needs to rebuild all the children of the stream builder namely the column
54

55
00:04:33.720 --> 00:04:36.300
of text widgets that I mentioned before.
55

56
00:04:36.330 --> 00:04:40.310
So what is this snapshot that you can see here in the quick docs?
56

57
00:04:40.320 --> 00:04:44.400
We can see that the type is async snapshot.
57

58
00:04:44.400 --> 00:04:52.430
This async snapshot represents the most recent interaction with the stream. Our chat messages are buried
58

59
00:04:52.430 --> 00:04:57.450
somewhere in this async snapshot and we can get access to it through the builder function.
59

60
00:04:57.500 --> 00:05:05.000
So let's take a closer look at our builder. And a builder is something that takes an anonymous callback
60

61
00:05:05.360 --> 00:05:14.380
and it has two inputs. So it's going to trigger the callback passing in the context and also the snapshot,
61

62
00:05:14.390 --> 00:05:17.350
then it returns an actual widget.
62

63
00:05:17.660 --> 00:05:24.800
Remember in our case, the widget that the builder function will return is going to be our column containing
63

64
00:05:24.840 --> 00:05:32.280
our text widgets. Let's go ahead and create that anonymous function, first of which is going to be the
64

65
00:05:32.310 --> 00:05:34.460
context that we're going to pass in.
65

66
00:05:34.650 --> 00:05:42.090
And the second thing is going to be that snapshot that we get back. Now inside these curly braces,
66

67
00:05:42.090 --> 00:05:47.670
we should have access to both the built context as well as the snapshot where the stream builder lives.
67

68
00:05:49.640 --> 00:05:55.180
This snapshot is not the same as the snapshot we had over here up here.
68

69
00:05:55.190 --> 00:05:58.140
We were dealing with Firebase's query snapshot.
69

70
00:05:58.430 --> 00:06:05.110
But down here we've got Flutter's async snapshot because we're working with our Stream builder.
70

71
00:06:05.120 --> 00:06:10.920
However, our a async snapshot actually contains our query snapshot from Firebase.
71

72
00:06:10.940 --> 00:06:12.280
Let me show you what I mean.
72

73
00:06:12.380 --> 00:06:17.560
Let's start to dig the chat messages out of our async snapshot.
73

74
00:06:17.680 --> 00:06:23.500
So the first thing I want to check before I use it to render a widget is I have to make sure that we
74

75
00:06:23.500 --> 00:06:25.120
didn't get an empty snapshot.
75

76
00:06:25.270 --> 00:06:32.130
So we can check by tapping into the snapshot and calling .hasData.
76

77
00:06:32.140 --> 00:06:38.620
So this returns a boolean telling you whether or not this snapshot has data or it's null.
77

78
00:06:38.890 --> 00:06:43.810
And if it does have data, then we're going to use that data.
78

79
00:06:43.870 --> 00:06:50.650
So we're going to create a final variable called messages and we're going to set it to equal snapshot
79

80
00:06:50.710 --> 00:06:51.940
.data.
80

81
00:06:51.970 --> 00:06:56.170
This is how we can access the data inside our async,snapshot.
81

82
00:06:56.770 --> 00:07:04.110
and you can see this in the documentation for async snapshot. In the documentation for async snapshot,
82

83
00:07:04.130 --> 00:07:11.000
you can see both the data property that we're accessing right now and the hasData property that we're
83

84
00:07:11.000 --> 00:07:18.140
using to check that the snapshot from our stream is not equal to null,  our query snapshot from firebase
84

85
00:07:18.500 --> 00:07:21.340
is stored inside our data property.
85

86
00:07:21.350 --> 00:07:29.210
However if we look back at our code in Android Studio, we don't see this query snapshot data type.
86

87
00:07:29.210 --> 00:07:37.220
Instead, we see that the data type is dynamic. And the reason is because even though we built this stream
87

88
00:07:37.220 --> 00:07:41.850
builder, we didn't tell it what type of stream we're going to get.
88

89
00:07:41.990 --> 00:07:48.510
Whereas if we take a look at our snapshot, we know that it's going to return a stream of query snapshots.
89

90
00:07:48.530 --> 00:07:52.460
So this is a data type that comes from Firebase cloud Firestore
90

91
00:07:52.970 --> 00:08:00.530
and it's something that is going to represent all the data in our messages collection. So we can add
91

92
00:08:00.650 --> 00:08:07.370
that type to our Stream builder. So we can tell it that we're building a stream builder and we're listening
92

93
00:08:07.400 --> 00:08:09.530
on query snapshots.
93

94
00:08:09.530 --> 00:08:13.710
That is the data that's ultimately going to be inside the stream.
94

95
00:08:13.760 --> 00:08:18.190
And now once, we tell it what kind of data it has,
95

96
00:08:18.230 --> 00:08:25.640
well now the data object gets updated to an actual query snapshot which means that it now knows what
96

97
00:08:25.640 --> 00:08:30.030
other things it has such as its documents that it will contain.
97

98
00:08:30.230 --> 00:08:33.600
Let's pause for a second to consider what we just did here.
98

99
00:08:33.710 --> 00:08:38.520
The async snapshot contains a query snapshot from Firebase.
99

100
00:08:38.570 --> 00:08:42.370
We access the query snapshot through the data property.
100

101
00:08:42.410 --> 00:08:49.220
Now we're dealing with a query snapshot object so we can use the query snapshot's properties like the
101

102
00:08:49.220 --> 00:08:50.670
documents property.
102

103
00:08:50.840 --> 00:08:54.830
And this will give us a list of document snapshots.
103

104
00:08:54.830 --> 00:09:01.820
So in summary, our async snapshot from the stream builder contains a query snapshot from Firebase. The
104

105
00:09:01.820 --> 00:09:03.580
query snapshot in turn
105

106
00:09:03.590 --> 00:09:08.800
contains a list of documents snapshots. With two layers deep right now,
106

107
00:09:08.830 --> 00:09:16.640
but we have to dig even deeper to get to the text of our chat messages. So how do we get hold of a single
107

108
00:09:16.640 --> 00:09:19.360
document that contains the message text?
108

109
00:09:19.370 --> 00:09:28.250
Well right now, we've got a list of documents. For that, we use our trusty old friend, the FOR loop. And
109

110
00:09:28.310 --> 00:09:33.460
I'm going to use a FOR loop to build a whole bunch of text widgets.
110

111
00:09:33.590 --> 00:09:39.290
So let's create a list of text widgets. I'm gonna call it
111

112
00:09:39.290 --> 00:09:45.530
messageWidgets and I'm going to set it to a empty list to begin with.
112

113
00:09:45.530 --> 00:09:48.530
Now the next part is I'm going to use a for in loop.
113

114
00:09:48.530 --> 00:09:59.120
So for var message in messages. So that's our list of documents snapshots. Inside this FOR loop,
114

115
00:09:59.140 --> 00:10:10.560
I'm going to tap into the message text by tapping into message.data and here data is what we printed
115

116
00:10:10.560 --> 00:10:11.340
out before
116

117
00:10:11.340 --> 00:10:18.960
and this is a map of keys which are consisting of string and the value can be dynamic.
117

118
00:10:18.960 --> 00:10:24.050
So this is the data contained inside a single document snapshot.
118

119
00:10:24.120 --> 00:10:31.960
Remember each document contains two pieces of information, our chat message text and our sender.
119

120
00:10:32.010 --> 00:10:39.150
Now looking back at our code, it's worth quickly pointing out that even though we see this .data property
120

121
00:10:39.150 --> 00:10:46.620
in two places, here and here, we're dealing with two very different types of objects.
121

122
00:10:46.710 --> 00:10:54.900
They're both just happened to have a property called data. The snapshot is an async snapshot from Flutter
122

123
00:10:55.060 --> 00:10:59.890
and the message is a documents snapshot from Firebase.
123

124
00:10:59.890 --> 00:11:06.320
And if we take a look inside our console you can see that each of these are a piece of snapshot data.
124

125
00:11:06.490 --> 00:11:12.890
And the key is this, whatever we called our field, and the value is what it contained,
125

126
00:11:12.940 --> 00:11:20.410
so the text. So the message text is saved in our database under a field called text.
126

127
00:11:20.410 --> 00:11:27.700
So we're going to type that out as the key as a string and you have to make sure that you have exactly
127

128
00:11:27.700 --> 00:11:31.150
the same here as you do right here.
128

129
00:11:31.150 --> 00:11:35.140
So there's no typos and no change in capitalization.
129

130
00:11:35.140 --> 00:11:42.340
The other variable that we need to pull out of our message snapshot is the message sender. And this is
130

131
00:11:42.340 --> 00:11:45.980
going to be equal to the message.data
131

132
00:11:46.090 --> 00:11:51.400
and we're going to tap into the value under the sender key.
132

133
00:11:51.400 --> 00:11:58.390
So now that we have message text and message sender, then we're finally going to create our message widget
133

134
00:11:58.720 --> 00:12:07.450
which is going to be a text widget that contains some data namely the message text and the message is
134

135
00:12:07.450 --> 00:12:10.720
going to be from the message sender,
135

136
00:12:11.110 --> 00:12:21.580
so messageSender. And now we're ready to add our message widget to our list of message widgets by using
136

137
00:12:21.580 --> 00:12:22.840
the add method.
137

138
00:12:26.330 --> 00:12:34.640
So once the FOR loop is done running, then it's finally time to actually return a widget as the output
138

139
00:12:34.700 --> 00:12:35.920
of our stream builder.
139

140
00:12:36.020 --> 00:12:43.460
And I'm going to return a column because it's going to contain a whole bunch of children and the children
140

141
00:12:43.460 --> 00:12:50.180
of the column are going to be our list of text widgets, each with a message and a sender.
141

142
00:12:50.180 --> 00:12:52.140
So that's what I'm going to put in here.
142

143
00:12:53.820 --> 00:13:02.100
And now once we close that off with a semicolon, we can hit save. And you'll be able to see all of the
143

144
00:13:02.100 --> 00:13:07.430
messages that we've created thus far inside our chat screen.
144

145
00:13:07.610 --> 00:13:15.000
And because we've got our MainAxisAlignment for the main column as spaceBetween, then it pushes that
145

146
00:13:15.000 --> 00:13:20.690
text field down to the bottom and it pushes our column of text widget right to the top.
146

147
00:13:20.730 --> 00:13:28.590
Now if at this point I send a new message to our Firebase Cloud Firestore, then the moment that it hits
147

148
00:13:28.590 --> 00:13:36.540
my database, we're also going to be notified that a new message has come through and it gets added straight
148

149
00:13:36.540 --> 00:13:39.600
in to my chat screen.
149

150
00:13:39.660 --> 00:13:43.110
Why does it get added straight to the chat screen?
150

151
00:13:43.110 --> 00:13:49.590
Well because our stream builder receives a new async snapshot, this will trigger the builder function
151

152
00:13:49.710 --> 00:13:53.650
which will rebuild the list of text widgets on our screen.
152

153
00:13:53.700 --> 00:14:01.010
So in other words, our code is reacting to a new event like a chat message being sent.
153

154
00:14:01.110 --> 00:14:02.950
Just let that sink in for a minute.
154

155
00:14:02.970 --> 00:14:06.680
I think this is a really really neat way of doing things.
155

156
00:14:07.140 --> 00:14:13.170
But if we take a look in our code, the thing that we haven't really handled is, what if the snapshot has
156

157
00:14:13.230 --> 00:14:14.080
no data?
157

158
00:14:14.080 --> 00:14:18.230
Well in that case, what do we output for our Stream builder?
158

159
00:14:18.300 --> 00:14:20.180
Let's think about this for a second.
159

160
00:14:20.220 --> 00:14:24.350
In which case might we have no data in our snapshot?
160

161
00:14:24.360 --> 00:14:31.740
Well we might have a null value in our very first snapshot before we had a chance to connect to Firebase.
161

162
00:14:31.950 --> 00:14:34.130
So let's handle this situation.
162

163
00:14:34.200 --> 00:14:41.160
If our first snapshot has no data and we're not yet connected to Firebase, then what I'd like to do is
163

164
00:14:41.160 --> 00:14:50.360
to show some kind of a spinner or progress indicator, that way our users know to wait for our app. So
164

165
00:14:50.450 --> 00:14:56.780
instead of checking whether if the snapshot has data and doing these things, I'm actually going to flip
165

166
00:14:56.780 --> 00:15:04.250
it on its head. So I'm gonna find the closing brace for the snapshot has data and I'm going to close
166

167
00:15:04.250 --> 00:15:11.330
it off up in the same line and I'm going to check to see instead whether if the snapshot has no data.
167

168
00:15:11.840 --> 00:15:16.460
So this way we can check to see if we didn't get any data back yet,
168

169
00:15:16.550 --> 00:15:20.510
then in this case we're going to return a different widget.
169

170
00:15:20.510 --> 00:15:29.390
We're going to return a center widget and inside the center widget, we're going to use a CircularProgress
170

171
00:15:29.540 --> 00:15:30.860
Indicator.
171

172
00:15:30.860 --> 00:15:37.510
Now a circular progress indicator is what our modal progress HUD was based on.
172

173
00:15:37.640 --> 00:15:43.850
Remember we implemented a progress spinner after login and registration in a previous lesson.
173

174
00:15:43.970 --> 00:15:50.900
The modal progress HUD allowed us to easily specify when it should spin and when it should stop spinning
174

175
00:15:51.290 --> 00:15:55.210
through the use of that boolean that we called showSpinner.
175

176
00:15:55.730 --> 00:16:02.130
But in this case, what we actually need is just a simple circular progress Indicator.
176

177
00:16:02.210 --> 00:16:09.770
Maybe we'll give it a background color or we'll change it to maybe a light blue accent, but this is only
177

178
00:16:09.770 --> 00:16:16.820
here for the case when we actually have no data yet because as soon as we get data, our stream builder is
178

179
00:16:16.820 --> 00:16:20.230
actually going to build our column instead.
179

180
00:16:20.270 --> 00:16:26.290
So this is only going to show and spin when we have no data and only for that moment.
180

181
00:16:26.450 --> 00:16:31.340
And then as soon as we get data it will get destroyed. Now
181

182
00:16:31.430 --> 00:16:38.970
at the moment, we've got quite an ugly list of messages showing up. and it doesn't look like a great chat
182

183
00:16:38.990 --> 00:16:39.440
app.
183

184
00:16:39.450 --> 00:16:42.360
Nobody's really going to use something that looks like this.
184

185
00:16:42.380 --> 00:16:49.460
So in the next lesson, we're going to jazz it up make it look like a real messaging app by making message
185

186
00:16:49.460 --> 00:16:52.870
bubbles and also learning about Flutter list views.
186

187
00:16:53.180 --> 00:16:55.060
So for all of that and more,
187

188
00:16:55.250 --> 00:16:56.360
I'll see you on the next lesson.
