0
1
00:00:00,940 --> 00:00:01,260
All right.
1

2
00:00:01,290 --> 00:00:07,620
So in the last lesson, we saw how we have to create drop down menu item widgets that encloses a text
2

3
00:00:07,620 --> 00:00:11,830
widget that has a value for each of our currencies.
3

4
00:00:11,940 --> 00:00:14,040
And we know we have a lot of those.
4

5
00:00:14,130 --> 00:00:21,720
So manually doing this is probably not an option for us lazy programmers. But luckily we have this construct
5

6
00:00:21,720 --> 00:00:25,860
called loops in pretty much all programming languages.
6

7
00:00:25,860 --> 00:00:32,580
Now remember back when we covered functions in Dart and we had this function called buyMilk which was
7

8
00:00:32,580 --> 00:00:38,580
to be carried out by a little housekeeping robot where it would go out every day buy us a bottle of
8

9
00:00:38,580 --> 00:00:40,550
milk and then come back.
9

10
00:00:40,560 --> 00:00:46,080
Well imagine having to do that seven days a week then you would have to remember to tell the robot to
10

11
00:00:46,080 --> 00:00:48,250
buy milk every single day.
11

12
00:00:48,330 --> 00:00:56,040
So buy milk, then buy milk again then calling this function over and over again every single time we
12

13
00:00:56,040 --> 00:01:01,260
need it to happen even though we know that we need it to be carried out seven times or however many
13

14
00:01:01,260 --> 00:01:02,810
times per week.
14

15
00:01:03,010 --> 00:01:09,990
There's a better way of doing this. Whenever we need some functionality or some piece of code to be executed
15

16
00:01:10,050 --> 00:01:11,400
multiple times,
16

17
00:01:11,400 --> 00:01:14,310
we can use a loop to do that.
17

18
00:01:14,310 --> 00:01:21,330
And one of the most useful types of loops are FOR loops. Now FOR loops comes in many different flavors.
18

19
00:01:21,330 --> 00:01:27,300
And the most common type which comes from the C language looks something like this.
19

20
00:01:27,450 --> 00:01:35,010
We have the for keyword to say that what comes afterwards is a FOR loop, and then we create a new integer
20

21
00:01:35,160 --> 00:01:42,570
which is usually by convention called i. We set it to equal a starting value of 0 and then we have a
21

22
00:01:42,570 --> 00:01:47,460
semicolon and we define how long we want our loop to run for.
22

23
00:01:47,460 --> 00:01:55,680
So while i is less than seven, we're going to keep running our loop. And then after a second semicolon
23

24
00:01:55,980 --> 00:02:01,530
we specify how we want i to increase after each loop.
24

25
00:02:01,530 --> 00:02:09,750
Now finally inside some curly braces, we're going to do something: 7 - 0 times. So you can look
25

26
00:02:09,750 --> 00:02:12,350
at it as if this is the starting value
26

27
00:02:12,420 --> 00:02:14,050
and this is the ending value
27

28
00:02:14,190 --> 00:02:16,950
and this is how we're going to go from zero to seven.
28

29
00:02:17,100 --> 00:02:19,680
So we're going to go in increments of 1.
29

30
00:02:19,680 --> 00:02:27,090
We're going to start out at zero, run our code increase by 1 then run our code then increase by 1 again
30

31
00:02:27,120 --> 00:02:33,200
then run on code until i is equal to 6. But more than just running code
31

32
00:02:33,210 --> 00:02:36,590
many many times, we can actually do something with i.
32

33
00:02:36,630 --> 00:02:43,890
So we could use this i which we know is going to start out being equal to zero then to 1 and 2 etc.
33

34
00:02:44,150 --> 00:02:48,980
We can use it inside our FOR loop to affect our code.
34

35
00:02:48,990 --> 00:02:50,660
Now what is all of this mean?
35

36
00:02:50,670 --> 00:02:52,370
Let's look at it in a concrete way.
36

37
00:02:53,710 --> 00:02:59,440
Inside DartPad inside my main function, I'm going to create one of those FOR loops that I showed you
37

38
00:02:59,440 --> 00:03:00,270
just now.
38

39
00:03:00,610 --> 00:03:06,280
And we start out by creating a new integer, so a variable that's going to be called i
39

40
00:03:06,490 --> 00:03:13,660
wnd it's going to start out being equal to zero. And then we add a semicolon and we say that while i
40

41
00:03:13,680 --> 00:03:20,710
is less than 10, we're going to keep running our code and after every single time we run our code, we
41

42
00:03:20,710 --> 00:03:22,900
add one to i.
42

43
00:03:22,930 --> 00:03:30,700
So now inside the curly braces of this FOR loop, our code everything, that's inside here, is going to be
43

44
00:03:30,700 --> 00:03:37,650
run 10 - 0 times. So let's print something, let's just print maybe
44

45
00:03:38,080 --> 00:03:41,040
Hello. Now
45

46
00:03:41,070 --> 00:03:48,630
when I hit run, it's going to print that 10 times into the console. And the number of times that we run
46

47
00:03:48,630 --> 00:03:52,900
this is determined by everything that's inside these parentheses.
47

48
00:03:52,890 --> 00:03:59,340
So if instead of printing hello, we printed the actual value of i, then we can peek a little bit behind
48

49
00:03:59,340 --> 00:04:01,380
the scenes as to what's going on.
49

50
00:04:01,410 --> 00:04:08,910
So let me hit run again and you can see that for the first time that my FOR loop ran, I was equal to
50

51
00:04:08,910 --> 00:04:11,490
zero because that's the starting value we gave it.
51

52
00:04:11,700 --> 00:04:15,350
So when I printed i, it printed zero into the console.
52

53
00:04:16,020 --> 00:04:21,010
But after that's been executed, it comes back to check again.
53

54
00:04:21,030 --> 00:04:24,090
Well now is i still less than 10?
54

55
00:04:24,090 --> 00:04:25,780
Well 0 is less than 10
55

56
00:04:25,830 --> 00:04:28,860
so let's add one to it and let's run it again
56

57
00:04:28,860 --> 00:04:37,130
so it runs this printing out one. And it keeps on doing this until i is equal to now nine.
57

58
00:04:37,170 --> 00:04:41,050
So this time i is equal to nine and it makes that check again.
58

59
00:04:41,190 --> 00:04:43,150
Well, is i less than 10?
59

60
00:04:43,230 --> 00:04:44,950
Well 9 is less than 10
60

61
00:04:44,970 --> 00:04:46,940
so let's run it one more time.
61

62
00:04:47,100 --> 00:04:51,990
And now i is going to be equal to 10 because we add one to it every single time
62

63
00:04:51,990 --> 00:04:53,640
this code is finished.
63

64
00:04:53,640 --> 00:04:55,230
So now i's equal to 10
64

65
00:04:55,260 --> 00:05:01,150
and we finally make that check. Is 10 less than 10? Well no, 10 is equal to 10.
65

66
00:05:01,170 --> 00:05:03,020
So this is no longer true
66

67
00:05:03,210 --> 00:05:08,040
and our FOR loop exits. So we don't run this code anymore.
67

68
00:05:08,070 --> 00:05:12,410
So there's a number of ways that we can change how our loop will be executed.
68

69
00:05:12,870 --> 00:05:17,090
And one of the easiest ways is actually to change how I increment.
69

70
00:05:17,490 --> 00:05:23,600
So we could say instead of adding one to i every single time after every single time the loop runs,
70

71
00:05:23,700 --> 00:05:25,560
what if we added 2?
71

72
00:05:25,560 --> 00:05:28,580
So let's use plus equals 2.
72

73
00:05:28,590 --> 00:05:31,910
So now i is going to increase by 2 every time.
73

74
00:05:32,010 --> 00:05:37,310
And if I click run, i still starts with zero because that's what we said it should start as.
74

75
00:05:37,440 --> 00:05:42,900
But now after every time the loop is run, i get to added to it.
75

76
00:05:43,080 --> 00:05:49,980
So it goes from 0 to 2 to 4 to 6 to 8 until it goes to 10 which is now no longer less
76

77
00:05:49,980 --> 00:05:50,640
than 10
77

78
00:05:50,700 --> 00:05:58,830
and so on loop stops. Now other things that you can change about our FOR loop is what the starting value
78

79
00:05:58,830 --> 00:05:59,220
is.
79

80
00:05:59,250 --> 00:06:05,930
So let's say that it started with a value of two and we increased by one each time.
80

81
00:06:05,940 --> 00:06:12,360
Well now when we print it, it's going to go from two to nine instead of from zero to nine.
81

82
00:06:12,360 --> 00:06:15,570
Now we can also change when our code ends.
82

83
00:06:15,600 --> 00:06:23,610
So if instead of i being less than 10, we put an i is less than 15 maybe. Then our code is going to
83

84
00:06:23,610 --> 00:06:33,380
run from 2 until it reaches 14, which is the last value before i is equal to 15.
84

85
00:06:33,380 --> 00:06:35,740
Now let's see this in a real example.
85

86
00:06:35,740 --> 00:06:42,910
So let's say that I had this function called buyMilk and I was able to specify how many days I want
86

87
00:06:42,910 --> 00:06:44,080
to buy milk for.
87

88
00:06:44,290 --> 00:06:47,010
So maybe buy milk for seven days
88

89
00:06:47,020 --> 00:06:47,290
right?
89

90
00:06:47,770 --> 00:06:50,150
So now let's write this function down here.
90

91
00:06:50,170 --> 00:06:57,220
So it's going to be called buyMilk and we can specify an integer which is going to account for the number
91

92
00:06:57,220 --> 00:07:03,740
of days that we're going to buy milk for. Now inside this function what I want to happen is something
92

93
00:07:03,740 --> 00:07:04,960
really simple.
93

94
00:07:05,030 --> 00:07:13,370
My robot is simply going to say buying milk on day 1, then day 2, then day 3 then day 4 to show
94

95
00:07:13,370 --> 00:07:15,770
which day it's actually buying milk for.
95

96
00:07:15,800 --> 00:07:20,750
And I want this to run for as many times as we specified in this input.
96

97
00:07:20,750 --> 00:07:29,060
So in order to do that, we can use a FOR loop. So we can say for int i is equal to and we're going to
97

98
00:07:29,060 --> 00:07:31,400
start it out with day one right?
98

99
00:07:31,430 --> 00:07:40,190
So i is equal to one. And then while i is less than or equal to the number of days that we've specified
99

100
00:07:40,550 --> 00:07:46,510
in our input here, we want our code to keep running. And we're going to increase
100

101
00:07:46,520 --> 00:07:48,830
i by one each time.
101

102
00:07:48,840 --> 00:07:55,220
So now, we're going to enclose our print statement inside this FOR loop and we're going to use the value
102

103
00:07:55,220 --> 00:07:58,580
of i to be printed in here.
103

104
00:07:58,610 --> 00:08:06,410
Now if I run my code, you can see that I'm putting 7 in as the input to my function buyMilk.
104

105
00:08:06,410 --> 00:08:14,180
So 7 goes inside here and then it's going to run my FOR loop as many times as I specified in here.
105

106
00:08:14,240 --> 00:08:23,180
So I said to start out with a value of 1 and to keep repeating the code inside here until i is less than
106

107
00:08:23,270 --> 00:08:25,060
or equal to 7,
107

108
00:08:25,130 --> 00:08:34,010
so until 1 becomes 7. And after every time this code is repeated, increase the value of i by one.
108

109
00:08:34,640 --> 00:08:42,560
And every time my code is run, it's going to print buying milk on day i, so day 1 then day 2 then
109

110
00:08:42,560 --> 00:08:45,390
day 3 until 7.
110

111
00:08:45,640 --> 00:08:52,870
So now that we've seen how a basic C style FOR loop works, it's time for a challenge.
111

112
00:08:53,060 --> 00:08:58,540
There's a very old school looking website called 99-bottlesof-beer.net
112

113
00:08:58,870 --> 00:09:04,870
and here they've got the lyrics for the song for 99 bottles of beer.
113

114
00:09:05,320 --> 00:09:08,740
So if you click on song lyrics you can see how this song goes.
114

115
00:09:08,770 --> 00:09:12,640
It starts out with 99 bottles of beer on the wall, 99 bottles of beer.
115

116
00:09:12,640 --> 00:09:14,530
Take one down and pass it around,
116

117
00:09:14,530 --> 00:09:17,180
98 bottles of beer on the wall.
117

118
00:09:17,380 --> 00:09:21,640
And then each time the lyric repeats that number goes down.
118

119
00:09:21,640 --> 00:09:24,640
So we go from 99 to 98 t 9
119

120
00:09:24,640 --> 00:09:29,220
until we get to no more bottles of beer on the wall, no more bottles of beer.
120

121
00:09:29,260 --> 00:09:33,510
Go to the store and buy some more 99 Bottles of Beer on the wall.
121

122
00:09:33,640 --> 00:09:40,060
So this website is unique because it collects together various languages that have written programs
122

123
00:09:40,060 --> 00:09:45,860
to be able to print out the lyrics for this song, and it's sorted by language.
123

124
00:09:45,880 --> 00:09:48,440
So it's from a to z.
124

125
00:09:48,460 --> 00:09:56,510
So for example if we take a look at the code for Java, you can see that it has a score rating based on
125

126
00:09:56,510 --> 00:10:05,240
people who have voted through here. And you can see their program being written in here and there's various
126

127
00:10:05,240 --> 00:10:08,950
different alternate versions that people have submitted.
127

128
00:10:09,080 --> 00:10:14,700
Now as a challenge, I want you to print out a simple version of this song.
128

129
00:10:14,720 --> 00:10:22,190
So this is going to be the starting baseline and then we need this number to decrease by 1 each time.
129

130
00:10:22,340 --> 00:10:27,140
This number to decrease by 1 and this number to decrease by 1.
130

131
00:10:27,140 --> 00:10:31,340
So you don't have to have the very last line saying No more bottles of beer.
131

132
00:10:31,430 --> 00:10:33,910
Your code should stop at this line
132

133
00:10:33,920 --> 00:10:38,260
where we have only one bottle of beer on the wall, one bottle of beer.
133

134
00:10:38,260 --> 00:10:44,540
So try and use what you've learned based on the FOR loop to try and print out these lyrics into the
134

135
00:10:44,540 --> 00:10:50,860
console. Pause video and try to complete this challenge.
135

136
00:10:50,980 --> 00:10:51,280
All right.
136

137
00:10:51,310 --> 00:10:55,030
So we're going to try and write a program for this in the simplest way possible.
137

138
00:10:55,150 --> 00:11:02,230
So I'm going to copy the first line of code which I know to repeat pretty much 100 times. And I'm going
138

139
00:11:02,230 --> 00:11:05,930
to put it into my DartPad.
139

140
00:11:06,040 --> 00:11:09,480
So this is going to be the starting baseline of my lyrics
140

141
00:11:09,580 --> 00:11:15,730
and you can see I've got this 99, 99, 98 which are the things that change
141

142
00:11:15,880 --> 00:11:17,270
in this song.
142

143
00:11:17,530 --> 00:11:23,980
So let's create a FOR loop where we have to loop through it a couple of times and I'm again going to
143

144
00:11:23,980 --> 00:11:33,590
start with my integer i equal to 99 in this case. And I'm going to run my loop as long as i
144

145
00:11:33,980 --> 00:11:36,780
is greater than zero.
145

146
00:11:36,920 --> 00:11:44,630
And finally I'm going to change i not add, but I'm actually going to reduce it by 1 each time,
146

147
00:11:44,630 --> 00:11:54,130
so i--. So now inside this FOR loop, I now have access to this thing called i.
147

148
00:11:54,600 --> 00:11:58,760
And if we come in our lyrics for now, let's try and print i
148

149
00:11:58,770 --> 00:11:59,790
each time.
149

150
00:11:59,880 --> 00:12:01,160
So let's hit run.
150

151
00:12:01,260 --> 00:12:03,690
And you can see that inside my console,
151

152
00:12:03,690 --> 00:12:11,400
I'm printing i from 99 all the way down to 1, which is what I need. Now instead of printing i,
152

153
00:12:11,550 --> 00:12:13,500
I'm going to print my lyrics.
153

154
00:12:13,500 --> 00:12:15,990
So I'm going to uncomment my lyrics,
154

155
00:12:15,990 --> 00:12:18,630
cut it and put it in here as a string,
155

156
00:12:18,630 --> 00:12:25,010
so inside some single quotes. And note that when we copied and pasted, it's actually on two lines.
156

157
00:12:25,050 --> 00:12:29,510
So we need this to be considered as one line of code.
157

158
00:12:29,670 --> 00:12:33,910
And now I can substitute 99 for my variable
158

159
00:12:33,910 --> 00:12:37,060
i, so that's gonna be i,
159

160
00:12:37,100 --> 00:12:38,150
that's gonna be i,
160

161
00:12:38,150 --> 00:12:40,820
this is going to be i - 1.
161

162
00:12:40,850 --> 00:12:48,230
So we have to use a dollar sign and then we have our curly braces and inside our curly braces we can
162

163
00:12:48,230 --> 00:12:50,920
say i - 1.
163

164
00:12:50,960 --> 00:12:57,230
So now if I run my code, you can see that it starts out being 99 bottles of beer on the wall,
164

165
00:12:57,260 --> 00:12:58,580
99 bottles of beer.
165

166
00:12:58,580 --> 00:13:04,910
Take one down pass around, 98 bottles of beer on the wall. And then it repeats until we get
166

167
00:13:04,910 --> 00:13:07,400
to 1 bottle of beer on the wall. 1 bottle of beer.
167

168
00:13:07,400 --> 00:13:11,790
Take 1  down pass it around, 0 bottles of beer on the wall.
168

169
00:13:11,870 --> 00:13:18,560
Now this is not perfect because we don't have the full lyrics because we haven't considered the singular
169

170
00:13:18,560 --> 00:13:20,660
version of bottles is bottle.
170

171
00:13:20,660 --> 00:13:25,670
So once it reaches one, it should probably change to bottle. And once it reaches 0, it should probably
171

172
00:13:25,670 --> 00:13:27,650
say no more bottles of beer.
172

173
00:13:27,800 --> 00:13:30,800
And there's also that final line that needs to be printed.
173

174
00:13:30,800 --> 00:13:36,530
So if you're up for a challenge then feel free to try and write some code that will actually print out
174

175
00:13:36,920 --> 00:13:39,580
exactly the same lyrics as you see here.
175

176
00:13:40,040 --> 00:13:47,210
But the fundamental thing I want you to learn here is how you can use for loops really flexibly to determine
176

177
00:13:47,510 --> 00:13:51,690
how many times code should be repeated and to use this value
177

178
00:13:51,700 --> 00:13:59,390
i inside that FOR loop for various things such as using inside a print statement or using it as an index
178

179
00:13:59,390 --> 00:14:01,120
for something like a list
179

180
00:14:01,130 --> 00:14:08,640
for example. Now while we're talking about FOR loops, I want to show you another type of FOR loop and
180

181
00:14:08,640 --> 00:14:16,350
this is called the for in loop and this is really helpful when we want to loop through all of the items
181

182
00:14:16,740 --> 00:14:18,330
in an iterable,
182

183
00:14:18,330 --> 00:14:20,480
so something like a list.
183

184
00:14:20,760 --> 00:14:26,580
In this case let's say I have a list of fruits and I want to loop through all of the values inside that
184

185
00:14:26,580 --> 00:14:32,030
list and then do something with each of the fruits inside that list.
185

186
00:14:32,100 --> 00:14:36,570
So if I use a for in loop, it looks something like this.
186

187
00:14:36,570 --> 00:14:43,050
So instead of using that i to iterate through and to determine when our loop starts and when it ends
187

188
00:14:43,440 --> 00:14:51,520
and how it iterates, we instead create a new variable that is of the type that's contained in a list.
188

189
00:14:51,750 --> 00:14:55,710
For example in this case we have a list of strings called fruits.
189

190
00:14:55,710 --> 00:15:02,930
And for each fruit in fruits we can do something with that variable fruit.
190

191
00:15:03,150 --> 00:15:07,840
And it's going to run this loop for every single item inside that list.
191

192
00:15:07,860 --> 00:15:15,220
So if there's five items then it's going to run it five times. So heading again into DArtPad, here I've
192

193
00:15:15,220 --> 00:15:24,340
created a list of strings which is called fruits and it's set to equal a new list that contains five
193

194
00:15:24,340 --> 00:15:24,880
fruits:
194

195
00:15:24,880 --> 00:15:27,540
apple, pear, orange, grape and banana.
195

196
00:15:27,550 --> 00:15:34,690
Now let's say that I want to make a function called maybe pieMaker and it's going to take each of those
196

197
00:15:34,690 --> 00:15:37,980
fruits and it's going to add the word pie to it.
197

198
00:15:38,020 --> 00:15:45,130
So I want to be able to make apple pie, pear pie, orange pie which I'm pretty sure nobody makes, grape
198

199
00:15:45,130 --> 00:15:50,800
pie and banana pie. And I want to print each of those into the console.
199

200
00:15:50,800 --> 00:15:59,290
Well what I could do is I could simply use a for in loop so I could say the keyword for, inside the parentheses,
200

201
00:15:59,290 --> 00:16:05,950
I'm going to create a new string that is going to represent each item inside that list.
201

202
00:16:05,950 --> 00:16:12,850
So because this is a list of strings then this is why I'm creating a new string that represents a single
202

203
00:16:12,850 --> 00:16:14,440
item in that list,
203

204
00:16:14,440 --> 00:16:16,680
so a string I'm going to call it fruit,
204

205
00:16:16,720 --> 00:16:25,630
The singular form of fruits. And I'm going to say for every fruit inside the fruits list, I'm going to
205

206
00:16:25,630 --> 00:16:34,540
do something with that list of fruits. I'm going to print my fruit which is the single item and then
206

207
00:16:34,540 --> 00:16:39,850
I'm going to add the word pie to it.
207

208
00:16:39,880 --> 00:16:49,000
So now if I call my method pie maker inside my main function and I hit run, then you can see it goes
208

209
00:16:49,000 --> 00:16:57,220
through my list of fruits and for every fruit inside that list of fruits, it adds the word pie to the
209

210
00:16:57,220 --> 00:16:59,470
end and it prints it into the console.
210

211
00:16:59,470 --> 00:17:05,230
So I now have apple pie, pear pie, orange pie, grape pie and banana pie.
211

212
00:17:05,460 --> 00:17:11,370
Now it's again time for a challenge to see if you've understood how the for in loop works.
212

213
00:17:11,580 --> 00:17:18,510
And I've got a starting DartPad for you which you'll find in the course resources.
213

214
00:17:18,510 --> 00:17:24,420
Once you head over to that URL you should see a list of numbers this time list of integers called
214

215
00:17:24,570 --> 00:17:25,700
winningNumbers
215

216
00:17:25,950 --> 00:17:29,640
and it contains six winning lottery numbers.
216

217
00:17:29,730 --> 00:17:35,910
Now inside the main function, there's two tickets that you've bought ticket 1 and ticket 2.
217

218
00:17:36,150 --> 00:17:40,200
And these are your numbers that you've chosen for the lottery.
218

219
00:17:40,200 --> 00:17:47,070
Now we want to create a function called checkNumbers which is going to take each of these tickets that
219

220
00:17:47,070 --> 00:17:54,940
you pass in here and check against the winning numbers to see how many matching numbers you have. So
220

221
00:17:55,030 --> 00:18:02,680
you're going to write your code right here inside this check numbers method and we're going to call
221

222
00:18:02,680 --> 00:18:06,930
it inside the main function. In order to solve this challenge,
222

223
00:18:07,030 --> 00:18:13,630
once you run the code, it should be able to check your ticket which currently is ticket 1 against the
223

224
00:18:13,630 --> 00:18:17,540
winning numbers and tell you how many matching numbers you have.
224

225
00:18:17,980 --> 00:18:27,100
So we can see quite easily that this ticket has both number 9 and also number 12 which match with
225

226
00:18:27,100 --> 00:18:29,580
the winning numbers in the lottery ticket.
226

227
00:18:29,590 --> 00:18:38,290
Now if we change to ticket 2 as the input to check against, then now we only have one matching number
227

228
00:18:38,980 --> 00:18:41,400
which is the number 41.
228

229
00:18:41,440 --> 00:18:48,010
So you're going to need to use what you've learned about for in loops and it's going to take a little
229

230
00:18:48,010 --> 00:18:52,660
bit of thinking to figure out how you can create the code that performs this task.
230

231
00:18:53,110 --> 00:18:59,230
So pause the video and try to complete this challenge.
231

232
00:18:59,690 --> 00:18:59,960
All right.
232

233
00:18:59,990 --> 00:19:03,680
So we're going to create our code inside this method right here,
233

234
00:19:03,710 --> 00:19:09,770
so let's delete that comment. And we know that we have access to this thing called myNumbers which is
234

235
00:19:09,770 --> 00:19:12,910
going to pass in ticket 1 to begin with.
235

236
00:19:12,920 --> 00:19:19,340
So we now have access to this list of integers inside our check numbers method.
236

237
00:19:19,340 --> 00:19:22,640
Now we also have access to the winning numbers.
237

238
00:19:22,640 --> 00:19:27,280
So let's first iterate or loop through my numbers.
238

239
00:19:27,620 --> 00:19:31,140
So to do that we have to create a for loop
239

240
00:19:31,190 --> 00:19:35,060
and the easiest way is to use our for in loop.
240

241
00:19:35,390 --> 00:19:43,340
Let's create a new integer variable that is going to represent each number inside this list of numbers.
241

242
00:19:43,340 --> 00:19:48,340
So this is going to be called, let's say myNum right?
242

243
00:19:48,440 --> 00:19:49,940
To represent each of the numbers.
243

244
00:19:49,970 --> 00:19:52,430
So it'll start out being equal to 45
244

245
00:19:52,460 --> 00:19:54,390
then it'll be 2 then it'll be 9.
245

246
00:19:54,620 --> 00:19:58,940
And for each number in mynumbers,
246

247
00:19:58,940 --> 00:20:02,030
so this is are for in loop syntax,
247

248
00:20:02,120 --> 00:20:06,560
we can now print out each of the my num numbers.
248

249
00:20:06,590 --> 00:20:08,710
So we already know that we can do this.
249

250
00:20:08,780 --> 00:20:14,930
So ticket 1 gets passed in and we create a new variable that represents each of the numbers in my
250

251
00:20:14,930 --> 00:20:15,590
numbers
251

252
00:20:15,590 --> 00:20:16,890
and then we print them out.
252

253
00:20:16,970 --> 00:20:24,530
So it's now printing them out one by one from our ticket 1. The next step is if we have access to each of
253

254
00:20:24,530 --> 00:20:30,230
these numbers well why don't we check each of these numbers against our winning numbers? In order to
254

255
00:20:30,230 --> 00:20:31,040
do that,
255

256
00:20:31,100 --> 00:20:34,070
we have to again separate the winning numbers.
256

257
00:20:34,070 --> 00:20:37,670
So what if we could loop through each of the winning numbers
257

258
00:20:37,790 --> 00:20:42,150
wo start out with twelve and see is 12 equal to myNumber?
258

259
00:20:42,170 --> 00:20:42,600
No.
259

260
00:20:42,680 --> 00:20:45,680
Is 6 equal to myNumber? Is 34
260

261
00:20:45,680 --> 00:20:46,760
equal to myNumber?
261

262
00:20:46,790 --> 00:20:52,520
You get the point. And then once we've done that for the first number in our list, well we move on to
262

263
00:20:52,520 --> 00:20:58,070
the next one. We check to see if 2  matches 12 matches 6 matches 34.
263

264
00:20:58,160 --> 00:21:04,100
To do that we have to create another for in loop inside this for in loop,
264

265
00:21:04,100 --> 00:21:05,360
so a nested one.
265

266
00:21:05,510 --> 00:21:13,160
So here if we create another for in loop that's going to loop through each of the winning numbers.
266

267
00:21:13,250 --> 00:21:22,040
So call it winningNum in the list of winning numbers which comes from here. And inside here we can
267

268
00:21:22,040 --> 00:21:32,630
print both my number equals, it'll will pass in my num. And we can also print the winning num,
268

269
00:21:32,630 --> 00:21:45,460
so winning number equals winning num. So let's go ahead and delete this print statement and run our code
269

270
00:21:46,030 --> 00:21:49,030
and you can see we live through firstly, my numbers.
270

271
00:21:49,030 --> 00:21:51,990
So we're starting out with 45 which is the first number
271

272
00:21:52,630 --> 00:21:58,750
and then inside here we looped through each of the winning numbers. So we can now start checking to see
272

273
00:21:58,750 --> 00:22:00,120
is 45 equal to 12?
273

274
00:22:00,160 --> 00:22:04,640
is 45 equals to 6? Is 45 equals 34? etc..
274

275
00:22:04,750 --> 00:22:15,260
So instead of printing it out we can say well if the winning number is equal to my number,
275

276
00:22:15,640 --> 00:22:18,380
well in that case it means I have a match right?
276

277
00:22:18,400 --> 00:22:20,760
One of my numbers matches with the winning numbers.
277

278
00:22:20,950 --> 00:22:26,580
So let's print got a match.
278

279
00:22:26,880 --> 00:22:27,100
All right.
279

280
00:22:27,130 --> 00:22:32,770
So now let's run our code and we can see that we get this called only twice.
280

281
00:22:32,770 --> 00:22:34,720
That means we have two matches.
281

282
00:22:34,750 --> 00:22:38,680
So how can we create a value that stores the number of matches we get?
282

283
00:22:38,680 --> 00:22:47,820
Well we could create a new variable outside the for loop. So let's create a new integer called matches.
283

284
00:22:49,030 --> 00:22:53,190
And it's going to start out being 0 because we'll have no matches to begin with.
284

285
00:22:53,680 --> 00:23:00,700
And every time the winning number equals my number, I can increase matches by 1.
285

286
00:23:00,700 --> 00:23:07,090
And finally once the for loop has completed and I've checked all of the numbers against my numbers, I
286

287
00:23:07,090 --> 00:23:09,730
can now print how many matches I have.
287

288
00:23:09,760 --> 00:23:16,700
So you have and then we'll put on matches variable in here,
288

289
00:23:16,810 --> 00:23:26,730
you have say two matches. And now if we run our code as it is, you can see that we have, 'You have two matches'
289

290
00:23:27,240 --> 00:23:31,080
and it's going through both of these for loops to be able to tell us that.
290

291
00:23:31,740 --> 00:23:38,100
And if we change this to ticket 2, then it will look through all of the numbers in ticket 2 and it
291

292
00:23:38,100 --> 00:23:45,140
will again run those for loops and tell us that you have one match. This challenge to help you fully
292

293
00:23:45,140 --> 00:23:51,680
understand how the for in loop works and if you haven't been able to figure out the solution, then write
293

294
00:23:51,680 --> 00:23:57,920
out the code yourself and use and some print statements to see what's going on at each step of the for loop
294

295
00:23:57,980 --> 00:23:59,330
being carried out.
295

296
00:23:59,390 --> 00:24:05,500
This is the only way to really get to grips with what the code is doing behind the scenes.
296

297
00:24:05,540 --> 00:24:11,830
Once you're done we're going to head back into our Flutter project and we're going to use what we learn
297

298
00:24:11,830 --> 00:24:14,600
about for loops to complete the challenge there.
