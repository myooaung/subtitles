0
1
00:00:00,470 --> 00:00:00,810
All right.
1

2
00:00:00,840 --> 00:00:06,230
So we've managed to get our app to work and the functionality is pretty much there.
2

3
00:00:06,660 --> 00:00:10,480
But let's think more deeply about the problem.
3

4
00:00:10,500 --> 00:00:12,930
Let's look at the bigger picture.
4

5
00:00:12,960 --> 00:00:21,270
So in this lesson, I want to talk about design patterns, app architecture and dive deeper into Fluttter
5

6
00:00:21,270 --> 00:00:23,520
state management.
6

7
00:00:23,520 --> 00:00:28,790
So once you've started programming for a while, you'll hear these terms thrown around a lot,
7

8
00:00:28,830 --> 00:00:33,140
design patterns, architecture, state management,
8

9
00:00:33,480 --> 00:00:36,990
and the question really is why do we really care?
9

10
00:00:36,990 --> 00:00:38,070
Why does it matter?
10

11
00:00:38,280 --> 00:00:41,640
Well it's all down to complexity.
11

12
00:00:41,640 --> 00:00:45,350
Complexity is the root of all evil really
12

13
00:00:45,390 --> 00:00:46,770
in software.
13

14
00:00:46,770 --> 00:00:49,830
And here's something to illustrate that.
14

15
00:00:49,830 --> 00:00:54,100
Let's say that we decided to try and harness some energy.
15

16
00:00:54,120 --> 00:00:56,400
So we build a windmill.
16

17
00:00:56,400 --> 00:01:00,310
And every time the wind blows in UK that's pretty much every day,
17

18
00:01:00,360 --> 00:01:07,320
then you capture the wind and you could turn that energy into milling flower or if you put a generator
18

19
00:01:07,350 --> 00:01:10,770
on it then you can create electricity.
19

20
00:01:10,770 --> 00:01:13,620
Now that's actually relatively easy to manage.
20

21
00:01:13,680 --> 00:01:18,870
And if you check YouTube and you read some books, you could probably also build one of these.
21

22
00:01:18,960 --> 00:01:27,620
But what if we wanted to scale up our production and instead we wanted to build a nuclear power plant.
22

23
00:01:27,720 --> 00:01:35,850
Now for anybody who's watched a novel, then you'll know that it is a very complex task and there's a
23

24
00:01:35,850 --> 00:01:43,500
lot of things that you have to think about, the design of the plant, fail safes, the architecture, how things
24

25
00:01:43,560 --> 00:01:45,040
are going to be run.
25

26
00:01:45,120 --> 00:01:55,050
So when complexity increases, the opportunities for things to go wrong also increase.
26

27
00:01:55,050 --> 00:02:02,220
And the other way to think about it is it's a bit like say if you decided to rent a shop space and you
27

28
00:02:02,220 --> 00:02:08,160
wanted to start a restaurant right? It's a mom-and-pop shop. It's just you and a couple of cooks and a
28

29
00:02:08,160 --> 00:02:09,510
few waiters.
29

30
00:02:09,630 --> 00:02:14,880
But let's say that we told you that you had to scale up your production overnight.
30

31
00:02:14,910 --> 00:02:22,810
So instead of running a small startup, you had to run one of the largest corporations there are.
31

32
00:02:23,130 --> 00:02:29,550
So you've given a whole bunch of money to recruit and organize your staff and turn it into an Amazon
32

33
00:02:29,580 --> 00:02:31,690
or a Google overnight.
33

34
00:02:31,710 --> 00:02:38,340
You can imagine that the same rules or the same things that worked for a small company,
34

35
00:02:38,340 --> 00:02:44,760
it cannot work for a large corporation with you know thousands of people working for it.
35

36
00:02:44,790 --> 00:02:51,830
So that's why different companies have different architectures, some better than others.
36

37
00:02:52,050 --> 00:02:59,610
And it's because once you get to a certain scale once you have a certain level of complexity, then you
37

38
00:02:59,610 --> 00:03:07,350
need a good architecture to ensure that everything works smoothly and that your staff are working as
38

39
00:03:07,350 --> 00:03:09,560
efficiently as possible.
39

40
00:03:09,600 --> 00:03:14,910
So if you look at the big technology companies, you have various architectures that people have created
40

41
00:03:15,210 --> 00:03:17,370
to manage the company like a
41

42
00:03:17,370 --> 00:03:24,630
for example a top down pyramid where you have the CEO who delegates to managers and then middle managers
42

43
00:03:24,630 --> 00:03:31,680
and then employees or you have other types of structures where you have say an individual group of employees
43

44
00:03:31,740 --> 00:03:34,600
and they all, you know, inter-communicate.
44

45
00:03:34,650 --> 00:03:38,280
So we have the same kind of thing in software.
45

46
00:03:38,280 --> 00:03:44,910
And one of the most popular architectures for mobile at least is something called the Model View Controller.
46

47
00:03:45,060 --> 00:03:49,980
And this was first popularized by Apple in developing iOS apps.
47

48
00:03:49,980 --> 00:03:53,070
So the concept is really simple for this architecture.
48

49
00:03:53,070 --> 00:03:59,910
You have the model which manages the data, you have the view which manages what goes onto the screen
49

50
00:04:00,270 --> 00:04:05,540
and you have the controller who is kind of the middleman between all of these components.
50

51
00:04:05,670 --> 00:04:13,890
And so you end up with the MVC design pattern where there's the model that handles the data and logic,
51

52
00:04:13,950 --> 00:04:18,890
the view which handles the user interface and the controller which is the mediator.
52

53
00:04:19,050 --> 00:04:27,030
So you might have a case where the user taps on something on the on the app then the code in the view
53

54
00:04:27,030 --> 00:04:31,980
will then send a message about those input events to the controller.
54

55
00:04:31,980 --> 00:04:38,570
The Controller will then use those input events to decide what it should do next
55

56
00:04:38,610 --> 00:04:44,330
and it could be that it will make a request to the model to request some data
56

57
00:04:44,360 --> 00:04:44,980
right?
57

58
00:04:45,030 --> 00:04:51,690
Say if the user taps in a contact app and they wanted to view Bob's phone address, then the controller
58

59
00:04:51,750 --> 00:04:54,990
is going to make that request to the model class.
59

60
00:04:54,990 --> 00:05:02,120
Now then the model class deals with the database or the data storage and it eventually sends back the data
60

61
00:05:02,150 --> 00:05:03,460
to the controller.
61

62
00:05:03,590 --> 00:05:07,600
The controller then uses that data to modify the view.
62

63
00:05:07,820 --> 00:05:14,630
And this is a very simplified way of looking at how the MVC pattern works and it works well because
63

64
00:05:14,720 --> 00:05:23,180
it separates out the entire large app into separate categories where we can have specialized skills.
64

65
00:05:23,180 --> 00:05:26,420
So you'll have a department for welding,
65

66
00:05:26,420 --> 00:05:32,720
you'll have a department for laser cutting and this way everybody knows what they're doing and they
66

67
00:05:32,720 --> 00:05:35,120
don't tread on each other's toes.
67

68
00:05:35,150 --> 00:05:41,510
Now when we think about Flutter though, a really important thing to consider is the difference between
68

69
00:05:41,510 --> 00:05:50,240
imperative programming and reactive programming. Because traditionally native apps are built with imperative
69

70
00:05:50,270 --> 00:05:51,110
code.
70

71
00:05:51,110 --> 00:05:56,050
So it's kind of like you have a boss who tells you what to do.
71

72
00:05:56,240 --> 00:06:00,920
'Today you have to', I don't know, 'write this report and you have to write it now.
72

73
00:06:00,920 --> 00:06:02,080
Where's that report?
73

74
00:06:02,090 --> 00:06:03,440
What's happening?'
74

75
00:06:03,440 --> 00:06:06,590
But there's also the other alternative right?
75

76
00:06:06,670 --> 00:06:11,810
It's kind of utopia idea of, what if the employee just knew what they had to do?
76

77
00:06:11,960 --> 00:06:17,780
What if they had a list of tasks or they had an in-and-out tray and they would just get on with their
77

78
00:06:17,780 --> 00:06:21,970
work not being commanded by any particular middle manager,
78

79
00:06:21,980 --> 00:06:23,990
wouldn't life be so much better?
79

80
00:06:23,990 --> 00:06:27,900
Well that's kind of how reactive programming is supposed to work.
80

81
00:06:28,070 --> 00:06:33,190
And when we think about it in that way, it's kind of like we have these objects right?
81

82
00:06:33,200 --> 00:06:41,500
Say a list view or a button and we tell them in the beginning as soon as we create them,
82

83
00:06:41,510 --> 00:06:44,360
well this is your role in life. You
83

84
00:06:44,360 --> 00:06:51,290
the button is meant to respond to touch events and when a user taps on you well this is the state that
84

85
00:06:51,290 --> 00:06:58,520
you're going to change. Or in another case where you have a text widget, well the text widget is maybe
85

86
00:06:58,550 --> 00:07:04,550
meant to track the state of a particular variable. When that variable changes, then the text widget has
86

87
00:07:04,550 --> 00:07:06,120
to redraw right?
87

88
00:07:06,200 --> 00:07:07,330
Reactive.
88

89
00:07:07,490 --> 00:07:14,120
So in this case then instead of thinking about design patterns, we're thinking more about state management.
89

90
00:07:14,120 --> 00:07:20,470
How do we manage the state of the app so that we can increase the complexity of our app
90

91
00:07:20,540 --> 00:07:28,880
meanwhile still keeping it modular and easy to manage? Now an important thing I should say before we
91

92
00:07:28,880 --> 00:07:36,500
dive in to design pattern for Flutter or architecture for Flutter or state management if you will, is
92

93
00:07:36,500 --> 00:07:44,840
that different developers have different ideas about what is the best way of managing states and design
93

94
00:07:44,840 --> 00:07:50,100
patterns and they feel really strongly about these things.
94

95
00:07:50,150 --> 00:07:58,790
So whenever you come across any sort of blog article or videos about state management and design patterns,
95

96
00:07:59,420 --> 00:08:06,860
you'll see people usually having a very strong idea about what everyone should use.
96

97
00:08:06,860 --> 00:08:14,720
And the important thing to remember is that there is no one way that covers all that should be used
97

98
00:08:14,900 --> 00:08:16,450
every single time.
98

99
00:08:16,730 --> 00:08:22,910
Because even if we're just talking about Flutter, there's a lot of ways that you could manage the state.
99

100
00:08:23,450 --> 00:08:31,520
And you might hear these words brandished about a Scoped Model, Provider, BloC, Redux, MobX and similar
100

101
00:08:31,520 --> 00:08:37,550
to how people who start learning programming always ask well what's the best programming language to
101

102
00:08:37,550 --> 00:08:38,740
learn?
102

103
00:08:38,780 --> 00:08:42,350
Well there is actually no best programming language.
103

104
00:08:42,350 --> 00:08:49,190
It's kind of like if you learn how to use a hammer, well a hammer is a great tool but you can't do everything
104

105
00:08:49,190 --> 00:08:50,380
with a hammer right?
105

106
00:08:50,390 --> 00:08:57,230
You can try and you know cut a piece of wood with a hammer, but the end result is not going to look very
106

107
00:08:57,230 --> 00:08:58,030
pretty.
107

108
00:08:58,220 --> 00:09:02,210
And that's the same for programming languages and state management.
108

109
00:09:02,270 --> 00:09:08,870
So at the end of the day, these different ways of managing state are just simply architectural blueprints
109

110
00:09:09,410 --> 00:09:15,790
and there can be different architectures depending on say your requirements.
110

111
00:09:15,890 --> 00:09:23,330
So you might have certain design patterns or state management methods that are better because they
111

112
00:09:23,390 --> 00:09:26,230
fulfill a certain requirement of your app.
112

113
00:09:26,570 --> 00:09:34,190
So similar to architectural patterns for creating an igloo versus a tree house versus a house that needs
113

114
00:09:34,190 --> 00:09:39,020
to be on top of water, based on the different need you have
114

115
00:09:39,020 --> 00:09:44,120
you might use a different architectural pattern to build your house
115

116
00:09:44,120 --> 00:09:44,860
right?
116

117
00:09:44,870 --> 00:09:50,780
Something that needs to be elevated in a tree is going to have very different architectural requirements
117

118
00:09:51,230 --> 00:09:54,510
versus something that needs to stand on a lake.
118

119
00:09:54,560 --> 00:10:00,320
Now there's also other things that you might think about when choosing your architectural pattern and
119

120
00:10:00,320 --> 00:10:01,670
that's style based.
120

121
00:10:02,030 --> 00:10:08,840
And this is probably the biggest source of contention because just as, you know, we might all have different
121

122
00:10:08,840 --> 00:10:12,620
opinions about which of these houses look the best,
122

123
00:10:12,980 --> 00:10:21,170
similarly programmers will have different opinions based on what is the best style for creating an architecture
123

124
00:10:21,230 --> 00:10:23,860
for an app or for a program.
124

125
00:10:23,870 --> 00:10:30,890
And the final thing to remember is that there's also the maturity side to consider because Flutter is
125

126
00:10:30,890 --> 00:10:34,490
still quite new and it's growing and evolving.
126

127
00:10:34,490 --> 00:10:39,750
People are still working out what is the best method for managing state.
127

128
00:10:39,770 --> 00:10:47,150
So for example if you look at the Google IO talk this year in Flutter state management, for most people
128

129
00:10:47,240 --> 00:10:54,650
they recommend to use the provider package. And in order to understand how the provider package works
129

130
00:10:54,920 --> 00:10:59,260
at least the theory of it, head over to the next lesson where we're going to talk more on that.
