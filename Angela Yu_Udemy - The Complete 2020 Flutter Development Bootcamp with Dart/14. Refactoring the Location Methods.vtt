WEBVTT
0
1
00:00:00.240 --> 00:00:07.710
So in the last lesson we updated our location screen so that it will display the actual data that we're
1

2
00:00:07.710 --> 00:00:09.810
getting back from Open Weather Map.
2

3
00:00:09.810 --> 00:00:16.080
That includes the temperature, the current weather condition and also a message about that city that
3

4
00:00:16.080 --> 00:00:23.040
we're fetching the data from. Now in this lesson, I want you to notice that up at the top left corner
4

5
00:00:23.190 --> 00:00:26.190
we've got this little location icon here.
5

6
00:00:26.430 --> 00:00:33.120
And the idea is that if we decide to walk around or we go somewhere else and we want to check out the
6

7
00:00:33.120 --> 00:00:40.920
weather for the current location, then we should be able to trigger a new location request and fetch
7

8
00:00:40.950 --> 00:00:43.320
the weather for that location.
8

9
00:00:43.320 --> 00:00:51.240
But at the moment, all of our location work is done inside our loading screen. And that doesn't really
9

10
00:00:51.240 --> 00:00:52.140
make much sense.
10

11
00:00:52.140 --> 00:00:58.790
We want to be able to call this from anywhere within our app, not just keep it inside loading screen.
11

12
00:00:58.860 --> 00:01:08.730
So let's do some refactoring and let's move all of this into its own file. Because all of this is all
12

13
00:01:08.730 --> 00:01:10.940
related to getting weather data.
13

14
00:01:10.950 --> 00:01:12.840
Let's move it into our weather
14

15
00:01:12.840 --> 00:01:14.130
.dart.
15

16
00:01:14.130 --> 00:01:20.790
So theoretically, I should be able to remove the location.dart and networking.dart and put it into
16

17
00:01:20.850 --> 00:01:23.690
our weather.dart file instead.
17

18
00:01:23.700 --> 00:01:29.520
So right at the top, it's going to go here. And now I should be able to refactor my code so that I get
18

19
00:01:29.520 --> 00:01:37.000
rid of any of the errors. I'm going to remove the first part of get location data where I get the actual
19

20
00:01:37.000 --> 00:01:43.510
current location and I use the network helper to get the weather data and then I have this weather data
20

21
00:01:43.540 --> 00:01:47.490
object to be able to send to any screen that needs it.
21

22
00:01:47.500 --> 00:01:49.800
So let's cut that from that method.
22

23
00:01:50.020 --> 00:01:57.910
And inside our weather.dart, let's create a new method inside this class. And I'm going to call it
23

24
00:01:58.060 --> 00:02:06.790
getLocationWeather. And I'm going to paste what I copied over into here.
24

25
00:02:07.150 --> 00:02:11.450
So the first thing to notice is that we no longer know what the API key is.
25

26
00:02:11.590 --> 00:02:13.360
And that's because that's right up here
26

27
00:02:13.360 --> 00:02:17.810
so let's take that along with us and put it into our weather
27

28
00:02:17.860 --> 00:02:24.890
.dart file where it makes more sense that we have an API key for fetching the weather. Now the other
28

29
00:02:24.890 --> 00:02:31.220
thing I want to reformat is this long URL. So everything before that first parameter, everything before
29

30
00:02:31.220 --> 00:02:32.280
the question mark
30

31
00:02:32.450 --> 00:02:38.450
I'm going to cut out and I'm going to add it into a constant and I'm gonna call it the openWeather
31

32
00:02:38.540 --> 00:02:39.680
Map
32

33
00:02:39.680 --> 00:02:45.740
URL and I'm gonna put it in here as a separate string.
33

34
00:02:45.740 --> 00:02:53.420
So now in my networkHelper, I'm gonna pass along the value of that Open Weather Map URL, and then
34

35
00:02:53.420 --> 00:02:59.090
we're going to add our first parameter, the latitude and then the longitude and then the app ID and
35

36
00:02:59.090 --> 00:03:02.240
finally the units we chose for the results is in metric.
36

37
00:03:02.990 --> 00:03:06.980
So now the only errors I have are regarding the await
37

38
00:03:07.250 --> 00:03:14.180
and it's because we have to mark this method as async to be able to use await on all of these methods.
38

39
00:03:15.440 --> 00:03:19.850
And finally at the very end, once I've actually gotten my weather data,
39

40
00:03:20.090 --> 00:03:24.330
I want to be able to output it as a result of this method.
40

41
00:03:24.350 --> 00:03:28.730
So at the very end, I'm going to return the weather data
41

42
00:03:32.490 --> 00:03:39.630
and because weather data is going to depend on a number of asynchronous methods, then this method also
42

43
00:03:39.630 --> 00:03:49.470
has to be marked to return a future and the data type of the future is going to be of the same type
43

44
00:03:49.530 --> 00:03:51.840
as the weather data which is dynamic.
44

45
00:03:51.840 --> 00:04:00.840
So it's going to be a future dynamic object. And now we have a separate method inside our WeatherModel
45

46
00:04:01.080 --> 00:04:05.540
that deals with getting the weather for a particular location.
46

47
00:04:05.790 --> 00:04:13.880
And when we call this method, we can get the weather data as a future output.
47

48
00:04:14.100 --> 00:04:20.100
So now let's go back to our loading screen and make sure that we can still get access to the weather
48

49
00:04:20.100 --> 00:04:21.290
data.
49

50
00:04:21.540 --> 00:04:24.920
So inside here, we're going to create a new weather data model.
50

51
00:04:24.930 --> 00:04:33.300
So we're going to have to import that file, the services/weather.dart and we're going to create
51

52
00:04:33.330 --> 00:04:42.300
a new weather model which is called weatherModel equals WeatherModel and then we're going to use this
52

53
00:04:42.390 --> 00:04:51.570
weather model to get the location weather. And the output of this method is gonna be saved in a variable
53

54
00:04:51.660 --> 00:05:00.360
and we'll call it weatherData. And then that weather data is passed over to the location screen
54

55
00:05:00.360 --> 00:05:03.220
when we initialize it through this line of code.
55

56
00:05:03.240 --> 00:05:09.630
Now if all of this is a bit too wordy for you, you can also simply just initialize the weather model
56

57
00:05:09.650 --> 00:05:15.950
in line. So we can cut that out and paste it in here because we're only really going to use it once here.
57

58
00:05:18.020 --> 00:05:24.830
And finally we just have to make sure that we mark this method with await because we know that get
58

59
00:05:24.830 --> 00:05:28.430
location weather returns a future,
59

60
00:05:28.430 --> 00:05:28.730
right?
60

61
00:05:28.730 --> 00:05:31.320
So this could complete at any time.
61

62
00:05:31.490 --> 00:05:38.000
But we need to use the result of this inside weather data because we're going to pass it over to the
62

63
00:05:38.000 --> 00:05:39.450
location screen.
63

64
00:05:39.500 --> 00:05:45.220
So unless this has a value, then this is not going to work.
64

65
00:05:45.470 --> 00:05:53.270
Now finally when we go back to our location screen and we find our flat button which has the location
65

66
00:05:53.360 --> 00:05:54.260
icon,
66

67
00:05:54.260 --> 00:05:56.610
so that's this one right here,
67

68
00:05:56.750 --> 00:06:04.850
when it gets pressed, we should also trigger a request to get the current weather for the current location.
68

69
00:06:04.930 --> 00:06:13.340
So inside here, we're also going to create a new variable that is a weatherData object and we're going
69

70
00:06:13.340 --> 00:06:21.140
to call that get location weather from the location screen also. Because it's now in a separate file
70

71
00:06:21.470 --> 00:06:22.760
and it's been modularised.
71

72
00:06:22.760 --> 00:06:27.290
We can use it in our loading screen and we can use it in our location screen.
72

73
00:06:27.770 --> 00:06:33.080
So here we already have a instance of our weather model right up here.
73

74
00:06:33.080 --> 00:06:37.810
We called it weather. So we can tap into it over here without having to reinitialize it.
74

75
00:06:38.090 --> 00:06:45.950
So we'll say weather.getLocationWeather and the result is going to be saved inside a weather data
75

76
00:06:45.980 --> 00:06:54.600
object. And then we're again going to call updateUI and we're going to pass in the weather data from
76

77
00:06:54.720 --> 00:06:56.160
this call.
77

78
00:06:56.190 --> 00:07:01.770
Now remember that get location weather actually returns a future.
78

79
00:07:01.770 --> 00:07:08.580
So if we need to use this weather data in the next line of code, we need a guarantee that this is not
79

80
00:07:08.580 --> 00:07:09.270
null.
80

81
00:07:09.300 --> 00:07:15.360
So we have to make sure that this has completed before we go on to the next line, which means we again
81

82
00:07:15.390 --> 00:07:17.170
need that await keyword.
82

83
00:07:17.310 --> 00:07:24.150
But we can't use the await keyword unless we mark the function with async, and we can do that in the
83

84
00:07:24.170 --> 00:07:30.000
callback in the same way that we've done for all of our other places such as our other functions and
84

85
00:07:30.000 --> 00:07:37.720
methods. So now let's stop our app and run it from scratch. And I'm gonna start off by running it on the
85

86
00:07:37.720 --> 00:07:42.430
iOS simulator. And I'm going to show you how you can change the location.
86

87
00:07:42.430 --> 00:07:49.480
Currently, my location is set to the Apple headquarters which is in Cupertino. And that's why I'm fetching
87

88
00:07:49.480 --> 00:07:51.690
the weather for Cupertino.
88

89
00:07:51.940 --> 00:07:58.060
But also while your simulator is open in the foreground and you see simulator right here, you go into
89

90
00:07:58.060 --> 00:08:02.500
debug, location and select custom location.
90

91
00:08:02.530 --> 00:08:09.640
So in here you can add a custom latitude and longitude, and I've put one here for London.
91

92
00:08:09.670 --> 00:08:15.890
So now if I select OK, the location is now set to that new custom location.
92

93
00:08:16.090 --> 00:08:23.140
But there's a weird quirk you might expect that if we click on this button, we should be getting some
93

94
00:08:23.290 --> 00:08:30.160
updated weather data. And that would be entirely the case if you're running this on a physical iPhone
94

95
00:08:30.160 --> 00:08:30.720
device.
95

96
00:08:31.030 --> 00:08:33.460
But the iOS simulator is not so clever.
96

97
00:08:33.760 --> 00:08:41.380
But there's a way of forcing it to update its device location and this is what you have to do even if
97

98
00:08:41.380 --> 00:08:44.680
you're developing natively on iOS.
98

99
00:08:44.710 --> 00:08:51.010
The trick is to go into the home screen and go into Maps. And here,
99

100
00:08:51.040 --> 00:08:56.440
if you select this location button where you locate yourself,
100

101
00:08:56.470 --> 00:08:58.530
so we're currently in Holland Park
101

102
00:08:58.540 --> 00:09:08.290
based on that custom location I added in here, and now if you go back so exit the Maps app and go back
102

103
00:09:08.320 --> 00:09:15.610
to our weather app and click on this icon again, you can see it now reads from that custom location. And
103

104
00:09:15.610 --> 00:09:21.190
it's telling me to bring a coat just in case in Kensington and it's about 10 degrees and raining, which
104

105
00:09:21.190 --> 00:09:28.080
sounds a lot like London. If we run this on the Android emulator there's a similar case.
105

106
00:09:28.080 --> 00:09:33.980
So it usually starts out being set to Mountain View by default, which is where Google's home is.
106

107
00:09:34.530 --> 00:09:41.550
And if you want to change the location, you can hit these three dots and change the coordinates here.
107

108
00:09:42.660 --> 00:09:50.220
So let's go ahead and change that to 51.5 and maybe -0.2 and let's
108

109
00:09:50.220 --> 00:09:55.200
hit send and you'll do just the same thing happens on many Android emulators as well.
109

110
00:09:55.260 --> 00:10:00.620
When you click on the location button, it won't actually update the weather for the current location.
110

111
00:10:00.810 --> 00:10:04.040
But if you go into the Google Maps app,
111

112
00:10:04.050 --> 00:10:11.610
so if you drag this up and open up the Google Maps and click on locate, it will trigger the location
112

113
00:10:11.670 --> 00:10:18.240
of the device to update to the one that we're specifying for the emulator in here.
113

114
00:10:18.600 --> 00:10:27.330
And now if we head back into our app Clima and we go ahead and click on this button again, then you
114

115
00:10:27.330 --> 00:10:34.520
can see now it registers that we're in London and using these updated latitude and longitude.
115

116
00:10:34.530 --> 00:10:38.720
Now as I said before, this doesn't happen on a physical device.
116

117
00:10:38.820 --> 00:10:46.740
If you run the app using the code that we have on a Android or an iOS device and you walk far enough
117

118
00:10:46.830 --> 00:10:53.180
to register in a new area, then once you hit that button it should update automatically.
118

119
00:10:53.310 --> 00:10:58.530
But it's just that the emulators have certain quirks and we can work around it when we're testing it
119

120
00:10:58.740 --> 00:11:00.570
inside the emulators.
120

121
00:11:00.570 --> 00:11:05.130
But if you're testing on a real device, then you don't have to worry about any of this.
121

122
00:11:05.130 --> 00:11:11.790
Now this is also a good time to thoroughly test your apps both on iOS and Android, and also on physical
122

123
00:11:11.790 --> 00:11:12.320
devices.
123

124
00:11:12.330 --> 00:11:18.660
if you have one. And if you test it thoroughly, you might realize that this certain edge cases which will
124

125
00:11:18.660 --> 00:11:20.250
crash our app.
125

126
00:11:20.280 --> 00:11:29.070
So for example, if I go into my settings for my app in the Android emulator and I search for the location
126

127
00:11:29.070 --> 00:11:34.520
settings and I simply go ahead and just switch off location.
127

128
00:11:34.890 --> 00:11:40.080
And now if I try to run my app on a device that has its location disabled,
128

129
00:11:40.230 --> 00:11:41.930
this is what will happen.
129

130
00:11:42.150 --> 00:11:48.990
My app crashes because my widgets don't know what to display because all the information that they are
130

131
00:11:49.050 --> 00:11:55.650
asked to display, for example the temperature or the weather icon, well they all come from the weather
131

132
00:11:55.650 --> 00:12:02.670
data. And the weather data at the moment is equal to null, because there is no location for a device that
132

133
00:12:02.670 --> 00:12:04.640
has its location switched off.
133

134
00:12:04.650 --> 00:12:10.260
So we're trying to get weather data for a location that doesn't exist, then we're simply getting a null
134

135
00:12:10.260 --> 00:12:12.510
value for our weather data.
135

136
00:12:12.510 --> 00:12:20.580
So how can we catch this and prevent our app from crashing? Well inside here where we start using our
136

137
00:12:20.580 --> 00:12:24.320
weather data to supply our widgets with something to display,
137

138
00:12:24.690 --> 00:12:33.690
we can check to see if the weather data is equal to null. And if that is the case so it could be caused
138

139
00:12:33.690 --> 00:12:40.620
by many things such as for example if the Open Weather Map the server was down and we weren't getting
139

140
00:12:40.620 --> 00:12:48.600
any valid results back or if our latitude and longitude are invalid or if we accidentally put in the
140

141
00:12:48.600 --> 00:12:56.430
wrong API key or if the internet was down, many many reasons for why we might be getting a null weather
141

142
00:12:56.430 --> 00:12:56.910
data.
142

143
00:12:57.360 --> 00:13:03.570
And the point where we need to address this is right before we start inserting values into our widgets
143

144
00:13:03.870 --> 00:13:09.210
because that is going to mess up our screen. So we can either add a whole bunch of try catches in
144

145
00:13:09.240 --> 00:13:14.700
all of the places that can fail and that's certainly one way of approaching it. Another way is simply to
145

146
00:13:14.700 --> 00:13:21.720
check right before we use this weather data where we use it inside our widget, to check if it's actually
146

147
00:13:21.720 --> 00:13:23.310
equal to null.
147

148
00:13:23.370 --> 00:13:29.770
And in this case then there is no weather data for various reasons and we can tell the user that there
148

149
00:13:29.770 --> 00:13:30.450
is an issue.
149

150
00:13:30.570 --> 00:13:37.470
So here if the weather data is null, then we can set the temperature to zero
150

151
00:13:37.920 --> 00:13:48.340
and the weather icon to tell the user that there is an error. Set the weather message to say 'unable to
151

152
00:13:48.370 --> 00:13:58.480
get weather data' and then finally for the city name, we're going to set that to a empty string.
152

153
00:13:58.480 --> 00:14:05.530
Now the final thing we need to do is to add a return statement at the end of this if statement. And this
153

154
00:14:05.530 --> 00:14:12.580
tells our app that if the weather data is null, do all of these things but then exit this function or this
154

155
00:14:12.580 --> 00:14:20.170
method. And you can use this return keyword in any of Dart's functions and methods, even if it returns
155

156
00:14:20.170 --> 00:14:20.840
void.
156

157
00:14:21.040 --> 00:14:28.390
And what this does is it will end our method prematurely and prevent it from continuing on to the next
157

158
00:14:28.480 --> 00:14:32.130
lines, which is what we know will crash our app.
158

159
00:14:32.320 --> 00:14:38.980
Now let's run our app again, and under the same conditions where location is still disabled.
159

160
00:14:38.980 --> 00:14:45.010
What our app will now do is it will tell the user that there's an error and it's unable to get the weather
160

161
00:14:45.010 --> 00:14:46.390
data.
161

162
00:14:46.390 --> 00:14:51.610
Now you can make this a little bit more sophisticated by getting rid of that in keyword which comes
162

163
00:14:51.610 --> 00:14:53.100
from this text,
163

164
00:14:53.110 --> 00:14:59.770
so you could form a custom variable for it. Or you could add a pop up or an alert that gives the user
164

165
00:14:59.770 --> 00:15:02.680
this information and keep the screen blank.
165

166
00:15:02.800 --> 00:15:08.110
But there's many ways of handling situations where the weather data might be null.
166

167
00:15:08.290 --> 00:15:12.760
So test your app thoroughly and see if you can address this bug.
