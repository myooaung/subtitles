WEBVTT
0
1
00:00:00.120 --> 00:00:07.560
Now previously we implemented the log in and registration functionality into our app and we now have
1

2
00:00:07.590 --> 00:00:09.890
a log out and log in.
2

3
00:00:10.020 --> 00:00:15.620
But notice when I click on log in, everything kind of just stops and nothing's really happening.
3

4
00:00:15.660 --> 00:00:20.970
Even though we know as the developers, there's a lot of heavy lifting in the background where we're communicating
4

5
00:00:20.970 --> 00:00:26.130
with Firebase's servers to try and validate our user and all of that, but the user doesn't know that
5

6
00:00:26.130 --> 00:00:28.390
it just thinks that it's not really moving.
6

7
00:00:28.410 --> 00:00:34.680
So let's go ahead and add a loading indicator to show the user that something's happening and that it's
7

8
00:00:34.680 --> 00:00:36.390
not stuck.
8

9
00:00:36.390 --> 00:00:44.220
And the quickest way to do that is to simply add a modal progress HUD package. And we can grab it using
9

10
00:00:44.430 --> 00:00:52.850
it as a dependency and add it to our pubspec.yaml file right below all our other dependencies and
10

11
00:00:52.860 --> 00:00:57.800
let's hit up package.get to grab it. Now
11

12
00:00:57.830 --> 00:01:03.010
once that's done, we should be able to import it into our registration screen.
12

13
00:01:03.080 --> 00:01:12.080
So it was called modal_progress_hud.dart and the way that it tells us to use it is we can simply wrap
13

14
00:01:12.080 --> 00:01:19.790
it around everything that's inside our body of our scaffold and we can use this property code insync
14

15
00:01:19.910 --> 00:01:24.930
Call to either let it spin or make it stop and disappear.
15

16
00:01:25.340 --> 00:01:31.970
So when this property is equal to true, then it will spin and when it's equal to false then it will be
16

17
00:01:31.970 --> 00:01:38.190
dismissed. In order to figure out when are progress spin should spin
17

18
00:01:38.210 --> 00:01:45.980
we have to create a boolean which I'll call showSpinner. And I'm going to start it out by making it
18

19
00:01:46.010 --> 00:01:50.370
equal to false because it shouldn't be spinning right in the beginning right?
19

20
00:01:50.510 --> 00:01:59.210
And then we're going to wrap everything inside the body of our scaffold with that modal progress HUD
20

21
00:01:59.300 --> 00:02:05.690
widget. And then we're going to add that required parameter which is the insyncCall
21

22
00:02:06.350 --> 00:02:10.520
and this is going to be set equal to the value of showSpinner.
22

23
00:02:10.940 --> 00:02:18.710
So it starts out being false but at some point namely when the user presses on the register button, then
23

24
00:02:18.710 --> 00:02:21.310
we're going to get it to start spinning.
24

25
00:02:21.470 --> 00:02:23.240
So we have to set it to true.
25

26
00:02:23.540 --> 00:02:30.590
And because everything in Flutter is reactive, we have to use a set state and inside the set state we'll
26

27
00:02:30.590 --> 00:02:33.080
set the showSpinner to true.
27

28
00:02:33.740 --> 00:02:39.000
So we call our build method again and we start spinning our spinner.
28

29
00:02:39.270 --> 00:02:47.070
Now if we head back to our registration screen, then you can see that as soon as I click on the button,
29

30
00:02:47.190 --> 00:02:51.050
it's going to start spinning and it's not really going to stop.
30

31
00:02:51.060 --> 00:02:53.580
So we have to tell it when to stop.
31

32
00:02:53.580 --> 00:03:00.620
Now it should probably stop once we've actually gotten back the registered user, so probably around here.
32

33
00:03:00.750 --> 00:03:08.950
We can use another set state and inside it we can set the showSpinner now to false.
33

34
00:03:08.970 --> 00:03:17.040
So now if we hit save and we go back to our previous screen and we click on register and let's register
34

35
00:03:17.040 --> 00:03:24.800
a new user right? Let's call him jack@email.com and we're going to add our trustee
35

36
00:03:24.810 --> 00:03:29.340
123456 as the password and click register.
36

37
00:03:29.340 --> 00:03:35.080
So we see that spinner for the amount of time that it takes for authentication to go through.
37

38
00:03:35.190 --> 00:03:40.780
And once it's done, it gets dismissed and we get the next screen pushed onto the stack.
38

39
00:03:40.860 --> 00:03:43.370
So that's a far better user experience
39

40
00:03:43.380 --> 00:03:49.500
wouldn't you agree? As a challenge I want you to add the spinner for the login screen so that we get the
40

41
00:03:49.500 --> 00:03:51.530
same experience over there as well.
41

42
00:03:51.560 --> 00:03:56.650
So pause the video and try and give that a go. All right.
42

43
00:03:56.680 --> 00:04:05.060
So we of course start out by importing our modal progress HUD and once we've done that we create a boolean
43

44
00:04:05.060 --> 00:04:12.790
value that's going to hold whether if we should show spinner and we again start it off as false.
44

45
00:04:12.980 --> 00:04:20.450
And now we're going to wrap everything in our body inside the modal progress HUD and we're going to
45

46
00:04:20.450 --> 00:04:29.120
add that property which is code inAsyncCall and we're going to set it to equal the showSpinner property,
46

47
00:04:29.220 --> 00:04:33.590
so it starts off being false. And again in our button
47

48
00:04:33.590 --> 00:04:39.270
as soon as we press on it, we're going to use a set state to set the showSpinner
48

49
00:04:39.320 --> 00:04:41.510
now too true.
49

50
00:04:41.510 --> 00:04:44.470
And we're going to set it back to false
50

51
00:04:44.600 --> 00:04:51.140
once we've actually gotten back a user and we've successfully logged them in. Now
51

52
00:04:51.170 --> 00:04:51.830
that's it.
52

53
00:04:51.830 --> 00:05:00.410
So we've got a spinner for our log in screen as well as are registration screen. And we can test it and
53

54
00:05:00.470 --> 00:05:08.160
see it in action by logging in with our previous registered users. In the next lesson,
54

55
00:05:08.190 --> 00:05:16.110
we're going to actually start writing code for our chat screen and we're going to be saving the data
55

56
00:05:16.140 --> 00:05:21.210
that the user types as their message into our cloud Firestore.
56

57
00:05:21.630 --> 00:05:25.010
So all of that is coming up and I'll see you on the next lesson.
