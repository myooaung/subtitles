0
1
00:00:00,300 --> 00:00:08,340
So in our app at the moment, we're able to get the temperature from the weather data. But all the rest
1

2
00:00:08,340 --> 00:00:12,630
of it is actually still just hard coded text.
2

3
00:00:12,630 --> 00:00:20,100
If we take a look at our weather.dart file, you can see that in here we've included some code for
3

4
00:00:20,100 --> 00:00:25,950
you just so that you don't have to type out all of these condition checks and add a whole bunch of else ifs
4

5
00:00:26,010 --> 00:00:33,000
one by one. What we've got here is we've created a class called WeatherModel and it has two methods
5

6
00:00:33,060 --> 00:00:33,840
at the moment.
6

7
00:00:33,840 --> 00:00:39,300
One which is called getWeatherIcon which takes the condition as an input
7

8
00:00:39,300 --> 00:00:45,090
so that's going to be an integer. And we're going to take that condition and check it against the whole
8

9
00:00:45,090 --> 00:00:46,700
bunch of things.
9

10
00:00:46,740 --> 00:00:52,620
So if we have a look at the API documentation for Open Weather Map, you can see that there's a section
10

11
00:00:52,620 --> 00:00:58,320
on list of condition codes. And it tells you that the condition code that you get back through that weather
11

12
00:00:58,320 --> 00:01:04,970
ID can be matched against a table to determine what the weather condition is.
12

13
00:01:04,980 --> 00:01:11,550
So say if we got a 300 code, then that means light intensity drizzle and then as that number
13

14
00:01:11,550 --> 00:01:15,500
goes up, the drizzle gets heavier and heavier until we get to shower
14

15
00:01:15,570 --> 00:01:25,680
and then finally rain in the 500 range. So we've looked at that table and compiled a set of if else statements
15

16
00:01:25,950 --> 00:01:32,190
that checks against that conditional code to return a corresponding emoji, which is what we're going
16

17
00:01:32,190 --> 00:01:38,770
to display inside this text widget instead of that static sunshine emoji.
17

18
00:01:39,230 --> 00:01:47,000
And there's also a getMessage method which takes temperature as an input, checks against that temperature
18

19
00:01:47,450 --> 00:01:49,490
and returns a message.
19

20
00:01:49,490 --> 00:01:55,730
So for example if the temperature is really warm above 25 degrees Celsius, we'll return 'It's ice cream time'.
20

21
00:01:56,120 --> 00:02:02,630
Or if it's between 20 and 25, will say 'It's time for shorts and T-shirt'. And you can customize these messages
21

22
00:02:02,660 --> 00:02:07,940
if you wish or you could change these to Fahrenheit depending on what you prefer.
22

23
00:02:08,270 --> 00:02:13,940
But essentially, this one will give us a weather icon and this one will give us a message and they're
23

24
00:02:13,940 --> 00:02:16,850
both going to return Strings.
24

25
00:02:16,850 --> 00:02:22,820
So inside our location screen, let's tap into that file by importing our weather.dart file right
25

26
00:02:22,820 --> 00:02:23,380
at the top.
26

27
00:02:24,740 --> 00:02:29,020
So we're going to import and we're gonna start the path from the services folder.
27

28
00:02:29,120 --> 00:02:31,040
We're going to look for the weather
28

29
00:02:31,040 --> 00:02:38,240
.dart file. And again right up here just above where we've created our temperature condition and city
29

30
00:02:38,240 --> 00:02:39,710
name variables,
30

31
00:02:39,710 --> 00:02:45,080
we're going to create a new one which is going to be of type WeatherModel and I'm going to call it
31

32
00:02:45,080 --> 00:02:51,710
simply just the name weather and it's going to be equal to a new weatherModel object.
32

33
00:02:51,710 --> 00:03:01,040
Now we can use it inside our updateUI and we're going to pass over this condition and we're going to
33

34
00:03:01,040 --> 00:03:03,220
call that weather
34

35
00:03:03,290 --> 00:03:06,010
.getWeatherIcon method,
35

36
00:03:06,010 --> 00:03:08,660
we're gonna pass in this condition object.
36

37
00:03:09,260 --> 00:03:15,810
So now if we got back a condition of 300, then it's going to check against all of these if
37

38
00:03:16,020 --> 00:03:23,390
and else statements and it'll return the correct emoji depending on that number. The icon that we get back from
38

39
00:03:23,390 --> 00:03:28,980
this method is what we want to use inside our scaffold, inside our build method.
39

40
00:03:29,000 --> 00:03:35,780
So instead of saving a condition variable, I'm going to change that to a string type and I'm going to
40

41
00:03:35,780 --> 00:03:37,700
call it our weatherIcon.
41

42
00:03:37,760 --> 00:03:45,650
So now I can change condition to a variable that's only going to exist inside updateUI and then I'm
42

43
00:03:45,650 --> 00:03:52,530
going to save the result of this method call to our weatherIcon.
43

44
00:03:52,610 --> 00:04:01,060
So now we are creating a object that will only exist in here based on the weatherData.
44

45
00:04:01,070 --> 00:04:06,980
So we're pulling out that weather condition and then we're passing the result of that into getWeather
45

46
00:04:06,980 --> 00:04:09,020
Icon as the condition.
46

47
00:04:09,020 --> 00:04:15,770
Now if you really want to cut down on your code, you could potentially replace that with that, and that
47

48
00:04:15,770 --> 00:04:16,780
would still work.
48

49
00:04:16,880 --> 00:04:23,210
But I think this is a little bit more readable and I find it easier to understand what's going on just
49

50
00:04:23,210 --> 00:04:25,430
by splitting it into two lines,
50

51
00:04:25,430 --> 00:04:34,160
but it's up to you. So now that we've got this weather icon that's being stored in this variable, we can
51

52
00:04:34,160 --> 00:04:42,560
now use it inside our text widget down here. And we can replace that the sun emoji with our weatherIcon.
52

53
00:04:42,560 --> 00:04:46,370
Now emojis are processed exactly the same way as strings.
53

54
00:04:46,370 --> 00:04:52,420
So it's just as if we had a string and we can parse them around using that data type.
54

55
00:04:52,460 --> 00:05:00,980
Now here's a challenge for you. Use the weatherModel object to get the message parsing in the temperature
55

56
00:05:01,010 --> 00:05:03,680
that we get inside updateUI.
56

57
00:05:03,890 --> 00:05:09,830
So we know that we already get a temperature from our weatherData and we've already converted it to
57

58
00:05:09,830 --> 00:05:10,720
an integer.
58

59
00:05:10,820 --> 00:05:17,990
So it's now time to use this method to try and get back the message. And we're going to fill that message
59

60
00:05:18,110 --> 00:05:25,310
into here. And then the second part here is going to be the city name, and the city name of course comes
60

61
00:05:25,310 --> 00:05:27,040
from our weather data.
61

62
00:05:27,050 --> 00:05:29,640
So here is where it's going to come from.
62

63
00:05:29,780 --> 00:05:35,830
And in the end it should still read a message in a particular city name.
63

64
00:05:35,900 --> 00:05:42,120
So pause the video and see if you can complete this challenge.
64

65
00:05:42,390 --> 00:05:42,660
All right.
65

66
00:05:42,680 --> 00:05:46,860
So we've got temperature, weather icon and city name properties.
66

67
00:05:46,860 --> 00:05:50,880
So we now need to add another one which is called weather message
67

68
00:05:54,000 --> 00:06:01,710
and we're going to work out the weather message by using our weather data model,
68

69
00:06:01,710 --> 00:06:04,280
so our weather object, and we're going to call
69

70
00:06:04,290 --> 00:06:09,670
get message. And then we're going to pass in the temperature which is going to be this one because it
70

71
00:06:09,670 --> 00:06:15,260
is expecting an integer, so it will pass in that as the input.
71

72
00:06:15,420 --> 00:06:22,260
And now our weather message can be used inside here instead of this piece of text.
72

73
00:06:23,070 --> 00:06:29,490
Now notice how this piece of text has double quotes around it, even though normally we should be using
73

74
00:06:29,490 --> 00:06:30,660
single quotes.
74

75
00:06:30,900 --> 00:06:35,750
And the reason for this is because we have an apostrophe in the middle of the sentence.
75

76
00:06:35,790 --> 00:06:42,630
So even though Dart convention normally says that you should have single quotes around all of your text
76

77
00:06:43,140 --> 00:06:48,210
and whenever you have another single quote inside, you can escape it using the backslash.
77

78
00:06:48,210 --> 00:06:53,910
And we've seen this and done this quite a few times. Now in the wild, you might see people using this
78

79
00:06:54,060 --> 00:07:01,830
as a shorthand trick. If you enclose a string that contains a single quote within a double quote, then
79

80
00:07:01,830 --> 00:07:04,470
you won't actually have to escape that single quote.
80

81
00:07:04,680 --> 00:07:09,600
But now that we're going to use a variable, it no longer matters what we use in there.
81

82
00:07:09,600 --> 00:07:12,180
So let's change it back to the Dart
82

83
00:07:12,180 --> 00:07:18,720
default the single quote and we're going to replace this part of the message with our weather message
83

84
00:07:18,720 --> 00:07:19,230
property,
84

85
00:07:19,230 --> 00:07:24,960
so it's going to start out with that dollar sign. And then the second part is going to be from our city
85

86
00:07:24,960 --> 00:07:32,920
name. So we can replace that part with the city name property.
86

87
00:07:32,960 --> 00:07:37,790
So we're going to add another dollar sign, we're going to add a city name and you can keep the exclamation
87

88
00:07:37,790 --> 00:07:41,940
mark or take it out depending on how enthusiastic you feel.
88

89
00:07:41,960 --> 00:07:50,560
Now all we have to remember is that if we're using properties to update the state of our widgets, let's
89

90
00:07:50,570 --> 00:07:55,760
say that we've got some new weather data, then we have to remember that all widgets are depending on
90

91
00:07:56,000 --> 00:07:59,660
these properties to figure out what they need to display.
91

92
00:07:59,660 --> 00:08:06,680
So when this updates, if we want our widgets to reflect the update, we of course have to wrap it inside
92

93
00:08:06,920 --> 00:08:08,310
a set state.
93

94
00:08:08,360 --> 00:08:11,360
So let's go ahead and put that around
94

95
00:08:11,360 --> 00:08:20,750
all of those property changes. And now we can hit save and run our app.
95

96
00:08:20,940 --> 00:08:28,000
So now you can see that all the data that's onscreen is updated based on the live weather data.
96

97
00:08:28,020 --> 00:08:34,600
So at the moment in Cupertino as I'm recording this, it's 12 degrees centigrade and it's sunny.
97

98
00:08:34,740 --> 00:08:38,730
And the message is telling us to bring a jacket just in case in Cupertino.
