0
1
00:00:00,720 --> 00:00:08,190
So in previous lessons we've managed to lift the state of whether if our checkboxes checked and we're
1

2
00:00:08,190 --> 00:00:15,000
now able to make our checked off tasks reflect both in the text widget as well as the checkbox widget.
2

3
00:00:15,030 --> 00:00:16,170
So that's pretty neat.
3

4
00:00:16,560 --> 00:00:24,330
But at the moment even though we have our user interface for our Add task screen, it doesn't yet work.
4

5
00:00:24,360 --> 00:00:32,040
If I add something in here and I click add, well nothing happens and that is of course because in the onPressed
5

6
00:00:32,190 --> 00:00:38,420
of this flat button, there's actually currently no code other than a single comment.
6

7
00:00:38,520 --> 00:00:42,120
So let's go ahead and try to get this working.
7

8
00:00:42,300 --> 00:00:49,350
The first thing we have to do is we have to make our tasks more dynamic because at the moment we're
8

9
00:00:49,350 --> 00:00:54,280
essentially just generating three hard coded tasks.
9

10
00:00:54,450 --> 00:00:59,600
And they all say, 'This is a task'. Not very interesting for a to do list app.
10

11
00:01:00,030 --> 00:01:03,240
So how can we make it a little bit more dynamic?
11

12
00:01:03,660 --> 00:01:11,210
Well firstly let's go ahead and make our task list into a stateful widget so that we can update it's
12

13
00:01:11,220 --> 00:01:12,360
state.
13

14
00:01:12,480 --> 00:01:21,360
And what we want to be able to do is to have something that we can track and update so that we can update
14

15
00:01:21,360 --> 00:01:24,750
the state when that property changes.
15

16
00:01:24,750 --> 00:01:32,190
So we would want to create a list of task objects and we might call this list tasks.
16

17
00:01:32,410 --> 00:01:38,910
And it's going to be set to equal a whole list of tasks each with a property for the name of the task
17

18
00:01:39,030 --> 00:01:42,320
as well as whether if that task is completed.
18

19
00:01:42,390 --> 00:01:49,380
So let's go ahead and create a model folder in our lib, so let's go ahead and create a new package we'll
19

20
00:01:49,380 --> 00:01:58,800
call it models and then inside models, we're going to create a new Dart file called our task.dart.
20

21
00:01:58,800 --> 00:02:05,550
And now inside this new file, I'm going to create a brand new class which is going to be called task
21

22
00:02:05,880 --> 00:02:11,400
(singular) and this class is going to describe how every task will be.
22

23
00:02:11,820 --> 00:02:19,800
So it will have a string property which is going to be the name of the task and also it's going to have
23

24
00:02:19,920 --> 00:02:24,950
a boolean property which is going to be whether that task is done.
24

25
00:02:25,410 --> 00:02:33,750
And then when our Task object gets initialized, we need to pass over a name and whether if the property
25

26
00:02:33,840 --> 00:02:40,050
is done although by default pretty much all new tasks are not going to be done right?
26

27
00:02:40,050 --> 00:02:46,860
Otherwise why are we creating it? So we're gonna give it a default value by adding a equals sign and we can
27

28
00:02:46,860 --> 00:02:49,040
set that default value to false.
28

29
00:02:49,080 --> 00:02:54,830
So all tasks start out with the isDone property set to false.
29

30
00:02:55,020 --> 00:02:56,270
So far so good.
30

31
00:02:56,290 --> 00:03:06,690
Well we can also give our task class a method and this method simply toggles the done-ness of the taskc
31

32
00:03:06,720 --> 00:03:09,060
so we'll call it toggleDone.
32

33
00:03:09,060 --> 00:03:16,950
And in this case all it needs to do is to look inside the isDone property and set it to the opposite
33

34
00:03:17,130 --> 00:03:18,690
of what it currently is.
34

35
00:03:18,690 --> 00:03:24,420
So if this is equal to true then that exclamation mark is going to set it to the opposite of true which
35

36
00:03:24,420 --> 00:03:26,090
is going to be false.
36

37
00:03:26,130 --> 00:03:27,250
That's simple enough
37

38
00:03:27,270 --> 00:03:35,970
and now once we've got our task model where we can use it in our task list and we've already added a
38

39
00:03:35,970 --> 00:03:38,640
list of tasks as the date type
39

40
00:03:38,640 --> 00:03:46,320
but we need to import that models folder and the task.dart file in order for us to be able to recognize
40

41
00:03:46,410 --> 00:03:48,300
that Task object.
41

42
00:03:48,300 --> 00:03:53,360
So now that we've got a list of tasks and our screen is completely breaking,
42

43
00:03:53,360 --> 00:04:00,750
but let's not worry about that until we've completed our code inside here. And I'm going to create a
43

44
00:04:00,840 --> 00:04:03,240
list of new task objects.
44

45
00:04:03,630 --> 00:04:11,700
So it's just going to be empty for now and I'm going to go ahead and paste it just two more times. And
45

46
00:04:11,700 --> 00:04:15,020
each of these tasks is gonna get a name property.
46

47
00:04:15,180 --> 00:04:19,770
So let's say 'Buy milk' and then
47

48
00:04:22,290 --> 00:04:27,980
'Buy eggs' and 'Buy bread'.
48

49
00:04:28,050 --> 00:04:28,350
All right.
49

50
00:04:28,380 --> 00:04:31,860
So there's a whole bunch of foods that's going to be bought
50

51
00:04:31,860 --> 00:04:34,590
and now we have a list of tasks.
51

52
00:04:35,010 --> 00:04:41,980
But how do we convert this list of tasks into a list of task tiles?
52

53
00:04:42,000 --> 00:04:47,980
Well currently our task tiles are actually pretty intelligent things.
53

54
00:04:48,000 --> 00:04:53,950
They are stateful widgets because they have all of this functionality that's baked into it.
54

55
00:04:54,060 --> 00:04:56,160
But let's go ahead and make it simpler.
55

56
00:04:56,550 --> 00:05:03,600
I'm going to delete all of these lines of code and I'm gonna change it into a stateless widget. And
56

57
00:05:03,630 --> 00:05:10,470
now that we no longer have a stateful widget then we can't have properties that vary,
57

58
00:05:10,470 --> 00:05:14,040
so that's why I'm getting a little warning over here.
58

59
00:05:14,100 --> 00:05:22,380
So we have to convert this into a final property and also we can't set state any more because there
59

60
00:05:22,380 --> 00:05:24,120
is no state to set.
60

61
00:05:24,120 --> 00:05:30,300
So I'm going to go ahead and take out this callback and I'm just going to paste it here for now and
61

62
00:05:30,300 --> 00:05:38,310
then instead of our task checkbox, I'm actually going to bring my checkbox widget back up and to use
62

63
00:05:38,310 --> 00:05:42,970
it as the widget that's gonna be in the trailing part of my list tile.
63

64
00:05:43,020 --> 00:05:50,730
Now the reason is because now that we have two stateless widgets it doesn't really make sense to separate
64

65
00:05:50,730 --> 00:05:58,200
out the list tile and the checkbox because both the text widget and the checkbox is going to be rebuilt
65

66
00:05:58,590 --> 00:06:01,590
every time we change the list tile.
66

67
00:06:01,740 --> 00:06:05,560
So it makes sense to keep them together in this case.
67

68
00:06:05,730 --> 00:06:13,080
And besides, we've already used this example to learn all about how we can lift state up and pass callbacks
68

69
00:06:13,380 --> 00:06:17,600
in a simple way that it's easy to see on the same page.
69

70
00:06:17,640 --> 00:06:26,580
So I'm now ready to delete this task checkbox and I now only have a bog standard Flutter checkbox but
70

71
00:06:26,580 --> 00:06:32,580
still with the same active color and the value and an onChanged.
71

72
00:06:32,580 --> 00:06:40,830
So I'm going to comment out my code that used to be the callback and I'm also going to comment out the
72

73
00:06:40,880 --> 00:06:41,780
onChanged
73

74
00:06:41,820 --> 00:06:46,620
for now. We're going to come back and address that a little bit later on.
74

75
00:06:46,770 --> 00:06:57,140
But we are going to use the isChecked property as the value of my checkbox. And the isChecked property
75

76
00:06:57,170 --> 00:07:01,750
is going to be initialized when we create a new task tile.
76

77
00:07:01,820 --> 00:07:09,020
So we're going to pass in the this.isChecked and another one that we want to pass in is the title
77

78
00:07:09,410 --> 00:07:10,310
of the list.
78

79
00:07:10,340 --> 00:07:13,010
We don't want it to always say 'This is a task'
79

80
00:07:13,040 --> 00:07:13,720
right?
80

81
00:07:13,730 --> 00:07:22,100
So when we create a new list tile we want to be able to give it a task title to put in here and that
81

82
00:07:22,130 --> 00:07:27,640
is of course going to be another final String property called taskTitle
82

83
00:07:27,650 --> 00:07:33,440
and it's not going to have a value, similar to the isChecked property.
83

84
00:07:33,440 --> 00:07:39,680
So they're going to be both null to begin with but then they're going to be initialized when we create
84

85
00:07:39,680 --> 00:07:40,770
this class.
85

86
00:07:40,850 --> 00:07:46,450
So I'm going to add the this.taskTitle in here as well.
86

87
00:07:46,600 --> 00:07:54,460
So now we've converted our task tile to a pretty simple stateless widget and all it has to do is to
87

88
00:07:54,490 --> 00:08:02,500
rebuild a list tile whenever we update either the isChecked property or the task title property and
88

89
00:08:02,500 --> 00:08:07,800
that gets passed over when we construct our task tile.
89

90
00:08:07,810 --> 00:08:15,430
So now let's head back over to our task list and add in those arguments that are required here.
90

91
00:08:15,820 --> 00:08:20,680
So the task title will be taken from the task list,
91

92
00:08:20,680 --> 00:08:22,190
so I'll write tasks
92

93
00:08:22,340 --> 00:08:27,720
and I'm going to pull out the first item from my list using the square brackets zero and then I'm going
93

94
00:08:27,720 --> 00:08:36,130
to tap into the name property of the task object and I'm going to assign that to the task title of
94

95
00:08:36,130 --> 00:08:43,240
the task tile. The other one that I need to add is the isChecked property and this is again going to
95

96
00:08:43,240 --> 00:08:52,780
be the zeroth item from my task and this is going to be the isDone property. And then I'm simply for
96

97
00:08:52,780 --> 00:08:59,860
time sake going to copy this and paste it in all three task tiles but I'm of course going to update
97

98
00:08:59,860 --> 00:09:09,370
the index for getting hold of the next items in the task. So this task tile is going to display the information
98

99
00:09:09,700 --> 00:09:13,950
from the first or the zeroth item from my task list,
99

100
00:09:14,020 --> 00:09:20,500
this one is going to be from the first item and this one is going to be from the second item.
100

101
00:09:20,500 --> 00:09:30,160
Now if I go ahead and rerun my app, then you can see that it's carrying over the task names from my task
101

102
00:09:30,250 --> 00:09:31,150
list.
102

103
00:09:31,360 --> 00:09:39,640
But as you can imagine, if we had to add a new task tile to this list of widgets every single time we
103

104
00:09:39,640 --> 00:09:45,460
wanted to add a new task to our list view, you then that's quite a lot of effort
104

105
00:09:45,490 --> 00:09:47,200
and that's quite a lot of computation.
105

106
00:09:48,320 --> 00:09:56,660
So I want to talk about another way of constructing list views in this lesson namely the list view builder.
106

107
00:09:56,960 --> 00:10:01,490
Now we've already built list views and we kind of know how it works now.
107

108
00:10:01,640 --> 00:10:11,540
But this list view builder is really useful when you need to build a large number of children inside the
108

109
00:10:11,540 --> 00:10:17,960
list view because it's only going to be called for the ones which are actually visible.
109

110
00:10:17,990 --> 00:10:22,660
So it saves resources when you have a really large list.
110

111
00:10:22,670 --> 00:10:30,440
So if we had a to do list that was infinite or you know say it had 2,000 task tiles inside it,
111

112
00:10:30,830 --> 00:10:36,760
well then it would actually only use up resources to build the ones that are visible on screen
112

113
00:10:36,860 --> 00:10:41,220
saving a lot of computation and making our app a lot faster.
113

114
00:10:41,240 --> 00:10:44,560
So how does this list view builder work?
114

115
00:10:44,570 --> 00:10:52,880
Well the only required property in this builder is a indexed widget builder. Well an index widget builder
115

116
00:10:53,150 --> 00:11:02,840
is basically a callback that takes two inputs, the current build context and the index of the current
116

117
00:11:02,900 --> 00:11:04,340
item that's being built.
117

118
00:11:05,090 --> 00:11:08,570
So let me show you how this would work in our case. Here
118

119
00:11:08,570 --> 00:11:12,000
I've got a repetitive bunch of task tiles
119

120
00:11:12,170 --> 00:11:19,010
and so instead of using all of this code and hurting my fingers through typing all of it, I'm gonna go
120

121
00:11:19,010 --> 00:11:21,140
ahead and delete all of that.
121

122
00:11:21,140 --> 00:11:29,600
Instead I'm going to tap into your ListView.builder. And then I'm gonna pass in a callback into
122

123
00:11:29,600 --> 00:11:31,790
the item builder property.
123

124
00:11:31,820 --> 00:11:38,660
So I'm going to add in my parentheses and my curly braces as usual with my callbacks and then inside
124

125
00:11:38,660 --> 00:11:46,400
here it takes two inputs, the current build context and also the index.
125

126
00:11:46,790 --> 00:11:50,780
The context is going to be a build context.
126

127
00:11:51,170 --> 00:11:59,960
So just as we always have a build context in our build methods be it a stateful or stateless widget,
127

128
00:11:59,960 --> 00:12:07,910
this build context basically contains the information that tells the children widget where the parent
128

129
00:12:07,940 --> 00:12:10,710
is in the widget tree.
129

130
00:12:10,910 --> 00:12:19,970
So the task list is inside a container which is inside an expanded widget which in turn is inside its
130

131
00:12:20,060 --> 00:12:29,210
own column widget and then it's in the scaffold etc. So the information of where that widget lives is
131

132
00:12:29,270 --> 00:12:37,820
in that build context property. And that is what we're going to pass in to the list builder to be able
132

133
00:12:37,820 --> 00:12:44,050
to correctly render the child widgets and know where to slot it in the widget tree.
133

134
00:12:44,060 --> 00:12:48,380
Now the index is the property that we're gonna use really shortly.
134

135
00:12:48,440 --> 00:12:54,650
So the first thing that we're going to add to our item builder is we're going to tell it what we want to
135

136
00:12:54,650 --> 00:12:55,750
create.
136

137
00:12:55,790 --> 00:13:05,780
So we're going to return a task tile and the task tile of course takes to named parameters, the task title
137

138
00:13:06,170 --> 00:13:08,460
as well as the isChecked property,
138

139
00:13:08,720 --> 00:13:15,800
so we saw that earlier on when we were building our list view pretty manually. The task title is going
139

140
00:13:15,800 --> 00:13:19,010
to be derived from our tasks list
140

141
00:13:19,010 --> 00:13:25,640
so I'm going to happen to the task list and instead of hard coding which one I want to pull out of
141

142
00:13:25,640 --> 00:13:32,240
that list, I'm simply going to pass in the index that comes from this callback and that matches with
142

143
00:13:32,330 --> 00:13:36,570
the index inside the list view that we're currently building.
143

144
00:13:36,620 --> 00:13:42,260
So if we were building this one right here, then the index passed in would be equal to zero,
144

145
00:13:42,530 --> 00:13:46,270
if we were building this one then it would be one etc..
145

146
00:13:46,280 --> 00:13:53,480
Now this is not enough because this is actually of type task and it doesn't match with what task title
146

147
00:13:53,480 --> 00:13:55,760
needs to be, which is string.
147

148
00:13:55,760 --> 00:14:02,130
So then we have to tap into the name property, so pretty similar to what we did before
148

149
00:14:02,240 --> 00:14:10,760
but in this case it's now dynamic because we're using that index value that comes from the builder.
149

150
00:14:10,820 --> 00:14:19,730
Now we have a list view builder which is dynamically creating task tiles for every item in our task
150

151
00:14:19,880 --> 00:14:20,840
list.
151

152
00:14:20,840 --> 00:14:25,670
But of course it can't know how many items we want it to build.
152

153
00:14:25,670 --> 00:14:34,850
So in addition to having this list builder, we can also add another property which is the item count
153

154
00:14:34,940 --> 00:14:42,230
for our builder. So we can tell it how many of these task tiles we actually want to build.
154

155
00:14:42,230 --> 00:14:48,860
And of course we want to build as many task tiles for the number of tasks we have. So I'm simply going
155

156
00:14:48,860 --> 00:14:53,220
to add in tasks.length to get a dynamic value
156

157
00:14:53,220 --> 00:14:55,780
so right now it's going to be equal to three.
157

158
00:14:55,860 --> 00:15:02,520
So the item count for our list view builder is also going to be three and that gets rid of our errors
158

159
00:15:02,520 --> 00:15:08,400
down here where it was trying to build something that didn't have a task associated with it.
159

160
00:15:08,400 --> 00:15:16,770
So now we've kind of done exactly the same thing but in this case our list view is now completely dynamic
160

161
00:15:17,220 --> 00:15:23,520
and as soon as we update the state of our task list then the list view builder is going to rebuild. But
161

162
00:15:23,520 --> 00:15:29,870
it's only going to rebuild the parts that the user can actually see, the parts on screen.
162

163
00:15:29,880 --> 00:15:36,330
If we had a thousand tasks, then we're not going to be using up resources building a thousand items onto
163

164
00:15:36,330 --> 00:15:40,940
the screen but instead we're only going to build as many as the user sees,
164

165
00:15:41,040 --> 00:15:50,300
so it's way more efficient. So now we're finally ready to go back into our task tile and figure out how
165

166
00:15:50,300 --> 00:15:58,880
to fix our checkbox because we've broken that functionality in order to focus on making the dynamic
166

167
00:15:58,910 --> 00:16:01,080
list view builder work.
167

168
00:16:01,140 --> 00:16:11,270
Firstly, we'll need a callback to pass this information when the checkbox gets changed back to the parent,
168

169
00:16:11,270 --> 00:16:17,540
so in this case the parent would be the parent of the task tile which is of course the task list because
169

170
00:16:17,540 --> 00:16:19,910
that's where it's getting created.
170

171
00:16:19,910 --> 00:16:28,190
Here we can again use that callback that we created earlier on and we can use that inside the onChanged
171

172
00:16:28,250 --> 00:16:30,050
method right here.
172

173
00:16:30,110 --> 00:16:36,570
So we're going to take this method and we're going to bring it back over to our task lists.
173

174
00:16:36,740 --> 00:16:42,770
Now I can either do that by creating a named method here or more easily
174

175
00:16:42,770 --> 00:16:49,250
and what you'll see more often, is we can simply added in as an anonymous function. And we're going to
175

176
00:16:49,250 --> 00:16:53,260
pass over that callback when we create the task tile.
176

177
00:16:53,270 --> 00:16:58,850
So over here I'm going to create a new property that doesn't yet exist and I'm going to call it the
177

178
00:16:58,850 --> 00:17:07,280
checkboxCallback and inside here I'm going to paste in that callback that I have from earlier on.
178

179
00:17:07,280 --> 00:17:15,230
So it's going to be triggered inside the task tile where the checkbox is going to pass in the current
179

180
00:17:15,230 --> 00:17:18,590
checkbox state which is of type boolean,
180

181
00:17:18,590 --> 00:17:23,320
so this is optional. And we can have it or we don't have to.
181

182
00:17:23,360 --> 00:17:29,300
And when we click on one of the checkbox then this callback is going to get triggered inside the task
182

183
00:17:29,300 --> 00:17:38,180
tile and it's gonna pass over the latest value at which point we're going to update the task at the
183

184
00:17:38,180 --> 00:17:44,580
current index that we're building and we're going to toggle it's done-ness.
184

185
00:17:44,750 --> 00:17:53,300
So remember inside our task model, we had this method called toggleDone which simply changes the is
185

186
00:17:53,300 --> 00:17:57,500
Done property to the opposite of what it used to be.
186

187
00:17:57,500 --> 00:18:04,200
So now we're going to call that with a set state and hopefully that will trigger a rebuild of the current
187

188
00:18:04,200 --> 00:18:12,230
task tile and we will get the updated user interface namely the crossed out text and the checkbox showing
188

189
00:18:12,230 --> 00:18:18,110
up. But of course currently the checkbox callback property don't yet exist.
189

190
00:18:18,320 --> 00:18:22,980
So let's copy it and let's create it inside our task tile.
190

191
00:18:23,150 --> 00:18:30,680
So I'm going to create a final function which is called checkboxCallback and I'm also going to initialize
191

192
00:18:30,680 --> 00:18:39,710
it when I initialize my task tile. So I can do this in a number of ways. I can either say when my checkbox
192

193
00:18:39,740 --> 00:18:45,920
gets changed, well there's gonna be a new value that's going to be passed in to this callback. And in
193

194
00:18:45,920 --> 00:18:51,200
that case I can call the checkboxCallback and pass in the new value.
194

195
00:18:51,500 --> 00:18:57,530
But of course this is kind of redundant in this way because here we have a callback that takes an input
195

196
00:18:57,950 --> 00:19:00,710
and doesn't return an output.
196

197
00:19:00,710 --> 00:19:08,120
And over here we have an onChanged property which also tries to trigger a function that takes an input
197

198
00:19:08,420 --> 00:19:10,700
and doesn't have a return value.
198

199
00:19:10,700 --> 00:19:18,720
So we can actually simply just use the checkboxCallback inside the property for onChanged.
199

200
00:19:18,740 --> 00:19:27,320
And now if we hit save and I go ahead and check off my items, then you can see that this functionality
200

201
00:19:27,740 --> 00:19:35,150
is working exactly as it did before but the only change is that we now have a dynamic list view builder
201

202
00:19:35,510 --> 00:19:41,380
which is ready to build as many items in our list view as we want.
202

203
00:19:41,510 --> 00:19:49,550
Now in the next lesson we have a challenge for you because now that we have this capability of dynamically
203

204
00:19:49,550 --> 00:19:58,460
loading up task tiles, we now want to be able to start adding items into our task list and then updating
204

205
00:19:58,460 --> 00:20:06,620
the state of all the user interface elements so that we can update our app and add the new items below
205

206
00:20:06,620 --> 00:20:13,240
the previous ones. So once you already head over to the next lesson and complete the challenge.
