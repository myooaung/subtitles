0
1
00:00:00,500 --> 00:00:07,760
Now in the last lesson, we've updated our chat screen so that we're able to start typing messages over
1

2
00:00:07,760 --> 00:00:11,610
here, so we could say 'what's up?'
2

3
00:00:11,930 --> 00:00:19,260
And when I hit send, that message goes straight into our database on our Firebase Cloud
3

4
00:00:19,260 --> 00:00:25,940
Firestore. And we can see our new message pop up like so right here.
4

5
00:00:26,780 --> 00:00:32,420
So that part is done and we're able to send messages over to our database.
5

6
00:00:32,420 --> 00:00:40,180
But how can we retrieve data from our database and use it to populate our app?
6

7
00:00:40,340 --> 00:00:46,660
So this is what we're going to do in this lesson. First of all just underneath where we have our get
7

8
00:00:46,660 --> 00:00:47,770
CurrentUser,
8

9
00:00:47,830 --> 00:00:57,530
I'm going to create a new method called getMessages and this method is going to go into our Firestore.
9

10
00:00:57,580 --> 00:01:04,660
So I'm going to tap into that Firestore I've got and tap into the right collection, which is the one
10

11
00:01:04,660 --> 00:01:12,730
called messages. And then I'm going to call the getDocuments method and you can see that this returns
11

12
00:01:12,820 --> 00:01:15,430
a future query snapshot.
12

13
00:01:15,430 --> 00:01:23,410
Now this query snapshot is a data type that comes from Firebase and it's a snapshot of the data as we
13

14
00:01:23,410 --> 00:01:25,710
have it in our current collection.
14

15
00:01:25,720 --> 00:01:33,340
So if I go ahead and call this method and I want to use the result of this method, then of course I have
15

16
00:01:33,340 --> 00:01:35,220
to await for it.
16

17
00:01:35,260 --> 00:01:38,110
So let's save the data that we get back
17

18
00:01:38,380 --> 00:01:43,180
as a final and we'll call it our messages.
18

19
00:01:43,180 --> 00:01:50,110
And of course I have to mark this method with async if I want to use that await and we'll put a equal
19

20
00:01:50,110 --> 00:01:51,840
sign in between those two parts
20

21
00:01:51,910 --> 00:01:57,840
so we don't get any warnings or errors there.
21

22
00:01:57,930 --> 00:02:04,980
Now if we tap into these messages and we go into the documents, you can see that we can get a list
22

23
00:02:05,070 --> 00:02:06,790
of documents snapshots.
23

24
00:02:06,960 --> 00:02:12,750
So those documents refer to what we have in here, see how we can add a document.
24

25
00:02:12,750 --> 00:02:14,940
Well we've already got three of them
25

26
00:02:14,940 --> 00:02:17,610
and those belong to the messages collection.
26

27
00:02:17,610 --> 00:02:24,050
So if we want to grab all of these documents then we have to tap in to the messages.documents.
27

28
00:02:24,510 --> 00:02:30,510
And because this is a list, in order to be able to view individual items in the list, then we need to
28

29
00:02:30,510 --> 00:02:32,040
use a FOR loop.
29

30
00:02:32,070 --> 00:02:33,960
So let's create a for in loop,
30

31
00:02:33,990 --> 00:02:41,820
one of my favorite types of FOR  loops, and I'm going to create a new variable. We'll call it our var message
31

32
00:02:42,030 --> 00:02:45,240
in messages.ocuments.
32

33
00:02:45,240 --> 00:02:48,990
So this of course is the list that we're looping through
33

34
00:02:49,140 --> 00:02:52,910
and each of those items in there should be a message.
34

35
00:02:53,010 --> 00:03:00,780
And once we've gotten a hold of the message, then we can go ahead and print that document snapshot.
35

36
00:03:01,080 --> 00:03:02,120
data.
36

37
00:03:02,130 --> 00:03:10,920
So now this should give us that key value pair, the string which refers to the field and the value which
37

38
00:03:10,920 --> 00:03:16,580
refers to the text.
38

39
00:03:16,670 --> 00:03:23,540
Now we just have to be able to trigger this method and I'm going to do that right here where we currently
39

40
00:03:23,540 --> 00:03:28,270
are doing the sign out because this is the part that's easiest the comment out.
40

41
00:03:28,280 --> 00:03:33,470
So we're going to get rid of the sign out bits of the code and you can change this icon if it makes
41

42
00:03:33,470 --> 00:03:34,400
it easier for you.
42

43
00:03:34,430 --> 00:03:39,540
I'm just going to leave it as it is because I'm only using it to demo this method right now.
43

44
00:03:39,710 --> 00:03:44,890
So I'm going to call that method that I created just now called getMessages.
44

45
00:03:44,990 --> 00:03:53,660
And now if we hit save to hot reload our app, then we should be able to click on this button which I've
45

46
00:03:53,660 --> 00:04:00,550
linked to getMessages and once I've clicked on that, I should be able to see it inside my console.
46

47
00:04:00,560 --> 00:04:06,200
Now mind you, the final version of the app isn't going to have people clicking on the logout button to
47

48
00:04:06,200 --> 00:04:07,830
view their chat messages.
48

49
00:04:07,870 --> 00:04:11,240
I'm just temporarily adding the code here so we can easily test it out.
49

50
00:04:12,350 --> 00:04:21,650
So what's printed here is all of the messages that are currently in my messages collection. The way that
50

51
00:04:21,650 --> 00:04:28,430
the code is working at the moment is it gets a hold of all the documents inside my messages collection,
51

52
00:04:28,430 --> 00:04:35,780
it creates a single message out of all of the message documents and we print out each one of those and
52

53
00:04:35,780 --> 00:04:38,030
the data that's associated with it.
53

54
00:04:38,030 --> 00:04:42,670
So this is how we're getting hold of all our documents printed in here.
54

55
00:04:43,010 --> 00:04:51,350
Now that's all very well and good but if I go in to say here and I add a new document will leave the
55

56
00:04:51,380 --> 00:04:56,210
document ID blank and will keep the fields the same as what we had before,
56

57
00:04:56,220 --> 00:05:05,510
so sender and text. And I'll just put in some sort of sender value and a text value in here and hit save
57

58
00:05:05,930 --> 00:05:09,350
and you can see that it's gone into my collection.
58

59
00:05:09,350 --> 00:05:16,130
Now imagine this was not me posting a message manually through the Firebase dashboard but instead it
59

60
00:05:16,130 --> 00:05:19,070
was a chat message sent by another user.
60

61
00:05:19,190 --> 00:05:24,100
If another user posts a chat message to our database, it would show up just like this.
61

62
00:05:24,350 --> 00:05:32,550
But if we take a look over here, in order to get the updated value I have to call that method again.
62

63
00:05:32,590 --> 00:05:38,070
I have to click on the button again before I can retrieve all of my messages.
63

64
00:05:38,260 --> 00:05:44,650
Effectively I'm actively pulling data out of my Firebase database.
64

65
00:05:44,930 --> 00:05:49,660
Yes, pulling our database and retrieving the chat messages does work.
65

66
00:05:49,820 --> 00:05:55,530
But can you think of some downsides of using get documents to build our chat app?
66

67
00:05:55,580 --> 00:05:59,260
Why is this not the way that we would want to build it?
67

68
00:05:59,330 --> 00:06:01,730
Well imagine that you're chatting with your friend.
68

69
00:06:01,730 --> 00:06:05,280
In that case you want to see your friends messages show up right away
69

70
00:06:05,300 --> 00:06:05,940
right?
70

71
00:06:05,990 --> 00:06:11,180
And that means you want your instant messenger to deliver those messages,
71

72
00:06:11,180 --> 00:06:12,890
well instantly,
72

73
00:06:12,890 --> 00:06:13,250
right?
73

74
00:06:13,670 --> 00:06:20,090
So to achieve this, the app would probably have to call get documents two times a second or even more.
74

75
00:06:20,090 --> 00:06:24,860
Now imagine you say good night to your friend and you'll continue chatting in the morning.
75

76
00:06:25,040 --> 00:06:30,060
At this point the last thing you want is your chat app checking in with Firebase two times a second for
76

77
00:06:30,080 --> 00:06:31,400
new messages.
77

78
00:06:31,430 --> 00:06:37,890
That's why we need a different approach to having our app pull Firebase for a new chat messages. What
78

79
00:06:37,890 --> 00:06:44,090
if we could get the data to be pushed to our app when new data gets added
79

80
00:06:44,100 --> 00:06:50,010
from your conversation partner or somebody else who has the app installed? You kind of want the message
80

81
00:06:50,010 --> 00:06:55,650
to be automatically pushed over and shown on your screen right?
81

82
00:06:55,650 --> 00:07:00,240
That's kind of how WhatsApp and how most messaging apps work.
82

83
00:07:00,240 --> 00:07:02,130
So how can we do this?
83

84
00:07:02,250 --> 00:07:08,060
Well in order to do this, we need to know about something called streams.
84

85
00:07:08,360 --> 00:07:14,560
Now I'm going to comment out this method getMessages and I'm going to create a different method.
85

86
00:07:14,570 --> 00:07:24,090
So down here I'm going to create a method called messagesStream and this method is going to again not
86

87
00:07:24,090 --> 00:07:33,570
take any inputs, but it is also going to be an asynchronous method because I'm going to use it to listen
87

88
00:07:33,930 --> 00:07:43,110
for the stream of messages that's coming over from Firebase instead of waiting on firestore.collection
88

89
00:07:43,140 --> 00:07:50,490
messages .getDocuments which is the method that is going to give us back a future.
89

90
00:07:50,490 --> 00:07:54,360
So it's a future query snapshot that we get back.
90

91
00:07:54,540 --> 00:08:01,260
Well instead the method I'm going to use in here is again firestore.collections to find the right
91

92
00:08:01,260 --> 00:08:01,820
collection,
92

93
00:08:01,830 --> 00:08:07,590
the messages one. And then I'm gonna use a different method and it's a method called snapshots.
93

94
00:08:07,590 --> 00:08:15,560
And this method instead of a future query snapshot, it returns a stream of query snapshots.
94

95
00:08:15,930 --> 00:08:22,650
And this is almost kind of like a list of futures, it's a whole bunch of futures.
95

96
00:08:22,650 --> 00:08:31,050
And by subscribing to that stream, I'm going to listen to all of the changes that happen to this particular
96

97
00:08:31,050 --> 00:08:32,570
collection.
97

98
00:08:32,790 --> 00:08:39,630
And as the documentation tells us, when there's a new document that goes into my messages collection,
98

99
00:08:39,990 --> 00:08:46,970
I am now subscribed and I will be notified of any new results.
99

100
00:08:47,000 --> 00:08:49,670
So how do we handle these streams?
100

101
00:08:49,670 --> 00:08:57,470
Well the easiest way to think about it is to think of it almost as a list. And as you saw previously
101

102
00:08:57,530 --> 00:09:04,800
we needed to use a FOR loop to loop through all the messages in the list of message documents.
102

103
00:09:04,940 --> 00:09:12,740
We have to loop through our snapshots which is basically kind of like a list of future objects.
103

104
00:09:12,770 --> 00:09:19,460
So at any time point, a new message could be created and it could be added to our messages collection
104

105
00:09:19,820 --> 00:09:24,590
and we are now subscribing ourselves to that stream.
105

106
00:09:24,590 --> 00:09:28,780
So the syntax that I'm going to write is of course again await.
106

107
00:09:28,790 --> 00:09:32,900
So I'm waiting for this to complete before I can use it.
107

108
00:09:33,080 --> 00:09:36,440
And I'm also going to add the FOR loop here.
108

109
00:09:36,440 --> 00:09:47,570
So it's await for and inside this for in loop, I'm going to save the result of this stream to something
109

110
00:09:47,570 --> 00:09:50,060
that I'll call a snapshot.
110

111
00:09:50,060 --> 00:09:52,980
And that for loop is going to have the same syntax,
111

112
00:09:53,060 --> 00:09:58,320
so it's for var snapshot in, this bunch of snapshots.
112

113
00:09:59,960 --> 00:10:08,360
And inside this curly brace of the FOR loop, I will now get access to the snapshot. And the snapshot has
113

114
00:10:08,420 --> 00:10:10,900
something called .documents.
114

115
00:10:11,240 --> 00:10:13,730
So same as what we've got before,
115

116
00:10:13,730 --> 00:10:23,080
it's a list of document snapshots. so I can again use this code that I've got from before to loop through
116

117
00:10:23,170 --> 00:10:29,610
my snapshots although I might have to change some the words so it'll be snapshot.document.
117

118
00:10:29,950 --> 00:10:38,440
And each of these will be a message. And instead of calling getMessages, I'm going to call my new method
118

119
00:10:38,470 --> 00:10:45,040
which is the messages stream and we hit save and we open up our console.
119

120
00:10:45,040 --> 00:10:55,540
And now when I go and hit the cross sign and call that method messagesStream, then we should start subscribing
120

121
00:10:55,570 --> 00:11:02,080
to the messages in that collection. And we should be printing out each message into the console.
121

122
00:11:02,110 --> 00:11:07,960
So let's hit that button, run that message and just as before we're getting all of the messages that
122

123
00:11:07,960 --> 00:11:11,050
currently live in our messages collection.
123

124
00:11:11,440 --> 00:11:13,240
But watch this.
124

125
00:11:13,570 --> 00:11:22,360
If I go ahead and add a document say on Firebase and it's going to again use the same field sender and
125

126
00:11:22,420 --> 00:11:33,700
text, so sender will again just be angela@gmail.com and value will be 'Coming over the air from
126

127
00:11:33,910 --> 00:11:36,820
firebase console.'
127

128
00:11:37,030 --> 00:11:41,210
Here we're simulating another user sending a chat message.
128

129
00:11:41,360 --> 00:11:41,650
All right.
129

130
00:11:41,660 --> 00:11:48,620
Now I'm going to hit save which will save this document into my collection and I'm doing this through
130

131
00:11:48,620 --> 00:11:56,080
the Firebase dashboard but it's all going to the same database that I'm now subscribed to in my app.
131

132
00:11:56,750 --> 00:12:08,060
So now if I go back to the console, you'll see that it triggered a rerun of this code where because I've
132

133
00:12:08,060 --> 00:12:16,430
subscribed myself to listen for changes to my collection of messages, as soon as there was a change it's
133

134
00:12:16,550 --> 00:12:21,170
coming out over here and we're getting all of the results printed
134

135
00:12:21,170 --> 00:12:31,480
again. So now instead of pulling data from our Firebase database, we're effectively pushing data over.
135

136
00:12:31,500 --> 00:12:33,610
So this is really cool right?
136

137
00:12:33,630 --> 00:12:36,810
Our app is now listening for changes to the database.
137

138
00:12:36,840 --> 00:12:42,710
It's not a case of pulling Firebase and checking for messages as we did in the first part of lesson.
138

139
00:12:42,750 --> 00:12:49,800
Now Firebase is notifying our app of any new messages via the stream of data snapshots.
139

140
00:12:49,800 --> 00:12:55,840
This is exactly the kind of behavior that you would want from a chat application.
140

141
00:12:56,050 --> 00:13:03,490
So in order to understand what's going on here we have to understand a bit more about how streams work.
141

142
00:13:03,490 --> 00:13:06,400
And that's exactly what we're going to do in the next lesson.
142

143
00:13:06,520 --> 00:13:12,930
So head over there for a deep dive on, 'what exactly are streams and how do they differ from futures?'
