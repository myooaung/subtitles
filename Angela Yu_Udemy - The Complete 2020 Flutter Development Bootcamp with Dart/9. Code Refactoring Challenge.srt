0
1
00:00:00,210 --> 00:00:05,900
So now that we've done quite a bit of coding, it's a good time to do a bit of tidying up and refactor
1

2
00:00:05,900 --> 00:00:10,830
our code a little bit to make it easier for the next thing that we're going to learn and we're going
2

3
00:00:10,830 --> 00:00:13,390
to add to our code.
3

4
00:00:13,450 --> 00:00:16,080
Now this lesson is designed as a challenge for you.
4

5
00:00:16,090 --> 00:00:20,980
The goal of this lesson is to simplify and reorganize our existing code.
5

6
00:00:21,250 --> 00:00:26,790
In the process you'll become very familiar with the code in the stub and also you'll review how to modularize
6

7
00:00:26,800 --> 00:00:32,430
code, how to extract widgets and how to work with a constant file. At the end of the lesson,
7

8
00:00:32,440 --> 00:00:37,530
we'll make some finishing touches to our app's design and you'll see how easy it is to make this change
8

9
00:00:37,540 --> 00:00:40,560
thanks to having refactored our code.
9

10
00:00:40,930 --> 00:00:45,730
So first things first. Let's delete all the print statements that we don't really need anymore
10

11
00:00:45,730 --> 00:00:49,630
and let's group together all the related parts of code.
11

12
00:00:49,810 --> 00:00:51,870
Now on our welcome screen
12

13
00:00:51,880 --> 00:01:00,070
notice that if you scroll down, we have two of these widgets, these padding widgets that enclose a material
13

14
00:01:00,070 --> 00:01:01,410
with an elevation.
14

15
00:01:01,420 --> 00:01:04,000
So that's going to get a little bit of drop shadow.
15

16
00:01:04,000 --> 00:01:10,990
And they contain a material button which is what will take us to the relevant screen.
16

17
00:01:10,990 --> 00:01:19,720
Now these two padding widgets are pretty much identical, other than the text that they contain as their
17

18
00:01:19,720 --> 00:01:20,700
title,
18

19
00:01:20,950 --> 00:01:28,840
what they do when they are pressed and also what color they are. These widgets exist on three of our
19

20
00:01:28,840 --> 00:01:34,190
screens, our welcome screen, our log in screen and our registration screen.
20

21
00:01:34,240 --> 00:01:36,370
So here's part one of the challenge.
21

22
00:01:36,370 --> 00:01:42,490
Can you refactor these padding widgets into a separate stateless widget
22

23
00:01:43,030 --> 00:01:51,220
and when we use it, we're going to simply pass over a color property and a onPressed function and the
23

24
00:01:51,280 --> 00:01:54,340
text that the buttons will display?
24

25
00:01:54,340 --> 00:01:57,220
There are quite a few steps involved as part of the challenge.
25

26
00:01:57,220 --> 00:02:02,390
So I've written step by step instructions that you'll find in the course resources.
26

27
00:02:02,560 --> 00:02:06,810
So pause the video and try to complete this challenge.
27

28
00:02:07,080 --> 00:02:07,380
All right.
28

29
00:02:07,410 --> 00:02:10,620
So here's the solution to part one of the challenge.
29

30
00:02:10,620 --> 00:02:18,510
Now as always, the easiest way of refactoring widgets is by simply going to the Flutter outline selecting
30

31
00:02:18,780 --> 00:02:24,840
the top level widget which contains all the subwidgets that we want to extract, and then right clicking
31

32
00:02:24,840 --> 00:02:27,750
on it and clicking on extract widget.
32

33
00:02:27,750 --> 00:02:35,520
Now I'm gonna call mine a RoundedButton and then we're going to click on refactor. And now we have a
33

34
00:02:35,580 --> 00:02:40,530
rounded button as a separate stateless widget.
34

35
00:02:40,530 --> 00:02:47,220
Now I'm going to delete the constructor that came from that extraction and we're going to create our
35

36
00:02:47,280 --> 00:02:54,720
own constructor which is going to initialize three properties. One which is going to be a property of
36

37
00:02:54,720 --> 00:03:01,770
type color and I'm just going to call it color spelt either the British way or the American way whichever
37

38
00:03:01,770 --> 00:03:02,310
you prefer,
38

39
00:03:02,940 --> 00:03:08,110
and we're also going to have a string which is going to be the title of the button.
39

40
00:03:08,190 --> 00:03:13,090
And finally I'm going to have a function which is going to be onPressed,
40

41
00:03:13,200 --> 00:03:19,620
what should happen when the button gets pressed. And in my constructor I'm going to construct all three
41

42
00:03:19,620 --> 00:03:20,000
of these.
42

43
00:03:20,010 --> 00:03:25,140
So this.title, this.color and this.onPressed.
43

44
00:03:25,280 --> 00:03:30,630
Now given that this is a button, it kind of makes sense for the onPressed to be required
44

45
00:03:30,630 --> 00:03:31,160
right?
45

46
00:03:31,200 --> 00:03:38,220
So I'm going to also add that annotation called required in front of thi.onPressed so that when we
46

47
00:03:38,220 --> 00:03:43,280
create a round button, it can't not have a onPressed.
47

48
00:03:43,500 --> 00:03:48,720
So now that we're done with the constructor in the properties we can actually use them inside the build
48

49
00:03:48,720 --> 00:03:50,940
method for this stateless widget.
49

50
00:03:51,480 --> 00:03:58,710
So instead of the color, we're going to change that to the color that's going to be passed in. And instead
50

51
00:03:58,710 --> 00:04:04,920
of the text widget with log in, we're going to change it to the title which is also going to be passed
51

52
00:04:04,920 --> 00:04:05,520
in.
52

53
00:04:05,730 --> 00:04:12,150
And then for the onPressed, I'm simply going to cut the current callback out of there because I'm going
53

54
00:04:12,150 --> 00:04:18,070
to use it a little bit later on, and then use that function that gets passed in instead.
54

55
00:04:18,090 --> 00:04:23,790
So now that I've created my rounded button, all I have to do is to use it where I needed it.
55

56
00:04:24,210 --> 00:04:31,560
Now as I mentioned before as of Dart 2.0, we no longer have to use the new keyword or the const keyword
56

57
00:04:31,620 --> 00:04:34,370
when we're constructing new objects,
57

58
00:04:34,380 --> 00:04:42,420
so we can delete that. And our rounded button currently is giving us a warning because it has a onPressed
58

59
00:04:42,420 --> 00:04:45,240
property that is required.
59

60
00:04:45,240 --> 00:04:47,770
Let's go ahead and fill in all the properties.
60

61
00:04:47,820 --> 00:04:51,110
So the title is going to be log in as it was before.
61

62
00:04:51,300 --> 00:04:58,230
The color is going to be colors.lightBlueAccent and finally the onPressed is going to be that
62

63
00:04:58,230 --> 00:05:06,450
callback that I cut out from previously which is simply the navigator to push the log in screen onto
63

64
00:05:06,720 --> 00:05:08,600
the navigation stack.
64

65
00:05:08,610 --> 00:05:14,460
Now I'm going to do exactly the same thing with my other padding widget here. So I'm going to delete
65

66
00:05:14,460 --> 00:05:20,000
it all the way down to here and instead I'm going to use another rounded button.
66

67
00:05:20,160 --> 00:05:28,830
But this one is of course going to say register instead, and it's going to have the color of blue accent
67

68
00:05:28,860 --> 00:05:30,900
instead of light blue accent.
68

69
00:05:30,900 --> 00:05:36,930
And when this button gets pressed instead of going to a log in screen, it should be going to the registration
69

70
00:05:36,930 --> 00:05:41,630
screen. So that's all we need to do to refactor that.
70

71
00:05:41,710 --> 00:05:49,540
And now the build method for our screen is now vastly simplified and there's much less nesting going
71

72
00:05:49,540 --> 00:05:55,450
on. So now I can actually move this class into its own file.
72

73
00:05:55,620 --> 00:06:01,950
I'm going to create a new folder or new directory that I'm gonna call components.
73

74
00:06:02,250 --> 00:06:08,090
And inside this folder called components, I'm going to create a new Dart file which is going to be our
74

75
00:06:08,100 --> 00:06:18,940
rounded button. And now I can paste that class I created from before and import my material library for
75

76
00:06:18,940 --> 00:06:21,770
it to know what a stateless widget is.
76

77
00:06:21,880 --> 00:06:30,670
And now I can import my components folder, and the file was called rounded button.
77

78
00:06:30,850 --> 00:06:37,690
So now it knows about rounded buttons and we've now refactored this page pretty well.
78

79
00:06:37,690 --> 00:06:44,050
So the next thing that we're going to refactor is the registration and log in screens.
79

80
00:06:44,050 --> 00:06:47,710
Notice here that we've also got a button here.
80

81
00:06:48,130 --> 00:06:50,140
So we're going to replace this
81

82
00:06:50,140 --> 00:06:53,670
register button with that same rounded button.
82

83
00:06:53,890 --> 00:07:03,270
So let's import our components folder and our rounded button file and now let's replace all of this.
83

84
00:07:03,340 --> 00:07:05,670
So it has a blue accent color,
84

85
00:07:05,680 --> 00:07:11,650
it has nothing currently in the onPressed and it also has a text of register.
85

86
00:07:11,650 --> 00:07:27,110
So let's replace that with a rounded button which has a title of register, a color of blue accent and
86

87
00:07:27,170 --> 00:07:30,720
a onPressed that currently is completely empty.
87

88
00:07:30,800 --> 00:07:36,870
So we'll just add a empty callback in here and we'll deal with it a little bit later on.
88

89
00:07:37,190 --> 00:07:42,710
Now inside the log in screen, we've also got one of these buttons right here.
89

90
00:07:42,740 --> 00:07:49,480
So this is a light blue button with an empty onPressed and a title that says log in.
90

91
00:07:49,730 --> 00:07:53,810
So let's delete that and replace it with a rounded button.
91

92
00:07:53,870 --> 00:08:00,620
And of course we have to import it to be able to use it.
92

93
00:08:00,680 --> 00:08:02,850
So now we can add our properties
93

94
00:08:02,880 --> 00:08:13,670
so our title is going to be log in, our color is going to be colors.lightBlueAccent and onPressed
94

95
00:08:13,850 --> 00:08:17,330
is going to be an empty callback.
95

96
00:08:17,850 --> 00:08:22,240
So that's it, done. Refactored. OK.
96

97
00:08:22,260 --> 00:08:24,810
So now comes part 2  of the challenge.
97

98
00:08:24,810 --> 00:08:30,150
If you look at our log in and registration screens, you'll notice that they have these text fields.
98

99
00:08:30,150 --> 00:08:38,120
These text fields are heavily styled by our input decoration. And the reason why the input decoration
99

100
00:08:38,150 --> 00:08:45,380
is so long both for the text field on our registration screens as well as our log in screens is because
100

101
00:08:45,380 --> 00:08:48,040
we're actually specifying quite a few things.
101

102
00:08:48,410 --> 00:08:51,650
We have two text fields on both of these screens
102

103
00:08:51,800 --> 00:08:57,410
one where the user is going to put in that email and another where they're going to enter their password.
103

104
00:08:57,590 --> 00:09:04,230
But we're adding padding to the content that's gonna go in the field, we're giving the text fields a outline
104

105
00:09:04,230 --> 00:09:09,930
style border and we're changing the colors of all of the sides of the borders.
105

106
00:09:10,130 --> 00:09:16,190
And we're also specifying a slightly different appearance when the text field is focused versus when
106

107
00:09:16,190 --> 00:09:18,140
it's enabled.
107

108
00:09:18,140 --> 00:09:22,900
So this is what it'll look like when our app starts when the screen loads up
108

109
00:09:23,060 --> 00:09:28,280
and this is what it will look like when it's actually being activated, when the user is about to type
109

110
00:09:28,280 --> 00:09:29,740
something into it.
110

111
00:09:29,750 --> 00:09:36,080
So we're simply just adding one pixel to the border so that it becomes a little bit thicker.
111

112
00:09:36,080 --> 00:09:38,150
That's all we're doing.
112

113
00:09:38,150 --> 00:09:44,230
Now normally we would put all of our styling inside our constants file.
113

114
00:09:44,540 --> 00:09:52,340
So we really have a constants file which contains some constants for styling our button text or our message
114

115
00:09:52,340 --> 00:09:56,020
text field or the message container decoration.
115

116
00:09:56,030 --> 00:10:01,910
Now what I'd like you to do for this challenge is to extract the input decoration and put it into the
116

117
00:10:01,910 --> 00:10:02,860
constants file.
117

118
00:10:03,200 --> 00:10:08,470
That's where we've got our other decorations and this will allow us to simplify our registration_screen
118

119
00:10:08,470 --> 00:10:12,800
.dart and log_in_screen.dart files even further.
119

120
00:10:12,830 --> 00:10:17,930
Again I encourage you to pause the video and refer to the step by step instructions before I show you
120

121
00:10:17,930 --> 00:10:18,590
the solution.
121

122
00:10:20,580 --> 00:10:20,880
All right.
122

123
00:10:20,910 --> 00:10:28,500
So as usual, when we create a constant all we do is we take the part of the styling that is repeated
123

124
00:10:28,530 --> 00:10:33,250
or that we want to put outside of our screen code,
124

125
00:10:33,270 --> 00:10:39,180
so we're going to cut this input decoration out here and we're going to paste it into our constants
125

126
00:10:39,180 --> 00:10:39,810
file.
126

127
00:10:39,870 --> 00:10:41,640
So we're going to create a new constant
127

128
00:10:41,640 --> 00:10:49,020
and we're going to call it kTextFieldDecoration and we're going to set it to equal that input decoration
128

129
00:10:49,020 --> 00:10:53,030
that we copied over, change the comma to a semicolon.
129

130
00:10:53,190 --> 00:10:58,800
And for the hintText it doesn't really make sense for it to say enter your email for every single
130

131
00:10:58,800 --> 00:10:59,460
text field
131

132
00:10:59,460 --> 00:10:59,700
right?
132

133
00:11:00,150 --> 00:11:07,860
So let's leave that hintText  as maybe blank or just 'Enter a value' if we don't specify any hint
133

134
00:11:07,860 --> 00:11:10,450
text then that's the default one.
134

135
00:11:10,470 --> 00:11:17,340
Well now when we go back to our registration screen and we set the decoration of our text field to that
135

136
00:11:17,340 --> 00:11:29,060
kTextFieldDecoration, and of course we have to import our constants file to be able to do this.
136

137
00:11:29,100 --> 00:11:37,530
And now what we have is a bog standard text field with that default line, enter a value.
137

138
00:11:37,560 --> 00:11:39,950
So how do we solve this problem?
138

139
00:11:39,960 --> 00:11:47,970
How can we have a text field with basically the same input decoration widget other than just the one
139

140
00:11:47,970 --> 00:11:49,380
property?
140

141
00:11:49,380 --> 00:11:56,880
Well remember how previously when we looked into themes, we were able to use a particular theme that Flutter
141

142
00:11:56,880 --> 00:12:03,780
came with such as the dark theme and then we could use that method copyWith to say 'copy this entire
142

143
00:12:03,780 --> 00:12:07,980
theme but make this one change.'
143

144
00:12:07,980 --> 00:12:16,590
Well we can do the same with our input decoration as well. Instead of just using the text field decoration
144

145
00:12:16,680 --> 00:12:17,610
as it is,
145

146
00:12:17,610 --> 00:12:25,320
we could say kTextFieldDecoration.copyWith and the one thing that we want to change out of this
146

147
00:12:25,320 --> 00:12:29,870
mass of things we could change, is just the hintText.
147

148
00:12:29,880 --> 00:12:40,950
So for this top text field, the hint text is 'Enter your email' and for the bottom text field the decoration
148

149
00:12:40,950 --> 00:12:43,380
will be kTextFieldDecoration 
149

150
00:12:43,380 --> 00:12:53,250
and we're going to use copyWith to specify a hintText which is 'Enter your password'. Now we're able
150

151
00:12:53,250 --> 00:13:01,640
to use the same constant that defines how each text field would look including those rounded borders etc.
151

152
00:13:01,920 --> 00:13:09,060
but we're actually specifying one change to that whole thing which is changing the hint text. And we
152

153
00:13:09,060 --> 00:13:13,520
can do that across the log in and registration pages.
153

154
00:13:13,530 --> 00:13:18,120
So we're going to replace that with the one that we got from our constants file.
154

155
00:13:22,240 --> 00:13:26,400
And this is the last one that we have to replace here as well.
155

156
00:13:30,460 --> 00:13:37,750
So now we can actually delete this a dark theme which remember makes all of our text white.
156

157
00:13:37,750 --> 00:13:43,760
So when we go through our log in or our registration pages, there's actually no hintText being displayed.
157

158
00:13:43,870 --> 00:13:52,360
But if we delete this dark theme and we run our app then you'll see that the light theme shows up the
158

159
00:13:52,360 --> 00:14:01,150
text as black but it also means that the text in our text fields show up with this grey color. And you
159

160
00:14:01,150 --> 00:14:05,870
can see that even though both text fields are using the same decoration,
160

161
00:14:06,040 --> 00:14:08,250
so if we had no decoration,
161

162
00:14:08,620 --> 00:14:10,360
well this is what it would look like.
162

163
00:14:10,360 --> 00:14:14,300
So let's try cutting that out and hit save.
163

164
00:14:14,620 --> 00:14:21,180
And you'll see that on the registration screen, we've got that bog standard sort of text field instead
164

165
00:14:21,180 --> 00:14:23,220
of the custom one that we have here.
165

166
00:14:23,680 --> 00:14:30,340
But if we go ahead and put that back in and hit save, then you can see it turns into that lovely rounded
166

167
00:14:30,460 --> 00:14:37,710
outlined text field and you can see it even highlights by changing the width of the border
167

168
00:14:37,720 --> 00:14:44,810
when we click on it or when we tap on it. One last thing that we have solved is because we've now gotten
168

169
00:14:44,810 --> 00:14:50,600
rid of that dark theme in the beginning of our app, our buttons are now light themed.
169

170
00:14:50,600 --> 00:14:53,150
So the text in them are black.
170

171
00:14:53,180 --> 00:15:00,290
So in order to change this across all the buttons because we have refactored our code and we know exactly
171

172
00:15:00,620 --> 00:15:07,430
where the code that is responsible for rendering all of these buttons on the welcome screen, on the log
172

173
00:15:07,430 --> 00:15:14,870
in screen, where that code is located namely inside the rounded_button.dart file, then we can simply
173

174
00:15:14,900 --> 00:15:18,270
change the color of the text in this one place.
174

175
00:15:18,620 --> 00:15:25,340
So inside that text widget, we'll add a style property which is going to be a TextStyle which is going to
175

176
00:15:25,340 --> 00:15:29,520
change the color of the text to colors.white.
176

177
00:15:29,630 --> 00:15:36,800
And when we change it here, it'll go through across all of the places that we use that button and we
177

178
00:15:36,800 --> 00:15:44,240
don't have to mess around with searching for it through a long build method or through the code that's
178

179
00:15:44,240 --> 00:15:46,480
on our screens.
179

180
00:15:46,490 --> 00:15:52,910
So here are some first hand benefits of refactoring and I recommend that while you're creating your
180

181
00:15:52,910 --> 00:15:58,850
Flutter apps and while you're coding, to do some refactoring on just a regular basis. It makes it much
181

182
00:15:58,880 --> 00:16:04,460
easier rather than leaving it all until the end when you run out of steam and you probably won't have
182

183
00:16:04,460 --> 00:16:08,810
the time to do any refactoring and it ends up being sort of spaghetti code.
183

184
00:16:09,020 --> 00:16:17,420
So now that we've refactoring our code and our registration screen and log in screen now look pretty
184

185
00:16:17,420 --> 00:16:19,810
simple and pretty straightforward,
185

186
00:16:19,880 --> 00:16:27,950
we are now finally ready to get started with implementing Firebase and adding a back end database for
186

187
00:16:28,070 --> 00:16:32,600
all of the messages that the users will create into our Flutter app.
187

188
00:16:32,600 --> 00:16:35,810
So for all of that and more I'll see on the next lesson.
