WEBVTT
0
1
00:00:00.720 --> 00:00:01.120
All right.
1

2
00:00:01.140 --> 00:00:08.130
So now that we've gotten the location of the user's device ,the next step is to actually turn that location
2

3
00:00:08.220 --> 00:00:15.630
into actual weather data. And to do that we need to use online services where they actually collect weather
3

4
00:00:15.630 --> 00:00:17.700
data, such as Open Weather Map.
4

5
00:00:18.090 --> 00:00:23.910
So wouldn't it be nice if we could grab the current location of the user and then tell them what the
5

6
00:00:23.910 --> 00:00:28.030
weather for their location is? Now in order to do this,
6

7
00:00:28.050 --> 00:00:36.030
we need to use what's called an API. And as Open Weather Map says they have over 20+ weather APIs.
7

8
00:00:36.030 --> 00:00:44.370
So what exactly are these APIs? An API stands for an Application Programming Interface.
8

9
00:00:44.370 --> 00:00:50.340
And if you take a look on Wikipedia, there's an even longer definition where it says that an API is a
9

10
00:00:50.340 --> 00:00:57.360
set of commands, functions, protocols and objects that programmers can use to create software or interact
10

11
00:00:57.420 --> 00:00:59.490
with an external system.
11

12
00:00:59.520 --> 00:01:05.610
And the last point is it should provide developers with standard commands for performing common operations
12

13
00:01:05.850 --> 00:01:09.530
so they don't have to write the code from scratch.
13

14
00:01:09.630 --> 00:01:15.540
Now this is quite a broad definition and as you think back to all the things that you've done even in
14

15
00:01:15.540 --> 00:01:19.960
this course, you can imagine that lots of it actually fit this definition.
15

16
00:01:20.400 --> 00:01:27.540
So one type of APIs are APIs that are used to create software, for example Flutter.
16

17
00:01:27.540 --> 00:01:31.370
If we take a look at the Flutter documentation, you can see that it tells you
17

18
00:01:31.410 --> 00:01:35.910
'This is the Flutter API reference documentation.'
18

19
00:01:35.910 --> 00:01:43.350
So by using the Flutter SDK or the libraries that are bundled together under the Flutter flag, we're essentially
19

20
00:01:43.350 --> 00:01:50.430
using an API where they've created a bunch of command functions, protocols, objects, that we're using to
20

21
00:01:50.430 --> 00:01:51.920
create software
21

22
00:01:51.920 --> 00:01:52.230
right?
22

23
00:01:52.290 --> 00:01:54.990
We're using an API in that sense.
23

24
00:01:54.990 --> 00:02:03.360
But there's also other types of APIs. There's APIs that allow you to interact with an external system,
24

25
00:02:03.360 --> 00:02:08.670
and an example of this is the Tinder app, which is a matchmaking app.
25

26
00:02:08.760 --> 00:02:14.280
And when you take a look at the interface, you can see there's a section on shared friends and shared
26

27
00:02:14.280 --> 00:02:15.170
interests.
27

28
00:02:15.180 --> 00:02:17.600
Well where did these come from?
28

29
00:02:17.790 --> 00:02:27.270
This data comes when Tinder makes a request to Facebook asking it to get some information on a particular
29

30
00:02:27.270 --> 00:02:32.460
user saying 'This person Angela Yu, who are their friends?'
30

31
00:02:32.610 --> 00:02:39.690
And once they get those responses back, it can check against its own users and sees out of all of those
31

32
00:02:39.690 --> 00:02:40.430
friends,
32

33
00:02:40.440 --> 00:02:48.370
which of those friends are also on Tinder? Now when we're interacting with external systems, it's a bit
33

34
00:02:48.370 --> 00:02:50.890
like being a citizen of a small town
34

35
00:02:50.890 --> 00:02:51.160
right?
35

36
00:02:51.160 --> 00:02:57.360
There's certain buildings or certain structures that you interact with in this way.
36

37
00:02:57.430 --> 00:03:04.600
For example you go to Dunkin' Donuts and you could make a request for some donuts, pass over some money
37

38
00:03:05.050 --> 00:03:09.850
and in return you get back your donuts as a response.
38

39
00:03:10.930 --> 00:03:17.230
But there's also other types of APIs where you can't just go in and demand something.
39

40
00:03:17.230 --> 00:03:18.830
For example at the bank,
40

41
00:03:18.850 --> 00:03:19.110
right?
41

42
00:03:19.120 --> 00:03:22.310
You can't just walk in and say I want £100.
42

43
00:03:22.480 --> 00:03:25.370
Not everybody can make that request to the bank.
43

44
00:03:26.110 --> 00:03:32.020
So the way that it would work with the bank is that not only do you have to make a request to get some
44

45
00:03:32.020 --> 00:03:38.740
money, you also have to pass over a key saying that this is the key to unlock my account.
45

46
00:03:38.740 --> 00:03:45.650
And then if that checks out, then and only then does the bank actually open the safe for you.
46

47
00:03:45.670 --> 00:03:51.490
So when we're interacting with external services, we're usually trying to get a little bit of data from
47

48
00:03:51.490 --> 00:03:58.900
them. And with certain APIs, they have to make sure that you don't heat up their server so much that you're
48

49
00:03:58.910 --> 00:04:05.500
actually costing them a lot of resources. Because if you imagine an external server just as computers
49

50
00:04:05.500 --> 00:04:10.660
which are running on somebody else's electricity bill, you can imagine that if you make lots and lots
50

51
00:04:10.660 --> 00:04:15.580
of requests to that computer then you're actually costing the owner quite a lot of money.
51

52
00:04:16.210 --> 00:04:22.270
So instead of simply having a bank where you just have some sort of notebook and everybody comes in
52

53
00:04:22.300 --> 00:04:28.990
and you say 'My name was Angela Yu. On the 25th of November I took out £100.' But actually
53

54
00:04:29.290 --> 00:04:32.400
you go in there and you just take a lot more.
54

55
00:04:32.410 --> 00:04:40.570
Well this is where API is start demanding a key because that key is similar to having a bank teller
55

56
00:04:41.140 --> 00:04:47.530
where it asks you, 'Can I help you?', and you say, 'I'd like to withdraw £100.' And then it asks you, 'what's
56

57
00:04:47.530 --> 00:04:48.530
your password?'
57

58
00:04:48.550 --> 00:04:51.900
So here's my passwor,d here's my API key.
58

59
00:04:52.120 --> 00:04:57.880
And if that matches with an account that they have at the bank, then they'll say, 'Well here you go.
59

60
00:04:57.910 --> 00:05:01.000
Here's your £100 pounds that you demanded.'
60

61
00:05:01.000 --> 00:05:10.780
So in this case, that bank teller, that interface between you and the safe, that is the API. And it enforces
61

62
00:05:10.870 --> 00:05:17.500
certain rules that you have to abide by such as what you can request, what you can do and asking you
62

63
00:05:17.500 --> 00:05:19.870
for a password and confirming it.
63

64
00:05:19.990 --> 00:05:25.480
That essentially is our application programming interface. Now with API
64

65
00:05:25.480 --> 00:05:27.610
you can do more than just get data.
65

66
00:05:27.610 --> 00:05:30.720
You can also put data into their database.
66

67
00:05:30.760 --> 00:05:34.990
So in the bank situation you might want to deposit £100.
67

68
00:05:34.990 --> 00:05:41.770
And it's again that API that's going to handle this and take your data, verify it, validate it, make sure
68

69
00:05:41.770 --> 00:05:46.060
it goes the right place and then puts it into their own database.
69

70
00:05:46.060 --> 00:05:51.280
You can't interact with another web server's database directly.
70

71
00:05:51.280 --> 00:05:57.100
So I can't, for example, tell Open Weather Map that, 'you know what? I've made up some weather data.
71

72
00:05:57.130 --> 00:05:58.060
So here you go.
72

73
00:05:58.090 --> 00:06:04.720
Please take it and tell all of the rest of the world that actually in London right now, it's 35 degrees.'
73

74
00:06:04.720 --> 00:06:10.480
So essentially when your app is interacting with somebody else's program or somebody else's server or
74

75
00:06:10.480 --> 00:06:11.790
somebody else's code,
75

76
00:06:11.950 --> 00:06:18.550
this API is that interface in the middle that dictates how you should interact
76

77
00:06:18.670 --> 00:06:20.320
And it's the rules of engagement
77

78
00:06:20.350 --> 00:06:26.530
essentially. There are certain things that you can request for and if that's a valid request, then they
78

79
00:06:26.530 --> 00:06:28.620
can give you a valid response.
79

80
00:06:29.910 --> 00:06:35.310
Now if you just went up to a bank teller and asked her, 'what's the 31st element of the periodic
80

81
00:06:35.310 --> 00:06:35.810
table?'
81

82
00:06:35.820 --> 00:06:40.790
Because, you know, it's in your homework and you want a quick and easy way of doing it.
82

83
00:06:40.800 --> 00:06:42.170
Well she doesn't know.
83

84
00:06:42.540 --> 00:06:47.330
And they will return an error or in webspeak, a 404 status code
84

85
00:06:47.340 --> 00:06:51.350
which means did not find the resource that you were looking for.
85

86
00:06:51.420 --> 00:06:55.070
Essentially you made a invalid request.
86

87
00:06:55.110 --> 00:07:01.260
There's only certain things that they can handle and there's only certain requests that they will respond
87

88
00:07:01.290 --> 00:07:02.270
to.
88

89
00:07:02.280 --> 00:07:05.220
So it's exactly the same with our API.
89

90
00:07:05.490 --> 00:07:12.420
Coming back to our original definition of an API, when we try to get some data from an external system
90

91
00:07:12.930 --> 00:07:19.890
we have to do that through a series of commands and functions that have been predefined for us to use.
91

92
00:07:20.160 --> 00:07:27.360
And it's only through these authorized ways of interacting with their system can we actually get the
92

93
00:07:27.360 --> 00:07:33.000
data that we need. And the way that we can learn about these functions or methods that they have created
93

94
00:07:33.350 --> 00:07:37.570
is by using the documentation of the API.
94

95
00:07:37.840 --> 00:07:45.730
So for example in this case, we have the open weather map API. And in here they have detailed documentation
95

96
00:07:46.030 --> 00:07:49.890
for each of the pieces of data that we can fetch from them.
96

97
00:07:49.900 --> 00:07:56.350
So if we wanted to access the current weather data for any location on Earth, then we can call it by
97

98
00:07:56.350 --> 00:08:00.330
using something that looks a bit like a normal URL right?
98

99
00:08:00.790 --> 00:08:07.900
So the location of the data is api.openweathermap.org/data and then they have some sort
99

100
00:08:07.900 --> 00:08:12.300
of versioning code for which version of the API we're interacting with.
100

101
00:08:12.550 --> 00:08:17.880
And then it says what you want to interact with and then you provide a query parameter.
101

102
00:08:17.890 --> 00:08:24.550
So in this case you're saying, 'I want the data for the weather in London' and we can either make this
102

103
00:08:24.550 --> 00:08:33.910
request through our browser by simply putting it into the URL box at the top and we get back a series
103

104
00:08:33.910 --> 00:08:41.550
of data. So it tells us that at the moment in London, there's some drizzle and the temperature is 280
104

105
00:08:41.660 --> 00:08:42.800
K.
105

106
00:08:42.970 --> 00:08:49.120
So in the next lesson, we're going to be looking at how we can fetch data from Open Weather Map servers
106

107
00:08:49.510 --> 00:08:55.600
through interacting with their APIs and we're going to be using a networking library from Flutter to
107

108
00:08:55.600 --> 00:08:57.150
be able to achieve this.
108

109
00:08:57.160 --> 00:09:00.010
So for all of that and more, I see on the next lesson.
