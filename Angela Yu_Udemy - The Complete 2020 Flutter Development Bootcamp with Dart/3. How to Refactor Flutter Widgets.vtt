WEBVTT
0
1
00:00:00.090 --> 00:00:09.060
Now in this lesson, we're going to look at mostly how to extract and refactor widgets as separate classes.
1

2
00:00:09.060 --> 00:00:15.060
And the reason why we're doing this is because as our apps get more and more complex, it makes sense
2

3
00:00:15.120 --> 00:00:22.290
to take parts of it that are repeated in the widget tree and remove them so that we can consolidate
3

4
00:00:22.290 --> 00:00:24.570
them into a single widget.
4

5
00:00:24.780 --> 00:00:30.770
And then we can simply use that widget wherever we need the same appearance or the same functionality.
5

6
00:00:31.500 --> 00:00:35.850
But before we can do this, we first have to actually have something on screen.
6

7
00:00:35.850 --> 00:00:43.800
We have to design the user interface. And the first step of creating this is actually to create the skeleton.
7

8
00:00:43.800 --> 00:00:51.120
So the individual cards that you see on screen and they sort of have this slightly lighter color just
8

9
00:00:51.120 --> 00:00:57.540
so that we'll be able to group them into individual components or areas. And the user will be able to
9

10
00:00:57.540 --> 00:01:01.620
see the different parts that come together to calculate their BMI.
10

11
00:01:02.280 --> 00:01:08.760
So before we actually add any of the content or the text, we're first going to create the cards that
11

12
00:01:08.760 --> 00:01:11.800
will be the background for each of those areas.
12

13
00:01:11.820 --> 00:01:16.090
So we're aiming for something that looks a bit like this.
13

14
00:01:16.230 --> 00:01:19.910
Let's start off by building a single one of these cards
14

15
00:01:19.920 --> 00:01:27.030
first. I'm going to go ahead and delete everything that's in the body of my scaffold because I don't
15

16
00:01:27.030 --> 00:01:28.980
actually need any of the text.
16

17
00:01:29.040 --> 00:01:34.320
And instead, what I want to have here is a container.
17

18
00:01:34.410 --> 00:01:42.390
Now my container is going to have a background color and it's going to be the color that we see in this
18

19
00:01:42.480 --> 00:01:43.660
design right here.
19

20
00:01:43.800 --> 00:01:52.470
And I've already extracted the hex code so if you want to simply add it, it's just a color that is 0
20

21
00:01:52.560 --> 00:01:59.200
xFF, and then it's 1D1E33.
21

22
00:01:59.220 --> 00:02:09.420
And now we should have a container on our screen which has that slightly lighter sort of purply color.
22

23
00:02:09.420 --> 00:02:15.440
Now I don't want it to cover the entire screen, so I want to be able to give it maybe a height.
23

24
00:02:15.570 --> 00:02:23.700
Let's give it a height of say 200 and a width of 170.
24

25
00:02:23.910 --> 00:02:30.900
Now we should have a small square that's stuck to the top left. But I actually want it to have a little
25

26
00:02:30.900 --> 00:02:37.980
bit of margin away from everything so that they're separated from each other like this.
26

27
00:02:38.040 --> 00:02:42.540
So I'm going to go ahead and add a margin to my container as well.
27

28
00:02:42.540 --> 00:02:50.080
And I've worked out that having a margin of about 15 from all sides looks pretty good.
28

29
00:02:50.880 --> 00:02:52.600
So that's what we've got now.
29

30
00:02:52.620 --> 00:02:58.150
Now the next step, you'll notice is that here the edges of my container is pretty sharp.
30

31
00:02:58.170 --> 00:03:02.060
I would love it if it looked a little bit more rounded like this.
31

32
00:03:02.070 --> 00:03:08.310
It looks a little bit more friendly, and it looks quite nice. To my eye at least. In order to achieve this,
32

33
00:03:08.400 --> 00:03:13.470
we need to be able to create a border radius on our container.
33

34
00:03:13.470 --> 00:03:18.900
And this is very similar to the border radius that you would see in sebsites if you've done any Web
34

35
00:03:18.900 --> 00:03:19.720
Development.
35

36
00:03:19.890 --> 00:03:25.970
And in order to implement it, we add something called a decoration property.
36

37
00:03:26.520 --> 00:03:34.230
And the decoration property expects something called a boxDecoration. And the box decoration has properties
37

38
00:03:34.230 --> 00:03:41.670
such as the color, the image border and also border radius which is what we're interested in.
38

39
00:03:41.790 --> 00:03:48.000
And this allows us to change our boxes to have a rounded corner.
39

40
00:03:48.480 --> 00:03:56.130
So I'm going to inset that border radius and I'm going to set it as a circular border radius, with a
40

41
00:03:56.130 --> 00:03:59.300
radius of 10 pixels.
41

42
00:03:59.370 --> 00:04:04.050
Let's hit save, and you'll see that our app will actually crash.
42

43
00:04:04.170 --> 00:04:12.750
And the reason is because when we use the color property for our container, it's actually just a shorthand
43

44
00:04:12.810 --> 00:04:17.650
for the color property of our box decoration.
44

45
00:04:17.650 --> 00:04:25.590
Notice that our box decoration also has a color property and that is actually the proper way of setting
45

46
00:04:25.590 --> 00:04:27.780
the color of a container's background.
46

47
00:04:27.780 --> 00:04:33.000
But because it's so frequently used, you don't want to have to write decoration, box decoration,
47

48
00:04:33.000 --> 00:04:40.320
color etc. all the time. The Flutter team made it simple for us to add a shorthand color on our container
48

49
00:04:40.590 --> 00:04:42.030
by using this property.
49

50
00:04:42.150 --> 00:04:49.510
But if we have a box decoration, then we have to move our color into the box decoration.
50

51
00:04:49.680 --> 00:04:55.950
And this way our code will no longer crash and we will have that light purple color background with
51

52
00:04:56.130 --> 00:04:58.480
rounded corners.
52

53
00:04:58.500 --> 00:05:06.360
Now if we were to go around our app and add a hardcoded size for each of these cards, then it won't really
53

54
00:05:06.360 --> 00:05:08.660
adapt to the size of the screen.
54

55
00:05:08.700 --> 00:05:17.460
So if the screen was changed to, for example, landscape or if it was on a smaller screen size, it will
55

56
00:05:17.610 --> 00:05:23.960
overflow and it will have those yellow bars where widgets are off the screen.
56

57
00:05:24.120 --> 00:05:32.820
So that's not what we want. The solution to that is to use an expanded widget, which we've seen previously.
57

58
00:05:32.820 --> 00:05:44.070
Let's go ahead and delete our height and width. And the challenge is for you to create this layout using
58

59
00:05:44.160 --> 00:05:52.140
the container that we've created just now, but laid out like this on the screen to fit the size that
59

60
00:05:52.140 --> 00:05:53.490
is available.
60

61
00:05:53.490 --> 00:05:58.580
Pause the video and see if you can achieve this look.
61

62
00:05:58.700 --> 00:05:59.000
All right.
62

63
00:05:59.000 --> 00:06:05.840
So first thing to notice is that everything is pretty much stacked in a column. And inside the first
63

64
00:06:05.840 --> 00:06:06.350
column,
64

65
00:06:06.380 --> 00:06:11.930
we've got a row of two cards and the same applies to the last column.
65

66
00:06:12.350 --> 00:06:20.150
So let's go ahead and cut out our container from the body and put it down here. And then go ahead and
66

67
00:06:20.210 --> 00:06:31.340
add a column which has some children. And our column is going to contain three expanded widgets, each
67

68
00:06:31.430 --> 00:06:32.860
with their own children.
68

69
00:06:32.870 --> 00:06:42.330
So I'm simply going to copy this and paste it three times. So each of these expanded widgets will be
69

70
00:06:42.330 --> 00:06:47.520
a single row in our column here, one, two and three.
70

71
00:06:47.520 --> 00:06:54.780
Now the first expanded widget is going to have a child that is a row widget. And it's also going to have
71

72
00:06:54.780 --> 00:06:59.220
some children and it's going to have two expanded widgets.
72

73
00:07:03.130 --> 00:07:08.540
So now we have our column with three rows which are each expanded widgets.
73

74
00:07:08.560 --> 00:07:16.030
We've added a row widget in the first row so they can have two expanded widgets and we're going to replicate
74

75
00:07:16.030 --> 00:07:17.410
that in the last row.
75

76
00:07:17.560 --> 00:07:24.700
So I'm simply going to copy this entire expanded widget and I'm going to replace the very last row with
76

77
00:07:24.790 --> 00:07:25.600
that.
77

78
00:07:25.690 --> 00:07:31.660
Now at the moment if you had save and you look at the screen, nothing really happens. And also we've
78

79
00:07:31.660 --> 00:07:33.950
got our code just lying around here,
79

80
00:07:33.970 --> 00:07:41.530
so it's not going to do much. But if we go ahead and we copy our container and add it as the child to
80

81
00:07:41.530 --> 00:07:49.840
every one of our expanded widgets, then you will see that all of our hard work laying out the screen
81

82
00:07:49.930 --> 00:07:57.040
using the expanded widgets, the columns and the rows now actually gets implemented on the screen and
82

83
00:07:57.040 --> 00:08:04.380
we actually see that design that we saw earlier on that we're trying to mimic. If this is at all confusing,
83

84
00:08:04.390 --> 00:08:10.510
be sure to head back to the video where we talked about columns, rows expanded widgets, flex properties
84

85
00:08:10.780 --> 00:08:14.620
and all of that so that this is really clear in your mind.
85

86
00:08:14.620 --> 00:08:21.670
Now be sure to add commas at the end of all of the widgets so that when you hit save, Dart will reformat
86

87
00:08:21.670 --> 00:08:31.670
your code properly for you so that everything looks neat and tidy. So this code works and it looks pretty
87

88
00:08:31.670 --> 00:08:36.800
much like what we want, but it's very very repetitive,
88

89
00:08:36.800 --> 00:08:37.180
right?
89

90
00:08:37.190 --> 00:08:44.060
We actually copied and pasted our container into six places, even though the container that we're putting
90

91
00:08:44.060 --> 00:08:47.210
in is completely identical.
91

92
00:08:47.210 --> 00:08:53.990
This should really set off your programmer spidery senses and it's a good time to actually refactor
92

93
00:08:54.020 --> 00:09:01.070
our code to be able to reduce the amount of repetition, so that we keep our code dry and you do not repeat
93

94
00:09:01.130 --> 00:09:05.760
yourself. In order to extract these containers,
94

95
00:09:05.760 --> 00:09:10.400
there's actually a really neat trick that we have access to from Flutter.
95

96
00:09:10.400 --> 00:09:17.840
If you select the widget that is repeated, which in our case is the container, and you go into the Flutter
96

97
00:09:17.930 --> 00:09:22.840
outline tab, you'll see it selected in the widget tree here.
97

98
00:09:22.850 --> 00:09:28.540
Now if you right click here, you can select extract widget.
98

99
00:09:28.730 --> 00:09:36.770
And what this will do is it'll ask you for a name for the new widget, which you're going to call reusable
99

100
00:09:36.980 --> 00:09:44.270
Card and we're going to refactor this into a new class.
100

101
00:09:44.270 --> 00:09:53.660
So this is now a new reusable card, and Flutter has actually created all of this code for us which simply
101

102
00:09:53.810 --> 00:10:03.290
extracts the widget into a separate class which extends a stateless widget and we can now use our reusable
102

103
00:10:03.290 --> 00:10:09.850
card anywhere where we have that container with the margin and the decoration and the color etc. Then
103

104
00:10:09.870 --> 00:10:12.190
that's why we kind of called it a reusable card
104

105
00:10:12.230 --> 00:10:12.570
right?
105

106
00:10:13.160 --> 00:10:18.780
So when Flutter generates this code automatically, you'll see it creates a 'new' keyword.
106

107
00:10:18.950 --> 00:10:21.050
And we haven't really seen that so far.
107

108
00:10:21.530 --> 00:10:28.270
And the reason is because as of Dart 2.0 the latest version of Dart, this was actually deprecated.
108

109
00:10:28.400 --> 00:10:36.380
So when we create new objects from a class using the latest version of Dart, we actually don't need this
109

110
00:10:36.440 --> 00:10:42.740
new keyword at all. We can simply just write the of name the class and then add the parentheses.
110

111
00:10:42.740 --> 00:10:51.020
We can now go and delete all of the places where we have that same container and simply create a new
111

112
00:10:51.200 --> 00:11:03.010
reusable card instead. Now you can see that our code is vastly simplified and we've reduced the code by something
112

113
00:11:03.010 --> 00:11:04.650
like 30 lines.
113

114
00:11:04.960 --> 00:11:07.150
And now it looks a lot clearer as well.
114

115
00:11:07.510 --> 00:11:13.660
So if we had a problem with our reusable card, all we need to do is to find the place where was created
115

116
00:11:13.960 --> 00:11:21.340
and actually tackle it here rather than having to fix it in six different places. Now in our stateless
116

117
00:11:21.340 --> 00:11:26.160
widget, you can see that we have this constructor up here.
117

118
00:11:26.290 --> 00:11:33.730
And if I change the way that it is formatted, it kind of starts looking familiar to what we learnt in
118

119
00:11:33.790 --> 00:11:38.120
the Quizzler module when we first learned about Dart classes and objects.
119

120
00:11:38.350 --> 00:11:41.860
In this case it keeps on talking about this thing called key.
120

121
00:11:41.860 --> 00:11:50.710
Now what exactly is a key? The key class is something that you use when you need to keep track of the
121

122
00:11:50.710 --> 00:11:52.390
state of widgets.
122

123
00:11:52.390 --> 00:11:58.810
And this is especially useful when your widgets are moving around in the widget tree, when they're changing
123

124
00:11:58.810 --> 00:12:00.760
their position in the widget tree.
124

125
00:12:00.760 --> 00:12:06.730
This usually happens when your widgets are physically moving on the screen such as in an animation or
125

126
00:12:06.760 --> 00:12:09.330
when you see things scrolling on screen.
126

127
00:12:09.490 --> 00:12:13.470
But in most other cases, we don't actually need it.
127

128
00:12:13.600 --> 00:12:19.780
So we're going to go ahead and delete this constructor that got generated automatically and we're going
128

129
00:12:19.780 --> 00:12:23.560
to create our very own constructor.
129

130
00:12:23.590 --> 00:12:29.770
Now if you want to learn more about when to actually use these keys and what they're used for, then head
130

131
00:12:29.770 --> 00:12:36.460
over to this link where Emily from the Flutter team actually explains to you in great detail how to use it and
131

132
00:12:36.460 --> 00:12:42.590
what it's used for and in which cases it will help your widgets be able to keep track of its state.
132

133
00:12:42.700 --> 00:12:45.320
A link to this in the course resources as well.
133

134
00:12:45.580 --> 00:12:54.190
But in our case, we don't need to do anything with the key. But if we want to be able to specify a custom
134

135
00:12:54.190 --> 00:13:01.270
value for one of the properties that we use in our reusable card, then we will need to have a constructor.
135

136
00:13:02.270 --> 00:13:09.500
The property that we might want to change about our reusable card is actually the color of the card
136

137
00:13:09.740 --> 00:13:13.820
because we might not always want to have the same color.
137

138
00:13:13.970 --> 00:13:20.030
And if you take a look at the final result, you can see that when we click on the male or female selector,
138

139
00:13:20.370 --> 00:13:27.200
then it actually changes the background color of the card to show that it's actually selected versus
139

140
00:13:27.200 --> 00:13:28.730
when it's inactive.
140

141
00:13:28.730 --> 00:13:34.910
This is something that we will need to change about our reusable cards. So it makes sense to have it
141

142
00:13:35.030 --> 00:13:43.390
as a property on the reusable card which we can pass over when we create a new reusable card widget.
142

143
00:13:44.000 --> 00:13:52.700
So we can go ahead and create a property and that property is going to be of the type color.
143

144
00:13:52.880 --> 00:13:55.780
And I'm simply going to call it colour as well.
144

145
00:13:55.940 --> 00:13:59.870
And because I'm from London, I will spell it this way
145

146
00:13:59.900 --> 00:14:07.040
but you can spell it whichever way you like. But it actually helps me to differentiate this color property
146

147
00:14:07.040 --> 00:14:13.330
that I've created from the color property that is from the container widget.
147

148
00:14:13.370 --> 00:14:15.980
So I prefer to spell it like this.
148

149
00:14:15.980 --> 00:14:22.370
And we're going to start it off with no value, so I'm simply going to end it with a semicolon. And then
149

150
00:14:22.370 --> 00:14:29.880
we're going to create the constructor for our reusable card. As a quick reminder of how you create constructors,
150

151
00:14:29.900 --> 00:14:32.770
we simply add the name of the class,
151

152
00:14:32.870 --> 00:14:34.800
we open up a set of parentheses
152

153
00:14:34.940 --> 00:14:42.140
and then inside here we add the property that we want to initialize, which in our case is this.colour,
153

154
00:14:42.800 --> 00:14:46.220
and then we finish off that statement.
154

155
00:14:46.220 --> 00:14:52.340
Now if we want to be able to refer to the name of this property, then we can also add a set of curly
155

156
00:14:52.340 --> 00:14:57.250
braces around all the properties that we want to be named.
156

157
00:14:57.320 --> 00:15:04.670
So now, that means when I go over here and I create my reusable card, I can actually add in the colour
157

158
00:15:04.670 --> 00:15:09.430
property and I can specify a custom color.
158

159
00:15:09.440 --> 00:15:12.020
So for example, maybe this one.
159

160
00:15:15.950 --> 00:15:22.640
And inside my reusable card instead of always using the same color whenever I create a new reusable
160

161
00:15:22.640 --> 00:15:29.120
card widget, I can use whichever colour was passed over when this widget was created.
161

162
00:15:29.750 --> 00:15:37.070
So now, we're getting closer to creating custom widgets whenever we need custom functionality or custom
162

163
00:15:37.070 --> 00:15:46.850
look and feel as in this case. Now at the moment, this property could colour is actually an optional property.
163

164
00:15:46.970 --> 00:15:53.220
So you can see up here, we created a reusable card here where we specified a color.
164

165
00:15:53.360 --> 00:15:59.900
But over here, we actually just initialized a reusable card widget without specifying anything in the
165

166
00:15:59.900 --> 00:16:00.930
constructor.
166

167
00:16:01.040 --> 00:16:06.360
And this is allowed because we're not getting any warnings over here or any errors.
167

168
00:16:06.530 --> 00:16:11.470
But if you think about it, every card probably is going to need a background color
168

169
00:16:11.480 --> 00:16:11.690
right?
169

170
00:16:11.690 --> 00:16:14.880
We can't have a null color for it.
170

171
00:16:14.960 --> 00:16:23.870
So it makes sense to always require a color whenever we're creating a reusable card widget. In order
171

172
00:16:23.870 --> 00:16:26.990
to make certain properties required,
172

173
00:16:26.990 --> 00:16:36.770
what we can do is in the constructor we can add an annotation that is the required keyword. And then
173

174
00:16:36.890 --> 00:16:40.730
after a space, we have the property that is required.
174

175
00:16:40.730 --> 00:16:46.980
So now if we scroll up, you'll be seeing these yellow highlights on all of these other reusable cards.
175

176
00:16:47.360 --> 00:16:52.660
And it's telling us that the parameter colour for this reusable code is required.
176

177
00:16:52.670 --> 00:16:54.390
So we have to put it in.
177

178
00:16:54.470 --> 00:17:00.210
So let's go ahead and add the same colour to all of our reusable cards.
178

179
00:17:00.410 --> 00:17:03.430
And now our warnings on the right will go away.
179

180
00:17:04.750 --> 00:17:11.290
So now if we had save and we take a look at our app, then absolutely nothing has changed. But we've refacted
180

181
00:17:11.320 --> 00:17:18.000
our code to make it more synced, more readable and much easier to fix when something goes wrong.
181

182
00:17:18.100 --> 00:17:25.750
And we've essentially created of very own custom widget which is a reusable card that we can use whenever
182

183
00:17:25.810 --> 00:17:32.710
we need that particular widget which is a rounded corner container with some margin and a background
183

184
00:17:32.710 --> 00:17:41.250
color which we specify when we create a new reusable card. And you can imagine that as we add more properties
184

185
00:17:41.400 --> 00:17:47.790
to our widget, we start building out a widget that's really similar to the default Flutter widgets. For
185

186
00:17:47.790 --> 00:17:54.110
example, our container has a margin property, a decoration property, a color property.
186

187
00:17:54.270 --> 00:17:59.130
And these are all properties that are in that particular class
187

188
00:17:59.130 --> 00:18:00.390
right?
188

189
00:18:00.420 --> 00:18:08.070
You can see that the container is a stateless widget and it has properties such as alignment, padding,
189

190
00:18:08.100 --> 00:18:09.360
decoration.
190

191
00:18:09.570 --> 00:18:15.210
And we can specify all of these when we create a new container widget.
191

192
00:18:15.210 --> 00:18:22.260
But in this case when we create a new reusable card widget, we're actually looking to our very own code
192

193
00:18:22.320 --> 00:18:26.270
to see how it should look and how it should behave.
193

194
00:18:26.280 --> 00:18:31.970
For example we could have a card that has a simply, a blue color.
194

195
00:18:34.140 --> 00:18:42.170
And now our widget updates to have that appearance, just as a floating action button would or a flat
195

196
00:18:42.180 --> 00:18:45.510
button would change when we change its property.
196

197
00:18:45.540 --> 00:18:50.480
So it's pretty much the same, but it's defined by us.
197

198
00:18:50.580 --> 00:18:56.390
Now the last thing I want to show you is here, we actually have a warning.
198

199
00:18:56.430 --> 00:19:05.430
And when we hover over it, it tells us that this class is marked as immutable. But one or more of its
199

200
00:19:05.490 --> 00:19:15.920
instance fields are not final, namely the Reusable Card.color field that refers to this right here.
200

201
00:19:16.110 --> 00:19:27.300
And what it's complaining about is that I haven't got the key word final in front of this field or property.
201

202
00:19:27.300 --> 00:19:35.220
The reason why this is important and the reason why we're getting these warnings is because final makes
202

203
00:19:35.370 --> 00:19:38.230
this property immutable.
203

204
00:19:38.280 --> 00:19:46.100
It means that when we create a new reusable card, we can set the color and we can't change it again.
204

205
00:19:46.110 --> 00:19:50.040
Now why this is important and how this actually works,
205

206
00:19:50.040 --> 00:19:52.200
I'm going to leave until the next lesson
206

207
00:19:52.320 --> 00:19:59.340
where we talk about final versus const, in the Dart programming language and how this affects the way
207

208
00:19:59.340 --> 00:20:02.280
that our widgets work and behave onscreen.
208

209
00:20:02.370 --> 00:20:05.310
So for all of that and more, I'll see you on the next lesson.
