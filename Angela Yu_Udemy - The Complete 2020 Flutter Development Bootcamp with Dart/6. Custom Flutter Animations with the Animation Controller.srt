0
1
00:00:00,240 --> 00:00:06,300
Now in the last lesson we looked at a really simple out-of-the-box animation that comes with Flutter
1

2
00:00:06,570 --> 00:00:12,630
which is the hero animation and we saw how easy it was to implement something that would have actually
2

3
00:00:12,630 --> 00:00:19,360
taken us a lot more code had we done it in a different platform. But in this lesson, we're going to take
3

4
00:00:19,360 --> 00:00:25,600
it a step further and we're going to be looking at how we implement super custom animations, things that
4

5
00:00:25,600 --> 00:00:31,510
we want to happen on screen, be it changing the background colour or changing the size of something or
5

6
00:00:31,510 --> 00:00:32,950
moving things around.
6

7
00:00:33,040 --> 00:00:38,650
But we're going to do it to the beat of our clock to say how long we want it to go on for whether if
7

8
00:00:38,650 --> 00:00:44,800
we want it to loop around and what we want to actually happen with those animations. But to be able to
8

9
00:00:44,800 --> 00:00:51,960
do this, we have to learn a little bit more about how custom animations work in Flutter. And again we're
9

10
00:00:51,960 --> 00:00:54,180
coming back to our smoothie analogy.
10

11
00:00:54,270 --> 00:00:59,760
Well in this case most of the animations that we're gonna be building with Flutter require just three
11

12
00:00:59,760 --> 00:01:05,130
things and it's three important concepts that you need to understand and to be able to really do what
12

13
00:01:05,130 --> 00:01:07,390
it is that you want it to do.
13

14
00:01:07,390 --> 00:01:14,460
And the three components are a ticker, an animation controller and an animation value.
14

15
00:01:14,760 --> 00:01:20,180
Now a ticker is exactly what it sounds like, it's a bit like the ticking of a clock.
15

16
00:01:20,230 --> 00:01:27,240
So we need something to be able to count and take our animation along so that at each tick of the clock,
16

17
00:01:27,660 --> 00:01:34,510
our animation changes in value and changes in shape or color whatever it may be. When you think about
17

18
00:01:34,510 --> 00:01:40,600
the simplest type of animation that you could create which is just by drawing different pictures onto
18

19
00:01:40,600 --> 00:01:46,210
a flip book and then as you flip through it, that's how the animation effect comes about.
19

20
00:01:47,080 --> 00:01:50,730
Well that's exactly the same with our animations in Flutter.
20

21
00:01:51,070 --> 00:01:58,810
So for every time the ticker ticks, it triggers a new set state so that we can render something different
21

22
00:01:58,960 --> 00:02:00,060
on screen,
22

23
00:02:00,220 --> 00:02:05,960
and it's just like flipping through the pages of a flip book. Now
23

24
00:02:05,980 --> 00:02:12,160
the other component is the animation controller and this is sort of the manager of the animation if
24

25
00:02:12,160 --> 00:02:12,910
you will.
25

26
00:02:12,970 --> 00:02:19,450
It's the animation controller class which is going to tell the animation to start, to stop, to go forwards,
26

27
00:02:19,450 --> 00:02:26,350
to loop back, how long to animate for, all of these things are determined when we create an animation
27

28
00:02:26,350 --> 00:02:29,800
controller and set its properties.
28

29
00:02:29,800 --> 00:02:35,350
And finally there's the animation value and this is the thing that actually does the animating.
29

30
00:02:35,350 --> 00:02:39,520
So usually the animation value will go from 0 to 1.
30

31
00:02:39,730 --> 00:02:46,990
And by using that value, we're able to change things such as the height or the size of a component or
31

32
00:02:46,990 --> 00:02:51,850
the color or the alpha or the opacity of a component.
32

33
00:02:51,850 --> 00:02:56,830
So let's try it out in actual code and apply our theory to practice.
33

34
00:02:56,830 --> 00:02:59,010
So I'm currently inside the welcome_screen
34

35
00:02:59,010 --> 00:03:07,700
.dart, and the first thing I'm gonna do in order to create my animation is to build a animation controller.
35

36
00:03:07,740 --> 00:03:15,100
We're first going to just build a variable which is of type AnimationController. And make sure that
36

37
00:03:15,100 --> 00:03:19,990
you've built an animation controller and not a AnimatedController.
37

38
00:03:21,840 --> 00:03:24,700
And we're just gonna give it a name of controller.
38

39
00:03:25,060 --> 00:03:27,190
So we haven't initialized anything yet.
39

40
00:03:27,190 --> 00:03:32,920
We're just saying that this is a variable that's going to hold data of type AnimationController. And
40

41
00:03:32,980 --> 00:03:39,510
the time when we actually want to initialize it is when our state object gets initialized.
41

42
00:03:39,640 --> 00:03:42,800
So we're going to override the init state method.
42

43
00:03:43,030 --> 00:03:51,460
So we know that this method gets called at the moment in time when this welcome screen state gets created.
43

44
00:03:52,600 --> 00:04:00,100
And it's right at that moment in time that we also want to create a animation controller and save it
44

45
00:04:00,190 --> 00:04:02,160
into this controller property.
45

46
00:04:02,260 --> 00:04:08,890
So we're going to create it using the animation controller's constructor, so we're going to say animation
46

47
00:04:08,890 --> 00:04:13,450
controller and you can see that it takes a number of properties.
47

48
00:04:13,480 --> 00:04:16,140
So one of those properties is the duration,
48

49
00:04:16,150 --> 00:04:20,070
so how long do you want this animation to go on for?
49

50
00:04:20,200 --> 00:04:29,080
And this property takes a duration object, so we can specify how long in days, hours, minutes, seconds etc..
50

51
00:04:29,200 --> 00:04:34,690
And so I'm gonna say that my animation is just going to last for 1 second.
51

52
00:04:34,990 --> 00:04:43,180
Now after I've specified the duration, the next property that is a required property for any animation
52

53
00:04:43,180 --> 00:04:47,170
controller you can see at the moment, I'm still getting this warning here,
53

54
00:04:47,170 --> 00:04:55,030
this little yellow triangle because my animation controller has a required parameter which is 'vsync'
54

55
00:04:55,270 --> 00:04:57,040
and I haven't provided it yet.
55

56
00:04:57,550 --> 00:05:06,060
So let's go ahead and do that. Now vsync, what exactly is this thing? Well this is where we provide the
56

57
00:05:06,060 --> 00:05:07,160
ticker provider.
57

58
00:05:07,170 --> 00:05:13,510
So what is the thing that can act as a ticker for our animation controller?
58

59
00:05:13,590 --> 00:05:18,960
Now usually, the ticker provider is going to be our state object,
59

60
00:05:18,960 --> 00:05:25,890
so in this case, it's our welcome screen state. And you can see that the welcome screen state inherits
60

61
00:05:25,950 --> 00:05:33,420
or extends its parent class which is a state widget. And to be able to turn this welcome screen state
61

62
00:05:33,450 --> 00:05:36,920
objects into something that can act as a ticker,
62

63
00:05:36,990 --> 00:05:47,520
we have to use the keyword 'with' and specify that this class welcome screen state can act as a single
63

64
00:05:47,520 --> 00:05:50,210
ticker provider.
64

65
00:05:50,340 --> 00:05:59,100
So it's like we're upskilling our welcome screen state with a new ability. The ability to act as a ticker
65

66
00:05:59,520 --> 00:06:01,950
for a single animation.
66

67
00:06:02,340 --> 00:06:07,730
So if we had multiple animations then we would use the TickerProviderStateMixin.
67

68
00:06:07,830 --> 00:06:11,670
But in this case because we only want to animate one thing,
68

69
00:06:11,670 --> 00:06:18,780
so we're going to use the single ticket provider as the add-on ability. Now when we're doing this,
69

70
00:06:18,790 --> 00:06:26,920
essentially what we're using is a concept called Mix in. And mix ins enable your class with different
70

71
00:06:27,070 --> 00:06:28,720
types of capability.
71

72
00:06:28,840 --> 00:06:37,540
And unlike inheriting from a class, you can add multiple mix ins to add many capabilities.
72

73
00:06:37,540 --> 00:06:45,490
Now in the next lesson of the course, we're going to do a deep dive on how mix ins work in Dart and what
73

74
00:06:45,490 --> 00:06:54,220
exactly they are and how they actually enable our class to be able to do things such as act as a ticker.
74

75
00:06:54,220 --> 00:07:00,940
But all we need to know for now is that by adding this single take a provider state Mix in, we enable
75

76
00:07:01,000 --> 00:07:05,590
our welcome screen state to act as the ticker provider.
76

77
00:07:05,590 --> 00:07:13,720
So when we go into our vsync property, when it's looking for a ticker, this is where we provide the current
77

78
00:07:13,780 --> 00:07:17,620
welcome screen state object as the value for the vsync.
78

79
00:07:17,650 --> 00:07:19,800
So this is what the ticker is going to be.
79

80
00:07:20,740 --> 00:07:27,670
And when we want to reference the object made from the class in the class' own code, we use the keyword
80

81
00:07:27,940 --> 00:07:35,750
'this'. So this line of code says that who's going to provide the ticker for my animation controller.
81

82
00:07:36,090 --> 00:07:39,900
It's going to be this current welcome screen state object.
82

83
00:07:40,110 --> 00:07:46,110
It's going to be the very object that gets created from this class which now has the capability to act
83

84
00:07:46,200 --> 00:07:52,220
as a ticker because we've added that mix in to the class declaration.
84

85
00:07:52,590 --> 00:07:56,030
So now that we have a ticker, we have a controller.
85

86
00:07:56,520 --> 00:08:05,170
Well all we need to do is to actually use the animation and get the animation to start. To do that on
86

87
00:08:05,170 --> 00:08:07,670
the next line inside our init state.
87

88
00:08:07,690 --> 00:08:12,640
We're going to tap in to our controller and we're going to say, 'forward',
88

89
00:08:13,090 --> 00:08:21,250
so this is going to proceed our animation forwards. Now by default, animation controllers will animate
89

90
00:08:21,400 --> 00:08:22,130
a number.
90

91
00:08:22,150 --> 00:08:31,080
So for every tick of the ticker, it will increase that number and the number usually goes from 0 to 1.
91

92
00:08:31,090 --> 00:08:35,450
So we'll go from 0.01 to 0.02.
92

93
00:08:35,500 --> 00:08:40,900
So in one second we might get 60 ticks on our ticker
93

94
00:08:40,900 --> 00:08:47,170
in which case our controller will animate from 0 to 1 in 60 steps.
94

95
00:08:47,170 --> 00:08:52,480
So if we wanted to be able to see what the controller is doing, well then we have to add a listener to
95

96
00:08:52,480 --> 00:08:52,630
it.
96

97
00:08:52,840 --> 00:08:58,780
So we say controller.addListener and the listener takes a callback.
97

98
00:08:58,990 --> 00:09:02,560
So we're going to add a callback in here.
98

99
00:09:02,560 --> 00:09:09,550
And now we can listen to the value of the controller which is the actual animation
99

100
00:09:09,550 --> 00:09:10,490
right?
100

101
00:09:10,540 --> 00:09:16,690
So let's print the value of the controller.value.
101

102
00:09:17,110 --> 00:09:25,210
And now let's go ahead and hit hot restart because remember, when our code is in the init state it only
102

103
00:09:25,210 --> 00:09:29,460
gets called the first time that this state gets created.
103

104
00:09:29,680 --> 00:09:32,130
And that doesn't happen when we reload.
104

105
00:09:32,200 --> 00:09:38,500
So let's click hot restart and let's take a look within that console to see the values that were getting
105

106
00:09:38,500 --> 00:09:39,480
printed.
106

107
00:09:39,790 --> 00:09:45,070
So you can see that we're getting zero for a while and then we're getting 0.32, 
107

108
00:09:45,250 --> 00:09:48,170
0.36, 0.39 e.t.c.
108

109
00:09:48,190 --> 00:09:59,260
And it ticks along and increases that value along a steady interval. So this number we can now use for
109

110
00:09:59,350 --> 00:10:00,850
a number of things right?
110

111
00:10:01,270 --> 00:10:07,570
So we could for example say, well what if we apply that number to our background color?
111

112
00:10:07,720 --> 00:10:15,720
If instead of having a boring white color, let's instead have a red color and we specify the opacity,
112

113
00:10:15,760 --> 00:10:19,490
so a red with a degree of opacity.
113

114
00:10:19,570 --> 00:10:28,890
Now the opacity takes a value between 0 and 1, 1 being fully opaque 0 being completely transparent.
114

115
00:10:28,900 --> 00:10:36,310
So this is a perfect application for our controller value which we already know to go from 0 to 1
115

116
00:10:36,670 --> 00:10:38,990
within the space of one second.
116

117
00:10:39,040 --> 00:10:42,820
So let's provide that as the opacity.
117

118
00:10:42,850 --> 00:10:49,690
So the controller.value which is also a double and this expected double
118

119
00:10:49,690 --> 00:10:51,340
so that's perfectly fine.
119

120
00:10:51,340 --> 00:10:58,210
So now if we hit hot restart again and we check out our screen, you can see that it starts out being
120

121
00:10:58,210 --> 00:10:59,620
completely transparent.
121

122
00:10:59,650 --> 00:11:05,080
So pretty much just showing what's behind it which is the material app which is black.
122

123
00:11:05,080 --> 00:11:08,410
But it doesn't actually change anything right?
123

124
00:11:08,440 --> 00:11:15,850
Why is it not changing, why is it not animating even though I can see that my values are in fact changing
124

125
00:11:15,910 --> 00:11:17,880
and animating?
125

126
00:11:18,160 --> 00:11:24,910
Well that of course comes back to how Flutter works and if you remind yourself about how Flutter is
126

127
00:11:24,910 --> 00:11:32,260
able to react to values such as the control.value, then you remember we're going to need
127

128
00:11:32,260 --> 00:11:38,820
set state to tell our app that this opacity is going to be dirty.
128

129
00:11:39,100 --> 00:11:45,060
And we have to rebuild our screen by calling the build method.
129

130
00:11:45,130 --> 00:11:49,880
So that means inside add listener, we can call set state.
130

131
00:11:49,880 --> 00:11:54,280
And we don't have to do anything inside set state because our values are already changing with the
131

132
00:11:54,280 --> 00:11:55,600
animation controller.
132

133
00:11:56,140 --> 00:11:57,340
So now if we hit run
133

134
00:12:01,290 --> 00:12:03,960
you can see our animation happens right?
134

135
00:12:03,960 --> 00:12:11,400
It goes from completely transparent red, which is basically showing what's behind, to completely fully
135

136
00:12:11,400 --> 00:12:12,920
opaque red.
136

137
00:12:13,020 --> 00:12:18,700
And it animates that across one second.
137

138
00:12:18,990 --> 00:12:27,090
Now the only property for our animation controller that's required is the vsync, to specify what is
138

139
00:12:27,090 --> 00:12:28,750
going to act as the ticker.
139

140
00:12:29,460 --> 00:12:32,970
But in this case we've also specified a duration,
140

141
00:12:33,000 --> 00:12:35,860
so how long the animation is going to run for.
141

142
00:12:36,000 --> 00:12:42,600
But there's also other properties that we can change such as the lower bound and the upper bound. If
142

143
00:12:42,600 --> 00:12:49,730
instead of animating our value from 0 to 1, we can change those values by changing the properties.
143

144
00:12:49,770 --> 00:12:54,780
So let's change the upper bound from 1 to 100.
144

145
00:12:54,840 --> 00:13:01,560
And now instead of changing the capacity of the background color, so I'm going to change that back to
145

146
00:13:01,560 --> 00:13:02,400
white,
146

147
00:13:02,490 --> 00:13:09,450
well instead let's go ahead and change our text. Instead of saying 'Flash chat', let's make it actually
147

148
00:13:09,450 --> 00:13:12,960
print out that value from 0 to 1.
148

149
00:13:13,080 --> 00:13:19,590
So let's add in our string interpolation symbol, our dollar sign, and then we're going to tap into that
149

150
00:13:19,590 --> 00:13:29,070
controller.value and because it's a double we should change it to an integer, a whole number, so that
150

151
00:13:29,160 --> 00:13:35,970
we don't have to look at 0.0etc. And then I'm going to add a percentage sign as a string,
151

152
00:13:36,030 --> 00:13:38,340
so it should be outside of the curly braces.
152

153
00:13:38,430 --> 00:13:45,480
And now if I run my app then you can see that instead of having flash chat show up on screen, I get a
153

154
00:13:45,480 --> 00:13:47,590
loading indicator right?
154

155
00:13:47,610 --> 00:13:54,030
It animates almost like a loading functionality, like it's going from 0 to 100% which looks
155

156
00:13:54,030 --> 00:13:54,690
pretty neat.
156

157
00:13:55,140 --> 00:14:00,180
So that's another way that we could use the controllers value to animate something on the screen.
157

158
00:14:03,010 --> 00:14:03,290
Now
158

159
00:14:03,310 --> 00:14:10,960
we can also use that value in order to maybe animate size. So let's restore this text back to flash
159

160
00:14:10,970 --> 00:14:19,090
chat and let's go into our logo container again. And instead of having a height of 60, let's make it go
160

161
00:14:19,090 --> 00:14:20,960
from 0 to 100.
161

162
00:14:21,010 --> 00:14:24,070
So let's apply that controller.value here.
162

163
00:14:24,610 --> 00:14:29,770
And because it's already expecting a double, then we can leave it just as that.
163

164
00:14:29,770 --> 00:14:37,570
So now when I run my app and we see the animation show up, we should see our logo go from 0 height
164

165
00:14:37,690 --> 00:14:42,760
to 100 pixels in height over a second through that animation.
165

166
00:14:42,760 --> 00:14:49,360
So you can see it's extremely flexible to use that controller's value to animate a whole bunch of things.
166

167
00:14:51,370 --> 00:14:58,970
Now at the moment, our animation happens linearly. So as it grows in size it grows linearly in size.
167

168
00:14:59,170 --> 00:15:05,470
And when we look at the value of the controller, you can see that the increments go from 0 through to
168

169
00:15:05,470 --> 00:15:08,360
100 pretty evenly right?
169

170
00:15:08,470 --> 00:15:13,490
And it's pretty much doing this about 60 times a second.
170

171
00:15:13,490 --> 00:15:21,000
Now what if we wanted this to look a little bit different? Well then we could use a class called Curved
171

172
00:15:21,060 --> 00:15:22,350
Animation.
172

173
00:15:22,350 --> 00:15:30,450
And this way we can change the animation value along a curve. And the types of curves that we can use
173

174
00:15:30,510 --> 00:15:37,410
include things such as bouncing for example. And Flutter has got this great documentation where it shows
174

175
00:15:37,410 --> 00:15:41,100
you what each type of curve looks like on a graph,
175

176
00:15:41,100 --> 00:15:48,510
so going from 0 to 1 and going along one second for example. And you can see what the animation
176

177
00:15:48,690 --> 00:15:54,960
as a result of applying each of these curves will look like depending on what you're trying to change.
177

178
00:15:55,020 --> 00:16:00,090
So let's try and do something really simple. Let's use a decelerate curve and let's see how we would
178

179
00:16:00,090 --> 00:16:02,410
do that in our code.
179

180
00:16:02,430 --> 00:16:09,480
So in order to use curves, we have to create another variable and this variable is going to be of type
180

181
00:16:09,810 --> 00:16:18,520
Animation. And we're going to call our animation just animation and then inside the init state, we're
181

182
00:16:18,520 --> 00:16:29,110
going to initialize that animation to a new curved animation. And a curved animation expects two required
182

183
00:16:29,110 --> 00:16:29,830
parameters.
183

184
00:16:29,830 --> 00:16:31,670
One is the parent.
184

185
00:16:31,840 --> 00:16:36,250
And notice the parent has to be an animation controller.
185

186
00:16:37,570 --> 00:16:41,830
Now the parent is what will we apply this curve to,
186

187
00:16:41,860 --> 00:16:44,940
so in this case this is going to be our controller,
187

188
00:16:44,970 --> 00:16:49,500
so our existing animation comes from this controller.
188

189
00:16:49,640 --> 00:16:54,970
The second property is what kind of curve we want to apply to our animation.
189

190
00:16:55,100 --> 00:17:01,090
And previously we picked out one from our curves, which was the decelerate curve.
190

191
00:17:01,220 --> 00:17:03,580
So that's the one that looks something like this.
191

192
00:17:03,590 --> 00:17:09,740
So if it was scale, it would be fast at first then it would decelerate scaling up towards the end.
192

193
00:17:09,800 --> 00:17:17,630
So now that we've created our curved animation and we specified what animation we want to apply this
193

194
00:17:17,630 --> 00:17:23,780
curve to and what type of curve we're going to apply to it, then the last thing that you have to check
194

195
00:17:23,870 --> 00:17:30,320
is make sure that when you're applying a curved animation to your controller that we can't actually
195

196
00:17:30,320 --> 00:17:33,610
have an upper bound that's greater than 1.
196

197
00:17:33,860 --> 00:17:36,940
These curves have to draw from 0 to 1.
197

198
00:17:37,430 --> 00:17:43,520
So if we leave this upper bound in then we'll actually get an exception thrown and our app or crash.
198

199
00:17:43,520 --> 00:17:46,030
Well let me show you firstly how that looks.
199

200
00:17:46,040 --> 00:17:52,550
So instead of using the controller value we're now going to use the animation value because the animation
200

201
00:17:52,610 --> 00:17:57,380
is almost like the layer that's applied on top of the control animation.
201

202
00:17:57,380 --> 00:18:06,200
So let's print the animation.value and inside our height property, let's change that to animation
202

203
00:18:06,200 --> 00:18:13,090
.value as well so that we use this new value that's generated based on the curve that we selected.
203

204
00:18:13,100 --> 00:18:16,580
So now if we hit run, our app will crash.
204

205
00:18:16,790 --> 00:18:25,160
And the reason that we'll get is because the upper bound can't be greater than 1, it has to be less
205

206
00:18:25,160 --> 00:18:26,600
than equal to 1.
206

207
00:18:26,600 --> 00:18:33,590
So always remember that if you're using curves to check and make sure that the upper bound is not larger
207

208
00:18:33,590 --> 00:18:38,900
than one. And if you just want one as the upper bound then you don't actually have to change anything.
208

209
00:18:39,920 --> 00:18:46,480
But having an animation that goes from 0 to 1 for the size of our image is not very useful
209

210
00:18:46,490 --> 00:18:47,020
right?
210

211
00:18:47,060 --> 00:18:50,730
We won't be able to see a change between 0 and 1.
211

212
00:18:50,810 --> 00:18:56,020
So let's multiply that number by 100 to exaggerate the effect.
212

213
00:18:56,500 --> 00:19:02,500
And I'm going to keep the animation value as it is to be printed so that we can see what it looks like.
213

214
00:19:02,510 --> 00:19:05,510
So now here's how our animation looks
214

215
00:19:05,510 --> 00:19:12,470
with that decelerate curve applied. It first starts out increasing in very large amounts,
215

216
00:19:12,470 --> 00:19:14,370
so 15 goes to 23 goes
216

217
00:19:14,380 --> 00:19:21,680
29 goes to 33, but then towards the end of the second, it starts increasing very slowly,
217

218
00:19:21,680 --> 00:19:25,330
0.98 0.99 0.99 etc..
218

219
00:19:25,460 --> 00:19:33,500
And the effect is that our image will increase in size very quickly and then it'll decelerate to stop
219

220
00:19:33,560 --> 00:19:36,080
expanding towards the end.
220

221
00:19:36,080 --> 00:19:39,830
Now feel free to check out what some of the other curves look like.
221

222
00:19:39,830 --> 00:19:45,230
For example we can have 'ease in' as one of the curves and this one will actually be kind of like the
222

223
00:19:45,230 --> 00:19:45,710
opposite.
223

224
00:19:45,710 --> 00:19:51,090
It'll be slow to start with but then it'll be a bit faster towards the end. Now
224

225
00:19:51,100 --> 00:19:54,940
what if I wanted my animation to go the other way,
225

226
00:19:54,940 --> 00:19:57,940
what if I wanted to go from large to small?
226

227
00:19:57,970 --> 00:20:05,350
Well instead of getting our controller to go forwards, I can actually make it reverse. And I can say my
227

228
00:20:05,350 --> 00:20:12,680
animation should reverse and when we're reversing, it's a good idea to specify a from property.
228

229
00:20:12,680 --> 00:20:15,550
So this is going to be the new starting point.
229

230
00:20:15,580 --> 00:20:23,470
So let's say that we start off at 1 times 100 and then we go all the way down to 0.
230

231
00:20:23,890 --> 00:20:31,180
So now if we hit run and we take a look at our animation, it starts out big but then goes back down to
231

232
00:20:31,180 --> 00:20:32,930
small again,
232

233
00:20:32,980 --> 00:20:41,650
so from 100 to 1. What if we wanted our animation to loop, what we wanted it to go large then go small
233

234
00:20:41,680 --> 00:20:43,900
and large then go small?
234

235
00:20:43,900 --> 00:20:50,260
Well in order to do that we need to know when the animation has actually completed, when has a reverse
235

236
00:20:50,260 --> 00:20:51,850
animation completed
236

237
00:20:51,850 --> 00:20:55,300
wnd when has a forward animation completed.
237

238
00:20:55,300 --> 00:20:58,960
So let's go ahead and change this back to forward.
238

239
00:20:59,380 --> 00:21:07,810
And we're going to use a method that we can attach to our animation which is called addStatusListener.
239

240
00:21:07,810 --> 00:21:14,200
And here we can pass a callback that listens for the status of the animation.
240

241
00:21:14,320 --> 00:21:19,350
So let's just print it out and see what the status actually is.
241

242
00:21:19,540 --> 00:21:25,960
And if we take a look at the console along with our animation, you can see that once our animation has
242

243
00:21:25,960 --> 00:21:30,550
completed, we get the status animation status completed.
243

244
00:21:30,760 --> 00:21:36,970
So we know that if we're doing a forward animation, we can detect when it's actually done animating by
244

245
00:21:37,060 --> 00:21:40,420
checking for that status of .complete.
245

246
00:21:40,540 --> 00:21:48,220
But if we use a reverse animation, so let's again make it go from 1 to 0.
246

247
00:21:48,220 --> 00:21:56,790
Now in this case, what we get is we get animation status dismissed called.
247

248
00:21:56,930 --> 00:22:04,070
So the end of the reversed animation is dismissed and the end of the forward animation is complete.
248

249
00:22:04,070 --> 00:22:14,180
So that means we can now quite easily check to see if the status is equal to AnimationStatus
249

250
00:22:14,300 --> 00:22:20,600
.completed, then that means the forward animation is done and we can make it go backwards.
250

251
00:22:20,600 --> 00:22:31,670
So we can say controller.reverse from 1. And then we can check or else if the status is equal to
251

252
00:22:31,730 --> 00:22:39,470
AnimationStatus.dismissed, then that's the end of that reverse animation and we can make it go forwards
252

253
00:22:39,500 --> 00:22:47,360
again. So we start out by telling our controller to animate forwards,
253

254
00:22:47,500 --> 00:22:49,870
so it goes from small to large.
254

255
00:22:49,870 --> 00:22:57,250
Once that's done then our status will trigger as completed and we make it go reverse.
255

256
00:22:57,250 --> 00:23:03,310
And then once the reverse animation is done then we'll get a status of dismissed and we make it go forwards
256

257
00:23:03,310 --> 00:23:03,640
again.
257

258
00:23:03,850 --> 00:23:12,160
So now if I hit run you'll see my animation bounce from large to small to large to small until eternity
258

259
00:23:12,190 --> 00:23:13,490
basically.
259

260
00:23:13,480 --> 00:23:21,970
And this is a good point to mention that this animation will continue forever unless we actually trash
260

261
00:23:22,060 --> 00:23:25,240
the animation controller. At the moment,
261

262
00:23:25,240 --> 00:23:31,840
even if this screen is dismissed that controller still lives on and it's costing resources.
262

263
00:23:32,200 --> 00:23:40,870
So whenever you're using animation controllers, it's really important that you tap into the dispose method
263

264
00:23:41,260 --> 00:23:48,670
and override it so that when the screen is going to be disposed or when this welcome screen state is
264

265
00:23:48,670 --> 00:23:53,830
going to be destroyed, we have to make sure that we also dispose our controller.
265

266
00:23:54,310 --> 00:24:01,040
So this way it doesn't end up staying in memory and hogging all the resources.
266

267
00:24:01,170 --> 00:24:08,520
So now the final type of animation I want to show you is what's called a tween animation.
267

268
00:24:08,520 --> 00:24:17,590
It's basically a set of predefined tween animations that essentially go in between values.
268

269
00:24:17,850 --> 00:24:24,720
So for example we have a starting color and we have an ending color, then our tween is going to go from
269

270
00:24:24,720 --> 00:24:29,360
the beginning to the end in a smooth transition.
270

271
00:24:29,460 --> 00:24:33,120
So firstly let's go ahead and delete the addStatusListener.
271

272
00:24:33,120 --> 00:24:37,140
We don't want our animation to be bouncing back and forth anymore.
272

273
00:24:37,140 --> 00:24:43,950
And I'm also gonna delete my curved animation but I'm going to keep that animation variable, but instead
273

274
00:24:44,040 --> 00:24:50,880
I'm going to sign it to have a different value and I'm going to set it to be a ColorTween animation
274

275
00:24:50,880 --> 00:24:52,130
instead.
275

276
00:24:52,200 --> 00:24:58,870
Now this color tween animation only takes two properties, a begin and an end.
276

277
00:24:58,980 --> 00:25:01,800
So the begin is the starting color,
277

278
00:25:01,800 --> 00:25:07,470
so let's say we'll choose colors.red maybe and the end
278

279
00:25:07,470 --> 00:25:12,440
we could tween over to a colors.blue
279

280
00:25:12,470 --> 00:25:18,570
let's say. This is going to look really ugly, but nonetheless that works just fine for us.
280

281
00:25:18,570 --> 00:25:26,340
So here we've created a color tween and once we're done defining the tween, we're going to call animate
281

282
00:25:26,430 --> 00:25:32,750
on it which is going to return an animation that uses this color tween.
282

283
00:25:32,760 --> 00:25:39,860
And that's what we're saving into this animation variable here. And we're going to apply this color tween
283

284
00:25:40,220 --> 00:25:48,410
to our animation controller. So now we're building a color tween that's going to transition from red
284

285
00:25:48,590 --> 00:25:56,210
to blue and it's going to apply that animation to our controller to build an entirely new animation.
285

286
00:25:56,240 --> 00:25:59,190
Now we can use that animation,
286

287
00:25:59,240 --> 00:26:05,850
so I'm going to change this height back down to 60 now and we're going to keep it non-animated.
287

288
00:26:05,990 --> 00:26:11,360
I don't like the logo bouncing around. And instead we're going to apply that color right here.
288

289
00:26:11,390 --> 00:26:20,070
So we're going to change the background color to animation.value. And now when I run the app you
289

290
00:26:20,070 --> 00:26:25,020
can see that the color changes from red to blue within a second.
290

291
00:26:25,110 --> 00:26:31,290
So I can probably make that a little bit longer than one second just to make it easier to see.
291

292
00:26:31,320 --> 00:26:38,980
So let's change that to maybe let's say over 3 seconds and we can see that transition happen a little
292

293
00:26:38,980 --> 00:26:41,780
bit slower as it goes from red to blue.
293

294
00:26:41,980 --> 00:26:48,490
And in the console, you can see because we're logging the animation.value it's actually building
294

295
00:26:48,610 --> 00:26:54,750
a color that goes through each of the steps from red all the way down to blue.
295

296
00:26:54,880 --> 00:27:02,500
And it builds out small increments in changes in order to go from the red to the blue.
296

297
00:27:02,500 --> 00:27:07,220
So this is what tween or in-between animations are.
297

298
00:27:07,240 --> 00:27:12,790
Now there's a whole bunch of other tween animations that you can use, such as the border radius tween
298

299
00:27:12,820 --> 00:27:14,470
or the alignment tween.
299

300
00:27:14,830 --> 00:27:20,150
But what they all do is take a beginning value and an end value
300

301
00:27:20,260 --> 00:27:26,650
and you can structure the code in the same way where we create the tween, we animated it and apply it
301

302
00:27:26,650 --> 00:27:34,190
to an animation controller. And then we use the value of that animation inside our build method.
302

303
00:27:34,210 --> 00:27:41,080
So the animation.value for the color tween is obviously going to be a color but the animation of
303

304
00:27:41,110 --> 00:27:48,010
a border radius tween will be a border radius that we could maybe apply to say our buttons.
304

305
00:27:48,970 --> 00:27:56,320
So in this lesson we've looked at a lot of different types of animations and the ones that I'm going
305

306
00:27:56,320 --> 00:28:04,480
to actually keep is probably just the color tween animation where I'm going to begin with a maybe a
306

307
00:28:04,570 --> 00:28:06,980
grey or blue-grey color,
307

308
00:28:07,240 --> 00:28:11,830
and then we're going to end on a white color background,
308

309
00:28:11,830 --> 00:28:17,500
so colors.white. And we're going to change it back down to one second.
309

310
00:28:17,500 --> 00:28:23,860
So this way when our app first loads up and the user sees our welcome screen, it's going to be a quick
310

311
00:28:23,890 --> 00:28:30,130
animation that just reveals our welcome screen. In the next lesson,
311

312
00:28:30,160 --> 00:28:38,060
we're going to do a deep dive on Dart mix ins and learn what this 'with' keyword does and what these mix
312

313
00:28:38,060 --> 00:28:40,630
ins actually do to our class.
313

314
00:28:40,630 --> 00:28:47,020
So if you already know a lot about mix ins and you have no problems understanding this code, then feel
314

315
00:28:47,020 --> 00:28:52,840
free to skip the next lesson. But if you want to know what this is all about, how it works and why we
315

316
00:28:52,840 --> 00:28:53,670
would use it,
316

317
00:28:53,830 --> 00:28:55,240
then I'll see you on the next lesson.
