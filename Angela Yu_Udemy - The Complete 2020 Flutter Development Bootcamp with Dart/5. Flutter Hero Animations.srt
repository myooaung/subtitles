0
1
00:00:00,900 --> 00:00:07,380
Now these days it's hard to come by a good app that doesn't feature any animations.
1

2
00:00:07,380 --> 00:00:14,550
It seems like every single app is taking advantage of the improved resources of mobile phones and they're
2

3
00:00:14,550 --> 00:00:22,980
all giving their user interfaces some sort of animation that makes it pop or jump or rotate and it looks
3

4
00:00:23,040 --> 00:00:26,040
so much flashier and so much more engaging
4

5
00:00:26,070 --> 00:00:33,660
when we add animations to our apps. So in the next few lessons I want to focus on how to create animations
5

6
00:00:33,780 --> 00:00:41,310
in Flutter so that you can also create delightful experiences for the user by incorporating these animations
6

7
00:00:41,370 --> 00:00:43,640
into your Flutter apps.
7

8
00:00:43,680 --> 00:00:50,950
Now when we're building animations using native API such as Android and iOS, because a lot of the SDK
8

9
00:00:51,000 --> 00:00:57,480
were built in an age where animations were almost like an afterthought, the initial Android and iPhones
9

10
00:00:57,600 --> 00:01:02,460
didn't have the resources to be able to animate things with ease.
10

11
00:01:02,850 --> 00:01:08,970
So these animation libraries actually came much later and if you look through a tutorial for how to
11

12
00:01:08,970 --> 00:01:14,490
build an animation in iOS or Android especially something a little bit more complex a little bit more
12

13
00:01:14,490 --> 00:01:20,370
involved with curves or different timings, you can see that it actually usually involves quite a lot
13

14
00:01:20,490 --> 00:01:27,570
of code. But because Flutter was built much more recently, it knows how important animations are to modern
14

15
00:01:27,570 --> 00:01:28,350
apps.
15

16
00:01:28,350 --> 00:01:34,230
And so when implementing animations using the Flutter SDK, you'll find that it's actually incredibly
16

17
00:01:34,230 --> 00:01:40,080
simple to add animations to your Flutter apps. So there's no reason to hold you back.
17

18
00:01:40,380 --> 00:01:45,690
Now in this lesson we're going to talk about one of the easiest and most commonly use animations in
18

19
00:01:45,690 --> 00:01:48,630
Flutter apps, and these are hero animations.
19

20
00:01:48,660 --> 00:01:51,240
So what does a hero animation look like?
20

21
00:01:51,240 --> 00:01:54,570
Well it usually takes place on a screen transition.
21

22
00:01:54,570 --> 00:02:02,310
So when we go from page 1 of the screen to Page 2 of the screen if they have a shared element, then that
22

23
00:02:02,370 --> 00:02:06,960
element will transition between page 1 and page 2.
23

24
00:02:07,110 --> 00:02:13,470
So that element, being an image or an icon or whatever it may be, has to be present on both pages and
24

25
00:02:13,470 --> 00:02:22,760
it will have a continuous transition as the user navigates from page  1 on to page 2 of the app. Now
25

26
00:02:22,790 --> 00:02:26,910
because they have that requirement of having a shared element,
26

27
00:02:27,020 --> 00:02:34,790
if you come from Android you might know this animation as a shared element transition, and it looks like
27

28
00:02:34,790 --> 00:02:36,900
this on a real Flutter app.
28

29
00:02:36,950 --> 00:02:43,670
So we're transitioning from one screen to another screen and that shared element is being tweened or
29

30
00:02:43,670 --> 00:02:52,450
being animated steadily across the two screens. And in this lesson we're going to implement hero animations
30

31
00:02:52,810 --> 00:02:55,120
into our app.
31

32
00:02:55,120 --> 00:03:00,670
This way when the user goes from the welcome screen to the log in screen, that little lightning icon
32

33
00:03:01,000 --> 00:03:07,890
will transition onto the second screen in a smooth transition like this,
33

34
00:03:08,140 --> 00:03:14,080
so this is what we're going to implement. And to do that we're going to need to first read up a little
34

35
00:03:14,080 --> 00:03:20,380
bit on hero animations. But as you would imagine, we're going to be using a widget and that widget is
35

36
00:03:20,380 --> 00:03:22,030
called the hero widget.
36

37
00:03:22,450 --> 00:03:27,700
And to implement a hero widget animation, all you need are three ingredients.
37

38
00:03:27,700 --> 00:03:35,490
The first ingredient is two hero widgets, one widget on the first screen and another on the second screen.
38

39
00:03:36,130 --> 00:03:42,550
And then those hero widgets need to share a tag property, so they will both have a tag property and you
39

40
00:03:42,550 --> 00:03:47,000
need to set it to have the same value on both hero widgets.
40

41
00:03:47,080 --> 00:03:53,840
And finally we're going to be navigating between the first and the second screen using a navigator-based
41

42
00:03:53,840 --> 00:04:02,180
screen transition such as push or pop. And that's all you need to implement the hero animation, dead simple.
42

43
00:04:02,180 --> 00:04:05,120
So let's go ahead and do that for our app.
43

44
00:04:05,540 --> 00:04:12,020
So in the welcome screen we know that we have this image which shows our logo, which is that lightning
44

45
00:04:12,020 --> 00:04:12,850
image.
45

46
00:04:12,890 --> 00:04:20,360
Now here, instead of having our container just be a bog standard non-moving container, we're going to
46

47
00:04:20,360 --> 00:04:23,390
wrap it inside a hero widget.
47

48
00:04:23,390 --> 00:04:32,000
So it's called Hero and this widget has only one required property and that's the tag. Without the tag
48

49
00:04:32,030 --> 00:04:38,350
the hero widget won't be able to figure out which other hero widget for it to animate to.
49

50
00:04:38,360 --> 00:04:44,870
So let's go ahead and give it a tag and let's call this logo just so that we know what the hero widget
50

51
00:04:45,110 --> 00:04:47,690
contains, which is our logo image.
51

52
00:04:47,690 --> 00:04:56,240
Now notice that in this first hero widget, our container has a height of 60 pixels.
52

53
00:04:56,240 --> 00:05:02,780
Once we decide to click on the register button, we're going to be using the navigator to transition to
53

54
00:05:02,780 --> 00:05:04,790
the registration screen.
54

55
00:05:04,790 --> 00:05:11,270
So if we head over to our registration_screen.dart and locate where we have that shared element which
55

56
00:05:11,270 --> 00:05:13,550
is our image of the same logo.
56

57
00:05:13,970 --> 00:05:17,270
Well in this case our container has a slightly different height.
57

58
00:05:17,320 --> 00:05:21,260
It's much larger, it's 200 pixels instead of 60.
58

59
00:05:21,710 --> 00:05:29,210
So let's wrap this container inside a hero widget also, and let's give it a tag and make sure that the
59

60
00:05:29,210 --> 00:05:35,990
tag matches precisely with the previous tag for our previous hero widget.
60

61
00:05:35,990 --> 00:05:38,930
So this is the starting hero widget
61

62
00:05:39,110 --> 00:05:42,580
and this is the final ending hero widget.
62

63
00:05:43,160 --> 00:05:48,710
And because they have the same tag, then Flutter knows that this is the end appearance
63

64
00:05:48,770 --> 00:05:51,390
and this is the beginning appearance.
64

65
00:05:51,440 --> 00:05:56,840
So notice the only change is the height or the size of our image.
65

66
00:05:57,410 --> 00:06:01,660
That's all we need to be able to implement a hero animation.
66

67
00:06:02,000 --> 00:06:07,880
And if we go ahead and run our app, you'll see that we actually get a pretty sophisticated looking animation
67

68
00:06:08,180 --> 00:06:11,570
for pretty much very little work that we've done just now.
68

69
00:06:12,020 --> 00:06:18,650
So because my hero widget lives in the registration screen, I'm going to go ahead and click on the register
69

70
00:06:18,650 --> 00:06:23,870
button and I want you to watch this little image, our logo image here.
70

71
00:06:23,870 --> 00:06:30,300
Notice how it transitions from being a small image to a much larger image.
71

72
00:06:30,410 --> 00:06:36,690
And that image is always on screen even as this first screen is being covered up.
72

73
00:06:36,770 --> 00:06:46,390
So that image is almost hovering in midair when it animates and transitions to the next screen.
73

74
00:06:46,400 --> 00:06:48,620
So now here's a challenge for you.
74

75
00:06:48,620 --> 00:06:55,140
We've implemented the hero widget that goes from the welcome screen to the registration screen.
75

76
00:06:55,160 --> 00:07:01,820
Try and figure out if you can get the same effect to happen when we click on the log in screen for that
76

77
00:07:01,910 --> 00:07:08,010
image to also perform that hero animation when we go to the log in screen.
77

78
00:07:08,090 --> 00:07:14,050
So pause a video and try to complete this challenge.
78

79
00:07:14,390 --> 00:07:19,580
Now we have our starting point for our hero animation in our welcome screen.
79

80
00:07:19,580 --> 00:07:27,050
And as long as we create a hero widget with the same tag, then we'll be able to transition it to any
80

81
00:07:27,050 --> 00:07:27,970
screen.
81

82
00:07:28,190 --> 00:07:35,570
So we could create a hero widget and wrap our container with the image on our log in screen inside that
82

83
00:07:35,570 --> 00:07:41,830
new hero widget and give it the same tag as the one that we had on the welcome screen.
83

84
00:07:41,830 --> 00:07:49,970
So notice how this tag is now present in three places, log in screen, registration and welcome screen.
84

85
00:07:49,970 --> 00:07:54,330
There's no limit to how many hero elements you can have with the same tag.
85

86
00:07:54,500 --> 00:08:00,770
But this means that when we go from welcome screen to log in screen, Flutter  can find a hero widget with
86

87
00:08:00,770 --> 00:08:04,250
the same tag, logo here and logo here.
87

88
00:08:04,580 --> 00:08:10,550
And that means when we run our app again, we should now be able to implement the hero animation both
88

89
00:08:10,550 --> 00:08:18,320
when we click on log in as well as when we click on register. And all we needed was pretty much just
89

90
00:08:18,440 --> 00:08:20,120
two lines of code,
90

91
00:08:20,120 --> 00:08:28,340
super simple. Now in the next lesson we're going to look at some more custom animations and we're going
91

92
00:08:28,340 --> 00:08:36,890
to be using the animated controller to be able to define a more complex animation, such as how long do
92

93
00:08:36,890 --> 00:08:42,560
we want the animation to go on for or how do we want the animation to unfold.
93

94
00:08:42,560 --> 00:08:46,010
So for all of that and more, I'll see on the next lesson.
