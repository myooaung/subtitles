0
1
00:00:00,270 --> 00:00:06,960
So in the last lesson we've successfully tapped into the Open Weather Map's data servers and we've gotten
1

2
00:00:06,960 --> 00:00:10,200
back the data for the current weather.
2

3
00:00:10,200 --> 00:00:15,500
Now this weather data is formatted in what's called a JSON format.
3

4
00:00:16,700 --> 00:00:21,860
And what you'll find is that most API providers are split into two camps.
4

5
00:00:21,890 --> 00:00:28,880
They'll either provide you the data in the XML format, the extensible markup language format or something
5

6
00:00:28,880 --> 00:00:35,000
called a JSON format. And some API providers even give you a choice as to which type of response you
6

7
00:00:35,000 --> 00:00:40,280
would like. And Open Weather Map is one of those types of providers.
7

8
00:00:40,280 --> 00:00:46,610
So you can see here that we're getting our data back in our JSON format. But we can also say that we
8

9
00:00:46,610 --> 00:00:53,340
want the XML mode to get the same data back in the XML style. Now
9

10
00:00:53,360 --> 00:00:57,320
previously, we've already seen what an XML file looks like
10

11
00:00:57,320 --> 00:01:01,900
when went into the Android manifest and the iOS plist.
11

12
00:01:02,060 --> 00:01:09,200
So when we take a look at the app, src, main and we open up our Android manifest, you can see that this
12

13
00:01:09,200 --> 00:01:14,870
is styled in the SML format. And XML looks very similar to HTML
13

14
00:01:14,870 --> 00:01:20,450
if you've ever used that. It's essentially a whole bunch of key value pairs.
14

15
00:01:20,630 --> 00:01:27,890
So the name of the key is the tag and there's an opening tag and a closing tag. And you can tell that
15

16
00:01:27,890 --> 00:01:35,270
it's a closing tag because it has a forward slash before the key. In between those tags is the actual
16

17
00:01:35,270 --> 00:01:36,650
value of the key.
17

18
00:01:36,710 --> 00:01:42,740
So the key could be something like temperature forward slash temperature in the middle it could be 32
18

19
00:01:42,890 --> 00:01:46,230
or whatever value it might be. Now
19

20
00:01:46,270 --> 00:01:54,340
JSON however stands for JavaScript Object Notation, so it's a format that looks extremely similar to
20

21
00:01:54,340 --> 00:02:01,390
how you would create objects in JavaScript. And the way that it's styled looks something like this. Every
21

22
00:02:01,390 --> 00:02:05,410
key value pair is enclosed in a set of curly braces.
22

23
00:02:05,410 --> 00:02:07,300
And the first part is the key,
23

24
00:02:07,300 --> 00:02:14,070
then there's a colon and then there's the value. And this looks very similar to the maps that we have
24

25
00:02:14,220 --> 00:02:17,050
in Dart as well. Now
25

26
00:02:17,090 --> 00:02:20,990
this is our weather data in a JSON format.
26

27
00:02:20,990 --> 00:02:28,340
So for example in this case the coordinates here is the first key and the value is everything that comes
27

28
00:02:28,490 --> 00:02:29,430
afterwards.
28

29
00:02:29,450 --> 00:02:32,060
So it's the lon and the lat.
29

30
00:02:32,090 --> 00:02:39,080
Now you can see that the value for the coordinates itself has a key value pair, where lon is the key
30

31
00:02:39,230 --> 00:02:42,560
and -0.13 is the value.
31

32
00:02:42,560 --> 00:02:51,120
Now as a human, it's actually quite hard to be able to read this without having it formatted. So a really
32

33
00:02:51,120 --> 00:02:54,860
useful tool is something like a JSON viewer.
33

34
00:02:55,350 --> 00:02:57,270
So this is a Chrome plugin called
34

35
00:02:57,270 --> 00:02:59,310
JSON Viewer Awesome
35

36
00:02:59,310 --> 00:03:03,060
and it's free to download and add to your chrome browser.
36

37
00:03:04,640 --> 00:03:13,250
And now if we go back to where we had our JSON data in the response and we hit refresh, you can see
37

38
00:03:13,250 --> 00:03:20,750
that JSON viewer has now formatted all of that data into a format that's much much easier to read as
38

39
00:03:20,810 --> 00:03:21,500
a human.
39

40
00:03:21,500 --> 00:03:26,150
So essentially we've got a single JSON, which contains 12 items.
40

41
00:03:26,150 --> 00:03:27,700
So one of those is coordinates,
41

42
00:03:27,710 --> 00:03:29,450
one is weather, one is base,
42

43
00:03:29,450 --> 00:03:30,470
one is main.
43

44
00:03:30,590 --> 00:03:35,070
But each of these object then have their own objects inside it.
44

45
00:03:35,300 --> 00:03:44,300
So the coord contains the lon and the lat, the weather contains one item and the item contains an ID
45

46
00:03:44,600 --> 00:03:48,230
for the weather condition, the weather name.
46

47
00:03:48,230 --> 00:03:52,390
So it's currently drizzling in London as always.
47

48
00:03:52,490 --> 00:03:56,380
And it's got a description and you can also view it as a chart.
48

49
00:03:56,390 --> 00:03:57,970
So a whole bunch of nodes.
49

50
00:03:57,970 --> 00:04:01,740
So for example response goes the coordinates, goes lon  and goes lat.
50

51
00:04:01,760 --> 00:04:06,710
And when you hover over them, you can view the values like this.
51

52
00:04:07,050 --> 00:04:14,520
So the way that I would view a JSON is it's almost like those flat pack furniture things where if you
52

53
00:04:14,520 --> 00:04:20,670
were to create say a map in Dart, you might write var wardrobe =
53

54
00:04:20,670 --> 00:04:25,260
you open up your curly braces and then you have some key and value pairs.
54

55
00:04:25,290 --> 00:04:30,540
So our wardrobe has two doors, has two drawers and it has the color red.
55

56
00:04:30,540 --> 00:04:37,630
Now if we were to transport this data across the Internet, that's actually quite a lot of characters.
56

57
00:04:37,650 --> 00:04:41,280
How can we make it more flat pack, more like our IKEA furniture?
57

58
00:04:41,850 --> 00:04:49,050
Well we could probably just have those key and value pairs and take out the rest of the grammar or the
58

59
00:04:49,050 --> 00:04:50,070
syntax.
59

60
00:04:50,070 --> 00:04:52,160
So it might look something like this.
60

61
00:04:52,770 --> 00:04:58,770
And once we've transported this data across the Internet, keeping it as small as possible.
61

62
00:04:58,770 --> 00:05:04,830
Once it lands on the floor of the location that it needs to be, so in our app for example,
62

63
00:05:04,980 --> 00:05:11,650
well then we can unpack it and assemble it back into its original form.
63

64
00:05:11,660 --> 00:05:19,400
So now if I was to try and unpack the data from our response for the weather, if I for example wanted
64

65
00:05:19,400 --> 00:05:27,380
to tap into this value so the value of the longitude, then what I would have to do is we have to use
65

66
00:05:27,440 --> 00:05:31,820
the help of a Dart package called dart:convert.
66

67
00:05:32,330 --> 00:05:39,440
And once we import dart:convert, then we can start using a method that comes from that package called
67

68
00:05:39,530 --> 00:05:41,730
jsonDecode.
68

69
00:05:41,780 --> 00:05:44,920
And here we can pass in a source,
69

70
00:05:44,960 --> 00:05:51,110
so a bit of JSON data, and it'll will try to decode it depending on what values we want.
70

71
00:05:51,860 --> 00:05:58,820
So for example if I wanted to unpack my JSON here for my weather data and I wanted to access the
71

72
00:05:58,850 --> 00:06:06,380
value of the longitude here, then I would first take my source which is going to be the data that I
72

73
00:06:06,380 --> 00:06:14,960
get back as the response body which we know to be JSON formatted, and then I could provide a key. The
73

74
00:06:14,960 --> 00:06:19,930
first key to get to this longitude is the coord key.
74

75
00:06:20,120 --> 00:06:26,180
So I have to step into here and then I have to make my step into lon before I can tap into this value.
75

76
00:06:27,080 --> 00:06:33,530
So the first key is going to be the string coord, and it's really important that you spell it exactly
76

77
00:06:33,530 --> 00:06:35,660
the same way that you see in the data,
77

78
00:06:35,660 --> 00:06:36,800
otherwise it won't work.
78

79
00:06:37,340 --> 00:06:41,450
Now after that stage I now am inside here.
79

80
00:06:41,450 --> 00:06:47,120
And in order to get my actual value, I have to give it the second key which is lon.
80

81
00:06:47,240 --> 00:06:53,630
So I'm going to add another set of square brackets and add the word lon, so spelt exactly the same way
81

82
00:06:53,720 --> 00:06:54,770
as I see here.
82

83
00:06:56,060 --> 00:07:02,770
So now this is going to be equal to the value of the longitude, which is 139.01.
83

84
00:07:02,780 --> 00:07:09,830
And I can now save that into a variable, let's call that the longitude.
84

85
00:07:09,830 --> 00:07:19,060
And now if I go ahead and print my longitude instead of data, we can see what we actually get from unpacking
85

86
00:07:19,150 --> 00:07:20,190
our JSON data.
86

87
00:07:20,380 --> 00:07:23,490
So let's hit save and let's check out our console.
87

88
00:07:23,590 --> 00:07:26,590
You can see that I'm getting 139.01,
88

89
00:07:26,620 --> 00:07:28,930
exactly the same as here.
89

90
00:07:28,930 --> 00:07:33,190
So I had to step through two keys in order to get to that value.
90

91
00:07:33,280 --> 00:07:39,670
Now if I wanted to get to the weather condition for example, if I wanted to get the description here,
91

92
00:07:40,150 --> 00:07:43,110
now here it's a little bit more tricky.
92

93
00:07:43,180 --> 00:07:54,080
The first step is very easy. Let's create a new variable, let's call it the weatherDescription. And let's
93

94
00:07:54,080 --> 00:08:01,160
set it to equal, again we're going to use JSON  decode to decode our data and then we have to pass it
94

95
00:08:01,160 --> 00:08:01,900
some keys.
95

96
00:08:01,910 --> 00:08:08,060
So how do we reach this description? Well the first step is through the key weather, so let's add that in
96

97
00:08:08,060 --> 00:08:09,620
a square bracket.
97

98
00:08:09,620 --> 00:08:12,930
Now the next key is not what you might expect.
98

99
00:08:13,000 --> 00:08:20,120
So notice that here, we have one arrow so that stored data, our second arrow which is our coord and our
99

100
00:08:20,120 --> 00:08:22,860
third one is simply the key longitude.
100

101
00:08:22,940 --> 00:08:27,140
Here we have are data then our weather,
101

102
00:08:27,140 --> 00:08:31,660
then we have something here which doesn't actually have a name.
102

103
00:08:31,670 --> 00:08:40,270
So when you collapse our weather, you can see that it's got a list that only contains one item.
103

104
00:08:40,310 --> 00:08:44,770
So to access the first item in a list what do we do?
104

105
00:08:44,770 --> 00:08:52,610
Well we have to use the index of that list for the first value. And we know that lists start counting
105

106
00:08:52,610 --> 00:08:53,450
from zero.
106

107
00:08:53,930 --> 00:09:03,830
So here we have to add a square bracket and add zero to be able to go into this tree right here. Because
107

108
00:09:03,830 --> 00:09:13,070
notice that this ID is not directly inside the weather, unlike the longitude which is directly inside
108

109
00:09:13,070 --> 00:09:14,550
the coordinate.
109

110
00:09:14,600 --> 00:09:21,710
So now by adding that zero we're now inside this tree and we can now add our final key which is the
110

111
00:09:21,740 --> 00:09:23,600
description.
111

112
00:09:23,600 --> 00:09:28,280
So making sure that I've actually spelt it right description.
112

113
00:09:28,490 --> 00:09:33,290
This should now be equal to the weather description, so let's check it by printing it
113

114
00:09:33,290 --> 00:09:41,390
here. Let's print the weather description and if we hit saver, let's check our console. We're getting clear sky
114

115
00:09:41,420 --> 00:09:44,630
printed in here which comes from right here.
115

116
00:09:44,630 --> 00:09:51,550
Now if that seems really really painful, it's because it's actually the hard way of doing things.
116

117
00:09:51,650 --> 00:09:57,070
And by using something like JSON Viewer Awesome, there's actually a much easier way.
117

118
00:09:57,080 --> 00:10:04,980
So for example if I wanted to get the main value here, I can click on it, select it and then in the gutter
118

119
00:10:05,000 --> 00:10:08,330
here I can click on copy path.
119

120
00:10:08,330 --> 00:10:14,360
So now I can go ahead and paste that in here and it tells me how to get to that main.
120

121
00:10:14,660 --> 00:10:17,570
So the first key is weather, the second key is 0,
121

122
00:10:17,600 --> 00:10:19,320
the third key is main.
122

123
00:10:19,430 --> 00:10:22,370
So if I wanted to do that the first key is weather,
123

124
00:10:22,410 --> 00:10:23,430
second is zero,
124

125
00:10:23,450 --> 00:10:25,590
third is main.
125

126
00:10:25,730 --> 00:10:35,310
And now when I hit save, my weatherDescription is going to be clear. So you can use this tool to make
126

127
00:10:35,310 --> 00:10:39,470
it much easier for you to get a value that is quite deep in the tree.
127

128
00:10:39,480 --> 00:10:47,700
So this pressure for example exists under main and then pressure. But something like the icon will exist
128

129
00:10:47,880 --> 00:10:49,970
at weather 0 icon.
129

130
00:10:50,910 --> 00:11:00,300
So as a challenge, I want you to create three variables inside here. So I'm going to delete everything
130

131
00:11:00,300 --> 00:11:07,900
we've got here and I want you to create three variables that are going to contain the temperature,
131

132
00:11:07,950 --> 00:11:11,970
so this value right here and then the condition,
132

133
00:11:11,970 --> 00:11:15,840
so this value right here, this is the condition number.
133

134
00:11:15,840 --> 00:11:19,320
And then there's the city name right here,
134

135
00:11:19,500 --> 00:11:27,510
this one. Pause the video and try to create three variables that will contain the data that comes from our
135

136
00:11:27,510 --> 00:11:33,820
JSON response.
136

137
00:11:33,890 --> 00:11:34,190
All right.
137

138
00:11:34,220 --> 00:11:35,660
So first things first.
138

139
00:11:35,660 --> 00:11:38,480
Let's try and create our temperature variable.
139

140
00:11:38,480 --> 00:11:41,500
So I'm just going to use a var keyword for now
140

141
00:11:41,540 --> 00:11:44,160
And I'm going to show you why very very soon.
141

142
00:11:44,270 --> 00:11:51,950
So I'm going to create a temperature variable and it's going to be equal to jsonDecode and the source
142

143
00:11:51,950 --> 00:11:53,510
is going to be our data,
143

144
00:11:53,690 --> 00:11:55,180
and then I'm going to add some keys.
144

145
00:11:55,280 --> 00:11:57,840
So our temperature is right here.
145

146
00:11:57,890 --> 00:11:58,970
So I'm going to click on it,
146

147
00:11:59,000 --> 00:12:03,310
copy the part and put it down here to see how I need to get there.
147

148
00:12:03,320 --> 00:12:05,900
So the first key is going to be called main
148

149
00:12:06,020 --> 00:12:08,630
and the second key is going to be called temp.
149

150
00:12:09,230 --> 00:12:15,380
So this is my first variable. My second variable is going to be the condition.
150

151
00:12:15,650 --> 00:12:23,880
And this is gonna be jsonDecode data and the condition comes from right here the weather ID.
151

152
00:12:24,050 --> 00:12:27,390
So I'm going to copy the part here and paste it in here.
152

153
00:12:27,890 --> 00:12:36,820
So for this one I have to access it through weather and then zero and then ID. For the final one, it's
153

154
00:12:36,820 --> 00:12:38,860
going to be the name.
154

155
00:12:38,890 --> 00:12:43,160
So I'm going to call it cityName and it's going to be equal to again
155

156
00:12:43,180 --> 00:12:48,220
jsonDecode, decode our data, and then the city name is down here.
156

157
00:12:48,220 --> 00:12:52,180
So let's copy that path and let's see what that looks like.
157

158
00:12:52,180 --> 00:12:52,450
OK.
158

159
00:12:52,480 --> 00:12:56,890
So it's just a single key which is going to be the string name.
159

160
00:12:57,640 --> 00:13:06,290
So now I have three variables that come from my JSON 
data and I've set them all to be variables.
160

161
00:13:06,400 --> 00:13:14,470
So let's hit save. Now if we wanted to reduce the amount of repetition here and we actually want to simply
161

162
00:13:14,470 --> 00:13:17,230
decode the data just once,
162

163
00:13:17,230 --> 00:13:22,790
so we could create a new variable called decodedData and we could set it to equal
163

164
00:13:22,810 --> 00:13:24,520
jsonDecode data.
164

165
00:13:24,760 --> 00:13:34,730
Then we can use decodedData in all three of these places.
165

166
00:13:34,790 --> 00:13:39,500
And the reason why I'm setting it to a dynamic variable here,
166

167
00:13:39,500 --> 00:13:47,810
so not giving it a type outright, is because if we hit CONTROL + J or CONTROL + Q on this jsonDecode,
167

168
00:13:47,990 --> 00:13:52,000
then you can see the output is a dynamic type.
168

169
00:13:52,040 --> 00:13:57,220
It doesn't know what it's going to be until the data gets processed.
169

170
00:13:58,850 --> 00:14:06,380
So you can either leave everything with a type of dynamic by using the var keyword or you can look at
170

171
00:14:06,380 --> 00:14:09,740
the data and see what the data type could be.
171

172
00:14:09,740 --> 00:14:12,500
So ID is probably going to be an integer,
172

173
00:14:12,500 --> 00:14:14,690
temperature is probably going to be a double
173

174
00:14:14,690 --> 00:14:21,200
and name is probably going to be a string. And you could change these to those particular types.
174

175
00:14:21,590 --> 00:14:28,790
So we change this to a double, this to an int and this to a string.
175

176
00:14:28,820 --> 00:14:35,420
So right now if I was to print out the temperature and condition and city name,
176

177
00:14:40,110 --> 00:14:47,190
then you can see that I don't actually have any problems here and there are no incompatibilities.
177

178
00:14:47,190 --> 00:14:56,820
But similarly had I kept all of those as vars, even though it's less explicit, it still will work as a
178

179
00:14:56,820 --> 00:15:05,110
dynamic type. But if I get the type wrong, say I used a double instead of the int for our condition, then
179

180
00:15:05,200 --> 00:15:07,020
we'll get errors inside here.
180

181
00:15:08,760 --> 00:15:16,770
Let's change this back to the right data types and I like having the right data type here instead of
181

182
00:15:16,770 --> 00:15:25,940
a var because it makes it more explicit. The only one that we should keep as dynamic is the one for our
182

183
00:15:25,940 --> 00:15:35,720
decodedData because we really won't know what the type is until the decoding has completed. Now
183

184
00:15:35,740 --> 00:15:42,760
so far, we've been learning about APIs and JSONs and how to decode our JSONs to actually get the values
184

185
00:15:43,060 --> 00:15:50,500
from the API response. But we've only been working with some dummy data from Open Weather Map because
185

186
00:15:50,500 --> 00:15:56,680
we're using samples.openweathermap.org rather than the actual API. And we're doing this because we
186

187
00:15:56,680 --> 00:16:02,320
don't yet have an app ID that will authorize us to use their API.
187

188
00:16:02,770 --> 00:16:08,470
So in the next lesson, I'm going to show you how to register for your own app ID so that you can start
188

189
00:16:08,470 --> 00:16:15,970
parsing over the actual latitudes and longitudes that we're getting from our app to get the data for that
189

190
00:16:15,970 --> 00:16:17,080
location.
190

191
00:16:17,080 --> 00:16:19,980
So all of that and more, I see on the next lesson.
