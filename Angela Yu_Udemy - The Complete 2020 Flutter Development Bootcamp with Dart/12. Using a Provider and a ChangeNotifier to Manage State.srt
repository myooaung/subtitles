0
1
00:00:00,300 --> 00:00:06,480
Now that we've learned all about the provider package, it's time to actually put it into action in our
1

2
00:00:06,480 --> 00:00:11,200
app so that we can read the tasks that are stored,
2

3
00:00:11,250 --> 00:00:13,240
we can add new tasks,
3

4
00:00:13,320 --> 00:00:19,500
we can check tasks off and we can delete tasks when the user desires it.
4

5
00:00:19,500 --> 00:00:27,030
So in this first part of putting provider into practice, we're going to tackle the first goal which is
5

6
00:00:27,030 --> 00:00:34,570
to be able to get the tasks and to be able to use it both on the task screen as well as the task list.
6

7
00:00:34,620 --> 00:00:42,270
Essentially we're going to keep the state of our task provider high so that we can use it all the way
7

8
00:00:42,270 --> 00:00:49,530
down the tree and we're going to be providing that data both to the TaskScreen as well as the Tasks
8

9
00:00:49,620 --> 00:00:56,640
List and they're going to listen for changes in the tasks data. On the task screen
9

10
00:00:56,640 --> 00:01:02,620
the reason why we need it is because we have this little part where it says 12 tasks.
10

11
00:01:02,640 --> 00:01:10,350
That number has to be dynamic and reflect all the tasks that are currently inside our To Do list. And
11

12
00:01:10,380 --> 00:01:11,380
for the task list
12

13
00:01:11,460 --> 00:01:13,260
well that's pretty self-explanatory.
13

14
00:01:13,260 --> 00:01:20,220
We need the task data available there so that we can actually render this list of tasks.
14

15
00:01:20,220 --> 00:01:27,450
Now in the coming lessons where we're implementing provider, I'm going to explain exactly what behavior
15

16
00:01:27,450 --> 00:01:35,550
we need first upfront and then you have the choice of either completing it as a challenge or simply
16

17
00:01:35,790 --> 00:01:37,440
following along with me.
17

18
00:01:37,560 --> 00:01:40,960
But I recommend that you really give it a go yourself
18

19
00:01:40,980 --> 00:01:46,590
and even if you get stuck and come back, you will learn a lot more than simply just following along.
19

20
00:01:46,590 --> 00:01:55,680
So in this case, what we need to be to do is to use our change notifier provider to provide our tasks data
20

21
00:01:56,040 --> 00:02:01,220
right at the top of our app at the very root of our widget tree.
21

22
00:02:01,440 --> 00:02:08,100
And then we can listen for it inside the task screen to update that number as well as inside our tasks
22

23
00:02:08,100 --> 00:02:11,610
list to update the list of task tiles.
23

24
00:02:11,610 --> 00:02:20,660
So once you already, open up your current Todoey app project and try and achieve this goal.
24

25
00:02:20,910 --> 00:02:26,100
So I hope you've given that a go and you're here just to check the solution.
25

26
00:02:26,100 --> 00:02:32,280
Now remember there's a lot of ways of doing the same thing. You can achieve exactly the same behavior
26

27
00:02:32,400 --> 00:02:34,700
using all sorts of different ways
27

28
00:02:34,800 --> 00:02:38,930
and my solution is just one way of doing that.
28

29
00:02:38,970 --> 00:02:46,530
So the first thing we need to do is to of course go into our pubspec.yaml and to add our provider
29

30
00:02:46,800 --> 00:02:48,600
as a dependency.
30

31
00:02:48,660 --> 00:02:55,890
I'm gonna do that right here and then I'm gonna get all my provider related files and now I can use
31

32
00:02:55,890 --> 00:02:56,460
it.
32

33
00:02:56,460 --> 00:03:03,120
So the first thing that I'm gonna do is I'm going to create a new Dart file inside my models folder
33

34
00:03:03,630 --> 00:03:07,310
and I'm going to call this task_data.
34

35
00:03:07,350 --> 00:03:12,960
So this is going to be the object that's going to be provided throughout my tree so that they can tap
35

36
00:03:12,990 --> 00:03:16,450
into the data of our tasks.
36

37
00:03:16,530 --> 00:03:24,360
This class is simply going to be called TaskData and it's again going to extend our change notifier 
37

38
00:03:24,360 --> 00:03:26,930
class.
38

39
00:03:27,150 --> 00:03:35,370
Now the reason why it's erroring out at the moment is because we need to be able to import the foundation
39

40
00:03:35,370 --> 00:03:40,330
.dart package or we could import the material.dart package.
40

41
00:03:40,500 --> 00:03:45,310
But the material.dart package actually contain the foundation.dart package
41

42
00:03:45,330 --> 00:03:52,030
so if you wanted to keep it light then you can simply just use foundation.dart.
42

43
00:03:52,170 --> 00:03:59,820
And now we will be able to find the change notifier inside foundation.dart and we can use it to extend
43

44
00:03:59,910 --> 00:04:06,270
our task data class so that we can turn this class into something that other objects can listen to for
44

45
00:04:06,270 --> 00:04:09,090
changes and update when we tell it to.
45

46
00:04:10,050 --> 00:04:18,690
So the first thing I'm gonna do is I'm going to import my other models class which is my task.dart
46

47
00:04:19,110 --> 00:04:27,670
and that just a quick reminder is basically the structure of a task object. And now if I go into my tasks
47

48
00:04:27,670 --> 00:04:36,610
screen.dart, I can find where currently my task data exists. It's inside this list of task inside my
48

49
00:04:36,610 --> 00:04:38,270
TasksScreenState.
49

50
00:04:38,470 --> 00:04:45,040
So I'm going to lift that right out, so I'm going to cut it out of here, and I'm going to move it over
50

51
00:04:45,070 --> 00:04:47,500
to my task data object.
51

52
00:04:47,500 --> 00:04:50,690
So it's going to be pasted inside here.
52

53
00:04:50,860 --> 00:04:55,510
It's going to be created exactly the same way. Tasks have a name
53

54
00:04:55,510 --> 00:05:00,520
and by default they're set to 'not done'. So
54

55
00:05:00,530 --> 00:05:11,150
now I'm ready to provide this task property across my app. And I'm going to do that at the very top of
55

56
00:05:11,150 --> 00:05:12,290
my widget tree.
56

57
00:05:12,380 --> 00:05:20,300
So I'm going to do it inside the MyApp class and I'm going to wrap everything that's inside my material
57

58
00:05:20,300 --> 00:05:27,040
app with this change notifier provider class. And of course to be able to use it
58

59
00:05:27,050 --> 00:05:31,240
I need to import my provider.dart package.
59

60
00:05:31,460 --> 00:05:39,530
So remember that provider has to be at a place in the tree that's high enough to be seen by the rest
60

61
00:05:39,710 --> 00:05:42,140
of the widgets that branch off later on.
61

62
00:05:42,590 --> 00:05:48,020
So in our case, that means putting it right at the top of MyApp class.
62

63
00:05:48,080 --> 00:05:54,650
Now if you only needed the data say inside the task tile and nowhere else, then you might be able to
63

64
00:05:54,650 --> 00:06:03,320
go up one level to its parent and then wrap its parent which is this task list which of course lives
64

65
00:06:03,440 --> 00:06:05,070
right here,
65

66
00:06:05,150 --> 00:06:12,260
then you could wrap that with a provider widget to be able to provide to all of its children.
66

67
00:06:12,410 --> 00:06:18,920
But if you get this wrong and you put this too low in the tree then the children might not have access
67

68
00:06:18,920 --> 00:06:25,400
to it then you'll get errors when you run the app and try to do things telling you that it's not placed
68

69
00:06:25,400 --> 00:06:27,770
at the correct position in the widget tree.
69

70
00:06:27,860 --> 00:06:30,650
So take care where this goes.
70

71
00:06:30,650 --> 00:06:34,820
In our case it needs to be above our material app.
71

72
00:06:35,000 --> 00:06:40,910
Now I'm getting a little warning here because there's a parameter called builder for the change notifier
72

73
00:06:40,910 --> 00:06:42,740
provider that's needed.
73

74
00:06:42,740 --> 00:06:47,220
So we saw this before. The builder takes the current context,
74

75
00:06:47,240 --> 00:06:55,730
so the current position inside the widget tree, and it returns the object that needs be provided to all
75

76
00:06:55,730 --> 00:07:03,150
of the children in the tree. And that object is of course on newly created task data object.
76

77
00:07:03,200 --> 00:07:12,230
So let's go ahead and provide the task data object and also tell it about this task data object which
77

78
00:07:12,230 --> 00:07:17,500
comes from the models folder and it's called task_data.dart.
78

79
00:07:17,510 --> 00:07:25,370
So now we have our change notifier provider at the very top of our widget tree providing the task data
79

80
00:07:25,460 --> 00:07:35,400
object to all children below the tree that wants to listen for the data in there. Now we can actually read
80

81
00:07:35,460 --> 00:07:39,590
the data from here namely the tasks list.
81

82
00:07:39,660 --> 00:07:46,140
So the first place where we might want to do that is actually on the task screen. Here where we have
82

83
00:07:46,230 --> 00:07:53,430
all tasks.length which shows the user how many tasks they have remaining in their list,
83

84
00:07:53,430 --> 00:07:57,650
well this needs to be based on our task list.
84

85
00:07:57,720 --> 00:08:05,130
We need to count how many there are in here and provide it as a interpolated string right here.
85

86
00:08:05,130 --> 00:08:12,910
And we're getting an error right now because we removed tasks from our task screen state.
86

87
00:08:13,110 --> 00:08:19,320
Let's go ahead and remove tasks.length and let's use what we learned previously where we tap into
87

88
00:08:19,320 --> 00:08:23,640
to provider and we call the .of method.
88

89
00:08:23,640 --> 00:08:27,400
Now I'm going to get Android Studio to help me out with typing out the code.
89

90
00:08:27,480 --> 00:08:32,640
But first that means I have to import the provider.dart.
90

91
00:08:35,330 --> 00:08:40,200
And now I can tap into the .of method of provider
91

92
00:08:40,340 --> 00:08:47,900
and of course always specify the date type in the of method and it's going to be my task data object
92

93
00:08:48,140 --> 00:08:51,540
which again we need to import.
93

94
00:08:51,590 --> 00:08:57,670
So we're going to tap into the models and we're going to tap into the task_data
94

95
00:08:57,680 --> 00:08:58,720
.dart.
95

96
00:08:58,820 --> 00:09:05,840
Eventually we're going to remove the need for the task.dart and to manage all of that related stuff
96

97
00:09:05,930 --> 00:09:07,130
inside task data.
97

98
00:09:07,640 --> 00:09:15,530
But for now let's go ahead and tap in to this object which is going to be equivalent to our task data
98

99
00:09:15,590 --> 00:09:25,640
object now and let's go into it to get hold of the tasks property. So let's write a .tasks and then
99

100
00:09:25,640 --> 00:09:32,410
we're going to get the count or the length of that object which currently should be equal to 3.
100

101
00:09:32,690 --> 00:09:41,670
So let's go ahead and hit save and try to get rid of the part where we have a Dart analysis error.
101

102
00:09:41,730 --> 00:09:49,310
So the first one is this part where we're adding tasks to our previous task list which now doesn't exist
102

103
00:09:49,320 --> 00:09:51,090
so of course it's undefined.
103

104
00:09:51,090 --> 00:09:56,910
So I'm actually going to go ahead and just comment out our set state and in the next lesson when we tackle
104

105
00:09:56,910 --> 00:10:02,370
how to add new tasks to our tasks data provider, then we'll figure this part out.
105

106
00:10:02,970 --> 00:10:11,310
So the other part is of course down here where we have our tasks being passed to our task list.
106

107
00:10:11,310 --> 00:10:17,010
Now this is of course the second place where we need to read from our task data
107

108
00:10:17,010 --> 00:10:24,400
.task property but instead of passing it over and drilling through our tree, instead I'm simply going
108

109
00:10:24,400 --> 00:10:33,310
to go into our task list and get a hold of a reference to that task data object over here instead.
109

110
00:10:33,330 --> 00:10:39,990
So we actually don't need to pass anything over anymore so we don't need these two things and we don't
110

111
00:10:39,990 --> 00:10:43,520
need this reference to our task.dart either.
111

112
00:10:43,980 --> 00:10:50,130
But instead I'm going to be importing our provider.dart and also our model's folder
112

113
00:10:50,190 --> 00:10:57,630
the task_data.dart as well. And we're going to be using it inside our task list to build our list
113

114
00:10:57,630 --> 00:10:58,290
view.
114

115
00:10:58,590 --> 00:11:05,460
Now right here instead of using the widget.tasks which taps into those properties passed into the
115

116
00:11:05,460 --> 00:11:16,190
task list stateful widget, instead I'm simply just going to tap into the provider.of method. So
116

117
00:11:16,580 --> 00:11:24,040
instead of the widget.tasks.[index].name, I'm going to replace widget.tasks with provider
117

118
00:11:24,410 --> 00:11:35,090
.of and specifying the data type which is our task data. And then it's going to be provider.of
118

119
00:11:35,090 --> 00:11:43,940
<TaskData>.tasks[index].name. So I can copy this over and replace our widget in all of these
119

120
00:11:44,030 --> 00:11:52,140
places. And for now I'm simply actually going to comment out our set state to handle what should happen
120

121
00:11:52,500 --> 00:11:54,290
when our checkbox gets checked.
121

122
00:11:54,300 --> 00:11:56,730
We're going to deal with that in a later lesson.
122

123
00:11:56,910 --> 00:12:04,470
But right now all we want is just to be able to read the data that's inside the tasks inside our tasks
123

124
00:12:04,470 --> 00:12:09,620
data which is being provided using our provider package.
124

125
00:12:09,630 --> 00:12:15,600
So now notice how we're not using that widget anymore which comes from the stateful widget.
125

126
00:12:15,600 --> 00:12:19,310
So that's our way of accessing the properties that we deleted.
126

127
00:12:19,440 --> 00:12:22,270
And so we actually don't need this to be stateful
127

128
00:12:22,270 --> 00:12:29,040
even. We can actually turn it into a simpler stateless widget and we can still get hold up with the
128

129
00:12:29,040 --> 00:12:35,490
provider and get the data that we need because we're no longer passing it over from our task screen
129

130
00:12:35,820 --> 00:12:37,980
via the constructor.
130

131
00:12:37,980 --> 00:12:45,870
So now notice how we also don't need states inside our task screen so we can convert this to a state
131

132
00:12:45,900 --> 00:12:52,920
less widget as well by deleting all of these lines and changing this to a stateless widget and we can
132

133
00:12:52,920 --> 00:12:56,810
delete the unused imort right up here as well.
133

134
00:12:56,820 --> 00:13:03,960
Now our app is actually a lot simpler because we have these memoryless stateless widgets which simply
134

135
00:13:03,960 --> 00:13:11,700
get constructed when they're needed and destroyed and replaced with new ones when they update.
135

136
00:13:11,700 --> 00:13:19,050
So now we're tapping into the provider of our task data and getting hold of that list right here in order
136

137
00:13:19,050 --> 00:13:21,160
to populate our task titles
137

138
00:13:21,240 --> 00:13:27,480
and also we're using it inside our task screen to show how many tasks we have remaining.
138

139
00:13:27,480 --> 00:13:31,210
And this is just simply reading the tasks.
139

140
00:13:31,200 --> 00:13:39,570
Let's go ahead and hit save and run our app from scratch. And you can see that hopefully everything going
140

141
00:13:39,570 --> 00:13:42,380
well and all your code in the right places
141

142
00:13:42,510 --> 00:13:49,590
we should have exactly the same user interface as we had before. But this time this data is no longer
142

143
00:13:49,590 --> 00:13:51,000
being passed around,
143

144
00:13:51,000 --> 00:13:56,350
drilled down through the tree and instead it's coming from our provider.
144

145
00:13:56,370 --> 00:14:00,870
So did you manage to get to this point when you tried to tackle it yourself?
145

146
00:14:00,870 --> 00:14:08,670
Well there's a couple of things that we did including creating our task data class that extends change
146

147
00:14:08,790 --> 00:14:18,260
notifier and wrapping our material app within a change notifier provider which provides that task data object
147

148
00:14:18,420 --> 00:14:26,190
and then finally using it by using the provider.of task data to tap into it both inside our task
148

149
00:14:26,190 --> 00:14:37,170
screen as well as our task list. That works right now but we can actually make it a lot simpler. And we
149

150
00:14:37,170 --> 00:14:44,010
can do this through the use of something called a consumer widget that comes from our provider.dart
150

151
00:14:44,070 --> 00:14:52,670
as well. Because notice how we're using our provider.of task data.tasks in three places here.
151

152
00:14:52,680 --> 00:14:54,980
It's getting a little bit repetitive
152

153
00:14:54,990 --> 00:14:55,290
right?
153

154
00:14:55,800 --> 00:15:03,270
So instead of calling provider.of in three places, we can simply just wrap all of the downstream widgets
154

155
00:15:03,300 --> 00:15:11,070
that need to be updated when this tasks property changes inside what's called a consumer widget.
155

156
00:15:11,460 --> 00:15:18,960
So notice how we're using our provider.of inside our tasks tile but we're also using it inside the
156

157
00:15:19,050 --> 00:15:19,930
item count.
157

158
00:15:20,070 --> 00:15:25,260
So if we go one level higher than that well then that's going to be our list view widget.
158

159
00:15:25,620 --> 00:15:32,670
So let's go ahead and wrap our list view widget inside a new widget which is going to be our consumer
159

160
00:15:32,670 --> 00:15:33,420
widget.
160

161
00:15:33,510 --> 00:15:36,560
And this of course comes from the provider package.
161

162
00:15:36,690 --> 00:15:43,350
And in order to use it we simply wrap any downstream widgets that need to be updated when a particular
162

163
00:15:43,350 --> 00:15:49,140
piece of data that we're listening to changes and then we specify the data type which is also going
163

164
00:15:49,140 --> 00:15:51,060
to be our task data.
164

165
00:15:51,060 --> 00:15:52,710
That's what we're listening for.
165

166
00:15:52,710 --> 00:15:58,590
And then it simply requires a builder and the builder takes the current context,
166

167
00:15:58,680 --> 00:16:00,630
so where we are in the tree,
167

168
00:16:00,630 --> 00:16:07,170
in addition it will be able to provide the current data and we can give that object a name.
168

169
00:16:07,170 --> 00:16:10,200
So that is going to be our task data object.
169

170
00:16:10,200 --> 00:16:16,530
So I'm just simply going to call it taskData and that is going to be equivalent or basically the same
170

171
00:16:16,590 --> 00:16:20,670
as calling provider.of task data context.
171

172
00:16:20,670 --> 00:16:25,110
And finally it also takes a property called a child.
172

173
00:16:25,110 --> 00:16:32,640
And now our builder is constructed and we can simply return any widgets that need to be built using
173

174
00:16:32,640 --> 00:16:36,540
this data. Instead of having a child property
174

175
00:16:36,540 --> 00:16:42,930
I'm going to take this entire list view builder all the way down to the closing list view builder comment,
175

176
00:16:43,380 --> 00:16:50,790
I'm going to cut it and then make sure I return it inside my consumer. Of course because we're returning
176

177
00:16:50,790 --> 00:16:58,670
this widget we have to add a semicolon here instead of a comma. So now we've gotten rid of all our errors
177

178
00:16:58,820 --> 00:17:06,830
and instead of using provider.of blah blah blah we can replace all of that with just our taskData.
178

179
00:17:07,700 --> 00:17:13,940
Let's go ahead and replace taskData in all of these places where we have provider.of
179

180
00:17:13,940 --> 00:17:20,240
and now what happens is that this consumer widget is going to be the one that's listening for changes
180

181
00:17:20,240 --> 00:17:21,170
in task data.
181

182
00:17:21,680 --> 00:17:28,610
So when task data updates its state then it's going to rebuild this entire list view and update all
182

183
00:17:28,610 --> 00:17:31,210
the task titles that have changed.
183

184
00:17:31,250 --> 00:17:38,660
So now our code is a lot more succinct and we can even go one step further because notice how right
184

185
00:17:38,660 --> 00:17:42,630
here we're using our taskData.tasks.length
185

186
00:17:42,740 --> 00:17:45,930
so we're getting the length of our list of tasks here,
186

187
00:17:46,100 --> 00:17:48,890
but we're also doing that right here
187

188
00:17:48,950 --> 00:17:49,570
right?
188

189
00:17:49,580 --> 00:17:55,190
So usually when we're doing the same thing over and over again then we should probably set up something
189

190
00:17:55,190 --> 00:17:58,020
to make it a little bit easier a little bit more convenient
190

191
00:17:58,040 --> 00:17:59,130
the next time.
191

192
00:17:59,270 --> 00:18:05,800
So if we go into our task data we can actually create a new integer which has a getter.
192

193
00:18:05,840 --> 00:18:13,640
So we use the get to keyword to define this being a getter and the getter is going to be something that
193

194
00:18:13,790 --> 00:18:16,210
returns a value.
194

195
00:18:16,220 --> 00:18:23,960
So this means that whenever somebody taps into the name of this property, this taskCount, then we're
195

196
00:18:23,960 --> 00:18:32,120
going to return a value that we calculate. And we're going to return this value based on our task list.
196

197
00:18:32,510 --> 00:18:36,830
So we're going to say tasks.length
197

198
00:18:36,830 --> 00:18:45,740
and now what happens is every time we try to tap into this task count property, well it's going to compute
198

199
00:18:45,830 --> 00:18:54,520
the value of it by looking at our tasks which is this list and getting the length of that list.
199

200
00:18:54,530 --> 00:19:02,200
So now we can go into our task screen and instead of calling provider of task.tasks.length,
200

201
00:19:02,330 --> 00:19:10,490
we can simply just simplify that to the task count and we can of course do that inside our task list
201

202
00:19:10,580 --> 00:19:11,120
as well
202

203
00:19:11,120 --> 00:19:16,680
so it will be taskData.taskCount.
203

204
00:19:16,830 --> 00:19:24,600
So we've now dramatically refactored our code both through the use of a consumer widget which can save
204

205
00:19:24,600 --> 00:19:27,590
us a lot of provider.ofs.
205

206
00:19:27,690 --> 00:19:36,750
And also we've managed to create a getter inside our task data to simplify the process of getting the
206

207
00:19:36,750 --> 00:19:39,760
length of our tasks list.
207

208
00:19:39,810 --> 00:19:44,220
Now of course you didn't need to do all of this to complete this challenge.
208

209
00:19:44,310 --> 00:19:52,590
All I wanted was to see that you could use the provider package to get hold of the data that were providing
209

210
00:19:53,220 --> 00:20:00,750
through the use of a new object that uses and extends the change notifier as well as wrapping our
210

211
00:20:00,750 --> 00:20:07,980
entire tree inside a change notifier provider to be able to provide this task data object both inside
211

212
00:20:07,980 --> 00:20:15,630
the task screen either using providr.of or, as we've seen now, we can also use the consumer widget as
212

213
00:20:15,630 --> 00:20:16,510
well.
213

214
00:20:16,590 --> 00:20:21,380
So that completes reading and exposing our provider.
214

215
00:20:21,720 --> 00:20:28,860
But in the next lesson, we're going to look at how we can add new tasks into our provider through the
215

216
00:20:28,860 --> 00:20:31,800
use of our change notifier.
216

217
00:20:32,070 --> 00:20:35,220
So for all of that and more, I'll see on the next lesson.
