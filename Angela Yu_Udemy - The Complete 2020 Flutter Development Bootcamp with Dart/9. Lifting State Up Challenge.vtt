WEBVTT
0
1
00:00:00.650 --> 00:00:08.810
Now in previous lessons we talked about lifting state up and the reason why we needed to lift state
1

2
00:00:08.810 --> 00:00:09.020
up
2

3
00:00:09.020 --> 00:00:16.580
in that case was because here we have a child widget, a task checkbox, which is lower down in the tree
3

4
00:00:16.640 --> 00:00:18.910
than the task tile.
4

5
00:00:19.010 --> 00:00:26.630
And we wanted to be able to use the user interaction that happened in the taskCheckbox to determine
5

6
00:00:26.720 --> 00:00:34.940
and set the state in the parent widget so that we could use that state to both update the checkbox as
6

7
00:00:34.940 --> 00:00:42.700
well as the text widget which lived higher up in the tree. By lifting the state up in the widget tree
7

8
00:00:42.820 --> 00:00:48.160
it's able to be passed downstream to many more child widgets.
8

9
00:00:48.160 --> 00:00:54.360
So now we're in another situation where we actually need the state to be higher up in the tree.
9

10
00:00:54.370 --> 00:00:56.120
Let me illustrate the problem.
10

11
00:00:56.140 --> 00:01:02.490
So when we pressed the 'Add' button and the 'Add Task' screen pops up,
11

12
00:01:02.770 --> 00:01:09.580
well if we think about how our widget tree looks at the moment, this is kind of a simplified version.
12

13
00:01:10.150 --> 00:01:19.180
We have our TasksScreen at the top and then that in turn contains a AddTaskScreen screen and a TaskList and
13

14
00:01:19.180 --> 00:01:21.540
the AddTaskScreen  has a text field.
14

15
00:01:21.540 --> 00:01:26.050
The TaskList has a whole bunch of task tiles and some text widgets.
15

16
00:01:26.050 --> 00:01:33.200
Now the task list is built using the state of something called tasks.
16

17
00:01:33.250 --> 00:01:36.520
So that's a list of task objects.
17

18
00:01:36.520 --> 00:01:42.560
And using the list view builder, we're able to render a dynamic list of task titles.
18

19
00:01:43.150 --> 00:01:51.550
But imagine if the user types in a new task to the AddTaskScreen  and then they press the Add button,
19

20
00:01:51.550 --> 00:02:01.030
how do we get the data inside the text field all the way up and all the way down to the text widgets?
20

21
00:02:01.030 --> 00:02:12.040
Well we would need to increase the scope of the tasks list. We again need to lift the state up. We need
21

22
00:02:12.040 --> 00:02:21.190
to be able to bring the tasks list higher up so that we can add to it and use it across the child widgets
22

23
00:02:21.670 --> 00:02:28.700
so that we can render the latest item that's added inside our list view.
23

24
00:02:28.710 --> 00:02:35.820
Now it's time for the challenge. Using what you've learned about lifting state up and callbacks as well
24

25
00:02:35.820 --> 00:02:38.910
as all of the stuff that you've learned before,
25

26
00:02:38.910 --> 00:02:46.290
can you make the to do list app incorporate the data that was typed into the text field and when the
26

27
00:02:46.290 --> 00:02:48.420
user presses the Add button
27

28
00:02:48.600 --> 00:02:56.550
the latest to do item gets added into the list and we retain the capability of being able to check it
28

29
00:02:56.640 --> 00:03:01.860
off while keeping our task title as a simple stateless widget?
29

30
00:03:02.640 --> 00:03:09.360
So in order to achieve this, you'll have to think about what you've learned about lifting state up, callbacks
30

31
00:03:09.690 --> 00:03:12.980
and use everything you know to tackle this problem.
31

32
00:03:13.050 --> 00:03:21.020
So give it a good go and pause the video to try and complete this challenge. So I hope you gave that
32

33
00:03:21.020 --> 00:03:21.650
a try.
33

34
00:03:21.650 --> 00:03:27.580
I know it's one of the harder challenges but I think you can do it. If you haven't tried, again
34

35
00:03:27.590 --> 00:03:31.630
pause the video and make sure you've given it a go before you continue
35

36
00:03:31.700 --> 00:03:38.300
because I'm now going to reveal the solution or at least one of the solutions because as always there's
36

37
00:03:38.300 --> 00:03:43.320
many ways of doing the same thing.
37

38
00:03:43.560 --> 00:03:51.480
So the first thing I want to do is currently I have my tasks which contains the names of the tasks and
38

39
00:03:51.480 --> 00:03:57.090
whether if the tasks are done inside my task list stateful widget,
39

40
00:03:57.150 --> 00:04:05.640
so it's at this level of the tree. But I need to lift the state of this task list up to be able to use
40

41
00:04:05.640 --> 00:04:13.950
it both inside the AddTaskScreen  as well as other places inside my task screen, for example the number
41

42
00:04:13.950 --> 00:04:22.340
of tasks that are remaining or the task list which needs to render the names of the tasks.
42

43
00:04:22.470 --> 00:04:30.450
So I'm going to go into my task list and I'm going to cut my tasks and I'm going to move it up the tree
43

44
00:04:30.690 --> 00:04:32.790
into the task screen,
44

45
00:04:32.790 --> 00:04:34.450
so right here.
45

46
00:04:34.710 --> 00:04:40.350
And as soon as I do that because this is a modifiable property, I get a warning
46

47
00:04:40.410 --> 00:04:43.860
and that means I have to switch to a stateful widget.
47

48
00:04:44.190 --> 00:04:48.000
And we also don't know anything about tasks over here
48

49
00:04:48.030 --> 00:04:58.820
so we have to import my models folder and my tasks.dart. So now we have our list of tasks inside our
49

50
00:04:58.820 --> 00:05:01.010
task screen widget.
50

51
00:05:01.040 --> 00:05:09.860
It's now accessible downstream such as for the Add task screen as well as for the task list.
51

52
00:05:09.860 --> 00:05:13.460
So let's pass it down to the task list first.
52

53
00:05:14.000 --> 00:05:22.460
So when I create a new task list inside my container over here, I want to be able to pass over those
53

54
00:05:22.460 --> 00:05:24.890
tasks like so.
54

55
00:05:24.890 --> 00:05:33.200
So to be able to do this, my task list will need a property called tasks which is going to be a list
55

56
00:05:33.290 --> 00:05:35.120
of task objects.
56

57
00:05:35.120 --> 00:05:37.150
So let's create it as tasks,
57

58
00:05:37.160 --> 00:05:39.170
make sure there's an 's' at the end.
58

59
00:05:39.170 --> 00:05:47.750
And then when we construct our task list, we're going to make sure that the tasks gets passed over and
59

60
00:05:47.750 --> 00:05:50.300
initializes as this property.
60

61
00:05:50.330 --> 00:05:58.880
So now inside the task list state, we can tap into this item by using the widget object. So we can use
61

62
00:05:58.940 --> 00:06:06.350
widget.tasks and we can add that to all the places we currently have a red squiggly line.
62

63
00:06:06.410 --> 00:06:10.590
So it passes over the object into the state.
63

64
00:06:10.700 --> 00:06:16.700
So widgets refers to the stateful widget which of course gets that property
64

65
00:06:16.700 --> 00:06:25.940
when we create a new task list. And now over here our errors go away because this task list now knows
65

66
00:06:26.000 --> 00:06:30.500
how to construct itself using this property.
66

67
00:06:30.500 --> 00:06:33.410
So now when we go ahead and runner up again
67

68
00:06:33.620 --> 00:06:40.880
you'll notice that pretty much nothing has changed and our tasks are now coming from a higher point
68

69
00:06:41.030 --> 00:06:45.180
in our widget tree, namely the task screen.
69

70
00:06:45.230 --> 00:06:50.700
Now we're ready to go ahead and make the AddTasksScreen work.
70

71
00:06:50.900 --> 00:06:59.660
So if we go into here, then we can first make sure that our text field is able to pass the data over
71

72
00:06:59.660 --> 00:07:01.320
into the onPressed,
72

73
00:07:01.490 --> 00:07:08.210
so remember the data lives in different places. Our text field as here but we only want to pass that
73

74
00:07:08.210 --> 00:07:16.570
data when the user presses the Add button. Our text field of course has a property called onChanged
74

75
00:07:16.580 --> 00:07:24.290
and when it gets changed, it takes a callback to pass over the new text into a callback.
75

76
00:07:24.290 --> 00:07:35.210
And when that happens we're going to save that string inside the new task title and we're going to set
76

77
00:07:35.210 --> 00:07:37.070
it inside this callback.
77

78
00:07:37.070 --> 00:07:45.350
So the new task title is gonna be equal to the new text that's added into the text box right here.
78

79
00:07:45.980 --> 00:07:55.420
And when the onPressed gets pressed, let's first try printing the value of the new task title.
79

80
00:07:55.750 --> 00:08:01.930
Now remember that the onChanged gets triggered every time the text field gets changed.
80

81
00:08:01.960 --> 00:08:08.850
So now if I go ahead and add a new task and remember that if you want the keyboard to pop up on iOS anyways
81

82
00:08:08.890 --> 00:08:12.210
it's just a COMMAND + K to do that.
82

83
00:08:12.220 --> 00:08:15.900
So let's add a new task. Let's say, I don't know,
83

84
00:08:15.940 --> 00:08:18.540
'Go to the gym' and I press
84

85
00:08:18.610 --> 00:08:27.160
Add, then you'll see that string being printed down here because it's being passed over through this
85

86
00:08:27.220 --> 00:08:35.650
new text and that new text gets assigned to the new task title which is right here and then it gets
86

87
00:08:35.950 --> 00:08:39.520
printed when I press the flat button.
87

88
00:08:39.520 --> 00:08:48.170
Now of course this new text actually updates every time the text field is changed. So it's not going
88

89
00:08:48.170 --> 00:08:54.580
to just update when you're done with writing because it doesn't know when you're done with typing.
89

90
00:08:54.580 --> 00:09:03.070
So for example if I go ahead and print the new text right here, then you can see that every time I add
90

91
00:09:03.160 --> 00:09:08.490
a new letter it's going to call that print again.
91

92
00:09:08.500 --> 00:09:12.290
Again coming back to this idea, we don't know when the user's done.
92

93
00:09:12.310 --> 00:09:21.390
We don't know if they're just having a moment to pause to think, 'Go to the gym and eat something.'
93

94
00:09:21.640 --> 00:09:23.080
This is what I do.
94

95
00:09:23.100 --> 00:09:24.770
Uhm no, just kidding.
95

96
00:09:25.210 --> 00:09:26.620
So we don't know when they're done.
96

97
00:09:26.620 --> 00:09:31.950
So we have to wait until they actually signal that by pressing the Add button.
97

98
00:09:31.990 --> 00:09:34.990
So we're going to just keep track of everything they type
98

99
00:09:35.050 --> 00:09:42.070
and only in the moment where they press the add button do we take that as the final task title and we
99

100
00:09:42.070 --> 00:09:49.810
do something with it. Now that we know how we can get hold of this new task that they typed into the
100

101
00:09:49.810 --> 00:09:51.020
Add task screen,
101

102
00:09:51.250 --> 00:09:59.290
well how do we actually go ahead and take it back to the task screen to add it into our list of tasks?
102

103
00:09:59.290 --> 00:10:01.420
Well it's same as before right?
103

104
00:10:01.420 --> 00:10:03.720
We need a callback.
104

105
00:10:03.940 --> 00:10:07.230
So let's go ahead and create our callback right here.
105

106
00:10:07.360 --> 00:10:14.290
Let's create it so that the add task screen actually takes the callback, so our callback is going to be
106

107
00:10:14.290 --> 00:10:18.760
a set of parentheses and then some curly braces.
107

108
00:10:18.760 --> 00:10:25.730
And then inside here we're going to try and print whatever it is that the user typed in.
108

109
00:10:25.750 --> 00:10:35.540
So let's put that as the newTaskTitle and that we're going to try and print the new task title
109

110
00:10:35.930 --> 00:10:42.350
but inside our task screen instead of our add task screen to demonstrate that we've actually managed
110

111
00:10:42.650 --> 00:10:46.800
to get access to it in this top level widget.
111

112
00:10:46.820 --> 00:10:54.170
So now when we construct our add task screen, well it has to be able to take a function
112

113
00:10:54.170 --> 00:10:54.840
right?
113

114
00:10:54.860 --> 00:11:05.120
So our stateless widget is going to take a final function called addTaskCallback and then it's going
114

115
00:11:05.120 --> 00:11:09.560
to be added when we construct our add task screen,
115

116
00:11:09.590 --> 00:11:11.900
so this.addTaskCallback,
116

117
00:11:11.900 --> 00:11:21.460
and now if I hit save and we go back to our our add task screen then you can see the error goes away. So
117

118
00:11:21.550 --> 00:11:29.320
now we have this call back which we passed over to the add task screen and it gets put into this property
118

119
00:11:29.320 --> 00:11:31.810
called add task callback,
119

120
00:11:31.810 --> 00:11:41.860
we now have to use it within our onPressed. In here instead of printing the value of the new task title,
120

121
00:11:41.920 --> 00:11:48.940
I'm simply going to call that callback which is the add task callback and then I'm going to pass in the
121

122
00:11:49.000 --> 00:11:52.100
new task title right here.
122

123
00:11:52.150 --> 00:11:58.420
Now this should be passed back to the task screen and I'm going to see if I'm able to print it right
123

124
00:11:58.420 --> 00:11:59.230
here.
124

125
00:11:59.230 --> 00:12:07.180
So let's run our app again and go ahead and click the Add button and then I'm going to add 'Go to the
125

126
00:12:07.210 --> 00:12:10.840
gym' and then press add and you can see it gets printed.
126

127
00:12:10.840 --> 00:12:21.130
So I now have access to whatever the user typed in inside my task screen through the use of this callback.
127

128
00:12:21.160 --> 00:12:28.240
So over here I can instead of printing it, I can actually just add it to my list of tasks
128

129
00:12:28.270 --> 00:12:28.580
right?
129

130
00:12:28.600 --> 00:12:37.780
I can tap into tasks.add and I'm going to add a new task item which is going to have a name based
130

131
00:12:37.780 --> 00:12:40.230
on the new task title.
131

132
00:12:40.480 --> 00:12:42.980
And then of course the isDone property is
132

133
00:12:43.040 --> 00:12:45.600
going to be set to false by default.
133

134
00:12:45.610 --> 00:12:54.580
So now I should have a new item in my task list and if I wrap that inside a set state, then I should
134

135
00:12:54.580 --> 00:13:01.240
be able to see my task list update as soon as I hit the Add button.
135

136
00:13:01.810 --> 00:13:09.700
So now if I go ahead and hit save and I press the Add button, then if we dismiss this bottom sheet then
136

137
00:13:09.700 --> 00:13:14.870
you can see that the latest task has now been added into my to do list.
137

138
00:13:15.160 --> 00:13:20.440
But we don't want to have to manually dismiss the bottom sheet after every time
138

139
00:13:20.440 --> 00:13:20.980
right?
139

140
00:13:21.010 --> 00:13:27.370
The natural thing should be when we press the Add button, it also dismisses the bottom sheet revealing
140

141
00:13:27.370 --> 00:13:34.990
the latest item we've added. In order to do that we have to add a call to the navigator to pop off the
141

142
00:13:34.990 --> 00:13:38.450
current context which is going to be the bottom sheet.
142

143
00:13:38.950 --> 00:13:45.630
So now let's go ahead and run our app from scratch and let's add a new item
143

144
00:13:45.640 --> 00:13:53.020
so 'Go to the gym' and then go ahead and press add and you'll see the bottom sheet disappears
144

145
00:13:53.170 --> 00:13:58.480
and our latest task gets added to the to do list.
145

146
00:13:58.540 --> 00:14:05.710
So my solution might be different from yours but as long as you've managed to lift the state of our
146

147
00:14:05.710 --> 00:14:15.070
tasks object up to the task screen state so that it can be used both inside the callback to the add task screen
147

148
00:14:15.430 --> 00:14:23.980
to get hold of the task that gets created inside the text field and also use it inside the task list
148

149
00:14:24.280 --> 00:14:30.850
to populate it with the latest tasks when it gets updated, then you've pretty much achieved success in
149

150
00:14:30.850 --> 00:14:32.030
this challenge.
150

151
00:14:32.110 --> 00:14:39.040
Now there's one last thing that we could add here which also uses the tasks list which is this hard
151

152
00:14:39.060 --> 00:14:44.860
coded thing here where it tells us how many tasks are in our task list.
152

153
00:14:44.920 --> 00:14:51.430
So instead of writing 12 every single time, we can go ahead and add some string interpolation to
153

154
00:14:51.430 --> 00:15:00.160
tap in to the task list and tap into the length property to get the actual number of tasks showing up
154

155
00:15:00.280 --> 00:15:09.350
inside here. So how is that? Were you able to complete the challenge by lifting the state up and using
155

156
00:15:09.410 --> 00:15:10.760
our callbacks?
156

157
00:15:10.760 --> 00:15:18.670
Did it make sense? If it didn't then be sure to review the lesson on callbacks and try using some of
157

158
00:15:18.670 --> 00:15:23.570
the things you've learned about it to practice it inside this app.
158

159
00:15:23.570 --> 00:15:29.210
Now in the next lesson, we're going to take state management a little bit further and talk about something
159

160
00:15:29.210 --> 00:15:31.460
called the provider package.
160

161
00:15:31.460 --> 00:15:34.460
So for all of that and more, I'll see you on the next lesson.
