1
00:00:01,040 --> 00:00:04,660
In this section we're going to take a look at how we can get Node.js source

2
00:00:04,660 --> 00:00:08,570
code into a running Docker container by using volumes.

3
00:00:08,570 --> 00:00:12,820
Now, this source code is actually going to live on our local development machine,

4
00:00:12,820 --> 00:00:18,240
but we're going to magically link it into the container using volume support.

5
00:00:18,240 --> 00:00:21,040
Let's go ahead and get started here.

6
00:00:21,040 --> 00:00:23,630
So I'm going to come on in and start up the Docker client.

7
00:00:23,630 --> 00:00:25,810
I'm going to use something called Express.

8
00:00:25,810 --> 00:00:28,100
This is a web framework for Node.js,

9
00:00:28,100 --> 00:00:31,280
and it has a little feature called express‑generator that will

10
00:00:31,280 --> 00:00:34,860
generate a little sample site that will make it easy to get

11
00:00:34,860 --> 00:00:37,140
started with some Node.js code.

12
00:00:37,140 --> 00:00:39,790
So the first thing I'm going to do is run an npm command,

13
00:00:39,790 --> 00:00:41,890
and this will install some modules.

14
00:00:41,890 --> 00:00:45,480
We're going to install Express and express‑generator, we're

15
00:00:45,480 --> 00:00:48,570
going to do these globally because express‑generator will add

16
00:00:48,570 --> 00:00:52,240
some command line integration support, which you'll see in just a moment.

17
00:00:52,240 --> 00:00:54,240
All right, so we're kind of ready to go,

18
00:00:54,240 --> 00:00:56,670
and what I'm going to do from the location,

19
00:00:56,670 --> 00:00:58,970
which is really the user account I'm in right now,

20
00:00:58,970 --> 00:01:02,490
is I'm going to create a new folder and generate some source

21
00:01:02,490 --> 00:01:05,040
code in that folder that's for Node.js.

22
00:01:05,040 --> 00:01:07,780
And the way we can do that is run express,

23
00:01:07,780 --> 00:01:10,640
I'm going to give it a folder name, we'll say ExpressSite,

24
00:01:10,640 --> 00:01:13,560
and then I can give it a technology for how to render the views,

25
00:01:13,560 --> 00:01:16,840
I'm going to use something called Handlebars.

26
00:01:16,840 --> 00:01:18,340
So that will run,

27
00:01:18,340 --> 00:01:22,750
and now what we have to do to get this site up and running is first off,

28
00:01:22,750 --> 00:01:24,740
run these commands.

29
00:01:24,740 --> 00:01:26,620
So we're going to cd into the folder,

30
00:01:26,620 --> 00:01:29,060
and then we're going to install all the dependencies

31
00:01:29,060 --> 00:01:31,940
of this particular web application.

32
00:01:31,940 --> 00:01:37,640
So this will take just a moment to pull these dependencies down.

33
00:01:37,640 --> 00:01:40,630
All right, we're ready to go, and then I'm going to get this running.

34
00:01:40,630 --> 00:01:43,800
Now I do have Node.js running on this local machine of course,

35
00:01:43,800 --> 00:01:46,740
that's how I'm running npm and these other commands,

36
00:01:46,740 --> 00:01:51,570
but the goal is not to run node here, it's to run it in a Docker container.

37
00:01:51,570 --> 00:01:54,350
But this will show us that the source code is running properly,

38
00:01:54,350 --> 00:01:56,440
at least locally to start.

39
00:01:56,440 --> 00:02:01,140
So, now that I'm in the ExpressSite I can just type npm start,

40
00:02:01,140 --> 00:02:04,440
and this will fire off this little web server here,

41
00:02:04,440 --> 00:02:07,930
and now we can come on in and there we go,

42
00:02:07,930 --> 00:02:09,560
we now have a little Express site.

43
00:02:09,560 --> 00:02:12,340
All right, so we're off and running.

44
00:02:12,340 --> 00:02:15,230
Now that's nice and all, but that's actually just running

45
00:02:15,230 --> 00:02:18,550
Express directly from this particular folder.

46
00:02:18,550 --> 00:02:22,010
So I'm just going to go ahead and kill that, we'll leave this open to start.

47
00:02:22,010 --> 00:02:26,300
So the next thing I'm going to do is show you how we can work with volumes.

48
00:02:26,300 --> 00:02:32,840
So we're going to come back to the Docker client, and if I run docker images,

49
00:02:32,840 --> 00:02:36,730
I've already pulled the latest Node.js image that we're going to

50
00:02:36,730 --> 00:02:40,080
ultimately create into a container from Docker Hub,

51
00:02:40,080 --> 00:02:44,320
and so normally to run this we would just say docker run,

52
00:02:44,320 --> 00:02:47,570
we'd give it a port, we'd give it the external port,

53
00:02:47,570 --> 00:02:51,390
I'm going to say 8080, and then you saw that the Express website

54
00:02:51,390 --> 00:02:54,740
that I got going is actually going to run on 3000.

55
00:02:54,740 --> 00:02:58,740
And we would say node, but if we run this, we don't have any source code.

56
00:02:58,740 --> 00:03:01,460
So, basically what will happen is the container will try to start,

57
00:03:01,460 --> 00:03:05,120
it will see there's no command to run, and it'll just exit.

58
00:03:05,120 --> 00:03:06,840
It'll just stop.

59
00:03:06,840 --> 00:03:08,940
So we're not going to do that.

60
00:03:08,940 --> 00:03:12,030
What I'm going to do first is create a volume.

61
00:03:12,030 --> 00:03:16,730
Now, the first volume I'm going to show you is going to be this var/www,

62
00:03:16,730 --> 00:03:21,440
or I like to call it dub dub dub to shorten it up, but

63
00:03:21,440 --> 00:03:22,670
this is going to create a volume,

64
00:03:22,670 --> 00:03:25,020
but it doesn't actually point to our source code.

65
00:03:25,020 --> 00:03:29,740
This is just an area that if we did have something running in the container,

66
00:03:29,740 --> 00:03:35,240
and the path for the running app wanted to write to var/www or read from it,

67
00:03:35,240 --> 00:03:40,110
then it would create a volume outside of the container in the host machine.

68
00:03:40,110 --> 00:03:44,770
And so now I could say node here for the image and we'll go ahead and return,

69
00:03:44,770 --> 00:03:49,020
and now it just started the container, but again there was nothing to run.

70
00:03:49,020 --> 00:03:55,240
So if we do docker ps ‑a, you should see that it's exited.

71
00:03:55,240 --> 00:03:57,170
So really, what happened is it tried to start it,

72
00:03:57,170 --> 00:04:01,220
didn't see anything fancy, and then stopped it, but we

73
00:04:01,220 --> 00:04:04,440
should now have a volume under the covers.

74
00:04:04,440 --> 00:04:06,840
Now you'll notice the container ID.

75
00:04:06,840 --> 00:04:11,230
Now what we can do from here is we can say docker inspect,

76
00:04:11,230 --> 00:04:13,860
and then give it the start of that container ID,

77
00:04:13,860 --> 00:04:16,120
or we could do the drunk_borg,

78
00:04:16,120 --> 00:04:19,150
that's one of the more interesting ones I've seen as an alias,

79
00:04:19,150 --> 00:04:21,440
but we'll go with the 03 here,

80
00:04:21,440 --> 00:04:25,950
and this will spit out a whole bunch of information about that

81
00:04:25,950 --> 00:04:29,500
particular container, and I'm going to scroll back up and we're

82
00:04:29,500 --> 00:04:32,640
going to look for something called Mounts.

83
00:04:32,640 --> 00:04:33,630
All right, there we go.

84
00:04:33,630 --> 00:04:37,140
So there's our Mounts you can see right there.

85
00:04:37,140 --> 00:04:40,160
Now you'll notice that we have a source on the host

86
00:04:40,160 --> 00:04:44,320
system that's a really long path, and it uses this name,

87
00:04:44,320 --> 00:04:49,040
which is a unique identifier for the particular volume, and it

88
00:04:49,040 --> 00:04:51,890
kind of buries it in this folder structure that you'll see right

89
00:04:51,890 --> 00:04:55,780
here. Now on the container itself,

90
00:04:55,780 --> 00:05:01,540
the alias for this path that's on the host is just var/www.

91
00:05:01,540 --> 00:05:07,740
So again, if we read from var/www or we write to var/www,

92
00:05:07,740 --> 00:05:09,890
what it's going to really do is be writing to this

93
00:05:09,890 --> 00:05:12,840
location or reading from this location.

94
00:05:12,840 --> 00:05:15,770
Now that doesn't help us as much with source code because I'd

95
00:05:15,770 --> 00:05:19,590
have to get my source code into that folder, and that's not a

96
00:05:19,590 --> 00:05:21,590
path I really want to work with,

97
00:05:21,590 --> 00:05:26,670
so what I'm going to do is come back down and we're going

98
00:05:26,670 --> 00:05:28,170
to go ahead and remove the container.

99
00:05:28,170 --> 00:05:31,940
So again, if we do docker ps ‑a for all,

100
00:05:31,940 --> 00:05:35,580
this will show us all the containers, even the exited ones,

101
00:05:35,580 --> 00:05:38,970
and then I'm going to do the normal docker remove that we've learned up

102
00:05:38,970 --> 00:05:42,040
to this point, but I'm going to add one more thing.

103
00:05:42,040 --> 00:05:45,830
I want to make sure that that volume that's on the host machine

104
00:05:45,830 --> 00:05:48,940
also gets removed when we removed this container.

105
00:05:48,940 --> 00:05:53,290
So I can do the 03 for the container ID, but by adding ‑v

106
00:05:53,290 --> 00:05:56,340
that'll go ahead and clean up the volume.

107
00:05:56,340 --> 00:06:00,540
Now normally when you remove a container,

108
00:06:00,540 --> 00:06:02,860
it's not going to delete the volumes because there might be

109
00:06:02,860 --> 00:06:05,040
another container that's using that volume.

110
00:06:05,040 --> 00:06:08,090
So if this is the last container that uses that volume,

111
00:06:08,090 --> 00:06:12,240
you typically want to clean that up, and that's what I'm going to do here.

112
00:06:12,240 --> 00:06:16,420
All right, so now if I do docker ps ‑a again,

113
00:06:16,420 --> 00:06:20,440
you'll notice that we're all cleaned up and we're good to go here.

114
00:06:20,440 --> 00:06:25,950
All right, now we have that ExpressSite folder that I created earlier though,

115
00:06:25,950 --> 00:06:31,840
so what I want to do is let's cd into that,

116
00:06:31,840 --> 00:06:32,020
alright,

117
00:06:32,020 --> 00:06:35,980
and we can do an ls to basically list everything, kind of like a

118
00:06:35,980 --> 00:06:38,840
dir that you normally do on the Windows side,

119
00:06:38,840 --> 00:06:41,420
and you'll notice that we have this app.js and some

120
00:06:41,420 --> 00:06:43,480
node_modules and package.json,

121
00:06:43,480 --> 00:06:47,740
and this is pretty standard folders for an Express site.

122
00:06:47,740 --> 00:06:52,000
So what I want to do is link this folder into the

123
00:06:52,000 --> 00:06:57,440
container and then start up Node, very similar to what I just did earlier.

124
00:06:57,440 --> 00:07:00,020
So what we can do is use the volume support that I talked

125
00:07:00,020 --> 00:07:02,540
about in a previous section in this module.

126
00:07:02,540 --> 00:07:04,400
And so we could do something very similar,

127
00:07:04,400 --> 00:07:08,430
we can say docker run, give it a port on the external 8080,

128
00:07:08,430 --> 00:07:10,440
internal it's 3000,

129
00:07:10,440 --> 00:07:14,130
but this time when I create the volume I'm going to say let's

130
00:07:14,130 --> 00:07:18,490
start from the current working directory, and this is the little

131
00:07:18,490 --> 00:07:21,140
shortcut I showed earlier you can do.

132
00:07:21,140 --> 00:07:24,080
And this is going to be the directory that the volume in the

133
00:07:24,080 --> 00:07:26,440
container is actually going to point to.

134
00:07:26,440 --> 00:07:28,080
Perfect, because that's what we want.

135
00:07:28,080 --> 00:07:32,840
We want to point to our source code, which is in this Express site.

136
00:07:32,840 --> 00:07:36,610
Now, the name again we're going to use is var/www.

137
00:07:36,610 --> 00:07:39,020
Now I made that up, it could have been something else,

138
00:07:39,020 --> 00:07:41,340
but I'm going to go with that.

139
00:07:41,340 --> 00:07:44,440
And then normally we would say node,

140
00:07:44,440 --> 00:07:47,180
and then if you want to run any commands in the container,

141
00:07:47,180 --> 00:07:50,230
we could run that npm start command.

142
00:07:50,230 --> 00:07:52,340
Now we're going to have a problem here.

143
00:07:52,340 --> 00:07:57,340
It won't actually run npm start from this folder.

144
00:07:57,340 --> 00:07:58,990
It'll run it from a different location.

145
00:07:58,990 --> 00:08:00,800
So I'm going to show you a little trick you can do

146
00:08:00,800 --> 00:08:04,020
here called the working directory.

147
00:08:04,020 --> 00:08:08,830
So we're going to say ‑w, and that stands for the working directory,

148
00:08:08,830 --> 00:08:12,710
it's a shortcut of what is the startup directory,

149
00:08:12,710 --> 00:08:16,600
what's the folder in the container where any command

150
00:08:16,600 --> 00:08:19,140
should actually be executed from.

151
00:08:19,140 --> 00:08:22,540
So it kind of sets the context of where to run these commands.

152
00:08:22,540 --> 00:08:27,640
And I'm just going to say /var/www here,

153
00:08:27,640 --> 00:08:28,650
put the image,

154
00:08:28,650 --> 00:08:32,040
and then after that we can put the command that we want

155
00:08:32,040 --> 00:08:36,340
to run, and I want to run npm start.

156
00:08:36,340 --> 00:08:38,470
Alright so to review, we're going to say,

157
00:08:38,470 --> 00:08:42,960
hey Docker, let's run on port 8080 on the external,

158
00:08:42,960 --> 00:08:46,400
3000 is going to be internally what we're going to run and

159
00:08:46,400 --> 00:08:49,050
I picked that on purpose because that's what this Express

160
00:08:49,050 --> 00:08:50,790
site will use by default.

161
00:08:50,790 --> 00:08:53,650
We could change it, but that's how it's set up currently.

162
00:08:53,650 --> 00:08:56,880
We're going to set up a volume that points to our source

163
00:08:56,880 --> 00:08:59,440
code in the current working directory,

164
00:08:59,440 --> 00:09:03,890
and then the volume, though, that's inside of the container that's going to

165
00:09:03,890 --> 00:09:07,910
point to this ExpressSite folder is going to be var/www,

166
00:09:07,910 --> 00:09:13,640
then we're going to go ahead and use that volume as our working directory.

167
00:09:13,640 --> 00:09:15,980
That way when I run npm start,

168
00:09:15,980 --> 00:09:21,490
really what it's going to do is forward the call from var/www into this

169
00:09:21,490 --> 00:09:25,440
ExpressSite, which will call into an area over here.

170
00:09:25,440 --> 00:09:29,350
Alright, so a lot going on, but let's go ahead and try it out,

171
00:09:29,350 --> 00:09:32,240
and I'll just hit Return here.

172
00:09:32,240 --> 00:09:34,540
All right, now you'll notice it started it up,

173
00:09:34,540 --> 00:09:37,550
but this time it's not running on my local machine, it's

174
00:09:37,550 --> 00:09:41,040
actually running in the Docker Node container.

175
00:09:41,040 --> 00:09:41,840
So this is very,

176
00:09:41,840 --> 00:09:46,950
very cool because I've now linked my source code into this container,

177
00:09:46,950 --> 00:09:50,260
and even if I didn't have Node installed,

178
00:09:50,260 --> 00:09:54,440
if I just had the source code, but didn't have Node on my dev machine at all,

179
00:09:54,440 --> 00:09:57,010
then we could still work with Node because obviously it

180
00:09:57,010 --> 00:09:59,540
would be loaded up in the container.

181
00:09:59,540 --> 00:10:00,960
All right, so let's try this out.

182
00:10:00,960 --> 00:10:04,170
Now, instead of going to localhost, I want to go to the IP address.

183
00:10:04,170 --> 00:10:13,740
Now, this will be the Docker machine IP, so we're going to go to 192.168.99.100.

184
00:10:13,740 --> 00:10:16,340
I'm not going to go to 3000 though.

185
00:10:16,340 --> 00:10:19,740
Back here we said that, what we'd put,

186
00:10:19,740 --> 00:10:23,230
we want to go from 8080 to 3000 internally in the container,

187
00:10:23,230 --> 00:10:27,140
so I want to use 8080 right there.

188
00:10:27,140 --> 00:10:31,770
We'll hit Enter, all right, and you'll notice we get the exact same Express site.

189
00:10:31,770 --> 00:10:37,570
Now, just to kind of prove this, let me dive into the source code real quick,

190
00:10:37,570 --> 00:10:42,940
and so I'm just going to run off to this folder in Users,

191
00:10:42,940 --> 00:10:45,830
and where is Express, there it is, ExpressSite,

192
00:10:45,830 --> 00:10:49,290
and let's just come in and I'm going to do a change to the view.

193
00:10:49,290 --> 00:10:51,680
And right now it's loading the home page,

194
00:10:51,680 --> 00:10:56,640
this is called index, I'm just going to open this up in VS Code editor.

195
00:10:56,640 --> 00:10:58,120
We'll do a very simple edit.

196
00:10:58,120 --> 00:10:59,530
So it says Welcome to title,

197
00:10:59,530 --> 00:11:05,120
and say Welcome to title running within a Docker

198
00:11:05,120 --> 00:11:10,240
Container with a volume, no less, which is pretty cool.

199
00:11:10,240 --> 00:11:11,960
Alright, we're going to go ahead and save that,

200
00:11:11,960 --> 00:11:15,440
that should now be committed in the source code,

201
00:11:15,440 --> 00:11:17,930
and you'll notice, look at that.

202
00:11:17,930 --> 00:11:23,240
So now our source code is linked, and we just proved it, into the container,

203
00:11:23,240 --> 00:11:26,210
so now I can do all my edits locally,

204
00:11:26,210 --> 00:11:29,150
but I can actually run it in whatever container I want.

205
00:11:29,150 --> 00:11:33,840
Now, in this particular demo I'm using Node.js, but this applies to PHP,

206
00:11:33,840 --> 00:11:38,440
ASP.NET, Python, whatever it is you want to run.

207
00:11:38,440 --> 00:11:42,540
So that's an example of the actual commands that we learned about going back to

208
00:11:42,540 --> 00:11:46,770
up here that would allow us to link our working directory,

209
00:11:46,770 --> 00:11:49,040
the current folder that is on our local machine on

210
00:11:49,040 --> 00:11:51,640
a Mac or Windows or even Linux,

211
00:11:51,640 --> 00:11:55,640
and we can now link that into the volume that we

212
00:11:55,640 --> 00:12:03,000
defined this var/www up in the container. Pretty cool stuff.

