WEBVTT
1
00:00:00.740 --> 00:00:03.620
Let's assume that you just got back from a team meeting,

2
00:00:03.620 --> 00:00:06.990
and you've now been tasked with making a custom

3
00:00:06.990 --> 00:00:10.260
Docker image that the team could use, and specifically,

4
00:00:10.260 --> 00:00:13.540
you need to build a Node.js image.

5
00:00:13.540 --> 00:00:14.420
Now to do that,

6
00:00:14.420 --> 00:00:16.940
we're going to need to build a custom Dockerfile, and we're

7
00:00:16.940 --> 00:00:19.040
going to need to add instructions into it.

8
00:00:19.040 --> 00:00:21.410
Now, once we're done with that, I'll show you a little bit later,

9
00:00:21.410 --> 00:00:25.870
we can then use Docker client to actually build that into an image.

10
00:00:25.870 --> 00:00:29.440
And then, of course, we can convert the image into a running container.

11
00:00:29.440 --> 00:00:33.140
So let's take a look at how we can do this.

12
00:00:33.140 --> 00:00:36.290
So I have some code here for a Node.js Express site,

13
00:00:36.290 --> 00:00:39.410
and this is the same one generated from Express generator,

14
00:00:39.410 --> 00:00:42.970
and I want to call out one thing in the package.json file.

15
00:00:42.970 --> 00:00:46.320
You'll notice that we have an npm start command that can be run,

16
00:00:46.320 --> 00:00:47.350
and when that runs,

17
00:00:47.350 --> 00:00:52.440
it actually runs the node command and then points to a file called www here.

18
00:00:52.440 --> 00:00:52.720
Alright,

19
00:00:52.720 --> 00:00:57.340
that's going to come into play in just a moment as we make this Dockerfile.

20
00:00:57.340 --> 00:00:57.430
Now,

21
00:00:57.430 --> 00:00:59.370
the next thing I have in here is I've already added

22
00:00:59.370 --> 00:01:02.440
an empty file called Dockerfile.

23
00:01:02.440 --> 00:01:05.650
Now it turns out you can actually name it whatever you want.

24
00:01:05.650 --> 00:01:07.300
This is the standard format,

25
00:01:07.300 --> 00:01:10.030
but if I wanted to rename it to something like

26
00:01:10.030 --> 00:01:14.340
node.dockerfile just to give it an extension,

27
00:01:14.340 --> 00:01:15.560
I could definitely do that.

28
00:01:15.560 --> 00:01:19.340
And when I have just one Dockerfile in a project,

29
00:01:19.340 --> 00:01:21.430
then I'll usually just go with the de facto standard,

30
00:01:21.430 --> 00:01:25.340
which is this Dockerfile, this one here.

31
00:01:25.340 --> 00:01:28.940
But if you have multiple or you just want to give it a more explicit name,

32
00:01:28.940 --> 00:01:30.210
then you certainly can rename it.

33
00:01:30.210 --> 00:01:32.440
It's just a text file.

34
00:01:32.440 --> 00:01:36.840
Now, the first thing we're going to do is use the from instruction.

35
00:01:36.840 --> 00:01:40.200
Now the from instruction instructs Docker,

36
00:01:40.200 --> 00:01:42.350
I want to build this particular image that we're going

37
00:01:42.350 --> 00:01:45.860
to make from another base image,

38
00:01:45.860 --> 00:01:48.800
and because we're going to be doing Node.js in this example,

39
00:01:48.800 --> 00:01:50.950
I'm going to base it on the official node repository

40
00:01:50.950 --> 00:01:55.040
image that's up on hub.docker.com.

41
00:01:55.040 --> 00:01:57.650
Now this particular image has a lot of different versions.

42
00:01:57.650 --> 00:02:01.990
So you could do this alone, and that would be like doing this,

43
00:02:01.990 --> 00:02:03.440
latest,

44
00:02:03.440 --> 00:02:05.960
and that will always grab the latest version of Node

45
00:02:05.960 --> 00:02:08.040
every time you rebuild the image.

46
00:02:08.040 --> 00:02:10.850
Now that could be good, that could be bad because,

47
00:02:10.850 --> 00:02:13.940
you know, it could be you don't want to move forward with the latest version,

48
00:02:13.940 --> 00:02:17.270
but you could also come in and we could specify a different version,

49
00:02:17.270 --> 00:02:19.840
for instance, if we wanted as well.

50
00:02:19.840 --> 00:02:22.310
Now I'm going to go ahead and go with the latest one here,

51
00:02:22.310 --> 00:02:25.890
and I do like to put latest in cases where I want to grab the latest,

52
00:02:25.890 --> 00:02:28.840
because it makes it really obvious, even though,

53
00:02:28.840 --> 00:02:31.410
as I mentioned, this is the default that will grab the latest,

54
00:02:31.410 --> 00:02:33.980
but I like to be explicit.

55
00:02:33.980 --> 00:02:36.040
So we're going to go ahead and do that.

56
00:02:36.040 --> 00:02:36.160
Now,

57
00:02:36.160 --> 00:02:38.440
the next thing I'm going to do is I'm going to say that I'm the

58
00:02:38.440 --> 00:02:41.420
maintainer of this particular Dockerfile,

59
00:02:41.420 --> 00:02:44.090
and then you can give your name, you could put your email address,

60
00:02:44.090 --> 00:02:45.540
whatever you want on this line.

61
00:02:45.540 --> 00:02:47.930
So this is a little bit more of just metadata,

62
00:02:47.930 --> 00:02:51.140
but it's good to have as other people look at your Dockerfile,

63
00:02:51.140 --> 00:02:55.440
maybe they want to get in touch with you for whatever reason.

64
00:02:55.440 --> 00:02:58.290
Now the next instruction I'm going to put is called expose.

65
00:02:58.290 --> 00:03:02.040
I'm going to say that we would like this particular image and the

66
00:03:02.040 --> 00:03:05.470
container that comes out of this to actually run on 3000,

67
00:03:05.470 --> 00:03:09.440
and that's because that's what the Express side by default will run on.

68
00:03:09.440 --> 00:03:11.650
Now, when we do Docker run, as you've seen,

69
00:03:11.650 --> 00:03:13.640
we can actually map different ports if we want,

70
00:03:13.640 --> 00:03:16.140
but this will give the default.

71
00:03:16.140 --> 00:03:19.820
And then finally, I'm going to put something called ENTRYPOINT,

72
00:03:19.820 --> 00:03:25.720
and the ENTRYPOINT command is when the container actually gets started up,

73
00:03:25.720 --> 00:03:29.170
what is the entry point to fire up that container,

74
00:03:29.170 --> 00:03:32.350
and for us, it's going to be the npm start command.

75
00:03:32.350 --> 00:03:34.960
So I'm going to put npm start.

76
00:03:34.960 --> 00:03:36.820
Now something interesting about this,

77
00:03:36.820 --> 00:03:39.840
you'll notice I'm putting it in a JSON array.

78
00:03:39.840 --> 00:03:42.090
In fact, I have to put the double quotes in this case,

79
00:03:42.090 --> 00:03:46.240
because it is a JSON array; it's treating it that way under the covers.

80
00:03:46.240 --> 00:03:48.480
Now, I could do this as well,

81
00:03:48.480 --> 00:03:53.040
but the normal recommended way that most people will tell you anyway,

82
00:03:53.040 --> 00:03:55.940
is to go with something like this.

83
00:03:55.940 --> 00:03:57.470
Alright, so there we have it.

84
00:03:57.470 --> 00:04:01.040
We now have our very first node image.

85
00:04:01.040 --> 00:04:03.910
Now, it hasn't really done a whole lot,

86
00:04:03.910 --> 00:04:07.310
because I could have just done a Docker run on the

87
00:04:07.310 --> 00:04:09.840
node image up in Docker hub itself.

88
00:04:09.840 --> 00:04:13.740
And the only thing I've gained here is I put who the maintainer was,

89
00:04:13.740 --> 00:04:15.490
really, not a whole lot.

90
00:04:15.490 --> 00:04:17.990
You know, I did put the default entry point.

91
00:04:17.990 --> 00:04:19.640
Okay, that could be useful,

92
00:04:19.640 --> 00:04:22.820
but there's no source code that's going to be built in this image,

93
00:04:22.820 --> 00:04:25.940
so we'd have to use volume support to make that happen.

94
00:04:25.940 --> 00:04:30.940
So let's take this up just a notch and see what we can do here with it.

95
00:04:30.940 --> 00:04:34.690
So let's say that part of the requirements for making this image was

96
00:04:34.690 --> 00:04:38.960
that we needed to copy some source code into it so that when other

97
00:04:38.960 --> 00:04:43.060
people on the team run the container, they don't really have to do anything.

98
00:04:43.060 --> 00:04:45.490
Maybe it's going to be a Node.js RESTful API,

99
00:04:45.490 --> 00:04:48.400
maybe it's just a web app that's just going to be running that will

100
00:04:48.400 --> 00:04:51.440
be hit from some other container potentially.

101
00:04:51.440 --> 00:04:55.100
So what I'd like to do first is come on in and use another

102
00:04:55.100 --> 00:05:00.380
instruction for Dockerfile called COPY, and COPY does kind of what it says.

103
00:05:00.380 --> 00:05:02.910
It allows you to copy in whatever you want.

104
00:05:02.910 --> 00:05:04.240
It could be an individual file.

105
00:05:04.240 --> 00:05:06.700
It could be an entire folder structure, but we're going to copy the

106
00:05:06.700 --> 00:05:09.150
entire project that you see over here on the left.

107
00:05:09.150 --> 00:05:11.340
That's everything in here.

108
00:05:11.340 --> 00:05:14.120
And I'd like to copy that into the var/www,

109
00:05:14.120 --> 00:05:17.710
and that's just a folder structure I'm going to go with to

110
00:05:17.710 --> 00:05:19.970
say that's what we want our code to run.

111
00:05:19.970 --> 00:05:24.790
And what that will do is now bake the source code as a file layer into that

112
00:05:24.790 --> 00:05:28.240
layered file system that Docker builds up for images.

113
00:05:28.240 --> 00:05:29.860
And so now our code is going to be in there,

114
00:05:29.860 --> 00:05:32.840
it's baked in, it's going to be ready to go.

115
00:05:32.840 --> 00:05:37.140
We could also then come in and set the work directory.

116
00:05:37.140 --> 00:05:40.710
What the work directory allows us to do is set the context for

117
00:05:40.710 --> 00:05:42.390
different commands we might want to run.

118
00:05:42.390 --> 00:05:43.750
Where does it run them from?

119
00:05:43.750 --> 00:05:45.290
Does it run them from the root?

120
00:05:45.290 --> 00:05:48.490
Does it run them in this folder called var/www?

121
00:05:48.490 --> 00:05:49.650
It's kind of up to you.

122
00:05:49.650 --> 00:05:53.880
So I'm going to say, yes, we want to run it from this var/www.

123
00:05:53.880 --> 00:05:58.320
Now, the reason that's important is when I use instructions like run,

124
00:05:58.320 --> 00:06:02.080
which is another one that's built into Docker and the Dockerfile,

125
00:06:02.080 --> 00:06:05.840
then it needs to know, in some cases,

126
00:06:05.840 --> 00:06:09.190
the folder where the context is where that should be run.

127
00:06:09.190 --> 00:06:12.940
So, for instance, if I run something like npm install,

128
00:06:12.940 --> 00:06:15.210
then we probably are going to want to run that

129
00:06:15.210 --> 00:06:17.840
where the package.json is located.

130
00:06:17.840 --> 00:06:19.760
Had I not put the work directory,

131
00:06:19.760 --> 00:06:23.150
then we would have to actually tell it the context of where to run

132
00:06:23.150 --> 00:06:26.240
this command so it can find that package.json,

133
00:06:26.240 --> 00:06:31.140
and find all these dependencies that it might want to add to get those going.

134
00:06:31.140 --> 00:06:31.480
Alright,

135
00:06:31.480 --> 00:06:35.460
so the work directory you'll find is actually pretty common and very useful,

136
00:06:35.460 --> 00:06:36.890
especially for us as developers,

137
00:06:36.890 --> 00:06:40.300
because our images might need to run some specific

138
00:06:40.300 --> 00:06:44.040
commands in that folder or that location.

139
00:06:44.040 --> 00:06:44.290
Now,

140
00:06:44.290 --> 00:06:48.210
the other thing we can do that's related to this work directory is we

141
00:06:48.210 --> 00:06:53.280
could say that maybe we want it for whatever reason on the host system

142
00:06:53.280 --> 00:06:55.840
where the container is ultimately going to run,

143
00:06:55.840 --> 00:06:58.600
and we know how to do that, and that's to use volumes.

144
00:06:58.600 --> 00:07:05.670
So I could actually come in and say volume, and then I could give it var/www.

145
00:07:05.670 --> 00:07:08.250
Now that alone is going to cause Docker,

146
00:07:08.250 --> 00:07:14.940
once the container runs, to mount this particular volume that's in the container,

147
00:07:14.940 --> 00:07:18.960
onto a folder or into a folder on the host file system.

148
00:07:18.960 --> 00:07:23.140
And we talked about this in a previous module in pretty good depth,

149
00:07:23.140 --> 00:07:27.710
but this would set that scenario up, and it's really useful.

150
00:07:27.710 --> 00:07:29.610
We might even have multiple volumes.

151
00:07:29.610 --> 00:07:34.940
Maybe this app needs to write to, we'll just pretend there's a logs area.

152
00:07:34.940 --> 00:07:39.240
Well, we could set up a volume so that the logs actually stick around,

153
00:07:39.240 --> 00:07:45.040
even if the container is deleted, and then maybe brought back up at a later time.

154
00:07:45.040 --> 00:07:46.630
So that's what the volume command can do.

155
00:07:46.630 --> 00:07:49.880
Now, I'm just going to leave this in here just to show it.

156
00:07:49.880 --> 00:07:52.670
Keep in mind that with the Docker run command that we

157
00:07:52.670 --> 00:07:55.040
looked at in previous modules in the course,

158
00:07:55.040 --> 00:08:01.240
I showed you how we can actually set up a volume; it was the ‑v switch,

159
00:08:01.240 --> 00:08:05.740
and we can point that, for instance, to the source code on our developer machine.

160
00:08:05.740 --> 00:08:06.270
But in this case,

161
00:08:06.270 --> 00:08:09.640
we're going to go ahead and use the volume just so we can kind of see it here.

162
00:08:09.640 --> 00:08:10.210
Alright, now,

163
00:08:10.210 --> 00:08:13.390
the last thing we're going to do is let's assume that also that this

164
00:08:13.390 --> 00:08:16.030
needs to run with certain environment variables,

165
00:08:16.030 --> 00:08:19.030
maybe, for instance, our code.

166
00:08:19.030 --> 00:08:20.600
We're going to expose it here,

167
00:08:20.600 --> 00:08:24.650
but maybe instead of using this when they run the container,

168
00:08:24.650 --> 00:08:26.530
they might specify a different port.

169
00:08:26.530 --> 00:08:29.960
Maybe in production, it's port 8080 or something like that.

170
00:08:29.960 --> 00:08:32.340
Well, we can use environment variables as well.

171
00:08:32.340 --> 00:08:35.110
Now, I normally like to put these up at the top,

172
00:08:35.110 --> 00:08:36.930
although they can go in different places.

173
00:08:36.930 --> 00:08:39.380
It depends on if you're going to use them in the Dockerfile or not,

174
00:08:39.380 --> 00:08:42.640
but in this case, we're just going to make an environment variable,

175
00:08:42.640 --> 00:08:44.440
and I'm going to make two of them.

176
00:08:44.440 --> 00:08:45.810
We're going to do the node environment,

177
00:08:45.810 --> 00:08:50.640
and let's just assume we want production for this particular container,

178
00:08:50.640 --> 00:08:54.040
instead of the default, which would be development.

179
00:08:54.040 --> 00:08:55.970
Let's go back to production,

180
00:08:55.970 --> 00:08:59.650
and then I could right here do another named value pair,

181
00:08:59.650 --> 00:09:01.770
as you'll see these environment variables are just the

182
00:09:01.770 --> 00:09:04.740
name of the environment variable, and then the value.

183
00:09:04.740 --> 00:09:05.820
And I could just do another one,

184
00:09:05.820 --> 00:09:07.800
but I'm going to break it into two steps so you can

185
00:09:07.800 --> 00:09:10.340
see the separate instructions.

186
00:09:10.340 --> 00:09:12.910
Let's say we also want to put a default port,

187
00:09:12.910 --> 00:09:14.520
and I'm going to go ahead and leave 3000,

188
00:09:14.520 --> 00:09:16.840
that is what Express runs,

189
00:09:16.840 --> 00:09:19.140
but this would be an environment variable that your

190
00:09:19.140 --> 00:09:21.840
Node.js code can now read from.

191
00:09:21.840 --> 00:09:23.770
So now when that container gets fired up,

192
00:09:23.770 --> 00:09:27.970
and if this is for production, you could potentially say a different port,

193
00:09:27.970 --> 00:09:31.140
maybe for production containers or something like that.

194
00:09:31.140 --> 00:09:34.030
Now I'm going to go ahead and match it with the EXPOSE that we have here,

195
00:09:34.030 --> 00:09:36.230
but the goal again is just to show you that,

196
00:09:36.230 --> 00:09:39.440
yeah, we can do environment variables.

197
00:09:39.440 --> 00:09:43.840
So that's an example of a custom Dockerfile that does a few things.

198
00:09:43.840 --> 00:09:48.940
Number one, as a review, it pulls in the latest Node.js image.

199
00:09:48.940 --> 00:09:51.040
We say who the maintainer is.

200
00:09:51.040 --> 00:09:53.590
We define two environment variables that will be in

201
00:09:53.590 --> 00:09:56.040
and available to that container.

202
00:09:56.040 --> 00:09:59.200
We copy our local source code from here into the

203
00:09:59.200 --> 00:10:04.060
image into a folder called var/www, which is also our working directory,

204
00:10:04.060 --> 00:10:06.320
and it's going to be set up as a volume,

205
00:10:06.320 --> 00:10:09.960
which in this case means the Docker host would actually be

206
00:10:09.960 --> 00:10:12.240
where that source code is going to live.

207
00:10:12.240 --> 00:10:14.940
But we can override that again with Docker run.

208
00:10:14.940 --> 00:10:16.420
We're going to run the npm install command,

209
00:10:16.420 --> 00:10:19.740
because we need to get our dependencies installed once that container is

210
00:10:19.740 --> 00:10:26.380
going, EXPOSE port 3000 for the internal port for our container, and then

211
00:10:26.380 --> 00:10:28.960
we're going to have our entry point as npm start,

212
00:10:28.960 --> 00:10:32.540
and that would be an example of a Dockerfile.

213
00:10:32.540 --> 00:10:35.600
Now, before we wrap this up, I'm going to clean it up just a little bit,

214
00:10:35.600 --> 00:10:40.050
because I don't want to actually put this here and here for the port,

215
00:10:40.050 --> 00:10:42.690
because if we are going to be running dynamically

216
00:10:42.690 --> 00:10:44.680
based on a port that code loads,

217
00:10:44.680 --> 00:10:47.550
and I probably want to expose that same type of thing. So we

218
00:10:47.550 --> 00:10:52.190
can actually use environment variables, and I can do something like this.

219
00:10:52.190 --> 00:10:55.540
And what the image will do is once this is defined,

220
00:10:55.540 --> 00:10:58.210
it will then go and apply that exact value,

221
00:10:58.210 --> 00:11:00.470
which in this case will be 3000 right there.

222
00:11:00.470 --> 00:11:03.410
And there's a few other spots we could potentially even do that,

223
00:11:03.410 --> 00:11:05.240
maybe even for in these areas.

224
00:11:05.240 --> 00:11:07.510
But we'll go ahead and leave it right now,

225
00:11:07.510 --> 00:11:10.050
because I don't need to set that as an environment variable,

226
00:11:10.050 --> 00:11:12.640
but the port might be something.

227
00:11:12.640 --> 00:11:17.540
So now the EXPOSE will actually read it from the environment variable value.

228
00:11:17.540 --> 00:11:22.230
So that's an example of some of the key Dockerfile instructions you can use.

229
00:11:22.230 --> 00:11:24.680
There are certainly many, many others out there,

230
00:11:24.680 --> 00:11:27.930
but these are the key ones that you need to get started with.

231
00:11:27.930 --> 00:11:35.000
So now what we're going to learn about is how do we take this and actually convert it and build it into an image?

