1
00:00:01,040 --> 00:00:04,340
Developers are quite used to writing instructions in a code file,

2
00:00:04,340 --> 00:00:06,010
running those through a compiler,

3
00:00:06,010 --> 00:00:10,040
and then outputting some type of binary or other file.

4
00:00:10,040 --> 00:00:11,220
Well in the Docker world,

5
00:00:11,220 --> 00:00:14,720
we have a very similar type of process that we can follow to

6
00:00:14,720 --> 00:00:17,000
create an image and then a running container,

7
00:00:17,000 --> 00:00:20,940
and that's to create something called a Dockerfile.

8
00:00:20,940 --> 00:00:26,190
Now, a Dockerfile is nothing more than a text file that has instructions in it.

9
00:00:26,190 --> 00:00:28,700
Now these instructions, of course, are unique to Docker,

10
00:00:28,700 --> 00:00:31,080
and they're defined up in the Docker documentation,

11
00:00:31,080 --> 00:00:32,730
but it's a very,

12
00:00:32,730 --> 00:00:35,410
very similar process to, if you're writing Java or

13
00:00:35,410 --> 00:00:40,100
C# or another compiled language, you'll write some instructions in a file,

14
00:00:40,100 --> 00:00:43,740
and then in the developer world we'd run those through a compiler.

15
00:00:43,740 --> 00:00:47,340
Well in the Docker world, we'll run them through the Docker client

16
00:00:47,340 --> 00:00:49,530
and it has a build command we can run,

17
00:00:49,530 --> 00:00:52,500
and then that build command can read through those instructions,

18
00:00:52,500 --> 00:00:56,420
generate a layered file system, as we've talked about earlier in the course,

19
00:00:56,420 --> 00:01:00,790
and then we have a Docker image that comes out of this that we can then use,

20
00:01:00,790 --> 00:01:04,240
and we can make a container from that.

21
00:01:04,240 --> 00:01:07,490
Dockerfile itself, as mentioned, is really just a text file.

22
00:01:07,490 --> 00:01:09,810
There's really nothing fancy about it, in fact,

23
00:01:09,810 --> 00:01:14,030
it's normally called Dockerfile and oftentimes doesn't even have an extension,

24
00:01:14,030 --> 00:01:15,980
but you can name it whatever you want.

25
00:01:15,980 --> 00:01:21,340
It's just a text file that we want to feed into the Docker build process.

26
00:01:21,340 --> 00:01:23,240
And so it contains some build instructions,

27
00:01:23,240 --> 00:01:24,840
which we're going to be looking at,

28
00:01:24,840 --> 00:01:27,430
and these build instructions will do things like work with

29
00:01:27,430 --> 00:01:31,250
environment variables or copy source code into the image,

30
00:01:31,250 --> 00:01:33,640
and more.

31
00:01:33,640 --> 00:01:33,840
Now,

32
00:01:33,840 --> 00:01:36,210
the instructions that we're going to be doing oftentimes

33
00:01:36,210 --> 00:01:39,730
create intermediate images, and these images are kind of

34
00:01:39,730 --> 00:01:42,840
behind the scenes images that are cached,

35
00:01:42,840 --> 00:01:46,040
and that way if you maybe change an instruction,

36
00:01:46,040 --> 00:01:50,410
need to rebuild the image, it won't have to do everything from scratch.

37
00:01:50,410 --> 00:01:53,800
Now, there are ways you can override that and not cache anything,

38
00:01:53,800 --> 00:01:57,240
but then it'll make your build process take a little bit longer.

39
00:01:57,240 --> 00:01:58,170
And, as mentioned,

40
00:01:58,170 --> 00:02:00,970
we're going to be using a docker build command to actually

41
00:02:00,970 --> 00:02:05,840
convert the text file into an image.

42
00:02:05,840 --> 00:02:08,210
Now here's some of the key Dockerfile instructions,

43
00:02:08,210 --> 00:02:11,320
and this certainly is not all of them, it's just a few,

44
00:02:11,320 --> 00:02:15,870
and I'm going to talk through the high‑level look at what do these do.

45
00:02:15,870 --> 00:02:19,280
So normally what you'll do is you'll start off by saying I would

46
00:02:19,280 --> 00:02:22,030
like to create an image from another image.

47
00:02:22,030 --> 00:02:25,940
Now you can create it from scratch, from kind of nothing,

48
00:02:25,940 --> 00:02:28,150
but normally you'll create one based on,

49
00:02:28,150 --> 00:02:32,510
for instance, a Node.js image or a MongoDB image or PostgreSQL,

50
00:02:32,510 --> 00:02:33,790
or something like that.

51
00:02:33,790 --> 00:02:35,910
You'll use that as your baseline,

52
00:02:35,910 --> 00:02:40,840
and then you'll build on top of that using this layered file system.

53
00:02:40,840 --> 00:02:43,200
There's also a way you can define who maintains it,

54
00:02:43,200 --> 00:02:46,940
that's a very simple instruction, but you could say your name,

55
00:02:46,940 --> 00:02:48,850
and then there's a run command.

56
00:02:48,850 --> 00:02:52,430
Now the run command's really important because you can actually have different

57
00:02:52,430 --> 00:02:56,640
things defined that are going to be run, and these would be,

58
00:02:56,640 --> 00:02:59,290
I want to go out to the internet and grab something,

59
00:02:59,290 --> 00:03:02,640
I want to run npm install, dnu restore,

60
00:03:02,640 --> 00:03:08,540
those types of things could be actually run using this run instruction.

61
00:03:08,540 --> 00:03:11,140
Another really important one is copy.

62
00:03:11,140 --> 00:03:12,820
When you're ready to go to production,

63
00:03:12,820 --> 00:03:16,310
we learned about earlier in the course you can use volumes for source code,

64
00:03:16,310 --> 00:03:18,750
but when you go to production we want to copy that source

65
00:03:18,750 --> 00:03:21,450
code into the container oftentimes.

66
00:03:21,450 --> 00:03:24,160
There's multiple ways to do it, but that's pretty common,

67
00:03:24,160 --> 00:03:27,030
and so we can use the copy instruction to do that.

68
00:03:27,030 --> 00:03:31,260
You can also set what is the main entry point for this container.

69
00:03:31,260 --> 00:03:35,730
In other words, when you have an exe, or something like that on a system,

70
00:03:35,730 --> 00:03:38,230
you can normally double‑click it and it has a main

71
00:03:38,230 --> 00:03:40,740
entry point that kicks everything off.

72
00:03:40,740 --> 00:03:46,310
Very similar here, what is the initial entry point that kicks off the container,

73
00:03:46,310 --> 00:03:47,440
for instance?

74
00:03:47,440 --> 00:03:49,640
You can also define what the working directory is.

75
00:03:49,640 --> 00:03:54,310
This sets the context for where that container is going to run as,

76
00:03:54,310 --> 00:03:56,240
for instance, the entry point is run.

77
00:03:56,240 --> 00:04:02,240
So I could say what folder has my package.json, and I can do an npm run.

78
00:04:02,240 --> 00:04:03,850
You can also expose a port,

79
00:04:03,850 --> 00:04:05,900
and this will be the default port that the container

80
00:04:05,900 --> 00:04:09,760
would then run internally with, define environment variables,

81
00:04:09,760 --> 00:04:14,140
these environment variables can be used then in that container,

82
00:04:14,140 --> 00:04:16,740
and then we can even define volumes.

83
00:04:16,740 --> 00:04:18,530
And we've already looked at volumes in the course,

84
00:04:18,530 --> 00:04:22,230
but you can now define the actual volume and control how it

85
00:04:22,230 --> 00:04:26,060
stores that on the host system for that container,

86
00:04:26,060 --> 00:04:29,840
as we've already talked about with volumes.

87
00:04:29,840 --> 00:04:32,640
Now let's take a look at what a Dockerfile actually looks like then.

88
00:04:32,640 --> 00:04:37,340
That's a few of the commands, but it kind of helps to see them in action.

89
00:04:37,340 --> 00:04:39,160
So, first off you could say from,

90
00:04:39,160 --> 00:04:41,320
and this will always be the very first instruction that

91
00:04:41,320 --> 00:04:43,230
you're going to put at the top of your Dockerfile, and I'm

92
00:04:43,230 --> 00:04:46,590
going to say FROM node build an image.

93
00:04:46,590 --> 00:04:50,280
And this will grab Node as the base file system and then

94
00:04:50,280 --> 00:04:53,150
add additional layers on top of that.

95
00:04:53,150 --> 00:04:56,410
Now I could say the maintainer, in this case I obviously put me,

96
00:04:56,410 --> 00:04:57,730
but this is where you could put yourself,

97
00:04:57,730 --> 00:05:01,040
you could put your email, things like that.

98
00:05:01,040 --> 00:05:04,750
Then we can say I'd like to copy my source code from my

99
00:05:04,750 --> 00:05:08,000
current folder I'm building from, in this case dot,

100
00:05:08,000 --> 00:05:13,540
and I'm telling Docker in this case that when you build the image,

101
00:05:13,540 --> 00:05:17,450
copy that source code into the var/www folder,

102
00:05:17,450 --> 00:05:20,240
which is just one I of course made up.

103
00:05:20,240 --> 00:05:25,110
What that will do now is this layered file system will have a layer

104
00:05:25,110 --> 00:05:27,520
in it that's going to be just for our source code,

105
00:05:27,520 --> 00:05:31,040
and that will be the copy command or instruction.

106
00:05:31,040 --> 00:05:37,810
We can then set the var/www as our work directory because we might want to run

107
00:05:37,810 --> 00:05:41,740
some different commands like npm install if it was Node,

108
00:05:41,740 --> 00:05:44,120
we can define the port we'd like to expose that the

109
00:05:44,120 --> 00:05:48,470
container actually runs with, and we can also define an entry point.

110
00:05:48,470 --> 00:05:51,370
In this case I'm saying that the node command and

111
00:05:51,370 --> 00:05:54,160
server.js is my initial entry point into this,

112
00:05:54,160 --> 00:05:59,040
but of course that could be whatever you want for your chosen technology.

113
00:05:59,040 --> 00:06:01,850
So that's a quick look at some of the different instructions,

114
00:06:01,850 --> 00:06:02,580
and as mentioned,

115
00:06:02,580 --> 00:06:05,400
there are more, but we're focusing on the ones that you really need

116
00:06:05,400 --> 00:06:09,520
to know to get started with as a developer. But what we're going to

117
00:06:09,520 --> 00:06:17,000
do now is take a look at building custom Dockerfiles from scratch with some different technologies.

