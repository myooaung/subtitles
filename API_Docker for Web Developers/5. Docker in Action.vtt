WEBVTT
1
00:00:02.640 --> 00:00:04.300
Now that you've seen what Docker is,

2
00:00:04.300 --> 00:00:07.420
some of the benefits it can offer us as web developers,

3
00:00:07.420 --> 00:00:09.960
and a few of the Docker tools that are going to be involved throughout

4
00:00:09.960 --> 00:00:14.140
this course, let's take a quick look at Docker in Action.

5
00:00:14.140 --> 00:00:17.580
So the demonstration I'm going to show you actually uses six containers.

6
00:00:17.580 --> 00:00:19.160
We have Nginx.

7
00:00:19.160 --> 00:00:20.670
This is a reverse proxy.

8
00:00:20.670 --> 00:00:23.180
We have three Node.js instances.

9
00:00:23.180 --> 00:00:25.200
MongoDB is the database,

10
00:00:25.200 --> 00:00:28.830
and Redis as a caching server, and I'll be able to get this up

11
00:00:28.830 --> 00:00:30.850
and running quite quickly on my machine.

12
00:00:30.850 --> 00:00:34.040
So let's jump in and I'll show you how this works.

13
00:00:34.040 --> 00:00:35.750
Let's assume I've been tasked with getting my

14
00:00:35.750 --> 00:00:38.110
development environment up and running,

15
00:00:38.110 --> 00:00:40.690
and I needed to look not only like the other team members,

16
00:00:40.690 --> 00:00:43.820
but also, like our staging and production environments.

17
00:00:43.820 --> 00:00:44.950
Now, if you've done this very much,

18
00:00:44.950 --> 00:00:46.460
you'll know that that can actually be a little bit

19
00:00:46.460 --> 00:00:49.500
tricky, but with Docker it's very, very simple.

20
00:00:49.500 --> 00:00:51.870
So I've already configured some Docker images we're going to

21
00:00:51.870 --> 00:00:53.740
be talking about throughout the course,

22
00:00:53.740 --> 00:00:56.440
and I already have some containers ready to go.

23
00:00:56.440 --> 00:00:59.280
So I'm just going to run a simple command, that we'll learn about later, called

24
00:00:59.280 --> 00:01:03.980
dockerâ€‘compose up, and this is a way that I can basically start up six

25
00:01:03.980 --> 00:01:08.340
containers that I need to run this particular application. So we'll go ahead and

26
00:01:08.340 --> 00:01:12.390
let this run and it'll take just a moment to fire up, here, as the web servers

27
00:01:12.390 --> 00:01:14.740
connect to the database and things.

28
00:01:14.740 --> 00:01:17.900
And right now I have an IP address that I already know Docker is

29
00:01:17.900 --> 00:01:22.200
going to give me, and I'm going to hit refresh, and you'll see

30
00:01:22.200 --> 00:01:25.770
right now it's not quite ready, so let's go on back, and we

31
00:01:25.770 --> 00:01:27.940
should be really close here now.

32
00:01:27.940 --> 00:01:29.830
All right, looks like we should be good to go now,

33
00:01:29.830 --> 00:01:32.440
so let's hit it now and there we go.

34
00:01:32.440 --> 00:01:36.500
So this just hit a website that's using, again, Mongo, Redis, Node,

35
00:01:36.500 --> 00:01:39.830
Nginx, some other features behind the scenes,

36
00:01:39.830 --> 00:01:41.440
and this is actually a company site.

37
00:01:41.440 --> 00:01:45.400
You're going to get to work with a subset of this site, so you can have a more

38
00:01:45.400 --> 00:01:48.220
realistic demonstration to work with throughout the course.

39
00:01:48.220 --> 00:01:50.250
But it's a pretty standard application.

40
00:01:50.250 --> 00:01:53.840
I can go in and get information about different things,

41
00:01:53.840 --> 00:01:56.540
go back to the home page, pretty standard stuff,

42
00:01:56.540 --> 00:02:00.240
and Docker made this really, really easy to work with.

43
00:02:00.240 --> 00:02:04.900
Now I can do a Ctrl+C here, and now this is going to stop all the

44
00:02:04.900 --> 00:02:09.340
containers, and from there, we'll be kind of done and ready to go.

45
00:02:09.340 --> 00:02:11.340
Every now and then we'll throw an abort message.

46
00:02:11.340 --> 00:02:14.690
You kind of just ignore that because we can just start it back up.

47
00:02:14.690 --> 00:02:18.660
It looks like we're good. And I can just wipe that out,

48
00:02:18.660 --> 00:02:20.190
and if I want to start it back up,

49
00:02:20.190 --> 00:02:24.010
we're ready to go there and we'd be up and running.

50
00:02:24.010 --> 00:02:30.000
So that's an example of Docker in Action on a Mac. We can get the exact

51
00:02:30.000 --> 00:02:32.540
same environment going on the Windows side as well,

52
00:02:32.540 --> 00:02:35.520
so I'll go ahead and run a command. We'll start everything up.

53
00:02:35.520 --> 00:02:40.300
This will start up in genetics and some web servers and database and more.

54
00:02:40.300 --> 00:02:44.450
And once this is all done, because we have the exact same environment

55
00:02:44.450 --> 00:02:48.240
that I showed on the Mac side, we'll of course get the exact same

56
00:02:48.240 --> 00:02:50.210
output in the same website running here.

57
00:02:50.210 --> 00:02:53.480
So there's not going to be any variability between the two

58
00:02:53.480 --> 00:02:56.710
sides of the house, and the same goes as we move things

59
00:02:56.710 --> 00:02:58.800
between environments such as development,

60
00:02:58.800 --> 00:03:00.940
staging, and production.

61
00:03:00.940 --> 00:03:04.950
So this is almost done firing up for the first time, and we'll go

62
00:03:04.950 --> 00:03:10.330
ahead and try to load this at this point. You can see we can get

63
00:03:10.330 --> 00:03:12.840
the exact same website loaded up,

64
00:03:12.840 --> 00:03:22.000
and that allows us to very consistently run our code in different environments. So that's an example of running Docker on the Windows side.

