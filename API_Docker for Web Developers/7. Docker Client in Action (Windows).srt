1
00:00:00,940 --> 00:00:05,590
So, the first thing I'm going to do is I'm going to run off to hub.docker.com,

2
00:00:05,590 --> 00:00:09,510
and I've already typed in this hello‑world image that I'd like to

3
00:00:09,510 --> 00:00:13,140
find that's up there up in the cloud on Docker Hub.

4
00:00:13,140 --> 00:00:14,960
And so let's go ahead and find this, and you'll see

5
00:00:14,960 --> 00:00:16,570
the official hello‑world image,

6
00:00:16,570 --> 00:00:21,040
and this is a very basic image you can use to get started.

7
00:00:21,040 --> 00:00:23,180
So if we scroll on down, you'll see a description,

8
00:00:23,180 --> 00:00:24,510
some information about it,

9
00:00:24,510 --> 00:00:26,790
you'll see some example output of what we would

10
00:00:26,790 --> 00:00:29,440
expect if we run it as a container,

11
00:00:29,440 --> 00:00:32,600
and then over here to the right you'll notice that I can run this

12
00:00:32,600 --> 00:00:36,310
command that's a docker client command called pull.

13
00:00:36,310 --> 00:00:40,080
Really simple to run, you simply say docker pull, and the name of the image.

14
00:00:40,080 --> 00:00:43,460
So I'm going to copy that, run on back here,

15
00:00:43,460 --> 00:00:46,720
and let's paste that into our terminal window.

16
00:00:46,720 --> 00:00:51,370
Hit Return or Enter, and this is going to pull down a layered file system.

17
00:00:51,370 --> 00:00:53,570
And you'll see the pull is now complete,

18
00:00:53,570 --> 00:00:56,780
very fast because it's a very small image,

19
00:00:56,780 --> 00:00:58,860
and now we're kind of ready to go.

20
00:00:58,860 --> 00:01:01,490
So it pulled that image down to our local machine.

21
00:01:01,490 --> 00:01:04,440
Now how do I know that it actually worked?

22
00:01:04,440 --> 00:01:08,340
Well, we can come in and say docker images,

23
00:01:08,340 --> 00:01:11,520
and this will list all the images that we have on the machine.

24
00:01:11,520 --> 00:01:15,790
And it looks right now that I have this hello‑world,

25
00:01:15,790 --> 00:01:20,670
it's the latest, here's a unique IMAGE ID it assigns per image,

26
00:01:20,670 --> 00:01:23,700
it was created about 12 weeks ago, and it's really small,

27
00:01:23,700 --> 00:01:26,010
960 bytes it looks like.

28
00:01:26,010 --> 00:01:28,120
Now from here we have an image,

29
00:01:28,120 --> 00:01:30,860
but images on their own aren't really that useful.

30
00:01:30,860 --> 00:01:34,540
They're like having a blueprint, but never creating a building.

31
00:01:34,540 --> 00:01:35,640
We want to create the building.

32
00:01:35,640 --> 00:01:38,640
We want to create the container that can do something.

33
00:01:38,640 --> 00:01:41,520
So now I can use the docker client command called run,

34
00:01:41,520 --> 00:01:47,430
and I can say docker run, the name of the image that you'll see here,

35
00:01:47,430 --> 00:01:52,000
hello‑world, hit Enter there, and there we go,

36
00:01:52,000 --> 00:01:54,690
this is the actual container running.

37
00:01:54,690 --> 00:01:57,730
And so you can see Hello from Docker, this message

38
00:01:57,730 --> 00:01:59,480
shows that apparently we're working,

39
00:01:59,480 --> 00:02:02,060
so we've done pretty good so far, we have a really,

40
00:02:02,060 --> 00:02:03,940
really simple image running,

41
00:02:03,940 --> 00:02:07,340
and they have some other info you can check out there if you'd like.

42
00:02:07,340 --> 00:02:11,600
That's not super impressive, obviously, but we do have a container.

43
00:02:11,600 --> 00:02:15,340
Now is that container still running, or what happened there?

44
00:02:15,340 --> 00:02:21,040
So we can actually see all the running containers by doing docker ps.

45
00:02:21,040 --> 00:02:23,510
And so I'm going to hit Enter there, and you'll notice it's empty,

46
00:02:23,510 --> 00:02:26,130
which is a little bit weird, because, you know,

47
00:02:26,130 --> 00:02:28,290
I do have a container, obviously it ran,

48
00:02:28,290 --> 00:02:30,640
but it must not be running.

49
00:02:30,640 --> 00:02:33,560
So if we want to list all the containers on the system,

50
00:02:33,560 --> 00:02:38,240
we can say docker ps ‑a, and that'll show all of them.

51
00:02:38,240 --> 00:02:40,590
So we'll hit Return there, and there we go.

52
00:02:40,590 --> 00:02:44,160
So this is wrapping a little bit, so I'll make it a tad bit bigger.

53
00:02:44,160 --> 00:02:47,980
But you'll notice that we have a CONTAINER ID,

54
00:02:47,980 --> 00:02:50,140
and that's assigned per container.

55
00:02:50,140 --> 00:02:52,740
It's based on the hello‑world image.

56
00:02:52,740 --> 00:02:55,940
There's a command it runs internally, just hello.

57
00:02:55,940 --> 00:03:00,230
We created it about a minute ago, and it exited about 55 seconds ago.

58
00:03:00,230 --> 00:03:05,440
Now it also gives it a little more friendly alias, if you will.

59
00:03:05,440 --> 00:03:08,160
And this particular alias is kind of something you can

60
00:03:08,160 --> 00:03:11,320
use instead of the alphanumeric characters you can see

61
00:03:11,320 --> 00:03:13,740
over here for the CONTAINER ID.

62
00:03:13,740 --> 00:03:15,640
Alright, so we've now run the container,

63
00:03:15,640 --> 00:03:18,830
we can see the container, but it exited.

64
00:03:18,830 --> 00:03:20,660
So this is a different container,

65
00:03:20,660 --> 00:03:23,100
this isn't one that you run the container and it

66
00:03:23,100 --> 00:03:25,250
stays up and running like a server.

67
00:03:25,250 --> 00:03:27,920
It just runs and then it just shuts down, so it's a very

68
00:03:27,920 --> 00:03:30,840
simple hello world type of example.

69
00:03:30,840 --> 00:03:33,360
Alright, so let's get rid of this container then.

70
00:03:33,360 --> 00:03:36,330
We know it works, but we really don't need it anymore,

71
00:03:36,330 --> 00:03:38,260
and you'll probably never, ever use it again.

72
00:03:38,260 --> 00:03:42,460
So we're going to do another docker client command called remove,

73
00:03:42,460 --> 00:03:44,440
and this removes containers.

74
00:03:44,440 --> 00:03:46,650
Now, I'm going to go ahead and use the CONTAINER ID,

75
00:03:46,650 --> 00:03:49,390
but I really don't want to type all this.

76
00:03:49,390 --> 00:03:52,040
I know when I first started using Docker,

77
00:03:52,040 --> 00:03:56,540
I didn't realize that you don't have to type the entire CONTAINER ID,

78
00:03:56,540 --> 00:03:58,990
so I went in type the whole thing, though,

79
00:03:58,990 --> 00:03:59,970
but you don't need to.

80
00:03:59,970 --> 00:04:04,130
We can actually, in this case we only have one, so I could get away with 24,

81
00:04:04,130 --> 00:04:07,690
I can get away with 2 if I wanted, but let's go ahead and do that.

82
00:04:07,690 --> 00:04:10,950
And you'll see it echoed back out the container it removed.

83
00:04:10,950 --> 00:04:12,140
Now let's make sure it worked.

84
00:04:12,140 --> 00:04:16,460
We'll do docker ps ‑a again, and everything's gone you'll notice.

85
00:04:16,460 --> 00:04:18,840
Okay, so the container is gone now.

86
00:04:18,840 --> 00:04:21,440
Now what about the image?

87
00:04:21,440 --> 00:04:24,650
Well, the image is still there, and I probably don't need that on my system,

88
00:04:24,650 --> 00:04:26,630
so let's clean that off.

89
00:04:26,630 --> 00:04:32,970
And we can do that, and remove it by doing docker rmi, remove image.

90
00:04:32,970 --> 00:04:37,740
And then just like we did with the CONTAINER ID, there's an IMAGE ID here.

91
00:04:37,740 --> 00:04:43,240
So we only have one, so it's pretty simple, I'll just do like 0a,

92
00:04:43,240 --> 00:04:47,040
and now it just deleted that layered file system.

93
00:04:47,040 --> 00:04:50,100
Now, if we go back and do docker images,

94
00:04:50,100 --> 00:04:51,940
you should see that it's completely gone.

95
00:04:51,940 --> 00:04:55,450
So now we've downloaded the image, or pulled the image,

96
00:04:55,450 --> 00:04:58,720
we've run it, the container immediately stopped.

97
00:04:58,720 --> 00:05:01,210
We removed the container with the rm command,

98
00:05:01,210 --> 00:05:02,530
and now we just removed the image,

99
00:05:02,530 --> 00:05:05,360
so now there's really no trace of this on our system,

100
00:05:05,360 --> 00:05:08,430
and that's a great feature that we're going to talk more about in a

101
00:05:08,430 --> 00:05:12,740
moment with Docker in the development environment.

102
00:05:12,740 --> 00:05:16,540
So that's an example of how to get started with those commands.

103
00:05:16,540 --> 00:05:19,310
Now let's take a look at how we can pull a more robust image from

104
00:05:19,310 --> 00:05:23,100
Docker Hub and get that up and running on our machine.

105
00:05:23,100 --> 00:05:27,240
So if we go back over to the Docker Hub site,

106
00:05:27,240 --> 00:05:29,540
I can come in and search for a hello‑world,

107
00:05:29,540 --> 00:05:31,320
but for the nginx.

108
00:05:31,320 --> 00:05:33,880
And if you saw the Kitematic demo earlier in the course,

109
00:05:33,880 --> 00:05:35,390
I'm going to do the same thing,

110
00:05:35,390 --> 00:05:39,440
but we're actually going to do it using the docker client tool.

111
00:05:39,440 --> 00:05:42,270
So I'm going to come in and we'll just search for kitematic,

112
00:05:42,270 --> 00:05:44,640
and we can just do hello‑world here.

113
00:05:44,640 --> 00:05:47,740
It should pull it up, and there it is.

114
00:05:47,740 --> 00:05:50,050
So we can view some information about it.

115
00:05:50,050 --> 00:05:51,590
There's not a whole lot on this one,

116
00:05:51,590 --> 00:05:55,520
but it's a simple nginx reverse proxy container.

117
00:05:55,520 --> 00:05:57,470
And you'll notice over here, again,

118
00:05:57,470 --> 00:06:00,550
just like with the hello‑world image, I can also pull

119
00:06:00,550 --> 00:06:03,290
the kitematic/hello‑world‑nginx image.

120
00:06:03,290 --> 00:06:06,240
So let me make sure I grab that whole command,

121
00:06:06,240 --> 00:06:09,000
and I'm just going to come on back and paste this in.

122
00:06:09,000 --> 00:06:12,640
So we'll paste in the docker pull command, and this

123
00:06:12,640 --> 00:06:15,270
one will have a little bit more, so this is going to pull down,

124
00:06:15,270 --> 00:06:17,020
again, the layered file system.

125
00:06:17,020 --> 00:06:18,890
You'll see this'll start to fill in.

126
00:06:18,890 --> 00:06:20,270
It's still pretty fast.

127
00:06:20,270 --> 00:06:21,610
Alright, so we're ready to go.

128
00:06:21,610 --> 00:06:26,850
So I'm going to do docker images, and there we go.

129
00:06:26,850 --> 00:06:28,630
We have the kitematic/hello‑world‑nginx,

130
00:06:28,630 --> 00:06:33,860
latest, there's the IMAGE ID again, and we can see the age and how big it is.

131
00:06:33,860 --> 00:06:37,740
So this one's a little bit bigger, looks like about 8 MG or so.

132
00:06:37,740 --> 00:06:40,850
So the next thing I'm going to do is we have the image,

133
00:06:40,850 --> 00:06:43,020
and just like with the hello‑world image,

134
00:06:43,020 --> 00:06:46,780
I want to go ahead and run this. So we would do the same thing.

135
00:06:46,780 --> 00:06:50,720
We would say docker run, and then we would put the image name.

136
00:06:50,720 --> 00:06:55,660
Now, because this is an actual server, it doesn't just write simple log output,

137
00:06:55,660 --> 00:06:59,440
there's a little bit more that we need to supply here.

138
00:06:59,440 --> 00:07:01,690
Now, we have a Docker machine, in fact,

139
00:07:01,690 --> 00:07:03,890
that machine IP is shown right up here because I'm

140
00:07:03,890 --> 00:07:05,430
going to use it in just a moment.

141
00:07:05,430 --> 00:07:08,140
We saw that when I started the Quickstart terminal.

142
00:07:08,140 --> 00:07:12,950
And that machine needs to be told what port do you want

143
00:07:12,950 --> 00:07:17,160
to call to come into on the machine, and then we have to tell the machine,

144
00:07:17,160 --> 00:07:21,120
okay, well, once you get on that port, we're going to do port 80,

145
00:07:21,120 --> 00:07:23,320
how does it call into the container,

146
00:07:23,320 --> 00:07:26,510
and what port does the container actually have?

147
00:07:26,510 --> 00:07:29,630
And I like to think of it as a bubble around the container,

148
00:07:29,630 --> 00:07:32,660
and on the outside of the bubble is the machine port,

149
00:07:32,660 --> 00:07:36,580
and then it's going to call a port that's the actual nginx port

150
00:07:36,580 --> 00:07:38,540
that's in the bubble or in the container,

151
00:07:38,540 --> 00:07:39,560
in other words.

152
00:07:39,560 --> 00:07:42,170
So let me show you how this works so it'll make a little more sense.

153
00:07:42,170 --> 00:07:46,290
So I'm going to say ‑p, and then we're going to do 80,

154
00:07:46,290 --> 00:07:48,940
and that's going to be the port for the machine,

155
00:07:48,940 --> 00:07:49,650
colon,

156
00:07:49,650 --> 00:07:52,830
and then that's going to say I want to forward from port 80 on

157
00:07:52,830 --> 00:07:57,190
the machine to port 80 in the container itself.

158
00:07:57,190 --> 00:08:01,920
Now, if we wanted to do maybe 5000 on the actual machine,

159
00:08:01,920 --> 00:08:04,790
but 80 on nginx we could do that,

160
00:08:04,790 --> 00:08:09,590
but nginx is typically used as a frontend type of reverse proxy server,

161
00:08:09,590 --> 00:08:13,780
it can serve up static files and then forward requests to

162
00:08:13,780 --> 00:08:16,710
more complex backend servers like ASP.NET,

163
00:08:16,710 --> 00:08:18,050
and Node.js, and PHP,

164
00:08:18,050 --> 00:08:22,890
and things like that, so we're going to do 80:80 and this will forward it.

165
00:08:22,890 --> 00:08:24,260
And we're going to say docker run,

166
00:08:24,260 --> 00:08:26,960
on this port on the machine and on the container,

167
00:08:26,960 --> 00:08:28,520
and then we have to put the name,

168
00:08:28,520 --> 00:08:34,340
so it's going to be kitematic/hello‑world‑nginx.

169
00:08:34,340 --> 00:08:36,380
Alright, so now that we have that in place,

170
00:08:36,380 --> 00:08:39,420
we can go ahead and start up this nginx server.

171
00:08:39,420 --> 00:08:41,270
So we'll go ahead and run that, and there we go,

172
00:08:41,270 --> 00:08:44,540
it looks like that container is now up and running.

173
00:08:44,540 --> 00:08:46,420
So what I'm going to do is leave that up,

174
00:08:46,420 --> 00:08:49,470
and I'm going to right‑click here on our Quickstart terminal,

175
00:08:49,470 --> 00:08:51,090
and I'm going to start a new terminal.

176
00:08:51,090 --> 00:08:56,540
And that'll link us up to the default machine again, and there's the IP address.

177
00:08:56,540 --> 00:08:59,840
And now let's see, what do we have as far as containers.

178
00:08:59,840 --> 00:09:04,240
So we're going to come in and we're going to run the docker ps command,

179
00:09:04,240 --> 00:09:07,840
and it looks like we do indeed have a container,

180
00:09:07,840 --> 00:09:13,290
and you can see that it is up for about 23 seconds, up and running.

181
00:09:13,290 --> 00:09:16,950
There's the IMAGE it's based on, there's the CONTAINER ID,

182
00:09:16,950 --> 00:09:19,940
and then here's the port forwarding I was talking about.

183
00:09:19,940 --> 00:09:23,720
So the IP here just is kind of generic, but this will be the machine IP,

184
00:09:23,720 --> 00:09:31,340
:80, that forwards to port 80 in the actual container itself.

185
00:09:31,340 --> 00:09:34,660
Now that container is up and running, as you can see here.

186
00:09:34,660 --> 00:09:37,440
And it looks like when we started it up,

187
00:09:37,440 --> 00:09:42,040
we have this start.sh that the nginx image actually had in it,

188
00:09:42,040 --> 00:09:45,440
and that actually started up the nginx server.

189
00:09:45,440 --> 00:09:47,580
So I'm going to run over to this tab now,

190
00:09:47,580 --> 00:09:49,630
and we're going to try to refresh here.

191
00:09:49,630 --> 00:09:53,690
We're on port 80, so obviously I don't have to put, you know, :80.

192
00:09:53,690 --> 00:09:57,040
We could, but I'm just going to hit Enter, and there we go.

193
00:09:57,040 --> 00:10:03,540
So we now have on our development machine an nginx container up and running.

194
00:10:03,540 --> 00:10:08,160
Very cool, because I didn't officially install anything from the nginx site,

195
00:10:08,160 --> 00:10:11,810
we're just using, obviously, Docker images and containers here.

196
00:10:11,810 --> 00:10:13,580
So I'm going to run on back.

197
00:10:13,580 --> 00:10:14,990
Let's bring both of these back up.

198
00:10:14,990 --> 00:10:17,290
You'll notice that a request was made here.

199
00:10:17,290 --> 00:10:21,210
It shows the GET request was made, it was a successful 200,

200
00:10:21,210 --> 00:10:24,240
and some other information about the browser.

201
00:10:24,240 --> 00:10:28,460
And then if we come on back here, you can see that we're back where we were,

202
00:10:28,460 --> 00:10:30,120
and we can see that it's up, and all that.

203
00:10:30,120 --> 00:10:35,140
So, now what I'm going to do is let's go ahead and try to stop the container.

204
00:10:35,140 --> 00:10:38,740
So we'll go ahead, and not to confuse terminals here,

205
00:10:38,740 --> 00:10:40,380
let's go ahead and leave this one up.

206
00:10:40,380 --> 00:10:42,740
And I'm going to type docker stop,

207
00:10:42,740 --> 00:10:45,740
and then I'm going to take the CONTAINER ID over here.

208
00:10:45,740 --> 00:10:47,860
Now, again, we don't have to type the whole thing.

209
00:10:47,860 --> 00:10:49,760
In this case, I could say, for instance,

210
00:10:49,760 --> 00:10:55,140
d7, and that's going to stop, using the docker client tool,

211
00:10:55,140 --> 00:10:57,200
that particular running container.

212
00:10:57,200 --> 00:11:00,320
And this will take just a moment for it to stop.

213
00:11:00,320 --> 00:11:03,160
Alright, so once it echoes back out the ID you typed,

214
00:11:03,160 --> 00:11:04,610
that pretty much means it stopped.

215
00:11:04,610 --> 00:11:08,040
So if we type docker ps, we shouldn't see it,

216
00:11:08,040 --> 00:11:12,730
and we don't, but if I do docker ps ‑a, for all,

217
00:11:12,730 --> 00:11:13,830
we should see it.

218
00:11:13,830 --> 00:11:19,340
But you'll notice that now it says it's Exited, about 14 seconds ago.

219
00:11:19,340 --> 00:11:24,440
Alright, great, so we now have a running container that we stopped.

220
00:11:24,440 --> 00:11:27,400
Now we've seen that because it stopped we have to do

221
00:11:27,400 --> 00:11:30,040
the ‑a switch again to see it.

222
00:11:30,040 --> 00:11:31,590
And now let's go ahead and clean it up.

223
00:11:31,590 --> 00:11:33,600
Now, this is one of the more exciting features,

224
00:11:33,600 --> 00:11:36,340
I think, from a development standpoint.

225
00:11:36,340 --> 00:11:39,680
Instead of installing a server on your physical machine,

226
00:11:39,680 --> 00:11:42,320
whatever it is, database server, web server,

227
00:11:42,320 --> 00:11:44,750
normally when you uninstall it, you know,

228
00:11:44,750 --> 00:11:48,340
it seems like there's always a few files left over.

229
00:11:48,340 --> 00:11:51,210
But in this case, because we're using images and containers,

230
00:11:51,210 --> 00:11:53,580
we can use our normal docker client commands,

231
00:11:53,580 --> 00:11:58,330
and I can say remove, give it that d7 container,

232
00:11:58,330 --> 00:12:01,660
and now if we do docker ps ‑a,

233
00:12:01,660 --> 00:12:03,710
you'll notice everything is gone from the container.

234
00:12:03,710 --> 00:12:07,060
So, alright, that's great, but what about the image?

235
00:12:07,060 --> 00:12:08,460
Let's do docker images.

236
00:12:08,460 --> 00:12:10,430
We still have the image.

237
00:12:10,430 --> 00:12:14,380
Now, normally, if you're going to be reusing this image to make other containers,

238
00:12:14,380 --> 00:12:17,050
you'd probably just leave it if we do it a lot,

239
00:12:17,050 --> 00:12:19,750
but in this case, let's just say, hey, I'm done with it.

240
00:12:19,750 --> 00:12:22,170
I really don't want it on my machine anymore.

241
00:12:22,170 --> 00:12:26,040
I've maybe tested something, and everything is working great.

242
00:12:26,040 --> 00:12:29,110
Well, just like we did earlier, we can do remove image,

243
00:12:29,110 --> 00:12:34,040
and in this case the IMAGE ID has this 385.

244
00:12:34,040 --> 00:12:35,310
So we'll go ahead and do that.

245
00:12:35,310 --> 00:12:39,840
That completely deletes that image, and now if we do docker images,

246
00:12:39,840 --> 00:12:42,500
you can see we're clear, and docker ps ‑a,

247
00:12:42,500 --> 00:12:44,300
of course, we're clear on containers.

248
00:12:44,300 --> 00:12:46,500
And this is pretty cool I think.

249
00:12:46,500 --> 00:12:50,160
I'm a little bit picky on my development machines,

250
00:12:50,160 --> 00:12:52,190
and I like to keep everything really clean,

251
00:12:52,190 --> 00:12:54,380
and so when I'm done with something,

252
00:12:54,380 --> 00:12:57,570
I really would like all traces of it to be removed,

253
00:12:57,570 --> 00:12:59,160
and now it is.

254
00:12:59,160 --> 00:13:00,490
And I think this is a very,

255
00:13:00,490 --> 00:13:04,260
very cool feature for development that I literally can get,

256
00:13:04,260 --> 00:13:05,520
whether it's a database server,

257
00:13:05,520 --> 00:13:10,360
a server that's a reverse proxy like nginx or others, up and running

258
00:13:10,360 --> 00:13:12,550
quickly on my machine without a lot of effort,

259
00:13:12,550 --> 00:13:14,040
just a few commands,

260
00:13:14,040 --> 00:13:17,120
and then I can completely remove all traces of it

261
00:13:17,120 --> 00:13:19,540
using these docker client commands.

262
00:13:19,540 --> 00:13:26,000
So that's an example of some of the different docker client commands that you can run on your Windows machine.

