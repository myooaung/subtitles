WEBVTT
1
00:00:01.140 --> 00:00:05.040
Now that we have our Kubernetes deployment and service files available,

2
00:00:05.040 --> 00:00:08.280
it's time to actually run our containers in Kubernetes.

3
00:00:08.280 --> 00:00:09.350
And I'm going to show you the process,

4
00:00:09.350 --> 00:00:14.440
as well as a few key commands to make that happen.

5
00:00:14.440 --> 00:00:16.850
So before jumping back to the command line,

6
00:00:16.850 --> 00:00:19.280
let's talk about a few key commands that you're going to want to

7
00:00:19.280 --> 00:00:22.540
know if you start working with Kubernetes.

8
00:00:22.540 --> 00:00:26.420
Now as with Docker, there are a lot of commands you use every day,

9
00:00:26.420 --> 00:00:28.500
and there are some you just don't use that often.

10
00:00:28.500 --> 00:00:31.880
So these are some of the commands that are very frequent,

11
00:00:31.880 --> 00:00:35.740
and there are certainly a lot of other commands you could use as well.

12
00:00:35.740 --> 00:00:39.300
So first off, if you just want to get the version that you're running,

13
00:00:39.300 --> 00:00:44.460
you can run kubectl, or kubectl, however you like to say it,

14
00:00:44.460 --> 00:00:45.740
version.

15
00:00:45.740 --> 00:00:50.940
If you want to get information about deployments or services or Pods or nodes,

16
00:00:50.940 --> 00:00:53.940
then you could do the get command.

17
00:00:53.940 --> 00:00:59.440
We can also get one container up and running very quickly with a run command,

18
00:00:59.440 --> 00:01:04.940
and this allows us to name what it is we're going to do and then pick the image.

19
00:01:04.940 --> 00:01:07.130
If we have our deployment files and services,

20
00:01:07.130 --> 00:01:12.410
which we have, then a very easy way to get all those going is to do an apply.

21
00:01:12.410 --> 00:01:17.400
Now with apply, you could say ‑f and either give it a file name of,

22
00:01:17.400 --> 00:01:21.900
for instance, a deployment, or you could just give it a folder name,

23
00:01:21.900 --> 00:01:25.840
and all the different Kubernetes files in there would be applied.

24
00:01:25.840 --> 00:01:30.140
I'm actually going to be using the folder name trick here in just a moment.

25
00:01:30.140 --> 00:01:34.120
And then, finally, as you're working on your local machine,

26
00:01:34.120 --> 00:01:36.490
you'll probably want to expose one of the Pods so

27
00:01:36.490 --> 00:01:38.340
that we can actually get to it.

28
00:01:38.340 --> 00:01:41.270
So we can do that through a port‑forward command,

29
00:01:41.270 --> 00:01:44.840
and I'm going to show that as well.

30
00:01:44.840 --> 00:01:47.090
So now that we've seen some of the basic commands,

31
00:01:47.090 --> 00:01:51.030
let's see how we can use a few of these to actually get some information

32
00:01:51.030 --> 00:01:56.740
about Kubernetes and then also go in and run our containers.

33
00:01:56.740 --> 00:02:00.440
So coming back over to the CODEWITHDANDOCKERSERVICES project,

34
00:02:00.440 --> 00:02:01.460
I've opened that up,

35
00:02:01.460 --> 00:02:06.440
and I have the Kubernetes files I mentioned earlier available here.

36
00:02:06.440 --> 00:02:07.740
So we have, again, our deployments.

37
00:02:07.740 --> 00:02:11.560
That gets us to the desired state we want to get to for Mongo,

38
00:02:11.560 --> 00:02:13.960
NGINX, Node, and Redis.

39
00:02:13.960 --> 00:02:16.910
And then we have the services, which, again,

40
00:02:16.910 --> 00:02:19.580
acts as kind of an abstraction layer for IP

41
00:02:19.580 --> 00:02:23.340
addresses so we can talk to those Pods.

42
00:02:23.340 --> 00:02:26.180
All of those do much more than just that.

43
00:02:26.180 --> 00:02:29.230
But I want to emphasize that because there's quite a bit to it,

44
00:02:29.230 --> 00:02:32.040
but this will be enough to get us going.

45
00:02:32.040 --> 00:02:35.010
So the first thing I'm going to do is we could come on in and

46
00:02:35.010 --> 00:02:38.840
just run the kubectl command for the version.

47
00:02:38.840 --> 00:02:42.340
And this will give us some information, probably more than you want.

48
00:02:42.340 --> 00:02:45.340
But a nice reason for running this is it lets us know that,

49
00:02:45.340 --> 00:02:46.870
yeah, things are working correctly,

50
00:02:46.870 --> 00:02:51.640
and the kubectl command is actually giving me back some info.

51
00:02:51.640 --> 00:02:56.140
Now we could also come in and say, Hey, Kubernetes,

52
00:02:56.140 --> 00:02:57.750
what deployments do you have?

53
00:02:57.750 --> 00:03:02.560
So we can get deployments, and right now there are none.

54
00:03:02.560 --> 00:03:05.810
We could also run this and say, What Pods do we have?

55
00:03:05.810 --> 00:03:07.740
Well, likely, if we don't have any deployments,

56
00:03:07.740 --> 00:03:10.940
we may not have any Pods, although it depends.

57
00:03:10.940 --> 00:03:12.120
No Pods found.

58
00:03:12.120 --> 00:03:15.970
We could even come in and say, What services do you have?

59
00:03:15.970 --> 00:03:17.950
Now we do have one here you'll notice.

60
00:03:17.950 --> 00:03:21.840
This is the cluster IP address for the overall

61
00:03:21.840 --> 00:03:24.840
Kubernetes cluster on my local machine.

62
00:03:24.840 --> 00:03:28.040
Now as a heads‑up when it comes to the cluster,

63
00:03:28.040 --> 00:03:31.310
when you're working with Docker Desktop on Windows or Mac,

64
00:03:31.310 --> 00:03:34.620
you're going to get one node in your cluster that you can use.

65
00:03:34.620 --> 00:03:38.390
So you're not going to able to scale out the actual nodes in this environment.

66
00:03:38.390 --> 00:03:41.930
But it's just enough that we'll be able to play with

67
00:03:41.930 --> 00:03:45.360
different flavors of containers, get them orchestrated,

68
00:03:45.360 --> 00:03:46.680
and test everything out.

69
00:03:46.680 --> 00:03:52.540
So it's very good for testing purposes to try out your app in Kubernetes.

70
00:03:52.540 --> 00:03:55.910
Now if we wanted to just get a single container such

71
00:03:55.910 --> 00:03:57.880
as the NGINX Alpine up and running,

72
00:03:57.880 --> 00:04:01.550
then we could say I'd like to run, I'm going to call it

73
00:04:01.550 --> 00:04:05.140
nginx‑server, and then give it the image.

74
00:04:05.140 --> 00:04:05.760
Now, in this case,

75
00:04:05.760 --> 00:04:08.190
I'm going to pick nginx:alpine mainly because it's

76
00:04:08.190 --> 00:04:10.440
pretty small and quick and easy.

77
00:04:10.440 --> 00:04:13.880
And then when we run this, if I hit Enter right now,

78
00:04:13.880 --> 00:04:16.400
we're probably going to get a message saying that a

79
00:04:16.400 --> 00:04:19.450
particular generator template is deprecated.

80
00:04:19.450 --> 00:04:22.740
It'll tell us another command we could run.

81
00:04:22.740 --> 00:04:26.420
Now I fully expect into the future that will probably change,

82
00:04:26.420 --> 00:04:28.390
but as of today, that's what I've been getting.

83
00:04:28.390 --> 00:04:29.670
So let me go ahead and run it.

84
00:04:29.670 --> 00:04:31.440
Okay, and there's the message.

85
00:04:31.440 --> 00:04:35.630
So right now it's using this apps.v1 generator template,

86
00:04:35.630 --> 00:04:42.040
saying it's deprecated, and that we should instead use ‑‑generator=run‑pod/v1.

87
00:04:42.040 --> 00:04:45.540
Now, in this case, this is good enough for our demo though.

88
00:04:45.540 --> 00:04:49.140
If we go in and say, Let's get the deployments.

89
00:04:49.140 --> 00:04:50.640
And as a quick little tip here,

90
00:04:50.640 --> 00:04:52.650
you don't actually have to type it all the way out.

91
00:04:52.650 --> 00:04:55.240
You could just say deploy for example.

92
00:04:55.240 --> 00:04:55.780
There we go.

93
00:04:55.780 --> 00:04:57.920
There's our NGINX server.

94
00:04:57.920 --> 00:05:01.940
Let's clear that and let's get any Pods.

95
00:05:01.940 --> 00:05:04.010
All right, and there is the name of our Pod.

96
00:05:04.010 --> 00:05:08.490
Now, currently, the container inside of this Pod is running on port 80.

97
00:05:08.490 --> 00:05:12.250
But if I run off to the browser, and let's refresh here,

98
00:05:12.250 --> 00:05:14.540
you'll notice I can't hit anything.

99
00:05:14.540 --> 00:05:18.180
Well, that's because it's not exposed outside of the cluster,

100
00:05:18.180 --> 00:05:21.940
so you can think of it, it's internal to the cluster currently.

101
00:05:21.940 --> 00:05:24.620
Well, this is where the port forwarding is useful,

102
00:05:24.620 --> 00:05:27.840
especially for just running things locally.

103
00:05:27.840 --> 00:05:34.160
So one more time if we run kubectl get pods, this name right here is important.

104
00:05:34.160 --> 00:05:35.940
So I'm going to copy that.

105
00:05:35.940 --> 00:05:38.440
And now I'm going to do the kubectl.

106
00:05:38.440 --> 00:05:42.830
We're going to run port‑forward, give it the name of the Pod.

107
00:05:42.830 --> 00:05:44.870
So I'm going to paste in what I just copied.

108
00:05:44.870 --> 00:05:47.550
And then, externally, just so I can show you it's working,

109
00:05:47.550 --> 00:05:50.080
we're going to say, externally, use 8080,

110
00:05:50.080 --> 00:05:54.820
and forward that to 80 on this Pod because that's what NGINX is running.

111
00:05:54.820 --> 00:05:58.170
Now this is going to lock up the console the way I've done it.

112
00:05:58.170 --> 00:05:59.010
But that's okay.

113
00:05:59.010 --> 00:06:02.040
You'll notice a forwarding message comes up.

114
00:06:02.040 --> 00:06:05.570
And if we refresh this, obviously this isn't what we want.

115
00:06:05.570 --> 00:06:10.140
We're not on 8080, but let's try out 8080.

116
00:06:10.140 --> 00:06:10.870
And there we go.

117
00:06:10.870 --> 00:06:14.870
Now we're able to hit our first Pod with a container inside of it,

118
00:06:14.870 --> 00:06:17.340
which is NGINX Alpine.

119
00:06:17.340 --> 00:06:22.240
Now I'd like to delete that, so I'm going to say kubectl delete,

120
00:06:22.240 --> 00:06:23.630
and we have a deployment here,

121
00:06:23.630 --> 00:06:26.850
so I'm going to say deploy or deployment if you want,

122
00:06:26.850 --> 00:06:29.740
and then nginx‑server.

123
00:06:29.740 --> 00:06:32.470
Now that's going to go ahead and delete that deployment.

124
00:06:32.470 --> 00:06:37.780
So now if we say get deploy, you'll notice no resources found.

125
00:06:37.780 --> 00:06:40.490
Now sometimes it takes a little bit of time for the Pods though.

126
00:06:40.490 --> 00:06:42.740
So let's take a look.

127
00:06:42.740 --> 00:06:44.170
Okay, now, that's already cleared out.

128
00:06:44.170 --> 00:06:46.330
On occasion, you might still see the Pods,

129
00:06:46.330 --> 00:06:49.380
but the status will be that, hey,

130
00:06:49.380 --> 00:06:53.140
we're trying to take this down and delete it, destroy it right now.

131
00:06:53.140 --> 00:06:56.440
Likewise, let's go back to the services,

132
00:06:56.440 --> 00:07:00.040
and you can see we're back to just our cluster IP here.

133
00:07:00.040 --> 00:07:01.820
Okay, so we're making some progress.

134
00:07:01.820 --> 00:07:08.540
Now the last thing I want to show is how do we go in and apply all these files?

135
00:07:08.540 --> 00:07:11.440
Because I actually want to get the real thing going here.

136
00:07:11.440 --> 00:07:14.550
Well, we can do a very similar process to what you saw already,

137
00:07:14.550 --> 00:07:19.340
but now we're going to use a new kubectl command called apply.

138
00:07:19.340 --> 00:07:21.630
And then I'm going to say that the file or,

139
00:07:21.630 --> 00:07:27.640
in this case, folder I want to get to is the .k8s that I have.

140
00:07:27.640 --> 00:07:30.970
Now what that will do is iterate through these files

141
00:07:30.970 --> 00:07:33.790
and apply each of the deployments, the services,

142
00:07:33.790 --> 00:07:36.910
and I even have some environment variables here,

143
00:07:36.910 --> 00:07:38.840
into Kubernetes.

144
00:07:38.840 --> 00:07:42.440
Now let's go ahead and try this.

145
00:07:42.440 --> 00:07:43.120
And there we go.

146
00:07:43.120 --> 00:07:45.740
You can see it ran through all of those.

147
00:07:45.740 --> 00:07:46.930
We'll give it a sec here.

148
00:07:46.930 --> 00:07:50.340
But if I clear it and go back to kubectl get,

149
00:07:50.340 --> 00:07:53.160
for instance, services, there we go.

150
00:07:53.160 --> 00:07:54.240
We have quite a few now.

151
00:07:54.240 --> 00:07:57.490
We have the Kubernetes cluster IP, but we also have Mongo,

152
00:07:57.490 --> 00:07:59.130
NGINX, Node, and Redis.

153
00:07:59.130 --> 00:08:00.730
So that's a good start.

154
00:08:00.730 --> 00:08:04.440
Let's go to kubectl get pods.

155
00:08:04.440 --> 00:08:07.240
All right, and there are our different Pods.

156
00:08:07.240 --> 00:08:09.610
And let's do kubectl get nodes.

157
00:08:09.610 --> 00:08:12.440
Now I mentioned you can only have one node, but I'll show it here.

158
00:08:12.440 --> 00:08:14.840
There you go, docker‑desktop.

159
00:08:14.840 --> 00:08:18.000
Okay, now, if I go back to the browser,

160
00:08:18.000 --> 00:08:21.980
and we have NGINX on port 80 in this case,

161
00:08:21.980 --> 00:08:24.940
but you'll notice again nothing.

162
00:08:24.940 --> 00:08:29.580
Well, the reason for that is we, of course, don't have that port exposed.

163
00:08:29.580 --> 00:08:37.340
So let's go back to our Pods, and let's grab our NGINX Pod name here,

164
00:08:37.340 --> 00:08:40.190
and then we're going to do the port‑forward one more time. And now I'm

165
00:08:40.190 --> 00:08:43.640
going to do 8080 to 80, although I could do 80 as well.

166
00:08:43.640 --> 00:08:45.940
Now, sometimes if you do 80, by the way,

167
00:08:45.940 --> 00:08:49.670
you might have to run that with elevated privileges, just as a heads‑up,

168
00:08:49.670 --> 00:08:53.140
or maybe even just doing a normal port‑forward like this,

169
00:08:53.140 --> 00:08:56.840
you might occasionally have to run as sudo on Mac.

170
00:08:56.840 --> 00:08:57.750
Or, if you're on Windows,

171
00:08:57.750 --> 00:09:00.620
you might have to run in the command prompt as an elevated

172
00:09:00.620 --> 00:09:04.080
administrator type of command. Let's go ahead and try it.

173
00:09:04.080 --> 00:09:05.830
All right, that looks pretty good.

174
00:09:05.830 --> 00:09:09.740
And now let's go to 8080.

175
00:09:09.740 --> 00:09:11.350
Let's refresh because that's cached.

176
00:09:11.350 --> 00:09:12.370
Alright, and there we go.

177
00:09:12.370 --> 00:09:17.140
Now the database doesn't have anything in it, so nothing is loading here.

178
00:09:17.140 --> 00:09:18.500
But it is working.

179
00:09:18.500 --> 00:09:21.780
We can see it forwarded to our node. The node called the database.

180
00:09:21.780 --> 00:09:25.330
There was nothing. But if we wanted to see that or

181
00:09:25.330 --> 00:09:27.440
just hook into that database now,

182
00:09:27.440 --> 00:09:30.340
we can even do a port‑forward on that if we'd like.

183
00:09:30.340 --> 00:09:33.640
Then we could pull up a tool to update Mongo.

184
00:09:33.640 --> 00:09:39.780
So that's an example of applying multiple deployment and service files, as

185
00:09:39.780 --> 00:09:43.440
well as using some of these other Kubernetes commands.

186
00:09:43.440 --> 00:09:45.360
And this is something that, quite honestly,

187
00:09:45.360 --> 00:09:47.290
you just need to practice a little bit.

188
00:09:47.290 --> 00:09:50.850
None of it's really super hard as far as the commands. I think

189
00:09:50.850 --> 00:10:01.000
the most challenging part is getting the YAML files correct and configured. But, as we've seen, Compose and other tools can help with that.

