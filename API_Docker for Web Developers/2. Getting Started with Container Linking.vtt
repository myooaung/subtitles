WEBVTT
1
00:00:02.840 --> 00:00:05.970
As you use more and more Docker images and containers,

2
00:00:05.970 --> 00:00:08.770
you will certainly run into the need to link them up.

3
00:00:08.770 --> 00:00:10.930
We need a web server, for instance,

4
00:00:10.930 --> 00:00:14.840
to communicate with the database server or something like that.

5
00:00:14.840 --> 00:00:15.780
So, for example,

6
00:00:15.780 --> 00:00:18.640
we might have a web server that not only hits a database

7
00:00:18.640 --> 00:00:21.640
server but also needs to hit a caching server and maybe

8
00:00:21.640 --> 00:00:23.000
even some others potentially.

9
00:00:23.000 --> 00:00:28.850
Well, normally, each container will hold its own individual functionality.

10
00:00:28.850 --> 00:00:31.270
In other words, you can have a web server container,

11
00:00:31.270 --> 00:00:34.890
a database container, a caching type of server container,

12
00:00:34.890 --> 00:00:37.440
and maybe others as well.

13
00:00:37.440 --> 00:00:41.200
So we need a way for containers to talk to each other because,

14
00:00:41.200 --> 00:00:44.480
up to this point, we've only worked with single containers,

15
00:00:44.480 --> 00:00:49.440
not with multiple containers kind of orchestrating things together.

16
00:00:49.440 --> 00:00:54.040
Now Docker provides two different linking technologies that can be used.

17
00:00:54.040 --> 00:00:57.260
The first is now referred to as legacy linking,

18
00:00:57.260 --> 00:01:00.500
and you're going to see that this is just done using container names.

19
00:01:00.500 --> 00:01:03.920
Under the covers, it creates what's called a bridge network,

20
00:01:03.920 --> 00:01:05.050
and within that network,

21
00:01:05.050 --> 00:01:08.250
you can communicate between the containers based on

22
00:01:08.250 --> 00:01:11.910
the name of each of the containers, and I'll show you how all this works.

23
00:01:11.910 --> 00:01:15.530
Now this particular option is still very useful.

24
00:01:15.530 --> 00:01:18.180
It's still very easy, actually, to do you'll see.

25
00:01:18.180 --> 00:01:23.140
And in a development environment, it's especially easy to set up.

26
00:01:23.140 --> 00:01:24.660
But there is another option,

27
00:01:24.660 --> 00:01:29.870
especially as you move multiple containers into staging and production areas,

28
00:01:29.870 --> 00:01:31.490
and this provides even more power.

29
00:01:31.490 --> 00:01:38.620
This second option involves adding containers into a custom bridge network.

30
00:01:38.620 --> 00:01:43.040
Now this is a newer option compared to the legacy one anyway.

31
00:01:43.040 --> 00:01:47.740
And what this entails is creating a custom bridge network,

32
00:01:47.740 --> 00:01:50.140
and this is a type of isolated network,

33
00:01:50.140 --> 00:01:54.540
and only containers in that network can communicate with each other.

34
00:01:54.540 --> 00:01:58.470
Now this is nice because now you would have a way to create one

35
00:01:58.470 --> 00:02:01.500
network for a certain set of containers to communicate,

36
00:02:01.500 --> 00:02:05.190
another network for some other containers that they need to communicate,

37
00:02:05.190 --> 00:02:09.680
and this allows you to divide things up a little more elegantly than

38
00:02:09.680 --> 00:02:12.730
what you can do with the older legacy linking.

39
00:02:12.730 --> 00:02:14.720
So throughout this module,

40
00:02:14.720 --> 00:02:18.830
I'm going to walk you through, first, the legacy linking and how that works.

41
00:02:18.830 --> 00:02:22.940
I'll show you some examples of getting some actual containers communicating.

42
00:02:22.940 --> 00:02:26.740
Then we'll move on to using those same exact containers, but we're

43
00:02:26.740 --> 00:02:30.150
going to move on to the bridge networking. And I'll show you how you

44
00:02:30.150 --> 00:02:32.280
can create a custom bridge network very,

45
00:02:32.280 --> 00:02:36.390
very simple, it sounds a lot harder than it really is, and how we can then

46
00:02:36.390 --> 00:02:40.140
communicate amongst containers in that bridge network.

47
00:02:40.140 --> 00:02:42.940
So let's go ahead and jump right in and talk, first, about

48
00:02:42.940 --> 00:02:49.000
legacy linking and how we can name containers so that they can communicate with each other.

