WEBVTT
1
00:00:01.940 --> 00:00:03.310
In some of the earlier demos,

2
00:00:03.310 --> 00:00:07.200
I showed how you can clean up volumes as you delete your containers.

3
00:00:07.200 --> 00:00:10.900
So I want to reiterate and go through some examples of when you need to

4
00:00:10.900 --> 00:00:14.840
do that and when you really don't need to do that.

5
00:00:14.840 --> 00:00:16.920
So if you run a container,

6
00:00:16.920 --> 00:00:20.260
and as you do that you actually add a volume to that container,

7
00:00:20.260 --> 00:00:24.360
like we saw earlier, and you only specify one part to the volume,

8
00:00:24.360 --> 00:00:29.570
as you see here, I just have /var/www, then in this case,

9
00:00:29.570 --> 00:00:31.930
Docker is actually going to manage the volume

10
00:00:31.930 --> 00:00:34.190
location where it reads and writes.

11
00:00:34.190 --> 00:00:37.870
And so we're not specifying where our source code is or where to

12
00:00:37.870 --> 00:00:40.020
write. We're going to let Docker figure that out.

13
00:00:40.020 --> 00:00:45.230
All we're doing is saying that the container has a volume of var/www,

14
00:00:45.230 --> 00:00:49.090
and then Docker is going to do the magic that actually creates

15
00:00:49.090 --> 00:00:52.640
that folder and mounts it on the host machine.

16
00:00:52.640 --> 00:00:54.320
Now, in those cases,

17
00:00:54.320 --> 00:00:58.800
which definitely will be reality in some production or staging scenarios

18
00:00:58.800 --> 00:01:01.950
where maybe you write log files or things like that,

19
00:01:01.950 --> 00:01:05.970
then when that container goes away, if this Node container,

20
00:01:05.970 --> 00:01:08.170
for instance, needs to stop and then be deleted,

21
00:01:08.170 --> 00:01:10.740
we'll probably want to clean up that volume,

22
00:01:10.740 --> 00:01:13.290
because otherwise, you kind of have some dangling files,

23
00:01:13.290 --> 00:01:14.910
and it eats up some hard drive space.

24
00:01:14.910 --> 00:01:19.540
And I mentioned this in some of the earlier demos, but just want to reiterate.

25
00:01:19.540 --> 00:01:22.570
So, if you run docker inspect on your container,

26
00:01:22.570 --> 00:01:26.980
I showed earlier that you can actually see the mounting location, and

27
00:01:26.980 --> 00:01:30.030
you'll see the Source property in the Mounts property.

28
00:01:30.030 --> 00:01:34.440
So you'll notice a nested object with Source and Destination.

29
00:01:34.440 --> 00:01:38.620
Now, if you see that it's mounting it and that Docker is taking care of it,

30
00:01:38.620 --> 00:01:42.170
and that means again you did ‑v with just one piece,

31
00:01:42.170 --> 00:01:45.060
not two pieces, as you define the volume,

32
00:01:45.060 --> 00:01:47.710
then when you're down to your last container,

33
00:01:47.710 --> 00:01:52.140
you're going to want to remove this so you don't waste any hard drive space.

34
00:01:52.140 --> 00:01:54.770
So, as I showed earlier in some of the demonstrations,

35
00:01:54.770 --> 00:01:59.520
you can just simply say docker rm ‑v, and that will say,

36
00:01:59.520 --> 00:02:03.540
in addition to removing the container using the volume,

37
00:02:03.540 --> 00:02:07.540
let's also remove the Docker managed volume.

38
00:02:07.540 --> 00:02:10.040
Now, as I showed in one of the demos,

39
00:02:10.040 --> 00:02:12.510
if you do this and your volume has two parts,

40
00:02:12.510 --> 00:02:14.380
you have the container volume name,

41
00:02:14.380 --> 00:02:17.170
but it actually points to a folder you specify,

42
00:02:17.170 --> 00:02:19.040
like your source code,

43
00:02:19.040 --> 00:02:21.930
doing ‑ v is not going to delete like your source code.

44
00:02:21.930 --> 00:02:24.040
It's going to leave it all there.

45
00:02:24.040 --> 00:02:27.750
So this is really only needed when you specify a volume

46
00:02:27.750 --> 00:02:31.100
and you let Docker manage the location on the host machine

47
00:02:31.100 --> 00:02:33.440
of where that volume lives.

48
00:02:33.440 --> 00:02:35.930
Now, if any other containers are using the volume,

49
00:02:35.930 --> 00:02:40.240
you'd only want to run this when you're down to your last container using it.

50
00:02:40.240 --> 00:02:42.480
And then it would go ahead and clean that up because

51
00:02:42.480 --> 00:02:44.560
obviously some other containers, if they need it,

52
00:02:44.560 --> 00:02:46.940
you don't want to get rid of it.

53
00:02:46.940 --> 00:02:50.900
So that's a quick review on volumes and the need to clean those up in

54
00:02:50.900 --> 00:03:00.000
cases where you delete a container and where you defined a volume that Docker actually manages on the host machine.

