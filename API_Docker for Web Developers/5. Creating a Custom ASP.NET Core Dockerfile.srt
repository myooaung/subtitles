1
00:00:01,240 --> 00:00:04,970
Let's take a look at how we can create a custom ASP.NET Core Dockerfile,

2
00:00:04,970 --> 00:00:08,430
some of the different options for doing that and some of the different

3
00:00:08,430 --> 00:00:12,380
images that are available that we're going to use as the base of that

4
00:00:12,380 --> 00:00:15,240
cake that we kind of build on top of.

5
00:00:15,240 --> 00:00:18,140
So the first thing I'm going to do is run off to hub.docker.com,

6
00:00:18,140 --> 00:00:22,440
and I've already searched for Microsoft .NET Core,

7
00:00:22,440 --> 00:00:26,240
and if I scroll down just a little bit, you'll see .NET Core shows up.

8
00:00:26,240 --> 00:00:29,310
Now there's a few options here, but we're going to click on this first one,

9
00:00:29,310 --> 00:00:34,690
.NET Core, and you'll notice these are the official images for .NET core 2.1,

10
00:00:34,690 --> 00:00:39,000
3.1, and of course this will just increase over time to different versions,

11
00:00:39,000 --> 00:00:42,940
so make sure you always check for the latest version as you do this.

12
00:00:42,940 --> 00:00:44,740
Scrolling on down though,

13
00:00:44,740 --> 00:00:48,540
you'll notice there's some different featured .NET Core images.

14
00:00:48,540 --> 00:00:51,740
We have .NET Core SDK; .NET Core ASP.NET,

15
00:00:51,740 --> 00:00:56,270
notice that's for production runtime; and then we have some other ones as

16
00:00:56,270 --> 00:00:59,960
well that you could use if you're not doing like ASP.NET,

17
00:00:59,960 --> 00:01:01,240
for example.

18
00:01:01,240 --> 00:01:03,940
They even have some .NET 5.0 images.

19
00:01:03,940 --> 00:01:06,990
So, if we move on down, they'll give you some info about this.

20
00:01:06,990 --> 00:01:08,610
They'll talk about how to build,

21
00:01:08,610 --> 00:01:11,600
and they'll even have a little example of how to run it,

22
00:01:11,600 --> 00:01:12,280
but,

23
00:01:12,280 --> 00:01:15,720
what we're going to do is use the SDK image first and

24
00:01:15,720 --> 00:01:17,740
I'll show you the basics of that.

25
00:01:17,740 --> 00:01:21,530
Then we're going to go ahead and look at the runtime image,

26
00:01:21,530 --> 00:01:23,270
and I'll show you the basics of that as well.

27
00:01:23,270 --> 00:01:26,140
So let's jump into VS Code here.

28
00:01:26,140 --> 00:01:31,390
The project that I have loaded is just a standard ASP.NET Core MVC type project.

29
00:01:31,390 --> 00:01:33,490
You'll see a Controllers folder, and Models,

30
00:01:33,490 --> 00:01:37,400
and Views; and inside of it I already have two Docker

31
00:01:37,400 --> 00:01:39,530
files that we're going to look at, but,

32
00:01:39,530 --> 00:01:41,270
I'm going to show you how we can actually generate

33
00:01:41,270 --> 00:01:45,140
one of these kind of automagically, if you will.

34
00:01:45,140 --> 00:01:48,440
Now let's go to our dev.dockerfile here,

35
00:01:48,440 --> 00:01:50,500
and this will look pretty familiar based on what

36
00:01:50,500 --> 00:01:51,870
we've covered earlier in the course.

37
00:01:51,870 --> 00:01:55,000
We have our from, there's our base image,

38
00:01:55,000 --> 00:01:58,060
so, mcr.microsoft.com would be the registry,

39
00:01:58,060 --> 00:02:02,440
and then we have the .NET Core SDK,

40
00:02:02,440 --> 00:02:04,880
and that's the one we want in this case because you'll see we're

41
00:02:04,880 --> 00:02:07,920
going to do a dotnet restore and a dotnet watch run,

42
00:02:07,920 --> 00:02:10,240
but notice there's no code in this one.

43
00:02:10,240 --> 00:02:13,120
So we'd have to set up a volume and you can see an

44
00:02:13,120 --> 00:02:15,310
example of that down here in the comments,

45
00:02:15,310 --> 00:02:17,390
and we've already looked at that.

46
00:02:17,390 --> 00:02:19,900
But walking through it, we have the base,

47
00:02:19,900 --> 00:02:24,360
which is our from; we have our label; three environment variables here,

48
00:02:24,360 --> 00:02:28,030
notice that we're going to target Port 5000 on this one; our

49
00:02:28,030 --> 00:02:31,880
working directory is going to be /app, that again can be whatever you'd like,

50
00:02:31,880 --> 00:02:36,570
and then we're going to do a bash command that would run the dotnet restore,

51
00:02:36,570 --> 00:02:39,140
followed by the dotnet watch run.

52
00:02:39,140 --> 00:02:41,420
Now a little trick I'm going to show you though is we could come

53
00:02:41,420 --> 00:02:44,340
down and build the image like we've already seen,

54
00:02:44,340 --> 00:02:48,960
but we could also use a VS Code plugin. So you'll notice on the left here, I

55
00:02:48,960 --> 00:02:53,460
have a little whale icon for Docker, and you can notice that I have my

56
00:02:53,460 --> 00:02:56,830
images, any running containers would be listed here.

57
00:02:56,830 --> 00:03:00,420
I can connect to registries, so if I had a personal registry or a

58
00:03:00,420 --> 00:03:05,000
company registry, and then networks, volumes, and you'll notice all

59
00:03:05,000 --> 00:03:08,240
this kind of really cool information down here.

60
00:03:08,240 --> 00:03:10,940
Now I have quite a few images you'll notice,

61
00:03:10,940 --> 00:03:12,410
and if we move on down,

62
00:03:12,410 --> 00:03:17,140
here's an mcr.microsoft.com one, there's the SDK one actually.

63
00:03:17,140 --> 00:03:22,200
So how do you get this? Well in VS Code, if you go down to the extensions,

64
00:03:22,200 --> 00:03:27,240
which is this icon here, you could just type docker,

65
00:03:27,240 --> 00:03:30,930
and then you can install the Docker extension from Microsoft.

66
00:03:30,930 --> 00:03:32,770
It's a really, really nice extension,

67
00:03:32,770 --> 00:03:35,690
totally worth installing, I use it for a fair amount of

68
00:03:35,690 --> 00:03:39,240
things. And so once you have it installed,

69
00:03:39,240 --> 00:03:42,460
you now will have this little whale icon on the left

70
00:03:42,460 --> 00:03:44,510
that would get to your local images,

71
00:03:44,510 --> 00:03:48,340
local containers, and then I could even connect to a registry here,

72
00:03:48,340 --> 00:03:52,790
such as ACR, Azure Container Registry; Docker Hub; some

73
00:03:52,790 --> 00:03:56,030
other one that's maybe local that stores these; GitLab,

74
00:03:56,030 --> 00:03:58,540
and you'll notice a few options.

75
00:03:58,540 --> 00:03:58,820
Alright,

76
00:03:58,820 --> 00:04:01,020
so that's a really nice plugin and I'm going to show you how

77
00:04:01,020 --> 00:04:03,840
we can use that to do some cool stuff here.

78
00:04:03,840 --> 00:04:07,510
Now, this first image would be more if we're going to do a volume,

79
00:04:07,510 --> 00:04:09,060
but let's say we're not going to do that,

80
00:04:09,060 --> 00:04:13,540
we would actually like to build a production version of our image.

81
00:04:13,540 --> 00:04:14,110
Well,

82
00:04:14,110 --> 00:04:18,840
prod.dockerfile in this case would be for that, and this is

83
00:04:18,840 --> 00:04:21,970
what we call a multistage build Docker file.

84
00:04:21,970 --> 00:04:26,390
This has multiple steps that we can go through to not

85
00:04:26,390 --> 00:04:30,840
only build our code in a container, publish it,

86
00:04:30,840 --> 00:04:35,840
but then copy that published code to the final image that we want to generate.

87
00:04:35,840 --> 00:04:40,260
So literally from starting the build to actually generating

88
00:04:40,260 --> 00:04:42,690
the final image that's going to go up to,

89
00:04:42,690 --> 00:04:47,960
say, Docker Hub or some other registry, we can do all that right here with this.

90
00:04:47,960 --> 00:04:49,740
So let's walk through this.

91
00:04:49,740 --> 00:04:50,670
So in the first part,

92
00:04:50,670 --> 00:04:54,990
we're just going to find a base which is based on the aspnet runtime.

93
00:04:54,990 --> 00:04:59,340
That's a production version and I'm going to alias it as base.

94
00:04:59,340 --> 00:05:03,210
That's something you can do in Docker files just to give an alias.

95
00:05:03,210 --> 00:05:08,760
Now we're going to in stage two, come down and go to the SDK image,

96
00:05:08,760 --> 00:05:10,560
and we're going to alias that as build.

97
00:05:10,560 --> 00:05:15,360
Now all this does is it goes and copies in this local project here,

98
00:05:15,360 --> 00:05:21,040
the csproj, does a dotnet restore, copies in everything else,

99
00:05:21,040 --> 00:05:25,690
sets the working directory, and then does a build. You'll notice we're

100
00:05:25,690 --> 00:05:28,990
going to build a release mode, we're going to output to a folder called

101
00:05:28,990 --> 00:05:33,390
app, in this case. So we're literally building the code using

102
00:05:33,390 --> 00:05:36,140
containers, ultimately, behind the scenes.

103
00:05:36,140 --> 00:05:37,560
Now from there,

104
00:05:37,560 --> 00:05:42,810
we're then going to create this from build as publish, okay, and remember,

105
00:05:42,810 --> 00:05:46,440
build is our alias up here that's going to have our build code.

106
00:05:46,440 --> 00:05:49,190
Now we're going to run the dotnet publish command, and we're

107
00:05:49,190 --> 00:05:52,540
going to output that to the app folder.

108
00:05:52,540 --> 00:05:56,040
So, what'll end up happening is ultimately the app folder will get our

109
00:05:56,040 --> 00:06:00,840
distribution code that we'd want, our DLLs and things like that.

110
00:06:00,840 --> 00:06:05,730
Now the final stage of this is we're going to create this from base.

111
00:06:05,730 --> 00:06:11,340
Now remember, base is ASP.NET, that's our runtime production image.

112
00:06:11,340 --> 00:06:13,760
We're going to generate that, and we're going to put the

113
00:06:13,760 --> 00:06:16,160
environment variable for the port we want to listen on,

114
00:06:16,160 --> 00:06:17,560
you'll probably be changing that,

115
00:06:17,560 --> 00:06:22,180
but that's what I have, and then notice that we have our expose, our

116
00:06:22,180 --> 00:06:25,540
working directory, and then here is the magic right here.

117
00:06:25,540 --> 00:06:28,860
Notice this from=publish, now remember,

118
00:06:28,860 --> 00:06:33,230
publish was the one up here that was based on build, and that actually ran the

119
00:06:33,230 --> 00:06:36,740
dotnet publish command and updated the app folder with it.

120
00:06:36,740 --> 00:06:40,090
From that publish image, we actually want to copy from

121
00:06:40,090 --> 00:06:43,120
the app folder to the local folder.

122
00:06:43,120 --> 00:06:45,040
Well what's the local folder?

123
00:06:45,040 --> 00:06:46,430
It's the working directory.

124
00:06:46,430 --> 00:06:47,690
It's also named /app.

125
00:06:47,690 --> 00:06:47,930
Now,

126
00:06:47,930 --> 00:06:50,430
I could've come in and done this, it would have been the same

127
00:06:50,430 --> 00:06:53,390
thing, but since we set the working directory,

128
00:06:53,390 --> 00:06:57,690
that would just be duplication, we don't really need that. Now from here,

129
00:06:57,690 --> 00:07:01,600
we take the name of the DLL that would be generated, and that

130
00:07:01,600 --> 00:07:04,740
is what will actually be run in this case.

131
00:07:04,740 --> 00:07:06,580
Now, if you're looking at that going, gosh,

132
00:07:06,580 --> 00:07:09,470
there's no way I could memorize that and do all that by hand.

133
00:07:09,470 --> 00:07:10,760
Well, I don't really either,

134
00:07:10,760 --> 00:07:13,840
to be honest, and I'm going to show you a really cool trick here.

135
00:07:13,840 --> 00:07:16,700
So remember I installed the Docker extension that I talked

136
00:07:16,700 --> 00:07:18,420
about that gets me to all these things.

137
00:07:18,420 --> 00:07:20,640
Well, it can do more than that.

138
00:07:20,640 --> 00:07:26,070
If you hit Shift+Command+P or Shift+Ctrl+P ‑ Shift+Command would be on Mac,

139
00:07:26,070 --> 00:07:31,530
Shift+Ctrl would be on Windows ‑ and type docker, you're going to notice

140
00:07:31,530 --> 00:07:38,410
all kinds of stuff that shows up. Now, the one I want is docker add, and

141
00:07:38,410 --> 00:07:41,540
notice this Docker Files to Workspace.

142
00:07:41,540 --> 00:07:44,200
What this will do is actually generate Docker files

143
00:07:44,200 --> 00:07:46,300
based on your target framework.

144
00:07:46,300 --> 00:07:48,980
So I'm going to click on that, now it's going to say okay,

145
00:07:48,980 --> 00:07:50,640
well, what are you targeting?

146
00:07:50,640 --> 00:07:55,380
Well, I'm going to say ASP.NET Core, and now notice I get an error down here.

147
00:07:55,380 --> 00:08:00,640
Now, if we expand this error, it says please generate a build task.

148
00:08:00,640 --> 00:08:01,950
So we need to do the same thing.

149
00:08:01,950 --> 00:08:06,290
We need to get back to the command palette and type this .NET Generate.

150
00:08:06,290 --> 00:08:07,640
So let's do that.

151
00:08:07,640 --> 00:08:09,740
I'll go back to the command palette,

152
00:08:09,740 --> 00:08:15,940
.NET Generate Assets for Build, I'm going to click on that, and there we go.

153
00:08:15,940 --> 00:08:22,040
Now what that just did is updated a launch and a task JSON file,

154
00:08:22,040 --> 00:08:25,540
which basically can handle the build tasks.

155
00:08:25,540 --> 00:08:28,930
So now that's there, let's go back to the command pallet, we'll type docker

156
00:08:28,930 --> 00:08:33,140
again, and I'm going to do this Add Docker Files to Workspace.

157
00:08:33,140 --> 00:08:38,510
We'll pick ASP.NET Core, and now from here, we can pick either Linux or Windows.

158
00:08:38,510 --> 00:08:40,740
Now I'm going to pick Linux.

159
00:08:40,740 --> 00:08:42,460
Do you want to include a Docker Compose?

160
00:08:42,460 --> 00:08:43,800
I'm going to say no in this case,

161
00:08:43,800 --> 00:08:47,690
we'll talk about Docker Compose later, and then what are your ports?

162
00:08:47,690 --> 00:08:53,740
Well, for us it's 5000, and then we hit Enter.

163
00:08:53,740 --> 00:08:56,540
Now what this just did is generated something very,

164
00:08:56,540 --> 00:09:00,740
very similar to what you saw earlier in kind of my custom one.

165
00:09:00,740 --> 00:09:05,270
This is a multistage build where we have a base; we have our build image,

166
00:09:05,270 --> 00:09:08,410
which does our build; we have our publish and then we have our final

167
00:09:08,410 --> 00:09:12,390
down here, and then base this name based on what's in my csproj,

168
00:09:12,390 --> 00:09:15,740
you'll see that name matches up right there.

169
00:09:15,740 --> 00:09:20,240
Now, what's really cool about this is number one, I didn't have to write it.

170
00:09:20,240 --> 00:09:22,330
This is only for production though,

171
00:09:22,330 --> 00:09:25,350
so it's important to note that any time you see ASP.NET,

172
00:09:25,350 --> 00:09:27,040
that's going to be for production.

173
00:09:27,040 --> 00:09:30,540
Now we have pulled in the latest version of the image at this time.

174
00:09:30,540 --> 00:09:33,240
That will obviously change over time,

175
00:09:33,240 --> 00:09:36,270
but that gives you a nice starting point, again depending on what

176
00:09:36,270 --> 00:09:39,040
version you're working with. Now it's pretty much identical to what

177
00:09:39,040 --> 00:09:41,440
you're going to see here, it's really close,

178
00:09:41,440 --> 00:09:44,840
and then I even have some steps on how you can build this, but with the

179
00:09:44,840 --> 00:09:50,420
extension, we could actually come on in like this, and you'll notice right

180
00:09:50,420 --> 00:09:55,740
here at the bottom, Build Image, and if I click that,

181
00:09:55,740 --> 00:10:01,100
it'll actually try to build that image right now on my machine and I don't even

182
00:10:01,100 --> 00:10:04,270
have to really know what I'm doing. Now, it's pulling down some layers that

183
00:10:04,270 --> 00:10:06,880
were missing, it's now doing the multistage build,

184
00:10:06,880 --> 00:10:09,640
the publish, all that fun stuff.

185
00:10:09,640 --> 00:10:13,740
We're going to look at this a little bit more manually in the next section,

186
00:10:13,740 --> 00:10:17,640
but, that's how easy it would be to get started with this.

187
00:10:17,640 --> 00:10:21,040
Now I'm going to Ctrl+C to stop this, we're not going to really use it

188
00:10:21,040 --> 00:10:26,700
anymore, but that would be an example of generating a Docker file that you

189
00:10:26,700 --> 00:10:29,200
don't even have to write the code, really all I did again is either

190
00:10:29,200 --> 00:10:33,880
Shift+Command+P to get to the command palette or Shift+Ctrl+P, and if the

191
00:10:33,880 --> 00:10:35,110
Docker extension's installed,

192
00:10:35,110 --> 00:10:38,640
just type docker and you'll see there's all kinds of Docker commands.

193
00:10:38,640 --> 00:10:42,640
But, that's an example of a more production Docker file, and then I

194
00:10:42,640 --> 00:10:45,810
showed you a more development Docker file, where you might want to

195
00:10:45,810 --> 00:10:48,030
create a volume to link back to your code.

196
00:10:48,030 --> 00:10:50,640
So now you kind of have both ways of doing it.

197
00:10:50,640 --> 00:10:56,000
So from here, let's see how we can take this and build it, and then we'll start looking at this.

