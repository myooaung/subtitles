WEBVTT
1
00:00:02.740 --> 00:00:05.680
One technique you can use to link up containers to each

2
00:00:05.680 --> 00:00:08.130
other is called legacy linking now.

3
00:00:08.130 --> 00:00:12.210
And this is a very simple technique where you can give a container a name,

4
00:00:12.210 --> 00:00:16.410
and then another container can link to it using that same name.

5
00:00:16.410 --> 00:00:22.140
Let's jump into a step‑by‑step walkthrough of how this works.

6
00:00:22.140 --> 00:00:25.070
So the steps to link containers is really basic actually,

7
00:00:25.070 --> 00:00:28.080
just a few little command‑line switches you'll need to know about,

8
00:00:28.080 --> 00:00:30.540
and we'll go through each of these.

9
00:00:30.540 --> 00:00:31.110
First off,

10
00:00:31.110 --> 00:00:33.630
we're going to need to run a given container that

11
00:00:33.630 --> 00:00:35.770
we want to link to with a name.

12
00:00:35.770 --> 00:00:36.910
I'll show you how to do that,

13
00:00:36.910 --> 00:00:40.640
it's just one little command‑line switch you have to add.

14
00:00:40.640 --> 00:00:40.890
Now,

15
00:00:40.890 --> 00:00:44.890
we can use that name then as we run another container

16
00:00:44.890 --> 00:00:46.540
to link those containers together.

17
00:00:46.540 --> 00:00:49.140
We're going to take a look at that as well.

18
00:00:49.140 --> 00:00:51.280
And then, of course, if you have additional containers,

19
00:00:51.280 --> 00:00:53.520
you just kind of repeat and keep going.

20
00:00:53.520 --> 00:00:56.840
So you'll add a name, and then link it to the next container,

21
00:00:56.840 --> 00:00:59.440
add a name, link it to the next container.

22
00:00:59.440 --> 00:01:02.240
So it's like a step one here.

23
00:01:02.240 --> 00:01:04.840
All right, so when we do docker run,

24
00:01:04.840 --> 00:01:07.870
we've seen that a few times throughout the course, we can do the daemon,

25
00:01:07.870 --> 00:01:12.240
that's the ‑d, that'll make it so it runs in the background,

26
00:01:12.240 --> 00:01:15.740
but we can also do ‑‑name and then give that

27
00:01:15.740 --> 00:01:18.640
particular running container a name.

28
00:01:18.640 --> 00:01:20.050
Now, up to this point in the course,

29
00:01:20.050 --> 00:01:24.430
we've mainly relied on the ID for the container or the alias

30
00:01:24.430 --> 00:01:26.690
that was automatically generated by Docker,

31
00:01:26.690 --> 00:01:31.640
but you can give each of your running containers your own custom name.

32
00:01:31.640 --> 00:01:32.380
So in this case,

33
00:01:32.380 --> 00:01:36.580
we're going to define a name for the container called my‑postgres, and

34
00:01:36.580 --> 00:01:40.040
that would take care of the basics of naming it.

35
00:01:40.040 --> 00:01:43.670
Now, if that's all we did, it's not going to accomplish too much,

36
00:01:43.670 --> 00:01:46.030
it's just going to add a name that we can then use to,

37
00:01:46.030 --> 00:01:48.150
for instance, remove or stop the container,

38
00:01:48.150 --> 00:01:51.480
but now that we've named it, we can go to step two,

39
00:01:51.480 --> 00:01:56.440
and we can link up another container to this database container.

40
00:01:56.440 --> 00:02:01.440
So, for instance, let's say that we would like to run an aspnetcore container,

41
00:02:01.440 --> 00:02:04.150
then we can run it as you see here with the daemon mode,

42
00:02:04.150 --> 00:02:07.140
give it a port, pretty standard stuff that we've seen,

43
00:02:07.140 --> 00:02:10.820
but we can also come in and link to another container.

44
00:02:10.820 --> 00:02:14.940
And we do that with this ‑‑link command‑line switch.

45
00:02:14.940 --> 00:02:17.180
Now, this is the actual name that you saw previously,

46
00:02:17.180 --> 00:02:18.840
my‑postgres,

47
00:02:18.840 --> 00:02:22.720
and then we can even give it an alias that we use internally in the

48
00:02:22.720 --> 00:02:25.550
aspnetcore container that's going to be running.

49
00:02:25.550 --> 00:02:27.750
So, as we connect,

50
00:02:27.750 --> 00:02:31.890
we can use this postgres alias in our database connection string,

51
00:02:31.890 --> 00:02:33.640
for example.

52
00:02:33.640 --> 00:02:36.930
So that's really all you have to do to link a container to

53
00:02:36.930 --> 00:02:40.440
another container that's already running.

54
00:02:40.440 --> 00:02:44.070
Now, step three would be we just keep going if you have more and more containers,

55
00:02:44.070 --> 00:02:47.030
so you'd start another container, give it a name,

56
00:02:47.030 --> 00:02:50.020
link it to the next container, and then repeat.

57
00:02:50.020 --> 00:02:52.580
So normally the containers that you're going to link to,

58
00:02:52.580 --> 00:02:55.930
they'll typically be started up first with the docker run command,

59
00:02:55.930 --> 00:02:57.850
and then once you're done with that,

60
00:02:57.850 --> 00:03:01.890
you can then use the ‑‑link command‑line switch to link any

61
00:03:01.890 --> 00:03:06.040
other containers by name to those containers.

62
00:03:06.040 --> 00:03:08.230
So now that we've seen how we can do this with

63
00:03:08.230 --> 00:03:10.240
Docker client on the command line,

64
00:03:10.240 --> 00:03:18.000
let's go ahead and take a look at linking up different types of containers across different technologies.

