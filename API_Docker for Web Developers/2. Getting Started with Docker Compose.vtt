WEBVTT
1
00:00:02.440 --> 00:00:04.170
From a web development standpoint,

2
00:00:04.170 --> 00:00:08.230
Docker Compose is definitely one of the more exciting pieces of Docker.

3
00:00:08.230 --> 00:00:13.960
It's a great way to automatically manage the lifecycle of your application

4
00:00:13.960 --> 00:00:16.650
in the development environment and get it up and running,

5
00:00:16.650 --> 00:00:18.750
and stop it, and things like that very,

6
00:00:18.750 --> 00:00:22.340
very quickly, and that's what we're going to talk about in this first section.

7
00:00:22.340 --> 00:00:26.030
The logo really kind of gives away a lot about what it does.

8
00:00:26.030 --> 00:00:30.050
It allows you to have multiple images and then convert those

9
00:00:30.050 --> 00:00:33.490
images into containers. Now to do that, though, by hand,

10
00:00:33.490 --> 00:00:37.440
which we've pretty much been doing throughout the course up to this point,

11
00:00:37.440 --> 00:00:41.750
we've been going into the command line and having to do a manual docker run,

12
00:00:41.750 --> 00:00:45.120
and you can see that with a lot of containers that can be a little bit

13
00:00:45.120 --> 00:00:48.640
problematic and definitely not very efficient or productive.

14
00:00:48.640 --> 00:00:53.790
So the image that you see here from their logo reflects exactly what it does.

15
00:00:53.790 --> 00:01:00.640
It allows you to manage multiple containers and the overall lifecycle.

16
00:01:00.640 --> 00:01:02.970
Now, if you go look at the official docs,

17
00:01:02.970 --> 00:01:07.550
they'll highlight four main areas that it works well. And it's

18
00:01:07.550 --> 00:01:10.570
great for the development environment, staging, maybe for

19
00:01:10.570 --> 00:01:13.110
production, Docker has some other options you could use there

20
00:01:13.110 --> 00:01:15.240
for DevOps like Docker Cloud,

21
00:01:15.240 --> 00:01:19.150
but definitely in the development environment it can do these types of things.

22
00:01:19.150 --> 00:01:20.250
So as mentioned,

23
00:01:20.250 --> 00:01:23.200
it manages the entire application lifecycle, and

24
00:01:23.200 --> 00:01:25.820
that includes things like starting, stopping,

25
00:01:25.820 --> 00:01:28.440
rebuilding, what they call services.

26
00:01:28.440 --> 00:01:31.980
And you're going to see that a service really becomes a running container.

27
00:01:31.980 --> 00:01:35.880
So we're still going to be using images behind the scenes that get converted

28
00:01:35.880 --> 00:01:39.970
into running containers, but we're going to call those services in the world of

29
00:01:39.970 --> 00:01:43.540
Docker Compose, as you'll see as we dig in deeper.

30
00:01:43.540 --> 00:01:46.650
It also allows us to view the status of running services,

31
00:01:46.650 --> 00:01:50.840
including the log output of all those running services very easily.

32
00:01:50.840 --> 00:01:53.520
You don't have to do a command per container to get the

33
00:01:53.520 --> 00:01:55.800
logs, you can actually get to all the different container

34
00:01:55.800 --> 00:01:58.940
logs at once if you'd like.

35
00:01:58.940 --> 00:02:03.540
Now, if you do want to get to one container and do a one‑off operation,

36
00:02:03.540 --> 00:02:05.510
you want to maybe view the logs for it,

37
00:02:05.510 --> 00:02:08.810
or just start and stop that one container or even build it

38
00:02:08.810 --> 00:02:11.990
from the image standpoint, then Docker Compose will let you

39
00:02:11.990 --> 00:02:14.520
do that as well, so it's a really,

40
00:02:14.520 --> 00:02:19.440
really nice way to manage different containers in an app

41
00:02:19.440 --> 00:02:21.940
that you're going to be working with.

42
00:02:21.940 --> 00:02:24.400
Now, let's talk about the need for Docker Compose.

43
00:02:24.400 --> 00:02:27.920
This gives you some high‑level kind of 10,000‑foot level stuff,

44
00:02:27.920 --> 00:02:30.840
but let's dive in a little bit more here.

45
00:02:30.840 --> 00:02:35.620
So let's assume that we have a setup in a web app where we have nginx on

46
00:02:35.620 --> 00:02:39.900
the frontend, and that's a reverse proxy, we have Redis for caching on

47
00:02:39.900 --> 00:02:43.020
the backend, and MongoDB as our data storage,

48
00:02:43.020 --> 00:02:47.050
let's assume, and the nginx when a request comes in,

49
00:02:47.050 --> 00:02:51.330
let's assume that it also is going to route that into different Node.js servers.

50
00:02:51.330 --> 00:02:57.090
Now, again, you could substitute your chosen framework, it could be PHP, ASP.NET,

51
00:02:57.090 --> 00:03:00.260
Java, whatever it may be here. Now,

52
00:03:00.260 --> 00:03:04.700
as these servers get called, they'll of course call into the database,

53
00:03:04.700 --> 00:03:08.540
they'll more than likely then cache some of that data in Redis,

54
00:03:08.540 --> 00:03:11.360
and then that's kind of how it proceeds. Now, what's nice,

55
00:03:11.360 --> 00:03:11.820
though,

56
00:03:11.820 --> 00:03:16.300
is Docker Compose can manage all of these. And you'll see that we have

57
00:03:16.300 --> 00:03:18.930
six different containers in this particular case,

58
00:03:18.930 --> 00:03:22.100
and you could certainly have a lot more if you have other application

59
00:03:22.100 --> 00:03:26.090
servers and things going, and managing those by hand,

60
00:03:26.090 --> 00:03:27.220
I don't know that I want to do that.

61
00:03:27.220 --> 00:03:29.010
It's a little bit problematic, like I said,

62
00:03:29.010 --> 00:03:30.810
not very efficient, not very productive.

63
00:03:30.810 --> 00:03:33.750
So Docker Compose has a file that we're going to be talking about

64
00:03:33.750 --> 00:03:37.040
called docker‑compose, and it's a YAML file.

65
00:03:37.040 --> 00:03:40.740
So if you're new to it, don't worry, it's a super, super simple format.

66
00:03:40.740 --> 00:03:42.210
And in this file,

67
00:03:42.210 --> 00:03:45.740
you can define all these services and even the

68
00:03:45.740 --> 00:03:48.110
relationships between the services.

69
00:03:48.110 --> 00:03:51.220
If you remember earlier in the course we talked about linking,

70
00:03:51.220 --> 00:03:55.060
and we also talked about networking or bridge networks, and we're going to talk

71
00:03:55.060 --> 00:03:59.340
about that as well here as we dive into this docker‑compose.

72
00:03:59.340 --> 00:04:01.910
So what we're ultimately going to be after here is we're

73
00:04:01.910 --> 00:04:06.170
going to make a docker‑compose file that can manage the

74
00:04:06.170 --> 00:04:08.040
different application services.

75
00:04:08.040 --> 00:04:08.230
Now,

76
00:04:08.230 --> 00:04:11.560
the services in this case would be the nginx, the Node. the

77
00:04:11.560 --> 00:04:14.620
Redis, the Mongo, really they're just containers,

78
00:04:14.620 --> 00:04:15.050
of course,

79
00:04:15.050 --> 00:04:18.360
at runtime. but in this world of Docker Compose we're going

80
00:04:18.360 --> 00:04:23.540
to call and refer to them as services.

81
00:04:23.540 --> 00:04:27.700
Now the standard workflow, once you have your Docker files set up,

82
00:04:27.700 --> 00:04:32.520
if you have custom Docker files, and your docker‑compose.yml file, is

83
00:04:32.520 --> 00:04:36.790
you're going to use Docker Compose to then build your services. Now

84
00:04:36.790 --> 00:04:39.530
under the covers that's just going to create images like we've been

85
00:04:39.530 --> 00:04:42.640
doing all throughout the class.

86
00:04:42.640 --> 00:04:43.260
From there,

87
00:04:43.260 --> 00:04:45.350
we can then use Docker Compose to start up our

88
00:04:45.350 --> 00:04:47.660
services, and then when we're done,

89
00:04:47.660 --> 00:04:51.770
we can tear down those services, and stop the containers, and even remove

90
00:04:51.770 --> 00:04:55.190
them if you'd like. Throughout the rest of this module,

91
00:04:55.190 --> 00:04:58.160
we're going to be talking about these different aspects of the Docker

92
00:04:58.160 --> 00:05:00.700
Compose workflow, and we're going to start off,

93
00:05:00.700 --> 00:05:01.140
for instance,

94
00:05:01.140 --> 00:05:06.040
by talking about the docker‑compose.yml file and how you can work with that.

95
00:05:06.040 --> 00:05:09.610
Then we'll move into some of the Docker Compose commands that you can run,

96
00:05:09.610 --> 00:05:17.000
and then we'll jump into some actual examples of using it and applying it to a development environment.

