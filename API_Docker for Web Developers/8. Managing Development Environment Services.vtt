WEBVTT
1
00:00:01.840 --> 00:00:03.740
At this point, we're all ready to go.

2
00:00:03.740 --> 00:00:06.920
If we have that YAML file local with our source code,

3
00:00:06.920 --> 00:00:09.480
now we can use the Docker Compose tools,

4
00:00:09.480 --> 00:00:12.080
and that's what I'm going to walk you through here to get this

5
00:00:12.080 --> 00:00:15.650
development environment and all of these services up and

6
00:00:15.650 --> 00:00:17.590
running in just a matter of minutes,

7
00:00:17.590 --> 00:00:21.240
especially if you already have some of the images already cached locally.

8
00:00:21.240 --> 00:00:25.640
So let's jump in and take a look at how we can do that.

9
00:00:25.640 --> 00:00:29.650
So I already have a Docker Console set up here ready to go.

10
00:00:29.650 --> 00:00:35.230
And all we'd have to do as we've seen earlier is run docker‑compose build.

11
00:00:35.230 --> 00:00:38.200
Now I already have some of this cached to kind of speed it up,

12
00:00:38.200 --> 00:00:41.460
but this will go through and build out our different services.

13
00:00:41.460 --> 00:00:46.040
We have six of them again.

14
00:00:46.040 --> 00:00:50.710
And now that these are built, we can do a docker images,

15
00:00:50.710 --> 00:00:56.060
and you can see that, here we go, I have my NGINX node1,

16
00:00:56.060 --> 00:00:59.500
2, 3, and these are some other ones that I had.

17
00:00:59.500 --> 00:01:03.860
But you can see here's the codewithdandockerservices_node1, 2, 3, Redis.

18
00:01:03.860 --> 00:01:06.640
But the reason this built pretty fast is I already

19
00:01:06.640 --> 00:01:08.630
had another version of this going,

20
00:01:08.630 --> 00:01:12.640
and so I was able to leverage some of the layered file system.

21
00:01:12.640 --> 00:01:16.940
All right, now if I run docker ps ‑a,

22
00:01:16.940 --> 00:01:20.910
you can see that I've already tried to run some of these before.

23
00:01:20.910 --> 00:01:26.000
And so a little trick we can do here is we could say docker rm,

24
00:01:26.000 --> 00:01:28.820
and I'd like to go ahead and remove all these.

25
00:01:28.820 --> 00:01:31.940
We're going to start kind of from scratch here.

26
00:01:31.940 --> 00:01:36.140
And when I do a rm, I can do a ‑f to force.

27
00:01:36.140 --> 00:01:40.540
And that way, if anything is kind of locked up at all, we can take care of it.

28
00:01:40.540 --> 00:01:43.080
And now what I'm going to do is say docker,

29
00:01:43.080 --> 00:01:47.660
and we're going to list all the images, ps ‑a and ‑q for quiet,

30
00:01:47.660 --> 00:01:49.840
and this will go through and remove them.

31
00:01:49.840 --> 00:01:54.370
So let's do docker ps ‑a, and let me do that one more time.

32
00:01:54.370 --> 00:01:55.310
There we go.

33
00:01:55.310 --> 00:01:56.790
Nice and clean.

34
00:01:56.790 --> 00:01:57.230
Okay,

35
00:01:57.230 --> 00:02:01.240
so just to kind of show that we're starting from scratch here on our containers.

36
00:02:01.240 --> 00:02:03.240
So now it's pretty easy.

37
00:02:03.240 --> 00:02:04.330
You already know what to do.

38
00:02:04.330 --> 00:02:05.440
In fact, we've done this.

39
00:02:05.440 --> 00:02:10.780
We can do docker‑compose up, and let's go ahead and run this.

40
00:02:10.780 --> 00:02:15.670
And you can see it's now bringing up all my different services here.

41
00:02:15.670 --> 00:02:16.650
Mongo's loading.

42
00:02:16.650 --> 00:02:19.050
Here's some of my Node images that are loading now.

43
00:02:19.050 --> 00:02:23.000
They're creating some routes behind the scenes to handle all that.

44
00:02:23.000 --> 00:02:25.240
Db connection, you'll see, is opened.

45
00:02:25.240 --> 00:02:29.540
If I scroll up a little bit to the Mongo section,

46
00:02:29.540 --> 00:02:32.860
you'll notice that it's actually showing me that a root user was set

47
00:02:32.860 --> 00:02:36.540
called dbadmin and a root role was set as well.

48
00:02:36.540 --> 00:02:41.250
And then we have a webrole and a database name and all that stuff.

49
00:02:41.250 --> 00:02:44.970
And I'm just logging that out right now so we can see if it kind of worked.

50
00:02:44.970 --> 00:02:47.680
And so you could scroll through all the logs if you want.

51
00:02:47.680 --> 00:02:50.840
I'm in this case running in interactive mode.

52
00:02:50.840 --> 00:02:51.300
But, of course,

53
00:02:51.300 --> 00:02:55.830
I could have just done docker‑compose up ‑d and then run

54
00:02:55.830 --> 00:02:58.740
in the daemon mode that you've seen.

55
00:02:58.740 --> 00:03:01.670
And now that this is up and running, we can come on over,

56
00:03:01.670 --> 00:03:03.270
and I'm just going to refresh.

57
00:03:03.270 --> 00:03:03.990
I've already run this.

58
00:03:03.990 --> 00:03:04.940
And there we go.

59
00:03:04.940 --> 00:03:07.940
It looks like the content's been loaded here.

60
00:03:07.940 --> 00:03:10.730
Now I'm not seeing any data, of course, because at this point,

61
00:03:10.730 --> 00:03:12.760
I haven't run the seeder.

62
00:03:12.760 --> 00:03:17.240
But since we have containers, I could go on back again,

63
00:03:17.240 --> 00:03:19.270
and we can kind of x out of here.

64
00:03:19.270 --> 00:03:23.800
Now notice it's going to try to gently shut down our different services,

65
00:03:23.800 --> 00:03:26.740
so we'll go ahead and let it finish.

66
00:03:26.740 --> 00:03:30.220
All right, and let's do a docker‑compose ps,

67
00:03:30.220 --> 00:03:33.850
and you'll notice here that they've all exited.

68
00:03:33.850 --> 00:03:35.370
You can see that over here on the right.

69
00:03:35.370 --> 00:03:36.220
Okay, that's fine.

70
00:03:36.220 --> 00:03:37.250
We know how to do the up.

71
00:03:37.250 --> 00:03:39.840
So let's go ahead and do the up again.

72
00:03:39.840 --> 00:03:43.540
But we'll do ‑d this time.

73
00:03:43.540 --> 00:03:46.040
All right, that'll let me get back to here.

74
00:03:46.040 --> 00:03:49.620
Now you can see the names are actually shown right here.

75
00:03:49.620 --> 00:03:52.740
So I just need to do a docker exec,

76
00:03:52.740 --> 00:03:56.110
and then I can put the name of one of these containers.

77
00:03:56.110 --> 00:03:59.140
So let's go ahead and grab this guy as an example.

78
00:03:59.140 --> 00:04:04.010
And I can execute that node dbSeeder.

79
00:04:04.010 --> 00:04:06.440
I showed this a little bit earlier in the course.

80
00:04:06.440 --> 00:04:09.690
This is a file that's in the actual project that will

81
00:04:09.690 --> 00:04:12.120
get some fake data up into Mongo.

82
00:04:12.120 --> 00:04:13.970
So we can try to run that.

83
00:04:13.970 --> 00:04:16.900
It looks like it worked, so we'll exit out of there.

84
00:04:16.900 --> 00:04:20.240
Again, do docker‑compose ps.

85
00:04:20.240 --> 00:04:23.050
All right, it looks like everything is up and running.

86
00:04:23.050 --> 00:04:25.240
You can see the state right there.

87
00:04:25.240 --> 00:04:27.440
And let's refresh.

88
00:04:27.440 --> 00:04:28.390
All right, there we go.

89
00:04:28.390 --> 00:04:29.520
Now we're getting some data.

90
00:04:29.520 --> 00:04:31.660
This is all from the database and this.

91
00:04:31.660 --> 00:04:34.170
And, actually, now it just cached in Redis,

92
00:04:34.170 --> 00:04:38.440
so this data right here is being cached because it doesn't really change much.

93
00:04:38.440 --> 00:04:42.790
So every time I refresh, it actually is going to be pulling from Redis.

94
00:04:42.790 --> 00:04:46.780
So we could actually do a docker‑compose logs,

95
00:04:46.780 --> 00:04:49.110
and we can get back into the logs.

96
00:04:49.110 --> 00:04:53.640
And you can see some of the Redis connections and things going on here.

97
00:04:53.640 --> 00:04:57.670
So that's an example of how easy it is now to get this custom,

98
00:04:57.670 --> 00:05:02.820
six‑service development environment up and running and allow

99
00:05:02.820 --> 00:05:05.410
us now to have a fully functional website.

100
00:05:05.410 --> 00:05:08.030
I can start editing the code because of the volumes because,

101
00:05:08.030 --> 00:05:11.840
remember, we had a volume that points to my local machine in this case.

102
00:05:11.840 --> 00:05:16.090
And now when I'm done, I can just close up shop for the day if I want.

103
00:05:16.090 --> 00:05:18.430
We'll get out of the log mode here and do,

104
00:05:18.430 --> 00:05:22.640
like we saw earlier, we could do docker‑compose down. And then that,

105
00:05:22.640 --> 00:05:22.940
of course,

106
00:05:22.940 --> 00:05:28.040
will stop the services and, as you saw earlier, also remove the containers.

107
00:05:28.040 --> 00:05:28.930
So there you have it.

108
00:05:28.930 --> 00:05:33.570
There's a walkthrough of setting up a custom development environment with

109
00:05:33.570 --> 00:05:37.700
six services all the way from looking at the custom Docker files, some of

110
00:05:37.700 --> 00:05:47.000
the configuration environment files, to the YAML file to actually running it with our docker‑compose commands.

