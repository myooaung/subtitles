1
00:00:02,140 --> 00:00:02,810
Up to this point,

2
00:00:02,810 --> 00:00:05,350
we've learned about the layered file system and how it

3
00:00:05,350 --> 00:00:07,290
works with images and containers,

4
00:00:07,290 --> 00:00:10,450
how containers are a little bit unique and have their own

5
00:00:10,450 --> 00:00:13,200
thin read/write type of layered file system,

6
00:00:13,200 --> 00:00:15,850
and we call that the container layer typically.

7
00:00:15,850 --> 00:00:20,280
Now I mentioned though that any changes made while a container is

8
00:00:20,280 --> 00:00:23,140
running that are written to the writable layer,

9
00:00:23,140 --> 00:00:26,810
they kind of go away if a container is removed.

10
00:00:26,810 --> 00:00:28,290
So if you delete that container,

11
00:00:28,290 --> 00:00:33,240
you're also going to delete the file layer that is the read/write layer.

12
00:00:33,240 --> 00:00:35,600
Now obviously in scenarios when you have database

13
00:00:35,600 --> 00:00:40,090
files and logs and source code, we might want to keep that around potentially,

14
00:00:40,090 --> 00:00:42,900
especially while we're doing development and just trying to

15
00:00:42,900 --> 00:00:46,140
use Docker as a development environment.

16
00:00:46,140 --> 00:00:47,140
So fortunately,

17
00:00:47,140 --> 00:00:51,920
Docker and containers have another feature we can use called volumes. And what

18
00:00:51,920 --> 00:00:54,520
I'm going to do in this section is just introduce volumes,

19
00:00:54,520 --> 00:00:59,200
and then later we're going to learn about how we can use those volumes.

20
00:00:59,200 --> 00:01:01,440
So what is a volume?

21
00:01:01,440 --> 00:01:01,760
Well,

22
00:01:01,760 --> 00:01:05,040
a volume is nothing more than a special type of directory

23
00:01:05,040 --> 00:01:06,840
that's associated with a container,

24
00:01:06,840 --> 00:01:11,270
and typically you'll hear it referred to as a data volume, and

25
00:01:11,270 --> 00:01:13,580
that's because we can store all types of data.

26
00:01:13,580 --> 00:01:18,540
It could be code, could be log files, could be data files, and more.

27
00:01:18,540 --> 00:01:22,150
Now we can share and reuse these among containers,

28
00:01:22,150 --> 00:01:26,280
so it is possible for multiple containers to write to this

29
00:01:26,280 --> 00:01:29,880
volume, or you could just have a single container that has one

30
00:01:29,880 --> 00:01:32,340
or more volumes that it writes to.

31
00:01:32,340 --> 00:01:35,690
And what's nice about this is any updates to an image

32
00:01:35,690 --> 00:01:38,340
aren't going to affect a data volume.

33
00:01:38,340 --> 00:01:39,850
It stays separate.

34
00:01:39,850 --> 00:01:42,300
Also, data volumes are persistent.

35
00:01:42,300 --> 00:01:45,690
So even if a container is deleted and it's

36
00:01:45,690 --> 00:01:48,320
completely blown away from the machine,

37
00:01:48,320 --> 00:01:54,700
the data volume can do still stick around, and you have control over that.

38
00:01:54,700 --> 00:01:57,420
Now, from a high level, you can think of volumes this way.

39
00:01:57,420 --> 00:01:59,340
If we have a container,

40
00:01:59,340 --> 00:02:03,400
then we can come in and define a volume within that container.

41
00:02:03,400 --> 00:02:09,340
So in this example, /var/www, where do we want that to write?

42
00:02:09,340 --> 00:02:10,790
Well, you kind of have two options.

43
00:02:10,790 --> 00:02:15,640
You can let Docker figure it out, or you can give it your own.

44
00:02:15,640 --> 00:02:17,470
And I'm going to show you how to do your own custom

45
00:02:17,470 --> 00:02:20,140
volume coming up in the next section.

46
00:02:20,140 --> 00:02:21,070
But for now,

47
00:02:21,070 --> 00:02:24,760
let's just know that when you write to a volume, so let's say

48
00:02:24,760 --> 00:02:28,760
that your code in the Docker container actually does a write

49
00:02:28,760 --> 00:02:32,790
operation to this /var/www path, well,

50
00:02:32,790 --> 00:02:36,090
that is really just going to be an alias for a mounted

51
00:02:36,090 --> 00:02:39,620
folder that is in your Docker host.

52
00:02:39,620 --> 00:02:43,960
Now remember that the Docker host is actually hosting the container.

53
00:02:43,960 --> 00:02:49,700
So if you're running on a Linux system or a Windows Server 2016 or

54
00:02:49,700 --> 00:02:54,020
higher type of system, then the host would be that OS. It's the thing

55
00:02:54,020 --> 00:02:56,840
that the container is actually running on top of.

56
00:02:56,840 --> 00:02:58,220
And so in this example,

57
00:02:58,220 --> 00:03:03,030
if we had a volume that we wrote to, instead of writing into that thin

58
00:03:03,030 --> 00:03:06,460
read/write type of layer that is associated with the container that we

59
00:03:06,460 --> 00:03:09,340
talked about with the layered file system,

60
00:03:09,340 --> 00:03:13,730
it can actually write it up into this mounted folder area that's part

61
00:03:13,730 --> 00:03:17,240
of the Docker host. Now if you delete the container,

62
00:03:17,240 --> 00:03:21,160
the folder that's on your Docker host, it can actually stick around,

63
00:03:21,160 --> 00:03:24,440
and you can preserve all of that code if you'd like.

64
00:03:24,440 --> 00:03:29,520
So that's a quick introduction to what a data volume is and what a

65
00:03:29,520 --> 00:03:33,180
volume in general is in the world of Docker containers.

66
00:03:33,180 --> 00:03:37,630
So now what we're going to look at is how can we actually get our source

67
00:03:37,630 --> 00:03:47,000
code into our containers using volumes? And we'll see how we can set that up using things like the Docker client.

