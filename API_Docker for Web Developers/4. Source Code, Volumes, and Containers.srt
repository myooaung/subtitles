1
00:00:02,240 --> 00:00:02,980
Up to this point,

2
00:00:02,980 --> 00:00:05,200
you've learned about the layered file system and how

3
00:00:05,200 --> 00:00:07,590
it's used with images and containers,

4
00:00:07,590 --> 00:00:10,390
and we've also learned about the basics of volumes.

5
00:00:10,390 --> 00:00:13,420
But let's go a little more in depth into volumes and how we can

6
00:00:13,420 --> 00:00:16,440
actually use these to store some source code.

7
00:00:16,440 --> 00:00:17,470
So earlier,

8
00:00:17,470 --> 00:00:22,470
we looked at containers and saw that we can define a volume in a container.

9
00:00:22,470 --> 00:00:24,630
Now, we haven't quite seen the syntax to do that,

10
00:00:24,630 --> 00:00:26,640
but I'm going to show you that here.

11
00:00:26,640 --> 00:00:29,840
And I mentioned that when you write to a volume,

12
00:00:29,840 --> 00:00:31,090
if you set that up,

13
00:00:31,090 --> 00:00:33,460
that it's actually going to write to some special

14
00:00:33,460 --> 00:00:35,500
area that's on your Docker host.

15
00:00:35,500 --> 00:00:38,300
And by default, Docker takes care of that.

16
00:00:38,300 --> 00:00:42,170
It takes care of creating this area where it mounts this folder.

17
00:00:42,170 --> 00:00:46,680
And so I like to think of the var/www/volume that's in the container

18
00:00:46,680 --> 00:00:51,800
here as really being an alias that points over to the Docker host

19
00:00:51,800 --> 00:00:54,330
and this mounted folder type of area,

20
00:00:54,330 --> 00:00:58,640
and that's where you can put your log files and that type of stuff.

21
00:00:58,640 --> 00:01:00,290
Now to do this,

22
00:01:00,290 --> 00:01:02,790
we normally run a command like the following to start

23
00:01:02,790 --> 00:01:04,520
up an image and make a container.

24
00:01:04,520 --> 00:01:07,310
So we can say Docker run, give it our port,

25
00:01:07,310 --> 00:01:10,690
and we have the external and the internal container port,

26
00:01:10,690 --> 00:01:13,540
and in this case, I'm going to run the Node image.

27
00:01:13,540 --> 00:01:16,560
Well, if we actually want to have a special area,

28
00:01:16,560 --> 00:01:19,860
a data volume, where that Node app could write to,

29
00:01:19,860 --> 00:01:22,640
then we can change it to look like this.

30
00:01:22,640 --> 00:01:25,850
So I can put ‑v, and that stands for volume,

31
00:01:25,850 --> 00:01:32,190
and in this case, say, /var/www and then put the image name.

32
00:01:32,190 --> 00:01:38,780
Now the var/www, or www, however you like to say it, that would be the volume.

33
00:01:38,780 --> 00:01:41,950
And then the area that it writes to would be in the Docker host,

34
00:01:41,950 --> 00:01:43,710
and so it would kind of look like this.

35
00:01:43,710 --> 00:01:48,240
We create a volume, this is the container volume alias,

36
00:01:48,240 --> 00:01:52,140
but it actually is going to right to the host area,

37
00:01:52,140 --> 00:01:55,940
and Docker again will automatically create that.

38
00:01:55,940 --> 00:01:57,370
Now, where does it store it?

39
00:01:57,370 --> 00:01:58,630
How would you know?

40
00:01:58,630 --> 00:01:59,670
Let's say that, for instance,

41
00:01:59,670 --> 00:02:04,150
your Node application writes a log file out to this var/www

42
00:02:04,150 --> 00:02:07,410
folder; how does it know where that's going to be?

43
00:02:07,410 --> 00:02:08,990
Well, what's going to happen is,

44
00:02:08,990 --> 00:02:12,060
Docker kind of magically makes that mounted folder.

45
00:02:12,060 --> 00:02:15,320
And the way you can find where it is is by running docker

46
00:02:15,320 --> 00:02:18,640
inspect and then the name of your container.

47
00:02:18,640 --> 00:02:20,410
And so we could come in and do that,

48
00:02:20,410 --> 00:02:23,440
and if you scroll through the information it gives you,

49
00:02:23,440 --> 00:02:25,070
you'll see a Mounts area.

50
00:02:25,070 --> 00:02:27,190
You can see that over here.

51
00:02:27,190 --> 00:02:31,250
And the Mounts area has a name, and it's going to be a really long,

52
00:02:31,250 --> 00:02:34,610
unique identifier, and then a source path,

53
00:02:34,610 --> 00:02:36,770
and it's also a fairly long path.

54
00:02:36,770 --> 00:02:40,440
You'll notice it's in this Mount, mnt, folder,

55
00:02:40,440 --> 00:02:44,140
and that's going to be on your host, your Docker host.

56
00:02:44,140 --> 00:02:47,410
The destination that the container actually writes

57
00:02:47,410 --> 00:02:51,240
to is going to be this var/www.

58
00:02:51,240 --> 00:02:54,210
And so we have the host location defined there in the source,

59
00:02:54,210 --> 00:02:57,510
and then we have the volume location that's in the container

60
00:02:57,510 --> 00:03:01,340
defined by the destination property that you can see.

61
00:03:01,340 --> 00:03:02,450
And so, in this case,

62
00:03:02,450 --> 00:03:07,740
Docker is automatically taking care of where that data gets written to.

63
00:03:07,740 --> 00:03:10,630
But you now have to know if you ever wanted to go

64
00:03:10,630 --> 00:03:14,820
get it outside of the container, have to know how to get to this path,

65
00:03:14,820 --> 00:03:16,380
which can be a little bit long.

66
00:03:16,380 --> 00:03:19,590
And it works great in scenarios where you don't want to control it.

67
00:03:19,590 --> 00:03:22,240
You just want to set up a container volume,

68
00:03:22,240 --> 00:03:23,290
write to it,

69
00:03:23,290 --> 00:03:25,600
and then have Docker take care of storing that

70
00:03:25,600 --> 00:03:27,630
somewhere and persisting that data.

71
00:03:27,630 --> 00:03:31,060
And this is the default way it will do it.

72
00:03:31,060 --> 00:03:35,640
Now, the other option is, we can actually customize our volumes.

73
00:03:35,640 --> 00:03:39,720
Because in this case, Docker is determining the mount location,

74
00:03:39,720 --> 00:03:45,040
the folder, where the var/www is actually going to write to.

75
00:03:45,040 --> 00:03:48,240
So let's look at how we could actually customize this.

76
00:03:48,240 --> 00:03:50,700
So instead of actually having Docker set up the

77
00:03:50,700 --> 00:03:53,240
folder that it writes to on the host,

78
00:03:53,240 --> 00:03:56,470
we could come in and give it our own folder path.

79
00:03:56,470 --> 00:04:00,260
And in this case, I'm just saying /source, but it could be a variety of paths.

80
00:04:00,260 --> 00:04:04,620
And this could be in your source code, could be where you want your log files,

81
00:04:04,620 --> 00:04:07,540
your database files, or whatever it may be.

82
00:04:07,540 --> 00:04:10,810
So this gives us an option to work with,

83
00:04:10,810 --> 00:04:13,300
for instance, source code in this example,

84
00:04:13,300 --> 00:04:17,840
store that in a certain folder, maybe on your Mac or your Windows machine,

85
00:04:17,840 --> 00:04:22,150
and then have the volume actually read and write to that specific area,

86
00:04:22,150 --> 00:04:25,340
which in this case, would be our /source.

87
00:04:25,340 --> 00:04:30,140
So what does the Docker client command like like to make this possible?

88
00:04:30,140 --> 00:04:34,580
Well, again, if we start out with the following where we just run the node image,

89
00:04:34,580 --> 00:04:38,740
we could change it to this type of pattern.

90
00:04:38,740 --> 00:04:42,140
We could say ‑v, and that again creates a volume.

91
00:04:42,140 --> 00:04:45,200
This $(pwd) basically says, hey,

92
00:04:45,200 --> 00:04:52,430
go from the current working directory and use that as the host mount.

93
00:04:52,430 --> 00:04:57,040
In other words, use that as the folder where I want to put my source code.

94
00:04:57,040 --> 00:04:59,620
Now the actual container volume, though,

95
00:04:59,620 --> 00:05:04,030
would be this /var/www, and then, of course,

96
00:05:04,030 --> 00:05:07,240
we have the name of the image, in this case node.

97
00:05:07,240 --> 00:05:10,030
So what this will do is create a volume in the container,

98
00:05:10,030 --> 00:05:11,680
which is going to be var/www,

99
00:05:11,680 --> 00:05:16,680
but when you write to that or when source code's read from that

100
00:05:16,680 --> 00:05:19,640
as the Node container's actually running,

101
00:05:19,640 --> 00:05:22,530
that's it's actually going to look in the host location,

102
00:05:22,530 --> 00:05:26,100
which would be the current working directory.

103
00:05:26,100 --> 00:05:28,970
So if you set up a /source folder and that was where

104
00:05:28,970 --> 00:05:30,940
you ran the command prompt from,

105
00:05:30,940 --> 00:05:33,340
then that would be your current working directory.

106
00:05:33,340 --> 00:05:35,390
If you were in your user folder,

107
00:05:35,390 --> 00:05:37,480
then that would be the current working directory.

108
00:05:37,480 --> 00:05:39,320
Just depends on where you are.

109
00:05:39,320 --> 00:05:44,120
Now, if you do an inspect on this, things change a little bit,

110
00:05:44,120 --> 00:05:48,140
and so we'll run docker inspect on the name of your container,

111
00:05:48,140 --> 00:05:51,140
and here's what we'll see in the Mounts area.

112
00:05:51,140 --> 00:05:54,200
So again, we'll always have a name, which is a unique identifier,

113
00:05:54,200 --> 00:06:00,490
but you'll notice now that the source on the host location is what we wanted,

114
00:06:00,490 --> 00:06:03,240
in this case, /source.

115
00:06:03,240 --> 00:06:04,930
Now, if you're on Mac or Windows,

116
00:06:04,930 --> 00:06:08,280
Docker's smart enough to allow you to work with source code

117
00:06:08,280 --> 00:06:11,040
directly on your Mac or your Windows machine,

118
00:06:11,040 --> 00:06:14,010
have that talk through VirtualBox and up to the container,

119
00:06:14,010 --> 00:06:16,840
and it kind of does some magic there to make all that happen.

120
00:06:16,840 --> 00:06:19,870
So that's really nice for us as developers because now I can

121
00:06:19,870 --> 00:06:21,980
work with my source code right on my Mac,

122
00:06:21,980 --> 00:06:22,570
Windows,

123
00:06:22,570 --> 00:06:27,690
or Linux machine but have my container be loaded up and then reading the

124
00:06:27,690 --> 00:06:32,780
source code or writing to that area using this volume support.

125
00:06:32,780 --> 00:06:36,880
Now the destination, or the volume in the container,

126
00:06:36,880 --> 00:06:40,140
the destination as far as the container is concerned,

127
00:06:40,140 --> 00:06:44,640
is now going to be var/www again, so that part doesn't really change.

128
00:06:44,640 --> 00:06:46,850
But again, that's kind of like an alias,

129
00:06:46,850 --> 00:06:48,280
is how I like to think of it,

130
00:06:48,280 --> 00:06:52,340
and that's actually going to read and write up to this /source.

131
00:06:52,340 --> 00:06:53,570
And again,

132
00:06:53,570 --> 00:06:57,680
anytime you're working with this ‑v syntax as you run a

133
00:06:57,680 --> 00:07:00,240
particular image and make a container,

134
00:07:00,240 --> 00:07:03,150
whatever you write to that volume gets persisted.

135
00:07:03,150 --> 00:07:07,640
So even if you delete the container, that's going to stick around,

136
00:07:07,640 --> 00:07:10,090
and in this case, that's a good thing.

137
00:07:10,090 --> 00:07:15,440
Obviously, if we delete a container, we don't want it to delete our source code.

138
00:07:15,440 --> 00:07:18,880
So that's an example of how we can get started using the Docker

139
00:07:18,880 --> 00:07:23,520
client with setting up a volume that could either automatically

140
00:07:23,520 --> 00:07:28,220
generate a folder using Docker on the host or how we can control

141
00:07:28,220 --> 00:07:30,540
it by using our own syntax.

142
00:07:30,540 --> 00:07:33,140
So now that I've shown you the basics there,

143
00:07:33,140 --> 00:07:40,000
let's look at some examples of how we can actually hook source code into different types of containers.

