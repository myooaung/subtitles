WEBVTT
1
00:00:01.640 --> 00:00:04.490
Before we can talk about how we can get our source code

2
00:00:04.490 --> 00:00:07.130
into an image or a container in Docker,

3
00:00:07.130 --> 00:00:11.060
we first need to understand how Docker images and containers work and

4
00:00:11.060 --> 00:00:14.440
discuss something called the layered file system.

5
00:00:14.440 --> 00:00:17.360
Now I've mentioned this term a few times earlier in the course,

6
00:00:17.360 --> 00:00:21.430
but we really haven't gone into any good details on what it is and

7
00:00:21.430 --> 00:00:24.040
the role of plays with our images and containers,

8
00:00:24.040 --> 00:00:27.640
so let's talk about that now.

9
00:00:27.640 --> 00:00:31.340
Now, from a high level, a dessert perspective in this case,

10
00:00:31.340 --> 00:00:33.010
we have a bunch of layers here you can see.

11
00:00:33.010 --> 00:00:36.310
And at the very bottom we have the base layer,

12
00:00:36.310 --> 00:00:39.860
and then we add layers on top of that and build up and up and up

13
00:00:39.860 --> 00:00:42.940
until we get the final dessert in this case.

14
00:00:42.940 --> 00:00:44.580
Now you may immediately say,

15
00:00:44.580 --> 00:00:47.840
what does that have to do with Docker images and containers?

16
00:00:47.840 --> 00:00:53.240
And actually, the concepts have a lot to do with images and containers,

17
00:00:53.240 --> 00:00:57.600
Docker images and containers are actually built of this layered file system,

18
00:00:57.600 --> 00:01:00.470
and so you can think of instead of the dessert layers,

19
00:01:00.470 --> 00:01:03.350
layers of files that build upon each other.

20
00:01:03.350 --> 00:01:05.760
And you're going to see that's good for a lot of reasons.

21
00:01:05.760 --> 00:01:10.140
It's good for disk space, it's good for reuse, and even other things.

22
00:01:10.140 --> 00:01:15.440
So let's take a look at an image and see how these layers play into that image.

23
00:01:15.440 --> 00:01:17.070
So here's an example of Ubuntu,

24
00:01:17.070 --> 00:01:20.290
and let's say that we grab this off of Docker Hub.

25
00:01:20.290 --> 00:01:22.460
And so we've got all these different layers,

26
00:01:22.460 --> 00:01:24.670
and this is our layered file system in the image.

27
00:01:24.670 --> 00:01:29.830
Now the file system and the layers that compose it within a given image,

28
00:01:29.830 --> 00:01:32.090
they're all read only.

29
00:01:32.090 --> 00:01:33.980
And so once that image is baked,

30
00:01:33.980 --> 00:01:37.080
you're not going to be writing anything to that image from a

31
00:01:37.080 --> 00:01:40.650
container, for instance. The image has the files, they're

32
00:01:40.650 --> 00:01:42.400
kind of hardâ€‘coded in the image,

33
00:01:42.400 --> 00:01:47.320
and they're ready to go and be used, but you can't actually write to this.

34
00:01:47.320 --> 00:01:50.640
Now that may seem a little bit limiting at first glance because we might

35
00:01:50.640 --> 00:01:54.440
have images with a database that needs to write files.

36
00:01:54.440 --> 00:01:56.460
Maybe we have to log some files.

37
00:01:56.460 --> 00:01:59.160
Maybe we have some source code we want to swap and

38
00:01:59.160 --> 00:02:01.710
change as a container is running.

39
00:02:01.710 --> 00:02:02.620
So fortunately,

40
00:02:02.620 --> 00:02:08.290
while images and the file system they have is read only, a container builds

41
00:02:08.290 --> 00:02:12.040
on top of this and gets its own thin read/write layer.

42
00:02:12.040 --> 00:02:12.670
And really,

43
00:02:12.670 --> 00:02:16.320
that's the main distinguishing factor between a container and an image.

44
00:02:16.320 --> 00:02:18.900
An image is a set of read only layers,

45
00:02:18.900 --> 00:02:23.510
whereas a container has a thin read/write layer. Now, as you write

46
00:02:23.510 --> 00:02:26.720
to that layer, if that container gets deleted,

47
00:02:26.720 --> 00:02:29.970
then the writable layer also gets deleted. But coming up,

48
00:02:29.970 --> 00:02:33.840
I'm going to show you how we can change that and use something called volumes.

49
00:02:33.840 --> 00:02:34.420
But for now,

50
00:02:34.420 --> 00:02:38.670
just understand that it is possible to write to a container

51
00:02:38.670 --> 00:02:42.670
and do log files or database files or even have source code

52
00:02:42.670 --> 00:02:44.340
that does something like that.

53
00:02:44.340 --> 00:02:46.390
And we need to put it, though,

54
00:02:46.390 --> 00:02:51.330
either in the image as a baked in layer or up in this thin

55
00:02:51.330 --> 00:02:54.220
read/write layer of a container. And we're going to focus first in

56
00:02:54.220 --> 00:02:58.490
this module on the container layer and what we can do there and how

57
00:02:58.490 --> 00:03:02.160
we can use it. Now, as mentioned,

58
00:03:02.160 --> 00:03:06.850
these file layers that we're using within our images are really,

59
00:03:06.850 --> 00:03:10.350
really efficient when it comes to disk space and reusing things like that.

60
00:03:10.350 --> 00:03:11.800
So, as an example,

61
00:03:11.800 --> 00:03:15.260
if I were to use this Ubuntu image and make a bunch of

62
00:03:15.260 --> 00:03:19.100
containers, then all these image layers that you see here, and

63
00:03:19.100 --> 00:03:22.260
they all have unique identifiers per layer, you'll notice they

64
00:03:22.260 --> 00:03:25.340
have some universal, unique identifier,

65
00:03:25.340 --> 00:03:31.190
and these are all going to be shared across all the different containers.

66
00:03:31.190 --> 00:03:31.950
So that's really,

67
00:03:31.950 --> 00:03:34.010
really good for disk space because we don't have to make

68
00:03:34.010 --> 00:03:36.710
a copy of that entire file system.

69
00:03:36.710 --> 00:03:40.840
And that's why it's pretty quick to actually pull down different images,

70
00:03:40.840 --> 00:03:43.360
especially once you already have some images installed.

71
00:03:43.360 --> 00:03:46.370
Because if you take this one on the very bottom of Ubuntu that starts with

72
00:03:46.370 --> 00:03:51.830
d3, if that particular file layer is used in other images,

73
00:03:51.830 --> 00:03:53.460
then it'll just detect that, hey,

74
00:03:53.460 --> 00:03:56.020
I already have that, and it won't have to redownload it.

75
00:03:56.020 --> 00:03:58.940
It'll just share it between those images.

76
00:03:58.940 --> 00:04:01.720
Now, in the case of each container that's created here,

77
00:04:01.720 --> 00:04:04.880
you can see they all have their own unique read/write

78
00:04:04.880 --> 00:04:07.120
layer. And so that's going to be okay.

79
00:04:07.120 --> 00:04:11.420
Each one can uniquely log or store database files. But as mentioned,

80
00:04:11.420 --> 00:04:13.040
if you delete the container,

81
00:04:13.040 --> 00:04:17.490
you also get rid of that thin read/write layer, and that's where some

82
00:04:17.490 --> 00:04:20.940
things called volumes are going to come into play.

83
00:04:20.940 --> 00:04:23.760
Now that we've talked about this layered file system,

84
00:04:23.760 --> 00:04:27.350
this can help us answer the question we addressed earlier in the module

85
00:04:27.350 --> 00:04:31.440
of how do you get your source code into a container?

86
00:04:31.440 --> 00:04:32.630
Well, at a minimum,

87
00:04:32.630 --> 00:04:36.130
you could put it in the image, and we'll talk about that in a later module,

88
00:04:36.130 --> 00:04:37.940
and I'll show you how to do that.

89
00:04:37.940 --> 00:04:39.960
But as mentioned for this particular module,

90
00:04:39.960 --> 00:04:42.260
we're going to focus on the container level,

91
00:04:42.260 --> 00:04:46.230
that thin readable/writable type of layer, and we're going to integrate the

92
00:04:46.230 --> 00:04:50.540
source code into that container using that particular layer.

93
00:04:50.540 --> 00:04:59.000
So let's go ahead and take a look at more information on how we can do that with containers in something called volumes.

