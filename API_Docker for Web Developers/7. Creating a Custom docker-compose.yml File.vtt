WEBVTT
1
00:00:02.930 --> 00:00:06.210
Now that you've seen the custom dockerfiles that are going to

2
00:00:06.210 --> 00:00:08.720
drive the services that we're going to get up and running in

3
00:00:08.720 --> 00:00:10.540
our development environment,

4
00:00:10.540 --> 00:00:15.170
let's jump into the docker‑compose.yml file and see how it's used

5
00:00:15.170 --> 00:00:17.300
and the different services that we have in it,

6
00:00:17.300 --> 00:00:22.340
and some other features, and see how we can create that.

7
00:00:22.340 --> 00:00:25.530
So earlier we looked at the custom dockerfiles,

8
00:00:25.530 --> 00:00:27.720
and we saw that we had our mongo, nginx,

9
00:00:27.720 --> 00:00:29.840
node, and redis.

10
00:00:29.840 --> 00:00:34.140
Let's jump on down to the docker‑compose.yml file.

11
00:00:34.140 --> 00:00:38.740
Now to start things off, you'll notice that I have the standard version up top,

12
00:00:38.740 --> 00:00:40.840
and then I have my services.

13
00:00:40.840 --> 00:00:44.180
So from a high level, I have my nginx, a node1,

14
00:00:44.180 --> 00:00:50.100
2, and 3, we have mongo, and we have redis for our caching,

15
00:00:50.100 --> 00:00:53.080
and so that's the same infrastructure that we talked about

16
00:00:53.080 --> 00:00:55.840
a little bit earlier in this module.

17
00:00:55.840 --> 00:00:58.500
Now let's walk through each of these real quick and just take a look

18
00:00:58.500 --> 00:01:01.350
at what's going on with our individual services.

19
00:01:01.350 --> 00:01:04.790
So first up is nginx, you can see, and it has a container_name,

20
00:01:04.790 --> 00:01:10.340
so there's a property that you can put in your YAML files called container_name.

21
00:01:10.340 --> 00:01:13.610
We've already seen the build context up to this point in the modules,

22
00:01:13.610 --> 00:01:17.040
and we're setting the build context as this folder here,

23
00:01:17.040 --> 00:01:21.740
the root of this folder, which is CODEWITHDANDOCKERSERVICES.

24
00:01:21.740 --> 00:01:25.350
And then you'll notice that I'm pointing the dockerfile location to

25
00:01:25.350 --> 00:01:28.170
that .docker folder that we looked at earlier,

26
00:01:28.170 --> 00:01:31.300
and of course the actual dockerfile.

27
00:01:31.300 --> 00:01:36.620
Now, if you recall, in the config for nginx I configured node1,

28
00:01:36.620 --> 00:01:39.160
2, and 3, and that way,

29
00:01:39.160 --> 00:01:42.790
when a request comes in it can kind of load balance and does a

30
00:01:42.790 --> 00:01:46.090
round‑robin by default, and it'll call node1,

31
00:01:46.090 --> 00:01:48.350
and the next request goes to node2, and so on,

32
00:01:48.350 --> 00:01:49.740
and so forth.

33
00:01:49.740 --> 00:01:53.260
So what I have here, if we go back to the docker‑compose,

34
00:01:53.260 --> 00:01:56.550
is those actual node1, node2, node3.

35
00:01:56.550 --> 00:01:59.170
So this is going to link up to these services here,

36
00:01:59.170 --> 00:02:00.900
and this is kind of like an alias,

37
00:02:00.900 --> 00:02:06.340
and then it points down to the node1 definition down here in 2 and 3.

38
00:02:06.340 --> 00:02:09.010
So those are actually really important in this case because of

39
00:02:09.010 --> 00:02:13.230
the nginx acting as a type of load balance,

40
00:02:13.230 --> 00:02:17.840
or reverse proxy actually, and it does that type of thing.

41
00:02:17.840 --> 00:02:21.440
And I'm also exposing the ports that I want nginx to support.

42
00:02:21.440 --> 00:02:23.540
Now, in this environment for development,

43
00:02:23.540 --> 00:02:25.150
I'm probably just going to hit port 80,

44
00:02:25.150 --> 00:02:28.140
but I showed earlier that in the dockerfile for nginx,

45
00:02:28.140 --> 00:02:31.150
I actually do load up some self‑signed certificates,

46
00:02:31.150 --> 00:02:34.520
so it would be possible with some more configuration code to

47
00:02:34.520 --> 00:02:38.740
get SSL going if we wanted on port 443.

48
00:02:38.740 --> 00:02:42.340
Now, the next thing I do is I load an environment variable.

49
00:02:42.340 --> 00:02:45.310
Now, this environment variable, it's just one, you'll see,

50
00:02:45.310 --> 00:02:47.870
but it's in a file, this .env.

51
00:02:47.870 --> 00:02:49.550
So let me show you what this file looks like.

52
00:02:49.550 --> 00:02:52.480
It's very, very basic, but really, really useful.

53
00:02:52.480 --> 00:02:54.660
So you'll see this app.development.env.

54
00:02:54.660 --> 00:03:00.180
And all I'm doing is adding this NODE_ENV and setting it to development.

55
00:03:00.180 --> 00:03:02.350
Now, normally, that's used just with Node.js,

56
00:03:02.350 --> 00:03:05.670
but I may actually want to use that particular environment

57
00:03:05.670 --> 00:03:08.240
variable throughout multiple containers.

58
00:03:08.240 --> 00:03:13.440
Now in this case I'm not really using it, per se, but it would be available.

59
00:03:13.440 --> 00:03:17.650
So what'll happen is when we build and then run this,

60
00:03:17.650 --> 00:03:21.260
it's actually going to load that environment variable and make it available in

61
00:03:21.260 --> 00:03:24.840
the container so that we can work with that if we'd like.

62
00:03:24.840 --> 00:03:27.640
Now you might wonder what this is.

63
00:03:27.640 --> 00:03:28.160
Well,

64
00:03:28.160 --> 00:03:31.330
I'll show a little more of this as we get into the next section

65
00:03:31.330 --> 00:03:34.540
and actually run the docker‑compose commands,

66
00:03:34.540 --> 00:03:38.250
but I have a little kind of README up here of what to do to get this running.

67
00:03:38.250 --> 00:03:41.570
So the first kind of step after you do some other changes for

68
00:03:41.570 --> 00:03:45.840
connection strings is I have to export app environment,

69
00:03:45.840 --> 00:03:48.010
and I set it to the environment I want to run.

70
00:03:48.010 --> 00:03:50.220
Now, right now I only support development.

71
00:03:50.220 --> 00:03:54.280
You'll see I don't have an app.staging, app.production,

72
00:03:54.280 --> 00:03:58.140
mongo.staging, mongo.production, just development.

73
00:03:58.140 --> 00:04:01.350
But as I'm getting ready to migrate this to other environments,

74
00:04:01.350 --> 00:04:02.730
I can certainly add those files.

75
00:04:02.730 --> 00:04:05.400
And I just made kind of my own way of doing it,

76
00:04:05.400 --> 00:04:11.420
a little environment variable that's local to the particular file here,

77
00:04:11.420 --> 00:04:13.130
and it will be read dynamically.

78
00:04:13.130 --> 00:04:15.120
So we'll run this in the console,

79
00:04:15.120 --> 00:04:19.040
and then when we do the docker‑compose build and the docker‑compose up,

80
00:04:19.040 --> 00:04:21.710
then it will automatically make this available.

81
00:04:21.710 --> 00:04:27.530
So this would load app.development.env, assuming I set it to development,

82
00:04:27.530 --> 00:04:29.720
and I'll show you this as we move into the next

83
00:04:29.720 --> 00:04:32.940
section with the command line stuff.

84
00:04:32.940 --> 00:04:33.230
Alright,

85
00:04:33.230 --> 00:04:36.050
and then the final thing is I have a custom bridge

86
00:04:36.050 --> 00:04:39.060
network called codewithdan‑network, and that's,

87
00:04:39.060 --> 00:04:39.420
again,

88
00:04:39.420 --> 00:04:42.240
going to allow all these containers to communicate in

89
00:04:42.240 --> 00:04:46.140
the same network on that Linux host.

90
00:04:46.140 --> 00:04:47.680
Now, for the node it's very similar.

91
00:04:47.680 --> 00:04:51.140
I have a container_name, I have a build location for the dockerfile,

92
00:04:51.140 --> 00:04:54.630
expose the ports, but here's where I actually set the volume.

93
00:04:54.630 --> 00:04:57.430
Now this assumes we're in development mode, because you'll

94
00:04:57.430 --> 00:04:59.330
see that I'm pointing to the local folder,

95
00:04:59.330 --> 00:05:01.140
which would be everything you see here.

96
00:05:01.140 --> 00:05:03.550
And then on the actual container,

97
00:05:03.550 --> 00:05:06.740
though, this is where we do that kind of aliasing,

98
00:05:06.740 --> 00:05:10.520
and the volume actually is going to point to my code here.

99
00:05:10.520 --> 00:05:12.880
So once these containers are up and running,

100
00:05:12.880 --> 00:05:16.500
we can make our code changes. And then I showed earlier how I have,

101
00:05:16.500 --> 00:05:21.870
it's called pm2 monitoring, and that pm2 will kind of watch for changes,

102
00:05:21.870 --> 00:05:25.890
and if anything changes then it'll reset the server.js,

103
00:05:25.890 --> 00:05:28.630
and that way I can just leave my containers up and running and

104
00:05:28.630 --> 00:05:31.080
they'll reset each other, or themselves,

105
00:05:31.080 --> 00:05:32.440
I should say.

106
00:05:32.440 --> 00:05:35.680
I set the working directory, and then I also load an environment file.

107
00:05:35.680 --> 00:05:38.460
Now, this is used because this is Node, and again,

108
00:05:38.460 --> 00:05:41.540
the environment file is specific to Node.

109
00:05:41.540 --> 00:05:45.940
And so Node and Express, specifically Express is being used

110
00:05:45.940 --> 00:05:49.790
as the web kind of component of this, it knows how to read

111
00:05:49.790 --> 00:05:53.540
that environment variable, and it can actually tweak some settings there.

112
00:05:53.540 --> 00:05:55.870
Now you can have multiple environment variables.

113
00:05:55.870 --> 00:06:04.790
This is something that if I wanted I could have Env1 or Env2=foo, or whatever,

114
00:06:04.790 --> 00:06:08.040
and just keep going, name‑value pairs.

115
00:06:08.040 --> 00:06:09.280
And so this makes it really,

116
00:06:09.280 --> 00:06:13.140
really easy if you have a bunch of environment variables,

117
00:06:13.140 --> 00:06:18.240
well, I could put these right in the yml file here.

118
00:06:18.240 --> 00:06:20.570
It's a lot easier just to put them in an environment

119
00:06:20.570 --> 00:06:23.600
file and then have them loaded up, and then,

120
00:06:23.600 --> 00:06:27.340
as mentioned, if I do this export APP_ENV=development,

121
00:06:27.340 --> 00:06:31.010
then what'll happen when I use this with docker‑compose

122
00:06:31.010 --> 00:06:33.360
is this would be app.development.env.

123
00:06:33.360 --> 00:06:37.040
Now, obviously, if I change this to production,

124
00:06:37.040 --> 00:06:38.390
then it would be app.production.env,

125
00:06:38.390 --> 00:06:41.940
and that would help you kind of dynamically load the

126
00:06:41.940 --> 00:06:43.940
different environment variables.

127
00:06:43.940 --> 00:06:46.540
So this is the same for all the node containers,

128
00:06:46.540 --> 00:06:48.700
and again, I put three of them,

129
00:06:48.700 --> 00:06:51.690
mainly because you might want to simulate your production

130
00:06:51.690 --> 00:06:54.650
environment while you're in your dev environment,

131
00:06:54.650 --> 00:06:56.730
and so this is just kind of allowing you to do that.

132
00:06:56.730 --> 00:07:01.240
Now, if you only wanted one, you could certainly delete, you know, two of these.

133
00:07:01.240 --> 00:07:03.740
Now, the mongo is actually pretty simple.

134
00:07:03.740 --> 00:07:06.480
We have, again, the container_name and the build.

135
00:07:06.480 --> 00:07:08.530
Here's the ports, external, internal.

136
00:07:08.530 --> 00:07:12.070
And then I have environment variables, and these are really important,

137
00:07:12.070 --> 00:07:17.940
because the mongo one, this is going to be available to the container,

138
00:07:17.940 --> 00:07:20.780
and then the shell scripts that I showed a little bit earlier,

139
00:07:20.780 --> 00:07:23.780
they're going to read from these environment variables,

140
00:07:23.780 --> 00:07:29.670
apply them to Mongo, so you'll see that I have my kind of root admin account,

141
00:07:29.670 --> 00:07:33.750
and then my webrole here represents what Node would use to

142
00:07:33.750 --> 00:07:36.740
actually call in the mongo in that network.

143
00:07:36.740 --> 00:07:41.030
And so what'll happen is the shell script would read these as they're

144
00:07:41.030 --> 00:07:44.340
passed into the container once it gets up and running.

145
00:07:44.340 --> 00:07:47.280
And then once it's done applying those to mongo,

146
00:07:47.280 --> 00:07:50.680
it would just erase those out of memory, because obviously,

147
00:07:50.680 --> 00:07:52.820
once mongo is up and running and we've configured it,

148
00:07:52.820 --> 00:07:55.030
we don't really need those or probably don't even want

149
00:07:55.030 --> 00:07:57.420
those hanging around in the environment.

150
00:07:57.420 --> 00:07:59.280
So that's one way you could do it, there's certainly

151
00:07:59.280 --> 00:08:01.590
other ways that you could configure this,

152
00:08:01.590 --> 00:08:05.740
but this makes it easy for a development environment.

153
00:08:05.740 --> 00:08:06.410
Alright,

154
00:08:06.410 --> 00:08:09.220
and moving on down, there's the environment variables being loaded.

155
00:08:09.220 --> 00:08:12.240
Then the last one is redis, very similar procedure.

156
00:08:12.240 --> 00:08:14.150
We have our dockerfile.

157
00:08:14.150 --> 00:08:16.960
This is the redis port that's kind of the standard port.

158
00:08:16.960 --> 00:08:19.540
We load that environment variable.

159
00:08:19.540 --> 00:08:22.400
This one just loads the node, which isn't used here,

160
00:08:22.400 --> 00:08:26.000
but I could have environment variables that are maybe specific to Redis

161
00:08:26.000 --> 00:08:29.940
potentially. And, again, we put it in the network.

162
00:08:29.940 --> 00:08:34.010
And so there you have it, that would be the entire file we need.

163
00:08:34.010 --> 00:08:38.300
And what I love about this is right now we have six services in

164
00:08:38.300 --> 00:08:43.450
here, nginx, three nodes, redis, and mongo, but if I wanted to add a

165
00:08:43.450 --> 00:08:47.600
seventh or an eighth or a ninth service, then I could certainly do

166
00:08:47.600 --> 00:08:49.840
that just by updating this file.

167
00:08:49.840 --> 00:08:53.250
And then you've seen how easy it is to bring services up and take

168
00:08:53.250 --> 00:08:55.810
them back down, and that's what we're actually going to talk about in

169
00:08:55.810 --> 00:08:59.440
the next final part of this module here.

170
00:08:59.440 --> 00:09:03.660
So that's an example of the custom YAML file that could be used

171
00:09:03.660 --> 00:09:06.910
to get our development environment up and running. And this is

172
00:09:06.910 --> 00:09:09.500
something we could just check into source control, every team

173
00:09:09.500 --> 00:09:11.240
member could pull it down,

174
00:09:11.240 --> 00:09:19.000
and then we would be able to do our builds and start running our containers, and that's what we'll take a look at next.

