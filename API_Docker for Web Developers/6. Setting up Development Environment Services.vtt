WEBVTT
1
00:00:02.740 --> 00:00:06.350
Now that we've taken a look at how you can work with Docker Compose YAML

2
00:00:06.350 --> 00:00:09.440
files and some of the different commands you can run,

3
00:00:09.440 --> 00:00:13.200
let's walk through setting up a more robust development environment,

4
00:00:13.200 --> 00:00:15.470
talk about some of the different Dockerfiles involved,

5
00:00:15.470 --> 00:00:22.040
and then look at the custom YAML file and how we can actually run it.

6
00:00:22.040 --> 00:00:22.670
So earlier,

7
00:00:22.670 --> 00:00:27.240
I talked about this type of environment where we have Nginx on the front end.

8
00:00:27.240 --> 00:00:31.540
It can then route to multiple Node.js processes that could be running.

9
00:00:31.540 --> 00:00:36.260
And then Node can integrate with MongoDB and cache some data in Redis.

10
00:00:36.260 --> 00:00:38.680
Now obviously, in a development environment,

11
00:00:38.680 --> 00:00:41.340
you probably don't need multiple Node instances.

12
00:00:41.340 --> 00:00:43.240
But I'm going to show you how you could do it just so you

13
00:00:43.240 --> 00:00:46.740
see the setup and how it all works.

14
00:00:46.740 --> 00:00:50.210
So let's go ahead and jump over to a code demonstration

15
00:00:50.210 --> 00:00:52.040
here. And what I'm going to do is,

16
00:00:52.040 --> 00:00:55.490
rather than typing it all out, because we've already seen the YAML file,

17
00:00:55.490 --> 00:00:59.230
we've seen Dockerfiles, I'm going to talk through the setup,

18
00:00:59.230 --> 00:01:02.260
walk you through the basics in this particular section.

19
00:01:02.260 --> 00:01:03.990
And then in the upcoming sections,

20
00:01:03.990 --> 00:01:07.300
we'll look more deeply at the YAML file and then start to run it

21
00:01:07.300 --> 00:01:09.980
and get this environment going. And you're going to see it's

22
00:01:09.980 --> 00:01:12.430
actually extremely easy to get going.

23
00:01:12.430 --> 00:01:15.640
That's what's so exciting again to me about Docker.

24
00:01:15.640 --> 00:01:18.640
So let's jump on over here.

25
00:01:18.640 --> 00:01:21.680
All right, so this is a project that has all these different

26
00:01:21.680 --> 00:01:24.960
services that I need to have in place, the Nginx,

27
00:01:24.960 --> 00:01:27.240
the Node, the Mongo, the Redis.

28
00:01:27.240 --> 00:01:31.440
And so what I've done here is I have a .docker folder.

29
00:01:31.440 --> 00:01:33.460
Now this is my own name.

30
00:01:33.460 --> 00:01:36.550
You can certainly choose whatever you want here. But

31
00:01:36.550 --> 00:01:39.940
inside of it, I have my custom Dockerfiles.

32
00:01:39.940 --> 00:01:42.510
So I have one for Mongo, for instance.

33
00:01:42.510 --> 00:01:44.380
We'll talk through the basics of this.

34
00:01:44.380 --> 00:01:45.670
Here's Nginx.

35
00:01:45.670 --> 00:01:50.460
Here's my Node, and then here's my Redis. Now these are pretty standard.

36
00:01:50.460 --> 00:01:52.410
There's a few things I'll point out and call to your

37
00:01:52.410 --> 00:01:57.550
attention. But out of the box, I'm really just grabbing from the latest Mongo.

38
00:01:57.550 --> 00:01:59.830
I'm running a couple custom commands.

39
00:01:59.830 --> 00:02:04.890
It turns out that the debian:wheezy image of this is based upon,

40
00:02:04.890 --> 00:02:07.400
didn't have a particular feature I needed,

41
00:02:07.400 --> 00:02:08.410
at least at the time,

42
00:02:08.410 --> 00:02:12.420
which is at the time I'm recording this, and it's called netcat. So I had to

43
00:02:12.420 --> 00:02:16.760
actually do an apt‑get, which is one way on a Linux machine that you can go

44
00:02:16.760 --> 00:02:19.770
grab different tools and download them dynamically.

45
00:02:19.770 --> 00:02:21.110
So I'm going to do that.

46
00:02:21.110 --> 00:02:25.040
And then I'm going to run some custom Mongo scripts and copy them in.

47
00:02:25.040 --> 00:02:28.730
Now, in this case, when Mongo runs,

48
00:02:28.730 --> 00:02:32.580
I need to supply some username and password‑type

49
00:02:32.580 --> 00:02:36.150
information. And out of the box, you don't get that.

50
00:02:36.150 --> 00:02:37.990
You can supply some basic stuff,

51
00:02:37.990 --> 00:02:43.240
but I need to supply obviously my admin password and username. And then

52
00:02:43.240 --> 00:02:45.690
the web that's going to hit it needs a web account.

53
00:02:45.690 --> 00:02:48.460
So the Node application needs to be able to call it

54
00:02:48.460 --> 00:02:50.540
with a specific account as well.

55
00:02:50.540 --> 00:02:54.540
And this is all done with some different sh or shell scripts here.

56
00:02:54.540 --> 00:02:59.140
And so you'll notice I'm calling this run.sh. And in a nutshell,

57
00:02:59.140 --> 00:03:02.830
what I'm doing is kicking off a little bit of scheduling for backups,

58
00:03:02.830 --> 00:03:05.320
which, again, in the dev world you probably don't need.

59
00:03:05.320 --> 00:03:10.040
But in this particular case, I could use this in a production mode if I wanted.

60
00:03:10.040 --> 00:03:14.070
And then I kick off some other things, like this first run. And

61
00:03:14.070 --> 00:03:16.390
this is where I use environment variables.

62
00:03:16.390 --> 00:03:20.680
And this is how, in this case, a shell script how we can get to some

63
00:03:20.680 --> 00:03:24.280
environment variables that are being set. Now these are going to be

64
00:03:24.280 --> 00:03:28.490
loaded through this mongo.development.env.

65
00:03:28.490 --> 00:03:32.610
And so you'll notice in here, this is an environment variables file.

66
00:03:32.610 --> 00:03:35.960
You're going to see this as we get into the Docker Compose file,

67
00:03:35.960 --> 00:03:37.840
which is back down here.

68
00:03:37.840 --> 00:03:41.640
But I I can supply the environment.

69
00:03:41.640 --> 00:03:46.220
I can supply the Mongo type of functionality for the username and password.

70
00:03:46.220 --> 00:03:49.210
And these scripts take care of applying all of this

71
00:03:49.210 --> 00:03:53.740
information to the actual MongoDB database.

72
00:03:53.740 --> 00:03:55.660
So that's really what this guy does.

73
00:03:55.660 --> 00:03:57.960
The entry point runs this custom script,

74
00:03:57.960 --> 00:04:00.180
and that kicks off getting the username and

75
00:04:00.180 --> 00:04:03.140
passwords all updated in the database.

76
00:04:03.140 --> 00:04:07.810
That way, I can truly do authenticated calls from the web app.

77
00:04:07.810 --> 00:04:11.240
Now the Nginx also does a little bit of extra stuff.

78
00:04:11.240 --> 00:04:16.440
First off, I have a configuration file. And if you're not familiar with Nginx,

79
00:04:16.440 --> 00:04:19.620
it's a reverse proxy. And it's something that,

80
00:04:19.620 --> 00:04:21.480
as was shown in the diagram earlier,

81
00:04:21.480 --> 00:04:25.360
it could be hit first on port 80 for instance. And then it

82
00:04:25.360 --> 00:04:28.960
could forward dynamic calls that Node needs to handle or

83
00:04:28.960 --> 00:04:31.730
whatever your server is on the back end to,

84
00:04:31.730 --> 00:04:33.940
in this case, the Node process.

85
00:04:33.940 --> 00:04:37.150
But for the static resources, and this would be your CSS,

86
00:04:37.150 --> 00:04:38.630
your JavaScript, your images,

87
00:04:38.630 --> 00:04:42.270
things like that, I really don't need to hit a back‑end process for that.

88
00:04:42.270 --> 00:04:45.980
Why not just let a really efficient server, like Nginx, serve those up?

89
00:04:45.980 --> 00:04:47.410
And that's what I'm going to do.

90
00:04:47.410 --> 00:04:51.440
So this has the configuration for this proxy server,

91
00:04:51.440 --> 00:04:54.340
and so it's actually going to configure a few things.

92
00:04:54.340 --> 00:04:59.020
If I go into config, nginx, you'll notice in here if I scroll on down,

93
00:04:59.020 --> 00:05:02.070
we have this little node‑upstream. And don't feel like you

94
00:05:02.070 --> 00:05:03.760
need to understand this if you're new to it,

95
00:05:03.760 --> 00:05:05.100
because, quite honestly,

96
00:05:05.100 --> 00:05:07.880
you could just go to their documentation, copy and

97
00:05:07.880 --> 00:05:09.740
paste some samples, and tweak them.

98
00:05:09.740 --> 00:05:12.680
But I wanted to just point out that I actually set up a

99
00:05:12.680 --> 00:05:17.710
node1, node2, and node3. So when a request comes in to

100
00:05:17.710 --> 00:05:20.740
Nginx, if a dynamic call is required,

101
00:05:20.740 --> 00:05:25.000
in other words it wasn't a static resource like a CSS file,

102
00:05:25.000 --> 00:05:30.400
then it can route it into one of these Node instances. Now as mentioned earlier,

103
00:05:30.400 --> 00:05:34.040
it's not like you need three Node instances in development.

104
00:05:34.040 --> 00:05:36.520
But maybe you want to simulate a production type of

105
00:05:36.520 --> 00:05:37.680
scenario and do some testing.

106
00:05:37.680 --> 00:05:39.300
Well, it's pretty easy to do that.

107
00:05:39.300 --> 00:05:41.340
That's kind of why I set this up.

108
00:05:41.340 --> 00:05:42.860
So that's really all I want to point out.

109
00:05:42.860 --> 00:05:46.910
You'll see that these are running on port 8080, and these are going to be

110
00:05:46.910 --> 00:05:51.060
three containers that ultimately will run behind the scenes.

111
00:05:51.060 --> 00:05:52.340
Now the rest of this,

112
00:05:52.340 --> 00:05:58.470
if I go back to the Dockerfile for Nginx, is I actually copy the public

113
00:05:58.470 --> 00:06:02.280
resources. This is the static resources. If we jump over here to

114
00:06:02.280 --> 00:06:09.890
public, css, img, and js. So I'm actually copying that up into the

115
00:06:09.890 --> 00:06:13.180
container that's going to run for Nginx, and that way it can handle

116
00:06:13.180 --> 00:06:16.630
serving that. I do a little bit with certificates in case you want to

117
00:06:16.630 --> 00:06:17.800
play around with SSL.

118
00:06:17.800 --> 00:06:20.370
These are self‑signed certificates so they wouldn't be used for

119
00:06:20.370 --> 00:06:24.430
production. And then I kick it off down here by running the

120
00:06:24.430 --> 00:06:27.040
Nginx command that you see right here.

121
00:06:27.040 --> 00:06:30.140
So that's that Dockerfile.

122
00:06:30.140 --> 00:06:32.900
I also have one for Node. This one's pretty basic.

123
00:06:32.900 --> 00:06:37.050
It does a little bit of an install as far as npm install, installs something

124
00:06:37.050 --> 00:06:43.130
called pm2. This is a process monitor that'll monitor our server process for all

125
00:06:43.130 --> 00:06:46.490
the Node instances. And if the server process dies,

126
00:06:46.490 --> 00:06:47.470
it'll restart it.

127
00:06:47.470 --> 00:06:50.430
Or if I change the code, it can restart it.

128
00:06:50.430 --> 00:06:53.840
And that's a real nice thing to have obviously in development mode.

129
00:06:53.840 --> 00:06:55.960
And then finally, I have the Redis image.

130
00:06:55.960 --> 00:07:01.140
And really all I'm doing here is copying again some configuration file info,

131
00:07:01.140 --> 00:07:04.270
and that again is located up in this config.

132
00:07:04.270 --> 00:07:07.040
You'll see Redis. And all I'm doing here is supplying

133
00:07:07.040 --> 00:07:09.340
a password for the caching server.

134
00:07:09.340 --> 00:07:12.320
Don't use that in production, but it's not bad for dev.

135
00:07:12.320 --> 00:07:14.540
It's just password.

136
00:07:14.540 --> 00:07:15.090
All right,

137
00:07:15.090 --> 00:07:18.900
so that's a quick runthrough on the services that we're going to

138
00:07:18.900 --> 00:07:21.920
have running and the Dockerfiles that are going to drive these

139
00:07:21.920 --> 00:07:24.940
images and ultimately the containers.

140
00:07:24.940 --> 00:07:26.570
And by using these,

141
00:07:26.570 --> 00:07:29.850
you're going to see that we can make a Docker Compose file, and we'll be doing

142
00:07:29.850 --> 00:07:40.000
that in the next section here, and then get that up and running very quickly and efficiently using the Docker Compose commands.

