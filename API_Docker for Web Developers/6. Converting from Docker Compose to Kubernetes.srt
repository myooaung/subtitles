1
00:00:00,840 --> 00:00:03,410
We've talked about the fundamentals of Kubernetes,

2
00:00:03,410 --> 00:00:06,340
how to get it running locally on your machine,

3
00:00:06,340 --> 00:00:10,100
as well as some of the key concepts such as deployments and services.

4
00:00:10,100 --> 00:00:14,350
So now it's time to actually take a Docker Compose file and

5
00:00:14,350 --> 00:00:18,390
either run it directly in Kubernetes or convert it into some of

6
00:00:18,390 --> 00:00:21,940
the files Kubernetes normally works with.

7
00:00:21,940 --> 00:00:24,270
So there's several options when it comes to migrating

8
00:00:24,270 --> 00:00:27,140
from Docker Compose to Kubernetes.

9
00:00:27,140 --> 00:00:30,140
One is just to use Docker Desktop directly.

10
00:00:30,140 --> 00:00:35,640
It has an open‑source project built into it called Compose on Kubernetes,

11
00:00:35,640 --> 00:00:37,080
and I'll show you this in just a moment,

12
00:00:37,080 --> 00:00:39,840
a very easy way to get started.

13
00:00:39,840 --> 00:00:43,440
Now there's another project called Kompose that you could also use.

14
00:00:43,440 --> 00:00:45,600
This doesn't run directly in Docker Desktop.

15
00:00:45,600 --> 00:00:47,410
It's a separate open‑source project,

16
00:00:47,410 --> 00:00:50,600
but it will directly translate from a Docker Compose

17
00:00:50,600 --> 00:00:53,400
file to the different deployment, service,

18
00:00:53,400 --> 00:00:56,640
and other files that Kubernetes normally needs.

19
00:00:56,640 --> 00:01:00,210
And this is a good way to go because, as mentioned in a previous section,

20
00:01:00,210 --> 00:01:04,400
if you're working with a DevOps team and you're just trying to get Kubernetes

21
00:01:04,400 --> 00:01:08,140
running locally just to make sure your app runs as expected,

22
00:01:08,140 --> 00:01:10,440
but then you want to be able to hand them off some

23
00:01:10,440 --> 00:01:13,460
of the work you've already done, if they work with Kubernetes,

24
00:01:13,460 --> 00:01:16,350
they're probably going to want the different Kubernetes files.

25
00:01:16,350 --> 00:01:19,180
So let's take a quick look at both of these and how

26
00:01:19,180 --> 00:01:21,840
we would get started with them.

27
00:01:21,840 --> 00:01:24,940
I'm going to start with Compose on Kubernetes.

28
00:01:24,940 --> 00:01:28,560
So I've gone to the GitHub site that Docker maintains for this.

29
00:01:28,560 --> 00:01:32,840
And as mentioned, this is actually part of Docker Desktop now.

30
00:01:32,840 --> 00:01:36,840
So you have this already if you're running Docker Desktop.

31
00:01:36,840 --> 00:01:38,430
Now if we scroll on down,

32
00:01:38,430 --> 00:01:40,810
they'll give us an idea about what we're going to be doing,

33
00:01:40,810 --> 00:01:44,340
and they call it deploying a stack.

34
00:01:44,340 --> 00:01:49,440
When it comes to clustering and having multiple VMs or nodes out there,

35
00:01:49,440 --> 00:01:53,340
Docker has their own solution called Docker Swarm.

36
00:01:53,340 --> 00:01:55,460
Now they also directly support Kubernetes,

37
00:01:55,460 --> 00:01:57,640
of course, as we've already seen,

38
00:01:57,640 --> 00:02:01,100
but they have a docker stack command that's been in there for quite a

39
00:02:01,100 --> 00:02:05,840
while now if you want to get a swarm or a cluster setup.

40
00:02:05,840 --> 00:02:09,730
Now what they've done is made it so their normal docker stack

41
00:02:09,730 --> 00:02:14,920
command can actually be used to deploy, but using a Docker Compose file.

42
00:02:14,920 --> 00:02:16,540
It's actually very simple.

43
00:02:16,540 --> 00:02:20,040
So, assuming you had a Compose file like you see here,

44
00:02:20,040 --> 00:02:23,240
we can run a docker stack command.

45
00:02:23,240 --> 00:02:27,040
We could deploy it using the Kubernetes orchestrator,

46
00:02:27,040 --> 00:02:30,420
and then give the Compose file, which is docker‑compose.yml,

47
00:02:30,420 --> 00:02:33,340
and then give the stack of name.

48
00:02:33,340 --> 00:02:36,340
Now earlier I mentioned when you come into the Preferences

49
00:02:36,340 --> 00:02:38,700
on Docker Desktop and go into Kubernetes,

50
00:02:38,700 --> 00:02:43,540
there's this checkbox, Deploy Docker Stacks to Kubernetes by default.

51
00:02:43,540 --> 00:02:47,780
Now, if you enable that, then when you run these docker stack commands,

52
00:02:47,780 --> 00:02:49,730
you won't have to set the orchestrator.

53
00:02:49,730 --> 00:02:51,720
It'll just automatically do that for you.

54
00:02:51,720 --> 00:02:55,240
So that's an option if you'd like to go that route.

55
00:02:55,240 --> 00:02:58,370
Now if you don't want to work with Docker Compose for Kubernetes

56
00:02:58,370 --> 00:03:02,140
and instead just want to go 100% Kubernetes,

57
00:03:02,140 --> 00:03:05,340
then we can go to the Kompose project.

58
00:03:05,340 --> 00:03:09,650
Now Kompose actually translates and converts your Docker

59
00:03:09,650 --> 00:03:13,810
Compose files into the deployments, and services,

60
00:03:13,810 --> 00:03:14,990
and persistent volumes,

61
00:03:14,990 --> 00:03:18,610
and other types of files that you can have to work with Kubernetes.

62
00:03:18,610 --> 00:03:20,820
To get started is really easy.

63
00:03:20,820 --> 00:03:25,260
You come on into the Installation, and you can see for Linux and Mac,

64
00:03:25,260 --> 00:03:29,300
they have some curl commands, and for Windows they have some instructions.

65
00:03:29,300 --> 00:03:33,440
You can download a binary, and then add it to your path.

66
00:03:33,440 --> 00:03:38,340
Now I've already installed Kompose on my Mac and run these steps here,

67
00:03:38,340 --> 00:03:41,010
so it's ready to go, and I'm going to show you how we can use it.

68
00:03:41,010 --> 00:03:44,540
But let's go to the get started guide.

69
00:03:44,540 --> 00:03:46,740
So if we scroll on down a little bit,

70
00:03:46,740 --> 00:03:49,740
you're going to see a kompose convert command.

71
00:03:49,740 --> 00:03:53,300
And what it will do is take that docker‑compose.yml file that you'd

72
00:03:53,300 --> 00:03:57,810
have wherever you run this command and automatically generate the

73
00:03:57,810 --> 00:04:02,700
different service and deployment files for each of the services that

74
00:04:02,700 --> 00:04:04,840
are in your Docker Compose file.

75
00:04:04,840 --> 00:04:06,300
So if you add four services,

76
00:04:06,300 --> 00:04:09,560
then by default you're going to get four service Kubernetes

77
00:04:09,560 --> 00:04:13,140
files and four deployment Kubernetes files.

78
00:04:13,140 --> 00:04:15,340
And you can see that kind of here.

79
00:04:15,340 --> 00:04:19,940
Now just like Docker Compose, there's even a kompose up you can run,

80
00:04:19,940 --> 00:04:24,510
and that will allow you to actually run directly without really

81
00:04:24,510 --> 00:04:27,510
having to worry about the different files.

82
00:04:27,510 --> 00:04:30,430
I personally like to have the files because oftentimes

83
00:04:30,430 --> 00:04:32,240
I need to tweak them a little bit.

84
00:04:32,240 --> 00:04:36,210
But this gives you a good starting point with a convert command to do that.

85
00:04:36,210 --> 00:04:38,840
So let me show you that real quick.

86
00:04:38,840 --> 00:04:40,520
So if we come back into a project,

87
00:04:40,520 --> 00:04:43,710
I've opened up the CodeWithDanDockerServices project that

88
00:04:43,710 --> 00:04:46,340
you've seen several times up to this point.

89
00:04:46,340 --> 00:04:49,770
And if I come on in and type kompose convert,

90
00:04:49,770 --> 00:04:51,740
if I were to hit Enter,

91
00:04:51,740 --> 00:04:56,280
that would take this Docker Compose file and convert it into

92
00:04:56,280 --> 00:04:58,500
the deployment and service files I mentioned.

93
00:04:58,500 --> 00:05:01,720
Now I've actually already done that for the project.

94
00:05:01,720 --> 00:05:04,090
You're going to find a Kubernetes folder.

95
00:05:04,090 --> 00:05:07,340
K8s is an abbreviation for that, by the way.

96
00:05:07,340 --> 00:05:10,170
And then here's what it generated based on what it

97
00:05:10,170 --> 00:05:12,940
found in this Docker Compose file.

98
00:05:12,940 --> 00:05:14,500
So I had a mongo‑service.

99
00:05:14,500 --> 00:05:16,250
It did all those deployments and services,

100
00:05:16,250 --> 00:05:21,790
nginx, node, and redis because that's what we had in here.

101
00:05:21,790 --> 00:05:24,940
Now in order to get this going, if you want to run it on your own,

102
00:05:24,940 --> 00:05:28,370
there's a README me at the route of this project that'll help you out there.

103
00:05:28,370 --> 00:05:31,060
But you do need to run this in production mode,

104
00:05:31,060 --> 00:05:34,350
which means exporting or setting if you're on Windows,

105
00:05:34,350 --> 00:05:38,840
the app environment to production, set in your DOCKER_ACCT,

106
00:05:38,840 --> 00:05:45,840
removing a node volume, and you'll see that right down here in my node service.

107
00:05:45,840 --> 00:05:47,870
And then after that, you'd be ready to go.

108
00:05:47,870 --> 00:05:51,840
You can do a docker‑compose build to get your images.

109
00:05:51,840 --> 00:05:55,210
Now we could come in and do our kompose convert,

110
00:05:55,210 --> 00:05:58,940
or if you just want to have one file instead of many,

111
00:05:58,940 --> 00:06:03,040
you could say ‑‑out, and I'll just say test.yml,

112
00:06:03,040 --> 00:06:04,340
and I'll show you the output here.

113
00:06:04,340 --> 00:06:08,640
So now if we go to the route, it just generated this file.

114
00:06:08,640 --> 00:06:12,580
And you'll notice that we have a lot of different YAML code in here.

115
00:06:12,580 --> 00:06:17,740
In fact, it's pretty large, actually, with everything that we want.

116
00:06:17,740 --> 00:06:20,320
Now I normally like to work with the individual files,

117
00:06:20,320 --> 00:06:21,100
as I mentioned,

118
00:06:21,100 --> 00:06:23,990
so let's talk through these just really quickly and see what a

119
00:06:23,990 --> 00:06:27,340
deployment and what a service actually looks like.

120
00:06:27,340 --> 00:06:31,090
So if we go to the mongo‑deployment, if we come on in,

121
00:06:31,090 --> 00:06:33,120
it'll say how many replicas we need.

122
00:06:33,120 --> 00:06:37,540
Well, we just want one of these database items in this case, one container.

123
00:06:37,540 --> 00:06:40,440
It's going to say some environment variables here,

124
00:06:40,440 --> 00:06:43,830
some key value pairs, and if we come on down,

125
00:06:43,830 --> 00:06:48,130
you'll notice image: danwahlin/mongo or whatever you called your image,

126
00:06:48,130 --> 00:06:49,440
in this case.

127
00:06:49,440 --> 00:06:55,640
Now, if I go into the mongo‑service, the important part is the ports down here.

128
00:06:55,640 --> 00:06:56,890
Now as we talked about earlier,

129
00:06:56,890 --> 00:07:01,530
a service provides an IP and abstracts the consumer from one

130
00:07:01,530 --> 00:07:03,630
or more pods running behind that service.

131
00:07:03,630 --> 00:07:04,770
In this case, there's just one.

132
00:07:04,770 --> 00:07:06,540
It would be for mongo.

133
00:07:06,540 --> 00:07:10,150
But this will define how to communicate to that pod through this port.

134
00:07:10,150 --> 00:07:13,740
We have an external and internal port.

135
00:07:13,740 --> 00:07:17,840
Now the same goes for nginx.. It has a deployment.

136
00:07:17,840 --> 00:07:20,140
It also has the image.

137
00:07:20,140 --> 00:07:23,620
It has a service that has our two ports in this case.

138
00:07:23,620 --> 00:07:27,820
And if I go down to node and the redis, you'd see the same types of things.

139
00:07:27,820 --> 00:07:31,340
The deployments define the image to run for the container,

140
00:07:31,340 --> 00:07:36,340
and then the service defines the ports and can have other information.

141
00:07:36,340 --> 00:07:39,700
Now that's a really quick look at what we can do because with services,

142
00:07:39,700 --> 00:07:43,340
there's different types of services and ways you can use them.

143
00:07:43,340 --> 00:07:46,630
But this will be enough to help us move from our

144
00:07:46,630 --> 00:07:51,440
docker‑compose file here to actually Kubernetes files.

145
00:07:51,440 --> 00:07:56,140
So now that those files are generated using the Compose open‑source tool,

146
00:07:56,140 --> 00:08:01,000
let's take a look at how we can get Kubernetes going and get our containers in Kubernetes.

