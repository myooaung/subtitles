1
00:00:05,050 --> 00:00:07,600
Hello and welcome back to the course on blotching.

2
00:00:07,840 --> 00:00:10,430
And today we've got another exciting tutorial ahead.

3
00:00:10,480 --> 00:00:14,340
We're talking about how minors pick their transactions.

4
00:00:14,620 --> 00:00:17,230
All right let's get straight into it.

5
00:00:17,560 --> 00:00:19,170
OK so here we've got a minor.

6
00:00:19,300 --> 00:00:24,090
As usual we're just used to illustrating minors with laptops.

7
00:00:24,160 --> 00:00:25,900
This has got to be minor.

8
00:00:26,330 --> 00:00:35,920
And so how does a minor get the list of transactions that actually goes into Here goes into this field.

9
00:00:35,920 --> 00:00:38,320
All right so we we kind of know all the rest.

10
00:00:38,320 --> 00:00:43,980
And we've been using that transaction that those fake transactions that I made up of the other coins

11
00:00:44,380 --> 00:00:48,010
but in reality where do these transactions come from.

12
00:00:48,130 --> 00:00:50,960
So that's what we're going to be sorting out today.

13
00:00:51,190 --> 00:00:58,480
Well the transactions they come from something called a meme pool or a memory pool which is attached

14
00:00:58,480 --> 00:01:00,240
to every node every miner.

15
00:01:00,400 --> 00:01:05,830
And basically these are all the Aankhen from transactions that they get stored here before they get

16
00:01:05,830 --> 00:01:08,830
included in a ball inside a block.

17
00:01:09,010 --> 00:01:12,960
So blocks are added about every 10 minutes.

18
00:01:13,150 --> 00:01:15,670
But transactions happen all the time.

19
00:01:15,670 --> 00:01:21,490
So you know I can send some bitcoins now I can receive some bitcoins we're going to we don't have to

20
00:01:21,490 --> 00:01:26,440
wait until every 10 minutes to do that we can do that all the time so all those transactions get put

21
00:01:26,440 --> 00:01:27,550
into a meme pool.

22
00:01:27,580 --> 00:01:32,260
In the meantime it's like a staging area for transactions.

23
00:01:32,320 --> 00:01:38,770
We'll talk more about the meme pool in an upcoming tutorial further down the track and we'll understand

24
00:01:38,770 --> 00:01:40,240
how it works exactly in more detail.

25
00:01:40,240 --> 00:01:46,060
But for now that's sufficient information for us or a minor or every node has a memory attached to them

26
00:01:46,060 --> 00:01:48,680
where there is a list of transactions that are still pending.

27
00:01:48,680 --> 00:01:49,980
Like a staging area.

28
00:01:50,080 --> 00:01:58,420
And so the miner will need to include some of these transactions in the block and let's say a miner

29
00:01:58,420 --> 00:02:04,120
has a maximum for you know for argument's sake that there's a maximum of five transaction that they

30
00:02:04,120 --> 00:02:07,230
can include in the real blotching world.

31
00:02:07,340 --> 00:02:08,410
There's a different limit.

32
00:02:08,410 --> 00:02:14,220
The limit is one megabyte and then Hoven transactions fit in there and that's about two thousand transactions

33
00:02:14,230 --> 00:02:14,960
superball.

34
00:02:15,010 --> 00:02:19,900
But for our purposes we'll just say that a minor can include max five transactions.

35
00:02:20,210 --> 00:02:20,520
OK.

36
00:02:20,560 --> 00:02:24,110
So how is the Myer going to pick these transactions.

37
00:02:24,250 --> 00:02:29,970
Well if we look at them we can see like there's a transaction ID which is much longer in real life but

38
00:02:30,050 --> 00:02:31,980
and then there's some more information usually.

39
00:02:31,990 --> 00:02:37,840
But here you can see that there's the fees the fees that the miner will get for including each one of

40
00:02:37,840 --> 00:02:40,170
these transactions and fees.

41
00:02:40,230 --> 00:02:43,440
Well again that's another topic will cover further down the course.

42
00:02:43,630 --> 00:02:51,260
But for now we need to know that fees are non-compulsory and they're specified by the users themselves

43
00:02:51,270 --> 00:02:58,420
whoever sends the Bitcoins like for instance I send them because I can say I'm going to I'm going to

44
00:02:58,540 --> 00:02:59,750
send this I'm on.

45
00:02:59,780 --> 00:03:02,160
But and this is the fee I'm going to pay.

46
00:03:02,410 --> 00:03:06,890
And then say you it's absolutely arbitrary absolutely up to you can put a 0 if you can put a high if

47
00:03:06,910 --> 00:03:08,410
you can put any type of fee.

48
00:03:08,710 --> 00:03:16,000
But the miners they actually get these fees so if the miners are successful in creating this block then

49
00:03:16,210 --> 00:03:20,010
he's going to get the fees that are attached.

50
00:03:20,020 --> 00:03:25,240
So he's obviously going to pick the highest fees so this one is you can see it's the highest part of

51
00:03:25,240 --> 00:03:28,220
all of them than this one.

52
00:03:29,080 --> 00:03:31,750
This one this one and this one.

53
00:03:31,750 --> 00:03:32,350
So there you go.

54
00:03:32,350 --> 00:03:32,800
There we go.

55
00:03:32,800 --> 00:03:34,360
Those are the five to actually the highest fees.

56
00:03:34,370 --> 00:03:39,390
That's the first choice or the minor like all else all other things equal which they are.

57
00:03:39,550 --> 00:03:42,680
Why would the miners use anything else if you can change five transactions.

58
00:03:42,730 --> 00:03:45,900
So you're going to put them in said look OK.

59
00:03:46,020 --> 00:03:49,450
And so that's how these two are where the subjects and the cover.

60
00:03:49,530 --> 00:03:55,320
And now as promised previously we're going to return to our Non's problem.

61
00:03:55,450 --> 00:04:02,480
Our non-SS challenge which we or issue which we identified in the previous to Turo.

62
00:04:02,490 --> 00:04:07,000
Let's let's have a quick reminder of what that challenge was.

63
00:04:07,050 --> 00:04:12,040
So we established that the nonces a number between 0 and 4 billion.

64
00:04:12,060 --> 00:04:16,510
It's an integer and that's the range where we can pick the nods from.

65
00:04:16,680 --> 00:04:23,880
And so we have a times then we identify in the first term then we also have a timestamp in our block.

66
00:04:24,140 --> 00:04:31,530
And so now if we're going to set off the timer and if in one second the minor doesn't get to the end

67
00:04:31,530 --> 00:04:36,780
of the non-SS then everything is great everything is totally fine because he's gone through a lot of

68
00:04:36,780 --> 00:04:39,220
different numbers.

69
00:04:39,240 --> 00:04:45,240
A lot of different integers have all generated their own hashes and he's checked them you know probably

70
00:04:45,240 --> 00:04:52,070
he's most likely not found a a valid hash that would make this block valid.

71
00:04:52,070 --> 00:04:53,550
He hasn't found the goal.

72
00:04:53,570 --> 00:04:56,850
A golden loans and therefore one second has passed.

73
00:04:56,850 --> 00:05:03,190
What happens next is the time stamp gets updated by one second and he can go through these dances again.

74
00:05:03,300 --> 00:05:03,510
Right.

75
00:05:03,570 --> 00:05:08,400
So let's see how he does that goes again bam another second and again.

76
00:05:08,580 --> 00:05:14,900
So basically that's the reusability of the loans because of the time stamps.

77
00:05:15,210 --> 00:05:20,530
Simply because the minor is not fast enough to go through four billion nonces within one second.

78
00:05:20,790 --> 00:05:23,040
And that's that's a that's a good up.

79
00:05:23,130 --> 00:05:29,340
If you're one minor but if you're a pool of minors or if you are a minor who's got a lot of processing

80
00:05:29,340 --> 00:05:35,850
power that you can go through so much more than four billion hashes in one second.

81
00:05:35,850 --> 00:05:36,460
Right.

82
00:05:36,510 --> 00:05:45,300
So as we saw previously the total hashing rate a total hash rate of the natural combined right now is

83
00:05:45,300 --> 00:05:50,540
22 million trillion hashes per second million trillion.

84
00:05:50,730 --> 00:05:52,590
You know and this is only 4 billion.

85
00:05:52,590 --> 00:05:57,780
So they're definitely going to go through and you know obviously that's a whole network so a pool that

86
00:05:57,780 --> 00:06:01,400
says let's say has 10 percent of the network would be 2 million.

87
00:06:01,560 --> 00:06:03,700
Still that is way more than 4 billion.

88
00:06:03,930 --> 00:06:09,030
And so they would go through the nose like it's like nothing like very quickly no time.

89
00:06:09,030 --> 00:06:16,860
And so the challenge or the issue that we identified how what architecture in the network allows such

90
00:06:16,860 --> 00:06:20,060
big players to not have idle capacity.

91
00:06:20,070 --> 00:06:23,700
Right because if if they go through the non-SS.

92
00:06:23,730 --> 00:06:25,330
Right so let's have a look at an example right.

93
00:06:25,340 --> 00:06:32,910
So let's say they're extremely fast and bam they went through the non-SS whole thing in less than a

94
00:06:32,910 --> 00:06:35,300
second like that.

95
00:06:35,850 --> 00:06:37,010
So what do they do now.

96
00:06:37,050 --> 00:06:46,560
They still have they still out and are much like more than half a second left of time or like 0.7 or

97
00:06:46,560 --> 00:06:50,790
0.6 of a second six tenths of a second left.

98
00:06:50,910 --> 00:06:53,030
What are they going to do with this capacity.

99
00:06:53,040 --> 00:06:56,140
Do they really have to wait until this number of dates.

100
00:06:56,280 --> 00:07:01,820
Because there's no point of them going through the non-SS again if they go through the notes again.

101
00:07:01,830 --> 00:07:08,640
What happens is we're remember because nothing else has changed in this block because of that we know

102
00:07:08,640 --> 00:07:17,820
that the shot 256 Hadash or for that matter any hash has this cryptographic property that it is deterministic

103
00:07:18,120 --> 00:07:22,080
that you put in and if you put it this way if you have the same inputs you will always get the same

104
00:07:22,080 --> 00:07:25,730
outputs and there's no point in going through this again.

105
00:07:25,920 --> 00:07:36,510
Well the solution or the architectural design from this slide will be that that begs the question what

106
00:07:36,630 --> 00:07:37,640
can we do.

107
00:07:37,650 --> 00:07:47,170
What is architectural build solution in the protocol of bitcoin that allows us to overcome the challenge

108
00:07:47,580 --> 00:07:51,610
and for even minors we have a lot of power to participate.

109
00:07:51,720 --> 00:07:53,190
Are mining pools to work properly.

110
00:07:53,370 --> 00:07:59,830
So the solution from this slide we kind of started with this solution.

111
00:07:59,970 --> 00:08:05,530
So the solution is to change the block configuration because remember at the very start of this Toral

112
00:08:05,760 --> 00:08:08,880
we were picking the transactions based on the highest fees.

113
00:08:08,880 --> 00:08:15,180
So we put the transactions in here the miner gets to choose the transactions they put and they put the

114
00:08:15,180 --> 00:08:15,820
highest fees.

115
00:08:15,870 --> 00:08:19,500
But if you put the high transactions with the highest fees and you went through the whole Montse in

116
00:08:19,500 --> 00:08:26,530
less than a second and you haven't found that yet valid a valid hash.

117
00:08:26,760 --> 00:08:28,360
Then what.

118
00:08:28,380 --> 00:08:33,230
What else have you got to do but to change the configuration of the block.

119
00:08:33,360 --> 00:08:35,010
That's exactly what the miner will do.

120
00:08:35,010 --> 00:08:36,920
So let's have a look at that.

121
00:08:36,930 --> 00:08:41,730
So the mirror will say let's look at the transaction of the lowest fee out of the ones I've picked which

122
00:08:41,730 --> 00:08:43,260
is the one that has the lowest fee.

123
00:08:43,290 --> 00:08:48,860
This one it's only 0.0 as are zero for less than that all other transactions and the ones that are fake.

124
00:08:48,850 --> 00:08:51,510
So I'm going to take it out of my choice.

125
00:08:51,510 --> 00:08:57,090
I'm going to remove it and now I'm going to pick the next transaction with the next highest fee which

126
00:08:57,090 --> 00:09:01,430
is this one and I'm going to put it into my blog configuration.

127
00:09:01,440 --> 00:09:01,890
There we go.

128
00:09:01,900 --> 00:09:07,920
And so now because a bloke I figure she has changed the data inside the block has changed and we noticed

129
00:09:07,920 --> 00:09:11,640
that the time stamp hasn't changed but the data has changed in said look.

130
00:09:11,640 --> 00:09:14,100
And so the the.

131
00:09:14,280 --> 00:09:21,940
So that means that we can now reuse the high reaches the lawns and every single month's number.

132
00:09:22,030 --> 00:09:25,640
Overall this will be different and therefore will have a different hash.

133
00:09:26,070 --> 00:09:26,460
Right.

134
00:09:26,490 --> 00:09:27,990
So there we go.

135
00:09:27,990 --> 00:09:31,280
Now we can just watch this whole thing again.

136
00:09:31,520 --> 00:09:38,490
Bam as you can see he the miner again went through the whole lawns and again the whole time here.

137
00:09:38,670 --> 00:09:41,090
We look at the total time is this in a second.

138
00:09:41,220 --> 00:09:43,610
And again he still hasn't found the cash.

139
00:09:43,620 --> 00:09:44,570
So what happens now.

140
00:09:44,580 --> 00:09:46,980
Same thing change what configuration.

141
00:09:46,980 --> 00:09:50,290
All right let's identify transaction of the lowest fees.

142
00:09:50,430 --> 00:09:56,730
This one which we just included like throw it away and find the one with the next highest fees.

143
00:09:56,760 --> 00:09:57,980
OK this one.

144
00:09:57,980 --> 00:09:58,510
All right.

145
00:09:58,530 --> 00:09:59,030
Good.

146
00:09:59,130 --> 00:10:01,700
Put it in put it into the block.

147
00:10:01,710 --> 00:10:02,700
Wonderful.

148
00:10:02,700 --> 00:10:06,640
And now the minor of goes off again.

149
00:10:07,080 --> 00:10:10,300
And as you can see now is now we've reached one second.

150
00:10:10,320 --> 00:10:11,390
All of that.

151
00:10:11,520 --> 00:10:16,050
Well we've been talking for like five minutes and all of that was actually one second in the world of

152
00:10:16,050 --> 00:10:22,590
mining and the miner hasn't finished this non-SS wasn't able to even finish his dance again.

153
00:10:22,600 --> 00:10:23,560
Hasn't found the cash.

154
00:10:23,700 --> 00:10:25,460
But now what happens.

155
00:10:25,500 --> 00:10:33,360
Finally a relief the second time stamp gets updated to announce a new a new second and that means everything

156
00:10:33,360 --> 00:10:38,390
here has changed and that means we can start all over again.

157
00:10:38,430 --> 00:10:40,200
And what does that mean.

158
00:10:40,250 --> 00:10:43,340
Means this timer gets reset.

159
00:10:43,420 --> 00:10:47,440
Can you start from zero and as well.

160
00:10:47,460 --> 00:10:53,970
Let's not forget we can now get rid of this transaction of this fee and put in that high value transaction

161
00:10:53,980 --> 00:10:55,230
again back in.

162
00:10:55,280 --> 00:10:55,840
OK.

163
00:10:55,860 --> 00:10:57,390
And there we go.

164
00:10:57,400 --> 00:11:01,580
There's our new transaction back in the block and there we go.

165
00:11:01,580 --> 00:11:06,600
So basically now we're starting the whole thing afresh.

166
00:11:06,960 --> 00:11:16,020
So that's how Minder's big transactions and that's how mining pools or large miners there's just any

167
00:11:16,020 --> 00:11:18,820
minor saw algorithmically solves the problem.

168
00:11:18,840 --> 00:11:20,800
So they Bourne's those here.

169
00:11:20,800 --> 00:11:26,100
Number one is all of this happens algorithmically all of the minor doesn't sit there because transaction

170
00:11:26,100 --> 00:11:30,870
out would be impossible because you only have one second for that to happen and you're doing like two

171
00:11:30,900 --> 00:11:35,260
or the pool is doing like two trillion million trillion transactions.

172
00:11:35,280 --> 00:11:41,090
So all of this is encoded in the algorithms that govern how people are mining.

173
00:11:41,340 --> 00:11:43,980
And that's that's part of the service.

174
00:11:43,980 --> 00:11:50,970
So like if it's let's say if it's an independent minor that is not part of a pool then for some reason

175
00:11:50,970 --> 00:11:56,610
doing it or like somebody with a very powerful computer then that's they need to come up with that algorithm.

176
00:11:56,970 --> 00:12:01,920
Is if you join a pool then that's part of the service that the pool provides.

177
00:12:01,920 --> 00:12:09,290
So when you redirect your hashing power into a pool you don't need to think about this.

178
00:12:09,300 --> 00:12:14,610
Remember this is one of the things we talked about the advantages of a pool that they get rid of the

179
00:12:14,610 --> 00:12:18,170
headache the miners don't you know they take away the headache from the miners.

180
00:12:18,210 --> 00:12:22,090
So you'd lose your day you're bound to minute pool.

181
00:12:22,260 --> 00:12:26,740
They will allocate you the right transactions that you need to be working.

182
00:12:26,750 --> 00:12:33,540
And so a pool knows that they have a cup of water I don't know thousand ten thousands hundred thousand

183
00:12:33,540 --> 00:12:35,350
miners in there and they know that.

184
00:12:35,370 --> 00:12:35,800
OK.

185
00:12:35,940 --> 00:12:39,410
The algorithm already knows how to allocate the transaction there.

186
00:12:39,420 --> 00:12:45,830
And remember there's not only like whatever we have here five 11 transactions in the whole pool.

187
00:12:46,030 --> 00:12:52,140
Is usually like 7000 transactions so they know the algorithm automatically combines the transactions

188
00:12:52,140 --> 00:12:55,530
in the best possible way in order to get the maximize the fees.

189
00:12:55,530 --> 00:13:00,340
But also in order for the miners not to duplicate their work for different miners in the pool or to

190
00:13:00,330 --> 00:13:02,630
do good work it's a very smart algorithm.

191
00:13:02,850 --> 00:13:08,550
And so it allocates the work to the miners it allocates the transaction fees allocates the nuances and

192
00:13:08,550 --> 00:13:09,100
so on.

193
00:13:09,360 --> 00:13:14,730
And the miners then just like the churn away and churn away turn away and eventually somebody finds

194
00:13:14,730 --> 00:13:19,640
that golden lawns or the finds of Allagash.

195
00:13:20,010 --> 00:13:22,460
And so that's point number two.

196
00:13:22,460 --> 00:13:26,100
And point number three is as you can see from here and this is something we'll be talking about further

197
00:13:26,110 --> 00:13:33,240
and of course if you specify very low seeing your transaction like a zero something it is likely to

198
00:13:33,240 --> 00:13:36,780
get stuck in the pool like no miner will ever use it.

199
00:13:36,780 --> 00:13:43,170
Maybe by accident sometime not X and like through this process of distribution by the algorithm it might

200
00:13:43,170 --> 00:13:49,120
use utilization might need to like switch over but because it has such a variety it has like 7000 transaction

201
00:13:49,120 --> 00:13:49,970
to choose from.

202
00:13:50,040 --> 00:13:55,050
They usually start like you know from the high seas they have like a threshold they don't even look

203
00:13:55,050 --> 00:13:59,000
at transactions below a certain threshold for their allocation.

204
00:13:59,000 --> 00:14:03,300
And then what happens is your action will be released back to you.

205
00:14:03,340 --> 00:14:09,430
I think the new standard right now is within 72 hours if it's not picked up by any minor then it'll

206
00:14:09,450 --> 00:14:10,430
be released back to you.

207
00:14:10,440 --> 00:14:18,570
So it's also like your wallet will usually help you identify what the current fees average current average

208
00:14:18,570 --> 00:14:23,690
fees are and what you need to import in order for a transaction not to get stuck in them.

209
00:14:23,700 --> 00:14:25,840
So that's just another thing to know.

210
00:14:26,130 --> 00:14:26,360
OK.

211
00:14:26,370 --> 00:14:29,570
So that's how this is big transactions.

212
00:14:29,580 --> 00:14:34,010
Now we know there's actually a couple of things that change in the blog.

213
00:14:34,020 --> 00:14:39,250
So the timestamp changes the non-SS is something we can control and the actual fees.

214
00:14:39,250 --> 00:14:46,330
Finally we've uncovered the really how we can control the fees that transactions how we can control

215
00:14:46,330 --> 00:14:52,910
the transactions inside the block in order to all of these things influence a hash.

216
00:14:53,200 --> 00:14:53,660
OK.

217
00:14:53,740 --> 00:14:55,500
And so that's that.

218
00:14:55,510 --> 00:14:57,340
Let's have a look at some charts again.
