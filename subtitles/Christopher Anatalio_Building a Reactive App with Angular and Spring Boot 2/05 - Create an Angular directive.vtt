WEBVTT
1
00:00:00.050 --> 00:00:02.080
- [Instructor] Let's create a Angular directive

2
00:00:02.080 --> 00:00:06.050
to show a list of available rooms.

3
00:00:06.050 --> 00:00:08.090
Let's open up IntelliJ,

4
00:00:08.090 --> 00:00:12.090
navigate to app.component.html.

5
00:00:12.090 --> 00:00:15.080
Let's go line 39

6
00:00:15.080 --> 00:00:19.010
and add in a new h1 element.

7
00:00:19.010 --> 00:00:26.070
The content for this header will be Available Rooms.

8
00:00:26.070 --> 00:00:30.020
Now, let's create a div element.

9
00:00:30.020 --> 00:00:33.090
Let's add the class, row.

10
00:00:33.090 --> 00:00:39.030
And then nested in that div, let's create another div

11
00:00:39.030 --> 00:00:45.030
and add the class, col-12.

12
00:00:45.030 --> 00:00:50.070
These classes are part of the row and column layout system.

13
00:00:50.070 --> 00:00:55.050
Rows are ways to vertically organize your content

14
00:00:55.050 --> 00:00:59.080
and columns are ways to horizontally arrange your content.

15
00:00:59.080 --> 00:01:05.070
A row has 12 columns, so column 12 will be a full row.

16
00:01:05.070 --> 00:01:13.070
Let's nest one more div and add the class, table-responsive.

17
00:01:13.070 --> 00:01:20.080
This div is meant to contain a responsive table element.

18
00:01:20.080 --> 00:01:24.000
Now, let's create a table element

19
00:01:24.000 --> 00:01:29.050
and let's add the class, table,

20
00:01:29.050 --> 00:01:32.070
and the id, roomsTable.

21
00:01:32.070 --> 00:01:38.080
Within the table, let's nest a tbody element.

22
00:01:38.080 --> 00:01:43.000
This element is meant to contain the body of the table.

23
00:01:43.000 --> 00:01:48.010
Now, let's create a tr element, which is a table row,

24
00:01:48.010 --> 00:01:52.000
and then let's create a td element, which is a data cell

25
00:01:52.000 --> 00:01:54.090
within a table row.

26
00:01:54.090 --> 00:01:58.070
In the first td, let's create an image element

27
00:01:58.070 --> 00:02:10.030
and let's set the src to assets/images/intro_room.jpg.

28
00:02:10.030 --> 00:02:14.050
Now, let's create another td element

29
00:02:14.050 --> 00:02:18.080
and let's create a strong block for emphasis

30
00:02:18.080 --> 00:02:22.050
with the text Room Number.

31
00:02:22.050 --> 00:02:28.040
Then let's create another strong block with the text Price.

32
00:02:28.040 --> 00:02:34.010
Now, let's start adding in some dynamic Angular code.

33
00:02:34.010 --> 00:02:40.040
On our outermost div element, let's use a ngIf directive.

34
00:02:40.040 --> 00:02:45.000
A ngIf directive is a structural directive.

35
00:02:45.000 --> 00:02:49.040
If rooms is present, then this element will be shown.

36
00:02:49.040 --> 00:02:53.010
Otherwise, it will not be shown.

37
00:02:53.010 --> 00:02:59.030
Now, let's go to the tr element nested in the tbody element.

38
00:02:59.030 --> 00:03:02.060
Let's add in a ngFor directive.

39
00:03:02.060 --> 00:03:06.030
A ngFor directive renders the template

40
00:03:06.030 --> 00:03:08.080
for each item in a collection.

41
00:03:08.080 --> 00:03:11.020
So basically, you iterate through all the items

42
00:03:11.020 --> 00:03:15.020
in the collection and you create elements for each one.

43
00:03:15.020 --> 00:03:20.070
Type in, let room of rooms.

44
00:03:20.070 --> 00:03:24.030
So basically, this ngFor directive

45
00:03:24.030 --> 00:03:28.020
will create one of these rows for each element

46
00:03:28.020 --> 00:03:37.030
in the rooms collection.

47
00:03:37.030 --> 00:03:40.020
For each of room of the rooms collection,

48
00:03:40.020 --> 00:03:44.030
we are going to enter in the room number here in the page.

49
00:03:44.030 --> 00:03:49.020
And then on the next line, we're going to display the price.

50
00:03:49.020 --> 00:03:51.090
This rooms collection will be defined

51
00:03:51.090 --> 00:03:55.020
in our app.components.ts file.

52
00:03:55.020 --> 00:03:57.070
Let's open up our typescript file

53
00:03:57.070 --> 00:04:01.060
and let's define a class to represent the room.

54
00:04:01.060 --> 00:04:04.060
Let's type in export class

55
00:04:04.060 --> 00:04:06.070
Room

56
00:04:06.070 --> 00:04:11.090
and let's add three fields, id, roomNumber, and price.

57
00:04:11.090 --> 00:04:15.060
Each of these fields will be a string.

58
00:04:15.060 --> 00:04:18.020
Now, let's create a constructor that takes in

59
00:04:18.020 --> 00:04:30.020
all three fields.

60
00:04:30.020 --> 00:04:35.020
Now, let's set the id of the class to the passed-in id

61
00:04:35.020 --> 00:04:45.010
and do the same for roomNumber and price.

62
00:04:45.010 --> 00:04:48.090
Now, let's define a collection of rooms.

63
00:04:48.090 --> 00:04:51.020
Let's name the variable rooms

64
00:04:51.020 --> 00:04:54.070
and set it equal to an array of rooms.

65
00:04:54.070 --> 00:04:58.030
Now, let's create a ngOnInit block.

66
00:04:58.030 --> 00:05:02.020
This block will be triggered on load of the page.

67
00:05:02.020 --> 00:05:08.050
Let's initialize the value of rooms on page load.

68
00:05:08.050 --> 00:05:12.070
Let's set the value of rooms to a hard-coded list of rooms

69
00:05:12.070 --> 00:05:14.070
that we define here.

70
00:05:14.070 --> 00:05:18.030
Let's instantiate a new instance of Room,

71
00:05:18.030 --> 00:05:21.060
passing in the values

72
00:05:21.060 --> 00:05:23.060
id 127,

73
00:05:23.060 --> 00:05:26.050
room number 127,

74
00:05:26.050 --> 00:05:31.020
and price 150.

75
00:05:31.020 --> 00:05:33.050
Let's copy that new Room statement

76
00:05:33.050 --> 00:05:37.090
and add it in two more times.

77
00:05:37.090 --> 00:05:42.030
For the second room, let's make it 138

78
00:05:42.030 --> 00:05:47.000
and this is a bit fancier, so let's set the price at 180.

79
00:05:47.000 --> 00:05:51.060
And let's go 254 for the third room

80
00:05:51.060 --> 00:05:54.090
and this room will cost 200.

81
00:05:54.090 --> 00:05:58.040
Let's go ahead and save.

82
00:05:58.040 --> 00:06:01.080
So this list of rooms

83
00:06:01.080 --> 00:06:05.030
will be used in this directive

84
00:06:05.030 --> 00:06:11.060
to populate three rows of data, one for each room.

85
00:06:11.060 --> 00:06:13.030
Let's go ahead and save,

86
00:06:13.030 --> 00:06:16.010
right-click on the root directory,

87
00:06:16.010 --> 00:06:21.000
synchronize to refresh, open up a terminal,

88
00:06:21.000 --> 00:06:28.050
make sure we're in the right location, and execute ng serve.

89
00:06:28.050 --> 00:06:34.010
Let's open up a browser and head to localhost at 4200.

90
00:06:34.010 --> 00:06:37.000
Now, we can see that we are displaying a room

91
00:06:37.000 --> 00:06:39.070
for each item in that collection.

92
00:06:39.070 --> 00:06:45.080
Let's head back to IntelliJ, open up app.component.html,

93
00:06:45.080 --> 00:06:50.040
and add a line break at line 52.

94
00:06:50.040 --> 00:06:54.020
Angular should automatically recompile your code.

95
00:06:54.020 --> 00:06:57.000
So now, the room number and price is displayed

96
00:06:57.000 --> 00:06:58.050
with a line break.

97
00:06:58.050 --> 00:07:01.040
So we've successfully created an Angular directive

98
00:07:01.040 --> 00:07:04.000
to display a list of rooms.

