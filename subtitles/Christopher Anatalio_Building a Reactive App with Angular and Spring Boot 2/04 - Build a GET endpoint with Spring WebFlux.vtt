WEBVTT
1
00:00:00.060 --> 00:00:01.070
- [Instructor] Moving forward,

2
00:00:01.070 --> 00:00:04.050
now we will create our WebFlux controller

3
00:00:04.050 --> 00:00:06.080
and build our first endpoint.

4
00:00:06.080 --> 00:00:11.050
We're going to add a GET endpoint to our controller.

5
00:00:11.050 --> 00:00:16.080
Let's right-click on the base package, go to New, Package.

6
00:00:16.080 --> 00:00:20.000
Let's name it "controller".

7
00:00:20.000 --> 00:00:22.010
Right-click on that package,

8
00:00:22.010 --> 00:00:25.030
go to New, and select Java Class.

9
00:00:25.030 --> 00:00:30.050
Let's name it "ReservationResource".

10
00:00:30.050 --> 00:00:34.050
Let's add in the @RestController annotation.

11
00:00:34.050 --> 00:00:38.040
The @RestController annotation is a convenient annotation

12
00:00:38.040 --> 00:00:40.070
that gives you the @Controller annotation

13
00:00:40.070 --> 00:00:43.060
and the @ResponseBody annotation.

14
00:00:43.060 --> 00:00:47.080
Now, let's add in a @RequestMapping annotation.

15
00:00:47.080 --> 00:00:50.090
This will allow us to create a base string

16
00:00:50.090 --> 00:00:53.000
that each endpoint can build upon

17
00:00:53.000 --> 00:00:57.020
so that we don't have to copy and paste the same content.

18
00:00:57.020 --> 00:01:02.090
Let's pass in the string "/room/v1/reservation/".

19
00:01:02.090 --> 00:01:06.010
Let's type in forward-slash, room,

20
00:01:06.010 --> 00:01:12.060
forward-slash, v1, forward-slash, reservation,

21
00:01:12.060 --> 00:01:16.010
and then a trailing forward-slash.

22
00:01:16.010 --> 00:01:19.090
Let's left-click and select that string

23
00:01:19.090 --> 00:01:24.050
and then right-click, go down to Refactor,

24
00:01:24.050 --> 00:01:30.050
Extract, and then let's extract it to a constant.

25
00:01:30.050 --> 00:01:33.030
And go ahead and press Enter,

26
00:01:33.030 --> 00:01:37.070
and let's close the project window for visibility,

27
00:01:37.070 --> 00:01:40.080
and now we have that constant string available

28
00:01:40.080 --> 00:01:43.070
for use where we need it.

29
00:01:43.070 --> 00:01:49.090
Finally, let's add in a @CrossOrigin annotation.

30
00:01:49.090 --> 00:01:53.070
This annotation is necessary because our Angular app

31
00:01:53.070 --> 00:01:57.060
and our Spring application run on different ports,

32
00:01:57.060 --> 00:02:00.080
even if they both run on localhost.

33
00:02:00.080 --> 00:02:04.020
So technically, they are different origins.

34
00:02:04.020 --> 00:02:07.090
This @CrossOrigin annotation will help you run

35
00:02:07.090 --> 00:02:12.020
your Angular app and your Spring app together locally,

36
00:02:12.020 --> 00:02:13.030
however, be careful,

37
00:02:13.030 --> 00:02:18.070
this can be a potential security issue in production.

38
00:02:18.070 --> 00:02:24.000
Now let's create a method to get a reservation by Id.

39
00:02:24.000 --> 00:02:26.090
Let's create a public method

40
00:02:26.090 --> 00:02:32.030
that returns a Mono that admits a Reservation.

41
00:02:32.030 --> 00:02:37.040
Let's use Alt + Enter to import the Mono class.

42
00:02:37.040 --> 00:02:43.090
Then let's name the method getReservationById.

43
00:02:43.090 --> 00:02:48.090
Let's add on a @GetMapping annotation.

44
00:02:48.090 --> 00:02:52.070
Let's pass in a path parameter

45
00:02:52.070 --> 00:02:56.000
and set it equal to the string "roomId".

46
00:02:56.000 --> 00:03:00.010
Let's surround the string "roomId" with curly braces

47
00:03:00.010 --> 00:03:03.090
to indicate it's a path parameter.

48
00:03:03.090 --> 00:03:07.020
Now let's pass in the parameter produces,

49
00:03:07.020 --> 00:03:09.050
and set it equal to the constant

50
00:03:09.050 --> 00:03:17.000
MediaType.APPLICATION_JSON_UTF8 value.

51
00:03:17.000 --> 00:03:21.010
This indicates that this endpoint will return a JSON

52
00:03:21.010 --> 00:03:26.000
using the character set UTF-8.

53
00:03:26.000 --> 00:03:30.030
Now let's add a parameter to the method signature.

54
00:03:30.030 --> 00:03:36.040
Let's add a string named "roomId".

55
00:03:36.040 --> 00:03:37.090
Let's annotate that string

56
00:03:37.090 --> 00:03:41.040
with the annotation @PathVariable.

57
00:03:41.040 --> 00:03:46.020
Because the variable name and the path parameter match,

58
00:03:46.020 --> 00:03:50.060
string will know to extract that path parameter

59
00:03:50.060 --> 00:03:55.040
to this variable.

60
00:03:55.040 --> 00:03:59.030
Normally this method would call a service implementation

61
00:03:59.030 --> 00:04:04.070
to get the reservation, however we haven't created that yet.

62
00:04:04.070 --> 00:04:08.050
So for now, let's return a empty JSON.

63
00:04:08.050 --> 00:04:15.020
Let's type in return Mono.just,

64
00:04:15.020 --> 00:04:21.020
and pass in a string containing a empty JSON,

65
00:04:21.020 --> 00:04:28.000
and let's temporarily change the return type to string.

66
00:04:28.000 --> 00:04:31.060
When we create the reservation service implementation,

67
00:04:31.060 --> 00:04:36.000
we could change the method to return a reservation object.

