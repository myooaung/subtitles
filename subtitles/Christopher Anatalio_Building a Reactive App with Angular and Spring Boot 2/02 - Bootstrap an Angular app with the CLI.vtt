WEBVTT
1
00:00:00.050 --> 00:00:02.050
- [Instructor] Now let's get started building

2
00:00:02.050 --> 00:00:06.010
our reactive web front end with Angular.

3
00:00:06.010 --> 00:00:09.040
We will be using the Angular CLI.

4
00:00:09.040 --> 00:00:13.070
The Angular CLI let's you stand up a full Angular app

5
00:00:13.070 --> 00:00:18.010
with the correct directory structure with a single command.

6
00:00:18.010 --> 00:00:22.060
Let's check out cli.angular.io.

7
00:00:22.060 --> 00:00:25.080
This is a intermediate level course, so we expect

8
00:00:25.080 --> 00:00:28.070
that you have npm already installed.

9
00:00:28.070 --> 00:00:32.010
You can install the Angular CLI by using

10
00:00:32.010 --> 00:00:38.000
the command npm install slaash g for global,

11
00:00:38.000 --> 00:00:44.080
then the package name at Angluar/cli.

12
00:00:44.080 --> 00:00:49.010
Now let's navigate the root project directory.

13
00:00:49.010 --> 00:00:54.000
Let's use the commands LS and PWD to print the current

14
00:00:54.000 --> 00:00:58.060
working directory to verify we are in the right place.

15
00:00:58.060 --> 00:01:06.030
Now, let's run the command ng new reservation-app.

16
00:01:06.030 --> 00:01:10.040
Let's type in y for yes for Angular routing

17
00:01:10.040 --> 00:01:13.030
and we are going to use just basic CSS

18
00:01:13.030 --> 00:01:19.020
without a CSS pre-processor in this case.

19
00:01:19.020 --> 00:01:21.040
While that is building, you can check out

20
00:01:21.040 --> 00:01:28.070
angular.io/cli/new to check out the Angular documentation.

21
00:01:28.070 --> 00:01:32.050
This generator will create our application files,

22
00:01:32.050 --> 00:01:35.020
download dependencies and set us up

23
00:01:35.020 --> 00:01:40.030
with a working app right off the shelf.

24
00:01:40.030 --> 00:01:42.070
Our app has been generated.

25
00:01:42.070 --> 00:01:46.060
Let's use the command LS to take a look at our directory

26
00:01:46.060 --> 00:01:50.010
and we can see that our application has been created.

27
00:01:50.010 --> 00:01:53.080
Depending on your version of npm and other factors

28
00:01:53.080 --> 00:01:57.090
you may see some security warnings.

29
00:01:57.090 --> 00:02:00.030
Before you go to production, you definitely want

30
00:02:00.030 --> 00:02:04.030
to take a look at any security vulnerabilities you have.

31
00:02:04.030 --> 00:02:07.050
You could use the command npm audit fix

32
00:02:07.050 --> 00:02:10.060
to automatically fix them.

33
00:02:10.060 --> 00:02:13.010
Now let's open up IntelliJ.

34
00:02:13.010 --> 00:02:17.040
We will be using IntelliJ to work with our Angular code.

35
00:02:17.040 --> 00:02:20.040
Some developers prefer visual studio code.

36
00:02:20.040 --> 00:02:24.060
It's up to you which IDE you want to use.

37
00:02:24.060 --> 00:02:27.040
Let's right click on the root directory

38
00:02:27.040 --> 00:02:31.020
and then scroll down to synchronize.

39
00:02:31.020 --> 00:02:34.010
This will refresh our project window.

40
00:02:34.010 --> 00:02:37.030
Let's open up the reservation app.

41
00:02:37.030 --> 00:02:40.030
We can see several configuration files

42
00:02:40.030 --> 00:02:45.030
in the root directory and if we open up the SRC folder

43
00:02:45.030 --> 00:02:52.060
then open up app, this is where our code will actually live.

44
00:02:52.060 --> 00:02:55.020
We have a type script component,

45
00:02:55.020 --> 00:02:59.080
a type script module, a spec unit test

46
00:02:59.080 --> 00:03:04.040
and then our html and CSS.

47
00:03:04.040 --> 00:03:07.050
Let's head back to a terminal and let's CD

48
00:03:07.050 --> 00:03:10.070
into the reservation app directory.

49
00:03:10.070 --> 00:03:13.050
Now let's try running the app.

50
00:03:13.050 --> 00:03:18.020
Execute the command ng serve to start up your web app.

51
00:03:18.020 --> 00:03:21.040
Let's give it a moment to start up

52
00:03:21.040 --> 00:03:23.010
and then let's open up a browser

53
00:03:23.010 --> 00:03:29.020
and navigate to localhost at port 4200.

54
00:03:29.020 --> 00:03:32.010
Great, so our app started up correctly.

55
00:03:32.010 --> 00:03:35.000
That's it, now we have a running Angular app.

