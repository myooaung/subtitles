WEBVTT
1
00:00:00.050 --> 00:00:02.020
- [Instructor] Let's get back to coding.

2
00:00:02.020 --> 00:00:06.060
Let's create a configuration file for our API.

3
00:00:06.060 --> 00:00:09.080
First let's right-click on the config package,

4
00:00:09.080 --> 00:00:15.040
go to new and select Java class.

5
00:00:15.040 --> 00:00:19.050
Let's name it ApiConfig.

6
00:00:19.050 --> 00:00:23.010
First let's add a configuration annotation.

7
00:00:23.010 --> 00:00:25.070
This indicates that it can be processed

8
00:00:25.070 --> 00:00:30.010
by the spring container to generate bean definitions.

9
00:00:30.010 --> 00:00:33.050
When using auto complete if you select the item you want

10
00:00:33.050 --> 00:00:36.010
from the drop down menu it will automatically

11
00:00:36.010 --> 00:00:38.010
import it for you.

12
00:00:38.010 --> 00:00:42.060
Now let's add in an enable WebFlux annotation.

13
00:00:42.060 --> 00:00:46.060
This will import the spring WebFlux configuration

14
00:00:46.060 --> 00:00:53.090
from WebFlux configuration support.

15
00:00:53.090 --> 00:00:56.050
Now let's add in two beans.

16
00:00:56.050 --> 00:00:59.010
The bean annotation indicates

17
00:00:59.010 --> 00:01:01.060
that its a dependency that can be managed

18
00:01:01.060 --> 00:01:03.080
by the spring container.

19
00:01:03.080 --> 00:01:06.050
Later on we can inject these dependencies

20
00:01:06.050 --> 00:01:11.060
into a service class for instance, when we need them.

21
00:01:11.060 --> 00:01:14.060
First let's create a object mapper bean.

22
00:01:14.060 --> 00:01:19.040
Let's find a method that returns the type object mapper

23
00:01:19.040 --> 00:01:22.010
and is named objectMapper.

24
00:01:22.010 --> 00:01:26.060
Let's type public, so that the method has public visibility.

25
00:01:26.060 --> 00:01:31.080
Set the return type to object mapper.

26
00:01:31.080 --> 00:01:36.090
Let's name the method objectMapper.

27
00:01:36.090 --> 00:01:41.000
Then let's use the keyboard shortcut alt plus enter

28
00:01:41.000 --> 00:01:44.090
to import the object mapper class.

29
00:01:44.090 --> 00:01:50.090
Now let's instantiate an instance of object mapper.

30
00:01:50.090 --> 00:01:55.090
Type in objectMapper

31
00:01:55.090 --> 00:01:59.060
is equal to new objectMapper,

32
00:01:59.060 --> 00:02:03.040
using the parameter list constructor.

33
00:02:03.040 --> 00:02:05.070
Now let's register a module.

34
00:02:05.070 --> 00:02:11.070
Let's type in objectMapper.registerModule

35
00:02:11.070 --> 00:02:16.060
and pass in a new instance of Java time module.

36
00:02:16.060 --> 00:02:19.030
Now let's configure the object mapper.

37
00:02:19.030 --> 00:02:24.080
Let's type in objectMapper.configure,

38
00:02:24.080 --> 00:02:28.020
let's pass in the deserialization feature,

39
00:02:28.020 --> 00:02:32.020
fail on unknown properties equal to false.

40
00:02:32.020 --> 00:02:35.080
This will allow us to model only the fields we need

41
00:02:35.080 --> 00:02:39.020
from a JSON.

42
00:02:39.020 --> 00:02:41.030
Now let's chain that method call

43
00:02:41.030 --> 00:02:44.060
to another call to the configure method.

44
00:02:44.060 --> 00:02:47.070
Let's pass in the serialization feature,

45
00:02:47.070 --> 00:02:51.040
write dates of time stamps equal to true.

46
00:02:51.040 --> 00:02:56.040
This will write date times in a human readable format.

47
00:02:56.040 --> 00:03:00.090
Let's close the project window for readability

48
00:03:00.090 --> 00:03:03.060
and finally add a semicolon.

49
00:03:03.060 --> 00:03:10.030
Now let's return the object mapper.

50
00:03:10.030 --> 00:03:16.040
Lastly, let's add a bean annotation.

51
00:03:16.040 --> 00:03:19.080
This object mapper allows us to serialize

52
00:03:19.080 --> 00:03:25.040
a Java object into a JSON string and vice versa.

53
00:03:25.040 --> 00:03:27.040
Now let's create an object writer

54
00:03:27.040 --> 00:03:32.080
that let's us print out a JSON in a human readable format.

55
00:03:32.080 --> 00:03:35.020
Let's create a public method

56
00:03:35.020 --> 00:03:41.090
that returns an object writer named objectWriter.

57
00:03:41.090 --> 00:03:44.080
The method will take in an object mapper bean

58
00:03:44.080 --> 00:03:48.060
as a parameter.

59
00:03:48.060 --> 00:03:52.060
Now let's use that object mapper bean

60
00:03:52.060 --> 00:03:58.000
and call the method writerWithDefaultPrettyPrinter.

61
00:03:58.000 --> 00:04:03.010
Then add a return statement and a bean annotation.

62
00:04:03.010 --> 00:04:03.090
And that's it.

63
00:04:03.090 --> 00:04:06.070
The API is now set to serialize

64
00:04:06.070 --> 00:04:10.000
and deserialize JSON responses.

