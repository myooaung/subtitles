WEBVTT
1
00:00:00.050 --> 00:00:02.050
- [Instructor] Okay, now let's create a model

2
00:00:02.050 --> 00:00:05.000
to represent a reservation.

3
00:00:05.000 --> 00:00:09.080
This model will define a reservation document in mongodb

4
00:00:09.080 --> 00:00:12.090
to represent a room reservation.

5
00:00:12.090 --> 00:00:16.040
Our object mapper for the Jackson framework will be able to

6
00:00:16.040 --> 00:00:21.040
convert a raw string JSON into the reservation object

7
00:00:21.040 --> 00:00:23.020
and vice versa.

8
00:00:23.020 --> 00:00:26.050
First off, let's right click on the base package.

9
00:00:26.050 --> 00:00:28.040
Go to New

10
00:00:28.040 --> 00:00:30.080
and select Package.

11
00:00:30.080 --> 00:00:35.050
Let's name it model.

12
00:00:35.050 --> 00:00:39.030
Now, right click on the model package, go to New

13
00:00:39.030 --> 00:00:42.090
and select Java Class.

14
00:00:42.090 --> 00:00:46.050
Let's name it Reservation.

15
00:00:46.050 --> 00:00:50.010
First, let's add a document annotation.

16
00:00:50.010 --> 00:00:54.070
This annotation will identify this class as a domain object

17
00:00:54.070 --> 00:00:58.000
to be persisted to mongodb.

18
00:00:58.000 --> 00:00:59.070
Now let's add in a couple of fields

19
00:00:59.070 --> 00:01:03.030
to represent the reservation, such as room number,

20
00:01:03.030 --> 00:01:07.070
check in date, check out date and price.

21
00:01:07.070 --> 00:01:12.030
Let's create a private class member of the type long

22
00:01:12.030 --> 00:01:14.070
and let's name it room number.

23
00:01:14.070 --> 00:01:18.000
This is a de-normalized data format.

24
00:01:18.000 --> 00:01:23.040
In a normalized SQL database, you may be storing a room id

25
00:01:23.040 --> 00:01:26.060
which you would use to join to the room table,

26
00:01:26.060 --> 00:01:29.040
however, for convenience, and since we are using

27
00:01:29.040 --> 00:01:32.060
a no SQL database, we are going to store data

28
00:01:32.060 --> 00:01:34.040
as we retrieve it.

29
00:01:34.040 --> 00:01:38.040
A more robust implementation may use a embedded document

30
00:01:38.040 --> 00:01:41.070
containing a room document.

31
00:01:41.070 --> 00:01:46.040
Next, let's create a local date object named check in.

32
00:01:46.040 --> 00:01:51.040
Let's type in private, local date,

33
00:01:51.040 --> 00:01:54.020
and check in.

34
00:01:54.020 --> 00:01:57.040
Now let's create a check out variable of the same title.

35
00:01:57.040 --> 00:02:05.030
Local date, private, local date, check out.

36
00:02:05.030 --> 00:02:10.040
Now, let's create a private integer named price.

37
00:02:10.040 --> 00:02:14.050
We are storing the price in whole dollars,

38
00:02:14.050 --> 00:02:16.010
if you want to store cents,

39
00:02:16.010 --> 00:02:20.020
you might use a type such as big decimal.

40
00:02:20.020 --> 00:02:25.060
Finally, let's define the primary key of the document.

41
00:02:25.060 --> 00:02:30.090
Let's create a private string and name it id.

42
00:02:30.090 --> 00:02:34.040
Then, let's add in an id annotation.

43
00:02:34.040 --> 00:02:41.040
This id will be an auto generated hash from mongodb.

44
00:02:41.040 --> 00:02:44.070
Now let's use a keyboard shortcut Command + N,

45
00:02:44.070 --> 00:02:49.000
or Control + N, depending on your keyboard setup.

46
00:02:49.000 --> 00:02:52.090
Let's auto generate a constructor, first let's create

47
00:02:52.090 --> 00:02:58.060
a parameter list constructor by selecting none.

48
00:02:58.060 --> 00:03:01.070
Let's use that Control + N keyboard shortcut again,

49
00:03:01.070 --> 00:03:06.010
and create another constructor, this constructor will

50
00:03:06.010 --> 00:03:13.040
accept room number, check in, check out and price.

51
00:03:13.040 --> 00:03:19.010
Let's close the project window for readability.

52
00:03:19.010 --> 00:03:22.080
And now let's auto generate getters and setters using

53
00:03:22.080 --> 00:03:25.060
that same keyboard shortcut.

54
00:03:25.060 --> 00:03:28.050
Go down to Getter and Setter.

55
00:03:28.050 --> 00:03:33.060
Hold down the shift key, and select all except id.

56
00:03:33.060 --> 00:03:37.070
Now, let's scroll down to the bottom, and create just

57
00:03:37.070 --> 00:03:40.070
a Getter for id.

58
00:03:40.070 --> 00:03:43.090
The id is auto generated so you really aren't going to want

59
00:03:43.090 --> 00:03:47.070
to set it manually.

60
00:03:47.070 --> 00:03:51.050
Now, let's configure the daytime format of our check in

61
00:03:51.050 --> 00:03:54.080
and check out local dates.

62
00:03:54.080 --> 00:03:59.040
Let's add in a daytime format annotation above check in,

63
00:03:59.040 --> 00:04:05.090
and let's pass in the iso format daytime format iso.date.

64
00:04:05.090 --> 00:04:12.000
So I put iso is equal to daytime format

65
00:04:12.000 --> 00:04:14.090
.ISO all caps

66
00:04:14.090 --> 00:04:21.040
.DATE all caps.

67
00:04:21.040 --> 00:04:27.030
Let's copy that line using Command + C and paste that

68
00:04:27.030 --> 00:04:31.020
annotation above checkout using Command + V.

69
00:04:31.020 --> 00:04:32.010
And there we go.

70
00:04:32.010 --> 00:04:35.000
Now we have a model to represent our reservation.

