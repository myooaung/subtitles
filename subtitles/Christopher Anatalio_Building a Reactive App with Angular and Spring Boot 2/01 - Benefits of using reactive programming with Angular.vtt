WEBVTT
1
00:00:00.050 --> 00:00:01.070
- [Instructor] Okay, let's take a look

2
00:00:01.070 --> 00:00:04.020
at why using Angular to build a full stack

3
00:00:04.020 --> 00:00:07.040
reactive application is a great idea.

4
00:00:07.040 --> 00:00:09.070
First off, let's take a quick step back

5
00:00:09.070 --> 00:00:13.050
and review what exactly reactive programming is.

6
00:00:13.050 --> 00:00:15.090
The reactive paradigm lets you build

7
00:00:15.090 --> 00:00:18.080
asynchronous non-blocking applications

8
00:00:18.080 --> 00:00:20.080
that can scale effectively.

9
00:00:20.080 --> 00:00:22.060
They let you squeeze more performance

10
00:00:22.060 --> 00:00:25.020
out of your existing infrastructure.

11
00:00:25.020 --> 00:00:26.080
Reactive programming works

12
00:00:26.080 --> 00:00:29.080
with asynchronous streams of data.

13
00:00:29.080 --> 00:00:33.020
Now, let's take a look at a reactive stream in action.

14
00:00:33.020 --> 00:00:37.030
A reactive data stream will emit values over time.

15
00:00:37.030 --> 00:00:40.010
In this example, we can see a stream

16
00:00:40.010 --> 00:00:43.040
emitting integer data as time progresses.

17
00:00:43.040 --> 00:00:46.090
A stream can emit an error or a completion signal

18
00:00:46.090 --> 00:00:49.040
after it completes.

19
00:00:49.040 --> 00:00:52.040
Angular is a mature web and mobile framework

20
00:00:52.040 --> 00:00:56.000
that can be used with JavaScript or TypeScript.

21
00:00:56.000 --> 00:00:58.060
It's cross-platform, very performant,

22
00:00:58.060 --> 00:01:02.070
and it's well-supported by its active development team.

23
00:01:02.070 --> 00:01:04.080
Angular has a high degree of adoption

24
00:01:04.080 --> 00:01:06.090
among the development community,

25
00:01:06.090 --> 00:01:10.030
and tooling is very mature as well.

26
00:01:10.030 --> 00:01:12.090
Okay, let's review some of the major benefits

27
00:01:12.090 --> 00:01:15.060
of using the Angular framework.

28
00:01:15.060 --> 00:01:18.090
Angular lets you build responsive, modern web apps

29
00:01:18.090 --> 00:01:21.010
across web and mobile, and allows you

30
00:01:21.010 --> 00:01:24.010
to target multiple viewports.

31
00:01:24.010 --> 00:01:26.040
The Angular command line interface

32
00:01:26.040 --> 00:01:29.000
helps you quickly bootstrap an Angular app

33
00:01:29.000 --> 00:01:31.030
that follows best practices.

34
00:01:31.030 --> 00:01:34.010
It also helps you out with common workflows

35
00:01:34.010 --> 00:01:36.030
such as setting config values

36
00:01:36.030 --> 00:01:40.080
or adding an external library that you need to your project.

37
00:01:40.080 --> 00:01:42.050
The docs are really good too,

38
00:01:42.050 --> 00:01:44.090
and really well-maintained.

39
00:01:44.090 --> 00:01:50.020
The docs are located at angular.io/docs.

40
00:01:50.020 --> 00:01:53.050
The developer community is quite active as well.

41
00:01:53.050 --> 00:01:58.070
We can find a project at github.com/angular/angular.

42
00:01:58.070 --> 00:02:00.080
You can tell how active the project is

43
00:02:00.080 --> 00:02:04.040
because the last commit was a day ago.

44
00:02:04.040 --> 00:02:07.010
Angular is very scalable, with big data sets.

45
00:02:07.010 --> 00:02:10.020
It allows you to work with RxJS

46
00:02:10.020 --> 00:02:12.090
or other reactive frameworks.

47
00:02:12.090 --> 00:02:14.070
This helps you streamline the process

48
00:02:14.070 --> 00:02:18.060
of writing async or callback-based code.

49
00:02:18.060 --> 00:02:21.070
The RxJS library is a JavaScript-specific

50
00:02:21.070 --> 00:02:26.010
implementation of the reactive framework ReactiveX.

51
00:02:26.010 --> 00:02:30.060
One of the core concepts in ReactiveX is an observable.

52
00:02:30.060 --> 00:02:33.030
An observable is a collection of values

53
00:02:33.030 --> 00:02:35.070
that can lazily push a notification

54
00:02:35.070 --> 00:02:39.000
when its internal state changes.

55
00:02:39.000 --> 00:02:41.070
A subject is a specific implementation

56
00:02:41.070 --> 00:02:44.050
of an observable that can multitask

57
00:02:44.050 --> 00:02:48.000
to multiple subscribed observers.

58
00:02:48.000 --> 00:02:52.010
An observer is another core concept in ReactiveX.

59
00:02:52.010 --> 00:02:55.010
It implements an interface that allows it

60
00:02:55.010 --> 00:02:59.090
to consume push notifications in a consistent manner.

61
00:02:59.090 --> 00:03:04.030
Let's take a look at the RxJS observer pattern in action.

62
00:03:04.030 --> 00:03:06.090
We have a subject, which is a flavor

63
00:03:06.090 --> 00:03:08.090
of an observable if you recall,

64
00:03:08.090 --> 00:03:12.050
and then we also have three observers.

65
00:03:12.050 --> 00:03:14.060
The first step is each observer

66
00:03:14.060 --> 00:03:17.050
will subscribe to the subject.

67
00:03:17.050 --> 00:03:20.050
Then, when a event occurs that changes

68
00:03:20.050 --> 00:03:22.090
the internal state of the subject,

69
00:03:22.090 --> 00:03:25.080
this will cause the subject to notify

70
00:03:25.080 --> 00:03:29.000
all the subscribed observers of the change.

