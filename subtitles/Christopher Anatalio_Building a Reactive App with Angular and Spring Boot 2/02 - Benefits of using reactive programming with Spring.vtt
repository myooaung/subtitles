WEBVTT
1
00:00:00.050 --> 00:00:02.000
- [Instructor] Let's check out why using

2
00:00:02.000 --> 00:00:04.050
Reactive Spring Boot is a great fit

3
00:00:04.050 --> 00:00:08.010
for a full stack Reactive application.

4
00:00:08.010 --> 00:00:11.070
Spring 5 is the newest version of Spring.

5
00:00:11.070 --> 00:00:15.010
Spring helps you implement best practice design patterns

6
00:00:15.010 --> 00:00:18.000
such as dependency injection.

7
00:00:18.000 --> 00:00:20.040
It leverages an industry standard

8
00:00:20.040 --> 00:00:25.040
Reactive Streams implementation called Project Reactor.

9
00:00:25.040 --> 00:00:29.040
Spring WebFlux allows you to expose fully non blocking

10
00:00:29.040 --> 00:00:32.090
reactive endpoints in your rest API.

11
00:00:32.090 --> 00:00:37.050
By default, Spring 5 uses Netty as its web server.

12
00:00:37.050 --> 00:00:40.090
Netty is a async high performance event-driven

13
00:00:40.090 --> 00:00:43.050
network application framework.

14
00:00:43.050 --> 00:00:46.010
It uses an event loop architecture

15
00:00:46.010 --> 00:00:50.020
to handle incoming requests in a non blocking manner.

16
00:00:50.020 --> 00:00:53.030
This event loops hands off an incoming request

17
00:00:53.030 --> 00:00:55.070
to the Spring Web API.

18
00:00:55.070 --> 00:00:57.060
Each component in the chain

19
00:00:57.060 --> 00:01:01.000
uses a Spring reactive publisher such as a mono

20
00:01:01.000 --> 00:01:03.010
to pass messages.

21
00:01:03.010 --> 00:01:06.080
Next the response is sent to the Spring reactive stack

22
00:01:06.080 --> 00:01:09.060
web framework called WebFlux.

23
00:01:09.060 --> 00:01:11.010
Last in the chain,

24
00:01:11.010 --> 00:01:15.030
the controller handles the request in a non blocking manner.

25
00:01:15.030 --> 00:01:16.040
During this time,

26
00:01:16.040 --> 00:01:19.010
the event loop is free to pick up new requests,

27
00:01:19.010 --> 00:01:22.050
since this process is non blocking.

28
00:01:22.050 --> 00:01:24.030
When a request is complete,

29
00:01:24.030 --> 00:01:26.050
the response is sent back up the chain.

30
00:01:26.050 --> 00:01:29.000
Then when it gets back to the event loop,

31
00:01:29.000 --> 00:01:32.050
the response is returned to the client.

32
00:01:32.050 --> 00:01:34.070
Spring 5 is a really great framework

33
00:01:34.070 --> 00:01:36.080
for reactive applications.

34
00:01:36.080 --> 00:01:40.010
It supports very high-throughput rates.

35
00:01:40.010 --> 00:01:45.010
You also get flexible flow control in non blocking I/O.

36
00:01:45.010 --> 00:01:48.030
You can check out projectreactor.io

37
00:01:48.030 --> 00:01:50.030
for supporting documentation

38
00:01:50.030 --> 00:01:54.030
on the high-throughput rates of Project Reactor.

39
00:01:54.030 --> 00:01:56.000
Finally, you get to leverage

40
00:01:56.000 --> 00:01:59.010
the Spring MVC controller annotations

41
00:01:59.010 --> 00:02:01.020
that you may already be familiar with.

42
00:02:01.020 --> 00:02:04.090
Alternatively, you could also use the new Java

43
00:02:04.090 --> 00:02:08.000
lambda-based functional endpoints if you prefer,

