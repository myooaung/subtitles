WEBVTT
1
00:00:00.050 --> 00:00:03.060
- [Instructor] Now let's create our service interface.

2
00:00:03.060 --> 00:00:07.030
Our reservation service will help abstract away

3
00:00:07.030 --> 00:00:09.050
some of the details of interactions

4
00:00:09.050 --> 00:00:12.090
with the MongoDB Database.

5
00:00:12.090 --> 00:00:17.070
Let's click on the root package, select new,

6
00:00:17.070 --> 00:00:21.030
package and name it service.

7
00:00:21.030 --> 00:00:24.080
Right-click on the service package,

8
00:00:24.080 --> 00:00:29.060
select new, Java Class,

9
00:00:29.060 --> 00:00:31.050
select interface,

10
00:00:31.050 --> 00:00:36.020
and let's name it reservation service.

11
00:00:36.020 --> 00:00:40.010
Let's create a method called get reservation.

12
00:00:40.010 --> 00:00:45.060
We are going to return a Mono that emits a reservation.

13
00:00:45.060 --> 00:00:50.040
Alt + enter to import.

14
00:00:50.040 --> 00:00:55.080
And let's accept a string parameter called price name.

15
00:00:55.080 --> 00:00:57.020
Now let's create another method

16
00:00:57.020 --> 00:00:59.090
called create reservation,

17
00:00:59.090 --> 00:01:03.080
using the same return type as before.

18
00:01:03.080 --> 00:01:05.080
This method will accept a Mono

19
00:01:05.080 --> 00:01:11.000
that emits a reservation as a parameter.

20
00:01:11.000 --> 00:01:18.090
Now let's create a method called update reservation.

21
00:01:18.090 --> 00:01:20.090
We are going to take in two parameters,

22
00:01:20.090 --> 00:01:27.010
a string ID and also a Mono that emits a reservation.

23
00:01:27.010 --> 00:01:31.030
Let's close the project window for readability.

24
00:01:31.030 --> 00:01:35.020
Then one final method for deleting a reservation.

25
00:01:35.020 --> 00:01:38.050
Let's return a Mono that emits a Boolean,

26
00:01:38.050 --> 00:01:40.020
for true or false,

27
00:01:40.020 --> 00:01:44.050
if the delete operation was successful.

28
00:01:44.050 --> 00:01:49.020
And let's accept a string ID as a parameter.

29
00:01:49.020 --> 00:01:51.050
Open up the project window,

30
00:01:51.050 --> 00:01:53.080
right-click on the service package,

31
00:01:53.080 --> 00:01:57.050
go to new, Java Class.

32
00:01:57.050 --> 00:02:03.020
Let's name it reservation service impl.

33
00:02:03.020 --> 00:02:10.050
Now, let's implement the reservation service interface.

34
00:02:10.050 --> 00:02:15.040
And, let's use the keyboard shortcut, command + n.

35
00:02:15.040 --> 00:02:19.000
Select implement methods

36
00:02:19.000 --> 00:02:21.020
and now let's stub out each method

37
00:02:21.020 --> 00:02:25.060
from the interface.

38
00:02:25.060 --> 00:02:29.090
Now let's inject our reactive Mongo template.

39
00:02:29.090 --> 00:02:32.070
Let's create a private final of the type

40
00:02:32.070 --> 00:02:37.030
reactive Mongo operations.

41
00:02:37.030 --> 00:02:39.040
And then let's use command + n

42
00:02:39.040 --> 00:02:42.020
to create a constructor.

43
00:02:42.020 --> 00:02:44.070
Be sure reactive Mongo operations

44
00:02:44.070 --> 00:02:50.000
is selected and press okay.

45
00:02:50.000 --> 00:02:55.060
Then let's add in an autowired annotation.

46
00:02:55.060 --> 00:02:59.000
We will now inject this reactive Mongo template

47
00:02:59.000 --> 00:03:02.080
we defined in our data config

48
00:03:02.080 --> 00:03:08.060
into our reservation service impl.

49
00:03:08.060 --> 00:03:11.010
On the method get reservation,

50
00:03:11.010 --> 00:03:17.030
let's invote the reactive Mongo operations template.

51
00:03:17.030 --> 00:03:25.090
Call the method find by ID.

52
00:03:25.090 --> 00:03:31.090
Let's actually rename this variable to ID.

53
00:03:31.090 --> 00:03:35.050
Now let's go to the method create reservation.

54
00:03:35.050 --> 00:03:39.030
Let's call the reactive Mongo operations template.

55
00:03:39.030 --> 00:03:41.070
Let's call the method save

56
00:03:41.070 --> 00:03:48.090
and let's pass in the reservation object.

57
00:03:48.090 --> 00:03:52.010
And let's be sure to add a service annotation

58
00:03:52.010 --> 00:03:54.020
to our implementation.

59
00:03:54.020 --> 00:03:57.000
The service annotation is a specialization

60
00:03:57.000 --> 00:03:59.040
of the component annotation.

61
00:03:59.040 --> 00:04:05.020
This service class can now be injected where it's needed.

62
00:04:05.020 --> 00:04:07.080
Later on in the course, we will implement

63
00:04:07.080 --> 00:04:11.030
the update and delete reservation endpoints.

64
00:04:11.030 --> 00:04:13.040
Those are a bit more complicated.

65
00:04:13.040 --> 00:04:16.050
But for now, we have get and create

66
00:04:16.050 --> 00:04:19.000
functionality in place.

67
00:04:19.000 --> 00:04:22.060
Let's head back into the reservation service.

68
00:04:22.060 --> 00:04:25.080
Let's actually rename this parameter

69
00:04:25.080 --> 00:04:29.000
to make it a more accurate variable name.

70
00:04:29.000 --> 00:04:31.030
Let's right click, go to refactor,

71
00:04:31.030 --> 00:04:33.050
and then rename.

72
00:04:33.050 --> 00:04:36.000
And let's name it to ID.

