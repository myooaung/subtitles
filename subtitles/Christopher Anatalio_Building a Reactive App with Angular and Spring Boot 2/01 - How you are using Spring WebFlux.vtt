WEBVTT
1
00:00:00.050 --> 00:00:01.060
- [Instructor] Let's dive in

2
00:00:01.060 --> 00:00:03.090
to how we are leveraging Spring WebFlux

3
00:00:03.090 --> 00:00:06.080
to create a rest API.

4
00:00:06.080 --> 00:00:10.030
We will start by taking a look at the differences between

5
00:00:10.030 --> 00:00:13.090
Spring WebFlux and Spring MVC.

6
00:00:13.090 --> 00:00:17.090
By default, WebFlux is non blocking from top to bottom.

7
00:00:17.090 --> 00:00:21.070
It uses Netty instead of Tomcat as a web server,

8
00:00:21.070 --> 00:00:25.020
and it replaces the old Servlet API,

9
00:00:25.020 --> 00:00:29.050
with a Project Reactor based Spring Web API.

10
00:00:29.050 --> 00:00:32.060
While Spring WebFlux internally is very different

11
00:00:32.060 --> 00:00:34.040
from Spring MVC,

12
00:00:34.040 --> 00:00:36.090
you can use WebFlux in a similar manner

13
00:00:36.090 --> 00:00:40.020
with Spring MVC annotations.

14
00:00:40.020 --> 00:00:43.040
Recall that we wanted to create a series of endpoints

15
00:00:43.040 --> 00:00:45.020
to allow for the following:

16
00:00:45.020 --> 00:00:50.040
creating a new reservation, getting a reservation by ID,

17
00:00:50.040 --> 00:00:53.020
updating an existing reservation,

18
00:00:53.020 --> 00:00:57.010
and deleting an existing reservation.

19
00:00:57.010 --> 00:01:00.010
Now let's take a look at how one of those endpoints

20
00:01:00.010 --> 00:01:04.040
actually maps to some actual Spring WebFlux code.

21
00:01:04.040 --> 00:01:07.040
First, we use a GetMapping annotation,

22
00:01:07.040 --> 00:01:11.060
and pass in the URI of the string parameter.

23
00:01:11.060 --> 00:01:13.050
Then, we return a mono

24
00:01:13.050 --> 00:01:17.060
that emits a reservation as the return type.

25
00:01:17.060 --> 00:01:20.060
Then we capture the ID as a parameter

26
00:01:20.060 --> 00:01:23.060
using the path variable annotation.

27
00:01:23.060 --> 00:01:27.010
And finally, we leverage our service implementation

28
00:01:27.010 --> 00:01:29.080
to perform this lookup.

29
00:01:29.080 --> 00:01:32.090
So we can see that you can use all the same mappings

30
00:01:32.090 --> 00:01:36.070
from Spring MVC, that you may be familiar with.

31
00:01:36.070 --> 00:01:40.070
The main difference is we return Spring Reactive Publishers

32
00:01:40.070 --> 00:01:44.090
instead of a response entity.

33
00:01:44.090 --> 00:01:47.020
Diving a bit more into the controller layer,

34
00:01:47.020 --> 00:01:50.020
let's take a look at more details.

35
00:01:50.020 --> 00:01:54.020
A RestController annotation is a composed annotation

36
00:01:54.020 --> 00:01:56.040
that gives you both the controller

37
00:01:56.040 --> 00:02:00.040
and response body annotations.

38
00:02:00.040 --> 00:02:04.040
This allows for auto-registering of bean definitions.

39
00:02:04.040 --> 00:02:07.070
Also, this marks the controller as a web component,

40
00:02:07.070 --> 00:02:09.000
so that component scanning

41
00:02:09.000 --> 00:02:12.080
can add it to the Spring application context.

42
00:02:12.080 --> 00:02:14.060
The controller will leverage

43
00:02:14.060 --> 00:02:19.050
the reactive ServerHttpRequest and response,

44
00:02:19.050 --> 00:02:24.000
and finally, the JSON request body on incoming requests

45
00:02:24.000 --> 00:02:29.010
will be exposed as a flux that emits a data buffer.

46
00:02:29.010 --> 00:02:32.030
If you ever want to learn more about specific annotations,

47
00:02:32.030 --> 00:02:35.020
the Spring docs are very comprehensive.

48
00:02:35.020 --> 00:02:38.090
Clicking into each annotation and composed annotations

49
00:02:38.090 --> 00:02:40.030
will help you learn a lot more

50
00:02:40.030 --> 00:02:44.000
about the internals of Spring if you are interested.

