WEBVTT
1
00:00:00.050 --> 00:00:02.070
- [Instructor] Let's look into couple different ways

2
00:00:02.070 --> 00:00:06.000
we could implement update functionality.

3
00:00:06.000 --> 00:00:09.090
Updates could be scoped to specific fields,

4
00:00:09.090 --> 00:00:15.020
or an update could replace an entire existing document.

5
00:00:15.020 --> 00:00:19.010
Let's open up the Reservation Service Implementation.

6
00:00:19.010 --> 00:00:22.050
Let's go to line 31,

7
00:00:22.050 --> 00:00:26.050
on the method Update Reservation.

8
00:00:26.050 --> 00:00:28.070
Potentially we could just do

9
00:00:28.070 --> 00:00:33.070
reactiveMongoOperations.save,

10
00:00:33.070 --> 00:00:37.090
reservation.

11
00:00:37.090 --> 00:00:41.000
If we look at the Java documents,

12
00:00:41.000 --> 00:00:43.090
save is actually an upsert.

13
00:00:43.090 --> 00:00:47.030
If it doesn't already exist it will do an insert,

14
00:00:47.030 --> 00:00:49.070
otherwise it will do an update.

15
00:00:49.070 --> 00:00:53.040
But let's say we had a more specific case.

16
00:00:53.040 --> 00:01:04.000
Let's say we just wanted to update one field in a document.

17
00:01:04.000 --> 00:01:08.000
First of let's take the model that admits a reservation

18
00:01:08.000 --> 00:01:11.090
and let's flatMap it,

19
00:01:11.090 --> 00:01:15.030
and pass in a lambda that captures

20
00:01:15.030 --> 00:01:18.060
the reservation admitted by that model.

21
00:01:18.060 --> 00:01:23.050
Now let's call the reactive Mongo template.

22
00:01:23.050 --> 00:01:28.070
And let's call the method find and modify.

23
00:01:28.070 --> 00:01:31.080
First, let's pass in a query.

24
00:01:31.080 --> 00:01:34.080
Let's create a query object,

25
00:01:34.080 --> 00:01:40.030
by using the query method passing in a criteria,

26
00:01:40.030 --> 00:01:47.050
where the ID of the document is equal to the past 10 ID.

27
00:01:47.050 --> 00:01:54.050
Ok Enter to import.

28
00:01:54.050 --> 00:01:58.020
Then let's pass in a update statement,

29
00:01:58.020 --> 00:02:01.030
let's call update.

30
00:02:01.030 --> 00:02:05.040
Pass in the name of the field you want to update price,

31
00:02:05.040 --> 00:02:10.050
lets import update using alt enter.

32
00:02:10.050 --> 00:02:14.070
Pass in the new price.

33
00:02:14.070 --> 00:02:18.040
And the object type.

34
00:02:18.040 --> 00:02:22.010
I may close a project window for readability.

35
00:02:22.010 --> 00:02:24.050
Let's put a semi colon,

36
00:02:24.050 --> 00:02:28.060
in a return statement.

37
00:02:28.060 --> 00:02:33.030
Let's remove this parameter reservation class,

38
00:02:33.030 --> 00:02:38.000
into the calling method.

39
00:02:38.000 --> 00:02:39.030
Now as you could see,

40
00:02:39.030 --> 00:02:41.080
since this line is the single line,

41
00:02:41.080 --> 00:02:46.050
we actually don't need the curly braces.

42
00:02:46.050 --> 00:02:50.020
So if you press Alt+Enter,

43
00:02:50.020 --> 00:02:57.030
we could remove the unnecessary syntax.

44
00:02:57.030 --> 00:02:59.040
Now let's add in one more lambda

45
00:02:59.040 --> 00:03:02.020
to update the price in the result,

46
00:03:02.020 --> 00:03:13.030
so that the end user can see the updated price.

47
00:03:13.030 --> 00:03:20.090
That is commit out Alt on the format and save.

48
00:03:20.090 --> 00:03:23.060
So as you could see depending on your use case,

49
00:03:23.060 --> 00:03:27.000
you could implement update in a couple different ways.

