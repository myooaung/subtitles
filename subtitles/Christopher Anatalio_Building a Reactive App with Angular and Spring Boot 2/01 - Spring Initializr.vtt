WEBVTT
1
00:00:00.050 --> 00:00:01.040
- Let's get started

2
00:00:01.040 --> 00:00:05.060
building our Spring 5 reactive web application.

3
00:00:05.060 --> 00:00:07.040
So how do we get started?

4
00:00:07.040 --> 00:00:10.080
We could use the Spring Initializr utility

5
00:00:10.080 --> 00:00:15.050
to generate a base Spring Boot 2 Java application.

6
00:00:15.050 --> 00:00:19.040
This will generate our base project skeleton.

7
00:00:19.040 --> 00:00:23.050
There are four options for using Spring Initializr.

8
00:00:23.050 --> 00:00:29.040
First of all, we have the web interface at start.spring.io.

9
00:00:29.040 --> 00:00:32.010
Using this option you can configure

10
00:00:32.010 --> 00:00:35.000
your application visually.

11
00:00:35.000 --> 00:00:38.090
Your second option is the Spring CLI.

12
00:00:38.090 --> 00:00:43.030
You can install the Spring CLI using Homebrew.

13
00:00:43.030 --> 00:00:48.020
You could use the commands brew, tab, pivotal/tap.

14
00:00:48.020 --> 00:00:51.080
Then brew, install, springboot.

15
00:00:51.080 --> 00:00:54.050
Then you can invoke the spring init command

16
00:00:54.050 --> 00:00:57.040
to create a project.

17
00:00:57.040 --> 00:01:01.010
Your third option is an IDE plugin.

18
00:01:01.010 --> 00:01:05.070
Some IDEs like Intellij Ultimate have a plugin built in.

19
00:01:05.070 --> 00:01:08.040
Or you could use a plugin referenced by

20
00:01:08.040 --> 00:01:11.040
the Spring Initializr GitHub page.

21
00:01:11.040 --> 00:01:14.030
Finally, you could call the API directly

22
00:01:14.030 --> 00:01:16.090
using a kernel statement.

23
00:01:16.090 --> 00:01:19.050
Here's an example of calling the API

24
00:01:19.050 --> 00:01:23.040
to generate a project directly.

25
00:01:23.040 --> 00:01:25.070
In this video we're going to use

26
00:01:25.070 --> 00:01:28.010
the Spring Initializr web app.

27
00:01:28.010 --> 00:01:31.080
Let's navigate back to start.spring.io.

28
00:01:31.080 --> 00:01:35.000
Let's select a Gradle Project,

29
00:01:35.000 --> 00:01:37.090
select Java as the language,

30
00:01:37.090 --> 00:01:42.030
select the latest stable release of Spring Boot 2,

31
00:01:42.030 --> 00:01:47.080
then let's set the package name to com.linkedinlearning.

32
00:01:47.080 --> 00:01:53.040
Now let's set the artifact name to reactivespring.

33
00:01:53.040 --> 00:01:57.020
Go ahead and click on more options,

34
00:01:57.020 --> 00:02:01.080
then scroll down and select Java 12.

35
00:02:01.080 --> 00:02:05.070
In the search bar type in reactive web.

36
00:02:05.070 --> 00:02:08.040
Okay, let's click add.

37
00:02:08.040 --> 00:02:12.070
Now type in Reactive Mongo DB.

38
00:02:12.070 --> 00:02:17.010
Let's add the Reactive Mongo DB dependency,

39
00:02:17.010 --> 00:02:21.080
and finally type in Embedded Mongo DB.

40
00:02:21.080 --> 00:02:25.040
An embedded mongo DB instance will help us run

41
00:02:25.040 --> 00:02:28.060
unit tests and help us run locally.

42
00:02:28.060 --> 00:02:31.010
In production you definitely don't want to use

43
00:02:31.010 --> 00:02:36.010
a embedded database, however.

44
00:02:36.010 --> 00:02:43.060
Let's verify all our settings, then select generate project.

45
00:02:43.060 --> 00:02:44.090
Awesome, that's it.

46
00:02:44.090 --> 00:02:47.080
We've generated our base project.

47
00:02:47.080 --> 00:02:51.070
Moving forward, next steps will be to extract the zip file

48
00:02:51.070 --> 00:02:55.000
and import the project into Intellij.

