WEBVTT
1
00:00:00.050 --> 00:00:02.070
- [Instructor] Now let's take a look at how data flows

2
00:00:02.070 --> 00:00:03.080
around the system.

3
00:00:03.080 --> 00:00:07.030
We're going to review how data flows from

4
00:00:07.030 --> 00:00:09.030
the persistence layer in Spring

5
00:00:09.030 --> 00:00:12.050
to the front-end UI in Angular.

6
00:00:12.050 --> 00:00:15.020
First off, let's take a closer look at

7
00:00:15.020 --> 00:00:18.050
the Spring Reactive Publisher, Flux.

8
00:00:18.050 --> 00:00:23.020
It can emit zero or up to any number of elements.

9
00:00:23.020 --> 00:00:26.090
It will either emit a successful completion signal

10
00:00:26.090 --> 00:00:29.010
after emitting all elements

11
00:00:29.010 --> 00:00:33.010
or it can also emit an error signal.

12
00:00:33.010 --> 00:00:37.020
Let's review a successful Flux in action.

13
00:00:37.020 --> 00:00:42.040
In this example, we can see a Flux emit three values.

14
00:00:42.040 --> 00:00:46.030
We then perform a stream operation on each value,

15
00:00:46.030 --> 00:00:51.000
which creates a new Flux of each updated value.

16
00:00:51.000 --> 00:00:54.000
Finally, the Flux emits a completion signal

17
00:00:54.000 --> 00:00:56.040
after it's done.

18
00:00:56.040 --> 00:00:59.060
Now let's take a look at a failed Flux.

19
00:00:59.060 --> 00:01:02.020
In this graphic, we can see that a Flux

20
00:01:02.020 --> 00:01:06.030
is emitting values, but encounters an error.

21
00:01:06.030 --> 00:01:09.060
In this case, the Flux emits an error signal

22
00:01:09.060 --> 00:01:14.050
and terminates before emitting all its values.

23
00:01:14.050 --> 00:01:18.070
Reactive publishers can be chained and operated upon.

24
00:01:18.070 --> 00:01:21.020
Let's take a look at a example of performing

25
00:01:21.020 --> 00:01:24.080
a stream operation on a Flux.

26
00:01:24.080 --> 00:01:27.020
In this simple case, we are just casting

27
00:01:27.020 --> 00:01:29.030
an object to a string.

28
00:01:29.030 --> 00:01:32.090
As each value's emitted, it is cast to a string.

29
00:01:32.090 --> 00:01:36.060
This forms a new Flux composed of strings.

30
00:01:36.060 --> 00:01:40.030
You can learn more about different operators you can use

31
00:01:40.030 --> 00:01:45.040
in Appendix A of the Project Reactor documentation.

32
00:01:45.040 --> 00:01:47.070
Finally, let's illustrate the flow of data

33
00:01:47.070 --> 00:01:53.030
from end to end, from MongoDB to the Angular front-end.

34
00:01:53.030 --> 00:01:57.020
Our Angular HTTP client sends a request,

35
00:01:57.020 --> 00:02:00.030
which is picked up by the Netty event loop.

36
00:02:00.030 --> 00:02:04.040
Next in the chain, WebFlux will handle that request.

37
00:02:04.040 --> 00:02:06.060
Our controller will route that request

38
00:02:06.060 --> 00:02:10.060
to a custom defined service implementation.

39
00:02:10.060 --> 00:02:13.040
Then our service class will leverage a Spring data

40
00:02:13.040 --> 00:02:15.030
Reactive Repository.

41
00:02:15.030 --> 00:02:20.020
That Reactive Repository will call a Reactive Mongo client.

42
00:02:20.020 --> 00:02:24.020
That Mongo client is just a Reactive streams implementation

43
00:02:24.020 --> 00:02:26.080
of the standard Mongo driver.

44
00:02:26.080 --> 00:02:31.040
Finally, the Mongo driver will query our MongoDB instance

45
00:02:31.040 --> 00:02:33.090
in a non-blocking manner.

46
00:02:33.090 --> 00:02:35.020
After this call completes,

47
00:02:35.020 --> 00:02:37.080
it will propagate back up the chain

48
00:02:37.080 --> 00:02:42.030
and be returned to the Angular HTTP client.

49
00:02:42.030 --> 00:02:46.000
Angular will be able to display or process

50
00:02:46.000 --> 00:02:48.000
the results of the request.

