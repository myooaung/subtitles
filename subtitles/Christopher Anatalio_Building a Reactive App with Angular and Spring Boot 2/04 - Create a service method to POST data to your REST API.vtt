WEBVTT
1
00:00:00.050 --> 00:00:01.060
- [Instructor] Now let's wire up

2
00:00:01.060 --> 00:00:04.070
our angular reservation service to make a call

3
00:00:04.070 --> 00:00:08.070
to create a reservation in our backend API.

4
00:00:08.070 --> 00:00:11.070
Let's create a class called ReservationRequest.

5
00:00:11.070 --> 00:00:15.000
This class will represent the JSON request body

6
00:00:15.000 --> 00:00:19.090
of a post request to create a reservation.

7
00:00:19.090 --> 00:00:27.080
Let's type in export class ReservationRequest.

8
00:00:27.080 --> 00:00:34.010
Let's add in four variables, roomNumber of the type number,

9
00:00:34.010 --> 00:00:43.050
checkIn of the type string, checkOut of the type string,

10
00:00:43.050 --> 00:00:48.000
and price of the type number.

11
00:00:48.000 --> 00:01:05.040
Now let's create a constructor to set all four values.

12
00:01:05.040 --> 00:01:07.030
Then in the body of the constructor,

13
00:01:07.030 --> 00:01:15.070
let's set all the local values.

14
00:01:15.070 --> 00:01:20.080
And we have a little typo, so let's fix checkIn to checkOut.

15
00:01:20.080 --> 00:01:24.030
Now let's create a reservation interface.

16
00:01:24.030 --> 00:01:25.080
This interface will represent

17
00:01:25.080 --> 00:01:29.010
the JSON response from a REST API.

18
00:01:29.010 --> 00:01:35.000
Let's create five fields, id, which is a string,

19
00:01:35.000 --> 00:01:39.050
roomNumber, which is a number,

20
00:01:39.050 --> 00:01:43.070
checkIn, which is a date,

21
00:01:43.070 --> 00:01:46.040
and checkOut, which is a date.

22
00:01:46.040 --> 00:01:55.050
Then finally price, which is a number.

23
00:01:55.050 --> 00:02:00.020
Now let's create a createReservation method.

24
00:02:00.020 --> 00:02:05.070
Let's pass in a ReservationRequest body,

25
00:02:05.070 --> 00:02:13.020
and let's return a Observable that emits a Reservation.

26
00:02:13.020 --> 00:02:18.020
Now let's create a httpOptions body,

27
00:02:18.020 --> 00:02:31.070
and let's set the Content-Type header to application/json.

28
00:02:31.070 --> 00:02:35.090
Now let's call the http client

29
00:02:35.090 --> 00:02:38.030
and let's call the post method

30
00:02:38.030 --> 00:02:42.030
expecting back a Reservation type.

31
00:02:42.030 --> 00:02:48.000
Let's pass in the reservationUrl,

32
00:02:48.000 --> 00:02:54.060
the ReservationRequest body, and the httpOptions.

33
00:02:54.060 --> 00:02:58.040
Now let's return that value.

34
00:02:58.040 --> 00:03:03.050
Let's navigate to the reservation-app directory

35
00:03:03.050 --> 00:03:07.050
and run ng serve.

36
00:03:07.050 --> 00:03:10.070
Okay, looks like we have an error,

37
00:03:10.070 --> 00:03:12.050
and we have a extraneous semicolon

38
00:03:12.050 --> 00:03:15.000
at the end of the header's declaration.

39
00:03:15.000 --> 00:03:19.010
Let's go ahead and remove that.

40
00:03:19.010 --> 00:03:26.070
Let's import the HttpHeaders from angular/common/http

41
00:03:26.070 --> 00:03:34.040
and let's import Observable from rxjs.

42
00:03:34.040 --> 00:03:39.090
Now let's try running ng serve again.

43
00:03:39.090 --> 00:03:45.080
Let's open up localhost at 4200,

44
00:03:45.080 --> 00:03:48.000
and it looks like our app started up successfully.

