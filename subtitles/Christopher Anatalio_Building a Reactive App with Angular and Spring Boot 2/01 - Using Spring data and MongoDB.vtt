WEBVTT
1
00:00:00.050 --> 00:00:03.070
- [Instructor] Okay, let's talk a bit about using MongoDB

2
00:00:03.070 --> 00:00:06.010
and Spring Reactive Data.

3
00:00:06.010 --> 00:00:10.090
MongoDB is a NoSQL document-oriented database.

4
00:00:10.090 --> 00:00:13.000
It stores data in the BSON,

5
00:00:13.000 --> 00:00:16.020
or binary JSON format.

6
00:00:16.020 --> 00:00:19.080
A BSON document is just like a JSON document,

7
00:00:19.080 --> 00:00:23.080
but encoded to binary when stored on disc.

8
00:00:23.080 --> 00:00:26.010
There is no explicit schema

9
00:00:26.010 --> 00:00:29.080
so fields and data structure can change over time

10
00:00:29.080 --> 00:00:32.090
and between documents.

11
00:00:32.090 --> 00:00:36.040
The document model maps very closely to your models

12
00:00:36.040 --> 00:00:38.040
in your own code.

13
00:00:38.040 --> 00:00:42.010
MongoDB is distributed by design.

14
00:00:42.010 --> 00:00:44.030
It offers high availability,

15
00:00:44.030 --> 00:00:46.000
horizontal scaling,

16
00:00:46.000 --> 00:00:49.040
and geographic distribution.

17
00:00:49.040 --> 00:00:55.000
Self-healing MongoDB replica sets enable high availability.

18
00:00:55.000 --> 00:00:59.080
A replica set consists of multiple database replicas.

19
00:00:59.080 --> 00:01:03.010
Right operations are applied to the primary,

20
00:01:03.010 --> 00:01:06.010
then secondaries replicate all data changes

21
00:01:06.010 --> 00:01:08.070
from the operation's log.

22
00:01:08.070 --> 00:01:11.030
If the primary suffers the failure,

23
00:01:11.030 --> 00:01:13.000
one of the secondary members

24
00:01:13.000 --> 00:01:16.020
is automatically elected to primary.

25
00:01:16.020 --> 00:01:18.080
This automatic fail over hot swap

26
00:01:18.080 --> 00:01:23.010
provides high availability in the face of any error.

27
00:01:23.010 --> 00:01:25.070
Sharding automatically partitions

28
00:01:25.070 --> 00:01:30.030
and distributes data across multiple physical instances.

29
00:01:30.030 --> 00:01:33.060
Sharding will seamlessly scale the database

30
00:01:33.060 --> 00:01:38.060
without adding any complexity to the application itself.

31
00:01:38.060 --> 00:01:41.060
Notes can be added or removed from the cluster,

32
00:01:41.060 --> 00:01:46.000
and MongoDB will automatically rebalance that data.

33
00:01:46.000 --> 00:01:50.060
Data is distributed based on hashing the primary key value.

34
00:01:50.060 --> 00:01:53.030
This is how MongoDB facilitates

35
00:01:53.030 --> 00:01:56.050
automatic horizontal scaling.

36
00:01:56.050 --> 00:01:58.090
We will use a reactive template

37
00:01:58.090 --> 00:02:02.060
to perform database operations.

38
00:02:02.060 --> 00:02:05.090
ReactiveMongoOperations is a interface

39
00:02:05.090 --> 00:02:09.020
that our template will implement.

40
00:02:09.020 --> 00:02:13.070
It specifies a basic set of operations to be executed

41
00:02:13.070 --> 00:02:15.080
in a reactive manner.

42
00:02:15.080 --> 00:02:21.050
It contains operations such as save, findById, and remove.

43
00:02:21.050 --> 00:02:23.040
Here is an example definition

44
00:02:23.040 --> 00:02:26.030
of a Reactive Mongo Template Bean.

45
00:02:26.030 --> 00:02:29.060
We define a dependency that can be injected

46
00:02:29.060 --> 00:02:32.040
using the Bean annotation.

47
00:02:32.040 --> 00:02:35.070
We pass in a Mongo Client bean,

48
00:02:35.070 --> 00:02:40.070
and then we instantiate a Reactive Mongo Template instance

49
00:02:40.070 --> 00:02:45.000
passing the Mongo Client and the database name.

