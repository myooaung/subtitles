WEBVTT
1
00:00:00.080 --> 00:00:04.060
- [Instructor] Now let's create a uni-test in Spring.

2
00:00:04.060 --> 00:00:09.070
Let's navigate to the ReservationResource class.

3
00:00:09.070 --> 00:00:12.060
Let's highlight the class name,

4
00:00:12.060 --> 00:00:17.040
then use the keyboard shortcut CMD+Shift+T

5
00:00:17.040 --> 00:00:20.040
to generate the test.

6
00:00:20.040 --> 00:00:23.080
Let's go ahead and click Create New Test.

7
00:00:23.080 --> 00:00:26.060
Then in the Create Test dialog,

8
00:00:26.060 --> 00:00:31.000
let's check set up a @Before.

9
00:00:31.000 --> 00:00:33.030
Then let's stub add a test method

10
00:00:33.030 --> 00:00:43.010
for getAllReservations and createReservation.

11
00:00:43.010 --> 00:00:46.000
Now we have a test in our test package

12
00:00:46.000 --> 00:00:50.090
in the correct location.

13
00:00:50.090 --> 00:00:54.040
Let's add a RunWith annotation,

14
00:00:54.040 --> 00:00:59.010
passing in the SpringRunner class.

15
00:00:59.010 --> 00:01:02.020
Alt+Enter to import.

16
00:01:02.020 --> 00:01:05.020
The SpringRunner is a custom extension

17
00:01:05.020 --> 00:01:10.050
of the JUnit (mumbles) JUnit 4 class runner.

18
00:01:10.050 --> 00:01:14.020
Now let's add in a SpringBootTest annotation.

19
00:01:14.020 --> 00:01:21.040
Let's set the Web environment to a random open port.

20
00:01:21.040 --> 00:01:23.040
Let's type in SpringBootTest,

21
00:01:23.040 --> 00:01:27.010
WebEnvironment, RANDOM_PORT.

22
00:01:27.010 --> 00:01:30.080
The SpringBootTest annotation will give us access

23
00:01:30.080 --> 00:01:33.090
to the Spring ApplicationContext.

24
00:01:33.090 --> 00:01:40.020
Let's auto-wire in the ApplicationContext

25
00:01:40.020 --> 00:01:46.000
and let's define a instance of the webTestClient.

26
00:01:46.000 --> 00:01:48.050
Now let's define a reservation object

27
00:01:48.050 --> 00:01:53.090
to be used in our tests.

28
00:01:53.090 --> 00:01:57.000
Our setup method annotated with @Before

29
00:01:57.000 --> 00:02:01.030
is run before each test.

30
00:02:01.030 --> 00:02:04.060
Let's configure the webTestClient

31
00:02:04.060 --> 00:02:06.080
and let's create a new instance

32
00:02:06.080 --> 00:02:09.020
of the webTestClient,

33
00:02:09.020 --> 00:02:15.070
let's bind it to the auto-wired ApplicationContext,

34
00:02:15.070 --> 00:02:21.010
then let's create a instance of that webTestClient.

35
00:02:21.010 --> 00:02:26.020
Now let's create a new instance of a reservation.

36
00:02:26.020 --> 00:02:29.020
Let's use the reservation constructor

37
00:02:29.020 --> 00:02:32.090
and pass in a room number,

38
00:02:32.090 --> 00:02:38.070
a check-in date of now,

39
00:02:38.070 --> 00:02:48.060
and a check-out date of 10 days from now.

40
00:02:48.060 --> 00:02:54.000
Finally, let's pass in a price of 150.

41
00:02:54.000 --> 00:02:55.020
I'm going to go ahead and close

42
00:02:55.020 --> 00:02:59.030
the project window for readability.

43
00:02:59.030 --> 00:03:02.070
Now in the getAllReservations test,

44
00:03:02.070 --> 00:03:05.050
let's invoke the webTestClient,

45
00:03:05.050 --> 00:03:10.010
let's issue a get request,

46
00:03:10.010 --> 00:03:13.090
let's open up the ReservationResource

47
00:03:13.090 --> 00:03:19.050
and copy the string constant for the URI,

48
00:03:19.050 --> 00:03:23.030
and pass it in to our webTestClient.

49
00:03:23.030 --> 00:03:26.030
Let's use Alt+Enter to import

50
00:03:26.030 --> 00:03:31.000
and import that static constant.

51
00:03:31.000 --> 00:03:35.050
Now let's call exchange to execute the request.

52
00:03:35.050 --> 00:03:44.080
Now let's verify the response is a 200 OK

53
00:03:44.080 --> 00:03:49.000
and then let's expect a list of reservation objects

54
00:03:49.000 --> 00:03:52.090
as a response.

55
00:03:52.090 --> 00:04:00.070
Now let's try to execute that test.

56
00:04:00.070 --> 00:04:03.000
Great, that test succeeds.

57
00:04:03.000 --> 00:04:08.060
Now let's create another test for createReservation.

58
00:04:08.060 --> 00:04:13.030
Let's call the post method,

59
00:04:13.030 --> 00:04:18.000
let's pass in the URL constant again,

60
00:04:18.000 --> 00:04:20.090
then let's use the reservation we created

61
00:04:20.090 --> 00:04:23.010
in our @Before method

62
00:04:23.010 --> 00:04:26.060
to pass in as the request body.

63
00:04:26.060 --> 00:04:31.060
Let's create a mono of that reservation.

64
00:04:31.060 --> 00:04:34.030
Now let's hover over the mono class

65
00:04:34.030 --> 00:04:38.050
and let's use the keyboard shortcut Alt+Enter

66
00:04:38.050 --> 00:04:42.070
and let's import that class.

67
00:04:42.070 --> 00:04:47.050
Let's also pass in the reservation class.

68
00:04:47.050 --> 00:04:53.060
Now let's call exchange to execute that request.

69
00:04:53.060 --> 00:04:57.090
Let's verify that the status was 200 OK.

70
00:04:57.090 --> 00:05:00.060
Let's use the expectHeader method

71
00:05:00.060 --> 00:05:02.020
to verify that we get back

72
00:05:02.020 --> 00:05:05.090
the correct contentType header.

73
00:05:05.090 --> 00:05:08.060
We're going to expect back a contentType

74
00:05:08.060 --> 00:05:16.050
of APPLICATION_JSON using the charset UTF8.

75
00:05:16.050 --> 00:05:19.050
And finally, let's expect that the body

76
00:05:19.050 --> 00:05:22.060
is of the type Reservation.class.

77
00:05:22.060 --> 00:05:28.030
Let's go ahead and save and run that test.

78
00:05:28.030 --> 00:05:31.040
Great, looks like it runs successfully.

79
00:05:31.040 --> 00:05:36.030
Let's open up a terminal

80
00:05:36.030 --> 00:05:43.000
and let's navigate to the project directory.

81
00:05:43.000 --> 00:05:50.000
We could also run the test using the gradle wrapper.

82
00:05:50.000 --> 00:05:51.090
Great, it looks like our whole test suite

83
00:05:51.090 --> 00:05:54.000
executed successfully.

