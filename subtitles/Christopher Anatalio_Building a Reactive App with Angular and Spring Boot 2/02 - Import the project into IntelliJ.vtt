WEBVTT
1
00:00:00.050 --> 00:00:01.070
- [Instructor] Now let's go ahead

2
00:00:01.070 --> 00:00:05.010
and import our application into IntelliJ.

3
00:00:05.010 --> 00:00:07.040
First off, let's open up a finder window

4
00:00:07.040 --> 00:00:10.030
and navigate to the download section.

5
00:00:10.030 --> 00:00:14.060
Let's double click to extract the files.

6
00:00:14.060 --> 00:00:17.070
Then let's go ahead and open up IntelliJ.

7
00:00:17.070 --> 00:00:22.020
Let's select Import Project.

8
00:00:22.020 --> 00:00:28.060
Then let's select build.gradle and click Open.

9
00:00:28.060 --> 00:00:33.010
Let's be sure to select the auto-import option.

10
00:00:33.010 --> 00:00:37.050
Double check that the default Gradle wrapper is being used.

11
00:00:37.050 --> 00:00:40.060
Then click OK.

12
00:00:40.060 --> 00:00:45.060
IntelliJ will now build an index to your project.

13
00:00:45.060 --> 00:00:48.070
You should see a green check mark in your build window

14
00:00:48.070 --> 00:00:51.000
if it builds successfully.

15
00:00:51.000 --> 00:00:54.060
Now navigate to the Project tab.

16
00:00:54.060 --> 00:00:57.070
Open the build.gradle file,

17
00:00:57.070 --> 00:01:02.090
and let's navigate to the dependency section.

18
00:01:02.090 --> 00:01:05.080
We can verify that we have the spring-boot-starter

19
00:01:05.080 --> 00:01:09.050
for mongodb-reactive and webflux.

20
00:01:09.050 --> 00:01:13.020
We have several helper files for unit testing.

21
00:01:13.020 --> 00:01:15.010
And we also have the dependency

22
00:01:15.010 --> 00:01:19.020
for the embedded mongo library.

23
00:01:19.020 --> 00:01:21.000
Now we need a MongoDB instance

24
00:01:21.000 --> 00:01:24.050
to start up our application successfully.

25
00:01:24.050 --> 00:01:27.090
One option is using a Docker container.

26
00:01:27.090 --> 00:01:33.020
We can navigate to hub.docker.com/bitnami/mongodb.

27
00:01:33.020 --> 00:01:35.050
You could use the Docker Pull Command

28
00:01:35.050 --> 00:01:38.000
to pull down the image.

29
00:01:38.000 --> 00:01:41.000
Then you can also use the docker run command

30
00:01:41.000 --> 00:01:43.020
to run the container.

31
00:01:43.020 --> 00:01:48.000
You can also pass in a -p flag to set a custom port

32
00:01:48.000 --> 00:01:51.060
when you run the docker run command.

33
00:01:51.060 --> 00:01:53.020
However, in this example,

34
00:01:53.020 --> 00:01:58.060
we are going to use a local embedded mongodb instance.

35
00:01:58.060 --> 00:02:01.070
First up, let's go into the project window,

36
00:02:01.070 --> 00:02:03.090
open up main,

37
00:02:03.090 --> 00:02:05.070
resources,

38
00:02:05.070 --> 00:02:09.090
then open up application.properties.

39
00:02:09.090 --> 00:02:14.010
Let's add in the property spring.profiles.active

40
00:02:14.010 --> 00:02:17.080
is equal to local.

41
00:02:17.080 --> 00:02:22.060
Let's open up our build.gradle file again.

42
00:02:22.060 --> 00:02:26.040
Let's compile the embedded mongodb dependency,

43
00:02:26.040 --> 00:02:29.080
but only if we are in the local profile.

44
00:02:29.080 --> 00:02:33.020
Let's create an if statement.

45
00:02:33.020 --> 00:02:37.080
And let's check if the project has a property local.

46
00:02:37.080 --> 00:02:45.070
So let's type in project.hasProperty, in camelCase

47
00:02:45.070 --> 00:02:50.070
and pass in the parameter local in single quotes.

48
00:02:50.070 --> 00:02:53.090
Now let's create a dependencies block

49
00:02:53.090 --> 00:02:58.070
to import the embedded mongodb instance.

50
00:02:58.070 --> 00:03:04.030
So let's type in dependencies.

51
00:03:04.030 --> 00:03:08.080
Then let's make this a compile time dependency.

52
00:03:08.080 --> 00:03:11.040
And then let's scroll down to the embedded mongo

53
00:03:11.040 --> 00:03:13.030
dependency string.

54
00:03:13.030 --> 00:03:16.040
Go ahead and right click, copy,

55
00:03:16.040 --> 00:03:21.090
and paste that into our local compile dependency.

56
00:03:21.090 --> 00:03:23.070
Let's go ahead and save.

57
00:03:23.070 --> 00:03:27.010
Then let's navigate back to the project window.

58
00:03:27.010 --> 00:03:32.020
Navigate through the tree, src, main, java.

59
00:03:32.020 --> 00:03:33.090
And then let's open up the package

60
00:03:33.090 --> 00:03:39.000
com.linkedinlearning.reactivespring.

61
00:03:39.000 --> 00:03:41.050
Let's right click on the package,

62
00:03:41.050 --> 00:03:45.060
navigate to New, and select Package.

63
00:03:45.060 --> 00:03:48.080
Let's name it config.

64
00:03:48.080 --> 00:03:52.040
Okay, let's right click on the config package,

65
00:03:52.040 --> 00:03:57.000
scroll up to New and select Java Class.

66
00:03:57.000 --> 00:04:02.090
Let's name it DataConfig and click OK.

67
00:04:02.090 --> 00:04:06.070
Now let's add several annotations.

68
00:04:06.070 --> 00:04:10.020
Let's add a configuration annotation.

69
00:04:10.020 --> 00:04:13.000
This will identify this class as a candidate

70
00:04:13.000 --> 00:04:18.030
for auto-configuration in the spring application context.

71
00:04:18.030 --> 00:04:22.020
Now let's add a profile annotation.

72
00:04:22.020 --> 00:04:24.090
Let's pass in the parameter value

73
00:04:24.090 --> 00:04:29.080
is equal to the string literal local.

74
00:04:29.080 --> 00:04:34.020
Let's use the keyboard shortcut alt plus enter

75
00:04:34.020 --> 00:04:37.060
to import the profile annotation.

76
00:04:37.060 --> 00:04:41.060
Finally, let's add in an import annotation.

77
00:04:41.060 --> 00:04:43.020
Let's pass in the parameter

78
00:04:43.020 --> 00:04:50.090
EmbeddedMongoAutoConfiguration.class.

79
00:04:50.090 --> 00:04:54.070
Using the keyboard shortcut command and left click,

80
00:04:54.070 --> 00:04:59.030
we can view the class EmbeddedMongoAutoConfiguration.

81
00:04:59.030 --> 00:05:01.060
This class will configure your application

82
00:05:01.060 --> 00:05:06.080
to use the EmbeddedMongoDB.

83
00:05:06.080 --> 00:05:11.030
Now finally, let's open up build.gradle.

84
00:05:11.030 --> 00:05:14.050
And add in a local project property.

85
00:05:14.050 --> 00:05:21.000
Let's type in project.ext.local,

86
00:05:21.000 --> 00:05:23.050
and set that equal to true.

87
00:05:23.050 --> 00:05:25.030
Then let's save.

88
00:05:25.030 --> 00:05:28.000
Now let's right click on the class

89
00:05:28.000 --> 00:05:30.090
ReactivespringApplication

90
00:05:30.090 --> 00:05:36.030
and select run.

91
00:05:36.030 --> 00:05:44.040
Let's open up the run window.

92
00:05:44.040 --> 00:05:50.020
And we can see our embedded MongoDB getting started up.

93
00:05:50.020 --> 00:05:53.070
If we scroll to the bottom we can see that our application

94
00:05:53.070 --> 00:05:56.000
has started up successfully.

