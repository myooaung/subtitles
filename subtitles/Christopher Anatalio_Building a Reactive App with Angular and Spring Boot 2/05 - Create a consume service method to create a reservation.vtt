WEBVTT
1
00:00:00.050 --> 00:00:03.040
- [Instructor] Now let's call the reservation service

2
00:00:03.040 --> 00:00:06.020
from our app.component.

3
00:00:06.020 --> 00:00:11.080
Let's open up app.component.ts,

4
00:00:11.080 --> 00:00:18.070
and let's add in a method called createReservation.

5
00:00:18.070 --> 00:00:23.030
Let's call the reservationService,

6
00:00:23.030 --> 00:00:29.040
and let's call the createReservation method on that service.

7
00:00:29.040 --> 00:00:36.030
Let's pass in a new instance of ReservationRequest.

8
00:00:36.030 --> 00:00:46.000
Let's pass in the current room number,

9
00:00:46.000 --> 00:00:53.000
the current check in value,

10
00:00:53.000 --> 00:00:57.030
the current check out value,

11
00:00:57.030 --> 00:01:03.040
and the current price.

12
00:01:03.040 --> 00:01:07.070
Now let's subscribe to the observable return by that method

13
00:01:07.070 --> 00:01:12.030
and then process the result with a lambda.

14
00:01:12.030 --> 00:01:19.090
And let's go ahead and print the result to console.log.

15
00:01:19.090 --> 00:01:23.020
And let's make sure to import the reservation request

16
00:01:23.020 --> 00:01:26.060
from reservation.service.

17
00:01:26.060 --> 00:01:30.050
Now let's open up app.component.hmtl.

18
00:01:30.050 --> 00:01:32.090
Let's scroll down to line 97

19
00:01:32.090 --> 00:01:39.060
and let's add in a submit button.

20
00:01:39.060 --> 00:01:48.030
Let's create a div element of the class form-group

21
00:01:48.030 --> 00:01:51.070
and then nest another div element,

22
00:01:51.070 --> 00:01:55.090
passing in the class column offset two and column 10,

23
00:01:55.090 --> 00:01:59.010
which will center the button.

24
00:01:59.010 --> 00:02:06.000
Then let's create a button element of the type submit,

25
00:02:06.000 --> 00:02:08.070
and let's pass in the class as btn,

26
00:02:08.070 --> 00:02:11.060
btn-primary

27
00:02:11.060 --> 00:02:14.060
and btn-large.

28
00:02:14.060 --> 00:02:19.040
Let's update the label to say Reserve Room.

29
00:02:19.040 --> 00:02:23.040
Now let's navigate up to the form element on line 67

30
00:02:23.040 --> 00:02:27.090
and let's add in a ngSubmit event handler,

31
00:02:27.090 --> 00:02:32.080
and call the create reservation method.

32
00:02:32.080 --> 00:02:38.080
Now let's try running ng serve.

33
00:02:38.080 --> 00:02:44.070
Let's take a look at some of these errors in app.component.

34
00:02:44.070 --> 00:02:46.010
Looks like we were missing a comma

35
00:02:46.010 --> 00:02:49.010
after current check in value.

36
00:02:49.010 --> 00:02:52.040
Let's go ahead and save

37
00:02:52.040 --> 00:02:55.090
and restart.

38
00:02:55.090 --> 00:03:03.010
It looks like on line 60, we had an unneeded semicolon.

39
00:03:03.010 --> 00:03:07.080
Let navigate to local host at 4200,

40
00:03:07.080 --> 00:03:10.000
open up a inspect window,

41
00:03:10.000 --> 00:03:17.070
go to the console tab,

42
00:03:17.070 --> 00:03:20.070
and let's create a reservation.

43
00:03:20.070 --> 00:03:22.010
Our connection was refused

44
00:03:22.010 --> 00:03:29.070
because our service is not currently running.

45
00:03:29.070 --> 00:03:31.050
Let's open up IntelliJ,

46
00:03:31.050 --> 00:03:35.050
right click on the ReactivespringApplication class,

47
00:03:35.050 --> 00:03:40.000
and click run.

48
00:03:40.000 --> 00:03:47.020
Okay, let's clear out the console and try again.

49
00:03:47.020 --> 00:03:51.010
So it looks like we created a reservation successfully.

50
00:03:51.010 --> 00:03:57.010
Let's grab the ID, and open up Postman,

51
00:03:57.010 --> 00:04:02.020
and let's try to get that reservation by ID.

52
00:04:02.020 --> 00:04:05.040
Great, we are able to retrieve the reservation

53
00:04:05.040 --> 00:04:09.000
that was successfully created in our MongoDB instance.

