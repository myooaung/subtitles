WEBVTT
1
00:00:00.050 --> 00:00:01.080
- [Instructor] Now let's take a closer look

2
00:00:01.080 --> 00:00:07.040
at how we integrate an Angular app with a Spring REST API.

3
00:00:07.040 --> 00:00:10.060
Angular apps on both web and mobile will, generally,

4
00:00:10.060 --> 00:00:15.000
interact with Spring via an HTTP call.

5
00:00:15.000 --> 00:00:17.080
Spring Boot will expose various endpoints

6
00:00:17.080 --> 00:00:24.000
to perform different operations via a REST API contract.

7
00:00:24.000 --> 00:00:28.070
The contract is a agreement on how to access the API.

8
00:00:28.070 --> 00:00:32.080
We will model a REST API on a fictional property called

9
00:00:32.080 --> 00:00:35.000
the Landon Hotel.

10
00:00:35.000 --> 00:00:37.060
Our Spring Boot application will expose

11
00:00:37.060 --> 00:00:41.050
a series of endpoints defined by the HTTP verb,

12
00:00:41.050 --> 00:00:46.040
the URI and the expected request parameters.

13
00:00:46.040 --> 00:00:51.000
The GET endpoint expects an ID as a PATH parameter.

14
00:00:51.000 --> 00:00:56.080
Then it will retrieve of room reservation resource as JSON.

15
00:00:56.080 --> 00:01:01.010
The POST endpoint will expect a JSON request body.

16
00:01:01.010 --> 00:01:04.070
It will create a room reservation resource

17
00:01:04.070 --> 00:01:10.080
then return a JSON representing the created reservation.

18
00:01:10.080 --> 00:01:15.020
The PUT endpoint will expect an ID as a path parameter

19
00:01:15.020 --> 00:01:19.000
as well as a JSON request body.

20
00:01:19.000 --> 00:01:23.010
Then it will update the room reservation specified

21
00:01:23.010 --> 00:01:27.030
by the ID, then return a JSON representing

22
00:01:27.030 --> 00:01:30.010
the updated resource.

23
00:01:30.010 --> 00:01:34.030
The DELETE endpoint will take in an ID, then it will delete

24
00:01:34.030 --> 00:01:38.060
the associated room reservation resource.

25
00:01:38.060 --> 00:01:43.060
The PATCH verb is also sometimes used for partial updates.

26
00:01:43.060 --> 00:01:48.030
In our code we could use Spring Controller MVC annotations

27
00:01:48.030 --> 00:01:51.000
to define our endpoints.

28
00:01:51.000 --> 00:01:56.010
Annotations can be used to define the HTTP verb to be used,

29
00:01:56.010 --> 00:02:01.080
the URI of the resource, expected request params and body

30
00:02:01.080 --> 00:02:05.080
and the expected response of each endpoint.

31
00:02:05.080 --> 00:02:08.090
Let's break down the structure of our URI.

32
00:02:08.090 --> 00:02:12.010
First off, we have an HTTP verb

33
00:02:12.010 --> 00:02:15.000
which provides a uniform interface.

34
00:02:15.000 --> 00:02:18.040
These verbs give us a action counterpart

35
00:02:18.040 --> 00:02:21.050
to CRUD functionality on a resource.

36
00:02:21.050 --> 00:02:25.030
They allow us to create, retrieve, update

37
00:02:25.030 --> 00:02:28.020
and delete a resource.

38
00:02:28.020 --> 00:02:33.020
A domain allows us to organize similar resources.

39
00:02:33.020 --> 00:02:37.070
In general, a domain is a very cohesive set of resources.

40
00:02:37.070 --> 00:02:41.040
A hotel room domain could have amenities,

41
00:02:41.040 --> 00:02:46.020
reservations and service requests as resources.

42
00:02:46.020 --> 00:02:49.080
Versioning allows us to support multiple versions

43
00:02:49.080 --> 00:02:51.010
of an endpoint.

44
00:02:51.010 --> 00:02:53.080
It allows for backwards compatibility

45
00:02:53.080 --> 00:02:58.060
and also, it gives clients the chance to update over time

46
00:02:58.060 --> 00:03:03.040
as you deprecate an older version endpoint.

47
00:03:03.040 --> 00:03:07.000
A resource is basically anything that has a URI,

48
00:03:07.000 --> 00:03:09.050
a uniform resource identifier.

49
00:03:09.050 --> 00:03:12.090
Generally, you will be able to create, read,

50
00:03:12.090 --> 00:03:15.090
update or delete a resource.

51
00:03:15.090 --> 00:03:20.010
In this case, the resource is a room reservation.

52
00:03:20.010 --> 00:03:22.040
Finally we have a PATH parameter.

53
00:03:22.040 --> 00:03:25.050
The PATH parameter gives us a unique ID

54
00:03:25.050 --> 00:03:30.080
to look up an existing resource from the database.

55
00:03:30.080 --> 00:03:35.010
HTTP client offers a streamlined method

56
00:03:35.010 --> 00:03:39.080
of calling a REST API for an Angular app.

57
00:03:39.080 --> 00:03:44.010
Let's take a look at the Angular Project from a high level.

58
00:03:44.010 --> 00:03:46.060
First off we have components.

59
00:03:46.060 --> 00:03:49.020
Components consist of HTML,

60
00:03:49.020 --> 00:03:54.030
CSS, images and Typescript or JavaScript.

61
00:03:54.030 --> 00:03:57.050
Components contain your custom defined code.

62
00:03:57.050 --> 00:04:00.000
An Angular app, generally, will

63
00:04:00.000 --> 00:04:05.030
also contain various npm modules as dependencies.

64
00:04:05.030 --> 00:04:07.030
Also, an Angular Project will generally

65
00:04:07.030 --> 00:04:10.010
have several libraries for unit testing

66
00:04:10.010 --> 00:04:12.090
such as Karma and Jasmine.

67
00:04:12.090 --> 00:04:15.060
We also use a framework called Protractor

68
00:04:15.060 --> 00:04:17.030
for end-to-end testing.

69
00:04:17.030 --> 00:04:24.010
It's built on WebDriverJs, which is a part of Selenium.

70
00:04:24.010 --> 00:04:27.000
Let's take a look at how it all fits together.

71
00:04:27.000 --> 00:04:29.090
Let's say a Angular component needs to access

72
00:04:29.090 --> 00:04:32.050
the Spring API.

73
00:04:32.050 --> 00:04:36.040
The component will use the HTTP client

74
00:04:36.040 --> 00:04:40.060
to make a request to a Spring API endpoint.

75
00:04:40.060 --> 00:04:45.020
Spring Boot will accept and process that request.

76
00:04:45.020 --> 00:04:50.040
Then it will return a response via HTTP.

77
00:04:50.040 --> 00:04:53.010
A request from the HTTP client

78
00:04:53.010 --> 00:04:55.010
will be composed of the following:

79
00:04:55.010 --> 00:04:58.080
an HTTP verb such as GET or POST.

80
00:04:58.080 --> 00:05:02.090
Request parameters and/or a request body

81
00:05:02.090 --> 00:05:06.070
as well as headers such as content type.

82
00:05:06.070 --> 00:05:09.060
A response from Spring Boot will include

83
00:05:09.060 --> 00:05:14.050
the HTTP status code such as 200 okay.

84
00:05:14.050 --> 00:05:17.050
Potentially a JSON response body

85
00:05:17.050 --> 00:05:20.000
and also related headers.

