1
00:00:00,900 --> 00:00:03,290
Hello everyone and welcome to this lecture.

2
00:00:03,300 --> 00:00:04,110
Let's keep going.

3
00:00:04,800 --> 00:00:09,000
I know there was a lot of you know like questions here a lot of exercises but you know it's again it's

4
00:00:09,000 --> 00:00:12,160
for all it's all for your own benefit.

5
00:00:13,110 --> 00:00:14,920
After that you would become kind of master.

6
00:00:14,940 --> 00:00:20,130
You know when it comes to functions lambda expressions and you get them you know Master Python programming

7
00:00:20,130 --> 00:00:27,920
right after we continue the practical projects along with the machine learning section as well of course.

8
00:00:27,930 --> 00:00:28,170
All right.

9
00:00:28,470 --> 00:00:33,690
So question 7 I'm asking you to write a code that takes a range from a user upper and lower bounds.

10
00:00:33,820 --> 00:00:37,040
I return a list of positive and even numbers only.

11
00:00:37,050 --> 00:00:37,720
All right.

12
00:00:37,880 --> 00:00:48,870
So all we could do going to say okay it's going to say input and ask the user to enter a lower bound.

13
00:00:49,130 --> 00:00:50,270
Okay.

14
00:00:50,730 --> 00:00:52,070
And that will get out again.

15
00:00:52,080 --> 00:00:58,180
We can put it in for example bound men apologies.

16
00:00:58,300 --> 00:01:00,100
Now men equals two.

17
00:01:00,200 --> 00:01:01,560
You can copy that.

18
00:01:01,560 --> 00:01:02,830
You can put it here.

19
00:01:03,300 --> 00:01:07,320
I'm going to say enter the upper bound right.

20
00:01:07,440 --> 00:01:09,530
And then we're going to be bound Max.

21
00:01:10,190 --> 00:01:11,560
Okay looks good.

22
00:01:11,610 --> 00:01:11,910
All right.

23
00:01:12,480 --> 00:01:19,680
And what we could do here afterwards I'm going to say OK we can define the range.

24
00:01:19,690 --> 00:01:31,170
You can say key numbers equals to range between the bound men and bound Max.

25
00:01:31,170 --> 00:01:31,500
All right.

26
00:01:31,500 --> 00:01:32,510
So don't have the numbers.

27
00:01:32,520 --> 00:01:33,480
Right.

28
00:01:33,690 --> 00:01:41,370
And what I could do here is I wanted to return only the positive numbers and even numbers as well.

29
00:01:41,640 --> 00:01:46,190
So actually let's go ahead and use the lambda expression and actually use filter as well.

30
00:01:46,710 --> 00:01:46,950
OK.

31
00:01:46,950 --> 00:01:47,680
That's actually pretty.

32
00:01:47,730 --> 00:01:49,370
It's actually very interesting exercise.

33
00:01:49,650 --> 00:01:53,240
What we could do here I'm going to say OK filters if you guys remember.

34
00:01:53,460 --> 00:01:53,690
Right.

35
00:01:53,700 --> 00:01:59,230
And then we can simply we can apply something to an entire list which is my list here.

36
00:01:59,340 --> 00:01:59,640
Right.

37
00:02:00,660 --> 00:02:01,770
And what I could do.

38
00:02:01,920 --> 00:02:05,760
I'm going to take that list and apply specific condition on it.

39
00:02:05,760 --> 00:02:07,540
I'm going to take a filter.

40
00:02:07,620 --> 00:02:11,160
I'm going to say lambda right.

41
00:02:11,450 --> 00:02:18,520
The lambda I'm gonna take X and what I wanted to return wherever they were going to satisfy this condition.

42
00:02:19,070 --> 00:02:24,690
And my argument here is simply my numbers okay.

43
00:02:24,710 --> 00:02:25,960
He identified the condition yet.

44
00:02:26,000 --> 00:02:28,630
So let's take a look at the condition I want to turn positive numbers only.

45
00:02:28,690 --> 00:02:30,930
So X has to be greater than zero.

46
00:02:31,100 --> 00:02:32,310
Right.

47
00:02:32,420 --> 00:02:36,050
And I wanted to return only even numbers.

48
00:02:36,210 --> 00:02:36,420
OK.

49
00:02:36,440 --> 00:02:44,160
Now we're experts when it comes to that x divided by apologies x divided by two equals equals to zero.

50
00:02:44,390 --> 00:02:45,350
Right.

51
00:02:45,350 --> 00:02:53,660
So that will be filter of lambda expression if you get X if it satisfy this condition only you will

52
00:02:53,660 --> 00:02:54,430
get it back right.

53
00:02:54,790 --> 00:02:55,090
Okay.

54
00:02:55,100 --> 00:02:56,230
Sounds good.

55
00:02:56,300 --> 00:02:58,770
And we can cast that in a list format.

56
00:02:58,790 --> 00:02:59,460
You remember

57
00:03:02,580 --> 00:03:05,540
and let's put that in another list.

58
00:03:05,550 --> 00:03:09,210
Let's call it like filtered filters.

59
00:03:09,240 --> 00:03:19,430
Let's call it filter numbers for instance and let's print filter numbers.

60
00:03:19,600 --> 00:03:26,350
All right let's run that into through lower bound that say to an upper bound let's say 10.

61
00:03:26,470 --> 00:03:27,960
And that's what we're getting here.

62
00:03:28,010 --> 00:03:31,060
We're getting only positive numbers 2 2 4 6 and 8.

63
00:03:31,060 --> 00:03:37,780
And even that's I shot it again and it's put negative number let's put let's say minus 10 20 an upper

64
00:03:37,780 --> 00:03:39,430
bound it's make it 20.

65
00:03:39,430 --> 00:03:41,890
So again you've got only positive numbers right.

66
00:03:41,890 --> 00:03:45,690
So you only got positive numbers and upper bounds only which is perfect.

67
00:03:45,690 --> 00:03:49,300
That's exactly why I'm looking for and looking for even as well.

68
00:03:49,300 --> 00:03:50,560
All right.

69
00:03:50,560 --> 00:03:55,660
Question number eight I wanted to use filter and the expressions threaded code takes a list of numbers

70
00:03:55,660 --> 00:03:59,080
below and returns even numbers only.

71
00:03:59,170 --> 00:04:02,860
Actually that's pretty much the same you know kind of example that I've done before.

72
00:04:02,860 --> 00:04:03,700
Let's do it again.

73
00:04:03,700 --> 00:04:06,310
Again the idea is to practice as much as you can.

74
00:04:06,330 --> 00:04:07,350
So that's how can we do that.

75
00:04:07,360 --> 00:04:12,580
We're gonna say okay when I do lambda right.

76
00:04:12,700 --> 00:04:15,520
If you take X right.

77
00:04:15,610 --> 00:04:21,880
If simply if it satisfies this condition because remember I'm going to use it before landing this filter

78
00:04:22,490 --> 00:04:24,900
right.

79
00:04:25,390 --> 00:04:32,120
And I take a filter lambda if I take X only I only I will take X if it satisfy this condition right.

80
00:04:32,160 --> 00:04:39,280
If simply my X divided by two and it was equals zero.

81
00:04:39,390 --> 00:04:40,290
Right.

82
00:04:40,320 --> 00:04:45,410
And I will do that when I take my numbers all right.

83
00:04:45,410 --> 00:04:46,460
Looks good.

84
00:04:46,460 --> 00:04:49,160
And they need to cast that in a list format

85
00:04:52,980 --> 00:04:56,330
and I can call these even again one more time.

86
00:04:56,330 --> 00:04:58,680
It's pretty much the same as we have done here before.

87
00:04:58,680 --> 00:05:01,400
But here we actually headed like X greater than 0 2 as well right.

88
00:05:02,820 --> 00:05:03,820
Okay this looks good.

89
00:05:03,840 --> 00:05:05,840
And we can hit print.

90
00:05:06,240 --> 00:05:07,050
Let's say

91
00:05:09,710 --> 00:05:21,060
numbers that are my apologies that are divisible by two equals two.

92
00:05:21,070 --> 00:05:24,310
And here we can pass even numbers.

93
00:05:24,340 --> 00:05:25,820
All right let's run that.

94
00:05:25,900 --> 00:05:27,130
And that's what we're getting.

95
00:05:27,160 --> 00:05:29,230
So simply here we got only six.

96
00:05:29,230 --> 00:05:34,830
We got only 22 on 120 and 220 and two hundred which looks perfect.

97
00:05:34,850 --> 00:05:36,510
All right.

98
00:05:36,790 --> 00:05:42,750
Next question is I'm asking you to write a function that simply takes to on PI matrices or arrays here

99
00:05:42,820 --> 00:05:51,510
as we have here who have matrix X. We have matrix y and I wanted to return basically to call the functions

100
00:05:51,520 --> 00:05:57,480
called Matrix operation that would return the addition subtraction transpose product and or product.

101
00:05:57,490 --> 00:05:59,710
All right let's see how can we write that.

102
00:05:59,710 --> 00:06:02,030
I'm going to say OK matrix operations.

103
00:06:02,110 --> 00:06:03,280
So let's copy that.

104
00:06:03,310 --> 00:06:05,080
That's the name of the function right.

105
00:06:05,200 --> 00:06:06,150
And let's define it.

106
00:06:06,170 --> 00:06:08,230
We're going to define matrix operations.

107
00:06:08,230 --> 00:06:09,790
It will take a and b.

108
00:06:10,060 --> 00:06:10,480
Correct

109
00:06:13,550 --> 00:06:15,420
and let's go ahead and see how can we do that.

110
00:06:15,470 --> 00:06:20,660
First I wanted to print and I wanted to return the matrices addition first.

111
00:06:20,760 --> 00:06:26,490
I say keep matrices addition equals two.

112
00:06:27,060 --> 00:06:36,960
And I can pass along and P num pi dots add of EMV and that's actually how we how we add numbers when

113
00:06:36,960 --> 00:06:42,270
it comes to an umpire and only do MPD dot Ed and that's we'll do the addition for the both matrices.

114
00:06:42,270 --> 00:06:44,090
All right let's actually test it.

115
00:06:44,250 --> 00:06:46,910
So let's run the function first.

116
00:06:47,490 --> 00:06:48,000
OK.

117
00:06:48,000 --> 00:06:55,690
And let's run that's and that's what we're getting matrices addition is simply this.

118
00:06:55,790 --> 00:06:58,680
Well I guess I can see here is you know like a little bit shifted.

119
00:06:58,680 --> 00:06:58,880
Yes.

120
00:06:58,890 --> 00:06:59,820
The answer is right.

121
00:06:59,880 --> 00:07:07,890
Basically three plus two is five nine plus three is 12 a plus one is nine seven plus five is twelve

122
00:07:07,890 --> 00:07:11,280
looks good but we need to make a little bit more you know kind of pretty in a way.

123
00:07:11,300 --> 00:07:15,620
So going to say OK let's add here backslash and let's run that let's try it again.

124
00:07:15,630 --> 00:07:17,010
And that's what it looks like.

125
00:07:17,010 --> 00:07:22,480
So just going to write it in a new line so it can look a little bit better.

126
00:07:22,530 --> 00:07:23,950
All right looks great.

127
00:07:25,020 --> 00:07:27,100
So what we could do afterwards we could say OK.

128
00:07:27,150 --> 00:07:28,700
Let's do the exact same thing.

129
00:07:28,710 --> 00:07:31,560
But I wanted to do let's say subtraction.

130
00:07:31,890 --> 00:07:33,630
So let's do that.

131
00:07:33,630 --> 00:07:37,430
I mean I've seen sort of add are going to do subtract.

132
00:07:37,650 --> 00:07:39,860
OK let's do it again.

133
00:07:39,900 --> 00:07:44,130
Copy paste and let's do matrices.

134
00:07:44,130 --> 00:07:55,670
Actually it's call it subtract my apologies subtract and let's do here multiplication mattresses multiply

135
00:07:56,120 --> 00:07:57,590
equals two M.P. dot

136
00:07:59,940 --> 00:08:04,640
multiply that you multiply both.

137
00:08:04,920 --> 00:08:09,030
And let's do the deed.

138
00:08:09,390 --> 00:08:10,470
The divide as well.

139
00:08:10,470 --> 00:08:15,380
The division I'm gonna say OK actually I'm not asking for a division.

140
00:08:15,390 --> 00:08:18,570
I'm asking for addition subtraction is do the transpose it to the principal.

141
00:08:18,570 --> 00:08:19,860
That's pretty important.

142
00:08:19,900 --> 00:08:23,750
MELISSA Okay print actually let's go and copy it again.

143
00:08:26,070 --> 00:08:29,850
Copy paste and root for both matrices.

144
00:08:29,850 --> 00:08:31,540
I'm going to copy and paste again.

145
00:08:31,600 --> 00:08:38,770
Melissa came key this math matrix only made matrix is not matrices matrix transpose right.

146
00:08:38,950 --> 00:08:41,110
I'm going to do N.P. dots.

147
00:08:41,220 --> 00:08:42,520
What we could do here.

148
00:08:42,630 --> 00:08:44,040
I don't need to do any of this.

149
00:08:44,040 --> 00:08:45,240
What I could do.

150
00:08:45,240 --> 00:08:47,720
I'm going to say OK what I could do here.

151
00:08:47,730 --> 00:08:57,120
I need to simply get whatever matrix I'm getting to a and get dot t dot uppercase t that should simply

152
00:08:57,300 --> 00:08:58,350
does the trick for us.

153
00:08:58,350 --> 00:08:59,920
It will get the transpose.

154
00:09:00,000 --> 00:09:07,050
I can actually go here remove all that and get the transpose for the next one to take a b dot transpose

155
00:09:07,050 --> 00:09:09,130
as well.

156
00:09:09,190 --> 00:09:09,760
All right.

157
00:09:09,760 --> 00:09:10,750
Looks good.

158
00:09:11,460 --> 00:09:12,330
OK.

159
00:09:12,520 --> 00:09:14,650
Let's actually test it at this stage.

160
00:09:14,650 --> 00:09:15,430
Let's run it.

161
00:09:15,500 --> 00:09:16,340
Let's run it.

162
00:09:16,390 --> 00:09:17,920
And that's what we're getting here.

163
00:09:17,920 --> 00:09:20,510
It looks like we don't have any errors which is good.

164
00:09:20,520 --> 00:09:20,670
What.

165
00:09:20,670 --> 00:09:26,290
Getting the subtraction which is let's test one numbers to 1 for example which is simply three minus

166
00:09:26,290 --> 00:09:26,530
two.

167
00:09:26,560 --> 00:09:28,770
OK that looks good.

168
00:09:28,870 --> 00:09:33,070
All right let's get the multiplication which is simply the multiplication of matrices.

169
00:09:33,120 --> 00:09:36,610
So because remember that's not dot multiplication actual multiply.

170
00:09:36,670 --> 00:09:36,880
Right.

171
00:09:38,630 --> 00:09:41,650
What I could do here is I can get a transpose as well.

172
00:09:41,660 --> 00:09:47,510
So transpose is simply getting the rows and transfers transverse make it rows columns.

173
00:09:47,590 --> 00:09:47,890
Right.

174
00:09:47,900 --> 00:09:54,470
So what we could do here is for Matrix first matrix X we actually transpose it so it became 3 9.

175
00:09:54,470 --> 00:09:58,090
This row became this column 3 9 right.

176
00:09:58,360 --> 00:10:07,730
And then 8 5 which is a row became column 8 5 matrix multiply which is 2 3 1 7 and then it became 2

177
00:10:07,730 --> 00:10:09,720
3 and then he became 1 7.

178
00:10:09,740 --> 00:10:11,630
All right looks perfect.

179
00:10:11,630 --> 00:10:16,670
What we could do as well is I can ask you to get the dot product right.

180
00:10:16,670 --> 00:10:21,270
So instead of multiplication need to get dot product let's actually get the exact same stuff here.

181
00:10:21,530 --> 00:10:34,210
Let's add it here and let's get the dot product multiply matrices dot multiply and say N.P. in here

182
00:10:34,210 --> 00:10:43,000
we could say and p dot dot and that should do the DOT multiplication that's done it again.

183
00:10:43,050 --> 00:10:43,350
All right.

184
00:10:43,800 --> 00:10:49,140
So when we do the M P dot multiply that's actually element by element multiplication.

185
00:10:49,130 --> 00:10:53,520
So if you guys take care here you will find that we multiply three by two become six.

186
00:10:53,520 --> 00:10:54,340
Right.

187
00:10:54,420 --> 00:10:56,820
We have nine by C becomes 27 and so on.

188
00:10:56,830 --> 00:10:58,710
So you're doing element by element multiplication.

189
00:10:58,710 --> 00:11:03,660
However when we do the NDP dot dot that will do an actual multiplication.

190
00:11:03,660 --> 00:11:05,790
Right so multiply the two matrices together.

191
00:11:05,790 --> 00:11:07,710
Please go ahead to the map mathematics basics.

192
00:11:07,710 --> 00:11:11,210
You know we multiply to basically multiply two mattresses together.

193
00:11:11,340 --> 00:11:13,180
OK.

194
00:11:13,350 --> 00:11:17,700
Unfortunately I don't have kind of a summary here of the multiplication process but you simply take

195
00:11:17,700 --> 00:11:21,510
the first row and multiply by the second column and so on so forth.

196
00:11:21,600 --> 00:11:25,590
If you want to element by element of application please use m p dot multiply.

197
00:11:26,220 --> 00:11:27,020
All right.

198
00:11:27,570 --> 00:11:28,080
OK.

199
00:11:28,110 --> 00:11:34,160
If you wanted to get let's say the square root for example of one element to consider K print I'm going

200
00:11:34,160 --> 00:11:47,840
to say square roots of Matrix equals two and you can add again backslash n and you can simply add square

201
00:11:47,840 --> 00:11:55,190
root of let's say let's pick one matches is let's pick the first one that says square root of a for

202
00:11:55,190 --> 00:11:56,390
example.

203
00:11:56,390 --> 00:12:03,940
All right let's run that round again and it's telling you there is an error here.

204
00:12:04,040 --> 00:12:06,940
So here we didn't specify num pi.

205
00:12:06,970 --> 00:12:09,150
So we have to speak its end p dot squared.

206
00:12:09,210 --> 00:12:12,060
So and again let's run it again and that's it.

207
00:12:12,050 --> 00:12:12,780
Works great.

208
00:12:12,780 --> 00:12:17,480
So you guys can see here the square root of element by element squirrel tried to end up square root

209
00:12:17,480 --> 00:12:20,060
of nine is basically three that's what we're getting here right.

210
00:12:20,270 --> 00:12:22,310
So that's the square root of these elements.

211
00:12:22,310 --> 00:12:23,050
All right.

212
00:12:23,070 --> 00:12:25,010
And that's pretty much all what I have for this lecture.

213
00:12:25,010 --> 00:12:26,210
I hope you guys enjoyed it.

214
00:12:26,240 --> 00:12:28,160
And one more lectures to go.

215
00:12:28,160 --> 00:12:29,030
We're going to keep going.

216
00:12:29,030 --> 00:12:32,840
To finish lectures questions ten up till twelve.

217
00:12:32,840 --> 00:12:35,930
Hope you guys enjoy the lecture and see you in the next lecture.
