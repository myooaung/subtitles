1
00:00:02,130 --> 00:00:09,150
So we added csrf token protection but it will only work if we are visiting our get index page.

2
00:00:09,150 --> 00:00:15,930
Now we want to have such a token and by the way also, our authentication status on every page we render.

3
00:00:16,740 --> 00:00:23,910
What we can do to get it onto every page is we can remove it from our render function here and instead

4
00:00:23,940 --> 00:00:26,280
tell expressjs

5
00:00:26,340 --> 00:00:32,850
and this is now totally unrelated from csrf thing, tell expressjs that we have some

6
00:00:32,850 --> 00:00:36,190
data that should be included in every rendered view.

7
00:00:36,720 --> 00:00:43,760
We'll do this in the app.js file and there after this middleware where we extract the user

8
00:00:43,830 --> 00:00:51,180
but before all our routes, I'll add another middleware, a normal middleware with our normal middleware function

9
00:00:51,180 --> 00:00:58,080
with the three arguments and in there, we can use a special feature provided by expressjs, we can access

10
00:00:58,080 --> 00:01:02,420
a special field on the response, the locals field.

11
00:01:02,430 --> 00:01:09,360
This allows us to set local variables that are passed into the views, local simply because well they

12
00:01:09,360 --> 00:01:12,100
will only exist in the views which are rendered.

13
00:01:12,300 --> 00:01:19,770
So there, we can add our isAuthenticated property which I removed from the render function where I access

14
00:01:19,770 --> 00:01:23,570
request session is logged in

15
00:01:23,750 --> 00:01:34,030
and I can also add my csrf token variable which I get from request csrf token from this function.

16
00:01:34,040 --> 00:01:39,770
So now for every request that is executed, these two fields will be set for the views that are rendered

17
00:01:40,130 --> 00:01:46,700
and then we have to call next so that we are able to continue. With this if we go back and we reload

18
00:01:46,700 --> 00:01:49,670
this page, seems to work, seems to work

19
00:01:49,700 --> 00:01:54,480
and now let's also try signing in where we also have a post request

20
00:01:54,890 --> 00:01:56,040
and now this fails

21
00:01:56,060 --> 00:01:58,700
and now do you know why? Well

22
00:01:58,720 --> 00:02:04,600
because I do pass my token into all views but in the views, I still need to use it.

23
00:02:04,940 --> 00:02:09,160
So for that, we have to repeat the code we added to the navigation,

24
00:02:09,160 --> 00:02:12,720
we need that hidden input with that name and that value

25
00:02:12,910 --> 00:02:17,760
and we have to add it into all our forms and that is something you just have to do.

26
00:02:17,890 --> 00:02:24,730
So for example here in the Add to Cart post form, we need that hidden input with the csrf token and also

27
00:02:24,740 --> 00:02:33,580
in admin edit product, we need somewhere in that form that hidden token input. The same for our auth routes

28
00:02:33,580 --> 00:02:39,290
of course, when logging in we need that hidden input and the same for signing up,

29
00:02:39,290 --> 00:02:43,370
this is required. In the products.ejs in the admin folder, there

30
00:02:43,390 --> 00:02:48,490
we also have a form for deleting a product, we need the token in there too.

31
00:02:49,000 --> 00:02:55,820
And in the shop in the cart, we also have a delete cart item button, we need the hidden input there as well

32
00:02:56,710 --> 00:03:03,160
and also down there for the order now button, this also sends a post request and we need our hidden input

33
00:03:03,170 --> 00:03:06,860
there, our csrf token. On index.ejs

34
00:03:07,070 --> 00:03:09,280
we don't need it, in add to cart

35
00:03:09,350 --> 00:03:15,830
I just added it so there we already have it, in the product list page, it's the same, it was added

36
00:03:15,830 --> 00:03:18,470
to add to cart and on the product detail page,

37
00:03:18,470 --> 00:03:23,570
I also only have add to cart. On the orders page here,

38
00:03:23,650 --> 00:03:25,360
we also have no post form.

39
00:03:25,540 --> 00:03:29,230
So now we should have this token everywhere where we need it

40
00:03:29,320 --> 00:03:36,990
and if you save all that and you now go back to your let's say starting page and you visit the login page

41
00:03:37,020 --> 00:03:38,470
and you do login,

42
00:03:38,520 --> 00:03:44,640
this now works because we have that token, we also can add items to the cart,

43
00:03:44,940 --> 00:03:47,880
we can also order them,

44
00:03:48,530 --> 00:03:51,350
well there is an error which we'll fix in a second.

45
00:03:51,360 --> 00:03:54,110
So for now let's not order them but let's delete them,

46
00:03:54,110 --> 00:03:56,970
this works and generally this works.

47
00:03:57,010 --> 00:04:03,120
Now let me fix this bug here which is not related to the csrf token in the next lecture real quick but this

48
00:04:03,130 --> 00:04:08,830
hopefully and that is the main takeaway here, shows you how to use csrf protection and this is a

49
00:04:08,830 --> 00:04:13,780
crucial thing which you have to add to any production ready application,

50
00:04:13,780 --> 00:04:15,030
it's not optional

51
00:04:15,130 --> 00:04:17,880
otherwise you'll have a huge security issue on your page.

52
00:04:18,010 --> 00:04:21,790
You need to add this to ensure that your sessions don't get stolen.
