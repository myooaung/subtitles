WEBVTT
1
00:00:02.140 --> 00:00:07.240
We're nearing the end of this module because we already learned a lot about the core concepts of expressjs

2
00:00:07.260 --> 00:00:12.910
and this therefore is a crucial module because all the rest of the course will basically build up on

3
00:00:12.910 --> 00:00:17.200
this and this knowledge of how expressjs works.

4
00:00:17.210 --> 00:00:24.250
Now even though our dummy app here is really simple thus far, we're already putting all our code into

5
00:00:24.260 --> 00:00:27.240
the single app.js file which is therefore getting bigger.

6
00:00:27.490 --> 00:00:31.170
Now obviously for an app of this size, it's not a problem at all,

7
00:00:31.180 --> 00:00:39.350
it's still pretty small but typically we want to split our routing code over multiple files,

8
00:00:39.430 --> 00:00:44.410
we want to basically export our logic in different files and import it into this file.

9
00:00:44.590 --> 00:00:50.500
We could do this, we could create files where we export these functions but expressjs actually gives

10
00:00:50.500 --> 00:00:54.880
us a pretty nice way of outsourcing routing into other files.

11
00:00:55.150 --> 00:00:57.930
And for this I'll change our folder structure a bit,

12
00:00:58.050 --> 00:01:01.180
I'll add a new folder which I'll name routes.

13
00:01:01.360 --> 00:01:02.650
Now you don't have to name this,

14
00:01:02.650 --> 00:01:04.290
you could name it differently too

15
00:01:04.420 --> 00:01:10.540
but it's a convention you often see, that you put your routing related code, so your code that should execute

16
00:01:10.540 --> 00:01:17.050
four different paths and http methods, that you put that into files which you store in the routes folder

17
00:01:17.750 --> 00:01:23.870
and there since we're building or we're slowly building towards an online shop here,

18
00:01:24.130 --> 00:01:31.300
I'll have a route which I'll name admin.js because this should be the route that handles the creation

19
00:01:31.300 --> 00:01:34.490
of products which the admin of the shop can do.

20
00:01:34.480 --> 00:01:38.370
I'll also add another file and that will be shop.js,

21
00:01:38.380 --> 00:01:44.650
so basically what the users see let's say. Now I'll not build the full shop here, we'll slowly develop it

22
00:01:44.710 --> 00:01:49.910
over to the next lectures and modules because it uses a lot of cool features like databases and so on

23
00:01:50.410 --> 00:01:57.610
but we can at least start putting our code into these files here. The add product route and this product

24
00:01:57.610 --> 00:02:04.300
post request should certainly go into our admin.js file because these are routes that are reached

25
00:02:04.720 --> 00:02:12.230
by the admin and the general route here should go into our shop.js file, so that users that are visiting

26
00:02:12.230 --> 00:02:14.680
our front page see this route.

27
00:02:14.680 --> 00:02:20.680
Now one convenient feature offered by expressjs to achieve this is to go into these files and import

28
00:02:20.710 --> 00:02:27.700
express again, you can and you typically do import this into multiple files and then we can use a feature

29
00:02:27.860 --> 00:02:30.220
of it called the router.

30
00:02:30.220 --> 00:02:35.140
Now you can also create this with a lowercase r at the beginning, the name is totally up to you

31
00:02:35.590 --> 00:02:42.890
and I do create that router by calling express.router and this is a function I execute.

32
00:02:42.910 --> 00:02:50.020
This router is like a mini express app tied to the other express app or pluggable into the other express app

33
00:02:50.020 --> 00:02:52.730
I'll say which we can export here,

34
00:02:52.780 --> 00:02:57.070
so here I can use module exports and set it equal to the router.

35
00:02:57.520 --> 00:02:59.020
Now of course this doesn't do much,

36
00:02:59.020 --> 00:03:05.290
we have to use that router to now register things and actually I'll name this here with a lowercase

37
00:03:05.350 --> 00:03:08.380
r to be in line with my other names,

38
00:03:08.380 --> 00:03:11.340
this however has to have a capital case r.

39
00:03:11.890 --> 00:03:19.660
So now the router here can be used to again define a use function for all requests, a get function

40
00:03:19.690 --> 00:03:22.480
for get, post for post and so on

41
00:03:22.690 --> 00:03:28.930
So basically we can go back to the app.js file, cut these two admin routes from there, put them in

42
00:03:28.930 --> 00:03:36.260
here in the admin.js file and simply replace app with router here.

43
00:03:36.300 --> 00:03:42.620
Now the router gets exported, so the router now has these two routes registered because we exported here

44
00:03:42.690 --> 00:03:48.540
and this is the object on which we registered these routes, the other code can stay as it is because the

45
00:03:48.840 --> 00:03:54.840
router functions here basically work in exactly the same way as the app use function does or the app

46
00:03:54.840 --> 00:03:56.540
get and so on function does,

47
00:03:56.850 --> 00:04:01.920
I'll rename this to get though because I only want to handle get requests to add product and return

48
00:04:01.920 --> 00:04:03.410
this form

49
00:04:03.660 --> 00:04:10.410
and with that, with this exported here, we can now import that into the app.js file.

50
00:04:10.440 --> 00:04:16.200
Now for this, I'll add an import at the top separated from express to make sure or to make clear that

51
00:04:16.200 --> 00:04:22.880
this is my own file and I'll name it admin routes, the name is totally up to you

52
00:04:23.040 --> 00:04:31.510
but I do require a relative path to the routes folder and that in there, the admin file and you can

53
00:04:31.510 --> 00:04:36.900
omit the .js as I already explained, this will be added automatically. So now this is

54
00:04:36.910 --> 00:04:44.380
importing this router object here and this router object in turn has these routes registered and

55
00:04:44.500 --> 00:04:49.600
the nice thing is about this router that it is actually a valid middleware function.

56
00:04:49.600 --> 00:04:56.540
So we can take admin routes and just call app use and put our admin routes in there, just like this,

57
00:04:56.650 --> 00:04:58.390
not calling it like a function,

58
00:04:58.450 --> 00:05:06.340
so without parentheses but simply just the object itself, the router object we're exporting in this file.

59
00:05:06.970 --> 00:05:15.070
We can use this here and now this will automatically consider our routes in the admin.js file when filing

60
00:05:15.070 --> 00:05:17.340
the request through this middleware here.

61
00:05:17.410 --> 00:05:24.440
Now just before, the order matters so if we put this after this middleware, we will never reach that

62
00:05:24.460 --> 00:05:27.120
so this hasn't changed.

63
00:05:27.240 --> 00:05:30.200
Now we can do the same for our front facing route here,

64
00:05:30.210 --> 00:05:35.440
let's go to the shop.js file and there again, feel free to pause the video and try this on your own,

65
00:05:35.460 --> 00:05:43.560
try to implement this with the express router as we just did in the admin.js file. Were you successful?

66
00:05:43.580 --> 00:05:51.410
Let's import express first of all by requiring express, then let's create that router object by calling

67
00:05:51.410 --> 00:05:54.440
express.router as a function,

68
00:05:54.890 --> 00:05:57.670
let's export the router here

69
00:05:58.960 --> 00:06:06.910
and let's then use app use or paste in what I copied but replace app with router and maybe use with

70
00:06:06.910 --> 00:06:14.320
get. You don't have to do that, the use method would exist too but now we only handle get requests here.

71
00:06:14.450 --> 00:06:21.560
Now we can go back to admin.js, excuse me, to app.js and import all routes there too, the order of the

72
00:06:21.560 --> 00:06:23.280
imports doesn't matter,

73
00:06:23.450 --> 00:06:30.310
so my shop routes I require them from the routes folder and there from the shop.js file

74
00:06:30.560 --> 00:06:35.230
and now here again, the order matters, we should register this second.

75
00:06:35.240 --> 00:06:40.720
Now if I save this and I reload add routes, add product, this works.

76
00:06:40.730 --> 00:06:43.200
Now actually here's one important thing to understand,

77
00:06:44.050 --> 00:06:53.270
even if I would switch the position here and have shop routes first and I reload, it would work and we

78
00:06:53.270 --> 00:06:55.470
would not end up in this route

79
00:06:55.610 --> 00:07:02.810
but this only happens because I have get here. Get, post and so on will actually do an exact match here.

80
00:07:03.140 --> 00:07:10.860
If I would use use here as I did before to handle any incoming http method, then if I reload here we see

81
00:07:10.860 --> 00:07:12.550
hello from express again.

82
00:07:12.800 --> 00:07:18.830
So this exact matching is not achieved by using the router but because we use get here and that would

83
00:07:18.830 --> 00:07:24.790
have been the same if we stick to the app way of doing this in the app.js file we had previously.

84
00:07:24.980 --> 00:07:26.810
So get,

85
00:07:26.810 --> 00:07:32.160
also make sure that it's not just a get method but this exact path and therefore

86
00:07:32.300 --> 00:07:39.770
now if I enter some random stuff, I actually get an error because now I got no single middleware that

87
00:07:39.770 --> 00:07:41.120
would handle this

88
00:07:41.330 --> 00:07:46.190
but I do have my route set up here now and split up and then registered here

89
00:07:46.310 --> 00:07:51.620
and as I mentioned, it's not the worst practice to still care about the order here

90
00:07:51.800 --> 00:07:55.610
even though at the moment, it'll work fine no matter what the order is

91
00:07:55.610 --> 00:08:01.220
but if you ever change something back to use, it would matter and therefore why don't we just care about

92
00:08:01.220 --> 00:08:02.520
it right from the start.
