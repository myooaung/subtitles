1
00:00:02,270 --> 00:00:03,740
So let's start working on the rest

2
00:00:03,740 --> 00:00:04,710
API again

3
00:00:04,850 --> 00:00:12,410
and for that I'll run npm start in my rest API nodejs project too and that is also the reason why

4
00:00:12,410 --> 00:00:17,440
I'm using different ports by the way. Here I'm starting the application on port 8080,

5
00:00:17,510 --> 00:00:24,920
my frontend application automatically takes port 3000 and this simulates that these two ends

6
00:00:24,980 --> 00:00:28,630
of my application are served by different servers

7
00:00:28,640 --> 00:00:34,790
in the end which is a pretty common scenario since frontend only applications like react can be served

8
00:00:34,790 --> 00:00:41,180
on so-called static hosts which are optimized for applications that only consist of html, javascript

9
00:00:41,180 --> 00:00:47,120
and css and hence you might indeed have two different servers even if you created both the backend

10
00:00:47,270 --> 00:00:48,560
and the frontend.

11
00:00:48,620 --> 00:00:53,000
So we have different ports and therefore we have different domains and therefore we definitely need

12
00:00:53,060 --> 00:00:54,160
our course headers

13
00:00:54,200 --> 00:00:56,050
otherwise nothing would work

14
00:00:56,120 --> 00:00:59,720
and with that, we can now start working on our feed routes.

15
00:00:59,750 --> 00:01:06,110
We actually got two routes already, /posts and /post for creating a new post and for getting

16
00:01:06,110 --> 00:01:07,230
existing posts

17
00:01:07,310 --> 00:01:14,600
and now let's add some logic so to our controller actions to actually return something useful and to

18
00:01:14,600 --> 00:01:17,180
enable the user to create new posts.

19
00:01:17,180 --> 00:01:23,530
Let's maybe start with getting posts because that would allow us see at least some dummy data,

20
00:01:23,720 --> 00:01:31,880
so that is something useful. For that in get posts, we actually already return a list of dummy data posts,

21
00:01:31,910 --> 00:01:35,610
each post has a title and some content.

22
00:01:35,610 --> 00:01:42,410
Now it's of course always up to you how you want your data to look like in an application. In this application

23
00:01:42,470 --> 00:01:44,750
because my frontend also expects it,

24
00:01:44,930 --> 00:01:51,740
I want to have a post which in the end consists of a title which has a user attached to it, a creator

25
00:01:51,860 --> 00:01:58,400
or an author which has a creation date which has an image and which has some content.

26
00:01:58,400 --> 00:02:00,390
This is what I want to output in my frontend

27
00:02:00,470 --> 00:02:04,370
so the data we store on the server should have all these fields in the end.

28
00:02:04,370 --> 00:02:07,330
Now we don't have to start with the full package though,

29
00:02:07,340 --> 00:02:09,760
I already have a title and content here,

30
00:02:09,890 --> 00:02:13,330
now let's maybe add some image url here

31
00:02:13,370 --> 00:02:17,210
and for that I'll create a new images folder

32
00:02:17,360 --> 00:02:21,800
and for the moment I will just copy an image into that folder,

33
00:02:21,800 --> 00:02:28,730
later we'll of course add image upload. I'll copy in my good old duck image which I used before in the

34
00:02:28,730 --> 00:02:31,370
course

35
00:02:31,580 --> 00:02:33,680
and here it is, the lovely duck.jpg

36
00:02:33,920 --> 00:02:36,290
and I want to serve that duck.

37
00:02:36,320 --> 00:02:38,600
So here in image url

38
00:02:38,780 --> 00:02:50,560
I will actually provide images/duck.jpg as a path because that is my local path on the server

39
00:02:50,560 --> 00:02:55,130
here. It's missing my domain and so on, we'll have to attach this on the frontend

40
00:02:55,270 --> 00:03:02,260
but this is now a post as I could serve it. If I now save this, we can actually fetch that data with a get

41
00:03:02,260 --> 00:03:11,020
request to localhost 8080/feed because that is what we have as a filter to reach the feed routes,

42
00:03:11,080 --> 00:03:14,830
so /feed/posts.

43
00:03:14,830 --> 00:03:19,480
Now let's try that out in our frontend application, there

44
00:03:19,540 --> 00:03:29,200
we fetch our posts in a feed.js file in the source pages feed folder, in there you should find a load

45
00:03:29,320 --> 00:03:31,450
posts function.

46
00:03:31,450 --> 00:03:38,620
Load posts is a function that is called by the react code and so on in the end and what we do here is

47
00:03:38,870 --> 00:03:42,310
I also support pagination which we'll add later,

48
00:03:42,490 --> 00:03:51,820
for now I just want to reach out to my url which is http localhost 8080,

49
00:03:51,910 --> 00:03:53,260
written like this

50
00:03:54,650 --> 00:03:59,210
and then /feed/posts like this.

51
00:03:59,230 --> 00:04:02,570
So this route I just talked about in the rest API.

52
00:04:02,990 --> 00:04:05,750
This should fetch all these posts, then

53
00:04:05,740 --> 00:04:09,860
here I just check if the status code is not equal to 200

54
00:04:09,910 --> 00:04:14,830
which would mean that something went wrong and then I throw a new error which is handled in your react

55
00:04:14,830 --> 00:04:16,060
application

56
00:04:16,060 --> 00:04:23,530
otherwise I extract my body and then here, I have my body and I use some react logic to load that body

57
00:04:23,530 --> 00:04:26,590
in the end and to hopefully display it.

58
00:04:26,590 --> 00:04:34,890
If I save that and I go back to my application, I'll get an error regarding the name,

59
00:04:34,930 --> 00:04:36,990
the author name which is missing,

60
00:04:37,070 --> 00:04:44,000
I'm not supporting users yet so this will be a problem for the moment and we'll also get an error regarding

61
00:04:44,000 --> 00:04:45,650
the date eventually.

62
00:04:45,680 --> 00:04:51,880
So to avoid this, we should go back to our controller and add some dummy data for this too.

63
00:04:52,040 --> 00:04:57,290
Let's add a creator object because that is what I'll be looking for in my react code which should be

64
00:04:57,290 --> 00:05:00,560
an object with a name where you can enter any name you want,

65
00:05:00,590 --> 00:05:03,760
later we'll of course connect this to a real user in the database

66
00:05:03,950 --> 00:05:05,380
and let's also add a date

67
00:05:05,390 --> 00:05:10,050
and here you can simply create a new date with, well new date like this.

68
00:05:10,070 --> 00:05:16,580
Last but not least, you also want to add some ID and that should be _id because I'll be looking

69
00:05:16,580 --> 00:05:19,320
for _id in the frontend code

70
00:05:19,350 --> 00:05:20,910
in the react application

71
00:05:21,020 --> 00:05:26,960
because later we'll use mongoose again here and that of course or mongodb in general and that of

72
00:05:26,960 --> 00:05:29,750
course simply adds IDs with _id,

73
00:05:29,810 --> 00:05:33,110
so here you can enter any ID you want.

74
00:05:33,110 --> 00:05:38,690
Now if you save that updated controller code and the server therefore restarts, you can reload and

75
00:05:38,690 --> 00:05:40,020
you'll still get that error

76
00:05:40,040 --> 00:05:43,970
which is related to our status, our user status which we still can't fetch

77
00:05:43,970 --> 00:05:50,670
but if you simply click that away, you see that first post here and that is looking better than before.

78
00:05:51,440 --> 00:05:57,180
The invalid date is a problem because actually the field should be named createdAt, not date, there was

79
00:05:57,180 --> 00:05:59,120
a tiny mistake on my side, on the server

80
00:05:59,140 --> 00:06:00,620
it should be createdAt.

81
00:06:00,630 --> 00:06:04,170
With that if you reload, you'll see this post.

82
00:06:04,170 --> 00:06:05,870
So fetching posts works,

83
00:06:05,880 --> 00:06:09,660
of course it's just dummy data though. To work with real data,

84
00:06:09,660 --> 00:06:16,500
I want to be able to create new posts by clicking new post, so that is something we can add as a next step.
