1
00:00:02,550 --> 00:00:09,000
To store the password we should hash it so that if someone gains access to our database, the password

2
00:00:09,000 --> 00:00:12,290
is not stored in plaintext. For that,

3
00:00:12,420 --> 00:00:18,930
I'll install a new package which we used before and that is bcryptjs which allows us to hash

4
00:00:18,930 --> 00:00:23,840
a password in a secure way. After this was installed,

5
00:00:24,030 --> 00:00:32,460
we can rerun npm start and now in my auth controller, I'll import bcrypt by requiring it from the

6
00:00:32,460 --> 00:00:36,020
bcryptjs package and in there,

7
00:00:36,390 --> 00:00:44,340
so in down there in my sign up action, I'll use bcrypt and there, the hash method to hash the

8
00:00:44,340 --> 00:00:48,110
password which is plaintext here with a salt of 12,

9
00:00:48,120 --> 00:00:49,560
so a strength of 12

10
00:00:49,560 --> 00:00:50,550
so to say

11
00:00:51,150 --> 00:00:57,910
and I'll then continue or face errors here.

12
00:00:57,960 --> 00:01:01,700
Now if I have an error here somewhere,

13
00:01:01,790 --> 00:01:03,700
then it'll be a server side error,

14
00:01:03,770 --> 00:01:06,090
I'll copy the logic from before,

15
00:01:06,500 --> 00:01:12,380
so from my feed.js controller where I just check for the existence of a status code, if no status code

16
00:01:12,380 --> 00:01:12,940
exists,

17
00:01:12,980 --> 00:01:13,380
I'll set

18
00:01:13,380 --> 00:01:14,890
500 and

19
00:01:14,990 --> 00:01:17,160
well throw that error like this.

20
00:01:19,220 --> 00:01:27,600
In the then block however, we'll have our hashed password and that is the password I now want to store

21
00:01:27,600 --> 00:01:29,160
in the database.

22
00:01:29,280 --> 00:01:38,110
So in here, I'll now create a new user with the help of my user constructor, so my user model created

23
00:01:38,100 --> 00:01:42,370
through mongoose and I'll set the fields I need to set on the user,

24
00:01:42,450 --> 00:01:46,600
so that would be email, password, name, status.

25
00:01:46,650 --> 00:01:53,980
Actually we can change the status here from require true to default of I am new,

26
00:01:54,180 --> 00:01:56,780
so now we don't need to set it when creating a user, instead

27
00:01:56,790 --> 00:02:01,430
every user will start with this status here, just a little adjustment.

28
00:02:01,640 --> 00:02:07,950
With that we don't need to set the status but we do need to set e-mail, password and name. So the email

29
00:02:07,950 --> 00:02:11,050
is the extracted e-mail, the password

30
00:02:12,500 --> 00:02:19,570
is the hashed password, not the extracted one but the hashed one to secure this and the name is the extracted

31
00:02:19,570 --> 00:02:20,860
name.

32
00:02:20,920 --> 00:02:28,360
Now last but not least, I will call save to save that to the database and I will return that so that we can

33
00:02:28,360 --> 00:02:29,160
add another

34
00:02:29,170 --> 00:02:36,380
then block where we get the result of that database operation and here we know it will have succeeded,

35
00:02:36,490 --> 00:02:44,290
so we can return a response with a status code of 201 because a resource was created where

36
00:02:44,290 --> 00:02:53,180
I can return some json data with a message of user created and then maybe the user ID which I can extract

37
00:02:53,180 --> 00:03:00,000
from the result which is the user object, result._id.

38
00:03:00,020 --> 00:03:02,280
So now we're creating a user here,

39
00:03:02,690 --> 00:03:07,820
let's now save that and to see that on the frontend, we need to go into the frontend code and in there to

40
00:03:07,820 --> 00:03:09,910
the app.js file

41
00:03:10,220 --> 00:03:17,960
and here first of all, we need to correct our url and I also need to change something so that we start

42
00:03:18,320 --> 00:03:20,040
in unauthenticated mode.

43
00:03:20,150 --> 00:03:22,990
Currently we are starting as if we were authenticated,

44
00:03:23,000 --> 00:03:25,470
I'll have to change that in the frontend too.

45
00:03:25,550 --> 00:03:34,510
Now first of all in the sign up handler, let's fix that url and there, the url will be localhost

46
00:03:34,880 --> 00:03:42,160
8080/auth/signup and that will reach this route here right

47
00:03:42,200 --> 00:03:44,110
because it's /signup

48
00:03:44,250 --> 00:03:50,140
and we only end up there for requests that start with /auth.

49
00:03:50,160 --> 00:03:58,050
Now we defined a put request here on the backend so we have to set the method in the second argument in

50
00:03:58,050 --> 00:03:59,820
this object we pass to fetch,

51
00:03:59,940 --> 00:04:03,240
we have to set the method to put.

52
00:04:03,300 --> 00:04:07,950
We also need to append some data and that data will be of type application json,

53
00:04:08,100 --> 00:04:13,140
so we should add the content type header and set this to application

54
00:04:13,140 --> 00:04:21,800
json. Last but not least, let's add the request body and here we'll need to use json stringify to convert

55
00:04:21,840 --> 00:04:28,200
an object to json and that object will be a javascript object with the e-mail which we can retrieve

56
00:04:28,200 --> 00:04:32,970
from auth data email, auth data is an argument we'll get here

57
00:04:32,970 --> 00:04:37,040
and I wrote the code to make sure that we get the data the user entered.  

58
00:04:37,440 --> 00:04:39,320
So we'll get the e-mail,

59
00:04:39,450 --> 00:04:41,940
we'll get the password

60
00:04:41,960 --> 00:04:49,250
so let's also extract that from auth data and we'll get the name from auth data,

61
00:04:49,280 --> 00:04:57,070
so everything which we extract on the server side. This is now all passed to our backend, now in app.js,

62
00:04:57,120 --> 00:05:02,630
scroll up a bit more to the very top, here in this state, you

63
00:05:02,650 --> 00:05:05,860
now should change isAuth to false

64
00:05:05,920 --> 00:05:09,390
so did we start unauthenticated. Now

65
00:05:10,270 --> 00:05:15,960
when you when the page reloads, you start on the login page and you can switch to sign up and there,

66
00:05:15,970 --> 00:05:20,280
let's create a new user, you can enter any name you want

67
00:05:24,940 --> 00:05:29,150
and I accidentally hit enter which is good because we now see validation is doing its job

68
00:05:29,410 --> 00:05:38,150
but now let me enter a valid password which you should remember and click sign up and it still failed.

69
00:05:38,600 --> 00:05:40,420
Let's see what's wrong here,

70
00:05:40,760 --> 00:05:43,930
let's inspect for which field we're getting this 

71
00:05:44,390 --> 00:05:54,560
by inspecting the network tab and then here we see ok all three fields give us the error.

72
00:05:54,620 --> 00:05:59,870
That's kind of a strong signal that the data is simply not passed to the backend at all, so something

73
00:05:59,870 --> 00:06:01,320
seems to be wrong there,

74
00:06:02,900 --> 00:06:05,130
indeed we can validate this by clicking on headers,

75
00:06:05,120 --> 00:06:09,440
there we see there is no request payload added to this request

76
00:06:10,470 --> 00:06:16,490
and that's simply a little mistake on my side. In app.js in the frontend code in sign up handler,

77
00:06:17,000 --> 00:06:19,740
here where I extract after the e-mail and so on,

78
00:06:19,820 --> 00:06:27,190
that should be signupform.email.value and the same for all the other fields too.

79
00:06:27,200 --> 00:06:33,060
So let's add sign up form in front of that and .value at the end, the same for the name and

80
00:06:33,110 --> 00:06:38,010
this is how the data is stored here internally in the react app and this how we should extract it.

81
00:06:38,030 --> 00:06:39,390
So let's give this another try,

82
00:06:39,410 --> 00:06:42,290
let's pick an email address, a name and a password

83
00:06:43,250 --> 00:06:44,560
and now this looks much better.

84
00:06:44,570 --> 00:06:50,810
I get back user created, I'm forwarded to the login page here in my frontend, I get that user ID

85
00:06:50,810 --> 00:06:53,410
and of course we can as always use

86
00:06:53,420 --> 00:06:57,780
mongodb compass to also take a closer look at our database,

87
00:06:57,890 --> 00:06:59,630
there I got this messages database,

88
00:06:59,630 --> 00:07:02,550
if I reload it now, I got a users collection in there

89
00:07:02,630 --> 00:07:05,040
and here I have that user.

90
00:07:05,240 --> 00:07:06,920
So that is working,

91
00:07:06,920 --> 00:07:09,800
the user also has a starting status,

92
00:07:09,800 --> 00:07:11,990
now we have no posts of course.

93
00:07:12,020 --> 00:07:17,620
Now we can continue and we can work on logging the user in and that will now be the interesting part

94
00:07:17,660 --> 00:07:22,660
because I already mentioned that authentication will now work differently.
