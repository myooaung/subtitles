1
00:00:02,340 --> 00:00:06,460
We're now working on the cart and right now, we don't have a cart,

2
00:00:06,480 --> 00:00:08,310
we got a product but not a cart,

3
00:00:08,580 --> 00:00:11,920
let's now add a new model here, the cart.js file

4
00:00:11,970 --> 00:00:19,050
because the cart is like a separate entity in our project you could say. Therefore I'll again export

5
00:00:19,080 --> 00:00:21,540
a class here and I'll name that class cart,

6
00:00:21,600 --> 00:00:26,740
so that is pretty similar to what I do in product, there I export the class product

7
00:00:26,750 --> 00:00:29,370
but now it's class cart

8
00:00:29,690 --> 00:00:33,080
and now we have to think about how we want to manage that cart.

9
00:00:33,080 --> 00:00:39,220
Now obviously we want to have a cart that holds all the products that we added

10
00:00:39,280 --> 00:00:44,630
and we also want to group products by id and increase their quantity in case we add a product more

11
00:00:44,630 --> 00:00:45,980
than once.

12
00:00:46,010 --> 00:00:55,000
So to do all of that, I will first of all create a constructor here which allows us to create a new cart.

13
00:00:55,020 --> 00:01:02,810
Now when this cart is created, I'll add a products property here which should be an array

14
00:01:02,940 --> 00:01:09,120
and there I imagine having some objects in there which do maybe hold information like the ID and important,

15
00:01:09,270 --> 00:01:12,150
also the quantity of this product.

16
00:01:12,180 --> 00:01:18,210
We can also add an information like total price which initially is zero let's say and this of course increase

17
00:01:18,210 --> 00:01:21,190
with every product we add.

18
00:01:21,300 --> 00:01:27,840
Now what we need on this cart though is a way to add and remove our products

19
00:01:27,850 --> 00:01:36,050
obviously. Now the problem we have is the cart itself is not really an object we'll constantly recreate,

20
00:01:36,380 --> 00:01:42,200
not for every new product that we add we want to have a new cart, instead there always will be

21
00:01:42,200 --> 00:01:48,160
a cart in our application and we just want to manage the products in there. So the approach

22
00:01:48,180 --> 00:01:50,560
I want to take will actually be a different one,

23
00:01:50,610 --> 00:01:57,300
I don't really add a constructor instead I'll add a static method, add product like this.

24
00:01:57,300 --> 00:02:04,440
Now this will take the ID of the product I want to add and the goal here will be to then fetch the

25
00:02:05,160 --> 00:02:13,650
old or previous cart from our file for now, analyze that and see if we already have that product,

26
00:02:15,040 --> 00:02:27,100
find existing product and then add new product or increase the quantity. That is what I plan to do,

27
00:02:27,150 --> 00:02:30,550
so let's start with adding the logic for fetching a cart from a file.

28
00:02:30,780 --> 00:02:33,920
For this I'll import the file system here

29
00:02:34,230 --> 00:02:38,310
and also the path helper here,

30
00:02:38,460 --> 00:02:39,010
whoops, path

31
00:02:39,010 --> 00:02:45,310
to construct a good path. Now in product.js, we see how that path should be constructed so we can copy

32
00:02:45,310 --> 00:02:50,990
that basically, go to products, to cart.js and then add it here.

33
00:02:51,010 --> 00:02:54,650
Now the difference is that the file will now be named cart.json

34
00:02:54,700 --> 00:03:01,840
and in there we'll store an object that represents our cart and then here, in this part here for adding

35
00:03:01,840 --> 00:03:08,680
a product, I want to use the file system to read a file and that will be the file at this path so

36
00:03:08,680 --> 00:03:15,400
my cart.json file and we have a callback where I either get an error or or the file content.

37
00:03:15,400 --> 00:03:16,440
Now if we have an error,

38
00:03:16,450 --> 00:03:20,320
we know that the file doesn't exist yet and therefore we got no cart yet.

39
00:03:20,320 --> 00:03:25,940
So if we got an error then our cart will have to be created otherwise

40
00:03:25,960 --> 00:03:31,160
we know that we, well get an existing cart.

41
00:03:31,240 --> 00:03:32,680
So here I'll add a new cart

42
00:03:32,680 --> 00:03:38,290
first of all which will have products that are an empty array and maybe that total quantity we were

43
00:03:38,290 --> 00:03:42,250
talking about, the total price excuse me which is zero.

44
00:03:42,790 --> 00:03:47,770
And therefore if we don't have an error, again that inverse logic, if we don't have an error

45
00:03:47,950 --> 00:03:50,620
then we know we got an existing cart,

46
00:03:50,620 --> 00:03:57,810
so in this case my cart should be equal to the parsed file content. We'll store it as json so I'll

47
00:03:57,850 --> 00:04:00,490
parse that with that json helper.

48
00:04:00,490 --> 00:04:06,160
So now at this point after the if statement, we know that we will have a cart and now we can analyze

49
00:04:06,160 --> 00:04:08,410
it and add a product,

50
00:04:08,440 --> 00:04:13,270
so let's analyze the cart and see if the product we're trying to add already exists.

51
00:04:13,270 --> 00:04:19,420
So we'll search for the existing product by taking our cart products in there,

52
00:04:19,420 --> 00:04:22,180
remember we'll have products in the cart which is an array

53
00:04:22,600 --> 00:04:25,640
and by then finding an element in there.

54
00:04:25,660 --> 00:04:29,860
So again we'll loop through all the products and have a look at each of them, each prod,

55
00:04:29,950 --> 00:04:36,130
so in each product we'll have a look and we'll see if the product ID matches the ID of the product we try

56
00:04:36,130 --> 00:04:37,450
to add.

57
00:04:37,510 --> 00:04:43,090
Now if we got an existing product already, then we simply want to increase that quantity.

58
00:04:43,360 --> 00:04:49,900
So let's say we assume that each product object that gets stored in there is not just a product object

59
00:04:50,110 --> 00:04:57,280
having the data in our product model but also that it has an extra quantity field.

60
00:04:57,280 --> 00:05:02,950
Now if we have an existing product, then I want to create a new product and for this I'll create a new variable,

61
00:05:04,300 --> 00:05:06,430
updated product

62
00:05:06,670 --> 00:05:11,620
and here in this if statement, so if we have an existing product, I'll use updated product 

63
00:05:11,700 --> 00:05:15,930
and now next generation javascript with the object spread operator,

64
00:05:16,240 --> 00:05:22,300
I'll take all the properties of the existing product and add them to a new javascript object

65
00:05:22,750 --> 00:05:30,880
and then on that updated product, I'll set the quantity equal to the old quantity plus one.

66
00:05:31,000 --> 00:05:33,780
So I'll simply increment the quantity by one

67
00:05:33,820 --> 00:05:39,430
and since I distributed all properties of existing product into updated product, the quantity will be

68
00:05:39,430 --> 00:05:44,010
available there already because it was available in existing product.

69
00:05:44,020 --> 00:05:48,490
Now if we have a new product, I'll set updated product equal to

70
00:05:48,730 --> 00:05:53,210
and I should put that into an else block,

71
00:05:53,310 --> 00:05:56,700
so if we have a new one, I will set updated product equal to

72
00:05:59,600 --> 00:06:06,750
a new javascript object where I add information for that product and that will be my ID let's say.

73
00:06:06,950 --> 00:06:12,950
So ID will be equal to the ID I'm getting as an argument and I'll set the quantity to one because

74
00:06:12,950 --> 00:06:19,730
we added just one. Now the remaining thing is that I want to update the price of the cart.

75
00:06:19,740 --> 00:06:26,250
Now we got the cart here with the total price and the total price will always rise by the price of

76
00:06:26,250 --> 00:06:27,870
the product we added.

77
00:06:28,260 --> 00:06:31,010
Now I don't have that information in here though,

78
00:06:31,260 --> 00:06:40,140
so I expect to get it as an argument, product price and therefore here after this if else block, I can say cart

79
00:06:40,290 --> 00:06:46,620
total price equals cart total price plus product price right because we want to, price because we

80
00:06:46,620 --> 00:06:48,070
want increase that.

81
00:06:48,270 --> 00:06:52,220
So now we got our product added,

82
00:06:52,390 --> 00:06:53,520
we found it

83
00:06:53,670 --> 00:06:59,100
and we also analyzed it and added a new product, increase the quantity,

84
00:06:59,100 --> 00:07:09,480
now we just need to save the cart back to our file. And of course the cart should now also contain the

85
00:07:09,480 --> 00:07:12,000
updated product, that's also important.

86
00:07:12,090 --> 00:07:13,720
So we updated the price thus far,

87
00:07:13,720 --> 00:07:15,630
let's now also update the products,

88
00:07:15,630 --> 00:07:19,300
so the products on our cart should equal the old products

89
00:07:19,320 --> 00:07:22,260
and here again I'll use a next gen javascript feature

90
00:07:22,260 --> 00:07:25,850
by spreading the existing products of the cart,

91
00:07:26,040 --> 00:07:29,770
so this will now be an array with all the old cart products

92
00:07:29,980 --> 00:07:33,260
and now the question is what do I want to do?

93
00:07:33,630 --> 00:07:36,690
Well if we are creating a product for the first time,

94
00:07:36,720 --> 00:07:43,600
so if I'm in this else block, then I simply will add the updated product as a new additional product.

95
00:07:43,600 --> 00:07:48,660
However if I got an existing product here, I don't want to add a new product

96
00:07:48,660 --> 00:07:56,850
instead I want to replace the old one and to do that, I need to find out where in my old products this

97
00:07:56,970 --> 00:07:58,770
existing product was located,

98
00:07:58,770 --> 00:08:05,170
so which position it had. To do this I'll get the index instead of the product,

99
00:08:05,220 --> 00:08:12,690
so here I'll have the existing product index and then I'll add my existing product which is simply cart

100
00:08:12,780 --> 00:08:16,620
products at this existing product index,

101
00:08:16,620 --> 00:08:17,950
so one extra step

102
00:08:18,060 --> 00:08:24,080
but this now allows me to use that index to replace the item in our cart products here.

103
00:08:24,540 --> 00:08:32,310
So there, I will set cart products equal to cart product,

104
00:08:32,310 --> 00:08:38,950
so first of all copying the old array just as we're doing it down there

105
00:08:39,160 --> 00:08:42,720
but then I'll not add updated products, instead

106
00:08:44,940 --> 00:08:53,040
I will set cart products and overwrite existing product index, so at this position I will replace

107
00:08:53,040 --> 00:08:55,670
the element with my updated product.

108
00:08:55,670 --> 00:09:01,900
So now the updated product is either replaced or added to the cart products and the price is updated,

109
00:09:02,040 --> 00:09:09,310
now we can save it back and for this, we can use the file system write file and write it to that path

110
00:09:09,750 --> 00:09:15,160
and then of course also define what we want to put there

111
00:09:15,210 --> 00:09:17,550
and I want to write my cart into the path,

112
00:09:20,100 --> 00:09:23,010
obviously in a stringified

113
00:09:23,010 --> 00:09:25,020
version, so as json

114
00:09:25,110 --> 00:09:30,300
and then here I have a callback where I might get an error which I want to output so that I see if I

115
00:09:30,300 --> 00:09:31,820
do have one and which one it is

116
00:09:31,830 --> 00:09:35,330
if I got one and then I am done.

117
00:09:35,340 --> 00:09:39,690
So this is now an add product method that hopefully does the trick,

118
00:09:39,870 --> 00:09:41,520
let's simply try it out.

119
00:09:41,760 --> 00:09:44,340
So for this, let's go to the shop controller

120
00:09:44,490 --> 00:09:47,610
and in post cart, I want to add my product.

121
00:09:47,820 --> 00:09:52,720
This of course means here first of all I need to get the product because I need its price too,

122
00:09:52,920 --> 00:10:01,230
so I will use product find by ID for my product ID and then I have this callback where I get my product,

123
00:10:01,230 --> 00:10:06,660
so here that is the product that is retrieved from the products database so to say, from the products

124
00:10:06,660 --> 00:10:07,470
file

125
00:10:07,800 --> 00:10:11,880
and once I have this, I can use the product information to update my cart.

126
00:10:12,180 --> 00:10:15,140
So in here, I now want to use my cart model.

127
00:10:15,390 --> 00:10:21,930
First of all, let's import it, cart by requiring it from the models folder and there from the cart

128
00:10:21,960 --> 00:10:31,430
folder and with it being imported, let's go down to post cart and say cart add product and now cart

129
00:10:31,470 --> 00:10:38,190
the model basically serves as a utility model you could say, we're not instantiating it

130
00:10:38,220 --> 00:10:46,200
instead were using this static function and I'll use add product to pass in my prod ID and also my, here

131
00:10:46,460 --> 00:10:47,030
product

132
00:10:47,040 --> 00:10:53,700
that is what I'm retrieving from the product file, my product price because that is also information that

133
00:10:53,700 --> 00:10:54,680
I need in there.

134
00:10:56,540 --> 00:11:03,000
With that let's see if that works by going back to our app here and clicking add to cart,

135
00:11:03,220 --> 00:11:08,330
now looks good because we're logging the error here and if we see null that means there was no error

136
00:11:08,560 --> 00:11:15,500
and now we got cart.json and in there, I got products which is an array of products with an ID and the quantity

137
00:11:16,340 --> 00:11:21,290
and the price is stored as a string which is a bit suboptimal here I have to say, so we'll have to

138
00:11:21,290 --> 00:11:22,440
work on that

139
00:11:22,610 --> 00:11:24,810
but besides that, this is looking good.

140
00:11:24,920 --> 00:11:32,300
Now if I add another product or the same product again, then we see indeed the quantity was increased,

141
00:11:32,390 --> 00:11:37,180
the price is misbehaving because it's stored as a string and therefore concatenated,

142
00:11:37,400 --> 00:11:43,720
so we'll have to do something about that. In cart.js the price we're extracting, it's stored as a string

143
00:11:43,730 --> 00:11:45,770
in our product model,

144
00:11:45,770 --> 00:11:49,010
so what we have to do is here when we work on the price,

145
00:11:51,830 --> 00:11:57,030
I have to add a plus in front of product price to convert that string to a number

146
00:11:57,350 --> 00:12:05,080
and now if we quickly delete cart.json to start from scratch and I add my element to the cart again

147
00:12:06,570 --> 00:12:09,310
and I do that again and we now look into cart.json,

148
00:12:09,330 --> 00:12:12,350
now this is looking better.

149
00:12:12,420 --> 00:12:15,410
So this is now working, this is our cart model added

150
00:12:15,570 --> 00:12:22,830
but with that let's go back to our routing topic which we had in this module and let's see what query

151
00:12:22,830 --> 00:12:27,180
parameters are and how they can help us with editing a product.
