WEBVTT
1
00:00:02.190 --> 00:00:04.160
So welcome back, in case you skipped

2
00:00:04.170 --> 00:00:07.910
you'll find these two html files attached to this lecture,

3
00:00:07.980 --> 00:00:12.660
so make sure to download them and enter them, insert them into your views folder

4
00:00:12.660 --> 00:00:14.880
and now the goal is to serve them.

5
00:00:14.910 --> 00:00:17.510
We didn't work on the js files in the last lecture, 

6
00:00:17.520 --> 00:00:23.460
we just added the html files and make sure to explore them to understand what they do, in the end

7
00:00:23.460 --> 00:00:28.890
we got the same content as before, we just added an extra header and then in add product, we still have the

8
00:00:28.890 --> 00:00:35.430
form, in shop.html we got some dummy code since we have no products to serve yet and now I want to serve

9
00:00:35.430 --> 00:00:37.770
these html files in my routes.

10
00:00:37.770 --> 00:00:39.690
Now how does that work?

11
00:00:39.960 --> 00:00:47.550
Let's start in the shop.js file, instead of sending some text or this html text here in this

12
00:00:47.550 --> 00:00:55.290
case, let's instead send a file with send file and send file

13
00:00:55.450 --> 00:00:58.550
well allows us to do just that, send back a file to the user

14
00:00:58.590 --> 00:01:04.260
and as you see here in description, it automatically sets the content type response header field and

15
00:01:04.260 --> 00:01:06.760
we'll see if that works for us or not.

16
00:01:06.870 --> 00:01:09.420
So send file is what I execute

17
00:01:09.420 --> 00:01:13.310
and now we just need to point at that file we want to send.

18
00:01:13.770 --> 00:01:20.400
Now here, the question is how does the path look like? The file is in the views folder

19
00:01:20.400 --> 00:01:23.740
but how should this path now look like?

20
00:01:24.120 --> 00:01:32.340
Well we could try using slash and assume that we see all of that from the view of the app.js file

21
00:01:32.340 --> 00:01:35.880
which is in the end the file which starts our entire server,

22
00:01:35.880 --> 00:01:42.240
the fact that shop.js in in a subdirectory doesn't really matter because we export its functionality and

23
00:01:42.270 --> 00:01:45.800
import it into the app.js file which is in the root folder.

24
00:01:46.020 --> 00:01:53.820
So we could try using slash for the root path, an absolute path seen from the root folder and then

25
00:01:53.990 --> 00:01:58.320
views and then shop.html, like this.

26
00:01:58.440 --> 00:01:59.350
Let's give this a try,

27
00:01:59.370 --> 00:02:04.420
let's save this, go back to the page and reload localhost 3000 slash nothing

28
00:02:04.920 --> 00:02:07.840
and I don't see that.

29
00:02:07.920 --> 00:02:12.240
Well the reason for this is that this path is incorrect,

30
00:02:12.240 --> 00:02:14.420
let's try ./ here,

31
00:02:14.870 --> 00:02:20.190
if we now reload, path must be absolute is the error we get.

32
00:02:20.190 --> 00:02:22.770
So whatever we tried, this doesn't seem to work,

33
00:02:22.770 --> 00:02:26.100
the reason for this is that an absolute path would be correct

34
00:02:26.190 --> 00:02:31.980
but slash like this actually refers to our root folder on our operating system

35
00:02:32.040 --> 00:02:34.100
not to this project folder.

36
00:02:34.410 --> 00:02:42.090
So in order to construct the path to this directory and this file here ultimately, we can use a feature

37
00:02:42.090 --> 00:02:43.800
provided by nodejs,

38
00:02:43.830 --> 00:02:51.360
another core module. We can import the path core module by requiring path like this

39
00:02:51.540 --> 00:02:58.410
and then here, we send a file where we create a path with the help of this module by calling the join

40
00:02:58.440 --> 00:02:59.230
method,

41
00:02:59.610 --> 00:03:08.730
join yields us a path at the end, it returns a path but it constructs this path by concatenating

42
00:03:08.820 --> 00:03:10.800
the different segments.

43
00:03:10.800 --> 00:03:18.040
Now the first segment we should pass here is then actually a global variable made available by nodejs

44
00:03:18.060 --> 00:03:22.350
and that is the underscore underscore and that's important,

45
00:03:22.350 --> 00:03:23.960
these are two underscores

46
00:03:24.000 --> 00:03:33.390
dir name. This is a global variable which simply holds the absolute path on our operating system

47
00:03:33.390 --> 00:03:42.090
to this project folder and now we can add a comma and simply add views here because the first segment

48
00:03:42.090 --> 00:03:44.410
is basically the path to this whole project folder,

49
00:03:44.520 --> 00:03:50.760
the next segment is that we want to go into the views folder and then the third segment will be our file,

50
00:03:50.820 --> 00:03:56.500
so here shop.html and don't add slashes here because and that's important,

51
00:03:56.640 --> 00:04:03.030
we use path join not because of the absolute path, we could build this with dir name and then concatenating

52
00:04:03.030 --> 00:04:04.250
this manually too

53
00:04:04.680 --> 00:04:11.040
but we're using path join because this will automatically build the path in a way that works on both

54
00:04:11.040 --> 00:04:18.600
Linux systems and Windows systems because as you might know, on Linux systems you have paths like this

55
00:04:20.650 --> 00:04:27.010
and I'm not talking about paths in the url but on your file system now but on Windows, you use backslashes

56
00:04:27.010 --> 00:04:32.570
for your paths and therefore if you manually construct this with slashes, it would not run on Windows

57
00:04:32.650 --> 00:04:37.960
and the other way around. Path join basically detects the operating system you're running on and then

58
00:04:37.990 --> 00:04:40.470
automatically builds a correct path.

59
00:04:40.480 --> 00:04:43.310
Now with that, we could expect that it works

60
00:04:43.330 --> 00:04:49.630
but actually dir name here will point in this routes folder, right.

61
00:04:49.640 --> 00:04:55.600
Dir name gives us the path to a file in which we use it and we're using it in the shop.js file in the

62
00:04:55.600 --> 00:04:56.680
routes folder,

63
00:04:56.680 --> 00:05:03.990
so this will point to the routes folder but views is actually located in a sibling folder to routes.

64
00:05:04.030 --> 00:05:11.230
So what can we do regarding that? Now the solution is that we add one more segment in there and that is

65
00:05:11.260 --> 00:05:15.220
../ and this simply means go up one level,

66
00:05:15.280 --> 00:05:21.730
so this will now build a path where it first goes into the folder of these files, so into routes,

67
00:05:21.730 --> 00:05:24.690
then it goes up one level then into views,

68
00:05:24.700 --> 00:05:29.410
so if it's up one level it's in the root folder then into views and then it serves this

69
00:05:29.450 --> 00:05:38.300
and with that if we now load localhost 3000/ again, we see that html file being served.

70
00:05:39.020 --> 00:05:44.540
And now is a great time for you to pause the video and ensure that you serve add product

71
00:05:44.540 --> 00:05:46.780
when this route gets loaded.

72
00:05:48.280 --> 00:05:51.500
Were you successful? Let's do it together.

73
00:05:51.500 --> 00:05:57.070
For this, let's first of all import the path module again, the core module,

74
00:05:57.470 --> 00:06:00.710
so const path require path to pull that in.

75
00:06:00.740 --> 00:06:04.570
We don't need to install that because it is a core nodejs module

76
00:06:04.970 --> 00:06:14.120
and then here, we don't use send but send file and we will then use path join, the dir name variable to get

77
00:06:14.180 --> 00:06:17.080
the path to these files folder

78
00:06:17.510 --> 00:06:23.010
and then we can go up one level and then into views, 

79
00:06:23.030 --> 00:06:28.510
whoops, should be a string, views and then we want to serve the add-product.html

80
00:06:28.540 --> 00:06:41.180
file. With this if we save that and we head over to add-product, whoops that should be admin/

81
00:06:41.260 --> 00:06:42.110
add-product,

82
00:06:42.140 --> 00:06:44.200
we see this page too.

83
00:06:44.240 --> 00:06:46.790
Now the styling is missing because we don't have any

84
00:06:46.790 --> 00:06:53.630
but this works and we can also check on add-product that the correct content type was assigned by

85
00:06:53.630 --> 00:06:54.500
express.

86
00:06:54.560 --> 00:06:55.870
So this also works

87
00:06:55.880 --> 00:07:01.710
and now we see how we can serve simple html files for the different routes we have.

88
00:07:02.000 --> 00:07:07.070
Now here's one bonus task for you which I want you to solve and which we'll solve together in the next

89
00:07:07.070 --> 00:07:14.740
lecture, add a new html file which is your page not found page which you then serve

90
00:07:14.930 --> 00:07:17.150
if we ever reach this middleware function.
