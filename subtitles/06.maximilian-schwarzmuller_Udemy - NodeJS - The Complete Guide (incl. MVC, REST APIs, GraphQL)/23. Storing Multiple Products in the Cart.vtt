WEBVTT
1
00:00:02.120 --> 00:00:06.640
So I'm now able to store some data in the cart, at least in a very basic way

2
00:00:06.830 --> 00:00:10.580
but obviously we don't just want to overwrite the existing cart all the time,

3
00:00:10.610 --> 00:00:16.220
we want to be able to store multiple products in there and increase the quantity in case we already

4
00:00:16.220 --> 00:00:17.520
do have a product in there.

5
00:00:17.540 --> 00:00:21.400
So we need to finteune our code a little bit and we already started,

6
00:00:21.440 --> 00:00:26.870
so I'll comment this back in where I do check whether a certain item already does exist.

7
00:00:26.870 --> 00:00:31.010
Now I just need to tweak that code a little bit, here

8
00:00:31.100 --> 00:00:39.600
I need to look for Product ID because that is where I store my product IDs in the items in the cart.

9
00:00:39.760 --> 00:00:44.260
So I'm looking for product ID because I'm storing the ID in productid down there

10
00:00:44.680 --> 00:00:50.410
and now if that is something else than minus one, we know that this product already exists in the

11
00:00:50.410 --> 00:00:56.480
cart. So I can add a new quantity field again and set this to one by default

12
00:00:56.770 --> 00:01:03.270
but if cart product is greater than zero or greater equal than zero,

13
00:01:03.370 --> 00:01:08.920
so if it's anything else but negative basically, then this means this product already exists.

14
00:01:08.920 --> 00:01:19.240
So then new quantity is cart product, that is actually the index so let's maybe name it cart product index,

15
00:01:19.240 --> 00:01:30.020
so this is then actually equal to this cart items for that given index we just identified and there

16
00:01:30.020 --> 00:01:32.630
we'll have a quantity plus one.

17
00:01:32.630 --> 00:01:38.430
So this is the new quantity if that item already exists, so if it already is part of our cart,

18
00:01:38.600 --> 00:01:45.920
if not we'll go with the default of one and therefore here, I will always update to new quantity.

19
00:01:45.940 --> 00:01:52.210
However I also don't want to update by always overwriting items with a new array with exactly one object,

20
00:01:52.600 --> 00:01:55.830
instead I want to add a new object to that array

21
00:01:56.020 --> 00:02:02.550
if the product does not exist in there or if it does exist in there, I want to update that one product,

22
00:02:02.560 --> 00:02:03.710
so how do we do that?

23
00:02:05.030 --> 00:02:11.380
Well one of the simplest ways and you could use other approaches where you leverage some functions mongodb has

24
00:02:12.350 --> 00:02:20.360
but one of the clearest approaches you can use is that you get the updated cart items, that you create

25
00:02:20.360 --> 00:02:28.280
such a constant and then, you access your cart items and you create a new array where you copy in all

26
00:02:28.280 --> 00:02:31.870
the existing elements with the spread operator with the three dots.

27
00:02:32.120 --> 00:02:37.300
So this gives me a new array with all the items that are in the cart and they are now stored here

28
00:02:37.580 --> 00:02:43.460
and I can now edit this array without touching the old array due to the way javascript works with reference

29
00:02:43.460 --> 00:02:45.120
and primitive types.

30
00:02:45.140 --> 00:02:53.950
So now I can edit my updated cart items and now I just need to differentiate, do we already have that item in

31
00:02:53.950 --> 00:02:55.090
the cart or not.

32
00:02:55.090 --> 00:02:57.870
So I'll actually move that up here before my if check

33
00:02:58.090 --> 00:03:05.770
and then here if I make it into this if statement, I know that we have this product already. In that case,

34
00:03:05.890 --> 00:03:10.650
I can access updated cart items for the cart product index I found,

35
00:03:10.650 --> 00:03:14.830
so now I have access to that item I'm interested in,

36
00:03:14.830 --> 00:03:24.000
I know that it already existed so I can set its quantity equal to the new quantity like this. Now else

37
00:03:24.870 --> 00:03:27.930
if the item did not exist before,

38
00:03:28.740 --> 00:03:33.070
I'll take my updated cart items and simply add a new one with push.

39
00:03:33.270 --> 00:03:39.300
I'll add a new cart item and I'll add a new cart item which looks exactly as described down there, so

40
00:03:39.300 --> 00:03:41.780
I'll just grab that code and add it here.

41
00:03:42.090 --> 00:03:49.380
So now I either update the quantity of an existing cart item or I add a new one and then down there for

42
00:03:49.380 --> 00:03:55.560
updated cart, I can always set my items equal to the updated cart items because that will always

43
00:03:55.560 --> 00:04:01.860
be an array with all the old elements because I copy it first and then with the update added,

44
00:04:01.890 --> 00:04:07.950
so either with the quantity increased for the existing element or with a new element added to the cart.

45
00:04:08.160 --> 00:04:15.450
So then I can safely have my updated cart down there and save that to the database with all the updated

46
00:04:15.510 --> 00:04:16.640
items in there.

47
00:04:17.070 --> 00:04:25.830
So if I save that now, I'll first of all add a second product real quick so that we, whoops,

48
00:04:26.200 --> 00:04:30.000
so that we have some alternatives here

49
00:04:30.540 --> 00:04:37.880
and then I'll go to products and I'll add this first one with $12 to the cart.

50
00:04:38.300 --> 00:04:42.160
Now if we update this in compass and we look into the cart there,

51
00:04:42.710 --> 00:04:46.370
we see this was added again even though it already existed.

52
00:04:46.370 --> 00:04:52.280
So our logic is not too convincing, if I press this one more time,

53
00:04:52.370 --> 00:04:55.260
we now see it in there three times I'd imagine,

54
00:04:55.640 --> 00:04:56.150
yeah,

55
00:04:56.510 --> 00:05:00.010
three times the same object so clearly our logic fails.

56
00:05:01.400 --> 00:05:04.680
Let's see what's wrong and I found the issue,

57
00:05:04.710 --> 00:05:06.980
it was this comparison up here.

58
00:05:07.050 --> 00:05:09.970
The problem we have here is the product I'm getting here,

59
00:05:10.080 --> 00:05:10.400
right,

60
00:05:10.410 --> 00:05:15.550
the product I'm getting as an argument is a product I just retrieved from the database.

61
00:05:15.570 --> 00:05:23.130
Now the _id we have in there actually is treated as a string in javascript but is not exactly

62
00:05:23.130 --> 00:05:24.350
of type string,

63
00:05:24.480 --> 00:05:29.940
since I'm using three equal signs in my check here however, I am telling javascript that this should only

64
00:05:29.940 --> 00:05:34.550
return true if these two do not only match by value but also by type

65
00:05:34.590 --> 00:05:36.210
and technically this is no string

66
00:05:36.210 --> 00:05:37.940
even though we can use it as such.

67
00:05:38.190 --> 00:05:45.360
So one solution is to use two equal signs or to use toString on both here,

68
00:05:45.570 --> 00:05:51.900
so here and here to make sure we only work with strings here in both cases.

69
00:05:51.900 --> 00:06:00.470
And with this adjustment made, I can edit my object here by double clicking into some field and then

70
00:06:00.980 --> 00:06:06.470
we can mark the latter two objects here in the array for deletion by clicking on the cross on the

71
00:06:06.470 --> 00:06:08.880
left, click update thereafter,

72
00:06:09.020 --> 00:06:14.540
now this is updated, we only have one item in there with quantity one but now if I go back and I click

73
00:06:14.600 --> 00:06:18.570
add to cart and I do update this in compass,

74
00:06:18.610 --> 00:06:26.370
I should still only have one object but now with quantity two. If I do add my other element here though by

75
00:06:26.370 --> 00:06:35.770
clicking on add to cart here and I do update, now I should have two elements in the cart, one with quantity

76
00:06:35.770 --> 00:06:39.510
two, one with quantity one. If I click add to cart

77
00:06:39.520 --> 00:06:43.860
again and I update this again, it should still be two objects,

78
00:06:43.870 --> 00:06:46.480
now both with quantity two and so on.

79
00:06:46.480 --> 00:06:47.710
So now this is working,

80
00:06:47.710 --> 00:06:50.030
now I am updating the cart,

81
00:06:50.290 --> 00:06:55.570
this is now an add to cart functionality, a basic one implemented on our own.

82
00:06:55.570 --> 00:06:58.630
Now of course we want to be able to also display the cart items.
