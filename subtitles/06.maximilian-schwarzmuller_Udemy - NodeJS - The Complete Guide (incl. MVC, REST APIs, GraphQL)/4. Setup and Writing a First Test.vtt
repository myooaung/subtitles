WEBVTT
1
00:00:02.180 --> 00:00:04.090
Ora per dimostrare i test.

2
00:00:04.160 --> 00:00:11.780
Ho scelto un'istantanea dal nostro corso DOVE ABBIAMO FINITO L'API REST con async attendo perché papà è particolarmente

3
00:00:11.780 --> 00:00:15.190
gentile da testare e immergersi nei test.

4
00:00:15.210 --> 00:00:23.000
Ora ovviamente testare diversi tipi di applicazioni di nodo come un QoL API grafico hanno tutte le loro specialità e

5
00:00:23.000 --> 00:00:28.790
complessità speciali e questo è solo un modulo introduttivo qui se vuoi imparare tutto

6
00:00:28.790 --> 00:00:34.190
su quello che trovi tutorial dedicati per tutti questi diversi scenari che sarebbero

7
00:00:34.190 --> 00:00:40.720
abbastanza contenuto per il suo stesso corso e quindi il ladro non ha spremuto tutto in questo

8
00:00:40.720 --> 00:00:47.810
anche non gonfiato, ma quello che imparerai qui le idee principali i concetti chiave il modo di pensare

9
00:00:48.110 --> 00:00:54.050
ai test e l'impostazione generale che sarà sempre la stessa no importa quale applicazione di

10
00:00:54.050 --> 00:01:00.160
nodo stai costruendo e quindi è il super importante inizio di test che devi veramente padroneggiare.

11
00:01:00.200 --> 00:01:06.110
Quindi qui ho questa istantanea e troverai il codice allegato a questa lezione, ovviamente.

12
00:01:06.110 --> 00:01:13.520
E per aggiungere test qui, prima di tutto, dobbiamo impostare il nostro ambiente di test con moka e chai.

13
00:01:13.520 --> 00:01:19.580
Ora puoi semplicemente google per mocha j ust per trovare mocha J s non funziona dove puoi trovare i tuoi

14
00:01:19.580 --> 00:01:25.070
documenti ufficiali e scoprire come installarlo come scrivere test e così via e lo stesso naturalmente è vero per

15
00:01:25.070 --> 00:01:25.660
chai.

16
00:01:25.670 --> 00:01:31.520
Puoi google per GI J. S. e puoi imparare di più su Chai qui e scoprire come lavora papà.

17
00:01:31.580 --> 00:01:35.090
Ma naturalmente ti spiegherò tutti questi principi fondamentali.

18
00:01:35.090 --> 00:01:41.690
Quindi installiamo queste cose qui ora con il dash di installazione di npm, salva dash morte qui nel nostro progetto e

19
00:01:42.080 --> 00:01:44.300
ci sono solo mocha e chai.

20
00:01:44.330 --> 00:01:47.030
Questi sono due strumenti di cui abbiamo bisogno per iniziare.

21
00:01:47.240 --> 00:01:54.920
Quindi installiamoli qui e aspettiamo che finisca e con il processo di installazione finito.

22
00:01:54.920 --> 00:01:58.580
Iniziamo a scrivere i nostri primi test ora per papà.

23
00:01:58.580 --> 00:02:04.160
Prima di tutto andiamo al negozio di pacchetti di Jason, ci cadiamo nella sezione degli script e lì dovresti avere

24
00:02:04.160 --> 00:02:06.740
uno script di prova già se non lo fai.

25
00:02:06.740 --> 00:02:08.930
Basta aggiungerlo ora per impostazione predefinita.

26
00:02:08.930 --> 00:02:12.370
Questo non ha un comando utile e liberiamoci di questo.

27
00:02:12.530 --> 00:02:15.200
E qui ora puoi semplicemente eseguire mocha proprio come questo.

28
00:02:15.200 --> 00:02:16.160
Basta digitare il mockup.

29
00:02:16.190 --> 00:02:21.350
Questa dipendenza è stata appena installata senza alcuna altra configurazione.

30
00:02:21.350 --> 00:02:29.420
Ora quello che puoi fare ora è eseguire il test NPM qui nel tuo terminale navigato nella cartella del progetto e questo

31
00:02:29.840 --> 00:02:34.180
ora eseguirà tutti i test che hai definito in questo progetto.

32
00:02:34.340 --> 00:02:39.210
Ma ovviamente qui si lamenterà che non ha trovato alcun file di test.

33
00:02:39.440 --> 00:02:43.910
Il motivo è che il mockup di default cerca una cartella denominata test.

34
00:02:43.940 --> 00:02:46.370
Quindi aggiungiamone uno e deve essere nominato test.

35
00:02:46.370 --> 00:02:48.250
Non testare nient'altro.

36
00:02:48.260 --> 00:02:50.150
Basta testarlo qui.

37
00:02:50.150 --> 00:02:53.680
Ora puoi definire i file che contengono il tuo codice di test.

38
00:02:53.690 --> 00:02:57.130
Ora iniziamo molto semplice e chiamerò inizia punto J. S..

39
00:02:57.170 --> 00:03:01.940
Puoi chiamarlo come vuoi, ma non devi chiamarlo start può essere qualsiasi seguace che

40
00:03:01.940 --> 00:03:04.220
vuoi dovrebbe essere un file javascript.

41
00:03:04.220 --> 00:03:11.060
Ora qui scriviamo il nostro codice di test e il codice di test di scrittura può essere strano quando si

42
00:03:11.060 --> 00:03:14.840
vede per la prima volta, ma diventa rapidamente molto semplice.

43
00:03:14.870 --> 00:03:23.120
Basta scrivere un test scrivendolo solo ed è una funzione fornita da MOCA.

44
00:03:23.120 --> 00:03:29.930
Ora potrebbe sembrare un nome di una strana funzione, ma l'idea qui è che dai il nome del tuo

45
00:03:29.960 --> 00:03:36.230
test e leggono come semplici frasi inglesi perché in effetti ci vogliono due argomenti e il primo è

46
00:03:36.230 --> 00:03:39.290
una stringa che descrive semplicemente il tuo test.

47
00:03:39.410 --> 00:03:44.900
E questo è qualcosa che vedrai in seguito come output per il tuo test che ti aiuterà a identificare

48
00:03:44.900 --> 00:03:47.730
quali test falliscono e quali test hanno avuto successo.

49
00:03:47.750 --> 00:03:51.670
Quindi ovviamente questo dovrebbe essere un titolo che descrive quello che sta succedendo nel test.

50
00:03:52.520 --> 00:04:01.090
Quindi qui potremmo ad esempio verificare che i numeri Q vengano aggiunti correttamente.

51
00:04:01.100 --> 00:04:03.560
Ora ovviamente questo è un po 'uno stupido test qui.

52
00:04:03.560 --> 00:04:07.520
Diventerà più utile in seguito, ma questo è solo per farti conoscere i test.

53
00:04:07.520 --> 00:04:13.860
Quindi qui dovrebbe aggiungere correttamente i numeri potrebbe essere una descrizione e vedrai che ora si legge come

54
00:04:13.880 --> 00:04:14.960
una frase inglese.

55
00:04:14.960 --> 00:04:17.030
Dovrebbe aggiungere numeri correttamente.

56
00:04:17.060 --> 00:04:22.400
Teoricamente puoi ovviamente inserire qualsiasi titolo che desideri qui, ma è una convenzione scrivere frasi

57
00:04:22.400 --> 00:04:23.410
come questa.

58
00:04:23.570 --> 00:04:29.990
La parte più importante del corso è il secondo argomento e questa dovrebbe essere una funzione della funzione che

59
00:04:29.990 --> 00:04:33.110
ora definisce il tuo codice di test effettivo.

60
00:04:33.110 --> 00:04:39.560
Ora in seguito ci metteremo in contatto con i nostri modelli con i nostri controllori e testarli perché ovviamente è

61
00:04:39.560 --> 00:04:43.180
l'idea che testiamo le nostre funzioni di controllo o funzione.

62
00:04:43.190 --> 00:04:50.270
Ma per ora scriveremo un test molto semplice qui aggiungeremo un numero uno che forse è due e un numero

63
00:04:50.390 --> 00:04:52.500
due che potrebbe essere gratuito.

64
00:04:52.560 --> 00:04:55.740
E ora vogliamo testare se questi due sommati insieme sono cinque.

65
00:04:55.820 --> 00:04:58.310
E sì, questo è un test assolutamente stupido.

66
00:04:58.310 --> 00:04:59.600
Certo che lo sono.

67
00:04:59.660 --> 00:05:02.090
È solo per mostrarti come eseguire i test.

68
00:05:02.120 --> 00:05:04.910
Diventerà più utile in seguito.

69
00:05:04.910 --> 00:05:06.830
Quindi otteniamo no quando ti insabbiamo.

70
00:05:07.010 --> 00:05:10.880
E ora vogliamo verificare se sono aggiunti fino a 5.

71
00:05:10.910 --> 00:05:16.010
E, naturalmente, in un secondo momento potresti avere valori dinamici che l'utente inserisce e che tu trasformi nel tuo

72
00:05:16.010 --> 00:05:17.930
codice e vuoi testare il tuo codice.

73
00:05:17.930 --> 00:05:23.570
La trasformazione funziona correttamente e questo ha molto più senso che se hai valori fortemente tipizzati

74
00:05:23.960 --> 00:05:25.830
come quelli che hai qui.

75
00:05:25.970 --> 00:05:31.080
Quindi, come possiamo ora verificare se i nostri test superano con successo.

76
00:05:31.100 --> 00:05:34.960
Come possiamo ora definire le condizioni di successo.

77
00:05:35.060 --> 00:05:41.090
Bene, quello che succede con l'aiuto di Chai mocha è responsabile dell'esecuzione dei nostri test e per darci

78
00:05:41.090 --> 00:05:45.270
questa funzione che definisce dove definiamo il nostro codice di test.

79
00:05:45.290 --> 00:05:52.520
Chai è responsabile della definizione delle nostre condizioni di successo e per questo abbiamo solo bisogno di importare qualcosa da

80
00:05:52.520 --> 00:05:53.510
Chai qui.

81
00:05:53.750 --> 00:06:02.130
Importiamo la funzione di questo nome, ci si aspetta che lo faccia richiedendo chai e lì la funzione expect.

82
00:06:02.240 --> 00:06:07.250
Ora sono tutti in un modo diverso di definire le nostre condizioni con una parola chiave should.

83
00:06:07.490 --> 00:06:09.460
Ma useremo il modo previsto.

84
00:06:09.560 --> 00:06:13.440
Puoi conoscere il modo breve qui nella scatola ufficiale.

85
00:06:13.490 --> 00:06:15.230
Alla fine fanno esattamente lo stesso.

86
00:06:15.230 --> 00:06:17.590
Permettono di definire le condizioni di successo.

87
00:06:17.660 --> 00:06:25.190
Si differenzia solo per come scrivi le tue condizioni di test e mi piace che si aspettino di più lo stile, ma puoi

88
00:06:25.190 --> 00:06:26.870
sicuramente immergerti in entrambi.

89
00:06:26.870 --> 00:06:28.310
Quindi come funziona?

90
00:06:28.310 --> 00:06:33.110
Bene, ti aspetti bene e poi all'interno di questa chiamata di funzione.

91
00:06:33.110 --> 00:06:41.630
Quindi come argomento si passa il codice che si desidera testare o il risultato che si desidera testare come

92
00:06:41.630 --> 00:06:42.260
qui.

93
00:06:42.260 --> 00:06:44.660
Num 1 più num 2.

94
00:06:44.690 --> 00:06:47.600
Quindi ci aspettiamo questa aggiunta qui.

95
00:06:47.630 --> 00:06:49.820
Ora come possiamo definire cosa dovrebbe essere.

96
00:06:50.300 --> 00:06:56.690
Bene, di nuovo questo è vicino alla definizione o alla scrittura di normali frasi inglesi.

97
00:06:56.940 --> 00:07:00.860
Chai ti offre un paio di proprietà su questo oggetto.

98
00:07:00.860 --> 00:07:02.170
Aspettarsi ritorni.

99
00:07:02.240 --> 00:07:04.010
Quindi aspettati rendimenti e oggetti.

100
00:07:04.010 --> 00:07:06.410
E lì hai proprietà come due.

101
00:07:06.740 --> 00:07:15.440
E poi hai un altro oggetto che ti dà cose come Q uguale e poi uguale come una funzione in cui puoi definire il

102
00:07:15.440 --> 00:07:18.230
valore che ti aspetti da due uguali.

103
00:07:18.590 --> 00:07:23.300
Quindi questo è qualcosa su cui devi abituarti, ma alla fine scrivi di nuovo una frase

104
00:07:23.450 --> 00:07:27.180
inglese con l'aiuto di tutte queste proprietà e metodi di supporto.

105
00:07:27.320 --> 00:07:30.900
E naturalmente nei documenti ufficiali di Chae imparerai anche questo.

106
00:07:31.040 --> 00:07:35.970
E lì scopri anche tutte le proprietà che hai a livello di distanza.

107
00:07:35.990 --> 00:07:41.840
Quindi se ti immergi nella guida qui o nei documenti API, allora ovviamente puoi imparare

108
00:07:41.840 --> 00:07:49.930
tutto sull'aspettativa e puoi vedere cosa puoi cambiare in modo che tu possa dire uguale a B o qualsiasi altra cosa tu voglia.

109
00:07:49.940 --> 00:07:56.130
Quindi qui ci aspettiamo num 1 più num uno più due a cinque.

110
00:07:56.150 --> 00:08:00.440
Ora con questo definito all'inizio J è il file nella cartella di test.

111
00:08:00.440 --> 00:08:06.270
Se esegui di nuovo il test NPM, cercherà automaticamente quella cartella di test ed eseguirà tutti i test

112
00:08:06.380 --> 00:08:14.460
e tutti i file definiti trovati in quella cartella di prova e quindi un anno nell'output vedremo un segno di spunta accanto a dovrebbe aggiungere numeri

113
00:08:14.550 --> 00:08:20.310
correttamente che ovviamente è questo test che ora viene eseguito correttamente come puoi vedere e questo è ciò

114
00:08:20.310 --> 00:08:23.010
che vuoi vedere durante la scrittura dei test.

115
00:08:23.010 --> 00:08:29.580
Vuoi vedere che passano tutti i test perché ora potremmo trovare più di un test.

116
00:08:29.580 --> 00:08:37.260
Ad esempio non dovrebbe dare un risultato di sei o qualunque cosa tu voglia nominare.

117
00:08:37.260 --> 00:08:45.840
E ora potremmo dire che ci aspettiamo che num 1 più num non siano uguali a 6, per esempio.

118
00:08:45.840 --> 00:08:51.330
Quindi ora stiamo fondamentalmente controllando se questo non è solo cinque ma non è anche sei.

119
00:08:51.330 --> 00:08:53.710
Quindi ora abbiamo un secondo test da trovare.

120
00:08:53.800 --> 00:08:59.610
E ora se eseguiamo di nuovo il test NPM qui, passiamo ai test di passaggio.

121
00:08:59.610 --> 00:09:07.400
E naturalmente è facile fare fallire un test anche per esempio cambiare il numero uno qui per liberare.

122
00:09:07.490 --> 00:09:09.000
E ora lo faccio di nuovo.

123
00:09:09.010 --> 00:09:12.420
Ora vedi che ho un test fallito e vedi che ho un errore.

124
00:09:12.430 --> 00:09:17.650
Ho capito che ci si aspetta da sei a nove è uguale a sei perché gratis più gratis ora è sei.

125
00:09:17.650 --> 00:09:23.470
Ma non ci aspettiamo che questo sia in sei e questo è il quarto giorno che ci suggerisce di fallire nel

126
00:09:23.470 --> 00:09:25.590
darci una ragione del perché ha fallito.

127
00:09:25.690 --> 00:09:30.670
E quindi quando non testiamo un codice fittizio come questo in cui abbiamo la ragione del

128
00:09:30.670 --> 00:09:35.890
fallimento scritto nel test, ma dove potrebbe trovarsi nel nostro altro codice che testeremo, questo ci consentirà

129
00:09:35.890 --> 00:09:37.780
di correggere il nostro codice.
