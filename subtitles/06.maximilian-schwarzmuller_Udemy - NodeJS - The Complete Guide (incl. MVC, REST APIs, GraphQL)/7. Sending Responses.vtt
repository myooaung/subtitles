WEBVTT
1
00:00:02.230 --> 00:00:08.170
In the last lecture you saw how to handle requests and how to read some data from the requests like

2
00:00:08.170 --> 00:00:12.820
for example the url and which http method we used.

3
00:00:12.940 --> 00:00:15.730
Now we'll learn about different http methods throughout the course,

4
00:00:15.730 --> 00:00:21.550
by the way get is default method used if you just enter a url into your browser.

5
00:00:21.940 --> 00:00:23.490
Let's now shrink this again,

6
00:00:23.630 --> 00:00:24.660
let's quit the server,

7
00:00:24.670 --> 00:00:26.490
you always need to quit and restart

8
00:00:26.500 --> 00:00:31.750
if you edit it because otherwise your changes will not be reflected because the old process will still

9
00:00:31.750 --> 00:00:32.710
be running

10
00:00:33.070 --> 00:00:35.890
and let's now also use that response object.

11
00:00:35.890 --> 00:00:41.470
Now we could log that with the console but actually this does not hold any interesting data,

12
00:00:41.470 --> 00:00:44.150
instead we can use it to fill it with data

13
00:00:44.170 --> 00:00:46.070
we want to send back.

14
00:00:46.120 --> 00:00:50.620
We do this by calling res and now what?

15
00:00:50.620 --> 00:00:54.010
There are a couple of methods we can use, for example set header,

16
00:00:54.010 --> 00:00:56.130
this allows us to set a new header.

17
00:00:56.320 --> 00:01:03.160
For example content-type and that is a default header which the browser knows and understands

18
00:01:03.160 --> 00:01:06.990
and accepts and then as a second value here, as a second argument,

19
00:01:07.010 --> 00:01:10.060
in set header, we set a value for this header key,

20
00:01:11.560 --> 00:01:13.880
and we can send this to or set this to text.html

21
00:01:13.880 --> 00:01:14.750
.

22
00:01:14.750 --> 00:01:22.370
Now what this will do is it will attach a header to our response where we basically pass some meta information

23
00:01:22.520 --> 00:01:28.870
saying that the type of the content which will also be part of the response is html.

24
00:01:29.110 --> 00:01:32.700
Now there is of course only a certain set of supported headers

25
00:01:32.720 --> 00:01:35.510
the browser understands and after this lecture,

26
00:01:35.510 --> 00:01:41.340
you'll find another lecture with some link where you can learn which headers you can set.

27
00:01:41.390 --> 00:01:43.190
Now you don't need to set that many,

28
00:01:43.190 --> 00:01:44.160
let me say that

29
00:01:44.260 --> 00:01:49.160
and later we will even learn about a package that does this for us so that we don't have to set the

30
00:01:49.170 --> 00:01:50.810
content type on our own.

31
00:01:51.110 --> 00:01:52.870
But here I will set it, now

32
00:01:52.880 --> 00:01:57.490
one important thing is missing of course and that is the html code, right.

33
00:01:57.590 --> 00:02:01.460
Thus far I'm saying we have html code but I'm not sending it.

34
00:02:01.490 --> 00:02:07.930
Now we do this by setting response and now we can set write here,

35
00:02:07.930 --> 00:02:14.760
write allows us to write some data to the response and this basically works in chunks you could say

36
00:02:15.130 --> 00:02:16.890
or in multiple lines,

37
00:02:16.900 --> 00:02:19.340
this would be a good picture to look at this,

38
00:02:19.360 --> 00:02:21.790
you write multiple lines of response.

39
00:02:21.790 --> 00:02:28.010
For example if we write html code like this, res write

40
00:02:28.210 --> 00:02:33.580
and if this looks super strange now, it is, we'll learn about a way easier way of sending html later,

41
00:02:33.580 --> 00:02:34.600
no worries.

42
00:02:34.780 --> 00:02:40.110
So here I'm just sending html and you can also put longer html in there,

43
00:02:40.110 --> 00:02:52.190
of course you could now have your head where you set the title, my first page like this and you could put

44
00:02:52.220 --> 00:02:54.560
even more into that line but to make it easier to read

45
00:02:54.560 --> 00:02:55.510
I'll write

46
00:02:55.520 --> 00:03:03.680
a new line where I now have my body. So I'm basically writing a whole html document here in a very complex

47
00:03:03.680 --> 00:03:04.240
way

48
00:03:04.610 --> 00:03:11.810
and there I'll just add a h1 tag saying hello from my nodejs server.

49
00:03:12.130 --> 00:03:12.370
Ok

50
00:03:12.380 --> 00:03:17.560
so this is now some html code and it will be written to the response line by line.

51
00:03:17.630 --> 00:03:23.740
We now also need to tell node once we're done with creating that response and we do this by calling

52
00:03:23.840 --> 00:03:31.310
end, so after we set all the headers and wrote all the data to the response body, we call end and now

53
00:03:31.310 --> 00:03:34.700
is the point where we must not write anymore.

54
00:03:34.730 --> 00:03:40.970
We can still call write but this will result in an error because we must not change the response after

55
00:03:40.970 --> 00:03:45.920
we ended it because this is basically the part where we will send it back to the client,

56
00:03:46.040 --> 00:03:49.090
nodejs will send it back to the client.

57
00:03:49.460 --> 00:03:56.510
So here it should send back a response with some html code inside of it where we also tell the browser

58
00:03:56.570 --> 00:03:58.060
that it's html code,

59
00:03:58.100 --> 00:04:00.350
the browser wouldn't know otherwise.

60
00:04:00.470 --> 00:04:07.140
And with that if we save that file, make sure you never forget to save your changes and we re-execute

61
00:04:07.140 --> 00:04:08.030
it,

62
00:04:08.060 --> 00:04:10.200
we again have that running process

63
00:04:10.370 --> 00:04:18.660
and now if I reload my localhost 3000 page here, we see hello from my nodejs server.

64
00:04:18.860 --> 00:04:25.110
And if I open the chrome developer tools here which you can also do from the menu, I use the shortcut,

65
00:04:25.130 --> 00:04:31.960
you can also use view developer, developer tools or that shortcut you see here.

66
00:04:31.990 --> 00:04:40.270
Now if you do that, let we reload, in the network tab here you will see this request, this first request

67
00:04:40.370 --> 00:04:45.190
and there you see headers, like for example in response headers,

68
00:04:45.350 --> 00:04:51.970
there you see my content type which I set right, this is the header we set here

69
00:04:52.180 --> 00:04:58.390
and if we click on response itself to see the response body, we see that html document code we

70
00:04:58.390 --> 00:05:02.920
wrote with the head section, with my first page and so on.

71
00:05:04.430 --> 00:05:07.650
So this is now how we can send a response,

72
00:05:07.760 --> 00:05:14.030
we'll later also learn about a way simpler way of doing that by using the expressjs framework

73
00:05:14.030 --> 00:05:20.380
but it's super important that you understand all the nitty gritty details that go on behind the scenes

74
00:05:20.390 --> 00:05:26.180
and in this case, we simply understand it by writing all the nitty gritty code on our own business. This is how

75
00:05:26.180 --> 00:05:29.600
we can work with requests and send responses,

76
00:05:29.780 --> 00:05:35.320
now let's connect both the request data we can get and the response data we can send.
