WEBVTT
1
00:00:02.080 --> 00:00:04.510
So we got a data definition defined,

2
00:00:04.570 --> 00:00:05.950
we got a blueprint,

3
00:00:06.070 --> 00:00:13.920
we got a schema for our product. Mongoose now also works with so-called models and the model is also

4
00:00:13.940 --> 00:00:15.200
what we'll export here,

5
00:00:15.220 --> 00:00:17.520
so I can already say model exports

6
00:00:17.620 --> 00:00:22.060
and now what I want to export is mongoose model.

7
00:00:22.060 --> 00:00:28.750
Now model is a function I call and a model basically is important for mongoose behind the scenes to connect

8
00:00:28.900 --> 00:00:32.770
a schema, a blueprint with a name basically,

9
00:00:32.920 --> 00:00:38.290
so here you give that model a name and that name here would be product. Typically you name it here like

10
00:00:38.290 --> 00:00:43.660
this with a capital starting character and then simply just well the name of the entity this reflects

11
00:00:43.720 --> 00:00:46.510
in your project or in your application.

12
00:00:46.510 --> 00:00:51.910
The second argument then is the schema so in my case that product schema we defined and this model is what

13
00:00:51.910 --> 00:00:57.280
I export because this model is what we'll work with in our code.

14
00:00:57.280 --> 00:01:05.470
So with that model defined here, we can now move over to the admin controller where we have post add product

15
00:01:05.500 --> 00:01:10.630
where we do save a new product and there indeed I want to create a new product

16
00:01:10.630 --> 00:01:14.000
and then I want to be able to save that. Now

17
00:01:14.090 --> 00:01:18.390
for that, we can basically keep the code we have here.

18
00:01:18.640 --> 00:01:25.720
We still import product from our models folder from the product file because I do export a model here

19
00:01:26.020 --> 00:01:33.510
and we can basically use that just in the way I used it here. One adjustment is required though, to the

20
00:01:33.510 --> 00:01:34.970
product constructor

21
00:01:35.040 --> 00:01:38.220
we don't pass multiple arguments like this,

22
00:01:38.220 --> 00:01:45.030
instead we pass one argument only and that one argument is a javascript object where we map the different

23
00:01:45.030 --> 00:01:47.240
values we defined in our schema.

24
00:01:47.250 --> 00:01:53.710
So here I would map the title to the title and you basically now have to go through all the fields you

25
00:01:53.710 --> 00:01:55.030
defined in the schema, the

26
00:01:55.030 --> 00:01:58.690
order does not matter though since it's in a javascript object,

27
00:01:58.690 --> 00:02:07.900
so you then map let's say price to price, you map description to description and you map the image url

28
00:02:07.900 --> 00:02:14.500
to image url and just in case you're wondering, the part on the right side of the colon,

29
00:02:14.520 --> 00:02:21.970
so title, price, description, image url refers to the data you receive in your controller action and

30
00:02:21.970 --> 00:02:27.170
the part on the left side of the colon refers to the keys you defined in your schema,

31
00:02:27.190 --> 00:02:34.760
so to these things. And now with this, this creates a new product based on our model and therefore a

32
00:02:34.760 --> 00:02:41.300
product managed by mongoose you could say and indeed such a product happens to have or such a model happens

33
00:02:41.300 --> 00:02:44.740
to have a save method now provided by mongoose,

34
00:02:44.810 --> 00:02:45.900
that's really important,

35
00:02:45.920 --> 00:02:49.100
this is not defined by us. In the product model,

36
00:02:49.160 --> 00:02:53.080
we define no save method, we did before but this is commented out.

37
00:02:53.210 --> 00:02:58.860
So we're not defining a save method, this save method here is coming from mongoose

38
00:02:59.240 --> 00:03:01.510
and then we can indeed call then on that,

39
00:03:01.610 --> 00:03:06.040
technically we don't get a promise but mongoose still gives us a then method,

40
00:03:06.140 --> 00:03:14.680
it also still gives us a catch method we can call and therefore this code should actually continue to

41
00:03:14.680 --> 00:03:15.630
work.

42
00:03:15.640 --> 00:03:17.340
Let's see if that is the case

43
00:03:17.380 --> 00:03:25.630
and let's head over to our application and click on add product. Now I do get an error from app.js

44
00:03:25.630 --> 00:03:29.400
because there I of course still use my user model,

45
00:03:29.440 --> 00:03:34.570
let me comment that out and let me comment it out here, let me comment out that entire middleware, for

46
00:03:34.570 --> 00:03:38.320
now we have no user and otherwise all requests will break for now so

47
00:03:38.350 --> 00:03:45.160
let's remove all that user related stuff in the app.js file, this middleware and the user model import and with

48
00:03:45.160 --> 00:03:48.930
that removed, let's try reloading that add product page

49
00:03:49.130 --> 00:03:51.820
and obviously we need to import the route again,

50
00:03:51.830 --> 00:03:55.300
so we should do that. Not only the get route but also the post route,

51
00:03:55.310 --> 00:04:02.880
so make sure you re-add both admin add product routes, this was the wrong one, this one is required.

52
00:04:04.640 --> 00:04:12.070
So make sure you have the get and the post and the product route added again because we manipulated these two admin controller

53
00:04:12.070 --> 00:04:14.110
actions and now with that,

54
00:04:14.150 --> 00:04:17.280
finally if I click on add product, this works

55
00:04:17.700 --> 00:04:24.570
and now let's test this, let's test a test product with some price, some image,

56
00:04:24.860 --> 00:04:26.780
does this work?

57
00:04:26.780 --> 00:04:28.280
Click add product,

58
00:04:28.280 --> 00:04:33.960
we get a page not found because we can't load any other pages, that is ok. In the code,

59
00:04:34.010 --> 00:04:35.190
I can't see an error

60
00:04:35.210 --> 00:04:37.660
but I got created product which looks good.

61
00:04:38.020 --> 00:04:40.100
And in compass let's refresh

62
00:04:40.100 --> 00:04:44.630
by clicking that icon on the top left and I connected to the wrong url,

63
00:04:44.630 --> 00:04:45.840
I'll fix that,

64
00:04:45.920 --> 00:04:49.280
therefore I'm connected to the test database instead of the shop database

65
00:04:49.280 --> 00:04:50.860
but theoretically it worked,

66
00:04:50.870 --> 00:04:56.360
theoretically we get a products collection with the product added. Now where is the products collection

67
00:04:56.360 --> 00:05:01.040
coming from you might be wondering by the way because we never defined that name? Well

68
00:05:01.070 --> 00:05:08.210
mongoose takes your model name, so product, turns it to all lowercase and takes the plural form of that

69
00:05:08.360 --> 00:05:10.520
and that will then be used as a collection name,

70
00:05:10.520 --> 00:05:17.420
so this is why our product here has a great impact because it was used for naming this collection

71
00:05:17.510 --> 00:05:19.350
and here we see the data we entered.

72
00:05:19.460 --> 00:05:20.260
So this is working,

73
00:05:20.270 --> 00:05:21.290
that's all great,

74
00:05:21.320 --> 00:05:28.440
I will still drop this collection here and quickly fix my connection settings in app.js

75
00:05:28.440 --> 00:05:31.260
at the bottom of the file. Here

76
00:05:31.310 --> 00:05:33.380
I do connect to the test database,

77
00:05:33.410 --> 00:05:34.810
I don't want to do that,

78
00:05:34.970 --> 00:05:37.510
I'll connect to the shop database instead

79
00:05:37.550 --> 00:05:40.960
just as we did it before. And with this tiny change,

80
00:05:41.090 --> 00:05:47.180
if I now go back to my application and I try adding this again, a book,

81
00:05:47.270 --> 00:05:50.030
now let's use that book url I used before,

82
00:05:52.630 --> 00:05:55.360
must read and click add product,

83
00:05:55.360 --> 00:06:01.210
now this still works in the same way it did before but now if I refresh here, my data is saved in the shop

84
00:06:01.290 --> 00:06:03.560
database and there in the products collection.

85
00:06:03.790 --> 00:06:05.380
So this is looking really good,

86
00:06:05.380 --> 00:06:08.170
we're now able to save data through mongoose.
