WEBVTT
1
00:00:02.290 --> 00:00:04.190
We define the product model

2
00:00:04.300 --> 00:00:09.250
and I mentioned that we can now work with this model to create new products and so on

3
00:00:09.370 --> 00:00:15.430
but for this, we of course also need a product table in our database and there right now we got no tables

4
00:00:15.430 --> 00:00:19.210
because I deleted the products table earlier in this module.

5
00:00:19.240 --> 00:00:26.800
I also mentioned that sequelize can create these tables for you and it indeed can. Now to create tables

6
00:00:26.800 --> 00:00:27.650
for you,

7
00:00:27.850 --> 00:00:31.490
you just have to tell sequelize to do that

8
00:00:31.630 --> 00:00:36.640
and I'll do that in the app.js file. In there

9
00:00:36.730 --> 00:00:45.760
I want to ensure that all my models are basically transferred into tables or get a table that belongs

10
00:00:45.760 --> 00:00:49.500
to them whenever we start our application

11
00:00:50.370 --> 00:00:54.960
and if the table already exists, it will of course not override it by default though we can tell

12
00:00:54.960 --> 00:00:56.490
it to do so.

13
00:00:56.760 --> 00:01:02.570
Now in my app.js file which is the file execute when I do start my program,

14
00:01:02.700 --> 00:01:08.970
I want to import from the database file as I did it before, I'll just rename it to sequelize because

15
00:01:08.970 --> 00:01:14.970
I do import my sequelize object with a lower case s because I'm importing from my own utility database

16
00:01:14.970 --> 00:01:18.800
set up file and then towards the end of this file,

17
00:01:19.190 --> 00:01:23.030
let's say here, I want to call sequelize

18
00:01:23.160 --> 00:01:31.440
and then there's a special method, the sync method. The sync method has a look at all the models you defined

19
00:01:31.890 --> 00:01:39.090
and keep in mind you defined your models in your model files by calling sequelize defined on that same

20
00:01:39.180 --> 00:01:40.820
sequelize object,

21
00:01:41.250 --> 00:01:45.720
so it is aware of all your models and it then basically creates tables for them.

22
00:01:45.720 --> 00:01:47.050
That is what sync does, 

23
00:01:47.100 --> 00:01:52.260
it syncs your models to the database by creating the appropriate tables

24
00:01:52.320 --> 00:02:01.410
and if you have them, relations. So here I will call sync and then I can listen to the result of this,

25
00:02:02.210 --> 00:02:08.760
let's see what we get back as a response here or what we get back as a value here and we can also of

26
00:02:08.760 --> 00:02:12.420
course catch potential errors that occurred

27
00:02:12.840 --> 00:02:20.160
and if an error occurred here, well then we can essentially also log that and I only want to let's say

28
00:02:20.160 --> 00:02:26.200
start my server if we somehow made it into then, let's see what this gives us.

29
00:02:26.370 --> 00:02:33.300
If I now run npm start here, it starts up and we see there is some log output.

30
00:02:33.490 --> 00:02:41.050
If you scroll up quite a bit because we got back a complex object, you see that this is a default log

31
00:02:41.140 --> 00:02:47.160
thrown by sequelize, it executed this SQL query for us without us writing this query.

32
00:02:47.250 --> 00:02:48.790
It created a table

33
00:02:48.820 --> 00:02:54.970
if it did not exist yet which it named product, products and that is that automatically inferred name

34
00:02:55.000 --> 00:03:02.010
because we named our model product, it automatically pluralizes that and then it assigned a couple of

35
00:03:02.790 --> 00:03:06.710
fields there which it configured according to our model definition.

36
00:03:07.080 --> 00:03:09.190
And then this is the return value we get back,

37
00:03:09.190 --> 00:03:12.150
basically our sequelize object you can tell

38
00:03:12.520 --> 00:03:21.680
and if I now quit this server with control c, clear the console and rerun npm start, you'll see it runs

39
00:03:21.680 --> 00:03:22.770
this again

40
00:03:22.910 --> 00:03:29.890
but it does not overwrite the existing table because we have that if not exists check in there automatically.

41
00:03:29.990 --> 00:03:33.150
So we can run this again without issues

42
00:03:33.350 --> 00:03:36.580
and our server starts up even if this table already exists,

43
00:03:36.590 --> 00:03:38.210
we still make it into then.

44
00:03:38.590 --> 00:03:44.390
Now I will comment out that result log because I don't want to have this long object every time, in the

45
00:03:44.390 --> 00:03:46.700
console every time we start this.

46
00:03:46.730 --> 00:03:53.480
So now I just get MySQL query here and if we now have a look at the workbench and we right click

47
00:03:53.540 --> 00:04:01.070
on our database and click on refresh all, we see that under tables, we get a products table and if we inspect

48
00:04:01.070 --> 00:04:08.840
that with this icon, we see all the fields we defined and that is added by sequelize to new fields, created

49
00:04:08.840 --> 00:04:10.540
at and updated at.

50
00:04:10.640 --> 00:04:13.340
So it automatically manages some timestamps for us,

51
00:04:13.340 --> 00:04:13.860
we could

52
00:04:14.080 --> 00:04:14.430
disable this

53
00:04:14.540 --> 00:04:16.220
but I actually like this feature,

54
00:04:16.220 --> 00:04:19.440
so we get these automatically managed fields too.

55
00:04:19.520 --> 00:04:24.910
This is how we sync our tables to the database and what sequelize does for us,

56
00:04:24.950 --> 00:04:27.710
and with that, we're now ready to use that.
