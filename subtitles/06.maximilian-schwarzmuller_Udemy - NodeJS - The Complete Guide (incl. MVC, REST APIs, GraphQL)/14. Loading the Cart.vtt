WEBVTT
1
00:00:02.150 --> 00:00:08.290
So in the last lecture, you saw how you can extend mongoose with your own functionality and that is

2
00:00:08.290 --> 00:00:09.490
really powerful.

3
00:00:10.470 --> 00:00:15.420
Now obviously, also check the official docs, there under schema

4
00:00:15.420 --> 00:00:17.420
you can learn way more about that,

5
00:00:17.430 --> 00:00:19.290
this is the technique we just used,

6
00:00:19.290 --> 00:00:24.900
we added an instance method, you can add more about that and all the nice features you can add to your

7
00:00:24.930 --> 00:00:25.900
own schemas

8
00:00:25.950 --> 00:00:26.800
and models,

9
00:00:26.880 --> 00:00:32.380
so definitely check that out for all the details that could be interesting to you.

10
00:00:32.430 --> 00:00:37.830
Now here I want to work on the route that allows us to load the cart and this is a nice practice for

11
00:00:37.830 --> 00:00:38.340
you again,

12
00:00:38.340 --> 00:00:43.590
feel free to pause the video at this point and go ahead and try to implement this on your own before we

13
00:00:43.790 --> 00:00:44.930
then do it together.

14
00:00:47.220 --> 00:00:48.610
Were you successful?

15
00:00:48.930 --> 00:00:50.140
Well let's go to the shop.js

16
00:00:50.140 --> 00:00:55.280
file in the controllers folder and we're looking for the get cart method here.

17
00:00:55.290 --> 00:01:02.790
Now there we have request user get cart and get cart is a method we defined in the past which does

18
00:01:02.790 --> 00:01:04.410
not exist by default,

19
00:01:04.440 --> 00:01:07.290
mongoose does not give us this method.

20
00:01:07.530 --> 00:01:11.550
So we again have to revisit our user model and in there,

21
00:01:11.560 --> 00:01:18.210
let's have a look at get cart, how we defined it in the past. In the past we simply reached out to our

22
00:01:18.210 --> 00:01:19.590
cart items,

23
00:01:19.590 --> 00:01:26.810
we got all the product IDs and then we had a look at the products collection to find all the products

24
00:01:26.810 --> 00:01:30.070
in there, convert this to array and return the products,

25
00:01:30.080 --> 00:01:36.270
so essentially get cart gave us an array of all the products in the cart.

26
00:01:36.380 --> 00:01:39.980
Now with mongoose, this is a bit easier,

27
00:01:40.010 --> 00:01:43.730
we already have our nested cart items array

28
00:01:43.870 --> 00:01:49.550
and if we have a look at compass, we see the items are objects where we have the product ID

29
00:01:49.550 --> 00:01:55.290
and now we simply need to populate the product ID with all the data we are interested in.

30
00:01:57.560 --> 00:02:04.370
So in shop.js in get cart, I will not call get cart on my user

31
00:02:04.440 --> 00:02:11.700
instead we can call populate on the user to fetch data even though we already fetch the user,

32
00:02:11.700 --> 00:02:20.620
we can also call populate on that and tell mongoose to fetch data for, now which path is it?

33
00:02:20.850 --> 00:02:31.640
Well for cart.items.productid, let me console log my products here to see if that works.

34
00:02:31.640 --> 00:02:33.740
Now we also need to add that route again,

35
00:02:33.740 --> 00:02:39.160
so in the shop.js file in the routes folder, let's add that get cart route again

36
00:02:39.410 --> 00:02:46.100
and with that changed, let me load the cart page and I get an error

37
00:02:46.110 --> 00:02:51.150
and the reason for that is populate does exist but actually it does not return a promise,

38
00:02:51.160 --> 00:02:53.360
so calling then on it would not work,

39
00:02:53.410 --> 00:03:01.540
we have to chain exec populate after that and then we'll get a promise,

40
00:03:01.540 --> 00:03:03.340
so then we should be able to call then.

41
00:03:03.490 --> 00:03:12.500
So now with that, let's log products, save that and reload that page, now I get no products in cart

42
00:03:12.500 --> 00:03:19.220
but if I go back, well we see actually what we have here is the full user object which makes sense because

43
00:03:19.220 --> 00:03:20.810
we're not just fetching products,

44
00:03:20.810 --> 00:03:22.460
we still work with the full user,

45
00:03:22.730 --> 00:03:24.290
so that is a tiny change

46
00:03:24.320 --> 00:03:31.280
so let's actually use or log the user cart items here to see if that was still populated with all the

47
00:03:31.280 --> 00:03:35.320
item data and I'll temporarily create an empty products array

48
00:03:35.330 --> 00:03:37.760
so the rest of the code does not fail

49
00:03:38.150 --> 00:03:42.050
and now let's save that and reload the cart page one more time.

50
00:03:42.190 --> 00:03:50.770
If I now go back, you see indeed here what I log, user cart items now is an array of items where the product

51
00:03:50.800 --> 00:03:53.740
ID is populated with the product data.

52
00:03:53.770 --> 00:03:58.030
So now it works a bit different than before but it still gives us the data we need,

53
00:03:58.300 --> 00:04:09.420
so here products now actually is user cart items and that is what I pass to my view but I will need

54
00:04:09.420 --> 00:04:14.830
to look into my view now because the structure changed a bit compared to before. The cart.ejs

55
00:04:14.870 --> 00:04:17.210
file is what we need to edit

56
00:04:17.310 --> 00:04:23.580
and in there, we loop through all products which is fine but remember that our product data will then be

57
00:04:23.580 --> 00:04:30.630
nested in a product ID field and you could also rename this to just product in your schema therefore

58
00:04:30.660 --> 00:04:35.270
which makes a bit more sense I guess but I still have product ID here,

59
00:04:35.310 --> 00:04:41.040
so the title is not available on the top level object which would be this object but on the nested product

60
00:04:41.100 --> 00:04:42.240
ID object.

61
00:04:42.240 --> 00:04:49.040
So here we have to say p.productid.title. The quantity is on the top level object

62
00:04:49.040 --> 00:04:56.000
so this is fine, the product ID again can be found on the product ID nested or embedded document

63
00:04:56.000 --> 00:04:57.020
though.

64
00:04:57.110 --> 00:05:04.280
So with that, let's save that and let's now reload the cart page and indeed we see our cart item here

65
00:05:04.310 --> 00:05:04.740
now.

66
00:05:04.850 --> 00:05:09.950
So this is looking better, now we're able to populate our cart with data.
