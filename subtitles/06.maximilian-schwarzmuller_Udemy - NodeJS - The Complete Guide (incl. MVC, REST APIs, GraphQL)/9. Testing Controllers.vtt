WEBVTT
1
00:00:02.190 --> 00:00:08.340
Ora ovviamente c'è di più che potremmo testare sul nostro middleware off, ma direi che lo abbiamo testato

2
00:00:08.400 --> 00:00:14.070
abbastanza ampiamente finora e quindi voglio andare avanti e voglio passare ai nostri controller che ovviamente

3
00:00:14.280 --> 00:00:17.500
ospitano anche molti dei nostri logica di base.

4
00:00:17.610 --> 00:00:19.650
Lì abbiamo quel controller spento.

5
00:00:19.650 --> 00:00:25.140
Ovviamente abbiamo quel controller di alimentazione ora per quel controller di alimentazione.

6
00:00:25.140 --> 00:00:28.660
Abbiamo percorsi in cui dobbiamo essere autenticati.

7
00:00:28.680 --> 00:00:32.160
Qui diamo un'occhiata ai nostri percorsi qui per ottenere post.

8
00:00:32.160 --> 00:00:37.370
Ad esempio, dobbiamo essere autenticati per creare post.

9
00:00:37.380 --> 00:00:41.750
Abbiamo bisogno di essere autenticati essenzialmente per tutte le nostre decisioni post-correlate.

10
00:00:41.760 --> 00:00:48.080
Abbiamo bisogno di essere autenticati e prima che ci prendiamo cura di questo diamo un'occhiata al nostro controller spento.

11
00:00:48.090 --> 00:00:54.090
Pertanto, poiché queste rotte non ci impongono di essere autenticate, è davvero troppo importante

12
00:00:54.090 --> 00:00:56.040
da mettere in discussione.

13
00:00:56.040 --> 00:01:02.710
Bene, diamo un'occhiata a come raggiungiamo le funzioni del nostro controller qui come registrarsi o accedere.

14
00:01:02.790 --> 00:01:09.030
Naturalmente li abbiamo raggiunti tramite i nostri percorsi definiti nella cartella dei percorsi in cui inviamo richieste in

15
00:01:09.060 --> 00:01:09.750
India.

16
00:01:09.840 --> 00:01:12.780
Quindi queste sono le API e i punti che esponiamo qui.

17
00:01:13.080 --> 00:01:15.080
E ora cosa ho menzionato prima.

18
00:01:15.120 --> 00:01:17.070
Cosa stiamo testando?

19
00:01:17.070 --> 00:01:18.840
Bene, stiamo scrivendo i test delle unità.

20
00:01:18.840 --> 00:01:23.880
Stiamo testando le unità nel nostro codice proprio come il middleware ti allontana dal middleware.

21
00:01:23.880 --> 00:01:30.210
E quindi ciò che non testerà è che il routing qui non testerà se siamo in

22
00:01:30.210 --> 00:01:38.370
grado di inviare una richiesta di accesso ed eseguiamo la funzione di login nel controller di spegnimento perché tutto questo per

23
00:01:38.370 --> 00:01:41.880
scongiurare la richiesta l'esecuzione di questo metodo qui.

24
00:01:41.910 --> 00:01:43.940
Questo è tutto gestito da espresso.

25
00:01:44.050 --> 00:01:48.550
E come ho detto prima, non vuoi testare le nostre librerie.

26
00:01:48.570 --> 00:01:50.520
Vuoi testare il tuo codice.

27
00:01:50.520 --> 00:01:56.790
Quindi non abbiamo assolutamente bisogno di testare questo flusso e quindi testeremo semplicemente queste funzioni del controller che

28
00:01:56.790 --> 00:02:00.550
esportiamo qui come la registrazione o per accedere alla funzione.

29
00:02:00.570 --> 00:02:06.240
Queste sono le cose che vogliamo testare adesso, quando sono lì, naturalmente, di nuovo c'è una grande varietà di cose

30
00:02:06.240 --> 00:02:07.170
che possiamo testare.

31
00:02:07.260 --> 00:02:14.100
Possiamo verificare se siamo in grado di estrarre e-mail e password dalla richiesta in arrivo, anche se questo è

32
00:02:14.100 --> 00:02:19.020
un test non troppo utile perché simuleremo la richiesta che sta arrivando.

33
00:02:19.020 --> 00:02:24.840
Quindi decidiamo se è impostato o meno, ma possiamo quindi verificare se si comporta correttamente se per

34
00:02:24.840 --> 00:02:30.560
esempio non è impostata alcuna e-mail o se abbiamo già un utente con quella e-mail.

35
00:02:30.810 --> 00:02:34.530
Tuttavia c'è una nuova complessità aggiunta.

36
00:02:34.530 --> 00:02:42.960
Ora abbiamo un database ora stiamo interagendo con il modello User qui e il modello User è ovviamente basato

37
00:02:42.960 --> 00:02:45.240
sui nostri modelli Mongoose qui.

38
00:02:45.240 --> 00:02:51.840
Questo è il nostro modello utente e quello dietro le quinte usa Mongo D. B. e ciò naturalmente pone

39
00:02:51.840 --> 00:02:57.150
al centro di una importante domanda come possiamo testare il nostro database.

40
00:02:57.150 --> 00:02:59.920
Come possiamo gestire questo ora.

41
00:03:00.070 --> 00:03:03.990
E scopre che ci sono due strategie principali che possiamo seguire.

42
00:03:03.990 --> 00:03:11.850
Quindi diamo un'occhiata sia alla strategia numero uno per testare il codice che coinvolge le

43
00:03:12.270 --> 00:03:22.810
operazioni del database sia che stubiamo o prendiamo in giro le parti che effettivamente si basano sull'accesso al database e cosa significherebbe.

44
00:03:22.830 --> 00:03:31.200
Ciò potrebbe significare ad esempio che qui quando eseguiamo find one creiamo nuovamente un passo che restituisce un risultato predefinito e

45
00:03:31.200 --> 00:03:34.840
testiamo quindi se il nostro codice si comporta correttamente.

46
00:03:35.340 --> 00:03:44.070
Quindi, ad esempio, potremmo essere interessati qui a scoprire come si comporta il nostro codice quando trovi un errore

47
00:03:44.130 --> 00:03:44.670
congelato.

48
00:03:44.670 --> 00:03:52.350
Quindi, se abbiamo problemi a interagire con il database o come si comporta il nostro codice se non abbiamo un utente con

49
00:03:52.350 --> 00:03:55.420
tale indirizzo di posta elettronica durante il login.

50
00:03:55.530 --> 00:03:59.160
Questi sono due diversi scenari e possiamo scrivere due test differenti per quello.

51
00:03:59.160 --> 00:04:02.540
Entrambi gli scenari dovrebbero effettivamente generare un errore alla fine.

52
00:04:02.550 --> 00:04:09.420
Qui ne gettiamo uno manualmente e se ne trovi uno fallisce anche un errore, ma il codice di stato per

53
00:04:09.420 --> 00:04:11.040
esempio dovrebbe essere diverso.

54
00:04:11.040 --> 00:04:17.520
Il codice di stato dovrebbe essere 500 se il database fallisce perché usiamo il nostro codice predefinito o impostiamo il

55
00:04:17.520 --> 00:04:18.800
nostro codice 401.

56
00:04:18.810 --> 00:04:24.900
Se non abbiamo un utente ora per testarci tutti prima di tutto creare un nuovo file nella cartella di test e

57
00:04:24.900 --> 00:04:34.080
io chiamerò come dal punto di controllo del controller J. S. e lì come nel file middleware spento

58
00:04:34.860 --> 00:04:42.180
che importerò mi aspetto dalla Cina e importerò anche il segno allora perché inizierò con lo stub in quel

59
00:04:42.180 --> 00:04:49.740
post per trovare un metodo che naturalmente aggiunga che l'utente trova un metodo quindi anch'io importare l'utente richiedendolo dal

60
00:04:49.740 --> 00:04:56.340
file del modello utente proprio come lo sto facendo qui nel controller off ci stiamo anche importando

61
00:04:56.340 --> 00:04:57.750
il modello utente.

62
00:04:57.750 --> 00:05:02.670
Quindi ora voglio testare e accedere alla funzione e poiché voglio testare

63
00:05:02.670 --> 00:05:11.010
la funzione che dobbiamo importare anche quest'anno, o in generale, importerò il mio off controller richiedendolo dal file off e dalla

64
00:05:11.010 --> 00:05:12.640
cartella dei controller.

65
00:05:12.800 --> 00:05:22.310
Ora aggiungiamo il blocco scribe forse dove testiamo il nostro log in off controller perché anche se testiamo solo il controller spento in

66
00:05:22.310 --> 00:05:27.380
questo intero file potremmo provare diverse parti di quel controller come accedere

67
00:05:27.380 --> 00:05:30.110
e registrarti e così via .

68
00:05:30.140 --> 00:05:41.330
Quindi sei vecchio inizio con il log in e poi qui voglio iniziare fermando il mio metodo find one perché è la prima tattica che possiamo applicare

69
00:05:41.340 --> 00:05:46.860
possiamo semplicemente smettere di fare un modo per non fare un vero accesso

70
00:05:46.860 --> 00:05:47.880
al database.

71
00:05:48.150 --> 00:05:56.430
Quindi qui quello che possiamo fare è, naturalmente, posso usare nuovamente il segno e creare uno stub che lo creo sull'oggetto utente per

72
00:05:56.610 --> 00:05:58.740
trovare un metodo ora se

73
00:06:01.550 --> 00:06:05.020
voglio che tu ci abbia costretti a lanciare un errore.

74
00:06:05.030 --> 00:06:13.590
Posso quindi chiamare l'utente trovare una gola ora qui non farà ora un errore tra l'altro.

75
00:06:13.590 --> 00:06:16.710
Ovviamente un problema che ho qui è che sono nel blog dello scrivano.

76
00:06:16.710 --> 00:06:20.840
Questo dovrebbe andare in un blocco IT che era così in un vero e proprio banco di prova.

77
00:06:20.880 --> 00:06:29.350
Quindi qui dovrebbe fluire un'ora o se l'accesso al database fallisce.

78
00:06:29.370 --> 00:06:31.800
Per esempio.

79
00:06:31.880 --> 00:06:37.010
Quindi ora qui in quella funzione definiamo il nostro codice di test effettivo e lì impostiamo quello stub.

80
00:06:37.200 --> 00:06:43.340
E la cosa importante qui ovviamente è che sto facendo finta che il data base fallisca perché cambio completamente

81
00:06:43.340 --> 00:06:49.310
per trovare un metodo con un arresto che genera un errore perché la cosa reale che voglio controllare

82
00:06:49.310 --> 00:06:52.970
è ovviamente che dovremmo lanciare un errore con il codice 500.

83
00:06:52.970 --> 00:06:59.150
Quindi voglio verificare se il nostro codice di stato predefinito in basso viene applicato correttamente.

84
00:06:59.210 --> 00:07:06.470
Ora torno nel controller spento alla fine voglio anche richiamare il ripristino qui.

85
00:07:06.550 --> 00:07:16.480
Ma in mezzo voglio ovviamente definire le mie aspettative e l'aspettativa qui è che per il mio off

86
00:07:16.480 --> 00:07:24.510
controller il metodo di login quando viene chiamato che in realtà genera un errore.

87
00:07:24.520 --> 00:07:30.070
Ora per questo diamo un'occhiata di nuovo al controller off e ora dovresti riconoscere che dobbiamo mettere la

88
00:07:30.070 --> 00:07:32.080
parola chiave async davanti a quello.

89
00:07:32.290 --> 00:07:38.030
Non è una funzione normale, è una funzione asincrona e questo significa che alla fine usiamo le promesse.

90
00:07:38.080 --> 00:07:43.600
Potresti ricordare che l'attesa asincrona è solo una sintassi più elegante per usare le promesse.

91
00:07:43.630 --> 00:07:49.240
Quindi in realtà abbiamo qui un codice sincrono che è una complessità di navigazione che

92
00:07:49.600 --> 00:07:55.100
dovrà essere affrontata perché l'esecuzione di quel codice non avverrà in modo sincrono.

93
00:07:55.210 --> 00:08:01.080
Ciò significa che per impostazione predefinita la nostra aspettativa non funzionerà come ci si aspetterebbe che funzioni.
