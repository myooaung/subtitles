1
00:00:02,230 --> 00:00:05,230
Now we learned about cors in the last lecture,

2
00:00:05,230 --> 00:00:08,740
now let me show you how it affects our post requests.

3
00:00:09,070 --> 00:00:18,260
So I'll use my post button to also add an event listener there, click like this

4
00:00:19,090 --> 00:00:27,440
and in there I'll also use the fetch method to send a fetch request to the same url as before but it ends

5
00:00:27,440 --> 00:00:31,600
with /posts because I'm targeting this

6
00:00:31,640 --> 00:00:34,530
url here which is just post, not posts.

7
00:00:36,000 --> 00:00:41,840
So if you name this differently, you should of course use your path. Here since it will be a post request,

8
00:00:41,850 --> 00:00:47,060
I need to pass a javascript object as a second argument which allows me to set some options.

9
00:00:47,280 --> 00:00:54,270
Specifically I want to set the method to post here to send a post request and then I will copy that

10
00:00:54,270 --> 00:01:02,100
code from up there for handling the response so that I can, well extract the data or log a potential

11
00:01:02,100 --> 00:01:06,690
error. If I now clear that and I hit create post,

12
00:01:06,870 --> 00:01:12,720
I get post created successfully but if we inspect the post object, we see that the title and content are

13
00:01:12,720 --> 00:01:13,750
missing.

14
00:01:13,770 --> 00:01:17,350
Now that makes a lot of sense because we didn't send that data.

15
00:01:17,610 --> 00:01:24,090
Instead on the post request in the client, we also want to set a body object and that object will hold

16
00:01:24,090 --> 00:01:24,740
the title, a

17
00:01:28,330 --> 00:01:34,560
codepen post and content created via codepen,

18
00:01:34,570 --> 00:01:37,030
whatever you want. If I clear that and

19
00:01:37,040 --> 00:01:42,990
now I click that button again, hmm I still don't see that here.

20
00:01:43,290 --> 00:01:50,820
Now on the server side, nothing goes wrong here but actually on the server side, if I would go to my

21
00:01:50,820 --> 00:01:59,310
controller and I would log title and content here or use the node debugger to see their values, if we

22
00:01:59,310 --> 00:02:03,390
log that and I click create post, then we see that

23
00:02:03,420 --> 00:02:05,420
undefined gets logged here.

24
00:02:05,520 --> 00:02:08,480
So we are not able to extract that data

25
00:02:08,880 --> 00:02:14,110
and the reason for that can be found if we go to the network tab and have a look at this post request

26
00:02:14,110 --> 00:02:17,770
that was sent, there in the request headers,

27
00:02:17,880 --> 00:02:26,140
we see that the content type was text plain and that is the problem. It should be application json

28
00:02:26,320 --> 00:02:33,190
but we also see that the request payload was not json data which in the end is just text but in

29
00:02:33,190 --> 00:02:34,510
a special format

30
00:02:34,720 --> 00:02:41,140
but that it was a javascript object which just can't be sent or which can't be handled.

31
00:02:41,140 --> 00:02:43,270
So there are two things we need to do.

32
00:02:43,270 --> 00:02:51,100
First of all on the body, I will call json stringify which is a method provided by default by javascript,

33
00:02:51,130 --> 00:02:56,570
it will take a javascript object and convert it to json. We can see that immediately if I click create

34
00:02:56,590 --> 00:02:59,230
post again and we inspect that request,

35
00:02:59,230 --> 00:03:07,000
the payload now is indeed text in the json format but we need to tell the server that our content

36
00:03:07,010 --> 00:03:09,680
type is of type application json

37
00:03:09,790 --> 00:03:17,500
and therefore besides setting the body, on the client I'll also add headers or one header, the content type

38
00:03:17,500 --> 00:03:22,830
header, content-type which is application/json.

39
00:03:22,890 --> 00:03:27,090
And now with that, if I click create post again,

40
00:03:27,090 --> 00:03:33,860
now in the created post we see title or title and content because now that data is sent and extracted

41
00:03:33,870 --> 00:03:40,980
correctly because we send it in the right format and we inform the server about the content type.

42
00:03:40,980 --> 00:03:48,330
Now this also allows me to demonstrate what happens if I would comment out this header here, the access

43
00:03:48,330 --> 00:03:52,030
control allow headers header on the server side.

44
00:03:52,110 --> 00:03:59,700
If I save after commenting this out and I try to create a post again, I fail because I'm not allowed to

45
00:03:59,700 --> 00:04:01,580
set content-type,

46
00:04:01,950 --> 00:04:06,300
I do allow this by adding this header on the server side.

47
00:04:06,330 --> 00:04:09,600
So this is how you communicate between client and server,

48
00:04:09,660 --> 00:04:14,290
of course the client code differs depending on the client you're using.

49
00:04:14,310 --> 00:04:17,020
This is javascript code using the fetch API,

50
00:04:17,160 --> 00:04:20,700
there are different ways of sending asynchronous requests,

51
00:04:20,700 --> 00:04:26,700
for example you can send Ajax requests through libraries like axios and if you are building a mobile

52
00:04:26,700 --> 00:04:33,570
app, you might have a totally different object or helper methods for sending such requests in Android,

53
00:04:33,720 --> 00:04:35,700
in swift and so on.

54
00:04:35,700 --> 00:04:41,960
So this client code differs, this is the javascript code using the fetch API, the server side code does not

55
00:04:41,960 --> 00:04:42,800
really differ.

56
00:04:42,960 --> 00:04:48,440
You want to make sure your clients can communicate and that everything works just fine there.

57
00:04:48,450 --> 00:04:53,410
Now before I conclude this though, one more word about the post request we're sending with this click.

58
00:04:53,760 --> 00:04:57,370
You might see that I actually have two requests being sent,

59
00:04:57,420 --> 00:05:03,090
the second one is our post request, what is the first request?

60
00:05:03,090 --> 00:05:07,990
If you have a look at it and we see the response is just post, ok,

61
00:05:08,100 --> 00:05:13,670
the headers are interesting though. We can see that in the general part,

62
00:05:13,920 --> 00:05:19,970
the method here is options and that is this last method I showed on the slide earlier.

63
00:05:20,120 --> 00:05:23,390
I mentioned it would be sent automatically by the browser and also

64
00:05:23,400 --> 00:05:28,130
for example by many mobile app clients. What is the idea behind options?

65
00:05:28,180 --> 00:05:36,580
The browser simply goes ahead and checks whether the request you plan to send which is a post request,

66
00:05:36,580 --> 00:05:40,910
that is why here in the request headers which are generated automatically by the browser,

67
00:05:41,020 --> 00:05:46,690
it checks for the post request, it checks if that will be allowed

68
00:05:46,780 --> 00:05:48,690
otherwise it will throw an error.

69
00:05:48,700 --> 00:05:54,060
This is simply a mechanism the browser and many other clients use and there is not too much you need

70
00:05:54,100 --> 00:05:56,380
you to do to make this work,

71
00:05:56,380 --> 00:05:58,300
it just works out of the box,

72
00:05:58,390 --> 00:06:00,910
you just want to make sure that you set the right cors

73
00:06:00,910 --> 00:06:08,260
headers here. You can add options to the allowed methods but as you see, it was able to make this request

74
00:06:08,260 --> 00:06:09,010
before,

75
00:06:09,010 --> 00:06:11,210
this is not really something you need to do

76
00:06:11,230 --> 00:06:16,000
but you can do it but the important thing is that you are not confused by that extra request.

77
00:06:16,000 --> 00:06:21,550
It's simply a mechanism the browser uses to see if the next request which it wants to view, the post request

78
00:06:21,730 --> 00:06:29,320
will succeed if it is allowed. And this is all I want to tell you about cors and client server communication

79
00:06:29,320 --> 00:06:29,820
for now.