1                                                                      1
00:00:02,270 --> 00:00:07,310
In un certo senso ho risposto perché vogliamo un test già, ma vorrei davvero renderlo nuovamente chiaro.

2
00:00:07,430 --> 00:00:14,540
Testare così e con ciò intendo test automatici ci consente di testare automaticamente tutto e c'è una stella

3
00:00:14,540 --> 00:00:19,940
dietro perché testiamo solo ciò che definiamo quindi solo i test che scriviamo.

4
00:00:20,000 --> 00:00:23,810
Ma in teoria ti permette di testare tutto nella tua applicazione.

5
00:00:23,870 --> 00:00:30,980
Dopo ogni modifica del codice dopo ogni cambio di codice, è quindi facile rilevare le variazioni di interruzione anche in luoghi

6
00:00:30,980 --> 00:00:35,700
che non ci si sarebbe potuti aspettare per eseguire l'aggiornamento delle ultime modifiche.

7
00:00:35,930 --> 00:00:42,430
E con i test automatici ci assicuriamo di avere prevedibili fasi di test chiaramente definite.

8
00:00:42,710 --> 00:00:49,070
Ovviamente i nostri test funzionano sempre nello stesso identico modo e definiamo tutti i passaggi del codice e ciò garantisce

9
00:00:49,070 --> 00:00:53,610
che possiamo sempre fare affidamento sul fatto che lo scenario sia sempre lo stesso.

10
00:00:53,660 --> 00:00:57,980
Se stai provando manualmente la tua app, potresti pensare che stai facendo la stessa cosa che hai fatto

11
00:00:57,980 --> 00:00:58,550
l'ultima volta.

12
00:00:58,550 --> 00:01:02,600
Ma in realtà potresti non farlo perché hai dimenticato un passaggio.

13
00:01:02,690 --> 00:01:04,330
Ecco perché è necessario testare.

14
00:01:04,370 --> 00:01:12,160
Come si imposta quindi il progetto del nodo per i test, indipendentemente da ciò che si sta creando con i jar dei nodi.

15
00:01:12,180 --> 00:01:17,310
Quindi, non importa se stai costruendo una pagina in cui rendi l'uso sul server

16
00:01:17,310 --> 00:01:23,600
se stai costruendo un'API REST o se stai costruendo un grafico El API vuoi eseguire i test automaticamente.

17
00:01:23,630 --> 00:01:29,350
Quindi vuoi eseguire il codice che testa il tuo codice e verdad di solito hai bisogno di un paio di strumenti.

18
00:01:29,520 --> 00:01:32,560
Hai bisogno di uno strumento che esegua il tuo codice di prova.

19
00:01:32,730 --> 00:01:37,410
Sembra piuttosto semplice ma è necessario e non dovrebbe solo eseguire il codice.

20
00:01:37,410 --> 00:01:44,070
Dovrebbe anche darti un buon output che ti dice se i tuoi test passano tutti o se un test fallisce.

21
00:01:44,070 --> 00:01:46,570
Questo è il primo strumento di cui abbiamo bisogno.

22
00:01:46,650 --> 00:01:52,290
Il secondo strumento è quindi uno che non esegue semplicemente il nostro codice ma che ci consente anche di definire

23
00:01:52,290 --> 00:01:54,240
determinate condizioni che devono essere soddisfatte.

24
00:01:54,270 --> 00:02:00,020
Quindi vogliamo affermare determinati risultati che vogliamo scoprire se determinati scenari.

25
00:02:00,360 --> 00:02:02,550
Ben riuscito se il test è riuscito.

26
00:02:02,550 --> 00:02:06,420
Volevamo scoprire cosa significa successo in un determinato test.

27
00:02:06,420 --> 00:02:09,540
Quindi vogliamo convalidare il risultato del test.

28
00:02:09,540 --> 00:02:14,190
Ora per eseguire i test ci sono diversi strumenti per tutti questi passaggi ma

29
00:02:14,520 --> 00:02:18,660
per eseguire questi test un framework popolare è mocha e useremo mocha.

30
00:02:18,660 --> 00:02:26,160
Anche in questo modulo qui e per affermare i risultati e definire le condizioni, Chai è una scelta popolare

31
00:02:26,160 --> 00:02:28,970
e la useremo anche in questo modulo.

32
00:02:28,980 --> 00:02:34,740
Ci sono alternative come just ma mocha e Chai sono molto popolari da molto tempo.

33
00:02:34,740 --> 00:02:40,640
Ci sono un sacco di tutorial in giro per te per immergerti più a fondo e quindi li userò anche qui.

34
00:02:40,650 --> 00:02:44,400
Sicuramente non stai facendo nulla di sbagliato quando ti attieni a questi strumenti.

35
00:02:44,400 --> 00:02:50,970
Ora, come vedrai per questo modulo, ci sarà anche uno strumento di cui abbiamo

36
00:02:50,970 --> 00:02:58,380
sempre bisogno per gestire gli effetti collaterali o lavorare con dipendenze esterne o con determinati scenari complessi.

37
00:02:58,380 --> 00:03:05,370
Verrà utilizzato il segno su cui è uno strumento che ci consente di creare gradini o segni e tornerò a

38
00:03:05,370 --> 00:03:07,420
ciò che è in seguito.

39
00:03:07,440 --> 00:03:13,470
Ora, con tutto questo, direi che installiamo i nostri strumenti di test di base e impostiamo il nostro ambiente

40
00:03:13,710 --> 00:03:20,100
di test e poi scriviamo anche il nostro primo test in modo da poter esaminare a poco a poco la

41
00:03:20,100 --> 00:03:23,220
nostra applicazione di nodo e vedere come potremmo testarlo.
