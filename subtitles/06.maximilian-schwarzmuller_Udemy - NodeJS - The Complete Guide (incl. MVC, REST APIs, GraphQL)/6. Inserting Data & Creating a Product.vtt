WEBVTT
1
00:00:02.570 --> 00:00:10.310
So time to use sequelize outside of the table creation. For this, let's go into our controller files

2
00:00:10.430 --> 00:00:15.920
and there let's start with creating a new product because that will be helpful for later also retrieving

3
00:00:15.920 --> 00:00:23.130
them. In admin.js, we right now import our product model from the models file

4
00:00:23.270 --> 00:00:27.350
and that is fine because we do still export it there at the bottom,

5
00:00:27.350 --> 00:00:29.670
so we should still import it in admin.js

6
00:00:29.670 --> 00:00:38.150
but here in post add product, we will now work with that product a bit differently. What it will do

7
00:00:38.150 --> 00:00:47.270
here is I will get rid of that old code we used for creating a product and instead, I will now create

8
00:00:47.360 --> 00:00:49.000
a new product here

9
00:00:50.340 --> 00:00:57.030
by calling one of the methods provided by sequelize and by just typing the dot, my IDE suggests me a 

10
00:00:57.030 --> 00:01:03.210
lot of methods I can call and these methods are all coming from sequelize which shows its great power

11
00:01:04.020 --> 00:01:11.310
and there we got create for example. Create creates a new element based on that model and immediately

12
00:01:11.310 --> 00:01:13.730
saves it to the database.

13
00:01:13.740 --> 00:01:19.660
There also is build which also creates a new object based on the model but only in javascript

14
00:01:19.800 --> 00:01:21.780
and then we need to save it manually,

15
00:01:21.870 --> 00:01:24.970
so create basically does it in one go, with build

16
00:01:25.050 --> 00:01:29.510
we get the object in javascript first before we then have to save it manually.

17
00:01:29.610 --> 00:01:37.980
I would go for create to immediately store it and now create here simply takes some arguments that we

18
00:01:37.980 --> 00:01:43.920
need to pass per our model definition. So I can pass in a javascript object

19
00:01:43.920 --> 00:01:50.350
and now here, I even get the auto-completion by my IDE to assign field values.

20
00:01:50.370 --> 00:01:52.100
Now I don't need to assign an ID,

21
00:01:52.120 --> 00:01:54.130
that will be managed automatically

22
00:01:54.180 --> 00:01:59.150
but for example I need to assign a title by storing the title here,

23
00:01:59.160 --> 00:02:04.770
so on the right side of the colon, I'm referring to my constant, left side refers to one of the attributes

24
00:02:04.790 --> 00:02:06.690
I defined in the model.

25
00:02:06.690 --> 00:02:09.750
I also have a price which I assign to price,

26
00:02:09.750 --> 00:02:16.560
I also have an image url which I assign to image url, whoops, image url and I also get a description

27
00:02:16.560 --> 00:02:23.640
which I assign the description value I fetched and as I said, this will immediately save it to database.

28
00:02:23.640 --> 00:02:29.820
Now just as MySQL did in the last course module, sequelize works with promises.

29
00:02:29.880 --> 00:02:34.820
So here we can chain then and we can chain catch,

30
00:02:35.200 --> 00:02:43.180
we can catch any error we might get to see what's going wrong and we can now also have a look at the result

31
00:02:43.210 --> 00:02:43.990
we get

32
00:02:44.020 --> 00:02:46.570
in case it does not go wrong.

33
00:02:46.710 --> 00:02:54.830
Now with that if we save this, let's go to our application and it won't work by default because fetch all

34
00:02:54.940 --> 00:02:59.190
is not working because we have no function place to fetch products.

35
00:02:59.470 --> 00:03:04.600
So for now, we have to immediately go to /admin/add product to load this page,

36
00:03:04.600 --> 00:03:07.150
the other pages won't work

37
00:03:07.420 --> 00:03:11.430
and here I'll store my first book. I fetch an image url,

38
00:03:11.470 --> 00:03:19.450
make sure it's not a base64 url but a real url pointing at some jpg or png file. I'll

39
00:03:19.540 --> 00:03:26.980
assign a price here and I will store a description, this is the first book

40
00:03:27.080 --> 00:03:31.350
I add through sequelize.

41
00:03:31.540 --> 00:03:40.280
If I click add product here and we go back to nodejs, this seems to have succeeded here because

42
00:03:40.280 --> 00:03:41.640
we get no errors,

43
00:03:41.660 --> 00:03:43.780
here we see the SQL statement it executed,

44
00:03:43.790 --> 00:03:44.850
insert into.

45
00:03:45.110 --> 00:03:48.510
I got an error before that though,

46
00:03:48.650 --> 00:03:50.820
that was when I tried to reach the

47
00:03:51.050 --> 00:03:56.390
well the page listing all the products where we failed to call fetch all because that is not provided

48
00:03:56.390 --> 00:03:57.320
by sequelize

49
00:03:57.560 --> 00:03:59.790
but thereafter once I was in the right page,

50
00:03:59.900 --> 00:04:01.870
inserting this was executed.

51
00:04:02.090 --> 00:04:07.130
You see it also executed the syntax where it escapes the values automatically as we did in the last

52
00:04:07.130 --> 00:04:10.900
module and in the return value, this is looking good,

53
00:04:10.910 --> 00:04:17.700
it looks like it did create this book and we can prove that by going to our products table and refresh this and

54
00:04:17.900 --> 00:04:24.210
we should see our book being added there, so this indeed succeeded.

55
00:04:24.240 --> 00:04:27.760
So this is how we can add a value through sequelize

56
00:04:27.900 --> 00:04:35.090
and this is a huge step forward of course and I'll comment out my result log here and simply log

57
00:04:35.090 --> 00:04:41.280
created product to not pollute my console as much.

58
00:04:41.360 --> 00:04:43.310
So now we created a product,

59
00:04:43.430 --> 00:04:47.270
let's in the next step have a look at how we can use sequelize to retrieve data.
