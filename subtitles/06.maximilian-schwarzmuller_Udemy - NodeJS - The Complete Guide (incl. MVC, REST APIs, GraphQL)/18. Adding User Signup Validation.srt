1
00:00:02,330 --> 00:00:08,540
I will create a new controller, auth.js that is related to my users, to my user data, to my authentication

2
00:00:08,540 --> 00:00:16,280
logic and in there I'll first of all import my user model by requiring it from my models folder, the

3
00:00:16,280 --> 00:00:18,230
user file.

4
00:00:18,230 --> 00:00:25,660
Now we need at least two actions here and the first one is of course the action to sign a new user up.

5
00:00:25,760 --> 00:00:32,750
So I'll name this action sign up and I'll get my request, my response and that next function

6
00:00:32,840 --> 00:00:39,100
and in here I want to add all the logic I need to create a new user in the database. So for that

7
00:00:39,120 --> 00:00:46,410
let's extract the email from request body email, let's extract the name of the user from request body

8
00:00:46,500 --> 00:00:52,300
name and let's extract the password from request body password.

9
00:00:52,350 --> 00:00:56,530
Now obviously to extract all of that, we need to know that it's there,

10
00:00:56,580 --> 00:00:59,870
so we should add validation. For this

11
00:00:59,870 --> 00:01:02,990
I'll go to my auth routes again and just as in feed.js,

12
00:01:03,020 --> 00:01:07,440
I will add this express validator check,

13
00:01:07,430 --> 00:01:11,940
so I will copy that import from feed.js and add it to auth.js

14
00:01:12,060 --> 00:01:18,480
and on sign up, I'll then add an array of validation related middleware.

15
00:01:18,480 --> 00:01:19,610
I'll check my request

16
00:01:19,610 --> 00:01:27,810
body and there, the email field whether it is an email, you can also just to bring this back into memory define

17
00:01:27,810 --> 00:01:29,670
our own messages if we want to,

18
00:01:29,850 --> 00:01:32,920
please enter a valid email,

19
00:01:32,940 --> 00:01:37,090
this will then be stored in the error object we can retrieve.

20
00:01:37,110 --> 00:01:44,880
We can also add our own custom validator here to check whether the email address already exists, for

21
00:01:44,880 --> 00:01:45,550
this

22
00:01:45,750 --> 00:01:54,250
I'll import my user model, so require that from the models folder and then custom and you learned

23
00:01:54,250 --> 00:01:59,190
that in the validation module by the way in case you want to dive deeply into that again.

24
00:01:59,220 --> 00:02:04,820
The custom function or the custom validator method here takes a function as an argument which retrieves

25
00:02:04,820 --> 00:02:06,280
the value we're looking at

26
00:02:06,570 --> 00:02:13,140
and then an object from which we can extract the request as a property with this destructuring syntax

27
00:02:13,830 --> 00:02:19,570
and this function then should return true if validation succeeds or return a promise

28
00:02:19,740 --> 00:02:22,740
if the validation actually uses some async task,

29
00:02:22,740 --> 00:02:27,540
so if the validation does something which takes a little longer as in our case.

30
00:02:27,720 --> 00:02:35,100
So I will return user find one and I want to find one user where the email of that user as stored in

31
00:02:35,100 --> 00:02:38,700
the database matches the value of the e-mail we're looking at.

32
00:02:39,650 --> 00:02:49,300
Now then I have my user document here, so my user object as I've found it in the database and if that

33
00:02:49,300 --> 00:02:52,320
is set and that's the only case I'm caring about,

34
00:02:52,360 --> 00:03:01,390
if that is set then I will reject a promise, so I will return promise reject and that will cause the validation

35
00:03:01,390 --> 00:03:02,410
to fail,

36
00:03:02,410 --> 00:03:13,100
all other scenarios will cause it to succeed and then I'll return email address already exists.

37
00:03:13,200 --> 00:03:17,140
So that's just another validation we can add.

38
00:03:17,160 --> 00:03:20,310
Of course I don't just want to validate the email though,

39
00:03:20,520 --> 00:03:24,420
so let's also validate another field in the request body,

40
00:03:24,630 --> 00:03:26,750
before I do that though, just one step I forgot,

41
00:03:26,760 --> 00:03:29,100
I will normalize the email as well

42
00:03:30,010 --> 00:03:37,660
but now I can look at other body fields like the password. The password can be trimmed and should then

43
00:03:37,660 --> 00:03:44,890
have let's say a length of at least 5 characters or whatever you want and I'll add another check where

44
00:03:44,890 --> 00:03:48,190
I'll look into my body, there to the name,

45
00:03:48,190 --> 00:03:58,090
trim it to remove excess whitespace and this should now not be empty.

46
00:03:58,150 --> 00:04:01,080
With that, I got all my validation logic added,

47
00:04:01,200 --> 00:04:05,440
now that I'm in here I can also already import my controller,

48
00:04:05,470 --> 00:04:15,530
so my auth controller can be imported from controllers auth and now I'll use that auth controller as the

49
00:04:15,530 --> 00:04:17,590
last middleware on my sign up route

50
00:04:19,320 --> 00:04:26,850
and reach out to the sign up action in there. Now validation was added, now back in the auth controller,

51
00:04:27,240 --> 00:04:31,740
we want to collect any validation errors right at the start

52
00:04:31,740 --> 00:04:34,080
and for that I need to import something

53
00:04:36,910 --> 00:04:39,520
from the express validator package again

54
00:04:41,090 --> 00:04:51,330
and that will be that validation result function which I require from express validator/check, 

55
00:04:51,380 --> 00:04:57,590
so this validation result function here and I collect errors by calling that and passing the request

56
00:04:57,620 --> 00:04:58,370
to it

57
00:04:58,370 --> 00:05:05,990
and now if not errors is empty, so if we got errors, then I know that something went wrong or that I have

58
00:05:06,020 --> 00:05:06,790
errors

59
00:05:06,890 --> 00:05:16,580
and in this case I want to create a new error where I say validation failed, something like that and I'll

60
00:05:16,580 --> 00:05:27,220
set a status code of 422 and I can also maybe pass some data, a new property I'll add where I store

61
00:05:27,220 --> 00:05:29,920
my errors array like this

62
00:05:29,920 --> 00:05:33,380
and then I can throw my error here.

63
00:05:33,490 --> 00:05:38,980
Didn't do that before but this would allow me to keep my errors which were retrieved by that validation

64
00:05:38,980 --> 00:05:39,940
package,

65
00:05:39,940 --> 00:05:46,510
I now just have to go to app.js, to my error handling function and there retrieve the data from

66
00:05:46,570 --> 00:05:47,140
error,

67
00:05:47,170 --> 00:05:53,150
the data property and also add this to the response I'm sending in case of an error.

68
00:05:53,170 --> 00:05:58,420
This is totally optional but just to show how you could keep your original errors and pass them to the

69
00:05:58,420 --> 00:05:59,920
frontend as well.

70
00:06:00,250 --> 00:06:05,260
So now I'm doing this, I'm doing that validation and throwing an error if it fails, if we make it past this

71
00:06:05,360 --> 00:06:13,710
if check, we know we have all that data we need and now we can start storing the user in the database.

72
00:06:13,710 --> 00:06:18,790
Now there are parts of the authentication module which still matter here

73
00:06:18,870 --> 00:06:22,760
and one of them is that we should encrypt the password.

74
00:06:22,770 --> 00:06:23,790
So let's finish

75
00:06:23,790 --> 00:06:26,860
sign up in a secure way in the next lecture.
