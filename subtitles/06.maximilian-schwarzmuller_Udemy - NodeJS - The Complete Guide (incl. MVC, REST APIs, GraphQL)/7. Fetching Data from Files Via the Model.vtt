WEBVTT
1
00:00:03.310 --> 00:00:07.760
I'm still getting the error that my products don't seem to have a length

2
00:00:07.870 --> 00:00:12.270
even though I'm fairly confident that this code should retrieve my products

3
00:00:12.280 --> 00:00:14.190
but what is wrong with that code?

4
00:00:15.570 --> 00:00:18.610
Well I am returning data here

5
00:00:18.930 --> 00:00:20.270
in both cases

6
00:00:20.370 --> 00:00:24.450
but keep in mind that this is asynchronous code.

7
00:00:24.450 --> 00:00:29.570
So my fetch all method here executes this line, executes this line

8
00:00:29.610 --> 00:00:36.070
and as you learned, it simply registers this callback in its event emitter registry to put it like this

9
00:00:36.240 --> 00:00:42.640
but then it just finishes with this function and this function itself does not return anything.

10
00:00:42.700 --> 00:00:49.350
These return statements here belong to this inner function here, not to this outer function,

11
00:00:49.410 --> 00:00:52.260
so fetch all does not return anything,

12
00:00:52.260 --> 00:00:59.640
it returns undefined therefore and hence in my view, in the shop.ejs file, if I try to access the length

13
00:00:59.970 --> 00:01:04.160
on my products, I try to access length on undefined

14
00:01:04.260 --> 00:01:06.760
and I get an error.

15
00:01:06.860 --> 00:01:08.010
So this is the issue

16
00:01:08.090 --> 00:01:11.140
and how can I fix this then?

17
00:01:11.160 --> 00:01:12.690
There are multiple ways of fixing this,

18
00:01:12.690 --> 00:01:17.200
for now I will simply accept an argument in fetch all and that's a callback

19
00:01:17.310 --> 00:01:22.920
and that actually allows me to pass a function into fetch all which fetch all will execute

20
00:01:22.920 --> 00:01:29.780
once it is done, so that the thing calling fetch all can pass a function

21
00:01:29.910 --> 00:01:34.020
it is then aware of being called which holds the data I want to return.

22
00:01:34.050 --> 00:01:35.070
Sounds complex? 

23
00:01:35.070 --> 00:01:36.430
Let me show you how it works.

24
00:01:36.480 --> 00:01:38.880
So I will receive a function here,

25
00:01:38.910 --> 00:01:45.630
this argument will hold a function and therefore instead of returning an array, here I will have a callback

26
00:01:45.900 --> 00:01:47.500
where I pass an empty array,

27
00:01:47.520 --> 00:01:51.990
so I execute this argument as a function to which I pass an empty array

28
00:01:52.380 --> 00:01:57.030
and I will do the same down there, just not with an empty array but here I will have a callback where I

29
00:01:57.030 --> 00:01:59.750
pass my parsed json data.

30
00:02:00.180 --> 00:02:08.610
So I do call this callback and this allows me to go to my controller where I do call fetch all and there,

31
00:02:08.610 --> 00:02:18.640
I now simply have to pass in a function where I know that I eventually will get my products, like this

32
00:02:19.300 --> 00:02:24.230
and therefore I don't need to store it here because this fetch all function will not return anything.

33
00:02:24.430 --> 00:02:32.350
Instead here I simply create my own callback process and I render in that function I pass to fetch all

34
00:02:32.530 --> 00:02:39.490
once I know that fetching all products is done and I receive the products here because that is exactly

35
00:02:39.490 --> 00:02:41.660
the argument I passed to the callback

36
00:02:41.680 --> 00:02:48.730
in fetch all because the callback argument here will refer to this anonymous function I'm passing into

37
00:02:48.730 --> 00:02:49.750
fetch all.

38
00:02:50.230 --> 00:02:51.890
It's the same logic

39
00:02:52.000 --> 00:02:53.500
read file uses here,

40
00:02:53.630 --> 00:02:57.550
just that we didn't defined read file on our own but read file

41
00:02:57.570 --> 00:02:59.100
also takes a callback

42
00:02:59.350 --> 00:03:03.700
and here we pass in the function read file should execute for us once it's done.

43
00:03:03.730 --> 00:03:04.640
We do the same

44
00:03:04.690 --> 00:03:06.070
just that we write both sides

45
00:03:06.070 --> 00:03:09.980
now. We have fetch all and fetch all takes a function

46
00:03:10.000 --> 00:03:14.000
it should execute once it's done and once it's done, we get the products,

47
00:03:14.020 --> 00:03:16.570
thanks to our own implementation of fetch all

48
00:03:16.670 --> 00:03:19.920
and we then render our response with those products.

49
00:03:20.290 --> 00:03:26.080
And with that if we save that and now we reload this page, we do see the products here and we do of course

50
00:03:26.080 --> 00:03:31.180
see all the products we had in the past as well as any new products we add

51
00:03:31.390 --> 00:03:33.450
and there is a little styling page I see.

52
00:03:33.550 --> 00:03:35.020
But this is how this works

53
00:03:35.080 --> 00:03:41.830
and now it's still not a database but it's better than this in array storage and it already shows us why we

54
00:03:41.830 --> 00:03:43.590
might want to use such a model.

55
00:03:43.600 --> 00:03:50.500
It's not super complex code but it clearly is code that belongs to this data, to this model and therefore

56
00:03:50.590 --> 00:03:53.480
it's outsourced into its own separate file.
