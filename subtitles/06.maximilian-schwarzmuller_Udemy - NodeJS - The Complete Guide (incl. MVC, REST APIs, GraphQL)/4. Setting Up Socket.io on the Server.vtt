WEBVTT
1
00:00:02.370 --> 00:00:03.890
Saya ingin menggunakan Socan.

2
00:00:03.940 --> 00:00:07.570
Dan kita harus menambahkannya di server dan klien.

3
00:00:07.570 --> 00:00:14.800
Jadi baik pada node appier dan pada re-up karena server klien akan berkomunikasi melalui soket web

4
00:00:15.070 --> 00:00:22.250
sehingga kita harus menetapkan bahwa saluran komunikasi di kedua ujung di ujung depan bereaksi dan pada

5
00:00:22.250 --> 00:00:23.700
catatan ujung belakang.

6
00:00:23.710 --> 00:00:26.370
Sekarang mari kita mulai dari bagian belakang di sini.

7
00:00:26.530 --> 00:00:32.770
Dan untuk itu saya akan keluar dari server pengembangan saya di sini dan saya akan menginstal paket

8
00:00:32.780 --> 00:00:41.500
IO socket ini dengan NPM dasbor yang diinstal menyimpan Succot dot IO izinkan saya masuk ke sini dan ini akan menginstal paket dalam

9
00:00:41.650 --> 00:00:43.160
proyek node Anda.

10
00:00:43.180 --> 00:00:45.220
Sekarang bagaimana kita menggunakannya.

11
00:00:45.220 --> 00:00:46.960
Yah mari kita pergi ke benar-benar ya.

12
00:00:46.970 --> 00:00:54.600
Jadi file pertama yang berjalan ketika kita memulai server kita dan di sana kita harus mengatur atau koneksi Succot IO.

13
00:00:54.640 --> 00:00:58.130
Kami ingin mengekspos seperti kami mengatur rute kami di sana.

14
00:00:58.150 --> 00:01:02.250
Pada akhirnya kami meneruskan permintaan ke rute kami.

15
00:01:02.340 --> 00:01:06.440
Dan Anda dapat memiliki kabel semua soket I O mengatur di file yang berbeda tetapi saya akan melakukannya di sini.

16
00:01:06.550 --> 00:01:14.230
Tapi sama seperti kita mengatur rute Florida permintaan HTP normal kita juga dapat mengatur soket I O saluran kita

17
00:01:14.470 --> 00:01:18.410
dan perlu diingat soket IO menggunakan protokol yang berbeda.

18
00:01:18.510 --> 00:01:24.850
Soket web dan karenanya permintaan Succot web tidak akan mengganggu permintaan HTP normal yang

19
00:01:24.850 --> 00:01:27.190
dikirim secara default oleh browser.

20
00:01:27.190 --> 00:01:30.250
Jadi bagaimana kita mengatur IO socket di sini.

21
00:01:30.250 --> 00:01:37.650
Yah begitu kita terhubung ke database kita ketika kita memulai server kita di sana saya juga ingin membangun atau saya

22
00:01:37.660 --> 00:01:40.070
ingin mengatur koneksi IO socket saya.

23
00:01:40.150 --> 00:01:54.500
Saya mencoba konstanta baru yang saya tahu dan saya akan memerlukan soket I O paket di sini paket ini atau hal yang

24
00:01:54.500 --> 00:02:04.380
kita ekspor di sini sebenarnya memperlihatkan fungsi yang memerlukan server yang dibuat sebagai argumen.

25
00:02:04.380 --> 00:02:12.440
Sekarang metode daftar di sini benar-benar mengembalikan kita server simpul baru sehingga kita dapat menyimpannya dalam konstanta.

26
00:02:12.440 --> 00:02:14.720
Ini adalah server catatan yang kami putar.

27
00:02:14.750 --> 00:02:16.220
Itu disimpan di sini.

28
00:02:16.340 --> 00:02:20.090
Kita harus meneruskannya ke fungsi yang dikembalikan dengan memerlukan soket I O.

29
00:02:20.360 --> 00:02:26.630
Jadi kami menambahkan tanda kurung di sini untuk menjalankan fungsi yang dikembalikan oleh socket IO dan kami melewati server

30
00:02:26.630 --> 00:02:27.550
untuk itu.

31
00:02:27.680 --> 00:02:30.130
Ini mengatur soket I O.

32
00:02:30.200 --> 00:02:34.210
Dan saya menyebutkan bahwa soket web dibangun di atas HTP.

33
00:02:34.250 --> 00:02:41.300
Sekarang karena server ini di sini menggunakan HTP, kami menggunakan server HTP untuk membuat koneksi soket web kami yang

34
00:02:41.300 --> 00:02:44.670
menggunakan protokol HTP sebagai dasar yang bisa Anda katakan.

35
00:02:44.840 --> 00:02:51.800
Sekarang ini memberi kita objek soket IO yang mengatur semua hal soket web di belakang layar untuk kita

36
00:02:51.800 --> 00:02:54.320
dan yang sekarang dapat kita gunakan.

37
00:02:54.440 --> 00:03:01.010
Sekarang kita dapat menggunakannya untuk mendefinisikan beberapa pendengar acara misalnya misalnya untuk menunggu koneksi baru.

38
00:03:01.040 --> 00:03:03.380
Jadi, apa pun di klien Anda yang terhubung dengan kami.

39
00:03:03.680 --> 00:03:10.520
Jadi kita menjalankan fungsi tertentu di mana kita mendapatkan klien yang disebut Succot putuskan

40
00:03:10.520 --> 00:03:14.980
sebagai argumen atau koneksi sebagai argumen yang lebih tepat.

41
00:03:15.050 --> 00:03:19.880
Jadi ini adalah koneksi antara server kami dan klien yang terhubung dan fungsi ini akan

42
00:03:19.880 --> 00:03:22.610
dieksekusi untuk setiap klien baru yang terhubung.

43
00:03:22.610 --> 00:03:27.080
Jadi tidak hanya satu kali tetapi sesering yang diperlukan klien terhubung.

44
00:03:27.500 --> 00:03:32.320
Jadi di sini saya akan untuk klien yang terhubung.

45
00:03:32.320 --> 00:03:37.810
Dan sekarang jika saya menjalankan NPM start tidak akan pernah melihat klien terhubung di konsol.

46
00:03:37.810 --> 00:03:42.760
Anda tidak melihatnya di sini karena kami menetapkan semua itu di sisi layanan.

47
00:03:42.760 --> 00:03:47.470
Kami sekarang punya koneksi atau port menunggu socket.

48
00:03:47.500 --> 00:03:53.710
Bisa dibilang tapi kami tidak punya klien yang akan terhubung dan itu tentu saja adalah langkah selanjutnya yang harus kami

49
00:03:53.710 --> 00:03:54.230
lakukan.
