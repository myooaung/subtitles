WEBVTT
1
00:00:02.220 --> 00:00:05.450
So let's dive into throwing and handling errors

2
00:00:05.550 --> 00:00:08.950
and here I do have an error in my custom validator.

3
00:00:08.970 --> 00:00:12.700
Now this will be handled behind the scenes by the express validator package,

4
00:00:12.900 --> 00:00:16.420
so let's add some code that is not handled behind the scenes.

5
00:00:16.500 --> 00:00:18.900
And for that, I'll first of all take a step backward,

6
00:00:18.930 --> 00:00:26.710
I even quit my development server and I'll temporarily add a new file here, errorplayground.js

7
00:00:26.800 --> 00:00:27.350
.

8
00:00:27.510 --> 00:00:33.080
I will remove that, it's not related to the app but there we can execute javascript code and we can execute it

9
00:00:33.120 --> 00:00:36.650
with the node runtime of course and in here,

10
00:00:36.750 --> 00:00:38.990
let's create a new constant,

11
00:00:39.250 --> 00:00:42.220
sum where I take two values, A and B,

12
00:00:42.510 --> 00:00:43.940
whoops,

13
00:00:44.010 --> 00:00:50.970
so sum will be a constant that holds an anonymous arrow function, A and B and I return A plus B

14
00:00:52.210 --> 00:00:57.910
and then now there I call sum with 1 and 2 and I console log the result

15
00:00:57.910 --> 00:01:04.000
let's say. Now if I do this, we can execute this file with node error playground.js

16
00:01:04.130 --> 00:01:07.880
like this and we get three in the console down there.

17
00:01:08.100 --> 00:01:09.270
Now that's of course nice

18
00:01:09.410 --> 00:01:11.330
but now let's add an error.

19
00:01:11.690 --> 00:01:16.030
Let's say I only pass one argument instead of two,

20
00:01:16.280 --> 00:01:21.980
now if I execute this again, I get not a number but not an error, not a technical error object.

21
00:01:21.980 --> 00:01:28.370
Now let's say here I check if A and B,

22
00:01:28.610 --> 00:01:33.300
so both has to be true-ish, then I will return

23
00:01:33.300 --> 00:01:34.150
A plus B

24
00:01:34.260 --> 00:01:40.160
otherwise I'll throw, that is a built-in keyword, a new error and that's a built-in object

25
00:01:40.170 --> 00:01:47.610
node ships with where I say invalid arguments, something like this.

26
00:01:47.620 --> 00:01:49.650
Now let's execute this file again

27
00:01:50.140 --> 00:01:54.610
and now we see such an error message which we saw before in the course as well.

28
00:01:54.670 --> 00:02:00.670
Here we have our own error message and then we got a callstack which allows us to find out at which

29
00:02:00.820 --> 00:02:07.090
function and which line number this error was thrown and what was called before that error.

30
00:02:07.210 --> 00:02:13.850
We saw that before because that is an unhandled error. We throw an error and that is a built-in functionality,

31
00:02:13.890 --> 00:02:19.380
throwing such errors and node and a lot of the packages we use also throw errors behind the scenes,

32
00:02:19.420 --> 00:02:24.580
for example mongodb will throw an error if it can't connect or if an operation fails.

33
00:02:24.580 --> 00:02:30.280
So such errors can be thrown and if we don't handle them, then our application just crashes

34
00:02:30.460 --> 00:02:32.610
and that's what we saw earlier in the course too.

35
00:02:32.770 --> 00:02:38.470
You might remember cases where I did something and we got stuck and that refresh icon in the browser

36
00:02:38.470 --> 00:02:40.520
kept on spinning and nothing happened,

37
00:02:40.720 --> 00:02:45.870
that was because our server crashed because we had an error which we did not handle.

38
00:02:45.880 --> 00:02:48.310
Now how can we handle errors?

39
00:02:48.310 --> 00:02:55.270
Well one solution for synchronous code, so code that executes line by line immediately and does not wait

40
00:02:55.270 --> 00:02:56.170
for anything,

41
00:02:56.170 --> 00:03:02.050
so for example where we don't interact with files or where we don't send requests, well such code can

42
00:03:02.050 --> 00:03:06.270
be wrapped with try catch, another built-in language feature.

43
00:03:06.460 --> 00:03:12.940
We try a certain code and then we have to add catch where we catch a potential error that might have

44
00:03:12.940 --> 00:03:16.030
been thrown and in catch we can now handle it,

45
00:03:16.060 --> 00:03:20.680
for example here I could output error occured

46
00:03:20.980 --> 00:03:25.630
and then I console log my error like this.

47
00:03:25.630 --> 00:03:33.580
Now if I re-execute myerrorplayground.js file, I still get this error here

48
00:03:33.770 --> 00:03:42.160
but I get this additional error occured message and if I not log my error object here and I execute this, then

49
00:03:42.170 --> 00:03:43.460
I actually get just this,

50
00:03:43.500 --> 00:03:46.240
so then it does not crash and log it automatically

51
00:03:46.290 --> 00:03:47.800
but we could do anything we want.

52
00:03:47.910 --> 00:03:50.280
We could continue with other code after this,

53
00:03:50.280 --> 00:03:51.320
so here I could have

54
00:03:51.780 --> 00:03:53.250
this works.

55
00:03:53.520 --> 00:03:58.060
I could execute this line and we see this works being output here.

56
00:03:58.560 --> 00:04:02.170
Just to demonstrate this, if I comment out try catch

57
00:04:02.400 --> 00:04:08.560
and I just try to console log someone, so I call this with an error being thrown,

58
00:04:08.580 --> 00:04:16.200
then we don't see this works anywhere because it crashes with our error that is being thrown and it

59
00:04:16.200 --> 00:04:18.630
does not continue with other code.

60
00:04:18.660 --> 00:04:25.860
So this is why handling code like this is a good thing to do because this ensures that we can continue

61
00:04:25.860 --> 00:04:30.210
with code, that we can handle this gracefully, in our node express application

62
00:04:30.240 --> 00:04:35.490
we could send an error response here which renders a valid page without crashing everything but which

63
00:04:35.490 --> 00:04:37.980
informs the user that something bad happened

64
00:04:38.220 --> 00:04:44.880
and in the end, this is what the express validator package does for us with our thrown error. In

65
00:04:45.130 --> 00:04:46.660
auth.js where I throw this error,

66
00:04:46.740 --> 00:04:53.970
in the end express validator catches this and then just adds it to its own error array and allows

67
00:04:53.970 --> 00:04:57.030
us to read that list of errors it caught,

68
00:04:57.090 --> 00:04:59.690
so that is what happens behind the scenes you could say.

69
00:04:59.760 --> 00:05:04.950
Now here we have a look at an error and synchronous code throwing an error which we can handle with

70
00:05:04.950 --> 00:05:06.720
try catch.

71
00:05:06.720 --> 00:05:14.280
Now we also have async operations that can fail of course and such operations when using promises are

72
00:05:14.280 --> 00:05:16.310
handled with then and catch

73
00:05:16.530 --> 00:05:24.240
and that is what we can see a lot in our code. Here where I do something, where I find a user, I have my

74
00:05:24.240 --> 00:05:28.880
then block where I handle the case that the database operation succeeded, 

75
00:05:28.890 --> 00:05:33.630
then I here still have my custom case to see if we did get a user because the database operation can

76
00:05:33.630 --> 00:05:36.160
succeed even without retrieving a user

77
00:05:36.510 --> 00:05:41.280
but I then also have a catch block here where I catch any errors that happened.

78
00:05:41.280 --> 00:05:46.230
So here for example that would be the catch block related to my find one method.

79
00:05:46.230 --> 00:05:52.440
So if the database operation fails because we don't have read access because the database server is

80
00:05:52.440 --> 00:05:57.130
down temporarily, anything like that, then we make it into this catch block.

81
00:05:57.150 --> 00:06:05.610
So this is try catch, just with async code you could say, then is your success case and catch allows

82
00:06:05.610 --> 00:06:12.830
you to execute code if that fails. Catch by the way collects all errors that are thrown by any prior

83
00:06:12.890 --> 00:06:13.740
then blocks,

84
00:06:13.740 --> 00:06:20.670
so if we had more than then block in our chain here, catch would fire on any error thrown in any then

85
00:06:20.670 --> 00:06:23.850
block or any operation executed in a then block,

86
00:06:23.880 --> 00:06:25.900
that's just a side note.

87
00:06:25.920 --> 00:06:32.340
So this is how we can work with errors, how we can handle them. I'll now get rid of the playground file,

88
00:06:32.420 --> 00:06:35.790
you find it attached to the video if you want to explore it a bit more,

89
00:06:35.940 --> 00:06:41.130
let's now see in our application how we can improve error handling.
