1
00:00:02,230 --> 00:00:08,020
In the last lectures we learned how to spin up that server and that we get a request object with information

2
00:00:08,020 --> 00:00:12,940
about the incoming requests and the response object that we can use to send back a response,

3
00:00:13,090 --> 00:00:15,860
let's now connect both, requests and response.

4
00:00:16,000 --> 00:00:21,640
Instead of printing some request data to the console which of course doesn't do much for us,

5
00:00:21,640 --> 00:00:27,940
let's instead start writing a very simple web server that does different things depending on which route

6
00:00:28,000 --> 00:00:29,080
we enter,

7
00:00:29,080 --> 00:00:33,040
so depending on which slash whatever part we enter here.

8
00:00:33,100 --> 00:00:36,750
So let's say for slash nothing,

9
00:00:36,880 --> 00:00:45,000
we want to load a page where the user can enter some data which we then store in a file on the server

10
00:00:45,010 --> 00:00:54,750
once it is sent. We can do this by first of all parsing the url. I'm storing it in a new constant and I

11
00:00:54,750 --> 00:00:56,940
do this by accessing request

12
00:00:56,950 --> 00:01:02,590
url, remember that was something like slash, /test, whatever we entered.

13
00:01:02,590 --> 00:01:10,140
I will then add an if statement and check if url is equal to just slash and only this will match,

14
00:01:10,180 --> 00:01:17,110
by the way the triple equal sign means that this will only be true if url is both a string and has

15
00:01:17,110 --> 00:01:21,040
that value.

16
00:01:21,040 --> 00:01:27,880
So now here if that is the case, I want to return a response which holds some html that gives the user an

17
00:01:27,910 --> 00:01:34,830
input form and a button that will send a new request in return and that will not be a get request

18
00:01:34,830 --> 00:01:35,980
by the way.

19
00:01:35,980 --> 00:01:42,630
So let's do this step by step, let's copy this code here and put it into this if statement

20
00:01:43,130 --> 00:01:51,000
and here I will write a html document with a head, maybe a different title, enter message

21
00:01:51,140 --> 00:01:57,810
and the body will now not hold a h1 tag but instead a form,

22
00:01:57,850 --> 00:02:03,740
this is a default html element of course with an input of type text

23
00:02:03,740 --> 00:02:10,410
let's say and a button and this will be super ugly because we have no styling but it's about the

24
00:02:10,410 --> 00:02:11,700
functionality for now,

25
00:02:12,550 --> 00:02:19,240
the button tag must be closed by the way. The button will be of type submit so that it submits the form

26
00:02:19,240 --> 00:02:23,260
and that will be some default html behavior we're using here

27
00:02:23,290 --> 00:02:29,890
where a button with type submit in a form element will send a new request and we'll configure that request

28
00:02:29,920 --> 00:02:30,890
in a second.

29
00:02:31,150 --> 00:02:34,100
Let's first give the button a caption, send

30
00:02:34,540 --> 00:02:42,160
and now on that form element here, we add an action which is basically the url this request which will

31
00:02:42,160 --> 00:02:49,420
be generated automatically should be sent to and I will use /message here and this will automatically

32
00:02:49,420 --> 00:02:50,610
target the host

33
00:02:50,620 --> 00:02:55,090
it's running on, so localhost in our case here, localhost 3000

34
00:02:55,090 --> 00:02:57,310
to be precise

35
00:02:57,310 --> 00:02:58,810
and then we define the method,

36
00:02:59,020 --> 00:03:06,310
the http method that should be used and there we previously saw if we expand this, that we get a get request

37
00:03:06,340 --> 00:03:08,820
which is the default if we enter a url,

38
00:03:08,950 --> 00:03:16,240
well here we are not entering a url instead we want to send a so-called post request. There is a limited

39
00:03:16,240 --> 00:03:25,210
set of http words you can use, get and post are the two most important ones. A get request is automatically

40
00:03:25,210 --> 00:03:25,510
sent

41
00:03:25,510 --> 00:03:33,490
when you click a link or enter a url, a post request has to be set up by you by creating such a form,

42
00:03:33,490 --> 00:03:37,670
there also are some other ways by using javascript but we'll ignore them for now.

43
00:03:37,900 --> 00:03:43,150
So in html we create such a form and we defined that the method should be post and this will send a

44
00:03:43,150 --> 00:03:49,750
post request to /message and the cool thing about form is it will not just send such a request,

45
00:03:49,810 --> 00:03:56,320
it will also look into the form, detect any inputs or related elements like selects

46
00:03:56,350 --> 00:03:57,310
we might have

47
00:03:57,730 --> 00:04:05,500
and if we give that input a name which we should, message, it will also automatically put that message

48
00:04:05,830 --> 00:04:09,550
into the request it sends to our server.

49
00:04:09,550 --> 00:04:16,930
So now here when we visit just localhost 3000 slash nothing, we will return a response where

50
00:04:16,930 --> 00:04:19,990
we render this html code.

51
00:04:19,990 --> 00:04:27,310
Now let's also put a return statement in front of res end. This is not required to return a response

52
00:04:27,670 --> 00:04:34,480
but to return from this anonymous function and to not continue this code because we return prior to

53
00:04:34,480 --> 00:04:34,690
it

54
00:04:34,750 --> 00:04:41,110
and this will quit the function execution. And we must do this because I told you that after res end,

55
00:04:41,380 --> 00:04:46,100
we must not call any other res writes or res set headers

56
00:04:46,300 --> 00:04:51,610
but this what happens if we not return because then it would just continue execution with these lines.

57
00:04:51,610 --> 00:04:52,510
I don't want that, 

58
00:04:52,630 --> 00:04:54,380
if we make it into the if statement,

59
00:04:54,490 --> 00:04:55,890
we should also quit here,

60
00:04:55,930 --> 00:05:03,370
we should exit out of this function. With this let's restart the server by quitting it with control c and

61
00:05:03,370 --> 00:05:04,970
restarting it with node app.js

62
00:05:05,070 --> 00:05:11,220
and let's reload this page on localhost 3000 slash nothing

63
00:05:11,520 --> 00:05:17,750
and we see my input and the send button here.

64
00:05:17,930 --> 00:05:21,180
Again not super pretty but it's working.

65
00:05:21,310 --> 00:05:25,630
Now let's make sure that if we enter something and we hit send,

66
00:05:25,960 --> 00:05:30,940
we see this, that we now not only see this but that something else happens.

67
00:05:30,940 --> 00:05:38,770
By the way we do see this because now the url is /message and /message does not make

68
00:05:38,770 --> 00:05:41,850
it into this if statement and therefore this code runs.

69
00:05:42,040 --> 00:05:43,460
But we want to do something else

70
00:05:43,540 --> 00:05:45,670
so let's do that in the next lectures.
