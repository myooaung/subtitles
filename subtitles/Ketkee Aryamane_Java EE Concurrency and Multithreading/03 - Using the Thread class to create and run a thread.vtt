WEBVTT
1
00:00:00.050 --> 00:00:03.080
- [Instructor] Okay. Let's take a look at the basic APIs

2
00:00:03.080 --> 00:00:05.050
on the Java Standard Edition, first.

3
00:00:05.050 --> 00:00:07.030
So, we'll go with the Thread class.

4
00:00:07.030 --> 00:00:10.070
The Thread class is present in the java.lang package,

5
00:00:10.070 --> 00:00:13.050
and the Thread class will help you to start a thread

6
00:00:13.050 --> 00:00:16.020
and manage a thread in the application's run,

7
00:00:16.020 --> 00:00:18.010
so whenever you want to create a thread

8
00:00:18.010 --> 00:00:20.060
for your Java application, you will need to create

9
00:00:20.060 --> 00:00:23.080
an instance of this class in order to start and run

10
00:00:23.080 --> 00:00:27.000
an asynchronous task in your application.

11
00:00:27.000 --> 00:00:30.080
Now, the job of the thread is something that you will define

12
00:00:30.080 --> 00:00:34.070
for your own logic, so the Thread class has got a run method

13
00:00:34.070 --> 00:00:38.030
which will allow you to define that asynchronous job

14
00:00:38.030 --> 00:00:40.030
so that when you start the thread

15
00:00:40.030 --> 00:00:42.030
then that job is going to execute

16
00:00:42.030 --> 00:00:44.080
and then it is going to give you the output.

17
00:00:44.080 --> 00:00:48.010
So, the job is always defined under the run method.

18
00:00:48.010 --> 00:00:49.080
Now, there is some default implementation

19
00:00:49.080 --> 00:00:51.020
in the run method of the Thread class.

20
00:00:51.020 --> 00:00:52.050
We do not want that,

21
00:00:52.050 --> 00:00:55.040
so we'll have to create our own class which extends Thread

22
00:00:55.040 --> 00:00:57.070
and then create an instance of it and start it off

23
00:00:57.070 --> 00:01:00.010
so that it is picked up for execution.

24
00:01:00.010 --> 00:01:01.010
Do not worry about this.

25
00:01:01.010 --> 00:01:03.050
In the next step we are going to look at the demo

26
00:01:03.050 --> 00:01:05.000
for the Thread class.

27
00:01:05.000 --> 00:01:07.070
Let's go ahead with it.

28
00:01:07.070 --> 00:01:10.000
What are going to do as a part of the demo?

29
00:01:10.000 --> 00:01:12.080
The job that you want to actually do for the thread,

30
00:01:12.080 --> 00:01:15.030
is reading a file.

31
00:01:15.030 --> 00:01:17.020
We have a sample text file,

32
00:01:17.020 --> 00:01:19.030
and that you will find it in your exercise folders.

33
00:01:19.030 --> 00:01:20.080
Do not worry about that.

34
00:01:20.080 --> 00:01:22.090
The job that you're going to define for the thread

35
00:01:22.090 --> 00:01:25.040
is that we are going to read this file and print out

36
00:01:25.040 --> 00:01:29.020
all the lines on the console of our application.

37
00:01:29.020 --> 00:01:31.020
Let's get started with the steps.

38
00:01:31.020 --> 00:01:34.000
Use case is the job of the thread, of course, read a file.

39
00:01:34.000 --> 00:01:36.020
The next step is we'll have to create a class

40
00:01:36.020 --> 00:01:37.070
which extends the Thread class,

41
00:01:37.070 --> 00:01:41.060
so let's go back to the IDE and under the runnables folder

42
00:01:41.060 --> 00:01:44.000
I'm going to create a class.

43
00:01:44.000 --> 00:01:46.030
Let's call it ApplicationThread

44
00:01:46.030 --> 00:01:48.060
or whatever you want to call it.

45
00:01:48.060 --> 00:01:54.080
Finish, and let's go ahead and say, extends Thread,

46
00:01:54.080 --> 00:01:57.000
java.lang package.

47
00:01:57.000 --> 00:01:59.030
Next step, we have to define the run method

48
00:01:59.030 --> 00:02:02.010
which will have the file reading code to be executed

49
00:02:02.010 --> 00:02:03.080
as an asynchronous task,

50
00:02:03.080 --> 00:02:07.040
and the file is to be placed at the desired location.

51
00:02:07.040 --> 00:02:10.050
The file is placed under you exercise folders,

52
00:02:10.050 --> 00:02:12.070
let me show you that,

53
00:02:12.070 --> 00:02:16.010
and in the begin folder you have the sample.txt file.

54
00:02:16.010 --> 00:02:25.020
I'm just going to copy the path of this file, quickly.

55
00:02:25.020 --> 00:02:26.070
If you open this file,

56
00:02:26.070 --> 00:02:29.020
I think it's got a huge chunk of data,

57
00:02:29.020 --> 00:02:31.070
chapter one from the Harry Potter book.

58
00:02:31.070 --> 00:02:33.070
So, we have copied the path of the file.

59
00:02:33.070 --> 00:02:36.020
Now, let's come back to the IDE,

60
00:02:36.020 --> 00:02:37.060
and what we're going to do here

61
00:02:37.060 --> 00:02:39.080
is going to define the run method.

62
00:02:39.080 --> 00:02:43.000
You just have to type in the method and say, enter,

63
00:02:43.000 --> 00:02:44.080
and there will be the default implementation.

64
00:02:44.080 --> 00:02:45.080
We want to get rid of it.

65
00:02:45.080 --> 00:02:47.080
We do not want that.

66
00:02:47.080 --> 00:02:50.040
We're going to read that sample.txt file

67
00:02:50.040 --> 00:02:52.070
as a part of the job of the thread.

68
00:02:52.070 --> 00:02:58.020
Let's go ahead and use the try-with-resources statement.

69
00:02:58.020 --> 00:03:03.070
I'm going to take the BufferedReader object

70
00:03:03.070 --> 00:03:06.060
and create an instance of BufferedReader,

71
00:03:06.060 --> 00:03:11.060
and to that, I am going to feed in the FileReader,

72
00:03:11.060 --> 00:03:16.050
and to that, again, I'm going to provide a File object

73
00:03:16.050 --> 00:03:19.050
and mention the path of the file.

74
00:03:19.050 --> 00:03:24.010
I have it copied with me, so let's go ahead and paste it.

75
00:03:24.010 --> 00:03:30.090
And, of course, the name of the file, which is sample.txt .

76
00:03:30.090 --> 00:03:32.080
We are using the try-with-resources statement.

77
00:03:32.080 --> 00:03:33.060
Very easy.

78
00:03:33.060 --> 00:03:35.060
We don't have to explicitly close the resources

79
00:03:35.060 --> 00:03:38.050
once we use this kind of try format.

80
00:03:38.050 --> 00:03:39.040
There's a BufferedReader.

81
00:03:39.040 --> 00:03:42.030
This is a simple java.io API

82
00:03:42.030 --> 00:03:44.050
and I'm doing a chaining of the APIs.

83
00:03:44.050 --> 00:03:46.080
I'm providing FileReader object to BufferedReader,

84
00:03:46.080 --> 00:03:50.060
and FileReader, in turn, will have the File object.

85
00:03:50.060 --> 00:03:55.030
Once that's done, let's take a String variable

86
00:03:55.030 --> 00:03:57.030
which represents every line of the file,

87
00:03:57.030 --> 00:03:58.090
and let's set it to null, initially,

88
00:03:58.090 --> 00:04:00.090
and let's put a small while loop.

89
00:04:00.090 --> 00:04:02.050
What will it do?

90
00:04:02.050 --> 00:04:06.080
It will assign the line, the output from the reader,

91
00:04:06.080 --> 00:04:09.090
so let's say, reader.readLine

92
00:04:09.090 --> 00:04:11.030
so a readLine will be assigned to it

93
00:04:11.030 --> 00:04:15.050
and we'll check whether this is not null.

94
00:04:15.050 --> 00:04:16.060
When it is null, which means

95
00:04:16.060 --> 00:04:18.020
we have reached the end of the file,

96
00:04:18.020 --> 00:04:19.060
so we're ensuring that we have not reached

97
00:04:19.060 --> 00:04:23.030
the end of the file, and we're going to say

98
00:04:23.030 --> 00:04:28.040
System.out.println and let's print out that line.

99
00:04:28.040 --> 00:04:29.040
Okay!

100
00:04:29.040 --> 00:04:33.030
Once done, we see that since that's a java.io operation

101
00:04:33.030 --> 00:04:34.070
it will throw checked exception,

102
00:04:34.070 --> 00:04:39.000
so we'll, quickly, add catch clauses for those.

103
00:04:39.000 --> 00:04:41.090
So, the file reading job is ready with us, very simple.

104
00:04:41.090 --> 00:04:43.060
Let's do one more thing.

105
00:04:43.060 --> 00:04:46.070
Whenever the thread is executed, we know for sure

106
00:04:46.070 --> 00:04:49.000
that the run method is going to be executed,

107
00:04:49.000 --> 00:04:52.050
so we want to also understand when is the thread coming here

108
00:04:52.050 --> 00:04:53.090
and what's the name of the thread.

109
00:04:53.090 --> 00:04:57.040
There is a way to actually print out the name of the thread.

110
00:04:57.040 --> 00:04:58.020
How?

111
00:04:58.020 --> 00:05:01.040
On the Thread class, there is a static method

112
00:05:01.040 --> 00:05:04.020
which is called currentThread

113
00:05:04.020 --> 00:05:05.020
that's the one,

114
00:05:05.020 --> 00:05:09.070
and on that, when you chain another API called getName

115
00:05:09.070 --> 00:05:11.030
so that will give me the name of the thread

116
00:05:11.030 --> 00:05:13.060
which is currently executing this run job,

117
00:05:13.060 --> 00:05:18.020
and I'm going to say, reading the line,

118
00:05:18.020 --> 00:05:22.010
and then append that line variable to it.

119
00:05:22.010 --> 00:05:25.030
I'm doing this because in the testing part of this demo

120
00:05:25.030 --> 00:05:27.050
I'm going to create three threads in the system,

121
00:05:27.050 --> 00:05:28.060
not just one,

122
00:05:28.060 --> 00:05:31.010
so I want to understand which thread came in

123
00:05:31.010 --> 00:05:32.060
and what's the name of the thread

124
00:05:32.060 --> 00:05:35.060
that's trying to read the line from the file.

125
00:05:35.060 --> 00:05:37.010
The job is defined and we're good.

126
00:05:37.010 --> 00:05:39.060
Let's go to the next step.

127
00:05:39.060 --> 00:05:41.060
To test out, we'll have to create an instance

128
00:05:41.060 --> 00:05:44.000
of that user-defined class.

129
00:05:44.000 --> 00:05:47.030
Let's go back to the IDE, and under the tests folder

130
00:05:47.030 --> 00:05:54.090
let's say, Java Class, and let's say TestThreads.

131
00:05:54.090 --> 00:05:56.020
What are we going to do under this?

132
00:05:56.020 --> 00:05:58.050
Grab the main method, first,

133
00:05:58.050 --> 00:06:00.030
and you're going to create an instance of the class

134
00:06:00.030 --> 00:06:04.060
that we created just now.

135
00:06:04.060 --> 00:06:09.020
I'm going to say, thread1, and create an instance of it.

136
00:06:09.020 --> 00:06:11.060
Similarly, I'll just copy this line

137
00:06:11.060 --> 00:06:14.070
and paste it again on line number 18 and 19,

138
00:06:14.070 --> 00:06:18.090
and I'm just going to change the reference names.

139
00:06:18.090 --> 00:06:20.070
Basically, I want three threads

140
00:06:20.070 --> 00:06:22.000
to be created in my system.

141
00:06:22.000 --> 00:06:24.000
That's the point.

142
00:06:24.000 --> 00:06:26.090
Next step will be to start the thread.

143
00:06:26.090 --> 00:06:28.050
So, how do you start a thread?

144
00:06:28.050 --> 00:06:31.050
You just have to take that reference, let's say, thread1

145
00:06:31.050 --> 00:06:34.020
and call the start method on it.

146
00:06:34.020 --> 00:06:36.040
Likewise, I will do the same thing

147
00:06:36.040 --> 00:06:42.060
for the other two threads.

148
00:06:42.060 --> 00:06:43.050
So, what have we done?

149
00:06:43.050 --> 00:06:46.000
We have created our own implementation

150
00:06:46.000 --> 00:06:47.070
which extends the thread class.

151
00:06:47.070 --> 00:06:50.050
We have defined a job for the thread, under the run method,

152
00:06:50.050 --> 00:06:52.040
and now, we're about to test it out.

153
00:06:52.040 --> 00:06:54.030
We have created three threads in the system

154
00:06:54.030 --> 00:06:56.010
and we're starting each one of them.

155
00:06:56.010 --> 00:06:58.040
Please note, we as developers

156
00:06:58.040 --> 00:07:01.030
would never have to invoke that run method.

157
00:07:01.030 --> 00:07:04.070
The run method is only left to the JVM.

158
00:07:04.070 --> 00:07:07.070
We just have to start the threads and run this program.

159
00:07:07.070 --> 00:07:10.000
Once this program gets running, then the JVM

160
00:07:10.000 --> 00:07:13.000
is going to pick up those three threads for execution.

161
00:07:13.000 --> 00:07:14.040
Let's test that class out.

162
00:07:14.040 --> 00:07:18.060
I'm going to say, right-click, and, run file.

163
00:07:18.060 --> 00:07:19.050
Oh yeah!

164
00:07:19.050 --> 00:07:21.000
Do you see the output?

165
00:07:21.000 --> 00:07:22.010
Let's examine it.

166
00:07:22.010 --> 00:07:22.090
What do we see?

167
00:07:22.090 --> 00:07:25.060
A lot of data on the console.

168
00:07:25.060 --> 00:07:28.000
You have Thread-1 reading the line, Chapter One,

169
00:07:28.000 --> 00:07:30.020
Thread-1 reading the line, The Boy Who Lived,

170
00:07:30.020 --> 00:07:31.020
and so on, and so forth,

171
00:07:31.020 --> 00:07:32.050
and then you have Thread-2

172
00:07:32.050 --> 00:07:34.080
which is coming in and reading the line of, Chapter One,

173
00:07:34.080 --> 00:07:38.000
and then Thread-1, zero, one, two, one, zero, one, two.

174
00:07:38.000 --> 00:07:39.040
Do you see what happened?

175
00:07:39.040 --> 00:07:41.020
You have three threads in the system,

176
00:07:41.020 --> 00:07:46.000
all of them, trying to read that file at the same time.

177
00:07:46.000 --> 00:07:48.070
This is exactly what the parallelism behavior is

178
00:07:48.070 --> 00:07:52.050
when you have multiple threads spawned in the system.

179
00:07:52.050 --> 00:07:53.030
That's all, about

180
00:07:53.030 --> 00:07:55.070
how you create a thread using the Thread class.

181
00:07:55.070 --> 00:07:58.000
There are quite a few things that we have to talk about,

182
00:07:58.000 --> 00:08:00.000
but we will see that in the next video.

