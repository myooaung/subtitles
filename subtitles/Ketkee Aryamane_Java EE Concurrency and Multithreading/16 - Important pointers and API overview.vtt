WEBVTT
1
00:00:00.050 --> 00:00:02.080
- [Instructor] Before we go on further with the managed

2
00:00:02.080 --> 00:00:06.010
thread factory and the contact service API demos,

3
00:00:06.010 --> 00:00:08.060
let's first quickly take a look at some important pointers

4
00:00:08.060 --> 00:00:10.030
that we need to keep in mind,

5
00:00:10.030 --> 00:00:13.050
and also let's look at the APIs for the earlier demos.

6
00:00:13.050 --> 00:00:15.090
So, you've seen that the demo for managed executor service

7
00:00:15.090 --> 00:00:18.030
and managed scheduled executor service.

8
00:00:18.030 --> 00:00:21.000
In this slide we'll also take a look at the rest of the APIs

9
00:00:21.000 --> 00:00:23.020
that these objects have on them.

10
00:00:23.020 --> 00:00:24.050
Okay, so let's start off.

11
00:00:24.050 --> 00:00:28.040
One is implementations of all managed resources

12
00:00:28.040 --> 00:00:30.080
of the concurrency APIs are provided

13
00:00:30.080 --> 00:00:34.060
by the Java Enterprise Edition product provider.

14
00:00:34.060 --> 00:00:38.000
What I mean is, all the four main services that we see,

15
00:00:38.000 --> 00:00:40.040
the managed executor, managed scheduled executor,

16
00:00:40.040 --> 00:00:43.040
managed thread factory and contact service,

17
00:00:43.040 --> 00:00:47.000
these are the interfaces that the specification of JSR has.

18
00:00:47.000 --> 00:00:49.080
But, the implementation classes for these are going

19
00:00:49.080 --> 00:00:52.090
to be provided by the underlying application server

20
00:00:52.090 --> 00:00:54.010
that you are using.

21
00:00:54.010 --> 00:00:57.020
In our case, it is GlassFish server, okay?

22
00:00:57.020 --> 00:00:59.080
And whenever you are going to change your server,

23
00:00:59.080 --> 00:01:02.030
let's say you tomorrow are working on JBoss

24
00:01:02.030 --> 00:01:04.000
or maybe WildFly,

25
00:01:04.000 --> 00:01:05.050
then these implementation classes

26
00:01:05.050 --> 00:01:08.030
will change according to the underlying provider.

27
00:01:08.030 --> 00:01:11.070
So, what I am gonna do is let's go to our IDE,

28
00:01:11.070 --> 00:01:15.030
and let's look at our reports resource class.

29
00:01:15.030 --> 00:01:18.020
In this at line number 33,

30
00:01:18.020 --> 00:01:21.090
we had injected the managed executor service object.

31
00:01:21.090 --> 00:01:24.040
Using the JNDI look up, right?

32
00:01:24.040 --> 00:01:25.080
Now, what I'm gonna do,

33
00:01:25.080 --> 00:01:28.000
I'm gonna just take this service reference

34
00:01:28.000 --> 00:01:30.080
and come down inside our method.

35
00:01:30.080 --> 00:01:33.060
Let's say inside the generate reports method

36
00:01:33.060 --> 00:01:35.000
and on line number 52

37
00:01:35.000 --> 00:01:38.040
I'll put a simple sys out...

38
00:01:38.040 --> 00:01:41.090
and I am going to say service object...

39
00:01:41.090 --> 00:01:48.010
from JNDI look up, right.

40
00:01:48.010 --> 00:01:49.070
I'm just going to print that service object.

41
00:01:49.070 --> 00:01:50.090
This is just to see

42
00:01:50.090 --> 00:01:52.040
the fully qualified glass name of

43
00:01:52.040 --> 00:01:54.010
this object that gets printed

44
00:01:54.010 --> 00:01:56.080
when you actually run this demo, okay?

45
00:01:56.080 --> 00:01:58.070
So, this is the reports demo

46
00:01:58.070 --> 00:01:59.060
that we are talking about

47
00:01:59.060 --> 00:02:01.030
so I'll go to the D drive

48
00:02:01.030 --> 00:02:03.020
and I'll get rid of all the earlier reports

49
00:02:03.020 --> 00:02:04.010
that we are generated

50
00:02:04.010 --> 00:02:06.010
because this is going to be a fresh run.

51
00:02:06.010 --> 00:02:09.010
So, let's go back and it's diploid.

52
00:02:09.010 --> 00:02:12.050
So, let's go to the Postman tool and yeah,

53
00:02:12.050 --> 00:02:15.060
let's run this URL.

54
00:02:15.060 --> 00:02:16.070
Yeah, so now let's come down

55
00:02:16.070 --> 00:02:21.000
on the GlassFish console and if you see,

56
00:02:21.000 --> 00:02:24.020
yeah, that's the service object from JNDI look up.

57
00:02:24.020 --> 00:02:25.030
And do you see that there is

58
00:02:25.030 --> 00:02:29.000
org.glassfish.enterprise.concurrent.Managed

59
00:02:29.000 --> 00:02:31.020
ExecutorServiceAdapter.

60
00:02:31.020 --> 00:02:33.010
So, this is what I was trying to tell you

61
00:02:33.010 --> 00:02:35.000
that when you talk about the implementation classes

62
00:02:35.000 --> 00:02:36.000
they are going to be specific

63
00:02:36.000 --> 00:02:37.060
according to the server.

64
00:02:37.060 --> 00:02:38.090
So, tomorrow if you are working on

65
00:02:38.090 --> 00:02:40.080
any other application server

66
00:02:40.080 --> 00:02:43.010
these implementation classes will be different.

67
00:02:43.010 --> 00:02:45.040
Please keep that in mind.

68
00:02:45.040 --> 00:02:49.010
The next point is you can configure resources

69
00:02:49.010 --> 00:02:51.000
in the server or

70
00:02:51.000 --> 00:02:54.040
you can use default preconfigured implementations.

71
00:02:54.040 --> 00:02:55.080
What I mean to say by this is

72
00:02:55.080 --> 00:02:57.000
you've already seen this submit

73
00:02:57.000 --> 00:02:58.000
in the previous demos,

74
00:02:58.000 --> 00:02:59.030
but let's revise quickly.

75
00:02:59.030 --> 00:03:00.090
This is a resources tab

76
00:03:00.090 --> 00:03:02.050
and under the concurrent resources

77
00:03:02.050 --> 00:03:04.050
I have those four services, right?

78
00:03:04.050 --> 00:03:06.030
If I go into any one of them,

79
00:03:06.030 --> 00:03:07.030
then we had discussed that

80
00:03:07.030 --> 00:03:09.020
there is a default resource already

81
00:03:09.020 --> 00:03:12.030
configured for you by the GlassFish server.

82
00:03:12.030 --> 00:03:14.040
However, you can also

83
00:03:14.040 --> 00:03:17.020
add your own new resources like that.

84
00:03:17.020 --> 00:03:18.040
So there is a way

85
00:03:18.040 --> 00:03:20.010
where you give configuration information

86
00:03:20.010 --> 00:03:21.070
to your new resource

87
00:03:21.070 --> 00:03:24.040
and then use this resource's JNDI name

88
00:03:24.040 --> 00:03:27.000
to get the managed executor service object

89
00:03:27.000 --> 00:03:28.050
in your application code.

90
00:03:28.050 --> 00:03:29.080
That's totally possible.

91
00:03:29.080 --> 00:03:30.070
But, we just went ahead

92
00:03:30.070 --> 00:03:31.090
with a default implementation

93
00:03:31.090 --> 00:03:33.060
because it's way convenient right now

94
00:03:33.060 --> 00:03:35.000
for this demonstration.

95
00:03:35.000 --> 00:03:38.020
Okay, the next point is

96
00:03:38.020 --> 00:03:41.020
the tasks run with managed threads

97
00:03:41.020 --> 00:03:43.040
from Java EE product provider

98
00:03:43.040 --> 00:03:45.020
whenever you are trying to run tasks

99
00:03:45.020 --> 00:03:46.090
and the threads are now as we know,

100
00:03:46.090 --> 00:03:49.050
the managed resources of the container.

101
00:03:49.050 --> 00:03:52.080
So, all the tasks, all the runnables, callables

102
00:03:52.080 --> 00:03:54.080
that you are trying to write down in your application

103
00:03:54.080 --> 00:03:56.040
they are going to now run with these

104
00:03:56.040 --> 00:03:59.010
managed threads coming from the container.

105
00:03:59.010 --> 00:04:00.060
And when that happens

106
00:04:00.060 --> 00:04:02.030
these threads will run within the

107
00:04:02.030 --> 00:04:03.090
application component context.

108
00:04:03.090 --> 00:04:05.040
So, you may have your EJB

109
00:04:05.040 --> 00:04:07.010
or servelet or RESTful bean.

110
00:04:07.010 --> 00:04:11.080
So the entire contextual information will be available now

111
00:04:11.080 --> 00:04:13.070
on that running thread.

112
00:04:13.070 --> 00:04:14.080
And the last point is,

113
00:04:14.080 --> 00:04:16.090
all the APIs are very similar

114
00:04:16.090 --> 00:04:19.090
to Java standard edition concurrency utilities.

115
00:04:19.090 --> 00:04:21.010
We're going to have a quick look

116
00:04:21.010 --> 00:04:23.030
of managed executor service

117
00:04:23.030 --> 00:04:25.060
and managed scheduled executor service APIs.

118
00:04:25.060 --> 00:04:28.050
Let's go back to the IDE,

119
00:04:28.050 --> 00:04:31.030
and I'll just go down there,

120
00:04:31.030 --> 00:04:34.020
and I'll just grab the service object that we have

121
00:04:34.020 --> 00:04:35.090
and let's take a look at the APIs.

122
00:04:35.090 --> 00:04:38.090
Yeah, so you have execute,

123
00:04:38.090 --> 00:04:42.020
than you have... submit,

124
00:04:42.020 --> 00:04:45.060
the one we used with either a runnable or a callable

125
00:04:45.060 --> 00:04:47.010
and than you have these flavors:

126
00:04:47.010 --> 00:04:49.060
invoke any, invoke all.

127
00:04:49.060 --> 00:04:50.040
And if you recollect,

128
00:04:50.040 --> 00:04:51.090
we've already seen the demonstration

129
00:04:51.090 --> 00:04:53.090
of these APIs in a standard edition project

130
00:04:53.090 --> 00:04:55.010
that we did earlier.

131
00:04:55.010 --> 00:04:56.090
These APIs work very similar

132
00:04:56.090 --> 00:04:58.050
and you are free to try these out

133
00:04:58.050 --> 00:05:00.000
because they're just going to work the same.

134
00:05:00.000 --> 00:05:02.040
This is going to accept a collection of tasks

135
00:05:02.040 --> 00:05:03.040
and then give a results of

136
00:05:03.040 --> 00:05:06.020
futures or it's going to have

137
00:05:06.020 --> 00:05:07.080
invoke any where you just submit a

138
00:05:07.080 --> 00:05:09.050
collection of tasks and returns the result

139
00:05:09.050 --> 00:05:10.070
of only one operation.

140
00:05:10.070 --> 00:05:12.020
So, they are going to behave the exactly the way

141
00:05:12.020 --> 00:05:14.070
they have behaved in standard edition.

142
00:05:14.070 --> 00:05:16.090
Just one point that you've to note here is

143
00:05:16.090 --> 00:05:19.000
that when you talk about APIs like

144
00:05:19.000 --> 00:05:21.010
shutdown and shutdownNow

145
00:05:21.010 --> 00:05:23.050
they are no longer needed for the managed resources,

146
00:05:23.050 --> 00:05:24.090
because these resources are

147
00:05:24.090 --> 00:05:27.000
completely up to the container to manage.

148
00:05:27.000 --> 00:05:28.010
So we don't really need to

149
00:05:28.010 --> 00:05:30.040
go and make that shutdown call ourselves.

150
00:05:30.040 --> 00:05:31.090
So, even if you try a shutdown call

151
00:05:31.090 --> 00:05:34.030
on the managed executor service object right now

152
00:05:34.030 --> 00:05:36.000
it will tell you that this LifeCycle operation

153
00:05:36.000 --> 00:05:37.030
is not supported.

154
00:05:37.030 --> 00:05:38.060
So that's the service object.

155
00:05:38.060 --> 00:05:41.090
Let's close this and come to URL health resource.

156
00:05:41.090 --> 00:05:43.090
And even the APIs on the managed

157
00:05:43.090 --> 00:05:45.080
scheduled executor service

158
00:05:45.080 --> 00:05:48.000
are very similar to what we have done

159
00:05:48.000 --> 00:05:49.070
in the standard edition platform.

160
00:05:49.070 --> 00:05:52.050
So let's say I come down there under the method

161
00:05:52.050 --> 00:05:54.080
and on line number 27 let's say

162
00:05:54.080 --> 00:05:57.020
I get hold of the scheduled executor service.

163
00:05:57.020 --> 00:06:01.010
Yeah, so we've already seen the scheduled API.

164
00:06:01.010 --> 00:06:03.040
Similarly, you have scheduled at fixed rate

165
00:06:03.040 --> 00:06:04.090
and scheduled with fixed delay.

166
00:06:04.090 --> 00:06:06.060
So, those APIs are very similar

167
00:06:06.060 --> 00:06:08.010
to what we have done under standard edition.

168
00:06:08.010 --> 00:06:09.060
So, it will allow you to schedule jobs

169
00:06:09.060 --> 00:06:10.070
in your application,

170
00:06:10.070 --> 00:06:12.070
either at fixed regular intervals

171
00:06:12.070 --> 00:06:15.010
or maybe with fixed definite delay.

172
00:06:15.010 --> 00:06:16.080
So, these pretty much run the same

173
00:06:16.080 --> 00:06:18.000
and the rest of the things for

174
00:06:18.000 --> 00:06:20.010
the rest of the two concurrency APIs

175
00:06:20.010 --> 00:06:22.000
we'll see in the subsequent demo.

