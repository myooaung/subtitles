WEBVTT
1
00:00:00.050 --> 00:00:02.060
- [Instructor] So we have seen how to create a thread

2
00:00:02.060 --> 00:00:05.020
using the thread class in your Java application.

3
00:00:05.020 --> 00:00:07.000
Now let's understand how to create a thread

4
00:00:07.000 --> 00:00:08.080
using the Runnable interface.

5
00:00:08.080 --> 00:00:10.070
Runnable interface, like the thread class,

6
00:00:10.070 --> 00:00:12.080
is present under the java.lang package.

7
00:00:12.080 --> 00:00:15.040
And like the thread class again, Runnable interface

8
00:00:15.040 --> 00:00:18.070
has also got the run method declared, which is going

9
00:00:18.070 --> 00:00:22.020
to specify the job of the thread to be spawned, right?

10
00:00:22.020 --> 00:00:24.060
Now, whenever you want to create threads in your system,

11
00:00:24.060 --> 00:00:27.010
this runnable interface option is always preferred.

12
00:00:27.010 --> 00:00:29.070
That's because in Java we all know that we can have a class

13
00:00:29.070 --> 00:00:32.060
that implements multiple interfaces but you cannot

14
00:00:32.060 --> 00:00:35.080
have a class that extends more than one class, right?

15
00:00:35.080 --> 00:00:38.010
So if you try to extend the thread class you wouldn't

16
00:00:38.010 --> 00:00:40.000
be able to extend any other class.

17
00:00:40.000 --> 00:00:41.040
So we generally go with the option

18
00:00:41.040 --> 00:00:43.050
of the runnable interface to create threads

19
00:00:43.050 --> 00:00:46.050
in our multi-threaded Java applications.

20
00:00:46.050 --> 00:00:49.040
So let's go ahead and do a demo for this.

21
00:00:49.040 --> 00:00:50.080
The use case is the same.

22
00:00:50.080 --> 00:00:52.090
We are still going to have the thread doing the job

23
00:00:52.090 --> 00:00:54.090
of reading the file that we have read

24
00:00:54.090 --> 00:00:56.080
in the previous demo, right?

25
00:00:56.080 --> 00:00:59.060
We're going to use a lambda expression to create an instance

26
00:00:59.060 --> 00:01:01.090
of the runnable API, right?

27
00:01:01.090 --> 00:01:03.070
So let's get started.

28
00:01:03.070 --> 00:01:06.060
Another way to create the runnable instance is,

29
00:01:06.060 --> 00:01:09.020
what you can do, you can go to your runnables folder,

30
00:01:09.020 --> 00:01:13.080
and create a class, and see, let's call it AppRunnable.

31
00:01:13.080 --> 00:01:17.000
And you can actually make this class

32
00:01:17.000 --> 00:01:21.020
implement the runnable interface, right?

33
00:01:21.020 --> 00:01:25.020
And then you can actually implement the run method.

34
00:01:25.020 --> 00:01:28.050
Once you write a logical file reading on lines number 16,

35
00:01:28.050 --> 00:01:31.080
then you can actually create an instance of this class.

36
00:01:31.080 --> 00:01:34.020
So let's grab the main material itself.

37
00:01:34.020 --> 00:01:35.090
And how do you create an instance?

38
00:01:35.090 --> 00:01:43.030
You just have to instantiate the subject...

39
00:01:43.030 --> 00:01:44.010
Right?

40
00:01:44.010 --> 00:01:45.070
So this becomes your runnable instance.

41
00:01:45.070 --> 00:01:48.000
So what I did earlier is I tried to create this instance

42
00:01:48.000 --> 00:01:50.080
using our lambda expression.

43
00:01:50.080 --> 00:01:54.000
Let's come to the project and let's create

44
00:01:54.000 --> 00:01:56.030
a test class right away.

45
00:01:56.030 --> 00:02:01.040
Let's call it TestRunnable.

46
00:02:01.040 --> 00:02:05.020
Let's grab the main material, okay.

47
00:02:05.020 --> 00:02:06.090
And let's create an instance

48
00:02:06.090 --> 00:02:08.090
of runnable using lambda expressions,

49
00:02:08.090 --> 00:02:13.030
so I'm gonna say runnable, give the reference a name,

50
00:02:13.030 --> 00:02:19.010
and put in your lambda expression.

51
00:02:19.010 --> 00:02:21.060
Okay, and the code is the same.

52
00:02:21.060 --> 00:02:23.000
You're still reading the file,

53
00:02:23.000 --> 00:02:24.050
so I'm not gonna write that again.

54
00:02:24.050 --> 00:02:28.020
I'll just pull it out from the app thread class.

55
00:02:28.020 --> 00:02:31.010
Let's copy this code, which is the try

56
00:02:31.010 --> 00:02:35.010
with resources statement right up to the end.

57
00:02:35.010 --> 00:02:39.070
Okay, let's copy this so I'm copying lines number 25-34,

58
00:02:39.070 --> 00:02:41.050
and I'll come back to my TestRunnable class,

59
00:02:41.050 --> 00:02:43.010
and I'll just space them here.

60
00:02:43.010 --> 00:02:47.070
Make sure you provide the necessary imports.

61
00:02:47.070 --> 00:02:51.040
Okay, yeah, so that's what it is.

62
00:02:51.040 --> 00:02:53.030
We have the runnable instance ready,

63
00:02:53.030 --> 00:02:55.010
with the help of our lambda expression,

64
00:02:55.010 --> 00:02:57.060
according to Java 1.8 features.

65
00:02:57.060 --> 00:02:59.000
Okay, what's the next step?

66
00:02:59.000 --> 00:03:00.070
Once you create the instance of Runnable,

67
00:03:00.070 --> 00:03:03.040
you can feed that instance to the thread constructor.

68
00:03:03.040 --> 00:03:05.000
Okay, why do we need this?

69
00:03:05.000 --> 00:03:06.030
Let's understand that.

70
00:03:06.030 --> 00:03:09.000
When you talk about starting a thread the way we did

71
00:03:09.000 --> 00:03:11.050
in the previous demo, the stop API is of a level

72
00:03:11.050 --> 00:03:13.030
on the thread class.

73
00:03:13.030 --> 00:03:16.030
In fact, all the API's which will allow you to start

74
00:03:16.030 --> 00:03:18.040
and manage the thread, are on the thread class,

75
00:03:18.040 --> 00:03:21.010
not on the runnable interface, okay?

76
00:03:21.010 --> 00:03:23.020
So what we have to do is we need an instance

77
00:03:23.020 --> 00:03:26.020
of the thread class, so that all those API's

78
00:03:26.020 --> 00:03:28.010
become accessible to us.

79
00:03:28.010 --> 00:03:31.050
So what we do is we create a new thread instance,

80
00:03:31.050 --> 00:03:33.090
and we actually make use of the overloaded

81
00:03:33.090 --> 00:03:38.030
thread constructor, which states a runnable argument.

82
00:03:38.030 --> 00:03:39.010
Great.

83
00:03:39.010 --> 00:03:44.070
And after that, we just have to start the thread.

84
00:03:44.070 --> 00:03:45.050
Right?

85
00:03:45.050 --> 00:03:48.000
That was the last step, you just have to start the thread.

86
00:03:48.000 --> 00:03:53.030
Okay, so now let's go ahead and run this code.

87
00:03:53.030 --> 00:03:56.030
Yeah, so we just have one thread this time,

88
00:03:56.030 --> 00:03:58.080
so thread-0, that's how it is named.

89
00:03:58.080 --> 00:04:02.090
And that's the output of the file that was read.

90
00:04:02.090 --> 00:04:04.070
Okay, so there's a single thread that we

91
00:04:04.070 --> 00:04:06.020
had started in the previous demo.

92
00:04:06.020 --> 00:04:08.000
I actually showed you three threads because I wanted you

93
00:04:08.000 --> 00:04:10.050
to understand how they run in parallel.

94
00:04:10.050 --> 00:04:12.070
Yeah we just have created one thread, and the output

95
00:04:12.070 --> 00:04:14.050
is right there in front of you.

96
00:04:14.050 --> 00:04:16.060
So now there are certain points that we want

97
00:04:16.060 --> 00:04:18.070
to make a note of from this table.

98
00:04:18.070 --> 00:04:22.030
The first thing is, in the previous demo, you saw thread-0,

99
00:04:22.030 --> 00:04:25.070
thread-1, thread-2, and in this demo, you see thread-0

100
00:04:25.070 --> 00:04:27.020
printed on the console.

101
00:04:27.020 --> 00:04:29.080
So the naming convention that Java follows is this:

102
00:04:29.080 --> 00:04:32.090
It will start naming it's threads as thread-0, thread-1,

103
00:04:32.090 --> 00:04:35.070
thread-2 and so on and so forth, right?

104
00:04:35.070 --> 00:04:37.020
That's the first point.

105
00:04:37.020 --> 00:04:39.010
Let's also understand a few other things.

106
00:04:39.010 --> 00:04:43.090
Let's come to the TestThreads class and with one

107
00:04:43.090 --> 00:04:46.020
of the previous demos we talked about the states

108
00:04:46.020 --> 00:04:47.050
of the thread, right?

109
00:04:47.050 --> 00:04:50.060
And then we said that we'd talk more about it in the demo.

110
00:04:50.060 --> 00:04:53.050
Whenever you create an instance of a thread,

111
00:04:53.050 --> 00:04:55.030
it could be through the thread class or it could be

112
00:04:55.030 --> 00:04:57.040
though the Runnable API, right?

113
00:04:57.040 --> 00:04:59.090
In both the cases, when the instance of the thread

114
00:04:59.090 --> 00:05:03.050
is created, the state of the thread is new, okay?

115
00:05:03.050 --> 00:05:06.070
Then, when you start the thread, the state

116
00:05:06.070 --> 00:05:09.040
of the thread becomes runnable.

117
00:05:09.040 --> 00:05:11.030
Runnable means ready to run.

118
00:05:11.030 --> 00:05:13.040
So this is an indication given to the JVM

119
00:05:13.040 --> 00:05:16.030
that yes, this thread is now ready to run.

120
00:05:16.030 --> 00:05:21.000
When your JVM is going to execute the runnable,

121
00:05:21.000 --> 00:05:23.030
as per the scheduling, then that's the point

122
00:05:23.030 --> 00:05:27.020
where the state of the thread becomes running, okay?

123
00:05:27.020 --> 00:05:30.080
And when the job gets completed, that's when the state

124
00:05:30.080 --> 00:05:34.050
of the thread, is terminated, or as we say: dead.

125
00:05:34.050 --> 00:05:36.010
So those are the states of the thread

126
00:05:36.010 --> 00:05:37.090
that the thread transitions through

127
00:05:37.090 --> 00:05:39.080
during its entire lifecycle.

128
00:05:39.080 --> 00:05:42.060
Of course, in between, let's say the thread is

129
00:05:42.060 --> 00:05:46.010
put to sleep, or if the thread is waiting for some resource,

130
00:05:46.010 --> 00:05:47.080
then it will go into the blocked state,

131
00:05:47.080 --> 00:05:50.000
or the waiting state, so that's an additional state

132
00:05:50.000 --> 00:05:51.050
in between.

133
00:05:51.050 --> 00:05:53.090
Okay, another point to note here is,

134
00:05:53.090 --> 00:05:56.010
on the thread instance, on line number 27,

135
00:05:56.010 --> 00:05:57.090
I'm gonna take one of the thread instances,

136
00:05:57.090 --> 00:06:00.050
thread-1, let's say, and you're going to notice

137
00:06:00.050 --> 00:06:01.050
all the API's.

138
00:06:01.050 --> 00:06:03.040
We're just going to go through them quickly.

139
00:06:03.040 --> 00:06:05.040
You have a lot of API's in the thread class.

140
00:06:05.040 --> 00:06:07.080
I mentioned earlier that all the API's to start

141
00:06:07.080 --> 00:06:10.040
and manage the thread are present in the thread instance.

142
00:06:10.040 --> 00:06:12.030
So let's take a look here:

143
00:06:12.030 --> 00:06:14.080
getId, which will get you ID of the thread,

144
00:06:14.080 --> 00:06:17.030
getName, that's gonna get you the name,

145
00:06:17.030 --> 00:06:20.080
Priority, so in my earlier videos I mentioned

146
00:06:20.080 --> 00:06:23.030
that the multi-threading API allows you

147
00:06:23.030 --> 00:06:25.000
to assign a priority, right?

148
00:06:25.000 --> 00:06:28.080
So you have getPriority, and you have setPriority.

149
00:06:28.080 --> 00:06:30.020
It's an integer value.

150
00:06:30.020 --> 00:06:32.050
The minimum is one, and the maximum is 10,

151
00:06:32.050 --> 00:06:36.030
so the higher the integer, the higher the priority, right?

152
00:06:36.030 --> 00:06:37.080
Okay, so what others?

153
00:06:37.080 --> 00:06:40.060
We have the getState API, which will help you

154
00:06:40.060 --> 00:06:42.070
to get the state of the thread, right?

155
00:06:42.070 --> 00:06:44.090
We talked about states a minute ago.

156
00:06:44.090 --> 00:06:47.090
getThreadGroup, which gives you the thread group information

157
00:06:47.090 --> 00:06:50.020
so what happens is in the system

158
00:06:50.020 --> 00:06:52.080
when the thread gets created, it is by default going

159
00:06:52.080 --> 00:06:55.030
to be assigned to a thread group, so that information

160
00:06:55.030 --> 00:06:57.090
can be retrieved using this API.

161
00:06:57.090 --> 00:07:00.080
Then you can check whether the thread is alive,

162
00:07:00.080 --> 00:07:03.050
you can check whether the thread is a daemon thread,

163
00:07:03.050 --> 00:07:06.030
then you can check whether the thread is interrupted,

164
00:07:06.030 --> 00:07:09.050
then you can also join one thread with another,

165
00:07:09.050 --> 00:07:12.050
and you can also make sure that the threads communicate

166
00:07:12.050 --> 00:07:15.020
with each other by notify, notifyAll,

167
00:07:15.020 --> 00:07:18.020
and there's another API called wait, right?

168
00:07:18.020 --> 00:07:20.040
That's called inter-thread communication.

169
00:07:20.040 --> 00:07:23.000
So there's a long list of API's and you can do loads

170
00:07:23.000 --> 00:07:26.040
of stuff using all of these API's that we saw.

171
00:07:26.040 --> 00:07:28.070
Now we are not going to go into the details of these API's

172
00:07:28.070 --> 00:07:31.000
because that's not the focal point of this course.

173
00:07:31.000 --> 00:07:33.050
If you think you need more information on these API's,

174
00:07:33.050 --> 00:07:36.080
I request you to take a course on the basics, very basics

175
00:07:36.080 --> 00:07:40.030
of multi-threading right here on LinkedIn Learning.

176
00:07:40.030 --> 00:07:42.090
This was just a quick revision, a quick overview,

177
00:07:42.090 --> 00:07:45.010
and to make sure that we recollect that there

178
00:07:45.010 --> 00:07:47.030
is a thread class, there's a runnable API,

179
00:07:47.030 --> 00:07:49.070
and what stuff can we do with it, when we want

180
00:07:49.070 --> 00:07:51.030
to create threads in our system.

181
00:07:51.030 --> 00:07:54.010
Okay, so let's get rid of this.

182
00:07:54.010 --> 00:07:56.010
Okay, so that's what the thread

183
00:07:56.010 --> 00:07:58.040
and the runnable interface is all about.

184
00:07:58.040 --> 00:08:00.000
Let's move on to the next video.

