WEBVTT
1
00:00:00.050 --> 00:00:01.070
- [Teacher] Let's look at the other

2
00:00:01.070 --> 00:00:04.000
two flavors of the method that we have.

3
00:00:04.000 --> 00:00:07.000
Schedule With Fixed Delay, and shedule At Fixed Rate.

4
00:00:07.000 --> 00:00:09.020
Let's go back to the IDE and I'm going

5
00:00:09.020 --> 00:00:12.050
to come in this previous scheduled call that we did.

6
00:00:12.050 --> 00:00:14.020
And instead, I'm going to say,

7
00:00:14.020 --> 00:00:19.060
service.scheduleAtFixedRate.

8
00:00:19.060 --> 00:00:23.080
Okay, It is going to demand from you the runnable instance

9
00:00:23.080 --> 00:00:29.030
so, let's say cleaning scheduler, then, an initial delay

10
00:00:29.030 --> 00:00:32.050
that will be five seconds, a long period,

11
00:00:32.050 --> 00:00:35.040
let's say that four seconds and of course,

12
00:00:35.040 --> 00:00:38.020
the time unit is seconds that we want.

13
00:00:38.020 --> 00:00:39.060
Now, please understand that scheduling jobs

14
00:00:39.060 --> 00:00:42.040
generally occur in days, okay, but right now,

15
00:00:42.040 --> 00:00:43.050
for the demonstration purposes,

16
00:00:43.050 --> 00:00:45.030
I'm keeping the time unit as seconds.

17
00:00:45.030 --> 00:00:47.000
Otherwise, I wouldn't be able to show you

18
00:00:47.000 --> 00:00:49.060
how it is scheduled and how the run happens.

19
00:00:49.060 --> 00:00:50.050
Okay.

20
00:00:50.050 --> 00:00:52.050
There's one more thing that I have to do,

21
00:00:52.050 --> 00:00:54.050
since I'm scheduling this job,

22
00:00:54.050 --> 00:00:56.060
I have to run it periodically and I'm going to show you

23
00:00:56.060 --> 00:01:00.060
at least two runs or three runs of this method call.

24
00:01:00.060 --> 00:01:02.030
And in order to do that, I'll have to go back

25
00:01:02.030 --> 00:01:06.000
to the cleaning scheduler and just comment on this call.

26
00:01:06.000 --> 00:01:06.090
Why?

27
00:01:06.090 --> 00:01:09.050
Because when I run the first cleaning scheduler task

28
00:01:09.050 --> 00:01:11.040
when it gets scheduled, it's definitely going

29
00:01:11.040 --> 00:01:13.010
to delete those files and then,

30
00:01:13.010 --> 00:01:14.090
when the next cleaning schedule comes in,

31
00:01:14.090 --> 00:01:17.000
it'll have nothing to delete, basically.

32
00:01:17.000 --> 00:01:17.080
Right?

33
00:01:17.080 --> 00:01:19.080
So I'm just going to comment on that line will not delete,

34
00:01:19.080 --> 00:01:22.080
but we'll just make sure that this job is running for us.

35
00:01:22.080 --> 00:01:24.090
Okay, so let's save this.

36
00:01:24.090 --> 00:01:26.030
Let's come back to test schedulers

37
00:01:26.030 --> 00:01:28.040
and let's understand what this method is going to do.

38
00:01:28.040 --> 00:01:31.080
When you say schedule At Fixed Rate, it means

39
00:01:31.080 --> 00:01:34.070
that the first cleaning scheduler is going to get enabled

40
00:01:34.070 --> 00:01:39.030
in the application after an initial delay of five seconds.

41
00:01:39.030 --> 00:01:42.020
There after, every four seconds,

42
00:01:42.020 --> 00:01:44.010
the cleaning scheduler is going to run.

43
00:01:44.010 --> 00:01:46.040
Right, I'm just gonna reiterate that, the first time

44
00:01:46.040 --> 00:01:49.070
it runs will be after an initial delay of five seconds,

45
00:01:49.070 --> 00:01:52.020
and then at a regular interval of four seconds,

46
00:01:52.020 --> 00:01:55.020
a new cleaning scheduler task will be submitted.

47
00:01:55.020 --> 00:01:56.090
Okay, so let's do one thing.

48
00:01:56.090 --> 00:02:00.010
Let's quickly run this.

49
00:02:00.010 --> 00:02:04.080
So one, two, three, four, five initial delay

50
00:02:04.080 --> 00:02:05.080
and you'll get the output.

51
00:02:05.080 --> 00:02:09.090
One, two, three, four, that's the interval.

52
00:02:09.090 --> 00:02:14.000
One, two, three, four, again, the output.

53
00:02:14.000 --> 00:02:15.070
So you see every four seconds later,

54
00:02:15.070 --> 00:02:18.080
that job is going to be submitted again, right.

55
00:02:18.080 --> 00:02:19.090
So that's how this works.

56
00:02:19.090 --> 00:02:22.030
Let's stop the execution.

57
00:02:22.030 --> 00:02:24.090
And now let's look at the other flavor as well.

58
00:02:24.090 --> 00:02:27.000
The other flavor is

59
00:02:27.000 --> 00:02:31.080
service.scheduleWithFixedDelay.

60
00:02:31.080 --> 00:02:35.060
So, this also demands from you the cleaning scheduler task,

61
00:02:35.060 --> 00:02:38.050
that initial delay, let's say that five seconds.

62
00:02:38.050 --> 00:02:42.020
And now this is a long delay, I'll explain to you what it

63
00:02:42.020 --> 00:02:48.070
let's say it's four and then seconds.

64
00:02:48.070 --> 00:02:51.070
Okay, what is this method going to do now?

65
00:02:51.070 --> 00:02:53.070
When you say schedule with fixed delay,

66
00:02:53.070 --> 00:02:56.060
it means that the first cleaning scheduler task is going

67
00:02:56.060 --> 00:03:01.000
to be enabled after an initial delay of five seconds.

68
00:03:01.000 --> 00:03:03.040
And this long delay that you've specified

69
00:03:03.040 --> 00:03:07.040
as a third argument signifies the interval

70
00:03:07.040 --> 00:03:11.040
between the termination of the last task

71
00:03:11.040 --> 00:03:14.000
and the commencement of the next.

72
00:03:14.000 --> 00:03:18.010
Okay, and this is not the same as the earlier API.

73
00:03:18.010 --> 00:03:21.060
That is because it is also going to take into consideration

74
00:03:21.060 --> 00:03:25.010
the time that is required for the scheduler itself

75
00:03:25.010 --> 00:03:27.060
to get executed completely, right.

76
00:03:27.060 --> 00:03:30.020
So the first instance will begin after five seconds,

77
00:03:30.020 --> 00:03:32.030
which is the initial delay of the application.

78
00:03:32.030 --> 00:03:34.070
And let's say the clearing scheduler

79
00:03:34.070 --> 00:03:38.020
takes another two seconds to execute, which means five

80
00:03:38.020 --> 00:03:40.070
plus two, you'll get the output of the seven seconds

81
00:03:40.070 --> 00:03:44.030
for the first cleaning scheduler, then it is going to wait

82
00:03:44.030 --> 00:03:46.040
for another four seconds, and then

83
00:03:46.040 --> 00:03:49.040
the next cleaning scheduler task will get submitted.

84
00:03:49.040 --> 00:03:52.040
So it is definitely taking into account the time that is

85
00:03:52.040 --> 00:03:56.030
required to complete this cleaning scheduler task as well.

86
00:03:56.030 --> 00:03:58.060
Okay, so let's do one thing in order to test this.

87
00:03:58.060 --> 00:04:01.030
Let's go to the cleaning scheduler, and do what we care?

88
00:04:01.030 --> 00:04:03.090
On line number 20, I'm going to insert a line saying

89
00:04:03.090 --> 00:04:08.010
thread.sleep, let's say put it to sleep for two seconds.

90
00:04:08.010 --> 00:04:12.010
Okay, so I'm going to say surround statement we try catch,

91
00:04:12.010 --> 00:04:15.000
and now let's understand what is going to happen.

92
00:04:15.000 --> 00:04:16.090
I'm going to write it down here your for you

93
00:04:16.090 --> 00:04:19.050
so that it's pretty clear with us.

94
00:04:19.050 --> 00:04:24.060
The first task after an initial

95
00:04:24.060 --> 00:04:27.080
delay of five seconds.

96
00:04:27.080 --> 00:04:31.060
Okay, now, once the task spawns, then of course,

97
00:04:31.060 --> 00:04:34.000
it is going to take two more seconds to execute,

98
00:04:34.000 --> 00:04:38.040
right, so two seconds for the task to execute.

99
00:04:38.040 --> 00:04:41.000
Which means when you start the application

100
00:04:41.000 --> 00:04:42.080
after a total of seven seconds,

101
00:04:42.080 --> 00:04:45.060
you're going to get the output of this task.

102
00:04:45.060 --> 00:04:51.060
After that there's a waiting time of four seconds.

103
00:04:51.060 --> 00:04:55.000
And then the next cleaning scheduler will start, right.

104
00:04:55.000 --> 00:04:57.020
So this interval that we're talking about this argument,

105
00:04:57.020 --> 00:04:59.060
the third argument is the time interval

106
00:04:59.060 --> 00:05:02.010
between the completion between the termination

107
00:05:02.010 --> 00:05:05.050
of the last task and the commencement of the next.

108
00:05:05.050 --> 00:05:07.080
So after the waiting time of four seconds,

109
00:05:07.080 --> 00:05:09.070
then the next cleaning schedule is going to start

110
00:05:09.070 --> 00:05:13.090
and that itself will take two seconds to execute, right.

111
00:05:13.090 --> 00:05:15.030
So after six seconds, you will

112
00:05:15.030 --> 00:05:17.060
get the next output of the task.

113
00:05:17.060 --> 00:05:22.000
Okay, so let's run this and observe very, very carefully.

114
00:05:22.000 --> 00:05:24.090
Let me just minimize the view so we have

115
00:05:24.090 --> 00:05:28.000
the parameters right in front of us.

116
00:05:28.000 --> 00:05:32.090
Okay, let's clear this and let's run this.

117
00:05:32.090 --> 00:05:37.050
So one, two, three, four, five,

118
00:05:37.050 --> 00:05:40.020
six and seven, the first output.

119
00:05:40.020 --> 00:05:43.090
One, two, three, four, and then

120
00:05:43.090 --> 00:05:46.020
two seconds Five, six, the next output.

121
00:05:46.020 --> 00:05:49.030
you see, so basically, it is going to take into account

122
00:05:49.030 --> 00:05:52.010
the time taken by the task to get completed

123
00:05:52.010 --> 00:05:54.010
without it, it is never going to make sure

124
00:05:54.010 --> 00:05:57.020
that the next cleaning scheduler task is ever submitted

125
00:05:57.020 --> 00:05:59.040
and the next cleaning scheduler task is always going

126
00:05:59.040 --> 00:06:02.090
to submit it even after this delay not before that.

127
00:06:02.090 --> 00:06:06.020
So the waiting time for the task and then the delay

128
00:06:06.020 --> 00:06:08.020
and then the next task starts.

129
00:06:08.020 --> 00:06:10.060
I hope this is clear, all right.

130
00:06:10.060 --> 00:06:12.080
Let's stop the execution.

131
00:06:12.080 --> 00:06:14.050
One more point that I have to tell you here is

132
00:06:14.050 --> 00:06:18.000
that when we're trying to run the schedule methods,

133
00:06:18.000 --> 00:06:21.050
the output in case it is a callable implementation

134
00:06:21.050 --> 00:06:25.010
can be captured into a scheduled future object.

135
00:06:25.010 --> 00:06:27.040
So far when we saw the demos with the executor service

136
00:06:27.040 --> 00:06:30.000
we kept taking the output in a future object,

137
00:06:30.000 --> 00:06:32.080
but since this is the scheduled executor service,

138
00:06:32.080 --> 00:06:37.020
the output will be available in our scheduled future object.

139
00:06:37.020 --> 00:06:38.000
Right?

140
00:06:38.000 --> 00:06:42.000
So those are the methods of the scheduled executor service.

