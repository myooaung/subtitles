WEBVTT
1
00:00:00.050 --> 00:00:01.070
- [Instructor] Now, let's take a look at the

2
00:00:01.070 --> 00:00:04.090
Managed Scheduled Executor Service Demo

3
00:00:04.090 --> 00:00:05.090
that we will look at here.

4
00:00:05.090 --> 00:00:08.010
Let's look at its overview.

5
00:00:08.010 --> 00:00:09.040
So, by now we know that

6
00:00:09.040 --> 00:00:11.080
Managed Scheduled Executor Service

7
00:00:11.080 --> 00:00:15.000
is an extension to the standard platform's

8
00:00:15.000 --> 00:00:16.060
Scheduled Executor Service

9
00:00:16.060 --> 00:00:17.070
and we know its objective.

10
00:00:17.070 --> 00:00:20.010
It's basically going to provide you methods

11
00:00:20.010 --> 00:00:23.010
to submit jobs, submit tasks,

12
00:00:23.010 --> 00:00:25.000
which occur at regular intervals

13
00:00:25.000 --> 00:00:27.070
or with definite days.

14
00:00:27.070 --> 00:00:29.070
And this particular resource,

15
00:00:29.070 --> 00:00:31.040
Managed Scheduled Executor Service,

16
00:00:31.040 --> 00:00:33.050
that can be obtained through the container,

17
00:00:33.050 --> 00:00:35.020
again, using the JNDI look up

18
00:00:35.020 --> 00:00:37.000
or the resource annotation.

19
00:00:37.000 --> 00:00:38.020
Okay, so now let's understand

20
00:00:38.020 --> 00:00:40.030
what we're going to do as a part of the demo.

21
00:00:40.030 --> 00:00:44.040
The use case is health check for the application.

22
00:00:44.040 --> 00:00:46.050
So, when you say managed scheduled,

23
00:00:46.050 --> 00:00:47.080
as the name suggests,

24
00:00:47.080 --> 00:00:50.020
it's kind of a scheduling job that you want to run.

25
00:00:50.020 --> 00:00:52.000
So, we are going to make sure that

26
00:00:52.000 --> 00:00:53.090
this job that we're going to run

27
00:00:53.090 --> 00:00:56.020
is going to check the health of the application.

28
00:00:56.020 --> 00:00:58.070
So, let's say I have a URL off my application

29
00:00:58.070 --> 00:01:00.030
and I just want to hit that URL

30
00:01:00.030 --> 00:01:02.020
and make sure that it is up and running.

31
00:01:02.020 --> 00:01:03.050
That's all that I'm checking.

32
00:01:03.050 --> 00:01:05.030
And this has to happen periodically

33
00:01:05.030 --> 00:01:07.010
because in cases where it is down,

34
00:01:07.010 --> 00:01:08.090
then I need to take appropriate action.

35
00:01:08.090 --> 00:01:10.040
Okay, so very simple use case,

36
00:01:10.040 --> 00:01:11.080
but we are going to do this.

37
00:01:11.080 --> 00:01:12.070
So, how are we going to do that,

38
00:01:12.070 --> 00:01:15.000
we're going to use java.net APIs.

39
00:01:15.000 --> 00:01:16.030
Very simple code

40
00:01:16.030 --> 00:01:19.040
where we will feed the URL to these APIs

41
00:01:19.040 --> 00:01:23.000
and ask it to connect to that particular website

42
00:01:23.000 --> 00:01:25.040
and check whether it's up and running.

43
00:01:25.040 --> 00:01:27.070
So, we'll use the java.net APIs,

44
00:01:27.070 --> 00:01:29.090
send a request to the application's URL

45
00:01:29.090 --> 00:01:32.010
and check whether it is running or not.

46
00:01:32.010 --> 00:01:35.010
So, how are we going to structure this code?

47
00:01:35.010 --> 00:01:36.070
That is, of course, this one class,

48
00:01:36.070 --> 00:01:38.050
which is the runnable implementation,

49
00:01:38.050 --> 00:01:40.080
which is going to check the health of the application.

50
00:01:40.080 --> 00:01:41.080
So, all the logic

51
00:01:41.080 --> 00:01:44.060
that you're going to write using java.net APIs

52
00:01:44.060 --> 00:01:47.020
will come inside this implementation

53
00:01:47.020 --> 00:01:49.070
and then we'll have the rest class,

54
00:01:49.070 --> 00:01:50.090
the rest will be,

55
00:01:50.090 --> 00:01:52.040
which is going to extract the

56
00:01:52.040 --> 00:01:55.070
Managed Scheduled Executor Service object

57
00:01:55.070 --> 00:01:57.060
from the container alignment

58
00:01:57.060 --> 00:02:00.080
using either JNDI or resource annotation

59
00:02:00.080 --> 00:02:02.030
and it is going to help us schedule

60
00:02:02.030 --> 00:02:04.030
this health check job periodically.

61
00:02:04.030 --> 00:02:07.030
So, this task is going to execute at regular intervals

62
00:02:07.030 --> 00:02:09.050
or maybe with fixed days.

63
00:02:09.050 --> 00:02:12.050
So, this loop that is indicated in the diagram

64
00:02:12.050 --> 00:02:14.070
represents that it is a periodic operation,

65
00:02:14.070 --> 00:02:17.010
which is going to happen at regular intervals

66
00:02:17.010 --> 00:02:19.020
and that's why it has been shown in a loop.

67
00:02:19.020 --> 00:02:22.000
So, we'll look at this demo in the next video.

