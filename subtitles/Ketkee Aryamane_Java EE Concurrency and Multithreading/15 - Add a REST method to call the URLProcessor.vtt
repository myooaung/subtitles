WEBVTT
1
00:00:00.050 --> 00:00:02.020
- [Instructor] So now let's go ahead and do the last step.

2
00:00:02.020 --> 00:00:04.040
You have to add a method to the REST class,

3
00:00:04.040 --> 00:00:06.060
get that scheduled executer service object

4
00:00:06.060 --> 00:00:08.020
that we've already injected.

5
00:00:08.020 --> 00:00:12.070
And submit the task for scheduling of the URL health check.

6
00:00:12.070 --> 00:00:15.030
Let's go ahead on the IDE

7
00:00:15.030 --> 00:00:18.030
and we've already added that REST class.

8
00:00:18.030 --> 00:00:21.080
We just need to go ahead and add a REST method to it.

9
00:00:21.080 --> 00:00:24.090
So let's get hold of the resource first.

10
00:00:24.090 --> 00:00:26.000
Yes.

11
00:00:26.000 --> 00:00:32.040
And here we will just add a @GET API.

12
00:00:32.040 --> 00:00:33.050
And what is it going to do?

13
00:00:33.050 --> 00:00:37.030
It is going to say

14
00:00:37.030 --> 00:00:42.070
public String checkHealthOf the app.

15
00:00:42.070 --> 00:00:44.070
Okay, so what is this going to do?

16
00:00:44.070 --> 00:00:50.040
Let's have a string message.

17
00:00:50.040 --> 00:00:54.070
Okay, and let's go ahead and take

18
00:00:54.070 --> 00:00:58.030
the scheduledExecutorService object now, grab that,

19
00:00:58.030 --> 00:01:03.090
and go ahead and call the schedule API.

20
00:01:03.090 --> 00:01:06.060
Okay, so this will take in three arguments:

21
00:01:06.060 --> 00:01:09.020
One is the instance of the URLHealthProcessor.

22
00:01:09.020 --> 00:01:13.010
So let's feed the instance to it.

23
00:01:13.010 --> 00:01:16.040
The initial delay, let's say is three seconds only.

24
00:01:16.040 --> 00:01:19.070
TimeUnit is seconds, of course,

25
00:01:19.070 --> 00:01:22.090
and as I said, you may want to actually schedule

26
00:01:22.090 --> 00:01:24.080
this health check maybe after certain minutes

27
00:01:24.080 --> 00:01:26.020
or certain days or whatever that is,

28
00:01:26.020 --> 00:01:27.080
but right now for demonstration purpose,

29
00:01:27.080 --> 00:01:30.090
I'm taking the TimeUnit as seconds.

30
00:01:30.090 --> 00:01:31.080
Okay.

31
00:01:31.080 --> 00:01:34.020
And once this is done, we just have

32
00:01:34.020 --> 00:01:40.030
to say message and let's also go ahead

33
00:01:40.030 --> 00:01:45.090
and say a health check initiated,

34
00:01:45.090 --> 00:01:49.080
okay, and receive it on message.

35
00:01:49.080 --> 00:01:53.070
Another thing that we can do is go to URLHealthProcessor

36
00:01:53.070 --> 00:01:57.040
and inside this runnable's run method,

37
00:01:57.040 --> 00:01:59.060
let's print out the threatening.

38
00:01:59.060 --> 00:02:01.080
we have not done this for the previous demo

39
00:02:01.080 --> 00:02:03.090
of managed executor service.

40
00:02:03.090 --> 00:02:05.050
So, right now, we are trying

41
00:02:05.050 --> 00:02:07.070
to type in the name of the thread.

42
00:02:07.070 --> 00:02:10.020
This is just to show you how are the threads

43
00:02:10.020 --> 00:02:12.000
going to be named when you use

44
00:02:12.000 --> 00:02:15.000
managed objects of the container environment.

45
00:02:15.000 --> 00:02:17.050
Okay, so that's just an observation

46
00:02:17.050 --> 00:02:20.040
so let's go ahead and say

47
00:02:20.040 --> 00:02:26.040
Thread.currentThread.getName

48
00:02:26.040 --> 00:02:29.080
and make sure that you put some suffix statement to it.

49
00:02:29.080 --> 00:02:36.040
So, checking the health of the application.

50
00:02:36.040 --> 00:02:38.030
Okay.

51
00:02:38.030 --> 00:02:43.020
So this is done and the URL health resource is all set.

52
00:02:43.020 --> 00:02:45.040
Yeah, so the changes have been deployed

53
00:02:45.040 --> 00:02:48.000
continuously on the server so we just now need

54
00:02:48.000 --> 00:02:51.060
to go and access this resource.

55
00:02:51.060 --> 00:02:53.030
We have to basically test it out now

56
00:02:53.030 --> 00:02:55.060
so we have to access this RESTful bean

57
00:02:55.060 --> 00:02:57.070
the part of which is urlCheck.

58
00:02:57.070 --> 00:02:59.050
So let's go to the Postman tool

59
00:02:59.050 --> 00:03:05.030
and we're just going to change that last URI.

60
00:03:05.030 --> 00:03:07.060
Okay, it tells me health check is initiated.

61
00:03:07.060 --> 00:03:09.080
Let's see what happens.

62
00:03:09.080 --> 00:03:11.020
Oh, yes, there we are.

63
00:03:11.020 --> 00:03:13.020
So the status of the app: yes, it is working

64
00:03:13.020 --> 00:03:17.080
and look at how the thread is named right here.

65
00:03:17.080 --> 00:03:20.020
The very first thing is, it is basically referring

66
00:03:20.020 --> 00:03:23.020
to the defaultManagedScheduledExecutorService object

67
00:03:23.020 --> 00:03:25.060
that we actually tried to extract using

68
00:03:25.060 --> 00:03:29.000
the resource annotation from the container environment.

69
00:03:29.000 --> 00:03:31.050
So it is the thread that has been spawned out

70
00:03:31.050 --> 00:03:34.080
of defaultManagedScheduledExecutorService-

71
00:03:34.080 --> 00:03:37.080
managedThreadFactory-Thread number one.

72
00:03:37.080 --> 00:03:39.060
Right, so this is how you actually have

73
00:03:39.060 --> 00:03:43.030
the naming convention for threads in a managed environment.

74
00:03:43.030 --> 00:03:45.090
You can also go and make a similar check

75
00:03:45.090 --> 00:03:47.040
for the previous use case.

76
00:03:47.040 --> 00:03:49.030
So, why don't we do that right here?

77
00:03:49.030 --> 00:03:55.020
We will go to the ReportsProcessor,

78
00:03:55.020 --> 00:04:00.010
and inside the callable method on line number 33,

79
00:04:00.010 --> 00:04:04.000
I'm going to insert that line where I'm going to say

80
00:04:04.000 --> 00:04:11.020
Thread.currentThread.getName

81
00:04:11.020 --> 00:04:15.070
generating report

82
00:04:15.070 --> 00:04:19.000
And now let's also go to the ReportsResource

83
00:04:19.000 --> 00:04:22.030
and check everything here.

84
00:04:22.030 --> 00:04:24.030
Okay, so this is still fine.

85
00:04:24.030 --> 00:04:26.080
So what we do is we'll go to the Reports folder

86
00:04:26.080 --> 00:04:29.050
and we'll delete these files

87
00:04:29.050 --> 00:04:31.020
and we'll run this use case again.

88
00:04:31.020 --> 00:04:34.000
So we just have to go to the Postman tool and test it again,

89
00:04:34.000 --> 00:04:35.080
the changes have been deployed already.

90
00:04:35.080 --> 00:04:40.040
So let's go ahead and access that reports URL again

91
00:04:40.040 --> 00:04:44.010
to run that use case.

92
00:04:44.010 --> 00:04:47.060
Yeah, so let's say send and now

93
00:04:47.060 --> 00:04:49.090
let's go and observe something.

94
00:04:49.090 --> 00:04:50.070
There we go.

95
00:04:50.070 --> 00:04:53.010
So you have defaultManagedExecutorService-

96
00:04:53.010 --> 00:04:56.030
managedThreadFactory-Thread number seven generating report.

97
00:04:56.030 --> 00:04:57.080
So that's how the name is.

98
00:04:57.080 --> 00:04:58.070
Okay?

99
00:04:58.070 --> 00:05:00.050
So this is how names get created

100
00:05:00.050 --> 00:05:01.080
and I just wanted to show you this,

101
00:05:01.080 --> 00:05:03.060
we had missed out this point when we tried

102
00:05:03.060 --> 00:05:08.010
to go ahead and test it out for the previous use case.

103
00:05:08.010 --> 00:05:09.070
Okay.

104
00:05:09.070 --> 00:05:11.060
So, that's about it.

105
00:05:11.060 --> 00:05:13.000
We have completed the demo

106
00:05:13.000 --> 00:05:16.070
for the managedScheduledExecutorService tool

107
00:05:16.070 --> 00:05:18.040
and in the next video we're going to look

108
00:05:18.040 --> 00:05:20.000
at the managed thread factory.

