WEBVTT
1
00:00:00.050 --> 00:00:01.030
- [Instructor] Let us take a look

2
00:00:01.030 --> 00:00:03.040
at the ContextService API Demo now.

3
00:00:03.040 --> 00:00:05.000
We want to make this very simple

4
00:00:05.000 --> 00:00:08.030
because ContextService is a very useful advanced scenarios.

5
00:00:08.030 --> 00:00:10.000
Let's take a look at what we want to do.

6
00:00:10.000 --> 00:00:11.090
The first step is add a REST class in the project,

7
00:00:11.090 --> 00:00:15.080
so let's go back to the IDE and add a REST class here,

8
00:00:15.080 --> 00:00:26.090
let's say, ContextServiceAPIResource.

9
00:00:26.090 --> 00:00:31.080
@Path an addition here.

10
00:00:31.080 --> 00:00:37.000
Let's give it a value.

11
00:00:37.000 --> 00:00:39.070
Okay, next is inject ContextService object

12
00:00:39.070 --> 00:00:42.020
by the resource annotation, so like the way

13
00:00:42.020 --> 00:00:45.050
we have injected all the other managed resources,

14
00:00:45.050 --> 00:00:47.000
let's inject this one, too.

15
00:00:47.000 --> 00:00:50.060
Let's go to the server and let's go to context services

16
00:00:50.060 --> 00:00:53.050
and pick up the default context service object available.

17
00:00:53.050 --> 00:00:55.030
So, that's the JNDI name.

18
00:00:55.030 --> 00:01:03.000
Let's come back to our class, and we'll say @Resource.

19
00:01:03.000 --> 00:01:07.080
Let's do a lookup of this object

20
00:01:07.080 --> 00:01:11.020
and assign it to a reference or,

21
00:01:11.020 --> 00:01:13.010
this is a dependency injection that we're doing,

22
00:01:13.010 --> 00:01:20.060
so we're going to say ContextService, take a reference.

23
00:01:20.060 --> 00:01:23.010
Okay.

24
00:01:23.010 --> 00:01:25.010
Once this is done, we create a simple runnable

25
00:01:25.010 --> 00:01:26.050
implementation, which will fetch

26
00:01:26.050 --> 00:01:28.060
the security context information.

27
00:01:28.060 --> 00:01:34.000
Okay, so let's go to the IDE and create a runnable task.

28
00:01:34.000 --> 00:01:40.050
Let's say ContextServiceRunnable

29
00:01:40.050 --> 00:01:46.040
and let this implement runnable,

30
00:01:46.040 --> 00:01:50.020
so we have to, of course, implement the run method.

31
00:01:50.020 --> 00:01:52.060
We don't want this default implementation.

32
00:01:52.060 --> 00:01:55.040
Let's get rid of it.

33
00:01:55.040 --> 00:01:57.000
Okay, so what are we going to do here?

34
00:01:57.000 --> 00:02:00.070
We first will do a sys out, saying Thread,

35
00:02:00.070 --> 00:02:02.090
and let's get the name of the thread,

36
00:02:02.090 --> 00:02:09.020
so Thread.currentThread.getName

37
00:02:09.020 --> 00:02:11.050
and the next thing that we're going to do here

38
00:02:11.050 --> 00:02:15.000
is we're going to fetch the security context information.

39
00:02:15.000 --> 00:02:16.080
So generally, when you run it as a full application,

40
00:02:16.080 --> 00:02:19.040
you do configure security authentication for it

41
00:02:19.040 --> 00:02:20.070
because you do not want anybody

42
00:02:20.070 --> 00:02:22.020
to come and access the service,

43
00:02:22.020 --> 00:02:23.060
but for this demonstration purpose,

44
00:02:23.060 --> 00:02:25.010
we have no security configured under

45
00:02:25.010 --> 00:02:27.000
this service that we have built.

46
00:02:27.000 --> 00:02:29.010
So, whenever we try to put in the security context

47
00:02:29.010 --> 00:02:31.030
information, it will pull in the security context

48
00:02:31.030 --> 00:02:36.010
information of the underlying GlassFish Server's users.

49
00:02:36.010 --> 00:02:38.020
Okay, so whatever the default configuration

50
00:02:38.020 --> 00:02:40.070
has been defined for security under the GlassFish Server,

51
00:02:40.070 --> 00:02:42.070
that's what we will pull out.

52
00:02:42.070 --> 00:02:43.050
So how do we pull out?

53
00:02:43.050 --> 00:02:45.030
We make use of a couple of APIs

54
00:02:45.030 --> 00:02:50.060
from java.security packet and javax.security.auth packet.

55
00:02:50.060 --> 00:02:52.010
And how do we do that?

56
00:02:52.010 --> 00:02:57.010
We take the subject API, that's coming

57
00:02:57.010 --> 00:02:59.040
from the javax.security.auth packet,

58
00:02:59.040 --> 00:03:02.030
and let's take a reference to it,

59
00:03:02.030 --> 00:03:09.090
and then we're going to say Subject.getSubject,

60
00:03:09.090 --> 00:03:13.020
and you're going to get the access control context

61
00:03:13.020 --> 00:03:17.040
information, so I'm going to say AccessController,

62
00:03:17.040 --> 00:03:18.090
we'll look at that in a minute,

63
00:03:18.090 --> 00:03:23.020
let me just quickly complete the sentence, getContext.

64
00:03:23.020 --> 00:03:25.020
So what is this, subject is an API

65
00:03:25.020 --> 00:03:27.090
which is going to help you store related information,

66
00:03:27.090 --> 00:03:31.020
like for example, if I have a user, entity, a person,

67
00:03:31.020 --> 00:03:33.070
then the information of that person

68
00:03:33.070 --> 00:03:35.090
is contained in this subject API.

69
00:03:35.090 --> 00:03:37.080
So that could be the identity information.

70
00:03:37.080 --> 00:03:40.040
It could also be security related attributes

71
00:03:40.040 --> 00:03:43.070
like passwords, cryptographic keys, et cetera.

72
00:03:43.070 --> 00:03:45.040
So that is the subject information

73
00:03:45.040 --> 00:03:47.060
and AccessController.getContext

74
00:03:47.060 --> 00:03:50.030
is basically going to give me the snapshot

75
00:03:50.030 --> 00:03:52.020
of the current call in context.

76
00:03:52.020 --> 00:03:53.090
So from that current called context,

77
00:03:53.090 --> 00:03:55.080
I'm trying to retrieve the subject.

78
00:03:55.080 --> 00:03:58.000
AccessController, just for your information,

79
00:03:58.000 --> 00:04:01.020
is basically to make a decision

80
00:04:01.020 --> 00:04:03.060
about a particular accessed resource,

81
00:04:03.060 --> 00:04:05.060
so if there's a resource that I have with me,

82
00:04:05.060 --> 00:04:06.090
should I be allowing access to it,

83
00:04:06.090 --> 00:04:08.070
or should I be denying it?

84
00:04:08.070 --> 00:04:09.090
That is what it will tell me.

85
00:04:09.090 --> 00:04:12.080
So from the snapshot of the current context,

86
00:04:12.080 --> 00:04:14.060
I'm picking up the subject's information,

87
00:04:14.060 --> 00:04:16.050
so the person's or the user's information.

88
00:04:16.050 --> 00:04:17.090
That's all I'm doing.

89
00:04:17.090 --> 00:04:20.040
And then I'm putting a sys out, simple siz-ode,

90
00:04:20.040 --> 00:04:27.020
which says security information from a normal thread.

91
00:04:27.020 --> 00:04:28.080
This is a normal thread instance, right?

92
00:04:28.080 --> 00:04:31.040
I mean, it's a simple implementation of the runnable.

93
00:04:31.040 --> 00:04:35.020
So, we'll just append that subject information to it.

94
00:04:35.020 --> 00:04:38.070
Once this is done, what is the next step?

95
00:04:38.070 --> 00:04:40.070
We're going to use the ContextService API now

96
00:04:40.070 --> 00:04:42.090
to create a contextual proxy

97
00:04:42.090 --> 00:04:44.090
for the runnable implementation.

98
00:04:44.090 --> 00:04:48.090
Okay, so let's go to the IDE and come here

99
00:04:48.090 --> 00:04:52.060
and quickly write a method, let's annotate it

100
00:04:52.060 --> 00:04:56.010
with the GET annotation, and let's say

101
00:04:56.010 --> 00:05:01.090
public String accessSecurityInfo,

102
00:05:01.090 --> 00:05:06.040
let that be the method, and inside that,

103
00:05:06.040 --> 00:05:09.070
what are we going to do, we're going to get the

104
00:05:09.070 --> 00:05:12.040
instance of the context service runnable first.

105
00:05:12.040 --> 00:05:14.040
We've already created the runnable implementation,

106
00:05:14.040 --> 00:05:16.090
so we're going to go ahead and create an instance of that.

107
00:05:16.090 --> 00:05:21.040
That's going to be very simple, ContextServiceRunnable,

108
00:05:21.040 --> 00:05:24.080
if you don't get it, dive in more, yeah,

109
00:05:24.080 --> 00:05:30.030
and let's take this and say new on it.

110
00:05:30.030 --> 00:05:35.070
Just go to instant she-day-rot, that's all.

111
00:05:35.070 --> 00:05:37.050
So, on the next line, I'm going to create

112
00:05:37.050 --> 00:05:44.070
an instance of the thread class.

113
00:05:44.070 --> 00:05:46.090
Like that, and through this I'm going

114
00:05:46.090 --> 00:05:49.060
to pass the runnable instance.

115
00:05:49.060 --> 00:05:54.010
Now, if on the next line, I say thread.start,

116
00:05:54.010 --> 00:05:56.010
let's understand what I'm trying to do.

117
00:05:56.010 --> 00:05:59.070
I'm trying to clear the thread in the way I have always done

118
00:05:59.070 --> 00:06:01.060
on the standard edition platform.

119
00:06:01.060 --> 00:06:03.060
So if I'm trying to create my own resource,

120
00:06:03.060 --> 00:06:05.050
we know that the container would not be aware,

121
00:06:05.050 --> 00:06:08.030
and then this thread would never get the thread context,

122
00:06:08.030 --> 00:06:11.030
which means, if I try to run this thread now,

123
00:06:11.030 --> 00:06:13.090
by writing these couple lines, 28 and 29,

124
00:06:13.090 --> 00:06:16.020
then it is not guaranteed that

125
00:06:16.020 --> 00:06:19.040
the security context information I am trying to pull in this

126
00:06:19.040 --> 00:06:23.070
runnable will be available to me when I run this thread.

127
00:06:23.070 --> 00:06:25.080
Okay, that's exactly what the problem is

128
00:06:25.080 --> 00:06:27.010
that we discussed at the unit start

129
00:06:27.010 --> 00:06:29.000
of the competency API discussion,

130
00:06:29.000 --> 00:06:31.000
that if you cleared these threads by yourself,

131
00:06:31.000 --> 00:06:33.010
then there is no guarantee the thread's entire

132
00:06:33.010 --> 00:06:36.030
contextual information would be available inside the thread.

133
00:06:36.030 --> 00:06:38.040
So, whatever thread code that you're running,

134
00:06:38.040 --> 00:06:40.030
let's say in this, I'm trying to access

135
00:06:40.030 --> 00:06:42.070
the security information, I'm not sure

136
00:06:42.070 --> 00:06:45.000
whether I'll get it, okay?

137
00:06:45.000 --> 00:06:48.050
So instead of that, the context service API now can be used

138
00:06:48.050 --> 00:06:52.010
to ensure that that context information will be captured

139
00:06:52.010 --> 00:06:53.080
for this thread to run.

140
00:06:53.080 --> 00:06:54.060
How?

141
00:06:54.060 --> 00:06:55.090
So let's get rid of these lines

142
00:06:55.090 --> 00:06:58.060
and say runnable, and this time

143
00:06:58.060 --> 00:07:01.010
I'm going to create a proxy, I label it that way

144
00:07:01.010 --> 00:07:03.000
so that it becomes easy to understand.

145
00:07:03.000 --> 00:07:06.030
So now I'm creating a proxy and how do I do that?

146
00:07:06.030 --> 00:07:08.060
Let's take that contextService and

147
00:07:08.060 --> 00:07:11.070
say dot createContextualProxy.

148
00:07:11.070 --> 00:07:14.020
So, to this, I'm going to pass the runnable instance,

149
00:07:14.020 --> 00:07:16.090
which is my runnable instance on line 27,

150
00:07:16.090 --> 00:07:21.000
and the type, of course the type is, Runnable.class.

151
00:07:21.000 --> 00:07:25.060
Okay, now once this is done, now if I clear the thread

152
00:07:25.060 --> 00:07:29.020
like that, the way I cleared in the SE platform,

153
00:07:29.020 --> 00:07:33.070
and pass the proxy instead of passing the runnable,

154
00:07:33.070 --> 00:07:38.040
and if I say thread.start, then it

155
00:07:38.040 --> 00:07:40.020
is going to make a difference.

156
00:07:40.020 --> 00:07:43.050
Now what happens is that, since the proxy was created,

157
00:07:43.050 --> 00:07:45.040
now this proxy will definitely retain

158
00:07:45.040 --> 00:07:47.050
that security context information

159
00:07:47.050 --> 00:07:50.050
which is a part of the core of my runnable.

160
00:07:50.050 --> 00:07:53.000
So now, my proxy will have access to it.

161
00:07:53.000 --> 00:07:56.050
So now, when I run this proxy by means of a thread,

162
00:07:56.050 --> 00:07:58.050
let this be on another instance of the server

163
00:07:58.050 --> 00:07:59.090
or maybe when the server restarts,

164
00:07:59.090 --> 00:08:02.090
this proxy will still retain that security information.

165
00:08:02.090 --> 00:08:06.000
It will be able to access that security information, and

166
00:08:06.000 --> 00:08:09.090
that is exactly the magic that context service API spins.

167
00:08:09.090 --> 00:08:12.040
It allows you to capture that container context

168
00:08:12.040 --> 00:08:16.090
and allows you to run it at a later point in time.

169
00:08:16.090 --> 00:08:18.060
Okay, so now what we want to do

170
00:08:18.060 --> 00:08:21.030
is we're just going to save this, and from here,

171
00:08:21.030 --> 00:08:29.080
we just say return context capturing information.

172
00:08:29.080 --> 00:08:32.080
Okay, so now, let's go ahead and run this.

173
00:08:32.080 --> 00:08:37.060
Let's take the bot, go to Postman, and access

174
00:08:37.060 --> 00:08:43.000
the context service API bot, and let's see what happens.

175
00:08:43.000 --> 00:08:46.000
Yeah, so you get the context capturing information here,

176
00:08:46.000 --> 00:08:47.090
cool, but let's also see the console.

177
00:08:47.090 --> 00:08:50.090
Yeah, that's what it is, so now,

178
00:08:50.090 --> 00:08:53.070
had you just started it as a normal thread,

179
00:08:53.070 --> 00:08:56.000
then there was no guarantee that I'll get

180
00:08:56.000 --> 00:08:58.010
this information captured, but now

181
00:08:58.010 --> 00:09:00.090
that I am trying to create a proxy of my runnable,

182
00:09:00.090 --> 00:09:04.050
it is ensured that now the proxy will be able

183
00:09:04.050 --> 00:09:07.000
to access that security context information.

184
00:09:07.000 --> 00:09:09.040
So this how the context service API works.

185
00:09:09.040 --> 00:09:12.020
I iterate, this is only for advanced scenarios,

186
00:09:12.020 --> 00:09:15.000
that's why we try to keep this demo as simple as possible.

