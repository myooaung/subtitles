WEBVTT
1
00:00:00.050 --> 00:00:01.030
- [Instructor] Let's take a look

2
00:00:01.030 --> 00:00:04.030
at the Executor Service Demo that you're going to execute.

3
00:00:04.030 --> 00:00:06.030
Now, this is going to be a little longer demo,

4
00:00:06.030 --> 00:00:08.060
so I'll request you to be patient with it.

5
00:00:08.060 --> 00:00:10.050
Let's first understand what we are going to do.

6
00:00:10.050 --> 00:00:12.030
We are going to implement a use case.

7
00:00:12.030 --> 00:00:16.080
That use case is that we want to process users information.

8
00:00:16.080 --> 00:00:19.010
What are we going to do as a part of this use case?

9
00:00:19.010 --> 00:00:21.070
We are going to the read, then enter user information

10
00:00:21.070 --> 00:00:22.080
from a file.

11
00:00:22.080 --> 00:00:24.050
I'll show you the file in a minute.

12
00:00:24.050 --> 00:00:26.030
And, once you read the user information,

13
00:00:26.030 --> 00:00:28.090
you're going to process and then you're going to insert

14
00:00:28.090 --> 00:00:32.010
a record for each user in the database.

15
00:00:32.010 --> 00:00:36.060
The file of the user information will look like this.

16
00:00:36.060 --> 00:00:40.000
It's available for you in your exercise files

17
00:00:40.000 --> 00:00:43.000
under 03_04, which is this (mumbles).

18
00:00:43.000 --> 00:00:44.020
You have the email,

19
00:00:44.020 --> 00:00:45.070
you have the name of the person,

20
00:00:45.070 --> 00:00:47.010
and then the ID.

21
00:00:47.010 --> 00:00:48.000
Right?

22
00:00:48.000 --> 00:00:50.000
And, you have many such users in this file.

23
00:00:50.000 --> 00:00:52.020
So, what we're going to do is read this file,

24
00:00:52.020 --> 00:00:53.060
read every line.

25
00:00:53.060 --> 00:00:56.030
Every line represents one user record.

26
00:00:56.030 --> 00:00:57.040
Right?

27
00:00:57.040 --> 00:00:59.080
So, we take that user record, we process it.

28
00:00:59.080 --> 00:01:00.090
Process it as is.

29
00:01:00.090 --> 00:01:04.010
We'll separate out the email, the name, and the ID.

30
00:01:04.010 --> 00:01:06.070
And then, all of these three parameters

31
00:01:06.070 --> 00:01:08.040
are going to go into the database

32
00:01:08.040 --> 00:01:10.020
as a single record.

33
00:01:10.020 --> 00:01:11.060
So, let's say for Henry Cavell,

34
00:01:11.060 --> 00:01:13.070
the email will be henry@gmail.com.

35
00:01:13.070 --> 00:01:14.090
Henry Cavell is the name,

36
00:01:14.090 --> 00:01:16.090
and 1001 is the ID.

37
00:01:16.090 --> 00:01:19.020
So, there is a user table in the database,

38
00:01:19.020 --> 00:01:22.040
and we're going to insert a record for Henry Cavell

39
00:01:22.040 --> 00:01:24.010
in that database, right?

40
00:01:24.010 --> 00:01:25.080
That's the use case that we're going to

41
00:01:25.080 --> 00:01:29.030
implement for this particular Executor Service interface.

42
00:01:29.030 --> 00:01:32.000
So, let's understand what we're going to do,

43
00:01:32.000 --> 00:01:33.070
and what all components are we going to create

44
00:01:33.070 --> 00:01:34.080
in all of that.

45
00:01:34.080 --> 00:01:35.090
So, the first things is

46
00:01:35.090 --> 00:01:37.060
we're not going to write everything inside

47
00:01:37.060 --> 00:01:39.040
of the main method, that does not make sense.

48
00:01:39.040 --> 00:01:41.030
We have to have separate components.

49
00:01:41.030 --> 00:01:44.080
Each one of them doing their own responsibilities.

50
00:01:44.080 --> 00:01:45.070
Okay?

51
00:01:45.070 --> 00:01:48.090
So, let's say I will have a database operations class,

52
00:01:48.090 --> 00:01:51.030
which is going to handle all the transactions

53
00:01:51.030 --> 00:01:52.040
through the database.

54
00:01:52.040 --> 00:01:54.060
We said, right, that when we read the user information

55
00:01:54.060 --> 00:01:56.060
we will process it and insert a record.

56
00:01:56.060 --> 00:01:59.060
So, there needs to be an insert transaction.

57
00:01:59.060 --> 00:02:02.090
So, that database operation is the user Dao class.

58
00:02:02.090 --> 00:02:05.050
Dow is Data Access Object.

59
00:02:05.050 --> 00:02:06.070
So, we're going to create a class

60
00:02:06.070 --> 00:02:09.090
which is only dedicated for the database transactions.

61
00:02:09.090 --> 00:02:10.090
Okay, what's next?

62
00:02:10.090 --> 00:02:12.050
The next thing is,

63
00:02:12.050 --> 00:02:13.090
we will have a class,

64
00:02:13.090 --> 00:02:16.010
which is of course a runnable or a callable implementation,

65
00:02:16.010 --> 00:02:18.010
so that's the job of the trade,

66
00:02:18.010 --> 00:02:19.080
the task that we want to perform.

67
00:02:19.080 --> 00:02:21.010
And, what is that task?

68
00:02:21.010 --> 00:02:23.020
It is going to process that user information

69
00:02:23.020 --> 00:02:25.020
from the file, line by line.

70
00:02:25.020 --> 00:02:29.000
For every line, it is going to separate out those values,

71
00:02:29.000 --> 00:02:31.030
email, name, and ID,

72
00:02:31.030 --> 00:02:34.010
and then it will call that user Dao class

73
00:02:34.010 --> 00:02:36.080
to insert the record into the database.

74
00:02:36.080 --> 00:02:38.070
That's the job of the trade.

75
00:02:38.070 --> 00:02:39.070
Okay?

76
00:02:39.070 --> 00:02:42.020
And then, we will write out the test class.

77
00:02:42.020 --> 00:02:44.060
Now, this is the place where we will create

78
00:02:44.060 --> 00:02:46.010
that Executor Service.

79
00:02:46.010 --> 00:02:48.080
And then, for each user record,

80
00:02:48.080 --> 00:02:51.060
we are going to submit a runnable task,

81
00:02:51.060 --> 00:02:54.030
which will go and do the entire processing.

82
00:02:54.030 --> 00:02:55.020
Right?

83
00:02:55.020 --> 00:02:57.030
So, that's how we're going to structure this demo.

84
00:02:57.030 --> 00:02:58.080
It may be a little longer,

85
00:02:58.080 --> 00:03:00.030
but when you get to the end of it,

86
00:03:00.030 --> 00:03:03.000
it's definitely going to feel better.

