WEBVTT
1
00:00:00.030 --> 00:00:02.020
- [Narrator] Now let's start taking a look at the

2
00:00:02.020 --> 00:00:04.070
Executor Framework Interfaces one by one,

3
00:00:04.070 --> 00:00:07.030
and then we'll also do a demo for each one of them.

4
00:00:07.030 --> 00:00:09.080
The first among them is the executor interface,

5
00:00:09.080 --> 00:00:11.080
so that is the top most interface, and that

6
00:00:11.080 --> 00:00:14.050
is going to help you execute a submitted task

7
00:00:14.050 --> 00:00:17.070
with the single method execute.

8
00:00:17.070 --> 00:00:19.050
It is very simple to actually try

9
00:00:19.050 --> 00:00:21.070
to spawn a task with this execute method.

10
00:00:21.070 --> 00:00:23.020
We'll see that in a minute.

11
00:00:23.020 --> 00:00:25.040
It will help you submit runnable tasks,

12
00:00:25.040 --> 00:00:27.070
so whenever you have created a thread

13
00:00:27.070 --> 00:00:29.060
in the system you've said new thread,

14
00:00:29.060 --> 00:00:31.030
and then you passed in the runnable instance,

15
00:00:31.030 --> 00:00:33.030
and then you invoked the start method on it.

16
00:00:33.030 --> 00:00:35.000
So instead of that, it is very simple to

17
00:00:35.000 --> 00:00:37.060
do this job with the executor interface.

18
00:00:37.060 --> 00:00:40.090
You just have to say executor dot execute and

19
00:00:40.090 --> 00:00:43.020
parse in your runnable instance.

20
00:00:43.020 --> 00:00:44.090
Let's quickly take a look at the demo.

21
00:00:44.090 --> 00:00:47.050
Let's come back to the IDE.

22
00:00:47.050 --> 00:00:50.000
And that was the test runnable class, right?

23
00:00:50.000 --> 00:00:51.060
Where we created an instance of

24
00:00:51.060 --> 00:00:53.070
the runnable using the lamda, and then

25
00:00:53.070 --> 00:00:55.080
we created an instance of the thread class.

26
00:00:55.080 --> 00:00:57.080
Right? And then over that we said start.

27
00:00:57.080 --> 00:00:59.080
So there is no need to do all of this.

28
00:00:59.080 --> 00:01:01.030
We can actually eliminate this and now

29
00:01:01.030 --> 00:01:06.010
we can say, take a reference of the executor.

30
00:01:06.010 --> 00:01:07.080
That is the interface.

31
00:01:07.080 --> 00:01:10.040
Take a reference for it, and how

32
00:01:10.040 --> 00:01:13.010
are you going to obtain the object of the executor?

33
00:01:13.010 --> 00:01:18.030
There is an utility class called executors.

34
00:01:18.030 --> 00:01:19.040
That's the one.

35
00:01:19.040 --> 00:01:21.050
And this class has got a lot of factory

36
00:01:21.050 --> 00:01:25.030
methods which return you executor objects.

37
00:01:25.030 --> 00:01:26.090
Some I'm going to invoke one of them.

38
00:01:26.090 --> 00:01:30.040
I'm going to say new single thread executor.

39
00:01:30.040 --> 00:01:31.040
That is the one.

40
00:01:31.040 --> 00:01:32.090
And once you do this, you just have

41
00:01:32.090 --> 00:01:34.000
to go on the next line and say

42
00:01:34.000 --> 00:01:36.070
executor dot execute.

43
00:01:36.070 --> 00:01:37.070
And what do you parse?

44
00:01:37.070 --> 00:01:39.000
You parse your runnable instance.

45
00:01:39.000 --> 00:01:40.080
As simple as that.

46
00:01:40.080 --> 00:01:43.080
Okay? So now let me run this code and check quickly.

47
00:01:43.080 --> 00:01:45.040
The output is still going to be the same,

48
00:01:45.040 --> 00:01:47.050
but this time there is a minor difference.

49
00:01:47.050 --> 00:01:48.060
See what happened.

50
00:01:48.060 --> 00:01:50.080
Because we are using the executor framework,

51
00:01:50.080 --> 00:01:54.040
the name of the thread now is something like this.

52
00:01:54.040 --> 00:01:55.090
Pool one, thread one.

53
00:01:55.090 --> 00:01:57.050
So we spoke about the thing right?

54
00:01:57.050 --> 00:02:00.080
That the executor framework creates thread pools for you.

55
00:02:00.080 --> 00:02:03.050
That's how it names its threads.

56
00:02:03.050 --> 00:02:06.030
Pool one, thread one. So on and so forth.

57
00:02:06.030 --> 00:02:09.020
The other thing is, let's look in the code again.

58
00:02:09.020 --> 00:02:12.020
We said new single thread executor, which

59
00:02:12.020 --> 00:02:15.020
is exactly why it created a single thread in the system,

60
00:02:15.020 --> 00:02:19.010
and it alone handled the task of reading that file.

61
00:02:19.010 --> 00:02:21.040
That's it. That's how you can use executor.

62
00:02:21.040 --> 00:02:23.020
But it doesn't have a lot of advantages,

63
00:02:23.020 --> 00:02:25.040
and executor service is definitely

64
00:02:25.040 --> 00:02:27.050
going to be a better interface.

65
00:02:27.050 --> 00:02:28.080
Let's look at that.

66
00:02:28.080 --> 00:02:30.080
The executor service interface is of course

67
00:02:30.080 --> 00:02:33.000
a subinterface of the executor.

68
00:02:33.000 --> 00:02:35.030
And, this is the one which is responsible

69
00:02:35.030 --> 00:02:38.040
for managing the lifecycle of all individual threads,

70
00:02:38.040 --> 00:02:40.070
and also of the executor.

71
00:02:40.070 --> 00:02:42.070
The executor is also an object that you

72
00:02:42.070 --> 00:02:43.080
are creating in the system.

73
00:02:43.080 --> 00:02:46.000
So it will also have its own lifecycle.

74
00:02:46.000 --> 00:02:48.040
So executor service interface is going

75
00:02:48.040 --> 00:02:50.080
to not only manage the lifecycle of the

76
00:02:50.080 --> 00:02:54.000
threads, but also for the executor.

77
00:02:54.000 --> 00:02:58.050
Now, in the executor interface, you had the execute method.

78
00:02:58.050 --> 00:03:00.060
In the executor service interface,

79
00:03:00.060 --> 00:03:03.010
you have the submit method which is, of course,

80
00:03:03.010 --> 00:03:05.060
an extension to the execute method.

81
00:03:05.060 --> 00:03:09.070
And it accepts both, runnable and callable objects.

82
00:03:09.070 --> 00:03:12.030
Not only does the executor service interface

83
00:03:12.030 --> 00:03:15.060
give you a chance to submit an individual task,

84
00:03:15.060 --> 00:03:18.050
but it also helps you execute a collection

85
00:03:18.050 --> 00:03:21.090
of runnable or callable objects.

86
00:03:21.090 --> 00:03:23.060
And, do you remember that we talked

87
00:03:23.060 --> 00:03:26.050
about the executor framework feature,

88
00:03:26.050 --> 00:03:30.020
which allows us to capture the output of a task?

89
00:03:30.020 --> 00:03:32.020
Well, executor service is the one

90
00:03:32.020 --> 00:03:34.000
which will allow you to do that.

91
00:03:34.000 --> 00:03:35.070
It can help you return that future

92
00:03:35.070 --> 00:03:37.070
object that you were talking about.

93
00:03:37.070 --> 00:03:39.060
Additionally, it also helps you to

94
00:03:39.060 --> 00:03:42.060
completely shut down the executor service, so that a clean

95
00:03:42.060 --> 00:03:46.050
shut down is done when your application finally ends.

96
00:03:46.050 --> 00:03:48.060
Now, we're going to take a look a demo for

97
00:03:48.060 --> 00:03:50.030
executor service, and this is going to

98
00:03:50.030 --> 00:03:52.060
be a long demo, so in the next video we

99
00:03:52.060 --> 00:03:53.090
are first going to understand the use

100
00:03:53.090 --> 00:03:55.030
case that we're going to implement,

101
00:03:55.030 --> 00:03:58.000
and then we'll move on with the actual coding.

