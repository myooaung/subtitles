WEBVTT
1
00:00:00.050 --> 00:00:03.040
- [Instructor] Now let's talk about the ThreadFactory API.

2
00:00:03.040 --> 00:00:05.040
Executor API by default uses a

3
00:00:05.040 --> 00:00:08.000
Thread factory implementation present inside it

4
00:00:08.000 --> 00:00:10.030
to create threads for the application.

5
00:00:10.030 --> 00:00:11.090
Let's recollect our discussion.

6
00:00:11.090 --> 00:00:15.090
Let me open the Test Executors class

7
00:00:15.090 --> 00:00:18.040
and if you recollect our discussion on line number 30,

8
00:00:18.040 --> 00:00:21.020
we had used this factory method, new Fixed Thread Pool

9
00:00:21.020 --> 00:00:23.090
in order to get the Executor Service object.

10
00:00:23.090 --> 00:00:25.090
Now, since you have not mentioned

11
00:00:25.090 --> 00:00:28.070
any kind of Thread factory reference here,

12
00:00:28.070 --> 00:00:30.000
by default it is falling back

13
00:00:30.000 --> 00:00:32.040
to the default implementation on Thread factory.

14
00:00:32.040 --> 00:00:34.080
So, the Thread factory's going to manufacture threads

15
00:00:34.080 --> 00:00:36.070
and insert them into the pool

16
00:00:36.070 --> 00:00:39.010
and those threads are going to be reused.

17
00:00:39.010 --> 00:00:41.030
So, whenever you use the executor's default

18
00:00:41.030 --> 00:00:43.060
Thread factory implementation,

19
00:00:43.060 --> 00:00:45.050
it will create threads for you,

20
00:00:45.050 --> 00:00:48.010
all of which are in the same thread group

21
00:00:48.010 --> 00:00:50.090
with the same non-priority priority.

22
00:00:50.090 --> 00:00:53.050
Non-priority is basically number five

23
00:00:53.050 --> 00:00:55.070
and a non-demand stasis.

24
00:00:55.070 --> 00:00:58.010
And whenever you have used the fixed thread pool,

25
00:00:58.010 --> 00:00:59.070
or let's say, the cached pool,

26
00:00:59.070 --> 00:01:01.050
or the single thread pool,

27
00:01:01.050 --> 00:01:04.020
you have seen that the names of the threads appear as

28
00:01:04.020 --> 00:01:08.030
pool one, thread one, pool one, thread two,

29
00:01:08.030 --> 00:01:10.000
pool one, thread three,

30
00:01:10.000 --> 00:01:11.080
and so on and so forth.

31
00:01:11.080 --> 00:01:14.080
Now, the problem is that in certain cases,

32
00:01:14.080 --> 00:01:16.030
let's say if you're in debugging

33
00:01:16.030 --> 00:01:19.030
or profiling when you want to investigate the cause

34
00:01:19.030 --> 00:01:21.080
of certain issues in the log files and all,

35
00:01:21.080 --> 00:01:24.050
you really do not want to see these kind of names.

36
00:01:24.050 --> 00:01:25.080
Pool one, thread one

37
00:01:25.080 --> 00:01:27.090
because they really don't signify anything.

38
00:01:27.090 --> 00:01:30.010
They are not really connected to the kind of job

39
00:01:30.010 --> 00:01:31.030
that they're doing.

40
00:01:31.030 --> 00:01:33.050
So, you may have a need to actually have

41
00:01:33.050 --> 00:01:35.030
custom names for your threads

42
00:01:35.030 --> 00:01:37.040
that you decide as apart of some convention

43
00:01:37.040 --> 00:01:40.010
that you want to follow for the application.

44
00:01:40.010 --> 00:01:41.020
So, there is a way

45
00:01:41.020 --> 00:01:44.030
to actually create your own thread factory.

46
00:01:44.030 --> 00:01:46.090
So, Custom Thread factory is created in certain instances

47
00:01:46.090 --> 00:01:48.080
where you wanna give custom names

48
00:01:48.080 --> 00:01:50.090
or maybe set your own priorities

49
00:01:50.090 --> 00:01:55.010
or maybe try to decide the demand stasis of each thread.

50
00:01:55.010 --> 00:01:55.090
Right?

51
00:01:55.090 --> 00:01:58.070
So, once you create a Custom Thread factory,

52
00:01:58.070 --> 00:02:02.080
then you can go back to your Executors utility

53
00:02:02.080 --> 00:02:05.050
and instead of saying new Fixed Thread Pool,

54
00:02:05.050 --> 00:02:08.040
you can actually use the overloaded version of this,

55
00:02:08.040 --> 00:02:10.060
which is demanding the number of threads

56
00:02:10.060 --> 00:02:13.030
and taking the Thread factory instance from you.

57
00:02:13.030 --> 00:02:15.040
So, this Thread factory instance now

58
00:02:15.040 --> 00:02:17.030
will be your Custom Thread factory

59
00:02:17.030 --> 00:02:19.090
that you'll have to provide to this method.

60
00:02:19.090 --> 00:02:21.030
This essentially means that

61
00:02:21.030 --> 00:02:25.010
now whenever you get the pool out of the executors,

62
00:02:25.010 --> 00:02:28.060
it is going to contain threads from your Thread factory.

63
00:02:28.060 --> 00:02:29.040
Right?

64
00:02:29.040 --> 00:02:30.050
So, that's how this works.

65
00:02:30.050 --> 00:02:34.000
We will take a look at the demo in the next video.

