WEBVTT
1
00:00:00.050 --> 00:00:02.090
- [Instructor] Now the next step is to define a class

2
00:00:02.090 --> 00:00:06.020
UserProcessor which will implement the callable or runnable.

3
00:00:06.020 --> 00:00:07.090
So the job of the thread now, right,

4
00:00:07.090 --> 00:00:09.070
that's the big step that we have to do.

5
00:00:09.070 --> 00:00:11.040
We have to create this class UserProcessor,

6
00:00:11.040 --> 00:00:13.050
which will implement either of the interfaces,

7
00:00:13.050 --> 00:00:17.010
callable or runnable, and the job of this task will be

8
00:00:17.010 --> 00:00:20.050
to process every user record, and call the dao

9
00:00:20.050 --> 00:00:22.040
to insert the record in the database.

10
00:00:22.040 --> 00:00:25.050
So, let's go to the IDE, and let's create

11
00:00:25.050 --> 00:00:28.080
a class and the runnables folder.

12
00:00:28.080 --> 00:00:32.000
Let's call it UserProcessor.

13
00:00:32.000 --> 00:00:33.070
Now the naming convention could be of your choice,

14
00:00:33.070 --> 00:00:37.060
you can either call it UserProcessor, or UserTask, or

15
00:00:37.060 --> 00:00:41.030
UserRunnable, any which way, so let's click on Finish,

16
00:00:41.030 --> 00:00:48.030
and let's make this implement the callable interface.

17
00:00:48.030 --> 00:00:52.030
And let's return a value of the integer type.

18
00:00:52.030 --> 00:00:54.080
So in the previous demo, we had returned the number of rows

19
00:00:54.080 --> 00:00:56.090
that got inserted into the database, we'll return

20
00:00:56.090 --> 00:01:00.080
that same integer back from the processor as well, OK?

21
00:01:00.080 --> 00:01:02.050
Now what we need to do in this class,

22
00:01:02.050 --> 00:01:04.090
we actually need a couple of things.

23
00:01:04.090 --> 00:01:07.070
One is to process the record from the file,

24
00:01:07.070 --> 00:01:11.010
and then we have to insert that user record in the database.

25
00:01:11.010 --> 00:01:13.080
So let's go ahead and start doing that.

26
00:01:13.080 --> 00:01:15.060
I'll take two instance variables here,

27
00:01:15.060 --> 00:01:20.020
one is the userRecord, the line that is coming in

28
00:01:20.020 --> 00:01:22.000
from the file, each line,

29
00:01:22.000 --> 00:01:26.000
and we need an instance of the dao,

30
00:01:26.000 --> 00:01:28.010
because we also need to access dao

31
00:01:28.010 --> 00:01:29.090
in order to insert the record.

32
00:01:29.090 --> 00:01:34.060
Let's create a constructor which will instantiate and

33
00:01:34.060 --> 00:01:38.020
provide values to these two instance variables, right?

34
00:01:38.020 --> 00:01:41.040
And the interface is callable, which means we'll have to

35
00:01:41.040 --> 00:01:44.030
implement the call method, so let's quickly double-click

36
00:01:44.030 --> 00:01:48.010
on line 15, and implement all the abstract methods,

37
00:01:48.010 --> 00:01:50.050
so we're going to get rid of the default implementation,

38
00:01:50.050 --> 00:01:53.040
we do not want that.

39
00:01:53.040 --> 00:01:57.030
OK, so two things, one is process the user record.

40
00:01:57.030 --> 00:02:00.060
Now every user record is a line which is going to have

41
00:02:00.060 --> 00:02:03.000
Comma Separated Values, so we're going to use

42
00:02:03.000 --> 00:02:07.000
StringTokenizer to get all those values separated.

43
00:02:07.000 --> 00:02:11.070
So we're instantiate StringTokenizer,

44
00:02:11.070 --> 00:02:14.040
and we're going to use this overloaded version,

45
00:02:14.040 --> 00:02:17.000
which will take the user record, that full line,

46
00:02:17.000 --> 00:02:18.080
and the second will be the delimiter,

47
00:02:18.080 --> 00:02:22.000
which in our case, is the comma sign.

48
00:02:22.000 --> 00:02:25.080
OK, next let's create a reference to the user bean,

49
00:02:25.080 --> 00:02:28.050
because the separated values will have to be filled out

50
00:02:28.050 --> 00:02:32.050
in the user object, so let's create a reference for the

51
00:02:32.050 --> 00:02:36.070
user bean, and set it to null initially.

52
00:02:36.070 --> 00:02:42.030
Once that's done, let's put a while loop on the tokenizer,

53
00:02:42.030 --> 00:02:47.060
say tokenizer dot has more tokens, what are we going to do?

54
00:02:47.060 --> 00:02:52.000
We are going to say user and instantiate it

55
00:02:52.000 --> 00:02:55.040
to a user object, then we are going to say

56
00:02:55.040 --> 00:02:58.010
user dot set email address,

57
00:02:58.010 --> 00:03:01.000
that's the first token coming out of that line,

58
00:03:01.000 --> 00:03:05.050
so I'm going to say tokenizer dot next token.

59
00:03:05.050 --> 00:03:09.020
Similarly, the next token is the name, so I have to set

60
00:03:09.020 --> 00:03:11.030
name to the user bean, going to say

61
00:03:11.030 --> 00:03:15.090
tokenizer dot next token.

62
00:03:15.090 --> 00:03:19.080
And then we have the ID, so set ID.

63
00:03:19.080 --> 00:03:22.090
Now this is an integer field, so we'll have to employ the

64
00:03:22.090 --> 00:03:26.030
interger dot value method,

65
00:03:26.030 --> 00:03:29.080
so that we can convert the string that has come in

66
00:03:29.080 --> 00:03:34.060
into the int value, so let's access that

67
00:03:34.060 --> 00:03:37.060
tokenizer dot next token.

68
00:03:37.060 --> 00:03:38.090
Yeah, there we go.

69
00:03:38.090 --> 00:03:40.090
So you have the user object created,

70
00:03:40.090 --> 00:03:43.060
and we've set all the three fields that we got separated

71
00:03:43.060 --> 00:03:47.030
out from the line that was coming in, right?

72
00:03:47.030 --> 00:03:50.070
And once this is done, we have to take hold of the dao,

73
00:03:50.070 --> 00:03:53.020
and call the save user method, and pass that

74
00:03:53.020 --> 00:03:55.070
user bean as an argument.

75
00:03:55.070 --> 00:03:58.010
OK, let's do one more thing.

76
00:03:58.010 --> 00:04:01.070
Right after the method definition on line number 29,

77
00:04:01.070 --> 00:04:04.010
I'm going to take a rows variable again here,

78
00:04:04.010 --> 00:04:08.010
which we set to zero initially, and then on line number 37,

79
00:04:08.010 --> 00:04:11.040
I'm going to take the output of the method of the dao call

80
00:04:11.040 --> 00:04:14.010
into that row's variable, and once that's done,

81
00:04:14.010 --> 00:04:19.040
then we just have to go and return the row's variable.

82
00:04:19.040 --> 00:04:21.050
OK, let's do one more thing.

83
00:04:21.050 --> 00:04:24.000
In order to understand which thread came in,

84
00:04:24.000 --> 00:04:26.010
we'll print the name of the thread the way we have done

85
00:04:26.010 --> 00:04:29.000
in the previous demos, so on line number 30, I'm going to

86
00:04:29.000 --> 00:04:32.000
insert a sys out, and what is the sys out going to be?

87
00:04:32.000 --> 00:04:34.040
It's again going to give me the name of the thread via that

88
00:04:34.040 --> 00:04:36.070
static method under the thread class,

89
00:04:36.070 --> 00:04:40.090
chain the getName api on it, and we'll say,

90
00:04:40.090 --> 00:04:48.050
processing record for and we will append that user record

91
00:04:48.050 --> 00:04:50.080
that is coming in for this thread, right?

92
00:04:50.080 --> 00:04:54.040
So understand this, that every thread is going to be

93
00:04:54.040 --> 00:04:57.000
doing the job of inserting one user record,

94
00:04:57.000 --> 00:04:59.020
so there is one thread per user record,

95
00:04:59.020 --> 00:05:02.030
and that's exactly why on line number 19,

96
00:05:02.030 --> 00:05:04.030
we actually took an instance variable for it,

97
00:05:04.030 --> 00:05:07.040
we want to associate one user record per

98
00:05:07.040 --> 00:05:11.010
UserProcessor runnable, or callable, right?

99
00:05:11.010 --> 00:05:13.060
OK, so we have done a couple of things,

100
00:05:13.060 --> 00:05:16.080
that's we are trying to process the user information

101
00:05:16.080 --> 00:05:20.000
by the string tokenizer, and the next step is

102
00:05:20.000 --> 00:05:23.030
we are calling the dao and making sure that the

103
00:05:23.030 --> 00:05:25.060
user information that we processed is getting

104
00:05:25.060 --> 00:05:28.060
saved into the database record, right?

105
00:05:28.060 --> 00:05:31.000
OK, the next step's in the next video.

