WEBVTT
1
00:00:00.050 --> 00:00:02.000
- [Instructor] Before we get into the demos

2
00:00:02.000 --> 00:00:03.070
for the Managed Executer Service

3
00:00:03.070 --> 00:00:05.050
or Managed Scheduled Executer Service

4
00:00:05.050 --> 00:00:07.010
and lead us to the concurrency APIs,

5
00:00:07.010 --> 00:00:09.040
let us take a quick look at some

6
00:00:09.040 --> 00:00:11.070
of the Java Enterprise concepts

7
00:00:11.070 --> 00:00:14.090
that we need to be aware of before we go further.

8
00:00:14.090 --> 00:00:16.030
Now, of course if you need more information

9
00:00:16.030 --> 00:00:18.040
about these concepts you can take a course

10
00:00:18.040 --> 00:00:20.050
on LinkedIn Learning about it,

11
00:00:20.050 --> 00:00:23.070
but as a part of this course, let's quickly revise them.

12
00:00:23.070 --> 00:00:26.030
The first one is JNDI.

13
00:00:26.030 --> 00:00:30.050
Java Naming and Directory Interface is an API in Java

14
00:00:30.050 --> 00:00:32.080
to access data tree services.

15
00:00:32.080 --> 00:00:34.030
So, what does this do?

16
00:00:34.030 --> 00:00:37.060
It'll help you to look up data and resources

17
00:00:37.060 --> 00:00:42.010
by means of a name and that name is a JNDI name.

18
00:00:42.010 --> 00:00:45.030
Now, like all the other Java APIs,

19
00:00:45.030 --> 00:00:46.070
this one is also independent

20
00:00:46.070 --> 00:00:49.040
of the underlying implementation.

21
00:00:49.040 --> 00:00:52.070
When you talk about the resources and data look-up,

22
00:00:52.070 --> 00:00:57.030
these can come from either a FLAC file or a database,

23
00:00:57.030 --> 00:01:00.040
or maybe even the application server.

24
00:01:00.040 --> 00:01:03.010
Now, the Java Remote Method Invocation

25
00:01:03.010 --> 00:01:07.060
and the JAVA Enterprise Edition APIs use JNDI extensively

26
00:01:07.060 --> 00:01:10.090
to look up objects over a network.

27
00:01:10.090 --> 00:01:13.060
Very common directory services like LDAP,

28
00:01:13.060 --> 00:01:18.010
gold-bar, DNS, et cetera can be accessed through JNDI.

29
00:01:18.010 --> 00:01:19.080
Now when you want to do JNDI look-up

30
00:01:19.080 --> 00:01:22.090
in your RESTful beans or maybe in your EJB classes,

31
00:01:22.090 --> 00:01:24.060
then there is an API available for it

32
00:01:24.060 --> 00:01:26.030
which is initial context which comes from

33
00:01:26.030 --> 00:01:28.070
the Java start naming package.

34
00:01:28.070 --> 00:01:31.010
We will look at how this is done in our demos,

35
00:01:31.010 --> 00:01:32.090
but this is just to give you an idea

36
00:01:32.090 --> 00:01:34.070
that when you do JNDI look-up you will need

37
00:01:34.070 --> 00:01:37.040
that initial context API.

38
00:01:37.040 --> 00:01:40.030
The next term is Stateless session bean.

39
00:01:40.030 --> 00:01:43.000
This is a type of an Enterprise Java bean

40
00:01:43.000 --> 00:01:46.000
which is used to perform independent operations.

41
00:01:46.000 --> 00:01:48.020
As the name suggests, it is stateless

42
00:01:48.020 --> 00:01:52.030
which means it does not conserve any state of the client.

43
00:01:52.030 --> 00:01:55.030
However, yes, it can of course, have its

44
00:01:55.030 --> 00:01:57.040
own state present with it.

45
00:01:57.040 --> 00:01:59.010
Now this is the session bean which you

46
00:01:59.010 --> 00:02:01.000
can add a lot of business methods

47
00:02:01.000 --> 00:02:03.000
which do database interactions with you

48
00:02:03.000 --> 00:02:06.010
or any other kind of business logic for you.

49
00:02:06.010 --> 00:02:07.090
The application server often creates

50
00:02:07.090 --> 00:02:10.070
a pool of such stateless session beans

51
00:02:10.070 --> 00:02:14.020
so that it can do the request processing operations

52
00:02:14.020 --> 00:02:16.040
on those business methods.

53
00:02:16.040 --> 00:02:19.040
The next term is Global transactions.

54
00:02:19.040 --> 00:02:21.030
When you have a distributed environment,

55
00:02:21.030 --> 00:02:24.010
you may have multiple resource managers

56
00:02:24.010 --> 00:02:26.090
on which you are trying to do transactions.

57
00:02:26.090 --> 00:02:29.030
So those multiple resources could be databases

58
00:02:29.030 --> 00:02:33.010
or GMS queues or application servers, et cetera.

59
00:02:33.010 --> 00:02:36.010
And whenever you do this distributed transaction processing,

60
00:02:36.010 --> 00:02:37.070
it is absolutely important that

61
00:02:37.070 --> 00:02:41.050
the data integrity is ensured.

62
00:02:41.050 --> 00:02:44.060
Now XA or extended architecture,

63
00:02:44.060 --> 00:02:47.040
is an open standard which is defined

64
00:02:47.040 --> 00:02:50.040
for executing a global transaction that accesses

65
00:02:50.040 --> 00:02:53.040
more than one backend data tool.

66
00:02:53.040 --> 00:02:55.030
This is the one which will help you

67
00:02:55.030 --> 00:02:58.040
define the interactions between the transaction manager

68
00:02:58.040 --> 00:02:59.090
and the resource manager.

69
00:02:59.090 --> 00:03:02.060
The goal of XA is to allow multiple resources

70
00:03:02.060 --> 00:03:06.080
like C-de-W-eses, GMS queues, transactional caches, etc.,

71
00:03:06.080 --> 00:03:10.040
to be accessed within the same transaction

72
00:03:10.040 --> 00:03:14.080
thereby preserving the asset properties across applications.

73
00:03:14.080 --> 00:03:17.030
The database that we are using is mysql for this course

74
00:03:17.030 --> 00:03:20.090
and mysql driver does have the X series source

75
00:03:20.090 --> 00:03:22.070
available so you do not have to worry about it.

76
00:03:22.070 --> 00:03:25.080
It is present right there in your driver Java file.

77
00:03:25.080 --> 00:03:28.070
And the last one is Java transaction API.

78
00:03:28.070 --> 00:03:30.040
Now this is a very famous API and it is

79
00:03:30.040 --> 00:03:32.040
basically a list of interfaces

80
00:03:32.040 --> 00:03:34.030
between a transaction manager and

81
00:03:34.030 --> 00:03:36.040
the parties involved in the transaction.

82
00:03:36.040 --> 00:03:39.010
This transaction API has specifications to perform

83
00:03:39.010 --> 00:03:42.000
transactions over a distributed network.

84
00:03:42.000 --> 00:03:44.020
The parties involved in transaction processing

85
00:03:44.020 --> 00:03:47.030
will be the resource manager, the application server,

86
00:03:47.030 --> 00:03:49.090
and of course, the application code.

87
00:03:49.090 --> 00:03:52.000
So JPA is going to specify the interface

88
00:03:52.000 --> 00:03:55.020
between the transaction manager and all of these parties

89
00:03:55.020 --> 00:03:57.090
and gives you a way to do transaction processing.

90
00:03:57.090 --> 00:04:00.030
Going further, we are going to use these concepts

91
00:04:00.030 --> 00:04:01.090
to implement the demos,

92
00:04:01.090 --> 00:04:04.000
which is why this revision was necessary.

