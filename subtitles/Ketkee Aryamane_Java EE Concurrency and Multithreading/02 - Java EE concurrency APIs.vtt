WEBVTT
1
00:00:00.010 --> 00:00:01.090
- [Narrator] So now let us take a look

2
00:00:01.090 --> 00:00:04.080
at the Java Enterprise Concurrency API's.

3
00:00:04.080 --> 00:00:07.060
We already know that Executor, ExecutorService,

4
00:00:07.060 --> 00:00:09.060
and ScheduledExecutorService come

5
00:00:09.060 --> 00:00:11.070
from the Standard Edition platform.

6
00:00:11.070 --> 00:00:14.020
We have seen demos for that in our previous videos.

7
00:00:14.020 --> 00:00:16.060
Now when we look at the Enterprise Edition

8
00:00:16.060 --> 00:00:19.010
Concurrency Utilities, let's take a look.

9
00:00:19.010 --> 00:00:21.040
There is ManagedExecutorService,

10
00:00:21.040 --> 00:00:23.070
which is an extension to the ExecutorService

11
00:00:23.070 --> 00:00:25.070
and basically it is a managed version

12
00:00:25.070 --> 00:00:27.040
of the ExecutorService.

13
00:00:27.040 --> 00:00:29.080
Similarly you have ManagedScheduledExecutorService,

14
00:00:29.080 --> 00:00:32.030
which is now is going to be a managed version

15
00:00:32.030 --> 00:00:34.040
of ScheduledExecutorService.

16
00:00:34.040 --> 00:00:36.000
Then we had seen the ThreadFactory

17
00:00:36.000 --> 00:00:37.030
in the Standard Edition.

18
00:00:37.030 --> 00:00:39.000
So ManagedThreadFactory is a managed version

19
00:00:39.000 --> 00:00:40.010
of ThreadFactory.

20
00:00:40.010 --> 00:00:41.060
And then this ContextService,

21
00:00:41.060 --> 00:00:43.020
which is a very interesting API,

22
00:00:43.020 --> 00:00:45.030
utilized to create contextual proxies

23
00:00:45.030 --> 00:00:47.070
in the Enterprise application.

24
00:00:47.070 --> 00:00:51.080
All of these four API's that you see on the slide

25
00:00:51.080 --> 00:00:54.050
which are marked with the dotted blue sign

26
00:00:54.050 --> 00:00:58.020
form a part of the Enterprise Edition concurrency utilities.

27
00:00:58.020 --> 00:01:02.080
They are a part of the javax.enterprise.concurrent package.

28
00:01:02.080 --> 00:01:05.010
So when you say ManagedExecutorService

29
00:01:05.010 --> 00:01:07.020
it is going to help you submit tasks,

30
00:01:07.020 --> 00:01:08.060
runnable or callable.

31
00:01:08.060 --> 00:01:10.070
Similarly, ManagedScheduledExecutorService

32
00:01:10.070 --> 00:01:12.070
is going to help you submit tasks which are

33
00:01:12.070 --> 00:01:14.070
to be scheduled at regular intervals

34
00:01:14.070 --> 00:01:17.090
or with certain definite delays, et cetera.

35
00:01:17.090 --> 00:01:20.090
ManagedThreadFactory will give you a way

36
00:01:20.090 --> 00:01:24.020
to have the threads created for your pools.

37
00:01:24.020 --> 00:01:26.030
Context service is for contextual proxies.

38
00:01:26.030 --> 00:01:28.020
We look at each one of them in detail,

39
00:01:28.020 --> 00:01:30.080
and also where they move, for each one of them.

40
00:01:30.080 --> 00:01:33.040
But before that, let us understand that

41
00:01:33.040 --> 00:01:36.040
now that you have these four API's with you,

42
00:01:36.040 --> 00:01:39.070
as an application, what are my responsibilities?

43
00:01:39.070 --> 00:01:42.020
The first one is: I will have to find out ways

44
00:01:42.020 --> 00:01:45.080
to use environment references of these managed resources.

45
00:01:45.080 --> 00:01:48.050
Let's say today I want to use ManagedExecutorService

46
00:01:48.050 --> 00:01:50.040
to submit a particular task.

47
00:01:50.040 --> 00:01:53.000
Then I need to understand: How do I take a reference

48
00:01:53.000 --> 00:01:55.060
of that resource in my Enterprise JavaBean,

49
00:01:55.060 --> 00:01:58.050
or servlet, or RESTful API?

50
00:01:58.050 --> 00:01:59.030
Right?

51
00:01:59.030 --> 00:02:00.040
There are two ways.

52
00:02:00.040 --> 00:02:03.030
You either declare them in your deployment descriptor,

53
00:02:03.030 --> 00:02:05.080
or the second is you look it up in the container

54
00:02:05.080 --> 00:02:07.060
or the environment or the network

55
00:02:07.060 --> 00:02:11.010
through Java Naming and Directory Interface API.

56
00:02:11.010 --> 00:02:14.090
Java Naming and Directory Interfaces is an API in Java

57
00:02:14.090 --> 00:02:17.090
which is used to access directory services.

58
00:02:17.090 --> 00:02:21.070
Or you can simply do dependency injection

59
00:02:21.070 --> 00:02:24.020
by the Resource annotation.

60
00:02:24.020 --> 00:02:26.090
So you inject these resources as dependencies

61
00:02:26.090 --> 00:02:29.050
in all your application components.

62
00:02:29.050 --> 00:02:31.070
Now you'll of course have to define your task

63
00:02:31.070 --> 00:02:34.000
because we're trying to spawn asynchronous jobs

64
00:02:34.000 --> 00:02:36.040
so these tasks will be defined as implementations

65
00:02:36.040 --> 00:02:37.070
of callable and runnable.

66
00:02:37.070 --> 00:02:39.000
Nothing changes that.

67
00:02:39.000 --> 00:02:41.000
If you want a return value, you use callable.

68
00:02:41.000 --> 00:02:43.020
Else, you stick to runnable.

69
00:02:43.020 --> 00:02:44.070
Additionally, tasks could also

70
00:02:44.070 --> 00:02:47.080
optionally implement ManagedTask

71
00:02:47.080 --> 00:02:50.050
and even register ManagedTaskListener

72
00:02:50.050 --> 00:02:53.050
to receive lifecycle notifications.

73
00:02:53.050 --> 00:02:56.070
Now what is this ManagedTask interface?

74
00:02:56.070 --> 00:02:59.020
ManagedTask interface is actually used

75
00:02:59.020 --> 00:03:03.020
to provide identifying information about the task or maybe

76
00:03:03.020 --> 00:03:05.090
to provide additional execution properties.

77
00:03:05.090 --> 00:03:08.000
Let's say for example I want to provide

78
00:03:08.000 --> 00:03:10.000
an additional execution property like,

79
00:03:10.000 --> 00:03:12.060
I want to provide a hint about whether the task is going

80
00:03:12.060 --> 00:03:14.090
to take a longer time to complete.

81
00:03:14.090 --> 00:03:17.090
Or maybe I really want to have another execution property

82
00:03:17.090 --> 00:03:20.070
which specifies under which transaction

83
00:03:20.070 --> 00:03:23.020
should this current task be executed in?

84
00:03:23.020 --> 00:03:25.060
So any kind of additional execution properties

85
00:03:25.060 --> 00:03:29.040
could be set via the ManagedTask interface.

86
00:03:29.040 --> 00:03:33.000
ManagedTaskListener is basically a listener class

87
00:03:33.000 --> 00:03:36.060
used to receive lifecycle notifications - about what?

88
00:03:36.060 --> 00:03:39.030
This listener is going to track the state

89
00:03:39.030 --> 00:03:41.040
of your task's future.

90
00:03:41.040 --> 00:03:43.010
So whenever the state changes, you

91
00:03:43.010 --> 00:03:45.080
can configure this listener and whatever you want

92
00:03:45.080 --> 00:03:47.050
as a part of the processing.

93
00:03:47.050 --> 00:03:49.080
These are a little advanced topics and we'll have

94
00:03:49.080 --> 00:03:52.000
advanced use cases attached with them.

