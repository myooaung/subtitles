WEBVTT
1
00:00:00.070 --> 00:00:02.030
- [Narrator] Now that we have understood the thread

2
00:00:02.030 --> 00:00:03.080
and the runnable APIs let us understand

3
00:00:03.080 --> 00:00:06.040
the limitations that come along with it.

4
00:00:06.040 --> 00:00:07.090
The thread or runnable APIs are

5
00:00:07.090 --> 00:00:11.000
sufficient for low-level and basic tasks.

6
00:00:11.000 --> 00:00:13.050
And don't forget, as a developer, you have

7
00:00:13.050 --> 00:00:17.020
to create the instances of the threads and start them off.

8
00:00:17.020 --> 00:00:18.080
So as a developer you are responsible

9
00:00:18.080 --> 00:00:21.010
for creating and managing the threads

10
00:00:21.010 --> 00:00:24.010
in the system or the application.

11
00:00:24.010 --> 00:00:26.030
All of this logic of creation and management

12
00:00:26.030 --> 00:00:29.000
of threads is in addition to the business logic

13
00:00:29.000 --> 00:00:32.080
of the application that you anyway are supposed to code.

14
00:00:32.080 --> 00:00:35.050
Now, the multi-threading capability offers you

15
00:00:35.050 --> 00:00:39.060
a chance to utilize the cores of the CPU effectively.

16
00:00:39.060 --> 00:00:43.010
However, in order to support this completely we also

17
00:00:43.010 --> 00:00:47.070
need to write an application with solid parallelism logic.

18
00:00:47.070 --> 00:00:49.070
And there are a lot of factors that you

19
00:00:49.070 --> 00:00:51.060
need to take into consideration when

20
00:00:51.060 --> 00:00:53.070
you actually write out such logic.

21
00:00:53.070 --> 00:00:55.070
For example, what are the jobs

22
00:00:55.070 --> 00:00:58.000
that should be executed by threads?

23
00:00:58.000 --> 00:01:00.050
When is a thread supposed to start its execution?

24
00:01:00.050 --> 00:01:03.080
What happens when there is an error in the execution?

25
00:01:03.080 --> 00:01:06.090
What happens if there is an interruption in the execution?

26
00:01:06.090 --> 00:01:09.020
How do I make sure that all the threads of my system

27
00:01:09.020 --> 00:01:13.020
are completely terminated when my application shuts down?

28
00:01:13.020 --> 00:01:16.040
And so on and so forth, the list is endless.

29
00:01:16.040 --> 00:01:17.070
Difficult isn't it?

30
00:01:17.070 --> 00:01:20.090
And all of this logic in addition to that business logic.

31
00:01:20.090 --> 00:01:22.090
Too much of code to write.

32
00:01:22.090 --> 00:01:25.000
As the complexity of your system grows,

33
00:01:25.000 --> 00:01:26.040
the number of users grow.

34
00:01:26.040 --> 00:01:29.010
For a large-scale application, thread creation

35
00:01:29.010 --> 00:01:31.020
and management becomes even further

36
00:01:31.020 --> 00:01:34.070
tedious with these very basic APIs.

37
00:01:34.070 --> 00:01:36.090
Moreover, you could have additional requirements

38
00:01:36.090 --> 00:01:39.050
in your application, like for example,

39
00:01:39.050 --> 00:01:41.080
you want to schedule certain jobs in your

40
00:01:41.080 --> 00:01:44.040
application at certain regular intervals,

41
00:01:44.040 --> 00:01:46.070
or maybe with a definite delay.

42
00:01:46.070 --> 00:01:48.020
So for all of these requirements you'll

43
00:01:48.020 --> 00:01:50.000
have to code your own logic.

44
00:01:50.000 --> 00:01:51.060
Well that's too much code to write, and it's too

45
00:01:51.060 --> 00:01:53.080
difficult to implement all of this isn't it.

46
00:01:53.080 --> 00:01:56.010
And that is why to overcome these limitations

47
00:01:56.010 --> 00:01:58.060
we actually have that high level of APIs

48
00:01:58.060 --> 00:02:01.010
as per the standard edition platform,

49
00:02:01.010 --> 00:02:03.040
which is the Executor Framework.

50
00:02:03.040 --> 00:02:04.090
So let's understand that.

51
00:02:04.090 --> 00:02:06.080
The Executor Framework provides you

52
00:02:06.080 --> 00:02:10.060
standardized invocation, scheduling, execution,

53
00:02:10.060 --> 00:02:15.010
and control of asynchronous tasks in parallel threads.

54
00:02:15.010 --> 00:02:17.060
It is composed of classes and interfaces, of course,

55
00:02:17.060 --> 00:02:19.060
that provide the entire logic

56
00:02:19.060 --> 00:02:22.030
for creation and management of threads.

57
00:02:22.030 --> 00:02:27.010
It was released as JAVA specification request JSR 166,

58
00:02:27.010 --> 00:02:31.050
as per the JAVA standard edition version 5 platform.

59
00:02:31.050 --> 00:02:33.080
In the next video we're going to take

60
00:02:33.080 --> 00:02:35.070
a look at the features of the framework,

61
00:02:35.070 --> 00:02:37.040
and then we'll understand how are the

62
00:02:37.040 --> 00:02:39.070
limitations going to be overcome

63
00:02:39.070 --> 00:02:42.000
by the framework that we talked about right now.

