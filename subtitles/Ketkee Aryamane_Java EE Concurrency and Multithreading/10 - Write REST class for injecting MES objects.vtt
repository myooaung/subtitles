WEBVTT
1
00:00:00.050 --> 00:00:03.070
- [Narrator] Now let's create the

2
00:00:03.070 --> 00:00:04.080
RESTful bean Report Resource.

3
00:00:04.080 --> 00:00:05.070
So, let's go to the IDE,

4
00:00:05.070 --> 00:00:10.040
and under the rest package, that's the one.

5
00:00:10.040 --> 00:00:16.030
We want to create a class and call it 'ReportsResource'.

6
00:00:16.030 --> 00:00:18.060
I have not named it right, so I'm going to correct

7
00:00:18.060 --> 00:00:21.070
the spelling right away.

8
00:00:21.070 --> 00:00:26.030
I'm going to say, 'Resource'.

9
00:00:26.030 --> 00:00:31.010
Okay, now this has to be, of course,

10
00:00:31.010 --> 00:00:34.030
given the 'Path' annotation to specify that you are right

11
00:00:34.030 --> 00:00:35.090
for this RESTful bean.

12
00:00:35.090 --> 00:00:40.060
So, let's say, 'reports. That's the URA.

13
00:00:40.060 --> 00:00:41.070
Let's see the next step.

14
00:00:41.070 --> 00:00:45.010
Inject the ManagedExecutorService object

15
00:00:45.010 --> 00:00:48.050
in the Resource class through the Resource annotation.

16
00:00:48.050 --> 00:00:51.070
So we know that, if you want to get ahold of the managed

17
00:00:51.070 --> 00:00:55.000
executor, or managing tool executor, or manage the factory,

18
00:00:55.000 --> 00:00:57.050
or contact service. Any of these contact IPAs.

19
00:00:57.050 --> 00:01:01.060
You can have a GNDA look-up, or you can inject them while

20
00:01:01.060 --> 00:01:02.070
you do the resource annotation.

21
00:01:02.070 --> 00:01:05.090
So I'm going to show you both the ways right now.

22
00:01:05.090 --> 00:01:10.000
Let's go there and, let's see, you have a instructor of this

23
00:01:10.000 --> 00:01:12.090
class, ReportResource.

24
00:01:12.090 --> 00:01:16.040
So, how do you do a JNDI lookup?

25
00:01:16.040 --> 00:01:17.050
Let's look at that first and

26
00:01:17.050 --> 00:01:19.040
then we'll go to the resource annotation.

27
00:01:19.040 --> 00:01:22.060
You have to take the whole of any InitialContext area,

28
00:01:22.060 --> 00:01:25.060
which comes from the JavaExportNamingPackage.

29
00:01:25.060 --> 00:01:28.050
This this is all the Java API for the services you're

30
00:01:28.050 --> 00:01:29.070
talking about.

31
00:01:29.070 --> 00:01:33.000
Say 'new initial' context.

32
00:01:33.000 --> 00:01:36.070
Okay, and on this you will have to look up the resource

33
00:01:36.070 --> 00:01:39.000
for managed executor service.

34
00:01:39.000 --> 00:01:42.000
So, just to recollect, let's go to the server.

35
00:01:42.000 --> 00:01:43.060
That's the server, that's the server running.

36
00:01:43.060 --> 00:01:45.090
And we already know that the concurrent resources are

37
00:01:45.090 --> 00:01:49.010
provided by default to you by the server container.

38
00:01:49.010 --> 00:01:52.020
So I'm just going to go to 'ManagedExecutorService' and

39
00:01:52.020 --> 00:01:55.080
pick up that name, the JNDI name.

40
00:01:55.080 --> 00:02:01.020
Let's copy that. Go back to the editor and on the next line,

41
00:02:01.020 --> 00:02:06.010
line number twenty-three, I'm going to say 'context.lookup',

42
00:02:06.010 --> 00:02:09.040
and then I'm going to specify this name.

43
00:02:09.040 --> 00:02:12.070
And then, you can collect this instance in the

44
00:02:12.070 --> 00:02:16.080
ManagedExecutorService API.

45
00:02:16.080 --> 00:02:20.000
You need a casting for this because it renotes an object

46
00:02:20.000 --> 00:02:22.030
type of it. Then hit on value.

47
00:02:22.030 --> 00:02:24.070
Okay, so, that's how we have collected.

48
00:02:24.070 --> 00:02:26.050
So this is using the Initial Context,

49
00:02:26.050 --> 00:02:28.040
and of course its going to look blue, so hit exceptions so

50
00:02:28.040 --> 00:02:30.030
that we can set it on the block with.

51
00:02:30.030 --> 00:02:34.030
Try-Catch.

52
00:02:34.030 --> 00:02:35.070
So, this is one way of doing it,

53
00:02:35.070 --> 00:02:38.010
but I think the easiest way is to just

54
00:02:38.010 --> 00:02:42.020
inject these dependencies directly inside the RESTful bean

55
00:02:42.020 --> 00:02:44.000
by the resource annotation.

56
00:02:44.000 --> 00:02:49.080
So, let us now do this, and instead let's use the resource

57
00:02:49.080 --> 00:02:50.070
annotations.

58
00:02:50.070 --> 00:02:53.090
It's very easy to use that, so I'm trying to opt for that.

59
00:02:53.090 --> 00:02:57.040
So I say 'at resource'

60
00:02:57.040 --> 00:03:00.040
and the lookup perimeter we'll have

61
00:03:00.040 --> 00:03:04.020
the name of your default ManagedExecutorService.

62
00:03:04.020 --> 00:03:08.040
Okay? Oh, okay. This does not go inside the constructor,

63
00:03:08.040 --> 00:03:11.090
so I'm going to cut this, get rid of this constructor,

64
00:03:11.090 --> 00:03:13.040
I don't want the constructor as well.

65
00:03:13.040 --> 00:03:16.050
Inside the class, I want to inject this as our dependency.

66
00:03:16.050 --> 00:03:17.090
So on line number twenty-two,

67
00:03:17.090 --> 00:03:20.040
I'm going to say 'at thread resource'.

68
00:03:20.040 --> 00:03:26.000
And, what is this for? This is for ManagedExecutorService.

69
00:03:26.000 --> 00:03:28.000
There we go.

70
00:03:28.000 --> 00:03:31.080
Okay, so this is how you actually reference the resources in

71
00:03:31.080 --> 00:03:33.080
your application components.

72
00:03:33.080 --> 00:03:36.030
It could be an EJV, it could be a servelet,

73
00:03:36.030 --> 00:03:38.090
or it could be a RESTful bean.

74
00:03:38.090 --> 00:03:41.070
To just inform you, whenever you talk about,

75
00:03:41.070 --> 00:03:43.080
lets say, creating a servelet class,

76
00:03:43.080 --> 00:03:45.060
inside your servelet class as well,

77
00:03:45.060 --> 00:03:48.040
this kind of dependency injection will work.

78
00:03:48.040 --> 00:03:49.060
Do not worry about that.

79
00:03:49.060 --> 00:03:52.030
So don't think that just because it's a servelet app you

80
00:03:52.030 --> 00:03:54.080
have to make an entry in the Web X and all of that.

81
00:03:54.080 --> 00:03:56.090
You can opt for that of course, no worries.

82
00:03:56.090 --> 00:03:58.070
But, it definitely will work

83
00:03:58.070 --> 00:04:01.090
even with the ResourceAnnotation.

84
00:04:01.090 --> 00:04:05.070
Okay, so we have taken the ManagedExecutorService object.

85
00:04:05.070 --> 00:04:08.070
Let's quickly set up the connection pooling

86
00:04:08.070 --> 00:04:11.050
using the c3p0 library.

87
00:04:11.050 --> 00:04:13.080
So, what I actually mean by this is that

88
00:04:13.080 --> 00:04:16.030
we know that we are doing a lot of database interactions

89
00:04:16.030 --> 00:04:17.060
and there are millions of bank accounts,

90
00:04:17.060 --> 00:04:20.000
and I don't want to create millions of database connections.

91
00:04:20.000 --> 00:04:22.070
So I am going to opt for connection pooling, and I'm using

92
00:04:22.070 --> 00:04:24.060
the c3p0 library for it.

93
00:04:24.060 --> 00:04:28.060
So, let's go to the IDE and in the constructor

94
00:04:28.060 --> 00:04:31.070
of this class, I'm going to set up de-connection pooling.

95
00:04:31.070 --> 00:04:33.020
So, let see how do do it.

96
00:04:33.020 --> 00:04:37.080
It's very simple to do it, you will have to grab

97
00:04:37.080 --> 00:04:40.000
the ComboPooledDataSource object.

98
00:04:40.000 --> 00:04:42.070
We're just coming from the c3p0 library,

99
00:04:42.070 --> 00:04:44.040
let's say they're the source,

100
00:04:44.040 --> 00:04:49.090
and say 'new combo pool data source'.

101
00:04:49.090 --> 00:04:52.090
Once that's done, you will have to just go ahead and say

102
00:04:52.090 --> 00:04:54.080
they're the source and set all the properties to it.

103
00:04:54.080 --> 00:04:57.050
So, starting with the JdbcUrl,

104
00:04:57.050 --> 00:05:05.000
which will be jdbcmysql//localhost3306

105
00:05:05.000 --> 00:05:08.010
and the database we are connecting to is 'test'.

106
00:05:08.010 --> 00:05:09.040
Similarly, you will have

107
00:05:09.040 --> 00:05:14.020
dataSource.setDriverClass,

108
00:05:14.020 --> 00:05:21.080
which is com.mysql.jdbc.Driver.

109
00:05:21.080 --> 00:05:25.030
Then you have the data source to set the user,

110
00:05:25.030 --> 00:05:29.050
which is 'root', and the password,

111
00:05:29.050 --> 00:05:32.010
the credentials of the database basically.

112
00:05:32.010 --> 00:05:34.030
So yes, you can externalize these properties and

113
00:05:34.030 --> 00:05:36.070
make the school way better, no doubt about that.

114
00:05:36.070 --> 00:05:40.030
Okay, and now we want to attach this data source with our

115
00:05:40.030 --> 00:05:42.040
Dao object, just to recollect.

116
00:05:42.040 --> 00:05:45.030
If you open BankAccountDao.

117
00:05:45.030 --> 00:05:47.040
Yup, we have tied up the dataSource with the

118
00:05:47.040 --> 00:05:50.020
BankAccountDao object, so we need to do that.

119
00:05:50.020 --> 00:05:53.070
In order to do that, let's go on line number twenty

120
00:05:53.070 --> 00:05:56.050
of the RESTful bean and create an

121
00:05:56.050 --> 00:05:58.040
instant of the BankAccountDao,

122
00:05:58.040 --> 00:06:01.020
that's what we need.

123
00:06:01.020 --> 00:06:06.010
Right? Once we do that, lets come down to the constructor

124
00:06:06.010 --> 00:06:11.090
and let's instantiate that dao.

125
00:06:11.090 --> 00:06:13.080
Okay? When we instantiate that dao,

126
00:06:13.080 --> 00:06:16.020
we are going to attach this newly-created combo pool

127
00:06:16.020 --> 00:06:18.020
datasource object to the dao class

128
00:06:18.020 --> 00:06:21.030
so that is is tied up with it.

129
00:06:21.030 --> 00:06:23.040
Okay, so that's what you do, that's all.

130
00:06:23.040 --> 00:06:25.000
That's all that you have to do in order to set up

131
00:06:25.000 --> 00:06:26.080
that database connection pooling.

132
00:06:26.080 --> 00:06:28.090
It is going to throw an exception it

133
00:06:28.090 --> 00:06:31.080
lets around the block with try catch.

134
00:06:31.080 --> 00:06:34.040
Right, so, if it does not find any property present

135
00:06:34.040 --> 00:06:37.000
correctly, it will throw you this exception.

136
00:06:37.000 --> 00:06:39.040
Okay, so, that connection pooling is also

137
00:06:39.040 --> 00:06:42.050
set in the RESTful bean.

138
00:06:42.050 --> 00:06:46.040
Now, we have to write a method, and then we have to call the

139
00:06:46.040 --> 00:06:49.000
ManagedExecutorService to submit the tasks.

140
00:06:49.000 --> 00:06:51.000
Let's look at that in the next video.

