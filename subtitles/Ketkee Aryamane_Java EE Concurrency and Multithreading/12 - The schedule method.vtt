WEBVTT
1
00:00:00.050 --> 00:00:01.090
- [Instructor] Let's take a look at the steps

2
00:00:01.090 --> 00:00:04.000
for the ScheduledExecutorService demo.

3
00:00:04.000 --> 00:00:06.090
The first one is we have to write a class CleaningScheduler,

4
00:00:06.090 --> 00:00:09.020
which is going to be a runnable implementation.

5
00:00:09.020 --> 00:00:11.030
So let's head back to the IDE.

6
00:00:11.030 --> 00:00:15.010
Under the Runnables package, I'll create a class,

7
00:00:15.010 --> 00:00:17.040
call it CleaningScheduler.

8
00:00:17.040 --> 00:00:20.030
Of course, you will have called it the CleaningProcessor

9
00:00:20.030 --> 00:00:21.080
but since it's a scheduled job,

10
00:00:21.080 --> 00:00:24.000
I'm trying to call it like this.

11
00:00:24.000 --> 00:00:29.030
Okay, and let this implement the Runnable interface.

12
00:00:29.030 --> 00:00:32.060
We want to make a runnable implementation this time.

13
00:00:32.060 --> 00:00:34.030
So since it's runnable,

14
00:00:34.030 --> 00:00:35.090
the method that you have to implement,

15
00:00:35.090 --> 00:00:37.040
is the run method.

16
00:00:37.040 --> 00:00:41.000
And let's get rid of the default implementation.

17
00:00:41.000 --> 00:00:42.090
The next step is you have to write the logic

18
00:00:42.090 --> 00:00:45.070
for the cleaning of files in the run method.

19
00:00:45.070 --> 00:00:47.090
So what we're going to do is in the run method,

20
00:00:47.090 --> 00:00:50.050
we are going to pick up a folder from our drive.

21
00:00:50.050 --> 00:00:51.090
Now, that folder could be anything.

22
00:00:51.090 --> 00:00:54.010
It's completely your choice.

23
00:00:54.010 --> 00:00:56.090
The files present inside the folder, again,

24
00:00:56.090 --> 00:00:58.030
completely your choice.

25
00:00:58.030 --> 00:01:01.020
There's really not a requirement or hard and fast rule here

26
00:01:01.020 --> 00:01:04.000
to have this kind of a folder, or certain kind of files.

27
00:01:04.000 --> 00:01:06.090
So basically, you can pick up any drive on your system,

28
00:01:06.090 --> 00:01:09.050
any folder on that drive and any list of files

29
00:01:09.050 --> 00:01:11.040
that you may want to delete.

30
00:01:11.040 --> 00:01:14.020
Let me show you my folder.

31
00:01:14.020 --> 00:01:15.060
My folder looks like this.

32
00:01:15.060 --> 00:01:19.080
Under the D: drive, I have a folder called serverlogs.

33
00:01:19.080 --> 00:01:23.010
And so I'm trying to clean up the serverlogs periodically,

34
00:01:23.010 --> 00:01:25.050
that's the objective of this use case.

35
00:01:25.050 --> 00:01:28.060
So I have a few files present under that folder,

36
00:01:28.060 --> 00:01:30.050
and I'm gonna check the timestamp on each of them,

37
00:01:30.050 --> 00:01:31.030
and then delete them.

38
00:01:31.030 --> 00:01:35.050
So let's get back to the IDE and let's write a call for it.

39
00:01:35.050 --> 00:01:39.030
Get the file object, let's call it folder,

40
00:01:39.030 --> 00:01:44.060
and say new File,

41
00:01:44.060 --> 00:01:46.080
and let's embed the path.

42
00:01:46.080 --> 00:01:49.070
That'll be D: drive /serverlogs,

43
00:01:49.070 --> 00:01:54.000
that's the folder I'm looking for.

44
00:01:54.000 --> 00:01:57.010
And if I wanted the total number of files in this folder,

45
00:01:57.010 --> 00:01:59.050
then there's an API that I have.

46
00:01:59.050 --> 00:02:03.010
And that API is going to return me an array of files.

47
00:02:03.010 --> 00:02:05.020
So let's take the output in an array.

48
00:02:05.020 --> 00:02:07.090
Let's say files.

49
00:02:07.090 --> 00:02:09.050
How do I get the files?

50
00:02:09.050 --> 00:02:11.050
I just have to say, list files.

51
00:02:11.050 --> 00:02:13.000
There we go, okay.

52
00:02:13.000 --> 00:02:14.080
And then I want to iterate this array,

53
00:02:14.080 --> 00:02:19.020
so for every file object in the files array,

54
00:02:19.020 --> 00:02:23.080
I'm going to check whether the timestamp on that file

55
00:02:23.080 --> 00:02:27.000
is basically older than today, okay.

56
00:02:27.000 --> 00:02:29.010
And the time period that I'm trying to look at

57
00:02:29.010 --> 00:02:31.020
is let's say five minutes, okay.

58
00:02:31.020 --> 00:02:33.090
So let's say the currentTime,

59
00:02:33.090 --> 00:02:37.000
the currentTime, we will get it in millis,

60
00:02:37.000 --> 00:02:39.080
using the currentTimeMillis API.

61
00:02:39.080 --> 00:02:42.010
And to this I'm going to subtract from this

62
00:02:42.010 --> 00:02:46.050
the lastModified time on the file.

63
00:02:46.050 --> 00:02:48.000
So if the subtraction turns out to be

64
00:02:48.000 --> 00:02:49.050
greater than five minutes,

65
00:02:49.050 --> 00:02:51.080
so I have to convert five minutes into milliseconds,

66
00:02:51.080 --> 00:02:56.090
so that will be five into 60 into 1000.

67
00:02:56.090 --> 00:02:58.080
So I'm trying to check whether the difference

68
00:02:58.080 --> 00:03:00.090
in the timestamp from today is greater than five minutes.

69
00:03:00.090 --> 00:03:03.060
If yes, then I'm just going to put a sys out, first,

70
00:03:03.060 --> 00:03:11.000
and say that This file will be deleted.

71
00:03:11.000 --> 00:03:12.030
What is the file?

72
00:03:12.030 --> 00:03:18.010
Get the file object, and just invoke the getName, call.

73
00:03:18.010 --> 00:03:20.010
Right, so that will give the name of the file.

74
00:03:20.010 --> 00:03:23.080
And then you can just hit the delete API.

75
00:03:23.080 --> 00:03:26.040
So in case you find any files that are

76
00:03:26.040 --> 00:03:28.000
having the older timestamps, they'll just be deleted.

77
00:03:28.000 --> 00:03:29.040
And you just notifying it,

78
00:03:29.040 --> 00:03:31.080
saying that this is the file that you want to delete.

79
00:03:31.080 --> 00:03:33.020
All right, the next step is,

80
00:03:33.020 --> 00:03:35.000
in the test class you're to

81
00:03:35.000 --> 00:03:36.040
get the ScheduledExecutorService object,

82
00:03:36.040 --> 00:03:38.080
and then schedule the job for the CleaningScheduler.

83
00:03:38.080 --> 00:03:43.030
So let's go to the Tests folder, say New, Java class,

84
00:03:43.030 --> 00:03:48.020
TestSchedulors, okay.

85
00:03:48.020 --> 00:03:50.060
Let's grab the main method.

86
00:03:50.060 --> 00:03:52.040
And this time we are going to get the

87
00:03:52.040 --> 00:03:55.050
ScheduledExecutorService object.

88
00:03:55.050 --> 00:03:57.030
How do I get it?

89
00:03:57.030 --> 00:04:01.010
Again, get the hold of the Executor's utility,

90
00:04:01.010 --> 00:04:01.090
there we go.

91
00:04:01.090 --> 00:04:08.010
And on this, you have newSingleThreadScheduledExecutor,

92
00:04:08.010 --> 00:04:11.010
that's the API that we want to invoke.

93
00:04:11.010 --> 00:04:13.040
Okay, and once we've done with that,

94
00:04:13.040 --> 00:04:18.030
you just have to take the service and say .schedule.

95
00:04:18.030 --> 00:04:19.070
Right? So do you see?

96
00:04:19.070 --> 00:04:21.050
There are two versions of schedule,

97
00:04:21.050 --> 00:04:23.020
one which takes callable and the other,

98
00:04:23.020 --> 00:04:24.040
which takes runnable.

99
00:04:24.040 --> 00:04:25.040
So I'm going to use that.

100
00:04:25.040 --> 00:04:27.020
It has three arguments, one is the instance

101
00:04:27.020 --> 00:04:29.050
of the runnable, then the delay.

102
00:04:29.050 --> 00:04:31.090
Delay is once the application starts,

103
00:04:31.090 --> 00:04:35.000
how much delay is something that you want to wait for

104
00:04:35.000 --> 00:04:36.090
before this cleaning starts off.

105
00:04:36.090 --> 00:04:42.000
So let's take that method and say new

106
00:04:42.000 --> 00:04:44.060
CleaningScheduler, the instance of a runnable.

107
00:04:44.060 --> 00:04:46.040
Let's say I want to start the job

108
00:04:46.040 --> 00:04:48.060
after an initial delay of five,

109
00:04:48.060 --> 00:04:52.040
and the time unit is seconds.

110
00:04:52.040 --> 00:04:56.090
Let's go ahead and try to run this.

111
00:04:56.090 --> 00:05:02.060
One, two, three, four, and five.

112
00:05:02.060 --> 00:05:03.080
There we go.

113
00:05:03.080 --> 00:05:06.030
So after the initial delay of five seconds,

114
00:05:06.030 --> 00:05:09.020
it actually told me that it has already found files

115
00:05:09.020 --> 00:05:10.060
which have an older timestamp,

116
00:05:10.060 --> 00:05:12.020
so it's going to delete them.

117
00:05:12.020 --> 00:05:13.010
That's all.

118
00:05:13.010 --> 00:05:16.000
This is how we can schedule your job in the application.

