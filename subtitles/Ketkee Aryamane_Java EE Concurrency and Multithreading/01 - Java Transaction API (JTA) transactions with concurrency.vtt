WEBVTT
1
00:00:00.060 --> 00:00:01.040
- [Teacher] Now that we've seen

2
00:00:01.040 --> 00:00:03.080
the four concurrency Enterprise Services,

3
00:00:03.080 --> 00:00:06.000
let us talk about how concurrency deals

4
00:00:06.000 --> 00:00:08.040
with the transaction management.

5
00:00:08.040 --> 00:00:10.070
Now we all know this Java Transaction API

6
00:00:10.070 --> 00:00:11.080
that we already have.

7
00:00:11.080 --> 00:00:13.070
We have even talked about it in an earlier part

8
00:00:13.070 --> 00:00:16.030
of the course, but let's quickly revise.

9
00:00:16.030 --> 00:00:18.030
It's a list of interfaces that are provided

10
00:00:18.030 --> 00:00:20.000
between the transaction manager

11
00:00:20.000 --> 00:00:22.000
and the transaction management components,

12
00:00:22.000 --> 00:00:23.060
like your application servers,

13
00:00:23.060 --> 00:00:26.050
or your application code or your resource managers.

14
00:00:26.050 --> 00:00:29.010
And there are many kinds of transactions that you can make.

15
00:00:29.010 --> 00:00:30.090
Let's look at few scenarios:

16
00:00:30.090 --> 00:00:33.030
I have a situation where there's one data source,

17
00:00:33.030 --> 00:00:35.040
which is connected to a single database.

18
00:00:35.040 --> 00:00:37.070
And then I have multiple data sources

19
00:00:37.070 --> 00:00:39.060
connected to the same database.

20
00:00:39.060 --> 00:00:42.060
And then, I have multiple data sources connected

21
00:00:42.060 --> 00:00:46.090
to two different databases and that too over a network.

22
00:00:46.090 --> 00:00:48.050
Which means, I have a situation

23
00:00:48.050 --> 00:00:50.050
where it is a distributed network,

24
00:00:50.050 --> 00:00:52.060
and I may have to perform transactions

25
00:00:52.060 --> 00:00:54.070
over each of the machines in the network.

26
00:00:54.070 --> 00:00:57.070
Now, when it is a distributed network,

27
00:00:57.070 --> 00:00:59.080
there will be global transactions.

28
00:00:59.080 --> 00:01:01.030
There may be transactions due to

29
00:01:01.030 --> 00:01:04.090
threads, JMS queues, application servers, etc.

30
00:01:04.090 --> 00:01:08.040
When we talk about concurrency programming with JTA,

31
00:01:08.040 --> 00:01:11.020
it is definitely going to become a little more complicated.

32
00:01:11.020 --> 00:01:13.040
If you have a distributed environment,

33
00:01:13.040 --> 00:01:17.020
then the most basic operations like commit, rollback

34
00:01:17.020 --> 00:01:21.040
along with concurrent processing can be really a challenge.

35
00:01:21.040 --> 00:01:23.010
In order to guarantee that commit

36
00:01:23.010 --> 00:01:25.030
and rollback operations successfully work

37
00:01:25.030 --> 00:01:27.060
and the data integrity is mentioned,

38
00:01:27.060 --> 00:01:31.000
that has definitely to be handled carefully.

39
00:01:31.000 --> 00:01:34.010
So when it comes to concurrency programming,

40
00:01:34.010 --> 00:01:37.050
it completely depends on the Java Transaction API

41
00:01:37.050 --> 00:01:39.090
to make sure that these commit

42
00:01:39.090 --> 00:01:43.040
and rollback operations work successfully.

43
00:01:43.040 --> 00:01:46.020
We have this user transaction

44
00:01:46.020 --> 00:01:50.040
javax.transaction.UserTransaction API, which is something

45
00:01:50.040 --> 00:01:53.060
that your concurrency programming will rely on.

46
00:01:53.060 --> 00:01:55.060
It helps developers to demarcate

47
00:01:55.060 --> 00:01:57.020
those transaction boundaries.

48
00:01:57.020 --> 00:01:59.020
So I may have the transaction which is spread

49
00:01:59.020 --> 00:02:01.060
among different threads, CPU cores,

50
00:02:01.060 --> 00:02:03.060
machines, or even networks.

51
00:02:03.060 --> 00:02:06.020
But the user transaction API that I have with me

52
00:02:06.020 --> 00:02:08.080
will ensure that all of these transactions

53
00:02:08.080 --> 00:02:12.050
operating in a single unit will be managed correctly.

54
00:02:12.050 --> 00:02:14.000
So when I say managed correctly,

55
00:02:14.000 --> 00:02:16.060
there will be a commit when we are very sure

56
00:02:16.060 --> 00:02:19.050
that all of the units transacting within

57
00:02:19.050 --> 00:02:22.010
that single transactions are ready to commit.

58
00:02:22.010 --> 00:02:24.040
Otherwise, if there is anything going wrong

59
00:02:24.040 --> 00:02:26.060
in any of the bits in that transaction,

60
00:02:26.060 --> 00:02:29.050
the entire data from the database will be rolled back,

61
00:02:29.050 --> 00:02:32.060
and the database will be restored to the previous state.

62
00:02:32.060 --> 00:02:34.030
So that's what this means.

63
00:02:34.030 --> 00:02:37.010
And of course, we talked about a term

64
00:02:37.010 --> 00:02:40.010
previously, which spoke about global transactions,

65
00:02:40.010 --> 00:02:43.070
and XA extended architecture resources.

66
00:02:43.070 --> 00:02:46.080
And we said that your database driver jars

67
00:02:46.080 --> 00:02:51.040
should definitely have the XA resource available,

68
00:02:51.040 --> 00:02:54.090
which can help you make sure that this global transaction

69
00:02:54.090 --> 00:02:57.080
and distributed transaction process works well.

70
00:02:57.080 --> 00:03:01.020
My SQL database server that we have chosen

71
00:03:01.020 --> 00:03:03.020
and the driver jar corresponding to that

72
00:03:03.020 --> 00:03:05.030
the dependency that we added in the project,

73
00:03:05.030 --> 00:03:07.050
definitely has XA global resource

74
00:03:07.050 --> 00:03:09.000
so we need not worry about it.

75
00:03:09.000 --> 00:03:11.050
So if you want to try out concurrency programming

76
00:03:11.050 --> 00:03:15.070
across a distributed network with the user transaction API

77
00:03:15.070 --> 00:03:18.020
of Java transaction management, then yes,

78
00:03:18.020 --> 00:03:22.020
you will be able to do it without any problem.

79
00:03:22.020 --> 00:03:25.080
So just to make sure we are clear on what we're doing,

80
00:03:25.080 --> 00:03:27.030
let's say if you have a thread

81
00:03:27.030 --> 00:03:30.000
which is now performing a lot of transactions together,

82
00:03:30.000 --> 00:03:32.070
look at this code that I'm showing on the slide right now.

83
00:03:32.070 --> 00:03:35.070
You have this usertransaction.begin,

84
00:03:35.070 --> 00:03:38.090
which is starting the boundary of the transaction.

85
00:03:38.090 --> 00:03:41.080
And there after inside it, you can have many calls,

86
00:03:41.080 --> 00:03:43.080
you can call an easy business method,

87
00:03:43.080 --> 00:03:45.060
you can call a restful web service,

88
00:03:45.060 --> 00:03:48.010
you can make a database call and all of these sources

89
00:03:48.010 --> 00:03:50.000
may be placed across the network.

90
00:03:50.000 --> 00:03:52.060
But once all of them finished their jobs,

91
00:03:52.060 --> 00:03:55.070
then we are going to say commit and user transaction object

92
00:03:55.070 --> 00:03:57.080
is going to take care that it commits

93
00:03:57.080 --> 00:04:01.080
only if all those operations are definitely successful.

94
00:04:01.080 --> 00:04:05.040
Otherwise, it will help us roll back the entire data

95
00:04:05.040 --> 00:04:07.090
and we will be safe.

96
00:04:07.090 --> 00:04:10.090
Now, whenever in a restful web application you want

97
00:04:10.090 --> 00:04:13.050
to get hold of the Java transaction object,

98
00:04:13.050 --> 00:04:15.040
the user transaction, yes it can be

99
00:04:15.040 --> 00:04:18.000
very easily obtained using JNDI lookup.

100
00:04:18.000 --> 00:04:20.000
We have done JNDI lookup before in all

101
00:04:20.000 --> 00:04:22.050
of our demos and we know how it is done.

102
00:04:22.050 --> 00:04:25.020
There are two ways you either do a JNDI lookup

103
00:04:25.020 --> 00:04:28.080
or you inject it using the resource annotation.

104
00:04:28.080 --> 00:04:31.050
But this object explicitly we're going

105
00:04:31.050 --> 00:04:35.030
to have wire the JNDI lookup in restful classes

106
00:04:35.030 --> 00:04:38.000
or whichever components that you want to inject into.

