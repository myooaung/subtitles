WEBVTT
1
00:00:00.050 --> 00:00:03.010
- [Instructor] Let's now take a look at the last of the APIs

2
00:00:03.010 --> 00:00:05.060
and the Enterprise Edition concurrency utilities,

3
00:00:05.060 --> 00:00:07.060
the ContextService API.

4
00:00:07.060 --> 00:00:09.080
Before that let's quickly revise a couple of terms

5
00:00:09.080 --> 00:00:11.050
we have used them before, here and there,

6
00:00:11.050 --> 00:00:13.050
but let's take a look again.

7
00:00:13.050 --> 00:00:16.000
The first one is, what is a contextual object?

8
00:00:16.000 --> 00:00:18.040
So it is any Java object or instance

9
00:00:18.040 --> 00:00:21.010
which will have the particular application

10
00:00:21.010 --> 00:00:24.070
component's container context associated with it.

11
00:00:24.070 --> 00:00:27.060
And when you talk about a contextual task

12
00:00:27.060 --> 00:00:31.000
it is a task which is submitted to the managed resource.

13
00:00:31.000 --> 00:00:33.000
So when a task instance is submitted

14
00:00:33.000 --> 00:00:35.090
to a managed instance of the ExecutorService

15
00:00:35.090 --> 00:00:38.070
then the task becomes a contextual task.

16
00:00:38.070 --> 00:00:41.090
And when the contextual task runs the task behaves

17
00:00:41.090 --> 00:00:43.070
as if it were still running inside

18
00:00:43.070 --> 00:00:47.000
the container it was submitted with.

19
00:00:47.000 --> 00:00:48.090
When you have an application component

20
00:00:48.090 --> 00:00:51.040
like Enterprise JavaBean or a servlet

21
00:00:51.040 --> 00:00:53.090
then we know that the thread that is running

22
00:00:53.090 --> 00:00:56.060
is going to have the contextual information

23
00:00:56.060 --> 00:00:58.030
associated with it.

24
00:00:58.030 --> 00:01:00.080
Now when you talk about the ContextService API

25
00:01:00.080 --> 00:01:02.090
it is going to allow applications

26
00:01:02.090 --> 00:01:06.090
to create contextual objects without a managed executor.

27
00:01:06.090 --> 00:01:08.020
Let's understand this point.

28
00:01:08.020 --> 00:01:10.000
If we try to create a thread using

29
00:01:10.000 --> 00:01:12.010
the Java Standard Edition platform

30
00:01:12.010 --> 00:01:14.040
inside the enterprise environment,

31
00:01:14.040 --> 00:01:16.010
we know that the contextual information

32
00:01:16.010 --> 00:01:18.050
is not guaranteed to be given to the thread,

33
00:01:18.050 --> 00:01:21.040
because the container is not aware of the thread

34
00:01:21.040 --> 00:01:25.060
that you created with the SE platform.

35
00:01:25.060 --> 00:01:27.080
If you want to capture

36
00:01:27.080 --> 00:01:30.000
the additional information

37
00:01:30.000 --> 00:01:32.090
of the container context, if you really want out a way

38
00:01:32.090 --> 00:01:35.030
where you will capture container context

39
00:01:35.030 --> 00:01:38.030
and run with that context later,

40
00:01:38.030 --> 00:01:41.030
even on another instance of the server,

41
00:01:41.030 --> 00:01:43.050
or maybe on a server restart,

42
00:01:43.050 --> 00:01:46.090
then ContextService API is the way to do it.

43
00:01:46.090 --> 00:01:48.060
It will give you a way to capture

44
00:01:48.060 --> 00:01:51.010
that context information, store it,

45
00:01:51.010 --> 00:01:54.040
so that you can run it at a later point in time.

46
00:01:54.040 --> 00:01:56.000
And how does it do that?

47
00:01:56.000 --> 00:01:59.030
It uses these dynamic proxy capabilities

48
00:01:59.030 --> 00:02:03.010
that are provided under the java.lang.reflect package

49
00:02:03.010 --> 00:02:06.000
to associate the application component's context

50
00:02:06.000 --> 00:02:07.090
with the object instance.

51
00:02:07.090 --> 00:02:10.050
So this object now becomes a contextual object

52
00:02:10.050 --> 00:02:13.010
and whenever a method on the contextual object runs

53
00:02:13.010 --> 00:02:16.050
then the method executes with the thread context

54
00:02:16.050 --> 00:02:20.030
of that associated application component instance.

55
00:02:20.030 --> 00:02:24.020
Okay, now this API is of course used in advanced scenarios

56
00:02:24.020 --> 00:02:26.010
and there's also one thing that the specification

57
00:02:26.010 --> 00:02:30.020
tells us that ManagedExecutorService is likely

58
00:02:30.020 --> 00:02:33.040
to use this context service internally

59
00:02:33.040 --> 00:02:35.020
to make sure that the container context

60
00:02:35.020 --> 00:02:37.050
is propagated to the threads.

61
00:02:37.050 --> 00:02:39.040
This is only used in advanced scenarios

62
00:02:39.040 --> 00:02:41.070
we are going to take one look at this

63
00:02:41.070 --> 00:02:43.070
and let's also understand that when you talk

64
00:02:43.070 --> 00:02:45.020
about ContextService it helps you

65
00:02:45.020 --> 00:02:47.040
to create contextual objects,

66
00:02:47.040 --> 00:02:49.020
which means these contextual objects

67
00:02:49.020 --> 00:02:51.040
will have the context information.

68
00:02:51.040 --> 00:02:52.060
And what is that?

69
00:02:52.060 --> 00:02:56.010
That's JNDI naming, class loader information,

70
00:02:56.010 --> 00:02:57.070
and security context.

71
00:02:57.070 --> 00:03:00.080
So in the next video we look at a demo for ContextService

72
00:03:00.080 --> 00:03:04.020
where we'll try to capture the security information.

73
00:03:04.020 --> 00:03:07.000
Let's look at that in the next video.

