WEBVTT
1
00:00:00.050 --> 00:00:01.070
- [Instructor] Okay so now that we've seen

2
00:00:01.070 --> 00:00:04.040
how to submit a task via the ExecutorService,

3
00:00:04.040 --> 00:00:06.090
let's take a look at a few other APIs.

4
00:00:06.090 --> 00:00:10.010
The first one is invokeAny and invokeAll.

5
00:00:10.010 --> 00:00:13.010
Now both of these methods help you submit

6
00:00:13.010 --> 00:00:16.050
a collection of tasks unlike in the previous demo

7
00:00:16.050 --> 00:00:20.010
where we submitted each task individually.

8
00:00:20.010 --> 00:00:22.070
And when you call the invokeAll method,

9
00:00:22.070 --> 00:00:24.090
it makes sure that it submits all the tasks,

10
00:00:24.090 --> 00:00:27.070
executes them and returns their output.

11
00:00:27.070 --> 00:00:30.050
And that output will be a list of futures this time

12
00:00:30.050 --> 00:00:33.040
because it's a collection of tasks okay?

13
00:00:33.040 --> 00:00:36.070
Now the invokeAny method is a little different.

14
00:00:36.070 --> 00:00:39.060
It is going to make sure that it submits all your tasks,

15
00:00:39.060 --> 00:00:41.060
however, it is going to return you

16
00:00:41.060 --> 00:00:44.050
the output of the first successful

17
00:00:44.050 --> 00:00:47.010
or the exceptional execution okay?

18
00:00:47.010 --> 00:00:48.030
So what we're going to do,

19
00:00:48.030 --> 00:00:49.080
we are going to go back to the project

20
00:00:49.080 --> 00:00:52.030
and we're going to make a very small example,

21
00:00:52.030 --> 00:00:54.080
where to understand how these methods work.

22
00:00:54.080 --> 00:01:01.010
So let's make a class and let's say, LoggingProcessor.

23
00:01:01.010 --> 00:01:05.000
Let this implement a callable.

24
00:01:05.000 --> 00:01:06.080
Let's say this returns a Boolean.

25
00:01:06.080 --> 00:01:08.040
So callable of a Boolean.

26
00:01:08.040 --> 00:01:09.080
And it's a callable implementation

27
00:01:09.080 --> 00:01:12.090
which means you have to implement a call method.

28
00:01:12.090 --> 00:01:14.090
So let's get rid of the default implementation,

29
00:01:14.090 --> 00:01:17.060
what we are going to do here is a very simple thing.

30
00:01:17.060 --> 00:01:20.080
We will take the logger from java.util.logging

31
00:01:20.080 --> 00:01:23.080
and get the logger instance.

32
00:01:23.080 --> 00:01:25.050
So I am going to pick up that name

33
00:01:25.050 --> 00:01:30.000
from line number 15 and get it

34
00:01:30.000 --> 00:01:37.030
and on that a very simple log statement.

35
00:01:37.030 --> 00:01:39.080
Sorry you also have to change the getName API on it.

36
00:01:39.080 --> 00:01:42.080
Yeah and then you say, log, right?

37
00:01:42.080 --> 00:01:44.060
And this is going to demand a logging level,

38
00:01:44.060 --> 00:01:47.000
so we don't want a severe level,

39
00:01:47.000 --> 00:01:50.050
we just want an information message to be logged.

40
00:01:50.050 --> 00:01:52.020
And you can give in the message.

41
00:01:52.020 --> 00:01:57.010
Let's say, logging something, that's all, that's all.

42
00:01:57.010 --> 00:02:02.020
And after we log this we just simply return true okay.

43
00:02:02.020 --> 00:02:04.020
And then we go to the Tests folder,

44
00:02:04.020 --> 00:02:07.020
we create a class there and let's say

45
00:02:07.020 --> 00:02:09.020
we are testing other APIs right?

46
00:02:09.020 --> 00:02:11.020
So let's name it like that.

47
00:02:11.020 --> 00:02:15.000
Let's grab the main method and let's

48
00:02:15.000 --> 00:02:17.030
also take the ExecutorService.

49
00:02:17.030 --> 00:02:19.070
So we now know how to take it right?

50
00:02:19.070 --> 00:02:24.090
You just have to say Executors, the utility.

51
00:02:24.090 --> 00:02:29.050
Which is this and say newFixedThreadPool maybe.

52
00:02:29.050 --> 00:02:32.050
Let's say number of threads is two okay.

53
00:02:32.050 --> 00:02:34.010
And as we said both of the invokeAny

54
00:02:34.010 --> 00:02:36.060
and invokeAll will take a collection of tasks,

55
00:02:36.060 --> 00:02:38.040
so we have to make a collection right?

56
00:02:38.040 --> 00:02:42.060
So let's say List of callables

57
00:02:42.060 --> 00:02:45.080
and our callable is actually going to take a Boolean

58
00:02:45.080 --> 00:02:49.080
so let's specify that in the generic syntax.

59
00:02:49.080 --> 00:02:53.000
And take callables and say new ArrayList,

60
00:02:53.000 --> 00:02:55.050
let's clear the collection first.

61
00:02:55.050 --> 00:02:56.080
One's done what are we going to do?

62
00:02:56.080 --> 00:02:59.020
We are going to take the callables list

63
00:02:59.020 --> 00:03:02.080
and add the LoggingProcessor task to it.

64
00:03:02.080 --> 00:03:07.010
The instance of it okay?

65
00:03:07.010 --> 00:03:11.060
LoggingProcessor which is this okay.

66
00:03:11.060 --> 00:03:13.020
And it's a collection of tasks remember,

67
00:03:13.020 --> 00:03:16.020
so let's copy this line 25,

68
00:03:16.020 --> 00:03:18.050
and paste it as many times as you want.

69
00:03:18.050 --> 00:03:22.080
Let's create at least six or seven implementations

70
00:03:22.080 --> 00:03:25.050
for the list.

71
00:03:25.050 --> 00:03:27.060
Implementation as in the callables list

72
00:03:27.060 --> 00:03:30.030
has to definitely contain more than six or seven tasks.

73
00:03:30.030 --> 00:03:32.050
That's what I'm trying to do.

74
00:03:32.050 --> 00:03:35.020
And once this is done let's take the service object

75
00:03:35.020 --> 00:03:39.080
and say .invokeAll.

76
00:03:39.080 --> 00:03:42.090
And pass that callables argument to it.

77
00:03:42.090 --> 00:03:50.000
So now this is going to return me a list of futures.

78
00:03:50.000 --> 00:03:53.000
And the future is trying to have a value of Boolean right?

79
00:03:53.000 --> 00:03:54.090
The return value is Boolean so we'll take that

80
00:03:54.090 --> 00:03:57.090
and we'll give it a reference, okay.

81
00:03:57.090 --> 00:04:00.010
So we said service invokeAll callables,

82
00:04:00.010 --> 00:04:02.020
and we have taken the output in a list of futures.

83
00:04:02.020 --> 00:04:04.040
If you want to see what the futures contain

84
00:04:04.040 --> 00:04:05.080
then you'll have to iterate that,

85
00:04:05.080 --> 00:04:11.000
so let's say for every future of Boolean,

86
00:04:11.000 --> 00:04:15.020
take a variable in the futures list.

87
00:04:15.020 --> 00:04:18.070
We're just going to put a sys out and say,

88
00:04:18.070 --> 00:04:26.050
operation result, maybe and then call the get API.

89
00:04:26.050 --> 00:04:27.080
Of course this method is going to throw

90
00:04:27.080 --> 00:04:30.060
some checked exceptions so let's handle that using

91
00:04:30.060 --> 00:04:33.060
the try catch block and for this,

92
00:04:33.060 --> 00:04:35.070
it's going to throw another set of exceptions.

93
00:04:35.070 --> 00:04:38.040
Let's add the catch clause.

94
00:04:38.040 --> 00:04:40.080
Make sure that the variables that you want to access

95
00:04:40.080 --> 00:04:42.080
throughout the method are outside the try block,

96
00:04:42.080 --> 00:04:46.010
so let's take lines number 27 and 28,

97
00:04:46.010 --> 00:04:52.040
cut them, and put it outside the try on line number 26.

98
00:04:52.040 --> 00:04:53.060
Looks great.

99
00:04:53.060 --> 00:04:56.010
So I'm just going to go ahead and execute this now.

100
00:04:56.010 --> 00:04:59.000
Let's see what happens.

101
00:04:59.000 --> 00:05:00.030
Yeah do you see what happened?

102
00:05:00.030 --> 00:05:01.090
So when I said invokeAll,

103
00:05:01.090 --> 00:05:04.070
how many ever number of tasks that I had created,

104
00:05:04.070 --> 00:05:07.010
all of them got executed and I have the result

105
00:05:07.010 --> 00:05:10.070
of all of them present on the console okay?

106
00:05:10.070 --> 00:05:14.000
Unlike this, let's also see the invokeAny method.

107
00:05:14.000 --> 00:05:16.080
So I'm going to go down, let this code be as-is,

108
00:05:16.080 --> 00:05:19.010
and we're going to take the service object

109
00:05:19.010 --> 00:05:23.000
and this time we're going to call invokeAny, that's the one.

110
00:05:23.000 --> 00:05:26.090
Pass the callables and just print the result of this.

111
00:05:26.090 --> 00:05:30.000
Just take it there sys out statement.

112
00:05:30.000 --> 00:05:30.080
Why am I doing this?

113
00:05:30.080 --> 00:05:32.080
Because when you talk about invokeAny

114
00:05:32.080 --> 00:05:35.060
it's going to return you the result of just one operation.

115
00:05:35.060 --> 00:05:37.070
So we really don't need to collect it in a future object

116
00:05:37.070 --> 00:05:40.040
and then keep doing the rest of the stuff okay?

117
00:05:40.040 --> 00:05:42.030
This is going to throw you the exception

118
00:05:42.030 --> 00:05:44.090
so let's surround this and do a try catch.

119
00:05:44.090 --> 00:05:49.060
And now let's run this program again.

120
00:05:49.060 --> 00:05:51.010
Yes, do you see the difference?

121
00:05:51.010 --> 00:05:52.090
That's the output that's come up

122
00:05:52.090 --> 00:05:56.080
from the invokeAll implementation call okay?

123
00:05:56.080 --> 00:06:00.070
Now unlike that if you see the invokeAny output,

124
00:06:00.070 --> 00:06:05.020
it actually executed only one, two, three and four tasks,

125
00:06:05.020 --> 00:06:06.070
and the moment it got the result

126
00:06:06.070 --> 00:06:08.080
of the first successful operation,

127
00:06:08.080 --> 00:06:12.020
the rest of the tasks in the collection were canceled.

128
00:06:12.020 --> 00:06:14.040
That's how invokeAny behaves.

129
00:06:14.040 --> 00:06:18.030
So invokeAny may be used for certain use cases

130
00:06:18.030 --> 00:06:21.070
where let's say you want a guaranteed delivery system

131
00:06:21.070 --> 00:06:23.030
to be implemented okay?

132
00:06:23.030 --> 00:06:26.000
You want to send messages and you can post

133
00:06:26.000 --> 00:06:28.080
the message as many number of times as you want,

134
00:06:28.080 --> 00:06:30.050
but you want an assurance that it

135
00:06:30.050 --> 00:06:34.040
definitely gets delivered at least once.

136
00:06:34.040 --> 00:06:36.080
So it is kind of an item put into operation

137
00:06:36.080 --> 00:06:38.020
where how many ever number of times

138
00:06:38.020 --> 00:06:40.000
you send the request it's fine,

139
00:06:40.000 --> 00:06:42.010
but you have to make sure that the request

140
00:06:42.010 --> 00:06:44.070
definitely reached the destination right?

141
00:06:44.070 --> 00:06:47.020
So instead of submitting this message,

142
00:06:47.020 --> 00:06:49.040
instead of posting this message again

143
00:06:49.040 --> 00:06:51.050
and again as an individual task,

144
00:06:51.050 --> 00:06:53.070
we have this facility by invokeAny,

145
00:06:53.070 --> 00:06:57.030
where you can have a collection of the same task,

146
00:06:57.030 --> 00:06:59.060
and submit all of them in one shot,

147
00:06:59.060 --> 00:07:02.030
and then let it come back with the result of the operation.

148
00:07:02.030 --> 00:07:05.040
Could be successful or could be a failure, doesn't matter.

149
00:07:05.040 --> 00:07:06.040
But that's what we want to know.

150
00:07:06.040 --> 00:07:07.040
We want an assurance.

151
00:07:07.040 --> 00:07:10.020
We want to see whether it got delivered or not

152
00:07:10.020 --> 00:07:12.070
so that's one of the possible use cases

153
00:07:12.070 --> 00:07:14.050
for the invokeAny method.

154
00:07:14.050 --> 00:07:18.000
In the next video we'll take a look at the shutdown APIs.

