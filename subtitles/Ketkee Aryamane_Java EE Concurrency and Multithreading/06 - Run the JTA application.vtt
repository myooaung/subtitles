WEBVTT
1
00:00:00.050 --> 00:00:02.060
- [Narrator] Okay so now let's quickly test this out.

2
00:00:02.060 --> 00:00:06.060
Let's make sure that is deployed correctly, yes it is.

3
00:00:06.060 --> 00:00:11.020
Let's take this path, let's go to the Postman tool,

4
00:00:11.020 --> 00:00:13.090
and now, we're going to access this part.

5
00:00:13.090 --> 00:00:15.090
But please don't forget that we made a post request,

6
00:00:15.090 --> 00:00:17.020
so we're going to send a post request,

7
00:00:17.020 --> 00:00:20.010
so let's click on send.

8
00:00:20.010 --> 00:00:23.000
Yeah, so nothing happened which means everything went okay.

9
00:00:23.000 --> 00:00:25.050
Let's go to the database and check whether the entries

10
00:00:25.050 --> 00:00:27.080
got inserted correctly, yeah.

11
00:00:27.080 --> 00:00:30.050
We have the entry for the 21st transaction,

12
00:00:30.050 --> 00:00:33.020
and let's check the log, yes, we have an entry for that too.

13
00:00:33.020 --> 00:00:34.050
So everything was okay.

14
00:00:34.050 --> 00:00:36.070
The data we were trying to insert was okay

15
00:00:36.070 --> 00:00:39.000
and that's why the transaction was successfully

16
00:00:39.000 --> 00:00:40.050
committed to the database.

17
00:00:40.050 --> 00:00:41.080
Now let's see the failure case,

18
00:00:41.080 --> 00:00:43.080
let's go to the transaction bean,

19
00:00:43.080 --> 00:00:46.080
and let's say you're trying to have a new entry here.

20
00:00:46.080 --> 00:00:49.030
Let's change the account number,

21
00:00:49.030 --> 00:00:54.000
and of course let's change the operation to maybe.

22
00:00:54.000 --> 00:00:55.090
And whatever you want to change, basically it's up to you

23
00:00:55.090 --> 00:00:57.060
whatever data that you want to change.

24
00:00:57.060 --> 00:01:00.040
And what I'm gonna do is I'm gonna insert a new entry here,

25
00:01:00.040 --> 00:01:02.050
let's say four, okay.

26
00:01:02.050 --> 00:01:04.040
But the transaction ID,

27
00:01:04.040 --> 00:01:07.040
against which I am trying to insert this.

28
00:01:07.040 --> 00:01:11.000
I am entering a transaction ID 23 which is not even existing

29
00:01:11.000 --> 00:01:12.060
in the bank account transaction.

30
00:01:12.060 --> 00:01:14.060
Yes I am making a fresh entry to the bank account

31
00:01:14.060 --> 00:01:19.030
transaction for 22, but then 23 does not exist, which means,

32
00:01:19.030 --> 00:01:21.080
this query should fail.

33
00:01:21.080 --> 00:01:25.000
Now if this query fails, since they're dependent tables,

34
00:01:25.000 --> 00:01:28.000
this query, whatever data was inserted against it,

35
00:01:28.000 --> 00:01:31.040
should also be rolled back by the user transaction API.

36
00:01:31.040 --> 00:01:33.070
That's works then, cool, right?

37
00:01:33.070 --> 00:01:35.030
So let's test this out.

38
00:01:35.030 --> 00:01:36.070
Yes, this is already deployed.

39
00:01:36.070 --> 00:01:39.030
I'm just going to hit that URL again,

40
00:01:39.030 --> 00:01:41.070
and let's check what happened on the console.

41
00:01:41.070 --> 00:01:44.010
Yes, do you see what happened?

42
00:01:44.010 --> 00:01:45.040
It says that I'm rolling back

43
00:01:45.040 --> 00:01:47.080
because I cannot add or update a child row:

44
00:01:47.080 --> 00:01:49.060
a foreign key constraint fails.

45
00:01:49.060 --> 00:01:53.000
Let's go over to the database and check quickly.

46
00:01:53.000 --> 00:01:53.090
That's right,

47
00:01:53.090 --> 00:01:56.090
so we do not have entry of 22 in the parent table,

48
00:01:56.090 --> 00:01:59.080
and of course we don't have an entry into the child table.

49
00:01:59.080 --> 00:02:00.090
That works perfect for us.

50
00:02:00.090 --> 00:02:03.040
That's exactly what the intention was right?

51
00:02:03.040 --> 00:02:05.030
This was the previous successful entry,

52
00:02:05.030 --> 00:02:08.010
but now when we were trying to add an entry

53
00:02:08.010 --> 00:02:10.040
with the primary key four,

54
00:02:10.040 --> 00:02:12.020
we were trying at add it for a transaction ID

55
00:02:12.020 --> 00:02:13.040
which does not exist,

56
00:02:13.040 --> 00:02:15.000
so now it is not inserted

57
00:02:15.000 --> 00:02:18.010
and hence the previous entry as well,

58
00:02:18.010 --> 00:02:21.040
from the parent table, everything is now rolled back.

59
00:02:21.040 --> 00:02:24.000
So all of this happens while that transaction crosses so

60
00:02:24.000 --> 00:02:28.070
that we have used to demarket our transaction boundaries.

61
00:02:28.070 --> 00:02:32.010
That's exactly the significance of user transaction API,

62
00:02:32.010 --> 00:02:34.000
in concurrency programming.

63
00:02:34.000 --> 00:02:34.090
So there we are.

64
00:02:34.090 --> 00:02:35.090
This is super useful,

65
00:02:35.090 --> 00:02:38.020
and make sure that whenever you do concurrency programming

66
00:02:38.020 --> 00:02:39.070
over a distributed environment,

67
00:02:39.070 --> 00:02:41.050
you safely use the user transaction

68
00:02:41.050 --> 00:02:44.000
and it'll do everything for you.

