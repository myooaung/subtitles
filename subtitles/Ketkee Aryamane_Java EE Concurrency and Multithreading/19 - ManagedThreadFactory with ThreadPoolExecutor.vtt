WEBVTT
1
00:00:00.050 --> 00:00:01.060
- [Narrator] Now let's see how to use

2
00:00:01.060 --> 00:00:05.000
the ManagedThreadFactory with the ThreadPoolExecutor

3
00:00:05.000 --> 00:00:06.090
and that will help to you return

4
00:00:06.090 --> 00:00:10.000
an ExecutorService of the Java Standard Edition.

5
00:00:10.000 --> 00:00:12.000
Let's see how to do that.

6
00:00:12.000 --> 00:00:14.080
Let's get to the IDE and what I'm gonna do is

7
00:00:14.080 --> 00:00:18.030
in the Rest class itself on line number 40,

8
00:00:18.030 --> 00:00:20.010
I'm going to write a method.

9
00:00:20.010 --> 00:00:22.050
That method is public.

10
00:00:22.050 --> 00:00:25.040
It returns an ExecutorService.

11
00:00:25.040 --> 00:00:27.080
Now please understand that this is the ExecutorService

12
00:00:27.080 --> 00:00:30.030
of the java.util.concurrent package,

13
00:00:30.030 --> 00:00:31.050
so I'm trying to take the reference

14
00:00:31.050 --> 00:00:34.020
of the Standard Edition concurrency API.

15
00:00:34.020 --> 00:00:35.070
This is a little different because

16
00:00:35.070 --> 00:00:37.030
all this while we have been only dealing

17
00:00:37.030 --> 00:00:39.010
with Enterprise concurrency resources

18
00:00:39.010 --> 00:00:41.050
but we'll see how to use ManagedThreadFactory

19
00:00:41.050 --> 00:00:43.030
and then get an ExecutorService.

20
00:00:43.030 --> 00:00:44.070
So let's see how to do that.

21
00:00:44.070 --> 00:00:46.010
Okay so this is going to return you

22
00:00:46.010 --> 00:00:48.010
an ExecutorService and let's say,

23
00:00:48.010 --> 00:00:54.010
I'm going to say, getApplicationPool.

24
00:00:54.010 --> 00:00:56.090
And inside that I'll say,

25
00:00:56.090 --> 00:00:59.080
ExecutorService take a reference for it,

26
00:00:59.080 --> 00:01:06.000
and I'm going to say new ThreadPoolExecutor.

27
00:01:06.000 --> 00:01:07.090
That's the API, now before actually trying

28
00:01:07.090 --> 00:01:08.090
to do things ahead,

29
00:01:08.090 --> 00:01:10.050
let's quickly understand one thing.

30
00:01:10.050 --> 00:01:12.080
When you talk about ThreadPoolExecutor

31
00:01:12.080 --> 00:01:17.000
this also comes in from the java.util.concurrent package.

32
00:01:17.000 --> 00:01:18.080
When we did a lot of demos for

33
00:01:18.080 --> 00:01:21.020
the Java Standard Edition platform APIs,

34
00:01:21.020 --> 00:01:24.030
we always used the factory methods of a level

35
00:01:24.030 --> 00:01:26.070
on the executor's utility class,

36
00:01:26.070 --> 00:01:29.080
in order to get a service object right?

37
00:01:29.080 --> 00:01:33.000
In those demos we could have used the ThreadPoolExecutor

38
00:01:33.000 --> 00:01:36.000
as well to get your ExecutorService object,

39
00:01:36.000 --> 00:01:38.010
but there's generally no need to do that

40
00:01:38.010 --> 00:01:41.010
unless you really want to make sure that you provide

41
00:01:41.010 --> 00:01:44.060
all the configuration parameters for the ThreadPoolSize,

42
00:01:44.060 --> 00:01:47.090
for the maximum size of the pool, the keepAliveTime,

43
00:01:47.090 --> 00:01:50.000
the queue that you want to mention

44
00:01:50.000 --> 00:01:52.050
which can hold your tasks and so on and so forth.

45
00:01:52.050 --> 00:01:55.090
So generally instead of configuring all this by yourself,

46
00:01:55.090 --> 00:01:58.000
getting hold of the factory methods

47
00:01:58.000 --> 00:02:01.020
on the executors utility class is always advised,

48
00:02:01.020 --> 00:02:04.050
even by the API but now what we are trying to do is,

49
00:02:04.050 --> 00:02:06.050
we are trying to use this ThreadPoolExecutor

50
00:02:06.050 --> 00:02:08.050
under the Enterprise application,

51
00:02:08.050 --> 00:02:11.010
and that is going to get us an executor service.

52
00:02:11.010 --> 00:02:12.020
How?

53
00:02:12.020 --> 00:02:13.090
Take a look at these method calls.

54
00:02:13.090 --> 00:02:19.020
You have this version which gets you the ExecutorService

55
00:02:19.020 --> 00:02:21.030
and it demands from you a lot of arguments.

56
00:02:21.030 --> 00:02:24.060
One is corePoolSize, the number of active threads,

57
00:02:24.060 --> 00:02:27.070
maximumPoolSize, how many threads can this pool hold

58
00:02:27.070 --> 00:02:30.060
at a maximum level, keepAliveTime.

59
00:02:30.060 --> 00:02:32.030
So let's say if the pool currently has

60
00:02:32.030 --> 00:02:34.060
more than your core pool size threads,

61
00:02:34.060 --> 00:02:37.080
then excessive threads in that pool will be terminated

62
00:02:37.080 --> 00:02:39.090
if they have been idle for more than

63
00:02:39.090 --> 00:02:43.050
this keepAliveTime that you're trying to mention okay?

64
00:02:43.050 --> 00:02:45.060
TimeUnit is of course what kind of time unit

65
00:02:45.060 --> 00:02:47.090
are you specifying for the keepAliveTime.

66
00:02:47.090 --> 00:02:51.080
Then BlockingQueue which is used to hold submitted tasks.

67
00:02:51.080 --> 00:02:53.060
So what this BlockingQueue does is,

68
00:02:53.060 --> 00:02:55.080
so let's say if you have threads which are fewer

69
00:02:55.080 --> 00:02:57.070
than your corePoolSize threads,

70
00:02:57.070 --> 00:02:59.080
then the executor will always prefer adding

71
00:02:59.080 --> 00:03:02.000
a new thread rather than queuing.

72
00:03:02.000 --> 00:03:04.010
But let's say if the corePoolSize

73
00:03:04.010 --> 00:03:05.060
or more threads are running,

74
00:03:05.060 --> 00:03:08.000
then the executor will prefer queuing a request,

75
00:03:08.000 --> 00:03:10.010
rather than adding a new thread okay

76
00:03:10.010 --> 00:03:11.080
so you can specify how many number

77
00:03:11.080 --> 00:03:13.090
of tasks can this queue hold at a time,

78
00:03:13.090 --> 00:03:15.080
and then it will execute accordingly.

79
00:03:15.080 --> 00:03:19.020
And the last argument is really what we're interested in,

80
00:03:19.020 --> 00:03:21.000
it demands a ThreadFactory.

81
00:03:21.000 --> 00:03:23.050
And we know that ManagedThreadFactory service

82
00:03:23.050 --> 00:03:25.050
of the concurrency set is actually

83
00:03:25.050 --> 00:03:27.020
an extension to this factory.

84
00:03:27.020 --> 00:03:28.040
So now what I'm gonna do is

85
00:03:28.040 --> 00:03:30.080
when I call the ThreadPoolExecutor,

86
00:03:30.080 --> 00:03:34.010
I'm actually going to pass the ManagedThreadFactory

87
00:03:34.010 --> 00:03:35.060
as the last argument.

88
00:03:35.060 --> 00:03:37.030
So let's go ahead and do this.

89
00:03:37.030 --> 00:03:40.000
The corePoolSize is let's say three.

90
00:03:40.000 --> 00:03:41.020
The maximum number of threads that I

91
00:03:41.020 --> 00:03:44.020
want to keep let's say, is 10.

92
00:03:44.020 --> 00:03:47.010
The keepAliveTime is let's say five.

93
00:03:47.010 --> 00:03:51.000
Of course the TimeUnit I'm going to specify is seconds.

94
00:03:51.000 --> 00:03:53.070
And the workQueue, I'm going to create

95
00:03:53.070 --> 00:03:57.070
a new array BlockingQueue.

96
00:03:57.070 --> 00:04:00.090
And I'm going to give it the number of tasks to be held

97
00:04:00.090 --> 00:04:03.060
as two and this ThreadFactory is now

98
00:04:03.060 --> 00:04:06.090
the injected resource on 27 so I'm going

99
00:04:06.090 --> 00:04:10.060
to provide the ManagedThreadFactory as an argument

100
00:04:10.060 --> 00:04:14.020
to the constructor of ThreadPoolExecutor.

101
00:04:14.020 --> 00:04:18.010
Now once you do this, what is going to happen is,

102
00:04:18.010 --> 00:04:20.030
that the service object that is returned

103
00:04:20.030 --> 00:04:24.070
out of this API is going to have managed threads.

104
00:04:24.070 --> 00:04:28.030
That's because you employ the ManagedThreadFactory

105
00:04:28.030 --> 00:04:29.090
to create those threads for you.

106
00:04:29.090 --> 00:04:33.090
So now when you have created threads out of this executor,

107
00:04:33.090 --> 00:04:36.000
you will still have those threads having

108
00:04:36.000 --> 00:04:38.080
the entire contextual information of the container,

109
00:04:38.080 --> 00:04:42.060
so they'll run in the application components context.

110
00:04:42.060 --> 00:04:43.080
Alright let's come to the next line

111
00:04:43.080 --> 00:04:49.060
and just return the service from here.

112
00:04:49.060 --> 00:04:51.050
Okay now that we have written this method,

113
00:04:51.050 --> 00:04:55.030
let's go back to the logData method and on line 35

114
00:04:55.030 --> 00:04:58.030
I am just going to call the getApplicationPool method

115
00:04:58.030 --> 00:04:59.050
that we have written right now

116
00:04:59.050 --> 00:05:03.000
and get the service object so I'm gonna say,

117
00:05:03.000 --> 00:05:08.070
ExecutorService = getApplicationPool.

118
00:05:08.070 --> 00:05:11.090
Okay and let's do one thing let's run a loop

119
00:05:11.090 --> 00:05:15.030
so that the logging task happens again and again okay?

120
00:05:15.030 --> 00:05:20.090
int i = 0, let's run it for let's say,

121
00:05:20.090 --> 00:05:25.050
six times i++,

122
00:05:25.050 --> 00:05:26.030
and what are we going to do?

123
00:05:26.030 --> 00:05:28.010
We are going to take our service,

124
00:05:28.010 --> 00:05:30.070
and now this is the SE service so on this I'll have

125
00:05:30.070 --> 00:05:33.090
to call the submit API and I'm going to pass

126
00:05:33.090 --> 00:05:42.090
an instance of the LoggingProcessor.

127
00:05:42.090 --> 00:05:46.070
So that's what I want to do.

128
00:05:46.070 --> 00:05:49.080
So let's go ahead and run this now,

129
00:05:49.080 --> 00:05:53.060
and see the output so we're going to make sure

130
00:05:53.060 --> 00:05:57.020
that the changes are deployed.

131
00:05:57.020 --> 00:06:00.000
Okay I'm going to his this again.

132
00:06:00.000 --> 00:06:02.090
Okay so logging thread is doing its job, check console.

133
00:06:02.090 --> 00:06:06.000
Okay now let's see what happened on the console.

134
00:06:06.000 --> 00:06:07.040
Yeah do you see?

135
00:06:07.040 --> 00:06:10.020
The threads that you're getting are actually spawned

136
00:06:10.020 --> 00:06:11.070
out of the ManagedThreadFactory.

137
00:06:11.070 --> 00:06:13.000
That's why they are named like

138
00:06:13.000 --> 00:06:15.060
defaultManagedThreadFactory Thread-4, Thread-5,

139
00:06:15.060 --> 00:06:19.010
Thread-7 then eight, six, four, six.

140
00:06:19.010 --> 00:06:21.050
So they're also getting reused whenever necessary.

141
00:06:21.050 --> 00:06:24.020
Okay the logging thread name that we had got

142
00:06:24.020 --> 00:06:26.030
on the console that's for the earlier video,

143
00:06:26.030 --> 00:06:28.060
where we were trying to create a single thread

144
00:06:28.060 --> 00:06:30.040
out of the ManagedThreadFactory.

145
00:06:30.040 --> 00:06:32.060
But these names that you're getting now are

146
00:06:32.060 --> 00:06:35.000
actually the threads that have been created

147
00:06:35.000 --> 00:06:37.040
out of your ManagedThreadFactory

148
00:06:37.040 --> 00:06:39.070
and fed to the ExecutorService.

149
00:06:39.070 --> 00:06:41.090
That's why these threads will also have

150
00:06:41.090 --> 00:06:44.040
the entire application component context information

151
00:06:44.040 --> 00:06:46.000
with them when they're executing

152
00:06:46.000 --> 00:06:49.000
the job of that asynchronous task.

153
00:06:49.000 --> 00:06:53.000
Okay so that's how you can use the ThreadPoolExecutor

154
00:06:53.000 --> 00:06:55.000
and feed ManagedThreadFactory to it

155
00:06:55.000 --> 00:06:57.020
in order to get an ExecutorService object,

156
00:06:57.020 --> 00:06:59.040
which will consist of threads created

157
00:06:59.040 --> 00:07:02.000
through the ManagedThreadFactory.

