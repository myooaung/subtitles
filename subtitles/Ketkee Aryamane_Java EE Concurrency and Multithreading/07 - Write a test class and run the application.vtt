WEBVTT
1
00:00:00.050 --> 00:00:02.070
- [Narrator] The next step is to test this code out.

2
00:00:02.070 --> 00:00:04.020
We've already written the user dao,

3
00:00:04.020 --> 00:00:05.070
we've created the user bean,

4
00:00:05.070 --> 00:00:07.090
and we've created the callable implementation.

5
00:00:07.090 --> 00:00:09.050
Now let's test this out.

6
00:00:09.050 --> 00:00:11.080
So, in a test class, the first thing that you have to do is

7
00:00:11.080 --> 00:00:15.020
get a collection of string values from that file.

8
00:00:15.020 --> 00:00:18.020
So let's come to the IDE, under the Tests folder,

9
00:00:18.020 --> 00:00:20.070
let's create a class.

10
00:00:20.070 --> 00:00:27.020
Let's call this TestExecutors,

11
00:00:27.020 --> 00:00:30.010
and let's grab the main method quickly.

12
00:00:30.010 --> 00:00:32.090
Okay, now we're going to write a separate method

13
00:00:32.090 --> 00:00:37.060
to read that file, and get a list of all those lines, okay?

14
00:00:37.060 --> 00:00:44.070
So, I'm going to say public static getUsersFromFile.

15
00:00:44.070 --> 00:00:49.020
The parameter to this will be a file name.

16
00:00:49.020 --> 00:00:51.000
And what is this going to return me?

17
00:00:51.000 --> 00:00:54.090
This is going to return me a list of string.

18
00:00:54.090 --> 00:00:57.060
Each line in the file is one string,

19
00:00:57.060 --> 00:01:00.070
and I'll make such a list of strings.

20
00:01:00.070 --> 00:01:03.080
Okay, now the file reading code

21
00:01:03.080 --> 00:01:05.040
is something that we've already coded

22
00:01:05.040 --> 00:01:06.070
in one of our previous demos,

23
00:01:06.070 --> 00:01:08.070
so I'm not going to write that code again.

24
00:01:08.070 --> 00:01:12.070
I'll pull it out from the AppThread.java class.

25
00:01:12.070 --> 00:01:15.070
Let's come down there, and that was the code

26
00:01:15.070 --> 00:01:18.050
that we'd written for the reading of the file.

27
00:01:18.050 --> 00:01:22.010
So let's take this, copy this from

28
00:01:22.010 --> 00:01:25.040
line number 25 to line number 34,

29
00:01:25.040 --> 00:01:28.040
copy, go back to the TestExecutors class,

30
00:01:28.040 --> 00:01:31.000
and paste it on line 21.

31
00:01:31.000 --> 00:01:34.030
Make sure the imports are provided,

32
00:01:34.030 --> 00:01:36.090
and let's also do one more thing,

33
00:01:36.090 --> 00:01:39.010
let's change the name of the log,

34
00:01:39.010 --> 00:01:43.000
so on line number 35, I'm just going to say,

35
00:01:43.000 --> 00:01:46.030
make this logger for the TestExecutors class.

36
00:01:46.030 --> 00:01:47.020
Right?

37
00:01:47.020 --> 00:01:49.050
So we have the file-reading code ready,

38
00:01:49.050 --> 00:01:51.070
the other change that we have to do is,

39
00:01:51.070 --> 00:01:56.000
the file name parameter is going to be an argument

40
00:01:56.000 --> 00:01:57.070
to the new file constructor.

41
00:01:57.070 --> 00:02:00.050
So let's make that change.

42
00:02:00.050 --> 00:02:02.090
Okay, right, so we're taking the file,

43
00:02:02.090 --> 00:02:04.080
and we're putting a while loop,

44
00:02:04.080 --> 00:02:07.010
and then we're going to read every line.

45
00:02:07.010 --> 00:02:08.030
Now, we're not going to read

46
00:02:08.030 --> 00:02:09.080
and print the line on the console,

47
00:02:09.080 --> 00:02:11.060
because that's not what we want to do,

48
00:02:11.060 --> 00:02:14.060
so let's come down here, on line number 29,

49
00:02:14.060 --> 00:02:18.030
I'm going to define a list of strings.

50
00:02:18.030 --> 00:02:19.050
Let's copy that.

51
00:02:19.050 --> 00:02:26.070
Let's say users, and create a new array list.

52
00:02:26.070 --> 00:02:27.070
Okay.

53
00:02:27.070 --> 00:02:29.020
And what I'm going to do is,

54
00:02:29.020 --> 00:02:31.030
every line that I read from the reader,

55
00:02:31.030 --> 00:02:34.080
on line 34, let's get rid of this line,

56
00:02:34.080 --> 00:02:40.030
and, take that users list, and add every line to it.

57
00:02:40.030 --> 00:02:41.070
There we go.

58
00:02:41.070 --> 00:02:44.040
Okay, we created a list of strings.

59
00:02:44.040 --> 00:02:47.040
And to that list, we are trying to add every line.

60
00:02:47.040 --> 00:02:49.050
So at the end of this loop, you're going to have

61
00:02:49.050 --> 00:02:51.080
the complete information from that file.

62
00:02:51.080 --> 00:02:52.070
Okay?

63
00:02:52.070 --> 00:02:59.000
So at the end of this, we just have to say return users.

64
00:02:59.000 --> 00:03:00.040
That's what it is returning.

65
00:03:00.040 --> 00:03:02.070
So our file-reading code is ready,

66
00:03:02.070 --> 00:03:05.060
and we have got all the user information from that file.

67
00:03:05.060 --> 00:03:07.010
So that was the first step.

68
00:03:07.010 --> 00:03:10.000
The next is, get the ExecutorService object

69
00:03:10.000 --> 00:03:11.090
from one of the factory methods

70
00:03:11.090 --> 00:03:13.040
in the Executors API.

71
00:03:13.040 --> 00:03:16.020
So the important part now, let's come to the main method.

72
00:03:16.020 --> 00:03:18.070
On line number 26, I'm going to now take

73
00:03:18.070 --> 00:03:22.020
the ExecutorService object.

74
00:03:22.020 --> 00:03:23.040
There it is.

75
00:03:23.040 --> 00:03:24.020
Take a reference.

76
00:03:24.020 --> 00:03:26.040
And how are you going to obtain this object?

77
00:03:26.040 --> 00:03:28.090
The same way as we did for the Executer interface

78
00:03:28.090 --> 00:03:30.030
in the last demo.

79
00:03:30.030 --> 00:03:35.020
We're going to use the utility class called Executors.

80
00:03:35.020 --> 00:03:36.050
This is the one.

81
00:03:36.050 --> 00:03:41.080
And we're going to say .newSingleThreadExecute.

82
00:03:41.080 --> 00:03:43.060
There's a single thread that is right now

83
00:03:43.060 --> 00:03:46.090
going to execute for this task, okay?

84
00:03:46.090 --> 00:03:49.010
Okay, once we do this, what is the next step?

85
00:03:49.010 --> 00:03:51.050
For each user, we are going to call

86
00:03:51.050 --> 00:03:55.010
the ExecutorService.submit to submit the task.

87
00:03:55.010 --> 00:03:57.000
So what we're going to do now is,

88
00:03:57.000 --> 00:04:00.010
we're going to get the list of strings,

89
00:04:00.010 --> 00:04:02.070
so we're going to call this method getUsersFromFile

90
00:04:02.070 --> 00:04:04.070
because of that we'll get a list of strings,

91
00:04:04.070 --> 00:04:07.010
okay, and for each user record,

92
00:04:07.010 --> 00:04:11.020
we are going to submit a task by the ExecutorService object.

93
00:04:11.020 --> 00:04:12.030
Okay?

94
00:04:12.030 --> 00:04:13.040
So let's do that.

95
00:04:13.040 --> 00:04:16.040
Let's go in the next line, and call that static method.

96
00:04:16.040 --> 00:04:18.060
So the return will be list of strings,

97
00:04:18.060 --> 00:04:22.090
so copy that from line 33, on line number 29,

98
00:04:22.090 --> 00:04:26.070
give it a reference, and just call that method.

99
00:04:26.070 --> 00:04:27.060
Right?

100
00:04:27.060 --> 00:04:29.000
Of course it will demand the file path,

101
00:04:29.000 --> 00:04:31.050
that can be picked up from your exercise folders,

102
00:04:31.050 --> 00:04:33.040
so let's go there.

103
00:04:33.040 --> 00:04:36.010
And that's the file, so I'm gonna take this path,

104
00:04:36.010 --> 00:04:41.020
copy, come right here, and paste this.

105
00:04:41.020 --> 00:04:42.070
And of course give the name of the file.

106
00:04:42.070 --> 00:04:48.070
So that will be new_users.txt.

107
00:04:48.070 --> 00:04:51.070
Okay.

108
00:04:51.070 --> 00:04:53.060
Once that's done, what next?

109
00:04:53.060 --> 00:04:55.060
I'm going to iterate this list.

110
00:04:55.060 --> 00:05:02.000
So I'm going to say, for every string user in users,

111
00:05:02.000 --> 00:05:03.050
I have to do something.

112
00:05:03.050 --> 00:05:04.050
What is that?

113
00:05:04.050 --> 00:05:08.020
For every user record, I have to submit the runable

114
00:05:08.020 --> 00:05:09.060
or the callable task.

115
00:05:09.060 --> 00:05:11.030
In our case of course it's the callable implementation,

116
00:05:11.030 --> 00:05:15.030
so we're going to submit that task for the UserProcessor.

117
00:05:15.030 --> 00:05:16.060
How're we going to do that?

118
00:05:16.060 --> 00:05:18.050
You have to take the service object,

119
00:05:18.050 --> 00:05:22.010
so I'm going to take service.submit,

120
00:05:22.010 --> 00:05:24.040
that's the method you want to invoke now.

121
00:05:24.040 --> 00:05:27.010
Remember in the Executor API demo,

122
00:05:27.010 --> 00:05:29.080
we had actually called the execute method,

123
00:05:29.080 --> 00:05:31.080
but then the submit method is available

124
00:05:31.080 --> 00:05:33.080
as a part of the ExecutorService,

125
00:05:33.080 --> 00:05:36.030
which will allow us to capture the output

126
00:05:36.030 --> 00:05:38.080
of the task that we want to submit.

127
00:05:38.080 --> 00:05:39.060
Right?

128
00:05:39.060 --> 00:05:41.040
So submit is a method that you want to call here.

129
00:05:41.040 --> 00:05:43.090
And, what are we going to do?

130
00:05:43.090 --> 00:05:47.000
We're going to create an instance of the user processor,

131
00:05:47.000 --> 00:05:49.080
because that's the callable implementation that we have.

132
00:05:49.080 --> 00:05:54.090
So I'm just going to say UserProcessor,

133
00:05:54.090 --> 00:05:57.050
that's the one, and of course its constructor

134
00:05:57.050 --> 00:05:59.020
demands two arguments.

135
00:05:59.020 --> 00:06:01.040
One, is the user record, which is the string

136
00:06:01.040 --> 00:06:03.050
that I've already gotten in the for loop,

137
00:06:03.050 --> 00:06:07.040
the other argument however is the dao object, right?

138
00:06:07.040 --> 00:06:10.000
Okay, so no worries, we'll put a semicolon here,

139
00:06:10.000 --> 00:06:18.000
come on line 31 and create that user dao quickly.

140
00:06:18.000 --> 00:06:19.090
Okay, so what we've done is,

141
00:06:19.090 --> 00:06:23.060
we have read all the users from the file on line 31,

142
00:06:23.060 --> 00:06:26.030
we've created an instance of the dao on line 32,

143
00:06:26.030 --> 00:06:28.080
and for every string user in this list,

144
00:06:28.080 --> 00:06:33.010
we are trying to submit one user processor callable task.

145
00:06:33.010 --> 00:06:34.060
That's what we're doing.

146
00:06:34.060 --> 00:06:35.060
Right?

147
00:06:35.060 --> 00:06:36.050
Okay.

148
00:06:36.050 --> 00:06:41.070
Now, the next step, is collect the output of each task

149
00:06:41.070 --> 00:06:42.090
in the future object.

150
00:06:42.090 --> 00:06:45.090
Okay, so let's go there, and see it.

151
00:06:45.090 --> 00:06:48.090
Future, and this Future was trying to return an integer.

152
00:06:48.090 --> 00:06:51.070
The callable implementation that we have

153
00:06:51.070 --> 00:06:54.070
actually written out is returning integer.

154
00:06:54.070 --> 00:06:56.000
In case you want to recollect that,

155
00:06:56.000 --> 00:06:58.070
just go to UserProcessor, there it is.

156
00:06:58.070 --> 00:07:00.070
You were trying to return an integer value,

157
00:07:00.070 --> 00:07:02.060
so that is what we'll also collect,

158
00:07:02.060 --> 00:07:03.090
as a part of the Future object.

159
00:07:03.090 --> 00:07:06.080
The Future is of integer.

160
00:07:06.080 --> 00:07:08.010
Okay?

161
00:07:08.010 --> 00:07:10.000
Next, what we're going to do?

162
00:07:10.000 --> 00:07:12.020
We have to shut down the ExecutorService

163
00:07:12.020 --> 00:07:13.070
and test the application.

164
00:07:13.070 --> 00:07:14.050
Right.

165
00:07:14.050 --> 00:07:15.080
So, there are a couple of things here,

166
00:07:15.080 --> 00:07:17.040
we have got the Future object,

167
00:07:17.040 --> 00:07:19.070
so the written value of the task

168
00:07:19.070 --> 00:07:21.090
has been captured in the Future object.

169
00:07:21.090 --> 00:07:24.080
Now if you want to see that, there is a way to do it.

170
00:07:24.080 --> 00:07:28.050
What you can do is, you can say sout, okay,

171
00:07:28.050 --> 00:07:35.060
and let's say, Result of the operation is,

172
00:07:35.060 --> 00:07:39.070
and say future.get.

173
00:07:39.070 --> 00:07:43.070
That's how you can retrieve the result of that output.

174
00:07:43.070 --> 00:07:44.060
Okay?

175
00:07:44.060 --> 00:07:47.010
So yes, the result is collected in the Future object

176
00:07:47.010 --> 00:07:48.020
but if you want to access that,

177
00:07:48.020 --> 00:07:50.060
there's an API called get that you have to invoke

178
00:07:50.060 --> 00:07:52.040
in order to see it for yourself.

179
00:07:52.040 --> 00:07:53.040
Okay?

180
00:07:53.040 --> 00:07:58.000
Let's make sure that we handle this exception right.

181
00:07:58.000 --> 00:08:00.010
So basically whenever the submit operation

182
00:08:00.010 --> 00:08:01.050
is going to be interrupted, it's going to throw

183
00:08:01.050 --> 00:08:03.080
an InterruptedException, and let's say something has gone

184
00:08:03.080 --> 00:08:05.070
wrong with the execution of the task,

185
00:08:05.070 --> 00:08:07.070
then ExecutionException will be thrown.

186
00:08:07.070 --> 00:08:09.010
So you will have to make sure that

187
00:08:09.010 --> 00:08:13.030
those exceptions are quickly handled using the catch blocks.

188
00:08:13.030 --> 00:08:15.060
Okay, let's also do one last thing.

189
00:08:15.060 --> 00:08:20.020
Let's come on the line number 45, after the for loop.

190
00:08:20.020 --> 00:08:26.080
Let's put a sys out saying main execution over, okay?

191
00:08:26.080 --> 00:08:28.070
Because there are a lot of things that we're doing.

192
00:08:28.070 --> 00:08:30.030
We got the Executor object,

193
00:08:30.030 --> 00:08:32.020
the service object, in this case,

194
00:08:32.020 --> 00:08:34.030
we read the data from the file,

195
00:08:34.030 --> 00:08:36.060
for each of the lines we are trying to invoke,

196
00:08:36.060 --> 00:08:39.030
or submit, the UserProcessor callable,

197
00:08:39.030 --> 00:08:40.070
and the result of that is obtained

198
00:08:40.070 --> 00:08:43.000
in the Future object, which we will access

199
00:08:43.000 --> 00:08:44.050
using future.get.

200
00:08:44.050 --> 00:08:46.020
And after all of this is complete,

201
00:08:46.020 --> 00:08:48.050
then we put a final statement in the main method,

202
00:08:48.050 --> 00:08:50.070
saying that yes, everything was done.

203
00:08:50.070 --> 00:08:51.080
Okay?

204
00:08:51.080 --> 00:08:53.070
All right, let's save this, and the last step

205
00:08:53.070 --> 00:08:56.000
is of course test the application.

206
00:08:56.000 --> 00:08:58.020
We missed one step, shut down the ExecutorService, great.

207
00:08:58.020 --> 00:08:59.080
So we'll do that first.

208
00:08:59.080 --> 00:09:04.030
Let's come down there, and say service,

209
00:09:04.030 --> 00:09:09.000
that's the ExecutorService, .shutdown.

210
00:09:09.000 --> 00:09:09.080
Okay?

211
00:09:09.080 --> 00:09:11.040
So we said right that the Executor framework

212
00:09:11.040 --> 00:09:14.010
is going to provide a clean shutdown of all the tasks.

213
00:09:14.010 --> 00:09:15.040
That's what we're trying to do.

214
00:09:15.040 --> 00:09:17.040
We're going to talk more about the shutdown API

215
00:09:17.040 --> 00:09:19.050
in the subsequent video, but right now,

216
00:09:19.050 --> 00:09:21.090
let's stick to this that we are starting the service,

217
00:09:21.090 --> 00:09:24.020
and then we're shutting it down on line number 45,

218
00:09:24.020 --> 00:09:26.060
after all the tasks get completed.

219
00:09:26.060 --> 00:09:27.040
Right?

220
00:09:27.040 --> 00:09:28.090
So if there are 10 users in that file,

221
00:09:28.090 --> 00:09:32.010
they'll be 10 callable tasks that will be submitted.

222
00:09:32.010 --> 00:09:35.030
One callable task per user record.

223
00:09:35.030 --> 00:09:36.030
Hope that's clear.

224
00:09:36.030 --> 00:09:37.060
Okay.

225
00:09:37.060 --> 00:09:40.050
All right, so now let's go to the database,

226
00:09:40.050 --> 00:09:42.000
that's the user table that I have,

227
00:09:42.000 --> 00:09:43.040
let's make a select query.

228
00:09:43.040 --> 00:09:46.080
We have nothing, as of now, in that table.

229
00:09:46.080 --> 00:09:50.000
Let's go back to the IDE, and now, we'll run this.

230
00:09:50.000 --> 00:09:51.050
Okay?

231
00:09:51.050 --> 00:09:54.020
And we'll see whether everything goes well.

232
00:09:54.020 --> 00:09:57.000
So, right click and say Run File.

233
00:09:57.000 --> 00:09:58.040
Let's test it out.

234
00:09:58.040 --> 00:10:01.030
Okay, there we are. Great.

235
00:10:01.030 --> 00:10:02.060
So do you see the output?

236
00:10:02.060 --> 00:10:04.070
It's saying pool-1-thread-1-processing record

237
00:10:04.070 --> 00:10:06.060
for Henry Cavell,

238
00:10:06.060 --> 00:10:09.090
and then pool-1-thread-1-processing record for Brad Pitt,

239
00:10:09.090 --> 00:10:13.000
pool-1-thread-1-processing again for Leonardo DiCaprio,

240
00:10:13.000 --> 00:10:15.090
all of these are my favorite actors, so yeah.

241
00:10:15.090 --> 00:10:18.020
And why is it pool-1-thread-1?

242
00:10:18.020 --> 00:10:19.080
That's because take a look.

243
00:10:19.080 --> 00:10:21.080
We said newSingleThreadExecutor.

244
00:10:21.080 --> 00:10:24.070
That's exactly why there's a single thread

245
00:10:24.070 --> 00:10:28.090
that is trying to insert every user record in the database.

246
00:10:28.090 --> 00:10:29.070
Right?

247
00:10:29.070 --> 00:10:30.060
So let's quickly check the database

248
00:10:30.060 --> 00:10:32.070
and see if the user records indeed came in.

249
00:10:32.070 --> 00:10:34.080
Yeah, we got that.

250
00:10:34.080 --> 00:10:35.070
Right?

251
00:10:35.070 --> 00:10:37.060
So this was a background task that we spawn,

252
00:10:37.060 --> 00:10:39.020
in order to process user information,

253
00:10:39.020 --> 00:10:41.090
and save each entry into the database.

254
00:10:41.090 --> 00:10:45.060
And all of this, we did with the ExecutorService.

255
00:10:45.060 --> 00:10:48.000
The rest of the stuff we will see in the next video.

