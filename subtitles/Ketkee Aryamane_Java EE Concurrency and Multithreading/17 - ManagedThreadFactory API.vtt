WEBVTT
1
00:00:00.050 --> 00:00:01.030
- [Instructor] Let's take a look

2
00:00:01.030 --> 00:00:03.090
at the ManagedThreadFactory API now.

3
00:00:03.090 --> 00:00:05.080
So this is a managed version

4
00:00:05.080 --> 00:00:08.020
of the Java Standard Edition ThreadFactory

5
00:00:08.020 --> 00:00:11.010
that we have taken a look at in our earlier videos.

6
00:00:11.010 --> 00:00:13.010
And of course, this is also to create threads

7
00:00:13.010 --> 00:00:15.050
in the application, and when you talk

8
00:00:15.050 --> 00:00:17.010
about ManagedThreadFactory, this is going

9
00:00:17.010 --> 00:00:19.020
to be managed by the container.

10
00:00:19.020 --> 00:00:21.090
Like your ManagedExecutorService

11
00:00:21.090 --> 00:00:24.010
and your ManagedScheduledExecutorService,

12
00:00:24.010 --> 00:00:27.070
this API, too, can be injected using the JNDI lookup

13
00:00:27.070 --> 00:00:30.010
or the Resource annotation.

14
00:00:30.010 --> 00:00:32.000
Additionally, the interesting thing

15
00:00:32.000 --> 00:00:34.070
with ManagedThreadFactory is that it can be used

16
00:00:34.070 --> 00:00:38.030
with the Java Standard Edition ExecutorService.

17
00:00:38.030 --> 00:00:41.080
Inside the Java Standard Edition platform there is an API,

18
00:00:41.080 --> 00:00:46.070
called java.util.concurrent.ThreadPoolExecutor.

19
00:00:46.070 --> 00:00:50.050
This API allows you to create and execute a service,

20
00:00:50.050 --> 00:00:53.040
specifying your own configuration parameters.

21
00:00:53.040 --> 00:00:56.020
Let's say for the full size, what is a maximum number

22
00:00:56.020 --> 00:00:57.090
of thread that can live in the pool,

23
00:00:57.090 --> 00:01:00.080
what is a keeper lifetime, how many tasks should be held

24
00:01:00.080 --> 00:01:02.060
in the queue, and all of that.

25
00:01:02.060 --> 00:01:04.040
We will see how to do this in the subsequent demo,

26
00:01:04.040 --> 00:01:06.020
but this is just to tell you right now

27
00:01:06.020 --> 00:01:07.060
that this is possible.

28
00:01:07.060 --> 00:01:10.020
And when you create the ExecutorService

29
00:01:10.020 --> 00:01:12.040
out of a ThreadPoolExecutor,

30
00:01:12.040 --> 00:01:15.070
you feed the ManagedThreadFactory API to it

31
00:01:15.070 --> 00:01:18.050
so that all the threads manufactured

32
00:01:18.050 --> 00:01:21.060
this way will run with the container context.

33
00:01:21.060 --> 00:01:23.060
We'll see what we are talking about

34
00:01:23.060 --> 00:01:26.000
when we do the demo in the next video.

