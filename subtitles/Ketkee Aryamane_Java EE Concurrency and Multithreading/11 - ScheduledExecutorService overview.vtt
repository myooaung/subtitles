WEBVTT
1
00:00:00.060 --> 00:00:02.010
- [Instructor] We have seen the Executor,

2
00:00:02.010 --> 00:00:03.050
and we've seen the ExecutorService,

3
00:00:03.050 --> 00:00:04.040
now let's take a look at

4
00:00:04.040 --> 00:00:07.010
the ScheduledExecutorService interface.

5
00:00:07.010 --> 00:00:09.070
It's a sub-interface of the ExecutorService,

6
00:00:09.070 --> 00:00:11.040
and as the name suggests,

7
00:00:11.040 --> 00:00:14.020
it is used to schedule certain jobs, right?

8
00:00:14.020 --> 00:00:16.070
So we just got a special method called a schedule,

9
00:00:16.070 --> 00:00:21.000
which will help you run jobs after a given delay.

10
00:00:21.000 --> 00:00:22.030
So you can actually start a job

11
00:00:22.030 --> 00:00:25.060
after some initial delay and then the job can run for you.

12
00:00:25.060 --> 00:00:26.090
Something like that, okay?

13
00:00:26.090 --> 00:00:29.000
There are two other flavors of methods:

14
00:00:29.000 --> 00:00:32.040
scheduleWithFixedDelay and scheduleAtFixedRate.

15
00:00:32.040 --> 00:00:35.000
So those are the methods that you may want to employ

16
00:00:35.000 --> 00:00:37.080
if you want to execute your jobs in the application

17
00:00:37.080 --> 00:00:42.060
at periodic intervals or with certain definite delay, okay?

18
00:00:42.060 --> 00:00:45.050
So let's go to the next slide and see

19
00:00:45.050 --> 00:00:48.000
what is the use case that we are going to implement

20
00:00:48.000 --> 00:00:51.040
as a part of this API's demo that we are going to do.

21
00:00:51.040 --> 00:00:54.030
Now when you talk about schedule jobs in your application,

22
00:00:54.030 --> 00:00:58.030
it is generally a very common use case that we have:

23
00:00:58.030 --> 00:01:01.040
clean up and maintenance activities for the application.

24
00:01:01.040 --> 00:01:03.060
Okay, so we're going to pick up a similar use case.

25
00:01:03.060 --> 00:01:07.000
We're going to do a housekeeping job for the application.

26
00:01:07.000 --> 00:01:08.070
What are we going to do under that?

27
00:01:08.070 --> 00:01:10.070
We'll pick up a folder from a machine,

28
00:01:10.070 --> 00:01:13.020
we'll list all the files from the folder,

29
00:01:13.020 --> 00:01:16.070
and we're going to check the time stamp on each of the file.

30
00:01:16.070 --> 00:01:18.050
Let's say if the time stamp is maybe

31
00:01:18.050 --> 00:01:20.080
greater than five minutes or ten minutes

32
00:01:20.080 --> 00:01:22.090
or whatever time that you want to decide,

33
00:01:22.090 --> 00:01:24.060
then we want to delete that file.

34
00:01:24.060 --> 00:01:26.050
We do not want to keep maintaining those files,

35
00:01:26.050 --> 00:01:28.020
let's clean them up.

36
00:01:28.020 --> 00:01:30.030
So we're going to write this chore

37
00:01:30.030 --> 00:01:33.030
as the ScheduledExecutorService use case demo.

38
00:01:33.030 --> 00:01:34.070
So what are we going to do in it?

39
00:01:34.070 --> 00:01:36.050
There will be a class, which is of course

40
00:01:36.050 --> 00:01:38.050
a runnable or re-callable implementation,

41
00:01:38.050 --> 00:01:40.080
and the sole job of this particular class

42
00:01:40.080 --> 00:01:43.000
will be to clean up the old files.

43
00:01:43.000 --> 00:01:45.050
Once we do that, we're going to write a test class

44
00:01:45.050 --> 00:01:46.050
where we are going to pick up

45
00:01:46.050 --> 00:01:48.090
the ScheduledExecutorService object

46
00:01:48.090 --> 00:01:50.010
and we are going to make sure that

47
00:01:50.010 --> 00:01:53.060
this job of clean up is scheduled accordingly.

48
00:01:53.060 --> 00:01:55.080
This is a loop.

49
00:01:55.080 --> 00:01:57.000
Why is it shown as a loop?

50
00:01:57.000 --> 00:01:59.080
Because this job may be scheduled many times

51
00:01:59.080 --> 00:02:01.000
during the application so it'll

52
00:02:01.000 --> 00:02:04.010
keep coming again and again, right?

53
00:02:04.010 --> 00:02:05.040
So the next video, we'll look at the

54
00:02:05.040 --> 00:02:07.000
detailed demo for this.

