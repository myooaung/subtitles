WEBVTT
1
00:00:00.050 --> 00:00:03.020
- [Woman] Now that we have taken a look at basic APIs

2
00:00:03.020 --> 00:00:05.070
under the Concurrency platforming for Enterprise,

3
00:00:05.070 --> 00:00:07.080
let's start looking at the demos.

4
00:00:07.080 --> 00:00:11.040
How are you going to use these APIs in the use cases?

5
00:00:11.040 --> 00:00:13.080
So the first one is the Managed Executor Service.

6
00:00:13.080 --> 00:00:16.060
To just recollect, the Managed Executor Service extends

7
00:00:16.060 --> 00:00:20.010
the Java standard edition executor service,

8
00:00:20.010 --> 00:00:23.010
and it will help you with methods for submitting tasks

9
00:00:23.010 --> 00:00:27.020
for execution in a Java enterprise environment.

10
00:00:27.020 --> 00:00:30.090
And this managed executor service resource can be gotten

11
00:00:30.090 --> 00:00:34.000
into the code by means of the GNBI lookup

12
00:00:34.000 --> 00:00:36.060
or the resource annotation, or by configuring it

13
00:00:36.060 --> 00:00:38.090
in the deployment descriptor.

14
00:00:38.090 --> 00:00:41.070
Let me make it very clear that in this course

15
00:00:41.070 --> 00:00:43.090
we are going to stick to the GNBI lookup

16
00:00:43.090 --> 00:00:46.070
or the resource annotation injection mechanism

17
00:00:46.070 --> 00:00:50.050
for getting these managed executor objects.

18
00:00:50.050 --> 00:00:51.090
Let's now look at the use case.

19
00:00:51.090 --> 00:00:53.060
The use case that we've opted is

20
00:00:53.060 --> 00:00:56.010
generating reports for users.

21
00:00:56.010 --> 00:00:59.050
So let's say I have a list of bank accounts with me,

22
00:00:59.050 --> 00:01:02.030
and I have transactions against those bank accounts,

23
00:01:02.030 --> 00:01:06.020
so I'm going to generate a report for all the transactions

24
00:01:06.020 --> 00:01:08.050
for bank account. Okay?

25
00:01:08.050 --> 00:01:11.010
Now, in order to do that, we are going to do it in steps.

26
00:01:11.010 --> 00:01:14.000
We first read the bank account information for all users

27
00:01:14.000 --> 00:01:16.090
from the database, and for each bank account

28
00:01:16.090 --> 00:01:19.030
we are going to retrieve the transaction information.

29
00:01:19.030 --> 00:01:21.070
Once we have the transaction information ready,

30
00:01:21.070 --> 00:01:24.060
we will write all of that to a file.

31
00:01:24.060 --> 00:01:27.050
So let's understand how we are going to do this.

32
00:01:27.050 --> 00:01:29.070
So the use cases generate reports for users,

33
00:01:29.070 --> 00:01:32.080
read bank account information for all users from the DB,

34
00:01:32.080 --> 00:01:35.070
get all the transaction information for each bank account,

35
00:01:35.070 --> 00:01:37.050
and save to a file.

36
00:01:37.050 --> 00:01:40.050
So the components, the classes that we are going to create

37
00:01:40.050 --> 00:01:41.060
will look like this.

38
00:01:41.060 --> 00:01:44.030
First is we'll create a data access object class which is

39
00:01:44.030 --> 00:01:47.050
dedicated for doing all database transactions for us.

40
00:01:47.050 --> 00:01:49.070
So whatever information that you're reading,

41
00:01:49.070 --> 00:01:51.060
it could be bank account or transaction,

42
00:01:51.060 --> 00:01:53.080
all methods with respect to that will go

43
00:01:53.080 --> 00:01:55.040
inside the Dao class.

44
00:01:55.040 --> 00:01:58.050
Up next will be the actual task that you want to write,

45
00:01:58.050 --> 00:02:01.000
which is again a Runnable or a Callable implementation,

46
00:02:01.000 --> 00:02:03.020
and the job of this Runnable or Callable

47
00:02:03.020 --> 00:02:06.000
will be to generate that transaction report.

48
00:02:06.000 --> 00:02:07.080
So it has to get the transaction information

49
00:02:07.080 --> 00:02:10.020
for each bank account, and then go ahead

50
00:02:10.020 --> 00:02:12.040
and save that to a file.

51
00:02:12.040 --> 00:02:15.060
Next, we will of course have the REST for bean,

52
00:02:15.060 --> 00:02:19.050
and there we are going to get the managed executor service

53
00:02:19.050 --> 00:02:22.030
object from the container environment by GNDI

54
00:02:22.030 --> 00:02:25.070
or resource annotation, and we are going to submit

55
00:02:25.070 --> 00:02:28.080
one task per bank account. Okay?

56
00:02:28.080 --> 00:02:31.040
And since we have these many bank accounts present,

57
00:02:31.040 --> 00:02:32.090
in a live application, of course, you will have

58
00:02:32.090 --> 00:02:34.060
so many bank accounts that you can't have

59
00:02:34.060 --> 00:02:37.020
in a banking website, so we are not going to use

60
00:02:37.020 --> 00:02:39.050
multiple database connections.

61
00:02:39.050 --> 00:02:42.040
This time, we are also going to do connection pooling.

62
00:02:42.040 --> 00:02:44.040
I have opted to do connection pooling via an

63
00:02:44.040 --> 00:02:46.090
external library C3PO.

64
00:02:46.090 --> 00:02:48.070
There are tons of libraries out there

65
00:02:48.070 --> 00:02:50.080
and you're free to choose any one of them.

66
00:02:50.080 --> 00:02:53.040
In case you with, you can also drop this off

67
00:02:53.040 --> 00:02:54.060
because for demonstration purpose,

68
00:02:54.060 --> 00:02:56.060
you wouldn't need connection pooling.

69
00:02:56.060 --> 00:02:58.070
But I just wanted to click this in so that,

70
00:02:58.070 --> 00:03:01.040
you know, you understand that for real life use case,

71
00:03:01.040 --> 00:03:03.030
how does this entire thing work like.

72
00:03:03.030 --> 00:03:04.080
So connection pooling is important.

73
00:03:04.080 --> 00:03:06.060
So we're going to do this connection pooling

74
00:03:06.060 --> 00:03:08.030
via the C3PO library.

75
00:03:08.030 --> 00:03:10.000
Do not worry too much about the code;

76
00:03:10.000 --> 00:03:12.060
I'll explain everything to you when we write it down.

77
00:03:12.060 --> 00:03:14.030
So this is the overview of the demo

78
00:03:14.030 --> 00:03:15.040
that we are going to execute.

79
00:03:15.040 --> 00:03:17.020
This is going to be a very long demo,

80
00:03:17.020 --> 00:03:20.000
so we'll have to keep patience.

