WEBVTT
1
00:00:00.050 --> 00:00:02.020
- [Instructor] Now that we have laid down a foundation

2
00:00:02.020 --> 00:00:05.020
for the Java Standard Edition platform concurrency APIs,

3
00:00:05.020 --> 00:00:08.000
it's time to move on to the Java Enterprise Edition

4
00:00:08.000 --> 00:00:11.000
concurrency utilities, but the first basic question

5
00:00:11.000 --> 00:00:14.040
that should come to mind is, why do we need a separate API?

6
00:00:14.040 --> 00:00:16.030
We already know that a certain API's under

7
00:00:16.030 --> 00:00:19.030
the Standard Edition platform, why can't we just use them

8
00:00:19.030 --> 00:00:21.070
and integrate into the Enterprise application?

9
00:00:21.070 --> 00:00:25.050
Yeah, that's a very valid question and let's understand why.

10
00:00:25.050 --> 00:00:28.030
Every Java Enterprise application always works

11
00:00:28.030 --> 00:00:31.090
within an application server, the underlying container,

12
00:00:31.090 --> 00:00:34.040
and these containers provide runtime support

13
00:00:34.040 --> 00:00:37.010
for application components like Enterprise Java Beans

14
00:00:37.010 --> 00:00:38.040
and servlets.

15
00:00:38.040 --> 00:00:41.070
They provide a layer between the application component code

16
00:00:41.070 --> 00:00:45.020
and the platform services and resources.

17
00:00:45.020 --> 00:00:47.090
Very often, Java Enterprise servers provide

18
00:00:47.090 --> 00:00:49.090
central resource management,

19
00:00:49.090 --> 00:00:52.050
resources like JDBC data sources,

20
00:00:52.050 --> 00:00:56.020
transaction management, connection pooling, et cetera.

21
00:00:56.020 --> 00:00:59.050
These resources are centrally managed

22
00:00:59.050 --> 00:01:02.010
so that the other application components

23
00:01:02.010 --> 00:01:05.070
do not end up consuming unnecessary resources.

24
00:01:05.070 --> 00:01:07.060
So, there is this managed environment

25
00:01:07.060 --> 00:01:10.070
that is set up by the container, and in such an environment,

26
00:01:10.070 --> 00:01:13.000
application integrity is very important.

27
00:01:13.000 --> 00:01:16.010
So, when you have a managed environment like that,

28
00:01:16.010 --> 00:01:19.040
applications can coexist without causing any harm

29
00:01:19.040 --> 00:01:21.030
to the overall system.

30
00:01:21.030 --> 00:01:23.010
So, when you have a thread running a job

31
00:01:23.010 --> 00:01:24.090
in an enterprise environment,

32
00:01:24.090 --> 00:01:26.080
the container is going to expect

33
00:01:26.080 --> 00:01:30.020
that the thread gets all the container's supplied objects

34
00:01:30.020 --> 00:01:34.050
and resources to run the asynchronous task.

35
00:01:34.050 --> 00:01:36.070
Another thing is, the thread is required

36
00:01:36.070 --> 00:01:40.040
to access the Standard Enterprise Edition services,

37
00:01:40.040 --> 00:01:42.010
like Java Messaging Service,

38
00:01:42.010 --> 00:01:44.010
Enterprise Java Beans, et cetera.

39
00:01:44.010 --> 00:01:47.030
And for this, it is required that the contextual information

40
00:01:47.030 --> 00:01:50.020
of the container is provided to the thread.

41
00:01:50.020 --> 00:01:51.090
Contextual information is Java naming

42
00:01:51.090 --> 00:01:55.020
and directory interface naming, class loader information,

43
00:01:55.020 --> 00:01:57.070
security context.

44
00:01:57.070 --> 00:01:59.040
It is very important that the container

45
00:01:59.040 --> 00:02:01.080
propagates this information to all the threads

46
00:02:01.080 --> 00:02:03.070
executing the jobs for you.

47
00:02:03.070 --> 00:02:06.080
Now we've seen that there's a managed environment,

48
00:02:06.080 --> 00:02:08.040
the central resource management,

49
00:02:08.040 --> 00:02:10.070
this contextual information, et cetera,

50
00:02:10.070 --> 00:02:14.060
which means, if we try to create our own threads

51
00:02:14.060 --> 00:02:17.010
using the Java Standard Edition platform,

52
00:02:17.010 --> 00:02:19.020
then the container will not be aware

53
00:02:19.020 --> 00:02:22.050
or wouldn't have any knowledge of these thread resources.

54
00:02:22.050 --> 00:02:24.050
And in that case, it will be problem

55
00:02:24.050 --> 00:02:27.010
because it will not be able to provide correctly

56
00:02:27.010 --> 00:02:29.020
the contextual information needed

57
00:02:29.020 --> 00:02:32.050
to access the Java Enterprise services.

58
00:02:32.050 --> 00:02:34.020
That's why when you have an Enterprise Java Bean

59
00:02:34.020 --> 00:02:38.090
or a servlet, they are not able to reliably use

60
00:02:38.090 --> 00:02:42.040
the standard EE services from a thread

61
00:02:42.040 --> 00:02:45.000
which is not managed by the container.

62
00:02:45.000 --> 00:02:47.080
So, now it'll be wiser for the container

63
00:02:47.080 --> 00:02:49.090
to have those threads managed instead

64
00:02:49.090 --> 00:02:52.030
of us creating them ourselves,

65
00:02:52.030 --> 00:02:55.040
and that's exactly why the Java Enterprise Edition

66
00:02:55.040 --> 00:02:58.040
concurrency utilities were born.

67
00:02:58.040 --> 00:03:01.010
So, this API was released as a Java specification

68
00:03:01.010 --> 00:03:03.090
request 236 in Java EE 7,

69
00:03:03.090 --> 00:03:05.070
which enabled enterprise applications

70
00:03:05.070 --> 00:03:08.010
to submit asynchronous tasks.

71
00:03:08.010 --> 00:03:11.030
So, the goal was to define and use centralized,

72
00:03:11.030 --> 00:03:15.030
manageable objects inside the Java Enterprise server.

73
00:03:15.030 --> 00:03:17.070
Now, the Java Enterprise concurrency API

74
00:03:17.070 --> 00:03:21.060
is actually an extension to the java.util.concurrent APIs,

75
00:03:21.060 --> 00:03:24.000
which is a Standard Edition platform,

76
00:03:24.000 --> 00:03:26.070
and it was done so that there's a smooth migration path

77
00:03:26.070 --> 00:03:29.040
from the SE to the EE.

78
00:03:29.040 --> 00:03:32.000
So, these new concurrency APIs that are a part

79
00:03:32.000 --> 00:03:35.040
of the Java Enterprise platform now become the resources

80
00:03:35.040 --> 00:03:38.020
of the container, so everything is going to managed

81
00:03:38.020 --> 00:03:40.000
by the container now.

82
00:03:40.000 --> 00:03:42.050
These concurrency APIs will help you to manage

83
00:03:42.050 --> 00:03:46.010
and monitor the lifecycle of all the asynchronous operations

84
00:03:46.010 --> 00:03:48.080
in your Java Enterprise application component.

85
00:03:48.080 --> 00:03:51.050
So, it could be an EJB, it could be a servlet,

86
00:03:51.050 --> 00:03:53.080
it could be a RESTful bean.

87
00:03:53.080 --> 00:03:56.080
And when you have all the threads

88
00:03:56.080 --> 00:03:59.060
and all these resources managed by the container,

89
00:03:59.060 --> 00:04:01.010
then the threads which are executing

90
00:04:01.010 --> 00:04:02.030
the tasks will be provided

91
00:04:02.030 --> 00:04:06.020
with the correct contextual information of the container.

92
00:04:06.020 --> 00:04:09.070
In the next video, we will look at the API hierarchy,

93
00:04:09.070 --> 00:04:11.000
the main APIs that we're going

94
00:04:11.000 --> 00:04:14.000
to take a look at in this course.

