WEBVTT
1
00:00:00.060 --> 00:00:01.050
- [Narrator] Let's go ahead with the

2
00:00:01.050 --> 00:00:04.060
Managed Scheduled Executor Service demo.

3
00:00:04.060 --> 00:00:06.020
So the steps are listed on the slide.

4
00:00:06.020 --> 00:00:07.030
Of course, it's the use case

5
00:00:07.030 --> 00:00:08.070
for the health check of the app.

6
00:00:08.070 --> 00:00:11.030
So the first step is add a REST class in the project

7
00:00:11.030 --> 00:00:13.010
and assign path annnotation to it.

8
00:00:13.010 --> 00:00:16.000
So let's go to IDE, and in this,

9
00:00:16.000 --> 00:00:19.030
I'm going to create a class under the com.app.rest

10
00:00:19.030 --> 00:00:22.010
and I'm going to label this URL

11
00:00:22.010 --> 00:00:25.030
"HealthResource" let's say.

12
00:00:25.030 --> 00:00:29.080
And let's add the path annotation to it.

13
00:00:29.080 --> 00:00:31.030
And let's give it a value.

14
00:00:31.030 --> 00:00:36.090
So let's say we're going to call this "urlCheck."

15
00:00:36.090 --> 00:00:37.090
What's the next step?

16
00:00:37.090 --> 00:00:42.020
Inject the Managed Scheduled Executor Service object

17
00:00:42.020 --> 00:00:44.080
by the resource annotation and the REST will be.

18
00:00:44.080 --> 00:00:46.020
So we have our server,

19
00:00:46.020 --> 00:00:49.040
and we have the Concurrent Resources.

20
00:00:49.040 --> 00:00:51.060
Let's go to Concurrent Resources

21
00:00:51.060 --> 00:00:53.080
and Managed Scheduled Executor Service.

22
00:00:53.080 --> 00:00:55.070
So the default object that the container anyway

23
00:00:55.070 --> 00:00:57.070
provides you, the GlassFish server.

24
00:00:57.070 --> 00:00:59.010
It's available to you right there.

25
00:00:59.010 --> 00:01:01.040
So I'm gonna take that JNDI name,

26
00:01:01.040 --> 00:01:02.060
copy it,

27
00:01:02.060 --> 00:01:04.040
and come back to the IDE.

28
00:01:04.040 --> 00:01:06.000
And inside this, I'm going

29
00:01:06.000 --> 00:01:09.040
to have the Resource annotation inserted first.

30
00:01:09.040 --> 00:01:12.040
And to this, I'm gonna pass a parameter lookup

31
00:01:12.040 --> 00:01:14.060
which will be the JNDI name of

32
00:01:14.060 --> 00:01:17.060
"ManagedScheduledExecutorService."

33
00:01:17.060 --> 00:01:19.000
And then let's create a variable

34
00:01:19.000 --> 00:01:21.070
which we'll tide up further "lookup."

35
00:01:21.070 --> 00:01:32.000
So that will be "ManagedScheduledExecutorService."

36
00:01:32.000 --> 00:01:33.070
The next step will be create

37
00:01:33.070 --> 00:01:36.050
a runnable implementation URL processor

38
00:01:36.050 --> 00:01:39.060
which will check whether the given URL is running or not.

39
00:01:39.060 --> 00:01:42.030
So the health check will be the task.

40
00:01:42.030 --> 00:01:45.000
So let's go ahead in the IDE and under "runnables"

41
00:01:45.000 --> 00:01:49.030
create a "URLHealthProcessor."

42
00:01:49.030 --> 00:01:54.060
Maybe that's a better name.

43
00:01:54.060 --> 00:02:01.030
Let's say this is going to implement Runnable.

44
00:02:01.030 --> 00:02:04.020
So you'll have to basically implement the run method,

45
00:02:04.020 --> 00:02:08.040
and get rid of the default implementation.

46
00:02:08.040 --> 00:02:09.090
So, what are we going to do here?

47
00:02:09.090 --> 00:02:11.040
We are basically going to

48
00:02:11.040 --> 00:02:13.030
check the health of the application.

49
00:02:13.030 --> 00:02:15.010
And it's a very simple health check that we're doing.

50
00:02:15.010 --> 00:02:16.070
We're just taking a URL,

51
00:02:16.070 --> 00:02:20.030
trying to access the URL via the Java.net APIs,

52
00:02:20.030 --> 00:02:22.090
and then it'll come back with a response to us.

53
00:02:22.090 --> 00:02:24.020
If the response is 200,

54
00:02:24.020 --> 00:02:26.020
we say that "yes, the URL is working."

55
00:02:26.020 --> 00:02:28.060
If not, then there's a failure.

56
00:02:28.060 --> 00:02:30.000
So, the URL is down.

57
00:02:30.000 --> 00:02:31.010
That's what we're going to do.

58
00:02:31.010 --> 00:02:35.000
So, let's go ahead and take one instance variable here.

59
00:02:35.000 --> 00:02:40.070
Or let's say maybe "private static final String"

60
00:02:40.070 --> 00:02:42.020
and that'll be "urlName."

61
00:02:42.020 --> 00:02:44.040
So we don't need an instance variable.

62
00:02:44.040 --> 00:02:46.060
We're just going to have a final string

63
00:02:46.060 --> 00:02:48.030
which is the urlName.

64
00:02:48.030 --> 00:02:49.010
Okay?

65
00:02:49.010 --> 00:02:52.020
So let's say I'm going to take "http,"

66
00:02:52.020 --> 00:02:55.010
let's check out the health of Google itself.

67
00:02:55.010 --> 00:02:59.000
Let's see whether Google is up and running all the time.

68
00:02:59.000 --> 00:03:01.040
So, up next what we have to do is,

69
00:03:01.040 --> 00:03:03.080
on line #18 inside the run method,

70
00:03:03.080 --> 00:03:07.020
let's first create one variable which we'll denote

71
00:03:07.020 --> 00:03:10.000
"statusOfApp."

72
00:03:10.000 --> 00:03:13.080
Let's initialize it to an empty value.

73
00:03:13.080 --> 00:03:15.040
And then next is we're going to create

74
00:03:15.040 --> 00:03:17.020
an object of the URL class.

75
00:03:17.020 --> 00:03:21.030
Now, this is going to come from the Java.net APIs.

76
00:03:21.030 --> 00:03:22.060
That's the package.

77
00:03:22.060 --> 00:03:24.010
Java.net.

78
00:03:24.010 --> 00:03:28.030
Let's create an instance, say "new URL."

79
00:03:28.030 --> 00:03:30.070
And let's feed the urlName that we have already

80
00:03:30.070 --> 00:03:32.090
declared as a constant up there.

81
00:03:32.090 --> 00:03:34.030
So, yes.

82
00:03:34.030 --> 00:03:35.070
That's what it is.

83
00:03:35.070 --> 00:03:36.060
Once we do this,

84
00:03:36.060 --> 00:03:40.020
let's get hold of HttpURLConnection

85
00:03:40.020 --> 00:03:44.050
which is also going to come from the Java.net package

86
00:03:44.050 --> 00:03:46.060
and let's take a reference for this.

87
00:03:46.060 --> 00:03:49.060
And on that URL object that we created,

88
00:03:49.060 --> 00:03:52.000
the instance on line #22,

89
00:03:52.000 --> 00:03:55.050
on that there's a method which is "openConnection."

90
00:03:55.050 --> 00:03:57.090
So, this returns an object.

91
00:03:57.090 --> 00:04:01.090
I will have to make sure that we cast it correctly

92
00:04:01.090 --> 00:04:03.060
to the HttpURLConnection

93
00:04:03.060 --> 00:04:07.090
because http request is what we're trying to make here.

94
00:04:07.090 --> 00:04:09.010
Once that is done,

95
00:04:09.010 --> 00:04:11.020
we also have to make sure

96
00:04:11.020 --> 00:04:15.030
that the connection has got a request method set.

97
00:04:15.030 --> 00:04:18.040
So, setRequestMethod,

98
00:04:18.040 --> 00:04:19.040
that's the API,

99
00:04:19.040 --> 00:04:21.030
and we will say that we're just making

100
00:04:21.030 --> 00:04:23.070
a "GET" request to this URL.

101
00:04:23.070 --> 00:04:24.080
We just have to make a "GET" request

102
00:04:24.080 --> 00:04:27.030
and see whether it is running.

103
00:04:27.030 --> 00:04:29.090
And then, we'll take the connection object

104
00:04:29.090 --> 00:04:32.090
and we call the connect API.

105
00:04:32.090 --> 00:04:34.090
Once that's done, on line #27,

106
00:04:34.090 --> 00:04:37.000
I'm going to take an integer variable

107
00:04:37.000 --> 00:04:40.060
which is going to signify the responseCode.

108
00:04:40.060 --> 00:04:43.080
And responseCode is going to come out of the

109
00:04:43.080 --> 00:04:49.010
connection's getResponseCode API call.

110
00:04:49.010 --> 00:04:51.050
That's the one.

111
00:04:51.050 --> 00:04:53.090
Once this is done, I'm gonna check whether

112
00:04:53.090 --> 00:04:57.010
the responseCode is equal to 200.

113
00:04:57.010 --> 00:05:03.030
So, if it is, then the status of the app will be

114
00:05:03.030 --> 00:05:08.000
"Yes, it is working!"

115
00:05:08.000 --> 00:05:10.060
In case it is not going to be 200,

116
00:05:10.060 --> 00:05:12.010
which means we were not able

117
00:05:12.010 --> 00:05:13.060
to have that application up and running,

118
00:05:13.060 --> 00:05:17.040
so in that case we will just go ahead and say

119
00:05:17.040 --> 00:05:19.020
statusOfApp as "Sorry!

120
00:05:19.020 --> 00:05:24.030
Something went wrong."

121
00:05:24.030 --> 00:05:27.050
So we have basically set the status.

122
00:05:27.050 --> 00:05:28.070
It is a string variable

123
00:05:28.070 --> 00:05:31.010
and according to the response, of course, that's received

124
00:05:31.010 --> 00:05:33.090
from the connection's connect method,

125
00:05:33.090 --> 00:05:36.030
we are going to fix the status

126
00:05:36.030 --> 00:05:39.000
and at the end of it, let's just go

127
00:05:39.000 --> 00:05:40.060
and print the status.

128
00:05:40.060 --> 00:05:42.030
So I'm going to put a simple SYSOUT,

129
00:05:42.030 --> 00:05:49.080
and say, "Status of the app"

130
00:05:49.080 --> 00:05:54.010
and just "up and" the statusOfApp variable.

131
00:05:54.010 --> 00:05:56.080
Now, of course, this Java.net APIs

132
00:05:56.080 --> 00:05:58.090
is going to throw me some checked exceptions

133
00:05:58.090 --> 00:06:01.080
so let's Surround the Block with try-catch.

134
00:06:01.080 --> 00:06:03.060
And let's make sure that the variable that you want

135
00:06:03.060 --> 00:06:06.040
to use throughout the method is outside the try block.

136
00:06:06.040 --> 00:06:09.080
So on line #25, I'm going to cut that line

137
00:06:09.080 --> 00:06:15.090
and put it outside "try" on line #24.

138
00:06:15.090 --> 00:06:17.050
And then there are several other exceptions

139
00:06:17.050 --> 00:06:20.000
where we're just going to add the catch clause.

140
00:06:20.000 --> 00:06:21.050
Yeah.

141
00:06:21.050 --> 00:06:24.010
So it will either be MalformedURLException,

142
00:06:24.010 --> 00:06:26.010
where it's not able to have the URL, right?

143
00:06:26.010 --> 00:06:27.050
Some problem with the URL.

144
00:06:27.050 --> 00:06:29.010
Or IOException, it's not basically able

145
00:06:29.010 --> 00:06:32.040
to even have that IO operation made.

146
00:06:32.040 --> 00:06:35.060
So, once that's done...

147
00:06:35.060 --> 00:06:36.040
So, this looks good.

148
00:06:36.040 --> 00:06:37.040
What is the next step?

149
00:06:37.040 --> 00:06:39.080
The next step is add a method to the REST Class

150
00:06:39.080 --> 00:06:41.060
and call the scheduled method

151
00:06:41.060 --> 00:06:44.010
of Managed Scheduled Executor Service.

152
00:06:44.010 --> 00:06:45.030
And then we have to test the taskout,

153
00:06:45.030 --> 00:06:47.000
but we'll do that in the next video.

