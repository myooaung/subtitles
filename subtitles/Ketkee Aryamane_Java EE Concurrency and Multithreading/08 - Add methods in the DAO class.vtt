WEBVTT
1
00:00:00.050 --> 00:00:01.070
- [Instructor] Now let us add a method in

2
00:00:01.070 --> 00:00:03.050
the BankAccountDao to get the bank account

3
00:00:03.050 --> 00:00:04.080
information for all users.

4
00:00:04.080 --> 00:00:07.020
We'll retrieve that information from

5
00:00:07.020 --> 00:00:10.040
the bank account table, and once that's done,

6
00:00:10.040 --> 00:00:12.020
all the rows that we get out of it,

7
00:00:12.020 --> 00:00:14.000
we're going to make a collection of

8
00:00:14.000 --> 00:00:16.040
bank account bean objects.

9
00:00:16.040 --> 00:00:19.030
Similarly, we'll add another method in the Dao class

10
00:00:19.030 --> 00:00:21.040
which will fetch us the transaction information

11
00:00:21.040 --> 00:00:23.040
for every bank account.

12
00:00:23.040 --> 00:00:25.000
If there are multiple transactions,

13
00:00:25.000 --> 00:00:27.090
all of those rows will be contained in a list of

14
00:00:27.090 --> 00:00:30.010
bank account transaction beans.

15
00:00:30.010 --> 00:00:31.070
Let's head to the IDE.

16
00:00:31.070 --> 00:00:33.060
That's the Dao class.

17
00:00:33.060 --> 00:00:35.060
We have created a data source.

18
00:00:35.060 --> 00:00:37.060
This is the source from which we are going to

19
00:00:37.060 --> 00:00:41.050
retrieve the connection object to make the transactions.

20
00:00:41.050 --> 00:00:43.060
We've already tied up this data source by

21
00:00:43.060 --> 00:00:45.080
a constructor to our Dao class,

22
00:00:45.080 --> 00:00:47.030
so let's add the methods.

23
00:00:47.030 --> 00:00:50.020
The first one will be public.

24
00:00:50.020 --> 00:00:57.010
It will return us a list of bank account beans,

25
00:00:57.010 --> 00:01:00.010
which is this;

26
00:01:00.010 --> 00:01:06.090
getAllBankAccounts.

27
00:01:06.090 --> 00:01:07.090
What are we going to do here is,

28
00:01:07.090 --> 00:01:09.060
we are first going to get the connection object.

29
00:01:09.060 --> 00:01:11.070
That connection object can be retrieved

30
00:01:11.070 --> 00:01:13.080
by means of their data source now.

31
00:01:13.080 --> 00:01:17.000
I'm going to say connection

32
00:01:17.000 --> 00:01:19.030
and take it from the dataSource object,

33
00:01:19.030 --> 00:01:20.040
so dataSource dot ...

34
00:01:20.040 --> 00:01:24.090
There's an API called getConnection that we can call.

35
00:01:24.090 --> 00:01:28.040
Once that is done, then we need to have

36
00:01:28.040 --> 00:01:29.080
few other variables.

37
00:01:29.080 --> 00:01:34.020
One is we need the list of bank accounts.

38
00:01:34.020 --> 00:01:37.010
I'm just going to copy that from line 26

39
00:01:37.010 --> 00:01:39.030
and paste on line 29.

40
00:01:39.030 --> 00:01:40.060
Let's call it accounts

41
00:01:40.060 --> 00:01:46.010
and create a new ArrayList object.

42
00:01:46.010 --> 00:01:49.020
Then we'll also need a bank account instance,

43
00:01:49.020 --> 00:01:51.090
so we'll also create that.

44
00:01:51.090 --> 00:01:58.010
Initially let's set it to null.

45
00:01:58.010 --> 00:02:01.070
Next thing is, let's write a simple statement.

46
00:02:01.070 --> 00:02:03.050
So I'm gonna say Statement,

47
00:02:03.050 --> 00:02:06.010
import that from java.sql,

48
00:02:06.010 --> 00:02:09.030
and get it on the connection object.

49
00:02:09.030 --> 00:02:12.060
So connection.createStatement.

50
00:02:12.060 --> 00:02:15.000
I'm making use of the statement object

51
00:02:15.000 --> 00:02:19.010
basically because it's just a simple select query.

52
00:02:19.010 --> 00:02:26.090
Let's go ahead and say statement.executeQuery.

53
00:02:26.090 --> 00:02:28.030
That's the one.

54
00:02:28.030 --> 00:02:29.030
And what is a query?

55
00:02:29.030 --> 00:02:36.020
Select * from bank_account; that's the table.

56
00:02:36.020 --> 00:02:37.090
And the result of this will be of course

57
00:02:37.090 --> 00:02:41.080
in the form of a result set that we can capture

58
00:02:41.080 --> 00:02:47.080
in its corresponding variable on line number 35.

59
00:02:47.080 --> 00:02:50.030
Next we're going to iterate that set,

60
00:02:50.030 --> 00:02:54.050
so I'll set.next.

61
00:02:54.050 --> 00:02:55.060
What are we going to do?

62
00:02:55.060 --> 00:02:58.050
We're going to take that account object

63
00:02:58.050 --> 00:03:02.090
and instantiate the BankAccount bean.

64
00:03:02.090 --> 00:03:05.020
So for every row coming from the bank account,

65
00:03:05.020 --> 00:03:07.000
we have a new BankAccount bean.

66
00:03:07.000 --> 00:03:08.060
That's what we're gonna do.

67
00:03:08.060 --> 00:03:11.040
And then we need to set the fields to

68
00:03:11.040 --> 00:03:13.090
this bank account from the corresponding columns

69
00:03:13.090 --> 00:03:16.070
that we're going to get from each rule.

70
00:03:16.070 --> 00:03:21.060
So let's do that; account.setAccNumber.

71
00:03:21.060 --> 00:03:24.090
I'm gonna say set.getInt

72
00:03:24.090 --> 00:03:30.000
and the column name, which is acc_number.

73
00:03:30.000 --> 00:03:35.040
Then account.setName,

74
00:03:35.040 --> 00:03:43.030
and that will be a string, acc_holder_name.

75
00:03:43.030 --> 00:03:46.090
The next field is setEmail, so that will be

76
00:03:46.090 --> 00:03:52.020
set.getString, acc_email.

77
00:03:52.020 --> 00:03:53.060
That's the column.

78
00:03:53.060 --> 00:03:59.050
And then the last one is set.AccType,

79
00:03:59.050 --> 00:04:05.000
and that's also a string,

80
00:04:05.000 --> 00:04:12.000
which is acc_type.

81
00:04:12.000 --> 00:04:14.020
Once we do this, let's also take that list

82
00:04:14.020 --> 00:04:17.010
that we created and add this newly-created

83
00:04:17.010 --> 00:04:21.080
bank account object to it.

84
00:04:21.080 --> 00:04:23.040
So when you're done with all of this,

85
00:04:23.040 --> 00:04:25.060
then after the loop, you just have to go ahead

86
00:04:25.060 --> 00:04:32.000
and return this accounts list.

87
00:04:32.000 --> 00:04:33.080
Now that we've written all the code of course,

88
00:04:33.080 --> 00:04:35.050
this is JDBC code, so it is going to

89
00:04:35.050 --> 00:04:36.080
throw you those checked exceptions.

90
00:04:36.080 --> 00:04:40.080
So let's quickly add the try-catch block.

91
00:04:40.080 --> 00:04:42.040
And also make sure that

92
00:04:42.040 --> 00:04:44.000
the variables that you need to access

93
00:04:44.000 --> 00:04:47.010
throughout the method are taken outside.

94
00:04:47.010 --> 00:04:50.030
I'm going to cut lines 34, 35, 36,

95
00:04:50.030 --> 00:04:58.030
and paste them here.

96
00:04:58.030 --> 00:05:00.030
Of course line number 33, which is with respect to

97
00:05:00.030 --> 00:05:02.090
the connection object, that has to go into the try

98
00:05:02.090 --> 00:05:05.070
because if it may throw an exception for SQL,

99
00:05:05.070 --> 00:05:10.040
then we'll have to check it accordingly.

100
00:05:10.040 --> 00:05:11.090
Let's take the return statement from

101
00:05:11.090 --> 00:05:14.020
line number 48, cut it out,

102
00:05:14.020 --> 00:05:20.020
and put at the end of the method on line number 52.

103
00:05:20.020 --> 00:05:23.050
We are ready with the method of getAllBankAccounts.

104
00:05:23.050 --> 00:05:26.020
The next method that we have to add is the method for

105
00:05:26.020 --> 00:05:28.090
retrieving transaction information for every account.

106
00:05:28.090 --> 00:05:31.050
So let's add that method as well.

107
00:05:31.050 --> 00:05:34.090
Let's go down and say public.

108
00:05:34.090 --> 00:05:35.080
What is this going to return?

109
00:05:35.080 --> 00:05:37.080
List of, this time it is going to be

110
00:05:37.080 --> 00:05:41.010
BankAccountTransaction.

111
00:05:41.010 --> 00:05:42.080
We want a list of transactions.

112
00:05:42.080 --> 00:05:48.030
So getTransactionsForAccount,

113
00:05:48.030 --> 00:05:49.090
and the parameter let's say is

114
00:05:49.090 --> 00:05:51.050
the BankAccount object itself.

115
00:05:51.050 --> 00:05:53.070
From there, we can retrieve the account number

116
00:05:53.070 --> 00:05:56.060
and then we can make the query.

117
00:05:56.060 --> 00:05:58.020
The initial step is going to be the same.

118
00:05:58.020 --> 00:06:01.000
We're going to draw the connection object

119
00:06:01.000 --> 00:06:05.040
from the data source,

120
00:06:05.040 --> 00:06:10.000
then we will need a BankAccountTransaction object.

121
00:06:10.000 --> 00:06:12.080
Initially let's set it to null,

122
00:06:12.080 --> 00:06:15.010
and then we'll also have a list of

123
00:06:15.010 --> 00:06:17.070
bank account transactions.

124
00:06:17.070 --> 00:06:19.080
Let's make that.

125
00:06:19.080 --> 00:06:29.090
We'll say transactions = new ArrayList.

126
00:06:29.090 --> 00:06:32.080
Once we say that, we are basically ready with

127
00:06:32.080 --> 00:06:35.090
the starting point for retrieving the information

128
00:06:35.090 --> 00:06:37.040
using the SQL query.

129
00:06:37.040 --> 00:06:39.040
Now we're going to write a prepared statement,

130
00:06:39.040 --> 00:06:40.080
so what are we going to do?

131
00:06:40.080 --> 00:06:43.000
PreparedStatement, get a reference,

132
00:06:43.000 --> 00:06:49.010
and on the connection, call the prepareStatement API.

133
00:06:49.010 --> 00:06:52.000
That will of course demand the query,

134
00:06:52.000 --> 00:06:52.090
so let's add the query.

135
00:06:52.090 --> 00:06:59.090
Select * from bank_account_transaction table this time

136
00:06:59.090 --> 00:07:05.030
where the account number is question mark.

137
00:07:05.030 --> 00:07:06.030
We're going to parse this account number

138
00:07:06.030 --> 00:07:08.040
dynamically to the prepared statement,

139
00:07:08.040 --> 00:07:09.060
and we all know how to do it.

140
00:07:09.060 --> 00:07:11.090
You just have to grab that statement object

141
00:07:11.090 --> 00:07:14.030
and say setInt.

142
00:07:14.030 --> 00:07:16.040
The parameter, it has to start from one,

143
00:07:16.040 --> 00:07:21.080
and the value will be gotten from the account object.

144
00:07:21.080 --> 00:07:23.050
There we go.

145
00:07:23.050 --> 00:07:25.030
Once we do this, we're going to take

146
00:07:25.030 --> 00:07:28.050
a ResultSet object again and make sure that

147
00:07:28.050 --> 00:07:31.000
the results of the query are stored into it.

148
00:07:31.000 --> 00:07:38.070
To execute the query, we say statement.executeQuery.

149
00:07:38.070 --> 00:07:40.080
Next thing that we have to do is

150
00:07:40.080 --> 00:07:42.080
we have to iterate this set.

151
00:07:42.080 --> 00:07:44.010
It's pretty much the same that we've done

152
00:07:44.010 --> 00:07:47.030
for the previous method.

153
00:07:47.030 --> 00:07:48.010
What are we going to do?

154
00:07:48.010 --> 00:07:49.070
We're going to first take the transaction object

155
00:07:49.070 --> 00:07:53.080
and create a new instance for it.

156
00:07:53.080 --> 00:07:59.030
And then we're going to say transaction.setAccNumber

157
00:07:59.030 --> 00:08:06.070
will be set.getInt and the column is acc_number.

158
00:08:06.070 --> 00:08:10.050
Then we have transaction.set, what else?

159
00:08:10.050 --> 00:08:13.080
Amount; so we'll say set.get, this is double,

160
00:08:13.080 --> 00:08:18.070
so let's do that.

161
00:08:18.070 --> 00:08:22.060
Up next is set transaction date.

162
00:08:22.060 --> 00:08:26.080
The date in the database is of the java.sql type,

163
00:08:26.080 --> 00:08:29.000
and the date field that we have chosen in our bean

164
00:08:29.000 --> 00:08:30.080
is java.util, so we need to convert

165
00:08:30.080 --> 00:08:34.000
java.sql date to java.util date.

166
00:08:34.000 --> 00:08:34.080
How do you do that?

167
00:08:34.080 --> 00:08:38.040
You just take the date util constructor.

168
00:08:38.040 --> 00:08:41.090
To this, you first fill the incoming value from

169
00:08:41.090 --> 00:08:45.010
the column, so that will be set.getDate.

170
00:08:45.010 --> 00:08:49.040
Specify the column name, which in our case is

171
00:08:49.040 --> 00:08:55.010
basically transaction_date.

172
00:08:55.010 --> 00:08:58.060
Once we do this, we just have to call getTime.

173
00:08:58.060 --> 00:09:01.050
So that's how you convert the java.sql date

174
00:09:01.050 --> 00:09:06.000
to your java.util date.

175
00:09:06.000 --> 00:09:09.070
Then let's go next and also set the other fields.

176
00:09:09.070 --> 00:09:14.030
Transaction.setTxId.

177
00:09:14.030 --> 00:09:17.080
Identifier, that will be again Int,

178
00:09:17.080 --> 00:09:22.060
and that column is tx_id.

179
00:09:22.060 --> 00:09:26.090
The last is transaction.set, what else remains?

180
00:09:26.090 --> 00:09:29.040
Transaction type.

181
00:09:29.040 --> 00:09:31.080
So that will be String,

182
00:09:31.080 --> 00:09:36.000
and we're going to have the column as

183
00:09:36.000 --> 00:09:41.080
transaction_type.

184
00:09:41.080 --> 00:09:43.090
Again, so this is all about your SQL exceptions

185
00:09:43.090 --> 00:09:45.060
coming into picture, the arrows that you see,

186
00:09:45.060 --> 00:09:47.010
so we'll quickly handle them using

187
00:09:47.010 --> 00:09:49.060
the try-catch block also.

188
00:09:49.060 --> 00:09:52.010
The objects that you need at the top level,

189
00:09:52.010 --> 00:09:55.060
cut them out, lines number 62 and 63.

190
00:09:55.060 --> 00:10:02.080
Cutting them off and pasting them at line number 60.

191
00:10:02.080 --> 00:10:03.090
The last thing that we have to do is

192
00:10:03.090 --> 00:10:10.010
on line number 79, we'll just return those transactions.

193
00:10:10.010 --> 00:10:11.050
So we have our two methods.

194
00:10:11.050 --> 00:10:13.060
One is to retrieve all the bank accounts,

195
00:10:13.060 --> 00:10:16.010
fill each of the rows into the account object,

196
00:10:16.010 --> 00:10:18.020
create a list, and return that list.

197
00:10:18.020 --> 00:10:20.050
And the second method is for the transactions

198
00:10:20.050 --> 00:10:23.010
for every bank account; get a list of transactions.

199
00:10:23.010 --> 00:10:25.060
So for every row, create a transaction object

200
00:10:25.060 --> 00:10:28.050
and then return that transactions list.

201
00:10:28.050 --> 00:10:30.000
Next steps in the next video.

