WEBVTT
1
00:00:00.050 --> 00:00:01.070
- [Narrator] So let's take a quick look

2
00:00:01.070 --> 00:00:04.040
at the Executor framework hierarchy.

3
00:00:04.040 --> 00:00:06.030
The first thing is all the Executor interfaces

4
00:00:06.030 --> 00:00:09.030
will reside in the java.util.concurrent package.

5
00:00:09.030 --> 00:00:10.060
That's the package for them.

6
00:00:10.060 --> 00:00:12.030
And there are three main components.

7
00:00:12.030 --> 00:00:15.020
Starting at the top, you have the Executor interface,

8
00:00:15.020 --> 00:00:16.040
which is a basic interface.

9
00:00:16.040 --> 00:00:18.020
And then, down there, you have

10
00:00:18.020 --> 00:00:20.060
a subinterface, which is the ExecutorService.

11
00:00:20.060 --> 00:00:22.010
Now this is the most crucial interfaces

12
00:00:22.010 --> 00:00:24.070
that we generally use in applications.

13
00:00:24.070 --> 00:00:26.060
And, to a further extension,

14
00:00:26.060 --> 00:00:28.020
we have ScheduledExecutorService,

15
00:00:28.020 --> 00:00:31.050
which is, again, a subinterface of ExecutorService.

16
00:00:31.050 --> 00:00:33.040
So, ScheduledExecutorService is exactly the one

17
00:00:33.040 --> 00:00:35.090
which will allow you to schedule jobs

18
00:00:35.090 --> 00:00:38.020
at regular intervals and all of that stuff.

19
00:00:38.020 --> 00:00:39.020
Okay.

20
00:00:39.020 --> 00:00:41.060
So we're going to look at the demos for each one of them.

21
00:00:41.060 --> 00:00:43.060
But before that, let's all to understand

22
00:00:43.060 --> 00:00:46.060
what are Callables and what are Futures.

23
00:00:46.060 --> 00:00:48.000
Now, when we take the demo for thread

24
00:00:48.000 --> 00:00:51.040
and the Runnable APIs, we actually define

25
00:00:51.040 --> 00:00:54.020
the job of the thread inside the run method, right?

26
00:00:54.020 --> 00:00:56.020
I'm sure you recollect that in the thread class

27
00:00:56.020 --> 00:00:57.030
and in the Runnable interface,

28
00:00:57.030 --> 00:00:59.020
there was always this run method in which

29
00:00:59.020 --> 00:01:02.010
we specified the job that the thread has to do.

30
00:01:02.010 --> 00:01:04.070
Now this run method takes no parameters

31
00:01:04.070 --> 00:01:07.090
and neither does it have a return value.

32
00:01:07.090 --> 00:01:10.020
But what if your task that you're trying

33
00:01:10.020 --> 00:01:14.000
to ask the thread to do wants to return something?

34
00:01:14.000 --> 00:01:18.000
So that feature is available in the Callable interface.

35
00:01:18.000 --> 00:01:21.040
The Callable interface has a method declared which is call,

36
00:01:21.040 --> 00:01:25.050
and that allows you to return a generic value V.

37
00:01:25.050 --> 00:01:27.070
And whatever the returned value is,

38
00:01:27.070 --> 00:01:32.020
it can be captured in a Future object, right?

39
00:01:32.020 --> 00:01:34.000
So one of the major differences between

40
00:01:34.000 --> 00:01:36.010
Runnable and Callable is that Callable

41
00:01:36.010 --> 00:01:39.010
allows you to capture return values.

42
00:01:39.010 --> 00:01:42.020
Which means there is definitely some advantage there.

43
00:01:42.020 --> 00:01:45.060
The other difference is Callable's call method

44
00:01:45.060 --> 00:01:47.050
can throw checked exceptions.

45
00:01:47.050 --> 00:01:48.070
What does that mean?

46
00:01:48.070 --> 00:01:51.060
It means that if you can throw checked exceptions,

47
00:01:51.060 --> 00:01:55.090
you can throw tropolcate them down the calling hierarchy.

48
00:01:55.090 --> 00:01:58.000
The Runnable run method does not throw

49
00:01:58.000 --> 00:01:59.010
any kind of exception.

50
00:01:59.010 --> 00:02:01.020
So that's another problem.

51
00:02:01.020 --> 00:02:03.020
Now when you talk about the Executor framework,

52
00:02:03.020 --> 00:02:06.060
yes, it works with both Runnable and Callable objects.

53
00:02:06.060 --> 00:02:08.070
So if you already have a dire requirement

54
00:02:08.070 --> 00:02:11.040
where you need to return something out of the task

55
00:02:11.040 --> 00:02:13.090
that the thread does, then you should go for Callable.

56
00:02:13.090 --> 00:02:16.000
Otherwise, you can stick to Runnable.

