WEBVTT
1
00:00:00.050 --> 00:00:01.090
- [Narrator] The next step will be

2
00:00:01.090 --> 00:00:04.010
to write a REST class for that transaction demo,

3
00:00:04.010 --> 00:00:06.080
and then we will get hold of the ManagedExecutorService

4
00:00:06.080 --> 00:00:08.050
object, which we will have to inject

5
00:00:08.050 --> 00:00:10.010
through the @Resource annotation.

6
00:00:10.010 --> 00:00:11.080
Let's go to the IDE.

7
00:00:11.080 --> 00:00:16.010
Let's go under the REST folder, and create a class,

8
00:00:16.010 --> 00:00:23.080
which we will call Transaction Resource, okay.

9
00:00:23.080 --> 00:00:26.020
Let's come down and let's define

10
00:00:26.020 --> 00:00:31.010
the part and addition for it.

11
00:00:31.010 --> 00:00:35.050
Okay, and this is a transaction that you're doing

12
00:00:35.050 --> 00:00:41.000
so let's this time use the @POST method of the javax.

13
00:00:41.000 --> 00:00:43.000
So we'll use the POST annotation,

14
00:00:43.000 --> 00:00:50.000
and a simple method public string execute transactions.

15
00:00:50.000 --> 00:00:52.060
Okay, and what are we going to do here?

16
00:00:52.060 --> 00:00:53.080
We're going to first inject the

17
00:00:53.080 --> 00:00:56.060
managed executor service object.

18
00:00:56.060 --> 00:01:00.030
Right, for that let's go to concurrent resources

19
00:01:00.030 --> 00:01:03.000
managed executor service and pick up the name,

20
00:01:03.000 --> 00:01:05.080
the default resource, come back to IDE,

21
00:01:05.080 --> 00:01:09.020
and under the transaction resource class online number 18,

22
00:01:09.020 --> 00:01:11.080
I will inject that resources.

23
00:01:11.080 --> 00:01:13.030
I say lookup.

24
00:01:13.030 --> 00:01:15.030
Okay.

25
00:01:15.030 --> 00:01:17.080
And of course take a reference for it.

26
00:01:17.080 --> 00:01:24.090
So private managed executor service, okay.

27
00:01:24.090 --> 00:01:26.030
And the next thing will be of course,

28
00:01:26.030 --> 00:01:30.000
we'll have to submit that transaction processor tasks

29
00:01:30.000 --> 00:01:32.060
via the managed executor service object.

30
00:01:32.060 --> 00:01:34.010
So let's do that.

31
00:01:34.010 --> 00:01:43.080
Let's say, service dot submit new transaction processor.

32
00:01:43.080 --> 00:01:46.060
And then just return a simple string

33
00:01:46.060 --> 00:01:49.070
from your same transaction processed.

34
00:01:49.070 --> 00:01:53.060
No let's say transaction submitted.

35
00:01:53.060 --> 00:01:57.000
Please check console.

36
00:01:57.000 --> 00:01:59.060
Okay, so just to summarize before

37
00:01:59.060 --> 00:02:01.040
we finally test this application,

38
00:02:01.040 --> 00:02:04.000
we first went ahead and had those two

39
00:02:04.000 --> 00:02:07.060
data sources defined on the server by a connection pool,

40
00:02:07.060 --> 00:02:09.080
so we defined the connection pool first and then

41
00:02:09.080 --> 00:02:11.090
we drew a couple of data sources from them,

42
00:02:11.090 --> 00:02:13.020
that is step number one.

43
00:02:13.020 --> 00:02:15.050
Second is we wrote a session bean,

44
00:02:15.050 --> 00:02:18.000
JTA stateless session bean, and we

45
00:02:18.000 --> 00:02:20.030
injected those two data sources and

46
00:02:20.030 --> 00:02:22.030
then with the help of them, we actually

47
00:02:22.030 --> 00:02:25.000
executed these insert statements.

48
00:02:25.000 --> 00:02:28.030
The dependent tables for which transaction is important.

49
00:02:28.030 --> 00:02:30.050
Then next, we actually went ahead and, of course,

50
00:02:30.050 --> 00:02:33.080
wrote out our runnable implementation,

51
00:02:33.080 --> 00:02:36.050
which is going to do the job of

52
00:02:36.050 --> 00:02:39.020
starting the transaction, then actually

53
00:02:39.020 --> 00:02:41.070
calling those business methods, and then committing

54
00:02:41.070 --> 00:02:44.030
it and rolling it back whenever necessary.

55
00:02:44.030 --> 00:02:47.050
And finally, we wrote the test class, which is going

56
00:02:47.050 --> 00:02:50.010
to start the concurrency programming,

57
00:02:50.010 --> 00:02:54.020
and for that we needed the managed executor service object.

58
00:02:54.020 --> 00:02:55.080
So through that we are going to submit

59
00:02:55.080 --> 00:02:57.030
the task and that is exactly what

60
00:02:57.030 --> 00:02:58.070
we're trying to test right?

61
00:02:58.070 --> 00:03:01.020
Whenever concurrency programming happens,

62
00:03:01.020 --> 00:03:03.010
when you submit a task via any of the

63
00:03:03.010 --> 00:03:06.020
managed executor objects, then during that

64
00:03:06.020 --> 00:03:08.030
task there are transactions, then they

65
00:03:08.030 --> 00:03:10.050
should be successfully committed or

66
00:03:10.050 --> 00:03:13.030
rolled back using the user transaction API.

67
00:03:13.030 --> 00:03:14.090
That's exactly what we want to do.

68
00:03:14.090 --> 00:03:17.060
Right, so now to test this, we will of course

69
00:03:17.060 --> 00:03:18.090
have to deploy this and run this.

70
00:03:18.090 --> 00:03:20.000
We'll do this in the next video.

