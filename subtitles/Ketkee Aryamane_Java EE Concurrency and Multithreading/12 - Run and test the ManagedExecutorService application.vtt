WEBVTT
1
00:00:00.040 --> 00:00:02.050
- Now let us test this application.

2
00:00:02.050 --> 00:00:04.020
So what we're going to do is,

3
00:00:04.020 --> 00:00:06.060
we are going to make sure that the server is started.

4
00:00:06.060 --> 00:00:08.010
Yes, the server is started already

5
00:00:08.010 --> 00:00:09.030
and the thing is that as and when

6
00:00:09.030 --> 00:00:10.070
you make changes to all the files,

7
00:00:10.070 --> 00:00:14.010
it will do the hot deployment so it will deploy the changes

8
00:00:14.010 --> 00:00:15.060
as well on to the server.

9
00:00:15.060 --> 00:00:17.010
So if you want to just verify that,

10
00:00:17.010 --> 00:00:17.090
check it out.

11
00:00:17.090 --> 00:00:19.020
So if I let's say, have a space here

12
00:00:19.020 --> 00:00:22.000
and I save my file,

13
00:00:22.000 --> 00:00:23.070
yeah, so that's what the server is doing.

14
00:00:23.070 --> 00:00:26.010
It has gone ahead and re-deployed all my changes.

15
00:00:26.010 --> 00:00:27.070
So the project is clean and well

16
00:00:27.070 --> 00:00:29.030
and it's deployed on the server.

17
00:00:29.030 --> 00:00:33.010
Now let's access the restful bean part

18
00:00:33.010 --> 00:00:34.040
for the report resource.

19
00:00:34.040 --> 00:00:36.020
So the url is reports here

20
00:00:36.020 --> 00:00:39.050
so lets go to the postman tool.

21
00:00:39.050 --> 00:00:42.080
So this initial base URI part will remain same.

22
00:00:42.080 --> 00:00:44.050
This part is going to change

23
00:00:44.050 --> 00:00:46.080
because we are accessing a different restful bean.

24
00:00:46.080 --> 00:00:51.080
So lets say, reports and see what happens.

25
00:00:51.080 --> 00:00:53.030
Okay, we get a

26
00:00:53.030 --> 00:00:55.070
message right, let's go ahead and check the server.

27
00:00:55.070 --> 00:00:59.020
Yes, the report is generated for all the bank accounts.

28
00:00:59.020 --> 00:01:02.070
Lets also go and look under the reports folder.

29
00:01:02.070 --> 00:01:03.080
There we are.

30
00:01:03.080 --> 00:01:05.060
So if you open this and see,

31
00:01:05.060 --> 00:01:07.040
yes you have all the three transactions

32
00:01:07.040 --> 00:01:10.010
for account number 1101 generated.

33
00:01:10.010 --> 00:01:13.010
Same as the case for the others.

34
00:01:13.010 --> 00:01:15.040
You can definitely format this beautifully,

35
00:01:15.040 --> 00:01:17.060
you can export this entire transaction report

36
00:01:17.060 --> 00:01:19.000
in the form of a PDF format,

37
00:01:19.000 --> 00:01:20.040
or a DOC format.

38
00:01:20.040 --> 00:01:23.010
All of that is what we do in a live application.

39
00:01:23.010 --> 00:01:24.090
Right now for this demonstration,

40
00:01:24.090 --> 00:01:25.090
I'm trying to keep it simple

41
00:01:25.090 --> 00:01:31.040
and simply taking that data down and putting it into a file.

42
00:01:31.040 --> 00:01:33.020
Absolutely, so this is what we have done.

43
00:01:33.020 --> 00:01:35.040
We have actually created a background task

44
00:01:35.040 --> 00:01:37.030
for generation of reports

45
00:01:37.030 --> 00:01:40.000
and we have spawned this background process

46
00:01:40.000 --> 00:01:43.050
with the help of Managed Executor Service object which is

47
00:01:43.050 --> 00:01:47.010
now a managed resource of the container environment.

48
00:01:47.010 --> 00:01:48.000
Correct.

49
00:01:48.000 --> 00:01:50.000
So, we are getting the service object.

50
00:01:50.000 --> 00:01:52.050
That is of course going to be the pool

51
00:01:52.050 --> 00:01:54.020
and it has got threads,

52
00:01:54.020 --> 00:01:56.040
and each of the threads in that pool

53
00:01:56.040 --> 00:02:00.090
is going to handle the reports processor task.

54
00:02:00.090 --> 00:02:02.050
Right, so that's exactly what it is.

55
00:02:02.050 --> 00:02:04.020
Please understand one more thing,

56
00:02:04.020 --> 00:02:07.030
that in case of the managed executor service object

57
00:02:07.030 --> 00:02:10.070
we really don't have to call the shut down APIs.

58
00:02:10.070 --> 00:02:12.060
We have done that in the standard edition platform

59
00:02:12.060 --> 00:02:15.050
because they were standalone applications that were running.

60
00:02:15.050 --> 00:02:18.090
These managed executor service objects or managed executor

61
00:02:18.090 --> 00:02:20.050
the scheduled version of it,

62
00:02:20.050 --> 00:02:22.060
all of these objects are managed by the container.

63
00:02:22.060 --> 00:02:24.020
So you do not have to really go ahead

64
00:02:24.020 --> 00:02:27.000
and call the shut down API to be managed by the container

65
00:02:27.000 --> 00:02:28.030
on its own.

66
00:02:28.030 --> 00:02:30.020
One last thing that we have to understand is,

67
00:02:30.020 --> 00:02:32.000
we had used the connection pooling.

68
00:02:32.000 --> 00:02:33.050
So if you see there,

69
00:02:33.050 --> 00:02:36.020
it is trying to initialize the C3PO pool

70
00:02:36.020 --> 00:02:39.050
and those are the parameters of it.

71
00:02:39.050 --> 00:02:41.050
So this came in because of the third party

72
00:02:41.050 --> 00:02:43.090
C3PO plug-in that I have used.

73
00:02:43.090 --> 00:02:45.050
Of course you may opt as I said,

74
00:02:45.050 --> 00:02:49.080
any other kind of connection pooling regularly.

75
00:02:49.080 --> 00:02:51.010
Okay, so that's the first time of our

76
00:02:51.010 --> 00:02:52.090
Managed Executor Service API.

77
00:02:52.090 --> 00:02:53.070
In our next videos,

78
00:02:53.070 --> 00:02:54.060
we will take a look at the

79
00:02:54.060 --> 00:02:56.020
managed schedule executor service,

80
00:02:56.020 --> 00:02:57.060
managed thread factory,

81
00:02:57.060 --> 00:02:59.000
and context service.

