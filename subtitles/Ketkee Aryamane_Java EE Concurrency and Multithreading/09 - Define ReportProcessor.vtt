WEBVTT
1
00:00:00.050 --> 00:00:03.020
- [Instructor] Now let us create the ReportProcessor class.

2
00:00:03.020 --> 00:00:05.070
This is going to be a callable implementation,

3
00:00:05.070 --> 00:00:08.020
which is going to define the job of the task.

4
00:00:08.020 --> 00:00:11.060
The job of the task is to call the Dao,

5
00:00:11.060 --> 00:00:14.050
get the transaction information for every bank account,

6
00:00:14.050 --> 00:00:17.070
and then save that to a file.

7
00:00:17.070 --> 00:00:20.010
So let's go back to the IDE,

8
00:00:20.010 --> 00:00:24.010
and under the runables, I'm going to create that task.

9
00:00:24.010 --> 00:00:29.090
So let's call it ReportsProcessor.

10
00:00:29.090 --> 00:00:33.030
And that's going to implement callable.

11
00:00:33.030 --> 00:00:36.090
You could have also chosen runable, no problem with that.

12
00:00:36.090 --> 00:00:40.020
Let's make this this return a Boolean value.

13
00:00:40.020 --> 00:00:44.020
And of course, you have to implement the call method.

14
00:00:44.020 --> 00:00:47.010
Let's get rid of the default implementation.

15
00:00:47.010 --> 00:00:51.090
So this is how it is going to be for every bank account.

16
00:00:51.090 --> 00:00:53.090
We are going to dedicate one instance

17
00:00:53.090 --> 00:00:56.030
of this ReportProcessor task, right?

18
00:00:56.030 --> 00:00:59.010
So if you want to generate a report for one bank account,

19
00:00:59.010 --> 00:01:02.070
you are going to have one task of ReportProcessor submitted.

20
00:01:02.070 --> 00:01:04.000
That's how this is going to work.

21
00:01:04.000 --> 00:01:07.000
So on line number 16, I'm going to tie up

22
00:01:07.000 --> 00:01:11.040
this ReportsProcessor with a bank account instance,

23
00:01:11.040 --> 00:01:13.070
go BankAccount, right?

24
00:01:13.070 --> 00:01:17.010
And we're also going to take an instance of the Dao.

25
00:01:17.010 --> 00:01:20.070
We need the Dao to get the transaction for this account,

26
00:01:20.070 --> 00:01:25.010
so I'm going to take that instance as well.

27
00:01:25.010 --> 00:01:27.080
The moment we do this, let's also make sure

28
00:01:27.080 --> 00:01:29.080
that we write a constructor

29
00:01:29.080 --> 00:01:33.050
where these variables are initialized.

30
00:01:33.050 --> 00:01:35.020
Great!

31
00:01:35.020 --> 00:01:36.090
Next is, we have to define a logic

32
00:01:36.090 --> 00:01:38.040
inside the call method,

33
00:01:38.040 --> 00:01:40.090
which is going to make sure that the Dao is called

34
00:01:40.090 --> 00:01:42.020
for transaction information

35
00:01:42.020 --> 00:01:46.050
and that information is saved, written out to a file.

36
00:01:46.050 --> 00:01:48.070
So let's go ahead and start doing that.

37
00:01:48.070 --> 00:01:57.040
Let's first take a list of bank account transaction.

38
00:01:57.040 --> 00:01:59.040
That's the one.

39
00:01:59.040 --> 00:02:04.030
Let's say transactions equal to let's take the Dao

40
00:02:04.030 --> 00:02:08.010
and say get transactions for account.

41
00:02:08.010 --> 00:02:10.030
And we can pass the account object.

42
00:02:10.030 --> 00:02:12.020
The instance is already tied up to the processor

43
00:02:12.020 --> 00:02:14.070
so that instance has a value.

44
00:02:14.070 --> 00:02:17.020
Once we say this, we have to make sure

45
00:02:17.020 --> 00:02:19.080
that we create a file

46
00:02:19.080 --> 00:02:22.010
where the transaction information needs to be written.

47
00:02:22.010 --> 00:02:25.020
Now this file has to be unique for every bank account.

48
00:02:25.020 --> 00:02:28.040
So I'm going to create a file object like this,

49
00:02:28.040 --> 00:02:33.070
and I will say file equal to new file,

50
00:02:33.070 --> 00:02:35.030
and this demands a path name.

51
00:02:35.030 --> 00:02:37.020
Now the reports that are getting generated,

52
00:02:37.020 --> 00:02:40.080
I am going to generate them on the d-drive of this machine.

53
00:02:40.080 --> 00:02:44.040
You're free to pick up any drive, any folder of your choice.

54
00:02:44.040 --> 00:02:46.020
There's no hard and fast rule absolutely.

55
00:02:46.020 --> 00:02:47.070
I want to save the reports basically

56
00:02:47.070 --> 00:02:50.030
to some folder on my drive, right?

57
00:02:50.030 --> 00:02:51.070
So any drive, any folder.

58
00:02:51.070 --> 00:02:55.020
So I'm going to choose the d-drive,

59
00:02:55.020 --> 00:02:57.060
and say I want a full local report.

60
00:02:57.060 --> 00:03:04.070
And to this, I am going to append the account number.

61
00:03:04.070 --> 00:03:06.040
So how do I get the account number?

62
00:03:06.040 --> 00:03:08.060
I have to just access the account object

63
00:03:08.060 --> 00:03:10.070
and get the account number,

64
00:03:10.070 --> 00:03:12.010
like that.

65
00:03:12.010 --> 00:03:14.090
And then to this I will append

66
00:03:14.090 --> 00:03:18.050
underscore, TX, underscore,

67
00:03:18.050 --> 00:03:20.060
report.txt.

68
00:03:20.060 --> 00:03:23.080
So that's the file that I want to create per bank account.

69
00:03:23.080 --> 00:03:26.050
I'm gonna say while the reports to the d-drive

70
00:03:26.050 --> 00:03:27.090
under the reports folder,

71
00:03:27.090 --> 00:03:30.050
I want to uniquely identify the file for every account,

72
00:03:30.050 --> 00:03:32.010
so I'm going to append the account number

73
00:03:32.010 --> 00:03:34.090
and then suffix this label to it.

74
00:03:34.090 --> 00:03:37.020
Okay, so once this file is created

75
00:03:37.020 --> 00:03:40.000
let's go ahead and iterate this list

76
00:03:40.000 --> 00:03:41.050
that we have retrieved from the Dao.

77
00:03:41.050 --> 00:03:46.070
So for every bank account transaction

78
00:03:46.070 --> 00:03:49.070
in transactions, what are we going to do?

79
00:03:49.070 --> 00:03:54.000
We are going to use a try with resources statement.

80
00:03:54.000 --> 00:03:57.030
So let's go ahead and say try and what are

81
00:03:57.030 --> 00:03:59.020
we going to do inside?

82
00:03:59.020 --> 00:04:03.060
Buffered writer this time, because we want to write.

83
00:04:03.060 --> 00:04:08.030
Take a variable, say equal to new buffered writer

84
00:04:08.030 --> 00:04:11.000
and to this, of course, you will have

85
00:04:11.000 --> 00:04:15.000
to pass the new file writer object.

86
00:04:15.000 --> 00:04:19.090
So we want to say new file writer, right?

87
00:04:19.090 --> 00:04:22.010
And that object that you were passing

88
00:04:22.010 --> 00:04:24.010
to file writer is, of course, the file object

89
00:04:24.010 --> 00:04:27.010
that we've already created on line number 36.

90
00:04:27.010 --> 00:04:29.030
Let's put the braces

91
00:04:29.030 --> 00:04:31.020
and what are we going to do inside?

92
00:04:31.020 --> 00:04:33.080
We're going to say writer.write.

93
00:04:33.080 --> 00:04:34.080
Okay, we'll have a label

94
00:04:34.080 --> 00:04:37.000
for every and the actual value.

95
00:04:37.000 --> 00:04:42.030
Okay, so let's start off with let's say account number

96
00:04:42.030 --> 00:04:45.050
and then append to it the account number

97
00:04:45.050 --> 00:04:49.020
from the transaction object.

98
00:04:49.020 --> 00:04:54.020
Similarly we're gonna say writer.write

99
00:04:54.020 --> 00:05:01.080
let's say you have the transaction type

100
00:05:01.080 --> 00:05:07.060
and append the transaction type to it.

101
00:05:07.060 --> 00:05:12.070
Then writer.write we say transaction ID.

102
00:05:12.070 --> 00:05:14.060
The labels could be of your choice.

103
00:05:14.060 --> 00:05:15.080
No rule there.

104
00:05:15.080 --> 00:05:19.050
Transaction.getTxid.

105
00:05:19.050 --> 00:05:20.090
This one.

106
00:05:20.090 --> 00:05:26.060
Next is writer.write, what else do we have?

107
00:05:26.060 --> 00:05:28.070
Yeah, the amount.

108
00:05:28.070 --> 00:05:33.090
So let's also take the transaction.getAmount getter

109
00:05:33.090 --> 00:05:36.070
and make sure that the value is written out.

110
00:05:36.070 --> 00:05:39.040
And once it's done, I think we're left with the date.

111
00:05:39.040 --> 00:05:47.000
Okay, so writer.write and let's say txDate

112
00:05:47.000 --> 00:05:51.000
and say transaction.getTxDate.

113
00:05:51.000 --> 00:05:57.090
Let's put the label accordingly.

114
00:05:57.090 --> 00:05:59.040
Okay.

115
00:05:59.040 --> 00:06:00.040
And we also want to make sure

116
00:06:00.040 --> 00:06:02.050
that if there are multiple transactions

117
00:06:02.050 --> 00:06:05.050
as a part of this list, then we need a new line

118
00:06:05.050 --> 00:06:07.050
after writing out one transaction record.

119
00:06:07.050 --> 00:06:12.020
So I'm also gonna do writer.write newLine.

120
00:06:12.020 --> 00:06:13.060
That's the method.

121
00:06:13.060 --> 00:06:15.040
Yeah, newLine that's the method.

122
00:06:15.040 --> 00:06:16.080
And after this, I'm gonna say flush,

123
00:06:16.080 --> 00:06:22.010
so that the date is definitely written out to that file.

124
00:06:22.010 --> 00:06:25.020
Okay, now the call method of the callable interface

125
00:06:25.020 --> 00:06:26.080
always true the exception,

126
00:06:26.080 --> 00:06:28.050
which is why it did not give me

127
00:06:28.050 --> 00:06:31.040
those red compilation errors for the IO exceptions.

128
00:06:31.040 --> 00:06:33.060
Okay, that's exactly why I'm not getting errors

129
00:06:33.060 --> 00:06:35.090
and that's exactly why I've not returned a dry cash block

130
00:06:35.090 --> 00:06:38.020
because it is declared in the truth clause.

131
00:06:38.020 --> 00:06:40.070
Okay, now the last thing we have to do is,

132
00:06:40.070 --> 00:06:43.030
we'll go on line number 34 and declare a Boolean

133
00:06:43.030 --> 00:06:50.020
label, say a report generator, set it default initially,

134
00:06:50.020 --> 00:06:54.050
however, when you are done after generating the report

135
00:06:54.050 --> 00:06:57.050
just have to set that variable to true

136
00:06:57.050 --> 00:07:04.060
and then return it out of this method, that's all.

137
00:07:04.060 --> 00:07:08.010
Okay, so we've created a file for every bank account

138
00:07:08.010 --> 00:07:09.070
with the naming convention,

139
00:07:09.070 --> 00:07:11.080
saving it to the d-drive report folder,

140
00:07:11.080 --> 00:07:14.020
and we've returned out all the data of the transaction,

141
00:07:14.020 --> 00:07:15.040
and flushed it.

142
00:07:15.040 --> 00:07:17.060
So once this is done, we're actually done

143
00:07:17.060 --> 00:07:19.030
with the entire method.

144
00:07:19.030 --> 00:07:22.000
So there's one error that we're getting.

145
00:07:22.000 --> 00:07:25.080
Let's check what that is.

146
00:07:25.080 --> 00:07:27.020
Yeah, so the return statement,

147
00:07:27.020 --> 00:07:34.070
basically, has to be here.

148
00:07:34.070 --> 00:07:37.080
Okay so the ReportProcessor is completed.

149
00:07:37.080 --> 00:07:40.010
Next step will be to create next Boolean,

150
00:07:40.010 --> 00:07:42.000
but that we'll see in the next video.

