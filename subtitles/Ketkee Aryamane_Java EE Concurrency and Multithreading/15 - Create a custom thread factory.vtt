WEBVTT
1
00:00:00.060 --> 00:00:01.050
- [Instructor] Now let's take a look

2
00:00:01.050 --> 00:00:03.060
at the ThreadFactory API demo.

3
00:00:03.060 --> 00:00:05.020
The steps are ready here, the first one

4
00:00:05.020 --> 00:00:06.060
is you to create a custom class,

5
00:00:06.060 --> 00:00:09.070
which implements the ThreadFactory interface.

6
00:00:09.070 --> 00:00:11.080
So let's head back to the IDE,

7
00:00:11.080 --> 00:00:14.040
and I want to create a totally different package

8
00:00:14.040 --> 00:00:17.050
for any kind of custom implementations that I want

9
00:00:17.050 --> 00:00:19.050
for my application.

10
00:00:19.050 --> 00:00:23.060
Okay, and under this package I'll create a class,

11
00:00:23.060 --> 00:00:29.010
and I will say CustomThreadFactory.

12
00:00:29.010 --> 00:00:33.080
Okay, and this should basically implement the

13
00:00:33.080 --> 00:00:37.090
ThreadFactory interface. Okay?

14
00:00:37.090 --> 00:00:39.080
Next is you to provide custom logic

15
00:00:39.080 --> 00:00:42.000
to decide the names or priorities.

16
00:00:42.000 --> 00:00:44.040
So the custom logic will be provided by the

17
00:00:44.040 --> 00:00:48.070
implementation of that abstract method.

18
00:00:48.070 --> 00:00:51.060
Okay. Let's get rid of the default implementation;

19
00:00:51.060 --> 00:00:53.080
we don't want that.

20
00:00:53.080 --> 00:01:01.010
And inside this, let's create an instance of Thread.

21
00:01:01.010 --> 00:01:04.050
And choose the construct to which sticks a Runnable argument

22
00:01:04.050 --> 00:01:07.010
so this task will be passed to it.

23
00:01:07.010 --> 00:01:11.010
And then, now is the chance to set your own name

24
00:01:11.010 --> 00:01:13.070
custom names, or maybe your own priorities,

25
00:01:13.070 --> 00:01:15.080
or even set the Daemon Thread status.

26
00:01:15.080 --> 00:01:19.040
So you can take the instance and call any of these methods

27
00:01:19.040 --> 00:01:22.000
for example setDaemon, setName, setPriority,

28
00:01:22.000 --> 00:01:24.030
and write your own custom logic to basically

29
00:01:24.030 --> 00:01:26.040
identify your threads. Okay?

30
00:01:26.040 --> 00:01:27.090
Or maybe Priorities or Daemon status.

31
00:01:27.090 --> 00:01:30.090
So let's go ahead and call the setName method,

32
00:01:30.090 --> 00:01:32.070
and we'll add a very simple logic.

33
00:01:32.070 --> 00:01:35.030
On line number 16 I'm going to say

34
00:01:35.030 --> 00:01:41.090
private static int counter=0, alright?

35
00:01:41.090 --> 00:01:45.070
And to the setName call on line number 22,

36
00:01:45.070 --> 00:01:49.000
I am going to say the name should be like

37
00:01:49.000 --> 00:01:54.000
Custom Thread - + and on that

38
00:01:54.000 --> 00:01:57.000
I am just going to increment that counter.

39
00:01:57.000 --> 00:01:59.040
Once that's done, I'll just return this thread

40
00:01:59.040 --> 00:02:03.090
that I'm creating. Okay.

41
00:02:03.090 --> 00:02:05.090
Next is, once you write the custom logic, now you

42
00:02:05.090 --> 00:02:08.080
going to use the custom ThreadFactory class

43
00:02:08.080 --> 00:02:12.050
to submit any of the previous tasks coded in the project.

44
00:02:12.050 --> 00:02:15.030
Okay? So we have a lot of Runnables that we have

45
00:02:15.030 --> 00:02:18.000
already in place; you can use any one of them

46
00:02:18.000 --> 00:02:20.010
to test out this ThreadFactory implementation.

47
00:02:20.010 --> 00:02:24.030
So let's create a test class here.

48
00:02:24.030 --> 00:02:29.060
And say TestThreadFactory.

49
00:02:29.060 --> 00:02:32.070
Let's grab the main method, and what are we

50
00:02:32.070 --> 00:02:33.070
going to do here?

51
00:02:33.070 --> 00:02:39.050
We are going to first take the ExecutorService object,

52
00:02:39.050 --> 00:02:43.040
using the Executors utility class,

53
00:02:43.040 --> 00:02:45.010
and now, what are we going to do here?

54
00:02:45.010 --> 00:02:47.050
We are going to use that overloaded version of the method.

55
00:02:47.050 --> 00:02:49.040
So let's have a nice here newFixedThreadPool.

56
00:02:49.040 --> 00:02:51.040
I'm going to use this version of the method.

57
00:02:51.040 --> 00:02:54.020
I want three threads, and the threadFactory should be

58
00:02:54.020 --> 00:02:57.090
my threadFactory instance, the custom one that I made.

59
00:02:57.090 --> 00:03:00.070
So I'm going to say new CustomThreadFactory

60
00:03:00.070 --> 00:03:04.050
pass the instance as the second argument.

61
00:03:04.050 --> 00:03:06.020
Okay? So now the pool.

62
00:03:06.020 --> 00:03:08.060
The service object that I'm going to get is going to be

63
00:03:08.060 --> 00:03:10.070
using my ThreadFactory instead of

64
00:03:10.070 --> 00:03:13.010
the default implementation. Okay?

65
00:03:13.010 --> 00:03:17.030
And I'm going to pick up the logging processor task which

66
00:03:17.030 --> 00:03:20.010
is only trying to lock something on the console, right?

67
00:03:20.010 --> 00:03:22.080
Before that let's quickly go to the logging processor,

68
00:03:22.080 --> 00:03:25.060
and yeah, we've already got the sis out where we

69
00:03:25.060 --> 00:03:28.030
have the name of the current thread printed.

70
00:03:28.030 --> 00:03:30.050
That is essential for us because since we have given

71
00:03:30.050 --> 00:03:32.060
custom names, we need to understand what is

72
00:03:32.060 --> 00:03:36.000
the name of the thread that came inside this execution.

73
00:03:36.000 --> 00:03:38.060
Alright? So we have done that.

74
00:03:38.060 --> 00:03:45.070
Let's go ahead and say for a loop of six.

75
00:03:45.070 --> 00:03:48.040
I'm gonna run a loop, maybe six times.

76
00:03:48.040 --> 00:03:56.020
i<6,i++ And I'm gonna say service.submit

77
00:03:56.020 --> 00:04:02.040
And that will be new LoggingProcessor.

78
00:04:02.040 --> 00:04:04.010
Yeah. That's the task I want to submit.

79
00:04:04.010 --> 00:04:07.010
I deliberately am running it for six times,

80
00:04:07.010 --> 00:04:10.010
so that I have six instances of the tasks and

81
00:04:10.010 --> 00:04:11.090
I have three threads. Okay?

82
00:04:11.090 --> 00:04:14.070
So let me see how the threads are going to be now named.

83
00:04:14.070 --> 00:04:18.000
So let's go ahead and run this.

84
00:04:18.000 --> 00:04:20.010
Yeah. You see? So you have thread name

85
00:04:20.010 --> 00:04:23.090
as CustomThread-2, CustomThread-1, CustomThread-3,

86
00:04:23.090 --> 00:04:26.030
so those are the kind of names its been picking up

87
00:04:26.030 --> 00:04:28.030
for all the tasks, and that's essentially happening

88
00:04:28.030 --> 00:04:32.010
because of the basic fact that I'm trying to use the names

89
00:04:32.010 --> 00:04:35.020
from my factory instead of the default one.

90
00:04:35.020 --> 00:04:37.060
Of course you can set up priority and you can also

91
00:04:37.060 --> 00:04:40.020
set the Daemon status but be very careful about it because

92
00:04:40.020 --> 00:04:42.040
we've already discussed: you are to exercise caution

93
00:04:42.040 --> 00:04:45.030
when you are trying to develop multi-threaded applications.

94
00:04:45.030 --> 00:04:48.050
In case of priority, it may not work the way you expect.

95
00:04:48.050 --> 00:04:51.010
Okay? So that's the ThreadFactory API,

96
00:04:51.010 --> 00:04:55.020
and now we have come to an end of the Java

97
00:04:55.020 --> 00:04:58.000
standard edition concurrency utilities. Alright?

98
00:04:58.000 --> 00:05:00.030
That was the last API that we were going to take a look at.

99
00:05:00.030 --> 00:05:02.080
And we essentially took a look at all the

100
00:05:02.080 --> 00:05:05.050
Java standard edition concurrency APIs

101
00:05:05.050 --> 00:05:08.070
for the fact that when we go to Java enterprise edition

102
00:05:08.070 --> 00:05:12.000
concurrency it'll be way better to understand these APIs

103
00:05:12.000 --> 00:05:13.090
because when you talk about enterprise versions

104
00:05:13.090 --> 00:05:15.070
of concurrency they are an extension

105
00:05:15.070 --> 00:05:18.050
to these APIs themselves. Alright?

106
00:05:18.050 --> 00:05:19.080
So we know a lot of things of the

107
00:05:19.080 --> 00:05:22.080
standard edition concurrency, and now let's move on

108
00:05:22.080 --> 00:05:26.000
to the enterprise edition concurrency utilities.

