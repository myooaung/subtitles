WEBVTT
1
00:00:00.060 --> 00:00:02.040
- [Instructor] Now let's do the next step.

2
00:00:02.040 --> 00:00:04.020
We have to create a TransactionBean

3
00:00:04.020 --> 00:00:06.040
which is going to do those DB operations

4
00:00:06.040 --> 00:00:08.000
against the respective tables.

5
00:00:08.000 --> 00:00:09.070
The bank account transaction

6
00:00:09.070 --> 00:00:12.040
and the bank account transaction log, right?

7
00:00:12.040 --> 00:00:14.070
So let's go back to the IDE and under the

8
00:00:14.070 --> 00:00:18.000
source packages, I'll add a package

9
00:00:18.000 --> 00:00:22.090
and say com.app.ejbBeans.

10
00:00:22.090 --> 00:00:26.040
So I'm going to create a stateless session Bean.

11
00:00:26.040 --> 00:00:27.070
If you remember in our earlier videos

12
00:00:27.070 --> 00:00:29.020
we talked about this concept.

13
00:00:29.020 --> 00:00:32.070
It is basically a kind of enterprise Java Bean

14
00:00:32.070 --> 00:00:34.090
which allows you to do independent operations

15
00:00:34.090 --> 00:00:36.050
based on your request processing needs.

16
00:00:36.050 --> 00:00:38.020
So I'm just going to say finish.

17
00:00:38.020 --> 00:00:42.050
And here I'll create a session Bean.

18
00:00:42.050 --> 00:00:47.080
Let's name it TransactionBean.

19
00:00:47.080 --> 00:00:51.000
Okay, and you do see it is already annotated

20
00:00:51.000 --> 00:00:52.050
with the stateless annotation.

21
00:00:52.050 --> 00:00:54.080
Let's also give this Bean a name.

22
00:00:54.080 --> 00:00:59.040
So I'm going to say, bx Bean.

23
00:00:59.040 --> 00:01:03.000
Now here, we have to define a couple of methods.

24
00:01:03.000 --> 00:01:06.030
One, to save the bank account transaction information,

25
00:01:06.030 --> 00:01:08.020
And the other, to save the bank account

26
00:01:08.020 --> 00:01:10.040
transaction log information.

27
00:01:10.040 --> 00:01:12.090
So let's go ahead and start doing that.

28
00:01:12.090 --> 00:01:17.020
But, in order to define those couple of methods,

29
00:01:17.020 --> 00:01:19.010
Do we understand that we also need the

30
00:01:19.010 --> 00:01:20.080
connection object to the database?

31
00:01:20.080 --> 00:01:24.020
That's right, but now we are not going to use the

32
00:01:24.020 --> 00:01:26.090
conventional JDBC program to do the connection stuff.

33
00:01:26.090 --> 00:01:29.060
What we are going to do is this.

34
00:01:29.060 --> 00:01:33.060
I'm going to say add resource and

35
00:01:33.060 --> 00:01:36.070
I'm going to ask this particular Bean

36
00:01:36.070 --> 00:01:40.010
to look up the JDBC resource that

37
00:01:40.010 --> 00:01:41.050
we've already configured.

38
00:01:41.050 --> 00:01:43.080
That's the one, so I'm going to pick this up,

39
00:01:43.080 --> 00:01:48.030
go to IDE and mention that as the lookup resource.

40
00:01:48.030 --> 00:01:51.060
And let me also give a reference for this.

41
00:01:51.060 --> 00:01:54.010
This will be the data source and

42
00:01:54.010 --> 00:01:56.040
that will be source one for us.

43
00:01:56.040 --> 00:02:00.050
Similarly, I'm going to inject the other data source as well

44
00:02:00.050 --> 00:02:03.000
by copying lines number 20 and 21

45
00:02:03.000 --> 00:02:05.010
and pasting them to 23, 24.

46
00:02:05.010 --> 00:02:08.030
Let me just change this name to data source two,

47
00:02:08.030 --> 00:02:11.070
and this reference as well to data source two.

48
00:02:11.070 --> 00:02:12.050
Right?

49
00:02:12.050 --> 00:02:14.080
So now we have two independent data sources

50
00:02:14.080 --> 00:02:17.000
injected into this TransactionBean.

51
00:02:17.000 --> 00:02:19.040
And now, the couple of methods that we will write,

52
00:02:19.040 --> 00:02:23.000
each one of them will use one data source reference.

53
00:02:23.000 --> 00:02:26.060
Okay, so let's go ahead, you'll add business logic now.

54
00:02:26.060 --> 00:02:28.050
Let's get rid of the comment and let's

55
00:02:28.050 --> 00:02:31.050
right-click insert code add business method.

56
00:02:31.050 --> 00:02:32.060
Okay.

57
00:02:32.060 --> 00:02:38.010
Let's name this save bank account transaction.

58
00:02:38.010 --> 00:02:40.080
Make sure you follow the naming convention right.

59
00:02:40.080 --> 00:02:43.000
Save bank account transaction, say okay

60
00:02:43.000 --> 00:02:47.030
And then let's add one more, right click insert code,

61
00:02:47.030 --> 00:02:49.040
and add business method.

62
00:02:49.040 --> 00:02:54.050
And this you can name as, save bank account transaction log.

63
00:02:54.050 --> 00:02:55.040
Right?

64
00:02:55.040 --> 00:02:56.090
So one method for each of the tables.

65
00:02:56.090 --> 00:02:58.060
Let's say okay.

66
00:02:58.060 --> 00:03:03.020
Now let's go inside the save bank account transaction

67
00:03:03.020 --> 00:03:05.000
and quickly write the code for it.

68
00:03:05.000 --> 00:03:07.020
So the first thing is we a need connection object.

69
00:03:07.020 --> 00:03:09.040
So we get that connection object,

70
00:03:09.040 --> 00:03:14.020
Java.sql from the data source.

71
00:03:14.020 --> 00:03:17.030
I'm gonna say, sourceone.getconnection.

72
00:03:17.030 --> 00:03:20.090
Okay, next we take the statement object,

73
00:03:20.090 --> 00:03:23.030
so I'm just going to write a plain statement coding

74
00:03:23.030 --> 00:03:29.050
so that will be, let's import that and say

75
00:03:29.050 --> 00:03:33.040
connection.createstatement,

76
00:03:33.040 --> 00:03:41.040
and then statement.executeupdate, this one.

77
00:03:41.040 --> 00:03:43.010
And what are we going to do here?

78
00:03:43.010 --> 00:03:44.070
Let's maximize this, so that will be

79
00:03:44.070 --> 00:03:55.040
insert into bank account transaction values

80
00:03:55.040 --> 00:03:58.040
Now let's see what values we want to insert.

81
00:03:58.040 --> 00:04:02.010
Let's go back to the database and that's your table.

82
00:04:02.010 --> 00:04:06.050
So we have transaction entries up 'til 20

83
00:04:06.050 --> 00:04:09.060
and in the log we have not much of entries

84
00:04:09.060 --> 00:04:11.010
because this is a fresh table that you may

85
00:04:11.010 --> 00:04:13.090
have created for tracking, you know the audit information.

86
00:04:13.090 --> 00:04:16.070
So under the transaction table, I'm going to insert

87
00:04:16.070 --> 00:04:19.030
a new entry with a primary queue of 21.

88
00:04:19.030 --> 00:04:21.020
So let's go ahead and say 21.

89
00:04:21.020 --> 00:04:24.020
Let's say this is for account number one-one-zero-one,

90
00:04:24.020 --> 00:04:27.020
and let's say this is a debit operation.

91
00:04:27.020 --> 00:04:31.090
Let's say it was for 400 dollars, and let's also

92
00:04:31.090 --> 00:04:36.040
give the date time stamp so that will be,

93
00:04:36.040 --> 00:04:38.010
Let's close these codes, sorry.

94
00:04:38.010 --> 00:04:39.080
Let's close these codes first.

95
00:04:39.080 --> 00:04:43.010
And then say new Java.sql update

96
00:04:43.010 --> 00:04:50.070
to which I will feed in the system current time.

97
00:04:50.070 --> 00:04:54.020
And once that is done, then you will have to

98
00:04:54.020 --> 00:04:56.000
make sure that you lose that single code.

99
00:04:56.000 --> 00:05:00.080
So that will be single code and the bracket.

100
00:05:00.080 --> 00:05:04.000
So you don't need this, right?

101
00:05:04.000 --> 00:05:07.060
So we have inserted into the bank account

102
00:05:07.060 --> 00:05:09.040
transaction table these values.

103
00:05:09.040 --> 00:05:12.020
So this is a fresh entry for the transaction table.

104
00:05:12.020 --> 00:05:14.030
Now, there will of course be the checked exceptions

105
00:05:14.030 --> 00:05:17.010
that will be thrown in so instead, we are just going to say

106
00:05:17.010 --> 00:05:20.090
throws close this time will not handle it using tri-catch

107
00:05:20.090 --> 00:05:23.000
Let the calling method handle it.

108
00:05:23.000 --> 00:05:26.000
Okay, now the similar thing we'll have

109
00:05:26.000 --> 00:05:27.060
to do for the other method as well.

110
00:05:27.060 --> 00:05:31.060
So I am going to copy lines 32 to 34 carefully.

111
00:05:31.060 --> 00:05:34.080
Come to the other method and on line 38

112
00:05:34.080 --> 00:05:36.030
I am pasting out these lines.

113
00:05:36.030 --> 00:05:39.030
But now the difference will be that this particular

114
00:05:39.030 --> 00:05:41.080
operation will happen with the data source two.

115
00:05:41.080 --> 00:05:44.040
And the table is of course different so we will have

116
00:05:44.040 --> 00:05:46.040
to change the coding, so this will be

117
00:05:46.040 --> 00:05:48.090
transaction underscore log table.

118
00:05:48.090 --> 00:05:53.080
Okay, and the values will be, let's see what values

119
00:05:53.080 --> 00:05:54.060
you want to insert.

120
00:05:54.060 --> 00:05:56.050
So let's go to the data base and check out

121
00:05:56.050 --> 00:05:57.030
the transaction log table.

122
00:05:57.030 --> 00:06:00.090
So we only have two entries so the primary key

123
00:06:00.090 --> 00:06:02.040
of the next record will be three.

124
00:06:02.040 --> 00:06:04.070
So let's go ahead there, the IDE and say

125
00:06:04.070 --> 00:06:09.090
I want to insert a third entry for the transaction ID 21.

126
00:06:09.090 --> 00:06:14.020
So let's say 21, and who did this transaction,

127
00:06:14.020 --> 00:06:17.000
that's the next column so maybe I'll say system did it.

128
00:06:17.000 --> 00:06:21.020
And there's no amount column here so we'll get rid of it.

129
00:06:21.020 --> 00:06:26.030
This as well will throw you the sql exception.

130
00:06:26.030 --> 00:06:28.050
Let's quickly define the throws close.

131
00:06:28.050 --> 00:06:31.040
So we have defined those couple of transaction methods

132
00:06:31.040 --> 00:06:32.070
that are going to our transactions

133
00:06:32.070 --> 00:06:34.030
against our respective tables.

134
00:06:34.030 --> 00:06:36.090
Okay, so this is a fresh entry so when this entry

135
00:06:36.090 --> 00:06:38.080
gets inserted, yes this entry should

136
00:06:38.080 --> 00:06:40.080
also get inserted without any problems.

137
00:06:40.080 --> 00:06:44.090
Correct, okay so we'll now look at the next step

138
00:06:44.090 --> 00:06:47.000
but that will happen in the next video.

