WEBVTT
1
00:00:00.050 --> 00:00:01.070
- [Instructor] In the previous demo

2
00:00:01.070 --> 00:00:04.000
we tried to use the FixedThreadPool

3
00:00:04.000 --> 00:00:05.090
on the executor's utility clause.

4
00:00:05.090 --> 00:00:08.040
However, the executor framework allows

5
00:00:08.040 --> 00:00:10.060
you to create different kinds of pools.

6
00:00:10.060 --> 00:00:12.030
Let's take a very quick look at that.

7
00:00:12.030 --> 00:00:14.060
So instead of the newFixedThreadPool,

8
00:00:14.060 --> 00:00:18.070
you can also say newCashedThreadPool.

9
00:00:18.070 --> 00:00:21.060
Cashed Thread Pool primarily is an expandable pool,

10
00:00:21.060 --> 00:00:24.020
so whenever you need more tasks,

11
00:00:24.020 --> 00:00:26.050
more threads will be created in this pool.

12
00:00:26.050 --> 00:00:28.070
If there are threads that are available out

13
00:00:28.070 --> 00:00:31.000
of the previous tasks execution completion,

14
00:00:31.000 --> 00:00:32.060
then those threads can be utilized,

15
00:00:32.060 --> 00:00:34.060
or re-used as we say.

16
00:00:34.060 --> 00:00:37.060
Okay, so that's a Cashed Pool, that's another variation.

17
00:00:37.060 --> 00:00:41.030
And then you also have newWorkStealingPool.

18
00:00:41.030 --> 00:00:44.050
So, this is actually a part of the fork join implementation

19
00:00:44.050 --> 00:00:46.070
and fork-joined implementation is not something

20
00:00:46.070 --> 00:00:49.000
that we are looking at in this course,

21
00:00:49.000 --> 00:00:50.060
but of course if you want something

22
00:00:50.060 --> 00:00:53.020
of kind of fork join you should be looking at that pool.

23
00:00:53.020 --> 00:00:56.070
Right, in addition to the Fixed Thread pool,

24
00:00:56.070 --> 00:00:58.090
or maybe the Cashed Thread pool,

25
00:00:58.090 --> 00:01:00.090
or the Work Stealing pool,

26
00:01:00.090 --> 00:01:03.030
or of course you have the single thread executor as well,

27
00:01:03.030 --> 00:01:06.020
where you just have a single thread doing all your tasks,

28
00:01:06.020 --> 00:01:09.080
there are also overloaded versions of these factory methods.

29
00:01:09.080 --> 00:01:11.040
For example, look at this.

30
00:01:11.040 --> 00:01:13.010
When I say newFixedThreadPool

31
00:01:13.010 --> 00:01:16.000
I have two methods, so overloaded.

32
00:01:16.000 --> 00:01:18.070
One which only takes the number of threads,

33
00:01:18.070 --> 00:01:20.070
and the second which takes the number of threads

34
00:01:20.070 --> 00:01:23.050
along with the thread factory instance.

35
00:01:23.050 --> 00:01:25.000
Now what is this thread factory?

36
00:01:25.000 --> 00:01:27.030
So what happens is that whenever you talk about

37
00:01:27.030 --> 00:01:29.040
the executor framework,

38
00:01:29.040 --> 00:01:32.020
the executor framework is always going to create threads

39
00:01:32.020 --> 00:01:33.090
from a factory.

40
00:01:33.090 --> 00:01:37.000
If we don't specify the factory, like that,

41
00:01:37.000 --> 00:01:38.090
you're only specifying the number of threads,

42
00:01:38.090 --> 00:01:41.090
in this case, the default thread factory from

43
00:01:41.090 --> 00:01:43.080
the implementation will be used.

44
00:01:43.080 --> 00:01:47.030
However, if you want to create your own thread factory,

45
00:01:47.030 --> 00:01:50.090
you can do so and then instead of using this version

46
00:01:50.090 --> 00:01:53.010
you actually can use the version

47
00:01:53.010 --> 00:01:56.060
which takes the thread factory as another argument,

48
00:01:56.060 --> 00:01:57.090
that's completely doable.

49
00:01:57.090 --> 00:01:59.070
We're going to talk about thread factory in

50
00:01:59.070 --> 00:02:01.070
our upcoming videos, do not worry about that.

51
00:02:01.070 --> 00:02:03.030
But right now, just remember that

52
00:02:03.030 --> 00:02:05.070
when it creates a thread pool the framework

53
00:02:05.070 --> 00:02:08.020
at that point in time would actually puts the threads

54
00:02:08.020 --> 00:02:11.010
in the pool using a thread factory implementation,

55
00:02:11.010 --> 00:02:14.040
which is already present within the framework, right?

56
00:02:14.040 --> 00:02:17.030
Similarly, if you take a look at the Cash thread pool,

57
00:02:17.030 --> 00:02:19.090
that also comes as an overloaded method which

58
00:02:19.090 --> 00:02:22.000
will accept the thread factory instance, right?

59
00:02:22.000 --> 00:02:24.080
So those are the variations of the methods that we have,

60
00:02:24.080 --> 00:02:28.020
however right now we'll just stick to the newFixedThreadPool

61
00:02:28.020 --> 00:02:31.070
and specify the number of threads as three.

62
00:02:31.070 --> 00:02:34.050
Okay, another point to observe here is,

63
00:02:34.050 --> 00:02:37.070
when you submitted the task, the output of it came under

64
00:02:37.070 --> 00:02:40.000
the future object, we've already known this that

65
00:02:40.000 --> 00:02:43.010
the framework will allow you to capture the output of a task

66
00:02:43.010 --> 00:02:45.000
inside the future, right?

67
00:02:45.000 --> 00:02:47.040
And we said future.get, now please understand

68
00:02:47.040 --> 00:02:50.090
that future.get is a blocking operation.

69
00:02:50.090 --> 00:02:53.030
Blocking operation in the sense the main method

70
00:02:53.030 --> 00:02:56.020
is going to be blocked until it gets the future value

71
00:02:56.020 --> 00:02:58.010
for sure, okay?

72
00:02:58.010 --> 00:02:59.060
So what I'm going to do is I'm just going

73
00:02:59.060 --> 00:03:02.000
to run this demo again and we'll observe the output.

74
00:03:02.000 --> 00:03:04.060
Let's run this file.

75
00:03:04.060 --> 00:03:06.070
Do you see that it is trying to print

76
00:03:06.070 --> 00:03:08.050
the result of the operation, which is basically

77
00:03:08.050 --> 00:03:10.020
the future.get call?

78
00:03:10.020 --> 00:03:13.080
And after all the future.get calls out over,

79
00:03:13.080 --> 00:03:17.010
then I get the Main execution over statement, right?

80
00:03:17.010 --> 00:03:18.090
Which is at the end.

81
00:03:18.090 --> 00:03:21.070
That essentially means, that until an unless,

82
00:03:21.070 --> 00:03:23.020
it gets all the futures,

83
00:03:23.020 --> 00:03:25.060
it's not going to execute the main method,

84
00:03:25.060 --> 00:03:27.060
or basically it is not going to resume

85
00:03:27.060 --> 00:03:28.090
the main method execution.

86
00:03:28.090 --> 00:03:30.050
That's the point.

87
00:03:30.050 --> 00:03:34.020
So sometimes it maybe a real pain in order to keep waiting

88
00:03:34.020 --> 00:03:37.040
'til you get all the future objects have a level.

89
00:03:37.040 --> 00:03:38.050
Which is why there is

90
00:03:38.050 --> 00:03:40.040
an overloaded version of the get method,

91
00:03:40.040 --> 00:03:43.010
let's take a look at that, that's the one,

92
00:03:43.010 --> 00:03:46.000
which helps you to specify a timeout period.

93
00:03:46.000 --> 00:03:48.090
So this timeout will signify the waiting period

94
00:03:48.090 --> 00:03:51.010
for the block, okay?

95
00:03:51.010 --> 00:03:54.020
So that timeout is the time for which the operation

96
00:03:54.020 --> 00:03:55.070
of the main will be blocked,

97
00:03:55.070 --> 00:03:58.020
you know main will not be able to resume its execution.

98
00:03:58.020 --> 00:04:00.090
So what we'll do is, we'll test this out without the get

99
00:04:00.090 --> 00:04:03.030
so that we make it very clear to ourselves.

100
00:04:03.030 --> 00:04:04.060
So I'm going to take the quote

101
00:04:04.060 --> 00:04:08.050
from line number 37 up 'til 43,

102
00:04:08.050 --> 00:04:09.060
and get rid of this.

103
00:04:09.060 --> 00:04:12.000
We don't want to capture the future object, okay?

104
00:04:12.000 --> 00:04:13.080
Let's not do this.

105
00:04:13.080 --> 00:04:17.070
Let's just submit the task that we want to execute.

106
00:04:17.070 --> 00:04:19.050
Let's go to the database,

107
00:04:19.050 --> 00:04:21.050
get rid of the users so because

108
00:04:21.050 --> 00:04:24.030
we're going to run the use case again, okay.

109
00:04:24.030 --> 00:04:29.000
Now, let me run this.

110
00:04:29.000 --> 00:04:30.050
Yeah, do you see what happened?

111
00:04:30.050 --> 00:04:32.000
There's a difference in the output.

112
00:04:32.000 --> 00:04:34.080
The main execution over statement actually got executed,

113
00:04:34.080 --> 00:04:38.050
which means the main thread was not blocked anymore.

114
00:04:38.050 --> 00:04:40.010
Right, that's exactly what happens

115
00:04:40.010 --> 00:04:42.020
when you do not use future.

116
00:04:42.020 --> 00:04:45.060
So at times you really need the future object because

117
00:04:45.060 --> 00:04:47.010
you want to capture the value.

118
00:04:47.010 --> 00:04:51.000
In those cases you can do by capturing the future object.

119
00:04:51.000 --> 00:04:52.050
You can do that.

120
00:04:52.050 --> 00:04:53.050
However if you think that

121
00:04:53.050 --> 00:04:54.090
there's no waiting period required,

122
00:04:54.090 --> 00:04:57.030
might as well skip that and just submit your task

123
00:04:57.030 --> 00:04:59.030
and get the job done, okay?

124
00:04:59.030 --> 00:05:01.020
Alright, so we've seen the executor service,

125
00:05:01.020 --> 00:05:04.030
we've seen how to use the factory methods

126
00:05:04.030 --> 00:05:05.040
that's on line number 32,

127
00:05:05.040 --> 00:05:08.050
then we saw how to submit a task on line number 36,

128
00:05:08.050 --> 00:05:10.000
we saw how to shut down the service,

129
00:05:10.000 --> 00:05:10.080
We are going to talk more

130
00:05:10.080 --> 00:05:13.010
about shutdown in the subsequent video.

131
00:05:13.010 --> 00:05:15.050
You've almost seen the basic utility of

132
00:05:15.050 --> 00:05:17.040
the executor service object.

133
00:05:17.040 --> 00:05:20.000
Going ahead we'll look at the other APIs.

