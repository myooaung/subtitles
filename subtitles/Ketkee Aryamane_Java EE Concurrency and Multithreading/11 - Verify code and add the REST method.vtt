WEBVTT
1
00:00:00.050 --> 00:00:02.080
- [Instructor] Now to the Rest class let's add a method

2
00:00:02.080 --> 00:00:05.060
and from there we are going to call the Dao class

3
00:00:05.060 --> 00:00:07.040
to get all the bank accounts

4
00:00:07.040 --> 00:00:08.070
and for every bank account,

5
00:00:08.070 --> 00:00:11.020
we'll called the ManagedExecutorService

6
00:00:11.020 --> 00:00:13.090
to submit the report generation task.

7
00:00:13.090 --> 00:00:16.010
So let's go to the IDE.

8
00:00:16.010 --> 00:00:19.060
That's the ReportsResource restful bean that we have created

9
00:00:19.060 --> 00:00:22.050
in the constructor we of course did the connection pooling,

10
00:00:22.050 --> 00:00:24.000
and that the object that we have gotten

11
00:00:24.000 --> 00:00:25.090
through the resource annotation.

12
00:00:25.090 --> 00:00:30.020
So let's go ahead and add a material for the rest,

13
00:00:30.020 --> 00:00:32.060
which is allowed in the form of get.

14
00:00:32.060 --> 00:00:41.000
And I'll say, public, string, generate reports.

15
00:00:41.000 --> 00:00:44.000
Okay, and what are we going to do inside?

16
00:00:44.000 --> 00:00:46.090
The first thing is, we have to call the Dao

17
00:00:46.090 --> 00:00:48.090
to get all the bank accounts.

18
00:00:48.090 --> 00:00:57.010
So I'm going to say list, bank accounts,

19
00:00:57.010 --> 00:00:59.030
and you have the Dao ready with you,

20
00:00:59.030 --> 00:01:06.080
so you just have to call get all back accounts.

21
00:01:06.080 --> 00:01:09.090
Once we do this, let's understand a few semantics

22
00:01:09.090 --> 00:01:10.090
around what we are going to do.

23
00:01:10.090 --> 00:01:15.000
We are going to now use the managed executor service object

24
00:01:15.000 --> 00:01:19.060
to submit task of report generation for every bank account.

25
00:01:19.060 --> 00:01:21.080
Now if you remember in the standard edition platform,

26
00:01:21.080 --> 00:01:25.090
we actually had to make use of the executors utility,

27
00:01:25.090 --> 00:01:29.000
and then opt for one of its factory methods

28
00:01:29.000 --> 00:01:31.020
to get the pool, to get the service object.

29
00:01:31.020 --> 00:01:32.000
Correct?

30
00:01:32.000 --> 00:01:35.020
However, now, we are in a managed container environment.

31
00:01:35.020 --> 00:01:37.060
And when you are in a managed container environment,

32
00:01:37.060 --> 00:01:40.040
you really don't require all of the stuff

33
00:01:40.040 --> 00:01:42.010
of the factory methods.

34
00:01:42.010 --> 00:01:45.000
You just have to go ahead and make sure

35
00:01:45.000 --> 00:01:47.040
that you grab that managed executor service object

36
00:01:47.040 --> 00:01:49.050
and go ahead and submit it.

37
00:01:49.050 --> 00:01:50.080
That's how this works.

38
00:01:50.080 --> 00:01:53.060
There is no need of calling any factory method,

39
00:01:53.060 --> 00:01:55.020
and getting their object, and all of that.

40
00:01:55.020 --> 00:01:56.070
The object is available to us,

41
00:01:56.070 --> 00:01:59.060
we have injected it on line number 29,

42
00:01:59.060 --> 00:02:01.070
using the resource annotation.

43
00:02:01.070 --> 00:02:02.070
I'm gonna go down there,

44
00:02:02.070 --> 00:02:05.020
and under the generate reports method,

45
00:02:05.020 --> 00:02:09.090
I am basically going to use the executor service

46
00:02:09.090 --> 00:02:11.050
to submit the report task.

47
00:02:11.050 --> 00:02:14.030
So let's iterate that list,

48
00:02:14.030 --> 00:02:21.000
let's say for every bank account in accounts, right?

49
00:02:21.000 --> 00:02:26.060
We are going to use the executor service,

50
00:02:26.060 --> 00:02:30.040
let me check the name of the object that I have opted for.

51
00:02:30.040 --> 00:02:32.010
Okay, that's only service.

52
00:02:32.010 --> 00:02:35.010
Let's come down, line number 52 says service,

53
00:02:35.010 --> 00:02:38.010
and I'm gonna say dot submit.

54
00:02:38.010 --> 00:02:39.010
The method is still the same

55
00:02:39.010 --> 00:02:44.030
and it demands from you the instance of the processor.

56
00:02:44.030 --> 00:02:46.060
Right, the instance of the callable or the runnable.

57
00:02:46.060 --> 00:02:48.040
So let's instead share that,

58
00:02:48.040 --> 00:02:53.020
I say new reports processor.

59
00:02:53.020 --> 00:02:54.080
Now this reports processor constructor

60
00:02:54.080 --> 00:02:56.020
will of course take two arguments.

61
00:02:56.020 --> 00:02:57.010
One is the bank account,

62
00:02:57.010 --> 00:02:59.020
which we already have as a part of the duration.

63
00:02:59.020 --> 00:03:00.040
And the second is the dao,

64
00:03:00.040 --> 00:03:03.020
which we have already set up in this class.

65
00:03:03.020 --> 00:03:06.010
Okay, now this of course is going to

66
00:03:06.010 --> 00:03:09.000
return me a future object,

67
00:03:09.000 --> 00:03:11.000
so let's also grab that.

68
00:03:11.000 --> 00:03:15.020
Future of, it's returning me a boolean value,

69
00:03:15.020 --> 00:03:19.010
so let's say future equal to.

70
00:03:19.010 --> 00:03:22.050
And once that's done the last thing that we have to do is,

71
00:03:22.050 --> 00:03:29.010
we just have to say report generated.

72
00:03:29.010 --> 00:03:32.010
Ask that question, and you will get the answer

73
00:03:32.010 --> 00:03:36.030
on the future or get call.

74
00:03:36.030 --> 00:03:38.050
So of course this is going to throw some exception,

75
00:03:38.050 --> 00:03:43.050
let's quickly handle that using the try catch.

76
00:03:43.050 --> 00:03:47.080
So this iteration is done, and now what we have to is,

77
00:03:47.080 --> 00:03:50.020
we just have to go ahead and return the string value

78
00:03:50.020 --> 00:03:52.000
out of this method.

79
00:03:52.000 --> 00:03:54.080
So I'm just going to say return, and let's see,

80
00:03:54.080 --> 00:04:02.090
the report generation tasks submitted.

81
00:04:02.090 --> 00:04:04.090
Okay.

82
00:04:04.090 --> 00:04:06.090
Fair enough, so we have taken all the bank accounts

83
00:04:06.090 --> 00:04:08.010
information from the dao.

84
00:04:08.010 --> 00:04:11.000
For each back account we are trying to submit a task

85
00:04:11.000 --> 00:04:12.020
of the report processor.

86
00:04:12.020 --> 00:04:13.040
So now it's going to execute

87
00:04:13.040 --> 00:04:15.070
and create a bank account transaction report

88
00:04:15.070 --> 00:04:18.090
on the D drive for every back account.

89
00:04:18.090 --> 00:04:21.020
Now before we actually test this application,

90
00:04:21.020 --> 00:04:24.030
this was a huge amount of code that we have written,

91
00:04:24.030 --> 00:04:25.070
so we are going to quickly review all

92
00:04:25.070 --> 00:04:26.080
the classes once again,

93
00:04:26.080 --> 00:04:29.000
and see that we have is right.

94
00:04:29.000 --> 00:04:31.080
Let's go to bank account, and let's see what we have done.

95
00:04:31.080 --> 00:04:34.070
Get all bank accounts, we've created the connection object,

96
00:04:34.070 --> 00:04:38.000
results set row in a new bank account object,

97
00:04:38.000 --> 00:04:40.030
added that account to accounts,

98
00:04:40.030 --> 00:04:41.090
lists and we return that account.

99
00:04:41.090 --> 00:04:43.070
So this method looks fine,

100
00:04:43.070 --> 00:04:46.020
then we have the get transactions for bank account,

101
00:04:46.020 --> 00:04:49.010
which is going to take transaction, yes.

102
00:04:49.010 --> 00:04:51.000
And then the query is right,

103
00:04:51.000 --> 00:04:52.070
and you are passing the parameter.

104
00:04:52.070 --> 00:04:56.030
We created the bank account transaction object.

105
00:04:56.030 --> 00:04:59.030
Oh there is one thing that we have missed out here,

106
00:04:59.030 --> 00:05:00.080
good that we checked.

107
00:05:00.080 --> 00:05:02.010
So, what we're going to do is,

108
00:05:02.010 --> 00:05:04.010
we have to take that list as well

109
00:05:04.010 --> 00:05:10.060
and add that transaction right to the list.

110
00:05:10.060 --> 00:05:12.040
Okay.

111
00:05:12.040 --> 00:05:15.080
And then we have returned the transactions, great.

112
00:05:15.080 --> 00:05:17.080
So that's done, so bank account now looks good.

113
00:05:17.080 --> 00:05:20.020
Bank Account bean of course looks good,

114
00:05:20.020 --> 00:05:21.070
bank account transaction bean is good,

115
00:05:21.070 --> 00:05:24.070
we have verified the names with the database column names.

116
00:05:24.070 --> 00:05:28.050
Okay, let's go to reports processor and check quickly.

117
00:05:28.050 --> 00:05:30.050
Yes, we have tied a bank account perfectly.

118
00:05:30.050 --> 00:05:32.090
Bank account dao with the reports processor,

119
00:05:32.090 --> 00:05:34.090
we have the constructor written correctly.

120
00:05:34.090 --> 00:05:37.010
Let's take look at the call method,

121
00:05:37.010 --> 00:05:39.000
we first dropped in the transactions,

122
00:05:39.000 --> 00:05:42.070
and then we create a file unique to every account number

123
00:05:42.070 --> 00:05:47.030
with this pattern under the D drive reports folder.

124
00:05:47.030 --> 00:05:52.030
And then we iterate the transactions list,

125
00:05:52.030 --> 00:05:56.020
and for every transaction we are writing the report.

126
00:05:56.020 --> 00:05:58.030
Oh, so there is a slight mistake here.

127
00:05:58.030 --> 00:05:59.050
What we have to do is,

128
00:05:59.050 --> 00:06:03.080
we are trying to create the buffer writer just once,

129
00:06:03.080 --> 00:06:07.020
and that is for all the transactions for that account,

130
00:06:07.020 --> 00:06:10.010
which means this try basically has to be outside.

131
00:06:10.010 --> 00:06:15.070
Let's cut this, and put it first on line number 36.

132
00:06:15.070 --> 00:06:17.080
Okay, and then every account transaction

133
00:06:17.080 --> 00:06:20.080
is going to be written using the same writer object.

134
00:06:20.080 --> 00:06:23.050
So you see that was a logical flow.

135
00:06:23.050 --> 00:06:26.020
And then we of course write out everything,

136
00:06:26.020 --> 00:06:28.010
and the flush method call,

137
00:06:28.010 --> 00:06:31.030
instead of at line number 45 should be done

138
00:06:31.030 --> 00:06:36.080
once all the transactions are iterated.

139
00:06:36.080 --> 00:06:44.040
Okay, and then let's take that variable at line number 48,

140
00:06:44.040 --> 00:06:47.060
and let's do that.

141
00:06:47.060 --> 00:06:51.030
Okay, so basically the report generated is absolutely true,

142
00:06:51.030 --> 00:06:54.020
when the entire writer job

143
00:06:54.020 --> 00:06:56.060
to write out the report is completed.

144
00:06:56.060 --> 00:06:58.030
So a few flaws here and there,

145
00:06:58.030 --> 00:07:01.080
one is we of course interchange the try and the for block,

146
00:07:01.080 --> 00:07:04.090
because we just want one writer for all the transactions,

147
00:07:04.090 --> 00:07:08.070
then we flush only when we write out the transactions.

148
00:07:08.070 --> 00:07:10.080
Iteration is complete there after we flush,

149
00:07:10.080 --> 00:07:14.010
and then we set the variable to true.

150
00:07:14.010 --> 00:07:15.080
So the reports processor is looking good,

151
00:07:15.080 --> 00:07:18.040
let's also see the reports resource.

152
00:07:18.040 --> 00:07:20.000
So we have tied the bank account dao,

153
00:07:20.000 --> 00:07:22.000
we wanted to create connection pooling.

154
00:07:22.000 --> 00:07:24.020
We have injected the managed executor service

155
00:07:24.020 --> 00:07:26.000
through the resource annotation.

156
00:07:26.000 --> 00:07:28.000
We have the comparable resource set,

157
00:07:28.000 --> 00:07:31.010
these parameters, all of them look good.

158
00:07:31.010 --> 00:07:34.060
And then we have tied up the connection pooled data source,

159
00:07:34.060 --> 00:07:36.070
to the dao.

160
00:07:36.070 --> 00:07:39.070
And under the generated reports method of the rest class,

161
00:07:39.070 --> 00:07:41.070
we have gotten all the bank accounts.

162
00:07:41.070 --> 00:07:43.090
For every bank accounts in accounts, yes.

163
00:07:43.090 --> 00:07:46.000
We have submitted one task,

164
00:07:46.000 --> 00:07:49.050
and we have collected the output in the future object.

165
00:07:49.050 --> 00:07:51.050
And we just written a friendly string on the UI

166
00:07:51.050 --> 00:07:54.040
stating that report generation tasks were submitted.

167
00:07:54.040 --> 00:07:56.030
Okay, so this class looks good too.

168
00:07:56.030 --> 00:07:57.070
I basically wrote the check in order to

169
00:07:57.070 --> 00:08:00.020
make sure that everything we are trying to write is correct.

170
00:08:00.020 --> 00:08:02.000
And you generally should do this

171
00:08:02.000 --> 00:08:03.080
when it's a big use case that you are coding.

172
00:08:03.080 --> 00:08:07.030
Okay, the last check that we want to definitely do,

173
00:08:07.030 --> 00:08:12.000
is to see whether we have the D reports folder created.

174
00:08:12.000 --> 00:08:14.010
Make sure that the folder is already created

175
00:08:14.010 --> 00:08:16.060
on any drive that you have chosen in the code.

176
00:08:16.060 --> 00:08:18.030
Otherwise, it may throw you

177
00:08:18.030 --> 00:08:20.010
either the file not found exception,

178
00:08:20.010 --> 00:08:22.040
or it may throw you the path not specified.

179
00:08:22.040 --> 00:08:25.020
One of the other, either exception will be thrown,

180
00:08:25.020 --> 00:08:26.090
if the folder is not present.

181
00:08:26.090 --> 00:08:29.040
As for the file for the transaction report,

182
00:08:29.040 --> 00:08:30.090
don't worry about that.

183
00:08:30.090 --> 00:08:32.010
The file writer, the buffer writer

184
00:08:32.010 --> 00:08:33.090
automatically creates that file,

185
00:08:33.090 --> 00:08:35.090
but the folder will not be created,

186
00:08:35.090 --> 00:08:37.030
so that has to be ready waiting.

187
00:08:37.030 --> 00:08:39.070
Okay, so now in the next video,

188
00:08:39.070 --> 00:08:42.000
let's go and test this application out.

