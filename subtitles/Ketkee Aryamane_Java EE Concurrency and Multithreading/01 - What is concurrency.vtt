WEBVTT
1
00:00:00.050 --> 00:00:03.020
- [Narrator] This course talks about JAVA Enterprise

2
00:00:03.020 --> 00:00:05.060
Edition Concurrency utilities.

3
00:00:05.060 --> 00:00:08.040
For that, we will have to take a look at some

4
00:00:08.040 --> 00:00:11.060
of the Standard Edition Concurrency APIs.

5
00:00:11.060 --> 00:00:14.010
But, even before that, let us understand

6
00:00:14.010 --> 00:00:15.040
what is "concurrency".

7
00:00:15.040 --> 00:00:18.020
You must have heard of these terms interchangeably,

8
00:00:18.020 --> 00:00:22.040
concurrency, parallelism, and asynchronous tasks.

9
00:00:22.040 --> 00:00:24.070
Let's understand each one of them.

10
00:00:24.070 --> 00:00:26.040
When you talk about concurrency,

11
00:00:26.040 --> 00:00:28.030
it's a machine or a software application

12
00:00:28.030 --> 00:00:30.080
executing multiple tasks for you.

13
00:00:30.080 --> 00:00:32.080
These tasks could be functions,

14
00:00:32.080 --> 00:00:34.090
or they could be parts of a program,

15
00:00:34.090 --> 00:00:37.030
or a completely different program.

16
00:00:37.030 --> 00:00:40.030
And, in concurrency, all of these tasks will have

17
00:00:40.030 --> 00:00:42.060
overlapped time periods.

18
00:00:42.060 --> 00:00:45.050
On the other hand, when you talk about parallelism,

19
00:00:45.050 --> 00:00:49.040
it means that parts of a task, or several tasks

20
00:00:49.040 --> 00:00:53.010
are running together exactly at the same time.

21
00:00:53.010 --> 00:00:54.080
And, there's additionally another term,

22
00:00:54.080 --> 00:00:56.080
where we say application is capable

23
00:00:56.080 --> 00:00:59.030
of executing asynchronous tasks.

24
00:00:59.030 --> 00:01:01.050
Okay, so what is an asynchronous task?

25
00:01:01.050 --> 00:01:03.050
Let's take a look at it.

26
00:01:03.050 --> 00:01:05.090
Let's say, I have an application which is trying

27
00:01:05.090 --> 00:01:09.040
to communicate with the RESTful API, or a database.

28
00:01:09.040 --> 00:01:12.020
It churns out a lot of data, and then readies it

29
00:01:12.020 --> 00:01:15.030
to take it back to the client to display on the HTML

30
00:01:15.030 --> 00:01:17.090
inside the user's browser.

31
00:01:17.090 --> 00:01:21.000
Now, the HTML is the sole medium by which the user

32
00:01:21.000 --> 00:01:23.010
interacts with the system.

33
00:01:23.010 --> 00:01:26.070
So, whatever action is performed by the user on the HTML,

34
00:01:26.070 --> 00:01:30.050
let's say like button click, or maybe mouse hover,

35
00:01:30.050 --> 00:01:33.050
it sends a request to the application for processing

36
00:01:33.050 --> 00:01:36.010
and then comes back with a response which immediately

37
00:01:36.010 --> 00:01:39.020
gets updated on the HTML.

38
00:01:39.020 --> 00:01:42.030
Now, this processing was such that since the response

39
00:01:42.030 --> 00:01:44.080
got updated on the HTML immediately,

40
00:01:44.080 --> 00:01:47.080
the user kept waiting all that while.

41
00:01:47.080 --> 00:01:50.040
This kind of a call is a "real time call",

42
00:01:50.040 --> 00:01:53.040
or as we say, "synchronous call".

43
00:01:53.040 --> 00:01:56.050
However, there are certain jobs in your application

44
00:01:56.050 --> 00:01:59.070
which do not require user interference at all.

45
00:01:59.070 --> 00:02:03.010
These kinds of tasks also take a longer time to execute

46
00:02:03.010 --> 00:02:04.030
in your application.

47
00:02:04.030 --> 00:02:07.080
For example, if I want to send out an email

48
00:02:07.080 --> 00:02:10.020
to all the users of my application.

49
00:02:10.020 --> 00:02:12.060
Or, let's say, I want to do certain cleanup

50
00:02:12.060 --> 00:02:15.050
and maintenance activities for my application.

51
00:02:15.050 --> 00:02:18.030
Or, let's say, I want to log in a lot of data

52
00:02:18.030 --> 00:02:19.080
for my application.

53
00:02:19.080 --> 00:02:22.090
These tasks do not require user interference,

54
00:02:22.090 --> 00:02:26.010
which means that there is no point keeping the user

55
00:02:26.010 --> 00:02:29.050
waiting for these tasks to get completed.

56
00:02:29.050 --> 00:02:34.000
These kind of tasks are called "asynchronous tasks".

57
00:02:34.000 --> 00:02:37.010
Asynchronous calls in your application always take

58
00:02:37.010 --> 00:02:41.000
a callback reference, so that, when they get completed,

59
00:02:41.000 --> 00:02:44.040
the callback function executes and then the response

60
00:02:44.040 --> 00:02:46.080
gets updated to the HTML.

61
00:02:46.080 --> 00:02:49.000
Now, since the response gets updated at a later

62
00:02:49.000 --> 00:02:52.000
point in time, the user does not have to wait for it,

63
00:02:52.000 --> 00:02:56.000
and can keep doing other things on the application.

64
00:02:56.000 --> 00:02:58.070
Now, when you talk about asynchronous tasks,

65
00:02:58.070 --> 00:03:01.050
they do give you an impression of concurrency,

66
00:03:01.050 --> 00:03:04.040
because there are jobs running within your system

67
00:03:04.040 --> 00:03:07.060
whilst the user is trying to do something else

68
00:03:07.060 --> 00:03:09.090
through the user interface.

69
00:03:09.090 --> 00:03:13.020
When we talk about concurrency with the Java platform,

70
00:03:13.020 --> 00:03:16.000
there are two sets of APIs that we have with us.

71
00:03:16.000 --> 00:03:18.020
One is under the Java Standard Edition,

72
00:03:18.020 --> 00:03:22.000
and the other is a part of the Java Enterprise Edition.

73
00:03:22.000 --> 00:03:24.070
Concurrency programming, particularly when stated

74
00:03:24.070 --> 00:03:27.060
in Java, is via multithreading.

75
00:03:27.060 --> 00:03:31.000
And, we will talk about multithreading in a minute.

