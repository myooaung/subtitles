WEBVTT
1
00:00:00.050 --> 00:00:02.030
- [Instructor] Now let's take a look at the three

2
00:00:02.030 --> 00:00:07.050
remaining APIs, shutdown now, and await termination.

3
00:00:07.050 --> 00:00:08.080
Now let's first understand this.

4
00:00:08.080 --> 00:00:11.000
When you create the executor service, or check,

5
00:00:11.000 --> 00:00:12.050
in your application,

6
00:00:12.050 --> 00:00:15.000
it is not going to be destroyed automatically.

7
00:00:15.000 --> 00:00:17.020
You have to destroy it yourself.

8
00:00:17.020 --> 00:00:18.080
Now, if you do not destroy the object,

9
00:00:18.080 --> 00:00:21.050
it is good at times, because your application

10
00:00:21.050 --> 00:00:24.090
may have certain jobs coming on an irregular basis.

11
00:00:24.090 --> 00:00:27.020
So in that case you may want the service object

12
00:00:27.020 --> 00:00:29.080
to be alive so that tasks can be submitted.

13
00:00:29.080 --> 00:00:30.090
That's okay.

14
00:00:30.090 --> 00:00:33.090
However, if you know that all the tasks in your application

15
00:00:33.090 --> 00:00:36.080
are definitely reaching the completion point,

16
00:00:36.080 --> 00:00:39.050
then, it is wise, to of course,

17
00:00:39.050 --> 00:00:42.010
go ahead and destroy the service object.

18
00:00:42.010 --> 00:00:44.060
So, that you can reclaim the resources.

19
00:00:44.060 --> 00:00:47.000
So the shutdown mechanism for this service

20
00:00:47.000 --> 00:00:48.070
happens via these three APIs.

21
00:00:48.070 --> 00:00:51.070
That is shutdown, shutdown now, and await termination.

22
00:00:51.070 --> 00:00:54.040
No, let's say you talk about the shutdown method.

23
00:00:54.040 --> 00:00:57.010
When you invoke this method, what essentially happens is

24
00:00:57.010 --> 00:01:00.010
there is a shutdown request that is initiated,

25
00:01:00.010 --> 00:01:03.060
and because of this, no new tasks will be accepted

26
00:01:03.060 --> 00:01:05.010
by that service.

27
00:01:05.010 --> 00:01:08.020
Secondly, all the previously submitted tasks

28
00:01:08.020 --> 00:01:10.020
will be executed.

29
00:01:10.020 --> 00:01:13.090
However, unfortunately this method does not guarantee

30
00:01:13.090 --> 00:01:17.000
that all the previously submitted tasks will indeed

31
00:01:17.000 --> 00:01:18.080
reach their completion point.

32
00:01:18.080 --> 00:01:21.000
Now, that's a drawback here.

33
00:01:21.000 --> 00:01:25.000
The second API, which is shutdown now is a little rude.

34
00:01:25.000 --> 00:01:27.040
What it does is that when you invoke it,

35
00:01:27.040 --> 00:01:28.040
it will do two things.

36
00:01:28.040 --> 00:01:32.020
It will hold the execution of the waiting tasks.

37
00:01:32.020 --> 00:01:34.070
In fact it will hold the waiting tasks completely,

38
00:01:34.070 --> 00:01:36.090
and it will also stop the execution

39
00:01:36.090 --> 00:01:39.040
of the currently running tasks.

40
00:01:39.040 --> 00:01:40.060
So it's very rude.

41
00:01:40.060 --> 00:01:42.090
And the return value of this method

42
00:01:42.090 --> 00:01:45.050
is a list of the waiting tasks.

43
00:01:45.050 --> 00:01:46.050
So that you know the deplug

44
00:01:46.050 --> 00:01:49.000
and decide what's to be done with them.

45
00:01:49.000 --> 00:01:51.080
Now, await termination is a better choice.

46
00:01:51.080 --> 00:01:55.040
It's always used alone with shutdown and shutdown now.

47
00:01:55.040 --> 00:01:56.070
And what does it do?

48
00:01:56.070 --> 00:01:59.080
It is actually going to be responsible to block

49
00:01:59.080 --> 00:02:02.060
until all the previously submitted tasks

50
00:02:02.060 --> 00:02:04.090
have reached the completion point.

51
00:02:04.090 --> 00:02:07.050
And await termination is going to do this check for you

52
00:02:07.050 --> 00:02:11.040
only after you initiate the shutdown request, right?

53
00:02:11.040 --> 00:02:14.040
What it means is you have to call this method first,

54
00:02:14.040 --> 00:02:16.070
and as I said, this method does not guarantee

55
00:02:16.070 --> 00:02:18.010
that the tasks completed.

56
00:02:18.010 --> 00:02:22.020
So the completion check can be done with await termination.

57
00:02:22.020 --> 00:02:23.000
Okay?

58
00:02:23.000 --> 00:02:26.050
And this method actually demands a timeout period.

59
00:02:26.050 --> 00:02:29.020
Which, is going to signify how much time you're supposed

60
00:02:29.020 --> 00:02:31.060
to wait for all the previously submitted tasks

61
00:02:31.060 --> 00:02:33.040
to reach the completion, right?

62
00:02:33.040 --> 00:02:36.000
If the time elapses, then the service is going

63
00:02:36.000 --> 00:02:37.080
to shutdown anyway, right?

64
00:02:37.080 --> 00:02:39.080
So, what we'll do is, we'll take these three APIs

65
00:02:39.080 --> 00:02:41.080
and we'll use it in combination in our example

66
00:02:41.080 --> 00:02:42.070
to understand it better.

67
00:02:42.070 --> 00:02:45.020
Let's go to the code.

68
00:02:45.020 --> 00:02:47.090
So this was the last testing other APIs class

69
00:02:47.090 --> 00:02:49.020
that we were working on.

70
00:02:49.020 --> 00:02:50.030
So what I'm going to do here is,

71
00:02:50.030 --> 00:02:52.090
I'm just going to save, take the service object,

72
00:02:52.090 --> 00:02:55.050
and call the shutdown method first.

73
00:02:55.050 --> 00:02:57.030
So by this you're actually initiating

74
00:02:57.030 --> 00:02:58.090
the request for shutdown.

75
00:02:58.090 --> 00:03:01.040
However, since this does not guarantee the completion

76
00:03:01.040 --> 00:03:03.050
of the executions of the submitted task,

77
00:03:03.050 --> 00:03:06.060
I am also going to do await termination.

78
00:03:06.060 --> 00:03:09.000
So you see that it actually tries to give you

79
00:03:09.000 --> 00:03:10.090
a way of setting the timeout.

80
00:03:10.090 --> 00:03:13.020
So, let's say, the timeout is 30,

81
00:03:13.020 --> 00:03:16.060
and the time unit parameter is seconds.

82
00:03:16.060 --> 00:03:17.040
Okay?

83
00:03:17.040 --> 00:03:18.090
I'm going to relate this entire statement

84
00:03:18.090 --> 00:03:22.070
and put it in the form of sysout.

85
00:03:22.070 --> 00:03:24.040
So that you know I'm able to see the output

86
00:03:24.040 --> 00:03:25.080
of this method on the console.

87
00:03:25.080 --> 00:03:29.040
Now, this await termination actually returns bullion value.

88
00:03:29.040 --> 00:03:32.080
So, if that service was shutdown successfully,

89
00:03:32.080 --> 00:03:34.040
then it will return true.

90
00:03:34.040 --> 00:03:38.000
If however, this timeout elapses,

91
00:03:38.000 --> 00:03:40.070
then it is going to return me a false, okay?

92
00:03:40.070 --> 00:03:42.070
And of course, if the operation is interrupted,

93
00:03:42.070 --> 00:03:44.050
it will throw and interrupt exception.

94
00:03:44.050 --> 00:03:46.090
So let's surround that with a try catch.

95
00:03:46.090 --> 00:03:48.060
There we go.

96
00:03:48.060 --> 00:03:51.000
And interrupted exception will look of

97
00:03:51.000 --> 00:03:52.040
there's an interruption, so when I come

98
00:03:52.040 --> 00:03:54.090
inside the catch block, I will see

99
00:03:54.090 --> 00:03:59.040
service.shutdownnow.

100
00:03:59.040 --> 00:04:01.030
Because the service is to anyway shutdown

101
00:04:01.030 --> 00:04:03.040
if there's an interruption, okay?

102
00:04:03.040 --> 00:04:05.030
So it will return a true if the service

103
00:04:05.030 --> 00:04:07.030
got terminated correctly.

104
00:04:07.030 --> 00:04:10.010
It will return a false if the time elapses.

105
00:04:10.010 --> 00:04:12.040
And if there is an interruption in the execution,

106
00:04:12.040 --> 00:04:14.070
then you may even have to quickly call shutdown now.

107
00:04:14.070 --> 00:04:17.080
So that's how you employ all the three methods together

108
00:04:17.080 --> 00:04:20.050
in order to shutdown the executor service.

109
00:04:20.050 --> 00:04:22.080
Let's quickly run this.

110
00:04:22.080 --> 00:04:25.010
Let's also do one thing on line number 62.

111
00:04:25.010 --> 00:04:31.000
Let's put a small label there.

112
00:04:31.000 --> 00:04:32.060
Let's ask a question.

113
00:04:32.060 --> 00:04:35.080
Is the service shutdown?

114
00:04:35.080 --> 00:04:38.050
And yeah, there we go.

115
00:04:38.050 --> 00:04:40.060
And let's see what the answer is.

116
00:04:40.060 --> 00:04:45.090
So, I'm going to go ahead and run this.

117
00:04:45.090 --> 00:04:46.080
Yeah.

118
00:04:46.080 --> 00:04:47.060
The service was indeed shut down,

119
00:04:47.060 --> 00:04:49.030
because the 30 seconds timeout period

120
00:04:49.030 --> 00:04:51.030
that I had specified as an argument

121
00:04:51.030 --> 00:04:53.010
was enough to make sure that all

122
00:04:53.010 --> 00:04:54.060
the previously submitted tasks

123
00:04:54.060 --> 00:04:56.040
reached their completion point.

124
00:04:56.040 --> 00:04:57.030
Okay?

125
00:04:57.030 --> 00:04:59.060
Just make sure that the timeout that is specified

126
00:04:59.060 --> 00:05:01.060
should be relatively large enough,

127
00:05:01.060 --> 00:05:03.030
so that you can give a proper time

128
00:05:03.030 --> 00:05:07.030
for all the previously submitted tasks to execute.

129
00:05:07.030 --> 00:05:08.040
Okay, so those are the APIs.

130
00:05:08.040 --> 00:05:10.030
So you've seen the executor service as a whole,

131
00:05:10.030 --> 00:05:12.000
you've seen a lot of the API calls

132
00:05:12.000 --> 00:05:13.020
in the executor service object,

133
00:05:13.020 --> 00:05:14.050
so we are good to go with it.

134
00:05:14.050 --> 00:05:15.030
In the next video,

135
00:05:15.030 --> 00:05:18.000
we'll see the scheduled executor service API.

