WEBVTT
1
00:00:00.050 --> 00:00:01.030
- [Narrator] Let's take a look

2
00:00:01.030 --> 00:00:03.060
at the Managed Thread Factory demo now.

3
00:00:03.060 --> 00:00:06.060
The list of steps is on the slide in front of us.

4
00:00:06.060 --> 00:00:09.050
The first step is to add a REST class in the project,

5
00:00:09.050 --> 00:00:15.000
so let's head back to the IDE and add a REST class.

6
00:00:15.000 --> 00:00:22.030
Let's say this is going to be logging resource.

7
00:00:22.030 --> 00:00:25.000
Let's set the path annotation to it

8
00:00:25.000 --> 00:00:26.090
on line number 12.

9
00:00:26.090 --> 00:00:37.000
Want to say add at path and say log data.

10
00:00:37.000 --> 00:00:40.060
Let's also inject the Managed Thread Factory

11
00:00:40.060 --> 00:00:43.040
by at resource annotation inside the REST class.

12
00:00:43.040 --> 00:00:46.070
So let's go to the concurrent resources tab

13
00:00:46.070 --> 00:00:48.080
on the GlassFish admin console.

14
00:00:48.080 --> 00:00:50.090
And you can go to manage thread factories

15
00:00:50.090 --> 00:00:53.050
and pick up that JNDI name.

16
00:00:53.050 --> 00:00:55.020
So I'm copying that.

17
00:00:55.020 --> 00:00:57.050
Let's come back to the class

18
00:00:57.050 --> 00:01:00.010
and there on line number 18 I'm going

19
00:01:00.010 --> 00:01:03.060
to first get the resource annotation.

20
00:01:03.060 --> 00:01:06.030
And then get a reference.

21
00:01:06.030 --> 00:01:08.040
Sorry, before that I think we need to do the look up.

22
00:01:08.040 --> 00:01:10.030
So let's delete this line.

23
00:01:10.030 --> 00:01:12.000
We don't need this right now.

24
00:01:12.000 --> 00:01:14.070
Let's first do the lookup.

25
00:01:14.070 --> 00:01:18.000
And let's give that name.

26
00:01:18.000 --> 00:01:20.020
Once we do this there on the next slide

27
00:01:20.020 --> 00:01:27.080
we will have a reference to the managed thread factory api.

28
00:01:27.080 --> 00:01:30.000
Okay, the next step will be,

29
00:01:30.000 --> 00:01:31.050
we want to create a logging task

30
00:01:31.050 --> 00:01:32.070
as a runnable implementation.

31
00:01:32.070 --> 00:01:35.030
So we want to implement a very simple task for this.

32
00:01:35.030 --> 00:01:38.020
It's going to be a logging task where we just log some data.

33
00:01:38.020 --> 00:01:41.040
The way we did it in one of the standard edition videos.

34
00:01:41.040 --> 00:01:45.020
So let's got to the IDE and under runnables folder

35
00:01:45.020 --> 00:01:51.050
I'm going to create a class which says logging processor.

36
00:01:51.050 --> 00:01:56.080
Let this implement a runnable.

37
00:01:56.080 --> 00:01:58.020
And of course when it implements runnable

38
00:01:58.020 --> 00:02:00.060
you will have to implement a run method.

39
00:02:00.060 --> 00:02:04.030
Let's get rid of this default implementation.

40
00:02:04.030 --> 00:02:07.010
Okay, and what do we want to do here?

41
00:02:07.010 --> 00:02:09.070
Very simple, we just going to take the logger class,

42
00:02:09.070 --> 00:02:14.060
java util dot logging,

43
00:02:14.060 --> 00:02:17.060
and say get logger, so get the logger.

44
00:02:17.060 --> 00:02:19.070
The name for this logger will be the class name.

45
00:02:19.070 --> 00:02:23.050
So I'm copying that from line 14 to line 19

46
00:02:23.050 --> 00:02:28.020
and say dot class dot get name.

47
00:02:28.020 --> 00:02:29.040
Okay and what does this want to do?

48
00:02:29.040 --> 00:02:31.040
This is gonna log something for us.

49
00:02:31.040 --> 00:02:33.030
So we want to log something on a

50
00:02:33.030 --> 00:02:34.070
particular level, logging level

51
00:02:34.070 --> 00:02:36.000
and we'll do that for the info level.

52
00:02:36.000 --> 00:02:38.070
We don't want any c-var logging right now.

53
00:02:38.070 --> 00:02:46.020
Info and the message is logging data for logging resource.

54
00:02:46.020 --> 00:02:49.020
Because that's the REST resource we created.

55
00:02:49.020 --> 00:02:51.040
Okay, and so to do one more thing on line 19

56
00:02:51.040 --> 00:02:53.060
I'm going to but a sys out, simple sys out.

57
00:02:53.060 --> 00:02:55.070
We could also put the logger statement of problem.

58
00:02:55.070 --> 00:02:58.020
What we do here is we just get the thread name.

59
00:02:58.020 --> 00:03:01.070
So I'm gonna say thread

60
00:03:01.070 --> 00:03:05.090
and just upend the static call of current thread.

61
00:03:05.090 --> 00:03:08.000
And chain the get name api on it

62
00:03:08.000 --> 00:03:10.030
to get the name of the thread.

63
00:03:10.030 --> 00:03:13.080
Okay, next, we'll have to add the REST method.

64
00:03:13.080 --> 00:03:16.030
We want to use the manage thread factory now

65
00:03:16.030 --> 00:03:17.070
to create the new thread.

66
00:03:17.070 --> 00:03:19.070
And then we'll test this entire task.

67
00:03:19.070 --> 00:03:22.010
So let's go back to our logging resource.

68
00:03:22.010 --> 00:03:24.060
Let's write a method here, which is annotated

69
00:03:24.060 --> 00:03:29.020
with the get type of the REST service.

70
00:03:29.020 --> 00:03:30.030
So what are we going to say?

71
00:03:30.030 --> 00:03:32.000
We're going to say public.

72
00:03:32.000 --> 00:03:34.090
Let's write down a simple string.

73
00:03:34.090 --> 00:03:41.020
And let's also say log data.

74
00:03:41.020 --> 00:03:42.010
And what do we want to do?

75
00:03:42.010 --> 00:03:43.080
We want to take this thread factory now.

76
00:03:43.080 --> 00:03:46.030
And we want to clear the thread with that factory.

77
00:03:46.030 --> 00:03:52.050
So you can take an instance of the thread class.

78
00:03:52.050 --> 00:03:55.020
And take the thread factory.

79
00:03:55.020 --> 00:03:58.050
And then say new thread, right?

80
00:03:58.050 --> 00:04:00.010
And this new thread API is going to

81
00:04:00.010 --> 00:04:02.030
demand an instance of your runnable.

82
00:04:02.030 --> 00:04:06.000
So we'll have to instantiate the logging processor task.

83
00:04:06.000 --> 00:04:09.010
There we go.

84
00:04:09.010 --> 00:04:11.000
Now once this is done, then you can

85
00:04:11.000 --> 00:04:13.010
just go ahead and sit thread dot,

86
00:04:13.010 --> 00:04:14.070
maybe if you wanna give your own name,

87
00:04:14.070 --> 00:04:17.090
so let's say set name.

88
00:04:17.090 --> 00:04:21.010
Let's say logging thread.

89
00:04:21.010 --> 00:04:22.070
That's the name to this thread.

90
00:04:22.070 --> 00:04:27.000
And once you do that you just have to say thread dot start.

91
00:04:27.000 --> 00:04:30.000
And this REST API is trying to write on a string value,

92
00:04:30.000 --> 00:04:33.060
so I'm just going to say return

93
00:04:33.060 --> 00:04:39.070
logging thread doing its' job, check console.

94
00:04:39.070 --> 00:04:42.040
Okay, cool, so we'll check the console.

95
00:04:42.040 --> 00:04:47.080
Once this entire REST full API is called out.

96
00:04:47.080 --> 00:04:50.020
Okay, then of course we have to test

97
00:04:50.020 --> 00:04:51.070
this entire thing with the Postman tool,

98
00:04:51.070 --> 00:04:55.090
so let's make sure the changes got deployed.

99
00:04:55.090 --> 00:04:58.010
Yes, they did.

100
00:04:58.010 --> 00:04:59.070
And what we'll do is for consistency

101
00:04:59.070 --> 00:05:01.020
we'll not give the name of the method

102
00:05:01.020 --> 00:05:02.010
and the path the same.

103
00:05:02.010 --> 00:05:04.050
So I'm just going to change the path on line number 18.

104
00:05:04.050 --> 00:05:07.040
Let's say logging, that's all.

105
00:05:07.040 --> 00:05:09.070
So we are now just going to build this

106
00:05:09.070 --> 00:05:12.040
project again and quickly run.

107
00:05:12.040 --> 00:05:15.080
So let's clean and build.

108
00:05:15.080 --> 00:05:19.090
Okay, and let's run.

109
00:05:19.090 --> 00:05:23.000
So that's the basic URL, let's copy that.

110
00:05:23.000 --> 00:05:24.080
Let's go to the Postman tool.

111
00:05:24.080 --> 00:05:27.060
We already have it on our console so just click send.

112
00:05:27.060 --> 00:05:30.030
And that's the return value that REST

113
00:05:30.030 --> 00:05:31.090
full API provided us.

114
00:05:31.090 --> 00:05:34.060
So let's go to the console and check what happened.

115
00:05:34.060 --> 00:05:36.000
Yes, so that's your thread.

116
00:05:36.000 --> 00:05:37.040
Logging thread, right?

117
00:05:37.040 --> 00:05:40.070
And the task output is also printed on the console.

118
00:05:40.070 --> 00:05:43.000
So that's how simply you can just create

119
00:05:43.000 --> 00:05:45.090
a new thread with the managed thread factory.

120
00:05:45.090 --> 00:05:48.020
And when you clear the thread out of this factory

121
00:05:48.020 --> 00:05:50.090
it means now that the thread is going to run

122
00:05:50.090 --> 00:05:54.000
with all the container context information.

123
00:05:54.000 --> 00:05:55.090
In the next video we'll quickly also

124
00:05:55.090 --> 00:05:58.060
see how do you use the thread pull executor

125
00:05:58.060 --> 00:06:01.020
and combine it with the managed thread factory

126
00:06:01.020 --> 00:06:04.080
to return you a Java standard edition executor service.

127
00:06:04.080 --> 00:06:07.000
Let's see how to do that in the next video.

