WEBVTT
1
00:00:00.050 --> 00:00:02.020
- [Narrator] Here we have the list of the steps

2
00:00:02.020 --> 00:00:04.010
that we want to execute as a part of the demo.

3
00:00:04.010 --> 00:00:06.080
We'll follow each of the steps one by one

4
00:00:06.080 --> 00:00:09.050
and simultaneously of course we've called for it.

5
00:00:09.050 --> 00:00:11.040
So the first step is you have to define

6
00:00:11.040 --> 00:00:15.040
a user bean to store all user information.

7
00:00:15.040 --> 00:00:17.060
So let's go on to the beans folder.

8
00:00:17.060 --> 00:00:21.020
And create a Java class, let's call it user.

9
00:00:21.020 --> 00:00:23.050
And let's give it attributes.

10
00:00:23.050 --> 00:00:24.090
We've already seen the files.

11
00:00:24.090 --> 00:00:28.010
So we know that there's an ID, email and a name.

12
00:00:28.010 --> 00:00:35.070
So int id string name

13
00:00:35.070 --> 00:00:38.090
string email address

14
00:00:38.090 --> 00:00:41.020
and we'll immediately insert the code

15
00:00:41.020 --> 00:00:43.040
for get her sitters, because we have

16
00:00:43.040 --> 00:00:44.050
to stick to the encapsulation concept

17
00:00:44.050 --> 00:00:47.000
of object oriented programming.

18
00:00:47.000 --> 00:00:48.090
So that's the first step.

19
00:00:48.090 --> 00:00:51.060
Next is you have to define a class user dao

20
00:00:51.060 --> 00:00:53.050
for all the database operations

21
00:00:53.050 --> 00:00:55.070
and define a method in it to insert

22
00:00:55.070 --> 00:00:57.050
user records in database.

23
00:00:57.050 --> 00:00:59.070
So we said that we'll have a different class

24
00:00:59.070 --> 00:01:00.090
for database interactions.

25
00:01:00.090 --> 00:01:02.070
So let's go to the dao package

26
00:01:02.070 --> 00:01:07.040
and create a class called user dao.

27
00:01:07.040 --> 00:01:10.050
And this is going to have a method

28
00:01:10.050 --> 00:01:13.080
public, let's say tra-donce mean integer

29
00:01:13.080 --> 00:01:17.010
and the method is save user.

30
00:01:17.010 --> 00:01:20.010
The parameter will be the user reference.

31
00:01:20.010 --> 00:01:24.070
The bean that we created just now.

32
00:01:24.070 --> 00:01:27.050
Let's import that.

33
00:01:27.050 --> 00:01:29.050
And create a reference for it.

34
00:01:29.050 --> 00:01:31.080
Okay, so there's going to be some implementation here

35
00:01:31.080 --> 00:01:33.080
where we're going to write JDBC code,

36
00:01:33.080 --> 00:01:36.040
get the connection object, make a prepared statement,

37
00:01:36.040 --> 00:01:39.040
and then insert the record using the insert query.

38
00:01:39.040 --> 00:01:42.070
But for that we'll require the connection object.

39
00:01:42.070 --> 00:01:47.040
So under the dao folder let's create one more class,

40
00:01:47.040 --> 00:01:51.080
which is db connection.

41
00:01:51.080 --> 00:01:54.080
And inside this we will write a method.

42
00:01:54.080 --> 00:01:56.090
Let's make it a static method.

43
00:01:56.090 --> 00:01:59.070
It will return you a connection object.

44
00:01:59.070 --> 00:02:02.070
The importers Java dot SQL.

45
00:02:02.070 --> 00:02:03.070
And what does it do?

46
00:02:03.070 --> 00:02:08.020
It gets a connection.

47
00:02:08.020 --> 00:02:11.070
Let's take the reference variable connection

48
00:02:11.070 --> 00:02:15.060
and set it to null initially.

49
00:02:15.060 --> 00:02:17.050
And then we load the driver class,

50
00:02:17.050 --> 00:02:18.090
now this is simple JDBC code.

51
00:02:18.090 --> 00:02:21.000
If you think you have problem understanding this

52
00:02:21.000 --> 00:02:22.020
I'll request you to take a course

53
00:02:22.020 --> 00:02:24.020
on JDBC on LinkedIn Learning.

54
00:02:24.020 --> 00:02:26.000
So what we're going to do is we're

55
00:02:26.000 --> 00:02:29.050
going to load the driver class.

56
00:02:29.050 --> 00:02:33.060
The driver class can be loaded using class dot for name.

57
00:02:33.060 --> 00:02:41.060
The driver class is com dot mysql dot jdbc dot driver.

58
00:02:41.060 --> 00:02:43.030
And after that we are going to take

59
00:02:43.030 --> 00:02:45.000
that connection variable and we're

60
00:02:45.000 --> 00:02:49.090
going to opt in the connection by the driver manager api.

61
00:02:49.090 --> 00:02:52.030
On that there's a method called get connection

62
00:02:52.030 --> 00:02:54.060
and it takes in three arguments.

63
00:02:54.060 --> 00:02:56.040
One is the JDBC URL.

64
00:02:56.040 --> 00:02:58.010
And then the credentials of the database

65
00:02:58.010 --> 00:02:59.080
that you're trying to access.

66
00:02:59.080 --> 00:03:05.070
So that will be JDBC colon

67
00:03:05.070 --> 00:03:11.030
my sql colon local host.

68
00:03:11.030 --> 00:03:13.000
The database server is running on three three zero six.

69
00:03:13.000 --> 00:03:14.020
And the database schema that we're

70
00:03:14.020 --> 00:03:17.040
going to connect to is test.

71
00:03:17.040 --> 00:03:20.020
And let's feed in the credentials also.

72
00:03:20.020 --> 00:03:22.000
So they're going to be root root.

73
00:03:22.000 --> 00:03:23.090
Of course you can externalize these properties

74
00:03:23.090 --> 00:03:25.090
and do a lot better with this quote

75
00:03:25.090 --> 00:03:28.030
but just trying to keep it simple.

76
00:03:28.030 --> 00:03:29.090
Okay, so once we have got the connection

77
00:03:29.090 --> 00:03:31.060
the last step is we have to return

78
00:03:31.060 --> 00:03:34.050
that connection object out of this method.

79
00:03:34.050 --> 00:03:37.000
Of course now it's going to throw a few exceptions

80
00:03:37.000 --> 00:03:41.030
so let's quickly add the tri catch block.

81
00:03:41.030 --> 00:03:43.040
And add a catch clause for this.

82
00:03:43.040 --> 00:03:45.020
So if the class is not found, then it's

83
00:03:45.020 --> 00:03:46.070
clause not found exception.

84
00:03:46.070 --> 00:03:48.020
And anything going wrong with the connection,

85
00:03:48.020 --> 00:03:49.080
it will be an SQL exception.

86
00:03:49.080 --> 00:03:51.070
Let's take this connection variable

87
00:03:51.070 --> 00:03:54.080
on line number 22 outside of this tri blocks,

88
00:03:54.080 --> 00:03:58.000
so that can be accessed throughout the method.

89
00:03:58.000 --> 00:04:00.040
And at the end of the method,

90
00:04:00.040 --> 00:04:06.010
let's return this connection object.

91
00:04:06.010 --> 00:04:08.090
So our connection class is ready,

92
00:04:08.090 --> 00:04:10.050
where we are trying to load the driver class

93
00:04:10.050 --> 00:04:12.000
and get the connection object.

94
00:04:12.000 --> 00:04:13.050
Now once this is done, let's go back

95
00:04:13.050 --> 00:04:15.000
to the user dao class.

96
00:04:15.000 --> 00:04:17.070
And that's where we were, save user.

97
00:04:17.070 --> 00:04:20.030
So now, on line number 16 let's get

98
00:04:20.030 --> 00:04:24.060
the connection from the db connection class.

99
00:04:24.060 --> 00:04:26.070
I'm gonna say db connection.

100
00:04:26.070 --> 00:04:30.080
And just invoke that method.

101
00:04:30.080 --> 00:04:33.040
Next is we need to get the prepared statement

102
00:04:33.040 --> 00:04:37.020
java dot SQL import again.

103
00:04:37.020 --> 00:04:39.060
And we will get that on the connection object

104
00:04:39.060 --> 00:04:43.070
by means of the prepared statement api.

105
00:04:43.070 --> 00:04:45.090
To this we have to pass the query.

106
00:04:45.090 --> 00:04:49.020
So that will be insert into user,

107
00:04:49.020 --> 00:04:51.050
that's the name of the table in our database.

108
00:04:51.050 --> 00:04:55.070
Values and it's a prepared statement

109
00:04:55.070 --> 00:04:58.010
so I'm gonna pass the parameters dynamically.

110
00:04:58.010 --> 00:05:02.040
So id name and email, three parameters going in.

111
00:05:02.040 --> 00:05:03.080
And we have to set those parameters.

112
00:05:03.080 --> 00:05:06.030
So we will do that with the statement object.

113
00:05:06.030 --> 00:05:09.070
So set int, which will be for id,

114
00:05:09.070 --> 00:05:12.000
parameter and I just start from one.

115
00:05:12.000 --> 00:05:13.050
And we will retrieve the values

116
00:05:13.050 --> 00:05:17.030
from this user bean, which is coming as a parameter.

117
00:05:17.030 --> 00:05:20.000
So we're gonna say user dot get id.

118
00:05:20.000 --> 00:05:21.050
That's for integer.

119
00:05:21.050 --> 00:05:25.020
Then the next one is dot set string which is name

120
00:05:25.020 --> 00:05:30.010
parameter index number two.

121
00:05:30.010 --> 00:05:33.080
That also we will get from the user bean.

122
00:05:33.080 --> 00:05:35.010
That's the one.

123
00:05:35.010 --> 00:05:39.080
And then we also have statement dot set string

124
00:05:39.080 --> 00:05:43.050
parameter index number three, which will be email address.

125
00:05:43.050 --> 00:05:47.040
Which we get from the bean again.

126
00:05:47.040 --> 00:05:50.010
Once this is done, let's go at the top of the method.

127
00:05:50.010 --> 00:05:52.050
And on line of 18 I'm going to declare

128
00:05:52.050 --> 00:05:55.040
an integer variable, set it to zero initially.

129
00:05:55.040 --> 00:05:57.060
And then let's come down on line number 24

130
00:05:57.060 --> 00:06:01.080
I'm gonna say row is equal to statement

131
00:06:01.080 --> 00:06:05.020
dot execute update.

132
00:06:05.020 --> 00:06:08.040
So if there was a row inserted, definitely,

133
00:06:08.040 --> 00:06:10.040
then this row's is gonna turn out to be one.

134
00:06:10.040 --> 00:06:12.070
That's what it is gonna do.

135
00:06:12.070 --> 00:06:14.090
Again, check the exceptions, so quickly around

136
00:06:14.090 --> 00:06:17.020
the block with tri catch.

137
00:06:17.020 --> 00:06:19.020
Make sure that the variables that you

138
00:06:19.020 --> 00:06:21.030
need to use throughout the method

139
00:06:21.030 --> 00:06:23.080
are going to be outside the tri block.

140
00:06:23.080 --> 00:06:25.090
So let's cut this out from line 22

141
00:06:25.090 --> 00:06:28.000
and paste it on line 21.

142
00:06:28.000 --> 00:06:29.060
Once all of this is done, then we just

143
00:06:29.060 --> 00:06:34.080
need to return the row's variable out of this method.

144
00:06:34.080 --> 00:06:36.030
So we have written an insert query

145
00:06:36.030 --> 00:06:37.090
with the help of a prepared statement.

146
00:06:37.090 --> 00:06:39.070
We have parsed in the parameters dynamically,

147
00:06:39.070 --> 00:06:42.040
trying to retrieve values from the user bean.

148
00:06:42.040 --> 00:06:45.060
And we're just gonna execute the query against the database.

149
00:06:45.060 --> 00:06:47.020
That's all that you have to do.

150
00:06:47.020 --> 00:06:50.000
Let's look at the next step in the next video.

