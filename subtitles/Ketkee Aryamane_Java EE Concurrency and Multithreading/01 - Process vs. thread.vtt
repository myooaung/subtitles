WEBVTT
1
00:00:00.050 --> 00:00:02.080
- [Instructor] Now, before we even get into

2
00:00:02.080 --> 00:00:04.020
the Standard Edition APIs

3
00:00:04.020 --> 00:00:05.070
and then start looking at the demos

4
00:00:05.070 --> 00:00:08.020
and we move onto Enterprise Edition concurrency,

5
00:00:08.020 --> 00:00:11.000
let's understand a few fundamental concepts.

6
00:00:11.000 --> 00:00:13.010
We have known them for a while,

7
00:00:13.010 --> 00:00:16.010
but let's revise them as a part of this course.

8
00:00:16.010 --> 00:00:19.010
What is a process and what is a thread?

9
00:00:19.010 --> 00:00:21.020
A process is a running instance

10
00:00:21.020 --> 00:00:23.050
of an application or a program.

11
00:00:23.050 --> 00:00:26.090
For example, on my machine, I may have Microsoft Word,

12
00:00:26.090 --> 00:00:29.030
Microsoft Excel, NetBeans IDE,

13
00:00:29.030 --> 00:00:32.010
and then MySQL server, Google Chrome browser

14
00:00:32.010 --> 00:00:34.000
and so many programs installed,

15
00:00:34.000 --> 00:00:36.040
but when I launch each one of them for my use,

16
00:00:36.040 --> 00:00:39.010
then I'm trying to run an instance of that program,

17
00:00:39.010 --> 00:00:42.000
and that is a process.

18
00:00:42.000 --> 00:00:46.000
A process is always going to be in its self-contained

19
00:00:46.000 --> 00:00:50.010
execution environment and it will require its own resources

20
00:00:50.010 --> 00:00:52.090
and memory space to operate effectively

21
00:00:52.090 --> 00:00:56.040
to provide multitasking on your machine.

22
00:00:56.040 --> 00:00:59.060
Every process generally starts off with a single thread

23
00:00:59.060 --> 00:01:02.030
and then many threads can be created from it.

24
00:01:02.030 --> 00:01:05.060
Every process will have a unique process ID,

25
00:01:05.060 --> 00:01:08.040
it'll have its virtual address space,

26
00:01:08.040 --> 00:01:12.000
a set of environment variables, security context,

27
00:01:12.000 --> 00:01:14.070
its executable code, et cetera.

28
00:01:14.070 --> 00:01:16.080
Whenever you want to add a new process,

29
00:01:16.080 --> 00:01:18.080
it is going to be a costly business.

30
00:01:18.080 --> 00:01:21.020
That's because you want to create an altogether new

31
00:01:21.020 --> 00:01:23.000
self-contained execution environment,

32
00:01:23.000 --> 00:01:25.070
so that becomes really difficult.

33
00:01:25.070 --> 00:01:29.050
Moreover, if you want to switch between processes,

34
00:01:29.050 --> 00:01:31.060
then there has to be an interference

35
00:01:31.060 --> 00:01:34.040
of the underlying operating system,

36
00:01:34.040 --> 00:01:37.090
interprocess communication, IPC.

37
00:01:37.090 --> 00:01:40.010
There are system calls that are required

38
00:01:40.010 --> 00:01:42.000
from the underlying operating system,

39
00:01:42.000 --> 00:01:45.080
which is going to incur excessive processing overhead.

40
00:01:45.080 --> 00:01:50.060
Now, as opposed to this, a thread is a lightweight process.

41
00:01:50.060 --> 00:01:53.060
It is an entity within a process trying

42
00:01:53.060 --> 00:01:55.070
to exhibit multitasking for you.

43
00:01:55.070 --> 00:01:58.050
For example, on my Microsoft Word process

44
00:01:58.050 --> 00:02:00.000
that I'm running on my machine,

45
00:02:00.000 --> 00:02:02.050
I can do many things simultaneously.

46
00:02:02.050 --> 00:02:04.090
I can see the displayed text in front of me,

47
00:02:04.090 --> 00:02:07.070
I can type in more text, and I can also

48
00:02:07.070 --> 00:02:10.050
perform a spell check at the same time.

49
00:02:10.050 --> 00:02:13.020
So, each of these jobs is being done by a thread

50
00:02:13.020 --> 00:02:14.090
and all the threads work together

51
00:02:14.090 --> 00:02:18.050
to provide you multitasking in that process.

52
00:02:18.050 --> 00:02:21.010
So, when you talk about a thread, it is actually a part

53
00:02:21.010 --> 00:02:24.020
of the process's execution environment,

54
00:02:24.020 --> 00:02:27.080
which means it will share the virtual address space

55
00:02:27.080 --> 00:02:31.010
and the system resources with the other threads in

56
00:02:31.010 --> 00:02:32.060
that process.

57
00:02:32.060 --> 00:02:35.060
This is exactly why when you create a new thread,

58
00:02:35.060 --> 00:02:38.000
it will require fewer resources.

59
00:02:38.000 --> 00:02:42.000
Also, switching from one thread to another is really not

60
00:02:42.000 --> 00:02:45.080
that big a deal, as is the case with processes.

61
00:02:45.080 --> 00:02:49.060
Now, this capability of providing multitasking

62
00:02:49.060 --> 00:02:52.090
via threads in an application is exactly

63
00:02:52.090 --> 00:02:56.040
what the multithreading API of Java is.

64
00:02:56.040 --> 00:02:58.000
So, when we say that Java offers you

65
00:02:58.000 --> 00:03:00.040
concurrency programming, yes, it does,

66
00:03:00.040 --> 00:03:03.030
through the multithreading capability.

67
00:03:03.030 --> 00:03:06.070
Every thread, like a process, will have its own thread ID,

68
00:03:06.070 --> 00:03:09.090
it'll have its own set of exception handlers,

69
00:03:09.090 --> 00:03:11.040
priority scheduling.

70
00:03:11.040 --> 00:03:14.050
It will use registers, it will use stacks

71
00:03:14.050 --> 00:03:17.050
to store local procedure calls or local variables,

72
00:03:17.050 --> 00:03:20.070
and a set of structures that the system uses

73
00:03:20.070 --> 00:03:23.050
in order to save the state or the context

74
00:03:23.050 --> 00:03:27.030
of the thread until it is picked up for execution.

75
00:03:27.030 --> 00:03:28.080
Right, so that's what it is.

76
00:03:28.080 --> 00:03:31.020
Let's talk about a few other concepts.

77
00:03:31.020 --> 00:03:33.070
Scheduling and thread priorities.

78
00:03:33.070 --> 00:03:36.000
Okay, so what is scheduling?

79
00:03:36.000 --> 00:03:38.030
Generally, when you have a single CPU,

80
00:03:38.030 --> 00:03:40.040
all the threads will have to share it,

81
00:03:40.040 --> 00:03:42.040
so what is the order of threads

82
00:03:42.040 --> 00:03:45.070
that is executing in the application on that single CPU?

83
00:03:45.070 --> 00:03:47.090
That's exactly scheduling.

84
00:03:47.090 --> 00:03:49.080
Now, when it comes to Java platform,

85
00:03:49.080 --> 00:03:52.080
Java virtual machine will never force any kind

86
00:03:52.080 --> 00:03:55.040
of algorithm for scheduling of threads.

87
00:03:55.040 --> 00:03:59.000
It generally relies on the underlying operating system

88
00:03:59.000 --> 00:04:02.020
to schedule its threads for execution.

89
00:04:02.020 --> 00:04:05.060
Of course, generally JVM uses a deterministic fixed

90
00:04:05.060 --> 00:04:07.020
priority scheduling.

91
00:04:07.020 --> 00:04:08.030
What does that mean?

92
00:04:08.030 --> 00:04:11.030
It means that, let's say I have three threads in my system,

93
00:04:11.030 --> 00:04:14.040
one, two, three, and I have thread number two,

94
00:04:14.040 --> 00:04:16.020
which is called the highest priority,

95
00:04:16.020 --> 00:04:18.040
then JVM is going to pick up thread number two

96
00:04:18.040 --> 00:04:20.040
for execution first and then the rest

97
00:04:20.040 --> 00:04:22.040
of the threads will follow.

98
00:04:22.040 --> 00:04:24.070
However, let's say I have two threads

99
00:04:24.070 --> 00:04:26.040
with the same priority.

100
00:04:26.040 --> 00:04:29.010
Then JVM is going to arbitrarily pick up one of them

101
00:04:29.010 --> 00:04:31.000
for execution.

102
00:04:31.000 --> 00:04:33.010
Having said this, let's also understand

103
00:04:33.010 --> 00:04:35.070
that JVM scheduling is preemptive.

104
00:04:35.070 --> 00:04:39.070
Let's say I have those three threads that were executing

105
00:04:39.070 --> 00:04:42.030
and suddenly, thread number four comes in

106
00:04:42.030 --> 00:04:44.020
with the highest priority.

107
00:04:44.020 --> 00:04:47.070
Then JVM is going to suspend the current thread's execution

108
00:04:47.070 --> 00:04:49.020
and pick up thread number four

109
00:04:49.020 --> 00:04:51.050
because it has got a higher priority,

110
00:04:51.050 --> 00:04:53.030
and it'll give it a run.

111
00:04:53.030 --> 00:04:55.010
This run will continue till the thread

112
00:04:55.010 --> 00:04:58.020
either completes its job or maybe some other

113
00:04:58.020 --> 00:05:01.050
higher priority thread enters the system.

114
00:05:01.050 --> 00:05:06.000
Occasionally, JVM could also employ time slicing scheduling,

115
00:05:06.000 --> 00:05:09.080
as per the underlying OS, which means, in this,

116
00:05:09.080 --> 00:05:13.050
every thread is given an equal time slice for execution.

117
00:05:13.050 --> 00:05:15.000
Once the time slice for a particular

118
00:05:15.000 --> 00:05:17.060
thread's execution elapses, then JVM is going

119
00:05:17.060 --> 00:05:19.020
to save the context of the thread

120
00:05:19.020 --> 00:05:23.010
and pick up the next thread in line for its execution.

121
00:05:23.010 --> 00:05:26.000
So, once all threads get the execution time,

122
00:05:26.000 --> 00:05:27.090
JVM may come back to the first thread

123
00:05:27.090 --> 00:05:32.030
and resume its execution by restoring its thread context.

124
00:05:32.030 --> 00:05:36.040
So, the moral of the story is that we, as developers,

125
00:05:36.040 --> 00:05:39.020
should exercise a lot of caution when we try

126
00:05:39.020 --> 00:05:41.070
to develop multithreaded applications.

127
00:05:41.070 --> 00:05:43.020
There is no guarantee when it comes

128
00:05:43.020 --> 00:05:46.090
to JVM scheduling mechanism, it may be platform-dependent

129
00:05:46.090 --> 00:05:48.080
because it doesn't really force anything.

130
00:05:48.080 --> 00:05:52.090
It takes the help of the underlying operating system.

131
00:05:52.090 --> 00:05:55.000
Let's talk about priorities now.

132
00:05:55.000 --> 00:05:56.030
Generally, when you have threads

133
00:05:56.030 --> 00:05:58.090
that get created in your application or the system,

134
00:05:58.090 --> 00:06:01.050
they will have some normal priority, right?

135
00:06:01.050 --> 00:06:03.030
Priorities signify which thread is going

136
00:06:03.030 --> 00:06:05.060
to be first for execution.

137
00:06:05.060 --> 00:06:06.040
Okay.

138
00:06:06.040 --> 00:06:09.010
Now, when you talk about Java's multithreading API,

139
00:06:09.010 --> 00:06:10.090
there is a facility in the API

140
00:06:10.090 --> 00:06:15.000
by which you can assign your own priorities to the threads.

141
00:06:15.000 --> 00:06:16.040
So, let's say you have a thread

142
00:06:16.040 --> 00:06:18.050
and you assigned it the highest priority,

143
00:06:18.050 --> 00:06:20.060
but beware, because as we spoke,

144
00:06:20.060 --> 00:06:23.050
when JVM employs time slicing scheduling,

145
00:06:23.050 --> 00:06:27.020
it can actually ignore the higher priority thread

146
00:06:27.020 --> 00:06:30.050
and pick up a lower priority one instead

147
00:06:30.050 --> 00:06:32.070
in order to avoid starvation.

148
00:06:32.070 --> 00:06:35.070
So, when it comes to JVM, nothing is guaranteed

149
00:06:35.070 --> 00:06:37.070
and we have to be very careful.

150
00:06:37.070 --> 00:06:40.080
Never assume that the platform may use time slicing.

151
00:06:40.080 --> 00:06:43.030
Never have any assumptions of those kinds.

152
00:06:43.030 --> 00:06:45.070
And whenever a thread gets executed,

153
00:06:45.070 --> 00:06:48.040
it always transits through many states

154
00:06:48.040 --> 00:06:49.060
during its entire lifecycle.

155
00:06:49.060 --> 00:06:51.030
So, from the time it was born

156
00:06:51.030 --> 00:06:54.050
to the time it executes its job, till the time it is dead,

157
00:06:54.050 --> 00:06:56.050
there are a lot of states that it goes through.

158
00:06:56.050 --> 00:07:00.000
We will talk about those states in the upcoming videos.

