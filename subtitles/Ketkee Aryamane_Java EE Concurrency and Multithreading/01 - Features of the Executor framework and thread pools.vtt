WEBVTT
1
00:00:00.050 --> 00:00:01.090
- Let's understand the features of the

2
00:00:01.090 --> 00:00:03.050
Executor Framework now.

3
00:00:03.050 --> 00:00:06.000
The first and the most vital feature is that it

4
00:00:06.000 --> 00:00:08.040
decouples thread creation and management logic

5
00:00:08.040 --> 00:00:10.050
from the application business logic.

6
00:00:10.050 --> 00:00:12.050
This means that now as a developer,

7
00:00:12.050 --> 00:00:14.080
you only have to focus on your business logic,

8
00:00:14.080 --> 00:00:16.060
rather than getting into the hassles

9
00:00:16.060 --> 00:00:19.020
of thread creation and management.

10
00:00:19.020 --> 00:00:20.090
In a Java Standalone application,

11
00:00:20.090 --> 00:00:23.060
we know that everything starts off with the main method.

12
00:00:23.060 --> 00:00:26.010
That's the place where we created the thread instances,

13
00:00:26.010 --> 00:00:29.000
and we started them off for the execution.

14
00:00:29.000 --> 00:00:30.050
So there is a thread which is going to

15
00:00:30.050 --> 00:00:31.090
submit the task for you,

16
00:00:31.090 --> 00:00:35.020
and there's a thread which is going to do the job for you.

17
00:00:35.020 --> 00:00:38.040
The framework provides a very clear demarcation, and a

18
00:00:38.040 --> 00:00:41.060
smooth coordination between the thread submitting the task,

19
00:00:41.060 --> 00:00:44.030
and the thread executing the job.

20
00:00:44.030 --> 00:00:46.010
Additionally, the framework gives you options

21
00:00:46.010 --> 00:00:48.050
to make a clean shutdown of all the tasks

22
00:00:48.050 --> 00:00:50.070
running in your system.

23
00:00:50.070 --> 00:00:53.020
Let's say if the task wants to return something,

24
00:00:53.020 --> 00:00:55.040
the framework will allow you to have

25
00:00:55.040 --> 00:00:57.050
a return value of the task.

26
00:00:57.050 --> 00:00:59.020
You can also check that out

27
00:00:59.020 --> 00:01:02.000
in the thread which submitted that task.

28
00:01:02.000 --> 00:01:04.080
The requirement of scheduling certain jobs

29
00:01:04.080 --> 00:01:07.070
at regular intervals or with fixed delays

30
00:01:07.070 --> 00:01:11.030
can be very easily met with the Executor Framework.

31
00:01:11.030 --> 00:01:14.020
Lastly, the framework automatically creates

32
00:01:14.020 --> 00:01:16.070
thread pools, which helps you spawn threads

33
00:01:16.070 --> 00:01:18.080
for your jobs of the application.

34
00:01:18.080 --> 00:01:20.010
But what is a thread pool?

35
00:01:20.010 --> 00:01:22.030
OK, let's understand that as well.

36
00:01:22.030 --> 00:01:26.020
Let's say you have an application, a banking website,

37
00:01:26.020 --> 00:01:27.080
which has got millions of users,

38
00:01:27.080 --> 00:01:29.030
so millions of bank accounts.

39
00:01:29.030 --> 00:01:31.020
The requirement is that we want to generate a

40
00:01:31.020 --> 00:01:34.000
transaction report for every bank account.

41
00:01:34.000 --> 00:01:37.010
Now this is a requirement where the user interference

42
00:01:37.010 --> 00:01:40.090
is not necessary, so we decided to spawn it in a thread.

43
00:01:40.090 --> 00:01:44.030
But when you have millions of bank accounts,

44
00:01:44.030 --> 00:01:47.070
you may want to create one thread per bank account.

45
00:01:47.070 --> 00:01:49.050
Oh, no, no, but if you do that,

46
00:01:49.050 --> 00:01:53.010
you will quickly exceed the maximum number of threads

47
00:01:53.010 --> 00:01:55.080
that can be created for the underlying platform,

48
00:01:55.080 --> 00:01:58.090
and eventually, your system is going to come crashing down.

49
00:01:58.090 --> 00:02:00.050
Doesn't work.

50
00:02:00.050 --> 00:02:03.050
Standalone applications, or enterprise applications

51
00:02:03.050 --> 00:02:06.050
which deal with threads often have this very common

52
00:02:06.050 --> 00:02:10.040
requirement to handle a large number of clients.

53
00:02:10.040 --> 00:02:13.040
And if you are going to spawn one thread per client,

54
00:02:13.040 --> 00:02:16.060
it is going to incur excessive processing overhead.

55
00:02:16.060 --> 00:02:19.010
Allocating and de-allocating memory resources

56
00:02:19.010 --> 00:02:21.030
is a very costly business for a thread.

57
00:02:21.030 --> 00:02:23.080
So we have a thread pool.

58
00:02:23.080 --> 00:02:25.060
A thread pool is a logical pool

59
00:02:25.060 --> 00:02:28.030
with a fixed number of threads.

60
00:02:28.030 --> 00:02:31.040
Each thread is going to be given a job to do.

61
00:02:31.040 --> 00:02:33.060
Once that job is over, and let's say if the thread is

62
00:02:33.060 --> 00:02:37.040
terminated, then in its place, a new thread will be created.

63
00:02:37.040 --> 00:02:40.020
However, at any point in time, the application

64
00:02:40.020 --> 00:02:43.030
will always have a fixed number of threads.

65
00:02:43.030 --> 00:02:46.090
So we are reusing threads, and re-usability is definitely

66
00:02:46.090 --> 00:02:50.080
one of the most important aspects of software development.

67
00:02:50.080 --> 00:02:54.020
So creating thread pools is definitely a better way

68
00:02:54.020 --> 00:02:57.080
to scale the concurrent application's performance.

69
00:02:57.080 --> 00:03:00.010
Thread pools do a lot of stuff for you.

70
00:03:00.010 --> 00:03:03.080
The first is they reduce per-task invocation overhead.

71
00:03:03.080 --> 00:03:07.070
Second, manage resources efficiently.

72
00:03:07.070 --> 00:03:10.090
Thread pools are often used with connection pooling,

73
00:03:10.090 --> 00:03:12.090
where every thread maintains an open

74
00:03:12.090 --> 00:03:15.070
connection to the database, that way you do not end up

75
00:03:15.070 --> 00:03:18.000
creating too many database objects as well,

76
00:03:18.000 --> 00:03:21.050
which may put your system under unnecessary stress.

77
00:03:21.050 --> 00:03:25.080
They also help to degrade the applications gracefully.

78
00:03:25.080 --> 00:03:28.070
For example, in a web application every incoming request

79
00:03:28.070 --> 00:03:31.000
is always managed by a thread, but you may have

80
00:03:31.000 --> 00:03:32.080
millions of incoming requests.

81
00:03:32.080 --> 00:03:35.040
You cannot possibly spawn a thread for every request,

82
00:03:35.040 --> 00:03:37.020
a new thread, right?

83
00:03:37.020 --> 00:03:39.060
That'll become very difficult, and eventually,

84
00:03:39.060 --> 00:03:41.070
your application is going to stop responding

85
00:03:41.070 --> 00:03:43.060
to all the requests.

86
00:03:43.060 --> 00:03:45.090
But when you create a thread pool,

87
00:03:45.090 --> 00:03:48.040
you always have a limited number of threads.

88
00:03:48.040 --> 00:03:52.000
So even if the requests keep coming in at a faster pace,

89
00:03:52.000 --> 00:03:56.020
the threads are going to make sure that the requests are

90
00:03:56.020 --> 00:03:59.040
handled according to the sustainability of the system.

91
00:03:59.040 --> 00:04:01.070
Now Java Executor framework allows you to create

92
00:04:01.070 --> 00:04:03.040
many kinds of thread pools.

93
00:04:03.040 --> 00:04:04.090
You don't have to do anything for it,

94
00:04:04.090 --> 00:04:07.060
the framework will do this job for you.

95
00:04:07.060 --> 00:04:09.060
Now the last point that I want to mention here,

96
00:04:09.060 --> 00:04:11.080
is what about the thread pool size?

97
00:04:11.080 --> 00:04:15.000
How many threads do you think should reside in the pool?

98
00:04:15.000 --> 00:04:18.010
Now that is decided based on a lot of factors.

99
00:04:18.010 --> 00:04:21.010
For example, how many codes do you have in your CPU?

100
00:04:21.010 --> 00:04:24.080
What kind of tasks are I/O intensive tasks?

101
00:04:24.080 --> 00:04:27.090
What kind of tasks are compute intensive tasks?

102
00:04:27.090 --> 00:04:29.000
And so on and so forth.

103
00:04:29.000 --> 00:04:30.050
So there are a lot of factors,

104
00:04:30.050 --> 00:04:32.080
and the framework does all of this job for you,

105
00:04:32.080 --> 00:04:35.000
so you don't have to worry about it.

