WEBVTT
1
1

00:00:00.160  -->  00:00:01.766
<v Instructor>Alright, so let's catch the bad guys.</v>
2

2

00:00:01.766  -->  00:00:03.070
If we can.
3

3

00:00:03.070  -->  00:00:05.192
So to do this, unfortunately we don't have
4

4

00:00:05.192  -->  00:00:07.540
an inverse mapping function
5

5

00:00:07.540  -->  00:00:09.940
you know, to directly get the list of customers
6

6

00:00:09.940  -->  00:00:12.470
from the coordinates of the winning notes.
7

7

00:00:12.470  -->  00:00:13.370
That could've been possible,
8

8

00:00:13.370  -->  00:00:16.060
but there isn't such a function in the
9

9

00:00:16.060  -->  00:00:17.710
minutes on that PY file.
10

10

00:00:17.710  -->  00:00:19.630
However, there is another solution.
11

11

00:00:19.630  -->  00:00:21.521
It's to use a dictionary that we can
12

12

00:00:21.521  -->  00:00:25.252
obtain by using a method available in minison.py
13

13

00:00:25.252  -->  00:00:27.797
and that will contain all the different mappings
14

14

00:00:27.797  -->  00:00:30.363
from the winning notes to the customers.
15

15

00:00:30.363  -->  00:00:32.359
So that means, that what we'll do first
16

16

00:00:32.359  -->  00:00:36.155
is get all these mappings and then we'll use the coordinates
17

17

00:00:36.155  -->  00:00:39.600
of our outliers winning notes that we identified,
18

18

00:00:39.600  -->  00:00:42.742
the white ones, and that will give us the list of customers.
19

19

00:00:42.742  -->  00:00:46.317
And since we actually identified two outlying winning notes,
20

20

00:00:46.317  -->  00:00:49.073
well we will have to use the concatenate function
21

21

00:00:49.073  -->  00:00:52.124
to concatenate the two lists of customers
22

22

00:00:52.124  -->  00:00:56.246
so that we can have a whole list of the potential cheaters.
23

23

00:00:56.246  -->  00:00:57.940
Alright, so let's do this,
24

24

00:00:57.940  -->  00:00:59.940
it's actually going to be very easy.
25

25

00:00:59.940  -->  00:01:02.121
So as I just said, the first thing we need to do
26

26

00:01:02.121  -->  00:01:05.930
is to get these mappings, so we're gonna introduce
27

27

00:01:05.930  -->  00:01:09.424
a new variable that we're gonna call mappings =
28

28

00:01:09.424  -->  00:01:13.060
and now we use this method that will return this dictionary
29

29

00:01:13.060  -->  00:01:17.613
of all the mappings from the winning notes to the customers.
30

30

00:01:17.613  -->  00:01:19.030
So let's do this.
31

31

00:01:19.030  -->  00:01:21.344
Since it is a method, we need to take our object
32

32

00:01:21.344  -->  00:01:26.344
S-O-M then dot and this function is called win_map.
33

33

00:01:28.770  -->  00:01:31.800
Alright, that's the method, and inside this method
34

34

00:01:31.800  -->  00:01:34.560
we need to input simply X.
35

35

00:01:34.560  -->  00:01:35.837
The whole dataset.
36

36

00:01:35.837  -->  00:01:38.240
As you can see here there's only one argument
37

37

00:01:38.240  -->  00:01:39.980
to input, which is the data.
38

38

00:01:39.980  -->  00:01:42.170
But be careful, this is not the whole data set,
39

39

00:01:42.170  -->  00:01:46.270
only the data on which our self-organizing map was trained.
40

40

00:01:46.270  -->  00:01:48.336
Alright, so let's execute this and let's see
41

41

00:01:48.336  -->  00:01:50.730
what it gives us.
42

42

00:01:50.730  -->  00:01:51.790
Here it is.
43

43

00:01:51.790  -->  00:01:54.045
So as I just said, mappings is actually
44

44

00:01:54.045  -->  00:01:56.765
a dictionary, and if we click on it,
45

45

00:01:56.765  -->  00:01:59.923
we get all the mappings for all the different
46

46

00:01:59.923  -->  00:02:02.730
winning notes in our self-organizing map.
47

47

00:02:02.730  -->  00:02:04.627
So, what you see here in this first column,
48

48

00:02:04.627  -->  00:02:07.645
the key is the coordinates of the winning notes.
49

49

00:02:07.645  -->  00:02:10.685
So, for example, this corresponds to the lower left
50

50

00:02:10.685  -->  00:02:13.079
winning note in the self-organizing map
51

51

00:02:13.079  -->  00:02:15.376
because it has coordinate 0,0
52

52

00:02:15.376  -->  00:02:17.608
and then, for this particular winning note
53

53

00:02:17.608  -->  00:02:20.156
we get the list of all the customers
54

54

00:02:20.156  -->  00:02:21.933
associated to this winning note.
55

55

00:02:21.933  -->  00:02:25.377
And we can already see that there are 28 customers
56

56

00:02:25.377  -->  00:02:27.630
associated to this winning note,
57

57

00:02:27.630  -->  00:02:29.280
and we can actually see that list
58

58

00:02:29.280  -->  00:02:32.116
by clicking on value here, and this gives us
59

59

00:02:32.116  -->  00:02:35.348
all the customers so if we enlarge this,
60

60

00:02:35.348  -->  00:02:38.041
we will see better the customers
61

61

00:02:38.041  -->  00:02:40.390
and so each line that you see here
62

62

00:02:40.390  -->  00:02:43.912
corresponds to one customer that is associated
63

63

00:02:43.912  -->  00:02:47.880
to this winning note of coordinates 0,0.
64

64

00:02:47.880  -->  00:02:50.087
So, for example, if I'm clicking on this customer
65

65

00:02:50.087  -->  00:02:53.013
well this, you know, corresponds to the
66

66

00:02:53.013  -->  00:02:56.085
attributes of this customer with this first
67

67

00:02:56.085  -->  00:02:58.640
value here being the customer ID,
68

68

00:02:58.640  -->  00:03:01.648
but remember that we scaled all our variables
69

69

00:03:01.648  -->  00:03:03.382
and then don't worry, we'll use
70

70

00:03:03.382  -->  00:03:05.840
the inverse transform method to get
71

71

00:03:05.840  -->  00:03:07.420
the original customer ID and the
72

72

00:03:07.420  -->  00:03:09.733
original values of the attribute.
73

73

00:03:11.330  -->  00:03:13.969
Okay, so now that we understand how mapping works,
74

74

00:03:13.969  -->  00:03:18.325
that is, as a dictionary, we will use it to get the frauds.
75

75

00:03:18.325  -->  00:03:22.745
So, new line of code and now we are ready to get the frauds
76

76

00:03:22.745  -->  00:03:24.980
so we are going to create a new variable
77

77

00:03:24.980  -->  00:03:27.283
that we're going to call frauds =
78

78

00:03:28.238  -->  00:03:30.830
and now, time to catch the cheaters.
79

79

00:03:30.830  -->  00:03:33.823
So, first what we need, before using this
80

80

00:03:33.823  -->  00:03:36.393
mappings function to get these cheating customers,
81

81

00:03:36.393  -->  00:03:40.094
well, we need to go back to our map to get the coordinates
82

82

00:03:40.094  -->  00:03:42.468
of the outlying winning notes, because
83

83

00:03:42.468  -->  00:03:44.600
these are the winning note that correspond
84

84

00:03:44.600  -->  00:03:46.430
to the customers we are looking for.
85

85

00:03:46.430  -->  00:03:48.893
So, I'm executing that again.
86

86

00:03:50.390  -->  00:03:53.184
Here is the map, and so remember the outlying winning notes
87

87

00:03:53.184  -->  00:03:56.030
are this winning note and this winning note.
88

88

00:03:56.030  -->  00:03:58.845
So, let's start with one winning note
89

89

00:03:58.845  -->  00:04:01.770
and let's get the customers for this winning note
90

90

00:04:01.770  -->  00:04:03.810
and then we will use the concatenate function to get
91

91

00:04:03.810  -->  00:04:05.904
the customers of this winning note plus
92

92

00:04:05.904  -->  00:04:07.547
the customers of this winning note
93

93

00:04:07.547  -->  00:04:10.214
to get the whole list of customers
94

94

00:04:10.214  -->  00:04:14.070
most likely to have cheated to get the credit card.
95

95

00:04:14.070  -->  00:04:15.970
So let's start, for example, with this one.
96

96

00:04:15.970  -->  00:04:19.827
This winning note has coordinates 8 and 1.
97

97

00:04:19.827  -->  00:04:23.840
Alright, so that's the coordinates of this winning note, 8,1
98

98

00:04:23.840  -->  00:04:26.050
and that's exactly what we are going to input
99

99

00:04:26.050  -->  00:04:30.730
in the mappings dictionary to get the list of customers
100

100

00:04:30.730  -->  00:04:33.826
associated to that outlying winning note.
101

101

00:04:33.826  -->  00:04:38.698
So, we take our mappings dictionary,
102

102

00:04:38.698  -->  00:04:42.480
then brackets, because that's how dictionaries work,
103

103

00:04:42.480  -->  00:04:45.650
syntaxically speaking, and so inside these brackets,
104

104

00:04:45.650  -->  00:04:47.480
we are going to input the coordinates
105

105

00:04:47.480  -->  00:04:49.747
of this first outlying winning note,
106

106

00:04:49.747  -->  00:04:53.580
which, remember, are 8,1.
107

107

00:04:53.580  -->  00:04:56.163
And, as simple as that, this will give us the list
108

108

00:04:56.163  -->  00:04:59.850
of the customers associated to this outlying winning note.
109

109

00:04:59.850  -->  00:05:01.959
So, if I execute this line, we get
110

110

00:05:01.959  -->  00:05:04.471
the list of potential customers.
111

111

00:05:04.471  -->  00:05:08.560
And we can actually access this list here
112

112

00:05:08.560  -->  00:05:12.450
and here are all the customers, we cannot recognize them yet
113

113

00:05:12.450  -->  00:05:14.725
because the values are scaled, but
114

114

00:05:14.725  -->  00:05:17.760
we will very quickly use the inverse transform method
115

115

00:05:17.760  -->  00:05:20.040
to get the original scales.
116

116

00:05:20.040  -->  00:05:24.020
But before we do it now, let's get the other customers
117

117

00:05:24.020  -->  00:05:25.760
to make sure we catch everybody.
118

118

00:05:25.760  -->  00:05:27.860
That is, the customer associated to the
119

119

00:05:27.860  -->  00:05:29.670
other outlying winning note.
120

120

00:05:29.670  -->  00:05:33.312
So, let's go back to the map, executing that again,
121

121

00:05:33.312  -->  00:05:36.080
and here's the map.
122

122

00:05:36.080  -->  00:05:38.170
Okay, so the second outlying winning note
123

123

00:05:38.170  -->  00:05:40.520
is this winning note here, the white one
124

124

00:05:40.520  -->  00:05:43.243
that corresponds to a very high MID;
125

125

00:05:43.243  -->  00:05:45.245
mean interneuron distance.
126

126

00:05:45.245  -->  00:05:49.800
So, this winning note has coordinates 6 and 8.
127

127

00:05:50.867  -->  00:05:54.020
So, here we go, we have the coordinates
128

128

00:05:54.020  -->  00:05:56.614
and now we can input these coordinates
129

129

00:05:56.614  -->  00:06:00.225
in the mapping dictionary, so six and eight.
130

130

00:06:00.225  -->  00:06:05.225
So let's copy this, we're gonna add a comma for now,
131

131

00:06:05.540  -->  00:06:08.870
and then we'll use the concatenate function.
132

132

00:06:08.870  -->  00:06:10.197
So, mappings,
133

133

00:06:11.750  -->  00:06:15.490
6,8 and here we go,
134

134

00:06:15.490  -->  00:06:18.458
we are almost ready to get the whole list of customers
135

135

00:06:18.458  -->  00:06:20.477
so as I just said, we need to use
136

136

00:06:20.477  -->  00:06:24.260
the concatenate function to concatenate
137

137

00:06:24.260  -->  00:06:27.448
these two lists of customers to put them
138

138

00:06:27.448  -->  00:06:30.050
in the same whole list.
139

139

00:06:30.050  -->  00:06:32.699
So that's how it works, so we put our two
140

140

00:06:32.699  -->  00:06:35.436
mappings lists here.
141

141

00:06:35.436  -->  00:06:37.185
Alright, so we've added the two mappings
142

142

00:06:37.185  -->  00:06:39.370
in the concatenate function, and now
143

143

00:06:39.370  -->  00:06:41.320
what we can see is a warning that will tell us
144

144

00:06:41.320  -->  00:06:43.460
that concatenate is an undefined name.
145

145

00:06:43.460  -->  00:06:47.090
That's because a concatenate function belongs to Non-Pi,
146

146

00:06:47.090  -->  00:06:49.883
and therefore, we need to add here, np.concatenate
147

147

00:06:51.140  -->  00:06:53.070
and now the warning will disappear.
148

148

00:06:53.070  -->  00:06:56.216
There we go, and now, almost over.
149

149

00:06:56.216  -->  00:06:59.721
First, let's check out the concatenate function
150

150

00:06:59.721  -->  00:07:02.880
by pressing command+I and here we get
151

151

00:07:02.880  -->  00:07:05.300
some information about the parameters
152

152

00:07:05.300  -->  00:07:06.490
of the concatenate function,
153

153

00:07:06.490  -->  00:07:08.550
always very useful to do that.
154

154

00:07:08.550  -->  00:07:10.974
So, as you can see, the first parameters
155

155

00:07:10.974  -->  00:07:14.121
of the concatenate function are the two lists
156

156

00:07:14.121  -->  00:07:16.040
we want to concatenate.
157

157

00:07:16.040  -->  00:07:17.730
And as you can see, well that's not very clear,
158

158

00:07:17.730  -->  00:07:19.925
but when we see a1 and a2 like this,
159

159

00:07:19.925  -->  00:07:23.190
that means we have to input these two lists
160

160

00:07:23.190  -->  00:07:25.888
that we want to concatenate into one same argument.
161

161

00:07:25.888  -->  00:07:27.620
And how do we do that?
162

162

00:07:27.620  -->  00:07:30.070
We just need to put our two mappings
163

163

00:07:30.070  -->  00:07:32.700
into a new pair of parenthesis.
164

164

00:07:32.700  -->  00:07:36.870
And then, comma to add the other arguments.
165

165

00:07:36.870  -->  00:07:40.404
So, these two lists here, mappings 8,1 and mapping 6,8
166

166

00:07:40.404  -->  00:07:43.623
are into one argument, the first argument
167

167

00:07:43.623  -->  00:07:45.740
of the concatenate function.
168

168

00:07:45.740  -->  00:07:47.950
And then we add the second argument.
169

169

00:07:47.950  -->  00:07:49.677
The second argument is, axis.
170

170

00:07:49.677  -->  00:07:52.246
A compulsory argument because that's how you specify
171

171

00:07:52.246  -->  00:07:56.028
if you want to concatenate vertically or horizontally.
172

172

00:07:56.028  -->  00:07:58.550
So as you can see, it's the axis along which
173

173

00:07:58.550  -->  00:08:00.771
the arrays will be joined, default is zero,
174

174

00:08:00.771  -->  00:08:02.668
and zero means vertically.
175

175

00:08:02.668  -->  00:08:05.822
And since we're concatenating the horizontal vectors
176

176

00:08:05.822  -->  00:08:08.550
of customers, well you know we want to put this
177

177

00:08:08.550  -->  00:08:11.008
second list of customer vectors below
178

178

00:08:11.008  -->  00:08:12.933
this first list of customer vectors,
179

179

00:08:12.933  -->  00:08:16.558
and therefore we are concatenating along the vertical axis.
180

180

00:08:16.558  -->  00:08:21.558
And that's why I'm going to add here, axis=0.
181

181

00:08:21.830  -->  00:08:24.420
Because that corresponds to the vertical axis.
182

182

00:08:24.420  -->  00:08:26.215
And now, eventually, we are ready to get
183

183

00:08:26.215  -->  00:08:29.020
the whole list of cheaters.
184

184

00:08:29.020  -->  00:08:31.690
So, we are getting very close to our final goal.
185

185

00:08:31.690  -->  00:08:36.240
Let's execute this line and let's catch them immediately.
186

186

00:08:36.240  -->  00:08:39.032
Here they are, fraud is ready, well computed.
187

187

00:08:39.032  -->  00:08:42.015
Let's go to variable explorer, and here is the whole list
188

188

00:08:42.015  -->  00:08:45.640
of the customers who potentially cheated.
189

189

00:08:45.640  -->  00:08:47.554
I'm not saying everyone cheated, but
190

190

00:08:47.554  -->  00:08:50.116
these are the customers we've been looking for
191

191

00:08:50.116  -->  00:08:52.116
since the beginning of this part.
192

192

00:08:52.116  -->  00:08:54.499
However, the values are still scaled,
193

193

00:08:54.499  -->  00:08:57.114
so the only thing that we need to do left
194

194

00:08:57.114  -->  00:09:00.570
is to inverse the scaling, and to do that
195

195

00:09:00.570  -->  00:09:02.200
there is nothing more simple.
196

196

00:09:02.200  -->  00:09:04.380
There is the inverse transform method
197

197

00:09:04.380  -->  00:09:05.990
that inverses this mapping.
198

198

00:09:05.990  -->  00:09:10.342
So, we are gonna take our frauds list again, =
199

199

00:09:10.342  -->  00:09:13.162
and now we're gonna use the inverse transform method
200

200

00:09:13.162  -->  00:09:14.966
that will reverse the scaling.
201

201

00:09:14.966  -->  00:09:18.768
So since we applied feature scaling with the sc object
202

202

00:09:18.768  -->  00:09:21.285
that we created from the MinMaxScaler class,
203

203

00:09:21.285  -->  00:09:23.629
well we need to take here our object
204

204

00:09:23.629  -->  00:09:26.144
and dot, and that's where we use
205

205

00:09:26.144  -->  00:09:29.980
the inverse transform method and
206

206

00:09:29.980  -->  00:09:32.650
simply inside this inverse transform method,
207

207

00:09:32.650  -->  00:09:36.451
we enter our list of frauds, nothing more simple.
208

208

00:09:36.451  -->  00:09:39.590
And now, finally, if we execute that, we get
209

209

00:09:39.590  -->  00:09:43.184
the list of frauds, but this time,
210

210

00:09:43.184  -->  00:09:45.880
with the original real values.
211

211

00:09:45.880  -->  00:09:48.615
Here we go, and we get the customer IDs,
212

212

00:09:48.615  -->  00:09:51.600
which are right here and which we can use to
213

213

00:09:51.600  -->  00:09:54.110
identify the potential cheaters.
214

214

00:09:54.110  -->  00:09:57.140
And now, we did our job, we gave the list of
215

215

00:09:57.140  -->  00:09:58.661
potential cheaters to the bank,
216

216

00:09:58.661  -->  00:10:00.878
so now the bank side's got the ball.
217

217

00:10:00.878  -->  00:10:03.120
Their analyst will investigate this list
218

218

00:10:03.120  -->  00:10:05.860
of potential cheaters and so first,
219

219

00:10:05.860  -->  00:10:07.750
what we will probably do is get
220

220

00:10:07.750  -->  00:10:10.426
the values of y for all these customers' ID,
221

221

00:10:10.426  -->  00:10:13.343
take in priority the ones that got approved
222

222

00:10:13.343  -->  00:10:16.079
to revise the application, and then by
223

223

00:10:16.079  -->  00:10:18.440
investigating deeper, they will find out
224

224

00:10:18.440  -->  00:10:20.978
if the customer really cheated somehow.
225

225

00:10:20.978  -->  00:10:24.090
Alright, so that's the end of the mission,
226

226

00:10:24.090  -->  00:10:26.060
and therefore, that's the end of this part
227

227

00:10:26.060  -->  00:10:27.730
on self-organizing maps.
228

228

00:10:27.730  -->  00:10:29.104
I hope you like this business problem,
229

229

00:10:29.104  -->  00:10:31.120
and now in the next part, we will do
230

230

00:10:31.120  -->  00:10:32.467
another very exciting project,
231

231

00:10:32.467  -->  00:10:35.502
which will be about creating a very powerful
232

232

00:10:35.502  -->  00:10:37.380
recommended system.
233

233

00:10:37.380  -->  00:10:39.423
It's kind of a big deal, so we will give ourselves
234

234

00:10:39.423  -->  00:10:42.147
two shots, one shot with the Boltzmann machines
235

235

00:10:42.147  -->  00:10:44.574
and one shot with the Stacked Autoencoders.
236

236

00:10:44.574  -->  00:10:47.520
This will be slightly more advanced,
237

237

00:10:47.520  -->  00:10:49.745
because we will implement our models
238

238

00:10:49.745  -->  00:10:51.003
almost from scratch.
239

239

00:10:51.003  -->  00:10:53.233
We will use transfers, you will see how it works,
240

240

00:10:53.233  -->  00:10:55.600
we will build some classes, some objects,
241

241

00:10:55.600  -->  00:10:57.770
some methods, so you will really get to see
242

242

00:10:57.770  -->  00:11:00.814
how Python works, but that's essential and deep learning
243

243

00:11:00.814  -->  00:11:02.760
you might have sometimes to
244

244

00:11:02.760  -->  00:11:04.610
implement your models from scratch,
245

245

00:11:04.610  -->  00:11:05.622
so that's very good for you,
246

246

00:11:05.622  -->  00:11:08.423
so I can't wait that we take this journey together.
247

247

00:11:08.423  -->  00:11:10.642
I'll see you in the next part, and until then,
248

248

00:11:10.642  -->  00:11:11.953
enjoy deep learning!
