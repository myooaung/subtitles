WEBVTT
1
1

00:00:00.260  -->  00:00:02.590
<v Instructor>Hello and welcome to this Python tutorial.</v>
2

2

00:00:02.590  -->  00:00:05.540
So in the previous tutorial, we converted our training set
3

3

00:00:05.540  -->  00:00:08.720
and our test set into these arrays composed of the users
4

4

00:00:08.720  -->  00:00:10.700
in lines and the movies in columns.
5

5

00:00:10.700  -->  00:00:13.570
And we did this because in this special structure,
6

6

00:00:13.570  -->  00:00:16.080
that is the usual structure for any deep learning model
7

7

00:00:16.080  -->  00:00:18.040
or even machinery model.
8

8

00:00:18.040  -->  00:00:20.440
Well, the lines are going to be the observations
9

9

00:00:20.440  -->  00:00:23.570
going into the network and the columns are the features
10

10

00:00:23.570  -->  00:00:27.040
that are gonna be the input notes in the network.
11

11

00:00:27.040  -->  00:00:29.640
So for each user, we will have its ratings
12

12

00:00:29.640  -->  00:00:32.070
of all the movies, zeros included.
13

13

00:00:32.070  -->  00:00:34.860
And these ratings are going to be the input note for
14

14

00:00:34.860  -->  00:00:37.650
this observation going into the network.
15

15

00:00:37.650  -->  00:00:40.740
And now that's when PyTorch comes into play.
16

16

00:00:40.740  -->  00:00:43.140
Because very soon, we will start creating
17

17

00:00:43.140  -->  00:00:45.470
the architecture of our neural network.
18

18

00:00:45.470  -->  00:00:48.980
But, we will build this architecture with tensors,
19

19

00:00:48.980  -->  00:00:50.193
PyTorch Tensors.
20

20

00:00:51.070  -->  00:00:52.496
And so what are tensors?
21

21

00:00:52.496  -->  00:00:55.960
Tensors are simply arrays that contain elements of
22

22

00:00:55.960  -->  00:00:57.840
a single data type.
23

23

00:00:57.840  -->  00:01:00.770
So, a tensor is a multidimensional matrix,
24

24

00:01:00.770  -->  00:01:05.550
but instead of being a NumPy array, this is a PyTorch array.
25

25

00:01:05.550  -->  00:01:07.720
And in fact, we could build a neural network
26

26

00:01:07.720  -->  00:01:11.130
with NumPy arrays, but that would be much less efficient
27

27

00:01:11.130  -->  00:01:13.390
and that's why we're using tensors,
28

28

00:01:13.390  -->  00:01:16.120
as what we're about to do with the Torch Tensors.
29

29

00:01:16.120  -->  00:01:18.660
And by the way with TensorFlow, we have exactly the same.
30

30

00:01:18.660  -->  00:01:20.750
With TensorFlow, we work with tensors,
31

31

00:01:20.750  -->  00:01:22.260
that are TensorFlow Tensors.
32

32

00:01:22.260  -->  00:01:24.610
So another kind of tensor, another kind
33

33

00:01:24.610  -->  00:01:26.560
of multidimensional matrix.
34

34

00:01:26.560  -->  00:01:29.740
And so we could also implement our Autoencoders
35

35

00:01:29.740  -->  00:01:31.940
from scratch with TensorFlow.
36

36

00:01:31.940  -->  00:01:34.370
But I actually did that, and it turned out
37

37

00:01:34.370  -->  00:01:37.580
that for Autoencoders, I preferred PyTorch much more
38

38

00:01:37.580  -->  00:01:39.460
because not only I got better results,
39

39

00:01:39.460  -->  00:01:41.910
and also this was much more simple.
40

40

00:01:41.910  -->  00:01:43.880
So let's go for PyTorch.
41

41

00:01:43.880  -->  00:01:45.480
Alright, so now what we have to do
42

42

00:01:45.480  -->  00:01:49.828
in this very quick tutorial, is to convert our training_set
43

43

00:01:49.828  -->  00:01:53.310
and our test_set, that are so far a list of lists,
44

44

00:01:53.310  -->  00:01:55.952
into some Torch Tensors.
45

45

00:01:55.952  -->  00:01:59.000
So, the training_set is going to be one torch.Tensor
46

46

00:01:59.000  -->  00:02:01.730
and the test_set is going to be another torch.Tensor.
47

47

00:02:01.730  -->  00:02:03.400
Like they are gonna be two separate
48

48

00:02:03.400  -->  00:02:06.520
multidimensional matrices based on PyTorch.
49

49

00:02:06.520  -->  00:02:08.710
And so this is going to be a very quick tutorial,
50

50

00:02:08.710  -->  00:02:11.370
because the conversion is going to be very easy.
51

51

00:02:11.370  -->  00:02:13.860
We will just use a class from the Torch library,
52

52

00:02:13.860  -->  00:02:15.910
which will do the conversion itself.
53

53

00:02:15.910  -->  00:02:16.743
So lets do this.
54

54

00:02:16.743  -->  00:02:18.490
We're gonna take our training_set
55

55

00:02:18.490  -->  00:02:23.490
So training_set and we'll give it a new value which will be,
56

56

00:02:24.560  -->  00:02:27.230
this converted training_set into a torch.Tensor.
57

57

00:02:27.230  -->  00:02:30.650
And so first we need to take Torch, so that's the library
58

58

00:02:30.650  -->  00:02:34.800
and then dot and now we're gonna use the class FloatTensor
59

59

00:02:34.800  -->  00:02:37.200
which will create an object of this class,
60

60

00:02:37.200  -->  00:02:39.650
the subject will the torch.Tensor itself
61

61

00:02:39.650  -->  00:02:41.764
and remember I told you that a torch.Tensor
62

62

00:02:41.764  -->  00:02:45.640
is a multidimensional matrix with a single type,
63

63

00:02:45.640  -->  00:02:48.070
and since we're taking the FloatTensor class,
64

64

00:02:48.070  -->  00:02:51.070
well the single type is going to be Float.
65

65

00:02:51.070  -->  00:02:56.070
So let's take the class FloatTensor with capitals F and T,
66

66

00:02:56.090  -->  00:02:59.320
and inside this class we need to take one argument,
67

67

00:02:59.320  -->  00:03:02.450
which has to be a list of lists, and of course this is
68

68

00:03:02.450  -->  00:03:04.720
our old version of the training set.
69

69

00:03:04.720  -->  00:03:08.350
And that's why we had to make this conversion here into
70

70

00:03:08.350  -->  00:03:11.550
a list of lists, that's because the FloatTensor class
71

71

00:03:11.550  -->  00:03:13.720
expects a lists of lists.
72

72

00:03:13.720  -->  00:03:16.314
So let's input our old training_set,
73

73

00:03:16.314  -->  00:03:19.250
set and that's basically all.
74

74

00:03:19.250  -->  00:03:22.860
This will give the exact same matrix with the users in lines
75

75

00:03:22.860  -->  00:03:25.100
and the movies in columns, but instead of being
76

76

00:03:25.100  -->  00:03:28.650
a NumPy array, this will be a torch.Tensor.
77

77

00:03:28.650  -->  00:03:31.220
And now we're gonna do the same for the test_set,
78

78

00:03:31.220  -->  00:03:34.430
so I'm copying this line, pasting it below,
79

79

00:03:34.430  -->  00:03:37.200
and now we're just going to replace training_set
80

80

00:03:37.200  -->  00:03:38.173
by test_set.
81

81

00:03:39.753  -->  00:03:42.670
test_set, here we go, we are ready to convert
82

82

00:03:42.670  -->  00:03:46.180
our training_set and our test_set into Torch tensors.
83

83

00:03:46.180  -->  00:03:48.971
Now I have to warn you, the training_set
84

84

00:03:48.971  -->  00:03:51.660
and the test_set in Variable Explorer will disappear
85

85

00:03:51.660  -->  00:03:54.540
and that's because the Variable Explorer pane in Spyder
86

86

00:03:54.540  -->  00:03:56.740
doesn't recognize Torch tensors yet.
87

87

00:03:56.740  -->  00:03:59.660
Remember the PyTorch is very recent, it was basically
88

88

00:03:59.660  -->  00:04:03.100
released a few weeks ago, so it won't be recognized yet
89

89

00:04:03.100  -->  00:04:05.050
in Variable Explorer in Spyder.
90

90

00:04:05.050  -->  00:04:07.770
But don't worry, the variable will still exist,
91

91

00:04:07.770  -->  00:04:10.473
only they will not displayed in Variable Explorer.
92

92

00:04:10.473  -->  00:04:14.380
So let's check it out, I'm going to select this line
93

93

00:04:14.380  -->  00:04:18.750
and execute to convert our training_set into a torch.Tensor.
94

94

00:04:18.750  -->  00:04:21.060
And as you can see, the training_set disappeared,
95

95

00:04:21.060  -->  00:04:23.130
but I guarantee you that it is still here,
96

96

00:04:23.130  -->  00:04:25.730
and now we're gonna do the same for the test_set.
97

97

00:04:25.730  -->  00:04:28.950
So, I'm selecting this line and execute.
98

98

00:04:28.950  -->  00:04:31.640
And now the test_set also disappeared,
99

99

00:04:31.640  -->  00:04:34.230
but it's now converted into a torch.Tensor,
100

100

00:04:34.230  -->  00:04:35.730
and that's what we want.
101

101

00:04:35.730  -->  00:04:36.710
So, perfect.
102

102

00:04:36.710  -->  00:04:39.070
And now, I'm getting very excited because
103

103

00:04:39.070  -->  00:04:41.705
in the next tutorial, we will be creating the architecture
104

104

00:04:41.705  -->  00:04:44.930
of our neural network, that is our Autoencoders.
105

105

00:04:44.930  -->  00:04:47.060
And even if we will have to make a class for it,
106

106

00:04:47.060  -->  00:04:49.840
well you're gonna see that it's going to be so easy
107

107

00:04:49.840  -->  00:04:52.980
and intuitive, and we're gonna have a lot of fun making it,
108

108

00:04:52.980  -->  00:04:56.010
and you're gonna have a lot of fun using it afterwards
109

109

00:04:56.010  -->  00:04:58.430
to change the architecture of your Autoencoders
110

110

00:04:58.430  -->  00:05:00.360
to try other architectures.
111

111

00:05:00.360  -->  00:05:02.920
Alright, so I'll see you in this exciting next tutorial,
112

112

00:05:02.920  -->  00:05:04.670
and until then enjoy deep learning.
