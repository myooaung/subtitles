1
1

00:00:00,200  -->  00:00:02,660
<v Instructor>Hello and welcome to this tutorial.</v>
2

2

00:00:02,660  -->  00:00:05,340
Okay so we are halfway our data preprocessing phase.
3

3

00:00:05,340  -->  00:00:07,440
We learned how to import the libraries,
4

4

00:00:07,440  -->  00:00:08,860
to import the data set.
5

5

00:00:08,860  -->  00:00:10,960
We learned how to take care of missing data
6

6

00:00:10,960  -->  00:00:14,940
and today we're gonna learn how to encode categorical data.
7

7

00:00:14,940  -->  00:00:16,930
So the first thing that we're going to do
8

8

00:00:16,930  -->  00:00:20,730
is that we are going to explain why we need to do this.
9

9

00:00:20,730  -->  00:00:21,990
In this dataset we can see
10

10

00:00:21,990  -->  00:00:24,690
that we have two categorical variables.
11

11

00:00:24,690  -->  00:00:28,620
We have the country variable here and the purchase variable.
12

12

00:00:28,620  -->  00:00:31,090
These two variables are categorical variables
13

13

00:00:31,090  -->  00:00:34,030
because simply they contain categories.
14

14

00:00:34,030  -->  00:00:36,810
Here the country contains three categories.
15

15

00:00:36,810  -->  00:00:39,420
It's France, Spain and Germany.
16

16

00:00:39,420  -->  00:00:40,530
And the purchase variable
17

17

00:00:40,530  -->  00:00:43,490
contains two categories yes and no.
18

18

00:00:43,490  -->  00:00:46,110
So that's why they're called categorical variables.
19

19

00:00:46,110  -->  00:00:49,260
And now you can guess that since machine learning models
20

20

00:00:49,260  -->  00:00:51,680
are based on mathematical equations,
21

21

00:00:51,680  -->  00:00:53,170
you can intuitively understand
22

22

00:00:53,170  -->  00:00:54,670
that it would cost some problem
23

23

00:00:54,670  -->  00:00:57,750
if we keep the text here in the categorical variables
24

24

00:00:57,750  -->  00:00:58,700
in the equations.
25

25

00:00:58,700  -->  00:01:01,690
Because we would only want numbers in the equations.
26

26

00:01:01,690  -->  00:01:05,940
So that's why we need to encode the categorical variables.
27

27

00:01:05,940  -->  00:01:10,820
That is to encode the text that we have here into numbers.
28

28

00:01:10,820  -->  00:01:13,100
Okay so in this tutorial we are going to encode
29

29

00:01:13,100  -->  00:01:16,000
these two variables country and purchase.
30

30

00:01:16,000  -->  00:01:18,540
So as usual we are going to import a library
31

31

00:01:18,540  -->  00:01:20,280
that will do the job for us.
32

32

00:01:20,280  -->  00:01:23,160
And this library is going to be the same library
33

33

00:01:23,160  -->  00:01:25,570
as we used to take care of missing data,
34

34

00:01:25,570  -->  00:01:28,160
is the sklearn preprocessing library.
35

35

00:01:28,160  -->  00:01:31,453
So let's just copy this and paste it here.
36

36

00:01:32,730  -->  00:01:34,520
But then we're not going to import the imputer,
37

37

00:01:34,520  -->  00:01:38,397
we're going to import something else which is LabelEncoder.
38

38

00:01:42,980  -->  00:01:43,840
Alright.
39

39

00:01:43,840  -->  00:01:45,690
So LabelEncoder is a class
40

40

00:01:45,690  -->  00:01:48,520
from the sklearn preprocessing library.
41

41

00:01:48,520  -->  00:01:51,230
So exactly as we did when we took care of missing data,
42

42

00:01:51,230  -->  00:01:54,070
here we need to create a first object
43

43

00:01:54,070  -->  00:01:56,430
of the LabelEncoder class.
44

44

00:01:56,430  -->  00:01:59,247
Okay, so I'm gonna call this object labelencoder.
45

45

00:02:02,390  -->  00:02:06,200
Okay, so since we're first going to take care of the country
46

46

00:02:06,200  -->  00:02:09,470
categorical variable here, I'm gonna call this object
47

47

00:02:09,470  -->  00:02:14,340
labelencoder_X and then what I'm simply going to do
48

48

00:02:14,340  -->  00:02:18,803
is I'm gonna call the LabelEncoder class.
49

49

00:02:19,830  -->  00:02:21,560
Okay so we simply need to do this.
50

50

00:02:21,560  -->  00:02:22,990
We simply need to create an object
51

51

00:02:22,990  -->  00:02:24,500
of the LabelEncoder class.
52

52

00:02:24,500  -->  00:02:27,600
And then we're gonna use this object on this column country
53

53

00:02:27,600  -->  00:02:30,270
here which is our categorical variable.
54

54

00:02:30,270  -->  00:02:31,760
Okay let's click okay.
55

55

00:02:31,760  -->  00:02:35,510
Okay so to apply the labelencoder object on our column,
56

56

00:02:35,510  -->  00:02:38,257
we will type label encoder_X,
57

57

00:02:40,290  -->  00:02:41,653
so that is our object.
58

58

00:02:42,520  -->  00:02:46,430
then we're gonna take a method of the labelencoder class
59

59

00:02:46,430  -->  00:02:49,333
which is the fit_transform method.
60

60

00:02:52,180  -->  00:02:56,140
And we're going to apply this method on X.
61

61

00:02:56,140  -->  00:02:59,580
But not the whole matrix X, we just want the first column.
62

62

00:02:59,580  -->  00:03:03,370
And I'm gonna let you guess what to put next.
63

63

00:03:03,370  -->  00:03:05,750
We need to put the index of the first column
64

64

00:03:05,750  -->  00:03:08,610
and we know that indexes in Python start at zero.
65

65

00:03:08,610  -->  00:03:11,810
So the index of the country column is zero.
66

66

00:03:11,810  -->  00:03:15,710
So here we're gonna put bracket.
67

67

00:03:15,710  -->  00:03:16,680
We want the the whole column,
68

68

00:03:16,680  -->  00:03:19,660
so we here put colon to take all the lines.
69

69

00:03:19,660  -->  00:03:23,690
Then comma and then we put the index which is zero.
70

70

00:03:23,690  -->  00:03:26,890
Okay, so what we need to understand here is that by typing
71

71

00:03:26,890  -->  00:03:31,270
this line of codes we fitted this labelencoder_X object
72

72

00:03:31,270  -->  00:03:34,160
to the first column country of our matrix X,
73

73

00:03:34,160  -->  00:03:36,230
and all this returns the first column
74

74

00:03:36,230  -->  00:03:39,100
country of the Matrix X encoded.
75

75

00:03:39,100  -->  00:03:43,350
So that means that if I select this and execute,
76

76

00:03:43,350  -->  00:03:47,070
you can see that the output contains the 10 values
77

77

00:03:47,070  -->  00:03:51,890
of the first column of our matrix X, but this time encoded.
78

78

00:03:51,890  -->  00:03:54,210
We no longer have the countries written in text.
79

79

00:03:54,210  -->  00:03:57,330
We have the encoded values of these countries.
80

80

00:03:57,330  -->  00:04:01,670
So now all we need to do is to take the first column here
81

81

00:04:01,670  -->  00:04:05,820
of the Matrix X, put it here, so that the first column
82

82

00:04:05,820  -->  00:04:09,590
of this matrix X becomes this array
83

83

00:04:09,590  -->  00:04:12,360
of encoded values of the countries.
84

84

00:04:12,360  -->  00:04:17,330
Because as you can see if I, if I look at X right now, X.
85

85

00:04:17,330  -->  00:04:18,890
We can see that the first column
86

86

00:04:18,890  -->  00:04:20,910
contains the countries in text.
87

87

00:04:20,910  -->  00:04:22,940
France, Spain Germany et cetera.
88

88

00:04:22,940  -->  00:04:27,630
And now if I select this line and execute, okay,
89

89

00:04:27,630  -->  00:04:29,173
and if I type X again.
90

90

00:04:30,170  -->  00:04:32,800
Okay now the first column of the X matrix
91

91

00:04:32,800  -->  00:04:34,840
has the encoded values.
92

92

00:04:34,840  -->  00:04:38,420
you can, we can see that France is zero,
93

93

00:04:38,420  -->  00:04:41,930
Spain is two, and Germany is one.
94

94

00:04:41,930  -->  00:04:45,260
Okay, so by doing this we encoded the country column.
95

95

00:04:45,260  -->  00:04:48,903
However do you suspect any problem that could happen?
96

96

00:04:50,190  -->  00:04:52,990
I will let you think for 10 seconds of what problem
97

97

00:04:52,990  -->  00:04:55,590
could happen here, and I will tell you what this is.
98

98

00:05:00,130  -->  00:05:02,670
Okay so The problem is still the same.
99

99

00:05:02,670  -->  00:05:05,400
Machine learning models are based on equations,
100

100

00:05:05,400  -->  00:05:08,470
and that's good that we replaced the text by numbers,
101

101

00:05:08,470  -->  00:05:11,430
so that we can include the numbers in the equations.
102

102

00:05:11,430  -->  00:05:13,920
However since one is greater than zero
103

103

00:05:13,920  -->  00:05:16,700
and two is greater than one, the equations in the model
104

104

00:05:16,700  -->  00:05:20,420
will think that Spain has a higher value than Germany
105

105

00:05:20,420  -->  00:05:23,850
and France, and Germany has a higher value than France.
106

106

00:05:23,850  -->  00:05:25,090
And that's not the case.
107

107

00:05:25,090  -->  00:05:26,750
These are actually three categories
108

108

00:05:26,750  -->  00:05:29,850
and there is no relational order between the three.
109

109

00:05:29,850  -->  00:05:32,650
We cannot compare France, Spain and Germany by saying
110

110

00:05:32,650  -->  00:05:34,930
that Spain is greater than Germany
111

111

00:05:34,930  -->  00:05:36,670
or Germany is greater than France.
112

112

00:05:36,670  -->  00:05:38,320
This wouldn't make any sense.
113

113

00:05:38,320  -->  00:05:41,710
If we had for example the variable size with the sizes like
114

114

00:05:41,710  -->  00:05:45,010
small, medium and large, then yes we could express orders
115

115

00:05:45,010  -->  00:05:46,480
between the values of this variable,
116

116

00:05:46,480  -->  00:05:48,730
because large is greater than medium
117

117

00:05:48,730  -->  00:05:50,390
and medium is greater than small.
118

118

00:05:50,390  -->  00:05:52,190
But here it doesn't make any sense.
119

119

00:05:52,190  -->  00:05:55,030
So we have to prevent the machine learning equations
120

120

00:05:55,030  -->  00:05:58,980
from thinking that Germany is greater than France
121

121

00:05:58,980  -->  00:06:00,950
and Spain is greater than Germany.
122

122

00:06:00,950  -->  00:06:02,480
And to prevent this, we're gonna use
123

123

00:06:02,480  -->  00:06:05,030
what are called the dummy variables.
124

124

00:06:05,030  -->  00:06:07,987
That means that instead of having one column here,
125

125

00:06:07,987  -->  00:06:10,080
we are gonna have three columns.
126

126

00:06:10,080  -->  00:06:13,820
We're gonna have a number of columns equal
127

127

00:06:13,820  -->  00:06:15,410
to the number of categories.
128

128

00:06:15,410  -->  00:06:16,723
So since we have three categories here,
129

129

00:06:16,723  -->  00:06:20,370
France, Spain and Germany, we're gonna have three columns.
130

130

00:06:20,370  -->  00:06:22,840
Each of these three columns will correspond to one country.
131

131

00:06:22,840  -->  00:06:24,870
We're gonna have the France column,
132

132

00:06:24,870  -->  00:06:27,090
the Spain column and the Germany column.
133

133

00:06:27,090  -->  00:06:30,590
And in each column there is gonna be either one or zero.
134

134

00:06:30,590  -->  00:06:33,680
So for example if we are in the France Column,
135

135

00:06:33,680  -->  00:06:36,130
it's gonna be one if the country is France
136

136

00:06:36,130  -->  00:06:38,940
and zero if the country is not France.
137

137

00:06:38,940  -->  00:06:41,490
So let's do this, let's create those dummy variables.
138

138

00:06:41,490  -->  00:06:42,970
To create those dummy variables,
139

139

00:06:42,970  -->  00:06:44,530
we're gonna use another class,
140

140

00:06:44,530  -->  00:06:48,730
because the labelencoder only encodes the values
141

141

00:06:48,730  -->  00:06:51,300
without bothering if there is order or not.
142

142

00:06:51,300  -->  00:06:54,070
So we're gonna use another class here,
143

143

00:06:54,070  -->  00:06:59,070
which is the OneHotEncoder class,
144

144

00:06:59,670  -->  00:07:00,827
cool name right?
145

145

00:07:00,827  -->  00:07:02,140
OneHotEncoder.
146

146

00:07:02,140  -->  00:07:03,350
Okay.
147

147

00:07:03,350  -->  00:07:05,450
Okay and as usual we're gonna create
148

148

00:07:05,450  -->  00:07:07,430
a onehotencoder object.
149

149

00:07:07,430  -->  00:07:11,400
so I'm going to call it onehotencoder equals,
150

150

00:07:11,400  -->  00:07:15,100
so that's the object and here we're gonna call the class
151

151

00:07:15,100  -->  00:07:17,277
OneHotEncoder with the capitals
152

152

00:07:17,277  -->  00:07:20,820
OneHotEncoder
153

153

00:07:20,820  -->  00:07:21,730
and parentheses.
154

154

00:07:21,730  -->  00:07:23,560
Because we're calling the class.
155

155

00:07:23,560  -->  00:07:25,933
And now let's inspect this class.
156

156

00:07:27,150  -->  00:07:30,660
So here I just type command and control plus I.
157

157

00:07:30,660  -->  00:07:32,500
Which means inspect.
158

158

00:07:32,500  -->  00:07:36,270
And if I put that below we have information
159

159

00:07:36,270  -->  00:07:38,660
about the OneHotEncoder class.
160

160

00:07:38,660  -->  00:07:42,070
Let's look at the parameters to see what we have to input.
161

161

00:07:42,070  -->  00:07:44,390
Okay the first parameter is n_values,
162

162

00:07:44,390  -->  00:07:46,180
so that's the number of values for feature.
163

163

00:07:46,180  -->  00:07:50,280
We don't really care about that, but an important parameter
164

164

00:07:50,280  -->  00:07:52,990
is the second one, categorical features.
165

165

00:07:52,990  -->  00:07:56,290
Specify what features are treated as categorical.
166

166

00:07:56,290  -->  00:07:58,890
So basically what this means is that we need to specify
167

167

00:07:58,890  -->  00:08:01,530
the index of the columns, that is the column
168

168

00:08:01,530  -->  00:08:04,210
of the categorical variable, which is the country column.
169

169

00:08:04,210  -->  00:08:08,030
It has index number zero, so here we are gonna input
170

170

00:08:08,030  -->  00:08:12,530
categorical_features equals,
171

171

00:08:12,530  -->  00:08:14,760
in bracket zero.
172

172

00:08:14,760  -->  00:08:15,890
Alright.
173

173

00:08:15,890  -->  00:08:18,150
So that way we specify which column
174

174

00:08:18,150  -->  00:08:21,390
we want to one hot encode the categories.
175

175

00:08:21,390  -->  00:08:23,460
Okay so now our object is ready,
176

176

00:08:23,460  -->  00:08:26,460
and now we need to fit it to our matrix X.
177

177

00:08:26,460  -->  00:08:28,210
So let's do this, it's really simple.
178

178

00:08:28,210  -->  00:08:30,200
It's kind of the same logic every time.
179

179

00:08:30,200  -->  00:08:35,020
We are gonna type X equals because we want to transform X,
180

180

00:08:35,020  -->  00:08:38,583
then we use our object onehotencoder.fit_transform
181

181

00:08:41,370  -->  00:08:44,580
then in parentheses we type X and we don't have to only
182

182

00:08:44,580  -->  00:08:47,080
take the first column of X because here we specified
183

183

00:08:47,080  -->  00:08:49,730
the zero index, so that's fine.
184

184

00:08:49,730  -->  00:08:53,653
And then we just need to add toarray and parentheses.
185

185

00:08:55,880  -->  00:08:59,810
Okay so that will one hot encode the variable X.
186

186

00:08:59,810  -->  00:09:02,180
And you will see exactly what it's going to do.
187

187

00:09:02,180  -->  00:09:05,010
Okay, so now we must not forget to reselect
188

188

00:09:05,010  -->  00:09:07,470
and execute this line because we imported a new library,
189

189

00:09:07,470  -->  00:09:11,100
which is the OneHotEncoder so execute.
190

190

00:09:11,100  -->  00:09:12,490
Okay.
191

191

00:09:12,490  -->  00:09:17,450
And now let's select these two lines and execute.
192

192

00:09:17,450  -->  00:09:18,330
Alright.
193

193

00:09:18,330  -->  00:09:20,520
And now let's have a look at X.
194

194

00:09:20,520  -->  00:09:21,973
I'm gonna type X here.
195

195

00:09:24,710  -->  00:09:29,290
Or okay so maybe it's better to look at it from here.
196

196

00:09:29,290  -->  00:09:32,190
Let's look at it from here, X, alright.
197

197

00:09:32,190  -->  00:09:33,450
I'm gonna change the format
198

198

00:09:33,450  -->  00:09:36,290
because I don't want all the decimals.
199

199

00:09:36,290  -->  00:09:38,090
So three is the number of decimals.
200

200

00:09:38,090  -->  00:09:41,470
So I'm gonna put zero here to have zero decimals.
201

201

00:09:41,470  -->  00:09:42,860
Let's click on okay.
202

202

00:09:42,860  -->  00:09:44,873
And here ait is, we have zero decimals.
203

203

00:09:46,570  -->  00:09:48,103
Let's open our dataset too.
204

204

00:09:49,130  -->  00:09:52,260
Okay so as I told you the first column here, country,
205

205

00:09:52,260  -->  00:09:54,590
was replaced by three columns,
206

206

00:09:54,590  -->  00:09:57,390
these, this column, this column and this column.
207

207

00:09:57,390  -->  00:09:59,110
And then we still have our two columns
208

208

00:09:59,110  -->  00:10:01,220
which is the age and the salary.
209

209

00:10:01,220  -->  00:10:03,880
So when I was explaining is that,
210

210

00:10:03,880  -->  00:10:06,490
this first column here corresponds to Frnace.
211

211

00:10:06,490  -->  00:10:10,010
This second column here corresponds to Germany.
212

212

00:10:10,010  -->  00:10:13,130
And this third column here corresponds to Spain.
213

213

00:10:13,130  -->  00:10:15,530
So here for example let's take the first line.
214

214

00:10:15,530  -->  00:10:16,980
We know that the first line
215

215

00:10:16,980  -->  00:10:19,960
that has index zero is the country France.
216

216

00:10:19,960  -->  00:10:22,560
And since the first observation is France,
217

217

00:10:22,560  -->  00:10:26,340
then that means that this first column here is gonna be one.
218

218

00:10:26,340  -->  00:10:28,830
because this corresponds to the France column.
219

219

00:10:28,830  -->  00:10:30,910
Then since the second column is Germany,
220

220

00:10:30,910  -->  00:10:32,350
then it's gonna be a zero here
221

221

00:10:32,350  -->  00:10:35,660
because the first observation is France and not Germany.
222

222

00:10:35,660  -->  00:10:38,150
And same for Spain the third column here is Spain.
223

223

00:10:38,150  -->  00:10:40,460
And it's a zero because the first observation
224

224

00:10:40,460  -->  00:10:42,123
is France and not Spain.
225

225

00:10:43,050  -->  00:10:45,940
And that is how you encode dummy variables,
226

226

00:10:45,940  -->  00:10:48,560
by making sure that the machine learning models
227

227

00:10:48,560  -->  00:10:53,180
don't attribute an order into the categorical variables.
228

228

00:10:53,180  -->  00:10:54,933
Okay so let's click on okay here.
229

229

00:10:56,080  -->  00:10:58,360
And now let's take care of the second variable
230

230

00:10:58,360  -->  00:11:01,400
which is the purchase one.
231

231

00:11:01,400  -->  00:11:04,870
And now be relieved, we won't have to use onehotencoder.
232

232

00:11:04,870  -->  00:11:06,650
we will just need to use labelencoder
233

233

00:11:06,650  -->  00:11:08,990
because since this is the dependent variable,
234

234

00:11:08,990  -->  00:11:10,510
the machine learning model will know
235

235

00:11:10,510  -->  00:11:12,990
that it's a category and that there is no order
236

236

00:11:12,990  -->  00:11:13,960
between the two.
237

237

00:11:13,960  -->  00:11:15,500
So for the purchase column here,
238

238

00:11:15,500  -->  00:11:18,670
which is the dependent variable we are only going to use
239

239

00:11:18,670  -->  00:11:21,930
labelencoder and that's what we're going to do.
240

240

00:11:21,930  -->  00:11:23,470
So we're gonna do it very quickly.
241

241

00:11:23,470  -->  00:11:27,520
I'm just going to copy this and paste it here.
242

242

00:11:27,520  -->  00:11:29,960
then we have to create a new object here.
243

243

00:11:29,960  -->  00:11:31,860
So we're gonna call it labelencoder_y.
244

244

00:11:32,810  -->  00:11:35,000
We cannot choose this object labelencoder_X
245

245

00:11:35,000  -->  00:11:38,430
because this was fitted to the X column here.
246

246

00:11:38,430  -->  00:11:41,180
So that's why we need to create a new object.
247

247

00:11:41,180  -->  00:11:44,730
And here we just need to replace the first column of X by Y.
248

248

00:11:44,730  -->  00:11:47,790
and same as here, Y.
249

249

00:11:47,790  -->  00:11:50,920
and let's not forget to replace X by Y here.
250

250

00:11:50,920  -->  00:11:52,000
And that's ready.
251

251

00:11:52,000  -->  00:11:54,620
We created our object of the LabelEncoder class
252

252

00:11:54,620  -->  00:11:57,960
that will be fitted to Y and that will transform y
253

253

00:11:57,960  -->  00:12:00,910
into an encoded variable vector.
254

254

00:12:00,910  -->  00:12:03,220
So let's select these two lines here.
255

255

00:12:03,220  -->  00:12:06,260
And press command and control enter to execute.
256

256

00:12:06,260  -->  00:12:07,400
Here it is.
257

257

00:12:07,400  -->  00:12:09,020
Now let's have a look at Y.
258

258

00:12:09,020  -->  00:12:11,400
Okay so let's open a dataset first.
259

259

00:12:11,400  -->  00:12:13,720
You see that in the dataset the purchase column
260

260

00:12:13,720  -->  00:12:15,820
has the two categories yes and no.
261

261

00:12:15,820  -->  00:12:17,940
And now if we look at our vector Y,
262

262

00:12:17,940  -->  00:12:20,290
it is encoded and the LabelEncoder class
263

263

00:12:20,290  -->  00:12:24,410
attributed zero to no, and one to yes.
264

264

00:12:24,410  -->  00:12:25,390
Perfect.
265

265

00:12:25,390  -->  00:12:26,386
We're all good.
266

266

00:12:26,386  -->  00:12:30,540
We encoded our categorical data and now you know everything
267

267

00:12:30,540  -->  00:12:34,400
that there is to know about encoding categorical data.
268

268

00:12:34,400  -->  00:12:35,840
So Congratulations.
269

269

00:12:35,840  -->  00:12:38,010
I know this was quite a long tutorial,
270

270

00:12:38,010  -->  00:12:40,540
but we almost did the most difficult part.
271

271

00:12:40,540  -->  00:12:43,500
We're approaching soon the fun and exciting parts
272

272

00:12:43,500  -->  00:12:45,340
about making models.
273

273

00:12:45,340  -->  00:12:46,620
So we are almost there.
274

274

00:12:46,620  -->  00:12:48,730
Hang on for one or two more tutorials,
275

275

00:12:48,730  -->  00:12:51,080
and this is gonna get very exciting.
276

276

00:12:51,080  -->  00:12:52,660
Thank you for watching this tutorial
277

277

00:12:52,660  -->  00:12:55,310
and I look forward to seeing you in the next tutorial.
278

278

00:12:55,310  -->  00:12:57,153
Until then enjoy machine learning.
