1
1

00:00:00,380  -->  00:00:01,770
<v Instructor>Hello and welcome</v>
2

2

00:00:01,770  -->  00:00:05,240
to this very important tutorial, where we'll get more
3

3

00:00:05,240  -->  00:00:07,620
at the heart of the Recurrent Neural Network,
4

4

00:00:07,620  -->  00:00:08,750
because that's where we have
5

5

00:00:08,750  -->  00:00:12,050
to create a special data structure with,
6

6

00:00:12,050  -->  00:00:15,570
as you can see, 60 timesteps and one output.
7

7

00:00:15,570  -->  00:00:18,210
So first, let me explain what it means.
8

8

00:00:18,210  -->  00:00:23,210
Okay, so 60 timesteps means that at each time T,
9

9

00:00:23,380  -->  00:00:25,140
the RNN is going to look
10

10

00:00:25,140  -->  00:00:28,720
at the 60 stock prices before time T,
11

11

00:00:28,720  -->  00:00:32,620
that is the stock prices between 60 days before time T
12

12

00:00:32,620  -->  00:00:35,530
and time T, and based on the trends,
13

13

00:00:35,530  -->  00:00:39,006
it is capturing during these 60 previous timesteps,
14

14

00:00:39,006  -->  00:00:41,800
it will try to predict the next output.
15

15

00:00:41,800  -->  00:00:45,490
So 60 timesteps of the past information
16

16

00:00:45,490  -->  00:00:48,060
from which our RNN is gonna try to learn
17

17

00:00:48,060  -->  00:00:50,310
and understand some correlations,
18

18

00:00:50,310  -->  00:00:53,310
or some trends, and based on its understanding,
19

19

00:00:53,310  -->  00:00:55,620
it's going to try to predict the next output.
20

20

00:00:55,620  -->  00:00:59,260
That is, the stock price at time T plus one.
21

21

00:00:59,260  -->  00:01:01,490
So that's very important to understand.
22

22

00:01:01,490  -->  00:01:05,200
60 is a number that I experimented,
23

23

00:01:05,200  -->  00:01:07,270
trying different number of time steps.
24

24

00:01:07,270  -->  00:01:10,260
I tried one time step first, which was completely stupid,
25

25

00:01:10,260  -->  00:01:12,250
because it led to overfitting.
26

26

00:01:12,250  -->  00:01:14,500
The model was not learning anything.
27

27

00:01:14,500  -->  00:01:17,220
Then 20 timesteps, which was not enough
28

28

00:01:17,220  -->  00:01:20,950
to be able to capture some trends, then 30, 40,
29

29

00:01:20,950  -->  00:01:23,490
and eventually the best number of timesteps
30

30

00:01:23,490  -->  00:01:26,050
I ended up with was 60.
31

31

00:01:26,050  -->  00:01:28,300
And the 60 timesteps correspond of course
32

32

00:01:28,300  -->  00:01:31,210
to the 60 previous financial days,
33

33

00:01:31,210  -->  00:01:34,150
and since there 20 financial days in one month,
34

34

00:01:34,150  -->  00:01:38,060
well 60 timesteps correspond to three months.
35

35

00:01:38,060  -->  00:01:40,090
So that means that each day we're gonna look
36

36

00:01:40,090  -->  00:01:42,910
at the three previous month to try to predict
37

37

00:01:42,910  -->  00:01:45,040
the stock price the next day.
38

38

00:01:45,040  -->  00:01:48,280
So we're gonna have 60 timesteps and one output,
39

39

00:01:48,280  -->  00:01:51,400
which will be the stock price at time T plus one.
40

40

00:01:51,400  -->  00:01:53,180
So make sure to understand it clearly.
41

41

00:01:53,180  -->  00:01:56,020
You will understand it even more, even better,
42

42

00:01:56,020  -->  00:01:57,390
when we create this data structure
43

43

00:01:57,390  -->  00:02:00,750
because I'm gonna show it to you in Variable Explorer,
44

44

00:02:00,750  -->  00:02:04,830
but now if you're ready, let's create this data structure.
45

45

00:02:04,830  -->  00:02:07,000
So the first thing we need to do
46

46

00:02:07,000  -->  00:02:09,940
is create two separate entities.
47

47

00:02:09,940  -->  00:02:11,520
The first entity we're gonna create
48

48

00:02:11,520  -->  00:02:15,440
is gonna be X_train which will be the input
49

49

00:02:15,440  -->  00:02:16,580
of the neural network,
50

50

00:02:16,580  -->  00:02:19,480
and then the second entity will be y_train,
51

51

00:02:19,480  -->  00:02:21,540
which will contain the output.
52

52

00:02:21,540  -->  00:02:23,610
So basically for each observation,
53

53

00:02:23,610  -->  00:02:25,410
that is for each financial day,
54

54

00:02:25,410  -->  00:02:29,700
X_train will contain the 60 previews stock prices,
55

55

00:02:29,700  -->  00:02:32,240
before that financial day, and y_train
56

56

00:02:32,240  -->  00:02:35,720
will contain the stock price the next financial day.
57

57

00:02:35,720  -->  00:02:38,070
That's exactly what we need to create right now,
58

58

00:02:38,070  -->  00:02:39,500
but it's a special data structure
59

59

00:02:39,500  -->  00:02:42,840
because of course we need to do it for every time T.
60

60

00:02:42,840  -->  00:02:46,470
So let's initialize these two separate entities,
61

61

00:02:46,470  -->  00:02:50,093
X_train and y_train, and we are going
62

62

00:02:51,370  -->  00:02:54,690
to initialize them as empty list,
63

63

00:02:54,690  -->  00:02:58,360
which you can do with a simple square brackets.
64

64

00:02:58,360  -->  00:03:00,480
So, X_train equal square brackets,
65

65

00:03:00,480  -->  00:03:03,980
and y_train equals square brackets as well.
66

66

00:03:03,980  -->  00:03:06,680
All right, so we have now two empty lists.
67

67

00:03:06,680  -->  00:03:08,380
All right, and then as you can imagine,
68

68

00:03:08,380  -->  00:03:10,530
when we do some initializations like that,
69

69

00:03:10,530  -->  00:03:13,730
well the next step is naturally a for loop,
70

70

00:03:13,730  -->  00:03:16,900
because we're gonna populate these two entities, X_train
71

71

00:03:16,900  -->  00:03:18,520
and y_train with what we want,
72

72

00:03:18,520  -->  00:03:22,000
that is the 60 preview stock prices in X_train,
73

73

00:03:22,000  -->  00:03:24,780
and the next stock price in y_train.
74

74

00:03:24,780  -->  00:03:27,130
So I'm starting a for loop here,
75

75

00:03:27,130  -->  00:03:32,130
for i in range, and now focus on this one.
76

76

00:03:32,560  -->  00:03:35,640
It's actually not obvious at the beginning,
77

77

00:03:35,640  -->  00:03:39,550
well since we're gonna get at each time T
78

78

00:03:39,550  -->  00:03:43,730
the 60 preview stock prices, well we can only start doing
79

79

00:03:43,730  -->  00:03:48,600
this from the 60th stock price of our dataset.
80

80

00:03:48,600  -->  00:03:53,600
That is, the stock price of the 60th financial day of 2012,
81

81

00:03:54,810  -->  00:03:58,720
because we're gonna get the 60 previews stock prices
82

82

00:03:58,720  -->  00:04:02,620
before that stock price, and therefore I need to start
83

83

00:04:02,620  -->  00:04:06,350
the for loop with 60, because then for each i,
84

84

00:04:06,350  -->  00:04:09,110
which is the index of the stock price observation,
85

85

00:04:09,110  -->  00:04:13,260
I'm gonna get the range from i minus 60 to i,
86

86

00:04:13,260  -->  00:04:16,870
which exactly contains the 60 preview stock prices
87

87

00:04:16,870  -->  00:04:18,920
before the stock price at time T.
88

88

00:04:18,920  -->  00:04:21,590
So that's why I'm starting the range at 60,
89

89

00:04:21,590  -->  00:04:23,360
and then good news, the upper bound
90

90

00:04:23,360  -->  00:04:25,550
is much more natural and easy to find.
91

91

00:04:25,550  -->  00:04:29,210
It's of course the last index of our observation,
92

92

00:04:29,210  -->  00:04:34,210
that is 1,257, but it's not 57, it's actually 58,
93

93

00:04:36,650  -->  00:04:40,260
because remember the upper bound is excluded in a range.
94

94

00:04:40,260  -->  00:04:43,110
So we have to go up to 1258.
95

95

00:04:43,110  -->  00:04:45,770
All right, so let's put that upper bound
96

96

00:04:45,770  -->  00:04:48,670
for i in range 60 to 1258.
97

97

00:04:51,800  -->  00:04:55,760
There we go, colon, and now we can start the for loop.
98

98

00:04:55,760  -->  00:04:57,500
All right, and now it's gonna be easy.
99

99

00:04:57,500  -->  00:04:59,110
Let's start with X_train.
100

100

00:04:59,110  -->  00:05:01,690
Right now, X_train is an empty list.
101

101

00:05:01,690  -->  00:05:02,780
So of course what we wanna do
102

102

00:05:02,780  -->  00:05:06,030
is append some elements into X_train,
103

103

00:05:06,030  -->  00:05:09,480
and to do that, well naturally we take X_train
104

104

00:05:10,400  -->  00:05:13,020
and then dot, and then we use the append function,
105

105

00:05:13,020  -->  00:05:14,090
which is the first function here
106

106

00:05:14,090  -->  00:05:16,590
as you can see, so just press Enter.
107

107

00:05:16,590  -->  00:05:20,220
Append to, depend what we want include X_train.
108

108

00:05:20,220  -->  00:05:23,290
And what do we want to append inside X_train?
109

109

00:05:23,290  -->  00:05:28,290
Well, we want to append the 60 previews stock prices
110

110

00:05:28,440  -->  00:05:31,060
before the stock price of index i,
111

111

00:05:31,060  -->  00:05:34,130
that is the stock price at the ith financial day,
112

112

00:05:34,130  -->  00:05:38,493
and so to get them, we're gonna get our training set.
113

113

00:05:39,520  -->  00:05:44,100
Be careful the scaled one, so training_set_scaled,
114

114

00:05:44,100  -->  00:05:46,710
and in this training set scaled,
115

115

00:05:46,710  -->  00:05:49,800
we're gonna take the 60 preview stock prices
116

116

00:05:49,800  -->  00:05:53,500
before the ith financial day, that is, the range of indexes
117

117

00:05:53,500  -->  00:05:58,500
from i minus 60 to i, all right?
118

118

00:05:59,550  -->  00:06:02,100
So for example, let's say that i equal 60,
119

119

00:06:02,100  -->  00:06:03,970
because I will start at 60,
120

120

00:06:03,970  -->  00:06:05,810
that will be the first value of i.
121

121

00:06:05,810  -->  00:06:09,440
Well, when i equals 60, then we will get
122

122

00:06:09,440  -->  00:06:12,350
the range of stock prices from 60 minus 60,
123

123

00:06:12,350  -->  00:06:14,760
which is zero, that is the first stock price,
124

124

00:06:14,760  -->  00:06:16,660
to i, that is 60.
125

125

00:06:16,660  -->  00:06:20,530
And therefore, we will get the 60 first stock prices
126

126

00:06:20,530  -->  00:06:24,380
from this one to this one
127

127

00:06:24,380  -->  00:06:27,030
because we are going up to i, which is 60,
128

128

00:06:27,030  -->  00:06:28,630
but the upper bound is excluded,
129

129

00:06:28,630  -->  00:06:29,730
so we are getting this one,
130

130

00:06:29,730  -->  00:06:33,140
but that's indeed the 60 preview stock prices,
131

131

00:06:33,140  -->  00:06:35,660
because we are starting at index zero,
132

132

00:06:35,660  -->  00:06:39,340
and then, the output y_train will contain
133

133

00:06:39,340  -->  00:06:41,990
this stock price, because it will be the stock price
134

134

00:06:41,990  -->  00:06:46,990
that the RNN will learn to predict based
135

135

00:06:47,560  -->  00:06:49,750
on what it observed previously
136

136

00:06:49,750  -->  00:06:51,330
with the 60 preview stock prices.
137

137

00:06:51,330  -->  00:06:56,330
That is all the ones from here to the top, this one.
138

138

00:06:56,650  -->  00:07:00,770
All right, so that's exactly the idea of the RNN.
139

139

00:07:00,770  -->  00:07:03,110
It is memorizing what's happening
140

140

00:07:03,110  -->  00:07:06,160
in the 60 previous timesteps to predict
141

141

00:07:06,160  -->  00:07:09,470
the next value at time T plus one,
142

142

00:07:09,470  -->  00:07:12,070
the next stock price at time T plus one.
143

143

00:07:12,070  -->  00:07:14,370
All right, and now be careful we selected
144

144

00:07:14,370  -->  00:07:17,710
the right lines for X_train, but we need to specify
145

145

00:07:17,710  -->  00:07:19,930
the column and that's totally obvious.
146

146

00:07:19,930  -->  00:07:22,820
We just have one column in training set scaled,
147

147

00:07:22,820  -->  00:07:24,930
and that is the column of index zero.
148

148

00:07:24,930  -->  00:07:29,430
So we simply need to add here comma and zero.
149

149

00:07:29,430  -->  00:07:33,480
All right, so now I think we have the right X_train.
150

150

00:07:33,480  -->  00:07:36,910
It will, at each time there is, at each stock price,
151

151

00:07:36,910  -->  00:07:39,940
append the 60 preview stock prices,
152

152

00:07:39,940  -->  00:07:43,060
and you will have a clear look at this data structure
153

153

00:07:43,060  -->  00:07:45,670
in the end, of course, when I execute.
154

154

00:07:45,670  -->  00:07:49,702
All right, so now let's do the same for y_train.
155

155

00:07:49,702  -->  00:07:51,390
So y_train is gonna be much more easy
156

156

00:07:51,390  -->  00:07:53,550
because we will simply need to include
157

157

00:07:53,550  -->  00:07:56,240
the stock price at time T plus one,
158

158

00:07:56,240  -->  00:07:58,750
and therefore we just need to do the same here.
159

159

00:07:58,750  -->  00:08:03,750
We need to say y_train, then take the append function,
160

160

00:08:05,530  -->  00:08:08,960
and inside of which we need to input
161

161

00:08:08,960  -->  00:08:10,910
the stock price at time T plus one.
162

162

00:08:10,910  -->  00:08:14,060
And therefore, let's copy this to be more efficient,
163

163

00:08:14,060  -->  00:08:16,120
because this stock price of time T plus one
164

164

00:08:16,120  -->  00:08:17,350
is of course going to be taken
165

165

00:08:17,350  -->  00:08:20,690
from training set scaled, so training set scaled.
166

166

00:08:20,690  -->  00:08:23,790
And now what indexes do we need to take?
167

167

00:08:23,790  -->  00:08:25,940
Well for the column it's the same, it's zero,
168

168

00:08:25,940  -->  00:08:28,810
but then for the line, the observation line,
169

169

00:08:28,810  -->  00:08:30,900
what is it going to be according to you?
170

170

00:08:30,900  -->  00:08:34,053
Is it going to be i, or i plus one?
171

171

00:08:35,200  -->  00:08:36,980
That's a tricky one, and the answer
172

172

00:08:36,980  -->  00:08:40,320
is i, because if we take the same example
173

173

00:08:40,320  -->  00:08:43,780
where i is equal to 60, well remember
174

174

00:08:43,780  -->  00:08:45,640
X_train will contain all the stock prices
175

175

00:08:45,640  -->  00:08:50,640
from zero to 59, because the upper bound was excluded,
176

176

00:08:50,660  -->  00:08:52,310
but then, what we want to predict
177

177

00:08:52,310  -->  00:08:55,400
then based on these 60 preview stock prices,
178

178

00:08:55,400  -->  00:09:00,050
is the stock price at time T plus one, which is 60,
179

179

00:09:00,050  -->  00:09:02,290
and therefore, what we need to input here,
180

180

00:09:02,290  -->  00:09:04,870
is i, and not i plus one.
181

181

00:09:04,870  -->  00:09:05,703
All right,
182

182

00:09:05,703  -->  00:09:07,670
and that's just because of the classic Python phenomenon
183

183

00:09:07,670  -->  00:09:09,450
that the indexes start at zero,
184

184

00:09:09,450  -->  00:09:14,100
so everything is non-intuitively shifted by one,
185

185

00:09:14,100  -->  00:09:15,890
and that's why we have to get 60.
186

186

00:09:15,890  -->  00:09:18,370
All right, so okay,
187

187

00:09:18,370  -->  00:09:21,910
now we have the 60 preview stock prices in X_train,
188

188

00:09:21,910  -->  00:09:25,620
and the stock price at time T plus one in y_train.
189

189

00:09:25,620  -->  00:09:28,670
Perfect, we have the heart of our structure.
190

190

00:09:28,670  -->  00:09:30,700
And now, the important thing is,
191

191

00:09:30,700  -->  00:09:33,620
remember I told you that we first made the search,
192

192

00:09:33,620  -->  00:09:36,930
and then we'll take care of getting the right NumPy array.
193

193

00:09:36,930  -->  00:09:38,990
While that's exactly what we're gonna do now.
194

194

00:09:38,990  -->  00:09:42,760
So far, as I told you, X_train and y_train are lists
195

195

00:09:42,760  -->  00:09:45,490
and we need to make them NumPy arrays again,
196

196

00:09:45,490  -->  00:09:46,980
so that they can be accepted
197

197

00:09:46,980  -->  00:09:49,750
by our future Recurrent Neural Network.
198

198

00:09:49,750  -->  00:09:51,870
And so to do this, well it's actually pretty simple.
199

199

00:09:51,870  -->  00:09:56,347
We need to take X_train and y_train
200

200

00:09:57,570  -->  00:10:01,160
and then equals, then we're gonna use NumPy of course,
201

201

00:10:01,160  -->  00:10:03,667
because we are gonna create our NumPy arrays with NumPy,
202

202

00:10:03,667  -->  00:10:08,667
and NumPy has a shortcut np, so NumPy dot array.
203

203

00:10:08,710  -->  00:10:11,990
We use the array function of NumPy
204

204

00:10:11,990  -->  00:10:15,950
that does exactly what we want, that is create NumPy arrays.
205

205

00:10:15,950  -->  00:10:18,800
And so now, according to you, what do we need to do?
206

206

00:10:18,800  -->  00:10:22,060
Well we simply need to input in this array function
207

207

00:10:22,060  -->  00:10:25,390
the object we want to make as a NumPy array.
208

208

00:10:25,390  -->  00:10:27,663
And so our first object is X_train.
209

209

00:10:28,840  -->  00:10:31,560
So with this, X_train will become a NumPy array,
210

210

00:10:31,560  -->  00:10:34,050
and now we need to do the same for y_train,
211

211

00:10:34,050  -->  00:10:38,250
so I'm copying this and pasting it here,
212

212

00:10:38,250  -->  00:10:41,800
and replacing of course X_train by y_train.
213

213

00:10:41,800  -->  00:10:45,730
And there we go, we now have our data structure
214

214

00:10:45,730  -->  00:10:47,930
in the right format.
215

215

00:10:47,930  -->  00:10:49,130
So we're gonna have a look
216

216

00:10:49,130  -->  00:10:51,760
at this special data structure right now.
217

217

00:10:51,760  -->  00:10:56,760
So I'm going to select these lines of code and execute.
218

218

00:10:56,880  -->  00:10:59,050
Perfect, everything looks fine.
219

219

00:10:59,050  -->  00:11:01,020
So, now, let's have a look
220

220

00:11:01,020  -->  00:11:03,460
at first X_train, the tricky one.
221

221

00:11:03,460  -->  00:11:07,030
So as you can see this is a special data structure.
222

222

00:11:07,030  -->  00:11:09,580
So, to make things clear, the first line
223

223

00:11:09,580  -->  00:11:14,580
of observation here corresponds to time T equals 60.
224

224

00:11:14,710  -->  00:11:16,730
That is, it corresponds to the stock price
225

225

00:11:16,730  -->  00:11:21,730
at the 60th financial day of our training dataset.
226

226

00:11:22,060  -->  00:11:24,560
And all these values that you see here,
227

227

00:11:24,560  -->  00:11:29,560
are the previous 60 stock prices before that time 60,
228

228

00:11:29,590  -->  00:11:33,610
before that stock price a the 60th financial day.
229

229

00:11:33,610  -->  00:11:36,990
All right, as you can see there are 59 values here.
230

230

00:11:36,990  -->  00:11:40,100
And then, if we take the first line,
231

231

00:11:40,100  -->  00:11:42,050
that is the observation of index one,
232

232

00:11:42,050  -->  00:11:44,300
well that corresponds to the stock price
233

233

00:11:44,300  -->  00:11:48,780
at the 61st financial day of our training dataset,
234

234

00:11:48,780  -->  00:11:52,000
and all these stock prices are the preview stock
235

235

00:11:52,000  -->  00:11:56,870
before that 61st stock price of our training dataset.
236

236

00:11:56,870  -->  00:11:57,800
All right, is that clear?
237

237

00:11:57,800  -->  00:12:00,580
And so you can notice some same values
238

238

00:12:00,580  -->  00:12:01,580
in different lines of course,
239

239

00:12:01,580  -->  00:12:04,930
because since here we're getting the 60 stock prices
240

240

00:12:04,930  -->  00:12:08,070
before T equals 60, and here, the 60 stock prices
241

241

00:12:08,070  -->  00:12:10,620
before T equals 61, well of course,
242

242

00:12:10,620  -->  00:12:14,060
we have 59 stock prices in common.
243

243

00:12:14,060  -->  00:12:15,450
And that's totally normal,
244

244

00:12:15,450  -->  00:12:17,930
that's because we have this sliding window
245

245

00:12:17,930  -->  00:12:22,870
of size 60 sliding with a stride of one at each observation,
246

246

00:12:22,870  -->  00:12:25,350
that is from one observation to the next.
247

247

00:12:25,350  -->  00:12:27,510
So that's totally normal, but that's the approach
248

248

00:12:27,510  -->  00:12:30,390
that's the data structure we need to create
249

249

00:12:30,390  -->  00:12:32,550
as the input of a Recurrent Neural Network.
250

250

00:12:32,550  -->  00:12:35,180
But it's not over, you will see that in the next step
251

251

00:12:35,180  -->  00:12:39,370
we will need to add a new dimension to this structure,
252

252

00:12:39,370  -->  00:12:41,770
and you will see that it is even more powerful,
253

253

00:12:41,770  -->  00:12:43,770
because you will realize that to predict
254

254

00:12:43,770  -->  00:12:45,050
the Google stock price,
255

255

00:12:45,050  -->  00:12:47,820
you don't have to do it with only one stock price,
256

256

00:12:47,820  -->  00:12:49,960
which is the previews Google stock price,
257

257

00:12:49,960  -->  00:12:53,410
but with several other indicators.
258

258

00:12:53,410  -->  00:12:56,410
And these other indicators can be some other columns
259

259

00:12:56,410  -->  00:12:59,520
of our dataset, like for example the close column,
260

260

00:12:59,520  -->  00:13:04,520
or the volumes, or even some other different stock prices
261

261

00:13:05,090  -->  00:13:08,010
to which you could believe have some correlations
262

262

00:13:08,010  -->  00:13:09,650
with the Google stock price.
263

263

00:13:09,650  -->  00:13:12,200
But we won't do this in this implementation,
264

264

00:13:12,200  -->  00:13:13,970
we'll just use the Google stock price,
265

265

00:13:13,970  -->  00:13:17,420
but you will see that with this new structure
266

266

00:13:17,420  -->  00:13:19,370
we're gonna create in the next tutorial,
267

267

00:13:19,370  -->  00:13:23,370
you will be able to include some other indicators
268

268

00:13:23,370  -->  00:13:25,410
thanks to this new dimension.
269

269

00:13:25,410  -->  00:13:27,920
I will show you this again in the next tutorial,
270

270

00:13:27,920  -->  00:13:31,830
but so far let me just show you y_train,
271

271

00:13:31,830  -->  00:13:34,820
which is much more simple to visualize.
272

272

00:13:34,820  -->  00:13:38,570
It contains, of course, the stock price at time T plus one,
273

273

00:13:38,570  -->  00:13:41,623
so for example, if we take X_train again,
274

274

00:13:43,030  -->  00:13:45,250
well here all the stock prices
275

275

00:13:45,250  -->  00:13:50,250
are the 60 preview stock prices before T equal 60,
276

276

00:13:50,350  -->  00:13:53,750
and based on all the stock prices of this line,
277

277

00:13:53,750  -->  00:13:55,970
we will train our Recurrent Neural Network
278

278

00:13:55,970  -->  00:13:58,310
to predict the stock price at time T plus one,
279

279

00:13:58,310  -->  00:14:00,190
which is exactly this one.
280

280

00:14:00,190  -->  00:14:03,940
As you can see, this is the stock price at time T plus one.
281

281

00:14:03,940  -->  00:14:05,620
All right, so that's the idea.
282

282

00:14:05,620  -->  00:14:06,690
I hope it's clear.
283

283

00:14:06,690  -->  00:14:09,090
Make sure to understand what's going on here,
284

284

00:14:09,090  -->  00:14:10,200
because then in the next tutorial
285

285

00:14:10,200  -->  00:14:12,220
we will add even more complexity
286

286

00:14:12,220  -->  00:14:16,000
as you understood by adding this new dimension.
287

287

00:14:16,000  -->  00:14:17,650
All right, so perfect.
288

288

00:14:17,650  -->  00:14:21,220
Let's close this, and now let's move on to the next step,
289

289

00:14:21,220  -->  00:14:23,413
and until then, enjoy deep learning.
