1
1

00:00:00,210  -->  00:00:02,283
<v Instructor>Hello and welcome to this python tutorial</v>
2

2

00:00:02,283  -->  00:00:05,480
We just trained our self-organizing map
3

3

00:00:05,480  -->  00:00:07,650
and now we're ready to visualize the results,
4

4

00:00:07,650  -->  00:00:10,196
that is, to plot the self organizing map itself.
5

5

00:00:10,196  -->  00:00:12,880
So, what we are about to see is
6

6

00:00:12,880  -->  00:00:14,705
clearly there's two dimensional grid
7

7

00:00:14,705  -->  00:00:17,480
that will contain all the final winning nodes
8

8

00:00:17,480  -->  00:00:19,150
and for each of these winning nodes
9

9

00:00:19,150  -->  00:00:21,444
we will get what is most important for us
10

10

00:00:21,444  -->  00:00:25,389
that is, the MID; the Mean Interneuron Distance.
11

11

00:00:25,389  -->  00:00:28,778
And I remind that the MID of a specific winning node
12

12

00:00:28,778  -->  00:00:30,820
is the mean of the distances
13

13

00:00:30,820  -->  00:00:33,520
of all the neurons around the winning node
14

14

00:00:33,520  -->  00:00:35,280
inside a neighborhood that we defined,
15

15

00:00:35,280  -->  00:00:36,670
thanks to sigma here,
16

16

00:00:36,670  -->  00:00:38,800
which is the radius of this neighborhood.
17

17

00:00:38,800  -->  00:00:41,339
And so basically the higher is the MID
18

18

00:00:41,339  -->  00:00:44,200
Then the more the winning node will be far away
19

19

00:00:44,200  -->  00:00:45,570
from it's neighbors.
20

20

00:00:45,570  -->  00:00:46,840
Inside a neighborhood.
21

21

00:00:46,840  -->  00:00:48,970
And therefore the higher is the MID,
22

22

00:00:48,970  -->  00:00:51,420
the more the winning node is an outlier.
23

23

00:00:51,420  -->  00:00:52,480
And since in some way
24

24

00:00:52,480  -->  00:00:54,640
the majority of the winning nodes represent
25

25

00:00:54,640  -->  00:00:56,041
the rules that are respected.
26

26

00:00:56,041  -->  00:00:59,090
Well on that line you're far from this majority
27

27

00:00:59,090  -->  00:01:01,675
of neurons, is therefore far from the general rules.
28

28

00:01:01,675  -->  00:01:04,729
And that is exactly how we will detect the outliers
29

29

00:01:04,729  -->  00:01:05,860
that is this the frauds.
30

30

00:01:05,860  -->  00:01:08,292
Because for each neuron we will get the MID, so we will
31

31

00:01:08,292  -->  00:01:10,955
simply need to take the winning nodes
32

32

00:01:10,955  -->  00:01:12,496
that have the highest MID.
33

33

00:01:12,496  -->  00:01:15,500
And, we're not going to look at figures, we're not
34

34

00:01:15,500  -->  00:01:17,879
going to compare figures, we're going to use colors.
35

35

00:01:17,879  -->  00:01:21,963
That means the winning notes will be colored by different
36

36

00:01:21,963  -->  00:01:24,120
colors in such a way that the larger is the MID, the
37

37

00:01:24,120  -->  00:01:26,220
closer to white the color will be.
38

38

00:01:26,220  -->  00:01:28,336
And so now lets start building this map.
39

39

00:01:28,336  -->  00:01:32,360
So, will we need specific functions to do this because
40

40

00:01:32,360  -->  00:01:34,730
will not use matplotlib
41

41

00:01:34,730  -->  00:01:36,250
Because the plot we're about to make is
42

42

00:01:36,250  -->  00:01:37,750
actually quite specific.
43

43

00:01:37,750  -->  00:01:39,740
You know, we're not plotting a classic graph,
44

44

00:01:39,740  -->  00:01:41,307
like a histogram or a curve.
45

45

00:01:41,307  -->  00:01:44,360
We're building a self-organizing map, and therefore
46

46

00:01:44,360  -->  00:01:46,280
in some way we're gonna make it from scratch.
47

47

00:01:46,280  -->  00:01:48,150
So, the functions will we use,
48

48

00:01:48,150  -->  00:01:50,083
we will import them from pylab.
49

49

00:01:51,065  -->  00:01:56,065
And these functions are bone, pcolor, colorbar,
50

50

00:01:58,832  -->  00:02:03,420
plot and show.
51

51

00:02:03,420  -->  00:02:05,430
No worries you are going to understand what each
52

52

00:02:05,430  -->  00:02:07,040
of these functions will do.
53

53

00:02:07,040  -->  00:02:09,153
So first let's import all this.
54

54

00:02:09,153  -->  00:02:10,350
Done.
55

55

00:02:10,350  -->  00:02:12,342
And now let's start making the map.
56

56

00:02:12,342  -->  00:02:15,040
So first we need to initialize the figure,
57

57

00:02:15,040  -->  00:02:17,685
that this is the window that will contain the map.
58

58

00:02:17,685  -->  00:02:21,762
And to do this we use the bone function
59

59

00:02:21,762  -->  00:02:25,150
so I'll show you what it does, if I execute this
60

60

00:02:26,103  -->  00:02:28,414
we get a white window without anything in it
61

61

00:02:28,414  -->  00:02:30,582
because we just initialized the window
62

62

00:02:30,582  -->  00:02:32,117
that will contain the map.
63

63

00:02:32,117  -->  00:02:35,764
Okay, so now lets move on to the next step
64

64

00:02:35,764  -->  00:02:37,650
First, what we are gonna do
65

65

00:02:37,650  -->  00:02:40,160
is put the different winning nodes
66

66

00:02:40,160  -->  00:02:41,030
on the map.
67

67

00:02:41,030  -->  00:02:42,260
And how are we going to do that?
68

68

00:02:42,260  -->  00:02:44,280
Well in fact we are going to add on the map
69

69

00:02:44,280  -->  00:02:46,546
the information of the Mean Interneuron Distance
70

70

00:02:46,546  -->  00:02:48,550
for all the winning nodes
71

71

00:02:48,550  -->  00:02:50,658
that the self-organizing map identified.
72

72

00:02:50,658  -->  00:02:52,563
And we're not going to add the figures
73

73

00:02:52,563  -->  00:02:54,906
of all these Mean Interneuron Distances
74

74

00:02:54,906  -->  00:02:57,056
instead we will use colors.
75

75

00:02:57,056  -->  00:03:00,164
Different colors corresponding to the different range values
76

76

00:03:00,164  -->  00:03:02,407
of the Mean Interneuron Distances.
77

77

00:03:02,407  -->  00:03:05,691
And to do this we are going to use the pcolor function,
78

78

00:03:05,691  -->  00:03:08,900
and inside this pcolor function we're going to add
79

79

00:03:08,900  -->  00:03:11,232
all the values of the Mean Interneuron Distances
80

80

00:03:11,232  -->  00:03:13,773
for all the winning nodes of our self-organizing map.
81

81

00:03:13,773  -->  00:03:17,370
And to get these mean distances,
82

82

00:03:17,370  -->  00:03:19,110
well we have a specific method for that,
83

83

00:03:19,110  -->  00:03:21,600
it's Distance Map Method.
84

84

00:03:21,600  -->  00:03:23,380
So that's why now we're going to take our
85

85

00:03:23,380  -->  00:03:25,106
object som then add a dot,
86

86

00:03:25,106  -->  00:03:26,638
and now we use this method.
87

87

00:03:26,638  -->  00:03:30,654
Which is distance underscore map,
88

88

00:03:30,654  -->  00:03:34,730
parenthesis, and in fact this Distance-Map Method
89

89

00:03:34,730  -->  00:03:37,169
will return all the Mean Interneuron Distances
90

90

00:03:37,169  -->  00:03:38,800
in one matrix.
91

91

00:03:38,800  -->  00:03:42,340
So this will return the matrix of all these distances
92

92

00:03:42,340  -->  00:03:43,640
for all the winning nodes.
93

93

00:03:43,640  -->  00:03:45,610
And now, just to get things in the right order
94

94

00:03:45,610  -->  00:03:47,020
for the pcolor function,
95

95

00:03:47,020  -->  00:03:49,780
we just need to take the transpose of this matrix
96

96

00:03:49,780  -->  00:03:51,680
returned by the Distance Map Method.
97

97

00:03:51,680  -->  00:03:54,700
And to take the transpose, we just need to add here a dot
98

98

00:03:54,700  -->  00:03:56,100
and then capital T.
99

99

00:03:56,100  -->  00:04:00,016
That will take the transpose of this MID matrix.
100

100

00:04:00,016  -->  00:04:03,730
So, right now we can have a look at what we just did
101

101

00:04:03,730  -->  00:04:05,811
actually if we select these two lines
102

102

00:04:05,811  -->  00:04:10,013
and execute, well we get the self-organizing map.
103

103

00:04:10,013  -->  00:04:12,590
With all the different colors corresponding
104

104

00:04:12,590  -->  00:04:14,611
to the Mean Interneuron Distances,
105

105

00:04:14,611  -->  00:04:17,310
but now we would like to add one more information.
106

106

00:04:17,310  -->  00:04:20,150
We would like to see if the white color
107

107

00:04:20,150  -->  00:04:23,306
corresponds to a high MID or a low MID.
108

108

00:04:23,306  -->  00:04:24,900
And same for the dark colors,
109

109

00:04:24,900  -->  00:04:29,007
do they correspond to the lowest MIDs or the highest MIDs?
110

110

00:04:29,007  -->  00:04:31,747
Well to know this for sure it's good to add a legend
111

111

00:04:31,747  -->  00:04:33,650
and this is what we're going to do right now
112

112

00:04:33,650  -->  00:04:35,240
with the next line of code.
113

113

00:04:35,240  -->  00:04:38,376
We're going to add here below colorbar
114

114

00:04:38,376  -->  00:04:42,158
that will exactly us the legend of all these colors
115

115

00:04:42,158  -->  00:04:44,443
so now we will see much better
116

116

00:04:44,443  -->  00:04:47,330
what these colors correspond to.
117

117

00:04:47,330  -->  00:04:51,666
If I execute this again we get now the legend on the right.
118

118

00:04:51,666  -->  00:04:56,340
So this is the range of values of the MID,
119

119

00:04:56,340  -->  00:04:58,070
the Mean Interneuron Distances.
120

120

00:04:58,070  -->  00:05:00,420
But these are normalized values,
121

121

00:05:00,420  -->  00:05:03,313
that means that the values were scaled from zero to one.
122

122

00:05:03,313  -->  00:05:07,930
And therefore now we can clearly see that the highest MIDs,
123

123

00:05:07,930  -->  00:05:10,057
the highest Mean Interneuron Distances,
124

124

00:05:10,057  -->  00:05:12,410
correspond to the white color.
125

125

00:05:12,410  -->  00:05:13,243
And on the other hand,
126

126

00:05:13,243  -->  00:05:15,440
the smallest Mean Interneuron Distances
127

127

00:05:15,440  -->  00:05:17,400
correspond to the dark colors.
128

128

00:05:17,400  -->  00:05:19,400
So based on what we explained earlier,
129

129

00:05:19,400  -->  00:05:21,620
we actually already know where the frauds are.
130

130

00:05:21,620  -->  00:05:24,030
Because, remember the frauds are identified
131

131

00:05:24,030  -->  00:05:25,550
by outlying winning nodes
132

132

00:05:25,550  -->  00:05:27,610
because outlying winning nodes are the ones
133

133

00:05:27,610  -->  00:05:29,266
that are far from the general rules.
134

134

00:05:29,266  -->  00:05:32,070
You see all these majority of points here
135

135

00:05:32,070  -->  00:05:34,390
with dark colors are close to each other
136

136

00:05:34,390  -->  00:05:36,700
because their MID is pretty low.
137

137

00:05:36,700  -->  00:05:39,010
So that means that all the winning nodes
138

138

00:05:40,120  -->  00:05:41,940
in the neighborhood of one winning node are close to this
139

139

00:05:41,940  -->  00:05:43,420
winning node at the center
140

140

00:05:43,420  -->  00:05:45,800
and therefore that creates clusters of winning nodes
141

141

00:05:45,800  -->  00:05:47,390
all close to each other.
142

142

00:05:47,390  -->  00:05:49,840
But, these winning nodes here have large MIDs
143

143

00:05:49,840  -->  00:05:52,381
and therefore they're outliers
144

144

00:05:52,381  -->  00:05:54,412
and accordingly potential frauds.
145

145

00:05:54,412  -->  00:05:57,980
So great we actually identified the outlier, the fraud
146

146

00:05:58,875  -->  00:05:59,708
it's right here.
147

147

00:05:59,708  -->  00:06:02,440
So basically we could stop here and get to the next step
148

148

00:06:02,440  -->  00:06:04,610
to get the explicit list of the customers,
149

149

00:06:04,610  -->  00:06:07,043
by just proceed to the inverse mapping of this winning node
150

150

00:06:07,043  -->  00:06:10,506
to see which customers are associated to this winning node.
151

151

00:06:10,506  -->  00:06:12,203
But we can do better with this map,
152

152

00:06:12,203  -->  00:06:14,910
because we can actually add some markers.
153

153

00:06:14,910  -->  00:06:17,800
To make the distinction between the customers
154

154

00:06:17,800  -->  00:06:20,528
who got approval and the customers who didn't get approval.
155

155

00:06:20,528  -->  00:06:23,361
Because the customers who cheated and got approval
156

156

00:06:23,361  -->  00:06:26,160
are more relevant targets to fraud detection
157

157

00:06:26,160  -->  00:06:28,734
than the customers who didn't get approval and cheated.
158

158

00:06:28,734  -->  00:06:32,529
So it's good now to see where the customers are
159

159

00:06:32,529  -->  00:06:34,720
in the self-organizing map.
160

160

00:06:34,720  -->  00:06:36,310
So what we're going to do right now
161

161

00:06:36,310  -->  00:06:39,162
is add some markers everywhere,
162

162

00:06:39,162  -->  00:06:41,030
To tell for each of these winning nodes here
163

163

00:06:41,030  -->  00:06:43,970
if the customers who are associated to these winning nodes
164

164

00:06:43,970  -->  00:06:46,414
got approval or didn't get approval.
165

165

00:06:46,414  -->  00:06:48,640
So I'm going to close this
166

166

00:06:48,640  -->  00:06:50,660
and let's add these new lines of code,
167

167

00:06:50,660  -->  00:06:52,220
to add the markers.
168

168

00:06:52,220  -->  00:06:54,880
So basically it's very simple, we're going to create
169

169

00:06:54,880  -->  00:06:58,906
two markers, some red circles and some green squares.
170

170

00:06:58,906  -->  00:07:01,210
The red circles are going to correspond
171

171

00:07:01,210  -->  00:07:03,236
to the customers who didn't get approval.
172

172

00:07:03,236  -->  00:07:05,360
And the green squares will correspond
173

173

00:07:05,360  -->  00:07:07,250
to the customers who got approval.
174

174

00:07:07,250  -->  00:07:09,260
So first lets create the markers.
175

175

00:07:09,260  -->  00:07:11,565
We're going to create a new variable, markers
176

176

00:07:11,565  -->  00:07:14,850
and create a vector of two elements
177

177

00:07:14,850  -->  00:07:16,590
corresponding to the two markers.
178

178

00:07:16,590  -->  00:07:21,340
So we said first a circle that is coded by o here
179

179

00:07:21,340  -->  00:07:24,500
and then a square that is coded by s.
180

180

00:07:24,500  -->  00:07:26,090
Alright so that's the markers,
181

181

00:07:26,090  -->  00:07:27,990
but it's also good to color these markers.
182

182

00:07:27,990  -->  00:07:30,470
So, we're going to add a new variable here
183

183

00:07:30,470  -->  00:07:32,253
that will contain our colors,
184

184

00:07:32,253  -->  00:07:36,124
n equal and same I'm going to create
185

185

00:07:36,124  -->  00:07:37,960
a vector of two elements,
186

186

00:07:37,960  -->  00:07:40,800
which are going to be first the red color,
187

187

00:07:40,800  -->  00:07:43,589
coded by r and the green color,
188

188

00:07:43,589  -->  00:07:45,710
coded by g.
189

189

00:07:45,710  -->  00:07:48,980
Alright so, so far no association is made
190

190

00:07:48,980  -->  00:07:50,650
between the markers and the colors
191

191

00:07:50,650  -->  00:07:52,370
but we will make them afterwards
192

192

00:07:52,370  -->  00:07:53,710
thanks to the customers.
193

193

00:07:53,710  -->  00:07:55,340
And actually, this is what we're going to do now
194

194

00:07:55,340  -->  00:07:58,330
we're going to loop over all the customers
195

195

00:07:58,330  -->  00:08:01,594
and for each customer we're going to get the winning node
196

196

00:08:01,594  -->  00:08:05,100
and dependent on whether the customer got approval or not,
197

197

00:08:05,100  -->  00:08:08,430
we're going to color this winning node by a red circle
198

198

00:08:08,430  -->  00:08:10,380
if the customer didn't get approval
199

199

00:08:10,380  -->  00:08:12,556
and a green square if the customer got approval.
200

200

00:08:12,556  -->  00:08:14,370
So let's see, let's start the loop.
201

201

00:08:14,370  -->  00:08:17,900
A loop in python starts for and now we're going to use
202

202

00:08:18,802  -->  00:08:21,658
a trick, we actually need two looping variables
203

203

00:08:21,658  -->  00:08:23,163
that are going to be i and x,
204

204

00:08:23,163  -->  00:08:27,587
i is just going be the different values of all the indexes
205

205

00:08:27,587  -->  00:08:30,460
of our customer database, that is you know
206

206

00:08:30,460  -->  00:08:31,680
i is going to take the values,
207

207

00:08:31,680  -->  00:08:36,124
zero, one and two and three down to 689.
208

208

00:08:36,124  -->  00:08:39,851
And x is going to be different vectors of customers
209

209

00:08:39,851  -->  00:08:43,050
so x will start by being equal to this vector
210

210

00:08:43,050  -->  00:08:44,664
that corresponds to the first customer
211

211

00:08:44,664  -->  00:08:47,230
then at the next iteration x will be equal
212

212

00:08:47,230  -->  00:08:48,220
to this second vector,
213

213

00:08:48,220  -->  00:08:49,854
that corresponds to the second customer
214

214

00:08:49,854  -->  00:08:52,460
and down to the last customer.
215

215

00:08:52,460  -->  00:08:57,022
So, for i and x, and now what we're gonna do is add n,
216

216

00:08:57,022  -->  00:09:02,022
enumerate, and inside enumerate we're going to add X.
217

217

00:09:02,750  -->  00:09:05,080
Which contains all our customers.
218

218

00:09:05,080  -->  00:09:08,714
So, by doing this for i, x and enumerate X
219

219

00:09:08,714  -->  00:09:12,068
well i is going to be all the indexes of our customers
220

220

00:09:12,068  -->  00:09:15,343
and x is going to be all the vectors of customers
221

221

00:09:15,343  -->  00:09:17,640
at the different iterations.
222

222

00:09:17,640  -->  00:09:20,200
Okay, so now time to enter the loop.
223

223

00:09:20,200  -->  00:09:22,760
And therefore we introduce here a column
224

224

00:09:22,760  -->  00:09:24,910
and now we are inside the loop.
225

225

00:09:24,910  -->  00:09:26,982
So what do we do inside the loop,
226

226

00:09:26,982  -->  00:09:29,890
first we get the winning node for the first customer
227

227

00:09:29,890  -->  00:09:31,950
because at the beginning of this loop
228

228

00:09:31,950  -->  00:09:33,310
we start with the first customer
229

229

00:09:33,310  -->  00:09:34,970
because i will be equal to zero,
230

230

00:09:34,970  -->  00:09:37,820
the first index in python and x will be equal
231

231

00:09:37,820  -->  00:09:41,053
to the first element of x, that is the first customer.
232

232

00:09:41,926  -->  00:09:43,370
So we start with the first customer and for this customer
233

233

00:09:43,370  -->  00:09:45,460
we get its winning node.
234

234

00:09:45,460  -->  00:09:48,170
And how can we get that? Well first we're going to call
235

235

00:09:48,170  -->  00:09:52,090
this winning node w then equals and then of course
236

236

00:09:52,090  -->  00:09:54,300
fortunately we have a method for that.
237

237

00:09:54,300  -->  00:09:56,844
That returns the winning node for a specific customer
238

238

00:09:56,844  -->  00:10:00,460
so we take our object som and then we use this method
239

239

00:10:00,460  -->  00:10:03,163
which is called winner, pretty intuitive
240

240

00:10:03,163  -->  00:10:06,052
inside this function of course we enter X.
241

241

00:10:06,052  -->  00:10:09,269
Alright so this will get us the winning node
242

242

00:10:09,269  -->  00:10:10,972
of the customer x.
243

243

00:10:10,972  -->  00:10:14,866
Now, what we want to do is for this winning node
244

244

00:10:14,866  -->  00:10:18,880
place the marker on it, the colored marker on it.
245

245

00:10:18,880  -->  00:10:21,150
So that's what we are going to do right now
246

246

00:10:21,150  -->  00:10:24,351
On this winning node we're going to plot the marker,
247

247

00:10:24,351  -->  00:10:26,850
so what is this marker going to be?
248

248

00:10:26,850  -->  00:10:28,300
Well that depends on whether
249

249

00:10:28,300  -->  00:10:30,420
the customer got approval or not.
250

250

00:10:30,420  -->  00:10:31,890
So what we're going to get now
251

251

00:10:31,890  -->  00:10:33,190
is this information,
252

252

00:10:33,190  -->  00:10:35,600
whether this customer got approval or not.
253

253

00:10:35,600  -->  00:10:37,140
So in this plot function the first thing
254

254

00:10:37,140  -->  00:10:38,940
that we have to do is to specify
255

255

00:10:38,940  -->  00:10:40,546
the coordinates of this marker.
256

256

00:10:40,546  -->  00:10:43,039
And we would like to put this marker
257

257

00:10:43,039  -->  00:10:45,154
at the center or the winning node.
258

258

00:10:45,154  -->  00:10:48,350
You know, each winning node is represented by a square
259

259

00:10:48,350  -->  00:10:50,042
in the self-organizing map that we just saw earlier
260

260

00:10:50,042  -->  00:10:52,780
and basically we want to put the marker
261

261

00:10:52,780  -->  00:10:54,617
at the center of the square.
262

262

00:10:54,617  -->  00:10:56,660
And so where the all the coordinates of the
263

263

00:10:56,660  -->  00:11:01,470
winning nodes are w zero and w one
264

264

00:11:04,080  -->  00:11:06,730
that's the two coordinates of the winning node
265

265

00:11:06,730  -->  00:11:08,820
this is the x coordinate of the winning node
266

266

00:11:08,820  -->  00:11:11,490
and this is the y coordinate of the winning node.
267

267

00:11:11,490  -->  00:11:13,588
But this is actually the coordinate
268

268

00:11:13,588  -->  00:11:16,880
of the lower left corner of the square.
269

269

00:11:16,880  -->  00:11:19,620
And we want to put it at the center of the square,
270

270

00:11:19,620  -->  00:11:22,390
and therefore we will add plus 0.5 here
271

271

00:11:22,390  -->  00:11:25,750
to put it in the middle of the horizontal base of the square
272

272

00:11:25,750  -->  00:11:28,690
and also plus 0.5 here
273

273

00:11:28,690  -->  00:11:31,290
to put it at the center of the square.
274

274

00:11:31,290  -->  00:11:34,370
Okay, so by doing that we just put the marker
275

275

00:11:34,370  -->  00:11:35,700
at the center of the square
276

276

00:11:35,700  -->  00:11:37,350
corresponding to the winning node.
277

277

00:11:37,350  -->  00:11:39,820
And now what we have to do is the most important thing
278

278

00:11:39,820  -->  00:11:42,500
we need to know whether we have to put a red circle
279

279

00:11:42,500  -->  00:11:44,930
or a green square, and how do we do that?
280

280

00:11:44,930  -->  00:11:47,880
Well as you understood that depends on the information
281

281

00:11:48,802  -->  00:11:49,830
of the customer, you know that customer
282

282

00:11:49,830  -->  00:11:51,193
that we are at in the loop
283

283

00:11:51,193  -->  00:11:52,997
is it a customer who got approval
284

284

00:11:52,997  -->  00:11:55,317
or is it a customer who didn't get approval?
285

285

00:11:55,317  -->  00:11:57,218
So how do we get this information?
286

286

00:11:57,218  -->  00:11:59,939
Well this is thanks to the y vector here
287

287

00:11:59,939  -->  00:12:02,118
that we separated at the beginning.
288

288

00:12:02,118  -->  00:12:04,538
You know our som was strained on x
289

289

00:12:04,538  -->  00:12:06,830
but we still had this y vector here
290

290

00:12:06,830  -->  00:12:09,900
that contains the information of whether the customer
291

291

00:12:09,900  -->  00:12:11,280
got approval or not.
292

292

00:12:11,280  -->  00:12:13,100
So this is how we're going to know whether
293

293

00:12:13,100  -->  00:12:15,864
the markers going to be a red circle or a green square.
294

294

00:12:15,864  -->  00:12:18,280
So now that we get that it is very simple
295

295

00:12:18,280  -->  00:12:21,930
what we just need to take is, the markers vector
296

296

00:12:21,930  -->  00:12:25,850
that we created here and we're going to add some brackets
297

297

00:12:25,850  -->  00:12:27,580
and inside the brackets,
298

298

00:12:27,580  -->  00:12:31,480
we're going to put y and square and i.
299

299

00:12:31,480  -->  00:12:33,010
So why do we put that?
300

300

00:12:33,010  -->  00:12:35,680
Because i is the index of the customer,
301

301

00:12:35,680  -->  00:12:38,310
so y i is the value of the dependent variable
302

302

00:12:38,310  -->  00:12:40,120
for that customer that is zero
303

303

00:12:40,120  -->  00:12:41,730
if the customer didn't get approval
304

304

00:12:41,730  -->  00:12:43,852
and one if the customer got approval.
305

305

00:12:43,852  -->  00:12:47,267
So it goes this way, if the customer didn't get approval
306

306

00:12:47,267  -->  00:12:49,800
then y i will be equal to zero
307

307

00:12:49,800  -->  00:12:51,830
and therefore markers y i will be
308

308

00:12:51,830  -->  00:12:54,960
equal to markers zero, that is a circle.
309

309

00:12:54,960  -->  00:12:57,169
And on the other hand, if the customer got approval
310

310

00:12:57,169  -->  00:13:00,460
then y i will be equal to one, then therefore markers
311

311

00:13:00,460  -->  00:13:02,510
y i will be equal to markers 1
312

312

00:13:02,510  -->  00:13:05,541
and therefore that corresponds to s, a square.
313

313

00:13:05,541  -->  00:13:08,500
So that's how we make the association,
314

314

00:13:08,500  -->  00:13:10,350
between the customer and the marker,
315

315

00:13:10,350  -->  00:13:12,640
thanks to this y i here.
316

316

00:13:12,640  -->  00:13:14,380
And now we're going to do the same for the color
317

317

00:13:14,380  -->  00:13:16,778
because we want to put different colors for markers.
318

318

00:13:16,778  -->  00:13:19,640
So we're going to do exactly the same,
319

319

00:13:19,640  -->  00:13:22,281
add a comma here and now get the colors.
320

320

00:13:22,281  -->  00:13:24,333
So that's exactly the same actually
321

321

00:13:24,333  -->  00:13:28,040
we take our colors vector which is colors
322

322

00:13:28,040  -->  00:13:33,040
and same we add this y i information
323

323

00:13:33,600  -->  00:13:36,050
that contains the information whether the customer
324

324

00:13:36,050  -->  00:13:37,450
got approval or not.
325

325

00:13:37,450  -->  00:13:41,050
And, depending on the value of y i, well we will get
326

326

00:13:41,050  -->  00:13:42,960
a red if the customer didn't get approval
327

327

00:13:42,960  -->  00:13:45,190
because this corresponds to index zero
328

328

00:13:45,190  -->  00:13:47,460
and a green if the customer got approval
329

329

00:13:47,460  -->  00:13:49,650
because it corresponds to index one.
330

330

00:13:49,650  -->  00:13:52,150
But in fact, this colors y i here
331

331

00:13:53,065  -->  00:13:54,580
we're going to give this color to the marker
332

332

00:13:54,580  -->  00:13:58,046
however in the markers we can color the inside of the marker
333

333

00:13:58,046  -->  00:13:59,914
and the edge of the marker.
334

334

00:13:59,914  -->  00:14:02,730
And actually we're going to only the color the edge
335

335

00:14:02,730  -->  00:14:05,040
so what we're going to do is,
336

336

00:14:05,040  -->  00:14:10,040
add here marker edge color that will be equal to colors y i.
337

337

00:14:10,880  -->  00:14:14,021
But then as for the inside of the marker
338

338

00:14:14,021  -->  00:14:17,450
we will not color it, because we can have two markers
339

339

00:14:17,450  -->  00:14:18,572
for the same winning node.
340

340

00:14:18,572  -->  00:14:21,110
And if that's the case we will see much better
341

341

00:14:21,110  -->  00:14:23,522
the two markers if there's no color inside.
342

342

00:14:23,522  -->  00:14:26,015
You'll be convinced when we plot the map so,
343

343

00:14:26,015  -->  00:14:31,015
marker face color that's the code to get the inside color
344

344

00:14:33,530  -->  00:14:36,533
of the marker, so right now we're adding none.
345

345

00:14:37,790  -->  00:14:41,410
Alright perfect, and to finish lets take care of the size
346

346

00:14:41,410  -->  00:14:44,780
so, we can add a marker size
347

347

00:14:44,780  -->  00:14:47,960
because otherwise we'll get too small markers
348

348

00:14:47,960  -->  00:14:49,780
and we want to be able to see the markers.
349

349

00:14:49,780  -->  00:14:53,637
So we're going to add marker size equals ten
350

350

00:14:53,637  -->  00:14:57,687
and eventually we can do the same for the size of the edges.
351

351

00:14:57,687  -->  00:15:00,930
So we add here, marker edge width
352

352

00:15:00,930  -->  00:15:03,595
and we'll set it equal to two.
353

353

00:15:03,595  -->  00:15:05,930
Alright, so now you're going to see
354

354

00:15:05,930  -->  00:15:08,926
that our self-organizing map will look much better.
355

355

00:15:08,926  -->  00:15:10,970
Because not only we will see
356

356

00:15:10,970  -->  00:15:13,040
the different Mean Interneuron Distances
357

357

00:15:13,040  -->  00:15:14,420
for all the winning nodes,
358

358

00:15:14,420  -->  00:15:16,550
but besides we are going to see if the customers
359

359

00:15:16,550  -->  00:15:19,070
associated to the winning nodes are customers
360

360

00:15:19,070  -->  00:15:21,939
who got approval or didn't get approval.
361

361

00:15:21,939  -->  00:15:25,525
So, lets check it out right now, we just need to add here
362

362

00:15:25,525  -->  00:15:30,525
show, to show the graph and lets select everything now.
363

363

00:15:31,285  -->  00:15:34,141
And here it is, the self-organizing map!
364

364

00:15:34,141  -->  00:15:35,640
Here it is.
365

365

00:15:35,640  -->  00:15:38,880
Okay, I'm going to enlarge this, so now not only
366

366

00:15:38,880  -->  00:15:40,736
we have the Mean Interneuron Distances
367

367

00:15:40,736  -->  00:15:42,930
but also we get the information
368

368

00:15:42,930  -->  00:15:46,587
of whether the customers got approval or didn't get approval
369

369

00:15:46,587  -->  00:15:48,720
for each of the winning nodes.
370

370

00:15:48,720  -->  00:15:51,138
So for example if we have a look at this winning node,
371

371

00:15:51,138  -->  00:15:54,030
well we can see that the customers associated
372

372

00:15:54,030  -->  00:15:56,290
to this winning node didn't get approval.
373

373

00:15:56,290  -->  00:15:59,160
However, if we look at this winning node well we can see
374

374

00:15:59,160  -->  00:16:01,285
that the customers associated to this winning node
375

375

00:16:01,285  -->  00:16:05,470
got approval, but the color is fine its around this level
376

376

00:16:05,470  -->  00:16:08,820
so it doesn't indicate a high risk of fraud.
377

377

00:16:08,820  -->  00:16:12,080
However, now let's look at our outliers,
378

378

00:16:12,080  -->  00:16:15,850
the obvious outliers that are this winning node here
379

379

00:16:15,850  -->  00:16:17,420
and this one here.
380

380

00:16:17,420  -->  00:16:20,674
Here, absolutely no doubt the Mean Interneuron Distance
381

381

00:16:20,674  -->  00:16:24,074
is almost equal to one or perhaps equal to one.
382

382

00:16:24,074  -->  00:16:27,070
Which clearly indicates that there is a high risk
383

383

00:16:27,070  -->  00:16:29,330
of fraud for these customers associated
384

384

00:16:29,330  -->  00:16:30,800
to these two winning nodes.
385

385

00:16:30,800  -->  00:16:32,740
And what do we see in these winning nodes?
386

386

00:16:32,740  -->  00:16:35,930
Well we see that we have both cases some customers
387

387

00:16:35,930  -->  00:16:38,710
who got approval and some customers who didn't get approval
388

388

00:16:38,710  -->  00:16:42,210
because we get a green square and also a red circle.
389

389

00:16:42,210  -->  00:16:44,450
So now, what we have to do is catch
390

390

00:16:44,450  -->  00:16:46,850
these potential cheaters in the winning nodes
391

391

00:16:46,850  -->  00:16:48,960
but in priority those who got approval
392

392

00:16:48,960  -->  00:16:51,130
because it's of course much more relevant
393

393

00:16:51,130  -->  00:16:53,920
to the bank to catch the cheaters who got away with this.
394

394

00:16:53,920  -->  00:16:57,720
So, now the map is done, we have a good map
395

395

00:16:57,720  -->  00:17:00,440
and we're going to use this map to catch
396

396

00:17:00,440  -->  00:17:02,820
these potential cheaters and to do this we're going
397

397

00:17:02,820  -->  00:17:04,300
to add just three lines of code
398

398

00:17:04,300  -->  00:17:06,300
and we will do it in the next tutorial,
399

399

00:17:06,300  -->  00:17:08,831
to get the explicit list of the customers
400

400

00:17:08,831  -->  00:17:10,690
who potentially cheated.
401

401

00:17:10,690  -->  00:17:12,280
And we will do that thanks to this map
402

402

00:17:12,280  -->  00:17:14,090
because we will get the coordinates
403

403

00:17:14,090  -->  00:17:15,447
of these two winning nodes here
404

404

00:17:15,447  -->  00:17:19,270
and we will use a function to find the customers
405

405

00:17:19,270  -->  00:17:20,970
associated to these two winning nodes.
406

406

00:17:20,970  -->  00:17:23,070
We'll do that in the next tutorial
407

407

00:17:23,070  -->  00:17:24,953
and until then enjoy deep learning!
