WEBVTT
1
1

00:00:00.300  -->  00:00:01.730
<v Instructor>Hello and welcome</v>
2

2

00:00:01.730  -->  00:00:04.720
to the final episode of The Arnon Show:
3

3

00:00:04.720  -->  00:00:06.453
Visualizing the results.
4

4

00:00:07.380  -->  00:00:09.700
In this episode it will be the witnesses
5

5

00:00:09.700  -->  00:00:13.760
of the robustness of our model because we will see how our
6

6

00:00:13.760  -->  00:00:17.420
predictions follow the trends of the Google set price.
7

7

00:00:17.420  -->  00:00:20.290
So, it's going to be very easy tutorial on the
8

8

00:00:20.290  -->  00:00:21.730
implementation side.
9

9

00:00:21.730  -->  00:00:26.730
We are just going to use the plt.plot function to separately
10

10

00:00:27.430  -->  00:00:30.000
plot the real Google stock price that we stored
11

11

00:00:30.000  -->  00:00:34.310
in this real stock price variable and then the predicted
12

12

00:00:34.310  -->  00:00:36.093
Google stock price that we stored in this
13

13

00:00:36.093  -->  00:00:38.530
predicted stock price variable.
14

14

00:00:38.530  -->  00:00:40.290
So, we will plot that separately.
15

15

00:00:40.290  -->  00:00:43.100
We will give a title and different colors and a
16

16

00:00:43.100  -->  00:00:45.446
label for the legend, and then just for the form
17

17

00:00:45.446  -->  00:00:48.101
we will add a nice title to our chart and
18

18

00:00:48.101  -->  00:00:51.280
some labels for the x- axis and the y- axis.
19

19

00:00:51.280  -->  00:00:53.430
So, as I said, very easy.
20

20

00:00:53.430  -->  00:00:55.670
We are going to do that in no time.
21

21

00:00:55.670  -->  00:00:58.880
So, first, let's start by plotting the real
22

22

00:00:58.880  -->  00:01:00.090
Google stock price.
23

23

00:01:00.090  -->  00:01:05.090
As we said, we need to take our plt.plot function.
24

24

00:01:05.660  -->  00:01:08.130
So we're basically using the plot function
25

25

00:01:08.130  -->  00:01:11.660
from the matplotlib.pyplot library
26

26

00:01:11.660  -->  00:01:14.780
that we imported here "matplotlib.plyplot" and we
27

27

00:01:14.780  -->  00:01:18.460
gave it a shorter name "plt" for simplicity sake.
28

28

00:01:18.460  -->  00:01:22.060
And now, inside this plt.plot function,
29

29

00:01:22.060  -->  00:01:24.860
we first need to input the name of the variable
30

30

00:01:24.860  -->  00:01:27.710
that contains the stored stock prices that we
31

31

00:01:27.710  -->  00:01:28.543
want to plot.
32

32

00:01:28.543  -->  00:01:31.970
And these are contained, as we said, in "real stock price".
33

33

00:01:31.970  -->  00:01:33.977
So, we first need to input,
34

34

00:01:33.977  -->  00:01:38.410
"real underscore stock underscore price" and there we go,
35

35

00:01:38.410  -->  00:01:40.470
that's it for our first argument.
36

36

00:01:40.470  -->  00:01:42.410
So, that could be enough, but then of course
37

37

00:01:42.410  -->  00:01:44.820
we want to make it a nice chart and therefore
38

38

00:01:44.820  -->  00:01:47.090
we can add some other arguments,
39

39

00:01:47.090  -->  00:01:49.160
like the colors and labels.
40

40

00:01:49.160  -->  00:01:50.670
So, let's start with the color.
41

41

00:01:50.670  -->  00:01:55.590
The argument name for the color is "color" very simply.
42

42

00:01:55.590  -->  00:01:58.100
So, color equals in quotes.
43

43

00:01:58.100  -->  00:02:00.900
Choose your favorite color or a relevant color.
44

44

00:02:00.900  -->  00:02:03.370
Well, since this is for the real stock price,
45

45

00:02:03.370  -->  00:02:06.060
I am going to choose the color red.
46

46

00:02:06.060  -->  00:02:08.320
Real in red, okay?
47

47

00:02:08.320  -->  00:02:11.070
And then the last argument for the label
48

48

00:02:11.070  -->  00:02:13.060
we're going to plot some legends on the chart
49

49

00:02:13.060  -->  00:02:15.950
and we're going to use the plt.legend function
50

50

00:02:15.950  -->  00:02:17.930
to display the legends.
51

51

00:02:17.930  -->  00:02:21.420
And so the label for the real stock price
52

52

00:02:21.420  -->  00:02:23.700
is going to be whatever you want,
53

53

00:02:23.700  -->  00:02:28.700
let's say "real Google stock price".
54

54

00:02:28.850  -->  00:02:31.127
Alright, so keep in mind that we're plotting
55

55

00:02:31.127  -->  00:02:33.516
not the whole real Google stock price between
56

56

00:02:33.516  -->  00:02:36.266
2012 and the first month of 2017,
57

57

00:02:37.517  -->  00:02:39.496
we are plotting the Google stock price, the real one,
58

58

00:02:39.496  -->  00:02:42.050
and the first month of January 2017
59

59

00:02:42.050  -->  00:02:45.730
because we only have the predictions of January 2017,
60

60

00:02:45.730  -->  00:02:49.360
so we just want to compare these two stock prices during
61

61

00:02:49.360  -->  00:02:51.090
this first month, alright?
62

62

00:02:51.090  -->  00:02:54.250
So real Google stock price of January 2017,
63

63

00:02:54.250  -->  00:02:58.500
keep that in mind and now, let's proceed to our predictions.
64

64

00:02:58.500  -->  00:02:59.930
So, basically it's the same.
65

65

00:02:59.930  -->  00:03:01.460
I'm going to copy this.
66

66

00:03:01.460  -->  00:03:04.758
We're going to use the plt.plot function
67

67

00:03:04.758  -->  00:03:08.930
to plot this time not the real stock price,
68

68

00:03:08.930  -->  00:03:12.176
but the predicted stock price variable that contains
69

69

00:03:12.176  -->  00:03:17.176
the stored predictions of the stock price for January 2017.
70

70

00:03:17.620  -->  00:03:20.380
And now we need to choose, of course, a different color.
71

71

00:03:20.380  -->  00:03:22.900
This time we are going to plot it in blue and,
72

72

00:03:22.900  -->  00:03:25.360
of course, a different label which is
73

73

00:03:26.456  -->  00:03:27.940
going to be for predictions, well,
74

74

00:03:27.940  -->  00:03:31.620
predicted Google stock price.
75

75

00:03:31.620  -->  00:03:34.500
Alright, and now we have our two curves,
76

76

00:03:34.500  -->  00:03:36.370
so we could basically stop here
77

77

00:03:36.370  -->  00:03:38.481
but I want you to get a nice chart, so we'll just
78

78

00:03:38.481  -->  00:03:43.110
add now a title to the chart, and therefore we use
79

79

00:03:43.110  -->  00:03:47.273
the plt.title function and inside we just
80

80

00:03:47.273  -->  00:03:50.680
need to input, in quotes, the title we want
81

81

00:03:50.680  -->  00:03:53.250
to give to our chart and this is going to be,
82

82

00:03:53.250  -->  00:03:58.250
let's say, "Google stock price prediction".
83

83

00:03:59.480  -->  00:04:02.578
Perfect; plain and simple title.
84

84

00:04:02.578  -->  00:04:05.450
Now, let's add a label to the x- axis
85

85

00:04:05.450  -->  00:04:07.710
and then a label to the y- axis.
86

86

00:04:07.710  -->  00:04:12.600
So, to the x- axis we need to use the plt.xlabel function
87

87

00:04:14.090  -->  00:04:16.580
and same inside this function, we just need to input,
88

88

00:04:16.580  -->  00:04:20.360
in quotes, the label that corresponds to the x- axis.
89

89

00:04:20.360  -->  00:04:21.620
And what is this label?
90

90

00:04:21.620  -->  00:04:23.440
That's, of course, the time.
91

91

00:04:23.440  -->  00:04:26.198
You know we are plotting the stock price
92

92

00:04:26.198  -->  00:04:30.120
from January third to January thirty first.
93

93

00:04:30.120  -->  00:04:33.493
Therefore, the label of the x- axis is going to be time.
94

94

00:04:34.440  -->  00:04:39.440
Great, now let's do the same for the label of the y- axis.
95

95

00:04:39.730  -->  00:04:41.260
So, it's almost the same.
96

96

00:04:41.260  -->  00:04:44.270
We need to replace "xlabel" by "ylabel" here
97

97

00:04:44.270  -->  00:04:48.810
and what would you like to give to the y- axis as a label?
98

98

00:04:48.810  -->  00:04:51.360
Well, very simply, you know it's the stock price
99

99

00:04:51.360  -->  00:04:56.360
so we can say "Google stock price", alright?
100

100

00:04:57.640  -->  00:04:58.473
Almost done.
101

101

00:05:00.203  -->  00:05:02.570
Now, we should not forget to add plt.legend
102

102

00:05:02.570  -->  00:05:05.101
without any input and that is just
103

103

00:05:05.101  -->  00:05:07.290
to include the legends in the chart.
104

104

00:05:07.290  -->  00:05:12.290
So, plt.legend with no input and finally, almost ready.
105

105

00:05:13.820  -->  00:05:18.820
We end up with plt.show to display the graph and now,
106

106

00:05:19.850  -->  00:05:24.300
congratulations, you are done with the whole implementation.
107

107

00:05:24.300  -->  00:05:26.940
So almost 100 lines of code.
108

108

00:05:26.940  -->  00:05:28.990
Don't worry, you will get 100 plus
109

109

00:05:28.990  -->  00:05:30.390
lines of code in volume two.
110

110

00:05:31.425  -->  00:05:32.560
But, here we almost did it.
111

111

00:05:32.560  -->  00:05:35.381
But anyway, there was still a robust implementation because,
112

112

00:05:35.381  -->  00:05:39.050
after all, we implemented a recurrent neural network.
113

113

00:05:39.050  -->  00:05:41.170
I can't wait to visualize these results.
114

114

00:05:41.170  -->  00:05:43.790
And there we are, now it's time for the real show.
115

115

00:05:43.790  -->  00:05:46.480
I'm going to select all these lines for
116

116

00:05:46.480  -->  00:05:49.290
the last section, visualizing the results.
117

117

00:05:49.290  -->  00:05:50.903
And now, check this out.
118

118

00:05:51.799  -->  00:05:53.200
Just executed and there we go.
119

119

00:05:53.200  -->  00:05:55.400
I'm happy to introduce you to the
120

120

00:05:55.400  -->  00:05:58.420
final Google stock price prediction results.
121

121

00:05:58.420  -->  00:06:03.090
So I'm going to enlarge them, and here are the results.
122

122

00:06:03.090  -->  00:06:06.440
So, first of all, we have the real Google stock price
123

123

00:06:06.440  -->  00:06:10.540
in red and our predicted Google stock price in blue.
124

124

00:06:10.540  -->  00:06:12.250
And we get this comparison of the
125

125

00:06:12.250  -->  00:06:14.440
real and the predicted Google stock prices
126

126

00:06:14.440  -->  00:06:18.071
for the whole month of January 2017.
127

127

00:06:18.071  -->  00:06:20.897
This is the real Google stock price taken from
128

128

00:06:20.897  -->  00:06:23.640
verified financial sources from the web.
129

129

00:06:23.640  -->  00:06:25.988
And these are the predictions coming from
130

130

00:06:25.988  -->  00:06:28.760
the Arnon model we implemented.
131

131

00:06:28.760  -->  00:06:31.630
So now, let's comment on the results.
132

132

00:06:31.630  -->  00:06:34.890
Well, first of all, in some parts of the predictions,
133

133

00:06:34.890  -->  00:06:38.320
we see our predictions lagging behind the actual values.
134

134

00:06:38.320  -->  00:06:40.490
You see that's exactly what's happening here.
135

135

00:06:40.490  -->  00:06:44.290
Here we see a big spike, like a stock time singularity
136

136

00:06:44.290  -->  00:06:46.730
and our predictions did not follow that,
137

137

00:06:46.730  -->  00:06:48.830
but that is completely normal.
138

138

00:06:48.830  -->  00:06:52.040
Our model just lags behind because it cannot react
139

139

00:06:52.040  -->  00:06:53.997
to fast, nonlinear changes.
140

140

00:06:53.997  -->  00:06:57.027
This spike here this stock time irregularity,
141

141

00:06:57.027  -->  00:07:00.590
is indeed a fast, nonlinear change to which our
142

142

00:07:00.590  -->  00:07:03.260
model cannot react properly.
143

143

00:07:03.260  -->  00:07:05.690
But that's totally fine because, indeed, according to the
144

144

00:07:05.690  -->  00:07:07.593
Brownian Motion Mathematical Concept
145

145

00:07:07.593  -->  00:07:10.490
in financial engineering, the future variations
146

146

00:07:10.490  -->  00:07:13.750
of the stock price are independent from the past.
147

147

00:07:13.750  -->  00:07:16.950
And therefore, this future variation that we see here
148

148

00:07:16.950  -->  00:07:19.300
around the spike, well, is a variation
149

149

00:07:19.300  -->  00:07:21.700
that is indeed totally independent
150

150

00:07:21.700  -->  00:07:25.060
from the previous stock prices, alright?
151

151

00:07:25.060  -->  00:07:26.020
So, that's okay.
152

152

00:07:26.020  -->  00:07:28.240
But on the other hand, here is the good news.
153

153

00:07:28.240  -->  00:07:30.450
The good news is that our model reacts
154

154

00:07:30.450  -->  00:07:33.410
okay to smooth changes, you know?
155

155

00:07:33.410  -->  00:07:36.820
All these changes happening here are quite smooth
156

156

00:07:36.820  -->  00:07:39.391
except here for this spike, to which, again
157

157

00:07:39.391  -->  00:07:42.430
our model couldn't react but except for it
158

158

00:07:42.430  -->  00:07:44.330
our recurrent neural network model reacts
159

159

00:07:44.330  -->  00:07:47.430
pretty well to these smooth changes.
160

160

00:07:47.430  -->  00:07:49.510
Typically, all of the changes happen in here.
161

161

00:07:49.510  -->  00:07:51.040
So, that's a very good point.
162

162

00:07:51.040  -->  00:07:53.360
Therefore, the conclusion is that in the parts
163

163

00:07:53.360  -->  00:07:55.400
of the predictions containing some spikes,
164

164

00:07:55.400  -->  00:07:57.500
well, our predictions lag behind the actual
165

165

00:07:57.500  -->  00:07:59.740
values because our model cannot react
166

166

00:07:59.740  -->  00:08:01.430
to fast, nonlinear changes.
167

167

00:08:01.430  -->  00:08:03.410
And, on the other hand, for the parts
168

168

00:08:03.410  -->  00:08:05.406
of the predictions containing smooth changes,
169

169

00:08:05.406  -->  00:08:08.980
well our model reacts pretty well and manages to follow
170

170

00:08:08.980  -->  00:08:10.800
the upward and downward trends.
171

171

00:08:10.800  -->  00:08:14.202
It manages to follow the upward trend here,
172

172

00:08:14.202  -->  00:08:17.180
the stable trend here, and again, the upward trend here.
173

173

00:08:17.180  -->  00:08:19.880
Then, there is a downward trend here in the last
174

174

00:08:19.880  -->  00:08:24.710
financial days of January, and it started to capture it.
175

175

00:08:24.710  -->  00:08:28.080
So, really good results that actually make,
176

176

00:08:28.080  -->  00:08:30.760
pretty much, sense in spite of the spikes.
177

177

00:08:30.760  -->  00:08:34.050
Alright, and that's actually the end of this
178

178

00:08:34.050  -->  00:08:36.890
recurrent neural network part three of the course.
179

179

00:08:36.890  -->  00:08:38.320
Congratulations, again.
180

180

00:08:38.320  -->  00:08:40.211
That was not an easy one.
181

181

00:08:40.211  -->  00:08:41.330
We made a robust model,
182

182

00:08:41.330  -->  00:08:44.170
which I was very happy to implement with you.
183

183

00:08:44.170  -->  00:08:47.840
And now well, I guess it's time to move on to Volume two,
184

184

00:08:47.840  -->  00:08:49.570
on to provide deep learning.
185

185

00:08:49.570  -->  00:08:52.810
You are going to start to play with one of the most powerful
186

186

00:08:52.810  -->  00:08:55.890
tools for deep learning and artificial intelligence.
187

187

00:08:55.890  -->  00:08:57.740
I'm talking about Pytorch,
188

188

00:08:57.740  -->  00:08:59.740
which is much more powerful than Keris,
189

189

00:08:59.740  -->  00:09:02.220
thanks to a specific feature that it contains,
190

190

00:09:02.220  -->  00:09:04.230
which are the dynamic graphs.
191

191

00:09:04.230  -->  00:09:05.860
You are going to understand what they are,
192

192

00:09:05.860  -->  00:09:07.210
but what I can tell you right now,
193

193

00:09:07.210  -->  00:09:09.100
is that with these dynamic graphs,
194

194

00:09:09.100  -->  00:09:11.890
we will be able to build some very powerful,
195

195

00:09:11.890  -->  00:09:14.060
unsupervised, deep learning models.
196

196

00:09:14.060  -->  00:09:16.900
And especially, I'm talking about the Bossman machines
197

197

00:09:16.900  -->  00:09:19.810
and the encoders which will implement,
198

198

00:09:19.810  -->  00:09:22.537
build two different recommended systems.
199

199

00:09:22.537  -->  00:09:25.050
One that will predict the ratings given
200

200

00:09:25.050  -->  00:09:26.950
by the users to movies,
201

201

00:09:26.950  -->  00:09:29.100
and one other that will predict if a user
202

202

00:09:29.100  -->  00:09:31.400
will like yes or no, a movie.
203

203

00:09:31.400  -->  00:09:34.000
So I can't wait to see you in Volume two,
204

204

00:09:34.000  -->  00:09:35.953
and until then, enjoy deep learning.
