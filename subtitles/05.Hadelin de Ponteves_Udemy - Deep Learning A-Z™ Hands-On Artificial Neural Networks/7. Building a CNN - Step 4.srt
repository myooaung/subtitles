1
1

00:00:00,370  -->  00:00:02,850
<v Instructor>Hello and welcome to this Python tutorial.</v>
2

2

00:00:02,850  -->  00:00:05,760
So we just initialized our convolutional neural network
3

3

00:00:05,760  -->  00:00:09,060
as a sequence of layers using the sequential class
4

4

00:00:09,060  -->  00:00:13,060
and now we're about to add the first layer of our CNN.
5

5

00:00:13,060  -->  00:00:15,390
But before we add this first layer let's just give us
6

6

00:00:15,390  -->  00:00:17,400
a quick reminder of the building process
7

7

00:00:17,400  -->  00:00:19,890
of the convolutional neural network which is
8

8

00:00:19,890  -->  00:00:21,210
right here on this slide.
9

9

00:00:21,210  -->  00:00:24,880
So the CNN building process takes four steps.
10

10

00:00:24,880  -->  00:00:27,980
Step one, Convolution step two, Max Pooling,
11

11

00:00:27,980  -->  00:00:31,710
step three, Flattening and step four, Full Connection.
12

12

00:00:31,710  -->  00:00:33,610
And in this tutorial we will take care
13

13

00:00:33,610  -->  00:00:35,800
of the first step, Convolution.
14

14

00:00:35,800  -->  00:00:38,120
So let's also give us a quick reminder
15

15

00:00:38,120  -->  00:00:40,740
of what this convolution step is about.
16

16

00:00:40,740  -->  00:00:43,470
So we have an input image,
17

17

00:00:43,470  -->  00:00:44,860
in our case the input image
18

18

00:00:44,860  -->  00:00:47,410
will be the image of a cat or a dog,
19

19

00:00:47,410  -->  00:00:49,080
but here on the example of this slide
20

20

00:00:49,080  -->  00:00:51,670
this is the input image of a smiling face.
21

21

00:00:51,670  -->  00:00:53,570
We converted this smiling face image
22

22

00:00:53,570  -->  00:00:55,490
into a table of pixel values
23

23

00:00:55,490  -->  00:00:58,710
and this is what we got with all the 1 and 0 pixels.
24

24

00:00:58,710  -->  00:01:00,700
And so this Convolution step consists
25

25

00:01:00,700  -->  00:01:04,110
of applying several feature detectors on this input image.
26

26

00:01:04,110  -->  00:01:05,920
So here on this slide the feature detector
27

27

00:01:05,920  -->  00:01:09,200
is the feature detector of the left side of a smiling mouth
28

28

00:01:09,200  -->  00:01:12,010
well the right side but left when we look at the person
29

29

00:01:12,010  -->  00:01:14,310
and for each feature detector that we use,
30

30

00:01:14,310  -->  00:01:16,810
we slide it all over the input image
31

31

00:01:16,810  -->  00:01:19,040
and when the feature detector passes over
32

32

00:01:19,040  -->  00:01:22,550
the part of the face that contains this left side
33

33

00:01:22,550  -->  00:01:24,160
of the mouth that is smiling,
34

34

00:01:24,160  -->  00:01:27,430
well we get a high number in this table on the right
35

35

00:01:27,430  -->  00:01:29,640
and this table is the feature map.
36

36

00:01:29,640  -->  00:01:31,350
So for each feature detector
37

37

00:01:31,350  -->  00:01:34,850
that we apply on the input image we get a feature map.
38

38

00:01:34,850  -->  00:01:36,606
The feature map contains some numbers
39

39

00:01:36,606  -->  00:01:39,530
and the highest numbers of the feature map
40

40

00:01:39,530  -->  00:01:41,840
is where the feature detector could detect
41

41

00:01:41,840  -->  00:01:45,160
a specific feature in the input image.
42

42

00:01:45,160  -->  00:01:47,730
Alright and that is the Convolution operation.
43

43

00:01:47,730  -->  00:01:50,240
This operation here between the input image
44

44

00:01:50,240  -->  00:01:51,650
and the feature detector
45

45

00:01:51,650  -->  00:01:53,720
that results in the future map,
46

46

00:01:53,720  -->  00:01:55,960
is the convolution operation.
47

47

00:01:55,960  -->  00:01:58,470
And so we do this with many feature detectors,
48

48

00:01:58,470  -->  00:02:00,900
we will choose in this first Convolution step,
49

49

00:02:00,900  -->  00:02:03,770
the number of feature detectors that we create
50

50

00:02:03,770  -->  00:02:05,570
and therefore the number of feature maps
51

51

00:02:05,570  -->  00:02:07,770
because we get as many feature maps
52

52

00:02:07,770  -->  00:02:09,850
as feature detectors we use
53

53

00:02:09,850  -->  00:02:13,310
to detect some specific features in the input image.
54

54

00:02:13,310  -->  00:02:15,880
And therefore eventually we get our first step,
55

55

00:02:15,880  -->  00:02:17,160
Convolution done,
56

56

00:02:17,160  -->  00:02:19,520
as soon as we create these many feature maps
57

57

00:02:19,520  -->  00:02:21,970
that will form our convolutional layer
58

58

00:02:21,970  -->  00:02:24,000
and that is exactly what we're gonna build here,
59

59

00:02:24,000  -->  00:02:27,710
the convolutional layer composed of all these feature maps.
60

60

00:02:27,710  -->  00:02:28,780
So let's do it.
61

61

00:02:28,780  -->  00:02:30,560
It's actually going to take one line
62

62

00:02:30,560  -->  00:02:34,040
because we already imported the packet that we're gonna use
63

63

00:02:34,040  -->  00:02:35,790
to add this convolutional layer
64

64

00:02:35,790  -->  00:02:37,760
and so this is going to take one line
65

65

00:02:37,760  -->  00:02:41,600
and we are gonna start this line by taking our classifier
66

66

00:02:41,600  -->  00:02:44,560
because of course this is an object
67

67

00:02:44,560  -->  00:02:47,700
and we are going to apply a method on this object
68

68

00:02:47,700  -->  00:02:50,000
which will be nothing else than the add method
69

69

00:02:50,000  -->  00:02:52,450
that we already used to add a layer
70

70

00:02:52,450  -->  00:02:54,370
but it was not a convolutional layer
71

71

00:02:54,370  -->  00:02:57,350
but a classic layer composed of several nodes
72

72

00:02:57,350  -->  00:02:59,210
that's what we did in the previous section,
73

73

00:02:59,210  -->  00:03:00,450
building the A and N,
74

74

00:03:00,450  -->  00:03:02,930
but here some things are of course going to change.
75

75

00:03:02,930  -->  00:03:04,980
So let's take our classifier,
76

76

00:03:04,980  -->  00:03:09,070
here we go, paste and then dot to introduce the method
77

77

00:03:09,070  -->  00:03:11,480
and here we go, that's the method we wanna use,
78

78

00:03:11,480  -->  00:03:14,860
add pressing enter and now parentheses
79

79

00:03:14,860  -->  00:03:18,120
and in these parentheses we will add the parameters
80

80

00:03:18,120  -->  00:03:20,290
of our convolutional layer.
81

81

00:03:20,290  -->  00:03:23,240
So now remember when we added the classic layer
82

82

00:03:23,240  -->  00:03:24,620
in the A and N section,
83

83

00:03:24,620  -->  00:03:26,810
what we used here was the dense function
84

84

00:03:26,810  -->  00:03:28,980
but this dense function is used to add
85

85

00:03:28,980  -->  00:03:31,310
a fully connected layer like in the A and N
86

86

00:03:31,310  -->  00:03:32,730
and therefore this is not the function
87

87

00:03:32,730  -->  00:03:34,020
that we're gonna use here.
88

88

00:03:34,020  -->  00:03:35,160
The function that we're gonna use
89

89

00:03:35,160  -->  00:03:37,990
you can guess what it is, it is Convolution2D
90

90

00:03:40,790  -->  00:03:42,290
and we can use these functions
91

91

00:03:42,290  -->  00:03:45,800
thanks to this import here, Convolution2D.
92

92

00:03:45,800  -->  00:03:48,170
All right so now new parentheses
93

93

00:03:48,170  -->  00:03:50,990
and let's see what we need to input here
94

94

00:03:50,990  -->  00:03:53,620
in this Convolution2D function.
95

95

00:03:53,620  -->  00:03:56,040
Alright so I'm going to press here
96

96

00:03:56,040  -->  00:03:57,990
command I to get some info
97

97

00:03:57,990  -->  00:04:00,140
about this Convolution2D function
98

98

00:04:00,140  -->  00:04:01,810
and here we go.
99

99

00:04:01,810  -->  00:04:04,230
So we have several arguments as you can see here,
100

100

00:04:04,230  -->  00:04:07,100
64, 3, 3 border_mode, input shape.
101

101

00:04:07,100  -->  00:04:08,500
So let's see where they are.
102

102

00:04:09,500  -->  00:04:12,850
All right so the first argument is nb_filter,
103

103

00:04:12,850  -->  00:04:14,780
the number of filters.
104

104

00:04:14,780  -->  00:04:17,160
So this is exactly the number of feature detectors
105

105

00:04:17,160  -->  00:04:19,870
that we're going to apply on our input image
106

106

00:04:19,870  -->  00:04:22,730
to get this same number of feature maps.
107

107

00:04:22,730  -->  00:04:25,290
So the number of filters that we choose here
108

108

00:04:25,290  -->  00:04:28,580
is the feature maps that we want to create as well
109

109

00:04:28,580  -->  00:04:30,670
because there will be one feature map created
110

110

00:04:30,670  -->  00:04:33,055
for each filter used.
111

111

00:04:33,055  -->  00:04:36,180
So we need to choose this number of feature detectors
112

112

00:04:36,180  -->  00:04:38,420
but that's not the only thing that we need to choose here.
113

113

00:04:38,420  -->  00:04:42,660
As you can see, it says nb_filter, number of filter,
114

114

00:04:42,660  -->  00:04:46,420
but it also says number of rows in the convolution kernel,
115

115

00:04:46,420  -->  00:04:48,480
so the convolution kernel is just another name
116

116

00:04:48,480  -->  00:04:50,400
for feature detector or filter
117

117

00:04:50,400  -->  00:04:52,570
but anyway we have this number of rows
118

118

00:04:52,570  -->  00:04:55,590
of our feature detector and also the number of columns
119

119

00:04:55,590  -->  00:04:57,130
of our feature detector
120

120

00:04:57,130  -->  00:05:00,190
and so to understand what it is, if we go back on the slide,
121

121

00:05:00,190  -->  00:05:02,360
well the number of rows is the number of rows
122

122

00:05:02,360  -->  00:05:03,970
of this feature detector table
123

123

00:05:03,970  -->  00:05:05,800
that you see in the middle of this slide
124

124

00:05:05,800  -->  00:05:08,120
and same number of columns is the number of columns
125

125

00:05:08,120  -->  00:05:10,090
of this feature detector table
126

126

00:05:10,090  -->  00:05:12,200
that you see in the middle of this slide.
127

127

00:05:12,200  -->  00:05:14,600
So basically, if we go back to spider,
128

128

00:05:14,600  -->  00:05:17,980
well the numbers here that you see in the parameters
129

129

00:05:17,980  -->  00:05:19,740
of the Convolution2D function,
130

130

00:05:19,740  -->  00:05:24,150
well 64 here is the number of filters you wanna use,
131

131

00:05:24,150  -->  00:05:27,840
three is the number of rows of each filter,
132

132

00:05:27,840  -->  00:05:31,090
and this other three here is the number of columns
133

133

00:05:31,090  -->  00:05:32,700
of our feature detector.
134

134

00:05:32,700  -->  00:05:35,940
So basically if we choose 64, 3 and 3,
135

135

00:05:35,940  -->  00:05:39,120
that means that we'll create 64 feature detectors
136

136

00:05:39,120  -->  00:05:41,810
that are gonna have the dimensions 3 by 3
137

137

00:05:41,810  -->  00:05:43,803
and that will go through the input image
138

138

00:05:43,803  -->  00:05:46,810
to create 64 feature maps.
139

139

00:05:46,810  -->  00:05:50,060
So now what are we gonna choose here for a function?
140

140

00:05:50,060  -->  00:05:52,230
Well we're not gonna choose 64
141

141

00:05:52,230  -->  00:05:53,320
because first of all
142

142

00:05:53,320  -->  00:05:55,710
if you look at most of the CNN architectures,
143

143

00:05:55,710  -->  00:05:58,830
you will see that the common practice is to start with 32
144

144

00:05:58,830  -->  00:06:00,590
you know we start with 32 feature detectors
145

145

00:06:00,590  -->  00:06:02,470
in the first convolutional layer
146

146

00:06:02,470  -->  00:06:04,380
and then we add other convolutional layers
147

147

00:06:04,380  -->  00:06:08,150
with more feature detectors like 64 and then 128
148

148

00:06:08,150  -->  00:06:12,420
and then 256 but here and that's the second reason
149

149

00:06:12,420  -->  00:06:13,910
we are working on a CPU,
150

150

00:06:13,910  -->  00:06:16,770
well maybe some of you are working on a GPU and that's great
151

151

00:06:16,770  -->  00:06:19,057
but if you follow the installation instruction,
152

152

00:06:19,057  -->  00:06:22,950
we are working on CPU so we wanna start slowly.
153

153

00:06:22,950  -->  00:06:26,300
But don't worry we'll get some very good results.
154

154

00:06:26,300  -->  00:06:28,340
At first we'll get some correct results
155

155

00:06:28,340  -->  00:06:32,160
and then we will improve our CNN and get better results.
156

156

00:06:32,160  -->  00:06:34,590
All right so we are not going to choose 64 here
157

157

00:06:34,590  -->  00:06:37,590
we're gonna start with 32 feature detectors
158

158

00:06:37,590  -->  00:06:40,260
but then we will choose these 3 by 3 dimensions
159

159

00:06:40,260  -->  00:06:41,750
for our feature detectors
160

160

00:06:41,750  -->  00:06:46,023
and therefore we will add here 3, and 3.
161

161

00:06:47,260  -->  00:06:49,794
So that means that we create 32 feature detectors
162

162

00:06:49,794  -->  00:06:52,030
of three by three dimensions
163

163

00:06:52,030  -->  00:06:53,980
and therefore our convolutional layer
164

164

00:06:53,980  -->  00:06:56,623
will be composed of 32 feature maps.
165

165

00:06:57,590  -->  00:07:00,540
Then next argument, what is the next argument?
166

166

00:07:00,540  -->  00:07:02,530
This is border_mode.
167

167

00:07:02,530  -->  00:07:04,710
So border_mode that's not the most important here.
168

168

00:07:04,710  -->  00:07:06,730
This is just to specify how the feature detectors
169

169

00:07:06,730  -->  00:07:09,160
will handle the borders of the input image
170

170

00:07:09,160  -->  00:07:11,630
but most of the time we choose same here
171

171

00:07:11,630  -->  00:07:13,050
that's the default value.
172

172

00:07:13,050  -->  00:07:14,470
So that's what we're gonna choose here
173

173

00:07:14,470  -->  00:07:16,300
and therefore we don't need to input it
174

174

00:07:16,300  -->  00:07:19,480
since it will automatically take the default value.
175

175

00:07:19,480  -->  00:07:21,556
And then very important argument,
176

176

00:07:21,556  -->  00:07:23,010
input_shape.
177

177

00:07:23,010  -->  00:07:24,170
So what is input_shape?
178

178

00:07:24,170  -->  00:07:26,910
That's the shape of your input image
179

179

00:07:26,910  -->  00:07:30,040
on which you are going to apply your feature detectors
180

180

00:07:30,040  -->  00:07:32,130
through the convolution operation.
181

181

00:07:32,130  -->  00:07:34,020
And that's a very important argument
182

182

00:07:34,020  -->  00:07:36,800
because all our images don't have the same size.
183

183

00:07:36,800  -->  00:07:38,700
They don't have the same format
184

184

00:07:38,700  -->  00:07:40,810
and therefore we need to force them
185

185

00:07:40,810  -->  00:07:42,860
in some way having the same format.
186

186

00:07:42,860  -->  00:07:46,160
That means that we will convert all our images
187

187

00:07:46,160  -->  00:07:48,530
into one same single format
188

188

00:07:48,530  -->  00:07:51,330
and therefore one fixed size of the image
189

189

00:07:51,330  -->  00:07:52,730
and we will do this conversion
190

190

00:07:52,730  -->  00:07:54,520
during the image pre-processing part,
191

191

00:07:54,520  -->  00:07:56,030
right after we build our CNN
192

192

00:07:56,030  -->  00:07:59,520
and just before we fit our CNN to our images.
193

193

00:07:59,520  -->  00:08:02,080
And therefore in this input_shape argument,
194

194

00:08:02,080  -->  00:08:04,840
we need to specify what is the expected format
195

195

00:08:04,840  -->  00:08:06,840
of our input images.
196

196

00:08:06,840  -->  00:08:10,440
That is the format into which our images will be converted.
197

197

00:08:10,440  -->  00:08:12,650
And so which format are we going to choose here.
198

198

00:08:12,650  -->  00:08:14,610
Well first, let's go back to this slide
199

199

00:08:14,610  -->  00:08:17,060
to give us a quick reminder that input images
200

200

00:08:17,060  -->  00:08:19,240
are converted into 3D arrays,
201

201

00:08:19,240  -->  00:08:21,010
if the image is a colored image
202

202

00:08:21,010  -->  00:08:24,420
and into 2D arrays if the image is a black-and-white image.
203

203

00:08:24,420  -->  00:08:27,010
So here since we are working with colored images,
204

204

00:08:27,010  -->  00:08:29,910
well our images will be converted into 3D arrays
205

205

00:08:29,910  -->  00:08:31,990
during the image pre-processing part
206

206

00:08:31,990  -->  00:08:34,160
and so what is this 3D array basically?
207

207

00:08:34,160  -->  00:08:36,510
Well it is composed of three channels,
208

208

00:08:36,510  -->  00:08:39,140
each channel corresponding to one color,
209

209

00:08:39,140  -->  00:08:41,040
blue green or red,
210

210

00:08:41,040  -->  00:08:43,710
and each channel corresponds to one to the array
211

211

00:08:43,710  -->  00:08:46,830
that contains the pixels of our images.
212

212

00:08:46,830  -->  00:08:48,830
And therefore if we go back to spider,
213

213

00:08:48,830  -->  00:08:51,500
well we see that input_shape has three arguments,
214

214

00:08:51,500  -->  00:08:55,630
three, 256, 256, so as you might have guessed,
215

215

00:08:55,630  -->  00:08:57,650
three is the number of channels,
216

216

00:08:57,650  -->  00:08:58,950
so it will only be one
217

217

00:08:58,950  -->  00:09:00,700
if we're dealing with a black and white image
218

218

00:09:00,700  -->  00:09:03,500
or three if we are dealing with the colored image
219

219

00:09:03,500  -->  00:09:08,500
and then 256 and 256 are the dimensions of the 2D array
220

220

00:09:08,500  -->  00:09:10,030
in each of the channel.
221

221

00:09:10,030  -->  00:09:13,380
So here that means that we are expecting colored images
222

222

00:09:13,380  -->  00:09:17,460
of 256 x 256 pixels.
223

223

00:09:17,460  -->  00:09:20,250
Great but this is not the format that we're gonna use here,
224

224

00:09:20,250  -->  00:09:22,580
we're gonna use a smaller format
225

225

00:09:22,580  -->  00:09:25,220
and that is for the same reason that we're using a CPU
226

226

00:09:25,220  -->  00:09:27,722
and that we don't wanna wait too many hours
227

227

00:09:27,722  -->  00:09:28,930
before the code finishes to execute.
228

228

00:09:28,930  -->  00:09:31,600
And therefore here we're gonna choose a small format
229

229

00:09:31,600  -->  00:09:33,260
which will be three channels
230

230

00:09:33,260  -->  00:09:35,680
because of course we wanna keep these information
231

231

00:09:35,680  -->  00:09:37,060
related to the colors,
232

232

00:09:37,060  -->  00:09:39,790
because you know cats and dogs don't have the same colors
233

233

00:09:39,790  -->  00:09:42,210
and therefore differentiating them with the colors
234

234

00:09:42,210  -->  00:09:44,550
can be helpful to classify them.
235

235

00:09:44,550  -->  00:09:45,810
So we will keep the colors
236

236

00:09:45,810  -->  00:09:48,070
and therefore we choose three here,
237

237

00:09:48,070  -->  00:09:52,010
but then we will choose a 64 x 64 formats
238

238

00:09:52,010  -->  00:09:53,860
because this will be way enough
239

239

00:09:53,860  -->  00:09:56,050
to get some good accuracy results.
240

240

00:09:56,050  -->  00:09:57,220
You will see in the end
241

241

00:09:57,220  -->  00:09:58,440
if you're working on a GPU,
242

242

00:09:58,440  -->  00:10:02,930
you're welcome to choose a larger format like 128 by 128
243

243

00:10:02,930  -->  00:10:06,110
or even 256 by 256,
244

244

00:10:06,110  -->  00:10:08,430
but you either need to use a GPU
245

245

00:10:08,430  -->  00:10:11,530
or run your code before sleeping for 8 hours.
246

246

00:10:11,530  -->  00:10:13,200
So let's input this format
247

247

00:10:13,200  -->  00:10:14,540
but then there is one last thing
248

248

00:10:14,540  -->  00:10:16,250
that we need to be careful with here.
249

249

00:10:16,250  -->  00:10:19,170
It's the order of the input_shape parameters here.
250

250

00:10:19,170  -->  00:10:21,550
As you can see we start with the number of channels
251

251

00:10:21,550  -->  00:10:23,830
and then the dimensions of the 2D arrays.
252

252

00:10:23,830  -->  00:10:26,130
But this order of these input shape parameters,
253

253

00:10:26,130  -->  00:10:28,580
is the order used in Theano back-end.
254

254

00:10:28,580  -->  00:10:32,110
And here as you can see we're using TensorFlow back-end.
255

255

00:10:32,110  -->  00:10:34,480
And the order in TensorFlow back-end
256

256

00:10:34,480  -->  00:10:37,110
is not the same order as in Theano back-end.
257

257

00:10:37,110  -->  00:10:39,360
This is actually the opposite order we need to start
258

258

00:10:39,360  -->  00:10:42,070
with the 2D arrays dimensions
259

259

00:10:42,070  -->  00:10:44,110
and then the number of channels.
260

260

00:10:44,110  -->  00:10:46,030
And therefore what we need to input here
261

261

00:10:46,030  -->  00:10:48,070
for our input_shape argument
262

262

00:10:48,070  -->  00:10:53,070
is input_shape, equals then parentheses,
263

263

00:10:54,240  -->  00:10:56,890
first the dimensions of our 2D arrays
264

264

00:10:56,890  -->  00:10:59,380
and therefore 64, 64
265

265

00:11:01,030  -->  00:11:04,150
and then the number of channels 3
266

266

00:11:04,150  -->  00:11:06,650
and that is because we're using TensorFlow back-end.
267

267

00:11:06,650  -->  00:11:08,560
So just be careful with it,
268

268

00:11:08,560  -->  00:11:10,430
make sure that you're using TensorFlow back-end
269

269

00:11:10,430  -->  00:11:11,810
if you're using this code,
270

270

00:11:11,810  -->  00:11:13,930
and if you are using Theano back-end,
271

271

00:11:13,930  -->  00:11:16,921
well just input three, 64 and 64.
272

272

00:11:16,921  -->  00:11:20,910
All right and now we just have one last argument to input
273

273

00:11:20,910  -->  00:11:23,410
which is the activation function,
274

274

00:11:23,410  -->  00:11:26,010
exactly as we did for our fully connected layers
275

275

00:11:26,010  -->  00:11:28,030
in the artificial neural network that we built
276

276

00:11:28,030  -->  00:11:29,180
in the previous section.
277

277

00:11:29,180  -->  00:11:31,610
Only here we're doing it for a different purpose,
278

278

00:11:31,610  -->  00:11:34,000
for the A and N we used this activation function
279

279

00:11:34,000  -->  00:11:36,370
to activate the neurons in the neural network.
280

280

00:11:36,370  -->  00:11:39,150
Here we are using this activation function which by the way
281

281

00:11:39,150  -->  00:11:42,400
will also be the rectifier activation function
282

282

00:11:42,400  -->  00:11:44,230
but just to make sure that we don't have
283

283

00:11:44,230  -->  00:11:47,550
any negative pixel values in our feature maps.
284

284

00:11:47,550  -->  00:11:49,290
Depending on the parameters that we use
285

285

00:11:49,290  -->  00:11:51,220
for our convolution operation,
286

286

00:11:51,220  -->  00:11:54,090
we can get some negative pixels in the feature map
287

287

00:11:54,090  -->  00:11:56,300
and we need to remove these negative pixels
288

288

00:11:56,300  -->  00:11:57,930
in order to have non-linearity
289

289

00:11:57,930  -->  00:11:59,740
in our convolutional neural network
290

290

00:11:59,740  -->  00:12:02,070
because of course classifying some images
291

291

00:12:02,070  -->  00:12:03,610
is a nonlinear problem
292

292

00:12:03,610  -->  00:12:06,390
and so we need to have non-linearity in our model.
293

293

00:12:06,390  -->  00:12:09,200
And that's why we use this activation function here,
294

294

00:12:09,200  -->  00:12:11,230
this rectifier activation function
295

295

00:12:11,230  -->  00:12:14,320
to make sure we get this non-linearity.
296

296

00:12:14,320  -->  00:12:15,410
So let's add it,
297

297

00:12:15,410  -->  00:12:17,930
it's exactly the same as what we did before.
298

298

00:12:17,930  -->  00:12:21,650
We input this activation parameter here,
299

299

00:12:21,650  -->  00:12:24,120
then equals and then in quotes,
300

300

00:12:24,120  -->  00:12:25,980
we input the name of the rectifier function
301

301

00:12:25,980  -->  00:12:27,763
which is as usual relu.
302

302

00:12:28,610  -->  00:12:30,580
Perfect, and that's done.
303

303

00:12:30,580  -->  00:12:33,250
Our convolutional layer is ready to be added
304

304

00:12:33,250  -->  00:12:35,590
in our convolutional neural network.
305

305

00:12:35,590  -->  00:12:38,440
So let's select this line and execute.
306

306

00:12:38,440  -->  00:12:39,940
Here we go, perfect.
307

307

00:12:39,940  -->  00:12:43,710
Our first convolutional layer was correctly added.
308

308

00:12:43,710  -->  00:12:45,820
So we are ready to move on to step two,
309

309

00:12:45,820  -->  00:12:46,910
the Pooling step
310

310

00:12:46,910  -->  00:12:49,400
and that's what we'll do in the next tutorial.
311

311

00:12:49,400  -->  00:12:51,000
Until then, enjoy deep learning.
