1
00:00:00,160 --> 00:00:01,590
All right welcome back.

2
00:00:01,590 --> 00:00:03,490
So we're going to build something again.

3
00:00:03,510 --> 00:00:04,330
It's tiny.

4
00:00:04,380 --> 00:00:08,430
It's not going to amaze you but we're at least using the things we've learned so far.

5
00:00:08,430 --> 00:00:14,400
So variables alongside data types and having to convert data types using format strings that sort of

6
00:00:14,400 --> 00:00:14,870
thing.

7
00:00:15,060 --> 00:00:21,320
So what we're going to build is a converter which apparently misspelled both within a year and an hour

8
00:00:22,020 --> 00:00:22,670
anyway.

9
00:00:22,860 --> 00:00:27,310
What's it's going to do is take kilometers and convert them to Miles.

10
00:00:27,570 --> 00:00:30,120
Or you could easily make it work the other way around.

11
00:00:30,240 --> 00:00:31,220
Totally up to you.

12
00:00:31,290 --> 00:00:38,460
But the somewhat new part the novel bit is that it's going to ask a user in the command line how many

13
00:00:38,460 --> 00:00:40,770
kilometers do you want to convert to Miles.

14
00:00:40,830 --> 00:00:45,230
And then the user will type in I dunno 50 or something like that.

15
00:00:45,240 --> 00:00:46,770
So here's kind of how.

16
00:00:46,860 --> 00:00:47,940
Here's how it will work.

17
00:00:47,940 --> 00:00:56,500
Let me clear up my terminal and I have a file a solution file I'll just run that now Python 3 converter

18
00:00:56,540 --> 00:00:59,590
duppy Why how many kilometers did you run today.

19
00:00:59,610 --> 00:01:01,460
Let's say I do a long race.

20
00:01:01,470 --> 00:01:07,570
I did a 50 K my 50 Clomid run was 31 point 0 7 miles.

21
00:01:07,580 --> 00:01:10,160
So notice how it asked me for input you know same thing here.

22
00:01:10,160 --> 00:01:17,390
Let's say I only ran do nine kilometers which is 5.5 nine miles.

23
00:01:17,600 --> 00:01:18,860
So that's what we're going to build.

24
00:01:19,190 --> 00:01:22,970
And the first thing we need to talk about is how we actually get user input.

25
00:01:23,180 --> 00:01:24,610
So let's make a new file.

26
00:01:24,860 --> 00:01:27,590
I'm going to call it mileage.

27
00:01:27,750 --> 00:01:31,460
Why call it whatever you want if you're using Cloud 9.

28
00:01:31,520 --> 00:01:34,940
You know open the file up with the card 9 editor you Sublime Text.

29
00:01:34,940 --> 00:01:40,930
If you're on a Mac or PC and you have it installed or just any text editor but I have the SBL command

30
00:01:41,670 --> 00:01:46,460
I'm going to open it up and the first thing I'm going to show you is this little bit of magic called

31
00:01:46,670 --> 00:01:51,210
input and it's actually no more magic than any other bit of Python code.

32
00:01:51,290 --> 00:01:57,290
It's a function just like the other ones you've seen like print or Ent. to convert something to an integer

33
00:01:57,530 --> 00:01:59,540
or as TR for string.

34
00:01:59,870 --> 00:02:03,000
We haven't talked really about functions but that's all we're going to say for now.

35
00:02:03,170 --> 00:02:06,470
And input will ask the user to enter something.

36
00:02:06,650 --> 00:02:07,900
It doesn't really ask the user.

37
00:02:07,900 --> 00:02:12,800
It just changes the prompt in the command line and it waits for the user to type something and hit the

38
00:02:12,800 --> 00:02:15,130
return key hit the enter key.

39
00:02:15,140 --> 00:02:18,890
And the important thing is that we need to store the value in a variable.

40
00:02:18,890 --> 00:02:21,840
So I'm going to just call it KAMC.

41
00:02:22,040 --> 00:02:25,240
So we're going from kilometers to Miles and my version.

42
00:02:25,250 --> 00:02:26,950
But feel free to do it the other way around.

43
00:02:26,940 --> 00:02:31,010
You just need to change the coefficient that we divide or multiply by.

44
00:02:31,280 --> 00:02:33,280
So KMC equals input.

45
00:02:33,440 --> 00:02:37,620
And let's start by just printing a line up here that I don't know.

46
00:02:37,730 --> 00:02:43,760
Let's go with how many kilometers Did you or do you want to convert.

47
00:02:43,760 --> 00:02:45,680
Did you cycle today.

48
00:02:45,680 --> 00:02:47,000
Why not.

49
00:02:47,000 --> 00:02:49,290
It's a little less crazy to do 50 kilometers.

50
00:02:49,310 --> 00:02:54,720
Cycling versus running and all we'll do after this is just print.

51
00:02:55,440 --> 00:03:02,820
OK you said and let's make this an F string or actually that's just too concatenations so.

52
00:03:02,860 --> 00:03:06,580
OK you said plus Cambs.

53
00:03:06,680 --> 00:03:10,080
So it seemed to just parrot it back to the user.

54
00:03:10,130 --> 00:03:11,610
So let's go to the command line now.

55
00:03:11,690 --> 00:03:12,310
OK.

56
00:03:12,500 --> 00:03:13,440
So here we are.

57
00:03:13,550 --> 00:03:16,290
And the file is called mileage dot p y.

58
00:03:16,310 --> 00:03:20,810
So Python 3 mileage and it says how many kilometers did you cycle today.

59
00:03:20,820 --> 00:03:22,620
Let's say I did 57.

60
00:03:22,950 --> 00:03:23,310
OK.

61
00:03:23,330 --> 00:03:24,780
You said 57.

62
00:03:24,800 --> 00:03:25,880
Very useful program.

63
00:03:25,880 --> 00:03:26,690
Thank you.

64
00:03:26,810 --> 00:03:28,150
It's working just fine.

65
00:03:28,280 --> 00:03:34,600
So input again gets input from the user and saves the value in a variable.

66
00:03:34,610 --> 00:03:35,860
Now what data type is it.

67
00:03:35,870 --> 00:03:36,820
This is important.

68
00:03:36,950 --> 00:03:41,300
You can actually infer it already based off of the fact that this worked.

69
00:03:41,300 --> 00:03:43,910
Remember if it was a number it wouldn't.

70
00:03:43,910 --> 00:03:47,860
If it is an integer or float it would not concatenate with a string.

71
00:03:48,050 --> 00:03:55,100
So we can deduce that it is a string but that's going to be a problem because we need to do math with

72
00:03:55,100 --> 00:03:55,550
it.

73
00:03:55,790 --> 00:04:01,020
So right now it's a string 50 ups like this.

74
00:04:01,250 --> 00:04:07,790
And if we try and divide it and I think I'll look it up but it's 1.6 something to go from kilometers

75
00:04:07,790 --> 00:04:08,530
to Miles.

76
00:04:08,570 --> 00:04:09,640
Let me do that now.

77
00:04:09,730 --> 00:04:11,440
There you go on Google.

78
00:04:11,450 --> 00:04:14,210
One mile is 1.6 0 9 3 4.

79
00:04:14,330 --> 00:04:19,280
Ok so I'm going to copy that and it's going to paste that here for now.

80
00:04:19,550 --> 00:04:21,610
So of course this won't work.

81
00:04:21,620 --> 00:04:26,780
First of all it won't print anything out or save it to variable but also it's a string divided by a

82
00:04:26,780 --> 00:04:27,130
float.

83
00:04:27,140 --> 00:04:28,270
That's a problem.

84
00:04:28,280 --> 00:04:36,710
So what we want to do is turn K.M. is that the user entered into a float so we could do it just like

85
00:04:36,770 --> 00:04:37,650
this.

86
00:04:37,820 --> 00:04:45,560
If you're comfortable with doing sort of two layers here of taking a float of the input and that works

87
00:04:45,560 --> 00:04:46,220
fine.

88
00:04:46,280 --> 00:04:49,130
We could also do this.

89
00:04:49,640 --> 00:04:52,150
So float.

90
00:04:52,350 --> 00:04:59,220
And the reason I'm doing float by the way is for more precise division because let's say the user entered

91
00:04:59,490 --> 00:05:01,280
fifty point five kilometers.

92
00:05:01,410 --> 00:05:07,680
If we turn that into an int it would turn it into 50 and then divide by 1.6 versus if they entered fifty

93
00:05:07,680 --> 00:05:08,610
point five.

94
00:05:09,030 --> 00:05:10,260
And we cast it as a float.

95
00:05:10,260 --> 00:05:12,130
It will stay fifty point five.

96
00:05:12,470 --> 00:05:13,030
OK.

97
00:05:13,230 --> 00:05:20,970
So let's save this to a variable and we'll call it miles equals float kilometers which is the user input

98
00:05:21,360 --> 00:05:24,110
divided by 1.6 0 9 3 4.

99
00:05:24,420 --> 00:05:28,650
Let's see if that works now and maybe just maybe we'll have an error.

100
00:05:28,650 --> 00:05:29,820
Let's see what happens.

101
00:05:32,900 --> 00:05:38,360
Let's say we did eight kilometers and we didn't even get the error I expected.

102
00:05:38,360 --> 00:05:40,460
We did something really silly or I did.

103
00:05:40,550 --> 00:05:42,740
I'm not using miles.

104
00:05:42,860 --> 00:05:44,650
I'm just pointing out the initial input.

105
00:05:44,650 --> 00:05:47,240
So we did this math and it just goes to waste.

106
00:05:47,240 --> 00:05:49,220
All right let's try that again.

107
00:05:50,030 --> 00:05:52,280
So we did eight and we get an error.

108
00:05:52,310 --> 00:05:54,380
OK so this is the one I was expecting.

109
00:05:54,380 --> 00:05:58,360
Notice we get a type error must be string not float.

110
00:05:58,700 --> 00:06:05,060
So what's happening is this concatenation is upset because this is a float that the result of the division

111
00:06:05,060 --> 00:06:07,840
is a float regardless of the fact that this is a float.

112
00:06:07,850 --> 00:06:13,220
Remember that any regular division where there's a single division sign single slash is going to be

113
00:06:13,220 --> 00:06:14,060
a float.

114
00:06:14,100 --> 00:06:16,790
If we did a double one it would be integer division.

115
00:06:16,990 --> 00:06:17,260
OK.

116
00:06:17,270 --> 00:06:19,800
So a float we can just add that to a string.

117
00:06:19,940 --> 00:06:23,760
So we're going to use handy dandy strings.

118
00:06:24,230 --> 00:06:35,120
So rather than just saying OK you said Let's say that is equal to and in here we'll put our Miles variable

119
00:06:35,740 --> 00:06:38,700
and then afterwards just type the word miles.

120
00:06:38,840 --> 00:06:43,060
So we should get that is equal to seven miles or six point two miles or whatever we want.

121
00:06:43,190 --> 00:06:44,770
Now let's try running it again.

122
00:06:46,500 --> 00:06:52,770
I ran 8 or cycled 8 kilometers that's equal to four point nine seven owner and 8 blah blah blah blah

123
00:06:52,770 --> 00:06:53,670
blah miles.

124
00:06:53,760 --> 00:06:54,580
So it's working.

125
00:06:54,630 --> 00:07:00,990
The math is working the problem or it's not necessarily a problem but it's kind of annoying as how many

126
00:07:00,990 --> 00:07:02,670
decimal points we get here.

127
00:07:02,670 --> 00:07:04,360
We don't really want that.

128
00:07:04,380 --> 00:07:06,460
So let's round it which is new.

129
00:07:06,480 --> 00:07:08,190
We don't we don't know how to do that yet.

130
00:07:08,340 --> 00:07:10,320
Fortunately it's very simple.

131
00:07:10,320 --> 00:07:16,920
There's another little function called Round round is a bit different than something like input in that

132
00:07:16,920 --> 00:07:20,820
we actually provide two different items two pieces of data to it.

133
00:07:20,820 --> 00:07:27,910
The first is the thing around and the second is how many decimal points to round it to.

134
00:07:27,930 --> 00:07:35,150
So I'm going to comment that out for now command slash on subcontext or just Octa Thorpe hash sign.

135
00:07:35,580 --> 00:07:37,260
And we have a couple of choices.

136
00:07:37,350 --> 00:07:39,110
We could just round it right here.

137
00:07:39,150 --> 00:07:43,450
So round miles and let's go to two decimal points.

138
00:07:44,250 --> 00:07:45,870
So this works.

139
00:07:45,870 --> 00:07:51,630
Remember that instead these curly braces it sort of I mean it's regular Python where we can do math

140
00:07:51,660 --> 00:07:57,150
we could call something like round it depends on you know how long your code is you don't want this

141
00:07:57,150 --> 00:08:03,020
to be excessively long in the middle of your string but it's not a problem as far as the code goes.

142
00:08:03,030 --> 00:08:05,600
So now let's try it let's do eight again.

143
00:08:05,610 --> 00:08:08,930
There we go 4.9 seven miles.

144
00:08:09,010 --> 00:08:16,840
So we could do it this way or we could come up here and do the round and do this whole thing.

145
00:08:16,930 --> 00:08:18,000
Comet too.

146
00:08:18,220 --> 00:08:23,150
But I actually think it's better to do it on a separate line because that line gets a little bit long.

147
00:08:23,170 --> 00:08:33,540
So let's do miles equals around miles to down here we just display miles.

148
00:08:33,550 --> 00:08:36,410
So all we're doing is repeating this.

149
00:08:36,550 --> 00:08:39,520
It is another line but it's a little nicer to read.

150
00:08:39,580 --> 00:08:44,860
So we're doing the math first and then we could even call this rounded miles if we want but we're going

151
00:08:44,860 --> 00:08:52,280
to call it Miles and update it to be rounded of the current value of miles to two decimal places.

152
00:08:52,780 --> 00:08:55,390
And let's just double check that it still works.

153
00:08:56,410 --> 00:08:57,960
Let's say we ran.

154
00:08:58,390 --> 00:09:03,960
Let's go with 30 kilometers that's equal to eighteen point six four miles.

155
00:09:04,060 --> 00:09:04,770
Right.

156
00:09:04,810 --> 00:09:06,660
That seems to be working just fine.

157
00:09:06,680 --> 00:09:14,000
The last change we could make is just tell the user kilometers first and then Miles so instead of saying

158
00:09:14,030 --> 00:09:20,300
that is equal to you could say your curly braces K ambs

159
00:09:22,640 --> 00:09:28,380
kilometer ride is.

160
00:09:28,810 --> 00:09:30,070
And then let's do.

161
00:09:30,070 --> 00:09:30,650
Am I.

162
00:09:30,670 --> 00:09:32,350
So we're just working with abbreviations.

163
00:09:32,350 --> 00:09:38,950
So this should say something like your 10 kilometer ride is what it is 10 kilometers whatever the math

164
00:09:38,950 --> 00:09:39,620
is.

165
00:09:39,870 --> 00:09:46,460
And Miles let's try that again 10 kilometers your 10K ride is 6.2 1 miles.

166
00:09:46,630 --> 00:09:47,420
Great.

167
00:09:47,740 --> 00:09:50,650
We could do was instead but otherwise that's it.

168
00:09:50,650 --> 00:09:52,560
So kind of the way we went about this.

169
00:09:52,560 --> 00:09:59,240
I was trying to showcase a couple of things kind of forced us to encounter that type error was and it

170
00:09:59,280 --> 00:10:03,180
was a big one where input gives us a string but we're trying to do math with it.

171
00:10:03,220 --> 00:10:04,650
So we need to turn into a float.

172
00:10:04,720 --> 00:10:07,910
But then to printed out we can't concatenate because it's a float now.

173
00:10:07,930 --> 00:10:11,870
So we need to use an F string and that's really the key thing here.

174
00:10:11,950 --> 00:10:16,230
Round was a nice little bonus on top but it's not something we covered in this section.

175
00:10:16,300 --> 00:10:18,780
We will come back to functions like around.

176
00:10:18,820 --> 00:10:22,070
We'll come to that later but for now this is all that we need.

177
00:10:22,180 --> 00:10:24,400
It's a nice simple little converter.

178
00:10:24,700 --> 00:10:26,690
Probably will never use it ever.

179
00:10:26,890 --> 00:10:31,360
But it's still given the small amount of pieces that we have in our toolbox.

180
00:10:31,360 --> 00:10:35,640
It's something at least it's better than just you know printing a single variable out.

181
00:10:35,950 --> 00:10:36,610
OK.

182
00:10:36,610 --> 00:10:39,070
Next up we're moving onto boolean logic.
