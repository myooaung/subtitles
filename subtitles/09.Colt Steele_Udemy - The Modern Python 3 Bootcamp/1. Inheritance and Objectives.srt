1
00:00:00,300 --> 00:00:05,190
A welcome back to a brand new section we're still talking about object oriented programming but we're

2
00:00:05,190 --> 00:00:07,120
moving on from the basics.

3
00:00:07,140 --> 00:00:09,330
So this section covers a couple of things.

4
00:00:09,330 --> 00:00:11,440
I'll just lay out the objectives first.

5
00:00:11,700 --> 00:00:13,280
We're going to talk about inheritance.

6
00:00:13,440 --> 00:00:19,170
What that means why you'd use it and then we'll learn how to define or to add inheritance to our classes

7
00:00:19,530 --> 00:00:22,830
including something called multiple inheritance.

8
00:00:22,830 --> 00:00:28,980
Then we'll learn what method resolution order is and understand how it works and why you need to care

9
00:00:28,980 --> 00:00:30,510
about it MRO.

10
00:00:30,600 --> 00:00:31,910
That's coming up.

11
00:00:32,040 --> 00:00:36,690
Then we'll talk about a fun word called polymorphism which sounds a lot more intense than it actually

12
00:00:36,690 --> 00:00:37,240
is.

13
00:00:37,470 --> 00:00:40,860
And then finally we'll learn how to add special methods to classes.

14
00:00:40,860 --> 00:00:44,820
I know it doesn't sound very specific but we'll just wait until we get there to talk about what that

15
00:00:44,820 --> 00:00:45,450
means.

16
00:00:45,450 --> 00:00:48,990
Now let's just dive right in and start talking about inheritance.

17
00:00:49,300 --> 00:00:49,880
OK.

18
00:00:50,280 --> 00:00:52,500
So here's a side that says inheritance.

19
00:00:52,680 --> 00:00:58,880
Imagine that we have a user class from the last section making a web site like Reddit.

20
00:00:59,070 --> 00:01:01,810
I don't know if everybody uses Reddit but unread it.

21
00:01:01,810 --> 00:01:09,990
If you sign up for an account you're just a base regular old user but on each sub Reddit there are moderators

22
00:01:10,050 --> 00:01:16,410
who are just regular users who have been promoted or selected as moderators to help moderate the content

23
00:01:16,650 --> 00:01:23,190
remove things that are either against the rules or inappropriate you know help handle trolls and spam

24
00:01:23,190 --> 00:01:24,550
and all this other stuff.

25
00:01:24,810 --> 00:01:32,340
And then further above that there's another level called admin or administrator and think admins based.

26
00:01:32,340 --> 00:01:37,920
I don't know exactly how it works but let's just say in our example admins can remove any comment by

27
00:01:37,920 --> 00:01:41,140
anyone regardless of the subject or wherever it is on the site.

28
00:01:41,280 --> 00:01:43,090
They can delete anything.

29
00:01:43,140 --> 00:01:45,810
Change things in the database do whatever they want.

30
00:01:45,960 --> 00:01:51,240
So there's different levels but we want three classes and let's say we're trying to represent all three

31
00:01:51,240 --> 00:01:52,630
of those with our code.

32
00:01:52,740 --> 00:01:55,050
What we could do is make three different classes.

33
00:01:55,050 --> 00:02:00,570
User moderator admin but there's a lot of content that's shared between them.

34
00:02:00,630 --> 00:02:06,540
Each one has a user name and an email address and a password and each one has a method called comment

35
00:02:06,600 --> 00:02:11,610
and log in and log out and all of that functionality is exactly the same to all of them.

36
00:02:11,820 --> 00:02:18,150
What we could do instead of redefining that everywhere is use inheritance to actually only write at

37
00:02:18,150 --> 00:02:20,950
one time in a base class.

38
00:02:21,240 --> 00:02:23,310
So that's what inheritance allows us to do.

39
00:02:23,310 --> 00:02:28,830
It allows us to define a class which inherits functionality from another class which we usually call

40
00:02:28,860 --> 00:02:31,470
a base or parent class.

41
00:02:31,470 --> 00:02:37,740
So in the example that I just gave we could have a user base class that had all of the things like user

42
00:02:37,750 --> 00:02:44,940
name email log in log out comment and then administrator could inherit from user.

43
00:02:45,000 --> 00:02:50,250
Likewise moderator could inherit from user but we're going to start off with something a bit simpler

44
00:02:50,670 --> 00:02:56,460
and first we have to actually answer how we create this relationship how do we tell Python that one

45
00:02:56,460 --> 00:02:58,770
thing is inheriting from another.

46
00:02:59,340 --> 00:03:00,730
And it looks like this.

47
00:03:00,780 --> 00:03:04,620
We pass the parent class as an argument to the definition.

48
00:03:04,650 --> 00:03:07,620
If the child class so we haven't seen this.

49
00:03:07,800 --> 00:03:10,350
Here I have two classes one called Animal.

50
00:03:10,350 --> 00:03:14,230
This is the base class and then I'm defining a class.

51
00:03:14,220 --> 00:03:16,370
Cat doesn't do anything at all.

52
00:03:16,770 --> 00:03:22,320
But notice that there is an argument being passed in the name of the Animal class.

53
00:03:22,320 --> 00:03:23,430
So usually we just write it.

54
00:03:23,430 --> 00:03:25,060
Classes like this up until now.

55
00:03:25,320 --> 00:03:31,230
But if we actually pass in an argument like this it tells Python this cat class inherits from the Animal

56
00:03:31,230 --> 00:03:32,010
class.

57
00:03:32,040 --> 00:03:35,700
So here's the same code just in a single file so we can run it.

58
00:03:35,920 --> 00:03:36,900
All that is going on.

59
00:03:36,930 --> 00:03:41,630
I have Animal class and there's a class attribute called Cool.

60
00:03:41,640 --> 00:03:47,580
I set it equal to be true and then there's an instance method called make sound which takes a sound

61
00:03:47,700 --> 00:03:52,020
like meow or growl or worth or whatever and it prints.

62
00:03:52,020 --> 00:03:54,840
This animal says and then the sound.

63
00:03:55,140 --> 00:04:04,080
So we could make a new animal you know a equals animal and then do a dot make sound and let's go with

64
00:04:04,380 --> 00:04:11,660
chirp like that you execute the code says this animal says chirp.

65
00:04:11,660 --> 00:04:12,610
That makes sense.

66
00:04:12,620 --> 00:04:13,830
This should not be new.

67
00:04:13,850 --> 00:04:20,100
We're making a new instance of animal and therefore we can run animal instance methods on an instance.

68
00:04:20,330 --> 00:04:26,290
But now if I create a cat let's go with blue equals a cat.

69
00:04:26,420 --> 00:04:29,050
And notice there's nothing instead of cat.

70
00:04:29,090 --> 00:04:35,380
You do have to add this pass otherwise Python will give you an error saying expected an indented block.

71
00:04:35,450 --> 00:04:39,030
If you don't have that there but there's no init or anything else right now.

72
00:04:39,170 --> 00:04:45,900
But there's no data we're passing in either no instance attributes or instance methods in cat but it

73
00:04:45,920 --> 00:04:47,450
didn't Herridge from animal.

74
00:04:47,530 --> 00:04:52,960
And so if I run this now and then I just do that's two blue dot make sound.

75
00:04:53,210 --> 00:04:56,780
And then passengers sound like meow lose the cat.

76
00:04:56,780 --> 00:05:00,220
And if I run it we get this animal says meow.

77
00:05:00,320 --> 00:05:04,060
Even though make sound is defined as an animal instance method.

78
00:05:04,280 --> 00:05:06,910
I could also do something like print blue dot.

79
00:05:06,980 --> 00:05:16,490
Cool and cool is a class attribute added on animal but Blue has access to it and they could do the same

80
00:05:16,490 --> 00:05:26,000
thing with cat dark cool and animal cool because the cat class inherits from the Animal class the class

81
00:05:26,030 --> 00:05:28,870
attribute cool is available.

82
00:05:28,940 --> 00:05:31,960
So I should see three trues printed out.

83
00:05:32,080 --> 00:05:33,200
Cool.

84
00:05:33,260 --> 00:05:39,590
One thing we can use a built in function called Is instance to actually verify for us that blue is a

85
00:05:39,590 --> 00:05:42,100
cat but blue is also an animal.

86
00:05:42,110 --> 00:05:47,630
So let me just show you if we just pass in blue and then a name of a class like animal.

87
00:05:47,660 --> 00:05:55,010
Let's start with cat and let's just do a print instance when common to everything else out.

88
00:05:55,610 --> 00:05:58,520
So is instances a boolean method should return true or false.

89
00:05:58,520 --> 00:06:08,010
If Blue is a cat and we get true and if we change it to it's blue an animal we also get true.

90
00:06:08,510 --> 00:06:13,850
And technically we could change it to it's blue object.

91
00:06:14,030 --> 00:06:20,540
So all of these classes every everything in Python inherits from the base object class.

92
00:06:20,570 --> 00:06:22,970
So by running this we also get true.

93
00:06:23,600 --> 00:06:27,900
And we could use it instance we could test if a list is a list.

94
00:06:27,920 --> 00:06:34,190
So you may not use instance that often but here it illustrates to us that blue is an instance of cat

95
00:06:34,520 --> 00:06:37,500
but at the same time it's also an instance of animal.

96
00:06:37,790 --> 00:06:44,540
And of course this is a really silly example with no methods no instance attributes really nothing going

97
00:06:44,540 --> 00:06:50,420
on but I'll show you in the next video may have something more complex how it really can help save a

98
00:06:50,420 --> 00:06:51,650
lot of space in your code.

99
00:06:51,650 --> 00:06:54,550
A lot of time and just reduce duplication.

100
00:06:54,680 --> 00:06:55,900
So that's coming up next.

101
00:06:55,910 --> 00:06:59,730
But for now this is a quick intro to the idea of inheritance.

102
00:06:59,750 --> 00:07:02,080
Next I'll show you how to actually use it in practice.
