1
00:00:00,250 --> 00:00:00,580
Hey there.

2
00:00:00,600 --> 00:00:01,440
Welcome back.

3
00:00:01,440 --> 00:00:06,270
In this video I'm just going to talk about one important feature of strings so let's say we have a string

4
00:00:06,480 --> 00:00:09,760
like ELO Well three characters.

5
00:00:09,930 --> 00:00:15,860
This string is indexed meaning that each character has a number that corresponds to it.

6
00:00:16,020 --> 00:00:21,270
So I can access individual pieces of the string using that number and the first thing you should know

7
00:00:21,330 --> 00:00:23,360
is that those numbers start at zero.

8
00:00:23,430 --> 00:00:26,940
So the first character is the zero with character.

9
00:00:27,660 --> 00:00:33,280
Then this character is the first character and then the second owl is the second character.

10
00:00:33,720 --> 00:00:39,120
And if he wanted to access those pieces of data we use square brackets.

11
00:00:39,120 --> 00:00:43,460
This is a silly example to do something like this but I put that number in there.

12
00:00:43,470 --> 00:00:45,520
EHLO Well bracket is zero.

13
00:00:45,540 --> 00:00:53,020
He's going to give me el more commonly he would have it in a variable like name equals.

14
00:00:53,550 --> 00:01:03,640
Chuck and then if I do name bracket zero it gives me see if I do named bracket 1 h.

15
00:01:03,670 --> 00:01:09,250
I won't go all the way through if I wanted to get the last letter I need to do 0 1 2 3 4.

16
00:01:09,520 --> 00:01:18,460
If I try to access 5 however we get an error string index out of range we will talk a lot more about

17
00:01:18,700 --> 00:01:21,440
indices and indexes indexed items.

18
00:01:21,440 --> 00:01:24,460
Let's just call them that including lists later on.

19
00:01:24,460 --> 00:01:29,560
But I just wanted to expose you to this this feature this ability of strings one simple use case of

20
00:01:29,560 --> 00:01:30,890
this that I can show you.

21
00:01:31,030 --> 00:01:35,070
Imagine we have an app where we ask the user if they want to play again.

22
00:01:35,080 --> 00:01:41,800
It's a game at the end we ask do you want to keep playing and they can either type yes or yeah or Y

23
00:01:41,890 --> 00:01:45,340
or Glaspell this way or you like this.

24
00:01:45,340 --> 00:01:46,790
We want all of those options.

25
00:01:46,960 --> 00:01:55,920
And for no they could say no or nah or 9 or some other no sounding negative that starts with an end.

26
00:01:56,410 --> 00:02:01,530
What we can do is just check the first character so we can have a variable called the answer.

27
00:02:01,620 --> 00:02:05,600
And let's say answers equal to ya like this.

28
00:02:05,980 --> 00:02:07,180
I would just access.

29
00:02:07,300 --> 00:02:13,470
Answer zero and that's why and then that way if this was instead.

30
00:02:13,660 --> 00:02:17,080
Yes sir I do answer zero.

31
00:02:17,230 --> 00:02:18,670
And it gives me why again.

32
00:02:18,730 --> 00:02:23,670
One other point that I should make is that we can access them using negative numbers as well.

33
00:02:23,680 --> 00:02:24,040
So I have.

34
00:02:24,040 --> 00:02:25,100
Yes sir.

35
00:02:25,240 --> 00:02:32,800
In the answer very well if I pass in negative one it starts from the end and gave and gives me are negative

36
00:02:32,800 --> 00:02:33,540
2.

37
00:02:33,700 --> 00:02:36,340
It's going to give me I can keep going.

38
00:02:36,370 --> 00:02:41,890
So if I wanted to get y for some reason I wanted to start here I would go negative one two three four

39
00:02:41,890 --> 00:02:45,060
five six negative six gives me y.

40
00:02:45,400 --> 00:02:46,440
Or you could just do zero.

41
00:02:46,510 --> 00:02:47,690
Much easier anyway.

42
00:02:47,860 --> 00:02:53,230
This may not seem that useful right now but later on when we get to things like lists we'll be using

43
00:02:53,230 --> 00:02:56,510
this syntax all the time indices in Python.

44
00:02:56,540 --> 00:02:57,580
Always start at zero.

45
00:02:57,610 --> 00:02:59,380
So it's important to understand that as well.

46
00:02:59,440 --> 00:03:00,630
And that's pretty much it.
