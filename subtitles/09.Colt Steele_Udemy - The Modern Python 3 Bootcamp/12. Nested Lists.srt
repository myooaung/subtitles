1
00:00:00,330 --> 00:00:02,150
Oh right almost done with lists.

2
00:00:02,150 --> 00:00:03,750
It's been a long ride.

3
00:00:03,750 --> 00:00:06,260
We're talking about nested bursts in this video.

4
00:00:06,570 --> 00:00:10,820
So nested lists are just lists inside of other lists.

5
00:00:10,950 --> 00:00:13,210
So we've we can also call them multi-dimensional.

6
00:00:13,200 --> 00:00:15,190
This is another way you'll hear them.

7
00:00:15,240 --> 00:00:21,690
But remember any list can contain any sort of elements whether it's strings or numbers of booleans or

8
00:00:21,780 --> 00:00:22,900
other lists.

9
00:00:22,950 --> 00:00:26,740
So it might look a bit weird but it's totally normal.

10
00:00:26,790 --> 00:00:29,070
We have a list that has three elements.

11
00:00:29,130 --> 00:00:36,110
If we ran the length of this list it would give us three but each of those elements is its own list.

12
00:00:36,150 --> 00:00:38,720
So that's where we get the multi dimensional part.

13
00:00:38,760 --> 00:00:42,600
You might be wondering right about now when would you ever use something like this.

14
00:00:42,630 --> 00:00:47,700
And the answer is actually probably more frequently than you would expect unless you are expecting frequently

15
00:00:47,700 --> 00:00:49,260
in which case you're right.

16
00:00:49,260 --> 00:00:50,980
So here's a couple of examples.

17
00:00:51,030 --> 00:00:56,820
If you're building any sort of game like a board game like tic tac toe or you need to lay things out

18
00:00:56,850 --> 00:01:02,430
in a maze you'll commonly used nested list if you're interested in learning about web development.

19
00:01:02,430 --> 00:01:06,890
You'll find yourself working with data that contains list of lists all the time.

20
00:01:06,990 --> 00:01:13,650
Like imagine you've got some data back from Spotify or iTunes and it contained five most recent play

21
00:01:13,650 --> 00:01:19,610
this for a user each one of those playlists would have a list of songs associated with the playlists.

22
00:01:19,620 --> 00:01:26,910
So you have a list of lists each play list itself a list and you might even go further than that because

23
00:01:26,970 --> 00:01:32,790
the information for a song instead of a playlist could be another list or it would most likely be a

24
00:01:32,790 --> 00:01:37,620
dictionary which you haven't talked about yet but we get these nested structures also if we're talking

25
00:01:37,620 --> 00:01:43,140
about any sort of tabular data and the information we would plot in a chart or turn into some sort of

26
00:01:43,140 --> 00:01:46,460
visualization that's almost always nested data as well.

27
00:01:46,530 --> 00:01:50,940
So you know working with things and the mathematical data structures like matrices you'll find them

28
00:01:50,940 --> 00:01:51,860
nested as well.

29
00:01:51,870 --> 00:01:57,530
Basically anything in data science with Python your data is almost guaranteed to be nested.

30
00:01:57,530 --> 00:01:59,730
Oftentimes more than one layer deep.

31
00:01:59,760 --> 00:02:01,070
So just good to know.

32
00:02:01,290 --> 00:02:05,430
This is a real thing it's not just one of those things I'm showing you to be like hey look you can do

33
00:02:05,430 --> 00:02:06,990
this in python you never will.

34
00:02:06,990 --> 00:02:10,770
This is one of those things where it's like hey look you can do this in Python and you probably will

35
00:02:10,770 --> 00:02:11,780
do it all the time.

36
00:02:12,030 --> 00:02:15,030
And it's not as scary as it seems if you are feeling intimidated.

37
00:02:15,030 --> 00:02:16,740
There's lots of real world use cases.

38
00:02:16,830 --> 00:02:20,130
So let's let's see just how to access simple data.

39
00:02:20,700 --> 00:02:30,710
So here we have a nested list three items and each item is another list of numbers 1 2 3 4 5 6 7 8 9.

40
00:02:30,730 --> 00:02:36,130
So if I wanted to access this number here I first have to access the outer list.

41
00:02:36,250 --> 00:02:39,310
So this is the zero with element of the main list.

42
00:02:39,340 --> 00:02:41,640
So I accessed nested those brackets zero.

43
00:02:42,130 --> 00:02:46,170
And then I add bracket 1 which will give me 0 1.

44
00:02:46,180 --> 00:02:47,280
Here's another example.

45
00:02:47,280 --> 00:02:49,410
We have just nested list of one.

46
00:02:49,570 --> 00:02:51,310
So that's going to be this list.

47
00:02:51,310 --> 00:02:52,560
0 1 2.

48
00:02:52,570 --> 00:02:56,260
So we want one and then we use negative 1 to get the last item.

49
00:02:56,260 --> 00:03:01,190
So it's copy this over to my terminal and let's say I wanted to access 8.

50
00:03:01,270 --> 00:03:02,580
How would I do that.

51
00:03:03,030 --> 00:03:03,480
OK.

52
00:03:03,640 --> 00:03:09,340
So nested list and I first need to target this last list which is 0 1 2.

53
00:03:09,640 --> 00:03:12,620
Or I could do negative 1 as well.

54
00:03:12,690 --> 00:03:13,390
What did I do wrong.

55
00:03:13,450 --> 00:03:18,700
Nested that stereo and negative 1 Give me the last item.

56
00:03:18,840 --> 00:03:22,160
So I could do negative 1 and then to access 8.

57
00:03:22,380 --> 00:03:33,200
I could do 0 1 or I could do negative one negative two if I wanted to and I could also instead of negative

58
00:03:33,200 --> 00:03:37,980
1 at the beginning I could do two because it's 0 1 2.

59
00:03:38,510 --> 00:03:41,830
And so the way I would do it typically would be this.

60
00:03:42,470 --> 00:03:44,640
I don't like using negative numbers most of the time.

61
00:03:44,720 --> 00:03:46,550
I would just do to one.

62
00:03:46,940 --> 00:03:48,330
So we just chain them together.

63
00:03:48,620 --> 00:03:53,180
So what about printing values or iterating through nested lists.

64
00:03:53,300 --> 00:03:58,130
So you have to use two loops which we have seen nested loops before.

65
00:03:58,130 --> 00:04:02,690
Briefly I let you know they are a thing and this is a really common use case for them.

66
00:04:02,870 --> 00:04:08,530
If you have nested data structures you can loop through one layer at a time.

67
00:04:08,540 --> 00:04:15,230
So in this first example this first loop is going to go through every item in the top level list.

68
00:04:15,230 --> 00:04:23,330
So three times it's going to loop through and this variable right here one is going to be equal to this

69
00:04:23,330 --> 00:04:24,530
less the first time through.

70
00:04:24,680 --> 00:04:30,550
So then we're going to loop through that list on its own and have its own list have its own loop for

71
00:04:30,560 --> 00:04:32,840
vowel in this list.

72
00:04:32,840 --> 00:04:34,120
Print Vout.

73
00:04:34,190 --> 00:04:40,370
So our first loop is going to go start here on this list and it's going to run in the second loop.

74
00:04:40,370 --> 00:04:41,720
One two three times.

75
00:04:41,900 --> 00:04:47,120
And then the first loop starts over and moves here and it runs one to three times.

76
00:04:47,120 --> 00:04:50,700
Print them out and then it starts over again and does these three.

77
00:04:51,110 --> 00:04:52,930
So this is a very common practice.

78
00:04:53,090 --> 00:04:58,080
If you have nested loops or nested lists you need to use nested loops to print them out.

79
00:04:58,400 --> 00:05:04,310
So here I have a file with a nested list structure representing latitude and longitude coordinates.

80
00:05:04,370 --> 00:05:06,580
So each one of these could be a location.

81
00:05:06,650 --> 00:05:11,990
Maybe this is the I don't know maybe we have a clone of Airbnb.

82
00:05:12,620 --> 00:05:17,900
And these are the locations of properties that are owned by a user or something.

83
00:05:18,190 --> 00:05:24,020
So if we want to just loop through them in the simplest way I could just say for I don't know property

84
00:05:24,770 --> 00:05:26,030
or do location.

85
00:05:26,200 --> 00:05:28,980
Hello C in chords.

86
00:05:30,170 --> 00:05:36,290
And if we just print out lock Alosi don't forget parentheses and we run this.

87
00:05:36,290 --> 00:05:46,370
This is going to be Python 3 we get our three lists and then instead of that we could do for chord in

88
00:05:46,490 --> 00:05:55,660
location print record which is just going to reference each individual coordinate in my colon if we

89
00:05:55,800 --> 00:06:00,450
try it now end up with what you see here.

90
00:06:00,510 --> 00:06:04,780
So using nested loops is definitely a thing with nested list.

91
00:06:04,830 --> 00:06:08,630
However that also brings us to nested list comprehension.

92
00:06:08,640 --> 00:06:09,770
So here's an example.

93
00:06:09,960 --> 00:06:17,480
Here we have the same nest list three items that are each sub lists and they go 1 2 3 4 5 6 7 8 9.

94
00:06:17,700 --> 00:06:20,930
So just to print the value for each one of these.

95
00:06:21,380 --> 00:06:22,110
All we have to do.

96
00:06:22,110 --> 00:06:26,980
So instead of array brackets we have our exact same syntax but start here.

97
00:06:27,030 --> 00:06:31,850
So for one is an L I think it's an L.

98
00:06:31,910 --> 00:06:35,690
Yeah that's what it does for list and nested lists.

99
00:06:35,780 --> 00:06:40,330
I mean that looks exactly like the one and the L S are the same.

100
00:06:40,570 --> 00:06:42,640
I wouldn't name a variable once it must be an l.

101
00:06:42,780 --> 00:06:48,990
So for lists in nested list for each one of these we then have this nested thing.

102
00:06:48,990 --> 00:06:51,530
Print the value for Vout in L..

103
00:06:51,900 --> 00:06:55,900
Then another example here of using a nested list comprehension is.

104
00:06:55,980 --> 00:07:00,390
In this case to generate a nested list that could represent a game board or something.

105
00:07:00,780 --> 00:07:04,940
And we're using range twice so we could start in either place.

106
00:07:05,070 --> 00:07:06,340
We start here.

107
00:07:06,360 --> 00:07:07,090
So are making.

108
00:07:07,380 --> 00:07:10,390
This is going to be the individual lists inside the lists.

109
00:07:10,410 --> 00:07:13,260
We're going to generate a range from 1 to 3.

110
00:07:13,330 --> 00:07:14,570
It's not inclusive.

111
00:07:14,700 --> 00:07:20,580
So one to three and for each number in there we're going to make a list so we end up with one of these.

112
00:07:21,030 --> 00:07:27,170
So if we just ran this which we've done before we just get a single list.

113
00:07:27,180 --> 00:07:28,250
One two three.

114
00:07:28,690 --> 00:07:29,460
OK.

115
00:07:29,730 --> 00:07:32,750
But we're doing that multiple times.

116
00:07:32,760 --> 00:07:37,210
You can see for each value in the range one to three.

117
00:07:37,350 --> 00:07:39,360
That means doing it three times.

118
00:07:39,480 --> 00:07:42,770
We're going to generate this this and this.

119
00:07:42,990 --> 00:07:43,770
So it's identical.

120
00:07:43,770 --> 00:07:45,550
One two three one two three one two three.

121
00:07:45,690 --> 00:07:47,640
And let's look at it now.

122
00:07:48,030 --> 00:07:48,910
There we go.

123
00:07:49,350 --> 00:07:56,250
And then here's another example this time using some lovely nested list comprehension plus conditional

124
00:07:56,250 --> 00:07:56,820
logic.

125
00:07:56,820 --> 00:07:57,110
OK.

126
00:07:57,150 --> 00:07:57,750
I tried it.

127
00:07:57,840 --> 00:08:00,900
I recorded a couple of versions of me explaining this last thing.

128
00:08:00,900 --> 00:08:02,090
Let me try this again.

129
00:08:02,370 --> 00:08:08,220
So this version is very similar to this except we have some additional conditional logic.

130
00:08:08,220 --> 00:08:14,520
So rather than just generating the numbers 1 to 3 we're actually taking those numbers and we're deciding

131
00:08:15,000 --> 00:08:20,180
if there even or odd are going to spit out an X or an 0 instead of 1 to 3.

132
00:08:20,850 --> 00:08:23,310
So let's start with the simple part right here.

133
00:08:23,370 --> 00:08:29,650
We're repeating this list generator this list comprehension that's nested three times.

134
00:08:29,910 --> 00:08:33,040
So whatever we do we'll have three of them which is what we end up with.

135
00:08:33,080 --> 00:08:35,860
And so what are we actually doing inside that list.

136
00:08:36,060 --> 00:08:38,590
Well we're doing something three times again.

137
00:08:38,760 --> 00:08:39,240
Range.

138
00:08:39,240 --> 00:08:40,630
One two three.

139
00:08:40,770 --> 00:08:43,890
And each time through we're going to call that number numb.

140
00:08:43,890 --> 00:08:46,200
So numb starts at 1.

141
00:08:46,230 --> 00:08:49,620
So then recheck is numb mode to not equal to zero.

142
00:08:49,620 --> 00:08:52,920
So that means is it not even meaning is it odd.

143
00:08:53,280 --> 00:09:00,490
And one is so we do an x next time through in the range we go from one up to two.

144
00:09:00,540 --> 00:09:04,120
So two is too mad to not equal to zero.

145
00:09:04,110 --> 00:09:06,970
That's false because it is even.

146
00:09:07,110 --> 00:09:07,620
So we do.

147
00:09:07,620 --> 00:09:14,120
Else 0 or so and so we get an 0 and then range goes up to three.

148
00:09:14,280 --> 00:09:15,720
And that's the last time through.

149
00:09:16,080 --> 00:09:22,440
And three is odds we put an X and then we repeat this whole thing for the next time through this range.

150
00:09:22,440 --> 00:09:23,850
So this range started at 1.

151
00:09:23,850 --> 00:09:24,730
Now we're at 2.

152
00:09:24,770 --> 00:09:26,310
Then we go to three.

153
00:09:26,310 --> 00:09:28,050
And that results in this.

154
00:09:28,050 --> 00:09:32,660
So let's take a look at this and there we go.

155
00:09:32,790 --> 00:09:35,070
X x x x x x.

156
00:09:35,080 --> 00:09:40,150
So this would be like a tic tac toe game or three by three but let's say we wanted to generate the initial

157
00:09:40,150 --> 00:09:49,000
state of a game board where let's in our game our board could start out as like star star star or slashes

158
00:09:49,360 --> 00:09:52,900
and then as the game progresses we fill it in with X or so.

159
00:09:52,990 --> 00:09:59,800
So if we just wanted to generate a three by three grid a multi dimensional array of soly asterisks all

160
00:09:59,830 --> 00:10:03,720
we would have to do we start by repeating something three times.

161
00:10:03,730 --> 00:10:15,890
So we'll just do star string for vowel in range one comma for or we could shift that.

162
00:10:15,890 --> 00:10:16,660
Where'd that go.

163
00:10:16,670 --> 00:10:17,770
No i lost it.

164
00:10:18,020 --> 00:10:21,860
OK one more time I messed that up Arab star

165
00:10:25,380 --> 00:10:34,250
for and we'll just call it I in range 1 comma 4 so we end up with three.

166
00:10:34,590 --> 00:10:38,970
And what I'm trying to say before I lost it was that we could also do something like you know five to

167
00:10:38,970 --> 00:10:39,490
nine.

168
00:10:39,570 --> 00:10:40,480
And it doesn't matter.

169
00:10:40,680 --> 00:10:41,890
Well actually that does matter.

170
00:10:41,900 --> 00:10:43,370
It needs to be five to eight.

171
00:10:43,760 --> 00:10:44,220
OK.

172
00:10:44,370 --> 00:10:50,040
But we can shift this number up now to make it multi-dimensional instead of just doing a star.

173
00:10:50,190 --> 00:10:52,660
We're going to repeat the same thing.

174
00:10:53,270 --> 00:11:00,870
So in here if we just did this by the way we end up with just a single list with star but to add three

175
00:11:00,870 --> 00:11:06,550
stars in they're going to do star four.

176
00:11:07,080 --> 00:11:18,270
We could call it X it doesn't matter in range one comma for or we could do 4 x in 1 to 3 as a list does

177
00:11:18,270 --> 00:11:20,440
not matter how we structure this.

178
00:11:20,760 --> 00:11:24,860
But I think the simplest way is just to use a range.

179
00:11:24,930 --> 00:11:26,070
Same thing here.

180
00:11:26,400 --> 00:11:30,370
Range one comma for.

181
00:11:30,550 --> 00:11:31,340
And there we go.

182
00:11:31,570 --> 00:11:32,410
Oh gosh.

183
00:11:32,450 --> 00:11:33,040
OK.

184
00:11:33,210 --> 00:11:33,890
That was a lot.

185
00:11:33,940 --> 00:11:36,900
So congratulations if you made it through here and made it through this.

186
00:11:36,940 --> 00:11:38,340
If you just skipped to the end.

187
00:11:38,920 --> 00:11:41,640
Well you found a good spot to skip to because it's the end.

188
00:11:41,920 --> 00:11:42,840
We made it through.

189
00:11:43,120 --> 00:11:43,630
OK.

190
00:11:43,630 --> 00:11:46,600
So next up we have a couple of exercises.

191
00:11:46,600 --> 00:11:52,400
There's one tiny topic I want to cover that will take a minute and then we're done with lists of these.
