WEBVTT
1
00:00:00.250 --> 00:00:05.750
Already the first thing you want to talk about is iterators and also the rebels.

2
00:00:05.850 --> 00:00:09.480
And with the differences they're both words they're spelled differently.

3
00:00:09.480 --> 00:00:13.700
They have to do with iterating with looping but they are different.

4
00:00:14.160 --> 00:00:14.470
OK.

5
00:00:14.490 --> 00:00:16.460
Let's talk about iterator first.

6
00:00:16.500 --> 00:00:20.700
So an iterator is any object that can be iterated upon.

7
00:00:20.700 --> 00:00:23.710
Now what does it mean for something to be iterated upon.

8
00:00:23.820 --> 00:00:29.790
You could think of it as just anything we could run a for loop on but behind the scenes there's a method

9
00:00:29.790 --> 00:00:33.720
called Next when you call next on an iterator or when a for loop calls.

10
00:00:33.720 --> 00:00:39.410
Next on an iterator it returns the next item one item at a time you call.

11
00:00:39.410 --> 00:00:41.300
Next you get one item become next.

12
00:00:41.310 --> 00:00:46.500
You get the next item and you keep going until you hit the end or until the for the pits the end.

13
00:00:46.530 --> 00:00:49.000
We'll talk about how it works and what happens at the end.

14
00:00:49.080 --> 00:00:55.230
But an iterator is the actual object that is being iterated over using the next function.

15
00:00:55.560 --> 00:01:02.170
And iterable on the other hand is simply an object that returns an iterator.

16
00:01:02.250 --> 00:01:05.200
So I know you might be thinking OK great.

17
00:01:05.210 --> 00:01:06.600
What does that actually mean.

18
00:01:06.840 --> 00:01:07.850
Here's an example.

19
00:01:08.100 --> 00:01:17.200
The string hello on it's own or any string is not an iterator but it's an iterable because if I call

20
00:01:17.200 --> 00:01:23.280
this it her function and I pass in Hello the string that returns to me an iterator.

21
00:01:23.890 --> 00:01:27.220
All these words sound like jibberish after saying them too many times.

22
00:01:27.310 --> 00:01:34.630
So this on its own is iterable just like a list isn't iterable the list is never actually directly looped

23
00:01:34.630 --> 00:01:35.380
over.

24
00:01:35.380 --> 00:01:42.250
What happens is that the for loop calls it her passes in the list and then that returns an iterator

25
00:01:42.400 --> 00:01:47.430
that then the loop will call next on the iterator over and over and over until it hits the end.

26
00:01:47.650 --> 00:01:48.540
OK I'm going to demo it.

27
00:01:48.550 --> 00:01:49.670
If you're confused.

28
00:01:49.690 --> 00:01:50.620
That's totally normal.

29
00:01:50.620 --> 00:01:56.930
Let me just show you first of all define a variable called name and set it equal to Oprah.

30
00:01:57.160 --> 00:01:57.630
OK.

31
00:01:57.880 --> 00:01:59.090
So I have this string.

32
00:01:59.710 --> 00:02:03.270
And on its own the string is not an iterator.

33
00:02:03.640 --> 00:02:04.840
And we could test that right.

34
00:02:04.840 --> 00:02:07.150
Trying to do next on name.

35
00:02:07.740 --> 00:02:11.130
And it actually tells us String object is not an iterator.

36
00:02:11.170 --> 00:02:16.160
So whenever we call next on something it needs to be an iterator a string on its own isn't.

37
00:02:16.390 --> 00:02:26.410
However if we then call it ter ETR and then pass in name just like this it returns to us a string iterator

38
00:02:26.410 --> 00:02:27.750
object.

39
00:02:27.790 --> 00:02:34.290
Now we didn't capture a variable so let's do that again and I'll call this it in her name.

40
00:02:34.370 --> 00:02:41.710
OK so it contains the iterator string is iterable but it's not an iterator when we call it her with

41
00:02:41.710 --> 00:02:42.470
a string.

42
00:02:42.520 --> 00:02:44.790
It returns a string iterator.

43
00:02:44.950 --> 00:02:45.570
OK.

44
00:02:45.850 --> 00:02:47.780
So here we have a string iterator.

45
00:02:47.800 --> 00:02:56.500
So when we do something like for char in Oprah what the for the for loop will do behind the scenes is

46
00:02:56.500 --> 00:02:59.680
take this thing here whether it's a list or a string or something else.

47
00:02:59.680 --> 00:03:06.640
In our case a string and it calls it her on it that returns the iterator and then the for loop to go

48
00:03:06.640 --> 00:03:10.620
through each item in the iterator uses the next function.

49
00:03:10.780 --> 00:03:18.700
So let's talk about next now when next is calls on an iterator the iterator should return the next item.

50
00:03:18.910 --> 00:03:19.720
Makes sense.

51
00:03:19.720 --> 00:03:21.880
It returns one item at a time.

52
00:03:21.930 --> 00:03:28.840
So each iteration through the iterator and it keeps returning one thing at a time until it hits the

53
00:03:28.840 --> 00:03:34.600
end of whatever it is a string a string iterator will return one character starting with the first character

54
00:03:34.870 --> 00:03:38.050
and then the next one the next on the next one and each time next is called.

55
00:03:38.050 --> 00:03:43.480
It keeps returning the next character Intel where at the end of the string then it raises a stop iteration

56
00:03:43.510 --> 00:03:44.200
error.

57
00:03:44.200 --> 00:03:50.170
And this is a standard protocol that needs to be set up in any iterator that exists or any that we define

58
00:03:50.170 --> 00:03:52.450
on our own and we'll talk about that later in the section.

59
00:03:52.600 --> 00:03:55.600
For example with this for you appear on Oprah the string.

60
00:03:55.750 --> 00:03:59.710
It gets the string iterator version of that and then it calls next.

61
00:03:59.710 --> 00:04:02.130
Over and over and we can do that without a for loop.

62
00:04:02.230 --> 00:04:04.550
So we already have the iterator.

63
00:04:04.590 --> 00:04:12.370
The string iterator here called I-T And first I call it and it gives me no next time it gives the P

64
00:04:13.390 --> 00:04:13.920
then.

65
00:04:13.930 --> 00:04:17.890
So you can see a for loop is doing the same thing behind the scenes it's calling next.

66
00:04:17.890 --> 00:04:19.340
Over and over and over.

67
00:04:19.620 --> 00:04:24.360
And then when I hit the end it gives us stop iteration error.

68
00:04:24.400 --> 00:04:29.570
We could try the same thing with a list like Nomes which is just one two three four five.

69
00:04:30.130 --> 00:04:35.830
And if I tried to call next on numbers right away it is not an iterator so it doesn't work.

70
00:04:35.830 --> 00:04:37.870
It is however iterable.

71
00:04:37.960 --> 00:04:44.520
So when I call her on numbers I'll save that to a variable and we'll just call it again.

72
00:04:45.350 --> 00:04:49.530
If I look at I know it's a list iterator object.

73
00:04:49.870 --> 00:04:57.100
OK so list iterator and then we call next on that and it gives us 1 and then 2 and then 3 and 4 and

74
00:04:57.100 --> 00:05:02.860
5 and then we hit the end and every time after that we just get stop iteration right.

75
00:05:02.890 --> 00:05:05.560
Hopefully this video cleared up a little bit.

76
00:05:05.560 --> 00:05:10.780
The distinction between iterators and intervals and iterable is simply something that when you call

77
00:05:10.880 --> 00:05:14.090
it on it will return an iterator.

78
00:05:14.160 --> 00:05:21.220
The iterator itself is what we iterate over what a for loop iterates over by calling next on it.

79
00:05:21.220 --> 00:05:26.890
So next up we're actually going to see how to define our own version of a for loop where we will actually

80
00:05:26.890 --> 00:05:32.080
be calling next an itor on our own so it's not going to be as full featured as a regular for loop but

81
00:05:32.080 --> 00:05:34.570
it should illustrate how all of this works together.
