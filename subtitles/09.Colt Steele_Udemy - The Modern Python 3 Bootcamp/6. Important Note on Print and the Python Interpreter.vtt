WEBVTT
1
00:00:00.110 --> 00:00:00.670
It there.

2
00:00:00.690 --> 00:00:05.200
So this video I'm recording a couple of weeks after I initially published the course.

3
00:00:05.310 --> 00:00:09.750
It's a topic a question a lot of students have been posting about and something I think is really important

4
00:00:09.750 --> 00:00:10.990
to address.

5
00:00:11.010 --> 00:00:13.740
With that said you might notice I am on a Mac.

6
00:00:13.770 --> 00:00:15.960
So if you are on a PC I apologize.

7
00:00:15.960 --> 00:00:21.000
I'm away from home but I think it's just important that I get this video out there so I only have a

8
00:00:21.000 --> 00:00:23.870
Mac laptop so I'm recording it with that.

9
00:00:23.880 --> 00:00:25.320
With that said it won't matter.

10
00:00:25.530 --> 00:00:29.670
As far as the content of the video what we're really covering it just might look a little different

11
00:00:29.850 --> 00:00:31.680
but everything should behave the same way.

12
00:00:31.680 --> 00:00:38.010
If I open up the Python interpreter I don't talk about is the difference between typing five and then

13
00:00:38.010 --> 00:00:39.460
running print 5.

14
00:00:39.870 --> 00:00:43.430
I know it seems like they both do the same thing but it's actually very different.

15
00:00:43.470 --> 00:00:48.450
Behind the scenes we have to talk about first is the point of the Python interpreter.

16
00:00:48.450 --> 00:00:49.690
What I'm running right now.

17
00:00:50.050 --> 00:00:55.970
The python interpreter is a place for quickly debugging code or testing things out trying new things.

18
00:00:56.070 --> 00:01:01.710
But it is not where most of it's not where anybody really writes applications or real code the way that

19
00:01:01.710 --> 00:01:02.820
it behaves.

20
00:01:02.850 --> 00:01:05.800
I think I've already mentioned this before it's something called a REPL.

21
00:01:05.810 --> 00:01:09.000
Our APL read evaluate print loop.

22
00:01:09.000 --> 00:01:10.250
It's what that stands for.

23
00:01:10.470 --> 00:01:13.860
I type some code like 42 or 43.

24
00:01:13.860 --> 00:01:20.190
I hit enter it reads it in it evaluates it which there's nothing really to evaluate but maybe I could

25
00:01:20.190 --> 00:01:21.340
do some math here.

26
00:01:21.450 --> 00:01:22.830
Jumping ahead a bit.

27
00:01:22.980 --> 00:01:25.750
It's going to evaluate the result and then print it.

28
00:01:25.770 --> 00:01:32.390
So read evaluate print prints that to me so I get 44 and then loops meaning I can do something again.

29
00:01:32.550 --> 00:01:34.740
And it keeps going over and over and over.

30
00:01:34.830 --> 00:01:35.690
So that's very different.

31
00:01:35.690 --> 00:01:37.600
Like I said than how most people write code.

32
00:01:37.800 --> 00:01:44.730
You might write 50 lines in a file and execute it all at once in the Python interpreter.

33
00:01:44.730 --> 00:01:49.950
You type a line and then another line and another line and they're all evaluated individually and printed

34
00:01:49.950 --> 00:01:50.680
back to you.

35
00:01:50.790 --> 00:01:57.300
But if we take a line just like five and I put it in a python file which I have over here where even

36
00:01:57.330 --> 00:02:04.380
Let's do 43 plus one just to be consistent and I save the file if I run this as Python it is going to

37
00:02:04.380 --> 00:02:05.430
be executed.

38
00:02:05.670 --> 00:02:10.800
So at some point Python is going to figure out what forty three plus one is but it's never going to

39
00:02:10.800 --> 00:02:12.490
show it to me it's never going to print it out.

40
00:02:12.510 --> 00:02:13.900
It just disappears.

41
00:02:14.250 --> 00:02:20.580
So if I run that file I have to quit out of here and then I'm going to run it.

42
00:02:20.610 --> 00:02:21.540
They called it demo.

43
00:02:21.600 --> 00:02:22.280
Why.

44
00:02:22.290 --> 00:02:27.090
If you're on a PC remember it's probably going to be Python not Python 3.

45
00:02:27.210 --> 00:02:30.830
Nothing happens or it looks like nothing happened so things printed out.

46
00:02:30.840 --> 00:02:37.470
But the code is still run but by wrapping it in print I am telling it OK I want you to output this thing

47
00:02:37.560 --> 00:02:39.590
to the terminal so I can see it.

48
00:02:39.900 --> 00:02:41.790
And now it's printed out.

49
00:02:41.790 --> 00:02:47.100
So in the Python interpreter over here I don't have to say print on anything.

50
00:02:47.430 --> 00:02:51.540
If I want to see the result because I'm going to see the result no matter what if I want to see it or

51
00:02:51.540 --> 00:02:52.160
not.

52
00:02:52.470 --> 00:02:57.590
But if I'm running it from a script which is what we'll be doing most of the time I have sort of write

53
00:02:57.600 --> 00:03:00.030
print in order to output something.

54
00:03:00.030 --> 00:03:03.610
So I know it doesn't seem like a big distinction but it's actually very important.

55
00:03:03.690 --> 00:03:09.110
Interpreter behaves in a special or different way than almost everything else that you'll do in Python.

56
00:03:09.120 --> 00:03:14.040
So just be aware of that right print if you want to output something from a script.

57
00:03:14.040 --> 00:03:17.640
If you're working in the interpreter then yeah it's not going to do much for you.

58
00:03:17.820 --> 00:03:18.440
OK.

59
00:03:18.930 --> 00:03:20.460
Hopefully that made it a little clearer.
