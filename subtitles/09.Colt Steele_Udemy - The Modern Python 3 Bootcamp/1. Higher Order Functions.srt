1
00:00:00,390 --> 00:00:01,770
Hey welcome back.

2
00:00:01,770 --> 00:00:07,530
Brand new section here all about something called decorator's and you may recall I mentioned decorator's

3
00:00:07,530 --> 00:00:12,020
once or twice in the O P section when we saw how to create a class method.

4
00:00:12,180 --> 00:00:14,570
You write at a class method in front of it.

5
00:00:14,640 --> 00:00:19,230
That's an example of a decorator but that's all I'll say about it for now because first we actually

6
00:00:19,230 --> 00:00:24,600
need to review some really important concepts about functions and more importantly higher order functions

7
00:00:24,750 --> 00:00:30,450
to review a higher order function is just a function that either returns another function from inside

8
00:00:30,840 --> 00:00:34,380
or accepts a function as an argument one or more functions.

9
00:00:34,380 --> 00:00:39,480
I should say as an example of passing functions as arguments to other functions we could do something

10
00:00:39,480 --> 00:00:46,800
like define a function called some and some excepts another function.

11
00:00:47,160 --> 00:00:48,240
And what is going to do.

12
00:00:48,240 --> 00:00:53,350
So we pass a number and like 10 and then passing a function like Square.

13
00:00:53,400 --> 00:01:00,510
So it looks something like this some 10 square squares not defined what it should return to me is the

14
00:01:00,510 --> 00:01:03,210
sum of the first ten squares.

15
00:01:03,240 --> 00:01:05,920
So then we need another function called Square.

16
00:01:06,000 --> 00:01:11,890
So if we defined that def Square just takes X and returns X times x.

17
00:01:11,910 --> 00:01:13,500
That's simple enough.

18
00:01:13,500 --> 00:01:20,130
And then I call some with 10 with square what we're going to do is in here we'll make a variable called

19
00:01:20,130 --> 00:01:23,220
Total and then we'll do a loop.

20
00:01:23,220 --> 00:01:24,350
We can start simple.

21
00:01:24,360 --> 00:01:33,680
For I in range let's go with Nahm instead in range in total plus equals.

22
00:01:33,810 --> 00:01:36,790
And then we call Phunk with no.

23
00:01:37,110 --> 00:01:37,950
OK.

24
00:01:38,520 --> 00:01:43,650
So the result when I call this here some ten Comus Square.

25
00:01:43,650 --> 00:01:49,530
It's going to pass and 10 here and the function square here set totals would be zero for number and

26
00:01:49,530 --> 00:01:50,220
range.

27
00:01:50,220 --> 00:01:53,710
Technically this starts with 0 which doesn't really.

28
00:01:53,790 --> 00:01:59,590
Kind of a waste because in our example we're summing 0 0 0 0 we're adding that to zero.

29
00:01:59,590 --> 00:02:01,020
That doesn't matter.

30
00:02:01,020 --> 00:02:03,780
The next time through however Nahm is 1.

31
00:02:03,960 --> 00:02:06,410
So we're adding phunk of numb.

32
00:02:06,420 --> 00:02:11,380
So square of 1 which is 1 we add that to total next time through number two.

33
00:02:11,460 --> 00:02:18,770
So we phunk know which passes to enter here and returns 4 and we add four and we keep going.

34
00:02:19,080 --> 00:02:21,510
So this works or it should work.

35
00:02:21,600 --> 00:02:28,080
And at the end we define need to return total and then to see something that's out of print here.

36
00:02:28,130 --> 00:02:28,650
OK.

37
00:02:28,890 --> 00:02:33,210
So 3 the way that our loop is set up we might need to adjust it.

38
00:02:33,660 --> 00:02:36,090
But if we print this right we get five.

39
00:02:36,270 --> 00:02:42,000
So what it did or what it did is it summed the square of zero square one in the square too which gives

40
00:02:42,000 --> 00:02:45,280
us 0 plus 1 plus 4.

41
00:02:45,330 --> 00:02:47,910
So that gives us 5 if we don't want to start at zero.

42
00:02:47,910 --> 00:02:53,330
We could shift things up one could do one comma and plus one like that.

43
00:02:53,670 --> 00:03:01,020
And if we run this now we get 14 which is squaring 1 2 and 3 and adding them together nine plus four

44
00:03:01,080 --> 00:03:02,090
plus one.

45
00:03:02,580 --> 00:03:03,100
OK.

46
00:03:03,420 --> 00:03:10,310
So the other thing I'll show you know of course we can find another function called cube.

47
00:03:10,630 --> 00:03:12,420
We don't know if you can hear that siren outside

48
00:03:15,450 --> 00:03:17,130
sounds like I'm in a war zone.

49
00:03:17,630 --> 00:03:18,710
Ok I'm back.

50
00:03:18,720 --> 00:03:20,830
That's just the weekly Tuesday at noon.

51
00:03:20,890 --> 00:03:22,290
Syren just a test.

52
00:03:22,290 --> 00:03:23,900
They always do in San Francisco.

53
00:03:24,000 --> 00:03:25,500
Reminds me every time I hear it.

54
00:03:25,620 --> 00:03:27,400
Another week of my life gone by.

55
00:03:27,720 --> 00:03:31,040
So where was a defining cube function.

56
00:03:31,040 --> 00:03:34,410
You can also just return x times x times x.

57
00:03:34,500 --> 00:03:40,100
And now I could pass Kuban instead and that should give us a larger number.

58
00:03:40,270 --> 00:03:41,700
Yes 36.

59
00:03:41,840 --> 00:03:45,790
So it's cubing 3 cubing 2 and cubing 1 and adding them together.

60
00:03:45,960 --> 00:03:51,530
So this is just to show that we can pass functions in to other functions as arguments we have to we've

61
00:03:51,540 --> 00:03:52,350
defined.

62
00:03:52,740 --> 00:03:58,590
And I guess I'll just put both of them down here so we can see and there we go passing them in.

63
00:03:58,620 --> 00:04:00,200
They're being called from inside the function.

64
00:04:00,330 --> 00:04:04,780
So that's one type of a higher order function which is passing functions as arguments.

65
00:04:04,810 --> 00:04:09,060
And now here's an example of nesting a function inside of another function.

66
00:04:09,270 --> 00:04:16,320
So there is a function called greed and all that greed does is it calls another function called mood

67
00:04:16,380 --> 00:04:23,250
that's defined inside so get mood just returned randomly either Hello their go away or I love you and

68
00:04:23,250 --> 00:04:28,020
there's a space at the end and then it's called user's choice from random.

69
00:04:28,050 --> 00:04:29,160
We've seen that before.

70
00:04:29,190 --> 00:04:30,300
It's called right here.

71
00:04:30,600 --> 00:04:36,330
And then we just concatenate the person like Toby that's being passed in as an argument and then return

72
00:04:36,330 --> 00:04:37,260
that result.

73
00:04:37,260 --> 00:04:43,620
So when I call greet Toby It actually ends up calling Get mood inside of grete get mood returns.

74
00:04:43,620 --> 00:04:44,190
Hello there.

75
00:04:44,190 --> 00:04:44,880
Go away.

76
00:04:45,000 --> 00:04:48,510
We concatenate that with person save that to result and we return.

77
00:04:48,510 --> 00:04:48,930
Go away.

78
00:04:48,930 --> 00:04:52,550
Toby or I love you Toby and we can run it.

79
00:04:52,590 --> 00:04:53,150
There we go.

80
00:04:53,160 --> 00:04:53,510
Go away.

81
00:04:53,520 --> 00:04:55,240
Toby I totally agree.

82
00:04:55,280 --> 00:04:56,760
He needs to leave.

83
00:04:56,910 --> 00:04:57,890
Change your mind.

84
00:04:58,170 --> 00:04:59,810
Hello there Toby.

85
00:04:59,820 --> 00:05:05,430
Anyway so that's an example of just running a function inside of another function that they're nested

86
00:05:05,430 --> 00:05:06,600
inside of one another.

87
00:05:06,750 --> 00:05:12,090
But we're not actually returning a function we're just returning the result or part of the result from

88
00:05:12,090 --> 00:05:14,490
a function combined or something else.

89
00:05:14,490 --> 00:05:15,810
So what we can do also.

90
00:05:15,870 --> 00:05:17,170
I don't know where this piece showed up.

91
00:05:17,220 --> 00:05:21,090
Come on what we can do also is actually return to function.

92
00:05:21,120 --> 00:05:22,590
So here's an example of that.

93
00:05:22,800 --> 00:05:25,350
So very similar all that we have.

94
00:05:25,440 --> 00:05:27,000
I'm using choice again.

95
00:05:27,000 --> 00:05:28,470
Let's look at the inner function first.

96
00:05:28,470 --> 00:05:31,350
It's called Get laugh and it just picks a laugh.

97
00:05:31,590 --> 00:05:32,610
Ha ha ha ha.

98
00:05:32,790 --> 00:05:44,080
Ello well or maybe we can stop one of those chosen randomly and we returned that from get a laugh that's

99
00:05:44,140 --> 00:05:45,190
all that it does.

100
00:05:45,520 --> 00:05:52,570
Then we have this outer function called Make laugh funk and it doesn't return the choice.

101
00:05:52,570 --> 00:05:55,080
It doesn't return the result of running this.

102
00:05:55,090 --> 00:05:59,180
It returns the entire function so it's not returning hahaha.

103
00:05:59,180 --> 00:06:01,200
LR Well it's returning this.

104
00:06:01,600 --> 00:06:02,140
OK.

105
00:06:03,020 --> 00:06:09,280
So this is a trivial example but we're creating a function that creates another function that returns

106
00:06:09,290 --> 00:06:10,670
function to us.

107
00:06:10,670 --> 00:06:14,110
So we have laugh which is just a variable name call it whatever we want.

108
00:06:14,180 --> 00:06:20,830
Equal is the result of running make laugh phunk the result of this is returning get left so it's just

109
00:06:20,840 --> 00:06:23,380
this make life funk.

110
00:06:23,530 --> 00:06:30,580
So then when we execute laugh we're executing this and it returns one of these choices and are printing

111
00:06:30,580 --> 00:06:31,210
it out.

112
00:06:31,480 --> 00:06:33,020
So let's see what happens.

113
00:06:33,130 --> 00:06:34,130
We execute it.

114
00:06:34,420 --> 00:06:37,100
We get oh well see.

115
00:06:37,510 --> 00:06:40,440
Well give me a ha ha ha ha.

116
00:06:40,450 --> 00:06:41,250
There we go.

117
00:06:41,440 --> 00:06:42,140
OK.

118
00:06:42,200 --> 00:06:43,670
That didn't just blow out your ears.

119
00:06:43,930 --> 00:06:47,020
So we've got a function returning a function here.

120
00:06:47,020 --> 00:06:50,060
That's another way of writing a higher order function.

121
00:06:50,080 --> 00:06:54,390
The last thing I'll show you is basically the same thing except working with an argument.

122
00:06:54,520 --> 00:06:58,300
So now we have a function called Make laugh at phunk.

123
00:06:58,360 --> 00:07:02,410
So the difference is that we're going to pass in someone like Linda.

124
00:07:02,410 --> 00:07:09,280
I'm sorry Linda and we're going to use that person's name and return it from the inner function.

125
00:07:09,280 --> 00:07:10,800
So we have the same pattern.

126
00:07:10,960 --> 00:07:12,760
It's called Make laugh at funk.

127
00:07:13,000 --> 00:07:15,770
And it just returned get laugh but get.

128
00:07:15,790 --> 00:07:19,720
Now not only picks a choice like haha ello ello or t.

129
00:07:19,840 --> 00:07:26,800
But also it returns the choice with the space and then the person's name so person.

130
00:07:26,800 --> 00:07:32,010
And this is important person is not defined instead of get a laugh it's not passed in.

131
00:07:32,010 --> 00:07:32,820
To get life.

132
00:07:33,070 --> 00:07:38,230
It was passed into make laugh at funky it's a parameter to the outer function but we have access to

133
00:07:38,230 --> 00:07:39,750
it in the inner function.

134
00:07:40,650 --> 00:07:43,310
Ok so this is actually what's known as closure.

135
00:07:43,610 --> 00:07:46,200
But I don't want to complicate things with with jargon.

136
00:07:46,250 --> 00:07:47,910
Let's just focus on what happens.

137
00:07:48,260 --> 00:07:55,860
So we return get left from this outer function get laugh is this and that just returns a randomly chosen

138
00:07:55,860 --> 00:07:56,620
life.

139
00:07:56,750 --> 00:07:59,710
It's a string with a laugh and then person's name.

140
00:07:59,750 --> 00:08:04,100
When we then call make laugh at func and they pass in Lunda.

141
00:08:04,500 --> 00:08:07,370
It's returning get laugh and get laugh.

142
00:08:07,430 --> 00:08:14,780
Has access to person so that every time I call laugh at it knows that person is Linda because when I

143
00:08:14,780 --> 00:08:19,670
construct urbanize I set up everything and I called Make laugh at phunk we return get laugh.

144
00:08:19,730 --> 00:08:20,940
Person was Linda.

145
00:08:21,370 --> 00:08:25,280
So every time Micallef we get Hollander or elsewhere Linda.

146
00:08:25,600 --> 00:08:26,410
Linda.

147
00:08:26,650 --> 00:08:27,760
So let's prove it.

148
00:08:27,760 --> 00:08:28,760
Execute it.

149
00:08:28,760 --> 00:08:29,780
There we go.

150
00:08:29,900 --> 00:08:31,500
I'm running four times.

151
00:08:31,850 --> 00:08:32,680
And so we get.

152
00:08:32,690 --> 00:08:35,860
Hahaha Linda Helliwell under here Linda.

153
00:08:36,130 --> 00:08:40,100
OK so none of these are particularly useful things.

154
00:08:40,130 --> 00:08:44,600
Maybe doing something like this you know passing and functioning at something.

155
00:08:44,610 --> 00:08:47,440
I mean we saw it with generators and recreated the for loop.

156
00:08:47,450 --> 00:08:51,830
Forgot about that example when we rewrote a for loop we passed in a function to enter the function and

157
00:08:51,830 --> 00:08:52,390
called it.

158
00:08:52,580 --> 00:08:54,210
So it is something that you will see.

159
00:08:54,260 --> 00:09:00,040
I'm not trying to say this is this is super weird or out there just more that these examples are silly.

160
00:09:00,080 --> 00:09:04,210
No greeting or saying hello well or something like that.

161
00:09:04,220 --> 00:09:09,320
Probably not what you'll spend your time on writing code but it's important because next in the next

162
00:09:09,320 --> 00:09:14,720
video we're talking about decorators and decorators basically are just functions inside of other functions

163
00:09:14,720 --> 00:09:16,730
functions that wrap around other functions.

164
00:09:16,880 --> 00:09:22,040
So you just need to be comfortable with the idea of higher order functions of functions accepting other

165
00:09:22,040 --> 00:09:25,230
functions as arguments and functions returning other functions.

166
00:09:25,390 --> 00:09:28,810
OK next up decorator's.

167
00:09:29,040 --> 00:09:29,760
If you.
