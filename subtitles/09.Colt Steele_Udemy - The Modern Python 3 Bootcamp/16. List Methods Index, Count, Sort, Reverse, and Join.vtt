WEBVTT
1
00:00:00.210 --> 00:00:00.990
Welcome back.

2
00:00:01.170 --> 00:00:06.580
So the past two videos on list methods have been somewhat organized around a central topic.

3
00:00:06.600 --> 00:00:10.270
The first one was about methods that add to a list.

4
00:00:10.290 --> 00:00:13.040
The second one was about methods that delete things from a list.

5
00:00:13.050 --> 00:00:15.590
This one is a bit more of a hodgepodge.

6
00:00:15.660 --> 00:00:20.230
So we're covering just kind of it's what's left over and putting them into a video.

7
00:00:20.520 --> 00:00:24.570
So we're going to go through each of these pretty quickly they're not as commonly used as things like

8
00:00:24.570 --> 00:00:27.090
deleting and inserting into a list.

9
00:00:27.090 --> 00:00:32.850
The first one is called index and index allows us to do is actually find the index the position of a

10
00:00:32.850 --> 00:00:35.640
given item instead of a list.

11
00:00:35.650 --> 00:00:43.330
So here's a list of numbers and if I ran it numbers index 6 it would tell me where 6 occurs in this

12
00:00:43.330 --> 00:00:44.100
list.

13
00:00:44.200 --> 00:00:51.460
So 0 1 and so if we get 1 or index of nine I get 0 1 2 3 4 is where 9 is.

14
00:00:51.460 --> 00:00:52.410
And we get 4.

15
00:00:52.570 --> 00:00:56.070
It also allows us to specify a start and end.

16
00:00:56.410 --> 00:01:03.720
So if we looked for 5 first and this numbers list we have some duplicates 5 5 6 7 5 8 8 9 10.

17
00:01:03.970 --> 00:01:10.900
If I just do numbers index of 5 it gives me the first time the first place it finds 5 which is zero.

18
00:01:11.070 --> 00:01:13.440
But I can also provide a start point.

19
00:01:13.470 --> 00:01:20.040
So this is basically saying find the index of 5 after the index have one and it's inclusive.

20
00:01:20.040 --> 00:01:26.220
So 0 1 and it starts looking for 5 from here and what do you know the first thing it finds is five.

21
00:01:26.220 --> 00:01:31.920
So it gives us one but if we do five and then a starting index of 2 0 1 2.

22
00:01:31.930 --> 00:01:34.880
So it starts right here and it looks for five.

23
00:01:35.100 --> 00:01:38.330
So it's not it to set three no four.

24
00:01:38.410 --> 00:01:40.170
And so it gives us index of four.

25
00:01:40.560 --> 00:01:43.930
And then finally we can do a start and end index.

26
00:01:44.010 --> 00:01:47.900
So in this case we're looking for eight between the index of 6 and 8.

27
00:01:48.060 --> 00:01:54.570
So 0 1 2 3 4 5 6 and find 8 right there.

28
00:01:54.670 --> 00:01:55.500
It's kind of complicated.

29
00:01:55.500 --> 00:01:58.530
We're talking about numbers and indexes and they're both numbers.

30
00:01:58.530 --> 00:02:04.560
But in this case the returns 6 because it's at the index of six and it didn't include this one which

31
00:02:04.560 --> 00:02:07.440
said which is that the index 5 because it's not between 6 and 8.

32
00:02:07.440 --> 00:02:07.980
All right.

33
00:02:08.190 --> 00:02:12.340
So just a quick demo we could do names dot index.

34
00:02:12.510 --> 00:02:15.900
And if I did Colt it gives me 0.

35
00:02:16.320 --> 00:02:23.310
But then if I said anything after even if I said after 1 it would give me four which is right here 0

36
00:02:23.340 --> 00:02:25.280
1 2 3 4.

37
00:02:25.830 --> 00:02:27.290
So that's index.

38
00:02:27.300 --> 00:02:31.280
Next up we'll talk about count count is nice and straightforward.

39
00:02:31.560 --> 00:02:38.470
It accepts a single input and it outputs the number of times that the input occurs in the list so here

40
00:02:38.470 --> 00:02:40.430
we have a list with a couple of duplicate.

41
00:02:40.560 --> 00:02:43.080
And if I ask how many times is to occur.

42
00:02:43.180 --> 00:02:51.100
Count two goes through and it finds one to three and it tells me three if I try and count 21 it's not

43
00:02:51.100 --> 00:02:51.650
there.

44
00:02:51.730 --> 00:02:52.780
So I get zero.

45
00:02:53.170 --> 00:02:58.480
And if I try and count three it's in there two times as we can see and not to count.

46
00:02:58.480 --> 00:02:59.960
So let's do a quick demo.

47
00:03:00.250 --> 00:03:06.150
Here we have names and I can do a count for colt which is in there twice.

48
00:03:06.280 --> 00:03:14.110
I can do that count for Salina which is only in there once or I could do dog count for Jared which is

49
00:03:14.110 --> 00:03:14.780
not in there.

50
00:03:14.920 --> 00:03:16.990
I should also mention if we try and do index.

51
00:03:16.990 --> 00:03:18.000
So hopping back.

52
00:03:18.000 --> 00:03:22.330
Just a quick second of something that doesn't exist like Jared.

53
00:03:22.450 --> 00:03:23.520
It gives us an error.

54
00:03:23.690 --> 00:03:28.700
So Jared is not in the list count unlike index doesn't throw an error.

55
00:03:28.810 --> 00:03:31.380
It just gives us zero because the count is zero.

56
00:03:31.500 --> 00:03:32.190
Right.

57
00:03:32.470 --> 00:03:34.890
After that we have reverse.

58
00:03:34.930 --> 00:03:36.310
So what reverse will do.

59
00:03:36.380 --> 00:03:40.660
It's also nice and easy it just reverses the order of the list in place.

60
00:03:40.840 --> 00:03:44.360
So meaning that it doesn't make a new list it doesn't duplicate it.

61
00:03:44.380 --> 00:03:48.800
And then reverse one copy and keep the original list in regular order.

62
00:03:48.880 --> 00:03:52.070
It updates the list that you're calling the method on.

63
00:03:52.270 --> 00:03:56.860
So first list is 1 2 3 4 and we call DOT reverse on it.

64
00:03:56.860 --> 00:04:01.660
It reverses the list so we don't actually see anything when we run first let's start reverse.

65
00:04:01.660 --> 00:04:02.740
Nothing is returned.

66
00:04:02.740 --> 00:04:06.250
But then if we look at first list it's reversed.

67
00:04:06.370 --> 00:04:08.590
So let's see we have names.

68
00:04:09.530 --> 00:04:11.340
Starts with and ends with Pablo.

69
00:04:11.360 --> 00:04:17.380
If I do names dot reverse and I need the parentheses it doesn't look like anything happened.

70
00:04:17.480 --> 00:04:19.370
But if I look at names it's reversed.

71
00:04:19.370 --> 00:04:25.820
Now we get publicity and a cold lead and so on the next method We'll take a look at is sort we're going

72
00:04:25.820 --> 00:04:31.610
to cover this briefly because later on we'll get into quite a bit of detail once we understand topics

73
00:04:31.610 --> 00:04:33.950
like custom functions and lambdas.

74
00:04:34.010 --> 00:04:40.280
But for now we can invoke or execute the sort function on the list and basically we don't put anything

75
00:04:40.280 --> 00:04:40.460
in.

76
00:04:40.460 --> 00:04:42.260
So we don't provide any input.

77
00:04:42.260 --> 00:04:43.360
Eventually we will be.

78
00:04:43.460 --> 00:04:46.220
And it will just sort things in ascending order.

79
00:04:46.220 --> 00:04:48.870
So here we have 6 4 1 2 5.

80
00:04:49.070 --> 00:04:56.180
I call sort and just like reverse it takes place in place it sorts in place meaning that another list

81
00:04:56.210 --> 00:04:56.940
is sorted.

82
00:04:57.080 --> 00:05:00.640
And if we look at another list it's now in ascending order.

83
00:05:00.770 --> 00:05:05.600
So I promised later on we will be spending time with customizing sport and being able to set up her

84
00:05:05.630 --> 00:05:11.060
own custom way of sorting depending on how we want things to work not just ascending and descending

85
00:05:11.060 --> 00:05:14.850
but actually depending on more complex data structures that we're trying to sort.

86
00:05:14.930 --> 00:05:21.670
But for now we just need to be aware that it exists and let's try running it now on names names that

87
00:05:21.680 --> 00:05:22.460
sort.

88
00:05:22.730 --> 00:05:25.810
So this is with strings rather than numbers.

89
00:05:26.020 --> 00:05:35.330
And if we look at sort's things ascending alphabetically and if we appended two names that append Aryeh

90
00:05:35.420 --> 00:05:38.770
with all caps just like that.

91
00:05:38.940 --> 00:05:43.860
And we look at names and now we do names that sort and look at names again.

92
00:05:44.000 --> 00:05:47.510
You can see that the capital area comes before the lower case area.

93
00:05:47.510 --> 00:05:49.190
So that brings us to the final method.

94
00:05:49.220 --> 00:05:54.470
We'll take a look at which is called join and join is actually different than all the other ones we've

95
00:05:54.470 --> 00:05:55.250
seen so far.

96
00:05:55.280 --> 00:05:57.510
Because it is not a list method.

97
00:05:57.890 --> 00:05:59.600
It's actually a string method.

98
00:05:59.600 --> 00:06:06.490
So it's the same idea where we have to do dot join but we're calling it on a string not a list.

99
00:06:06.590 --> 00:06:12.580
But the reason it's in this video is that it's really commonly used to convert lists to strings.

100
00:06:12.770 --> 00:06:15.020
So it takes an input a list like this one.

101
00:06:15.020 --> 00:06:24.260
Coding is fun three items and it joins them join words and whatever the string is that we we call join

102
00:06:24.260 --> 00:06:29.000
on will actually be put in between every item in the list.

103
00:06:29.030 --> 00:06:36.640
So we end up with coding space because we have a space here is space fun or here's another example.

104
00:06:36.780 --> 00:06:42.040
If we had a list with Mr. Steele and we do period space.

105
00:06:42.140 --> 00:06:50.150
Join name which is this we end up with Mr. Period space still and if we had another or something after

106
00:06:50.150 --> 00:06:53.830
Steele we would also have another period space that element.

107
00:06:53.850 --> 00:06:55.570
So it's converted to a string.

108
00:06:55.670 --> 00:06:56.660
The result is a string.

109
00:06:56.720 --> 00:07:00.320
So I realized this is bizarre compared to what we've been looking at so far.

110
00:07:00.680 --> 00:07:05.420
But it is technically a string method and it takes a list or another iterable argument which we haven't

111
00:07:05.420 --> 00:07:12.680
covered all of them and it joins them together a concatenates them by putting the base string whatever

112
00:07:12.680 --> 00:07:18.090
we're calling join on and shoving it in between each item of the list or iterable.

113
00:07:18.110 --> 00:07:24.050
But in our case it's a list and it returns a new string commonly used to make sentences out of a list

114
00:07:24.050 --> 00:07:24.680
of words.

115
00:07:24.680 --> 00:07:27.250
For example using a space.

116
00:07:27.260 --> 00:07:29.150
So let's check it out.

117
00:07:29.180 --> 00:07:33.680
We have names again here if we wanted to join all of them together.

118
00:07:33.770 --> 00:07:43.110
We could do something like I am friends with and then period dot join names.

119
00:07:43.220 --> 00:07:47.230
And this isn't going to work perfectly because you'll see what happens if we get Aryeh.

120
00:07:47.250 --> 00:07:48.720
I am friends with Aryeh.

121
00:07:48.730 --> 00:07:50.060
I'm friends with blue.

122
00:07:50.060 --> 00:07:53.880
So the first time around it doesn't quite work but the main idea.

123
00:07:53.890 --> 00:07:56.540
Let's try that again if we look at names by the way it's unchanged.

124
00:07:56.540 --> 00:07:58.220
It's still a list.

125
00:07:58.220 --> 00:08:00.690
This just returns a string.

126
00:08:00.800 --> 00:08:02.730
So let's join them on comma's.

127
00:08:02.810 --> 00:08:11.880
So make a variable called friends all set it equal to the string with a comma and a space Dadds join

128
00:08:12.780 --> 00:08:13.860
names.

129
00:08:13.860 --> 00:08:19.260
So this will take all the names and put a comma and a space between all of them and turn it into one

130
00:08:19.260 --> 00:08:20.220
giant string.

131
00:08:20.250 --> 00:08:26.440
And if we look at friends now because I stored in a variable we get Aryeh comma Aryeh come blue come

132
00:08:26.440 --> 00:08:27.510
a cold cold cold.

133
00:08:27.570 --> 00:08:28.330
Perfect.

134
00:08:28.580 --> 00:08:30.060
And so then we could use that somewhere.

135
00:08:30.060 --> 00:08:32.730
The key idea is that it takes a list it turns it into a string.

136
00:08:32.820 --> 00:08:36.220
It's a string method but it's commonly used with lists.

137
00:08:36.330 --> 00:08:37.550
So leave it at that.

138
00:08:37.620 --> 00:08:39.120
Everything else we saw in this video.

139
00:08:39.180 --> 00:08:42.900
And up until now in this section has been a list method.

140
00:08:43.110 --> 00:08:47.230
They work on a list so we you know we do names dot something.

141
00:08:47.310 --> 00:08:50.120
In this case we're doing a string dot something.

142
00:08:50.130 --> 00:08:53.400
It's the same idea but one is for this one just for strings.

143
00:08:53.400 --> 00:08:53.790
All right.

144
00:08:53.790 --> 00:08:56.240
So we've covered a lot of ground with all of these methods.

145
00:08:56.430 --> 00:09:02.160
This video in particular like I said is kind of a diverse mix of all sorts of different methods but

146
00:09:02.190 --> 00:09:04.170
hopefully you can see how some of these would be useful.
