WEBVTT
1
00:00:00.200 --> 00:00:06.610
A Welcome Back in this video we're going to dive into a built in module for testing called unit test.

2
00:00:06.610 --> 00:00:12.090
Out of all the things that I've shown you in this section unit test is by far the most popular.

3
00:00:12.300 --> 00:00:18.270
And in my opinion the easiest to use it has a bunch of powerful features for testing that things like

4
00:00:18.270 --> 00:00:20.230
duct tests just don't have.

5
00:00:20.490 --> 00:00:24.220
But before we even dive into that let's talk about unit testing.

6
00:00:24.300 --> 00:00:31.110
So unit testing is a concept external It's outside of Python or the unit test framework.

7
00:00:31.110 --> 00:00:37.350
Unit testing is simply the idea of when you're testing your application you test really small individual

8
00:00:37.350 --> 00:00:42.890
components small pieces which you would call units things like an individual class.

9
00:00:42.900 --> 00:00:44.240
You test the entire class.

10
00:00:44.310 --> 00:00:47.100
You test a module you test a function.

11
00:00:47.130 --> 00:00:53.700
Your focus is on these small units rather than you know testing an entire application in one go or testing

12
00:00:54.090 --> 00:00:56.810
multiple interactions between classes in one go.

13
00:00:56.820 --> 00:01:01.740
You focus on having full coverage of the smaller units that make up the larger application.

14
00:01:01.920 --> 00:01:07.090
So unit test is a testing framework which means that yes we have to forego a little bit of flexibility.

15
00:01:07.140 --> 00:01:08.810
We have to abide by the rules.

16
00:01:08.850 --> 00:01:12.020
The scaffolding that unit test forces us to live in.

17
00:01:12.120 --> 00:01:17.580
But if we do that we get a lot of powerful features for free out of the box and there's very good documentation

18
00:01:17.580 --> 00:01:17.790
on it.

19
00:01:17.800 --> 00:01:23.820
There's basic examples there's talks about the command line interface to run the tests but then the

20
00:01:23.820 --> 00:01:28.190
bulk of what we're going to talk about are these assertions right here.

21
00:01:28.190 --> 00:01:33.210
So it comes with a bunch of these built in assertions that we can run that do things like test if something

22
00:01:33.210 --> 00:01:40.590
is true or two things are not equal or something is not in a set or in a list or is not None.

23
00:01:40.590 --> 00:01:41.600
So we'll come back to this.

24
00:01:41.640 --> 00:01:46.840
But this is kind of the value that we get rather than having to write just assert we get all these fancier

25
00:01:46.850 --> 00:01:48.150
assertions.

26
00:01:48.180 --> 00:01:50.980
Not to mention the fact that we also run all the tests together.

27
00:01:51.060 --> 00:01:52.190
We get nice output.

28
00:01:52.230 --> 00:01:54.150
Sort of like we get with a duck test.

29
00:01:54.350 --> 00:01:54.640
OK.

30
00:01:54.690 --> 00:01:58.160
So run through this ballpoints quickly built in module called unit test.

31
00:01:58.410 --> 00:02:04.710
We write unit tests encapsulated as classes that inherit from UNIT TEST TEST CASE.

32
00:02:04.710 --> 00:02:10.680
So you write your own classes that inherit from that test case class and that gives us a bunch of these

33
00:02:10.740 --> 00:02:17.050
assertions and we write a bunch of tests that use those assertions to test the behavior of our code.

34
00:02:17.160 --> 00:02:22.950
And then finally at the end we run the tests by calling the main method unit tests main and then that

35
00:02:23.070 --> 00:02:24.220
sets the test going.

36
00:02:24.420 --> 00:02:31.550
So let's say that I want to write functions to describe some classic great activities eating and napping.

37
00:02:31.950 --> 00:02:37.620
Let's take a TDD approach and write some tests for these functions before implementing the functions

38
00:02:37.740 --> 00:02:42.240
themselves and to do this we have to get set up with the unit test module first.

39
00:02:42.240 --> 00:02:47.400
So we might have these two functions defined in a file called activity stop the Y and we just put past

40
00:02:47.430 --> 00:02:48.230
inside of them.

41
00:02:48.420 --> 00:02:54.600
They don't do anything at all but then to set up unit test in another file I'll call test or call it

42
00:02:54.610 --> 00:02:56.130
test IPY.

43
00:02:56.310 --> 00:02:57.700
This is what we need to do.

44
00:02:57.720 --> 00:02:59.410
So we import unit test.

45
00:02:59.790 --> 00:03:03.330
Then we need to import the functionality we want to test.

46
00:03:03.330 --> 00:03:10.800
So I'm going to do it as from activities the name of the file import eat and nap and then we have class

47
00:03:10.890 --> 00:03:18.050
whatever we want this to be called and it has to inherit from test case unit test test case.

48
00:03:18.180 --> 00:03:19.410
And for now I will leave it blank.

49
00:03:19.530 --> 00:03:21.080
So I'll get this file set up.

50
00:03:21.090 --> 00:03:21.900
Fast forward.

51
00:03:22.110 --> 00:03:22.600
OK.

52
00:03:22.830 --> 00:03:28.160
So I have activity stop why and then test p why and what I have going on.

53
00:03:28.200 --> 00:03:33.630
The only thing I didn't mention in the slide is at the bottom I have this bit of code unit test stop

54
00:03:33.640 --> 00:03:35.300
main that's going to execute.

55
00:03:35.340 --> 00:03:36.500
It's going to run our tests.

56
00:03:36.510 --> 00:03:40.170
There are no tests defined right now but in a moment there will be.

57
00:03:40.260 --> 00:03:46.770
So all you have to do is run this test IPY file and it should run all the tests because of this little

58
00:03:46.770 --> 00:03:48.030
bit of code we have here.

59
00:03:48.060 --> 00:03:50.010
As we saw it in the modules section.

60
00:03:50.070 --> 00:03:52.850
So let's begin by writing a couple of tests.

61
00:03:53.190 --> 00:03:56.060
Let's focus on the eat function.

62
00:03:56.080 --> 00:03:57.720
We're going TDD style.

63
00:03:57.780 --> 00:04:02.970
So we write the intended tests how we want it to work first and they should fail.

64
00:04:03.120 --> 00:04:07.570
So we define a test in here we can come up with a name for a function.

65
00:04:07.570 --> 00:04:14.730
So let's go test and then we can call it test eat and I'll show you in just a moment how we can organize

66
00:04:14.730 --> 00:04:15.120
this.

67
00:04:15.120 --> 00:04:22.470
So Def test eat and then it's an instance method so we need self and we'll do a self-taught.

68
00:04:22.590 --> 00:04:26.450
And then there's all these assertions so we can do assert equal.

69
00:04:26.640 --> 00:04:31.860
And here in the documentation we can see going back to these assertions assert equal.

70
00:04:31.860 --> 00:04:36.600
We just pass in two values and it checks if they're equal and if they are then the test passes.

71
00:04:36.600 --> 00:04:40.520
If they're not the test fails and then what are the two things we want to equal.

72
00:04:40.550 --> 00:04:48.810
Well when we call it which we have up here when we execute it with let's say broccoli and the way I

73
00:04:48.810 --> 00:04:55.650
want it to work is we also are going to pass in a keyword argument called is healthy but if we set is

74
00:04:55.650 --> 00:05:01.350
healthy to be true then it should return to me when I do this on separate lines because it's getting

75
00:05:01.800 --> 00:05:07.550
quite long to do this here OK so eat broccoli is healthy is true.

76
00:05:07.560 --> 00:05:10.480
This is the behavior I guess I didn't really tell you ahead of time.

77
00:05:10.710 --> 00:05:15.660
So this might be out of out of the blue but this is the idea with TDD you define the behavior that you

78
00:05:15.660 --> 00:05:16.050
want.

79
00:05:16.040 --> 00:05:17.090
How it should work.

80
00:05:17.100 --> 00:05:18.870
So this should return to me.

81
00:05:18.870 --> 00:05:21.410
I'm eating broccoli.

82
00:05:21.540 --> 00:05:28.030
And then let's say because it's a healthy thing because my body is a temple.

83
00:05:28.080 --> 00:05:28.320
All right.

84
00:05:28.320 --> 00:05:30.510
So that's because is healthy is true.

85
00:05:30.890 --> 00:05:38.460
And let's do another one down here except this time I pass in a pizza is healthy is now false.

86
00:05:38.790 --> 00:05:47.610
And then it's going to say I'm eating pizza because and let's say because yolo you only live once.

87
00:05:47.610 --> 00:05:51.350
I think you're a bit late for using YOLO but let's leave it at that.

88
00:05:51.390 --> 00:05:55.820
So our behavior that we intend it doesn't matter what you pass in is healthy is the important part.

89
00:05:55.830 --> 00:06:01.160
If it's not true then it should print out I'm eating the food because my body is a temple.

90
00:06:01.200 --> 00:06:05.510
If it's up to false I'm eating the food because you only live once.

91
00:06:05.820 --> 00:06:07.970
So we have these two assertions now.

92
00:06:08.250 --> 00:06:10.080
And of course are not going to pass.

93
00:06:10.140 --> 00:06:12.520
Let's just try running the tests right now.

94
00:06:12.750 --> 00:06:14.880
All you have to do is execute tests.

95
00:06:15.010 --> 00:06:15.630
Why.

96
00:06:15.870 --> 00:06:16.920
And here we go.

97
00:06:17.070 --> 00:06:18.120
So you can see what happened.

98
00:06:18.150 --> 00:06:19.590
We get one test.

99
00:06:19.620 --> 00:06:22.180
So it counted that one function as one test.

100
00:06:22.410 --> 00:06:24.800
And so it countered one failure.

101
00:06:25.080 --> 00:06:29.020
None was not equal to I'm eating broccoli because my body is a temple.

102
00:06:29.040 --> 00:06:30.450
That's what we expect.

103
00:06:30.450 --> 00:06:35.670
But my point that I want to hit home here is that you can have multiple assertions in a row like this

104
00:06:35.830 --> 00:06:37.930
but these are testing different things.

105
00:06:37.950 --> 00:06:40.770
This is testing eat when we pass in healthy.

106
00:06:40.830 --> 00:06:44.260
This is testing eat when we pass in is healthy is false.

107
00:06:44.280 --> 00:06:47.760
So what I would do instead is called Test eat healthy.

108
00:06:47.790 --> 00:06:54.590
Now would be one function and then I would also have def test eat unhealthy.

109
00:06:54.600 --> 00:06:58.190
These are testing different things.

110
00:06:58.510 --> 00:07:05.100
And now if I run both of them I now get ran two Tests and there were two failures.

111
00:07:05.430 --> 00:07:07.020
OK and before we move on.

112
00:07:07.040 --> 00:07:07.450
That's right.

113
00:07:07.450 --> 00:07:12.340
Two more tests for nap so I'll fast forward through these.

114
00:07:12.400 --> 00:07:12.780
OK.

115
00:07:12.850 --> 00:07:14.320
So I did two more tests.

116
00:07:14.350 --> 00:07:16.450
This is for our nap function.

117
00:07:16.630 --> 00:07:23.530
So I have test a short nap if we call nap and I pass in one that's the number of hours that I get I'm

118
00:07:23.530 --> 00:07:25.870
feeling refreshed after my one hour nap.

119
00:07:25.870 --> 00:07:34.660
And if I pass in three in this calling this death test long nap test short nap it gives me ugh I overslept.

120
00:07:34.660 --> 00:07:36.880
I didn't mean to nap for three hours.

121
00:07:36.910 --> 00:07:42.790
That's the worst thing that happens except honestly I never feel refreshed no matter how long or short

122
00:07:42.790 --> 00:07:43.410
my nap is.

123
00:07:43.420 --> 00:07:46.010
I'm always just really annoyed to wake up again.

124
00:07:46.350 --> 00:07:46.620
OK.

125
00:07:46.630 --> 00:07:50.400
So these should all fail and they do.

126
00:07:50.560 --> 00:07:55.460
Now we have the task of actually implementing them back in the activities file.

127
00:07:55.480 --> 00:07:56.800
Let's start working with eat.

128
00:07:56.890 --> 00:07:59.350
So eat has food and is healthy.

129
00:07:59.500 --> 00:08:05.820
The way I want to go about this is set a variable let's call it ending and ending.

130
00:08:05.980 --> 00:08:08.460
Just start as so we have two endings.

131
00:08:08.470 --> 00:08:09.240
Right we have.

132
00:08:09.430 --> 00:08:10.510
Because yolo.

133
00:08:10.570 --> 00:08:19.480
And because my body is a temple so I'll just do because yolo first the default value is going to be

134
00:08:19.480 --> 00:08:21.450
because yolo.

135
00:08:21.780 --> 00:08:28.980
And then at the end what I'm going to do is print a return an F string and I'll do something like HAIM

136
00:08:29.370 --> 00:08:30.160
eating.

137
00:08:30.460 --> 00:08:37.350
And then food coma and then the ending.

138
00:08:37.540 --> 00:08:40.460
So he need space there and then just right ending.

139
00:08:41.290 --> 00:08:43.490
So this should work for one of the tests already.

140
00:08:43.690 --> 00:08:46.780
Because ending a set too because yolo.

141
00:08:46.780 --> 00:08:49.360
Assuming that I'm matching this exactly.

142
00:08:49.360 --> 00:08:52.240
I'm eating food comma space because yolo.

143
00:08:52.270 --> 00:08:53.590
Exclamation point.

144
00:08:53.890 --> 00:09:02.740
So if I actually read this right now I should only have three failures now get one of them is working.

145
00:09:02.750 --> 00:09:06.750
So now it's up to this so that it checks if food is healthy.

146
00:09:06.920 --> 00:09:14.740
So just to if it's healthy we're going to set ending to now equal this right here.

147
00:09:16.530 --> 00:09:27.580
As a string and if we test it so sweet only two failures can satisfy this is why some people like TDD.

148
00:09:27.580 --> 00:09:33.420
Now let's work on nap so nap has a numb hours that's passed in Andrle just check.

149
00:09:33.440 --> 00:09:37.290
I think our threshold will be if ours has more than two.

150
00:09:37.300 --> 00:09:44.000
Like I said all naps make me grouchy So this is not lifelike but if it's greater than two will return

151
00:09:44.000 --> 00:09:51.690
the string and string may copy it over here so you can see how this works so both.

152
00:09:51.700 --> 00:09:54.450
Unit testing with her using unit tests.

153
00:09:54.460 --> 00:09:58.570
Excuse me but also TDD in general we are defining.

154
00:09:58.630 --> 00:10:03.180
We're outlining the functionality what we want to work first.

155
00:10:03.430 --> 00:10:06.910
So when we actually implement it we don't have to make many decisions.

156
00:10:07.340 --> 00:10:07.830
OK.

157
00:10:07.840 --> 00:10:08.130
Ugh.

158
00:10:08.140 --> 00:10:08.660
I overslept.

159
00:10:08.680 --> 00:10:09.930
I didn't mean to nap for.

160
00:10:09.940 --> 00:10:10.740
And then here.

161
00:10:10.770 --> 00:10:17.930
Do you want to put what we call its numb hours and execute this now.

162
00:10:20.600 --> 00:10:25.390
One failure the one that's failing is when we try and take a one hour nap.

163
00:10:25.460 --> 00:10:27.560
We need to fix that.

164
00:10:27.620 --> 00:10:29.530
So if ours is greater than two.

165
00:10:29.810 --> 00:10:31.900
Otherwise we just return.

166
00:10:32.330 --> 00:10:34.250
And I'm going to copy this again.

167
00:10:34.250 --> 00:10:40.290
I'm feeling refreshed after my one hour nap technically because this is greater than two.

168
00:10:40.580 --> 00:10:42.810
Let's make this greater than or equal to two.

169
00:10:43.250 --> 00:10:46.570
And then this will just always be one hour.

170
00:10:46.900 --> 00:10:53.470
So we could just leave it at that and say well if we had a negative hour nap then we could do hours

171
00:10:55.330 --> 00:10:55.810
anyways.

172
00:10:55.910 --> 00:10:57.310
That's the focus of this.

173
00:10:57.350 --> 00:10:58.730
I mean even string.

174
00:10:59.450 --> 00:11:01.370
Let's see if it works.

175
00:11:02.050 --> 00:11:02.650
Sweet.

176
00:11:02.660 --> 00:11:03.950
They are all running.

177
00:11:03.950 --> 00:11:05.040
Ran four tests.

178
00:11:05.070 --> 00:11:06.550
Everything's OK.

179
00:11:06.560 --> 00:11:07.670
It's kind of anti-climactic.

180
00:11:07.670 --> 00:11:11.280
All we get is ok is our message but it's working.

181
00:11:11.360 --> 00:11:16.010
We can also remedy this the fact that we're not getting much information by actually adding comments

182
00:11:16.010 --> 00:11:17.110
to our tests.

183
00:11:17.110 --> 00:11:17.990
Drum roll.

184
00:11:17.990 --> 00:11:19.620
Here we go have a slide on it.

185
00:11:19.730 --> 00:11:25.670
So if we add a docstring to our test functions like here's you know a dumb one testing thing.

186
00:11:25.670 --> 00:11:29.630
Testing another thing will actually get more information in the terminal.

187
00:11:29.630 --> 00:11:36.150
When our tests run and to run the tests we can use Dasch V when we run our files or Python.

188
00:11:36.170 --> 00:11:42.650
The name of the test file test IPY in our case Dasch V which is for for boss I believe and actually

189
00:11:42.650 --> 00:11:49.340
if we run that right now I just add that dash B what we get is the name of each test function.

190
00:11:49.340 --> 00:11:54.480
So it says test eat healthy ok test eat unhealthy OK rather than what we got before.

191
00:11:54.480 --> 00:11:55.900
Which is just OK.

192
00:11:56.330 --> 00:12:01.100
So still not ideal but it works like we can see what tests are actually running.

193
00:12:01.330 --> 00:12:02.740
But let's add comments.

194
00:12:02.960 --> 00:12:09.220
So go to our tests and let's start with Eat healthy do our triple double string.

195
00:12:09.240 --> 00:12:10.680
I hate typing that.

196
00:12:10.820 --> 00:12:18.730
And we just want to say something like eat should have a positive message for healthy eating.

197
00:12:19.850 --> 00:12:26.720
And then let's copy that for unhealthy and say eat should have what kind of message is that it should

198
00:12:26.720 --> 00:12:30.760
indicate you've given up for unhealthy eating.

199
00:12:30.860 --> 00:12:31.390
OK.

200
00:12:31.760 --> 00:12:32.420
I'll add two more.

201
00:12:32.420 --> 00:12:33.800
Fast forward through it.

202
00:12:33.800 --> 00:12:38.510
So I added a short nap should be refreshing for tests short nap and then long naps should be discouraging

203
00:12:38.510 --> 00:12:40.370
for test long nap.

204
00:12:40.370 --> 00:12:40.690
All right.

205
00:12:40.700 --> 00:12:45.600
So often just the name of this isn't enough you want to have a description of how things should work.

206
00:12:45.880 --> 00:12:47.330
And if I run this on it's own.

207
00:12:47.360 --> 00:12:49.890
Nothing changes I add the dash.

208
00:12:50.660 --> 00:12:52.210
We go.

209
00:12:52.450 --> 00:12:56.900
Should have a positive Methot positive message for eating healthy.

210
00:12:56.920 --> 00:12:59.720
OK you should indicate you've given up for eating unhealthy.

211
00:12:59.720 --> 00:13:00.280
OK.

212
00:13:00.320 --> 00:13:01.190
And so on.

213
00:13:01.220 --> 00:13:01.820
All right.

214
00:13:01.820 --> 00:13:04.570
So I'll leave this video off here in the next video.

215
00:13:04.580 --> 00:13:07.340
I'm going to focus on some other assertions that we can work with.
