WEBVTT
1
00:00:00.210 --> 00:00:01.170
They will come back.

2
00:00:01.260 --> 00:00:03.740
So this section is called functions part 2.

3
00:00:03.900 --> 00:00:09.840
It's much smaller and more focused than the original function section which kind of covered a ton of

4
00:00:09.840 --> 00:00:12.520
material was longer and more sprawling.

5
00:00:12.570 --> 00:00:17.310
This is going to be more concise and focused on just a couple of new topics.

6
00:00:17.400 --> 00:00:21.680
So let's start with our objectives like always just to this time.

7
00:00:21.720 --> 00:00:28.380
First we want to use the star and double star operator as parameters to a function and outside of a

8
00:00:28.380 --> 00:00:29.220
function.

9
00:00:29.220 --> 00:00:33.690
So that may not make any sense whatsoever at this point but we'll get there.

10
00:00:33.930 --> 00:00:39.330
And then we also want to leverage dictionary and tuple unpacking to create more flexible functions.

11
00:00:39.330 --> 00:00:45.510
So earlier I think to Section 2 or section to go I mentioned we'll learn more about dictionary unpacking.

12
00:00:45.510 --> 00:00:47.660
Well we're learning about it in this section.

13
00:00:47.880 --> 00:00:53.420
Let's start though in this video by talking about the single star OPERATOR And what it means in regards

14
00:00:53.650 --> 00:00:57.910
to functions and parameters often called Star args.

15
00:00:57.930 --> 00:00:59.640
It's just a special operator.

16
00:00:59.670 --> 00:01:07.360
We can pass to her functions as a parameter and it will gather all remaining arguments as a tuple.

17
00:01:07.380 --> 00:01:13.410
So just a single parameter we can call it whatever we want as long as it starts with a star.

18
00:01:13.440 --> 00:01:19.130
So I'll show you you know some other names you could use but the standard name is Star args but it's

19
00:01:19.260 --> 00:01:20.700
not the only way you can use it.

20
00:01:20.700 --> 00:01:23.100
So what has to be there is the star.

21
00:01:23.190 --> 00:01:27.930
And then what comes after args is conventional but we can talk about some other options.

22
00:01:27.930 --> 00:01:30.940
So to reiterate what it does we have a function definition.

23
00:01:31.020 --> 00:01:36.870
If we put start args as a parameter it will collect any number of additional or extra arguments that

24
00:01:36.870 --> 00:01:42.030
have been passed in into a single parameter called args or whatever we name this.

25
00:01:42.030 --> 00:01:45.850
So it's always good to look at an example to help illustrate what I'm talking about.

26
00:01:45.900 --> 00:01:47.970
Make it a bit less abstract.

27
00:01:47.970 --> 00:01:55.310
Let's say we want to define a function called some all names and with what we know right now we get

28
00:01:55.320 --> 00:02:04.500
hard code in one two three as many as we wanted and in here if we just wanted to return the sum it would

29
00:02:04.500 --> 00:02:14.850
be return one plus two plus three and so on and we would call it by doing some or all numbers and then

30
00:02:14.850 --> 00:02:21.070
I would pass in let's say 4 6 and 9 and we would expect to get 19 back.

31
00:02:21.330 --> 00:02:23.790
Let's just verify that that works.

32
00:02:24.540 --> 00:02:27.840
Oh well we're not printing anything out.

33
00:02:27.840 --> 00:02:28.950
Try that again.

34
00:02:29.400 --> 00:02:29.650
OK.

35
00:02:29.670 --> 00:02:30.560
We get 19.

36
00:02:30.690 --> 00:02:32.260
So that should all be review.

37
00:02:32.560 --> 00:02:37.350
But what's different or what I want and be different about this function is I want to be able to pass

38
00:02:37.350 --> 00:02:42.590
in any number of numbers after this and have them all be added together.

39
00:02:42.690 --> 00:02:48.840
And to do that with what we know right now I would have to define another parameter called for and another

40
00:02:48.840 --> 00:02:50.180
one called num 5.

41
00:02:50.190 --> 00:02:50.970
How many do we have here.

42
00:02:50.980 --> 00:02:57.050
One two three four five six seven and I'm just going to delete those and just go down to one two three

43
00:02:57.060 --> 00:02:57.980
four or five.

44
00:02:58.380 --> 00:02:59.730
So we could do this.

45
00:02:59.910 --> 00:03:03.530
But then there's a limitation We'd also need to fix this right.

46
00:03:03.600 --> 00:03:05.560
Do name four plus five.

47
00:03:05.580 --> 00:03:08.550
But what if I only passed in four and six.

48
00:03:09.000 --> 00:03:17.040
And yeah I guess technically we could do this and give them default values of zero so that we're adding

49
00:03:17.040 --> 00:03:19.920
0 onto the end if only two of them are passed in.

50
00:03:20.130 --> 00:03:23.630
And that's sort of a hacky workaround but it still doesn't work.

51
00:03:23.730 --> 00:03:27.540
If you want to pass in ten arguments instead of five.

52
00:03:27.810 --> 00:03:30.240
So this is where star args comes in.

53
00:03:30.330 --> 00:03:34.590
I'm going to get rid of all of this everything actually.

54
00:03:34.830 --> 00:03:39.180
And I'm just going to write a single parameter called Star args.

55
00:03:39.180 --> 00:03:42.410
And again this could be anything star names.

56
00:03:42.660 --> 00:03:44.560
I'm going to call it args so that's standard.

57
00:03:44.700 --> 00:03:48.520
And inside of here let's just start by printing ARX.

58
00:03:48.570 --> 00:03:52.210
So we refer to the parameter without the start inside the function.

59
00:03:52.410 --> 00:03:56.460
It's just that we need the star in the function definition.

60
00:03:56.460 --> 00:04:00.180
So I should print args and let's just see what we get.

61
00:04:00.180 --> 00:04:05.490
You can see this is a tuple right here and also right here.

62
00:04:05.580 --> 00:04:10.330
So args is a tuple containing all of the arguments that we pass in.

63
00:04:10.680 --> 00:04:12.120
In this case all of them.

64
00:04:12.120 --> 00:04:17.960
So if we wanted to make some all Nom's work using this we just need to iterate through the tuple.

65
00:04:18.150 --> 00:04:26.580
So that will just be for now in args and let's make a total variable total is equal to zero.

66
00:04:27.030 --> 00:04:37.620
And then we'll just do total plus equals numb and then at the end we will return numb or total excuse

67
00:04:37.620 --> 00:04:38.730
me.

68
00:04:38.730 --> 00:04:44.310
So this also is very similar to what we've seen before except now rather than passing in a list.

69
00:04:44.310 --> 00:04:46.160
These are all individual arguments.

70
00:04:46.260 --> 00:04:51.570
And this code works with two arguments with 20 or with 100 numbers passed in.

71
00:04:51.890 --> 00:04:56.410
But see if it works we get 33 and 10.

72
00:04:56.410 --> 00:04:58.970
So this should be 33 and that should be 10.

73
00:04:58.990 --> 00:04:59.950
It's working.

74
00:04:59.950 --> 00:05:07.080
It's worth pointing out that we can pass in other parameters so I could have number one comma star args

75
00:05:07.480 --> 00:05:16.510
and we can print number one just to show you that you know in this case it doesn't really make sense

76
00:05:16.510 --> 00:05:18.230
when are summing all the numbers together.

77
00:05:18.370 --> 00:05:20.110
They're all the same at the end of the day.

78
00:05:20.110 --> 00:05:27.100
But we can still have individual parameters that are named and then have our star args afterwards.

79
00:05:27.100 --> 00:05:35.620
So if we run this now we get 4 and 4 and then 5:31 and the addition is different because we're no longer

80
00:05:35.620 --> 00:05:41.880
adding in four because we're just pulling for and printing it and then looping through the rest.

81
00:05:42.210 --> 00:05:43.870
OK so I'll leave it at that.

82
00:05:43.920 --> 00:05:46.930
Let's get rid of this and go back to our initial version.

83
00:05:46.930 --> 00:05:48.720
The example is also in the slides.

84
00:05:48.730 --> 00:05:54.570
If you want to take a look and I have another example in the slides It's called ensure correct info.

85
00:05:54.880 --> 00:05:59.120
And I use star args again and also show after this.

86
00:05:59.140 --> 00:06:00.940
This didn't have to be named args.

87
00:06:01.090 --> 00:06:09.360
All it does is it checks if Colt is in args and steel is in args remember args is a tuple.

88
00:06:09.430 --> 00:06:11.920
So it's checking if that table contains.

89
00:06:11.920 --> 00:06:18.190
It basically it means if any arguments were passed that were colt and steal both of them were passed

90
00:06:18.190 --> 00:06:21.160
in like in this case will print or we'll return.

91
00:06:21.160 --> 00:06:23.110
Welcome back colt.

92
00:06:23.230 --> 00:06:26.160
Otherwise we're just going to return.

93
00:06:26.170 --> 00:06:28.280
Not sure who you are.

94
00:06:28.510 --> 00:06:34.670
So the effect of this one is we can pass in as many arguments as we want but there has to be a cult

95
00:06:34.720 --> 00:06:39.210
has to be still in there somewhere in order to print this or return this.

96
00:06:39.310 --> 00:06:43.570
Any other arguments in there if they don't contain these two then we just return.

97
00:06:43.570 --> 00:06:44.740
Not sure who you are.

98
00:06:44.890 --> 00:06:50.320
So I have the same code just copied over to a file and I'm just going to print args up top and let's

99
00:06:50.320 --> 00:06:50.920
run it twice.

100
00:06:50.920 --> 00:06:56.400
So this time there's no arguments being passed in and this time there are four arguments all in the

101
00:06:56.400 --> 00:07:05.140
args tuple and you can see the first time it's an empty tuple second time it has these four items it's

102
00:07:05.150 --> 00:07:06.500
now rather than just printing.

103
00:07:06.500 --> 00:07:12.840
Let's look at what we get by printing the result of executing printing the return value.

104
00:07:13.280 --> 00:07:19.900
And rather than just passing it nothing let's do hello and false.

105
00:07:20.180 --> 00:07:24.040
And how about 78.

106
00:07:24.260 --> 00:07:25.120
What do we expect.

107
00:07:25.190 --> 00:07:28.610
Well args will this time contain three items.

108
00:07:28.640 --> 00:07:32.630
But it doesn't contain colt or steel and we have to have both of those in order to return.

109
00:07:32.630 --> 00:07:33.900
Welcome back colt.

110
00:07:33.950 --> 00:07:38.570
Also notice we don't need an else here this is that whole short circuiting thing where if you use a

111
00:07:38.570 --> 00:07:44.330
return statement in a conditional You don't have to use an else because the only way to get here is

112
00:07:44.330 --> 00:07:47.580
for this to be false because this return will quit.

113
00:07:47.960 --> 00:07:49.120
But let's try it.

114
00:07:49.430 --> 00:07:50.570
We get not sure who you are.

115
00:07:50.570 --> 00:07:51.360
And welcome back.

116
00:07:51.410 --> 00:07:52.800
Cold OK.

117
00:07:52.850 --> 00:07:53.880
Last thing I'll mention.

118
00:07:54.020 --> 00:07:55.520
We can change this.

119
00:07:55.520 --> 00:08:00.650
Actually I'm going to go over to Sam and instead of star arge we can call it names and then we just

120
00:08:00.650 --> 00:08:02.770
change this for nomine.

121
00:08:02.780 --> 00:08:06.980
So the star has to be there but otherwise it doesn't have to be called args.

122
00:08:07.160 --> 00:08:08.990
Let's just make sure it still works.

123
00:08:08.990 --> 00:08:13.900
So that was called some still looks good.

124
00:08:13.900 --> 00:08:14.460
Cool.
