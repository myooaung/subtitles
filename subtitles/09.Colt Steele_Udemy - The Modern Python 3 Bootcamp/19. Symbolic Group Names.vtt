WEBVTT
1
00:00:00.180 --> 00:00:00.580
OK.

2
00:00:00.660 --> 00:00:04.890
One last thing I want to show you here I have another right rejects that I've written.

3
00:00:04.950 --> 00:00:11.330
This one is kind of review we've already worked with it or similar version where we are matching names.

4
00:00:11.370 --> 00:00:19.950
So something like this Mrs. Tilda Swinton we're matching you know optional The Mr or Mrs or Ms or madame.

5
00:00:19.960 --> 00:00:25.630
In my case put as many of those whatever those are called prefixes.

6
00:00:25.740 --> 00:00:29.210
I couldn't remember in the last video I can't remember now either.

7
00:00:29.250 --> 00:00:34.080
And then we have a space and then uppercase with lower case letters.

8
00:00:34.110 --> 00:00:38.400
Technically if we wanted to get fancy we could make sure the first letter was capitalized but I'm not

9
00:00:38.400 --> 00:00:42.880
going to get into that just any capital capital or lower case letters.

10
00:00:43.080 --> 00:00:49.120
More than once and again repeated any capital letters after space more than once.

11
00:00:49.170 --> 00:00:53.730
And I also added in the beginning and end characters just to verify that there's nothing else in the

12
00:00:53.730 --> 00:00:54.510
string.

13
00:00:54.930 --> 00:00:55.800
OK so that's your view.

14
00:00:55.800 --> 00:01:02.130
I added parens around each component so that we get to grips the matches in individual groups so for

15
00:01:02.130 --> 00:01:05.340
example I'll just print matches.

16
00:01:05.400 --> 00:01:09.650
Let's just do dog groups and we can see what we're working with parce last name.

17
00:01:09.690 --> 00:01:12.040
Mrs. Tilda Swinton let's make sure it works.

18
00:01:14.810 --> 00:01:16.620
Oh Parslow.

19
00:01:16.720 --> 00:01:18.160
I called this Parsa last name.

20
00:01:18.200 --> 00:01:21.830
Is parsed name so I mean to call to try again.

21
00:01:22.420 --> 00:01:25.770
Oh my gosh didn't import Ari.

22
00:01:26.440 --> 00:01:27.560
I still Seka promised.

23
00:01:27.570 --> 00:01:28.930
That's it's happening.

24
00:01:29.280 --> 00:01:31.080
OK so now we get Mrs..

25
00:01:31.090 --> 00:01:31.690
And until the.

26
00:01:31.690 --> 00:01:32.500
And then Swinton.

27
00:01:32.500 --> 00:01:34.300
And that should be review from the last video.

28
00:01:34.360 --> 00:01:36.160
But the new thing I want to show you here.

29
00:01:36.220 --> 00:01:39.330
Let's say I only really care about the first name.

30
00:01:39.400 --> 00:01:42.070
I want to store it separately so I want to keep the full name.

31
00:01:42.100 --> 00:01:43.240
Make sure it matches.

32
00:01:43.320 --> 00:01:48.370
And I also want to store the full the first name so that when a user comes back to my website or they

33
00:01:48.370 --> 00:01:54.340
log back in I can greet them as you know hello Tilda instead of hello Mrs. Tilda Swinton a little more

34
00:01:54.460 --> 00:02:01.720
casual just the first name and so to get the first name I can do group and to remember if I do group

35
00:02:01.720 --> 00:02:03.500
0 it's the entire match.

36
00:02:03.630 --> 00:02:04.680
I do group 1.

37
00:02:04.760 --> 00:02:08.790
It's the prefix group to give me the first name.

38
00:02:08.920 --> 00:02:16.020
So that's one way of finding it and I'm getting Tilda what I want to show you now is I do question mark.

39
00:02:16.030 --> 00:02:19.760
Capital P It's bizarre syntax and then angle brackets.

40
00:02:19.900 --> 00:02:23.090
And I give it a name like first.

41
00:02:23.260 --> 00:02:26.700
This is like a label for this group.

42
00:02:27.250 --> 00:02:33.440
And then what I can do is over here use matches that group first.

43
00:02:33.580 --> 00:02:36.750
It's just a name that I've given to this group right here.

44
00:02:37.360 --> 00:02:43.000
So now if I run this same thing happens I still get told.

45
00:02:43.350 --> 00:02:49.320
So instead of having to count and use numbers and know which group where I can use first because I've

46
00:02:49.320 --> 00:02:54.510
given it that name it's a question mark capital P angle brackets and then whatever name you want inside

47
00:02:54.510 --> 00:02:55.090
of it.

48
00:02:55.380 --> 00:03:00.780
It's kind of clunky syntax but it's still a nice thing to use and I could come over here and do the

49
00:03:00.780 --> 00:03:07.120
same thing and change it to last if I wanted to and then print last.

50
00:03:07.170 --> 00:03:08.730
So I'm still matching.

51
00:03:08.790 --> 00:03:17.730
If I do print matches dot group like that I'm still matching the entire thing.

52
00:03:17.730 --> 00:03:18.910
So you can see.

53
00:03:19.450 --> 00:03:25.260
But now I've isolated till the end Swinton just like we did before with you are all examples except

54
00:03:25.350 --> 00:03:28.990
I don't have to use numbers I can use words like first and last.

55
00:03:29.360 --> 00:03:29.900
OK.

56
00:03:30.150 --> 00:03:32.100
So that's all I want to show you in this video.

57
00:03:32.100 --> 00:03:33.150
You can use.

58
00:03:33.240 --> 00:03:38.760
I don't know what this is actually called the name of it but this little group of characters.

59
00:03:38.890 --> 00:03:39.950
Let me go to the docs.

60
00:03:39.990 --> 00:03:40.730
There we go.

61
00:03:40.920 --> 00:03:46.910
On the docks says question mark p. instead Prendes and name in there.

62
00:03:47.000 --> 00:03:51.430
Make something accessible by the symbolic group name whatever you pass in here.

63
00:03:51.540 --> 00:03:53.660
It must be valid Python identifiers in each.

64
00:03:53.880 --> 00:03:58.710
Each group name must be defined only once with the regular expression blah blah blah blah blah.

65
00:03:58.710 --> 00:04:01.770
It's also a numbered group so it still works.

66
00:04:01.770 --> 00:04:05.970
If you if you wanted to use the number to reference it cool.

67
00:04:06.180 --> 00:04:07.950
So you can read more about it here.

68
00:04:08.370 --> 00:04:10.050
So I'll leave things here.

69
00:04:10.050 --> 00:04:13.020
We just use these symbolic group name tag.

70
00:04:13.020 --> 00:04:19.860
Thing is to reference inside the Manchester group using that symbolic name that we've assigned.

71
00:04:20.040 --> 00:04:21.370
OK moving on.
