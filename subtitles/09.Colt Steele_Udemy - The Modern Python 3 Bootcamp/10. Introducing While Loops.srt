1
00:00:00,450 --> 00:00:01,110
All right.

2
00:00:01,110 --> 00:00:05,500
So now we're moving on to the second type of loop in this section which is the while loop.

3
00:00:05,880 --> 00:00:13,130
So both while and for loops can be used to iterate over a collection or to repeat something ten times.

4
00:00:13,140 --> 00:00:14,610
Anything you can do with the for loop.

5
00:00:14,700 --> 00:00:15,880
We could do with a WHILE loop.

6
00:00:16,080 --> 00:00:20,940
That's what I'm trying to say but there's also a lot of things you can do with a WHILE loop that you

7
00:00:20,940 --> 00:00:22,770
can't do with a for loop.

8
00:00:22,770 --> 00:00:28,680
So I think of while loops as a distant cousin and some sort of far off relative to a conditional statement

9
00:00:28,680 --> 00:00:29,990
an if statement.

10
00:00:30,090 --> 00:00:31,480
So here's the syntax.

11
00:00:31,920 --> 00:00:36,320
So we have a while and then we provide a boolean expression.

12
00:00:36,450 --> 00:00:38,420
So this is a single variable.

13
00:00:38,420 --> 00:00:44,610
I'm tired which is a boolean variable set to True or false but it could be something like while x is

14
00:00:44,610 --> 00:00:49,670
greater than 20 or while number is less than 100.

15
00:00:49,680 --> 00:00:53,460
Basically any boolean expression goes in this while loop.

16
00:00:53,490 --> 00:00:59,850
So we fill in the blank here and whatever code we have inside the loop indented will run.

17
00:00:59,850 --> 00:01:01,220
While this is true.

18
00:01:01,260 --> 00:01:06,270
So while loops continue to execute while a condition is truthy.

19
00:01:06,330 --> 00:01:10,650
So just like a conditional statement will execute once if a condition is truthy.

20
00:01:10,740 --> 00:01:14,600
A while loop will continue to execute while it is true.

21
00:01:14,790 --> 00:01:20,370
But then at some point it should become falsie and that will stop the loop.

22
00:01:20,370 --> 00:01:22,080
So is another example.

23
00:01:22,080 --> 00:01:24,780
We said user response a variable to be empty.

24
00:01:24,780 --> 00:01:25,710
We set it to none.

25
00:01:25,800 --> 00:01:28,780
We could also do an empty string and then we write.

26
00:01:28,860 --> 00:01:34,440
While user response is not equal to please notice the colon.

27
00:01:34,440 --> 00:01:37,440
Just like all the other loops and conditional statements.

28
00:01:37,440 --> 00:01:43,890
So while the user does not type the word please ask the user for a different input and say I didn't

29
00:01:43,890 --> 00:01:45,070
say the magic word.

30
00:01:45,420 --> 00:01:50,210
So the effect of this is the first time through user responses none.

31
00:01:50,310 --> 00:01:52,090
So this right here is true.

32
00:01:52,110 --> 00:01:54,040
User response is not equal to please.

33
00:01:54,240 --> 00:01:57,540
So then we ask again an update user response.

34
00:01:57,840 --> 00:02:00,460
And let's say this time I type an hello.

35
00:02:00,540 --> 00:02:02,090
Well that's also not equal to please.

36
00:02:02,130 --> 00:02:05,950
So it repeats and it asks again and then this time I say please.

37
00:02:06,240 --> 00:02:10,110
And then the loop halts and that makes his condition false.

38
00:02:10,110 --> 00:02:11,590
So everything finishes.

39
00:02:11,880 --> 00:02:17,220
So I did mention you could do everything you can do with a for loop using a while loop but they do require

40
00:02:17,250 --> 00:02:22,330
more setup because you need to have usually an existing variable that you're using.

41
00:02:22,470 --> 00:02:28,140
So you declare a separate variable unlike in a for loop where we can create a temporary variable that

42
00:02:28,170 --> 00:02:32,150
only exists in that loop and we don't have to actually initialize it on Earth.

43
00:02:32,520 --> 00:02:36,080
And one last warning before we dive into writing some while loops.

44
00:02:36,210 --> 00:02:41,370
You need to be careful because the way that while loop works as it continues running while something

45
00:02:41,370 --> 00:02:47,340
is true and if you never flip it over if you never take that condition and make it false the loop will

46
00:02:47,340 --> 00:02:48,260
continue forever.

47
00:02:48,300 --> 00:02:54,620
And that's called an infinite loop and it won't like ruin your machine or anything.

48
00:02:54,640 --> 00:02:57,150
You'll need to halt it but it will ruin your program.

49
00:02:57,150 --> 00:03:00,760
Nothing else will be able to happen it will keep going forever until you intervene.

50
00:03:00,960 --> 00:03:01,870
So that's not good.

51
00:03:02,070 --> 00:03:05,300
We don't want that so I'll show you an example of what would cause that.

52
00:03:05,350 --> 00:03:12,490
But let's start by typing some simple while loops so I'll make a file I'll call it while P Why I must

53
00:03:12,500 --> 00:03:16,100
start by doing a simple loop that asks for user input.

54
00:03:16,160 --> 00:03:23,200
So let's say that message equals input.

55
00:03:23,320 --> 00:03:26,210
What's the secret password.

56
00:03:26,950 --> 00:03:28,360
And then we'll have a while.

57
00:03:28,360 --> 00:03:34,280
So while a message is not equal to what should our password be.

58
00:03:34,360 --> 00:03:39,350
Let's have our password be bananas Colin.

59
00:03:39,420 --> 00:03:48,480
We're going to first print wrong and then let's also just re update message and ask for what's the secret

60
00:03:48,480 --> 00:03:54,960
password and then afterwards we'll say.

61
00:03:55,990 --> 00:03:57,350
Correct.

62
00:03:58,150 --> 00:03:58,640
OK.

63
00:03:58,840 --> 00:04:05,530
So we're going to ask for input and if the user enters anything other than bananas this is going to

64
00:04:05,530 --> 00:04:07,740
be true messages not equal to bananas.

65
00:04:07,810 --> 00:04:12,910
So we're going to print wrong and we're going to ask for message again and then this should eventually

66
00:04:13,090 --> 00:04:15,310
hopefully our user types in bananas.

67
00:04:15,370 --> 00:04:21,460
It's going to be me and I'm going to type bananas which will make this false message will be equal to

68
00:04:21,460 --> 00:04:26,150
bananas which then helps the execution of that loop and we move on to print.

69
00:04:26,140 --> 00:04:26,930
Correct.

70
00:04:27,160 --> 00:04:31,310
So this whatever comes afterwards only runs when this finishes.

71
00:04:31,770 --> 00:04:32,060
OK.

72
00:04:32,080 --> 00:04:36,030
Let's try it Python 3.

73
00:04:36,520 --> 00:04:41,040
Wild up p y o Python 2 What am I doing.

74
00:04:41,060 --> 00:04:41,610
There we go.

75
00:04:41,780 --> 00:04:43,300
What's the secret password.

76
00:04:43,340 --> 00:04:50,170
Blue purple orange or Touraine pie.

77
00:04:50,660 --> 00:04:54,250
And let's go with bananas now by Nanna's.

78
00:04:54,560 --> 00:04:55,220
Correct.

79
00:04:55,460 --> 00:04:56,380
And it stops.

80
00:04:56,450 --> 00:04:59,430
So that's our first example of a while loop.

81
00:04:59,920 --> 00:05:00,410
OK.

82
00:05:00,560 --> 00:05:05,690
So I'm going to comment that out and leave it here and now I'm going to show you how you could convert

83
00:05:05,690 --> 00:05:08,550
a for loop to a wild how you can use them interchangeably.

84
00:05:08,720 --> 00:05:11,090
So let's say we're going to put the numbers from 1 to 10.

85
00:05:11,140 --> 00:05:13,820
I know very boring with a for loop.

86
00:05:13,910 --> 00:05:20,890
We could just do for Nahm in range 1 and we need to go to 11 because it's exclusive.

87
00:05:20,990 --> 00:05:22,560
And then we'll just print no.

88
00:05:22,760 --> 00:05:23,270
Right.

89
00:05:23,450 --> 00:05:25,280
So we've seen this before.

90
00:05:25,310 --> 00:05:28,160
We get 1 through 10 with a while loop.

91
00:05:28,160 --> 00:05:32,110
We can do the same thing but we need to first declare a variable.

92
00:05:32,360 --> 00:05:41,270
So I could call this one numb or let's go with yeah is fine equals and we'll started at our first number

93
00:05:41,270 --> 00:05:51,770
which is 1 then what we need to do have our while loop while numb is less than 11 or we could do less

94
00:05:51,770 --> 00:05:52,910
than or equal to 10.

95
00:05:52,910 --> 00:05:56,440
Either one will do less than 11.

96
00:05:56,720 --> 00:05:57,640
We're going to print.

97
00:05:57,690 --> 00:06:00,710
No but if we leave it at this.

98
00:06:00,710 --> 00:06:02,790
Can you tell what's going to happen.

99
00:06:02,840 --> 00:06:07,640
We'll get an infinite loop because nothing is set to 1 and it never changes.

100
00:06:07,640 --> 00:06:09,820
So one is always less than 11.

101
00:06:09,890 --> 00:06:14,540
So this just goes forever and ever and ever and ever until we force quit it.

102
00:06:14,720 --> 00:06:16,040
Let's see what happens.

103
00:06:16,070 --> 00:06:18,810
Generally don't want to try and get these Yeah there we go.

104
00:06:18,870 --> 00:06:26,240
OK I'm going to hold that command C or control C and you can see we got oh man I'm scrolling as fast

105
00:06:26,240 --> 00:06:29,900
as I can at a couple of thousand maybe ten thousand or more.

106
00:06:30,080 --> 00:06:31,560
Is printed out.

107
00:06:31,640 --> 00:06:34,660
So we don't want to do that now.

108
00:06:34,700 --> 00:06:35,720
Never change from one.

109
00:06:35,720 --> 00:06:37,770
So what we need to do is update number.

110
00:06:37,940 --> 00:06:38,710
So I'm going to do none.

111
00:06:38,710 --> 00:06:42,720
Plus he calls 1 to same as numb equals number plus 1.

112
00:06:42,770 --> 00:06:48,370
So we're adding 1 to it each time just like this works where there there's a range which starts at 1.

113
00:06:48,410 --> 00:06:53,560
It prints and then is an increment to two and a prince name is incremented to three.

114
00:06:53,690 --> 00:06:57,200
And once it gets to ten it stops.

115
00:06:57,200 --> 00:06:58,870
Same idea except in a while loop.

116
00:06:58,880 --> 00:07:03,400
We have to declare the variable first and we have to update it manually on our own.

117
00:07:03,860 --> 00:07:08,540
OK let's try it now Arrigo 9:59.

118
00:07:08,850 --> 00:07:09,410
OK.

119
00:07:09,620 --> 00:07:14,510
So that shows how we can take a for loop and converted to a while loop or that we could use a while

120
00:07:14,510 --> 00:07:16,150
loop and in place of a for loop.

121
00:07:16,310 --> 00:07:20,300
But if you're just trying to do things like print numbers well that's not a good example but if you're

122
00:07:20,300 --> 00:07:25,490
trying to do something that you could do with a for loop I generally use a for loop because it's shorter

123
00:07:25,640 --> 00:07:27,100
and quicker.

124
00:07:27,140 --> 00:07:33,530
So a last change we could make if I wanted to only print odd numbers for example what I could do is

125
00:07:33,530 --> 00:07:36,880
just change what I'm incrementing by.

126
00:07:37,130 --> 00:07:40,030
Let me clear my counsel on that again.

127
00:07:40,070 --> 00:07:46,130
We get 1 3 5 7 9 and you know we could also add a conditional statement in here whatever code we want

128
00:07:46,670 --> 00:07:48,470
just like we can with a for loop.

129
00:07:48,470 --> 00:07:50,500
So really the way a while loop works.

130
00:07:50,570 --> 00:07:52,580
It's just like in a single if statement.

131
00:07:52,580 --> 00:07:58,730
Except it continues to run until that condition is false and you just have to be conscientious about

132
00:07:58,820 --> 00:08:01,990
infinite loops that will get you into some trouble.

133
00:08:02,000 --> 00:08:05,190
So that's it for loops or for while loops at this point.

134
00:08:05,240 --> 00:08:10,010
We're going to get some practice with exercises but really just to sum it all up.

135
00:08:10,160 --> 00:08:11,040
Both loops.

136
00:08:11,180 --> 00:08:16,460
You can print numbers out or you can loop a specific number of times but the difference with a while

137
00:08:16,460 --> 00:08:22,010
loop is it's more flexible where you might have something that might run once it might run 50 times

138
00:08:22,040 --> 00:08:26,310
and you don't know because it's built upon a boolean expression.

139
00:08:26,450 --> 00:08:27,570
So it might be.

140
00:08:27,620 --> 00:08:34,160
Using user input it might be getting data from a database and looping through that versus a for loop

141
00:08:34,160 --> 00:08:41,840
like we have right here is always this loophole always run 10 times this one this while loop could run

142
00:08:41,900 --> 00:08:44,410
10000 times or it could run once.

143
00:08:44,420 --> 00:08:45,870
So while it's more flexible.

144
00:08:45,880 --> 00:08:52,730
But if you do need something to happen a set number of times a for loop is much shorter and more pretty

145
00:08:53,000 --> 00:08:57,570
smart you know sync it anyway so that's enough of talking at you.

146
00:08:57,590 --> 00:08:58,840
Let's do some exercises.

147
00:08:58,850 --> 00:09:01,120
Let's try building a couple of things with while loops.
