WEBVTT
1
00:00:00.300 --> 00:00:01.380
Hey welcome back.

2
00:00:01.380 --> 00:00:07.200
So let's begin with the very basics of working with files which would be to just read in the data from

3
00:00:07.200 --> 00:00:13.230
an existing file whether it's a file that contains the complete works of Shakespeare in a single file

4
00:00:13.590 --> 00:00:20.460
or every word in the French dictionary or just like a single line or two of text it to do list whatever

5
00:00:20.460 --> 00:00:21.420
the data is.

6
00:00:21.420 --> 00:00:23.100
We follow the same procedure.

7
00:00:23.400 --> 00:00:27.990
So what we do to read in to take advantage of the open function.

8
00:00:28.020 --> 00:00:33.450
So this is one of the few built in functions we haven't covered yet so we don't actually have to import

9
00:00:33.480 --> 00:00:34.800
any module.

10
00:00:34.800 --> 00:00:36.530
We don't have to download anything.

11
00:00:36.600 --> 00:00:40.780
We get access to file IO functionality out of the box with Python.

12
00:00:41.040 --> 00:00:46.950
So the function we want is called open and open which we passed in the name of file name had a bare

13
00:00:46.950 --> 00:00:47.430
minimum.

14
00:00:47.460 --> 00:00:52.610
We have tell it which file makes sense and it returns a File object to us.

15
00:00:52.710 --> 00:00:57.530
So a file is it contains more than the data itself.

16
00:00:57.830 --> 00:01:04.260
There's information about the file like certain permissions data about it or the type of file that it

17
00:01:04.260 --> 00:01:05.180
is.

18
00:01:05.370 --> 00:01:09.710
I believe there's also things like when it was opened or last opened.

19
00:01:09.780 --> 00:01:15.240
I'm not positive on all the data but there's some metadata that goes along with the file so it doesn't

20
00:01:15.240 --> 00:01:21.360
just give you data it gives you an object and then we have to explicitly read in from that object using

21
00:01:21.360 --> 00:01:22.470
a read method.

22
00:01:22.860 --> 00:01:25.920
So quickly I'll show you here the documentation.

23
00:01:26.100 --> 00:01:32.250
If you just go to the very top built in functions click on open you can see that open actually has a

24
00:01:32.250 --> 00:01:36.250
lot of parameters here compact and a bunch of arguments.

25
00:01:36.450 --> 00:01:42.390
But we have to pass in files the only one that doesn't have a default so file is you know dictionary

26
00:01:42.390 --> 00:01:49.300
dot DXi or Alice in Wonderland story or whatever the text or whatever the file is.

27
00:01:49.350 --> 00:01:53.970
And as you can see it opens a file and returns a corresponding file object.

28
00:01:53.970 --> 00:02:00.360
And if the file can't be opened if there's a problem with it's corrupted or I don't know the file you

29
00:02:00.360 --> 00:02:01.710
don't have permission to open it.

30
00:02:01.920 --> 00:02:03.830
Then an error will be raised.

31
00:02:03.840 --> 00:02:06.340
We can give an absolute or relative path name.

32
00:02:06.360 --> 00:02:10.210
So in our example I'll show you but will just work in the same directory.

33
00:02:10.230 --> 00:02:14.700
But if your file is located somewhere else you can reference the path to get there.

34
00:02:14.970 --> 00:02:16.940
So that's all I'll talk about in the docs here.

35
00:02:16.950 --> 00:02:19.110
But if you have questions you can read a lot more.

36
00:02:19.110 --> 00:02:25.730
There are all these very tiny little parameters you can specify like that see replace.

37
00:02:25.740 --> 00:02:31.470
So if there's malformed data how would you like it to be replaced like you want a question mark.

38
00:02:31.470 --> 00:02:33.350
Do you want a sad face.

39
00:02:33.360 --> 00:02:34.480
What do you want to put there.

40
00:02:34.500 --> 00:02:36.060
Or do you want to ignore it.

41
00:02:36.060 --> 00:02:37.660
Same thing with backslashes.

42
00:02:37.770 --> 00:02:42.240
If you have backslashes in your strings that you're importing or that you're reading in.

43
00:02:42.240 --> 00:02:45.510
Do you want to make them Python wise and do the double backslash.

44
00:02:45.570 --> 00:02:47.330
So very tiny things really.

45
00:02:47.520 --> 00:02:49.030
But we're not going to really go into that.

46
00:02:49.110 --> 00:02:54.300
Let's just talk about the important stuff which is opening the file and then doing something with it.

47
00:02:54.300 --> 00:02:56.240
So here's a really simple example.

48
00:02:56.340 --> 00:03:00.160
I already have this story that text file on my computer.

49
00:03:00.330 --> 00:03:04.480
But imagine that this is I don't know 50000 lines instead of a single line.

50
00:03:04.500 --> 00:03:05.930
The process is the same.

51
00:03:06.240 --> 00:03:09.500
So we have a file scale story that takes t.

52
00:03:09.570 --> 00:03:14.430
And then we have open using the built in open function and the name of the file.

53
00:03:14.670 --> 00:03:18.270
And I'm just going to hop to my terminal now open up Python 3.

54
00:03:18.270 --> 00:03:21.040
First I'll just show you the file is right here.

55
00:03:21.060 --> 00:03:28.210
Stories that text me and now open up not on 23 not there just yet.

56
00:03:28.410 --> 00:03:36.590
If I do let's just call it f equals open and then we have to pass in the name of that story Dot T x

57
00:03:36.610 --> 00:03:39.410
t OK.

58
00:03:39.580 --> 00:03:46.070
Now if we look at what f is right now we get this text IO wrapper object it's an instance of the textile

59
00:03:46.090 --> 00:03:47.150
wrapper class.

60
00:03:47.300 --> 00:03:52.130
It also the way that it is printed out it tells us the name of the file mode.

61
00:03:52.170 --> 00:03:58.900
Our means that we are reading it and if we could we could do something like help if you can read a lot

62
00:03:58.900 --> 00:04:04.360
more about this if you want to learn that go into detail about how it actually works in Taqwa buffers

63
00:04:04.430 --> 00:04:09.200
and encoding and decoding and there's a lot of fun stuff with working with files.

64
00:04:09.340 --> 00:04:15.760
And yeah we can scroll through all the methods to Danders but then also methods we can call like close.

65
00:04:15.760 --> 00:04:16.960
We'll talk about that later.

66
00:04:17.130 --> 00:04:22.940
Read are we going to use this one in just a moment read at most and characters from a stream.

67
00:04:23.140 --> 00:04:24.120
So we'll talk with that.

68
00:04:24.220 --> 00:04:29.410
If we print the file right now it's the file object to actually get the data in there even though it's

69
00:04:29.410 --> 00:04:31.240
just a silly little string.

70
00:04:31.240 --> 00:04:34.880
We need to use read which I just showed you and help was a method.

71
00:04:35.050 --> 00:04:37.270
So it's f dot read.

72
00:04:37.420 --> 00:04:43.060
And I don't know if you saw that in help but if I don't specify a number in here it's going to specify

73
00:04:43.060 --> 00:04:46.040
negative 1 which will just give me the entire file.

74
00:04:46.300 --> 00:04:49.320
So we get this short story is really short notice.

75
00:04:49.310 --> 00:04:56.230
There's the new line character because in the file itself if I can show you the file I have a new line

76
00:04:56.410 --> 00:04:57.180
afterwards.

77
00:04:57.280 --> 00:04:57.870
So there we go.

78
00:04:57.880 --> 00:05:05.300
We've successfully read in a file and if we wanted to do it again read was want.

79
00:05:05.400 --> 00:05:09.840
I don't know what's happening what is going on and why can't we read it again.

80
00:05:10.060 --> 00:05:11.890
So we read it once and it worked just fine.

81
00:05:11.890 --> 00:05:14.140
And I read it again and now it's an empty string.

82
00:05:14.350 --> 00:05:16.280
What the heck Python What are you doing.

83
00:05:16.450 --> 00:05:18.850
Well let's go back to our slides.

84
00:05:19.540 --> 00:05:22.880
We need to talk about cursors in order to understand what's going on.

85
00:05:23.050 --> 00:05:26.590
When Python reads a file it uses what's known as a cursor.

86
00:05:26.920 --> 00:05:30.260
You can think of a cursor like what you see when you're typing.

87
00:05:30.310 --> 00:05:36.460
Right when I go back to my text file here if I had a bunch of lines in here my cursor is here.

88
00:05:36.490 --> 00:05:42.220
This is like the place that I am in the text and I can progress through it and move down and you've

89
00:05:42.220 --> 00:05:43.260
seen the cursor before.

90
00:05:43.300 --> 00:05:45.590
It's the same sort of idea in Python.

91
00:05:45.940 --> 00:05:51.760
So after a file is read which we did the first time with EFT outbreed the cursor goes to the end of

92
00:05:51.760 --> 00:05:52.730
the file.

93
00:05:52.780 --> 00:05:57.320
So if we try to read from there there's nothing left to read till we get that empty string.

94
00:05:57.550 --> 00:06:01.480
So it's a bit of a cliffhanger but I'll show you how to fix that in the next video.

95
00:06:01.480 --> 00:06:03.300
Will it go into more detail with cursors.
