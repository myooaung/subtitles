WEBVTT
1
00:00:00.210 --> 00:00:06.360
And we're back now talking about special methods also known as magic methods these are things behind

2
00:00:06.360 --> 00:00:08.130
the scenes that are all Dunner methods.

3
00:00:08.190 --> 00:00:13.570
Start with two underscores and with two underscores that work some magic in Python.

4
00:00:14.040 --> 00:00:20.140
So in this example the plus sign 8 plus two ints versus a plus to the strings.

5
00:00:20.160 --> 00:00:21.170
How is that working.

6
00:00:21.180 --> 00:00:24.060
How does Python know what to do.

7
00:00:24.360 --> 00:00:29.730
And it comes down to the fact this plus sign operator behind the scenes is actually resulting in this

8
00:00:29.730 --> 00:00:37.140
Dunder pad method a magic method a special method that's called and it's called On this first opera

9
00:00:37.140 --> 00:00:46.350
and so in this case eight the integer and the method add is defined inside of the integer class and

10
00:00:46.350 --> 00:00:51.320
it says all right if I'm being added to another integer then we should return our sum.

11
00:00:51.400 --> 00:00:56.880
First is on the String instance the double underscore add magic method is defined.

12
00:00:57.030 --> 00:01:03.000
And it says if I'm being added to a string then concatenate the two of us if I'm being added to an integer

13
00:01:03.190 --> 00:01:04.310
you know throw an error.

14
00:01:04.410 --> 00:01:08.250
So we can actually go and write our own ad and we're going to do that in just a moment.

15
00:01:08.250 --> 00:01:11.670
For a human class so we can add two humans together.

16
00:01:12.000 --> 00:01:17.730
But other than add we've actually seen some of these like Lenn when I introduced back in the built in

17
00:01:17.730 --> 00:01:23.040
function section I talked about Lenn the built in function and how it uses the Dondre line you know

18
00:01:23.100 --> 00:01:25.180
double underscore magic thing.

19
00:01:25.380 --> 00:01:28.730
So we can define our own line like this on a human.

20
00:01:28.740 --> 00:01:35.780
So when I call line on code which is a human and not six inches tall I don't know why the slides at

21
00:01:35.790 --> 00:01:36.760
60.

22
00:01:36.970 --> 00:01:39.520
Anyway let's say I'm six inches tall.

23
00:01:39.540 --> 00:01:42.160
That's going to be my length that's returned here.

24
00:01:42.540 --> 00:01:45.000
And you know we could define whatever we wanted.

25
00:01:45.210 --> 00:01:51.510
We've also seen that by default when we printout you know an instance of any class we define we get

26
00:01:51.510 --> 00:01:53.340
this really gross looking thing.

27
00:01:53.670 --> 00:02:01.740
We can use representation method define that and whatever we put in there the representation will be

28
00:02:01.740 --> 00:02:04.160
called whenever we print it.

29
00:02:04.260 --> 00:02:06.080
And we've also already seen that.

30
00:02:06.300 --> 00:02:06.630
OK.

31
00:02:06.750 --> 00:02:12.060
So the point of all of this is to show you that there are these built in Dunder special magic whatever

32
00:02:12.060 --> 00:02:16.980
methods that Python uses is behind the scenes that we can actually add to our own classes implement

33
00:02:16.980 --> 00:02:20.620
them so that our classes can play nice with the rest of Python.

34
00:02:20.670 --> 00:02:25.980
So I'm on the documentation and there's a section called special method names.

35
00:02:26.040 --> 00:02:27.240
There's a bunch of them.

36
00:02:27.340 --> 00:02:30.310
I mean init is one there's.

37
00:02:30.450 --> 00:02:31.500
Well I'll point out some of them.

38
00:02:31.500 --> 00:02:33.960
We've already seen this one representation.

39
00:02:34.080 --> 00:02:35.960
There's also a string and format.

40
00:02:36.090 --> 00:02:38.520
These all kind of have to do with representation.

41
00:02:38.520 --> 00:02:40.130
There is a slight difference.

42
00:02:40.140 --> 00:02:46.920
Representation is supposed to be sort of a Python expression something that could be turned into Python.

43
00:02:47.040 --> 00:02:50.670
So it's actually not supposed to be a string like hello I am a human.

44
00:02:50.690 --> 00:02:57.480
It's supposed to be more pythonic versus not as TR under the under method we can put whatever we want

45
00:02:57.480 --> 00:03:02.920
in there there's no expectation that a return of old Python expression but really it just gets complicated.

46
00:03:02.970 --> 00:03:03.890
It doesn't matter.

47
00:03:03.900 --> 00:03:05.910
We can use with everyone anyway.

48
00:03:06.240 --> 00:03:08.490
There's other things like Lenn that we've seen.

49
00:03:08.510 --> 00:03:14.150
There's keep going down here reversed to return the reversed version of an iterator.

50
00:03:14.220 --> 00:03:15.760
Then here's the math once.

51
00:03:15.870 --> 00:03:20.880
Add subtract Moel and see true divide power.

52
00:03:20.880 --> 00:03:24.570
Basically you can define how all of these should work.

53
00:03:24.570 --> 00:03:28.920
And these are used behind the scenes of course so we're not really doing anything new.

54
00:03:28.920 --> 00:03:32.250
We're just adding these methods to whatever classes we define.

55
00:03:32.460 --> 00:03:33.910
So let's do that now with.

56
00:03:34.050 --> 00:03:36.740
Let's start with ADD and line and some of the basics.

57
00:03:36.810 --> 00:03:38.480
Here I have an empty file.

58
00:03:38.490 --> 00:03:42.310
I'll define a class called human and we'll define our.

59
00:03:42.320 --> 00:03:44.300
It would be very simple.

60
00:03:44.340 --> 00:03:54.270
We need self have a first or last name and an age and then we'll just set self-taught first equals first

61
00:03:55.440 --> 00:04:02.610
then let's do self-taught last equals last and self-taught age equals age.

62
00:04:03.040 --> 00:04:07.680
OK let's start with the very basics representation.

63
00:04:07.800 --> 00:04:09.060
We've already seen this.

64
00:04:09.360 --> 00:04:14.850
And let's just return a string and string with the first and last name.

65
00:04:15.000 --> 00:04:17.140
Human named.

66
00:04:17.790 --> 00:04:24.270
And then do we have self-doubt first self-doubt last.

67
00:04:24.420 --> 00:04:25.330
Just like that.

68
00:04:25.500 --> 00:04:37.310
And now we should be able to make a new human do J equals human Jenny Larson like that and she is 47.

69
00:04:37.920 --> 00:04:39.690
And now if I print J

70
00:04:42.480 --> 00:04:44.520
we get human named Jenny Larson.

71
00:04:44.720 --> 00:04:46.400
OK so let's review.

72
00:04:46.440 --> 00:04:53.610
We can also do things like Lenn And how would we want to define the length of a human.

73
00:04:53.640 --> 00:04:57.440
I don't know let's for now just return self-taught age.

74
00:04:57.700 --> 00:05:01.260
So the length of time they've lived with that.

75
00:05:01.270 --> 00:05:04.110
So now if I do print line of J.

76
00:05:06.670 --> 00:05:11.350
We get 47 and if I hadn't done this and I tried to print the line of J.

77
00:05:11.350 --> 00:05:16.780
Now we get an error because it says objects of type human has no length.

78
00:05:16.780 --> 00:05:22.530
So it doesn't know what to do so we have to add this in if we want to be able to call Len on a human.

79
00:05:22.600 --> 00:05:24.520
Next do something a bit more fun.

80
00:05:24.760 --> 00:05:26.220
Let's do add.

81
00:05:26.830 --> 00:05:30.920
OK so let's only worry about ADD between two humans.

82
00:05:31.060 --> 00:05:36.270
So if we had one human to another special thing happens and a third human is born that's all I'll say

83
00:05:36.280 --> 00:05:36.860
about that.

84
00:05:37.000 --> 00:05:39.130
I don't want to get any bad reviews about that.

85
00:05:39.400 --> 00:05:46.420
So in our version any two humans that are added together it should return a new human at zero years

86
00:05:46.420 --> 00:05:47.320
old.

87
00:05:47.320 --> 00:05:53.380
And let's just have it take the last name of the first human so it doesn't matter if it's a male or

88
00:05:53.380 --> 00:05:56.810
female we're not getting into the politics of that and taking names.

89
00:05:56.890 --> 00:05:58.450
But let's just say the first human.

90
00:05:58.450 --> 00:06:00.380
So if we had J.

91
00:06:00.790 --> 00:06:06.410
Plus and then we make another human called human a column K..

92
00:06:06.520 --> 00:06:10.160
Kevin Jones who is 49.

93
00:06:10.390 --> 00:06:17.950
OK so if I do J plus K we're going to take the last name so Larson will be a new human just born with

94
00:06:17.960 --> 00:06:22.210
no no first name yet will set first name to be unnamed or something.

95
00:06:22.210 --> 00:06:22.870
Or a newborn.

96
00:06:22.870 --> 00:06:24.450
How about that newborn.

97
00:06:24.570 --> 00:06:26.820
Larson is zero years old.

98
00:06:26.890 --> 00:06:33.600
So all we would do we have to add self in self refers to whatever came first.

99
00:06:33.940 --> 00:06:38.100
And then there is a second parameter which I all just call other.

100
00:06:38.120 --> 00:06:41.140
It's the second thing thats being added.

101
00:06:41.140 --> 00:06:45.970
And if we do this we can add a little check in if we really want to be fancy.

102
00:06:45.970 --> 00:06:53.440
We could add a little check to make sure it's a human so see if other is a human because self is guaranteed

103
00:06:53.440 --> 00:06:56.460
to be a human because this method is defined on human.

104
00:06:56.740 --> 00:06:58.860
But we want to make sure that we're adding a human.

105
00:06:59.020 --> 00:07:00.640
So is instance other human.

106
00:07:00.700 --> 00:07:07.180
If that's the case we just return a new human where first is equal to.

107
00:07:07.540 --> 00:07:14.840
Let's just go with newborn last is equal to self datt last.

108
00:07:14.890 --> 00:07:20.770
So whatever you know J's name or the first human that's being added there their current last name and

109
00:07:20.770 --> 00:07:22.570
age is zero.

110
00:07:22.600 --> 00:07:28.370
OK and otherwise let's just return a string that says.

111
00:07:28.390 --> 00:07:32.980
Technically I don't think Python wants to do this but just for our example will return a string that

112
00:07:32.980 --> 00:07:38.830
says you can't add that OK.

113
00:07:39.510 --> 00:07:41.020
So let's check it out now.

114
00:07:41.190 --> 00:07:42.400
So we have Jane OK.

115
00:07:42.580 --> 00:07:43.670
Let's do a print.

116
00:07:43.740 --> 00:07:45.150
J plus K.

117
00:07:45.480 --> 00:07:51.510
And on top of this if this works Jay post-K should return this new human and we should only see the

118
00:07:51.510 --> 00:07:57.130
string representation of it so it should say human named newborn Larson.

119
00:07:57.560 --> 00:07:58.380
Let's check it out.

120
00:07:59.120 --> 00:08:00.380
There we go.

121
00:08:00.380 --> 00:08:01.680
Sweet.

122
00:08:01.700 --> 00:08:03.920
And we could you know check the age.

123
00:08:03.920 --> 00:08:09.470
Let's do this human named aged self-taught age right there.

124
00:08:09.500 --> 00:08:11.380
Now we get human names.

125
00:08:11.390 --> 00:08:13.660
Newburn Larson aged zero.

126
00:08:14.240 --> 00:08:14.920
Cool.

127
00:08:15.140 --> 00:08:17.480
So we have additional working between two humans.

128
00:08:17.630 --> 00:08:22.280
Fred tried to do J plus two for example we now get a string.

129
00:08:22.370 --> 00:08:23.270
You can add that.

130
00:08:23.360 --> 00:08:27.190
So that ad one more fun one we could do is multiply.

131
00:08:27.470 --> 00:08:30.330
So the magic method for that is Moel.

132
00:08:30.950 --> 00:08:33.270
So we'll do the same thing self and other.

133
00:08:33.650 --> 00:08:37.990
So this would be you know what a multiplied J times 2.

134
00:08:38.270 --> 00:08:42.290
Let's say that we want to return a list that are cloning humans.

135
00:08:42.290 --> 00:08:46.840
So if I multiply a human by 2 it should be twins or triplets something like that.

136
00:08:47.000 --> 00:08:52.320
So in this case self refers to the first operand and then other is the second one.

137
00:08:52.910 --> 00:08:55.990
And we could just start super simple with return.

138
00:08:56.000 --> 00:09:01.070
You are multiplying humans like that.

139
00:09:01.220 --> 00:09:05.420
And if I print J times 2 we get you're multiplying humans.

140
00:09:05.450 --> 00:09:11.270
So this is just a shortcut for then calling the magic more method wherever it's implemented.

141
00:09:11.270 --> 00:09:15.020
In this case it's checking on human because it's on the left.

142
00:09:15.020 --> 00:09:20.930
If I did switch it up and do two times Jay it's going to look on the INT for the mole method and it

143
00:09:20.930 --> 00:09:22.560
doesn't find it and freaks out.

144
00:09:22.840 --> 00:09:23.240
OK.

145
00:09:23.300 --> 00:09:25.150
So the order definitely matters.

146
00:09:25.160 --> 00:09:28.610
So what we want to do is it will be a bit of a tangent here.

147
00:09:28.670 --> 00:09:34.190
We want to basically how many times other is in this case too.

148
00:09:34.280 --> 00:09:41.180
We want to make two copies of Jei of self and we could just do a list comprehension for that and we

149
00:09:41.180 --> 00:09:49.220
could we should start by checking if it's in an instance of it if is instance other this time we want

150
00:09:49.220 --> 00:09:57.080
to and if that's the case then let's return we'll do a list comprehension and our list will just be

151
00:09:57.320 --> 00:10:04.350
self for I don't know I in range either.

152
00:10:04.970 --> 00:10:11.120
So it's just going to return self which is J in our case or whatever human.

153
00:10:11.480 --> 00:10:14.550
Each time for I in range other.

154
00:10:14.570 --> 00:10:16.090
So other is too.

155
00:10:16.160 --> 00:10:20.950
So it should return to versions of self to JS analyst.

156
00:10:21.230 --> 00:10:28.080
And let's just do an otherwise return can't multiply.

157
00:10:28.310 --> 00:10:30.240
Let's check it out.

158
00:10:30.490 --> 00:10:32.000
What do we get.

159
00:10:32.000 --> 00:10:36.230
Human named Jenny Larson age 47 human named Toni Larson age 47.

160
00:10:36.230 --> 00:10:41.980
So two of them and we're getting that because of the representation we set up.

161
00:10:42.080 --> 00:10:43.270
It's worth noting.

162
00:10:43.370 --> 00:10:51.020
Well first let me just try multiplying it by a letter for example we get can't multiply but it is worth

163
00:10:51.020 --> 00:10:57.500
noting that the way this is set up these two or however many things let's do three and let's save it

164
00:10:57.500 --> 00:11:03.760
to a variable this time let's say triplets equals Jey times three.

165
00:11:04.120 --> 00:11:04.870
OK.

166
00:11:05.300 --> 00:11:13.880
And if I just print triplets and before I do that let's try and change one of them was changed to the

167
00:11:13.880 --> 00:11:15.590
middle one to triplets.

168
00:11:15.590 --> 00:11:16.270
It's a list.

169
00:11:16.280 --> 00:11:23.140
So I should be able to do 1 0 1 2 triplets one dot first should have a different first name.

170
00:11:23.240 --> 00:11:29.380
See Jenny and they are identical triplets so let's go with Jessica.

171
00:11:29.930 --> 00:11:34.360
So the second person in the second triplet should have the name Jessica.

172
00:11:34.370 --> 00:11:41.100
But if I look at it they all say Jessica human name just close in human name just colors.

173
00:11:41.240 --> 00:11:44.900
And what's happening is that these are all the exact same object.

174
00:11:45.080 --> 00:11:47.630
We didn't make actual clones or copies.

175
00:11:47.720 --> 00:11:49.740
They are identical and they're linked.

176
00:11:49.760 --> 00:11:52.900
So when you make a change to one it's made and all of them.

177
00:11:52.910 --> 00:11:57.860
So this list is just three references to the same thing because we're just returning self.

178
00:11:57.860 --> 00:12:00.040
So this is where I'm getting into a tangent.

179
00:12:00.110 --> 00:12:06.140
But if we did want to make this actually work with the functionality we want we want three copies we

180
00:12:06.140 --> 00:12:09.950
can import from copy.

181
00:12:09.950 --> 00:12:17.000
So this is a built in module you can import a method called to copy and then copy will do just pass

182
00:12:17.000 --> 00:12:17.800
itself.

183
00:12:17.810 --> 00:12:22.730
It will actually make a new copy a new space in memory for each copy so they are separate.

184
00:12:22.730 --> 00:12:25.880
They'll start out looking the same but they're separate.

185
00:12:25.880 --> 00:12:27.210
So we have to import it first.

186
00:12:27.410 --> 00:12:31.090
And now if it's right now it did not need that.

187
00:12:31.120 --> 00:12:35.890
If we try and change the second one's name to be Jessica there we go.

188
00:12:35.990 --> 00:12:40.460
Human named Jenny Larson human named Jessica human named Jenny Larson.

189
00:12:40.790 --> 00:12:43.830
So now we have triplets and they are all different.

190
00:12:43.820 --> 00:12:45.950
So multiply is working.

191
00:12:46.280 --> 00:12:52.280
And finally we could do a little longer math equation but if we did this we have k.

192
00:12:52.400 --> 00:12:59.580
So let's do K plus J like this times 3.

193
00:12:59.690 --> 00:13:06.490
So this is Kevin and Jessica having triplets.

194
00:13:06.860 --> 00:13:13.430
So they do whatever they do and we get the ad which gives us a newborn 0 years old with the last name

195
00:13:13.430 --> 00:13:19.740
of Kevin this time which is Jones and then we're multiplying that person that human by 3.

196
00:13:19.760 --> 00:13:20.810
So we should get a list.

197
00:13:20.840 --> 00:13:26.220
So let's do triplets equals K plus post-jail times three.

198
00:13:26.360 --> 00:13:29.090
And then print triplets.

199
00:13:30.350 --> 00:13:31.720
Let's come at this out.

200
00:13:32.270 --> 00:13:33.280
And what do we get.

201
00:13:34.940 --> 00:13:41.460
Here we go human named Newburn Jones age three weren't age 3 8 0 0 and 0 we get three of them.

202
00:13:41.710 --> 00:13:41.960
OK.

203
00:13:41.960 --> 00:13:42.980
So it's kind of fun.

204
00:13:42.980 --> 00:13:47.140
We're now just coming up with all different math that we can apply to humans.

205
00:13:47.150 --> 00:13:53.120
I will leave it at that because it gets a little grimmer when we talk about subtraction and dividing

206
00:13:53.120 --> 00:13:53.800
up humans.

207
00:13:53.930 --> 00:13:55.190
Not going to go into that.

208
00:13:55.220 --> 00:14:01.100
So we have addition and modifying But the real lesson behind all of this is that there are these magic

209
00:14:01.100 --> 00:14:08.630
methods and something like the plus side is going to call magic method special method Dunder and it's

210
00:14:08.630 --> 00:14:13.160
going to look for that if it doesn't exist then it's going to throw an error if it does then it's up

211
00:14:13.160 --> 00:14:19.370
to us to determine how it should work or it's up to the string implementation or int to decide how it

212
00:14:19.370 --> 00:14:20.060
should work.
