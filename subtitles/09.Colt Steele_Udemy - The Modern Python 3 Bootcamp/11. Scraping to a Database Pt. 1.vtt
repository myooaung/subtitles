WEBVTT
1
00:00:00.070 --> 00:00:00.800
Well welcome back.

2
00:00:00.810 --> 00:00:06.750
So in this video we're going to see how to scrape data and then save it to a sequel database using the

3
00:00:06.750 --> 00:00:08.990
exact same stuff we've already been learning.

4
00:00:09.070 --> 00:00:14.200
So it's going to combine stuff from the scraping section earlier where we were saving data to a C S

5
00:00:14.210 --> 00:00:15.370
V file at the end.

6
00:00:15.570 --> 00:00:19.860
Instead of that we're going to save it to a sequel database which sometimes can be more useful depending

7
00:00:19.860 --> 00:00:23.190
on what you're doing and will be able to query it.

8
00:00:23.190 --> 00:00:29.760
Unfortunately there's not a ton of Web sites out there that I can show you to scrape and sort of get

9
00:00:29.760 --> 00:00:35.680
away with it except for one of these websites that is made deliberately to scrape.

10
00:00:35.700 --> 00:00:40.050
So we are going to scrape some different content this is if you didn't watch the scraping section we

11
00:00:40.050 --> 00:00:42.550
scraped this books to scrape website.

12
00:00:42.630 --> 00:00:46.440
But we're going to scrape some other values like the rating.

13
00:00:46.590 --> 00:00:48.580
We're going to figure out how many stars are there.

14
00:00:48.870 --> 00:00:51.010
It's a little more complicated.

15
00:00:51.150 --> 00:00:52.940
We're going to scrape the entire title.

16
00:00:52.950 --> 00:00:54.500
There's a couple of things we'll do.

17
00:00:54.990 --> 00:01:01.050
But the main idea is to save it to a database to save a sequel or to a sequel like database.

18
00:01:01.050 --> 00:01:03.780
And we're going to just work with these history books.

19
00:01:03.780 --> 00:01:05.010
The URL is here.

20
00:01:05.070 --> 00:01:10.170
You could pick any of these it's books to scrape books Dot to scrape dot com.

21
00:01:10.320 --> 00:01:13.530
And then I clicked on history but all of them follow the same pattern.

22
00:01:13.890 --> 00:01:16.130
And yet we're just going to one page of them.

23
00:01:16.140 --> 00:01:23.000
But you could easily do all of these pretty simple it just you can automate it relatively quickly anyway.

24
00:01:23.100 --> 00:01:27.660
You can copy this you know and I have a new file here called Book scraper it up Highway.

25
00:01:27.910 --> 00:01:32.070
And I'm going to start by just importing the things I need so I need sequela three eventually.

26
00:01:32.190 --> 00:01:38.880
I also need the requests module to request that or else they just copied and then I'm going to do from

27
00:01:38.910 --> 00:01:43.510
B-S for UPS Yes for import.

28
00:01:43.740 --> 00:01:46.430
Beautiful.

29
00:01:46.500 --> 00:01:49.560
E B E A beautiful suit.

30
00:01:49.860 --> 00:01:50.590
All right.

31
00:01:50.760 --> 00:01:55.580
And if there's some extra noise coming through there's a large protest outside my apartment right now

32
00:01:56.100 --> 00:01:58.520
and it's supposed to go all night.

33
00:01:58.530 --> 00:02:02.170
So I do want to record this and get this out ASAP.

34
00:02:02.310 --> 00:02:03.850
I'm sorry if it's super noisy.

35
00:02:03.930 --> 00:02:06.150
I'll redo it if it's if it's too bad.

36
00:02:06.310 --> 00:02:15.500
Anyway so the basic things you want to do are request you arow initialize vs.

37
00:02:15.690 --> 00:02:23.990
And then we want to extract the data we want and then save that data to database.

38
00:02:24.270 --> 00:02:31.620
So to request that you are so we're basically going to do a requests get and then pass in that you are

39
00:02:31.620 --> 00:02:36.680
well I just copied and that should give us the HDMI content a ton of stuff.

40
00:02:36.810 --> 00:02:43.620
So I'm going to save that to a variable called response like that and then we now need to do beautiful

41
00:02:43.620 --> 00:02:47.310
soup and pass in the text from that response.

42
00:02:47.340 --> 00:02:50.060
So that's response text.

43
00:02:50.580 --> 00:02:53.930
And then we also need to say Tim Elda parser.

44
00:02:53.970 --> 00:03:00.030
So if this is new to you I go into a lot more detail explaining the idea of scraping what this line

45
00:03:00.030 --> 00:03:02.860
means what beautiful soup is in the scraping section.

46
00:03:02.940 --> 00:03:04.450
But this initializes everything.

47
00:03:04.620 --> 00:03:09.190
So now we can go through and find the pieces of information we want.

48
00:03:09.470 --> 00:03:12.690
So let's go back and start with the title.

49
00:03:12.690 --> 00:03:16.030
So let's just figure out what a book even is.

50
00:03:16.620 --> 00:03:21.480
So when you divide the books What's like the container for each book.

51
00:03:21.480 --> 00:03:23.460
All right so here is a row.

52
00:03:23.970 --> 00:03:26.270
And in each row that's the wrong row.

53
00:03:26.400 --> 00:03:27.690
And what one of these.

54
00:03:28.260 --> 00:03:28.530
OK.

55
00:03:28.530 --> 00:03:35.640
So we have a row and in each row there are allies and then inside of each line there's an article with

56
00:03:35.640 --> 00:03:41.570
the class of product underscore pod and they're also the only articles on the page.

57
00:03:41.730 --> 00:03:47.940
But we can just select all articles with the class of product underscore pod that gives us one book

58
00:03:48.210 --> 00:03:52.050
and then the next book is also an article class equals product pod.

59
00:03:52.140 --> 00:03:58.650
So we'll select all of those to get those individual books and then within that we can do we can find

60
00:03:58.650 --> 00:03:59.620
certain things.

61
00:03:59.850 --> 00:04:00.400
OK.

62
00:04:00.540 --> 00:04:09.420
So let's go back here and select all of those books so I'll make a variable called books equals soup.

63
00:04:09.480 --> 00:04:12.320
I didn't save this to a variable called Soup.

64
00:04:12.330 --> 00:04:12.980
That's normal.

65
00:04:12.990 --> 00:04:18.130
That's what I like to call it soup dot find all.

66
00:04:18.240 --> 00:04:22.340
And then we pass in a selector like article and that's going to return to us.

67
00:04:22.380 --> 00:04:23.400
All of the articles.

68
00:04:23.550 --> 00:04:28.040
So we could start by just printing books and just make sure that we get something.

69
00:04:28.380 --> 00:04:33.300
So I have a new folder I put this in because I have two new files the scraper and then the database

70
00:04:33.300 --> 00:04:34.090
file.

71
00:04:34.110 --> 00:04:37.030
So when you run that file see if I did anything wrong.

72
00:04:37.200 --> 00:04:38.790
Yep looks like I did.

73
00:04:38.790 --> 00:04:40.120
Indentation error.

74
00:04:40.440 --> 00:04:40.740
All right.

75
00:04:40.740 --> 00:04:41.560
Fix that.

76
00:04:41.670 --> 00:04:42.630
Let's try that again.

77
00:04:43.880 --> 00:04:45.260
It will take a moment.

78
00:04:45.270 --> 00:04:45.900
All right.

79
00:04:45.900 --> 00:04:52.620
So we're getting a ton of content but if we look at what we actually have let's see where did the article.

80
00:04:52.860 --> 00:04:54.260
Here's an article that ends.

81
00:04:54.270 --> 00:04:55.380
And here's a new one that begins.

82
00:04:55.380 --> 00:05:00.200
So it is a list of articles and each article is an individual book.

83
00:05:00.210 --> 00:05:02.280
This is one book right here.

84
00:05:02.280 --> 00:05:08.610
So within that we're going to start by pulling out the title and kind of annoying thing is that the

85
00:05:08.610 --> 00:05:13.020
title isn't actually easily accessible.

86
00:05:13.020 --> 00:05:14.690
If we look at how it's stored.

87
00:05:15.360 --> 00:05:16.570
Here's the title.

88
00:05:17.190 --> 00:05:18.990
It's in a anchored tag.

89
00:05:19.140 --> 00:05:23.410
But the entire title isn't always in the actual text of the anchor tag.

90
00:05:23.430 --> 00:05:28.000
If you look at the inner text it's a it's a bridge is that the right term.

91
00:05:28.140 --> 00:05:30.770
Sapiens A brief history dot dot dot.

92
00:05:30.840 --> 00:05:34.940
It's cut off Rosena lips their lips.

93
00:05:35.190 --> 00:05:37.890
Geez I don't know anyway.

94
00:05:38.040 --> 00:05:43.070
But the actual entire title is contained in an attribute called Title.

95
00:05:43.110 --> 00:05:43.900
So it's hidden.

96
00:05:43.920 --> 00:05:47.190
We don't see it but it contains the entire title.

97
00:05:47.220 --> 00:05:56.730
So we could scrape that and to do that we go select anchor tag inside of this article and then from

98
00:05:56.730 --> 00:05:58.140
that we're going to select.

99
00:05:58.170 --> 00:06:02.710
So we want the first anchor tag inside the article we want to select the title attribute.

100
00:06:03.030 --> 00:06:04.890
So for each book.

101
00:06:04.890 --> 00:06:05.600
Basically.

102
00:06:05.760 --> 00:06:12.060
So for book in books we're going to loop over this array or this list of books that we just got for

103
00:06:12.090 --> 00:06:13.220
each one.

104
00:06:13.390 --> 00:06:14.860
Just double check our markup.

105
00:06:14.910 --> 00:06:20.750
There's an H3 with an anchor tag inside of it and that will that's what we'll use instead of just plain

106
00:06:20.760 --> 00:06:21.510
anchor tag.

107
00:06:21.530 --> 00:06:23.740
There's maybe more than one.

108
00:06:23.850 --> 00:06:28.940
I think this is a form yes not an anchor tag but just in case there's more than one anchor tag will

109
00:06:28.950 --> 00:06:30.060
be more specific.

110
00:06:30.060 --> 00:06:38.670
So for book in books I going to select within that individual book find and page 3 and then inside of

111
00:06:38.670 --> 00:06:41.850
that H-3 we can do another find for the anchor tag.

112
00:06:42.120 --> 00:06:48.480
And if we just do that just print that instead of printing all books but see what happens.

113
00:06:49.360 --> 00:06:50.800
Takes a moment.

114
00:06:50.800 --> 00:06:53.530
All right so now we're only getting those anchor text.

115
00:06:53.890 --> 00:07:01.660
And what we want is that title attribute my cat scratching OK.

116
00:07:02.170 --> 00:07:06.910
One more time back here to get the title attributes is a little bit trickier.

117
00:07:07.050 --> 00:07:11.060
Well we have to do is use array brackets or list brackets.

118
00:07:11.350 --> 00:07:13.820
Title just like that.

119
00:07:14.080 --> 00:07:17.180
And that should print out each book title.

120
00:07:17.290 --> 00:07:19.180
Let's just make sure there we go.

121
00:07:19.300 --> 00:07:21.580
So those are all the books that we're scraping.

122
00:07:21.580 --> 00:07:23.080
Those are their titles.

123
00:07:23.440 --> 00:07:27.230
So that's going to get us the title The next thing that we're going to do.

124
00:07:27.250 --> 00:07:32.240
I'm going to reorganize all of this content in a little bit into different methods.

125
00:07:32.380 --> 00:07:36.590
But for now we're just going to just write it spaghetti code just going down the page.

126
00:07:36.610 --> 00:07:40.110
So after the title let's talk about getting the price.

127
00:07:40.110 --> 00:07:43.090
So the price is located right here.

128
00:07:43.090 --> 00:07:44.540
This is pretty straightforward.

129
00:07:44.550 --> 00:07:49.990
There's a class div class product price are actually price color that's what we want and we want the

130
00:07:50.200 --> 00:07:51.170
text of that.

131
00:07:51.310 --> 00:07:57.070
So that's not too bad although I'm going to store this in my sequel database as a number as a reel which

132
00:07:57.070 --> 00:08:02.240
is basically a float that contains a decimal but I want to get rid of the currency symbol whether it's

133
00:08:02.240 --> 00:08:03.860
a dollar sign pound euro.

134
00:08:04.000 --> 00:08:06.970
We don't want that or inserting this as a number.

135
00:08:07.090 --> 00:08:12.870
So the first thing we'll do I'll do the same thing just printed out book find.

136
00:08:13.030 --> 00:08:19.540
So when we refer to a book it's the entire book article we happened to go to an H3 and find an anchor

137
00:08:19.540 --> 00:08:20.550
tag and get that title.

138
00:08:20.560 --> 00:08:23.640
But we still have access to the book the entire parent book.

139
00:08:23.830 --> 00:08:28.950
So we want to find actually instead of find I think the easiest ways to do select where I can use a

140
00:08:28.950 --> 00:08:36.200
C S S syntax and say Dot price price color like that.

141
00:08:36.430 --> 00:08:42.400
And then within that if you look at what this gives me it's kind of annoying when it comes to the titles

142
00:08:44.350 --> 00:08:52.860
even if it only finds one thing it's going to give me an array or a list and I want the first thing

143
00:08:52.860 --> 00:08:54.650
in that list which is a paragraph.

144
00:08:54.690 --> 00:09:00.080
So it's basically finding me all items that have that class price colored but there's only one.

145
00:09:00.150 --> 00:09:03.420
But it assumes there could be more than one so it puts them in a list.

146
00:09:03.450 --> 00:09:10.710
So I want the zero with Element first one and within that I want the text the inner text.

147
00:09:10.710 --> 00:09:14.910
So zero is going to give me the only element in there but it's a it's a paragraph tag.

148
00:09:14.910 --> 00:09:19.920
We only want this but then we have that annoying part.

149
00:09:20.010 --> 00:09:21.310
Take a look at that.

150
00:09:21.350 --> 00:09:23.820
I'm now getting this annoying symbol going.

151
00:09:23.910 --> 00:09:30.000
So to clean that up a bit what I'm going to do is I'm printing the book title.

152
00:09:30.150 --> 00:09:39.420
I'm going to make this a variable and just say title equals and then we'll say price equals this but

153
00:09:39.420 --> 00:09:43.700
then we're going to clean up the price by replacing certain symbols in there.

154
00:09:43.890 --> 00:09:46.340
So I'm going to copy those two things.

155
00:09:47.370 --> 00:09:52.950
And there's more than one way of doing this but I'm just going to kind of do a clunky way.

156
00:09:52.950 --> 00:09:53.900
I'm going to convert.

157
00:09:53.970 --> 00:09:55.560
Well first I'm going to replace.

158
00:09:55.560 --> 00:09:59.950
So price not replace and I'm going to start by replacing.

159
00:10:00.210 --> 00:10:09.120
Let's do I'll start with that and then I'm going to do another replace and I could have probably just

160
00:10:09.120 --> 00:10:16.280
done this but just in case some reason like I'm not sure exactly when I'm getting this or why it or

161
00:10:16.290 --> 00:10:19.260
if every machine is going to have this issue that I'm having.

162
00:10:19.260 --> 00:10:20.520
So I don't know a hard code that in.

163
00:10:20.520 --> 00:10:26.520
So this place this symbol is there and this symbol if it's there but they don't have to be together

164
00:10:26.520 --> 00:10:27.120
necessarily.

165
00:10:27.120 --> 00:10:33.480
But if they are they'll both be removed and then we have to say replace with what an empty string like

166
00:10:33.480 --> 00:10:34.690
that.

167
00:10:34.710 --> 00:10:41.500
And then the last thing I'm going to do is convert the whole thing into a float that we actually get

168
00:10:41.500 --> 00:10:45.510
a number and then let's start by just printing this nasty line.

169
00:10:45.520 --> 00:10:48.850
But I'm going to move these all to a separate function in a bit.

170
00:10:48.850 --> 00:10:50.410
So let's see if that works.

171
00:10:50.950 --> 00:10:51.720
We'll see.

172
00:10:54.320 --> 00:10:55.180
Come on.

173
00:10:55.470 --> 00:10:56.140
You can do it.

174
00:10:56.190 --> 00:10:56.690
Cool.

175
00:10:56.740 --> 00:10:59.720
So now we're getting the prices without any of this extra stuff.

176
00:10:59.730 --> 00:11:03.670
And they are indeed floats and that looks good.

177
00:11:03.690 --> 00:11:08.880
So now I'm going to save that to be price just like that.

178
00:11:08.880 --> 00:11:10.600
Get rid of the second Pirenne.

179
00:11:10.650 --> 00:11:12.390
So now we have those pieces of data.

180
00:11:12.440 --> 00:11:18.070
Well title and price then we need to tackle the issue of the review score.

181
00:11:18.450 --> 00:11:20.960
And this part's kind of annoying.

182
00:11:21.030 --> 00:11:21.890
It's not impossible.

183
00:11:21.900 --> 00:11:28.200
What we're going to do is take these icons right here which are in a paragraph called Star rating or

184
00:11:28.230 --> 00:11:29.580
as a class of star rating.

185
00:11:29.760 --> 00:11:36.120
And then really the only indicator indicator I pronounce it that way when the indicator of how many

186
00:11:36.120 --> 00:11:43.050
are there because there's always five stars there's always five icons just some are gray Some are yellow.

187
00:11:43.050 --> 00:11:45.100
But we can't really tell that easily.

188
00:11:45.180 --> 00:11:49.480
We can't really count that because it's done through CSSA after the fact.

189
00:11:49.590 --> 00:11:52.510
So instead there's a class says five appear.

190
00:11:52.770 --> 00:11:56.760
And if we look at this one there was a class it says 1.

191
00:11:57.150 --> 00:12:03.570
So what we want to do is select the paragraph that has a class of star rating but we want the other

192
00:12:03.570 --> 00:12:05.150
class that it contains.

193
00:12:05.640 --> 00:12:07.660
And then we're going to have to convert that to a number.

194
00:12:08.010 --> 00:12:13.440
So first let's just select that class that has star rating.

195
00:12:13.440 --> 00:12:18.690
So we'll call it paragraph or something equals book select.

196
00:12:19.410 --> 00:12:27.110
And then what was it Star underscored rating double check start dash your hyphen rating.

197
00:12:27.390 --> 00:12:33.570
OK so that's going to give us the whole paragraph then to actually get the class to do some research

198
00:12:33.570 --> 00:12:34.010
on this.

199
00:12:34.080 --> 00:12:43.860
But to get the list we do get attributes list of class and I'm going to do this on a separate line actually.

200
00:12:43.860 --> 00:12:50.420
So a paragraph and then we can't really make a verbal call in class so we'll call it C-a.

201
00:12:50.490 --> 00:13:00.210
We can't do CLX either but let's go with rading and it's going to be paragraph get attribute list and

202
00:13:00.210 --> 00:13:04.800
then we pass in class and I'm going to comment all of this other stuff out.

203
00:13:04.860 --> 00:13:13.880
So you can see what that returns to us and we'll just print rating one more time up paragraphs not to

204
00:13:13.870 --> 00:13:19.540
find I'm an idiot or using that line shouldn't have commented out.

205
00:13:19.910 --> 00:13:26.630
So same issue as before where this is returning an array and it's telling me that the list is returning

206
00:13:26.630 --> 00:13:31.730
a list on the list has no object get attribute or has no attribute attribute lists.

207
00:13:31.820 --> 00:13:38.030
So I need to select the first thing in that list even if there's only one self to say I want the actual

208
00:13:38.060 --> 00:13:39.800
element the actual paragraph.

209
00:13:39.830 --> 00:13:42.100
Same thing that it did appear otherwise.

210
00:13:42.110 --> 00:13:47.700
Without this we're trying to get text on the list not on the individual paragraph or the individual.

211
00:13:47.700 --> 00:13:52.240
I think this was a paragraph as well whatever the actual element was.

212
00:13:52.280 --> 00:13:53.370
So same thing here.

213
00:13:53.660 --> 00:13:55.090
And let's test it out.

214
00:13:55.090 --> 00:13:59.050
Now it's going to work better.

215
00:13:59.050 --> 00:13:59.440
All right.

216
00:13:59.470 --> 00:14:01.050
So now you can see what we get.

217
00:14:01.150 --> 00:14:05.300
We get this list for each paragraph.

218
00:14:05.320 --> 00:14:08.560
There are two classes and we want that second item.

219
00:14:08.560 --> 00:14:15.760
So we're going to narrow it down a bit more and say we want the second item so index of one or what

220
00:14:15.760 --> 00:14:18.280
I prefer because maybe there's more than one class.

221
00:14:18.280 --> 00:14:21.310
Let's just say the last item in that array.

222
00:14:22.150 --> 00:14:27.130
That's the challenge of scraping things could change of course but then you have to stay on top of that

223
00:14:27.330 --> 00:14:30.900
to update make sure things do change that are code changes with them.

224
00:14:31.090 --> 00:14:32.780
So now we're getting this text.

225
00:14:33.100 --> 00:14:33.590
Cool.

226
00:14:33.760 --> 00:14:38.570
So we're saving that to a variable called rating but it's still not a number.

227
00:14:38.650 --> 00:14:40.390
And I want it to be an integer.

228
00:14:40.420 --> 00:14:51.790
So what I'm going to do is basically make a dictionary that maps let's say 1 to the integer one and

229
00:14:51.790 --> 00:14:53.190
I'll fill this out and come back.

230
00:14:53.410 --> 00:14:54.130
There we go.

231
00:14:54.130 --> 00:14:59.860
So now we can plug in something like 2 and get the number two out.

232
00:14:59.860 --> 00:15:01.140
So let's try that.

233
00:15:01.150 --> 00:15:09.070
So rading equals and I'll break this onto another line and just say I don't know number or how about

234
00:15:09.270 --> 00:15:16.280
integrating equals rating like that ratings of rating.

235
00:15:16.420 --> 00:15:20.580
So this is our word that we get back like five F I ve.

236
00:15:20.590 --> 00:15:24.810
We plug it into the ratings dictionary and that should give us the number five.

237
00:15:24.880 --> 00:15:27.200
And now finally we will print that rating out.

238
00:15:27.580 --> 00:15:29.110
Let's give it one more whirl.

239
00:15:29.440 --> 00:15:31.540
It's going to work for us.

240
00:15:31.540 --> 00:15:33.230
I'm still printing the wrong thing aren't I.

241
00:15:33.330 --> 00:15:35.720
You want to print the int rating.

242
00:15:35.890 --> 00:15:40.480
So we did all that work and then we just didn't print it out over time.

243
00:15:40.480 --> 00:15:40.800
All right.

244
00:15:40.810 --> 00:15:42.100
Now we're getting numbers.

245
00:15:42.100 --> 00:15:42.730
Cool.

246
00:15:42.930 --> 00:15:45.480
So now we have three pieces of data that we want.

247
00:15:45.880 --> 00:15:48.240
And we're scraping part is pretty much done.

248
00:15:48.280 --> 00:15:51.310
What I want to do though is combine them all into.

249
00:15:51.370 --> 00:15:54.190
Well there's two things I want to break these out into separate functions or methods.

250
00:15:54.190 --> 00:15:57.000
It's really ugly to have this all like this.

251
00:15:57.070 --> 00:16:04.960
So I want to have a method like I don't know let's say get title like that and then I want another one

252
00:16:05.290 --> 00:16:07.990
that is def get rading.

253
00:16:08.290 --> 00:16:13.440
So we can just pass the book in and get the data rather than having all this.

254
00:16:13.510 --> 00:16:18.130
And then on top of that I also want to put them all in a list together so that I can insert them into

255
00:16:18.130 --> 00:16:19.370
the database all at once.

256
00:16:19.450 --> 00:16:21.570
But I'm going to talk about sequent in the next video.

257
00:16:21.580 --> 00:16:26.750
So right now I'm just going to clean up everything and move it move our data into separate from her

258
00:16:26.800 --> 00:16:33.850
move these lines into separate methods so get title will take a book and I'm just going to move basically

259
00:16:33.850 --> 00:16:43.910
this one line into their Except I'm just going to return Bookout find a three find a find the title

260
00:16:44.360 --> 00:16:46.310
so that will just return the title.

261
00:16:46.310 --> 00:16:50.450
Then we have what's the next thing we'll do get.

262
00:16:50.440 --> 00:16:55.900
Price it also will take in a book and then.

263
00:16:56.240 --> 00:16:57.460
So I'm not calling it yet.

264
00:16:57.510 --> 00:17:04.400
I'm just going to refactor them and we're going to take these two lines and move them down there.

265
00:17:04.400 --> 00:17:08.590
Uncomment them and then we don't need to do.

266
00:17:08.630 --> 00:17:12.170
So we'll make that price and we can just return this.

267
00:17:13.070 --> 00:17:15.350
Just like that it's the same code.

268
00:17:15.350 --> 00:17:21.140
We're finding the text we're removing the currency symbols and this random symbol and then turning it

269
00:17:21.140 --> 00:17:22.970
into a float and returning that value.

270
00:17:23.210 --> 00:17:32.660
And then for raiding if a bit more work to do like that and then we will return this value just like

271
00:17:32.660 --> 00:17:38.450
that and I'm going to clean this when it changes to be the B word.

272
00:17:38.630 --> 00:17:43.140
Just to make it clear we're taking a word and turning it into a rating.

273
00:17:43.250 --> 00:17:44.080
Same logic.

274
00:17:44.180 --> 00:17:45.620
So now we need to call these.

275
00:17:45.650 --> 00:17:52.060
So I'm now going to find a method a peer that's just called scrap books and it doesn't take any arguments

276
00:17:52.100 --> 00:17:54.360
or I don't know maybe it takes a u r l.

277
00:17:54.460 --> 00:17:55.690
Sure why not.

278
00:17:55.880 --> 00:17:59.480
And then in here we're going to actually do all of the scraping

279
00:18:02.410 --> 00:18:09.270
so I'm going after the fact that it's a bit removed that you are out here and replace it with your show.

280
00:18:09.490 --> 00:18:14.210
And then at the bottom I'm going to call scrape books with that you are ill.

281
00:18:14.350 --> 00:18:15.990
So that will start everything.

282
00:18:16.030 --> 00:18:20.890
Then we get all the articles and then we look for her for each book in book.

283
00:18:20.890 --> 00:18:25.330
We're going to call get title on that book and pass and book.

284
00:18:25.330 --> 00:18:29.830
We're going to call get price on that book and get reading.

285
00:18:30.250 --> 00:18:33.010
But we're not storing it anywhere just yet.

286
00:18:33.040 --> 00:18:41.650
What we could do to start simply is just put it all put them each in a tuple so we can do this put commas

287
00:18:41.650 --> 00:18:42.660
between them.

288
00:18:42.970 --> 00:18:51.430
Make it a tuple like that and then let's make an array or a list at the top just all books and add them

289
00:18:51.430 --> 00:18:52.000
into that.

290
00:18:52.090 --> 00:19:02.270
Just to finish off for now so all books pens and maybe it'd be nicer to make this its own variable.

291
00:19:02.380 --> 00:19:06.700
So we'll call it new Let's call it book.

292
00:19:06.800 --> 00:19:13.960
Data equals that tuple bookstand append book data so this will just collect the title the price and

293
00:19:13.960 --> 00:19:19.750
the rating for a given book in a tuple and then we push it into this all books list and we're doing

294
00:19:19.750 --> 00:19:21.540
that once for every single book.

295
00:19:21.670 --> 00:19:28.230
So now if all works the very end we should be able to print all books.

296
00:19:28.810 --> 00:19:29.320
All right.

297
00:19:29.380 --> 00:19:30.520
Let's see if it works.

298
00:19:32.580 --> 00:19:34.030
Moment of Truth.

299
00:19:34.410 --> 00:19:34.980
Let's see.

300
00:19:34.980 --> 00:19:38.170
Get reading takes your arguments but one was given.

301
00:19:38.280 --> 00:19:41.890
I somehow left off book right there.

302
00:19:41.890 --> 00:19:44.140
I'm sure you saw that before me.

303
00:19:44.140 --> 00:19:45.260
Let's see if I was on the other.

304
00:19:45.310 --> 00:19:46.610
OK it looks good.

305
00:19:46.680 --> 00:19:47.900
So we're getting sapiens.

306
00:19:47.910 --> 00:19:49.290
Brief History of humankind.

307
00:19:49.440 --> 00:19:55.250
The price as an ENT or excuse me is a float and then an integer of the rating.

308
00:19:55.260 --> 00:20:00.180
So next All we have to do is take this list of books and insert it into our database.

309
00:20:00.180 --> 00:20:00.930
It's not that bad.
