1
00:00:00,180 --> 00:00:01,350
Hey welcome back.

2
00:00:01,350 --> 00:00:07,170
This is the last of the introduction to beautiful soup syntax videos where we work with the dummy data

3
00:00:07,300 --> 00:00:09,860
the string of which came up after this video.

4
00:00:09,900 --> 00:00:11,570
We will be scraping for real.

5
00:00:11,580 --> 00:00:15,450
We'll be sending a request and getting real time from a real web page.

6
00:00:15,510 --> 00:00:19,080
But before then we have to talk about navigating with beautiful soup.

7
00:00:19,080 --> 00:00:26,270
When I say navigating it means having a tag and finding elements relative to that tag or that element.

8
00:00:26,430 --> 00:00:32,700
So if we have an ally I could ask beautiful soup to find me the parent of that ally or to find the parent

9
00:00:32,970 --> 00:00:38,270
of the parent or to find the next sibling or the next descendant of the lie.

10
00:00:38,280 --> 00:00:41,830
So it's a way of navigating moving around in the team.

11
00:00:41,910 --> 00:00:44,220
Relative to something that you select.

12
00:00:44,290 --> 00:00:47,540
And briefly just run through what we'll see in this video.

13
00:00:47,790 --> 00:00:49,050
So we'll see how to do it two ways.

14
00:00:49,050 --> 00:00:56,790
The first is to do it via the tags using attributes called Parent content and next sibling not methods

15
00:00:56,970 --> 00:00:58,700
but actually using attributes.

16
00:00:58,890 --> 00:01:04,590
And then we'll see how to do it with searching whether our methods find a parent and find the next sibling.

17
00:01:04,600 --> 00:01:07,470
What we'll talk about as well as find previous sibling.

18
00:01:07,770 --> 00:01:13,250
If you're still confused I think it will make I pray or make more sense in this example.

19
00:01:13,320 --> 00:01:19,410
So I have a third file exactly the same starter code and I've just cleared out what we had down here.

20
00:01:19,410 --> 00:01:22,550
So imagine that I select an element any element.

21
00:01:22,570 --> 00:01:25,590
But let's start with the body.

22
00:01:25,590 --> 00:01:26,950
I select the body.

23
00:01:27,150 --> 00:01:32,280
So to do that we have a couple of ways the easiest way is just souped up body but we can also do souped

24
00:01:32,280 --> 00:01:40,290
up find body but we'll do student body so that selects this the body and everything inside of it.

25
00:01:40,290 --> 00:01:46,860
So to have access to the contents of that tag we've seen how to get the inner text like if I select

26
00:01:46,860 --> 00:01:53,100
this H-3 we saw how to extract high but when we have nested edged him out if we do with the body how

27
00:01:53,100 --> 00:01:56,060
do we select the contents inside of it.

28
00:01:56,160 --> 00:01:59,930
And it's really straightforward we just do souped up body contents.

29
00:02:00,000 --> 00:02:02,280
So instead of tag let's just call this data.

30
00:02:02,300 --> 00:02:08,400
It's such a terrible name but let's just print data and what we should see is everything inside the

31
00:02:08,400 --> 00:02:09,120
body.

32
00:02:09,500 --> 00:02:14,430
OK but the form that we get it in is as a list.

33
00:02:14,430 --> 00:02:16,290
So we have all of the tags.

34
00:02:16,290 --> 00:02:17,420
Each one is an object.

35
00:02:17,430 --> 00:02:18,730
It's being printed as a string here.

36
00:02:18,750 --> 00:02:20,220
But each one is an object.

37
00:02:20,520 --> 00:02:24,130
But there are these new line characters in here.

38
00:02:24,330 --> 00:02:25,700
Why do we have that.

39
00:02:25,920 --> 00:02:29,880
If we look at the age t m l those new lines are all over the place.

40
00:02:29,880 --> 00:02:31,380
Here's the tag we're working with.

41
00:02:31,390 --> 00:02:37,190
Body and then the first item in the list was a new line and then we had the tag div..

42
00:02:37,410 --> 00:02:44,340
As you can see here so we had new line and then div and then after that div there's another new line

43
00:02:44,970 --> 00:02:48,880
and then after that there's the oh well and then another new line.

44
00:02:48,960 --> 00:02:56,010
So each one of those new lines occurs whenever there's a break between elements in our HMO assuming

45
00:02:56,010 --> 00:02:57,720
they are on different lines.

46
00:02:57,720 --> 00:02:59,700
So content gives us that list.

47
00:02:59,700 --> 00:03:06,590
And if I wanted to find the first child or the first descent of the body what I would need to do is

48
00:03:06,590 --> 00:03:13,100
instead of accessing zero I actually have to access one because there's that new line there.

49
00:03:13,460 --> 00:03:15,060
So that will give me the div.

50
00:03:15,500 --> 00:03:20,370
And this is silly because you know we know what the body is we know what the HMO looks like.

51
00:03:20,480 --> 00:03:23,850
There's no reason to do this like the body and then the first item in it.

52
00:03:24,230 --> 00:03:28,970
Well maybe there would be reasons why I can't think of one that this is more to prepare us for a really

53
00:03:28,970 --> 00:03:35,930
common thing which is you select some item that has an ID or a class and you try to find the closest

54
00:03:35,930 --> 00:03:40,990
thing that has a class or an idea you can select and then you navigate down into it or at least like

55
00:03:41,000 --> 00:03:45,980
the parent you find a reference point in a starting place you can hook into and then use things like

56
00:03:45,980 --> 00:03:51,230
dark content to move around because sometimes it's harder than you would expect to select the particular

57
00:03:51,230 --> 00:03:52,140
things that you want.

58
00:03:52,160 --> 00:03:55,540
So you get close and then you navigate towards it anyway.

59
00:03:55,550 --> 00:04:03,930
So body contents now with contents one index of one gives us that did and we could actually called the

60
00:04:03,950 --> 00:04:07,600
contents on that because that gives us this div.

61
00:04:07,670 --> 00:04:13,490
So the content of that is this you can see let's see if that works there.

62
00:04:13,580 --> 00:04:17,730
We have new line H-3 new line paragraph new line.

63
00:04:18,050 --> 00:04:20,680
So that's this right in here instead of that div.

64
00:04:20,840 --> 00:04:21,190
OK.

65
00:04:21,260 --> 00:04:27,800
The next thing that we can do is we've seen how to access content to descend into the elements that

66
00:04:27,800 --> 00:04:33,230
are nested down but I could go from this div to this ordered list.

67
00:04:33,230 --> 00:04:39,020
These are siblings siblings meaning if they are on the same level of the hierarchy they are not embedded

68
00:04:39,020 --> 00:04:39,860
in one another.

69
00:04:39,980 --> 00:04:44,740
They are not nested and they're not in the parent child relationship like body indiv or body and oh

70
00:04:44,740 --> 00:04:47,130
well they are siblings.

71
00:04:47,840 --> 00:04:54,170
And conveniently we can just call next sibling which is an attribute so contents one is going to select

72
00:04:54,170 --> 00:05:01,070
this div and then the next sibling is going to be oh well and this takes care of this.

73
00:05:01,070 --> 00:05:04,260
You don't have to worry about the new lines in the contents.

74
00:05:04,310 --> 00:05:08,960
Next sibling will give you the next item that actually is an empty mix sibling.

75
00:05:09,170 --> 00:05:15,040
If you check it out gives us nothing apparently what's happening here.

76
00:05:15,380 --> 00:05:19,310
Well the next sibling of this did remember the contents.

77
00:05:19,370 --> 00:05:23,600
I have it back up here still where it was that somewhere up here.

78
00:05:23,610 --> 00:05:25,910
Well if I lost it it's a new line.

79
00:05:25,920 --> 00:05:27,540
Afterwards there sorry if it did.

80
00:05:27,560 --> 00:05:29,780
And then a new line and then the oh well.

81
00:05:29,780 --> 00:05:32,290
So it's treating this as the next sibling.

82
00:05:32,330 --> 00:05:35,900
So if we wanted to we could just called dot next sibling again.

83
00:05:36,350 --> 00:05:40,640
And so that's going to go from here to the next sibling which is the new line to the next sibling which

84
00:05:40,640 --> 00:05:47,180
is that oh well it's kind of clunky but that gives us the ordered list OK.

85
00:05:47,240 --> 00:05:53,630
And the other thing we can do a comment that went out if we do something like soop Dodd let's select

86
00:05:54,080 --> 00:05:55,540
the this ally.

87
00:05:55,760 --> 00:06:02,590
The first one that has a class of super special cells like that super dot find.

88
00:06:03,080 --> 00:06:06,790
And then we can do well I don't like this in Texas much.

89
00:06:06,790 --> 00:06:09,830
The class underscore equals but I'll do it.

90
00:06:09,830 --> 00:06:10,900
I already started.

91
00:06:11,270 --> 00:06:12,080
So souped up fine.

92
00:06:12,080 --> 00:06:13,640
That gives us this.

93
00:06:14,150 --> 00:06:20,060
And then if we called that parent save it to a variable we'll call this one data I guess just to save

94
00:06:20,060 --> 00:06:21,240
our print statement.

95
00:06:21,240 --> 00:06:23,070
So that gives us the lie.

96
00:06:23,330 --> 00:06:24,470
Now I can go backwards.

97
00:06:24,470 --> 00:06:27,160
We had dumb content to go in.

98
00:06:27,440 --> 00:06:29,280
There's no nested aged him out here.

99
00:06:29,480 --> 00:06:36,760
But if I call parent it gives us the oh well that is inclosing the ally.

100
00:06:36,920 --> 00:06:42,680
And if I called that parent again you know we keep moving up on layer and that gives us the entire body.

101
00:06:43,010 --> 00:06:43,250
OK.

102
00:06:43,250 --> 00:06:44,980
So this is what we've already seen.

103
00:06:45,020 --> 00:06:46,930
Navigating via tags.

104
00:06:47,160 --> 00:06:53,630
There's also a subset of methods we can use where we can search and they're called Find parent find

105
00:06:53,630 --> 00:06:56,150
next sibling find previous sibling.

106
00:06:56,240 --> 00:07:04,010
So if we take an example that's going to come at this one as well let's go with data equals soop find.

107
00:07:04,120 --> 00:07:07,060
And let's go with this div that has the idea of first.

108
00:07:07,100 --> 00:07:14,390
So let's actually do top find and then Id equals first like that and to find the next sibling we just

109
00:07:14,390 --> 00:07:17,170
call find next sibling.

110
00:07:18,110 --> 00:07:22,610
And remember what I called next sibling here but it gave us the new line.

111
00:07:22,670 --> 00:07:24,920
Let's see what happens when I call find the next sibling.

112
00:07:24,910 --> 00:07:30,490
Now you can see we just get the next element is.

113
00:07:30,490 --> 00:07:32,400
We're searching for the next thing.

114
00:07:32,630 --> 00:07:34,040
That's the way that the method is set up.

115
00:07:34,040 --> 00:07:36,080
Instead of giving us that new line.

116
00:07:36,080 --> 00:07:43,610
So if I had done this souped up find dot next sibling like this that's going to give us that empty.

117
00:07:43,630 --> 00:07:44,790
It's just a new line.

118
00:07:44,990 --> 00:07:50,300
But if we use find new line it will skip through or find the next sibling it will skip over that one

119
00:07:50,300 --> 00:07:56,060
until it actually finds an object an actual instance of an element to give us.

120
00:07:56,120 --> 00:08:01,010
So that's the advantage of using things like find the next sibling and we can chain them together as

121
00:08:01,010 --> 00:08:01,880
well.

122
00:08:01,880 --> 00:08:08,780
So if I did find next sibling again first time we go from this div to this sibling then we're here and

123
00:08:08,780 --> 00:08:14,930
we go to this sibling div data example yes that says by and there we go.

124
00:08:15,380 --> 00:08:17,960
So we can chain them together to keep moving forward.

125
00:08:17,960 --> 00:08:21,020
There's also a find previous sibling.

126
00:08:21,170 --> 00:08:26,030
So if we started with a div like we did there isn't a previous sibling but let's say I start with this

127
00:08:26,150 --> 00:08:29,640
bottom div that has data example set to Yes.

128
00:08:29,690 --> 00:08:31,490
So I could select it by.

129
00:08:31,490 --> 00:08:35,730
I mean there's a bunch of ways I guess select all divs and then take the last one.

130
00:08:36,230 --> 00:08:38,410
Or I could use this attribute here.

131
00:08:38,600 --> 00:08:40,090
I think that's what I'll do.

132
00:08:40,100 --> 00:08:46,480
So come down here already duplicated this get rid of all of this and we'll run soup instead of find.

133
00:08:46,490 --> 00:08:54,290
Let's do a select and then use our CSSA attribute syntax and we just take the example and that should

134
00:08:54,290 --> 00:08:55,670
give us a go.

135
00:08:55,850 --> 00:08:58,650
Well there's actually two of them aren't there.

136
00:08:58,870 --> 00:09:00,220
And think about that.

137
00:09:00,230 --> 00:09:04,570
All right so then let's check it set to yes in both examples.

138
00:09:04,700 --> 00:09:05,370
No.

139
00:09:05,480 --> 00:09:05,790
All right.

140
00:09:05,810 --> 00:09:09,880
Well just do the one index of one which gives us this.

141
00:09:09,910 --> 00:09:10,530
All right.

142
00:09:10,560 --> 00:09:11,740
That's a lot of work.

143
00:09:11,770 --> 00:09:17,320
Now we can use find previous sibling and that's going to go backwards.

144
00:09:17,350 --> 00:09:20,310
So for here the previous sibling is here.

145
00:09:20,690 --> 00:09:23,170
If we run it that's exactly what we get.

146
00:09:23,200 --> 00:09:29,090
We get well and we can chain them together for the next one and give us this div and so on.

147
00:09:29,320 --> 00:09:34,990
Another thing to mention is when we use find previous sibling we can actually pass in a string.

148
00:09:35,380 --> 00:09:36,440
Let me show you.

149
00:09:36,640 --> 00:09:41,620
I'm going to switch up my aged him just a little bit and move it around like this.

150
00:09:41,620 --> 00:09:47,260
So now we have in our orderless there are still three allies but the two that have the class special

151
00:09:47,560 --> 00:09:49,230
are now separated.

152
00:09:49,510 --> 00:09:57,970
And if I select this first one using that class name which I actually already have I believe we just

153
00:09:57,970 --> 00:09:59,660
duplicate it here.

154
00:10:00,360 --> 00:10:00,760
OK.

155
00:10:00,790 --> 00:10:06,000
So this is going to find the element that has the class super special which is this.

156
00:10:06,000 --> 00:10:13,480
If I do find next to swivelling it's going to give me this right defaults and it does.

157
00:10:13,480 --> 00:10:19,240
This item is not special but if I wanted to find the next sibling that has classes special I could just

158
00:10:19,240 --> 00:10:25,140
pass in the class with that ugly underscore equals special.

159
00:10:25,270 --> 00:10:29,830
And now this is saying find me the next sibling do a search for the next sibling that has class equal

160
00:10:29,830 --> 00:10:32,330
to special which is this one.

161
00:10:32,960 --> 00:10:34,780
And that's what we get.

162
00:10:34,780 --> 00:10:35,440
Cool.

163
00:10:35,770 --> 00:10:36,380
OK.

164
00:10:36,580 --> 00:10:40,460
And the last thing we'll see is a way to search for parent.

165
00:10:40,470 --> 00:10:45,120
You can just call find parent if we selected this H-3 here.

166
00:10:45,400 --> 00:10:49,480
Very simply we can just do day to dot because soup find age three.

167
00:10:49,720 --> 00:10:54,370
And then on that call do not find parent like this.

168
00:10:54,370 --> 00:11:01,400
And so we start here and we're just going to find the next parent do that there we go we get that div

169
00:11:01,920 --> 00:11:08,180
So we started here and we moved up to the parent and we could also pass something in here.

170
00:11:08,260 --> 00:11:11,820
Operationally if we wanted to be really silly to do.

171
00:11:11,830 --> 00:11:14,370
But right now the next parent is this.

172
00:11:14,450 --> 00:11:23,980
But if I pass in a tag like body or event h t m l it will find the next parent that is h t m l which

173
00:11:23,980 --> 00:11:29,140
is silly because there is only one age 12 element on a page so you could just do supercup find each

174
00:11:29,200 --> 00:11:32,710
T.M. Anyway it's fun to show how it behaves.

175
00:11:32,740 --> 00:11:37,470
This is going to skip all parents until it finds an instance of age to smell.

176
00:11:37,870 --> 00:11:42,460
So that's why they're called searches are searching methods that allow you to navigate by searching

177
00:11:42,490 --> 00:11:45,790
rather than in the dark just fumbling and calling.

178
00:11:45,790 --> 00:11:49,330
Next sibling next sibling and hoping it's not a new line character.

179
00:11:49,420 --> 00:11:52,970
These methods will actually search based off of what you're looking for.

180
00:11:53,170 --> 00:11:53,510
OK.

181
00:11:53,530 --> 00:11:56,700
So that wraps up the basics of beautiful soup.

182
00:11:56,710 --> 00:12:00,250
There are some other methods and additional functionality we haven't gotten into.

183
00:12:00,250 --> 00:12:05,180
Can always you know open up your docs and just call help on an item like if we just did help.

184
00:12:05,370 --> 00:12:10,420
Data and see if we get a lot of things like.

185
00:12:10,560 --> 00:12:13,040
Well skip all these Danders for now.

186
00:12:13,070 --> 00:12:15,590
Keep going.

187
00:12:15,590 --> 00:12:18,310
OK so there's things like clear.

188
00:12:18,680 --> 00:12:23,150
So we have things like de-code contents encode.

189
00:12:23,180 --> 00:12:26,440
Find find Also there you have is a find child.

190
00:12:26,450 --> 00:12:27,860
We didn't talk about that one.

191
00:12:27,950 --> 00:12:31,610
So you could search only within the children of an element.

192
00:12:31,640 --> 00:12:34,900
There's get there's what else.

193
00:12:34,910 --> 00:12:36,320
And it was there's a bunch of things.

194
00:12:36,440 --> 00:12:39,510
So I just want to be clear we didn't cover every possible thing.

195
00:12:39,590 --> 00:12:45,260
I just covered a lot of the essentials but at the end of the day when we're doing scraping it often

196
00:12:45,890 --> 00:12:50,750
Personally I'm always looking at the docs for whatever module or package whatever I'm using whether

197
00:12:50,750 --> 00:12:51,550
it's in Python.

198
00:12:51,560 --> 00:12:54,860
Beautiful soup or a different library in other languages.

199
00:12:54,920 --> 00:12:59,800
I'm always looking at the docks because there's so many little one off things that you have to do.

200
00:12:59,830 --> 00:13:05,060
It's just too much to remember honestly this was more of just a crash course in beautiful soup but we'll

201
00:13:05,060 --> 00:13:09,770
probably reference the docs as we go forward in the next video when we actually start scraping.

202
00:13:09,770 --> 00:13:10,830
So look forward to that.

203
00:13:10,850 --> 00:13:14,600
If that sounds good we are going to start scraping for real next video.
