WEBVTT
1
00:00:00.660 --> 00:00:02.180
So this video is going to be quick.

2
00:00:02.250 --> 00:00:06.780
I'm just going to show a potential way of refactoring this show because I want to preserve this original

3
00:00:06.780 --> 00:00:09.230
file for other students.

4
00:00:09.300 --> 00:00:16.790
I'm going to make a new file and I'll just call this one the two piu and paste all the code in there.

5
00:00:17.040 --> 00:00:20.280
But I'm going to make a couple of changes so I don't like having all these.

6
00:00:20.350 --> 00:00:22.700
And all over the place.

7
00:00:22.770 --> 00:00:26.870
So what I'm going to do instead is refactor things to look like this.

8
00:00:26.870 --> 00:00:35.820
So if Player 1 equals equals rock then inside we're going to nest the other player two possibilities

9
00:00:35.820 --> 00:00:37.570
rather than linking them together with an.

10
00:00:37.600 --> 00:00:41.100
And I'm going to have a third one equals rock.

11
00:00:41.640 --> 00:00:46.690
And then inside if there if Player 2 equals equals.

12
00:00:47.010 --> 00:00:48.770
It all started off with scissors.

13
00:00:49.840 --> 00:00:55.120
And if that's the case then we will print player one witness.

14
00:00:55.200 --> 00:01:00.130
OK so we've covered this line and now we can move on to the next one so I'm going to just delete this.

15
00:01:00.300 --> 00:01:06.200
So hopefully you can see how you know we can rewrite an AND statement with two nested conditionals.

16
00:01:06.270 --> 00:01:08.570
And the reason to do this is so we don't have to rewrite.

17
00:01:08.700 --> 00:01:18.120
If player one equals rock multiple times so we can actually just copy this right here and do an.

18
00:01:18.450 --> 00:01:20.080
Player two equals paper.

19
00:01:20.130 --> 00:01:24.310
If that's the case then we're going to print player two wins.

20
00:01:24.560 --> 00:01:25.040
OK.

21
00:01:25.170 --> 00:01:27.810
So that covers the scenarios or player one plays rock.

22
00:01:27.810 --> 00:01:31.080
Aside from a tie so we'll add that later.

23
00:01:31.080 --> 00:01:35.640
So next up is if Player 1 plays paper.

24
00:01:36.090 --> 00:01:37.660
So that's these two.

25
00:01:38.370 --> 00:01:45.320
So we'll start with if Player 2 equals rock then Player 1 wins.

26
00:01:45.320 --> 00:01:50.060
Basically I'm just copying things over and rewriting them.

27
00:01:50.060 --> 00:01:52.560
So then after that we have.

28
00:01:53.060 --> 00:01:54.610
If Player 2 is scissors.

29
00:01:54.710 --> 00:02:03.040
If that's the case then we're going to print two wins because scissors beats paper and I should make

30
00:02:03.040 --> 00:02:10.560
this an elf and then we'll have another one this time as Player 1 equals scissors.

31
00:02:11.580 --> 00:02:20.640
And if that's the case first thing will check if and that should actually make all of these lifts.

32
00:02:20.720 --> 00:02:25.670
Well not all of them but the the ones that follow and if because only one of these is going to be true

33
00:02:25.690 --> 00:02:28.270
any time it won't break our code.

34
00:02:28.470 --> 00:02:30.630
But it's just better to do it this way.

35
00:02:30.660 --> 00:02:32.600
So if player equals scissors.

36
00:02:33.000 --> 00:02:39.020
If Player 1 or player 2 is rock and that means player 1 wins because rock beats scissors.

37
00:02:39.830 --> 00:02:45.570
OK then after that we have if player to play paper.

38
00:02:45.630 --> 00:02:48.660
So we have an el If Player 2 calls paper.

39
00:02:48.660 --> 00:02:53.650
If that's the case player one wins it's perfect.

40
00:02:53.790 --> 00:02:59.730
And you know looking at this this is a really minor thing but we have a pattern of player 1 wins then

41
00:02:59.730 --> 00:03:01.980
player to player 1 when said Player 2.

42
00:03:02.070 --> 00:03:03.960
And here we switch them.

43
00:03:04.020 --> 00:03:08.450
I am this might sound crazy but I kind of want to switch them.

44
00:03:08.460 --> 00:03:10.170
So we keep that pattern going.

45
00:03:10.170 --> 00:03:12.150
So it's organized in a logical way.

46
00:03:12.510 --> 00:03:16.650
So all I did was just change the bottom to the if an elf around.

47
00:03:16.650 --> 00:03:20.580
So now paper and then rock meaning player 1 wins then Player 2 wins.

48
00:03:20.600 --> 00:03:23.500
But it doesn't make a difference as far as our code.

49
00:03:23.940 --> 00:03:24.580
OK.

50
00:03:24.960 --> 00:03:30.830
So then we could add in our Elif if Player 1 equals player 2.

51
00:03:31.230 --> 00:03:37.040
Then we'll print it to tie and then we have our final else that Prince.

52
00:03:37.050 --> 00:03:38.280
Something went wrong.

53
00:03:38.280 --> 00:03:42.010
Now there's a change the make which is to bring this to the top.

54
00:03:42.060 --> 00:03:49.470
So this is sort of the most common scenario because there's you know three different ways of achieving

55
00:03:49.470 --> 00:03:50.330
this draw.

56
00:03:50.490 --> 00:03:55.670
So what I'm going to do is actually move it up to the very beginning and say if player one equals player

57
00:03:55.670 --> 00:03:56.650
2.

58
00:03:57.120 --> 00:04:00.610
Just like this print it's a tie.

59
00:04:00.870 --> 00:04:05.270
And I'm going to make this and elif.

60
00:04:05.620 --> 00:04:10.960
And so if it's a tie then we're not even going to bother checking any of this because these are Eliphaz.

61
00:04:10.970 --> 00:04:19.120
Remember these are only even run at the conditionals are checked only if the first is false.

62
00:04:19.430 --> 00:04:24.230
So if it's true we're kind of short circuiting it and we're done rather than continuing to check all

63
00:04:24.230 --> 00:04:25.280
of these.

64
00:04:25.310 --> 00:04:27.590
And the reason it matters is because a draw.

65
00:04:27.620 --> 00:04:29.630
There's three ways of achieving that.

66
00:04:29.680 --> 00:04:32.910
And so we might as well just get it out of the way up here.

67
00:04:33.410 --> 00:04:35.360
But it's just a stylistic thing as well.

68
00:04:35.370 --> 00:04:38.940
It is not going to change how things work in our actual game.

69
00:04:39.350 --> 00:04:43.880
OK and then we have or else which is you know if somebody typed something other than rock paper scissors

70
00:04:44.480 --> 00:04:47.250
we're not really going to add in real error handling.

71
00:04:47.270 --> 00:04:54.140
Once we learn about looping we'll actually be able to tell a user you know enter a new move if you entered

72
00:04:54.140 --> 00:04:59.230
an invalid one and we can keep asking them to enter something valid until they actually do.

73
00:04:59.300 --> 00:05:01.490
But for now this game just goes once.

74
00:05:01.790 --> 00:05:04.840
OK let's see if we have any syntax errors first.

75
00:05:04.970 --> 00:05:08.470
So that's going to be Python 3 V-2.

76
00:05:09.080 --> 00:05:14.410
And yes looks like we're missing a colon on line 11 right there.

77
00:05:14.540 --> 00:05:18.020
Where else right here.

78
00:05:18.020 --> 00:05:21.330
And I think that it is check now.

79
00:05:22.350 --> 00:05:27.150
OK player 1 make you move player 1 plays rock player to play scissors.

80
00:05:28.320 --> 00:05:32.520
So player one wins let's do paper versus paper.

81
00:05:32.820 --> 00:05:33.800
It's a tie.

82
00:05:33.960 --> 00:05:42.960
And both do scissors versus paper let's do versus Rock who.

83
00:05:43.110 --> 00:05:46.420
And good thing we ran that one because I have another typo.

84
00:05:46.560 --> 00:05:52.760
If you look at this saying that it doesn't know what player is and maybe you caught this before me.

85
00:05:52.920 --> 00:05:57.200
But I'm actually referencing a variable player rather than Player 1.

86
00:05:57.780 --> 00:06:05.700
And we weren't ever encountering a problem until I actually entered scissors for player 1 because otherwise

87
00:06:05.730 --> 00:06:08.630
only this code was running OK.

88
00:06:08.670 --> 00:06:09.310
The last thing.

89
00:06:09.320 --> 00:06:10.760
Well let's just make sure that works now.

90
00:06:10.780 --> 00:06:15.390
So if I type scissors versus rock everything works.

91
00:06:15.390 --> 00:06:17.760
And let's see if we enter jibberish.

92
00:06:18.960 --> 00:06:19.950
Something went wrong.

93
00:06:20.220 --> 00:06:20.820
Perfect.

94
00:06:20.940 --> 00:06:23.700
And what about if only one player enters jibberish.

95
00:06:23.700 --> 00:06:30.050
The first one says the first one says rock and the second one enters jibberish.

96
00:06:31.060 --> 00:06:32.780
Nothing happens.

97
00:06:32.830 --> 00:06:37.310
So this is worth noting the way that our code is set up right now is that.

98
00:06:37.330 --> 00:06:45.760
So if Player 1 enters rock and Player 2 enters gibberish Well this is going to be triggered and then

99
00:06:45.760 --> 00:06:51.160
this runs and if not if nothing is printed out because player to enter jibberish then nothing is printed

100
00:06:51.160 --> 00:06:56.780
out period because the way this is set up that we have this as an else.

101
00:06:57.160 --> 00:07:00.410
So it's only going to run if none of this is true.

102
00:07:00.880 --> 00:07:07.510
So just worth noting we're will learn much better ways of handling user input and an error checking

103
00:07:07.510 --> 00:07:08.700
and that sort of thing.

104
00:07:08.770 --> 00:07:11.690
And I'm not going to refactor everything right now.

105
00:07:11.770 --> 00:07:19.180
So a solution that we could add up top would be an additional check or we could say if Player 2 I want

106
00:07:19.180 --> 00:07:26.650
to do the whole thing is equal to rock or player 2 is equal to paper or player 2 is equal to scissors.

107
00:07:27.160 --> 00:07:30.370
Then we'll do all of this else as a separate.

108
00:07:30.370 --> 00:07:32.630
Else then we would say OK.

109
00:07:32.800 --> 00:07:34.920
Player 2 You didn't enter something valid.

110
00:07:35.230 --> 00:07:36.950
But for now we'll just leave it at this.

111
00:07:36.970 --> 00:07:39.650
Just know that there's a little bit of a shortcoming with that code.

112
00:07:39.700 --> 00:07:42.670
If two people both players enter jibberish.

113
00:07:42.670 --> 00:07:49.390
Last thing if we want to add that little shields we can just add a print statement here that says something

114
00:07:49.390 --> 00:07:52.550
like No cheating.

115
00:07:53.170 --> 00:07:58.900
And I guess we haven't seen this but we can actually multiply things multiply strings so this will just

116
00:07:59.590 --> 00:08:04.150
run this 20 times but on its own that's not going to be that impressive because it will be on the same

117
00:08:04.150 --> 00:08:04.830
line.

118
00:08:05.110 --> 00:08:07.900
But if we add our backslash N..

119
00:08:08.710 --> 00:08:09.580
Now let's take a look.

120
00:08:09.580 --> 00:08:14.800
Remember that's the escape sequence that adds a new line to carriage return.

121
00:08:14.800 --> 00:08:19.380
So rock versus paper so it's still not quite long enough.

122
00:08:19.610 --> 00:08:22.610
So we could just add in two returns.

123
00:08:22.610 --> 00:08:23.900
Now let's try it let's go.

124
00:08:23.900 --> 00:08:27.500
Paper versus scissors.

125
00:08:27.500 --> 00:08:31.990
Player 2 wins and Player 2 wasn't able to see player 1 entered.

126
00:08:32.240 --> 00:08:32.770
OK.

127
00:08:33.020 --> 00:08:37.490
So next up is the advanced version with a random computer AI.
