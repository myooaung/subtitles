WEBVTT
1
00:00:00.180 --> 00:00:01.200
Welcome back.

2
00:00:01.260 --> 00:00:05.980
This video kicks off a series of videos that all focus on list methods.

3
00:00:06.180 --> 00:00:11.400
So Python comes with a bunch of these built in methods that are particular to lists that allow us to

4
00:00:11.400 --> 00:00:18.060
do things like sort a list or split it in half or add a new item to the end or duplicate a list.

5
00:00:18.060 --> 00:00:19.590
All these different things that we can do.

6
00:00:19.770 --> 00:00:24.420
And there's just so many I decided to split them up into a couple of bite sized videos.

7
00:00:24.600 --> 00:00:28.700
But the first thing I want to address is the difference between functions and methods.

8
00:00:28.710 --> 00:00:30.470
They're both very very similar.

9
00:00:30.480 --> 00:00:32.840
A method is just a type of a function.

10
00:00:33.000 --> 00:00:36.200
But there is a significant distinction.

11
00:00:36.210 --> 00:00:44.790
So we've been using built in functions like print you know print 1 plus three or Eliane which just a

12
00:00:44.790 --> 00:00:45.970
pet peeve of mine.

13
00:00:46.020 --> 00:00:51.680
I hate that it's just L-E and instead of length I don't know why that decision was made.

14
00:00:51.690 --> 00:00:54.950
Why don't we do PR guy instead of print.

15
00:00:54.960 --> 00:00:57.360
You just type the whole word something along anyways.

16
00:00:57.540 --> 00:01:01.790
We've been using one and that is not particular to list.

17
00:01:01.800 --> 00:01:08.370
We could use it on a string like this and it gives us the length of that string or we can pass in a

18
00:01:08.460 --> 00:01:12.490
list as well a single item list and it tells us the length of that is 1.

19
00:01:12.510 --> 00:01:17.640
So unlike these built in functions like print and Lenn the functions we're going to see in this video

20
00:01:17.700 --> 00:01:23.040
and the next couple of videos are specific to the lists and the way we actually use them the way we

21
00:01:23.040 --> 00:01:27.870
access them is by adding a dot to the end of the name of a list.

22
00:01:27.990 --> 00:01:38.280
So we can have a list called data like this and we would access a list method by writing data dot whatever

23
00:01:38.280 --> 00:01:42.840
the method name is append that sort.

24
00:01:42.840 --> 00:01:50.040
So everything we learn in these next few videos will be something coming after a list and it doesn't

25
00:01:50.040 --> 00:01:51.310
have to be a variable name.

26
00:01:51.360 --> 00:01:55.410
You could do it directly on the list as well but it has to be an instance of a list.

27
00:01:55.500 --> 00:02:00.150
We'll spend a lot more time talking about functions and methods later on when we actually cover them.

28
00:02:00.150 --> 00:02:05.580
But this is just one of those instances where I needed to do a little bit of explaining just to make

29
00:02:05.580 --> 00:02:09.480
sure that we are clear functions and methods are not exactly the same thing.

30
00:02:09.480 --> 00:02:11.350
They're not entirely interchangeable.

31
00:02:11.550 --> 00:02:17.010
OK so boils down to the fact that when we have a function and it's attached to a particular object in

32
00:02:17.010 --> 00:02:20.340
this case a list it becomes a list method.

33
00:02:20.340 --> 00:02:24.500
If we have a function floating on its own like print or L.N. it's just a function.

34
00:02:24.630 --> 00:02:25.820
Ok enough of that stuff.

35
00:02:25.830 --> 00:02:27.310
We'll get back to it later on.

36
00:02:27.480 --> 00:02:29.620
Let's take a look at some of these list methods.

37
00:02:29.850 --> 00:02:35.080
So the first three we're going to talk about this video all have to do with adding data to a list.

38
00:02:35.310 --> 00:02:42.300
And the first one is called append and it will add an item whatever we pass in to the end of the list.

39
00:02:42.330 --> 00:02:46.930
So here's an example I have first list is equal to the list 1 2 3 4.

40
00:02:47.250 --> 00:02:55.010
And if I write first list append because it's a method on the list pass in five it changes first just

41
00:02:55.230 --> 00:02:57.490
to now have 5 at the end.

42
00:02:57.510 --> 00:03:01.120
So if we test it out I have this data list already.

43
00:03:01.140 --> 00:03:10.070
One two three and I could do data append and let's add in purple of course.

44
00:03:10.090 --> 00:03:14.230
Now if we look at data the list is 1 2 3 purple.

45
00:03:14.250 --> 00:03:16.570
So the fourth item is now purple.

46
00:03:16.590 --> 00:03:18.450
So that's pretty much it to append.

47
00:03:18.450 --> 00:03:24.390
It's a method unless we have to use dot after the name of the list and it always adds to the end of

48
00:03:24.390 --> 00:03:26.210
the list so that's significant as well.

49
00:03:26.250 --> 00:03:31.640
You might be wondering what if I have multiple things I want to append like I want to add in two numbers.

50
00:03:31.770 --> 00:03:34.390
Let's say I want to add in seven and nine.

51
00:03:34.830 --> 00:03:39.440
Well you cannot do seven common nine if you try it says.

52
00:03:39.450 --> 00:03:42.810
Append takes exactly one argument and I gave two.

53
00:03:42.990 --> 00:03:45.300
So yeah no I'm not doing that for you.

54
00:03:45.390 --> 00:03:46.360
What Python says.

55
00:03:46.710 --> 00:03:54.480
Fortunately extend is to the rescue so extend will at the end of the list all of the values that we

56
00:03:54.480 --> 00:03:56.220
pass into it.

57
00:03:56.220 --> 00:04:01.320
So here's an example where we have this first list and we try to append multiple items.

58
00:04:01.320 --> 00:04:08.190
It does not work or if we tried to pass in another list it actually just attaches the list to the end

59
00:04:08.190 --> 00:04:09.670
as a single item.

60
00:04:10.110 --> 00:04:11.830
It's nested inside.

61
00:04:12.210 --> 00:04:16.360
But if we do it the correct way using extend it looks like this.

62
00:04:16.560 --> 00:04:21.420
So we have our first variable correct list equals 1 2 3 4 in the list.

63
00:04:21.810 --> 00:04:29.760
If we call that extend on that and we pass in a list a single list 5 6 7 8 it will take the items in

64
00:04:29.760 --> 00:04:32.190
this list and add them each to the end.

65
00:04:32.190 --> 00:04:38.150
So it doesn't just throw in the entire list as one item it adds them individually.

66
00:04:38.610 --> 00:04:39.840
So let's try that.

67
00:04:39.840 --> 00:04:42.700
I'll make a simple list and I'll just call it numbs.

68
00:04:43.020 --> 00:04:45.280
Equals 1 to 3.

69
00:04:45.420 --> 00:04:50.070
So the length of numb right now or Nom's is three.

70
00:04:50.160 --> 00:04:59.500
If I did that append and I give it a list of four comma five what is the length of number at this point.

71
00:05:00.250 --> 00:05:01.500
It's only four.

72
00:05:01.750 --> 00:05:05.780
And that's because Nom's has one item to item 3 Item four.

73
00:05:05.830 --> 00:05:07.970
This is one item.

74
00:05:08.020 --> 00:05:11.800
It's takes up the fourth spot or it technically index of three.

75
00:05:11.920 --> 00:05:20.850
But if we use numskulls extend it instead and we do the same thing for come five this time.

76
00:05:20.860 --> 00:05:27.190
If we look at numbers it's now an even one level less so there is no nested list going on.

77
00:05:27.220 --> 00:05:30.670
So it just goes through the list and individually adds them in.

78
00:05:30.880 --> 00:05:34.680
And if we did length again we would see this time that length.

79
00:05:34.690 --> 00:05:35.430
That's five.

80
00:05:35.620 --> 00:05:41.050
So to summarize if you're adding one item to the end of a list use append if you need to add more than

81
00:05:41.050 --> 00:05:42.410
one item to the end of the list.

82
00:05:42.520 --> 00:05:47.770
Use extend both of these are great but they only add to the end of a list.

83
00:05:47.860 --> 00:05:51.740
What if we want to add somewhere else in the middle or at the beginning of a list.

84
00:05:52.030 --> 00:05:58.690
Well thankfully we have insert so insert does just that we tell it where to insert something using a

85
00:05:58.690 --> 00:06:02.390
numeric index and then we tell it what to answer.

86
00:06:02.410 --> 00:06:05.490
So here's an example we have first list.

87
00:06:05.590 --> 00:06:12.220
Once again it's one two three four in a list and then we call the insert method on that list and the

88
00:06:12.220 --> 00:06:16.660
first thing we provide is the index we want to add the new data to.

89
00:06:16.660 --> 00:06:17.950
So that is two.

90
00:06:17.950 --> 00:06:20.420
In this case so 0 1 2.

91
00:06:20.440 --> 00:06:23.330
So it should be right here at this spot.

92
00:06:23.530 --> 00:06:29.920
And what we want to add the string high so our result is 1 too high 3 4.

93
00:06:30.370 --> 00:06:34.740
So it's the index remember starts counting at 0 2 0 1 2.

94
00:06:34.780 --> 00:06:40.630
We can also use negative numbers along with insert but it might not work exactly the way you anticipate

95
00:06:40.840 --> 00:06:47.590
because when we do negative one if we ask for the negative one item the negative first item of this

96
00:06:47.590 --> 00:06:49.680
list it would give us four.

97
00:06:50.200 --> 00:06:56.700
But in this case it's going to calculate the index based off of the existing list before this is inserted.

98
00:06:56.710 --> 00:07:00.030
So this list is 0 1 2 3 4.

99
00:07:00.250 --> 00:07:02.210
The last index is 4.

100
00:07:02.260 --> 00:07:07.480
Also the item itself has four which is confusing but this is the fourth position.

101
00:07:07.480 --> 00:07:11.530
So when we access negative one we say insert this at the last position.

102
00:07:11.530 --> 00:07:14.120
It's going to figure out on the old version of the list.

103
00:07:14.140 --> 00:07:16.840
That means four index four.

104
00:07:17.350 --> 00:07:23.090
And so it adds the end to index four which really means 0 1 2 3 4.

105
00:07:23.920 --> 00:07:27.090
And it's not actually accounting for the fact that the list grows by 1.

106
00:07:27.100 --> 00:07:32.110
So it doesn't get to the very end it will add it to the second to last thing if you want something to

107
00:07:32.110 --> 00:07:34.260
be inserted at the very very end.

108
00:07:34.330 --> 00:07:43.430
What you could do is this if we had numbers he 1 2 3 4 I could do Gnome's dot insert.

109
00:07:43.790 --> 00:07:46.710
And if I didn't know how long the list I could just use append.

110
00:07:46.720 --> 00:07:55.380
But if you wanted to use Insert and you didn't know how long the list is you can do Lenn of Nom's comma

111
00:07:56.480 --> 00:07:58.810
last or whatever you want to insert.

112
00:07:58.850 --> 00:08:01.890
So this is going to calculate the length of it.

113
00:08:02.420 --> 00:08:07.820
And if we look at numbers now it shows up last I wouldn't focus on it too much but I just wanted to

114
00:08:07.820 --> 00:08:12.240
point out that it may not work exactly the way you expect but otherwise it's pretty straightforward.

115
00:08:12.260 --> 00:08:15.260
You give it the index you want and then the piece of data to insert.

116
00:08:15.260 --> 00:08:18.560
And if you're trying to add something to the end then just use append.

117
00:08:18.650 --> 00:08:20.560
OK so let's wrap all of that up.

118
00:08:20.570 --> 00:08:21.830
We learned three methods.

119
00:08:21.980 --> 00:08:28.040
The first append will add a single item to the end of a list and then we have extend which will add

120
00:08:28.040 --> 00:08:31.010
multiple items to the end of the list only.

121
00:08:31.430 --> 00:08:35.810
And then finally insert if you need to add an item anywhere else that isn't the end.

122
00:08:35.810 --> 00:08:37.060
You can use Insert.

123
00:08:37.210 --> 00:08:37.760
Cool.

124
00:08:37.790 --> 00:08:40.710
So next up we'll focus on deleting things from our list.

125
00:08:40.730 --> 00:08:42.220
A couple of methods to do that.
