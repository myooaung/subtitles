1
00:00:00,330 --> 00:00:01,010
Welcome back.

2
00:00:01,080 --> 00:00:05,820
In this video I just want to show how you could use the art module and some of the method chief seen

3
00:00:05,830 --> 00:00:08,730
already to build some simple functions.

4
00:00:08,790 --> 00:00:16,380
So we're going to do two things we're going to build one called contains phone and then another one

5
00:00:16,560 --> 00:00:21,410
that's called Just say is valid phone.

6
00:00:22,020 --> 00:00:27,150
Sometimes you know you might want to extract or actually instead of contention let's go with extract

7
00:00:27,160 --> 00:00:27,810
phone.

8
00:00:28,330 --> 00:00:34,950
So extract phone is going to take a big string and extract a single phone number or we can make it extract

9
00:00:34,980 --> 00:00:40,980
all phone numbers that are found is valid phone is going to check if the entire string not if it contains

10
00:00:40,980 --> 00:00:41,590
a phone number.

11
00:00:41,610 --> 00:00:45,200
But if the entire string is a phone number then it will return true.

12
00:00:45,210 --> 00:00:47,460
Otherwise return false.

13
00:00:47,490 --> 00:00:50,080
First things first let's import Arri.

14
00:00:50,340 --> 00:00:57,300
I have a new file called phoned up Hawai and extract phone will take in an input string let's just call

15
00:00:57,300 --> 00:01:01,820
it input and then in here we're going to create our pattern.

16
00:01:01,830 --> 00:01:11,340
So I'll call it phone rejects equals and then we need to do our compile our raw string and we'll just

17
00:01:11,340 --> 00:01:17,310
do the exact same thing so four or three of these and then four digits.

18
00:01:17,410 --> 00:01:17,860
No.

19
00:01:17,890 --> 00:01:19,440
3 again dash.

20
00:01:19,440 --> 00:01:21,190
Now we have four digits.

21
00:01:21,740 --> 00:01:22,150
OK.

22
00:01:22,200 --> 00:01:27,790
So just a basic one we can come back and add in the optional parens for the area code and a little bit.

23
00:01:28,230 --> 00:01:34,890
So we have that and then we're just going to use input and we'll just go with a match equals and then

24
00:01:35,160 --> 00:01:41,860
it's going to be phone rejects dot search input which is whatever string.

25
00:01:41,910 --> 00:01:52,350
So we would call extract phone and then pass in you know my number is and then a number like this and

26
00:01:52,350 --> 00:01:59,880
we want it to return this number and then all we really would need to do is just return match dot group

27
00:02:00,710 --> 00:02:03,070
and if we test this out do it twice.

28
00:02:03,180 --> 00:02:07,180
So let's print extract from a number and let's do another one.

29
00:02:07,320 --> 00:02:09,530
But where there isn't a valid phone number.

30
00:02:09,660 --> 00:02:11,140
Add an extra couple of digits.

31
00:02:11,400 --> 00:02:17,610
And let's run our code which I called it phoned up Hawai and you'll see that it actually grabbed two

32
00:02:17,610 --> 00:02:19,960
phone numbers because it matched the pattern twice.

33
00:02:20,160 --> 00:02:27,390
And that's really a matter of my phone rejects not being a good good enough rejects because this is

34
00:02:27,390 --> 00:02:28,860
a phone number right here.

35
00:02:28,920 --> 00:02:30,930
But it also contained these two numbers.

36
00:02:30,930 --> 00:02:36,450
So what we could do instead is say that before and after on either side there should be a word boundary

37
00:02:36,450 --> 00:02:37,590
character.

38
00:02:38,090 --> 00:02:43,620
If you don't remember what that means it's either going to be a space or the beginning or end of a line.

39
00:02:43,620 --> 00:02:46,910
So if we test it now OK.

40
00:02:47,070 --> 00:02:48,660
So it works on the first one.

41
00:02:48,810 --> 00:02:53,910
The second one we get the error and this is what I was expecting to get attribute error none type object

42
00:02:53,910 --> 00:02:55,280
has no attribute group.

43
00:02:55,410 --> 00:03:01,380
So we can't just return Match.com group because in the case and there is no match we can't just call

44
00:03:01,470 --> 00:03:04,580
non-DOD group that's what match would be.

45
00:03:04,770 --> 00:03:13,390
Instead we need to first test what we have a couple options we could do a try block and catch an error.

46
00:03:13,410 --> 00:03:15,980
What was the error catch attribute error.

47
00:03:16,320 --> 00:03:17,480
I'm just going to do.

48
00:03:17,700 --> 00:03:26,980
If a match like this then return matched group else what would we want in return.

49
00:03:27,000 --> 00:03:27,850
It's up to us.

50
00:03:27,900 --> 00:03:31,700
But I think Nona's fine return on so tested.

51
00:03:31,710 --> 00:03:34,770
Now there we go.

52
00:03:34,850 --> 00:03:38,850
We can also return empty strings that great could return false.

53
00:03:38,850 --> 00:03:42,050
It's up to us to decide you know how we want to use extract phone.

54
00:03:42,260 --> 00:03:44,280
But for now returning none is fine.

55
00:03:44,510 --> 00:03:47,370
So this is extracting phone numbers let's just verify it works.

56
00:03:47,390 --> 00:03:52,890
If the phone number is at the beginning or that the phone number is the only thing in there.

57
00:03:52,970 --> 00:03:55,800
So let's add in a couple other things afterwards.

58
00:03:55,820 --> 00:03:57,080
Here is a phone number.

59
00:03:57,110 --> 00:04:00,960
The only thing in there it should extract perfect.

60
00:04:00,970 --> 00:04:02,660
So it's working just great.

61
00:04:02,660 --> 00:04:04,280
So that's extract phone.

62
00:04:04,310 --> 00:04:07,580
And you know we could use this for any rechecks not just a phone number.

63
00:04:07,610 --> 00:04:11,560
Extracting data from a string only extracts one.

64
00:04:11,570 --> 00:04:15,400
So we could easily alter this to extract the multiple.

65
00:04:15,590 --> 00:04:23,960
Just call this extract all phone or phones and keep this the same button match it's not going to be

66
00:04:23,960 --> 00:04:31,170
fun rejects out the search it's going to be find all input if match return match group return None.

67
00:04:31,590 --> 00:04:33,710
OK so I have these.

68
00:04:33,710 --> 00:04:42,370
I'm going to just comment them out for now let's just copy one of them and call extract all phones.

69
00:04:42,410 --> 00:04:51,460
My number is 4:03 tune up or call me at 3 4 5 6 6 6 dash 7.

70
00:04:51,640 --> 00:04:52,310
OK.

71
00:04:52,640 --> 00:04:56,380
There we go and let's see if it works we're printing it out.

72
00:04:56,740 --> 00:04:57,510
OK.

73
00:04:58,100 --> 00:04:59,170
Clear.

74
00:05:01,150 --> 00:05:02,720
Nope not quite list.

75
00:05:02,740 --> 00:05:05,140
Oh right that's my bad.

76
00:05:05,170 --> 00:05:06,100
It returns a list.

77
00:05:06,100 --> 00:05:08,020
It doesn't do all this match.

78
00:05:08,020 --> 00:05:13,420
Remember from the last video if you saw it when we use find all it just returns a list right away.

79
00:05:13,840 --> 00:05:16,960
So let's just return this

80
00:05:20,100 --> 00:05:21,930
and let's test it.

81
00:05:21,930 --> 00:05:22,320
There we go.

82
00:05:22,320 --> 00:05:28,240
We get a list let's just verify what happens if there isn't a match in there like this.

83
00:05:30,250 --> 00:05:32,830
It returns an empty list and that's fine.

84
00:05:32,830 --> 00:05:34,030
I'm happy with that.

85
00:05:34,420 --> 00:05:35,060
OK.

86
00:05:35,260 --> 00:05:39,940
Moving on to the next example I mean just reformat this a bit.

87
00:05:39,940 --> 00:05:41,080
Copy that.

88
00:05:41,530 --> 00:05:42,350
OK.

89
00:05:42,400 --> 00:05:45,690
Next up it's going to be is valid phone.

90
00:05:45,760 --> 00:05:50,890
And a lot of time this is what I'm doing a lot of the time with projects is testing validating input.

91
00:05:50,950 --> 00:05:58,630
We ask a user for input like you know enter a phone number using input or we have a Web site maybe where

92
00:05:58,970 --> 00:06:01,780
it is a form suit and people need to enter a phone number.

93
00:06:01,780 --> 00:06:07,260
We want to make sure it's a valid phone number not just some random digits or two digits or the string.

94
00:06:07,270 --> 00:06:08,230
No thank you.

95
00:06:08,230 --> 00:06:09,720
We're going to make sure it matches a pattern.

96
00:06:10,030 --> 00:06:14,770
And of course it's not just e-mail or not just phone numbers e-mails credit card numbers addresses zip

97
00:06:14,770 --> 00:06:16,730
codes all sorts of different things.

98
00:06:17,050 --> 00:06:18,680
Def is valid phone.

99
00:06:18,820 --> 00:06:28,060
Let's have a take and then put in the way that it should work is that if I call is valid phone ups and

100
00:06:28,060 --> 00:06:35,440
I pass in let's just copy one of these a string that is a valid phone number it should return true and

101
00:06:35,670 --> 00:06:36,840
make some space.

102
00:06:36,940 --> 00:06:43,660
But if there's other stuff in there that should be false or if you know there isn't a phone number in

103
00:06:43,660 --> 00:06:44,350
there at all.

104
00:06:44,380 --> 00:06:45,560
That would still be false.

105
00:06:45,580 --> 00:06:51,580
So it's not a matter of if it contains a phone number at all it's that it's only a phone number because

106
00:06:51,640 --> 00:06:56,140
if a user you know we ask a user to enter a phone number and they enter in some other stuff along with

107
00:06:56,140 --> 00:07:02,770
it it's not useful if a user enters in their email as you know call at blah dot com.

108
00:07:02,770 --> 00:07:06,130
And then a bunch of other stuff afterwards we can send an e-mail to that.

109
00:07:06,130 --> 00:07:08,070
We need to make sure that it's a valid e-mail.

110
00:07:08,440 --> 00:07:10,340
So let's fix that.

111
00:07:10,390 --> 00:07:11,830
Let's get this working.

112
00:07:11,830 --> 00:07:15,050
We're going to use our same phone rejects paste that in.

113
00:07:15,190 --> 00:07:21,220
The only difference is that instead of using FIND ALL or search we could still use search.

114
00:07:21,220 --> 00:07:23,520
By the way what we could do.

115
00:07:23,830 --> 00:07:25,280
Let's actually do that now.

116
00:07:25,500 --> 00:07:32,530
Let me copy the search here and copy all this logic but what you'll need to do is change our regular

117
00:07:32,530 --> 00:07:33,430
expression.

118
00:07:33,430 --> 00:07:37,520
Remember this year where we add a carrot at the beginning where you care.

119
00:07:37,540 --> 00:07:38,630
There it is.

120
00:07:38,650 --> 00:07:43,150
So instead of a boundary character we want carrot which means it has to start with these three digits

121
00:07:43,570 --> 00:07:49,920
and then a dollar sign which means it has to end with these four digits.

122
00:07:50,050 --> 00:07:51,090
So nothing comes after it.

123
00:07:51,090 --> 00:07:55,060
Nothing comes before just a slight alteration to the pattern.

124
00:07:55,150 --> 00:08:00,140
But now if we test it let's see what happens I'm not printing any of these.

125
00:08:00,240 --> 00:08:01,780
I me just quickly add in a print.

126
00:08:01,840 --> 00:08:02,340
OK.

127
00:08:02,860 --> 00:08:03,790
Let's see if it works.

128
00:08:03,790 --> 00:08:04,360
So we should get.

129
00:08:04,360 --> 00:08:05,890
True False False.

130
00:08:05,980 --> 00:08:11,400
If it works and oh well we don't get true and false but it's working.

131
00:08:11,470 --> 00:08:14,590
We just need to return the correct values now.

132
00:08:14,650 --> 00:08:22,390
So instead of if match return match that group we could just to return true otherwise return false.

133
00:08:24,020 --> 00:08:26,830
And we get true false false which is perfect.

134
00:08:26,830 --> 00:08:28,120
That's how it should work.

135
00:08:28,120 --> 00:08:30,350
It validates if this is a phone number.

136
00:08:30,430 --> 00:08:35,940
There is another option which is to do this Aldus to find them twice.

137
00:08:36,010 --> 00:08:39,170
We have a phone project so we could use the same rejects from before.

138
00:08:39,280 --> 00:08:47,290
But instead of doing phone rejects that search we can do full match and full match is going to take

139
00:08:47,290 --> 00:08:52,990
this rejects and only return a match if the entire input string is a match.

140
00:08:52,990 --> 00:08:54,970
We don't have to add these characters in.

141
00:08:55,060 --> 00:09:02,110
We could reuse the same rejects from before not have to edit it in any way and instead use full match.

142
00:09:02,110 --> 00:09:05,550
And if I come in this version out we should get the same result.

143
00:09:06,350 --> 00:09:07,390
And we do.

144
00:09:07,830 --> 00:09:11,570
So I'm going to go with the second option for now I'm going to leave both of them here but comment this

145
00:09:11,570 --> 00:09:12,660
one out.

146
00:09:12,710 --> 00:09:17,470
One thing that you might be wondering about is I'm compiling them all separately.

147
00:09:17,570 --> 00:09:19,300
This is being duplicated.

148
00:09:19,490 --> 00:09:27,740
This line across all of my functions and it would make sense to not do that if we wanted all of these

149
00:09:27,740 --> 00:09:31,520
functions to use the same regular expression in our application.

150
00:09:31,520 --> 00:09:36,570
But I'm going to leave them in here rather than defining it up top is something that we could access

151
00:09:36,570 --> 00:09:37,370
and all the functions.

152
00:09:37,370 --> 00:09:43,460
I mean just define them in each individual function just so that if students happened to copy and paste

153
00:09:43,460 --> 00:09:45,770
one part of this their code will still work.

154
00:09:45,800 --> 00:09:47,440
They don't have to have the entire file.

155
00:09:47,660 --> 00:09:54,470
Ok so this was nothing groundbreaking we just used some of the methods we saw in the last video but

156
00:09:54,650 --> 00:10:00,470
hopefully you see now how you can use you know army and regular expressions and patterns inside of python

157
00:10:01,120 --> 00:10:06,260
and some potentially useful ways or extracting phone numbers or a single phone number all phone numbers

158
00:10:06,650 --> 00:10:12,020
and then retesting if a given string is exactly a phone number and nothing else nothing less.

159
00:10:12,020 --> 00:10:13,160
It has to match this pattern.

160
00:10:13,160 --> 00:10:13,940
Exactly.

161
00:10:14,200 --> 00:10:14,780
OK.

162
00:10:14,930 --> 00:10:16,570
We have a couple more things to talk about.

163
00:10:16,580 --> 00:10:17,260
Coming up next.
