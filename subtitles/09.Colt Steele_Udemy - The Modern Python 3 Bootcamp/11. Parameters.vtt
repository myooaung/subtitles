WEBVTT
1
00:00:00.260 --> 00:00:01.090
We'll come back.

2
00:00:01.290 --> 00:00:08.540
So far our functions are capable of outputting a value using return but they can't accept any inputs.

3
00:00:08.700 --> 00:00:13.470
And you know all the built in functions are almost all of them that we've seen things like print that

4
00:00:13.470 --> 00:00:14.910
accepts and input.

5
00:00:14.910 --> 00:00:21.330
Same thing with you know a list of pens we need to tell it what to append those inputs are really important

6
00:00:21.360 --> 00:00:24.330
because they affect how the function works.

7
00:00:24.330 --> 00:00:28.710
So in this video we're going to see how to alter our functions to accept inputs.

8
00:00:28.820 --> 00:00:30.580
Fortunately it's really easy.

9
00:00:30.690 --> 00:00:34.880
So we have this square function that always squares 7.

10
00:00:35.130 --> 00:00:42.780
But let's alter it so that we can do things like square 4 or square 8 and it should return.

11
00:00:42.780 --> 00:00:45.470
In this case of squaring 4 it should return 16.

12
00:00:45.810 --> 00:00:48.350
And in squaring 8 A template is 64.

13
00:00:48.360 --> 00:00:50.270
So it should return 64.

14
00:00:50.550 --> 00:00:54.520
So to do this I'm going to remove this isn't a new file.

15
00:00:54.540 --> 00:00:56.020
I retain the original file.

16
00:00:56.100 --> 00:00:57.500
If you don't reference it.

17
00:00:57.570 --> 00:00:59.690
But this one I'm calling squared up p y.

18
00:00:59.880 --> 00:01:01.630
And let's just start over.

19
00:01:02.100 --> 00:01:08.760
And what I'm going to do is define the function this time with Def and I'll just call it square and

20
00:01:08.760 --> 00:01:10.480
we can start just like this.

21
00:01:10.680 --> 00:01:16.120
But we need to tell this function to accept a parameter and we can give it any name we want we could

22
00:01:16.120 --> 00:01:17.860
call it X we could call it.

23
00:01:17.860 --> 00:01:23.270
Numb number we could even call it string even though it won't be a string.

24
00:01:23.280 --> 00:01:24.570
It's totally up to us.

25
00:01:24.570 --> 00:01:29.830
Just like naming a variable but we want to abide by the same rules that we follow when naming variables.

26
00:01:29.880 --> 00:01:35.460
So we don't want to you know put it in all caps or something or have it start with a number that sort

27
00:01:35.460 --> 00:01:36.380
of thing.

28
00:01:36.420 --> 00:01:39.390
So let's just call this name.

29
00:01:39.540 --> 00:01:42.620
We want to give it a common sense name not make sense.

30
00:01:42.870 --> 00:01:47.460
And all we will do in here is return numb either none.

31
00:01:47.460 --> 00:01:54.540
Sometimes numb or numb to the second power just like that and we'll save.

32
00:01:54.860 --> 00:01:58.890
And now everything should work if we square four and square eight.

33
00:01:58.890 --> 00:01:59.610
Everything should be good.

34
00:01:59.610 --> 00:02:02.990
The only thing is we are not printing those values out.

35
00:02:03.360 --> 00:02:06.730
We're just returning them but they're not being captured in a variable.

36
00:02:06.750 --> 00:02:10.720
So let's just try printing them both just like this.

37
00:02:11.300 --> 00:02:11.820
OK.

38
00:02:12.090 --> 00:02:13.560
So we've defined our square function.

39
00:02:13.560 --> 00:02:18.990
It takes a single parameter totally up to us to name this whatever we want but just by adding this here

40
00:02:19.200 --> 00:02:24.810
it tells Python hey this function called Square is now going to accept a single parameter.

41
00:02:24.930 --> 00:02:26.370
It's expecting just one thing.

42
00:02:26.400 --> 00:02:28.650
So we'll see how we can have multiple things.

43
00:02:28.770 --> 00:02:33.810
And we're just going to call it numb and it's just a way of saying whatever the user or the code passes

44
00:02:33.810 --> 00:02:37.090
in when Square is executed just give you the temporary name of Gnome.

45
00:02:37.200 --> 00:02:38.690
So let's run it.

46
00:02:38.700 --> 00:02:43.810
So this is going to be Python 3 square squared up he y.

47
00:02:43.980 --> 00:02:46.650
And we get 16 and 64.

48
00:02:47.460 --> 00:02:53.510
So we success we have written a function that accepts an input and spits out a version of that input.

49
00:02:53.520 --> 00:02:54.900
This time it's squared.

50
00:02:55.290 --> 00:02:56.400
Here's another example.

51
00:02:56.550 --> 00:03:03.030
We have this silly sing Happy Birthday function that always sings the exact same song but in real life

52
00:03:03.180 --> 00:03:07.990
the song is happy birthday to you birthday to you Happy birthday dear somebody.

53
00:03:08.010 --> 00:03:10.850
How about Happy birthday dear Charlie.

54
00:03:11.070 --> 00:03:12.340
Happy birthday to you.

55
00:03:12.540 --> 00:03:19.020
So let's alter that so that it accepts a name and we can call it person call it name.

56
00:03:19.130 --> 00:03:21.220
And then all that we want to alter is right here.

57
00:03:21.320 --> 00:03:22.960
Print Happy birthday dear.

58
00:03:23.330 --> 00:03:27.960
And then here will stick the name and we could make that an extra.

59
00:03:28.190 --> 00:03:31.510
Or we could use concatenation But this is a nicer way of doing it.

60
00:03:31.550 --> 00:03:34.210
And now when we call sing happy birthday.

61
00:03:34.400 --> 00:03:38.210
If I just left it like this I'll just do it one time and I promise.

62
00:03:38.240 --> 00:03:40.460
What do you think we'll see.

63
00:03:40.460 --> 00:03:42.420
So let's try it on three.

64
00:03:42.490 --> 00:03:45.420
And I called this one saying why and what do you know.

65
00:03:45.500 --> 00:03:48.620
Missing one required positional argument name.

66
00:03:48.680 --> 00:03:52.910
So there's an error here because we didn't pass in the parameter.

67
00:03:52.910 --> 00:03:56.750
Technically it's called an argument in this case we'll go over that distinction in just a moment but

68
00:03:56.750 --> 00:03:58.060
we didn't pass something in.

69
00:03:58.160 --> 00:03:59.680
And so it's unhappy.

70
00:03:59.840 --> 00:04:00.990
So we need to do that.

71
00:04:01.040 --> 00:04:05.450
So let's pass in Rashida and try it now and never go.

72
00:04:05.450 --> 00:04:06.340
Happy birthday to you.

73
00:04:06.350 --> 00:04:06.800
Blah blah blah.

74
00:04:06.820 --> 00:04:09.210
Happy birthday dear Ashita.

75
00:04:09.320 --> 00:04:11.940
So now can alter the behavior of this.

76
00:04:12.050 --> 00:04:18.260
Let's do another one with Nicholas and Rashida this time and we get both versions to the song.

77
00:04:18.670 --> 00:04:19.440
OK.

78
00:04:19.670 --> 00:04:22.210
So we've seen how to do this with a single parameter.

79
00:04:22.280 --> 00:04:26.610
If we take a look at the slides there is an example now that has two parameters.

80
00:04:26.720 --> 00:04:31.860
So this function is called ad and I've just called the different parameters a and b.

81
00:04:31.970 --> 00:04:36.950
We separate them with commas so we can have as many as we'd like but they need to be separated with

82
00:04:36.950 --> 00:04:37.810
commas.

83
00:04:37.850 --> 00:04:39.390
Call them whatever you want.

84
00:04:39.650 --> 00:04:44.600
And in this case all we do is return the sum of a and b a plus b.

85
00:04:44.770 --> 00:04:46.550
Or here's another example.

86
00:04:46.550 --> 00:04:48.090
This one is called Multiply.

87
00:04:48.380 --> 00:04:52.860
And we're calling the first parameter first and the second one second.

88
00:04:53.120 --> 00:05:01.130
And then we return first times second and to call it all we have to do is pass in two values separated

89
00:05:01.130 --> 00:05:06.920
by a comma and whatever the first one Peston is will be associated with first whatever the second one

90
00:05:07.070 --> 00:05:08.320
will be called second.

91
00:05:08.600 --> 00:05:13.910
Now it's important to know that these names these parameters only exist inside of the function.

92
00:05:13.910 --> 00:05:22.250
So if down here I tried to do a print name or even afterwards like in this example let's just do Nicolas

93
00:05:23.390 --> 00:05:28.790
we sing Happy Birthday Nicholas inside of this function name it refers to Nicolas when we pass it in.

94
00:05:28.790 --> 00:05:31.560
But outside it doesn't exist at all.

95
00:05:31.760 --> 00:05:32.610
And we get an error.

96
00:05:32.660 --> 00:05:34.780
Name is not defined so that's important to know.

97
00:05:34.820 --> 00:05:37.940
This is not a variable declaration of parameter something different.

98
00:05:38.060 --> 00:05:40.710
Let's quickly talk about naming our parameters.

99
00:05:40.730 --> 00:05:47.330
So here's an example that just prints out or returns and string that just takes a first name and a last

100
00:05:47.330 --> 00:05:51.830
name and it puts them together with a space in the middle instead of a string that says your full name

101
00:05:51.830 --> 00:05:55.280
is blank blank.

102
00:05:55.340 --> 00:05:58.860
This is a better example a better way of writing this function.

103
00:05:58.880 --> 00:06:00.760
All that's changed are the parameter names.

104
00:06:00.770 --> 00:06:04.460
So rather than string one string two it makes a lot more sense.

105
00:06:04.460 --> 00:06:09.650
It makes your code much easier to understand to have parameters with names that actually make sense

106
00:06:09.650 --> 00:06:10.350
that are semantic.

107
00:06:10.350 --> 00:06:12.640
So in this case first name and last name.

108
00:06:12.650 --> 00:06:16.420
That's what these are technically string one and string two is totally fine.

109
00:06:16.430 --> 00:06:21.250
We could also have gone with banana and cucumber and it wouldn't change the behavior of the function.

110
00:06:21.350 --> 00:06:23.480
But this is just about making it legible.

111
00:06:23.480 --> 00:06:24.850
Making it make sense.

112
00:06:25.010 --> 00:06:31.790
So the next thing this is kind of a nuanced weird topic not really important to actually writing functions

113
00:06:31.880 --> 00:06:34.350
with parameters but important when discussing them.

114
00:06:34.430 --> 00:06:36.970
There's a difference between parameters and arguments.

115
00:06:37.070 --> 00:06:39.460
You might hear them used interchangeably.

116
00:06:39.500 --> 00:06:43.940
It's very easy thing to do but they are different parameters.

117
00:06:43.970 --> 00:06:49.330
Refer to the variable in a method definition so actually when we define the function.

118
00:06:49.520 --> 00:06:52.640
This is a parameter right here.

119
00:06:53.240 --> 00:07:00.390
But when we actually call the function or method the arguments are the data we pass in to the parameters.

120
00:07:00.890 --> 00:07:06.620
So a parameter is in the Declaration and the argument is what is actually called in the execution.

121
00:07:06.620 --> 00:07:09.790
So in this example name is the parameter.

122
00:07:09.920 --> 00:07:17.730
It's what is inside the function definition Nicklaus is the argument we pass in a lot of times you might

123
00:07:17.730 --> 00:07:22.230
hear someone say something like let's define a function with two arguments.

124
00:07:22.230 --> 00:07:23.980
Name one in name two.

125
00:07:24.090 --> 00:07:26.490
Technically these are two parameters.

126
00:07:26.790 --> 00:07:33.650
And down here if we passed then two things we would say let's call sing Happy Birthday with two arguments.

127
00:07:33.670 --> 00:07:35.640
Nicolas and Julia.

128
00:07:35.640 --> 00:07:40.860
So a minor distinction as in the grand scheme of things it's not going to change the behavior of your

129
00:07:40.860 --> 00:07:44.850
code but it's important to know that there is a difference when you're discussing that or when you hear

130
00:07:44.850 --> 00:07:46.710
me say argument versus parameter.

131
00:07:46.710 --> 00:07:53.250
So one last example I will make a file called divide that P Y and all declare a function called divide

132
00:07:53.730 --> 00:07:56.030
and it will just take two numbers.

133
00:07:56.060 --> 00:07:57.380
Number one and number two.

134
00:07:57.390 --> 00:08:01.030
And no there's a name for you know when we have like 1 divided by three.

135
00:08:01.140 --> 00:08:04.330
One of these is called the operand or something.

136
00:08:04.350 --> 00:08:05.320
I don't remember.

137
00:08:05.400 --> 00:08:10.230
I'm just going to call him number one and one I'm to it would be better to get the official names though.

138
00:08:10.410 --> 00:08:12.930
But I just want to show that the order does matter.

139
00:08:12.930 --> 00:08:23.840
So if I just return one divided by number two and let's do a print divide and let's pass in one comma

140
00:08:23.890 --> 00:08:27.140
5 and then do the same thing.

141
00:08:27.770 --> 00:08:29.660
Five comma two.

142
00:08:29.760 --> 00:08:33.600
Actually those two to come five and five come into the order does matter.

143
00:08:33.600 --> 00:08:36.970
Whatever comes in first is going to be referred to as number one.

144
00:08:36.990 --> 00:08:39.720
Whatever second is number two.

145
00:08:39.750 --> 00:08:43.820
So if we look at what we get here let's run this Python 3 divide.

146
00:08:44.010 --> 00:08:46.680
We get 0.4 and then 2.5.

147
00:08:46.920 --> 00:08:51.710
So it does two divided by five first and then it has five divided by two.

148
00:08:51.720 --> 00:08:54.150
So all that I want to show is the order matters.

149
00:08:54.210 --> 00:09:02.550
If we just switch these it would achieve the opposite number two and common on one.

150
00:09:02.580 --> 00:09:07.120
These would be switched in the results and this first one would divide five by two.

151
00:09:07.500 --> 00:09:09.320
OK I'll leave it off there.

152
00:09:09.330 --> 00:09:11.330
Next we have a quick little exercise.
