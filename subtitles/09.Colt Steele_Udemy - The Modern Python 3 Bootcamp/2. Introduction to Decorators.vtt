WEBVTT
1
00:00:00.260 --> 00:00:00.790
All right.

2
00:00:00.810 --> 00:00:04.410
So we talked about higher order functions to prepare for decorators.

3
00:00:04.410 --> 00:00:07.050
Now let's move on and talk about decorator's.

4
00:00:07.050 --> 00:00:11.550
So a good place to start is just defining what a decorator actually is.

5
00:00:11.550 --> 00:00:18.150
So a decorator is simply a function but more importantly it's a function that wraps other functions

6
00:00:18.720 --> 00:00:24.080
enhancing or changing the behavior of the function that is being wrapped.

7
00:00:24.090 --> 00:00:30.120
There are examples of higher order functions and decorators also have their own special syntax.

8
00:00:30.120 --> 00:00:31.620
You can use the at sign.

9
00:00:31.710 --> 00:00:34.410
It's just a shorter syntax but we don't have to use it.

10
00:00:34.560 --> 00:00:35.220
But we should.

11
00:00:35.340 --> 00:00:40.200
But first I'm going to show you how to set up a decorator just a wrapper function that enhances the

12
00:00:40.200 --> 00:00:43.920
behavior of another function without using the syntactic sugar.

13
00:00:43.950 --> 00:00:46.080
And then we'll see the nicer way of doing it.

14
00:00:46.370 --> 00:00:46.710
OK.

15
00:00:46.740 --> 00:00:49.200
So let's take a look at that first example.

16
00:00:49.230 --> 00:00:52.760
So here we have our basic basic function called greet.

17
00:00:52.800 --> 00:00:55.100
And it just prints My name is called.

18
00:00:55.160 --> 00:00:55.750
All right.

19
00:00:56.160 --> 00:00:57.690
But then we have this other function called.

20
00:00:57.690 --> 00:00:58.640
Be polite.

21
00:00:58.830 --> 00:01:02.250
That takes the function as an argument high order function.

22
00:01:02.250 --> 00:01:04.320
Not only does it take a function as an argument.

23
00:01:04.320 --> 00:01:08.380
It actually returns another function that's defined inside.

24
00:01:08.640 --> 00:01:12.930
So we have a function that we're calling wrapper does not have to be called that can be called anything

25
00:01:13.380 --> 00:01:20.370
but we're going to return it from Be polite and all that it does is print what a pleasure to meet you

26
00:01:20.670 --> 00:01:24.820
and then it executes function whatever was passed in and then it prints.

27
00:01:24.840 --> 00:01:25.930
Have a great day.

28
00:01:26.280 --> 00:01:31.020
And at this point these two functions have nothing to do with one another totally separate.

29
00:01:31.020 --> 00:01:32.670
But then there's this line.

30
00:01:32.670 --> 00:01:38.490
This is where we start to decorate our function where we take greets and we pass it in to be polite

31
00:01:38.760 --> 00:01:43.180
and we save the result that's returned the wrapper function to a new variable.

32
00:01:43.200 --> 00:01:45.080
In this case we're just calling it great.

33
00:01:45.300 --> 00:01:50.740
So grete is equal to the result of passing green into Be polite and the result of that is that we get

34
00:01:50.740 --> 00:01:56.010
a function that takes this functionality and sandwiches it between what a pleasure to meet you and have

35
00:01:56.010 --> 00:01:57.030
a great day.

36
00:01:57.510 --> 00:01:58.060
OK.

37
00:01:58.350 --> 00:02:03.840
So I have the same code here in the file and all we need to do is then execute greet let's do it three

38
00:02:03.840 --> 00:02:04.510
times.

39
00:02:06.930 --> 00:02:09.020
And we get what a pleasure to meet you my name is cold.

40
00:02:09.030 --> 00:02:09.690
Have a great day.

41
00:02:09.690 --> 00:02:13.290
That's the first time and the second time than the third time.

42
00:02:13.290 --> 00:02:14.010
All right.

43
00:02:14.280 --> 00:02:20.490
So hopefully you can see how we are wrapping this function greet inside of another function we're returning

44
00:02:20.490 --> 00:02:26.190
it and then we're storing it in a variable called greet we could call it wrapped greet or something

45
00:02:26.190 --> 00:02:28.640
like that but I'm just going to go with great.

46
00:02:28.770 --> 00:02:30.630
But I want to be clear that name doesn't matter.

47
00:02:30.750 --> 00:02:32.890
But whatever is here is what you would call.

48
00:02:32.990 --> 00:02:37.590
But in a moment I'll show you the nice syntax that Python adds so we don't ever even have to do this

49
00:02:37.590 --> 00:02:37.940
line.

50
00:02:38.070 --> 00:02:42.480
But I just want to make sure that everyone's comfortable or as many people as possible are comfortable

51
00:02:42.480 --> 00:02:49.620
with the idea of having a function that returns this wrapper and the wrapper does something first then

52
00:02:49.620 --> 00:02:53.580
does a function that we passed in greet and then does something else.

53
00:02:53.880 --> 00:03:04.220
So we could do another one where we have I don't know def rage print I hate you like this.

54
00:03:04.520 --> 00:03:13.410
And then we could define polite rage equals be polite rage and then down here.

55
00:03:13.460 --> 00:03:15.610
I just need to call polite rage.

56
00:03:16.370 --> 00:03:19.300
And that gives us get a pleasure to meet you.

57
00:03:19.330 --> 00:03:27.160
I hate to have a great day so you can see we're wrapping this code or this function with functionality.

58
00:03:27.160 --> 00:03:33.100
Now the utility of decorators comes in when we're not just you know printing polite sentences but we

59
00:03:33.100 --> 00:03:38.380
start to add other functionality around things and also examples in a future video in the section that

60
00:03:38.380 --> 00:03:40.000
actually show why you would use that.

61
00:03:40.090 --> 00:03:45.940
But next let's look at the syntactic sugar I've been mentioning using that as a sign that helps us create

62
00:03:45.940 --> 00:03:47.100
a decorator faster.

63
00:03:47.260 --> 00:03:51.340
OK so here is that syntactic sugar we have are two functions.

64
00:03:51.340 --> 00:03:55.860
They are unchanged but the difference is that I'm now putting this at.

65
00:03:55.900 --> 00:03:56.600
Be polite.

66
00:03:56.620 --> 00:04:01.900
The name of this function here on the line before I'm defining whatever the function is that I want

67
00:04:01.900 --> 00:04:04.540
to be wrapped in Python takes care of the rest.

68
00:04:04.540 --> 00:04:06.110
I don't have to do this anymore.

69
00:04:06.580 --> 00:04:08.320
It automatically does this.

70
00:04:08.320 --> 00:04:12.890
So whenever I call greet it's basically the same as me having a variable called greet.

71
00:04:13.000 --> 00:04:18.160
Well it is the same which is the result of calling be polite with greet and that wrapper function that's

72
00:04:18.160 --> 00:04:19.030
returned.

73
00:04:19.030 --> 00:04:22.630
Instead we just have to write this so we can test it out.

74
00:04:22.660 --> 00:04:29.610
All I have to do here is just do at be polite and I can get rid of all of the signs down here.

75
00:04:29.610 --> 00:04:32.310
Now get rid of that as well.

76
00:04:32.500 --> 00:04:35.870
And if I call greet Let's see what happens.

77
00:04:36.070 --> 00:04:36.520
There we go.

78
00:04:36.520 --> 00:04:37.390
What a pleasure to meet you.

79
00:04:37.390 --> 00:04:38.110
My name is cold.

80
00:04:38.110 --> 00:04:39.830
Have a great day.

81
00:04:39.910 --> 00:04:42.330
Notice it only applies to this function.

82
00:04:42.490 --> 00:04:45.370
If I wanted it to apply to rage I could do that.

83
00:04:45.370 --> 00:04:47.900
Nothing wrong with that I can call rage afterwards

84
00:04:50.790 --> 00:04:51.510
and there we go.

85
00:04:51.510 --> 00:04:56.360
We get both functions now being wrapped so very nice syntax.

86
00:04:56.520 --> 00:05:01.570
This is something that not every programming language I've worked in supports and I'm a big fan of it.

87
00:05:01.590 --> 00:05:02.580
I think it's nice.

88
00:05:02.580 --> 00:05:08.370
Some criticisms of it might be that it's a little over-the-top that it's trying to be too nice and tidy

89
00:05:08.550 --> 00:05:12.860
and that obfuscates what's actually happening but I personally think that it's a nice touch.

90
00:05:13.020 --> 00:05:15.180
But remember you do not have to use it.

91
00:05:15.210 --> 00:05:20.670
We could do the exact same thing which with what we already saw where we could do something like rage

92
00:05:20.970 --> 00:05:24.870
now equals be polite of rage.

93
00:05:25.200 --> 00:05:29.580
This is doing that and the cool thing is it automatically gives it the name rage.

94
00:05:29.580 --> 00:05:35.990
So earlier when I was doing something like polite rage I had to then call polite rage down here but

95
00:05:36.360 --> 00:05:42.630
when we add the decorator with the syntactic sugar it automatically just uses the exact same name so

96
00:05:43.200 --> 00:05:48.540
I can just do this and now I call rage and it's automatically wrapped with whatever we had up here.

97
00:05:48.540 --> 00:05:50.120
All right I'll send this video here.

98
00:05:50.280 --> 00:05:53.440
Decorators are just functions that accept other functions.

99
00:05:53.460 --> 00:05:57.870
They wrap them with some other functionality and return that wrapper function.

100
00:05:57.870 --> 00:06:03.930
But then the cool thing in Python is we can use this at decorator's syntactic sugar in front of a function

101
00:06:03.930 --> 00:06:11.310
definition put at whatever we saw at class method that does the exact same thing except we didn't define

102
00:06:11.310 --> 00:06:12.230
class method.

103
00:06:12.420 --> 00:06:14.200
It was defined for us.

104
00:06:14.610 --> 00:06:17.390
Instead we can use some function that we've defined.

105
00:06:17.430 --> 00:06:20.330
We put it in front of whatever function we're defining and it's wrapped.
