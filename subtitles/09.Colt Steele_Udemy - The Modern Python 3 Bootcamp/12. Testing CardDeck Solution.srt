1
00:00:00,270 --> 00:00:01,340
Hey welcome back.

2
00:00:01,560 --> 00:00:07,290
So in this video I'm just going to walk through the test that I wrote to test the deck in card classes.

3
00:00:07,290 --> 00:00:12,930
They're actually the same tests that I wrote in the exercise when I don't know if you did this but if

4
00:00:12,930 --> 00:00:20,640
you did enter your code into they you to me coding challenge interactive python Ed. trademark copyright.

5
00:00:20,640 --> 00:00:25,710
All that craziness I wrote these tests to go in there to test your code.

6
00:00:25,710 --> 00:00:28,370
Now I'm just going to walk through what they actually look like.

7
00:00:28,770 --> 00:00:32,380
So if we go over to Test I can start with the card tests.

8
00:00:32,490 --> 00:00:37,160
So I import both things up top and then I have my card test class.

9
00:00:37,380 --> 00:00:43,560
There's no you know you don't have to do separate a separate class to test cards an index card and deck

10
00:00:43,920 --> 00:00:46,090
but it's better to separate things.

11
00:00:46,200 --> 00:00:47,680
We could do all of this.

12
00:00:47,730 --> 00:00:51,970
I mean you could technically write all of your tests in a single function or single method.

13
00:00:51,990 --> 00:00:55,810
It would just be kind of a nightmare to understand what was going wrong.

14
00:00:55,920 --> 00:00:57,370
So it's better to break things up.

15
00:00:57,570 --> 00:01:00,600
So with card the first thing I have is setup.

16
00:01:00,780 --> 00:01:07,070
I'm using the same card for all these tests where I just have you know initialized new card with hearts

17
00:01:07,070 --> 00:01:10,500
or shoot is hearts and value is a for Ace.

18
00:01:10,590 --> 00:01:16,710
Then to test it I'm just using this self-direct card and checking that self-talk card that suit has

19
00:01:16,710 --> 00:01:21,020
been assigned to Hearts and that self-edit card value has been assigned to AA.

20
00:01:21,210 --> 00:01:28,890
So to assert equals and then our docstring to test the representation what's supposed to happen is that

21
00:01:28,890 --> 00:01:31,580
it returned to string a of hearts.

22
00:01:31,650 --> 00:01:35,110
If we're using self-direct card so I'm doing that.

23
00:01:35,130 --> 00:01:38,380
So we just use self that assert equal representation.

24
00:01:38,470 --> 00:01:41,610
Self-caused So this is the better way of testing it.

25
00:01:41,610 --> 00:01:48,510
You could also do self-direct card dot our EPR and direct the call the method where we can use this

26
00:01:48,510 --> 00:01:53,110
function that will then call DOT Dunder our EPR.

27
00:01:53,130 --> 00:01:54,660
Behind the scenes anyway.

28
00:01:54,710 --> 00:01:57,160
So we're testing that it's equal to this.

29
00:01:57,210 --> 00:02:00,920
So both of those work then we move on to the deck tests.

30
00:02:00,930 --> 00:02:07,410
The book of the logic and I have the same thing where I make a new deck self-taught deck equals deck.

31
00:02:07,440 --> 00:02:08,710
You don't pass anything in.

32
00:02:08,730 --> 00:02:16,920
So before every one of these this code runs first I'm testing init and I'm checking that assert true

33
00:02:17,070 --> 00:02:22,100
that self-taught deck of cards is a list instance list should return true.

34
00:02:22,800 --> 00:02:26,570
And on top of that we're checking that it has 52 things in it.

35
00:02:26,610 --> 00:02:30,940
I didn't actually check to see if the items were exactly cards.

36
00:02:31,110 --> 00:02:34,640
I just checked those 52 things in there and that it's a list.

37
00:02:35,070 --> 00:02:39,400
But then later on I'm checking you know certain things have to be cards anyway.

38
00:02:39,660 --> 00:02:46,410
Then we have test our EPR is the same same idea representation except I'm expecting it to say deck of

39
00:02:46,410 --> 00:02:49,640
52 cards or a deck of cards.

40
00:02:49,650 --> 00:02:56,370
But when you make a new deck which is what happens it should be 52 did test count.

41
00:02:56,610 --> 00:03:01,670
I'm first asserting equal that at the beginning count is 52.

42
00:03:01,670 --> 00:03:09,090
So if the deck got count of a brand new deck from here should have 52 cards then I am popping one off

43
00:03:09,170 --> 00:03:14,580
self-doubt decked out cards up pop and then I'm checking that the Count has now gone down to 1 or gone

44
00:03:14,580 --> 00:03:15,740
down by 1.

45
00:03:16,080 --> 00:03:17,770
And that works as well.

46
00:03:17,820 --> 00:03:19,950
I should stop saying that all of these work I've already run them.

47
00:03:19,950 --> 00:03:21,270
You've seen me run them.

48
00:03:21,270 --> 00:03:28,830
There are three tests for deal this method here not deal hand or deal card but just underscore deal

49
00:03:29,310 --> 00:03:31,960
the method be used internally in those other methods.

50
00:03:32,010 --> 00:03:33,750
And there's three things I'm testing for.

51
00:03:33,750 --> 00:03:39,150
What happens if you ask for a reasonable amount of cards that you ask for two cards and there's 50 in

52
00:03:39,150 --> 00:03:39,530
the deck.

53
00:03:39,540 --> 00:03:40,320
That's fine.

54
00:03:40,590 --> 00:03:44,830
But if you ask for fifty five cards and there's only 52 what happens.

55
00:03:45,030 --> 00:03:50,370
And also if you ask for two cards when there's two cards left does it still work.

56
00:03:50,370 --> 00:03:56,390
So back in the tests the first one is just to check if there are enough cards left it should deal appropriately.

57
00:03:56,460 --> 00:03:59,100
So we have a brand new deck with 52 cards.

58
00:03:59,100 --> 00:04:00,080
Then I'm calling.

59
00:04:00,090 --> 00:04:05,600
Deal underscore deal with 10 and that should be me with 42 cards.

60
00:04:05,640 --> 00:04:11,040
And what I do is check that when we call self-direct decked out under a square deal 10 I save the list

61
00:04:11,070 --> 00:04:16,350
to a variable called cards and then check that there are 10 things in that list and I'm checking the

62
00:04:16,350 --> 00:04:19,250
count of self-doubt deck has gone down by 10.

63
00:04:19,260 --> 00:04:24,690
So two things at once if I was only checking to see if Count went by went down by 10 then it might be

64
00:04:24,690 --> 00:04:29,940
missing the fact that those cards are returned and there could be a problem where those cards weren't

65
00:04:29,940 --> 00:04:33,270
returned they were removed and then never returned.

66
00:04:33,330 --> 00:04:37,360
Which case this would not have full test coverage of this method.

67
00:04:38,330 --> 00:04:43,640
Then I'm doing the same thing but trying to deal 100 cards and that should never work because there's

68
00:04:43,640 --> 00:04:46,200
only 52 cards maximum.

69
00:04:46,310 --> 00:04:46,780
Same thing.

70
00:04:46,790 --> 00:04:50,590
So I call self-taught decked out underscored deal 100 save the result to cards.

71
00:04:50,950 --> 00:04:55,830
And I should check that the length of cards is all the cards possible 52.

72
00:04:56,360 --> 00:04:59,560
And that self-direct count is empty.

73
00:04:59,570 --> 00:05:04,180
And then lastly this is a trick here one deal should throw a value error.

74
00:05:04,190 --> 00:05:10,160
If the deck is empty and you try and deal from there and if I try that self-doubt decked out under square

75
00:05:10,160 --> 00:05:16,670
deal and I try to use the self-taught DECT count which will then deal everything in the deck.

76
00:05:16,670 --> 00:05:19,220
This will empty it drain it completely right here.

77
00:05:19,610 --> 00:05:27,500
Then I'm going to try and deal one more but assert that it raises a value error which it indeed does

78
00:05:27,740 --> 00:05:28,990
right there.

79
00:05:29,650 --> 00:05:30,120
OK.

80
00:05:30,260 --> 00:05:33,950
So that's the syntax as we saw it a couple of videos ago to test for errors.

81
00:05:33,950 --> 00:05:36,290
We use a with statement.

82
00:05:36,290 --> 00:05:39,170
Next up we have a card in deal hand.

83
00:05:39,170 --> 00:05:43,750
I'm checking that when I call deal card Cingular it gives me the last card.

84
00:05:43,850 --> 00:05:50,550
And one way to do that is to start a brand new deck which is from our set up all the way up here.

85
00:05:51,050 --> 00:05:54,660
And then I call self-doubt decked up cards negative 1.

86
00:05:54,770 --> 00:05:55,660
So I'm not removing it.

87
00:05:55,670 --> 00:05:59,680
I'm just saving a variable called Card equal to the last card in that list.

88
00:05:59,690 --> 00:06:05,510
But I'm leaving it in the list then I make another variable called Delta card and that's equal to the

89
00:06:05,510 --> 00:06:08,100
result of deal card on self-taught deck.

90
00:06:08,120 --> 00:06:12,170
So that gives me the card and they're supposed to equal one another.

91
00:06:12,200 --> 00:06:14,560
I was starting right checking with the last card twice.

92
00:06:14,570 --> 00:06:18,520
And then I asked for the last card and they should be the same thing.

93
00:06:18,530 --> 00:06:22,830
So then I can do a self-taught assert equal card and Delta card they should be the same.

94
00:06:22,940 --> 00:06:27,550
And at the same time I assert equal that self-direct count went down by 1.

95
00:06:27,590 --> 00:06:30,760
And it's now 51 cards with Deal hand.

96
00:06:30,770 --> 00:06:36,080
I am dealing 20 cards at once and saving it to a variable called cards and then I'm checking that the

97
00:06:36,080 --> 00:06:39,870
length of the cards is 20 and then I'm also checking the decks.

98
00:06:39,890 --> 00:06:41,390
Count the method.

99
00:06:41,390 --> 00:06:48,730
That's the number that returned has gone down by 20 leaving me with 32 cards almost there then we get

100
00:06:48,730 --> 00:06:49,810
to shuffle.

101
00:06:49,810 --> 00:06:54,300
As I mentioned in the intro shuffle is harder to test when you have random stuff going on.

102
00:06:54,430 --> 00:06:57,300
You can't predict what it should equal Exactly.

103
00:06:57,490 --> 00:06:59,500
So the approach that I took is a bit different.

104
00:06:59,800 --> 00:07:06,250
I made a variable called cards and set it equal to self-doubt decked out cards the slice with just a

105
00:07:06,250 --> 00:07:09,740
single colon and that's just going to give us everything that makes a copy.

106
00:07:09,850 --> 00:07:15,270
So I cloned it into a variable called cards and I'm going to use that to compare after a shuffle.

107
00:07:15,520 --> 00:07:21,820
So I have the initial state and the reason I have to do this I couldn't just say cards equals self-doubt

108
00:07:21,820 --> 00:07:26,380
deck of cards because it would be pointing to the exact same thing.

109
00:07:26,470 --> 00:07:30,870
And once they changed you know self a deck of cards cards would change as well.

110
00:07:30,880 --> 00:07:32,300
I need a copy of it.

111
00:07:32,350 --> 00:07:33,930
That's one way of doing it.

112
00:07:34,110 --> 00:07:40,180
So I'm keeping the original state and then I shuffle self-direct cards and then I'm checking that the

113
00:07:40,180 --> 00:07:41,700
two things are different now.

114
00:07:41,830 --> 00:07:46,960
Self-taught assert not equal cards is not equal to self-direct cards.

115
00:07:46,960 --> 00:07:49,550
The initial state is different than the current state.

116
00:07:49,750 --> 00:07:52,080
And that's kind of all I could do if I wanted.

117
00:07:52,090 --> 00:07:56,940
You definitely could be a lot more intense about how you check for the shuffle.

118
00:07:57,130 --> 00:07:59,660
But what I'm doing is just checking that they're different.

119
00:07:59,680 --> 00:08:01,480
So the before and after state are different.

120
00:08:01,570 --> 00:08:03,540
But that length is the same as before.

121
00:08:03,800 --> 00:08:09,320
Otherwise you know if I had tried to shuffle we could have just deleted everything from the deck and

122
00:08:09,330 --> 00:08:15,370
if I didn't have this line this test all of this would pass because we're just checking if the two things

123
00:08:15,370 --> 00:08:19,430
are different before and after and an empty deck is different than a full deck.

124
00:08:19,480 --> 00:08:24,520
But by doing this I'm ensuring that it's still full at the end but also different.

125
00:08:25,000 --> 00:08:30,220
And then we have shuffle on a non-full deck an empty deck or a partially empty deck.

126
00:08:30,220 --> 00:08:33,070
The goal is to only be able to shuffle a full deck.

127
00:08:33,070 --> 00:08:39,700
So we just deal one card right off the bat and then we call self-taught decked out shuffle and we assert

128
00:08:39,730 --> 00:08:41,420
that that race is evaluated.

129
00:08:41,920 --> 00:08:43,560
And it does indeed.

130
00:08:43,570 --> 00:08:45,740
So that concludes the little walkthrough here.

131
00:08:45,940 --> 00:08:50,630
Let's just run those tests without the dash B 12 tests run.

132
00:08:50,770 --> 00:08:53,050
Everything's good with the dash B.

133
00:08:53,290 --> 00:08:57,360
We get all this information and everything is working.

134
00:08:57,460 --> 00:08:58,070
All right.

135
00:08:58,090 --> 00:09:03,100
So whether you actually wrote all the tests and went along with this or you wrote a couple of them and

136
00:09:03,090 --> 00:09:08,460
then gave up or you rolled her eyes at me and just didn't do any of the tests and maybe you watched

137
00:09:08,460 --> 00:09:14,170
the solution video hopefully right now at the end of the section you can see that testing is potentially

138
00:09:14,170 --> 00:09:15,230
useful.

139
00:09:15,250 --> 00:09:19,570
It also is potentially time consuming and they can be a lot of work.

140
00:09:19,570 --> 00:09:26,470
My goal with this section was not to try and convert you to a testing maniac or to a preacher about

141
00:09:26,470 --> 00:09:28,660
the benefits of TDD nonstop.

142
00:09:28,750 --> 00:09:33,130
I really just wanted to expose you to testing so that if you do keep working with python there will

143
00:09:33,130 --> 00:09:38,920
be a time and at some point where you either have to write tests for your own project for an open source

144
00:09:38,920 --> 00:09:43,840
project or you have to make sure tests are running correctly before you can submit a poll request or

145
00:09:43,840 --> 00:09:49,390
you're working on a dev team somewhere freelance or full time doesn't matter.

146
00:09:49,390 --> 00:09:53,920
They'll probably have to write tests or at the very least run tests to make sure you didn't break anything

147
00:09:53,920 --> 00:09:55,520
by adding changes in.

148
00:09:55,630 --> 00:09:56,770
So it's a good skill to have.

149
00:09:56,830 --> 00:09:59,640
Keep it in your tool belt however you feel about it.

150
00:09:59,750 --> 00:10:02,420
Anyway moving on to more fun stuff.
