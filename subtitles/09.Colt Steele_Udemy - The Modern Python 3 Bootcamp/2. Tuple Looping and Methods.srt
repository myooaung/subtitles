1
00:00:00,330 --> 00:00:01,240
Hey welcome back.

2
00:00:01,260 --> 00:00:06,600
So pushing on with tuples we're going to talk about iterating over tuples and then also the two built

3
00:00:06,600 --> 00:00:07,970
in methods they come with.

4
00:00:08,010 --> 00:00:11,690
So first up we've already seen how to iterate with tuples.

5
00:00:11,940 --> 00:00:17,780
You may not have thought about it at the time but when we use items and we did a for loop with you know

6
00:00:17,790 --> 00:00:23,670
dictionary items we are actually using tuples already but technically that items returns a list where

7
00:00:23,730 --> 00:00:27,290
each value pair key value pair is its own tuple instead of a list.

8
00:00:27,450 --> 00:00:32,400
But we can just iterate directly over a tuple using the exact same syntax as a list.

9
00:00:32,400 --> 00:00:34,700
Nothing changes just looks like this.

10
00:00:34,980 --> 00:00:38,760
So if we could have a tuple of names for name and names.

11
00:00:38,790 --> 00:00:40,580
Print the name and that's it.

12
00:00:40,590 --> 00:00:41,550
Very straightforward.

13
00:00:41,610 --> 00:00:48,680
We could do for month and months print a month just like that and that's it.

14
00:00:48,700 --> 00:00:50,910
I think I already have months loaded up here.

15
00:00:51,060 --> 00:00:52,310
So if I just hit enter.

16
00:00:52,350 --> 00:00:52,990
There we go.

17
00:00:53,010 --> 00:00:56,710
We get every month printed out and that's all there is to using a for loop.

18
00:00:56,850 --> 00:00:58,140
We can also use a while loop.

19
00:00:58,140 --> 00:01:00,690
So also how to print them out backwards.

20
00:01:00,690 --> 00:01:04,400
So we would start with a variable and we'll just call it.

21
00:01:04,470 --> 00:01:12,450
I started at the last index so that's going to be the length of months but we need to do minus one because

22
00:01:12,450 --> 00:01:13,870
the length is going to be 12.

23
00:01:14,010 --> 00:01:15,420
The highest index is 11.

24
00:01:15,630 --> 00:01:21,460
And then we'll just do well high is greater than or equal to zero.

25
00:01:22,740 --> 00:01:25,210
And we don't have to have those parentheses.

26
00:01:25,980 --> 00:01:34,110
While that's the case we're just going to print months of I and then most importantly we need to decrement

27
00:01:34,720 --> 00:01:37,210
in this case because we're going backwards.

28
00:01:37,830 --> 00:01:38,730
So let's see what happens.

29
00:01:38,730 --> 00:01:40,400
Make sure don't have any syntax errors.

30
00:01:40,560 --> 00:01:41,210
And there we go.

31
00:01:41,310 --> 00:01:43,980
We get December down to January.

32
00:01:44,250 --> 00:01:49,160
So that's that for iterating Now as far as methods we get for free with tuples.

33
00:01:49,170 --> 00:01:50,970
There's actually just two.

34
00:01:51,060 --> 00:01:52,530
So it's pretty quick.

35
00:01:52,560 --> 00:01:55,290
The first is count which we've already seen as well.

36
00:01:55,410 --> 00:02:00,170
It just returns a number of times that value is in a tuple.

37
00:02:00,210 --> 00:02:01,490
So here's an example.

38
00:02:01,500 --> 00:02:03,260
Three is in here three times.

39
00:02:03,450 --> 00:02:09,060
We have one and two if I tried to extort count one tells me it's in there one time for track that count

40
00:02:09,060 --> 00:02:12,580
three tells me it's in there three times.

41
00:02:12,580 --> 00:02:13,590
And that's that's it.

42
00:02:13,590 --> 00:02:14,730
It's nice and straightforward.

43
00:02:14,820 --> 00:02:17,680
I could demonstrate it but I think it would be a waste your time.

44
00:02:18,270 --> 00:02:24,990
And then index which you've also seen so index will just tell us the index that a given value is found

45
00:02:24,990 --> 00:02:26,490
inside of a tuple.

46
00:02:26,490 --> 00:02:33,800
So if we have the same table and I want to know k where is the the index of 1 inside of this tuple.

47
00:02:33,810 --> 00:02:38,370
It gives me 0 because I said this year with index if I try and ask for the index here's something that's

48
00:02:38,370 --> 00:02:39,810
not in the list.

49
00:02:39,810 --> 00:02:41,760
It will give me a value error.

50
00:02:41,970 --> 00:02:45,390
So it doesn't return false or something it gives you an error.

51
00:02:45,390 --> 00:02:50,100
And if I try next to something that's in there or I want to know the first index of something that's

52
00:02:50,100 --> 00:02:56,280
in there multiple times like three it will only give me the first matching index and that's that for

53
00:02:56,280 --> 00:02:57,320
the method.

54
00:02:57,510 --> 00:03:00,030
Just a couple quick things to cover.

55
00:03:00,050 --> 00:03:05,370
You can have nested tuples so I could do something like this is not going to be a very good example

56
00:03:05,400 --> 00:03:13,520
but I had a list and I could do one two three and then have four comma five and there come a six.

57
00:03:13,680 --> 00:03:20,220
If I wanted to and if I hit enter here you'll see that everything looks fine.

58
00:03:20,220 --> 00:03:22,290
We have a tuple instead of a tuple.

59
00:03:22,320 --> 00:03:25,980
If I wanted to do something like Nom's zero I get one.

60
00:03:26,100 --> 00:03:26,640
But if I do.

61
00:03:26,640 --> 00:03:29,420
Number three it gives me four or five.

62
00:03:29,490 --> 00:03:34,410
So if I wanted to get 5 out of there I would need to do 0 1 just like this.

63
00:03:34,410 --> 00:03:37,750
So just like nested this same thing is totally fine.

64
00:03:37,770 --> 00:03:41,060
Also I should mention we we also can use slices.

65
00:03:41,130 --> 00:03:42,510
So if I do.

66
00:03:42,510 --> 00:03:46,650
Zero colon number that goes in the beginning to the end.

67
00:03:46,680 --> 00:03:54,780
If I did something like 0 2 4 it goes from 0 up to the fourth index next year 1 two three four non-inclusive

68
00:03:56,490 --> 00:04:02,960
and we could also you know use a step like this and that gives us every other value added for tuple.

69
00:04:03,110 --> 00:04:04,650
So slices also work.

70
00:04:04,650 --> 00:04:06,520
So that's pretty much it to tuples.

71
00:04:06,540 --> 00:04:10,260
It really comes down to the fact that there like a list except the lighter weight.

72
00:04:10,260 --> 00:04:14,520
They take up less space but they are much less flexible because they're immutable.

73
00:04:14,520 --> 00:04:15,880
You cannot change them.

74
00:04:15,960 --> 00:04:20,940
So it's really just best for data that you know is not going to change that order does matter.

75
00:04:20,970 --> 00:04:25,920
And you want it stored in some sort of list like object but you don't want to go for a full blown most

76
00:04:25,980 --> 00:04:27,930
then use a tuple call.

77
00:04:27,930 --> 00:04:29,450
Next up will see sets.
