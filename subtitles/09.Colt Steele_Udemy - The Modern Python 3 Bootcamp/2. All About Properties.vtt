WEBVTT
1
00:00:00.330 --> 00:00:01.170
Welcome back.

2
00:00:01.170 --> 00:00:05.290
In this video I'm going to quickly introduce a topic called properties.

3
00:00:05.310 --> 00:00:07.530
So first let me just demo this class.

4
00:00:07.530 --> 00:00:11.260
It's called human and every human has a first class name and age.

5
00:00:11.340 --> 00:00:12.210
Very straightforward.

6
00:00:12.210 --> 00:00:15.380
All three are set in the net and there's no methods.

7
00:00:15.570 --> 00:00:23.650
Let's say that I make a human called Jane and Jane is equal to human and her name is Jane capitalist's

8
00:00:23.660 --> 00:00:30.930
that correctly and her last name is Goodall which I think has two elves and I don't know how old she

9
00:00:30.930 --> 00:00:31.320
is.

10
00:00:31.350 --> 00:00:36.060
She's 60 something that's be just say 50 because I want to upset anyone.

11
00:00:36.480 --> 00:00:38.270
And that's great.

12
00:00:38.310 --> 00:00:46.020
You know I can do things like print Jane dot age but I could also cause problems potentially by setting

13
00:00:46.380 --> 00:00:50.410
age Jane that age is now equal to negative 100.

14
00:00:50.430 --> 00:00:52.370
There's nothing stopping me from doing this.

15
00:00:52.430 --> 00:00:56.940
And we kind of have we established that when we talked about class attributes and class methods and

16
00:00:56.940 --> 00:01:02.280
we saw you know we had that type of for pet species thing that we'd set up and someone could go around

17
00:01:02.280 --> 00:01:04.930
it like this if we don't want age to be negative.

18
00:01:05.010 --> 00:01:10.780
We could do something in here where we check if age is greater than or equal to zero.

19
00:01:11.100 --> 00:01:16.770
Self-taught age equals age else self-taught age equals zero.

20
00:01:17.010 --> 00:01:23.360
Right and that's always going to set it if we set Jane's age to be negative nine here and then I print

21
00:01:23.360 --> 00:01:27.780
her age that's run that we get zero.

22
00:01:27.810 --> 00:01:29.330
So we're setting it to zero.

23
00:01:29.790 --> 00:01:32.680
And this is not necessarily the best way of doing this.

24
00:01:32.700 --> 00:01:36.980
We could use max and take whatever is larger between age and zero.

25
00:01:37.080 --> 00:01:38.960
But let's just leave it at this.

26
00:01:38.990 --> 00:01:45.030
The problem that properties can help us solve is that a user can just directly or code can directly

27
00:01:45.030 --> 00:01:45.720
change age.

28
00:01:45.720 --> 00:01:48.000
We don't really have any control over that.

29
00:01:48.060 --> 00:01:52.950
What we can do is make use of something called a property and I'm going to show you a bunch of new syntax

30
00:01:52.950 --> 00:01:56.120
first and it's going to change things a little bit.

31
00:01:56.130 --> 00:02:02.650
So first of all I'm actually going to rename this here self that age to be self-taught underscore age

32
00:02:03.060 --> 00:02:06.790
and this is our way of trying to signify to other developers.

33
00:02:06.960 --> 00:02:08.670
This is private for this class.

34
00:02:08.670 --> 00:02:13.590
It doesn't actually mean anything as we already mentioned but it signifies this is for internal use

35
00:02:13.600 --> 00:02:14.480
in this class.

36
00:02:14.550 --> 00:02:17.460
So you shouldn't be calling Jane out underscore age.

37
00:02:17.460 --> 00:02:23.140
Now what we're going to do is set up a way of accessing age and changing underscore age.

38
00:02:23.210 --> 00:02:30.150
We've already seen this we could define a method called I don't know def get age and then another one

39
00:02:30.150 --> 00:02:39.960
called def set age like this and get age really simple just returned self-doubt underscore age and then

40
00:02:39.960 --> 00:02:40.780
set age.

41
00:02:40.800 --> 00:02:49.030
We need to take in a new age and then we'll just set self-doubt underscored age equals new age.

42
00:02:49.040 --> 00:02:51.960
What we could do a little check like this.

43
00:02:52.080 --> 00:03:00.630
If age if new age is greater than or equal to zero self-served underscore age equals New Age else let's

44
00:03:00.630 --> 00:03:02.840
just set it to be zero again.

45
00:03:03.400 --> 00:03:06.000
OK so this is what we know how to do this.

46
00:03:06.000 --> 00:03:06.810
This is nothing new.

47
00:03:06.810 --> 00:03:08.500
This is not involving properties.

48
00:03:08.500 --> 00:03:10.100
For now try and print.

49
00:03:10.200 --> 00:03:12.540
Age.

50
00:03:12.670 --> 00:03:17.370
There's a problem there's nothing called age as we know there's only underscore age.

51
00:03:17.410 --> 00:03:23.710
So what we would use instead is Jane datt get age and it's a method that we have to call it if we do

52
00:03:23.710 --> 00:03:25.480
it now we should get zero.

53
00:03:25.840 --> 00:03:34.590
And if we wanted to change the age let's do a set age and set age to be 45 and then print age again.

54
00:03:34.930 --> 00:03:40.070
This is sort of the interface we've set up you use get aged to get the value of underscore age.

55
00:03:40.360 --> 00:03:45.520
Again a developer could just call underscore age but the whole idea is that they're not supposed to

56
00:03:45.640 --> 00:03:46.880
supposed to respect that.

57
00:03:47.080 --> 00:03:50.760
So they go through get age and set age and does this work.

58
00:03:50.950 --> 00:03:51.440
Yes.

59
00:03:51.520 --> 00:03:53.180
Zero and then 45.

60
00:03:53.560 --> 00:03:55.070
This is where properties come in.

61
00:03:55.180 --> 00:03:59.780
So actually going to comment this out and then when it types some new code looks like this.

62
00:04:00.070 --> 00:04:00.500
OK.

63
00:04:00.610 --> 00:04:02.030
So here's the first part.

64
00:04:02.290 --> 00:04:07.130
This acts as Geter as a getter like we had here with get age.

65
00:04:07.510 --> 00:04:08.680
But what's cool about this.

66
00:04:08.680 --> 00:04:11.590
So I have to write at property this is what's known as a decorator.

67
00:04:11.590 --> 00:04:16.720
We have an entire section on decorator's later but it's a decorator that alters how this function works.

68
00:04:16.720 --> 00:04:18.510
And this method is called age.

69
00:04:18.640 --> 00:04:23.910
And what we've done is actually set up a property called age where you don't actually call this method

70
00:04:23.920 --> 00:04:26.570
you don't have to call it age with parentheses.

71
00:04:26.610 --> 00:04:36.250
I can now do this print Jane dot age as if it was an attribute on Jane and it did with like earlier

72
00:04:36.310 --> 00:04:41.760
when we had self-taught age we were never actually setting self-taught age anywhere anywhere at all.

73
00:04:41.770 --> 00:04:46.840
We're working with self-taught underscore age but this little bit of magic makes this work.

74
00:04:46.840 --> 00:04:49.520
So now we get zero.

75
00:04:49.810 --> 00:04:54.400
And if we change just to be 34 it's working.

76
00:04:54.790 --> 00:04:58.990
So what's happening is this our property allows us to take the name of this method.

77
00:04:59.080 --> 00:05:04.510
So whatever this is called We would then call down here and I don't need Perrins even though it's a

78
00:05:04.510 --> 00:05:06.040
method here.

79
00:05:06.040 --> 00:05:11.950
So it's really useful as a getter but even more so you could say as a setter and this is the syntax

80
00:05:12.010 --> 00:05:20.680
for center reference at age dot setter as a decorator Then we define another method called age.

81
00:05:21.010 --> 00:05:23.300
But this time it takes in a new value.

82
00:05:23.560 --> 00:05:31.600
Let's just call it value and then this is where we do this sort of a check we would do if instead of

83
00:05:31.680 --> 00:05:39.670
New-Age we'll call it value if value is positive self-talk underscore age equal to the new value else

84
00:05:40.090 --> 00:05:41.340
set it to zero.

85
00:05:41.860 --> 00:05:44.080
Or we could even raise a value error.

86
00:05:44.440 --> 00:05:47.170
Age can't be negative.

87
00:05:48.010 --> 00:05:48.640
OK.

88
00:05:48.640 --> 00:05:52.500
So with these two here they're both called age two methods.

89
00:05:52.810 --> 00:05:54.730
This one takes in a new value.

90
00:05:54.730 --> 00:05:59.730
So with what we have now we've set up a center for age so that I can now do.

91
00:06:00.020 --> 00:06:03.710
Jane datt age equals 20.

92
00:06:03.800 --> 00:06:11.100
Then print Jane our age again afterwards we should see 34 and then 20 and there we go.

93
00:06:11.110 --> 00:06:16.480
So what's cool about this is that we don't have to go through this route to get age and set age defining

94
00:06:16.480 --> 00:06:20.490
those methods where we actually call them with parents like we did here.

95
00:06:20.890 --> 00:06:27.610
Instead we've set up this property and we can just access directly Jane that age even though age is

96
00:06:27.610 --> 00:06:30.850
really a proxy for underscore age internally.

97
00:06:30.880 --> 00:06:39.700
And now if I try and change age to be negative 100 it prevents me from changing age.

98
00:06:39.790 --> 00:06:44.110
So I kind of have this validation in there at this point that people would actually say this is a bit

99
00:06:44.160 --> 00:06:45.070
on Pythonic.

100
00:06:45.130 --> 00:06:50.620
And to wrap that up we've got our property and then whatever we put below it it's going to be the name

101
00:06:50.620 --> 00:06:52.880
of that property so age is what we had here.

102
00:06:52.930 --> 00:06:59.440
If I called this rage both of these needs to be raised as well as this and then down here Access Jane

103
00:06:59.440 --> 00:07:07.530
dot rage and chained up rage would be accessing and manipulating underscore age.

104
00:07:07.550 --> 00:07:09.230
So let me show one more.

105
00:07:09.230 --> 00:07:19.200
We could make a property for get rid of the rage there fullname we could do at property def full name

106
00:07:19.680 --> 00:07:23.640
self and then we could just have it return.

107
00:07:23.730 --> 00:07:29.290
Self-taught First let's do an F string like this.

108
00:07:29.560 --> 00:07:40.230
Self-taught first space self-taught last and now instead of calling a method fullname I can just call

109
00:07:40.500 --> 00:07:47.220
print Jane dot full name and property let's see what we get.

110
00:07:47.340 --> 00:07:50.930
Oh well this error is messing things up not getting to that point.

111
00:07:51.030 --> 00:07:52.410
Try one more time.

112
00:07:52.410 --> 00:07:53.100
There we go.

113
00:07:53.100 --> 00:07:57.440
Full name is Jane Goodall and we could add a setter.

114
00:07:57.570 --> 00:08:00.750
I will say this is kind of sketchy to do it this way in my opinion.

115
00:08:00.810 --> 00:08:09.600
We would do at full name dot setter and then we define def full name self and then let's just call this

116
00:08:10.380 --> 00:08:21.280
value let's just call this name so a user could specify Jane full name is now equal to Tim Minchin or

117
00:08:21.280 --> 00:08:22.890
something like that.

118
00:08:22.930 --> 00:08:27.310
And the reason that I don't really like this is that this would have side effects because we were going

119
00:08:27.310 --> 00:08:31.040
to re-assign first and last based off of this.

120
00:08:31.270 --> 00:08:33.420
So it looks something like this.

121
00:08:33.790 --> 00:08:43.120
You do self-taught first Khama self-taught last equals named dot split on a space Paulist you split

122
00:08:43.810 --> 00:08:47.240
on a space so name would be something like this.

123
00:08:47.260 --> 00:08:49.540
We split it in half on the boat not exactly in half.

124
00:08:49.540 --> 00:08:51.310
We split it on the space.

125
00:08:51.310 --> 00:08:54.110
This is going to be assigned to self-doubt first.

126
00:08:54.130 --> 00:08:56.520
This is assigned to self-taught last.

127
00:08:56.530 --> 00:09:02.290
Like I said this is kind of sketchy because you're setting this property for name and it's changing

128
00:09:02.290 --> 00:09:08.290
to other attributes and I don't know I wouldn't do this personally but I'm putting it in here just as

129
00:09:08.290 --> 00:09:10.800
an example that it does work.

130
00:09:10.810 --> 00:09:19.030
So if we did Jane the full name is to mention let's do a print Jane dot dict Dunder dict and print that

131
00:09:19.030 --> 00:09:19.940
out.

132
00:09:20.530 --> 00:09:22.840
You can see with the actual values we've got first.

133
00:09:22.840 --> 00:09:26.620
Now Tim last is now mentioned underscore age is 20.

134
00:09:26.620 --> 00:09:27.860
So full name is not in here.

135
00:09:27.880 --> 00:09:35.620
Full name is a property we set up that is interacting with first and last just like age is not in there

136
00:09:35.620 --> 00:09:38.150
either only underscore ages.

137
00:09:38.170 --> 00:09:40.900
It's an interface that we've created to interact with these.

138
00:09:40.930 --> 00:09:46.420
Like I said this maybe not the best example but I just wanted to show you two full properties that both

139
00:09:46.420 --> 00:09:48.420
have a getter and a center.

140
00:09:48.670 --> 00:09:52.530
And the syntax at property than the name of the property.

141
00:09:52.810 --> 00:09:55.960
And then you return whatever value you want to be returned.

142
00:09:56.190 --> 00:10:02.200
Then we do the name of the property with an at sign dot center and then a method with the exact same

143
00:10:02.200 --> 00:10:03.080
name.

144
00:10:03.160 --> 00:10:08.590
And this one takes in a new value and then we can you know do some sort of validation or check something

145
00:10:08.980 --> 00:10:11.940
and then we update whatever we want in here.

146
00:10:11.950 --> 00:10:15.820
In our case we're working with underscore age and we did the same thing down here for full name.

147
00:10:15.880 --> 00:10:17.280
So those are properties.

148
00:10:17.380 --> 00:10:22.090
It's just a nice bit of syntactic sugar so that we can access things like Jane that age instead of having

149
00:10:22.090 --> 00:10:22.360
to do.

150
00:10:22.360 --> 00:10:29.040
Jane don't get age like we had a peer but always remember that a user could just type Jane.

151
00:10:29.100 --> 00:10:35.380
Underscore age and circumvent all of this so it all comes down to developers respecting what you know

152
00:10:35.410 --> 00:10:37.930
code and what's been written by other developers.

153
00:10:37.960 --> 00:10:39.810
Otherwise these properties are meaningless.

154
00:10:39.820 --> 00:10:42.370
If we can just go around them and that's the point.

155
00:10:42.370 --> 00:10:46.600
That's how Python is set up without having private methods or private attributes.

156
00:10:46.600 --> 00:10:49.270
It just comes down to following conventions anyway.

157
00:10:49.390 --> 00:10:50.080
That's properties.
