WEBVTT
1
00:00:00.180 --> 00:00:01.290
Hey welcome back.

2
00:00:01.290 --> 00:00:04.050
Next we're going to talk about anchors and boundaries.

3
00:00:04.050 --> 00:00:06.270
There's only three that we're going to talk about here.

4
00:00:06.420 --> 00:00:08.780
And the first one is the carrot.

5
00:00:08.790 --> 00:00:13.240
It means it indicates the start of a string or the start of a line.

6
00:00:13.770 --> 00:00:19.290
So I'm actually going to remove our test stuff that we've had at this point and let's say we're testing

7
00:00:19.290 --> 00:00:21.030
to see if something is a phone number.

8
00:00:21.330 --> 00:00:22.780
So I'll have a phone number here.

9
00:00:22.920 --> 00:00:29.410
Let's see what's Derocher 8:28 that the two do do that.

10
00:00:29.790 --> 00:00:30.080
OK.

11
00:00:30.090 --> 00:00:31.490
So that's our phone number.

12
00:00:31.770 --> 00:00:33.990
And this should be review at this point.

13
00:00:34.020 --> 00:00:35.180
Fast forward.

14
00:00:35.690 --> 00:00:36.030
OK.

15
00:00:36.090 --> 00:00:41.610
So three digits space three digits optional dash 4 digits.

16
00:00:41.610 --> 00:00:48.420
Let's say that I'm working in Python and I want to write a function that takes a string and it returns

17
00:00:48.420 --> 00:00:53.850
true if it's a phone number we'll call it is phone number or returns false if it's not will we would

18
00:00:53.850 --> 00:00:55.150
use something like this.

19
00:00:55.290 --> 00:01:01.560
But the problem that we have right now this string could have a bunch of other stuff in it too but it

20
00:01:01.560 --> 00:01:03.860
still matches the phone number part.

21
00:01:04.050 --> 00:01:08.840
So if we wanted to only match something where it was exactly a phone number and nothing else.

22
00:01:09.000 --> 00:01:10.710
It starts with the phone number.

23
00:01:10.800 --> 00:01:14.390
For example we add in the carrot here.

24
00:01:14.520 --> 00:01:20.110
So we put that carrot and it means the string has to start with all of this.

25
00:01:20.280 --> 00:01:24.070
So this no longer matches if I get rid of it though it now matches.

26
00:01:24.270 --> 00:01:28.930
And the opposite to denote the end of the string.

27
00:01:29.220 --> 00:01:30.810
You can use the dollar sign.

28
00:01:31.140 --> 00:01:36.840
So if we wanted to make sure that the string was only this pattern and nothing else than the dollar

29
00:01:36.840 --> 00:01:41.270
sign there is no longer to match that because of this MSDS.

30
00:01:41.580 --> 00:01:43.820
But now it does match that.

31
00:01:43.830 --> 00:01:47.330
So these are important ones especially when we're working in Python.

32
00:01:47.460 --> 00:01:50.980
It's one thing if you just want to know if a given string contains a pattern.

33
00:01:50.980 --> 00:01:56.070
That's another if you want to know that if a given string is only that pattern it's only an email which

34
00:01:56.070 --> 00:01:57.950
you know for validating an e-mail address.

35
00:01:58.080 --> 00:02:03.510
We're going to probably send an e-mail to that address so we don't want to be looking for you know something

36
00:02:03.510 --> 00:02:08.510
like Kolta at gmail dot com buried within something else.

37
00:02:08.730 --> 00:02:11.580
We want to make sure that it's only that e-mail address.

38
00:02:11.580 --> 00:02:12.890
So these are very useful.

39
00:02:12.900 --> 00:02:14.690
The carrot and the dollar sign.

40
00:02:14.790 --> 00:02:17.820
This means the beginning this means the end.

41
00:02:17.820 --> 00:02:24.680
One other thing I'll point out is slash backslash B which is a word boundary.

42
00:02:24.990 --> 00:02:28.020
So early on in this section let me just type a sentence.

43
00:02:28.140 --> 00:02:29.350
Hello world.

44
00:02:29.430 --> 00:02:31.980
I am typing stuff.

45
00:02:32.190 --> 00:02:32.830
OK.

46
00:02:33.210 --> 00:02:39.120
If I wanted to select all the words what we saw in the beginning was that we could do something like

47
00:02:39.120 --> 00:02:43.040
this we have a word character one or more times.

48
00:02:43.530 --> 00:02:48.210
And it's hard to tell but this is like seeing each individual character and then what I did or say put

49
00:02:48.210 --> 00:02:50.630
a space before and a space afterward.

50
00:02:51.120 --> 00:02:58.470
And now this is giving us the words the groups of weird characters that have spaces on both sides.

51
00:02:58.630 --> 00:03:02.900
But that's not really what we want because these are all words as well.

52
00:03:02.910 --> 00:03:09.990
So instead of a space we can use the word boundary character backslash be at the beginning and backslash

53
00:03:10.080 --> 00:03:11.100
be at the end.

54
00:03:11.190 --> 00:03:15.770
And this will mean a space or the end of a line or the beginning of a line.

55
00:03:15.780 --> 00:03:19.870
It's called word boundaries so in this case you know we're matching hello.

56
00:03:19.890 --> 00:03:25.250
Even though the left side doesn't have a space it's a word boundary here and here.

57
00:03:25.290 --> 00:03:27.570
Same thing for world same thing for I.

58
00:03:27.570 --> 00:03:28.430
All this stuff.

59
00:03:28.500 --> 00:03:31.410
There's either a space or an end or a beginning of line.

60
00:03:31.470 --> 00:03:34.230
So that's one way of selecting words.

61
00:03:34.230 --> 00:03:38.030
If you wanted to do something like that and that's actually all I wanted to show in this video.

62
00:03:38.250 --> 00:03:39.820
Anchors and boundaries.

63
00:03:39.820 --> 00:03:42.050
These you'll see all the time in particular.
