1
00:00:00,420 --> 00:00:06,180
A Welcome Back in this video we're going to introduce one of the most powerful and unique features in

2
00:00:06,180 --> 00:00:08,470
Python list comprehension.

3
00:00:08,880 --> 00:00:14,590
The idea of comprehension actually applies to many other data structures that we'll learn about later.

4
00:00:14,700 --> 00:00:22,040
Things like dictionaries and set tuples and generators all of which we'll see later on in the course.

5
00:00:22,470 --> 00:00:24,190
So understanding them.

6
00:00:24,480 --> 00:00:29,160
You could say comprehending them and the syntax the idea is going to be really important.

7
00:00:29,160 --> 00:00:34,980
So basically it just cool shorthand syntax that allows us to generate new lists to make new lists that

8
00:00:34,980 --> 00:00:40,380
are direct copies of other lists or more often than not are tweaked versions where we could take one

9
00:00:40,380 --> 00:00:46,320
list and then generate a new one that has every number squared or every string reversed and they can

10
00:00:46,320 --> 00:00:48,040
get a lot more complex than that.

11
00:00:48,060 --> 00:00:50,380
So I'll just let the examples speak for themselves.

12
00:00:50,550 --> 00:00:53,490
But before we get there we need to start with the syntax.

13
00:00:53,880 --> 00:00:55,240
So I'm going to show you the syntax.

14
00:00:55,250 --> 00:01:01,850
It's going to look bizarre and looks like it does nothing because it's basically a bunch of blanks.

15
00:01:02,220 --> 00:01:03,660
At least in this example.

16
00:01:03,990 --> 00:01:09,610
So we start with the brackets just like we did with slice slices and there are three components.

17
00:01:09,810 --> 00:01:17,510
So we have this first variable name for and that word is always there for and then a second variable

18
00:01:17,510 --> 00:01:23,790
and that is the same as the first one and you just bear with me for a moment in and then the name of

19
00:01:24,120 --> 00:01:28,690
another list or of a range something that we could iterate through.

20
00:01:28,890 --> 00:01:37,230
So this part is kind of like for something in a list it's a for loop but then we have this first thing

21
00:01:37,320 --> 00:01:38,480
that's a bit different.

22
00:01:38,520 --> 00:01:42,740
And you know this is just impossible to talk about without looking at an example.

23
00:01:42,840 --> 00:01:44,210
So let's do that first.

24
00:01:44,300 --> 00:01:44,690
OK.

25
00:01:44,760 --> 00:01:48,250
Here I have a list called numbs.

26
00:01:48,480 --> 00:01:49,440
Very simple.

27
00:01:49,710 --> 00:02:00,000
And let's do a list comprehension of I'm going to do X times X or we could just actually let's just

28
00:02:00,000 --> 00:02:06,040
do X times 10 for x in Gnome's.

29
00:02:06,050 --> 00:02:12,710
So what this will do is for every x in NUMP So one two three are going to multiply it by 10 and put

30
00:02:12,710 --> 00:02:14,220
it in a new list.

31
00:02:14,270 --> 00:02:17,430
So we end up with 10 20 30.

32
00:02:17,470 --> 00:02:19,360
So I think this makes it a bit clearer.

33
00:02:19,540 --> 00:02:22,630
We have blank four blank blank.

34
00:02:22,930 --> 00:02:28,540
So we have a list placeholder variable for each item in that list and then some way of manipulating

35
00:02:28,840 --> 00:02:30,250
each item in the list.

36
00:02:30,250 --> 00:02:33,030
So X times 10 we could do.

37
00:02:33,040 --> 00:02:39,430
I don't know X divided by two and we get 0.5 1.0 and 1.5.

38
00:02:39,490 --> 00:02:46,270
But the rough idea is we take an existing list and output another list with different values based upon

39
00:02:46,330 --> 00:02:47,540
the first list.

40
00:02:48,010 --> 00:02:50,180
And this seems like something we could do with a loop.

41
00:02:50,380 --> 00:02:52,240
And that's because it is.

42
00:02:52,420 --> 00:02:56,040
So here's an example of doing something with a for loop.

43
00:02:56,320 --> 00:03:03,130
So if we wanted to make a new list where we take a numbers list and this new list has every number from

44
00:03:03,130 --> 00:03:05,050
the numbers list but doubled.

45
00:03:05,050 --> 00:03:12,250
We could loop through numbers and for each number there are going to double it and then append it to

46
00:03:12,250 --> 00:03:15,370
the double numbered list or doubled numbers list.

47
00:03:15,490 --> 00:03:20,830
So one at a time we multiply by two and added into this list multiply two by two we add four to the

48
00:03:20,830 --> 00:03:22,300
list three by two.

49
00:03:22,360 --> 00:03:24,810
We had six the list and we end up with this.

50
00:03:25,150 --> 00:03:29,560
But using a list comprehension we can do it in a single line.

51
00:03:29,560 --> 00:03:35,430
So we have our numbers list and then all we have to do is write array brackets or choose me list brackets.

52
00:03:35,590 --> 00:03:40,060
Numb times to four numbers in numbers.

53
00:03:40,180 --> 00:03:41,770
And Python takes care of the rest.

54
00:03:41,770 --> 00:03:45,310
It generates a new list with 2 4 6 8 and 10.

55
00:03:45,310 --> 00:03:47,070
So we can do the same thing.

56
00:03:47,110 --> 00:03:53,940
It's just a lot more concise and definitely preferable preferable just better than this example.

57
00:03:54,100 --> 00:03:55,570
So it's really helpful stuff.

58
00:03:55,570 --> 00:03:57,610
Let's look at a couple of more examples.

59
00:03:57,970 --> 00:03:59,480
So here we have a string.

60
00:03:59,890 --> 00:04:00,890
And what we're doing.

61
00:04:00,910 --> 00:04:07,180
Remember we can do a for loop over a string for each character and for each character in name we're

62
00:04:07,180 --> 00:04:10,530
going to take that character like C and uppercase it.

63
00:04:10,750 --> 00:04:12,580
So upper is a string method.

64
00:04:12,670 --> 00:04:16,530
We saw it briefly I think in rock paper scissors.

65
00:04:16,810 --> 00:04:22,150
If you watched it we also saw lowered but all it does it takes a string and converts it to uppercase.

66
00:04:22,150 --> 00:04:29,920
In this case and we end up with a list where each character is an uppercase letter from the string c

67
00:04:30,010 --> 00:04:36,520
o l t all uppercase in the second example we have a list of friends and we're taking each string in

68
00:04:36,550 --> 00:04:41,490
uppercase saying the first letter and getting back a new list of friends with their names capitalized.

69
00:04:41,680 --> 00:04:42,680
So we have friends.

70
00:04:42,700 --> 00:04:45,660
Ashley Matt and Michael we are looping through.

71
00:04:45,700 --> 00:04:54,310
So for each friend in friends take that friend take the first character and uppercase and so then we

72
00:04:54,310 --> 00:05:01,930
end up with Ashlee capital a matt capital am Michael capital M and so we end up with a list always so

73
00:05:01,930 --> 00:05:06,100
even though if we're working with a string in this case we're looping through the string.

74
00:05:06,100 --> 00:05:07,760
This is a list comprehension.

75
00:05:07,840 --> 00:05:12,310
The end result that's returned is is a list same thing down here.

76
00:05:12,610 --> 00:05:14,250
This stuff can be a bit tricky.

77
00:05:14,320 --> 00:05:15,860
So we have a couple more examples.

78
00:05:16,030 --> 00:05:20,110
Feel free to pause this at any point try things out on your own.

79
00:05:20,140 --> 00:05:25,090
It does take a little bit of getting used to but it's used pretty much everywhere in Python and in a

80
00:05:25,090 --> 00:05:28,680
lot of the big codebase is that you'll see out there open source projects.

81
00:05:28,810 --> 00:05:33,010
You definitely need to be comfortable with these if you want to use Python in a data science or game

82
00:05:33,010 --> 00:05:34,120
development web development.

83
00:05:34,120 --> 00:05:38,800
All that stuff you previously saw that we can use this comprehension to iterate over a string.

84
00:05:38,800 --> 00:05:40,890
We can do that with ranges as well.

85
00:05:40,900 --> 00:05:46,040
So here's taking a range one common six generates numbers between 1 and 5.

86
00:05:46,420 --> 00:05:51,520
And we just multiply them by 10 and we get a list with 10 20 30 40 50.

87
00:05:51,640 --> 00:05:53,170
Pretty neat neat.

88
00:05:53,170 --> 00:05:53,670
Yep.

89
00:05:53,770 --> 00:05:58,070
And this next example we're using miscomprehension in a little different way.

90
00:05:58,120 --> 00:06:03,640
We're turning values into their boolean representation using the bool function which we haven't really

91
00:06:03,640 --> 00:06:10,510
seen but we've seen as TR for string to convert to a string we've seen it to convert to an int.

92
00:06:10,510 --> 00:06:11,280
Same thing.

93
00:06:11,500 --> 00:06:17,310
So it takes in a number it doesn't take in a number it takes in a value whatever it is and it will return

94
00:06:17,320 --> 00:06:18,990
if it's truth or falsity.

95
00:06:19,000 --> 00:06:27,720
So remember that things like any anything like an empty string is inherently false.

96
00:06:27,730 --> 00:06:34,000
So if I convert that to a bool we get false but if I add a space and there are some letters it becomes

97
00:06:34,030 --> 00:06:40,360
truthy or an any number is going to be truthy except zero.

98
00:06:40,930 --> 00:06:43,970
So all we're doing here is taking this list.

99
00:06:44,120 --> 00:06:45,130
Zero.

100
00:06:45,310 --> 00:06:49,350
An empty empty list and an empty string.

101
00:06:49,360 --> 00:06:52,790
Converting them all to bools when we get false false and false.

102
00:06:53,200 --> 00:06:58,660
Not something you probably do but it's just fun to see that you can work at all sorts of data in the

103
00:06:58,670 --> 00:07:00,010
Solus comprehensions.

104
00:07:00,190 --> 00:07:06,220
And in this last example we're taking a list of numbers and converting it to a list of strings.

105
00:07:06,220 --> 00:07:11,420
So you definitely will find yourself needing to convert one data type to another in Python.

106
00:07:11,860 --> 00:07:17,410
And if you need to convert a list from one type to another list comprehension is a great way doing that

107
00:07:17,430 --> 00:07:23,270
because you don't have to loop through manually and run the string convert or string function as TR

108
00:07:23,300 --> 00:07:29,420
every single time to cast a number to a string you can have Python take care of it for you with a list

109
00:07:29,420 --> 00:07:31,130
comprehension just like this.

110
00:07:31,130 --> 00:07:37,460
So we have our events and for each name in this numbers list we're going to turn into a string.

111
00:07:37,460 --> 00:07:39,350
And our end result is the string version.

112
00:07:39,380 --> 00:07:40,590
One two three four five.

113
00:07:40,710 --> 00:07:41,200
Cool.

114
00:07:41,210 --> 00:07:43,720
So let's try a couple of these.

115
00:07:43,880 --> 00:07:45,830
I think I have colors here still.

116
00:07:46,040 --> 00:08:00,170
So we could do something like array brackets and let's do color dot upper for color in colors and we

117
00:08:00,170 --> 00:08:03,360
end up with all caps or we have names still.

118
00:08:03,530 --> 00:08:11,310
So we could do something like as tr of Nom's numb for an Nomes.

119
00:08:11,740 --> 00:08:13,450
So remember this is totally up to us.

120
00:08:13,450 --> 00:08:14,930
Call this whatever we want.

121
00:08:15,100 --> 00:08:20,010
And now we end up with the string version of things and we could even do something like this as tr of

122
00:08:20,030 --> 00:08:26,840
Nahm Plus the string hello for name and names and we end up with one hello to hello hello.

123
00:08:27,340 --> 00:08:27,640
OK.

124
00:08:27,640 --> 00:08:29,670
So hopefully you can see how flexible these are.

125
00:08:29,830 --> 00:08:34,030
I'm going to stop here but I'm actually going to continue talking about this comprehension in the next

126
00:08:34,030 --> 00:08:38,710
video where we'll see how to use miscomprehension with conditional logic built in.
