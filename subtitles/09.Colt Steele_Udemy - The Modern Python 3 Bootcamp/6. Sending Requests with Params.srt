1
00:00:00,300 --> 00:00:00,610
Pay.

2
00:00:00,630 --> 00:00:01,380
Welcome back.

3
00:00:01,380 --> 00:00:04,410
So we're continuing on with HTP requests.

4
00:00:04,410 --> 00:00:08,160
And in this video we're going to talk about something called a queery string.

5
00:00:08,160 --> 00:00:09,390
So what is a query string.

6
00:00:09,390 --> 00:00:11,070
Let's start there.

7
00:00:11,070 --> 00:00:15,790
It's a way to pass data to a server as part of a GET request.

8
00:00:15,840 --> 00:00:22,650
It looks like this after our base you are l there's a slash question mark and then key value pairs.

9
00:00:22,690 --> 00:00:23,770
This should look well.

10
00:00:23,820 --> 00:00:28,350
It's a little similar to a Python dictionary in the sense that it's key value pairs.

11
00:00:28,350 --> 00:00:30,980
We use an equal sign here and we separate them with.

12
00:00:31,010 --> 00:00:37,410
And that the idea is this is a way to send data to a server to give more information about a particular

13
00:00:37,410 --> 00:00:38,340
request.

14
00:00:38,400 --> 00:00:44,610
For example when I go to Google and I do a search for Martin does one of my favorite animals American

15
00:00:44,610 --> 00:00:47,730
Martin here's what it looks like by the way.

16
00:00:47,730 --> 00:00:51,660
Very adorable but also vicious predator sharp teeth.

17
00:00:51,840 --> 00:00:55,320
Anyway if you notice that you are well back here I'll refresh the page again.

18
00:00:55,320 --> 00:00:57,860
I'll actually copy it to sublime so we can see it better.

19
00:00:58,140 --> 00:00:58,380
OK.

20
00:00:58,380 --> 00:00:59,110
Here it is.

21
00:00:59,130 --> 00:01:00,240
It's pretty massive.

22
00:01:00,240 --> 00:01:06,890
We have our base you are Al slash search it ends right there and then question mark and then there's

23
00:01:06,890 --> 00:01:08,560
a bunch of these key value pairs.

24
00:01:08,570 --> 00:01:10,540
So here's the first one let's separate them out.

25
00:01:10,670 --> 00:01:13,600
Here's one we have another one.

26
00:01:13,730 --> 00:01:16,150
I'll delete that and signed joining them together.

27
00:01:16,640 --> 00:01:20,030
Then we have this here.

28
00:01:20,100 --> 00:01:24,200
We got another one right here and I don't know what most of these do.

29
00:01:24,410 --> 00:01:31,160
So a lot of this is you know Google's internal stuff but the two that I care about here we have.

30
00:01:31,280 --> 00:01:34,340
Q which is usually for queery and then.

31
00:01:34,410 --> 00:01:38,110
Oh Q Which probably stands for original query.

32
00:01:38,150 --> 00:01:42,220
So regardless of what these all do a lot of this is Google magic.

33
00:01:42,290 --> 00:01:47,630
The key point I want to make is that this is additional information that is being sent as part of the

34
00:01:47,630 --> 00:01:50,980
request and we can have as many key value pairs as we want.

35
00:01:51,050 --> 00:01:56,180
I think there is an upper limit about how long they can be but we can pass whatever info we want and

36
00:01:56,180 --> 00:02:03,770
we could even at our own query string like ice cream equals vanilla if we wanted to and it will be sent

37
00:02:03,770 --> 00:02:06,390
as part of the request but nothing will happen.

38
00:02:06,560 --> 00:02:07,660
Nothing happens at all.

39
00:02:07,750 --> 00:02:08,980
And let's try doing something like.

40
00:02:08,990 --> 00:02:11,070
Q equals volcano.

41
00:02:11,240 --> 00:02:12,630
You can see what we actually get.

42
00:02:12,650 --> 00:02:17,660
Kind of interesting takes us to a page where volcano is filled in to the search form but it actually

43
00:02:17,660 --> 00:02:18,640
doesn't send it.

44
00:02:18,890 --> 00:02:21,110
So that's just the way that Google is set up.

45
00:02:21,140 --> 00:02:22,410
Anyway we're getting sidetracked.

46
00:02:22,430 --> 00:02:26,530
All I want to focus on is that the query string it's a way for us to send additional information.

47
00:02:26,540 --> 00:02:28,070
So why does this matter to us.

48
00:02:28,250 --> 00:02:34,250
Well a lot of times we'll make applications that allow a user to provide some information about what

49
00:02:34,250 --> 00:02:35,830
they want to search for for example.

50
00:02:35,920 --> 00:02:41,100
So let me show you an example of that I have using the dad jokes site.

51
00:02:41,630 --> 00:02:49,790
I have a simple app that will make where I can actually provide a joke topic like dog.

52
00:02:50,000 --> 00:02:55,830
And then it will go send a request looking for dumb dog jokes and it says OK I've got eight jokes.

53
00:02:55,830 --> 00:02:56,910
Here's one.

54
00:02:56,910 --> 00:02:58,130
My dog has no nose.

55
00:02:58,140 --> 00:02:59,860
How does the smell awful.

56
00:02:59,880 --> 00:03:00,940
Very funny.

57
00:03:01,080 --> 00:03:03,380
Or I could specify a different query.

58
00:03:03,390 --> 00:03:09,360
How about car archaeology really is a career in ruins.

59
00:03:09,400 --> 00:03:14,770
So there's search the way it works is it just looks for no car anywhere.

60
00:03:14,800 --> 00:03:15,930
Instead of the text.

61
00:03:16,060 --> 00:03:19,270
So in this case it was career but that is not something that we control.

62
00:03:19,420 --> 00:03:25,270
But what we're going to focus on is how we can take this data here and what we do is we pass it into

63
00:03:25,270 --> 00:03:31,280
a query string in the request and back on the I Can Has dad joke dot com web page.

64
00:03:31,480 --> 00:03:37,790
If we go to will if we just try searching first thing you should notice that you are well has changed.

65
00:03:37,790 --> 00:03:43,120
It's now I can educate our com slash search which gives us this page.

66
00:03:43,240 --> 00:03:50,330
But now let's do a search for oh I don't know Sister see.

67
00:03:50,460 --> 00:03:51,370
Nope no jokes.

68
00:03:51,380 --> 00:03:51,670
OK.

69
00:03:51,680 --> 00:03:55,750
How about rose flower.

70
00:03:56,270 --> 00:03:56,940
OK.

71
00:03:57,170 --> 00:04:03,920
Don't buy don't buy flowers at a monastery because only you can prevent florist friers Oh boy that's

72
00:04:03,920 --> 00:04:06,290
really bad anyway.

73
00:04:06,590 --> 00:04:08,520
Notice up here are you.

74
00:04:08,600 --> 00:04:14,520
Now contains a query string key value pair a single key value pair term equals flour.

75
00:04:14,660 --> 00:04:18,300
So this is how we actually send a search request.

76
00:04:18,440 --> 00:04:25,460
This form is just going to generate this request so if I type something else in here like fruit.

77
00:04:25,840 --> 00:04:26,580
There you go.

78
00:04:26,600 --> 00:04:29,970
You can see the request that was sent had term equal to fruit.

79
00:04:30,080 --> 00:04:34,870
So if I send a request instead to term equals cat.

80
00:04:35,010 --> 00:04:36,740
Now we get the cat results.

81
00:04:36,870 --> 00:04:39,270
So this is a mechanism by which the search works.

82
00:04:39,270 --> 00:04:40,620
We send a request to.

83
00:04:40,620 --> 00:04:45,960
I can ask dad joke dot com slash search question mark means a query string and then we specify the information

84
00:04:46,390 --> 00:04:49,420
and to do this in python rather than in the browser.

85
00:04:49,770 --> 00:04:52,430
We could just send a request just like this.

86
00:04:52,450 --> 00:04:59,940
You know you are l.com and then send our key value pairs already hard coded into the URL which has to

87
00:04:59,940 --> 00:05:06,120
be a string and that's fine but there's a preferred way which is to do it by passing in what are known

88
00:05:06,120 --> 00:05:06,770
as Paramo.

89
00:05:06,780 --> 00:05:13,420
It's just how the requests get method is set up and we can pass in our key value pairs like this and

90
00:05:13,440 --> 00:05:17,500
this way we could use variables we could have a dictionary that contained our harams.

91
00:05:17,550 --> 00:05:23,270
It's easier than doing it this way where we have to actually you know interpolate the values in here

92
00:05:23,280 --> 00:05:24,910
we can just use a dictionary.

93
00:05:25,020 --> 00:05:33,260
So let's let's try and just make a file called harams that Y and the first thing we'll do is just copy

94
00:05:33,260 --> 00:05:34,520
over what we've already done

95
00:05:37,490 --> 00:05:38,440
just like this.

96
00:05:38,510 --> 00:05:40,250
So we have our import requests we have.

97
00:05:40,250 --> 00:05:46,820
You are well and I wouldn't change it to now be slash search because that's where the search end point

98
00:05:46,820 --> 00:05:47,450
is.

99
00:05:47,600 --> 00:05:52,370
We could send a query string to just I can has that joke outcome but it won't actually do the search

100
00:05:52,430 --> 00:05:55,850
unless we tell it we're looking for Slash search in particular.

101
00:05:56,120 --> 00:05:59,610
Then we're going to do the same request I get this time.

102
00:05:59,630 --> 00:06:04,360
I'm just going to indent things like this so we have our headers.

103
00:06:04,740 --> 00:06:11,910
But that at the bottom and then after our headers we can also provide harams and harams we can just

104
00:06:11,910 --> 00:06:16,350
encode whatever information we want and the way that this is set up is that it is looking for something

105
00:06:16,350 --> 00:06:17,260
called term.

106
00:06:17,310 --> 00:06:19,390
We can go to the API documentation.

107
00:06:19,560 --> 00:06:22,540
Scroll down until we find search somewhere.

108
00:06:22,540 --> 00:06:23,350
There we go.

109
00:06:23,370 --> 00:06:27,420
Search for dad jokes and pulser all zoom in.

110
00:06:27,570 --> 00:06:30,120
There's a couple of things we can specify.

111
00:06:30,120 --> 00:06:37,410
Page which is the page of results to fetch which defaults to 1 so if we get 20 or 50 results they will

112
00:06:37,410 --> 00:06:42,050
be passionated the limit so this will limit the number of results we get.

113
00:06:42,150 --> 00:06:47,970
So I could specify only want one result and the term which is the most important part that's what we're

114
00:06:47,970 --> 00:06:49,000
searching for.

115
00:06:49,350 --> 00:06:52,350
So let's try just doing sosh search.

116
00:06:52,740 --> 00:06:53,700
Question mark.

117
00:06:53,700 --> 00:06:55,560
Term equals.

118
00:06:55,560 --> 00:06:58,640
We did Cat which gave us 5 results.

119
00:06:58,890 --> 00:07:04,550
But now if I do ampersand so and and then it was the limit equals one.

120
00:07:04,590 --> 00:07:08,320
I only get one back limit equals 2 and so on.

121
00:07:08,580 --> 00:07:11,490
So hopefully now you can see some of the power of a query string.

122
00:07:11,490 --> 00:07:16,990
This is how we can specify details about what we want now as a human we earn.

123
00:07:17,010 --> 00:07:17,890
Typical web user.

124
00:07:17,910 --> 00:07:20,540
We're not ever really editing this up here.

125
00:07:20,580 --> 00:07:23,270
Usually we'll click a button that does that for us right.

126
00:07:23,290 --> 00:07:29,770
Like a search for dog here and it makes a request and this form puts it into the query string.

127
00:07:30,090 --> 00:07:34,630
But if we're doing it in Python as programmers we have to assemble them manually.

128
00:07:34,890 --> 00:07:37,840
So we'll send a request to slash search slash search.

129
00:07:37,950 --> 00:07:39,710
And let's just start by hard coding in.

130
00:07:39,710 --> 00:07:46,700
Term is going to be let's do fruit's again just like that.

131
00:07:46,710 --> 00:07:49,180
Actually that's too bad because there was multiple results.

132
00:07:49,520 --> 00:07:56,400
OK so just to make this clear by doing this it's the exact same thing at the end of the day as me doing

133
00:07:56,400 --> 00:07:59,300
this term equals cat.

134
00:07:59,340 --> 00:08:04,290
The thing is that this is a more programmatic more Python way of doing it because this is easier to

135
00:08:04,290 --> 00:08:05,210
change.

136
00:08:05,220 --> 00:08:07,060
I could easily have this be a variable.

137
00:08:07,080 --> 00:08:10,740
Like user input which is what will do eventually.

138
00:08:10,740 --> 00:08:17,010
This is a little harder because if I wanted this to be a variable I could concatenated or use an F string

139
00:08:17,010 --> 00:08:17,820
or something.

140
00:08:18,000 --> 00:08:22,430
But rather than that I'm just going to leave it at this and then this.

141
00:08:22,490 --> 00:08:27,810
Requests a package is going to take care of adding the query string in to the request so I'm going to

142
00:08:27,810 --> 00:08:30,440
change this back to cats or cat.

143
00:08:30,830 --> 00:08:37,470
OK now are doing responsa Jaison and then rather than printing data joke because our response might

144
00:08:37,470 --> 00:08:38,540
look different.

145
00:08:38,850 --> 00:08:46,450
Let's comment this out and let's just print data OK this file is called Paramjit up.

146
00:08:46,460 --> 00:08:46,680
Why.

147
00:08:46,680 --> 00:08:47,520
Let's test it.

148
00:08:47,650 --> 00:08:50,640
So that's Python 3 harams.

149
00:08:50,920 --> 00:08:52,370
And look at the results we get back.

150
00:08:52,450 --> 00:08:56,620
So I'm going to copy this over pasted in so we can dissect it.

151
00:08:56,620 --> 00:08:58,450
And that did not go how I thought.

152
00:08:58,780 --> 00:09:02,140
I was hoping that it would go on multiple lines.

153
00:09:02,200 --> 00:09:08,950
So as you can see we have things like current pages one limit was set to 20 by default next page previous

154
00:09:08,950 --> 00:09:10,010
page we don't care about that.

155
00:09:10,120 --> 00:09:13,840
Well we care about is results instead of results.

156
00:09:13,840 --> 00:09:14,790
We have a list.

157
00:09:14,860 --> 00:09:20,480
So let's start by just paring that down and printing data results.

158
00:09:20,710 --> 00:09:25,950
And I'm going to get rid of this line because I will break everything.

159
00:09:26,000 --> 00:09:27,470
Now here's our results.

160
00:09:27,470 --> 00:09:32,760
It's a list and it's a list of dictionaries where each joke has an ID.

161
00:09:32,810 --> 00:09:37,940
It has the actual joke and that's it then an ID and a joke an ID and a joke.

162
00:09:37,940 --> 00:09:42,590
So one more thing I'll show you is we can just pass in another key value pair.

163
00:09:42,770 --> 00:09:46,640
So we saw how to do this with limit but set the limit to 1.

164
00:09:46,640 --> 00:09:48,590
So now we should only get one joke back.

165
00:09:50,040 --> 00:09:51,770
And that's exactly what happens.

166
00:09:51,810 --> 00:09:52,990
Put the cat out.

167
00:09:53,010 --> 00:09:54,740
I didn't realize it was on fire.

168
00:09:54,750 --> 00:09:55,610
Very funny.

169
00:09:55,620 --> 00:09:57,110
So leave the video off here.

170
00:09:57,300 --> 00:10:03,780
We've seen how to use harams which is just how this requests get method is set up we can specify key

171
00:10:03,780 --> 00:10:05,550
value pairs at the end of the day.

172
00:10:05,550 --> 00:10:12,850
This is exactly the same as UFS as us manually saying term Rekos cat and limit equals one.

173
00:10:12,870 --> 00:10:15,610
It's just an easier or more programmatic way of doing it.

174
00:10:15,900 --> 00:10:21,120
And in the next video we're going to make a little application that asks the user for what they want

175
00:10:21,120 --> 00:10:25,950
to search for and we can also ask them for a limit how many jokes they want and we can specify both

176
00:10:25,950 --> 00:10:27,210
of them in Paramus.

177
00:10:27,270 --> 00:10:28,350
So that's coming up next.
