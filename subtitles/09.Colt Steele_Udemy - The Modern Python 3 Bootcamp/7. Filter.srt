1
00:00:00,210 --> 00:00:01,170
Welcome back.

2
00:00:01,170 --> 00:00:06,820
Next up we're going to see another built in function similar to math but this one is called Filter.

3
00:00:06,940 --> 00:00:13,230
So just like with map where we can pass in the lambda and then an iterable collection filter allows

4
00:00:13,230 --> 00:00:15,700
the same thing but it works in a different way.

5
00:00:15,720 --> 00:00:22,080
So filter does what it sounds like it allows us to take a list or a collection a tuple and filter out

6
00:00:22,380 --> 00:00:26,780
particular items that we want based off of an expression or condition.

7
00:00:27,150 --> 00:00:33,030
So here's an example where we have a list of numbers from 1 to 4 and the results of running this filter

8
00:00:33,120 --> 00:00:36,810
is that we're pulling out the evens and putting them into a new list.

9
00:00:37,570 --> 00:00:44,280
And the way we we do it is we use filter and then our Lamda which is going to return true or false.

10
00:00:44,290 --> 00:00:50,980
So anytime we use filter whether we're using lambda or named function we've defined it needs to return

11
00:00:50,980 --> 00:00:54,530
true or false needs to be a boolean expression in that function.

12
00:00:54,880 --> 00:00:59,970
And that true or false is going to be how filter decides what to put in the new list.

13
00:00:59,980 --> 00:01:09,430
So as you can see here this expression for every x if x is not even if it's just x mod two equals zero

14
00:01:09,610 --> 00:01:13,370
that itself will be true or false if that's true.

15
00:01:13,450 --> 00:01:17,060
Filter takes whatever value you like to and added to the list.

16
00:01:17,080 --> 00:01:20,000
But if we're on three for example this is false.

17
00:01:20,020 --> 00:01:22,790
It's not even the divisible by 2.

18
00:01:22,930 --> 00:01:25,510
So it's not added It's rejected and ignored.

19
00:01:25,510 --> 00:01:27,520
So let's do a quick example.

20
00:01:27,520 --> 00:01:34,570
I have a list of names here called names and let's say that I want to make a new list with only the

21
00:01:34,600 --> 00:01:36,700
names that start with a letter a.

22
00:01:36,730 --> 00:01:39,780
So Austin Anthony and downhill are angel.

23
00:01:40,180 --> 00:01:45,630
And to do that we could use filter so we would do make a new variable.

24
00:01:45,700 --> 00:01:53,890
Well let's call it a names equals and we can start with just filter and then the lambda we want I always

25
00:01:53,890 --> 00:02:00,700
do the D first which is wrong it's lam does not land BA and it will just take a name you can call it

26
00:02:00,700 --> 00:02:01,450
name.

27
00:02:01,600 --> 00:02:02,860
It's ok in my opinion.

28
00:02:02,860 --> 00:02:09,040
In my short single letter parameters because the idea is that it's a single line it's not ever going

29
00:02:09,040 --> 00:02:10,160
to be used again.

30
00:02:10,180 --> 00:02:19,060
So instead of doing name I'm fine with an and then we'll check if the first character and zero equals

31
00:02:20,560 --> 00:02:21,240
a.

32
00:02:21,340 --> 00:02:22,710
Just like that.

33
00:02:22,720 --> 00:02:25,320
So this returns true or false.

34
00:02:25,660 --> 00:02:29,180
And then we'll do that on every name and names.

35
00:02:29,230 --> 00:02:35,090
So just to reiterate I have one too many Kolins over here may have a filter.

36
00:02:35,170 --> 00:02:36,870
This will return true or false.

37
00:02:36,890 --> 00:02:41,500
This lambda for every and or name in names.

38
00:02:41,500 --> 00:02:42,540
Check the first character.

39
00:02:42,550 --> 00:02:43,920
Is it equal to a.

40
00:02:44,170 --> 00:02:46,260
If that's true add it to the new list.

41
00:02:46,270 --> 00:02:52,320
If it's not ignore it and if we look at a name just like with math we get this filter object instead

42
00:02:52,330 --> 00:02:53,350
of a map object.

43
00:02:53,470 --> 00:03:00,560
But if we turn it into a list you can see we get Austin Anthony unhealth.

44
00:03:00,920 --> 00:03:03,450
So hopefully you can see how this is helpful.

45
00:03:03,650 --> 00:03:07,130
Yes we could still use this comprehensions so I'm going to talk about that.

46
00:03:07,310 --> 00:03:12,740
But ignoring that fact there are lots of times you might want to extract certain things from a list

47
00:03:12,740 --> 00:03:14,010
based off a condition.

48
00:03:14,060 --> 00:03:14,780
And what do you know.

49
00:03:14,780 --> 00:03:16,750
I have a little demonstration ready.

50
00:03:16,820 --> 00:03:18,650
So here is a list of users.

51
00:03:18,740 --> 00:03:25,070
Let's imagine I'm running a very simple version of Twitter and I have people who are active and people

52
00:03:25,070 --> 00:03:27,650
who are inactive in the way I can tell is.

53
00:03:27,860 --> 00:03:33,760
So there's a user name for each person Samuel and then tweets is a key and the value is a list.

54
00:03:33,800 --> 00:03:35,390
So Samuel has two tweets.

55
00:03:35,450 --> 00:03:36,080
I love cake.

56
00:03:36,080 --> 00:03:36,790
I love pie.

57
00:03:36,800 --> 00:03:39,140
He just is really into pastries.

58
00:03:39,290 --> 00:03:45,220
But then we have someone like Jeff who has no tweets So let's say I work at this company and my job

59
00:03:45,230 --> 00:03:51,740
my task is to reach out to all of the users who have never tweeted you know do some sort of annoying

60
00:03:51,740 --> 00:03:55,350
thing like hey we notice you signed up but you never sent your first tweet.

61
00:03:55,350 --> 00:03:57,840
Like here's an easy way to send your first tweet.

62
00:03:57,920 --> 00:03:59,260
You've probably seen something like that.

63
00:03:59,270 --> 00:04:02,090
Maybe not a tweet but from some other company.

64
00:04:02,420 --> 00:04:03,060
So let's do that.

65
00:04:03,080 --> 00:04:08,730
Let's pull out all of the inactive users so I can make a variable called the inactive users.

66
00:04:09,560 --> 00:04:14,810
And then I'll set it to filter and what is the filter we want to do.

67
00:04:14,830 --> 00:04:16,570
What's the true or false condition.

68
00:04:16,670 --> 00:04:19,600
Well for every item in this list.

69
00:04:20,030 --> 00:04:22,450
So let's start there.

70
00:04:22,490 --> 00:04:23,750
We're going to pass in users.

71
00:04:23,810 --> 00:04:29,170
Now for every user We're going to check if the tweets property in that dictionary because each user

72
00:04:29,170 --> 00:04:35,590
has this whole dictionary going to check if their tweets property has a length that equal to zero.

73
00:04:35,600 --> 00:04:37,190
So let's test it out.

74
00:04:37,340 --> 00:04:41,290
I'm going to show you one way of doing it first so we could do your LAMDA.

75
00:04:41,660 --> 00:04:52,020
And I'll just call each user you and then what check is you tweets that's going to just give us this

76
00:04:52,020 --> 00:04:58,840
list and we could check the length of your tweets to see if it's equal to zero.

77
00:04:59,500 --> 00:05:04,650
This is kind of a lot to take in if you're still shaky with this but let's just walk through it.

78
00:05:04,650 --> 00:05:11,360
So for each user you is the temporary variable representing this first one here.

79
00:05:11,370 --> 00:05:18,480
All right and we're checking you tweets tweets gives us this list and then doing the length of that

80
00:05:18,630 --> 00:05:22,610
which would be two two is not equal to zero so that would be false.

81
00:05:22,620 --> 00:05:29,830
So it is not added to the new list but Jeff his tweets the list the length of it is zero.

82
00:05:29,850 --> 00:05:36,290
So we get zero equals zero which is then going to add him to our end result filter list.

83
00:05:36,660 --> 00:05:36,950
OK.

84
00:05:36,990 --> 00:05:39,300
So am I missing any Perens.

85
00:05:39,390 --> 00:05:42,010
Looks good but I'm going to turn it into a list.

86
00:05:42,120 --> 00:05:44,370
So we get this extra long thing.

87
00:05:44,460 --> 00:05:46,800
And then let's just print inactive users

88
00:05:51,070 --> 00:05:58,460
and we get Jeff who has zero tweets Bob 1 2 3 0 tweets and guitar gal who has your tweets.

89
00:05:58,720 --> 00:05:59,200
OK.

90
00:05:59,350 --> 00:06:02,280
So there's a couple of modifications we could make.

91
00:06:02,500 --> 00:06:07,150
We could take advantage of the fact that an empty list is inherently falsie.

92
00:06:07,210 --> 00:06:13,910
Remember that values like an empty list an empty string and zero are inherently falsie.

93
00:06:13,960 --> 00:06:16,840
So I don't even have to check the length of anything.

94
00:06:17,530 --> 00:06:19,550
I don't have to check if it's equal to zero.

95
00:06:19,900 --> 00:06:28,720
If I do this right now you tweets is going to return true for every list or for every user except the

96
00:06:28,720 --> 00:06:31,360
ones that I want so I'll actually get the opposite.

97
00:06:32,030 --> 00:06:37,980
Let me just demonstrate that I get only the users who are active.

98
00:06:38,480 --> 00:06:39,700
So I can negate that.

99
00:06:39,790 --> 00:06:42,030
It's just not huge.

100
00:06:42,200 --> 00:06:47,550
So huge tweets is going to return either a list or an empty list.

101
00:06:47,630 --> 00:06:49,910
And if it's an empty list that's false.

102
00:06:49,910 --> 00:06:53,410
So then we'd be saying not false which gives us true.

103
00:06:53,870 --> 00:06:56,810
Let's verify there we go.

104
00:06:56,820 --> 00:06:58,970
We're only getting our empty tweets.

105
00:06:58,980 --> 00:07:04,060
People who have never tweeted next I'm going to show how we can combine filter and map.

106
00:07:04,110 --> 00:07:11,620
So here's a list of names Lassie colds and resti And suppose you want to make a new list with the string.

107
00:07:11,730 --> 00:07:17,330
Instructor is Plus you know Lassie and colds and resti So your instructor is last year's circulars colt

108
00:07:17,700 --> 00:07:22,930
but only if the value is less than five characters.

109
00:07:22,950 --> 00:07:24,790
This is what that would look like.

110
00:07:24,810 --> 00:07:30,720
It's kind of intense to look at it but what we're doing is we're running map where map is going to take

111
00:07:30,960 --> 00:07:34,710
each name and return the string.

112
00:07:34,710 --> 00:07:38,750
Your instructor is name but what collection is it running it on.

113
00:07:38,820 --> 00:07:41,820
Well that itself is a filter on names.

114
00:07:41,940 --> 00:07:47,790
So this is going to run first and it's going to make a list where we only have the names who are shorter

115
00:07:47,790 --> 00:07:51,490
than five characters so that's only a list containing cold.

116
00:07:51,630 --> 00:07:57,840
And then we're going to run this map where we make a new list where we map your instructor is and that's

117
00:07:57,840 --> 00:07:59,370
how we get your instructor is called.

118
00:07:59,580 --> 00:08:01,040
I know it's kind of intense.

119
00:08:01,050 --> 00:08:07,530
So back over here with a more practical example rather than just collecting our inactive users let's

120
00:08:07,530 --> 00:08:13,200
say we only want to collect the usernames in our inact inactive users we don't want the entire thing

121
00:08:13,200 --> 00:08:14,270
like this.

122
00:08:14,490 --> 00:08:17,110
We can actually use Map to do that.

123
00:08:17,130 --> 00:08:24,240
So I'm going to comment this out but I'm going to keep our filter like this but then I'm going to write

124
00:08:24,240 --> 00:08:25,080
a map.

125
00:08:25,350 --> 00:08:28,540
So we're going to have a map where all we want to do.

126
00:08:28,590 --> 00:08:36,340
So we have a lambda and for each user We're just going to want the user bracket user name.

127
00:08:36,600 --> 00:08:42,460
So this is a way to make a list where we're taking an entire user and only returning the user name.

128
00:08:42,660 --> 00:08:43,410
OK.

129
00:08:43,740 --> 00:08:49,530
And just to be extra fancy we could do that upper for no reason what collection are we going to run

130
00:08:49,530 --> 00:08:50,330
that on.

131
00:08:50,670 --> 00:08:54,820
Well if we just ran it on users it would do it for every single one in there.

132
00:08:54,930 --> 00:08:59,900
But if we only want the inactive users we can filter first.

133
00:09:00,030 --> 00:09:03,620
So on a single line it looks kind of insane.

134
00:09:03,900 --> 00:09:10,060
So I'm going to indented like this and we're almost there except remember math doesn't return a list.

135
00:09:10,230 --> 00:09:14,220
So we need to then turn this entire thing into a list.

136
00:09:14,280 --> 00:09:14,940
It's crazy.

137
00:09:15,000 --> 00:09:20,910
I hope I haven't lost you but all that we're doing here is first filtering out the active users and

138
00:09:20,910 --> 00:09:23,420
only getting the inactive ones which we've already done.

139
00:09:23,640 --> 00:09:25,870
But we're passing that in to map.

140
00:09:25,890 --> 00:09:31,230
So map is building on top of this it's taking that list of inactive users and for each one adding it

141
00:09:31,230 --> 00:09:34,980
to a list but only adding the username upper cased.

142
00:09:35,540 --> 00:09:36,130
OK.

143
00:09:36,130 --> 00:09:42,480
And let's just say that a variable called user names and then that Sprint user names the moment of truth

144
00:09:42,940 --> 00:09:43,750
there go.

145
00:09:43,800 --> 00:09:47,310
These are our three inactive usernames all capitalized.

146
00:09:47,440 --> 00:09:48,840
A sigh of relief.

147
00:09:48,870 --> 00:09:49,750
We're done with that.

148
00:09:49,890 --> 00:09:55,230
So now the question that we're finally going to answer is What about miscomprehension of why complicate

149
00:09:55,230 --> 00:09:57,990
things if we could just do a list comprehension.

150
00:09:57,990 --> 00:10:05,730
For example this previous example of returning a list with the string your instructor is and then the

151
00:10:05,730 --> 00:10:09,890
name but only four names that are less than five characters.

152
00:10:10,260 --> 00:10:13,610
We could do that with a single list comprehension like this.

153
00:10:13,610 --> 00:10:14,170
Right.

154
00:10:14,260 --> 00:10:20,750
Or we do the string for name in names if length is less than five.

155
00:10:20,960 --> 00:10:23,470
And that is way better in my opinion.

156
00:10:23,630 --> 00:10:29,150
And pretty much everyone agrees this sort of syntax a list comprehension is the bread and butter of

157
00:10:29,150 --> 00:10:29,960
Python.

158
00:10:30,200 --> 00:10:37,580
It's what almost everybody would prefer to use but it's important that you understand that these exist

159
00:10:37,610 --> 00:10:40,750
things like map and filter that lambdas are around.

160
00:10:40,880 --> 00:10:46,910
Basically in this case for just an educational context it's something that you need to know about when

161
00:10:46,910 --> 00:10:49,200
you move on to bigger and better things.

162
00:10:49,250 --> 00:10:54,680
You might see one on a project you're working on the library of the package you download might require

163
00:10:54,680 --> 00:10:55,710
you to use one.

164
00:10:55,930 --> 00:10:59,800
Well it wouldn't require you to but it might have it in the documentation or something.

165
00:10:59,930 --> 00:11:05,560
But if you can use this comprehension to do the same thing like we can here then we should.

166
00:11:05,660 --> 00:11:07,700
But you know earlier when we had this button.

167
00:11:07,700 --> 00:11:10,090
This is not something we could do with less comprehension.

168
00:11:10,100 --> 00:11:11,570
We need a lambda.

169
00:11:11,570 --> 00:11:15,040
So all of this stuff I've been showing you map and filter.

170
00:11:15,290 --> 00:11:19,910
It's not something you're probably going to use very much but it's good to know it exists.

171
00:11:19,970 --> 00:11:25,910
So don't hate me for teaching it but let me just show you how we could change this over like if we just

172
00:11:25,910 --> 00:11:32,450
wanted to do our inactive users in a single miscomprehension all we have to do is for user end users

173
00:11:34,370 --> 00:11:36,460
will just do user for user and users.

174
00:11:36,620 --> 00:11:46,060
If and then we just do user tweets or we can say if not user tweets just like that we don't have to

175
00:11:46,060 --> 00:11:47,590
turn it into a list right.

176
00:11:47,590 --> 00:11:48,550
It's already going to be list.

177
00:11:48,550 --> 00:11:51,360
It's my opinion so much nicer than this.

178
00:11:51,370 --> 00:11:56,500
This is what you would end up writing know very something very similar if you're using javascript but

179
00:11:56,500 --> 00:12:02,600
Python has these lovely beautiful expressions those comprehensions and I could just save this too.

180
00:12:02,630 --> 00:12:04,720
I'll call it an active users to

181
00:12:07,600 --> 00:12:13,300
and then just print inactive users to comments everything else out.

182
00:12:13,400 --> 00:12:19,730
And if I run it now there are inactive users and to improve upon this earlier or the second example

183
00:12:19,820 --> 00:12:27,530
where we use the filter and a list I could do the same thing where I just do user user name.

184
00:12:27,680 --> 00:12:29,010
Upper.

185
00:12:29,870 --> 00:12:34,800
And yeah it's kind of a long line but I think this is so much better than all of this here.

186
00:12:34,820 --> 00:12:38,770
So let's try printing that and we get the same result.

187
00:12:38,890 --> 00:12:40,640
OK and and titted this a bit.

188
00:12:40,670 --> 00:12:46,520
So here's the version to extract the inactive users using filter and the lammed up.

189
00:12:46,610 --> 00:12:49,060
Here it is using miscomprehension.

190
00:12:49,250 --> 00:12:54,430
We don't have to convert it to just get rid of that printer as well here.

191
00:12:54,710 --> 00:12:58,590
The only thing I guess I should update this in active users.

192
00:12:58,670 --> 00:13:01,600
Let's go with user names instead.

193
00:13:02,180 --> 00:13:04,760
If you're just looking at this code usernames too.

194
00:13:05,120 --> 00:13:12,440
So here is the monster combining map and filter to extract the usernames and uppercase them only of

195
00:13:12,470 --> 00:13:13,880
the inactive users.

196
00:13:13,930 --> 00:13:16,600
And here's the exact same thing with a list comprehension.

197
00:13:16,750 --> 00:13:22,730
So the moral of all of this is one I just needed to show something that used to Lamda that we could

198
00:13:22,790 --> 00:13:28,580
wrap our heads around to you might see something like this you might see it around or if you're coming

199
00:13:28,580 --> 00:13:33,680
from a language like javascript this might feel more natural but this is the python way and this is

200
00:13:33,680 --> 00:13:36,440
what you'll see by far more more often.

201
00:13:36,560 --> 00:13:38,360
So that wraps it up for now.

202
00:13:38,360 --> 00:13:42,380
Now we're going to take a look at a bunch of other built in functions that we don't have to worry about

203
00:13:42,380 --> 00:13:43,640
lambdas for.

204
00:13:43,790 --> 00:13:47,810
It will be a breath of fresh air after this nightmare that this syntax is.
