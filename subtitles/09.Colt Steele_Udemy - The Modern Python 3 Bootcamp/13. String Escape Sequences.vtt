WEBVTT
1
00:00:00.300 --> 00:00:00.680
All right.

2
00:00:00.680 --> 00:00:01.420
Welcome back.

3
00:00:01.620 --> 00:00:07.320
So we're pushing on new strings and we're going to talk about this weird little kind of quirky niche

4
00:00:07.320 --> 00:00:10.830
topic about strings called escape characters.

5
00:00:10.830 --> 00:00:12.980
I've also heard them called escape sequences.

6
00:00:13.020 --> 00:00:18.320
I think officially on the docks are called sequences but the idea here is that instead of strings instead

7
00:00:18.330 --> 00:00:24.840
of quotes we have special sequences we can add which will be transformed or interpreted differently

8
00:00:25.020 --> 00:00:27.520
by Python to do something special.

9
00:00:27.540 --> 00:00:31.830
So the classic example is to add a return instead of a string.

10
00:00:32.010 --> 00:00:39.480
So if we just tried to make a variable with the return in it like I don't know let's say new line equals

11
00:00:39.660 --> 00:00:43.980
hello and then I want to return in there if I just hit enter.

12
00:00:44.070 --> 00:00:46.670
It's too early and Python doesn't know what to do.

13
00:00:46.770 --> 00:00:47.820
And it freaks out.

14
00:00:47.880 --> 00:00:49.130
So that's not valid.

15
00:00:49.140 --> 00:00:53.880
So we really need something like this that we could add in please add new line here pretty please.

16
00:00:53.880 --> 00:00:55.610
But hopefully something shorter.

17
00:00:55.710 --> 00:00:57.340
And obviously that doesn't work.

18
00:00:57.360 --> 00:01:01.320
So the solution and this is not just unique to Python.

19
00:01:01.320 --> 00:01:04.380
Most languages support these escape sequences.

20
00:01:04.380 --> 00:01:06.740
They all start with backslashes.

21
00:01:06.810 --> 00:01:10.190
So here's a list on the docs I've included as a resource.

22
00:01:10.290 --> 00:01:15.750
But really there's up to the majority the vast majority of these you don't really need to care about

23
00:01:15.750 --> 00:01:16.490
or know about.

24
00:01:16.650 --> 00:01:23.190
But I'll point out a couple and the first one is this slash and back slash and excuse me and this will

25
00:01:23.190 --> 00:01:24.930
create a new line.

26
00:01:25.200 --> 00:01:27.670
So that's what we were looking for.

27
00:01:27.690 --> 00:01:32.910
So if we did this new line variable equals the string hello world we add backslash.

28
00:01:32.930 --> 00:01:36.300
And when we printed out we get hello.

29
00:01:36.300 --> 00:01:38.130
And then world.

30
00:01:38.130 --> 00:01:39.460
So let's try it.

31
00:01:39.530 --> 00:01:48.110
Do new line equals high and then backslash in there.

32
00:01:48.600 --> 00:01:53.600
And let's not even have that space there let's just do it like this.

33
00:01:54.390 --> 00:01:57.540
And if I look at New Line it doesn't actually format it.

34
00:01:57.570 --> 00:02:02.220
But then if I print a new line I get high and then there.

35
00:02:02.580 --> 00:02:05.400
OK so that's the first escape sequence backslash.

36
00:02:05.400 --> 00:02:07.740
And but there's also a couple more

37
00:02:11.610 --> 00:02:15.020
but there's also a couple more and they all start with backslash.

38
00:02:15.150 --> 00:02:16.730
So another one I'll show you.

39
00:02:16.740 --> 00:02:18.990
Let's say you wanted to add a backslash.

40
00:02:19.080 --> 00:02:24.840
Well if you just tried to add a backslash Python will think that it's the beginning of an escape sequence.

41
00:02:24.900 --> 00:02:27.570
So it's actually double backslash.

42
00:02:27.960 --> 00:02:31.740
So you know we could do string equals.

43
00:02:31.740 --> 00:02:34.000
This is a backslash.

44
00:02:35.190 --> 00:02:38.050
And if I just tried to do this.

45
00:02:38.150 --> 00:02:44.320
See I get an error but if I do double backslash now I look at string.

46
00:02:44.450 --> 00:02:45.690
Well if I print string

47
00:02:50.300 --> 00:02:52.440
everything works out dandy.

48
00:02:52.530 --> 00:02:54.770
Now I was I was preparing for this video.

49
00:02:54.980 --> 00:02:56.530
I kind of noticed a couple.

50
00:02:56.570 --> 00:03:03.080
One in particular that it's just bizarre to me that there was a backspace escape sequence so you can

51
00:03:03.080 --> 00:03:05.800
do this which just seems really weird to me.

52
00:03:06.050 --> 00:03:09.500
Let's do as TR equals low.

53
00:03:10.340 --> 00:03:20.780
And then somewhere in the middle I can just do backslash B and it just acts to delete one of the characters.

54
00:03:20.780 --> 00:03:25.770
So if I just look at string you can see who gets turned into this weird ASCII thing.

55
00:03:25.910 --> 00:03:33.340
But now if I print string it delayed in an L I have no idea why you would want that just kind of a weird

56
00:03:33.350 --> 00:03:34.320
thing.

57
00:03:34.340 --> 00:03:36.960
The only other to point out if you want doubles.

58
00:03:37.040 --> 00:03:42.890
But if you actually want double quotes for sure inside of your string and you are using double quotes

59
00:03:42.890 --> 00:03:43.480
already.

60
00:03:43.640 --> 00:03:51.680
So let's say you know I had string equals he said Ha ha right and I want double quotes or some reason

61
00:03:51.710 --> 00:03:57.110
I don't want to change this to single quotes or I don't want to change the outer ones to single quotes.

62
00:03:57.110 --> 00:04:00.190
You can do backslash quote just like that.

63
00:04:00.200 --> 00:04:02.700
Well not like that like this.

64
00:04:03.200 --> 00:04:04.240
And this works.

65
00:04:04.250 --> 00:04:08.620
So this is the alternative to mixing and matching double and single strings or quotes.

66
00:04:08.630 --> 00:04:12.770
And if I look at string now you can see it works just fine.

67
00:04:12.770 --> 00:04:14.490
Same thing with single quotes.

68
00:04:14.630 --> 00:04:15.210
I could.

69
00:04:15.280 --> 00:04:22.420
I won't make you watch it but I could use backslash single quote instead of a single coded string.

70
00:04:22.580 --> 00:04:25.380
And there's no problem here.

71
00:04:25.850 --> 00:04:30.800
And basically Python will read this and say OK this is a string that starts with a single quote.

72
00:04:30.800 --> 00:04:34.220
Keep going until we hit another single quote and it gets to here.

73
00:04:34.420 --> 00:04:36.890
So it's a backslash and it's like oh what a relief.

74
00:04:36.890 --> 00:04:38.300
This isn't the end of the string.

75
00:04:38.300 --> 00:04:40.120
I thought it was but it's not.

76
00:04:40.130 --> 00:04:43.250
This is a big escape sequence keeps going oh what a relief.

77
00:04:43.250 --> 00:04:44.680
Another escape sequence.

78
00:04:44.840 --> 00:04:48.600
And then it hits the end and it's like OK and my time over the string is done.

79
00:04:49.040 --> 00:04:50.000
And that's it.

80
00:04:50.000 --> 00:04:56.670
So escape sequences not that come in they use but the new line one I'd say and the quotation was particular

81
00:04:57.170 --> 00:04:59.770
but there are some weird ones if you want to explore the docs.

82
00:04:59.960 --> 00:05:00.860
All right.
