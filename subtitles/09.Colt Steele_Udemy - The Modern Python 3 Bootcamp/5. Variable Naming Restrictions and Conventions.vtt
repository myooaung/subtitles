WEBVTT
1
00:00:00.300 --> 00:00:02.060
All right this will be a quick video.

2
00:00:02.070 --> 00:00:07.470
I just want to talk about the rules the restrictions of what we can and can't name variables and then

3
00:00:07.470 --> 00:00:13.740
also the stylistic conventions of what you should name variables which you technically don't have to

4
00:00:13.740 --> 00:00:14.380
follow.

5
00:00:14.640 --> 00:00:14.970
OK.

6
00:00:14.970 --> 00:00:17.420
So first up let's talk about restrictions.

7
00:00:17.680 --> 00:00:22.230
So in Python you can name variables with whatever you want with a couple exceptions.

8
00:00:22.590 --> 00:00:25.070
So variables have to start with a letter or underscore.

9
00:00:25.140 --> 00:00:31.260
So we can't have one start with number nine or a parentheses or something or a question mark needs to

10
00:00:31.260 --> 00:00:38.200
be a letter or underscore so casts underscore cats is good two cats is not good.

11
00:00:39.440 --> 00:00:46.280
Next up the rest of the name must consist of letters numbers or underscores so we can have numbers in

12
00:00:46.280 --> 00:00:50.240
our variables that just can't start off the variable.

13
00:00:50.240 --> 00:00:57.260
So Cat 2 is fine but something like hey at you it's not OK because it's the at sign whatever that thing

14
00:00:57.260 --> 00:00:57.860
is called.

15
00:00:57.920 --> 00:01:03.470
It's not a letter number or underscore It also names are case sensitive.

16
00:01:03.470 --> 00:01:05.420
So this is an important one.

17
00:01:05.510 --> 00:01:08.400
These two variable names are not equal to one another.

18
00:01:08.480 --> 00:01:15.710
If you haven't seen this exclamation to mean not not equals we'll see that in a bit but uppercase Katz

19
00:01:15.770 --> 00:01:20.350
is not the same as cats with a capitalized C or this version uppercase C..

20
00:01:20.340 --> 00:01:22.950
Cats is not equal to all lowercase cats.

21
00:01:23.060 --> 00:01:25.520
Python thinks that they're all entirely different.

22
00:01:25.730 --> 00:01:27.340
So those are the rules.

23
00:01:27.350 --> 00:01:30.860
The things that you have to follow in Python and I'll show you.

24
00:01:31.030 --> 00:01:32.550
I mean make some space here.

25
00:01:32.630 --> 00:01:34.400
I could make a new variable.

26
00:01:34.580 --> 00:01:36.560
You know Cat 2.

27
00:01:36.740 --> 00:01:38.290
Blah blah blah.

28
00:01:38.390 --> 00:01:41.040
Let's just do that equals one.

29
00:01:41.060 --> 00:01:42.060
Why not.

30
00:01:42.440 --> 00:01:44.950
And I can hit tabs would have to type that whole thing.

31
00:01:44.950 --> 00:01:49.770
It's not a good variable name because it makes no sense and it's really long but Python's finace it.

32
00:01:49.790 --> 00:01:56.300
But if I try and do two people equals I don't know three four or four.

33
00:01:56.300 --> 00:01:57.760
Python gives me an error.

34
00:01:58.160 --> 00:02:01.430
And this is actually probably our first error we've seen in the course.

35
00:02:01.430 --> 00:02:08.930
It tells me invalid syntax and it's pointing to two people meaning that it's not a valid name for variable.

36
00:02:09.020 --> 00:02:10.100
It just gives up.

37
00:02:10.130 --> 00:02:11.350
Python has rules.

38
00:02:11.420 --> 00:02:12.060
It does it.

39
00:02:12.080 --> 00:02:18.920
It reads your code and it gets to a new word and it notices OK for this to be a variable.

40
00:02:18.920 --> 00:02:22.970
It has to start with a letter or an underscore and it doesn't so I don't know what to do with this.

41
00:02:22.970 --> 00:02:24.630
I'm going to freak out and throw an error.

42
00:02:25.040 --> 00:02:31.260
OK so you'll get the same error if you tried to do something like cold at gmail equals something to

43
00:02:31.280 --> 00:02:32.090
do numbers.

44
00:02:32.100 --> 00:02:37.580
That's not my email address by the way I wish it was but it's not as you see here we get an error.

45
00:02:37.610 --> 00:02:39.380
It's actually different.

46
00:02:39.500 --> 00:02:45.500
It can't assign to operator and that's because Python thinks that these symbols are operators will talk

47
00:02:45.500 --> 00:02:46.250
about that later.

48
00:02:46.250 --> 00:02:54.070
Sort of like the plus sign and the minus sign or operators so we couldn't do Colt plus one equals six.

49
00:02:54.080 --> 00:02:54.990
Same problem.

50
00:02:54.990 --> 00:02:59.140
I think you are trying to assign to the plus sign and the plus sign already mean something in Python.

51
00:02:59.150 --> 00:03:00.470
So it's a problem.

52
00:03:00.790 --> 00:03:07.730
OK so we talked about what you can and can't name things will actually cause real problems.

53
00:03:07.730 --> 00:03:09.440
Now let's talk about conventions.

54
00:03:09.560 --> 00:03:13.880
You haven't heard of naming conventions or code conventions.

55
00:03:13.880 --> 00:03:18.740
It's just a way of saying style guidelines things that most people think you should do and you might

56
00:03:18.740 --> 00:03:22.690
get made fun of if you don't do but won't actually break your application.

57
00:03:23.490 --> 00:03:28.210
So most Python programmers prefer to use standard style conventions when naming things.

58
00:03:28.250 --> 00:03:34.470
So that means variables should be snake case which means using underscores to separate words.

59
00:03:34.610 --> 00:03:35.400
Camel case.

60
00:03:35.420 --> 00:03:44.330
If you're familiar with that means using an uppercase letter so something like Caml uppercase case vs

61
00:03:44.600 --> 00:03:48.840
snake case where a word is separated by an underscore.

62
00:03:49.070 --> 00:03:50.990
So you can do this in python.

63
00:03:50.990 --> 00:03:56.630
Remember there's nothing that prevents you from using uppercase letters but the convention is to use

64
00:03:56.870 --> 00:04:01.590
underscores and you know it's called Python and snake case makes sense.

65
00:04:01.850 --> 00:04:03.580
So there we go.

66
00:04:03.920 --> 00:04:06.220
Now variables should be lowercase.

67
00:04:06.230 --> 00:04:08.570
Most variables should be lowercase.

68
00:04:08.570 --> 00:04:16.550
There are a couple exceptions so if you see something like this all capitals and they case refers to

69
00:04:16.550 --> 00:04:21.020
things that are called constant which we haven't talked about yet but they're just variables.

70
00:04:21.050 --> 00:04:23.510
But the idea is that they don't change.

71
00:04:23.540 --> 00:04:28.670
So something like pi you don't want to rewrite pi a bunch of times right.

72
00:04:28.670 --> 00:04:31.110
Three point 1 4 1 5 9 blah blah blah blah blah.

73
00:04:31.130 --> 00:04:32.510
I used to know a lot more digits.

74
00:04:32.540 --> 00:04:37.310
We don't want to type that ourselves manually so we could store it in a variable but to make it clear

75
00:04:37.310 --> 00:04:41.380
that it's a constant that it shouldn't change because the value of pi shouldn't change in our code.

76
00:04:41.420 --> 00:04:42.490
We put it in all caps.

77
00:04:42.590 --> 00:04:47.690
So if we see code that has constants you'll notice them because they're in all caps and that's the reason

78
00:04:47.970 --> 00:04:51.890
there is so little flag that says hey I'm a constant Don't mess with me.

79
00:04:53.150 --> 00:04:59.630
If you see upper camel case so camel case again means that we're not using underscores we're using capital

80
00:04:59.630 --> 00:05:04.940
letters to separate words that refers to a class which That's all I'll say on that for now.

81
00:05:04.940 --> 00:05:11.210
We will see classes a lot later on in the course but upper camel case is usually referring to classes

82
00:05:12.230 --> 00:05:17.090
and then variables that start an end with two underscores like this.

83
00:05:17.090 --> 00:05:24.360
So there's two right there on either side are called Danders stands for double underscore D under.

84
00:05:24.560 --> 00:05:27.630
But really the idea is that you just shouldn't touch them.

85
00:05:27.650 --> 00:05:30.710
They're not supposed to be for you to mess with.

86
00:05:30.710 --> 00:05:35.810
So this is really this is more common when you're working with other people's code maybe an open source

87
00:05:35.810 --> 00:05:39.450
project or something that we're using that we didn't write right.

88
00:05:39.530 --> 00:05:44.510
Well the author of that code could basically say please this variable is not meant to be touched or

89
00:05:45.290 --> 00:05:50.540
messed with because it could cause real problems to the application or to the library.

90
00:05:50.600 --> 00:05:52.290
So we recommend you just leave it alone.

91
00:05:52.490 --> 00:05:54.930
Now that doesn't mean that you couldn't change it.

92
00:05:55.100 --> 00:05:59.870
There's no way for you know in Python to say that this thing cannot ever be changed at all.

93
00:06:00.110 --> 00:06:04.060
But it's more of a way just a signifier that you should do this alone.

94
00:06:04.180 --> 00:06:04.530
OK.

95
00:06:04.550 --> 00:06:06.100
So that's it for conventions.

96
00:06:06.290 --> 00:06:10.310
So there are restrictions and conventions just keep in mind what's what.

97
00:06:10.370 --> 00:06:16.340
But really it helps if you just kind of merge them together and just follow the conventions as if they

98
00:06:16.340 --> 00:06:17.230
were restrictions.

99
00:06:17.240 --> 00:06:18.480
Now make it easier for you.
