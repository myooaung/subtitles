WEBVTT
1
00:00:00.110 --> 00:00:01.960
Hey we'll come back from here on out.

2
00:00:01.980 --> 00:00:05.920
We're going to focus on using regular expressions inside of Python.

3
00:00:05.970 --> 00:00:10.200
Up until this point we've been doing things in the browser we've been learning the syntax of regular

4
00:00:10.200 --> 00:00:13.880
expressions but we've been doing it outside of Python just on its own.

5
00:00:13.890 --> 00:00:19.140
Now we're going to see how we write Python code that will match a string using a given regular expression

6
00:00:19.140 --> 00:00:23.400
or define a function that returns true if something matches a pattern or false it doesn't.

7
00:00:23.490 --> 00:00:28.800
Or another function that extracts all matches from a given string and returns them in a list that sort

8
00:00:28.800 --> 00:00:32.370
of thing which is really where regexp is useful.

9
00:00:32.400 --> 00:00:37.260
I mean it's nice to know how to write them on their own but usually want to write code using them or

10
00:00:37.320 --> 00:00:39.770
write code that utilizes rejects.

11
00:00:39.810 --> 00:00:41.660
So the magic comes from the art.

12
00:00:41.690 --> 00:00:48.660
The module can find it on the docs here stands for regular expressions a regular expression.

13
00:00:48.660 --> 00:00:54.770
The docs go into detail on all the characters we've already seen plus and question mark plus a couple

14
00:00:54.770 --> 00:00:57.420
of more that we didn't have time to talk about.

15
00:00:57.420 --> 00:01:00.250
You can definitely learn a lot more about them here.

16
00:01:00.960 --> 00:01:06.540
But if you keep scrolling down here we go we can see the contents of the module itself which is the

17
00:01:06.540 --> 00:01:13.610
methods that we'll use and there are a couple here that will focus on there's things I compile which

18
00:01:13.610 --> 00:01:14.970
we'll see in this video.

19
00:01:15.000 --> 00:01:16.530
There are other methods search.

20
00:01:16.560 --> 00:01:17.190
We'll see.

21
00:01:17.190 --> 00:01:21.490
There's one called Match split find all sub.

22
00:01:21.570 --> 00:01:23.460
We're not going to go over every single method.

23
00:01:23.460 --> 00:01:29.370
And when I'm mainly focused on defining a regular expression as a string and then compiling it into

24
00:01:29.370 --> 00:01:34.530
a regular expression object and using that to find matches in another string.

25
00:01:34.650 --> 00:01:37.260
So back to the slides I have an example of that.

26
00:01:37.260 --> 00:01:40.980
So this slide shows a common pattern for using the r e module.

27
00:01:41.040 --> 00:01:44.330
We start off by importing Ari have to do that.

28
00:01:44.550 --> 00:01:51.040
And then what we do is create a regular expression object using a projects that we have written already.

29
00:01:51.240 --> 00:01:56.450
So that's here I'll come back to this are in just a second but this is review.

30
00:01:56.520 --> 00:02:00.330
This is going to capture or match a phone number a very simple one.

31
00:02:00.330 --> 00:02:01.900
We're not dealing with parens.

32
00:02:01.980 --> 00:02:07.090
It has to match a format three numbers a space three numbers a dash for numbers.

33
00:02:07.200 --> 00:02:08.960
So like this right here.

34
00:02:09.330 --> 00:02:12.900
So what we're going to do is we take the regular expression in a string.

35
00:02:12.900 --> 00:02:15.720
This are is it stands for raw string.

36
00:02:15.720 --> 00:02:17.590
I'll explain why we do that in a moment.

37
00:02:17.700 --> 00:02:24.120
But for now we'll just always do an R in front of the string and then we call our compile and pass that

38
00:02:24.150 --> 00:02:25.200
all in.

39
00:02:25.200 --> 00:02:29.820
So our e-com compile will create the regular expression object for us.

40
00:02:29.820 --> 00:02:34.890
We're not going to go into much detail into what it is but it just contains a lot of methods on it.

41
00:02:34.890 --> 00:02:37.640
And one of those methods is called search.

42
00:02:37.740 --> 00:02:43.710
So we saved it to a variable called pattern or whatever you want phone projects read shred Jacs it's

43
00:02:43.710 --> 00:02:44.640
up to you.

44
00:02:44.730 --> 00:02:49.650
I'm calling my pattern because I just wanted a short name because these get very long and I'll soon

45
00:02:49.650 --> 00:02:52.260
hit the border of my code block here.

46
00:02:52.260 --> 00:02:56.010
But I would probably call it phone pattern or phone projects personally.

47
00:02:56.010 --> 00:02:59.480
Then down here I can call pattern search.

48
00:02:59.580 --> 00:03:06.120
So using that pattern search and passing a string and in my case I have the string call me at 4 1 5

49
00:03:06.120 --> 00:03:14.160
5 5 5 4 2 4 2 and then I'm saving the result of pattern search to the register result variable and we'll

50
00:03:14.160 --> 00:03:15.930
see what this is what comes back.

51
00:03:15.960 --> 00:03:18.970
It doesn't just automatically give us the match or anything like that.

52
00:03:19.020 --> 00:03:25.590
It gives us a match object which we then can ask for certain specifics about the match will go into

53
00:03:25.590 --> 00:03:30.180
detail into how it works but just know that it doesn't give you the match automatically doesn't just

54
00:03:30.180 --> 00:03:31.950
return a string like this.

55
00:03:31.950 --> 00:03:34.030
It returns an entire match object.

56
00:03:34.260 --> 00:03:36.960
But let's start by just playing around with this on our own.

57
00:03:37.170 --> 00:03:41.220
So I'll go to my terminal and we'll start by importing aren't we.

58
00:03:41.790 --> 00:03:45.010
And then I'm going to create the pattern pattern.

59
00:03:45.040 --> 00:03:47.690
Equals are compiled.

60
00:03:48.420 --> 00:03:54.180
And then in here I'm going to just write a simple rejects and if I don't do a rostering if I don't put

61
00:03:54.180 --> 00:04:01.770
the R here the complication is that anytime we want to use a backslash like for digit we actually need

62
00:04:01.770 --> 00:04:07.350
to do two backslashes Because remember how strings work in Python that we used backslashes for escape

63
00:04:07.350 --> 00:04:09.600
characters or escape sequences.

64
00:04:09.600 --> 00:04:17.010
So we have to escape them here to actually say no I actually want a backslash instead of that if we

65
00:04:17.010 --> 00:04:20.590
put an R here we're able to just use regular backslashes.

66
00:04:20.590 --> 00:04:24.970
It stands for rostering pretty much anytime you write a regular expression.

67
00:04:25.170 --> 00:04:30.950
Put are there use or rostering that way when you type of backslash it actually is a backslash.

68
00:04:31.350 --> 00:04:37.560
Unlike you know if we had this and I did backslash let's say T for example.

69
00:04:37.560 --> 00:04:43.280
That's going to give us a tab character and what we want is actually backslash t if it's a regular expression

70
00:04:43.960 --> 00:04:48.540
so that they are there and we'll do digit three times.

71
00:04:48.540 --> 00:04:52.110
Space backslash D for another number.

72
00:04:52.110 --> 00:04:52.880
Numerical digit.

73
00:04:52.890 --> 00:04:57.930
We want three again dash back backslash digits 4.

74
00:04:58.320 --> 00:05:00.290
So this defines the pattern.

75
00:05:00.410 --> 00:05:01.850
Make sure I don't have any typos.

76
00:05:01.850 --> 00:05:02.810
Looks good.

77
00:05:03.050 --> 00:05:10.780
And if we look at what pattern is if we run type on pattern I can see it is a regular expression pattern.

78
00:05:10.880 --> 00:05:18.940
If we run help on it you can see that it's a comp. regular expression object as opposed to methods.

79
00:05:19.120 --> 00:05:23.600
The one we're going to focus on is called Search scan through string looking for a match and return

80
00:05:23.600 --> 00:05:29.460
to return a corresponding match object instance return None if no position in the string matches.

81
00:05:29.710 --> 00:05:30.270
OK.

82
00:05:30.430 --> 00:05:34.350
So we have to find our pattern here which you've just called pattern it's our projects.

83
00:05:34.390 --> 00:05:41.290
Now we can call pattern search and I'm going to save it to a variable called results pattern search

84
00:05:41.530 --> 00:05:43.480
and then what's the string you want to search.

85
00:05:43.630 --> 00:05:49.940
Let's do to start something that doesn't match just a bunch of numbers and letters and I look at reds.

86
00:05:50.050 --> 00:05:51.310
It has none in it.

87
00:05:51.340 --> 00:05:52.460
The value of None.

88
00:05:52.540 --> 00:05:55.470
But if I now do this again and I search for.

89
00:05:55.750 --> 00:05:56.360
I don't know.

90
00:05:56.430 --> 00:05:57.200
It's the same thing.

91
00:05:57.200 --> 00:05:59.690
Call me at and then I'll put a number in here.

92
00:05:59.740 --> 00:06:05.520
Let's go 3 1 0 4 4 5 5 dash 9 8 7 6.

93
00:06:05.710 --> 00:06:07.830
We have one too many don't.

94
00:06:07.960 --> 00:06:08.670
There we go.

95
00:06:09.000 --> 00:06:09.210
OK.

96
00:06:09.220 --> 00:06:11.330
So that's a valid phone number that should match.

97
00:06:11.350 --> 00:06:15.510
And if we look at Reds now we have a match object.

98
00:06:15.810 --> 00:06:16.090
OK.

99
00:06:16.090 --> 00:06:19.840
So we have a match object the way that we actually get the match out.

100
00:06:19.900 --> 00:06:23.540
We can call rez dot group in parentheses.

101
00:06:23.790 --> 00:06:30.260
It's a method and it shows us the match 3 1 0 4 4 5 dash 9 8 7 6.

102
00:06:30.430 --> 00:06:37.910
So we could use that successfully extract successfully extracted the phone number out of this string.

103
00:06:38.200 --> 00:06:40.990
Let's try it one more time but let's have two numbers.

104
00:06:40.990 --> 00:06:47.000
Call me at 3 1 0 4 4 5 9 8 7 6 4 3 1 No.

105
00:06:47.440 --> 00:06:52.300
This part haven't come up with these things or this number.

106
00:06:52.300 --> 00:06:57.500
If you read that group it still only gives us the first match.

107
00:06:57.670 --> 00:07:03.850
And if we go to the doctor you can see the behavior of search string looking for the first location

108
00:07:04.360 --> 00:07:08.900
where the rejects pattern produces a match and returns a corresponding match object.

109
00:07:09.040 --> 00:07:12.550
So it doesn't support finding more than one match.

110
00:07:12.640 --> 00:07:19.690
Instead if we wanted to we could instead do dot arrays equals pattern dot instead of search where you

111
00:07:19.690 --> 00:07:21.680
find all.

112
00:07:22.200 --> 00:07:26.080
And if we go to the Doxey can read about find all ways.

113
00:07:26.410 --> 00:07:32.090
Here we go return all non-overlapping matches of pattern in string as a list of strings.

114
00:07:32.260 --> 00:07:34.620
So it gives it to us this time as a list of strings.

115
00:07:34.620 --> 00:07:38.050
If we look at Reds It's a list of two strings.

116
00:07:38.050 --> 00:07:44.530
One last thing before and this video you've seen me compiling the regular expressions before I use them

117
00:07:44.890 --> 00:07:47.020
like I did appear.

118
00:07:47.080 --> 00:07:49.380
Technically you don't have to do that.

119
00:07:49.630 --> 00:07:54.610
If you look in the docs there's a division between module contents.

120
00:07:54.610 --> 00:07:58.880
So if we look at something like search there's r e search.

121
00:07:59.440 --> 00:08:05.440
And if we use our search we actually have to pass the pattern in a string versus if we keep scrolling

122
00:08:05.440 --> 00:08:07.330
down there's rejects.

123
00:08:07.450 --> 00:08:09.570
Regular Expression object search.

124
00:08:09.580 --> 00:08:10.800
That's what we've been using.

125
00:08:10.810 --> 00:08:16.840
We've made a regex object first we compiled it and then called search on it but we could also do this

126
00:08:16.930 --> 00:08:20.980
R E dot search and then we pass in the regular expression.

127
00:08:20.980 --> 00:08:28.650
So I'll copy and paste it in and then comma and then something to search let's just do the same string.

128
00:08:29.380 --> 00:08:31.140
Ok so we can do it like this.

129
00:08:31.220 --> 00:08:37.940
Barakaat search give it the regular expression comma something to search and it gives us the same result.

130
00:08:37.990 --> 00:08:42.420
We just need to do a group on the end to get the string.

131
00:08:42.490 --> 00:08:47.800
The difference between the two is that here we are compiling it separately and saving it to a variable.

132
00:08:47.800 --> 00:08:49.300
Where's that appear.

133
00:08:49.300 --> 00:08:54.010
That means it's only compiled one time and then every time we use it afterwards it doesn't have to be

134
00:08:54.010 --> 00:08:54.760
compiled again.

135
00:08:54.760 --> 00:08:55.710
It's already been done.

136
00:08:55.750 --> 00:09:00.220
It's turned compile just means it's turned into a regular expression object a Python object behind the

137
00:09:00.220 --> 00:09:02.400
scenes here.

138
00:09:02.560 --> 00:09:07.480
Every time this line is called the search it's going to recompile whatever the string is.

139
00:09:07.660 --> 00:09:13.480
So if you're reusing a regular expression more than once you want to be able to test multiple things.

140
00:09:13.510 --> 00:09:18.790
Or you could compile it once at the beginning of your application and then you don't have to recompile

141
00:09:18.790 --> 00:09:25.570
it over and over every time you search because instead you can call the regular expression object search

142
00:09:25.750 --> 00:09:28.390
rather than are module that search.

143
00:09:28.390 --> 00:09:30.220
Same thing with all the other methods like.

144
00:09:30.280 --> 00:09:36.160
What was the other one find all we can do are find all and pass in the regular expression and then a

145
00:09:36.160 --> 00:09:37.060
search string.

146
00:09:37.210 --> 00:09:40.900
But if you're using that regular expression pattern more than once it's more efficient.

147
00:09:40.900 --> 00:09:47.380
It's cleaner to define it first and compile it separately and then call back to that pattern.

148
00:09:47.600 --> 00:09:50.280
OK hopefully that explanation made a little sense.

149
00:09:50.350 --> 00:09:51.720
If not if you're confused.

150
00:09:51.820 --> 00:09:54.070
Just always compile your projects first.

151
00:09:54.070 --> 00:09:55.730
It can't really hurt to do that.

152
00:09:55.750 --> 00:09:57.930
It's an extra line but it's better.

153
00:09:57.940 --> 00:09:59.500
It's kind of more traditional.

154
00:09:59.500 --> 00:10:02.190
Also just a better habit to get into.

155
00:10:02.290 --> 00:10:08.620
So compile it first and then use that whatever you save that variable like pattern case and call pattern

156
00:10:08.860 --> 00:10:12.370
search or pattern find all and search.

157
00:10:12.430 --> 00:10:17.450
What a lot of the time I end up using sometimes you're trying to find multiple instances of things in

158
00:10:17.450 --> 00:10:18.060
a string.

159
00:10:18.140 --> 00:10:22.940
But a lot of the time you're trying to find one thing or to make sure that one string matches a pattern.

160
00:10:22.940 --> 00:10:24.260
Exactly.

161
00:10:24.270 --> 00:10:24.910
OK.

162
00:10:25.280 --> 00:10:25.910
That's it.

163
00:10:25.920 --> 00:10:29.410
Next we're going to continue on and just learn a bit more about rejection Python.
