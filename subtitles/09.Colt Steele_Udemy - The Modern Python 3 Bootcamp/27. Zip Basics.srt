1
00:00:00,510 --> 00:00:03,620
Welcome back to the final build function video.

2
00:00:03,760 --> 00:00:08,250
It's been a bit of a marathon but hopefully somewhat interesting because they're kind of all over the

3
00:00:08,250 --> 00:00:08,670
place.

4
00:00:08,670 --> 00:00:10,470
They do very different things.

5
00:00:10,470 --> 00:00:15,840
And the last one is called Ziph and it might be the weirdest one of all of them.

6
00:00:15,870 --> 00:00:20,760
If I read the explanation it's not going to make a lot of sense and makes an iterator that aggregates

7
00:00:20,760 --> 00:00:27,060
elements from each of the provided iterable is returns an iterator of tuples Were I a tuple contains

8
00:00:27,060 --> 00:00:33,460
the fifth element for each argument sequences or intervals the iterator stops in the shortest input.

9
00:00:33,480 --> 00:00:35,040
OK that's enough.

10
00:00:35,040 --> 00:00:42,040
What it does really is imagine that we have two lists of numbers and there are the exact same length.

11
00:00:42,090 --> 00:00:47,430
It's going to make a new list where it pairs up the first two numbers from the list and then the second

12
00:00:47,430 --> 00:00:50,460
two numbers and the third two it zips them together.

13
00:00:50,460 --> 00:00:54,020
Imagine you know an a list on the left and left list on the right.

14
00:00:54,090 --> 00:00:55,380
Take the first one from each.

15
00:00:55,380 --> 00:01:00,500
Put them together and then you move down and you take the second one from each and put them together.

16
00:01:00,510 --> 00:01:01,930
So here's an example.

17
00:01:02,160 --> 00:01:09,870
If we Zipp one to three the list and four five six the list we end up with a list of tuples like this

18
00:01:10,230 --> 00:01:18,270
one come a 4 2 5 3 6 and that's if we convert it to a list by default it returns an iterator of tuples

19
00:01:18,330 --> 00:01:22,940
and we have to convert it to a dictionary if we want a dictionary or list if we want a list.

20
00:01:23,670 --> 00:01:24,990
So let me show an example.

21
00:01:24,990 --> 00:01:27,560
I'll do number one.

22
00:01:27,590 --> 00:01:34,000
And we can go one two three four five two equals six seven eight nine 10.

23
00:01:34,210 --> 00:01:36,650
Like this I can spell.

24
00:01:36,660 --> 00:01:44,260
And now if we zipped them together this we get this iterator of tuples and what we actually need to

25
00:01:44,260 --> 00:01:47,040
do is we can turn it into a list.

26
00:01:47,110 --> 00:01:54,180
So I'm going to save this to a variable and I'll just call it Z and A list of Z.

27
00:01:54,770 --> 00:01:58,740
You can see it's a list of tuples 1 in 6 2 and 7.

28
00:01:58,780 --> 00:02:05,890
I could also do a dict of the same thing and get one is the key and 6 is the value.

29
00:02:05,890 --> 00:02:06,790
So what it's doing.

30
00:02:06,790 --> 00:02:09,430
Hopefully you can see where the name Zipp comes from.

31
00:02:09,430 --> 00:02:12,580
It's pairing up this and this and this this and this.

32
00:02:12,580 --> 00:02:15,280
If we have an even length.

33
00:02:15,520 --> 00:02:19,290
Well actually even before that we just show it does go from left to right.

34
00:02:19,300 --> 00:02:28,130
So if we switch the order and we do number two common number one and now list of Z we get 6 then 1 rather

35
00:02:28,130 --> 00:02:29,950
than 1 then 6.

36
00:02:29,960 --> 00:02:33,800
So the order matters and the items don't have to be exactly the same length.

37
00:02:34,130 --> 00:02:35,810
Although I'll show you what happens.

38
00:02:35,820 --> 00:02:42,070
It's redefine that's redefined number two and have a go to 11 and 12.

39
00:02:42,080 --> 00:02:51,530
Now if I read Zipp them I'll go number two first if I print it you'll see it stops as soon as the shortest

40
00:02:51,590 --> 00:02:56,980
interval is exhausted as soon as we reach the end of whatever the shortest thing is.

41
00:02:57,200 --> 00:03:02,770
So we don't see 11 and 12 anywhere because we were limited by numbers 1.

42
00:03:02,780 --> 00:03:07,030
Another thing to mention we're not limited to you know two items at once.

43
00:03:07,040 --> 00:03:12,950
I could also have something called words and I'll just put in pi and ELO well.

44
00:03:13,010 --> 00:03:14,350
So it's not really a word.

45
00:03:14,360 --> 00:03:15,140
Ha ha.

46
00:03:15,200 --> 00:03:17,310
And how about a smile emoji.

47
00:03:17,470 --> 00:03:19,070
So we have four of them.

48
00:03:19,070 --> 00:03:25,070
Now if I do list of zip and well let's start with words.

49
00:03:25,250 --> 00:03:30,200
And then comes one and then comes to what we get.

50
00:03:30,380 --> 00:03:34,720
We get a list of tuples each containing three elements now.

51
00:03:35,210 --> 00:03:37,430
And also remember this is the shortest one.

52
00:03:37,430 --> 00:03:39,440
So it limits how far the others go.

53
00:03:39,440 --> 00:03:42,520
We stop when we hit the end of words.

54
00:03:42,620 --> 00:03:45,680
So I have a more complex example of when we would use this.

55
00:03:45,680 --> 00:03:52,580
But I want to start by just showing you one more thing which is that we can also use the star operator

56
00:03:52,700 --> 00:03:57,750
to unpack a list in this example and what will happen.

57
00:03:57,760 --> 00:03:58,880
Here's a list of tuples.

58
00:03:58,910 --> 00:04:01,700
0 1 1 2 2 3 and so on.

59
00:04:01,880 --> 00:04:08,720
If we pass in Star 5 by 2 which is the name of the list it's going to take all these tuples out of the

60
00:04:08,720 --> 00:04:11,050
list and pass them and individually.

61
00:04:11,150 --> 00:04:16,870
So it would be the same thing as running zip with this element this tuple comma this up this tuple combo

62
00:04:16,880 --> 00:04:21,200
this tuple and what it will do is then go through and pair up.

63
00:04:21,410 --> 00:04:24,170
All these things here pairs is the wrong term actually.

64
00:04:24,200 --> 00:04:29,330
It's going to take the first item from all five and put them in one tuple and then take the second item

65
00:04:29,330 --> 00:04:31,730
from all five and put them in another tuple.

66
00:04:32,000 --> 00:04:38,090
So we can use that start to unpack things and it's pretty common when we work with more complex data

67
00:04:38,090 --> 00:04:38,770
structures.
