1
00:00:00,220 --> 00:00:01,550
Already Welcome back.

2
00:00:01,680 --> 00:00:06,810
So in the last I guess two videos ago we saw a bunch of different errors we learned about what causes

3
00:00:06,810 --> 00:00:07,250
them.

4
00:00:07,380 --> 00:00:09,450
Then we saw how to raise her own errors.

5
00:00:09,450 --> 00:00:13,720
But really the most important thing in this section is all about handling errors.

6
00:00:13,800 --> 00:00:19,560
Right now if our code gets an error it kind of breaks everything stops execution and everything just

7
00:00:19,560 --> 00:00:25,560
halts and it prints out that error to us in the terminal and we're kind of screwed but that changes

8
00:00:25,560 --> 00:00:30,260
right now because now we're going to see how to actually handle them how to do things if we get an error

9
00:00:30,570 --> 00:00:35,010
if we encounter one type of error or do this if we encounter another type of error do this.

10
00:00:35,010 --> 00:00:37,000
So obviously this is a good idea.

11
00:00:37,290 --> 00:00:40,930
It's strongly encouraged to use try except block to.

12
00:00:40,950 --> 00:00:42,900
That's the magic that we're going to learn here.

13
00:00:42,900 --> 00:00:43,910
The new syntax.

14
00:00:44,010 --> 00:00:45,850
Try and accept.

15
00:00:46,380 --> 00:00:47,790
So here's an example.

16
00:00:47,910 --> 00:00:49,070
This on its own.

17
00:00:49,140 --> 00:00:51,920
Not that impressive but it's a very simple example.

18
00:00:51,990 --> 00:00:59,940
If I just had a file actually let me just copy this and I'll show you paste this into a file and let

19
00:00:59,940 --> 00:01:03,550
me just call FUBAR on its own.

20
00:01:04,190 --> 00:01:07,260
And if I run this what do I expect to get.

21
00:01:07,650 --> 00:01:08,840
You get a name error.

22
00:01:08,990 --> 00:01:11,130
Yep that's kind of review.

23
00:01:11,130 --> 00:01:14,670
There's no variable called foobar no function nothing existing.

24
00:01:14,670 --> 00:01:18,800
So by writing this code as try foobar.

25
00:01:18,840 --> 00:01:24,770
What I'm basically saying is try to do this and then we have this except name error.

26
00:01:25,050 --> 00:01:29,240
Except name error and you can do this as syntax will come back to that.

27
00:01:29,250 --> 00:01:36,060
But let's just actually leave it at the most simple possible thing like this except then print problem

28
00:01:38,440 --> 00:01:46,810
and then afterwards let's do another print down here that just says like after the try.

29
00:01:47,550 --> 00:01:48,180
OK.

30
00:01:48,620 --> 00:01:55,100
So what it's going to do is try this code which is a very silly simple line of code but it will cause

31
00:01:55,100 --> 00:01:58,070
a problem and without trying except our code would break.

32
00:01:58,100 --> 00:02:03,970
This would never run but because it's in a try and except try attempts to do this.

33
00:02:04,190 --> 00:02:09,380
And then if there's an exception this runs instead of the error being thrown and everything getting

34
00:02:09,380 --> 00:02:10,610
messed up.

35
00:02:10,730 --> 00:02:12,340
So let's try it now.

36
00:02:13,770 --> 00:02:18,530
We now get the problem and then after the try.

37
00:02:18,840 --> 00:02:20,790
So hopefully that makes sense what's happening here.

38
00:02:20,850 --> 00:02:28,210
If we just did foobar and then tried to print after foobar we're not going to get anywhere.

39
00:02:28,290 --> 00:02:30,530
None of this will even run if I do this right now.

40
00:02:30,720 --> 00:02:33,320
The very first line ruins everything.

41
00:02:33,330 --> 00:02:35,440
So instead we put it in a try block.

42
00:02:35,670 --> 00:02:42,510
Now this is a very simple example and also is not without its own problems because for example printing

43
00:02:42,510 --> 00:02:45,050
out a problem like this is just not a good idea.

44
00:02:45,060 --> 00:02:49,600
We're not explaining what the problem is we're not actually handling an error in a helpful way.

45
00:02:49,890 --> 00:02:52,500
And also this is very generic.

46
00:02:52,500 --> 00:02:54,960
There could be any sort of error in our case.

47
00:02:54,960 --> 00:02:57,420
This is a name error we know it's an error.

48
00:02:57,450 --> 00:02:59,460
I have a slide actually devoted to this.

49
00:02:59,460 --> 00:03:07,430
You don't want to catch all errors with a blank except like this because what will happen here is anytime

50
00:03:07,440 --> 00:03:13,030
there's an error whether it's a type error a name error anything divide by zero error.

51
00:03:13,140 --> 00:03:16,960
They all will be caught by this except and will always print.

52
00:03:17,010 --> 00:03:21,930
You tried to use a variable that was never declared even if that wasn't necessarily the case.

53
00:03:21,930 --> 00:03:29,760
So what we want to do instead is be specific and we accept particular errors like in this case except

54
00:03:29,850 --> 00:03:30,880
name error.

55
00:03:31,140 --> 00:03:34,920
And that way we're only going to run this code if we encounter a name error.

56
00:03:34,980 --> 00:03:40,770
And if there's another type of error this won't run and we can actually add another except afterwards

57
00:03:40,770 --> 00:03:42,150
and I'll show you that in just a moment.

58
00:03:42,180 --> 00:03:47,070
So let's start by actually building a little function that might be useful.

59
00:03:47,100 --> 00:03:49,380
So you know how we saw this in the last video.

60
00:03:49,440 --> 00:03:57,120
If I define a dictionary like this and we have a name is Ricky like this and then I try and access something

61
00:03:57,120 --> 00:03:59,270
that's not in there we've already seen this before.

62
00:03:59,340 --> 00:04:00,960
What type of error will I get.

63
00:04:02,850 --> 00:04:04,030
Get a key error.

64
00:04:04,510 --> 00:04:11,920
Let's say we want to make function called get and what get we'll do is take in a dictionary I'll just

65
00:04:11,920 --> 00:04:13,290
call it D.

66
00:04:13,420 --> 00:04:14,650
And then a key.

67
00:04:14,890 --> 00:04:16,300
So I would call it like this.

68
00:04:16,300 --> 00:04:24,130
Get the comma city and it should check if city is in the dictionary and if it is it should give us the

69
00:04:24,130 --> 00:04:24,750
value.

70
00:04:24,850 --> 00:04:29,130
If it's not instead of throwing an error or a key error it should.

71
00:04:29,170 --> 00:04:30,170
I don't know.

72
00:04:30,350 --> 00:04:32,050
Return none instead.

73
00:04:32,260 --> 00:04:33,430
Or false.

74
00:04:33,430 --> 00:04:37,070
There's actually already you know dictionary.com get that we've seen.

75
00:04:37,120 --> 00:04:42,430
So we're kind of redefining our own version except it's just a function it's not a method on the dictionary.

76
00:04:42,430 --> 00:04:50,680
So for this to work you need to define our function and the code that we would just run looks like this.

77
00:04:51,310 --> 00:04:52,690
D of key.

78
00:04:52,690 --> 00:04:55,490
So this is a dictionary of the key.

79
00:04:55,740 --> 00:04:57,780
But that could potentially throw an error.

80
00:04:57,790 --> 00:05:07,420
So we're going to try that code and then we want to accept and we can just do all exceptions but let's

81
00:05:07,420 --> 00:05:10,810
do except key error.

82
00:05:10,810 --> 00:05:13,710
All that will do is return None.

83
00:05:13,780 --> 00:05:16,460
In this case Andrew will do.

84
00:05:16,490 --> 00:05:23,640
Return the key so return the value by putting the key into the dictionary.

85
00:05:23,670 --> 00:05:34,160
So if we called Get with the comma name you would tried to access d of name and that should be tricky

86
00:05:34,530 --> 00:05:39,160
but if we tried to do it with something like city as we saw then that will throw a key error.

87
00:05:39,210 --> 00:05:42,900
We will intercept it here and return none instead.

88
00:05:42,990 --> 00:05:44,400
So let me show you how that works.

89
00:05:44,400 --> 00:05:48,160
Now just move this after the function definition.

90
00:05:48,480 --> 00:05:53,760
And now if I call this get the common name and let me print it so we can see the result that we get

91
00:05:56,160 --> 00:05:57,770
we get Ricky All right.

92
00:05:57,810 --> 00:06:01,910
Not surprising that Fred tri city just doesn't exist.

93
00:06:02,890 --> 00:06:04,430
We get none.

94
00:06:04,480 --> 00:06:10,490
So instead of getting an error which is what we would get if we did it on our own like this.

95
00:06:10,490 --> 00:06:11,650
That would give us a key error.

96
00:06:11,650 --> 00:06:12,980
Instead we get the value.

97
00:06:13,040 --> 00:06:20,620
Not so we've now written a function basically mimicking the existing dictionary method d dot to get

98
00:06:21,070 --> 00:06:22,400
where we can pass in city.

99
00:06:22,540 --> 00:06:26,790
This is just our own version so you probably wouldn't do this yourself and build this all out.

100
00:06:26,780 --> 00:06:29,260
But this is essentially what's happening behind the scenes.

101
00:06:29,380 --> 00:06:33,200
It's trying to return the value based off of that key.

102
00:06:33,370 --> 00:06:35,840
But if it gets an error it returns None instead.

103
00:06:36,190 --> 00:06:37,440
I will end the video here.

104
00:06:37,480 --> 00:06:41,910
But we still have a little more syntax to talk about as far as try and accept blocks.

105
00:06:41,920 --> 00:06:44,290
So in the next video I'll show a couple more examples.
