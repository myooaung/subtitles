WEBVTT
1
00:00:00.230 --> 00:00:01.270
A welcome back.

2
00:00:01.410 --> 00:00:07.050
So this video is continuing with inheritance but we're going to talk about a special case called multiple

3
00:00:07.050 --> 00:00:07.950
inheritance.

4
00:00:08.040 --> 00:00:13.920
But before I even introduce it or explain what it is or how it works I just want to set things up by

5
00:00:13.920 --> 00:00:18.000
saying this is a topic that really I could have left out of the course.

6
00:00:18.030 --> 00:00:21.380
I did some research ahead of time to see if if anyone covered it.

7
00:00:21.630 --> 00:00:26.030
And out of all the big existing Python courses nobody mentioned it.

8
00:00:26.100 --> 00:00:30.060
That doesn't mean that you know I shouldn't cover it or that it's not worth learning but it does show

9
00:00:30.060 --> 00:00:34.250
us that it's not that commonly used and it's not viewed as super important.

10
00:00:34.410 --> 00:00:40.920
But the reason I decided to teach it is one to be thorough but also I think it helps illuminate certain

11
00:00:40.920 --> 00:00:45.900
things that are happening behind the scenes with inheritance to the point of this video is not to show

12
00:00:45.900 --> 00:00:50.790
you something that you'll be using all the time but in showing to you how multiple inheritance works

13
00:00:51.120 --> 00:00:57.240
and some of the things that arise when we implement it it will help you understand how Python works

14
00:00:57.270 --> 00:01:01.800
underneath that you know behind the scenes onto the magic how inheritance is implemented.

15
00:01:02.130 --> 00:01:03.460
And that's all I'll say about it for now.

16
00:01:03.570 --> 00:01:07.840
So with all that said let's talk about it multiple inheritance.

17
00:01:08.190 --> 00:01:09.810
So it's kind of what it sounds like.

18
00:01:09.810 --> 00:01:15.990
We've seen how to have you know one class inherit from another parent class a single parent class and

19
00:01:15.990 --> 00:01:22.050
all we would do is pass something in here like I don't know a person class that wouldn't really make

20
00:01:22.050 --> 00:01:25.650
sense here but the aquatic class now inherits from person.

21
00:01:26.130 --> 00:01:30.240
Well I have an example here now where I have two different classes.

22
00:01:30.240 --> 00:01:32.230
This is a super trivial example.

23
00:01:32.230 --> 00:01:33.750
Modeling animals.

24
00:01:33.900 --> 00:01:42.960
So we have aquatic which each instance just has a name like Jaws or Sharky or Phishy it has a swim method

25
00:01:43.350 --> 00:01:50.370
that returns the name Jaws is swimming or Phishy is swimming and then a great method that returns.

26
00:01:50.370 --> 00:01:53.240
I am self-taught name of the sea.

27
00:01:53.340 --> 00:01:57.850
Then there's a second class called ambulatory ambulatory just means walking.

28
00:01:57.900 --> 00:02:03.200
So kind of the opposite of an aquatic animal although I don't think it actually is the exact opposite.

29
00:02:03.220 --> 00:02:09.120
But in our case it's just another type of animal and ambulatory instances have a name.

30
00:02:09.120 --> 00:02:15.010
Also they have a method called Walk which just returns know self-taught name is walking.

31
00:02:15.010 --> 00:02:16.230
Lassie is walking.

32
00:02:16.350 --> 00:02:18.330
And then they also have a group method.

33
00:02:18.330 --> 00:02:22.630
I am lassy of the land instead of of the sea.

34
00:02:22.640 --> 00:02:22.910
OK.

35
00:02:22.920 --> 00:02:25.650
So these two crosses have nothing to do with one another.

36
00:02:25.680 --> 00:02:28.270
They look kind of similar but they're not connected.

37
00:02:28.290 --> 00:02:29.360
No inheritance.

38
00:02:29.460 --> 00:02:34.500
Then there's a third class town here called penguin and Penguin inherits from both of them.

39
00:02:34.560 --> 00:02:37.790
In this case we pass into classes to inherit from.

40
00:02:37.880 --> 00:02:45.600
So every instance of Penguin which is ambulatory It's a walking animal but it's also aquatic.

41
00:02:45.600 --> 00:02:53.640
So it kind of makes sense in this example but every Penguin has all of these methods from aquatic and

42
00:02:53.850 --> 00:02:56.140
often methods from ambulatory.

43
00:02:56.160 --> 00:03:00.280
And if we look at the net in Penguin It's really really simple.

44
00:03:00.290 --> 00:03:02.980
It just calls super doesn't it.

45
00:03:03.060 --> 00:03:06.360
In a moment we'll explore what super actually referring to.

46
00:03:06.510 --> 00:03:12.510
But before we even get there let's just take a look down here I have three examples where we have Jaws

47
00:03:12.600 --> 00:03:15.090
is equal to an aquatic instance.

48
00:03:15.090 --> 00:03:17.300
Lassie is an ambulatory instance.

49
00:03:17.310 --> 00:03:24.350
And then Captain Cook is a penguin instance and we can do things like well obvious things like Jaws

50
00:03:24.410 --> 00:03:28.300
dot swim or Lassie walk.

51
00:03:28.500 --> 00:03:34.640
But let's play with Captain Cook stew print Captain Cook swim.

52
00:03:34.710 --> 00:03:37.630
And if we run it we get Captain Cook is swimming.

53
00:03:37.980 --> 00:03:38.270
All right.

54
00:03:38.280 --> 00:03:41.120
So that's coming from the aquatic Kleis.

55
00:03:41.280 --> 00:03:47.160
If I do the same thing but this time I do walk that will be coming from the ambulatory class and then

56
00:03:47.160 --> 00:03:49.800
get Captain Cook is walking.

57
00:03:49.800 --> 00:03:50.120
All right.

58
00:03:50.120 --> 00:03:51.900
So that's coming from ambulatory.

59
00:03:51.900 --> 00:03:56.850
So we have proof now that penguin is getting methods from both parent classes.

60
00:03:56.850 --> 00:04:05.070
Now the question is when I called Dot greet on Captain Cook which greet is going to be called and he

61
00:04:05.070 --> 00:04:08.140
guesses we have two.

62
00:04:08.190 --> 00:04:14.740
Both named greet and they do kind of the same thing except one says of the sea and the other says of

63
00:04:14.760 --> 00:04:15.630
the land.

64
00:04:15.870 --> 00:04:16.400
OK.

65
00:04:16.470 --> 00:04:18.490
But see what happens.

66
00:04:19.140 --> 00:04:20.160
And we get.

67
00:04:20.160 --> 00:04:22.760
I am Captain Cook of the land.

68
00:04:22.980 --> 00:04:27.300
So it's calling the version from ambulatory not from aquatic.

69
00:04:27.450 --> 00:04:29.950
And we'll talk about why in just a moment.

70
00:04:30.120 --> 00:04:35.130
There's one other thing I want to point out here already typeless up ahead of time where I'm just using

71
00:04:35.130 --> 00:04:42.260
instance of three different times with Captain Cook to see that is instance Not instance of instance

72
00:04:42.270 --> 00:04:43.780
returns true or false.

73
00:04:43.830 --> 00:04:48.960
If Captain Cook is a penguin It should be true if it's aquatic true ambulatory true.

74
00:04:48.960 --> 00:04:54.150
So we should see three trews and that's indeed what we get.

75
00:04:54.150 --> 00:04:59.520
So this shows you that in Python's mind Captain Cook is an instance of penguin but it's also instance

76
00:04:59.520 --> 00:05:06.030
of aquatic and ambulatory and on top of that it's an instance of base object which we didn't have to

77
00:05:06.030 --> 00:05:08.190
test out here but we saw that earlier.

78
00:05:08.190 --> 00:05:13.890
All right so now let's explore a bit about the order that things are happening in and the next video

79
00:05:13.890 --> 00:05:16.200
is actually going to go into a lot more detail on that.

80
00:05:16.440 --> 00:05:24.540
But for now let's just commentate everything else out here and only focus on Captain Cook when I call

81
00:05:24.750 --> 00:05:27.370
Captain Cook or penguin Captain Cook.

82
00:05:27.540 --> 00:05:30.630
This is run right a nit here in the Superdome.

83
00:05:30.660 --> 00:05:31.360
And it.

84
00:05:31.410 --> 00:05:37.740
So let's kind of trace the path that things are happening and so I'm going to do a print penguin in

85
00:05:37.740 --> 00:05:48.180
it and then appear I'm going to move into the ambulatory unit and type ambulatory in it to make that

86
00:05:48.180 --> 00:05:48.780
all caps.

87
00:05:48.780 --> 00:05:49.670
There we go.

88
00:05:49.710 --> 00:05:57.400
And one more time for aquatic I'll do aquatic in it.

89
00:05:57.420 --> 00:06:01.310
So what do we expect to see when I call super here.

90
00:06:01.620 --> 00:06:05.490
Which version or versions of a nit are actually going to run.

91
00:06:06.890 --> 00:06:07.930
Let's see.

92
00:06:09.970 --> 00:06:11.470
So we only get penguin in it.

93
00:06:11.470 --> 00:06:13.060
That makes sense that's where we started.

94
00:06:13.060 --> 00:06:20.380
We made a new Penguin and then ambulatory in it so aquatic was never called and that order again is

95
00:06:20.380 --> 00:06:24.460
something we'll talk about in the next video and how it's established that the super simple version

96
00:06:24.490 --> 00:06:26.600
is that ambulatory is first.

97
00:06:26.650 --> 00:06:34.790
If we move it after aquatic we now get penguin in it then aquatic in it.

98
00:06:35.040 --> 00:06:35.570
OK.

99
00:06:35.770 --> 00:06:37.840
So again we'll come back that in the next video.

100
00:06:37.840 --> 00:06:42.550
But one thing I want to be super up front about and make very clear we still have access to these methods

101
00:06:42.640 --> 00:06:50.500
in ambulatory and aquatic even if a it never occurs or never run in that particular class because of

102
00:06:50.500 --> 00:06:52.500
this inheritance right here.

103
00:06:52.570 --> 00:06:54.670
Guess I'm going to change it back.

104
00:06:54.730 --> 00:07:01.720
So putting the order that things are running aside let's say that we wanted both nets to execute both

105
00:07:01.720 --> 00:07:04.570
in aquatic and in ambulatory.

106
00:07:04.570 --> 00:07:09.520
I don't know if you can hear that siren but there's an ambulance side right when I'm saying ambulatory.

107
00:07:09.720 --> 00:07:10.190
OK.

108
00:07:10.330 --> 00:07:12.100
Let me edit this out.

109
00:07:12.340 --> 00:07:13.270
Ok I'm back.

110
00:07:13.480 --> 00:07:18.190
So if we want to have both in its run we can actually just manually call them.

111
00:07:18.190 --> 00:07:25.250
So if ambulatory is running we can also just call aquatic dot that will underscore net but remember

112
00:07:25.240 --> 00:07:30.850
if we're not using super We have to pass in self and then we can do name equals name.

113
00:07:30.850 --> 00:07:33.070
Now I should point out this is kind of a bad example.

114
00:07:33.100 --> 00:07:39.190
At this point because name is defined in both places aquatic and ambulatory and you probably wouldn't

115
00:07:39.190 --> 00:07:44.210
want to do that if you had multiple inheritance have the same property to find it more than one place.

116
00:07:44.230 --> 00:07:48.580
So for this example we could change name but I'm going to leave it at this for now but just know that

117
00:07:48.850 --> 00:07:51.370
we're basically redefining name.

118
00:07:52.570 --> 00:07:52.960
OK.

119
00:07:52.990 --> 00:08:02.290
So aquatic dot net self weaved past itself and now we should see all three running and I can do is better

120
00:08:02.290 --> 00:08:04.000
actually to be more explicit.

121
00:08:04.000 --> 00:08:09.280
If we wanted both in my opinion at least it would be better to say ambulatory data it and then aquatic

122
00:08:09.280 --> 00:08:09.960
down to it.

123
00:08:10.060 --> 00:08:15.160
Because if you're using both There's If you're using the word super with multiple inheritance it can

124
00:08:15.160 --> 00:08:18.190
be ambiguous as to what you're referring to.

125
00:08:18.190 --> 00:08:20.890
So my personal preference is to be explicit like this.

126
00:08:20.890 --> 00:08:27.460
And we definitely need to remember to pass in self for not using super And then we still get the same

127
00:08:27.520 --> 00:08:29.860
three and knit prints.

128
00:08:30.220 --> 00:08:30.430
OK.

129
00:08:30.430 --> 00:08:33.400
So that's all that we'll deal with with multiple inheritance for now.

130
00:08:33.430 --> 00:08:39.070
I just want you to see that it is a thing but you could probably already see from the super super simple

131
00:08:39.070 --> 00:08:45.580
example just like one property right or one attribute just a couple of methods that there's confusion

132
00:08:45.580 --> 00:08:46.940
about where the things come from.

133
00:08:47.120 --> 00:08:52.400
And you know what method belongs to what class and and what order things are happening in.

134
00:08:52.480 --> 00:08:54.220
And we'll expand on that in the next video.

135
00:08:54.340 --> 00:08:58.360
But that's kind of the reason that multiple inheritance is not often seen.

136
00:08:58.360 --> 00:09:00.330
It's a bit controversial.

137
00:09:00.400 --> 00:09:06.010
A lot of the times that come Stack Overflow people will you know post some code that uses multiple inheritance

138
00:09:06.190 --> 00:09:08.800
and a lot of the comments will focus on.

139
00:09:08.800 --> 00:09:10.240
You should really refactor this.

140
00:09:10.240 --> 00:09:13.830
You don't need to use multiple inheritance you're just overcomplicating things.

141
00:09:13.900 --> 00:09:14.890
And that's true.

142
00:09:14.980 --> 00:09:20.230
There's no just like there's no NO time you have to use object oriented programming in general.

143
00:09:20.230 --> 00:09:23.400
It's just a tool to help you organize and keep things structured.

144
00:09:23.590 --> 00:09:27.040
There's no time where you absolutely have to use multiple inheritance.

145
00:09:27.160 --> 00:09:31.990
Anyway I just wanted to introduce it to see you know that it's possible in Python you may encounter

146
00:09:31.990 --> 00:09:32.920
it maybe.

147
00:09:33.010 --> 00:09:38.530
I wouldn't count on it but in the next video this example and multiple inheritance will help us understand

148
00:09:38.860 --> 00:09:40.990
the order that methods are resolved.

149
00:09:41.080 --> 00:09:42.300
So that's coming up next.
