WEBVTT
1
00:00:00.240 --> 00:00:01.350
All right welcome back.

2
00:00:01.350 --> 00:00:06.800
So in this video we're going to talk about two of the main important ways that Python represent numbers.

3
00:00:07.080 --> 00:00:10.490
And you might be thinking isn't just a number a number.

4
00:00:10.650 --> 00:00:11.950
What's the difference.

5
00:00:12.000 --> 00:00:17.170
And in the real world a number is number one is number negative 20 is number.

6
00:00:17.460 --> 00:00:19.850
Fifty seven point seven seven five is in number.

7
00:00:20.100 --> 00:00:26.530
And in Python while those things are all numbers they are stored or represented differently.

8
00:00:26.730 --> 00:00:29.790
And it all comes down to saving space in memory.

9
00:00:29.790 --> 00:00:35.760
Remember that everything that we do whether it's numbers or words or more complex data it all gets turned

10
00:00:35.760 --> 00:00:38.060
into ones and zeros and it's stored in memory.

11
00:00:38.190 --> 00:00:45.240
And the thing is that a decimal number like we have on the right here 6.1 or 1 point 3 3 3 3 takes up

12
00:00:45.240 --> 00:00:51.810
a lot more space or it potentially takes up a lot more space than a simple home number because let's

13
00:00:51.810 --> 00:00:54.380
say let's take the number 0 and 1.

14
00:00:54.750 --> 00:00:55.050
All right.

15
00:00:55.050 --> 00:01:00.750
So if we're working with whole numbers there is one number or maximum of two numbers between 0 and 1

16
00:01:00.930 --> 00:01:01.550
0.

17
00:01:01.710 --> 00:01:07.950
And we have one but if we're talking about decimals all of a sudden there's an infinite number of numbers

18
00:01:07.950 --> 00:01:09.440
between 0 and 1.

19
00:01:09.690 --> 00:01:16.230
So Python has to account for that in memory it takes up a lot more space to kind of save room for any

20
00:01:16.230 --> 00:01:18.360
potential decimals that could come after.

21
00:01:18.630 --> 00:01:22.170
And Python won't store you know an infinite number of decimal points.

22
00:01:22.200 --> 00:01:27.600
It does eventually start to lose accuracy but it's really generally not a problem unless you need extreme

23
00:01:27.600 --> 00:01:28.760
precision.

24
00:01:28.770 --> 00:01:32.120
So actually there are four data types of numbers.

25
00:01:32.130 --> 00:01:36.420
There's another one called complex another one called long but it's really really rare that you would

26
00:01:36.420 --> 00:01:39.280
need to know about that let alone use them.

27
00:01:39.300 --> 00:01:42.030
The two important ones are integer and floating point.

28
00:01:42.260 --> 00:01:42.580
OK.

29
00:01:42.690 --> 00:01:44.010
So all comes down to space.

30
00:01:44.120 --> 00:01:52.830
Now integers are whole numbers positive or negative 4:57 negative 10 negative three thousand nine million

31
00:01:52.890 --> 00:01:57.140
whatever it is floating points in the other hand also positive or negative.

32
00:01:57.240 --> 00:01:58.960
But they have decimals after them.

33
00:01:59.220 --> 00:02:08.820
So even if it's a whole number like 1.0 if it has that point oh it's a floating point 6.1 1.3 333 all

34
00:02:08.850 --> 00:02:09.770
floating points.

35
00:02:09.900 --> 00:02:13.080
And you often hear people refer to them as floats.

36
00:02:13.140 --> 00:02:14.220
Those people include me.

37
00:02:14.370 --> 00:02:19.920
So when I say float just referring to numbers that are floating point that have decimals versus an integer

38
00:02:19.920 --> 00:02:20.870
is a whole number.

39
00:02:20.870 --> 00:02:24.490
So integers take up less space floating points take up more space.

40
00:02:24.520 --> 00:02:27.030
OK so I'm going to hop over to my terminal.

41
00:02:27.210 --> 00:02:32.370
I'm working in a directory that I made called numbers in math if you want to follow along with the exact

42
00:02:32.370 --> 00:02:32.950
same way.

43
00:02:33.060 --> 00:02:34.740
I'm not going to make a new file just yet.

44
00:02:34.740 --> 00:02:40.320
I'm actually going to open up my Python 3 interpreter and we can do something really silly like just

45
00:02:40.320 --> 00:02:44.210
type a number and it just gives us back the same number.

46
00:02:44.340 --> 00:02:47.160
But what I want to show you is something a bit more advanced.

47
00:02:47.340 --> 00:02:48.540
It's called a function.

48
00:02:48.540 --> 00:02:52.950
We're not going to discuss it in this section so just ignore that question in your mind about what a

49
00:02:52.950 --> 00:02:54.550
function is we will get there.

50
00:02:54.660 --> 00:02:59.970
But there's a function called type and we give it a number or eventually we can give it other types

51
00:02:59.970 --> 00:03:00.270
of data.

52
00:03:00.270 --> 00:03:05.770
But for now we're working with numbers like nine and I hit enter in between those parentheses passing

53
00:03:05.790 --> 00:03:09.700
the number and it will tell me hey that's an integer.

54
00:03:09.750 --> 00:03:12.880
Don't worry about what this class thing is we'll get to that aswell.

55
00:03:13.350 --> 00:03:19.530
And I can do the same thing but this time let's do 9.00 and it tells me that's a float.

56
00:03:19.530 --> 00:03:20.710
Or we could do.

57
00:03:20.740 --> 00:03:21.480
No no no no no no.

58
00:03:21.480 --> 00:03:24.200
Nine point two that's a float.

59
00:03:24.460 --> 00:03:27.890
Well nine nine nine nine without the Point two is in it.

60
00:03:28.230 --> 00:03:28.740
OK.

61
00:03:28.860 --> 00:03:31.200
So again don't worry about what a function is.

62
00:03:31.230 --> 00:03:36.290
I just want to show you that there's a way to actually discern what type a number is.

63
00:03:36.300 --> 00:03:42.690
So now that we've seen the two main types of numbers I want to mention that Python is not just a glorified

64
00:03:42.690 --> 00:03:43.450
calculator.

65
00:03:43.520 --> 00:03:49.800
It's not what this course is about but we can use it as one we can do simple math we can do one plus

66
00:03:49.800 --> 00:03:55.720
one five minus three or you get really fancy and combine a couple of numbers and operators one flows

67
00:03:55.740 --> 00:03:57.070
for minus two.

68
00:03:57.270 --> 00:04:02.510
So I encourage you to play around just for a moment try some operations in the next video.

69
00:04:02.520 --> 00:04:04.980
I'm going to talk about things like order of operations.

70
00:04:05.040 --> 00:04:06.800
I'll show you a couple other operators.

71
00:04:07.080 --> 00:04:08.420
But really quickly.

72
00:04:08.580 --> 00:04:09.740
Let's do something like.

73
00:04:09.930 --> 00:04:13.980
One plus three.

74
00:04:13.990 --> 00:04:15.210
Now here's a question for you.

75
00:04:15.400 --> 00:04:24.290
What happens when I do let's say one plus one point oh what's the result going to be.

76
00:04:25.530 --> 00:04:27.750
And you can see we get 2.0.

77
00:04:28.180 --> 00:04:33.940
So rather than just turning it into an integer if any part of the expression is a float the end result

78
00:04:34.060 --> 00:04:35.900
will be a float.

79
00:04:35.950 --> 00:04:36.490
All right.

80
00:04:36.490 --> 00:04:45.680
So we can do things like add an integer like 20 and add 0.7 7:07 to it and we get 20 point 7 7 7.

81
00:04:45.700 --> 00:04:49.720
I won't bore you with doing a bunch for math but the key thing I want you to take away here is that

82
00:04:49.780 --> 00:04:54.390
when you do math with an integer and a float Python will give you a float back.

83
00:04:54.400 --> 00:04:55.840
So I'll leave it at that for now.

84
00:04:55.850 --> 00:05:01.030
Remember two types integers all numbers floats have decimal points and that's it.

85
00:05:01.030 --> 00:05:01.630
Next up.

86
00:05:01.720 --> 00:05:03.070
Let's do some simple math.
