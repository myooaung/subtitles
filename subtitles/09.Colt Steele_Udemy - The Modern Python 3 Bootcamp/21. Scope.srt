1
00:00:00,300 --> 00:00:01,920
Hello welcome back.

2
00:00:01,920 --> 00:00:09,210
So this video is on a topic that I think is a little bit dreadfuls probably too strong of a word but

3
00:00:09,540 --> 00:00:12,330
let's just say not exciting.

4
00:00:12,420 --> 00:00:16,890
It's an important topic though and it's one that's going to come up a lot more when we talk about object

5
00:00:16,890 --> 00:00:19,380
oriented programming and defining our own classes.

6
00:00:19,380 --> 00:00:25,800
But it's a topic called scope and it basically refers to the fact that variables and properties in Python

7
00:00:26,010 --> 00:00:30,720
are not always available in every single part of an application or an every single part of our code.

8
00:00:30,750 --> 00:00:36,000
There are rules governing where our variables can be accessed and so far we haven't encountered any

9
00:00:36,000 --> 00:00:42,450
problems because we haven't been working with multiple functions or nested functions or basically anything

10
00:00:42,450 --> 00:00:44,070
that would cause scope issues.

11
00:00:44,070 --> 00:00:47,200
So what I want to do in this video is just introduce the idea of scope.

12
00:00:47,280 --> 00:00:51,680
Show you a couple of problems that arise with functions and solutions to get around them.

13
00:00:51,960 --> 00:00:58,020
So the first thing to know is that in any function whenever we define a variable inside that function

14
00:00:58,500 --> 00:01:04,050
it is scoped to that function meaning it's only available inside that function.

15
00:01:04,050 --> 00:01:05,430
So here's an example.

16
00:01:05,490 --> 00:01:11,280
In this case where this variable instructor is not defined inside of the function it's defined up top

17
00:01:11,900 --> 00:01:12,690
outside.

18
00:01:12,840 --> 00:01:17,800
And that's called in the global scope to come back to and inside of say hello.

19
00:01:17,820 --> 00:01:21,290
I am just returning that value which should be called.

20
00:01:21,480 --> 00:01:24,090
And then we run to say hello we get hello cold.

21
00:01:24,480 --> 00:01:32,240
So this is should not be new but this example we have say hello where we're defining instructor inside

22
00:01:32,250 --> 00:01:32,960
of say hello.

23
00:01:33,030 --> 00:01:35,550
So it is scoped right here.

24
00:01:35,730 --> 00:01:39,850
An instructor is only available inside the bounds of this function.

25
00:01:39,990 --> 00:01:45,090
So up to here and afterwards so we can run say hello and it works.

26
00:01:45,300 --> 00:01:47,480
It's going to print erve return.

27
00:01:47,490 --> 00:01:48,950
Hello instructor.

28
00:01:49,140 --> 00:01:54,630
But if I try and then print instructor directly I can't access the variable instructor.

29
00:01:54,690 --> 00:01:56,550
Outside of this function.

30
00:01:57,090 --> 00:01:58,310
So let me show you proof of that.

31
00:01:58,320 --> 00:01:59,700
I have the same code here.

32
00:01:59,850 --> 00:02:06,340
I have instructor defined inside of say hello and if I try and run this I get name.

33
00:02:06,350 --> 00:02:13,220
Instructor is not defined as he can see here and let me actually change this of the instructor to an

34
00:02:13,250 --> 00:02:22,500
instructor one and I'll have this equal to how about Mary and instructor to his colt so I can print

35
00:02:22,680 --> 00:02:24,980
instructor one.

36
00:02:25,700 --> 00:02:30,750
But if I try printing instructor too and I change this to be instructor too I should be able to print

37
00:02:30,750 --> 00:02:33,870
instructor one afterwards but not instructor too.

38
00:02:33,900 --> 00:02:39,540
And you can see I get Mary but then Python freaks out with instructor too because it only exists inside

39
00:02:39,540 --> 00:02:40,840
of this function.

40
00:02:41,160 --> 00:02:45,770
So this is a really important concept when you define a function and you have variables in there.

41
00:02:45,810 --> 00:02:51,790
Whether it's instructor or a list or 20 other variables they are scoped to that function.

42
00:02:51,810 --> 00:02:54,100
They're not available outside of it.

43
00:02:54,150 --> 00:02:58,920
There are ways of having access to them outside of that exact function.

44
00:02:58,950 --> 00:03:00,910
For example you can return them.

45
00:03:01,080 --> 00:03:02,640
So here we're returning.

46
00:03:02,820 --> 00:03:03,620
Well it's a string.

47
00:03:03,630 --> 00:03:09,360
Hello instructor but we could also just return instructor and we would have access to it any time we

48
00:03:09,360 --> 00:03:11,660
called to say hello we could save it to a variable.

49
00:03:11,760 --> 00:03:16,950
But as far as talking about the strategies and structuring our programs I'm going to wait to handle

50
00:03:16,950 --> 00:03:21,220
scope in that context until we talk about object oriented programming and classes.

51
00:03:21,240 --> 00:03:26,430
So for now just know functions have their own scope and we can access variables outside of those functions

52
00:03:26,430 --> 00:03:28,270
that are defined inside of a function.

53
00:03:29,320 --> 00:03:31,800
Now next up is this thing called Global.

54
00:03:31,840 --> 00:03:34,740
I talked about how there is a global scope.

55
00:03:34,750 --> 00:03:38,430
So for example this variable right here is called Total.

56
00:03:38,440 --> 00:03:40,710
It's not defined inside of a function.

57
00:03:40,720 --> 00:03:45,010
This is every variable we've defined well pretty much every variable so far.

58
00:03:45,150 --> 00:03:48,780
That's not in a function it is considered a global variable.

59
00:03:49,120 --> 00:03:56,200
And there's a problem if I try and actually manipulate the global variable inside of a function like

60
00:03:56,200 --> 00:04:01,570
I tried right here where I have a function increment and it just says OK take this variable total and

61
00:04:01,570 --> 00:04:05,470
add 1 to it and then return total seems like that should work.

62
00:04:05,500 --> 00:04:07,380
But it actually doesn't.

63
00:04:07,600 --> 00:04:08,570
Here's proof for you.

64
00:04:08,610 --> 00:04:12,640
It's the exact same code but try running it.

65
00:04:12,640 --> 00:04:18,940
I get this error local variable total referenced before assignment and this actually tells us a lot.

66
00:04:19,030 --> 00:04:25,270
It not only says that it can't find the variable total but it says that it's looking for a local variable.

67
00:04:25,300 --> 00:04:32,200
So because we're inside of a function when we referenced total It assumes that there is a local variable

68
00:04:32,200 --> 00:04:35,070
scoped to this function called total.

69
00:04:35,080 --> 00:04:39,680
And the reason for this is that it's actually not really a good idea to use global variables.

70
00:04:39,730 --> 00:04:42,820
Sometimes you need to but you want to minimize the number of them.

71
00:04:42,970 --> 00:04:44,710
But that is for another conversation.

72
00:04:44,710 --> 00:04:46,430
When we talk about object oriented programming.

73
00:04:46,480 --> 00:04:52,630
So for now we do have global variables and if we need to have one if we needed something this is a silly

74
00:04:52,630 --> 00:04:57,330
example because we don't have to have a global total we could move this inside.

75
00:04:57,580 --> 00:05:03,490
But for now just to explain how all this works there is a way to tell Python don't look for a local

76
00:05:03,490 --> 00:05:08,620
variable inside this function called Total look for a global variable called total and that looks like

77
00:05:08,620 --> 00:05:09,680
this.

78
00:05:09,870 --> 00:05:11,460
The global keyword.

79
00:05:11,680 --> 00:05:16,510
So what this line says right here instead of the increment function it's basically saying whenever I

80
00:05:16,510 --> 00:05:21,760
use the total variable name I'm actually referring to the global variable total.

81
00:05:22,030 --> 00:05:27,740
So this one up here and we have to do this first before we can actually manipulate total.

82
00:05:27,760 --> 00:05:35,260
So if we go back to our first little bit of code over here and I just add in global floatable global

83
00:05:35,320 --> 00:05:42,100
total I'm saying hey guys inside this function total refers to this total the global one.

84
00:05:42,130 --> 00:05:45,170
Now if I try executing it well we don't get an error.

85
00:05:45,370 --> 00:05:47,670
Let's actually print out the results.

86
00:05:47,690 --> 00:05:49,180
So print.

87
00:05:49,360 --> 00:05:50,640
There we go.

88
00:05:51,220 --> 00:05:53,640
And we now get the correct total which is 1.

89
00:05:53,950 --> 00:05:56,680
And every time I run this in a stupid little function.

90
00:05:56,700 --> 00:06:01,660
But I should increment total by 1 and then if we printed out we should see two and three and so on next

91
00:06:01,660 --> 00:06:02,650
time.

92
00:06:02,650 --> 00:06:08,080
So the key thing to takeaway here if I want to manipulate a variable that is not defined inside of this

93
00:06:08,080 --> 00:06:09,680
function it's in the global scope.

94
00:06:09,820 --> 00:06:15,580
I need to first tell Python what I'm referring to when I say total because by default it's looking inside

95
00:06:15,580 --> 00:06:19,840
of this function exclusively to find something called Total.

96
00:06:19,870 --> 00:06:25,090
The other thing I should mention if we're only doing this be common to all this out if I'm only trying

97
00:06:25,090 --> 00:06:28,200
to access a value I'm not trying to change it.

98
00:06:28,210 --> 00:06:38,050
So for example I have name set to Rusty and if I have a function that just says def greet and all that

99
00:06:38,050 --> 00:06:41,810
it does is print name.

100
00:06:42,010 --> 00:06:47,960
Very silly but if I called greeds just like this it's going to work just fine.

101
00:06:48,070 --> 00:06:50,180
We're able to access the value.

102
00:06:50,290 --> 00:06:54,310
I can say what is the value of the name variable.

103
00:06:54,730 --> 00:07:02,620
And that works you can see we get rusty but as soon as I try and do something like name plus equals

104
00:07:03,190 --> 00:07:07,150
steal I want to add my last name to Rusty and it run it.

105
00:07:07,150 --> 00:07:11,020
Now we get the same problem name is not defined in the local scope.

106
00:07:11,020 --> 00:07:17,380
Now if I did name equals rest steel if we take a look.

107
00:07:17,380 --> 00:07:24,280
Now that should work just fine because I am defining a name variable in the local scope.

108
00:07:24,340 --> 00:07:28,590
So if I don't care what was it what was in name before I could just overwrite it.

109
00:07:28,600 --> 00:07:35,980
But if I'm trying to manipulate the existing value I need to first say global name like we did up here.

110
00:07:36,100 --> 00:07:36,650
OK.

111
00:07:36,970 --> 00:07:38,910
So that's that for global.

112
00:07:38,950 --> 00:07:43,390
I know it's kind of weird heady stuff it's maybe not the most intuitive thing ever.

113
00:07:43,390 --> 00:07:44,170
One last thing.

114
00:07:44,170 --> 00:07:45,320
Talk about the scope.

115
00:07:45,400 --> 00:07:46,850
And then we can take a breather.

116
00:07:46,870 --> 00:07:50,050
There's another keyword called non local non-local.

117
00:07:50,050 --> 00:07:54,320
Let us modify a parent's variables in a nested function.

118
00:07:54,340 --> 00:08:01,320
So for example here I have a function called Outer with a variable set to count and then enter.

119
00:08:01,420 --> 00:08:07,580
I'm able to access this count variable manipulate it because I've declared it as non local.

120
00:08:07,840 --> 00:08:13,140
So it's very similar to global except count right here is not a global variable.

121
00:08:13,270 --> 00:08:18,640
It's not defined in a global scope it's defined in the outer function's own scope.

122
00:08:18,640 --> 00:08:23,950
So this keyword non-local basically says this variable count that I'm referring to from here on out

123
00:08:24,100 --> 00:08:30,780
is not defined in inner and it's not defined in the global scope but it's find in a parent or some other

124
00:08:30,780 --> 00:08:32,570
function that I'm nested inside of.

125
00:08:32,670 --> 00:08:37,920
So we can take a deep breath because as this note indicates you'll know you will not find yourself using

126
00:08:37,920 --> 00:08:43,230
global or non-local all that often but it may help illustrate how scope works.

127
00:08:43,410 --> 00:08:48,300
And it's really important to understand the just the concept of scope that not every bit of data is

128
00:08:48,300 --> 00:08:51,480
available everywhere in a Python application or program.

129
00:08:51,480 --> 00:08:56,790
It really depends on how it's broken up into functions and then really into classes and objects which

130
00:08:56,790 --> 00:08:59,200
will spend a lot of time talking about scope then.

131
00:08:59,220 --> 00:09:03,630
So my advice to you is to not get too hung up on any of the stuff in this video.

132
00:09:03,630 --> 00:09:08,310
I just wanted to kind of put it out there laid on the table say hey there's this thing called scope.

133
00:09:08,310 --> 00:09:11,330
Don't freak out though because we all spend a lot of time with it.

134
00:09:11,430 --> 00:09:16,350
What's most important at this point is getting comfortable with functions writing functions with parameters

135
00:09:16,350 --> 00:09:18,960
and default parameters and return values and all of that.

136
00:09:19,050 --> 00:09:19,650
OK.
