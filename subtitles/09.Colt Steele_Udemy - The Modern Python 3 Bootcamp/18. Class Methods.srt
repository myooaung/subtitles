1
00:00:00,240 --> 00:00:01,530
Hey welcome back.

2
00:00:01,530 --> 00:00:06,150
So we've seen how to define a class with instance attributes and instance methods.

3
00:00:06,390 --> 00:00:08,610
Then we saw how to use class attributes.

4
00:00:08,700 --> 00:00:14,580
So the next logical step is to see class methods and I'll start off by saying that these are actually

5
00:00:14,580 --> 00:00:16,140
pretty rare in the wild.

6
00:00:16,140 --> 00:00:23,910
They're not all that commonly used instance methods are used by far more often like 50 maybe 100 times

7
00:00:23,910 --> 00:00:24,480
as often.

8
00:00:24,480 --> 00:00:28,990
In my experience at least most of this stuff will be writing or instance methods.

9
00:00:29,040 --> 00:00:33,630
But with that said it's good that you know how to write a class method and you'll know how to recognize

10
00:00:33,630 --> 00:00:36,790
one if you see it on something else that you didn't write.

11
00:00:36,810 --> 00:00:39,020
So let's just dive into it.

12
00:00:39,090 --> 00:00:45,690
Class methods are methods that are not concerned with specific instances but with the class itself.

13
00:00:45,690 --> 00:00:52,170
So just like a class attribute is not concerned with individual you know specifics of a given instance

14
00:00:52,170 --> 00:00:55,100
of that class it's concerned with the class itself.

15
00:00:55,230 --> 00:00:56,800
Same thing with class methods.

16
00:00:57,030 --> 00:01:02,960
And because of this there are a lot less commonly used and frankly less useful but sometimes there's

17
00:01:02,970 --> 00:01:08,430
some functionality that doesn't care about the instances it doesn't matter about the specifics of a

18
00:01:08,430 --> 00:01:15,420
given user or a given pet or ored card deck or poker hand and it's concerned with the whole concept

19
00:01:15,510 --> 00:01:17,560
of a poker hand or a user.

20
00:01:17,640 --> 00:01:19,090
And so that could go on the class.

21
00:01:19,110 --> 00:01:20,280
So I'll show you an example.

22
00:01:20,340 --> 00:01:24,900
Before we go any further you might have noticed I skipped this little parent that ocal here when I was

23
00:01:24,900 --> 00:01:25,970
reading it out loud.

24
00:01:26,190 --> 00:01:30,480
So class methods or methods with the at class method decorator.

25
00:01:30,480 --> 00:01:32,640
So we haven't talked about decorator's yet.

26
00:01:32,640 --> 00:01:34,450
Basically all say about it for now.

27
00:01:34,560 --> 00:01:36,390
It's a little bit of Python magic.

28
00:01:36,390 --> 00:01:37,580
Syntactic sugar.

29
00:01:37,610 --> 00:01:40,860
So what people would call it that goes in front of a class method.

30
00:01:41,160 --> 00:01:43,290
So this here's a class method.

31
00:01:43,290 --> 00:01:44,540
Don't worry about what it does.

32
00:01:44,670 --> 00:01:50,040
But notice that this at class method is on the line in front of it and or before it and that signifies

33
00:01:50,040 --> 00:01:54,360
that the next method is actually a class method not an instance method.

34
00:01:54,600 --> 00:01:59,430
So by default to make something in an instance method we don't do anything special because are just

35
00:01:59,430 --> 00:02:00,720
so much more commonly used.

36
00:02:00,750 --> 00:02:02,790
It made sense to make that the default.

37
00:02:02,880 --> 00:02:08,500
And when you do need a class method you preface it with at class method just like this in a bit we'll

38
00:02:08,520 --> 00:02:11,060
actually learn how to define our own decorator's.

39
00:02:11,130 --> 00:02:15,360
This is a decorator here and you'll come to understand how this works and what it's doing behind the

40
00:02:15,360 --> 00:02:15,780
scenes.

41
00:02:15,780 --> 00:02:20,330
For now though let's just consider it Python magic that makes this a class method.

42
00:02:20,580 --> 00:02:20,790
OK.

43
00:02:20,790 --> 00:02:22,520
So let's actually define our own.

44
00:02:22,560 --> 00:02:25,550
Here I have that same user class we've been working with.

45
00:02:25,620 --> 00:02:27,800
I just made a new file called class methods.

46
00:02:27,870 --> 00:02:29,660
Why copy this in.

47
00:02:29,970 --> 00:02:32,250
So I'm going to show you two examples of class methods.

48
00:02:32,250 --> 00:02:34,780
The first is going to be a simpler example.

49
00:02:34,810 --> 00:02:36,300
That's not all that realistic.

50
00:02:36,360 --> 00:02:41,270
And the second is going to be a more commonly use or more common use case for class methods.

51
00:02:41,280 --> 00:02:42,900
But it's a little harder to grasp.

52
00:02:42,900 --> 00:02:44,340
So I'm going to start with a basic one.

53
00:02:44,460 --> 00:02:50,550
We have this class attribute active users we could define a method that would just return of 0 statement

54
00:02:50,550 --> 00:02:53,750
that says how many active users there are at any given time.

55
00:02:53,760 --> 00:02:57,090
So first up let's talk about where to define class methods.

56
00:02:57,090 --> 00:03:00,950
There's not actually a standard like for many other things.

57
00:03:01,050 --> 00:03:04,590
You know these magic methods that Dunner methods should go up top.

58
00:03:04,590 --> 00:03:06,450
They don't have to but they should.

59
00:03:06,450 --> 00:03:10,680
And that's kind of accepted as common and convention with class methods.

60
00:03:10,680 --> 00:03:12,650
There isn't an equivalent style.

61
00:03:12,720 --> 00:03:16,000
So it's up to you but you should just be consistent for now.

62
00:03:16,020 --> 00:03:21,030
Just because these files are educational I'm going to put the new stuff up top so you don't have to

63
00:03:21,030 --> 00:03:23,870
scroll to the bottom to see any of the new class methods.

64
00:03:23,940 --> 00:03:28,410
But that's not me saying that every class method should go at the top of every class.

65
00:03:28,440 --> 00:03:28,940
OK.

66
00:03:29,160 --> 00:03:30,810
So we could define a class method.

67
00:03:30,810 --> 00:03:36,960
We start with this class method at class method decorator and then we define the name of the function

68
00:03:37,070 --> 00:03:40,460
and the method must just call this one display.

69
00:03:40,530 --> 00:03:42,520
Active Users or something.

70
00:03:42,540 --> 00:03:48,450
And the thing about class methods automatically the class is going to be passed in this method whenever

71
00:03:48,450 --> 00:03:49,460
we call it.

72
00:03:49,470 --> 00:03:56,730
So rather than self just like down here Python automatically passes in the instance of the user and

73
00:03:56,730 --> 00:03:58,680
calls itself as a parameter.

74
00:03:58,680 --> 00:04:00,700
Here we could name this self.

75
00:04:00,720 --> 00:04:02,460
Remember the name doesn't actually matter.

76
00:04:02,760 --> 00:04:05,870
But the standard is to go with CLX for class.

77
00:04:06,150 --> 00:04:12,740
So this signifies to us that what we'll be working with inside of this method is not an instance it's

78
00:04:12,750 --> 00:04:14,180
the actual class.

79
00:04:14,370 --> 00:04:22,350
So if I just did a print CLX here you'll actually see that Skelos is the class user not an instance

80
00:04:22,440 --> 00:04:23,660
of user.

81
00:04:23,670 --> 00:04:24,650
So let me just show you that.

82
00:04:24,650 --> 00:04:27,050
Now to call class methods.

83
00:04:27,290 --> 00:04:27,990
Let's go down.

84
00:04:27,980 --> 00:04:35,900
I have two users I can call user one dot what we call that display active users.

85
00:04:36,120 --> 00:04:43,320
But I also can do user display capital you user and that's what I prefer because it makes it clear that

86
00:04:43,320 --> 00:04:46,740
we're calling a class method has nothing to do with this instance.

87
00:04:46,830 --> 00:04:50,430
So we can technically do this and I'll show you both.

88
00:04:50,430 --> 00:04:51,910
Let's start with this one.

89
00:04:51,930 --> 00:04:57,300
Just print user display active for users and need purines of course to execute it.

90
00:04:58,170 --> 00:04:58,820
And there you go.

91
00:04:58,860 --> 00:05:05,000
You can see that CLX the parameter what was passed in was the actual class user.

92
00:05:05,150 --> 00:05:06,020
It's not an instant.

93
00:05:06,020 --> 00:05:10,740
You don't see that whole object id thing with all those numbers afterwards like we would if we printed

94
00:05:10,760 --> 00:05:11,600
self-oust.

95
00:05:11,990 --> 00:05:14,390
And just to show you we can do the exact same thing.

96
00:05:14,390 --> 00:05:22,270
I actually don't need to print this because I'm calling print in there execute it now we get the same

97
00:05:22,270 --> 00:05:22,900
thing.

98
00:05:23,200 --> 00:05:29,650
So either syntax to call it we can call the instance dot class method or the class named class method

99
00:05:29,950 --> 00:05:35,020
either way because we defined it as a class method the class will be the first argument that's passed

100
00:05:35,020 --> 00:05:35,210
in.

101
00:05:35,210 --> 00:05:36,550
In this case user.

102
00:05:36,550 --> 00:05:42,970
So as far as some functionality here we could just do a return to an F string and we'll just return

103
00:05:42,970 --> 00:05:44,730
how many users there are.

104
00:05:44,720 --> 00:05:46,080
So we'll say something like.

105
00:05:46,210 --> 00:05:49,470
There are ups I don't want that inside those braces.

106
00:05:49,540 --> 00:05:59,000
There are currently and then in the Brace's reference CLX active users just like that.

107
00:05:59,470 --> 00:06:04,960
And after that what we want let's say active users.

108
00:06:05,140 --> 00:06:08,130
There are currently three active users something like that.

109
00:06:08,140 --> 00:06:12,990
So now to print that comment that out or delete that will make two users.

110
00:06:13,330 --> 00:06:19,090
And now we can use to use or not display active users we need to print the whole thing and then let's

111
00:06:19,090 --> 00:06:22,690
do it twice and make two more users afterwards.

112
00:06:22,840 --> 00:06:25,950
And before I forget we need print to execute that.

113
00:06:26,200 --> 00:06:29,920
And if we call it now we get there are currently two active users.

114
00:06:29,920 --> 00:06:33,980
Then we created two more users than there are currently four active users.

115
00:06:34,000 --> 00:06:36,740
So that is a very simple class method.

116
00:06:36,790 --> 00:06:42,550
It could be a class method in this case because it doesn't rely on any information that is particular

117
00:06:42,550 --> 00:06:43,300
to an instance.
