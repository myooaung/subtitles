1
00:00:00,150 --> 00:00:01,260
All right welcome back.

2
00:00:01,260 --> 00:00:03,600
So in this video I want to talk about sequel injection.

3
00:00:03,600 --> 00:00:07,830
I want to show you an example or two of things that you definitely want to avoid and how they could

4
00:00:07,830 --> 00:00:09,550
potentially be exploited.

5
00:00:09,900 --> 00:00:15,570
So typically we'd be talking about web apps or some form of an application where you know it's out to

6
00:00:15,570 --> 00:00:21,960
the general public and people are logging in or are searching or doing something where they're interacting

7
00:00:21,960 --> 00:00:23,340
with your database.

8
00:00:23,340 --> 00:00:27,420
They're searching for something that search term then goes and you find all things that match in the

9
00:00:27,420 --> 00:00:30,140
database or they log in with their username and password.

10
00:00:30,210 --> 00:00:36,240
And this is actually kind of a bad example because if you knew what you were doing you would never store

11
00:00:36,240 --> 00:00:39,780
a password as text you would never do what I'm about to show you.

12
00:00:39,900 --> 00:00:43,710
But with the example I'm going to show you this is a terrible exploit.

13
00:00:43,710 --> 00:00:46,290
So the first example you'll notice I'm using a different database.

14
00:00:46,290 --> 00:00:49,590
It's not the friends database anymore or my friends.

15
00:00:49,590 --> 00:00:50,500
It's called users.

16
00:00:50,550 --> 00:00:56,250
And I already inserted I already created a single table called users where we're just storing a username

17
00:00:56,250 --> 00:00:57,250
and password.

18
00:00:57,420 --> 00:01:01,100
And basically what I want to do is to simulate.

19
00:01:01,140 --> 00:01:06,060
We can imagine it's a web app but it's going to just be a Terminal app or a command line based app where

20
00:01:06,060 --> 00:01:08,150
it asks for a username in and ask for a password.

21
00:01:08,190 --> 00:01:14,280
And if those match the given username and password or the password stored for a username in the database

22
00:01:14,580 --> 00:01:17,990
then we'll say you know successfully logged in or something.

23
00:01:18,000 --> 00:01:25,800
So if we look at the database and I just do select star from users you'll see I have three users in

24
00:01:25,800 --> 00:01:26,070
there.

25
00:01:26,070 --> 00:01:31,580
So colt is a user name and that's the password was the username password and then blue.

26
00:01:31,630 --> 00:01:37,440
She's a cat she doesn't really have you know highly evolved ideas about passwords and security so her

27
00:01:37,440 --> 00:01:38,880
password is meow.

28
00:01:39,090 --> 00:01:45,750
So I need to log in with a username and the corresponding password and the query we're going to do basically

29
00:01:45,750 --> 00:01:53,440
looks like this select star from users where username equals and let's say I enter.

30
00:01:53,550 --> 00:01:54,580
That's going to be an annoying one.

31
00:01:54,600 --> 00:01:55,750
Let's do blue.

32
00:01:56,400 --> 00:01:59,630
And password has to match.

33
00:01:59,820 --> 00:02:03,270
So password would need to be meow in order to select who.

34
00:02:03,480 --> 00:02:05,010
So password was something else.

35
00:02:05,160 --> 00:02:06,600
We don't get anything back.

36
00:02:06,840 --> 00:02:08,390
So it's simulating.

37
00:02:08,430 --> 00:02:10,240
Remember these are going to be variables.

38
00:02:10,350 --> 00:02:12,120
These aren't going to be hard coded in.

39
00:02:12,150 --> 00:02:13,860
So we're going to ask a user to provide those.

40
00:02:13,860 --> 00:02:18,810
And if the user gets the right combination we'll say welcome back and if they don't we'll say failed

41
00:02:18,810 --> 00:02:20,240
log in or something like that.

42
00:02:20,460 --> 00:02:24,930
And remember it's not a good idea to store your passwords directly like this ever.

43
00:02:24,930 --> 00:02:27,100
I'm not trying to say that this is how you should do it.

44
00:02:27,290 --> 00:02:33,300
I'm doing this all to show you what could happen if you're not sanitizing your inputs if you're allowing

45
00:02:33,300 --> 00:02:39,070
users to just write pure sequel basically and you're injecting it into another query.

46
00:02:39,210 --> 00:02:42,960
So it's exit out of this no just type fancy character.

47
00:02:42,960 --> 00:02:45,400
There we go and let's come back here.

48
00:02:45,480 --> 00:02:54,720
We're going to have a query that looks like select star from users where username equals and we'll come

49
00:02:54,720 --> 00:03:00,430
back to that and password equals and we'll fill that in in a moment too.

50
00:03:00,930 --> 00:03:07,410
But let's start by asking a user name for or asking a user for their user name so it's a user name equals

51
00:03:08,040 --> 00:03:10,940
action is going to do you to make it shorter.

52
00:03:11,460 --> 00:03:24,090
Input Please enter your username and then we'll do password equals input please enter your password.

53
00:03:24,450 --> 00:03:24,940
OK.

54
00:03:25,170 --> 00:03:26,940
So we have those two bits of data.

55
00:03:27,180 --> 00:03:29,130
Then we're going to make a query.

56
00:03:29,130 --> 00:03:32,430
So I'll just call it query and make it an F string.

57
00:03:32,430 --> 00:03:34,640
And remember this is not what you want to do.

58
00:03:34,650 --> 00:03:36,210
I had a video on this already.

59
00:03:36,210 --> 00:03:41,820
We don't want it directly at our data in like this but I would put you right there inside the quotes

60
00:03:42,390 --> 00:03:44,900
and then he goes right here.

61
00:03:45,330 --> 00:03:51,000
So if all things worked whatever our username is whatever the password is our query is just going to

62
00:03:51,000 --> 00:03:56,640
have those stuck in there if we are non-malicious if we're a nice user who is not trying to exploit

63
00:03:56,880 --> 00:04:00,130
the fact that we're just interpolating variables this should work.

64
00:04:00,420 --> 00:04:01,980
And let's take a look.

65
00:04:02,040 --> 00:04:06,450
I'll do a c and do it after I create see.

66
00:04:06,540 --> 00:04:14,230
Execute query and then let's do that fetch one and just print that.

67
00:04:14,290 --> 00:04:22,380
Those make it a variable result and then will do if results.

68
00:04:22,380 --> 00:04:23,080
Print.

69
00:04:23,250 --> 00:04:25,050
Welcome back.

70
00:04:25,080 --> 00:04:29,530
Otherwise we'll print failed loggin.

71
00:04:29,980 --> 00:04:32,440
OK so now we have the set up here.

72
00:04:32,790 --> 00:04:36,950
And if a user enters a matching username and password we should see welcome back.

73
00:04:36,960 --> 00:04:40,640
So let's begin by testing out the happy scenario.

74
00:04:40,830 --> 00:04:46,590
Please enter my username so blue and then meow and we get we'll come back if I try tried again with

75
00:04:46,590 --> 00:04:48,720
blue and a wrong password.

76
00:04:48,720 --> 00:04:50,100
We get failed log in.

77
00:04:50,340 --> 00:04:50,880
OK.

78
00:04:51,060 --> 00:04:53,880
So that all is how we would want it to work.

79
00:04:53,880 --> 00:05:00,010
But the thing is because we're not sanitizing or not parameterize parameter rising are our inputs.

80
00:05:00,030 --> 00:05:06,790
We're just sticking them directly into the sequel query a user could actually write sequel in as part

81
00:05:06,790 --> 00:05:07,620
of their password.

82
00:05:07,630 --> 00:05:14,290
So let me show you an example instead of this let's say I don't know Culp's password it's a really long

83
00:05:14,290 --> 00:05:22,480
password anyway but I'm going to do is type a single quote and then that essentially ends the password

84
00:05:23,680 --> 00:05:30,190
and then I'm going to say or one equals one and I'll come back to why I'm doing that and then I'm going

85
00:05:30,190 --> 00:05:33,670
to add this comment and then I'm going to hit enter.

86
00:05:33,890 --> 00:05:35,240
And it says Welcome back.

87
00:05:35,240 --> 00:05:36,380
What is that about.

88
00:05:36,770 --> 00:05:40,420
Well let's step through what I just did over here.

89
00:05:40,430 --> 00:05:47,900
So if this is the query that we're trying to complete and I came in and said user name was called.

90
00:05:47,900 --> 00:05:48,940
So that's all good.

91
00:05:49,100 --> 00:05:50,590
And password is.

92
00:05:50,590 --> 00:05:56,290
I came right in here and I typed a single quote which sublimest is annoying.

93
00:05:56,300 --> 00:05:59,200
It just deleted that single quote.

94
00:05:59,240 --> 00:06:08,720
But I typed this single quote right here and that ended the password and then I said and I said or one

95
00:06:08,720 --> 00:06:16,000
equals one and if we ignore so ignore this at the end what I'm basically saying is select star from

96
00:06:16,000 --> 00:06:23,560
users where username is called and password is empty string or one equals one which is always true.

97
00:06:23,560 --> 00:06:27,710
That's basically me saying Do all of that stuff or just true.

98
00:06:27,760 --> 00:06:32,280
And remember the way that works if if one side is true the whole thing is true.

99
00:06:32,620 --> 00:06:39,850
So this actually selects all users select start from users where one is one select all from users where

100
00:06:39,940 --> 00:06:42,330
always true that's just going to give us everything.

101
00:06:42,340 --> 00:06:44,370
Now we're only fetching the first one.

102
00:06:44,620 --> 00:06:47,770
But the point is that it's letting us in and I'm getting.

103
00:06:47,770 --> 00:06:48,610
Welcome back.

104
00:06:48,610 --> 00:06:51,180
Now why did I have to add in this dash dash.

105
00:06:51,490 --> 00:06:53,710
Well that's how we do comments and sequel.

106
00:06:53,710 --> 00:06:59,350
If I put two dashes in front of something or hyphens or whatever they are it commented out and we have

107
00:06:59,350 --> 00:07:01,690
this problem of the extra quote at the end.

108
00:07:01,780 --> 00:07:05,940
So if we put two dashes there it eliminates that says that's just a quote.

109
00:07:05,950 --> 00:07:07,300
Don't worry about that.

110
00:07:07,720 --> 00:07:13,060
So this is a super simple example of something that you could do and it all hinges from the fact that

111
00:07:13,240 --> 00:07:20,770
we're adding some data or some it's supposed to be text into this query inside of these quotes and I'm

112
00:07:20,770 --> 00:07:22,100
basically taking it over.

113
00:07:22,150 --> 00:07:25,440
I'm commenting out that second quotation mark there.

114
00:07:25,450 --> 00:07:29,320
It's not going to show up here as is color coded because it's instead of an F string.

115
00:07:29,440 --> 00:07:35,130
But you can see there what I did I closed off that first password and just said password is empty or

116
00:07:35,140 --> 00:07:36,600
I could put anything in there.

117
00:07:36,790 --> 00:07:38,700
It's not mattering it doesn't matter anymore.

118
00:07:38,710 --> 00:07:41,320
Because of this part or one equals one.

119
00:07:41,830 --> 00:07:45,120
So that's that's not good that we can do that.

120
00:07:45,130 --> 00:07:52,600
So the the other way of doing it remember is this where I leave this one as a bad idea come down here

121
00:07:52,960 --> 00:07:59,560
and say like start from users where username equals and this is where we do question mark and password

122
00:07:59,560 --> 00:08:02,470
equals question mark.

123
00:08:02,470 --> 00:08:10,240
And then when we execute the query we pass them both in a reorder this just group them together like

124
00:08:10,240 --> 00:08:15,840
this and then we're going to pass in a tuple that contains username and password.

125
00:08:16,060 --> 00:08:20,030
And those should both be added in inside of our query.

126
00:08:20,230 --> 00:08:22,570
Where are those question marks are they will be subbed in.

127
00:08:22,570 --> 00:08:26,710
But we can't it won't allow us to add other sequel code.

128
00:08:26,890 --> 00:08:28,460
So let's verify that it works.

129
00:08:30,090 --> 00:08:33,650
So Blue says make sure it works read do it correctly.

130
00:08:33,900 --> 00:08:34,170
OK.

131
00:08:34,200 --> 00:08:35,160
Welcome back.

132
00:08:35,160 --> 00:08:43,710
Now I'm trying to be malicious again and I do close a string and then or one equals one common to everything

133
00:08:43,710 --> 00:08:49,740
else out failed it doesn't work anymore and that's because we're doing it the right way now where we're

134
00:08:49,740 --> 00:08:51,730
not trying to interpret it on our own.

135
00:08:51,780 --> 00:08:57,960
We're letting the library the sequel light library take care of it for us and prevent any sort of malicious

136
00:08:57,960 --> 00:08:58,680
injections.
