WEBVTT
1
00:00:00.330 --> 00:00:00.690
All right.

2
00:00:00.690 --> 00:00:01.500
Welcome back.

3
00:00:01.500 --> 00:00:07.170
Now that we have the scraping functionality done or at least the majority of it let's actually focus

4
00:00:07.170 --> 00:00:08.190
on the gameplay.

5
00:00:08.280 --> 00:00:14.200
The main idea is that we're going to select one item one random quote from this list.

6
00:00:14.220 --> 00:00:19.370
We have all quotes and then using that Laski user to guess it.

7
00:00:19.470 --> 00:00:23.220
And then you know we need to keep track of the number of guesses we check if they're correct or incorrect

8
00:00:23.250 --> 00:00:24.320
if they're incorrect.

9
00:00:24.390 --> 00:00:27.380
We add 1 to the number of guesses and then we give them a hint.

10
00:00:27.540 --> 00:00:33.480
But there's a point where we stop after four guesses then they lose that round and then we just make

11
00:00:33.480 --> 00:00:34.740
the whole thing repeat.

12
00:00:34.770 --> 00:00:35.960
Ask them if they want to play again.

13
00:00:35.970 --> 00:00:37.750
And if they do we start over.

14
00:00:38.070 --> 00:00:38.570
OK.

15
00:00:38.820 --> 00:00:44.430
Let's begin by just selecting one item randomly from all quotes.

16
00:00:44.420 --> 00:00:46.410
I'm going to print all quote any more.

17
00:00:46.470 --> 00:00:48.390
For now I'm not going to add any functions.

18
00:00:48.390 --> 00:00:50.870
I'm not going to make things move things to separate files.

19
00:00:50.880 --> 00:00:54.740
I'm just going to do it kind of spaghetti code style all in a row.

20
00:00:54.930 --> 00:00:56.270
It's not too much code.

21
00:00:56.430 --> 00:00:59.200
But then we can talk about potential Refractories at the end.

22
00:00:59.520 --> 00:01:08.760
So let's start let's import choice so from random you want to use choice which we've used before you

23
00:01:08.760 --> 00:01:11.790
pass in a list and it just returns one random element.

24
00:01:11.880 --> 00:01:16.480
So let's just call this quote equals choice.

25
00:01:16.770 --> 00:01:18.140
All quotes.

26
00:01:18.240 --> 00:01:22.080
And then let's add a print statement that displays the quote.

27
00:01:22.110 --> 00:01:31.140
So we'll start with here's a quote like this or something like that and then do another print and actually

28
00:01:31.140 --> 00:01:32.280
display the quote.

29
00:01:32.310 --> 00:01:36.270
We don't want to do the whole quote we just want the text of the quote.

30
00:01:36.510 --> 00:01:37.230
It's a dictionary.

31
00:01:37.250 --> 00:01:38.760
We just add that in there.

32
00:01:38.910 --> 00:01:42.050
Print here to quote then print the actual quote text.

33
00:01:42.180 --> 00:01:43.090
Let's test it.

34
00:01:44.920 --> 00:01:47.260
And you can see we get Here's a quote.

35
00:01:47.380 --> 00:01:50.970
Beauty is in the eye of the beholder blah blah blah.

36
00:01:51.070 --> 00:01:55.240
It may be necessary from time to time to give a stupid or misinformed beholder a black eye.

37
00:01:55.330 --> 00:01:58.270
OK so that is going to print that quote out.

38
00:01:58.270 --> 00:02:02.620
Now we need to add all of our logic and the first thing we need to do.

39
00:02:02.630 --> 00:02:06.140
I'm going to use a while loop so we're going to do this common pattern we've seen before.

40
00:02:06.190 --> 00:02:12.670
We basically ask for input and then we we have a while loop while guess we'll call it doesn't exist

41
00:02:12.670 --> 00:02:13.220
yet.

42
00:02:13.290 --> 00:02:20.170
I'll guess it's not equal to quote author which is what we're working with.

43
00:02:20.170 --> 00:02:27.790
Whatever the author is and we should probably do well guess shot down or lower is not equal to quote

44
00:02:28.000 --> 00:02:34.930
lower quote author lower just so that we don't we don't care about capitalisation and that's also make

45
00:02:34.930 --> 00:02:42.710
a variable here called Nahm guesses are remaining guesses and we'll start at 4.

46
00:02:42.730 --> 00:02:49.060
I like remaining guesses a little longer but some guesses sounds like you might be counting upwards

47
00:02:49.120 --> 00:02:49.990
remaining.

48
00:02:49.980 --> 00:02:51.780
It's clear we're counting downwards.

49
00:02:52.030 --> 00:02:55.900
The remaining guesses is 4 and then we're going to do a while.

50
00:02:55.910 --> 00:03:00.160
I guess that lower is not equal to quote author.

51
00:03:00.190 --> 00:03:06.670
Lower gas has not been defined yet and I'm going to start it as an empty string and then in here will

52
00:03:06.730 --> 00:03:09.190
set guess equal to input.

53
00:03:09.880 --> 00:03:15.670
So we ask the user for an input and the regional do an F string so I can say who said this quote and

54
00:03:15.670 --> 00:03:24.180
then tell them how many guesses they have remaining guesses remaining and then we'll just interpret

55
00:03:24.340 --> 00:03:28.410
remaining guesses like that.

56
00:03:28.440 --> 00:03:34.400
We ask them again while gestalt lower is not equal to the quote author and for testing purposes.

57
00:03:34.410 --> 00:03:36.690
Let's start by printing the author.

58
00:03:36.720 --> 00:03:41.940
So it's kind of defeats the game but let's just print the author so that we know what the author is

59
00:03:41.940 --> 00:03:45.850
and we can test that this code successfully runs and at the end.

60
00:03:45.900 --> 00:03:49.540
Let's just add a print after Wildblue.

61
00:03:50.280 --> 00:03:55.130
OK so what should happen at this point we get all the results and are not storing them in a file so

62
00:03:55.170 --> 00:03:55.750
right now.

63
00:03:55.800 --> 00:04:01.970
Every time I run this file scraping happens again it is OK for now and we're picking one quote.

64
00:04:02.130 --> 00:04:04.760
We are printing the text and the author.

65
00:04:04.980 --> 00:04:10.860
We have guests set to an empty string then this variable here while Guest out lower is not equal to

66
00:04:10.860 --> 00:04:15.130
quote author though or we are going to re ask for it.

67
00:04:15.150 --> 00:04:15.840
Re-ask.

68
00:04:15.840 --> 00:04:19.060
When are we going to prompt for input again.

69
00:04:19.800 --> 00:04:23.250
And hopefully it will stop if we get it right.

70
00:04:23.900 --> 00:04:25.690
OK so who said this quote.

71
00:04:25.790 --> 00:04:27.050
Guess is remaining forward.

72
00:04:27.120 --> 00:04:31.540
We should add a space or a new line potentially after this.

73
00:04:31.620 --> 00:04:33.250
It is C.S. Lewis and must.

74
00:04:33.330 --> 00:04:38.160
Let's test that our down case works like this.

75
00:04:38.160 --> 00:04:41.020
So my capitalization doesn't matter.

76
00:04:41.280 --> 00:04:43.290
And we made it out OK.

77
00:04:43.680 --> 00:04:45.600
That seems like it's working fine.

78
00:04:45.600 --> 00:04:46.850
Next before we forget.

79
00:04:46.850 --> 00:04:52.590
Let's decrement remaining guesses so every time we have to re prompt the user We're going to say remaining

80
00:04:52.590 --> 00:05:01.350
guesses minus equals 1 and so then in here we should also have an end where we're just going to check

81
00:05:01.560 --> 00:05:04.970
if remaining guesses is greater than zero.

82
00:05:05.790 --> 00:05:07.980
And if it does hit zero then we'll print.

83
00:05:07.980 --> 00:05:12.340
After a while loop and that will be our code that runs when the game is over.

84
00:05:12.670 --> 00:05:17.130
OK so we've got this remaining guess is minus equal 1.

85
00:05:17.130 --> 00:05:19.730
Now let's actually add into our logic.

86
00:05:19.740 --> 00:05:27.360
So the first time the user gets it wrong we give him a hint where we take the ref that you are l for

87
00:05:27.360 --> 00:05:31.830
the author's bio and we go requests so we have to make another request and scrape.

88
00:05:31.890 --> 00:05:36.410
But that's only if remaining guesses is equal to 3.

89
00:05:36.420 --> 00:05:40.650
That means that they guessed once we need two equal signs.

90
00:05:41.070 --> 00:05:45.620
Ok if that's the case we're now going to need to make a request.

91
00:05:45.720 --> 00:05:53.080
So I'll call this rez because requests don't get and the euro is going to be the trough that we stored.

92
00:05:53.150 --> 00:05:58.530
But if I go back and scroll way back here you can see that the bio link is stored like this so it's

93
00:05:58.540 --> 00:06:03.150
a relative know so I need to put the base URL there as well.

94
00:06:03.150 --> 00:06:04.840
So an F string will help.

95
00:06:04.860 --> 00:06:05.250
Will do.

96
00:06:06.360 --> 00:06:08.940
Double quotes and its base.

97
00:06:09.050 --> 00:06:16.740
You are L and then after that you want quote which is the individual quote We chose and within that

98
00:06:16.770 --> 00:06:22.420
we want you to be careful about quotation marks need single I'm using double on the outside.

99
00:06:22.450 --> 00:06:28.610
We want a link that will then go make the request for us and then we're going to need to pass that into

100
00:06:28.620 --> 00:06:29.430
beautiful soup.

101
00:06:29.490 --> 00:06:34.160
So I'll just do another soup equals beautiful soup response.

102
00:06:34.180 --> 00:06:36.640
Rez dot text.

103
00:06:36.870 --> 00:06:42.640
And when you just specify so we don't get that little warning H.T. email that parser.

104
00:06:43.080 --> 00:06:45.710
Now what are we looking for in this response.

105
00:06:45.900 --> 00:06:51.070
Well we can just check if it works first so we could just print the whole thing.

106
00:06:51.270 --> 00:06:55.100
Print soup up body and let's see what happens now.

107
00:06:55.200 --> 00:06:57.160
No syntax errors please.

108
00:06:57.180 --> 00:06:58.240
Here's our quote.

109
00:06:58.470 --> 00:06:59.750
Here is the author's name.

110
00:06:59.760 --> 00:07:05.670
I'm not going to guess it correctly though on the first time I guessed the wrong name and then that

111
00:07:05.670 --> 00:07:11.110
triggers the code that makes the request and what we're looking for is where where's that.

112
00:07:11.250 --> 00:07:16.100
Here I actually have one of the potential you are else open for Marilyn Monroe.

113
00:07:16.190 --> 00:07:20.280
If you go back back your and I just click on.

114
00:07:20.400 --> 00:07:23.040
This is the equivalent of what we are requesting.

115
00:07:23.490 --> 00:07:28.140
What we actually want is this born information which is that stored.

116
00:07:28.290 --> 00:07:33.440
Let's look OK so we have a paragraph tag.

117
00:07:34.380 --> 00:07:41.860
And there is a author born date class that we want and then author born location class that we want.

118
00:07:42.300 --> 00:07:49.720
And there's so we can use those to author dashboard date author dashboard dash location.

119
00:07:49.800 --> 00:07:53.350
Let me quickly get out of here by guessing correctly.

120
00:07:54.290 --> 00:07:55.310
OK.

121
00:07:55.760 --> 00:08:02.410
So in here instead of printing the souped up body we're now going to do let's call it birth date equals

122
00:08:02.480 --> 00:08:08.390
soup up find and then we'll find where class equals.

123
00:08:08.510 --> 00:08:12.580
And it was author Dasch born date.

124
00:08:13.640 --> 00:08:17.510
And then we got the text from that text.

125
00:08:17.900 --> 00:08:20.750
So that will be the inside of that item.

126
00:08:20.750 --> 00:08:25.460
I think it was always it a strong tag some tag that had this class.

127
00:08:25.470 --> 00:08:29.810
We want the inside that actually has the date and that's a bit different than how we got the date from

128
00:08:29.810 --> 00:08:34.520
the rhythm blog in one of the previous examples where the date wasn't.

129
00:08:34.520 --> 00:08:35.880
I don't think it was displayed.

130
00:08:35.900 --> 00:08:37.680
We were getting it from an attribute.

131
00:08:37.850 --> 00:08:41.880
Here it actually inside of an element instead of it in between two tags.

132
00:08:42.170 --> 00:08:42.630
All right.

133
00:08:42.650 --> 00:08:47.840
And then we've got birth place and that's going to be a up find.

134
00:08:47.870 --> 00:08:58.180
Same thing class underscore equals except author born location get text.

135
00:08:59.020 --> 00:08:59.720
OK.

136
00:09:00.200 --> 00:09:02.910
And then we're just going to print a message to the user.

137
00:09:03.140 --> 00:09:05.740
It's something like here's a hint

138
00:09:10.060 --> 00:09:17.460
and then we'll say the author was born in and then we'll do the birth date.

139
00:09:20.220 --> 00:09:29.480
And then another in and then birth place let's test this little bit out you run the code.

140
00:09:29.880 --> 00:09:37.950
Ok so we want to get it wrong the first time so we'll do this and say it's working successfully making

141
00:09:37.950 --> 00:09:39.780
that request and parsing the response.

142
00:09:39.780 --> 00:09:40.460
Here's a hint.

143
00:09:40.560 --> 00:09:46.940
The author was born I guess you should say on July 31st 1965 in.

144
00:09:47.010 --> 00:09:47.320
All right.

145
00:09:47.330 --> 00:09:52.700
And a little work to do there in South Gloucester class here.

146
00:09:52.710 --> 00:09:54.030
I have no idea.

147
00:09:54.270 --> 00:09:55.630
In the UK.

148
00:09:55.740 --> 00:09:56.250
All right.

149
00:09:56.250 --> 00:09:58.670
And then if we guess it correctly let's see what happens.

150
00:09:58.680 --> 00:10:00.100
I get it wrong again.

151
00:10:00.270 --> 00:10:02.710
And another time we have one more guest remaining.

152
00:10:03.030 --> 00:10:03.340
OK.

153
00:10:03.360 --> 00:10:05.210
And then we still get game over.

154
00:10:05.250 --> 00:10:05.980
Cool.

155
00:10:06.030 --> 00:10:11.370
So let's let's fix this before Arthur was born on.

156
00:10:11.850 --> 00:10:19.170
I guess we're getting to inds because he's in contained in here somewhere.

157
00:10:19.580 --> 00:10:23.550
If we look at Marilyn Monroe's and inspect that.

158
00:10:24.030 --> 00:10:24.390
Yes.

159
00:10:24.390 --> 00:10:28.170
So it is already in this part of the text.

160
00:10:28.230 --> 00:10:31.350
We can get rid of the in here and just have a space.

161
00:10:31.910 --> 00:10:33.080
OK.

162
00:10:33.150 --> 00:10:40.820
All right so now we have the two other hints so we'll just do an elf and then remaining guess's calls

163
00:10:40.930 --> 00:10:44.850
to let's do the first initial.

164
00:10:45.030 --> 00:10:48.680
So to find the first initial If the author's name we can just do.

165
00:10:48.680 --> 00:10:54.050
Quote author which will give us the name of the author and then define the first character.

166
00:10:54.120 --> 00:10:57.070
It's a full name so the last name is going to be harder to get.

167
00:10:57.170 --> 00:11:04.480
But to get the first name and the first letter of it all that we need to do is access zero like that.

168
00:11:04.470 --> 00:11:07.690
And let's just do a print.

169
00:11:08.030 --> 00:11:15.920
Here's actually I me just copy this or part of it at least Here's a hint and then I'll say the ME.

170
00:11:15.950 --> 00:11:16.730
That's brackets in.

171
00:11:16.740 --> 00:11:20.190
Before I forget here in the closing quote What should we say here.

172
00:11:20.190 --> 00:11:31.600
The author's first name author's first name starts with and then author zero and while we're here let's

173
00:11:31.600 --> 00:11:32.790
do the same thing.

174
00:11:32.920 --> 00:11:35.770
Elif remaining guesses equals equals.

175
00:11:35.830 --> 00:11:38.600
One left doesn't like something.

176
00:11:38.620 --> 00:11:40.920
Oh my Puranas missing.

177
00:11:41.740 --> 00:11:43.970
Ok if that's the case he's going to copy this.

178
00:11:43.990 --> 00:11:51.750
But this one is a bit longer to do the last name initial because our name looks like this.

179
00:11:51.800 --> 00:11:52.900
We might have.

180
00:11:52.900 --> 00:11:55.480
I don't know Winston Churchill.

181
00:11:55.660 --> 00:11:58.570
And we can get the W easy to zero with character.

182
00:11:58.840 --> 00:12:02.530
But here we have no idea what index C will be.

183
00:12:02.650 --> 00:12:07.110
So we have to split on the space and then find the first character of.

184
00:12:07.150 --> 00:12:09.070
Once we split it gives us a list.

185
00:12:09.070 --> 00:12:11.020
So then we want the second part of the list.

186
00:12:11.020 --> 00:12:18.100
We don't care about the first part and the first character so that's going to look like this author

187
00:12:19.130 --> 00:12:21.620
who looks like I'm somehow got rid of quote.

188
00:12:21.630 --> 00:12:24.350
There are supposed to be quote author.

189
00:12:24.770 --> 00:12:32.190
OK so quote author and we will split it and actually you know this is going to be a bit long so I'm

190
00:12:32.190 --> 00:12:40.650
going to move it to a variable and we'll just call it last initial equals quote author splits and a

191
00:12:40.680 --> 00:12:47.640
split on a space and then we want the item with the first index that gives us a list with two items.

192
00:12:47.640 --> 00:12:52.590
The first item 0 index is the first name that gives just the last name and then we want the zero with

193
00:12:52.590 --> 00:12:59.400
character of that and then we'll just interpolate last initial and then change this to say the author's

194
00:12:59.490 --> 00:13:05.650
last name starts with OK and then let's add in our final else here.

195
00:13:05.910 --> 00:13:10.430
And or else it's just going to say sorry you ran out of guesses.

196
00:13:12.850 --> 00:13:23.060
And then display the answer the answer was and then I'll just do quotes and didn't f appear and then

197
00:13:23.060 --> 00:13:28.600
will just display quote author perfect.

198
00:13:28.670 --> 00:13:30.420
Let's see what happens.

199
00:13:30.420 --> 00:13:35.240
Moment of Truth here we've got all the Colon's I need.

200
00:13:35.240 --> 00:13:37.520
All right we'll see what happens.

201
00:13:38.210 --> 00:13:38.840
OK.

202
00:13:38.900 --> 00:13:40.290
Invalid syntax.

203
00:13:40.520 --> 00:13:41.510
Oh I knew it.

204
00:13:41.630 --> 00:13:44.480
I knew there's something wrong with double quotes here.

205
00:13:44.870 --> 00:13:47.050
Even though I said we have to pay attention to that.

206
00:13:47.090 --> 00:13:48.760
Somehow still do that.

207
00:13:49.220 --> 00:13:51.380
OK we don't have that anywhere else.

208
00:13:51.380 --> 00:13:54.300
Do we get tested again.

209
00:13:54.680 --> 00:13:55.200
All right.

210
00:13:55.250 --> 00:13:57.550
So first time let's get it wrong.

211
00:13:58.040 --> 00:13:58.700
We get a hint.

212
00:13:58.730 --> 00:13:59.480
The author was born.

213
00:13:59.480 --> 00:14:01.120
OK we're going to guess wrong again.

214
00:14:01.360 --> 00:14:03.040
Author's first name starts with C..

215
00:14:03.050 --> 00:14:03.760
That's correct.

216
00:14:03.770 --> 00:14:05.230
Charles Bukowski.

217
00:14:05.420 --> 00:14:08.550
One more author's last name starts with B.

218
00:14:08.570 --> 00:14:10.120
All right so that's also correct.

219
00:14:10.310 --> 00:14:11.340
And let's get it wrong.

220
00:14:11.450 --> 00:14:12.810
Sorry you ran out of guesses.

221
00:14:12.890 --> 00:14:14.570
The answer was Charles Bukowski.

222
00:14:14.660 --> 00:14:16.320
So our logic is there.

223
00:14:16.430 --> 00:14:17.810
Most of our logic is there.

224
00:14:17.870 --> 00:14:22.020
We need to clean up a couple of things like when we ask for a guess.

225
00:14:22.350 --> 00:14:26.640
Let's add is it best to do it on a new line appear.

226
00:14:26.800 --> 00:14:28.910
Where is that right here.

227
00:14:28.910 --> 00:14:32.390
Who said this quote so we put a newline after or.

228
00:14:32.450 --> 00:14:35.160
Yeah let's do a new line there.

229
00:14:35.240 --> 00:14:41.090
So now when we read the code and it asks us for a guess it should be a little bit clear that we're supposed

230
00:14:41.090 --> 00:14:42.110
to type something.

231
00:14:42.530 --> 00:14:43.670
All right that's fine by me.

232
00:14:43.700 --> 00:14:48.750
You type the guess in here you get me exit out of here quickly.

233
00:14:48.800 --> 00:14:51.350
Let me make sure Actually it works if we get it correct.

234
00:14:51.630 --> 00:14:52.580
As you've already seen.

235
00:14:52.580 --> 00:14:53.320
All right.

236
00:14:53.390 --> 00:14:57.360
And it's not quite working the way it's supposed to because I got it right.

237
00:14:57.380 --> 00:15:03.410
Right on the last guess but we broke out of the loop and said Sorry you ran out of guesses.

238
00:15:03.410 --> 00:15:07.230
The problem we're running into is that we're not actually breaking the loop.

239
00:15:07.310 --> 00:15:15.650
If the user is correct so up top the first thing we should do is just check if guess equals the quote

240
00:15:16.460 --> 00:15:20.390
author down per dot lower.

241
00:15:20.390 --> 00:15:21.620
Same thing over here.

242
00:15:21.740 --> 00:15:22.850
Or we could do a.

243
00:15:23.150 --> 00:15:27.910
Convert all of them to one or the other make a level playing field for comparison.

244
00:15:28.190 --> 00:15:32.290
If that's the case we'll just print if you got it right.

245
00:15:32.900 --> 00:15:34.790
And then the important part.

246
00:15:34.790 --> 00:15:35.570
Break.

247
00:15:35.570 --> 00:15:41.070
So we leave now if we tested let's see what we get.

248
00:15:41.470 --> 00:15:42.040
OK.

249
00:15:42.200 --> 00:15:48.200
Alan Saunders And I'm going to do show the same thing so if I get it wrong.

250
00:15:48.400 --> 00:15:51.810
And then again and over time still.

251
00:15:51.850 --> 00:15:53.380
And then I get it correct.

252
00:15:53.380 --> 00:15:54.540
You got it right.

253
00:15:54.610 --> 00:15:56.230
And then we go to after the while.

254
00:15:56.440 --> 00:15:56.670
All right.

255
00:15:56.680 --> 00:15:59.700
I'm going to end this video right here in the next video.

256
00:15:59.770 --> 00:16:02.740
We'll finish up the functionality and clean things up a little bit.
