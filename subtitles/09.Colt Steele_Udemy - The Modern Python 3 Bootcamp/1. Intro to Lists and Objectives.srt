1
00:00:00,270 --> 00:00:01,340
Hey welcome back.

2
00:00:01,350 --> 00:00:08,910
So this section is all about a little drum roll lists which you probably could see Anyways on the slide

3
00:00:09,230 --> 00:00:14,190
list or something that I've mentioned a couple of times maybe five or six times in the course already

4
00:00:14,550 --> 00:00:16,070
basically in this way.

5
00:00:16,080 --> 00:00:20,070
I've said all right there's this thing called a list and you can loop through them but we haven't talked

6
00:00:20,070 --> 00:00:24,600
about this yet so we'll get there eventually and then we'll talk about looping or and the data types

7
00:00:24,600 --> 00:00:25,800
video are talked about.

8
00:00:25,800 --> 00:00:29,240
There's numbers there's billions and strings there's this thing called Bliss.

9
00:00:29,280 --> 00:00:30,400
We'll come back to that later.

10
00:00:30,510 --> 00:00:32,150
Well this is where we come back to it.

11
00:00:32,280 --> 00:00:33,940
So let's start with the simplest question.

12
00:00:34,140 --> 00:00:35,450
What is a list.

13
00:00:35,790 --> 00:00:41,140
So it's really just a collection or grouping of items and those items can be anything.

14
00:00:41,160 --> 00:00:43,800
In Python it could be a string it could be floats.

15
00:00:43,800 --> 00:00:45,890
Integers boolean values.

16
00:00:45,960 --> 00:00:47,280
It could be other lists.

17
00:00:47,280 --> 00:00:50,220
When you talk about dictionaries that's also an option.

18
00:00:50,220 --> 00:00:55,460
So it's a way of combining data into one variable one structure.

19
00:00:55,470 --> 00:01:00,510
So this is the first of the data structures will be working with and the data structure is sort of just

20
00:01:00,510 --> 00:01:07,590
like the next level a higher level up of a data type where it will actually store other data types inside

21
00:01:07,590 --> 00:01:09,400
of it in a structured way.

22
00:01:09,630 --> 00:01:10,880
So we'll come back to all of that.

23
00:01:10,950 --> 00:01:14,370
But let's start by actually walking through a hypothetical situation.

24
00:01:14,430 --> 00:01:19,460
Let's say I wanted to make an app that had a shopping cart or a shopping list feature.

25
00:01:19,500 --> 00:01:24,650
So a user could add items to a shopping cart and we would keep track of those items.

26
00:01:24,660 --> 00:01:31,110
Very basic thing but fundamental to any Web site any e-commerce platform where you're buying things.

27
00:01:31,110 --> 00:01:36,600
So there's going to be a list behind the scenes used to store what your data is what you're actually

28
00:01:36,600 --> 00:01:38,520
buying in other languages by the way.

29
00:01:38,520 --> 00:01:41,770
These are called arrays often in Python they're called lists.

30
00:01:41,880 --> 00:01:43,080
But the idea is the same.

31
00:01:43,110 --> 00:01:48,200
It's a grouping of information of items together with an order.

32
00:01:48,290 --> 00:01:53,610
So without lists with what we know right now we could store information like let's say we're doing a

33
00:01:53,610 --> 00:01:55,420
shopping cart we could do.

34
00:01:55,440 --> 00:01:57,460
Item one equals.

35
00:01:57,960 --> 00:01:59,690
I don't know bananas.

36
00:01:59,910 --> 00:02:07,260
And then another variable item 2 equals and we could have a Lego set or something and we could keep

37
00:02:07,260 --> 00:02:07,930
going.

38
00:02:08,070 --> 00:02:14,400
But our code would only work as long as we had defined item 1 2 item.

39
00:02:14,400 --> 00:02:19,740
However many variables the user was allowed to fill up so we could have a while loop and ask them to

40
00:02:19,740 --> 00:02:24,240
input something and then we'd stored in item 1 and then the next time through we'd store there and put

41
00:02:24,240 --> 00:02:26,640
an item to the next time through an item 3.

42
00:02:26,820 --> 00:02:29,020
But that's clearly limited.

43
00:02:29,040 --> 00:02:31,400
One thing is that our data is all over the place.

44
00:02:31,410 --> 00:02:33,270
It's not associated at all.

45
00:02:33,270 --> 00:02:34,900
These have nothing to do with one another.

46
00:02:34,920 --> 00:02:40,580
And imagine if we had 100 items in our cart that would be a nightmare as far as the code.

47
00:02:40,680 --> 00:02:43,430
And it also just it's not a good solution.

48
00:02:43,440 --> 00:02:49,350
So what we could also do is store everything in a string potentially if we were working with strings

49
00:02:49,680 --> 00:02:56,750
so we can have something like let's say the first item added to our list here was printer paper.

50
00:02:57,450 --> 00:02:57,930
OK.

51
00:02:58,050 --> 00:03:01,370
And then the next item that's added in is a microwave.

52
00:03:01,650 --> 00:03:09,940
So we could come up with some weird way maybe like three slashes to denote a different piece of data.

53
00:03:10,260 --> 00:03:15,700
And then after microwave we're buying I don't know a towel or something like this.

54
00:03:15,900 --> 00:03:21,060
Then this is a way of storing data in a list or it's not technically unless it's a way of storing data

55
00:03:21,240 --> 00:03:23,220
in a string multiple pieces.

56
00:03:23,580 --> 00:03:27,540
But then there's problems with this because if we want to print them out separately or if we want to

57
00:03:27,540 --> 00:03:30,870
do something we have to split them up based off of the slashes.

58
00:03:30,870 --> 00:03:32,110
What if we want to reorder them.

59
00:03:32,310 --> 00:03:36,750
Maybe it's some sort of wish list for my birthday or a holiday I want to have a priority.

60
00:03:36,940 --> 00:03:40,390
You know with the items this is the thing I want the most at the top.

61
00:03:40,440 --> 00:03:44,740
So if I want to reorder this using code it would be really really difficult.

62
00:03:44,760 --> 00:03:51,150
So all of this is to say that a list answers it helps with all of these problems a list allows us to

63
00:03:51,150 --> 00:03:53,240
have as many pieces of data as we want.

64
00:03:53,460 --> 00:03:56,640
In one structure we can reorder them.

65
00:03:56,640 --> 00:03:59,610
We can split it we can add new items delete items.

66
00:03:59,610 --> 00:04:04,520
It's basically like a little mini database stored inside of a single Python variable.

67
00:04:04,770 --> 00:04:10,790
So here's a simple example of something you could do with a list so it's a simple while loop it as well.

68
00:04:10,800 --> 00:04:12,220
It says Welcome to shopping cart.

69
00:04:12,270 --> 00:04:14,080
Would you like to add something to the cart.

70
00:04:14,100 --> 00:04:21,570
Let's say I want to add in printer paper and it keeps asking me let's say this time I'm going to add

71
00:04:21,660 --> 00:04:22,810
applesauce.

72
00:04:23,190 --> 00:04:36,330
And after that let's do a house plant and protein powder and a zebra print Grug a photo zebra print

73
00:04:36,330 --> 00:04:38,140
rug you know on a real zebra.

74
00:04:38,520 --> 00:04:40,350
And that's good enough for us.

75
00:04:40,530 --> 00:04:46,620
So I can type q which is how this program is set up where it will quit and then all it does is it print

76
00:04:46,620 --> 00:04:48,390
out to me your final grocery list.

77
00:04:48,600 --> 00:04:53,540
But notice the order is actually changed and it's sorted things alphabetically.

78
00:04:53,700 --> 00:04:59,190
So we get applesauce then-House plant printer paper them protein powder and then zebra print Roeg so

79
00:04:59,190 --> 00:05:01,300
very very simple example.

80
00:05:01,350 --> 00:05:02,750
Obviously this is not a web site.

81
00:05:02,780 --> 00:05:04,690
It's a real e-commerce platform.

82
00:05:04,710 --> 00:05:07,500
Nobody adds items to your cart like this in the terminal.

83
00:05:07,590 --> 00:05:13,650
But the idea is the same I'm adding these items in in one order and they are coming out in a different

84
00:05:13,650 --> 00:05:14,320
order.

85
00:05:14,550 --> 00:05:18,290
But behind the scenes are all stored in the exact same list.

86
00:05:18,390 --> 00:05:21,330
So I could easily reverse the order with a single command.

87
00:05:21,330 --> 00:05:22,800
Or I could put it in half.

88
00:05:22,920 --> 00:05:28,650
I could remove the two and say printer paper and protein powder I could remove those soups easily I

89
00:05:28,650 --> 00:05:31,410
could merge it with another list or so many things we can do.

90
00:05:31,410 --> 00:05:34,680
So the last thing for this video I'll discuss our objectives.

91
00:05:34,680 --> 00:05:36,800
We have a lot to cover with lists.

92
00:05:36,810 --> 00:05:41,540
First we want to be able to describe create an access list data structure.

93
00:05:41,540 --> 00:05:44,670
So we've talked about what they are but we haven't seen the syntax.

94
00:05:44,670 --> 00:05:47,130
We haven't seen how to access them or to create them.

95
00:05:47,130 --> 00:05:53,110
So that's next then we're going to use a lot of built in methods to modify and copy lists.

96
00:05:53,280 --> 00:05:57,030
So we've seen things like print or random rant.

97
00:05:57,270 --> 00:06:03,750
Well lists have a ton of their own built in methods that we can use to do all sorts of things sort add

98
00:06:03,750 --> 00:06:08,420
new items delete items cut cut lists and have all sorts of things.

99
00:06:08,790 --> 00:06:14,910
Then we're going to learn to iterate over lists using loops and something called list comprehensions.

100
00:06:14,910 --> 00:06:17,670
So I'll leave that one at that for now.

101
00:06:17,670 --> 00:06:22,280
And then finally we'll work with nested lists to build more complex data structures.

102
00:06:22,290 --> 00:06:24,190
So I mentioned a list can store anything.

103
00:06:24,210 --> 00:06:28,560
Another It can store strings or booleans ints floats whatever.

104
00:06:28,560 --> 00:06:30,700
It can also store other lists.

105
00:06:30,960 --> 00:06:34,170
And that's where we start to get to more complex data structures.

106
00:06:34,170 --> 00:06:38,910
So from here on out a quick little roadmap we're going to start basically going in this order will start

107
00:06:38,910 --> 00:06:41,540
by talking about creating lists and accessing items.

108
00:06:41,750 --> 00:06:44,480
We'll have a couple of quizzes and exercises interspersed.

109
00:06:44,550 --> 00:06:49,810
But then following this section will be another section that consists solely of exercises.

110
00:06:49,890 --> 00:06:52,380
So coding exercises in the browser.

111
00:06:52,470 --> 00:06:57,660
We have a bunch of tests written where you'll get feedback and be able to tell if you did something

112
00:06:57,660 --> 00:06:58,460
right or wrong.

113
00:06:58,620 --> 00:07:02,230
So that's coming up hopefully something to look forward to if you like those.

114
00:07:02,400 --> 00:07:03,890
All right let's get started with lists.
