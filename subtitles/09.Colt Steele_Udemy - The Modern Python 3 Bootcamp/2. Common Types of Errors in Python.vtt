WEBVTT
1
00:00:00.420 --> 00:00:07.410
Welcome back it's a fact that we all make mistakes myself included if I made too many mistakes to count

2
00:00:07.410 --> 00:00:10.830
my life as well as in my code.

3
00:00:10.890 --> 00:00:15.810
For every mistake you actually see where I have a syntax error I sometimes leave them in.

4
00:00:15.810 --> 00:00:19.840
But there's probably five or ten behind the scenes that I edit out.

5
00:00:19.980 --> 00:00:25.620
It's can be hard you know when you're typing and talking at the same time but also just when I'm not

6
00:00:25.620 --> 00:00:31.530
making classes I'm just writing code to make mistakes all the time whether it's human error or syntax

7
00:00:31.530 --> 00:00:37.380
error like adding in a semi-colon when I don't need one because I'm confusing coming from javascript

8
00:00:37.380 --> 00:00:41.070
to Python and switching back and forth a couple of times during one day.

9
00:00:41.070 --> 00:00:47.460
Or maybe it's computer code to code error like if I have a database and it's supposed to be running

10
00:00:47.610 --> 00:00:51.470
but the database for some reason crashed and my code is trying to connect to it.

11
00:00:51.630 --> 00:00:54.550
That's not necessarily something that I did as a human.

12
00:00:54.570 --> 00:00:58.620
I didn't type something wrong but things aren't acting how they're supposed to they're not behaving

13
00:00:58.620 --> 00:00:59.960
the way they're intended to.

14
00:01:00.240 --> 00:01:01.080
That's a problem.

15
00:01:01.230 --> 00:01:02.010
So the point is.

16
00:01:02.010 --> 00:01:06.630
Errors happen all the time whether it's from things we do wrong or from things failing when they're

17
00:01:06.630 --> 00:01:09.530
not supposed to fail or from servers not being up.

18
00:01:09.540 --> 00:01:11.190
Things just happen.

19
00:01:11.250 --> 00:01:16.080
So how do we fix them is a really really important part of being a developer and the first step to preventing

20
00:01:16.080 --> 00:01:19.890
them and then fixing them is just understanding them.

21
00:01:19.950 --> 00:01:23.240
So we're going to start by just going over some of the common Python errors.

22
00:01:23.370 --> 00:01:26.840
We're not going to go over every single one but just some of the common ones.

23
00:01:26.970 --> 00:01:30.710
And reviewing a lot of the ones you've already seen and will go pretty quick.

24
00:01:30.730 --> 00:01:33.530
And first up is our good old syntax error.

25
00:01:33.660 --> 00:01:35.590
So we've seen this one a lot.

26
00:01:35.610 --> 00:01:41.460
I have as I've been typing and recording into the microphone and it just occurs when Python encounters

27
00:01:41.700 --> 00:01:46.470
some wrong syntax something that isn't valid Python that it can't parse.

28
00:01:46.470 --> 00:01:47.630
Usually due to typos.

29
00:01:47.640 --> 00:01:51.620
So here's an example of def first and no parentheses.

30
00:01:51.930 --> 00:01:57.360
And then a colon that's going to confuse Python because as it parses it says all right this is a function.

31
00:01:57.360 --> 00:01:59.510
So I should expect parentheses after the name.

32
00:01:59.580 --> 00:02:02.120
There's no parens and so it gets confused.

33
00:02:02.160 --> 00:02:07.290
Same thing here where we have none equals one that's invalid Python.

34
00:02:07.290 --> 00:02:09.210
Or just returning something.

35
00:02:09.480 --> 00:02:14.600
Or if we had a semi-colon just in the middle of our code or something like that that could cause problems.

36
00:02:14.610 --> 00:02:15.980
So that would be a syntax error.

37
00:02:16.020 --> 00:02:18.420
For example there we go.

38
00:02:18.420 --> 00:02:19.780
Invalid syntax.

39
00:02:19.920 --> 00:02:21.410
Or just to show you.

40
00:02:21.630 --> 00:02:24.190
Def name.

41
00:02:24.420 --> 00:02:27.360
And then let's do two parentheses.

42
00:02:27.350 --> 00:02:28.440
Wrong Way.

43
00:02:28.440 --> 00:02:29.470
Syntax error.

44
00:02:29.790 --> 00:02:30.220
All right.

45
00:02:30.420 --> 00:02:32.340
So you've seen plenty of this.

46
00:02:32.340 --> 00:02:34.490
Next up is a name error.

47
00:02:34.830 --> 00:02:41.350
So a name error occurs when a variable is not defined meaning it hasn't been assigned yet.

48
00:02:41.520 --> 00:02:43.170
So here's an example.

49
00:02:43.200 --> 00:02:49.450
This example assumes that test has not been defined and if I just refer to test we get a name error.

50
00:02:49.680 --> 00:02:52.160
We've seen that before as well.

51
00:02:52.220 --> 00:03:00.210
If I just type test right now we get a name or any other variable that is non nonexistent like R or

52
00:03:00.210 --> 00:03:01.010
person.

53
00:03:01.020 --> 00:03:04.510
None of these exist perso person.

54
00:03:04.800 --> 00:03:06.400
Every time we get an error.

55
00:03:06.540 --> 00:03:07.960
Python is just telling us.

56
00:03:08.190 --> 00:03:12.110
I don't know what that thing is so that's different than a syntax error.

57
00:03:12.110 --> 00:03:16.470
Obviously it conveys something different in the type of error.

58
00:03:16.890 --> 00:03:19.440
Next up is type error.

59
00:03:19.440 --> 00:03:24.310
So a type error occurs when basically you have a mismatch of data types.

60
00:03:24.480 --> 00:03:31.490
So an operation or function is applied to the wrong type in Python just can't figure out what to do.

61
00:03:31.530 --> 00:03:34.850
So for example we call Len on 5.

62
00:03:34.940 --> 00:03:40.260
Well an integer itself doesn't have a length so it gives us a type error.

63
00:03:40.260 --> 00:03:48.600
Same thing if we try and add a string to a list type error so we could do three plus S we get a type

64
00:03:48.600 --> 00:03:54.300
error and it explains unsupported operand types for plus between an int and a string.

65
00:03:54.330 --> 00:04:03.510
If I tried to do learn a float same thing type error object of type float has no length change it to

66
00:04:03.510 --> 00:04:04.370
a string though.

67
00:04:04.740 --> 00:04:09.100
You don't get a type error because strings are one of the types that has a length.

68
00:04:09.120 --> 00:04:11.730
Next up index error.

69
00:04:11.730 --> 00:04:17.160
So an index error happens when you try to access an element in a list using an invalid index.

70
00:04:17.160 --> 00:04:18.740
We've seen this before.

71
00:04:18.830 --> 00:04:24.120
I remember I deliberately showed what happened if you tried to access a list with an index that doesn't

72
00:04:24.120 --> 00:04:26.920
exist and the same applies to a string.

73
00:04:26.940 --> 00:04:30.050
So if we have this list it just has a single element.

74
00:04:30.150 --> 00:04:32.370
So the highest index is zero.

75
00:04:32.400 --> 00:04:35.960
If I try to access a list of two we're going to get an index error.

76
00:04:36.240 --> 00:04:37.540
Same thing with strings.

77
00:04:37.680 --> 00:04:44.430
So if I have a string called name equals Colts and then a train access name of zero that's fine but

78
00:04:44.430 --> 00:04:46.980
name of 4 causes a problem.

79
00:04:46.980 --> 00:04:47.740
Index error.

80
00:04:47.760 --> 00:04:49.560
String index out of range.

81
00:04:49.560 --> 00:04:51.520
Same thing 5 a tuple.

82
00:04:51.720 --> 00:04:59.640
One two three four and then try to access names of six index or tuple of range and same with a list

83
00:04:59.830 --> 00:05:03.580
Well next up is value error.

84
00:05:03.610 --> 00:05:09.510
So this happens when a built in operation or function receives an argument that has the right type but

85
00:05:09.520 --> 00:05:11.370
an inappropriate value.

86
00:05:11.440 --> 00:05:18.610
For example when we've been calling in to convert a string most often to an end if we pass in the string

87
00:05:18.610 --> 00:05:22.540
of five then that works and it gives us the into a 5.

88
00:05:22.660 --> 00:05:28.360
But if we pass in string foo Well a string is OK that's not the problem.

89
00:05:28.360 --> 00:05:29.410
It's not a type error.

90
00:05:29.410 --> 00:05:35.150
The problem is that it contains the string foo instead of a number that can be converted.

91
00:05:35.280 --> 00:05:42.550
OK so if I did it and I tried to pass in a list of I don't know containing the string F or even the

92
00:05:42.550 --> 00:05:46.570
string 10 that doesn't work because that's a type error.

93
00:05:46.690 --> 00:05:50.380
It's not expecting unless it's not set up to convert lists.

94
00:05:50.440 --> 00:05:56.380
So we get a type error but if I do it and I pass in the string 10 that works fine.

95
00:05:56.910 --> 00:06:01.000
It expects a string but if I do a string of F that's a problem.

96
00:06:01.150 --> 00:06:02.440
Value error.

97
00:06:02.620 --> 00:06:05.210
Invalid literal for ints with base 10.

98
00:06:05.260 --> 00:06:08.350
It doesn't like the string F but it doesn't say to all strings.

99
00:06:08.480 --> 00:06:10.630
So that's what a value error tells us.

100
00:06:10.630 --> 00:06:17.920
Next up key error so key errors occur with dictionaries when you try to access or retrieve something

101
00:06:17.920 --> 00:06:22.560
from a dictionary with a key and it does not have that specific key.

102
00:06:22.570 --> 00:06:24.730
So for example we have an empty dictionary.

103
00:06:24.850 --> 00:06:25.450
D.

104
00:06:25.630 --> 00:06:29.720
And I try to access anything in there whatever the key is we get a key error.

105
00:06:29.920 --> 00:06:36.130
So it's sort of like the index error for a for list but for a dictionary we get a key error and there's

106
00:06:36.130 --> 00:06:37.380
just one more I'll show you.

107
00:06:37.510 --> 00:06:40.850
I should be clear that there are more than what I'm displaying here.

108
00:06:40.870 --> 00:06:44.370
I mean there's very specific errors like a divide by zero error.

109
00:06:44.470 --> 00:06:49.420
I just decided not to go into detail about all of them because whenever you get an error it's pretty

110
00:06:49.420 --> 00:06:52.490
self-explanatory to explains what it is and you could just look it up.

111
00:06:52.510 --> 00:06:54.990
Google copy and paste and see what you get.

112
00:06:55.030 --> 00:06:58.580
But I just want to highlight the common ones I should've started off by saying that anyway.

113
00:06:58.600 --> 00:07:00.520
The last one attribute error.

114
00:07:00.910 --> 00:07:04.330
So this occurs when a variable does not have an attribute.

115
00:07:04.330 --> 00:07:05.840
So for example.

116
00:07:05.920 --> 00:07:06.640
Awesome.

117
00:07:06.740 --> 00:07:09.280
Foo awesome is a string.

118
00:07:09.310 --> 00:07:13.510
And if I try an Access foo an awesome it just it's just not a thing.

119
00:07:13.510 --> 00:07:15.420
So I get this attribute error.

120
00:07:15.760 --> 00:07:16.300
Same thing.

121
00:07:16.300 --> 00:07:22.620
If I had a list one two three and I try and call a method called I don't know.

122
00:07:22.760 --> 00:07:26.190
Hello I get an attribute error.

123
00:07:26.260 --> 00:07:32.680
It basically is python telling me OK I just can't find anything called Hello on this particular list

124
00:07:32.860 --> 00:07:35.770
or string whatever we find working with.

125
00:07:35.770 --> 00:07:39.760
So we've seen how to do you know string dot join.

126
00:07:40.900 --> 00:07:45.610
And I think if I call it like this with an empty list Yeah it gives me a type error because I didn't

127
00:07:45.610 --> 00:07:46.980
pass the arguments.

128
00:07:47.320 --> 00:07:49.440
So let's just pass and I don't.

129
00:07:49.500 --> 00:07:53.830
1 and 2 a and b and I get a B.

130
00:07:53.860 --> 00:07:54.040
Right.

131
00:07:54.040 --> 00:07:55.080
That's not the point.

132
00:07:55.300 --> 00:07:58.700
But if I tried to call a joint now I would get an attribute error.

133
00:07:58.940 --> 00:08:01.390
That tells me I don't know what you're talking about.

134
00:08:01.390 --> 00:08:03.880
String object has no attribute.

135
00:08:04.240 --> 00:08:07.640
OK so those are just a quick overview of some of the most common errors.

136
00:08:07.780 --> 00:08:15.400
If you go in the docs we can see there's a ton of them you know import errors memory errors indentation

137
00:08:15.400 --> 00:08:15.900
error.

138
00:08:15.920 --> 00:08:18.280
I've definitely seen one before.

139
00:08:18.280 --> 00:08:19.180
Tab error.

140
00:08:19.210 --> 00:08:22.060
So that's when you're mixing up tabs and spaces.

141
00:08:22.260 --> 00:08:24.340
What else.

142
00:08:24.370 --> 00:08:25.220
0 division.

143
00:08:25.230 --> 00:08:31.420
So when I was talking about deprecation warning import warning runtime there's just a ton of them.

144
00:08:31.450 --> 00:08:32.920
So if you do want to take a look.

145
00:08:32.980 --> 00:08:34.050
Feel free to study these.

146
00:08:34.180 --> 00:08:37.390
But like I said most of the common ones he already talked about.

147
00:08:37.480 --> 00:08:42.240
And when something pops up just copy and paste Google it and see what it actually means.

148
00:08:42.250 --> 00:08:43.140
If you're confused.

149
00:08:43.240 --> 00:08:43.650
OK.

150
00:08:43.710 --> 00:08:45.580
Now that we've seen some of the common errors.

151
00:08:45.640 --> 00:08:49.910
Next I'm actually going to show you how to make your own to raise an error whenever you want.
