1
00:00:00,340 --> 00:00:00,840
Hello.

2
00:00:00,900 --> 00:00:03,660
Testing Testing 1 and 2.

3
00:00:03,810 --> 00:00:04,890
Very funny right.

4
00:00:04,890 --> 00:00:05,760
Testing.

5
00:00:05,850 --> 00:00:07,650
I do I come up with this.

6
00:00:07,920 --> 00:00:08,720
OK.

7
00:00:08,730 --> 00:00:12,170
So try and keep it light because testing is.

8
00:00:12,270 --> 00:00:12,680
Yeah.

9
00:00:12,750 --> 00:00:14,760
It's not the most exciting thing we got to learn.

10
00:00:14,760 --> 00:00:20,130
Great introduction and this video we're going to talk about a statement in Python called the assert

11
00:00:20,280 --> 00:00:21,330
statement.

12
00:00:21,330 --> 00:00:25,980
It allows us to assert that certain expressions must be true.

13
00:00:26,250 --> 00:00:29,710
And if they are not it will throw an assert error.

14
00:00:30,330 --> 00:00:35,160
So it accepts an expression like let's say we had a function called the ADD keep coming back to this

15
00:00:35,160 --> 00:00:37,290
basic function and it takes in two numbers.

16
00:00:37,290 --> 00:00:43,920
Number one and number two we could write an assert to make sure that no one is an IT or that no one

17
00:00:43,920 --> 00:00:46,690
is positive or whatever we want some expression.

18
00:00:47,130 --> 00:00:50,490
And if it's false it will throw an assert error.

19
00:00:51,020 --> 00:00:51,960
It returns None.

20
00:00:51,960 --> 00:00:56,670
If the expression is truth the show does nothing and it raised an assertion error.

21
00:00:56,670 --> 00:01:00,770
If the expression is falsie I think it a cert error earlier assertion error.

22
00:01:00,840 --> 00:01:07,140
And finally we can specify a second argument an optional error message before I even dive into the code.

23
00:01:07,140 --> 00:01:12,870
Before I show you any examples let me just start by saying that assert is useful and has its uses but

24
00:01:12,870 --> 00:01:17,420
it is not the end all be all to writing tests at least not nowadays.

25
00:01:17,460 --> 00:01:20,540
I do believe that a used to be a lot more commonly used.

26
00:01:20,580 --> 00:01:25,830
It was sort of the granddaddy thing has been grandfathered in from languages like C but there's a big

27
00:01:25,830 --> 00:01:31,680
shortcoming which is that we can ignore all the assert statements in an application with a single line

28
00:01:31,680 --> 00:01:33,870
of code when we run the python file.

29
00:01:33,930 --> 00:01:37,720
We can ignore everything in there and that could cause a lot of problems with our tests.

30
00:01:37,740 --> 00:01:41,640
My opinion is that you shouldn't use assert to test all of your code.

31
00:01:41,640 --> 00:01:45,450
I can point out a couple of situations where you might want to use it but I'm just going to show it

32
00:01:45,450 --> 00:01:47,970
to you because it's an option at your disposal.

33
00:01:48,090 --> 00:01:53,250
But there are better options now including things like unit test which will take a look at in two videos

34
00:01:53,250 --> 00:01:53,740
from now.

35
00:01:53,940 --> 00:01:57,260
So on to assert the syntax just looks like this.

36
00:01:57,270 --> 00:02:02,340
I have a function called the add positive numbers and the whole idea is that we want to test to make

37
00:02:02,340 --> 00:02:08,430
sure that the numbers that are passed in x and y are both positive first thing I'll mention is that

38
00:02:08,430 --> 00:02:10,260
a search is not a function.

39
00:02:10,260 --> 00:02:16,700
I've been very careful to say assert statement and this kind of I don't know if I'm missing something

40
00:02:16,710 --> 00:02:17,840
it's kind of annoying to me.

41
00:02:17,880 --> 00:02:24,330
Back in Python to print for example was a statement and so was raise and they've now been changed to

42
00:02:24,390 --> 00:02:25,510
functions.

43
00:02:25,560 --> 00:02:31,020
Print is a function we need parents assert was a statement but it still is a statement.

44
00:02:31,020 --> 00:02:35,640
I'm not sure why I haven't dug into it so I don't know why.

45
00:02:35,760 --> 00:02:36,770
But you don't need parens.

46
00:02:36,780 --> 00:02:38,710
It's not a function it's a statement.

47
00:02:39,120 --> 00:02:43,040
OK so we call a cert and then an expression.

48
00:02:43,530 --> 00:02:47,680
So if this is true with nothing happens we just move on to this.

49
00:02:48,030 --> 00:02:53,570
If this is false however whatever it is after the comma is a little error message that's optional.

50
00:02:53,670 --> 00:02:55,430
So whether that's there or not.

51
00:02:55,500 --> 00:03:00,390
If this is false it raises an assertion error which is what you see here.

52
00:03:00,420 --> 00:03:01,260
Assertion error.

53
00:03:01,290 --> 00:03:06,120
And if we specify a little message you can see it says both numbers must be positive.

54
00:03:06,150 --> 00:03:08,200
Which is the message we specified.

55
00:03:08,600 --> 00:03:08,910
OK.

56
00:03:08,940 --> 00:03:16,120
And that's kind of it to assert you type assert and then an expression and then an optional error message.

57
00:03:16,170 --> 00:03:24,210
OK I've made a file just pasted the code in and this file is called assertion stop P Y and as I said

58
00:03:24,210 --> 00:03:31,020
if we run this right now you should see just do a print on the first one just like this.

59
00:03:31,020 --> 00:03:32,700
If we call 1 and 1 we should get 2.

60
00:03:32,820 --> 00:03:34,230
I call 1 negative 1.

61
00:03:34,250 --> 00:03:35,170
We won't get 0.

62
00:03:35,190 --> 00:03:37,180
We'll get an assertion error.

63
00:03:37,380 --> 00:03:44,160
So if I run the file Python 3 assertions up why the first one works and then we get this assertion error.

64
00:03:44,160 --> 00:03:46,160
Both numbers must be positive.

65
00:03:46,530 --> 00:03:54,170
So you can think of assert as basically if some expression is.

66
00:03:54,390 --> 00:03:57,060
Well let's just say if not some expression.

67
00:03:57,070 --> 00:03:58,630
This is not going to be a valid code.

68
00:03:58,670 --> 00:04:08,200
But if not some valid expression then raise which assertion error like that.

69
00:04:08,280 --> 00:04:09,660
Essentially that's what it is.

70
00:04:09,840 --> 00:04:15,600
Except for the fact that it can be overridden all the assertions all these search statements will not

71
00:04:15,600 --> 00:04:18,720
run if we run our code in something called optimized mode.

72
00:04:18,720 --> 00:04:20,430
I'll show you later in this video.

73
00:04:20,430 --> 00:04:21,680
So there's that slight difference.

74
00:04:21,750 --> 00:04:25,160
If I ran you know assert four equals four that's true.

75
00:04:25,170 --> 00:04:26,220
We don't get anything.

76
00:04:26,370 --> 00:04:30,060
But if I run four equals two it raises a certain error.

77
00:04:30,060 --> 00:04:38,730
So if this is false it raises an assertion error and I add a comma and then no four should not equal

78
00:04:38,730 --> 00:04:42,380
to assertion error.

79
00:04:42,480 --> 00:04:45,350
For sure not equal to back here in the same file.

80
00:04:45,400 --> 00:04:46,750
I will come at this out.

81
00:04:47,040 --> 00:04:52,070
Let's say I'm going to define a function called Eat junk and eat junk.

82
00:04:52,070 --> 00:04:57,960
Takes a single string argument called food and the whole idea is that it's really silly.

83
00:04:57,960 --> 00:05:00,650
But we're going to just make sure that food is a junk food.

84
00:05:00,780 --> 00:05:04,950
So it's either candy or ice cream or pizza or something like that.

85
00:05:05,400 --> 00:05:11,020
And at the end we'll just return an app string that says like I'm numb.

86
00:05:11,250 --> 00:05:12,470
I am eating.

87
00:05:12,600 --> 00:05:14,450
And then food.

88
00:05:15,570 --> 00:05:18,520
But like I said we want to verify that it is.

89
00:05:18,570 --> 00:05:27,100
Let's say it's either pizza or ice cream candy or fried butter.

90
00:05:27,510 --> 00:05:28,830
This is a real thing.

91
00:05:29,370 --> 00:05:29,860
OK.

92
00:05:30,090 --> 00:05:36,670
So to rate the assert statement it's assert food in this is our expression this is true or false.

93
00:05:36,780 --> 00:05:40,060
Food is either in there or it's not in have a space.

94
00:05:40,140 --> 00:05:41,270
Now I do.

95
00:05:41,430 --> 00:05:44,280
And then we can provide an optional message.

96
00:05:44,370 --> 00:05:46,530
But this is going to be a pretty long line.

97
00:05:46,530 --> 00:05:55,710
So I think I would prefer to break this up do our strings like this EVERY go totally optional.

98
00:05:55,730 --> 00:05:59,810
Food is in this list and then will say the error messages.

99
00:05:59,810 --> 00:06:04,190
Food must be a junk food like that.

100
00:06:04,460 --> 00:06:04,990
OK.

101
00:06:05,270 --> 00:06:06,300
Then down here.

102
00:06:06,560 --> 00:06:09,850
Let's just ask the user for input.

103
00:06:10,010 --> 00:06:19,130
Enter a food please and then we'll just call it junk and pass and food and let's print the whole thing.

104
00:06:19,370 --> 00:06:21,890
So we have the super simple function with an assert.

105
00:06:22,130 --> 00:06:26,440
And then we're asking for input and then passing it in printing the result.

106
00:06:26,450 --> 00:06:32,370
Now when I run it it asks me for food if I enter pizza good or good to go.

107
00:06:32,750 --> 00:06:39,200
If I enter that school with kale we get a certain error.

108
00:06:39,200 --> 00:06:43,690
Food must be a junk food and that's working great how it should work.

109
00:06:43,700 --> 00:06:47,780
That brings us to our next slide assertions warning.

110
00:06:48,170 --> 00:06:56,150
So if a python file is run with the dash o capital O not zero it stands for optimizer optimization mode

111
00:06:56,390 --> 00:06:58,150
up to something mode.

112
00:06:58,370 --> 00:07:04,940
What it will do is that there's a couple of other things but one of the things it does is ignore all

113
00:07:04,940 --> 00:07:07,510
assertions which is not good.

114
00:07:07,660 --> 00:07:08,480
So let me show that to you.

115
00:07:08,480 --> 00:07:17,660
Now if I do Python 3 dash capital O the same code please enter food and if I do Cail again I get no

116
00:07:17,660 --> 00:07:18,220
I'm numb numb.

117
00:07:18,230 --> 00:07:21,150
I'm eating kale so totally ignored that assertion.

118
00:07:21,290 --> 00:07:26,420
And if I had code where I was using search statements exclusively to test my code and it was a real

119
00:07:26,420 --> 00:07:32,900
app and not just a junk food function I could be a problem to demonstrate why this could be bad.

120
00:07:32,900 --> 00:07:35,930
I have a bit of a fantastical scenario down here.

121
00:07:35,930 --> 00:07:41,360
I've written pseudo code but imagine that we have some real code and an application to check if there's

122
00:07:41,450 --> 00:07:45,620
a search statement to check if a user is an admin and the user is an admin.

123
00:07:45,620 --> 00:07:48,220
They can destroy a bunch of things they can remove posts.

124
00:07:48,230 --> 00:07:49,550
They can do whatever they want.

125
00:07:49,610 --> 00:07:55,910
They can delete our database that's encapsulated by destroy a bunch of stuff but I haven't a certain

126
00:07:55,910 --> 00:07:57,500
here so I should be good to go right.

127
00:07:57,560 --> 00:07:59,830
I'm checking his user as being passed in.

128
00:07:59,830 --> 00:08:06,650
Is the is admin attribute true and if it is then good if it's not then we should raise that assertion

129
00:08:06,650 --> 00:08:07,460
error right.

130
00:08:07,730 --> 00:08:13,930
Well if you ran your code with Dasch capital O or somebody else did that would not run it off.

131
00:08:13,950 --> 00:08:17,540
It just ignores this line so anybody could destroy a bunch of stuff.

132
00:08:17,540 --> 00:08:23,720
It's a simplified example here but the underlying idea holds true no matter how large or small the code

133
00:08:23,720 --> 00:08:24,410
base is.

134
00:08:24,440 --> 00:08:29,630
If you depend on assert statements Well you can't depend on them because they may not run.

135
00:08:29,840 --> 00:08:31,150
So that's the moral of it.

136
00:08:31,250 --> 00:08:36,410
Asserts can be nice and that can be useful but you cannot count on them to run.

137
00:08:36,420 --> 00:08:40,690
They're not guaranteed to run because there's a loophole deliberately designed in there.

138
00:08:40,700 --> 00:08:42,390
I'm not sure why to be honest.

139
00:08:42,710 --> 00:08:47,890
Because as far as I've read optimized mode it's not actually all that optimized anyways.

140
00:08:47,900 --> 00:08:49,640
People complain about it all the time.

141
00:08:49,640 --> 00:08:51,900
But anyway I am getting a bit off track here.

142
00:08:51,900 --> 00:08:54,030
I hope we will see a better alternative.

143
00:08:54,080 --> 00:08:56,740
Ok I will end on the video here.
