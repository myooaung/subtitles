1
00:00:00,300 --> 00:00:03,650
All right this video we're going to see a built in function.

2
00:00:03,660 --> 00:00:05,730
This one is called sorted.

3
00:00:05,730 --> 00:00:08,370
It's different than sort which we saw earlier.

4
00:00:08,370 --> 00:00:10,230
It's a list method sorted.

5
00:00:10,230 --> 00:00:16,710
Is it built in function that will work with other other iterable collections other than lists.

6
00:00:16,740 --> 00:00:22,240
For example we could pass in a tuple and the syntax is a bit different as well.

7
00:00:22,270 --> 00:00:26,440
It looks like this sorted and then we pass in.

8
00:00:26,460 --> 00:00:32,010
So instead of doing list sort which actually will list a particular list.

9
00:00:32,010 --> 00:00:37,620
In this case we pass in you know a list or a tuple and I'll show you an example but here's the first

10
00:00:37,620 --> 00:00:39,030
one more numbers.

11
00:00:39,030 --> 00:00:41,950
It's just 6 1 8 into a list.

12
00:00:42,090 --> 00:00:47,640
If we pass it into sorted in the most basic way without any other additional parameters or arguments

13
00:00:47,640 --> 00:00:55,350
that I'll show you it will sorted like this but it does not change more numbers so it returns a copy

14
00:00:55,500 --> 00:00:56,420
that is sorted.

15
00:00:56,550 --> 00:00:59,800
But notice that more numbers it's unsorted still down here.

16
00:00:59,910 --> 00:01:02,480
So that's different than the way that sort works.

17
00:01:02,490 --> 00:01:10,980
So it could have Nom's and just do some random numbers and 5 5 and 3 something like this.

18
00:01:11,100 --> 00:01:11,760
Right.

19
00:01:11,850 --> 00:01:19,510
And if I did numskulls sort remember it actually sorts Nom's in place in the names list.

20
00:01:19,680 --> 00:01:30,230
But if I redefined Nomes and now I do sorted numbs it returns a sorted version and Gnome's is unchanged

21
00:01:31,550 --> 00:01:31,850
OK.

22
00:01:31,880 --> 00:01:37,090
So the next thing I'll show you we can change the direction that we're sorting things.

23
00:01:37,130 --> 00:01:40,590
Setting reverse to true.

24
00:01:40,640 --> 00:01:48,120
And now if we look at it it goes in descending order from 55 down to 1 and still Nom's is unchanged.

25
00:01:48,250 --> 00:01:49,390
Oh and before I forget.

26
00:01:49,540 --> 00:01:50,260
Let me just show you.

27
00:01:50,250 --> 00:01:52,390
You can also do it on a tuple could do.

28
00:01:52,390 --> 00:02:04,460
Sorted and I'll just pass in a tuple and here like to come one come a 45 and 23 in 99 like that.

29
00:02:04,750 --> 00:02:07,180
And it still returns a list.

30
00:02:07,180 --> 00:02:14,720
But it's important to know that it can accept a tuple unlike dot sort which is a list specific method.

31
00:02:15,020 --> 00:02:15,270
OK.

32
00:02:15,280 --> 00:02:20,290
So I showed reverse that this is where it gets more powerful when we're about to show you sorting numbers

33
00:02:20,290 --> 00:02:21,670
is easy enough.

34
00:02:21,670 --> 00:02:23,750
But what if we have data that looks like this.

35
00:02:23,830 --> 00:02:30,120
So here's our user data from our Twitter social media clone and let's say I want to sort them by user

36
00:02:30,120 --> 00:02:31,500
name.

37
00:02:31,540 --> 00:02:36,600
It's not as easy as just saying sorted users because users of the list.

38
00:02:36,880 --> 00:02:42,430
And if I just try and sort it like this it does not like that I passed in this list of dictionaries

39
00:02:42,970 --> 00:02:46,440
and less than is non-supported between instances of dict and dict.

40
00:02:46,450 --> 00:02:47,880
It can't compare.

41
00:02:47,880 --> 00:02:52,540
You know which one comes before the other and there's no way for it to quantify it.

42
00:02:52,600 --> 00:02:54,150
So we get an error message.

43
00:02:54,310 --> 00:03:00,400
So we need to specify what we actually want it to sort on what is the special piece of data that it

44
00:03:00,400 --> 00:03:01,680
should use to sort.

45
00:03:01,760 --> 00:03:04,980
So the parameter will use is called key.

46
00:03:05,050 --> 00:03:08,870
This is how we specify what should be sorted or how it should be sorted.

47
00:03:09,310 --> 00:03:13,110
But then the trickier thing is how we actually tell it to sort.

48
00:03:13,300 --> 00:03:16,190
Well we could do the most basic one let me just show you the simplest one.

49
00:03:16,230 --> 00:03:22,290
I just do Len and it will run length line on every single dictionary.

50
00:03:22,300 --> 00:03:24,230
Dictionaries do you have a length.

51
00:03:24,430 --> 00:03:27,420
I think right now this all have basically the same length.

52
00:03:27,550 --> 00:03:29,540
It counts the number of keys I believe.

53
00:03:29,560 --> 00:03:32,280
So these all have user name and tweets.

54
00:03:32,500 --> 00:03:45,250
But if I edited them just to add in some random keys like a is equal to color is purple and down here

55
00:03:45,400 --> 00:03:48,490
I'll say no is 10.

56
00:03:48,610 --> 00:03:49,930
And one more random key.

57
00:03:49,930 --> 00:03:53,130
This one also has a color set to teal.

58
00:03:53,620 --> 00:03:59,440
OK so this dictionary here has one key two key three four keys.

59
00:03:59,440 --> 00:04:00,790
So it should be the longest.

60
00:04:00,790 --> 00:04:05,680
And then this one has one two three keys and all the rest only have two.

61
00:04:06,370 --> 00:04:14,380
OK so if we try sorting that way I'm going to paste the new users data in and if I do sorted users comma

62
00:04:14,800 --> 00:04:21,220
key equals Len it's going to try and use the length of each dictionary to sort and you can see it does

63
00:04:21,220 --> 00:04:22,710
it in ascending order.

64
00:04:22,900 --> 00:04:24,520
So we get things sorted by the length.

65
00:04:24,550 --> 00:04:26,240
The last two items in here.

66
00:04:26,470 --> 00:04:27,750
This is the longest dictionary.

67
00:04:27,760 --> 00:04:30,250
And then this is the second longest the one with purple.

68
00:04:30,340 --> 00:04:32,640
So that's probably not how we actually want to sort them.

69
00:04:32,770 --> 00:04:37,690
We want to sort them by user name alphabetically so instead of key equals Len.

70
00:04:37,960 --> 00:04:44,780
Well we're going to need to use our friend the lambda and let's see what should our parameter be called.

71
00:04:44,800 --> 00:04:54,670
Let's go with the user colon and then we just want to sort of based off of user user name.

72
00:04:54,700 --> 00:05:02,460
OK so this is basically telling the key to sort of is the user user name for each user in there.

73
00:05:02,620 --> 00:05:03,970
I know it's kind of bizarre.

74
00:05:04,110 --> 00:05:07,690
You think the lambda syntax but let's see if we're right.

75
00:05:07,810 --> 00:05:19,940
What happens so now we start off at Bob and then doggo lover guitar gal Jeff and then finally Samuel.

76
00:05:20,060 --> 00:05:26,510
So we're now starting using the username but we can also do things like sort based off of who has the

77
00:05:26,510 --> 00:05:34,250
most tweets who's most active and to do that instead of duplicate this we have a record of that set

78
00:05:34,250 --> 00:05:36,450
of user user username.

79
00:05:36,470 --> 00:05:37,680
What a mouthful.

80
00:05:37,810 --> 00:05:44,330
Well sort of based off of the tweets but we don't want to just sort by use or tweets.

81
00:05:44,330 --> 00:05:47,720
We want to sort by the length of user tweets.

82
00:05:48,550 --> 00:05:51,910
OK so now it's going to run.

83
00:05:51,950 --> 00:05:52,760
Figure out the length.

84
00:05:52,760 --> 00:05:56,120
So this user has three tweets this one has one this from zero.

85
00:05:56,330 --> 00:05:59,740
So copy this over tested out.

86
00:05:59,900 --> 00:06:06,650
And so we get zero tweets zero tweets all the way up to Samuel at the end who has three tweets and it's

87
00:06:06,650 --> 00:06:07,250
working.

88
00:06:07,310 --> 00:06:12,250
And if you want to reverse it we do reverse equals true.

89
00:06:12,820 --> 00:06:18,760
And now we'll get a list of our users sorted from most active to least active.

90
00:06:18,830 --> 00:06:20,000
I have one more example.

91
00:06:20,000 --> 00:06:26,420
If we had a list of songs like we do here each song has a title and it also has a play count how would

92
00:06:26,420 --> 00:06:28,510
I sort by play count.

93
00:06:28,550 --> 00:06:32,670
So I want to you know have a list of my most most commonly played songs.

94
00:06:33,080 --> 00:06:39,800
Well it would look something like this sordid and then songs and what's the key.

95
00:06:39,800 --> 00:06:40,960
If I can type piki.

96
00:06:40,970 --> 00:06:41,800
There you go.

97
00:06:42,230 --> 00:06:47,970
It's going to be either Lamda and let's just call each one of.

98
00:06:48,700 --> 00:06:53,890
And we want to sort by play count.

99
00:06:54,340 --> 00:06:55,850
And that should be it.

100
00:06:56,160 --> 00:06:57,710
Let's paste it in.

101
00:06:57,900 --> 00:06:59,640
Here's our songs.

102
00:06:59,920 --> 00:07:01,730
Song is like that.

103
00:07:01,780 --> 00:07:03,000
There we go.

104
00:07:03,030 --> 00:07:08,350
Now let's sort them by play count and so we have.

105
00:07:08,390 --> 00:07:12,290
Happy birthday on this one play all the way up to YMCA has 99.

106
00:07:12,380 --> 00:07:14,950
So of course we could also do reverse equals.

107
00:07:15,050 --> 00:07:20,670
True and now we get most popular most played songs down to our least played songs.

108
00:07:20,990 --> 00:07:22,910
OK so that is sorted.

109
00:07:23,000 --> 00:07:27,350
The key differences between sort is that sort Z-list method only works on lists.

110
00:07:27,440 --> 00:07:30,650
It actually sorts in place so it doesn't return a copy.

111
00:07:30,650 --> 00:07:37,850
It alters your original sorted we'll accept other iterable collections like tuples not only lists and

112
00:07:37,910 --> 00:07:44,660
also we can pass in things like a lambda to specify exactly the key that it should be sorted based off

113
00:07:44,660 --> 00:07:44,810
of.

114
00:07:44,810 --> 00:07:51,560
So this is commonly used if we have objects like this in a list and we want to sort based off of a property

115
00:07:51,710 --> 00:07:53,230
in those objects call.
