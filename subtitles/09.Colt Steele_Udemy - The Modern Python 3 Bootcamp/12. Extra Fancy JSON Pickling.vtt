WEBVTT
1
00:00:00.270 --> 00:00:01.010
Well come back.

2
00:00:01.110 --> 00:00:06.570
So in this last video I want to talk about a song based on if you're not familiar with it this is not

3
00:00:06.570 --> 00:00:08.650
going to be a comprehensive introduction.

4
00:00:08.760 --> 00:00:14.140
The HTP section of this course goes into more detail but it stands for javascript object notation.

5
00:00:14.340 --> 00:00:17.490
It's just another data format like sci fi.

6
00:00:17.550 --> 00:00:20.150
The whole idea is that it's a way of representing data.

7
00:00:20.310 --> 00:00:26.520
And initially it was created to represent javascript objects with use with javascript a way of sending.

8
00:00:26.580 --> 00:00:32.400
Just like with pickle where we're taking Python objects and sending them in our case to a file and then

9
00:00:32.400 --> 00:00:33.150
back.

10
00:00:33.270 --> 00:00:39.520
Jason was created to help us send javascript code from one computer to another over the Web send messages

11
00:00:39.520 --> 00:00:40.860
send data back and forth.

12
00:00:40.860 --> 00:00:46.200
It's now grown very very popular it's not only use with javascript even though it's still called javascript

13
00:00:46.200 --> 00:00:47.610
object notation.

14
00:00:47.610 --> 00:00:53.310
It's so popular in fact Python actually has a module called Jason that we can import and it provides

15
00:00:53.310 --> 00:01:00.450
functions to encode and decode Python to Jaison to go both directions on the dock so you can read about

16
00:01:00.450 --> 00:01:03.900
it the two functions I'll point out are Jason dumps.

17
00:01:03.930 --> 00:01:08.110
So for example if we call this right here set it to a variable.

18
00:01:08.190 --> 00:01:12.380
I'll just call it J equals Jason dumps and then I print J.

19
00:01:12.600 --> 00:01:18.390
But this will do is take Python and then turn it into J some formatting which just means I believe double

20
00:01:18.390 --> 00:01:25.210
quotes things like none will be changed to no I think tuples don't exist in Jason's.

21
00:01:25.230 --> 00:01:26.270
Let me just see what it does.

22
00:01:26.280 --> 00:01:27.620
Let's just look at the results.

23
00:01:28.050 --> 00:01:28.670
And there we go.

24
00:01:28.680 --> 00:01:30.300
So double strings everywhere.

25
00:01:30.690 --> 00:01:34.320
No tuples anymore and none has been replaced by no.

26
00:01:34.620 --> 00:01:36.760
Otherwise it's pretty much the same.

27
00:01:36.870 --> 00:01:40.660
It's just converting this python data into Jaison.

28
00:01:40.950 --> 00:01:47.130
So then we could save this to a file or we could create an API with it that other I don't know a javascript

29
00:01:47.130 --> 00:01:51.630
Front-End could consume or a job back end or a node back and it doesn't matter.

30
00:01:51.630 --> 00:01:56.520
Like I said it's not javascript specific but there are rules we have to abide by and I'm not going to

31
00:01:56.520 --> 00:01:59.710
go into them because Jaison got dumps so take care of it.

32
00:01:59.850 --> 00:02:05.520
But this allows us to do is to take a Python object and turn it into Jaison and then we could save it

33
00:02:05.520 --> 00:02:11.110
to a file by just doing you know a file about write using Jason dumps.

34
00:02:11.280 --> 00:02:16.470
And that works if we're working with built in types like we have here tuples and lists and dictionaries.

35
00:02:16.470 --> 00:02:21.990
But if we're trying to do an arbitrary custom class like we did with the pickle example for a simple

36
00:02:22.020 --> 00:02:23.660
class like this cat here.

37
00:02:24.150 --> 00:02:27.530
If I wanted to turn this into Jason there's no easy way.

38
00:02:27.570 --> 00:02:29.570
It doesn't really know what to do.

39
00:02:29.760 --> 00:02:34.250
What we could call is an instance of cat like this.

40
00:02:34.290 --> 00:02:39.150
Let's go with C equals cat name is Charles.

41
00:02:39.180 --> 00:02:44.140
And breed is Tabby like that and I can call.

42
00:02:44.190 --> 00:02:53.220
Let me copy this line and comment one out Jason that dumps C dot double underscore dict.

43
00:02:53.610 --> 00:03:00.510
And if we look at that we get a dictionary representation and then it's turned into J so on which looks

44
00:03:00.510 --> 00:03:03.390
basically I think it looks exactly the same.

45
00:03:03.390 --> 00:03:06.250
We have double quotes and there may have been single quotes.

46
00:03:06.250 --> 00:03:07.700
Nope it was all double codes.

47
00:03:07.920 --> 00:03:13.110
So this is one approach and again the whole thing that I'm trying to solve or explain here is if you

48
00:03:13.110 --> 00:03:13.540
want.

49
00:03:13.590 --> 00:03:18.600
You like the idea of pickling data and you like getting it into a file and then magically getting it

50
00:03:18.600 --> 00:03:24.150
back out without having to do any work other than calling a line of code but you don't want that data

51
00:03:24.150 --> 00:03:27.400
to be stored in such a obfuscated ugly way.

52
00:03:27.460 --> 00:03:30.950
You want to be able to look at it or use it later somewhere else.

53
00:03:31.080 --> 00:03:36.590
Well you could use Jasen but unfortunately this isn't really going to cut it for us.

54
00:03:36.610 --> 00:03:41.840
Instead I'll show you something called Jason pickle and this is a module or a library that someone wrote

55
00:03:41.900 --> 00:03:47.640
on a built in module a developer wrote this and the idea is that it's basically like pickle except it

56
00:03:47.640 --> 00:03:48.740
works a chainsaw.

57
00:03:49.050 --> 00:03:55.170
So it's serialized is Andy serialise is a complex Python objects to and from a song all we have to do

58
00:03:55.650 --> 00:04:00.550
is what we have to install first with Pip and there's instructions down here.

59
00:04:00.810 --> 00:04:08.260
So let's just run Python 3 dash pick install Jason Pickel.

60
00:04:08.290 --> 00:04:09.180
There we go.

61
00:04:09.190 --> 00:04:16.700
Now let's make a new file called Jason pickle why we import Jason pickle.

62
00:04:17.050 --> 00:04:19.460
And what did the duck say.

63
00:04:19.510 --> 00:04:20.660
All we have to do.

64
00:04:20.860 --> 00:04:28.570
We make an object and then we call J some pickled code and Jason pickle dot de-code.

65
00:04:29.020 --> 00:04:29.610
Cool.

66
00:04:29.620 --> 00:04:39.980
So let's just copy cat class again like this and let's encode.

67
00:04:40.090 --> 00:04:42.810
See this cat right here.

68
00:04:43.060 --> 00:04:46.930
And if I just print frozen Let's see what we get.

69
00:04:47.680 --> 00:04:49.030
So Python 3.

70
00:04:49.120 --> 00:04:52.460
Jason Paykel Here we go.

71
00:04:52.480 --> 00:04:54.060
So it's a little more complicated.

72
00:04:54.060 --> 00:04:56.970
You can see there's no name and breed.

73
00:04:57.070 --> 00:05:04.480
But then it also has this type where it's saying it's a PI object and the name of it is maned cat and

74
00:05:04.480 --> 00:05:10.240
that's useful because now if I stored that in a file so we could do that really quickly I'll just fast

75
00:05:10.240 --> 00:05:11.070
forward through it.

76
00:05:11.320 --> 00:05:11.770
OK.

77
00:05:11.860 --> 00:05:12.760
And back.

78
00:05:12.760 --> 00:05:15.790
All I did was open a file in write mode.

79
00:05:15.820 --> 00:05:16.960
I ran the same line of code.

80
00:05:16.960 --> 00:05:20.410
I'm calling it frozen and I'm just writing that into the file.

81
00:05:20.650 --> 00:05:25.510
So if we run it now we should have a new file created cat that Jason.

82
00:05:25.540 --> 00:05:29.610
If you look at that it should be exactly the same as what we saw printed out.

83
00:05:29.770 --> 00:05:34.620
But now here's the cool thing is that I can go back in here and go the opposite direction.

84
00:05:34.630 --> 00:05:41.350
So if I comment out and I'll just duplicate this down here what we're going to open it in read mode

85
00:05:41.360 --> 00:05:47.150
now and instead of frozen we'll call it unfrozen Jason pickle.

86
00:05:47.200 --> 00:05:50.340
De-code And what are we going to decode.

87
00:05:50.380 --> 00:05:52.850
Well we need to read the file first.

88
00:05:53.050 --> 00:05:55.030
So we'll just call it content.

89
00:05:55.080 --> 00:06:04.390
Eclipse files that read like that unfrozen is Jason Feargal that de-code content and then let's just

90
00:06:04.390 --> 00:06:12.540
print on frozen unfroze and to spell that word and let's see if it works cool.

91
00:06:12.540 --> 00:06:14.450
You can see what we got back was a cat.

92
00:06:14.460 --> 00:06:16.990
It reconstructed our cat from the dead.

93
00:06:17.190 --> 00:06:21.240
Basically took this Jaison and turned it into an actual cat object.

94
00:06:21.270 --> 00:06:27.900
So we can do things like oh we don't have any method that doesn't help us if we did have methods we'd

95
00:06:27.900 --> 00:06:28.910
be able to call them.

96
00:06:29.010 --> 00:06:31.480
And it's just name and breed for this example.

97
00:06:31.560 --> 00:06:36.690
But it works the exact same way as pickling something but the difference aside from having to download

98
00:06:36.690 --> 00:06:39.960
an actual library and not using a built in one like pickle.

99
00:06:39.990 --> 00:06:44.190
The main difference is that look at our data stored takes up more space.

100
00:06:44.190 --> 00:06:48.630
That's definitely true but we can look at this and we could send this to another language and parse

101
00:06:48.630 --> 00:06:50.490
this and use it if we needed to.

102
00:06:50.490 --> 00:06:52.020
So two different approaches.

103
00:06:52.080 --> 00:06:57.300
Again what I showed you first was just plain Jason and it's kind of limited in what you can do as far

104
00:06:57.300 --> 00:07:02.840
as storing custom classes and objects but this Jason pickle that somebody.

105
00:07:02.970 --> 00:07:03.800
Guy girl.

106
00:07:03.810 --> 00:07:08.940
A team who knows someone wrote and published is really pretty nifty.

107
00:07:08.940 --> 00:07:15.160
It allows us to pickle like we're using just the regular pickle except using song with a single line

108
00:07:15.650 --> 00:07:16.580
while two lines.

109
00:07:16.830 --> 00:07:18.600
Pretty bad ass awesome.

110
00:07:18.630 --> 00:07:19.830
We are done with this file.

111
00:07:19.880 --> 00:07:21.540
O.S. oof.

112
00:07:21.630 --> 00:07:25.710
We saw a lot a lot of different ways of working with files jampacked.

113
00:07:25.860 --> 00:07:30.750
Maybe not the most engaging thing ever but we started with just reading and writing very important this

114
00:07:30.750 --> 00:07:31.920
sort of thing.

115
00:07:31.920 --> 00:07:33.500
File that read filed out right.

116
00:07:33.630 --> 00:07:38.570
But then we also saw C S V and we saw Jaison and pickling.

117
00:07:39.060 --> 00:07:41.670
I need a break I need a long break.
