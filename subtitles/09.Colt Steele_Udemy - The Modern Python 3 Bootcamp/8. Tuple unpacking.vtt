WEBVTT
1
00:00:00.390 --> 00:00:07.140
OK so in this video we're going to use star but rather than adding it as a parameter to a function definition

2
00:00:07.560 --> 00:00:12.460
we're going to see how we can use it as an argument when we actually execute a function.

3
00:00:12.630 --> 00:00:14.890
So it will make more sense with an example as always.

4
00:00:15.000 --> 00:00:21.870
But what it allows us to do when we pass a star as an argument to a function it will unpack values what

5
00:00:21.870 --> 00:00:23.610
does unpack mean in this case.

6
00:00:23.610 --> 00:00:24.780
Let's take a look at some code.

7
00:00:24.960 --> 00:00:32.230
So here I have this function that we've been working with some all values takes in Star args as a parameter.

8
00:00:32.250 --> 00:00:34.130
Again we call it names instead.

9
00:00:34.140 --> 00:00:38.770
All it does is it has a total variable loops through everything in args.

10
00:00:38.910 --> 00:00:44.160
So if we can have one number or 1000 numbers being passed in and it adds some to a total and then it

11
00:00:44.160 --> 00:00:46.170
prints total rather than returning it.

12
00:00:46.170 --> 00:00:51.690
Even though printing is not anywhere near as useful as returning It's just easier for for now.

13
00:00:51.690 --> 00:00:53.860
So I don't have to type print all the time.

14
00:00:53.950 --> 00:01:00.530
So right now to execute this we would do something like one comma 30 comma to come a five or six.

15
00:01:00.570 --> 00:01:01.320
Right.

16
00:01:01.320 --> 00:01:03.950
And if we executed we go Python 3.

17
00:01:03.990 --> 00:01:07.740
I called this file unpacking up why we get the song.

18
00:01:07.770 --> 00:01:14.810
So that's great but what if I had a list of numbers in this case let's say this list right here.

19
00:01:14.940 --> 00:01:19.340
One two three four five six and I'll just call this Nomes.

20
00:01:19.530 --> 00:01:24.560
What if I wanted to call sum all values and I wanted Nomes to be passed in.

21
00:01:24.570 --> 00:01:29.730
So I want these numbers and this is actually common when you know we might consecutive numbers like

22
00:01:29.730 --> 00:01:30.030
this.

23
00:01:30.030 --> 00:01:31.130
Definitely not common.

24
00:01:31.290 --> 00:01:37.140
But you have a list of things and you want to unpack them split them apart and send it to a function

25
00:01:37.140 --> 00:01:39.480
that is expecting individual arguments.

26
00:01:39.510 --> 00:01:42.960
This function is not written expecting expecting a list.

27
00:01:43.140 --> 00:01:47.700
And in fact let's just take a look here what happens if I pass in numbers directly.

28
00:01:47.730 --> 00:01:48.980
What do you think will happen.

29
00:01:50.980 --> 00:01:57.130
We get an error and it says unsupported operand type for plus equals int and list.

30
00:01:57.580 --> 00:02:03.910
So to unpack what's happening here let's just print out the value of args at the very beginning before

31
00:02:03.910 --> 00:02:05.400
we even hit any errors.

32
00:02:05.400 --> 00:02:07.140
And let's rerun it.

33
00:02:07.300 --> 00:02:10.280
Here is what args looks like.

34
00:02:10.540 --> 00:02:14.020
It's a tuple because remember it's always a tuple.

35
00:02:14.020 --> 00:02:17.670
It collects everything that's been passed in as an argument and puts him at a tuple.

36
00:02:17.680 --> 00:02:20.550
But in this case only one item was passed in.

37
00:02:20.620 --> 00:02:22.720
So it's a one item long tuple.

38
00:02:22.720 --> 00:02:26.460
Remember in the last video we saw that Python will add a comma a trailing comma.

39
00:02:26.470 --> 00:02:30.700
If it's a one item long tuple just to distinguish it from regular Prendes.

40
00:02:30.700 --> 00:02:37.360
So this doesn't work for us because what happens is totalistic zero that's fine for Nahm in args.

41
00:02:37.390 --> 00:02:39.210
Well there's one thing in args.

42
00:02:39.280 --> 00:02:43.890
So one time through numb is going to be equal to a list.

43
00:02:43.960 --> 00:02:50.710
So we're going to try to take total which is zero and integer and plus equals an entire list which is

44
00:02:50.710 --> 00:02:51.980
not going to work.

45
00:02:52.270 --> 00:02:52.740
OK.

46
00:02:52.930 --> 00:03:02.200
So you might think What if instead of a list Nom's was a tuple could we pass that in directly some all

47
00:03:02.200 --> 00:03:04.070
values with a tuple.

48
00:03:04.120 --> 00:03:05.040
What happens now.

49
00:03:07.900 --> 00:03:14.650
We get the same problem except rather than an int and list discrepancy it's an end and tuple because

50
00:03:14.650 --> 00:03:17.560
this is what args looks like.

51
00:03:18.100 --> 00:03:22.330
It's a tuple with one item in it which just happens to be another tuple.

52
00:03:22.330 --> 00:03:24.260
Same problem as before.

53
00:03:24.280 --> 00:03:30.130
So what we actually need is a way to say OK take everything in this tuple or take everything in this

54
00:03:30.130 --> 00:03:35.770
list and turn them into individual arguments that we pass into this function.

55
00:03:36.010 --> 00:03:37.350
And it's nice and easy.

56
00:03:37.360 --> 00:03:39.040
This is where the star comes in.

57
00:03:39.130 --> 00:03:45.000
It just looks like this star numbs and it works both with tuples and duelists.

58
00:03:45.250 --> 00:03:49.160
But I'll show you now we run this.

59
00:03:49.190 --> 00:03:54.230
This is what args looks like and the result we get printed out is 21.

60
00:03:54.620 --> 00:04:00.500
So by adding that star right there it basically says Take this collection this list or in this case

61
00:04:00.530 --> 00:04:08.470
this tuple and go through it and pass each one of these in each element or each item as a separate argument.

62
00:04:08.510 --> 00:04:12.960
So then start args collects all of these instead of one tuple.

63
00:04:12.980 --> 00:04:15.730
So one was sent to a set three and so on.

64
00:04:15.740 --> 00:04:20.390
Same thing if we had a list instead we we'll get the exact same value.

65
00:04:20.840 --> 00:04:22.160
Just to show you.

66
00:04:22.670 --> 00:04:23.420
There we go.

67
00:04:23.420 --> 00:04:24.530
We get 21 again.

68
00:04:24.740 --> 00:04:26.990
So it also passes them in individually.

69
00:04:27.110 --> 00:04:28.590
So this is called unpacking.

70
00:04:28.670 --> 00:04:30.720
Hopefully you can see why it's called unpacking.

71
00:04:30.770 --> 00:04:36.200
We are taking a collection and chopping it up unpacking it into individual components and passing them

72
00:04:36.200 --> 00:04:37.200
each through.

73
00:04:37.280 --> 00:04:38.320
So very useful.

74
00:04:38.390 --> 00:04:43.560
A lot of times we're working with lists or tuples and we need to split them up to pass them into functions.
