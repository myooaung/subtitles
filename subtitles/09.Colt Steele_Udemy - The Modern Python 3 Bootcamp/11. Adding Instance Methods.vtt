WEBVTT
1
00:00:00.240 --> 00:00:00.780
All right.

2
00:00:00.780 --> 00:00:04.200
Moving on we've seen how to define a basic class.

3
00:00:04.200 --> 00:00:09.330
We've even seen an ad in the init method and also some instance attributes.

4
00:00:09.420 --> 00:00:17.880
So in our example of the user the user class we have first last an age our instance attributes and remember

5
00:00:17.880 --> 00:00:24.190
attributes are just like pieces of data that are associated with each individual user.

6
00:00:24.300 --> 00:00:26.050
At least instance attributes are.

7
00:00:26.160 --> 00:00:28.860
We'll talk about class attributes and a little bit.

8
00:00:28.860 --> 00:00:32.900
So each instance the user has its own first last and age.

9
00:00:32.910 --> 00:00:35.380
Now we're going to talk about instance methods.

10
00:00:35.400 --> 00:00:40.760
So this is where object oriented programming really gets to be a lot more useful.

11
00:00:40.800 --> 00:00:47.370
To be honest because right now we're just organizing you know pieces of data into an object which frankly

12
00:00:47.370 --> 00:00:55.300
we could have just done like this we could have created a dictionary and had first colon and then Joe.

13
00:00:55.490 --> 00:01:02.460
I won't make you watch the whole thing but you know last Colin Smith and for each user why not just

14
00:01:02.460 --> 00:01:03.680
represent it with this.

15
00:01:03.750 --> 00:01:06.110
I go through all of the work of doing all of this here.

16
00:01:06.240 --> 00:01:12.560
Well once we had methods in to our instances things become a lot more useful.

17
00:01:12.600 --> 00:01:18.630
So if you recall in the video where I introduced this little poker example and it had the non-addict

18
00:01:18.630 --> 00:01:19.700
warranted example.

19
00:01:19.920 --> 00:01:23.760
And then here was the example of using object oriented programming.

20
00:01:23.850 --> 00:01:26.740
There is missing code the class definition is in alpha.

21
00:01:26.970 --> 00:01:29.530
But notice how a initialized a new deck.

22
00:01:29.850 --> 00:01:32.670
And then I'm calling Dechert shuffle deck.

23
00:01:32.880 --> 00:01:35.900
Deal hand deck dot reset.

24
00:01:35.970 --> 00:01:39.390
Where are those methods defined and how do we actually do that.

25
00:01:39.390 --> 00:01:45.480
So each deck each instance of the deck class has its own shuffle or its own deal hand.

26
00:01:45.480 --> 00:01:46.760
So let me show you how we do that.

27
00:01:46.770 --> 00:01:48.350
It's actually really really easy.

28
00:01:48.510 --> 00:01:54.720
All we do is traditionally we go and write all the instance methods after anet.

29
00:01:54.810 --> 00:01:59.850
So anything that starts that double underscores and ends double underscores should go at the top of

30
00:01:59.850 --> 00:02:00.800
your class.

31
00:02:00.870 --> 00:02:02.970
I don't think you actually break anything.

32
00:02:03.030 --> 00:02:04.960
It's just convention to put it up top.

33
00:02:05.260 --> 00:02:06.770
OK so I'm going to come down here.

34
00:02:06.960 --> 00:02:11.160
And first let's talk about what we would actually put in an instance method.

35
00:02:11.340 --> 00:02:17.670
So in this case for a user maybe you would make a simple method that just returns the full name first

36
00:02:17.760 --> 00:02:20.450
space last to do that.

37
00:02:20.490 --> 00:02:23.630
We just write def and then a name and the method.

38
00:02:23.730 --> 00:02:25.830
Of course we have to be inside the class.

39
00:02:25.920 --> 00:02:30.470
So pay attention to your indentation let's call it full underscore name.

40
00:02:30.480 --> 00:02:36.320
So this is just a regular function but it becomes a method because we're adding it to an object.

41
00:02:36.480 --> 00:02:37.420
It's part of a class.

42
00:02:37.410 --> 00:02:44.130
And so whenever we initialize a user to a method on that user just like when we initialize a list and

43
00:02:44.130 --> 00:02:46.050
we call that pop.

44
00:02:46.170 --> 00:02:50.790
This is an empty list but if we called up pop this is an instance of list pop.

45
00:02:50.810 --> 00:02:54.390
It's a method versus things like print that is a function.

46
00:02:54.390 --> 00:02:56.910
It's not on an object.

47
00:02:56.910 --> 00:02:57.910
Hopefully that's clear.

48
00:02:58.080 --> 00:03:04.200
OK so def file name and Folman doesn't need to take any power there's no parameters no need to pass

49
00:03:04.200 --> 00:03:05.290
any arguments.

50
00:03:05.310 --> 00:03:07.680
I just want the full name to come back.

51
00:03:07.680 --> 00:03:11.400
The thing is we still need to provide self.

52
00:03:11.640 --> 00:03:16.680
And if you didn't catch my note in the last video you do not have to call this parameter self.

53
00:03:16.740 --> 00:03:18.360
It's conventional to call it self.

54
00:03:18.360 --> 00:03:22.250
I've never seen anyone really use any other name but you could call this.

55
00:03:22.440 --> 00:03:28.220
I don't know instance of user or thingy.

56
00:03:28.350 --> 00:03:31.930
Totally up to you but self is pretty much all I've ever seen.

57
00:03:32.070 --> 00:03:37.410
And any time we define an instance method we need to pass self as the first perimeter and in this case

58
00:03:37.410 --> 00:03:38.710
that's all.

59
00:03:39.390 --> 00:03:42.570
And then inside the method we have access to self.

60
00:03:42.810 --> 00:03:46.070
So all I want to do is return first space last.

61
00:03:46.290 --> 00:03:55.170
I can't do this return to an empty string and I can't just do first to reference first.

62
00:03:55.170 --> 00:04:02.200
I still have to do self first and then I'll do space self at last.

63
00:04:02.580 --> 00:04:07.460
OK so any time we did find an instance method each copy of the user.

64
00:04:07.470 --> 00:04:13.650
So each instance of the User class made from this blueprint has its own full name method and that full

65
00:04:13.650 --> 00:04:19.320
name is going to return its particular first name and its particular last name separated by space.

66
00:04:19.440 --> 00:04:22.890
So every user assuming they have a different first and last name.

67
00:04:22.940 --> 00:04:24.620
This will return something different.

68
00:04:24.840 --> 00:04:25.740
So let's test it out.

69
00:04:25.740 --> 00:04:27.780
Now I have these two users.

70
00:04:28.110 --> 00:04:35.070
Let's just do print user to dot and we just call it like any other method that we've done.

71
00:04:35.290 --> 00:04:35.840
Pop.

72
00:04:35.880 --> 00:04:37.290
You need the parentheses afterwards.

73
00:04:37.290 --> 00:04:42.290
Print is a function but same idea and executed and there we go.

74
00:04:42.360 --> 00:04:43.730
Blanca Lopez.

75
00:04:44.040 --> 00:04:46.890
So first space last name.

76
00:04:46.920 --> 00:04:50.690
OK so let's try one more just to get in the groove here.

77
00:04:50.970 --> 00:04:53.160
Let's do one called initials.

78
00:04:53.160 --> 00:04:55.720
So Def initials.

79
00:04:55.950 --> 00:05:01.760
It's not going to take any parameters other than self but it should return the first letter of first

80
00:05:01.760 --> 00:05:03.290
name period.

81
00:05:03.300 --> 00:05:05.080
It should be like J.

82
00:05:05.120 --> 00:05:07.240
As for Joe Smith.

83
00:05:07.650 --> 00:05:10.260
OK so let's do this now.

84
00:05:10.310 --> 00:05:11.920
Def initials.

85
00:05:12.140 --> 00:05:19.680
We can just do a single line return and it's going to be self-taught first to zero with character.

86
00:05:19.790 --> 00:05:21.580
Period.

87
00:05:22.040 --> 00:05:26.440
Last zero with character period again.

88
00:05:27.140 --> 00:05:29.290
OK so hopefully you can see the pattern here.

89
00:05:29.300 --> 00:05:35.960
This is just a regular function definition but it's in it's inside of a class and that makes it special.

90
00:05:35.960 --> 00:05:39.080
We will see how to define something called a class method.

91
00:05:39.080 --> 00:05:40.940
So this is an instance method.

92
00:05:41.000 --> 00:05:46.270
Every instance of user has its own method a class method works a bit different.

93
00:05:46.430 --> 00:05:48.280
It's part of the class will talk about it later.

94
00:05:48.350 --> 00:05:49.720
Let's just focus on these.

95
00:05:49.850 --> 00:05:55.460
So full name and initials self always is the first parameter.

96
00:05:55.700 --> 00:05:58.150
So in these two cases it's the only one.

97
00:05:58.250 --> 00:06:07.400
But if I wanted to pass something else in like let's just do one more here called Def likes and all

98
00:06:07.400 --> 00:06:12.200
that it will do is spit out somebody's name space like a thing.

99
00:06:12.200 --> 00:06:18.890
So we'll take a thing as a parameter here and I just want to print out something like.

100
00:06:18.890 --> 00:06:23.310
Joe likes candy if thing is Candy.

101
00:06:23.450 --> 00:06:28.550
So I would call it by doing user one dot likes and then pass on.

102
00:06:28.640 --> 00:06:29.440
I don't know.

103
00:06:29.480 --> 00:06:30.750
Ice cream.

104
00:06:30.800 --> 00:06:31.540
Silly example.

105
00:06:31.550 --> 00:06:36.390
But I do want to show that it's when you pass a parameter and you don't need to access it self.

106
00:06:36.410 --> 00:06:40.020
It's just like any other function we we've written or defined.

107
00:06:40.060 --> 00:06:42.320
You have access to that parameter.

108
00:06:42.500 --> 00:06:50.960
So this looks like this return F and then we would just have name so self-caused let's just do first

109
00:06:51.620 --> 00:06:54.420
likes and then thing.

110
00:06:54.490 --> 00:07:00.470
So we don't access self so any time we're trying to refer to the specific current instance.

111
00:07:00.470 --> 00:07:08.560
So if I'm calling user one likes self is going to refer to User 1 I'm calling user to dog likes self

112
00:07:08.570 --> 00:07:13.240
refers to user to and then thing is just what's being passed in.

113
00:07:13.580 --> 00:07:17.610
So let's test these two things out see what happens.

114
00:07:17.960 --> 00:07:19.180
See what I want to do.

115
00:07:19.460 --> 00:07:28.990
Let's do print user one likes ice cream and then print user to likes.

116
00:07:29.220 --> 00:07:29.730
I don't know.

117
00:07:29.730 --> 00:07:31.070
Chips.

118
00:07:31.140 --> 00:07:35.870
Chips meaning like crisps not fries if you're British.

119
00:07:35.880 --> 00:07:36.370
OK.

120
00:07:36.620 --> 00:07:42.510
And we get Joe like ice cream banca likes chips so you can see inside of this instance method by referring

121
00:07:42.510 --> 00:07:48.330
to the individual instance and something that's been passed in self is always going to be the first

122
00:07:48.330 --> 00:07:50.280
parameter in any instance method.

123
00:07:50.340 --> 00:07:52.120
We never actually pass anything in.

124
00:07:52.140 --> 00:07:53.030
The first thing.

125
00:07:53.140 --> 00:07:55.020
Python takes care of all that for us.

126
00:07:55.050 --> 00:07:55.900
So instance method.

127
00:07:55.920 --> 00:07:57.460
So first let's take it.

128
00:07:57.540 --> 00:08:00.270
Check out our initials.

129
00:08:00.270 --> 00:08:01.610
So let's just.

130
00:08:01.920 --> 00:08:07.190
And use are two dot initials and user one save.

131
00:08:07.210 --> 00:08:08.460
Test it out.

132
00:08:08.460 --> 00:08:09.080
There we go.

133
00:08:09.140 --> 00:08:11.100
B-L Blanca what was it.

134
00:08:11.100 --> 00:08:13.030
Lopez and J Yes.

135
00:08:13.050 --> 00:08:15.520
Joe smith something like that.

136
00:08:15.660 --> 00:08:17.080
Very forgettable name.

137
00:08:17.220 --> 00:08:18.950
I apologize if your name is Joe Smith.

138
00:08:19.210 --> 00:08:19.530
OK.

139
00:08:19.560 --> 00:08:23.910
And just around the sauf let's add one more methadone that does something with age.

140
00:08:24.150 --> 00:08:27.790
Let's define one called is senior.

141
00:08:27.930 --> 00:08:32.180
So in the US senior citizens are defined as being 65 years or older.

142
00:08:32.310 --> 00:08:36.990
So it should be a boolean method that returns true or false depending on if age is greater than or equal

143
00:08:36.990 --> 00:08:38.390
to 65.

144
00:08:38.730 --> 00:08:44.850
So nice and easy just call it is Senior self.

145
00:08:45.570 --> 00:08:52.920
And then we just need to return what we want we want self-taught age greater than or equal to 65.

146
00:08:53.340 --> 00:09:01.270
So instead of doing if self that age is greater than 65 return TRUE else return false just return this.

147
00:09:01.260 --> 00:09:04.950
This itself is a boolean expression returns true or false.

148
00:09:05.080 --> 00:09:10.150
And actually all of these methods have shown you are purely retrieving information.

149
00:09:10.170 --> 00:09:13.020
There's this idea of getters versus setters.

150
00:09:13.020 --> 00:09:17.420
These are getting information but we're never changing first last or age.

151
00:09:17.570 --> 00:09:19.350
So let me just show you one more.

152
00:09:19.740 --> 00:09:21.010
Let's do one called.

153
00:09:21.360 --> 00:09:21.920
I don't know.

154
00:09:21.960 --> 00:09:22.550
First day

155
00:09:25.150 --> 00:09:32.300
and all that birthday will do is add 1 to age and then return a message it says Happy Birthday whatever.

156
00:09:32.470 --> 00:09:34.650
So self.

157
00:09:34.660 --> 00:09:44.470
And then we'll just do self-taught age plus 1 and then let's return a string that says happy and then

158
00:09:44.470 --> 00:09:45.540
let's put the age in there.

159
00:09:45.550 --> 00:09:47.920
Self-taught age th.

160
00:09:48.010 --> 00:09:57.740
Like happy 60 fifth birthday comma and need my F for that and then we'll do self-taught first.

161
00:09:58.400 --> 00:09:59.250
OK.

162
00:09:59.250 --> 00:10:03.240
So it should be you know happy 69th birthday Joe.

163
00:10:03.240 --> 00:10:05.530
Happy Forty-Second birthday Blanca.

164
00:10:05.850 --> 00:10:09.730
So just to show you that we can update these attributes.

165
00:10:09.730 --> 00:10:13.750
They're not static they're not stuck in whatever we first assign them to be.

166
00:10:13.920 --> 00:10:15.120
OK so we have a bunch of methods.

167
00:10:15.120 --> 00:10:20.580
Let's test them all out we've done likes and initials comment that out for now let's do

168
00:10:23.460 --> 00:10:25.930
let's do is senior for user 2.

169
00:10:26.950 --> 00:10:30.130
And so user 2 is Howel's 41.

170
00:10:30.150 --> 00:10:31.860
So this should be false.

171
00:10:31.890 --> 00:10:35.650
Let's do first day for user 1.

172
00:10:36.240 --> 00:10:38.310
OK let's test it out.

173
00:10:38.310 --> 00:10:46.310
And then also after that let me do a print user one dot page so we can see if age has changed.

174
00:10:46.380 --> 00:10:48.520
Actually print it before and after.

175
00:10:48.530 --> 00:10:49.520
See what happens.

176
00:10:49.860 --> 00:10:52.030
So we get false for the senior.

177
00:10:52.050 --> 00:10:53.400
That's right.

178
00:10:53.400 --> 00:10:55.500
Age for user 1 was 68.

179
00:10:55.560 --> 00:10:58.380
Then I called birthday and it happy 69.

180
00:10:58.450 --> 00:11:03.820
Joe I guess it should say s.a birthday and then ages now 69.

181
00:11:04.250 --> 00:11:04.590
OK.

182
00:11:04.650 --> 00:11:07.390
So we've seen a bunch of different instance methods.

183
00:11:07.440 --> 00:11:10.480
This is where objects and classes start to shine.

184
00:11:10.500 --> 00:11:14.610
They're no longer just storage places for information or data.

185
00:11:14.670 --> 00:11:17.270
They also have functionality.

186
00:11:17.310 --> 00:11:18.390
Fun stuff.

187
00:11:18.510 --> 00:11:19.070
What else.

188
00:11:19.140 --> 00:11:20.100
Let me just wrap up.

189
00:11:20.100 --> 00:11:24.160
Self needs to be there for every instance method we define.

190
00:11:24.430 --> 00:11:32.000
If let's say you might think OK I'm going to just have a method that doesn't access self like say hello

191
00:11:32.050 --> 00:11:40.280
but if I just wanted something called say hi and all that it does every time is PRINT Hello.

192
00:11:40.860 --> 00:11:41.580
All right.

193
00:11:41.580 --> 00:11:45.290
So if I tried to then run that by calling.

194
00:11:45.450 --> 00:11:50.770
I don't know user one dot say Hi it's not using self.

195
00:11:50.810 --> 00:11:52.790
So I don't need to add it.

196
00:11:52.950 --> 00:11:58.950
Well actually if we do try and run it it gives us an error to say high takes zero positional arguments

197
00:11:58.950 --> 00:12:00.420
but one was given.

198
00:12:00.540 --> 00:12:01.980
So Python is still trying it.

199
00:12:01.970 --> 00:12:06.990
It assumes that there's you know self or whatever you want to call it by itself as the convention is

200
00:12:06.990 --> 00:12:11.940
set up is the first parameter but because it's empty there's no parameters.

201
00:12:11.940 --> 00:12:12.660
It freaks out.

202
00:12:12.750 --> 00:12:18.630
So moral of the story you need to have self in there even if you're not using it inside the method most

203
00:12:18.630 --> 00:12:23.030
of the time though pretty much 100 percent of the time you will be using it inside the method until

204
00:12:23.040 --> 00:12:24.450
we talk about class methods.

205
00:12:24.450 --> 00:12:25.310
That's coming up.

206
00:12:25.510 --> 00:12:25.950
OK.

207
00:12:26.010 --> 00:12:31.410
So we have an exercise or two after this and then we're going to talk about class attributes and class

208
00:12:31.410 --> 00:12:32.120
methods.

209
00:12:32.310 --> 00:12:33.240
So let's get some more practice.
