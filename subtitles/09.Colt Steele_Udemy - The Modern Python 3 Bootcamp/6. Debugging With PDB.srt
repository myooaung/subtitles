1
00:00:00,270 --> 00:00:01,380
Hey welcome back.

2
00:00:01,380 --> 00:00:07,160
So this section has been all about errors and handling them identifying them raising our own.

3
00:00:07,350 --> 00:00:12,240
But now we're going to talk about the other side of the coin which is when we encounter an error in

4
00:00:12,240 --> 00:00:13,820
our code that is not intentional.

5
00:00:13,950 --> 00:00:15,230
So we didn't raise it.

6
00:00:15,720 --> 00:00:16,740
We didn't expect it.

7
00:00:16,740 --> 00:00:21,600
Something's not going the way we want whether it's a very loud angry error that's actually printing

8
00:00:21,600 --> 00:00:26,070
out an error to our terminal or a silent error meaning or a silent bug.

9
00:00:26,080 --> 00:00:30,930
It's more likely you would hear it as meaning that something isn't working the way we expect but it's

10
00:00:30,930 --> 00:00:32,740
not actually breaking the code.

11
00:00:32,820 --> 00:00:37,770
So that's the most frustrating is when you have code and you expect it to work one way and it doesn't

12
00:00:37,770 --> 00:00:38,440
break.

13
00:00:38,460 --> 00:00:40,490
It just gives you a different result.

14
00:00:40,500 --> 00:00:45,240
The tool I'm going to introduce called PDB will actually help us understand our code and step through

15
00:00:45,240 --> 00:00:47,410
it to figure out where we're going wrong.

16
00:00:47,610 --> 00:00:50,440
So PDB stands for Python debugger.

17
00:00:50,490 --> 00:00:56,850
It's a module just like random that we included earlier on in the course that we have to manually import

18
00:00:56,900 --> 00:00:58,310
in our code with a single line.

19
00:00:58,440 --> 00:00:59,720
And then we have access to it.

20
00:00:59,880 --> 00:01:01,830
So we don't have to install it or anything.

21
00:01:01,830 --> 00:01:03,150
And then by importing it.

22
00:01:03,150 --> 00:01:08,550
And then there's a single method that we'll call which will pause execution of our code.

23
00:01:08,630 --> 00:01:15,300
It looks like this PDB that said trace that wherever we put it in our code on line 1 or on line 100

24
00:01:15,720 --> 00:01:18,660
when Python encounters that line it will pause.

25
00:01:18,840 --> 00:01:23,850
So it doesn't quit it doesn't skip everything else it pauses and then in our terminal we can go and

26
00:01:23,850 --> 00:01:27,570
interact with values or we can step through one line at a time.

27
00:01:27,930 --> 00:01:29,280
So enough of explaining it.

28
00:01:29,280 --> 00:01:35,000
Let me just show you here I have a really simple file and we're not going to debug something you know

29
00:01:35,010 --> 00:01:37,220
mysterious that we're not sure what's happening.

30
00:01:37,230 --> 00:01:40,600
This is super simple I have two variables both strings.

31
00:01:40,770 --> 00:01:42,810
I'm adding them together into a third variable.

32
00:01:42,870 --> 00:01:48,370
Then I make another variable actually called Third and I add that into result and then we print a result.

33
00:01:48,450 --> 00:01:53,710
So nothing groundbreaking but we're still going to use it as just our starter debugging code.

34
00:01:53,750 --> 00:01:57,420
So the first thing we need to do if we want to use PDB is import it.

35
00:01:57,750 --> 00:02:04,310
And we've seen how to import code we saw to import random in the Rock Paper Scissors section.

36
00:02:04,410 --> 00:02:10,630
So we import a module just by name import PDB and then the magic fine.

37
00:02:10,650 --> 00:02:11,750
Is this right here.

38
00:02:11,760 --> 00:02:18,600
PDB does set trace and ninety nine point ninety nine percent of the time when you work with PDB at least

39
00:02:18,600 --> 00:02:20,670
when I do this is what I use.

40
00:02:21,240 --> 00:02:23,320
And we put this wherever we want.

41
00:02:23,640 --> 00:02:29,580
If we actually had something that was breaking I would put it right before the line or the couple of

42
00:02:29,580 --> 00:02:35,310
lines where things were breaking and then that allows you to see a preview of what happens before and

43
00:02:35,310 --> 00:02:37,920
then step through it and then step after it.

44
00:02:37,920 --> 00:02:40,190
But for now let's just put it right.

45
00:02:40,410 --> 00:02:41,950
Let's go right here.

46
00:02:42,090 --> 00:02:46,350
So we're going to define first and then second and then stop.

47
00:02:46,470 --> 00:02:52,260
And when I run this file Python is going to get to here and it's going to stop and then I'm going to

48
00:02:52,260 --> 00:02:53,640
be able to go explore.

49
00:02:53,670 --> 00:02:57,050
So it opens up this new shell for me to start typing in.

50
00:02:57,160 --> 00:03:02,040
And the only other thing I'll point out there are some commands down here and we'll talk about these

51
00:03:02,040 --> 00:03:03,080
in just a second.

52
00:03:03,150 --> 00:03:10,110
But first let me just show you when I run it so this file was called debugging.

53
00:03:10,140 --> 00:03:12,280
OK so look what happened.

54
00:03:12,410 --> 00:03:14,640
Results equals first plus second.

55
00:03:14,700 --> 00:03:21,800
This is telling me this is the next line that it's waiting to execute and going back to these commands

56
00:03:21,800 --> 00:03:22,530
here.

57
00:03:22,860 --> 00:03:28,170
There's this command Oh I can type in if I type L you can see PDB.

58
00:03:28,170 --> 00:03:31,200
So normally we run a python file and it executes.

59
00:03:31,230 --> 00:03:35,790
Maybe it will ask for input or something and it's done in our prompt goes back to normal.

60
00:03:36,000 --> 00:03:37,160
That's not the case here.

61
00:03:37,230 --> 00:03:38,070
It's waiting.

62
00:03:38,370 --> 00:03:42,660
And I'll type L which stands for list which will show me where I am.

63
00:03:42,720 --> 00:03:44,240
Sort of like a map.

64
00:03:44,590 --> 00:03:47,980
And so it shows me that basically this is the last thing to run.

65
00:03:48,300 --> 00:03:51,120
And the arrow is pointing to what happens next.

66
00:03:51,120 --> 00:03:51,720
OK.

67
00:03:52,200 --> 00:03:54,160
So it's showing us that this is next.

68
00:03:54,390 --> 00:03:57,980
And what I can do now is explore some of the values.

69
00:03:57,990 --> 00:04:05,010
So for example if I type First you can see that it has value it's set to first.

70
00:04:05,010 --> 00:04:05,660
If I type.

71
00:04:05,710 --> 00:04:09,420
Second it has a value as well which is second.

72
00:04:09,640 --> 00:04:17,170
That makes sense but if I try to access a variable like Third it's not yet defined because this line

73
00:04:17,170 --> 00:04:19,450
hasn't been run yet neither has this one.

74
00:04:19,600 --> 00:04:20,220
So if I tried.

75
00:04:20,220 --> 00:04:21,640
Result.

76
00:04:21,640 --> 00:04:22,270
Same thing.

77
00:04:22,270 --> 00:04:23,290
Name error.

78
00:04:23,320 --> 00:04:27,580
So if something was going wrong with this code this is exactly what I would do.

79
00:04:27,580 --> 00:04:33,830
I set trace somewhere and I'd check variable values before I'd look at you know results.

80
00:04:33,850 --> 00:04:35,320
Ok it doesn't exist yet.

81
00:04:35,410 --> 00:04:41,020
And then I would use the PDB command to move to the next line to actually execute this line and then

82
00:04:41,020 --> 00:04:46,300
pause here and then I would look at the value after that line executed in the command to do that.

83
00:04:46,420 --> 00:04:47,410
It's in this file.

84
00:04:47,600 --> 00:04:49,770
It's an next line.

85
00:04:50,290 --> 00:04:56,440
So if I type and look at where the arrow is right here or just this is the next line to run I type and

86
00:04:57,680 --> 00:05:03,630
and the arrow has moved down if I type L again for a list you can see this line has run and we're waiting

87
00:05:03,630 --> 00:05:04,690
on this one next.

88
00:05:04,680 --> 00:05:09,080
And if I type results it now has the value of first second.

89
00:05:09,360 --> 00:05:13,420
So by the end of this code it will have first second third.

90
00:05:13,470 --> 00:05:18,370
So and also if I if I look at the value of Third it's still not defined.

91
00:05:18,390 --> 00:05:19,520
This is the last thing to run.

92
00:05:19,530 --> 00:05:22,430
So I can step through with and again.

93
00:05:22,780 --> 00:05:28,510
And now if I look at a third it's equal to the string there first is still the same.

94
00:05:28,510 --> 00:05:31,840
So a second result is only first plus second.

95
00:05:31,990 --> 00:05:36,850
But now if I step through one more time you can see the result.

96
00:05:36,910 --> 00:05:41,370
Now it should be equal to first second third and it is.

97
00:05:41,530 --> 00:05:46,580
And then the last thing to happen when I execute this is for print result to run.

98
00:05:46,580 --> 00:05:51,630
And so I can hit and again and then it prints result which is what we get right here.

99
00:05:51,640 --> 00:05:55,680
So if you can see how this is useful already I should mention to get out of here.

100
00:05:55,670 --> 00:06:01,930
You can use the command Q to quit and it's really not graceful It basically like throws a wrench in

101
00:06:01,930 --> 00:06:05,020
everything and gives us an error message.

102
00:06:05,050 --> 00:06:06,300
That's a two way of quitting.

103
00:06:06,430 --> 00:06:10,820
So there's another way of quitting if I rerun this which is kind of counterintuitive.

104
00:06:10,900 --> 00:06:15,940
The C commander's stands for continue which seems like the opposite of quit but it actually just means

105
00:06:15,940 --> 00:06:17,710
to continue with the rest of the code.

106
00:06:17,710 --> 00:06:21,450
So if this is where he paused just continue with everything afterwards.

107
00:06:21,790 --> 00:06:27,060
And then that will you know in a split second execute our code and we'll be done and it won't quit out

108
00:06:27,070 --> 00:06:29,230
with that hideous message.

109
00:06:29,260 --> 00:06:33,970
So I type C and it runs everything which only prints first second third.

110
00:06:33,970 --> 00:06:35,890
That's really all that happens in our code.

111
00:06:36,040 --> 00:06:37,580
And then we go back to normal.

112
00:06:37,660 --> 00:06:39,910
We're out of that PDB world.

113
00:06:39,910 --> 00:06:42,280
One other thing of note about PDB.

114
00:06:42,280 --> 00:06:47,350
If we had some sort of some code that looks something like this and I'll just paste it in and comment

115
00:06:47,350 --> 00:06:48,040
this out.

116
00:06:48,040 --> 00:06:53,500
The first thing I'll point out is that most of the time at least when I use PDB a lot of other developers

117
00:06:53,890 --> 00:06:58,640
will just do it on a single line import PDB and you need a semicolon here.

118
00:06:58,720 --> 00:07:02,310
Otherwise Python freaks out because it thinks this is all an import.

119
00:07:02,650 --> 00:07:07,580
So this is a way of doing multiple lines on one line import PDB and then use it.

120
00:07:07,660 --> 00:07:12,670
And the only reason for that we'll talk more about imports in the modules section I should've mentioned

121
00:07:12,670 --> 00:07:14,010
that earlier in this video.

122
00:07:14,020 --> 00:07:19,610
Don't worry about modules for now but the main reason is that really this is usually in my code for

123
00:07:19,630 --> 00:07:24,180
five minutes 10 minutes an hour however long I'm debugging something and then I get rid of it.

124
00:07:24,400 --> 00:07:28,690
It's not something you keep in your code with all the other import statements up top.

125
00:07:28,690 --> 00:07:30,690
So it's usually that use like this.

126
00:07:30,880 --> 00:07:31,310
OK.

127
00:07:31,510 --> 00:07:38,050
But the main point I want to make here is that if I have variable names like A B C and D and I save

128
00:07:38,200 --> 00:07:45,630
and I execute this where I'm setting trace here and let's say that I'm calling add numbers 1 2 3 4.

129
00:07:45,980 --> 00:07:48,710
OK let's go back over here.

130
00:07:48,730 --> 00:07:49,820
I run it now.

131
00:07:50,410 --> 00:07:52,180
And let's look where I am.

132
00:07:52,660 --> 00:08:00,610
So we're returning A B C and D and if I try and access the values I can fight type D.

133
00:08:00,610 --> 00:08:08,380
For example I get this newest frame or if I typed a this is giving me basically all values I believe

134
00:08:08,380 --> 00:08:14,110
is what H stands for and it's not actually giving me the value of a self for Type B.

135
00:08:14,170 --> 00:08:21,600
And I think that's a command and free type C that is a command right that quits out as we saw earlier.

136
00:08:21,610 --> 00:08:26,510
So if you have variable names that conflict with the commands like L..

137
00:08:26,620 --> 00:08:32,140
If we had a variable named L. then and each time I typed elf It would just list things instead of giving

138
00:08:32,140 --> 00:08:33,420
us the value of L.

139
00:08:33,670 --> 00:08:38,880
So instead what we can use to print the actual value let's say of C..

140
00:08:38,890 --> 00:08:43,840
I don't want to quit type C it would quit or continue which would effectively quit.

141
00:08:44,140 --> 00:08:47,050
I can type P which stands for print.

142
00:08:47,050 --> 00:08:56,500
So print the value of c and we get three print a and I get one now ABC and D are terrible variable names

143
00:08:56,650 --> 00:08:58,050
so serves me right.

144
00:08:58,060 --> 00:09:03,220
If you use those as variable names but just beware anyway that if you are using single letter variable

145
00:09:03,220 --> 00:09:07,780
names they may conflict with existing PDB commands and I showed some of them here.

146
00:09:07,780 --> 00:09:13,060
These are the ones I commonly use that there are more out there for example as we saw.

147
00:09:13,060 --> 00:09:17,650
So just be careful with your variable names and if something weird happens in PDB and it's not what

148
00:09:17,650 --> 00:09:18,590
you expect.

149
00:09:18,850 --> 00:09:20,460
Check the name of your variables.

150
00:09:20,470 --> 00:09:23,140
You may have a conflict with an existing command.

151
00:09:23,140 --> 00:09:23,570
All right.

152
00:09:23,620 --> 00:09:26,190
So that kind of wraps up what I want to cover in this video.

153
00:09:26,500 --> 00:09:31,820
We import PDB run P-T beat up set trace that halts execution.

154
00:09:31,990 --> 00:09:39,070
I would one thing I should mention in this example we have a function defined in PDB that said trace

155
00:09:39,070 --> 00:09:42,070
doesn't actually run until we execute the function.

156
00:09:42,280 --> 00:09:48,490
So Python goes over this and it's like oh this is a function it's not being executed yet it's just being

157
00:09:48,490 --> 00:09:49,230
defined.

158
00:09:49,300 --> 00:09:52,730
So I'm not going to run Python that PDB that said trace.

159
00:09:52,780 --> 00:09:57,470
But as soon as we execute add numbers then this is executed.

160
00:09:58,010 --> 00:09:59,380
So that makes sense.

161
00:09:59,380 --> 00:10:04,840
Otherwise if it ran right away and I tried to access ABC Indee there would be no values assigned to

162
00:10:04,840 --> 00:10:05,340
them.

163
00:10:05,500 --> 00:10:10,900
So that's PDB short for pretty dang Bewkes useful.

164
00:10:11,050 --> 00:10:12,820
Pretty dang amazing.
