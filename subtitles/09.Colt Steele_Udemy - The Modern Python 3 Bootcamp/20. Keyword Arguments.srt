1
00:00:00,350 --> 00:00:06,150
OK so the last thing to discuss are on parameters and arguments are what's called keyword arguments.

2
00:00:06,390 --> 00:00:10,200
So let me just show an example here we have a function called full name.

3
00:00:10,200 --> 00:00:11,160
It has two parameters.

4
00:00:11,160 --> 00:00:17,220
First and last whatever usually is passed in first is going to be assigned to first and the second argument

5
00:00:17,220 --> 00:00:18,820
would be assigned to last.

6
00:00:18,900 --> 00:00:26,590
However using keyword arguments we can actually specify directly inside of the function call.

7
00:00:26,610 --> 00:00:30,010
So let's take a look at this example right here.

8
00:00:30,240 --> 00:00:37,200
I'm specifying let's call full name and I want last to be steal the parameter last should have the value

9
00:00:37,200 --> 00:00:37,780
still.

10
00:00:37,800 --> 00:00:42,510
Never mind the fact that first is listed first in the function declaration.

11
00:00:42,510 --> 00:00:48,270
I want last to be steel and first to be caught and we get the exact same result as if we had just pass

12
00:00:48,330 --> 00:00:52,060
code then you don't know why use my name again.

13
00:00:52,120 --> 00:00:53,360
Gets kind of dull.

14
00:00:53,400 --> 00:00:56,730
So both of these examples return the exact same thing.

15
00:00:57,150 --> 00:01:02,730
And also this first example if we just left off first equals and last equals and just add cold to combis

16
00:01:02,730 --> 00:01:05,070
deal would also print the same thing.

17
00:01:05,100 --> 00:01:10,070
So keyword arguments just allow us to specify if we know the name of the parameters.

18
00:01:10,110 --> 00:01:12,260
So it only works if we know the name of the parameters.

19
00:01:12,300 --> 00:01:16,520
But we can specify which argument corresponds to which particular parameter.

20
00:01:16,530 --> 00:01:18,130
So the order doesn't matter anymore.

21
00:01:18,270 --> 00:01:24,270
So back in this xponent example where we have no in power power has a default value.

22
00:01:24,390 --> 00:01:35,820
If I wanted I could do print xponent and let's say I wanted to do three and set that to be power and

23
00:01:35,820 --> 00:01:39,010
then numb is four.

24
00:01:39,270 --> 00:01:44,640
So in this example even though I'm passing three in first it's going to be assigned to power and then

25
00:01:44,640 --> 00:01:46,750
four will be assigned to No.

26
00:01:47,220 --> 00:01:54,390
And so then the result of this should be four cubed which is what four times four times for 64.

27
00:01:54,570 --> 00:01:56,090
Let's double check here.

28
00:01:56,340 --> 00:01:58,350
So that's just called exponent and there we go.

29
00:01:58,350 --> 00:02:05,410
We get 64 so we could also do the exact same thing but switch the order and get the exact same result.

30
00:02:05,430 --> 00:02:11,010
So all this is just to show you that using keyword arguments by specifying the exact names of the parameters

31
00:02:11,490 --> 00:02:14,850
we can alter the order that things are passed in.

32
00:02:14,880 --> 00:02:20,940
Also it just makes things if we look at you know the function call here is very clear what's happening

33
00:02:21,030 --> 00:02:28,350
where it's maybe people would argue even though it's more syntax it's more legible as far as how this

34
00:02:28,350 --> 00:02:33,360
works than just for number three because here you it's not clear you know what's the number what's the

35
00:02:33,360 --> 00:02:34,250
power.

36
00:02:34,410 --> 00:02:35,850
Here it's very explicit.

37
00:02:35,880 --> 00:02:37,050
So let's just double check.

38
00:02:37,050 --> 00:02:38,640
We get 64 twice.

39
00:02:38,640 --> 00:02:40,220
It works exactly the same way.

40
00:02:40,260 --> 00:02:42,360
So why would you use keyword arguments.

41
00:02:42,360 --> 00:02:46,890
Well aside from what we've already talked about which is it adds some flexibility.

42
00:02:47,040 --> 00:02:49,860
You know we can change the order we pass things in in.

43
00:02:49,920 --> 00:02:55,500
It also will become a lot more valuable later on when we talked about passing a dictionary to a function

44
00:02:55,980 --> 00:02:58,510
and unpacking the values from a dictionary.

45
00:02:58,530 --> 00:03:03,120
That's all I'll say about it for now when we get to functions Part 2 which is coming up after we do

46
00:03:03,120 --> 00:03:07,830
a bunch of exercises after this section we'll learn more about passing a dictionary to a function and

47
00:03:07,860 --> 00:03:08,920
unpacking it.

48
00:03:08,970 --> 00:03:14,370
The last point I want to hit home is that even though it does use an equal sign it is very different

49
00:03:14,370 --> 00:03:16,050
from default perhaps.

50
00:03:16,410 --> 00:03:22,170
So when you define a function and you put an equal sign in the function definition you are setting a

51
00:03:22,170 --> 00:03:26,160
default parameter when you invoke a function and you use an equal sign.

52
00:03:26,160 --> 00:03:28,610
You are making a keyword argument.

53
00:03:29,070 --> 00:03:32,390
So here's an example again the same full name function.

54
00:03:32,460 --> 00:03:38,510
But this time we've given a default parameter first defaults to cold last defaults to steal.

55
00:03:38,550 --> 00:03:41,200
So this is what we've already seen a couple of videos ago.

56
00:03:41,370 --> 00:03:42,460
The default value.

57
00:03:42,540 --> 00:03:43,650
COLD STEEL.

58
00:03:43,950 --> 00:03:49,950
So if we just call full name on it's own and don't pass any arguments and we get your name as cold steel

59
00:03:49,960 --> 00:03:56,280
because these default in this case we are using keyword arguments what we're what we learned in this

60
00:03:56,280 --> 00:04:02,800
video where I can explicitly say last is supposed to be enthusiast first is supposed to be Python.

61
00:04:02,910 --> 00:04:05,010
So that allows us to switch the order up.

62
00:04:05,010 --> 00:04:10,530
Not that you know there's a real compelling reason to do that here but just to show you this is different

63
00:04:10,740 --> 00:04:11,100
than this.

64
00:04:11,100 --> 00:04:16,380
These are two completely different features of Python functions even though they both use an equal sign

65
00:04:16,740 --> 00:04:19,140
depending on the context and makes a big difference.

66
00:04:19,140 --> 00:04:25,440
Default values default parameters appear in the function declaration down here keyword arguments when

67
00:04:25,440 --> 00:04:26,620
we actually execute it.

68
00:04:26,630 --> 00:04:27,050
All right.

69
00:04:27,060 --> 00:04:28,220
Hopefully that makes sense.
