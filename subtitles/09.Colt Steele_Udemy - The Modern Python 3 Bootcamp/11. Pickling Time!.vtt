WEBVTT
1
00:00:00.210 --> 00:00:01.060
Welcome back.

2
00:00:01.140 --> 00:00:02.090
I've got another video.

3
00:00:02.100 --> 00:00:03.640
Thankfully it's not the.

4
00:00:03.680 --> 00:00:09.260
Has to be very ready to be done with that topic but it does deal with interacting with files file.

5
00:00:09.290 --> 00:00:12.450
I know it's a topic that is called pickling.

6
00:00:12.480 --> 00:00:17.530
It's kind of fun and the whole idea is that if we have data it's a python specific thing.

7
00:00:17.550 --> 00:00:20.310
We have Python data or a Python object.

8
00:00:20.400 --> 00:00:22.040
So I have a couple of classes here.

9
00:00:22.190 --> 00:00:25.050
And let's say I have a cat instance.

10
00:00:25.050 --> 00:00:26.740
So this cat class.

11
00:00:27.230 --> 00:00:38.080
I don't know blue equals cat and name is is blue and breed is scottish fold like that.

12
00:00:38.160 --> 00:00:39.300
And her toy is a string.

13
00:00:39.300 --> 00:00:44.250
All right so I have this cat and this is a simple example but imagine that I don't know we have a poker

14
00:00:44.250 --> 00:00:49.620
game and I have a deck of cards and I want to be able to actually save the state of the deck of cards

15
00:00:50.010 --> 00:00:53.540
in between when I run this application when it shuts down or something.

16
00:00:53.610 --> 00:01:01.000
I want to save the contents to a file we could use CSP and to do that we would just have to figure out

17
00:01:01.030 --> 00:01:04.930
how to actually get the data you know in a c b format.

18
00:01:04.930 --> 00:01:06.980
How would we represent all of this.

19
00:01:07.000 --> 00:01:08.670
This would be pretty easy I guess.

20
00:01:08.670 --> 00:01:10.010
Name breed and toy.

21
00:01:10.120 --> 00:01:11.370
But imagine a deck of cards.

22
00:01:11.370 --> 00:01:12.940
We have 52 cards.

23
00:01:13.090 --> 00:01:15.070
This data here isn't really tabular.

24
00:01:15.070 --> 00:01:16.860
Also it's just a single cat.

25
00:01:17.020 --> 00:01:22.240
No reason to really make a C S V file where we have an entire you know it's not tabular just a single

26
00:01:22.240 --> 00:01:22.930
thing.

27
00:01:22.930 --> 00:01:23.930
It would be one row.

28
00:01:24.190 --> 00:01:31.430
What we can do instead is use what's called pickling pickling is or pickle is a module.

29
00:01:31.460 --> 00:01:36.860
It's a you know the idea of taking something and pickling it putting it in a jar and whatever what is

30
00:01:36.860 --> 00:01:42.700
that vinegar that you pick up something in and makes it last a lot longer and saves it so you don't

31
00:01:42.700 --> 00:01:43.600
starve for the winter.

32
00:01:43.600 --> 00:01:47.700
Back in the olden times Same idea here we can take something from Python.

33
00:01:47.850 --> 00:01:51.670
We pickle it put it in a special pickle file and.

34
00:01:51.850 --> 00:01:58.060
Python will do the pickle module will serialize the data converting it into something called a byte

35
00:01:58.060 --> 00:01:58.700
stream.

36
00:01:58.960 --> 00:02:04.750
And then we can unpick it whenever we want and pull it back out of that file and it will be turned back

37
00:02:04.750 --> 00:02:06.490
into whatever it was before.

38
00:02:06.670 --> 00:02:12.180
So let's let me just show you I have this blue variable which is an instance of cat.

39
00:02:12.340 --> 00:02:18.580
If I wanted to imagine this is a game state or something a bigger application I want to save it and

40
00:02:18.580 --> 00:02:20.930
then come back later and reload it.

41
00:02:21.070 --> 00:02:24.510
First I need to import pickle.

42
00:02:24.960 --> 00:02:25.370
OK.

43
00:02:25.390 --> 00:02:26.850
And then scroll down.

44
00:02:26.980 --> 00:02:34.740
I need to open the file to whatever the file I want to do with Open and it has to be a pickle file.

45
00:02:34.750 --> 00:02:42.100
So let's just call this I don't know pet dot pickle and we want to write to the file and the other thing

46
00:02:42.100 --> 00:02:47.840
that's important is we're writing binary here so we need to add that we were not manually doing any

47
00:02:47.840 --> 00:02:56.950
of the binary but it's going to be converted into a byte stream when we call pickle as file then and

48
00:02:56.950 --> 00:03:01.810
here we just called pickle dot dum and then pass something in.

49
00:03:01.810 --> 00:03:04.230
So the first thing would be blue.

50
00:03:04.390 --> 00:03:07.800
And the second thing is the file that we're going to dump it to.

51
00:03:07.810 --> 00:03:11.700
So that dump takes in some object.

52
00:03:11.830 --> 00:03:17.650
We can also use a tuple pass in multiple items and then those will be serialized and stored in this

53
00:03:17.650 --> 00:03:18.690
file.

54
00:03:19.300 --> 00:03:20.380
Let's run it now.

55
00:03:21.760 --> 00:03:23.740
If we look at Pead stopped pickle.

56
00:03:23.830 --> 00:03:24.910
Here's what we get.

57
00:03:25.210 --> 00:03:26.860
Very unreadable humans.

58
00:03:26.890 --> 00:03:32.200
That's actually an important note about pickling is that if you need your data when it's saved in a

59
00:03:32.200 --> 00:03:38.470
file somewhere to be readable or you needed to be able to I don't know be opened up in another language

60
00:03:38.600 --> 00:03:44.050
like you want to be able to have your database connect to it or a java file somewhere else.

61
00:03:44.050 --> 00:03:44.920
I don't know.

62
00:03:45.010 --> 00:03:45.540
It depends.

63
00:03:45.560 --> 00:03:51.130
But if that data needs to be usable while it's stored then you probably don't want to pick it.

64
00:03:51.250 --> 00:03:57.340
But if all you're doing is using a python file to open it back up and unpack all the data then this

65
00:03:57.340 --> 00:03:58.700
works fine it's so easy.

66
00:03:58.720 --> 00:04:01.460
I mean you could see that was a single line to dump it.

67
00:04:01.570 --> 00:04:06.260
So I didn't have to figure out how to you know parcel's C CAC figure out what was the row.

68
00:04:06.280 --> 00:04:11.300
I didn't have to write it to a file I just called this in the past in blue.

69
00:04:11.320 --> 00:04:14.260
Now the trick is getting it back out right.

70
00:04:14.290 --> 00:04:17.370
So I'm going to comment all of this out.

71
00:04:17.440 --> 00:04:23.030
I'll leave the import pickle in to get it back out if you want to open the file again.

72
00:04:23.500 --> 00:04:25.640
Head Start pickle.

73
00:04:26.320 --> 00:04:35.680
And we need to do it as RB reading binary as file and then we just do pickle dot load and then the name

74
00:04:35.680 --> 00:04:36.440
of the file.

75
00:04:36.700 --> 00:04:44.770
And it's just called file and whatever comes back from that will just be blue or if we passed in a tuple

76
00:04:44.800 --> 00:04:48.640
with multiple things multiple objects they would all come back in a single tuple.

77
00:04:48.670 --> 00:04:53.440
So let's save it to a variable or call it zombie view.

78
00:04:53.680 --> 00:04:55.030
Very funny.

79
00:04:55.860 --> 00:05:01.000
And then let's print if I just print Zombi blue to redefine.

80
00:05:01.450 --> 00:05:06.810
OK so there is this method that should say self-taught name is a self-taught species and then we could

81
00:05:06.810 --> 00:05:13.110
also do print Zombi blue dot play method.

82
00:05:13.130 --> 00:05:14.800
All right tested out.

83
00:05:15.090 --> 00:05:22.980
But before we can actually do that we were commenting out some code that we do need for example classes.

84
00:05:23.010 --> 00:05:24.470
That's really what it comes down to.

85
00:05:24.720 --> 00:05:30.450
I just meant to comment out this part where we created blue but if we don't have these classes defined

86
00:05:30.750 --> 00:05:35.240
then this data comes back and Python is going to say what do you mean a cat class.

87
00:05:35.250 --> 00:05:36.770
I don't know what a cat class is.

88
00:05:36.810 --> 00:05:37.940
I don't have that recipe.

89
00:05:37.980 --> 00:05:42.600
So we need this class definition in order to make any instance just like we need it in order to run

90
00:05:42.600 --> 00:05:44.130
this line.

91
00:05:44.130 --> 00:05:48.860
Now if I tried running it there we go blue is a cat blue place with string.

92
00:05:48.990 --> 00:05:50.930
We have brought blue back from the dead.

93
00:05:51.210 --> 00:05:52.720
So that's really all there is to pickling.

94
00:05:52.740 --> 00:05:57.340
Like I said if you wanted to do more than one thing at a time you pass the minutes a tuple.

95
00:05:57.450 --> 00:06:00.660
So blue comma resti like this.

96
00:06:00.840 --> 00:06:02.850
And then they come back in that order.

97
00:06:02.850 --> 00:06:10.600
So zombie blue comma Zombi rusty equals whatever pickled download returns which should be a tuple.

98
00:06:10.680 --> 00:06:14.020
And so the first thing that tuples are assigned here and the second is assigned there.

99
00:06:14.400 --> 00:06:16.040
But I'll leave it at one item for now.

100
00:06:16.280 --> 00:06:16.800
OK.

101
00:06:16.860 --> 00:06:19.210
So like I said pickling is really really easy.

102
00:06:19.260 --> 00:06:24.600
It's a great way if you just need to store Python data or Python object or a couple somewhere so that

103
00:06:24.600 --> 00:06:28.490
you can resurrect it when you know your application starts up again.

104
00:06:28.650 --> 00:06:31.040
You can do that but remember it is not readable.

105
00:06:31.110 --> 00:06:35.580
It's not a good way of storing data if you need it while it's being stored in another format another

106
00:06:35.580 --> 00:06:36.290
language.

107
00:06:36.390 --> 00:06:39.400
And on top of all that remember that whatever's stored in there.

108
00:06:39.450 --> 00:06:45.450
When we unpack it it's immediately being called only pickled out load that Python code is running.

109
00:06:45.540 --> 00:06:52.740
So if somehow you allowed a user or something where there was bad Python code inside of the Picco file

110
00:06:53.160 --> 00:06:55.800
when you load it it's just going to execute.

111
00:06:55.800 --> 00:07:01.770
In our case that's not a risk for us but if we were taking user input and allowing users to write code

112
00:07:01.770 --> 00:07:04.860
somehow and then saving that and pickling that could get bad.

113
00:07:04.860 --> 00:07:11.430
So just an obligatory warning there but really it's best for just quickly dumping some Python data.

114
00:07:11.430 --> 00:07:13.950
Python objects we can come back later and get it.

115
00:07:14.390 --> 00:07:14.850
OK.
