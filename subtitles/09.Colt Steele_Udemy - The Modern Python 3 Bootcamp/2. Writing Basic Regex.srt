1
00:00:00,230 --> 00:00:01,380
Hey welcome back.

2
00:00:01,440 --> 00:00:06,000
So as I mentioned in the last video we're going to start by focusing on projects regular expressions

3
00:00:06,630 --> 00:00:10,240
in isolation outside of Python outside of any programming language.

4
00:00:10,260 --> 00:00:14,340
Just practice them mean to show you a tool in the browser that's really useful.

5
00:00:14,340 --> 00:00:19,870
It allows you to live and test things out and on and test strings and see how your regex works.

6
00:00:19,890 --> 00:00:21,410
If it works the way you want it to.

7
00:00:21,820 --> 00:00:22,210
OK.

8
00:00:22,230 --> 00:00:29,040
But to start just a warning or a disclaimer there are a ton of reject symbols characters special little

9
00:00:29,040 --> 00:00:33,990
bits of logic and information that you could know about and that you could use.

10
00:00:34,050 --> 00:00:35,990
I'm just going to cover some important ones.

11
00:00:36,090 --> 00:00:42,280
I could go on for like five six seven hours probably at least make a separate course on projects.

12
00:00:42,330 --> 00:00:45,430
I'm just going to cover some of the basics and the most useful things.

13
00:00:45,660 --> 00:00:51,690
And also you know I'm no rejects expert what I do most of the time if I need a regular expression I

14
00:00:51,690 --> 00:00:55,590
start building it on my own but then if there's something that I feel like I don't know what the heck

15
00:00:55,590 --> 00:00:59,690
I'm doing I go and Stack Overflow I see what other people have done.

16
00:00:59,790 --> 00:01:03,310
You don't want to you know try validating a credit card on your own.

17
00:01:03,540 --> 00:01:07,590
If someone else has done it and they know a lot more about how credit card numbers should be formatted

18
00:01:07,630 --> 00:01:08,690
what they should look like.

19
00:01:08,910 --> 00:01:13,090
So I'm not trying to you know come off as some guru of regular expressions.

20
00:01:13,090 --> 00:01:19,410
Honestly I usually will use something else I found online or somebody else's regular expression unless

21
00:01:19,410 --> 00:01:22,400
I'm doing something very unique that other people haven't done.

22
00:01:22,410 --> 00:01:28,440
In which case I just pull up the docs or I look at this page the rejects cheat sheet there's a bunch

23
00:01:28,440 --> 00:01:29,560
of these online.

24
00:01:29,580 --> 00:01:34,920
But if I scroll down you can see these are all special characters and symbols and things that we can

25
00:01:34,920 --> 00:01:36,840
do in regular expressions.

26
00:01:36,840 --> 00:01:37,650
Put them all together.

27
00:01:37,650 --> 00:01:39,090
I mean there's there's a lot here.

28
00:01:39,420 --> 00:01:44,810
So we're not going to go over all of them but I am going to point out some important ones and to start.

29
00:01:45,180 --> 00:01:47,790
I'm on a web page called Pipex.

30
00:01:47,850 --> 00:01:53,390
If you just Google regular expression editor right rejects a browser there's tons of these out there.

31
00:01:53,550 --> 00:01:59,570
But I like this one it just has simple pretty interface and it is tailored for Python regular expressions

32
00:01:59,580 --> 00:02:04,560
as I've said a couple of times are separate entities away from any programming language but they have

33
00:02:04,560 --> 00:02:11,460
kind of slight flavors in different languages so a python regex there might be some small distinctions

34
00:02:11,460 --> 00:02:13,670
from a javascript regular expression.

35
00:02:13,950 --> 00:02:19,240
So it's better to use something that is python specific even though we're not writing any Python yet.

36
00:02:19,540 --> 00:02:19,780
OK.

37
00:02:19,800 --> 00:02:25,640
So the way this this works by the way we have test strings down here are a giant test string.

38
00:02:25,650 --> 00:02:28,190
I'm going to fast forward and put a bunch of text in here.

39
00:02:28,560 --> 00:02:29,010
OK.

40
00:02:29,070 --> 00:02:31,650
So I have some sample text so we're going to work with.

41
00:02:31,830 --> 00:02:37,440
Now up here is where we define our patterns our regular expressions that will be tested against this.

42
00:02:37,440 --> 00:02:42,880
So it's just a live editor a life way of seeing things and matches will be displayed down here.

43
00:02:42,900 --> 00:02:48,960
So before we learn any of the complex symbols or the special syntax if we just put a single letter in

44
00:02:48,960 --> 00:02:51,800
here you would never you probably wouldn't do this with the.

45
00:02:51,960 --> 00:02:58,620
But if we just wanted to find all matches for the letter D for example I can just type the letter D

46
00:02:59,310 --> 00:03:05,130
and you can see down here it's highlighting for me the first match the second the third the fourth match

47
00:03:05,400 --> 00:03:06,640
and the fifth match.

48
00:03:06,880 --> 00:03:08,810
And all on the screen.

49
00:03:08,880 --> 00:03:14,730
Hopefully this is big enough for you to see that they've all been highlighted so I could also just tack

50
00:03:14,730 --> 00:03:16,820
on another D.

51
00:03:16,860 --> 00:03:22,160
Now it's only going to find matches where there are two D's in a row which is right here.

52
00:03:22,170 --> 00:03:26,810
Same thing with three Ds for example or what else can we do.

53
00:03:26,810 --> 00:03:32,010
I only want to find D's that are preceded by a C C D.

54
00:03:32,010 --> 00:03:33,520
That's what I get here.

55
00:03:33,540 --> 00:03:38,760
So the point is you can just type regular characters in here if I wanted to find matches for cats it's

56
00:03:38,760 --> 00:03:39,510
nice and simple.

57
00:03:39,560 --> 00:03:41,620
I want to find a smiley face.

58
00:03:41,640 --> 00:03:43,230
It's not as simple.

59
00:03:43,440 --> 00:03:47,330
And that's because I'm using a parentheses which has a special use.

60
00:03:47,520 --> 00:03:53,340
So the first little magic symbol I'll show you this is just like in Python if you want to escape the

61
00:03:53,340 --> 00:03:55,180
meaning the special meaning of a character.

62
00:03:55,200 --> 00:04:03,560
Like if you want to add a new line in Python use backslash and same thing here we use backslash Pirenne

63
00:04:05,040 --> 00:04:08,440
or what we'll see later backslash dot.

64
00:04:08,500 --> 00:04:13,670
If I just do dot on its own it has its own special meaning that matches everything.

65
00:04:13,860 --> 00:04:14,730
Which is what it means.

66
00:04:14,730 --> 00:04:16,270
Just match anything.

67
00:04:16,350 --> 00:04:23,600
But if we add backslash dot it only matches an actual period as you can see there.

68
00:04:23,650 --> 00:04:25,090
OK so getting ahead of myself.

69
00:04:25,140 --> 00:04:32,760
I just wanted to show you that you type letter in here or a word I capital I with a space I added a

70
00:04:32,760 --> 00:04:34,280
space after I get this.

71
00:04:34,440 --> 00:04:39,830
Notice that it doesn't highlight when I do I doesn't I like this because it is case sensitive.

72
00:04:40,290 --> 00:04:42,500
There's an option here we can tell it to ignore case.

73
00:04:42,540 --> 00:04:44,260
That's something you can do in Python as well.

74
00:04:44,430 --> 00:04:46,390
But for now just be aware of it.

75
00:04:46,640 --> 00:04:47,360
OK.

76
00:04:47,580 --> 00:04:51,370
So let's talk about our first batch of rechecks syntax.

77
00:04:51,540 --> 00:04:55,560
So there are special characters they all or most of them that we're going to see.

78
00:04:55,560 --> 00:04:57,550
Start with the backslash here.

79
00:04:57,960 --> 00:05:06,060
So if you wanted to match a number any number containing 0 9 that's all of them so far as I know we

80
00:05:06,060 --> 00:05:09,370
can use backslash lowercase D.

81
00:05:09,960 --> 00:05:18,660
So if I wanted to do that now I can do a single one like backslash D that will match 40 or 4 and 9.

82
00:05:18,780 --> 00:05:22,580
It's hard to tell that they are separate matches.

83
00:05:22,760 --> 00:05:24,480
What's the best way of doing this.

84
00:05:24,510 --> 00:05:26,040
Let me do a couple more.

85
00:05:26,040 --> 00:05:27,470
She is 49 years old.

86
00:05:27,540 --> 00:05:32,430
I am six seventy five years old.

87
00:05:32,790 --> 00:05:36,790
He is three OK.

88
00:05:36,960 --> 00:05:39,360
So all of these there's five matches here.

89
00:05:39,610 --> 00:05:45,370
But if I only want to match people who are double digits people who are you know teenagers or above

90
00:05:46,060 --> 00:05:52,600
I could do two backslash D's in a row and now I have to find a pattern any digit from 0 to 9 followed

91
00:05:52,600 --> 00:05:54,840
by another digit zero tonight.

92
00:05:55,030 --> 00:05:57,290
And they have to be touching one another.

93
00:05:57,670 --> 00:06:04,510
So if I had you know three space three for some reason it doesn't count and thus I had a space in here

94
00:06:04,850 --> 00:06:06,540
it's literal.

95
00:06:06,610 --> 00:06:07,830
So that's backslash.

96
00:06:07,840 --> 00:06:10,770
D stands for digit.

97
00:06:10,780 --> 00:06:19,000
We also have things like backslash W. which is a letter digit or underscore I think it stands for word

98
00:06:19,000 --> 00:06:20,740
character.

99
00:06:20,740 --> 00:06:26,830
So if I just do a single one of those backslash back slash double you can see it matches almost everything

100
00:06:27,180 --> 00:06:35,230
that doesn't match the dots the for the sign or the smiley face because those aren't considered words

101
00:06:35,230 --> 00:06:41,470
character so was any letter uppercase or lowercase any number and underscore.

102
00:06:41,510 --> 00:06:43,870
Next we have backslash s.

103
00:06:44,320 --> 00:06:46,720
Well that stands for whitespace character.

104
00:06:46,810 --> 00:06:50,080
So you saw me doing things with a space where I did you know one word.

105
00:06:50,150 --> 00:06:54,590
Let's do one word character followed by another word character with a space in between.

106
00:06:54,840 --> 00:06:56,060
And that works.

107
00:06:56,350 --> 00:07:01,310
But you can also use backslash S which matches things like tabs.

108
00:07:01,420 --> 00:07:03,280
And I think new lines as well.

109
00:07:03,460 --> 00:07:08,190
If you ever have questions find any cheat sheet like this one as mentioned.

110
00:07:08,320 --> 00:07:15,190
Scroll down find a backslash and it tells us any whitespace character and gives you an example.

111
00:07:15,430 --> 00:07:18,040
And it's just generally useful.

112
00:07:18,100 --> 00:07:24,490
So if I change this to be a word character followed by backslash s and then another word character can

113
00:07:24,490 --> 00:07:30,070
see you know it's highlighting things correctly or getting a space in between but it also matches things

114
00:07:30,070 --> 00:07:33,160
where there's a character and then a new line and then another character.

115
00:07:33,370 --> 00:07:37,000
So that backslash as is matching that new line.

116
00:07:37,000 --> 00:07:39,410
And if I had a tab in here it would also match that.

117
00:07:39,520 --> 00:07:40,560
But I don't have tabs.

118
00:07:40,660 --> 00:07:41,030
OK.

119
00:07:41,050 --> 00:07:42,540
So that's the first three.

120
00:07:42,550 --> 00:07:47,940
They also have reverse analogues inverses I don't know what the correct terminology is.

121
00:07:48,010 --> 00:07:52,950
Use a capital letter and they are the negated version so not in the capital D.

122
00:07:52,990 --> 00:07:56,170
Backslash capital-T is anything that's not a digit.

123
00:07:56,170 --> 00:07:57,640
Same thing with W..

124
00:07:57,660 --> 00:08:01,680
Capitalize it means not a word character s not a whitespace character.

125
00:08:01,690 --> 00:08:03,940
So back here let's go with backslash.

126
00:08:03,940 --> 00:08:05,470
Capital W..

127
00:08:05,920 --> 00:08:11,380
And that gives us anything that is not a word character remember a word character was any number any

128
00:08:11,380 --> 00:08:13,010
letter capital or lower case.

129
00:08:13,150 --> 00:08:15,360
And what is an underscore.

130
00:08:15,640 --> 00:08:18,170
So here we're getting all the spaces we're getting.

131
00:08:18,260 --> 00:08:21,620
The smiley face the at symbol the periods.

132
00:08:21,670 --> 00:08:27,250
Those are not word characters or if I do backslash capital D It gives me anything that is not a digit

133
00:08:27,550 --> 00:08:29,290
number from 0 to 9.

134
00:08:29,380 --> 00:08:31,480
So that gives us everything else.

135
00:08:31,490 --> 00:08:33,940
Same thing backslash as capital.

136
00:08:33,970 --> 00:08:35,560
Everything that is not is space.

137
00:08:35,590 --> 00:08:41,390
So let's say I want it to match all five letter words five five letters only.

138
00:08:41,740 --> 00:08:49,450
So I could use or numbers I could do backslash W for the first character and then and the second one

139
00:08:49,690 --> 00:08:52,830
and the third one and the fourth one then the fifth one.

140
00:08:53,620 --> 00:09:00,010
But I want them to be five letter words not you know these are being matched because those five word

141
00:09:00,010 --> 00:09:00,930
characters in a row.

142
00:09:00,940 --> 00:09:03,190
But it's part of a giant string.

143
00:09:03,730 --> 00:09:06,860
So instead we could bookend it on either side.

144
00:09:06,880 --> 00:09:10,350
We could do a space like that.

145
00:09:10,660 --> 00:09:17,290
But the problem there let's see if I add a space here this is five letters but it's not being highlighted

146
00:09:17,470 --> 00:09:19,710
because there is not a space afterwards.

147
00:09:20,080 --> 00:09:26,210
So instead of using spaces get rid of that I'm going to use whitespace characters.

148
00:09:26,230 --> 00:09:31,570
Now you can see we're successfully getting the words that are five letters long not substrings of bigger

149
00:09:31,570 --> 00:09:36,790
words and includes things that end on a line that are the end of the line.

150
00:09:36,790 --> 00:09:40,200
Notice it does you know we're selecting the spaces.

151
00:09:40,240 --> 00:09:45,100
And if we were trying to just extract the words we'd have to do some some extra logic and we'll learn

152
00:09:45,100 --> 00:09:46,710
how to do that later in this section.

153
00:09:46,840 --> 00:09:48,850
But for now we are matching that pattern.

154
00:09:48,880 --> 00:09:52,930
Then finally the dot I told you it has a special meaning.

155
00:09:52,930 --> 00:09:55,060
It means any character except a line break.

156
00:09:55,060 --> 00:09:56,680
We saw that earlier in the video.

157
00:09:56,830 --> 00:10:00,300
So it's sort of like a wild card anything except a new line.

158
00:10:00,520 --> 00:10:00,860
OK.

159
00:10:00,880 --> 00:10:04,660
So that's the first batch of regular expression characters are going to look at.

160
00:10:04,690 --> 00:10:09,280
We have a couple more in the next video and one more video after that then we're going to move to Python

161
00:10:09,350 --> 00:10:09,560
and.
