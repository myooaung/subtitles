1
00:00:00,330 --> 00:00:05,330
Next up we get to implement deck and deck is a bit more complex.

2
00:00:05,490 --> 00:00:07,660
So I'm going to just delete that for now.

3
00:00:07,680 --> 00:00:15,230
Copy and paste all of our requirements and then everything that we write will go below the requirements.

4
00:00:15,270 --> 00:00:16,780
We could make a separate file.

5
00:00:17,040 --> 00:00:18,380
Totally works as well.

6
00:00:18,390 --> 00:00:22,470
But I'm going to do it just in the same file to make it easier for the video and for you to see the

7
00:00:22,470 --> 00:00:23,200
solution.

8
00:00:23,370 --> 00:00:26,910
So let's begin we define our deck class

9
00:00:29,520 --> 00:00:35,020
and we need to have our init method take self no matter what.

10
00:00:35,370 --> 00:00:40,710
But we're actually not going to pass anything in because at least the way that this exercise is written

11
00:00:40,860 --> 00:00:42,840
every deck is the same.

12
00:00:42,840 --> 00:00:45,310
There are definitely ways that you could expand on this.

13
00:00:45,370 --> 00:00:47,180
You know I think I mentioned this earlier.

14
00:00:47,220 --> 00:00:49,730
There are games like in Las Vegas.

15
00:00:49,740 --> 00:00:54,870
I think they play with at least two decks sometimes four decks depending on the game they put them all

16
00:00:54,870 --> 00:01:02,460
together and shuffle them together so you could allow this you know to have like number or quantity

17
00:01:02,460 --> 00:01:03,230
or something.

18
00:01:03,390 --> 00:01:05,500
But we're not going to get into that just self.

19
00:01:05,550 --> 00:01:11,490
But what we do need to worry about is instead of that we're going to create a card attribute with all

20
00:01:11,490 --> 00:01:14,940
52 possible instances of card.

21
00:01:15,280 --> 00:01:20,080
OK so we know that self-talk cards is going to be.

22
00:01:20,600 --> 00:01:28,270
But what we want is every possible combination basically between what do we have for the suits.

23
00:01:28,270 --> 00:01:32,170
So that means hearts diamonds

24
00:01:34,910 --> 00:01:37,020
clubs and spades.

25
00:01:37,460 --> 00:01:43,610
And I'll start by just making that into a list and just call that suits I'll fast forward to the next

26
00:01:43,610 --> 00:01:44,060
part.

27
00:01:44,150 --> 00:01:46,220
I wanted to find the values.

28
00:01:46,670 --> 00:01:47,000
OK.

29
00:01:47,030 --> 00:01:48,640
I added the values list.

30
00:01:48,650 --> 00:01:55,750
Now all strings just to be consistent because we have a for Ace K for King.

31
00:01:55,850 --> 00:02:00,650
You could do this but then it would be kind of confusing dealing with it and strings.

32
00:02:00,770 --> 00:02:02,000
So everything is a string.

33
00:02:02,100 --> 00:02:03,370
It's up to King.

34
00:02:03,470 --> 00:02:06,030
And I guess Ace is low in my example.

35
00:02:06,410 --> 00:02:07,070
OK.

36
00:02:07,460 --> 00:02:13,910
So as far as taking these two things and making a new instance of card basically want to do this right

37
00:02:14,150 --> 00:02:18,270
card of ACE Khama hearts.

38
00:02:19,090 --> 00:02:22,380
And then the same thing except ace diamond ace clubs a spade.

39
00:02:22,400 --> 00:02:24,520
And then go to two of hearts two of diamonds.

40
00:02:24,680 --> 00:02:28,520
And we want to take each thing and add it in two cards.

41
00:02:28,640 --> 00:02:33,020
Maybe the first way that might come to mind is to use a nested loop.

42
00:02:33,020 --> 00:02:41,610
So for something like four suit in suits and then we want to double loop for value in values.

43
00:02:42,450 --> 00:02:44,060
We're going to call card.

44
00:02:44,390 --> 00:02:50,660
And then what do we want to pass in passing the value first and then the suit just like that.

45
00:02:50,840 --> 00:02:56,060
And we could just start by doing a print card to see if it all works and to run this I need to do a

46
00:02:56,060 --> 00:02:57,140
deck.

47
00:02:57,500 --> 00:03:00,530
We don't even need to save it to a variable just initializing any deck.

48
00:03:00,590 --> 00:03:02,270
Well run this code and it should print.

49
00:03:02,560 --> 00:03:04,010
I have my parentheses.

50
00:03:04,060 --> 00:03:05,840
So you don't get an error.

51
00:03:05,900 --> 00:03:09,010
Let's see what happens.

52
00:03:09,010 --> 00:03:09,700
All right.

53
00:03:09,700 --> 00:03:15,520
So you can see it goes through it starts with hearts and does Ace through King of Hearts and then it

54
00:03:15,520 --> 00:03:19,420
goes to diamonds and then clubs and then spades.

55
00:03:19,420 --> 00:03:21,030
So here we're just printing them.

56
00:03:21,040 --> 00:03:28,270
So what we could do is take self-direct cards and then instead of printing we could do a append self-direct

57
00:03:28,270 --> 00:03:29,310
cards.

58
00:03:29,410 --> 00:03:33,850
A pen like this and this is perfectly valid.

59
00:03:33,850 --> 00:03:36,010
If this is your solution that's great.

60
00:03:36,010 --> 00:03:37,060
It works.

61
00:03:37,060 --> 00:03:41,310
And at the end you know we can just print cards self-direct cards

62
00:03:44,100 --> 00:03:50,700
and we get this list and the reason we're seeing you know a of hearts two hearts three of hearts instead

63
00:03:50,700 --> 00:03:58,500
of those card objects is because when we printed it full of card objects each card is printed out according

64
00:03:58,500 --> 00:04:02,190
to whatever we defined here in the repr method.

65
00:04:02,690 --> 00:04:02,930
OK.

66
00:04:02,940 --> 00:04:10,800
So this is totally valid solution but we can also do it in a more pythonic way using a list comprehension.

67
00:04:11,100 --> 00:04:12,200
And it looks like this.

68
00:04:12,210 --> 00:04:22,440
So we're going to create a card with value in suit and we'll just do for suit in suits for value in

69
00:04:22,440 --> 00:04:23,160
values.

70
00:04:23,190 --> 00:04:28,000
And you could swap these and do for value in values for suit and suits.

71
00:04:28,110 --> 00:04:33,270
But this is basically doing the exact same thing but in a list comprehension we don't have to append

72
00:04:33,270 --> 00:04:36,330
manually like we're doing down here.

73
00:04:36,330 --> 00:04:37,970
So I'd prefer that way.

74
00:04:38,370 --> 00:04:42,280
And let's just make sure I didn't mess it up let's print self-talk cards again.

75
00:04:42,810 --> 00:04:43,750
Looks good.

76
00:04:44,010 --> 00:04:44,600
OK.

77
00:04:44,910 --> 00:04:49,410
So we've checked off this first syllable a point next.

78
00:04:49,410 --> 00:04:54,310
Nice and easy deck should have an instance method called count which returns a count of how many cards

79
00:04:54,310 --> 00:04:56,090
for main deck.

80
00:04:56,100 --> 00:04:56,690
All right.

81
00:04:56,760 --> 00:04:58,990
So it's an instance method.

82
00:04:59,130 --> 00:05:08,220
So down here we'll just do a def count and we need self in there and all we want to return is what the

83
00:05:08,220 --> 00:05:12,950
self-direct card list we want to know the length of that list.

84
00:05:13,230 --> 00:05:20,720
So it's just Lenn self-doubt cards and that should be it.

85
00:05:21,450 --> 00:05:31,400
So let's now save D2 a variable and just do print the dot count and we should see 52 and we do make

86
00:05:31,400 --> 00:05:37,610
sure it works do the cards pop and run it again and we should see 51.

87
00:05:37,610 --> 00:05:38,510
Perfect.

88
00:05:38,540 --> 00:05:39,180
OK.

89
00:05:39,770 --> 00:05:43,870
So we're done with those first two next decks.

90
00:05:43,970 --> 00:05:49,040
Method should display information on how many cards are in the deck like a deck of 52 cards deck of

91
00:05:49,040 --> 00:05:50,970
12 cards etc..

92
00:05:51,920 --> 00:05:54,770
So we'll do def EPR.

93
00:05:54,830 --> 00:05:59,110
I like to do these up top all the Dunner methods together.

94
00:05:59,470 --> 00:06:07,610
And that also needs self and all we will return again a few using here using the Tommy test that I wrote

95
00:06:07,970 --> 00:06:09,840
then you want to use that format.

96
00:06:09,850 --> 00:06:11,620
It must be upgraded to 3.6.

97
00:06:11,620 --> 00:06:13,430
I will post an announcement about that.

98
00:06:13,760 --> 00:06:19,370
But if they haven't used that format that I'm going to use and F string and all that we'll do is we

99
00:06:19,370 --> 00:06:25,730
could use Lenn of self-love cards but we've already written that here as count.

100
00:06:25,730 --> 00:06:28,140
So I'll just write a deck of.

101
00:06:28,430 --> 00:06:34,130
And then and here we just call self dot count cards.

102
00:06:35,140 --> 00:06:36,490
Perfect.

103
00:06:36,500 --> 00:06:43,660
So now if we make a deck we can just print the deck and we should get a deck of 52 cards assuming I

104
00:06:43,660 --> 00:06:45,040
didn't mess anything up.

105
00:06:45,180 --> 00:06:46,190
And it looks good.

106
00:06:46,190 --> 00:06:47,890
A deck of 52 cards.

107
00:06:48,220 --> 00:06:48,810
OK.

108
00:06:48,970 --> 00:06:53,110
And we can trust because Count was working when we popped one off.

109
00:06:53,200 --> 00:06:55,090
We can trust that it still works just fine.

110
00:06:55,090 --> 00:06:56,950
Nothing is changing count.

111
00:06:56,950 --> 00:06:57,300
All right.

112
00:06:57,310 --> 00:06:59,850
So that's three down.

113
00:06:59,920 --> 00:07:06,400
Next deck should have an instance method called Deal underscored deal which accepts a number and removes

114
00:07:06,400 --> 00:07:08,490
at most that many cards in the deck.

115
00:07:08,710 --> 00:07:12,250
It may need to remove fewer if your request more cards and are currently in the deck.

116
00:07:12,310 --> 00:07:15,290
If there are no cards left this method should return a value error.

117
00:07:15,340 --> 00:07:15,670
OK.

118
00:07:15,700 --> 00:07:17,730
There's a lot of pieces to that.

119
00:07:17,740 --> 00:07:26,410
Let's start by just defining and def deal self and then the number of cards that we want to remove from

120
00:07:26,470 --> 00:07:28,420
self dumb cards.

121
00:07:28,450 --> 00:07:33,730
So the idea is if we call and this is going to be an internal method that we only use We're going to

122
00:07:33,730 --> 00:07:40,780
create deal hand or deal card and deal hand in just a moment that will then call underscore to you and

123
00:07:40,780 --> 00:07:45,750
the first thing we'll start with is just checking how many cards are in the deck.

124
00:07:46,090 --> 00:07:50,930
So let's just make a variable called count because self-deceit count.

125
00:07:51,250 --> 00:07:58,390
And then what we want to do is test this against the number that that's been passed in let's say for

126
00:07:58,390 --> 00:08:03,070
some reason someone wants to remove 53 cards but there's only 52.

127
00:08:03,070 --> 00:08:08,200
So what we want to do is compare the number that's been passed in with the count how many cards are

128
00:08:08,200 --> 00:08:08,880
left.

129
00:08:09,070 --> 00:08:12,960
And basically whichever one is lower we will use.

130
00:08:12,970 --> 00:08:18,880
So if a more realistic example let's say that there's only I don't know I'm going to just represent

131
00:08:18,880 --> 00:08:25,410
each card as a See say there's three cards left and the user wants to remove five cards.

132
00:08:25,780 --> 00:08:27,990
Well we're going to only remove three.

133
00:08:28,540 --> 00:08:30,040
So we'll take the least of them.

134
00:08:30,250 --> 00:08:39,430
So what we can do is use a little builtin function min and we want to find the minimum of count and

135
00:08:39,490 --> 00:08:40,220
numb.

136
00:08:40,240 --> 00:08:45,780
So whichever one of those is lower We'll save it to a variable and let's just call that variable.

137
00:08:45,850 --> 00:08:52,620
I don't know what should we call that actual the actual number we're going to remove.

138
00:08:52,620 --> 00:09:03,400
And let's just add a little print here that says going to remove and then actual cards then it's an

139
00:09:03,410 --> 00:09:04,810
F string in order to work.

140
00:09:05,130 --> 00:09:05,380
OK.

141
00:09:05,380 --> 00:09:07,230
So let's test it out at the beginning.

142
00:09:07,240 --> 00:09:08,860
D is Dirk.

143
00:09:09,040 --> 00:09:10,370
There's 52 cards.

144
00:09:10,420 --> 00:09:16,360
If I try and do d dot even though we're not supposed to call underscore deagle from outside the class

145
00:09:16,420 --> 00:09:18,780
we can just for testing purposes here.

146
00:09:19,000 --> 00:09:21,850
But as developers we should respect that.

147
00:09:21,970 --> 00:09:28,900
Underscore deal and then let's try to get rid of fifty four cards.

148
00:09:29,110 --> 00:09:29,490
OK.

149
00:09:29,590 --> 00:09:34,180
Let's see what happens and we get going to remove 52 cards.

150
00:09:34,390 --> 00:09:40,460
But if I was going to remove five it tells us we're going to remove five cards.

151
00:09:40,460 --> 00:09:42,600
So it's just taking whatevers less.

152
00:09:42,970 --> 00:09:43,260
OK.

153
00:09:43,280 --> 00:09:44,280
So that works.

154
00:09:44,300 --> 00:09:51,320
There is a problem though which is if the count of the cards left is zero and somehow this got called

155
00:09:51,320 --> 00:09:56,630
with number being 0 they're trying to remove something from an empty deck.

156
00:09:56,640 --> 00:09:58,310
Let's handle that case.

157
00:09:58,310 --> 00:10:03,130
So that will just be simple if Count equals zero if there's zero cards left.

158
00:10:03,410 --> 00:10:05,880
And we could actually even just do that at the very beginning.

159
00:10:06,020 --> 00:10:08,640
If there's zero cards left what do you want to do.

160
00:10:08,990 --> 00:10:11,810
Let's raise an error.

161
00:10:12,410 --> 00:10:15,210
And I think the specification is here.

162
00:10:15,240 --> 00:10:18,580
See all the way over here we go.

163
00:10:18,590 --> 00:10:20,060
Value error with the message.

164
00:10:20,060 --> 00:10:21,730
All cards have been dealt

165
00:10:27,690 --> 00:10:29,460
to any value error.

166
00:10:29,870 --> 00:10:31,950
All cards have been dealt.

167
00:10:31,970 --> 00:10:32,550
Perfect.

168
00:10:33,970 --> 00:10:41,420
OK so next we're going to take our list of cards which is self-direct cards and let's say numbers five.

169
00:10:41,620 --> 00:10:44,680
We want to take the last five cards and return those as a list.

170
00:10:44,860 --> 00:10:50,410
But we also need to make sure we're removing them from self-edit cards because the dealer card it needs

171
00:10:50,410 --> 00:10:51,970
to come out of the deck.

172
00:10:52,180 --> 00:10:57,250
We're not just taking the five values and keeping them in there and will always get the same five cards.

173
00:10:57,310 --> 00:10:59,470
We want to remove them from the deck.

174
00:10:59,620 --> 00:11:02,670
And what we can do is actually use a slice.

175
00:11:02,680 --> 00:11:09,070
So if you don't remember the slice syntax what we're going to do here is go from negative actual to

176
00:11:09,070 --> 00:11:09,770
the end.

177
00:11:09,790 --> 00:11:13,120
So actual is going to beat the number of cards for removing.

178
00:11:13,120 --> 00:11:15,700
So let's say we have a list that looks like this.

179
00:11:16,030 --> 00:11:19,330
And actual is going to be three cards.

180
00:11:19,330 --> 00:11:25,360
So we're going to go 0 or back three so this going to be back one back to back three and then take that

181
00:11:25,360 --> 00:11:26,680
slice all the way to the end.

182
00:11:26,680 --> 00:11:28,190
That's what this call signifies.

183
00:11:28,390 --> 00:11:32,200
So then that's going to give us this slice and we'll save that to a variable.

184
00:11:32,230 --> 00:11:38,060
Let's just call it hand equal self-direct cards or actually just go with cards.

185
00:11:38,620 --> 00:11:40,580
Notice it's different than self-dual cards.

186
00:11:40,720 --> 00:11:42,190
It's cards.

187
00:11:42,190 --> 00:11:48,430
And then what we want to do is actually update self-direct cards so that it now goes from the beginning

188
00:11:48,430 --> 00:11:52,720
of the list up until what we just took off even though we didn't take it off.

189
00:11:52,720 --> 00:12:00,430
But what we want to remove is at the end so to do that we're going to do self-direct cards equals self-direct

190
00:12:00,430 --> 00:12:02,410
cards another slice.

191
00:12:02,410 --> 00:12:03,620
We go from the beginning.

192
00:12:03,700 --> 00:12:07,270
That's colon to negative actual.

193
00:12:07,900 --> 00:12:13,180
So now we're going to go from the beginning up to say actual This three to one negative to negative

194
00:12:13,180 --> 00:12:13,760
three.

195
00:12:13,780 --> 00:12:17,450
We go from there to there and that's what self-direct cards is.

196
00:12:17,620 --> 00:12:24,050
And the last step is going to be return cards which is what we took off.

197
00:12:24,240 --> 00:12:24,880
OK.

198
00:12:24,940 --> 00:12:26,710
So one thing I did notice here.

199
00:12:26,890 --> 00:12:29,970
I need those parents after my value error.

200
00:12:30,370 --> 00:12:33,190
Let's test this all out by making your deck.

201
00:12:33,490 --> 00:12:35,220
And then we'll deal.

202
00:12:35,260 --> 00:12:38,410
Let's start by doing three and that's printed.

203
00:12:38,470 --> 00:12:40,090
So we can see what we get back.

204
00:12:40,280 --> 00:12:44,890
And then to verify it's working let's do print the dot count.

205
00:12:45,570 --> 00:12:47,580
OK.

206
00:12:47,980 --> 00:12:48,340
All right.

207
00:12:48,340 --> 00:12:55,080
So we have the three cards that we're dealt returned here and then the count is now 49 instead of 52.

208
00:12:55,120 --> 00:13:01,270
Of course we are getting J Q And K jack queen and king of spades because they are the LAST things.

209
00:13:01,270 --> 00:13:02,950
There is no shuffling just yet.

210
00:13:03,100 --> 00:13:04,420
So we always get the same thing.

211
00:13:04,660 --> 00:13:06,720
And let's just check one more thing.

212
00:13:06,910 --> 00:13:07,750
Let's now.

213
00:13:07,810 --> 00:13:09,510
Well first let's get rid of this print.

214
00:13:09,520 --> 00:13:12,180
We don't need to print those cards in a net anymore.

215
00:13:12,370 --> 00:13:16,230
But now let's try afterwards if we deal all the cards.

216
00:13:16,360 --> 00:13:17,610
So they'll be 52.

217
00:13:17,920 --> 00:13:20,460
And then I try and deal I don't know three again.

218
00:13:20,470 --> 00:13:25,930
Afterwards it goes from here is all 52 count is 0.

219
00:13:25,930 --> 00:13:27,690
Now we get this value error.

220
00:13:27,700 --> 00:13:29,280
All cards have been dealt.

221
00:13:29,290 --> 00:13:30,280
Perfect.

222
00:13:30,850 --> 00:13:32,170
OK.

223
00:13:32,200 --> 00:13:36,960
Moving on along we have shuffle the whole card and deal hand.

224
00:13:37,090 --> 00:13:41,480
Let's go with Deal card and deal hand first because they're very similar down here.

225
00:13:41,530 --> 00:13:45,170
Define deal hand first deaf deal.

226
00:13:45,230 --> 00:13:46,850
Hand or those two card.

227
00:13:46,850 --> 00:13:50,960
I lied and this always just deals one card.

228
00:13:51,220 --> 00:13:53,640
So it doesn't need any parameters there.

229
00:13:53,770 --> 00:14:01,030
And all we return is the result of calling itself underscore deal and then passing in one.

230
00:14:01,450 --> 00:14:07,730
But the thing about where is that deal card it should return a single card.

231
00:14:07,750 --> 00:14:08,960
So not a list.

232
00:14:09,030 --> 00:14:15,320
And right now if we called Deal under square deal with one it gives us a list with one card in it.

233
00:14:15,340 --> 00:14:17,380
So we want to return the zero with element.

234
00:14:17,380 --> 00:14:22,870
This would give us a card rather than a list with a single card.

235
00:14:22,870 --> 00:14:24,820
And then we'll do the same thing.

236
00:14:24,820 --> 00:14:26,540
Def deal.

237
00:14:26,680 --> 00:14:29,830
Hand deal hand side from self.

238
00:14:29,830 --> 00:14:31,320
Also takes a number.

239
00:14:31,550 --> 00:14:32,520
So we'll just call it no.

240
00:14:32,740 --> 00:14:39,010
And it's just going to return self that underscore deal and then we pass in no.

241
00:14:39,490 --> 00:14:45,000
And rather than let's go with hand size I think that's more appropriate for what we're actually dealing

242
00:14:45,000 --> 00:14:45,840
with.

243
00:14:46,120 --> 00:14:49,770
And we want the list because this is a hand of cards.

244
00:14:49,840 --> 00:14:53,750
We want all five cards in a list or three cards or whatever it is.

245
00:14:53,770 --> 00:14:54,250
All right.

246
00:14:54,310 --> 00:15:00,060
And lastly we need to deal with Shuffle shuffle shuffle a full deck of cards.

247
00:15:00,100 --> 00:15:06,610
If there are cards missing the method should return a value error with the message only full decks of

248
00:15:06,610 --> 00:15:09,990
cards which are only full decks can be shuffled.

249
00:15:10,180 --> 00:15:17,950
So to actually do the shuffling I'm going to import random and actually I'm going to do from random

250
00:15:18,190 --> 00:15:19,580
import shuffle.

251
00:15:19,630 --> 00:15:21,620
That's the only method I need.

252
00:15:21,730 --> 00:15:27,200
So import that shuffle method and then I'll define my own shuffle down here.

253
00:15:27,370 --> 00:15:31,640
Def shuffle self OK.

254
00:15:31,840 --> 00:15:39,040
And all we want to do is call shuffle which is not this shuffle it's this one from random and passen

255
00:15:39,070 --> 00:15:40,830
self cards.

256
00:15:41,140 --> 00:15:50,800
But remember we want to add our conditional check to see if let's do if self-taught count is less than

257
00:15:50,800 --> 00:15:51,500
52.

258
00:15:51,520 --> 00:15:56,800
So if it's not a full deck we're going to raise a value error.

259
00:15:56,920 --> 00:15:58,390
And I think I already copied it.

260
00:15:58,390 --> 00:15:59,120
There we go.

261
00:15:59,200 --> 00:16:01,280
Only full decks can be shuffled.

262
00:16:01,450 --> 00:16:07,180
I didn't specify this but it is good practice to return self here even though we don't have to.

263
00:16:07,600 --> 00:16:15,770
So I can just prove to you it works so let's do deck Deedat shuffle and then let's do print D-don't

264
00:16:15,970 --> 00:16:25,710
cards and if we look everything is shuffled before it was all the hearts upfront all the spades and

265
00:16:25,770 --> 00:16:27,540
now everything is mixed up.

266
00:16:27,540 --> 00:16:29,230
We don't have to return self.

267
00:16:29,230 --> 00:16:30,620
It won't actually make a difference.

268
00:16:31,110 --> 00:16:36,140
But if for some reason we wanted to save it to a variable we're now capturing self.

269
00:16:36,210 --> 00:16:38,130
It's just a conventional thing to do.

270
00:16:38,500 --> 00:16:39,240
OK.

271
00:16:39,480 --> 00:16:41,400
So that's a lot of work here.

272
00:16:41,520 --> 00:16:45,140
A lot of code let's just test things out so we can make a new deck.

273
00:16:45,140 --> 00:16:46,530
I'm going to shuffle it.

274
00:16:46,530 --> 00:16:49,010
I'm going to make a hand.

275
00:16:49,260 --> 00:16:50,120
I'll call it.

276
00:16:50,320 --> 00:16:55,140
I'll call it hand a variable and I'll make it equal to d dot deal.

277
00:16:55,140 --> 00:16:59,010
Card let's print hand.

278
00:16:59,070 --> 00:17:07,570
Well I've called that one card print card and then let's do hand equals deal.

279
00:17:07,830 --> 00:17:12,370
Hand of five cards and let's print hand.

280
00:17:12,810 --> 00:17:13,370
OK.

281
00:17:13,580 --> 00:17:19,150
Test it out and it looks like at an executer method here on deal card.

282
00:17:19,150 --> 00:17:20,190
There we go.

283
00:17:20,220 --> 00:17:22,960
So just telling me oh yeah I know that method.

284
00:17:23,040 --> 00:17:23,960
Try that again.

285
00:17:24,210 --> 00:17:24,510
OK.

286
00:17:24,520 --> 00:17:28,190
So if we get a single card five of clubs then we get three of clubs.

287
00:17:28,190 --> 00:17:35,490
Now if clubs Jack Diamond six of spades and ace of diamonds all in a list when we call the hand this

288
00:17:35,490 --> 00:17:38,400
time let's do a hand of 50.

289
00:17:38,460 --> 00:17:39,860
So this should give us one.

290
00:17:40,070 --> 00:17:50,010
I'll take one card away and then we'll do 50 and then let's do one more afterwards and we'll print that

291
00:17:50,760 --> 00:17:51,710
card too.

292
00:17:52,350 --> 00:17:57,850
And then well let's just see what it looks like at the end to a print deck of cards at the very end.

293
00:17:57,870 --> 00:18:01,750
I mean the dark cards not deck.

294
00:18:01,770 --> 00:18:09,310
And we get first card second card and then the fifth here that I'm printing and then an empty burst.

295
00:18:09,350 --> 00:18:15,660
And so if we tried to deal one more card we should get an error because deal card will try and call

296
00:18:15,690 --> 00:18:19,010
deal and deals and I checked if there's zero cards left.

297
00:18:19,050 --> 00:18:22,580
And if that's the case give us an hour and it does.

298
00:18:22,920 --> 00:18:29,880
All right so your implementation might look a bit different which is totally fine depending on how you

299
00:18:29,880 --> 00:18:35,280
want to structure things you know Order of the methods doesn't really matter other than the fact that

300
00:18:35,280 --> 00:18:41,620
I like to put these Dondre methods up top and net referer all that stuff.

301
00:18:41,730 --> 00:18:43,950
And yeah hopefully you're still alive.

302
00:18:43,950 --> 00:18:45,460
It was a long video by now.

303
00:18:45,480 --> 00:18:50,100
Hopefully some of this object oriented stuff makes a bit more sense by how we organize functionality

304
00:18:50,340 --> 00:18:57,150
and pieces of information data into these classes and then instantiate objects using those classes.

305
00:18:57,150 --> 00:19:03,030
If not we have plenty more practice and in the next section we're going to continue with O.P. and talk

306
00:19:03,030 --> 00:19:09,660
about some of the trickier parts some more nuance things including inheritance and fun word called polymorphism

307
00:19:09,750 --> 00:19:12,050
which sounds scarier than it actually is.

308
00:19:12,210 --> 00:19:12,750
See you.
