WEBVTT
1
00:00:00.250 --> 00:00:05.000
OK now on to the promised kind of crazy part here I have three lists.

2
00:00:05.040 --> 00:00:08.370
These could easily be tuples Instead they probably should.

3
00:00:08.370 --> 00:00:12.660
Just because I'm not using them for anything they're just lists of information.

4
00:00:12.660 --> 00:00:15.470
Pretend I'm a teacher and I mean I guess I am a teacher.

5
00:00:15.480 --> 00:00:21.510
But pretend I'm a teacher who has three students and I don't know how it works around the world but

6
00:00:21.870 --> 00:00:27.930
the schools that I went to we often would have you know a final test at the very end of a semester and

7
00:00:27.930 --> 00:00:29.860
then a midterm that was halfway through.

8
00:00:29.970 --> 00:00:35.070
And sometimes the way that it would work in some of my college courses is that my entire score was just

9
00:00:35.070 --> 00:00:36.790
the average of those two tests.

10
00:00:36.810 --> 00:00:38.500
So there were no other assignments.

11
00:00:38.550 --> 00:00:39.180
Nothing else.

12
00:00:39.180 --> 00:00:41.570
It came down to those two things and that was it.

13
00:00:41.610 --> 00:00:47.970
Or another scenario would be I had a couple of teachers who would only take one of your tests whichever

14
00:00:47.970 --> 00:00:50.130
one was higher the midterm or the final.

15
00:00:50.370 --> 00:00:55.110
And then usually it wouldn't just be that score they would use something else like your homework or

16
00:00:55.110 --> 00:00:56.150
your quizzes.

17
00:00:56.340 --> 00:00:59.300
But they would they would throw out the lowest score essentially.

18
00:00:59.370 --> 00:01:01.960
So let's say I wanted to do some of those things.

19
00:01:02.280 --> 00:01:05.780
Let's start off you know we could just zip midterms and finals.

20
00:01:05.790 --> 00:01:08.190
I should mention that our data is aligned.

21
00:01:08.250 --> 00:01:11.880
So Dan got it 98 on the final and 80 on the midterm.

22
00:01:11.880 --> 00:01:14.410
Kate got to 53 and a 78.

23
00:01:14.540 --> 00:01:19.350
OK so let's say I wanted to find I wanted to make a structure that looks like this.

24
00:01:19.350 --> 00:01:23.620
I want a dictionary and it's going to say something like.

25
00:01:23.710 --> 00:01:34.930
Dan and his highest score should be 98 and then on his high score is what 91 and then Kate.

26
00:01:35.190 --> 00:01:38.130
Sorry Kate her highest score is 78.

27
00:01:38.310 --> 00:01:43.500
So I want this you know I want it to be done dynamically because I might have 100 students.

28
00:01:43.500 --> 00:01:46.270
How can I you know throw out the lowest score.

29
00:01:46.290 --> 00:01:51.440
This is what I want and I'll just call it you know final grades or something like that.

30
00:01:52.260 --> 00:01:53.970
So we can use zip.

31
00:01:54.330 --> 00:01:57.050
And there's a couple of ways to go about it.

32
00:01:57.060 --> 00:02:02.910
We could use a list comprehension or actually dictionary comprehension or we could use math and I'll

33
00:02:02.910 --> 00:02:08.170
start by showing a dictionary comprehension so we could begin by just finding the max of these two.

34
00:02:08.340 --> 00:02:13.140
So we're going to use max and let's actually just start with a list not a dictionary comprehension.

35
00:02:13.230 --> 00:02:25.570
And we're going to do a zip with midterms and then finals and we'll do four pair in zip midterms finals.

36
00:02:25.570 --> 00:02:27.640
I spell midterms correct.

37
00:02:27.660 --> 00:02:35.550
We could just start by just writing pair and this would be the same as just doing a list of Zipp midterms

38
00:02:35.550 --> 00:02:36.090
finals.

39
00:02:36.090 --> 00:02:37.150
Let's test it.

40
00:02:37.200 --> 00:02:39.110
I thought oh we're not printing our way.

41
00:02:39.480 --> 00:02:42.740
Let's do save this to a variable called final grades.

42
00:02:44.340 --> 00:02:50.790
And then print final grades like this and we'll execute the file.

43
00:02:51.070 --> 00:02:54.670
So now we're just getting the pairs the tuples of the two scores.

44
00:02:54.670 --> 00:02:55.590
They go together.

45
00:02:55.810 --> 00:02:57.470
Now let's find the max.

46
00:02:57.730 --> 00:03:03.930
And that's not too hard because we just saw we have Max from a couple of videos back.

47
00:03:04.090 --> 00:03:06.090
We could add conditional logic to do it.

48
00:03:06.100 --> 00:03:14.080
It would be a lot longer but we would do something like if Peyre zero greater than pairt 1 and so on.

49
00:03:14.260 --> 00:03:15.450
But we'll use Max.

50
00:03:15.610 --> 00:03:20.680
And this should now just give us the maximum score and there we go.

51
00:03:20.710 --> 00:03:22.570
So we get 98 is the max.

52
00:03:22.810 --> 00:03:26.030
Here we have 91 is the max and then 78 is the max.

53
00:03:26.050 --> 00:03:29.950
So now we move on because we don't want just a list of the max scores.

54
00:03:30.130 --> 00:03:32.890
I want a dictionary like this with the names.

55
00:03:33.280 --> 00:03:37.100
So we have a bunch of options actually we could use a nested comprehension.

56
00:03:37.210 --> 00:03:42.550
What I'm going to do instead I'll copy this line commented out and I'm going to start by just adding

57
00:03:42.550 --> 00:03:44.820
in students as well.

58
00:03:45.860 --> 00:03:52.200
Now this is going to be a problem when I try and do max on students midterms and finals because one

59
00:03:52.200 --> 00:03:53.480
of them is a string.

60
00:03:54.000 --> 00:03:55.880
So I'm going to change this around.

61
00:03:55.930 --> 00:03:58.720
We're no longer do max of pair.

62
00:03:58.950 --> 00:04:08.040
We're going to do max of pair one common pair two so that he can be the max of the midterm in the finals

63
00:04:08.760 --> 00:04:13.870
and I'm going to change this from a list comprehension to a dictionary comprehension.

64
00:04:14.370 --> 00:04:15.440
It's getting crazy.

65
00:04:15.480 --> 00:04:17.350
And what do I want the key to be.

66
00:04:17.400 --> 00:04:22.560
I want it to be in pairs actually not even a good word for this anymore because it's not a pair.

67
00:04:23.200 --> 00:04:23.710
But I'm going to do.

68
00:04:23.710 --> 00:04:25.220
There's zero colon.

69
00:04:25.440 --> 00:04:32.330
So rather than pair maybe I'll just call them all t because they're all a tuple like that.

70
00:04:33.520 --> 00:04:35.700
And this needs to be T as well.

71
00:04:35.920 --> 00:04:37.210
So hopefully you can see what we're doing.

72
00:04:37.210 --> 00:04:38.590
We're zipping them all together.

73
00:04:38.740 --> 00:04:44.860
Three things and so each tuple is going to look like Dan and then what was the next one.

74
00:04:44.890 --> 00:04:45.870
Midterms.

75
00:04:45.880 --> 00:04:53.590
So then 80 comma 98 and then we're making a dictionary with each one of these where we're taking the

76
00:04:53.590 --> 00:04:54.550
tuple zero.

77
00:04:54.580 --> 00:05:00.770
That's Dan colon the max of the other two elements which would be 98.

78
00:05:01.420 --> 00:05:03.400
OK let's see if it works.

79
00:05:03.760 --> 00:05:04.370
And there we go.

80
00:05:04.390 --> 00:05:08.200
We're getting Dan 98 on 91 78.

81
00:05:08.800 --> 00:05:12.580
So that's using zip with the dictionary comprehension.

82
00:05:12.580 --> 00:05:17.220
Now I also want to show you how to do this with a lambda and using map.

83
00:05:17.320 --> 00:05:24.040
And there's a lot of ways of doing this but the way that I'll do it I'll start by zipping the two scores

84
00:05:24.040 --> 00:05:30.710
together so midterms come finals just like that and then I'm going to use math.

85
00:05:30.820 --> 00:05:35.850
We need to tell it the collection to map and then how we want it to be mapped.

86
00:05:36.130 --> 00:05:38.770
And so the new list we wanted to generate.

87
00:05:38.770 --> 00:05:43.210
The way I want it to be mapped is based off of max of these two things.

88
00:05:43.210 --> 00:05:48.790
So in this case I'm just going to pick the the largest using and I have to do a lambda and we'll call

89
00:05:48.790 --> 00:05:50.010
it pair.

90
00:05:50.590 --> 00:05:55.380
And we just want the max I can type pair.

91
00:05:56.200 --> 00:05:56.810
OK.

92
00:05:57.190 --> 00:05:59.280
And remember what Maff returns to us.

93
00:05:59.560 --> 00:06:04.700
So I'm going to save it to a variable for now just call it data such about name.

94
00:06:04.720 --> 00:06:12.760
Let's go with scores and then let's print the list scores like that OK.

95
00:06:12.840 --> 00:06:14.020
And I need a comma here.

96
00:06:14.130 --> 00:06:15.800
Let's see if it works.

97
00:06:16.740 --> 00:06:21.230
OK so now what we have is a list of the the highest score.

98
00:06:21.240 --> 00:06:23.290
It's already been picked out.

99
00:06:23.460 --> 00:06:25.770
So hopefully you can see how this is working.

100
00:06:25.800 --> 00:06:33.000
First recalling map but what are repassing into map passing in that collection of tuples that looks

101
00:06:33.000 --> 00:06:34.730
like this.

102
00:06:34.740 --> 00:06:36.940
Well we have 98 Khama.

103
00:06:37.500 --> 00:06:40.370
And what was it 80 as one pair.

104
00:06:40.480 --> 00:06:43.160
And for each pair We're only returning the max.

105
00:06:43.170 --> 00:06:50.800
So we're only returning 98 and that's going to be added to the iterable that's returned from map and

106
00:06:50.820 --> 00:06:52.930
here I'm converting it to a list to print it out.

107
00:06:52.950 --> 00:06:58.740
We're not quite done yet because now I want to add in the students.

108
00:06:58.920 --> 00:07:00.320
So how can I do that.

109
00:07:00.720 --> 00:07:09.220
Well I could do it the same way that I was doing it here where I is also Zipp in students like this.

110
00:07:09.870 --> 00:07:13.660
And then instead of just max of pair I do max pairs euro.

111
00:07:13.800 --> 00:07:19.770
I'm a penguin but I'm going to show another way which would be to use Zipp again and this is going to

112
00:07:19.770 --> 00:07:21.300
be quite crazy.

113
00:07:21.300 --> 00:07:28.440
So I'm going to call up an indent this and I'm zipping two things together.

114
00:07:28.440 --> 00:07:32.860
I'm zipping students with this entire collection as well.

115
00:07:33.600 --> 00:07:36.160
So students it's going to be a simple thing here.

116
00:07:36.210 --> 00:07:36.980
Right.

117
00:07:37.170 --> 00:07:44.910
And map this map returns to us that collection where we just have scores like 90 whatever.

118
00:07:44.930 --> 00:07:45.960
Comma.

119
00:07:46.380 --> 00:07:50.050
I already forgot 91 comma 78.

120
00:07:50.310 --> 00:07:52.310
I think the first one is ninety eight.

121
00:07:52.410 --> 00:07:58.050
So it returns this and we're zipping it with this pretty complex looking.

122
00:07:58.230 --> 00:08:00.620
But some would argue this is more.

123
00:08:00.720 --> 00:08:03.150
I mean this is the more pythonic way of doing it.

124
00:08:03.330 --> 00:08:10.080
Although to be honest this is I think this might just benefit from doing its own function and not trying

125
00:08:10.080 --> 00:08:11.450
to do it on a single line.

126
00:08:11.640 --> 00:08:17.360
But this is definitely a more traditional way of doing things in other programming languages.

127
00:08:17.690 --> 00:08:18.120
OK.

128
00:08:18.270 --> 00:08:20.580
So finally let's save this to a variable.

129
00:08:20.670 --> 00:08:28.600
Let's just call this grades and if we just print grades remember what we get.

130
00:08:28.800 --> 00:08:31.760
What's happening now scores is not defined.

131
00:08:31.760 --> 00:08:34.300
Or is that using scores down here.

132
00:08:34.690 --> 00:08:35.390
That one more time.

133
00:08:35.550 --> 00:08:37.700
If we print it we just get the zip object.

134
00:08:37.800 --> 00:08:41.950
So we need to convert it to what I want and I want a dictionary

135
00:08:46.670 --> 00:08:50.400
now I get Dan 98 on 91 Kate 78.

136
00:08:50.700 --> 00:08:52.050
Oh so much work there.

137
00:08:52.160 --> 00:08:56.740
So if you want to be even more precise or precise it's the wrong word.

138
00:08:56.750 --> 00:09:05.840
But if we just wanted to add the dict part in there in that everything else and then do it like this.

139
00:09:05.840 --> 00:09:13.360
Final scores are final grades and then we just print final grades.

140
00:09:15.360 --> 00:09:16.340
OK.

141
00:09:16.510 --> 00:09:21.760
So this was a wee bit off a lot here but I just wanted to show something more complex because a lot

142
00:09:21.760 --> 00:09:28.480
of times with Zipp people just show fear zipping to lists of totally random silly numbers that you probably

143
00:09:28.480 --> 00:09:29.440
would never do.

144
00:09:29.470 --> 00:09:33.430
But here's something I thought was a bit more realistic and we executed.

145
00:09:33.430 --> 00:09:40.840
Now we get the same thing and we could easily tweak this or the above example as well to instead give

146
00:09:40.840 --> 00:09:42.160
us an average.

147
00:09:42.190 --> 00:09:46.910
So I'll just show that in my one second comment this example out.

148
00:09:47.950 --> 00:09:58.480
And instead of doing the max of the pair what we'll do instead is do pair 0 plus pair 1 and then we

149
00:09:58.480 --> 00:10:05.740
need to divide by 2 and we want Prendes there as well and we'll change this to have rigid grades.

150
00:10:05.760 --> 00:10:11.050
Now I can print average grades so instead of finding the max we are going to with this lambda take a

151
00:10:11.050 --> 00:10:18.360
pair a tuple and take the first thing added to the second thing divided by to see if it works.

152
00:10:18.460 --> 00:10:19.280
And there we go.

153
00:10:19.360 --> 00:10:22.920
We're getting eighty nine point ninety point sixty five point five.

154
00:10:23.420 --> 00:10:23.700
OK.

155
00:10:23.740 --> 00:10:28.890
So I'm not trying to argue that these are the best cleanest possible solutions to do these things.

156
00:10:29.080 --> 00:10:33.360
I'm just trying to show how everything we've learned in this section can all fit together.

157
00:10:33.370 --> 00:10:35.000
We have a map with a zip.

158
00:10:35.020 --> 00:10:41.750
We have a lambda up here we're using max in the lambda and zip and map all these things can go together.

159
00:10:41.870 --> 00:10:46.770
But at the same time I want to be clear that there's a lot of things in this in this section.

160
00:10:46.780 --> 00:10:50.230
A lot of different names function syntax that we've seen.

161
00:10:50.230 --> 00:10:55.090
And most of the time if you need to figure out how to do something it's just one Google away.

162
00:10:55.120 --> 00:10:59.640
It's not a matter of trying to remember every single thing from a section like this because there's

163
00:10:59.680 --> 00:11:01.670
a lot of material covered anyway.

164
00:11:01.870 --> 00:11:03.730
I will add some comments to this.

165
00:11:03.880 --> 00:11:07.710
Make it a little easier to understand everything and it will be available as a resource.
