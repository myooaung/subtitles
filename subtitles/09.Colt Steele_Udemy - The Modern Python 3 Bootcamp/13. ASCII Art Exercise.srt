1
00:00:00,240 --> 00:00:01,340
A welcome back.

2
00:00:01,440 --> 00:00:04,370
So this video is an exercise.

3
00:00:04,410 --> 00:00:05,540
It's also a code along.

4
00:00:05,540 --> 00:00:09,090
It's one of those where you can pick if you want to build it with me or if you want to try it on your

5
00:00:09,090 --> 00:00:09,500
own.

6
00:00:09,720 --> 00:00:15,050
But the idea is to kind of force you to use a package that you've never used before.

7
00:00:15,420 --> 00:00:19,050
So we're going to make a really simple ASCII art printer.

8
00:00:19,050 --> 00:00:19,830
You run it.

9
00:00:19,830 --> 00:00:21,060
Here's a screenshot.

10
00:00:21,060 --> 00:00:24,480
It asks you what message do you want to print and what color.

11
00:00:24,780 --> 00:00:30,790
And in this case I said print hello world in magenta and we get hello world printed out in magenta.

12
00:00:31,080 --> 00:00:35,250
So the first thing I should mention that you do not need to do this part manually.

13
00:00:35,250 --> 00:00:39,880
You could but it would be a huge pain to try and put this all together.

14
00:00:40,050 --> 00:00:45,120
Instead what you need to do is use a package called pi figure.

15
00:00:45,150 --> 00:00:51,590
So if you want to do this on your own research the package go just google it and read the documentation.

16
00:00:51,660 --> 00:00:57,760
Install it with Pip and then try running help and just looking at how it works or look at an example.

17
00:00:57,780 --> 00:01:03,810
All we need is a single line to print this or a single line from this package at least a single function

18
00:01:04,140 --> 00:01:05,290
as well as the import.

19
00:01:05,290 --> 00:01:10,980
So two lines technically and then to get the colors can use the same package we used in the last video

20
00:01:11,310 --> 00:01:12,100
term color.

21
00:01:12,270 --> 00:01:21,790
Let me do a quick demonstration this time I'll say I hearts Kitty and I'll print it in.

22
00:01:21,940 --> 00:01:23,920
Let's go with Suyin.

23
00:01:23,920 --> 00:01:24,600
There we go.

24
00:01:24,610 --> 00:01:31,150
The heart looks kind of messed up but let's do one more and this time I'll just print Python with three

25
00:01:31,150 --> 00:01:36,490
exclamation points and I'll do it in blue or green.

26
00:01:37,300 --> 00:01:38,330
And that's what we get.

27
00:01:38,380 --> 00:01:41,350
The last thing I'll show is that I have a default color.

28
00:01:41,500 --> 00:01:44,880
So if the user enters let's say just print jibberish that's fine.

29
00:01:45,040 --> 00:01:51,460
But if I try to enter orange or a bunch of characters My default is magenta.

30
00:01:51,460 --> 00:01:52,580
You can pick your own.

31
00:01:52,600 --> 00:01:58,730
So I'm just checking is the value not one of the permitted values which if you need to remember what

32
00:01:58,730 --> 00:01:59,350
those are.

33
00:01:59,410 --> 00:02:03,770
You can look in help but it's pretty much blue green magenta red.

34
00:02:04,150 --> 00:02:06,930
Oh I already forgot cyan and yellow I think.

35
00:02:07,000 --> 00:02:10,520
But you can just pull up help with term colors and you can see that.

36
00:02:10,540 --> 00:02:13,390
So give it a shot if you want to or follow along.

37
00:02:13,390 --> 00:02:18,400
As I build it but the idea is that you're not supposed to know how to use this right out of the box.

38
00:02:18,610 --> 00:02:24,160
You need to go through the process of you know any developer who finds his package for the first time

39
00:02:24,490 --> 00:02:28,260
you go and read and you look and explore the documentation to give it a shot.

40
00:02:28,360 --> 00:02:30,130
Or let's build it now to get it.

41
00:02:30,370 --> 00:02:34,700
So the first thing we should do is install the package and I've already given you the name.

42
00:02:34,750 --> 00:02:39,470
So we just need Python three Dasch am Pipp install.

43
00:02:39,550 --> 00:02:40,150
They get.

44
00:02:40,150 --> 00:02:42,760
I already have it installed so it will tell me that.

45
00:02:42,870 --> 00:02:47,450
But if you don't then it should take a moment and install and we can start off.

46
00:02:47,530 --> 00:02:54,540
Let's just open up Python 3 and import PI piglet and then run help.

47
00:02:54,550 --> 00:02:57,830
But rather than rather than running help on the entire thing.

48
00:02:58,150 --> 00:03:05,750
If I do that you'll see we get so much stuff what we want instead is to look for this Figler that format.

49
00:03:05,970 --> 00:03:09,670
I'm going to quit out of fear and instead we can do help.

50
00:03:09,770 --> 00:03:16,840
PY fuckwit dot piglet former figure that sounds so ridiculous saying that multiple times and we can

51
00:03:16,840 --> 00:03:23,740
see there's this function figure format just takes in text and then a font which defaults to standard

52
00:03:24,250 --> 00:03:29,830
so the text is what we want to be formatted and what that will actually do if you try running this make

53
00:03:29,830 --> 00:03:35,400
a variable just called results equals and then we'll do PI.

54
00:03:35,430 --> 00:03:43,850
They do not fit good format and then pass in high and we look at results.

55
00:03:44,530 --> 00:03:51,260
This actually is the ASCII art text in a string and just has all these new line characters.

56
00:03:51,490 --> 00:03:55,210
So when it's actually printed out would you print results.

57
00:03:55,270 --> 00:04:02,320
We get high so this is a magical line and all we'll need to do is ask the user for input and then pass

58
00:04:02,320 --> 00:04:06,210
that input into here and that will give us the ASCII art.

59
00:04:06,400 --> 00:04:08,890
And then when we print it all colorize it.

60
00:04:09,040 --> 00:04:17,450
Using the term color package so lets quit and make a new file and all call this file.

61
00:04:17,620 --> 00:04:19,090
ASCII art.

62
00:04:19,130 --> 00:04:20,500
P Why.

63
00:04:21,310 --> 00:04:24,510
OK so let's begin by importing pi.

64
00:04:24,570 --> 00:04:25,340
Figure.

65
00:04:25,810 --> 00:04:29,550
And then let's just ask a user very at the very beginning.

66
00:04:29,650 --> 00:04:31,150
Let's ask for a message.

67
00:04:31,260 --> 00:04:34,890
There will just be input.

68
00:04:34,900 --> 00:04:37,340
What would you like to print.

69
00:04:40,220 --> 00:04:44,780
And we can also ask them for the color but we won't do anything with it yet and it will just be another

70
00:04:44,910 --> 00:04:49,190
input what color.

71
00:04:50,160 --> 00:05:00,800
OK then we'll just take that in the message very well and we have this pie Figler dot piglet formats

72
00:05:01,600 --> 00:05:08,600
which we just saw and we'll pass in message and I'll save that to a variable and we'll just call this

73
00:05:08,750 --> 00:05:13,160
ascii art or ascii message.

74
00:05:13,370 --> 00:05:17,340
And then at the end we'll just print ASCII art.

75
00:05:17,870 --> 00:05:20,420
So this is the magical line we're just asking for input.

76
00:05:20,480 --> 00:05:22,040
Let's just see what happens.

77
00:05:22,560 --> 00:05:25,440
So that's Python 3 ASCII art.

78
00:05:25,460 --> 00:05:26,650
What would you like to print.

79
00:05:26,660 --> 00:05:27,740
Let's just do.

80
00:05:27,890 --> 00:05:29,710
Hi there.

81
00:05:30,110 --> 00:05:30,680
What color.

82
00:05:30,670 --> 00:05:31,190
It doesn't matter.

83
00:05:31,190 --> 00:05:32,040
We're not using it.

84
00:05:32,180 --> 00:05:34,200
And we get high there.

85
00:05:34,610 --> 00:05:37,680
So now all we have to do is get the colors working.

86
00:05:38,210 --> 00:05:40,560
So that's just going to be important.

87
00:05:40,640 --> 00:05:47,270
And then it was called term color and rather than importing term color like this I'm going to do from

88
00:05:47,630 --> 00:05:53,990
term color import colored which is what we saw in the last video and then I'll make another variable

89
00:05:53,990 --> 00:05:57,070
called colored ASCII equals.

90
00:05:57,320 --> 00:06:02,110
And it's going to be colored and then we pass in ASCII art.

91
00:06:02,120 --> 00:06:03,690
That's what we want to be colored.

92
00:06:03,920 --> 00:06:05,460
And then a color.

93
00:06:06,020 --> 00:06:10,010
And let's just default right now to have colored be green.

94
00:06:10,700 --> 00:06:15,540
And then we'll just print colored ASCII.

95
00:06:16,130 --> 00:06:16,710
OK.

96
00:06:16,910 --> 00:06:22,160
So we were getting the ASCII art over asking for input and we're taking it and formatting it using fake

97
00:06:22,160 --> 00:06:28,790
PI fake it then that comes back and then we're passing it into colored which we've imported from term

98
00:06:28,790 --> 00:06:33,000
color and then that returns a colored version but it doesn't print itself.

99
00:06:33,260 --> 00:06:35,160
We then have to pass it into print.

100
00:06:35,420 --> 00:06:42,030
And let's try running it let's print glob law that's red and we get blah blah as green.

101
00:06:42,110 --> 00:06:42,940
Perfect.

102
00:06:43,340 --> 00:06:46,580
So now we just need to connect the color portion.

103
00:06:46,580 --> 00:06:52,250
So a user can enter a color and then we'll just pass a color right there.

104
00:06:52,580 --> 00:06:57,980
So whatever the user types we passed in under the in the keyword argument color.

105
00:06:58,550 --> 00:07:01,020
And now let's test it.

106
00:07:01,270 --> 00:07:02,180
What I want to print.

107
00:07:02,320 --> 00:07:03,770
Ello ello ello.

108
00:07:04,040 --> 00:07:12,540
And we'll print it as blue and that works I'll do the same thing and I'll print it as yellow.

109
00:07:13,280 --> 00:07:17,640
But then the problem is what if I just try and print orange.

110
00:07:17,840 --> 00:07:19,120
It breaks everything.

111
00:07:19,190 --> 00:07:22,930
So let's write some code to defend against that.

112
00:07:23,030 --> 00:07:26,690
And the first thing we could do is just look at the permitted colors.

113
00:07:26,690 --> 00:07:37,970
Open a Python 3 import term color and then we'll do help turn color and you can see available text colors

114
00:07:38,000 --> 00:07:39,000
right here.

115
00:07:39,020 --> 00:07:47,330
So I'm just going to copy that and then go back and I'll just printed or cut and paste it here.

116
00:07:47,590 --> 00:07:49,510
And the first thing that will do.

117
00:07:49,660 --> 00:07:55,720
We're just going to test if the user provided color is in and we could make this whole list if we wanted

118
00:07:55,720 --> 00:08:00,160
to we're going to need to put quotes around everything is kind of annoying but we make it a list and

119
00:08:00,160 --> 00:08:02,690
then just check is color in that list.

120
00:08:02,950 --> 00:08:10,210
And if it's not then we'll set color to be whatever default we want white or magenta or blue and actually

121
00:08:10,210 --> 00:08:11,310
rather than a list.

122
00:08:11,350 --> 00:08:17,450
This would be a good use case for a tuple because we're never going to change this inside of our application.

123
00:08:17,470 --> 00:08:20,810
We're not going to have code that is adding a color or removing a color.

124
00:08:20,830 --> 00:08:25,810
This is just sort of a constant list so I'm going to make it a tuple because it will just it's lighter

125
00:08:25,810 --> 00:08:28,280
weight and I'll add in my quotes.

126
00:08:28,310 --> 00:08:29,310
There we go.

127
00:08:29,380 --> 00:08:31,560
Save that and I'll just call it Vout.

128
00:08:31,560 --> 00:08:36,100
Valid colors equals that tuple.

129
00:08:36,150 --> 00:08:39,490
Put that up top.

130
00:08:39,490 --> 00:08:40,150
Cool.

131
00:08:40,180 --> 00:08:49,810
And then after we get a user color we'll just write an IF statement if color not in valid colors then

132
00:08:49,930 --> 00:08:53,040
we'll change color to be whatever default we want.

133
00:08:53,080 --> 00:08:54,160
I'll go with magenta.

134
00:08:54,160 --> 00:08:58,800
The closest thing to purple of course and that should be that.

135
00:08:59,080 --> 00:09:01,120
So we have our valued colors list.

136
00:09:01,360 --> 00:09:05,670
If whatever the user enters is not in this tuple tuple nimblest.

137
00:09:05,860 --> 00:09:11,860
And if that's the case I'll give it a default value of magenta and then use that color variable down

138
00:09:11,860 --> 00:09:12,530
here.

139
00:09:12,570 --> 00:09:17,140
Otherwise if it is in this list then we'll just print that color.

140
00:09:17,500 --> 00:09:18,090
Let's test

141
00:09:21,620 --> 00:09:24,430
so I want to print I'll just do haha.

142
00:09:24,890 --> 00:09:28,310
And this time I want green that works.

143
00:09:28,320 --> 00:09:29,470
That's the same thing.

144
00:09:29,660 --> 00:09:34,820
But I type orange I get magenta because orange isn't an option sadly.

145
00:09:35,210 --> 00:09:39,560
And if I type blue that works OK so I'll stop there.

146
00:09:39,560 --> 00:09:45,020
We built a very simple application but it's combining two different modules.

147
00:09:45,110 --> 00:09:51,640
The one refactor we could make is do the same thing up here all that we're using from PI forgood PI

148
00:09:51,650 --> 00:09:54,050
figure it is figured format.

149
00:09:54,170 --> 00:10:01,160
So I'm going to instead do from PI figure that import format.

150
00:10:01,160 --> 00:10:02,980
Those are the only things you need.

151
00:10:03,020 --> 00:10:09,860
And so then I can remove this pi Figler it and our code is a little bit cleaner and you know we could

152
00:10:09,860 --> 00:10:18,340
wrap this up in a function we could call it def print art and it could take in message and to color

153
00:10:19,730 --> 00:10:23,660
and then we'll just move this code inside of there.

154
00:10:23,780 --> 00:10:30,190
All of this and then these two things we ask for user input.

155
00:10:30,820 --> 00:10:37,070
We'll just pass them in to print art message color.

156
00:10:37,190 --> 00:10:42,740
Totally unnecessary but it's just I just want to show you because we haven't been using that many functions

157
00:10:42,740 --> 00:10:46,250
yet still pretty fresh in our course memory.

158
00:10:46,250 --> 00:10:47,540
So this is something we could do.

159
00:10:47,630 --> 00:10:50,030
Valid colors is only used inside of this.

160
00:10:50,030 --> 00:10:51,890
There's no reason to make it global.

161
00:10:51,890 --> 00:10:56,890
We can just define it in there and that should be that.

162
00:10:56,910 --> 00:10:58,830
That's just I check.

163
00:10:58,830 --> 00:11:00,070
See if it still works.

164
00:11:02,510 --> 00:11:06,740
What do we want to print those print red in red and it still works.

165
00:11:06,740 --> 00:11:12,380
So now we've just created a function called Print art and it takes two arguments and that's pretty much

166
00:11:12,380 --> 00:11:12,750
it.

167
00:11:12,890 --> 00:11:13,360
OK.

168
00:11:13,400 --> 00:11:17,360
So we combined two different modules to make something pretty simple.

169
00:11:17,390 --> 00:11:20,460
But still bigger and better than what we could do on our own.
