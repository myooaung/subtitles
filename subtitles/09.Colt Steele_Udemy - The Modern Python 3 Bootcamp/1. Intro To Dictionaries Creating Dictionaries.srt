0
1
00:00:00,360 --> 00:00:01,470
Hey welcome back.
1

2
00:00:01,470 --> 00:00:04,650
So this next section is all about another data structure.
2

3
00:00:04,770 --> 00:00:07,160
This time it's the dictionary.
3

4
00:00:07,170 --> 00:00:12,390
So let's first just to find some basic objectives what we want to do in this section.
4

5
00:00:12,420 --> 00:00:18,450
We want to be able to create an Access dictionary data structures as well as just explain what they
5

6
00:00:18,450 --> 00:00:18,990
are.
6

7
00:00:18,990 --> 00:00:20,790
Describe how they work.
7

8
00:00:21,330 --> 00:00:24,960
We'll use a couple of built in methods to modify and copy dictionaries.
8

9
00:00:25,110 --> 00:00:29,890
So fortunately there's not as many We need to talk about compared to lists.
9

10
00:00:30,360 --> 00:00:35,880
Well learn to loop over dictionaries iterate over them using loops and dictionary comprehensions we
10

11
00:00:35,880 --> 00:00:41,070
saw list comprehensions we'll also see dictionary comprehensions and then one of the things we also
11

12
00:00:41,070 --> 00:00:45,150
do is compare and contrast dictionaries and lists to data structures.
12

13
00:00:45,150 --> 00:00:46,910
How are they similar and how they're different.
13

14
00:00:46,920 --> 00:00:50,960
When would you use one versus the other and then it's actually a good place for us to begin.
14

15
00:00:52,230 --> 00:00:53,860
So lists are great.
15

16
00:00:53,880 --> 00:00:57,260
We use them a lot but there are some severe limitations.
16

17
00:00:57,330 --> 00:01:03,570
They really work to store a particular type of data or a particular set of data where things make sense
17

18
00:01:03,630 --> 00:01:04,610
in the list.
18

19
00:01:04,650 --> 00:01:11,550
Lists of I don't know users lists of names lists of items but then things get a bit more complicated
19

20
00:01:11,550 --> 00:01:17,220
if we're working with data like we're trying to model individual instructor or an individual item in
20

21
00:01:17,220 --> 00:01:18,380
a shopping cart.
21

22
00:01:18,420 --> 00:01:20,720
There's more information that we'd want to store.
22

23
00:01:20,880 --> 00:01:24,050
So for example what is this information here in a list.
23

24
00:01:24,060 --> 00:01:25,470
What does it represent.
24

25
00:01:25,470 --> 00:01:27,410
It's unclear what this is.
25

26
00:01:27,420 --> 00:01:32,820
We have a collection of values a string of boolean a number a string and a boolean.
26

27
00:01:32,970 --> 00:01:35,390
But I don't know what it's referring to.
27

28
00:01:35,400 --> 00:01:38,310
It's just we don't have enough information to make sense of it.
28

29
00:01:38,310 --> 00:01:43,090
So wouldn't it be nice if there was a way to describe this data with more detail.
29

30
00:01:43,200 --> 00:01:44,940
So here's another example.
30

31
00:01:44,940 --> 00:01:50,490
This is not a data structure in Python This is just me kind of outlining some things you might want
31

32
00:01:50,490 --> 00:01:51,270
to store.
32

33
00:01:51,480 --> 00:01:57,270
Let's say we had a shopping cart which would be a list so that easy we could do something like you know
33

34
00:01:57,270 --> 00:02:00,290
cart equals an empty list.
34

35
00:02:00,480 --> 00:02:06,960
But then each item in the cart with what we know right now you know an item might have a name like cat
35

36
00:02:06,990 --> 00:02:10,560
litter a quantity would have three of them in my cart and a price.
36

37
00:02:10,560 --> 00:02:11,950
Nineteen ninety nine.
37

38
00:02:11,970 --> 00:02:14,330
How can I store that all in this cart.
38

39
00:02:14,580 --> 00:02:20,490
I could do it as a list and start off with cat litter and then the next element in the list would be
39

40
00:02:20,490 --> 00:02:21,630
the quantity of three.
40

41
00:02:21,630 --> 00:02:25,040
And then the price which was nineteen point ninety nine.
41

42
00:02:25,410 --> 00:02:29,790
This theoretically could work but it's really unclear.
42

43
00:02:29,790 --> 00:02:36,540
We have to know going into this that the item at index 0 is the name of the item and the item at index
43

44
00:02:36,540 --> 00:02:37,410
1 is the quantity.
44

45
00:02:37,410 --> 00:02:38,670
It just doesn't make sense.
45

46
00:02:38,670 --> 00:02:45,000
So what we want instead is a way of describing that data and encoding more information rather than just
46

47
00:02:45,000 --> 00:02:52,050
an order which is what a list encodes we can use a dictionary and a dictionary consists at its core
47

48
00:02:52,050 --> 00:02:53,580
of key value pairs.
48

49
00:02:53,580 --> 00:02:59,700
You'll hear me say that a lot key value it's basically pairs of information pairs of data like a label.
49

50
00:03:00,240 --> 00:03:02,950
And we use keys to describe our data.
50

51
00:03:03,120 --> 00:03:07,220
And then the values are the actual data they represent the data.
51

52
00:03:07,320 --> 00:03:11,170
So if we think of a list we can think of key value pairs in the list.
52

53
00:03:11,190 --> 00:03:20,620
The keys are all indexes indices 0 is a key and the data might be the string blue in a dictionary.
53

54
00:03:20,670 --> 00:03:26,610
We actually control the keys on our own and we can decide how we want to store data and under what key
54

55
00:03:27,630 --> 00:03:29,750
makes a lot more sense if we just look at a dictionary.
55

56
00:03:29,880 --> 00:03:31,680
So here's an example.
56

57
00:03:31,680 --> 00:03:39,220
This contains all the bullion information from this last list back here that we couldn't decode their
57

58
00:03:39,330 --> 00:03:40,800
string and boolean and numbers.
58

59
00:03:40,830 --> 00:03:46,500
We didn't know what these meant but in a dictionary you can actually see oh names are supposed to be
59

60
00:03:46,500 --> 00:03:48,440
called OWN DOG.
60

61
00:03:48,470 --> 00:03:48,860
Supposed to.
61

62
00:03:48,900 --> 00:03:52,060
Well this is said My dog has since moved on.
62

63
00:03:52,150 --> 00:03:53,830
I should update this slide.
63

64
00:03:54,420 --> 00:03:57,440
Well I own a cat still so owns cats.
64

65
00:03:57,450 --> 00:03:58,710
That's true.
65

66
00:03:58,770 --> 00:04:03,060
Number of courses for favorite language is Python is hilarious.
66

67
00:04:03,060 --> 00:04:03,570
False.
67

68
00:04:03,560 --> 00:04:04,620
Very funny.
68

69
00:04:04,620 --> 00:04:09,490
Forty four is my favorite number 73 is actually taking its place recently.
69

70
00:04:09,660 --> 00:04:15,970
As you can see though this encodes a lot more information rather than just the zero with item is called.
70

71
00:04:15,990 --> 00:04:17,550
And the first item is true.
71

72
00:04:17,700 --> 00:04:18,600
And so on.
72

73
00:04:18,690 --> 00:04:21,340
This actually explains what each thing is.
73

74
00:04:21,340 --> 00:04:26,340
It's on the left we have keys and on the right are the corresponding values.
74

75
00:04:26,850 --> 00:04:28,650
And also notice the curly braces.
75

76
00:04:28,710 --> 00:04:33,750
So this is just one way to make a dictionary but they are always key value pairs.
76

77
00:04:33,870 --> 00:04:36,500
And the keys and values are separated by colons.
77

78
00:04:36,690 --> 00:04:42,400
And then just like with lists we denote the next item with a comma.
78

79
00:04:42,450 --> 00:04:46,700
So our kids are almost always numbers and strings as you can see over here.
79

80
00:04:46,740 --> 00:04:49,050
Forty four is number but everything else is a string.
80

81
00:04:49,200 --> 00:04:56,010
But the values can be anything they can be another string a boolean a number they could be another dictionary
81

82
00:04:56,220 --> 00:05:02,070
or a list and a lot of the time what we'll be working with is more complex structures or we have nested
82

83
00:05:02,070 --> 00:05:04,270
lists and dictionaries together.
83

84
00:05:04,410 --> 00:05:10,770
So going back to this example here of a shopping cart rather than each item being its own list it would
84

85
00:05:10,770 --> 00:05:17,070
make a lot more sense to have each item be a dictionary where we could have you know name would be equal
85

86
00:05:17,070 --> 00:05:29,970
to and it's to be a string name could be cat litter comma and quantity quantity could be three and so
86

87
00:05:29,970 --> 00:05:30,540
on.
87

88
00:05:30,960 --> 00:05:38,200
And what we end up with is a list of dictionaries for each item in the list has multiple pieces of information.
88

89
00:05:38,580 --> 00:05:39,550
So we'll get to that.
89

90
00:05:39,630 --> 00:05:46,380
But let's start by just defining our own little baby list in Python so I'm going to make a variable
90

91
00:05:46,690 --> 00:05:53,130
and we can just call this one cat and work with my cat and we need a name.
91

92
00:05:53,350 --> 00:06:01,960
We don't have to have a name but I'll give her a name which is blue and age and I don't know I think
92

93
00:06:01,960 --> 00:06:03,850
she's three somewhere between three and four.
93

94
00:06:03,850 --> 00:06:05,410
Let's do three point five.
94

95
00:06:06,520 --> 00:06:08,350
And separated by commas again.
95

96
00:06:08,470 --> 00:06:12,510
Let's go with is cute.
96

97
00:06:14,100 --> 00:06:15,900
And she's not as cute as you used to be.
97

98
00:06:15,900 --> 00:06:17,800
To be honest I mean she's not a kitten.
98

99
00:06:18,180 --> 00:06:19,030
She's aging.
99

100
00:06:19,050 --> 00:06:20,070
To be expected.
100

101
00:06:20,070 --> 00:06:21,320
But she's still pretty cute.
101

102
00:06:21,330 --> 00:06:22,750
So I'll give that to her.
102

103
00:06:23,220 --> 00:06:24,430
And hit enter.
103

104
00:06:24,540 --> 00:06:26,130
If I look back at cat.
104

105
00:06:26,220 --> 00:06:26,940
There we go.
105

106
00:06:26,940 --> 00:06:28,150
Our data is in there.
106

107
00:06:28,230 --> 00:06:35,480
We have strings for the kids and for the values we have a number another string and a boolean.
107

108
00:06:35,820 --> 00:06:43,320
So another way to create a dictionary is to use the dict to make sure I pronounce that t very clearly
108

109
00:06:44,010 --> 00:06:45,190
could get in trouble here.
109

110
00:06:45,230 --> 00:06:51,240
The dict function which is just like the list function or the string function which is used to either
110

111
00:06:51,240 --> 00:06:55,020
create or cast convert a data type.
111

112
00:06:55,020 --> 00:07:01,180
In this case the most common use of dict is to pass in keys and values separated by an equal sign.
112

113
00:07:01,590 --> 00:07:07,250
So it looks like this dict parentheses and then whatever key equal to whatever value.
113

114
00:07:07,410 --> 00:07:08,580
OK so let's try that out.
114

115
00:07:08,580 --> 00:07:14,880
Let's make another cat called Cat 2 and we'll use the dict function and then in parentheses we just
115

116
00:07:14,880 --> 00:07:18,460
pass in key value with the equal sign separating it.
116

117
00:07:18,480 --> 00:07:22,480
So let's do name equals.
117

118
00:07:22,700 --> 00:07:25,250
I actually don't I don't have a name for my new cat yet.
118

119
00:07:25,320 --> 00:07:26,670
I'm calling her Kitty.
119

120
00:07:27,030 --> 00:07:33,480
And if you look at Cat 2 it puts name in quotes as Kitty as a corresponding value.
120

121
00:07:33,480 --> 00:07:39,090
And if you wanted to add in another piece of information like age just use the equal sign again separate
121

122
00:07:39,090 --> 00:07:40,000
them by commas.
122

123
00:07:40,200 --> 00:07:42,780
And she's about half a year.
123

124
00:07:42,940 --> 00:07:49,340
And if you look at Cat 2 now we have name as a string and age is a string Kitty.
124

125
00:07:49,420 --> 00:07:50,720
The value is a string.
125

126
00:07:50,740 --> 00:07:53,880
And the age value is 0.5.
126

127
00:07:54,030 --> 00:07:54,430
All right.
127

128
00:07:54,430 --> 00:07:58,400
So that's two ways of making a dictionary totally up to you what you prefer.
128

129
00:07:58,450 --> 00:08:05,560
I typically use the first method because to be honest it's more similar to how pretty much every programming
129

130
00:08:05,560 --> 00:08:07,240
language does it.
130

131
00:08:07,280 --> 00:08:08,350
Well that's not quite true.
131

132
00:08:08,380 --> 00:08:12,650
There's a couple that do something more like this but it's really up to you.
132

133
00:08:12,670 --> 00:08:14,310
I'll use both throughout the course.
133

134
00:08:14,380 --> 00:08:16,280
It's nice not having to type quotes here.
134

135
00:08:16,300 --> 00:08:18,240
So there is one advantage to that.
135

136
00:08:18,520 --> 00:08:19,120
OK.
136

137
00:08:19,630 --> 00:08:21,670
So now we have data in there.
137

138
00:08:21,670 --> 00:08:23,080
How do we get it back out.
