1
00:00:00,120 --> 00:00:01,230
We'll get we're back.

2
00:00:01,230 --> 00:00:02,780
We're talking about dictionaries still.

3
00:00:02,790 --> 00:00:03,290
All right.

4
00:00:03,330 --> 00:00:08,670
So in the list comprehension videos I mentioned we're seeing how to do this with lists but there are

5
00:00:08,670 --> 00:00:12,250
similar things we can do with other data structures that we'll see later.

6
00:00:12,390 --> 00:00:14,680
Well one of those is dictionaries.

7
00:00:14,820 --> 00:00:19,210
So in this video we're talking about dictionary comprehension as the slide says.

8
00:00:19,440 --> 00:00:23,480
So the syntax is similar but it's also different.

9
00:00:23,670 --> 00:00:28,680
First thing right off the bat instead of using the list brackets we're using dictionary brackets so

10
00:00:28,680 --> 00:00:30,490
that part probably makes sense.

11
00:00:30,540 --> 00:00:38,490
We still have the four blank in blank but then up front rather than a single plank.

12
00:00:38,730 --> 00:00:44,850
We have blank Colan blank and I'm saying a lot of it doesn't make sense and I'm just talking about it

13
00:00:44,850 --> 00:00:45,270
like this.

14
00:00:45,270 --> 00:00:52,320
So it will iterate over keys by default and we can use dot items if you want to iterate over keys and

15
00:00:52,320 --> 00:00:53,040
values.

16
00:00:53,340 --> 00:00:55,860
But let's just took Take a look at our first example.

17
00:00:56,070 --> 00:00:58,520
So here we have a dictionary called numbers.

18
00:00:58,710 --> 00:01:02,830
And if we look at numbers it just has first is one second to third is.

19
00:01:02,940 --> 00:01:06,430
And they're all you know the integer 1 2 3.

20
00:01:06,540 --> 00:01:08,550
Here is our dictionary comprehension.

21
00:01:08,730 --> 00:01:11,000
We are iterating through numbers not items.

22
00:01:11,010 --> 00:01:17,620
So right here this is a standard for what we've seen before for key value in number items.

23
00:01:17,790 --> 00:01:20,730
We're going to take the key and just keep it the same.

24
00:01:20,760 --> 00:01:24,440
So each of the keys in this new dictionary starts with first the second and third.

25
00:01:24,440 --> 00:01:26,790
Just like before but value.

26
00:01:26,910 --> 00:01:29,390
We're going to square multiply by itself.

27
00:01:29,520 --> 00:01:32,730
So we end up with 1 times 100 is 1 2 times.

28
00:01:32,850 --> 00:01:35,330
Times 2 which is 4 and 3 times 3 which is 9.

29
00:01:35,460 --> 00:01:37,540
So just one more time to iterate iterate.

30
00:01:37,570 --> 00:01:41,560
Reiterate are you using key value because we're using dead items.

31
00:01:41,610 --> 00:01:46,350
So we're looping through and for each one we're basically adding a key value pair.

32
00:01:46,440 --> 00:01:52,800
Just like with a list comprehension Oh we only need one value here which represents what to add to each

33
00:01:52,800 --> 00:01:54,720
list to each part of the list.

34
00:01:54,750 --> 00:01:56,470
In this case we need two pieces.

35
00:01:56,490 --> 00:01:57,910
The key and the value.

36
00:01:58,380 --> 00:01:59,710
OK let's try this again.

37
00:01:59,850 --> 00:02:02,540
Here's another example which does this one do.

38
00:02:02,850 --> 00:02:05,730
So this iterable collection now this is different.

39
00:02:05,730 --> 00:02:07,890
We're not using existing dictionary.

40
00:02:07,890 --> 00:02:15,030
We're making a dictionary but we're starting with a list and we're going through it for each number

41
00:02:15,030 --> 00:02:15,980
in them.

42
00:02:16,170 --> 00:02:22,570
We're going to set the value to the square of number but the actual key is going to be known to try

43
00:02:22,640 --> 00:02:25,260
and pretty visualize this before I run it.

44
00:02:25,260 --> 00:02:27,770
What do you expect.

45
00:02:27,840 --> 00:02:31,800
And we get one call and one to call in four and so on.

46
00:02:31,800 --> 00:02:38,160
So we have the initial number known as the key and then the corresponding value is that same number

47
00:02:38,220 --> 00:02:39,230
squared.

48
00:02:39,240 --> 00:02:40,850
So here's another example.

49
00:02:41,280 --> 00:02:43,520
This time we have two strings.

50
00:02:43,720 --> 00:02:49,850
And what we're basically doing is looping through the strings and we're taking the first of string one

51
00:02:49,860 --> 00:02:57,060
the first character which is a making that the key and the value is 1 B to C 3 are basically course.

52
00:02:57,210 --> 00:02:58,620
I don't know what we would call this.

53
00:02:58,620 --> 00:03:00,650
We're like interleaving them.

54
00:03:01,140 --> 00:03:05,950
And to do that we need to just write a loop to loop through one of the strings.

55
00:03:05,970 --> 00:03:12,300
So we're just using a range for I in range 0 to the length of the string and we're taking that number.

56
00:03:12,300 --> 00:03:18,690
And the reason we need to do that rather than doing for character in string One is we would need the

57
00:03:18,690 --> 00:03:22,250
index to access the corresponding character string to.

58
00:03:22,260 --> 00:03:24,010
So it's better to use a range.

59
00:03:24,330 --> 00:03:26,740
So I is going to be a numbers starting from zero.

60
00:03:26,970 --> 00:03:30,050
And then we're just making the key string one of I.

61
00:03:30,130 --> 00:03:36,450
So that would be the first time through and the corresponding value string two of I which is 1.

62
00:03:36,900 --> 00:03:39,630
Hopefully you can see how that makes sense.

63
00:03:39,660 --> 00:03:44,970
We're basically just generating a number over here and plugging it in first string and then that string

64
00:03:44,970 --> 00:03:47,890
and setting them as corresponding key value pairs.

65
00:03:48,210 --> 00:03:50,520
OK so a quick example here.

66
00:03:50,790 --> 00:03:56,870
I have a simple or instr. dictionary says name called City San Francisco color purple.

67
00:03:57,120 --> 00:04:04,050
And if I wanted to do sort of a joke version but I'll call it yelling instructor and I'll have every

68
00:04:04,050 --> 00:04:07,370
key and every value upper cased.

69
00:04:07,860 --> 00:04:15,270
So it would look something like this I could call it you know yelling instructor equals we need a dictionary

70
00:04:15,270 --> 00:04:15,760
here.

71
00:04:15,810 --> 00:04:18,570
Dictionary comprehension and we'll just start with key.

72
00:04:18,600 --> 00:04:19,860
I'll do K.

73
00:04:19,980 --> 00:04:24,250
Dot upper colon value.

74
00:04:24,270 --> 00:04:35,130
Upper space for k comma V an instructor dot items.

75
00:04:35,160 --> 00:04:40,110
So right now it looks like a lot this little bit of syntax is kind of gross with the parentheses in

76
00:04:40,110 --> 00:04:47,400
the colon but we're just iterating through instr. that items giving instead of key and value and using

77
00:04:47,400 --> 00:04:49,480
K and V just to keep it shorter.

78
00:04:49,560 --> 00:04:53,640
And then we're setting the key to be the uppercase version of the existing key and the value to be the

79
00:04:53,640 --> 00:04:55,740
uppercase version of the existing value.

80
00:04:55,770 --> 00:05:00,020
And if I look at young instructor now I have name called City San Francisco.

81
00:05:00,030 --> 00:05:03,630
Well name called City San Francisco color purple.

82
00:05:03,630 --> 00:05:09,860
Anyway it's just a silly little example but let's look at conditional logic now.

83
00:05:10,020 --> 00:05:11,620
So here's another example.

84
00:05:11,640 --> 00:05:17,610
We have a list of numbers 1 2 3 4 and we're just going to iterate through that list and create a dictionary

85
00:05:17,730 --> 00:05:22,630
that specifies one is odd to is even threes and fours even and so on.

86
00:05:22,770 --> 00:05:28,280
And just create a nice little dictionary that has you know values maps too if there even or odd.

87
00:05:28,620 --> 00:05:31,730
So we loop through for name and number list.

88
00:05:31,770 --> 00:05:34,160
We have our dictionary brackets.

89
00:05:34,170 --> 00:05:36,160
And then this is the syntax we set.

90
00:05:36,160 --> 00:05:38,100
Numb colon.

91
00:05:38,430 --> 00:05:39,810
So our values are a key.

92
00:05:39,810 --> 00:05:42,720
It's just going to be the number we could do something else here.

93
00:05:42,890 --> 00:05:50,220
Oh just leave it at Colon and then even if Number two is equal to zero else odd.

94
00:05:50,310 --> 00:05:56,580
So we're going to set the value of corresponding values even if it's even no remainder when we divide

95
00:05:56,580 --> 00:05:57,270
by 2.

96
00:05:57,270 --> 00:05:58,940
Otherwise set it to be odd.

97
00:05:59,040 --> 00:06:00,140
So let's check it out.

98
00:06:00,300 --> 00:06:07,750
And if I pasted in there we go I get one odd to even and actually could even do this instead of for

99
00:06:07,770 --> 00:06:11,790
number in numberless letters to range from 1 to 100.

100
00:06:11,790 --> 00:06:17,460
And we get a massive list or massive dictionary that has no corresponding key value pairs for each number

101
00:06:17,520 --> 00:06:19,780
and it's corresponding.

102
00:06:19,830 --> 00:06:21,000
What is this property called.

103
00:06:21,000 --> 00:06:22,530
Even this oddness.

104
00:06:22,560 --> 00:06:25,690
There's got to be a name for both of them.

105
00:06:25,710 --> 00:06:27,320
I'll look it up and put a pillow.

106
00:06:27,630 --> 00:06:32,280
And we're not limited to just doing our conditional logic on the value side of things on the right side

107
00:06:32,280 --> 00:06:33,290
of the colon.

108
00:06:33,300 --> 00:06:39,130
We go back to my instructor dictionary when we doing the upper casing.

109
00:06:39,310 --> 00:06:41,150
Let me just bring that back here.

110
00:06:41,400 --> 00:06:41,860
Here we go.

111
00:06:41,860 --> 00:06:47,890
Yelling instructor I could do something like this let's say it is going to be silly but I only wanted

112
00:06:47,910 --> 00:06:57,240
to uppercase color and leave name and city lowercase but still uppercase every value so I could do something

113
00:06:57,240 --> 00:07:05,520
like this K Dot upper if K I'll do is color.

114
00:07:05,520 --> 00:07:15,450
Else ups will just do K and if we look at yoga instructor now name and city or lowercase What color

115
00:07:15,450 --> 00:07:16,600
is upper case.

116
00:07:16,890 --> 00:07:22,880
So you can see we have conditional logic as part of the key and then the value is the same.

117
00:07:23,010 --> 00:07:26,060
So appear we had conditional logic is part of the value.

118
00:07:26,280 --> 00:07:31,470
All right so that just about wraps it up for dictionary comprehension as well as dictionaries.

119
00:07:31,470 --> 00:07:36,880
We have some exercises that sort of fun thing but we're done with new content with dictionaries.
