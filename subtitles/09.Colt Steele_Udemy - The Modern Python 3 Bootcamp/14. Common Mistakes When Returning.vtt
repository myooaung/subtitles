WEBVTT
1
00:00:00.120 --> 00:00:01.120
Hey welcome back.

2
00:00:01.260 --> 00:00:07.470
So we've seen how to define a function that accepts inputs and spits something out turns in output using

3
00:00:07.470 --> 00:00:08.940
the return keyword.

4
00:00:08.940 --> 00:00:13.890
Now what I want to do is just showcase two common mistakes that are made when using the return keyword.

5
00:00:13.890 --> 00:00:20.280
So first up I have an example function called some odd numbers and the expected behavior that I want

6
00:00:20.610 --> 00:00:25.200
when I pass in a list or a range any sort of iterable collection.

7
00:00:25.200 --> 00:00:27.290
And we'll just assume it's full of numbers.

8
00:00:27.650 --> 00:00:33.090
What I want to happen is that I want it to loop through and for every odd number in there added together.

9
00:00:33.330 --> 00:00:40.760
So if I called some odd numbers with this list I would want one plus three plus five plus seven.

10
00:00:40.830 --> 00:00:42.740
So that should give us what is at 16.

11
00:00:43.030 --> 00:00:44.970
And so that's what we expect.

12
00:00:44.970 --> 00:00:51.700
We expect 16 to come back and then the simple walk through the behavior is we start with the total variable

13
00:00:51.700 --> 00:00:52.870
set are equal to zero.

14
00:00:52.950 --> 00:00:56.520
We loop through each number in numbers and we check.

15
00:00:56.520 --> 00:00:59.940
Is that number odd if it is we add it to total.

16
00:01:00.090 --> 00:01:02.230
And then at the end we return total.

17
00:01:02.370 --> 00:01:05.310
But if we actually run this let's see what happens.

18
00:01:06.670 --> 00:01:07.630
We get one.

19
00:01:07.660 --> 00:01:08.900
So what what's happening.

20
00:01:09.070 --> 00:01:13.330
One is supposed to be you know added to total and not returning total.

21
00:01:13.450 --> 00:01:18.130
But what about all the rest where is 3 and 5 and 7 being added in the total.

22
00:01:18.280 --> 00:01:24.010
And this is a really really simple mistake to make especially in Python because it's just a matter of

23
00:01:24.040 --> 00:01:25.090
indentation.

24
00:01:25.090 --> 00:01:32.080
What happens is that because this return is inside of this loop the first time through the loop so we

25
00:01:32.080 --> 00:01:33.280
run we run through it.

26
00:01:33.380 --> 00:01:37.410
In this example for Nahm and numbers we start off with numbers equal to 1.

27
00:01:37.450 --> 00:01:37.970
We check.

28
00:01:37.970 --> 00:01:39.100
Is it even or odd.

29
00:01:39.150 --> 00:01:41.220
And if it is odd We'll add it to total.

30
00:01:41.230 --> 00:01:46.720
So this line runs but then this line also runs because it's in the loop and it just says all right whatever

31
00:01:46.720 --> 00:01:47.710
total is right now.

32
00:01:47.770 --> 00:01:48.460
Return it.

33
00:01:48.670 --> 00:01:52.780
And that ends execution of the loop and of the function entirely.

34
00:01:52.780 --> 00:01:56.560
Remember that return will quit the function out and we're done.

35
00:01:57.100 --> 00:02:00.800
So what we do instead is dented here.

36
00:02:01.210 --> 00:02:07.540
And what happens now is the loop continues to run and it finishes running and then only after the loop

37
00:02:07.540 --> 00:02:09.700
is done we return total.

38
00:02:09.700 --> 00:02:11.180
So let's try it out.

39
00:02:11.950 --> 00:02:13.530
And now we get 16.

40
00:02:14.080 --> 00:02:14.490
OK.

41
00:02:14.530 --> 00:02:16.920
So let me leave both examples here.

42
00:02:17.110 --> 00:02:25.330
Down here I'll put the old version just like that and come it out.

43
00:02:25.830 --> 00:02:26.340
Okay.

44
00:02:26.410 --> 00:02:31.780
So that's the first problem that you might encounter is returning too soon and that can happen in you

45
00:02:31.780 --> 00:02:34.450
know a conditional or in a loop can happen all over the place.

46
00:02:34.450 --> 00:02:36.460
So just be aware of your indentation.

47
00:02:36.490 --> 00:02:42.280
So the second type of commonly made mistake when using the return keyword is not so much a mistake you

48
00:02:42.280 --> 00:02:47.540
know the last one actually broke the functionality of our code it didn't do what we wanted.

49
00:02:47.560 --> 00:02:49.410
This one is more just.

50
00:02:49.690 --> 00:02:54.970
It's just about making things cleaner and and removing unnecessary code.

51
00:02:54.970 --> 00:02:59.810
So what this function does it's called is odd number and we should be able to pass in.

52
00:03:00.100 --> 00:03:02.050
Let's do it for.

53
00:03:02.170 --> 00:03:04.290
And then we'll do nine.

54
00:03:04.450 --> 00:03:11.870
And it should return false for this one because 4 is not odd it's even and 9:20 it should return true.

55
00:03:12.010 --> 00:03:17.380
It's just a simple conditional check if number is divisible by or it's not divisible by 2 returned true.

56
00:03:17.380 --> 00:03:18.890
Otherwise return false.

57
00:03:18.910 --> 00:03:19.520
OK.

58
00:03:19.930 --> 00:03:22.780
So if we run it now we get false and true.

59
00:03:22.870 --> 00:03:25.720
And the behavior is how we're supposed to work.

60
00:03:25.720 --> 00:03:31.260
But what I want to show you is that this else right here is actually unnecessary.

61
00:03:31.270 --> 00:03:36.620
So what happens is we go through with let's say Nahm is nine if numb.

62
00:03:36.670 --> 00:03:40.180
So numb mod 2 9 made 2 is not equal to zero.

63
00:03:40.180 --> 00:03:50.080
And we return trip but this time if we pass in two if this part is false we can just return false right

64
00:03:50.080 --> 00:03:51.770
here just like this.

65
00:03:51.850 --> 00:03:53.300
There's only two options.

66
00:03:53.320 --> 00:03:56.710
So if we return true the rest of the code doesn't even execute.

67
00:03:56.710 --> 00:04:00.550
We don't need the else because this just ends the function.

68
00:04:00.550 --> 00:04:03.730
And the only way to get return false is if this is already false.

69
00:04:03.730 --> 00:04:08.830
So when you are returning boolean values like this or you're returning true or false there's no need

70
00:04:08.830 --> 00:04:14.530
for an additional else and it's not only limited to this case of returning true or false but if you're

71
00:04:14.530 --> 00:04:18.120
returning something at the end in the case you just don't need the else.

72
00:04:18.130 --> 00:04:22.130
So I call that when the unnecessary else patent pending.

73
00:04:22.340 --> 00:04:22.680
OK.

74
00:04:22.690 --> 00:04:25.750
So those are just two common mistakes you can make when using the return keyword.
