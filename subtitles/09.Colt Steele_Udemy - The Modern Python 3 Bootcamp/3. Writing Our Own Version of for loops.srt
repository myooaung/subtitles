1
00:00:00,210 --> 00:00:01,330
And welcome back.

2
00:00:01,340 --> 00:00:04,610
In this video we're going to define a custom for loop.

3
00:00:04,920 --> 00:00:09,880
And like I said in the last video it's going to be a slightly dumbed down version.

4
00:00:10,020 --> 00:00:15,090
Definitely not something you would use to replace an actual for loop but it's going to help us understand

5
00:00:15,090 --> 00:00:16,150
how things work.

6
00:00:16,500 --> 00:00:16,920
All right.

7
00:00:16,980 --> 00:00:25,830
So as we already mentioned if we did something like for Nahm in one two three or four chart in hi there

8
00:00:26,610 --> 00:00:33,060
what's happening behind the scenes is that this right here or here whatever the iterable is will return

9
00:00:33,060 --> 00:00:40,690
an iterator because inside the for loop it is being called on this stream or this list and then that

10
00:00:40,710 --> 00:00:46,520
returns the iterator which then the for loop keeps calling next on over and over and over until it has

11
00:00:46,530 --> 00:00:47,250
the end.

12
00:00:47,250 --> 00:00:50,940
And then once it hits the end we don't actually see the error rate.

13
00:00:50,940 --> 00:00:56,190
It intercepts it using a try except block and it just stops.

14
00:00:56,190 --> 00:00:57,280
So let's take a look.

15
00:00:57,480 --> 00:01:03,680
Let's define a function we'll just call it def my for something like that.

16
00:01:03,840 --> 00:01:06,260
And the first argument will be iterable.

17
00:01:06,270 --> 00:01:11,090
So that would be the thing we're trying to loop over and let's just leave it at this for now.

18
00:01:11,160 --> 00:01:16,900
The way that my form should work right now is that it just prints out every item in.

19
00:01:17,160 --> 00:01:21,350
If we did Hello it should printout each character individually.

20
00:01:21,420 --> 00:01:26,550
So it's just going to print to start then we'll work on adding a custom function so we could pass in

21
00:01:26,550 --> 00:01:28,150
print or something else.

22
00:01:28,170 --> 00:01:35,820
So my four iterable what we want to do is very first thing call it or on iterable and we'll save that

23
00:01:35,820 --> 00:01:38,040
to variable just called iterator.

24
00:01:38,500 --> 00:01:44,590
OK so this is like what we did in the last video editor of a string gives us a string iterator.

25
00:01:44,760 --> 00:01:51,840
Then we just want to continuously call next on iterator.

26
00:01:51,840 --> 00:01:55,460
So if we just did it once and I'll need to comment this out.

27
00:01:55,500 --> 00:01:57,170
I just did this once.

28
00:01:57,180 --> 00:01:59,050
Print next an iterator.

29
00:01:59,130 --> 00:02:02,520
I call my for on hello what do we expect to get.

30
00:02:02,730 --> 00:02:03,610
Let's run it.

31
00:02:03,690 --> 00:02:05,320
We get the letter H.

32
00:02:05,370 --> 00:02:05,970
All right.

33
00:02:05,970 --> 00:02:11,160
So then if we called that one more time now we get H E and so on.

34
00:02:11,490 --> 00:02:11,800
OK.

35
00:02:11,820 --> 00:02:15,850
So instead of calling it twice what we actually want to do is do it forever.

36
00:02:15,870 --> 00:02:22,170
While true we want to call print next iterator and if we do this of course it will work.

37
00:02:22,170 --> 00:02:25,810
Intel it doesn't we see here it works.

38
00:02:25,830 --> 00:02:27,830
Then we get to the end and it calls next again.

39
00:02:27,900 --> 00:02:30,090
And here's that stop iteration error.

40
00:02:30,090 --> 00:02:35,090
So this happens in a normal for loop except we don't see the error because it never gets to us.

41
00:02:35,100 --> 00:02:41,660
So what we want to do instead is ADD and try and then except if I could spell.

42
00:02:42,330 --> 00:02:44,920
OK so we're going to try to do this.

43
00:02:45,300 --> 00:02:51,450
And rather than just plain except it's better to do stop iteration or stop iteration There we go like

44
00:02:51,450 --> 00:02:52,020
that.

45
00:02:52,020 --> 00:02:57,870
And if that's the case we'll simply break from the loop and we could start with a print like and of

46
00:02:58,140 --> 00:03:01,090
iterator like that and then break from the loop.

47
00:03:01,470 --> 00:03:02,100
If we try this.

48
00:03:02,100 --> 00:03:06,460
Now there we go we get h l o.

49
00:03:06,720 --> 00:03:10,350
End of iterator and no error.

50
00:03:10,740 --> 00:03:14,460
So we're basically there just a couple of things that we could change.

51
00:03:14,460 --> 00:03:17,290
The first is that we can get rid of this of course.

52
00:03:17,290 --> 00:03:20,660
Next let's test it on a list.

53
00:03:20,700 --> 00:03:22,100
One two three four.

54
00:03:22,570 --> 00:03:23,170
OK.

55
00:03:24,920 --> 00:03:31,010
Still works because we're calling it her on the list gives us a list iterator and then we can just call

56
00:03:31,010 --> 00:03:31,900
next on that.

57
00:03:32,060 --> 00:03:35,490
The next change will make instead of just automatically printing.

58
00:03:35,660 --> 00:03:38,470
It would be more accurate or closer to a for loop.

59
00:03:38,480 --> 00:03:39,700
If we could pass in.

60
00:03:39,780 --> 00:03:41,390
OK I want to print each one.

61
00:03:41,570 --> 00:03:46,970
Or instead of print I want to sum each one or whatever.

62
00:03:47,000 --> 00:03:48,020
A function is.

63
00:03:48,180 --> 00:03:52,190
And to do that let's just say we pass in a funk here.

64
00:03:52,640 --> 00:03:53,320
OK.

65
00:03:53,630 --> 00:03:59,450
And then rather than printing we'll just try next iterator and let's save that to a variable.

66
00:03:59,450 --> 00:04:00,190
The result of it.

67
00:04:00,200 --> 00:04:00,820
Let's just call it.

68
00:04:00,860 --> 00:04:06,310
I ECOs next iterator or item or thing it goes next.

69
00:04:06,320 --> 00:04:12,730
Iterator and then we'll just add in or else and we'll just call Phunk with thing.

70
00:04:13,250 --> 00:04:13,910
OK.

71
00:04:14,180 --> 00:04:21,150
So hopefully this is making some sense walk through at once if we go with let's do this again with a

72
00:04:21,160 --> 00:04:26,700
string ELO Well OK so ELO Well iterable phunk is print.

73
00:04:26,840 --> 00:04:30,990
Iterator is going to be the string iterator for ELO well.

74
00:04:31,130 --> 00:04:33,490
So we call next on it the first time.

75
00:04:33,560 --> 00:04:39,270
That gives us l and that works a thing is equal to L so the it doesn't run.

76
00:04:39,380 --> 00:04:47,420
And instead we call phunk which is print and we pass an L So print L next time through we call next.

77
00:04:47,480 --> 00:04:49,910
Again this time we get 0.

78
00:04:50,180 --> 00:04:53,500
So then we call print oh so Prince o.

79
00:04:53,630 --> 00:04:56,100
One more time L next time through.

80
00:04:56,100 --> 00:04:58,440
However in the try next.

81
00:04:58,460 --> 00:05:04,220
Does not work out we get this error stop iteration so we hit this and we break out and that's it.

82
00:05:04,250 --> 00:05:05,200
That's the end of it.

83
00:05:05,540 --> 00:05:06,170
All right.

84
00:05:06,170 --> 00:05:08,830
So we could do things like instead of printing.

85
00:05:08,990 --> 00:05:12,170
Well let's just test that it works by the way and it does.

86
00:05:12,290 --> 00:05:15,710
We could define a function called Square for example.

87
00:05:15,710 --> 00:05:20,990
And it just takes a number in and let's just have it print x times x.

88
00:05:21,710 --> 00:05:32,440
And now if I call Elwha with print and then we'll do a list with one two three four five square.

89
00:05:32,630 --> 00:05:34,960
It's going to call square on each one of these items.

90
00:05:36,670 --> 00:05:40,750
That ELO well and then 1 4 9 16 25.

91
00:05:41,000 --> 00:05:44,420
So we have successfully written our version of a for loop.

92
00:05:44,510 --> 00:05:45,590
Very simple.

93
00:05:45,590 --> 00:05:47,620
It's called my fortress of function.

94
00:05:47,660 --> 00:05:52,730
Not quite as clean as the for loop syntax but still it's cool that we actually understand what's happening

95
00:05:52,730 --> 00:05:53,640
behind the scenes.

96
00:05:53,660 --> 00:06:00,280
The key things take away itor return to the iterator on an iterable object.

97
00:06:00,650 --> 00:06:07,220
Iterable iterable but they return iterators and we run this line then that iterator when we call next

98
00:06:07,220 --> 00:06:12,140
on it just return to the next item over and over and over until there isn't a next item.

99
00:06:12,140 --> 00:06:17,480
And it raises an error which we're catching here with Except And we're just breaking out.

100
00:06:17,870 --> 00:06:19,700
OK we're done.

101
00:06:19,730 --> 00:06:22,510
Please leave feedback or comments on this video.

102
00:06:22,520 --> 00:06:28,010
This is one that I wasn't sure if I should include or not it's not essential to doing what we already

103
00:06:28,010 --> 00:06:28,610
know how to do.

104
00:06:28,630 --> 00:06:30,930
In Python We already know how to use a for loop.

105
00:06:30,950 --> 00:06:33,030
This is just helping us understand how it works.

106
00:06:33,320 --> 00:06:35,440
But leave feedback if you like this sort of video.

107
00:06:35,480 --> 00:06:36,670
If I totally lost you.

108
00:06:36,680 --> 00:06:41,330
If you want to see more of this or less of this whatever you think I'd just like to read it I appreciate

109
00:06:41,330 --> 00:06:41,700
it.

110
00:06:41,780 --> 00:06:42,190
OK.

111
00:06:42,230 --> 00:06:47,990
Next up we're actually going to talk about how we can create custom iterators so that I could pass in

112
00:06:48,070 --> 00:06:53,180
like an instance of my card deck here instead of a list.

113
00:06:53,210 --> 00:06:54,080
So we'll see that next.
