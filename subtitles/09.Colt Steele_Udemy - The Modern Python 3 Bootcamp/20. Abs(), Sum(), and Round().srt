1
00:00:00,300 --> 00:00:01,140
Welcome back.

2
00:00:01,140 --> 00:00:07,170
We are pushing on with the built in functions only a couple left and this video contains three that

3
00:00:07,170 --> 00:00:09,270
are very short simple to talk about.

4
00:00:09,480 --> 00:00:13,620
And there are all kinds of mathy they have to do with numbers and the first of the three We'll talk

5
00:00:13,620 --> 00:00:16,560
about is called Abz stands for absolute value.

6
00:00:16,680 --> 00:00:20,850
If you're not familiar with absolute value I'm going to do a terrible job of explaining it.

7
00:00:20,850 --> 00:00:25,800
I don't remember the official mathematical definition but the absolute value of a positive number is

8
00:00:25,800 --> 00:00:30,280
itself the absolute value of a negative number is the positive number.

9
00:00:30,300 --> 00:00:34,590
So it's a way of just taking the numeric value without the negative sign.

10
00:00:34,770 --> 00:00:38,550
So negative 5 turns into five five stays as 5.

11
00:00:38,730 --> 00:00:40,410
So we just pass a number.

12
00:00:40,410 --> 00:00:45,990
Abs abs negative 5 gives us 5 abs 5 gives just 5.

13
00:00:45,990 --> 00:00:51,720
Quick example do abs of negative 23 give us 23.

14
00:00:51,720 --> 00:00:53,500
It also does work with floats.

15
00:00:53,670 --> 00:01:00,570
So I could do absolute value of three point 4 4 4 4 4 and it gives me 3 point 4 4 4 4 4.

16
00:01:00,720 --> 00:01:02,430
And I do the negative.

17
00:01:02,580 --> 00:01:04,170
It gives me the exact same result.

18
00:01:04,560 --> 00:01:06,820
And that's kind of it.

19
00:01:06,900 --> 00:01:10,560
You know it only works numbers and integers and floats.

20
00:01:10,590 --> 00:01:15,130
So if I tried to do a string it's not going to try and convert it to an int or float first.

21
00:01:15,360 --> 00:01:19,020
It just immediately tries it as it is does not like that.

22
00:01:19,360 --> 00:01:29,120
So you know for getting user input into String we could do a float of 20 or something like that.

23
00:01:29,880 --> 00:01:35,280
And then that will then convert it to a float from a string and then do absolute value as a side note.

24
00:01:35,280 --> 00:01:40,700
There is another method called Fab's which you have to import with math.

25
00:01:40,830 --> 00:01:42,450
Important Math.

26
00:01:42,660 --> 00:01:48,300
And we could run Mathcad Fab's which I think it just stands for float absolute value and it will do

27
00:01:48,300 --> 00:01:51,350
the exact same thing but it treats everything as a float first.

28
00:01:51,510 --> 00:01:55,030
So if you pass an int it converts converts it to a float.

29
00:01:55,130 --> 00:01:57,960
And so we get 4.00 instead of 4.

30
00:01:57,960 --> 00:01:59,540
Next up we have some.

31
00:01:59,670 --> 00:02:06,060
So also mathy all that it does is it will take an iterable a list a tuple whatever and it will take

32
00:02:06,060 --> 00:02:13,230
an optional start and it will just add all the elements together so the sum of everything in that iterable

33
00:02:13,410 --> 00:02:15,450
Plus the start.

34
00:02:15,450 --> 00:02:17,340
So I'll show you what the start means.

35
00:02:17,520 --> 00:02:18,300
But what's important.

36
00:02:18,300 --> 00:02:20,110
It goes from left to right.

37
00:02:20,400 --> 00:02:24,240
So it starts at the left side and keeps adding until it gets to the right side.

38
00:02:25,100 --> 00:02:27,610
Start by default is zero.

39
00:02:27,890 --> 00:02:29,360
So let me show you what I mean.

40
00:02:29,600 --> 00:02:31,880
Let's just try adding a simple list.

41
00:02:31,880 --> 00:02:33,520
We could do some of.

42
00:02:33,590 --> 00:02:34,950
One two three.

43
00:02:34,970 --> 00:02:36,080
Right.

44
00:02:36,080 --> 00:02:37,890
So that should give us 6.

45
00:02:37,900 --> 00:02:39,390
It goes from left to right.

46
00:02:39,410 --> 00:02:43,260
So the optional start that we can provide has to be a number.

47
00:02:43,370 --> 00:02:46,150
If you did something like 10 it will start at 10.

48
00:02:46,160 --> 00:02:49,510
And then add all of these numbers to 10.

49
00:02:49,640 --> 00:02:56,660
So it's a starting point and this should give us 16 as you can see or if we did negative 6 we'd get

50
00:02:56,660 --> 00:02:57,570
zero.

51
00:02:57,590 --> 00:02:58,490
So it starts there.

52
00:02:58,520 --> 00:03:01,410
Add 1 adds to adds 3.

53
00:03:01,460 --> 00:03:07,420
Other than that see can do two balls if we wanted to we could do floats in there.

54
00:03:07,630 --> 00:03:11,610
So let's do two and three point seven.

55
00:03:12,740 --> 00:03:15,110
And it returns a float even though one of them wasn't it.

56
00:03:15,110 --> 00:03:20,020
You can also do a set containing numbers like that one.

57
00:03:20,030 --> 00:03:29,510
Somewhat interesting thing if we try and some strings like a list of strings like high and there I just

58
00:03:29,510 --> 00:03:31,450
do it on its own.

59
00:03:31,490 --> 00:03:32,540
Well I need the quote.

60
00:03:32,840 --> 00:03:33,820
We're going to get an error.

61
00:03:33,920 --> 00:03:35,080
We're going to get an error no matter what.

62
00:03:35,090 --> 00:03:38,150
But the first one is it's going to try and start at zero.

63
00:03:38,210 --> 00:03:45,430
The integers zero and add it to a string and it gives us an error on two prototype plus int and string.

64
00:03:45,450 --> 00:03:48,660
It can't doesn't know what to do between the into the string.

65
00:03:48,710 --> 00:03:55,250
So if you actually provide your own start and instead I tell it to start with I don't know ELO Well

66
00:03:56,450 --> 00:04:00,980
you would think it could just add a well plus high plus there and give ELO Alhaj.

67
00:04:00,980 --> 00:04:02,430
There is one string.

68
00:04:02,750 --> 00:04:07,410
But instead it gives us this customary here that's in the source code.

69
00:04:07,490 --> 00:04:08,360
Some can't.

70
00:04:08,360 --> 00:04:11,510
Some strings use join sequence instead.

71
00:04:11,510 --> 00:04:12,820
We've already seen how to do that.

72
00:04:12,890 --> 00:04:14,910
Empty string join.

73
00:04:14,950 --> 00:04:23,810
Know so we can do the exact same thing where we just take this empty string join passing the list and

74
00:04:23,810 --> 00:04:24,600
we get high there.

75
00:04:24,770 --> 00:04:30,560
But I just think it's interesting that there's actually a note a custom thing in the source that tells

76
00:04:30,560 --> 00:04:31,760
you not to use some.

77
00:04:31,880 --> 00:04:36,680
And on the documentation you can see they actually have a note here too for some use cases they're a

78
00:04:36,680 --> 00:04:39,700
good alternative to something that fast fast.

79
00:04:39,730 --> 00:04:45,950
The preferred fast way to can catch a sequence of strings is by calling empty string but join to add

80
00:04:45,950 --> 00:04:48,630
floating point values with extended precision.

81
00:04:48,740 --> 00:04:55,670
So for a more precise way there's math in the math module a method called F sum just like we saw with

82
00:04:56,810 --> 00:05:00,500
Fab's f abs the value float absolute value.

83
00:05:00,540 --> 00:05:02,920
Anyway that's all there is to sum.

84
00:05:02,960 --> 00:05:09,920
Finally we have round so round we'll take a number and it will return a rounded version and we specify

85
00:05:10,160 --> 00:05:11,530
the number of digits.

86
00:05:11,580 --> 00:05:13,910
How how precise precisely what the round to be.

87
00:05:14,000 --> 00:05:18,890
How many decimal points should round two and by default it will return the nearest integer.

88
00:05:18,890 --> 00:05:21,880
If we don't specify the number of digits.

89
00:05:21,950 --> 00:05:24,600
So for example round ten point two.

90
00:05:24,890 --> 00:05:27,470
It just assumes to round to the nearest integer.

91
00:05:27,470 --> 00:05:31,370
So that doesn't mean it will floor it like integer division or something.

92
00:05:31,370 --> 00:05:33,500
It will round it appropriately.

93
00:05:33,650 --> 00:05:38,740
But if we specify two digits then it will give us one point to 1 in this example.

94
00:05:38,870 --> 00:05:42,510
So we can do round of 3.5.

95
00:05:42,970 --> 00:05:47,880
One two three four and let's round if we don't specify anything.

96
00:05:47,890 --> 00:05:50,280
It gives us four it rounds up.

97
00:05:50,540 --> 00:05:52,820
In this case to the nearest integer.

98
00:05:52,880 --> 00:06:00,910
But if I did two three digits I get three point five one two to this decimal place.

99
00:06:00,920 --> 00:06:01,370
What else.

100
00:06:01,370 --> 00:06:04,370
That's pretty much it with round you.

101
00:06:04,370 --> 00:06:07,400
If he manually specified none.

102
00:06:07,970 --> 00:06:09,290
It will also round to an integer.

103
00:06:09,290 --> 00:06:14,810
So by default if you don't specify or you actually pass the value on then it will round to the nearest

104
00:06:14,870 --> 00:06:15,680
integer.

105
00:06:15,980 --> 00:06:21,470
And that's kind of it I guess you should be aware of the fact that you know floats are only precise

106
00:06:21,680 --> 00:06:30,170
so far so if we had a massive float like 9 9 9 9 9 9 9 and you kept going.

107
00:06:30,170 --> 00:06:37,400
That's got to be past the largest float we can store and we try and round it to I don't know 15 decimal

108
00:06:37,400 --> 00:06:41,220
points it just runs half to 10.

109
00:06:41,250 --> 00:06:44,400
So at some point the precision slips just worth knowing about.

110
00:06:44,400 --> 00:06:49,280
But if you need something precise you're probably doing something crazy.

111
00:06:49,290 --> 00:06:52,340
I mean I don't even know what you would need to be that precise honestly.

112
00:06:52,540 --> 00:06:55,700
But if you were then you would also probably know a way around it.

113
00:06:55,710 --> 00:06:58,580
Or you have a supercomputer to help you or something.

114
00:06:58,780 --> 00:06:59,150
OK.

115
00:06:59,160 --> 00:07:03,450
So those are three built in functions that are I just lump them together as mathy.

116
00:07:03,450 --> 00:07:06,120
So we had absolute value abs some.

117
00:07:06,240 --> 00:07:09,940
And then round we have one more in the next video.

118
00:07:10,080 --> 00:07:12,850
And then we've covered pretty much all of the built in functions.
