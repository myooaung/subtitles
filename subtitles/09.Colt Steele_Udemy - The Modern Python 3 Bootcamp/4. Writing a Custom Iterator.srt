1
00:00:00,300 --> 00:00:01,780
Hello hello hello.

2
00:00:01,830 --> 00:00:07,520
So in the last video we saw how to define or kind of define a for loop a version of a for loop.

3
00:00:07,560 --> 00:00:11,500
We're going to go from the opposite direction now instead of working with iterable.

4
00:00:11,550 --> 00:00:17,760
In defining a for loop we're going to define our own iterable sash iterator like a Range class but we'll

5
00:00:17,760 --> 00:00:18,970
call it counter.

6
00:00:19,200 --> 00:00:19,800
OK.

7
00:00:20,220 --> 00:00:23,210
So imagine we have a counter class like this.

8
00:00:23,370 --> 00:00:33,180
And I want to be able to do something like for an encounter from 50 to 55 and then I want to be able

9
00:00:33,180 --> 00:00:40,790
to do print and that should give me 50 51 52 53.

10
00:00:40,800 --> 00:00:46,230
Basically the same thing that I'd get with a range but we're going to define our own class called counter

11
00:00:46,530 --> 00:00:52,500
encounter will take care of everything or return an iterator and the iterator will have a next will

12
00:00:52,500 --> 00:00:54,300
return something when next is called on it.

13
00:00:54,300 --> 00:00:58,790
So let's just get going before I stumble over my words anymore.

14
00:00:59,100 --> 00:01:06,360
First thing we'll do is just define a club or a G is really stumbled well defined innit.

15
00:01:06,370 --> 00:01:07,020
There you go.

16
00:01:07,260 --> 00:01:10,520
And fun read to find the counter will pass in a.

17
00:01:10,580 --> 00:01:20,320
What we need self and then let's just call it low and high like this and then we'll just set self-doubt

18
00:01:20,340 --> 00:01:24,780
low equals low self high equals high.

19
00:01:25,020 --> 00:01:25,880
OK.

20
00:01:26,520 --> 00:01:28,700
Now the very first thing I could show you.

21
00:01:29,040 --> 00:01:40,010
We have to define this death eater like this method and whatever I return in here when we call it her

22
00:01:40,140 --> 00:01:46,520
on a counter which is what this four will do is what will be returned and what needs to be an iterator.

23
00:01:46,530 --> 00:01:51,670
So let me just show you if I come into all this out right now and come at this out as well.

24
00:01:51,780 --> 00:01:58,120
If I tried to do her on counter like I make a new counter let's just call it C equals counters zero

25
00:01:58,140 --> 00:01:59,270
10.

26
00:01:59,290 --> 00:02:06,930
So I tried to do it her see it complaints to me counter object is not an iterable and it means that

27
00:02:06,930 --> 00:02:14,610
it remember something for something to be iterable has to respond to her and return an iterator.

28
00:02:14,610 --> 00:02:21,360
So if we define our hitter method here and we could start with something really simple simple and silly.

29
00:02:21,360 --> 00:02:29,700
Remember that her needs to return an iterator so we can just return's think dumb like a number or a

30
00:02:29,700 --> 00:02:37,910
string like hello but we could return it or hello because remember what this is here and we call it

31
00:02:37,920 --> 00:02:39,310
her on hello.

32
00:02:39,390 --> 00:02:40,290
It's a string.

33
00:02:40,530 --> 00:02:41,600
It's iterable.

34
00:02:41,610 --> 00:02:45,480
This returns the iterator string iterator like we saw in the last couple of videos.

35
00:02:45,600 --> 00:02:49,540
And now if I try it we shouldn't get an error and we don't.

36
00:02:49,560 --> 00:02:56,490
So I actually have enough now to do 4 x in counters zero to 10.

37
00:02:56,520 --> 00:03:02,460
It's not going to do what we want but I could print X and what will happen here is that counter the

38
00:03:02,460 --> 00:03:09,440
for loop is going to call it or on counter when we call it her on counter it calls this.

39
00:03:09,660 --> 00:03:17,100
So this is one of those Dunner methods like length we call Lenn with this the non-dancer function but

40
00:03:17,130 --> 00:03:26,340
behind the scenes it's calling the Dunder Lenn that is defined on a list or on whatever a deck or card.

41
00:03:26,370 --> 00:03:29,510
Same thing here so we define Dunder itor.

42
00:03:29,910 --> 00:03:38,160
And then when we call it or on a counter it's going to it or behind the scenes calls Dondre it's very

43
00:03:38,160 --> 00:03:38,960
confusing.

44
00:03:39,180 --> 00:03:40,430
Ok so here.

45
00:03:40,520 --> 00:03:46,520
What we've done but it just returns the string iterator hello So it's not going to do what we want.

46
00:03:46,530 --> 00:03:48,150
Second to give us numbers from 0 and 10.

47
00:03:48,150 --> 00:03:51,950
It gives us a low but it's an iterator.

48
00:03:52,050 --> 00:03:53,190
It's working.

49
00:03:53,190 --> 00:03:57,930
What we want to do instead is actually return self.

50
00:03:58,200 --> 00:04:01,580
But the problem is if I if I were self right now.

51
00:04:01,740 --> 00:04:05,010
I mean you'll see it's going to try and call next on that.

52
00:04:05,010 --> 00:04:08,920
There's a problem because it's not an iterator just yet.

53
00:04:09,030 --> 00:04:15,570
So we returned to self basically when you call it or on counter which isn't an iterator it just returns

54
00:04:15,570 --> 00:04:17,340
counter which isn't an iterator.

55
00:04:17,460 --> 00:04:19,020
So that's not going to work.

56
00:04:19,020 --> 00:04:23,050
The next thing we have to do is define the behavior of next.

57
00:04:23,250 --> 00:04:24,230
And this is Dunder.

58
00:04:24,240 --> 00:04:27,890
Next Next we call like this.

59
00:04:27,900 --> 00:04:34,020
Like in our previous example here but when we do this next on an iterator it is calling that iterators

60
00:04:34,290 --> 00:04:36,170
dot Dondre next.

61
00:04:36,180 --> 00:04:45,400
So we have to add donder next self and we could do something really dumb like just have it return.

62
00:04:45,930 --> 00:04:54,060
I don't know one over and over and over and if I actually read this right now I believe this would be

63
00:04:54,330 --> 00:04:59,290
an infinite thing because we're not stopping at any point every time you call.

64
00:04:59,290 --> 00:05:01,750
Next we get 1 1 1 1 1 1.

65
00:05:01,930 --> 00:05:03,160
If I did that.

66
00:05:03,300 --> 00:05:04,170
There we go.

67
00:05:04,370 --> 00:05:07,420
OK stop this before I ruined my computer.

68
00:05:07,640 --> 00:05:12,890
So we now have an infinite iterator which That's actually a thing.

69
00:05:13,220 --> 00:05:14,790
But that's not what we want here.

70
00:05:14,960 --> 00:05:15,960
What we want.

71
00:05:16,100 --> 00:05:21,010
We could just return one over and over and over but we want to return starting with low.

72
00:05:21,350 --> 00:05:26,170
And we want to keep adding one in and one over and over and over until we hit high.

73
00:05:26,180 --> 00:05:31,200
So rather than calling this low we'll call it current and I'm going to set it to be low.

74
00:05:31,430 --> 00:05:34,290
So in this case zero then what we want to do.

75
00:05:34,580 --> 00:05:41,680
Well first we should check if self datt current is less than self-doubt.

76
00:05:41,690 --> 00:05:49,610
Hi if if that's true this is where we're going to basically return the number and add 1.

77
00:05:49,680 --> 00:05:59,760
So we would do something like equals self-direct current and then add one self current plus equals one

78
00:06:00,180 --> 00:06:01,460
and then return home.

79
00:06:01,540 --> 00:06:05,140
We need to do it in this order because if we return first it stops the execution.

80
00:06:05,160 --> 00:06:11,040
And so if her turn was appear we would never add one to current and be stuck in that infinite loop.

81
00:06:11,040 --> 00:06:13,220
So the first time through I get zero.

82
00:06:13,650 --> 00:06:16,470
And then it adds one to current.

83
00:06:16,470 --> 00:06:17,310
So current is one.

84
00:06:17,310 --> 00:06:22,830
But then we return to your next time through normal self-talk current some numbers one self-taught current

85
00:06:22,830 --> 00:06:23,570
is now two.

86
00:06:23,650 --> 00:06:26,970
We return one and we keep going until we hit the end.

87
00:06:26,970 --> 00:06:30,400
We're self-taught current is no longer less than the high number.

88
00:06:30,510 --> 00:06:38,120
If that's if that's the case we just want to raise stop iteration just like this.

89
00:06:38,650 --> 00:06:40,560
And that's actually all we should have to do.

90
00:06:40,870 --> 00:06:41,450
OK.

91
00:06:41,740 --> 00:06:43,050
So now what happens.

92
00:06:43,210 --> 00:06:44,090
Let's walk through this.

93
00:06:44,170 --> 00:06:52,240
When we call radio when we have four X encounters year to 10 the for loop is going to call her on this

94
00:06:52,330 --> 00:06:55,590
instance of counter and it returns self.

95
00:06:55,660 --> 00:06:59,460
Earlier we had it return like add it or string iterator or something.

96
00:06:59,500 --> 00:07:06,430
But now this self is actually set up with the next method is able to call next over and over and over

97
00:07:06,510 --> 00:07:09,500
until next your turn to stop iteration.

98
00:07:09,520 --> 00:07:17,500
So if we check it out now there we go 0 to 9 and we could play around with this change it instead of

99
00:07:17,500 --> 00:07:17,890
zero.

100
00:07:17,890 --> 00:07:23,300
Let's go from 50 to 70 also.

101
00:07:23,680 --> 00:07:28,300
So we're not quite at the point of range we don't have a step or we could do negative 1 or something

102
00:07:28,600 --> 00:07:30,770
but that wouldn't be that much work to implement.

103
00:07:30,880 --> 00:07:32,670
Why you would do this exactly.

104
00:07:32,680 --> 00:07:37,800
I'm not encouraging that you need to rewrite range or something this is more to show you that it's possible

105
00:07:38,000 --> 00:07:39,140
in the next video though.

106
00:07:39,160 --> 00:07:41,370
I am going to show you how we can take a deck class.

107
00:07:41,380 --> 00:07:43,770
We wrote a while ago and make it iterable.
