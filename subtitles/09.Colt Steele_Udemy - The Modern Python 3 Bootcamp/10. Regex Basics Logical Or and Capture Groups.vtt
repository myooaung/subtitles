WEBVTT
1
00:00:00.110 --> 00:00:01.190
Hey we'll welcome back.

2
00:00:01.350 --> 00:00:08.340
So this video is just going to cover one character which is the logical or we use the pipe character

3
00:00:08.340 --> 00:00:12.900
that most programming languages use for or it's above the return key.

4
00:00:13.020 --> 00:00:17.450
I have to hit shift and then the ones that the backslash key to get it.

5
00:00:17.640 --> 00:00:21.940
And it allows us to add sort of multiple options for things.

6
00:00:21.990 --> 00:00:30.000
So here's an example where this will match either Mr or Mrs or Ms or going back to our telephone example

7
00:00:30.050 --> 00:00:31.260
or our phone number.

8
00:00:31.740 --> 00:00:38.150
Here's two different ways of writing the same phone number one has parens around the area code and another

9
00:00:38.190 --> 00:00:39.300
doesn't.

10
00:00:39.300 --> 00:00:45.600
Using what we have written so far where we match three digits spaced three digit space four digits that

11
00:00:45.600 --> 00:00:48.160
only matches the first one not the second one.

12
00:00:48.390 --> 00:00:54.480
If I wanted to optional the match so instead of just three digits it's a parentheses.

13
00:00:54.540 --> 00:00:59.690
And then three digits and then the closing paren first we have to just discuss how we match Prendes

14
00:00:59.700 --> 00:01:00.610
in the first place.

15
00:01:00.780 --> 00:01:02.480
So I'm going to copy this and get.

16
00:01:02.530 --> 00:01:06.350
Get rid of it for a second if I just try and do a Pirenne.

17
00:01:06.660 --> 00:01:08.250
It doesn't match.

18
00:01:08.250 --> 00:01:11.850
Just like if I tried to do a dot it wouldn't matter if there's a dot in here.

19
00:01:12.000 --> 00:01:18.660
Pirenne has its own meaning we'll see in a moment what we want is backslash present and that matches

20
00:01:18.660 --> 00:01:19.570
that opening.

21
00:01:19.590 --> 00:01:23.190
And then we have backslash closing parentheses.

22
00:01:23.820 --> 00:01:28.650
And then the second to match anything because we don't have the if they were in a row they would be

23
00:01:28.650 --> 00:01:29.110
matched.

24
00:01:29.130 --> 00:01:31.930
But inside we have three digits.

25
00:01:32.430 --> 00:01:33.990
That's such a mess to look at.

26
00:01:34.200 --> 00:01:36.130
You can see so this is the first print the see.

27
00:01:36.180 --> 00:01:42.490
Then we want three digits so backslash D three times and that matches this.

28
00:01:42.560 --> 00:01:44.340
That first little group.

29
00:01:44.340 --> 00:01:46.890
So now comes the logical OR.

30
00:01:46.890 --> 00:01:56.800
So we'll start with this for which is the pipe there will do three digits like that.

31
00:01:57.210 --> 00:02:05.180
And now you can see we're matching three digits with parens around it or three digits period which is

32
00:02:05.180 --> 00:02:12.050
also giving us these other ones so we could adapt this a bit of space space and then we have three digits

33
00:02:12.050 --> 00:02:14.630
again.

34
00:02:15.100 --> 00:02:20.530
And then a space and then four digits and you might think that this should work.

35
00:02:20.530 --> 00:02:28.050
But what's actually happening is that it is going to match this the left side or this entire right side.

36
00:02:28.770 --> 00:02:33.600
So that's not what we want the or part should only apply to the beginning and then the rest should be

37
00:02:33.600 --> 00:02:34.530
the same.

38
00:02:34.950 --> 00:02:41.580
So we add parentheses not with the backslash we're not escaping them we just had regular parens around

39
00:02:41.840 --> 00:02:45.600
the part that we're choosing between the two options.

40
00:02:45.600 --> 00:02:48.220
It's a nightmare to look at but you can see here.

41
00:02:48.420 --> 00:02:49.740
Zoom way in.

42
00:02:49.920 --> 00:02:54.230
What we have is this first group right here.

43
00:02:54.420 --> 00:03:00.860
This is saying you're either going to have three digits with trends around it or just three plain digits.

44
00:03:02.120 --> 00:03:07.430
Pick one of those then there has to be a space then three digits then a space then four digits.

45
00:03:07.550 --> 00:03:09.200
So it's a lot to look at.

46
00:03:09.200 --> 00:03:15.050
It's very ugly but it's very useful trying to do this on your own without projects and Python would

47
00:03:15.050 --> 00:03:16.140
not be fun.

48
00:03:16.520 --> 00:03:18.130
And now we match both numbers.

49
00:03:18.170 --> 00:03:19.620
Those parents are optional.

50
00:03:19.880 --> 00:03:20.210
OK.

51
00:03:20.240 --> 00:03:21.490
I fast forwarded a bit.

52
00:03:21.490 --> 00:03:26.260
I have a new example and we're going to talk more about parents using this example.

53
00:03:26.600 --> 00:03:27.030
OK.

54
00:03:27.200 --> 00:03:32.900
So we have two names here and I want to write a regular expression that will match a name that starts

55
00:03:32.900 --> 00:03:36.560
with what you call this a prefix a title.

56
00:03:36.890 --> 00:03:40.010
I don't know as a start with Mr. or Mrs. or ms.

57
00:03:40.010 --> 00:03:41.880
We have Mr. Luca.

58
00:03:41.980 --> 00:03:43.930
I think it's quite a guat a NINO.

59
00:03:44.030 --> 00:03:44.510
I don't know.

60
00:03:44.630 --> 00:03:52.250
It sounds some Spanish when I say it's Italian though and then I don't know if she's a Miss or Mrs.

61
00:03:52.370 --> 00:03:53.910
Tilda Swinton doesn't matter.

62
00:03:54.200 --> 00:03:59.240
Let's go with Mrs. for now and what we want to do is just match that pattern.

63
00:03:59.420 --> 00:04:01.460
So that's easy enough.

64
00:04:01.460 --> 00:04:09.770
We know we need to start using logical or we're going to select Mr. Period and it looks like it's working

65
00:04:10.140 --> 00:04:10.760
here.

66
00:04:10.790 --> 00:04:17.930
We're getting Mr. Period but down here it's doing m r s and remember period has its own meaning we want

67
00:04:18.170 --> 00:04:21.230
backslash period to actually match it period.

68
00:04:21.510 --> 00:04:22.120
OK.

69
00:04:23.250 --> 00:04:25.230
Or will do.

70
00:04:25.490 --> 00:04:29.090
Mrs. backslash period.

71
00:04:29.670 --> 00:04:35.910
And now we're matching either of those but if we want to continue on with the rest of the string where

72
00:04:35.990 --> 00:04:42.310
we're going to have you know a letters it's followed by a space followed by more letters.

73
00:04:42.520 --> 00:04:47.650
If I just do it like this right now let's see that would be a way to capitalize the lowercase the that's

74
00:04:47.650 --> 00:04:50.590
the easiest way to select the letters.

75
00:04:50.620 --> 00:04:52.950
This is sort of working but not quite.

76
00:04:53.050 --> 00:04:59.420
Because this same problem we saw earlier in selecting Mr. and that's it or Mrs..

77
00:04:59.440 --> 00:05:01.060
Followed by letters.

78
00:05:01.120 --> 00:05:03.900
So we need parens right here.

79
00:05:04.090 --> 00:05:11.230
So that will select Mr. Period or Mrs. period then a space and then any number of letters.

80
00:05:11.320 --> 00:05:17.210
So there's not really an easy way to do just the letters because if we do word character slash or backslash

81
00:05:17.230 --> 00:05:20.160
w that includes underscores we don't want that.

82
00:05:20.170 --> 00:05:22.590
So capital letters lower case letters.

83
00:05:22.690 --> 00:05:27.400
And if you're working in a different language or different alphabet you could add those characters in

84
00:05:27.400 --> 00:05:29.260
here manually.

85
00:05:29.380 --> 00:05:32.130
Then we have a space and then just the same thing.

86
00:05:32.520 --> 00:05:40.060
Eight is the A to Z repeated at least one time as many as one or more.

87
00:05:40.500 --> 00:05:48.450
OK so this is working great and we're selecting this prefix whatever we call it optionally or not optional.

88
00:05:48.460 --> 00:05:51.010
It has to be there but it's either Mr. or Mrs..

89
00:05:51.040 --> 00:05:54.130
Then followed by first name space last name.

90
00:05:54.480 --> 00:05:58.730
What I wanted to show you is that we can add parens around this.

91
00:05:58.750 --> 00:06:02.490
The second thing the first and last name to differentiate it.

92
00:06:02.590 --> 00:06:07.910
It's not going to make a difference to what matches the entire thing is still a match.

93
00:06:07.960 --> 00:06:12.220
What we've done is actually group things together so that there's now two components to a match.

94
00:06:12.280 --> 00:06:17.860
And if you look at match one versus match to each thing each match has two pieces.

95
00:06:17.860 --> 00:06:24.630
There's Mr. then Luca got a name and then match to his missus till the Swinton.

96
00:06:24.850 --> 00:06:29.310
This is very useful to group things together like this so it doesn't make a difference.

97
00:06:29.380 --> 00:06:31.160
We're still matching the whole thing.

98
00:06:31.450 --> 00:06:35.930
But those parents regular parents not a scaped parents regular parents.

99
00:06:35.940 --> 00:06:40.380
It's our way of signifying that this content is a group.

100
00:06:40.720 --> 00:06:47.950
And then in Python once we get there when I run this code and I use this rejects on a given string my

101
00:06:47.950 --> 00:06:50.410
results will come to me in two parts.

102
00:06:50.410 --> 00:06:53.170
Each result if there's more than one like there are here.

103
00:06:53.170 --> 00:07:01.240
Each one will have Mr. or Mrs. and its own group and then first and last name with a space between is

104
00:07:01.390 --> 00:07:02.650
a third component.

105
00:07:02.950 --> 00:07:06.420
So you can also do this if I wanted to get the first name separate

106
00:07:10.180 --> 00:07:11.360
and if you look at the results I get.

107
00:07:11.360 --> 00:07:18.940
Now we have Mr then Luca is seperate then Grada Nino but it's still all has to be there just to be clear.

108
00:07:19.040 --> 00:07:22.310
I can't just have Mr here.

109
00:07:22.760 --> 00:07:24.470
It's not matched.

110
00:07:24.470 --> 00:07:25.900
Everything has to be there.

111
00:07:26.330 --> 00:07:27.080
OK.

112
00:07:27.710 --> 00:07:30.550
So that's the utility of Perrin's right now.

113
00:07:30.560 --> 00:07:31.430
It doesn't seem that great.

114
00:07:31.430 --> 00:07:37.340
You know we just see them here shortly in this section when we actually write Python code using regular

115
00:07:37.340 --> 00:07:43.640
expressions we use parens all the time because it's a way of altering the results that we get back signifying

116
00:07:43.640 --> 00:07:49.080
that we won first and last to be separate so that you know whatever we're doing with them if we want

117
00:07:49.160 --> 00:07:53.150
to save them into a database where we have a first column and a last column.

118
00:07:53.150 --> 00:07:56.690
We don't have to manually take this and split it ourselves.

119
00:07:56.780 --> 00:08:02.960
We can use a regular expression to get the three different components back or if we had more matching

120
00:08:02.960 --> 00:08:03.560
you or else.

121
00:08:03.560 --> 00:08:04.630
That's a really common one.

122
00:08:04.700 --> 00:08:08.870
By the way if you feel like you get this just skip I'm just going to show another example but it's not

123
00:08:08.870 --> 00:08:10.160
going to be anything brand new.

124
00:08:10.340 --> 00:08:18.740
Let's say that we have a couple of you or else we have to keep yes we have an HTP let's go with Google

125
00:08:18.740 --> 00:08:26.500
duck come something like that gets to you or else let's say that I want to match you a pattern.

126
00:08:26.630 --> 00:08:36.720
To do that I'm going to start by see I want HTP and then we'll have s is optional then you have colon

127
00:08:36.870 --> 00:08:41.270
slash slash like that that's matching that part.

128
00:08:41.610 --> 00:08:45.060
And then we have the rest of the domain so that could be.

129
00:08:45.570 --> 00:08:47.700
I can't remember exactly what characters are allowed.

130
00:08:47.700 --> 00:08:52.950
Let's just say it's I think it's let's just say it's letters for now.

131
00:08:54.620 --> 00:08:59.480
And underscores and dashes and can't have anything.

132
00:08:59.480 --> 00:09:01.190
Well let's just say that's it.

133
00:09:01.340 --> 00:09:06.050
I think there are more characters I can't remember exactly what can be in a you are up followed by a

134
00:09:06.060 --> 00:09:07.050
plus.

135
00:09:07.370 --> 00:09:14.390
And then we have the dot which you need to escape backslash dot followed by and let's just say this

136
00:09:14.390 --> 00:09:15.380
is the same thing.

137
00:09:16.240 --> 00:09:18.400
It's just not exactly accurate.

138
00:09:18.400 --> 00:09:22.710
Let's just say any letters more than one butter.

139
00:09:23.090 --> 00:09:26.730
And I didn't really say at a dot com in there twice.

140
00:09:26.740 --> 00:09:27.970
All right so this works.

141
00:09:27.970 --> 00:09:33.320
But what we could do is add a group using parentheses around.

142
00:09:33.430 --> 00:09:40.360
Let's say we only want the domain name itself or let's do everything after that HEG PSU that HTP colon

143
00:09:40.360 --> 00:09:42.520
slash slash everything after here.

144
00:09:42.700 --> 00:09:49.780
I just put parentheses after that and Rapide in parens and now the matches that we're getting the parts

145
00:09:49.780 --> 00:09:54.910
that in Python when we run this code and we matched against a string whatever we get back we'll have

146
00:09:54.910 --> 00:09:56.250
to start with this.

147
00:09:56.560 --> 00:10:03.190
But what we actually get back itself will look like this pipettes that order Google dot com so we can

148
00:10:03.190 --> 00:10:09.460
still match a pattern but then we can break it into chunks and get the parts we want and I can do the

149
00:10:09.460 --> 00:10:14.080
same thing around here and put parens in that would just give me a separate group that contains If it's

150
00:10:14.080 --> 00:10:17.570
HTP or HTP they are separated out.

151
00:10:17.740 --> 00:10:19.270
So I could do something with them.

152
00:10:19.560 --> 00:10:19.990
OK.

153
00:10:20.350 --> 00:10:23.040
So I know it's kind of contrived and we're not doing anything with it.

154
00:10:23.140 --> 00:10:25.040
But shortly it will make a lot more sense.

155
00:10:25.030 --> 00:10:27.660
We'll be a lot more useful once they're actually working in Python.

156
00:10:27.670 --> 00:10:28.720
So that's coming up next.
