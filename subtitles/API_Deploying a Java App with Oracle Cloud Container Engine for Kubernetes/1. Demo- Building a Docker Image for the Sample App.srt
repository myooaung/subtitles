1
00:00:00,000 --> 00:00:00,517
Hi.

2
00:00:00,517 --> 00:00:02,583
This is Craig Golightly,

3
00:00:02,583 --> 00:00:07,404
and welcome to Pushing a Docker Image to the Oracle

4
00:00:07,404 --> 00:00:09,811
Cloud Infrastructure Registry.

5
00:00:09,811 --> 00:00:12,172
We're going to review the sample application that is

6
00:00:12,172 --> 00:00:15,683
provided with this course so you understand how to build a

7
00:00:15,683 --> 00:00:17,190
Docker image of the sample app,

8
00:00:17,190 --> 00:00:20,277
which will help you quickly see the process from start to finish.

9
00:00:20,277 --> 00:00:25,409
We'll create a repository in your Oracle Cloud Infrastructure Registry,

10
00:00:25,409 --> 00:00:28,421
OCIR, and push the Docker image to that repository.

11
00:00:28,421 --> 00:00:31,465
This will set up everything for the next module where you will

12
00:00:31,465 --> 00:00:35,971
deploy the image to your Kubernetes cluster.

13
00:00:35,971 --> 00:00:39,510
Let's download the run the sample app so that you can see what to expect.

14
00:00:39,510 --> 00:00:43,347
We'll build the Docker image with the app using the provided Docker file,

15
00:00:43,347 --> 00:00:46,711
then run a container locally so you can see what it does before

16
00:00:46,711 --> 00:00:49,330
you deploy it to your Kubernetes cluster.

17
00:00:49,330 --> 00:00:53,239
The demo.zip file contains everything you'll need to create a

18
00:00:53,239 --> 00:00:56,636
Docker image for the sample application.

19
00:00:56,636 --> 00:00:59,674
The demo application is a Spring Boot app.

20
00:00:59,674 --> 00:01:04,423
It's been packaged as a fat jar, which contains an embedded application server.

21
00:01:04,423 --> 00:01:07,337
This simplifies the Docker image setup as our main focus is

22
00:01:07,337 --> 00:01:10,524
how to deploy to the Kubernetes cluster.

23
00:01:10,524 --> 00:01:12,411
You'll find two versions of the application.

24
00:01:12,411 --> 00:01:16,049
This will allow you to see a change to the app and how

25
00:01:16,049 --> 00:01:18,614
that can be updated in your cluster.

26
00:01:18,614 --> 00:01:20,300
The demo.yaml will be used for the deployment,

27
00:01:20,300 --> 00:01:24,365
and the Docker file will be used when we create the Docker image.

28
00:01:24,365 --> 00:01:27,302
You can build the Docker images and deploy to your

29
00:01:27,302 --> 00:01:29,264
Kubernetes cluster without building anything,

30
00:01:29,264 --> 00:01:32,465
but I've included the source and pom file if you'd like

31
00:01:32,465 --> 00:01:34,890
to modify it and rebuild it yourself.

32
00:01:34,890 --> 00:01:40,880
To build the application, you can simply run mvn clean install.

33
00:01:40,880 --> 00:01:46,000
Based on the pom, this will build the project and produce the fat jar.

34
00:01:46,000 --> 00:01:48,130
You'll notice a new target directory.

35
00:01:48,130 --> 00:01:52,888
This is where the jar file is placed by the build.

36
00:01:52,888 --> 00:01:55,238
As you can see, this is a very simple rest service.

37
00:01:55,238 --> 00:02:00,200
Version 1 of the application returns Hello from application and a counter.

38
00:02:00,200 --> 00:02:03,936
This is purely for demo purposes to see how the requests are

39
00:02:03,936 --> 00:02:07,211
handled by different instances of the application running on

40
00:02:07,211 --> 00:02:09,941
different pods in Kubernetes.

41
00:02:09,941 --> 00:02:14,012
Version 2 of the application says Goodbye from application,

42
00:02:14,012 --> 00:02:15,319
plus the same counter.

43
00:02:15,319 --> 00:02:20,920
To change the name of the jar file, simply change the value for version.

44
00:02:20,920 --> 00:02:23,450
Let's start up the application so you can see what it does.

45
00:02:23,450 --> 00:02:28,271
Navigate to the deploy directory, then run the version that you would like.

46
00:02:28,271 --> 00:02:31,468
I'll run version 1.0 first.

47
00:02:31,468 --> 00:02:35,758
The command is java -jar and the name of the jar.

48
00:02:35,758 --> 00:02:41,515
With the application running, we can check port 8080 on localhost.

49
00:02:41,515 --> 00:02:45,277
Here is the message from the application.

50
00:02:45,277 --> 00:02:49,922
If I refresh, you can see the counter incrementing.

51
00:02:49,922 --> 00:02:55,002
We'll stop version 1.0, then start version 2.0.

52
00:02:55,002 --> 00:02:55,519
When I refresh,

53
00:02:55,519 --> 00:03:00,234
we see that a different message is sent for this version of the application.

54
00:03:00,234 --> 00:03:02,254
This will help us see when we make a change to the

55
00:03:02,254 --> 00:03:04,935
application and redeploy it to the Kubernetes cluster that

56
00:03:04,935 --> 00:03:08,161
the new image is indeed what is deployed.

57
00:03:08,161 --> 00:03:10,820
Now that you see what the application does,

58
00:03:10,820 --> 00:03:13,473
let's take a look at the Docker file.

59
00:03:13,473 --> 00:03:17,120
This will simply use an open jdk as the base,

60
00:03:17,120 --> 00:03:21,759
copy the jar for the demo app, and name it app.jar,

61
00:03:21,759 --> 00:03:24,376
then start it up.

62
00:03:24,376 --> 00:03:27,259
Let's build an image using the Docker file.

63
00:03:27,259 --> 00:03:30,741
Right now I have no images on my local machine.

64
00:03:30,741 --> 00:03:32,148
I'll run a Docker build.

65
00:03:32,148 --> 00:03:35,220
Now we can see the image that was just built.

66
00:03:35,220 --> 00:03:38,477
Note the image id, as you'll need this later.

67
00:03:38,477 --> 00:03:41,716
Let's run this Docker image in a container.

68
00:03:41,716 --> 00:03:49,708
We'll map port 8080, then give the image id of what we just built.

69
00:03:49,708 --> 00:03:51,321
The application is up.

70
00:03:51,321 --> 00:03:58,000
I'm running this on a cloud machine so I'll hit the URL, and here we can see the message from the application.

