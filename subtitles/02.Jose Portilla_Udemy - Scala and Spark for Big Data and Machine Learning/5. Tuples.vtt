WEBVTT
1
00:00:05.320 --> 00:00:08.650
Hello everyone and welcome to lecture on tuples.

2
00:00:08.650 --> 00:00:14.740
Tuples are going to allow us to hold an ordered sequence of values of multiple data types in the next

3
00:00:14.740 --> 00:00:15.850
section of the course.

4
00:00:15.910 --> 00:00:19.840
We're going to be covering a lot more as far as collection type objects.

5
00:00:19.840 --> 00:00:22.450
But for now I just wanted to know about tuples.

6
00:00:22.570 --> 00:00:25.440
So let's go ahead and jump to the spark shell to get started.

7
00:00:25.630 --> 00:00:30.760
OK so here I am at the sparks shell in order to create a tuple it's actually quite simple.

8
00:00:30.940 --> 00:00:36.450
You just use parentheses and then objects that you want to place separated by commas.

9
00:00:36.460 --> 00:00:43.330
So for example here I've created the tuple that contains an integer a double and then a string.

10
00:00:43.330 --> 00:00:47.510
Now we can see here that Skala will actually tell you what type is.

11
00:00:47.560 --> 00:00:48.870
Each index point.

12
00:00:49.180 --> 00:00:57.640
So I can actually create a value called my underscore TUPE is equal to and then it's go in and say one

13
00:00:57.730 --> 00:00:59.420
to put in a string.

14
00:00:59.440 --> 00:01:00.670
Hello again.

15
00:01:00.670 --> 00:01:02.110
Let's go ahead and put in a double.

16
00:01:02.110 --> 00:01:05.430
Say twenty three point two and we can actually even put in a boolean value.

17
00:01:05.470 --> 00:01:06.730
This is true.

18
00:01:06.730 --> 00:01:10.730
And again scale is going to report back the actual tuple in the actual data types.

19
00:01:10.750 --> 00:01:14.580
Each index you should also note that tuples can be nested.

20
00:01:14.710 --> 00:01:22.170
So for example I can say three comma one and then a comma in put another tuple such as.

21
00:01:22.190 --> 00:01:26.860
To come a theory close and make sure the parentheses match up.

22
00:01:26.900 --> 00:01:30.240
And here we can see a nested tuple inside of another.

23
00:01:30.310 --> 00:01:33.260
That's where accessing elements within a tuple.

24
00:01:33.260 --> 00:01:37.690
The notation is a little tricky because indexing starts at 1.

25
00:01:37.790 --> 00:01:41.850
But basically what you end up doing is a dot underscore in notation.

26
00:01:41.870 --> 00:01:43.530
Let me going to show you what I mean by that.

27
00:01:43.670 --> 00:01:48.930
You can go ahead and same my TUPE from last time.

28
00:01:49.180 --> 00:01:51.150
And let's try to actually grab for instance.

29
00:01:51.150 --> 00:01:51.750
Hello.

30
00:01:51.750 --> 00:01:59.620
So you say my underscore to dot underscore and then the actual index of the value want.

31
00:01:59.670 --> 00:02:02.120
In this case remember it starts at 1.

32
00:02:02.340 --> 00:02:05.280
So will go ahead and input three nor It's a return.

33
00:02:05.280 --> 00:02:06.050
Hello.

34
00:02:06.390 --> 00:02:11.600
So for instance if you wanted to grab the boolean value true that occurs at 1 2 3 4 5.

35
00:02:11.610 --> 00:02:17.140
So I'll say my underscore thoughts underscore and put in 5 there.

36
00:02:17.250 --> 00:02:22.140
So this notation is a little strange which is why in the next section we're going to cover other collection

37
00:02:22.140 --> 00:02:25.620
type objects that are a little more intuitive to work with.

38
00:02:25.810 --> 00:02:26.310
OK.

39
00:02:26.460 --> 00:02:29.400
So that's really all you need to know as far as the basics of tuples.

40
00:02:29.400 --> 00:02:33.600
Just remember that there are an ordered sequence of values that can hold multiple data types.

41
00:02:33.600 --> 00:02:35.440
Thanks everyone and I'll see at the next lecture.
