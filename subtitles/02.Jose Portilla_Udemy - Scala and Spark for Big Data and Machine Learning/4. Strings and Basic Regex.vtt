WEBVTT
1
00:00:05.090 --> 00:00:09.400
Hello everyone and welcome to the strings and regular expressions lecture.

2
00:00:09.440 --> 00:00:12.350
Let's go ahead and jump to the sparks shell to get started.

3
00:00:13.310 --> 00:00:18.800
OK I've already started the sparks shell and I have my Skala interpreter open now something I want to

4
00:00:18.800 --> 00:00:24.800
know here is we're just going to go over the basics of printing a string inserting objects into a printed

5
00:00:24.800 --> 00:00:27.590
out string and some basic regular expressions.

6
00:00:27.590 --> 00:00:32.180
There's a lot of methods that are available for strings and it's going to be unrealistic to go through

7
00:00:32.270 --> 00:00:34.760
all of them but we'll share the important ones.

8
00:00:34.760 --> 00:00:37.380
First off let's talk about just printing a string.

9
00:00:37.550 --> 00:00:44.980
You can use the print Ellen for prints line function and then passen either the object or variable name

10
00:00:45.070 --> 00:00:50.590
or the string itself and strings will be using double quotes so we can say print line we say hello.

11
00:00:50.980 --> 00:00:57.180
But notice here in Scala if you use a single quote you'll end up getting an error or say unclose character

12
00:00:57.180 --> 00:00:57.580
literal.

13
00:00:57.590 --> 00:01:01.890
So make sure you're using double quotes and Skala when you're defining strings.

14
00:01:01.890 --> 00:01:04.610
Now let's talk about just concatenating strings together.

15
00:01:04.680 --> 00:01:07.020
You can do that just by using a plus sign.

16
00:01:07.020 --> 00:01:15.950
So for instance I'm going to go ahead and say thou farewell is equal to and I'll go ahead and say good.

17
00:01:16.250 --> 00:01:18.670
Plus bye.

18
00:01:19.040 --> 00:01:21.950
And that's going to go ahead and concatenate that string together.

19
00:01:22.100 --> 00:01:28.400
So I could have also just put this straight into the interpreter itself so good string plus by and it

20
00:01:28.400 --> 00:01:30.270
says string equals goodbye.

21
00:01:30.490 --> 00:01:35.150
OK so this string concatenation and you can actually do the same thing for repetition of a plus sign

22
00:01:35.150 --> 00:01:36.830
it's a multiplication sign.

23
00:01:36.830 --> 00:01:45.600
So I can say something like that's Asterix 5 is going to say dance dance dance dance dance etc..

24
00:01:45.660 --> 00:01:49.230
OK so that's concatenation and repetition.

25
00:01:49.480 --> 00:01:57.490
If we go ahead and define the Eyl a new value as t is equal to a string go ahead just make a basic string

26
00:01:58.150 --> 00:01:59.350
Hello.

27
00:01:59.350 --> 00:02:03.370
Now I have this s t object that is a string.

28
00:02:03.370 --> 00:02:03.770
Hello.

29
00:02:03.780 --> 00:02:05.600
Me go and show you again.

30
00:02:05.600 --> 00:02:11.520
So SC It's a string it's equal to hello if you say s t dots and then hit tab.

31
00:02:11.920 --> 00:02:17.440
You're going to get a list of all the methods and attributes they can call off this string object.

32
00:02:17.440 --> 00:02:19.440
Notice that there are a ton of them.

33
00:02:19.450 --> 00:02:23.370
So we're only going to go through some of the more important ones and the more common ones.

34
00:02:23.500 --> 00:02:26.600
And we'll explore them more and more as we go throughout the course.

35
00:02:26.680 --> 00:02:30.170
But in this case let's say you wanted to know the length of a string.

36
00:02:30.370 --> 00:02:32.900
You can actually just call s t length.

37
00:02:33.200 --> 00:02:37.580
And if you want you can also call this with close parentheses and it won't change the result.

38
00:02:37.600 --> 00:02:42.330
Just going to give you an integer back of how many elements are in that string.

39
00:02:42.660 --> 00:02:43.190
OK.

40
00:02:43.480 --> 00:02:48.510
Now let's talk about what's known as string interpellation or in more layman's terms.

41
00:02:48.610 --> 00:02:52.010
Just inserting objects into a string.

42
00:02:52.200 --> 00:02:59.040
So I'm going I'm going to go ahead and clear this council and say the name is equal to it's going to

43
00:02:59.040 --> 00:03:01.270
put in put in my name.

44
00:03:01.270 --> 00:03:02.570
So we have Jose.

45
00:03:02.580 --> 00:03:06.320
So if I call the object name it's a string Jose.

46
00:03:06.340 --> 00:03:11.540
Now what I want to go ahead and do is insert this object into another string.

47
00:03:11.620 --> 00:03:20.980
So I want to say Val greets equals and there's two main methods of actually doing string interpolation

48
00:03:21.010 --> 00:03:23.120
or inserting an object into a string.

49
00:03:23.290 --> 00:03:28.700
We're going to talk about the two main ones which is s or f interpellation statements so for greets

50
00:03:28.730 --> 00:03:33.030
we can go ahead and say here is s double quotes.

51
00:03:33.260 --> 00:03:36.980
Say hello and then indicate a dollar sign.

52
00:03:37.160 --> 00:03:42.380
And if you want you can put in curly brackets and then the name of the value or variable in this case

53
00:03:42.470 --> 00:03:49.810
its name close those quotes and then we have street equals Hello Jose and just to show you that you

54
00:03:49.810 --> 00:03:52.030
actually don't need to put in those curly brackets.

55
00:03:52.180 --> 00:03:59.940
I could have done the same thing say Val greets is equal to s hello and then a dollar sign and then

56
00:03:59.940 --> 00:04:04.590
just name here and that's actually going to be the same thing.

57
00:04:04.600 --> 00:04:05.100
OK.

58
00:04:05.230 --> 00:04:07.250
So that's the s way.

59
00:04:07.390 --> 00:04:12.790
And you can also use the print f function which is going to be kind of similar to how it's done in Java

60
00:04:12.790 --> 00:04:14.820
as far as interpellation.

61
00:04:15.060 --> 00:04:21.250
So also you just f interpellation so you can say now accretes is equal to F..

62
00:04:21.550 --> 00:04:27.080
And we can say hello dollar sign name and that's going to be the same thing there.

63
00:04:27.090 --> 00:04:30.280
So you can just put an F there if you try to do this without.

64
00:04:30.280 --> 00:04:39.510
So if I just say Belgrade's is equal to quote Hello dollar sign name this will not work because it actually

65
00:04:39.510 --> 00:04:42.210
thinks that the dollar sign is part of that string.

66
00:04:42.240 --> 00:04:47.970
So you're either going to need an F or s there to let Scullin know that you're trying to insert an object

67
00:04:48.060 --> 00:04:50.380
or interpolate an object into the string.

68
00:04:51.280 --> 00:04:51.820
All right.

69
00:04:51.820 --> 00:04:58.510
Now sometimes you want to actually put in not just strings but float numbers are integers or doubles

70
00:04:58.550 --> 00:05:04.090
etc. and you can actually use the print function to give you a little more control over how you actually

71
00:05:04.220 --> 00:05:08.170
splaying these multiple values or variables.

72
00:05:08.170 --> 00:05:12.580
Let me go in and show you what I mean by that point to clear the council one more time.

73
00:05:12.580 --> 00:05:13.710
Start from the top.

74
00:05:13.780 --> 00:05:19.580
Let me going to show you how to use the prints f function will say print F and then I'm going to pass

75
00:05:19.690 --> 00:05:20.550
a string here.

76
00:05:20.560 --> 00:05:31.500
So a string and you're gonna use a percent sign as her string and we'll say an integer will say percent

77
00:05:31.500 --> 00:05:35.330
sign D for that integer order could be a double as well.

78
00:05:35.370 --> 00:05:45.320
And then where say a float and then percent sign F. and quote comma and then for every percent sign

79
00:05:45.710 --> 00:05:50.240
interpellation for those new String objects we're going to put in there next actually to be strings

80
00:05:50.240 --> 00:05:51.630
will be integers or floats.

81
00:05:51.680 --> 00:05:56.960
We're going to go ahead and after this comma put it in here and then close the princes inside the prince

82
00:05:57.190 --> 00:05:57.950
function.

83
00:05:58.100 --> 00:06:03.470
So Prince a function that first argument is just that string with notes on present signs or you're actually

84
00:06:03.470 --> 00:06:07.960
going to put stuff in hopefully is familiar to you from other programming languages.

85
00:06:08.120 --> 00:06:15.570
Well we can go ahead and say something like a string will put in high that's a string as far as the

86
00:06:15.630 --> 00:06:16.140
integer.

87
00:06:16.140 --> 00:06:22.380
Let's go ahead and just put in 10 and then the floats will go ahead and say twelve point three four

88
00:06:22.380 --> 00:06:27.360
five close parentheses enter and then notice what ends up being printed out.

89
00:06:27.360 --> 00:06:32.800
We say a string high in integer 10 a float twelve point three four or 5 000.

90
00:06:33.030 --> 00:06:37.410
So right now we're just using the print function and indicating where we want to place certain objects.

91
00:06:37.420 --> 00:06:43.440
So this allows you to interpolate strings in a different manner and this gives you a little more control

92
00:06:43.440 --> 00:06:48.660
especially of floating point numbers because that percent f sign can take other arguments such as how

93
00:06:48.660 --> 00:06:52.500
many numbers you want before or after the decimal point.

94
00:06:52.740 --> 00:06:58.740
So for example when we go out and show you we'll go ahead and say print's F again and we'll say the

95
00:06:58.750 --> 00:07:01.360
bill quotes a float.

96
00:07:01.620 --> 00:07:05.070
Whoops percents f.

97
00:07:05.370 --> 00:07:11.010
And we're going to go ahead and before that f we'll put in a number we'll say one points you know let's

98
00:07:11.010 --> 00:07:17.880
go ahead and say two close off with double quotes and then we're going to go in and put a floating point

99
00:07:17.880 --> 00:07:18.510
number here.

100
00:07:18.510 --> 00:07:25.080
We'll say at one point in this case we'll say two three four five and note what's going to happen when

101
00:07:25.080 --> 00:07:32.240
we actually run this when we said 1.2 basically we're indicating how many numbers we want to be placed

102
00:07:32.390 --> 00:07:34.090
before and after that decimal point.

103
00:07:34.090 --> 00:07:40.330
In this case is that point to we mentioned that we only want up to two precision past the decimal point.

104
00:07:40.430 --> 00:07:43.350
So it goes ahead and round's it as appropriate.

105
00:07:43.580 --> 00:07:46.360
So if I go ahead and just click up on the arrow key to run this again.

106
00:07:46.430 --> 00:07:49.940
Let's go ahead and change this for into a 9.

107
00:07:50.030 --> 00:07:53.200
Run that and now we get rounded up to 1.2 4.

108
00:07:53.330 --> 00:07:58.250
So you can use the sort of print functionality in order to get a little more control when you're putting

109
00:07:58.280 --> 00:07:59.950
objects into a string.

110
00:08:00.780 --> 00:08:04.170
Ok we'll go ahead and see more examples of this later on.

111
00:08:04.230 --> 00:08:09.090
We're going to be just using really basic examples for strings or concern throughout the course.

112
00:08:09.090 --> 00:08:11.570
All right now though we've discussed string interpellation.

113
00:08:11.610 --> 00:08:16.530
Let's go ahead and discuss regular expressions such as pattern matching and how to get characters certain

114
00:08:16.590 --> 00:08:19.570
index locations or slices of a string.

115
00:08:19.670 --> 00:08:22.380
We're going to go ahead and create a string.

116
00:08:22.500 --> 00:08:25.380
We'll call it s t again so we're basically going to overwrite C..

117
00:08:25.390 --> 00:08:27.610
It's going to be a value and we'll just call it.

118
00:08:27.630 --> 00:08:32.490
This is a long string and that quote.

119
00:08:32.900 --> 00:08:39.240
OK so let's say you wanted to know what character was at a specific index location and for strings indexing

120
00:08:39.240 --> 00:08:40.960
starts at zero.

121
00:08:41.100 --> 00:08:50.140
You would take s t dot and then the method you are looking for is car ads for a character X and then

122
00:08:50.140 --> 00:08:52.240
the index location as an integer.

123
00:08:52.240 --> 00:08:57.550
So for instance we wanted that capital T would just go ahead and say input 0 there.

124
00:08:57.640 --> 00:09:02.850
Or if you wanted for instance the first s that's going to be at 0 1 2 3.

125
00:09:02.920 --> 00:09:05.930
So we'll go ahead and type in 3 there.

126
00:09:06.220 --> 00:09:06.850
OK.

127
00:09:07.150 --> 00:09:09.560
Now let's say you wanted to do the opposite.

128
00:09:09.700 --> 00:09:14.480
Input a letter and get the index of its first occurrence in the string.

129
00:09:14.710 --> 00:09:20.190
Well in that case you say as the dot index of and notice that scapel.

130
00:09:20.220 --> 00:09:20.750
Oh.

131
00:09:21.010 --> 00:09:25.240
And then you're going to go ahead and put a string and this is going to return the index location the

132
00:09:25.240 --> 00:09:30.910
first occurrence of that element and that strings in this case to index 8.

133
00:09:30.910 --> 00:09:33.460
Now we show you how to get a single element.

134
00:09:33.610 --> 00:09:37.870
But if you actually want to grab a slice of a string you can use the slice notation.

135
00:09:37.990 --> 00:09:41.220
And in that case going to be a little weird for first.

136
00:09:41.500 --> 00:09:45.740
But your string value or variable Esti say slice.

137
00:09:45.790 --> 00:09:52.780
And then in parentheses you put in your starting index comma and then up to your and index.

138
00:09:52.810 --> 00:09:54.700
And it's not going to include the end index.

139
00:09:54.700 --> 00:09:57.000
It's going to up to but not including.

140
00:09:57.010 --> 00:10:01.000
So let's go ahead and try to grab this as a entire word.

141
00:10:01.120 --> 00:10:06.280
So that's going to be the first four letters so we'll start at index 0 comma and then we're going to

142
00:10:06.280 --> 00:10:09.650
go up to let's say for their.

143
00:10:09.870 --> 00:10:11.420
And that's going to go ahead and grab this.

144
00:10:11.420 --> 00:10:16.710
So we grab 0 1 2 and 3 up to but not including four.

145
00:10:16.710 --> 00:10:19.880
So what I want you to do is go ahead and try practicing with this.

146
00:10:19.920 --> 00:10:22.330
See if you can grab the word long.

147
00:10:22.330 --> 00:10:27.730
So pauses video and see you can grab the word long from the string T.

148
00:10:27.750 --> 00:10:29.720
All right let's go ahead and give it a shot.

149
00:10:29.850 --> 00:10:40.110
We'll say Esti slice and then I'm going to go ahead and count where long starts at 0 1 2 3 4 5 6 7 8

150
00:10:40.170 --> 00:10:45.090
9 10 and let's go ahead and confirm that that's true.

151
00:10:45.090 --> 00:10:47.580
Just by putting in 11 there I should see an L.

152
00:10:47.670 --> 00:10:47.930
All right.

153
00:10:47.970 --> 00:10:49.290
So we're right there.

154
00:10:49.380 --> 00:11:00.100
So we want Esti slice 10 and then I'm going to want 10 11 12 13 and they'll put in 14 and that should

155
00:11:00.100 --> 00:11:01.110
be the word long.

156
00:11:01.120 --> 00:11:05.110
So hopefully you are able to figure that out using that slice notation and we're actually going to be

157
00:11:05.110 --> 00:11:10.390
able to use that keyword slice for other objects such as lists which we're going to learn about in the

158
00:11:10.390 --> 00:11:12.160
next section on collections.

159
00:11:12.160 --> 00:11:14.350
All right so that's the basics of indexing.

160
00:11:14.350 --> 00:11:18.860
Now let's talk about the basics of regular expressions such as pattern matching.

161
00:11:19.090 --> 00:11:29.120
I'm going to go ahead and clear this and say thou s t is now equal to the string term one term two terms

162
00:11:29.130 --> 00:11:36.360
three close parentheses and now let's go ahead and actually see if we can do some pattern matching.

163
00:11:36.360 --> 00:11:45.100
If you want to check if a string matches in other string you can say t matches and then passing the

164
00:11:45.100 --> 00:11:45.840
string itself.

165
00:11:45.840 --> 00:11:55.090
So you can say from one term to term three as a string you'll get bullied Nichols true and you can say

166
00:11:55.180 --> 00:12:00.630
see matches and they will go in just put term 1 and you'll get false so this checks the entire stream

167
00:12:00.630 --> 00:12:02.230
matches in other string.

168
00:12:02.340 --> 00:12:05.420
And this is kind of similar to just using the comparison operator operator.

169
00:12:05.430 --> 00:12:06.560
Equals equals.

170
00:12:07.020 --> 00:12:07.990
And then moving along.

171
00:12:07.980 --> 00:12:12.020
Let's go ahead and see if it contains a segment or substring.

172
00:12:12.030 --> 00:12:17.640
So if I say T contains we say Term 1 here.

173
00:12:17.790 --> 00:12:20.990
This will be true because s t does contain that substring.

174
00:12:21.030 --> 00:12:23.570
And that's he can do a little bit of pattern matching there.

175
00:12:23.610 --> 00:12:26.000
So then you can say something like S T contains.

176
00:12:26.040 --> 00:12:32.160
Let's go to put a term that doesn't have such as a term for and it brings out false.

177
00:12:32.160 --> 00:12:37.200
All right so that's the basics of pattern matching which are going to go over now later on and we actually

178
00:12:37.200 --> 00:12:39.600
use natural language processing throughout the course.

179
00:12:39.600 --> 00:12:43.150
We'll see a couple of more examples of how you can Orca's strings with Scala.

180
00:12:43.170 --> 00:12:46.110
But that's all the basics you need to know for now.

181
00:12:46.110 --> 00:12:48.230
Thanks everyone and I'll see you at the next lecture.
