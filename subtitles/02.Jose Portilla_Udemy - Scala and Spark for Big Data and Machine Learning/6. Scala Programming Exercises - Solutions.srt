1
00:00:05,170 --> 00:00:09,600
Hello everyone and welcome to solutions for the Skala programming assessment test.

2
00:00:09,610 --> 00:00:13,410
Let's go ahead and walk through solutions to the questions on the assessment test.

3
00:00:13,480 --> 00:00:16,420
Want to go ahead and jump to the text Ed. now.

4
00:00:16,450 --> 00:00:16,720
All right.

5
00:00:16,720 --> 00:00:22,090
Here I am at the Ed. Let's go ahead and start the first question which just to check first single even

6
00:00:22,660 --> 00:00:27,250
basically had to write a function that takes in an integer and returns a boolean indicating whether

7
00:00:27,250 --> 00:00:28,370
or not it is even.

8
00:00:28,660 --> 00:00:31,410
And there was another hint see if you can write this in one line.

9
00:00:31,510 --> 00:00:34,430
Let's go ahead and just see if we can write the function first.

10
00:00:34,540 --> 00:00:40,760
We'll go ahead and say DCF and we'll call this method or function check.

11
00:00:40,810 --> 00:00:43,950
Even now we're going to go ahead and accept an integer.

12
00:00:44,020 --> 00:00:46,150
So we'll say numb colon.

13
00:00:46,150 --> 00:00:51,790
And then the data type we expect back is an integer and we're going to be returning a if we check back

14
00:00:51,790 --> 00:00:52,530
here.

15
00:00:52,530 --> 00:00:54,940
We want to see it boolean returned.

16
00:00:55,000 --> 00:01:02,300
So we're going to say boolean and then put in equals curly brackets and begin.

17
00:01:02,300 --> 00:01:09,440
So I check there's an even here or you can do is just actually a return numb.

18
00:01:09,920 --> 00:01:12,230
And check for equality with zero.

19
00:01:12,460 --> 00:01:15,040
So let's go ahead and check that out and make sure it actually works.

20
00:01:15,040 --> 00:01:17,900
So I'll say check even pass any number here.

21
00:01:17,920 --> 00:01:20,780
Let's go ahead and put a number we know that is even such as four.

22
00:01:20,950 --> 00:01:22,540
And then we'll run it again check.

23
00:01:22,540 --> 00:01:24,990
Even passing a number three.

24
00:01:25,000 --> 00:01:26,660
Let's go ahead and then say Prince lion.

25
00:01:26,670 --> 00:01:35,580
So we actually print the results of those calls and filing in the same print line over here OK.

26
00:01:35,750 --> 00:01:37,670
Save that and let's get ready to run it.

27
00:01:37,670 --> 00:01:44,390
So say load Skala underscore program that's guala or whatever you happen to be naming your skull a script.

28
00:01:44,810 --> 00:01:45,510
Run this.

29
00:01:45,590 --> 00:01:48,200
And we should see true false so that makes sense.

30
00:01:48,260 --> 00:01:49,020
Great.

31
00:01:49,070 --> 00:01:54,470
So if you did some Googling or searching around you would have realized as far as making this into a

32
00:01:54,770 --> 00:01:55,890
single line.

33
00:01:55,940 --> 00:02:01,390
There's also notes on how to do this in the notes for the previous lecture on functions.

34
00:02:01,460 --> 00:02:07,580
But you can check out that you actually can write this in a single line if you remove this return and

35
00:02:07,580 --> 00:02:15,050
remove this boolean equals curly brackets statement and the colon and just right equals Scala actually

36
00:02:15,050 --> 00:02:18,590
allows you to write this in one line in this format.

37
00:02:18,590 --> 00:02:23,450
So if I save this and run it again you'll see that we actually get the same results.

38
00:02:23,450 --> 00:02:28,190
Now we won't really be using this too often in the section of the course but I do want to be aware that

39
00:02:28,190 --> 00:02:29,290
it is possible.

40
00:02:29,610 --> 00:02:33,830
OK let's go ahead and move on to question number two.

41
00:02:33,830 --> 00:02:36,260
Question number two is to check for evens in a list.

42
00:02:36,260 --> 00:02:40,670
We wanted to write a function that returns true if there isn't even number inside of a list.

43
00:02:40,700 --> 00:02:42,550
Otherwise return false.

44
00:02:42,560 --> 00:02:45,700
Let's go ahead and check out how we can tackle this problem.

45
00:02:45,710 --> 00:02:52,520
We'll start with DPF and we'll go ahead and check we'll call this check list.

46
00:02:53,340 --> 00:03:00,540
And we're going to pass in a list we'll call this list numbers and then we expect it to be illest bracket

47
00:03:00,660 --> 00:03:01,440
of integers.

48
00:03:01,440 --> 00:03:05,730
So make sure you remember that when you're passing in some sort of collection object you also specify

49
00:03:05,940 --> 00:03:07,890
what is going to be inside of that collection.

50
00:03:08,750 --> 00:03:13,620
And then we expect a boolean back because we want to say whether or not there are even numbers in this.

51
00:03:13,790 --> 00:03:16,900
And then we're just going to do a for loop for those numbers.

52
00:03:16,900 --> 00:03:27,960
So we'll say for an in that numbers list we're going to go to perform an operation will say if an maade

53
00:03:28,230 --> 00:03:35,460
2 is equal to zero just like we did last time we'll go ahead and return true.

54
00:03:35,850 --> 00:03:39,820
Otherwise we'll end up doing it after that for loop if we never return true.

55
00:03:39,910 --> 00:03:42,120
And we know there are no even numbers in there.

56
00:03:42,120 --> 00:03:44,060
So we'll go ahead and return false.

57
00:03:44,130 --> 00:03:52,720
I'll save that and then I'm going to make two lists I'll say Val even sample is equal to list.

58
00:03:52,910 --> 00:03:55,320
One two three four five.

59
00:03:55,620 --> 00:04:00,510
And then I know there's an even there so it's going to make an odd sample list where there are no even

60
00:04:00,510 --> 00:04:09,190
numbers list and we'll say 1 3 5 7 and then we're going to call that function two times we'll say Prince

61
00:04:09,210 --> 00:04:12,740
Elyn that check even our checklist.

62
00:04:13,670 --> 00:04:23,460
Well person that even sample and then we'll say Prince Ellen checklist and then pass in that odd sample.

63
00:04:24,310 --> 00:04:29,710
Say that and let's go ahead and run this again.

64
00:04:29,790 --> 00:04:34,740
OK so it looks like we it true that there is a result of an even number and even sample and in the odd

65
00:04:34,800 --> 00:04:38,600
we get false so it looks like it's working out again very similar to the last question.

66
00:04:38,610 --> 00:04:43,170
But we have to make sure that we did it properly for illest and use the for loop as well.

67
00:04:43,200 --> 00:04:45,250
And if control flow check.

68
00:04:45,500 --> 00:04:51,020
OK let's go ahead and clear this and move on to the third question.

69
00:04:51,960 --> 00:04:53,950
Third question was called lucky number seven.

70
00:04:54,000 --> 00:04:57,420
We wanted to taken a list of integers and calculate their sum.

71
00:04:57,420 --> 00:05:00,420
However sevens are lucky and they should be counted twice.

72
00:05:00,480 --> 00:05:02,910
Meaning their value is actually 14 for the sum.

73
00:05:03,030 --> 00:05:05,690
And you can assume that the list isn't empty when you receive it.

74
00:05:05,700 --> 00:05:07,940
Let's go ahead and tackle this problem.

75
00:05:08,890 --> 00:05:18,180
A clear that we're going to go ahead and say f and we'll call our new function lucky.

76
00:05:18,290 --> 00:05:20,650
We're going to accept numbers as an argument.

77
00:05:20,750 --> 00:05:25,070
And this is going to be a list of integers as stated in the problem statement.

78
00:05:25,160 --> 00:05:30,830
Remember we want an actual sum back which means going to be an integer.

79
00:05:30,840 --> 00:05:34,670
So let's go ahead and define a variable called output.

80
00:05:34,890 --> 00:05:41,040
So our basic strategy will be to go through every number in this list see what it is if it is a 7 we'll

81
00:05:41,040 --> 00:05:42,670
add 14 to the output.

82
00:05:42,720 --> 00:05:48,380
If it's not a 7 then we'll just add that number I'm going to make a variable called output here inside

83
00:05:48,380 --> 00:05:51,160
of the function equal to zero.

84
00:05:52,010 --> 00:06:04,370
And then we're going to say for and numbs you go ahead and say if and has it quality with seven we're

85
00:06:04,370 --> 00:06:11,060
going to take the output and set it equal to output plus 14 because it was a seven it counts for twice

86
00:06:11,510 --> 00:06:12,310
otherwise.

87
00:06:12,350 --> 00:06:19,160
Or else the output is just going to be the output plus that normal number which was in this case and

88
00:06:19,160 --> 00:06:19,700
here.

89
00:06:19,700 --> 00:06:21,030
So we'll have it be.

90
00:06:21,270 --> 00:06:27,640
And then finally after this for loop is done we're going to go ahead and return that output.

91
00:06:27,650 --> 00:06:30,690
So let's go ahead and save that and set it up for us to run.

92
00:06:30,770 --> 00:06:39,410
Let's make a value call that numbers all set it equal to a list let's say 1 2 3 7 and then we're going

93
00:06:39,410 --> 00:06:44,900
to go ahead and say Prince Elon and I will in and in Lucky Numbers.

94
00:06:44,900 --> 00:06:45,480
OK.

95
00:06:45,560 --> 00:06:48,490
So let's before we actually run this calculate what this should be.

96
00:06:48,800 --> 00:06:55,940
So looks like we have 1 7 in here that should be 14 plus 7 is going to be 17 plus to 19 and then plus

97
00:06:55,940 --> 00:06:56,950
one is 20.

98
00:06:57,320 --> 00:06:58,620
Let's go ahead and run this.

99
00:06:58,640 --> 00:06:59,810
Make sure it all worked out.

100
00:07:01,020 --> 00:07:05,290
And to run that Scala program that scul the script and it looks like we get 20 out.

101
00:07:05,470 --> 00:07:06,430
So that's good for us.

102
00:07:06,460 --> 00:07:11,770
And there's a little bit of a weird typo here as far as what the term is showing says Alex it's kind

103
00:07:11,770 --> 00:07:13,170
of overwriting the Skala.

104
00:07:13,300 --> 00:07:14,530
We go ahead and expand this.

105
00:07:14,530 --> 00:07:18,750
Maybe we can get rid of that weird error there OK.

106
00:07:18,780 --> 00:07:20,630
There it is 20.

107
00:07:20,640 --> 00:07:23,660
So let's go ahead and continue on.

108
00:07:23,700 --> 00:07:26,030
You can always just reference the solutions as well.

109
00:07:26,040 --> 00:07:31,920
If you're confused on any of this but hopefully make sense so far let's clear this and move on to the

110
00:07:31,920 --> 00:07:33,830
next question which is a little trickier.

111
00:07:34,990 --> 00:07:37,060
So this one is called Can you balance.

112
00:07:37,120 --> 00:07:41,830
And this one's a little more complicated but we want to be given a not empty list of integers return

113
00:07:41,830 --> 00:07:47,410
true if there is a place to split the list so that the sum of the numbers on one side is equal to the

114
00:07:47,410 --> 00:07:49,040
sum of the numbers on the other side.

115
00:07:49,060 --> 00:07:52,990
So for example that 1 2 5 3 3 can be split right in the middle.

116
00:07:53,080 --> 00:07:59,760
Or another example 734 can be split right after that 7 there is actually lots of ways you can solve

117
00:07:59,760 --> 00:08:04,340
this problem but we'll try to go through the most simplistic way of solving it.

118
00:08:04,470 --> 00:08:12,630
So I can say half and call this balance check and I expect to get a list then and this list is going

119
00:08:12,630 --> 00:08:14,330
to be a list of integers.

120
00:08:14,370 --> 00:08:21,370
So specify that type and I'm going to return a boolean back because I just want to know true or false.

121
00:08:21,370 --> 00:08:23,980
Is it possible to split this into logic.

122
00:08:23,980 --> 00:08:28,800
I'm going to use is have the first half and the second half as I iterate through this list.

123
00:08:28,870 --> 00:08:36,520
So to make two variables I'll say VAR of first half and I'll set it equal to zero initially and then

124
00:08:36,560 --> 00:08:43,090
VAR of second half and set that equal to zero initially and then the second half.

125
00:08:43,180 --> 00:08:48,520
I'm actually then going to reassign to my list that sum.

126
00:08:48,550 --> 00:08:53,410
So we're basically starting with the second half being the entire list and the first half being zero.

127
00:08:53,410 --> 00:08:58,000
We haven't moved our cursor from the left hand side throughout the list and then we're going to do is

128
00:08:58,000 --> 00:09:00,550
actually begin to move and compare that cursor.

129
00:09:00,550 --> 00:09:10,220
So I will say for I in this case in the range from zero to the length of that list and we can figure

130
00:09:10,220 --> 00:09:16,520
out the name for that list just by using that length method we saw earlier in the course and I'm going

131
00:09:16,520 --> 00:09:25,790
to take my first half and say the first half plus my list at that index location and maybe we can use

132
00:09:25,790 --> 00:09:27,900
parentheses to grab that.

133
00:09:28,060 --> 00:09:35,230
And then the second half is going to be equal to the second half minus the value at that location.

134
00:09:35,230 --> 00:09:40,180
So basically what we're doing is we go along as we add an element to the first half and take it away

135
00:09:40,180 --> 00:09:41,010
from the second half.

136
00:09:41,050 --> 00:09:46,090
Some are just going through this list moving along from left to right and exchanging those elements

137
00:09:46,360 --> 00:09:57,340
and then at any time in this for loop if the first half is equal to the second half but we'll go ahead

138
00:09:57,340 --> 00:10:04,810
and do is return true because that means there is some point in the list where we can actually make

139
00:10:04,810 --> 00:10:05,730
that split.

140
00:10:05,780 --> 00:10:09,530
And if you wanted to know what point it was at that list you could have just returned.

141
00:10:09,610 --> 00:10:11,540
That's the actual index that's occurring at.

142
00:10:11,710 --> 00:10:16,570
But in this case we just want to turn the boolean if that never happens in this for loop which matches

143
00:10:16,570 --> 00:10:17,560
up with this curly bracket.

144
00:10:17,560 --> 00:10:20,150
You can kind of see Adam is telling us what this little blue line.

145
00:10:20,280 --> 00:10:23,980
Then I'll go ahead and do is return false in this case.

146
00:10:23,980 --> 00:10:27,700
All right let's go ahead and test it to make a few values.

147
00:10:27,730 --> 00:10:29,950
We'll call now.

148
00:10:29,980 --> 00:10:34,000
Balance list or balanced is equal to list.

149
00:10:34,000 --> 00:10:43,360
We'll go ahead and say One two three four and then 10 and then we'll say Wow another ballast list.

150
00:10:43,360 --> 00:10:47,990
So Bellis to list and we'll say 2 3 3 2.

151
00:10:48,130 --> 00:10:50,950
So we know both of these lists should be returned TRUE.

152
00:10:50,950 --> 00:10:52,960
Finally let's get an unbalanced list there.

153
00:10:52,990 --> 00:11:00,520
So say unbalanced equals list 10 20 and then some very large number will go in and put 70.

154
00:11:00,520 --> 00:11:02,500
So the first should be true.

155
00:11:02,560 --> 00:11:04,990
And then the last one should be not true.

156
00:11:05,020 --> 00:11:11,590
So let's go ahead and then run this we'll say Prince Ellen and we're going to run print in three times

157
00:11:11,890 --> 00:11:20,500
with the actual function balance checks all say balance check and going to copy and paste this here

158
00:11:20,950 --> 00:11:21,850
three times.

159
00:11:21,850 --> 00:11:22,950
One two three.

160
00:11:23,290 --> 00:11:28,420
And then just actually pass the lists themselves so the first one is balanced.

161
00:11:28,480 --> 00:11:30,270
The second one is this balas two.

162
00:11:30,280 --> 00:11:33,650
And then finally unbalanced.

163
00:11:33,820 --> 00:11:35,160
So let's save this and break down.

164
00:11:35,160 --> 00:11:36,490
Real quick what we're doing.

165
00:11:36,610 --> 00:11:40,060
We're going to go ahead and accept the list of integers and return a boolean.

166
00:11:40,060 --> 00:11:42,970
We set two variables inside of this first half is equal to zero.

167
00:11:42,970 --> 00:11:44,530
Second half is equal to zero.

168
00:11:44,530 --> 00:11:48,270
And then we can reassign second half to my list that sum if you want.

169
00:11:48,280 --> 00:11:52,750
You could have just done this and once that line three and five it's not actually necessary to separate

170
00:11:52,750 --> 00:11:56,280
out like this but this just looks a little clear in my perspective.

171
00:11:56,320 --> 00:12:01,880
And then we can go ahead and say for every index from range zero to the length of the list.

172
00:12:01,990 --> 00:12:06,940
Go ahead and add that particular element at the end of the list the first half which remembers zero

173
00:12:07,270 --> 00:12:10,260
and then subtract that from the total sum of the second half.

174
00:12:10,300 --> 00:12:14,490
And then if at any point that some of the first half is equal to the sum of the second half will turn

175
00:12:14,500 --> 00:12:16,000
true if that never occurs.

176
00:12:16,000 --> 00:12:18,310
For this for loop we go ahead and return false.

177
00:12:18,340 --> 00:12:22,600
Now we're going to test it out on three lists that we know two are the first two are balanced and the

178
00:12:22,600 --> 00:12:24,520
last one is unbalanced.

179
00:12:24,520 --> 00:12:30,490
So let's go ahead and run this OK it looks like we got the results we expected.

180
00:12:30,490 --> 00:12:32,190
True true and false.

181
00:12:32,200 --> 00:12:33,040
Great.

182
00:12:33,040 --> 00:12:36,790
Now finally we have one last question which is quite a bit simpler.

183
00:12:36,850 --> 00:12:38,240
It's just a palindrome check.

184
00:12:38,260 --> 00:12:43,330
Now we want to be given a string return a boolean indicating whether or not it is a palindrome spelled

185
00:12:43,330 --> 00:12:44,780
the same forwards and backwards.

186
00:12:44,890 --> 00:12:46,850
Try exploring methods to help you.

187
00:12:46,960 --> 00:12:51,730
So hopefully you were able to remember how to explore methods and you can do this just treating your

188
00:12:51,730 --> 00:12:58,960
terminal by saying something like Val s t is equal to the string will go in and say hello and you can

189
00:12:58,960 --> 00:13:06,870
say s t dot and hit tab here and you'll get a bunch of attributes or methods available to you on this.

190
00:13:06,880 --> 00:13:12,340
And one of them hopefully you're able to see or with the power of Google you're able to find out that

191
00:13:12,430 --> 00:13:13,660
it is reverse.

192
00:13:13,660 --> 00:13:21,730
So if I do as t r at tab again we know that one of them will actually allow us to reverse the order

193
00:13:21,730 --> 00:13:22,510
of this.

194
00:13:22,570 --> 00:13:27,140
So a palindrome since it's going to be the same backwards or forwards.

195
00:13:27,160 --> 00:13:32,730
We can actually do this really simple if that tool we'll call this palindrome.

196
00:13:32,740 --> 00:13:40,090
Check taken a string s t make sure we qualify that it is a string and then we're going to go in and

197
00:13:40,090 --> 00:13:44,820
say boolean is equal to since a boolean is what we want to return.

198
00:13:44,860 --> 00:13:52,870
And we're just going to return this logical statement is the string as t equal to s t reverse.

199
00:13:52,870 --> 00:13:54,180
So what reverse we're going to do.

200
00:13:54,190 --> 00:14:02,440
Just to clarify if we actually call it here make clear this as t da reverse enter.

201
00:14:02,460 --> 00:14:07,700
We get the reverse of the string so if it's a palindrome the reverse should be equal to the string itself.

202
00:14:07,700 --> 00:14:12,960
So we can then just say Prince L.N. Let's go ahead and do a palindrome check on a string that we know

203
00:14:12,960 --> 00:14:13,890
is a palindrome.

204
00:14:14,160 --> 00:14:17,270
Such as a B C C B.

205
00:14:17,700 --> 00:14:19,710
And we'll do one more on a string.

206
00:14:19,710 --> 00:14:23,700
Now we know it's not a palindrome palindrome.

207
00:14:23,700 --> 00:14:24,820
There we go.

208
00:14:24,900 --> 00:14:27,540
And then we'll go in and put it just hello.

209
00:14:27,550 --> 00:14:28,710
Since we know it's not a palindrome.

210
00:14:28,710 --> 00:14:30,930
So we expect true and then false.

211
00:14:30,930 --> 00:14:36,610
So let's go ahead and run this.

212
00:14:36,620 --> 00:14:38,900
So there it is true and then false.

213
00:14:39,020 --> 00:14:41,730
Ok that's it for the programming section.

214
00:14:41,750 --> 00:14:44,550
And that's actually it for these scolloped programming section.

215
00:14:44,750 --> 00:14:47,150
Hopefully it felt pretty straightforward.

216
00:14:47,150 --> 00:14:50,030
We didn't cover the vast expanse of the skull.

217
00:14:50,070 --> 00:14:55,760
Language in a general sense but we just focused on what we needed to know in order to work with Sparke.

218
00:14:55,820 --> 00:15:01,130
After this we're actually going to shift our mindset not so much from Skala but working a spark spark

219
00:15:01,130 --> 00:15:04,420
data frames and sparks machine learning libraries.

220
00:15:04,460 --> 00:15:09,030
So the skills you learned here is exactly what we need to move on to the next section.

221
00:15:09,050 --> 00:15:11,470
We don't need to waste too much time.

222
00:15:11,500 --> 00:15:16,370
As far as the deep dives and the Skala because we don't actually need them or working with SPARC and

223
00:15:16,370 --> 00:15:17,070
Skala.

224
00:15:17,360 --> 00:15:20,660
So let's go ahead and move on to the next section of the course.

225
00:15:20,660 --> 00:15:21,380
Thanks everyone.

226
00:15:21,380 --> 00:15:24,180
If you have any questions feel free to post them to the Q&amp;A forums.
