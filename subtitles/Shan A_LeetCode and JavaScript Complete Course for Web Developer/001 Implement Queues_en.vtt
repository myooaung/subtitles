WEBVTT
1
00:00:00.240 --> 00:00:07.650
Today's quoting interview question is asked by Google and many other big tech companies, and this question

2
00:00:07.650 --> 00:00:11.410
is called Implement You using stacks.

3
00:00:11.610 --> 00:00:12.930
So let's get right to it.

4
00:00:13.440 --> 00:00:18.280
To solve this problem, we need to implement a curfew using sex.

5
00:00:18.840 --> 00:00:22.590
So let's first go over what are the functions of.

6
00:00:24.040 --> 00:00:31.780
So what push is where we push the element to the back of the queue so far for pushing one and then we're

7
00:00:31.780 --> 00:00:32.530
pushing to.

8
00:00:33.730 --> 00:00:37.090
And the peak would get the front element.

9
00:00:38.090 --> 00:00:42.590
So what I would get is one, because first he pushed one.

10
00:00:42.770 --> 00:00:46.640
So what people do is get the front element, which will get one.

11
00:00:48.130 --> 00:00:50.980
And then we have Paul right here.

12
00:00:52.850 --> 00:00:56.120
And that removes the element in the front of the queue.

13
00:00:57.700 --> 00:01:04.010
So after you move it, we will get the one because one is in the front.

14
00:01:04.030 --> 00:01:09.220
So once you pop, it removes one and it shows us that we have removed one.

15
00:01:10.100 --> 00:01:15.230
And then we have empty, so that returns whether the queue is empty.

16
00:01:16.360 --> 00:01:17.850
So want to be a pop, right?

17
00:01:18.490 --> 00:01:27.540
We still have to meet the cute, so cute dog empty the false because we still have to.

18
00:01:27.550 --> 00:01:30.050
And there so it is not empty.

19
00:01:30.070 --> 00:01:31.810
That's why it's going to return false.

20
00:01:32.710 --> 00:01:33.120
All right.

21
00:01:33.130 --> 00:01:40.840
So let's quickly go or the difference between a stack of Q So A stack is usually referred to as last

22
00:01:40.840 --> 00:01:42.070
in first.

23
00:01:43.570 --> 00:01:46.010
So let's say we have a stack of dishes, right?

24
00:01:46.210 --> 00:01:51.820
So we put the first dish right here, second dish, the third dish.

25
00:01:52.180 --> 00:01:54.750
So these are like plates first, second later.

26
00:01:55.180 --> 00:01:55.890
It's a stack.

27
00:01:56.650 --> 00:01:58.430
So we usually go out first.

28
00:01:59.010 --> 00:02:00.330
Laughter First.

29
00:02:00.700 --> 00:02:02.200
So this was put in last.

30
00:02:02.560 --> 00:02:05.410
So, of course, we're going to remove from the top, not from the bottom.

31
00:02:05.410 --> 00:02:05.640
Right.

32
00:02:07.450 --> 00:02:08.740
So we can move the first one.

33
00:02:11.190 --> 00:02:13.160
And then remove the second one.

34
00:02:16.880 --> 00:02:17.490
And then.

35
00:02:18.770 --> 00:02:19.260
Third one.

36
00:02:24.690 --> 00:02:27.090
And then the queue is the opposite.

37
00:02:27.120 --> 00:02:33.120
So it's first and first, so let's say we have a people in the line.

38
00:02:34.360 --> 00:02:35.800
So this person.

39
00:02:37.260 --> 00:02:38.540
Was first in the line.

40
00:02:40.150 --> 00:02:41.200
And then this one.

41
00:02:42.150 --> 00:02:46.190
Was second in the line and then this one was third in the line.

42
00:02:47.830 --> 00:02:50.680
So first and foremost, this person was first.

43
00:02:51.940 --> 00:02:56.560
So, of course, the first question on the line will be out first, then the second.

44
00:02:57.790 --> 00:02:58.040
And.

45
00:02:59.380 --> 00:03:01.200
So let me show you one more example.

46
00:03:02.240 --> 00:03:07.490
So in the stack, we had one and then two and then three.

47
00:03:08.510 --> 00:03:11.940
So which one of your first last in, first out?

48
00:03:11.960 --> 00:03:15.830
This was last seen number three when we got our first.

49
00:03:16.890 --> 00:03:22.440
And then the second and then the first, and then the two is opposite.

50
00:03:22.800 --> 00:03:23.550
So first in.

51
00:03:23.550 --> 00:03:24.150
First out.

52
00:03:25.040 --> 00:03:28.610
So let's add this one here, one, two and three.

53
00:03:29.610 --> 00:03:32.130
So who will be our first one will be our first.

54
00:03:33.450 --> 00:03:34.470
And then the second.

55
00:03:35.990 --> 00:03:37.040
And then the third.

56
00:03:38.090 --> 00:03:44.230
So how can you make a stack behave like a cube, because, remember, Stack is last in, first out,

57
00:03:44.630 --> 00:03:47.120
but it was first in, first out.

58
00:03:47.660 --> 00:03:52.320
So what we can do with this add elements one to three.

59
00:03:52.880 --> 00:03:55.250
So the stack last in, first out.

60
00:03:55.280 --> 00:03:56.030
So this was last.

61
00:03:56.060 --> 00:03:57.840
So this will be deleted first.

62
00:03:57.920 --> 00:04:01.770
This this element do to move first, but in a cube.

63
00:04:02.390 --> 00:04:03.480
First in, first out.

64
00:04:03.510 --> 00:04:04.370
So this was first.

65
00:04:04.370 --> 00:04:06.050
So this element should be removed.

66
00:04:06.440 --> 00:04:07.940
So how can you make the stack?

67
00:04:09.710 --> 00:04:12.290
So what we can do is we can create two stacks.

68
00:04:13.340 --> 00:04:14.550
OK, this is step one.

69
00:04:17.160 --> 00:04:24.310
And this is step two, so whenever we want to delete or stack first, we're going to check two.

70
00:04:24.450 --> 00:04:25.710
Is there any element here?

71
00:04:26.190 --> 00:04:26.980
There is time.

72
00:04:27.450 --> 00:04:31.410
So what we can do is we can pull all of these elements into step two.

73
00:04:31.890 --> 00:04:37.200
So first, it's going to involve three, then two and then one.

74
00:04:38.480 --> 00:04:42.090
So we have flipped over elements.

75
00:04:48.170 --> 00:04:54.130
So now, if you want to believe we're going to delete the last one to last in, first out.

76
00:04:54.140 --> 00:04:55.990
So this is the last one.

77
00:04:56.000 --> 00:04:57.670
So we're going to delete this one.

78
00:04:59.420 --> 00:05:01.340
And then this one right here.

79
00:05:03.990 --> 00:05:08.910
So you can see that now the stock is actually acting like a cute.

80
00:05:10.080 --> 00:05:16.350
Because we have flipped over elements using two stacks, so now if you want to add where are you going?

81
00:05:17.100 --> 00:05:23.550
You're going to add right here for you want to add in the first thing and then you want to add another

82
00:05:23.550 --> 00:05:23.920
element.

83
00:05:24.210 --> 00:05:24.770
So five.

84
00:05:25.590 --> 00:05:27.720
OK, so this is for adding the stack.

85
00:05:27.730 --> 00:05:30.930
One is for adding and the stack two is for deleting.

86
00:05:32.190 --> 00:05:36.070
So now I want to delete from the stack.

87
00:05:36.270 --> 00:05:39.420
So first I'm going to look at is there an element there?

88
00:05:39.450 --> 00:05:40.180
Yes, there is.

89
00:05:40.590 --> 00:05:42.210
So far you're going to delete this one.

90
00:05:43.250 --> 00:05:44.420
Now, again, I want to do.

91
00:05:45.320 --> 00:05:51.740
So is there any elements here that there's not so far you want to pull all of the elements to a stack

92
00:05:51.820 --> 00:05:54.470
to to this one?

93
00:05:54.540 --> 00:05:55.220
The first one.

94
00:05:55.910 --> 00:05:56.840
Then the second one.

95
00:05:58.820 --> 00:06:02.720
And then we're going to do the we're going to remove the.

96
00:06:04.050 --> 00:06:04.700
First element.

97
00:06:06.370 --> 00:06:06.960
And then the.

98
00:06:08.390 --> 00:06:15.650
All right, guys, so here we have the function called MICU, and it takes elements like I showed you

99
00:06:15.650 --> 00:06:16.380
on the whiteboard.

100
00:06:16.790 --> 00:06:21.890
So what we need to do is we need to implement a cube using stacks.

101
00:06:22.580 --> 00:06:25.910
So we need to stack to behave like a cute.

102
00:06:26.690 --> 00:06:30.740
So how we do that is we're going to create two stacks.

103
00:06:31.430 --> 00:06:39.320
So what we need to do is we need to implement the functions like push pushes an element X to the back

104
00:06:39.320 --> 00:06:39.830
of the cube.

105
00:06:40.700 --> 00:06:49.430
Pop removes the element from the front from in the front of the cube and pick it just shows you the

106
00:06:49.430 --> 00:06:50.300
front element.

107
00:06:50.310 --> 00:06:53.030
So it gets to the front element and empty.

108
00:06:53.450 --> 00:06:54.230
It tells you.

109
00:06:55.700 --> 00:07:03.950
Whether the queue is empty or not, so terms whether the queue is empty or not, so the first function

110
00:07:03.950 --> 00:07:07.830
we have is where we go to instantiate our stacks.

111
00:07:07.830 --> 00:07:09.530
So first we're going to have the push stack.

112
00:07:10.250 --> 00:07:15.700
Remember, the push is for adding, then we're going to have the pork stack.

113
00:07:16.550 --> 00:07:20.410
So we create a pop stack and that is for deleting.

114
00:07:21.470 --> 00:07:23.820
So in the push stack, we always add the elements.

115
00:07:23.880 --> 00:07:30.860
And if you want to delete any elements, we're going to add it into the box and then delete like I showed

116
00:07:30.860 --> 00:07:31.560
on the whiteboard.

117
00:07:32.300 --> 00:07:36.330
So first letter that we're going to implement for the queue is push.

118
00:07:37.760 --> 00:07:43.670
So all we need to do to remember, we just we need to push all elements to the push.

119
00:07:43.880 --> 00:07:50.030
So we're going to do that right here, this push back the push and we're going to push whatever element

120
00:07:50.030 --> 00:07:50.800
is given to us.

121
00:07:51.200 --> 00:07:59.300
So we're going to only push into the push stack and then we have the pork stack.

122
00:08:00.020 --> 00:08:02.520
So we have the function.

123
00:08:03.830 --> 00:08:05.460
So here is a little bit tricky.

124
00:08:06.410 --> 00:08:13.250
So first, we need to check if the pop stack is empty, because when you're putting your movement element

125
00:08:13.490 --> 00:08:18.360
from the stack, so the first thing we need to do is.

126
00:08:19.400 --> 00:08:27.120
Is check if the box is empty or not in the past is the box deck is not empty.

127
00:08:27.320 --> 00:08:29.710
That means there is that element in the public.

128
00:08:30.110 --> 00:08:36.280
So we have to first remove that element before we add anything into the stack.

129
00:08:36.799 --> 00:08:43.039
So first, we're going to check if the plastic is empty, then what we want to do is we want to take

130
00:08:43.039 --> 00:08:48.860
everything from the from the push stack and put it into the box so you can delete it.

131
00:08:49.850 --> 00:08:57.440
So what we're going to do is we can have a while loop, which is going to check while this push stack

132
00:08:58.100 --> 00:09:01.670
is not empty, not empty, because we have the information here.

133
00:09:02.210 --> 00:09:04.850
So it's not empty.

134
00:09:06.050 --> 00:09:12.410
So while the push is not an epidemic, there are elements that you can move from the push tech into

135
00:09:12.410 --> 00:09:13.020
the public sector.

136
00:09:13.760 --> 00:09:22.010
So what we're gonna do is we're going to start pushing into the pop stack, all of the elements from

137
00:09:22.010 --> 00:09:22.930
the push stack.

138
00:09:23.630 --> 00:09:27.340
So we're going to take the elements from the push stack by popping it up.

139
00:09:27.770 --> 00:09:33.680
So pumping it out pretty much means we're getting the element for the push back the first element and

140
00:09:33.980 --> 00:09:36.610
also returning it so that we return it.

141
00:09:36.800 --> 00:09:39.670
We're pushing it into the top stack.

142
00:09:40.430 --> 00:09:44.260
So, again, if there's another element, that means that plastic is not empty yet.

143
00:09:45.080 --> 00:09:45.340
Right.

144
00:09:45.650 --> 00:09:46.180
I'm sorry.

145
00:09:46.340 --> 00:09:49.460
The push back is not empty yet.

146
00:09:49.790 --> 00:09:55.160
So the loop will continue while the push deck is not empty.

147
00:09:55.700 --> 00:09:58.190
So, again, we're going to come back here and we're going to.

148
00:09:59.550 --> 00:10:09.550
Pop the element from the hashtag and put it into the plastic until all elements from the push take part

149
00:10:09.660 --> 00:10:16.160
in the pop stick and then remember they can only delete from the pop stick.

150
00:10:16.830 --> 00:10:24.900
So once all the elements are in the pop set, we're going to start pop star pop, meaning we're going

151
00:10:24.900 --> 00:10:26.850
to delete the first element from the pop star.

152
00:10:27.380 --> 00:10:27.860
All right.

153
00:10:27.870 --> 00:10:30.060
So the next function is peak.

154
00:10:31.260 --> 00:10:33.390
So Peake is very similar.

155
00:10:34.460 --> 00:10:38.010
Took part because it has the same logic.

156
00:10:39.590 --> 00:10:42.230
So what we're gonna do is we're going to find.

157
00:10:43.570 --> 00:10:44.410
The element.

158
00:10:45.460 --> 00:10:50.290
That we could delete, right, so we're not actually going to delete them.

159
00:10:50.500 --> 00:10:57.310
We just want to see what is the first element that we're going to pop that we're going to delete.

160
00:10:57.700 --> 00:10:58.600
We just want to see it.

161
00:10:59.170 --> 00:11:02.040
So we're going to go through the same logic again.

162
00:11:03.350 --> 00:11:10.310
And in the end, instead of popping, what we're doing is picking, so we just pick let we just get

163
00:11:10.310 --> 00:11:16.550
to see the element that we that is on the top that we read that we could delete.

164
00:11:16.820 --> 00:11:18.960
So all we do is just pick.

165
00:11:18.980 --> 00:11:20.070
We just get to see it.

166
00:11:21.680 --> 00:11:25.580
So that's what it's going to return is the element that's on the top.

167
00:11:28.540 --> 00:11:32.530
OK, and then the last function is empty.

168
00:11:33.540 --> 00:11:34.560
So if you remember.

169
00:11:36.370 --> 00:11:38.560
We have two stacks.

170
00:11:40.370 --> 00:11:44.450
The push back and the pop stick, both of them could have elements in the.

171
00:11:45.640 --> 00:11:48.460
Right, so the only way that the two.

172
00:11:49.580 --> 00:11:50.520
Could be empty.

173
00:11:51.140 --> 00:11:53.790
Is it both stacks are empty.

174
00:11:54.320 --> 00:11:59.360
So we're going to do is return this thought pushed back, not empty.

175
00:12:00.260 --> 00:12:00.920
And.

176
00:12:02.150 --> 00:12:10.640
Those pumps are empty, if both are empty, that means this condition will return true, if one of the

177
00:12:10.640 --> 00:12:15.740
steps is not empty, we return a false and we're just returning false.

178
00:12:17.190 --> 00:12:24.540
And that's that's pretty much it, that's how we can implement a coup using tax.

