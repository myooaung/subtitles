WEBVTT
1
00:00:00.210 --> 00:00:06.290
Today, I have a coding interview question from Apple, and this question is called Jump Game.

2
00:00:06.840 --> 00:00:14.130
And in this problem, we are given an area of non-negative integers and we need to determine if you're

3
00:00:14.130 --> 00:00:16.250
able to reach the last index.

4
00:00:16.530 --> 00:00:18.960
So let's get right to it to solve this problem.

5
00:00:19.380 --> 00:00:25.320
Given a function called Khanjar, which takes an area of known negative numbers.

6
00:00:26.520 --> 00:00:32.670
And we need to return to prove that we can jump all the way to our last days so far for first and we

7
00:00:32.670 --> 00:00:36.190
can jump all the way to last index and be tried and true there.

8
00:00:37.020 --> 00:00:41.820
So we have to design the algorithm where we will use the algorithm.

9
00:00:42.300 --> 00:00:48.400
So let me explain each value in the amount of spaces that we can jump.

10
00:00:48.870 --> 00:00:52.230
And our goal is to reach the last index in the area.

11
00:00:52.770 --> 00:00:56.430
So from here, let's say this guy wants to join.

12
00:00:57.800 --> 00:01:01.160
So how many steps should you take, you can jump one.

13
00:01:02.450 --> 00:01:04.360
And then he can jump to.

14
00:01:05.510 --> 00:01:08.000
And from here, you can jump again one more.

15
00:01:09.980 --> 00:01:15.190
And from here, you can again just one more and you'll reach the last index in the.

16
00:01:16.720 --> 00:01:21.550
But there's also multiple ways you can do that, so you can just drop one.

17
00:01:22.870 --> 00:01:26.200
And then to hear from you, you can also jump on.

18
00:01:27.460 --> 00:01:31.210
And from here, you can also turn one and you can reach the last index area.

19
00:01:32.500 --> 00:01:34.380
So let's look at another example.

20
00:01:35.320 --> 00:01:38.860
So from here, let's say you were going to jump one.

21
00:01:39.800 --> 00:01:46.870
And then you're going to jump two and then three because the value of your story, so you land on zero

22
00:01:47.570 --> 00:01:50.740
and then there's no way that you can jump to the last index.

23
00:01:51.500 --> 00:01:53.480
So let's try to write.

24
00:01:54.050 --> 00:01:57.780
So that's a tough one, because the maximum you're allowed is three.

25
00:01:58.210 --> 00:02:00.230
So just jump that had on to.

26
00:02:01.360 --> 00:02:06.800
And then from to just jump one more and another one, and that said, I can land on.

27
00:02:08.889 --> 00:02:12.400
Let's try and go to one, so let's just go one.

28
00:02:13.310 --> 00:02:16.610
And then to now, you can jump again one more.

29
00:02:17.560 --> 00:02:23.020
But then again, you land on zero, so there's no way to jump to the last index in the area.

30
00:02:23.470 --> 00:02:30.560
So here we have to return a false but this is too many times for checking each index.

31
00:02:30.580 --> 00:02:32.770
And this is not the optimal solution.

32
00:02:33.640 --> 00:02:36.030
So let me show you another way.

33
00:02:36.610 --> 00:02:42.880
What if we go from the last index to the zero index to the first element?

34
00:02:44.380 --> 00:02:46.440
Since we're already on the last index.

35
00:02:47.650 --> 00:02:52.440
We put the point of the game is to reach the last minute, so if you are already on the last index,

36
00:02:52.570 --> 00:02:56.240
already there, so we want to see if we can go to the first index.

37
00:02:56.950 --> 00:02:58.370
So there there's some math involved.

38
00:02:58.480 --> 00:02:59.200
Let me show you.

39
00:03:00.230 --> 00:03:07.850
So what we're trying to find here, is there a way to get from a left index to our last index?

40
00:03:08.450 --> 00:03:15.170
So that's why we're going to check each each of these indexes and see if they are valid indexes.

41
00:03:15.890 --> 00:03:19.580
So first, we're going to create a variable called index to keep track of them.

42
00:03:20.180 --> 00:03:27.990
So first, all the index is four, because if we were to jump from here all the way to using four jumps

43
00:03:28.150 --> 00:03:29.660
to reach the last index.

44
00:03:30.170 --> 00:03:33.080
So that's why our current index is four.

45
00:03:33.410 --> 00:03:36.760
And our goal is to get our index to zero.

46
00:03:37.250 --> 00:03:42.440
And that's when we're going to say that it's possible to jump all the way to the last and that can return.

47
00:03:42.630 --> 00:03:42.950
True.

48
00:03:43.920 --> 00:03:47.460
So let's start with the left index, which is three.

49
00:03:48.330 --> 00:03:54.600
So three plus the value, which is zero, is that greater than or equal to four?

50
00:03:56.750 --> 00:03:59.890
No, it's not us, not with North Dakota.

51
00:04:00.590 --> 00:04:03.440
So our politics will still stay at for.

52
00:04:07.100 --> 00:04:09.430
OK, now let's go on to this index.

53
00:04:10.450 --> 00:04:13.730
So this is not about index, we want to underline it.

54
00:04:14.480 --> 00:04:15.950
So let's try this one.

55
00:04:16.190 --> 00:04:19.370
So, too, is the index and the value is one.

56
00:04:19.970 --> 00:04:22.940
Is that greater than or equal to four?

57
00:04:23.810 --> 00:04:25.580
Because the index is still at four.

58
00:04:26.330 --> 00:04:30.600
So two plus one equals three if not greater than or equal to four.

59
00:04:31.160 --> 00:04:34.520
So the index will still stay set for.

60
00:04:37.870 --> 00:04:45.070
And then we go on to this and this one plus two, is that greater than or equal to four to one plus

61
00:04:45.070 --> 00:04:49.310
two, which will give us a three, if not greater than or equal to four.

62
00:04:49.630 --> 00:04:51.730
So our about the next stage four.

63
00:04:52.120 --> 00:04:59.190
And then we're on the first index, the zero index and zero plus three, which will go to three.

64
00:04:59.230 --> 00:05:02.050
It's not created then nor equal to four.

65
00:05:02.470 --> 00:05:05.320
So the index will still still stay four.

66
00:05:05.950 --> 00:05:12.170
And we will check in recode if about index, but it's not so good return false.

67
00:05:12.790 --> 00:05:15.160
There is no way to jump.

68
00:05:16.330 --> 00:05:19.610
There's no way to jump to a last index in this area.

69
00:05:20.440 --> 00:05:22.110
So let me show you another example.

70
00:05:23.070 --> 00:05:25.180
OK, so here we don't have a zero.

71
00:05:25.200 --> 00:05:34.800
So it is possible to get to a loss in this let's check statistic zero one, two, three and four.

72
00:05:35.980 --> 00:05:37.640
So overvalued, six.

73
00:05:43.290 --> 00:05:44.520
Will be for.

74
00:05:46.090 --> 00:05:48.300
And then we're going to go this way.

75
00:05:49.720 --> 00:05:58.720
So can we get from this index to our last index, so three plus one, which will give us a force of

76
00:05:58.750 --> 00:06:04.050
three plus one is a greater than or equal to fourth.

77
00:06:05.900 --> 00:06:13.820
Plus minus four, so, yes, it is equal to four, so this is now a ballot index update for a bond index,

78
00:06:14.990 --> 00:06:15.770
which will be three.

79
00:06:19.380 --> 00:06:30.060
So now we move on to to index to two plus one, is that greater than or equal to three because the index

80
00:06:30.060 --> 00:06:32.670
is now three, two, plus one, two, three.

81
00:06:32.720 --> 00:06:33.840
It is equal to three.

82
00:06:34.290 --> 00:06:36.630
So now our index will be to.

83
00:06:43.060 --> 00:06:52.840
OK, and now we move on to one index, so on plus three, which is the value, is that greater than

84
00:06:52.840 --> 00:06:55.960
or equal to the index, which is to.

85
00:06:56.910 --> 00:07:00.760
So three plus one four four is greater than two.

86
00:07:01.320 --> 00:07:03.930
So this is now a valid index.

87
00:07:09.150 --> 00:07:12.840
And now we move on to our last index, so.

88
00:07:17.730 --> 00:07:25.720
Six plus two, is that greater than or equal to about two is greater than one.

89
00:07:26.610 --> 00:07:31.500
So now zero is our ballot index.

90
00:07:34.460 --> 00:07:39.140
And then we're going to check, is the index equal to zero?

91
00:07:39.590 --> 00:07:42.860
If it is equal to zero, then it is possible.

92
00:07:43.820 --> 00:07:51.040
Right, that we can go from here to here to here and then to the index.

93
00:07:52.210 --> 00:07:54.460
So that's when we're going to return a true.

94
00:07:55.440 --> 00:07:57.150
Let me show you one example.

95
00:07:58.430 --> 00:08:00.640
So in this example, we have two zeros.

96
00:08:01.310 --> 00:08:02.420
So let's try this.

97
00:08:03.410 --> 00:08:10.710
So zero one two, which are index and these are the values, so let's go from here.

98
00:08:10.770 --> 00:08:18.770
Or rather index right now it's going to be two because one and two jobs will get us to our last index.

99
00:08:19.920 --> 00:08:22.030
So let's start with this one.

100
00:08:22.800 --> 00:08:23.400
So one.

101
00:08:24.510 --> 00:08:25.590
Plus zero.

102
00:08:26.690 --> 00:08:29.960
Is that greater than or equal to two?

103
00:08:31.180 --> 00:08:31.510
No.

104
00:08:31.690 --> 00:08:34.960
So one is not greater than or equal to two.

105
00:08:35.230 --> 00:08:38.679
So this one is not about this.

106
00:08:39.070 --> 00:08:41.490
So we will not update the next to this one.

107
00:08:46.360 --> 00:08:47.560
Let's go on to this one.

108
00:08:48.680 --> 00:08:50.600
Our last index was zero.

109
00:08:51.950 --> 00:08:52.730
Plus two.

110
00:08:54.380 --> 00:08:57.770
Is that greater than or equal to a valid index?

111
00:08:59.280 --> 00:09:01.800
Yes, so it's equal to about index.

112
00:09:02.940 --> 00:09:06.350
So this is going to be our new politics.

113
00:09:13.510 --> 00:09:19.790
So in this scenario, you will return true, because the index is equal to zero.

114
00:09:20.320 --> 00:09:22.360
Now, let me show you all of this in code.

115
00:09:22.660 --> 00:09:23.410
All right, guys.

116
00:09:23.650 --> 00:09:32.050
So here we have the function called can jump and it takes an area of non-negative integers.

117
00:09:33.110 --> 00:09:38.750
So the first thing we're going to check is we're going to do a double check, so we're going to check

118
00:09:39.140 --> 00:09:42.010
if what we're given is either no or undefined.

119
00:09:42.170 --> 00:09:46.400
If it is, then we're going to return a false because we can't jump.

120
00:09:46.400 --> 00:09:47.760
Right, because we don't have an area.

121
00:09:48.800 --> 00:09:53.230
So then the first thing we want to do is we want to find a valid index.

122
00:09:53.750 --> 00:10:00.560
And as I explained on the whiteboard, the first round index is going to be the last index in the area

123
00:10:01.100 --> 00:10:03.070
to get the index in the area.

124
00:10:03.530 --> 00:10:10.670
We want to take the area minus one, and that will help us get the index in the area.

125
00:10:11.150 --> 00:10:12.800
So let's put that down right here.

126
00:10:14.630 --> 00:10:21.810
So this is our example that the area which we're going to be given and is just an example.

127
00:10:22.520 --> 00:10:28.690
So our index is going to start off with four.

128
00:10:29.570 --> 00:10:30.440
Let me show you why.

129
00:10:32.180 --> 00:10:38.070
So this is index zero, index one, index to index three and index four.

130
00:10:38.840 --> 00:10:40.730
So a index is four.

131
00:10:42.320 --> 00:10:44.150
And then we're going to start looping.

132
00:10:45.020 --> 00:10:48.140
We're going to look through the area backwards.

133
00:10:48.590 --> 00:10:49.940
So we're going to start with.

134
00:10:51.030 --> 00:10:53.780
The second to last index.

135
00:10:55.410 --> 00:10:57.360
Right, because we've already gone through.

136
00:10:58.220 --> 00:11:04.580
The last index, which is over, which is going to be our index, so we're going to start with the second

137
00:11:04.580 --> 00:11:05.560
to last index.

138
00:11:05.900 --> 00:11:07.820
So that's why we have a minus two here.

139
00:11:08.810 --> 00:11:14.690
And we're going to start documenting so we can go we can check the backwards.

140
00:11:16.840 --> 00:11:18.250
So first, we're going to check.

141
00:11:19.160 --> 00:11:26.660
If I which is the index plus the element of the index is greater than or equal to the valid index.

142
00:11:27.710 --> 00:11:29.180
So let me explain up here.

143
00:11:30.880 --> 00:11:34.150
So we are at the second to last index, which is three.

144
00:11:35.410 --> 00:11:44.380
So three plus element, which is one three plus one, which will give us a four, is that greater than

145
00:11:44.560 --> 00:11:46.240
or equal to the index?

146
00:11:46.810 --> 00:11:52.680
That index is a four to three plus one equals four is equal to four.

147
00:11:53.650 --> 00:12:01.030
So that means our new index is going to be an index, which we're currently on, which is three.

148
00:12:02.370 --> 00:12:09.560
So what we're going to do is we're going to update the next element, which we're on, which is three,

149
00:12:09.570 --> 00:12:10.740
so let me do that up here.

150
00:12:11.960 --> 00:12:20.540
And then again, we're going to lose and we're going to decrement, so now we are on index to index

151
00:12:20.540 --> 00:12:22.070
to plus one.

152
00:12:23.010 --> 00:12:29.400
Right here, if index two plus one is greater than or equal to the value index, which is three to two

153
00:12:29.400 --> 00:12:30.250
plus one is three.

154
00:12:30.720 --> 00:12:33.760
So three is equal to the index.

155
00:12:34.620 --> 00:12:40.620
So that means a new index is going to be two.

156
00:12:41.510 --> 00:12:44.420
The one that we're on to the update right here.

157
00:12:45.790 --> 00:12:55.270
OK, and again, we're going to look and we're going to decrement, so now we're on one index one so

158
00:12:55.270 --> 00:13:01.540
one plus three, which equals four, is that greater than or equal to two?

159
00:13:02.690 --> 00:13:07.010
Which is our index, is that greater than or equal to a valid index?

160
00:13:07.730 --> 00:13:11.930
So three plus one equals four and it's greater than our blood index again.

161
00:13:12.440 --> 00:13:17.480
We're going to update our index with this one, which is one.

162
00:13:20.190 --> 00:13:26.010
Again, we're going to loop and we're going to decrement, so now we end up with index zero.

163
00:13:28.230 --> 00:13:36.420
So zero plus the element on which is two zero plus two equals two, is that greater than or equal to

164
00:13:36.450 --> 00:13:37.350
the other index?

165
00:13:37.680 --> 00:13:39.030
Yes, it's greater.

166
00:13:40.000 --> 00:13:47.500
So, again, we're going to update our index now, it's going to equal to zero, so what that means

167
00:13:48.310 --> 00:13:54.220
is all of them are about index and we can jump from zero to one to two to three to four.

168
00:13:54.970 --> 00:13:56.510
That means can we jump?

169
00:13:58.130 --> 00:13:58.810
Yes, we can.

170
00:13:58.840 --> 00:13:59.890
So we're going to a journey.

171
00:14:00.970 --> 00:14:03.580
So how are we going to do that is we're going to check it.

172
00:14:03.690 --> 00:14:06.190
The index is equal to zero.

173
00:14:06.580 --> 00:14:11.710
If it is, then we're going to return it, which is going to return a true.

174
00:14:14.800 --> 00:14:16.530
Let me show you one more example.

175
00:14:21.710 --> 00:14:30.710
So let's say we have a two zero zero, so this is the area which were given.

176
00:14:34.560 --> 00:14:38.490
And our index is going to be zero one and to.

177
00:14:41.140 --> 00:14:44.770
So here, we're going to start off with our last index.

178
00:14:46.060 --> 00:14:50.080
Which is to say that's going to be a index extra.

179
00:14:52.530 --> 00:15:00.150
So, again, we're going to look through it from the second to last index, so one plus zero.

180
00:15:01.300 --> 00:15:03.940
Equals one is greater than or equal to two.

181
00:15:04.600 --> 00:15:05.410
No, it's not.

182
00:15:05.530 --> 00:15:14.770
So one is not about index, so we're not going to update or index is still going to stay at two.

183
00:15:16.020 --> 00:15:24.000
Then we're going to look to it again and decrement and we'll end up with index zero zero plus two.

184
00:15:25.120 --> 00:15:28.750
Which equals to two, is that greater than political 2006?

185
00:15:28.780 --> 00:15:30.030
Yes, it's equal to it.

186
00:15:30.520 --> 00:15:33.340
So we're going to update the world index to zero.

187
00:15:34.880 --> 00:15:41.360
So we've gone through the area, through the area, and now we're going to check, is the index equal

188
00:15:41.360 --> 00:15:41.790
to zero?

189
00:15:42.390 --> 00:15:43.700
Yes, is equal to zero.

190
00:15:43.730 --> 00:15:45.130
So we're going to return a true.

191
00:15:45.600 --> 00:15:46.040
True.

192
00:15:47.200 --> 00:15:49.990
So can jump, yes, we can jump because.

193
00:15:51.200 --> 00:15:59.360
From to we can jump one and two, right from two, we can jump one and two.

194
00:15:59.570 --> 00:16:05.270
So we've reached our last element in the area and that's that's pretty much it.

195
00:16:05.630 --> 00:16:08.630
If you have any questions that leave it in the comments below.

196
00:16:08.630 --> 00:16:10.510
And now we'll get back to you.

