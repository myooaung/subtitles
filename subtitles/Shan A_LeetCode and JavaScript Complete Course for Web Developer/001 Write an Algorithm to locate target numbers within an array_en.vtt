WEBVTT
1
00:00:00.150 --> 00:00:01.680
Hey, guys, welcome back.

2
00:00:01.740 --> 00:00:10.590
So this is a question that's usually asked on an Amazon interview, and they usually ask this during

3
00:00:10.590 --> 00:00:16.650
the phone interviews because it's a pretty simple one and they really want to just get to know if you

4
00:00:16.650 --> 00:00:18.410
know your data structures well.

5
00:00:19.050 --> 00:00:21.930
So this cushion is called to some.

6
00:00:22.740 --> 00:00:30.120
And the question is, given an array of integers return indices of the two numbers such that they add

7
00:00:30.120 --> 00:00:32.340
up to a specific target.

8
00:00:33.180 --> 00:00:40.050
You may assume that each input would have exactly one solution and you may not use the same element

9
00:00:40.050 --> 00:00:40.590
twice.

10
00:00:41.580 --> 00:00:50.280
So let's say in the given example, so we have an array of integers to seven, 11, 15, and the target

11
00:00:50.280 --> 00:00:50.730
is nine.

12
00:00:50.760 --> 00:00:51.940
So how do we get nine?

13
00:00:52.350 --> 00:00:55.090
We would have to add seven and two together to make it nine.

14
00:00:55.500 --> 00:00:57.930
And we need to turn the indices.

15
00:00:58.500 --> 00:01:00.510
So we need to return zero and one.

16
00:01:01.670 --> 00:01:04.030
It's pretty simple, so let's get to Cody.

17
00:01:05.760 --> 00:01:12.180
OK, so in this function, we will create a loop through the numbers and stored into a map.

18
00:01:12.720 --> 00:01:17.930
The number has a number as a key and the value as an index.

19
00:01:18.480 --> 00:01:24.200
So MAP is a data structure which allows to associate data to a key.

20
00:01:24.840 --> 00:01:29.130
And let me show you, there is a website so you can get a full understanding.

21
00:01:37.520 --> 00:01:45.620
OK, so this website shows you that the map is a JavaScript data structure, and right here you can

22
00:01:45.620 --> 00:01:49.880
see it's a data structure which allows to associate data to a key.

23
00:01:50.390 --> 00:01:56.140
And before iOS six was introduced, the map is so sorry.

24
00:01:56.150 --> 00:02:01.880
So E six actually introduce the map data structure to the world along with set.

25
00:02:02.480 --> 00:02:09.830
But before its introduction, people generally used objects as maps by associating some object or value

26
00:02:09.830 --> 00:02:11.030
to a specific table.

27
00:02:11.060 --> 00:02:18.230
So let's say car is an object and car of color is equal and the value is equal to red.

28
00:02:18.980 --> 00:02:20.680
But now we have map.

29
00:02:20.690 --> 00:02:22.700
So let's look at that.

30
00:02:23.690 --> 00:02:24.950
OK, so that would be.

31
00:02:25.970 --> 00:02:31.310
Let nameless people new map.

32
00:02:34.660 --> 00:02:42.160
So this pretty much is where we're going to store all the numbers that we look through.

33
00:02:45.500 --> 00:02:50.060
OK, so next, we're going to look through all the numbers for.

34
00:02:51.920 --> 00:02:53.750
That I equal zero.

35
00:02:55.350 --> 00:03:00.090
I is less than NOM's darkland.

36
00:03:02.170 --> 00:03:04.320
I was Flip's.

37
00:03:06.400 --> 00:03:11.440
OK, so next, we want to store the current number.

38
00:03:14.230 --> 00:03:14.470
So.

39
00:03:16.510 --> 00:03:17.090
Earned.

40
00:03:20.740 --> 00:03:21.280
No.

41
00:03:24.250 --> 00:03:27.440
So now we have the current number that we're all in this.

42
00:03:28.860 --> 00:03:35.250
OK, and then let me write this consed compliment.

43
00:03:37.100 --> 00:03:37.610
Target.

44
00:03:39.600 --> 00:03:42.630
Minus current now.

45
00:03:43.840 --> 00:03:49.150
So what we're doing is here is that so if the target, let's say, was five.

46
00:03:54.110 --> 00:03:55.280
The target was five.

47
00:03:56.370 --> 00:04:05.870
And so pretty much we want to get five and the current number, current number wrong is the street.

48
00:04:06.480 --> 00:04:08.870
So what do we need to get to five?

49
00:04:09.570 --> 00:04:10.740
We need to.

50
00:04:11.750 --> 00:04:21.529
So how can we do that, we can do target, which is five, and since we are we are right now on three,

51
00:04:21.560 --> 00:04:24.260
which is the current number, all we have to do is target.

52
00:04:25.180 --> 00:04:33.190
Minus the car number, which is five five, minus three or two, so we're looking for two, which is

53
00:04:33.190 --> 00:04:35.580
our that's our story it as a compliment.

54
00:04:36.640 --> 00:04:39.870
So next, we're going to check if.

55
00:04:41.130 --> 00:04:41.510
No.

56
00:04:42.030 --> 00:04:49.350
So pretty much different map as to how we get the number, how we check the number number we use has

57
00:04:50.430 --> 00:04:54.020
a has this complement that we're looking for.

58
00:04:55.970 --> 00:04:59.030
That all we're going to do is we're going to return.

59
00:05:00.580 --> 00:05:09.760
In an area, the indexes, so first we're going to return numbers don't get so that's how we get the

60
00:05:09.760 --> 00:05:14.160
index because the value is index and the key is the number.

61
00:05:14.710 --> 00:05:16.250
So compliment.

62
00:05:17.460 --> 00:05:18.910
So a compliment would be.

63
00:05:20.140 --> 00:05:27.430
In this case, it would be, too, so we're trying to get the number two and this one again to return

64
00:05:27.430 --> 00:05:35.080
the index for us to comma and we won't return fire because the current number we're on.

65
00:05:36.300 --> 00:05:45.150
Is let's say it's three, so now we have all the numbers and we turn it and that's it, but if that

66
00:05:45.420 --> 00:05:47.790
if that number is not in the math

67
00:05:50.400 --> 00:05:54.340
and here we're just going to add it to the map.

68
00:05:54.360 --> 00:05:57.690
So, no, don't set.

69
00:05:59.240 --> 00:06:00.110
Our number.

70
00:06:04.340 --> 00:06:15.110
No, and index, so index, so the number, the number is the key and the index is the value.

71
00:06:17.440 --> 00:06:18.820
And that's pretty much it.

72
00:06:18.880 --> 00:06:20.020
Let me run this.

73
00:06:20.740 --> 00:06:25.810
So I made a mistake, a silly mistake right here instead of making the.

74
00:06:27.240 --> 00:06:30.120
Parentheses, and that's pretty much accurate.

75
00:06:30.390 --> 00:06:31.960
And then when I click on.

76
00:06:36.000 --> 00:06:37.770
You can see that it's been accepted.

77
00:06:38.840 --> 00:06:46.460
And your input was the target was nine, so what we needed was index of zero and one.

78
00:06:47.390 --> 00:06:48.530
And that was expected.

79
00:06:49.220 --> 00:06:55.310
So that's pretty much it, very simple, and I advise my students to listen to this lecture a couple

80
00:06:55.310 --> 00:06:58.190
of times and it will eventually start making sense.

81
00:06:59.090 --> 00:07:03.830
Also, try to write the problem yourself and it would make even more sense after that.

82
00:07:06.030 --> 00:07:07.140
This is all for now.

83
00:07:07.530 --> 00:07:11.700
Let me know if you have any questions and join me on the next one.

84
00:07:11.820 --> 00:07:12.360
Good luck.

