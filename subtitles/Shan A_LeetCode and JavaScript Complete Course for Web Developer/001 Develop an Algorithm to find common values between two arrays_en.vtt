WEBVTT
1
00:00:00.330 --> 00:00:07.650
Today, I have a coding interview question and a question asked by Google, Amazon and Facebook, and

2
00:00:07.650 --> 00:00:11.290
this question is called intersection of two areas.

3
00:00:11.740 --> 00:00:19.110
So in this problem, we are given two areas and we need to determine where they intersect to solve this

4
00:00:19.110 --> 00:00:19.620
problem.

5
00:00:19.860 --> 00:00:26.300
We will use a data structure called set, so let's get right to it to solve this problem.

6
00:00:26.310 --> 00:00:32.729
You're looking at a function called intersection, which takes to areas containing numbers.

7
00:00:34.250 --> 00:00:41.720
And we need to return the elements that both areas share, the results must be unique and can be in

8
00:00:41.720 --> 00:00:42.350
any order.

9
00:00:43.250 --> 00:00:51.680
So we have to design an algorithm where we use set because set only stores unique values.

10
00:00:52.400 --> 00:00:58.470
If we try to store duplicate values and set, then it will get only added once.

11
00:00:59.330 --> 00:01:05.600
So all that's asking is which elements are shared between the two entities?

12
00:01:06.350 --> 00:01:07.230
Let me explain.

13
00:01:07.490 --> 00:01:07.890
All right.

14
00:01:07.910 --> 00:01:11.640
So let's check which elements are shared between the two areas.

15
00:01:12.200 --> 00:01:15.590
So here we have for you all also have four here.

16
00:01:15.980 --> 00:01:16.850
So for this.

17
00:01:18.550 --> 00:01:19.990
Repeated multiple times.

18
00:01:21.370 --> 00:01:22.970
So why is there one here?

19
00:01:23.400 --> 00:01:26.600
So four, that's a seven.

20
00:01:27.580 --> 00:01:30.410
Yes, it's shared as many times as well.

21
00:01:33.910 --> 00:01:40.150
And then again, we have a for which we've already gone through, so you can see there's many repeating

22
00:01:40.450 --> 00:01:41.250
elements.

23
00:01:41.800 --> 00:01:48.130
So the best way we can avoid that and just get unique elements is by using a set.

24
00:01:48.390 --> 00:01:51.780
OK, so for each area, we have its own set.

25
00:01:52.240 --> 00:01:53.440
So I'll explain why.

26
00:01:53.470 --> 00:02:00.010
So first, we're going to look through this area and try to store all of them, all the values into

27
00:02:00.010 --> 00:02:00.500
the set.

28
00:02:01.090 --> 00:02:03.520
So let's go to the first element, which is for.

29
00:02:04.950 --> 00:02:13.770
OK, you've taught that one is taught that we try to store for, but you cannot store it because it's

30
00:02:13.770 --> 00:02:14.480
already there.

31
00:02:15.410 --> 00:02:23.000
OK, so then move on to seven, so it's seven in the morning, it will get stored and then four but

32
00:02:23.030 --> 00:02:24.400
four is already on the sets.

33
00:02:24.410 --> 00:02:28.650
Even if you try to set it, it will it will not get into the set.

34
00:02:29.890 --> 00:02:37.690
Then we go on to the second area and we're going to look to this area and try to see if any of these

35
00:02:37.690 --> 00:02:39.340
elements are in our first.

36
00:02:41.200 --> 00:02:47.800
And the reason why we have the intersection set here, we've created another set here is because we

37
00:02:47.800 --> 00:02:52.120
only want to store unique values.

38
00:02:53.200 --> 00:03:00.290
So let's go on to the first element in the second period, so seven is seven in the first set.

39
00:03:00.640 --> 00:03:01.890
Yes, it is right here.

40
00:03:02.410 --> 00:03:06.080
So we're going to store it for the first set.

41
00:03:06.520 --> 00:03:07.240
Yes, it is.

42
00:03:09.210 --> 00:03:16.160
It's in the first six there, they're no just four there, so four is there, and we're going to try

43
00:03:16.160 --> 00:03:17.650
to add it to the set again.

44
00:03:18.170 --> 00:03:21.610
But remember, the set will not duplicate values.

45
00:03:22.100 --> 00:03:24.610
So there we go on to this element.

46
00:03:24.680 --> 00:03:28.790
Seven is seven in the set in the first set.

47
00:03:29.350 --> 00:03:32.540
But you already have a number of intersections at.

48
00:03:33.540 --> 00:03:37.230
And then you go on to four is for the first.

49
00:03:37.450 --> 00:03:40.280
Yes, it is, but we already have four here as well.

50
00:03:41.790 --> 00:03:45.850
So all we've got to do is return this intersection set.

51
00:03:45.900 --> 00:03:50.600
But remember, what our function actually wants to return is an area.

52
00:03:51.000 --> 00:03:55.590
So how we can do this in JavaScript, you can just do every.

53
00:03:58.270 --> 00:03:58.750
From.

54
00:04:02.170 --> 00:04:08.510
Away from what whatever you pass into a rifle, converted into an area.

55
00:04:08.920 --> 00:04:16.010
So in each language you can do it differently or you could just iterate through the set and start into

56
00:04:16.029 --> 00:04:16.470
an area.

57
00:04:16.930 --> 00:04:18.250
So which are works for you?

58
00:04:18.430 --> 00:04:19.279
All right, guys.

59
00:04:19.300 --> 00:04:24.700
So here we have the function called interest section, and it takes to areas.

60
00:04:25.420 --> 00:04:31.260
And all we have to do is we have to find the common elements between both areas.

61
00:04:31.840 --> 00:04:35.530
So all we have to do is find the common elements between both areas.

62
00:04:36.040 --> 00:04:39.870
So what that means is the intersection of the two arrays.

63
00:04:41.420 --> 00:04:46.000
OK, so the first thing we're going to do is we're going to create a set.

64
00:04:46.450 --> 00:04:54.100
So we're going to name this the first set because we want to get all the unique elements from the first

65
00:04:54.100 --> 00:04:56.740
area into this set.

66
00:04:59.320 --> 00:05:01.210
So we're going to.

67
00:05:02.400 --> 00:05:11.790
Iterate over the first area, so for lack number of nums one, which is our first area we're going to

68
00:05:11.790 --> 00:05:12.150
add.

69
00:05:13.410 --> 00:05:14.210
Each number.

70
00:05:15.230 --> 00:05:22.660
From the area one into the first set, so let's take this here as an example.

71
00:05:24.310 --> 00:05:24.850
So.

72
00:05:25.910 --> 00:05:32.830
This is our first area, so we're going to add one in to the set, then we're going to intercept.

73
00:05:33.410 --> 00:05:35.990
Then we go out again to do a first set.

74
00:05:35.990 --> 00:05:39.630
But remember, set only stores unique values.

75
00:05:39.650 --> 00:05:42.050
It does not store duplicate values.

76
00:05:42.050 --> 00:05:44.870
So even though we try to add it, it's not going to get store.

77
00:05:45.500 --> 00:05:50.740
Then we add one the last element into the first set and we're done.

78
00:05:50.750 --> 00:05:53.840
So the first set, it pretty much has.

79
00:05:55.250 --> 00:05:59.930
One and two, that's what it has the first.

80
00:06:02.320 --> 00:06:11.680
Then what we want to find is what is the common element between the first and the second area since

81
00:06:11.680 --> 00:06:12.580
we already have?

82
00:06:13.770 --> 00:06:19.000
The unique elements of the first area were first set.

83
00:06:19.620 --> 00:06:23.210
Now we can look through the secondary.

84
00:06:23.220 --> 00:06:32.610
So that's why we have created the intersection set so that we can collect all the common elements into

85
00:06:32.610 --> 00:06:32.780
it.

86
00:06:34.670 --> 00:06:37.300
So then we're going to iterate through the secondary.

87
00:06:39.250 --> 00:06:44.920
So we're going to check if the first set has the number.

88
00:06:45.920 --> 00:06:52.170
The first element from the second area, so the second area is right here in our example.

89
00:06:52.910 --> 00:06:54.800
So the first element is to.

90
00:06:56.380 --> 00:06:59.620
Does the first set contain two?

91
00:07:00.010 --> 00:07:03.790
Yes, it does, so it's going to add it to the intersection said.

92
00:07:05.720 --> 00:07:08.690
And then we're going to go to the next element.

93
00:07:10.110 --> 00:07:17.400
We're going to go and look through the next element in the second area, which is going to be to so

94
00:07:18.240 --> 00:07:19.620
does the first set.

95
00:07:21.120 --> 00:07:25.240
Contained to yes, it does.

96
00:07:25.950 --> 00:07:28.190
So we're going to add it to the intersection.

97
00:07:28.580 --> 00:07:33.340
But remember, it's only going to add to only once.

98
00:07:34.020 --> 00:07:36.180
So let me try to add it the second time.

99
00:07:36.990 --> 00:07:38.480
It's not going to store it in the.

100
00:07:41.370 --> 00:07:51.960
So then all you're going to do is we're going to return the area, which will contain only two, so

101
00:07:51.960 --> 00:07:53.690
we can overturn the intercept.

102
00:07:53.760 --> 00:07:57.000
We can overturn a set rate we want to return.

103
00:07:57.120 --> 00:08:04.080
And so the JavaScript we need to do is return every dot from.

104
00:08:05.760 --> 00:08:07.200
They said, that's it.

105
00:08:08.250 --> 00:08:11.420
So we're going to return from the set.

106
00:08:12.880 --> 00:08:16.000
And that's all so the output will be.

107
00:08:17.440 --> 00:08:25.300
An area which contains two, and that is our common element between both areas, the common element

108
00:08:25.300 --> 00:08:30.850
is only two between these two areas and that's it.

109
00:08:31.360 --> 00:08:36.270
So if you have any questions, then let me know in the comments and I will get back to you.

