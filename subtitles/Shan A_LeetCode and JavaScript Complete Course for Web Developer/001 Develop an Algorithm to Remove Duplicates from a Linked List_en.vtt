WEBVTT
1
00:00:00.360 --> 00:00:01.920
Hey, guys, welcome back.

2
00:00:02.370 --> 00:00:10.410
So this is a common question from Facebook quoting interview and in this question, we're going to be

3
00:00:10.410 --> 00:00:13.710
using singly linked list data structure.

4
00:00:14.610 --> 00:00:22.530
So this question is called remove duplicates from sorted list and given a sorted linked list and delete

5
00:00:22.530 --> 00:00:26.120
all duplicates such that each element appear only once.

6
00:00:26.940 --> 00:00:29.880
So you can see right here is one, one, two.

7
00:00:30.780 --> 00:00:34.430
And what we want to return is one, two, because there's two one.

8
00:00:34.460 --> 00:00:39.930
So we remove the duplicates and here it's one, one, two, three, three.

9
00:00:41.150 --> 00:00:42.890
So we just return one, two, three.

10
00:00:43.870 --> 00:00:45.760
Let me explain this in code.

11
00:00:47.310 --> 00:00:53.670
But I will explain this step by step while I write the code, so we here we have a function called delete

12
00:00:53.670 --> 00:00:58.590
duplicates and it is going to receive the head.

13
00:00:59.340 --> 00:01:08.520
So Head is the head of the linked list, and it is also represents the linked list as a whole.

14
00:01:09.120 --> 00:01:12.930
So that means let me let me give you an example right here.

15
00:01:18.180 --> 00:01:29.570
OK, so the head would be one and also represents the whole linked list, and this is an article right

16
00:01:29.610 --> 00:01:33.810
here that talks about linked lists.

17
00:01:34.500 --> 00:01:40.170
So like areas linked lists is a Leanyer data structure.

18
00:01:40.620 --> 00:01:48.110
Unlike areas linked lists, elements are not sorted at a 10 contiguous location.

19
00:01:48.120 --> 00:01:51.270
The elements are linked using pointers.

20
00:01:52.480 --> 00:01:55.010
So the list actually looks like this.

21
00:01:55.630 --> 00:02:04.750
So eight points to be points of six points A D and then sorry about that, eight points to be and B

22
00:02:04.750 --> 00:02:08.949
points to see and see points to D and D points to know which is the end.

23
00:02:09.310 --> 00:02:12.010
And the head would be the beginning, which is a.

24
00:02:13.970 --> 00:02:22.400
And the data pretty much is the wealth or value, and the next attribute points to the next note.

25
00:02:23.840 --> 00:02:25.820
So each node has a well and a next.

26
00:02:26.870 --> 00:02:32.280
OK, so that's a variable called current, which represents head.

27
00:02:34.100 --> 00:02:34.940
So.

28
00:02:36.060 --> 00:02:46.020
The current load, the current load we are on is the head, and each number is a node, so each node

29
00:02:46.020 --> 00:02:47.100
has a value.

30
00:02:49.140 --> 00:02:56.190
This is the value of that node and the next property, which points to the next node in the linked list.

31
00:02:56.220 --> 00:02:58.180
So this is the next property right here.

32
00:02:58.230 --> 00:02:59.610
So one and then one.

33
00:02:59.650 --> 00:03:00.880
So this is the next property.

34
00:03:01.410 --> 00:03:05.490
So one has a property called next, which points to.

35
00:03:06.410 --> 00:03:09.420
The next note, so this is the next note.

36
00:03:10.460 --> 00:03:10.890
OK.

37
00:03:11.690 --> 00:03:16.430
And note, the last note in the linked list always points to No.

38
00:03:16.460 --> 00:03:17.690
So number three.

39
00:03:18.850 --> 00:03:25.720
The next property will point to note, and that will mean that it's the end of the link to this.

40
00:03:28.090 --> 00:03:34.240
OK, so let me give you, like the whole detailed summary, then I will explain again while writing

41
00:03:34.240 --> 00:03:37.720
the code so to check if there are duplicates.

42
00:03:39.190 --> 00:03:41.920
We need to check if the current notes of well.

43
00:03:42.950 --> 00:03:50.890
Is same as current dot next dot value, so kurnos value, right?

44
00:03:51.840 --> 00:03:58.020
Is same as Kurt Kirk, no current dot next Darwell.

45
00:03:59.490 --> 00:04:04.170
So if it's the same, then we have to point guard DOT next.

46
00:04:04.920 --> 00:04:09.860
So at this node's current dot next to the current dot, next dot next.

47
00:04:10.230 --> 00:04:16.470
So we point this current or next to next dot next to.

48
00:04:16.529 --> 00:04:19.450
So this will pretty much go to and will remove the duplicate one.

49
00:04:20.010 --> 00:04:20.779
It's that simple.

50
00:04:21.480 --> 00:04:22.790
And then we check again.

51
00:04:22.800 --> 00:04:24.610
So we're going to have like a while loop.

52
00:04:25.380 --> 00:04:27.000
So if it's not same.

53
00:04:28.110 --> 00:04:36.300
Then we just resigned current to current or next and continue to look, so let's say we on one and we

54
00:04:36.300 --> 00:04:40.840
removed this one and then one points to two now.

55
00:04:41.250 --> 00:04:49.820
So now two, we check if two value is this node's value is same as the next Noge value.

56
00:04:50.250 --> 00:04:51.130
It's not the same.

57
00:04:51.720 --> 00:04:55.830
So if it's not same, then we just resign the current to current or next.

58
00:04:56.310 --> 00:04:58.620
So we reassign this to.

59
00:04:59.560 --> 00:05:05.960
Current thought next, so we will be pointing to then three and then we'll continue the loop until we

60
00:05:05.960 --> 00:05:08.650
have remove all the duplicates, until we reach No.

61
00:05:09.780 --> 00:05:15.600
So if the current next reference is null, then we're done and we return the head.

62
00:05:16.790 --> 00:05:22.590
OK, so let me write this while loop.

63
00:05:23.620 --> 00:05:27.670
While current does not equal No.

64
00:05:32.230 --> 00:05:39.820
And Kurn not next does not equal the No.

65
00:05:44.550 --> 00:05:49.590
OK, so while the current is not set to no meaning the last node.

66
00:05:50.770 --> 00:05:53.170
Is not no right and.

67
00:05:54.110 --> 00:06:02.750
The next node is not null since the last nodes next could last nodes next points to null.

68
00:06:02.750 --> 00:06:03.860
So we want to check both.

69
00:06:09.180 --> 00:06:11.080
So now we have to check the duplicates.

70
00:06:11.610 --> 00:06:18.000
We need to check if the current noad value is the same as current dot next dot value.

71
00:06:18.600 --> 00:06:22.470
So is current dot.

72
00:06:22.470 --> 00:06:26.790
Next equal current dot.

73
00:06:26.940 --> 00:06:29.700
Next dot next.

74
00:06:31.050 --> 00:06:36.060
So this is the current version and then we're going to check.

75
00:06:42.290 --> 00:06:44.910
Sorry, actually, it is while you wait here.

76
00:06:45.740 --> 00:06:48.910
So if current next, right.

77
00:06:50.120 --> 00:06:50.810
Equal.

78
00:06:52.030 --> 00:06:53.830
Current NextG value.

79
00:06:55.060 --> 00:06:58.000
So if one does not equal the next note.

80
00:06:59.630 --> 00:07:00.530
If it does.

81
00:07:01.840 --> 00:07:05.250
Then we want to skip it.

82
00:07:08.590 --> 00:07:14.860
And DOT next, equal corn dog next door.

83
00:07:15.280 --> 00:07:15.390
Next.

84
00:07:22.230 --> 00:07:27.180
OK, so that way we instead of pointing to this one.

85
00:07:28.030 --> 00:07:30.430
You're pointing the car known to two.

86
00:07:36.800 --> 00:07:43.040
So it's not the same then we just resigned the current to the current next and then continue the loop

87
00:07:43.040 --> 00:07:49.040
until we reached not so current equals current DOT next.

88
00:07:50.150 --> 00:07:57.160
Since one and two are not the same, then what we want to do is move the pointer from one to two.

89
00:07:57.770 --> 00:08:00.350
So the current will equal current next.

90
00:08:05.000 --> 00:08:06.830
Then after we have updated.

91
00:08:07.720 --> 00:08:15.040
A relentless return to had so duplicates have been removed and the list is updated, so we return the

92
00:08:15.040 --> 00:08:18.850
head, which is the entire linked list, not just the beginning.

93
00:08:19.540 --> 00:08:21.420
It's not just pointing to the beginning of the list.

94
00:08:21.760 --> 00:08:22.600
It's not just the head.

95
00:08:23.050 --> 00:08:27.250
It's it's pretty much the entire length list.

96
00:08:28.180 --> 00:08:29.000
And that's it.

97
00:08:29.020 --> 00:08:36.010
Let me run the code, guys, so there is one small problem in this code, so I wonder if you guys noticed

98
00:08:36.340 --> 00:08:39.880
that we're checking current or next critical current dot.

99
00:08:39.880 --> 00:08:40.360
Next dot?

100
00:08:40.360 --> 00:08:43.090
Well, actually, we need to check the current.

101
00:08:44.260 --> 00:08:48.920
Value currency value equals equal current or next value.

102
00:08:49.690 --> 00:08:52.030
And that was the fix to run the code.

103
00:08:55.830 --> 00:09:01.330
And it's working, so your input was one, one, two, and the output came out to be one, two, and

104
00:09:01.330 --> 00:09:02.790
the expected was one, two.

105
00:09:03.570 --> 00:09:04.700
This is all for now.

106
00:09:05.100 --> 00:09:09.310
Let me know if you have any questions and join me on the next one.

107
00:09:09.330 --> 00:09:09.900
Good luck.

