WEBVTT
1
00:00:00.180 --> 00:00:01.390
Guys, welcome back.

2
00:00:01.410 --> 00:00:06.850
So in this lecture, we will go over how we can retrieve some useful information from a string.

3
00:00:08.130 --> 00:00:13.380
This is a very common injury question, and the interviewer wants to know if you can manipulate the

4
00:00:13.380 --> 00:00:18.250
data coming from a string and show it on the UI dynamically.

5
00:00:19.590 --> 00:00:22.890
So this problem is called Lente of the last word.

6
00:00:23.250 --> 00:00:33.150
And what this is about is saying that given a string as consist of upper and lower case alphabets and

7
00:00:33.150 --> 00:00:38.460
empty space characters return the length of the last word.

8
00:00:38.910 --> 00:00:41.760
Last word means the last appearing word.

9
00:00:41.880 --> 00:00:48.900
If we loop from left to right in a string and if the last word does not exist, we return to zero.

10
00:00:50.370 --> 00:00:59.580
So in this example, you can see we have Hello World and the output is five because the last word is

11
00:00:59.760 --> 00:01:00.990
five characters long.

12
00:01:02.520 --> 00:01:10.890
Also, we want to note a word is defined as a maximum substring consisting of known space characters

13
00:01:10.890 --> 00:01:11.300
only.

14
00:01:12.060 --> 00:01:15.330
So meaning we should not count any spaces.

15
00:01:16.950 --> 00:01:24.720
OK, so right here we can see that this string has multiple spaces in that.

16
00:01:25.290 --> 00:01:33.840
And to better understand the string, we can write it like this so that we can show the underscore as

17
00:01:33.840 --> 00:01:34.560
spaces.

18
00:01:37.200 --> 00:01:47.190
And to count the last word, we want to create two variables that can keep track of what's going on.

19
00:01:48.180 --> 00:01:50.790
So the first variable will be.

20
00:01:56.030 --> 00:02:02.150
On last word, which equals false.

21
00:02:05.440 --> 00:02:12.940
So it will be false until we reach a non empty space and once we land on a

22
00:02:15.940 --> 00:02:18.910
a character, we will make it true.

23
00:02:19.990 --> 00:02:27.670
So since this is a space, we're going to keep this false or once we reach the deal, we will make this

24
00:02:27.670 --> 00:02:28.020
true.

25
00:02:29.500 --> 00:02:32.890
And the second variable would be last.

26
00:02:39.020 --> 00:02:40.340
Last word length,

27
00:02:43.490 --> 00:02:45.330
which would equal zero in the beginning.

28
00:02:45.350 --> 00:02:56.300
So since we're going to create like a loop through this string, every time we land on a non-empty character,

29
00:02:57.380 --> 00:03:07.910
we will increment this last word length and we will make this on last word to true.

30
00:03:11.840 --> 00:03:22.200
So pretty much now we're going to do a for loop and we will check each character in the string.

31
00:03:23.120 --> 00:03:28.190
So is this a non-empty character?

32
00:03:29.360 --> 00:03:30.140
No, it's not.

33
00:03:33.490 --> 00:03:36.190
Is this a non empty character?

34
00:03:37.180 --> 00:03:37.880
Yes, it is.

35
00:03:38.020 --> 00:03:45.090
So we will make this into true and we will incremented this last word lent by one.

36
00:03:46.090 --> 00:03:46.540
Sorry.

37
00:03:49.990 --> 00:04:02.320
And the loop will continue checking each character, so d l r o w and that would make this counter,

38
00:04:03.130 --> 00:04:05.680
this lacework lent to fight.

39
00:04:07.540 --> 00:04:21.190
And then once we reach this empty character, we are going to look at the on the last word variable.

40
00:04:21.190 --> 00:04:28.420
And if it's true, we're going to break out and just return the last word length.

41
00:04:30.460 --> 00:04:40.180
So the reason we have this on last word is because what the Loop is trying to do is we're trying to

42
00:04:40.180 --> 00:04:54.130
break after we reach a empty character, but we don't want to break until we at least count the last

43
00:04:54.460 --> 00:04:55.210
word length.

44
00:04:56.110 --> 00:05:03.040
So once we are on the first non-empty character, we want to say we are on the last words we're on.

45
00:05:03.040 --> 00:05:04.390
The last word equals true.

46
00:05:05.200 --> 00:05:08.200
OK, let me show you that on the code.

47
00:05:08.920 --> 00:05:11.290
So this is what the function looks like.

48
00:05:11.290 --> 00:05:16.900
And what's provided is that the function name is length of last word.

49
00:05:17.740 --> 00:05:26.620
And this function we have the parameters, which is a you can see up here, which is a string, we're

50
00:05:26.620 --> 00:05:31.930
given a string and we need to return a number.

51
00:05:32.930 --> 00:05:34.760
So the length of the last word.

52
00:05:35.780 --> 00:05:44.450
OK, so first we can start by creating the variables which we have, which we have defined here, so.

53
00:05:47.410 --> 00:05:48.550
On last word.

54
00:05:55.260 --> 00:05:57.060
Which will equal faults in the first.

55
00:05:58.410 --> 00:06:08.150
And last word, lente, which equals zero in the beginning.

56
00:06:10.160 --> 00:06:16.910
So what we want to do is we always want to do a check always at the beginning, so we don't run through

57
00:06:16.910 --> 00:06:18.050
the code for no reason.

58
00:06:20.540 --> 00:06:23.100
So we do this by doing a statement.

59
00:06:24.230 --> 00:06:24.830
So if.

60
00:06:26.770 --> 00:06:28.120
Estcourt lenth.

61
00:06:29.710 --> 00:06:34.510
Equal, equal, zero, that means empty, so we can just.

62
00:06:37.170 --> 00:06:38.370
So they just return.

63
00:06:39.800 --> 00:06:41.000
This last word, lente.

64
00:06:42.690 --> 00:06:45.750
Since we did not incremented this, we can just return to the last word.

65
00:06:47.100 --> 00:06:55.920
OK, so then we should create a for loop so we can iterate over this string, which is provided.

66
00:06:58.960 --> 00:07:06.500
So what we want to do is we want to iterate from right to left.

67
00:07:07.390 --> 00:07:10.480
So that would be like going backwards in history.

68
00:07:10.870 --> 00:07:16.960
So what we can do that by putting I let it go

69
00:07:19.920 --> 00:07:20.920
start and.

70
00:07:22.030 --> 00:07:25.470
So let's say the length of this is five.

71
00:07:26.470 --> 00:07:31.960
OK, but since it's in, we want to know the index.

72
00:07:33.310 --> 00:07:37.720
And the index would be zero, one, two, three, four.

73
00:07:38.810 --> 00:07:40.840
So we have to do minus one.

74
00:07:44.250 --> 00:07:44.790
And.

75
00:07:45.870 --> 00:07:50.640
Oh, while I is.

76
00:07:52.630 --> 00:08:03.050
Greater than or equal to zero, so we want to go from the land all the way down to zero.

77
00:08:03.520 --> 00:08:06.440
So let's say the land is like 10.

78
00:08:06.460 --> 00:08:07.330
I'm just saying.

79
00:08:07.330 --> 00:08:14.370
And then we just decrement all the way down to zero.

80
00:08:16.490 --> 00:08:20.570
And we do that by minus minus.

81
00:08:24.390 --> 00:08:30.930
OK, so what we want to do is we want to check.

82
00:08:33.679 --> 00:08:35.350
So let's read a statement right here.

83
00:08:37.720 --> 00:08:38.289
If.

84
00:08:40.669 --> 00:08:45.350
It's got character at.

85
00:08:49.100 --> 00:08:52.970
I equal, equal.

86
00:08:56.190 --> 00:08:57.570
An empty character.

87
00:09:01.760 --> 00:09:05.290
Sorry, our credo should be does not equal a. character.

88
00:09:07.460 --> 00:09:11.120
So if that happens, let's say we are at this one.

89
00:09:12.530 --> 00:09:13.880
This is an empty character.

90
00:09:15.090 --> 00:09:18.430
And then we land on D, which is not an empty character.

91
00:09:18.450 --> 00:09:23.070
So now we know we are on our last word.

92
00:09:23.630 --> 00:09:24.970
We on the last word.

93
00:09:24.990 --> 00:09:29.520
So right here, take this and we make it into true.

94
00:09:31.270 --> 00:09:35.680
And then we want to go to the next letter.

95
00:09:37.750 --> 00:09:39.610
So all we have to do is.

96
00:09:41.030 --> 00:09:46.370
Actually, this will go through the loop, will go to the next letter, so all we need to do is saying

97
00:09:46.370 --> 00:09:54.070
that the last four length, as we know now, is one, because we landed on Derate.

98
00:09:54.530 --> 00:09:59.290
So now we just have to incrementalists this last word length.

99
00:10:00.560 --> 00:10:03.140
So the last four plus plus will increment this.

100
00:10:04.410 --> 00:10:05.760
From zero into one.

101
00:10:08.240 --> 00:10:11.450
OK, and else meaning.

102
00:10:13.410 --> 00:10:16.170
That Astarte character at I.

103
00:10:17.760 --> 00:10:24.810
Is equal to empty, so that means we've already gone through the we've already gone through his entire

104
00:10:24.810 --> 00:10:29.220
word or this word and we've landed on an empty.

105
00:10:30.830 --> 00:10:36.020
So what we want to do is if in this statement, we can do if.

106
00:10:38.340 --> 00:10:40.920
Um, on last word.

107
00:10:43.530 --> 00:10:53.220
Is equal to true, so that means we've already entered the last word and after the last word, we entered

108
00:10:53.220 --> 00:10:56.430
a we entered into an empty character.

109
00:10:57.790 --> 00:10:59.830
So that means we've already counted over.

110
00:11:00.750 --> 00:11:01.830
Last word, let.

111
00:11:02.740 --> 00:11:08.950
And I'm writing it like this is because this pretty much means is it equal to true?

112
00:11:09.900 --> 00:11:19.740
So if on this word and this means that it's true, all we want to do is break out of this loop.

113
00:11:22.460 --> 00:11:28.610
OK, and once we break out of this loop, then we just want to.

114
00:11:30.190 --> 00:11:30.850
Return.

115
00:11:32.470 --> 00:11:33.970
Last word, let.

116
00:11:36.170 --> 00:11:37.760
So let me explain to you this.

117
00:11:38.360 --> 00:11:38.960
So.

118
00:11:40.960 --> 00:11:46.750
We are on the last character right here since this loop starts backwards.

119
00:11:48.410 --> 00:11:55.520
So this is an empty character, right, and what we're seeing here, if it's not an empty chair, if

120
00:11:55.520 --> 00:11:57.370
it's not an empty character, right.

121
00:11:58.010 --> 00:12:01.580
So it will just go through this tape and it won't do anything.

122
00:12:01.580 --> 00:12:02.750
It will go to the next.

123
00:12:04.000 --> 00:12:05.200
Next, characters dream.

124
00:12:05.230 --> 00:12:06.820
Is this an empty character?

125
00:12:07.840 --> 00:12:09.460
This is not an empty character.

126
00:12:10.860 --> 00:12:13.860
So we're going to enter this if statement.

127
00:12:14.970 --> 00:12:19.210
Because we have landed on a not empty character, which is deep.

128
00:12:19.740 --> 00:12:22.530
So we want to say, yes, we are on the last word now.

129
00:12:22.650 --> 00:12:23.430
So true.

130
00:12:23.880 --> 00:12:28.590
And we want to say that the last word lente.

131
00:12:29.760 --> 00:12:37.200
We're going to incremented by one because we found the first character of the last word, then we're

132
00:12:37.200 --> 00:12:39.120
going to go through the whole word.

133
00:12:40.140 --> 00:12:45.390
And we're going to keep incrementing until we had the empty.

134
00:12:47.250 --> 00:12:48.300
Character right here.

135
00:12:49.330 --> 00:12:51.000
And highlight this character.

136
00:12:52.470 --> 00:12:59.940
So we had the empty character, so we're going to go into the Elst clause and we're going to check if

137
00:12:59.940 --> 00:13:06.900
we already on the last word or just then we are on the we are we already finished going to the last

138
00:13:06.900 --> 00:13:07.230
word.

139
00:13:07.590 --> 00:13:12.990
So we're just going to break and we're going to turn the last word lente.

140
00:13:13.710 --> 00:13:17.730
OK, so let's now just run the code to see if it's working.

141
00:13:23.660 --> 00:13:24.920
OK, what happened here?

142
00:13:33.650 --> 00:13:38.930
OK, so what we need to do is make this into let.

143
00:13:41.080 --> 00:13:45.890
Because constant is constant and we cannot update it, but we can update.

144
00:13:46.780 --> 00:13:49.060
So once I made this into that.

145
00:13:50.160 --> 00:13:53.790
I'm able to change the value of it into two.

146
00:13:55.560 --> 00:13:56.330
Let's run again.

147
00:13:59.860 --> 00:14:02.320
OK, so it looks like it's working out for.

148
00:14:03.330 --> 00:14:06.780
Was five and expected was five, and you can submit.

149
00:14:11.570 --> 00:14:19.070
OK, so it was sixty four milliseconds faster than eighty four percent of the JavaScript online submissions

150
00:14:19.070 --> 00:14:20.420
for a word.

151
00:14:21.350 --> 00:14:22.480
This is all for now.

152
00:14:22.880 --> 00:14:27.090
Let me know if you have any questions and join me on the next one.

153
00:14:27.110 --> 00:14:27.680
Good luck.

