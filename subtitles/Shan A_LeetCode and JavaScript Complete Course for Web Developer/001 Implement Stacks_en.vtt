WEBVTT
1
00:00:00.550 --> 00:00:07.450
Hey, guys, this is part one of my introduction to data structures, and in this video I will talk

2
00:00:07.450 --> 00:00:14.990
about STAC, which is an important data structure in programming and very often asked on coding interviews.

3
00:00:15.400 --> 00:00:21.910
So at the end of this video, I will give you some code examples in JavaScript, but this video is going

4
00:00:21.910 --> 00:00:24.070
to be mostly language independent.

5
00:00:24.310 --> 00:00:30.910
So you will be able to use whatever you learn in this course, in whatever language that you are using.

6
00:00:31.600 --> 00:00:36.060
I will be posting part two of my data structures next week.

7
00:00:36.070 --> 00:00:40.810
So hit that subscribe button below and turn on the notifications so you don't miss out.

8
00:00:41.380 --> 00:00:48.160
Before we start, I wanted to tell you that I just released my full coding course on Udemy and right

9
00:00:48.160 --> 00:00:51.940
now there is a 90 percent off discount for my subscribers.

10
00:00:52.330 --> 00:00:55.360
You can find the discount link in the description below.

11
00:00:56.350 --> 00:00:56.890
All right.

12
00:00:56.890 --> 00:01:00.460
So let's get started with part one of data structures.

13
00:01:01.360 --> 00:01:09.220
So what is a stack, a stack is used for storing information, and each note contains some information

14
00:01:09.220 --> 00:01:11.800
and it is stacked on top of each other.

15
00:01:12.580 --> 00:01:16.150
So on top of the stack, we have a stack pointer.

16
00:01:23.310 --> 00:01:30.810
And it is always pointing to the top note of this attack, so to manipulate a stack, we have two functions,

17
00:01:31.470 --> 00:01:32.880
a pop function.

18
00:01:36.150 --> 00:01:39.840
To remove the top element of the stack.

19
00:01:41.860 --> 00:01:44.560
OK, and a push function.

20
00:01:48.740 --> 00:01:56.480
The push adds an element to the top of the deck, since we're always doing something to the top of the

21
00:01:56.480 --> 00:01:58.290
stack for that reason.

22
00:01:58.700 --> 00:02:02.740
This is a last in first data structure.

23
00:02:02.930 --> 00:02:05.300
So that is called life.

24
00:02:10.389 --> 00:02:19.060
Which is last in first out, because the last item we add to the stack is always going to be the first

25
00:02:19.480 --> 00:02:21.910
item we're going to remove from the stack.

26
00:02:22.330 --> 00:02:24.620
So now let's write some pseudocode.

27
00:02:24.970 --> 00:02:27.250
So first we're going to push to the stack.

28
00:02:28.120 --> 00:02:30.850
So we're going to push a one to the stack.

29
00:02:31.150 --> 00:02:33.000
So it's a stack of empty right now.

30
00:02:33.400 --> 00:02:36.550
We're going to push one to the top of the stack.

31
00:02:36.560 --> 00:02:38.810
So we're going to push it right here.

32
00:02:39.340 --> 00:02:45.690
And remember, we have a stack pointer which will point to the to the node at the top of the stack.

33
00:02:46.510 --> 00:02:49.510
So this is our stack pointer is pointing to this note.

34
00:02:50.290 --> 00:02:52.750
Now, let's write another push.

35
00:02:57.190 --> 00:02:58.030
Let's push through.

36
00:02:58.810 --> 00:03:07.540
So now we're going to push it on top and then also we're going to move that stack pointer.

37
00:03:09.630 --> 00:03:10.920
To the element at the top.

38
00:03:12.610 --> 00:03:13.060
Steck.

39
00:03:14.710 --> 00:03:16.230
Let's push another one.

40
00:03:24.580 --> 00:03:28.690
So, again, we're going to update our stack pointer.

41
00:03:32.230 --> 00:03:34.060
OK, now let's pop.

42
00:03:34.090 --> 00:03:37.870
So we're going to remove the element from the top of the stack.

43
00:03:44.750 --> 00:03:49.050
So it doesn't take any arguments, we just pop what did we do, Paul?

44
00:03:49.150 --> 00:03:51.990
We're just removing the element at the top of the stack.

45
00:03:52.280 --> 00:03:54.240
So how do we know what element to remove?

46
00:03:54.650 --> 00:03:57.050
We look at the stack pointer.

47
00:03:58.020 --> 00:04:03.630
What element is it pointing to, it's always pointing to the element element at the top of the stack,

48
00:04:03.640 --> 00:04:09.810
so we're going to remove this element by looking at the stack pointer.

49
00:04:11.040 --> 00:04:12.390
So we remove this element.

50
00:04:14.690 --> 00:04:20.670
And instead, whenever we do a pop, we always have to return the element which we removed.

51
00:04:21.079 --> 00:04:22.250
So we're going to return.

52
00:04:27.310 --> 00:04:35.410
The seven in our function since we just removed it, and then we have to update our stack pointer to

53
00:04:35.410 --> 00:04:39.720
point to the note at the top of the stack.

54
00:04:40.150 --> 00:04:40.810
So again.

55
00:04:44.370 --> 00:04:45.980
We're going to move this country.

56
00:04:47.420 --> 00:04:53.090
To the top note, so let me show you how you actually implement the tax methods.

57
00:04:53.570 --> 00:04:57.030
In total, there are about five methods for this stack.

58
00:04:57.720 --> 00:05:03.290
So first thing we need to do is we need to create a size variable, which will be equal to zero.

59
00:05:11.940 --> 00:05:15.360
Basically, we are keeping track of the index.

60
00:05:16.470 --> 00:05:21.540
Through the thighs were able OK, so first let's implement the push method.

61
00:05:25.390 --> 00:05:28.270
So let's say you want to push a string A.

62
00:05:29.760 --> 00:05:33.630
A two hour stack, so how are you going to push it?

63
00:05:34.140 --> 00:05:38.150
We're going to look at the size and the size of all this starts with zero.

64
00:05:38.670 --> 00:05:39.720
So we're going to.

65
00:05:41.500 --> 00:05:45.340
But a at the index zero over Steck.

66
00:05:48.510 --> 00:05:55.830
And that immediately within our push function, we're going to increase the size variable, so the next

67
00:05:55.830 --> 00:06:00.530
time that we push, we have an available index to push it.

68
00:06:01.170 --> 00:06:02.780
So we're going to increase the size.

69
00:06:03.640 --> 00:06:07.570
By one of the variable here.

70
00:06:10.130 --> 00:06:12.260
OK, so now let's push another one.

71
00:06:15.660 --> 00:06:16.800
That's Pushpa.

72
00:06:20.580 --> 00:06:23.300
So, again, we're going to look at the size variable.

73
00:06:24.060 --> 00:06:25.740
So right here, we're going to push it.

74
00:06:27.970 --> 00:06:31.210
Immediately, we're going to increase the size.

75
00:06:31.540 --> 00:06:34.600
All right, so now let's implement the public method.

76
00:06:40.030 --> 00:06:44.480
Takes no argument and it's going to delete the element from the top of the stack.

77
00:06:44.920 --> 00:06:46.490
So how are we going to do this?

78
00:06:46.960 --> 00:06:52.430
We're going to look at the size, but the size does not have any element in it.

79
00:06:52.780 --> 00:06:55.270
So what we're going to do is we're going to size.

80
00:06:58.010 --> 00:07:07.180
Minus one size, minus one point to this index, and this one actually has the element.

81
00:07:07.400 --> 00:07:10.360
So this is our top element.

82
00:07:10.790 --> 00:07:15.860
So we're going to remove this element at the top of the stack.

83
00:07:18.630 --> 00:07:27.630
OK, and immediately after that, within the pop function, we're going to decrease the size of variable.

84
00:07:31.010 --> 00:07:38.360
OK, and within the pop function, we always want to return the element which we have deleted, so we're

85
00:07:38.360 --> 00:07:39.320
going to return.

86
00:07:45.220 --> 00:07:48.070
The going to try to be that we have deleted.

87
00:07:49.910 --> 00:07:53.070
So now let's implement a function called peak.

88
00:07:58.390 --> 00:08:04.270
So all he does is return the element at the top of the stack.

89
00:08:05.020 --> 00:08:06.190
So how do we get that?

90
00:08:06.400 --> 00:08:10.720
All we have to do is size minus one

91
00:08:14.770 --> 00:08:17.270
size minus one, which will be a zero.

92
00:08:17.740 --> 00:08:23.960
So our top element is a and that is what is going to return.

93
00:08:24.970 --> 00:08:28.780
Now, let's implement the next function, which is called civs.

94
00:08:33.470 --> 00:08:39.390
So all of what size does is to return the amount of elements within the stack.

95
00:08:39.919 --> 00:08:41.140
So how can we do that?

96
00:08:41.900 --> 00:08:47.040
We can look at the size, variable and size variable is actually one.

97
00:08:47.570 --> 00:08:49.640
So how many elements are within the stack?

98
00:08:49.820 --> 00:08:50.720
We only have one.

99
00:08:51.200 --> 00:08:59.210
So all we need to do is return the size variable, which will actually equal the amount of variables

100
00:08:59.300 --> 00:09:00.410
within our stack.

101
00:09:11.610 --> 00:09:19.680
So all we have to do is return to size for the size function and then the next function is called empty.

102
00:09:28.850 --> 00:09:35.120
So what empty does it check the stack if there is no elements within the stack, it would return to?

103
00:09:35.120 --> 00:09:39.980
True, but if there is an element like this that will return false.

104
00:09:40.400 --> 00:09:41.890
So how can we check that?

105
00:09:42.410 --> 00:09:46.270
All we need to do is we need to check again the size variable.

106
00:09:46.850 --> 00:09:53.270
If the size variable is equal to zero, then return a true meaning.

107
00:09:53.270 --> 00:10:01.960
There's no element in the stack, but if the size is like one or greater greater than zero, then return

108
00:10:01.970 --> 00:10:02.720
a false meaning.

109
00:10:02.720 --> 00:10:04.830
There is elements within the stack.

110
00:10:05.300 --> 00:10:07.400
So why do we have to check if it's zero?

111
00:10:08.090 --> 00:10:10.960
Well, let's look at it this way.

112
00:10:13.490 --> 00:10:20.240
The size is always going to the size variable is always going to start with zero, meaning there is

113
00:10:20.240 --> 00:10:24.850
no variables and sorry, there's no elements within the stack.

114
00:10:25.460 --> 00:10:32.990
So when you want to push and push up here, what we're going to do is we're going to push the element.

115
00:10:34.490 --> 00:10:41.900
To the zero index that, again, immediately we're going to increase the size by one.

116
00:10:42.740 --> 00:10:43.910
So as you can see.

117
00:10:44.830 --> 00:10:52.630
If there were elements within the stack, then the size or always the size variable would always be

118
00:10:52.630 --> 00:10:53.070
one.

119
00:10:53.860 --> 00:11:04.340
But if there's no elements within the stack, the size variable will always start with a zero.

120
00:11:04.990 --> 00:11:11.590
So that's why four empty, we look at the size variable equal to zero.

121
00:11:11.950 --> 00:11:18.220
And if it does, that means there is no element within the stack and that's what we're going to return

122
00:11:18.460 --> 00:11:18.730
to.

123
00:11:18.730 --> 00:11:19.060
True.

124
00:11:19.840 --> 00:11:24.130
So let me show you all of this implementation in actual code.

125
00:11:24.490 --> 00:11:27.610
All right, guys, so let's implement the stack.

126
00:11:28.690 --> 00:11:35.070
So the first thing we need to do is we need to create a constructor so that we can create or two objects.

127
00:11:35.560 --> 00:11:44.140
So the first object is cold storage and that's going to store all the elements for our stack.

128
00:11:45.670 --> 00:11:51.850
And if you remember from the whiteboard explanation, we have another variable, which is the size variable,

129
00:11:52.540 --> 00:11:55.180
which will keep track of the index.

130
00:11:56.560 --> 00:11:57.550
For our start.

131
00:11:59.370 --> 00:12:07.410
So the first function is called push, and that's for adding elements into the stack on adding elements

132
00:12:07.410 --> 00:12:08.840
to the top of the stack.

133
00:12:09.570 --> 00:12:13.300
So we take a value and we add it to the top.

134
00:12:13.470 --> 00:12:20.910
So how we're going to do that, we're going to get the storage and the index of the size, which is

135
00:12:20.910 --> 00:12:21.810
currently zero.

136
00:12:22.380 --> 00:12:25.230
So that's where we're going to add our first element.

137
00:12:26.460 --> 00:12:34.800
And if you remember, immediately after Etting, after adding we're going to increase the size so that

138
00:12:35.190 --> 00:12:40.620
next time we push, we can add the element to that index.

139
00:12:41.220 --> 00:12:48.270
So that's why we're going to increase the size after pushing the element to the top of the stack.

140
00:12:49.180 --> 00:12:54.430
The second function is called Pop, so that's for deleting the element from the top.

141
00:12:55.760 --> 00:13:02.390
And if you remember, after deleting the element, we want to return the element that we have deleted

142
00:13:02.390 --> 00:13:06.600
from this deck, so we have to return the element that we have deleted from this deck.

143
00:13:06.950 --> 00:13:12.410
So the first thing we want to do is we want to get the reference of the element that we're going to

144
00:13:12.410 --> 00:13:13.340
be deleting.

145
00:13:15.290 --> 00:13:23.240
So this class size minus one, why are we doing minus one is because if you remember, every time you

146
00:13:23.240 --> 00:13:24.820
push, we're increasing the size.

147
00:13:25.550 --> 00:13:34.440
So to get the element at the top of the stack, we have to do this size minus one, and then we'll get

148
00:13:34.730 --> 00:13:37.090
the element at the top of the stack.

149
00:13:37.520 --> 00:13:42.170
And after that, we're going to delete that element from the top of the step.

150
00:13:42.890 --> 00:13:46.940
And immediately after that, we're going to decrease the size.

151
00:13:47.920 --> 00:13:55.870
Because the element as it is deleted, so we have to also decrease the size to decrease the size of

152
00:13:55.870 --> 00:13:56.320
the stack.

153
00:13:57.720 --> 00:14:05.520
And after removing the element from the top of the stack, we're going to return the element that we

154
00:14:05.520 --> 00:14:06.180
have deleted.

155
00:14:08.990 --> 00:14:15.740
So the next function is called Pake, and in this function, we just want to see the element from the

156
00:14:15.740 --> 00:14:16.630
top of the stack.

157
00:14:16.640 --> 00:14:24.140
So all we need to do is we need to return the element from the top of our stack, and that's what we

158
00:14:24.350 --> 00:14:24.770
return.

159
00:14:26.670 --> 00:14:33.450
Then we have the function Kosice, and the only thing we need to do for the size function is to see

160
00:14:33.450 --> 00:14:35.840
how many elements are in the stack.

161
00:14:36.690 --> 00:14:45.290
And if you remember from the whiteboard, explanation this size will be always will be zero, right?

162
00:14:45.300 --> 00:14:47.100
It will always be zero in the beginning.

163
00:14:48.000 --> 00:14:52.710
And once you add an element, the size will be increased by one.

164
00:14:54.640 --> 00:15:01.150
So if there is one element, then, of course, we're just going to return this dog size because its

165
00:15:01.150 --> 00:15:05.920
size will be one, if there's another element, the size will be too.

166
00:15:06.460 --> 00:15:13.540
So all we need to do is return this variable this size, and that's how we can get the amount of elements

167
00:15:13.540 --> 00:15:14.360
within the stack.

168
00:15:15.160 --> 00:15:23.430
The last function is called empty and all we want to see if the stack has no elements in the stack,

169
00:15:23.440 --> 00:15:27.430
does not have any elements it will return it to the stack has an element.

170
00:15:27.430 --> 00:15:28.350
It will return false.

171
00:15:28.870 --> 00:15:30.910
So what we're doing right here is returning.

172
00:15:31.120 --> 00:15:38.000
We're executing dysfunction this dog size, because this size will get us the size variable.

173
00:15:38.980 --> 00:15:42.310
So if the size variable is at zero.

174
00:15:42.850 --> 00:15:43.110
Right.

175
00:15:43.570 --> 00:15:49.780
So if it equals to zero, that means there's no elements within the stack.

176
00:15:49.930 --> 00:15:52.510
So this is going to return.

177
00:15:52.750 --> 00:15:53.170
True.

178
00:15:54.320 --> 00:16:00.580
But if we do add an element and there is an element within the stack, then of course the size will

179
00:16:00.580 --> 00:16:01.070
be one.

180
00:16:01.300 --> 00:16:08.240
So when we do return, this dog size equals zero return false because we have an element in there.

181
00:16:08.860 --> 00:16:14.260
Otherwise, if there's no element within the stack, then it will compare the size.

182
00:16:14.820 --> 00:16:15.850
Is it equal to zero?

183
00:16:16.000 --> 00:16:17.050
If it is equal to zero?

184
00:16:17.260 --> 00:16:20.920
We don't have any elements in there and will return a true.

185
00:16:21.960 --> 00:16:23.070
And that's it, guys.

