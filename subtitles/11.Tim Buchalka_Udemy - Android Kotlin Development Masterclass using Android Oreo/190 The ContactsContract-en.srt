1
00:00:05,390 --> 00:00:11,500
In the previous video we created the layouts to display the contact records using Ellis view.

2
00:00:11,760 --> 00:00:15,750
Now it's time to write the code to retrieve the contact details.

3
00:00:15,780 --> 00:00:21,150
Now before we get into the coding there's been a change in the way the private access modifier works

4
00:00:21,150 --> 00:00:23,870
in cotland when used on a top level object.

5
00:00:23,880 --> 00:00:25,610
It used to mean package private.

6
00:00:25,800 --> 00:00:30,690
So that meant that any private constants we declared would be visible throughout the package.

7
00:00:30,690 --> 00:00:35,280
Now that would obviously cause problems with dialog tags because much to the column falls we've created

8
00:00:35,640 --> 00:00:39,100
or create have a tag but that's no longer the case.

9
00:00:39,190 --> 00:00:44,920
And when we're not private is used for a top level object it means private within the fall into sin.

10
00:00:45,010 --> 00:00:50,040
But just to demonstrate what I made I'm going to create the usual tax train that we're using so I've

11
00:00:50,050 --> 00:00:57,090
had throughout the course now of course in the yeah within the class with little private felle taking

12
00:00:57,090 --> 00:01:04,270
up a case equals type of quites mine activity that results in a warning from Major.

13
00:01:04,350 --> 00:01:07,400
Because the name tag doesn't conform to the naming conventions.

14
00:01:07,400 --> 00:01:08,370
What's come over here.

15
00:01:09,840 --> 00:01:15,500
You can see you've got two warnings the first one is if the tag is being used will rectify shortly the

16
00:01:15,500 --> 00:01:19,840
second and you can see there not matching a particular following at the convention or the regular expression

17
00:01:21,130 --> 00:01:25,760
says a change in the way that cotland treats profit for toplevel objects means that we can move our

18
00:01:25,760 --> 00:01:28,930
tag outside the class and make it a contest as to that

19
00:01:33,650 --> 00:01:36,910
real progress we need to make it at a cost now.

20
00:01:36,990 --> 00:01:41,100
When you say you have a hover over the warning we've got the warning about the property tax not being

21
00:01:41,100 --> 00:01:46,220
used at this point in our application it's basically this is now exactly what we want.

22
00:01:46,220 --> 00:01:52,410
Tag is no private to this fall and it won't conflict with any private tag Constance in other files.

23
00:01:52,560 --> 00:01:54,020
Right so I'm with the code.

24
00:01:54,230 --> 00:01:59,810
So we're going to put the code to access the contacts inside the on click method of the final action

25
00:01:59,810 --> 00:02:04,480
button that is Codys I'm going to delete that code first.

26
00:02:05,000 --> 00:02:10,460
Can add some logging I looked the indices.

27
00:02:10,460 --> 00:02:21,250
Let me have Tom Toppin did I come up quite small just put tough happened on click call and starts.

28
00:02:21,280 --> 00:02:21,550
OK.

29
00:02:21,560 --> 00:02:28,310
So there's a log now going to stop cheating kind of replace some code with a declaration of a string

30
00:02:28,310 --> 00:02:28,990
array.

31
00:02:29,000 --> 00:02:37,540
After this logging method so going to be about projection equals the array of parentheses.

32
00:02:38,000 --> 00:02:46,920
And that's going to be contex contract start contacts start to supply and his call name analytical problem.

33
00:02:47,330 --> 00:02:48,800
In closing parentheses.

34
00:02:49,060 --> 00:02:53,960
Now that's cheating because I already knew which column stores the context name but how would I found

35
00:02:53,960 --> 00:02:59,120
this out if I didn't already know that no say had to call up the documentation so that line before.

36
00:02:59,390 --> 00:03:05,840
So I'll go ahead and do that by selecting the contacts in contact contract that contacts those part.

37
00:03:05,840 --> 00:03:09,400
He then opened the door to the quick documentation.

38
00:03:09,670 --> 00:03:15,010
So that's useful if you scroll down and have a bit of a look and say in the columns you eventually get

39
00:03:15,010 --> 00:03:20,410
to display the name on a school prom or the display name for the contact but that only works if you

40
00:03:20,410 --> 00:03:23,570
already have the object name on the screen to click on unfortunately.

41
00:03:23,720 --> 00:03:28,510
You know if you want to find the documentation for something like accessing context data you best friend

42
00:03:28,510 --> 00:03:30,140
is probably the Google search engine.

43
00:03:30,280 --> 00:03:32,840
So think of the key things about what you're trying to do.

44
00:03:32,910 --> 00:03:36,130
Then google these words that's going to put up a browser.

45
00:03:37,060 --> 00:03:44,320
So this case probably would be appropriate to something along the lines of Android contacts content

46
00:03:44,320 --> 00:03:44,850
providers.

47
00:03:44,890 --> 00:03:49,470
So they're looking for the content provider for the Android contex Nick.

48
00:03:49,510 --> 00:03:53,650
Obviously you could phrase that in a number of different ways and it lets you manage to come up with

49
00:03:53,650 --> 00:03:56,710
something really obscure You should probably get some useful results.

50
00:03:56,920 --> 00:03:59,970
You say in my case it's return some interesting looking links.

51
00:04:00,070 --> 00:04:05,080
They all think you can see here to develop a dot Android dot com so they are the official source of

52
00:04:05,290 --> 00:04:08,090
documentation from Google for Android development.

53
00:04:08,130 --> 00:04:15,690
So I'm going to go to this first copy the one that links to content provider and the topics it it's

54
00:04:15,730 --> 00:04:20,980
definitely worth getting into the habit of checking out the Google documentation type provide reference

55
00:04:20,980 --> 00:04:25,930
docs which can be a bit Troyan hard to read as well as guides and trendy docs that are more tutorial

56
00:04:25,960 --> 00:04:27,010
style in nature.

57
00:04:27,160 --> 00:04:33,220
This one's a god document and that will show you more on how to access to context database for the content

58
00:04:33,220 --> 00:04:34,080
provider.

59
00:04:34,440 --> 00:04:37,950
Now by the way we're going to be looking at a lot of this stuff covered here in our next app.

60
00:04:38,140 --> 00:04:43,210
Things like retrieving a single row for example but do take advantage of the Google documentation to

61
00:04:43,210 --> 00:04:45,820
learn more about how Android works in general.

62
00:04:45,940 --> 00:04:46,180
Right.

63
00:04:46,180 --> 00:04:51,090
I'm certainly not going to read all of this scrolling down a bit so we can see this diagram here showing

64
00:04:51,110 --> 00:04:57,280
how the contact details are organized in the description below and you can see that you've got contacts

65
00:04:57,430 --> 00:05:04,990
contract contacts and it mentions here that it's a row or rows representing different people based on

66
00:05:04,990 --> 00:05:10,170
the aggregations for contact rows for that purpose I'd probably say adios.

67
00:05:10,170 --> 00:05:11,500
I going to click on that link now

68
00:05:14,320 --> 00:05:16,250
that brings up the contact contract.

69
00:05:16,270 --> 00:05:18,750
Talk contex a class here.

70
00:05:18,790 --> 00:05:23,710
You can say there's obviously a lot of information on the class but all we're really after here at the

71
00:05:23,710 --> 00:05:27,460
moment in the column is we can use it if we scroll down a little bit.

72
00:05:27,730 --> 00:05:32,930
You say we do get a list of the various columns and there's our trusty display and called name and the

73
00:05:32,930 --> 00:05:39,400
scope problem Me field column 9 because not so much the names are what's really to be technically correct

74
00:05:39,400 --> 00:05:44,770
it's the constants that we should use when referring to the columns column names in the database aren't

75
00:05:44,770 --> 00:05:47,760
really of interest when using a content provider.

76
00:05:47,770 --> 00:05:52,960
In fact when you use a content provider you're not interested in anything about the database.

77
00:05:52,960 --> 00:05:56,490
Now we know that Android users sequel lot to store the contact details.

78
00:05:56,740 --> 00:06:01,450
But Google might decide to change that in the future as long were used to constants defined in this

79
00:06:01,450 --> 00:06:02,330
class.

80
00:06:02,350 --> 00:06:07,510
It won't matter if they use a completely different database with totally different names for the fields.

81
00:06:07,540 --> 00:06:10,240
If I do that they'll update this class.

82
00:06:10,390 --> 00:06:15,400
And because of that I is constant as a static KAC holograms being the same everything.

83
00:06:15,440 --> 00:06:17,980
We'll continue that code will continue to work.

84
00:06:18,370 --> 00:06:23,020
So this fourth entry in the time always display underscore name on a SQL primary and that sounds like

85
00:06:23,030 --> 00:06:29,560
the cube we want right so back to a hard name and we now know where that display name Pommery came from.

86
00:06:29,560 --> 00:06:30,850
Now this is where it gets fun.

87
00:06:31,090 --> 00:06:34,880
If dealing with multiple levels of abstraction is your idea of fun.

88
00:06:34,900 --> 00:06:37,780
So what I'm going to do is talk to comedian and explain what's going on.

89
00:06:38,170 --> 00:06:44,660
So after that valproate bijection lawn and reval spice cursus equals.

90
00:06:44,910 --> 00:06:54,460
Just be content with all the dot queery in print parentheses is going to be contact's contract dot contex

91
00:06:55,030 --> 00:06:58,770
dot content on Wisco you're right.

92
00:06:59,540 --> 00:07:03,860
He he's not going to come on the move to the next line.

93
00:07:03,930 --> 00:07:10,800
We're going to a projection Halma there was no clamor no comma.

94
00:07:11,350 --> 00:07:20,480
Then we're going to end up with contact's contract dot com tax dot net We get into and despite the scorn

95
00:07:20,500 --> 00:07:26,420
I will select just plain call name on school property then we'll just end this for the entry looked

96
00:07:26,460 --> 00:07:29,520
like a parentheses take home a couple of quotes.

97
00:07:29,530 --> 00:07:33,030
If I be on clicking

98
00:07:36,620 --> 00:07:42,630
so we get a content resolver in case you're wondering how this was accessed we get that from the activity

99
00:07:42,640 --> 00:07:48,640
using the Get content resolver method but because this is Katlin we can use the property directly instead

100
00:07:48,640 --> 00:07:49,610
of going through the counter.

101
00:07:49,610 --> 00:07:52,430
So that's how I've been able to use this content resolver here.

102
00:07:52,810 --> 00:07:58,170
So the content result was queery function returns a cursor containing the data we want.

103
00:07:58,270 --> 00:08:02,500
Let's start by looking at those parameters we passed to the query function.

104
00:08:02,520 --> 00:08:04,380
Know we've got something we can query for data.

105
00:08:04,420 --> 00:08:06,790
The content resolver that returns a cursor.

106
00:08:07,000 --> 00:08:10,980
The parameters were passing to the query method of first of the year.

107
00:08:11,240 --> 00:08:14,440
That's this first entry here now.

108
00:08:14,530 --> 00:08:19,340
So this somehow identifies the data source that we want to get data from.

109
00:08:19,360 --> 00:08:24,160
This could be a database and a table for example but this code doesn't need to know where the data is

110
00:08:24,160 --> 00:08:25,750
coming from at the moment.

111
00:08:25,750 --> 00:08:27,290
We don't care about that either.

112
00:08:27,310 --> 00:08:31,990
Now we'll find out soon enough but for now we're just kind of accept that this year-I identifies the

113
00:08:31,990 --> 00:08:33,420
source of our data.

114
00:08:33,640 --> 00:08:35,440
Next we've got projection.

115
00:08:35,440 --> 00:08:39,580
This is just a string array holding the names of the columns that we want to retrieve.

116
00:08:39,580 --> 00:08:43,390
Now we're just asking for the display name primary or display.

117
00:08:43,390 --> 00:08:48,010
I was going to school probably call them here but we could put more fields into the rife with more.

118
00:08:48,280 --> 00:08:53,330
Next you've got selection that's a string containing a filter to determine which rows are returned and

119
00:08:53,330 --> 00:08:56,750
pick if this has the where clause in a sequel statement.

120
00:08:56,770 --> 00:09:02,730
In fact that's exactly what it is without the key word when and in this scenario because we're passing.

121
00:09:02,730 --> 00:09:03,020
No.

122
00:09:03,040 --> 00:09:07,530
We could all rise returned selection items as the next one.

123
00:09:07,550 --> 00:09:13,310
This is an array of values that will be used to replace placeholders in the selection string.

124
00:09:13,600 --> 00:09:20,410
So there are a number of advantages to using the Selection parameter to specify the values we want and

125
00:09:20,410 --> 00:09:21,500
we will look at size.

126
00:09:21,720 --> 00:09:27,970
But basically your selection moppy name equals questionmark and the selection Ogg's could contain a

127
00:09:27,970 --> 00:09:29,510
single variable.

128
00:09:29,740 --> 00:09:32,270
The query would then use the filter the where clause.

129
00:09:32,440 --> 00:09:37,510
If you like name equals Bob because we're not doing any filtering again we're just parsing now.

130
00:09:37,540 --> 00:09:38,790
For this as well.

131
00:09:38,960 --> 00:09:40,820
The last entry is the sort order.

132
00:09:41,020 --> 00:09:45,010
This is just a string containing the names of the fields you want the data sorted by.

133
00:09:45,330 --> 00:09:46,450
So it's just sequel.

134
00:09:46,480 --> 00:09:52,720
Order by clause without the actual keywords siecle K was autobio content resolving with an executed

135
00:09:52,750 --> 00:09:56,240
query against its data source and give us back Kisa.

136
00:09:56,440 --> 00:09:59,000
We can then use the cursor just like we did earlier.

137
00:09:59,200 --> 00:10:05,200
We'll just use a loop to loop through all the rows in the cursor and display the contact names so that

138
00:10:05,200 --> 00:10:05,920
it's easy.

139
00:10:06,010 --> 00:10:08,380
But what's the content resolver all about.

140
00:10:08,680 --> 00:10:13,100
Well I said that there were several levels of redirection here and we'll look at that in the next video.

