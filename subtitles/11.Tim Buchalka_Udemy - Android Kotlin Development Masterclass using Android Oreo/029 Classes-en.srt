1
00:00:04,770 --> 00:00:07,529
The next concept that it's time to talk

2
00:00:07,529 --> 00:00:10,080
about is classes. Now classes are a

3
00:00:10,080 --> 00:00:11,910
fundamental part of object-oriented

4
00:00:11,910 --> 00:00:14,250
programming now we've used some classes

5
00:00:14,250 --> 00:00:15,780
in the previous videos and that's

6
00:00:15,780 --> 00:00:18,900
because stringing int our classes so

7
00:00:18,900 --> 00:00:20,849
think of a class as some sort of thing

8
00:00:20,849 --> 00:00:23,160
in an application now effectively

9
00:00:23,160 --> 00:00:25,500
they're nouns within an application like

10
00:00:25,500 --> 00:00:27,869
for example a player or an enemy or a

11
00:00:27,869 --> 00:00:30,480
train maybe now using computer game

12
00:00:30,480 --> 00:00:32,610
analogies this could all be classes in a

13
00:00:32,610 --> 00:00:35,550
game that we've written so we're going

14
00:00:35,550 --> 00:00:37,410
to go through the process of creating a

15
00:00:37,410 --> 00:00:39,120
class so that you can get a good handle

16
00:00:39,120 --> 00:00:41,850
on why you'd want to use a class now the

17
00:00:41,850 --> 00:00:43,829
android framework contains a load of

18
00:00:43,829 --> 00:00:46,289
classes and a lot of the work in writing

19
00:00:46,289 --> 00:00:48,629
android programs is already done for us

20
00:00:48,629 --> 00:00:51,179
and all the widgets that we add to our

21
00:00:51,179 --> 00:00:53,699
apps our classes the textview widget

22
00:00:53,699 --> 00:00:55,649
that displays so want to displayed hello

23
00:00:55,649 --> 00:00:58,050
world in the last section was an object

24
00:00:58,050 --> 00:01:00,839
created from the textview class so we

25
00:01:00,839 --> 00:01:02,460
didn't have to do a lot to display the

26
00:01:02,460 --> 00:01:05,129
text because the android framework took

27
00:01:05,129 --> 00:01:06,600
care of everything needed to Center the

28
00:01:06,600 --> 00:01:08,970
widget and ultimately display the text

29
00:01:08,970 --> 00:01:10,979
so once we've seen how to write a class

30
00:01:10,979 --> 00:01:13,710
we'll look at how to use them now as an

31
00:01:13,710 --> 00:01:15,689
example of some classes we're going to

32
00:01:15,689 --> 00:01:18,240
create some basic ones that you can use

33
00:01:18,240 --> 00:01:20,520
in an adventure game now we're not going

34
00:01:20,520 --> 00:01:22,649
to be producing a full game but we'll

35
00:01:22,649 --> 00:01:24,600
use some other classes that a game may

36
00:01:24,600 --> 00:01:26,759
use just to look at the concept of

37
00:01:26,759 --> 00:01:29,729
classes in order to create a class we

38
00:01:29,729 --> 00:01:31,409
need to make sure that the project pane

39
00:01:31,409 --> 00:01:34,590
is actually expanded as it is on the

40
00:01:34,590 --> 00:01:36,299
right-hand side then we need to come

41
00:01:36,299 --> 00:01:38,579
over here to the Java folder right click

42
00:01:38,579 --> 00:01:41,820
that select new and then select Kotlin

43
00:01:41,820 --> 00:01:44,969
file slash class now we're going to type

44
00:01:44,969 --> 00:01:49,680
in player for the name of the class so

45
00:01:49,680 --> 00:01:51,210
we're creating a class called player

46
00:01:51,210 --> 00:01:54,329
which is going to have some basic

47
00:01:54,329 --> 00:01:56,820
information about player in a game now

48
00:01:56,820 --> 00:01:58,979
the convention is that class names start

49
00:01:58,979 --> 00:02:01,380
with a capital P and you saw that I used

50
00:02:01,380 --> 00:02:03,630
a capital P for the word player so make

51
00:02:03,630 --> 00:02:06,299
sure to use that capital P now in the

52
00:02:06,299 --> 00:02:08,070
kind of drop down here plus click on

53
00:02:08,070 --> 00:02:10,700
that now you want to choose class here

54
00:02:10,700 --> 00:02:13,260
now it's not that important you can

55
00:02:13,260 --> 00:02:15,270
leave it set to file if you want but

56
00:02:15,270 --> 00:02:17,520
doing it this way changing it and

57
00:02:17,520 --> 00:02:18,510
selecting class

58
00:02:18,510 --> 00:02:21,709
saves you a bit of typing so click on ok

59
00:02:21,709 --> 00:02:24,930
and you can see that Android studio has

60
00:02:24,930 --> 00:02:26,879
automatically created the basic

61
00:02:26,879 --> 00:02:29,310
declaration for our new class now

62
00:02:29,310 --> 00:02:31,260
there's not a lot of code in there so if

63
00:02:31,260 --> 00:02:33,450
you chose and file a moment ago you

64
00:02:33,450 --> 00:02:34,860
wouldn't have a lot of code to type in

65
00:02:34,860 --> 00:02:36,180
you have to just type in what you can

66
00:02:36,180 --> 00:02:38,250
see on the screen there so the good

67
00:02:38,250 --> 00:02:40,079
thing with the class is it can be a

68
00:02:40,079 --> 00:02:43,290
container for lots of variables and it

69
00:02:43,290 --> 00:02:45,120
can also have program code that relates

70
00:02:45,120 --> 00:02:47,700
just to a player now we're going to go

71
00:02:47,700 --> 00:02:48,900
through and explore that a little bit

72
00:02:48,900 --> 00:02:51,390
further what we'll start off doing is

73
00:02:51,390 --> 00:02:53,220
sending up some variables that would be

74
00:02:53,220 --> 00:02:55,620
appropriate if this was a player class

75
00:02:55,620 --> 00:02:57,989
in a game all right so what are some

76
00:02:57,989 --> 00:02:59,970
things that maybe a player in a game

77
00:02:59,970 --> 00:03:01,799
would have well they're going to need a

78
00:03:01,799 --> 00:03:04,049
name to start with we're not going to

79
00:03:04,049 --> 00:03:05,329
have any players with that name so

80
00:03:05,329 --> 00:03:08,280
whenever we create new plays we're going

81
00:03:08,280 --> 00:03:10,290
to have to give them a name now in

82
00:03:10,290 --> 00:03:12,659
Kotlin we can specify the name in what's

83
00:03:12,659 --> 00:03:15,090
called the primary constructor you know

84
00:03:15,090 --> 00:03:16,829
there are a couple of ways of doing that

85
00:03:16,829 --> 00:03:18,540
but the most common is to add the

86
00:03:18,540 --> 00:03:22,170
variable to the class declaration so I'm

87
00:03:22,170 --> 00:03:23,730
gonna have a go at doing that so a line

88
00:03:23,730 --> 00:03:26,010
fire we've got class player I'm gonna

89
00:03:26,010 --> 00:03:27,419
come over here to the end of the word

90
00:03:27,419 --> 00:03:30,419
player and at parentheses anything I'm

91
00:03:30,419 --> 00:03:34,459
going to type Val space name colon in

92
00:03:34,459 --> 00:03:38,340
the word string so what we've done there

93
00:03:38,340 --> 00:03:40,470
is to tell Kotlin that a name must be

94
00:03:40,470 --> 00:03:42,870
supplied whenever a new player objects

95
00:03:42,870 --> 00:03:45,030
are created and we're gonna be seeing

96
00:03:45,030 --> 00:03:47,639
how to create them shortly now we also

97
00:03:47,639 --> 00:03:49,560
need to keep track of how many lives a

98
00:03:49,560 --> 00:03:51,900
player has as well as their score and

99
00:03:51,900 --> 00:03:54,209
the level they've reached in the game so

100
00:03:54,209 --> 00:03:56,760
we need a few more variables so let's go

101
00:03:56,760 --> 00:03:59,340
ahead and create those as well I'm going

102
00:03:59,340 --> 00:04:00,720
to put those in the class starting on

103
00:04:00,720 --> 00:04:03,150
line six as you can see here we're going

104
00:04:03,150 --> 00:04:09,060
to type VAR space lives equals three var

105
00:04:09,060 --> 00:04:13,650
level equals one and var score equals

106
00:04:13,650 --> 00:04:16,500
zero alright so that's the basic class

107
00:04:16,500 --> 00:04:19,109
created now it doesn't do a lot at the

108
00:04:19,109 --> 00:04:21,419
moment but it'll have a name when we

109
00:04:21,419 --> 00:04:24,060
create it as well as default values for

110
00:04:24,060 --> 00:04:26,099
the number of lives the level and the

111
00:04:26,099 --> 00:04:28,500
score now players start off with three

112
00:04:28,500 --> 00:04:30,360
lives and they'll start at level one and

113
00:04:30,360 --> 00:04:32,450
their score will actually be zero

114
00:04:32,450 --> 00:04:34,800
no-no-no self-declared those three

115
00:04:34,800 --> 00:04:37,530
variables using var rather than valve

116
00:04:37,530 --> 00:04:39,540
now the name won't change after we

117
00:04:39,540 --> 00:04:41,610
create the player so that's declared to

118
00:04:41,610 --> 00:04:43,650
be vowel we expect the score and the

119
00:04:43,650 --> 00:04:45,540
level to increase and the player may

120
00:04:45,540 --> 00:04:47,970
also lose lives so consequently those

121
00:04:47,970 --> 00:04:50,700
three variables have to be VARs now

122
00:04:50,700 --> 00:04:52,230
another thing to notice is the way

123
00:04:52,230 --> 00:04:54,600
Kotlin can infer the types of variables

124
00:04:54,600 --> 00:04:56,460
a lot of the time that we have talked

125
00:04:56,460 --> 00:04:58,770
about that before now with a signed

126
00:04:58,770 --> 00:05:01,139
integer values to lives level and score

127
00:05:01,139 --> 00:05:03,540
so we don't have to specify their type

128
00:05:03,540 --> 00:05:06,360
now we have an aside any valley to name

129
00:05:06,360 --> 00:05:09,150
yet so we have to tell Kotlin that's

130
00:05:09,150 --> 00:05:11,280
going to hold a string and that's why

131
00:05:11,280 --> 00:05:14,220
we've used this string type here on line 5

132
00:05:14,220 --> 00:05:16,770
all right let's create some players and

133
00:05:16,770 --> 00:05:18,810
see what we can do with our bass player

134
00:05:18,810 --> 00:05:21,240
class so I'm going to switch back to

135
00:05:21,240 --> 00:05:23,880
main Katy so you can go to clicking up

136
00:05:23,880 --> 00:05:25,440
here in the tap and for some reason

137
00:05:25,440 --> 00:05:26,550
that's not open you can double click

138
00:05:26,550 --> 00:05:28,950
main dot Katie over here to open it up

139
00:05:28,950 --> 00:05:31,139
and what we're going to do is delete all

140
00:05:31,139 --> 00:05:34,290
this other code out completely right up

141
00:05:34,290 --> 00:05:36,630
to but not including line 1 so we've

142
00:05:36,630 --> 00:05:39,270
just got the first line fund main and

143
00:05:39,270 --> 00:05:41,520
nothing in between the code block or the

144
00:05:41,520 --> 00:05:44,720
block of code from lines to one numbers

145
00:05:44,720 --> 00:05:47,220
alright so how do we actually create a

146
00:05:47,220 --> 00:05:49,710
player called team well we can actually

147
00:05:49,710 --> 00:05:57,150
type Val Tim equals player then double

148
00:05:57,150 --> 00:06:03,840
quotes Tim and we can type prickling Tim

149
00:06:03,840 --> 00:06:09,320
dot name print Lynn Tim got lives

150
00:06:09,320 --> 00:06:16,500
ritalin Tim that level and ritalin Tim

151
00:06:16,500 --> 00:06:19,500
got school and by the way ignore this

152
00:06:19,500 --> 00:06:22,140
name column that's appeared before Tim

153
00:06:22,140 --> 00:06:24,180
I'll come back to that soon and explain

154
00:06:24,180 --> 00:06:26,520
what it is it's not part of the code so

155
00:06:26,520 --> 00:06:27,780
you don't actually have to type that in

156
00:06:27,780 --> 00:06:29,669
alright so on line two

157
00:06:29,669 --> 00:06:32,490
we created a new instance of the player

158
00:06:32,490 --> 00:06:35,160
class now that's an important concept to

159
00:06:35,160 --> 00:06:37,169
understand the difference between the

160
00:06:37,169 --> 00:06:40,710
class and instances of that class now

161
00:06:40,710 --> 00:06:42,330
one way to look at it is to consider the

162
00:06:42,330 --> 00:06:45,060
classification of life on this planet

163
00:06:45,060 --> 00:06:46,529
now all life forms

164
00:06:46,529 --> 00:06:48,179
fit into different classifications and

165
00:06:48,179 --> 00:06:50,219
we're all members of the class called

166
00:06:50,219 --> 00:06:52,769
humans now we were all created from a

167
00:06:52,769 --> 00:06:54,989
template that defines a human and we're

168
00:06:54,989 --> 00:06:58,019
all individual instances of human so my

169
00:06:58,019 --> 00:07:00,389
name property has the valley Tim but

170
00:07:00,389 --> 00:07:02,819
yours probably has a different value now

171
00:07:02,819 --> 00:07:04,559
of course people can share the same name

172
00:07:04,559 --> 00:07:06,509
but if there's another timber chart or

173
00:07:06,509 --> 00:07:07,919
instance out there they'll have

174
00:07:07,919 --> 00:07:09,719
different values for other properties

175
00:07:09,719 --> 00:07:11,849
such as their heart or hair color or

176
00:07:11,849 --> 00:07:14,399
whatever so the class is called human

177
00:07:14,399 --> 00:07:17,219
and we're all instances of the human

178
00:07:17,219 --> 00:07:19,349
class and that's really the difference

179
00:07:19,349 --> 00:07:21,929
between the two things so the class is

180
00:07:21,929 --> 00:07:24,329
just a template and the values for these

181
00:07:24,329 --> 00:07:26,339
properties will be assigned when we

182
00:07:26,339 --> 00:07:29,279
create instances of the player class so

183
00:07:29,279 --> 00:07:31,349
let's actually run this program and see

184
00:07:31,349 --> 00:07:37,129
what happens

185
00:07:37,129 --> 00:07:39,509
okay so we can see the valleys of the

186
00:07:39,509 --> 00:07:42,120
properties printed out over here no used

187
00:07:42,120 --> 00:07:44,879
dot notation to refer to the various

188
00:07:44,879 --> 00:07:47,550
properties that Tim has so on line three

189
00:07:47,550 --> 00:07:49,979
Tim dot name refers to the name property

190
00:07:49,979 --> 00:07:51,479
and then the other ones

191
00:07:51,479 --> 00:07:53,190
Tim dot life's refers to the lives

192
00:07:53,190 --> 00:07:55,949
property and so on now as well as

193
00:07:55,949 --> 00:07:57,990
properties classes can also have

194
00:07:57,990 --> 00:08:00,419
behavior and we're going to change some

195
00:08:00,419 --> 00:08:02,099
of the properties it's going to get a

196
00:08:02,099 --> 00:08:04,020
bit tedious typing all those print line

197
00:08:04,020 --> 00:08:06,539
statements in and it'll be really handy

198
00:08:06,539 --> 00:08:08,819
if plow instances were able to display

199
00:08:08,819 --> 00:08:11,460
these values so one way to do this is to

200
00:08:11,460 --> 00:08:13,889
add a show function to the player class

201
00:08:13,889 --> 00:08:15,539
so let's go back to the player class

202
00:08:15,539 --> 00:08:18,330
file and do that so I'm going to come

203
00:08:18,330 --> 00:08:21,509
down here and I'm going to leave a gap

204
00:08:21,509 --> 00:08:23,490
between the VAR score line and the start

205
00:08:23,490 --> 00:08:25,740
of the function type fun show

206
00:08:25,740 --> 00:08:28,770
parentheses the open a code block the

207
00:08:28,770 --> 00:08:32,010
matching of this high print line' then

208
00:08:32,010 --> 00:08:34,560
we're going to do parentheses they're

209
00:08:34,560 --> 00:08:38,490
going to do three double quotes three

210
00:08:38,490 --> 00:08:41,969
like that I'm gonna press ENTER and I'm

211
00:08:41,969 --> 00:08:43,110
gonna make a space there and I'm gonna

212
00:08:43,110 --> 00:08:52,230
type of name : dollar name lives dollar lives

213
00:08:52,230 --> 00:08:58,170
the next line level : the level and then

214
00:08:58,170 --> 00:09:03,149
the last line score : on a school then

215
00:09:03,149 --> 00:09:04,529
for the ending parentheses I'm going to

216
00:09:04,529 --> 00:09:06,660
do three double quotes again one two

217
00:09:06,660 --> 00:09:09,570
three so the show function is quite

218
00:09:09,570 --> 00:09:12,120
simple it just prints the values of the

219
00:09:12,120 --> 00:09:14,490
properties now I've used triple speech

220
00:09:14,490 --> 00:09:16,230
marks or double quotes to format the

221
00:09:16,230 --> 00:09:18,079
values which we haven't seen before

222
00:09:18,079 --> 00:09:20,160
they're using these triple double quotes

223
00:09:20,160 --> 00:09:22,079
like this is a way to split of string

224
00:09:22,079 --> 00:09:24,570
over several lines and you'll see the

225
00:09:24,570 --> 00:09:25,890
effect that it has when we actually run

226
00:09:25,890 --> 00:09:28,230
the program so we'll go back to main

227
00:09:28,230 --> 00:09:31,020
katie and we can now remove all these

228
00:09:31,020 --> 00:09:32,940
print lin method calls now because we

229
00:09:32,940 --> 00:09:33,870
don't need them anymore

230
00:09:33,870 --> 00:09:36,329
so let's now move these print line

231
00:09:36,329 --> 00:09:38,370
statements there for them actually what

232
00:09:38,370 --> 00:09:40,829
I'll do is I'll comment them out and I'm

233
00:09:40,829 --> 00:09:45,649
gonna call the Tim show function instead

234
00:09:45,649 --> 00:09:50,550
so I'm gonna tim dot show so let's

235
00:09:50,550 --> 00:09:55,100
actually run this

236
00:09:55,100 --> 00:09:57,750
and you see we've got named Tim lives

237
00:09:57,750 --> 00:10:01,260
level and score so we used dot notation

238
00:10:01,260 --> 00:10:04,110
to call functions on class instances as

239
00:10:04,110 --> 00:10:07,260
well as to access the properties so here

240
00:10:07,260 --> 00:10:09,750
Tim dot show that were using on line

241
00:10:09,750 --> 00:10:12,330
seven that calls the show function on

242
00:10:12,330 --> 00:10:15,570
the variable Tim and if you recall Tim's

243
00:10:15,570 --> 00:10:18,450
an instance of the player class and all

244
00:10:18,450 --> 00:10:20,339
player instances will have a show

245
00:10:20,339 --> 00:10:23,010
function now we can see that by creating

246
00:10:23,010 --> 00:10:25,080
another player instance so I'm going to

247
00:10:25,080 --> 00:10:28,080
call this one of the ways I'm gonna type

248
00:10:28,080 --> 00:10:32,730
Val Louise equals player capital P

249
00:10:32,730 --> 00:10:38,640
parentheses Louise then I'm gonna type

250
00:10:38,640 --> 00:10:43,620
Louise dot level equals 5 then on top of

251
00:10:43,620 --> 00:10:46,589
the Wiis dot show so we provide the name

252
00:10:46,589 --> 00:10:49,470
Louise when we create the new player

253
00:10:49,470 --> 00:10:51,720
instance and I've also set Louise's

254
00:10:51,720 --> 00:10:54,209
level to five so if we run the program

255
00:10:54,209 --> 00:10:56,550
now we should give the details of Louise

256
00:10:56,550 --> 00:11:01,230
printed out after my after Tim

257
00:11:01,230 --> 00:11:03,120
and you can see we've got named Tim

258
00:11:03,120 --> 00:11:05,850
laughs three level one score zero and

259
00:11:05,850 --> 00:11:08,670
then Louise lives three level five this

260
00:11:08,670 --> 00:11:11,910
time and score zero so each player will

261
00:11:11,910 --> 00:11:14,010
have a different name and their scores

262
00:11:14,010 --> 00:11:15,810
and these other values will also be

263
00:11:15,810 --> 00:11:18,210
different now with during these valleys

264
00:11:18,210 --> 00:11:20,280
as properties in the class and each

265
00:11:20,280 --> 00:11:22,410
instance of the player class will have

266
00:11:22,410 --> 00:11:25,500
its own values for those properties now

267
00:11:25,500 --> 00:11:27,900
the codes slightly entirely because

268
00:11:27,900 --> 00:11:30,090
Louise is about because Louise was

269
00:11:30,090 --> 00:11:32,550
created with a default level of one that

270
00:11:32,550 --> 00:11:34,440
we changed it on the next line to five

271
00:11:34,440 --> 00:11:36,960
it actually been needed to specify her

272
00:11:36,960 --> 00:11:38,940
level when we created that always

273
00:11:38,940 --> 00:11:42,150
instance a player now in Java you can

274
00:11:42,150 --> 00:11:43,580
have different constructors for a class

275
00:11:43,580 --> 00:11:45,870
so you could do something like this you

276
00:11:45,870 --> 00:11:48,330
can pick up to Louise you can put

277
00:11:48,330 --> 00:11:52,740
something like comma five and then

278
00:11:52,740 --> 00:11:55,560
delete this line now we've got an error

279
00:11:55,560 --> 00:11:57,510
because our class isn't set up to accept

280
00:11:57,510 --> 00:12:00,660
a level when we create it now as I said

281
00:12:00,660 --> 00:12:02,700
in Java he'd create different

282
00:12:02,700 --> 00:12:04,830
constructors that would accept different

283
00:12:04,830 --> 00:12:07,350
arguments when creating the class now

284
00:12:07,350 --> 00:12:09,540
that's also possible in Collin but

285
00:12:09,540 --> 00:12:11,430
Kotlin allows two fault values for

286
00:12:11,430 --> 00:12:13,770
arguments now you'll see Java classes

287
00:12:13,770 --> 00:12:15,570
with different constructors when we

288
00:12:15,570 --> 00:12:16,860
start using the android framework

289
00:12:16,860 --> 00:12:18,930
classes so don't worry too much about

290
00:12:18,930 --> 00:12:21,180
them at this stage they're just Java's

291
00:12:21,180 --> 00:12:22,890
way of doing what we're about to do in

292
00:12:22,890 --> 00:12:25,320
Collin so what we can do is change our

293
00:12:25,320 --> 00:12:27,360
player class to allow the number of

294
00:12:27,360 --> 00:12:30,360
likes and the level to be specified when

295
00:12:30,360 --> 00:12:33,240
we create the class instances so let's

296
00:12:33,240 --> 00:12:36,510
actually go back to player Katie and up

297
00:12:36,510 --> 00:12:39,810
here on the line line five we're going

298
00:12:39,810 --> 00:12:43,290
to put a comma after the string comma

299
00:12:43,290 --> 00:12:50,010
space var level colon space int equals

300
00:12:50,010 --> 00:12:52,770
one so because we've now declared the

301
00:12:52,770 --> 00:12:55,140
level property in the constructor we can

302
00:12:55,140 --> 00:12:57,120
delete its declaration inside the class

303
00:12:57,120 --> 00:12:59,850
in fact we have to do that you can't to

304
00:12:59,850 --> 00:13:01,440
clear the same thing twice and you can

305
00:13:01,440 --> 00:13:02,640
see we've actually got an error here

306
00:13:02,640 --> 00:13:05,430
because of that conflicting declarations

307
00:13:05,430 --> 00:13:10,180
so let's go ahead and delete that

308
00:13:10,180 --> 00:13:12,730
and the errors then disappear so now

309
00:13:12,730 --> 00:13:14,530
that we've actually done that we can

310
00:13:14,530 --> 00:13:16,060
provide a value for leather when we

311
00:13:16,060 --> 00:13:16,870
create Louise

312
00:13:16,870 --> 00:13:18,550
so the error in Maine should have been

313
00:13:18,550 --> 00:13:21,160
fixed so if we go back to that now you

314
00:13:21,160 --> 00:13:22,360
can see the error fixed itself

315
00:13:22,360 --> 00:13:24,850
automatically and if we run the program

316
00:13:24,850 --> 00:13:30,850
now we should see that level has been

317
00:13:30,850 --> 00:13:32,980
set to fire which it has for Louise and

318
00:13:32,980 --> 00:13:35,230
that's because we've set the level to be

319
00:13:35,230 --> 00:13:37,630
five in the case of Tim never was set to

320
00:13:37,630 --> 00:13:40,000
one because that's the default value so

321
00:13:40,000 --> 00:13:41,170
in other words because we haven't

322
00:13:41,170 --> 00:13:44,170
provided a valley for Tim on line two

323
00:13:44,170 --> 00:13:46,810
the default value of one's used so in

324
00:13:46,810 --> 00:13:49,080
other words Tim level stays at level one

325
00:13:49,080 --> 00:13:51,910
and you may have noticed when I switched

326
00:13:51,910 --> 00:13:53,830
back to the mains to the main function

327
00:13:53,830 --> 00:13:57,970
that the line the line 9 changed and he

328
00:13:57,970 --> 00:13:59,860
saw a level actually appear so the veldt

329
00:13:59,860 --> 00:14:01,750
the value of farm now has the word level

330
00:14:01,750 --> 00:14:03,820
in front of it and as I mentioned

331
00:14:03,820 --> 00:14:05,380
previously and it's got part of the code

332
00:14:05,380 --> 00:14:08,350
that's Android studio showing us what

333
00:14:08,350 --> 00:14:11,170
the various arguments represent so

334
00:14:11,170 --> 00:14:13,570
Louise is the valley we're providing for

335
00:14:13,570 --> 00:14:16,480
the name and fives the valley for the

336
00:14:16,480 --> 00:14:18,580
level now that's quite a neat feature

337
00:14:18,580 --> 00:14:20,920
and it's very helpful to have a reminder

338
00:14:20,920 --> 00:14:23,650
of what the arguments are it can be

339
00:14:23,650 --> 00:14:25,000
confusing when you've watched the code

340
00:14:25,000 --> 00:14:26,980
on a video though you don't have to type

341
00:14:26,980 --> 00:14:29,410
the name : a level : here I'm actually

342
00:14:29,410 --> 00:14:31,480
put on the screen automatically by

343
00:14:31,480 --> 00:14:33,910
Android studio now if you're using the

344
00:14:33,910 --> 00:14:36,550
default color scheme the argument names

345
00:14:36,550 --> 00:14:38,830
hints appear in a light gray with a

346
00:14:38,830 --> 00:14:41,020
light background as you can see here but

347
00:14:41,020 --> 00:14:42,820
in the dark color scheme if you're

348
00:14:42,820 --> 00:14:44,380
running that they're the same but the

349
00:14:44,380 --> 00:14:45,970
backgrounds have been harder to see

350
00:14:45,970 --> 00:14:49,030
against dark colors black background so

351
00:14:49,030 --> 00:14:50,290
remember that they're displayed by

352
00:14:50,290 --> 00:14:52,450
Android studio to remind you what the

353
00:14:52,450 --> 00:14:54,280
arguments are they're not pile of the

354
00:14:54,280 --> 00:14:55,860
code and you shouldn't be typing them in

355
00:14:55,860 --> 00:14:58,150
alright before I show you another way to

356
00:14:58,150 --> 00:14:59,590
specify the values for these arguments

357
00:14:59,590 --> 00:15:03,520
it's actually time for a challenge so

358
00:15:03,520 --> 00:15:05,920
your challenge is to modify the player

359
00:15:05,920 --> 00:15:08,050
class so that its constructor allows

360
00:15:08,050 --> 00:15:10,810
different values for the lofts and score

361
00:15:10,810 --> 00:15:13,030
properties now the defaults for both

362
00:15:13,030 --> 00:15:14,380
will be the defaults that the class

363
00:15:14,380 --> 00:15:16,780
currently using when you've made the

364
00:15:16,780 --> 00:15:19,480
changes create two new instances of the

365
00:15:19,480 --> 00:15:21,100
player class and you can call them

366
00:15:21,100 --> 00:15:23,500
anything you like so the first in

367
00:15:23,500 --> 00:15:26,710
should have a level of 4l8 lives the

368
00:15:26,710 --> 00:15:28,060
second one should have a level of two

369
00:15:28,060 --> 00:15:31,960
five lives and a score of 1,000 use the

370
00:15:31,960 --> 00:15:33,670
show function to print out the values

371
00:15:33,670 --> 00:15:36,430
for your new instances and note that

372
00:15:36,430 --> 00:15:38,050
when you add parameters that have

373
00:15:38,050 --> 00:15:40,870
default values they must be listed after

374
00:15:40,870 --> 00:15:43,540
any parameters that don't so they must

375
00:15:43,540 --> 00:15:45,280
be the first parameter that's declared

376
00:15:45,280 --> 00:15:47,050
in the player class and that's why I

377
00:15:47,050 --> 00:15:49,420
added level after it so that's the

378
00:15:49,420 --> 00:15:50,800
challenge pause the video now and see

379
00:15:50,800 --> 00:15:52,600
how you go and I'll see you when you get

380
00:15:52,600 --> 00:15:54,940
back and show you the solution pause the

381
00:15:54,940 --> 00:15:57,700
video now

382
00:15:57,700 --> 00:15:59,950
all right so to allow the number of

383
00:15:59,950 --> 00:16:01,960
lives and the score to be set when we

384
00:16:01,960 --> 00:16:04,390
create new player instances we need to

385
00:16:04,390 --> 00:16:06,160
add two more parameters to the class

386
00:16:06,160 --> 00:16:09,100
declaration now because that results in

387
00:16:09,100 --> 00:16:10,690
duplicate declarations for the two

388
00:16:10,690 --> 00:16:13,030
properties we also have to delete them

389
00:16:13,030 --> 00:16:15,400
from inside the class so let's go have a

390
00:16:15,400 --> 00:16:16,630
look at doing that let me go to the

391
00:16:16,630 --> 00:16:19,090
player class we're going to start by

392
00:16:19,090 --> 00:16:22,000
leaving Vout name string there and also

393
00:16:22,000 --> 00:16:24,460
leave the level as it is after the in T

394
00:16:24,460 --> 00:16:25,510
equals wonderful level we're going to

395
00:16:25,510 --> 00:16:32,110
put a comma var lives colon int equals

396
00:16:32,110 --> 00:16:36,480
three comma and var score colon int

397
00:16:36,480 --> 00:16:38,100
equals zero

398
00:16:38,100 --> 00:16:40,600
we no need to delete these two lines the

399
00:16:40,600 --> 00:16:42,310
var lives equals three and score equals

400
00:16:42,310 --> 00:16:44,350
zero because we've defined them now as

401
00:16:44,350 --> 00:16:46,630
arguments in the class definition on

402
00:16:46,630 --> 00:16:48,730
line five and that should fix the errors

403
00:16:48,730 --> 00:16:50,290
but you can see that they have been

404
00:16:50,290 --> 00:16:52,750
fixed so that's the change to our player

405
00:16:52,750 --> 00:16:55,030
class now that we've done that we can

406
00:16:55,030 --> 00:16:56,980
create two new player objects and

407
00:16:56,980 --> 00:17:00,640
specify their lives and score now I use

408
00:17:00,640 --> 00:17:02,710
the term objects there instead of

409
00:17:02,710 --> 00:17:04,780
instances I'm actually the same thing

410
00:17:04,780 --> 00:17:06,970
you'll hear people talk about instances

411
00:17:06,970 --> 00:17:09,490
of a class or objects an object is just

412
00:17:09,490 --> 00:17:11,470
an instance of a class so the two terms

413
00:17:11,470 --> 00:17:14,170
are used interchangeably all right so

414
00:17:14,170 --> 00:17:16,810
let's go back to the main dot Katie and

415
00:17:16,810 --> 00:17:19,240
let's add this extra take two extra

416
00:17:19,240 --> 00:17:22,800
instances so start with vowel space gr8

417
00:17:22,800 --> 00:17:30,040
equals player parentheses gr8 comma

418
00:17:30,040 --> 00:17:37,920
space comma 4 comma 8 and then Val

419
00:17:37,920 --> 00:17:45,790
want to watch equals player and we

420
00:17:45,790 --> 00:17:52,860
username ace comma 2 comma 5 comma 1000

421
00:17:52,860 --> 00:17:55,450
then let's actually show this as well so

422
00:17:55,450 --> 00:18:00,760
gr8 dot show and then want to watch dot

423
00:18:00,760 --> 00:18:06,580
show so let's now run the code and you

424
00:18:06,580 --> 00:18:08,530
can see we've got the output there for

425
00:18:08,530 --> 00:18:10,060
the other two then Tim and the Louise

426
00:18:10,060 --> 00:18:11,710
but also for the GRA

427
00:18:11,710 --> 00:18:15,850
live says 18 levels for an ace life's 5

428
00:18:15,850 --> 00:18:19,360
level to score 1000 and you may have

429
00:18:19,360 --> 00:18:20,920
noticed when I was typing the arguments

430
00:18:20,920 --> 00:18:22,780
that Android studio showed the name of

431
00:18:22,780 --> 00:18:24,580
the argument that corresponds to the

432
00:18:24,580 --> 00:18:25,930
position where I'm topping the numbers

433
00:18:25,930 --> 00:18:27,970
now you may have wondered what use these

434
00:18:27,970 --> 00:18:29,860
argument names hints were when I

435
00:18:29,860 --> 00:18:31,690
mentioned them before but now that we've

436
00:18:31,690 --> 00:18:33,550
got three numbers in the row for one to

437
00:18:33,550 --> 00:18:35,560
watch you can see that they're useful

438
00:18:35,560 --> 00:18:37,030
without those hints you'd have to

439
00:18:37,030 --> 00:18:39,190
remember what order you define the

440
00:18:39,190 --> 00:18:41,170
parameters in the player class but now

441
00:18:41,170 --> 00:18:43,060
we can clearly see that 5 is the number

442
00:18:43,060 --> 00:18:46,120
of lives and 1000 is the score this is

443
00:18:46,120 --> 00:18:49,270
the code on line 13 and as I said we ran

444
00:18:49,270 --> 00:18:50,470
the program when we got the correct

445
00:18:50,470 --> 00:18:53,140
results now by the way setting the score

446
00:18:53,140 --> 00:18:54,970
like this would be useful if we were

447
00:18:54,970 --> 00:18:56,860
restoring a saved game for these two

448
00:18:56,860 --> 00:18:58,780
players and having to create them with

449
00:18:58,780 --> 00:19:00,130
the valley's they had when they saved

450
00:19:00,130 --> 00:19:01,930
the game in case you're wondering now

451
00:19:01,930 --> 00:19:04,270
I've used modern text speak style names

452
00:19:04,270 --> 00:19:06,640
there just to show that you have you

453
00:19:06,640 --> 00:19:08,950
can't have numbers in variable names so

454
00:19:08,950 --> 00:19:10,270
variable names mustn't start with a

455
00:19:10,270 --> 00:19:12,460
number but you can use numbers within

456
00:19:12,460 --> 00:19:14,800
the names of variables all right so

457
00:19:14,800 --> 00:19:16,510
that's been a quick overview of what

458
00:19:16,510 --> 00:19:18,940
classes are. Now you'll find if you go

459
00:19:18,940 --> 00:19:20,170
through the course that Android has a

460
00:19:20,170 --> 00:19:22,660
lot of classes built into it a great

461
00:19:22,660 --> 00:19:24,430
deal of our programming will be using

462
00:19:24,430 --> 00:19:26,440
the functionality provided by those

463
00:19:26,440 --> 00:19:28,480
built-in classes and we're going to be

464
00:19:28,480 --> 00:19:29,830
exploring that a lot of that as we go

465
00:19:29,830 --> 00:19:32,110
through but for now though let's move on

466
00:19:32,110 --> 00:19:35,040
to the next video.

