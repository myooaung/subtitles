WEBVTT
1

00:00:05.450 --> 00:00:10.890

Tudo bem, ento vamos experimentar a imagem agora. Quero mostrar um problema em potencial que voc pode obter com determinados



2

00:00:10.890 --> 00:00:12.420

tamanhos de imagem em nosso aplicativo.



3

00:00:12.580 --> 00:00:17.610

Agora, para fazer isso, sem ter que vasculhar todas as imagens na esperana de que



4

00:00:17.670 --> 00:00:24.690

haja um do tamanho certo, modifiquei o cdigo um pouco. Por isso, codifiquei um URL de imagem, para que a atividade de detalhes



5

00:00:24.830 --> 00:00:28.370

da foto sempre exiba minha imagem, em vez da que foi baixada do Flickr.



6

00:00:28.380 --> 00:00:33.270

Ento, o que vamos fazer  executar o aplicativo em todos os trs emuladores novamente e, como eu disse,



7

00:00:33.270 --> 00:00:39.030

codifiquei a URL para que eu sempre obtenha a mesma imagem. As miniaturas so todas diferentes, mas todas elas exibem essa imagem da



8

00:00:39.030 --> 00:00:41.390

floresta de bambu quando eu as bato por muito tempo.



9

00:00:41.630 --> 00:00:47.770

Ento, vou executar o aplicativo primeiro em todos os trs emuladores e voc pode ver o que quero dizer.



10

00:00:52.000 --> 00:00:53.090

D a todos um momento para comear.



11

00:00:53.280 --> 00:00:58.340

Ento temos nossa API 17, emulador API 21 e API 26, s vou abrir



12

00:00:58.650 --> 00:00:59.090

isso.



13

00:01:02.090 --> 00:01:07.690

OK e se eu bater um pouco, voc pode ver que conseguimos essa imagem de bambu.



14

00:01:07.760 --> 00:01:13.170

O prximo, e depois a API 26, apenas para confirmar que  o caso que eu



15

00:01:13.180 --> 00:01:15.420

vou fazer outra imagem, selecione outra miniatura,



16

00:01:15.550 --> 00:01:18.870

e voc pode ver que temos a mesma imagem.



17

00:01:19.060 --> 00:01:22.690

Ento, novamente, as miniaturas so todas diferentes, mas todas exibem essa imagem de



18

00:01:22.690 --> 00:01:28.690

floresta de bambu quando eu as bato por muito tempo. E como voc pode ver aqui, todos os trs emuladores so muito parecidos com a imagem que



19

00:01:28.690 --> 00:01:29.930

se encaixa perfeitamente no centro da tela.



20

00:01:30.120 --> 00:01:31.340

Agora vamos experimentar



21

00:01:31.360 --> 00:01:34.720

com o atributo adjustViewBounds que mencionei h alguns vdeos atrs.



22

00:01:34.870 --> 00:01:40.330

Ento, se voltarmos ao Android Studio, vou abrir os detalhes do sublinhado da foto do contedo na pasta layouts, e vou



23

00:01:40.330 --> 00:01:40.700

fechar



24

00:01:45.850 --> 00:01:49.140

o painel do projeto por enquanto e criar um pouco mais de espao.



25

00:01:49.290 --> 00:01:53.700

Ento, quando eu seleciono a visualizao da imagem, o que podemos fazer aqui na



26

00:01:53.700 --> 00:02:00.920

rvore de componentes, ou no designer ou blueprint, e isso vai carregar os atributos, e este adjustViewBounds  o que ns queremos dar



27

00:02:00.920 --> 00:02:01.740

uma olhada.



28

00:02:01.970 --> 00:02:06.170

Agora deve aparecer aqui nos atributos comuns, mas se o Google tiver movido quando voc



29

00:02:06.170 --> 00:02:10.210

assistir a este vdeo, talvez seja necessrio vir aqui e expandir os atributos para encontr-lo.



30

00:02:10.670 --> 00:02:16.040

Ento, no momento, adjustViewBounds  para definir o padro. O boto de estado tri tem um trao atravs dele. Agora o padro



31

00:02:16.410 --> 00:02:17.800

 desativado



32

00:02:17.870 --> 00:02:19.080

ou falso.



33

00:02:19.100 --> 00:02:23.800

Ento, vamos ver o que acontece quando ligamos isso para ver o efeito que isso tem em nossa imagem.



34

00:02:23.810 --> 00:02:29.790

Ento, quando eu clico nele, voc quer ter certeza de que este  agora um tick para o atributo adjustViewBounds.



35

00:02:29.960 --> 00:02:33.890

Depois disso, execute o aplicativo novamente. Ento vamos em frente e fazer isso, execut-lo



36

00:02:33.920 --> 00:02:35.120

em todos os trs emuladores.



37

00:02:44.520 --> 00:02:55.880

OK e vamos tentar abri-los agora.



38

00:02:56.010 --> 00:03:01.440

Agora, como voc pode ver, parece bem na API 21 e na API 26.



39

00:03:01.510 --> 00:03:05.910

A imagem  o mais ampla possvel, e eu posso rolar para baixo para ver a descrio e as



40

00:03:05.920 --> 00:03:10.150

tags, ou pelo menos eu posso, se eu fizer. Estou rolando para baixo para obter as tags, voc pode ver que



41

00:03:10.350 --> 00:03:12.020

eu posso l-las, e mesmo para a API 26.



42

00:03:12.030 --> 00:03:13.600

Eu posso rolar para baixo se eu precisar.



43

00:03:13.890 --> 00:03:15.520

Ento tudo parece se encaixar bem.



44

00:03:15.660 --> 00:03:18.370

Agora  por isso que usamos uma visualizao de rolagem, para que possamos fazer isso.



45

00:03:18.520 --> 00:03:23.210

Algumas imagens se estendem para fora da parte inferior da tela e voc precisa rolar para ver a



46

00:03:23.210 --> 00:03:27.240

parte inferior, e voc pode ver que precisei rolar um pouco para ver algumas das tags.



47

00:03:27.520 --> 00:03:34.990

OK, essa  a diferena que o adjustViewBounds fez nas verses da API acima de 17, mas nesses dispositivos da API



48

00:03:35.010 --> 00:03:36.570

17 no faz diferena.



49

00:03:36.630 --> 00:03:39.270

Ento  isso que adjustVBiewBounds faz.



50

00:03:39.380 --> 00:03:46.110

Isso faz com que a visualizao da imagem se ajuste  imagem, depois recalcula e expande para se ajustar 



51

00:03:46.110 --> 00:03:47.040

imagem, se necessrio.



52

00:03:47.100 --> 00:03:53.910

Assim, voc obtm o melhor ajuste possvel no espao disponvel, preservando a proporo da imagem, de modo que ela



53

00:03:54.210 --> 00:03:56.560

no se estique em outras palavras.



54

00:03:56.610 --> 00:03:58.740

Ento, e aquela nota que vimos antes?



55

00:03:58.980 --> 00:04:00.240

Vamos apenas voltar ao



56

00:04:04.320 --> 00:04:05.370

Google novamente no ImageView.



57

00:04:07.550 --> 00:04:13.570

E s para economizar um pouco de tempo eu vou fazer uma busca pelo nvel 17,



58

00:04:14.110 --> 00:04:21.970

para chegar onde queremos ir, aqui embaixo, aqui embaixo para setAdjustViewBounds. Portanto, se o aplicativo segmentar para o nvel 17 ou inferior da API, o



59

00:04:21.970 --> 00:04:28.340

adjustViewBounds permitir que o marcador reduza os limites de exibio, mas no aumente para preencher o espao medido disponvel em todas as instncias.



60

00:04:28.610 --> 00:04:32.760

Ento, em outras palavras, no est dizendo que no funcionar na API 17 ou inferior,



61

00:04:32.770 --> 00:04:37.840

est dizendo que a visualizao da imagem nem sempre crescer para preencher o espao disponvel em todos os casos.



62

00:04:38.130 --> 00:04:43.180

Agora, nos nveis da API acima da API 17, voc viu que funcionou. No meu emulador Nexus executando



63

00:04:43.200 --> 00:04:45.060

a API 17, atingimos



64

00:04:45.060 --> 00:04:46.660

um desses casos.



65

00:04:46.840 --> 00:04:49.520

Ento, voltando ao Android Studio, na



66

00:04:49.670 --> 00:04:52.300

verdade vamos voltar ao nosso emulador.



67

00:04:52.320 --> 00:04:56.920

Ento, vou minimizar o Chrome por enquanto, para que possamos ter acesso a emuladores novamente.



68

00:04:59.450 --> 00:05:07.310

Ento, novamente, em nveis de API acima da API 17, funcionou, mas no Nexus 5X, sendo executado na API 17, atingimos



69

00:05:07.310 --> 00:05:08.240

um desses casos.



70

00:05:08.390 --> 00:05:13.280

Ainda temos a borda espessa, como voc pode ver por aqui, e o adjustViewBounds



71

00:05:13.520 --> 00:05:14.790

no fez nenhuma diferena.



72

00:05:14.840 --> 00:05:20.750

Ento, o adjustViewBounds deu um bom efeito na API 21 e acima, na verdade na API 18 e acima, mas pode no



73

00:05:20.750 --> 00:05:24.020

funcionar em todos os dispositivos que executam a API 17 ou inferior.



74

00:05:24.290 --> 00:05:31.430

Agora voc pode gastar muito tempo tentando obter o mesmo efeito nesta API 17 Nexus 5X. Uma soluo seria criar uma visualizao



75

00:05:31.520 --> 00:05:35.730

de imagem personalizada, subclassificando a existente.



76

00:05:35.840 --> 00:05:40.280

E se voc pesquisar on-line, poder encontrar exemplos de como fazer isso, mas voc teria que perguntar, a



77

00:05:40.280 --> 00:05:45.470

essa altura, se realmente vale a pena. Agora, em alguns casos, ser. Se voc tem um layout onde



78

00:05:45.470 --> 00:05:50.150

a imagem fica to pequena que no  mais utilizvel, por exemplo, voc teria que encontrar uma soluo.



79

00:05:50.450 --> 00:05:57.290

Mas aqui, porm, o aplicativo funciona na API 17, portanto, no h nenhum ponto real em restringi-lo  API 18



80

00:05:57.290 --> 00:05:59.320

e acima, e perder usurios desnecessariamente.



81

00:05:59.450 --> 00:06:04.730

Agora,  claro que no parece exatamente o mesmo neste dispositivo, mas eu diria que ainda  perfeitamente utilizvel, e



82

00:06:04.730 --> 00:06:10.250

s vezes seu tempo  muito melhor gasto terminando o aplicativo, em vez de tentar fazer com que parea idntico



83

00:06:10.250 --> 00:06:11.300

em todos os dispositivos



84

00:06:11.300 --> 00:06:16.250

para todo o Verses do Android que voc suporta. Agora h alguns outros pontos a serem feitos sobre isso.



85

00:06:16.280 --> 00:06:20.050

O primeiro , devemos estar exibindo outra coisa seno a imagem aqui.



86

00:06:20.270 --> 00:06:24.550

Portanto, se o usurio tiver longo tempo tocando em uma miniatura, ele provavelmente desejar ver a fotografia.



87

00:06:24.590 --> 00:06:29.450

Agora adicionei coisas como o autor e o ttulo ao layout, para mostrar como criar layouts mais complexos.



88

00:06:29.840 --> 00:06:34.190

Nesta aplicao especfica, porm, podemos estar melhor apenas exibindo a imagem com



89

00:06:34.190 --> 00:06:35.010

mais nada.



90

00:06:35.180 --> 00:06:39.920

Assim, voc poderia permitir que um toque na imagem mostrasse outros detalhes, talvez, mas eles provavelmente no



91

00:06:39.920 --> 00:06:41.340

deveriam estar aparecendo nessa tela.



92

00:06:41.690 --> 00:06:43.130

Portanto, ao projetar coisas



93

00:06:43.130 --> 00:06:49.490

como essa, pense cuidadosamente no que os usurios querem e no que esperam quando executam certas aes.



94

00:06:49.490 --> 00:06:55.370

Agora, o segundo ponto aqui , tenha cuidado ao criar emuladores. Agora consegui simular um problema aqui,



95

00:06:55.370 --> 00:06:59.900

criando um emulador do Nexus 5X executando a API 17.



96

00:06:59.910 --> 00:07:05.600

Agora, o Nexus 5X  uma verso mais recente do Nexus 5, lanado originalmente com



97

00:07:05.630 --> 00:07:06.920

o Kit-Kat API 19.



98

00:07:06.960 --> 00:07:10.190

Ento, o Nexus 5X era at uma verso posterior a isso.



99

00:07:10.190 --> 00:07:14.960

Em outras palavras, o Jelly Bean no foi instalado em dispositivos com a tela de alta



100

00:07:14.960 --> 00:07:18.850

resoluo de algo como um Nexus 5. Ento tenha isso em mente, se voc tiver



101

00:07:19.070 --> 00:07:24.970

um comportamento estranho, pergunte a si mesmo se est testando uma combinao de um dispositivo na API que simplesmente no existiria por a.



102

00:07:24.980 --> 00:07:29.300

Em outras palavras, quando o usurio comprou um determinado telefone, ele nunca teria



103

00:07:29.300 --> 00:07:30.090

realmente executado



104

00:07:30.140 --> 00:07:34.110

essa verso, essa verso especfica da API, neste caso, a API 17.



105

00:07:34.220 --> 00:07:39.700

Agora, o Nexus 4 foi lanado com a API 17 e o adjustViewBounds funcionar bem com isso.



106

00:07:39.980 --> 00:07:46.010

Portanto, o efeito  um pouco diferente dos dispositivos API 21 e API 26, mas



107

00:07:46.010 --> 00:07:47.400

a imagem parece maior.



108

00:07:47.640 --> 00:07:52.910

Tudo bem, ento eu vou terminar o vdeo aqui. Mas o seu desafio  experimentar as vrias configuraes



109

00:07:52.910 --> 00:07:57.500

de margem e preenchimento para os widgets para ter certeza de que voc entende a diferena



110

00:07:57.860 --> 00:08:03.410

entre margens e preenchimentos, e tambm quais widgets voc deve alterar quando eles esto aninhados uns dentro dos outros, como



111

00:08:03.410 --> 00:08:04.680

os nossos, neste particular tela.



112

00:08:04.760 --> 00:08:10.370

Agora tente fazer coisas como aumentar a borda ao redor da foto, para que o CardView funcione como um pouco



113

00:08:10.370 --> 00:08:14.900

mais de um quadro de imagem, e tambm tente colocar mais espao ao redor do CardView.



114

00:08:14.990 --> 00:08:20.930

Agora voc tambm pode querer alterar o layout para que haja apenas um ImageView dentro de um CardView. A imagem preencheria a tela e,



115

00:08:20.930 --> 00:08:25.920

portanto, no precisaria ser rolvel. Agora voc pode mostrar uma mensagem do Toast se o usurio



116

00:08:25.930 --> 00:08:27.250

tocar na foto, para que ela



117

00:08:27.490 --> 00:08:33.170

possa ver o autor e o ttulo, sem retornar  tela principal. Experimente o bottom line e divirta-se,



118

00:08:33.170 --> 00:08:38.930

porque essa  a melhor maneira de aprender, e esse layout 



119

00:08:38.930 --> 00:08:45.260

um bom layout para experimentar. Antes de comear, copie os content_photo_details. arquivo xml, ou simplesmente cole o xml em



120

00:08:45.260 --> 00:08:49.870

um editor de texto, para que voc possa colocar as coisas de volta se voc realmente estragar tudo.



121

00:08:49.910 --> 00:08:53.660

E, claro, se voc realmente no estragar tudo, ento voc no experimentou o suficiente.



122

00:08:53.710 --> 00:08:56.870

Tudo bem, ento  isso. Eu terminarei o vdeo aqui e te vejo no prximo.



