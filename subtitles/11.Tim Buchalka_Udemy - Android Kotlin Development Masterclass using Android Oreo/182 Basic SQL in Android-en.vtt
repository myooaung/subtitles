WEBVTT
1

00:00:05.000 --> 00:00:10.880

In the last few videos we've seen how to use the second language to create tables in a database in certain



2

00:00:10.880 --> 00:00:13.060

delight rows and query the title.



3

00:00:13.220 --> 00:00:16.210

It's no time to use what we've learned in an Android app.



4

00:00:16.310 --> 00:00:19.520

We're going to start with what is really the simplest application.



5

00:00:19.520 --> 00:00:21.560

You probably have a safer database.



6

00:00:21.920 --> 00:00:26.840

Now it's not following best practices so don't think that this is the way that you generally access



7

00:00:26.840 --> 00:00:29.030

a database in your applications.



8

00:00:29.300 --> 00:00:33.980

This exercise is just to give you a simple overview of how to use what you've learned in the previous



9

00:00:33.990 --> 00:00:38.920

videos in calling code rather than from the secret Kalat console program.



10

00:00:39.020 --> 00:00:42.080

We'll be looking at much better ways of doing this in future apps.



11

00:00:42.110 --> 00:00:47.750

So I view this more as an introduction to how to use Sakal in your calling card and not just the correct



12

00:00:47.750 --> 00:00:50.510

way to work with databases or what.



13

00:00:50.520 --> 00:00:51.830

So let's get started.



14

00:00:51.830 --> 00:00:54.270

We're going to create a new project an android studio.



15

00:00:54.720 --> 00:00:59.030

We'll call this one sequel lock test.



16

00:00:59.200 --> 00:01:02.970

I'm going to make sure the domain is set to learn programming on cademy as it has been throughout the



17

00:01:02.970 --> 00:01:03.760

course.



18

00:01:03.850 --> 00:01:08.370

You can make sure that checkbox is checked for include Cartland support.



19

00:01:08.510 --> 00:01:15.810

Next you make sure that IPY 17 is selected and the selected the other options which we have click on



20

00:01:15.810 --> 00:01:16.980

next.



21

00:01:17.010 --> 00:01:21.870

Now for this one we're going to be using the floating action button this up so we will select the basic



22

00:01:21.870 --> 00:01:24.580

activity click on next.



23

00:01:25.020 --> 00:01:29.420

And finally empathically on this faunal configure activity screen is correct and fine as it is.



24

00:01:29.640 --> 00:01:33.560

So I'm going to acceptors default and click on finish.



25

00:01:33.740 --> 00:01:39.060

So just keep that project for a short while to load and finish building and indexing.



26

00:01:39.170 --> 00:01:44.830

And then we're going to open up main activity and write some code in the on create method.



27

00:01:44.900 --> 00:01:49.820

They I said earlier in the introduction we're going to create what is probably the simplest application



28

00:01:50.120 --> 00:01:53.190

for writing data to a database that you incurred.



29

00:01:53.240 --> 00:01:54.880

It's very very simple.



30

00:01:54.950 --> 00:01:56.640

It's just a proof of concept.



31

00:01:56.750 --> 00:02:01.760

Before we go into more detail into things in a more structured way I could say that things are lighting



32

00:02:01.760 --> 00:02:03.020

here now we're just about done.



33

00:02:05.610 --> 00:02:14.400

What we'll do is we'll go to and followed up with an amendment to component finish in re-index or index



34

00:02:14.400 --> 00:02:15.560

for the first time.



35

00:02:16.950 --> 00:02:23.190

It's finished now I'm going to kick my own activity from now Academy learn programming package.



36

00:02:23.230 --> 00:02:24.370

I mean you're good to go.



37

00:02:24.700 --> 00:02:31.750

Now the Android framework includes a sequel light database class called siecle or database and we're



38

00:02:31.750 --> 00:02:36.670

going to be using that to create an Access database that you don't need to know the full ins and outs



39

00:02:36.670 --> 00:02:38.920

of how this particular class works.



40

00:02:38.950 --> 00:02:44.020

Think about like the sequel a command line program the one that we're used to previously in the section



41

00:02:44.020 --> 00:02:49.330

to allow us to execute Sekou statements to see our database class works in a similar fashion.



42

00:02:49.570 --> 00:02:55.500

But instead of talking C-clamp prompt we pass strings containing Siku statements and the sequel like



43

00:02:55.540 --> 00:02:57.700

database object executes them for us.



44

00:02:57.910 --> 00:03:03.350

So to get this to work we need to start by creating a database object and we go ahead and do that above



45

00:03:03.370 --> 00:03:12.330

the fab data set and click this no I'm going to talk Val device is equal to the space context thought



46

00:03:12.790 --> 00:03:20.600

is going to be open or create database image which is very helpful when you talk to his methods and



47

00:03:20.900 --> 00:03:25.580

he saw that the students are taught the opening parentheses after the IPN or create database.



48

00:03:25.640 --> 00:03:27.660

It showed the documents that we have to provide.



49

00:03:27.920 --> 00:03:33.910

Yep although I tend to use the term method when referring to a function belonging to one of the Android



50

00:03:33.920 --> 00:03:38.510

Java classes and function when talking about Cartland code.



51

00:03:38.650 --> 00:03:42.240

Now they are the same thing and if you want to call them functions instead that's fine.



52

00:03:42.260 --> 00:03:47.630

Just be aware that what the different terms when you're talking to Java programmers that case has several



53

00:03:47.630 --> 00:03:51.240

ways to use this method but we stick with the first one for now.



54

00:03:51.230 --> 00:03:55.680

And you could say it's asking for a string and it is something called a curse factory.



55

00:03:55.780 --> 00:04:00.110

So to find out what these arguments should be we can check the documentation.



56

00:04:00.160 --> 00:04:05.400

If I typed in the document so I could click anywhere on the owner create database method and use that



57

00:04:05.450 --> 00:04:11.890

control Q or control Jide depending what you're on a PC or Mac and bring up the documentation that a



58

00:04:11.900 --> 00:04:13.320

moment like this doesn't work.



59

00:04:13.520 --> 00:04:19.750

Android studio is unable to work out which particular version of the open will create database documentation



60

00:04:19.760 --> 00:04:24.770

we want to say and that prevents it from linking to the documentation correctly.



61

00:04:24.770 --> 00:04:29.600

And of course this is a catch 22 because if we knew what the documents were they probably wouldn't need



62

00:04:29.600 --> 00:04:32.550

to call up the documentation in the first place.



63

00:04:32.560 --> 00:04:37.670

They did used to be possible to put the cursor inside the opening and closing parentheses before talking



64

00:04:37.670 --> 00:04:39.390

control giant hygienists control.



65

00:04:39.400 --> 00:04:42.250

You want to say but that's no longer working.



66

00:04:42.260 --> 00:04:47.690

So if you find yourself in that position when trying to get the documentation for engine it's true just



67

00:04:47.720 --> 00:04:53.690

enter any suitable values for each parameter and you know I should be you can change them so you can



68

00:04:53.690 --> 00:04:59.900

save a top pop version of the method once a string and into something called a sequel or database that



69

00:04:59.900 --> 00:05:01.050

casts a factory.



70

00:05:01.060 --> 00:05:06.460

So I kind of postering and call it name the number one in there for the end and I was going to pass



71

00:05:06.460 --> 00:05:14.200

now on being the curse of factory so now get back to the methods that we have to out.



72

00:05:14.340 --> 00:05:17.970

But like I said they're not going to control them back and again it's control.



73

00:05:17.980 --> 00:05:21.640

You want to say and now the documentation is coming up for us.



74

00:05:21.720 --> 00:05:23.700

So let's actually a lot more helpful.



75

00:05:23.830 --> 00:05:29.380

We can see now that this method opens the sequel or database reading further you can say it creates



76

00:05:29.380 --> 00:05:35.900

the database for if it doesn't already exist now now when you use this way to do the documentation control



77

00:05:35.930 --> 00:05:37.260

you will control.



78

00:05:37.450 --> 00:05:42.460

You'll often find there's a blue up woods pointing arrow available and you can see them is up here as



79

00:05:42.460 --> 00:05:43.540

well.



80

00:05:43.580 --> 00:05:47.980

Now if it's great app and there's no further documentation available but here it's in blue and you can



81

00:05:47.980 --> 00:05:53.820

see that the link said that we could view the documentation or view the external documentation so I



82

00:05:53.830 --> 00:05:59.550

can click it and it will open up the relevant documentation on my Mac's default browser.



83

00:06:01.200 --> 00:06:05.110

Let's say it has it going right to the method we still need to look up the method.



84

00:06:05.150 --> 00:06:11.630

So I'm just going to do a find for the method I'm looking at that's open or create database.



85

00:06:11.800 --> 00:06:13.230

Well just look for the set come on.



86

00:06:13.550 --> 00:06:19.130

And the one that we want to have a look at is the overloaded one that had a name lowered and kiss the



87

00:06:19.130 --> 00:06:19.550

factory.



88

00:06:19.550 --> 00:06:21.180

So I'm going to click on that.



89

00:06:21.410 --> 00:06:25.910

So I'm presuming that was a bug and that eventually this will be fixed and it will go straight to the



90

00:06:25.910 --> 00:06:30.230

method but you can see that I needed to add another step to get to the method that I wanted to save



91

00:06:30.230 --> 00:06:31.160

or ABRAZO.



92

00:06:31.570 --> 00:06:36.490

But this part is a lot more helpful in the old times we had to leave through the printed manuals but



93

00:06:36.530 --> 00:06:40.970

do all that documentation is available with a couple of case tracks and you can do this for just about



94

00:06:41.030 --> 00:06:45.690

anything you want to know more about just click the name of the class or object and user control.



95

00:06:45.760 --> 00:06:50.420

If you're going to back or control Q On a PC and you can find out more information on whatever it is



96

00:06:51.270 --> 00:06:56.870

we're going to continue on in the web browser for the documentation things we know now we're going to



97

00:06:56.870 --> 00:06:58.750

use this mode and it's called Prabhat.



98

00:06:58.790 --> 00:07:04.250

This option here for the default operation but we can check what the other options are by clicking on



99

00:07:04.250 --> 00:07:07.270

the links and scrolling down this alphabetical list.



100

00:07:07.410 --> 00:07:10.470

You can see it in crop mode enable waterhead logging.



101

00:07:10.790 --> 00:07:13.670

So let's click on that and then prepare to be disappointed.



102

00:07:14.300 --> 00:07:19.670

So it's not really very helpful if you were hoping for an explanation of what to road ahead logging



103

00:07:19.670 --> 00:07:20.090

means.



104

00:07:20.090 --> 00:07:22.050

This doesn't really explain a lot.



105

00:07:22.190 --> 00:07:25.720

When that happens you just look for the links that more provide more information.



106

00:07:25.730 --> 00:07:30.380

There's not much point clicking on the first two links here because that the ones going back to the



107

00:07:30.410 --> 00:07:32.780

open or create database methods have just come from there.



108

00:07:32.780 --> 00:07:35.300

So we'll end up going round in circles.



109

00:07:35.620 --> 00:07:36.900

Have a look at this third one here.



110

00:07:36.960 --> 00:07:41.720

And labeled Broadhead logging method that's far more intuitive you could say we got lots more information



111

00:07:41.720 --> 00:07:42.660

about that.



112

00:07:42.800 --> 00:07:45.740

Now I went through it all basically at last.



113

00:07:45.770 --> 00:07:48.530

It allows concurrent access to the database.



114

00:07:48.560 --> 00:07:54.010

Now in Android there's not often any need to allow your database to be accessed on multiple threads.



115

00:07:54.030 --> 00:07:57.670

There's only one app in the foreground and any one pointing to one.



116

00:07:57.690 --> 00:08:03.390

And if you start writing things like services and you service needs to write to the database then you



117

00:08:03.410 --> 00:08:08.960

probably have to enable readahead logging by the time we get to that stage to know that you need it.



118

00:08:08.960 --> 00:08:13.420

So we're going to use both private from the mind and set defect factory argument to now.



119

00:08:13.640 --> 00:08:18.110

You can then use your own subclass of Caressa and that arguments how to do that.



120

00:08:18.140 --> 00:08:22.590

So generally that occurs a class that Android provides has fallen to most purposes.



121

00:08:22.790 --> 00:08:24.300

They're going to get it back and have a look there.



122

00:08:26.630 --> 00:08:31.590

This factory optional factor class had his code to instantiate a cursor when the queries code.



123

00:08:31.610 --> 00:08:36.820

As I mentioned generally the cursor class that Android provides is for most purposes right.



124

00:08:36.830 --> 00:08:40.910

Let's get back to our code.



125

00:08:41.220 --> 00:08:47.310

So the argument will be our database phone home and the mode we should be setting that to context top



126

00:08:47.310 --> 00:08:48.780

mode on the school provid.



127

00:08:48.990 --> 00:08:54.330

Now before I utilize valleys to hover over the area that the mode is providing the mode to argument



128

00:08:54.330 --> 00:09:00.090

that the error message mentions a few other options so you can say that you've got mode readable when



129

00:09:00.090 --> 00:09:01.640

mode well readable.



130

00:09:01.940 --> 00:09:06.060

Well I would deprecated in API 17 and we really shouldn't be using them.



131

00:09:06.330 --> 00:09:11.580

Making a database world readable is a pretty bad idea from a security point of view and we'll write



132

00:09:11.640 --> 00:09:13.370

it was obviously much worse.



133

00:09:13.820 --> 00:09:18.930

Now that been marked as deprecated in the documentation we just looked at but did allow the database



134

00:09:18.930 --> 00:09:20.310

to be shared with other apps.



135

00:09:20.380 --> 00:09:22.260

So there's to present in the Android source code.



136

00:09:22.260 --> 00:09:25.830

In other words back could be removed in a future version.



137

00:09:25.890 --> 00:09:28.970

You know there are other ways of sharing data that we going to be talking about.



138

00:09:28.980 --> 00:09:34.620

I was a little bit lighter things like a content provider broadcast receiver and a service.



139

00:09:34.680 --> 00:09:41.960

So it's now up like this with the router settings are we're going to go with sequel lots dash test dash



140

00:09:41.960 --> 00:09:42.180

1.



141

00:09:42.180 --> 00:09:50.000

What do you make instead of hard cutting a one we're going to go with most home school private.



142

00:09:50.160 --> 00:09:52.440

We're going to leave now as a third option for now.



143

00:09:52.620 --> 00:09:57.420

So this first bit of card will open the database for us if it finds it if there isn't already a database



144

00:09:57.500 --> 00:10:04.520

Cosequin lot test test test one don't be that it will automatically create one for us and we'll have



145

00:10:04.520 --> 00:10:08.390

a look once we're ready to run the card and see the database fall on the emulator.



146

00:10:08.410 --> 00:10:10.440

So no let's finish the video here.



147

00:10:10.620 --> 00:10:15.630

And then the next one you start writing some sequel cards so we start creating some strings with a secret



148

00:10:15.630 --> 00:10:19.980

code to get to the stage of executing the app to see what happens.



149

00:10:19.980 --> 00:10:21.490

So we'll see you in the next video.



