WEBVTT
1

00:00:05.190 --> 00:00:10.040

In the previous video we got the up running on Android versions earlier than marshmallow which is IPR



2

00:00:10.050 --> 00:00:12.480

23 with 23.



3

00:00:12.570 --> 00:00:17.850

Google changed the way that permissions work and we looked at that briefly in the top 10 Danila to wrap



4

00:00:18.690 --> 00:00:25.350

so I've got to run the app again but this time of light of the API 27 emulator up and really Vidia intersection



5

00:00:25.410 --> 00:00:29.610

and of course the one that Tabitha also wanted some contact details into.



6

00:00:30.270 --> 00:00:31.590

So this time when I go on the app



7

00:00:41.500 --> 00:00:47.840

the EP starts as per normal but when I click on the fighting action button we actually get an error



8

00:00:47.840 --> 00:00:48.130

here.



9

00:00:48.150 --> 00:00:52.190

Content Provider example has stopped and to come and have a look at our look at



10

00:00:55.050 --> 00:01:02.100

say that time quite an exceptional just Cabarkapa and we can see it here the error permission denial



11

00:01:02.820 --> 00:01:07.600

basically goes on to say the permission to know I was for being provided come to the Android or provide



12

00:01:07.620 --> 00:01:11.170

stock contacts to contacts provided to you.



13

00:01:11.370 --> 00:01:17.430

The bottom line here is with IP 23 and above it's not enough to just request the permissions we need



14

00:01:17.430 --> 00:01:18.650

in the manifests.



15

00:01:18.690 --> 00:01:25.180

We also need to write some code to request the permissions from the user when the app runs.



16

00:01:25.220 --> 00:01:34.620

So let's check the google documentation he says a guard which is pretty useful about permissions and



17

00:01:34.630 --> 00:01:36.690

draw commissions and we're going to posting the link.



18

00:01:40.880 --> 00:01:47.170

It turns out this documentation has been updated since we looked at the top 10 app and the early now



19

00:01:47.230 --> 00:01:52.360

redirects to he's going to stop with his permissions either view at the top of the page but to have



20

00:01:52.360 --> 00:01:53.260

a read through this card.



21

00:01:53.260 --> 00:01:57.310

Once you finish the section to make sure you understand how everything works.



22

00:01:57.490 --> 00:02:02.140

We already know that we have to specify the permission in the manifest regardless of the version of



23

00:02:02.250 --> 00:02:02.670

Android.



24

00:02:02.830 --> 00:02:04.070

And we've already done that step.



25

00:02:04.270 --> 00:02:08.070

But we had it the user's permission tag in the Android manifesto next fall.



26

00:02:08.320 --> 00:02:13.540

But another important thing to note is that in that first paragraph is that the sister bought grant



27

00:02:13.540 --> 00:02:19.110

the permission automatically.



28

00:02:19.220 --> 00:02:24.650

So that's what happened in a top 10 app because the Internet permission we needed is classed as a normal



29

00:02:24.650 --> 00:02:25.720

permission.



30

00:02:25.730 --> 00:02:30.040

So what that means is we didn't have to do anything else to be granted permission to access the Internet.



31

00:02:30.350 --> 00:02:34.360

But accessing the user's contacts is classed as a dangerous permission.



32

00:02:34.550 --> 00:02:38.070

So Android needs to ask the user to approve that permission.



33

00:02:38.120 --> 00:02:41.800

Now we didn't really see that we run upon the lollipop emulator.



34

00:02:42.050 --> 00:02:47.840

That's because the method that Android studio uses to install apps on the device bypasses the checks



35

00:02:47.840 --> 00:02:51.320

that you say when you install that from the get go postal.



36

00:02:51.350 --> 00:02:56.420

Now earlier in the course when nivel us paid debugging on our phones and you should have seen that all



37

00:02:56.450 --> 00:03:00.270

pop up asking for confirmation that look something like this.



38

00:03:00.470 --> 00:03:06.800

No not I said it does say that enabling spaded bagging can install apps on your device without notification.



39

00:03:07.070 --> 00:03:12.770

The emulators have you a spades and turned on by default and that automatically accepts the commissions



40

00:03:12.770 --> 00:03:16.300

that you'd normally have to accept when installing a new app.



41

00:03:16.310 --> 00:03:21.080

So although we didn't see it when running out Epsom and George judaeo you'd normally have to accept



42

00:03:21.080 --> 00:03:24.750

the permission that the app requested when you install it.



43

00:03:25.340 --> 00:03:27.380

That's how it worked before marshmallow.



44

00:03:27.560 --> 00:03:32.460

But when Google released marshmallow I changed the way the permissions work.



45

00:03:32.540 --> 00:03:37.650

So let's get back to that web page though to see what this all means for marshmallow and above.



46

00:03:37.850 --> 00:03:42.110

So you get a good description of the change by scrolling down to the requests prompts for dangerous



47

00:03:42.110 --> 00:03:43.090

permissions section.



48

00:03:43.100 --> 00:03:44.950

This section here.



49

00:03:45.620 --> 00:03:51.080

So that confirms what we found in the top 10 app highly dangerous permissions require user agreement.



50

00:03:51.080 --> 00:03:55.900

Now the next subsection there describes the differences from the user's perspective.



51

00:03:58.330 --> 00:04:04.300

If the device is running Android 6 IP or Level 23 or higher use is grant permission to apps while the



52

00:04:04.300 --> 00:04:05.110

app is running.



53

00:04:05.260 --> 00:04:06.970

Not when they stole the app.



54

00:04:07.180 --> 00:04:11.920

There's also an important comment there about the target SDK version.



55

00:04:11.980 --> 00:04:16.050

The target is T.K. version has to be 23 or higher for this behavior.



56

00:04:16.210 --> 00:04:21.670

If you target the lower version then you will have the early behavior regardless of the device that



57

00:04:21.670 --> 00:04:22.530

it's running on.



58

00:04:22.630 --> 00:04:25.980

The user will be prompted to grab access when they install the app.



59

00:04:26.260 --> 00:04:31.750

It also states that you can't always rely on having a permission to use a make grouted but then deny



60

00:04:31.750 --> 00:04:32.710

it again later.



61

00:04:33.010 --> 00:04:37.960

And if you think about it that obviously has implications for us as developers because we do have to



62

00:04:37.960 --> 00:04:43.000

Rotto apps so that they can handle the situation where a permission is no longer granted.



63

00:04:43.150 --> 00:04:48.670

You know for some apps that may involve us disabling some functionality for example could be a fight



64

00:04:48.700 --> 00:04:54.360

processing app that allows the user to share a modified photo with their contacts.



65

00:04:54.550 --> 00:04:59.620

If the user revokes the app's permission to access their contacts then the app would be able to share



66

00:04:59.620 --> 00:05:00.420

the photo.



67

00:05:00.700 --> 00:05:05.260

So in that case we should display that option that all the app would still be able to perform its fire



68

00:05:05.260 --> 00:05:11.260

type in Appalachian functions but would be unable to share the result there in a case of a simple contex



69

00:05:11.260 --> 00:05:11.680

app.



70

00:05:11.860 --> 00:05:17.500

If the user doesn't grant access to the contacts database that the tar app will become useless because



71

00:05:18.010 --> 00:05:19.120

that's all it does.



72

00:05:19.360 --> 00:05:26.840

So the next section is quite a bit more talks about install install requests but the mountains cloud.



73

00:05:26.890 --> 00:05:31.670

But the other information that I was talking about related to and what six it is on that page that you



74

00:05:31.670 --> 00:05:36.250

can see it talks more about not relying on always having the provision but scrolling down further that



75

00:05:36.260 --> 00:05:40.650

we're talking about the install time requests Android for point 1.1 and below.



76

00:05:40.940 --> 00:05:46.190

That's describing the behavior of earlier versions of Android and that also applies if your target is



77

00:05:46.190 --> 00:05:51.480

Teekay version is 22 ALOA regardless of the version of Android that the device is running.



78

00:05:51.620 --> 00:05:55.730

So in that case the permissions are requested when the app is installed.



79

00:05:55.730 --> 00:05:59.950

The user can either Krout open missions or decide not to install the app.



80

00:06:00.540 --> 00:06:01.560

It talks more about this.



81

00:06:01.570 --> 00:06:04.180

I would have if the permissions are granted.



82

00:06:04.460 --> 00:06:09.840

The only way to know any of these permissions is to uninstall the app so I can pick up the page now



83

00:06:12.990 --> 00:06:16.440

to stand here to the end of the permission approval section.



84

00:06:16.870 --> 00:06:21.280

There's a link there to the protection levels just letting him know that this the normal and dangerous



85

00:06:21.280 --> 00:06:26.440

permissions and lets you check if you need to do more than just add an entry in the manifest for a specific



86

00:06:26.440 --> 00:06:30.620

permission or permissions that you apps need to click on that and have a look.



87

00:06:31.210 --> 00:06:32.080

But I'll leave that for now.



88

00:06:32.080 --> 00:06:33.310

We'll get back to android.



89

00:06:33.340 --> 00:06:39.490

Julia and let's look at the code we need to check for those permissions and then we'll consider what



90

00:06:39.490 --> 00:06:41.370

to do if they not granted.



91

00:06:41.530 --> 00:06:46.630

But what I'm going to do first is start by adding a constant and a variable that will be using shortly



92

00:06:46.960 --> 00:06:54.070

to do that are going to close down the window to the top of the file so that constant attacks will still



93

00:06:54.070 --> 00:06:55.390

be private.



94

00:06:55.400 --> 00:06:58.420

Cost Val will cause one request.



95

00:06:58.530 --> 00:07:06.410

A case and the school code and call grade school contacts and will assign the value of 1 to 1.



96

00:07:06.470 --> 00:07:08.500

Are we using that variable shortly.



97

00:07:08.670 --> 00:07:13.670

I'll also explain what it's for Rob when we come to using it but also in the class itself.



98

00:07:13.720 --> 00:07:16.030

Let's add a variable and we go to court.



99

00:07:16.070 --> 00:07:19.920

Granted it's not going to be private property.



100

00:07:19.950 --> 00:07:21.100

It has to be read.



101

00:07:21.110 --> 00:07:23.920

Granted ECOs.



102

00:07:24.260 --> 00:07:26.570

Side deal or talk about that shortly.



103

00:07:26.700 --> 00:07:31.480

Obviously in the case of the cost of a for it and you saw that made at the top level value using the



104

00:07:31.480 --> 00:07:33.530

private Konst modifies.



105

00:07:33.560 --> 00:07:38.320

All right so the first step now is to check to see if the app has already been granted the permission



106

00:07:38.320 --> 00:07:39.260

it needs.



107

00:07:39.450 --> 00:07:44.650

And we can do that by calling the chick self-publisher method so get me to add the code and inside a



108

00:07:44.650 --> 00:07:46.290

couple of things about it.



109

00:07:46.360 --> 00:07:48.750

So I want to put that card immediately by this.



110

00:07:48.760 --> 00:07:51.550

The line is set to support action back whole.



111

00:07:51.860 --> 00:07:55.840

That's when reval has read contact permission



112

00:07:58.690 --> 00:08:03.520

almost equal to context impact.



113

00:08:03.740 --> 00:08:07.090

Thought I was going to check.



114

00:08:07.110 --> 00:08:15.170

So permission to print this is going to be this comma be manifest at this point.



115

00:08:15.190 --> 00:08:22.900

It's important to choose the Android manuf has each one down here and not the Java one so manifest got



116

00:08:23.050 --> 00:08:24.530

permission.



117

00:08:25.210 --> 00:08:32.440

Don't read all contact's what I'm going to do is just put that on the next line should I need it read



118

00:08:32.440 --> 00:08:32.790

the.



119

00:08:32.800 --> 00:08:36.690

Just to make sure there's enough space on the screen to say that we can see that.



120

00:08:36.740 --> 00:08:38.670

So I would check to see whether you've got that permission.



121

00:08:38.680 --> 00:08:43.120

I'm just going to do a log entry here and talk to a parentheses Tecoma.



122

00:08:43.290 --> 00:08:48.060

Double quites on Create a colon check.



123

00:08:48.070 --> 00:08:48.600

So permission



124

00:08:51.170 --> 00:08:55.660

returned Dala has made contact permission.



125

00:08:56.760 --> 00:09:02.130

Now because the new security model was introduced in April 23 and we're targeting Android versions way



126

00:09:02.130 --> 00:09:08.580

back to IPY 17 we have to use the Wii for our support library to get access to the check self promotion



127

00:09:08.580 --> 00:09:09.350

method.



128

00:09:09.360 --> 00:09:14.050

Now there is this chick self-published method in the framework but that would only work for marshmallow



129

00:09:14.050 --> 00:09:14.980

and above.



130

00:09:15.060 --> 00:09:21.460

And both methods return the same result but the context compare method which we selected first checked



131

00:09:21.460 --> 00:09:26.790

to see if it's running on Android Prato IP or 23 if it is it just a little success.



132

00:09:26.850 --> 00:09:31.170

And that's of course because the new security model doesn't apply before April 23.



133

00:09:31.170 --> 00:09:34.990

Now remember that we find the permissions we needed in the manifest.



134

00:09:35.220 --> 00:09:40.320

So therefore we can use the constants to find in the medico's class to specify which permission we're



135

00:09:40.320 --> 00:09:40.910

checking.



136

00:09:41.020 --> 00:09:46.350

Here it's the read a school contacts permission having to manifest not permission don't read in the



137

00:09:46.350 --> 00:09:47.150

school context.



138

00:09:47.160 --> 00:09:49.010

Every time is a bit of a mouthful.



139

00:09:49.140 --> 00:09:54.810

So we can report the constants from Android manifest to permission instead and which Judaea at the import



140

00:09:54.810 --> 00:09:55.570

for us.



141

00:09:55.740 --> 00:10:01.590

So first note that entrada manifest has been imported to give us access to the manifests not permission



142

00:10:01.590 --> 00:10:03.750

don't read on the school context field.



143

00:10:03.840 --> 00:10:10.010

Some have a look in the import section you can see here Android that manifests nutcase's at literally



144

00:10:10.010 --> 00:10:15.670

the first entry of the import section of the of the source code the ordering of course isn't important.



145

00:10:15.890 --> 00:10:19.030

So it might be a it may well be appearing lower down for you.



146

00:10:19.550 --> 00:10:23.940

So if a guy back to remove the manifesto permission qualify from the read context field.



147

00:10:24.100 --> 00:10:25.760

And despite that redoes called contex



148

00:10:28.900 --> 00:10:33.230

what I can do is just delete that if needed you can see the evidence to there but it has actually other



149

00:10:33.230 --> 00:10:33.680

than new ones.



150

00:10:33.680 --> 00:10:35.900

I was going to delete the old one.



151

00:10:37.150 --> 00:10:41.600

But what it should do it then as you can see that at the Android Menippus don't permission don't read



152

00:10:41.600 --> 00:10:42.980

Amsco contex.



153

00:10:43.220 --> 00:10:47.130

So therefore we can now get away with just putting rate Amsco context here.



154

00:10:47.180 --> 00:10:53.250

Let me just take this opportunity to check my preferences he led them to preferences going into auditor



155

00:10:53.930 --> 00:10:59.540

general what are we import and what had unambiguous inputs on the fly and optimizing ports on the fly



156

00:10:59.600 --> 00:11:00.990

which is what that uses.



157

00:11:00.990 --> 00:11:01.950

So I'm not sure why that either.



158

00:11:01.990 --> 00:11:02.270

Right.



159

00:11:02.270 --> 00:11:07.070

Grey entry appeared and appeared to sit there for a while but it should be automatic and remove that



160

00:11:07.070 --> 00:11:07.910

automatically from me.



161

00:11:07.970 --> 00:11:09.900

Anyway at this point we've actually succeeded now.



162

00:11:10.200 --> 00:11:15.440

We've got a them making it a lot easier to read now just reading in school context rather than the qualified



163

00:11:15.440 --> 00:11:17.360

that it had previously.



164

00:11:17.360 --> 00:11:20.970

So at this point I'm looking at this important law in.



165

00:11:21.410 --> 00:11:24.520

That's the equivalent of what's called a static important job.



166

00:11:24.890 --> 00:11:29.690

Now if you're not familiar with the static imports in Java that's just a way to import the static members



167

00:11:29.690 --> 00:11:30.670

of a class.



168

00:11:30.680 --> 00:11:34.380

These are usually constants that sites have to fully qualify them.



169

00:11:34.500 --> 00:11:38.990

Karttunen doesn't have the static keyword but importing the fully qualified value lock.



170

00:11:38.990 --> 00:11:45.410

This is the Cartland equivalent in putting like this can be useful but use it sparingly if you either



171

00:11:45.410 --> 00:11:45.730

do it.



172

00:11:45.740 --> 00:11:49.110

You can make it hard hard to understand and debug.



173

00:11:49.260 --> 00:11:52.950

They're just saying let me have a look at the code committed here again.



174

00:11:54.340 --> 00:12:01.770

From 27 onwards if you look at that code from 127 non-Buddhists now not immediately obvious where Read



175

00:12:01.770 --> 00:12:07.730

it was called contact's is coming from and had also imported the contacts contract Constance would have



176

00:12:07.730 --> 00:12:11.020

a lot of constants coming from different classes without being qualified.



177

00:12:11.240 --> 00:12:16.090

And that can make it hard to see what's going on and where all these constants are coming from.



178

00:12:16.100 --> 00:12:20.040

So I would recommend not using this type of import for more than one class at a time.



179

00:12:20.060 --> 00:12:22.150

All right so back to Lloyd 27.



180

00:12:22.190 --> 00:12:26.960

So we've passed the context this here is the first parameter.



181

00:12:27.350 --> 00:12:32.620

And we also passed a constant representing put the permission we're interested in to the check self



182

00:12:32.620 --> 00:12:33.740

promotion method.



183

00:12:33.760 --> 00:12:35.670

Now we'll get back an int result.



184

00:12:35.860 --> 00:12:39.500

So let's check the documentation to see what the return value is.



185

00:12:39.500 --> 00:12:42.890

So I'm going to click on the check cost self promotion method and bring up the documentation



186

00:12:47.490 --> 00:12:50.310

and you can say that these return values are fairly straightforward.



187

00:12:50.540 --> 00:12:55.970

We get one of the two constants to Materne either permission was granted if we already have the permission



188

00:12:56.390 --> 00:12:58.030

or permission denied.



189

00:12:58.040 --> 00:13:04.300

If we don't know on Android versions before Marcheline we should always get permission granted as luggers



190

00:13:04.310 --> 00:13:09.650

we specify the permission in the manifest our must meet the one above the permission would have been



191

00:13:09.650 --> 00:13:11.420

granted when the app was installed.



192

00:13:11.540 --> 00:13:16.160

And that means that the first time we run this app will get permission on the school denied it will



193

00:13:16.170 --> 00:13:18.710

have to request the permission from the user.



194

00:13:18.750 --> 00:13:22.760

This is where things get a bit interesting and you know it would be very straightforward except that



195

00:13:22.760 --> 00:13:27.730

users have an option to deny a permission and you can tick a box that they won't get asked again.



196

00:13:27.830 --> 00:13:31.370

I'm going to have a look at how that works and how to deal with it in the next video.



