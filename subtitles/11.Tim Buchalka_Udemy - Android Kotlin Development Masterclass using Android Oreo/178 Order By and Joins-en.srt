1
00:00:04,990 --> 00:00:10,240
ok so let's look a bit more at querying
the data including how we can make sure

2
00:00:10,240 --> 00:00:14,760
that we get the data back in a sensible
order if as I mentioned ordering of rows

3
00:00:14,760 --> 00:00:20,080
is undefined in a relational database so
when we display all the artists records

4
00:00:20,080 --> 00:00:25,170
actually come out in the same order each
time i can do that again select....

5
00:00:25,170 --> 00:00:32,320
.....so we get the same every time
we do we get the same order and that's

6
00:00:32,320 --> 00:00:36,940
because we have a primary key so the
records will automatically be selected

7
00:00:36,940 --> 00:00:41,860
based on the ordering of the primary key
note that the actual order of the record

8
00:00:41,860 --> 00:00:46,750
in the database is undefined and if we
didn't have a primary key that will be coming

9
00:00:46,750 --> 00:00:51,460
out in an undefined order now we can
actually specify a different order in

10
00:00:51,460 --> 00:00:57,250
our select statement by using an order
by clause so we can type.....

11
00:00:57,250 --> 00:01:07,930
....you can see now that the

12
00:01:07,930 --> 00:01:12,850
records have appeared in alphabetical
order and I can do exactly the same for

13
00:01:12,850 --> 00:01:24,420
the album's.....and you notice right down the bottom

14
00:01:24,420 --> 00:01:27,070
the two black beards Tea Party albums

15
00:01:27,070 --> 00:01:30,180
heavens to Betsy and whip jamboree are
out of order

16
00:01:30,720 --> 00:01:35,100
that's because they start with lowercase
letters now you can actually ignore case

17
00:01:35,100 --> 00:01:43,530
by using the collate no case clause so we
can do.....

18
00:01:43,530 --> 00:01:55,470
....and you can see
there are the ID 430 about 80% towards

19
00:01:55,470 --> 00:01:58,600
the bottom of the screen which is
whipped jamboree in that appears with

20
00:01:58,600 --> 00:02:02,560
the other albums beginning with W in
other words instead now ignoring case

21
00:02:02,560 --> 00:02:07,740
when it's actually returning results now
it is also possible to specify ascending

22
00:02:07,740 --> 00:02:14,050
or descending order using the keys
keywords asc desc or ASC or desc

23
00:02:14,050 --> 00:02:16,880
respectively which stands for ascending
or descending order

24
00:02:16,880 --> 00:02:23,960
so we can do select....

25
00:02:24,740 --> 00:02:27,920
....

26
00:02:27,920 --> 00:02:33,860
.....that's fine but
what if we want to group albums together

27
00:02:33,860 --> 00:02:39,080
so that all the albums by each artist
appear together well the order by clause

28
00:02:39,080 --> 00:02:42,530
can actually contain more than one
column so we can do something like

29
00:02:42,530 --> 00:02:52,490
....

30
00:02:53,120 --> 00:03:02,810
....and what that does it sorts
first by artist ID and then by album

31
00:03:02,810 --> 00:03:08,570
name so all the deep purple albums
artists 196 you can see a group of them

32
00:03:08,570 --> 00:03:14,120
here with the number 196 at the end of
the list of data they appear together near the

33
00:03:14,120 --> 00:03:18,290
end of the list you can see it also
starting with burn this one up here

34
00:03:18,290 --> 00:03:23,270
starting burn their and ending right
down here with who do we think we are

35
00:03:23,270 --> 00:03:26,370
remastered edition

36
00:03:26,370 --> 00:03:29,370
ok time for another mini challenge

37
00:03:31,060 --> 00:03:36,280
the challenges is to list all the songs so
that songs from the same album appear

38
00:03:36,280 --> 00:03:40,590
together in track order so that's the
challenge have a go at doing that by

39
00:03:40,590 --> 00:03:44,800
type in the sql code that
necessary to achieve that pause the

40
00:03:44,800 --> 00:03:48,480
video and when you're ready to see me
type it in start the video again so pause

41
00:03:48,480 --> 00:03:54,450
the video and I'll see you when you get
back alright so to achieve that what we

42
00:03:54,450 --> 00:03:58,390
need to do to list all the songs so that
song from the same album appear together

43
00:03:58,390 --> 00:04:10,120
in track order we type....

44
00:04:10,120 --> 00:04:12,670
....there you go

45
00:04:12,670 --> 00:04:17,290
so now the 11 songs from The Black Keys
albums attack and release appear together

46
00:04:17,290 --> 00:04:21,100
as you can see right at the end of the
list and you can check that you wanted

47
00:04:21,100 --> 00:04:29,350
to by typing.....

48
00:04:29,350 --> 00:04:37,090
.....and then we could do
something like....

49
00:04:37,090 --> 00:04:42,370
....

50
00:04:44,440 --> 00:04:48,760
....there you go you can see with a quick
scan up to the list shows that the records

51
00:04:48,760 --> 00:04:52,960
are grouped by album ID the last column
and in track order within an album the

52
00:04:52,960 --> 00:04:57,760
second column now having to run separate
queries like that is a bit grubby though

53
00:04:57,760 --> 00:05:02,380
let's see how to relate the tables
together so that we can get a list of

54
00:05:02,380 --> 00:05:06,660
songs that include the album the appear on
as well as the artist that produce them

55
00:05:09,210 --> 00:05:14,610
now to do this we need to use the SQL
join clause that used to join tables

56
00:05:14,610 --> 00:05:19,410
together now keeping data normalized
so the tables only contain information

57
00:05:19,410 --> 00:05:24,590
that relates to a single thing song
album or artist in our example is a

58
00:05:24,590 --> 00:05:29,580
fundamental part of relational databases
and by doing that and then joining the

59
00:05:29,580 --> 00:05:33,930
tables back together you get a great
deal of flexibility in how you can query

60
00:05:33,930 --> 00:05:38,810
and manipulate the data now remember
that the songs table contains a column

61
00:05:38,810 --> 00:05:44,280
holding the album ID and the album table
has an artist ID field and these are

62
00:05:44,280 --> 00:05:47,280
used to provide a link between the
tables

63
00:05:47,820 --> 00:05:51,720
don't worry about how those ids got into
the tables at this stage we just

64
00:05:51,720 --> 00:05:54,720
interested in using them to join the
tables at the moment

65
00:05:57,910 --> 00:06:02,650
so you can see here on screen how the
album column in the songs table provides

66
00:06:02,650 --> 00:06:08,050
a link to the album table the first 10
songs all belong to the album whose ID

67
00:06:08,050 --> 00:06:12,940
is one tales of the crown and the next
set of songs belong to the masquerade

68
00:06:12,940 --> 00:06:16,210
ball

69
00:06:16,210 --> 00:06:21,580
the artist column in the album's links
to the artist table so those first two

70
00:06:21,580 --> 00:06:26,650
albums are by axel rudi pell and the
album crimes of passion is by pat

71
00:06:26,650 --> 00:06:34,120
benatar and night flight is by band called
budgie alright so with that said let's

72
00:06:34,120 --> 00:06:39,250
actually join the tables in sql and
see how this is going to look so I'm

73
00:06:39,250 --> 00:06:43,630
going to do I'm actually just going to
do a . quit and then I'm just going to

74
00:06:43,630 --> 00:06:48,490
clear the screen and see notice how the
up arrow is working from here it's just in

75
00:06:48,490 --> 00:06:53,380
sql lite three for some reason it's
not working maybe it was weird characters but

76
00:06:53,380 --> 00:06:57,970
so I've gone back into the database again
and just so starting off with a clean

77
00:06:57,970 --> 00:07:03,160
slate so let's let's now use this select
statement and add a joint clause to link

78
00:07:03,160 --> 00:07:10,840
the songs and albums i'm going to do is
type....

79
00:07:10,840 --> 00:07:34,060
....

80
00:07:34,060 --> 00:07:38,880
....press enter their so the first thing to note
is that have specified which table the

81
00:07:38,880 --> 00:07:43,470
columns are in when selecting them and
probably what I should have done is explained that

82
00:07:43,470 --> 00:07:46,840
while that select statement was
on screen because of course now i can't

83
00:07:46,840 --> 00:07:49,840
bring back or can i I can scroll up

84
00:07:51,740 --> 00:07:57,500
so what I do is I just type it again and
again you shouldn't have this scenario

85
00:07:57,500 --> 00:08:01,580
should be able to do an up arrow and it
should work but for some reason my Mac

86
00:08:01,580 --> 00:08:13,280
is not doing what i wanted to do so
albums....

87
00:08:13,280 --> 00:08:20,440
....

88
00:08:20,440 --> 00:08:25,630
alright so leave that on before I press enter
this time getting back to that statement

89
00:08:25,630 --> 00:08:29,090
the first thing to note is that i've
specified which table the columns are in

90
00:08:29,090 --> 00:08:33,970
when selecting them so track and title are in the song table and you notice how

91
00:08:33,970 --> 00:08:39,580
I use songs . track and songs . title now
name comes from the album's table so

92
00:08:39,580 --> 00:08:44,140
specified that as albums . name if
there's no ambiguity you can actually

93
00:08:44,140 --> 00:08:48,580
leave off the table name so what I could
have done I will just press this to see the

94
00:08:48,580 --> 00:08:56,200
results again so i could have also
written this as select track title name from

95
00:08:56,200 --> 00:09:04,550
songs join album on
song.albums

96
00:09:04,550 --> 00:09:10,450
...so I could have done it that way if there's no ambiguity

97
00:09:10,450 --> 00:09:16,520
with the names but it is a
good habit to always specify the table

98
00:09:16,520 --> 00:09:21,440
name especially in code now living in
it off is a useful shortcut to save

99
00:09:21,440 --> 00:09:26,660
typing when working interactively like
this but i'd say always prefix the field

100
00:09:26,660 --> 00:09:31,490
with the table name in your code now
some albums have a sort of subtitle so

101
00:09:31,490 --> 00:09:35,420
if the table was modified to include a
title column then that query will no

102
00:09:35,420 --> 00:09:39,620
longer work because it would know which
table the title column should come from

103
00:09:39,620 --> 00:09:44,870
and note though that we can't leave the
table name off when using the ID column

104
00:09:44,870 --> 00:09:49,250
so we just went back hear the end of it
instead of putting albums.id if I

105
00:09:49,250 --> 00:09:55,070
just put _ID there and press
semicolon press enter we get error no

106
00:09:55,070 --> 00:09:59,990
such song and and sorry no such
column song . album now that was

107
00:09:59,990 --> 00:10:03,940
actually different message that was
because i accidentally type song their

108
00:10:03,940 --> 00:10:05,040
so just going but I shoudl

109
00:10:05,040 --> 00:10:09,120
be able to copy and paste i might do it that way it save a bit of time so

110
00:10:09,120 --> 00:10:14,280
the original request was songs should be
have been songs.album because of course songs is

111
00:10:14,280 --> 00:10:19,710
the name of the table was going to show
you as if I just type it like that without

112
00:10:19,710 --> 00:10:26,160
actually putting the albums . before the
ID and press enter now we get the error

113
00:10:26,160 --> 00:10:29,820
that i wanted to show you the first time
error ambiguous column name

114
00:10:29,820 --> 00:10:34,740
_ID and that's because both tables have
a column of that same name _ID

115
00:10:34,740 --> 00:10:37,440
and then sql lite doesn't know which
one you mean

116
00:10:37,440 --> 00:10:43,860
so you need to specify it there and just
going to copy that again paste it so i

117
00:10:43,860 --> 00:10:48,990
would go back and make that songs and
make that album I should say . _ID

118
00:10:48,990 --> 00:10:56,670
and get our data back there are different
types of joins the most common being an

119
00:10:56,670 --> 00:11:02,070
inner join and join as I have used here is
really a shorthand for inner join what

120
00:11:02,070 --> 00:11:05,070
I'll do is I'll retrieve the full
command that included the table names

121
00:11:05,070 --> 00:11:13,080
then used include the word inner so i'm
going to type....

122
00:11:13,080 --> 00:11:23,070
....

123
00:11:23,070 --> 00:11:33,840
....now

124
00:11:33,840 --> 00:11:37,350
keep in mind that not all database
systems will allow you to leave off the

125
00:11:37,350 --> 00:11:41,940
word inner so it's worth always using it
and i'll just run this to make sure it

126
00:11:41,940 --> 00:11:47,970
works now looking at the result of that
query we can see that the song just walk

127
00:11:47,970 --> 00:11:53,310
in my shoes is from the album super
lungs and permanent vacation is from an

128
00:11:53,310 --> 00:12:00,060
album of the same name and so on so just
paste this code back in again so again

129
00:12:00,060 --> 00:12:04,020
this select statement follows the same
pattern as we've been using up until now

130
00:12:04,020 --> 00:12:09,720
instead of select from songs we're doing
select from songs inner join albums

131
00:12:09,720 --> 00:12:13,980
we then have to tell sql lite which
columns are involved in the join which

132
00:12:13,980 --> 00:12:18,810
is what the on part does it says to
relate the rows and songs

133
00:12:18,810 --> 00:12:24,960
to those in albums where the songs
tables album column equals the album

134
00:12:24,960 --> 00:12:30,600
tables ID column and if you really want
to we can actually tact the order by

135
00:12:30,600 --> 00:12:34,950
clause on the end of that if we want to
sort the data so i could come to the end

136
00:12:34,950 --> 00:12:46,080
here and I could type.....

137
00:12:46,080 --> 00:12:53,820
.....that's actually

138
00:12:53,820 --> 00:12:57,720
returned a heck of a lot of results
as you can see there but it actually

139
00:12:57,720 --> 00:13:02,370
went through and do it really quickly if
I wanted to I could just scroll back up

140
00:13:02,370 --> 00:13:06,870
and have a look at some of the other
data that has been returned but you can see

141
00:13:06,870 --> 00:13:10,950
there's a lot of data and sql lite has
manipulated that and returned it very

142
00:13:10,950 --> 00:13:12,210
quickly

143
00:13:12,210 --> 00:13:16,050
alright so I'm going to finish the video
here now we'll continue on working with

144
00:13:16,050 --> 00:13:17,700
sql lite in the next video

