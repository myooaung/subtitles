WEBVTT
1

00:00:04.470 --> 00:00:09.150

all right so moving on to how we're



2

00:00:06.600 --> 00:00:11.400

going to go ahead and create or add the



3

00:00:09.150 --> 00:00:13.860

necessary sequel code to create our



4

00:00:11.400 --> 00:00:16.080

database so we're going to build up the



5

00:00:13.860 --> 00:00:18.420

necessary string but what we're going to



6

00:00:16.080 --> 00:00:21.270

do is use the constants from our tasks



7

00:00:18.420 --> 00:00:23.400

contract class rather than hard coding



8

00:00:21.270 --> 00:00:25.320

the table and column names as you can



9

00:00:23.400 --> 00:00:29.670

see in the comment so I'm going to come



10

00:00:25.320 --> 00:00:32.340

down here and we'll start typing or do



11

00:00:29.670 --> 00:00:37.800

log entry first and lagdi parentheses



12

00:00:32.340 --> 00:00:39.589

ter comma on create calling starts then



13

00:00:37.800 --> 00:00:44.219

on the next line we're going to type Val



14

00:00:39.589 --> 00:00:50.069

s SQL in upper case equals three double



15

00:00:44.219 --> 00:00:51.780

quotes create table dollar sign left or



16

00:00:50.069 --> 00:00:57.839

right curly braces through the top two



17

00:00:51.780 --> 00:01:01.859

casks contract dot table name and have



18

00:00:57.839 --> 00:01:04.409

the closing write curly brace in a left



19

00:01:01.859 --> 00:01:06.120

parenthesis then on the next line we're



20

00:01:04.409 --> 00:01:09.410

going to put the dollar sign left or



21

00:01:06.120 --> 00:01:14.370

right curly braces tasks contract dot



22

00:01:09.410 --> 00:01:18.410

columns dot ID rot curly brace and it's



23

00:01:14.370 --> 00:01:21.240

going to be integer space primary key



24

00:01:18.410 --> 00:01:25.710

the space between them they're not



25

00:01:21.240 --> 00:01:27.980

normal the space comma on the next line



26

00:01:25.710 --> 00:01:31.740

don't assign left-to-right curly braces



27

00:01:27.980 --> 00:01:35.550

we're doing the same but for the task in



28

00:01:31.740 --> 00:01:40.770

the school name write curly brace and



29

00:01:35.550 --> 00:01:41.970

it's going to be text not doll right and



30

00:01:40.770 --> 00:01:44.100

the next two lines what I'm going to do



31

00:01:41.970 --> 00:01:45.720

is just copy that twice it was going to



32

00:01:44.100 --> 00:01:46.560

be easy to change it rather than topping



33

00:01:45.720 --> 00:01:50.100

the whole thing it again



34

00:01:46.560 --> 00:01:52.830

so tasks underscore name or task or name



35

00:01:50.100 --> 00:01:55.620

we're going to make dot task and a small



36

00:01:52.830 --> 00:01:57.360

description and that's also a text but



37

00:01:55.620 --> 00:01:59.520

it's optional so we're going to remove



38

00:01:57.360 --> 00:02:02.220

they're not null and the last line



39

00:01:59.520 --> 00:02:03.720

instead of task comes called name we're



40

00:02:02.220 --> 00:02:04.470

going to go with task and it's called



41

00:02:03.720 --> 00:02:07.170

sort order



42

00:02:04.470 --> 00:02:09.599

that's another text it's going to be an



43

00:02:07.170 --> 00:02:11.159

integer then we've already established



44

00:02:09.599 --> 00:02:12.960

in the previous video that that's



45

00:02:11.159 --> 00:02:15.960

optional so I'm going to remove they're



46

00:02:12.960 --> 00:02:18.230

not now instead what I'm going to do is



47

00:02:15.960 --> 00:02:20.690

then delete the



48

00:02:18.230 --> 00:02:23.150

come up we're going to add a parenthesis



49

00:02:20.690 --> 00:02:24.709

there semicolon then I'm going to add



50

00:02:23.150 --> 00:02:27.290

the three double quotes to close off the



51

00:02:24.709 --> 00:02:30.290

string and on the end of the string I'm



52

00:02:27.290 --> 00:02:32.900

going to do a dot Place indent then in



53

00:02:30.290 --> 00:02:35.480

parentheses double quotes with a space



54

00:02:32.900 --> 00:02:37.310

in between now we can confirm we've got



55

00:02:35.480 --> 00:02:38.090

it right by logging the string of



56

00:02:37.310 --> 00:02:39.650

checking the logcat



57

00:02:38.090 --> 00:02:42.769

so let's add a logging entry in the next



58

00:02:39.650 --> 00:02:47.060

line it's a lock type d parentheses ter



59

00:02:42.769 --> 00:02:48.769

comma yes SQL and obviously logging will



60

00:02:47.060 --> 00:02:51.590

help if we've made a mistake so that we



61

00:02:48.769 --> 00:02:53.360

can check the sequel in our logcat with



62

00:02:51.590 --> 00:02:55.459

our comment and you might be wondering



63

00:02:53.360 --> 00:02:58.340

why I've used to replace indent on line



64

00:02:55.459 --> 00:03:00.829

35 well that's to format the spaces at



65

00:02:58.340 --> 00:03:03.019

the start of each line and while it's



66

00:03:00.829 --> 00:03:05.620

not strictly necessary for the sequel to



67

00:03:03.019 --> 00:03:07.670

work it does make checking a lot easier



68

00:03:05.620 --> 00:03:09.739

so that looks pretty complicated



69

00:03:07.670 --> 00:03:11.840

compared to the comment line above it



70

00:03:09.739 --> 00:03:14.329

what I've done is replace all the hard



71

00:03:11.840 --> 00:03:16.940

coded references to the column names in



72

00:03:14.329 --> 00:03:19.220

the original string with the constants



73

00:03:16.940 --> 00:03:22.250

that we've defined in our tasks contract



74

00:03:19.220 --> 00:03:24.829

class now the sequel statement will be



75

00:03:22.250 --> 00:03:26.690

exactly the same as it was and we'll see



76

00:03:24.829 --> 00:03:29.060

that when we run the app and check the



77

00:03:26.690 --> 00:03:30.530

logcat so you might be wondering why



78

00:03:29.060 --> 00:03:33.319

I've gone to all the trouble of using



79

00:03:30.530 --> 00:03:35.989

this complicated code when the simpler



80

00:03:33.319 --> 00:03:38.269

string with hard-coded values would have



81

00:03:35.989 --> 00:03:40.849

worked well there are a few reasons for



82

00:03:38.269 --> 00:03:43.459

this we've created a contract that



83

00:03:40.849 --> 00:03:45.590

defines the column names so that any



84

00:03:43.459 --> 00:03:47.569

external programs that use our content



85

00:03:45.590 --> 00:03:50.299

provider know which columns are



86

00:03:47.569 --> 00:03:51.980

available in the database if we make a



87

00:03:50.299 --> 00:03:54.470

mistake in typing one of the column



88

00:03:51.980 --> 00:03:57.230

names either here or in the contract



89

00:03:54.470 --> 00:03:59.450

then those external programs won't work



90

00:03:57.230 --> 00:04:01.549

the names we've used in the contract



91

00:03:59.450 --> 00:04:04.700

have to exactly match the column names



92

00:04:01.549 --> 00:04:06.919

we use when we create the table building



93

00:04:04.700 --> 00:04:09.319

up the sequel using the constants rather



94

00:04:06.919 --> 00:04:11.840

than hard coding the names make sure



95

00:04:09.319 --> 00:04:13.790

that they do match and it's a good rule



96

00:04:11.840 --> 00:04:16.639

when programming the things should only



97

00:04:13.790 --> 00:04:18.919

be defined once so having created those



98

00:04:16.639 --> 00:04:20.720

constants for our column names we should



99

00:04:18.919 --> 00:04:23.630

use them wherever we need to refer to



100

00:04:20.720 --> 00:04:25.969

those columns so that's one reason but



101

00:04:23.630 --> 00:04:29.180

another reason is that things have a way



102

00:04:25.969 --> 00:04:31.009

of changing as an example let's say that



103

00:04:29.180 --> 00:04:33.740

we're creating this app as



104

00:04:31.009 --> 00:04:35.689

of a team and another programmer is



105

00:04:33.740 --> 00:04:39.379

working on a different set of database



106

00:04:35.689 --> 00:04:41.809

tables one of her tables also has a sort



107

00:04:39.379 --> 00:04:44.149

order column so that when that tables



108

00:04:41.809 --> 00:04:46.339

joined to ours the column names have



109

00:04:44.149 --> 00:04:49.159

changed and we saw that when we joined



110

00:04:46.339 --> 00:04:51.770

the artists and album tables in the



111

00:04:49.159 --> 00:04:54.740

sequel videos both tables had a name



112

00:04:51.770 --> 00:04:58.279

column so the albums table name column



113

00:04:54.740 --> 00:04:59.990

became name column one now it is easy to



114

00:04:58.279 --> 00:05:02.629

work around that by aliasing their



115

00:04:59.990 --> 00:05:04.909

column names using the as keyword but



116

00:05:02.629 --> 00:05:07.129

that means remembering to do so in every



117

00:05:04.909 --> 00:05:09.439

query and there's no guarantee that



118

00:05:07.129 --> 00:05:12.559

every programmer will use the same



119

00:05:09.439 --> 00:05:15.110

aliases or apply them the same way



120

00:05:12.559 --> 00:05:17.330

around so as a result the team decides



121

00:05:15.110 --> 00:05:19.219

to change the name of your sort order



122

00:05:17.330 --> 00:05:21.680

column so that there's no longer any



123

00:05:19.219 --> 00:05:24.289

confusion now because you've done things



124

00:05:21.680 --> 00:05:27.110

properly you can change it in the tasks



125

00:05:24.289 --> 00:05:28.610

contract columns class five minutes



126

00:05:27.110 --> 00:05:30.499

later you've released a new version to



127

00:05:28.610 --> 00:05:32.959

testing and you're lazing in the Sun



128

00:05:30.499 --> 00:05:35.180

outside Gil whose headquarters now if



129

00:05:32.959 --> 00:05:36.949

you'd hard-coded the column name in all



130

00:05:35.180 --> 00:05:39.499

your sequel statements you'd then have



131

00:05:36.949 --> 00:05:41.930

to search every file in the project to



132

00:05:39.499 --> 00:05:43.969

find all occurrences of sort order in



133

00:05:41.930 --> 00:05:46.279

sequel statements and then change them



134

00:05:43.969 --> 00:05:48.889

and enjoyed studio will let you do a



135

00:05:46.279 --> 00:05:51.199

search and replace across files but you



136

00:05:48.889 --> 00:05:52.719

do need to be very careful that you



137

00:05:51.199 --> 00:05:55.699

haven't created a method or variable



138

00:05:52.719 --> 00:05:57.949

that's also called sort order that's



139

00:05:55.699 --> 00:05:59.779

going to take a lot longer and you may



140

00:05:57.949 --> 00:06:01.999

introduce bugs by missing one of the



141

00:05:59.779 --> 00:06:04.699

hard-coded column names or changing



142

00:06:01.999 --> 00:06:07.580

another object by mistake and to provide



143

00:06:04.699 --> 00:06:09.499

some perspective here your programs that



144

00:06:07.580 --> 00:06:12.139

you develop may be used by thousands of



145

00:06:09.499 --> 00:06:14.419

people for a decade or more and when you



146

00:06:12.139 --> 00:06:16.729

view it like that a bit of extra work at



147

00:06:14.419 --> 00:06:18.199

this stage is nothing compared to the



148

00:06:16.729 --> 00:06:20.569

amount of times your code will be



149

00:06:18.199 --> 00:06:22.099

executed of course I can't guarantee



150

00:06:20.569 --> 00:06:25.099

that doing things properly will hand you



151

00:06:22.099 --> 00:06:26.959

a job at Google what I can guarantee is



152

00:06:25.099 --> 00:06:30.110

if you don't do things properly you



153

00:06:26.959 --> 00:06:31.490

won't get that job at Google okay so



154

00:06:30.110 --> 00:06:33.349

those are a couple of reasons for this



155

00:06:31.490 --> 00:06:35.209

extra work and if you still not



156

00:06:33.349 --> 00:06:36.979

convinced at this point in time please



157

00:06:35.209 --> 00:06:39.319

just take my word for it for now and



158

00:06:36.979 --> 00:06:42.019

let's move on all right so we know now



159

00:06:39.319 --> 00:06:44.360

how to execute the sequel statement we



160

00:06:42.019 --> 00:06:46.099

just pass it to the databases X X



161

00:06:44.360 --> 00:06:47.419

we called method let's go ahead and do



162

00:06:46.099 --> 00:06:50.569

that but we are going to get an error



163

00:06:47.419 --> 00:06:53.120

here I'm gonna type DB don't exit sequel



164

00:06:50.569 --> 00:06:55.849

I'm gonna pass the SC call string that



165

00:06:53.120 --> 00:06:57.889

we created so hover over this now and



166

00:06:55.849 --> 00:07:00.110

Cynthia is and we've got an error



167

00:06:57.889 --> 00:07:03.139

basically because the code generator has



168

00:07:00.110 --> 00:07:05.780

created the DB parameter as a nullable



169

00:07:03.139 --> 00:07:07.310

type in google adding the non null



170

00:07:05.780 --> 00:07:09.770

annotations to the android framework



171

00:07:07.310 --> 00:07:12.259

code but they haven't got around to the



172

00:07:09.770 --> 00:07:14.330

sequel I'd open helper class as of the



173

00:07:12.259 --> 00:07:15.650

time I'm recording this now if you're



174

00:07:14.330 --> 00:07:17.629

not confident changing the function



175

00:07:15.650 --> 00:07:20.210

signatures when you work on your own



176

00:07:17.629 --> 00:07:22.669

apps then you can use the Kotlin safe



177

00:07:20.210 --> 00:07:25.279

call operator here so all you need to do



178

00:07:22.669 --> 00:07:28.039

is change the statement by adding a



179

00:07:25.279 --> 00:07:30.169

question mark after the DB and that



180

00:07:28.039 --> 00:07:32.509

would certainly work but the source code



181

00:07:30.169 --> 00:07:34.849

doesn't give any real indication that DB



182

00:07:32.509 --> 00:07:36.319

can't be no but it just doesn't make any



183

00:07:34.849 --> 00:07:38.870

sense for this function to be called



184

00:07:36.319 --> 00:07:41.120

with an old database if it is our



185

00:07:38.870 --> 00:07:43.189

program is going to crash anyway now



186

00:07:41.120 --> 00:07:45.139

I'll just do it later when we come to



187

00:07:43.189 --> 00:07:47.750

access a database that hasn't been



188

00:07:45.139 --> 00:07:50.240

created so what I'm saying here is I'm



189

00:07:47.750 --> 00:07:52.610

confident that DB won't be null if it



190

00:07:50.240 --> 00:07:55.009

isn't though I prefer the app to crash



191

00:07:52.610 --> 00:07:57.620

here rather than after the year you sirs



192

00:07:55.009 --> 00:07:59.300

enter data and try to save it so we're



193

00:07:57.620 --> 00:08:02.659

going to do is undo that change and



194

00:07:59.300 --> 00:08:04.639

modify the function signature instead so



195

00:08:02.659 --> 00:08:06.740

removing the question mark and then to



196

00:08:04.639 --> 00:08:09.199

change the function signature we just



197

00:08:06.740 --> 00:08:12.110

need to come up here to start off the



198

00:08:09.199 --> 00:08:15.169

function and remove the question mark on



199

00:08:12.110 --> 00:08:16.400

the end and that fixes the problem and



200

00:08:15.169 --> 00:08:19.729

I'm also going to take this opportunity



201

00:08:16.400 --> 00:08:22.159

to make DB a non nullable type in the on



202

00:08:19.729 --> 00:08:24.199

upgrade function as well for the same



203

00:08:22.159 --> 00:08:26.539

reason and we'll come back to that on



204

00:08:24.199 --> 00:08:28.759

upgrade function later we nearly finish



205

00:08:26.539 --> 00:08:31.099

with the app database class we're going



206

00:08:28.759 --> 00:08:33.440

to make it a singleton to prevent



207

00:08:31.099 --> 00:08:35.630

multiple instances being created I'm



208

00:08:33.440 --> 00:08:37.849

going to talk more about that why we're



209

00:08:35.630 --> 00:08:40.089

doing that and how to do it in the next



210

00:08:37.849 --> 00:08:40.089

video



