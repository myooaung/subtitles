1
00:00:04,730 --> 00:00:06,680
Alright, let's have a discussion about

2
00:00:06,680 --> 00:00:10,039
variables and types. Now a variable is

3
00:00:10,039 --> 00:00:11,930
just a name that we give to an area of

4
00:00:11,930 --> 00:00:14,179
memory so that we can refer to the

5
00:00:14,179 --> 00:00:16,580
contents by name, so I think of it like

6
00:00:16,580 --> 00:00:19,130
the mailboxes in an in an apartment

7
00:00:19,130 --> 00:00:21,829
block now there's a bank of mailboxes in

8
00:00:21,829 --> 00:00:23,660
the lobby and each one is labeled with

9
00:00:23,660 --> 00:00:24,919
the name of its owner

10
00:00:24,919 --> 00:00:27,079
then when the post person delivers the

11
00:00:27,079 --> 00:00:29,119
letters they'll put mine in a mailbox

12
00:00:29,119 --> 00:00:31,669
labeled Tim that makes it easy for me to

13
00:00:31,669 --> 00:00:33,829
get my mail I just open my mailbox

14
00:00:33,829 --> 00:00:35,500
rather than having to check them all.

15
00:00:35,500 --> 00:00:37,730
Once again there's a difference in the

16
00:00:37,730 --> 00:00:40,580
way humans and computers behave now the

17
00:00:40,580 --> 00:00:42,320
post person wouldn't try to force a

18
00:00:42,320 --> 00:00:44,390
parcel into my mailbox because the

19
00:00:44,390 --> 00:00:46,160
mailbox are slots only big enough to

20
00:00:46,160 --> 00:00:48,050
take letters then things wouldn't go

21
00:00:48,050 --> 00:00:50,090
well if I tried squeezing a large parcel

22
00:00:50,090 --> 00:00:52,489
in but computers don't think like that

23
00:00:52,489 --> 00:00:55,130
so we have to tell them what kind of

24
00:00:55,130 --> 00:00:57,170
thing we can store in each of the

25
00:00:57,170 --> 00:01:00,020
variables that we use so let's actually

26
00:01:00,020 --> 00:01:02,630
see how that works with an example I'm

27
00:01:02,630 --> 00:01:04,519
going to come up here to our Kotlin

28
00:01:04,519 --> 00:01:06,560
tutorial project and I'm gonna put some

29
00:01:06,560 --> 00:01:09,259
code in below the existing two lines of

30
00:01:09,259 --> 00:01:11,119
code and put a space in there so I'm

31
00:01:11,119 --> 00:01:12,799
gonna start on line five I'm gonna type

32
00:01:12,799 --> 00:01:17,109
var ah space Tim :

33
00:01:17,109 --> 00:01:22,219
space string equals double quotes or

34
00:01:22,219 --> 00:01:26,389
speech marks Tim Buchalka then

35
00:01:26,389 --> 00:01:27,709
I'm gonna type print line on the next

36
00:01:27,709 --> 00:01:31,369
line parenthesis Tim. So what we've done

37
00:01:31,369 --> 00:01:34,549
here is we've created a variable called

38
00:01:34,549 --> 00:01:38,149
Tim and put the text Tim Buchalka in the

39
00:01:38,149 --> 00:01:40,969
area of memory that's now labeled Tim so

40
00:01:40,969 --> 00:01:43,249
we've told the computer that this area

41
00:01:43,249 --> 00:01:46,219
of memory can hold string values so it's

42
00:01:46,219 --> 00:01:48,799
fine to store text there. Now string by

43
00:01:48,799 --> 00:01:50,689
the way is the name given two types of

44
00:01:50,689 --> 00:01:53,479
variables that can store text and on the

45
00:01:53,479 --> 00:01:56,529
next line on line six we're printing Tim

46
00:01:56,529 --> 00:01:58,729
but instead of printing the three

47
00:01:58,729 --> 00:02:01,399
characters Tim the computer is going to

48
00:02:01,399 --> 00:02:03,319
go off to the area of memory that we've

49
00:02:03,319 --> 00:02:05,630
labeled Tim and get the contents and

50
00:02:05,630 --> 00:02:08,179
should then print those contents not the

51
00:02:08,179 --> 00:02:10,099
name that we've given to that bit of

52
00:02:10,099 --> 00:02:12,140
memory so let's just run the program to

53
00:02:12,140 --> 00:02:13,849
confirm that but I right click it and

54
00:02:13,849 --> 00:02:16,879
click on run main kt and you can see

55
00:02:16,879 --> 00:02:18,440
down here down the bottom,

56
00:02:18,440 --> 00:02:21,530
it's printing out my full name, so on line five

57
00:02:21,530 --> 00:02:26,000
up here we declared the variable Tim.

58
00:02:26,000 --> 00:02:28,550
Now when we declare a variable we tell the

59
00:02:28,550 --> 00:02:30,440
computer what type of information it can

60
00:02:30,440 --> 00:02:32,600
store so in this case it can store

61
00:02:32,600 --> 00:02:35,690
string objects we then gave the variable

62
00:02:35,690 --> 00:02:38,030
a name Tim and again when we run the

63
00:02:38,030 --> 00:02:40,250
program it printed out my name at the

64
00:02:40,250 --> 00:02:42,170
end as you can see that down the bottom

65
00:02:42,170 --> 00:02:44,450
left-hand corner of the screen. Now often

66
00:02:44,450 --> 00:02:47,090
you'll also give the variable a value at

67
00:02:47,090 --> 00:02:49,580
the same time which we've done here by

68
00:02:49,580 --> 00:02:51,560
using equals then the string that we

69
00:02:51,560 --> 00:02:53,720
want to assign to the variable however

70
00:02:53,720 --> 00:02:56,210
you can also assign the value later if

71
00:02:56,210 --> 00:02:58,580
you want so to show you what I mean by

72
00:02:58,580 --> 00:03:00,650
that I can leave this line here var Tim

73
00:03:00,650 --> 00:03:04,400
stream and press enter art a string then

74
00:03:04,400 --> 00:03:10,330
on the next line I could type Tim equals

75
00:03:10,330 --> 00:03:12,470
let's move this over so it's indented

76
00:03:12,470 --> 00:03:15,020
correctly and when I run that we should

77
00:03:15,020 --> 00:03:17,960
get exactly the same result you can see

78
00:03:17,960 --> 00:03:20,480
it still shows Tim Buchalka

79
00:03:20,480 --> 00:03:21,770
the important thing here is that the

80
00:03:21,770 --> 00:03:25,250
variable Tim must be declared before we

81
00:03:25,250 --> 00:03:27,560
can assign a value to it until we

82
00:03:27,560 --> 00:03:30,230
declare the variable the variable the

83
00:03:30,230 --> 00:03:31,820
computer doesn't know what kind of

84
00:03:31,820 --> 00:03:34,160
information it can store it also hasn't

85
00:03:34,160 --> 00:03:36,620
allocated any memory for it, so it's a

86
00:03:36,620 --> 00:03:38,000
bit like the poster you're trying to

87
00:03:38,000 --> 00:03:40,010
deliver a letter but there's no mailbox

88
00:03:40,010 --> 00:03:42,320
with my name on it being human they can

89
00:03:42,320 --> 00:03:44,210
make decisions for themselves they might

90
00:03:44,210 --> 00:03:46,190
for example ask the neighbors if anyone

91
00:03:46,190 --> 00:03:48,380
called Tim has moved in recently the

92
00:03:48,380 --> 00:03:50,209
computer however won't make any

93
00:03:50,209 --> 00:03:52,459
decisions that you haven't programmed it

94
00:03:52,459 --> 00:03:55,220
to make so you'll just get an error so

95
00:03:55,220 --> 00:03:56,900
then let's actually see that what I'm

96
00:03:56,900 --> 00:03:59,030
going to do is on line five I'm going to

97
00:03:59,030 --> 00:04:01,520
delete the declaration or rather I went

98
00:04:01,520 --> 00:04:02,780
to leader I'm going to turn it into a

99
00:04:02,780 --> 00:04:04,910
comment instead and I'll explain

100
00:04:04,910 --> 00:04:06,680
comments in a minute but I'm going to

101
00:04:06,680 --> 00:04:08,930
put two slashes there slash slash

102
00:04:08,930 --> 00:04:12,200
forward slashes yeah what's up done that

103
00:04:12,200 --> 00:04:13,880
the first thing to notice is that we've

104
00:04:13,880 --> 00:04:17,239
now got two errors the word Tim appears

105
00:04:17,239 --> 00:04:20,299
in red in both places that it's used and

106
00:04:20,299 --> 00:04:21,890
that's because Kotlin no longer knows

107
00:04:21,890 --> 00:04:24,350
what it means now I can see what the

108
00:04:24,350 --> 00:04:25,730
errors are by the way by hovering the

109
00:04:25,730 --> 00:04:28,070
mouse over the red text unresolved

110
00:04:28,070 --> 00:04:31,040
reference Tim and I can also hover over

111
00:04:31,040 --> 00:04:32,090
the red marks

112
00:04:32,090 --> 00:04:34,120
marjina sporting at the same thing

113
00:04:34,120 --> 00:04:37,400
basically showing the same error which

114
00:04:37,400 --> 00:04:39,830
is unresolved a reference Tim so that's

115
00:04:39,830 --> 00:04:42,320
computer speak for I've got no idea what

116
00:04:42,320 --> 00:04:44,750
you mean by Tim I can't run the program

117
00:04:44,750 --> 00:04:46,550
now but I can try anyway so I'll run

118
00:04:46,550 --> 00:04:49,880
that we actually get an error here it's

119
00:04:49,880 --> 00:04:51,139
not allowing us to run and it's

120
00:04:51,139 --> 00:04:52,550
basically saying that we need to fix

121
00:04:52,550 --> 00:04:56,030
this error before we can run it now I

122
00:04:56,030 --> 00:04:57,380
know that doesn't give a lot of

123
00:04:57,380 --> 00:04:59,660
information about the type of error but

124
00:04:59,660 --> 00:05:01,160
that's because Android studio is really

125
00:05:01,160 --> 00:05:03,229
intended for creating and running

126
00:05:03,229 --> 00:05:05,510
Android apps we'll be looking at other

127
00:05:05,510 --> 00:05:07,340
error messages later on when we get them

128
00:05:07,340 --> 00:05:09,290
because our code compiles more crashes

129
00:05:09,290 --> 00:05:10,820
for now though there's no point trying

130
00:05:10,820 --> 00:05:13,220
to run a program if Android Studios

131
00:05:13,220 --> 00:05:14,900
highlighting errors on the screen as it

132
00:05:14,900 --> 00:05:17,600
is he man our example so what's happened

133
00:05:17,600 --> 00:05:19,310
here is that we haven't declared the

134
00:05:19,310 --> 00:05:22,160
variable Tim, so Kotlin has no idea what

135
00:05:22,160 --> 00:05:24,500
it's referring to so instead of deleting

136
00:05:24,500 --> 00:05:26,630
the declaration I turned it into a comet

137
00:05:26,630 --> 00:05:29,300
so any line that starts with these two

138
00:05:29,300 --> 00:05:31,850
slashes like this one is ignored by

139
00:05:31,850 --> 00:05:34,639
Kotlin it's a good way to put comments

140
00:05:34,639 --> 00:05:36,889
in your code to explain what the codes

141
00:05:36,889 --> 00:05:38,840
doing it's also a good way to

142
00:05:38,840 --> 00:05:40,850
temporarily disable lines of code that

143
00:05:40,850 --> 00:05:44,720
are executed like I did here now I'm

144
00:05:44,720 --> 00:05:46,880
going to uncomment that line and I'm

145
00:05:46,880 --> 00:05:48,979
using a useful shortcut key to do that

146
00:05:48,979 --> 00:05:52,010
on a Mac its command and slash and on a

147
00:05:52,010 --> 00:05:54,289
PC running Windows or Linux it's control

148
00:05:54,289 --> 00:05:57,440
slash so hold down the command key or

149
00:05:57,440 --> 00:05:58,820
control key depending on your operating

150
00:05:58,820 --> 00:06:01,940
system and press slash when I do that

151
00:06:01,940 --> 00:06:04,940
the lines uncommented again and if I

152
00:06:04,940 --> 00:06:06,680
hold down and do it again it's then

153
00:06:06,680 --> 00:06:08,419
coming to Dell again and so on I can

154
00:06:08,419 --> 00:06:10,430
just go down the page there but I'll put

155
00:06:10,430 --> 00:06:12,320
those back in so I've got all three

156
00:06:12,320 --> 00:06:15,410
lines now and committed and by the way

157
00:06:15,410 --> 00:06:17,090
that doesn't work too old too well with

158
00:06:17,090 --> 00:06:19,099
some keyboards that are laid out

159
00:06:19,099 --> 00:06:20,660
differently to the standard u.s.

160
00:06:20,660 --> 00:06:22,760
keyboard so you can either use the code

161
00:06:22,760 --> 00:06:26,150
menu up here to code menu comment with

162
00:06:26,150 --> 00:06:28,370
line comment and choose that which will

163
00:06:28,370 --> 00:06:30,470
do the same thing or you can just type

164
00:06:30,470 --> 00:06:32,889
the two slashes which you saw me do

165
00:06:32,889 --> 00:06:37,400
earlier in this video like so all right

166
00:06:37,400 --> 00:06:39,440
so I put that line back in there so

167
00:06:39,440 --> 00:06:40,789
let's have a look at the type of the

168
00:06:40,789 --> 00:06:45,560
variable Tim. Now we've declared Tim on line 5,

169
00:06:45,560 --> 00:06:48,410
to be of type string which means it can

170
00:06:48,410 --> 00:06:51,680
only hold text values if I try to assign

171
00:06:51,680 --> 00:06:54,080
a number to it it won't actually work so

172
00:06:54,080 --> 00:06:55,820
I come down here and change this

173
00:06:55,820 --> 00:06:59,150
declaration Tim equals I change that

174
00:06:59,150 --> 00:07:02,180
instead to 32 we've got an error here

175
00:07:02,180 --> 00:07:04,880
and if I hover the error the integer

176
00:07:04,880 --> 00:07:07,820
literal does not conform to the expected

177
00:07:07,820 --> 00:07:10,580
type string so we can assign a number to

178
00:07:10,580 --> 00:07:13,190
a string variable Kotlin doesn't allow

179
00:07:13,190 --> 00:07:15,200
that now you might be tempted to get

180
00:07:15,200 --> 00:07:17,630
around that closing the number 32 in

181
00:07:17,630 --> 00:07:20,320
speech marks or double quotes like so

182
00:07:20,320 --> 00:07:23,300
and that will work there's no error now

183
00:07:23,300 --> 00:07:27,460
and I can actually run the program

184
00:07:27,460 --> 00:07:29,540
actually what I do is I'll just run it

185
00:07:29,540 --> 00:07:33,260
up here and you can see the number 32 is

186
00:07:33,260 --> 00:07:35,690
outputting occasionally you might

187
00:07:35,690 --> 00:07:38,090
actually get an error which says could

188
00:07:38,090 --> 00:07:40,430
not fall on a load main class Katy after

189
00:07:40,430 --> 00:07:41,780
a failing when you've actually had an

190
00:07:41,780 --> 00:07:43,790
error what you may need to do from time

191
00:07:43,790 --> 00:07:45,860
to time has come up to a build menu and

192
00:07:45,860 --> 00:07:48,139
click on rebuild project to get rid of

193
00:07:48,139 --> 00:07:50,720
that particular error but in any case in

194
00:07:50,720 --> 00:07:52,310
my case that actually worked ok and you

195
00:07:52,310 --> 00:07:54,770
can see we've got those value 32 printed

196
00:07:54,770 --> 00:07:57,080
but you might think that we have

197
00:07:57,080 --> 00:07:58,430
actually fooled the computer but we

198
00:07:58,430 --> 00:08:00,800
haven't really done that though Tim is

199
00:08:00,800 --> 00:08:03,500
still storing a string it's just made up

200
00:08:03,500 --> 00:08:06,440
of the two characters 3 & 2 now it could

201
00:08:06,440 --> 00:08:07,910
be used to represent the number of my

202
00:08:07,910 --> 00:08:10,250
mailbox but not my salary for example,

203
00:08:10,250 --> 00:08:11,630
so we currently sums with it in other

204
00:08:11,630 --> 00:08:14,330
words if it's a number in double quotes

205
00:08:14,330 --> 00:08:16,669
now if we want to treat it as a number

206
00:08:16,669 --> 00:08:18,800
then what we have to do is declare it to

207
00:08:18,800 --> 00:08:21,380
be a numeric type now the most common

208
00:08:21,380 --> 00:08:24,260
Kotlin type for storing whole numbers is

209
00:08:24,260 --> 00:08:27,500
int which is short for integer all right

210
00:08:27,500 --> 00:08:28,910
so let's try adding this code and was

211
00:08:28,910 --> 00:08:35,270
hoping bar Tim salary colon int to the

212
00:08:35,270 --> 00:08:38,659
capital I equals 32 on the next line of

213
00:08:38,659 --> 00:08:44,950
our space monthly colon int equals Tim

214
00:08:44,950 --> 00:08:47,290
star which is the multiplication

215
00:08:47,290 --> 00:08:50,690
operator for then I'm going to type

216
00:08:50,690 --> 00:08:55,010
print ln parentheses Tim salary, print ln

217
00:08:55,010 --> 00:08:57,510
in monthly

218
00:08:57,510 --> 00:09:00,240
so by declaring Tim's salary which we've

219
00:09:00,240 --> 00:09:03,630
done on line nine to be an int it's now

220
00:09:03,630 --> 00:09:05,550
treated as a number and we can do

221
00:09:05,550 --> 00:09:07,740
arithmetic with it so I can multiply it

222
00:09:07,740 --> 00:09:09,510
by four to get my monthly salary which

223
00:09:09,510 --> 00:09:12,300
I've done on line 10 and int here is an

224
00:09:12,300 --> 00:09:15,540
abbreviation or shortcut for integer the

225
00:09:15,540 --> 00:09:16,950
second thing is that we can use the

226
00:09:16,950 --> 00:09:20,340
value of a variable in calculations then

227
00:09:20,340 --> 00:09:22,380
assign the result of that calculation to

228
00:09:22,380 --> 00:09:24,870
another variable and we can see on line

229
00:09:24,870 --> 00:09:26,250
10 we're doing just that

230
00:09:26,250 --> 00:09:28,920
so the code the code is multiplying the

231
00:09:28,920 --> 00:09:31,800
value Tim salary by 4 then assigning the

232
00:09:31,800 --> 00:09:34,770
result to the variable monthly. So let's

233
00:09:34,770 --> 00:09:36,090
just run this program to make sure it

234
00:09:36,090 --> 00:09:43,910
works let's do a build rebuild project

235
00:09:43,910 --> 00:09:48,180
run again now this error might be a bit

236
00:09:48,180 --> 00:09:49,710
cryptic for you you might be wondering

237
00:09:49,710 --> 00:09:51,600
what's going on here but if you hover

238
00:09:51,600 --> 00:09:53,160
over here to the right we can actually

239
00:09:53,160 --> 00:09:54,840
see none of the following candidates is

240
00:09:54,840 --> 00:09:56,910
applicable because of receiver type

241
00:09:56,910 --> 00:09:59,730
mismatch so actually getting this error

242
00:09:59,730 --> 00:10:02,280
on line 10 and I guess looking at that

243
00:10:02,280 --> 00:10:03,150
area you might think that's a bit

244
00:10:03,150 --> 00:10:05,490
cryptic and I tend to agree what it

245
00:10:05,490 --> 00:10:07,170
means is that you can't multiply a

246
00:10:07,170 --> 00:10:10,320
string by an integer actually you can't

247
00:10:10,320 --> 00:10:12,120
multiply a string by anything but the

248
00:10:12,120 --> 00:10:13,500
computer doesn't do that kind of

249
00:10:13,500 --> 00:10:15,630
semantic reasoning it just sees a string

250
00:10:15,630 --> 00:10:18,480
in an int and that's what it reports so

251
00:10:18,480 --> 00:10:20,010
I'm gonna put this back now to get rid

252
00:10:20,010 --> 00:10:21,540
of the error then I'm also going to

253
00:10:21,540 --> 00:10:23,730
change the Tim back to my name so the

254
00:10:23,730 --> 00:10:25,860
outputs a bit clearer. So this thing this

255
00:10:25,860 --> 00:10:27,870
code on line 10 should have been Tim

256
00:10:27,870 --> 00:10:32,040
celery let's change that but also back

257
00:10:32,040 --> 00:10:34,560
up here where it's not the 32, I'm gonna

258
00:10:34,560 --> 00:10:38,040
change that back to my name again let's

259
00:10:38,040 --> 00:10:42,810
try running that and see if it works and

260
00:10:42,810 --> 00:10:44,250
this is that error that will pop up from

261
00:10:44,250 --> 00:10:45,720
time to time could not fall in a load

262
00:10:45,720 --> 00:10:48,600
main class main kt if that does come

263
00:10:48,600 --> 00:10:50,730
up and it has been working just click on

264
00:10:50,730 --> 00:10:53,790
build and click on rebuild project once

265
00:10:53,790 --> 00:10:56,070
that's finished click on run again and

266
00:10:56,070 --> 00:10:57,990
it should find that all then work, so in

267
00:10:57,990 --> 00:11:00,630
this case now we've defined Tim salary

268
00:11:00,630 --> 00:11:03,060
32 and you can see the calculation as

269
00:11:03,060 --> 00:11:05,310
beep for monthly has been Tim's salary

270
00:11:05,310 --> 00:11:08,820
times 4 which is 128 and the

271
00:11:08,820 --> 00:11:10,470
lines 11 and 12 we're

272
00:11:10,470 --> 00:11:11,490
printing out for value

273
00:11:11,490 --> 00:11:13,889
of Tim's salary and monthly and my name

274
00:11:13,889 --> 00:11:15,949
is also printing correctly as well.

275
00:11:15,949 --> 00:11:18,179
Alright so let's in the video here now

276
00:11:18,179 --> 00:11:20,129
that we've got some working code. In the

277
00:11:20,129 --> 00:11:21,449
next one we'll continue on with our

278
00:11:21,449 --> 00:11:24,660
discussion of variables and types I'll

279
00:11:24,660 --> 00:11:27,559
see you in the next video.

