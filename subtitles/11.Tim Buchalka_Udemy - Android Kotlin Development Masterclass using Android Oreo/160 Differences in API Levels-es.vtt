WEBVTT
1

00:00:05.450 --> 00:00:10.890

Bien, probemos ahora con la imagen. Quiero mostrarle un problema potencial que puede obtener con ciertos



2

00:00:10.890 --> 00:00:12.420

tamaos de imagen en nuestra aplicacin.



3

00:00:12.580 --> 00:00:17.610

Ahora para hacer eso, sin tener que buscar entre todas las imgenes con la esperanza de



4

00:00:17.670 --> 00:00:24.690

que haya una del tamao correcto, en realidad modifiqu el cdigo ligeramente. As que he codificado una URL de imagen para que la actividad de detalles



5

00:00:24.830 --> 00:00:28.370

de la foto siempre muestre mi imagen en lugar de la descarga de Flickr.



6

00:00:28.380 --> 00:00:33.270

Entonces, lo que vamos a hacer es ejecutar nuevamente la aplicacin en los tres emuladores, y como he dicho,



7

00:00:33.270 --> 00:00:39.030

he codificado la URL para que siempre obtenga la misma imagen. Las miniaturas son todas diferentes, pero todas mostrarn esta imagen de



8

00:00:39.030 --> 00:00:41.390

bosque de bamb cuando las toque por mucho tiempo.



9

00:00:41.630 --> 00:00:47.770

As que solo voy a ejecutar la aplicacin primero en los tres emuladores, y pueden ver a qu me refiero.



10

00:00:52.000 --> 00:00:53.090

Dles a todos un momento para comenzar.



11

00:00:53.280 --> 00:00:58.340

As que tenemos nuestra API 17, emulador API 21 y API 26, solo abrir



12

00:00:58.650 --> 00:00:59.090

eso.



13

00:01:02.090 --> 00:01:07.690

De acuerdo y si hago un toque largo, puedes ver si podemos obtener esa imagen de bamb.



14

00:01:07.760 --> 00:01:13.170

El siguiente, y luego API 26, solo para confirmar que es el caso, voy a hacer



15

00:01:13.180 --> 00:01:15.420

otra imagen, seleccionar otra miniatura en su



16

00:01:15.550 --> 00:01:18.870

lugar, y pueden ver que tenemos la misma imagen.



17

00:01:19.060 --> 00:01:22.690

De nuevo, las miniaturas son todas diferentes, pero todas muestran esta imagen



18

00:01:22.690 --> 00:01:28.690

de bosque de bamb cuando las toco por mucho tiempo. Y como puede ver aqu, los tres emuladores se ven muy similares con la imagen que se ajusta



19

00:01:28.690 --> 00:01:29.930

muy bien en el centro de la pantalla.



20

00:01:30.120 --> 00:01:31.340

Ahora probemos con



21

00:01:31.360 --> 00:01:34.720

el atributo adjustViewBounds que mencion hace algunos videos.



22

00:01:34.870 --> 00:01:40.330

Entonces, si volvemos a Android Studio, voy a abrir los detalles de subrayado de la foto de contenido en la carpeta de diseos, y



23

00:01:40.330 --> 00:01:40.700

por ahora



24

00:01:45.850 --> 00:01:49.140

voy a cerrar el panel del proyecto y dejar un poco ms de espacio.



25

00:01:49.290 --> 00:01:53.700

Luego, cuando selecciono la vista de imagen, lo cual podemos hacer aqu desde el



26

00:01:53.700 --> 00:02:00.920

rbol de componentes, o desde el diseador o plano, y eso va a cargar los atributos, y esto ajustar ViewBounds es lo que



27

00:02:00.920 --> 00:02:01.740

queremos ver.



28

00:02:01.970 --> 00:02:06.170

Ahora debera aparecer aqu en los atributos comunes, pero si Google lo ha movido cuando vienes a



29

00:02:06.170 --> 00:02:10.210

ver este video, es posible que tengas que venir aqu y expandir los atributos para encontrarlo.



30

00:02:10.670 --> 00:02:16.040

Por lo tanto, en este momento, adjustViewBounds se establece en el valor predeterminado. El botn de estado tri tiene una carrera a travs de l. Ahora el valor



31

00:02:16.410 --> 00:02:17.800

predeterminado es off



32

00:02:17.870 --> 00:02:19.080

o falso.



33

00:02:19.100 --> 00:02:23.800

Veamos qu pasa cuando lo activamos para ver qu efecto tiene en nuestra imagen.



34

00:02:23.810 --> 00:02:29.790

Entonces, cuando hago clic en l, quiere asegurarse de que esto sea ahora un tic para el atributo adjustViewBounds.



35

00:02:29.960 --> 00:02:33.890

Una vez que hayas hecho eso, ejecuta la aplicacin nuevamente. As que sigamos y lo hagamos, ejectelo



36

00:02:33.920 --> 00:02:35.120

en los tres emuladores.



37

00:02:44.520 --> 00:02:55.880

OK, intentemos abrirlos ahora.



38

00:02:56.010 --> 00:03:01.440

Ahora, como puede ver, se ve bien en API 21 y API 26.



39

00:03:01.510 --> 00:03:05.910

La imagen es lo ms amplia posible, y puedo desplazarme hacia abajo para ver la descripcin y las



40

00:03:05.920 --> 00:03:10.150

etiquetas, o al menos puedo si lo hago. Me desplazo hacia abajo para obtener las etiquetas, puedes ver que



41

00:03:10.350 --> 00:03:12.020

puedo leerlas, y lo mismo para la API 26.



42

00:03:12.030 --> 00:03:13.600

Puedo desplazarme hacia abajo si es necesario.



43

00:03:13.890 --> 00:03:15.520

Entonces todo parece encajar muy bien.



44

00:03:15.660 --> 00:03:18.370

Ahora es por eso que usamos una vista de desplazamiento por cierto, para que podamos hacer eso.



45

00:03:18.520 --> 00:03:23.210

Algunas imgenes se extendern desde la parte inferior de la pantalla, y tiene que desplazarse para ver la



46

00:03:23.210 --> 00:03:27.240

parte inferior, y puede ver que necesitaba desplazarme un poco para ver algunas de las etiquetas.



47

00:03:27.520 --> 00:03:34.990

OK, esa es la diferencia que adjustViewBounds ha hecho en versiones de API por encima de 17, pero en esos dispositivos de



48

00:03:35.010 --> 00:03:36.570

API 17, no hay diferencia.



49

00:03:36.630 --> 00:03:39.270

Entonces eso es lo que adjustVBiewBounds hace.



50

00:03:39.380 --> 00:03:46.110

Hace que la vista de la imagen se ajuste a la imagen, luego se recalcula y se expande para adaptarse a la imagen



51

00:03:46.110 --> 00:03:47.040

si es necesario.



52

00:03:47.100 --> 00:03:53.910

De esta manera, obtiene el mejor ajuste posible en el espacio disponible, preservando la relacin de aspecto de la imagen, para



53

00:03:54.210 --> 00:03:56.560

que no se estire en otras palabras.



54

00:03:56.610 --> 00:03:58.740

Entonces, qu hay de esa nota que vimos antes?



55

00:03:58.980 --> 00:04:00.240

Volvamos a Google



56

00:04:04.320 --> 00:04:05.370

nuevamente, en ImageView.



57

00:04:07.550 --> 00:04:13.570

Y solo para ahorrar un poco de tiempo, voy a hacer una bsqueda para el nivel



58

00:04:14.110 --> 00:04:21.970

17, para llegar a donde queremos ir, aqu abajo, para setAdjustViewBounds. Por lo tanto, si la aplicacin se dirige al nivel API 17 o inferior,



59

00:04:21.970 --> 00:04:28.340

adjustViewBounds permitir que el dibujable reduzca los lmites de la vista, pero no crezca para llenar el espacio medido disponible en todas las instancias.



60

00:04:28.610 --> 00:04:32.760

En otras palabras, no est diciendo que no funcionar en API 17 o inferior, sino que



61

00:04:32.770 --> 00:04:37.840

indica que la vista de la imagen no siempre crecer para llenar el espacio disponible en todos los casos.



62

00:04:38.130 --> 00:04:43.180

Ahora, en los niveles de API por encima de API 17, vio que funcion. En mi emulador Nexus con



63

00:04:43.200 --> 00:04:45.060

API 17, llegamos a



64

00:04:45.060 --> 00:04:46.660

uno de esos casos.



65

00:04:46.840 --> 00:04:49.520

Volviendo a Android Studio, bueno,



66

00:04:49.670 --> 00:04:52.300

volveremos a nuestro emulador.



67

00:04:52.320 --> 00:04:56.920

As que solo minimizar Chrome por ahora, para que podamos tener acceso a los emuladores de nuevo.



68

00:04:59.450 --> 00:05:07.310

De nuevo, en los niveles de API por encima de API 17 funcion, pero en el Nexus 5X, ejecutndose en API 17, llegamos a uno



69

00:05:07.310 --> 00:05:08.240

de esos casos.



70

00:05:08.390 --> 00:05:13.280

Todava tenemos el borde grueso, como se puede ver por aqu, y adjustViewBounds en realidad no



71

00:05:13.520 --> 00:05:14.790

ha hecho ninguna diferencia.



72

00:05:14.840 --> 00:05:20.750

As que adjustViewBounds dio un buen efecto en API 21 y superior, en realidad en API 18 y superior, pero puede



73

00:05:20.750 --> 00:05:24.020

no funcionar en todos los dispositivos con API 17 o inferior.



74

00:05:24.290 --> 00:05:31.430

Ahora puede pasar mucho tiempo tratando de obtener el mismo efecto en este API 17 Nexus 5X. Una solucin sera crear una vista



75

00:05:31.520 --> 00:05:35.730

de imagen personalizada subclasificando la existente.



76

00:05:35.840 --> 00:05:40.280

Y si busca en lnea, puede encontrar ejemplos de cmo hacerlo, pero en este momento



77

00:05:40.280 --> 00:05:45.470

debera preguntar si realmente lo vale. Ahora en algunos casos lo ser. Si tiene un diseo donde la



78

00:05:45.470 --> 00:05:50.150

imagen termina tan pequea que ya no se puede usar, por ejemplo, entonces tendra que encontrar una solucin.



79

00:05:50.450 --> 00:05:57.290

Pero aqu, sin embargo, la aplicacin funciona en la API 17, por lo que no hay ningn punto real que la restrinja a API



80

00:05:57.290 --> 00:05:59.320

18 y superior, y perder usuarios innecesariamente.



81

00:05:59.450 --> 00:06:04.730

Ahora, por supuesto, no se ve exactamente igual en este dispositivo, pero yo dira que todava es perfectamente utilizable,



82

00:06:04.730 --> 00:06:10.250

y algunas veces es mucho mejor dedicar tiempo a terminar la aplicacin, en lugar de tratar de hacer que se



83

00:06:10.250 --> 00:06:11.300

vea idntica en todos



84

00:06:11.300 --> 00:06:16.250

los dispositivos para todo Versiones de Android que admite. Ahora hay un par de otros puntos que hacer sobre esto.



85

00:06:16.280 --> 00:06:20.050

El primero es, deberamos mostrar algo ms que la imagen aqu?



86

00:06:20.270 --> 00:06:24.550

Por lo tanto, si el usuario ha tocado una miniatura hace mucho, es probable que quiera ver la fotografa.



87

00:06:24.590 --> 00:06:29.450

Ahora agregu elementos como el autor y el ttulo al diseo, para mostrarle cmo crear diseos ms complejos.



88

00:06:29.840 --> 00:06:34.190

Sin embargo, en esta aplicacin particular, es mejor que solo mostremos la imagen



89

00:06:34.190 --> 00:06:35.010

con nada ms.



90

00:06:35.180 --> 00:06:39.920

Por lo tanto, podra permitir que un toque en la imagen muestre otros detalles, pero es probable que



91

00:06:39.920 --> 00:06:41.340

no aparezcan en esta pantalla.



92

00:06:41.690 --> 00:06:43.130

Por lo tanto, cuando



93

00:06:43.130 --> 00:06:49.490

disee cosas como esta, piense detenidamente sobre lo que quieren los usuarios y lo que esperan cuando realizan ciertas acciones.



94

00:06:49.490 --> 00:06:55.370

Ahora bien, el segundo punto aqu es sin embargo, tenga cuidado al crear emuladores. Ahora he logrado simular un problema



95

00:06:55.370 --> 00:06:59.900

aqu al crear un emulador Nexus 5X con API 17.



96

00:06:59.910 --> 00:07:05.600

Ahora, el Nexus 5X es una versin ms reciente del Nexus 5 que se lanz originalmente



97

00:07:05.630 --> 00:07:06.920

con Kit-Kat API 19.



98

00:07:06.960 --> 00:07:10.190

Entonces, el Nexus 5X era incluso una versin posterior a esa.



99

00:07:10.190 --> 00:07:14.960

En otras palabras, Jelly Bean no estaba instalado en dispositivos con la pantalla de alta resolucin



100

00:07:14.960 --> 00:07:18.850

de algo as como un Nexus 5. As que, tenlo en cuenta, si



101

00:07:19.070 --> 00:07:24.970

obtienes un comportamiento extrao, pregntate si ests probando una combinacin de un dispositivo en API que simplemente no existira all.



102

00:07:24.980 --> 00:07:29.300

En otras palabras, cuando el usuario compr un telfono en particular, nunca habra



103

00:07:29.300 --> 00:07:30.090

estado ejecutando



104

00:07:30.140 --> 00:07:34.110

esa versin, esa versin particular de la API, en este caso API 17.



105

00:07:34.220 --> 00:07:39.700

Ahora el Nexus 4 fue lanzado con API 17, y adjustViewBounds funcionar bien en eso.



106

00:07:39.980 --> 00:07:46.010

Por lo tanto, el efecto es ligeramente diferente de los dispositivos API 21 y API 26, pero la



107

00:07:46.010 --> 00:07:47.400

imagen parece ms grande.



108

00:07:47.640 --> 00:07:52.910

De acuerdo, voy a terminar el video aqu. Pero su desafo es experimentar con los distintos ajustes



109

00:07:52.910 --> 00:07:57.500

de margen y relleno de los widgets para asegurarse de comprender la diferencia entre los mrgenes



110

00:07:57.860 --> 00:08:03.410

y los rellenos, y tambin qu widgets debe cambiar cuando estn anidados uno dentro del otro, como el nuestro



111

00:08:03.410 --> 00:08:04.680

en este particular pantalla.



112

00:08:04.760 --> 00:08:10.370

Ahora intenta hacer cosas como aumentar el borde alrededor de la foto, por lo que CardView acta como un poco



113

00:08:10.370 --> 00:08:14.900

ms de un marco de imagen, y tambin intenta poner ms espacio en todo alrededor de CardView.



114

00:08:14.990 --> 00:08:20.930

Ahora tambin es posible que desee cambiar el diseo para que solo haya un ImageView dentro de un CardView. La imagen llenara la pantalla y, por



115

00:08:20.930 --> 00:08:25.920

lo tanto, no necesitara ser desplazable. Ahora podra mostrar un mensaje de Toast si el usuario



116

00:08:25.930 --> 00:08:27.250

toca la foto, para que puedan



117

00:08:27.490 --> 00:08:33.170

ver el autor y el ttulo, sin volver a la pantalla principal. En resumen, experimente y divirtase, porque esa



118

00:08:33.170 --> 00:08:38.930

es, en ltima instancia, la mejor forma de aprender, y este diseo es



119

00:08:38.930 --> 00:08:45.260

una buena disposicin para experimentar. Antes de comenzar, copie los content_photo_details. archivo xml, o simplemente pegue el xml



120

00:08:45.260 --> 00:08:49.870

en un editor de texto, para que pueda guardar las cosas si realmente se equivoca.



121

00:08:49.910 --> 00:08:53.660

Y, por supuesto, si realmente no lo estropeas, entonces no has experimentado lo suficiente.



122

00:08:53.710 --> 00:08:56.870

Bien, eso es todo. Terminar el video aqu y te ver en el siguiente.



