1
00:00:05,560 --> 00:00:09,930
Un caso que voy a terminar en la seccin de tutorial fue un desafo.

2
00:00:09,920 --> 00:00:14,110
Vamos a alterar la forma en que funciona la otra funcin de gota escrita.

3
00:00:14,180 --> 00:00:16,160
As que cambia ahora a la clase de jugador.

4
00:00:16,160 --> 00:00:17,320
Vamos y hagamos eso.

5
00:00:19,100 --> 00:00:25,590
Y creamos, como puede ver, ya sea en el mtodo de bucle escrito en la pantalla, existe el registro 41

6
00:00:25,590 --> 00:00:30,920
y que le permite especificar el nombre del lad en lugar de proporcionar una referencia al terreno.

7
00:00:31,020 --> 00:00:37,490
Hubo otro mtodo para eliminar todos los artculos con un nombre coincidente que puede no ser lo que queremos.

8
00:00:37,590 --> 00:00:41,430
Entonces, digamos que primero podemos entender lo que podramos desear con un comportamiento diferente.

9
00:00:41,670 --> 00:00:43,020
As que vuelvo al mo.

10
00:00:43,430 --> 00:00:45,930
Tengo que borrar todo este cdigo de Drechsler.

11
00:00:46,020 --> 00:00:54,970
Tenemos que descomentar el cdigo de Conan y llegar hasta la cima aqu, simplemente comentar el cdigo del kernel, as que

12
00:00:54,980 --> 00:00:55,690
vamos a

13
00:01:00,490 --> 00:01:03,780
asegurarnos de que el paquete siga funcionando.

14
00:01:07,810 --> 00:01:11,040
OK, eso est funcionando. Narciso no puede decir que Canaan, pero que no es un lugar.

15
00:01:11,320 --> 00:01:13,420
Puntaje total de 240.

16
00:01:13,630 --> 00:01:16,120
El valor total de 240.

17
00:01:16,120 --> 00:01:17,910
Ahora necesitamos algunos duplicados.

18
00:01:18,040 --> 00:01:22,980
As que vamos a usar Android Studio para duplicar los anillos de oro y plata y otros atajos que

19
00:01:22,990 --> 00:01:25,440
Kamandi y yo podemos controlar hoy en la PC.

20
00:01:25,480 --> 00:01:34,970
Entonces, si vamos a los dos anillos construimos esa lnea y / o D y plateado haran lo mismo, cada uno de nosotros a un par, vamos

21
00:01:34,960 --> 00:01:38,070
a mantener tres anillos de tres anillos de oro.

22
00:01:38,770 --> 00:01:44,380
Entonces, gente como esa lnea dos veces y dos anillos de plata como se puede ver en el

23
00:01:44,380 --> 00:01:50,490
programa, deberamos obtener un valor de 270 y podemos ver si llegamos a finales de 2017, podemos ver los mltiples

24
00:01:50,500 --> 00:01:53,780
elementos que ahora se muestran en el inventario como bien.

25
00:01:53,800 --> 00:02:00,380
As que tenemos una especie de funcin de solucin de problemas que podemos usar para eliminar elementos de Lipp usando los nueve y ya

26
00:02:00,380 --> 00:02:04,760
lo hemos probado previamente, pero lo que no hicimos fue probarlo cuando hay ms de un

27
00:02:04,760 --> 00:02:06,090
elemento con el mismo nombre.

28
00:02:06,140 --> 00:02:09,700
As que volvamos al mo y, de hecho, intentemos probar en ese escenario.

29
00:02:10,100 --> 00:02:16,320
Entonces, qu son la gota de Kirner y los parntesis doble anillo de oro blanco y.

30
00:02:16,330 --> 00:02:21,190
Puedo mostrarte el encabezado exactamente como lo ves en el lanzamiento de la pantalla 12 en lnea 12.

31
00:02:21,310 --> 00:02:23,340
Y luego haremos el inventario del show despus de eso tambin.

32
00:02:23,360 --> 00:02:25,870
Tipo de inventario de sombra oscura.

33
00:02:25,880 --> 00:02:26,820
Corramos eso de nuevo.

34
00:02:30,500 --> 00:02:31,960
Ellos pueden ver lo que sucedi en ese escenario.

35
00:02:31,970 --> 00:02:38,000
El valor total baj a 234 y en realidad nos deshicimos de todos los anillos de oro de Conan.

36
00:02:38,000 --> 00:02:39,730
Ahora que puede no ser lo que esperabas.

37
00:02:39,740 --> 00:02:41,900
Ciertamente no era lo actual y esperado.

38
00:02:41,900 --> 00:02:46,820
No queremos que golpee a nuestra puerta exigiendo que le devuelvan sus anillos de oro. A menos que te

39
00:02:46,820 --> 00:02:50,100
apetezca una pelea con un brbaro bien, es mejor que arreglemos esa tarjeta.

40
00:02:50,300 --> 00:02:52,090
O mejor dicho, arregla eso.

41
00:02:52,340 --> 00:02:53,770
Ahora antes de establecer el desafo.

42
00:02:53,780 --> 00:02:59,770
Repasemos la segunda funcin de gota en la clase de jugador.

43
00:02:59,850 --> 00:03:05,790
Por lo tanto, en el caso de solucionar problemas con un artculo que pasa o elegir el elemento de eliminacin en el

44
00:03:05,790 --> 00:03:09,470
caso de esta opcin, el segundo, el que tiene un argumento de cadena.

45
00:03:09,480 --> 00:03:11,610
Estamos usando la funcin eliminar.

46
00:03:11,850 --> 00:03:16,650
As que, bsicamente, este escenario con esta funcin particular puede decir que est haciendo

47
00:03:16,650 --> 00:03:23,180
un return a remove si est usando la funcin remove que elimina todos los elementos si la condicin devuelve verdadero.

48
00:03:23,190 --> 00:03:27,300
Entonces, si un tomo tiene el nombre que especificamos, se eliminar de la lista y lo vimos en

49
00:03:27,300 --> 00:03:29,010
el caso del anillo de oro de Conan.

50
00:03:29,010 --> 00:03:31,310
Ahora los tres anillos de oro fueron eliminados.

51
00:03:31,500 --> 00:03:36,950
Entonces, lo que queremos hacer aqu es salir del crculo tan pronto como se elimine un elemento.

52
00:03:36,960 --> 00:03:39,840
Ahora una declaracin de retorno saldr de un seguimiento.

53
00:03:39,840 --> 00:03:43,520
Si est dentro de una funcin, entonces no necesariamente debes usarla.

54
00:03:43,520 --> 00:03:44,120
Derecha.

55
00:03:44,400 --> 00:03:50,130
Entonces, lo que esto significa es que no podemos usar remove si estamos usando en la lnea 43, tenemos que usar un

56
00:03:50,130 --> 00:03:51,380
bucle for para lo bsico.

57
00:03:51,390 --> 00:03:55,060
Ahora debo mencionar que puedes crear una tercera funcin de gota.

58
00:03:55,060 --> 00:03:58,560
Vamos a tener que usar exactamente los mismos parmetros que una cadena aqu.

59
00:03:58,860 --> 00:04:03,960
Entonces podemos sobrescribirlo correctamente para obtenerlo porque ya hay una declaracin de funcin con ese argumento

60
00:04:04,200 --> 00:04:04,990
de cadena.

61
00:04:05,370 --> 00:04:10,240
Y cuando tiene una funcin de escritura, debe darle a la nueva versin de la funcin diferentes parmetros.

62
00:04:10,470 --> 00:04:12,530
OK, cul es el desafo?

63
00:04:13,170 --> 00:04:18,750
Por lo tanto, su desafo es cambiar la funcin de la segunda tripleta para que utilice un ciclo completo en

64
00:04:18,750 --> 00:04:19,970
lugar de usar eliminarlo.

65
00:04:20,040 --> 00:04:25,170
Ahora la funcin debe recorrer los elementos en la lista de inventario y eliminar el primer elemento cuyo nombre

66
00:04:25,170 --> 00:04:28,020
coincida con el nombre dado cuando se llama a la funcin.

67
00:04:28,020 --> 00:04:30,060
En otras palabras, pasar a esa funcin.

68
00:04:30,060 --> 00:04:33,540
Ahora una vez que se eliminan los elementos, ya no hay ningn punto de bucle.

69
00:04:33,540 --> 00:04:35,010
As que sal del ciclo.

70
00:04:35,010 --> 00:04:36,310
Si un artculo es removido

71
00:04:36,830 --> 00:04:38,690
Ahora la funcin debera volverse verdadera.

72
00:04:38,940 --> 00:04:41,460
Si un artculo se elimina y es falso o no.

73
00:04:41,560 --> 00:04:45,560
Desea probar la funcin dejando caer uno de los anillos plateados en mente.

74
00:04:45,810 --> 00:04:49,000
No solo se debe descartar una de las codificaciones.

75
00:04:49,110 --> 00:04:53,010
Muy amable y debera terminar con dos anillos de oro y un anillo de plata.

76
00:04:53,010 --> 00:04:58,020
Tambin verifique que funcione cuando se usan elementos desconocidos al intentar dejar caer algo que

77
00:04:58,020 --> 00:04:59,000
Conan no tiene.

78
00:04:59,000 --> 00:04:59,940
Est bien, as que ese es el desafo.

79
00:04:59,940 --> 00:05:04,020
Publique el video y diga que oye con ese desafo y lo ver cuando regrese

80
00:05:04,020 --> 00:05:04,890
con la solucin.

81
00:05:06,910 --> 00:05:11,310
As que, como de costumbre, su cdigo puede parecer diferente a la tarjeta que voy a presentar.

82
00:05:11,320 --> 00:05:15,310
Lo importante es que tu cdigo funciona y obtienes los resultados correctos.

83
00:05:15,440 --> 00:05:20,650
Se les ensea esta codificacin y la revisarn y, obviamente, estamos actualizando esta funcin de

84
00:05:20,650 --> 00:05:22,300
gota en la lnea 41.

85
00:05:22,420 --> 00:05:27,970
Entonces, lo que tenemos que hacer es eliminar este auto y comenzar de cero.

86
00:05:27,970 --> 00:05:31,320
As que voy a ir antes para parntesis.

87
00:05:31,570 --> 00:05:34,840
Artculo en inventario.

88
00:05:34,840 --> 00:05:44,620
Tengo un bloque de cdigo que vamos a poner si parntesis el nombre de punto de Artem es igual a 9 9 siendo el

89
00:05:44,620 --> 00:05:46,490
argumento pasado a esta funcin.

90
00:05:46,970 --> 00:05:49,150
Entonces creo que kybosh puede hacer un inventario.

91
00:05:50,170 --> 00:05:56,840
Eliminar no eliminar si va a regresar verdadero.

92
00:05:57,130 --> 00:06:01,590
De lo contrario, si llega hasta aqu vamos a devolver falso.

93
00:06:01,900 --> 00:06:08,370
Entonces, en realidad, Sahi us un ciclo simple para iterar sobre los elementos en el inventario.

94
00:06:08,380 --> 00:06:13,460
Ahora, si llegamos a un elemento coincidente, se elimina de la lista y la funcin devuelve verdadero.

95
00:06:13,750 --> 00:06:18,010
Ahora cuando una funcin devuelve no, el cdigo de las funciones se ejecuta.

96
00:06:18,010 --> 00:06:19,920
Entonces es por eso que no hay necesidad de un descanso.

97
00:06:20,300 --> 00:06:25,210
La ejecucin de las luces de cdigo y control vuelve a la tarjeta de llamada.

98
00:06:25,210 --> 00:06:30,010
Ahora si atravesamos todo el ciclo sin encontrarlo para eliminar aqu en la lnea

99
00:06:30,420 --> 00:06:35,620
cuarenta y ocho, Kardex queda atrapado y puede decir aqu poner algunos puntos y comas

100
00:06:35,990 --> 00:06:42,800
porque estoy acostumbrado a hablar en Java y en realidad aparece y marcado y dijo que eso es en realidad

101
00:06:42,800 --> 00:06:45,650
redundante semicon redundante As que solo para m habl.

102
00:06:45,690 --> 00:06:48,140
Entonces esta es una forma de escribir el cdigo.

103
00:06:48,450 --> 00:06:53,100
Y de nuevo, si pasamos todo el ciclo, encontrar un impresionante para eliminar la funcin devuelve

104
00:06:53,100 --> 00:06:53,460
falso.

105
00:06:53,460 --> 00:06:55,410
Puedes verlo haciendo entonces 11:49.

106
00:06:55,770 --> 00:06:59,550
Esa es una forma de escribir el cdigo, pero es posible que haya hecho algo ligeramente diferente.

107
00:06:59,670 --> 00:07:03,510
As que quiero mostrarles un mtodo alternativo supongamos que voy a comentar esta versin de

108
00:07:08,050 --> 00:07:09,690
la funcin y ejecutar una segunda versin.

109
00:07:09,710 --> 00:07:21,760
As que comenzar con la diversin para solucionar problemas de princesas nombre de llamada y cadena Colan billones en Little

110
00:07:21,760 --> 00:07:29,420
Rock Kuli Bryce que podemos hablar el resultado es falso para parntesis.

111
00:07:29,480 --> 00:07:40,460
Artculo en el inventario ponen un bloque de tarjeta si el artculo parntesis no nombra es igual al nombre que lleva

112
00:07:40,490 --> 00:07:41,340
al inventario.

113
00:07:41,570 --> 00:07:45,380
No elimine el resultado de Autum.

114
00:07:45,400 --> 00:07:53,700
Era cierto que ests haciendo 70 columnas otra vez porque tenas ese hbito.

115
00:07:53,770 --> 00:07:58,450
De lo contrario, baja la mitad inferior de lo que se convertir en resultado.

116
00:07:58,670 --> 00:08:03,970
As que esta vez estaba almacenando el resultado que volver en una variable llamada resultado.

117
00:08:03,980 --> 00:08:08,490
Ahora comenzamos a establecer el valor de esa variable en falso a lo largo de 52.

118
00:08:08,930 --> 00:08:13,430
Y si no encontramos nada para eliminar, eso es lo que finalmente contendr y eso es

119
00:08:13,610 --> 00:08:15,490
lo que rechazamos aqu en 60.

120
00:08:15,560 --> 00:08:18,610
Ahora dentro del salto Estamos verificando el nombre de cada elemento como antes.

121
00:08:18,800 --> 00:08:24,140
Pero si se encuentra una coincidencia, eliminamos el elemento y es lo mismo que la versin anterior

122
00:08:24,140 --> 00:08:24,970
de esta funcin.

123
00:08:25,070 --> 00:08:28,630
Pero luego tambin establecemos el resultado como verdadero en la siguiente lnea.

124
00:08:28,700 --> 00:08:32,560
Luego salimos del ciclo porque no tiene sentido dar vueltas de nuevo.

125
00:08:32,660 --> 00:08:37,130
Y luego, la declaracin de devolucin en la lnea 60 que se ejecutar cuando termine el ciclo o

126
00:08:37,130 --> 00:08:37,900
cuando lo rompamos.

127
00:08:37,910 --> 00:08:40,950
Entonces, de cualquier forma, solo devolvemos el valor del resultado.

128
00:08:41,270 --> 00:08:47,080
Bueno, fuera de las pruebas Regresemos al mo y trate de dejar caer el plateado.

129
00:08:47,250 --> 00:08:56,940
CONAN habl para contaminar como lo dijeron o plateado y CONAN no gritar inventario.

130
00:08:57,250 --> 00:08:58,130
Bueno, vamos a rodar eso

131
00:09:02,390 --> 00:09:04,160
y l puede decir que pago si nos desplazamos hacia arriba.

132
00:09:04,400 --> 00:09:08,520
El puntaje fue de 258 cuando dejamos caer 1 y lanzamos los anillos de oro.

133
00:09:08,630 --> 00:09:14,710
Luego, la segunda vez que se llam al espectculo despus de que soltamos el plateado, el valle desciende a 252.

134
00:09:14,990 --> 00:09:18,860
Entonces, cuando el plateado dej caer solo y dos anillos de oro que es correcto.

135
00:09:18,890 --> 00:09:20,900
As que est funcionando bien.

136
00:09:20,900 --> 00:09:26,780
Muy bien, qu hay del escenario de que estamos tratando de dejar caer algo que l no tiene sobre l?

137
00:09:26,810 --> 00:09:30,710
Hay un par de formas en que podramos escribir que no podemos simplemente llamar a

138
00:09:30,710 --> 00:09:33,740
la funcin LWT de descarte porque necesitamos verificar que devuelve falso.

139
00:09:33,740 --> 00:09:35,860
Entonces, hay tres formas en que puede haberlo hecho.

140
00:09:36,090 --> 00:09:38,290
Echemos un vistazo a eso.

141
00:09:38,420 --> 00:09:49,880
As que comenzar con la primera gota igual a la gota de puntos de Conan y estamos hablando de algo que sabemos

142
00:09:49,880 --> 00:09:54,930
que est en presencia o algo que no est presente.

143
00:09:55,010 --> 00:10:00,380
Quiero decir, simplemente imprima el valor descartado que sera verdadero o falso dependiendo de si

144
00:10:00,410 --> 00:10:01,250
logr soltarlo.

145
00:10:01,340 --> 00:10:03,350
Tambin puede haber hecho algo

146
00:10:05,890 --> 00:10:15,850
as como este parntesis de printin y Conan dot droplet cita otra cosa que tambin devolver o imprimir el valor de lo que

147
00:10:15,850 --> 00:10:19,770
se devolvi de droplet, que debera ser falso.

148
00:10:19,870 --> 00:10:21,360
De nuevo porque no existe.

149
00:10:21,580 --> 00:10:24,250
La tercera forma podra haber sido si entre parntesis.

150
00:10:24,250 --> 00:10:31,360
Las princesas de punto gotado de CONAN Sezen citan un poco de basura contra algo que no

151
00:10:31,420 --> 00:10:34,340
existe en su inventario en este momento.

152
00:10:34,340 --> 00:10:43,920
He sido un bloque de cdigo y Pictland acaba de dejar otro printin.

153
00:10:45,160 --> 00:10:48,410
No tienes basura.

154
00:10:49,330 --> 00:10:55,390
Entonces, la primera y aqu en la lnea 26 es el resultado de la codificacin de las gotas asignadas a la variable.

155
00:10:55,420 --> 00:10:58,200
Imprimimos eso en la siguiente diapositiva para comprobar que obtuvimos falso.

156
00:10:58,690 --> 00:11:03,950
Y eso se puede combinar en una sola lnea y puedes decir un ejemplo de eso mucho 29.

157
00:11:04,090 --> 00:11:06,420
Tambin deberamos imprimir falso y ms sobre esto en breve.

158
00:11:06,460 --> 00:11:10,900
Y finalmente podramos probar el valor de retorno como una condicin en una declaracin de IF que puede decir que estoy

159
00:11:10,900 --> 00:11:12,090
haciendo en la lnea 31.

160
00:11:12,340 --> 00:11:13,990
Imprimi el mensaje de que no tienes basura.

161
00:11:14,020 --> 00:11:15,410
Bueno, debera hacerlo cuando lo ejecutamos.

162
00:11:15,460 --> 00:11:18,090
Entonces confirm que eso realmente funciona.

163
00:11:18,220 --> 00:11:24,020
Deberamos hacer aparecer tres falsos en los que nos enfocamos, como debera decir la tercera vez, porque no

164
00:11:24,020 --> 00:11:24,730
tienes basura.

165
00:11:24,730 --> 00:11:26,970
Entonces eso est funcionando bien.

166
00:11:27,530 --> 00:11:31,970
As que ese es el final de este tutorial de Cartland y este curso esperamos que lo hayas disfrutado y

167
00:11:31,970 --> 00:11:32,940
hayas aprovechado al mximo.

168
00:11:32,960 --> 00:11:38,760
Ahora bien, si llamas el propsito de estos videos fue para darte una comprensin rpida de los conceptos bsicos de cotland.

169
00:11:38,780 --> 00:11:42,770
Haba mucho ms en el idioma y vers diferentes formas de escribir cdigo mientras

170
00:11:42,770 --> 00:11:44,380
trabajas durante el resto del curso.

171
00:11:44,390 --> 00:11:47,810
Ahora no he podido abarcar todo lo relacionado con cotland en esta seccin

172
00:11:47,810 --> 00:11:53,480
de tutorial porque eso dara lugar a todo un curso en s mismo, pero espero que comprenda los conceptos bsicos y

173
00:11:53,480 --> 00:11:56,480
pueda comprender el cdigo que usamos en las aplicaciones de Android.

174
00:11:56,480 --> 00:12:03,040
Entonces, si crees que podras hacer un poco ms de tutorial para Codlin en Siria, que es un curso fantstico de

175
00:12:03,040 --> 00:12:04,720
Coplan, deberas echarle un vistazo.

176
00:12:04,930 --> 00:12:07,720
Y hay un enlace a eso en la ltima conferencia de este curso.

177
00:12:07,760 --> 00:12:12,130
As que chale un vistazo si quieres saber ms sobre Cartland porque ella entra en gran detalle y te

178
00:12:12,140 --> 00:12:14,730
ayudar a llevarte al prximo nivel con el desarrollo de Kutler.

179
00:12:15,050 --> 00:12:19,550
De acuerdo, el resto de este curso se centrar en Android y voy a ampliar las

180
00:12:19,550 --> 00:12:22,700
diversas clases en el marco de Android a medida que los usemos.

181
00:12:23,180 --> 00:12:27,800
Y vale la pena ver los videos en esta seccin por cierto algunas veces si eres nuevo en la

182
00:12:28,220 --> 00:12:30,950
programacin para asegurarte de que entiendes completamente los conceptos que hemos cubierto.

183
00:12:31,120 --> 00:12:34,360
Lo que hagas estars realmente preparado para el resto de este curso.

184
00:12:34,410 --> 00:12:36,400
Dicho esto, te ver en la siguiente seccin.

