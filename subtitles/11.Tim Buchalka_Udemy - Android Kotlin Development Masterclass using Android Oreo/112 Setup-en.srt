1
00:00:04,930 --> 00:00:11,800
In this video, we're going to download the YouTube Player library and add it to a project that we're also going to create.

2
00:00:12,140 --> 00:00:17,390
So with Android Studio loaded, we're going to create this new project by clicking on 'Start a new Android Studio

3
00:00:17,390 --> 00:00:21,980
project', and we'll call this one Youtube Player.

4
00:00:22,380 --> 00:00:25,830
Now notice that I've used a lower case t in the word Youtube.

5
00:00:26,030 --> 00:00:29,330
The library that we're going to be using now has capital T throughout.

6
00:00:29,540 --> 00:00:34,550
And what I suggest you do for the company domain is do something a little bit different. Now in

7
00:00:34,550 --> 00:00:38,820
my case I'm going to use learnprogramming.academy for the company domain.

8
00:00:39,080 --> 00:00:44,300
But the reason we want to do something different is because we need to get an API key from Google,

9
00:00:44,840 --> 00:00:47,730
and it's tied to the package name for the app.

10
00:00:47,750 --> 00:00:53,270
Now I'm going to show you how to get the API key in another video, and that key is used by Google to track

11
00:00:53,300 --> 00:00:56,160
usage of your app, and that allows them to charge you,

12
00:00:56,180 --> 00:00:58,610
but don't worry you get plenty of free use.

13
00:00:58,760 --> 00:01:05,090
So that won't be a problem for this app, but if every student used the same key, then with over 40000 students

14
00:01:05,090 --> 00:01:09,100
that signed up to my previous version of this course, it may well be a problem.

15
00:01:09,200 --> 00:01:13,820
So don't worry about being charged though, you have to enable billing in the developer console before Google

16
00:01:13,820 --> 00:01:19,940
will charge you, and you'd have to use the app continually on loads of devices all day, to exceed the generous

17
00:01:19,940 --> 00:01:21,990
daily limit that they actually give you anyway.

18
00:01:22,220 --> 00:01:26,810
And again if you haven't enabled billing, you won't get charged and it'll actually stop working until

19
00:01:26,810 --> 00:01:27,400
the next day.

20
00:01:27,410 --> 00:01:31,820
So no matter what if you don't enable billing, you won't get charged anything if you do happen to manage

21
00:01:31,820 --> 00:01:34,000
to go over the usage allowance.

22
00:01:34,010 --> 00:01:38,200
So for this company domain I'm going to stick to using learnprogramming.academy,

23
00:01:38,330 --> 00:01:41,060
but if you've got your own domain name I suggest you use that.

24
00:01:41,090 --> 00:01:46,920
Otherwise use something like yourname.example.org, something that will be unique to you, and

25
00:01:46,940 --> 00:01:50,010
probably a good idea to run your first and last name together, you know like

26
00:01:50,120 --> 00:01:55,740
Tim Buchalka.example.org for example, or the other way round. Just try and make sure you enter something

27
00:01:55,740 --> 00:01:56,950
unique there.

28
00:01:57,170 --> 00:02:01,310
Alright so you know the drill with the Kotlin support box by now, so tick it if you want Kotlin code, or

29
00:02:01,430 --> 00:02:04,690
untick it for java and I'm gonna click on next now.

30
00:02:04,910 --> 00:02:07,250
And in fact you know the whole process pretty much now,

31
00:02:07,250 --> 00:02:11,600
so in future videos we're going to be starting with the project already created and opened,

32
00:02:11,630 --> 00:02:14,330
and I'll just give you the project name and the template to choose.

33
00:02:14,470 --> 00:02:17,390
Alright so I'm going to choose API 17 here as before, go on

34
00:02:17,480 --> 00:02:22,960
next. I'm going to select empty project, empty activity, click on next.

35
00:02:23,120 --> 00:02:29,420
I'm going to leave the default for the activity name and the layout name, so that Android studio creates the

36
00:02:29,420 --> 00:02:35,060
activity for us, and also creates the layout, and I'm going to click on the generate layout of file checkbox

37
00:02:35,060 --> 00:02:38,720
as well as the backwards compatibility one, and click on finish.

38
00:02:38,760 --> 00:02:44,100
Alright now, while that's getting set up what we need to do is go ahead and download the library that we

39
00:02:44,100 --> 00:02:47,000
are going to be using for this project.

40
00:02:47,000 --> 00:02:48,540
So let's go ahead and do that.

41
00:02:48,540 --> 00:02:54,620
So I'm going to open a browser. I'm going to paste in the url,

42
00:02:54,750 --> 00:03:01,070
and again what we're doing here is, or what we need to do, is integrate the YouTube API into our app,

43
00:03:01,260 --> 00:03:06,030
and we have to download the library file from the Google YouTube site which I've gone to now.

44
00:03:06,270 --> 00:03:12,540
And in case you wondering, API stands for Application Program Interface, and API provides functions or

45
00:03:12,540 --> 00:03:16,530
classes for performing a certain task, or one task or another,

46
00:03:16,680 --> 00:03:23,100
in this case playing YouTube videos. Alright so the page as you can see here contains a lot of information on using

47
00:03:23,100 --> 00:03:24,860
the Android YouTube API.

48
00:03:25,110 --> 00:03:29,670
There's also this reference tab up here which you can check with all the documentation for the various

49
00:03:29,670 --> 00:03:35,130
classes, and as an exercise, perhaps once you've finished this app in this section of the course, you might

50
00:03:35,130 --> 00:03:37,930
well want to come back and experiment with various other things.

51
00:03:38,190 --> 00:03:42,410
Now one example might be checking out this YouTube.ThumbnailLoader

52
00:03:42,800 --> 00:03:46,640
So have a play once you've finished the app in this section of the course, and maybe modify it to add some more

53
00:03:46,650 --> 00:03:52,230
functionality. Now by the time we've finished this app, you'll have seen how to do things like launch a new activity

54
00:03:52,230 --> 00:03:56,010
when the user clicks a button, so that you can add more screens to the app if you want.

55
00:03:56,160 --> 00:04:00,330
So there's all this information available which makes using the API a lot easier,

56
00:04:00,420 --> 00:04:05,430
but we need to download the libraries, so I'm going to click on guides up here, the guides tab to go back.

57
00:04:05,630 --> 00:04:09,240
Now just down the page here is a link to the download page, this one here.

58
00:04:09,570 --> 00:04:14,880
There's also a link over here in the left hand side, but I'm showing you this one for a reason, and it's saying

59
00:04:14,880 --> 00:04:21,000
you need to have version 4.2.16 or higher of the YouTube app installed on your device

60
00:04:21,240 --> 00:04:23,060
to be able to use this API.

61
00:04:23,430 --> 00:04:28,690
Now previously I had to suggest that you use a physical device to test this app on.

62
00:04:28,980 --> 00:04:35,280
However when Android Oreo was released, Google used or also released, emulators that can install apps

63
00:04:35,280 --> 00:04:38,970
from the Google Play store so that limitation's been removed.

64
00:04:39,390 --> 00:04:43,320
And there's actually now two different types of emulators, but we'll be discussing the differences

65
00:04:43,320 --> 00:04:45,120
when we come to running this app.

66
00:04:45,130 --> 00:04:50,700
So for now I'm going to click on the download link that takes us to the download page.

67
00:04:50,710 --> 00:04:55,740
Now the version number when I'm recording this video as you can see on the screen is 1.2.2,

68
00:04:55,780 --> 00:05:00,410
and it doesn't seem to change very often, but if there happens to be a new version when you come to watch this

69
00:05:00,460 --> 00:05:01,000
then that's fine.

70
00:05:01,000 --> 00:05:03,320
Just grab that current version and download it.

71
00:05:03,340 --> 00:05:07,240
So I'm going to click on download and I'm going to save it to my downloads folder.

72
00:05:08,720 --> 00:05:15,400
Now we're going to follow that downloaded file, and I'm going to double click it in my case to extract it.

73
00:05:15,440 --> 00:05:18,860
But if you run Linux you can right click and choose extract,

74
00:05:19,010 --> 00:05:22,060
and if you're on Windows you can do a similar thing, you can click on and extract all.

75
00:05:22,070 --> 00:05:26,560
So basically unzip the file then go into the unzipped folder.

76
00:05:26,920 --> 00:05:29,690
There's a libs subfolder: you want to click on that, then

77
00:05:29,770 --> 00:05:32,630
there's this YouTubeAndroidPlayerApi.jar

78
00:05:32,740 --> 00:05:35,930
so we want to select that. In my case I'm going select copy.

79
00:05:36,110 --> 00:05:43,800
So you'll do the equivalent if you're on Windows or on Linux, and then we want to swing back to our project in Android Studio.

80
00:05:44,850 --> 00:05:50,790
Now generally speaking, keeping the project pane in Android view is more convenient, but there are a

81
00:05:50,790 --> 00:05:52,380
few things that you can't do in Android view.

82
00:05:52,380 --> 00:05:57,050
Now one of these is copying external libraries into the project,

83
00:05:57,300 --> 00:06:00,630
and that's because the libs folder that we need isn't available in Android view.

84
00:06:00,630 --> 00:06:04,630
So you can see up here there's no mechanism to get to the libs folder,

85
00:06:04,650 --> 00:06:08,050
so what I'm going to do is switch into Project view briefly,

86
00:06:08,150 --> 00:06:12,120
using this drop down up here, select project.

87
00:06:12,150 --> 00:06:19,330
Once I do that I can then click to open the project folders, click on app and we've now got this libs folder,

88
00:06:19,330 --> 00:06:23,090
and you can see at the moment that's empty, so I can right click the libs folder

89
00:06:23,350 --> 00:06:29,840
and I can select paste. And you can see that we've got a dialog asking for confirmation of the copy,

90
00:06:29,910 --> 00:06:34,800
so make sure the directory it's copying the file into does say libs at the end, and you can see clearly here

91
00:06:34,800 --> 00:06:37,590
on my screen that it does say libs, so we're in the right place.

92
00:06:37,620 --> 00:06:43,350
Click OK, and now if we expand by clicking on this little triangle, we can see that the YouTube

93
00:06:43,350 --> 00:06:47,450
AndroidPlayerApi.jar is now in the libs folder.

94
00:06:47,940 --> 00:06:52,220
Alright so with that done, I'm going to go back now and switch it back to Android view.

95
00:06:52,620 --> 00:06:58,940
So now that we have copied the file into the libs folder, we need to tell Android Studio to use it in our project.

96
00:06:59,190 --> 00:07:03,270
Now one way to do that is to add a reference to it in the build.gradle file.

97
00:07:03,270 --> 00:07:07,650
Now things are changing at the moment and you might still be working on the older version of Android

98
00:07:07,650 --> 00:07:09,220
Studio as well as this one,

99
00:07:09,300 --> 00:07:14,280
so I'm going to show you another way. So you can go into the file menu and you can click on project

100
00:07:14,280 --> 00:07:21,790
structure. Once you do that, in the left hand side list here select app from the module section down here. Then you want to

101
00:07:21,790 --> 00:07:27,990
come over here to the right and click on the dependencies tab, and that lists all the dependencies

102
00:07:28,150 --> 00:07:29,410
for this project.

103
00:07:29,580 --> 00:07:36,450
Now as you can see we're using the appcompat library, and we're also using the constraint layout etc. Now if you're

104
00:07:36,450 --> 00:07:41,890
producing Kotlin code, you'll also see the standard Kotlin library in the list. You can see down here I've got that

105
00:07:41,890 --> 00:07:42,890
showing as well.

106
00:07:43,090 --> 00:07:49,420
Now right at the top, usually it's at the top, is a reference to *.jar files in the libs directory. Now

107
00:07:50,100 --> 00:07:54,760
that would automatically include any jar files that we place in the libs directory,

108
00:07:55,060 --> 00:07:56,990
and of course we've actually done that at the moment.

109
00:07:57,100 --> 00:07:59,840
So there's really no need to do what we're about to do,

110
00:08:00,050 --> 00:08:05,140
and that's because our YouTube library will be automatically included in the project because we put it into

111
00:08:05,140 --> 00:08:05,990
the libs folder.

112
00:08:06,220 --> 00:08:11,230
But I think it's useful to know how to add libraries, especially if you decide to keep the jar files

113
00:08:11,230 --> 00:08:12,190
in a different directory.

114
00:08:12,220 --> 00:08:14,020
So we're going to go through that process anyway.

115
00:08:14,380 --> 00:08:21,490
So to add a jar file explicitly, rather than relying on that catch-all include, you click on the green plus.

116
00:08:21,490 --> 00:08:24,980
In my case it's down here, but it may be at the top right,

117
00:08:25,000 --> 00:08:27,080
depending on what operating system you're running on,

118
00:08:27,170 --> 00:08:28,300
but click on the add anyway,

119
00:08:28,300 --> 00:08:31,600
in any event. Once you do that you get this little pop up menu,

120
00:08:31,980 --> 00:08:34,930
and you want to click on and choose Jar dependency.

121
00:08:34,930 --> 00:08:40,620
Now once you do that, that pops up a file browser which lets us browse the directories in the project.

122
00:08:40,630 --> 00:08:43,340
Now the jar file has to be in the project somewhere.

123
00:08:43,570 --> 00:08:49,720
So on Linux though unfortunately there's no ability to move back up to browse the entire hard disk. On my Mac though,

124
00:08:50,160 --> 00:08:55,480
I have to actually browse into the project directory and find libs, and you'll need to do a similar

125
00:08:55,480 --> 00:08:58,140
thing for Windows, so in my case I'm actually already there.

126
00:08:58,390 --> 00:09:04,960
I've already got the YouTubePlayer app libs folder, and you can see the YouTubePlayerApi.jar,

127
00:09:05,160 --> 00:09:07,980
sorry the YouTubeAndroidPlayerApi.jar, is actually there.

128
00:09:08,010 --> 00:09:09,790
I can just expand that out, we can see the full file name.

129
00:09:10,140 --> 00:09:12,420
So do whatever you need to do to get that open.

130
00:09:12,430 --> 00:09:18,000
Select the file then, and click on OK or open, depending on what your operating system shows,

131
00:09:18,430 --> 00:09:21,500
and you can see that that entry has been added now to the screen.

132
00:09:21,880 --> 00:09:25,240
Now if you want you can remove this catch-all include entry up here,

133
00:09:25,360 --> 00:09:30,900
at this point. You just click on it and use the red minus button, or in my case it's not red, but it will

134
00:09:30,900 --> 00:09:32,350
be, depending on your operating system,

135
00:09:32,350 --> 00:09:35,490
it may be a different color, and it may also be over here to the right,

136
00:09:35,500 --> 00:09:40,120
but in my case on the mac it's down the bottom. So if I clicked on that now that would actually remove

137
00:09:40,120 --> 00:09:46,310
that entry, but there's no need to remove it because the library won't be included twice if you leave it in.

138
00:09:46,330 --> 00:09:51,940
Now if you're experimenting with different libraries or trying different versions, then you don't want

139
00:09:51,940 --> 00:09:53,760
everything included automatically,

140
00:09:54,050 --> 00:09:57,250
and this is how you prevent everything in libs from being added.

141
00:09:57,430 --> 00:10:03,900
So only the libraries you add explicitly will appear in the project if you actually remove this line.

142
00:10:04,170 --> 00:10:07,390
But I'm going to leave it so you can see it in the build.gradle file.

143
00:10:07,400 --> 00:10:11,720
So, for that reason I'm just going to click OK because we're actually finished here now.

144
00:10:12,250 --> 00:10:18,100
And you can see it's got a gradle projects sequence in process, so Android Studio quickly realised there

145
00:10:18,100 --> 00:10:21,270
was a change and synced the project for us.

146
00:10:21,460 --> 00:10:27,040
Now in earlier versions of this course we added the library by modifying the build.gradle file, but

147
00:10:27,040 --> 00:10:32,110
the way we've just done it's safer, because there's no chance of typing the filename incorrectly.

148
00:10:32,140 --> 00:10:34,750
It's useful though to be familiar with build.gradle though, so

149
00:10:34,750 --> 00:10:37,420
let's have a look in there to see what we've just done.

150
00:10:37,620 --> 00:10:43,930
Now confusingly with Android Studio projects, there's two build gradle files: one you should edit, and one that

151
00:10:43,930 --> 00:10:46,100
you very rarely change.

152
00:10:46,150 --> 00:10:48,590
Now the one we what, and I'm going to click on it and expand this, down here,

153
00:10:48,650 --> 00:10:52,390
the one we want is in the app's directory.

154
00:10:52,600 --> 00:10:55,330
This one up here is lower in the tree as you can see, below

155
00:10:55,330 --> 00:11:01,330
the Project:YoutubePlayer, this one here, build.gradle module app. Now because we'll not only be looking at

156
00:11:01,330 --> 00:11:02,200
Android view though,

157
00:11:02,280 --> 00:11:04,000
I'm not going to change the file name here.

158
00:11:04,850 --> 00:11:08,230
And if we go back now and have a look in Project view again, you can see we've got this build

159
00:11:08,230 --> 00:11:08,850
dot gradle and

160
00:11:08,850 --> 00:11:14,450
it's actually in the app path, and there's also not a build gradle there. But if we go back now again

161
00:11:14,480 --> 00:11:19,880
just to have a look in Android view, we've got, all the gradle scripts are in the same place.

162
00:11:19,890 --> 00:11:24,480
But it still shows just the module up here and this is the one that ultimately we want to have look at.

163
00:11:24,620 --> 00:11:26,130
So I'm going to double click on that

164
00:11:26,260 --> 00:11:30,370
to open it, and just out of interest if you accidentally opened the wrong one,

165
00:11:30,420 --> 00:11:31,780
have a look at this other one,

166
00:11:31,800 --> 00:11:34,880
it actually makes a point of saying 'Don't place your application dependencies here;

167
00:11:34,880 --> 00:11:40,090
they belong in the individual module build.gradle file'. So it's really just a warning to let you know that,

168
00:11:40,500 --> 00:11:43,280
or to remind you that perhaps you're looking at the wrong build gradle file.

169
00:11:43,280 --> 00:11:46,240
So I'm to close that one down and leave our app one open.

170
00:11:46,400 --> 00:11:48,480
Now eventually you'll get used to which one's which

171
00:11:48,480 --> 00:11:53,050
but till then, just open one and if you see that warning then close it and then open the other one.

172
00:11:53,060 --> 00:11:55,120
So in this case we've now got the right one open.

173
00:11:55,440 --> 00:12:01,430
So this module build.gradle file has all sorts of information telling Android Studio, or really the gradle

174
00:12:01,460 --> 00:12:06,640
build system, how to build the file that's deployed to our devices or emulators.

175
00:12:06,670 --> 00:12:08,480
So down at the bottom here,

176
00:12:08,790 --> 00:12:14,000
inside the dependency section, we can see the jar file that we added right on the last line, sitting there

177
00:12:14,290 --> 00:12:18,810
now. Now we could have just typed that line in, instead of going through the menu that we did earlier in the video,

178
00:12:18,890 --> 00:12:22,980
and if you do type these entries in, it's really important that you get the case right.

179
00:12:23,010 --> 00:12:27,690
Now I mentioned at the start of the videos about the upper and the lower case t, and you can see here that

180
00:12:28,320 --> 00:12:31,560
on the libs/YouTube we've got a capital T there.

181
00:12:31,800 --> 00:12:35,920
If you use a lower case t in YouTube for example, it won't work.

182
00:12:35,950 --> 00:12:40,680
Now if you're used to Windows, remember to put the slash rather than the backslash between libs and the jar

183
00:12:40,690 --> 00:12:46,720
filename, so don't use backslashes in other words. So at the top of this dependency section is that catchall

184
00:12:46,730 --> 00:12:50,830
entry I talked about, to include all jar files from the libs directory.

185
00:12:51,060 --> 00:12:53,710
Now I didn't delete it then so you could see it in here,

186
00:12:53,820 --> 00:12:58,490
but I'm going to delete that entire line now, and move that up.

187
00:12:59,500 --> 00:13:04,290
Now it's usually a good idea to be explicit about what you want to do when programming,

188
00:13:04,400 --> 00:13:10,490
rather than relying on default behavior, and this is why I've specifically listed the YouTube Android

189
00:13:10,490 --> 00:13:15,560
Player API jar file. So I've deleted that implementation file tree line.

190
00:13:15,680 --> 00:13:20,920
Now it wouldn't hurt to leave it in. The library wouldn't be included twice, but we're being explicit here,

191
00:13:21,160 --> 00:13:26,430
and we're listing the jar file in it's own implementation statement anyway on line 34.

192
00:13:26,720 --> 00:13:30,840
Now with that said there's no guarantee that Google won't remove that default inclusion of all jars

193
00:13:30,860 --> 00:13:34,360
in the lib folder, so it's really useful to know what's going on here.

194
00:13:34,820 --> 00:13:38,900
Now whenever you make a change to the build gradle file, you'll get a message at the top as you can see now

195
00:13:38,960 --> 00:13:42,930
telling you that the file's changed, and you need to click the Sync Now link.

196
00:13:43,020 --> 00:13:47,050
But if you're making several changes you can actually do all the changes first.

197
00:13:47,210 --> 00:13:49,790
Just make sure that you do the Sync Now, or

198
00:13:49,850 --> 00:13:54,560
click the Sync Now, by clicking the link once you finish the changes, or you'll find things won't work

199
00:13:54,650 --> 00:13:57,490
properly. So I'm going to click on Sync Now.

200
00:13:57,530 --> 00:14:00,680
Now there are a few more things to look at in this file.

201
00:14:00,680 --> 00:14:06,950
The first are that these dependencies over here start with the word implementation. Now in previous versions

202
00:14:06,950 --> 00:14:10,980
of Android Studio, that used to say compile instead.

203
00:14:11,100 --> 00:14:16,020
And if you're working on an old version as well, or more accurately if you're using an older version of gradle,

204
00:14:16,210 --> 00:14:18,980
then that'll be compile instead of implementation.

205
00:14:19,310 --> 00:14:23,620
So watch out for that and use compile if you're working with the older versions.

206
00:14:23,640 --> 00:14:28,630
Now if you go through Android Studio's menu like we did first, it'll use the correct keyword.

207
00:14:28,790 --> 00:14:36,260
Now the other thing that you may want to change in here are the minSdk up here, and the targetSdkVersion here at the top.

208
00:14:36,470 --> 00:14:42,170
Now these are the values we provided in the wizard, when we originally created the project earlier in this video.

209
00:14:42,370 --> 00:14:47,720
Now if you change your minds then this is the place to change them. So more importantly, if you open an old

210
00:14:47,720 --> 00:14:52,580
project and you want to convert it to target the latest version of Android, or maybe drop support for

211
00:14:52,580 --> 00:14:53,610
an old version,

212
00:14:53,690 --> 00:14:55,830
then you can change these settings in here.

213
00:14:56,150 --> 00:15:01,020
Remember that the minimum version now supported is API 14, Ice cream sandwich.

214
00:15:01,040 --> 00:15:07,580
Now if you're converting an old Marshmallow or Nougat project to Orio, then you'll also want to change the compile STK

215
00:15:07,580 --> 00:15:13,830
version to 26, and the build tools version to the latest version of Orio. So as I record this

216
00:15:13,830 --> 00:15:18,740
it's 26.0.2 but have a look at any new project you've created to get the

217
00:15:18,740 --> 00:15:20,210
correct version numbers.

218
00:15:20,270 --> 00:15:22,410
assuming you've installed all the latest updates of course.

219
00:15:23,540 --> 00:15:30,420
Now the last thing here is that it's possible that this app compat line is actually highlighted, so what

220
00:15:30,420 --> 00:15:33,320
I'm going to do is change this back just to show you what I mean here.

221
00:15:33,360 --> 00:15:34,930
I'm going to change this back to an older version,

222
00:15:34,930 --> 00:15:36,190
26.0.2

223
00:15:36,390 --> 00:15:45,200
and I'm going to show you what happens when there's a newer version available. I'll give that a moment to sync. Then you'll notice

224
00:15:45,200 --> 00:15:48,380
now that we've got an older version here, that this is actually highlighted,

225
00:15:48,380 --> 00:15:55,040
and if I hover over that, it actually says a newer version of the app compact library is available. And if I actually

226
00:15:55,040 --> 00:15:57,310
click on that, we get the lightbulb 

227
00:15:57,490 --> 00:16:02,870
over here. And I can come down here, and I can click on change to 26.1.0 and that number

228
00:16:02,870 --> 00:16:07,460
will be whatever the latest version is, and that will update it, then I need to come over here and click

229
00:16:07,460 --> 00:16:08,480
on Sync Now.

230
00:16:08,740 --> 00:16:13,430
So if you see any entries highlighted like that in yellow, that's the way to actually update them to

231
00:16:13,430 --> 00:16:16,330
make sure that you're running the latest version.

232
00:16:16,400 --> 00:16:21,050
And keep in mind that when you click on the Sync Now button, that will actually do any necessary downloads

233
00:16:21,050 --> 00:16:23,940
to get that latest version for you. Pretty cool.

234
00:16:24,260 --> 00:16:27,750
Now I've already gone ahead and actually clicked on that and actually updated it.

235
00:16:27,950 --> 00:16:31,320
But generally before you update there are implications,

236
00:16:31,510 --> 00:16:34,900
and that's why Android Studio didn't just go ahead and upgrade it anyway.

237
00:16:35,240 --> 00:16:38,810
Now you'll find it does that for certain things like the gradle build system.

238
00:16:38,810 --> 00:16:42,260
It'll prompt you but can update gradle automatically.

239
00:16:42,260 --> 00:16:45,240
The reason for that is, that only affects the build process -

240
00:16:45,260 --> 00:16:51,050
it doesn't change what's compiled into your final app - but changing those library versions does change your app.

241
00:16:51,110 --> 00:16:55,640
So if you're app's gone through final testing for example, and it's ready for release, you can't suddenly

242
00:16:55,640 --> 00:16:59,710
go changing the library versions. If you do, the app will need full testing again.

243
00:16:59,960 --> 00:17:05,150
And the other thing to keep in mind is that sometimes new libraries do introduce bugs. They can also change

244
00:17:05,150 --> 00:17:07,030
the way your app works in subtle ways.

245
00:17:07,040 --> 00:17:12,710
So bear that in mind - if you change any of these library versions, your app will need testing again before

246
00:17:12,710 --> 00:17:13,790
you release it.

247
00:17:13,790 --> 00:17:18,710
Now while you're working through the examples in this course, I recommended that you do use the latest version

248
00:17:18,710 --> 00:17:19,900
of all the libraries though.

249
00:17:20,240 --> 00:17:24,470
And that's why I went ahead and clicked on the light bulb and I changed the app compat vision to

250
00:17:24,470 --> 00:17:29,380
26.1.0 which is the latest version currently existing.

251
00:17:29,510 --> 00:17:33,270
And then obviously I went through and clicked on the Sync Now. Aright we're going to be coming

252
00:17:33,270 --> 00:17:37,130
back to this file later to look at some of the other things in here, but for now though

253
00:17:37,230 --> 00:17:40,670
that's the project set up so that we can use the YouTube API.

254
00:17:40,860 --> 00:17:46,800
So I'm going to go ahead and close the API, the build.gradle file here, and we'll finish off the

255
00:17:46,800 --> 00:17:48,240
video. In the next one,

256
00:17:48,240 --> 00:17:52,530
we're going to start work creating a new activity to show those YouTube videos.

257
00:17:52,530 --> 00:17:54,060
So see you in the next video.

