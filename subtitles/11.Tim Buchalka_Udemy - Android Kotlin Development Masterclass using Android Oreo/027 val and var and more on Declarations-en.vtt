WEBVTT
1

00:00:04.560 --> 00:00:06.600

Okay, so we've looked at declaring



2

00:00:06.600 --> 00:00:09.000

variables and using them in calculations



3

00:00:09.000 --> 00:00:10.830

we've then looked at using string



4

00:00:10.830 --> 00:00:12.660

interpolation to print out more



5

00:00:12.660 --> 00:00:14.820

descriptive messages with our variables.



6

00:00:14.820 --> 00:00:16.500

Now we've got a couple of things to



7

00:00:16.500 --> 00:00:18.450

cover in this video and I'll start with



8

00:00:18.450 --> 00:00:20.280

why I've used var for some of the



9

00:00:20.280 --> 00:00:23.490

variables and vowel for others and I've



10

00:00:23.490 --> 00:00:24.990

actually got an admission to make



11

00:00:24.990 --> 00:00:26.580

that's this code is at the moment I



12

00:00:26.580 --> 00:00:29.040

should have used Val everywhere but then



13

00:00:29.040 --> 00:00:30.510

I wouldn't have any familiar example



14

00:00:30.510 --> 00:00:33.000

code to use for this video all right so



15

00:00:33.000 --> 00:00:35.399

what does this Val and vea mean and



16

00:00:35.399 --> 00:00:36.749

what's the difference between the two



17

00:00:36.749 --> 00:00:40.980

well Val stands for value and VARs short



18

00:00:40.980 --> 00:00:43.589

for variable now we can get a clue to



19

00:00:43.589 --> 00:00:45.149

what the difference is by looking at the



20

00:00:45.149 --> 00:00:47.429

third warning tick that Android studio



21

00:00:47.429 --> 00:00:49.289

is showing in the right margin so we



22

00:00:49.289 --> 00:00:51.589

come down here and just hover over that



23

00:00:51.589 --> 00:00:54.120

you can see that says variant variable



24

00:00:54.120 --> 00:00:55.729

is never modified and can be declared



25

00:00:55.729 --> 00:00:59.309

immutable using val. Now immutable here



26

00:00:59.309 --> 00:01:01.469

means that it can't be changed which



27

00:01:01.469 --> 00:01:02.879

means that once it's been given a value



28

00:01:02.879 --> 00:01:06.600

that value can't change now that may



29

00:01:06.600 --> 00:01:08.159

seem like an odd thing to want to do to



30

00:01:08.159 --> 00:01:10.500

a variable after all they're called



31

00:01:10.500 --> 00:01:12.630

variables which implies that their



32

00:01:12.630 --> 00:01:15.329

values will change and that's true it's



33

00:01:15.329 --> 00:01:16.590

often necessary to assign different



34

00:01:16.590 --> 00:01:19.920

values to a variable in that case that



35

00:01:19.920 --> 00:01:22.289

have to be declared using var instead of



36

00:01:22.289 --> 00:01:25.469

rather than Val very often though you'll



37

00:01:25.469 --> 00:01:27.960

assign a value to a variable and never



38

00:01:27.960 --> 00:01:30.119

change it now that might sound



39

00:01:30.119 --> 00:01:32.310

surprising but it's extremely common



40

00:01:32.310 --> 00:01:34.320

you'll see examples of that when we look



41

00:01:34.320 --> 00:01:36.060

at functions and classes later in this



42

00:01:36.060 --> 00:01:37.920

section of the course but it's an



43

00:01:37.920 --> 00:01:40.049

example of this look at the declaration



44

00:01:40.049 --> 00:01:44.159

here on line 5 for what the Tim variable



45

00:01:44.159 --> 00:01:46.320

now I could probably imagine an extreme



46

00:01:46.320 --> 00:01:47.880

set of circumstances that would result



47

00:01:47.880 --> 00:01:50.070

in me changing my name and going on the



48

00:01:50.070 --> 00:01:52.380

run and going into hiding it's possible



49

00:01:52.380 --> 00:01:53.609

perhaps but I think I can safely



50

00:01:53.609 --> 00:01:55.649

guarantee that my name will remain



51

00:01:55.649 --> 00:01:58.109

timbered chaka and won't change in the



52

00:01:58.109 --> 00:01:59.759

time I'm recording these videos at least



53

00:01:59.759 --> 00:02:02.100

if ever so the point is that there's



54

00:02:02.100 --> 00:02:04.350

very little point storing my name in a



55

00:02:04.350 --> 00:02:07.469

VAR variable once it's stored it's not



56

00:02:07.469 --> 00:02:09.539

going to change all right so that's fair



57

00:02:09.539 --> 00:02:11.580

enough but what's the big deal after all



58

00:02:11.580 --> 00:02:13.170

we just have to avoid changing it and



59

00:02:13.170 --> 00:02:15.390

everything's fine right now this bits



60

00:02:15.390 --> 00:02:16.950

going to be a little bit contrived and



61

00:02:16.950 --> 00:02:18.240

we haven't got a lot of



62

00:02:18.240 --> 00:02:19.890

code here so it's going to be obvious



63

00:02:19.890 --> 00:02:22.290

where I'm about to go wrong but remember



64

00:02:22.290 --> 00:02:24.180

that a real program will have hundreds



65

00:02:24.180 --> 00:02:26.460

or thousands of lines of code split over



66

00:02:26.460 --> 00:02:29.070

loads of different files and classes so



67

00:02:29.070 --> 00:02:30.480

what I'm going to do here is start by



68

00:02:30.480 --> 00:02:33.120

adding another variable Jim and they're



69

00:02:33.120 --> 00:02:35.460

going to do that above Tim on line five



70

00:02:35.460 --> 00:02:40.560

so var Jim ji M :



71

00:02:40.560 --> 00:02:44.640

string all right so now that we've done



72

00:02:44.640 --> 00:02:46.500

that I'm going to go down to the code



73

00:02:46.500 --> 00:02:47.820

right down the bottom here we're going



74

00:02:47.820 --> 00:02:50.130

to keep Jim a value so right after the



75

00:02:50.130 --> 00:02:52.950

last print one we're going to put Tim



76

00:02:52.950 --> 00:03:00.630

equals james t kirk now when I run the



77

00:03:00.630 --> 00:03:05.490

program you'll see that it says my name



78

00:03:05.490 --> 00:03:07.650

is james t kirk so I'm no longer timba



79

00:03:07.650 --> 00:03:09.570

jakka I've become the captain of the



80

00:03:09.570 --> 00:03:11.730

enterprise instead the rest have said



81

00:03:11.730 --> 00:03:14.280

this is a bit contrived but errors like



82

00:03:14.280 --> 00:03:17.070

this are surprisingly easy to make when



83

00:03:17.070 --> 00:03:18.180

you're dealing with hundreds of



84

00:03:18.180 --> 00:03:19.890

variables in thousands of lines of



85

00:03:19.890 --> 00:03:22.680

programming code now we can prevent bugs



86

00:03:22.680 --> 00:03:24.930

like that from creeping in by declaring



87

00:03:24.930 --> 00:03:27.660

variables as vowel when we don't expect



88

00:03:27.660 --> 00:03:30.180

them to change so when I go up here into



89

00:03:30.180 --> 00:03:35.040

line 6 and change the var to vowel and



90

00:03:35.040 --> 00:03:36.360

it's grown and have a look at the code



91

00:03:36.360 --> 00:03:38.670

that will no longer compile or run we're



92

00:03:38.670 --> 00:03:40.020

actually getting a warning here and



93

00:03:40.020 --> 00:03:42.690

error rather saying Val cannot be reassigned



94

00:03:42.690 --> 00:03:44.820

so it's an error showing that when I



95

00:03:44.820 --> 00:03:46.740

incorrectly try to assign a new value to



96

00:03:46.740 --> 00:03:49.020

Tim at the end of the code so the



97

00:03:49.020 --> 00:03:51.000

kÃ¶ppen compiler is catching the bug for



98

00:03:51.000 --> 00:03:53.190

us and not allowing the code to compile



99

00:03:53.190 --> 00:03:56.250

so that's a general rule always use Val



100

00:03:56.250 --> 00:03:58.290

unless you're sure that you're going to



101

00:03:58.290 --> 00:04:00.840

change the value of a variable you know



102

00:04:00.840 --> 00:04:02.400

if you find that you do need to assign a



103

00:04:02.400 --> 00:04:04.230

new value to a vowel you can always go



104

00:04:04.230 --> 00:04:05.790

back and make it a var instead at that



105

00:04:05.790 --> 00:04:07.530

point all right so I'm going to correct



106

00:04:07.530 --> 00:04:10.170

that rogue line so that we saw into Jim



107

00:04:10.170 --> 00:04:15.120

instead of Tim and it's also print



108

00:04:15.120 --> 00:04:18.680

something will actually replace line 32



109

00:04:18.680 --> 00:04:22.080

what I'll do is come down here and on



110

00:04:22.080 --> 00:04:26.669

line 33 well change it to put Jim is



111

00:04:26.669 --> 00:04:31.930

dollar Jim okay we'll run that code



112

00:04:31.930 --> 00:04:34.370

quickly now showing my name is Tim



113

00:04:34.370 --> 00:04:36.500

Boetsch akka and the Jim variable is



114

00:04:36.500 --> 00:04:38.600

correctly signed to the value of james t



115

00:04:38.600 --> 00:04:41.300

kirk alright so android studio is



116

00:04:41.300 --> 00:04:43.639

helping to identify variables that don't



117

00:04:43.639 --> 00:04:46.280

change and all uses of are actually



118

00:04:46.280 --> 00:04:48.139

highlighted we can actually start by



119

00:04:48.139 --> 00:04:51.260

clicking on VAR on line 5 over here and



120

00:04:51.260 --> 00:04:52.850

we get the tooltip suggesting it can be



121

00:04:52.850 --> 00:04:54.860

a valise you can see here variable is



122

00:04:54.860 --> 00:04:56.060

never modified and can be declared



123

00:04:56.060 --> 00:04:58.310

immutable using vowel but even better



124

00:04:58.310 --> 00:05:01.970

though i double click it we get this



125

00:05:01.970 --> 00:05:03.350

little world light bulb up here in the



126

00:05:03.350 --> 00:05:05.810

left hand side and we can come down here



127

00:05:05.810 --> 00:05:08.060

we can click on make variable immutable



128

00:05:08.060 --> 00:05:10.610

and that changes that as you can see to



129

00:05:10.610 --> 00:05:12.800

a vowel nil and obviously that warning



130

00:05:12.800 --> 00:05:14.930

then disappears alright so let's do the



131

00:05:14.930 --> 00:05:17.750

same for the other VARs so come down



132

00:05:17.750 --> 00:05:20.570

here you're going to clear that by



133

00:05:20.570 --> 00:05:21.979

double clicking it make variable



134

00:05:21.979 --> 00:05:24.500

immutable same for tim's monthly salary



135

00:05:24.500 --> 00:05:26.960

double click for the VAR change that to



136

00:05:26.960 --> 00:05:29.240

make variable immutable we can come down



137

00:05:29.240 --> 00:05:31.760

here to fruit double click you can also



138

00:05:31.760 --> 00:05:33.500

make that variable immutable as you can



139

00:05:33.500 --> 00:05:36.590

see and that's all the VARs now



140

00:05:36.590 --> 00:05:38.570

converted to vowel in this case we can



141

00:05:38.570 --> 00:05:40.250

do that because we're only assigning a



142

00:05:40.250 --> 00:05:42.650

value to them once all right so let's



143

00:05:42.650 --> 00:05:43.970

now have a look at some of the warnings



144

00:05:43.970 --> 00:05:45.650

that are still showing in the right-hand



145

00:05:45.650 --> 00:05:47.750

margin now the first one if you look



146

00:05:47.750 --> 00:05:49.250

carefully looks like it's changed color



147

00:05:49.250 --> 00:05:52.010

slightly it's now a suggestion whereas



148

00:05:52.010 --> 00:05:54.020

before it was showing us a warning you



149

00:05:54.020 --> 00:05:55.700

know suggestions aren't as important as



150

00:05:55.700 --> 00:05:57.590

warnings but your code will be more



151

00:05:57.590 --> 00:05:59.750

readable if you take note of them so



152

00:05:59.750 --> 00:06:01.460

this one here is saying can be joined



153

00:06:01.460 --> 00:06:03.830

with the Simon and by the way clicking



154

00:06:03.830 --> 00:06:06.950

on one of these warnings will take you



155

00:06:06.950 --> 00:06:09.050

to the line of code that's applicable



156

00:06:09.050 --> 00:06:11.660

for that particular warning now we can



157

00:06:11.660 --> 00:06:14.150

come over here double click it again and



158

00:06:14.150 --> 00:06:17.330

we can come down and select the tool the



159

00:06:17.330 --> 00:06:19.639

light bulb and we'll click on join a



160

00:06:19.639 --> 00:06:22.580

Declaration and assignment and you can



161

00:06:22.580 --> 00:06:23.690

see that that's pretty impressive



162

00:06:23.690 --> 00:06:26.150

it's put the assignment of the Jim



163

00:06:26.150 --> 00:06:28.070

variable from the end of the code and



164

00:06:28.070 --> 00:06:30.620

added it to our declaration so Jim's now



165

00:06:30.620 --> 00:06:32.539

initialized at the point where it's



166

00:06:32.539 --> 00:06:34.280

declared and that's good programming



167

00:06:34.280 --> 00:06:36.680

practice so I can do the same for Tim on



168

00:06:36.680 --> 00:06:38.660

the next line just by double clicking on



169

00:06:38.660 --> 00:06:41.419

it and selecting the light bulb and go



170

00:06:41.419 --> 00:06:44.000

join Declaration and assignment alright



171

00:06:44.000 --> 00:06:45.230

so let's look at some of the other warning



172

00:06:45.230 --> 00:06:47.990

now explicit given top is redundant and



173

00:06:47.990 --> 00:06:50.150

they're actually all the same at this



174

00:06:50.150 --> 00:06:52.550

point forward now all these warnings are



175

00:06:52.550 --> 00:06:54.680

all the same no explicit given type is



176

00:06:54.680 --> 00:06:57.350

redundant here now I said that you had



177

00:06:57.350 --> 00:06:59.870

to tell Kotlin what type of value each



178

00:06:59.870 --> 00:07:02.090

variable is going to be given but that's



179

00:07:02.090 --> 00:07:04.850

not strictly true now every variable has



180

00:07:04.850 --> 00:07:07.100

to have a type and once you made it a



181

00:07:07.100 --> 00:07:08.690

string say you can't go with signing a



182

00:07:08.690 --> 00:07:10.760

number to it but we don't have to



183

00:07:10.760 --> 00:07:13.520

explicitly tell Kotlin the type Kotlin



184

00:07:13.520 --> 00:07:14.270

is very clever



185

00:07:14.270 --> 00:07:16.640

and can work out the type what the type



186

00:07:16.640 --> 00:07:19.190

should be most of the time now the first



187

00:07:19.190 --> 00:07:21.170

warning is here on line 5 if I click on



188

00:07:21.170 --> 00:07:23.810

over here where we sign a string to the



189

00:07:23.810 --> 00:07:26.420

variable Jim now if we're making Jim



190

00:07:26.420 --> 00:07:28.310

equal to the string then double quotes



191

00:07:28.310 --> 00:07:29.810

and whatever the name of the year string



192

00:07:29.810 --> 00:07:31.670

is than Jim's obviously the strings in



193

00:07:31.670 --> 00:07:33.290

other words if the value is surrounded



194

00:07:33.290 --> 00:07:35.960

by double quotes quite clearly that's a



195

00:07:35.960 --> 00:07:38.090

string and that's what the warnings



196

00:07:38.090 --> 00:07:40.490

saying here cotton can work out that Jim



197

00:07:40.490 --> 00:07:42.830

is of type string so telling it that



198

00:07:42.830 --> 00:07:45.080

it's a string is redundant and again



199

00:07:45.080 --> 00:07:47.200

what we can do here is just double click



200

00:07:47.200 --> 00:07:50.150

click on the light bulb and we can click



201

00:07:50.150 --> 00:07:53.260

on remove explicit types specification



202

00:07:53.260 --> 00:07:55.340

now that I've done that you can see it



203

00:07:55.340 --> 00:07:57.980

just says Val Jim equals double quotes



204

00:07:57.980 --> 00:08:00.230

james t kirk then another double quote



205

00:08:00.230 --> 00:08:02.240

so i thought i think you'd agree that



206

00:08:02.240 --> 00:08:04.520

line 5 nair was a lot easy to read



207

00:08:04.520 --> 00:08:06.860

then line 6 and we've removed that



208

00:08:06.860 --> 00:08:08.390

redundant type and we've actually



209

00:08:08.390 --> 00:08:10.850

removed that warning as well now when



210

00:08:10.850 --> 00:08:13.250

the codes compiled the Kotlin compiler



211

00:08:13.250 --> 00:08:15.620

will infer the type that Jim should be



212

00:08:15.620 --> 00:08:17.750

now you'll come across the term type



213

00:08:17.750 --> 00:08:19.640

inference in the documentation and



214

00:08:19.640 --> 00:08:20.990

that's what it means



215

00:08:20.990 --> 00:08:23.150

cotton can work out what type something



216

00:08:23.150 --> 00:08:24.650

is all right so I'm going to use the



217

00:08:24.650 --> 00:08:27.110

light bulb now to actually remove the



218

00:08:27.110 --> 00:08:29.750

remaining redundant type specifies so



219

00:08:29.750 --> 00:08:32.419

I'm going to start with the next line



220

00:08:32.419 --> 00:08:35.180

I'm going to double click on that I'm



221

00:08:35.180 --> 00:08:38.030

going to change Tim remove explicit type



222

00:08:38.030 --> 00:08:40.790

specification in the next one Tim's



223

00:08:40.790 --> 00:08:43.490

weekly salary I'm gonna remove explicit



224

00:08:43.490 --> 00:08:46.160

type specification next one Tim's



225

00:08:46.160 --> 00:08:50.090

monthly salary remove explicit type



226

00:08:50.090 --> 00:08:52.220

specification now that can also be



227

00:08:52.220 --> 00:08:54.560

inferred but there's no warning but the



228

00:08:54.560 --> 00:08:55.970

light bulb did appear when I clicked on



229

00:08:55.970 --> 00:08:58.100

the variable where type and also appear



230

00:08:58.100 --> 00:08:59.100

by the way



231

00:08:59.100 --> 00:09:02.190

and you can by double-clicking on the



232

00:09:02.190 --> 00:09:03.570

actual variable top that'll produce a



233

00:09:03.570 --> 00:09:05.490

light bulb or make the light bulb appear



234

00:09:05.490 --> 00:09:07.140

as well I can click on remove the



235

00:09:07.140 --> 00:09:08.700

explicit type specification for that as



236

00:09:08.700 --> 00:09:11.370

well and continuing on down here I can



237

00:09:11.370 --> 00:09:14.220

click on double click on apples remove



238

00:09:14.220 --> 00:09:18.210

explicit type oranges remove explicit



239

00:09:18.210 --> 00:09:23.660

type fruit remove explicit type weeks



240

00:09:23.660 --> 00:09:27.900

remove explicit type years remove



241

00:09:27.900 --> 00:09:31.830

explicit type okay so that's basically



242

00:09:31.830 --> 00:09:34.500

all the changes there now that's



243

00:09:34.500 --> 00:09:36.780

actually removed all the warnings and



244

00:09:36.780 --> 00:09:38.340

our code more readable without that



245

00:09:38.340 --> 00:09:40.230

clutter notice now that I've done that



246

00:09:40.230 --> 00:09:41.670

in the top right hand corner here



247

00:09:41.670 --> 00:09:44.220

there's a green tick and that's telling



248

00:09:44.220 --> 00:09:45.570

us that there's no other warnings we've



249

00:09:45.570 --> 00:09:47.730

got these other things here which aren't



250

00:09:47.730 --> 00:09:50.310

warnings as such so this is what you



251

00:09:50.310 --> 00:09:52.290

should be aiming for in your code a



252

00:09:52.290 --> 00:09:54.450

green tick to indicate that there's no



253

00:09:54.450 --> 00:09:56.700

outstanding warnings or suggestions and



254

00:09:56.700 --> 00:09:59.370

obviously no errors. Now it's always



255

00:09:59.370 --> 00:10:00.990

worth checking out these warnings and



256

00:10:00.990 --> 00:10:03.240

suggestions as they'll often help you to



257

00:10:03.240 --> 00:10:06.570

write more idiomatic Kotlin code you can



258

00:10:06.570 --> 00:10:08.550

ignore them but paying attention to them



259

00:10:08.550 --> 00:10:11.180

and acting on them can improve your code.



260

00:10:11.180 --> 00:10:13.110

Alright so I'm going to stop this video



261

00:10:13.110 --> 00:10:15.060

here in the next one we're going to look



262

00:10:15.060 --> 00:10:17.640

at how our code can make decisions.



263

00:10:17.640 --> 00:10:20.450

See you in the next video.



