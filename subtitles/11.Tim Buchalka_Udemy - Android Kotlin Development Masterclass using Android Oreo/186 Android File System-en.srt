1
00:00:04,810 --> 00:00:11,430
In the previous videos we write a very simple app that created a database that inserted some data into

2
00:00:11,430 --> 00:00:12,900
a Contacts table.

3
00:00:13,050 --> 00:00:17,130
In this video I'm going to show you a little bit about the Android file system.

4
00:00:17,130 --> 00:00:20,670
This can be useful so that we can check where that database file is.

5
00:00:20,790 --> 00:00:23,310
That will open it and have a look at the data in there.

6
00:00:23,370 --> 00:00:30,430
So Android is built on Linux Android and Linux uses for its caches rather than backslashes in parts.

7
00:00:30,720 --> 00:00:32,830
Folland directory names are case sensitive.

8
00:00:33,120 --> 00:00:39,150
So in other words size data is not the same as for such data or with a capital date that went toward

9
00:00:39,180 --> 00:00:46,200
creates a new user account for each app to keep each app secure that data is stored under the package

10
00:00:46,200 --> 00:00:52,490
name in for its fresh data for its last data and Android emulators are rooted.

11
00:00:52,860 --> 00:00:57,710
And I'll talk more about roots and shortly the Android operating system is based on Linux.

12
00:00:57,960 --> 00:00:58,530
That's right.

13
00:00:58,530 --> 00:01:02,580
Essentially an Android device is really a Linux system.

14
00:01:02,580 --> 00:01:07,140
So if you've already been using Linux or used to Linux then you'll be you're already very familiar with

15
00:01:07,140 --> 00:01:14,580
the file system and the basic commands we can look at 0 6 on a Mac OS side shares a lot in common with

16
00:01:14,580 --> 00:01:18,080
Linux as both operating systems evolved from Unix.

17
00:01:18,330 --> 00:01:23,580
You know if you're used to Windows on the other hand remember that Linux users slash character in file

18
00:01:23,580 --> 00:01:28,370
past the forward slash rather than the backslash used by Windows.

19
00:01:28,370 --> 00:01:33,450
And again as I mentioned Android installs are Mumsie CHEP under a separate user account and it creates

20
00:01:33,450 --> 00:01:37,570
a new account for every app that's installed by the folk.

21
00:01:37,590 --> 00:01:40,650
Linux doesn't allow users to access each other's data.

22
00:01:40,920 --> 00:01:43,240
So this results in a great deal of security.

23
00:01:43,280 --> 00:01:48,540
One app can access the data belonging to another app and that includes outside database.

24
00:01:48,540 --> 00:01:53,530
Now there are ways to share data and we will be looking at that later in the section.

25
00:01:53,580 --> 00:02:00,060
Now that data is stored in a sub directory inside fortnights type the forest has data and each app has

26
00:02:00,060 --> 00:02:02,130
its own directory in there.

27
00:02:02,250 --> 00:02:06,600
The directory name is just the package name and we'll look at that shortly.

28
00:02:06,600 --> 00:02:11,310
Now finally some of the emulators are rooted and what that means is it doesn't mean that they're not

29
00:02:11,310 --> 00:02:16,110
working means that you've got root access or administrator access.

30
00:02:16,110 --> 00:02:20,750
If you prefer the windows Tib's they can access everything on the device but unless you've routed you

31
00:02:20,770 --> 00:02:26,160
physical fire in much of what we're about to do here won't work on a physical Android device.

32
00:02:26,520 --> 00:02:31,530
And the other thing to note is that it won't work on the Google Play emulators I mentioned way back

33
00:02:31,530 --> 00:02:36,260
in Section 3 that the Google Play emulators don't allow root access.

34
00:02:36,300 --> 00:02:41,550
You can either have the ability to install apps from the place or with regulators or you can have read

35
00:02:41,550 --> 00:02:42,730
access to the emulator.

36
00:02:42,780 --> 00:02:46,690
You can have both at least not at the time of recording this video anyway.

37
00:02:46,980 --> 00:02:52,110
So what that means is that it's important not to use a Google Play emulator if you want to examine your

38
00:02:52,110 --> 00:02:55,480
apps database on the emulator navigational API.

39
00:02:55,490 --> 00:02:56,850
I mean it is a fine.

40
00:02:56,850 --> 00:03:03,420
Make sure you choose an image that doesn't have an entry in the placed or column in the DVD manager.

41
00:03:03,450 --> 00:03:11,030
And what I mean by that is the city manager up and it can say hey we've got a nexus 5 x IPO or 26 and

42
00:03:11,040 --> 00:03:13,460
we can update that in a few videos Tom.

43
00:03:13,630 --> 00:03:15,770
But there's no place to walk on.

44
00:03:15,810 --> 00:03:18,370
So that's an example of a device that isn't rooted.

45
00:03:18,390 --> 00:03:21,130
So in other words we wouldn't be able to access the database.

46
00:03:21,180 --> 00:03:26,190
This one down here and actually made it clear that it has got real access nothing that it hasn't got

47
00:03:26,190 --> 00:03:28,100
the Google Play on there.

48
00:03:28,250 --> 00:03:31,410
And you can see over here it says Google IPO is where I grew up.

49
00:03:31,500 --> 00:03:33,380
We've got full access to that read access to that.

50
00:03:33,570 --> 00:03:35,790
And in fact that's the I mean I've got running at the moment.

51
00:03:35,850 --> 00:03:38,090
And you can see up here the difference there is it's cooking.

52
00:03:38,110 --> 00:03:40,590
So bottom line here is see want just follow along.

53
00:03:40,590 --> 00:03:43,760
In this video you get access to the database from the command line.

54
00:03:43,920 --> 00:03:48,800
You need to make sure you're not running an emulator that has been set up with Google Play.

55
00:03:49,280 --> 00:03:49,740
OK.

56
00:03:51,090 --> 00:03:56,970
So I'm back in the studio with the sequel project loaded and I'm stunned at the idea that I was testing

57
00:03:56,980 --> 00:04:01,320
and I can say I behave like Tebb I've been taught there's a C code that tests running.

58
00:04:01,320 --> 00:04:04,780
So what I'll do is let's run it one more time just to make sure we're all on the same page and it's

59
00:04:04,790 --> 00:04:11,760
still working life in the lockout and just a shadow on the screen and you can say we've got it right.

60
00:04:11,790 --> 00:04:16,830
There are two records coming back and we've now got it showing with the record ideas.

61
00:04:16,860 --> 00:04:19,060
Number two as well as already too.

62
00:04:19,410 --> 00:04:24,090
And by the way when you run an app on your emulator Android studio installs it just like any that you

63
00:04:24,090 --> 00:04:25,340
download and you're fired.

64
00:04:25,590 --> 00:04:28,960
So what we're about to say applies to all Android apps.

65
00:04:29,070 --> 00:04:32,280
We're going to open the terminal window cause this one first.

66
00:04:32,280 --> 00:04:34,190
The can't open the terminal window.

67
00:04:34,190 --> 00:04:40,830
Then by clicking on Terminal One of them to put it into flighting mode to of maybe this up here out

68
00:04:40,830 --> 00:04:44,940
of the way it resized a little bit so that won't affect the subtopics if you happen to be running that

69
00:04:46,630 --> 00:04:50,910
can say that you've got a fair bit of flexibility in how you organize these pains when you're working

70
00:04:50,910 --> 00:04:59,220
with them outside the command line to check that there's a device available we use the command IDB devices.

71
00:04:59,300 --> 00:05:06,390
How deep a device is center and you can say it's his list of devices attached so that command returns

72
00:05:06,390 --> 00:05:07,610
a list of devices attached.

73
00:05:07,620 --> 00:05:11,990
He can say he had an and emulator connected nothing that nebuliser just a piece.

74
00:05:12,000 --> 00:05:13,620
Just as a physical device.

75
00:05:13,830 --> 00:05:19,230
As far as the IDB commands are concerned now because of adding up to one device connected I can top

76
00:05:19,250 --> 00:05:24,670
ITP show and we get a prompt on the device now.

77
00:05:24,680 --> 00:05:29,040
So I've gone into the I mean lighter like to know what Linux the command to show a directory listing

78
00:05:29,040 --> 00:05:33,180
is LS which is the equivalent of D.O.A. our windows.

79
00:05:33,220 --> 00:05:39,450
It give us a bit more information on these problems but them two Ls spice more l lower case there's

80
00:05:39,450 --> 00:05:40,540
a list of favs.

81
00:05:40,590 --> 00:05:42,550
This is on the actual image right now.

82
00:05:42,870 --> 00:05:47,820
So even though we're effectively running with root access of the emulator we still don't have permission

83
00:05:47,820 --> 00:05:49,740
to the files in the root directory.

84
00:05:49,920 --> 00:05:56,120
We set up full access to everything and we're not saying permission denied area but basically there'll

85
00:05:56,130 --> 00:06:00,820
be some Fahrzeug it won't be able to access until we give ourselves that full access.

86
00:06:00,820 --> 00:06:05,910
Now some nebulizers such as the Marcus of one will give you more permissions so you might not get a

87
00:06:05,910 --> 00:06:09,870
pension or permission denied message that we never gave or changes things a bit.

88
00:06:09,870 --> 00:06:12,060
So you might not say it with me.

89
00:06:12,120 --> 00:06:15,670
It is the PC at the bottom line is I haven't got that permission denied.

90
00:06:15,870 --> 00:06:20,510
But it's not a problem because on an emulator what we can do is request super user access.

91
00:06:20,640 --> 00:06:21,790
So I'm going to do that.

92
00:06:22,020 --> 00:06:29,340
Topis you disappears Rexus and Donelly spice for elegant and it's very unlikely that you'd be able to

93
00:06:29,340 --> 00:06:36,150
use the command on a physical device even if you've routed the device still to get the program that

94
00:06:36,150 --> 00:06:39,450
actually runs the su command onto itself.

95
00:06:39,790 --> 00:06:45,240
So now that we can see the following directory names to what we're interested in is the directory called

96
00:06:45,240 --> 00:06:52,710
data analytics a D in the first position of that sequence of characters which is to have a look at that.

97
00:06:52,740 --> 00:06:57,110
Do you ever hear this first sequence of characters that indicate that it's a directory.

98
00:06:57,270 --> 00:07:00,480
If there's an L there that means we're looking at a symlink.

99
00:07:00,570 --> 00:07:02,700
Sort of like a shortcut to another directory.

100
00:07:02,740 --> 00:07:05,180
So lucky exit etc for example.

101
00:07:05,180 --> 00:07:10,100
Notice that that's got an L and it's actually redirected to slash system slushed.

102
00:07:10,140 --> 00:07:12,570
Easy as you can see I have the right hand side.

103
00:07:13,040 --> 00:07:14,650
So basically ATC here.

104
00:07:14,850 --> 00:07:20,580
The authorities say is a shortcut to the forward or forward slash system for ATC.

105
00:07:20,580 --> 00:07:23,640
Now we don't really interested in most of the files and directories.

106
00:07:24,020 --> 00:07:26,200
So let's have a look into that data directory.

107
00:07:26,520 --> 00:07:34,470
I'm going to hop CD spice data and I'm going to help spice models though about the way I noticed on

108
00:07:34,470 --> 00:07:39,530
the bottom that the prompt is changing to show the current directory so we can see now that we've changed

109
00:07:39,550 --> 00:07:44,760
to the data the reference is the prompt and once again most of the stuff isn't relevant to what we're

110
00:07:44,760 --> 00:07:45,810
doing at the moment.

111
00:07:45,900 --> 00:07:51,190
But you can see how he can use change directory command say to change into different directories.

112
00:07:51,660 --> 00:07:54,050
So let's change into that data directory again.

113
00:07:54,240 --> 00:07:57,290
So this will effectively be the data slash data directory.

114
00:07:57,420 --> 00:08:03,550
And on top say they spice d'Artois again and that is now that the prompters Shankar's data slush data.

115
00:08:03,570 --> 00:08:06,710
So again the prompts changing to reflect the directory we're County in.

116
00:08:06,780 --> 00:08:11,790
And that's very useful as a check so that is something in the wrong directory don't LS Spice models

117
00:08:11,790 --> 00:08:12,940
that they know.

118
00:08:13,610 --> 00:08:19,650
So now that we're in data data and now things are starting to get more interesting we can see the storage

119
00:08:19,650 --> 00:08:24,310
directories now for all the apps listed on stold Rather on this emulator.

120
00:08:24,330 --> 00:08:28,650
Now there's quite a few that came with the emulator and we can also see some of the eps that I tested

121
00:08:28,650 --> 00:08:29,630
if we scroll up.

122
00:08:29,920 --> 00:08:31,480
So I'm going to scroll up and have a look there.

123
00:08:32,670 --> 00:08:37,300
You keep scrolling up and notice that we've got the Academy Donlin programming ones with a calculator

124
00:08:37,410 --> 00:08:38,160
flicker.

125
00:08:38,240 --> 00:08:42,870
The sequel I test our current app and it was our top 10 downloaded showing there as well.

126
00:08:43,470 --> 00:08:50,290
But basically every app that installed it's got its own folder for databases.

127
00:08:50,330 --> 00:08:53,030
So at this point we were interested in a sequel like this step.

128
00:08:53,030 --> 00:08:59,970
So referring back to Judge Trudy I briefly scrolling up notice that you probably recall that that page

129
00:08:59,970 --> 00:09:03,510
is academy LOONE sequel light test.

130
00:09:04,290 --> 00:09:09,120
So therefore we need to use that for what we need to go into that directory and see what's in there.

131
00:09:09,120 --> 00:09:15,520
So I'm going to say the spice now could top Academy taught in programming sequel at Test don't have

132
00:09:15,530 --> 00:09:17,160
anything to do is topping the first few letters.

133
00:09:17,190 --> 00:09:19,740
ISCI in this case impis tap.

134
00:09:20,010 --> 00:09:24,670
And that gives me a list of all the directories that match what I've talked inside files are Calamy

135
00:09:24,690 --> 00:09:30,480
don't let me dot what I can do now is just Toppan s press time again.

136
00:09:30,640 --> 00:09:34,030
Or do you get the full path I into there.

137
00:09:34,390 --> 00:09:42,150
Now you can say it by the prompt in academy and in programming but sequela test LS Spice models elegant.

138
00:09:42,270 --> 00:09:45,640
Now at this point we're really interested in the databases directory.

139
00:09:45,750 --> 00:09:50,660
So it's changed into that directory and have a look at our database Saidy spice and top tier again for

140
00:09:51,240 --> 00:09:53,880
and spice Fonzo.

141
00:09:54,060 --> 00:09:59,040
And finally you've got to this place now where our database resides and you probably remember that fault

142
00:09:59,050 --> 00:10:03,370
line that we chose seek a lot of test dash 1 TB.

143
00:10:03,510 --> 00:10:05,380
It's basically we've found a database.

144
00:10:05,590 --> 00:10:11,370
Now noticed that in addition to the database file there's a fall with the site name and Desch Journal

145
00:10:11,370 --> 00:10:11,740
on the end.

146
00:10:11,790 --> 00:10:16,920
Sometimes it's usually there but it may not be there in your case this Deskjet will follow the second

147
00:10:16,920 --> 00:10:17,590
one here.

148
00:10:21,380 --> 00:10:22,800
That's a transaction log.

149
00:10:22,910 --> 00:10:26,260
That's sequela uses to handle database transactions.

150
00:10:26,360 --> 00:10:28,200
So it's used if something goes wrong.

151
00:10:28,400 --> 00:10:31,060
And an update can't be completed for any reason.

152
00:10:31,100 --> 00:10:36,440
So using the transaction log siecle lot can undo all the changes and put the database back into the

153
00:10:36,440 --> 00:10:36,760
site.

154
00:10:36,760 --> 00:10:42,290
It was then if all goes well it uses the journal file to commit the transaction.

155
00:10:42,290 --> 00:10:47,960
So at this point anyway we found out about as fall as we can say that I'm looking at the prompt that's

156
00:10:47,960 --> 00:10:52,090
in the data slash data Sledge's Academy taught learn programming a lot.

157
00:10:52,100 --> 00:10:56,150
Test slash databases directory.

158
00:10:56,150 --> 00:11:00,330
So once you know your project's package name you can find the database easily.

159
00:11:00,350 --> 00:11:01,960
It'll always be in the same path.

160
00:11:01,970 --> 00:11:04,940
It's just the package name pop that varies.

161
00:11:05,080 --> 00:11:09,560
Right now we get to this stage because I open the database and check that it's as we expect it will

162
00:11:09,560 --> 00:11:10,250
be.

163
00:11:10,330 --> 00:11:12,370
We're going to talk talk about a lot.

164
00:11:12,370 --> 00:11:19,850
Three spice and then a lot with the same ups and then on the top bar select the DeBerry which is selected

165
00:11:19,850 --> 00:11:21,250
for us by the Foxtons presenter.

166
00:11:21,250 --> 00:11:26,690
Now when I press tab I mean going into the database so I could have also I just talked in the whole

167
00:11:26,690 --> 00:11:28,510
file line but our top secret a lot.

168
00:11:28,670 --> 00:11:34,180
Q On press tab and we matched part of the name enough for it to open up any wife right so that gives

169
00:11:34,190 --> 00:11:39,710
us the familiar sequel up prompt that we've used earlier in this section of the course and we can use

170
00:11:39,710 --> 00:11:42,930
all the commands that we've seen in those early videos in this section.

171
00:11:43,250 --> 00:11:48,420
So first let's check the structure of our database schema.

172
00:11:48,710 --> 00:11:49,460
Now that's interesting.

173
00:11:49,460 --> 00:11:51,910
We've got the context table that we expected.

174
00:11:51,990 --> 00:11:56,490
But there's another table in there called Android underscore meta data.

175
00:11:56,730 --> 00:12:03,630
Now that type was created automatically by the sequel like database class and it's used for localization.

176
00:12:03,730 --> 00:12:08,990
Till now searching for words that contain accented characters for example it contains a single field

177
00:12:08,990 --> 00:12:12,580
code locale with a locale to be used.

178
00:12:12,650 --> 00:12:16,490
But we don't normally have to worry about that typo because Android creates it for us.

179
00:12:16,760 --> 00:12:18,370
So we're going to ignore that table.

180
00:12:18,500 --> 00:12:21,480
Instead we're going to have a look at our context data.

181
00:12:21,570 --> 00:12:31,930
We're going to top select spy stuff from spy stuff from in context then add a semicolon and then there's

182
00:12:32,030 --> 00:12:32,990
two records.

183
00:12:33,340 --> 00:12:36,830
So let's add another one here to check this is are working properly.

184
00:12:37,040 --> 00:12:42,590
And Bob the wife unable to run an emulator on your system and you're using a physical device instead.

185
00:12:42,620 --> 00:12:45,530
Don't worry about not being able to perform this next step.

186
00:12:45,550 --> 00:12:51,140
Your database will have one less row than mine but you can always modify the have to add the extra row

187
00:12:51,140 --> 00:12:52,090
if you want.

188
00:12:52,100 --> 00:12:54,830
So what I want to do is add a new record.

189
00:12:54,830 --> 00:12:59,000
You see the sequel like command line interface and then we should be able to see it when we get back

190
00:12:59,030 --> 00:13:00,010
into our app.

191
00:13:00,370 --> 00:13:09,160
I'm going to insert spice into Spice contex spice Thalys parentheses.

192
00:13:09,330 --> 00:13:15,920
I going the top three Khama spice and single quite pop single quite common five six seven eight comma

193
00:13:16,440 --> 00:13:19,590
and a single quite Bob at his home.

194
00:13:19,590 --> 00:13:27,660
How come single quite wrought parentheses in a semi-colon Precentor and nowhere put use is a good sign

195
00:13:27,660 --> 00:13:34,920
that to come on top is worked we can confirm that potong select spice style spice from spice contex

196
00:13:35,520 --> 00:13:41,060
semicolon and now we've got an extra requit showing that it's very good to go.

197
00:13:41,340 --> 00:13:45,000
And by the way you used to recalling previous commands by pressing the apere K..

198
00:13:45,210 --> 00:13:45,660
I'll try that.

199
00:13:45,660 --> 00:13:51,630
Now this doesn't work in sequence not from the command line in the Unix shell on the emulators and that's

200
00:13:51,630 --> 00:13:55,350
fair enough because there's not much point Google including all the bells and whistles.

201
00:13:55,500 --> 00:13:59,100
When we don't spend much time using the shelves just to whites to the device storage.

202
00:13:59,120 --> 00:14:03,070
So you just you have to top the commands and it's time to get them to work.

203
00:14:03,070 --> 00:14:08,100
All right so let's swing back to androids Judaea now that we've added that record to the database more

204
00:14:08,100 --> 00:14:09,990
specifically back to our code.

205
00:14:10,110 --> 00:14:15,090
Now we've got a problem here at the moment a slight problem if we run the epic in it's going to drop

206
00:14:15,090 --> 00:14:15,890
the table.

207
00:14:16,170 --> 00:14:19,170
And what added data that would just add to that new record.

208
00:14:19,170 --> 00:14:23,670
So what I'm going to do is coming out to this code and basically going to commit to the card all the

209
00:14:23,680 --> 00:14:30,330
way all the way after the Vout database definitional 1:23 all right down to the query.

210
00:14:32,200 --> 00:14:33,020
Right down here.

211
00:14:35,180 --> 00:14:38,290
Write down to them it's going to come out

212
00:14:42,600 --> 00:14:48,670
and i'm are going to kind of this last long down here because obviously now that it isn't going to work

213
00:14:48,970 --> 00:14:55,930
given that we've already commented that the other card that created the generated ID variable now that

214
00:14:55,930 --> 00:15:03,960
I've done that we should be able to run our application and see those entries from the database.

215
00:15:03,970 --> 00:15:07,150
And I really liked it when I read the blog as well.

216
00:15:08,420 --> 00:15:13,110
You get a moment to stop and this time you can say that word successfully.

217
00:15:13,230 --> 00:15:17,710
And we are successfully saying three entries there but one two three.

218
00:15:17,710 --> 00:15:22,450
The third one was obviously Bob was the entry that we just added from the sequel three command line

219
00:15:22,570 --> 00:15:23,910
on our emulator.

220
00:15:24,410 --> 00:15:29,770
All right so that's a basic introduction to the Android file system and accessing the sequel like database

221
00:15:29,770 --> 00:15:31,910
that your Android app creates on an emulator.

222
00:15:32,170 --> 00:15:36,670
It's very useful to be able to do that so that you can check the data that your apps writing to the

223
00:15:36,680 --> 00:15:42,140
database being able to check what's been written to the database can make debugging a lot easier.

224
00:15:42,430 --> 00:15:47,410
Now this Hepton put very much in the database and Desam said it's certainly not the way you should write

225
00:15:47,470 --> 00:15:48,640
a database app.

226
00:15:48,640 --> 00:15:53,040
But if you're trying to debug a database app then this technique is very useful.

227
00:15:53,210 --> 00:15:59,890
Just before I finish what we're going to do is a close look at when we got back to our terminal and

228
00:15:59,890 --> 00:16:06,160
one exit out of there is going to top down exit to exit circle at 3 going to exit exits from simple

229
00:16:06,160 --> 00:16:10,350
user mode exit again which exits from the show.

230
00:16:10,540 --> 00:16:17,350
The next one more time which closes the terminal pain in a studio.

231
00:16:17,460 --> 00:16:22,000
All right so in the next few years we're going to start to see how to do this all properly using a content

232
00:16:22,000 --> 00:16:25,880
provider for working with databases in Android apps.

233
00:16:25,960 --> 00:16:27,060
See you in the next video.

