1
00:00:04,650 --> 00:00:06,780
When we started looking at classes I

2
00:00:06,780 --> 00:00:08,310
mentioned that there's less need to

3
00:00:08,310 --> 00:00:10,740
overload functions in Kotlin and that's

4
00:00:10,740 --> 00:00:12,870
because Kotlin allows default valleys to

5
00:00:12,870 --> 00:00:15,930
be specified for function arguments.

6
00:00:15,930 --> 00:00:17,849
Now I didn't say very much about overloading

7
00:00:17,849 --> 00:00:19,890
at the time, so let's look at what that

8
00:00:19,890 --> 00:00:22,860
is in a bit more detail now when you

9
00:00:22,860 --> 00:00:24,720
were overload a function that just means

10
00:00:24,720 --> 00:00:26,820
creating another copy of it with

11
00:00:26,820 --> 00:00:28,830
different parameters so that could be

12
00:00:28,830 --> 00:00:31,109
very useful here because we could use a

13
00:00:31,109 --> 00:00:33,330
different version of drop loot and give

14
00:00:33,330 --> 00:00:35,460
it the name of the loot so we could come

15
00:00:35,460 --> 00:00:37,530
down here at the moment we've got our

16
00:00:37,530 --> 00:00:40,380
loan 51 the definition for blue potion

17
00:00:40,380 --> 00:00:43,860
but in terms of drop loot we could do

18
00:00:43,860 --> 00:00:47,070
something like Tim dot drop loot and

19
00:00:47,070 --> 00:00:50,010
actually enter the name so in visibility

20
00:00:50,010 --> 00:00:53,399
potion now we've got an error at the

21
00:00:53,399 --> 00:00:55,110
moment because we're passing a string to

22
00:00:55,110 --> 00:00:57,510
the drop loot function and it expects a

23
00:00:57,510 --> 00:01:00,149
loot object now if we could pass a

24
00:01:00,149 --> 00:01:02,399
string to drop loot then we could drop

25
00:01:02,399 --> 00:01:04,920
the invisibility potion even though we

26
00:01:04,920 --> 00:01:07,350
don't have a reference to it so what we

27
00:01:07,350 --> 00:01:09,600
need to do here is create a version of

28
00:01:09,600 --> 00:01:11,640
drop loot that accepts a string argument

29
00:01:11,640 --> 00:01:13,950
then get it to remove the corresponding

30
00:01:13,950 --> 00:01:16,140
item from the list so let's go to our

31
00:01:16,140 --> 00:01:18,179
player class we're going to add this

32
00:01:18,179 --> 00:01:22,200
after the existing drop loot method all

33
00:01:22,200 --> 00:01:26,330
right so we're gonna start and drop loot

34
00:01:26,330 --> 00:01:33,300
parentheses name colon string :

35
00:01:33,300 --> 00:01:37,080
brilliant then we create the function

36
00:01:37,080 --> 00:01:39,090
with the left or right curly braces and

37
00:01:39,090 --> 00:01:43,289
then we'll just do print then dollar

38
00:01:43,289 --> 00:01:49,470
name will be dropped for now we're just

39
00:01:49,470 --> 00:01:53,160
going to do a return true so when

40
00:01:53,160 --> 00:01:55,319
overloading a function we create another

41
00:01:55,319 --> 00:01:57,899
function with the same name but we give

42
00:01:57,899 --> 00:01:59,880
it different parameters now the compiler

43
00:01:59,880 --> 00:02:01,950
checks the parameters and calls the

44
00:02:01,950 --> 00:02:04,349
version of the overloaded function that

45
00:02:04,349 --> 00:02:06,869
has matching parameters so we've got two

46
00:02:06,869 --> 00:02:08,459
versions of drop loot now as you can see

47
00:02:08,459 --> 00:02:12,120
so this first one on line 32 takes an

48
00:02:12,120 --> 00:02:14,010
argument of type loot because we've

49
00:02:14,010 --> 00:02:16,680
defined the parameter to be loot then

50
00:02:16,680 --> 00:02:18,300
the second drop loot on line 40

51
00:02:18,300 --> 00:02:20,730
one takes a string argument now it

52
00:02:20,730 --> 00:02:22,110
doesn't do anything useful yet we're

53
00:02:22,110 --> 00:02:24,030
focusing on the overloading mechanism at

54
00:02:24,030 --> 00:02:25,920
the moment we'll actually add more code

55
00:02:25,920 --> 00:02:27,810
to the second version in a minute so go

56
00:02:27,810 --> 00:02:30,240
back to main now notice that the error

57
00:02:30,240 --> 00:02:33,120
disappeared and the first time we call

58
00:02:33,120 --> 00:02:37,250
that drop loot this code here onload 45

59
00:02:37,250 --> 00:02:39,060
well actually this is probably a better

60
00:02:39,060 --> 00:02:40,970
one here so let's do this one rely on 52

61
00:02:40,970 --> 00:02:43,350
so we're calling droplet then we're

62
00:02:43,350 --> 00:02:45,120
giving it a loot instance blue potion

63
00:02:45,120 --> 00:02:47,760
and by doing that the first droplet

64
00:02:47,760 --> 00:02:50,190
functions called but down here when we

65
00:02:50,190 --> 00:02:51,420
call it with a string argument

66
00:02:51,420 --> 00:02:54,240
invisibility potion again line 58 then

67
00:02:54,240 --> 00:02:56,250
that's the second drop blued functions

68
00:02:56,250 --> 00:02:58,080
that's going to be called instead

69
00:02:58,080 --> 00:03:00,930
because we passed the document of type string.

70
00:03:00,930 --> 00:03:02,760
So let's actually try running this and

71
00:03:02,760 --> 00:03:09,840
see what happens and you can see that

72
00:03:09,840 --> 00:03:11,130
the other code is executed then right

73
00:03:11,130 --> 00:03:13,200
down the bottom invisibility potion will

74
00:03:13,200 --> 00:03:15,420
be dropped so that's working in our

75
00:03:15,420 --> 00:03:17,460
second version of droplets obviously

76
00:03:17,460 --> 00:03:20,400
being called at that point so that's

77
00:03:20,400 --> 00:03:22,800
function overloading you create another

78
00:03:22,800 --> 00:03:24,600
version of the function with different

79
00:03:24,600 --> 00:03:26,880
parameters and Kotlin calls the one that

80
00:03:26,880 --> 00:03:29,489
matches the argument types now there's

81
00:03:29,489 --> 00:03:31,500
less need to overload functions in

82
00:03:31,500 --> 00:03:33,239
Kotlin than there is in Java because

83
00:03:33,239 --> 00:03:35,190
again we can use two fault values for

84
00:03:35,190 --> 00:03:37,290
the parameters instead but it's still

85
00:03:37,290 --> 00:03:38,850
necessary to overload functions

86
00:03:38,850 --> 00:03:41,850
sometimes and this is one example all

87
00:03:41,850 --> 00:03:42,720
right so we're going to finish this

88
00:03:42,720 --> 00:03:45,150
video by making our overloaded droplet

89
00:03:45,150 --> 00:03:45,989
function work

90
00:03:45,989 --> 00:03:48,810
now the Kotlin collection classes have a

91
00:03:48,810 --> 00:03:50,970
remove if function that we can use to

92
00:03:50,970 --> 00:03:52,890
remove it an item from the list if a

93
00:03:52,890 --> 00:03:54,900
certain condition is true so let's

94
00:03:54,900 --> 00:03:56,130
actually try that we'll go back to

95
00:03:56,130 --> 00:03:58,950
player the player class and a second

96
00:03:58,950 --> 00:04:00,690
droplet function we're going to do in

97
00:04:00,690 --> 00:04:02,970
return we're gonna delete true and

98
00:04:02,970 --> 00:04:05,459
instead we're going to return in the

99
00:04:05,459 --> 00:04:10,890
entry dot remove if we're going to

100
00:04:10,890 --> 00:04:13,050
delete the parentheses then want to add

101
00:04:13,050 --> 00:04:14,940
a code block instead and within there

102
00:04:14,940 --> 00:04:20,580
I'm gonna put IT name equals name two

103
00:04:20,580 --> 00:04:22,470
equal signs there so that checks each

104
00:04:22,470 --> 00:04:24,900
item in the list and removes it if the

105
00:04:24,900 --> 00:04:26,520
name is the same as the name we passed

106
00:04:26,520 --> 00:04:31,540
into droplet now it here where the it dot well

107
00:04:31,540 --> 00:04:34,120
- the item is currently being checked so

108
00:04:34,120 --> 00:04:35,800
if the name of the current item matches

109
00:04:35,800 --> 00:04:38,320
invisibility potion in our example then

110
00:04:38,320 --> 00:04:40,350
the item gets removed from the list

111
00:04:40,350 --> 00:04:42,940
remove if then moves on to the next item

112
00:04:42,940 --> 00:04:45,580
in the list and repeat the check now if

113
00:04:45,580 --> 00:04:47,830
any items are removed it returns true

114
00:04:47,830 --> 00:04:50,590
otherwise it returns false which is what

115
00:04:50,590 --> 00:04:52,600
we want the function to do so we can

116
00:04:52,600 --> 00:04:55,480
return whatever remove if returns so

117
00:04:55,480 --> 00:04:57,040
let's see it working what I'm going to

118
00:04:57,040 --> 00:04:59,080
do is print out Tim's inventory at the

119
00:04:59,080 --> 00:05:01,090
end of main so we can check that the

120
00:05:01,090 --> 00:05:03,790
invisibility potion has been removed so

121
00:05:03,790 --> 00:05:05,800
we'll go back to our main making sure

122
00:05:05,800 --> 00:05:06,880
that I've actually spoken up the same

123
00:05:06,880 --> 00:05:08,650
here that's been added as invisibility

124
00:05:08,650 --> 00:05:10,390
potion and what is being removed as an

125
00:05:10,390 --> 00:05:12,730
invisibility potion I'm gonna talk tim

126
00:05:12,730 --> 00:05:15,040
dot showing the tree and let's see how

127
00:05:15,040 --> 00:05:20,950
that goes if you run it and you can see

128
00:05:20,950 --> 00:05:22,870
Tim's inventory down the end here the

129
00:05:22,870 --> 00:05:24,520
invisibility potion which was there and

130
00:05:24,520 --> 00:05:26,370
the previous call has now been removed

131
00:05:26,370 --> 00:05:28,570
so we've only got the chest armor and

132
00:05:28,570 --> 00:05:30,370
the ring of protection left so that's

133
00:05:30,370 --> 00:05:32,500
working fine now just in case you're

134
00:05:32,500 --> 00:05:34,300
wondering we don't have to use the

135
00:05:34,300 --> 00:05:35,860
material values when calling a function

136
00:05:35,860 --> 00:05:38,080
so we could have done the same thing as

137
00:05:38,080 --> 00:05:39,580
we did before for the blue potion

138
00:05:39,580 --> 00:05:42,690
so according on something like this if

139
00:05:42,690 --> 00:05:46,620
and surround them in parentheses

140
00:05:46,620 --> 00:05:49,420
add a code block and then put Tim show

141
00:05:49,420 --> 00:05:56,790
into the tree and else you're printing

142
00:05:56,790 --> 00:06:05,440
you don't have an invisibility potion so

143
00:06:05,440 --> 00:06:06,550
could do that instead and I'll delete

144
00:06:06,550 --> 00:06:08,320
that call to the show inventory method

145
00:06:08,320 --> 00:06:15,400
so let's run that and you can see we get

146
00:06:15,400 --> 00:06:17,500
the same result in this case with only

147
00:06:17,500 --> 00:06:19,810
the two items left alright so I think we

148
00:06:19,810 --> 00:06:21,820
got to the end of this video now that's

149
00:06:21,820 --> 00:06:24,310
probably quite a bit to digest so go

150
00:06:24,310 --> 00:06:26,290
back and watch the last few videos a few

151
00:06:26,290 --> 00:06:28,510
more times if you need to and go through

152
00:06:28,510 --> 00:06:30,760
step-by-step now it'll make more sense

153
00:06:30,760 --> 00:06:32,710
the more times that you go through it if

154
00:06:32,710 --> 00:06:34,630
you watch this and you aren't following

155
00:06:34,630 --> 00:06:36,430
along I do suggest you go back and

156
00:06:36,430 --> 00:06:38,020
actually type this in as I'm typing it

157
00:06:38,020 --> 00:06:39,700
in what I found when I was learning to

158
00:06:39,700 --> 00:06:41,890
program was that typing the code and

159
00:06:41,890 --> 00:06:43,870
rather than just reading it really

160
00:06:43,870 --> 00:06:45,260
helped to consolidate the

161
00:06:45,260 --> 00:06:46,820
back then of course there wasn't really

162
00:06:46,820 --> 00:06:49,160
much of the way of video tutorials what

163
00:06:49,160 --> 00:06:50,600
we did have was a whole load of

164
00:06:50,600 --> 00:06:51,950
computers released at around the same

165
00:06:51,950 --> 00:06:55,460
time such as the Sinclair zx81 Commodore

166
00:06:55,460 --> 00:06:57,890
pet BBC computer made by acorn and a

167
00:06:57,890 --> 00:06:59,540
whole lot of other machines and there

168
00:06:59,540 --> 00:07:01,400
was also monthly magazines and we learnt

169
00:07:01,400 --> 00:07:03,440
a lot from reading the manuals but also

170
00:07:03,440 --> 00:07:04,850
from typing in the code that was

171
00:07:04,850 --> 00:07:06,950
published in those magazines now

172
00:07:06,950 --> 00:07:08,300
obviously you'll make errors when typing

173
00:07:08,300 --> 00:07:10,010
the coding and debugging the programs to

174
00:07:10,010 --> 00:07:11,450
file the errors or make them work was

175
00:07:11,450 --> 00:07:14,060
also a great way to learn so typing an N

176
00:07:14,060 --> 00:07:16,310
seems to solidify the information and

177
00:07:16,310 --> 00:07:18,860
make it a lot easier to understand so I

178
00:07:18,860 --> 00:07:20,240
certainly recommend that you don't just

179
00:07:20,240 --> 00:07:22,610
watch these videos but you also act and

180
00:07:22,610 --> 00:07:24,710
be typing this in as the video

181
00:07:24,710 --> 00:07:27,050
progresses and in addition also try

182
00:07:27,050 --> 00:07:29,300
modifying the code to try different

183
00:07:29,300 --> 00:07:30,890
things and start up with simple things

184
00:07:30,890 --> 00:07:33,080
such as perhaps adding an extra field to

185
00:07:33,080 --> 00:07:35,060
one of the classes then by making other

186
00:07:35,060 --> 00:07:37,280
improvements you almost certainly get

187
00:07:37,280 --> 00:07:39,380
errors but sorting out the errors is a

188
00:07:39,380 --> 00:07:40,760
great way to increase your understanding

189
00:07:40,760 --> 00:07:43,820
of how it all works now you can't do any

190
00:07:43,820 --> 00:07:45,140
damage the worst that will happen is you

191
00:07:45,140 --> 00:07:46,760
get an error message now that wasn't

192
00:07:46,760 --> 00:07:48,110
always the case by the way it was

193
00:07:48,110 --> 00:07:50,480
possible to speed up the screen on an

194
00:07:50,480 --> 00:07:51,890
early computer called the Commodore pet

195
00:07:51,890 --> 00:07:54,590
by writing certain values to specific

196
00:07:54,590 --> 00:07:56,390
memory locations and if you got that

197
00:07:56,390 --> 00:07:58,100
wrong the display would be permanently

198
00:07:58,100 --> 00:07:59,930
damaged but that's no longer the case

199
00:07:59,930 --> 00:08:01,430
and you keep you literally can't do that

200
00:08:01,430 --> 00:08:03,250
these days with modern computers

201
00:08:03,250 --> 00:08:05,120
basically you can't do any damage to

202
00:08:05,120 --> 00:08:06,770
your computer with Kotlin, so have fun

203
00:08:06,770 --> 00:08:09,050
and try things out all right so I've

204
00:08:09,050 --> 00:08:10,520
hoped you enjoyed this and I'll see you

205
00:08:10,520 --> 00:08:13,270
in the next video.

