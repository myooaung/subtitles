1
00:00:01,040 --> 00:00:03,440
A lot of the heavy lifting is done for us now,

2
00:00:03,440 --> 00:00:07,340
but now that we've actually gone out and fired off the email,

3
00:00:07,340 --> 00:00:10,140
and verified that it's gone to that email address,

4
00:00:10,140 --> 00:00:15,200
and comes back to our application, we need to go ahead and verify that token,

5
00:00:15,200 --> 00:00:19,680
and then display the page that we want them to enter the new password on.

6
00:00:19,680 --> 00:00:23,650
So we're going to add some stuff to our controller,

7
00:00:23,650 --> 00:00:27,040
add another UI page that will post back to that

8
00:00:27,040 --> 00:00:29,200
controller to then write to the database.

9
00:00:29,200 --> 00:00:29,840
So,

10
00:00:29,840 --> 00:00:33,560
let's begin implementing that by modifying our controller

11
00:00:33,560 --> 00:00:35,840
and then creating another JSP page.

12
00:00:35,840 --> 00:00:39,280
This error message is because we have nowhere to go inside

13
00:00:39,280 --> 00:00:42,640
of our app once they've gone ahead and clicked the

14
00:00:42,640 --> 00:00:44,850
passwordReset link in our email.

15
00:00:44,850 --> 00:00:51,940
So, let's switch back to the controller and add a path for that to resolve to.

16
00:00:51,940 --> 00:00:57,390
Our controller just needs another GetMapping that will

17
00:00:57,390 --> 00:00:59,890
resolve that URL that we just passed in.

18
00:00:59,890 --> 00:01:01,830
We're going to do this a tiny bit different,

19
00:01:01,830 --> 00:01:05,330
we're going to use a ModelAndView object,

20
00:01:05,330 --> 00:01:09,840
which will enable us to grab that token and display it back to the

21
00:01:09,840 --> 00:01:12,840
user because the difference here is that we want to make sure

22
00:01:12,840 --> 00:01:16,430
throughout that process that we capture that token and verify it

23
00:01:16,430 --> 00:01:18,560
through all of the steps that we're going to.

24
00:01:18,560 --> 00:01:19,140
So,

25
00:01:19,140 --> 00:01:24,740
we're going to grab this token off the URL string that comes in from our email,

26
00:01:24,740 --> 00:01:27,420
store that in a password object that's going to be

27
00:01:27,420 --> 00:01:33,350
the backing form for our JSP page, and return that new ModelAndView,

28
00:01:33,350 --> 00:01:38,040
which will be the resetPassword JSP page that we need to create right now,

29
00:01:38,040 --> 00:01:41,850
and back it with the model of the password object.

30
00:01:41,850 --> 00:01:44,570
So that's what the ModelAndView object does here,

31
00:01:44,570 --> 00:01:46,220
it's a little bit of Spring MVC,

32
00:01:46,220 --> 00:01:49,580
but you get the idea that's a little different than what we've seen before,

33
00:01:49,580 --> 00:01:51,640
so I wanted to point that out.

34
00:01:51,640 --> 00:01:56,540
The resetPassword page that we're going to create is very similar

35
00:01:56,540 --> 00:01:59,740
to the password page that we've already created.

36
00:01:59,740 --> 00:02:02,290
This is probably one of the biggest complaints that people

37
00:02:02,290 --> 00:02:06,340
have about JSP pages and HTML in general.

38
00:02:06,340 --> 00:02:11,700
Let's copy that, right‑click on our jsp folder,

39
00:02:11,700 --> 00:02:20,240
and say New, JSP, and call this resetPassword.jsp.

40
00:02:20,240 --> 00:02:31,450
And I'm going to highlight all of that and replace it with the

41
00:02:31,450 --> 00:02:33,790
password JSP that we've already created,

42
00:02:33,790 --> 00:02:36,790
and then we'll just change the few relevant fields

43
00:02:36,790 --> 00:02:40,040
that we need to inside of here.

44
00:02:40,040 --> 00:02:46,980
We have a Password, and it is of type password,

45
00:02:46,980 --> 00:02:52,840
and its name is actually password out of that object.

46
00:02:52,840 --> 00:03:05,140
And then we have the Confirm Password, and its type is also of password,

47
00:03:05,140 --> 00:03:11,840
and its name is matchingPassword.

48
00:03:11,840 --> 00:03:15,760
I went ahead and grabbed the confirmation that we had

49
00:03:15,760 --> 00:03:20,960
from our account‑confirmed JSP page, and I'm going to pace that in here,

50
00:03:20,960 --> 00:03:26,870
that just allows us to go ahead and show a Twitter

51
00:03:26,870 --> 00:03:30,140
Bootstrap alert of successful,

52
00:03:30,140 --> 00:03:31,980
and you can see that Your passwords has been reset

53
00:03:31,980 --> 00:03:34,170
when we redirect back to this page,

54
00:03:34,170 --> 00:03:36,970
it'll look for that parameter and display that green bar,

55
00:03:36,970 --> 00:03:39,620
and you'll see that here in a second when we do our demo.

56
00:03:39,620 --> 00:03:43,190
This page will post back to our PasswordController,

57
00:03:43,190 --> 00:03:46,030
since we just created that GetMapping,

58
00:03:46,030 --> 00:03:48,930
it's going to post back to that same GetMapping because we

59
00:03:48,930 --> 00:03:50,940
don't have a different URL specified,

60
00:03:50,940 --> 00:03:55,040
which is the exact behavior we want it to do.

61
00:03:55,040 --> 00:04:00,340
So let's create a PostMapping method inside of here for the passwordReset,

62
00:04:00,340 --> 00:04:06,930
and it will take a RequestParam of Token and the

63
00:04:06,930 --> 00:04:11,440
ModelAttribute of password associated with that.

64
00:04:11,440 --> 00:04:15,140
Make it where you can see this all on one page.

65
00:04:15,140 --> 00:04:18,770
And this is one of the more complex methods that we

66
00:04:18,770 --> 00:04:20,020
have to create inside of it here,

67
00:04:20,020 --> 00:04:22,880
so let's flush out some of the details inside of here.

68
00:04:22,880 --> 00:04:25,370
The first thing that we want to do is we should match

69
00:04:25,370 --> 00:04:27,520
the password and verify the token,

70
00:04:27,520 --> 00:04:31,430
so let's create a couple of comments in here to stub that out

71
00:04:31,430 --> 00:04:35,340
so we can see the steps that we need to do.

72
00:04:35,340 --> 00:04:38,540
So our password should match, and we'll verify that token,

73
00:04:38,540 --> 00:04:39,980
and to verify that token,

74
00:04:39,980 --> 00:04:43,190
we want to go ahead and grab that out of our database

75
00:04:43,190 --> 00:04:46,780
to see if those two tokens match, and doing so,

76
00:04:46,780 --> 00:04:53,040
we're going to actually inject our PasswordRepository into this controller.

77
00:04:53,040 --> 00:04:59,440
So let's scroll up to the top here, say @Autowired,

78
00:04:59,440 --> 00:05:06,440
and we'll create a private variable, we'll say PasswordRepository,

79
00:05:06,440 --> 00:05:11,210
and we'll choose passwordRepository,

80
00:05:11,210 --> 00:05:14,240
and we're actually going to need the passwordService as well,

81
00:05:14,240 --> 00:05:22,640
since we're already up here, let's just go ahead and inject that as well,

82
00:05:22,640 --> 00:05:28,240
and that is our PasswordService, we'll say passwordService,

83
00:05:28,240 --> 00:05:30,420
and save both of those.

84
00:05:30,420 --> 00:05:35,200
And then we have created the skeleton for this,

85
00:05:35,200 --> 00:05:43,640
but we haven't flushed it out yet, so let's just say ResetToken,

86
00:05:43,640 --> 00:05:54,640
resetToken = passwordRepository.findByToken,

87
00:05:54,640 --> 00:05:56,690
and that's going to take that string token that we

88
00:05:56,690 --> 00:06:00,850
have in our method signature already, and we have the contract for this,

89
00:06:00,850 --> 00:06:04,680
but we haven't created the actual implementation of finding that yet,

90
00:06:04,680 --> 00:06:10,840
so let's go ahead and go into our PasswordRepository and finish that out.

91
00:06:10,840 --> 00:06:15,780
And that is a simple queryForObject,

92
00:06:15,780 --> 00:06:18,910
which we have done in our account repository,

93
00:06:18,910 --> 00:06:20,980
if you don't want to type this all out,

94
00:06:20,980 --> 00:06:29,140
feel free to grab that and change the appropriate pieces there.

95
00:06:29,140 --> 00:06:33,240
So I'm going to import everything we need for this.

96
00:06:33,240 --> 00:06:35,790
And we have our SQLException, resultSets,

97
00:06:35,790 --> 00:06:41,130
and everything else, and this is a simple queryForObject where we grab the email,

98
00:06:41,130 --> 00:06:42,410
username, token,

99
00:06:42,410 --> 00:06:46,820
expiry_date from reset_tokens where the token is equal to the

100
00:06:46,820 --> 00:06:49,340
token we passed in from our URL string,

101
00:06:49,340 --> 00:06:52,260
and that goes through and grabs one object,

102
00:06:52,260 --> 00:06:55,640
and if you have multiple objects here, it's going to throw an exception,

103
00:06:55,640 --> 00:06:57,970
and we should only ever have one object for this,

104
00:06:57,970 --> 00:07:01,880
so it'll map that row out to the email, username,

105
00:07:01,880 --> 00:07:03,200
token, and expiry_date.

106
00:07:03,200 --> 00:07:04,700
So if you do copy that other one over,

107
00:07:04,700 --> 00:07:07,380
make sure you change these fields to match that.

108
00:07:07,380 --> 00:07:10,110
And that will return our token,

109
00:07:10,110 --> 00:07:14,040
which will then go back to our PasswordController.

110
00:07:14,040 --> 00:07:18,340
So, let's go ahead and go back to our PasswordController,

111
00:07:18,340 --> 00:07:22,350
and we'll see that that's now returning our token.

112
00:07:22,350 --> 00:07:25,240
And let's finish out the rest of this implementation.

113
00:07:25,240 --> 00:07:28,940
We want to look to see if that token is still valid.

114
00:07:28,940 --> 00:07:38,040
So we can say if resetToken.getExpiryDate is after the current Date,

115
00:07:38,040 --> 00:07:44,500
and if it's not, we will take our password object,

116
00:07:44,500 --> 00:07:47,980
and we will encode the password that we have,

117
00:07:47,980 --> 00:07:54,940
so we'll say password.setPassword, and we haven't used our encoder yet,

118
00:07:54,940 --> 00:07:59,520
so we need to import the password encoder that we already

119
00:07:59,520 --> 00:08:01,570
have defined inside of our application.

120
00:08:01,570 --> 00:08:07,710
Let's scroll up to the top of our injected resources,

121
00:08:07,710 --> 00:08:19,440
and say @Autowired, and we'll do private PasswordEncoder,

122
00:08:19,440 --> 00:08:24,740
and we'll assign this to a variable named encoder,

123
00:08:24,740 --> 00:08:29,840
and we want to do encoder.Encode,

124
00:08:29,840 --> 00:08:39,440
and we'll use the getter on our password to just say password.getPassword.

125
00:08:39,440 --> 00:08:43,110
Now we should've made sure that those match and all the

126
00:08:43,110 --> 00:08:45,140
other stuff that goes with it up above.

127
00:08:45,140 --> 00:08:49,170
It would become a very complex, long example to do that,

128
00:08:49,170 --> 00:08:51,830
and it's just tedious work, that's Spring MVC stuff,

129
00:08:51,830 --> 00:08:54,740
not necessarily Spring Security.

130
00:08:54,740 --> 00:09:00,440
And we can come down here now, and since they've matched,

131
00:09:00,440 --> 00:09:07,450
and they're not expired with the token, we'll say passwordService.update,

132
00:09:07,450 --> 00:09:23,140
and that will take our password object and our resetToken.getUsername,

133
00:09:23,140 --> 00:09:28,580
and this has the contract there, but we need to implement that actual method,

134
00:09:28,580 --> 00:09:31,640
so let's open up our PasswordServiceImpl.

135
00:09:31,640 --> 00:09:34,980
It's the service tiers where our business logic resides.

136
00:09:34,980 --> 00:09:38,400
We have the opportunity to put some more business logic in here,

137
00:09:38,400 --> 00:09:39,780
but for our example,

138
00:09:39,780 --> 00:09:44,800
we're just going to call passwordRepository.update on this password,

139
00:09:44,800 --> 00:09:46,430
utilizing this username.

140
00:09:46,430 --> 00:09:50,460
We need to finish out the implementation of that JDBC

141
00:09:50,460 --> 00:09:55,040
query in our PasswordRepository,

142
00:09:55,040 --> 00:09:59,900
which we can do here in the actual implementation.

143
00:09:59,900 --> 00:10:08,980
And this is a JdbcTemplate that just uses the UPDATE method to execute a

144
00:10:08,980 --> 00:10:14,630
UPDATE users SET password equal to this password that we're passing in where

145
00:10:14,630 --> 00:10:17,270
the username is equal to this parameter as well.

146
00:10:17,270 --> 00:10:22,140
So we have those two objects that we pass in, the password and the username.

147
00:10:22,140 --> 00:10:26,440
And this is all we need to do to update that table.

148
00:10:26,440 --> 00:10:31,140
We can save this, we'll go back to our Controller,

149
00:10:31,140 --> 00:10:35,190
and finish out this method with the return variables,

150
00:10:35,190 --> 00:10:38,440
and then we're done with this example.

151
00:10:38,440 --> 00:10:44,420
The last line of this if statement is that we want to return a redirect to

152
00:10:44,420 --> 00:10:49,260
the passwordReset page with reset=true as a parameter,

153
00:10:49,260 --> 00:10:54,690
and we set the token=0, and this is just to clear it out of the URL string.

154
00:10:54,690 --> 00:10:58,020
Somebody can't use the back button as easily to go back

155
00:10:58,020 --> 00:11:02,150
in and try and reset that password, which really shouldn't be an issue anyway.

156
00:11:02,150 --> 00:11:05,610
The token would expire, but we set it to true,

157
00:11:05,610 --> 00:11:09,140
and token to 0 just to clean up things a little bit.

158
00:11:09,140 --> 00:11:11,890
And we can throw an else statement on the end of here,

159
00:11:11,890 --> 00:11:18,390
and return a string of tokenExpired.

160
00:11:18,390 --> 00:11:21,390
And we haven't created this page,

161
00:11:21,390 --> 00:11:26,210
but it doesn't require it to be there for our example to run,

162
00:11:26,210 --> 00:11:30,020
but you can have this if you wanted to inside of your application,

163
00:11:30,020 --> 00:11:34,180
so that if their token is expired,

164
00:11:34,180 --> 00:11:40,280
you would show them a nicer error message than just a 404 or a 500 error.

165
00:11:40,280 --> 00:11:44,940
This will enable you to navigate things a little bit cleaner inside your app.

166
00:11:44,940 --> 00:11:49,570
And we're now ready to test that second half of our demo.

167
00:11:49,570 --> 00:11:55,180
So let's restart our server, and that email that we had,

168
00:11:55,180 --> 00:11:57,780
we should be able to just go in there and click on that one,

169
00:11:57,780 --> 00:12:01,720
and it will redirect us to this page, and have us enter a new password,

170
00:12:01,720 --> 00:12:04,890
and save that back to our user interface.

171
00:12:04,890 --> 00:12:10,890
If I open that email back up, if it hasn't been since the expiration date,

172
00:12:10,890 --> 00:12:13,070
which in my case was just a little while ago,

173
00:12:13,070 --> 00:12:16,240
I can click on this URL again,

174
00:12:16,240 --> 00:12:20,340
and it will direct us to the page to get a new password.

175
00:12:20,340 --> 00:12:26,640
I can put in my new password, click Reset Password,

176
00:12:26,640 --> 00:12:30,440
and it will go out, write that to the database,

177
00:12:30,440 --> 00:12:34,990
and give us that nice green bar telling us our password has been reset.

178
00:12:34,990 --> 00:12:37,840
So Let's look at that code again real quick.

179
00:12:37,840 --> 00:12:45,610
Our href that we have on our login page will request a getPasswordReset page,

180
00:12:45,610 --> 00:12:49,780
which is redirected to our UI from our GetMapping

181
00:12:49,780 --> 00:12:54,300
here that just returns password, that page will gather our information,

182
00:12:54,300 --> 00:12:58,710
we'll go ahead and click post back to here to send an email to reset,

183
00:12:58,710 --> 00:13:03,540
which will fire off an onPasswordResetEvent.

184
00:13:03,540 --> 00:13:12,040
The onPasswordResetEvent will go through and just store a URL and a password,

185
00:13:12,040 --> 00:13:15,050
and fire that off on the event model that's already

186
00:13:15,050 --> 00:13:17,440
available to us through our Spring application,

187
00:13:17,440 --> 00:13:21,270
which is listened by this PasswordListener.

188
00:13:21,270 --> 00:13:24,400
The PasswordListener does a little bit of heavy lifting in

189
00:13:24,400 --> 00:13:26,670
the sense that it creates a resetToken,

190
00:13:26,670 --> 00:13:29,860
which essentially goes through our service tier and

191
00:13:29,860 --> 00:13:34,840
eventually to our PasswordRepositoryImpl,

192
00:13:34,840 --> 00:13:42,110
which is our saveToken method inside of here that just inserts that

193
00:13:42,110 --> 00:13:45,240
into our reset_tokens table with our username,

194
00:13:45,240 --> 00:13:50,540
email, the actual token, and an expiration date on it.

195
00:13:50,540 --> 00:13:53,980
When that is done executing,

196
00:13:53,980 --> 00:13:59,160
that PasswordListener will send an email message out through the

197
00:13:59,160 --> 00:14:03,240
configured email server that we enabled in the last module,

198
00:14:03,240 --> 00:14:04,860
and that will go to your inbox.

199
00:14:04,860 --> 00:14:08,840
When that returns, we go back to our Controller,

200
00:14:08,840 --> 00:14:13,310
which our PasswordController will then take this

201
00:14:13,310 --> 00:14:16,980
passwordReset or getNewPassword page, and display that,

202
00:14:16,980 --> 00:14:19,920
and it backs it with the password model object that we have

203
00:14:19,920 --> 00:14:23,630
and also assigns that token to that object.

204
00:14:23,630 --> 00:14:27,040
When we have gathered the new password from them,

205
00:14:27,040 --> 00:14:33,240
we post back to save that new password, and it will verify that token,

206
00:14:33,240 --> 00:14:39,340
and then encode the new password, and update that through our PasswordService,

207
00:14:39,340 --> 00:14:46,270
which is very simply a call to the PasswordRepository eventually that

208
00:14:46,270 --> 00:14:51,040
will update our users table with that new password.

209
00:14:51,040 --> 00:14:54,340
And then when it's all done,

210
00:14:54,340 --> 00:14:57,550
it will redirect us back to that passwordReset page

211
00:14:57,550 --> 00:15:00,020
with that reset=true and token=0,

212
00:15:00,020 --> 00:15:02,810
and that just makes it so we can display that nice UI

213
00:15:02,810 --> 00:15:04,640
message in the green box on our page.

214
00:15:04,640 --> 00:15:07,460
So, when you break it all down, the steps aren't that complicated,

215
00:15:07,460 --> 00:15:09,530
but it is done asynchronously,

216
00:15:09,530 --> 00:15:13,650
which is a little bit confusing to you sometimes and can add

217
00:15:13,650 --> 00:15:17,280
another degree of difficulty in there, but it's disconnected,

218
00:15:17,280 --> 00:15:18,860
and safe, and secure,

219
00:15:18,860 --> 00:15:23,510
and it has to be executed to the registered password on file.

220
00:15:23,510 --> 00:15:24,160
So,

221
00:15:24,160 --> 00:15:31,000
we now have all of those pieces and a working example to reset our password inside of our application.

