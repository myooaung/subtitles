WEBVTT
1
00:00:01.240 --> 00:00:05.850
Let's exit full screen on our index.jsp and open up our src,

2
00:00:05.850 --> 00:00:10.570
main, java, com.pluralsight.conference controller package,

3
00:00:10.570 --> 00:00:15.140
and inside of here our Registrationcontroller.

4
00:00:15.140 --> 00:00:15.570
Now,

5
00:00:15.570 --> 00:00:20.850
we've already made our PostMapping secured by adding the

6
00:00:20.850 --> 00:00:24.750
@Secured annotation for ROLE_USER and showed how that all

7
00:00:24.750 --> 00:00:26.410
came together in the last module,

8
00:00:26.410 --> 00:00:29.270
but what we don't have is the current logged in user,

9
00:00:29.270 --> 00:00:31.200
and there's a lot of reasons why we would want that.

10
00:00:31.200 --> 00:00:34.830
We could use it for auditing, for displaying simple logging.

11
00:00:34.830 --> 00:00:38.290
Lots of reasons why we'd want that inside of our code.

12
00:00:38.290 --> 00:00:40.690
It's actually really easy to add.

13
00:00:40.690 --> 00:00:43.210
And this is a method that is called by Spring.

14
00:00:43.210 --> 00:00:44.690
We don't call this directly.

15
00:00:44.690 --> 00:00:48.830
We call a mapping that goes through the Spring MVC framework and

16
00:00:48.830 --> 00:00:52.720
is intercepted by the URL post to registration,

17
00:00:52.720 --> 00:00:55.290
as you can see in the PostMapping we have here.

18
00:00:55.290 --> 00:00:56.660
Well,

19
00:00:56.660 --> 00:01:00.910
we're going to go through and just add another line on the end of

20
00:01:00.910 --> 00:01:06.030
this method signature for the authentication object.

21
00:01:06.030 --> 00:01:06.500
So,

22
00:01:06.500 --> 00:01:08.940
I'm actually going to take it down to a new line so that

23
00:01:08.940 --> 00:01:10.370
you can see it easier on our screen.

24
00:01:10.370 --> 00:01:21.190
And we'll just say Authentication, and we'll choose the Spring Security object,

25
00:01:21.190 --> 00:01:28.150
and we'll store that in a variable named auth and save that.

26
00:01:28.150 --> 00:01:34.040
And that's all we actually have to do to inject that into this method call.

27
00:01:34.040 --> 00:01:46.140
From here, we can do a simple System.out.println and say auth.getPrincipal.

28
00:01:46.140 --> 00:01:49.060
And that's the name of the current logged in user.

29
00:01:49.060 --> 00:01:50.460
If you want to make that a little bit more user

30
00:01:50.460 --> 00:01:52.540
friendly for the System.out.println,

31
00:01:52.540 --> 00:01:58.770
we can give ourselves some quotes inside of here and say that

32
00:01:58.770 --> 00:02:02.750
the Auth is equal to this and save that.

33
00:02:02.750 --> 00:02:06.280
Now when we do a post to addRegistration,

34
00:02:06.280 --> 00:02:09.070
it'll have that current authenticated user inside of here,

35
00:02:09.070 --> 00:02:10.120
and we can grab the principal.

36
00:02:10.120 --> 00:02:13.940
We could also add more details to our custom

37
00:02:13.940 --> 00:02:16.010
ConferenceUserDetails object that we created,

38
00:02:16.010 --> 00:02:19.750
and those would all be available here when we call the getDetails object on it.

39
00:02:19.750 --> 00:02:21.940
But let's restart our server and see what this one does.

40
00:02:21.940 --> 00:02:26.560
Back in our Conference App, since we restarted our server,

41
00:02:26.560 --> 00:02:28.240
we're not logged in again.

42
00:02:28.240 --> 00:02:35.240
We can click our Login link, put in our username and password,

43
00:02:35.240 --> 00:02:36.850
and we're back logged in.

44
00:02:36.850 --> 00:02:39.440
Let's click Add Registration.

45
00:02:39.440 --> 00:02:42.340
And if we add a registration inside of here,

46
00:02:42.340 --> 00:02:45.830
it will go through and now post back to that server and

47
00:02:45.830 --> 00:02:47.770
grab that current logged in user.

48
00:02:47.770 --> 00:02:51.360
Now we don't have a nice helper method on here that goes ahead and

49
00:02:51.360 --> 00:02:54.350
displays that your registration was saved successfully,

50
00:02:54.350 --> 00:02:55.260
but it was.

51
00:02:55.260 --> 00:02:57.670
Let's go back over to our IDE and look at that

52
00:02:57.670 --> 00:03:00.840
System.out.println that we put in there,

53
00:03:00.840 --> 00:03:02.980
and you can see right at the bottom of our log file

54
00:03:02.980 --> 00:03:05.220
that we have Registration: asdf,

55
00:03:05.220 --> 00:03:08.930
and that was the registration that we put in there.

56
00:03:08.930 --> 00:03:14.390
But right above that, we have our Auth, and we have the username bryan,

57
00:03:14.390 --> 00:03:15.590
our password is protected.

58
00:03:15.590 --> 00:03:20.940
All of the information's stored in that principal object.

59
00:03:20.940 --> 00:03:23.480
So you can dive further into that object.

60
00:03:23.480 --> 00:03:26.560
This is just calling the toString on that principal object.

61
00:03:26.560 --> 00:03:28.710
But you see all the fields that you have available to

62
00:03:28.710 --> 00:03:31.040
you to call on that individual.

63
00:03:31.040 --> 00:03:33.740
We can even see the roles that they have associated with them.

64
00:03:33.740 --> 00:03:37.680
So really valuable for us to be able to do things in a secure

65
00:03:37.680 --> 00:03:42.180
fashion and start filtering data or even pass in for audit columns

66
00:03:42.180 --> 00:03:44.370
in our database or other things like that.

67
00:03:44.370 --> 00:03:48.090
But note that this is useful to us on methods called by Spring.

68
00:03:48.090 --> 00:03:52.030
We can always use the old method of using the static context

69
00:03:52.030 --> 00:03:54.680
to grab the current logged in user that's been around for

70
00:03:54.680 --> 00:03:56.100
Spring Security since day one,

71
00:03:56.100 --> 00:04:00.010
but this is a really nice feature to pass that through your objects,

72
00:04:00.010 --> 00:04:04.420
is you go through all of your tiers on anything that's called by Spring.

73
00:04:04.420 --> 00:04:06.240
Any method called by Spring,

74
00:04:06.240 --> 00:04:15.000
you can auto inject that authentication object into that method by just adding it to the signature line.

