1
00:00:00,940 --> 00:00:02,800
Picking up where we left off before,

2
00:00:02,800 --> 00:00:08,770
let's create our ConferenceUserDetailsContextMapper,

3
00:00:08,770 --> 00:00:10,900
and we're going to do this in a new package.

4
00:00:10,900 --> 00:00:14,540
So I'm going to right‑click on com.pluralsight.conference,

5
00:00:14,540 --> 00:00:18,400
and say New, Java Class, then inside of here,

6
00:00:18,400 --> 00:00:31,830
we're going to say service.ConferenceUserDetailsContextMapper.

7
00:00:31,830 --> 00:00:34,740
We want to make sure we get that CamelCase,

8
00:00:34,740 --> 00:00:36,650
hit Enter,

9
00:00:36,650 --> 00:00:40,390
and this is going to implement the

10
00:00:40,390 --> 00:00:45,510
UserDetailsContextMapper interface.So we'll say implements,

11
00:00:45,510 --> 00:00:49,730
the UserDetailsContextMapper,

12
00:00:49,730 --> 00:00:58,740
and this is going to give us an error because we need to implement some methods,

13
00:00:58,740 --> 00:01:00,380
so we'll click OK.

14
00:01:00,380 --> 00:01:05,690
And really, the only one that it really cares about is this first one.

15
00:01:05,690 --> 00:01:08,860
The second one is if we're going the other direction,

16
00:01:08,860 --> 00:01:11,860
and we don't care about that for the code that we're writing,

17
00:01:11,860 --> 00:01:15,940
so we're going to be working in this one here.

18
00:01:15,940 --> 00:01:20,740
Now to do this, we need to do a handful of things.

19
00:01:20,740 --> 00:01:25,560
First, we're going to start with autowiring in a data source.

20
00:01:25,560 --> 00:01:34,920
So we'll say @Autowired, and we'll put in here private DataSource,

21
00:01:34,920 --> 00:01:43,340
and we want to choose the javax.sql package,

22
00:01:43,340 --> 00:01:45,840
and we'll save this.

23
00:01:45,840 --> 00:01:52,260
The next thing that we want to do is create a SQL statement for

24
00:01:52,260 --> 00:01:56,130
retrieving our username out of the database,

25
00:01:56,130 --> 00:02:07,240
and we're going to do that by saying private static final String,

26
00:02:07,240 --> 00:02:18,540
and we'll call this loadUserByUsernameQuery.

27
00:02:18,540 --> 00:02:21,590
You could call this SQL, it doesn't have to be named this,

28
00:02:21,590 --> 00:02:27,140
or whatever else you want, and we'll have a select username,

29
00:02:27,140 --> 00:02:30,540
and we're going to name all the columns out,

30
00:02:30,540 --> 00:02:37,960
password, enabled, and the column that we just added,

31
00:02:37,960 --> 00:02:56,800
nickname from users where username =?, and we'll put

32
00:02:56,800 --> 00:02:58,540
a semicolon on the end of there.

33
00:02:58,540 --> 00:03:03,790
Now let's make this break over to where you can see it easier all in one line.

34
00:03:03,790 --> 00:03:07,840
We'll save that there.

35
00:03:07,840 --> 00:03:12,320
This is the statement we're going to use in a JdbcTemplate

36
00:03:12,320 --> 00:03:14,740
that we're going to create here in just a second to load

37
00:03:14,740 --> 00:03:17,230
those users from the database.

38
00:03:17,230 --> 00:03:22,740
So inside of this mapUserFromContext method,

39
00:03:22,740 --> 00:03:30,030
we're going thio create a JdbcTemplate,

40
00:03:30,030 --> 00:03:36,440
and we'll call this just JdbcTemplate = new

41
00:03:36,440 --> 00:03:42,540
JdbcTemplate, and we'll pass in the dataSource.

42
00:03:42,540 --> 00:03:48,030
You could, if you wanted to, create the JdbcTemplate as a being and share

43
00:03:48,030 --> 00:03:52,700
that being inside of here. That is a great approach as well. Either works

44
00:03:52,700 --> 00:03:58,320
well. Now because we're going to create an anonymous inner class in here,

45
00:03:58,320 --> 00:04:01,000
we're going to create this instance as final.

46
00:04:01,000 --> 00:04:09,970
So we'll say final ConferenceUserDetails, and we'll

47
00:04:09,970 --> 00:04:14,640
just call this the userDetails object.

48
00:04:14,640 --> 00:04:24,750
We'll say that is = new ConferenceUserDetails object,

49
00:04:24,750 --> 00:04:29,040
and it's going to want all those parameters that we just created passed in.

50
00:04:29,040 --> 00:04:32,860
Now, this is going to seem a little bit odd to start with,

51
00:04:32,860 --> 00:04:35,110
and I'll walk you through what we're doing here.

52
00:04:35,110 --> 00:04:49,040
We're going to put in here this dirContextOperations object .getStringAttribute,

53
00:04:49,040 --> 00:04:53,840
and that stringAttribute is uid, and that's the user ID,

54
00:04:53,840 --> 00:04:56,230
and you probably don't remember it,

55
00:04:56,230 --> 00:05:01,940
but that's what we created inside of our testserver.ldf file.

56
00:05:01,940 --> 00:05:05,510
Now the next one we want to put in here is the password,

57
00:05:05,510 --> 00:05:10,790
and I am actually going to put the string fake inside of here because we don't

58
00:05:10,790 --> 00:05:15,560
want to be passing around the password inside of our application for other

59
00:05:15,560 --> 00:05:18,770
people to grab and be able to hack our session with.

60
00:05:18,770 --> 00:05:20,460
So, once they're authenticated,

61
00:05:20,460 --> 00:05:24,190
we have a token, we don't need to pass that password around anymore,

62
00:05:24,190 --> 00:05:27,720
so I'm actually going to just put that placeholder of fake in there.

63
00:05:27,720 --> 00:05:30,340
If we needed it later, we could come back through here and edit it,

64
00:05:30,340 --> 00:05:32,140
but not going to for now.

65
00:05:32,140 --> 00:05:34,540
And then the last thing I'm going to put in here is an empty

66
00:05:34,540 --> 00:05:36,990
granted authorities list because we're not using it right

67
00:05:36,990 --> 00:05:38,250
now, and we're going to later.

68
00:05:38,250 --> 00:05:51,340
So we'll say Collections.EMPTY_LIST. And now we have our

69
00:05:51,340 --> 00:05:56,070
ConferenceUserDetails object, this variable to store the user details,

70
00:05:56,070 --> 00:05:59,200
and its final, so we can access it in this next piece.

71
00:05:59,200 --> 00:06:02,820
We're going to use that JdbcTemplate that we just created,

72
00:06:02,820 --> 00:06:06,770
and I'm actually going to paste in this line because it's a little error prone

73
00:06:06,770 --> 00:06:11,880
for type errors. Inside of here, we have our JdbcTemplate,

74
00:06:11,880 --> 00:06:15,140
and we're going to do a query for object and pass in that

75
00:06:15,140 --> 00:06:19,340
loadUserByUsernameQuery string that we just created up above.

76
00:06:19,340 --> 00:06:23,430
We're going to do an anonymous inner class using the new RowMapper

77
00:06:23,430 --> 00:06:28,260
ConferenceUserDetails, and that's going to require us to override this

78
00:06:28,260 --> 00:06:32,990
mapRow method that we have here, and you can see inside of that it executes

79
00:06:32,990 --> 00:06:39,760
that query, and we grab that nickname column out of there, and assign it to

80
00:06:39,760 --> 00:06:42,940
our userDetails object, and return that.

81
00:06:42,940 --> 00:06:44,540
Then inside of here,

82
00:06:44,540 --> 00:06:51,350
we can finally return our userDetails object back to the UI. So, a

83
00:06:51,350 --> 00:06:56,110
little bit of a hairy piece here, but we have this all defined, we

84
00:06:56,110 --> 00:06:58,830
want to do one last thing inside of here,

85
00:06:58,830 --> 00:07:01,710
and that is define this as a service.

86
00:07:01,710 --> 00:07:05,040
We haven't done that before in this class.

87
00:07:05,040 --> 00:07:07,600
So we're going to say @Service,

88
00:07:07,600 --> 00:07:11,390
this being where object will now be registered

89
00:07:11,390 --> 00:07:14,370
inside of Spring as a service object,

90
00:07:14,370 --> 00:07:16,820
we can go ahead and grab this and use it anywhere inside

91
00:07:16,820 --> 00:07:20,440
of Spring as a fully‑registered being.

92
00:07:20,440 --> 00:07:25,610
Now, a lot of times you'll also see @Transactional here, we don't need

93
00:07:25,610 --> 00:07:29,120
to do this because one, we're just doing reads, and everything is

94
00:07:29,120 --> 00:07:33,850
contained in the site, the scope of this one method. We're almost

95
00:07:33,850 --> 00:07:38,970
ready to use our newly‑created mapper, we just need to go ahead and

96
00:07:38,970 --> 00:07:47,000
configure our conference security object to utilize this new mapper that we've created.

