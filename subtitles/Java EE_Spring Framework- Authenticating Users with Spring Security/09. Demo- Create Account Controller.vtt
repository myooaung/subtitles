WEBVTT
1
00:00:00.340 --> 00:00:02.940
Our controller class we're going to actually put in

2
00:00:02.940 --> 00:00:05.230
the controller package that we have.

3
00:00:05.230 --> 00:00:09.240
That's under com.pluralsight.conference/controller.

4
00:00:09.240 --> 00:00:13.040
I'm going to right‑click and say New, Java Class.

5
00:00:13.040 --> 00:00:18.740
And we'll call this AccountController.

6
00:00:18.740 --> 00:00:24.540
I'm going to first annotate this as a @Controller.

7
00:00:24.540 --> 00:00:26.340
Then inside of here,

8
00:00:26.340 --> 00:00:31.950
I'm going to paste in the method signature that I already have created.

9
00:00:31.950 --> 00:00:33.460
And that is a @GetMapping.

10
00:00:33.460 --> 00:00:39.740
We'll import both of those.

11
00:00:39.740 --> 00:00:40.840
And you can see here,

12
00:00:40.840 --> 00:00:46.640
what it will do is there is a @GetMapping associated to the URL account.

13
00:00:46.640 --> 00:00:53.390
And this is just going to return back the JSP or the signature of account,

14
00:00:53.390 --> 00:00:59.100
which will have a view resolver that will return the account.jsp page.

15
00:00:59.100 --> 00:01:03.460
Now, one thing we don't have in here yet, though, is the Account class.

16
00:01:03.460 --> 00:01:04.980
So let's create that now.

17
00:01:04.980 --> 00:01:10.680
We want to right‑click on our model and say New, Java Class.

18
00:01:10.680 --> 00:01:16.140
We'll call this Account, and hit Enter.

19
00:01:16.140 --> 00:01:20.740
We want to add our member variables inside of here.

20
00:01:20.740 --> 00:01:29.500
And I'm going to add in the Java validation for these two,

21
00:01:29.500 --> 00:01:37.990
actually, validate our inputs as we add them into our project.

22
00:01:37.990 --> 00:01:41.190
Now, we're not going to do anything with the validation on here.

23
00:01:41.190 --> 00:01:43.740
You could honestly omit this if you want to,

24
00:01:43.740 --> 00:01:49.010
but I'm trying to show you all the pieces of this being a full‑fledged example.

25
00:01:49.010 --> 00:01:52.240
So we have private String username.

26
00:01:52.240 --> 00:01:55.940
And we can actually copy this and paste this because it's going to

27
00:01:55.940 --> 00:02:06.640
be the same thing for firstName and lastName.

28
00:02:06.640 --> 00:02:15.840
And then we're going to have the same for password and matchingPassword.

29
00:02:15.840 --> 00:02:24.140
We'll actually just put a private String matchingPassword

30
00:02:24.140 --> 00:02:26.880
that both of those will get sent into.

31
00:02:26.880 --> 00:02:31.340
And then finally, we'll have the email.

32
00:02:31.340 --> 00:02:33.980
Now there are a lot of different ways to do this,

33
00:02:33.980 --> 00:02:37.660
and this is not a topic to cover in the Security class,

34
00:02:37.660 --> 00:02:42.190
but rather the Spring MVC course that I have or some other resources that

35
00:02:42.190 --> 00:02:46.200
I've made available through the Spring Fundamentals as well.

36
00:02:46.200 --> 00:02:49.740
You can create your own annotations to do this stuff.

37
00:02:49.740 --> 00:02:52.440
There's a bunch of different ways to apply some logic to

38
00:02:52.440 --> 00:02:56.120
this for how your class gets validated.

39
00:02:56.120 --> 00:02:58.940
But this will work for the example that we want.

40
00:02:58.940 --> 00:03:02.930
The last step we want to do in here is generate our getters and setters.

41
00:03:02.930 --> 00:03:08.080
So we'll, right‑click and say Generate, Getter and Setter.

42
00:03:08.080 --> 00:03:12.540
We can choose all of those, and click OK.

43
00:03:12.540 --> 00:03:14.320
Save this class.

44
00:03:14.320 --> 00:03:21.240
If we go back to AccounttController, we can now import our Account class.

45
00:03:21.240 --> 00:03:24.830
Now this will display our account page for us,

46
00:03:24.830 --> 00:03:29.030
but we do have to do one thing to our security configuration.

47
00:03:29.030 --> 00:03:32.640
So let's go back to our ConferenceSecurityConfig,

48
00:03:32.640 --> 00:03:43.860
and we want to add a permitAll like we had for login for account.

49
00:03:43.860 --> 00:03:47.140
We want everybody to be able to create the account.

50
00:03:47.140 --> 00:03:49.240
So let's save that.

51
00:03:49.240 --> 00:03:52.100
Everything is set up now to run our application.

52
00:03:52.100 --> 00:03:56.350
We can fire it up and ask for the account page and it will display it.

53
00:03:56.350 --> 00:03:58.580
We aren't doing anything with the POST yet,

54
00:03:58.580 --> 00:04:06.530
but let's start this to see what it does.

55
00:04:06.530 --> 00:04:14.940
Now inside of our application, if we navigate to account,

56
00:04:14.940 --> 00:04:19.090
it will redirect us to our account page we've created.

57
00:04:19.090 --> 00:04:22.750
If we fill out this information and hit Submit,

58
00:04:22.750 --> 00:04:25.710
there is not a POST binding for it to go back to.

59
00:04:25.710 --> 00:04:28.250
So it's not going to do anything just yet,

60
00:04:28.250 --> 00:04:32.810
but we've got all the pieces set up for it to authenticate

61
00:04:32.810 --> 00:04:38.340
the call and allow us to pass through as anonymous and

62
00:04:38.340 --> 00:04:46.000
direct us to this controller, which will then return this JSP page. Let's add that @PostMapping on the back end now.

