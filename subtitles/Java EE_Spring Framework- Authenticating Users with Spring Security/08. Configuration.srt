1
00:00:00,940 --> 00:00:04,970
A major change that was just beginning in the previous release of this

2
00:00:04,970 --> 00:00:09,550
course was the migration from XML in our application.

3
00:00:09,550 --> 00:00:13,280
It started first with not having XML in your Spring code,

4
00:00:13,280 --> 00:00:16,210
and then other standards pushed for it as well.

5
00:00:16,210 --> 00:00:18,820
More recent serverless specifications have even

6
00:00:18,820 --> 00:00:21,940
called for not having it a web.xml.

7
00:00:21,940 --> 00:00:26,300
XML is often thought to be more complicated and at a minimum is more

8
00:00:26,300 --> 00:00:29,980
error prone for copy and paste errors. Not using XML,

9
00:00:29,980 --> 00:00:33,300
though, can be a little bit black box feeling, and what I mean by that is,

10
00:00:33,300 --> 00:00:36,970
if you start using it but do not understand what's going on behind the scenes,

11
00:00:36,970 --> 00:00:38,640
it can be a little confusing.

12
00:00:38,640 --> 00:00:41,660
So this often leaves developers confused about how their

13
00:00:41,660 --> 00:00:43,930
application is working and, furthermore,

14
00:00:43,930 --> 00:00:47,740
left wondering what to do when something breaks.

15
00:00:47,740 --> 00:00:50,280
Since this is an update to an existing course,

16
00:00:50,280 --> 00:00:53,870
I wanted to show you the old security‑config.xml,

17
00:00:53,870 --> 00:00:55,870
and if you go look at other examples,

18
00:00:55,870 --> 00:01:00,440
you may see XML configuration code that was written this way,

19
00:01:00,440 --> 00:01:04,270
and so you'll see we had an authentication‑manager and a ‑provider and a

20
00:01:04,270 --> 00:01:08,060
user‑service inside of here, and the username is bryan, and the password is

21
00:01:08,060 --> 00:01:12,330
secret. And I have the authorities or roles inside my application of a

22
00:01:12,330 --> 00:01:19,850
ROLE_USER. That same thing can easily be written in Java code now. Here you

23
00:01:19,850 --> 00:01:26,020
can see we created a user with the DefaultPasswordEncoder scheme. We added

24
00:01:26,020 --> 00:01:31,490
the username "user" to it and the password "password" to it and the roles

25
00:01:31,490 --> 00:01:33,960
of "USER", and we build this object.

26
00:01:33,960 --> 00:01:37,210
So it's a standard builder pattern if you're at all familiar with

27
00:01:37,210 --> 00:01:39,730
that. Now that we've shown you a couple of techniques,

28
00:01:39,730 --> 00:01:46,000
let's go write this code into our application so you can now see how to utilize this.

