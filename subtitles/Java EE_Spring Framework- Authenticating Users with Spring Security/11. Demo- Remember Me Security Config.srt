1
00:00:01,240 --> 00:00:06,090
Inside of our ConferenceSecurityConfig in the previous demos,

2
00:00:06,090 --> 00:00:13,520
I had you space out from your antMatchers anyRequest.authenticated and the

3
00:00:13,520 --> 00:00:18,470
next section which starts off with the .and method builder call to give

4
00:00:18,470 --> 00:00:21,440
yourself some logical space and breaking those up.

5
00:00:21,440 --> 00:00:22,860
I'm going to go ahead and do that again.

6
00:00:22,860 --> 00:00:26,870
I'm going to go in between that last line and that semicolon and

7
00:00:26,870 --> 00:00:33,980
give myself a little extra space here and create another .and using

8
00:00:33,980 --> 00:00:36,510
the builder and another line below that.

9
00:00:36,510 --> 00:00:40,740
And inside of here, I want to say .rememberMe,

10
00:00:40,740 --> 00:00:45,960
and this will start building out the Remember Me services.

11
00:00:45,960 --> 00:00:48,290
I'm going to do another line below that,

12
00:00:48,290 --> 00:00:52,140
and this is where we'll pass in that key.

13
00:00:52,140 --> 00:01:00,540
And our key is going to be, for my example, the superSecretKey.

14
00:01:00,540 --> 00:01:03,440
You can change that to something unique to your organization.

15
00:01:03,440 --> 00:01:07,140
We have one more line inside of here, and this one, as we type it in,

16
00:01:07,140 --> 00:01:10,610
it is going to break because we're going to have to define a method down below.

17
00:01:10,610 --> 00:01:12,590
So we're going to say tokenRepository,

18
00:01:12,590 --> 00:01:15,850
and that is going to call the method tokenRepository,

19
00:01:15,850 --> 00:01:18,330
and this doesn't exist yet.

20
00:01:18,330 --> 00:01:22,470
We're going to define this down below inside of our code.

21
00:01:22,470 --> 00:01:24,730
So it'll give us an error right now.

22
00:01:24,730 --> 00:01:30,820
I'm just going to go below that method and add a new bean.

23
00:01:30,820 --> 00:01:36,670
So we're going to say @Bean, and this is a public bean that is going to

24
00:01:36,670 --> 00:01:44,540
return an instance of a PersistentTokenRepository.

25
00:01:44,540 --> 00:01:46,080
And for the signature,

26
00:01:46,080 --> 00:01:48,860
we're going to match that name that we have up above there of

27
00:01:48,860 --> 00:01:56,140
tokenRepository, and it takes no arguments in its method signature.

28
00:01:56,140 --> 00:02:02,460
And this is an instance of a JdbcTokenRepositoryImpl,

29
00:02:02,460 --> 00:02:08,600
and we can just call this token.

30
00:02:08,600 --> 00:02:16,340
This will be a new JdbcTokenRepositoryImpl.

31
00:02:16,340 --> 00:02:24,000
And on our token, we want to set the data source.

32
00:02:24,000 --> 00:02:28,750
And we have already defined a data source inside of this class,

33
00:02:28,750 --> 00:02:33,620
so we'll say dataSource and then return that instance of our token.

34
00:02:33,620 --> 00:02:36,800
So we'll say‑‑‑ It's really not the token itself.

35
00:02:36,800 --> 00:02:40,880
It's the implementation of that class.

36
00:02:40,880 --> 00:02:45,710
And that class implements the PersistentTokenRepository interface.

37
00:02:45,710 --> 00:02:50,330
So now we have defined our tokenRepository, and we've

38
00:02:50,330 --> 00:02:53,940
configured our Remember Me services.

39
00:02:53,940 --> 00:02:58,070
But there's one last step we need to add a database table that

40
00:02:58,070 --> 00:03:05,000
this JdbcTokenRepositoryImpltalks to on the back end, and then we'll be able to run our demo.

