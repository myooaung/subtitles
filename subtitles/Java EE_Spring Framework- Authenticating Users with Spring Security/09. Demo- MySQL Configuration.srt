1
00:00:00,940 --> 00:00:05,270
Since this is a new schema, I'm going to have to create a new connection to it.

2
00:00:05,270 --> 00:00:09,840
So, opening up my MySQL Workbench, I'm going to click the plus sign,

3
00:00:09,840 --> 00:00:16,600
and I'm going to give this connection name just conference, and localhost

4
00:00:16,600 --> 00:00:23,600
3306. It's going to ask me for the password is we go, so we'll click OK. And

5
00:00:23,600 --> 00:00:28,990
we have our basic schema set up in front of us here, so now I can insert a

6
00:00:28,990 --> 00:00:31,540
couple of records into the database.

7
00:00:31,540 --> 00:00:36,680
I'm going to right‑click on conference_security and say set as default

8
00:00:36,680 --> 00:00:40,780
schema, and that way I don't have to prepend any of my statements with

9
00:00:40,780 --> 00:00:43,330
anything saying put it in this schema.

10
00:00:43,330 --> 00:00:46,430
So we're connected to that database and now have this set as the default

11
00:00:46,430 --> 00:00:51,770
schema. Let's start off by creating a table named Users.

12
00:00:51,770 --> 00:00:57,010
It's going to have a username and a password and an enabled column. And the

13
00:00:57,010 --> 00:01:04,070
primary key will be username. I'm going to execute this, and we can see by the

14
00:01:04,070 --> 00:01:07,640
green output at the bottom that it was successful.

15
00:01:07,640 --> 00:01:15,740
The next thing I'm going to do is create the authorities table,

16
00:01:15,740 --> 00:01:20,550
and I can highlight that one statement and execute it, and you

17
00:01:20,550 --> 00:01:22,400
can see that it was successful.

18
00:01:22,400 --> 00:01:30,640
Now I'm going to create an index between those two.

19
00:01:30,640 --> 00:01:32,290
If I highlight that same thing,

20
00:01:32,290 --> 00:01:36,820
I can execute that one statement, and now is where it gets tricky.

21
00:01:36,820 --> 00:01:43,080
I need to insert a user and a role inside the table. And I'm going to

22
00:01:43,080 --> 00:01:45,580
grab both of those statements and paste them in here, but I'm going to

23
00:01:45,580 --> 00:01:52,240
show you how I got one of those values.

24
00:01:52,240 --> 00:01:58,770
You'll notice that we have the values bryan and this weird long string that

25
00:01:58,770 --> 00:02:04,770
is my password, and that is the encoded version of pass.

26
00:02:04,770 --> 00:02:09,750
Let me show you how I got that. Switching back to the IDE, if I exit

27
00:02:09,750 --> 00:02:16,500
full screen and I go to src, main, test, java,

28
00:02:16,500 --> 00:02:20,140
com.pluralsight.conference, and open up this

29
00:02:20,140 --> 00:02:25,520
ConferenceApplicationTest, I can auto wire a bean inside of here

30
00:02:25,520 --> 00:02:30,040
because this class is already annotated as a spring boot test.

31
00:02:30,040 --> 00:02:33,650
So we want to auto wire in that bean we created

32
00:02:33,650 --> 00:02:38,120
before, which was the PasswordEncoder.

33
00:02:38,120 --> 00:02:44,500
I'm just going to call this encoder and save that. And then inside of

34
00:02:44,500 --> 00:02:53,240
our contextLoads, I can do a real simple System.out.println. There

35
00:02:53,240 --> 00:02:54,760
are much better ways to go about this,

36
00:02:54,760 --> 00:02:59,470
but this will work for what we want to do, and we'll say encoder.encode.

37
00:02:59,470 --> 00:03:04,940
And if you remember, we used that string of pass,

38
00:03:04,940 --> 00:03:11,600
and we can close off that method and just simply print it out.

39
00:03:11,600 --> 00:03:16,540
So we'll save this, right‑click and run it, say run

40
00:03:16,540 --> 00:03:21,340
contextLoads, and when it scrolls off the screen,

41
00:03:21,340 --> 00:03:24,840
you'll see it load up spring, and we'll come back to

42
00:03:24,840 --> 00:03:26,630
the statement at the very bottom.

43
00:03:26,630 --> 00:03:30,140
You see it dumped it out there for a second, it was really quick.

44
00:03:30,140 --> 00:03:37,070
This string right here is pass encoded using our password encoded.

45
00:03:37,070 --> 00:03:41,240
So that's literally that character sequence that we have

46
00:03:41,240 --> 00:03:45,300
encoded using our password encoded bean that we had defined

47
00:03:45,300 --> 00:03:47,100
in our ConferenceSecurityConfig.

48
00:03:47,100 --> 00:03:49,760
If we go to the bottom of our ConferenceSecurityConfig,

49
00:03:49,760 --> 00:03:52,180
you see the bean that we have created here, we're just using

50
00:03:52,180 --> 00:03:55,500
that BCryptPasswordEncoder to encode that.

51
00:03:55,500 --> 00:03:57,720
So if your password is not pass,

52
00:03:57,720 --> 00:04:00,910
you've done something else, you're going to want to go to that test and put in

53
00:04:00,910 --> 00:04:06,060
whatever your password is in there and run that test to get that value out,

54
00:04:06,060 --> 00:04:10,800
and then go back over to MySQL and inject that value in there because your

55
00:04:10,800 --> 00:04:14,050
statements will check encrypted passwords,

56
00:04:14,050 --> 00:04:15,400
not cleartext passwords.

57
00:04:15,400 --> 00:04:19,650
It never decodes them, it only uses them in an encoded fashion.

58
00:04:19,650 --> 00:04:22,110
Now, back over to our MySQL Workbench.

59
00:04:22,110 --> 00:04:25,480
You can go ahead and paste in whatever your password is here.

60
00:04:25,480 --> 00:04:30,150
I've already done that to mine, and you can execute those two statements.

61
00:04:30,150 --> 00:04:33,480
And when you're all done with that, you can run a select* from users,

62
00:04:33,480 --> 00:04:34,660
which I've already done here,

63
00:04:34,660 --> 00:04:40,240
which will show me that I have my user in this database.

64
00:04:40,240 --> 00:04:42,940
So if I execute that,

65
00:04:42,940 --> 00:04:49,040
I will see that I've got Bryan and my password in there like I think I would.

66
00:04:49,040 --> 00:04:51,350
And also, before we leave this,

67
00:04:51,350 --> 00:04:56,380
let's run a commit statement in here. So, type that in there,

68
00:04:56,380 --> 00:04:59,170
commit it. You'll see the commit was successful.

69
00:04:59,170 --> 00:05:01,110
If you don't do that,

70
00:05:01,110 --> 00:05:05,490
you'll leave your MySQL Workbench with these changes working in your

71
00:05:05,490 --> 00:05:07,770
Workbench, but it won't work inside your application,

72
00:05:07,770 --> 00:05:10,160
so don't forget that very important step.

73
00:05:10,160 --> 00:05:12,480
You can select users, but if they're not committed,

74
00:05:12,480 --> 00:05:18,000
it won't show up outside of this transaction. Let's switch back to our IDE.

