WEBVTT
1
00:00:00.540 --> 00:00:04.240
Since a lot of things have stayed the same as far as accessing a current

2
00:00:04.240 --> 00:00:07.760
logged in user, wanted to show you a newer technique that was available,

3
00:00:07.760 --> 00:00:13.800
and many people didn't know that it was available for you to utilize inside

4
00:00:13.800 --> 00:00:16.320
of any method that's called by Spring.

5
00:00:16.320 --> 00:00:19.300
Let me explain that last little point.

6
00:00:19.300 --> 00:00:23.890
The concept showing you here is injecting the current

7
00:00:23.890 --> 00:00:26.730
logged in user to method calls.

8
00:00:26.730 --> 00:00:30.290
You can see we have that Authentication auth on the

9
00:00:30.290 --> 00:00:32.840
tail end of our method signature.

10
00:00:32.840 --> 00:00:36.660
We've already secured our methods so that our UI element that posted this

11
00:00:36.660 --> 00:00:41.170
method can't do so insecurely, but that still doesn't show us the user that we

12
00:00:41.170 --> 00:00:46.420
have logged in. Methods that are called by Spring, not necessarily methods

13
00:00:46.420 --> 00:00:51.250
that you call within your code, but methods called by Spring can inject the

14
00:00:51.250 --> 00:00:56.970
authentication object with no change to your app. And this code here in our

15
00:00:56.970 --> 00:00:58.840
addRegistration method,

16
00:00:58.840 --> 00:01:03.560
this is called by the Spring MVC framework, and the Authentication

17
00:01:03.560 --> 00:01:09.190
object is injected into that instance named auth. We can then access

18
00:01:09.190 --> 00:01:12.240
that in our code and use it however we see fit.

19
00:01:12.240 --> 00:01:21.000
Let's change our addRegistration method on our post to utilize this feature now and see how it works firsthand.

