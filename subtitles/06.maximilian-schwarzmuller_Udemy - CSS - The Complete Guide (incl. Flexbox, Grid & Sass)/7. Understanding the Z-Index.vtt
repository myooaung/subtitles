WEBVTT
1
00:00:02.230 --> 00:00:06.070
So why is our background image not a real background image?

2
00:00:06.070 --> 00:00:12.580
Well if we think back about what we did so far, we were able to position our elements along the x-axis

3
00:00:12.670 --> 00:00:17.120
with left and right and along the y-axis with top and bottom.

4
00:00:17.140 --> 00:00:25.130
Now as we can see right here, we also need a possibility to position our elements along the z-axis.

5
00:00:25.130 --> 00:00:31.140
Now the great thing is that we can do this in CSS and for that we need a new property,

6
00:00:31.190 --> 00:00:33.570
the so-called z-index.

7
00:00:33.580 --> 00:00:38.800
Now before we apply the property, there are some important things we have to understand first. For that

8
00:00:38.800 --> 00:00:46.180
let's go to our code and let's go to the package class right here because as I said, the z-axis position

9
00:00:46.300 --> 00:00:48.780
can be changed by adding a z-index,

10
00:00:48.820 --> 00:00:51.160
so that's the property we need.

11
00:00:51.160 --> 00:00:54.910
This property has different values, by default

12
00:00:55.000 --> 00:01:04.240
every element on our website has a value of auto-applied for the z-index, the auto value is equal

13
00:01:04.240 --> 00:01:05.530
to zero.

14
00:01:06.070 --> 00:01:11.600
If we don't change anything else but this is what you normally can assume, auto is equal to zero

15
00:01:12.340 --> 00:01:18.920
and this zero now defines the starting point from a y-axis perspective for the elements on a website.

16
00:01:19.090 --> 00:01:24.630
This means if you want to position an element above this package class, then you could simply apply a

17
00:01:24.630 --> 00:01:28.670
z-index of one, of two, of 10, of 100,

18
00:01:28.690 --> 00:01:32.890
it doesn't matter, if you want to position that element below this class,

19
00:01:32.890 --> 00:01:36.290
then you can add -1, -100 and so on,

20
00:01:36.310 --> 00:01:37.640
I think you saw the pattern.

21
00:01:37.990 --> 00:01:46.480
But, here comes the but, adding z-index to elements which don't have any position property applied

22
00:01:46.720 --> 00:01:53.380
and by that, I mean a position property with a value different from static, for these elements,

23
00:01:53.440 --> 00:01:55.690
the z-index doesn't have any impact,

24
00:01:55.690 --> 00:01:58.370
so I could add z-index 100 right here,

25
00:01:58.550 --> 00:02:04.660
if I go back and reload the page, still the background image will be on top of all the other elements.

26
00:02:04.660 --> 00:02:11.620
This means this default style for the elements without any position property is just there and it's important

27
00:02:11.620 --> 00:02:14.300
to know that it's basically equal to zero

28
00:02:14.560 --> 00:02:18.380
but if you want to change it, you have to apply the position property.

29
00:02:18.670 --> 00:02:24.130
Now the good news is that we have an element, actually two elements, with the position property applied

30
00:02:24.910 --> 00:02:27.570
and one will be the background image right here.

31
00:02:27.850 --> 00:02:32.980
So let's get rid of the z-index right here on the package because it doesn't have any effect

32
00:02:33.100 --> 00:02:38.880
and now we add the z-index right here to our image.

33
00:02:39.230 --> 00:02:43.360
As I told you, the default value for the elements is zero

34
00:02:43.550 --> 00:02:50.150
and as the background image should be behind these packages we have, so behind these default elements,

35
00:02:50.870 --> 00:02:57.710
we could add -1 for example. If my logic was correct, then the background image should now be behind

36
00:02:57.770 --> 00:02:59.020
these packages.

37
00:02:59.030 --> 00:03:01.750
Let's go back and reload the page to see if this worked,

38
00:03:02.180 --> 00:03:03.300
yes it did

39
00:03:03.530 --> 00:03:09.850
and this makes sense right because now we said that the z-axis, so the z-axis value defined by the

40
00:03:09.860 --> 00:03:14.130
z-index should be smaller than 1, -1 in our case,

41
00:03:14.240 --> 00:03:21.530
therefore it should be displayed behind these packages. If we would add a z-index one though, right here

42
00:03:21.840 --> 00:03:22.320
like that,

43
00:03:22.330 --> 00:03:24.940
so we changed it for the background class again,

44
00:03:25.400 --> 00:03:29.560
then we could see that the background image is again on top of our packages

45
00:03:30.530 --> 00:03:36.980
and on top of the navigation bar, can you see it? If I add a z-index of 0 right here,

46
00:03:38.270 --> 00:03:41.140
then the background image is on top of the packages.

47
00:03:41.330 --> 00:03:42.470
This makes sense right

48
00:03:42.470 --> 00:03:48.830
because with that, both have the same z-index but we learned already that by adding position fixed, the

49
00:03:48.830 --> 00:03:55.160
element is taken out of the document flow and therefore displayed above the existing elements,

50
00:03:55.160 --> 00:04:03.380
this is clear but why does the z-index of 0 lead to the situation that this navigation bar is displayed

51
00:04:03.440 --> 00:04:05.020
on top of the background image

52
00:04:05.090 --> 00:04:07.790
but adding a z-index of 1 or 100,

53
00:04:07.790 --> 00:04:12.670
it doesn't matter in that case leads to a situation that the background image is on top of that nav

54
00:04:12.670 --> 00:04:13.290
bar.

55
00:04:13.580 --> 00:04:20.420
Well let's change it back to zero and think about the default value of the z-index for this background class

56
00:04:20.810 --> 00:04:27.350
because it's the same as for the normal elements. The default value for this z-index is also auto

57
00:04:27.530 --> 00:04:28.370
or zero

58
00:04:28.370 --> 00:04:33.110
in that case and the same thing is also true for our navigation bar,

59
00:04:33.110 --> 00:04:36.430
we can find the navigation bar right here in the shared.css file.

60
00:04:36.650 --> 00:04:44.850
So here our main header has the position fixed declaration applied with a default z-index of auto

61
00:04:45.080 --> 00:04:46.160
or zero.

62
00:04:46.370 --> 00:04:56.110
This means if I would now change the z-index right here, let's say to 5 and at the same time apply a

63
00:04:56.140 --> 00:04:59.260
z-index of six, so above five right here

64
00:04:59.590 --> 00:05:07.120
and of course save both files and reload the page, you can see the background image is still on top of the

65
00:05:07.120 --> 00:05:11.760
nav bar. If I would add z-index of 7,

66
00:05:11.790 --> 00:05:16.830
so higher than the value applied for the packages and reload, it would be above it.

67
00:05:17.160 --> 00:05:25.070
If we change it back to our default value which would be 0 for the packages and for the navigation

68
00:05:25.070 --> 00:05:25.630
bar,

69
00:05:26.730 --> 00:05:29.430
we can see that we have the default behavior.

70
00:05:29.440 --> 00:05:32.200
So the z-index doesn't drive this behavior,

71
00:05:32.370 --> 00:05:37.710
what drives this behavior though in case we have two positioned elements with the same z-index

72
00:05:38.190 --> 00:05:40.980
is simply the order in the HTML file.

73
00:05:41.100 --> 00:05:48.120
So if we go to our index.html file in the packages folder, we can see that the background is the first

74
00:05:48.120 --> 00:05:51.840
element and after the background comes the header.

75
00:05:52.080 --> 00:05:59.020
Therefore the header comes later in our code and therefore the header is displayed above our background,

76
00:05:59.040 --> 00:06:01.190
it's as simple as that.

77
00:06:01.320 --> 00:06:05.420
And with that we now understood the core concept of the z-index,

78
00:06:05.460 --> 00:06:10.380
the only thing we have to do right now is of course to go back to the packages file and add a

79
00:06:10.410 --> 00:06:15.870
z-index of -1 to position it behind our packages, like that

80
00:06:15.960 --> 00:06:18.380
and as we can see, everything is still working

81
00:06:18.510 --> 00:06:23.740
but as I said, with that we understood the core concept of changing the

82
00:06:23.850 --> 00:06:31.170
z-axis position with a z-index. There is one other important concept, the stacking context. I will have a separate

83
00:06:31.170 --> 00:06:33.770
video about that later in this module

84
00:06:33.930 --> 00:06:36.490
but for the moment, let's just be happy with that

85
00:06:36.570 --> 00:06:40.430
z-index and as we are so happy with it,

86
00:06:40.620 --> 00:06:47.520
why don't we just take the chance and use our knowledge we have so far to also position and create a

87
00:06:47.520 --> 00:06:52.470
badge right here? Because I said in the beginning of this module that I would like to have a recommended

88
00:06:52.470 --> 00:06:52.880
badge,

89
00:06:52.890 --> 00:06:54.660
so in this package right here.

90
00:06:54.930 --> 00:06:57.610
Let's see how this works in the next video.
