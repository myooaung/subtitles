WEBVTT
1
00:00:02.440 --> 00:00:09.520
Now with all that time spent on the grid and its many properties, let me compare the grid to flexbox,

2
00:00:09.590 --> 00:00:15.530
when should you use which? Let's first of all understand the key difference between the CSS grid and

3
00:00:15.530 --> 00:00:16.320
CSS

4
00:00:16.340 --> 00:00:20.450
flexbox. The grid is all about two-dimensional positioning,

5
00:00:20.450 --> 00:00:22.020
you have rows and columns,

6
00:00:22.040 --> 00:00:23.320
that's what it's all about,

7
00:00:23.330 --> 00:00:25.160
that is what we used all the time.

8
00:00:25.460 --> 00:00:30.510
Flexbox is one-dimensional, in flexbox you dont have rows and columns.

9
00:00:30.530 --> 00:00:37.880
Sure you can use flex wrap to wrap items if your viewport is too small for example but in the end,

10
00:00:37.880 --> 00:00:43.990
you always just have flex direction row or column and you either position them horizontally or

11
00:00:43.980 --> 00:00:44.820
vertically.

12
00:00:44.940 --> 00:00:52.460
So flexbox is always a decent choice if you just have a row or a column of items, you can use flex

13
00:00:52.460 --> 00:01:00.920
wrap to still ensure that your row of items wraps itself, in case that your viewport is becoming too

14
00:01:00.920 --> 00:01:08.690
small but then you still might have the issue that the positioning of the items to each other is a bit harder

15
00:01:08.690 --> 00:01:15.440
in flexbox than with the grid and the grid is especially a great choice if you have a real layout

16
00:01:15.440 --> 00:01:21.620
with multiple dimensions or for example with the form in our course project where you want to position

17
00:01:21.620 --> 00:01:25.400
items next to each other in like, a grid.

18
00:01:25.620 --> 00:01:29.110
We can actually see this really well in our project.

19
00:01:29.210 --> 00:01:35.660
The form here is a grid because the way we position elements here would be impossible with flexbox basically.

20
00:01:36.320 --> 00:01:41.570
The entire layout could have been done with flexbox but it's also done neatly with the grid and it

21
00:01:41.570 --> 00:01:43.890
ensures that the footer is at the bottom,

22
00:01:43.910 --> 00:01:49.470
the fact that we can scroll here again is a bug stemming from Firefox. On the main page,

23
00:01:49.520 --> 00:01:55.070
we use the grid too for the layout but for example for the plans, we use flexbox because it's just a

24
00:01:55.070 --> 00:02:01.590
row of items, three items next to each other and flexbox is awesome for situations like this.

25
00:02:01.610 --> 00:02:03.520
The same is true for our key features,

26
00:02:03.560 --> 00:02:04.760
it's one-dimensional,

27
00:02:04.770 --> 00:02:08.790
they're next to each other or below each other, just as our plans,

28
00:02:08.840 --> 00:02:10.520
so no need to use the grid here.

29
00:02:10.550 --> 00:02:11.620
You can do that,

30
00:02:11.630 --> 00:02:16.670
it's not necessarily wrong but flexbox is made for situations like this.

31
00:02:16.670 --> 00:02:19.280
So I hope this helps you, one-dimension

32
00:02:19.280 --> 00:02:23.270
normally, you should take flexbox, multiple dimensions,

33
00:02:23.420 --> 00:02:25.490
the grid is something you should think about.
