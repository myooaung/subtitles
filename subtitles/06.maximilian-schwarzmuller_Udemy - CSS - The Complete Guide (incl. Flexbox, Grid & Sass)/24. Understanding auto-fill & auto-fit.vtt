WEBVTT
1
00:00:02.280 --> 00:00:09.420
Enough about implicit and explicit grid, you learned how you can control the add new row or column behavior.

2
00:00:09.690 --> 00:00:17.220
Sometimes you want to have a layout where the child elements are put into cells in a row until they

3
00:00:17.280 --> 00:00:23.070
reach the edge of the current viewport at which point they should jump into a new row and do the same

4
00:00:23.070 --> 00:00:24.000
again.

5
00:00:24.000 --> 00:00:29.340
Now here we don't have that behavior, if we shrink it, we reach a point where nothing happens, we just

6
00:00:29.340 --> 00:00:30.650
crop the content,

7
00:00:30.690 --> 00:00:34.160
we never have our content jump into a new line

8
00:00:34.260 --> 00:00:40.440
and on the other hand if we increase the width, it also doesn't populate these newly freed-up space up

9
00:00:40.440 --> 00:00:40.860
here,

10
00:00:40.860 --> 00:00:43.300
it always stays the way it is.

11
00:00:43.380 --> 00:00:47.340
Now we can change this by dynamically generating columns.

12
00:00:47.340 --> 00:00:52.850
You could think that grid auto flow column would be the solution but it actually isn't

13
00:00:52.890 --> 00:00:56.040
because this will always put new content into a column,

14
00:00:56.070 --> 00:01:00.520
it doesn't check if the column still fits into the current viewport or not.

15
00:01:00.630 --> 00:01:03.990
However, we can create columns on our own here,

16
00:01:03.990 --> 00:01:08.510
the downside is that we need to know how many columns we need and we don't know.

17
00:01:08.610 --> 00:01:14.670
Now we could try figuring this out with a couple of media queries and then simply overwrite this property

18
00:01:14.970 --> 00:01:18.530
and change the amount of columns we create

19
00:01:18.600 --> 00:01:23.840
but there is a convenient helper value we can enter, auto-fill.

20
00:01:23.840 --> 00:01:32.490
Now let me reduce the size to maybe 10rem and what auto-fill will do is it will ensure that it fills

21
00:01:32.490 --> 00:01:39.540
the current row with as many items as possible and then it will wrap and enter a new row basically.

22
00:01:39.870 --> 00:01:43.610
So if I save this and reload, you can see the effect here,

23
00:01:43.740 --> 00:01:45.880
we've got four items in the first row now,

24
00:01:46.020 --> 00:01:49.410
if I increase the viewport, this become five

25
00:01:49.830 --> 00:01:54.050
and if I shrink it, well then they jump into new lines.

26
00:01:54.110 --> 00:02:00.610
Of course this is only possible to a certain extent but this gives us a lot of flexibility already.

27
00:02:01.050 --> 00:02:07.410
So this can be really useful to create a truly dynamic grid for cases where you want to have multiple

28
00:02:07.410 --> 00:02:09.620
items sit next to each other.

29
00:02:09.630 --> 00:02:15.960
Now if you want to restrict the maximum amount of items that are in a row, you can simply assign a max

30
00:02:15.960 --> 00:02:18.860
width to your container which holds the grid in the end.

31
00:02:19.230 --> 00:02:24.660
There also is an alternative to auto-fill and you can only see it if you've got less items,

32
00:02:24.660 --> 00:02:31.860
so let me temporarily comment out the last three quotes so that we only have three quotes for now.

33
00:02:31.860 --> 00:02:38.250
Now you see, the items are obviously not enough to fill the entire line because or the entire row because

34
00:02:38.250 --> 00:02:40.440
we only have three items

35
00:02:40.440 --> 00:02:47.490
but now we can use an alternative value, so not auto-fill but auto-fit. Auto-fit will behave almost

36
00:02:47.790 --> 00:02:50.160
equal to auto-fill

37
00:02:50.370 --> 00:02:57.330
but if I reload with auto-fit, you see it also centers this automatically, it will still however put

38
00:02:57.330 --> 00:03:00.230
this into a new line if the space is not enough.

39
00:03:00.480 --> 00:03:07.380
So auto-fit is a nice alternative to auto-fill for cases where you might end up with a layout where

40
00:03:07.380 --> 00:03:10.750
you don't have enough items for an entire row.

41
00:03:10.830 --> 00:03:18.060
So auto-fit and auto-fill are two great values you can use to make sure that your content is really using

42
00:03:18.060 --> 00:03:20.920
the available space in the best possible way.

43
00:03:21.090 --> 00:03:29.450
So now I'm going to comment in the other quotes here again and with that, we're back to the last behavior

44
00:03:29.480 --> 00:03:30.830
we saw with auto-fill.
