WEBVTT
1
00:00:02.230 --> 00:00:08.960
We saw vendor prefixes, sometimes you can't implement a vendor prefix for a certain feature though

2
00:00:09.130 --> 00:00:15.430
or maybe you can implement vendor prefixes but some browsers which your users might use don't even support

3
00:00:15.460 --> 00:00:17.100
these prefixed versions.

4
00:00:17.530 --> 00:00:21.150
So some features simply aren't implemented in some browsers,

5
00:00:21.430 --> 00:00:24.120
now the supports query can help with that.

6
00:00:24.130 --> 00:00:31.060
It looks a bit like a media query but it's @supports and the condition simply is a property value

7
00:00:31.060 --> 00:00:37.300
pair where you can simply check if that property and also that value, that's important, the value is not

8
00:00:37.300 --> 00:00:37.990
ignored,

9
00:00:38.200 --> 00:00:40.050
if that is supported by the browser.

10
00:00:40.360 --> 00:00:47.830
So in the end the browser simply checks, can I read and use that? If the browser can't, then it will not

11
00:00:47.860 --> 00:00:50.350
execute the code between the curly braces,

12
00:00:50.470 --> 00:00:52.770
if it can, it will do so.

13
00:00:52.830 --> 00:00:58.240
This is of course especially useful if you've got a bunch of code which depends on one feature,

14
00:00:58.240 --> 00:01:03.460
for example you want to use the grid and obviously the grid itself depends on the grid being available

15
00:01:03.790 --> 00:01:09.240
but maybe you've got some other code too which assumes that everything is positioned in a grid,

16
00:01:09.310 --> 00:01:14.650
maybe your font size is adjusted accordingly or if some elements get a width of 100% so that

17
00:01:14.650 --> 00:01:16.120
they look good in the grid.

18
00:01:16.480 --> 00:01:19.130
Well, all of that is something you don't want to apply

19
00:01:19.270 --> 00:01:24.530
if the browser doesn't support it and therefore, a supports query can be really useful.

20
00:01:24.730 --> 00:01:27.240
Let's see how it works in our code.

21
00:01:27.340 --> 00:01:33.670
Back in our code and here I'm in the regular shared.css file, not in the prefixed one, though of

22
00:01:33.670 --> 00:01:35.780
course theoretically you would add it there too

23
00:01:35.800 --> 00:01:38.990
or you should add it in the code you implement in the end

24
00:01:39.220 --> 00:01:41.600
but in the normal shared.css file,

25
00:01:41.830 --> 00:01:44.910
what could we check with our supports query?

26
00:01:45.250 --> 00:01:49.710
Well obviously, we could check if we can really use a grid.

27
00:01:49.900 --> 00:01:55.570
Now the good thing about our page is even if a browser doesn't support the grid, it will still look good

28
00:01:55.900 --> 00:01:59.770
because for example, our main layout is simply a one column grid,

29
00:01:59.770 --> 00:02:04.040
so if the grid is not supported, elements are just positioned beneath each other.

30
00:02:04.060 --> 00:02:08.740
The biggest problem will just be that the header overlaps our main image

31
00:02:09.040 --> 00:02:12.300
but that is still something we can avoid with such a query.

32
00:02:12.520 --> 00:02:17.890
So we add @supports and then we check if display grid is supported.

33
00:02:18.010 --> 00:02:22.810
If the browser can't parse this, the code which is in there won't get executed.

34
00:02:22.810 --> 00:02:23.900
Now what's in there?

35
00:02:24.160 --> 00:02:27.770
We put our body code in there, like this.

36
00:02:28.030 --> 00:02:33.760
If we add body in here, then this code will only run if the grid is supported.

37
00:02:33.760 --> 00:02:38.920
Now obviously, we don't care about the font family, this is not related to the grid, so let's remove it,

38
00:02:39.160 --> 00:02:43.120
the other code however is related to the grid being supported.

39
00:02:43.450 --> 00:02:50.110
The height of 100% is only needed if we do use the grid because we rely on the height of 100%

40
00:02:50.110 --> 00:02:53.490
with our grid row of auto in the middle,

41
00:02:53.650 --> 00:02:56.170
the margin should also only be set to zero

42
00:02:56.320 --> 00:02:57.960
if we use the grid.

43
00:02:58.330 --> 00:03:05.030
So what we do is we move our other body declaration here, that rule to be precise,

44
00:03:05.140 --> 00:03:11.140
we move it above our supports query so that this will run first, then if the browser supports the grid,

45
00:03:11.400 --> 00:03:14.600
this will execute and overwrite parts of the body

46
00:03:14.770 --> 00:03:18.330
and in the original body, we get rid of all the grid related code,

47
00:03:18.370 --> 00:03:27.420
we don't need that but we do comment in the padding top, so that we got that distance or that the content

48
00:03:27.630 --> 00:03:31.320
isn't overlapped by the header

49
00:03:31.770 --> 00:03:37.440
and we also keep the font family and margin zero because that should apply all the time. Now in our

50
00:03:37.440 --> 00:03:39.510
supports query, margin zero is not needed,

51
00:03:39.510 --> 00:03:45.750
we add it in the general rule but then the grid is only used if the browser supports it.

52
00:03:45.760 --> 00:03:47.370
Now with that, we're almost done,

53
00:03:47.370 --> 00:03:49.310
one thing we should overwrite here,

54
00:03:49.320 --> 00:03:56.450
here we of course should set our padding top to zero, so that we overwrite the padding top we introduce

55
00:03:56.450 --> 00:03:57.080
otherwise

56
00:03:57.120 --> 00:04:01.890
because if we can use the grid, we don't need that, we reserve space for the header with that extra

57
00:04:01.920 --> 00:04:02.500
row.

58
00:04:02.760 --> 00:04:08.490
So now we can save that and reload and everything looks just as it did before because now, the

59
00:04:08.490 --> 00:04:09.690
supports query kicks in,

60
00:04:09.690 --> 00:04:12.000
we can see that if we inspect the body,

61
00:04:12.000 --> 00:04:14.630
this is all applied, we see the grid here.

62
00:04:14.700 --> 00:04:16.160
So this does kick in,

63
00:04:16.170 --> 00:04:21.740
it does have an effect because our browser supports the grid. In browsers which do not support it,

64
00:04:21.840 --> 00:04:26.750
we still get a decent layout even without the grid, due to our general styling here.

65
00:04:26.970 --> 00:04:30.330
So this is one example of how we could use the supports query.

66
00:04:30.330 --> 00:04:33.360
Please also be aware that you can use multiple conditions,

67
00:04:33.450 --> 00:04:38.100
you can use AND and OR or also NOT, so something like

68
00:04:38.130 --> 00:04:41.150
AND NOT to create more complex queries.

69
00:04:41.250 --> 00:04:45.980
So you could check if display grid is understood but if not something else is the case.

70
00:04:46.020 --> 00:04:49.140
This allows you to build more complex supports queries,

71
00:04:49.140 --> 00:04:54.540
most of the time, you just need simple ones like this, so that you are able to use some Next-Gen feature

72
00:04:54.570 --> 00:05:00.000
if the browser supports it but that you provide a decent fallback otherwise and the typical setup is

73
00:05:00.000 --> 00:05:04.880
of course that you to define the fallback first and overwrite it with your better solution

74
00:05:04.880 --> 00:05:07.590
if the supports query does allow access.
