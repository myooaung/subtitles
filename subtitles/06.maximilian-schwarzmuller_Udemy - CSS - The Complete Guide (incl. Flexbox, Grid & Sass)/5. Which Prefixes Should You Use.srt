1
00:00:02,330 --> 00:00:04,940
So we had a look at these vendor prefixes,

2
00:00:04,940 --> 00:00:09,770
the question then of course comes up is, which prefix should you use?

3
00:00:09,830 --> 00:00:13,240
Now there is a page, what CSS to prefix,

4
00:00:13,340 --> 00:00:20,930
this gives a nice indication, it also links to caniuse which you also should use to find out where prefixes

5
00:00:20,930 --> 00:00:21,870
are needed,

6
00:00:22,280 --> 00:00:26,060
so if we quickly check the flexbox page on caniuse,

7
00:00:26,150 --> 00:00:29,140
you can click show all to also see all browser versions

8
00:00:29,330 --> 00:00:34,760
and there for example for older Chrome versions, you'll also see that there is partial support with the

9
00:00:34,760 --> 00:00:36,110
webkit prefix and

10
00:00:36,350 --> 00:00:38,770
the same is true for other browsers too.

11
00:00:39,020 --> 00:00:46,730
So here you can see which prefixes might be needed to support these older versions and that should I prefix

12
00:00:46,730 --> 00:00:50,190
page is of course a really great source to get a quick overview.

13
00:00:50,450 --> 00:00:55,350
There, you see which features do not need prefixes and which ones should be prefixed

14
00:00:55,490 --> 00:00:57,900
and then you even see the syntax you should use,

15
00:00:58,040 --> 00:01:04,920
so this is a really valuable resource which helps you write code that works in more browsers.

16
00:01:04,920 --> 00:01:12,500
However, clearly it is very cumbersome to check this for every feature you add and for manually adding

17
00:01:12,560 --> 00:01:20,310
all these prefixes, thankfully there is a tool for that, auto prefixer. You can simply google for CSS

18
00:01:20,340 --> 00:01:22,000
auto prefixer

19
00:01:22,140 --> 00:01:24,930
and you should find this Github page here, post CSS

20
00:01:24,940 --> 00:01:31,260
auto prefixer. This is a tool which automatically fetches a list of properties you should prefix

21
00:01:31,860 --> 00:01:34,820
and then adds these prefixes to your code,

22
00:01:35,070 --> 00:01:41,640
so it simply runs over your code and adds the prefixes and you specify which browsers you want to support

23
00:01:41,760 --> 00:01:46,610
and based on that list of browsers you want support, it does the prefixing.

24
00:01:46,620 --> 00:01:48,990
So let's see this in action.

25
00:01:49,080 --> 00:01:52,200
If you scroll over that, you'll see multiple ways of including it,

26
00:01:52,200 --> 00:01:56,260
you can include it in your gulp or a webpack workflow for example,

27
00:01:56,280 --> 00:02:00,080
this is the way it's used most often by the way

28
00:02:00,300 --> 00:02:06,810
but if you don't have such a tool or workflow and we don't have one, you can also just google for CSS

29
00:02:06,810 --> 00:02:13,260
auto prefixer again and you'll find auto prefixer online.

30
00:02:13,260 --> 00:02:18,200
Now if you open this page, you can just paste your code into this page.

31
00:02:18,300 --> 00:02:24,270
So for example, we could grab our shared code and put it into that page and it would then, on the right,

32
00:02:24,450 --> 00:02:26,890
give us the prefixed version of that code.

33
00:02:26,900 --> 00:02:33,230
So as you see, it automatically added a lot of prefixes, for example for grids and so on

34
00:02:33,300 --> 00:02:37,570
and now we could just grab that code on the right and put it back into our code

35
00:02:37,680 --> 00:02:40,850
or maybe even better than that, into a separate version,

36
00:02:40,980 --> 00:02:48,600
so shared-prod.css for example. By doing this, you now have a prefixed version of your code which

37
00:02:48,600 --> 00:02:54,720
you can now import into your file instead of the old code and which now should work in more and also

38
00:02:54,780 --> 00:02:55,890
older browsers.
