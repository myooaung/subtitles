1
00:00:02,280 --> 00:00:09,070
So we created our grid with eight cells and right now, every child element of the container takes one

2
00:00:09,090 --> 00:00:09,960
cell.

3
00:00:10,350 --> 00:00:16,230
Now it would be nice if we could overwrite that default positioning and let's say element three should

4
00:00:16,230 --> 00:00:20,030
actually take the last two cells in the first row,

5
00:00:20,250 --> 00:00:24,130
so it should take the cell where element four is in too.

6
00:00:24,570 --> 00:00:27,870
We can overwrite this by going to the child selector now,

7
00:00:27,930 --> 00:00:35,990
so el3 selects the element three here and there, we can define where it should be positioned.

8
00:00:36,210 --> 00:00:41,740
We do this with the help of the grid column start property for example.

9
00:00:42,730 --> 00:00:48,280
Do you remember that setting in the developer tools I showed you earlier, display line numbers? CSS

10
00:00:48,380 --> 00:00:48,880
grid

11
00:00:48,910 --> 00:00:57,310
actually things in lines. The grid is constructed by automatically adding a couple of lines before

12
00:00:57,340 --> 00:01:00,200
and after our columns and rows.

13
00:01:00,220 --> 00:01:05,190
So the first horizontal line here marks the beginning of the first row,

14
00:01:05,290 --> 00:01:12,220
the second one marks the end of the first row and the third one marks the end of the last row and the

15
00:01:12,220 --> 00:01:14,080
same for the columns.

16
00:01:14,080 --> 00:01:21,850
Now if we want to tell element three to start at line number three, well then we can simply set grid

17
00:01:21,850 --> 00:01:24,340
column start to three.

18
00:01:24,340 --> 00:01:30,080
This is line number three and the developer tools of Firefox help us identifying this number.

19
00:01:30,130 --> 00:01:35,890
Now we of course want to also tell it where to end and this is the interesting part now because by default,

20
00:01:35,890 --> 00:01:40,180
this is set to simply span one cell,

21
00:01:40,180 --> 00:01:48,760
now we can set this to end at line number five, so column line number five, which we simply do by typing

22
00:01:48,840 --> 00:01:50,140
a 5 here.

23
00:01:50,470 --> 00:01:58,150
If we now save that and reload, we see something interesting, element number four jumps into a new row

24
00:01:58,360 --> 00:02:07,000
because its old place is taken, taken by element number three which we clearly define to go into these

25
00:02:07,030 --> 00:02:08,500
two cells.

26
00:02:08,630 --> 00:02:14,860
Now due to the helper lines and our preview at the bottom, you can still see that actually, we've got

27
00:02:14,890 --> 00:02:22,600
two cells here but because of grid column start and end, we each define that this element should take

28
00:02:22,600 --> 00:02:23,750
them both,

29
00:02:23,770 --> 00:02:32,590
we also see that if we hover over it here, it takes both. The same can be said for the rows, we can set grid

30
00:02:32,590 --> 00:02:35,630
row start to the row number it should start in,

31
00:02:35,950 --> 00:02:38,760
in our example this would be one,

32
00:02:38,760 --> 00:02:40,690
so let's set it to one.

33
00:02:40,690 --> 00:02:47,730
Now we want to force the green element, element three, to go all the way to the bottom here,

34
00:02:47,980 --> 00:02:57,820
so to the end of row number two, then we have to set a grid row and property of three because the last

35
00:02:57,910 --> 00:03:06,040
line here in the row categories, so the last row line is line number three. With that if we save that and

36
00:03:06,040 --> 00:03:07,390
we reload the page,

37
00:03:07,570 --> 00:03:14,580
now element three takes this full block of four cells, simply due to the way we configured it

38
00:03:15,010 --> 00:03:18,830
and this is how you can explicitly position elements in the grid.

39
00:03:19,150 --> 00:03:26,590
Now as you can see at element one, two and four, the grid automatically positions all child elements and it starts

40
00:03:26,590 --> 00:03:32,230
filling the grid at the top left and then goes to the right and to the bottom, though it will respect

41
00:03:32,320 --> 00:03:34,600
the browser reading settings,

42
00:03:34,600 --> 00:03:40,840
so if you're watching this on right-to-left device, it would actually start in the top right corner.

43
00:03:41,380 --> 00:03:48,280
It automatically fills that but you can overwrite that behavior by explicitly stating a position with the

44
00:03:48,280 --> 00:03:55,630
help of these properties just as you need it. This is something super important to understand, how you interact

45
00:03:55,630 --> 00:04:03,370
between your grid elements with the positioning and the grid container where you define the layout.

46
00:04:03,370 --> 00:04:05,310
This is happening in two different places,

47
00:04:05,410 --> 00:04:10,720
you defined the layout in the container, you defined the position on the child element.
