WEBVTT
1
00:00:02.260 --> 00:00:08.650
So now that we had a look at the shorthands, let's also dive into something else which is relevant for

2
00:00:08.650 --> 00:00:13.040
positioning, gutters between the rows and columns.

3
00:00:13.150 --> 00:00:17.780
Right now, all the columns rows sit directly next to each other,

4
00:00:17.800 --> 00:00:20.200
there is no space in between

5
00:00:20.200 --> 00:00:25.060
and even if you add a margin, let's say to element three, margin 10 pixels,

6
00:00:25.630 --> 00:00:29.740
even with such a margin, you don't really change anything.

7
00:00:29.750 --> 00:00:38.180
The element now clearly has some distance but if you watch the lines, they still didn't change,

8
00:00:38.180 --> 00:00:42.560
so we just positioned the element different inside of its marked area

9
00:00:42.620 --> 00:00:48.750
and this can lead to the result we want to have but it's not really a clean way, especially since there

10
00:00:48.750 --> 00:00:51.830
is a cleaner way. On the container of the grid,

11
00:00:51.980 --> 00:00:58.220
we can add another property which is grid row or column gap. Grid column

12
00:00:58.220 --> 00:01:01.640
gap allows you to define the gaps between the columns,

13
00:01:01.640 --> 00:01:04.250
so this could be 20 pixels.

14
00:01:04.340 --> 00:01:06.140
If you do that and you reload,

15
00:01:06.320 --> 00:01:11.100
now you see that indeed in the preview, we can see there is a gap.

16
00:01:11.210 --> 00:01:14.010
This still is treated as one line only

17
00:01:14.030 --> 00:01:20.090
which is why the line markers are right in the middle of the gap but we now have an official gutter between

18
00:01:20.150 --> 00:01:26.900
these cells and now we don't have to set a margin on any element to get some distance between the columns

19
00:01:26.900 --> 00:01:27.980
in this case.

20
00:01:27.980 --> 00:01:35.030
Of course, if one element overlaps multiple columns, it's not kind of disturbed by these gaps,

21
00:01:35.030 --> 00:01:36.840
it overlaps the gaps too

22
00:01:36.890 --> 00:01:38.310
which is what you would expect,

23
00:01:38.330 --> 00:01:47.670
I guess. You can of course also set a grid row gap of let's say 10 pixels and now this will introduce some

24
00:01:47.670 --> 00:01:50.530
gaps between the rows unsurprisingly. 

25
00:01:51.030 --> 00:01:58.080
And there also is a shorthand, if you want to summarize this, then you can do so, you can add just grid

26
00:01:58.170 --> 00:02:05.740
gap and there, you first specify the row gap of 10 pixels in this case and then the column gap.

27
00:02:05.770 --> 00:02:07.630
So order is important here,

28
00:02:07.700 --> 00:02:09.900
if you now reload, you end up with the same result.

29
00:02:10.030 --> 00:02:12.220
If I change the column gap to 30,

30
00:02:12.370 --> 00:02:13.960
you can see it has an effect,

31
00:02:13.960 --> 00:02:16.010
so this really is working,

32
00:02:16.030 --> 00:02:22.960
this is how you can conveniently add gaps. If you only specify one value here by the way, then this

33
00:02:23.020 --> 00:02:25.690
will be taken for both rows and columns.

34
00:02:25.780 --> 00:02:31.120
So if you want to have the same distance between all elements, then this is the syntax you want to use.
