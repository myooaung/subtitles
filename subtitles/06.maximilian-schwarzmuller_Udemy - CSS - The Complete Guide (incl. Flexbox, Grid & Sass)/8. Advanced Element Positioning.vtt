WEBVTT
1
00:00:02.300 --> 00:00:05.190
Now that we have the very basics out of the way,

2
00:00:05.390 --> 00:00:07.620
let's work on the positioning again.

3
00:00:07.850 --> 00:00:15.260
Right now, we only position one element, element three with the help of grid column start and grid

4
00:00:15.260 --> 00:00:20.110
row start and end. We're using the line numbers right, now

5
00:00:20.110 --> 00:00:27.530
it turns out we can also specify some other values there or change the way we use the line numbers.

6
00:00:27.620 --> 00:00:30.250
For example here, grid column start and end,

7
00:00:30.470 --> 00:00:36.230
right now we're saying start at the line with the number three and end right before the line number

8
00:00:36.230 --> 00:00:37.130
five,

9
00:00:37.130 --> 00:00:38.790
nothing wrong with that

10
00:00:39.140 --> 00:00:45.110
but another way of expressing this for this element would be start at line number three and then span

11
00:00:45.140 --> 00:00:46.550
two cells,

12
00:00:46.790 --> 00:00:56.210
so occupy two cells and that can be done by changing the five in grid column end to span two. Span is

13
00:00:56.210 --> 00:00:57.180
a keyword here,

14
00:00:57.200 --> 00:00:58.670
not something I did come up with,

15
00:00:58.820 --> 00:01:06.990
it's defined in the CSS specification and it tells it to simply end after it occupies two cells.

16
00:01:07.010 --> 00:01:10.530
So if I reload, we have the same result as before

17
00:01:10.790 --> 00:01:18.170
but as you can see if we inspect element three, we do have this rule in effect and it just leads to the same result

18
00:01:18.170 --> 00:01:21.950
as before because we occupy the same amount of cells.

19
00:01:22.250 --> 00:01:29.300
If we say span three here and we reload, we see nothing changes though because we can't go further to

20
00:01:29.300 --> 00:01:30.320
the right,

21
00:01:30.350 --> 00:01:32.920
we only get two columns here,

22
00:01:33.050 --> 00:01:38.370
we would need to define more to span more than that or simply start earlier.

23
00:01:38.660 --> 00:01:44.920
If we start at line number two here, instead of three and I now reload,

24
00:01:45.200 --> 00:01:46.670
now everything changed,

25
00:01:46.670 --> 00:01:52.910
now we take three columns width because of span three and the other elements also needed to be repositioned

26
00:01:53.150 --> 00:01:54.610
because we now occupy

27
00:01:54.610 --> 00:01:58.670
for example the place where element two could be seen earlier.

28
00:01:59.150 --> 00:02:01.790
So span is very interesting.

29
00:02:02.120 --> 00:02:09.110
Now sometimes you also have another behavior where you want to ensure that a certain value takes a

30
00:02:09.110 --> 00:02:10.480
full row.

31
00:02:10.520 --> 00:02:18.580
Now clearly, you can say start at line number one and then define the last number as the end number or span

32
00:02:18.590 --> 00:02:20.470
four in our grid

33
00:02:20.480 --> 00:02:25.380
but there also is another nice trick, taking advantage of another way of using these elements.

34
00:02:25.640 --> 00:02:28.200
Let's use the element two for this now

35
00:02:28.550 --> 00:02:35.270
and for that, I'll add a grid column start here of one because I want to start in first column and grid

36
00:02:35.270 --> 00:02:41.960
column end will now not be span four which would take the entire row and it will not be five which would

37
00:02:41.960 --> 00:02:48.120
take the entire row but -1. You can define negative line numbers too

38
00:02:48.470 --> 00:02:53.790
and what this will lead to is simply that it starts counting from the end of the grid,

39
00:02:53.900 --> 00:03:00.500
so from the right here and one number or one line from the right is just line number five.

40
00:03:00.530 --> 00:03:07.060
The advantage is of course if we add one extra column to this grid, we don't need to change this line because

41
00:03:07.080 --> 00:03:10.800
one column from the right will still be one column from the right.

42
00:03:11.000 --> 00:03:17.900
If we defined a column end of five here and we add another column to the grid, then we would have to bump this

43
00:03:17.900 --> 00:03:18.990
up to six,

44
00:03:19.010 --> 00:03:21.210
so this means we have to revisit this place,

45
00:03:21.230 --> 00:03:23.070
it's easier if we use that trick.

46
00:03:23.120 --> 00:03:28.970
And of course you're not limited to -1, you could say -2 too to move two columns in from the

47
00:03:28.970 --> 00:03:33.240
right but -1 is now just to the end.

48
00:03:33.240 --> 00:03:39.070
Now if we save that, before I reload, there is something interesting which should happen now.

49
00:03:39.320 --> 00:03:46.000
Please note that I'm saying that element two should take the entire row but element three is there already,

50
00:03:46.010 --> 00:03:47.580
at least partly,

51
00:03:47.630 --> 00:03:56.470
so what would you expect to happen? Well let's try it out. What we see is that element two jumps into a new

52
00:03:56.470 --> 00:04:03.340
line and this cell where it previously was stays empty because there is no element we could put in there.

53
00:04:03.550 --> 00:04:10.110
Element four could be put in there but it comes after element two in a DOM order and it doesn't jump ahead.

54
00:04:10.960 --> 00:04:18.730
So element two gets into a new line because it couldn't take that line as it was already partly taken

55
00:04:18.730 --> 00:04:20.690
by element three.

56
00:04:20.860 --> 00:04:24.960
Interesting, but what if we now also set the row in element two,

57
00:04:25.020 --> 00:04:37.560
so on that red element? If I set grid row start to let's say line number two and then I set grid row

58
00:04:37.690 --> 00:04:43.210
end to span one, which I don't have to do by the way, this is the default,

59
00:04:43.220 --> 00:04:49.150
so you can also omit this but if I set it to be really clear about what's happening, then I'm saying

60
00:04:49.540 --> 00:04:54.000
the red row here, element two should start in this row,

61
00:04:54.010 --> 00:04:58.710
so it should really be in that row where the green element also is.

62
00:04:58.720 --> 00:05:01.230
Let's reload and see what happens.

63
00:05:01.330 --> 00:05:04.210
Now indeed, they overlap as you can see.

64
00:05:04.480 --> 00:05:12.700
We get this area here where we have both element two and element three and that is something very important

65
00:05:12.700 --> 00:05:13.560
to remember,

66
00:05:13.720 --> 00:05:16.150
elements can overlap,

67
00:05:16.210 --> 00:05:24.910
they can occupy the same cell, if and that's important, if you explicitly set this. The grid will always

68
00:05:24.910 --> 00:05:31.180
try to avoid this but of course there are situations where you want to have overlapping cells and then

69
00:05:31.180 --> 00:05:37.180
you can force it by clearly setting the column and row position.

70
00:05:37.180 --> 00:05:39.760
Now the question is, which one is on top?

71
00:05:40.000 --> 00:05:47.470
And the answer is the DOM order is important, element three comes after element two and therefore, element

72
00:05:47.470 --> 00:05:48.970
three is on top.

73
00:05:49.060 --> 00:05:53.950
We can change this with the set index though, even though we don't have position absolute but the grid

74
00:05:53.950 --> 00:06:00.700
supports it, we can set the set index on element two, which would not be on top normally, to 10 let's say.

75
00:06:01.180 --> 00:06:03.730
The default value of auto is equal to zero,

76
00:06:03.760 --> 00:06:09.280
so 10 is definitely higher. If we now reload, we see the red one is on top now.

77
00:06:09.760 --> 00:06:16.930
So this is something extremely useful to take away, that you got different ways of targeting starts and

78
00:06:16.930 --> 00:06:22.390
ends of your columns and rows and that elements can overlap.

79
00:06:22.570 --> 00:06:28.030
And with that, let's dive into one other thing we can do with these line numbers.
