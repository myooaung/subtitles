1
00:00:02,310 --> 00:00:07,770
Now that we worked on all these styles here, on the styles of our elements,

2
00:00:07,950 --> 00:00:10,260
let's think about validation.

3
00:00:10,260 --> 00:00:12,380
Now what does validation mean?

4
00:00:12,420 --> 00:00:20,310
Validation means that in a real form, we typically require certain things; we want to make sure that

5
00:00:20,430 --> 00:00:24,890
no field is empty for example, that the email field has a valid email address,

6
00:00:24,930 --> 00:00:26,520
stuff like that.

7
00:00:26,520 --> 00:00:32,370
Now there are tons of ways of implementing validation and this is not really about the implementation

8
00:00:32,370 --> 00:00:36,990
logic, you normally always have to do validation on the server

9
00:00:36,990 --> 00:00:37,860
as a side note,

10
00:00:37,890 --> 00:00:43,800
so validate the inputs on your server side code because the client can always be tricked, here

11
00:00:43,860 --> 00:00:46,850
it's only about providing nice user feedback.

12
00:00:47,040 --> 00:00:50,810
Now which typical approaches do you have for validation?

13
00:00:51,030 --> 00:00:54,650
Typically as I said, you use server side validation.

14
00:00:54,750 --> 00:01:01,440
So you click that button, a HTTP request is sent to the server and once it reaches the server, it there

15
00:01:01,440 --> 00:01:09,000
is validated and maybe if it's invalid, the form page is returned to the client and you present it to

16
00:01:09,000 --> 00:01:14,090
the user again and you want to mark the inputs which are invalid as invalid.

17
00:01:14,100 --> 00:01:21,570
Now one obvious approach to giving the user such feedback is that you define special CSS classes

18
00:01:21,840 --> 00:01:23,610
which are attached to an input

19
00:01:23,610 --> 00:01:29,610
if it is invalid and it is attached to that input on the server side when this page is re-rendered or

20
00:01:29,660 --> 00:01:34,760
also on the client-side through Javascript. Now here we will hardcode it in there though

21
00:01:34,830 --> 00:01:40,580
but it's easy to then just add this conditionally in a real project when the form is invalid.

22
00:01:40,590 --> 00:01:42,530
So let's say the e-mail would be invalid,

23
00:01:42,720 --> 00:01:47,030
then you might add a class named invalid, the name is totally up to you though

24
00:01:47,250 --> 00:01:52,590
and again, this is added either on the server when you rendered the page or through Javascript.

25
00:01:52,600 --> 00:01:54,410
Now here we hardcoded it,

26
00:01:54,420 --> 00:02:00,170
the idea now is to simply take that invalid class and give it a special style.

27
00:02:00,300 --> 00:02:12,500
So now we could in the end just go to our signup-form input selector here and say signup-form input.invalid,

28
00:02:12,540 --> 00:02:22,820
this simply selects all inputs that are invalid and probably do the same for selects and then just maybe

29
00:02:22,820 --> 00:02:28,850
set the border to one pixel solid and red and a background color of

30
00:02:29,000 --> 00:02:37,550
maybe not red but some light red color, like this. With this if you save this and reload,

31
00:02:37,550 --> 00:02:39,710
now the e-mail would be marked as read.

32
00:02:39,730 --> 00:02:41,430
Now the border, here

33
00:02:41,440 --> 00:02:48,400
I actually just want to set the border color to red and I need to reposition this so that this takes

34
00:02:49,340 --> 00:02:54,170
priority, I'll add it of course and that is the right way

35
00:02:54,440 --> 00:02:59,420
after all my other input styles because this always should overwrite all other styles because it's only

36
00:02:59,570 --> 00:03:00,950
conditionally anyways

37
00:03:01,100 --> 00:03:05,500
and now we have this clear invalid state and that's really all that's to it.

38
00:03:05,600 --> 00:03:09,780
You would add this class to any input that is deemed invalid,

39
00:03:09,980 --> 00:03:14,710
so for example, let's also add it to the checkbox and see how it looks there

40
00:03:15,770 --> 00:03:18,950
and let's also add it to the select element here,

41
00:03:18,950 --> 00:03:21,320
class invalid like this.

42
00:03:21,320 --> 00:03:22,580
If we reload,

43
00:03:22,580 --> 00:03:24,220
now these are invalid

44
00:03:24,230 --> 00:03:26,330
too. So that's pretty cool,

45
00:03:26,330 --> 00:03:28,600
so now we have a way of marking

46
00:03:28,600 --> 00:03:31,070
these, that's the manual approach.

47
00:03:31,070 --> 00:03:38,120
You simply add a class on any condition defined by you, either on a server or through Javascript and you

48
00:03:38,130 --> 00:03:41,940
just simply give that class the invalid styling you want to have.

49
00:03:42,110 --> 00:03:45,950
Obviously, you're not restricted to backgrounds and borders here,

50
00:03:45,980 --> 00:03:50,890
you can set whatever you want. Now this is the manual approach,

51
00:03:51,210 --> 00:03:56,250
HTML and CSS actually offer you a more elegant way of doing that though,

52
00:03:56,450 --> 00:04:01,720
there is a special pseudo selector, the invalid pseudo selector.

53
00:04:01,810 --> 00:04:03,320
So let's add another rule here,

54
00:04:03,350 --> 00:04:07,680
signup-form and let's target any element inside of that form.

55
00:04:07,700 --> 00:04:12,710
So there is a blank after signup-form which has the invalid pseudo selector.

56
00:04:12,710 --> 00:04:15,840
You could of course also restrict this to only target inputs or selects,

57
00:04:15,840 --> 00:04:21,180
here I'm targeting anything. With this if I save this and I reload,

58
00:04:21,200 --> 00:04:22,970
nothing happens here

59
00:04:23,910 --> 00:04:30,600
but in the e-mail, you actually see as soon as I click out of there, this now has the invalid style.

60
00:04:30,600 --> 00:04:33,010
The reason for this is that HTML

61
00:04:33,040 --> 00:04:41,070
so to say or the browser automatically validates this because our e-mail input is of type email and it

62
00:04:41,070 --> 00:04:42,440
detects that

63
00:04:42,690 --> 00:04:52,020
T here is no valid email address and hence, it marks this as invalid and adds this special invalid pseudo

64
00:04:52,020 --> 00:04:53,370
selector.

65
00:04:53,370 --> 00:05:01,570
The only problem we have is that our nice border is getting overwritten by that not selector here,

66
00:05:01,800 --> 00:05:10,770
even though we specify our selector here with invalid after that, the reason for this simply is that

67
00:05:10,920 --> 00:05:17,720
not and the selector in not takes a higher priority and hence, this goes first.

68
00:05:17,760 --> 00:05:25,290
Now here, one solution would be to actually add important, here you could make an argument for it because

69
00:05:25,290 --> 00:05:28,760
this is a temporary class only anyways and it should

70
00:05:28,800 --> 00:05:29,260
overwrite

71
00:05:29,280 --> 00:05:36,360
anything else, the other solution of course would be to incorporate this not selector here too and simply add

72
00:05:36,450 --> 00:05:38,300
this rule in there too,

73
00:05:38,430 --> 00:05:46,320
so add another rule here and target inputs which are not a checkbox which are invalid.

74
00:05:46,320 --> 00:05:47,950
This is really long though

75
00:05:48,090 --> 00:05:53,020
and from a performance perspective, this is not so good to parse,

76
00:05:53,190 --> 00:05:58,120
so maybe we just go with the important solution here

77
00:05:58,200 --> 00:05:59,700
in this rare case.

78
00:05:59,850 --> 00:06:06,180
So now with that, if we reload and I type a T in there again, it's invalid again.

79
00:06:06,330 --> 00:06:11,670
If I start typing, we get the green background because the focus state takes a higher priority but that's

80
00:06:11,670 --> 00:06:12,280
fine

81
00:06:12,540 --> 00:06:14,440
but I'd say this is a 

82
00:06:14,700 --> 00:06:18,060
nice automatic way of validating this.

83
00:06:18,090 --> 00:06:24,720
Now if you want to validate the other inputs too, this is now just HTML, you can add things like the required

84
00:06:24,720 --> 00:06:31,250
attribute, a HTML and browser feature which tells the browser that this is invalid if it's empty.

85
00:06:31,290 --> 00:06:39,090
So we can add required to all the inputs here, like this and to the password

86
00:06:39,320 --> 00:06:44,790
and now if we reload, everything is ready right from the start because it's all empty

87
00:06:44,900 --> 00:06:50,400
and only if we enter something there, we get out of that invalid state.

88
00:06:50,420 --> 00:06:52,220
Now it's up to you if you want that,

89
00:06:52,310 --> 00:06:56,470
obviously you're greeting your user with an all red form here.

90
00:06:56,480 --> 00:06:59,060
You could find some combinations,

91
00:06:59,060 --> 00:07:07,060
for example you could change your selector to not select any invalid elements inside the signup-form

92
00:07:07,520 --> 00:07:08,150
here

93
00:07:08,360 --> 00:07:09,620
but anything inside a

94
00:07:09,620 --> 00:07:16,670
signup-form which has a class needs validation or whatever you want, you are free to name this however

95
00:07:16,670 --> 00:07:22,760
you want and then you add this class dynamically with the help of Javascript when the submit button

96
00:07:22,760 --> 00:07:23,780
was clicked,

97
00:07:23,840 --> 00:07:26,750
then you would apply these styles

98
00:07:26,780 --> 00:07:31,880
after the user had a chance of doing something but you essentially need Javascript for that,

99
00:07:31,910 --> 00:07:33,100
it doesn't work without that.

100
00:07:33,110 --> 00:07:35,320
So I'll go with this approach for now

101
00:07:35,360 --> 00:07:38,390
and now we added quick and easy validation.

102
00:07:38,390 --> 00:07:42,470
One important note, there also is a valid pseudo selector

103
00:07:42,470 --> 00:07:45,800
and as you might be able to guess, this just does the opposite.

104
00:07:45,800 --> 00:07:48,140
So now anything that is treated is valid

105
00:07:48,140 --> 00:07:54,170
and please note that even the button or the form as a whole to be precise has this valid invalid style,

106
00:07:54,170 --> 00:07:59,630
now everything that's treated as valid would get these styles. So I'll turn this back to invalid

107
00:07:59,750 --> 00:08:02,680
but again, these are nice things to know.

108
00:08:02,930 --> 00:08:04,710
Now one other nice thing to know; 

109
00:08:04,880 --> 00:08:08,450
in the Mozilla Developer Network documentation for invalid,

110
00:08:08,630 --> 00:08:11,670
if you scroll down, you'll not just see examples,

111
00:08:11,690 --> 00:08:15,080
you also can see the browser compatibility which is quite good.

112
00:08:15,320 --> 00:08:21,920
You'll also note that the overall form invalid and the same is true for valid classes which we saw in

113
00:08:21,920 --> 00:08:27,590
action a second ago when the button became red, this is not supported in all browsers, to be precise

114
00:08:27,670 --> 00:08:31,940
Edge and Internet Explorer, the usual suspects, they don't implement it,

115
00:08:31,940 --> 00:08:40,100
so if you're relying on that, might not work. In the way we're using it on a per input level, this is supported

116
00:08:40,280 --> 00:08:41,700
in all browsers though,

117
00:08:41,720 --> 00:08:43,230
so that's great.

118
00:08:43,310 --> 00:08:45,030
Now with that, we're almost done,

119
00:08:45,110 --> 00:08:48,280
let's focus on this button now before we finish.
