1
00:00:02,070 --> 00:00:04,040
So what is flex shrink?

2
00:00:04,270 --> 00:00:11,260
Well as you can imagine, it defines the behavior our elements have once we decrease the width.

3
00:00:11,500 --> 00:00:17,140
Now keep in mind that the current default behavior is this one, that we basically shrink the elements

4
00:00:17,260 --> 00:00:20,100
up to the point where the content requires the space,

5
00:00:20,200 --> 00:00:27,330
at least this is true when we apply the flex wrap with no wrap right here which we will keep like that.

6
00:00:27,340 --> 00:00:36,700
Now let's add flex shrink to our item 5 and item 6 again, flex shrink like that and the default value

7
00:00:36,700 --> 00:00:46,600
for flex shrink is one. Let's also add this right here to our item 6, like that. If we now reload the page, you

8
00:00:46,600 --> 00:00:51,230
can see, the behavior is exactly the one we had before.

9
00:00:51,230 --> 00:00:58,990
Now if I change flex shrink right here to zero for example for our last item, then you can see that now,

10
00:00:59,200 --> 00:01:01,640
the element cannot shrink anymore.

11
00:01:01,750 --> 00:01:07,200
So as you can see, it only shrinks up to the 350 pixels width we defined

12
00:01:07,420 --> 00:01:11,260
but as soon as it hits this value, it cannot decrease its width

13
00:01:11,380 --> 00:01:13,600
as you can see it, right here and right there.

14
00:01:13,600 --> 00:01:14,780
So that's the first thing.

15
00:01:14,980 --> 00:01:22,120
If we add flex shrink to our item right here, this item will not become smaller than the defined width

16
00:01:22,300 --> 00:01:23,500
it has.

17
00:01:23,500 --> 00:01:26,180
So this is flex shrink 0,

18
00:01:26,440 --> 00:01:34,840
what happens now if we add flex shrink with a value of 1 to our item 5 right here and let's say a flex

19
00:01:34,840 --> 00:01:38,380
shrink value of 4 to our sixth item?

20
00:01:38,590 --> 00:01:41,560
Well let's see, if we reload the page, you can see

21
00:01:41,560 --> 00:01:43,030
nothing changes right here.

22
00:01:43,210 --> 00:01:47,560
So here, that's the width of 350 for both items

23
00:01:47,860 --> 00:01:55,640
but if I now decrease the width, it's hard to see but if we inspect it, let's maybe decrease it a bit more

24
00:01:55,640 --> 00:02:01,750
to round about 340, a little bit to go, one more time,

25
00:02:02,580 --> 00:02:03,850
yes like that,

26
00:02:03,930 --> 00:02:12,450
now we can see that from the initial width of 350 pixels for item 5, we now have 340 pixels left, so

27
00:02:12,450 --> 00:02:14,720
10 pixels less than the initial value.

28
00:02:15,060 --> 00:02:23,160
But our last item already decreased by round about 40 pixels, so four times the value we had for our

29
00:02:23,160 --> 00:02:28,070
fifth item because we have flex shrink of one right here and four right there

30
00:02:28,200 --> 00:02:31,200
and that's exactly how flex shrink works.

31
00:02:31,290 --> 00:02:38,250
It allows you first to specify if an element is allowed to shrink, as we saw with the default value of

32
00:02:38,250 --> 00:02:38,720
1,

33
00:02:38,730 --> 00:02:41,770
all elements can indeed shrink, with a value of zero,

34
00:02:41,790 --> 00:02:44,150
you can ensure that this is not possible

35
00:02:44,430 --> 00:02:47,530
and if you add a flex shrink value which is different from zero,

36
00:02:47,720 --> 00:02:51,540
it first allows us to allow our elements to shrink

37
00:02:51,780 --> 00:02:58,200
but if we apply a bigger shrink value to different elements, then this will also define how much more

38
00:02:58,260 --> 00:03:03,260
one element is allowed to shrink when comparing it to another element

39
00:03:03,480 --> 00:03:06,580
and that's actually what we can do with flex shrink.

40
00:03:07,020 --> 00:03:10,640
With that, we only have one property left right now.
