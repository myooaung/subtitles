WEBVTT
1
00:00:02.370 --> 00:00:05.750
So we saw the concept of inheritance in action,

2
00:00:05.940 --> 00:00:10.080
how can we now ensure that our choose your plan

3
00:00:10.110 --> 00:00:19.980
h1 tag actually doesn't get the same style as the h1 tag tag in the first section, in the product overview?

4
00:00:20.070 --> 00:00:25.800
Now we get that same style, we get anton and then the white color which we overwrite with the class but

5
00:00:25.800 --> 00:00:31.600
not the font family, we get it because of that h1 selector and we can verify this if we inspect that

6
00:00:31.620 --> 00:00:37.130
h1 tag, the green one. Here you can see the h1 selector is passing this font family,

7
00:00:37.160 --> 00:00:38.070
I don't want that,

8
00:00:38.190 --> 00:00:39.750
I want to use the default one.

9
00:00:40.920 --> 00:00:45.400
Since I want to use the default, there are two ways of solving this.

10
00:00:45.450 --> 00:00:52.700
The first one is that we also go to the section title and set font family to inherit,

11
00:00:52.800 --> 00:00:57.890
this is a special keyword which simply means please use the inherited style,

12
00:00:57.900 --> 00:01:04.260
basically you can think of that increasing the specificity of iheritance for that specific property

13
00:01:04.260 --> 00:01:04.590
only

14
00:01:04.590 --> 00:01:11.610
though. This will work since we have section title on the second h1 tag so if we save this, we can

15
00:01:11.610 --> 00:01:14.940
reload the page and now actually get a different style here.

16
00:01:15.030 --> 00:01:20.880
If you inspect this now, you'll see font family inherit is taking effect and that actually is Monserrat

17
00:01:21.060 --> 00:01:22.440
as you can see if you tick it off,

18
00:01:22.440 --> 00:01:27.870
even though that seems to be not used, it actually is because of the inherit keyword but this is not

19
00:01:27.870 --> 00:01:29.470
necessarily the best way.

20
00:01:29.670 --> 00:01:36.900
If we ever have another h1 tag, which maybe has a different class but also should use the default font

21
00:01:36.900 --> 00:01:37.640
family,

22
00:01:37.800 --> 00:01:42.170
we have to add font family inherit on that class too.

23
00:01:42.630 --> 00:01:49.770
Would be nicer if it could do the opposite and simply say, hey this h1 tag in the first section, that

24
00:01:49.770 --> 00:01:56.070
should be the only one that gets this font family instead of all h1 tags by default,

25
00:01:56.070 --> 00:02:03.900
so instead of excluding anything that does not get it, we should simply only include this first h1 tag.

26
00:02:04.320 --> 00:02:10.170
Now of course one way of doing that would be to simply assign a class or ID to that h1 tag, so we could

27
00:02:10.170 --> 00:02:14.390
name this first section title

28
00:02:14.400 --> 00:02:21.230
but that's a really dumb class name because it's probably not getting re-used, so class might not be

29
00:02:21.230 --> 00:02:22.580
the best choice

30
00:02:22.580 --> 00:02:27.290
and if we ever add a first section, we should rename this to second section as it wouldn't make sense

31
00:02:27.290 --> 00:02:28.230
otherwise.

32
00:02:28.380 --> 00:02:34.040
Now we could turn it to an ID and now the reusing thing wouldn't be a problem, an ID wouldn't be super

33
00:02:34.040 --> 00:02:35.020
bad here

34
00:02:35.270 --> 00:02:37.800
but we already have ID on the section,

35
00:02:37.820 --> 00:02:42.730
semantically maybe we don't want to add one here and still we have the naming issue.

36
00:02:42.830 --> 00:02:49.670
So one thing we can use is a so-called combinator, a combinator allows us to combine multiple selectors

37
00:02:49.850 --> 00:02:53.400
to be more precise about what we want to select.

38
00:02:53.450 --> 00:03:00.200
We can add a combinator to that h1 selector to narrow down which type of h1 tags we want to select

39
00:03:00.770 --> 00:03:10.350
and we can say we want to select any h1 tag that is inside of an element with the ID product overview.

40
00:03:10.430 --> 00:03:19.250
So in our app, that is inside of that first section. We add such a combinator by or we combine the selectors

41
00:03:19.250 --> 00:03:26.750
so to say, by adding the other selector that matters to us, in our case this ID selector. We add it

42
00:03:26.750 --> 00:03:28.670
in front of the h1 tag,

43
00:03:28.730 --> 00:03:35.750
so this can be read as any h1 tag inside of product overview and actually, h1 doesn't have to

44
00:03:35.750 --> 00:03:37.280
be a direct child,

45
00:03:37.280 --> 00:03:42.830
there could be elements in between, so you could have a wrapping div, that would still work, I'll quickly

46
00:03:42.830 --> 00:03:44.820
add one for demo purposes.

47
00:03:45.050 --> 00:03:52.760
If you save this now and you reload the page, you see you've got the same style as before

48
00:03:53.150 --> 00:03:59.810
even if you go back to main.css and remove the font family inherit property declaration from section

49
00:03:59.810 --> 00:04:00.650
title.

50
00:04:00.650 --> 00:04:07.460
So even if you remove that and you reload the page, you will see the second hi tag still has a different

51
00:04:07.460 --> 00:04:12.860
font because now if you inspect the first one, only this one gets the font family anton

52
00:04:13.010 --> 00:04:20.630
because now here, we have a selector that only targets h1 elements that are nested somewhere inside

53
00:04:20.630 --> 00:04:26.090
an element which has the product overview ID, which of course only is the case for our first section in

54
00:04:26.090 --> 00:04:27.620
our app here.

55
00:04:27.620 --> 00:04:33.930
Now again, the div here was only used to demonstrate that it doesn't have to be a direct child,

56
00:04:33.980 --> 00:04:40.370
we can remove it and it will of course still work and what we're using here is a so-called combinator

57
00:04:41.000 --> 00:04:47.880
because we combine multiple selectors. As a side note if you use combinators, you also create a higher

58
00:04:47.880 --> 00:04:48.970
specificity.

59
00:04:49.320 --> 00:04:56.500
So if you still had a h1 tag after that, let's reintroduce the old one with sans-serif, then you should

60
00:04:56.500 --> 00:04:59.360
still see that anton gets applied,

61
00:04:59.410 --> 00:05:03.810
let me show this to you by reloading the page. If you inspect the first font here,

62
00:05:03.820 --> 00:05:11.440
the first h1 tag, you see we still have font family anton because our hashtag product overview h1 selector

63
00:05:11.830 --> 00:05:13.320
has a higher specificity

64
00:05:13.540 --> 00:05:17.700
as you can tell by the order in the developer tools than just the h1 tag,

65
00:05:18.010 --> 00:05:20.510
even though the h1 tag tag comes second,

66
00:05:20.710 --> 00:05:22.720
so it comes later in the file.

67
00:05:22.900 --> 00:05:30.240
But and that's the last important piece about specificity, the rule with more information to it

68
00:05:30.240 --> 00:05:35.410
so to say and this has more information because we narrowed down which hi tags we want to

69
00:05:35.410 --> 00:05:42.180
style, the rule with more information, like this one wins over rules with less information, like this one.

70
00:05:42.250 --> 00:05:46.990
So the more specific rule has a higher specificity, makes sense I guess.

71
00:05:46.990 --> 00:05:49.260
Also don't mistake this with inheritance,

72
00:05:49.270 --> 00:05:52.250
we're not inheriting a style from product overview here,

73
00:05:52.300 --> 00:05:57.290
we're setting a style only for h1 tags that happened to be inside product overview.

74
00:05:57.310 --> 00:06:01.810
It's not the same as inheritance because this is not passed down automatically,

75
00:06:01.810 --> 00:06:04.470
we're explicitly selecting h1 tags here.

76
00:06:04.840 --> 00:06:10.130
So this is the last piece about specificity and this is what combinators are.

77
00:06:10.150 --> 00:06:14.160
Now there are more combinators, let's explore them in the next video.
