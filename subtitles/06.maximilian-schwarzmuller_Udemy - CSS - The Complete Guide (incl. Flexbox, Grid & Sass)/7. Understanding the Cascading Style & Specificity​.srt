1
00:00:02,270 --> 00:00:09,650
In the last lecture, we added different selectors to ensure that our second section and h1 tag doesn't

2
00:00:09,650 --> 00:00:12,040
look like our first one.

3
00:00:12,080 --> 00:00:15,040
Now maybe there's one thing you did wonder about.

4
00:00:15,350 --> 00:00:22,940
We do a set the h1 tag to have a white color and then we set the section title class to set a

5
00:00:22,940 --> 00:00:24,080
green color,

6
00:00:24,110 --> 00:00:28,880
now actually both selectors here match our second h1 tag.

7
00:00:29,180 --> 00:00:31,650
We still have our h1 selector in place here, 

8
00:00:31,670 --> 00:00:34,370
so it still selects the second h1 tag too,

9
00:00:34,430 --> 00:00:41,140
it doesn't stop selecting it just because we added a class and then a class seems to overwrite this.

10
00:00:41,150 --> 00:00:48,040
Now you could argue, this happens because the section title class is defined after the tag selector

11
00:00:48,500 --> 00:00:56,170
and as the file probably is parsed from top to bottom which it is, this simply overwrites the previous rule.

12
00:00:56,240 --> 00:01:02,690
You would not be entirely wrong by this, though actually if you switch the order, just for demo purposes

13
00:01:02,690 --> 00:01:07,940
here and you reload the page, you see that the styling still applies,

14
00:01:07,940 --> 00:01:12,820
so the class still overwrites the h1 tags style.

15
00:01:12,910 --> 00:01:20,260
On the other hand, if you quickly assign the h1 tag again and set the font family back to serif and

16
00:01:20,260 --> 00:01:26,500
not to anton and now you save and reload, you'll see the h1 tags get changed,

17
00:01:26,500 --> 00:01:28,240
so the fonts did change.

18
00:01:28,300 --> 00:01:34,690
So the order does seem to matter but only if you use the same selector, the class still overwrites

19
00:01:34,690 --> 00:01:35,170
the color,

20
00:01:35,170 --> 00:01:36,510
so that's really strange

21
00:01:36,610 --> 00:01:38,800
and there's one additional strange thing.

22
00:01:38,800 --> 00:01:42,680
If the class somehow overwrites the styling for the h1 tag,

23
00:01:42,760 --> 00:01:48,890
so if it still sets the green color, why doesn't it also clear the font family?

24
00:01:48,910 --> 00:01:52,050
Now we set it back to serif manually here with the second rule

25
00:01:52,090 --> 00:01:59,050
but even before we did this and it becomes clearer if we set this to sans-serif, like this, now it's changed

26
00:01:59,050 --> 00:02:01,730
to sans-serif style but not back to anton,

27
00:02:01,750 --> 00:02:06,620
now you can still see this section title doesn't seem to clear the font family.

28
00:02:06,820 --> 00:02:13,810
It clearly overwrites the color but it doesn't reset the font family, so it still keeps that style around.

29
00:02:13,840 --> 00:02:15,890
So two things are going on here,

30
00:02:15,940 --> 00:02:24,970
multiple rules seem to affect the same element and additionally, the different rules here seem to have different

31
00:02:24,970 --> 00:02:28,180
priorities because otherwise, how would we explain that

32
00:02:28,190 --> 00:02:34,950
this section title class overwrites the color, even though it comes before we set up the other rules?

33
00:02:34,960 --> 00:02:39,650
Now let's explore what's going on here and for that, we'll use the developer tools.

34
00:02:39,850 --> 00:02:47,410
You can open the developer tools by pressing command option and i on Mac or F12 on Windows or you open

35
00:02:47,410 --> 00:02:49,750
it from the menu of your browser,

36
00:02:49,800 --> 00:02:54,370
here I'm talking about to Chrome developer tools by the way. Now in the developer tools, you get a couple

37
00:02:54,370 --> 00:02:56,400
of options in case you never worked with that.

38
00:02:56,560 --> 00:03:02,080
If you clicked on elements, you'll see your HTML code so to say and you can select elements by expanding

39
00:03:02,080 --> 00:03:07,950
and clicking there and then at the bottom, you see which styles are getting applied to these elements.

40
00:03:07,960 --> 00:03:10,700
You can also select that element from within your page

41
00:03:10,930 --> 00:03:13,080
by right-clicking on it and choosing inspect,

42
00:03:13,150 --> 00:03:18,130
this also works if the developer tools are closed, they will open then. If they are opened, it will just

43
00:03:18,160 --> 00:03:24,700
jump to that element and select it, as you can see here and you can also pick that tool here on the

44
00:03:24,700 --> 00:03:26,450
top left of the developer tools

45
00:03:26,560 --> 00:03:31,020
and now click on element in your DOM to also quickly inspect it.

46
00:03:31,030 --> 00:03:38,410
Now if we do that on that h1 tag in our second section and we bring this up a bit here, we can actually

47
00:03:38,410 --> 00:03:44,320
see which styles are getting applied and the list here has to be red from top to bottom with the top

48
00:03:44,320 --> 00:03:47,990
most style taking the highest priority.

49
00:03:48,070 --> 00:03:51,740
Now there you see, a couple of styles are indeed getting applied.

50
00:03:51,780 --> 00:03:56,120
If you scroll down, these are all styles that are applied to that h1 tag.

51
00:03:56,320 --> 00:03:59,100
You see the topmost is actually an empty style,

52
00:03:59,200 --> 00:04:04,570
that would be the inline style if you add the style attribute to the h1 tag because it turns out that

53
00:04:04,630 --> 00:04:07,020
inline styles have the highest priority

54
00:04:07,270 --> 00:04:14,980
or this concept is called specificity to be precise but then you see that the class selector, section

55
00:04:14,980 --> 00:04:22,270
title appears. So it seems to have a higher specificity than the h1 selectors which are coming below it,

56
00:04:22,270 --> 00:04:28,750
you'll see two h1 selectors because we got two in our CSS code and if you watch closely, you'll see the second

57
00:04:28,750 --> 00:04:36,160
one with just the font family, sans-serif, has a higher priority or specificity than the first one simply

58
00:04:36,160 --> 00:04:41,440
because it comes second in the file and the file is parsed top to bottom but again as already recognized,

59
00:04:41,770 --> 00:04:47,980
the section title class overwrites them both even though it comes earlier in the file but internally

60
00:04:48,490 --> 00:04:54,410
by the CSS specification, it seems to have a higher specificity and it does.

61
00:04:54,610 --> 00:04:59,650
If you scroll down further, there also are some browser defaults for that element and these have the

62
00:04:59,650 --> 00:05:00,640
lowest priority

63
00:05:00,640 --> 00:05:01,800
they do apply though

64
00:05:01,870 --> 00:05:05,830
but you can overwrite them and that is something we will also do later.

65
00:05:05,860 --> 00:05:08,230
So these are the styles which are getting applied,

66
00:05:08,260 --> 00:05:16,110
the fact that we have multiple rules affect the same element is the cascading part

67
00:05:16,120 --> 00:05:17,770
of the feature we're using here.

68
00:05:17,800 --> 00:05:24,280
CSS stands for cascading style sheets and cascading simply means multiple styles can be applied

69
00:05:24,310 --> 00:05:27,670
or multiple rules can be applied to the same element.

70
00:05:27,670 --> 00:05:30,620
Now these rules may lead to conflicts though,

71
00:05:30,670 --> 00:05:34,590
here for example, we got our color set up in the h1 tag

72
00:05:34,870 --> 00:05:36,930
and in the section title class.

73
00:05:37,420 --> 00:05:39,490
Now to resolve such conflicts,

74
00:05:39,610 --> 00:05:46,400
CSS knows a concept called specificity and there are clear rules included in the CSS specification

75
00:05:46,840 --> 00:05:53,560
that define how such conflict should be resolved and which type of selector has a higher specificity

76
00:05:53,560 --> 00:05:54,660
.

77
00:05:54,730 --> 00:05:56,520
Now here is an overview,

78
00:05:56,630 --> 00:06:02,710
as I said cascading means multiple rules are applied to the same element. Specificity resolve conflicts

79
00:06:02,740 --> 00:06:08,180
arising from that fact and specificity then simply has the following order,

80
00:06:08,200 --> 00:06:13,270
the tag selector and also pseudo elements selectors which we haven't had a look at yet but which we

81
00:06:13,270 --> 00:06:17,200
will see in the course, have the lowest priority, the lowest specificity.

82
00:06:17,470 --> 00:06:23,080
Well actually, the universal selector, that star has the lowest priority but you rarely use that.

83
00:06:23,370 --> 00:06:31,300
So tag selectors have the lowest one then, a higher specificity is assigned to class and pseudo class

84
00:06:31,380 --> 00:06:33,190
as well as attribute selectors.

85
00:06:33,190 --> 00:06:39,090
So these three are on the same level and if we then have two conflicts here, simply the latter one in

86
00:06:39,090 --> 00:06:40,260
the same file wins,

87
00:06:40,270 --> 00:06:43,810
just as we had it for the two h1 tags in our CSS file.

88
00:06:44,170 --> 00:06:47,240
Now pseudo classes are also something we'll see later in the course,

89
00:06:47,260 --> 00:06:50,770
this is something like controlling hover effects on an element,

90
00:06:51,160 --> 00:06:59,910
so if you mouse over it. A higher specificity is assigned to ID selectors, so if an element has a tag, a class

91
00:07:00,000 --> 00:07:05,250
and an ID selector and they all set the color of that element, the ID selector would actually win

92
00:07:05,400 --> 00:07:08,260
no matter where it is positioned in the CSS file.

93
00:07:09,310 --> 00:07:12,830
The highest priority however is assigned to inline styles,

94
00:07:12,880 --> 00:07:15,280
we saw that earlier but we shouldn't use them

95
00:07:15,460 --> 00:07:19,850
but if you add them, they will actually overwrite all other styles, 

96
00:07:19,870 --> 00:07:21,840
they have the highest specificity.

97
00:07:22,390 --> 00:07:27,850
Now there are more rules connected to specificity, some advanced things connected to things like inheritance

98
00:07:27,850 --> 00:07:33,850
which we hadn't a look at yet but these rules here are important to keep in mind,

99
00:07:33,910 --> 00:07:38,480
tag selectors have the lowest specificity, inline styles have the highest.

100
00:07:38,480 --> 00:07:41,220
Now this doesn't mean that you should always use inline styles,

101
00:07:41,230 --> 00:07:47,140
it just means you should be aware of this and you should style your page cleverly by actually using

102
00:07:47,290 --> 00:07:48,900
all these types of selectors,

103
00:07:48,970 --> 00:07:54,730
maybe without inline styles though and simply be aware of how they overwrite each other and it's actually

104
00:07:54,730 --> 00:07:59,190
not hard to work with these correctly and we will do it throughout the entire project,

105
00:07:59,320 --> 00:08:02,150
so there is a lot of space for you to practice it.

106
00:08:02,230 --> 00:08:09,580
So back to code then, let's see how this actually has an impact in reality and what else is connected

107
00:08:09,580 --> 00:08:10,590
to this concept.
