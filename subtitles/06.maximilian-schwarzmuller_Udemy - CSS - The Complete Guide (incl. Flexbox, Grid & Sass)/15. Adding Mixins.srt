1
00:00:02,330 --> 00:00:08,450
So we had a look at the inheritance in the last video, a very useful feature that also saves us time

2
00:00:08,450 --> 00:00:10,570
when writing more complex code.

3
00:00:10,940 --> 00:00:15,140
Let's now have a look at mixins, this will be the last thing I want to show you

4
00:00:15,260 --> 00:00:18,800
but this is a really cool feature that also allows you to save code.

5
00:00:18,800 --> 00:00:25,280
Now what are mixins? Mixins are reuseable custom functions if you want to put it like this.

6
00:00:25,820 --> 00:00:31,860
You already got functions, like map-get or lighten which do utility things for you

7
00:00:32,150 --> 00:00:34,760
and mixins are really your own functions you can write.

8
00:00:34,880 --> 00:00:37,640
They are super useful whenever you want to

9
00:00:37,760 --> 00:00:42,460
for example put some code which you commonly use into such a function

10
00:00:42,530 --> 00:00:49,760
so that you just have to include your mixin function in that place and then enter that code you outsourced.

11
00:00:49,930 --> 00:00:50,280
Well,

12
00:00:50,330 --> 00:00:52,530
that sounds super complicated, doesn't it?

13
00:00:52,700 --> 00:00:59,390
So let's see that in action, for example here, we got our display property in the container and we get

14
00:00:59,390 --> 00:01:03,830
that again further down in the documentation links class.

15
00:01:03,910 --> 00:01:08,390
Since I use vendor prefixes here, we get the same code four times,

16
00:01:08,390 --> 00:01:11,190
so we got the four display properties here.

17
00:01:11,240 --> 00:01:19,370
Now we can put this into a mixin. A mixin is created by using the @mixin directive provided by SASS,

18
00:01:19,370 --> 00:01:21,970
this is not a CSS feature.

19
00:01:21,990 --> 00:01:29,490
Then you define any name you want, like maybe display-flex but again, it's up to you how you rename

20
00:01:29,490 --> 00:01:37,140
this. Thereafter, you add parentheses and you could accept arguments here,

21
00:01:37,240 --> 00:01:39,720
I'll show an example for this in a second too,

22
00:01:39,820 --> 00:01:45,700
for now we'll use this without arguments and then you simply add the code which you want to print out

23
00:01:45,730 --> 00:01:47,460
whenever you use that mixin,

24
00:01:47,620 --> 00:01:53,980
in our case, that display flex code. So I'll cut it from the container and put it into the mixin, just

25
00:01:53,980 --> 00:01:59,700
like that, no selector, nothing like that, it's just added between the curly braces.

26
00:01:59,710 --> 00:02:05,110
Now we can use that mixin in all the places where we want to enter this code.

27
00:02:05,260 --> 00:02:12,400
So we go back to the container and there, you now don't just put it in like this but instead, you add

28
00:02:12,550 --> 00:02:17,590
@include, another directive provided by SASS.

29
00:02:17,650 --> 00:02:20,730
@include then takes the mixin you want to use

30
00:02:20,800 --> 00:02:23,220
and don't forget the parentheses.

31
00:02:23,230 --> 00:02:29,410
Now with this line, this code which is placed in the directive, in the mixin I should say, will be

32
00:02:29,410 --> 00:02:31,470
added in this place here,

33
00:02:31,480 --> 00:02:37,360
so in the container. Now I can copy that and add it in the other place where I want to use that same code,

34
00:02:37,480 --> 00:02:44,440
so down here in documentation links. If we now save this and let it recompile and we reload the page,

35
00:02:45,000 --> 00:02:48,130
you again see no difference because it works as before

36
00:02:48,250 --> 00:02:54,550
but if you have a look at the compiled code here, you can actually see that this display code is entered

37
00:02:54,550 --> 00:02:55,290
correctly,

38
00:02:55,390 --> 00:03:03,400
so that mixin is used and that of course is super useful because with that now, we can put code snippets

39
00:03:03,520 --> 00:03:08,070
which we use quite a lot into our own mixins.

40
00:03:08,110 --> 00:03:14,800
Now another thing we could put into a mixin is our media query here. So we could add another mixin

41
00:03:14,800 --> 00:03:21,970
with @mixin and name this media-min-width

42
00:03:22,160 --> 00:03:28,190
and now here I actually want to put that media query, like this.

43
00:03:28,190 --> 00:03:35,780
Now we got two problems with that mixin, we hardcoded the min-width and for this application, this would

44
00:03:35,780 --> 00:03:42,350
even be fine because we always use 40rem but it would be nicer if we could accept this as an argument,

45
00:03:42,590 --> 00:03:45,590
to have a truly reusable mixin here.

46
00:03:45,590 --> 00:03:49,150
So this can be fixed by simply accepting an argument,

47
00:03:49,250 --> 00:03:55,670
you name this with a dollar sign at the beginning and then any name of your choice, like width and then

48
00:03:55,670 --> 00:04:01,160
you simply use that variable, which is now only available within the mixin, in all the places where you

49
00:04:01,160 --> 00:04:03,230
want to use that width, like this.

50
00:04:03,230 --> 00:04:07,780
So now we're creating a mixin where we can actually pass in different widths

51
00:04:07,880 --> 00:04:13,850
and the only thing that is shared amongst all the mixins is the min-width condition here, which is exactly

52
00:04:13,850 --> 00:04:15,380
what I want to have here.

53
00:04:15,650 --> 00:04:17,270
We got one other problem though,

54
00:04:17,360 --> 00:04:23,650
we got the font size hardcoded in here and not in all places where we use the media query

55
00:04:23,750 --> 00:04:27,680
we want to set the font size and that's even the case for our application,

56
00:04:27,680 --> 00:04:34,310
for example we also set the width. So we somehow need to tweak this a little bit, to not just accept an

57
00:04:34,310 --> 00:04:41,690
argument which gives us the width, the minimum width we set but to also be able to pass in the actual content

58
00:04:41,690 --> 00:04:43,520
of the media query from outside.

59
00:04:43,520 --> 00:04:44,960
Now how would that work?

60
00:04:45,260 --> 00:04:51,640
Inside of your mixin, you can simply add another directive, @content like this.

61
00:04:51,650 --> 00:04:52,990
This now allows you to use

62
00:04:53,020 --> 00:04:57,420
the mixin a bit differently and pass in dynamic content.

63
00:04:57,530 --> 00:05:05,690
You would now use it by going to the place where you want to use it, using @include as before, then the

64
00:05:05,690 --> 00:05:13,050
mixin name, media-min-width, then I would pass the width here but then I would add curly braces thereafter

65
00:05:13,700 --> 00:05:18,100
and again add the content which should be injected into the mixin.

66
00:05:18,090 --> 00:05:27,290
So this would translate to this code being added but the font size here would be placed in this

67
00:05:27,590 --> 00:05:34,250
@content's place here and the width passed as an argument would be used here in the min-width condition.

68
00:05:35,030 --> 00:05:36,540
If I save this

69
00:05:36,620 --> 00:05:38,840
and we have a look at the compiled file,

70
00:05:39,050 --> 00:05:40,520
we can see just that,

71
00:05:40,610 --> 00:05:44,130
we got that media query where we set the font size.

72
00:05:44,270 --> 00:05:48,300
Behind the scenes though, in our SASS code, we use our mixin.

73
00:05:48,320 --> 00:05:55,870
So now I can copy that code here, @include, media-min-width with the 40rem and use it anywhere where

74
00:05:55,880 --> 00:06:01,970
I want to use that mixin but I will swap out the content with the actual content I want to use in

75
00:06:01,970 --> 00:06:05,140
that place, like in this case here the width

76
00:06:05,270 --> 00:06:07,880
and let's see if we got another media query,

77
00:06:08,000 --> 00:06:09,990
no, this seem to be all.

78
00:06:10,090 --> 00:06:11,960
With that, we can save this again

79
00:06:12,200 --> 00:06:14,330
and if we reload this page again,

80
00:06:14,330 --> 00:06:17,090
still no changes. I guess from this part,

81
00:06:17,090 --> 00:06:19,510
this is a really boring section, isn't it?

82
00:06:19,550 --> 00:06:26,510
But it's really interesting to learn how you can use mixins, both in a simpler form or with arguments

83
00:06:26,510 --> 00:06:31,170
and even a content hook to create a really reusable code snippets

84
00:06:31,240 --> 00:06:33,780
and with that, we got much leaner code.

85
00:06:33,780 --> 00:06:39,530
Now again, for mixins just as for the inheritance, you can dive in much deeper and you should simply

86
00:06:39,530 --> 00:06:42,980
click this link here to learn more about mixins.
