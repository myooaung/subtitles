1
00:00:02,200 --> 00:00:07,180
We had a look at CSS variables and one problem there was browser support.

2
00:00:07,180 --> 00:00:09,170
Now let's stay in that world,

3
00:00:09,240 --> 00:00:16,000
obviously our users are able to use different browsers and different browsers implement new features

4
00:00:16,060 --> 00:00:18,560
differently and at different speed.

5
00:00:18,760 --> 00:00:24,790
Once a certain feature reaches recommendation state, you saw that earlier in this module, it should be

6
00:00:24,790 --> 00:00:26,760
implemented in all browsers equally

7
00:00:26,950 --> 00:00:34,150
but until then, each browser might not implement it or implement some of its features or maybe implement

8
00:00:34,150 --> 00:00:38,720
some features differently than other browsers do, simply to try how it works,

9
00:00:38,770 --> 00:00:43,210
how the users of that browser use that feature and so on.

10
00:00:43,240 --> 00:00:45,950
For this, we got vendor prefixes.

11
00:00:46,150 --> 00:00:53,230
This is a mechanism which allows browser vendors to implement an upcoming feature in an early version

12
00:00:53,620 --> 00:00:56,880
without breaking the feature when it finally gets released,

13
00:00:57,010 --> 00:01:04,120
here's an example, flexbox. We add it by setting display to flex and nowadays, the support for this is

14
00:01:04,120 --> 00:01:05,270
pretty good.

15
00:01:05,290 --> 00:01:12,190
A few years ago when that standard was brand new and in very active development, browsers started to

16
00:01:12,190 --> 00:01:18,760
implement flexbox step-by-step by implementing prefixed versions of the flex value,

17
00:01:18,760 --> 00:01:20,590
here are some examples.

18
00:01:20,590 --> 00:01:25,950
Now the interesting thing here is these are special values which only work in some browsers,

19
00:01:26,080 --> 00:01:29,600
for example webkit box works in older versions of Safari,

20
00:01:29,690 --> 00:01:34,780
webkit flex in newer versions, MS flexbox in Internet Explorer and Edge.

21
00:01:34,960 --> 00:01:39,550
So these values are not understood by other browsers but they don't need to understand it because they

22
00:01:39,550 --> 00:01:44,470
either already implement the flex value or their own prefixed version.

23
00:01:44,560 --> 00:01:46,210
Why do we use these prefixes at all, 

24
00:01:46,210 --> 00:01:48,700
why don't they just all use flex?

25
00:01:48,910 --> 00:01:55,390
Because if the standard then changes or becomes finalized and they therefore all implement the same

26
00:01:55,390 --> 00:02:02,860
specification, then if they suddenly overwrite the flex value to now work different than it used to be,

27
00:02:03,340 --> 00:02:08,450
a lot of websites that were early adopters of that technology would get broken.

28
00:02:08,560 --> 00:02:12,910
Therefore they have their early adopter implementation,

29
00:02:12,940 --> 00:02:19,630
the prefixed version which they don't change even if the standard changes or becomes final and then

30
00:02:19,630 --> 00:02:23,220
they implement their final version once that is the case.

31
00:02:23,260 --> 00:02:28,960
So now they got different implementations and this allows you a developer to use these features ahead

32
00:02:28,960 --> 00:02:29,770
of time,

33
00:02:29,770 --> 00:02:34,730
it also ensures that your webpage won't suddenly break and it also,

34
00:02:34,780 --> 00:02:40,810
that's another advantage, allows you to safely implement a certain feature which will still work, at least

35
00:02:40,810 --> 00:02:41,720
to some extent,

36
00:02:41,800 --> 00:02:48,580
even in older browsers because let's say an older version of Safari already supported flexbox with

37
00:02:48,580 --> 00:02:53,080
webkit box but didn't support it with display flex.

38
00:02:53,080 --> 00:02:59,740
Well, if you also provide that vendor prefix, it will understand this, it won't understand the other values

39
00:02:59,740 --> 00:03:02,290
for display but it will then just ignore them,

40
00:03:02,290 --> 00:03:05,570
that's how the web works and therefore, you can still use flexbox

41
00:03:05,620 --> 00:03:09,490
even in that older version, even though it doesn't support flex yet.

42
00:03:09,850 --> 00:03:11,390
I hope this makes sense.

43
00:03:11,440 --> 00:03:17,590
So vendor prefixes are really great as they allow us to implement new features ahead of time and even

44
00:03:17,590 --> 00:03:19,390
support older browsers.

45
00:03:19,400 --> 00:03:21,960
Now let's see that in action on our website,

46
00:03:21,970 --> 00:03:24,320
how would we implement such prefixes?

47
00:03:24,340 --> 00:03:30,270
It's actually recommended to implement prefixes for flexbox, so let's do that.

48
00:03:30,280 --> 00:03:35,490
Let's search for a flex value in our shared.css file, like here

49
00:03:35,710 --> 00:03:42,580
and the correct way of implementing this would be to specify the display property a couple of times and

50
00:03:42,580 --> 00:03:49,120
the final standard, the default one should be at the very bottom, because your code is parsed from top to bottom,

51
00:03:49,390 --> 00:03:54,850
so they will start with the older versions and that's important so that the older versions don't overwrite

52
00:03:54,850 --> 00:03:57,500
the newer ones and if they understand the newer one,

53
00:03:57,520 --> 00:04:02,470
it will just overwrite the older ones which they also might have understood, otherwise if they don't understand

54
00:04:02,470 --> 00:04:03,890
the newer one one but an older one

55
00:04:03,910 --> 00:04:07,020
they'll use that. If they don't understand any of these,

56
00:04:07,030 --> 00:04:08,890
well it just won't work.

57
00:04:08,950 --> 00:04:11,470
So here we could add webkit box,

58
00:04:11,470 --> 00:04:21,340
we could then add display MS flexbox and we could add display webkit flex for newer versions of Safari.

59
00:04:22,080 --> 00:04:23,670
This is the correct setup,

60
00:04:23,680 --> 00:04:26,760
this one overwrites the legacy versions,

61
00:04:26,920 --> 00:04:30,220
so if a browser understands the new one, it will use that one,

62
00:04:30,370 --> 00:04:31,190
if it doesn't,

63
00:04:31,240 --> 00:04:36,960
maybe one of these can kick in. With that if we save that and we go back and we reload our page,

64
00:04:37,000 --> 00:04:41,730
everything should still work there as it did before because we didn't break anything,

65
00:04:41,860 --> 00:04:45,700
we now just have a chance of also making this work on older browsers.
