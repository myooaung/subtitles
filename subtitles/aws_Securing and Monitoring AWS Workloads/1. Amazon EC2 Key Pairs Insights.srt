1
00:00:02,900 --> 00:00:07,540
Welcome to this module on Access Control to EC2 Instances.

2
00:00:07,540 --> 00:00:12,050
In the first clip, you will learn about Amazon EC2 key pairs.

3
00:00:12,050 --> 00:00:13,220
Before we dive deep,

4
00:00:13,220 --> 00:00:16,420
let's understand different types of keys that are used

5
00:00:16,420 --> 00:00:19,720
for encryption and decryption purposes.

6
00:00:19,720 --> 00:00:21,610
First type is symmetric keys.

7
00:00:21,610 --> 00:00:24,290
When symmetric keys are used,

8
00:00:24,290 --> 00:00:29,940
the same key is used both for encryption and decryption purposes.

9
00:00:29,940 --> 00:00:38,180
Some of the common symmetric key algorithms are AES, DES, and RC5.

10
00:00:38,180 --> 00:00:42,500
In a symmetric encryption, you will have two types of keys.

11
00:00:42,500 --> 00:00:47,840
One is public key, and the other one is private, or secret key.

12
00:00:47,840 --> 00:00:50,940
Public keys are used during the encryption purposes,

13
00:00:50,940 --> 00:00:55,240
and the private key is used during the decryption process.

14
00:00:55,240 --> 00:01:03,020
Some of the common asymmetric key algorithms are RSA, DSA, and PKCS.

15
00:01:03,020 --> 00:01:11,700
Amazon EC2 uses 2048‑bit SSH2 RSA keys in securing its instances.

16
00:01:11,700 --> 00:01:17,050
Let's log into EC2 console, launch a new instance,

17
00:01:17,050 --> 00:01:22,320
and see how to create and secure EC2 key pairs.

18
00:01:22,320 --> 00:01:24,160
Click on instances to your left.

19
00:01:24,160 --> 00:01:29,330
Click Launch Instance.

20
00:01:29,330 --> 00:01:36,240
Let me select one of the Amazon Linux instance that is free tier eligible.

21
00:01:36,240 --> 00:01:40,600
Click Configure Instance Details.

22
00:01:40,600 --> 00:01:42,850
I'm going to accept all the default conflagration.

23
00:01:42,850 --> 00:01:48,640
Click Add Storage.

24
00:01:48,640 --> 00:01:53,140
I will accept all the default settings again.

25
00:01:53,140 --> 00:01:55,080
Click Tags.

26
00:01:55,080 --> 00:02:00,440
Choose Configure Security Group.

27
00:02:00,440 --> 00:02:04,400
You can see only port 22 is open to accept incoming

28
00:02:04,400 --> 00:02:10,140
traffic so that we can SSH to our instance.

29
00:02:10,140 --> 00:02:14,240
Click on Review and Launch.

30
00:02:14,240 --> 00:02:16,700
Click Launch.

31
00:02:16,700 --> 00:02:18,140
Before launching,

32
00:02:18,140 --> 00:02:21,100
I can choose an existing key pair to use with this

33
00:02:21,100 --> 00:02:25,280
instance or choose to create a new one.

34
00:02:25,280 --> 00:02:31,640
Since I don't have a key pair yet, I'll go ahead and create one.

35
00:02:31,640 --> 00:02:37,220
Give the key pair a name, and download the key pair.

36
00:02:37,220 --> 00:02:40,210
The key that you're downloading is a private key,

37
00:02:40,210 --> 00:02:43,060
and the public key will be in the EC2 instance.

38
00:02:43,060 --> 00:02:48,950
It's very important that you save this private key in a

39
00:02:48,950 --> 00:02:53,580
secure location as anyone who has access to this key can

40
00:02:53,580 --> 00:02:56,830
access your instance as well.

41
00:02:56,830 --> 00:03:00,340
You will also not be able to download the private key once again.

42
00:03:00,340 --> 00:03:07,220
Click Launch Instance, and your instance is getting launched now.

43
00:03:07,220 --> 00:03:16,140
Let me click on the instance ID, and the instance state is currently pending.

44
00:03:16,140 --> 00:03:19,930
It took a few seconds before the provisioning was completed and

45
00:03:19,930 --> 00:03:24,020
the instance state is changed to running.

46
00:03:24,020 --> 00:03:27,140
Let me connect to this instance.

47
00:03:27,140 --> 00:03:27,840
Click Connect.

48
00:03:27,840 --> 00:03:34,020
You have three options to connect to this instance.

49
00:03:34,020 --> 00:03:39,210
Let me choose the standalone SSH client to connect.

50
00:03:39,210 --> 00:03:44,540
Let me SSH to this instance that we just launched.

51
00:03:44,540 --> 00:03:49,290
I'm using the Globomantics key pair that we just created,

52
00:03:49,290 --> 00:03:53,960
and I'm able to successfully connect to this instance.

53
00:03:53,960 --> 00:03:59,700
Let me show you where the public key is stored in this instance.

54
00:03:59,700 --> 00:04:04,080
Go to .ssh directory.

55
00:04:04,080 --> 00:04:09,040
Open the file authorized_keys.

56
00:04:09,040 --> 00:04:13,140
This lists the public key of the Globomantics.

57
00:04:13,140 --> 00:04:17,580
So any time you connect to this instance using your private key,

58
00:04:17,580 --> 00:04:24,710
it's validated against this public key before establishing a secure connection.

59
00:04:24,710 --> 00:04:29,090
Now consider a scenario where an employee has been moved to a

60
00:04:29,090 --> 00:04:33,190
different project and you need to make sure he or she no

61
00:04:33,190 --> 00:04:34,500
longer connects to this instance.

62
00:04:34,500 --> 00:04:41,120
Asking them to delete the primary key may not be a safer option.

63
00:04:41,120 --> 00:04:42,080
Instead,

64
00:04:42,080 --> 00:04:46,460
you can use a third‑party key generation utility to create new

65
00:04:46,460 --> 00:04:51,140
keys and distribute it to your new team.

66
00:04:51,140 --> 00:04:52,270
We will use ssh‑keygen.

67
00:04:52,270 --> 00:04:59,140
Enter a file name to store the private key.

68
00:04:59,140 --> 00:05:03,240
I'm not going to enter any passphrase.

69
00:05:03,240 --> 00:05:08,940
You can see the public key is stored with .pub extension.

70
00:05:08,940 --> 00:05:11,740
This public key needs to be copied to the

71
00:05:11,740 --> 00:05:17,240
authorized_keys files under .ssh folder.

72
00:05:17,240 --> 00:05:23,840
So let me copy it and paste the contents here and save the file.

73
00:05:23,840 --> 00:05:28,080
It's also very important to download the private key file and delete

74
00:05:28,080 --> 00:05:33,340
the private key to prevent any unauthorized access.

75
00:05:33,340 --> 00:05:35,720
Now that I have downloaded the private key,

76
00:05:35,720 --> 00:05:41,710
let me try to SSH to this instance using the newly created private key,

77
00:05:41,710 --> 00:05:47,340
and you can see I'm able to successfully log in to this instance.

78
00:05:47,340 --> 00:05:47,860
Now,

79
00:05:47,860 --> 00:05:51,430
let's go ahead and delete the key pairs that we created

80
00:05:51,430 --> 00:05:54,220
before and check what happens to our access.

81
00:05:54,220 --> 00:05:59,540
Click Key Pairs to your left.

82
00:05:59,540 --> 00:06:02,190
Select the key globomantics.

83
00:06:02,190 --> 00:06:09,440
Click Actions and choose Delete.

84
00:06:09,440 --> 00:06:14,340
Confirm the deletion by entering delete.

85
00:06:14,340 --> 00:06:20,140
Now that the key pair is deleted, let's try connecting to our instance.

86
00:06:20,140 --> 00:06:24,420
I'm trying to SSH to the instance using the key pair that we just deleted,

87
00:06:24,420 --> 00:06:28,340
and we are still able to successfully connect.

88
00:06:28,340 --> 00:06:31,930
So deleting the key pair from the console does not remove

89
00:06:31,930 --> 00:06:35,420
the access that were already launched.

90
00:06:35,420 --> 00:06:39,480
In order to completely remove the access, you need to remove the public key.

91
00:06:39,480 --> 00:06:48,070
Let me open the authorized_keys file under .ssh directory.

92
00:06:48,070 --> 00:06:52,820
Remove the public key corresponding to Globomantics.

93
00:06:52,820 --> 00:06:56,840
If you are unsure which key belongs to Globomantics,

94
00:06:56,840 --> 00:07:04,120
pay close attention to the last word of the keys which identifies the name.

95
00:07:04,120 --> 00:07:10,400
Delete this public key, save, and exit.

96
00:07:10,400 --> 00:07:14,760
Now let's try reconnecting to the instance again,

97
00:07:14,760 --> 00:07:18,740
and you can see that the permission is denied.

98
00:07:18,740 --> 00:07:30,000
So the only way to access this instance is using the private key globo_dev that we created using the ssh‑keygen utility.

