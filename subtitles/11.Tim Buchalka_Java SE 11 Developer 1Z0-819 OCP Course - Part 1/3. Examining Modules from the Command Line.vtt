WEBVTT
1
1

00:00:05.390  -->  00:00:06.690 line:15% 
<v ->Right so I've got a command line open</v>
2

2

00:00:06.690  -->  00:00:09.540
and here we can view the S.E
3

3

00:00:09.540  -->  00:00:12.660
the standard edition and JDK visible modules
4

4

00:00:12.660  -->  00:00:14.201
using the following command.
5

5

00:00:14.201  -->  00:00:15.930
We're gonna start by typing Java
6

6

00:00:16.890  -->  00:00:20.100
space dash dash list dash modules
7

7

00:00:21.830  -->  00:00:23.120
and you can see a big list of modules
8

8

00:00:23.120  -->  00:00:24.740
that will appear when you do that.
9

9

00:00:24.740  -->  00:00:26.500
And what you can do is examine a module
10

10

00:00:26.500  -->  00:00:28.240
its version, its dependencies,
11

11

00:00:28.240  -->  00:00:31.130
and it's published states by adding the describe module
12

12

00:00:31.130  -->  00:00:32.320
argument to a Java course
13

13

00:00:32.320  -->  00:00:34.160
I'm gonna do it with Java.
14

14

00:00:34.160  -->  00:00:38.253
Space dash dash describe dash module.
15

15

00:00:40.370  -->  00:00:42.120
So let's try it for Java dot login.
16

16

00:00:44.530  -->  00:00:47.930
And you can see the output showing from that command.
17

17

00:00:47.930  -->  00:00:49.850
Now you can also use the Jdeps tool
18

18

00:00:49.850  -->  00:00:52.270
which is Java's class dependency analyzer
19

19

00:00:52.270  -->  00:00:53.860
to also analyse modules.
20

20

00:00:53.860  -->  00:00:55.860
For example to view a quick summary
21

21

00:00:55.860  -->  00:00:58.040
of direct dependencies on a module
22

22

00:00:58.040  -->  00:00:59.140
you try this command
23

23

00:00:59.140  -->  00:01:02.560
that's jdeps space and the command we want is
24

24

00:01:02.560  -->  00:01:06.883
dash dash print dash module dash deps.
25

25

00:01:08.040  -->  00:01:12.020
Then dash M which specifies which module we're interested in
26

26

00:01:12.020  -->  00:01:15.150
and we can do for example java dot SQL.
27

27

00:01:18.325  -->  00:01:19.470
And you can see we're got a quick summary
28

28

00:01:19.470  -->  00:01:22.090
of the direct dependencies for this module.
29

29

00:01:22.090  -->  00:01:27.090
Incidentally module or dash M can be used interchangeably.
30

30

00:01:27.480  -->  00:01:28.940
And obviously the abbreviated one.
31

31

00:01:28.940  -->  00:01:29.773
Module
32

32

00:01:31.720  -->  00:01:32.970
so it's two dashes there.
33

33

00:01:34.530  -->  00:01:36.780
Dash dash module or dash M
34

34

00:01:36.780  -->  00:01:38.790
Basically just the same information.
35

35

00:01:38.790  -->  00:01:42.110
Now as an alternative you can use another option
36

36

00:01:42.110  -->  00:01:47.110
jdeps dash dash list dash reduced deps
37

37

00:01:50.090  -->  00:01:53.133
dash dash module java.sql again
38

38

00:01:55.460  -->  00:01:58.150
so it's not a comment unlimited list as it was previously.
39

39

00:01:58.150  -->  00:01:59.550
Now you can also get a listing
40

40

00:01:59.550  -->  00:02:02.480
which includes implied read edges if there are any
41

41

00:02:02.480  -->  00:02:05.660
and by using the list reduced deps you won't see that
42

42

00:02:05.660  -->  00:02:07.198
so if we did the same thing
43

43

00:02:07.198  -->  00:02:12.198
jdeps space dash dash list dash deps
44

44

00:02:13.420  -->  00:02:16.630
and dash dash module java dot sql
45

45

00:02:16.630  -->  00:02:17.463
sql again
46

46

00:02:18.750  -->  00:02:19.583
that gives the same thing.
47

47

00:02:19.583  -->  00:02:20.990
But a better example let's use
48

48

00:02:20.990  -->  00:02:23.890
we'll search for rowset to give us a bit more information.
49

49

00:02:25.301  -->  00:02:27.850
And you can see java dot sql is shown in the list there
50

50

00:02:27.850  -->  00:02:30.430
for dependencies amongst other things.
51

51

00:02:30.430  -->  00:02:32.260
So again jdeps to see the difference
52

52

00:02:32.260  -->  00:02:35.320
dash dash list reduced deps
53

53

00:02:38.350  -->  00:02:41.463
dash M java dot sql dot rowset
54

54

00:02:44.060  -->  00:02:46.060
you can see there the output's slightly different
55

55

00:02:46.060  -->  00:02:48.600
it omits Java login and Java dot xml
56

56

00:02:48.600  -->  00:02:51.053
which are your implied read edges here.
57

57

00:02:51.900  -->  00:02:53.190
Right so that's a very quick overview
58

58

00:02:53.190  -->  00:02:55.140
and we're gonna be discussing more of these commands
59

59

00:02:55.140  -->  00:02:56.810
in upcoming videos.
60

60

00:02:56.810  -->  00:02:58.890
But in the last video and this one
61

61

00:02:58.890  -->  00:03:01.410
we discussed the goals of the Modular JDK
62

62

00:03:01.410  -->  00:03:03.400
as stated by project jigsaw.
63

63

00:03:03.400  -->  00:03:05.826
I introduced you to standard and non-standard modules.
64

64

00:03:05.826  -->  00:03:07.730
I introduced you to a module graph
65

65

00:03:07.730  -->  00:03:10.920
and showed you the Java SE module graph in action.
66

66

00:03:10.920  -->  00:03:11.870
And as you saw in this video
67

67

00:03:11.870  -->  00:03:13.270
I just introduced you to some of the options
68

68

00:03:13.270  -->  00:03:16.880
that Java and the jdeps tools support for examining modules.
69

69

00:03:16.880  -->  00:03:17.713 line:15% 
In the next video
70

70

00:03:17.713  -->  00:03:20.600 line:15% 
we'll discuss how you would create a module and run it.
71

71

00:03:20.600  -->  00:03:21.963 line:15% 
See you in the next video.
