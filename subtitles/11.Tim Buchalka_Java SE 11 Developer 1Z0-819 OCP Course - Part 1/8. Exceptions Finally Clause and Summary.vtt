WEBVTT
1
1

00:00:05.450  -->  00:00:06.580
<v Tim>All right so continuing on</v>
2

2

00:00:06.580  -->  00:00:09.250
from the last video, let's explore what happens now
3

3

00:00:09.250  -->  00:00:11.880
if you throw an exception in a finally clause.
4

4

00:00:11.880  -->  00:00:13.720
So we need a new class to be created,
5

5

00:00:13.720  -->  00:00:15.220
a final trial is what we'll call it,
6

6

00:00:15.220  -->  00:00:16.820
in our exceptions project.
7

7

00:00:16.820  -->  00:00:21.653
(mouse clicking and typing on a keyboard)
8

8

00:00:25.970  -->  00:00:28.070
This class has a main method, as you can see,
9

9

00:00:28.070  -->  00:00:30.350
and also another method that throws an I/O exception
10

10

00:00:30.350  -->  00:00:33.350
from the catch clause, there are no surprises there.
11

11

00:00:33.350  -->  00:00:35.820
Now, if we call the method in the main method
12

12

00:00:35.820  -->  00:00:40.420
by adding some code ... (typing on a keyboard)
13

13

00:00:40.420  -->  00:00:41.280
you can see that straight away,
14

14

00:00:41.280  -->  00:00:42.647
we've generated a compile error.
15

15

00:00:42.647  -->  00:00:46.040
And the error, unhandled exception Java IO exception,
16

16

00:00:46.040  -->  00:00:47.910
which by now you should know why.
17

17

00:00:47.910  -->  00:00:50.220
An I/O exception is a checked exception in a code
18

18

00:00:50.220  -->  00:00:52.270
that calls it needs to catch it.
19

19

00:00:52.270  -->  00:00:54.360
But instead of adding a try catch clause
20

20

00:00:54.360  -->  00:00:57.210
around our method call, let's instead change
21

21

00:00:57.210  -->  00:00:59.730
the method and have it throw a different exception
22

22

00:00:59.730  -->  00:01:01.620
from the finally clause.
23

23

00:01:01.620  -->  00:01:04.291
So, I'm basically just gonna replace that method.
24

24

00:01:04.291  -->  00:01:05.630
(typing on a keyboard)
25

25

00:01:05.630  -->  00:01:07.710
You can see we're now throwing a new runtime exception
26

26

00:01:07.710  -->  00:01:09.470
from the finally clause there.
27

27

00:01:09.470  -->  00:01:12.900
So now we don't have a compile error, why not?
28

28

00:01:12.900  -->  00:01:16.130
Well, the catch clause might try to throw an I/O exception,
29

29

00:01:16.130  -->  00:01:18.739
but the finally clause always gets executed
30

30

00:01:18.739  -->  00:01:21.280
and its execution will be the exception
31

31

00:01:21.280  -->  00:01:23.070
that is actually thrown.
32

32

00:01:23.070  -->  00:01:25.770
A runtime exception is unchecked and therefore
33

33

00:01:25.770  -->  00:01:28.610
the try catch in the calling block and the declaration
34

34

00:01:28.610  -->  00:01:30.853
in the method is no longer required.
35

35

00:01:33.610  -->  00:01:34.730
All right, so I think at this point now
36

36

00:01:34.730  -->  00:01:38.020
we've exhausted varieties with the catch clause.
37

37

00:01:38.020  -->  00:01:41.130
Let's review some of the catch clause constraints:
38

38

00:01:41.130  -->  00:01:44.920
A catch clause is not required for unchecked exceptions.
39

39

00:01:44.920  -->  00:01:47.450
A catch clause is required for checked exceptions,
40

40

00:01:47.450  -->  00:01:50.460
which are thrown from the code in the try block.
41

41

00:01:50.460  -->  00:01:52.400
Adding a catch clause for a checked exception
42

42

00:01:52.400  -->  00:01:53.650
that is never thrown from the code
43

43

00:01:53.650  -->  00:01:56.380
in the try block is a compiler error.
44

44

00:01:56.380  -->  00:01:58.060
You can have multiple catch clauses,
45

45

00:01:58.060  -->  00:02:01.963
each catch clause must specify a unique exception.
46

46

00:02:03.900  -->  00:02:06.250
Multiple catch clauses should be declared
47

47

00:02:06.250  -->  00:02:09.080
from most specific to least specific.
48

48

00:02:09.080  -->  00:02:12.490
It's a compiler error to define a more specific exception,
49

49

00:02:12.490  -->  00:02:14.670
after a less specific exception
50

50

00:02:14.670  -->  00:02:16.820
in the same inheritance tree.
51

51

00:02:16.820  -->  00:02:20.000
A clause that contains multiple exceptions in one clause,
52

52

00:02:20.000  -->  00:02:21.940
cannot declare two that are in
53

53

00:02:21.940  -->  00:02:25.170
the same inheritance tree in the same declaration.
54

54

00:02:25.170  -->  00:02:27.160
An exception parameter is not final
55

55

00:02:27.160  -->  00:02:29.140
in a single exception clause.
56

56

00:02:29.140  -->  00:02:31.903
But an exception parameter is implicitly final,
57

57

00:02:31.903  -->  00:02:34.713
if it is in a multiple exception clause.
58

58

00:02:35.780  -->  00:02:36.810
Right, so let's end this video here
59

59

00:02:36.810  -->  00:02:38.690
and in the next one let's start talking
60

60

00:02:38.690  -->  00:02:40.380
about exceptions which occur during
61

61

00:02:40.380  -->  00:02:43.790
the initialization of a class or an object.
62

62

00:02:43.790  -->  00:02:45.223
See you in the next video.
