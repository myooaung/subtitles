WEBVTT
1
1

00:00:04.829  -->  00:00:05.662
<v Instructor>All right let's talk more</v>
2

2

00:00:05.662  -->  00:00:07.640
about creating strings.
3

3

00:00:07.640  -->  00:00:08.640
Now you can create strings
4

4

00:00:08.640  -->  00:00:11.260
using the methods shown on these slides.
5

5

00:00:11.260  -->  00:00:12.560
The first string creation method
6

6

00:00:12.560  -->  00:00:15.370
is assigning a string literal to a string variable,
7

7

00:00:15.370  -->  00:00:17.210
and a string literal is contained in double quotes.
8

8

00:00:17.210  -->  00:00:21.010
So the example there is String s = "hello" in double quotes.
9

9

00:00:21.010  -->  00:00:22.750
We can also use string constructors
10

10

00:00:22.750  -->  00:00:24.440
of which there are several.
11

11

00:00:24.440  -->  00:00:27.050
Now it's important to note that string constructors
12

12

00:00:27.050  -->  00:00:28.980
for the byte, char and int arrays,
13

13

00:00:28.980  -->  00:00:33.030
take a second parameter which represents the starting index
14

14

00:00:33.030  -->  00:00:35.430
and also the third parameter is a count of elements
15

15

00:00:35.430  -->  00:00:37.380
which will be copied from the array,
16

16

00:00:37.380  -->  00:00:39.240
not an ending index.
17

17

00:00:39.240  -->  00:00:40.250
We've got a few examples there,
18

18

00:00:40.250  -->  00:00:42.027
String s1 = new String ("hello"),
19

19

00:00:44.190  -->  00:00:45.380
in the parenthesis.
20

20

00:00:45.380  -->  00:00:46.480
we've got a byte array
21

21

00:00:47.734  -->  00:00:48.567
Bytes = {a,b,c}.
22

22

00:00:52.690  -->  00:00:56.870
Then the next part is String s2 = new String bytes,
23

23

00:00:56.870  -->  00:00:58.170
which we've just defined.
24

24

00:00:58.170  -->  00:00:59.420
And we gotta very similar thing there
25

25

00:00:59.420  -->  00:01:00.740
but using a char array
26

26

00:01:00.740  -->  00:01:02.850
instead of a byte array in the next line.
27

27

00:01:02.850  -->  00:01:04.427
And finally using Stringbuilder.
28

28

00:01:04.427  -->  00:01:09.370
Stringbuilder sb = new StringBuilder("hello")
29

29

00:01:09.370  -->  00:01:11.583
and String s4 = new Stringsb.
30

30

00:01:12.500  -->  00:01:14.440
So that's using String constructors.
31

31

00:01:14.440  -->  00:01:16.750
And finally String concatenation,
32

32

00:01:16.750  -->  00:01:17.583
in the example there,
33

33

00:01:17.583  -->  00:01:22.440
a String s5 ="hello" + "world" + getmethodString.
34

34

00:01:24.927  -->  00:01:25.870
All right so moving on.
35

35

00:01:25.870  -->  00:01:28.178
In the last video I covered creating String objects
36

36

00:01:28.178  -->  00:01:31.140
using String literals and the String constructor.
37

37

00:01:31.140  -->  00:01:31.973
In this video,
38

38

00:01:31.973  -->  00:01:33.680
we're going to review some of the constructors methods
39

39

00:01:33.680  -->  00:01:35.296
which you may not have used as often
40

40

00:01:35.296  -->  00:01:38.050
as the single parameter constructors.
41

41

00:01:38.050  -->  00:01:40.650
Now these constructors have an offset parameter
42

42

00:01:40.650  -->  00:01:42.130
and a count parameter,
43

43

00:01:42.130  -->  00:01:44.980
and set the new String object to a partial region
44

44

00:01:44.980  -->  00:01:48.190
of the character sequence being passed to the constructor.
45

45

00:01:48.190  -->  00:01:49.023
So in other words,
46

46

00:01:49.023  -->  00:01:50.820
you're setting the value of the new String
47

47

00:01:50.820  -->  00:01:53.100
to some substring of the parameter string
48

48

00:01:53.100  -->  00:01:55.220
passed to the constructor.
49

49

00:01:55.220  -->  00:01:56.570
Now the beginning offset
50

50

00:01:56.570  -->  00:01:58.340
is an inclusive offset,
51

51

00:01:58.340  -->  00:01:59.920
meaning the character at that offset
52

52

00:01:59.920  -->  00:02:02.560
will be included in the substring.
53

53

00:02:02.560  -->  00:02:03.610
Now what is interesting to note
54

54

00:02:03.610  -->  00:02:05.700
and may cause headaches on the exam,
55

55

00:02:05.700  -->  00:02:07.045
is that for constructors,
56

56

00:02:07.045  -->  00:02:10.390
the parameter after the starting index parameter,
57

57

00:02:10.390  -->  00:02:12.470
is not an ending index parameter,
58

58

00:02:12.470  -->  00:02:15.320
but rather it's a count of characters to be included
59

59

00:02:15.320  -->  00:02:17.200
after the beginning offset.
60

60

00:02:17.200  -->  00:02:19.260
So if this count plus the offset
61

61

00:02:19.260  -->  00:02:21.070
exceeds the number of characters
62

62

00:02:21.070  -->  00:02:22.610
in the sequence being passed,
63

63

00:02:22.610  -->  00:02:23.520
you will get a runtime error,
64

64

00:02:23.520  -->  00:02:26.220
and we'll see an example of that in this video.
65

65

00:02:26.220  -->  00:02:28.090
So let's explore some examples.
66

66

00:02:28.090  -->  00:02:30.690
Now I'm still in the Strings project from the last video,
67

67

00:02:30.690  -->  00:02:31.690
but what I'm going to do
68

68

00:02:31.690  -->  00:02:33.470
is create a new class String constructor
69

69

00:02:33.470  -->  00:02:35.485
and then paste and code him.
70

70

00:02:35.485  -->  00:02:39.291
(mouse and keyboard clicking)
71

71

00:02:39.291  -->  00:02:43.124
(mouse and keyboard clicking)
72

72

00:02:45.167  -->  00:02:46.640
all right so this code simply creates
73

73

00:02:46.640  -->  00:02:48.740
three String objects with the same value
74

74

00:02:48.740  -->  00:02:52.410
using a char array, a byte array and an int array.
75

75

00:02:52.410  -->  00:02:53.653
A list of code points.
76

76

00:02:55.120  -->  00:02:57.740
So you see we got a full loop here for the char
77

77

00:02:57.740  -->  00:02:59.000
going through A to Z,
78

78

00:02:59.000  -->  00:03:02.050
and adding it to our char, our int array
79

79

00:03:02.050  -->  00:03:03.520
and also our bytes array,
80

80

00:03:03.520  -->  00:03:05.440
and once we've done that we then actually go through
81

81

00:03:05.440  -->  00:03:08.300
and creating a string using constructors
82

82

00:03:08.300  -->  00:03:09.780
based on the relevant type,
83

83

00:03:09.780  -->  00:03:11.963
whether it's an int, a char or a byte.
84

84

00:03:12.940  -->  00:03:14.010
Note a couple things,
85

85

00:03:14.010  -->  00:03:16.180
first if we just go back up and look at the code,
86

86

00:03:16.180  -->  00:03:19.760
we're needing to do casts on lines 21 and 24,
87

87

00:03:19.760  -->  00:03:21.920
although looking at the line 24 there,
88

88

00:03:21.920  -->  00:03:24.048
casting C to an int is actually redundant anyways,
89

89

00:03:24.048  -->  00:03:25.980
we don't need to technically do that,
90

90

00:03:25.980  -->  00:03:27.490
but certainly to create a byte array
91

91

00:03:27.490  -->  00:03:28.970
casting alphabet character to a byte,
92

92

00:03:28.970  -->  00:03:30.200
we need to do that.
93

93

00:03:30.200  -->  00:03:31.540
But also,
94

94

00:03:31.540  -->  00:03:32.700
make a note down here
95

95

00:03:32.700  -->  00:03:35.880
that you can't create a String with an integer array
96

96

00:03:35.880  -->  00:03:38.310
with a simple one args constructor,
97

97

00:03:38.310  -->  00:03:40.020
so we're using offset = 0
98

98

00:03:40.020  -->  00:03:41.900
and length being the length of the array,
99

99

00:03:41.900  -->  00:03:43.070
to get the full alphabet.
100

100

00:03:43.070  -->  00:03:44.130
So keep that in mind as well,
101

101

00:03:44.130  -->  00:03:46.840
and that's of course the code on line 39.
102

102

00:03:46.840  -->  00:03:48.450
So if you run this code,
103

103

00:03:48.450  -->  00:03:51.410
(mouse clicking)
104

104

00:03:51.410  -->  00:03:52.840
probably nothing new there for you to see,
105

105

00:03:52.840  -->  00:03:54.880
but it's just a review.
106

106

00:03:54.880  -->  00:03:57.140
But let's now explore constructors a little bit more,
107

107

00:03:57.140  -->  00:03:58.740
so I'm gonna add some more code now,
108

108

00:03:58.740  -->  00:04:00.040
to the end of this method.
109

109

00:04:01.055  -->  00:04:05.020
(mouse clicking and keyboard typing)
110

110

00:04:05.020  -->  00:04:06.970
You see I'm creating a String from the character array,
111

111

00:04:06.970  -->  00:04:08.270
so I've actually run this.
112

112

00:04:09.520  -->  00:04:11.630
Notice that we've got a run time exception here,
113

113

00:04:11.630  -->  00:04:15.080
specifically we've got a String index out of bounds.
114

114

00:04:15.080  -->  00:04:16.350
Now you can see here that we're passing
115

115

00:04:16.350  -->  00:04:19.250
in alphabet_Len to the constructor,
116

116

00:04:19.250  -->  00:04:22.190
but we're starting at offset 1 now.
117

117

00:04:22.190  -->  00:04:25.700
Because the third parameter is a length and not an offset,
118

118

00:04:25.700  -->  00:04:28.150
the code is failing and that's why we're getting this crash.
119

119

00:04:28.150  -->  00:04:30.130
Note that the length parameter for constructors
120

120

00:04:30.130  -->  00:04:32.270
cannot exceed the lengh of your input or A,
121

121

00:04:32.270  -->  00:04:34.055
the starting offset in other words.
122

122

00:04:34.055  -->  00:04:35.500
Right so clearly that's a problem,
123

123

00:04:35.500  -->  00:04:39.480
to fix this we need to replace the code on line 44,
124

124

00:04:39.480  -->  00:04:42.630
specifically, the third argument down here,
125

125

00:04:42.630  -->  00:04:46.829
that should be alphabet_len - offset
126

126

00:04:46.829  -->  00:04:48.719
and if we do that,
127

127

00:04:48.719  -->  00:04:50.799
(mouse clicking)
128

128

00:04:50.799  -->  00:04:52.640
we're passing the correct value,
129

129

00:04:52.640  -->  00:04:54.490
and the code actually works.
130

130

00:04:54.490  -->  00:04:55.941
And you can see now we're pretty into character
131

131

00:04:55.941  -->  00:04:57.530
where you're starting at the offset inclusive
132

132

00:04:57.530  -->  00:04:58.820
that we defined.
133

133

00:04:58.820  -->  00:05:00.040
Now let's try another example,
134

134

00:05:00.040  -->  00:05:02.860
we'd wanna maybe get a substring of characters,
135

135

00:05:02.860  -->  00:05:04.630
we're gonna change a call to the constructor
136

136

00:05:04.630  -->  00:05:06.800
for our int array to be even more specific,
137

137

00:05:06.800  -->  00:05:08.720
we only want the values that represent the letters
138

138

00:05:08.720  -->  00:05:10.810
F through J for example.
139

139

00:05:10.810  -->  00:05:12.382
So to do that,
140

140

00:05:12.382  -->  00:05:14.123
(keyboard typing)
141

141

00:05:14.123  -->  00:05:15.640
you cans see that we've got the offset = 5,
142

142

00:05:15.640  -->  00:05:17.330
int length = 5,
143

143

00:05:17.330  -->  00:05:18.580
and we run this code now,
144

144

00:05:21.140  -->  00:05:23.173
intString 2 = fghij.
145

145

00:05:24.990  -->  00:05:25.823
Alright and finally,
146

146

00:05:25.823  -->  00:05:28.142
you should know that you can specify the character set,
147

147

00:05:28.142  -->  00:05:31.670
or the character set name as a fourth parameter
148

148

00:05:31.670  -->  00:05:34.680
when creating a String object from a byte array.
149

149

00:05:34.680  -->  00:05:37.834
So in this following code which I'm pasting now,
150

150

00:05:37.834  -->  00:05:39.520
(keyboard typing)
151

151

00:05:39.520  -->  00:05:41.470
so I'm specifying the character set,
152

152

00:05:41.470  -->  00:05:43.450
but I only want the bytes that represent the letters
153

153

00:05:43.450  -->  00:05:45.000
C through K.
154

154

00:05:45.000  -->  00:05:46.510
You can see I'm doing that by using the
155

155

00:05:46.510  -->  00:05:47.343
offset = 2,
156

156

00:05:47.343  -->  00:05:48.580
a length = 9,
157

157

00:05:48.580  -->  00:05:50.270
but also passing the character set,
158

158

00:05:50.270  -->  00:05:51.729
in this case,
159

159

00:05:51.729  -->  00:05:55.517
java.nio.charset.StandardCharsets.ISO_8859_1
160

160

00:05:57.856  -->  00:05:59.306
So if you run this,
161

161

00:05:59.306  -->  00:06:01.080
(mouse clicking)
162

162

00:06:01.080  -->  00:06:04.180
we get the characters between C and K inclusive
163

163

00:06:04.180  -->  00:06:06.320
in byteString2.
164

164

00:06:06.320  -->  00:06:07.530
Right, so let's end off the hour here,
165

165

00:06:07.530  -->  00:06:09.040
in the next one we're gonna start talking about
166

166

00:06:09.040  -->  00:06:10.560
creating a String object
167

167

00:06:10.560  -->  00:06:12.405
using the String concatenate operator.
168

168

00:06:12.405  -->  00:06:13.993
See you in the next video.
