WEBVTT
1
1

00:00:05.400  -->  00:00:06.700
<v Instructor>So this is section five,</v>
2

2

00:00:06.700  -->  00:00:09.030
Working with Java Arrays.
3

3

00:00:09.030  -->  00:00:10.840
So we have been working all along in the course
4

4

00:00:10.840  -->  00:00:12.880
with Java arrays since most of our examples
5

5

00:00:12.880  -->  00:00:16.310
have had a main method with a String array args parameter.
6

6

00:00:16.310  -->  00:00:19.120
The args parameter is a single-dimensional array
7

7

00:00:19.120  -->  00:00:22.440
made up of java.lang.String references.
8

8

00:00:22.440  -->  00:00:25.390
So an array is a container object that holds a fixed number
9

9

00:00:25.390  -->  00:00:27.850
of values of a single type.
10

10

00:00:27.850  -->  00:00:29.620
The length of an array is established
11

11

00:00:29.620  -->  00:00:31.610
when the array is created.
12

12

00:00:31.610  -->  00:00:34.773
And an array can reference duplicate values.
13

13

00:00:35.660  -->  00:00:37.690
An array can be one-dimensional, two-dimensional,
14

14

00:00:37.690  -->  00:00:41.160
or multi-dimensional representing a matrix of data.
15

15

00:00:41.160  -->  00:00:44.240
Note that true support of multi-dimensional arrays
16

16

00:00:44.240  -->  00:00:46.430
is not supported but Java offers an array
17

17

00:00:46.430  -->  00:00:50.880
of arrays to support a multi-dimensional structure.
18

18

00:00:50.880  -->  00:00:53.710
You can store a subclass object in an array,
19

19

00:00:53.710  -->  00:00:56.900
declared to be the type of the superclass or interface,
20

20

00:00:56.900  -->  00:00:58.670
supporting polymorphism.
21

21

00:00:58.670  -->  00:01:01.620
For example, you can create an array of CharSequence
22

22

00:01:01.620  -->  00:01:03.622
that can store references to Strings,
23

23

00:01:03.622  -->  00:01:05.263
or StringBuilders or both.
24

24

00:01:06.770  -->  00:01:09.090
So the next slide shows a picture of representation
25

25

00:01:09.090  -->  00:01:10.550
of an array of elements.
26

26

00:01:10.550  -->  00:01:13.860
Each array is indexed, starting with the zero index,
27

27

00:01:13.860  -->  00:01:15.150
such that the last index
28

28

00:01:15.150  -->  00:01:17.733
is equal to the length of the array minus one.
29

29

00:01:18.730  -->  00:01:21.123
All right, so that's a very quick overview of arrays.
30

30

00:01:21.123  -->  00:01:23.520
The next video, we're going to review arrays,
31

31

00:01:23.520  -->  00:01:26.940
their deceration and initialization and some simple methods.
32

32

00:01:26.940  -->  00:01:28.240
See you in the next video.
