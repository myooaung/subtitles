WEBVTT
1
1

00:00:05.160  -->  00:00:06.190 line:15% 
<v Instructor>In the previous video,</v>
2

2

00:00:06.190  -->  00:00:08.630 line:15% 
we looked at accessing an element in an array,
3

3

00:00:08.630  -->  00:00:11.360 line:15% 
looping through an array using the traditional for loop
4

4

00:00:11.360  -->  00:00:14.210 line:15% 
and printing the array to the output using a static method
5

5

00:00:14.210  -->  00:00:16.453 line:15% 
on the java.util.Arrays class.
6

6

00:00:17.860  -->  00:00:19.430
In this video we are going to look at the methods
7

7

00:00:19.430  -->  00:00:22.760
on the java.util.Arrays class more closely,
8

8

00:00:22.760  -->  00:00:24.210
because it would be a rare event
9

9

00:00:24.210  -->  00:00:26.670
if you created an array of data and didn't wish
10

10

00:00:26.670  -->  00:00:28.390
to use some of the methods supplied you
11

11

00:00:28.390  -->  00:00:31.120
by this valuable utility class in Java.
12

12

00:00:31.120  -->  00:00:33.900
We will also briefly talk about the ArrayList and List,
13

13

00:00:33.900  -->  00:00:35.960
which are alternative methods for manipulating
14

14

00:00:35.960  -->  00:00:38.140
collections of data and which may find
15

15

00:00:38.140  -->  00:00:40.140
their way into an exam question.
16

16

00:00:40.140  -->  00:00:42.820
Note that Lists and ArrayLists are subjects under the
17

17

00:00:42.820  -->  00:00:45.630
Section Programming Abstractly Through Interfaces,
18

18

00:00:45.630  -->  00:00:47.180
but it seems appropriate to discuss
19

19

00:00:47.180  -->  00:00:50.653
some of their methods here in conjunction with arrays.
20

20

00:00:50.653  -->  00:00:52.110
So, the javadoc definition
21

21

00:00:52.110  -->  00:00:55.680
of the java.util.Arrays class is as follows:
22

22

00:00:55.680  -->  00:00:58.440
The class contains various methods for manipulating arrays,
23

23

00:00:58.440  -->  00:01:00.430
such as sorting and searching.
24

24

00:01:00.430  -->  00:01:03.400
This class also contains a static factory that allows
25

25

00:01:03.400  -->  00:01:05.403
arrays to be viewed as lists.
26

26

00:01:06.930  -->  00:01:08.370
So, the slide that I've got on screen lists
27

27

00:01:08.370  -->  00:01:09.850
some of the methods available to you
28

28

00:01:09.850  -->  00:01:12.280
to manipulate data in an array
29

29

00:01:12.280  -->  00:01:13.853
or through the list interface.
30

30

00:01:14.740  -->  00:01:16.970
So, firstly in terms of the type of functionality
31

31

00:01:16.970  -->  00:01:18.760
for comparison purposes,
32

32

00:01:18.760  -->  00:01:20.680
the arrays class methods are:
33

33

00:01:20.680  -->  00:01:23.575
compare, which is from Java nine,
34

34

00:01:23.575  -->  00:01:26.370
compareUnsigned, also a Java nine version,
35

35

00:01:26.370  -->  00:01:28.300
deepEquals and equals
36

36

00:01:28.300  -->  00:01:29.190
and you can see over to the right
37

37

00:01:29.190  -->  00:01:30.640
the List Interface methods:
38

38

00:01:30.640  -->  00:01:31.590
equals and isEmpty.
39

39

00:01:32.690  -->  00:01:34.360
Next, for searching through arrays
40

40

00:01:34.360  -->  00:01:36.900
we've got a binarySearch, array class method
41

41

00:01:36.900  -->  00:01:41.000
and also mismatch, which just came in Java nine
42

42

00:01:41.000  -->  00:01:42.160
and the List Interface methods are
43

43

00:01:42.160  -->  00:01:46.163
contains, containsAll, indexOf and lastIndexOf.
44

44

00:01:47.680  -->  00:01:49.700
For data manipulation of an array we've got:
45

45

00:01:49.700  -->  00:01:53.460
deepHashCode, deepToString, fill, hashCode,
46

46

00:01:53.460  -->  00:01:55.830
parallelPrefix, which is new in Java eight,
47

47

00:01:55.830  -->  00:01:58.020
parallelSort, also Java eight,
48

48

00:01:58.020  -->  00:02:00.460
parallelSetAll, Java eight,
49

49

00:02:00.460  -->  00:02:02.000
setAll, Java eight,
50

50

00:02:02.000  -->  00:02:04.275
as well as sort and toString.
51

51

00:02:04.275  -->  00:02:05.470
And the List Interface methods:
52

52

00:02:05.470  -->  00:02:08.600
add, addAll, clear, get, hashCode, remove,
53

53

00:02:08.600  -->  00:02:10.940
removeAll, replaceAll, retainAll,
54

54

00:02:10.940  -->  00:02:12.213
set, size and sort.
55

55

00:02:13.890  -->  00:02:15.604
For data transformation we've got:
56

56

00:02:15.604  -->  00:02:18.375
asList, copyOf, copyOfRange,
57

57

00:02:18.375  -->  00:02:19.920
spliterator, which is Java eight
58

58

00:02:19.920  -->  00:02:21.800
and stream, also Java eight.
59

59

00:02:21.800  -->  00:02:23.430
The List Interface methods we've got:
60

60

00:02:23.430  -->  00:02:25.420
copyOf, which is Java ten,
61

61

00:02:25.420  -->  00:02:26.830
iterator, listIterator,
62

62

00:02:26.830  -->  00:02:27.920
of, which is Java nine,
63

63

00:02:27.920  -->  00:02:29.975
spliterator, Java eight
64

64

00:02:29.975  -->  00:02:32.295
and subList and toArray.
65

65

00:02:32.295  -->  00:02:33.920
Right, so let's write some code now to explore
66

66

00:02:33.920  -->  00:02:36.200
some of the methods that I showed on those slides,
67

67

00:02:36.200  -->  00:02:37.750
starting with comparing arrays.
68

68

00:02:38.836  -->  00:02:40.380
Right, so I'm going to create a new class
69

69

00:02:40.380  -->  00:02:41.870
in our existing project arrays.
70

70

00:02:41.870  -->  00:02:43.956
We'll call it ArrayComparison.
71

71

00:02:43.956  -->  00:02:46.539
(mouse clicks)
72

72

00:02:47.444  -->  00:02:50.277
(keyboard typing)
73

73

00:02:55.640  -->  00:02:57.270
So this code has got no surprises
74

74

00:02:57.270  -->  00:02:58.103
for anybody that reviews
75

75

00:02:58.103  -->  00:02:59.770
what we just mentioned in the last video.
76

76

00:02:59.770  -->  00:03:02.673
So setting up some test data there as you can see initially.
77

77

00:03:04.100  -->  00:03:05.690
Converting the arrays to lists
78

78

00:03:05.690  -->  00:03:07.160
and then we're comparing the arrays
79

79

00:03:07.160  -->  00:03:08.870
using Object.equals.
80

80

00:03:08.870  -->  00:03:11.270
Now, Object.equals is the method array uses
81

81

00:03:11.270  -->  00:03:14.080
if you call equals directly on an array
82

82

00:03:14.080  -->  00:03:17.410
and it's only true if the arrays have equal references.
83

83

00:03:17.410  -->  00:03:20.300
Arrays with the same set of data but different references
84

84

00:03:20.300  -->  00:03:23.150
will not be considered equal by this method
85

85

00:03:23.150  -->  00:03:25.150
and just to confirm that, if I run this,
86

86

00:03:30.660  -->  00:03:32.630
the Object.equals has returned false
87

87

00:03:32.630  -->  00:03:34.660
in the case of copyOfFirstString
88

88

00:03:34.660  -->  00:03:38.201
and true for firstStringReference.
89

89

00:03:38.201  -->  00:03:39.034
Right, so let's add some code now
90

90

00:03:39.034  -->  00:03:41.260
to use the Arrays.equals
91

91

00:03:41.260  -->  00:03:43.613
as opposed to the Object.equals method.
92

92

00:03:45.316  -->  00:03:48.413
(keyboard typing)
93

93

00:03:48.413  -->  00:03:49.363
We'll run this now.
94

94

00:03:54.010  -->  00:03:55.980
So you can see here that Arrays.equals looks
95

95

00:03:55.980  -->  00:03:57.590
at the array elements to determine
96

96

00:03:57.590  -->  00:03:58.930
if the arrays are equal,
97

97

00:03:58.930  -->  00:04:00.930
not just comparing the reference
98

98

00:04:00.930  -->  00:04:02.980
and notice also that even though
99

99

00:04:02.980  -->  00:04:05.400
our unsorted array has the same elements,
100

100

00:04:05.400  -->  00:04:07.090
they're in a different order and therefore
101

101

00:04:07.090  -->  00:04:09.733
the arrays are not considered equal by this method.
102

102

00:04:10.800  -->  00:04:11.633
All right.
103

103

00:04:11.633  -->  00:04:12.787
So moving on let's take a look at another method,
104

104

00:04:12.787  -->  00:04:14.560
Arrays.compare.
105

105

00:04:14.560  -->  00:04:16.943
And that was introduced in Java nine.
106

106

00:04:21.470  -->  00:04:22.303
Firstly I'll run this
107

107

00:04:22.303  -->  00:04:24.210
and then we'll talk about it a bit more.
108

108

00:04:31.550  -->  00:04:33.760
First, to understand the compare method,
109

109

00:04:33.760  -->  00:04:37.070
you need to understand what an array prefix is.
110

110

00:04:37.070  -->  00:04:39.200
So, a prefix is a set of elements in common,
111

111

00:04:39.200  -->  00:04:41.550
starting at element index zero,
112

112

00:04:41.550  -->  00:04:43.550
or alternatively an index we define
113

113

00:04:43.550  -->  00:04:45.200
and we'll look at that a bit later.
114

114

00:04:45.200  -->  00:04:47.000
If we compare two String arrays
115

115

00:04:47.000  -->  00:04:49.170
that have the exact same elements,
116

116

00:04:49.170  -->  00:04:52.720
the prefix is the entire set of elements.
117

117

00:04:52.720  -->  00:04:55.000
If we compare the firstString
118

118

00:04:55.000  -->  00:04:57.250
with the partialString array in our example,
119

119

00:04:57.250  -->  00:04:59.140
remembering that we've defined those.
120

120

00:04:59.140  -->  00:05:01.590
So, line 15 for firstString,
121

121

00:05:01.590  -->  00:05:04.020
partialFirstString on line 21.
122

122

00:05:04.020  -->  00:05:06.760
The prefix here is the entire partialString
123

123

00:05:06.760  -->  00:05:09.400
since all elements in partialString exist
124

124

00:05:09.400  -->  00:05:10.930
in the firstString array,
125

125

00:05:10.930  -->  00:05:12.930
starting at offset index zero
126

126

00:05:12.930  -->  00:05:14.030
and in the same order.
127

127

00:05:15.080  -->  00:05:16.740
If we compare the firstString array
128

128

00:05:16.740  -->  00:05:19.060
with firstStringUnsorted array in our example,
129

129

00:05:19.060  -->  00:05:20.060
then there is no prefix,
130

130

00:05:20.060  -->  00:05:21.680
in other words there is no common set of elements
131

131

00:05:21.680  -->  00:05:24.463
starting at offset index zero.
132

132

00:05:26.050  -->  00:05:29.390
The Arrays.compare method then follows these rules:
133

133

00:05:29.390  -->  00:05:31.550
So, if Arrays.equals is true,
134

134

00:05:31.550  -->  00:05:32.710
return zero.
135

135

00:05:32.710  -->  00:05:34.930
If the first array parameter passed is null,
136

136

00:05:34.930  -->  00:05:36.290
it returns minus one.
137

137

00:05:36.290  -->  00:05:38.410
Else if the second array is null,
138

138

00:05:38.410  -->  00:05:40.130
it returns one.
139

139

00:05:40.130  -->  00:05:42.420
If the length of the first array passed is zero,
140

140

00:05:42.420  -->  00:05:46.200
it returns zero minus the length of the second array.
141

141

00:05:46.200  -->  00:05:48.480
If the length of the second array is zero,
142

142

00:05:48.480  -->  00:05:51.313
it returns the length of the first array minus zero.
143

143

00:05:52.720  -->  00:05:56.270
If one array represents the entire prefix of another,
144

144

00:05:56.270  -->  00:05:59.400
the difference in lengths of the arrays is returned.
145

145

00:05:59.400  -->  00:06:01.240
This number will be negative if you are comparing
146

146

00:06:01.240  -->  00:06:03.683
the smaller array to the larger array.
147

147

00:06:04.520  -->  00:06:06.020
If no prefix is identified
148

148

00:06:06.020  -->  00:06:07.430
then the first element of each array
149

149

00:06:07.430  -->  00:06:09.720
is compared lexicographically.
150

150

00:06:09.720  -->  00:06:10.950
This number will be negative
151

151

00:06:10.950  -->  00:06:13.050
if the first element of the first array
152

152

00:06:13.050  -->  00:06:16.040
is less than the first element of the second array.
153

153

00:06:16.040  -->  00:06:17.740
Now, if a prefix is identified,
154

154

00:06:17.740  -->  00:06:21.370
but neither arrays represent a full subset of the other,
155

155

00:06:21.370  -->  00:06:24.070
the index where the prefix stops is used
156

156

00:06:24.070  -->  00:06:26.933
to then compare the elements at that index.
157

157

00:06:28.020  -->  00:06:30.120
The following table basically restates
158

158

00:06:30.120  -->  00:06:31.160
what I've just said.
159

159

00:06:31.160  -->  00:06:32.160
So I'll just leave that on-screen
160

160

00:06:32.160  -->  00:06:33.726
and just a reminder also that
161

161

00:06:33.726  -->  00:06:36.940
if you want to grab the slides for this course
162

162

00:06:36.940  -->  00:06:37.930
watch the bonus video
163

163

00:06:37.930  -->  00:06:39.840
of the very last video in this course.
164

164

00:06:39.840  -->  00:06:41.580
Gives you the details you need
165

165

00:06:41.580  -->  00:06:44.000
to be able to grab those slides and download them
166

166

00:06:44.000  -->  00:06:45.360
so that you can actually study them
167

167

00:06:45.360  -->  00:06:47.123
and refer to them offline.
168

168

00:06:48.900  -->  00:06:49.970
Right, so back to the code now.
169

169

00:06:49.970  -->  00:06:50.967
If I run this..
170

170

00:06:54.890  -->  00:06:56.400
and you can see that comparing the firstString
171

171

00:06:56.400  -->  00:06:57.963
to the copyOfFirstString,
172

172

00:06:57.963  -->  00:07:00.520
firstString and firstStringReference and so on,
173

173

00:07:00.520  -->  00:07:01.820
and that's the results,
174

174

00:07:01.820  -->  00:07:03.260
which hopefully now makes a bit more sense
175

175

00:07:03.260  -->  00:07:04.360
now that we've been through the,
176

176

00:07:04.360  -->  00:07:06.530
basically the return values that come back
177

177

00:07:06.530  -->  00:07:08.510
from Arrays.compare method.
178

178

00:07:08.510  -->  00:07:09.860
Let's go through a couple more examples
179

179

00:07:09.860  -->  00:07:12.050
which will hopefully help you understand this.
180

180

00:07:12.050  -->  00:07:14.930
I've got to paste a bit more code in now.
181

181

00:07:14.930  -->  00:07:16.313
Okay, so there's the code.
182

182

00:07:19.930  -->  00:07:21.660
So more comparisons there
183

183

00:07:21.660  -->  00:07:22.673
and we run the code.
184

184

00:07:25.456  -->  00:07:26.656
And there's the results.
185

185

00:07:27.880  -->  00:07:29.370
All right, so moving on now,
186

186

00:07:29.370  -->  00:07:32.000
I want to look at the Arrays.compare method
187

187

00:07:32.000  -->  00:07:34.150
to compare a range of elements
188

188

00:07:34.150  -->  00:07:35.210
rather than the full array
189

189

00:07:35.210  -->  00:07:37.060
which we've been using so far.
190

190

00:07:37.060  -->  00:07:38.710
So let's paste in some more code.
191

191

00:07:41.070  -->  00:07:42.030
All right, so there's the code
192

192

00:07:42.030  -->  00:07:43.130
that's been pasted in.
193

193

00:07:45.400  -->  00:07:46.940
So you can see stringArrays that we're using
194

194

00:07:46.940  -->  00:07:48.323
for our comparisons now.
195

195

00:07:50.550  -->  00:07:51.790
So starting off we're going to compare
196

196

00:07:51.790  -->  00:07:53.570
the first three elements of the ordered array
197

197

00:07:53.570  -->  00:07:56.400
with last three elements of the unsorted array.
198

198

00:07:56.400  -->  00:07:57.350
And moving on down,
199

199

00:07:58.270  -->  00:07:59.500
you don't even have to specify
200

200

00:07:59.500  -->  00:08:00.900
the same number of elements.
201

201

00:08:02.320  -->  00:08:03.367
So if you run this..
202

202

00:08:07.157  -->  00:08:09.930
Note that the second result is a two there
203

203

00:08:09.930  -->  00:08:11.420
because we have two additional elements
204

204

00:08:11.420  -->  00:08:12.560
in the range we selected
205

205

00:08:12.560  -->  00:08:14.550
from the first arrays range.
206

206

00:08:14.550  -->  00:08:17.470
The second arrays range was a complete subset
207

207

00:08:17.470  -->  00:08:18.830
of the first range,
208

208

00:08:18.830  -->  00:08:20.350
so the result becomes the difference
209

209

00:08:20.350  -->  00:08:22.620
in the lengths of the specified ranges
210

210

00:08:22.620  -->  00:08:26.290
and not a comparison of individual elements.
211

211

00:08:26.290  -->  00:08:27.840
All right, so I think we've probably exhausted
212

212

00:08:27.840  -->  00:08:30.410
the Arrays method for comparisons at this point.
213

213

00:08:30.410  -->  00:08:31.900
Let's try one more segment of code
214

214

00:08:31.900  -->  00:08:34.230
that demonstrates the List Comparison method,
215

215

00:08:34.230  -->  00:08:35.420
the equals.
216

216

00:08:35.420  -->  00:08:37.090
Remember that we created two lists
217

217

00:08:37.090  -->  00:08:38.950
previously in a class.
218

218

00:08:38.950  -->  00:08:41.510
So we're going to paste some code in there now,
219

219

00:08:41.510  -->  00:08:44.140
and just for reminder purposes
220

220

00:08:44.140  -->  00:08:45.480
the list we created,
221

221

00:08:45.480  -->  00:08:47.330
the ones there on lines 26 and 27
222

222

00:08:47.330  -->  00:08:48.730
which haven't been used yet.
223

223

00:08:50.610  -->  00:08:52.250
So the code we're going to paste in now
224

224

00:08:52.250  -->  00:08:53.440
is going to use that.
225

225

00:08:54.656  -->  00:08:57.600
(keyboard typing)
226

226

00:08:57.600  -->  00:08:59.380
So we'll compare lists here
227

227

00:08:59.380  -->  00:09:00.523
using .equals.
228

228

00:09:02.710  -->  00:09:04.840
So the output from this code verifies
229

229

00:09:04.840  -->  00:09:06.830
that list compares the list elements,
230

230

00:09:06.830  -->  00:09:08.600
I'm not using the Object.equals method
231

231

00:09:08.600  -->  00:09:10.820
to compare references only.
232

232

00:09:10.820  -->  00:09:11.890 line:15% 
Right, so let's end the video here
233

233

00:09:11.890  -->  00:09:13.780 line:15% 
and in the next one we'll start taking
234

234

00:09:13.780  -->  00:09:15.800 line:15% 
a look at array search methods.
235

235

00:09:15.800  -->  00:09:17.100 line:15% 
See you in the next video.
