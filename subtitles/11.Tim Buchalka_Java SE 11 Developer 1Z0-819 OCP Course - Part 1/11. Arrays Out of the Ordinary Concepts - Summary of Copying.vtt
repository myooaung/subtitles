WEBVTT
1
1

00:00:04.895  -->  00:00:06.300
<v Instructor>All right, so let's now go over</v>
2

2

00:00:06.300  -->  00:00:09.550
several methods for creating a copy of an array.
3

3

00:00:09.550  -->  00:00:10.860
So specifically we're going to be looking at
4

4

00:00:10.860  -->  00:00:13.063
five ways to create a copy of an array.
5

5

00:00:14.296  -->  00:00:15.780
Right. First one is clone,
6

6

00:00:15.780  -->  00:00:18.200
and that's inherited from the object class
7

7

00:00:18.200  -->  00:00:19.610
it creates a new array reference
8

8

00:00:19.610  -->  00:00:22.240
but the elements are not cloned, so it's a shallow copy,
9

9

00:00:22.240  -->  00:00:24.570
the example code there and it's given in all
10

10

00:00:24.570  -->  00:00:26.640
these examples that we've got a string array
11

11

00:00:26.640  -->  00:00:29.165
called string array with three elements,
12

12

00:00:29.165  -->  00:00:32.410
abc, def, ghi, which of course are strings.
13

13

00:00:32.410  -->  00:00:35.700
So, string array, cloned array equals stringarray.clone
14

14

00:00:35.700  -->  00:00:37.740
is how call this particular call.
15

15

00:00:37.740  -->  00:00:40.300
And, again credits to your array reference,
16

16

00:00:40.300  -->  00:00:41.960
but again elements are not cloned.
17

17

00:00:41.960  -->  00:00:44.159
And they stand to keep in mind
18

18

00:00:44.159  -->  00:00:45.770
that's mutable and a shallow copy.
19

19

00:00:45.770  -->  00:00:48.000
Next, the arrays.copyOf method.
20

20

00:00:48.000  -->  00:00:50.918
Which is a static method on java.lang.arrays.
21

21

00:00:50.918  -->  00:00:53.670
This creates a new array reference, but again
22

22

00:00:53.670  -->  00:00:56.060
the elements are not cloned, so it's a shallow copy.
23

23

00:00:56.060  -->  00:00:57.540
We got some examples in there
24

24

00:00:57.540  -->  00:01:00.320
sting.array, copiedArray = Arrays.copyOf
25

25

00:01:00.320  -->  00:01:02.653
passing the stringarray and stringarray.length
26

26

00:01:02.653  -->  00:01:05.699
then copy everything and you can also change the
27

27

00:01:05.699  -->  00:01:08.080
stringarray.length to this specific number of elements.
28

28

00:01:08.080  -->  00:01:11.450
I got an example there passed in 2 and 7.
29

29

00:01:11.450  -->  00:01:13.570
Some notes about this one, again mutable.
30

30

00:01:13.570  -->  00:01:14.710
It's a shallow copy.
31

31

00:01:14.710  -->  00:01:18.040
It can create an array which is truncated from the original.
32

32

00:01:18.040  -->  00:01:20.730
It can also create an array larger than the original,
33

33

00:01:20.730  -->  00:01:23.393
and additional elements will get default values.
34

34

00:01:24.690  -->  00:01:27.820
Moving on. The next point is Arrays.copyOfRange.
35

35

00:01:27.820  -->  00:01:30.480
Another static method from java.lang.arrays.
36

36

00:01:30.480  -->  00:01:32.160
And it creates a new array reference from the
37

37

00:01:32.160  -->  00:01:34.090
selected range but the elements are not cloned again.
38

38

00:01:34.090  -->  00:01:35.820
So it's a shallow copy.
39

39

00:01:35.820  -->  00:01:38.000
Example execution will be StringArray
40

40

00:01:38.000  -->  00:01:39.900
copied.ArrayRange = Arrays.copyOfRange
41

41

00:01:41.034  -->  00:01:43.510
passing the stringArray and the range.
42

42

00:01:43.510  -->  00:01:46.993
In this case, 0, 1. Mutable and shallow copy.
43

43

00:01:48.593  -->  00:01:52.910
Next is List.copyOf. It's a static method on List.
44

44

00:01:52.910  -->  00:01:55.730
And it creates new lists. And the example code there
45

45

00:01:55.730  -->  00:01:57.937
I've got a List of string objects.
46

46

00:01:57.937  -->  00:02:01.810
ListCopy = list.copyOf and passing arrays.asList,
47

47

00:02:01.810  -->  00:02:03.650
which itself is passed a stringArray.
48

48

00:02:03.650  -->  00:02:05.210
And that creates a new list.
49

49

00:02:05.210  -->  00:02:06.930
And I've got some code there to create a newArray
50

50

00:02:06.930  -->  00:02:09.380
which is stringArray, newArray = listCopy.toArray
51

51

00:02:10.710  -->  00:02:13.680
passing the empty stringArray, new string 0,
52

52

00:02:13.680  -->  00:02:15.180
which you can see in the code.
53

53

00:02:15.180  -->  00:02:17.560
Now this makes an immutable copy of the List.
54

54

00:02:17.560  -->  00:02:19.690
But keep in mind that the resulting array
55

55

00:02:19.690  -->  00:02:22.100
created from toArray is not mutable.
56

56

00:02:22.100  -->  00:02:24.259
This is also a Shallow copy.
57

57

00:02:24.259  -->  00:02:25.700
Now the last one, which we did the same code,
58

58

00:02:25.700  -->  00:02:29.650
was System.arraycopy. This is a static method on system.
59

59

00:02:29.650  -->  00:02:31.340
And it populates an array reference
60

60

00:02:31.340  -->  00:02:33.870
with a copy of the array passed to it.
61

61

00:02:33.870  -->  00:02:37.307
Example code: stringArray systemClonedArray = new String
62

62

00:02:37.307  -->  00:02:39.575
and the length, in this case I'm actually passing
63

63

00:02:39.575  -->  00:02:42.710
stringArray.length to create an array there of the
64

64

00:02:42.710  -->  00:02:44.370
entire length that we want to copy.
65

65

00:02:44.370  -->  00:02:46.030
This case of the stringArray.
66

66

00:02:46.030  -->  00:02:49.555
Then the actual call is system.arraycopy stringArray 0,
67

67

00:02:49.555  -->  00:02:53.010
systemClonedArray, 0, stringArray.length.
68

68

00:02:53.010  -->  00:02:56.170
They are basically specifying the ranges there as well.
69

69

00:02:56.170  -->  00:02:59.053
And it's mutable as well as being a shallow copy.
70

70

00:03:00.420  -->  00:03:01.990
Right. So in the last two videos we covered some
71

71

00:03:01.990  -->  00:03:03.950
of the healthier methods for Array and List.
72

72

00:03:03.950  -->  00:03:06.720
Some of which marked form their way into an exam question.
73

73

00:03:06.720  -->  00:03:09.180
I'll end the video here. Coming up next is a quiz.
74

74

00:03:09.180  -->  00:03:11.050
And afterwards we're going to start looking at objects
75

75

00:03:11.050  -->  00:03:11.930
and start the review of
76

76

00:03:11.930  -->  00:03:14.970
java's object oriented features and support.
77

77

00:03:14.970  -->  00:03:16.270
See you in the next video.
