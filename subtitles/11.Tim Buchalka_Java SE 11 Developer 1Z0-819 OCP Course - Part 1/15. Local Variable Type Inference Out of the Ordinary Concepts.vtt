WEBVTT
1
1

00:00:05.350  -->  00:00:06.310
<v Tim>All right, so let's talk about</v>
2

2

00:00:06.310  -->  00:00:08.440
some Out of Ordinary Concepts and review
3

3

00:00:08.440  -->  00:00:11.023
where you can use Local Variable Type Inference.
4

4

00:00:11.960  -->  00:00:13.410
So var is not to be confused
5

5

00:00:13.410  -->  00:00:15.230
with a variable type, as I mentioned.
6

6

00:00:15.230  -->  00:00:17.490
Just because you define a local variable
7

7

00:00:17.490  -->  00:00:19.050
with a var designation,
8

8

00:00:19.050  -->  00:00:21.450
it doesn't mean that it's a variable type.
9

9

00:00:21.450  -->  00:00:23.690
The type's inferred by its initialization,
10

10

00:00:23.690  -->  00:00:25.400
and cannot be changed.
11

11

00:00:25.400  -->  00:00:27.030
All the narrowing, widening rules
12

12

00:00:27.030  -->  00:00:28.713
for the inferred type do apply.
13

13

00:00:29.920  -->  00:00:32.470
You can't use LVTI, or var,
14

14

00:00:32.470  -->  00:00:34.300
for class or instance variables,
15

15

00:00:34.300  -->  00:00:35.757
for method return types,
16

16

00:00:35.757  -->  00:00:37.600
for method parameters,
17

17

00:00:37.600  -->  00:00:39.390
or for constructor parameters.
18

18

00:00:39.390  -->  00:00:42.250
What you can use Local Variable Type Inference var
19

19

00:00:42.250  -->  00:00:45.080
is for local variables in methods and code blocks,
20

20

00:00:45.080  -->  00:00:46.700
and loop variables.
21

21

00:00:46.700  -->  00:00:48.200
I'm gonna show you some code,
22

22

00:00:48.200  -->  00:00:51.690
where we're using LVTI in loops.
23

23

00:00:51.690  -->  00:00:53.010
So going back to the code.
24

24

00:00:53.010  -->  00:00:55.350
We're going to create a new class
25

25

00:00:56.600  -->  00:00:58.293
and we'll call this one VarLoops.
26

26

00:01:01.790  -->  00:01:03.290
As always, paste in some code.
27

27

00:01:05.150  -->  00:01:07.480
All right, so you can see there that we're using LVTI var
28

28

00:01:07.480  -->  00:01:10.280
in a regular for loop on line 12.
29

29

00:01:10.280  -->  00:01:11.600
And the reason we can do that is
30

30

00:01:11.600  -->  00:01:14.940
that the type can be inferred by the initialization,
31

31

00:01:14.940  -->  00:01:17.740
in this case equals zero, line 12.
32

32

00:01:17.740  -->  00:01:20.710
But also in an enhanced for loop, same principles apply.
33

33

00:01:20.710  -->  00:01:22.177
We can use var there as well,
34

34

00:01:22.177  -->  00:01:24.600
and the reason for that is we can infer the type,
35

35

00:01:24.600  -->  00:01:29.307
in this case a String based on the String array args.
36

36

00:01:29.307  -->  00:01:30.750
All right, so let's review, again,
37

37

00:01:30.750  -->  00:01:32.520
the valid and invalid declarations
38

38

00:01:32.520  -->  00:01:35.133
and initialization values for an LVTI, var.
39

39

00:01:36.090  -->  00:01:38.240
All right, firstly, the valid uses of LVTI
40

40

00:01:38.240  -->  00:01:40.310
are for local variables only.
41

41

00:01:40.310  -->  00:01:41.730
So in the examples here,
42

42

00:01:41.730  -->  00:01:43.090
it's important that they're all assumed
43

43

00:01:43.090  -->  00:01:44.700
to be local variables.
44

44

00:01:44.700  -->  00:01:46.520
So var i = 1.
45

45

00:01:46.520  -->  00:01:48.340
The explanation for that, the reason that it's valid,
46

46

00:01:48.340  -->  00:01:50.080
is since the literal one is an int,
47

47

00:01:50.080  -->  00:01:52.720
var i is inferred to be an int, and it's valid.
48

48

00:01:52.720  -->  00:01:56.480
Next example, var j = 1.0f/2.
49

49

00:01:56.480  -->  00:01:58.100
j is inferred to be a float
50

50

00:01:58.100  -->  00:02:00.580
because we've got a float value there.
51

51

00:02:00.580  -->  00:02:03.180
Now in the next example, short s = 1.
52

52

00:02:03.180  -->  00:02:05.480
var k = +s.
53

53

00:02:05.480  -->  00:02:09.510
k is actually inferred to be the int and not a short
54

54

00:02:09.510  -->  00:02:11.060
since the operator plus,
55

55

00:02:11.060  -->  00:02:13.300
which doesn't change the value of one,
56

56

00:02:13.300  -->  00:02:16.250
forces s to be promoted to an int.
57

57

00:02:16.250  -->  00:02:19.992
So again, in this scenario, k will actually be an int.
58

58

00:02:19.992  -->  00:02:20.825
All right, moving on,
59

59

00:02:20.825  -->  00:02:22.860
we've got var list equals new ArrayList.
60

60

00:02:22.860  -->  00:02:24.650
That's okay because ArrayList
61

61

00:02:24.650  -->  00:02:27.640
doesn't need to be typed to be initialised.
62

62

00:02:27.640  -->  00:02:28.510
And the next example,
63

63

00:02:28.510  -->  00:02:31.330
var myArray equals new String array five.
64

64

00:02:31.330  -->  00:02:32.880
That's okay because type is inferred
65

65

00:02:32.880  -->  00:02:34.130
to be an array of String.
66

66

00:02:35.490  -->  00:02:37.410
All right, now looking at some invalid
67

67

00:02:37.410  -->  00:02:40.531
declarations of LVTI for local variables only.
68

68

00:02:40.531  -->  00:02:43.062
Var I equals one comma I equals two.
69

69

00:02:43.062  -->  00:02:45.300
That's invalid because var can't be used
70

70

00:02:45.300  -->  00:02:46.780
in a compound statement.
71

71

00:02:46.780  -->  00:02:48.990
And the next example: Var I comma J equals one
72

72

00:02:48.990  -->  00:02:50.623
is invalid for the same reasons.
73

73

00:02:51.460  -->  00:02:52.690
Var integer.
74

74

00:02:52.690  -->  00:02:54.680
Integer here is a variable name and therefore
75

75

00:02:54.680  -->  00:02:58.430
type cannot be inferred without an initializer.
76

76

00:02:58.430  -->  00:03:00.420
Var myObject equals null,
77

77

00:03:00.420  -->  00:03:02.770
the var variable cannot be initialised to null,
78

78

00:03:02.770  -->  00:03:04.680
type cannot be inferred in this scenario
79

79

00:03:04.680  -->  00:03:06.560
because of the null neutral.
80

80

00:03:06.560  -->  00:03:08.390
Now, the last ones can be a bit confusing
81

81

00:03:08.390  -->  00:03:09.470
because it looks legal.
82

82

00:03:09.470  -->  00:03:11.960
Var myArray equals left-right curly braces
83

83

00:03:11.960  -->  00:03:15.180
and initializer of two Strings, A and B.
84

84

00:03:15.180  -->  00:03:16.340
Looking at that, you'd think that'd be
85

85

00:03:16.340  -->  00:03:17.930
an array of Strings, right?
86

86

00:03:17.930  -->  00:03:20.320
Unfortunately, that's invalid because the var variable
87

87

00:03:20.320  -->  00:03:22.910
cannot be initialised with an array initializer.
88

88

00:03:22.910  -->  00:03:26.370
So that could be a tricky one being asked in an exam.
89

89

00:03:26.370  -->  00:03:27.350
All right, back to the code.
90

90

00:03:27.350  -->  00:03:30.263
Let's create another class called Var, with a capital V.
91

91

00:03:35.590  -->  00:03:36.553
Paste in a code.
92

92

00:03:39.380  -->  00:03:41.120
So first thing: yes we can name a class
93

93

00:03:41.120  -->  00:03:43.080
Var with a capital V, which we've done here.
94

94

00:03:43.080  -->  00:03:46.280
But also a reminder that var itself isn't a keyword.
95

95

00:03:46.280  -->  00:03:47.310
And you can see that
96

96

00:03:48.550  -->  00:03:50.100
on line 17,
97

97

00:03:50.100  -->  00:03:52.984
I'm actually using var as a variable name,
98

98

00:03:52.984  -->  00:03:57.050
and it's quite valid or it's completely valid in Java 11.
99

99

00:03:57.050  -->  00:03:59.290
What you can also see is that on line 26,
100

100

00:03:59.290  -->  00:04:02.293
we can also name a method var if we want to do that as well.
101

101

00:04:04.250  -->  00:04:07.510
Now not that you can't have a method parameter of type var,
102

102

00:04:07.510  -->  00:04:09.570
however you can have a method named var
103

103

00:04:09.570  -->  00:04:11.197
and a method parameter named var,
104

104

00:04:11.197  -->  00:04:14.250
and you can see we're doing that on line 26.
105

105

00:04:14.250  -->  00:04:16.000
And moving on, how confusing can we make it?
106

106

00:04:16.000  -->  00:04:18.500
Well, we can use LVTI to set the local variable
107

107

00:04:18.500  -->  00:04:21.160
to our method parameter named var.
108

108

00:04:21.160  -->  00:04:23.460
We've got var X equals var on line 30,
109

109

00:04:23.460  -->  00:04:25.163
which is really confusing code.
110

110

00:04:26.590  -->  00:04:30.920
And also in this for loop: for var Y colon X.
111

111

00:04:30.920  -->  00:04:32.310
Probably running this would make more sense.
112

112

00:04:32.310  -->  00:04:34.143
So let's got ahead and do that. We'll run it.
113

113

00:04:35.618  -->  00:04:37.733
And you can see Y equals one, two, three.
114

114

00:04:38.570  -->  00:04:41.120
There's our array list we have to find on line 17.
115

115

00:04:41.120  -->  00:04:43.420
We're making a call to our method var,
116

116

00:04:43.420  -->  00:04:45.290
with the argument named var,
117

117

00:04:45.290  -->  00:04:47.320
X is assigned var,
118

118

00:04:47.320  -->  00:04:49.150
and here, we're using an enhanced for loop
119

119

00:04:49.150  -->  00:04:51.330
to go through the contents of X,
120

120

00:04:51.330  -->  00:04:52.850
which effectively is var,
121

121

00:04:52.850  -->  00:04:54.610
and putting out the values, very confusing.
122

122

00:04:54.610  -->  00:04:56.960
Bottom line here is that it is valid
123

123

00:04:56.960  -->  00:04:58.960
and you may be asked that in the exam.
124

124

00:04:58.960  -->  00:05:01.130
That's a good thing to actually know.
125

125

00:05:01.130  -->  00:05:02.840
What you can't do though, interesting enough,
126

126

00:05:02.840  -->  00:05:05.680
I'll just show that you can't create a class
127

127

00:05:07.440  -->  00:05:10.563
called var in lowercase, all lowercase in this scenario.
128

128

00:05:12.820  -->  00:05:14.460
IntelliJ is not allowing it, as you can see here,
129

129

00:05:14.460  -->  00:05:16.030
and the code bar would give you an error similar
130

130

00:05:16.030  -->  00:05:17.437
to what I've got on the screen there now:
131

131

00:05:17.437  -->  00:05:19.307
"Var is a restricted local variable type,
132

132

00:05:19.307  -->  00:05:22.110
"and cannot be used for type declarations."
133

133

00:05:22.110  -->  00:05:24.170
All right, so that's Local Variable Type Inference.
134

134

00:05:24.170  -->  00:05:26.500
Hopefully you know enough about it now
135

135

00:05:26.500  -->  00:05:28.790
so if you get asked questions along those lines
136

136

00:05:28.790  -->  00:05:30.680
in the exam, you'll be able to answer that.
137

137

00:05:30.680  -->  00:05:32.370
The next video is a short quiz
138

138

00:05:32.370  -->  00:05:35.400
testing some of the items we've covered so far for LVTI.
139

139

00:05:35.400  -->  00:05:37.754
And then after that, we'll move on to the next section.
140

140

00:05:37.754  -->  00:05:39.163
See you in the next video.
