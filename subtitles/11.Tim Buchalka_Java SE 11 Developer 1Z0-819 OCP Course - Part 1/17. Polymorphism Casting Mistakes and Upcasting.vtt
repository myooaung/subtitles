WEBVTT
1
1

00:00:05.320  -->  00:00:07.010 line:15% 
<v ->All right so continuing on</v>
2

2

00:00:07.010  -->  00:00:09.510 line:15% 
with our utilisation of polymorphism to cast
3

3

00:00:09.510  -->  00:00:10.910 line:15% 
and core methods.
4

4

00:00:10.910  -->  00:00:12.120
Now we're using the same code,
5

5

00:00:12.120  -->  00:00:15.580
the downcast example's class from the last video.
6

6

00:00:15.580  -->  00:00:17.010
I want to start exploring what happens
7

7

00:00:17.010  -->  00:00:18.380
if we start making mistakes
8

8

00:00:18.380  -->  00:00:20.830
and specifically we start off by
9

9

00:00:20.830  -->  00:00:22.970
reversing the cast types,
10

10

00:00:22.970  -->  00:00:25.260
assuming you did that by mistake in code.
11

11

00:00:25.260  -->  00:00:27.344
So what I want to do is change this code.
12

12

00:00:27.344  -->  00:00:29.060
And the code I am looking for is this code here
13

13

00:00:29.060  -->  00:00:30.860
which I'm gonna comment out briefly.
14

14

00:00:32.115  -->  00:00:34.523
I comment that out so you can see it on the screen.
15

15

00:00:36.950  -->  00:00:37.783
All right so there's the new code,
16

16

00:00:37.783  -->  00:00:40.010
you can see the old commented out code,
17

17

00:00:40.010  -->  00:00:42.430
and the new code that I pasted in.
18

18

00:00:42.430  -->  00:00:43.263
So what we're doing is,
19

19

00:00:43.263  -->  00:00:44.992
we're calling the specifically named methods first
20

20

00:00:44.992  -->  00:00:47.780
by downcasting generically typed variables
21

21

00:00:47.780  -->  00:00:48.930
to the object types,
22

22

00:00:48.930  -->  00:00:50.450
but actually using the wrong cast.
23

23

00:00:50.450  -->  00:00:52.110
So I've got a generic cat there,
24

24

00:00:52.110  -->  00:00:53.017
calling the test dog method
25

25

00:00:53.017  -->  00:00:56.150
and we're casting the cat object as a dog,
26

26

00:00:56.150  -->  00:00:57.920
we're doing the opposite on line 50,
27

27

00:00:57.920  -->  00:00:59.550
with the generic dog object,
28

28

00:00:59.550  -->  00:01:01.020
casting it as a cat.
29

29

00:01:01.020  -->  00:01:03.480
And then we're using the test animal overloaded methods,
30

30

00:01:03.480  -->  00:01:06.650
downcasting generically typed variables to the object types.
31

31

00:01:06.650  -->  00:01:07.570
Same deal there.
32

32

00:01:07.570  -->  00:01:09.600
Generic dog casting as a cat
33

33

00:01:09.600  -->  00:01:12.120
and generic cat casting as a dog.
34

34

00:01:12.120  -->  00:01:14.120
So as you can see the compiler doesn't make a peep
35

35

00:01:14.120  -->  00:01:16.570
about this mistake and we can compile the code,
36

36

00:01:16.570  -->  00:01:18.000
you can see we've got no errors,
37

37

00:01:18.000  -->  00:01:19.700
however running it throws an exception.
38

38

00:01:19.700  -->  00:01:20.800
So we'll run that now.
39

39

00:01:22.490  -->  00:01:23.420
And you can see we have in fact
40

40

00:01:23.420  -->  00:01:25.620
got our class cast exception.
41

41

00:01:25.620  -->  00:01:28.470
So the Java virtual machine's discovered out mistake
42

42

00:01:28.470  -->  00:01:30.660
and threw that class cast exception.
43

43

00:01:30.660  -->  00:01:32.163
So let's undo that code.
44

44

00:01:34.980  -->  00:01:37.933
Okay, we're back to our original code again there now.
45

45

00:01:37.933  -->  00:01:38.766
And now what I want to do
46

46

00:01:38.766  -->  00:01:41.350
is just go to the top of the main method there.
47

47

00:01:41.350  -->  00:01:42.460
I wanna paste in some code,
48

48

00:01:42.460  -->  00:01:45.743
just under those first two animal declarations.
49

49

00:01:46.810  -->  00:01:48.820
But obviously you can see these are mixed up declarations,
50

50

00:01:48.820  -->  00:01:49.850
again there now.
51

51

00:01:49.850  -->  00:01:51.220
And you can see that this time
52

52

00:01:51.220  -->  00:01:53.320
the compiler caught this mix-up.
53

53

00:01:53.320  -->  00:01:54.820
So it's a compiler error
54

54

00:01:54.820  -->  00:01:57.480
fairly obviously to assign an object or a reference type
55

55

00:01:57.480  -->  00:01:59.200
where there's no relationship.
56

56

00:01:59.200  -->  00:02:00.430
But it's not a compiler error
57

57

00:02:00.430  -->  00:02:02.360
to pass an object to a perimeter,
58

58

00:02:02.360  -->  00:02:04.800
casting it incorrectly to the wrong type.
59

59

00:02:04.800  -->  00:02:06.390
The point is that the compiler was able
60

60

00:02:06.390  -->  00:02:08.035
to catch this error this time.
61

61

00:02:08.035  -->  00:02:09.920
So let's remove those lines,
62

62

00:02:09.920  -->  00:02:12.410
I'm just gonna undo the change, the paste,
63

63

00:02:12.410  -->  00:02:13.670
to get back to the code before that.
64

64

00:02:13.670  -->  00:02:16.270
All right and we've got a valid code again.
65

65

00:02:16.270  -->  00:02:19.570
Let's now look at using casting in expressions.
66

66

00:02:19.570  -->  00:02:20.670
What we need to do first
67

67

00:02:20.670  -->  00:02:23.210
is add a simple method to our dog class.
68

68

00:02:23.210  -->  00:02:24.510
Let's go back and do that.
69

69

00:02:25.660  -->  00:02:26.860
We're gonna add that in.
70

70

00:02:27.760  -->  00:02:30.680
Cause it's a very simple get dog string method there.
71

71

00:02:30.680  -->  00:02:32.937
Then we need to go down to the bottom of our main method,
72

72

00:02:32.937  -->  00:02:35.733
we're gonna paste some code down, down here.
73

73

00:02:36.720  -->  00:02:37.553
So as you can see,
74

74

00:02:37.553  -->  00:02:39.540
the code I've pasted there is an if statement
75

75

00:02:39.540  -->  00:02:42.980
and it's downcasting a generic dog to a dog
76

76

00:02:42.980  -->  00:02:45.210
and then wraps the downcast in parenthesis
77

77

00:02:45.210  -->  00:02:46.880
to then access the get dog string
78

78

00:02:46.880  -->  00:02:49.430
that we added to our dog class specifically.
79

79

00:02:49.430  -->  00:02:50.263
So if we run this,
80

80

00:02:50.263  -->  00:02:53.453
we should hopefully get matched at the bottom of our output.
81

81

00:02:55.370  -->  00:02:56.330
And you can see we got matched,
82

82

00:02:56.330  -->  00:02:57.513
so clearly that worked.
83

83

00:02:58.640  -->  00:03:00.225
All right so finally for downcasting,
84

84

00:03:00.225  -->  00:03:01.930
before we move on to upcasting,
85

85

00:03:01.930  -->  00:03:06.240
I wanna show a downcast used on a return type from a method.
86

86

00:03:06.240  -->  00:03:10.320
So I need to add a method to our downcast examples class.
87

87

00:03:10.320  -->  00:03:12.503
Let's go ahead and do that, right to the bottom.
88

88

00:03:14.150  -->  00:03:15.870
Very simple pass through method you can see
89

89

00:03:15.870  -->  00:03:17.360
that accepts object O,
90

90

00:03:17.360  -->  00:03:20.260
then returns O back as an object.
91

91

00:03:20.260  -->  00:03:22.260
And let's go back up to our main method.
92

92

00:03:23.190  -->  00:03:26.400
And paste in some code at the end of the main method.
93

93

00:03:26.400  -->  00:03:28.340
You can see we're actually using a cat there,
94

94

00:03:28.340  -->  00:03:29.450
calling the pass through method,
95

95

00:03:29.450  -->  00:03:31.530
passing a generic cat,
96

96

00:03:31.530  -->  00:03:33.090
casting as a cat,
97

97

00:03:33.090  -->  00:03:34.530
and then using print cat method,
98

98

00:03:34.530  -->  00:03:37.210
or invoking the print cat method.
99

99

00:03:37.210  -->  00:03:38.043
We run that,
100

100

00:03:39.814  -->  00:03:42.640
and we see we get the output "I am a cat".
101

101

00:03:42.640  -->  00:03:45.400
All right, so that covers downcasting in assignments,
102

102

00:03:45.400  -->  00:03:47.930
method calls, as well as expressions.
103

103

00:03:47.930  -->  00:03:49.920
Let's now create a new class called
104

104

00:03:49.920  -->  00:03:51.493
upcast examples in our project.
105

105

00:03:55.771  -->  00:03:57.854
(typing)
106

106

00:04:03.155  -->  00:04:04.770
Okay, there's the code for that.
107

107

00:04:04.770  -->  00:04:07.770
So I can see first that we've got a tree-based class there,
108

108

00:04:07.770  -->  00:04:09.560
with an instance variable on line 10,
109

109

00:04:09.560  -->  00:04:12.380
and also a get tree string method.
110

110

00:04:12.380  -->  00:04:14.840
Then moving down we've got a deciduous tree,
111

111

00:04:14.840  -->  00:04:16.210
as well as a fruit tree,
112

112

00:04:16.210  -->  00:04:18.480
and you can see that they're both extend trees,
113

113

00:04:18.480  -->  00:04:20.013
so they're subclasses of the tree class,
114

114

00:04:21.114  -->  00:04:22.500
they've both got a type,
115

115

00:04:22.500  -->  00:04:25.880
and they're both overriding the get tree string method.
116

116

00:04:25.880  -->  00:04:28.500
So moving down to our upcast class itself
117

117

00:04:28.500  -->  00:04:29.440
in our main method,
118

118

00:04:29.440  -->  00:04:31.750
you see that we're creating a specific trees there,
119

119

00:04:31.750  -->  00:04:32.590
instances of,
120

120

00:04:32.590  -->  00:04:35.720
we're upcasting using that on line 45,
121

121

00:04:35.720  -->  00:04:39.240
basically upcasting a deciduous tree to its parent class,
122

122

00:04:39.240  -->  00:04:42.920
we're printing out types using another upcast on line 51.
123

123

00:04:42.920  -->  00:04:43.950
And finally upcasting
124

124

00:04:43.950  -->  00:04:47.110
to pass an object as a parameter on line 54.
125

125

00:04:47.110  -->  00:04:48.310
So if you run this code,
126

126

00:04:51.558  -->  00:04:52.470
all right you can see the output
127

127

00:04:52.470  -->  00:04:54.020
at the bottom of the screen there.
128

128

00:04:54.020  -->  00:04:58.540
So the upcast to a print tree type is actually redundant,
129

129

00:04:58.540  -->  00:05:00.000
you can see there,
130

130

00:05:00.000  -->  00:05:03.020
it's telling us that casting apple tree to tree is redundant
131

131

00:05:03.020  -->  00:05:05.820
and it didn't change the result if we hadn't upcasted.
132

132

00:05:05.820  -->  00:05:08.100
The object pass is ultimately a fruit tree and
133

133

00:05:08.100  -->  00:05:10.380
executing its get tree string method
134

134

00:05:10.380  -->  00:05:12.130
executes the fruit tree's method
135

135

00:05:12.130  -->  00:05:14.120
because that method is overridden.
136

136

00:05:14.120  -->  00:05:16.190
All right so this video and its example code
137

137

00:05:16.190  -->  00:05:18.720
demonstrated that casting can be used
138

138

00:05:18.720  -->  00:05:21.320
to retype your object dynamically.
139

139

00:05:21.320  -->  00:05:24.360
It allows to compiler to relax its type reference rules,
140

140

00:05:24.360  -->  00:05:25.730
but if done incorrectly,
141

141

00:05:25.730  -->  00:05:28.090
can cause runtime errors, as you saw.
142

142

00:05:28.090  -->  00:05:29.660 line:15% 
Let's now move on to the next video,
143

143

00:05:29.660  -->  00:05:32.420 line:15% 
where we're gonna review some additional interesting cases
144

144

00:05:32.420  -->  00:05:33.350 line:15% 
for casting.
145

145

00:05:33.350  -->  00:05:34.803 line:15% 
See you in the next video.
