WEBVTT
1
1

00:00:05.039  -->  00:00:05.900
<v Instructor>All right, so let's talk about</v>
2

2

00:00:05.900  -->  00:00:08.223
string concatenation in Java.
3

3

00:00:09.190  -->  00:00:11.410
The most common method for manipulating strings
4

4

00:00:11.410  -->  00:00:13.110
is the concatenation operator.
5

5

00:00:13.110  -->  00:00:16.270
Now, the concatenation operator for a string in Java,
6

6

00:00:16.270  -->  00:00:19.450
which I'm sure you're aware of, is the plus.
7

7

00:00:19.450  -->  00:00:21.440
So, let's review a simple example.
8

8

00:00:21.440  -->  00:00:23.930
I'm still in my Strings project from previous videos,
9

9

00:00:23.930  -->  00:00:26.420
I'm creating a new class, StringConcat.
10

10

00:00:30.169  -->  00:00:32.502
All right, so I'll run that.
11

11

00:00:33.960  -->  00:00:35.290
And we can now concatenate a string.
12

12

00:00:35.290  -->  00:00:37.370
So, what's happening here is that the plus operator
13

13

00:00:37.370  -->  00:00:40.170
is overloaded for strings, such that if any element
14

14

00:00:40.170  -->  00:00:41.500
is a string in the equation,
15

15

00:00:41.500  -->  00:00:43.940
then it converts the other operand to a string
16

16

00:00:43.940  -->  00:00:45.280
and produces a new string
17

17

00:00:45.280  -->  00:00:47.570
by joining the two operands together.
18

18

00:00:47.570  -->  00:00:48.860
That's one example of it.
19

19

00:00:48.860  -->  00:00:50.010
What actually happens when you try
20

20

00:00:50.010  -->  00:00:51.660
to concatenate a null object?
21

21

00:00:51.660  -->  00:00:54.490
Well, let's have a look at some code for that.
22

22

00:00:54.490  -->  00:00:55.640
So, here we've got a null object
23

23

00:00:55.640  -->  00:00:57.820
and we're attempting to concatenate the null object
24

24

00:00:57.820  -->  00:00:59.220
with another string,
25

25

00:00:59.220  -->  00:01:00.233
so if you run this,
26

26

00:01:02.120  -->  00:01:03.280
so you can see what's happened there, that,
27

27

00:01:03.280  -->  00:01:04.960
in the case of a null object,
28

28

00:01:04.960  -->  00:01:06.400
the result of doing that,
29

29

00:01:06.400  -->  00:01:09.180
concatenating the two results will be the string value,
30

30

00:01:09.180  -->  00:01:10.850
that you're concatenating as well as
31

31

00:01:10.850  -->  00:01:13.450
the string text null concatenated together.
32

32

00:01:13.450  -->  00:01:14.990
Which may not be what you thought would happen.
33

33

00:01:14.990  -->  00:01:16.320
All right, so moving on now,
34

34

00:01:16.320  -->  00:01:18.580
let's look at a primitive data type
35

35

00:01:18.580  -->  00:01:20.493
and concatenating those with strings.
36

36

00:01:22.720  -->  00:01:23.553
All right, so you can see
37

37

00:01:23.553  -->  00:01:25.770
we've got a primitive int on line 22,
38

38

00:01:25.770  -->  00:01:28.490
and we're trying to concatenate that with a string.
39

39

00:01:28.490  -->  00:01:29.323
Let's run this.
40

40

00:01:33.020  -->  00:01:35.650
And you can see the Java quad happily concatenates
41

41

00:01:35.650  -->  00:01:37.890
a string to a primitive type.
42

42

00:01:37.890  -->  00:01:39.470
Basically, we're creating a new string
43

43

00:01:39.470  -->  00:01:40.770
as a result of doing that.
44

44

00:01:41.913  -->  00:01:44.340
All right, so let's start talking about reference variables.
45

45

00:01:44.340  -->  00:01:47.360
When you concatenate a string to a reference variable,
46

46

00:01:47.360  -->  00:01:49.610
if the variable is a reference type,
47

47

00:01:49.610  -->  00:01:52.260
then the toString() method on the object is called.
48

48

00:01:52.260  -->  00:01:54.600
If the variable is a primitive data type,
49

49

00:01:54.600  -->  00:01:56.810
the variable is boxed to a wrapper
50

50

00:01:56.810  -->  00:01:58.770
and its toString() method is called.
51

51

00:01:58.770  -->  00:02:00.400
And obviously, that's what's happened here,
52

52

00:02:00.400  -->  00:02:03.020
when we tried to concatenate using primitive type.
53

53

00:02:03.020  -->  00:02:04.110
But let's have a look at that example
54

54

00:02:04.110  -->  00:02:05.090
using a reference variable.
55

55

00:02:05.090  -->  00:02:07.560
We're gonna add a few examples to demonstrate this.
56

56

00:02:07.560  -->  00:02:10.750
What we need is to create a very simple class.
57

57

00:02:10.750  -->  00:02:13.383
We're gonna add that to the bottom of this file first.
58

58

00:02:14.520  -->  00:02:15.400
And you can see that literally,
59

59

00:02:15.400  -->  00:02:17.450
I just got a toString() method there.
60

60

00:02:17.450  -->  00:02:19.320
And obviously it's non-public.
61

61

00:02:19.320  -->  00:02:20.750
All right, so let's look at concatenating
62

62

00:02:20.750  -->  00:02:21.840
this reference variable.
63

63

00:02:21.840  -->  00:02:24.690
So I'm gonna add some code to do that in our main method.
64

64

00:02:25.790  -->  00:02:27.320
And you can see that we're actually creating
65

65

00:02:27.320  -->  00:02:30.590
a new version of our class, a new instance,
66

66

00:02:30.590  -->  00:02:32.720
and we're trying to do some concatenation on it.
67

67

00:02:32.720  -->  00:02:33.923
So, if you run this,
68

68

00:02:36.414  -->  00:02:37.300
and you can see, quite happily
69

69

00:02:37.300  -->  00:02:39.230
the toString() method was actually called
70

70

00:02:39.230  -->  00:02:40.940
from our simple class,
71

71

00:02:40.940  -->  00:02:43.380
and the concatenation for that and the other string
72

72

00:02:43.380  -->  00:02:45.720
went through quite nicely by Java.
73

73

00:02:45.720  -->  00:02:47.810
So, you can see that, in the last three examples
74

74

00:02:47.810  -->  00:02:48.643
that I've actually shown,
75

75

00:02:48.643  -->  00:02:50.330
even the case of using the primitive type,
76

76

00:02:50.330  -->  00:02:52.320
we can use a primitive data type
77

77

00:02:52.320  -->  00:02:53.970
with a concatenator operator,
78

78

00:02:53.970  -->  00:02:55.520
and you don't need to specify a wrapper
79

79

00:02:55.520  -->  00:02:57.530
because it happens automatically,
80

80

00:02:57.530  -->  00:02:58.990
and in the second example,
81

81

00:02:58.990  -->  00:03:01.520
the toString() method of the class was automatically called
82

82

00:03:01.520  -->  00:03:03.683
when it concatenated the strings together.
83

83

00:03:04.520  -->  00:03:07.790
So in that example that I'm talking about on line 24,
84

84

00:03:07.790  -->  00:03:09.010
pretty simple example,
85

85

00:03:09.010  -->  00:03:11.000
when we concatenated a string to an int.
86

86

00:03:11.000  -->  00:03:13.330
What happens if you take that a step further
87

87

00:03:13.330  -->  00:03:16.300
and we do some basic integer math first?
88

88

00:03:16.300  -->  00:03:17.450
Let's put some code in.
89

89

00:03:18.880  -->  00:03:20.820
So you can see now things are a little bit more complicated
90

90

00:03:20.820  -->  00:03:23.630
with our concatenation, specifically on line 35.
91

91

00:03:23.630  -->  00:03:24.750
So have a think about what you'd think
92

92

00:03:24.750  -->  00:03:27.350
the result of that would be before you run the example.
93

93

00:03:27.350  -->  00:03:28.450
Okay, I'll run it now.
94

94

00:03:30.310  -->  00:03:32.430
And you can see, we've got resultString is 20
95

95

00:03:32.430  -->  00:03:34.410
equals 1010.
96

96

00:03:34.410  -->  00:03:37.320
Now, does the value in resultString surprise you here?
97

97

00:03:37.320  -->  00:03:38.990
So, what's important here is that
98

98

00:03:38.990  -->  00:03:41.210
operator overloading has precedence,
99

99

00:03:41.210  -->  00:03:43.080
such that I plus J,
100

100

00:03:43.080  -->  00:03:46.070
are evaluated as ints by the operator plus,
101

101

00:03:46.070  -->  00:03:48.550
and the operator was addition, not concatenation
102

102

00:03:48.550  -->  00:03:50.250
at the beginning of the statement
103

103

00:03:50.250  -->  00:03:52.180
prior to the string equal operand,
104

104

00:03:52.180  -->  00:03:54.350
which then overloads the operator
105

105

00:03:54.350  -->  00:03:56.720
and begins the string concatenation process
106

106

00:03:56.720  -->  00:03:59.307
so that operands after the initial string
107

107

00:03:59.307  -->  00:04:01.910
are now evaluated as strings individually
108

108

00:04:01.910  -->  00:04:05.140
as described in the operand type evaluation.
109

109

00:04:05.140  -->  00:04:08.230
Now, I'll talk about operator precedence in a future video,
110

110

00:04:08.230  -->  00:04:09.370
but it's important that you know
111

111

00:04:09.370  -->  00:04:11.710
that if you want both equations to be evaluated
112

112

00:04:11.710  -->  00:04:14.720
as integers prior to printing the results,
113

113

00:04:14.720  -->  00:04:17.690
you'll need parentheses around the second equation
114

114

00:04:17.690  -->  00:04:18.523
for that to happen.
115

115

00:04:18.523  -->  00:04:20.600
So, let's actually put some more code in,
116

116

00:04:20.600  -->  00:04:23.033
with parentheses, so you can see what I mean.
117

117

00:04:25.550  -->  00:04:26.530
So, depending on what you want,
118

118

00:04:26.530  -->  00:04:29.010
you need to understand the use of the plus sign
119

119

00:04:29.010  -->  00:04:30.790
when combining it with strings and numbers
120

120

00:04:30.790  -->  00:04:32.380
is really important there to get the results
121

121

00:04:32.380  -->  00:04:33.820
that you're expecting.
122

122

00:04:33.820  -->  00:04:35.063
So, if I now run this,
123

123

00:04:39.220  -->  00:04:41.020
you can see by the use of parentheses,
124

124

00:04:41.020  -->  00:04:42.440
we're actually getting the results
125

125

00:04:42.440  -->  00:04:45.010
that we actually want in this scenario.
126

126

00:04:45.010  -->  00:04:46.070
All right, so, let's move on.
127

127

00:04:46.070  -->  00:04:48.840
A slight variation on the concatenation operator
128

128

00:04:48.840  -->  00:04:50.560
is the compound concatenation operator
129

129

00:04:50.560  -->  00:04:53.350
and that's the plus equals, as opposed to the plus.
130

130

00:04:53.350  -->  00:04:55.740
So, let's create a new class to look at some examples.
131

131

00:04:55.740  -->  00:04:59.183
So I'm gonna create a new class called StringCompoundConcat.
132

132

00:05:08.196  -->  00:05:10.330
And you can see, at various points in this code
133

133

00:05:10.330  -->  00:05:13.520
we're using the plus equals compound concatenation operator
134

134

00:05:13.520  -->  00:05:15.640
instead of the concatenator operator
135

135

00:05:15.640  -->  00:05:17.130
that we've used previously.
136

136

00:05:17.130  -->  00:05:18.130
Now, if we run this.
137

137

00:05:23.010  -->  00:05:24.160
And we get the results,
138

138

00:05:24.160  -->  00:05:26.980
which probably aren't surprising for you at this time.
139

139

00:05:26.980  -->  00:05:29.070
Now, let's go a little bit further here.
140

140

00:05:29.070  -->  00:05:31.430
We're gonna add some more code to the main method
141

141

00:05:31.430  -->  00:05:32.410
and run it.
142

142

00:05:32.410  -->  00:05:34.450
And specifically, we're gonna do a string concatenation
143

143

00:05:34.450  -->  00:05:36.420
when the right hand object isn't a string.
144

144

00:05:36.420  -->  00:05:38.143
So let's just look at doing that.
145

145

00:05:40.849  -->  00:05:42.349
All right, so, let's run this.
146

146

00:05:45.700  -->  00:05:46.920
Now here, were you surprised that you could
147

147

00:05:46.920  -->  00:05:50.570
concatenate a string to an object that you created,
148

148

00:05:50.570  -->  00:05:52.630
and even more surprising, perhaps,
149

149

00:05:52.630  -->  00:05:54.830
that referencing the toString() on your object
150

150

00:05:54.830  -->  00:05:56.580
after this concatenation
151

151

00:05:56.580  -->  00:05:59.400
continues to display the concatenated value?
152

152

00:05:59.400  -->  00:06:02.030
Maybe it'll be surprising for some people.
153

153

00:06:02.030  -->  00:06:04.550
All right, so, let's now look at primitive data types
154

154

00:06:04.550  -->  00:06:07.250
used with this operator, combined with string objects.
155

155

00:06:09.780  -->  00:06:12.810
And we've got both a valid and an invalid
156

156

00:06:12.810  -->  00:06:14.670
piece of code there to talk about.
157

157

00:06:14.670  -->  00:06:16.500
So, just, in the case of the error
158

158

00:06:16.500  -->  00:06:17.750
which I've got down here,
159

159

00:06:19.270  -->  00:06:21.000
required int, found a string.
160

160

00:06:21.000  -->  00:06:22.990
Errors come up when the primitive data type
161

161

00:06:22.990  -->  00:06:25.670
is on the left hand side of the operator.
162

162

00:06:25.670  -->  00:06:26.760
Now, note that this includes
163

163

00:06:26.760  -->  00:06:29.310
the Boolean primitive data type as well.
164

164

00:06:29.310  -->  00:06:30.560
This might happen if you reverse
165

165

00:06:30.560  -->  00:06:33.280
and put it onto the right hand side.
166

166

00:06:33.280  -->  00:06:35.080
All right, so I'm just gonna remove,
167

167

00:06:35.080  -->  00:06:37.333
well actually, I'll just comment out those two lines.
168

168

00:06:38.600  -->  00:06:39.750
All right, so just finishing off now.
169

169

00:06:39.750  -->  00:06:42.190
Let's just look at another two quick examples.
170

170

00:06:42.190  -->  00:06:43.360
I'm going to do,
171

171

00:06:43.360  -->  00:06:45.930
paste some code in to include some math
172

172

00:06:45.930  -->  00:06:47.970
on the right hand side.
173

173

00:06:47.970  -->  00:06:49.070
So I'll add that code in.
174

174

00:06:49.070  -->  00:06:51.510
All right, so there's the code.
175

175

00:06:51.510  -->  00:06:54.510
So note that the first section that I've added at the top
176

176

00:06:54.510  -->  00:06:56.490
does the integer math first.
177

177

00:06:56.490  -->  00:06:58.400
So let's actually see what the output would be
178

178

00:06:58.400  -->  00:06:59.313
from running this.
179

179

00:07:01.690  -->  00:07:03.550
So I can see what the results are
180

180

00:07:03.550  -->  00:07:05.510
in the output pane down at the bottom.
181

181

00:07:05.510  -->  00:07:07.880
So, I've covered a lot of different examples in this video
182

182

00:07:07.880  -->  00:07:09.950
with the string concatenation operator,
183

183

00:07:09.950  -->  00:07:12.770
and the compound concatenation operator as well.
184

184

00:07:12.770  -->  00:07:13.860
In the next video, we're gonna start
185

185

00:07:13.860  -->  00:07:16.090
looking at methods on the string object
186

186

00:07:16.090  -->  00:07:18.690
that we can use to manipulate string objects.
187

187

00:07:18.690  -->  00:07:19.990
See you in the next video.
