WEBVTT
0
1
00:00:05.270 --> 00:00:06.440
<v Instructor>In the last video,</v>
1

2
00:00:06.440 --> 00:00:07.430
we reviewed some
2

3
00:00:07.430 --> 00:00:09.710
of the more common methods on StringBuilder.
3

4
00:00:09.710 --> 00:00:12.440
Let's take a look at one that might not do
4

5
00:00:12.440 --> 00:00:13.760
what you expect.
5

6
00:00:13.760 --> 00:00:15.930
So I'm gonna create a new class in our StringBuilder project
6

7
00:00:15.930 --> 00:00:17.293
called StringBuilderExtras.
7

8
00:00:18.502 --> 00:00:20.585
(typing)
8

9
00:00:29.440 --> 00:00:31.200
Okay, so there's the code.
9

10
00:00:31.200 --> 00:00:32.190
Pretty straightforward.
10

11
00:00:32.190 --> 00:00:33.600
We're creating a new StringBuilder instance.
11

12
00:00:33.600 --> 00:00:36.770
We're appending some data, printing out what the value is,
12

13
00:00:36.770 --> 00:00:37.940
the length and capacity.
13

14
00:00:37.940 --> 00:00:39.930
The code we're focusing on is on line 21.
14

15
00:00:39.930 --> 00:00:42.700
What do you think trimToSize actually does?
15

16
00:00:42.700 --> 00:00:44.880
And as a result, what would be the current value
16

17
00:00:44.880 --> 00:00:47.170
of the builder, length, and capacity
17

18
00:00:47.170 --> 00:00:49.970
after the call trimToSize?
18

19
00:00:49.970 --> 00:00:52.420
Let's actually run the code and see what happens.
19

20
00:00:54.690 --> 00:00:56.350
So you can see that neither the value,
20

21
00:00:56.350 --> 00:00:58.820
or the length that the StringBuilder object changed
21

22
00:00:58.820 --> 00:01:01.470
after executing the method trimToSize.
22

23
00:01:01.470 --> 00:01:04.660
Rather, the capacity was reduced to the length
23

24
00:01:04.660 --> 00:01:06.420
of the StringBuilder value.
24

25
00:01:06.420 --> 00:01:09.790
The javadoc for trimToSize describes the method's purpose
25

26
00:01:09.790 --> 00:01:11.995
as, quote, "Attempts to reduce storage used
26

27
00:01:11.995 --> 00:01:13.940
"for the character sequence."
27

28
00:01:13.940 --> 00:01:15.220
Un-quote.
28

29
00:01:15.220 --> 00:01:17.430
So how would you trim or strip leading
29

30
00:01:17.430 --> 00:01:19.970
or trailing white space from a StringBuilder?
30

31
00:01:19.970 --> 00:01:22.240
Well there aren't any actual methods to do this
31

32
00:01:22.240 --> 00:01:23.660
on a StringBuilder.
32

33
00:01:23.660 --> 00:01:26.702
Generally any cleaning or transformation of Strings
33

34
00:01:26.702 --> 00:01:29.300
is best done as you're appending data
34

35
00:01:29.300 --> 00:01:30.720
to your StringBuilder.
35

36
00:01:30.720 --> 00:01:32.240
But let's say, let's paste this code
36

37
00:01:32.240 --> 00:01:33.500
at the end of the main method.
37

38
00:01:33.500 --> 00:01:35.267
And what I'm gonna do is just replace the value
38

39
00:01:35.267 --> 00:01:37.979
of the StringBuilder object with a cleaned up String.
39

40
00:01:37.979 --> 00:01:40.062
(typing)
40

41
00:01:42.350 --> 00:01:43.840
Okay, there's our code.
41

42
00:01:43.840 --> 00:01:45.460
You can see that I've got a call there
42

43
00:01:45.460 --> 00:01:46.970
on line 26 to replace,
43

44
00:01:46.970 --> 00:01:49.963
but I'm using builder.toString, .strip.
44

45
00:01:50.840 --> 00:01:52.040
Let's actually run this.
45

46
00:01:54.240 --> 00:01:56.520
So you can say that you can apply any string method
46

47
00:01:56.520 --> 00:01:59.820
to the string value from the toString method call
47

48
00:01:59.820 --> 00:02:02.580
of StringBuilder and replace your entire StringBuilder
48

49
00:02:02.580 --> 00:02:04.920
value with the transformString.
49

50
00:02:04.920 --> 00:02:07.033
That's exactly what I've done on line 26.
50

51
00:02:07.990 --> 00:02:09.810
Now, I haven't covered the method getChars
51

52
00:02:09.810 --> 00:02:11.610
for String or StringBuilder.
52

53
00:02:11.610 --> 00:02:12.670
So let's review that here,
53

54
00:02:12.670 --> 00:02:14.490
because there may be some coverage of this
54

55
00:02:14.490 --> 00:02:16.810
on the exam, but I am not sure that this is a method
55

56
00:02:16.810 --> 00:02:17.900
that's used a lot.
56

57
00:02:17.900 --> 00:02:20.290
It's structured a bit differently
57

58
00:02:20.290 --> 00:02:23.070
because it doesn't return anything from the method itself
58

59
00:02:23.070 --> 00:02:27.310
but alters data in one of the parameters passed to it.
59

60
00:02:27.310 --> 00:02:28.143
So I've got a chunk of code
60

61
00:02:28.143 --> 00:02:31.430
that I'm gonna paste in to show you what I mean.
61

62
00:02:31.430 --> 00:02:32.699
Let's have a look at that code.
62

63
00:02:32.699 --> 00:02:34.829
(typing)
63

64
00:02:34.829 --> 00:02:35.662
Right, so there's the code.
64

65
00:02:35.662 --> 00:02:36.915
What I'll do, I'll just go up to the code
65

66
00:02:36.915 --> 00:02:38.850
as it was pasted in.
66

67
00:02:38.850 --> 00:02:39.683
This is here.
67

68
00:02:39.683 --> 00:02:41.280
So I'm going to export the getChars method
68

69
00:02:41.280 --> 00:02:42.960
on String and StringBuilder.
69

70
00:02:42.960 --> 00:02:44.860
So I've got some test data on line 34.
70

71
00:02:46.060 --> 00:02:49.150
So we're doing a couple of calls to getChars on String
71

72
00:02:49.150 --> 00:02:50.520
and also on StringBuilder object.
72

73
00:02:50.520 --> 00:02:51.520
We're outputting it.
73

74
00:02:53.570 --> 00:02:55.180
Basically just making some changes there.
74

75
00:02:55.180 --> 00:02:56.730
So let's actually run this code
75

76
00:02:56.730 --> 00:02:58.263
and I'll talk about it a bit more.
76

77
00:03:02.050 --> 00:03:05.090
So hopefully you could see that the array, the changes
77

78
00:03:05.090 --> 00:03:06.270
are quite interesting.
78

79
00:03:06.270 --> 00:03:08.610
The char array result is the same length
79

80
00:03:08.610 --> 00:03:11.520
as the array passed into the getChars method,
80

81
00:03:11.520 --> 00:03:14.650
but this particular method lets you populate the array
81

82
00:03:14.650 --> 00:03:16.629
with some part of the String or StringBuilder
82

83
00:03:16.629 --> 00:03:19.040
from which the method's called.
83

84
00:03:19.040 --> 00:03:20.220
That's a little bit unusual.
84

85
00:03:20.220 --> 00:03:23.580
So, what happens, though, if our destination char array
85

86
00:03:23.580 --> 00:03:25.030
is too short?
86

87
00:03:25.030 --> 00:03:26.880
Well, let's paste in some code to see what happens
87

88
00:03:26.880 --> 00:03:28.501
in that scenario.
88

89
00:03:28.501 --> 00:03:30.584
(typing)
89

90
00:03:33.133 --> 00:03:34.950
All right, so there's the code.
90

91
00:03:34.950 --> 00:03:36.820
Now if we run this, we'll probably get an error.
91

92
00:03:36.820 --> 00:03:37.970
We should get an error.
92

93
00:03:39.270 --> 00:03:40.103
We have got an error.
93

94
00:03:40.103 --> 00:03:42.463
You can see we've got an error there on line 78.
94

95
00:03:43.404 --> 00:03:44.398
And basically that's what happens
95

96
00:03:44.398 --> 00:03:47.040
if you're trying to make changes
96

97
00:03:47.040 --> 00:03:49.453
and the destination char Array is too short.
97

98
00:03:50.544 --> 00:03:53.290
All right, so I'll just comment out that last bit of code
98

99
00:03:53.290 --> 00:03:54.503
so it'll still compile.
99

100
00:03:55.540 --> 00:03:57.240
(typing)
100

101
00:03:57.240 --> 00:03:59.651
All right, so you can see here how easily
101

102
00:03:59.651 --> 00:04:02.370
if the getChars method is not one you use a lot
102

103
00:04:02.370 --> 00:04:04.830
that a question on the certification exam
103

104
00:04:04.830 --> 00:04:06.910
could confuse you or trip you up.
104

105
00:04:06.910 --> 00:04:10.040
String and StringBuilder both implement this method,
105

106
00:04:10.040 --> 00:04:12.680
but not through the CharSequence interface.
106

107
00:04:12.680 --> 00:04:15.120
So if you see an exam question applying this method
107

108
00:04:15.120 --> 00:04:17.810
to a CharSequence, you can safely flag it
108

109
00:04:17.810 --> 00:04:19.550
as a compile error.
109

110
00:04:19.550 --> 00:04:21.460
So the destination parameter for the characters,
110

111
00:04:21.460 --> 00:04:25.230
the third parameter, must be an initialised char array.
111

112
00:04:25.230 --> 00:04:28.410
If you see an exam question with any other type,
112

113
00:04:28.410 --> 00:04:31.790
or the array is not initialised, you can also flag that
113

114
00:04:31.790 --> 00:04:33.083
as a compile error.
114

115
00:04:34.420 --> 00:04:37.230
The destination character array size must be greater
115

116
00:04:37.230 --> 00:04:39.890
or equal to the length of the selected source
116

117
00:04:39.890 --> 00:04:43.500
plus the defined destination index.
117

118
00:04:43.500 --> 00:04:46.250
You receive a runtime error, as we saw in this code,
118

119
00:04:46.250 --> 00:04:48.480
if you exceed the array size.
119

120
00:04:48.480 --> 00:04:50.580
Finally, if you do not select any characters
120

121
00:04:50.580 --> 00:04:53.690
from the source by specifying sourceEndIndex
121

122
00:04:53.690 --> 00:04:56.000
equals sourceStartIndex,
122

123
00:04:56.000 --> 00:04:58.323
then your char array does not change at all.
123

124
00:04:59.160 --> 00:05:01.590
All right so that's the out of the ordinary concepts
124

125
00:05:01.590 --> 00:05:02.530
from StringBuilders.
125

126
00:05:02.530 --> 00:05:05.420
Let's end the video here and we'll move on to a quiz
126

127
00:05:05.420 --> 00:05:07.780
on StringBuilders and then on to the next section
127

128
00:05:07.780 --> 00:05:09.210
and specifically in that section,
128

129
00:05:09.210 --> 00:05:10.610
we're gonna start talking about operators
129

130
00:05:10.610 --> 00:05:12.380
and decision constructs.
130

131
00:05:12.380 --> 00:05:15.053
See you in the next quiz slash next section.
