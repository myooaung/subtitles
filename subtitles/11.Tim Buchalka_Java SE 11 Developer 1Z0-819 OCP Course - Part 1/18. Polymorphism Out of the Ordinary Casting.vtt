WEBVTT
1
1

00:00:05.150  -->  00:00:06.820
<v Tim>Let's now look at some out of ordinary</v>
2

2

00:00:06.820  -->  00:00:09.860
situations when utilising polymorphism to cast
3

3

00:00:09.860  -->  00:00:11.430
in core methods.
4

4

00:00:11.430  -->  00:00:13.570
In the last few videos, I discussed casting
5

5

00:00:13.570  -->  00:00:16.590
a primitive data type in reference variables.
6

6

00:00:16.590  -->  00:00:18.520
In this video, I want to explore casting
7

7

00:00:18.520  -->  00:00:21.490
specifically for arrays and generics.
8

8

00:00:21.490  -->  00:00:23.340
I haven't discussed generics in the course yet
9

9

00:00:23.340  -->  00:00:24.910
and that's because they're not officially part
10

10

00:00:24.910  -->  00:00:26.930
of the first certification exam,
11

11

00:00:26.930  -->  00:00:28.930
but you may bump into them in some
12

12

00:00:28.930  -->  00:00:30.340
of the example code on the exam,
13

13

00:00:30.340  -->  00:00:32.680
so I'm gonna review them ever so briefly
14

14

00:00:32.680  -->  00:00:34.423
in the context of casting.
15

15

00:00:35.560  -->  00:00:36.995
So, we need to create a new class in our
16

16

00:00:36.995  -->  00:00:38.380
Polymorphism project.
17

17

00:00:38.380  -->  00:00:40.533
And we're going to call it Cast Extras.
18

18

00:00:40.533  -->  00:00:41.819
(mouse clicking)
19

19

00:00:41.819  -->  00:00:46.819
(keyboard clanking)
20

20

00:00:49.490  -->  00:00:52.580
Alright, so you can see there we got a class cast extras.
21

21

00:00:52.580  -->  00:00:56.060
We've got two nested, static class is Base Class,
22

22

00:00:56.060  -->  00:00:57.580
as well as Next Class,
23

23

00:00:57.580  -->  00:00:59.823
and Next Class extends to Base Class.
24

24

00:00:59.823  -->  00:01:02.180
Then moving down to our main method,
25

25

00:01:02.180  -->  00:01:04.650
you can see there firstly I'm creating the uh,
26

26

00:01:04.650  -->  00:01:07.230
most generic of arrays, and that's an array
27

27

00:01:07.230  -->  00:01:09.060
of type 'object'.
28

28

00:01:09.060  -->  00:01:10.630
So, moving on down from there,
29

29

00:01:10.630  -->  00:01:12.900
within filling an Object Array, with objects
30

30

00:01:12.900  -->  00:01:14.860
that are of type Next Class,
31

31

00:01:14.860  -->  00:01:16.920
noting that it doesn't change the type of array
32

32

00:01:16.920  -->  00:01:18.970
to Next Class when I do that.
33

33

00:01:18.970  -->  00:01:20.940
I've been setting one of the elements in the array
34

34

00:01:20.940  -->  00:01:22.550
to a String Builder object because
35

35

00:01:22.550  -->  00:01:23.810
I want to wreck some havoc.
36

36

00:01:23.810  -->  00:01:25.530
And then we're printing out at the bottom
37

37

00:01:25.530  -->  00:01:28.060
the array type, as well as the array elements.
38

38

00:01:28.060  -->  00:01:29.888
So, let's run this code.
39

39

00:01:29.888  -->  00:01:31.793
(mouse clicking)
40

40

00:01:31.793  -->  00:01:33.120
And you can see down in the bottom there,
41

41

00:01:33.120  -->  00:01:35.130
our array is still an array of object,
42

42

00:01:35.130  -->  00:01:37.300
but our elements are Next Class objects,
43

43

00:01:37.300  -->  00:01:38.600
with the exception of one of them
44

44

00:01:38.600  -->  00:01:41.290
and I'll scroll over and check that one out.
45

45

00:01:41.290  -->  00:01:43.260
And that was the String Builder at Index Five,
46

46

00:01:43.260  -->  00:01:45.110
and that's printing out 'test' there.
47

47

00:01:46.190  -->  00:01:48.380
Alright, so what is the cost of creating
48

48

00:01:48.380  -->  00:01:51.060
an array at the most generic type there is?
49

49

00:01:51.060  -->  00:01:52.790
Object, in other words.
50

50

00:01:52.790  -->  00:01:55.750
Accessing elements in an Object Array will require
51

51

00:01:55.750  -->  00:01:58.550
a cast, more than likely anytime you want to get
52

52

00:01:58.550  -->  00:02:00.712
an element to do something with it.
53

53

00:02:00.712  -->  00:02:02.811
Alright, so let's paste some more code in here.
54

54

00:02:02.811  -->  00:02:03.849
(mouse clicking)
55

55

00:02:03.849  -->  00:02:05.150
(keyboard clanking)
56

56

00:02:05.150  -->  00:02:07.010
Alrighty, so there's our code.
57

57

00:02:07.010  -->  00:02:08.860
So, we got a loop through our array,
58

58

00:02:08.860  -->  00:02:12.270
we gonna cast each object first to type 'Next Class'
59

59

00:02:12.270  -->  00:02:14.870
to print the name attribute on Next Class.
60

60

00:02:14.870  -->  00:02:16.960
And then we gotta cast to Base Class
61

61

00:02:16.960  -->  00:02:19.610
to print the name attribute on the Base Class.
62

62

00:02:19.610  -->  00:02:21.460
So, you can see we're using a uh,
63

63

00:02:21.460  -->  00:02:23.640
a four loop there, in doing what I mentioned.
64

64

00:02:23.640  -->  00:02:25.530
We've also got Try Catch there,
65

65

00:02:25.530  -->  00:02:27.090
and we're obviously wanting to catch something
66

66

00:02:27.090  -->  00:02:28.120
if an exception is raised,
67

67

00:02:28.120  -->  00:02:29.527
so let's actually run the code.
68

68

00:02:29.527  -->  00:02:32.780
(mouse clicking)
69

69

00:02:32.780  -->  00:02:34.420
You can see obviously the code compiled,
70

70

00:02:34.420  -->  00:02:35.960
but we gotta runtime exception when we try
71

71

00:02:35.960  -->  00:02:38.360
to cast the String Builder to a Next Class.
72

72

00:02:38.360  -->  00:02:40.390
The Try Catch code caught that,
73

73

00:02:40.390  -->  00:02:42.977
and you can see we got our Class Cast Exception,
74

74

00:02:42.977  -->  00:02:44.870
"The String Builder cannot be cast to class,
75

75

00:02:44.870  -->  00:02:47.520
Cast Extras Next Class."
76

76

00:02:47.520  -->  00:02:49.150
So, here you can see that putting everything
77

77

00:02:49.150  -->  00:02:52.280
in an object array makes more work for the consumer,
78

78

00:02:52.280  -->  00:02:54.410
in terms of casting and is a little dangerous
79

79

00:02:54.410  -->  00:02:56.890
because objects of unknown types might
80

80

00:02:56.890  -->  00:02:59.223
be allowed to populate the array.
81

81

00:03:00.260  -->  00:03:02.023
Alright, so I'm gonna add some more code,
82

82

00:03:02.023  -->  00:03:02.856
(mouse clicking)
83

83

00:03:02.856  -->  00:03:05.200
just down at the bottom of the main method again.
84

84

00:03:05.200  -->  00:03:06.760
Okay, in this code,
85

85

00:03:06.760  -->  00:03:09.760
it's creating an array of Base Class with six elements,
86

86

00:03:09.760  -->  00:03:12.990
unpopulating three of them with Next Class instances,
87

87

00:03:12.990  -->  00:03:16.030
and three of them with Base Class instances.
88

88

00:03:16.030  -->  00:03:17.190
We're then going on down to print
89

89

00:03:17.190  -->  00:03:18.060
out the array elements,
90

90

00:03:18.060  -->  00:03:20.010
and to loop through them using the ternary operator
91

91

00:03:20.010  -->  00:03:22.200
in conjunction with the instance of operator
92

92

00:03:22.200  -->  00:03:24.430
to determine what kind of object we really have,
93

93

00:03:24.430  -->  00:03:26.020
and what we're dealing with.
94

94

00:03:26.020  -->  00:03:27.162
So, lets run the code.
95

95

00:03:27.162  -->  00:03:30.730
(mouse clicking)
96

96

00:03:30.730  -->  00:03:32.100
So, error part from this code segment
97

97

00:03:32.100  -->  00:03:33.340
we pasted is showing,
98

98

00:03:33.340  -->  00:03:35.320
demonstrating that the first three elements are
99

99

00:03:35.320  -->  00:03:37.650
Next Class types and the following three
100

100

00:03:37.650  -->  00:03:38.747
are Base Class.
101

101

00:03:38.747  -->  00:03:40.330
And we're printing the name field on each and
102

102

00:03:40.330  -->  00:03:43.300
if we hadn't cast the Next Class objects to Next Class,
103

103

00:03:43.300  -->  00:03:45.560
case would've been the name for all six elements.
104

104

00:03:45.560  -->  00:03:46.393
Alright...
105

105

00:03:47.271  -->  00:03:49.650
Alright, so let's test casting the entire array
106

106

00:03:49.650  -->  00:03:52.390
a little bit and just see what happens by pasting
107

107

00:03:52.390  -->  00:03:53.335
some extra code
108

108

00:03:53.335  -->  00:03:55.077
So, gonna do it at the bottom of the main method.
109

109

00:03:55.077  -->  00:03:56.520
(keyboard clanking)
110

110

00:03:56.520  -->  00:03:58.330
So, you can see what I've tried to do here,
111

111

00:03:58.330  -->  00:04:00.407
and the Compiler has let us get away with it so far,
112

112

00:04:00.407  -->  00:04:02.990
and it's feasible that the mixed Array could be
113

113

00:04:02.990  -->  00:04:05.750
populated with objects of its subtype only,
114

114

00:04:05.750  -->  00:04:06.583
but do you see,
115

115

00:04:06.583  -->  00:04:07.960
once we got a run at the Java Virtual Machine
116

116

00:04:07.960  -->  00:04:09.940
won't allow me to do this.
117

117

00:04:09.940  -->  00:04:11.001
Let's run it.
118

118

00:04:11.001  -->  00:04:12.260
(mouse clicking)
119

119

00:04:12.260  -->  00:04:14.603
So, the code compiled but executing it caused
120

120

00:04:14.603  -->  00:04:15.880
an issue.
121

121

00:04:15.880  -->  00:04:16.970
And so as you can see,
122

122

00:04:16.970  -->  00:04:18.950
we've got a Class Cast Exception when
123

123

00:04:18.950  -->  00:04:20.050
we ran that block of code.
124

124

00:04:20.050  -->  00:04:23.052
Alright so, let's just comment that code out,
125

125

00:04:23.052  -->  00:04:24.443
(mouse clicking)
126

126

00:04:24.443  -->  00:04:26.360
(keyboard clanking)
127

127

00:04:26.360  -->  00:04:28.130
and let's try something else.
128

128

00:04:28.130  -->  00:04:29.819
I'm going to paste some more code in.
129

129

00:04:29.819  -->  00:04:30.652
(keyboard clanking)
130

130

00:04:30.652  -->  00:04:32.810
So I can see that I'm using a Arrays.fill
131

131

00:04:32.810  -->  00:04:35.147
to fill it with just Next Class objects.
132

132

00:04:35.147  -->  00:04:36.560
I'm using a cast there,
133

133

00:04:36.560  -->  00:04:39.300
and setting the next Array to reference to mixed Array.
134

134

00:04:39.300  -->  00:04:40.797
So let's see what happens.
135

135

00:04:40.797  -->  00:04:43.990
(mouse clicking)
136

136

00:04:43.990  -->  00:04:44.823
But as you can see,
137

137

00:04:44.823  -->  00:04:47.070
we got the same error when we ran it.
138

138

00:04:47.070  -->  00:04:49.700
So, you can't downcast an array to find with
139

139

00:04:49.700  -->  00:04:52.160
a parent type to it's child's type,
140

140

00:04:52.160  -->  00:04:53.730
you won't get a Compiler error,
141

141

00:04:53.730  -->  00:04:55.560
but you will get a runtime exception.
142

142

00:04:55.560  -->  00:04:58.132
Alright, so I'm just going to comment out the code.
143

143

00:04:58.132  -->  00:05:03.132
(keyboard clanking)
144

144

00:05:03.670  -->  00:05:05.780
Alright, so I'm going to end the video here.
145

145

00:05:05.780  -->  00:05:06.613
In the next one,
146

146

00:05:06.613  -->  00:05:08.260
we're going to start working on some examples
147

147

00:05:08.260  -->  00:05:11.010
of casting with and without generics.
148

148

00:05:11.010  -->  00:05:12.310
See you in the next video.
