WEBVTT
1
1

00:00:05.280  -->  00:00:08.710
<v ->Right so this is Section 12, Understanding Modules.</v>
2

2

00:00:08.710  -->  00:00:11.970
So a module is a named set of packages, resources
3

3

00:00:11.970  -->  00:00:13.660
and native libraries.
4

4

00:00:13.660  -->  00:00:16.400
Java 9 introduced a concept of a module,
5

5

00:00:16.400  -->  00:00:19.050
a new java entity that is similar to an executable
6

6

00:00:19.050  -->  00:00:21.260
jar in it's production state,
7

7

00:00:21.260  -->  00:00:23.890
but that includes a name and a descriptor class
8

8

00:00:23.890  -->  00:00:25.860
that provides benefits that didn't exist
9

9

00:00:25.860  -->  00:00:28.320
prior to Java 9.
10

10

00:00:28.320  -->  00:00:31.090
The benefits of a module are as follows;
11

11

00:00:31.090  -->  00:00:33.250
Stronger encapsulation at a higher level
12

12

00:00:33.250  -->  00:00:35.290
which improves security.
13

13

00:00:35.290  -->  00:00:38.019
Prior to Java 9 any class in any package
14

14

00:00:38.019  -->  00:00:41.020
with a public or protected access modifier
15

15

00:00:41.020  -->  00:00:43.490
that was included in a jar on the classpath
16

16

00:00:43.490  -->  00:00:47.080
was by it's nature publicly accessible or extensible
17

17

00:00:47.080  -->  00:00:49.190
by all of the application code,
18

18

00:00:49.190  -->  00:00:51.440
so there was no way to hide this information.
19

19

00:00:52.870  -->  00:00:56.390
In JDK 9, you have three ways to expose your public types.
20

20

00:00:56.390  -->  00:00:57.223
You can make them:
21

21

00:00:57.223  -->  00:01:00.300
One, public to everyone, unqualified exposure.
22

22

00:01:00.300  -->  00:01:03.010
Public to just specific modules deemed friends,
23

23

00:01:03.010  -->  00:01:04.650
that's qualified exposure.
24

24

00:01:04.650  -->  00:01:07.060
Or third, not public to any other module,
25

25

00:01:07.060  -->  00:01:11.030
but only to the packages included in the module itself.
26

26

00:01:11.030  -->  00:01:14.390
A module descriptor will specifically declare which packages
27

27

00:01:14.390  -->  00:01:17.800
are visible to other modules executing in the same
28

28

00:01:17.800  -->  00:01:19.850
application space.
29

29

00:01:19.850  -->  00:01:22.030
And the other benefits to a module are
30

30

00:01:22.030  -->  00:01:25.680
reliable dependencies which improves stability.
31

31

00:01:25.680  -->  00:01:28.470
A module descriptor requires a module to specifically
32

32

00:01:28.470  -->  00:01:31.234
declare which modules it's dependent on,
33

33

00:01:31.234  -->  00:01:33.743
publishing it's dependencies to consumers.
34

34

00:01:34.950  -->  00:01:37.082
So this section specifically we're gonna be discussing
35

35

00:01:37.082  -->  00:01:39.940
the following topics which will be part of the first
36

36

00:01:39.940  -->  00:01:41.624
certification exam.
37

37

00:01:41.624  -->  00:01:44.460
So describe the Modular JDK.
38

38

00:01:44.460  -->  00:01:47.162
Declare modules and enable access between modules
39

39

00:01:47.162  -->  00:01:49.650
and third, describe how a modular project
40

40

00:01:49.650  -->  00:01:51.660
is compiled and run.
41

41

00:01:51.660  -->  00:01:52.563
Let's get started.
