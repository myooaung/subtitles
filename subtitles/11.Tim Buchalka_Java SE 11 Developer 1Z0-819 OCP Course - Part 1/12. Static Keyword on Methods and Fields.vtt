WEBVTT
1
1

00:00:04.985  -->  00:00:07.260
<v Tim>Let's talk about the static keyword</v>
2

2

00:00:07.260  -->  00:00:09.630
as it applies to methods and fields.
3

3

00:00:09.630  -->  00:00:11.200
So you can apply the keyword static
4

4

00:00:11.200  -->  00:00:13.480
to the following elements of class,
5

5

00:00:13.480  -->  00:00:17.610
a field, an initializer, method and a nested type
6

6

00:00:17.610  -->  00:00:19.600
for class, interface or enum.
7

7

00:00:19.600  -->  00:00:21.440
By declaring something static,
8

8

00:00:21.440  -->  00:00:23.370
what you're doing is associating the element
9

9

00:00:23.370  -->  00:00:26.740
with the class and not an instance of the class.
10

10

00:00:26.740  -->  00:00:29.170
The elements exist and are available to be used
11

11

00:00:29.170  -->  00:00:32.900
even if you never create a single instance of the class.
12

12

00:00:32.900  -->  00:00:35.030
What you can't do is use the modifier static
13

13

00:00:35.030  -->  00:00:39.130
on an outer class itself or a local variable.
14

14

00:00:39.130  -->  00:00:40.600
So the modifier only has a meaning
15

15

00:00:40.600  -->  00:00:42.730
when it describes the relationship to a class
16

16

00:00:42.730  -->  00:00:43.763
and its elements.
17

17

00:00:44.810  -->  00:00:46.790
So I'm gonna link this article documentation
18

18

00:00:46.790  -->  00:00:48.980
in the Resources section of this video.
19

19

00:00:48.980  -->  00:00:51.020
We're gonna summarise it here as follows.
20

20

00:00:51.020  -->  00:00:52.800
We derive the following scenarios
21

21

00:00:52.800  -->  00:00:55.390
of when a class itself gets initialised.
22

22

00:00:55.390  -->  00:00:58.710
A class or interface type T will be initialised immediately
23

23

00:00:58.710  -->  00:01:01.990
before the first occurrence of any of the following.
24

24

00:01:01.990  -->  00:01:04.990
T is a class and an instance of T is created.
25

25

00:01:04.990  -->  00:01:08.090
A static method declared by T is invoked.
26

26

00:01:08.090  -->  00:01:10.780
A static field declared by T is assigned.
27

27

00:01:10.780  -->  00:01:12.980
or a static field declared by T is used
28

28

00:01:12.980  -->  00:01:16.170
and the field is not a constant variable.
29

29

00:01:16.170  -->  00:01:17.780
Now these rules are nuanced
30

30

00:01:17.780  -->  00:01:19.500
and I'm going to show you examples of each
31

31

00:01:19.500  -->  00:01:22.690
in this video and probably the next one or two videos.
32

32

00:01:22.690  -->  00:01:24.310
You access a static element
33

33

00:01:24.310  -->  00:01:26.200
with the exception of an initializer
34

34

00:01:26.200  -->  00:01:27.860
by calling it with the dot operator
35

35

00:01:27.860  -->  00:01:29.830
on the class name itself.
36

36

00:01:29.830  -->  00:01:32.910
A constructor cannot be static because a constructor
37

37

00:01:32.910  -->  00:01:34.900
is used in creating an instance
38

38

00:01:34.900  -->  00:01:37.480
and I've already said that to anything that's modified
39

39

00:01:37.480  -->  00:01:40.400
the static key word will not be associated with the instance
40

40

00:01:40.400  -->  00:01:42.850
although it is available for use by the instance.
41

41

00:01:44.150  -->  00:01:46.210
So it turns out we've used a static method
42

42

00:01:46.210  -->  00:01:49.440
in almost every example of code I've demonstrated
43

43

00:01:49.440  -->  00:01:51.997
so far in the course and that's the main method
44

44

00:01:51.997  -->  00:01:54.870
which is a course used to execute a class.
45

45

00:01:54.870  -->  00:01:56.950
The main method is static and callable
46

46

00:01:56.950  -->  00:01:59.744
without executing an instance of the class itself
47

47

00:01:59.744  -->  00:02:01.830
and I have also reviewed examples of
48

48

00:02:01.830  -->  00:02:04.835
static fields and static initializers briefly.
49

49

00:02:04.835  -->  00:02:07.540
But in this video and as I said the next one or two,
50

50

00:02:07.540  -->  00:02:10.360
I'm gonna focus entirely on static elements
51

51

00:02:10.360  -->  00:02:13.780
and when they get initialised and also how you can use them.
52

52

00:02:13.780  -->  00:02:15.940
So we're still in the methods project.
53

53

00:02:15.940  -->  00:02:17.220
We're going to create a new class
54

54

00:02:17.220  -->  00:02:19.127
called StaticElementTests.
55

55

00:02:27.976  -->  00:02:29.001
All right, so lesson code,
56

56

00:02:29.001  -->  00:02:32.350
so this code consists of two classes.
57

57

00:02:32.350  -->  00:02:34.750
So we've got a class on screen there StaticStuff
58

58

00:02:35.793  -->  00:02:37.520
and this has got two static variables
59

59

00:02:37.520  -->  00:02:40.280
and you can see both of those now on screen.
60

60

00:02:40.280  -->  00:02:42.640
It's also got a static initializer
61

61

00:02:42.640  -->  00:02:44.030
which we'll use to let us know
62

62

00:02:44.030  -->  00:02:45.720
when the class is initialised.
63

63

00:02:45.720  -->  00:02:47.300
That's more of the static method
64

64

00:02:47.300  -->  00:02:49.250
that prints out a statement for us.
65

65

00:02:49.250  -->  00:02:50.350
So scrolling down a bit, you can see
66

66

00:02:50.350  -->  00:02:52.440
the second class there StaticElementTests
67

67

00:02:52.440  -->  00:02:56.780
has a main method with a single System.out.printIn statement
68

68

00:02:56.780  -->  00:02:59.883
printing the static field appName from StaticStuff.
69

69

00:03:00.790  -->  00:03:02.110
So if you run this...
70

70

00:03:05.200  -->  00:03:07.640
So let me make the call to access the static field
71

71

00:03:07.640  -->  00:03:10.973
for the first time the class was initialised as you can see.
72

72

00:03:12.070  -->  00:03:13.480
All right, so let's just confirm though
73

73

00:03:13.480  -->  00:03:15.330
that's it's not initialised automatically
74

74

00:03:15.330  -->  00:03:17.690
before any code is executed.
75

75

00:03:17.690  -->  00:03:20.830
Let's do something before accessing the static field.
76

76

00:03:20.830  -->  00:03:22.630
So I'm going to make a change to the main method
77

77

00:03:22.630  -->  00:03:23.683
to achieve this.
78

78

00:03:24.830  -->  00:03:26.330
Then what you do is kind of follow it
79

79

00:03:26.330  -->  00:03:27.610
just to do something and then we'll
80

80

00:03:27.610  -->  00:03:29.510
access the static field on main stuff.
81

81

00:03:31.060  -->  00:03:33.070
So I'm gonna paste that in
82

82

00:03:33.070  -->  00:03:34.473
above the existing code.
83

83

00:03:35.840  -->  00:03:36.840
And as you can see in the comment,
84

84

00:03:36.840  -->  00:03:38.043
we're just adding some work for us
85

85

00:03:38.043  -->  00:03:42.010
just to prove StaticStuff isn't initialised on start-up.
86

86

00:03:42.010  -->  00:03:42.960
We'll run this now.
87

87

00:03:46.130  -->  00:03:47.493
So if you still see from this app
88

88

00:03:47.493  -->  00:03:48.920
that StaticStuff wasn't initialised
89

89

00:03:48.920  -->  00:03:52.036
until we try to access the StaticField,
90

90

00:03:52.036  -->  00:03:53.650
and of course that's the kind
91

91

00:03:53.650  -->  00:03:55.993
that we're accessing that field on line 37.
92

92

00:03:56.966  -->  00:03:58.760
All right, so let's change the code again.
93

93

00:03:58.760  -->  00:03:59.860
What we're gonna do is instead
94

94

00:03:59.860  -->  00:04:01.713
share the class of top StaticStuff.
95

95

00:04:02.780  -->  00:04:05.600
I'm gonna also paste that before the last one.
96

96

00:04:05.600  -->  00:04:07.450
Then access our StaticField app name
97

97

00:04:08.530  -->  00:04:09.790
and there's the code.
98

98

00:04:09.790  -->  00:04:12.270
I can see we're printing an object of top StaticStuff
99

99

00:04:12.270  -->  00:04:14.853
and printing it out from the code.
100

100

00:04:18.080  -->  00:04:20.590
And again looking at the app now,
101

101

00:04:20.590  -->  00:04:23.660
this proves that the class was initialised on the line
102

102

00:04:23.660  -->  00:04:25.760
where we credit in it so the class this time
103

103

00:04:25.760  -->  00:04:28.930
and not when we access the StaticField app name.
104

104

00:04:28.930  -->  00:04:30.220
That's obviously because of the new code
105

105

00:04:30.220  -->  00:04:31.573
we added on line 37.
106

106

00:04:32.518  -->  00:04:35.660
Let's also change StaticStuff and use the instance instead
107

107

00:04:35.660  -->  00:04:37.063
so we'll change that to s.
108

108

00:04:38.030  -->  00:04:39.193
Let's run the code and see what happens down here
109

109

00:04:39.193  -->  00:04:41.023
without accessing it statically.
110

110

00:04:42.810  -->  00:04:44.400
We're running it by the instance.
111

111

00:04:44.400  -->  00:04:46.700
And you can see that the app remains the same.
112

112

00:04:49.380  -->  00:04:51.227
All right, so now let's just declare and object
113

113

00:04:51.227  -->  00:04:52.976
of top StaticStuff,
114

114

00:04:52.976  -->  00:04:55.366
but this time we won't instantiate it.
115

115

00:04:55.366  -->  00:04:58.446
So what I'm gonna do is change the code.
116

116

00:04:58.446  -->  00:05:01.206
Specifically this code here
117

117

00:05:01.206  -->  00:05:02.123
as follows.
118

118

00:05:03.846  -->  00:05:06.126
So now you can see we're declaring an object
119

119

00:05:06.126  -->  00:05:08.216
but not instantiating it
120

120

00:05:08.216  -->  00:05:10.133
and we'll run the code.
121

121

00:05:13.067  -->  00:05:15.046
Now this app will show that just declaring an object
122

122

00:05:15.046  -->  00:05:17.470
of top StaticStuff and setting it to null
123

123

00:05:17.470  -->  00:05:19.870
doesn't trigger the class's initialization.
124

124

00:05:19.870  -->  00:05:22.070
That didn't happen until later on.
125

125

00:05:22.070  -->  00:05:23.450
Another interesting point from the code above there
126

126

00:05:23.450  -->  00:05:25.800
is that even though s is a null object
127

127

00:05:25.800  -->  00:05:27.505
we can still use s.appName to access
128

128

00:05:27.505  -->  00:05:30.510
a static field on the class.
129

129

00:05:30.510  -->  00:05:32.110
All right, so let's explore another nuance
130

130

00:05:32.110  -->  00:05:34.040
of class initialization.
131

131

00:05:34.040  -->  00:05:36.360
We're gonna change the field appName in StaticStuff
132

132

00:05:36.360  -->  00:05:37.960
to also be final.
133

133

00:05:37.960  -->  00:05:39.850
Let's go ahead and do that.
134

134

00:05:39.850  -->  00:05:41.360
So we'll come back up here.
135

135

00:05:41.360  -->  00:05:43.270
So appName on line 11,
136

136

00:05:43.270  -->  00:05:44.720
let's just add final to that.
137

137

00:05:45.627  -->  00:05:47.233
A static final.
138

138

00:05:48.160  -->  00:05:49.003
Run the code.
139

139

00:05:51.050  -->  00:05:52.760
So what's interesting here,
140

140

00:05:52.760  -->  00:05:55.300
while the static initializer was never executed,
141

141

00:05:55.300  -->  00:05:58.590
and that's because the class hasn't yet been initialised,
142

142

00:05:58.590  -->  00:06:01.250
we need to find a final static field on a class.
143

143

00:06:01.250  -->  00:06:03.050
The class does not have to be intialized
144

144

00:06:03.050  -->  00:06:05.490
for the application to use that field
145

145

00:06:05.490  -->  00:06:06.980
cause of course once we set the value
146

146

00:06:06.980  -->  00:06:08.680
which we've done on line 11,
147

147

00:06:08.680  -->  00:06:10.800
it can no longer be changed.
148

148

00:06:10.800  -->  00:06:14.470
Right, so continuing on with the class initialization rule,
149

149

00:06:14.470  -->  00:06:16.880
we now set a variable to be a static field
150

150

00:06:16.880  -->  00:06:19.390
as opposed to our final static field.
151

151

00:06:19.390  -->  00:06:21.010
Because specifically what we're gonna be doing is
152

152

00:06:21.010  -->  00:06:23.773
using this static int on line 24.
153

153

00:06:23.773  -->  00:06:26.263
So I'm gonna come down to our main method.
154

154

00:06:27.230  -->  00:06:29.009
We're gonna add this below the,
155

155

00:06:29.009  -->  00:06:30.663
accessing the static member.
156

156

00:06:32.810  -->  00:06:34.270
Okay, so there's the code.
157

157

00:06:34.270  -->  00:06:35.103
Run the code.
158

158

00:06:40.213  -->  00:06:42.100
And you can see here now that the class was initialised
159

159

00:06:42.100  -->  00:06:44.010
when this line was encountered
160

160

00:06:44.010  -->  00:06:47.513
accessing the counter static field that was defined
161

161

00:06:47.513  -->  00:06:49.493
confirming that assigning a static field
162

162

00:06:49.493  -->  00:06:52.682
to a variable triggers initialization.
163

163

00:06:52.682  -->  00:06:56.120
All right, so finally now, let's execute a static method.
164

164

00:06:56.120  -->  00:06:58.820
So we're gonna change the main method.
165

165

00:06:58.820  -->  00:06:59.653
We're gonna delete some of this code.
166

166

00:06:59.653  -->  00:07:01.857
I'm just gonna comment that code out for now.
167

167

00:07:04.190  -->  00:07:05.243
We're gonna replace that with this code
168

168

00:07:05.243  -->  00:07:06.453
that I'm pasting in.
169

169

00:07:07.682  -->  00:07:11.230
And the code's obviously just accessing the static method.
170

170

00:07:11.230  -->  00:07:12.430
So if you run this code,
171

171

00:07:16.274  -->  00:07:17.470
you can see the class was initialised
172

172

00:07:17.470  -->  00:07:20.410
where we call it the static method printAppName.
173

173

00:07:20.410  -->  00:07:22.550
Let me just go up and check that method out again.
174

174

00:07:22.550  -->  00:07:24.200
You can see that there on screen.
175

175

00:07:25.200  -->  00:07:26.810
All right, so what happens when we create
176

176

00:07:26.810  -->  00:07:30.050
multiple instances of the StaticStuff class?
177

177

00:07:30.050  -->  00:07:32.760
Let's change the method to achieve that.
178

178

00:07:32.760  -->  00:07:34.680
We're gonna come down to the main method
179

179

00:07:36.530  -->  00:07:39.210
and I'm going to replace some code,
180

180

00:07:39.210  -->  00:07:41.970
so what I'll do is I'll comment this out as well
181

181

00:07:43.320  -->  00:07:45.470
and I'll comment out our call to the method
182

182

00:07:47.870  -->  00:07:49.120
and let's paste its code.
183

183

00:07:51.390  -->  00:07:53.400
All right, so we're now creating multiple instances
184

184

00:07:53.400  -->  00:07:54.843
of the StaticStuff class.
185

185

00:07:55.850  -->  00:07:56.683
Let's run this.
186

186

00:08:02.991  -->  00:08:03.824
And we confirm that the class
187

187

00:08:03.824  -->  00:08:05.500
is initialised once at the time
188

188

00:08:05.500  -->  00:08:07.570
we instantiate the first object.
189

189

00:08:07.570  -->  00:08:10.280
We can also see that from the static field counter
190

190

00:08:10.280  -->  00:08:11.840
it's not getting inclemented
191

191

00:08:11.840  -->  00:08:14.200
and that's because the static initializer executes
192

192

00:08:14.200  -->  00:08:17.930
only once and not for every instance that's being created
193

193

00:08:17.930  -->  00:08:19.910
as is the case here in the code
194

194

00:08:19.910  -->  00:08:21.710
that we've added to the main method.
195

195

00:08:23.010  -->  00:08:24.760
Let's finish the video here because it's getting quite long
196

196

00:08:24.760  -->  00:08:27.160
and we'll continue on with this in the next one.
