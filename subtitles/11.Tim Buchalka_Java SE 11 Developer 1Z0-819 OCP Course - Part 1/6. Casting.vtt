WEBVTT
1
1

00:00:06.020  -->  00:00:08.200
<v Tim>There are times when you wanna force the compiler</v>
2

2

00:00:08.200  -->  00:00:11.170
to overlook its narrowing and widening checks,
3

3

00:00:11.170  -->  00:00:13.800
because you have knowledge of the actual values occurring
4

4

00:00:13.800  -->  00:00:16.000
in the programme during execution.
5

5

00:00:16.000  -->  00:00:18.170
You can do this by using casting.
6

6

00:00:18.170  -->  00:00:20.400
So you cast by referencing the type you want
7

7

00:00:20.400  -->  00:00:23.340
to be widened, or narrowed to in parenthesis
8

8

00:00:23.340  -->  00:00:25.520
preceding the variable or value that
9

9

00:00:25.520  -->  00:00:27.270
is to be converted.
10

10

00:00:27.270  -->  00:00:30.000
You can cast to a larger sized variable, widening.
11

11

00:00:30.000  -->  00:00:32.610
This is more common case and poses less risk
12

12

00:00:32.610  -->  00:00:34.960
since there is no risk of loss of value.
13

13

00:00:34.960  -->  00:00:36.730
But you can also cast to a smaller
14

14

00:00:36.730  -->  00:00:38.920
sized variable, narrowing.
15

15

00:00:38.920  -->  00:00:40.350
There may be a valid case for this,
16

16

00:00:40.350  -->  00:00:43.610
however, be aware that unexpected results may occur.
17

17

00:00:43.610  -->  00:00:45.590
Perhaps you want to use a method that requires
18

18

00:00:45.590  -->  00:00:48.160
a smaller variable type, and you know your value
19

19

00:00:48.160  -->  00:00:50.030
will not exceed the smaller
20

20

00:00:50.030  -->  00:00:52.253
variable range at the time of execution.
21

21

00:00:53.970  -->  00:00:56.320
Okay, so continuing on with our primitive data project,
22

22

00:00:56.320  -->  00:00:58.710
let's create a class called casting example
23

23

00:00:58.710  -->  00:01:00.060
and I'll place the code in.
24

24

00:01:08.717  -->  00:01:10.868
So you can see we're setting up some local variables
25

25

00:01:10.868  -->  00:01:14.010
at lines 12 and 13, 15 and 16.
26

26

00:01:14.010  -->  00:01:16.410
We're using a for loop, and forcing the for loop
27

27

00:01:16.410  -->  00:01:18.360
to stay in the valid range of a short there
28

28

00:01:18.360  -->  00:01:21.337
by using the short.min_value and short.max_value.
29

29

00:01:24.546  -->  00:01:25.770
And looking at this code, we know because
30

30

00:01:25.770  -->  00:01:27.500
of the way we've written the code that i would never
31

31

00:01:27.500  -->  00:01:30.050
be outside the range of a short, and as such,
32

32

00:01:30.050  -->  00:01:33.883
we can confidently cast i to s2 as a short,
33

33

00:01:35.260  -->  00:01:37.040
and then we're putting out some information at
34

34

00:01:37.040  -->  00:01:39.356
lines 26 through 27.
35

35

00:01:39.356  -->  00:01:40.650
Then we also need to pass the short
36

36

00:01:40.650  -->  00:01:42.090
to a method that we've created.
37

37

00:01:42.090  -->  00:01:45.460
So we're passing s2, not our loop variable i.
38

38

00:01:45.460  -->  00:01:47.570
You can see that til on line 31.
39

39

00:01:47.570  -->  00:01:48.800
Then we're just putting out some output
40

40

00:01:48.800  -->  00:01:52.400
and there's our callAMethodWithParameter int i, short s.
41

41

00:01:52.400  -->  00:01:54.220
Then you can see you really only want this to print once,
42

42

00:01:54.220  -->  00:01:56.970
though it's called in a loop, so if we run this code...
43

43

00:01:59.060  -->  00:02:00.800
So the output for this code is shown
44

44

00:02:00.800  -->  00:02:02.270
as you can see from the screen and the results
45

45

00:02:02.270  -->  00:02:03.780
are what we expected.
46

46

00:02:03.780  -->  00:02:06.960
The minimum value equals short.min_value and
47

47

00:02:06.960  -->  00:02:10.000
the maximum value equals short.max_value,
48

48

00:02:10.000  -->  00:02:11.860
and the number of iterations represents the
49

49

00:02:11.860  -->  00:02:13.970
different short values that can be stored
50

50

00:02:13.970  -->  00:02:15.490
in a short variable.
51

51

00:02:15.490  -->  00:02:17.730
The last iteration contained the maximum
52

52

00:02:17.730  -->  00:02:18.800
value for the short.
53

53

00:02:18.800  -->  00:02:20.550
So all is well there so far.
54

54

00:02:20.550  -->  00:02:22.780
So what happens now if our code is changed
55

55

00:02:22.780  -->  00:02:25.320
by some new developer after we've moved on
56

56

00:02:25.320  -->  00:02:28.410
and they make two minor changes altering min value
57

57

00:02:28.410  -->  00:02:30.290
and max value as we'll do here?
58

58

00:02:30.290  -->  00:02:33.170
So if we go back to these values here at line 15,
59

59

00:02:33.170  -->  00:02:36.390
remember, we've got int minValue equals short.min_value
60

60

00:02:37.520  -->  00:02:38.670
so let's actually change that.
61

61

00:02:38.670  -->  00:02:41.520
We're going to put minus one for our min value
62

62

00:02:42.630  -->  00:02:44.530
and for max value, we're gonna change that
63

63

00:02:44.530  -->  00:02:45.683
by putting a plus one.
64

64

00:02:46.890  -->  00:02:48.570
So that's pretty innocent.
65

65

00:02:48.570  -->  00:02:49.870
Why even test it?
66

66

00:02:49.870  -->  00:02:51.610
But we'll all do it anyway just in case.
67

67

00:02:51.610  -->  00:02:53.160
So we'll actually run this now.
68

68

00:02:55.030  -->  00:02:56.690
All right, now as you can see, you've got some
69

69

00:02:56.690  -->  00:02:58.350
unexpected output.
70

70

00:02:58.350  -->  00:03:00.710
Loop iterations looks correct.
71

71

00:03:00.710  -->  00:03:02.850
Two more loop iterations than previously.
72

72

00:03:02.850  -->  00:03:07.750
But, why is minimum value now equal to short.max_value?
73

73

00:03:07.750  -->  00:03:11.120
And why is maximum value now equal to short.min_value?
74

74

00:03:11.120  -->  00:03:13.800
And also why did the method print out information
75

75

00:03:13.800  -->  00:03:16.173
for two iterations as it's doing now?
76

76

00:03:17.220  -->  00:03:19.400
Well, the problem with casting is that if your value
77

77

00:03:19.400  -->  00:03:21.870
doesn't fall into the valid value range,
78

78

00:03:21.870  -->  00:03:24.799
your data may underflow or overflow.
79

79

00:03:24.799  -->  00:03:27.200
Underflow is defining or casting a value
80

80

00:03:27.200  -->  00:03:29.860
less than the minimum value for the datatype.
81

81

00:03:29.860  -->  00:03:32.030
Overflow is defining or casting a value
82

82

00:03:32.030  -->  00:03:34.683
greater than the maximum value for the datatype.
83

83

00:03:35.791  -->  00:03:37.390
In the example that I've just demonstrated,
84

84

00:03:37.390  -->  00:03:40.150
we've created both of these conditions, so that
85

85

00:03:40.150  -->  00:03:44.610
the s2 value in order were 32767.
86

86

00:03:44.610  -->  00:03:47.190
This is what happens when you underflow a short by 1.
87

87

00:03:47.190  -->  00:03:51.520
The sign bit gets toggled and now value is short.max_value,
88

88

00:03:51.520  -->  00:03:53.210
probably not what you intended.
89

89

00:03:53.210  -->  00:03:58.210
And secondly, the s2 value was minus 32768.
90

90

00:03:58.260  -->  00:04:03.260
So the 65534 values between minus 32768 and 32767.
91

91

00:04:05.375  -->  00:04:08.780
And then 32767 and minus 32768,
92

92

00:04:08.780  -->  00:04:11.250
now minus 32768 this is what happens
93

93

00:04:11.250  -->  00:04:13.270
when you overflow a short by 1.
94

94

00:04:13.270  -->  00:04:14.550
The sign bit gets toggled and
95

95

00:04:14.550  -->  00:04:16.620
now the value is short.min_value.
96

96

00:04:16.620  -->  00:04:19.890
Again, probably not what you expected or wanted.
97

97

00:04:19.890  -->  00:04:23.000
In some cases you might want to cast to a less precise
98

98

00:04:23.000  -->  00:04:25.740
data type, from a float or double to an int or long,
99

99

00:04:25.740  -->  00:04:26.680
for example.
100

100

00:04:26.680  -->  00:04:29.840
This will truncate the number to a whole number.
101

101

00:04:29.840  -->  00:04:31.020
And I'll create a quick example here,
102

102

00:04:31.020  -->  00:04:32.794
just to show you this.
103

103

00:04:32.794  -->  00:04:35.763
I'm going to go ahead and do that and create a new class.
104

104

00:04:37.340  -->  00:04:39.303
We'll call this Truncate Number.
105

105

00:04:49.240  -->  00:04:50.323
And if you run this,
106

106

00:04:54.320  -->  00:04:56.180
you'll see the result is myNumber equals 123
107

107

00:04:56.180  -->  00:04:59.840
Float.intValue equals 123.
108

108

00:04:59.840  -->  00:05:01.320
So clearly what we're doing there is
109

109

00:05:01.320  -->  00:05:03.880
truncating the result because we're converting
110

110

00:05:03.880  -->  00:05:05.873
from a float, in this case, to an int.
111

111

00:05:07.230  -->  00:05:08.900
All right, so we're gonna end the video here.
112

112

00:05:08.900  -->  00:05:10.720
We've talked about narrowing and widening
113

113

00:05:10.720  -->  00:05:13.070
for literals, as well as for variables.
114

114

00:05:13.070  -->  00:05:15.900
And also shown when the Java compiler allows it
115

115

00:05:15.900  -->  00:05:17.210
and when it doesn't.
116

116

00:05:17.210  -->  00:05:18.890
You can always force the compiler's hand
117

117

00:05:18.890  -->  00:05:21.490
and use a cast, but you should always ask yourself
118

118

00:05:21.490  -->  00:05:24.890
why you need a cast, and evaluate the risks associated
119

119

00:05:24.890  -->  00:05:27.910
with casting and try to code for those risks.
120

120

00:05:27.910  -->  00:05:29.600
The next video we're going to explore our types
121

121

00:05:29.600  -->  00:05:32.550
related to primitive data types and their initializations
122

122

00:05:32.550  -->  00:05:35.300
that you may never run across in your daily developer life,
123

123

00:05:35.300  -->  00:05:39.460
but may find their way on the certification exam.
124

124

00:05:39.460  -->  00:05:41.310
And then after that, there'll be a quiz.
125

125

00:05:41.310  -->  00:05:42.820
We'll go through what we learned in this section
126

126

00:05:42.820  -->  00:05:43.900
of the course.
127

127

00:05:43.900  -->  00:05:45.200
See you in the next video.
