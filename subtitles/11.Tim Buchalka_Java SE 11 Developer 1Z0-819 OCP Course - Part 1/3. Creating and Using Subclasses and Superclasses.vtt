WEBVTT
1
1

00:00:05.401  -->  00:00:06.560
<v ->Alright so let's walk through most</v>
2

2

00:00:06.560  -->  00:00:08.030
of the statements we made in the
3

3

00:00:08.030  -->  00:00:10.630
previous video in code samples.
4

4

00:00:10.630  -->  00:00:11.900
So we're gonna create a new project
5

5

00:00:11.900  -->  00:00:13.410
which I've already done called Inheritance.
6

6

00:00:13.410  -->  00:00:15.590
We need two classes in here, so I'm gonna
7

7

00:00:15.590  -->  00:00:18.320
go ahead and create them and paste in the code.
8

8

00:00:18.320  -->  00:00:21.343
com.petstore.Animal is the first one.
9

9

00:00:25.230  -->  00:00:27.526
The second class we'll create,
10

10

00:00:27.526  -->  00:00:30.113
AnimalVisit, also in the same package.
11

11

00:00:33.980  -->  00:00:36.570
Alright so there's the code for that.
12

12

00:00:36.570  -->  00:00:38.990
Alright so let's examine the animal class first.
13

13

00:00:38.990  -->  00:00:41.020
So the animal class is the base class
14

14

00:00:41.020  -->  00:00:42.750
and defines attributes which would apply
15

15

00:00:42.750  -->  00:00:44.320
to any animal of type animal.
16

16

00:00:44.320  -->  00:00:45.530
As you can see there we've got
17

17

00:00:45.530  -->  00:00:48.290
there is attributes to find there:
18

18

00:00:48.290  -->  00:00:51.360
name, owner, breed, type, and chip date.
19

19

00:00:51.360  -->  00:00:53.480
Now I've included a package private enum
20

20

00:00:53.480  -->  00:00:56.330
that you can see there with a list of animal types.
21

21

00:00:56.330  -->  00:00:58.440
I've limited getters and setters to just one
22

22

00:00:58.440  -->  00:01:00.120
of the private attributes for demonstration
23

23

00:01:00.120  -->  00:01:02.330
and space purposes, and that's the ChipDate.
24

24

00:01:02.330  -->  00:01:05.340
We've got a getter and a setter there as you can see.
25

25

00:01:05.340  -->  00:01:07.330
Now I'm setting most of the data through a
26

26

00:01:07.330  -->  00:01:10.230
package private constructor so you can see on screen
27

27

00:01:10.230  -->  00:01:13.074
and also, we've got a toString() method there but also,
28

28

00:01:13.074  -->  00:01:16.820
we've got a static examineAnimal() method as well.
29

29

00:01:16.820  -->  00:01:18.420
So that's the animal class,
30

30

00:01:18.420  -->  00:01:20.377
let's look at our animal visit class.
31

31

00:01:20.377  -->  00:01:22.590
The first thing we've got a dog class
32

32

00:01:22.590  -->  00:01:24.200
you can see defined there, and that's
33

33

00:01:24.200  -->  00:01:26.270
declared as a sub-class of animal.
34

34

00:01:26.270  -->  00:01:28.450
You can see that I'm adding some fields there,
35

35

00:01:28.450  -->  00:01:31.200
in fact I'm hiding the field chipDate on the parent
36

36

00:01:31.200  -->  00:01:33.480
as a result I've created a constructor
37

37

00:01:33.480  -->  00:01:36.160
which in turn executes the parent's constructor.
38

38

00:01:36.160  -->  00:01:38.370
Alright I've also created, overridden, rather,
39

39

00:01:38.370  -->  00:01:40.470
the parent's toString method, so you can see
40

40

00:01:40.470  -->  00:01:43.010
that I'm doing it up there on line 27.
41

41

00:01:43.010  -->  00:01:46.040
I've also overwritten this static method examineAnimal()
42

42

00:01:46.040  -->  00:01:47.860
on line 35.
43

43

00:01:47.860  -->  00:01:50.240
Alright so that's the dog class, and also we've got
44

44

00:01:50.240  -->  00:01:52.330
our AnimalVisit class there and you can see
45

45

00:01:52.330  -->  00:01:53.770
I'm creating an instance of dog and
46

46

00:01:53.770  -->  00:01:56.133
I'm assigning it to reference variable 'pug.'
47

47

00:01:56.133  -->  00:01:58.760
Then I'm executing some methods there on dog
48

48

00:01:58.760  -->  00:02:01.820
as well as animal, they're both static methods.
49

49

00:02:01.820  -->  00:02:04.690
Alright so that's the animal visit class.
50

50

00:02:04.690  -->  00:02:06.700
Now before we execute this let's actually debug it,
51

51

00:02:06.700  -->  00:02:10.470
so I'm going to presume that you know how to do debugging.
52

52

00:02:10.470  -->  00:02:14.080
What I'm going to do is set a breakpoint on line 74
53

53

00:02:14.080  -->  00:02:16.080
we're executing the examineAnimal()
54

54

00:02:16.080  -->  00:02:18.250
static method on our dog class.
55

55

00:02:18.250  -->  00:02:20.280
So obviously, debugging the code should execute
56

56

00:02:20.280  -->  00:02:23.110
up to the breakpoint, and a variables window should display,
57

57

00:02:23.110  -->  00:02:25.730
and do this in whatever IDE you're using
58

58

00:02:25.730  -->  00:02:27.070
if you're not using IntelliJ.
59

59

00:02:27.070  -->  00:02:29.870
In my case I've got to debug it because I'm in IntelliJ.
60

60

00:02:31.060  -->  00:02:32.790
And you can see the codes going to that line
61

61

00:02:32.790  -->  00:02:34.540
and stopped at the breakpoint.
62

62

00:02:34.540  -->  00:02:36.690
I'm going to examine the variables for pugs,
63

63

00:02:36.690  -->  00:02:38.990
I'm going to expand that so we can see them.
64

64

00:02:38.990  -->  00:02:41.090
So you can see from examining this now
65

65

00:02:41.090  -->  00:02:44.270
the dog.chipDate is valid, so we've got a value there,
66

66

00:02:44.270  -->  00:02:46.270
but scrolling down a bit Animal.chipDate
67

67

00:02:46.270  -->  00:02:48.280
you can see that that's not.
68

68

00:02:48.280  -->  00:02:50.780
And because we have declared a setter on the dog class
69

69

00:02:50.780  -->  00:02:53.700
its field is set, not the parent's class.
70

70

00:02:53.700  -->  00:02:56.240
And scrolling up, if we go back to our setter there
71

71

00:02:56.240  -->  00:02:59.220
for chipDate on a dog class, you see the setter there
72

72

00:02:59.220  -->  00:03:00.650
so that's the reason for that.
73

73

00:03:00.650  -->  00:03:01.860
Now let's just execute it a bit
74

74

00:03:01.860  -->  00:03:03.680
further now and let it get to the end.
75

75

00:03:03.680  -->  00:03:05.130
Then we'll go to the console.
76

76

00:03:06.060  -->  00:03:07.910
Looking at the console output now,
77

77

00:03:07.910  -->  00:03:10.330
we can see that the toString method was called.
78

78

00:03:10.330  -->  00:03:11.700
Ralph's dog is a pug, and of course
79

79

00:03:11.700  -->  00:03:14.070
we did that in the overridden toString method.
80

80

00:03:14.070  -->  00:03:17.110
We added the string, basically extended functionality
81

81

00:03:17.110  -->  00:03:19.210
of the superclass, so we got that output.
82

82

00:03:19.210  -->  00:03:22.060
Also notice that the method getChipDate is called
83

83

00:03:22.060  -->  00:03:24.000
on a parent whose Chip Date's null,
84

84

00:03:24.000  -->  00:03:24.956
we're seeing the reference there
85

85

00:03:24.956  -->  00:03:27.043
that Chip Date is equal to null.
86

86

00:03:28.070  -->  00:03:30.740
Notice also that the static method on animal
87

87

00:03:30.740  -->  00:03:33.430
was executed when animal.examineAnimal was called.
88

88

00:03:33.430  -->  00:03:36.150
And we can see that from these three lines of output there.
89

89

00:03:36.150  -->  00:03:38.180
Came back to our animal class, and looking at our
90

90

00:03:38.180  -->  00:03:40.000
examineAnimal() method, we can
91

91

00:03:40.000  -->  00:03:41.560
see the three lines of output.
92

92

00:03:41.560  -->  00:03:43.550
Then down at the bottom the static method on dog
93

93

00:03:43.550  -->  00:03:46.250
is executed when dog.examineAnimal is called,
94

94

00:03:46.250  -->  00:03:47.812
and we can see that examine for breathing problems
95

95

00:03:47.812  -->  00:03:50.760
being consistent with examineAnimal()
96

96

00:03:50.760  -->  00:03:52.733
static method for our dog class.
97

97

00:03:54.980  -->  00:03:57.460
So there was no apparent reason to hide ChipDate
98

98

00:03:57.460  -->  00:04:00.656
on the parent, and in fact doing so made
99

99

00:04:00.656  -->  00:04:02.570
executing the method getChipDate() confusing
100

100

00:04:02.570  -->  00:04:06.150
since it couldn't return the child's chipDate attribute.
101

101

00:04:06.150  -->  00:04:08.730
If we had created getChipDate() on Dog,
102

102

00:04:08.730  -->  00:04:10.140
we would have removed our ability
103

103

00:04:10.140  -->  00:04:13.870
to access the parent class's chipDate attribute altogether.
104

104

00:04:13.870  -->  00:04:15.150
So it's generally a good idea to
105

105

00:04:15.150  -->  00:04:18.573
avoid hiding class attributes including private ones.
106

106

00:04:20.370  -->  00:04:21.680
Alright so let's pause here for a moment
107

107

00:04:21.680  -->  00:04:23.760
to talk about the concept of hiding.
108

108

00:04:23.760  -->  00:04:26.850
You hide an instance variable by creating a variable
109

109

00:04:26.850  -->  00:04:29.710
of the same name and type on the subclass.
110

110

00:04:29.710  -->  00:04:33.050
You hide a static variable by creating a static variable
111

111

00:04:33.050  -->  00:04:35.640
of the same name and type on the subclass.
112

112

00:04:35.640  -->  00:04:38.810
You hide a static method by creating a static method with
113

113

00:04:38.810  -->  00:04:41.830
the same name and parameter types on the subclass.
114

114

00:04:41.830  -->  00:04:43.550
You do not hide an instance method
115

115

00:04:43.550  -->  00:04:45.740
from a subclass, you override it.
116

116

00:04:45.740  -->  00:04:47.200
Now we're going to be talking at length
117

117

00:04:47.200  -->  00:04:49.350
about overriding methods in a future video.
118

118

00:04:50.970  -->  00:04:52.836
Hiding doesn't necessarily mean that you cannot access
119

119

00:04:52.836  -->  00:04:55.470
the parent's declared members, it just means
120

120

00:04:55.470  -->  00:04:58.650
that if you do not use a qualifier or casting,
121

121

00:04:58.650  -->  00:05:00.570
the Java Virtual Machine will see only
122

122

00:05:00.570  -->  00:05:03.240
the subclass's members and not the parent's.
123

123

00:05:03.240  -->  00:05:05.300
In the case of instance variables,
124

124

00:05:05.300  -->  00:05:07.260
your object will maintain placeholders
125

125

00:05:07.260  -->  00:05:10.500
for both the parent's variables and the child's.
126

126

00:05:10.500  -->  00:05:12.700
Alrighty so this video has covered the basics of
127

127

00:05:12.700  -->  00:05:15.620
a concrete class extending another concrete class.
128

128

00:05:15.620  -->  00:05:17.510
In the next video I wanna take a closer look at
129

129

00:05:17.510  -->  00:05:19.470
static fields and what it means
130

130

00:05:19.470  -->  00:05:22.210
for a subclass to inherit a static field.
131

131

00:05:22.210  -->  00:05:23.510
See you in the next video.
