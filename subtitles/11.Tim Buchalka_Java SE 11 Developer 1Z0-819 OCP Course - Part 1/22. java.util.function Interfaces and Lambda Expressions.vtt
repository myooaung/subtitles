WEBVTT
1
1

00:00:05.300  -->  00:00:08.240 line:15% 
<v ->In the last video we created our own functional interface</v>
2

2

00:00:08.240  -->  00:00:10.960 line:15% 
for unary operator and binary operator
3

3

00:00:10.960  -->  00:00:14.110 line:15% 
and then we used the supplied inter-unary operator
4

4

00:00:14.110  -->  00:00:16.610 line:15% 
from the java.util.function package
5

5

00:00:16.610  -->  00:00:19.210 line:15% 
to demonstrate that Java provides a whole set of
6

6

00:00:19.210  -->  00:00:21.670 line:15% 
functional interfaces for your use.
7

7

00:00:21.670  -->  00:00:24.130
In this video I wanna talk about a few more of them,
8

8

00:00:24.130  -->  00:00:25.415
because once you understand them
9

9

00:00:25.415  -->  00:00:27.370
your life will get easier
10

10

00:00:27.370  -->  00:00:30.370
and also you may see some of these in example code
11

11

00:00:30.370  -->  00:00:31.723
when you sit the exam.
12

12

00:00:32.980  -->  00:00:34.190
So we need to create a new class
13

13

00:00:34.190  -->  00:00:35.680
in the Lambda Expressions project
14

14

00:00:35.680  -->  00:00:38.050
and call it SuppliedInterfaceTests.
15

15

00:00:40.163  -->  00:00:42.996
(keyboard clicks)
16

16

00:00:43.891  -->  00:00:47.220
(mouse clicks)
17

17

00:00:47.220  -->  00:00:48.820
All right so this code has an example
18

18

00:00:48.820  -->  00:00:53.470
of four of the interfaces in the Java.util.function package.
19

19

00:00:53.470  -->  00:00:55.520
And we're using the generic interface of each
20

20

00:00:55.520  -->  00:00:58.580
and passing a string type for each of them.
21

21

00:00:58.580  -->  00:01:01.430
So the first example you've got a string array there
22

22

00:01:01.430  -->  00:01:03.070
on line 21-5.
23

23

00:01:03.070  -->  00:01:06.060
But the first example was a consumer example.
24

24

00:01:06.060  -->  00:01:07.550
This method returns no result,
25

25

00:01:07.550  -->  00:01:10.100
it just does something on the parameter passed.
26

26

00:01:10.100  -->  00:01:13.330
Here we're setting up a code block in the Lambda Expression
27

27

00:01:13.330  -->  00:01:14.810
that creates a string builder
28

28

00:01:14.810  -->  00:01:16.230
that takes on the date, time,
29

29

00:01:16.230  -->  00:01:19.750
and the project class information to a string.
30

30

00:01:19.750  -->  00:01:22.480
Moving on down we've got a predicate example there.
31

31

00:01:22.480  -->  00:01:25.660
That method returns a boolean and accepts one parameter
32

32

00:01:25.660  -->  00:01:27.100
and we're using the predicate
33

33

00:01:27.100  -->  00:01:29.590
in the ArrayList.removeIf method
34

34

00:01:29.590  -->  00:01:31.460
to remove any string elements.
35

35

00:01:31.460  -->  00:01:33.390
Lets start with an A
36

36

00:01:33.390  -->  00:01:36.020
And we're using the dictionary string array
37

37

00:01:36.020  -->  00:01:38.033
that we defined on line 21 for that one.
38

38

00:01:39.826  -->  00:01:41.120
And you can see the sample code there
39

39

00:01:41.120  -->  00:01:43.640
that's actually using that in action
40

40

00:01:43.640  -->  00:01:46.163
to find any that start with an A.
41

41

00:01:47.050  -->  00:01:50.250
Right moving on down the next one is the supplier example.
42

42

00:01:50.250  -->  00:01:52.752
This method returns an object that accepts no parameter.
43

43

00:01:52.752  -->  00:01:54.450
It was simply just returning a string
44

44

00:01:54.450  -->  00:01:55.560
to show how that's being used.
45

45

00:01:55.560  -->  00:01:58.460
And the fourth example is a function example,
46

46

00:01:58.460  -->  00:02:01.540
the method returns a result and accepts one parameter.
47

47

00:02:01.540  -->  00:02:02.940
So here we're setting up a code block
48

48

00:02:02.940  -->  00:02:04.430
in the Lambda Expression
49

49

00:02:04.430  -->  00:02:07.343
that uses the repeat method on a past string.
50

50

00:02:08.210  -->  00:02:09.120
All right so that's the code
51

51

00:02:09.120  -->  00:02:09.953
let's run this.
52

52

00:02:13.950  -->  00:02:15.050
Okay we can see the output
53

53

00:02:15.050  -->  00:02:16.850
at the bottom of the screen there.
54

54

00:02:16.850  -->  00:02:18.990
So that gives you a good overall example
55

55

00:02:18.990  -->  00:02:21.150
how to use four of the interfaces
56

56

00:02:21.150  -->  00:02:23.920
in the java.util.function package.
57

57

00:02:23.920  -->  00:02:25.960
All right now what I wanna do is put lists of
58

58

00:02:25.960  -->  00:02:27.880
Lambda Expressions together
59

59

00:02:27.880  -->  00:02:30.220
to manipulate sets of data.
60

60

00:02:30.220  -->  00:02:34.520
So what you wanna do is create a new class in our project
61

61

00:02:34.520  -->  00:02:36.820
and we're gonna call this one ForEachExamples.
62

62

00:02:38.585  -->  00:02:41.418
(keyboard clicks)
63

63

00:02:46.450  -->  00:02:48.090
So this class as we look at it
64

64

00:02:48.090  -->  00:02:51.980
has a method to create a unique value for an array element
65

65

00:02:51.980  -->  00:02:53.290
in the format A_test_1
66

66

00:02:55.320  -->  00:02:58.460
and you can see that starting on line 17.
67

67

00:02:58.460  -->  00:03:00.530
And moving on down we've got our main method.
68

68

00:03:00.530  -->  00:03:02.403
And here we're gonna create an array
69

69

00:03:02.403  -->  00:03:04.880
we're doing that on line 30 string array
70

70

00:03:04.880  -->  00:03:05.860
and then the next,
71

71

00:03:05.860  -->  00:03:07.550
if you look at the code on line 36,
72

72

00:03:07.550  -->  00:03:08.740
what we're doing there,
73

73

00:03:08.740  -->  00:03:12.000
we're using the array set all method to populate data
74

74

00:03:12.000  -->  00:03:13.270
and the set all method uses a
75

75

00:03:13.270  -->  00:03:15.430
method reference Lambda Expression there
76

76

00:03:15.430  -->  00:03:16.740
to call the method we've created
77

77

00:03:16.740  -->  00:03:19.620
the one with two colons.
78

78

00:03:19.620  -->  00:03:22.820
Within making an array list out of the array on line 39
79

79

00:03:22.820  -->  00:03:24.020
and then we're actually getting into
80

80

00:03:24.020  -->  00:03:26.923
using the stream method on line 43.
81

81

00:03:28.550  -->  00:03:30.590
Now streams aren't part of this exam,
82

82

00:03:30.590  -->  00:03:33.113
they're part of the 1Z0-816 exam,
83

83

00:03:33.113  -->  00:03:35.640
but I'm using one here to just demonstrate
84

84

00:03:35.640  -->  00:03:38.580
using Lambda Expressions as we process the stream anyway.
85

85

00:03:38.580  -->  00:03:40.689
But keep in mind you won't be tested on stream
86

86

00:03:40.689  -->  00:03:43.533
in the 1Z0-815 exam.
87

87

00:03:44.379  -->  00:03:45.830
All right so moving on down
88

88

00:03:45.830  -->  00:03:47.540
I'm demonstrating some sorting there
89

89

00:03:47.540  -->  00:03:48.840
by the suffix number descending
90

90

00:03:48.840  -->  00:03:51.120
using a comparable interface
91

91

00:03:51.120  -->  00:03:52.673
So sorting by the numeric suffix
92

92

00:03:52.673  -->  00:03:55.142
of the value in the array descending
93

93

00:03:55.142  -->  00:03:58.827
and then another example there sorting in reverse order
94

94

00:03:58.827  -->  00:04:03.730
noting that in the example down there on line 62
95

95

00:04:03.730  -->  00:04:05.858
I'm showing you that its basically equivalent to
96

96

00:04:05.858  -->  00:04:07.008
comparator.reverseOrder
97

97

00:04:07.870  -->  00:04:11.600
which is that commented-out code on line 61.
98

98

00:04:11.600  -->  00:04:13.650
We're using the sort method there
99

99

00:04:13.650  -->  00:04:15.000
with the Lambda Expression.
100

100

00:04:16.200  -->  00:04:17.600
All right so let's run this.
101

101

00:04:20.401  -->  00:04:22.133
And you can see we've got the output.
102

102

00:04:24.030  -->  00:04:25.810
So I think we've covered Lambda Expressions
103

103

00:04:25.810  -->  00:04:28.610
in the last five videos including this one.
104

104

00:04:28.610  -->  00:04:30.870
Coming up next we'll see a couple of quiz questions
105

105

00:04:30.870  -->  00:04:32.590 line:15% 
to test some of the things you've learnt,
106

106

00:04:32.590  -->  00:04:34.790 line:15% 
and then we'll move onto the next section
107

107

00:04:34.790  -->  00:04:36.760 line:15% 
where we start getting into exceptions.
108

108

00:04:36.760  -->  00:04:38.060 line:15% 
See you in the next video.
