WEBVTT
1
1

00:00:05.246  -->  00:00:06.780
<v ->All right, so let's start this video with an</v>
2

2

00:00:06.780  -->  00:00:08.390
example demonstrating a single
3

3

00:00:08.390  -->  00:00:10.690
parameter lambda expression.
4

4

00:00:10.690  -->  00:00:11.640
So, we're still going to be in our
5

5

00:00:11.640  -->  00:00:12.810
Lambda Expressions project.
6

6

00:00:12.810  -->  00:00:14.948
We need to create a new task called Calculator.
7

7

00:00:14.948  -->  00:00:17.031
(typing)
8

8

00:00:23.138  -->  00:00:24.510
All right, so this code as you can see
9

9

00:00:24.510  -->  00:00:27.690
consists of a single class called Calculator.
10

10

00:00:27.690  -->  00:00:31.240
So, it's got an interface UnaryIntegerOperation
11

11

00:00:31.240  -->  00:00:33.310
with a single abstract method on it.
12

12

00:00:33.310  -->  00:00:35.040
Now, this type of interface is called a
13

13

00:00:35.040  -->  00:00:36.410
functional interface, it facilitates
14

14

00:00:36.410  -->  00:00:39.140
the use of lambda expressions.
15

15

00:00:39.140  -->  00:00:41.270
And you can see there from the comments
16

16

00:00:41.270  -->  00:00:43.517
on line 12 our function interface
17

17

00:00:43.517  -->  00:00:44.350
is an interface with one
18

18

00:00:44.350  -->  00:00:45.923
and only one abstract method.
19

19

00:00:46.880  -->  00:00:48.690
So then you go further down we've got this
20

20

00:00:48.690  -->  00:00:51.550
calculate method, defined on line 21,
21

21

00:00:51.550  -->  00:00:53.310
that accepts an int value and an object
22

22

00:00:53.310  -->  00:00:55.690
that implements the UnaryIntegerOperation
23

23

00:00:55.690  -->  00:00:57.650
interface we've defined above.
24

24

00:00:57.650  -->  00:00:59.270
And then we've got our main method.
25

25

00:00:59.270  -->  00:01:01.020
We're creating three lambda expressions
26

26

00:01:01.020  -->  00:01:04.610
and sorting them to UnaryIntegerOperation variables.
27

27

00:01:04.610  -->  00:01:06.450
And you see we're creating a new instance of Calculator
28

28

00:01:06.450  -->  00:01:09.236
on line 27, and there's our three samples of creating
29

29

00:01:09.236  -->  00:01:12.083
those variables, those lambda expressions.
30

30

00:01:12.083  -->  00:01:14.710
And you can see the first one on line 34
31

31

00:01:14.710  -->  00:01:17.010
that's demonstrating a single typed parameter
32

32

00:01:17.010  -->  00:01:19.640
in parenthesis, note here that if you specify
33

33

00:01:19.640  -->  00:01:22.320
type you must use parenthesis.
34

34

00:01:22.320  -->  00:01:23.990
So this operation will result in the value
35

35

00:01:23.990  -->  00:01:26.450
being squared as you can see in the expression.
36

36

00:01:26.450  -->  00:01:28.870
Then we've got the lambda expression on line 39
37

37

00:01:28.870  -->  00:01:31.320
demonstrating a single un-typed parameter
38

38

00:01:31.320  -->  00:01:33.460
in parenthesis, and this operation will
39

39

00:01:33.460  -->  00:01:35.010
result in the value being cubed as you
40

40

00:01:35.010  -->  00:01:36.300
can see with the expression.
41

41

00:01:36.300  -->  00:01:39.030
Then on line 44, that lambda expression
42

42

00:01:39.030  -->  00:01:41.610
demonstrates a single un-typed parameter without
43

43

00:01:41.610  -->  00:01:44.000
using parenthesis, and that operation will result
44

44

00:01:44.000  -->  00:01:46.003
in the value being incremented by one.
45

45

00:01:47.957  -->  00:01:50.150
And then we're executing that code,
46

46

00:01:50.150  -->  00:01:53.218
those lambda expressions, from line 47 onwards,
47

47

00:01:53.218  -->  00:01:56.490
basically executing each of the three Calculate methods.
48

48

00:01:56.490  -->  00:01:58.140
All right, so if we run this now,
49

49

00:02:00.105  -->  00:02:01.700
you can see that we've got the output
50

50

00:02:01.700  -->  00:02:04.610
at the bottom of the screen, squared, cubed and incremented.
51

51

00:02:04.610  -->  00:02:07.440
So that's pretty neat, but how did it work?
52

52

00:02:07.440  -->  00:02:09.843
Well we go back and look at our lambda expressions.
53

53

00:02:11.210  -->  00:02:12.560
Basically the compiler took the
54

54

00:02:12.560  -->  00:02:14.840
right hand side of the lambda expression
55

55

00:02:14.840  -->  00:02:16.740
and built a concrete method designed
56

56

00:02:16.740  -->  00:02:19.230
using the interface method Calculate
57

57

00:02:19.230  -->  00:02:21.860
and then take in parenthesis, then populate
58

58

00:02:21.860  -->  00:02:24.970
it with code to right of the arrow token.
59

59

00:02:24.970  -->  00:02:27.180
The name of the method is actually unnecessary
60

60

00:02:27.180  -->  00:02:29.390
to the compiler, but you should note that it is the
61

61

00:02:29.390  -->  00:02:31.877
interface's method that is the template
62

62

00:02:31.877  -->  00:02:34.870
for the on-the-fly method creation and execution.
63

63

00:02:34.870  -->  00:02:36.040
We should also note that the
64

64

00:02:36.040  -->  00:02:37.840
interface's method returns an int.
65

65

00:02:37.840  -->  00:02:39.170
We'll just go back and look at our interface
66

66

00:02:39.170  -->  00:02:40.070
while we're talking about it.
67

67

00:02:40.070  -->  00:02:42.520
You can see it's returning an int there
68

68

00:02:42.520  -->  00:02:45.703
but we didn't specify a return in our lambda expressions.
69

69

00:02:47.340  -->  00:02:49.770
It's actually unnecessary and in fact invalid
70

70

00:02:49.770  -->  00:02:52.220
to use the word return in a single statement expression
71

71

00:02:52.220  -->  00:02:55.200
as I talked about in the previous video and slides.
72

72

00:02:55.200  -->  00:02:56.640
The compiler will do the extra work
73

73

00:02:56.640  -->  00:02:58.640
to properly return a value if
74

74

00:02:58.640  -->  00:03:00.730
the defined method requires it.
75

75

00:03:00.730  -->  00:03:03.900
All right, so there's one more lambda expression.
76

76

00:03:03.900  -->  00:03:05.480
So I'm going to paste that in below
77

77

00:03:05.480  -->  00:03:07.420
the definition of the third one.
78

78

00:03:07.420  -->  00:03:08.370
Paste it down here.
79

79

00:03:10.410  -->  00:03:12.010
All right, so there's the code.
80

80

00:03:12.010  -->  00:03:14.180
Now, in this expression, we're using curly
81

81

00:03:14.180  -->  00:03:16.420
braces to wrap the expression body.
82

82

00:03:16.420  -->  00:03:18.510
So there's two things specifically to note here.
83

83

00:03:18.510  -->  00:03:20.730
First, here we're using a return statement.
84

84

00:03:20.730  -->  00:03:22.580
And secondly, statements in the left and right
85

85

00:03:22.580  -->  00:03:26.020
curly braces but the block requires semicolons.
86

86

00:03:26.020  -->  00:03:27.800
The single statement expressions
87

87

00:03:27.800  -->  00:03:30.130
as you can see above did not actually require them.
88

88

00:03:30.130  -->  00:03:32.480
But actually in talking about those first three
89

89

00:03:32.480  -->  00:03:34.690
lambda expressions, the declaration itself
90

90

00:03:34.690  -->  00:03:36.600
required the semicolon at the end of the line
91

91

00:03:36.600  -->  00:03:38.323
but not actually the statements themselves.
92

92

00:03:38.323  -->  00:03:41.720
And again, this example on line 50 is demonstrating
93

93

00:03:41.720  -->  00:03:43.167
a single un-typed parameter,
94

94

00:03:43.167  -->  00:03:45.550
and that body is wrapped in the right curly braces.
95

95

00:03:45.550  -->  00:03:46.820
I've got brackets in the comments but
96

96

00:03:46.820  -->  00:03:49.240
some people refer to curly braces as brackets
97

97

00:03:49.240  -->  00:03:51.760
but I like to use curly braces as the terminology there.
98

98

00:03:51.760  -->  00:03:53.400
Again, the point is we're using a return statement
99

99

00:03:53.400  -->  00:03:55.150
and that's how to go about it.
100

100

00:03:55.150  -->  00:03:57.030
So, let's actually see that working.
101

101

00:03:57.030  -->  00:03:59.560
So I'm going to add some output in our execution down here.
102

102

00:03:59.560  -->  00:04:02.113
So let's execute that fourth lambda expression.
103

103

00:04:03.160  -->  00:04:04.010
And let's run it.
104

104

00:04:07.413  -->  00:04:08.270
And you see we got the output
105

105

00:04:08.270  -->  00:04:10.390
the number two decremented equals one.
106

106

00:04:10.390  -->  00:04:13.480
Now just to confirm that return is required,
107

107

00:04:13.480  -->  00:04:14.720
let's go back up there
108

108

00:04:14.720  -->  00:04:16.910
and let's remove the word return.
109

109

00:04:16.910  -->  00:04:18.529
And one thing I want to point out there is
110

110

00:04:18.529  -->  00:04:20.040
that you can see the intelligized helpfully
111

111

00:04:20.040  -->  00:04:21.710
telling you that statement lambda can
112

112

00:04:21.710  -->  00:04:23.600
be replaced with the expression lambda.
113

113

00:04:23.600  -->  00:04:26.240
So if I actually did that you can see it's
114

114

00:04:26.240  -->  00:04:28.050
turned it into one line
115

115

00:04:28.050  -->  00:04:30.200
but we don't want to do that because we're demonstrating
116

116

00:04:30.200  -->  00:04:32.990
the use of using and ability to have modelling statement.
117

117

00:04:32.990  -->  00:04:34.320
It's basically a single, at the moment
118

118

00:04:34.320  -->  00:04:37.470
a single un-typed parameter that is in parenthesis.
119

119

00:04:37.470  -->  00:04:40.063
But again, if we try to remove the word return there,
120

120

00:04:41.850  -->  00:04:43.780
there's something called an error indicating
121

121

00:04:43.780  -->  00:04:45.580
that a minus one is not a statement.
122

122

00:04:47.550  -->  00:04:49.270
When you use the left and right curly braces
123

123

00:04:49.270  -->  00:04:51.665
you're required to use the return statement
124

124

00:04:51.665  -->  00:04:55.384
if your functional interface method returns a value.
125

125

00:04:55.384  -->  00:04:57.410
And you can see that our interface on line 15
126

126

00:04:57.410  -->  00:05:00.198
has defined this return an int.
127

127

00:05:00.198  -->  00:05:01.093
I'm just going to go down now,
128

128

00:05:01.093  -->  00:05:02.843
I'm just going to undo that change.
129

129

00:05:04.420  -->  00:05:06.170
All right, so let's finish the video here.
130

130

00:05:06.170  -->  00:05:07.360
In the next one we'll start looking at
131

131

00:05:07.360  -->  00:05:10.080
multiple parameters in multiple expressions.
132

132

00:05:10.080  -->  00:05:11.380
See you in the next video.
