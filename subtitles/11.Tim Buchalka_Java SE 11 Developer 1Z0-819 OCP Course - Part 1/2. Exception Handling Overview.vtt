WEBVTT
1
1

00:00:05.330  -->  00:00:07.160
<v Instructor>So let's start out by talking about</v>
2

2

00:00:07.160  -->  00:00:10.750
exception handling in general and the types of exceptions.
3

3

00:00:10.750  -->  00:00:12.790
An exception is an event that occurs
4

4

00:00:12.790  -->  00:00:14.960
during the execution of a programme,
5

5

00:00:14.960  -->  00:00:17.680
that disrupts the normal flow of instructions.
6

6

00:00:17.680  -->  00:00:20.170
It's usually caused by an abnormal condition
7

7

00:00:20.170  -->  00:00:22.450
or an unexpected use of a resource.
8

8

00:00:22.450  -->  00:00:25.840
The java.lang.Throwable class and all its subclasses are,
9

9

00:00:25.840  -->  00:00:28.233
collectively, the exception classes.
10

10

00:00:30.150  -->  00:00:32.240
So as you can see by this diagram on the screen here,
11

11

00:00:32.240  -->  00:00:36.473
Throwable has two subclasses, exception and error.
12

12

00:00:38.960  -->  00:00:40.930
The Error Class, Java's naming standard
13

13

00:00:40.930  -->  00:00:45.010
is to use the Error suffix for classes that extend Error.
14

14

00:00:45.010  -->  00:00:46.620
When a dynamic linking failure
15

15

00:00:46.620  -->  00:00:50.300
or other hard failure in the Java virtual machine occurs,
16

16

00:00:50.300  -->  00:00:52.680
the virtual machine throws an Error.
17

17

00:00:52.680  -->  00:00:55.230
The IOError is probably the best know Error
18

18

00:00:55.230  -->  00:00:57.600
in this hierarchy, but some others are
19

19

00:00:57.600  -->  00:00:59.473
the AnnotationFormatError, AssertionError,
20

20

00:01:00.632  -->  00:01:04.223
CoderMalfunctionError, FactoryConfigurationError,
21

21

00:01:06.100  -->  00:01:08.130
and a LinkageError, which includes the
22

22

00:01:08.130  -->  00:01:11.542
BootstrapMethodError, ClassCircularityError,
23

23

00:01:11.542  -->  00:01:15.272
ClassFormatError, ExceptionInitializerError,
24

24

00:01:15.272  -->  00:01:19.104
IncompatibleClassChangeError, NoClassDeffFoundError,
25

25

00:01:19.104  -->  00:01:22.600
UnsatsifiedLinkError, and VerifyError.
26

26

00:01:22.600  -->  00:01:24.923
Moving on there's also ServiceConfigurationError,
27

27

00:01:24.923  -->  00:01:28.620
ThreadDeath, TransformerFactoryConfigurationError,
28

28

00:01:28.620  -->  00:01:30.450
and VirtualMachineError which includes
29

29

00:01:30.450  -->  00:01:31.603
InternalError, OutOfMemoryError,
30

30

00:01:32.778  -->  00:01:35.393
StackOverflowError, and UnknownError.
31

31

00:01:37.511  -->  00:01:40.080
In the Exception Class, Java's naming standard
32

32

00:01:40.080  -->  00:01:42.710
is to use the Exception suffix for classes
33

33

00:01:42.710  -->  00:01:44.580
that extend Exception.
34

34

00:01:44.580  -->  00:01:47.140
Objects that derive from the Exception class are
35

35

00:01:47.140  -->  00:01:50.320
generally the predictable or known errors
36

36

00:01:50.320  -->  00:01:52.250
that indicate that a problem occurred,
37

37

00:01:52.250  -->  00:01:54.490
but it's not necessarily a serious problem,
38

38

00:01:54.490  -->  00:01:56.980
and your recovery options may exist.
39

39

00:01:56.980  -->  00:01:59.580
We'll be discussing the Exception classes at length.
40

40

00:02:01.310  -->  00:02:02.800
So now that we know what an exception is,
41

41

00:02:02.800  -->  00:02:05.400
we need to review what happens when one occurs.
42

42

00:02:05.400  -->  00:02:07.640
When an error happens, the method from which
43

43

00:02:07.640  -->  00:02:10.750
the error originated creates a special object,
44

44

00:02:10.750  -->  00:02:12.710
an exception object, and hands it off
45

45

00:02:12.710  -->  00:02:14.290
to the runtime system.
46

46

00:02:14.290  -->  00:02:16.260
The exception object contains information
47

47

00:02:16.260  -->  00:02:18.600
about the error, and the state of the programme
48

48

00:02:18.600  -->  00:02:20.500
when the error occurred.
49

49

00:02:20.500  -->  00:02:22.730
Creating an exception object and handing it
50

50

00:02:22.730  -->  00:02:25.890
to the runtime system is called throwing an exception.
51

51

00:02:25.890  -->  00:02:28.260
You can manually throw an exception by identifying
52

52

00:02:28.260  -->  00:02:30.340
a scenario you consider an error,
53

53

00:02:30.340  -->  00:02:32.890
but in many cases, it's the Java Virtual Machine
54

54

00:02:32.890  -->  00:02:34.933
throwing exceptions automatically.
55

55

00:02:36.990  -->  00:02:39.610
Throwing an exception is only half the story.
56

56

00:02:39.610  -->  00:02:41.230
The runtime system then attempts
57

57

00:02:41.230  -->  00:02:44.010
to find something to handle the exception.
58

58

00:02:44.010  -->  00:02:45.890
Handling the exception means there's code
59

59

00:02:45.890  -->  00:02:48.310
that identifies itself as responsible
60

60

00:02:48.310  -->  00:02:51.350
for responding to the error condition that occurred.
61

61

00:02:51.350  -->  00:02:53.277
And like life, there aren't always volunteers
62

62

00:02:53.277  -->  00:02:55.330
(laughs) or assignees, however.
63

63

00:02:55.330  -->  00:02:57.410
The runtime system trying to find a handler
64

64

00:02:57.410  -->  00:02:59.810
for an exception object could be likened
65

65

00:02:59.810  -->  00:03:02.120
to a frustrated sales customer
66

66

00:03:02.120  -->  00:03:04.810
working his or her way up through management
67

67

00:03:04.810  -->  00:03:07.390
as they query whether this particular manager
68

68

00:03:07.390  -->  00:03:09.130
can handle their complaint.
69

69

00:03:09.130  -->  00:03:12.000
The manager will refer the customer to the next manager
70

70

00:03:12.000  -->  00:03:14.750
above themselves or hopefully at some point
71

71

00:03:14.750  -->  00:03:16.640
handle the complaint themselves
72

72

00:03:16.640  -->  00:03:18.810
and let the customer progress to the next step
73

73

00:03:18.810  -->  00:03:20.533
of the sale or refund.
74

74

00:03:22.530  -->  00:03:25.630
A method can identify itself as a responsible party,
75

75

00:03:25.630  -->  00:03:28.020
able to handle the exception, by declaring
76

76

00:03:28.020  -->  00:03:30.400
a block of code called an exception handler.
77

77

00:03:30.400  -->  00:03:32.980
The runtime system searches the call stack
78

78

00:03:32.980  -->  00:03:35.400
for a method that contains such a block of code,
79

79

00:03:35.400  -->  00:03:37.120
starting with the current method,
80

80

00:03:37.120  -->  00:03:39.640
and searching the call stack in reverse order
81

81

00:03:39.640  -->  00:03:42.060
until it finds a method with a handler.
82

82

00:03:42.060  -->  00:03:44.910
Remember that a call stack is a listing of programme
83

83

00:03:44.910  -->  00:03:48.250
counter addresses (PCs) representing instructions,
84

84

00:03:48.250  -->  00:03:51.330
or method calls, from within the programme which identifies
85

85

00:03:51.330  -->  00:03:54.680
the path the application executed to get
86

86

00:03:54.680  -->  00:03:56.803
to the current instruction or statement.
87

87

00:03:59.100  -->  00:04:01.240
The runtime system looks for a handler
88

88

00:04:01.240  -->  00:04:04.480
that must catch the right type of exception that was thrown,
89

89

00:04:04.480  -->  00:04:06.440
or the runtime system will continue to look
90

90

00:04:06.440  -->  00:04:08.800
for a matching responsible party.
91

91

00:04:08.800  -->  00:04:10.260
And if no handler is ever found,
92

92

00:04:10.260  -->  00:04:13.423
the thread that creates the error or exception dies.
93

93

00:04:15.250  -->  00:04:17.220
And you can see in this diagram, an example
94

94

00:04:17.220  -->  00:04:19.313
of what's happening in that scenario.
95

95

00:04:22.390  -->  00:04:23.410
Right, so let's end the video here
96

96

00:04:23.410  -->  00:04:26.020
and in the next one, we'll swing over to our IDE
97

97

00:04:26.020  -->  00:04:27.610
and we'll start putting some code together.
98

98

00:04:27.610  -->  00:04:29.033
See you in the next video.
