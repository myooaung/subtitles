WEBVTT
1
1

00:00:05.571  -->  00:00:07.370
<v Tim>All right, so let's talk about the initialization</v>
2

2

00:00:07.370  -->  00:00:11.483
of primitive data type variables including default values.
3

3

00:00:12.380  -->  00:00:15.020
To use a primitive data type variable in code,
4

4

00:00:15.020  -->  00:00:16.540
it needs to be initialised,
5

5

00:00:16.540  -->  00:00:19.680
but this is not true for class static variables
6

6

00:00:19.680  -->  00:00:21.230
and instance variables
7

7

00:00:21.230  -->  00:00:23.580
which will have default values assigned to them.
8

8

00:00:23.580  -->  00:00:25.670
Now, this initialization or lack thereof
9

9

00:00:25.670  -->  00:00:28.790
is a common theme in the exam questions.
10

10

00:00:28.790  -->  00:00:31.060
So what I'm gonna do is create a new class Bar
11

11

00:00:31.060  -->  00:00:34.360
in our PrimitiveData project we created in the last video
12

12

00:00:34.360  -->  00:00:35.680
and paste in some code.
13

13

00:00:41.889  -->  00:00:43.240
Okay, and what we're attempting to do here
14

14

00:00:43.240  -->  00:00:45.592
is demonstrate the default values that are set
15

15

00:00:45.592  -->  00:00:49.283
for class static variables and instance variables.
16

16

00:00:50.210  -->  00:00:53.290
So the default values for a static variable
17

17

00:00:53.290  -->  00:00:54.940
should be zero for the seven types
18

18

00:00:54.940  -->  00:00:57.970
byte, char, short, int, long, float, and double
19

19

00:00:57.970  -->  00:01:00.570 line:15% 
and false for a boolean,
20

20

00:01:00.570  -->  00:01:02.902 line:15% 
and we've also got some numeric instance variables here,
21

21

00:01:02.902  -->  00:01:05.550 line:15% 
and they should also be set to a representation of zero
22

22

00:01:05.550  -->  00:01:08.570 line:15% 
and also false for a boolean instance variable as well
23

23

00:01:08.570  -->  00:01:10.700
which we defined on line 31,
24

24

00:01:10.700  -->  00:01:12.430
and we've just got some output
25

25

00:01:12.430  -->  00:01:14.040
checking to see whether that is the case,
26

26

00:01:14.040  -->  00:01:15.850
and clearly, there's no initialization
27

27

00:01:15.850  -->  00:01:17.400
that we've set in our code.
28

28

00:01:17.400  -->  00:01:18.940
Let's run this code and confirm
29

29

00:01:18.940  -->  00:01:21.293
that it actually does what we think it should do,
30

30

00:01:22.240  -->  00:01:23.880
and you can see that the output values
31

31

00:01:23.880  -->  00:01:24.740
that we're showing here,
32

32

00:01:24.740  -->  00:01:27.490
the class variables all set to default values
33

33

00:01:27.490  -->  00:01:30.640
and the same for our instance variables as well.
34

34

00:01:30.640  -->  00:01:33.570
So that does confirm that Java initialises
35

35

00:01:33.570  -->  00:01:36.510
these types of variables to default values.
36

36

00:01:36.510  -->  00:01:38.620
Now with that said, Java's not as forgiving
37

37

00:01:38.620  -->  00:01:41.220
when it comes to your local variables.
38

38

00:01:41.220  -->  00:01:43.180
The compiler demands that you initialise
39

39

00:01:43.180  -->  00:01:45.080
your local variables fully
40

40

00:01:45.080  -->  00:01:46.580
before you use them in code
41

41

00:01:46.580  -->  00:01:49.420
and, in fact, doesn't assign default values to them.
42

42

00:01:49.420  -->  00:01:50.380
So to demonstrate this,
43

43

00:01:50.380  -->  00:01:52.523
let's actually create a new class, Bar2,
44

44

00:01:55.890  -->  00:01:57.750
and this class is, I'm gonna paste in some code
45

45

00:01:57.750  -->  00:02:00.880
that's just got some local variables in the main method.
46

46

00:02:00.880  -->  00:02:02.143
Okay, paste the code in.
47

47

00:02:03.033  -->  00:02:04.530 line:15% 
And you can see at the moment,
48

48

00:02:04.530  -->  00:02:07.177 line:15% 
we've got local variables defined, but not initialised
49

49

00:02:07.177  -->  00:02:10.030
to a particular value and that's not being used at all.
50

50

00:02:10.030  -->  00:02:13.363
So if we run this code, everything works.
51

51

00:02:14.590  -->  00:02:17.130
Now if we actually hover over, we can see
52

52

00:02:17.130  -->  00:02:19.270
that IntelliJ is telling us that the variables
53

53

00:02:19.270  -->  00:02:20.800
aren't being used.
54

54

00:02:20.800  -->  00:02:21.840
But now let's try and use them.
55

55

00:02:21.840  -->  00:02:23.630
We'll print these variables out by adding
56

56

00:02:23.630  -->  00:02:25.560
the appropriate code to do so.
57

57

00:02:25.560  -->  00:02:27.910
So I'm going to add that after the definitions.
58

58

00:02:29.870  -->  00:02:32.750 line:15% 
Pasting that code and suddenly we've got errors there,
59

59

00:02:32.750  -->  00:02:33.583 line:15% 
If I hover over it,
60

60

00:02:33.583  -->  00:02:35.250 line:15% 
you can see that it's telling us
61

61

00:02:35.250  -->  00:02:38.410 line:15% 
that the variable may not have been initialised.
62

62

00:02:38.410  -->  00:02:40.907 line:15% 
So to overcome this, let's actually initialise
63

63

00:02:40.907  -->  00:02:43.570 line:15% 
these variables to some default values
64

64

00:02:43.570  -->  00:02:45.270 line:15% 
that we'll assign ourselves.
65

65

00:02:45.270  -->  00:02:47.500
So I'm going to again copy some code and paste it
66

66

00:02:47.500  -->  00:02:49.323
before the output.
67

67

00:02:50.880  -->  00:02:52.220
And you can see that I've defined a value
68

68

00:02:52.220  -->  00:02:54.721
to each of our variables the errors then disappeared,
69

69

00:02:54.721  -->  00:02:58.850
and we can run the code, and we get our output appearing
70

70

00:02:58.850  -->  00:03:00.350
on the screen, as you can see.
71

71

00:03:01.430  -->  00:03:03.020
So we've learned here that it's okay
72

72

00:03:03.020  -->  00:03:05.970
to have an uninitialized local variable
73

73

00:03:05.970  -->  00:03:07.490
as long as you never use it.
74

74

00:03:07.490  -->  00:03:10.010
And a good IDE will prompt you to get rid of this variable
75

75

00:03:10.010  -->  00:03:13.800
or mention or show you that it was unused as IntelliJ did.
76

76

00:03:13.800  -->  00:03:16.690
But you will get a compile error if the local variable
77

77

00:03:16.690  -->  00:03:19.710
is not initialised and then referenced as we've just seen.
78

78

00:03:19.710  -->  00:03:21.190
And we got that error when we started trying
79

79

00:03:21.190  -->  00:03:22.423
to print out the values.
80

80

00:03:23.440  -->  00:03:26.610
Right so next, we need to talk about partial initialization
81

81

00:03:26.610  -->  00:03:27.563
of variables.
82

82

00:03:29.020  -->  00:03:31.490
Now partial initialization of a local variable is
83

83

00:03:31.490  -->  00:03:32.800
a compile error.
84

84

00:03:32.800  -->  00:03:35.290
Now some examples of partial initialization,
85

85

00:03:35.290  -->  00:03:38.280
which we'll go through in code are initialization
86

86

00:03:38.280  -->  00:03:41.560
in an if statement block without a corresponding else block.
87

87

00:03:41.560  -->  00:03:43.520
Also initialization in a switch statement
88

88

00:03:43.520  -->  00:03:45.420
but not in a default statement.
89

89

00:03:45.420  -->  00:03:48.030
And initialization in a while loop, but note that
90

90

00:03:48.030  -->  00:03:51.483
a do/while loop is always executed once, so that's okay.
91

91

00:03:52.650  -->  00:03:55.050
So to demonstrate some of this let's create a new class
92

92

00:03:55.050  -->  00:03:57.367
in our account project, we'll call it FooBar.
93

93

00:03:58.270  -->  00:04:00.220
And as always, I'll paste in some code.
94

94

00:04:06.310  -->  00:04:09.862
All right, so I can see here that the local variable
95

95

00:04:09.862  -->  00:04:14.010
is initialised in an if/else conditional block.
96

96

00:04:14.010  -->  00:04:15.390
And I've got a comment on there line 15,
97

97

00:04:15.390  -->  00:04:17.570
which actually says the if/else statement satisfies
98

98

00:04:17.570  -->  00:04:21.350
the compiler's full initialization check, so if you run
99

99

00:04:21.350  -->  00:04:26.280
this code, we see that it works without any problems,
100

100

00:04:26.280  -->  00:04:28.130
and we've got the value of 1.
101

101

00:04:28.130  -->  00:04:30.870
But let's see what happens if we change some of this.
102

102

00:04:30.870  -->  00:04:33.120
So we'll change the if/else statement to just being
103

103

00:04:33.120  -->  00:04:34.260
if statement.
104

104

00:04:34.260  -->  00:04:37.113
So I'm just going to comment out the else component.
105

105

00:04:39.890  -->  00:04:42.210 line:15% 
And suddenly, we've got variable p
106

106

00:04:42.210  -->  00:04:43.710 line:15% 
may not have been initialised.
107

107

00:04:44.570  -->  00:04:48.440 line:15% 
On the code, we've now got an error variable p
108

108

00:04:48.440  -->  00:04:50.570 line:15% 
may not have been initialised.
109

109

00:04:50.570  -->  00:04:53.220
And if we revert the code back to what it was before,
110

110

00:04:56.130  -->  00:04:58.400
and we're back to how we were previously.
111

111

00:04:58.400  -->  00:05:00.840
Right, so let's go ahead now and add a new if statement
112

112

00:05:00.840  -->  00:05:03.410
as follows, and we're just going to copy and paste this
113

113

00:05:03.410  -->  00:05:04.243
as always.
114

114

00:05:07.410  -->  00:05:09.450
All right, so we've got the code there;
115

115

00:05:09.450  -->  00:05:12.970
q is an uninitialized local variable here on line 24.
116

116

00:05:12.970  -->  00:05:15.030
And we're using a different type of if statement
117

117

00:05:15.030  -->  00:05:16.680
or a different expression.
118

118

00:05:16.680  -->  00:05:19.650
This time it's a static boolean value, true in this case.
119

119

00:05:19.650  -->  00:05:23.520
And that satisfies the compiler's full initialization check
120

120

00:05:23.520  -->  00:05:25.560
because it's a static value.
121

121

00:05:25.560  -->  00:05:30.560
So if we run this, that's correct, and q is set
122

122

00:05:30.880  -->  00:05:31.780
to the value of 1.
123

123

00:05:32.660  -->  00:05:35.210
So again the reason for that is the condition
124

124

00:05:35.210  -->  00:05:37.690
of the if statement, the expression, is fully known
125

125

00:05:37.690  -->  00:05:40.250
at compile time, and therefore this is allowed,
126

126

00:05:40.250  -->  00:05:42.070
and we don't get an error.
127

127

00:05:42.070  -->  00:05:45.000
Right, so continuing on, what happens in a switch block?
128

128

00:05:45.000  -->  00:05:46.740
Let's have a look at a switch block.
129

129

00:05:46.740  -->  00:05:48.020
What we're going to do is add a switch block
130

130

00:05:48.020  -->  00:05:51.090
and test the local variable initialization there.
131

131

00:05:51.090  -->  00:05:54.073
So I'm going to add this code below the other code.
132

132

00:05:55.396  -->  00:05:57.123 line:15% 
All right, so there's our switch statement.
133

133

00:05:58.690  -->  00:06:00.060 line:15% 
Now this code is fine and works.
134

134

00:06:00.060  -->  00:06:01.970 line:15% 
You can see that some of the cases are setting
135

135

00:06:01.970  -->  00:06:05.240 line:15% 
the value of r, which is our uninitialized local variable,
136

136

00:06:05.240  -->  00:06:08.680 line:15% 
but it's also go the default value of r equals 3,
137

137

00:06:08.680  -->  00:06:10.960 line:15% 
and because it's a switch statement with a default block,
138

138

00:06:10.960  -->  00:06:14.350
that satisfies the compiler's full initialization check.
139

139

00:06:14.350  -->  00:06:15.440
We don't get any errors.
140

140

00:06:15.440  -->  00:06:18.000
We should be able to run it, and get a valid value
141

141

00:06:18.000  -->  00:06:20.863
for the variable r set to the value of 2.
142

142

00:06:21.870  -->  00:06:24.260
Now if we remove or comment out the default block,
143

143

00:06:24.260  -->  00:06:25.350
we'll get a different result.
144

144

00:06:25.350  -->  00:06:26.290
So let's go ahead and do that.
145

145

00:06:26.290  -->  00:06:28.343 line:15% 
We'll comment out the default block.
146

146

00:06:29.880  -->  00:06:32.040 line:15% 
Suddenly we've got an error: variable r
147

147

00:06:32.040  -->  00:06:33.930 line:15% 
may not have been initialised.
148

148

00:06:33.930  -->  00:06:36.890 line:15% 
So without a default block, all the possible pathways
149

149

00:06:36.890  -->  00:06:38.800 line:15% 
through the switch statement can't be resolved
150

150

00:06:38.800  -->  00:06:41.870 line:15% 
for the compiler, and it then assumes that the variable
151

151

00:06:41.870  -->  00:06:43.430 line:15% 
may not be initialised and we get an error.
152

152

00:06:43.430  -->  00:06:46.900 line:15% 
In fact, we can't run that because it's an error.
153

153

00:06:46.900  -->  00:06:48.960 line:15% 
And again, variable r may not have been initialised
154

154

00:06:48.960  -->  00:06:51.290 line:15% 
because the lack of the default block
155

155

00:06:51.290  -->  00:06:52.880
because we've commented that out.
156

156

00:06:52.880  -->  00:06:55.883
We'll undo those changes, run it again,
157

157

00:06:56.840  -->  00:06:58.893
and the code now compiles and runs.
158

158

00:07:00.713  -->  00:07:03.320
Right, so let's now look at a do while loop.
159

159

00:07:03.320  -->  00:07:05.820
I'm going to put in some code for a do while loop.
160

160

00:07:08.290  -->  00:07:09.640
Now a do while loop satisfies
161

161

00:07:09.640  -->  00:07:12.130
the compiler's full initialization check.
162

162

00:07:12.130  -->  00:07:15.087
You can see that s is an uninitialized local variable.
163

163

00:07:15.087  -->  00:07:20.087
And if we run this, that works fine: s is assigned
164

164

00:07:20.320  -->  00:07:21.950
the value of 0.
165

165

00:07:21.950  -->  00:07:24.700
So if you initialise in a do while loop, as we've done here,
166

166

00:07:24.700  -->  00:07:25.973
you won't ever get a compiler error
167

167

00:07:25.973  -->  00:07:29.020
about your local variable being uninitialized,
168

168

00:07:29.020  -->  00:07:31.540
and that's because the do while loop by its very nature
169

169

00:07:31.540  -->  00:07:34.310
always executes at least once.
170

170

00:07:34.310  -->  00:07:36.350
Right, so finishing up, let's try a while loop
171

171

00:07:36.350  -->  00:07:38.190
in comparison to our do while.
172

172

00:07:38.190  -->  00:07:40.540
So I'm going to copy this code and paste it in.
173

173

00:07:46.030  -->  00:07:47.570
So the while statement satisfies
174

174

00:07:47.570  -->  00:07:50.700
the compiler's full initialization check only if
175

175

00:07:50.700  -->  00:07:52.980
the condition is statically known.
176

176

00:07:52.980  -->  00:07:56.150
And you can see on line 63, our expression is value of true.
177

177

00:07:56.150  -->  00:08:00.120
So therefore if we run that, that works fine
178

178

00:08:00.120  -->  00:08:02.560
because we've got an expression true,
179

179

00:08:02.560  -->  00:08:05.140
which is statically known at compile time,
180

180

00:08:05.140  -->  00:08:07.810
but if we change that condition to something else,
181

181

00:08:07.810  -->  00:08:09.230
we'll actually get the same errors.
182

182

00:08:09.230  -->  00:08:12.470
So if we change that to v less than 1, our expression
183

183

00:08:12.470  -->  00:08:16.560 line:15% 
for our while loop suddenly, we get u variable u
184

184

00:08:16.560  -->  00:08:18.520 line:15% 
may not have been initialised.
185

185

00:08:18.520  -->  00:08:21.650 line:15% 
So you could have the same problems with the four loops.
186

186

00:08:21.650  -->  00:08:24.140 line:15% 
So look for similar conditions in exam questions
187

187

00:08:24.140  -->  00:08:28.167 line:15% 
where variable is declared but not initialised.
188

188

00:08:28.167  -->  00:08:30.930 line:15% 
Now a primitive data type can be initialised
189

189

00:08:30.930  -->  00:08:34.010
and/or assigned a literal value, which we discussed somewhat
190

190

00:08:34.010  -->  00:08:35.370
in the previous video.
191

191

00:08:35.370  -->  00:08:37.540
However, it can also be assigned to other variables
192

192

00:08:37.540  -->  00:08:38.923
as described in this slide.
193

193

00:08:39.790  -->  00:08:42.410
So you can see that at the top of initialization
194

194

00:08:42.410  -->  00:08:44.150
we've got some values there.
195

195

00:08:44.150  -->  00:08:46.130
To a Literal as described in the previous section,
196

196

00:08:46.130  -->  00:08:48.130
which we talked about in the previous video,
197

197

00:08:48.130  -->  00:08:49.707
to a variable of the same data type,
198

198

00:08:49.707  -->  00:08:53.630
we've got an example there of int i2 equals i1.
199

199

00:08:53.630  -->  00:08:56.190
We can also initialise it to a variable
200

200

00:08:56.190  -->  00:08:57.637
of a smaller data type.
201

201

00:08:57.637  -->  00:08:59.920
So in the example there: short s1 equals 10
202

202

00:08:59.920  -->  00:09:02.920
int i2 equals s1, we're assigning
203

203

00:09:02.920  -->  00:09:05.900
this smaller primitive data type short to an int,
204

204

00:09:05.900  -->  00:09:07.740
which is completely valid.
205

205

00:09:07.740  -->  00:09:09.429
We can also use wrapper classes,
206

206

00:09:09.429  -->  00:09:12.640
which will automatically do casting auto unboxing
207

207

00:09:12.640  -->  00:09:14.610
as long as the wrapper's data type size
208

208

00:09:14.610  -->  00:09:16.401
is less than or the same as
209

209

00:09:16.401  -->  00:09:18.680
your variable's declared data type size.
210

210

00:09:18.680  -->  00:09:22.070
And you can see the example there on the screen.
211

211

00:09:22.070  -->  00:09:24.230
Another type of initialization or assignment
212

212

00:09:24.230  -->  00:09:26.840
to a casted variable or literal.
213

213

00:09:26.840  -->  00:09:28.720
So you can see that we're casting
214

214

00:09:28.720  -->  00:09:31.710
the long value 100L to an int.
215

215

00:09:31.710  -->  00:09:34.520
So by casting that to an int, that's completely valid.
216

216

00:09:34.520  -->  00:09:36.980 line:15% 
To an instance variable of an object or class
217

217

00:09:36.980  -->  00:09:39.090 line:15% 
as long as the above rules apply
218

218

00:09:39.090  -->  00:09:40.790 line:15% 
and the access modifier allows it.
219

219

00:09:40.790  -->  00:09:43.120 line:15% 
So more on this later in the course.
220

220

00:09:43.120  -->  00:09:44.240 line:15% 
And you see I've got an example there:
221

221

00:09:44.240  -->  00:09:48.610 line:15% 
Foo foo equals new Foo int i1 equals foo dot my integer.
222

222

00:09:48.610  -->  00:09:51.900 line:15% 
And then also finally, to a Return value of a Method
223

223

00:09:51.900  -->  00:09:54.300 line:15% 
in scope, as long as the above rules apply.
224

224

00:09:54.300  -->  00:09:56.030 line:15% 
But again, more on that later.
225

225

00:09:56.030  -->  00:09:57.370 line:15% 
And you can see an example there:
226

226

00:09:57.370  -->  00:09:59.363 line:15% 
int i1 equals foo dot get Method.
227

227

00:10:00.720  -->  00:10:03.300
The main thing the main take-away I want you to take away
228

228

00:10:03.300  -->  00:10:04.940
from this lecture is this:
229

229

00:10:04.940  -->  00:10:09.000
a local variable is not initialised with a default value.
230

230

00:10:09.000  -->  00:10:11.110
You must initialise fully, not
231

231

00:10:11.110  -->  00:10:13.010
in a conditional statement, switch statement,
232

232

00:10:13.010  -->  00:10:15.550
while loop if all conditions are not met,
233

233

00:10:15.550  -->  00:10:17.930
if you are using the variable in code.
234

234

00:10:17.930  -->  00:10:20.270
If you never use the variable, as we saw,
235

235

00:10:20.270  -->  00:10:22.700
you won't actually get a compiler error.
236

236

00:10:22.700  -->  00:10:24.040
Right, so let's finish the video here,
237

237

00:10:24.040  -->  00:10:25.660
and in the next one, we're going to start exploring
238

238

00:10:25.660  -->  00:10:27.630
data type mismatches.
239

239

00:10:27.630  -->  00:10:28.930
See you in the next video.
