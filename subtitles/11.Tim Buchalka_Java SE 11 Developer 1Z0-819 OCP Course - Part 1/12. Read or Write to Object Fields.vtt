WEBVTT
1
1

00:00:05.360  -->  00:00:07.000
In previous videos in this course,
2

2

00:00:07.000  -->  00:00:09.120
I've discussed the class structure,
3

3

00:00:09.120  -->  00:00:11.960
with the exception of fields, methods, and constructors.
4

4

00:00:11.960  -->  00:00:13.510
In this video, I will talk more about
5

5

00:00:13.510  -->  00:00:15.130
fields declared in a class
6

6

00:00:15.130  -->  00:00:18.330
and accessing them when instances of the class are created.
7

7

00:00:18.330  -->  00:00:20.420
I have talked about static and non-static fields
8

8

00:00:20.420  -->  00:00:21.710
in previous videos
9

9

00:00:21.710  -->  00:00:24.120
and we've learnt that they are assigned default values,
10

10

00:00:24.120  -->  00:00:26.563
whereas local variables aren't.
11

11

00:00:28.900  -->  00:00:30.220
All right, so you can create the following
12

12

00:00:30.220  -->  00:00:33.110
types of fields in a class in Java:
13

13

00:00:33.110  -->  00:00:35.630
Static fields, also known as class variables.
14

14

00:00:35.630  -->  00:00:38.090
Only one bucket or area for a static field
15

15

00:00:38.090  -->  00:00:39.400
will ever exist
16

16

00:00:39.400  -->  00:00:40.990
and this place holder will be associated
17

17

00:00:40.990  -->  00:00:44.400
with the class and not the objects of that type.
18

18

00:00:44.400  -->  00:00:46.420
This contrasts to non-static fields,
19

19

00:00:46.420  -->  00:00:48.280
also known as instance variables,
20

20

00:00:48.280  -->  00:00:49.880
where every instantiated object
21

21

00:00:49.880  -->  00:00:51.670
has it's own place holder or area
22

22

00:00:51.670  -->  00:00:52.553
for that data.
23

23

00:00:54.610  -->  00:00:55.810
Final fields.
24

24

00:00:55.810  -->  00:00:57.500
Both class and instance variables,
25

25

00:00:57.500  -->  00:00:59.240
static and non-static fields, in other words,
26

26

00:00:59.240  -->  00:01:01.010
can be declared final.
27

27

00:01:01.010  -->  00:01:02.560
The final field can be declared
28

28

00:01:02.560  -->  00:01:03.770
with no assigned value.
29

29

00:01:03.770  -->  00:01:04.603
Blank, in other words.
30

30

00:01:04.603  -->  00:01:08.310
But, only only is an associated initializer sets it.
31

31

00:01:08.310  -->  00:01:10.751
A blank class variable requires a static initializer
32

32

00:01:10.751  -->  00:01:14.060
of the class, to set the variable in which it's declared.
33

33

00:01:14.060  -->  00:01:16.010
Otherwise, a compile time error occurs.
34

34

00:01:17.760  -->  00:01:19.463
Now, a blank final instance variable
35

35

00:01:19.463  -->  00:01:22.700
must have a value at the end of every constructor
36

36

00:01:22.700  -->  00:01:24.250
of the class in which it's declared,
37

37

00:01:24.250  -->  00:01:26.640
otherwise a compile-time error occurs.
38

38

00:01:26.640  -->  00:01:27.570
Transient fields.
39

39

00:01:27.570  -->  00:01:28.403
Well, these are fields
40

40

00:01:28.403  -->  00:01:29.900
that won't get serialised or persisted,
41

41

00:01:29.900  -->  00:01:31.740
another type of field in Java.
42

42

00:01:31.740  -->  00:01:33.570
Then, we've got volatile fields.
43

43

00:01:33.570  -->  00:01:35.600
The Java Memory Model ensures, in this scenario,
44

44

00:01:35.600  -->  00:01:37.920
that all threads see a consistent value
45

45

00:01:37.920  -->  00:01:40.313
for variables declared volatile.
46

46

00:01:42.280  -->  00:01:43.790
And, as a recap, we learned previously
47

47

00:01:43.790  -->  00:01:45.760
that fields, class or instance fields,
48

48

00:01:45.760  -->  00:01:49.080
are initialised to the following default values:
49

49

00:01:49.080  -->  00:01:51.040
Boolean fields default to false.
50

50

00:01:51.040  -->  00:01:52.630
Primitive numeric fields default
51

51

00:01:52.630  -->  00:01:55.770
to a representation of zero appropriate for that type.
52

52

00:01:55.770  -->  00:01:57.923
And, any object reference defaults to null.
53

53

00:01:58.870  -->  00:02:01.430
Final fields are not initialised to default values
54

54

00:02:01.430  -->  00:02:04.710
and must be set in an initialization statement of some sort.
55

55

00:02:04.710  -->  00:02:07.833
Once set, final field values cannot be changed.
56

56

00:02:09.783  -->  00:02:11.670
All right, so before we move on to code examples
57

57

00:02:11.670  -->  00:02:12.770
in the next video,
58

58

00:02:12.770  -->  00:02:14.860
let's review the this keyword.
59

59

00:02:14.860  -->  00:02:16.420
So, this is a keyword in Java,
60

60

00:02:16.420  -->  00:02:18.550
which has the following meanings:
61

61

00:02:18.550  -->  00:02:20.230
this is a reference variable
62

62

00:02:20.230  -->  00:02:22.400
and you can assign it to other reference variables,
63

63

00:02:22.400  -->  00:02:24.296
but you cannot assign any other value to this,
64

64

00:02:24.296  -->  00:02:26.220
including null.
65

65

00:02:26.220  -->  00:02:29.010
this is a qualifier that can be used to access
66

66

00:02:29.010  -->  00:02:31.460
any instance variables on the current objects.
67

67

00:02:31.460  -->  00:02:33.160
And, it's considered best practise to use
68

68

00:02:33.160  -->  00:02:36.040
this. when accessing instance variables
69

69

00:02:36.040  -->  00:02:36.873
in Java.
70

70

00:02:38.990  -->  00:02:41.830
The this() is a call to the current object's
71

71

00:02:41.830  -->  00:02:43.530
no args constructor.
72

72

00:02:43.530  -->  00:02:45.280
And, if you have defined other constructors
73

73

00:02:45.280  -->  00:02:46.330
for that class,
74

74

00:02:46.330  -->  00:02:48.080
you can call the appropriate constructor
75

75

00:02:48.080  -->  00:02:49.460
using the this method name,
76

76

00:02:49.460  -->  00:02:50.740
not the constructor name,
77

77

00:02:50.740  -->  00:02:52.010
and the appropriate parameters
78

78

00:02:52.010  -->  00:02:54.060
that match with the constructor
79

79

00:02:54.060  -->  00:02:55.260
you were trying to call.
80

80

00:02:57.630  -->  00:02:59.230
All right, so let's have a look at some valid uses
81

81

00:02:59.230  -->  00:03:01.080
of the this keyword before even.
82

82

00:03:01.080  -->  00:03:02.990
Now, look at some invalid uses.
83

83

00:03:02.990  -->  00:03:06.300
Firstly, to access attributes in a non-static method
84

84

00:03:06.300  -->  00:03:07.690
on the current instance.
85

85

00:03:07.690  -->  00:03:10.340
I've got an example there returning this.name
86

86

00:03:10.340  -->  00:03:12.500
in what is traditionally a GetA method.
87

87

00:03:12.500  -->  00:03:13.960
So, that's one valid use.
88

88

00:03:13.960  -->  00:03:16.400
In a constructor, you can call another constructor
89

89

00:03:16.400  -->  00:03:18.810
and the example there is this().
90

90

00:03:18.810  -->  00:03:20.700
That would call the no-argument constructor
91

91

00:03:20.700  -->  00:03:21.930
in this case.
92

92

00:03:21.930  -->  00:03:24.270
And, going into more detail about that,
93

93

00:03:24.270  -->  00:03:27.610
in constructors, we've got a class Test defined here
94

94

00:03:27.610  -->  00:03:29.930
and you can see I'm calling this().
95

95

00:03:29.930  -->  00:03:31.810
And, that's valid here in this constructor,
96

96

00:03:31.810  -->  00:03:34.170
which is a constructor that takes one argument,
97

97

00:03:34.170  -->  00:03:35.970
but it's calling the constructor with no arguments.
98

98

00:03:35.970  -->  00:03:37.600
And it's valid because it's the first statement
99

99

00:03:37.600  -->  00:03:39.140
in a constructor.
100

100

00:03:39.140  -->  00:03:40.440
Further on down, you can see another use
101

101

00:03:40.440  -->  00:03:41.320
for this there.
102

102

00:03:41.320  -->  00:03:42.780
And, we're setting an instance variable,
103

103

00:03:42.780  -->  00:03:45.843
in this case name to the value of Jane.
104

104

00:03:48.220  -->  00:03:49.150
So, moving on down,
105

105

00:03:49.150  -->  00:03:50.130
in initializers,
106

106

00:03:50.130  -->  00:03:52.050
in a very similar example there,
107

107

00:03:52.050  -->  00:03:54.680
initializer code this.name = Jane,
108

108

00:03:54.680  -->  00:03:57.230
very similar or identical to what we just did previously.
109

109

00:03:57.230  -->  00:03:59.870
Now, you can also assign a variable to this,
110

110

00:03:59.870  -->  00:04:02.480
as in Object o = this.
111

111

00:04:02.480  -->  00:04:04.680
And, finally, you can return it from a parameter.
112

112

00:04:04.680  -->  00:04:07.090
So, we've got an example here in a method
113

113

00:04:07.090  -->  00:04:09.300
Object returnObject return this,
114

114

00:04:09.300  -->  00:04:11.713
and that would return this as an Object.
115

115

00:04:13.926  -->  00:04:14.840
All right, let's now look at some
116

116

00:04:14.840  -->  00:04:16.630
invalid uses of this.
117

117

00:04:16.630  -->  00:04:19.490
First, you cannot access instance attributes
118

118

00:04:19.490  -->  00:04:21.400
using this in static methods.
119

119

00:04:21.400  -->  00:04:23.610
The example there, the static void modifyName,
120

120

00:04:23.610  -->  00:04:25.890
so we've define a static method modifyName,
121

121

00:04:25.890  -->  00:04:29.350
this.name = this.name + abc, for example.
122

122

00:04:29.350  -->  00:04:30.920
That would fail because you can't access
123

123

00:04:30.920  -->  00:04:33.860
an instance attribute in a static method.
124

124

00:04:33.860  -->  00:04:36.630
Now, another invalid use of this is in a constructor,
125

125

00:04:36.630  -->  00:04:39.200
calling an additional constructor in the wrong place
126

126

00:04:39.200  -->  00:04:40.800
because it needs to be the first
127

127

00:04:40.800  -->  00:04:41.633
and only the first statement.
128

128

00:04:41.633  -->  00:04:44.140
And, in an example on the right-hand side there,
129

129

00:04:44.140  -->  00:04:45.910
this has been called as the second statement
130

130

00:04:45.910  -->  00:04:48.093
and we'll get a compile-time error.
131

131

00:04:50.208  -->  00:04:52.580
You also can't use this in static initalizers,
132

132

00:04:52.580  -->  00:04:54.760
as in this.name = Jane.
133

133

00:04:54.760  -->  00:04:56.330
Again, that's for static initializers,
134

134

00:04:56.330  -->  00:04:58.760
as opposed to regular initializers.
135

135

00:04:58.760  -->  00:05:00.650
And, finally you cannot set the value of this,
136

136

00:05:00.650  -->  00:05:03.250
as in this = null or this = myObject.
137

137

00:05:03.250  -->  00:05:04.400
Because, obviously, Java assigns
138

138

00:05:04.400  -->  00:05:06.280
the value of this automatically,
139

139

00:05:06.280  -->  00:05:08.590
when the class is instantiated.
140

140

00:05:08.590  -->  00:05:09.990
All right, so let's finish the video here
141

141

00:05:09.990  -->  00:05:10.823
and in the next one,
142

142

00:05:10.823  -->  00:05:11.970
we'll walk through some examples
143

143

00:05:11.970  -->  00:05:13.910
of what we've been talking about in code.
144

144

00:05:13.910  -->  00:05:15.263
See you in the next video.
