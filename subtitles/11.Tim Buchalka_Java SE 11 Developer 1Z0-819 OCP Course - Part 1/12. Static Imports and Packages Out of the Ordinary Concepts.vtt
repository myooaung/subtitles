WEBVTT
1
1

00:00:04.994  -->  00:00:06.320
<v Tim>All right, so now let's revisit</v>
2

2

00:00:06.320  -->  00:00:08.180
the import static statements
3

3

00:00:08.180  -->  00:00:10.640
and explore what happens when two of your classes
4

4

00:00:10.640  -->  00:00:13.010
have the same static variables.
5

5

00:00:13.010  -->  00:00:16.170
So we need to create a new class static import test one
6

6

00:00:16.170  -->  00:00:17.983
in the a.d package.
7

7

00:00:20.070  -->  00:00:22.903
So, a.d.StaticImportTest1.
8

8

00:00:24.362  -->  00:00:26.445
(typing)
9

9

00:00:27.840  -->  00:00:29.820
Okay, so there's the code.
10

10

00:00:29.820  -->  00:00:33.150
As you can see, this class has a static variable APP_NAME
11

11

00:00:33.150  -->  00:00:34.870
and a static method, log,
12

12

00:00:34.870  -->  00:00:37.320
as well as a public method, printUniqueStatement.
13

13

00:00:38.183  -->  00:00:39.016
All right, we're now gonna create
14

14

00:00:39.016  -->  00:00:41.850
a second class in a different package.
15

15

00:00:41.850  -->  00:00:43.490
Under the source folder,
16

16

00:00:43.490  -->  00:00:46.930
so that's gonna be a.e.StaticImportTest2.
17

17

00:00:49.180  -->  00:00:51.263
(typing)
18

18

00:00:53.672  -->  00:00:54.984
There's the code.
19

19

00:00:54.984  -->  00:00:56.740
That's basically the same as the previous class
20

20

00:00:56.740  -->  00:00:58.400
with minor text changes.
21

21

00:00:58.400  -->  00:01:01.150
It's got a static variable APP_NAME also,
22

22

00:01:01.150  -->  00:01:02.450
a static method log as well
23

23

00:01:02.450  -->  00:01:04.323
as a public method printUniqueStatement.
24

24

00:01:05.620  -->  00:01:07.200
All right, next we need to create a class
25

25

00:01:07.200  -->  00:01:10.050
that's gonna test the usage of these static variables.
26

26

00:01:10.050  -->  00:01:10.940
So let's go ahead and do that.
27

27

00:01:10.940  -->  00:01:12.853
I'm gonna put that in the a package.
28

28

00:01:14.960  -->  00:01:19.237
New Java class, and we'll call this one TestStatic.
29

29

00:01:21.790  -->  00:01:24.060
In package a is the code.
30

30

00:01:24.060  -->  00:01:26.023
This is the code to test both classes.
31

31

00:01:27.000  -->  00:01:28.430
Right, so looking at the code,
32

32

00:01:28.430  -->  00:01:30.130
you can see that the class imports
33

33

00:01:30.130  -->  00:01:33.080
the class a.d.StaticImportTest1
34

34

00:01:34.030  -->  00:01:38.630
and imports all the static methods on a.d.StaticImportTest1.
35

35

00:01:38.630  -->  00:01:42.580
It also imports the class on StaticImportTest2
36

36

00:01:42.580  -->  00:01:44.430
and moving on down the method itself,
37

37

00:01:46.140  -->  00:01:48.470
we're demonstrating using static members that were imported
38

38

00:01:48.470  -->  00:01:51.723
as well as static members on StaticImportTest2.
39

39

00:01:52.595  -->  00:01:54.764
Then on the line 19, we're using APP_NAME
40

40

00:01:54.764  -->  00:01:56.940
and it can be referenced without a class name
41

41

00:01:56.940  -->  00:01:58.520
because of the import static statement
42

42

00:01:58.520  -->  00:02:01.173
that we added which was the code on line 10.
43

43

00:02:02.620  -->  00:02:04.640
The log method can be referenced without a class name
44

44

00:02:04.640  -->  00:02:07.280
because of the import static statement which is as showed.
45

45

00:02:07.280  -->  00:02:09.200
And we instantiate StaticImportTest1
46

46

00:02:09.200  -->  00:02:10.810
and execute a method on it.
47

47

00:02:10.810  -->  00:02:13.740
APP_NAME in the line below is qualified this time
48

48

00:02:13.740  -->  00:02:16.710
by the class name StaticImportTest2
49

49

00:02:16.710  -->  00:02:19.350
and the log method's also qualified as you can see there
50

50

00:02:19.350  -->  00:02:21.360
and then we instantiate StaticImportTest2
51

51

00:02:21.360  -->  00:02:23.060
and execute a method on it.
52

52

00:02:23.060  -->  00:02:24.260
So we run all this code.
53

53

00:02:28.865  -->  00:02:31.650
We can see the app was working, as you all expect.
54

54

00:02:31.650  -->  00:02:33.410
All right, so I'm gonna close that one pane
55

55

00:02:33.410  -->  00:02:35.570
and now I'm gonna add an import statement
56

56

00:02:35.570  -->  00:02:37.470
after all the other import statements.
57

57

00:02:38.795  -->  00:02:39.700
And then here on line 14,
58

58

00:02:39.700  -->  00:02:44.700
I'm gonna type import_static_a.e.StaticImportTest2.*
59

59

00:02:48.220  -->  00:02:49.710
and suddenly we got an error
60

60

00:02:49.710  -->  00:02:51.220
where actually this is two errors here.
61

61

00:02:51.220  -->  00:02:53.000
If we have a look at the first one,
62

62

00:02:53.000  -->  00:02:54.930
we've got an ambiguous error there
63

63

00:02:54.930  -->  00:02:57.400
reference to APP_NAME being ambiguous.
64

64

00:02:57.400  -->  00:02:59.800
This is on the am qualified APP_NAME there.
65

65

00:02:59.800  -->  00:03:02.170
And likewise for the log statement,
66

66

00:03:02.170  -->  00:03:04.800
we've got a similar thing there, ambiguous method call
67

67

00:03:04.800  -->  00:03:07.440
both the log method on StaticImportTest1
68

68

00:03:07.440  -->  00:03:10.700
and the log method on StaticImportTest2 match.
69

69

00:03:10.700  -->  00:03:12.640
So both are ambiguously defined now
70

70

00:03:12.640  -->  00:03:14.730
since both the import static statements
71

71

00:03:15.630  -->  00:03:17.970
would put in variables of the same name.
72

72

00:03:17.970  -->  00:03:20.260
Now if I replace this last import statement
73

73

00:03:20.260  -->  00:03:23.150
which it's currently set to StaticImportTest2.*,
74

74

00:03:24.290  -->  00:03:27.623
replace that instead with APP_NAME instead of the star.
75

75

00:03:29.640  -->  00:03:32.530
The errors disappear as you can see there now.
76

76

00:03:32.530  -->  00:03:34.450
Basically the compile errors are resolved as such
77

77

00:03:34.450  -->  00:03:35.800
so we can execute the code.
78

78

00:03:38.842  -->  00:03:40.690
And we can see now from this output,
79

79

00:03:40.690  -->  00:03:42.860
that APP_NAME without a call off are resolved
80

80

00:03:42.860  -->  00:03:45.380
to the more specific static import that we just added.
81

81

00:03:45.380  -->  00:03:48.300
In other words, APP_NAME on StaticImportTest2
82

82

00:03:48.300  -->  00:03:49.370
was actually used instead to start 'em.
83

83

00:03:49.370  -->  00:03:51.580
I've had like a StaticImportTest2.
84

84

00:03:51.580  -->  00:03:54.567
We see confirmation of that APP_NAME = "Second".
85

85

00:03:57.020  -->  00:03:59.200
And obviously in terms of the logging statements,
86

86

00:03:59.200  -->  00:04:00.050
they haven't changed because we're obviously
87

87

00:04:00.050  -->  00:04:05.050
instantiating StaticImportTest1 there and StaticImportTest2.
88

88

00:04:05.390  -->  00:04:06.230
And obviously in the case
89

89

00:04:06.230  -->  00:04:08.025
of the second APP_NAME reference here,
90

90

00:04:08.025  -->  00:04:10.630
we're using a fully qualified reference to that as well,
91

91

00:04:10.630  -->  00:04:12.870
that's why that's showing in that particular scenario.
92

92

00:04:12.870  -->  00:04:15.100
But the real main one, the main one here
93

93

00:04:15.100  -->  00:04:17.190
is this first one on line 21,
94

94

00:04:17.190  -->  00:04:20.360
working now because we changed the import static statement.
95

95

00:04:20.360  -->  00:04:21.330
And just to confirm that,
96

96

00:04:21.330  -->  00:04:23.573
if I then delete this last statement here,
97

97

00:04:24.820  -->  00:04:28.333
delete the import static statement, run the code again.
98

98

00:04:30.750  -->  00:04:34.410
This time you can see output now is APP_NAME = "First",
99

99

00:04:34.410  -->  00:04:36.060
everything else as it was before.
100

100

00:04:37.077  -->  00:04:38.900
All right, so basically at this point,
101

101

00:04:38.900  -->  00:04:40.370
everything works as we would suspect.
102

102

00:04:40.370  -->  00:04:41.950
And what I'm gonna do is undo that change,
103

103

00:04:41.950  -->  00:04:43.863
and introduce that import back again.
104

104

00:04:45.390  -->  00:04:46.620
What I'm gonna do now is looking at the imports,
105

105

00:04:46.620  -->  00:04:49.420
I'm gonna actually delete this first one,
106

106

00:04:49.420  -->  00:04:52.510
this import for static test two here on line 12.
107

107

00:04:52.510  -->  00:04:53.610
I'm gonna remove that.
108

108

00:04:55.604  -->  00:04:58.750
And you can see by doing that, we've got errors again.
109

109

00:04:58.750  -->  00:05:00.130
Basically, we've got a compiler error now
110

110

00:05:00.130  -->  00:05:02.210
on the StaticImportTest2 references.
111

111

00:05:02.210  -->  00:05:04.760
Now this is a hard error to catch just by sight
112

112

00:05:04.760  -->  00:05:06.303
if you're on an exam question.
113

113

00:05:07.200  -->  00:05:08.280
And obviously looking at the error,
114

114

00:05:08.280  -->  00:05:09.730
we can't resolve simple StaticImportTest2
115

115

00:05:09.730  -->  00:05:12.590
but if we're looking at the imports there,
116

116

00:05:12.590  -->  00:05:15.350
note that we are importing the static member
117

117

00:05:15.350  -->  00:05:17.619
APP_NAME from StaticImportTest2,
118

118

00:05:17.619  -->  00:05:19.390
but this statement does not include
119

119

00:05:19.390  -->  00:05:20.901
importing the class itself,
120

120

00:05:20.901  -->  00:05:24.130
so remember to read the import statements really carefully
121

121

00:05:24.130  -->  00:05:26.270
on exam questions.
122

122

00:05:26.270  -->  00:05:28.160
Right, so let's undo that again.
123

123

00:05:28.160  -->  00:05:30.252
So we got code that now works again.
124

124

00:05:30.252  -->  00:05:33.100
(typing)
125

125

00:05:33.100  -->  00:05:33.933
Okay.
126

126

00:05:36.500  -->  00:05:38.540
So items to look for on the exam
127

127

00:05:38.540  -->  00:05:39.740
which should be low hanging fruit
128

128

00:05:39.740  -->  00:05:42.070
if you do come across them are as follows.
129

129

00:05:42.070  -->  00:05:44.420
Firstly, multiple package statements.
130

130

00:05:44.420  -->  00:05:46.910
A package statement that is not the first line of code
131

131

00:05:46.910  -->  00:05:49.410
excluding white space or comments.
132

132

00:05:49.410  -->  00:05:51.800
An import statement not in the correct order
133

133

00:05:51.800  -->  00:05:54.350
must be after a package statement if one exists
134

134

00:05:54.350  -->  00:05:56.050
and before any other code.
135

135

00:05:56.050  -->  00:05:57.410
Import static statement used
136

136

00:05:57.410  -->  00:05:59.093
in place of an import statement.
137

137

00:06:01.430  -->  00:06:03.560
An import statement using a higher level package
138

138

00:06:03.560  -->  00:06:06.590
with a wild card, as we saw a wild card doesn't include
139

139

00:06:06.590  -->  00:06:08.050
classes in other packages.
140

140

00:06:08.050  -->  00:06:09.860
An example, import a.*
141

141

00:06:09.860  -->  00:06:13.200
does not mean import a.b.* for example.
142

142

00:06:13.200  -->  00:06:15.380
A misplaced wildcard, for example,
143

143

00:06:15.380  -->  00:06:18.603
the star at the end of a class name or a partial class name.
144

144

00:06:19.461  -->  00:06:20.690
All right, so next I'm gonna present you
145

145

00:06:20.690  -->  00:06:22.386
with a few quiz questions and then we'll move on
146

146

00:06:22.386  -->  00:06:25.810
to a discussion on local variables after that.
147

147

00:06:25.810  -->  00:06:27.110
See you in the next video.
