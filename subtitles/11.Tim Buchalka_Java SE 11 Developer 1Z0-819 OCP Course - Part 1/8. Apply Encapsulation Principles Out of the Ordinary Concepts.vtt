WEBVTT
1
1

00:00:05.280  -->  00:00:06.160
<v Tim>All right so let's now look</v>
2

2

00:00:06.160  -->  00:00:07.700
at some of the out of ordinary things
3

3

00:00:07.700  -->  00:00:11.330
that may pop up.. when applying encapsulation principles.
4

4

00:00:11.330  -->  00:00:13.850
I've mentioned that encapsulation is information hiding
5

5

00:00:13.850  -->  00:00:16.860
and enforcing data integrity around an object.
6

6

00:00:16.860  -->  00:00:18.550
But implementing encapsulation
7

7

00:00:18.550  -->  00:00:20.800
may not always be perfectly straight forward.
8

8

00:00:22.054  -->  00:00:24.004
We're going to create a new class here.
9

9

00:00:25.080  -->  00:00:26.918
Now.. a same project,
10

10

00:00:26.918  -->  00:00:28.880
encapsulation project.
11

11

00:00:28.880  -->  00:00:31.110
And I'm gonna call this one "Person",
12

12

00:00:31.110  -->  00:00:34.276
who is going to be in the com.entity package.
13

13

00:00:34.276  -->  00:00:37.980
(keyboard clicking)
14

14

00:00:37.980  -->  00:00:39.393
Com.entity.person.
15

15

00:00:39.393  -->  00:00:42.130
(keyboard clicking)
16

16

00:00:42.130  -->  00:00:44.510
There's our bean.. person bean.
17

17

00:00:44.510  -->  00:00:46.990
So I'm looking at this at a quick glance.
18

18

00:00:46.990  -->  00:00:48.840
It looks like a well encapsulated class.
19

19

00:00:48.840  -->  00:00:50.550
It hides the attributes as you can see there.
20

20

00:00:50.550  -->  00:00:52.050
We've got getters and setters.
21

21

00:00:53.760  -->  00:00:55.830
The attributes are marked private.
22

22

00:00:55.830  -->  00:00:57.200
It also provides a constructor,
23

23

00:00:57.200  -->  00:00:58.170
as you can see there,
24

24

00:00:58.170  -->  00:00:59.300
to initialise the attributes
25

25

00:00:59.300  -->  00:01:02.189
and methods to access the attributes as I mentioned.
26

26

00:01:02.189  -->  00:01:03.022
All right
27

27

00:01:03.022  -->  00:01:06.330
next we need to create a class named "Person Tester".
28

28

00:01:06.330  -->  00:01:07.600
So we can test this bean out.
29

29

00:01:07.600  -->  00:01:08.433
So let's do that.
30

30

00:01:08.433  -->  00:01:12.497
Your class name's gonna be "com.entity" again.
31

31

00:01:12.497  -->  00:01:14.017
(keyboard clicking)
32

32

00:01:14.017  -->  00:01:15.260
".persontester".
33

33

00:01:15.260  -->  00:01:18.675
(keyboard clicking)
34

34

00:01:18.675  -->  00:01:20.257
Press in some code.
35

35

00:01:20.257  -->  00:01:21.620
I've got an error there
36

36

00:01:21.620  -->  00:01:23.429
because I think I missed a package statement.
37

37

00:01:23.429  -->  00:01:27.292
So.. it's package.. com.entity,
38

38

00:01:27.292  -->  00:01:30.060
which made that import redundant.
39

39

00:01:30.060  -->  00:01:32.510
All right so there's the code.
40

40

00:01:32.510  -->  00:01:33.343
Now this code,
41

41

00:01:33.343  -->  00:01:34.370
if you look at you can see there
42

42

00:01:34.370  -->  00:01:35.760
that there's some local variables
43

43

00:01:35.760  -->  00:01:40.120
and it's creating two instances of our person bean.
44

44

00:01:40.120  -->  00:01:41.370
And if you run this code,
45

45

00:01:42.760  -->  00:01:44.920
so can you see what's happened there?
46

46

00:01:44.920  -->  00:01:45.753
Basically,
47

47

00:01:45.753  -->  00:01:49.000
with set up in this StringBuilder object here,
48

48

00:01:49.000  -->  00:01:52.570
we've actually passed that to the person or to the bean,
49

49

00:01:52.570  -->  00:01:55.050
person bean and.. saved it.
50

50

00:01:55.050  -->  00:01:56.860
We've then updated the address,
51

51

00:01:56.860  -->  00:01:59.800
we've actually appended the -0005 to it.
52

52

00:01:59.800  -->  00:02:01.660
We've instead changed to a new version
53

53

00:02:01.660  -->  00:02:03.620
of the person class there,
54

54

00:02:03.620  -->  00:02:05.430
and we're printing out both person classes.
55

55

00:02:05.430  -->  00:02:08.390
You can see both of them have actually got the same address.
56

56

00:02:08.390  -->  00:02:10.812
So in other words the second update, the append,
57

57

00:02:10.812  -->  00:02:13.877
those changes have been reflected in the "First Person" bean
58

58

00:02:13.877  -->  00:02:15.670
and it's obviously a bad thing.
59

59

00:02:15.670  -->  00:02:16.503
The point here
60

60

00:02:16.503  -->  00:02:19.034
is that if your attributes are reference variables,
61

61

00:02:19.034  -->  00:02:21.770
you should actually make a copy of the data in the bean
62

62

00:02:21.770  -->  00:02:24.360
before signing it to the instance variables.
63

63

00:02:24.360  -->  00:02:26.804
So to do that you go back to your person day there.
64

64

00:02:26.804  -->  00:02:28.770
You can see this address equals address.
65

65

00:02:28.770  -->  00:02:32.365
Well that should actually be new StringBuilder address.
66

66

00:02:32.365  -->  00:02:35.790
(keyboard typing)
67

67

00:02:35.790  -->  00:02:37.163
And if you do that,
68

68

00:02:38.590  -->  00:02:41.093
and we run the code again.. our person tester.
69

69

00:02:43.233  -->  00:02:45.860
You can see now the address clearly is different
70

70

00:02:45.860  -->  00:02:46.954
for each of our person beans.
71

71

00:02:46.954  -->  00:02:48.040
Which is correct
72

72

00:02:48.040  -->  00:02:50.340
because we're instantiating a new version
73

73

00:02:50.340  -->  00:02:51.890
of the StringBuilder address
74

74

00:02:51.890  -->  00:02:53.250
each time we're creating a person.
75

75

00:02:53.250  -->  00:02:54.850
But that's okay.
76

76

00:02:54.850  -->  00:02:56.860
We're assigning a address to the new StringBuilder
77

77

00:02:56.860  -->  00:02:59.210
which the calling class has no access to,
78

78

00:02:59.210  -->  00:03:02.060
and that ensures the integrity of the data in the class.
79

79

00:03:02.060  -->  00:03:03.790
Make sure you're addressing that
80

80

00:03:03.790  -->  00:03:05.123
in any beans you're creating.
81

81

00:03:05.123  -->  00:03:06.020
All right.
82

82

00:03:06.020  -->  00:03:06.853
Next we're gonna test
83

83

00:03:06.853  -->  00:03:08.450
how well you're understanding capsulation
84

84

00:03:08.450  -->  00:03:09.654
with some quiz questions.
85

85

00:03:09.654  -->  00:03:12.440
And then we'll follow with that into the next section,
86

86

00:03:12.440  -->  00:03:13.320
where we're gonna start looking
87

87

00:03:13.320  -->  00:03:16.870
at reusing implementations by inheritance.
88

88

00:03:16.870  -->  00:03:18.783
See you in the next quiz or video.
