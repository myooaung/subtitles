WEBVTT
1
1

00:00:05.490  -->  00:00:06.570
<v ->So in a previous video,</v>
2

2

00:00:06.570  -->  00:00:08.660
I talked about methods and constructors,
3

3

00:00:08.660  -->  00:00:10.670
and discussed the methods signature,
4

4

00:00:10.670  -->  00:00:13.480
which uniquely identifies a method in a class.
5

5

00:00:13.480  -->  00:00:15.070
An overloaded method is a method
6

6

00:00:15.070  -->  00:00:17.060
with the same name as another method,
7

7

00:00:17.060  -->  00:00:18.470
but with a different signature.
8

8

00:00:18.470  -->  00:00:20.550
In other words, a different parameter set.
9

9

00:00:20.550  -->  00:00:21.780
And there's no limit to the number
10

10

00:00:21.780  -->  00:00:25.120
of overloaded methods you can create for a particular class.
11

11

00:00:25.120  -->  00:00:27.350
So I'm gonna demonstrate overloaded methods by creating
12

12

00:00:27.350  -->  00:00:29.356
a new class in the methods project
13

13

00:00:29.356  -->  00:00:31.240
we've worked on previously.
14

14

00:00:31.240  -->  00:00:32.990
So, let's go ahead and create this.
15

15

00:00:34.600  -->  00:00:37.665
I'm going to call it OverloadPrimitive.
16

16

00:00:37.665  -->  00:00:40.915
(Typing on a keyboard)
17

17

00:00:42.910  -->  00:00:45.460
Right so this code, let's go ahead and have a look,
18

18

00:00:46.580  -->  00:00:49.063
has a single overload method named bestMethod.
19

19

00:00:50.210  -->  00:00:52.740
And you can see it's been called there in the main method.
20

20

00:00:52.740  -->  00:00:54.790
And I've actually created overloaded methods here,
21

21

00:00:54.790  -->  00:00:57.050
one for each of the primitive data types,
22

22

00:00:57.050  -->  00:00:58.993
and also one for object as well.
23

23

00:01:01.720  -->  00:01:03.180
And to call there in the main,
24

24

00:01:03.180  -->  00:01:05.060
actually just demonstrates a call to each
25

25

00:01:05.060  -->  00:01:05.960
so let's run that.
26

26

00:01:07.490  -->  00:01:08.690
Okay there's the output.
27

27

00:01:09.670  -->  00:01:12.170
Got output from each of the methods.
28

28

00:01:12.170  -->  00:01:13.510
So looking at the code there,
29

29

00:01:13.510  -->  00:01:17.040
note that the call to the method with a byte wrapper
30

30

00:01:17.040  -->  00:01:19.490
you can see the call there on line 19 executed the
31

31

00:01:19.490  -->  00:01:22.760
overloaded method with an object type parameter
32

32

00:01:22.760  -->  00:01:25.810
in other words the one down here, so I called
33

33

00:01:25.810  -->  00:01:28.910
that one rather than calling the one that
34

34

00:01:28.910  -->  00:01:32.070
we've defined right up here on line 22, the
35

35

00:01:32.070  -->  00:01:33.600
primitive datatype byte.
36

36

00:01:33.600  -->  00:01:35.700
So to confirm that I'm going to remove now
37

37

00:01:35.700  -->  00:01:38.430
the overloaded bestMethod, the object
38

38

00:01:39.440  -->  00:01:42.750
comment that out, rerun the code
39

39

00:01:45.667  -->  00:01:46.800
and you can see we haven't got an error
40

40

00:01:46.800  -->  00:01:49.080
even though we've still got the same calls that
41

41

00:01:49.080  -->  00:01:52.470
we had in method there specifically on line 19
42

42

00:01:52.470  -->  00:01:54.540
but it's now actually calling the byte
43

43

00:01:54.540  -->  00:01:55.930
and we can see that the bestMethod for byte
44

44

00:01:55.930  -->  00:01:57.950
now showing both for the initial call and
45

45

00:01:57.950  -->  00:02:00.980
another one down the bottom on line 19.
46

46

00:02:00.980  -->  00:02:02.280
It's interesting to note if you haven't got
47

47

00:02:02.280  -->  00:02:05.190
an overloaded version with object, it will call
48

48

00:02:05.190  -->  00:02:07.440
the right one when you're using wrapper classes
49

49

00:02:07.440  -->  00:02:09.610
like we're using on line 19.
50

50

00:02:09.610  -->  00:02:12.070
Now I will talk in depth about how Java chooses
51

51

00:02:12.070  -->  00:02:14.220
an overloaded method when the type isn't
52

52

00:02:14.220  -->  00:02:16.700
an exact match which it was in this scenario
53

53

00:02:16.700  -->  00:02:18.610
but before I do that I want explore what
54

54

00:02:18.610  -->  00:02:20.830
is not an overloaded method.
55

55

00:02:20.830  -->  00:02:23.398
So to do that I'm going to create another class
56

56

00:02:23.398  -->  00:02:24.565
NotOverloaded.
57

57

00:02:25.539  -->  00:02:28.206
(Typing sounds)
58

58

00:02:31.290  -->  00:02:33.980
Simple classes as you can see there on screen,
59

59

00:02:33.980  -->  00:02:36.540
basically just a public method which we execute
60

60

00:02:36.540  -->  00:02:39.140
in another class and you can see it's creating
61

61

00:02:39.140  -->  00:02:41.770
a new instance of the NoLoad class on line 16
62

62

00:02:41.770  -->  00:02:43.780
and then executing the method.
63

63

00:02:43.780  -->  00:02:45.170
This is going to be our starting point for
64

64

00:02:45.170  -->  00:02:47.120
exploring what isn't an overloaded method
65

65

00:02:47.120  -->  00:02:48.220
so I'm gonna run that.
66

66

00:02:49.953  -->  00:02:51.834
And you can see the output down the bottom of the screen
67

67

00:02:51.834  -->  00:02:53.000
bestMethod for int.
68

68

00:02:53.000  -->  00:02:55.120
Right so now let's add some additional methods
69

69

00:02:55.120  -->  00:02:58.310
to the NoLoad class and we're just replace the
70

70

00:02:58.310  -->  00:03:01.333
definition of class NoLoad with these new methods.
71

71

00:03:02.510  -->  00:03:04.150
So you can see by doing that, what I've done is
72

72

00:03:04.150  -->  00:03:06.810
I've introduced a compile error for each of the
73

73

00:03:06.810  -->  00:03:09.090
method declarations except one that you can see
74

74

00:03:09.090  -->  00:03:11.980
on line 19 and looking at the error there
75

75

00:03:11.980  -->  00:03:14.190
the bestMethod parentheses int is already defined
76

76

00:03:14.190  -->  00:03:16.610
in NoLoad, all of these methods are considered
77

77

00:03:16.610  -->  00:03:19.330
to have the same signature and therefore they clash
78

78

00:03:19.330  -->  00:03:20.163
and aren't allowed.
79

79

00:03:20.163  -->  00:03:22.402
So I'm gonna revert the code there, let's go ahead
80

80

00:03:22.402  -->  00:03:24.990
and do an undo, back to how we had it before.
81

81

00:03:24.990  -->  00:03:26.460
Okay, let's create a new class here, we're gonna
82

82

00:03:26.460  -->  00:03:28.013
call this one IsOverloaded.
83

83

00:03:30.049  -->  00:03:32.716
(Typing sounds)
84

84

00:03:35.340  -->  00:03:37.920
Okay so there's the code, this one's a little bit more
85

85

00:03:37.920  -->  00:03:40.440
interesting, all the methods are overloaded methods
86

86

00:03:40.440  -->  00:03:41.560
for bestMethod.
87

87

00:03:41.560  -->  00:03:43.720
I've already stated that if we have an exact match,
88

88

00:03:43.720  -->  00:03:46.807
Java will pick that method and we can see that here,
89

89

00:03:46.807  -->  00:03:48.270
and you can see the various calls that I've got
90

90

00:03:48.270  -->  00:03:51.420
defined down here in the main method.
91

91

00:03:51.420  -->  00:03:52.413
So if we run this,
92

92

00:03:54.520  -->  00:03:56.190
you can see the output down the bottom of the screen there
93

93

00:03:56.190  -->  00:03:58.500
so it's basically choosing the relevant method
94

94

00:03:58.500  -->  00:04:00.350
no real surprises there.
95

95

00:04:00.350  -->  00:04:02.370
Because the parameters match as to what we're actually
96

96

00:04:02.370  -->  00:04:04.510
trying to call in our main method.
97

97

00:04:04.510  -->  00:04:06.790
But notice that I didn't test the two
98

98

00:04:06.790  -->  00:04:09.420
var args methods, so basically these ones
99

99

00:04:09.420  -->  00:04:12.390
that I've defined up here, the ones here on line 34
100

100

00:04:12.390  -->  00:04:16.140
and 39, let's now try to test those.
101

101

00:04:16.140  -->  00:04:17.920
So to do that what I'm going to do is to just
102

102

00:04:17.920  -->  00:04:20.460
add a call here to IsOverloaded class
103

103

00:04:20.460  -->  00:04:25.430
n.bestmethod(1,2) and you can see by doing that
104

104

00:04:25.430  -->  00:04:27.230
we have got an error there.
105

105

00:04:27.230  -->  00:04:28.680
So I think you'd agree that's pretty interesting,
106

106

00:04:28.680  -->  00:04:31.310
we get a compiler error, ambiguous methods.
107

107

00:04:31.310  -->  00:04:33.650
You might have expected that the var args specified
108

108

00:04:33.650  -->  00:04:37.150
as int would have matched a call using the int literals.
109

109

00:04:37.150  -->  00:04:39.540
Now we can force which method we want to use
110

110

00:04:39.540  -->  00:04:41.850
by passing in an appropriate array
111

111

00:04:41.850  -->  00:04:45.310
to the var args methods, so to see what I mean there
112

112

00:04:45.310  -->  00:04:46.810
we're going to change this statement, well actually
113

113

00:04:46.810  -->  00:04:49.100
I'll comment it out and on the next line what
114

114

00:04:49.100  -->  00:04:54.100
I'm going to do is put n.bestMethod(new int) array,
115

115

00:04:56.100  -->  00:04:58.270
then add some initializer for the array or
116

116

00:04:58.270  -->  00:05:00.860
an initializer one comma two and I think that
117

117

00:05:00.860  -->  00:05:03.110
that's now valid and the same for the integer
118

118

00:05:04.220  -->  00:05:06.400
Overloaded method so method and it's gonna be
119

119

00:05:06.400  -->  00:05:08.740
new, an integer array now we want
120

120

00:05:10.430  -->  00:05:13.780
and add some initializer or an initializer again
121

121

00:05:13.780  -->  00:05:16.060
and you can see now that that's accepted it
122

122

00:05:16.060  -->  00:05:18.683
and we can run this and in fact it does work.
123

123

00:05:20.810  -->  00:05:21.643
All righty.
124

124

00:05:21.643  -->  00:05:23.050
All right so let's finish the video here,
125

125

00:05:23.050  -->  00:05:24.450
then in the next one I just want to go over
126

126

00:05:24.450  -->  00:05:26.330
some of the rules for determining
127

127

00:05:26.330  -->  00:05:28.620
which overloaded method will be executed
128

128

00:05:28.620  -->  00:05:30.890
as defined by the Java specification.
129

129

00:05:30.890  -->  00:05:32.190
See you in the next video.
