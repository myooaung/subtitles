WEBVTT
1
1

00:00:05.440  -->  00:00:06.273
<v Tim>Right, so in the last video</v>
2

2

00:00:06.273  -->  00:00:07.900
we joined and split strings.
3

3

00:00:07.900  -->  00:00:09.370
In this video we're gonna turn our focus
4

4

00:00:09.370  -->  00:00:12.960
to the four replace methods, on the string class.
5

5

00:00:12.960  -->  00:00:14.560
So we're gonna create a new class
6

6

00:00:14.560  -->  00:00:15.923
called string replacement.
7

7

00:00:16.980  -->  00:00:18.583
We're still in our strings project.
8

8

00:00:27.153  -->  00:00:29.200
And you can see that we're creating some variables
9

9

00:00:29.200  -->  00:00:32.030
and we're going through various calls
10

10

00:00:32.030  -->  00:00:33.920
of the replace method.
11

11

00:00:33.920  -->  00:00:37.200
And we've got replace calling on line 17.
12

12

00:00:37.200  -->  00:00:39.070
And also on line 22,
13

13

00:00:39.070  -->  00:00:41.860
we've got replace all that we're calling on line 27.
14

14

00:00:41.860  -->  00:00:43.593
Replace first on line 23.
15

15

00:00:44.490  -->  00:00:46.490
Let's just run this and see the results.
16

16

00:00:50.190  -->  00:00:51.900
So what this code confirms
17

17

00:00:51.900  -->  00:00:54.820
is that you can replace a single character with another,
18

18

00:00:54.820  -->  00:00:56.480
for the entire string.
19

19

00:00:56.480  -->  00:00:58.710
You can replace one substring for another,
20

20

00:00:58.710  -->  00:01:00.360
for the entire string.
21

21

00:01:00.360  -->  00:01:02.460
You can replace a substring identified by
22

22

00:01:02.460  -->  00:01:05.100
a regular expression, for another substring,
23

23

00:01:05.100  -->  00:01:06.480
for the entire string.
24

24

00:01:06.480  -->  00:01:08.630
And also you can replace the first match only
25

25

00:01:08.630  -->  00:01:11.600
of a substring identified by a regular expression,
26

26

00:01:11.600  -->  00:01:13.053
with some other substring.
27

27

00:01:15.515  -->  00:01:17.150
All right, so let's look at some examples now
28

28

00:01:17.150  -->  00:01:20.763
of the substring method, as well as the subsequence methods.
29

29

00:01:24.230  -->  00:01:26.780
Okay, so there's our code, if we actually run this,
30

30

00:01:30.157  -->  00:01:31.310
you can see the results we've got there
31

31

00:01:31.310  -->  00:01:34.213
for substring seven, substring 3,7.
32

32

00:01:35.205  -->  00:01:38.252
So if substring seven up here, starting on line 44,
33

33

00:01:38.252  -->  00:01:41.127
you can see we've used mississippi.substring(7).
34

34

00:01:42.430  -->  00:01:45.020
And perhaps not surprised getting ippi as the result.
35

35

00:01:45.020  -->  00:01:48.130
Substring 3,7 gives us siss.
36

36

00:01:48.130  -->  00:01:51.460
Subsequence 3,7 gives us siss.
37

37

00:01:51.460  -->  00:01:53.520
And mississipi equals mississipi,
38

38

00:01:53.520  -->  00:01:55.913
that's where we're using the last call there,
39

39

00:01:56.930  -->  00:01:59.890
and that was basically determining that
40

40

00:01:59.890  -->  00:02:02.343
the value of mississippi hadn't changed.
41

41

00:02:03.860  -->  00:02:06.470
So I think we'd agree that's a pretty straightforward code.
42

42

00:02:06.470  -->  00:02:08.300
But it does point at something very important
43

43

00:02:08.300  -->  00:02:10.860
about the replace and substring methods.
44

44

00:02:10.860  -->  00:02:13.970
The methods do not change the current string value,
45

45

00:02:13.970  -->  00:02:16.550
which is always immutable for a string.
46

46

00:02:16.550  -->  00:02:19.180
Rather, the method returns a new string with either
47

47

00:02:19.180  -->  00:02:22.330
the substring or the replaced value.
48

48

00:02:22.330  -->  00:02:25.730
Now if you see examples like this on the certification exam,
49

49

00:02:25.730  -->  00:02:28.600
just remember that the string value will not change,
50

50

00:02:28.600  -->  00:02:31.120
unless you set the result to a self reference
51

51

00:02:31.120  -->  00:02:32.730
as shown in the next code segment
52

52

00:02:32.730  -->  00:02:34.080
that I'm about to paste in.
53

53

00:02:39.656  -->  00:02:42.390
All right, so this example that I'm talking about
54

54

00:02:42.390  -->  00:02:45.770
it's basically the self reference being updated.
55

55

00:02:45.770  -->  00:02:47.920
So we can confirm that the mississipi variable
56

56

00:02:47.920  -->  00:02:50.230
should now hold the reference to the string miss
57

57

00:02:50.230  -->  00:02:53.333
because we've got that assignment on line 61.
58

58

00:02:57.874  -->  00:02:59.570
And you can see that's confirmed.
59

59

00:02:59.570  -->  00:03:01.990
All right, so finally, I just wanna show a few examples
60

60

00:03:01.990  -->  00:03:04.750
of the transformation methods that I talked about.
61

61

00:03:04.750  -->  00:03:07.060
And specifically the one's that are new,
62

62

00:03:07.060  -->  00:03:10.470
which are repeat and strip, but also a review
63

63

00:03:10.470  -->  00:03:12.963
of value of and why this one needs a revisit.
64

64

00:03:13.800  -->  00:03:15.763
So, we're gonna create a new class.
65

65

00:03:18.430  -->  00:03:20.223
We'll call this one text transform.
66

66

00:03:27.140  -->  00:03:29.040
Okay, there's the code.
67

67

00:03:29.040  -->  00:03:31.620
We're gonna demonstrate how the repeat method works here.
68

68

00:03:31.620  -->  00:03:32.770
So, if we run this now,
69

69

00:03:36.980  -->  00:03:39.533
so the first instance perhaps seems obvious,
70

70

00:03:40.530  -->  00:03:42.850
and returns our string repeated three times,
71

71

00:03:42.850  -->  00:03:44.550
but note the second call of the method,
72

72

00:03:44.550  -->  00:03:47.230
with a zero account returns an empty string,
73

73

00:03:47.230  -->  00:03:51.050
not the string itself which may not seem obvious at all.
74

74

00:03:51.050  -->  00:03:53.650
So, Java 11 introduced a method strip,
75

75

00:03:53.650  -->  00:03:55.613
strip leading and strip trailing.
76

76

00:03:58.900  -->  00:04:00.580
So, in this slide now, I'm showing the difference
77

77

00:04:00.580  -->  00:04:03.023
between the trim and the strip methods.
78

78

00:04:03.970  -->  00:04:06.670
So firstly, strip is new to Java 11.
79

79

00:04:06.670  -->  00:04:11.320
Strip is now the preferred method, going ahead in Java 11.
80

80

00:04:11.320  -->  00:04:14.200
And both trim and strip do trim both leading
81

81

00:04:14.200  -->  00:04:15.870
and trailing white space,
82

82

00:04:15.870  -->  00:04:17.470
but note the white space definition.
83

83

00:04:17.470  -->  00:04:21.130
Trim uses less than or equal to uni code plus 0020,
84

84

00:04:21.130  -->  00:04:22.730
which is a space,
85

85

00:04:22.730  -->  00:04:25.430
or a strip uses character dot is white space
86

86

00:04:25.430  -->  00:04:27.240
to determine that definition.
87

87

00:04:27.240  -->  00:04:29.480
Pretty important difference there.
88

88

00:04:29.480  -->  00:04:31.460
Really, the main point I'm making about this slide
89

89

00:04:31.460  -->  00:04:34.876
is that the strip in fact strips more space characters
90

90

00:04:34.876  -->  00:04:38.010
than trim, but also offers strip leading
91

91

00:04:38.010  -->  00:04:39.760
and strip trailing methods as well.
92

92

00:04:42.040  -->  00:04:43.300
All right, so I mentioned a value of.
93

93

00:04:43.300  -->  00:04:46.260
Let's revisit value of.
94

94

00:04:46.260  -->  00:04:49.473
I'm gonna paste this code at the bottom of this class.
95

95

00:04:51.190  -->  00:04:52.650
All right, like so.
96

96

00:04:52.650  -->  00:04:55.393
I'm gonna run this and then we'll talk about the results.
97

97

00:04:58.590  -->  00:05:01.160
I'll just put that on the screen so you can see it.
98

98

00:05:01.160  -->  00:05:04.070
Now what I specifically want you to notice here,
99

99

00:05:04.070  -->  00:05:06.030
basically between this value of method
100

100

00:05:06.030  -->  00:05:08.610
and this substring method is that value of
101

101

00:05:08.610  -->  00:05:11.630
uses a start offset and a count of characters
102

102

00:05:11.630  -->  00:05:14.420
to be included, like the constructive methods.
103

103

00:05:14.420  -->  00:05:16.050
The substring method on the other hand,
104

104

00:05:16.050  -->  00:05:19.290
uses a start offset and an end offset.
105

105

00:05:19.290  -->  00:05:22.233
Start being inclusive and offset being exclusive.
106

106

00:05:24.580  -->  00:05:28.940
As of Java 9, three streaming methods were added to string,
107

107

00:05:28.940  -->  00:05:31.570
chars, codepoints and lines.
108

108

00:05:31.570  -->  00:05:33.850
Now, streams are not part of the first certification
109

109

00:05:33.850  -->  00:05:36.830
exam objective but are part of the second,
110

110

00:05:36.830  -->  00:05:38.810
so I won't be reviewing these here now.
111

111

00:05:38.810  -->  00:05:42.364
But, in IZO-816 course, that I'll be releasing
112

112

00:05:42.364  -->  00:05:45.930
pretty early in 2020, we'll address those at that point
113

113

00:05:45.930  -->  00:05:47.900
but the bottom line is, for the first exam,
114

114

00:05:47.900  -->  00:05:50.407
you don't need to worry about those new streaming methods.
115

115

00:05:50.407  -->  00:05:52.260
All right, so at this point, it's been a few videos
116

116

00:05:52.260  -->  00:05:54.740
but that concludes our review of the string methods.
117

117

00:05:54.740  -->  00:05:56.470
There were a lot to cover and we went through it
118

118

00:05:56.470  -->  00:05:58.240
pretty quickly, and the reason for that
119

119

00:05:58.240  -->  00:06:00.810
is the string is a very common thing to be using in Java,
120

120

00:06:00.810  -->  00:06:02.930
so I assumed that you're fairly familiar
121

121

00:06:02.930  -->  00:06:04.737
with a lot of the standard string methods
122

122

00:06:04.737  -->  00:06:06.570
and really only tried to focus on things
123

123

00:06:06.570  -->  00:06:08.863
you may get tripped up with in the exam.
124

124

00:06:09.740  -->  00:06:12.510
Now just as a reminder and a recap to remember these things,
125

125

00:06:12.510  -->  00:06:15.380
firstly, strings are immutable.
126

126

00:06:15.380  -->  00:06:17.360
Any method you use that returns a value
127

127

00:06:17.360  -->  00:06:20.380
needs to be assigned to a different string reference
128

128

00:06:20.380  -->  00:06:22.430
or back to the current one.
129

129

00:06:22.430  -->  00:06:24.090
We'll be reviewing this again when we talk about
130

130

00:06:24.090  -->  00:06:26.233
StringBuilders which are mutable.
131

131

00:06:27.700  -->  00:06:30.730
String constructors and value of methods use a start offset,
132

132

00:06:30.730  -->  00:06:33.520
inclusive, and a count of characters.
133

133

00:06:33.520  -->  00:06:35.640
But all other methods, or other string methods,
134

134

00:06:35.640  -->  00:06:38.930
where applicable use a start offset, which is inclusive,
135

135

00:06:38.930  -->  00:06:41.493
and an end offset, which is exclusive.
136

136

00:06:42.670  -->  00:06:45.700
Methods that use regular expressions are matches,
137

137

00:06:45.700  -->  00:06:47.300
which must match an entire string,
138

138

00:06:47.300  -->  00:06:50.173
split, replace all and replace first.
139

139

00:06:51.110  -->  00:06:52.010
All right, so I'll end the video here
140

140

00:06:52.010  -->  00:06:53.540
and in the next one we'll touch on some of the
141

141

00:06:53.540  -->  00:06:56.210
out of the ordinary topics of the string class
142

142

00:06:56.210  -->  00:06:58.810
that we didn't cover here or that need to be reviewed
143

143

00:06:58.810  -->  00:06:59.860
in more detail.
144

144

00:06:59.860  -->  00:07:01.160
See you in the next video.
