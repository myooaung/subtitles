WEBVTT
1
1

00:00:05.400  -->  00:00:07.300
<v Tim>Alright so, continuing on from the last video,</v>
2

2

00:00:07.300  -->  00:00:10.380
when we're looking at a raise in casting, et cetera.
3

3

00:00:10.380  -->  00:00:11.690
In this one, we're going to show some more
4

4

00:00:11.690  -->  00:00:15.010
examples of castings with and without generics.
5

5

00:00:15.010  -->  00:00:16.240
So we haven't discussed generics
6

6

00:00:16.240  -->  00:00:18.960
and they are officially art of the second Java exam,
7

7

00:00:18.960  -->  00:00:21.740
the 1Z0-816 certification exam,
8

8

00:00:21.740  -->  00:00:23.450
but you might encounter some sample code
9

9

00:00:23.450  -->  00:00:26.320
in the first exam, this one that we're focusing on
10

10

00:00:26.320  -->  00:00:28.250
that uses generics.
11

11

00:00:28.250  -->  00:00:30.310
The term generics is used because its purpose was
12

12

00:00:30.310  -->  00:00:32.500
to implement more generic programming,
13

13

00:00:32.500  -->  00:00:35.000
extending Javas type system to allow a quote,
14

14

00:00:35.000  -->  00:00:38.300
a type or method to operate on objects of various types
15

15

00:00:38.300  -->  00:00:41.223
while providing compile-time type safety, end quote.
16

16

00:00:42.090  -->  00:00:43.640
Now from the example code we walked through
17

17

00:00:43.640  -->  00:00:46.110
in the previous video the objective there would be
18

18

00:00:46.110  -->  00:00:49.180
to prevent adding a StringBuilder object in a collection,
19

19

00:00:49.180  -->  00:00:51.810
we wanna contain only NextClass objects,
20

20

00:00:51.810  -->  00:00:54.150
by having the compiler recognise the problem
21

21

00:00:54.150  -->  00:00:57.000
and flag it as an error rather than waiting till runtime.
22

22

00:00:59.000  -->  00:01:00.550
The Java collections framework
23

23

00:01:00.550  -->  00:01:02.940
supports generics to specify the type of objects
24

24

00:01:02.940  -->  00:01:05.380
stored in a collection instance.
25

25

00:01:05.380  -->  00:01:08.180
A generic type in Java is one that is parameterized,
26

26

00:01:08.180  -->  00:01:09.590
with in the case of collections,
27

27

00:01:09.590  -->  00:01:13.100
the type of the objects which will be in the collection.
28

28

00:01:13.100  -->  00:01:15.740
You can parameterize any class or interface
29

29

00:01:15.740  -->  00:01:18.070
as well as methods. Now I'm not gonna to discuss
30

30

00:01:18.070  -->  00:01:20.220
how to create a generically typed type,
31

31

00:01:20.220  -->  00:01:22.120
or a generically typed method.
32

32

00:01:22.120  -->  00:01:23.140
For this exercise,
33

33

00:01:23.140  -->  00:01:25.540
all you need to know is the syntax of using one.
34

34

00:01:27.420  -->  00:01:29.450
So the syntax for declaring a variable
35

35

00:01:29.450  -->  00:01:32.760
for a generic type and instantiating it is shown below.
36

36

00:01:32.760  -->  00:01:35.230
So we've got a generic type name, diamond operator,
37

37

00:01:35.230  -->  00:01:38.137
and a type in the diamond operator, varname equals new,
38

38

00:01:38.137  -->  00:01:41.130
the generic type name again, diamond operator and the type,
39

39

00:01:41.130  -->  00:01:43.090
left and right parentheses.
40

40

00:01:43.090  -->  00:01:45.750
And the example I'm using there is ArrayList,
41

41

00:01:45.750  -->  00:01:46.583
diamond operator,
42

42

00:01:46.583  -->  00:01:49.280
String again being the type that we're declaring,
43

43

00:01:49.280  -->  00:01:51.900
list equals new ArrayList, diamond operator string,
44

44

00:01:51.900  -->  00:01:54.080
then we've got our left and right parenthesis,
45

45

00:01:54.080  -->  00:01:55.433
semicolon to end the line.
46

46

00:01:57.720  -->  00:01:59.860
So alternately what you can do is omit
47

47

00:01:59.860  -->  00:02:03.100
the specific passed type on the right of the assignment,
48

48

00:02:03.100  -->  00:02:05.120
and just use the diamond operator.
49

49

00:02:05.120  -->  00:02:06.420
And this is short hand and can be used
50

50

00:02:06.420  -->  00:02:08.820
because the type is known from the declaration.
51

51

00:02:08.820  -->  00:02:10.390
And the example there, as you can see,
52

52

00:02:10.390  -->  00:02:11.820
it's almost identical but we're not using
53

53

00:02:11.820  -->  00:02:13.120
the type on the right hand side,
54

54

00:02:13.120  -->  00:02:14.500
we've just got the diamond operator
55

55

00:02:14.500  -->  00:02:16.000
that's empty in this scenario.
56

56

00:02:17.300  -->  00:02:19.634
So both of these statements declare a variable
57

57

00:02:19.634  -->  00:02:22.800
of ArrayList, which will house only String objects,
58

58

00:02:22.800  -->  00:02:25.014
and assign a new instance of an ArrayList,
59

59

00:02:25.014  -->  00:02:27.420
typed to String, to the variable.
60

60

00:02:27.420  -->  00:02:29.230
We'll be talking a lot more about the ArrayList,
61

61

00:02:29.230  -->  00:02:31.660
but for now realise it's an object that implements
62

62

00:02:31.660  -->  00:02:34.143
the List interface, and maintains an array.
63

63

00:02:36.050  -->  00:02:37.020
The only other thing you need
64

64

00:02:37.020  -->  00:02:38.450
to know about generics at this level,
65

65

00:02:38.450  -->  00:02:41.170
is that they don't support primitive data types.
66

66

00:02:41.170  -->  00:02:43.110
The full on code below is invalid.
67

67

00:02:43.110  -->  00:02:46.820
ArrayList, diamond operator int, list equals new ArrayList,
68

68

00:02:46.820  -->  00:02:48.793
diamond operator int, invalid code.
69

69

00:02:50.600  -->  00:02:52.430
There are actually two types of ArrayList,
70

70

00:02:52.430  -->  00:02:55.340
the raw, pre-generics ArrayList and the typed ArrayList.
71

71

00:02:55.340  -->  00:02:57.990
And this is true of many of the Collections classes
72

72

00:02:57.990  -->  00:03:01.623
and interfaces in Java, so let's compare them side by side.
73

73

00:03:02.770  -->  00:03:04.470
We need to create a new class now
74

74

00:03:04.470  -->  00:03:06.480
in our polymorphism project.
75

75

00:03:06.480  -->  00:03:08.927
We're gonna call this one GenericCasts.
76

76

00:03:16.340  -->  00:03:18.940
Now this code you'll probably recognise is very similar
77

77

00:03:18.940  -->  00:03:21.860
to the cast extras class from the previous video.
78

78

00:03:21.860  -->  00:03:23.780
We've still got the two nested classes there,
79

79

00:03:23.780  -->  00:03:27.910
base class and next class, next class extending base class.
80

80

00:03:27.910  -->  00:03:29.430
But moving down to the main list,
81

81

00:03:29.430  -->  00:03:32.520
to the main methods rather, we're creating an ArrayList,
82

82

00:03:32.520  -->  00:03:35.190
both raw and typed as you can see there.
83

83

00:03:35.190  -->  00:03:37.430
The raw types are the type that are moving on down.
84

84

00:03:37.430  -->  00:03:39.340
We've got our typed generic lists there,
85

85

00:03:39.340  -->  00:03:41.947
and with our typed ArrayList you can see we're creating
86

86

00:03:41.947  -->  00:03:43.920
an ArrayList of type BaseClass,
87

87

00:03:43.920  -->  00:03:47.760
and creating a list of BaseClass as well as the ArrayList.
88

88

00:03:47.760  -->  00:03:49.610
We're adding a NextClass object to the raw ArrayList
89

89

00:03:49.610  -->  00:03:51.470
as you can see on line 52,
90

90

00:03:51.470  -->  00:03:54.050
and doing the same for our topped ArrayList
91

91

00:03:54.050  -->  00:03:57.300
and we're printing out the ArrayList and list variables.
92

92

00:03:57.300  -->  00:03:58.450
So let's run this code.
93

93

00:04:01.390  -->  00:04:03.020
You can see the output down at the bottom.
94

94

00:04:03.020  -->  00:04:05.080
So far we don't see a whole lot of difference between
95

95

00:04:05.080  -->  00:04:08.040
a raw ArrayList and a generic ArrayList,
96

96

00:04:08.040  -->  00:04:09.680
but let's expand this a bit further.
97

97

00:04:09.680  -->  00:04:12.330
Gonna add some code to the bottom of the main method.
98

98

00:04:14.132  -->  00:04:15.880
Now here's where the difference lies.
99

99

00:04:15.880  -->  00:04:18.390
Defining an ArrayList of type BaseClass
100

100

00:04:18.390  -->  00:04:20.890
informs the compiler that adding anything
101

101

00:04:20.890  -->  00:04:24.140
that doesn't pass the IZ test for BaseClass is an error,
102

102

00:04:24.140  -->  00:04:27.730
and we did get a compiler error on the second end statement.
103

103

00:04:27.730  -->  00:04:29.800
And obviously in the case of the raw list,
104

104

00:04:29.800  -->  00:04:32.020
it would quite happy to accept it.
105

105

00:04:32.020  -->  00:04:33.920
So I'm just going to comment that out.
106

106

00:04:37.030  -->  00:04:38.369
Now I'm gonna paste in some more code
107

107

00:04:38.369  -->  00:04:40.140
on the bottom of the main methods.
108

108

00:04:40.140  -->  00:04:41.670
So here you can see we're creating
109

109

00:04:41.670  -->  00:04:43.330
a next class object and we're assigning it
110

110

00:04:43.330  -->  00:04:46.780
to both the NextClass and BaseClassed variables.
111

111

00:04:46.780  -->  00:04:49.541
Then I'm creating a NextClass typed ArrayList,
112

112

00:04:49.541  -->  00:04:51.840
and assigning it to the raw ArrayList variable,
113

113

00:04:51.840  -->  00:04:54.230
and the raw list variable.
114

114

00:04:54.230  -->  00:04:56.330
I don't think there's any real surprises there.
115

115

00:04:56.330  -->  00:04:59.010
You can assign a specifically typed ArrayList
116

116

00:04:59.010  -->  00:05:01.520
and list to a raw type ArrayList lists.
117

117

00:05:01.520  -->  00:05:04.050
Everything compiled, you can see there's no errors there.
118

118

00:05:04.050  -->  00:05:04.883
And we can run it even though
119

119

00:05:04.883  -->  00:05:06.680
we haven't defined any extra output.
120

120

00:05:08.245  -->  00:05:09.195
And it still works.
121

121

00:05:10.230  -->  00:05:13.080
Alright, so let's add a couple extra lines of the output.
122

122

00:05:14.180  -->  00:05:15.760
And we have got errors there and you can BaseList,
123

123

00:05:15.760  -->  00:05:18.410
here is our variable of ArrayList BaseClass.
124

124

00:05:18.410  -->  00:05:21.960
And bList is our variable list of BaseClass.
125

125

00:05:21.960  -->  00:05:23.470
So starting in our ArrayList
126

126

00:05:23.470  -->  00:05:27.267
of type NextClass object to a variable of ArrayList
127

127

00:05:27.267  -->  00:05:29.510
BaseClass is a compiler error,
128

128

00:05:29.510  -->  00:05:31.330
although we're starting a NextClass object
129

129

00:05:31.330  -->  00:05:33.250
to a BaseClass variable isn't.
130

130

00:05:33.250  -->  00:05:36.533
And the same is true for a list of typed BaseClass.
131

131

00:05:36.533  -->  00:05:38.180
It's a compiler error,
132

132

00:05:38.180  -->  00:05:41.970
to an ArrayList of type NextClass objects.
133

133

00:05:41.970  -->  00:05:44.150
And we hover over the arrow there,
134

134

00:05:44.150  -->  00:05:45.950
incompatible types as you can see there.
135

135

00:05:45.950  -->  00:05:48.690
Alright, so I'm gonna remove that last segment of code.
136

136

00:05:48.690  -->  00:05:49.740
We'll comment it out.
137

137

00:05:52.150  -->  00:05:53.780
Now that's a little confusing,
138

138

00:05:53.780  -->  00:05:56.890
and the explanation has to do with type erasure
139

139

00:05:56.890  -->  00:05:59.420
and backwards compatibility for raw types
140

140

00:05:59.420  -->  00:06:01.230
and we can't really get into that here.
141

141

00:06:01.230  -->  00:06:03.060
Now let's see if the same incongruent
142

142

00:06:03.060  -->  00:06:05.330
behaviour is true of method codes.
143

143

00:06:05.330  -->  00:06:08.442
SO we're gonna add a method to our NextClass class.
144

144

00:06:08.442  -->  00:06:09.463
So let's go ahead and do that.
145

145

00:06:12.660  -->  00:06:14.000
So there's the method and note there
146

146

00:06:14.000  -->  00:06:17.500
that the parameter type is a list of BaseClass objects.
147

147

00:06:17.500  -->  00:06:19.270
Alright, so let's go down to the bottom
148

148

00:06:19.270  -->  00:06:21.973
of the main method and there add some test code.
149

149

00:06:24.070  -->  00:06:25.600
And I need to add these imports
150

150

00:06:25.600  -->  00:06:28.100
and these are obviously two of our nested classes.
151

151

00:06:30.120  -->  00:06:32.030
So you can see they're calling an object
152

152

00:06:32.030  -->  00:06:35.523
of ArrayList NextClass objects is a compiler error,
153

153

00:06:36.440  -->  00:06:38.412
a can't resolved method.
154

154

00:06:38.412  -->  00:06:40.990
All right so we're gonna remove that last error code,
155

155

00:06:40.990  -->  00:06:43.240
last testIt, all right so lets have a look,
156

156

00:06:43.240  -->  00:06:45.040
and do a casting test now.
157

157

00:06:45.040  -->  00:06:46.890
I'm gonna put some more code in here.
158

158

00:06:48.830  -->  00:06:50.580
Now there's the code, this code is demonstrating
159

159

00:06:50.580  -->  00:06:52.850
a casting encounters to the same compiler error.
160

160

00:06:52.850  -->  00:06:57.033
So we've still got an issue with inconvertible types there.
161

161

00:06:58.510  -->  00:06:59.820
Alright so what did we actually learn here?
162

162

00:06:59.820  -->  00:07:02.780
Well first that you can assign a typed generic object
163

163

00:07:02.780  -->  00:07:05.000
to a raw variable type.
164

164

00:07:05.000  -->  00:07:07.840
But you can't use the 'Is A' test for casting,
165

165

00:07:07.840  -->  00:07:11.040
calling methods or assignments of a parameterized type.
166

166

00:07:11.040  -->  00:07:14.720
An exact match to the parameterized type is required.
167

167

00:07:14.720  -->  00:07:16.060
Alright, so I'm just going to write,
168

168

00:07:16.060  -->  00:07:18.930
comment out that last, those last three errors.
169

169

00:07:18.930  -->  00:07:20.040
And I'm gonna paste in one final
170

170

00:07:20.040  -->  00:07:22.140
bit of code before we end the video.
171

171

00:07:22.140  -->  00:07:23.400
Okay, so there's the code.
172

172

00:07:23.400  -->  00:07:25.140
I'm just going to put it up on the screen a bit higher.
173

173

00:07:25.140  -->  00:07:26.550
This code's demonstrating that using
174

174

00:07:26.550  -->  00:07:29.060
type ArrayList objects removes the requirement
175

175

00:07:29.060  -->  00:07:31.350
to cast elements before accessing them.
176

176

00:07:31.350  -->  00:07:33.100
So I've actually run this code now.
177

177

00:07:36.520  -->  00:07:37.353
You can see we're getting
178

178

00:07:37.353  -->  00:07:38.920
the results that we'd expect there.
179

179

00:07:42.210  -->  00:07:44.420
So in the last two videos we've reviewed
180

180

00:07:44.420  -->  00:07:46.570
casting examples around arrays and generics
181

181

00:07:46.570  -->  00:07:49.720
and we've learned that a subclass is a superclass,
182

182

00:07:49.720  -->  00:07:52.290
but an array of subclass, subclass array,
183

183

00:07:52.290  -->  00:07:53.610
cannot be said to be an array
184

184

00:07:53.610  -->  00:07:56.250
of superclass for casting decisions.
185

185

00:07:56.250  -->  00:07:58.970
And a generic type to a subclass also cannot be used
186

186

00:07:58.970  -->  00:08:02.090
in place of a generic type to its superclass.
187

187

00:08:02.090  -->  00:08:03.310
So let's end the video here.
188

188

00:08:03.310  -->  00:08:04.230
Next you'll see a short quiz
189

189

00:08:04.230  -->  00:08:06.200
and then we'll move on to section ten
190

190

00:08:06.200  -->  00:08:07.410
and that's all about programming
191

191

00:08:07.410  -->  00:08:10.713
abstractly through interfaces soon in the upcoming video.
