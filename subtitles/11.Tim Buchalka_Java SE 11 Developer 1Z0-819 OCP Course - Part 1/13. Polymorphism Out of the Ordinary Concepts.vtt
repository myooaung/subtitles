WEBVTT
1
1

00:00:05.417  -->  00:00:06.430
<v Tim>All right, so let's talk more</v>
2

2

00:00:06.430  -->  00:00:09.080
about scenarios combining overloaded
3

3

00:00:09.080  -->  00:00:10.980
and overriding methods in this out
4

4

00:00:10.980  -->  00:00:13.010
of ordinary section for polymorphism.
5

5

00:00:13.010  -->  00:00:15.040
So I'm gonna create a new class in this project.
6

6

00:00:15.040  -->  00:00:17.160
This is our polymorphism project.
7

7

00:00:17.160  -->  00:00:20.277
We're gonna call this class OverrideOverload.
8

8

00:00:20.277  -->  00:00:23.527
(typing on a keyboard)
9

9

00:00:27.430  -->  00:00:29.040
So this code consists of, firstly,
10

10

00:00:29.040  -->  00:00:31.080
a class called MostBasicClass.
11

11

00:00:31.080  -->  00:00:33.470
And it's actually got three overloaded methods,
12

12

00:00:33.470  -->  00:00:36.870
as you can see there, baseMethod.
13

13

00:00:36.870  -->  00:00:38.570
Moving on down, we've also got
14

14

00:00:38.570  -->  00:00:41.420
a class called OverrideOverload
15

15

00:00:41.420  -->  00:00:43.840
that extends the most basic class
16

16

00:00:43.840  -->  00:00:45.787
and overrides one of the overloaded methods there,
17

17

00:00:45.787  -->  00:00:48.940
as you can see, and it's also got a main method
18

18

00:00:48.940  -->  00:00:51.260
where we're going to invoke the classes
19

19

00:00:51.260  -->  00:00:53.290
and then actually call some of these methods.
20

20

00:00:53.290  -->  00:00:54.795
So let's actually run the code.
21

21

00:00:54.795  -->  00:00:57.550
(mouse clicking)
22

22

00:00:57.550  -->  00:01:00.003
All right, so there's the app at the bottom of the screen.
23

23

00:01:01.050  -->  00:01:03.500
You can see the parent overload void base method.
24

24

00:01:03.500  -->  00:01:05.730
Child overrode void base method,
25

25

00:01:05.730  -->  00:01:08.420
parent overload, that's the object, base method
26

26

00:01:08.420  -->  00:01:09.800
that had an argument of top string.
27

27

00:01:09.800  -->  00:01:11.830
And parent overload of the base method,
28

28

00:01:11.830  -->  00:01:15.083
the one that took variable arguments listed ints.
29

29

00:01:15.920  -->  00:01:17.567
We've got this, "Uh oh, error occurred
30

30

00:01:17.567  -->  00:01:22.567
"in call to oo.baseMethod(intArray) local variable i = 0.
31

31

00:01:24.420  -->  00:01:28.430
So can we overload a base method in the child class?
32

32

00:01:28.430  -->  00:01:30.520
Well, let's actually try that.
33

33

00:01:30.520  -->  00:01:32.901
So we need to add a method then we're gonna add this method
34

34

00:01:32.901  -->  00:01:35.860
to our override overload class.
35

35

00:01:35.860  -->  00:01:37.960
So I'm gonna add it above the main method.
36

36

00:01:37.960  -->  00:01:39.470
(typing on a keyboard).
37

37

00:01:39.470  -->  00:01:42.816
There it is there, now I need accept that import.
38

38

00:01:42.816  -->  00:01:43.940
(keyboard keys clicking)
39

39

00:01:43.940  -->  00:01:46.860
Other than that, the compiler isn't complaining.
40

40

00:01:46.860  -->  00:01:49.140
So let's try another before we execute the code.
41

41

00:01:49.140  -->  00:01:50.730
So I gotta paste this directly below,
42

42

00:01:50.730  -->  00:01:52.894
still in the override overload class.
43

43

00:01:52.894  -->  00:01:54.490
(keyboard keys clicking)
44

44

00:01:54.490  -->  00:01:56.530
So you can see here that IntelliJ recognised
45

45

00:01:56.530  -->  00:01:58.320
this as an overridden method because
46

46

00:01:58.320  -->  00:02:01.530
the method signature matched a method on the parent
47

47

00:02:01.530  -->  00:02:03.378
and the return type was a subtype
48

48

00:02:03.378  -->  00:02:05.140
of the parent methods return type.
49

49

00:02:05.140  -->  00:02:08.750
And that's unlike the overloaded method on line 43
50

50

00:02:08.750  -->  00:02:10.760
so it hasn't got this little symbol there,
51

51

00:02:10.760  -->  00:02:13.360
which is denoting an overridden method,
52

52

00:02:13.360  -->  00:02:15.410
let's fix that typo (keyboard keys clicking).
53

53

00:02:15.410  -->  00:02:17.630
All right, so let's now add calls to these methods
54

54

00:02:17.630  -->  00:02:20.430
into our main method of override overload.
55

55

00:02:20.430  -->  00:02:22.187
So we're gonna enter the main method there.
56

56

00:02:22.187  -->  00:02:24.920
And we really only need to add one line of output
57

57

00:02:24.920  -->  00:02:26.400
and it's one extra line there,
58

58

00:02:26.400  -->  00:02:27.699
and that's gonna be the line there.
59

59

00:02:27.699  -->  00:02:28.532
(keyboard keys clicking)
60

60

00:02:28.532  -->  00:02:32.590
Gonna add that there, oo. It's gonna be base method
61

61

00:02:32.590  -->  00:02:34.630
which we're invoking, and the one we're going
62

62

00:02:34.630  -->  00:02:37.534
to invoke is one that accepts a string array
63

63

00:02:37.534  -->  00:02:40.501
so it's gonna be new String array
64

64

00:02:40.501  -->  00:02:42.230
(typing on a keyboard)
65

65

00:02:42.230  -->  00:02:45.110
and I'm going to create a string array
66

66

00:02:45.110  -->  00:02:48.354
of only one element, contained in double quotes.
67

67

00:02:48.354  -->  00:02:49.610
(keyboard keys clicking)
68

68

00:02:49.610  -->  00:02:50.560
All right, like so.
69

69

00:02:51.550  -->  00:02:53.210
And, again, in terms of the code
70

70

00:02:53.210  -->  00:02:56.280
it's gonna be executing what we've added there.
71

71

00:02:56.280  -->  00:02:59.708
So let's try running it. (keyboard keys clicking)
72

72

00:02:59.708  -->  00:03:01.040
and you can see that output here
73

73

00:03:01.040  -->  00:03:03.900
is demonstrating both the newly overridden method,
74

74

00:03:03.900  -->  00:03:05.907
as well as the new overloaded method.
75

75

00:03:05.907  -->  00:03:07.920
All right so, continuing with our example
76

76

00:03:07.920  -->  00:03:09.473
let's override the last method.
77

77

00:03:11.090  -->  00:03:13.200
So we wanna override that method,
78

78

00:03:13.200  -->  00:03:15.580
the base method on line 23.
79

79

00:03:15.580  -->  00:03:17.280
So we wanna paste the code in now
80

80

00:03:17.280  -->  00:03:20.867
into our override overload class.
81

81

00:03:20.867  -->  00:03:23.895
Gonna paste down just before the main method.
82

82

00:03:23.895  -->  00:03:25.621
(keyboard keys clicking)
83

83

00:03:25.621  -->  00:03:28.540
and you can see here that we have a compiler error
84

84

00:03:28.540  -->  00:03:30.950
on the exception thrown by the class.
85

85

00:03:30.950  -->  00:03:33.040
It's not a proper override,
86

86

00:03:33.040  -->  00:03:35.940
but it's also not a valid overloaded method.
87

87

00:03:35.940  -->  00:03:39.850
So if I remove that (keyboard keys clicking) like so
88

88

00:03:39.850  -->  00:03:42.190
we can see now that the intArray matches
89

89

00:03:42.190  -->  00:03:45.059
the ver arg's declaration int for the override test
90

90

00:03:45.059  -->  00:03:47.030
so it will when we actually run it.
91

91

00:03:47.030  -->  00:03:49.580
And IntelliJ indicates the method's now overridden,
92

92

00:03:51.400  -->  00:03:53.730
but interestingly enough, as I scroll down there,
93

93

00:03:53.730  -->  00:03:55.430
you can see we've got a new compiler error.
94

94

00:03:55.430  -->  00:03:57.290
This is on the call to the method.
95

95

00:03:57.290  -->  00:03:59.120
The overridden method's not accepting
96

96

00:03:59.120  -->  00:04:01.020
the variable argument's parameters now
97

97

00:04:01.930  -->  00:04:04.570
so you're allowed to override a variable arg's method
98

98

00:04:04.570  -->  00:04:07.260
with an array reference but you will have to call it
99

99

00:04:07.260  -->  00:04:10.470
with an array parameter, if you do that.
100

100

00:04:10.470  -->  00:04:13.230
So to fix this, given that we have got
101

101

00:04:13.230  -->  00:04:15.400
an array defined there in line 67,
102

102

00:04:15.400  -->  00:04:18.370
I'm gonna change this and literally just pass
103

103

00:04:18.370  -->  00:04:22.170
the integer array. (keyboard keys clicking)
104

104

00:04:22.170  -->  00:04:23.300
You can see the error then disappears
105

105

00:04:23.300  -->  00:04:26.220
and we're now using that array defined on line 67.
106

106

00:04:26.220  -->  00:04:29.653
We run the code now. (mouse clicking)
107

107

00:04:30.950  -->  00:04:32.120
you can see that we're no longer getting
108

108

00:04:32.120  -->  00:04:35.910
an error when we pass an intArray to the base method method.
109

109

00:04:35.910  -->  00:04:40.160
Now, if you go back up to our methods, back up here
110

110

00:04:40.160  -->  00:04:42.100
to, this is the one, the base method defined,
111

111

00:04:42.100  -->  00:04:44.450
as you can see there on line 59.
112

112

00:04:44.450  -->  00:04:47.172
Let's make this static and see what happens.
113

113

00:04:47.172  -->  00:04:49.920
(typing on a keyboard)
114

114

00:04:49.920  -->  00:04:52.360
You can see we've immediately got a compile error.
115

115

00:04:52.360  -->  00:04:54.210
You can't override an instance method
116

116

00:04:54.210  -->  00:04:57.163
in a parent with a static method in the child.
117

117

00:04:58.250  -->  00:04:59.490
And the reverse is also true,
118

118

00:04:59.490  -->  00:05:01.480
you cannot override a static method
119

119

00:05:01.480  -->  00:05:05.020
on the parent with an instance method on the child.
120

120

00:05:05.020  -->  00:05:06.781
All right, so I'm just going to undo that change
121

121

00:05:06.781  -->  00:05:09.020
so the code will still compile.
122

122

00:05:09.020  -->  00:05:11.380
Just run it again, (mouse clicking)
123

123

00:05:11.380  -->  00:05:12.430
and we're good to go.
124

124

00:05:13.280  -->  00:05:14.290
All right, so that should cover
125

125

00:05:14.290  -->  00:05:16.240
the material for overridden methods.
126

126

00:05:16.240  -->  00:05:18.080
By now you should have a very clear picture
127

127

00:05:18.080  -->  00:05:20.097
of the difference between overloaded methods
128

128

00:05:20.097  -->  00:05:21.660
and overridden methods.
129

129

00:05:21.660  -->  00:05:23.080
Coming up next is a small quiz,
130

130

00:05:23.080  -->  00:05:25.880
and then I'll see you in the video following that one,
131

131

00:05:25.880  -->  00:05:29.023
which reviews casting, see you in the next video.
