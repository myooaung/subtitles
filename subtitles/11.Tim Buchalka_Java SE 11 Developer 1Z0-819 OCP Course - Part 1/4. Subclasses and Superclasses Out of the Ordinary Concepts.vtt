WEBVTT
1
1

00:00:04.981  -->  00:00:06.100 line:15% 
<v Tim Buchalka>In the last video,</v>
2

2

00:00:06.100  -->  00:00:08.080 line:15% 
I showed an example of an animal class
3

3

00:00:08.080  -->  00:00:10.870
with a static method and the dog class extending it
4

4

00:00:10.870  -->  00:00:13.920
and overriding it while hiding the parent's version.
5

5

00:00:13.920  -->  00:00:15.410
So let's now take a closer look at
6

6

00:00:15.410  -->  00:00:17.630
inherited static variables.
7

7

00:00:17.630  -->  00:00:19.240
So we need to create another class
8

8

00:00:19.240  -->  00:00:20.840
here in the Inheritance project.
9

9

00:00:23.170  -->  00:00:26.460
I'm gonna call this one company dot OnBoardBranch.
10

10

00:00:33.560  -->  00:00:35.650
Okay, so there's the code for that.
11

11

00:00:35.650  -->  00:00:38.430
Now this code actually contains a total of four classes.
12

12

00:00:38.430  -->  00:00:40.320
Firstly, we've got an employee class there
13

13

00:00:40.320  -->  00:00:42.142
that represents an employee of a company,
14

14

00:00:42.142  -->  00:00:43.800
and it's just got two attributes,
15

15

00:00:43.800  -->  00:00:45.140
namely name and type there.
16

16

00:00:45.140  -->  00:00:47.470
And you can see I've also got a constructor.
17

17

00:00:47.470  -->  00:00:49.420
Moving down, we've got a company class
18

18

00:00:49.420  -->  00:00:52.750
that represents a company which has two static fields,
19

19

00:00:52.750  -->  00:00:55.050
branch count and employee count,
20

20

00:00:55.050  -->  00:00:58.428
and two public methods, add employee and add branch.
21

21

00:00:58.428  -->  00:01:01.030
Moving on down, our third class is branch,
22

22

00:01:01.030  -->  00:01:04.090
and that extends company and adds to it a branch name.
23

23

00:01:04.090  -->  00:01:05.880
You can see there's been a constructor set up as well,
24

24

00:01:05.880  -->  00:01:08.550
and then the fourth class, onBoardBranch.
25

25

00:01:08.550  -->  00:01:09.760
Well, that contains the main method,
26

26

00:01:09.760  -->  00:01:11.000
which you can see there is creating
27

27

00:01:11.000  -->  00:01:12.420
a new instance of branch,
28

28

00:01:12.420  -->  00:01:13.927
creates two employee instances,
29

29

00:01:13.927  -->  00:01:16.237
creating also a company instance,
30

30

00:01:16.237  -->  00:01:18.920
then it's executing the add branch company's
31

31

00:01:18.920  -->  00:01:20.420
method of the branch instance,
32

32

00:01:20.420  -->  00:01:23.670
and add employee on the two employee instances,
33

33

00:01:23.670  -->  00:01:27.710
and then finally it's printing out the static counters.
34

34

00:01:27.710  -->  00:01:28.610
So let's run this.
35

35

00:01:31.510  -->  00:01:32.880
Right, so, as you can see,
36

36

00:01:32.880  -->  00:01:34.120
we've got number of branches, one,
37

37

00:01:34.120  -->  00:01:36.150
number of employees equals two.
38

38

00:01:36.150  -->  00:01:38.250
I think you'd agree that's probably pretty straightforward,
39

39

00:01:38.250  -->  00:01:40.739
so we've got one quote unquote bucket to maintain,
40

40

00:01:40.739  -->  00:01:43.010
an employee count and a branch count,
41

41

00:01:43.010  -->  00:01:44.990
because they've been defined as static.
42

42

00:01:44.990  -->  00:01:46.010
But what happens if we
43

43

00:01:46.010  -->  00:01:48.551
access these static variables from the subclass?
44

44

00:01:48.551  -->  00:01:50.070
So I'm gonna add some code down here,
45

45

00:01:50.070  -->  00:01:51.730
right down at the bottom of the main method,
46

46

00:01:51.730  -->  00:01:52.883
after the printouts.
47

47

00:01:54.430  -->  00:01:55.945
You see that I'm trying to do that now
48

48

00:01:55.945  -->  00:01:58.100
by accessing the static variables from the subclass.
49

49

00:01:58.100  -->  00:01:59.050
Let's run the code.
50

50

00:02:02.750  -->  00:02:04.255
So what does this actually mean?
51

51

00:02:04.255  -->  00:02:06.070
Well it's the static variable like
52

52

00:02:06.070  -->  00:02:07.800
an instance variable given a placeholder
53

53

00:02:07.800  -->  00:02:09.400
for data in the branch class,
54

54

00:02:09.400  -->  00:02:11.997
why are the values the same if this is the case?
55

55

00:02:11.997  -->  00:02:15.140
Well, a good way to shed some light on this question
56

56

00:02:15.140  -->  00:02:18.140
would be to add a static initializer to the company class,
57

57

00:02:18.140  -->  00:02:19.280
so let's go ahead and do that.
58

58

00:02:19.280  -->  00:02:21.233
Go up to our company class.
59

59

00:02:22.581  -->  00:02:23.990
Gonna add it right down here,
60

60

00:02:23.990  -->  00:02:26.536
just before the end of the class definition.
61

61

00:02:26.536  -->  00:02:29.960
And you can see that I've set branch count to ten there,
62

62

00:02:29.960  -->  00:02:32.460
and also put it out, some text
63

63

00:02:32.460  -->  00:02:34.793
so we know that it's been executed.
64

64

00:02:34.793  -->  00:02:36.410
So that's for the company class,
65

65

00:02:36.410  -->  00:02:38.150
but let's also do the same thing,
66

66

00:02:38.150  -->  00:02:40.625
a static initializer, to the branch class.
67

67

00:02:40.625  -->  00:02:42.290
I'm gonna go and do that as well,
68

68

00:02:42.290  -->  00:02:43.680
and I'll add this, down at the bottom,
69

69

00:02:43.680  -->  00:02:45.420
below the constructor.
70

70

00:02:45.420  -->  00:02:47.150
Similar thing there, we're printing out some text,
71

71

00:02:47.150  -->  00:02:50.680
but we're also setting the employee count to 200 there.
72

72

00:02:50.680  -->  00:02:51.830
So let's run this code.
73

73

00:02:55.280  -->  00:02:57.520
So looking at the output, this seems to confirm that
74

74

00:02:57.520  -->  00:03:00.816
company is the class where these variables reside.
75

75

00:03:00.816  -->  00:03:02.370
You can see that based on
76

76

00:03:02.370  -->  00:03:03.800
the output we've now got
77

77

00:03:03.800  -->  00:03:05.950
and the values that both the branches
78

78

00:03:05.950  -->  00:03:08.530
and employees is now set to.
79

79

00:03:08.530  -->  00:03:09.750
Right, next what we're gonna do is
80

80

00:03:09.750  -->  00:03:11.300
we're gonna add static variables
81

81

00:03:11.300  -->  00:03:12.951
with the same name to branch,
82

82

00:03:12.951  -->  00:03:15.100
to the branch class, and see what happens.
83

83

00:03:15.100  -->  00:03:17.060
So let's go ahead and do that.
84

84

00:03:17.060  -->  00:03:19.350
Go back up to the branch, to the top of the branch class.
85

85

00:03:19.350  -->  00:03:21.232
We're gonna paste in.
86

86

00:03:21.232  -->  00:03:23.984
So, you can see we've got a static int branch count,
87

87

00:03:23.984  -->  00:03:27.311
static int employee count, no branch class now.
88

88

00:03:27.311  -->  00:03:28.823
We execute the code.
89

89

00:03:31.170  -->  00:03:32.780
And you can see now that we've got different results,
90

90

00:03:32.780  -->  00:03:33.950
number of branches is 11,
91

91

00:03:33.950  -->  00:03:36.320
number of employees two, but call from branch,
92

92

00:03:36.320  -->  00:03:40.050
branches equals zero, and number of employees is 200.
93

93

00:03:40.050  -->  00:03:41.140
We've still got our company
94

94

00:03:41.140  -->  00:03:43.794
and branch static initializers being executed there.
95

95

00:03:43.794  -->  00:03:45.410
So this demonstrates that we're now
96

96

00:03:45.410  -->  00:03:48.440
keeping different counts in the static variables
97

97

00:03:48.440  -->  00:03:51.470
and the branch must now be keeping its own counts.
98

98

00:03:51.470  -->  00:03:53.100
But adding an employee to branch
99

99

00:03:53.100  -->  00:03:56.043
doesn't actually increment the employee count on branch.
100

100

00:03:56.043  -->  00:03:58.410
Now we could actually modify this behaviour
101

101

00:03:58.410  -->  00:04:00.220
by adding a method to branch
102

102

00:04:00.220  -->  00:04:02.738
which overrides the method in company.
103

103

00:04:02.738  -->  00:04:03.580
So let's do that.
104

104

00:04:03.580  -->  00:04:06.070
We're gonna go back to branch again.
105

105

00:04:06.070  -->  00:04:07.010
You've still got it on screen.
106

106

00:04:07.010  -->  00:04:10.150
I'm gonna put that below the static initializer.
107

107

00:04:10.150  -->  00:04:12.120
So there's our method, add employee,
108

108

00:04:12.120  -->  00:04:13.890
we're overriding the method now
109

109

00:04:13.890  -->  00:04:16.349
and we're setting the employee count, as you can see.
110

110

00:04:16.349  -->  00:04:17.940
So if we run the code...
111

111

00:04:21.960  -->  00:04:23.110
So you can see now that
112

112

00:04:23.110  -->  00:04:24.970
we're now incrementing the employee count
113

113

00:04:24.970  -->  00:04:26.810
on the branch class with this change.
114

114

00:04:26.810  -->  00:04:29.340
Now we've actually overridden that method.
115

115

00:04:29.340  -->  00:04:31.330
So again, the employee count on the branch class
116

116

00:04:31.330  -->  00:04:34.860
has been updated as a result of the overridden method
117

117

00:04:34.860  -->  00:04:37.990
add employee that we've just added to the branch class.
118

118

00:04:37.990  -->  00:04:39.610
Although all the functionality for
119

119

00:04:39.610  -->  00:04:42.034
accessing static fields is inherited by a class,
120

120

00:04:42.034  -->  00:04:43.800
the instance of a class doesn't
121

121

00:04:43.800  -->  00:04:45.370
actually get its own copy,
122

122

00:04:45.370  -->  00:04:47.020
in this case its own counters,
123

123

00:04:47.020  -->  00:04:48.649
of the static field variables.
124

124

00:04:48.649  -->  00:04:50.670
So let's explore now what happens when
125

125

00:04:50.670  -->  00:04:53.150
we override a parent's static attribute
126

126

00:04:53.150  -->  00:04:57.060
with a non-static attribute of the same name on the child.
127

127

00:04:57.060  -->  00:05:00.247
So what we wanna do is go back to our branch class.
128

128

00:05:00.247  -->  00:05:01.520
At the moment you can see
129

129

00:05:01.520  -->  00:05:04.430
I'm on 44 and 45, we've got static definitions.
130

130

00:05:04.430  -->  00:05:06.580
Let's remove the static from both of those.
131

131

00:05:09.400  -->  00:05:10.630
We're also going to change
132

132

00:05:10.630  -->  00:05:14.320
the static initalizer, so that it's no longer static.
133

133

00:05:14.320  -->  00:05:16.770
And obviously you can see we've got an error there.
134

134

00:05:16.770  -->  00:05:17.840
And the other thing we'll need to do,
135

135

00:05:17.840  -->  00:05:19.090
now that we're not using statics,
136

136

00:05:19.090  -->  00:05:20.860
is we'll need to make a change down here.
137

137

00:05:20.860  -->  00:05:22.313
We've got branch dot branch count.
138

138

00:05:22.313  -->  00:05:23.650
We'll need to change that
139

139

00:05:23.650  -->  00:05:25.440
to use the instance that we defined,
140

140

00:05:25.440  -->  00:05:28.420
in this case b, which we defined on line 65.
141

141

00:05:28.420  -->  00:05:31.060
So I've gotta change branch dot branch count
142

142

00:05:31.060  -->  00:05:32.754
to b dot branch count.
143

143

00:05:32.754  -->  00:05:34.113
Do that for both.
144

144

00:05:36.399  -->  00:05:38.170
You see now that I've done that,
145

145

00:05:38.170  -->  00:05:40.178
it's perfectly fine and the code compiles.
146

146

00:05:40.178  -->  00:05:42.670
That verifies that you can use the same attribute name
147

147

00:05:42.670  -->  00:05:44.924
or type as a parent's static attribute.
148

148

00:05:44.924  -->  00:05:46.383
And we'll just run this.
149

149

00:05:48.850  -->  00:05:50.890
And you can see the code works as before.
150

150

00:05:50.890  -->  00:05:52.830
So that's fine, verifying now that
151

151

00:05:52.830  -->  00:05:54.630
we can use the same attribute name type
152

152

00:05:54.630  -->  00:05:56.840
as the parent's static attribute, as I mentioned.
153

153

00:05:56.840  -->  00:05:58.531
But is this true of static methods?
154

154

00:05:58.531  -->  00:06:00.192
So let's change the company class's
155

155

00:06:00.192  -->  00:06:02.200
add employee method to be static.
156

156

00:06:02.200  -->  00:06:04.853
So we'll come back to the top now, for our company.
157

157

00:06:04.853  -->  00:06:06.490
So at the moment you can see
158

158

00:06:06.490  -->  00:06:08.550
we've got add employee defined on line 27.
159

159

00:06:08.550  -->  00:06:09.940
It's not a static method.
160

160

00:06:09.940  -->  00:06:11.623
Let's in fact make that static.
161

161

00:06:13.965  -->  00:06:16.570
You can see straight away that's introduced a compile error.
162

162

00:06:16.570  -->  00:06:17.820
We'll go down and check that out.
163

163

00:06:17.820  -->  00:06:19.090
And the error's on the
164

164

00:06:19.090  -->  00:06:21.627
add employee method of the branch class.
165

165

00:06:21.627  -->  00:06:25.170
So what you can't do is have a method on a child class
166

166

00:06:25.170  -->  00:06:27.860
that overrides a parent's static method unless
167

167

00:06:27.860  -->  00:06:29.683
the child's method is also static.
168

168

00:06:29.683  -->  00:06:31.540
Now I'm gonna talk a lot more about
169

169

00:06:31.540  -->  00:06:33.777
overriding methods in a future video.
170

170

00:06:33.777  -->  00:06:35.460
I'm just gonna undo this last change
171

171

00:06:35.460  -->  00:06:38.283
so the code compiles and still works.
172

172

00:06:41.430  -->  00:06:43.600
Right, just to make sure there's no errors.
173

173

00:06:43.600  -->  00:06:45.240
We're good to go.
174

174

00:06:45.240  -->  00:06:47.270
All right, so I'm gonna finish the video here now.
175

175

00:06:47.270  -->  00:06:48.990
Coming up is a quiz, and then after that
176

176

00:06:48.990  -->  00:06:50.510 line:15% 
I'm gonna see you in a video where
177

177

00:06:50.510  -->  00:06:51.480 line:15% 
we're gonna start talking about
178

178

00:06:51.480  -->  00:06:54.840 line:15% 
abstract classes and the role they play in inheritance.
179

179

00:06:54.840  -->  00:06:56.140 line:15% 
See you in the next video.
