WEBVTT
1
1

00:00:05.190  -->  00:00:06.770
<v ->So as I've stated previously,</v>
2

2

00:00:06.770  -->  00:00:09.610
a two dimensional array in Java is an array
3

3

00:00:09.610  -->  00:00:11.870
which is referencing array objects.
4

4

00:00:11.870  -->  00:00:14.290
So let's explore this with some sample code.
5

5

00:00:14.290  -->  00:00:15.950
So we need to create a class called a
6

6

00:00:15.950  -->  00:00:18.310
Two Dimensional Array in our Arrays Project
7

7

00:00:18.310  -->  00:00:19.410
we've been working on.
8

8

00:00:29.450  -->  00:00:30.320
Right, so in this class,
9

9

00:00:30.320  -->  00:00:32.500
you can see that I've created two methods.
10

10

00:00:32.500  -->  00:00:35.080
We've got printArray in the print row.
11

11

00:00:35.080  -->  00:00:36.610
Wants to print the two dimensional array
12

12

00:00:36.610  -->  00:00:38.940
and want to print just rows in the array.
13

13

00:00:38.940  -->  00:00:41.680
So each prints that reference of the array first.
14

14

00:00:41.680  -->  00:00:43.670
And looking down at the main method.
15

15

00:00:43.670  -->  00:00:45.150
You can see that we're creating an array of
16

16

00:00:45.150  -->  00:00:48.050
two rows with 10 columns of data.
17

17

00:00:48.050  -->  00:00:49.250
So if you run this code,
18

18

00:00:53.080  -->  00:00:54.590
you can see that all int values in the
19

19

00:00:54.590  -->  00:00:58.390
two dimensional array were initialised to zero.
20

20

00:00:58.390  -->  00:01:01.180
All right, now let's look at a non-uniform array.
21

21

00:01:01.180  -->  00:01:03.920
And that's just really an array of array objects.
22

22

00:01:03.920  -->  00:01:06.253
All right, paste this set of code.
23

23

00:01:07.860  -->  00:01:09.690
And then formatting the way I have here
24

24

00:01:09.690  -->  00:01:10.710
does help readability,
25

25

00:01:10.710  -->  00:01:11.940
so it's something you might want to consider.
26

26

00:01:11.940  -->  00:01:12.983
So we run this now.
27

27

00:01:16.746  -->  00:01:18.170
And as you can see, the output for this segment
28

28

00:01:18.170  -->  00:01:20.100
looks very much like the initialization code
29

29

00:01:20.100  -->  00:01:21.890
and I think that's a good thing.
30

30

00:01:21.890  -->  00:01:24.340
All right, so you can clone a two dimensional array
31

31

00:01:24.340  -->  00:01:28.100
but it only clones the first dimension's array reference.
32

32

00:01:28.100  -->  00:01:29.423
So let's add some code.
33

33

00:01:31.670  -->  00:01:32.920
Okay so there's the code.
34

34

00:01:34.020  -->  00:01:36.660
You can see that we're using the clone method there.
35

35

00:01:36.660  -->  00:01:38.250
And I think that it is a shallow clone
36

36

00:01:38.250  -->  00:01:40.060
as I mentioned, it only actually copies
37

37

00:01:40.060  -->  00:01:41.800
the first dimension's array reference.
38

38

00:01:41.800  -->  00:01:43.150
So let's actually run this.
39

39

00:01:49.110  -->  00:01:50.850
So the output for this segment shows that the
40

40

00:01:50.850  -->  00:01:52.700
outer array of the cloned array
41

41

00:01:52.700  -->  00:01:54.630
and copied array have new addresses.
42

42

00:01:54.630  -->  00:01:56.700
But the elements in those arrays are referencing
43

43

00:01:56.700  -->  00:01:58.923
the same addresses as the copied array.
44

44

00:02:01.660  -->  00:02:02.630
And as mentioned previously,
45

45

00:02:02.630  -->  00:02:04.670
this is called a shallow copy.
46

46

00:02:04.670  -->  00:02:06.840
But there is a way to do a deep copy.
47

47

00:02:06.840  -->  00:02:08.925
So we're gonna paste some code
48

48

00:02:08.925  -->  00:02:09.783
and we'll do that.
49

49

00:02:10.890  -->  00:02:12.580
Okay, so there's the code.
50

50

00:02:12.580  -->  00:02:14.410
You can see specifically the four loop
51

51

00:02:14.410  -->  00:02:15.850
and standing on line 67 is where
52

52

00:02:15.850  -->  00:02:17.400
we're taking a shallow copy
53

53

00:02:17.400  -->  00:02:19.070
and making it deep by doing it manually
54

54

00:02:19.070  -->  00:02:20.230
by actually going we're re-iterating
55

55

00:02:20.230  -->  00:02:22.610
through the array element by element.
56

56

00:02:22.610  -->  00:02:24.210
So we can actually run this now.
57

57

00:02:29.818  -->  00:02:31.300
And you can see the output at the
58

58

00:02:31.300  -->  00:02:32.780
bottom of the screen there.
59

59

00:02:32.780  -->  00:02:35.920
Now note that row three where we made our change
60

60

00:02:35.920  -->  00:02:37.560
is a new array reference
61

61

00:02:37.560  -->  00:02:40.000
and a change to the original array element
62

62

00:02:40.000  -->  00:02:42.880
did not get propagated to the cloned array.
63

63

00:02:42.880  -->  00:02:44.670
And that's because we manually did this.
64

64

00:02:44.670  -->  00:02:46.270
We actually forced a deep clone.
65

65

00:02:48.370  -->  00:02:49.370
All right, so in this video,
66

66

00:02:49.370  -->  00:02:51.287
I've shown you how to create a
67

67

00:02:51.287  -->  00:02:52.120
two dimensional array in Java
68

68

00:02:52.120  -->  00:02:53.727
and how to navigate through the
69

69

00:02:53.727  -->  00:02:54.630
dimensions using for loops.
70

70

00:02:54.630  -->  00:02:56.350
I've also demonstrated how to clone a
71

71

00:02:56.350  -->  00:02:57.770
two dimensional array
72

72

00:02:57.770  -->  00:02:59.130
and pointed out that clones
73

73

00:02:59.130  -->  00:03:00.960
and copies are shallow.
74

74

00:03:00.960  -->  00:03:02.010
So let's proceed now to the
75

75

00:03:02.010  -->  00:03:03.770
out of ordinary video for arrays
76

76

00:03:03.770  -->  00:03:06.090
and explore items that may not have been obvious
77

77

00:03:06.090  -->  00:03:08.420
on our first pass through arrays.
78

78

00:03:08.420  -->  00:03:09.720
See you in the next video.
