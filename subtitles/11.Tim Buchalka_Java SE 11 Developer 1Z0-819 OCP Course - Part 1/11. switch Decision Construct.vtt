WEBVTT
1
1

00:00:05.119  -->  00:00:05.952
<v Tim>All right.</v>
2

2

00:00:05.952  -->  00:00:07.610
The other decision construct in Java
3

3

00:00:07.610  -->  00:00:08.780
is the switch statement.
4

4

00:00:08.780  -->  00:00:10.470
We're gonna talk about that in this video.
5

5

00:00:10.470  -->  00:00:12.170
So, the switch statement transfers control
6

6

00:00:12.170  -->  00:00:13.440
to one of several statements
7

7

00:00:13.440  -->  00:00:15.613
depending on the value of an expression.
8

8

00:00:16.470  -->  00:00:17.440
Now some things to remember
9

9

00:00:17.440  -->  00:00:19.190
about a switch statement in Java.
10

10

00:00:19.190  -->  00:00:21.880
A switch statement can only work with byte, short,
11

11

00:00:21.880  -->  00:00:24.050
char, and int primitive data types.
12

12

00:00:24.050  -->  00:00:26.750
It also works with enumerated types, the string class,
13

13

00:00:26.750  -->  00:00:29.310
and the classes that wrap certain primitive types:
14

14

00:00:29.310  -->  00:00:31.960
Character, Byte, Short, and Integer.
15

15

00:00:31.960  -->  00:00:34.730
The default case label only matches an argument
16

16

00:00:34.730  -->  00:00:38.490
if all the other labels do not regardless of its position.
17

17

00:00:38.490  -->  00:00:40.540
The default label doesn't have to be the last label
18

18

00:00:40.540  -->  00:00:42.330
in the case label list.
19

19

00:00:42.330  -->  00:00:45.430
You can only have one default case label and block.
20

20

00:00:45.430  -->  00:00:48.123
You don't need any case labels in the switch block.
21

21

00:00:49.010  -->  00:00:50.590
The break statement is optional.
22

22

00:00:50.590  -->  00:00:51.875
However, if it's omitted,
23

23

00:00:51.875  -->  00:00:54.420
you are creating a fall-through situation.
24

24

00:00:54.420  -->  00:00:57.080
The default case label and block are optional.
25

25

00:00:57.080  -->  00:00:59.040
Case labels must be the same data type
26

26

00:00:59.040  -->  00:01:01.453
as the result of the switch expression.
27

27

00:01:02.753  -->  00:01:03.586
All right.
28

28

00:01:03.586  -->  00:01:05.290
Let's run through several examples of switch statements,
29

29

00:01:05.290  -->  00:01:08.160
which are valid but perhaps not common.
30

30

00:01:08.160  -->  00:01:09.870
This first example I'm about to paste in
31

31

00:01:09.870  -->  00:01:11.430
will demonstrate something called fall through,
32

32

00:01:11.430  -->  00:01:12.900
which you're probably aware of,
33

33

00:01:12.900  -->  00:01:15.120
and shows what happens when your default label
34

34

00:01:15.120  -->  00:01:17.890
is not the last case label in the statement.
35

35

00:01:17.890  -->  00:01:19.450
So, we're still under Decisions project
36

36

00:01:19.450  -->  00:01:21.550
we started on in the last video.
37

37

00:01:21.550  -->  00:01:22.383
I'm gonna create
38

38

00:01:22.383  -->  00:01:25.260
a new class called SwitchExamplesFallThru.
39

39

00:01:32.585  -->  00:01:33.418
'Kay.
40

40

00:01:33.418  -->  00:01:34.251
There's the code.
41

41

00:01:35.380  -->  00:01:36.900
Again, we're demonstrating fall through
42

42

00:01:36.900  -->  00:01:40.210
in a default label in a spot other than the last spot.
43

43

00:01:40.210  -->  00:01:42.620
So, the code wraps a switch statement in a for loop
44

44

00:01:42.620  -->  00:01:45.760
that lets us test all of the switch statement's labels.
45

45

00:01:45.760  -->  00:01:47.690
We have a string array that contains string values
46

46

00:01:47.690  -->  00:01:49.470
that will match the switch labels.
47

47

00:01:49.470  -->  00:01:52.180
We loop through the array and execute the switch statement.
48

48

00:01:52.180  -->  00:01:53.020
Now the switch statement,
49

49

00:01:53.020  -->  00:01:56.260
although perhaps not logically written here, is valid.
50

50

00:01:56.260  -->  00:01:57.360
Let's actually run it.
51

51

00:02:01.725  -->  00:02:04.530
Note that A fell through to every label below
52

52

00:02:04.530  -->  00:02:07.040
because none of the labels has a break.
53

53

00:02:07.040  -->  00:02:09.220
Now this is true for all the iterations.
54

54

00:02:09.220  -->  00:02:10.569
When the variable is D,
55

55

00:02:10.569  -->  00:02:12.570
then the starting point is the default label
56

56

00:02:12.570  -->  00:02:14.300
because there's no D label.
57

57

00:02:14.300  -->  00:02:16.790
The default label is executing in place,
58

58

00:02:16.790  -->  00:02:19.170
meaning because it was declared prior to the labels
59

59

00:02:19.170  -->  00:02:21.240
and none of the blocks contain a break,
60

60

00:02:21.240  -->  00:02:22.960
executing the default label block
61

61

00:02:22.960  -->  00:02:25.710
also executes all blocks below it.
62

62

00:02:25.710  -->  00:02:26.543
All right.
63

63

00:02:26.543  -->  00:02:28.130
Next, I wanna show you a switch statement
64

64

00:02:28.130  -->  00:02:30.460
with an expression in the case label.
65

65

00:02:30.460  -->  00:02:32.193
Now for that, we need a new class,
66

66

00:02:34.949  -->  00:02:37.282
SwitchExampleCodeExpression.
67

67

00:02:42.980  -->  00:02:44.780
What I think is interesting about this switch statement
68

68

00:02:44.780  -->  00:02:47.690
is the label which concatenates one and two.
69

69

00:02:47.690  -->  00:02:49.790
Expressions are allowed in case labels
70

70

00:02:49.790  -->  00:02:53.720
only if the compiler can evaluate the compile time.
71

71

00:02:53.720  -->  00:02:56.500
In this case, one and two are string literals,
72

72

00:02:56.500  -->  00:02:57.840
so the compiler can introduce
73

73

00:02:57.840  -->  00:03:01.910
that the resulting label will be string 12.
74

74

00:03:01.910  -->  00:03:03.240
If you replace one of the literals
75

75

00:03:03.240  -->  00:03:05.340
in this case label expression with a string variable,
76

76

00:03:05.340  -->  00:03:08.840
for example, you'd find that the code wouldn't compile.
77

77

00:03:08.840  -->  00:03:10.040
Let's actually run this.
78

78

00:03:11.980  -->  00:03:14.840
You can see we've got the value output is 12.
79

79

00:03:14.840  -->  00:03:17.470
Moving on now, our next switch statement demonstrates
80

80

00:03:17.470  -->  00:03:20.660
a switch statement with an expression in a switch condition.
81

81

00:03:20.660  -->  00:03:22.210
We need another class for this.
82

82

00:03:24.610  -->  00:03:28.283
I'll call this one SwitchExampleSwitchExpression.
83

83

00:03:33.054  -->  00:03:36.280
This code wraps a switch statement in a for loop
84

84

00:03:36.280  -->  00:03:38.150
to test multiple labels.
85

85

00:03:38.150  -->  00:03:40.400
Look at the switch expression itself.
86

86

00:03:40.400  -->  00:03:41.880
It's fine to put an expression
87

87

00:03:41.880  -->  00:03:43.990
as you can see me doing on line 16.
88

88

00:03:43.990  -->  00:03:47.340
Note that whatever type the switch expression evaluates to
89

89

00:03:47.340  -->  00:03:50.610
must also be the types of the case labels.
90

90

00:03:50.610  -->  00:03:52.020
And also note the parentheses
91

91

00:03:52.020  -->  00:03:54.870
around the case labels are optional.
92

92

00:03:54.870  -->  00:03:56.020
Now let's run the code.
93

93

00:03:59.860  -->  00:04:01.060
You can see the results.
94

94

00:04:02.890  -->  00:04:03.723
All right.
95

95

00:04:03.723  -->  00:04:06.450
Finally now let's try a switch statement with an enumeration
96

96

00:04:06.450  -->  00:04:08.750
remembering that valid data types for the switch
97

97

00:04:08.750  -->  00:04:12.200
are the byte, short, char, and int primitive data types
98

98

00:04:12.200  -->  00:04:14.850
and their upper classes, enumerated types,
99

99

00:04:14.850  -->  00:04:16.400
and string values.
100

100

00:04:16.400  -->  00:04:18.433
Let's create yet another class,
101

101

00:04:20.952  -->  00:04:22.452
SwitchExampleEnum.
102

102

00:04:29.260  -->  00:04:31.330
Looking at the code, you can see I've defined an enum
103

103

00:04:31.330  -->  00:04:32.770
on line 10.
104

104

00:04:32.770  -->  00:04:34.800
Then we've got a for loop again.
105

105

00:04:34.800  -->  00:04:36.660
Basically this code is using enumerated types,
106

106

00:04:36.660  -->  00:04:39.510
looping through the enum values to test all labels.
107

107

00:04:39.510  -->  00:04:42.100
We're also defining labels to allow multiple labels
108

108

00:04:42.100  -->  00:04:44.010
to execute the same set of code
109

109

00:04:44.010  -->  00:04:45.800
by equipping them strategically
110

110

00:04:45.800  -->  00:04:48.423
and using the fall through feature of a switch statement.
111

111

00:04:49.292  -->  00:04:50.125
All right.
112

112

00:04:50.125  -->  00:04:50.958
Let's run the code.
113

113

00:04:52.580  -->  00:04:53.530
There's the output.
114

114

00:04:55.510  -->  00:04:57.270
Again, to clarify, the switch variable
115

115

00:04:57.270  -->  00:04:59.810
cannot be a long, double, float, or boolean,
116

116

00:04:59.810  -->  00:05:02.650
or any object other than the specified wrappers,
117

117

00:05:02.650  -->  00:05:05.350
enum, or a string that I've mentioned in this video.
118

118

00:05:05.350  -->  00:05:07.070
If you see a switch statement on the exam
119

119

00:05:07.070  -->  00:05:09.614
using one of these types without a specific cast,
120

120

00:05:09.614  -->  00:05:11.160
consider it gift.
121

121

00:05:11.160  -->  00:05:13.090
Pick compiler error and move on.
122

122

00:05:13.090  -->  00:05:15.160
So, this video and the previous one
123

123

00:05:15.160  -->  00:05:17.200
covered the most basic decision constructs
124

124

00:05:17.200  -->  00:05:20.320
for the switch statements and the if/else and their usages.
125

125

00:05:20.320  -->  00:05:21.610
The next video, I'm gonna point out
126

126

00:05:21.610  -->  00:05:23.861
some less than usual examples.
127

127

00:05:23.861  -->  00:05:25.443
Let's move on to that video.
