WEBVTT
1
1

00:00:05.171  -->  00:00:06.004
<v Tim>All right.</v>
2

2

00:00:06.004  -->  00:00:07.400
So, we're gonna start off by talking about
3

3

00:00:07.400  -->  00:00:10.440
manipulating data using the StringBuilder.
4

4

00:00:10.440  -->  00:00:12.010
Now we've already previously discussed
5

5

00:00:12.010  -->  00:00:14.700
that strings are immutable in Java,
6

6

00:00:14.700  -->  00:00:16.760
but StringBuilder objects are not.
7

7

00:00:16.760  -->  00:00:18.260
Strings should always be used
8

8

00:00:18.260  -->  00:00:20.210
unless the StringBuilder offers an advantage
9

9

00:00:20.210  -->  00:00:22.990
in terms of simpler code or better performance.
10

10

00:00:22.990  -->  00:00:24.493
For example, if you need to concatenate
11

11

00:00:24.493  -->  00:00:27.640
a large number of strings such as a temporary error message
12

12

00:00:27.640  -->  00:00:30.150
or dynamic XML or HTML,
13

13

00:00:30.150  -->  00:00:33.330
then appending to a StringBuilder object is more efficient,
14

14

00:00:33.330  -->  00:00:35.350
and that's of course because, say, new strings
15

15

00:00:35.350  -->  00:00:37.680
have been created time and time again.
16

16

00:00:37.680  -->  00:00:39.530
Each StringBuilder has a capacity,
17

17

00:00:39.530  -->  00:00:42.620
which is the number of character spaces allocated to it.
18

18

00:00:42.620  -->  00:00:45.680
Capacity is automatically extended as additions are made
19

19

00:00:45.680  -->  00:00:47.080
to the StringBuilder object.
20

20

00:00:48.078  -->  00:00:50.460
Now, in terms of creating StringBuilder objects,
21

21

00:00:50.460  -->  00:00:52.750
you can use one of the following constructors.
22

22

00:00:52.750  -->  00:00:56.300
Firstly, the default or empty constructor, StringBuilder()
23

23

00:00:56.300  -->  00:00:59.670
that builds an empty StringBuilder with a capacity of 16,
24

24

00:00:59.670  -->  00:01:01.830
in other words, 16 empty elements.
25

25

00:01:01.830  -->  00:01:05.550
So, the capacity in that scenario is 16, no surprises here.
26

26

00:01:05.550  -->  00:01:09.240
Next, if you use a constructor that accepts a CharSequence,
27

27

00:01:09.240  -->  00:01:11.250
then the StringBuilder object with the same characters
28

28

00:01:11.250  -->  00:01:14.240
as the specified CharSequence plus an extra 16
29

29

00:01:14.240  -->  00:01:16.890
empty trailing elements would be created.
30

30

00:01:16.890  -->  00:01:20.550
So, the capacity therefore is cs.length() plus 16.
31

31

00:01:20.550  -->  00:01:21.383
All right.
32

32

00:01:21.383  -->  00:01:22.610
Next to that, there's another constructor
33

33

00:01:22.610  -->  00:01:25.060
that allows an int to be passed to it,
34

34

00:01:25.060  -->  00:01:26.450
and that's the capacity.
35

35

00:01:26.450  -->  00:01:28.160
So, basically what happens in that scenario
36

36

00:01:28.160  -->  00:01:29.690
is that an empty StringBuilder
37

37

00:01:29.690  -->  00:01:32.380
with the specified initial capacity is actually created.
38

38

00:01:32.380  -->  00:01:34.650
So, the capacity is obviously is whatever was passed
39

39

00:01:34.650  -->  00:01:36.390
to that particular constructor.
40

40

00:01:36.390  -->  00:01:38.350
And lastly, a string can also be passed
41

41

00:01:38.350  -->  00:01:40.430
as a constructor to StringBuilder.
42

42

00:01:40.430  -->  00:01:42.210
And in that scenario, the StringBuilder object
43

43

00:01:42.210  -->  00:01:45.030
with the same characters as the specified string
44

44

00:01:45.030  -->  00:01:48.800
plus an extra 16 empty trailing elements will be created.
45

45

00:01:48.800  -->  00:01:50.260
So, it can therefore determine the capacity
46

46

00:01:50.260  -->  00:01:52.710
by s.length() plus 16.
47

47

00:01:52.710  -->  00:01:54.460
All right, so that's enough in the theory side of it.
48

48

00:01:54.460  -->  00:01:56.530
Let's explore constructors and capability
49

49

00:01:56.530  -->  00:01:57.980
with a bit of code.
50

50

00:01:57.980  -->  00:01:59.810
So, I've created a new project
51

51

00:01:59.810  -->  00:02:02.130
for this section of the course called StringBuilder.
52

52

00:02:02.130  -->  00:02:04.360
Let's create our first class.
53

53

00:02:04.360  -->  00:02:06.003
We'll call it StringBuilderCreation.
54

54

00:02:15.400  -->  00:02:16.233
All right.
55

55

00:02:16.233  -->  00:02:18.890
There's some initial code that I pasted in there.
56

56

00:02:18.890  -->  00:02:19.723
If you go through and have a look there
57

57

00:02:19.723  -->  00:02:22.580
you can see that we're creating a StringBuilder
58

58

00:02:22.580  -->  00:02:25.730
based on the various constructors that I talked about.
59

59

00:02:25.730  -->  00:02:27.130
So, let's actually run that.
60

60

00:02:30.370  -->  00:02:32.212
All right, so there's the output.
61

61

00:02:32.212  -->  00:02:34.970
And it's all fairly straightforward as you can see there.
62

62

00:02:34.970  -->  00:02:36.620
So, that's StringBuilderCreation.
63

63

00:02:37.730  -->  00:02:39.410
Now, the StringBuilder class doesn't have
64

64

00:02:39.410  -->  00:02:42.150
as many comparative methods as the string.
65

65

00:02:42.150  -->  00:02:43.470
So, let's create another class now
66

66

00:02:43.470  -->  00:02:44.893
called StringBuilderTestComparators,
67

67

00:02:45.732  -->  00:02:46.840
and I'm gonna paste some code in
68

68

00:02:46.840  -->  00:02:49.290
and we'll actually have a look at the code,
69

69

00:02:49.290  -->  00:02:51.390
basically the appropriate comparator code.
70

70

00:03:06.450  -->  00:03:08.230
Okay, there's the code.
71

71

00:03:08.230  -->  00:03:09.300
So, we're creating some test data.
72

72

00:03:09.300  -->  00:03:12.430
So you can see that we're using the == comparator there,
73

73

00:03:12.430  -->  00:03:16.900
then .equals, we're actually using that to do a comparison,
74

74

00:03:16.900  -->  00:03:19.610
and that obviously comes from java.lang.Object.
75

75

00:03:19.610  -->  00:03:21.600
There's a .compareTo method defined
76

76

00:03:21.600  -->  00:03:22.690
on the StringBuilder object,
77

77

00:03:22.690  -->  00:03:25.040
we're going to invoke that as well.
78

78

00:03:25.040  -->  00:03:27.510
Then there's a .equals is used to compare
79

79

00:03:27.510  -->  00:03:30.260
String Values of StringBuilder objects.
80

80

00:03:30.260  -->  00:03:33.410
And finally we can use == on StringBuilder objects
81

81

00:03:33.410  -->  00:03:35.170
among the toString method that's called
82

82

00:03:35.170  -->  00:03:36.100
from the StringBuilder objects.
83

83

00:03:36.100  -->  00:03:37.503
So, let's just run that.
84

84

00:03:40.120  -->  00:03:41.681
So, you can see the output from this code
85

85

00:03:41.681  -->  00:03:46.681
is sb == sb2 is false, and looking at sb and sb2 again.
86

86

00:03:47.910  -->  00:03:50.310
There's our two StringBuilder objects
87

87

00:03:51.180  -->  00:03:52.630
and basically you can see from this output
88

88

00:03:52.630  -->  00:03:55.980
that the == as well as the equals method
89

89

00:03:55.980  -->  00:03:58.720
are both false, that's the first two lines of output.
90

90

00:03:58.720  -->  00:04:00.850
The equals method for StringBuilder
91

91

00:04:00.850  -->  00:04:03.800
is the inherited method equals from object
92

92

00:04:03.800  -->  00:04:06.590
and that will simply just calls the == operator
93

93

00:04:06.590  -->  00:04:08.508
on the objects themselves.
94

94

00:04:08.508  -->  00:04:11.750
StringBuilder implements the comparable interface
95

95

00:04:11.750  -->  00:04:13.680
so it does have it's own compareTo method
96

96

00:04:13.680  -->  00:04:15.670
which we've called and that is like
97

97

00:04:15.670  -->  00:04:18.120
the string compareTo method.
98

98

00:04:18.120  -->  00:04:20.250
All right, so you can see that the compareTo in that case
99

99

00:04:20.250  -->  00:04:24.280
was zero, and sb.toString().equals(sb2.toString())
100

100

00:04:24.280  -->  00:04:26.340
is equal true in that scenario.
101

101

00:04:26.340  -->  00:04:29.713
Then the == test, the last one, returned false.
102

102

00:04:30.820  -->  00:04:32.550
The StringBuilder Class has a series
103

103

00:04:32.550  -->  00:04:35.340
of append methods and insert methods.
104

104

00:04:35.340  -->  00:04:37.890
Now, the append methods add data to the end
105

105

00:04:37.890  -->  00:04:39.980
of the current value of the StringBuilder,
106

106

00:04:39.980  -->  00:04:43.760
expanding capability or capacity rather, if needed.
107

107

00:04:43.760  -->  00:04:46.057
The insert methods insert the specified data
108

108

00:04:46.057  -->  00:04:47.810
into the StringBuilder value
109

109

00:04:47.810  -->  00:04:50.900
at the specified starting index.
110

110

00:04:50.900  -->  00:04:52.430
I'm gonna show some samples of both
111

111

00:04:52.430  -->  00:04:55.030
in the code I'm about to paste in.
112

112

00:04:55.030  -->  00:04:57.090
But first though, what we'll is we'll demonstrate
113

113

00:04:57.090  -->  00:04:58.640
the append methods.
114

114

00:04:58.640  -->  00:04:59.900
And note that with the StringBuilder
115

115

00:04:59.900  -->  00:05:02.580
you can chain your commands, and the reasons for that
116

116

00:05:02.580  -->  00:05:04.530
is the methods return a self-reference.
117

117

00:05:05.397  -->  00:05:08.147
All right, so let's go ahead and create that new class.
118

118

00:05:09.230  -->  00:05:10.830
StringBuilderAppendInsert, okay.
119

119

00:05:18.169  -->  00:05:19.863
Paste in the code.
120

120

00:05:23.360  -->  00:05:25.200
And you can see that I've put in a comment there
121

121

00:05:25.200  -->  00:05:27.950
that there's many flavours of append, quite a few there.
122

122

00:05:29.510  -->  00:05:32.370
And you can see that I'm actually chaining calls
123

123

00:05:32.370  -->  00:05:33.990
again because the methods themselves
124

124

00:05:33.990  -->  00:05:36.450
return a self-reference we can actually do that.
125

125

00:05:36.450  -->  00:05:38.050
So, let's actually run this now.
126

126

00:05:41.569  -->  00:05:42.970
And you can see that the individual calls
127

127

00:05:42.970  -->  00:05:44.930
to append have created a string
128

128

00:05:44.930  -->  00:05:47.440
which we're actually using to print out here
129

129

00:05:47.440  -->  00:05:48.770
our line 40, and we've got the,
130

130

00:05:48.770  -->  00:05:49.650
basically we've got the length
131

131

00:05:49.650  -->  00:05:52.250
and the capacity output as well.
132

132

00:05:52.250  -->  00:05:54.300
So, that's append, and you find that insert methods
133

133

00:05:54.300  -->  00:05:56.900
are very similar to append.
134

134

00:05:56.900  -->  00:05:58.050
What I'll do for that is I'll just
135

135

00:05:58.050  -->  00:06:00.370
paste some code into this method,
136

136

00:06:00.370  -->  00:06:02.653
into this class rather than creating a new one.
137

137

00:06:05.067  -->  00:06:07.370
Okay, you can see some of the many insert methods
138

138

00:06:07.370  -->  00:06:10.100
very similar to append as I mentioned.
139

139

00:06:10.100  -->  00:06:11.433
The code is very similar.
140

140

00:06:12.480  -->  00:06:13.313
Let's run that.
141

141

00:06:16.063  -->  00:06:17.270
And you can see we've got the output,
142

142

00:06:17.270  -->  00:06:19.076
basically identical to what happened last time
143

143

00:06:19.076  -->  00:06:20.393
when we used append.
144

144

00:06:22.490  -->  00:06:25.200
There shouldn't probably be many surprises there.
145

145

00:06:25.200  -->  00:06:26.660
But what I will do now is touch on a few
146

146

00:06:26.660  -->  00:06:28.800
of the StringBuilder methods that are not methods
147

147

00:06:28.800  -->  00:06:30.550
similar to String methods.
148

148

00:06:30.550  -->  00:06:32.040
It is important to note, however,
149

149

00:06:32.040  -->  00:06:34.610
that the append/insert methods in StringBuilder
150

150

00:06:34.610  -->  00:06:37.310
are changing the value of the StringBuilder object,
151

151

00:06:37.310  -->  00:06:40.090
and not returning a new value from the method calls
152

152

00:06:40.090  -->  00:06:42.410
as do the String's concat methods.
153

153

00:06:42.410  -->  00:06:45.240
Very important that you make that distinction.
154

154

00:06:45.240  -->  00:06:46.600
All right, so for this next bit of code,
155

155

00:06:46.600  -->  00:06:49.607
let's actually create yet a new class.
156

156

00:06:49.607  -->  00:06:53.977
And we call this one StringBuilderManipulation.
157

157

00:07:00.810  -->  00:07:02.600
Okay, so there's our code.
158

158

00:07:02.600  -->  00:07:04.410
All right, so in this example code you can see
159

159

00:07:04.410  -->  00:07:06.100
what we're creating and initialising,
160

160

00:07:06.100  -->  00:07:08.160
our StringBuilder Object on line 11,
161

161

00:07:08.160  -->  00:07:11.030
using the deleteCharAt method to delete
162

162

00:07:11.030  -->  00:07:13.610
a specific character at a specific position.
163

163

00:07:13.610  -->  00:07:15.640
And we're using the indexOf to find the position,
164

164

00:07:15.640  -->  00:07:16.990
which in this case is the comma.
165

165

00:07:16.990  -->  00:07:20.040
So, we're deleting the comma from the string effectively.
166

166

00:07:20.040  -->  00:07:22.970
There's also a delete, and the example that I'm using there
167

167

00:07:22.970  -->  00:07:24.410
is basically deleting everything
168

168

00:07:24.410  -->  00:07:26.350
after where the comma used to be.
169

169

00:07:26.350  -->  00:07:28.770
There's an sb.reverse() which just is
170

170

00:07:28.770  -->  00:07:29.603
what you think it will be,
171

171

00:07:29.603  -->  00:07:30.840
and we'll show the output to that shortly.
172

172

00:07:30.840  -->  00:07:33.430
Now, you can assign the reverse method's result
173

173

00:07:33.430  -->  00:07:35.940
to a different StringBuilder variable, which is interesting,
174

174

00:07:35.940  -->  00:07:38.260
and you can see on line 29 I'm doing that.
175

175

00:07:38.260  -->  00:07:39.720
And now that I've done that,
176

176

00:07:39.720  -->  00:07:41.270
you've got two StringBuilder references
177

177

00:07:41.270  -->  00:07:43.610
pointing to the same mutable text.
178

178

00:07:43.610  -->  00:07:44.823
So, let's run this code.
179

179

00:07:48.023  -->  00:07:49.296
And you can see in that last scenario
180

180

00:07:49.296  -->  00:07:51.860
we've appended only the first StringBuilder
181

181

00:07:51.860  -->  00:07:53.836
but our printout has both StringBuilders
182

182

00:07:53.836  -->  00:07:55.720
because they're both referencing or pointing
183

183

00:07:55.720  -->  00:07:56.810
to the same mutable text,
184

184

00:07:56.810  -->  00:07:59.053
both are updated with the append.
185

185

00:08:00.250  -->  00:08:01.620
So, one of the very few methods
186

186

00:08:01.620  -->  00:08:03.910
that doesn't return a self-reference is subString.
187

187

00:08:03.910  -->  00:08:07.090
So, it's similar to our mains,
188

188

00:08:07.090  -->  00:08:08.690
so I'll paste in some more code.
189

189

00:08:12.110  -->  00:08:13.253
If we run this.
190

190

00:08:17.120  -->  00:08:19.230
So you can see that in the case of subString
191

191

00:08:19.230  -->  00:08:21.990
it returns a new String Object and not a self-reference
192

192

00:08:21.990  -->  00:08:23.770
to the StringBooter Object itself,
193

193

00:08:23.770  -->  00:08:26.490
that's why subString has the value of World
194

194

00:08:26.490  -->  00:08:28.963
after the call to sb.substring.
195

195

00:08:31.070  -->  00:08:32.910
And finally, just a note on String,
196

196

00:08:32.910  -->  00:08:35.140
StringBuffer, and StringBuilder.
197

197

00:08:35.140  -->  00:08:37.570
Now, StringBuffer won't be on this exam,
198

198

00:08:37.570  -->  00:08:39.430
but it's interesting to note that it's out there
199

199

00:08:39.430  -->  00:08:42.330
if you need a thread safe but mutable object
200

200

00:08:42.330  -->  00:08:43.423
with a string value.
201

201

00:08:44.400  -->  00:08:46.240
Right, now in terms of their differences,
202

202

00:08:46.240  -->  00:08:48.770
String, it's immutable as we've discussed.
203

203

00:08:48.770  -->  00:08:50.430
In general I would suggest to use
204

204

00:08:50.430  -->  00:08:53.360
Strings versus a StringBuilder when your strings are short
205

205

00:08:53.360  -->  00:08:56.060
and most likely to be re-used throughout the application.
206

206

00:08:56.060  -->  00:08:59.120
StringBuffer on the other hand, well that's mutable,
207

207

00:08:59.120  -->  00:09:01.850
and it was the only option before JDK 5,
208

208

00:09:01.850  -->  00:09:03.990
keep in mind that it's also threadsafe.
209

209

00:09:03.990  -->  00:09:07.050
All public methods for StringBuffer are synchronised
210

210

00:09:07.050  -->  00:09:09.400
which have a negative impact on performance.
211

211

00:09:09.400  -->  00:09:11.130
Now, you'll generally wanna use StringBuffer
212

212

00:09:11.130  -->  00:09:13.100
if the attribute is being accessed
213

213

00:09:13.100  -->  00:09:15.400
by multiple concurrent threads.
214

214

00:09:15.400  -->  00:09:16.970
And finally, StringBuilder.
215

215

00:09:16.970  -->  00:09:19.410
It's mutable and introduced in JDK 5,
216

216

00:09:19.410  -->  00:09:22.950
it's Garbage Collected, and capacity can be adjusted
217

217

00:09:22.950  -->  00:09:24.400
as we've seen in this video.
218

218

00:09:24.400  -->  00:09:26.890
Now, you wanna use StringBuilder versus String
219

219

00:09:26.890  -->  00:09:29.750
if you're dynamically building large string data sets,
220

220

00:09:29.750  -->  00:09:32.610
like log statements or generated HTML/XML
221

221

00:09:32.610  -->  00:09:34.600
or something of that nature.
222

222

00:09:34.600  -->  00:09:35.990
All right, so I'm gonna finish the video here.
223

223

00:09:35.990  -->  00:09:38.240
In the next one, we'll have a look at some of the
224

224

00:09:38.240  -->  00:09:40.620
out of the ordinary concepts of StringBuilder.
225

225

00:09:40.620  -->  00:09:41.920
See you in the next video.
