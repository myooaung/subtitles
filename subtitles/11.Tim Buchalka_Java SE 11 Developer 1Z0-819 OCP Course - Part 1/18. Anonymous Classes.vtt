WEBVTT
1
1

00:00:05.430  -->  00:00:08.480
<v ->So, let's talk about lambda expressions.</v>
2

2

00:00:08.480  -->  00:00:10.060
To understand lambda expressions,
3

3

00:00:10.060  -->  00:00:12.680
you must first understand their genesis.
4

4

00:00:12.680  -->  00:00:16.290
Before lambda expressions, anonymous inner classes
5

5

00:00:16.290  -->  00:00:17.600
were the feature that enabled you
6

6

00:00:17.600  -->  00:00:19.800
to make your code more concise.
7

7

00:00:19.800  -->  00:00:20.990
They did, and still do,
8

8

00:00:20.990  -->  00:00:23.890
enable you to declare and instantiate a class
9

9

00:00:23.890  -->  00:00:26.660
at the same time, and use methods on that class,
10

10

00:00:26.660  -->  00:00:29.200
all within the same segment of code.
11

11

00:00:29.200  -->  00:00:32.020
Anonymous classes are like local classes,
12

12

00:00:32.020  -->  00:00:34.240
except that they do not have a name.
13

13

00:00:34.240  -->  00:00:37.653
You'll use them if you need to use a local class only once.
14

14

00:00:39.600  -->  00:00:41.555
One issue with anonymous classes is that
15

15

00:00:41.555  -->  00:00:44.300
if the implementation of your anonymous class
16

16

00:00:44.300  -->  00:00:46.490
is very simple, such as an interface
17

17

00:00:46.490  -->  00:00:48.790
that contains only one method,
18

18

00:00:48.790  -->  00:00:51.100
then the syntax of using an anonymous class
19

19

00:00:51.100  -->  00:00:53.630
may seem unwieldy and unclear.
20

20

00:00:53.630  -->  00:00:55.950
Lambda expressions replace the bulkiness
21

21

00:00:55.950  -->  00:00:57.633
of anonymous inner classes.
22

22

00:00:59.240  -->  00:01:02.120
So, let's start with an example of an anonymous class
23

23

00:01:02.120  -->  00:01:04.760
compared to a named inner class.
24

24

00:01:04.760  -->  00:01:06.340
So, you need to create a new project now,
25

25

00:01:06.340  -->  00:01:08.160
which I've done and called Lambda Expressions,
26

26

00:01:08.160  -->  00:01:10.760
and we need to create a class called Anonymous Test.
27

27

00:01:13.037  -->  00:01:16.454
(computer keys clicking)
28

28

00:01:20.120  -->  00:01:20.953
So, there's our code.
29

29

00:01:20.953  -->  00:01:22.640
So, we've got a main method, as you can see,
30

30

00:01:22.640  -->  00:01:23.770
an anonymous test.
31

31

00:01:23.770  -->  00:01:26.021
I'm creating a local inner class
32

32

00:01:26.021  -->  00:01:28.800
called LocalClass, which extends Object
33

33

00:01:28.800  -->  00:01:30.600
and defines a method hello.
34

34

00:01:30.600  -->  00:01:32.850
In comparison, I'm also creating
35

35

00:01:32.850  -->  00:01:34.250
an anonymous class.
36

36

00:01:34.250  -->  00:01:35.330
I've typed Object,
37

37

00:01:35.330  -->  00:01:37.950
which overrides the toString method on Object.
38

38

00:01:37.950  -->  00:01:39.750
Now, after the definition of the local class
39

39

00:01:39.750  -->  00:01:43.300
and the anonymous class, I'm executing methods on both.
40

40

00:01:43.300  -->  00:01:45.180
The local class needs instantiation,
41

41

00:01:45.180  -->  00:01:47.210
you can see we're doing that on line 22,
42

42

00:01:47.210  -->  00:01:50.020
and a call to the method, whereas the anonymous class
43

43

00:01:50.020  -->  00:01:52.370
allows you to just reference it and its method.
44

44

00:01:53.290  -->  00:01:54.690
Now, as we run this code now
45

45

00:01:56.200  -->  00:01:58.967
you can we've got the output at the bottom of the screen.
46

46

00:01:58.967  -->  00:01:59.800
So far, so good.
47

47

00:01:59.800  -->  00:02:03.520
Let's now create an anonymous class based on an interface.
48

48

00:02:03.520  -->  00:02:06.483
So, I'm gonna add some interface code to our source file,
49

49

00:02:09.368  -->  00:02:13.237
and I'm just gonna put it above the main method, there.
50

50

00:02:14.244  -->  00:02:15.467
So, there's our interface.
51

51

00:02:15.467  -->  00:02:17.750
Now that I've done that, I'll add an anonymous class
52

52

00:02:17.750  -->  00:02:20.640
to our main method that implements this interface
53

53

00:02:20.640  -->  00:02:24.480
and also add some code, which actually instantiates it.
54

54

00:02:24.480  -->  00:02:25.760
So, down here.
55

55

00:02:25.760  -->  00:02:27.740
So I'll paste the code in.
56

56

00:02:27.740  -->  00:02:29.290
Okay, so there's code.
57

57

00:02:29.290  -->  00:02:31.640
Again, when you're creating an anonymous class,
58

58

00:02:31.640  -->  00:02:33.730
it's a statement and not a declaration.
59

59

00:02:33.730  -->  00:02:36.260
This one implements the Helloable interface
60

60

00:02:36.260  -->  00:02:39.260
that we pasted at the top of the code, there,
61

61

00:02:39.260  -->  00:02:40.960
the interface up there on line 10.
62

62

00:02:42.290  -->  00:02:43.123
And I've got the code there
63

63

00:02:43.123  -->  00:02:45.480
to call the Hello method on line 50.
64

64

00:02:45.480  -->  00:02:46.313
Run this now.
65

65

00:02:47.730  -->  00:02:49.910
You can see Hello Anonymous Class implementing Interface
66

66

00:02:49.910  -->  00:02:50.743
is output.
67

67

00:02:51.720  -->  00:02:53.350
All right, so let's create another method
68

68

00:02:53.350  -->  00:02:55.340
on the Anonymous test class.
69

69

00:02:55.340  -->  00:02:57.610
So, I'm gonna come down here and add it
70

70

00:02:57.610  -->  00:02:59.163
after our main method closes.
71

71

00:03:00.700  -->  00:03:02.000
You can see the code for this takes
72

72

00:03:02.000  -->  00:03:05.480
as a parameter and object that implements Helloable
73

73

00:03:05.480  -->  00:03:07.323
and then executes the Hello method.
74

74

00:03:08.160  -->  00:03:09.580
What I wanna do now is add a sample
75

75

00:03:09.580  -->  00:03:13.100
where we actually pass an anonymous class as a parameter
76

76

00:03:13.100  -->  00:03:14.340
to this method.
77

77

00:03:14.340  -->  00:03:16.400
So, I'm going to paste this code
78

78

00:03:17.487  -->  00:03:20.297
after the last line in the main method.
79

79

00:03:20.297  -->  00:03:21.700
And there it is.
80

80

00:03:21.700  -->  00:03:22.680
So, again, what we're doing here
81

81

00:03:22.680  -->  00:03:25.270
is we're passing an anonymous class
82

82

00:03:25.270  -->  00:03:26.680
as a parameter to our method,
83

83

00:03:26.680  -->  00:03:29.170
and we're actually calling the printHello method,
84

84

00:03:29.170  -->  00:03:30.783
which was defined just below.
85

85

00:03:32.230  -->  00:03:34.370
You can see it on the screen there now.
86

86

00:03:34.370  -->  00:03:35.670
So, essentially what we're doing here
87

87

00:03:35.670  -->  00:03:37.820
is we're making a call to the printHello method
88

88

00:03:37.820  -->  00:03:40.363
and our parameter is an anonymous class.
89

89

00:03:41.270  -->  00:03:45.120
To demonstrate that this is working, we'll run it.
90

90

00:03:45.120  -->  00:03:45.953
You can see we've got the output
91

91

00:03:45.953  -->  00:03:48.263
Hello Anonymous Class passed as a parameter.
92

92

00:03:49.140  -->  00:03:50.280
So, you might agree at this point
93

93

00:03:50.280  -->  00:03:52.550
that this is interesting and possibly slick,
94

94

00:03:52.550  -->  00:03:55.190
but I think you'd also agree it's not very pretty.
95

95

00:03:55.190  -->  00:03:58.180
So, finally, let's now call the same method printHello,
96

96

00:03:58.180  -->  00:04:01.390
but using a lambda expression as a parameter.
97

97

00:04:01.390  -->  00:04:03.630
Now, a lambda expression is possible here
98

98

00:04:03.630  -->  00:04:05.950
because of the interface parameter.
99

99

00:04:05.950  -->  00:04:07.850
Now, don't worry if you don't quite understand it yet
100

100

00:04:07.850  -->  00:04:09.600
'cause we'll be going through this in detail.
101

101

00:04:09.600  -->  00:04:11.640
In fact, in the next video I'll be discussing
102

102

00:04:11.640  -->  00:04:14.080
the syntax of a lambda expression,
103

103

00:04:14.080  -->  00:04:15.190
but for now we'll keep in mind
104

104

00:04:15.190  -->  00:04:17.380
that a lambda expression is shorthand
105

105

00:04:17.380  -->  00:04:20.020
for calling a method on an anonymous class
106

106

00:04:20.020  -->  00:04:21.860
using a functional interface.
107

107

00:04:21.860  -->  00:04:24.350
All right, so let's add some code now
108

108

00:04:24.350  -->  00:04:25.400
to call this side method.
109

109

00:04:25.400  -->  00:04:28.800
I'm gonna add it right at the end of the main method.
110

110

00:04:28.800  -->  00:04:31.910
So, you can see now, line 68 is our lambda expression
111

111

00:04:31.910  -->  00:04:33.910
where we're calling the printHello method.
112

112

00:04:33.910  -->  00:04:34.743
We'll run this.
113

113

00:04:36.940  -->  00:04:38.500
Hello Lambda Expression as a parameter
114

114

00:04:38.500  -->  00:04:40.360
is output at the bottom.
115

115

00:04:40.360  -->  00:04:42.340
All right, so that's the first basis
116

116

00:04:42.340  -->  00:04:44.980
of using a lambda expression.
117

117

00:04:44.980  -->  00:04:46.050
So, that's the end of the video here
118

118

00:04:46.050  -->  00:04:49.270
now that we've actually seen a lambda expression's running.
119

119

00:04:49.270  -->  00:04:50.103
In the next video,
120

120

00:04:50.103  -->  00:04:52.120
we'll start looking at the syntax of a lambda expression,
121

121

00:04:52.120  -->  00:04:55.030
but also talk more about, specifically, what they are
122

122

00:04:55.030  -->  00:04:58.020
and how functional interfaces provide target types
123

123

00:04:58.020  -->  00:05:00.280
for lambda expressions and method references.
124

124

00:05:00.280  -->  00:05:01.613
See you in the next video.
