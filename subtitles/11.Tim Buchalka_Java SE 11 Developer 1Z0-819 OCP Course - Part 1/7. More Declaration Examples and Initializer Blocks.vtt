WEBVTT
1
1

00:00:04.786  -->  00:00:06.090
<v Tim>All right, so let's review some</v>
2

2

00:00:06.090  -->  00:00:08.320
declaration examples which have modifiers
3

3

00:00:09.270  -->  00:00:11.210
and/or extends/implements declarations,
4

4

00:00:11.210  -->  00:00:14.127
that are both valid, firstly and then we'll move on
5

5

00:00:14.127  -->  00:00:15.320
to some invalid examples.
6

6

00:00:15.320  -->  00:00:18.700
First one, public class Test extends SuperTest.
7

7

00:00:18.700  -->  00:00:22.130
The Test class is a subclass of a SuperTest class.
8

8

00:00:22.130  -->  00:00:25.350
Public abstract class Test extends SuperTest,
9

9

00:00:25.350  -->  00:00:28.150
an abstract class can be a subtype of a class,
10

10

00:00:28.150  -->  00:00:29.820
abstract or not.
11

11

00:00:29.820  -->  00:00:33.110
Public class Test implements Ainterface,
12

12

00:00:33.110  -->  00:00:36.610
The Test class implements an interface called Ainterface.
13

13

00:00:36.610  -->  00:00:40.970
Public class Test extends SuperTest implements Ainterface,
14

14

00:00:40.970  -->  00:00:45.270
A class can extend both a class and implement an interface.
15

15

00:00:45.270  -->  00:00:48.650
And finally, public class Test extends SuperTest implements
16

16

00:00:48.650  -->  00:00:49.963
Ainterface, Binterface.
17

17

00:00:51.032  -->  00:00:53.180
A class can extend a class and implement
18

18

00:00:53.180  -->  00:00:54.603
multiple interfaces.
19

19

00:00:56.500  -->  00:00:59.150
Right, so let's look at some invalid declarations.
20

20

00:00:59.150  -->  00:01:02.050
First one, public class Test extends SuperTest, SuperExam.
21

21

00:01:03.390  -->  00:01:05.660
A class can only extend one class,
22

22

00:01:05.660  -->  00:01:09.170
it can only be a subtype of one supertype.
23

23

00:01:09.170  -->  00:01:11.540
So, given public class SuperTest,
24

24

00:01:11.540  -->  00:01:12.970
left of right curly braces,
25

25

00:01:12.970  -->  00:01:16.270
then public class Test implements SuperTest.
26

26

00:01:16.270  -->  00:01:18.160
This is an invalid declaration.
27

27

00:01:18.160  -->  00:01:21.160
You implement an interface, and not a class.
28

28

00:01:21.160  -->  00:01:23.960
And fairly, given public interface Ainterface,
29

29

00:01:23.960  -->  00:01:25.020
left or right curly braces,
30

30

00:01:25.020  -->  00:01:28.330
then public class Test extends AInterface.
31

31

00:01:28.330  -->  00:01:30.110
This is an invalid declaration.
32

32

00:01:30.110  -->  00:01:31.670
You implement an interface.
33

33

00:01:31.670  -->  00:01:33.410
You cannot extend an interface,
34

34

00:01:33.410  -->  00:01:35.543
unless your type is an interface.
35

35

00:01:37.596  -->  00:01:40.950
Right, so let's now discuss Class Body and it's Structure.
36

36

00:01:40.950  -->  00:01:42.410
I've got an image on the screen there.
37

37

00:01:42.410  -->  00:01:45.060
This was taken from Oracle's Java Specification.
38

38

00:01:45.060  -->  00:01:47.180
There's a link in the resources section,
39

39

00:01:47.180  -->  00:01:48.630
if you want to refer to that.
40

40

00:01:50.280  -->  00:01:53.390
Let's go through and discuss these, while this is on sceen.
41

41

00:01:53.390  -->  00:01:56.090
So the Class Body block rules are as follows:
42

42

00:01:56.090  -->  00:01:58.810
The class body may contain declarations of members
43

43

00:01:58.810  -->  00:02:01.610
of the class, that is, fields, methods, classes,
44

44

00:02:01.610  -->  00:02:03.140
and interfaces.
45

45

00:02:03.140  -->  00:02:06.380
The class body may also contain instance initializers,
46

46

00:02:06.380  -->  00:02:09.460
static initializers, and declarations of constructors
47

47

00:02:09.460  -->  00:02:10.580
for the class.
48

48

00:02:10.580  -->  00:02:13.750
Constructors, static initializers, and instance initializers
49

49

00:02:13.750  -->  00:02:16.503
are NOT members, and therefore are not inherited.
50

50

00:02:18.630  -->  00:02:21.860
Declarations can be in any order but with some caveats:
51

51

00:02:21.860  -->  00:02:24.010
The order of declarations is important in the
52

52

00:02:24.010  -->  00:02:25.670
execution of initializers,
53

53

00:02:25.670  -->  00:02:28.770
which are executed in the order that they're defined.
54

54

00:02:28.770  -->  00:02:30.240
An initializer block cannot use
55

55

00:02:30.240  -->  00:02:33.510
an unqualified variable defined and initialised
56

56

00:02:33.510  -->  00:02:35.650
after it's declaration in a statement,
57

57

00:02:35.650  -->  00:02:38.050
other than making an assignment to the variable.
58

58

00:02:39.710  -->  00:02:41.490
A static initializer block cannot use
59

59

00:02:41.490  -->  00:02:45.090
an unqualified static variable declared and initialised,
60

60

00:02:45.090  -->  00:02:47.260
after it's declaration in a statement,
61

61

00:02:47.260  -->  00:02:50.430
other than making an assignment to the variable.
62

62

00:02:50.430  -->  00:02:52.140
An instance variable cannot use
63

63

00:02:52.140  -->  00:02:54.920
an unqualified reference to another instance variable,
64

64

00:02:54.920  -->  00:02:56.860
declared after it's declaration,
65

65

00:02:56.860  -->  00:02:58.513
in it's assignment statement.
66

66

00:03:00.280  -->  00:03:02.580
Fields, methods, and member types of a class type,
67

67

00:03:02.580  -->  00:03:04.000
may have the same name,
68

68

00:03:04.000  -->  00:03:06.020
since they are used in different contexts
69

69

00:03:06.020  -->  00:03:09.160
and are disambiguated by different lookup procedures.
70

70

00:03:09.160  -->  00:03:12.380
However, this is discouraged as a matter of style.
71

71

00:03:12.380  -->  00:03:14.430
Now, we'll talk about class members and constructors,
72

72

00:03:14.430  -->  00:03:16.828
in the next few upcoming videos,
73

73

00:03:16.828  -->  00:03:18.803
but let's review initializers on this next slide.
74

74

00:03:20.750  -->  00:03:22.360
So, Instance initializer,
75

75

00:03:22.360  -->  00:03:24.570
this is a block of code declared in a class,
76

76

00:03:24.570  -->  00:03:26.330
whose statements are executed
77

77

00:03:26.330  -->  00:03:29.050
when an instance of a class is created.
78

78

00:03:29.050  -->  00:03:31.690
A return statement cannot appear anywhere within
79

79

00:03:31.690  -->  00:03:33.420
an instance initializer.
80

80

00:03:33.420  -->  00:03:35.750
You can have multiple initializer blocks,
81

81

00:03:35.750  -->  00:03:38.772
they'll be executed in the order they are declared.
82

82

00:03:38.772  -->  00:03:40.680
Initializer blocks are executed prior
83

83

00:03:40.680  -->  00:03:43.480
to any constructor block of code being executed,
84

84

00:03:43.480  -->  00:03:47.080
but after any call to the parent type's constructor.
85

85

00:03:47.080  -->  00:03:49.600
These blocks are not inherited by subclasses.
86

86

00:03:51.420  -->  00:03:53.690
Next, we've got a Static initializer.
87

87

00:03:53.690  -->  00:03:55.460
The static initializer is a block of code,
88

88

00:03:55.460  -->  00:03:58.810
declared in a class prefaced by the keyword 'static',
89

89

00:03:58.810  -->  00:04:02.080
whose statements are executed when the class is initialised.
90

90

00:04:02.080  -->  00:04:04.460
A return statement also cannot appear anywhere within
91

91

00:04:04.460  -->  00:04:06.030
a static initializer.
92

92

00:04:06.030  -->  00:04:08.500
The keywords to this and super are not permitted
93

93

00:04:08.500  -->  00:04:09.940
in this code section.
94

94

00:04:09.940  -->  00:04:13.080
Remember that 'this' and 'super' refer back to instances,
95

95

00:04:13.080  -->  00:04:14.500
and class or static initializers,
96

96

00:04:14.500  -->  00:04:16.900
do not refer to a single instance.
97

97

00:04:16.900  -->  00:04:20.340
Any type variable declared outside the static initializer,
98

98

00:04:20.340  -->  00:04:22.963
cannot appear anywhere with a static initializer.
99

99

00:04:24.270  -->  00:04:26.810
You can have multiple static initializer blocks,
100

100

00:04:26.810  -->  00:04:29.580
they'll be executed in the order they are declared.
101

101

00:04:29.580  -->  00:04:33.227
And finally, these blocks are not inherited by subclasses.
102

102

00:04:33.227  -->  00:04:34.950
All right, we finished the video here.
103

103

00:04:34.950  -->  00:04:36.400
In the next video,
104

104

00:04:36.400  -->  00:04:38.280
we're gonna start looking at doing some coding,
105

105

00:04:38.280  -->  00:04:40.580
and determining whether it really does matter,
106

106

00:04:41.585  -->  00:04:42.533
whether declaring initializers, constructors,
107

107

00:04:43.981  -->  00:04:45.383
and instance variables in a specific order or not.
