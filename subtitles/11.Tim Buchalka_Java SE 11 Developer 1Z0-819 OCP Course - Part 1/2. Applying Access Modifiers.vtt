WEBVTT
1
1

00:00:05.278  -->  00:00:08.250 line:15% 
<v Instructor>Alright so let's talk about Access modifiers.</v>
2

2

00:00:08.250  -->  00:00:10.010
At the very simplest level,
3

3

00:00:10.010  -->  00:00:11.970
you would identify some class members,
4

4

00:00:11.970  -->  00:00:14.050
field and internal methods as private,
5

5

00:00:14.050  -->  00:00:15.470
as some as public methods,
6

6

00:00:15.470  -->  00:00:17.380
that a consuming class would need.
7

7

00:00:17.380  -->  00:00:20.020
The public methods would need the public face
8

8

00:00:20.020  -->  00:00:22.770
or the contract shown to the consumers,
9

9

00:00:22.770  -->  00:00:24.720
which need to access an instance of the object
10

10

00:00:24.720  -->  00:00:27.060
for some information or some function.
11

11

00:00:27.060  -->  00:00:29.440
The private members would be those fields or methods
12

12

00:00:29.440  -->  00:00:32.380
that are needed only for the class to perform it's work,
13

13

00:00:32.380  -->  00:00:35.660
and used only by the class internally itself.
14

14

00:00:35.660  -->  00:00:37.170
It gets a bit more complicated than that,
15

15

00:00:37.170  -->  00:00:39.220
because we might wanna subclass to have access
16

16

00:00:39.220  -->  00:00:42.800
to some internal private members of it's parent class,
17

17

00:00:42.800  -->  00:00:44.860
especially if we wanna create methods
18

18

00:00:44.860  -->  00:00:47.100
that override the parent class.
19

19

00:00:47.100  -->  00:00:49.270
The Protected Access Modifier was created
20

20

00:00:49.270  -->  00:00:50.623
for this type of access.
21

21

00:00:53.110  -->  00:00:56.050
In addition, if we have a group of classes in a package,
22

22

00:00:56.050  -->  00:00:59.240
it might be assumed that these classes have relationships
23

23

00:00:59.240  -->  00:01:02.060
that aren't strictly parent-child relationships,
24

24

00:01:02.060  -->  00:01:04.130
and that these relationships may require access
25

25

00:01:04.130  -->  00:01:06.770
to some of the internals of a class.
26

26

00:01:06.770  -->  00:01:09.260
The default modifier, which has the description,
27

27

00:01:09.260  -->  00:01:11.020
package or package-private,
28

28

00:01:11.020  -->  00:01:12.440
but does not have a keyword,
29

29

00:01:12.440  -->  00:01:14.200
allows this type of access.
30

30

00:01:14.200  -->  00:01:16.910
It should be noted that the Protected Access Modifier
31

31

00:01:16.910  -->  00:01:20.180
in addition to allowing a subclass access to its members,
32

32

00:01:20.180  -->  00:01:23.690
also allows classes in the same package access to members
33

33

00:01:23.690  -->  00:01:25.403
with the protected modifier.
34

34

00:01:27.970  -->  00:01:29.940
So let's look at a table that shows the modifiers
35

35

00:01:29.940  -->  00:01:33.720
in order of least Restrictive to most restrictive.
36

36

00:01:33.720  -->  00:01:35.830
So the first Access modifier is public
37

37

00:01:35.830  -->  00:01:37.963
and using the Public Modifier allows access to a member,
38

38

00:01:37.963  -->  00:01:40.660
regardless of package or hierarchy.
39

39

00:01:40.660  -->  00:01:44.360
Any class in any package can access this type of member.
40

40

00:01:44.360  -->  00:01:46.370
So it's available to classes in any package.
41

41

00:01:46.370  -->  00:01:48.377
It's available to classes in the same package,
42

42

00:01:48.377  -->  00:01:51.970
but it's also available to sub classes.
43

43

00:01:51.970  -->  00:01:55.010
Next Access modifier we're talking about is protected.
44

44

00:01:55.010  -->  00:01:56.920
They're using the protected modifier,
45

45

00:01:56.920  -->  00:01:59.960
allows access to any class in the same package.
46

46

00:01:59.960  -->  00:02:02.300
In addition, any subclass of the class,
47

47

00:02:02.300  -->  00:02:04.400
regardless of the package it is in,
48

48

00:02:04.400  -->  00:02:08.010
will have access to these members in a restricted fashion.
49

49

00:02:08.010  -->  00:02:10.500
So the Protected Access Modifier isn't available
50

50

00:02:10.500  -->  00:02:12.620
to classes in any package.
51

51

00:02:12.620  -->  00:02:14.970
It's available to classes in the same package.
52

52

00:02:14.970  -->  00:02:18.270
And it's also available to sub classes.
53

53

00:02:18.270  -->  00:02:22.120
Next is not using an access modifier, or no modifier.
54

54

00:02:22.120  -->  00:02:23.360
And this is the default.
55

55

00:02:23.360  -->  00:02:25.210
When you specify a no modifier,
56

56

00:02:25.210  -->  00:02:27.580
the access is package, package-private
57

57

00:02:27.580  -->  00:02:29.670
or default access as it is known.
58

58

00:02:29.670  -->  00:02:32.080
This access allows the member to be accessed
59

59

00:02:32.080  -->  00:02:34.810
by any other class in the same package.
60

60

00:02:34.810  -->  00:02:37.510
So it's not available to classes in any package.
61

61

00:02:37.510  -->  00:02:40.390
It is available to classes in the same package,
62

62

00:02:40.390  -->  00:02:43.700
and it's not available to subclasses.
63

63

00:02:43.700  -->  00:02:46.430
But lastly, we're talking now about private,
64

64

00:02:46.430  -->  00:02:48.310
the Private Access Modifier.
65

65

00:02:48.310  -->  00:02:51.020
So using the private modifier prevents any class,
66

66

00:02:51.020  -->  00:02:53.780
other than the one the members is declared in,
67

67

00:02:53.780  -->  00:02:55.440
from accessing the member.
68

68

00:02:55.440  -->  00:02:56.920
So note that nested classes
69

69

00:02:56.920  -->  00:02:59.940
can access the outer class's private member
70

70

00:02:59.940  -->  00:03:02.560
So it's not available to classes in any package,
71

71

00:03:02.560  -->  00:03:05.128
is not available to classes in the same package,
72

72

00:03:05.128  -->  00:03:08.628
and it's also not available to subclasses.
73

73

00:03:10.360  -->  00:03:12.410
Alright, so with that said, In this video,
74

74

00:03:12.410  -->  00:03:14.990
let's start talking about the constructs the rules
75

75

00:03:14.990  -->  00:03:18.150
and implications of each modifier with the top of member
76

76

00:03:18.150  -->  00:03:19.460
that it's applied to.
77

77

00:03:19.460  -->  00:03:20.611
In the future videos in this section
78

78

00:03:20.611  -->  00:03:22.310
we'd discuss best practises
79

79

00:03:22.310  -->  00:03:24.443
in encapsulation techniques in Java.
80

80

00:03:25.800  -->  00:03:28.570
Unlike methods, fields in a subclass hide those
81

81

00:03:28.570  -->  00:03:31.310
of the same name in the superclass.
82

82

00:03:31.310  -->  00:03:33.730
Alright so create a new project called encapsulation
83

83

00:03:33.730  -->  00:03:34.780
which I've done.
84

84

00:03:34.780  -->  00:03:37.430
We wanna create a new class here.
85

85

00:03:37.430  -->  00:03:39.780
I'm (murmur) create a package at the same time.
86

86

00:03:41.070  -->  00:03:45.603
So I'm going to create package A and class nine superclass.
87

87

00:03:46.720  -->  00:03:48.730
So mostly using the feature of IntelliJ
88

88

00:03:48.730  -->  00:03:50.490
that it creates a package for us automatically.
89

89

00:03:50.490  -->  00:03:52.540
You can see that it's done that.
90

90

00:03:52.540  -->  00:03:53.743
Now you'll paste in the code.
91

91

00:03:56.256  -->  00:03:57.720
Right, so this is the code.
92

92

00:03:57.720  -->  00:03:59.490
Now the public class here superclass
93

93

00:03:59.490  -->  00:04:02.110
has four attributes, as you can see,
94

94

00:04:02.110  -->  00:04:03.670
we will be able to see when I scroll down, there we go.
95

95

00:04:03.670  -->  00:04:06.090
We've got the four there on screen,
96

96

00:04:06.090  -->  00:04:09.310
each has been modified with a different access modifiers,
97

97

00:04:09.310  -->  00:04:11.410
you can see and also method test access
98

98

00:04:11.410  -->  00:04:12.990
that actually prints them.
99

99

00:04:12.990  -->  00:04:15.400
We've also got a main method, (murmur) instantiating,
100

100

00:04:15.400  -->  00:04:17.740
the superclass, but also the package A class,
101

101

00:04:17.740  -->  00:04:19.430
which we'll talk about now.
102

102

00:04:19.430  -->  00:04:21.110
So this package A class
103

103

00:04:21.110  -->  00:04:23.540
has no defined relationship to superclass,
104

104

00:04:23.540  -->  00:04:24.530
but does have one method
105

105

00:04:24.530  -->  00:04:26.707
that proves the attributes of superclass.
106

106

00:04:26.707  -->  00:04:29.440
And you can see that method on screen there now.
107

107

00:04:29.440  -->  00:04:31.130
We're doing this to test access modifiers.
108

108

00:04:31.130  -->  00:04:31.963
And you'll see that when I run this,
109

109

00:04:31.963  -->  00:04:33.360
you'll have access to all
110

110

00:04:33.360  -->  00:04:36.730
but the private field of superclass.
111

111

00:04:36.730  -->  00:04:38.130
So if you run this code now,
112

112

00:04:42.640  -->  00:04:45.480
so looking at the output we can see here that superclass
113

113

00:04:45.480  -->  00:04:47.740
has access to all its own attributes.
114

114

00:04:47.740  -->  00:04:49.390
This dot public int was 10.
115

115

00:04:49.390  -->  00:04:51.130
This dot package int was 20.
116

116

00:04:51.130  -->  00:04:54.520
Protected int was 30, and profit int was 40.
117

117

00:04:54.520  -->  00:04:57.740
A non subclass class has access to all but private fields
118

118

00:04:57.740  -->  00:04:59.890
of another class in the same package.
119

119

00:04:59.890  -->  00:05:02.850
And we're seeing that with the output superclass public int,
120

120

00:05:02.850  -->  00:05:06.140
it was 10 packages, 20 protected int 30.
121

121

00:05:06.140  -->  00:05:08.710
Now, I don't think I've introduced any surprises here.
122

122

00:05:08.710  -->  00:05:10.910
But I do wanna complicate matters a bit now.
123

123

00:05:12.720  -->  00:05:13.830
I'm gonna take the opportunity
124

124

00:05:13.830  -->  00:05:15.080
to create a new package as well.
125

125

00:05:15.080  -->  00:05:19.593
So this one's going to be package B dot parents class.
126

126

00:05:20.800  -->  00:05:23.250
So obviously a new package and a new class.
127

127

00:05:23.250  -->  00:05:24.400
I'll paste the code in.
128

128

00:05:26.070  -->  00:05:28.050
Okay, so there's our code.
129

129

00:05:28.050  -->  00:05:31.123
This is class whose fall has a class
130

130

00:05:31.123  -->  00:05:33.670
that you can see parent class.
131

131

00:05:33.670  -->  00:05:35.470
And that extends to superclass
132

132

00:05:35.470  -->  00:05:38.110
that we've just looked at earlier in this video.
133

133

00:05:38.110  -->  00:05:40.730
And that's in another package, package A
134

134

00:05:40.730  -->  00:05:42.180
and you see it's kinda main with their
135

135

00:05:42.180  -->  00:05:43.741
to do some instantiation.
136

136

00:05:43.741  -->  00:05:46.330
And so it's a got the test method as well.
137

137

00:05:46.330  -->  00:05:48.340
And you can see they're actually confirming
138

138

00:05:48.340  -->  00:05:52.090
what access level we've got to the various fields.
139

139

00:05:52.090  -->  00:05:54.420
They're also using the use of super to get access
140

140

00:05:54.420  -->  00:05:55.597
to the protected.
141

141

00:05:56.690  -->  00:05:58.890
And we've also got here package B class
142

142

00:05:58.890  -->  00:06:00.380
as simply as a method test access,
143

143

00:06:00.380  -->  00:06:03.190
printing only the attributes available to it on superclass.
144

144

00:06:03.190  -->  00:06:04.540
So let's actually run this.
145

145

00:06:08.420  -->  00:06:10.730
You see here non subclass, class in a different package
146

146

00:06:10.730  -->  00:06:13.820
has access only to a public classes as public fields,
147

147

00:06:13.820  -->  00:06:16.280
this case superclass dot public int,
148

148

00:06:16.280  -->  00:06:18.040
in package B parent class has access
149

149

00:06:18.040  -->  00:06:21.030
to only its parents, public and protected attributes
150

150

00:06:21.030  -->  00:06:22.490
if it's declared in.
151

151

00:06:22.490  -->  00:06:24.240
And it's just gone off screen,
152

152

00:06:24.240  -->  00:06:26.370
another package and you can see this is dot public int
153

153

00:06:26.370  -->  00:06:29.710
protected int and use of super dot protected int
154

154

00:06:29.710  -->  00:06:31.840
noting that the code to supple using super
155

155

00:06:31.840  -->  00:06:34.560
is superfluous here in this context.
156

156

00:06:34.560  -->  00:06:36.320
So essentially, here, we've proven that we've got access
157

157

00:06:36.320  -->  00:06:37.730
to the protected fields
158

158

00:06:37.730  -->  00:06:41.240
through the hierarchical references like this and super.
159

159

00:06:41.240  -->  00:06:42.750
So let's add some code here.
160

160

00:06:42.750  -->  00:06:44.870
We wanna get back to the test access method
161

161

00:06:44.870  -->  00:06:47.620
of the class we've just created here, the parent class.
162

162

00:06:48.880  -->  00:06:50.130
Let's post the code here.
163

163

00:06:52.860  -->  00:06:54.201
This code you can see is instantiating
164

164

00:06:54.201  -->  00:06:56.200
a new parent class object
165

165

00:06:56.200  -->  00:06:58.530
within a method of the parent class itself.
166

166

00:06:58.530  -->  00:07:00.300
Then the difference here is subtle.
167

167

00:07:00.300  -->  00:07:02.207
We're not accessing the protected member
168

168

00:07:02.207  -->  00:07:05.480
for a direct call through a hierarchical qualifier like this
169

169

00:07:05.480  -->  00:07:06.360
or super,
170

170

00:07:06.360  -->  00:07:09.690
rather we're accessing the attribute through a new instance.
171

171

00:07:09.690  -->  00:07:14.400
If you run this, new parent class,
172

172

00:07:14.400  -->  00:07:16.620
dot protected int equals 30.
173

173

00:07:16.620  -->  00:07:19.620
You see the code compiles and (murmur)
174

174

00:07:19.620  -->  00:07:21.610
Alright let's paste some more code into the same method,
175

175

00:07:21.610  -->  00:07:24.340
below what we've just previously pasted in.
176

176

00:07:24.340  -->  00:07:25.490
So what happens here,
177

177

00:07:25.490  -->  00:07:28.000
if we access through an instance of a superclass
178

178

00:07:28.000  -->  00:07:30.190
we've try to access as the case may be.
179

179

00:07:30.190  -->  00:07:31.226
As you can see the code here fails
180

180

00:07:31.226  -->  00:07:35.110
to compile superclasses defined in another package
181

181

00:07:35.110  -->  00:07:38.490
in creating an instance of it even in a child class of it,
182

182

00:07:38.490  -->  00:07:40.350
doesn't allow access to this protected field
183

183

00:07:40.350  -->  00:07:41.400
as you can see there.
184

184

00:07:42.370  -->  00:07:43.850
And we've got confirmation protected,
185

185

00:07:43.850  -->  00:07:46.733
int has protected access in package A dot superclass.
186

186

00:07:47.690  -->  00:07:50.170
So let's cut it that out and replace it
187

187

00:07:52.602  -->  00:07:53.435
with this code.
188

188

00:08:01.070  -->  00:08:02.114
Alright, so you can see there that
189

189

00:08:02.114  -->  00:08:04.560
that code actually executes.
190

190

00:08:04.560  -->  00:08:06.380
Alright, so let's end the video here.
191

191

00:08:06.380  -->  00:08:07.760
In the next one we'll start talking more
192

192

00:08:07.760  -->  00:08:09.850 line:15% 
about the Protected Access Modifier,
193

193

00:08:09.850  -->  00:08:11.600 line:15% 
specifically because that's very ripe
194

194

00:08:11.600  -->  00:08:14.743 line:15% 
for tricky exam questions. See you in the next video.
