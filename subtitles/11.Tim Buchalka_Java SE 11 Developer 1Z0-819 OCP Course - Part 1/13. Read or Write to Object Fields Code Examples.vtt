WEBVTT
1
1

00:00:05.330  -->  00:00:06.880
<v Instructor>All right so let's walk through some examples</v>
2

2

00:00:06.880  -->  00:00:09.550
in code now what we've talked about in the previous video.
3

3

00:00:09.550  -->  00:00:11.520
We'll start off by looking at static variables
4

4

00:00:11.520  -->  00:00:15.120
or class fields and comparing them to instance variables.
5

5

00:00:15.120  -->  00:00:17.400
So we need a new class created in our Objects project
6

6

00:00:17.400  -->  00:00:18.700
called StaticFieldSamples.
7

7

00:00:21.428  -->  00:00:24.428
(keyboard clacking)
8

8

00:00:28.354  -->  00:00:29.780
Okay, so there's the code.
9

9

00:00:29.780  -->  00:00:32.360
This code's showing both a static and non-static field
10

10

00:00:32.360  -->  00:00:34.760
and the different ways to refer to these fields.
11

11

00:00:34.760  -->  00:00:36.120
So we can see initially we've declared
12

12

00:00:36.120  -->  00:00:39.790
a new class here, SuperClass, and that's defined up here.
13

13

00:00:39.790  -->  00:00:42.110
You can that in that SuperClass, we've got
14

14

00:00:42.110  -->  00:00:43.870
a static field, name
15

15

00:00:43.870  -->  00:00:46.960
and also an instance sub-variable, instanceName.
16

16

00:00:46.960  -->  00:00:49.500
We've got a constructor there that is showing you
17

17

00:00:49.500  -->  00:00:52.040
a couple of ways to refer to variables.
18

18

00:00:52.040  -->  00:00:54.210
Using SuperClass.name equals name,
19

19

00:00:54.210  -->  00:00:56.110
that's referring to a static field
20

20

00:00:56.110  -->  00:00:58.210
using a class name with a dot operator.
21

21

00:00:58.210  -->  00:01:00.890
And also showing you that the non-static field
22

22

00:01:00.890  -->  00:01:02.310
using this reference with dot operator,
23

23

00:01:02.310  -->  00:01:03.330
and I'm sure you seen that before,
24

24

00:01:03.330  -->  00:01:06.620
this.instanceName equals instanceName
25

25

00:01:06.620  -->  00:01:09.560
for resetting the value passed to this constructor.
26

26

00:01:09.560  -->  00:01:11.339
We're also using that in the toString.
27

27

00:01:11.339  -->  00:01:14.010
Then in our StaticFieldSamples class, there,
28

28

00:01:14.010  -->  00:01:15.150
we've got a main method,
29

29

00:01:15.150  -->  00:01:17.750
instantiating the SuperClass a number of times,
30

30

00:01:17.750  -->  00:01:20.400
passing various arguments, and then printing out the values.
31

31

00:01:20.400  -->  00:01:21.750
So let's actually run this.
32

32

00:01:23.840  -->  00:01:25.500
Okay, you can see the output down at the bottom.
33

33

00:01:25.500  -->  00:01:27.490
Basically, you can see that the static field name
34

34

00:01:27.490  -->  00:01:30.120
resides on the class and each instance created
35

35

00:01:30.120  -->  00:01:31.930
is resetting the same variable.
36

36

00:01:31.930  -->  00:01:33.670
The instanceName field, on the other hand,
37

37

00:01:33.670  -->  00:01:34.930
is unique to each instance,
38

38

00:01:34.930  -->  00:01:37.480
and each object has its own value for the field,
39

39

00:01:37.480  -->  00:01:39.980
which is unique to that instance.
40

40

00:01:39.980  -->  00:01:41.890
No real surprises there.
41

41

00:01:41.890  -->  00:01:44.090
All right, let's now look at final fields.
42

42

00:01:44.090  -->  00:01:46.000
So we're gonna create a new class for this
43

43

00:01:46.000  -->  00:01:47.523
We'll call it FinalFields.
44

44

00:01:48.496  -->  00:01:51.496
(keyboard clacking)
45

45

00:01:53.815  -->  00:01:55.130
All right, so looking at the code here,
46

46

00:01:55.130  -->  00:01:57.560
we've got a Constants class, as you can see there,
47

47

00:01:57.560  -->  00:02:01.130
and that's got three static fields, ONE, TWO and THREE.
48

48

00:02:01.130  -->  00:02:02.790
The final static fields are initialised
49

49

00:02:02.790  -->  00:02:04.920
either in the declaration, and you can see
50

50

00:02:04.920  -->  00:02:06.330
that's the case for ONE and TWO,
51

51

00:02:06.330  -->  00:02:08.330
or in the static initializer,
52

52

00:02:08.330  -->  00:02:09.510
as is the case for the variable
53

53

00:02:09.510  -->  00:02:11.140
with the name of THREE there.
54

54

00:02:11.140  -->  00:02:13.910
Let's move on down, and also I've got a FinalFields class.
55

55

00:02:13.910  -->  00:02:16.410
So the FinalFields class has two regular fields,
56

56

00:02:16.410  -->  00:02:17.940
not static ones.
57

57

00:02:17.940  -->  00:02:20.210
So these types of fields must be initialised either in
58

58

00:02:20.210  -->  00:02:23.490
the declaration or in an initializer or a constructor.
59

59

00:02:23.490  -->  00:02:25.080
So you can see that we're initialising FOUR there
60

60

00:02:25.080  -->  00:02:27.630
on line 32 in the initializer block,
61

61

00:02:27.630  -->  00:02:30.163
and we're initialising FIVE in the constructor.
62

62

00:02:31.424  -->  00:02:32.374
So if you run this.
63

63

00:02:34.520  -->  00:02:37.480
And you can see the values in the output pane.
64

64

00:02:37.480  -->  00:02:39.530
So let's mix this up a little bit now.
65

65

00:02:39.530  -->  00:02:41.190
What I'm gonna do is add another constructor
66

66

00:02:41.190  -->  00:02:42.743
to the FinalFields class.
67

67

00:02:43.854  -->  00:02:45.950
And I'm gonna add that just before the main method,
68

68

00:02:45.950  -->  00:02:48.893
after the no-arguments constructor on line 38.
69

69

00:02:50.170  -->  00:02:52.460
And you can see that we're also initialising
70

70

00:02:52.460  -->  00:02:55.570
the variable FIVE in that constructor, as well.
71

71

00:02:55.570  -->  00:02:57.940
The same that we're doing in the constructor
72

72

00:02:57.940  -->  00:03:00.073
with no arguments on line 38.
73

73

00:03:01.090  -->  00:03:03.300
Before we run it, let's just add some output
74

74

00:03:03.300  -->  00:03:05.000
to make sure that it is working.
75

75

00:03:05.000  -->  00:03:07.650
I'll add that right at the bottom of our main method.
76

76

00:03:09.550  -->  00:03:10.383
Run this code.
77

77

00:03:13.090  -->  00:03:14.330
And you can see that we've got our instance
78

78

00:03:14.330  -->  00:03:15.920
down at the bottom there, final field FOUR
79

79

00:03:15.920  -->  00:03:19.820
and final field FIVE with the values four and six.
80

80

00:03:19.820  -->  00:03:21.480
Basically, you can see that the second object
81

81

00:03:21.480  -->  00:03:24.230
executed the constructor that took a parameter,
82

82

00:03:24.230  -->  00:03:26.220
and we were able to set the final field value,
83

83

00:03:26.220  -->  00:03:30.050
in this case, to six, based on what was called on line 57.
84

84

00:03:30.050  -->  00:03:32.320
And obviously, equates to that constructor,
85

85

00:03:32.320  -->  00:03:36.090
which sets our variable FIVE to that value.
86

86

00:03:36.090  -->  00:03:38.500
All right, that said, what actually happens
87

87

00:03:38.500  -->  00:03:40.940
if we don't set the final variable FIVE
88

88

00:03:40.940  -->  00:03:42.090
in the second constructor.
89

89

00:03:42.090  -->  00:03:44.170
We know that it's already defined on line 39
90

90

00:03:44.170  -->  00:03:46.160
in the no-arguments constructor.
91

91

00:03:46.160  -->  00:03:48.033
So if I comment that line 44 out,
92

92

00:03:48.910  -->  00:03:50.700
you can see that we've got an error.
93

93

00:03:50.700  -->  00:03:52.300
Come over here and click on that
94

94

00:03:53.138  -->  00:03:53.971
and the error is now,
95

95

00:03:53.971  -->  00:03:56.550
"Variable 'FIVE' might not have been initialised."
96

96

00:03:56.550  -->  00:03:59.280
And that's because all constructors must initialise
97

97

00:03:59.280  -->  00:04:02.050
a final non-static field if you're not going to
98

98

00:04:02.050  -->  00:04:04.110
initialise the field in the declaration,
99

99

00:04:04.110  -->  00:04:06.870
and they haven't initialised it in an initializer.
100

100

00:04:06.870  -->  00:04:09.280
And obviously, in this case, we haven't done that.
101

101

00:04:09.280  -->  00:04:11.600
So I'm going to undo that change again,
102

102

00:04:11.600  -->  00:04:13.660
to make the code valid again.
103

103

00:04:13.660  -->  00:04:14.803
Now, the other thing I wanna show you is
104

104

00:04:14.803  -->  00:04:17.100
that you cannot set the value in the initializer
105

105

00:04:17.100  -->  00:04:18.370
and the constructor.
106

106

00:04:18.370  -->  00:04:19.990
If you do that, you'll actually get an error.
107

107

00:04:19.990  -->  00:04:21.950
So if I go back to our initializer up here,
108

108

00:04:21.950  -->  00:04:24.810
and I attempt to initialise the variable,
109

109

00:04:24.810  -->  00:04:26.610
paste the code in there.
110

110

00:04:26.610  -->  00:04:27.443
And there's the code, and it's obviously valid
111

111

00:04:27.443  -->  00:04:28.530
in the initializer,
112

112

00:04:28.530  -->  00:04:30.117
but here now, in the constructor, we've got
113

113

00:04:30.117  -->  00:04:33.509
"Variable 'FIVE' might already have been assigned to."
114

114

00:04:33.509  -->  00:04:35.320
And you can see it's also the case in the other constructor.
115

115

00:04:35.320  -->  00:04:37.600
And even if I commented out one of those constructors,
116

116

00:04:37.600  -->  00:04:39.580
obviously we still have a valid problem
117

117

00:04:39.580  -->  00:04:41.113
in the other constructor.
118

118

00:04:42.360  -->  00:04:44.590
So if I come back up here now, and just comment out
119

119

00:04:44.590  -->  00:04:47.600
the change that I added to our initializer block,
120

120

00:04:47.600  -->  00:04:49.240
the code's now valid.
121

121

00:04:49.240  -->  00:04:50.240
And we'll run again.
122

122

00:04:51.651  -->  00:04:53.153
All right, there you go.
123

123

00:04:55.388  -->  00:04:57.350
All right, so this video we discussed Access fields,
124

124

00:04:57.350  -->  00:04:59.650
static, instance, final or not,
125

125

00:04:59.650  -->  00:05:02.130
both within a class that defines the fields optionally,
126

126

00:05:02.130  -->  00:05:05.050
using the this qualifier, and outside,
127

127

00:05:05.050  -->  00:05:07.650
using the reference name with the dot operator.
128

128

00:05:07.650  -->  00:05:09.610
The fields are accessible outside the class
129

129

00:05:09.610  -->  00:05:11.570
because of their access modifier,
130

130

00:05:11.570  -->  00:05:14.290
which we're gonna review in a video coming up.
131

131

00:05:14.290  -->  00:05:17.090
Now we haven't discussed transient or volatile fields,
132

132

00:05:17.090  -->  00:05:18.510
except to know their meaning
133

133

00:05:18.510  -->  00:05:20.483
and that they are valid modifiers.
134

134

00:05:21.367  -->  00:05:22.200
All right, so moving forward,
135

135

00:05:22.200  -->  00:05:24.100
we've got a quiz coming up next, good luck.
136

136

00:05:24.100  -->  00:05:25.300
And then after that I'll see you
137

137

00:05:25.300  -->  00:05:27.200
and we'll start talking about methods.
