WEBVTT
1
1

00:00:05.310  -->  00:00:07.600
<v ->In the previous video, I demonstrated</v>
2

2

00:00:07.600  -->  00:00:09.450
that you could cast variables,
3

3

00:00:09.450  -->  00:00:11.980
but because numbers are stored in two's complement,
4

4

00:00:11.980  -->  00:00:13.980
and the last bit is for the sign,
5

5

00:00:13.980  -->  00:00:16.980
you can overflow or underflow the values.
6

6

00:00:16.980  -->  00:00:19.950
In this code sample, we'll explore a Java 8 feature
7

7

00:00:19.950  -->  00:00:22.050
that has some support for unsigned ints
8

8

00:00:22.050  -->  00:00:23.463
and unsigned longs.
9

9

00:00:24.650  -->  00:00:26.330
So I'm gonna start by creating a new class
10

10

00:00:26.330  -->  00:00:27.450
in our current project
11

11

00:00:27.450  -->  00:00:29.487
and calling it UnsignedExample.
12

12

00:00:32.578  -->  00:00:35.578
(keyboard clacking)
13

13

00:00:36.560  -->  00:00:37.553
Paste some code in.
14

14

00:00:39.410  -->  00:00:41.250
Okay, so there's the code.
15

15

00:00:41.250  -->  00:00:42.740
So looking at this code,
16

16

00:00:42.740  -->  00:00:45.050
we're trying to purposely overflow our variable
17

17

00:00:45.050  -->  00:00:48.450
in testInt, as you can see on line 16.
18

18

00:00:48.450  -->  00:00:51.920
We've got Integer.MAX_VALUE and we're adding three to that
19

19

00:00:51.920  -->  00:00:53.660
and then printing out the output.
20

20

00:00:53.660  -->  00:00:55.810
Moving on down, we're setting the value to a long
21

21

00:00:55.810  -->  00:00:58.270
which will represent our number without overflowing
22

22

00:00:58.270  -->  00:01:00.500
because obviously a long can take the maximum value
23

23

00:01:00.500  -->  00:01:01.830
n more of an integer,
24

24

00:01:01.830  -->  00:01:03.340
then we're printing out the results of that.
25

25

00:01:03.340  -->  00:01:05.850
But down here, starting on line 26,
26

26

00:01:05.850  -->  00:01:07.560
as of Java 8 you can evaluate the number
27

27

00:01:07.560  -->  00:01:09.190
as an unsigned int.
28

28

00:01:09.190  -->  00:01:11.730
So we can see an example of that on line 26
29

29

00:01:11.730  -->  00:01:12.950
and then we're outputting that.
30

30

00:01:12.950  -->  00:01:15.100
But also, we can take the same number,
31

31

00:01:15.100  -->  00:01:15.933
wrap it in a String,
32

32

00:01:15.933  -->  00:01:18.910
and then pass that to the Integer.parseUnsignedInt
33

33

00:01:18.910  -->  00:01:21.430
method, and we're doing that on line 31.
34

34

00:01:21.430  -->  00:01:23.053
And printing out the results.
35

35

00:01:24.050  -->  00:01:25.400
So let's actually run this.
36

36

00:01:28.950  -->  00:01:31.530
And then the values you can see on screen here now.
37

37

00:01:31.530  -->  00:01:32.363
Okay.
38

38

00:01:33.580  -->  00:01:36.000
Right, so let's move on now to binary literals.
39

39

00:01:36.000  -->  00:01:38.230
They were introduced in Java 7.
40

40

00:01:38.230  -->  00:01:40.270
The exam may include a question or two
41

41

00:01:40.270  -->  00:01:42.460
with these in them, so let's look at them.
42

42

00:01:42.460  -->  00:01:44.190
We need to start out by creating a class
43

43

00:01:44.190  -->  00:01:46.390
in our current project called BinaryExample.
44

44

00:01:49.727  -->  00:01:52.727
(keyboard clacking)
45

45

00:01:53.750  -->  00:01:54.663
Paste the code in.
46

46

00:01:57.040  -->  00:01:59.450
Okay, you can see that we've got various examples
47

47

00:01:59.450  -->  00:02:00.670
of binary literals here,
48

48

00:02:00.670  -->  00:02:02.680
starting out with 8-bit values
49

49

00:02:02.680  -->  00:02:04.490
and showing what the appropriate value is
50

50

00:02:04.490  -->  00:02:05.790
on the right-hand side.
51

51

00:02:05.790  -->  00:02:08.410
Of course I've got a short there with the expected value.
52

52

00:02:08.410  -->  00:02:11.090
We also have some 32-bit int values.
53

53

00:02:11.090  -->  00:02:13.520
And general note there, that the B in the binary literal
54

54

00:02:13.520  -->  00:02:14.580
can be upper or lower case,
55

55

00:02:14.580  -->  00:02:15.880
you can see an example of both
56

56

00:02:15.880  -->  00:02:18.150
on lines 21 through 22,
57

57

00:02:18.150  -->  00:02:19.790
but also various values,
58

58

00:02:19.790  -->  00:02:22.790
as you can see for the integer data type there.
59

59

00:02:22.790  -->  00:02:24.620
Remember that you don't have to represent the literal
60

60

00:02:24.620  -->  00:02:27.420
with the actual number of bits that the data type has,
61

61

00:02:27.420  -->  00:02:30.260
and as shown particularly in the int examples,
62

62

00:02:30.260  -->  00:02:31.943
we've got a literal there, 0b101.
63

63

00:02:33.380  -->  00:02:35.820
The other 29 bits in that scenario,
64

64

00:02:35.820  -->  00:02:37.860
because it's a 32-bit number are inferred
65

65

00:02:37.860  -->  00:02:38.900
and are zeroes.
66

66

00:02:38.900  -->  00:02:41.280
And also you see the underscore in these literals
67

67

00:02:41.280  -->  00:02:42.660
as you've seen examples of there,
68

68

00:02:42.660  -->  00:02:44.660
that definitely helps to show each byte
69

69

00:02:44.660  -->  00:02:45.880
if you want to do that.
70

70

00:02:45.880  -->  00:02:49.360
Now moving on to the 64-bit examples using longs,
71

71

00:02:49.360  -->  00:02:52.470
note the L suffix for the first 64-bit long there.
72

72

00:02:52.470  -->  00:02:54.230
We need to do that because the value exceeds
73

73

00:02:54.230  -->  00:02:56.900
a literal int and you'll get an error if you don't do that.
74

74

00:02:56.900  -->  00:02:58.630
And the value is shown above that,
75

75

00:02:58.630  -->  00:03:00.540
because I wanted to include it on the screen.
76

76

00:03:00.540  -->  00:03:01.860
And in the second example,
77

77

00:03:01.860  -->  00:03:05.520
the value hasn't, it's not using the suffix L there,
78

78

00:03:05.520  -->  00:03:06.850
and the reason for that is that the number
79

79

00:03:06.850  -->  00:03:07.760
is small enough, so in other words
80

80

00:03:07.760  -->  00:03:10.870
it doesn't exceed the maximum size for an integer.
81

81

00:03:10.870  -->  00:03:13.600
And noting that the value's above that on line 27
82

82

00:03:13.600  -->  00:03:14.433
only the value five.
83

83

00:03:14.433  -->  00:03:16.107
All right, so let's actually run that.
84

84

00:03:17.240  -->  00:03:18.630
We get the expected output
85

85

00:03:18.630  -->  00:03:20.330
at the bottom of the screen there.
86

86

00:03:21.910  -->  00:03:23.460
So here's some things to remember
87

87

00:03:23.460  -->  00:03:25.520
when reviewing code samples on the exam
88

88

00:03:25.520  -->  00:03:27.910
that find themselves into many questions.
89

89

00:03:27.910  -->  00:03:31.060
Literals with decimal default to double, not float.
90

90

00:03:31.060  -->  00:03:32.700
Doubles and float don't overflow,
91

91

00:03:32.700  -->  00:03:34.290
since they're approximated.
92

92

00:03:34.290  -->  00:03:36.851
Local variable primitives aren't initialised.
93

93

00:03:36.851  -->  00:03:40.192
Class and static and instance members are initialised.
94

94

00:03:40.192  -->  00:03:43.353
Null is not a valid type for a primitive data type.
95

95

00:03:44.900  -->  00:03:46.480
And finally, you'll see a lot of constructors
96

96

00:03:46.480  -->  00:03:48.270
and methods in the following sections
97

97

00:03:48.270  -->  00:03:49.710
on String and StringBuilder
98

98

00:03:49.710  -->  00:03:52.850
that have parameters or methods that refer to code points.
99

99

00:03:52.850  -->  00:03:56.060
The Java specification includes the following description
100

100

00:03:56.060  -->  00:03:57.480
of the char data type
101

101

00:03:57.480  -->  00:03:59.710
and its limitations to represent all the possible
102

102

00:03:59.710  -->  00:04:01.020
characters available
103

103

00:04:01.020  -->  00:04:04.190
and Java's implementation to address the limitation.
104

104

00:04:04.190  -->  00:04:06.150
Now you don't need to memorise this description
105

105

00:04:06.150  -->  00:04:08.083
for the exam, but it is enlightening.
106

106

00:04:09.640  -->  00:04:12.120
Unicode character representations.
107

107

00:04:12.120  -->  00:04:14.120
The char data type and therefore the value
108

108

00:04:14.120  -->  00:04:16.430
that a Character object encapsulates
109

109

00:04:16.430  -->  00:04:19.310
are based on the original Unicode specification
110

110

00:04:19.310  -->  00:04:23.840
which defined characters as fixed-width 16-bit entities.
111

111

00:04:23.840  -->  00:04:26.300
The Unicode Standard has since been changed
112

112

00:04:26.300  -->  00:04:29.390
to allow for characters whose representation requires
113

113

00:04:29.390  -->  00:04:31.120
more than 16 bits.
114

114

00:04:31.120  -->  00:04:32.920
The range of legal code points
115

115

00:04:32.920  -->  00:04:35.683
is now U+0000 to U+10FFFF,
116

116

00:04:37.270  -->  00:04:39.363
known as Unicode scalar value.
117

117

00:04:41.010  -->  00:04:45.500
The set of characters from U+0000 to U+FFFF
118

118

00:04:45.500  -->  00:04:47.160
is sometimes referred to
119

119

00:04:47.160  -->  00:04:50.470
as the Basic Multilingual Plane, BMP.
120

120

00:04:50.470  -->  00:04:52.860
Characters whose code points are greater
121

121

00:04:52.860  -->  00:04:56.610
than U+FFFF are called supplementary characters.
122

122

00:04:56.610  -->  00:05:00.500
The Java platform uses the UTF-16 representation
123

123

00:05:00.500  -->  00:05:02.440
in char arrays, and in the String
124

124

00:05:02.440  -->  00:05:04.260
and StringBuffer classes.
125

125

00:05:04.260  -->  00:05:06.630
In this representation, supplementary characters
126

126

00:05:06.630  -->  00:05:09.230
are represented as a pair of char values,
127

127

00:05:09.230  -->  00:05:11.480
the first from the high-surrogates range,
128

128

00:05:11.480  -->  00:05:15.810
and that's Unicode D800 to Unicode DBFF,
129

129

00:05:15.810  -->  00:05:17.820
the second from the low-surrogates range,
130

130

00:05:17.820  -->  00:05:21.700
Unicode DC00 to Unicode DFFF.
131

131

00:05:21.700  -->  00:05:22.620
All right, so let's move on now,
132

132

00:05:22.620  -->  00:05:23.740
coming up next is a quiz,
133

133

00:05:23.740  -->  00:05:25.440
and then we're going to move on to
134

134

00:05:25.440  -->  00:05:26.890
the next part of this section,
135

135

00:05:26.890  -->  00:05:29.320
and that's identifying the scope of a variable.
136

136

00:05:29.320  -->  00:05:30.620
See you in the next video.
