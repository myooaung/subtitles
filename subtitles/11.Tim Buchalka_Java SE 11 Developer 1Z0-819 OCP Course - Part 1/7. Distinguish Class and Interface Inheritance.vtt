WEBVTT
1
1

00:00:05.251  -->  00:00:06.270
<v ->All right, so let's have a discussion</v>
2

2

00:00:06.270  -->  00:00:08.210
on distinguishing class inheritance
3

3

00:00:08.210  -->  00:00:09.720
from interface inheritance,
4

4

00:00:09.720  -->  00:00:12.120
including abstract classes.
5

5

00:00:12.120  -->  00:00:14.960
So because java only supports a class inheriting
6

6

00:00:14.960  -->  00:00:17.210
from one parent class directly,
7

7

00:00:17.210  -->  00:00:18.700
the inheritance tree looking
8

8

00:00:18.700  -->  00:00:20.810
from the most specific class
9

9

00:00:20.810  -->  00:00:23.340
to the least specific is in a straight line
10

10

00:00:23.340  -->  00:00:26.690
up the tree, a direct path to the root.
11

11

00:00:26.690  -->  00:00:28.720
A base class can have many branches,
12

12

00:00:28.720  -->  00:00:30.840
but a branch has only one trunk
13

13

00:00:30.840  -->  00:00:32.540
from which it's derived.
14

14

00:00:32.540  -->  00:00:34.839
Java enforces rules through each derivative,
15

15

00:00:34.839  -->  00:00:37.490
so there is no conflict or ambiguity
16

16

00:00:37.490  -->  00:00:40.190
with inherited methods and fields.
17

17

00:00:40.190  -->  00:00:42.490
We've already seen the implementing interfaces
18

18

00:00:42.490  -->  00:00:44.860
can cause ambiguity and confusion
19

19

00:00:44.860  -->  00:00:46.510
if you're inheriting a method
20

20

00:00:46.510  -->  00:00:49.410
from your parent class that has the same signature
21

21

00:00:49.410  -->  00:00:51.550
but a different return type from the interface
22

22

00:00:51.550  -->  00:00:52.530
you might want to implement,
23

23

00:00:52.530  -->  00:00:55.357
or if you're implementing multiple interfaces
24

24

00:00:55.357  -->  00:00:57.223
with clashing methods.
25

25

00:00:58.070  -->  00:01:00.930
Both types of inheritance support polymorphism,
26

26

00:01:00.930  -->  00:01:02.130
allowing you to write code
27

27

00:01:02.130  -->  00:01:04.260
for the most generic case possible,
28

28

00:01:04.260  -->  00:01:06.340
but accepting any object typed
29

29

00:01:06.340  -->  00:01:08.500
to the class or interface as long as the agreed-on
30

30

00:01:08.500  -->  00:01:11.280
behaviour exists, which it must.
31

31

00:01:11.280  -->  00:01:14.632
You can cast to a class type or an interface.
32

32

00:01:14.632  -->  00:01:17.740
We've seen the the compiler's not as stringent
33

33

00:01:17.740  -->  00:01:19.230
with its type checking when casting
34

34

00:01:19.230  -->  00:01:22.470
to interface types, because unlike that direct look up
35

35

00:01:22.470  -->  00:01:25.900
from the derived class to its outer most parent,
36

36

00:01:25.900  -->  00:01:29.680
inheriting from interfaces may create an overlapping web
37

37

00:01:29.680  -->  00:01:31.700
and the compiler can make no assumptions
38

38

00:01:31.700  -->  00:01:33.810
about which classes might or might not
39

39

00:01:33.810  -->  00:01:36.040
be implementing a particular interface
40

40

00:01:36.040  -->  00:01:38.370
or be inheriting the interface behaviour
41

41

00:01:38.370  -->  00:01:40.010
from a parent.
42

42

00:01:40.010  -->  00:01:43.690
Interface inheritance alone will not get you very far.
43

43

00:01:43.690  -->  00:01:46.123
Class inheritance can be used in an application
44

44

00:01:46.123  -->  00:01:49.270
without ever implementing interface inheritance,
45

45

00:01:49.270  -->  00:01:51.430
but your business entities may get cluttered
46

46

00:01:51.430  -->  00:01:53.810
with behaviour that's not really specific
47

47

00:01:53.810  -->  00:01:55.370
to their identity.
48

48

00:01:55.370  -->  00:01:57.560
Your application code may require more
49

49

00:01:57.560  -->  00:01:59.670
type checking and casting to force
50

50

00:01:59.670  -->  00:02:02.390
certain functions to occur without interfaces,
51

51

00:02:02.390  -->  00:02:05.610
or worse yet, your entity model may need to extend
52

52

00:02:05.610  -->  00:02:09.060
from base classes that mean nothing as an identifier
53

53

00:02:09.060  -->  00:02:12.193
but are there to facilitate a behaviour system wide.
54

54

00:02:13.680  -->  00:02:16.330
We discussed both interfaces and abstract classes
55

55

00:02:16.330  -->  00:02:18.760
in previous videos, but let's compare them here
56

56

00:02:18.760  -->  00:02:20.320
side by side.
57

57

00:02:20.320  -->  00:02:23.130
The following table describes the features and demonstrates
58

58

00:02:23.130  -->  00:02:25.710
where these two constructs overlap.
59

59

00:02:25.710  -->  00:02:27.890
You cannot instantiate an interface of this type.
60

60

00:02:27.890  -->  00:02:29.390
That's true for an abstract class
61

61

00:02:29.390  -->  00:02:31.810
and also true for an interface.
62

62

00:02:31.810  -->  00:02:33.680
They may contain a mix of methods declared
63

63

00:02:33.680  -->  00:02:35.840
with or without an implementation.
64

64

00:02:35.840  -->  00:02:38.500
True for abstract class, true for an interface,
65

65

00:02:38.500  -->  00:02:41.100
but with the interface any concrete method
66

66

00:02:41.100  -->  00:02:43.780
must be private, default or static.
67

67

00:02:43.780  -->  00:02:45.170
You can declare fields that are not
68

68

00:02:45.170  -->  00:02:47.130
public, static and final.
69

69

00:02:47.130  -->  00:02:49.040
This is true for an abstract class
70

70

00:02:49.040  -->  00:02:50.958
and for an interface it's false
71

71

00:02:50.958  -->  00:02:53.040
(all fields are automatically public, static,
72

72

00:02:53.040  -->  00:02:55.900
and final whether you declare them that way or not.
73

73

00:02:55.900  -->  00:02:58.720
Any other declaration will be a compiler error.)
74

74

00:02:58.720  -->  00:03:01.640
You can define public, protected, package-private
75

75

00:03:01.640  -->  00:03:03.590
or private concrete methods is true
76

76

00:03:03.590  -->  00:03:05.030
for an abstract class.
77

77

00:03:05.030  -->  00:03:06.891
It's false for an interface.
78

78

00:03:06.891  -->  00:03:09.340
(Only private concrete methods are allowed.)
79

79

00:03:09.340  -->  00:03:11.453
All other methods are public implicitly.
80

80

00:03:13.060  -->  00:03:14.690
You can define public, protected,
81

81

00:03:14.690  -->  00:03:16.930
or package-private abstract methods.
82

82

00:03:16.930  -->  00:03:18.630
True for an abstract class.
83

83

00:03:18.630  -->  00:03:20.273
False for an interface.
84

84

00:03:20.273  -->  00:03:23.216
(All abstract methods are public implicitly.)
85

85

00:03:23.216  -->  00:03:25.750
An abstract method must be declared abstract
86

86

00:03:25.750  -->  00:03:27.970
is true for an abstract class
87

87

00:03:27.970  -->  00:03:30.045
and for an interface, false
88

88

00:03:30.045  -->  00:03:33.330
(it's implied if a method has no body).
89

89

00:03:33.330  -->  00:03:35.553
And finally, you must declare the type abstract
90

90

00:03:35.553  -->  00:03:37.520
if it contains an abstract method
91

91

00:03:37.520  -->  00:03:39.340
is true for an abstract class,
92

92

00:03:39.340  -->  00:03:41.323
but it's false for an interface.
93

93

00:03:41.323  -->  00:03:42.960
(An interface is not declared abstract,
94

94

00:03:42.960  -->  00:03:44.330
although you can do it.
95

95

00:03:44.330  -->  00:03:46.530
It's just redundant since all methods
96

96

00:03:46.530  -->  00:03:49.227
are implicitly abstract unless they are concrete.)
97

97

00:03:50.470  -->  00:03:51.860
All right, so when would you use one
98

98

00:03:51.860  -->  00:03:53.430
versus the other?
99

99

00:03:53.430  -->  00:03:55.650
Well, generally speaking you create an interface
100

100

00:03:55.650  -->  00:03:58.760
for a very limited set of system wide behaviour
101

101

00:03:58.760  -->  00:04:01.250
without respect to any particular entity,
102

102

00:04:01.250  -->  00:04:03.760
so that regardless of what the entity is,
103

103

00:04:03.760  -->  00:04:06.210
it can execute behaviour, either reusable
104

104

00:04:06.210  -->  00:04:10.360
or customizable, in a common way among all types.
105

105

00:04:10.360  -->  00:04:12.350
You create an abstract class to fit
106

106

00:04:12.350  -->  00:04:15.290
your entity model for a specific application,
107

107

00:04:15.290  -->  00:04:17.430
abstracting a set of common behaviour
108

108

00:04:17.430  -->  00:04:20.910
and attributes into some extensible reusable unit.
109

109

00:04:20.910  -->  00:04:22.970
The abstract class makes sense logically
110

110

00:04:22.970  -->  00:04:25.870
as a way to describe your entity's identity,
111

111

00:04:25.870  -->  00:04:27.430
in other words to say that your entity
112

112

00:04:27.430  -->  00:04:30.080
is a abstract something, and it lends itself
113

113

00:04:30.080  -->  00:04:32.823
to reuse of both attributes and behaviour.
114

114

00:04:34.270  -->  00:04:36.430
Each derivative class is then responsible
115

115

00:04:36.430  -->  00:04:38.740
only for the additional functionality
116

116

00:04:38.740  -->  00:04:40.570
and features that are particular
117

117

00:04:40.570  -->  00:04:42.203
to its own specific type.
118

118

00:04:43.090  -->  00:04:44.730
The derivative classes can focus
119

119

00:04:44.730  -->  00:04:46.140
on what makes them different
120

120

00:04:46.140  -->  00:04:49.340
if you've abstracted the common features and behaviour
121

121

00:04:49.340  -->  00:04:51.343
into an inheritable unit.
122

122

00:04:53.140  -->  00:04:54.740
All right, so comparing abstract classes
123

123

00:04:54.740  -->  00:04:57.070
and interfaces, you want to abstract
124

124

00:04:57.070  -->  00:04:59.260
and conceptualise a business entity.
125

125

00:04:59.260  -->  00:05:01.670
Use an abstract class, yes.
126

126

00:05:01.670  -->  00:05:03.920
You want to define attributes and behaviour
127

127

00:05:03.920  -->  00:05:05.950
at an abstract level for a set
128

128

00:05:05.950  -->  00:05:07.570
of classes that'll inherit the behaviour
129

129

00:05:07.570  -->  00:05:08.560
and the state.
130

130

00:05:08.560  -->  00:05:11.060
Yes again, to use an abstract class.
131

131

00:05:11.060  -->  00:05:13.280
Your class requires access modifiers
132

132

00:05:13.280  -->  00:05:14.417
other than public
133

133

00:05:14.417  -->  00:05:16.940
(such as protected and private) for its members.
134

134

00:05:16.940  -->  00:05:19.510
Yes, to use an abstract class there as well.
135

135

00:05:19.510  -->  00:05:21.530
And next, your class requires non-static
136

136

00:05:21.530  -->  00:05:24.243
or non-final fields to access and modify state.
137

137

00:05:25.080  -->  00:05:26.943
Yes, to use an abstract class.
138

138

00:05:27.870  -->  00:05:29.450
You're defining a behaviour that
139

139

00:05:29.450  -->  00:05:31.960
disparate classes might share.
140

140

00:05:31.960  -->  00:05:34.350
Yes, to use an interface there.
141

141

00:05:34.350  -->  00:05:35.840
And finally, you wanna take advantage
142

142

00:05:35.840  -->  00:05:37.620
of multiple inheritance of type.
143

143

00:05:37.620  -->  00:05:40.190
Yes, to using an interface there.
144

144

00:05:40.190  -->  00:05:41.230
All right, so let's end the video here
145

145

00:05:41.230  -->  00:05:42.960
and in the next one, we'll swing over
146

146

00:05:42.960  -->  00:05:45.073
to IntelliJ and start to go through
147

147

00:05:45.073  -->  00:05:46.870
some of these concepts with code.
148

148

00:05:46.870  -->  00:05:48.223
See you in the next video.
