WEBVTT
1
1

00:00:05.260  -->  00:00:06.093
So in this video I wanna walk
2

2

00:00:06.093  -->  00:00:07.960
through the data transformation methods
3

3

00:00:07.960  -->  00:00:09.920
which are listed in this category
4

4

00:00:09.920  -->  00:00:11.490
because they transform the array list
5

5

00:00:11.490  -->  00:00:13.440
into another type of data.
6

6

00:00:13.440  -->  00:00:15.050
So we're gonna create a new work class
7

7

00:00:15.050  -->  00:00:18.023
in our arrays project; array transformation.
8

8

00:00:28.350  -->  00:00:30.240
This code demonstrates the different ways
9

9

00:00:30.240  -->  00:00:32.370
of using Arrays.copyOf methods
10

10

00:00:32.370  -->  00:00:34.550
which return a new array object.
11

11

00:00:34.550  -->  00:00:36.660
And all the array copies are mutable.
12

12

00:00:36.660  -->  00:00:38.540
So you can see that we're initially creating an array
13

13

00:00:38.540  -->  00:00:41.360
of integer objects, we're initialising the values
14

14

00:00:41.360  -->  00:00:43.290
using setAll on line 19.
15

15

00:00:43.290  -->  00:00:44.870
We're creating a copy of the array,
16

16

00:00:44.870  -->  00:00:48.317
same size using Arrays.copyOf on line 24 and 25.
17

17

00:00:49.205  -->  00:00:50.358
We're creating a copy of an array
18

18

00:00:50.358  -->  00:00:53.530
trimmed to a specified size on line 31.
19

19

00:00:53.530  -->  00:00:55.490
We're copying the array to a larger array,
20

20

00:00:55.490  -->  00:00:58.683
noting that extra elements get default values on line 34.
21

21

00:01:00.360  -->  00:01:03.150
We're creating a copy of a defined portion of the array
22

22

00:01:03.150  -->  00:01:04.930
on line 43.
23

23

00:01:04.930  -->  00:01:06.570
And looking at the values after a change,
24

24

00:01:06.570  -->  00:01:08.760
making that change on line 47.
25

25

00:01:08.760  -->  00:01:10.360
So let's actually run this code.
26

26

00:01:13.350  -->  00:01:16.837
We can see the value results showing using Arrays.copyOf.
27

27

00:01:19.180  -->  00:01:20.710
Now I'm not going to cover spliterator
28

28

00:01:20.710  -->  00:01:22.620
or stream methods at this time.
29

29

00:01:22.620  -->  00:01:25.710
These won't be tested on this certification exam.
30

30

00:01:25.710  -->  00:01:27.740
We've already talked about Arrays.asList
31

31

00:01:27.740  -->  00:01:29.380
in our previous code sample,
32

32

00:01:29.380  -->  00:01:32.290
so I'm not gonna be redundant and duplicate that here.
33

33

00:01:32.290  -->  00:01:34.600
Moving on let's now review some of the list data
34

34

00:01:34.600  -->  00:01:35.943
transformation methods.
35

35

00:01:36.920  -->  00:01:39.513
So we need a new class here; list transformation.
36

36

00:01:49.580  -->  00:01:51.260
And we're looking at subList,
37

37

00:01:51.260  -->  00:01:53.910
the subList method in this example,
38

38

00:01:53.910  -->  00:01:56.320
this creates a list from a smaller set of elements
39

39

00:01:56.320  -->  00:01:58.750
in the list and to array we're also looking at,
40

40

00:01:58.750  -->  00:02:01.970
which transforms the list to, unsurprisingly, an array.
41

41

00:02:01.970  -->  00:02:04.770
So you can see, we're creating a new integer array, line 15,
42

42

00:02:04.770  -->  00:02:07.420
setting the values, line 18.
43

43

00:02:07.420  -->  00:02:10.650
Using List.of to create another list on line 23.
44

44

00:02:10.650  -->  00:02:12.700
Then we get into using the sublist,
45

45

00:02:12.700  -->  00:02:15.670
creating a sublist of a list on line 26.
46

46

00:02:15.670  -->  00:02:16.900
Then we go from list to array
47

47

00:02:16.900  -->  00:02:20.040
which you can see in the code on line 31.
48

48

00:02:20.040  -->  00:02:20.940
So let's run this.
49

49

00:02:24.160  -->  00:02:25.310
And there's the result.
50

50

00:02:26.410  -->  00:02:27.580
Right.
51

51

00:02:27.580  -->  00:02:29.190
Now I got some more code to paste in now,
52

52

00:02:29.190  -->  00:02:30.793
so I'm gonna go ahead and do that.
53

53

00:02:32.560  -->  00:02:34.130
Now there's a couple of imports we'll need to add.
54

54

00:02:34.130  -->  00:02:35.570
We've got ListIterator there.
55

55

00:02:35.570  -->  00:02:37.220
I'm just gonna get Intellij to add those for us,
56

56

00:02:37.220  -->  00:02:40.450
but you'll need to add those, if you haven't already,
57

57

00:02:40.450  -->  00:02:41.653
and Iterator as well.
58

58

00:02:43.970  -->  00:02:46.980
And obviously that case, it's just added the two imports
59

59

00:02:46.980  -->  00:02:49.860
on lines nine and eleven in my case.
60

60

00:02:49.860  -->  00:02:51.040
Right, so looking at the actual code
61

61

00:02:51.040  -->  00:02:52.550
that I've pasted in there,
62

62

00:02:52.550  -->  00:02:55.300
firstly, on lines, say on line 38,
63

63

00:02:55.300  -->  00:02:56.700
we're looking at using the Iterator
64

64

00:02:56.700  -->  00:02:59.590
which allows forward processing only of list elements.
65

65

00:02:59.590  -->  00:03:01.060
And you can see that we've got a for loop there,
66

66

00:03:01.060  -->  00:03:03.230
that's effectively going through the values
67

67

00:03:03.230  -->  00:03:05.550
using the .iterator method from the list,
68

68

00:03:05.550  -->  00:03:07.170
another list in this case.
69

69

00:03:07.170  -->  00:03:10.570
And then I've got a more complex example using listIterator
70

70

00:03:10.570  -->  00:03:13.180
which allows backwards and forwards processing
71

71

00:03:13.180  -->  00:03:14.520
of list elements.
72

72

00:03:14.520  -->  00:03:15.353
We're doing a similar thing,
73

73

00:03:15.353  -->  00:03:16.640
setting that up and using a for loop
74

74

00:03:16.640  -->  00:03:18.530
to iterate through the list,
75

75

00:03:18.530  -->  00:03:21.850
but we're doing a specific test there, staying on line 51,
76

76

00:03:21.850  -->  00:03:24.960
and changing direction, going to the previous element,
77

77

00:03:24.960  -->  00:03:27.820
just to show that you can go both backwards and forwards
78

78

00:03:27.820  -->  00:03:29.250
if you're using the listIterator.
79

79

00:03:29.250  -->  00:03:30.350
So if we run this now.
80

80

00:03:33.010  -->  00:03:34.830
Mostly that should be confirmation, as you can see
81

81

00:03:34.830  -->  00:03:36.870
that listIterator gives you a bit more power,
82

82

00:03:36.870  -->  00:03:39.470
a bit more flexibility, more options, if you will,
83

83

00:03:39.470  -->  00:03:40.783
for processing elements.
84

84

00:03:42.070  -->  00:03:44.153
All right, so I'm gonna end the video here.
85

85

00:03:45.470  -->  00:03:49.250
We've seen here that the java.lang.Arrays utility class
86

86

00:03:49.317  -->  00:03:51.417
provides many of the methods you'd need
87

87

00:03:51.417  -->  00:03:53.783
to manipulate data in an array.
88

88

00:03:54.110  -->  00:03:56.260
And additionally, you can use some of the list methods,
89

89

00:03:56.260  -->  00:03:58.120
to directly access your array,
90

90

00:03:58.120  -->  00:04:01.340
if you use the Arrays.asList transformation method.
91

91

00:04:01.340  -->  00:04:04.150
The alternative to the array is an ArrayList,
92

92

00:04:04.150  -->  00:04:06.330
which is a collection of data that is resizeable
93

93

00:04:06.330  -->  00:04:08.980
and implements the interfaces List and Collection,
94

94

00:04:08.980  -->  00:04:10.360
to name a couple.
95

95

00:04:10.360  -->  00:04:12.440
Now, we'll be discussing ArrayLists in more detail
96

96

00:04:12.440  -->  00:04:14.290
in a later section in this course.
97

97

00:04:14.290  -->  00:04:15.350
For now though, let's move on.
98

98

00:04:15.350  -->  00:04:16.760
In the next video, we'll start talking
99

99

00:04:16.760  -->  00:04:18.900
about two dimensional arrays in Java
