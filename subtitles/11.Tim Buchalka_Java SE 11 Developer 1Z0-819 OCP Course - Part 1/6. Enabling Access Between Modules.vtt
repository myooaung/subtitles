WEBVTT
1
1

00:00:05.200  -->  00:00:06.550 line:15% 
<v Instructor>In the previous few videos,</v>
2

2

00:00:06.550  -->  00:00:10.140 line:15% 
I've introduced you to the module dash info dot Java file,
3

3

00:00:10.140  -->  00:00:11.780 line:15% 
and I stated that it was required
4

4

00:00:11.780  -->  00:00:15.540 line:15% 
to configure either a jar or exploded directory as a module.
5

5

00:00:15.540  -->  00:00:18.160 line:15% 
In this video, we're gonna discuss this special Java file
6

6

00:00:18.160  -->  00:00:20.390 line:15% 
and the different options available.
7

7

00:00:20.390  -->  00:00:23.530
So at a minimum, the module dash info dot Java file,
8

8

00:00:23.530  -->  00:00:25.260
which is a multi-directive file
9

9

00:00:25.260  -->  00:00:28.430
for module named, named module has this form.
10

10

00:00:28.430  -->  00:00:31.350
Module named module laterite curly braces.
11

11

00:00:31.350  -->  00:00:34.280
And we're saying something similar in previous videos.
12

12

00:00:34.280  -->  00:00:36.690
The official specification for the module declaration
13

13

00:00:36.690  -->  00:00:37.603
is shown below.
14

14

00:00:40.010  -->  00:00:41.390
From the Java specification,
15

15

00:00:41.390  -->  00:00:44.320
the following directive should populate module directive
16

16

00:00:44.320  -->  00:00:45.450
are as follows.
17

17

00:00:45.450  -->  00:00:47.460
And I wanna point out here that this three others
18

18

00:00:47.460  -->  00:00:48.610
which we're not gonna discuss,
19

19

00:00:48.610  -->  00:00:50.950
opens users and provides,
20

20

00:00:50.950  -->  00:00:53.260
they're not part of the first exam objective,
21

21

00:00:53.260  -->  00:00:55.220
and we won't be discussing them here.
22

22

00:00:55.220  -->  00:00:57.620
The first directive requires,
23

23

00:00:57.620  -->  00:01:00.600
as arguments requires modify and module name.
24

24

00:01:00.600  -->  00:01:03.270
And examples here requires org dot module dot a.
25

25

00:01:03.270  -->  00:01:06.690
Requires Java dot logging, requires transitive org dot
26

26

00:01:06.690  -->  00:01:07.780
module dot d.
27

27

00:01:07.780  -->  00:01:10.720
Requires static org dot module dot e.
28

28

00:01:10.720  -->  00:01:13.700
So a module specified in the requires directive
29

29

00:01:13.700  -->  00:01:16.390
is one which exports package or packages
30

30

00:01:16.390  -->  00:01:19.820
that the current module may or does have a dependency on.
31

31

00:01:19.820  -->  00:01:22.960
The current module we said to rate the module specified
32

32

00:01:22.960  -->  00:01:24.960
in the required directive.
33

33

00:01:24.960  -->  00:01:27.920
A requires directive with a transit modifier,
34

34

00:01:27.920  -->  00:01:29.470
allows any module,
35

35

00:01:29.470  -->  00:01:31.510
which requires the current module
36

36

00:01:31.510  -->  00:01:34.110
to have an implicit requires directive
37

37

00:01:34.110  -->  00:01:35.770
on the specified module.
38

38

00:01:35.770  -->  00:01:37.230
And a static directive,
39

39

00:01:37.230  -->  00:01:40.240
requires the specified module at compile time,
40

40

00:01:40.240  -->  00:01:42.083
but it's optional at run time.
41

41

00:01:44.380  -->  00:01:46.270
Next directive is exports.
42

42

00:01:46.270  -->  00:01:48.650
Its unqualified and the directive arguments
43

43

00:01:48.650  -->  00:01:50.910
are the package name, and example their,
44

44

00:01:50.910  -->  00:01:53.620
exports org dot packaged dot base.
45

45

00:01:53.620  -->  00:01:56.540
So package specified in the experts directive will expose
46

46

00:01:56.540  -->  00:01:58.850
it's public and protected types
47

47

00:01:58.850  -->  00:02:01.800
and the public and protect members of those types,
48

48

00:02:01.800  -->  00:02:04.350
to modules that read the current module.
49

49

00:02:04.350  -->  00:02:07.020
So in other words, specifies a requires directive
50

50

00:02:07.020  -->  00:02:09.170
to the current module.
51

51

00:02:09.170  -->  00:02:11.850
And next export, which is qualified this time,
52

52

00:02:11.850  -->  00:02:14.460
that would be package name to module name.
53

53

00:02:14.460  -->  00:02:16.480
And we can have more than one separated by comas.
54

54

00:02:16.480  -->  00:02:19.750
Some example there, exports org dot package dot util
55

55

00:02:19.750  -->  00:02:23.670
to org dot module dot a coma org dot module dot b.
56

56

00:02:23.670  -->  00:02:27.720
So the two key word makes it exports directive qualified
57

57

00:02:27.720  -->  00:02:29.630
and will be followed by a comma delimited list
58

58

00:02:29.630  -->  00:02:33.600
of modules that are termed Friends of the current module.
59

59

00:02:33.600  -->  00:02:36.410
So friends of a module have access to public
60

60

00:02:36.410  -->  00:02:38.030
and protected types,
61

61

00:02:38.030  -->  00:02:41.030
and the public and protected members of those types,
62

62

00:02:41.030  -->  00:02:42.750
of the exported package.
63

63

00:02:42.750  -->  00:02:44.750
And no other modules will have access
64

64

00:02:44.750  -->  00:02:48.070
and you limit the exposure of the export package types
65

65

00:02:48.070  -->  00:02:49.083
to its friends.
66

66

00:02:50.540  -->  00:02:52.650
Alright, so let's walk through each of these directives
67

67

00:02:52.650  -->  00:02:55.200
in the, carried in the next few videos.
68

68

00:02:55.200  -->  00:02:56.840
Now in the module testing project,
69

69

00:02:56.840  -->  00:02:58.650
we created in the last video,
70

70

00:02:58.650  -->  00:03:00.140
you need to create a new module called
71

71

00:03:00.140  -->  00:03:02.000
org dot module dot global.
72

72

00:03:02.000  -->  00:03:03.700
So I'm gonna go ahead and do that.
73

73

00:03:05.510  -->  00:03:07.593
(typing)
74

74

00:03:13.710  -->  00:03:15.510
I'm gonna close up my first module
75

75

00:03:15.510  -->  00:03:17.210
and the second module here.
76

76

00:03:17.210  -->  00:03:20.170
And there is our org dot module dot global.
77

77

00:03:20.170  -->  00:03:21.720
As is the case when you're creating modules,
78

78

00:03:21.720  -->  00:03:23.610
we need to right click the source folder
79

79

00:03:23.610  -->  00:03:25.340
for the module we created,
80

80

00:03:25.340  -->  00:03:28.180
and create our module dot info dot java file.
81

81

00:03:28.180  -->  00:03:29.820
You can see I've done that their in NL.
82

82

00:03:29.820  -->  00:03:33.100
Next what we wanna do is create a package in this folder
83

83

00:03:33.100  -->  00:03:34.403
and does some source code.
84

84

00:03:35.730  -->  00:03:38.680
So new Java class and it's going to be your
85

85

00:03:38.680  -->  00:03:43.680
org dot pkg dot appglobals dot,
86

86

00:03:43.980  -->  00:03:47.553
and we'll call the class application constants.
87

87

00:03:49.030  -->  00:03:50.430
Alright, so there's a class.
88

88

00:03:52.040  -->  00:03:54.510
Since it's just a class that has two fields,
89

89

00:03:54.510  -->  00:03:56.550
we wanna a constant app underscore name,
90

90

00:03:56.550  -->  00:03:58.360
and one that is a global counter
91

91

00:03:58.360  -->  00:03:59.960
which we provide two methods for
92

92

00:04:00.970  -->  00:04:03.040
at counter and get counter.
93

93

00:04:03.040  -->  00:04:04.760
Basically want to increment and I want
94

94

00:04:04.760  -->  00:04:05.860
to retreat the valley.
95

95

00:04:06.940  -->  00:04:09.610
And we're gonna expose this package to any other module
96

96

00:04:09.610  -->  00:04:10.830
that requires it,
97

97

00:04:10.830  -->  00:04:13.890
by changing the module info dash Java file.
98

98

00:04:13.890  -->  00:04:15.650
So when I opened this one,
99

99

00:04:15.650  -->  00:04:17.030
I'm gonna take the opportunity
100

100

00:04:17.030  -->  00:04:19.373
to close some of these other files.
101

101

00:04:20.848  -->  00:04:22.350
Alright, so there's our
102

102

00:04:22.350  -->  00:04:25.670
org dot module dot global module info file.
103

103

00:04:25.670  -->  00:04:27.460
So I'm gonna add that to a directive, as I said,
104

104

00:04:27.460  -->  00:04:28.640
and again what we're trying to do here is,
105

105

00:04:28.640  -->  00:04:31.680
we're exposing this package to any other module
106

106

00:04:31.680  -->  00:04:32.870
that requires it.
107

107

00:04:32.870  -->  00:04:37.800
So I'm going to type exports, org dot package, or pkg,
108

108

00:04:37.800  -->  00:04:39.610
dot appglobals,
109

109

00:04:39.610  -->  00:04:41.750
which of course, is the package we've defined.
110

110

00:04:41.750  -->  00:04:43.440
You can see that I've in the project pane.
111

111

00:04:43.440  -->  00:04:45.090
We can build this package
112

112

00:04:45.090  -->  00:04:48.739
by right clicking over here and building it.
113

113

00:04:48.739  -->  00:04:51.320
Okay, no problem so far,
114

114

00:04:51.320  -->  00:04:53.370
but let's open a terminal window here
115

115

00:04:54.230  -->  00:04:58.320
by clicking on the project time and opening in Terminal.
116

116

00:04:58.320  -->  00:04:59.530
Let's try typing in a command.
117

117

00:04:59.530  -->  00:05:04.530
Jdeps. Jdeps space dash dash module dash path space,
118

118

00:05:04.939  -->  00:05:08.560
slash production, nothing amazing, forward slash this time,
119

119

00:05:08.560  -->  00:05:10.530
which works just as well as in previous videos
120

120

00:05:10.530  -->  00:05:13.100
where I was doing backslashes dash m,
121

121

00:05:13.100  -->  00:05:15.440
at least on Windows forward slash should work on Linux
122

122

00:05:15.440  -->  00:05:18.883
and Mac, it's org dot module dot global.
123

123

00:05:20.828  -->  00:05:23.010
The now the output is listing the penalties
124

124

00:05:23.010  -->  00:05:25.260
that are implied here in Java dot base
125

125

00:05:25.260  -->  00:05:26.850
is one that's showing.
126

126

00:05:26.850  -->  00:05:28.310
So let's execute the Java command.
127

127

00:05:28.310  -->  00:05:32.113
So it's going to be Java space dash dash module,
128

128

00:05:33.070  -->  00:05:37.053
dash path again, space out forward slash production,
129

129

00:05:37.950  -->  00:05:40.543
base just as described dash module.
130

130

00:05:42.260  -->  00:05:44.710
It's going to be org dot module dot global again.
131

131

00:05:46.460  -->  00:05:47.293
And you can see describes,
132

132

00:05:47.293  -->  00:05:48.810
module path out both the dependencies
133

133

00:05:48.810  -->  00:05:50.960
and the directive information.
134

134

00:05:50.960  -->  00:05:52.500
We can see our exports there as well
135

135

00:05:52.500  -->  00:05:55.600
as the mandated requires Java dot pace.
136

136

00:05:55.600  -->  00:05:58.280
Alright so moving on now let's create a second module,
137

137

00:05:58.280  -->  00:06:01.760
which ostensibly would contain some kind of utility code.
138

138

00:06:01.760  -->  00:06:04.493
So we're going to create a new module up here.
139

139

00:06:05.520  -->  00:06:10.520
New module and we'll call this one org dot module dot util.
140

140

00:06:15.220  -->  00:06:17.230
Close the terminal panel.
141

141

00:06:17.230  -->  00:06:19.410
Let's send this a second module.
142

142

00:06:19.410  -->  00:06:20.430
Go through the same process
143

143

00:06:20.430  -->  00:06:22.010
to create a module dash info file
144

144

00:06:22.010  -->  00:06:24.150
by clicking on source, source folder
145

145

00:06:24.150  -->  00:06:25.590
and selecting module dash info.
146

146

00:06:25.590  -->  00:06:28.100
Aright then we got that open.
147

147

00:06:28.100  -->  00:06:29.900
In here we're going to talk requires
148

148

00:06:30.880  -->  00:06:34.971
transitive org dot module dot global.
149

149

00:06:34.971  -->  00:06:37.060
And I'm using the transitive modify here,
150

150

00:06:37.060  -->  00:06:40.230
so that anything that requires org dot module dot util,
151

151

00:06:40.230  -->  00:06:43.770
will also be able to read org dot module dot global.
152

152

00:06:43.770  -->  00:06:46.050
The net type require org dot module global in red.
153

153

00:06:46.050  -->  00:06:47.470
So if I click on that note,
154

154

00:06:47.470  -->  00:06:48.810
then we've got this little pop up
155

155

00:06:48.810  -->  00:06:50.000
where we should click.
156

156

00:06:50.000  -->  00:06:51.810
And intelliger is warning us to include,
157

157

00:06:51.810  -->  00:06:54.660
org dot modules dot global in its dependencies.
158

158

00:06:54.660  -->  00:06:56.960
Let's see its internal IML file.
159

159

00:06:56.960  -->  00:06:58.906
So we're gonna click on that
160

160

00:06:58.906  -->  00:07:01.530
to add the dependency on module org dot module dot global.
161

161

00:07:01.530  -->  00:07:03.560
You can see the error then disappears.
162

162

00:07:03.560  -->  00:07:04.393
There's two things here
163

163

00:07:04.393  -->  00:07:06.610
that doesn't affect a normal Java module.
164

164

00:07:06.610  -->  00:07:08.440
That's purely that era was popping up,
165

165

00:07:08.440  -->  00:07:10.260
as a result of IntelliJ,
166

166

00:07:10.260  -->  00:07:12.700
wanting to keep its own tracking in its own IML file,
167

167

00:07:12.700  -->  00:07:15.003
which you can see down there module testing dot IML.
168

168

00:07:15.003  -->  00:07:18.058
Alrght. So let's create a new file here.
169

169

00:07:18.058  -->  00:07:19.810
And we're gonna create a new interface in our source folder
170

170

00:07:19.810  -->  00:07:21.210
for org dot module dot util.
171

171

00:07:22.572  -->  00:07:26.840
So new Java class, org dot pkg dot util dot countable,
172

172

00:07:31.380  -->  00:07:33.020
remembering that the module name
173

173

00:07:33.020  -->  00:07:34.760
is not the same as the package name here.
174

174

00:07:34.760  -->  00:07:38.510
So we're using org dot pkg dot util for the package name
175

175

00:07:38.510  -->  00:07:39.540
for countable.
176

176

00:07:39.540  -->  00:07:41.960
But there before we've also used org dot module dot util
177

177

00:07:41.960  -->  00:07:43.703
for the modular the module name.
178

178

00:07:44.988  -->  00:07:46.770
They're separate things
179

179

00:07:46.770  -->  00:07:48.440
That is our countable.
180

180

00:07:48.440  -->  00:07:50.270
It's actually a class problem making that an interface.
181

181

00:07:50.270  -->  00:07:52.993
I'm going to replace that code. There's the interface.
182

182

00:07:54.560  -->  00:07:56.050 line:15% 
So let's finish the video here
183

183

00:07:56.050  -->  00:07:58.232 line:15% 
in the next video will actually implement this interface
184

184

00:07:58.232  -->  00:08:00.700 line:15% 
in a class in another model.
185

185

00:08:00.700  -->  00:08:02.300 line:15% 
We'll see you in the next video.
