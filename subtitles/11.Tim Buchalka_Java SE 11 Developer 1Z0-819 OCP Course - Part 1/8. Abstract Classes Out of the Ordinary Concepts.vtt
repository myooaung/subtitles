WEBVTT
1
1

00:00:05.328  -->  00:00:06.900
<v ->Alright so let's talk more about creating</v>
2

2

00:00:06.900  -->  00:00:08.580
and extending abstract classes looking at
3

3

00:00:08.580  -->  00:00:11.080
out of ordinary top scenarios.
4

4

00:00:11.080  -->  00:00:12.710
In the last video I talked about
5

5

00:00:12.710  -->  00:00:14.762
some of the rules regarding abstract classes.
6

6

00:00:14.762  -->  00:00:18.350
I said that an abstract class cannot be declared final,
7

7

00:00:18.350  -->  00:00:19.970
but I didn't say you cannot have
8

8

00:00:19.970  -->  00:00:22.340
final methods on your abstract class.
9

9

00:00:22.340  -->  00:00:25.120
So we're going to look at some examples to clarify this.
10

10

00:00:25.120  -->  00:00:26.750
So we're going to create a new class
11

11

00:00:26.750  -->  00:00:28.313
in our Inheritance project.
12

12

00:00:30.290  -->  00:00:33.083
We're going to call this class AbstractClassExample.
13

13

00:00:38.814  -->  00:00:40.540
Right, so there's the class.
14

14

00:00:40.540  -->  00:00:42.940
So code here consists of an abstract class,
15

15

00:00:42.940  -->  00:00:45.150
as you can see, called AbstractExample,
16

16

00:00:45.150  -->  00:00:47.690
it's got a static final field there,
17

17

00:00:47.690  -->  00:00:49.240
constant in other words.
18

18

00:00:49.240  -->  00:00:50.880
It's got a static final method,
19

19

00:00:50.880  -->  00:00:53.000
moving on down it's got a final method,
20

20

00:00:53.000  -->  00:00:54.920
and it's also got two abstract method
21

21

00:00:54.920  -->  00:00:57.330
definitions at the bottom of the screen.
22

22

00:00:57.330  -->  00:00:59.910
So scrolling down a bit more, we've also got
23

23

00:00:59.910  -->  00:01:03.120
the class concrete example and that extends
24

24

00:01:03.120  -->  00:01:04.480
the abstract example and simply
25

25

00:01:04.480  -->  00:01:06.570
implements the two abstract methods.
26

26

00:01:06.570  -->  00:01:08.178
You can see that on screen.
27

27

00:01:08.178  -->  00:01:11.170
And finally, we've got our AbstractClassExample
28

28

00:01:11.170  -->  00:01:13.150
just a public class with a main method.
29

29

00:01:13.150  -->  00:01:15.950
We're actually calling both methods.
30

30

00:01:15.950  -->  00:01:17.450
Alright so let's run this now.
31

31

00:01:19.620  -->  00:01:22.340
And you can see the output on the screen.
32

32

00:01:22.340  -->  00:01:24.710
So this is an example of the AbstractClass
33

33

00:01:24.710  -->  00:01:27.818
controlling what matters to it in a final method
34

34

00:01:27.818  -->  00:01:30.970
and allowing extensibility at the same time
35

35

00:01:30.970  -->  00:01:34.550
by calling abstract methods within the final method.
36

36

00:01:34.550  -->  00:01:35.900
So let's now just tinker with
37

37

00:01:35.900  -->  00:01:38.590
constructors in an abstract class.
38

38

00:01:38.590  -->  00:01:40.200
So we're gonna create another class here,
39

39

00:01:40.200  -->  00:01:42.103
we'll call this one AbstractClassExample2.
40

40

00:01:52.228  -->  00:01:53.750
Okay so there's our class.
41

41

00:01:53.750  -->  00:01:56.720
So this abstract class that I've called ConceptualClass
42

42

00:01:56.720  -->  00:01:58.310
has a no arguments constructor that's
43

43

00:01:58.310  -->  00:02:00.030
protected there as you can see.
44

44

00:02:00.030  -->  00:02:02.100
It's also got an abstract method.
45

45

00:02:02.100  -->  00:02:03.550
Scrolling on down a bit further
46

46

00:02:03.550  -->  00:02:06.650
we've got the second class in this file, RealClass
47

47

00:02:06.650  -->  00:02:08.310
that implements the abstract method,
48

48

00:02:08.310  -->  00:02:10.570
but it doesn't have a constructor.
49

49

00:02:10.570  -->  00:02:12.273
And scrolling down, our last class
50

50

00:02:12.273  -->  00:02:14.750
so it creates an instance of RealClass
51

51

00:02:14.750  -->  00:02:16.760
and then executes the method.
52

52

00:02:16.760  -->  00:02:17.710
Let's run the code.
53

53

00:02:20.030  -->  00:02:23.050
You can see the output Hello World showing on screen.
54

54

00:02:23.050  -->  00:02:24.380
So you might be asking at this point,
55

55

00:02:24.380  -->  00:02:26.180
'well what's out of the ordinary with this code?
56

56

00:02:26.180  -->  00:02:27.920
Nothing, right, it's just a convoluted way
57

57

00:02:27.920  -->  00:02:29.260
to print Hello World?'
58

58

00:02:29.260  -->  00:02:31.310
Well, not really, let's just change one word here.
59

59

00:02:31.310  -->  00:02:32.980
So we're going to change the constructor
60

60

00:02:32.980  -->  00:02:35.490
of the abstract class to be private.
61

61

00:02:35.490  -->  00:02:37.170
At the moment you can see it's protected.
62

62

00:02:37.170  -->  00:02:38.320
Change that to private.
63

63

00:02:40.070  -->  00:02:41.850
So what's really the big deal doing that?
64

64

00:02:41.850  -->  00:02:44.630
The abstract class will never be instantiated anyway, right?
65

65

00:02:44.630  -->  00:02:46.267
Except now by doing that our class hasn't compiled
66

66

00:02:46.267  -->  00:02:49.180
and you can see the arrow down at the bottom
67

67

00:02:49.180  -->  00:02:51.350
of the screen there, there's no default constructor
68

68

00:02:51.350  -->  00:02:53.390
available in ConceptualClass.
69

69

00:02:53.390  -->  00:02:54.790
The compiler wants us to create
70

70

00:02:54.790  -->  00:02:56.570
a default constructor on the RealClass.
71

71

00:02:56.570  -->  00:02:58.470
Alright, so that's alright.
72

72

00:02:58.470  -->  00:02:59.323
So let's do that.
73

73

00:03:00.280  -->  00:03:02.520
I'm going to add the constructor to RealCass
74

74

00:03:04.030  -->  00:03:06.207
except you can see clearly that hasn't worked,
75

75

00:03:06.207  -->  00:03:07.810
"there is no default constructor available
76

76

00:03:07.810  -->  00:03:09.680
in 'ConceptualClass'"
77

77

00:03:09.680  -->  00:03:11.010
Alright so let's just add a parameter
78

78

00:03:11.010  -->  00:03:12.150
to try and get around this issue,
79

79

00:03:12.150  -->  00:03:13.360
so I'm going to change the constructor
80

80

00:03:13.360  -->  00:03:17.113
to have one parameter, String s1.
81

81

00:03:19.490  -->  00:03:22.120
Still got a compiler error as you can see there,
82

82

00:03:22.120  -->  00:03:25.490
so we cannot create any constructor in the ConcreteClass
83

83

00:03:25.490  -->  00:03:28.033
while the AbstractClass only has a private one.
84

84

00:03:28.919  -->  00:03:31.380
Right so let's get back to our AbstractClass
85

85

00:03:31.380  -->  00:03:33.780
and add another constructor, I'll paste that in.
86

86

00:03:35.040  -->  00:03:36.490
Right, you can see now we've added a private
87

87

00:03:36.490  -->  00:03:40.030
ConceptualClass constructor with one argument.
88

88

00:03:40.030  -->  00:03:42.530
Looking back to our RealClass, and let's add
89

89

00:03:42.530  -->  00:03:45.350
a super call into the constructor.
90

90

00:03:45.350  -->  00:03:46.183
Super(s1).
91

91

00:03:50.120  -->  00:03:52.180
So clearly we've still got an error there.
92

92

00:03:52.180  -->  00:03:55.270
Got private access so let's actually change this now
93

93

00:03:55.270  -->  00:03:57.510
so it's got protected access, that's where
94

94

00:03:57.510  -->  00:03:59.380
you had the original constructor at.
95

95

00:03:59.380  -->  00:04:02.410
And we've now got the code almost to compile.
96

96

00:04:02.410  -->  00:04:04.410
We just need to make a change down here and
97

97

00:04:04.410  -->  00:04:07.760
pass a new argument to our constructor with one parameter
98

98

00:04:07.760  -->  00:04:10.283
So Hello World, and if we run it,
99

99

00:04:12.370  -->  00:04:14.630
you can now see the Hello World printing out twice.
100

100

00:04:14.630  -->  00:04:16.450
Alright so what actually happened here?
101

101

00:04:16.450  -->  00:04:18.760
Well the AbstractClass came back up to that
102

102

00:04:18.760  -->  00:04:21.620
that declared basically that there was only one way
103

103

00:04:21.620  -->  00:04:24.410
to instantiate an object and that you had to pass it
104

104

00:04:24.410  -->  00:04:26.157
at a minimum one-string parameter
105

105

00:04:26.157  -->  00:04:27.980
and that the method it defined,
106

106

00:04:27.980  -->  00:04:29.510
but which your subclass implements
107

107

00:04:29.510  -->  00:04:32.120
will be executed when any object is created.
108

108

00:04:32.120  -->  00:04:34.480
Alright so let's really confirm that that is the case
109

109

00:04:34.480  -->  00:04:36.850
so I'm going to go back and add another constructor
110

110

00:04:36.850  -->  00:04:38.850
to our Concrete Class, to our RealClass.
111

111

00:04:38.850  -->  00:04:40.200
Let's go ahead and do that.
112

112

00:04:42.280  -->  00:04:43.510
And you can see we've got two arguments
113

113

00:04:43.510  -->  00:04:46.010
there now for our RealClass.
114

114

00:04:46.010  -->  00:04:48.640
So we've got two parameters to form for our constructor now.
115

115

00:04:48.640  -->  00:04:51.030
So as you can see we've got a compiler error here.
116

116

00:04:51.030  -->  00:04:54.233
You must call the super method and pass it a string.
117

117

00:04:56.250  -->  00:04:58.670
Your options here are to pass it one or the other
118

118

00:04:58.670  -->  00:05:01.040
of the String parameters, but you cannot get out
119

119

00:05:01.040  -->  00:05:04.490
of calling the Abstract method's one parameter constructor.
120

120

00:05:04.490  -->  00:05:06.670
This behaviour is not limited to an abstract class,
121

121

00:05:06.670  -->  00:05:08.356
by the way, but it's interesting here
122

122

00:05:08.356  -->  00:05:11.790
because the abstract class can force the call
123

123

00:05:11.790  -->  00:05:13.841
of a non-implemented method in the instantiation
124

124

00:05:13.841  -->  00:05:17.253
of an object that is forced to implement the method.
125

125

00:05:18.639  -->  00:05:19.830
Alright so I'm just gonna undo that change
126

126

00:05:19.830  -->  00:05:22.190
remove that constructor, and our
127

127

00:05:22.190  -->  00:05:24.240
code's still valid at this point in time.
128

128

00:05:25.350  -->  00:05:26.690
Alright so I'm going to end the video here,
129

129

00:05:26.690  -->  00:05:28.160
I'm gonna present you with a quiz next
130

130

00:05:28.160  -->  00:05:29.440
and then I'll see you in the next video
131

131

00:05:29.440  -->  00:05:31.893
after that, where we'll start looking at polymorphism.
132

132

00:05:31.893  -->  00:05:33.560
Now we've seen a bit of it here
133

133

00:05:33.560  -->  00:05:35.920
but we're gonna talk about what it is and how overriding
134

134

00:05:35.920  -->  00:05:38.600
methods is a key to its functionality.
135

135

00:05:38.600  -->  00:05:39.900
See you in the video soon.
