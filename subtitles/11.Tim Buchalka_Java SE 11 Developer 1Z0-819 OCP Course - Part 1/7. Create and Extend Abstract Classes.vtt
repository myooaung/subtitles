WEBVTT
1
1

00:00:05.571  -->  00:00:07.840
<v ->All right let's talk about creating and extending</v>
2

2

00:00:07.840  -->  00:00:11.620
Abstract Classes. An abstract class is a class
3

3

00:00:11.620  -->  00:00:14.310
that's declared with the abstract modifier and
4

4

00:00:14.310  -->  00:00:17.670
it may or may not include abstract methods.
5

5

00:00:17.670  -->  00:00:20.600
An abstract class, defers some or all of its
6

6

00:00:20.600  -->  00:00:23.470
implementation to its subclasses, which is why
7

7

00:00:23.470  -->  00:00:27.420
the abstract classes themselves cannot be instantiated.
8

8

00:00:27.420  -->  00:00:29.590
An abstract class is used to define common
9

9

00:00:29.590  -->  00:00:32.580
attributes and behaviour, for a set of classes that
10

10

00:00:32.580  -->  00:00:34.860
will extend it. It's usually modelled
11

11

00:00:34.860  -->  00:00:37.940
after an abstract concept, a type you would be unlikely
12

12

00:00:37.940  -->  00:00:40.020
to create an instance of, but which could be
13

13

00:00:40.020  -->  00:00:43.683
used to describe common features of a set of objects.
14

14

00:00:45.220  -->  00:00:47.620
So I've showed several examples of an Animal class
15

15

00:00:47.620  -->  00:00:50.770
which was extended by Dog for example.
16

16

00:00:50.770  -->  00:00:53.020
The Animal class is a perfect candidate for
17

17

00:00:53.020  -->  00:00:55.500
an abstract class because creating an
18

18

00:00:55.500  -->  00:00:58.900
individual object of Animal is unlikely to happen
19

19

00:00:58.900  -->  00:01:01.290
and yet you can identify many common attributes
20

20

00:01:01.290  -->  00:01:03.320
across several types of animals
21

21

00:01:03.320  -->  00:01:06.540
into the Animal Class as well as common behaviour
22

22

00:01:06.540  -->  00:01:08.510
that any type of animal might have,
23

23

00:01:08.510  -->  00:01:11.060
walk, bite, sit, play for example.
24

24

00:01:11.060  -->  00:01:14.633
A class that is not abstract is called a concrete class.
25

25

00:01:16.380  -->  00:01:18.620
Now the difference between using an abstract class
26

26

00:01:18.620  -->  00:01:21.760
and a concrete class is that the abstract class
27

27

00:01:21.760  -->  00:01:25.550
usually requires a subclass to implement its methods,
28

28

00:01:25.550  -->  00:01:28.250
thereby forcing commonality of interface.
29

29

00:01:28.250  -->  00:01:30.310
Now it's similar to an interface in this way,
30

30

00:01:30.310  -->  00:01:33.310
but it also permits providing functionality that
31

31

00:01:33.310  -->  00:01:36.160
subclasses might have in common, and that
32

32

00:01:36.160  -->  00:01:38.760
you would just implement once on the abstract class.
33

33

00:01:40.310  -->  00:01:43.250
The absolute minimum declaration of an abstract class
34

34

00:01:43.250  -->  00:01:44.420
is shown below.
35

35

00:01:44.420  -->  00:01:47.440
Abstract class, abstract class being the name
36

36

00:01:47.440  -->  00:01:49.580
left and right curly braces.
37

37

00:01:49.580  -->  00:01:52.330
Any method that is not implemented, I.e. has no
38

38

00:01:52.330  -->  00:01:55.480
method body block, must be declared abstract.
39

39

00:01:55.480  -->  00:01:58.350
Any class that has even one abstract method
40

40

00:01:58.350  -->  00:02:00.160
must be declared abstract.
41

41

00:02:00.160  -->  00:02:03.070
The reason is probably obvious but I'll state it anyway.
42

42

00:02:03.070  -->  00:02:04.760
You would not want to create an object that
43

43

00:02:04.760  -->  00:02:07.290
does not have it's behaviour implemented yet.
44

44

00:02:07.290  -->  00:02:09.490
There is no such thing as an abstract field.
45

45

00:02:10.510  -->  00:02:12.040
All right let's see how some of this stuff
46

46

00:02:12.040  -->  00:02:14.320
works in code, I'm actually gonna create a
47

47

00:02:14.320  -->  00:02:16.660
new class in our existing inheritance project and
48

48

00:02:16.660  -->  00:02:17.603
call it vehicle.
49

49

00:02:18.443  -->  00:02:22.193
(Clicking and typing sounds)
50

50

00:02:26.390  -->  00:02:28.380
Okay so there's our vehicle class
51

51

00:02:28.380  -->  00:02:29.717
so we're creating here an abstract class
52

52

00:02:29.717  -->  00:02:32.510
as you can see by the definition on line nine
53

53

00:02:32.510  -->  00:02:35.000
and this class will support a set of classes that
54

54

00:02:35.000  -->  00:02:37.820
can be termed vehicle at the most general level
55

55

00:02:37.820  -->  00:02:39.520
and which have a common set of attributes
56

56

00:02:39.520  -->  00:02:42.000
and a common set of behaviours.
57

57

00:02:42.000  -->  00:02:44.440
So you can see that the attributes are defined as
58

58

00:02:44.440  -->  00:02:47.330
private, and there's also a constructor here that's
59

59

00:02:47.330  -->  00:02:49.720
available to pass the data to the object.
60

60

00:02:49.720  -->  00:02:51.870
There's an enum included, see that at the top of the
61

61

00:02:51.870  -->  00:02:55.040
screen there and that defines some of the vehicle types.
62

62

00:02:55.040  -->  00:02:57.410
The behaviour of the vehicles are defined by
63

63

00:02:57.410  -->  00:02:58.863
a set of abstract methods,
64

64

00:02:59.730  -->  00:03:01.690
down here as you can see on screen there
65

65

00:03:01.690  -->  00:03:04.780
drive, park, and make noise.
66

66

00:03:04.780  -->  00:03:06.610
All right so next we need to create another class
67

67

00:03:06.610  -->  00:03:08.363
now we're gonna call this one Auto.
68

68

00:03:10.912  -->  00:03:13.579
(Typing sounds)
69

69

00:03:15.330  -->  00:03:16.920
The Auto class is a subclass of the
70

70

00:03:16.920  -->  00:03:19.200
vehicle abstract class as you can see,
71

71

00:03:19.200  -->  00:03:21.570
if you define a class as the subclass of an
72

72

00:03:21.570  -->  00:03:25.260
abstract class, you must implement the abstract methods
73

73

00:03:25.260  -->  00:03:27.350
which we do here, you can see the three methods that
74

74

00:03:27.350  -->  00:03:30.110
we have implemented or if you don't do that you have to
75

75

00:03:30.110  -->  00:03:33.580
declare the subclass as being abstract itself.
76

76

00:03:33.580  -->  00:03:35.143
All right there's not really much else to say here,
77

77

00:03:35.143  -->  00:03:37.860
we have a constructor there which actually calls the
78

78

00:03:37.860  -->  00:03:39.920
other constructor as a pass through to the
79

79

00:03:39.920  -->  00:03:42.010
vehicle constructor as you can see, then we've got
80

80

00:03:42.010  -->  00:03:44.410
those other methods as I've mentioned and we've also
81

81

00:03:44.410  -->  00:03:46.510
got a static method there which instantiates an
82

82

00:03:46.510  -->  00:03:49.650
Auto object, and then we print out the values.
83

83

00:03:49.650  -->  00:03:51.200
So let's actually run the code
84

84

00:03:53.620  -->  00:03:56.040
and you can see the output on the screen down the bottom.
85

85

00:03:56.040  -->  00:03:58.100
Now I said that if you don't implement all the
86

86

00:03:58.100  -->  00:04:00.790
abstract methods from the parent class, you need to
87

87

00:04:00.790  -->  00:04:03.000
make the subclass abstract as well.
88

88

00:04:03.000  -->  00:04:05.743
So let's demonstrate this by creating another class,
89

89

00:04:06.670  -->  00:04:09.383
so we're gonna call this one Automated Vehicle.
90

90

00:04:10.938  -->  00:04:13.605
(Typing sounds)
91

91

00:04:17.660  -->  00:04:19.940
So this is an abstract class that extends the
92

92

00:04:19.940  -->  00:04:22.760
vehicle abstract class to support a special
93

93

00:04:22.760  -->  00:04:26.180
subgroup of vehicles, those that are automated.
94

94

00:04:26.180  -->  00:04:28.700
Now this class kind of hijacks the drive and park
95

95

00:04:28.700  -->  00:04:31.113
methods on Vehicle, you can see this down here,
96

96

00:04:32.815  -->  00:04:34.610
and it does that to force implementation of
97

97

00:04:34.610  -->  00:04:36.893
newly defined also abstract methods,
98

98

00:04:36.893  -->  00:04:39.680
autoDrive and autoParked.
99

99

00:04:39.680  -->  00:04:40.960
And you can see how we've done that by
100

100

00:04:40.960  -->  00:04:43.360
call to autoPark and autoDrive for the
101

101

00:04:43.360  -->  00:04:45.770
park and drive methods but also we've made
102

102

00:04:45.770  -->  00:04:48.760
autoPark and autoDrive abstract methods.
103

103

00:04:48.760  -->  00:04:50.310
So in other words the calling programme will
104

104

00:04:50.310  -->  00:04:53.000
still call drive, but any automated vehicle
105

105

00:04:53.000  -->  00:04:55.790
will be forced to implement autoDrive and autoPark
106

106

00:04:55.790  -->  00:04:57.980
instead of just drive and park.
107

107

00:04:57.980  -->  00:05:00.120
So you can see that abstract methods and inheritance
108

108

00:05:00.120  -->  00:05:03.470
support extensibility of the application.
109

109

00:05:03.470  -->  00:05:05.160
So specifically as you can see there, the
110

110

00:05:05.160  -->  00:05:07.250
class has declared two abstract methods
111

111

00:05:07.250  -->  00:05:09.910
autoPark and autoDrive, and it's implemented
112

112

00:05:09.910  -->  00:05:12.500
two of vehicle's three abstract methods park and drive
113

113

00:05:12.500  -->  00:05:14.040
which I've just talked about, calling the
114

114

00:05:14.040  -->  00:05:16.310
autoPark and autoDrive abstract methods from the
115

115

00:05:16.310  -->  00:05:17.857
concrete methods.
116

116

00:05:17.857  -->  00:05:18.930
All right so let's see this in action,
117

117

00:05:18.930  -->  00:05:20.860
we need to create yet another class
118

118

00:05:20.860  -->  00:05:23.070
so we're gonna call this one AutomatedAuto.
119

119

00:05:24.864  -->  00:05:27.531
(Typing sounds)
120

120

00:05:30.815  -->  00:05:31.880
Now this class should look familiar,
121

121

00:05:31.880  -->  00:05:34.610
it's very similar to the Auto class we've talked about
122

122

00:05:34.610  -->  00:05:38.270
earlier in the video, except the AutomatedAuto class
123

123

00:05:38.270  -->  00:05:41.710
extends the AutomatedVehicle abstract class.
124

124

00:05:41.710  -->  00:05:44.060
The autoDrive and autoPark methods are implemented
125

125

00:05:44.060  -->  00:05:46.654
you can see there, you can see the main method
126

126

00:05:46.654  -->  00:05:48.040
if I scroll down a bit more.
127

127

00:05:48.040  -->  00:05:49.950
It's almost exactly the same, we're executing the
128

128

00:05:49.950  -->  00:05:53.130
same calls drive and park but the AutomatedVehicle
129

129

00:05:53.130  -->  00:05:56.363
class forces implementation of the autoDrive and
130

130

00:05:56.363  -->  00:05:59.103
autoPark of any class that extends it.
131

131

00:06:00.134  -->  00:06:01.873
All right so if we run this code now,
132

132

00:06:03.412  -->  00:06:05.413
and there's the output on the screen down the bottom.
133

133

00:06:07.260  -->  00:06:10.150
All right so in this video, we reviewed abstract classes
134

134

00:06:10.150  -->  00:06:12.520
which are classes that will never get implemented,
135

135

00:06:12.520  -->  00:06:15.190
but which can be used to force implementation,
136

136

00:06:15.190  -->  00:06:18.470
of a standard set of behaviour by any subclass that
137

137

00:06:18.470  -->  00:06:19.530
extends it.
138

138

00:06:19.530  -->  00:06:22.070
So it allows calling classes to be knowledgeable
139

139

00:06:22.070  -->  00:06:24.870
of only the abstract most general entity,
140

140

00:06:24.870  -->  00:06:27.280
and use operations on it without knowledge of
141

141

00:06:27.280  -->  00:06:31.100
the actual behaviour that will actually occur at runtime.
142

142

00:06:31.100  -->  00:06:33.460
Now we've seen that if a derived class does not
143

143

00:06:33.460  -->  00:06:36.070
implement all of the parent's abstract methods,
144

144

00:06:36.070  -->  00:06:38.540
it must also be declared abstract, whether it
145

145

00:06:38.540  -->  00:06:40.943
contains an additional abstract method or not.
146

146

00:06:42.684  -->  00:06:45.350
I just wanna go over briefly now some rules here,
147

147

00:06:45.350  -->  00:06:48.370
firstly any class that has an abstract method must be
148

148

00:06:48.370  -->  00:06:51.460
declared abstract, any subclass must implement
149

149

00:06:51.460  -->  00:06:54.750
all of the abstract class's abstract methods or
150

150

00:06:54.750  -->  00:06:57.480
be declared abstract itself if it does not.
151

151

00:06:57.480  -->  00:06:59.340
An abstract class does not actually have to
152

152

00:06:59.340  -->  00:07:02.840
have any abstract methods, an abstract class can have
153

153

00:07:02.840  -->  00:07:05.000
implemented methods of any type.
154

154

00:07:05.000  -->  00:07:07.950
An abstract class can have attributes and other
155

155

00:07:07.950  -->  00:07:10.763
inner types such as class, enum, and interface.
156

156

00:07:12.300  -->  00:07:15.790
An abstract class cannot also be declared as final,
157

157

00:07:15.790  -->  00:07:18.790
the two modifiers are mutually exclusive.
158

158

00:07:18.790  -->  00:07:21.100
An abstract class cannot be declared as private because
159

159

00:07:21.100  -->  00:07:23.410
no other class would be able to extend it.
160

160

00:07:23.410  -->  00:07:26.360
An abstract method cannot be declared as private because
161

161

00:07:26.360  -->  00:07:28.680
no other class would be able to extend it.
162

162

00:07:28.680  -->  00:07:31.020
An abstract method cannot be static.
163

163

00:07:31.020  -->  00:07:33.120
A static method cannot be overridden
164

164

00:07:33.120  -->  00:07:35.983
so a static abstract method makes no sense.
165

165

00:07:37.420  -->  00:07:40.570
And finally you cannot create an abstract constructor.
166

166

00:07:40.570  -->  00:07:41.710
All right so let's end the video here and
167

167

00:07:41.710  -->  00:07:43.610
in the next one we're gonna look at some
168

168

00:07:43.610  -->  00:07:45.850
out of ordinary things that you might come across
169

169

00:07:45.850  -->  00:07:47.720
when dealing with abstract classes.
170

170

00:07:47.720  -->  00:07:49.020
See you in the next video.
