WEBVTT
1
1

00:00:05.530  -->  00:00:06.530
<v Narrator>All right. So let's look at the rules</v>
2

2

00:00:06.530  -->  00:00:09.540
for determining which overloaded method will be executed
3

3

00:00:09.540  -->  00:00:12.440
as defined by the Java Specification.
4

4

00:00:12.440  -->  00:00:13.470
Now what I've done here is
5

5

00:00:13.470  -->  00:00:16.150
put together an extremely simplified synopsis
6

6

00:00:16.150  -->  00:00:18.220
from the Java Specification page.
7

7

00:00:18.220  -->  00:00:20.710
We're going to link to the original source material
8

8

00:00:20.710  -->  00:00:23.780
for Java 11 in the resources section for this video.
9

9

00:00:23.780  -->  00:00:26.670
Now there's a lot of information on the specification.
10

10

00:00:26.670  -->  00:00:27.810
What I'm going to focus on
11

11

00:00:27.810  -->  00:00:31.500
is on section 15.12.2 Compile-Time,
12

12

00:00:31.500  -->  00:00:34.700
specifically Step 2, Determine Method Signature
13

13

00:00:34.700  -->  00:00:36.643
and this describes three phases.
14

14

00:00:38.550  -->  00:00:41.940
Phase 1, it performs an overloaded resolution
15

15

00:00:41.940  -->  00:00:45.250
without permitting boxing or unboxing conversion
16

16

00:00:45.250  -->  00:00:46.610
or the use of variable arity's,
17

17

00:00:46.610  -->  00:00:49.280
or var arguments, method invocation.
18

18

00:00:49.280  -->  00:00:53.400
Within Phase 1, if multiple methods meet this criteria,
19

19

00:00:53.400  -->  00:00:56.010
the best method is then selected by,
20

20

00:00:56.010  -->  00:00:58.760
one, choose method with exact match or matches,
21

21

00:00:58.760  -->  00:01:01.793
then choose method with more specific match or matches.
22

22

00:01:03.700  -->  00:01:06.440
Note that, for primitives, subtypes are considered
23

23

00:01:06.440  -->  00:01:08.130
to climb up either of these branches,
24

24

00:01:08.130  -->  00:01:10.637
i.e "char" is a subtype of "int",
25

25

00:01:10.637  -->  00:01:12.737
"byte" is not a subtype of "char",
26

26

00:01:12.737  -->  00:01:14.761
"int" can be considered a subtype of "double"
27

27

00:01:14.761  -->  00:01:16.370
for method selection.
28

28

00:01:16.370  -->  00:01:18.200
So we've got byte, short, int,
29

29

00:01:18.200  -->  00:01:20.840
then char, int, long float, double.
30

30

00:01:20.840  -->  00:01:23.480
So if a primitive is passed and a method exists
31

31

00:01:23.480  -->  00:01:26.120
within a parameter that uses widening,
32

32

00:01:26.120  -->  00:01:27.570
this will be selected
33

33

00:01:27.570  -->  00:01:29.800
and narrowing conversion, on the other hand,
34

34

00:01:29.800  -->  00:01:30.873
won't be selected.
35

35

00:01:32.770  -->  00:01:34.840
Phase 2, it allows boxing and unboxing,
36

36

00:01:34.840  -->  00:01:37.440
but ignores variable arity, so var args again,
37

37

00:01:37.440  -->  00:01:39.080
method invocation.
38

38

00:01:39.080  -->  00:01:41.920
And finally, Phase 3, it allows overloading to be
39

39

00:01:41.920  -->  00:01:45.260
combined with variable arity, var args, methods,
40

40

00:01:45.260  -->  00:01:47.240
boxing and unboxing.
41

41

00:01:47.240  -->  00:01:48.520
So putting this more simply,
42

42

00:01:48.520  -->  00:01:50.870
var arg methods will match dead last
43

43

00:01:50.870  -->  00:01:52.860
if better options exist.
44

44

00:01:52.860  -->  00:01:54.430
You may get one question on the exam
45

45

00:01:54.430  -->  00:01:55.930
regarding this selection.
46

46

00:01:55.930  -->  00:01:58.610
Pay careful attention to the exam question.
47

47

00:01:58.610  -->  00:02:00.890
It's pretty easy to overlook the ellipsis
48

48

00:02:00.890  -->  00:02:02.680
for the var args parameter,
49

49

00:02:02.680  -->  00:02:06.053
if you're reading "int..." versus "int", for example.
50

50

00:02:07.530  -->  00:02:08.363
All right. So with that said,
51

51

00:02:08.363  -->  00:02:10.130
let's walk now through a couple of these rules
52

52

00:02:10.130  -->  00:02:11.690
with some sample code.
53

53

00:02:11.690  -->  00:02:12.710
We're going to create a new class
54

54

00:02:12.710  -->  00:02:15.010
in our Methods project called OverloadMatches.
55

55

00:02:23.590  -->  00:02:26.410
This class has got four overloaded methods for "thisOne"
56

56

00:02:26.410  -->  00:02:27.630
or called "thisOne".
57

57

00:02:27.630  -->  00:02:28.830
You're using a type of Integer,
58

58

00:02:28.830  -->  00:02:32.220
type long, type short, now a type char var args.
59

59

00:02:32.220  -->  00:02:34.550
You can see the use of ellipses down here for char,
60

60

00:02:34.550  -->  00:02:37.490
so if you're using your var args for that on line 20.
61

61

00:02:37.490  -->  00:02:38.720
Now, we're going to just go ahead
62

62

00:02:38.720  -->  00:02:40.520
and have a look at the code that actually calls it.
63

63

00:02:40.520  -->  00:02:42.610
We'll call the method with a parameter type of char
64

64

00:02:42.610  -->  00:02:45.070
that doesn't exactly match any of them.
65

65

00:02:45.070  -->  00:02:45.963
Let's run this.
66

66

00:02:48.200  -->  00:02:50.220
Interesting there that long was matched.
67

67

00:02:50.220  -->  00:02:51.880
Maybe we expected it to match short
68

68

00:02:51.880  -->  00:02:54.854
or the var args char parameter that we defined
69

69

00:02:54.854  -->  00:02:58.460
in our overloaded method up here on line 20.
70

70

00:02:58.460  -->  00:03:01.610
So keep in mind that a char will never be widened to a short
71

71

00:03:01.610  -->  00:03:03.580
from the rules we described earlier
72

72

00:03:03.580  -->  00:03:06.460
and it will match on long, a widening conversion,
73

73

00:03:06.460  -->  00:03:08.760
before it will ever get to Phase 3
74

74

00:03:08.760  -->  00:03:11.260
to check the var args parameter.
75

75

00:03:11.260  -->  00:03:12.560
So let's test this further.
76

76

00:03:12.560  -->  00:03:15.260
We're going to now add a fifth overloaded method here.
77

77

00:03:17.370  -->  00:03:18.880
But see this time it's,
78

78

00:03:18.880  -->  00:03:22.280
the parameter is a char wrapper class of a Character.
79

79

00:03:22.280  -->  00:03:23.870
Se we're using Character here, which of course,
80

80

00:03:23.870  -->  00:03:26.220
is a wrapper for the char.
81

81

00:03:26.220  -->  00:03:27.730
We run this.
82

82

00:03:27.730  -->  00:03:30.100
Think about what you'd expect to see when I do this.
83

83

00:03:30.100  -->  00:03:33.310
Now if I run it,
84

84

00:03:33.310  -->  00:03:35.610
you can see we've got no change to the output.
85

85

00:03:37.450  -->  00:03:38.283
Why?
86

86

00:03:38.283  -->  00:03:40.880
Well again, the rules described in the slide in this video
87

87

00:03:40.880  -->  00:03:43.650
indicate that parameters won't be evaluated
88

88

00:03:43.650  -->  00:03:45.540
for wrappers with boxing and unboxing
89

89

00:03:45.540  -->  00:03:46.810
until the second phase,
90

90

00:03:46.810  -->  00:03:49.950
if the first phase completes with no matches.
91

91

00:03:49.950  -->  00:03:52.110
So even though we think the Character wrapper class
92

92

00:03:52.110  -->  00:03:53.100
is a better match,
93

93

00:03:53.100  -->  00:03:54.780
the Java Virtual Machine won't use it
94

94

00:03:54.780  -->  00:03:56.380
and it didn't in this scenario.
95

95

00:03:56.380  -->  00:03:58.960
The reason for this has to do with backwards compatibility
96

96

00:03:58.960  -->  00:04:00.300
of older code.
97

97

00:04:00.300  -->  00:04:02.140
You can certainly force the issue
98

98

00:04:02.140  -->  00:04:03.990
by making the call an exact match
99

99

00:04:03.990  -->  00:04:06.893
and pass the "char" in a wrapper yourself.
100

100

00:04:08.990  -->  00:04:11.510
Finally, since a constructor is, in actuality,
101

101

00:04:11.510  -->  00:04:13.990
just a method with a few special restrictions,
102

102

00:04:13.990  -->  00:04:15.750
constructors can be overloaded too
103

103

00:04:15.750  -->  00:04:18.110
with the same set of rules applied.
104

104

00:04:18.110  -->  00:04:20.350
There are only two ways to execute constructors,
105

105

00:04:20.350  -->  00:04:23.260
using "new" in the process of instantiating a new object
106

106

00:04:23.260  -->  00:04:25.440
and passing the appropriate parameters,
107

107

00:04:25.440  -->  00:04:27.910
or by doing something called constructor chaining
108

108

00:04:27.910  -->  00:04:30.240
which is calling a different overloaded constructor
109

109

00:04:30.240  -->  00:04:32.320
from another constructor.
110

110

00:04:32.320  -->  00:04:34.190
Now since you only use this parenthesis
111

111

00:04:34.190  -->  00:04:35.790
as the first statement in a constructor,
112

112

00:04:35.790  -->  00:04:37.800
you can only do that in the first statement.
113

113

00:04:37.800  -->  00:04:40.100
Therefore you can only create a single chain.
114

114

00:04:40.100  -->  00:04:43.470
So let's demonstrate both of these statements in code.
115

115

00:04:43.470  -->  00:04:46.010
So we're going to create another class here,
116

116

00:04:46.010  -->  00:04:48.270
we'll call this ConstructorOverload.
117

117

00:04:55.400  -->  00:04:56.830
Okay. So there's that code.
118

118

00:04:56.830  -->  00:04:59.020
Now, in this code I've defined three constructors
119

119

00:04:59.020  -->  00:05:01.230
which why then we can have a look at them.
120

120

00:05:01.230  -->  00:05:05.260
Line 17, line 22 and then also, line 31.
121

121

00:05:05.260  -->  00:05:06.750
Noting that we're actually creating
122

122

00:05:06.750  -->  00:05:07.740
a constructor chain here.
123

123

00:05:07.740  -->  00:05:09.050
So by the use of this,
124

124

00:05:09.050  -->  00:05:12.310
you can see that in the case of the second
125

125

00:05:12.310  -->  00:05:14.240
and third constructors.
126

126

00:05:14.240  -->  00:05:16.750
So a single args constructor will make a call
127

127

00:05:16.750  -->  00:05:17.990
to the no args constructor,
128

128

00:05:17.990  -->  00:05:19.620
you can see that on line 24,
129

129

00:05:19.620  -->  00:05:22.635
and then populate the variable "mixAndMatch".
130

130

00:05:22.635  -->  00:05:24.810
And the "toString" constructor will make a call
131

131

00:05:24.810  -->  00:05:26.400
to the single args constructor,
132

132

00:05:26.400  -->  00:05:28.450
you can see it doing that on line 33,
133

133

00:05:28.450  -->  00:05:30.610
which, in turn, calls the no arguments constructor,
134

134

00:05:30.610  -->  00:05:31.940
incrementing the counter
135

135

00:05:31.940  -->  00:05:34.690
and then populates the variable "mixAndMatch".
136

136

00:05:34.690  -->  00:05:36.760
So basically, we're demonstrating the three different ways
137

137

00:05:36.760  -->  00:05:38.820
to instantiate an object in this class
138

138

00:05:38.820  -->  00:05:41.473
as we go down looking at the code in the main method.
139

139

00:05:42.650  -->  00:05:43.800
So if you run this now,
140

140

00:05:45.490  -->  00:05:46.630
so you can see from this output
141

141

00:05:46.630  -->  00:05:49.040
that nothing was printed for instance 3
142

142

00:05:49.040  -->  00:05:51.080
and that's because I've only used the no args constructor
143

143

00:05:51.080  -->  00:05:53.160
which doesn't have a "System.out.println".
144

144

00:05:53.160  -->  00:05:54.210
Go up and have a look at that.
145

145

00:05:54.210  -->  00:05:57.127
It's just got the counter increment on line 18,
146

146

00:05:57.127  -->  00:05:59.990
but the other ones work as expected as you can see.
147

147

00:05:59.990  -->  00:06:00.823
So finishing up.
148

148

00:06:00.823  -->  00:06:01.750
In the last video on this one,
149

149

00:06:01.750  -->  00:06:04.700
we've covered both overloaded methods and constructors
150

150

00:06:04.700  -->  00:06:06.670
and we've talked about how the Java Virtual Machine
151

151

00:06:06.670  -->  00:06:08.280
picks an overloaded method
152

152

00:06:08.280  -->  00:06:11.610
when parameters don't exactly match perfectly.
153

153

00:06:11.610  -->  00:06:12.443
In the next video,
154

154

00:06:12.443  -->  00:06:13.760
we're going to talk about what's odd
155

155

00:06:13.760  -->  00:06:15.600
and interesting about this process.
156

156

00:06:15.600  -->  00:06:17.100
So let's move onto that video.
