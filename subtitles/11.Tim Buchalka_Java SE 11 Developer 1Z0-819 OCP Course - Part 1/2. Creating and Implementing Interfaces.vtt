WEBVTT
1
1

00:00:05.610  -->  00:00:07.500
<v Instructor>So, let's talk more about creating</v>
2

2

00:00:07.500  -->  00:00:09.860
and implementing interfaces in Java.
3

3

00:00:09.860  -->  00:00:11.370
So, in the Java programming language,
4

4

00:00:11.370  -->  00:00:14.570
an interface is one of the three reference types supported,
5

5

00:00:14.570  -->  00:00:16.592
along with class and enum.
6

6

00:00:16.592  -->  00:00:19.300
An interface can contain the following elements.
7

7

00:00:19.300  -->  00:00:22.520
All members are implicitly public and cannot be declared
8

8

00:00:22.520  -->  00:00:26.450
with any other access modifier, unless specified below.
9

9

00:00:26.450  -->  00:00:28.430
So, fields, all variables
10

10

00:00:28.430  -->  00:00:31.570
are public static final implicitly,
11

11

00:00:31.570  -->  00:00:34.010
method signatures, default methods,
12

12

00:00:34.010  -->  00:00:35.650
permitted as of Java 8,
13

13

00:00:35.650  -->  00:00:38.380
methods declared with the default modifier.
14

14

00:00:38.380  -->  00:00:40.793
Static methods permitted as of Java 8.
15

15

00:00:43.100  -->  00:00:45.690
Private methods permitted as of Java 9.
16

16

00:00:45.690  -->  00:00:49.480
Both static and non-static concrete methods can be private.
17

17

00:00:49.480  -->  00:00:50.840
Nested types.
18

18

00:00:50.840  -->  00:00:53.330
And, method bodies exist only for default,
19

19

00:00:53.330  -->  00:00:54.970
private, and static methods.
20

20

00:00:54.970  -->  00:00:58.910
An interface that declares one and only one abstract method
21

21

00:00:58.910  -->  00:01:00.883
is called a functional interface.
22

22

00:01:02.650  -->  00:01:04.190
So, the following table will hopefully
23

23

00:01:04.190  -->  00:01:05.710
help you quickly see the differences
24

24

00:01:05.710  -->  00:01:07.580
between classes and interfaces.
25

25

00:01:07.580  -->  00:01:10.950
Inheritance, class can extend only one class and interface.
26

26

00:01:10.950  -->  00:01:13.440
A class can implement multiple interfaces.
27

27

00:01:13.440  -->  00:01:17.120
And, an interface can extend multiple interfaces.
28

28

00:01:17.120  -->  00:01:18.310
Default access modifier,
29

29

00:01:18.310  -->  00:01:20.690
no modifiers for members and elements.
30

30

00:01:20.690  -->  00:01:24.030
Class, package-private implicitly cannot declare.
31

31

00:01:24.030  -->  00:01:28.030
Interface, public implicitly and it's redundant to declare.
32

32

00:01:28.030  -->  00:01:29.960
Support for other modifiers.
33

33

00:01:29.960  -->  00:01:32.320
For class, public, protected, private.
34

34

00:01:32.320  -->  00:01:34.500
Interface, concrete methods must be declared
35

35

00:01:34.500  -->  00:01:36.680
with one set of the following modifiers,
36

36

00:01:36.680  -->  00:01:39.713
static, private static, private, default.
37

37

00:01:41.380  -->  00:01:42.850
Abstract type support.
38

38

00:01:42.850  -->  00:01:44.700
Class, you could declare a class
39

39

00:01:44.700  -->  00:01:48.130
with abstract modifier explicitly abstract.
40

40

00:01:48.130  -->  00:01:52.060
And, interface, always abstract, implicitly abstract.
41

41

00:01:52.060  -->  00:01:53.530
Support for state.
42

42

00:01:53.530  -->  00:01:55.910
Class, instance and class fields are supported
43

43

00:01:55.910  -->  00:01:59.870
and objects can be instantiated which have their own state.
44

44

00:01:59.870  -->  00:02:03.250
Interface, no support for state except global constants,
45

45

00:02:03.250  -->  00:02:04.083
public, static, final.
46

46

00:02:04.083  -->  00:02:06.780
An interface is never instantiated.
47

47

00:02:06.780  -->  00:02:10.140
And finally, support for the default modifier, class, none.
48

48

00:02:10.140  -->  00:02:13.563
Interface, permitted for public concrete methods only.
49

49

00:02:15.610  -->  00:02:18.810
So, as a minimum, an interface is declared as follows.
50

50

00:02:18.810  -->  00:02:21.300
You see the example there, interface, AnInterface,
51

51

00:02:21.300  -->  00:02:22.820
and left or right curly braces.
52

52

00:02:22.820  -->  00:02:26.313
And, an interface can only be public or package-private.
53

53

00:02:28.373  -->  00:02:31.000
An interface can extend one or more other interfaces
54

54

00:02:31.000  -->  00:02:34.160
and it does not implement interfaces or extend classes.
55

55

00:02:34.160  -->  00:02:36.950
So, the example there, public interface TestInterface
56

56

00:02:36.950  -->  00:02:39.800
extends comparable, comma, AnInterface,
57

57

00:02:39.800  -->  00:02:41.450
then left and right curly braces.
58

58

00:02:42.620  -->  00:02:44.850
So, let's start now by creating a new project
59

59

00:02:44.850  -->  00:02:46.850
called Interfaces, which I've already done.
60

60

00:02:46.850  -->  00:02:48.105
Then, you wanna create a new class here
61

61

00:02:48.105  -->  00:02:49.855
called InterfaceTest.
62

62

00:02:58.310  -->  00:03:00.340
So, this code's demonstrating that declaration
63

63

00:03:00.340  -->  00:03:03.528
of a package-private interface, that's the first one there.
64

64

00:03:03.528  -->  00:03:05.290
InterfaceExample being the name.
65

65

00:03:05.290  -->  00:03:06.250
And, you can see I've got a total
66

66

00:03:06.250  -->  00:03:10.060
of seven fields declared for this interface
67

67

00:03:10.060  -->  00:03:13.280
and that they've all got different sets of modifiers.
68

68

00:03:13.280  -->  00:03:14.113
Then, moving on down,
69

69

00:03:14.113  -->  00:03:16.920
we've got a class there, InterfaceTest.
70

70

00:03:16.920  -->  00:03:19.310
This tests the veracity of the statement
71

71

00:03:19.310  -->  00:03:22.680
that regardless of how you define a field on an interface,
72

72

00:03:22.680  -->  00:03:25.950
they will always be public, static, and final.
73

73

00:03:25.950  -->  00:03:26.913
So, let's run this.
74

74

00:03:31.260  -->  00:03:33.280
So, there's the output, all fields on an interface
75

75

00:03:33.280  -->  00:03:35.250
are public static final.
76

76

00:03:35.250  -->  00:03:37.640
So, moving on, we're gonna define some concrete methods
77

77

00:03:37.640  -->  00:03:40.293
and then add those methods to the interface.
78

78

00:03:44.250  -->  00:03:47.350
Firstly, you can see we've got two private methods there.
79

79

00:03:47.350  -->  00:03:49.130
One static, one not.
80

80

00:03:49.130  -->  00:03:50.880
We've got one default method there,
81

81

00:03:50.880  -->  00:03:52.820
which is implicitly public,
82

82

00:03:52.820  -->  00:03:56.000
which actually calls the non-static privateMethod.
83

83

00:03:56.000  -->  00:03:57.150
And, scrolling on down,
84

84

00:03:58.170  -->  00:04:00.010
we've got one static method there
85

85

00:04:00.010  -->  00:04:01.730
and that's implicitly public
86

86

00:04:01.730  -->  00:04:05.240
and that one's actually calling this static private method.
87

87

00:04:05.240  -->  00:04:06.140
And, what we need to do then,
88

88

00:04:06.140  -->  00:04:07.600
we need to implement our interface,
89

89

00:04:07.600  -->  00:04:10.480
so let's do that for our InterfaceTest class.
90

90

00:04:10.480  -->  00:04:12.730
Implements InterfaceExample.
91

91

00:04:14.300  -->  00:04:16.060
Now that we've done that, we're gonna add some code
92

92

00:04:16.060  -->  00:04:18.260
right down to the bottom of the main method.
93

93

00:04:20.600  -->  00:04:24.350
So, this code executes the two non-private concrete methods.
94

94

00:04:24.350  -->  00:04:25.810
One through a static reference
95

95

00:04:25.810  -->  00:04:27.440
and one through an instance of an object
96

96

00:04:27.440  -->  00:04:29.750
that implements the interface.
97

97

00:04:29.750  -->  00:04:30.900
So, if we run this now,
98

98

00:04:34.060  -->  00:04:36.310
you can see that that works as expected.
99

99

00:04:36.310  -->  00:04:38.880
Again, executing the two non-private concrete methods.
100

100

00:04:38.880  -->  00:04:40.350
One through a static reference
101

101

00:04:40.350  -->  00:04:41.740
and one through an instance of an object
102

102

00:04:41.740  -->  00:04:43.240
that implements the interface.
103

103

00:04:44.320  -->  00:04:45.940
So, at this point, I've reviewed everything
104

104

00:04:45.940  -->  00:04:48.630
about an interface, except the initial intent of it.
105

105

00:04:48.630  -->  00:04:50.830
So, let's add an abstract method now.
106

106

00:04:50.830  -->  00:04:54.653
And, remember, all abstract methods are implicitly public.
107

107

00:04:55.540  -->  00:04:57.833
So, let's add a method now to our interface.
108

108

00:04:59.671  -->  00:05:00.700
And, you can see the example there,
109

109

00:05:00.700  -->  00:05:02.380
abstract void theImportantMethod.
110

110

00:05:02.380  -->  00:05:04.710
This is the public method that would, in theory,
111

111

00:05:04.710  -->  00:05:07.130
be the method that you'd want all implementing classes
112

112

00:05:07.130  -->  00:05:08.550
to have in common.
113

113

00:05:08.550  -->  00:05:09.940
And, obviously, now I need to implement
114

114

00:05:09.940  -->  00:05:12.183
that particular method in our public class
115

115

00:05:12.183  -->  00:05:14.490
that implements the interface.
116

116

00:05:14.490  -->  00:05:16.270
So, what I'm gonna do now is add some code,
117

117

00:05:16.270  -->  00:05:19.470
add some methods to our class here,
118

118

00:05:19.470  -->  00:05:21.073
our InterfaceTest class.
119

119

00:05:22.590  -->  00:05:23.423
Paste that in.
120

120

00:05:24.949  -->  00:05:26.300
So, the code that I've posted in
121

121

00:05:26.300  -->  00:05:29.003
includes the implemented overridden method, line 76.
122

122

00:05:29.003  -->  00:05:31.430
And, you can see that IntelliJ's showing us
123

123

00:05:31.430  -->  00:05:32.900
that that's an overridden method.
124

124

00:05:32.900  -->  00:05:34.020
I've also created a method
125

125

00:05:34.020  -->  00:05:36.570
that takes an InterfaceExample parameter.
126

126

00:05:36.570  -->  00:05:38.610
And, also, a method that takes an Object parameter
127

127

00:05:38.610  -->  00:05:40.410
and tests it with instanceof
128

128

00:05:40.410  -->  00:05:42.513
and casts it to the interface type.
129

129

00:05:43.980  -->  00:05:45.730
That's this one down here.
130

130

00:05:45.730  -->  00:05:48.200
So, next, we want to go back to our main method
131

131

00:05:48.200  -->  00:05:51.250
and paste this on code, so we can actually execute
132

132

00:05:51.250  -->  00:05:52.463
and test these methods.
133

133

00:05:53.320  -->  00:05:54.300
You can see what I'm doing there,
134

134

00:05:54.300  -->  00:05:56.370
adding code to basically execute the methods
135

135

00:05:56.370  -->  00:05:58.300
using the interface type.
136

136

00:05:58.300  -->  00:05:59.250
So, let's run this.
137

137

00:06:03.270  -->  00:06:04.640
You can see, we've got the relevant output
138

138

00:06:04.640  -->  00:06:06.510
down at the bottom of the screen.
139

139

00:06:06.510  -->  00:06:08.630
So, let's try another example here now.
140

140

00:06:08.630  -->  00:06:10.100
So, I'm gonna paste in some more code,
141

141

00:06:10.100  -->  00:06:12.110
but we have to create a class first
142

142

00:06:12.110  -->  00:06:14.310
and the class is gonna be called TestGrowth.
143

143

00:06:21.670  -->  00:06:22.773
So, there's our code.
144

144

00:06:22.773  -->  00:06:25.740
Now, this code consists of an expandable interface
145

145

00:06:25.740  -->  00:06:28.480
that declares the expand abstract method.
146

146

00:06:28.480  -->  00:06:30.300
We've got a Collapsible interface there
147

147

00:06:30.300  -->  00:06:31.930
and you can see that we're declaring
148

148

00:06:31.930  -->  00:06:33.530
a collapse abstract method.
149

149

00:06:33.530  -->  00:06:35.496
We've then got three classes here.
150

150

00:06:35.496  -->  00:06:37.540
IceCooler, which implements Collapsible.
151

151

00:06:37.540  -->  00:06:40.140
SuitCase, which implements Expandable.
152

152

00:06:40.140  -->  00:06:42.260
And, Portfolio, which implements
153

153

00:06:42.260  -->  00:06:44.620
both Expandable and Collapsible.
154

154

00:06:44.620  -->  00:06:45.470
And then, down at the bottom, we've
155

155

00:06:45.470  -->  00:06:46.590
got our TestGrowth class.
156

156

00:06:46.590  -->  00:06:48.850
At the moment, it doesn't have anything in it.
157

157

00:06:48.850  -->  00:06:50.130
So, what we're attempting to do here is
158

158

00:06:50.130  -->  00:06:52.730
to demonstrate that objects that may have little in common
159

159

00:06:52.730  -->  00:06:55.100
can implement the same interface.
160

160

00:06:55.100  -->  00:06:57.883
Let's now paste some code into our TestGrowth class,
161

161

00:06:58.800  -->  00:07:01.190
which consists of the main method,
162

162

00:07:01.190  -->  00:07:03.490
which we can use to execute some code.
163

163

00:07:03.490  -->  00:07:05.280
But before I talk about that, we've also added
164

164

00:07:05.280  -->  00:07:06.980
some test methods down here.
165

165

00:07:06.980  -->  00:07:08.710
So, we've got a TestExpand there
166

166

00:07:08.710  -->  00:07:11.260
that defines its parameter type as Expandable
167

167

00:07:11.260  -->  00:07:14.380
and calls the expand method on the interface.
168

168

00:07:14.380  -->  00:07:15.980
Next, we've got a TestCollapse method
169

169

00:07:15.980  -->  00:07:18.540
that defines its parameter type as Collapsible
170

170

00:07:18.540  -->  00:07:21.930
and it calls the collapse method on the interface.
171

171

00:07:21.930  -->  00:07:24.350
So, getting back to our main method now,
172

172

00:07:24.350  -->  00:07:26.370
you can see that I'm creating some objects firstly
173

173

00:07:26.370  -->  00:07:28.090
and, again, it could probably reasonably argued
174

174

00:07:28.090  -->  00:07:31.100
that these objects don't have a lot in common.
175

175

00:07:31.100  -->  00:07:34.020
And then, creating some arrays of interfaces
176

176

00:07:34.020  -->  00:07:38.070
and processing the array using the interface types.
177

177

00:07:38.070  -->  00:07:40.160
Note that the calls there
178

178

00:07:40.160  -->  00:07:43.720
to TestExpand and TestCollapse are both generic
179

179

00:07:43.720  -->  00:07:45.180
and the objects passed
180

180

00:07:45.180  -->  00:07:47.540
execute their own versions of expand and collapse
181

181

00:07:47.540  -->  00:07:49.680
as we'll see when we run it.
182

182

00:07:49.680  -->  00:07:50.830
So, let's run the code.
183

183

00:07:54.314  -->  00:07:57.400
And, as you can see, they're clearly running their own code.
184

184

00:08:01.450  -->  00:08:03.600
So, this video demonstrated that interfaces
185

185

00:08:03.600  -->  00:08:06.060
give you all the benefits of polymorphism
186

186

00:08:06.060  -->  00:08:07.860
for objects that implement them,
187

187

00:08:07.860  -->  00:08:09.980
but keep you free of having to add behaviour
188

188

00:08:09.980  -->  00:08:11.630
to your business entities
189

189

00:08:11.630  -->  00:08:13.650
that maybe does not quite fit your model.
190

190

00:08:13.650  -->  00:08:16.790
Or, they are to facilitate behaviour that's not specific
191

191

00:08:16.790  -->  00:08:18.670
to your entity's type.
192

192

00:08:18.670  -->  00:08:21.080
You can declare methods using interface types,
193

193

00:08:21.080  -->  00:08:24.130
you can cast to interface types, and declare variables
194

194

00:08:24.130  -->  00:08:26.233
with an interface type, including arrays.
195

195

00:08:27.240  -->  00:08:28.480
So, moving on, in the next video,
196

196

00:08:28.480  -->  00:08:29.600
I'm gonna discuss the differences
197

197

00:08:29.600  -->  00:08:32.490
between abstract classes and interfaces.
198

198

00:08:32.490  -->  00:08:33.790
See you in the next video.
