WEBVTT
1
1

00:00:05.150  -->  00:00:08.420
<v Tim>So let's have a recap on primitive data types.</v>
2

2

00:00:08.420  -->  00:00:10.610
Java supports two types of data,
3

3

00:00:10.610  -->  00:00:14.120
reference data types and primitive data types.
4

4

00:00:14.120  -->  00:00:17.540
The data value of a primitive data type is stored in memory
5

5

00:00:17.540  -->  00:00:20.610
and is not a location of reference to the data.
6

6

00:00:20.610  -->  00:00:23.890
And that makes accessing primitive data types faster
7

7

00:00:23.890  -->  00:00:25.740
and also leads to more efficient performance
8

8

00:00:25.740  -->  00:00:27.430
when it really matters.
9

9

00:00:27.430  -->  00:00:30.330
Unlike C sharp though, these are not objects.
10

10

00:00:30.330  -->  00:00:32.580
Because Java allows primitive data types
11

11

00:00:32.580  -->  00:00:36.020
which do not inherit from object like every other instance,
12

12

00:00:36.020  -->  00:00:37.350
Java is not considered
13

13

00:00:37.350  -->  00:00:40.003
to be a pure object oriented language.
14

14

00:00:41.040  -->  00:00:43.080
Now there's eight primitive data types
15

15

00:00:43.080  -->  00:00:44.540
as shown on this slide.
16

16

00:00:44.540  -->  00:00:47.510
The first five are represented in two's complement format,
17

17

00:00:47.510  -->  00:00:48.730
which is important,
18

18

00:00:48.730  -->  00:00:51.350
especially for the four signed primitives.
19

19

00:00:51.350  -->  00:00:53.190
Only the char is unsigned,
20

20

00:00:53.190  -->  00:00:55.970
where the left most bit represents the sign,
21

21

00:00:55.970  -->  00:00:57.033
negative or positive.
22

22

00:00:58.260  -->  00:00:59.610
Float and Double
23

23

00:00:59.610  -->  00:01:02.920
are floating point representations and approximations
24

24

00:01:02.920  -->  00:01:05.630
and will not overflow more on this later.
25

25

00:01:05.630  -->  00:01:07.150
These are used when precision
26

26

00:01:07.150  -->  00:01:09.083
after the decimal point is critical.
27

27

00:01:10.170  -->  00:01:13.220
Note also that Java supports a wrapper object,
28

28

00:01:13.220  -->  00:01:17.290
a true reference data type for each primitive data type.
29

29

00:01:17.290  -->  00:01:18.830
Right, so that was a quick recap.
30

30

00:01:18.830  -->  00:01:20.020
Please move onto the next video
31

31

00:01:20.020  -->  00:01:23.360
we're going to have a look at declaring variables
32

32

00:01:23.360  -->  00:01:24.500
for primitive data types,
33

33

00:01:24.500  -->  00:01:28.160
and some of the issues you might get asked about in an exam.
34

34

00:01:28.160  -->  00:01:29.613
See you in the next video.
