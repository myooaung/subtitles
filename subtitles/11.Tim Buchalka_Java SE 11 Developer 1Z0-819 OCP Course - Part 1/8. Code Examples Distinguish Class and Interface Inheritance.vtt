WEBVTT
1
1

00:00:05.420  -->  00:00:07.140
<v Instructor>All right, so maybe now we're going to</v>
2

2

00:00:07.140  -->  00:00:08.960
start exploring some coding examples
3

3

00:00:08.960  -->  00:00:10.576
of what we discussed in the previous video.
4

4

00:00:10.576  -->  00:00:13.200
So, I'm gonna start by creating a new class.
5

5

00:00:13.200  -->  00:00:15.900
You know, we devised this project to compare examples.
6

6

00:00:17.955  -->  00:00:20.038
(typing)
7

7

00:00:27.757  -->  00:00:29.920
all right, so we got a class global information.
8

8

00:00:29.920  -->  00:00:32.970
Can see that's got some global fields, which keep track
9

9

00:00:32.970  -->  00:00:35.140
of how many instances of a particular class
10

10

00:00:35.140  -->  00:00:36.960
or instance you added.
11

11

00:00:36.960  -->  00:00:39.220
We've got an abstract class there, CounterClass,
12

12

00:00:39.220  -->  00:00:42.130
with one abstract method called countMyInstances.
13

13

00:00:42.130  -->  00:00:44.250
Any class that extends this abstract class
14

14

00:00:44.250  -->  00:00:45.683
must implement this method.
15

15

00:00:47.010  -->  00:00:49.320
We've got another abstract class there, Animal,
16

16

00:00:49.320  -->  00:00:52.540
which represents some of the entities at the basest level,
17

17

00:00:52.540  -->  00:00:54.960
including defining name and top attributes
18

18

00:00:54.960  -->  00:00:57.330
and calling the abstract method countMyInstances
19

19

00:00:57.330  -->  00:00:59.180
from its constructor.
20

20

00:00:59.180  -->  00:01:01.170
Thus, per the comment there, it says that we want
21

21

00:01:01.170  -->  00:01:04.250
every other class to execute the countMyInstances method.
22

22

00:01:04.250  -->  00:01:06.583
Without interfaces, this means extending every entity
23

23

00:01:06.583  -->  00:01:09.380
from the abstract class that enforces subclasses
24

24

00:01:09.380  -->  00:01:10.447
to implement the method.
25

25

00:01:10.447  -->  00:01:12.890
With the Animal class, we're also abstracting it here,
26

26

00:01:12.890  -->  00:01:14.923
so it doesn't have to implement the method.
27

27

00:01:16.110  -->  00:01:17.870
And right down the bottom there, we create our
28

28

00:01:17.870  -->  00:01:20.624
CompareExamples class with the main method,
29

29

00:01:20.624  -->  00:01:23.300
which we'll add some code to shortly.
30

30

00:01:23.300  -->  00:01:25.630
So you can see here that we've put CounterClass
31

31

00:01:25.630  -->  00:01:27.343
in our entity hierarchy.
32

32

00:01:28.690  -->  00:01:30.900
So that we can support the common functionality
33

33

00:01:30.900  -->  00:01:34.540
of countMyInstances via class inheritance.
34

34

00:01:34.540  -->  00:01:37.240
All right, so let's add some more code to this example.
35

35

00:01:37.240  -->  00:01:38.580
And we're gonna paste it just above
36

36

00:01:38.580  -->  00:01:40.496
our CompareExamples class.
37

37

00:01:40.496  -->  00:01:42.927
(typing)
38

38

00:01:42.927  -->  00:01:44.913
Go back up to what I've just pasted in.
39

39

00:01:46.000  -->  00:01:47.720
So, we're adding to concrete classes there.
40

40

00:01:47.720  -->  00:01:50.670
The first one is Dog, which extends Animal.
41

41

00:01:50.670  -->  00:01:52.550
And Cat actually does the same thing.
42

42

00:01:52.550  -->  00:01:53.850
And you can see in the case of Dog there,
43

43

00:01:53.850  -->  00:01:55.262
we've got a public constructor.
44

44

00:01:55.262  -->  00:01:58.344
And adding the countMyInstances method there as well.
45

45

00:01:58.344  -->  00:01:59.810
And basically doing essentially
46

46

00:01:59.810  -->  00:02:02.600
the same thing there for Cat.
47

47

00:02:02.600  -->  00:02:04.324
And again, we're having to do that, we have to implement
48

48

00:02:04.324  -->  00:02:08.173
the countMyInstances method because we're extending Animal.
49

49

00:02:09.336  -->  00:02:11.060
All right, so moving down, we've also got
50

50

00:02:11.060  -->  00:02:13.380
this class here they call Tree.
51

51

00:02:13.380  -->  00:02:15.810
Now this class has got nothing to do, or nothing in common,
52

52

00:02:15.810  -->  00:02:18.760
with Animal except we want it to also implement
53

53

00:02:18.760  -->  00:02:21.010
the countMyInstances method.
54

54

00:02:21.010  -->  00:02:22.980
And you can see that there we've got a public constructor
55

55

00:02:22.980  -->  00:02:25.730
and it's also implementing the countMyInstances method.
56

56

00:02:26.680  -->  00:02:28.170
All right, so let's put all of this together now
57

57

00:02:28.170  -->  00:02:30.098
by putting some code in our main method
58

58

00:02:30.098  -->  00:02:32.593
to start using some of this code.
59

59

00:02:35.330  -->  00:02:37.230
Okay, so there's the code.
60

60

00:02:37.230  -->  00:02:39.753
You see we're creating three instances at the top there.
61

61

00:02:39.753  -->  00:02:43.040
And we've got our three loops there, which are going through
62

62

00:02:43.040  -->  00:02:45.851
and creating instances for Dog, Cat and Tree.
63

63

00:02:45.851  -->  00:02:47.720
And then we're putting down on the bottom of the screen
64

64

00:02:47.720  -->  00:02:50.570
there the number of instances that were actually created.
65

65

00:02:51.780  -->  00:02:53.230
All right, so let's run this.
66

66

00:02:56.840  -->  00:02:58.620
And you can see there that we've got
67

67

00:02:58.620  -->  00:02:59.954
the number of Cat instances is seven.
68

68

00:02:59.954  -->  00:03:03.250
Dog instances five, Tree instances three,
69

69

00:03:03.250  -->  00:03:06.500
which is consistent the numbers we've defined in the loops.
70

70

00:03:06.500  -->  00:03:07.777
So, the code works.
71

71

00:03:07.777  -->  00:03:09.768
All is well, except what happens if you want behaviour
72

72

00:03:09.768  -->  00:03:13.560
that only applies to the Dog and the Tree, for example.
73

73

00:03:13.560  -->  00:03:14.543
And not the Cat.
74

74

00:03:16.660  -->  00:03:18.260
So, obviously, in the case here,
75

75

00:03:19.900  -->  00:03:21.870
Dog and Cat are both extending Animal.
76

76

00:03:21.870  -->  00:03:24.330
And the Tree is extending CounterClass.
77

77

00:03:24.330  -->  00:03:25.790
So, in this scenario, I need to define
78

78

00:03:25.790  -->  00:03:28.630
the behaviour in the common base class.
79

79

00:03:28.630  -->  00:03:32.030
Well, you just add the behaviour to those classes only.
80

80

00:03:32.030  -->  00:03:33.960
And again here, we're talking about if we want the behaviour
81

81

00:03:33.960  -->  00:03:35.670
that only applies to the Dog and the Tree,
82

82

00:03:35.670  -->  00:03:37.306
for example, and not the Cat.
83

83

00:03:37.306  -->  00:03:40.466
Adding additional behaviour to a base class will impact
84

84

00:03:40.466  -->  00:03:43.700
every object in your application, presumably.
85

85

00:03:43.700  -->  00:03:45.602
Now, are you really comfortable having a base class
86

86

00:03:45.602  -->  00:03:49.210
that has no meaning and describes behaviour only?
87

87

00:03:49.210  -->  00:03:52.780
So, let's write this code with an interface instead.
88

88

00:03:52.780  -->  00:03:54.307
And we're going to do this in another class.
89

89

00:03:54.307  -->  00:03:56.710
I'm going to put that class in a separate package,
90

90

00:03:56.710  -->  00:03:58.193
just to avoid any confusion.
91

91

00:03:59.410  -->  00:04:03.870
So, new Java class, we'll call this one Interface.
92

92

00:04:03.870  -->  00:04:06.104
Interface is being the name of the package.
93

93

00:04:06.104  -->  00:04:08.660
Dot. Compare examples 2.
94

94

00:04:14.065  -->  00:04:17.390
All right, so there's the code this time using interfaces.
95

95

00:04:17.390  -->  00:04:20.750
So, here what we've done, firstly, we've eliminated
96

96

00:04:20.750  -->  00:04:22.990
the abstract class, CounterClass.
97

97

00:04:22.990  -->  00:04:25.110
So, we've got the same global information class
98

98

00:04:25.110  -->  00:04:26.143
we had previously.
99

99

00:04:27.030  -->  00:04:29.189
We've now added an interface, Countable,
100

100

00:04:29.189  -->  00:04:32.650
which describes the countMyInstances method.
101

101

00:04:32.650  -->  00:04:34.884
And looking at the Animal class, which is still abstract,
102

102

00:04:34.884  -->  00:04:37.752
we changed it from extending CounterClass
103

103

00:04:37.752  -->  00:04:40.890
and replaced it with implements Countable.
104

104

00:04:40.890  -->  00:04:44.532
Still got the same Dog and Cat classes, you can see there.
105

105

00:04:44.532  -->  00:04:46.007
And going down to our Tree class,
106

106

00:04:46.007  -->  00:04:48.970
that now implements Countable, as well.
107

107

00:04:48.970  -->  00:04:50.960
So, we basically removed the extends CounterClass
108

108

00:04:50.960  -->  00:04:52.990
and replaced it with implements Countable.
109

109

00:04:52.990  -->  00:04:54.140
So, that's actually it.
110

110

00:04:55.900  -->  00:04:57.780
We've got exactly the same code in the main method.
111

111

00:04:57.780  -->  00:05:02.560
So, if we run that, we got exactly the same results
112

112

00:05:02.560  -->  00:05:03.853
as the previous code.
113

113

00:05:06.930  -->  00:05:07.850
So, what's the big deal here?
114

114

00:05:07.850  -->  00:05:09.790
It's basically the exact same amount of code
115

115

00:05:09.790  -->  00:05:11.650
and functionality, right?
116

116

00:05:11.650  -->  00:05:13.630
Well, the difference is twofold.
117

117

00:05:13.630  -->  00:05:16.110
First, we don't have some abstract class
118

118

00:05:16.110  -->  00:05:19.470
that has no relationship to our model as a base class.
119

119

00:05:19.470  -->  00:05:22.730
We're able to maintain the integrity of our business model.
120

120

00:05:22.730  -->  00:05:25.020
Second, if you need behaviour that only
121

121

00:05:25.020  -->  00:05:28.540
the Dog and Tree require, we can create another interface
122

122

00:05:28.540  -->  00:05:31.460
with just that behaviour described and have only those
123

123

00:05:31.460  -->  00:05:34.357
classes implement that method, having zero impact
124

124

00:05:34.357  -->  00:05:37.060
on other areas of our application.
125

125

00:05:37.060  -->  00:05:39.380
Implementing an interface here, instead of perhaps just
126

126

00:05:39.380  -->  00:05:41.210
delegating the counting method to another class,
127

127

00:05:41.210  -->  00:05:44.513
also allows you to describe your objects as Countable
128

128

00:05:44.513  -->  00:05:48.373
and use any functionality available to Countable types.
129

129

00:05:49.380  -->  00:05:51.660
All right, so that concludes now the comparison
130

130

00:05:51.660  -->  00:05:54.670
of interface inheritance compared to class inheritance,
131

131

00:05:54.670  -->  00:05:57.120
that we've talked about in this video and the previous one.
132

132

00:05:57.120  -->  00:05:59.270
Coming up next is a couple of quiz questions and then,
133

133

00:05:59.270  -->  00:06:01.350
after that, we're gonna start talking about declaring
134

134

00:06:01.350  -->  00:06:03.579
and using a list and a rail list instances.
135

135

00:06:03.579  -->  00:06:05.193
See you in the next video.
