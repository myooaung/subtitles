WEBVTT
1
1

00:00:05.419  -->  00:00:07.100 line:15% 
<v ->All right, so let's visit the simplest</v>
2

2

00:00:07.100  -->  00:00:09.780 line:15% 
of the ArrayList methods, because these are easy
3

3

00:00:09.780  -->  00:00:12.250 line:15% 
to overlook in an exam question.
4

4

00:00:12.250  -->  00:00:15.390
You need to create a new class in our ArrayList project,
5

5

00:00:15.390  -->  00:00:17.227
I'm gonna call it ArrayListExtras.
6

6

00:00:21.476  -->  00:00:23.559
(typing)
7

7

00:00:28.216  -->  00:00:29.680
All right, so this code consists firstly,
8

8

00:00:29.680  -->  00:00:31.430
of a class, ArrayListExtras, obviously,
9

9

00:00:31.430  -->  00:00:34.810
but we've also got a nested static BaseClass there.
10

10

00:00:34.810  -->  00:00:36.430
And I'm gonna use that in our typed ArrayList,
11

11

00:00:36.430  -->  00:00:37.870
which we'll talk about shortly.
12

12

00:00:37.870  -->  00:00:40.990
So this static class, this nested class,
13

13

00:00:40.990  -->  00:00:42.770
has a simple one parameter constructor
14

14

00:00:42.770  -->  00:00:45.200
that sets its attribute name, as you can see.
15

15

00:00:45.200  -->  00:00:46.173
An additional setter method for name,
16

16

00:00:46.173  -->  00:00:48.243
as well as the toString method.
17

17

00:00:49.100  -->  00:00:51.920
So scrolling down, we've got our main method there.
18

18

00:00:51.920  -->  00:00:53.970
This creates two tops or ArrayList objects.
19

19

00:00:53.970  -->  00:00:55.110
One's a rawList.
20

20

00:00:55.110  -->  00:00:58.329
And one's a typedList, with the BaseClass type.
21

21

00:00:58.329  -->  00:01:00.810
So you can see, we're adding new BaseClass objects
22

22

00:01:00.810  -->  00:01:02.920
to the typed ArrayList initially.
23

23

00:01:02.920  -->  00:01:05.010
We're demonstrating looping next,
24

24

00:01:05.010  -->  00:01:08.150
using the typed ArrayList, with not casting required.
25

25

00:01:08.150  -->  00:01:10.130
And populating the rawList at the same time,
26

26

00:01:10.130  -->  00:01:13.380
with its own copies of the BaseClass objects.
27

27

00:01:13.380  -->  00:01:15.110
And then scrolling down further,
28

28

00:01:15.110  -->  00:01:17.990
demonstrating accessing elements from each list,
29

29

00:01:17.990  -->  00:01:21.780
noting that the BaseClass list requires no casting.
30

30

00:01:21.780  -->  00:01:22.613
We're on that.
31

31

00:01:28.040  -->  00:01:30.110
All right, so none of this is out of the ordinary,
32

32

00:01:30.110  -->  00:01:33.100
but let's just compare the add and set methods a little bit.
33

33

00:01:33.100  -->  00:01:34.553
So close the output pane.
34

34

00:01:36.020  -->  00:01:37.140
All right, so I'm gonna add a bit more code
35

35

00:01:37.140  -->  00:01:40.933
to the main method here, like so.
36

36

00:01:41.810  -->  00:01:45.510
Now look closely at the add method and the set method.
37

37

00:01:45.510  -->  00:01:49.130
Both reference of index that one past the last index,
38

38

00:01:49.130  -->  00:01:52.140
which is always that List.size minus one.
39

39

00:01:52.140  -->  00:01:54.090
Let's run it and see what happens here.
40

40

00:01:56.450  -->  00:01:58.270
Yeah, you can see that we've got an exception thrown
41

41

00:01:58.270  -->  00:02:01.123
at the set statement and not at the add statement.
42

42

00:02:02.420  -->  00:02:04.010
So line 69 in this case,
43

43

00:02:04.010  -->  00:02:06.423
with the exception Index 5 out of bounds.
44

44

00:02:09.340  -->  00:02:10.820
So this is a subtle difference,
45

45

00:02:10.820  -->  00:02:12.370
which you might easily overlook
46

46

00:02:12.370  -->  00:02:14.790
in an exam question as you get weary.
47

47

00:02:14.790  -->  00:02:17.760
If you remember that add, is really adding more elements,
48

48

00:02:17.760  -->  00:02:19.550
either appending to the list or inserting
49

49

00:02:19.550  -->  00:02:21.820
additional elements at a specified index.
50

50

00:02:21.820  -->  00:02:23.940
And set is changing the object being referenced
51

51

00:02:23.940  -->  00:02:25.490
at a particular index.
52

52

00:02:25.490  -->  00:02:27.840
You'll know that setting an object at an index past
53

53

00:02:27.840  -->  00:02:30.490
the list's size will cause an error, and it did here.
54

54

00:02:31.800  -->  00:02:34.240
So let's remove, well actually what I'll do,
55

55

00:02:34.240  -->  00:02:35.940
is I'll comment out the set there.
56

56

00:02:37.340  -->  00:02:39.800
And it's that below that, what I'm going to do,
57

57

00:02:39.800  -->  00:02:43.710
is take a copy of the add, paste it in there.
58

58

00:02:43.710  -->  00:02:45.490
We gotta change this over here.
59

59

00:02:45.490  -->  00:02:47.790
Instead of typedList.size, you're gonna put
60

60

00:02:47.790  -->  00:02:51.110
a plus one there, everything else is the same.
61

61

00:02:51.110  -->  00:02:51.973
Run the code.
62

62

00:02:54.300  -->  00:02:55.460
And we've got another exception,
63

63

00:02:55.460  -->  00:02:57.750
this time, as you can see on line 70.
64

64

00:02:57.750  -->  00:02:59.690
If you're going to use the add method
65

65

00:02:59.690  -->  00:03:03.450
and exceed the index size, it can only be by one.
66

66

00:03:03.450  -->  00:03:05.500
All right, so let's remove that line out.
67

67

00:03:07.280  -->  00:03:09.253
All right, so we're gonna add some more code.
68

68

00:03:12.000  -->  00:03:14.493
We need to import Java.U2.list.
69

69

00:03:16.290  -->  00:03:19.070
Now this code's using the addAll method with an index,
70

70

00:03:19.070  -->  00:03:22.560
to add all the elements in the list to the typed ArrayList.
71

71

00:03:22.560  -->  00:03:24.710
And you can see with addAll, that again,
72

72

00:03:24.710  -->  00:03:26.960
if we use an index and want to add elements
73

73

00:03:26.960  -->  00:03:29.800
to the end of the list, we use the List.size.
74

74

00:03:29.800  -->  00:03:32.510
And that's equal to addAll with no index.
75

75

00:03:32.510  -->  00:03:34.560
And now in addition, we're using the set method
76

76

00:03:34.560  -->  00:03:38.173
on our rawList to add the elements to the typedSubList.
77

77

00:03:40.050  -->  00:03:43.430
Now the problem here, is we've got a compiler error
78

78

00:03:43.430  -->  00:03:45.420
on the typedList.set statement.
79

79

00:03:45.420  -->  00:03:47.950
Because we defined a type for this ArrayList,
80

80

00:03:47.950  -->  00:03:50.280
the compiler indicates that we've made an error
81

81

00:03:50.280  -->  00:03:51.430
and we're trying to set something
82

82

00:03:51.430  -->  00:03:53.960
other than BaseClass into the list.
83

83

00:03:53.960  -->  00:03:56.113
So we'll comment that out, for that reason.
84

84

00:03:57.010  -->  00:03:59.490
And let's also take some output,
85

85

00:03:59.490  -->  00:04:01.200
some code that will do some outputting for us,
86

86

00:04:01.200  -->  00:04:02.900
and put that down at the bottom as well.
87

87

00:04:02.900  -->  00:04:04.033
Let's now run this.
88

88

00:04:07.110  -->  00:04:10.260
Now look closely at the output, specifically as rawList.
89

89

00:04:10.260  -->  00:04:12.530
And notice, that we didn't actually insert elements
90

90

00:04:12.530  -->  00:04:16.490
at index zero, instead we replaced the BaseClass object
91

91

00:04:16.490  -->  00:04:17.743
with our sub-typedList.
92

92

00:04:18.660  -->  00:04:20.640
The point here, is that it's very easy
93

93

00:04:20.640  -->  00:04:23.240
to overlook the misuse of these methods,
94

94

00:04:23.240  -->  00:04:25.940
that are part of our most common Lexicon.
95

95

00:04:25.940  -->  00:04:28.963
So something to watch out for, certainly in exams.
96

96

00:04:29.880  -->  00:04:32.230
All right, so let's now look at set
97

97

00:04:32.230  -->  00:04:34.110
with newly instantiated lists.
98

98

00:04:34.110  -->  00:04:36.360
So we've got some more code to paste in here.
99

99

00:04:40.810  -->  00:04:42.430
All right, so there's the code.
100

100

00:04:42.430  -->  00:04:44.580
Now as you can see, this code compiles.
101

101

00:04:44.580  -->  00:04:49.580
But when I run it, we actually get an exception on line 94.
102

102

00:04:51.500  -->  00:04:54.493
So we'll change line 94 to be an add, instead of a set.
103

103

00:04:57.010  -->  00:04:57.843
Run it again.
104

104

00:04:59.260  -->  00:05:01.560
We've not got an exception, as you can see on line 97.
105

105

00:05:01.560  -->  00:05:03.270
So I'm gonna do the same thing.
106

106

00:05:03.270  -->  00:05:04.453
Set becomes add.
107

107

00:05:05.310  -->  00:05:06.143
Run it again.
108

108

00:05:08.288  -->  00:05:10.760
Another exception, line 101 this time.
109

109

00:05:10.760  -->  00:05:14.713
We'll change set to be add, and run it again.
110

110

00:05:16.090  -->  00:05:18.680
And the code now works without an exception.
111

111

00:05:18.680  -->  00:05:21.290
So you can see here, that just instantiating a list,
112

112

00:05:21.290  -->  00:05:24.020
even when setting capacity, doesn't fill the list
113

113

00:05:24.020  -->  00:05:27.306
with any default elements, including null.
114

114

00:05:27.306  -->  00:05:29.500
All right, so finally here, let's see what happens
115

115

00:05:29.500  -->  00:05:33.056
with subList, when we use it on the typed ArrayList.
116

116

00:05:33.056  -->  00:05:34.803
So I'm gonna paste some more code in.
117

117

00:05:37.500  -->  00:05:39.030
So this code segment,
118

118

00:05:39.030  -->  00:05:41.580
I've introduced an error on the last line.
119

119

00:05:41.580  -->  00:05:44.850
Because it's a rawList returned, trying to access an object
120

120

00:05:44.850  -->  00:05:47.340
on the list, and not specifying a type,
121

121

00:05:47.340  -->  00:05:49.330
well, that results in a compiler error.
122

122

00:05:49.330  -->  00:05:51.020
In this case, you can see it's trying to setName,
123

123

00:05:51.020  -->  00:05:53.620
you can't resolve method setName in object,
124

124

00:05:53.620  -->  00:05:54.820
because of the type.
125

125

00:05:54.820  -->  00:05:56.420
I'll comment that last line out.
126

126

00:06:00.060  -->  00:06:01.250
So this video reviewed things
127

127

00:06:01.250  -->  00:06:02.980
that were really not out of the ordinary,
128

128

00:06:02.980  -->  00:06:05.990
but things that are ordinary and easy to overlook.
129

129

00:06:05.990  -->  00:06:08.790
Be careful if you see methods that are similarly named
130

130

00:06:08.790  -->  00:06:11.680
to those on List, like setAll, not a method on List,
131

131

00:06:11.680  -->  00:06:14.130
but a method on the Arrays class.
132

132

00:06:14.130  -->  00:06:16.150
Or methods that have the wrong number of parameters,
133

133

00:06:16.150  -->  00:06:19.010
such as indexOf, lastIndexOf methods
134

134

00:06:19.010  -->  00:06:23.480
with additional parameters, String usage not List usage.
135

135

00:06:23.480  -->  00:06:25.600
Be careful to remember that using set,
136

136

00:06:25.600  -->  00:06:27.410
with an index out of the range,
137

137

00:06:27.410  -->  00:06:29.570
will cause a runtime exception.
138

138

00:06:29.570  -->  00:06:30.840
All right, so we'll finish the video here.
139

139

00:06:30.840  -->  00:06:33.360
Next I'm gonna present you with a couple of quiz questions,
140

140

00:06:33.360  -->  00:06:36.410 line:15% 
then we'll move on to the next video after that.
141

141

00:06:36.410  -->  00:06:39.250 line:15% 
And that's gonna be understanding lambda expressions.
142

142

00:06:39.250  -->  00:06:40.950 line:15% 
So I'll see you in the next video.
