WEBVTT
1
1

00:00:05.440  -->  00:00:06.740
<v Tim>Right, so let's talk about some out</v>
2

2

00:00:06.740  -->  00:00:08.960
of the ordinary situations when creating
3

3

00:00:08.960  -->  00:00:11.090
and invoking overloaded methods.
4

4

00:00:11.090  -->  00:00:13.250
So previously I'd talked about overloading methods
5

5

00:00:13.250  -->  00:00:15.840
and how the Java virtual machine resolves
6

6

00:00:15.840  -->  00:00:18.090
which overloaded method is executed.
7

7

00:00:18.090  -->  00:00:20.140
Let's go through another example of that.
8

8

00:00:20.980  -->  00:00:22.600
So we're in our methods project again,
9

9

00:00:22.600  -->  00:00:24.530
we're going to create a new class,
10

10

00:00:24.530  -->  00:00:26.763
we're gonna call this one, OverloadTests.
11

11

00:00:34.495  -->  00:00:36.170
Okay, so there's our code.
12

12

00:00:36.170  -->  00:00:37.760
You can see here that we've got a calculator class
13

13

00:00:37.760  -->  00:00:41.093
that's got multiple static overloaded methods for add.
14

14

00:00:42.710  -->  00:00:44.690
Which is a calculator add method
15

15

00:00:44.690  -->  00:00:47.080
and in our overloaded test class,
16

16

00:00:47.080  -->  00:00:49.100
we're calling the Calculator.add method,
17

17

00:00:49.100  -->  00:00:50.500
passing the relevant parameters
18

18

00:00:50.500  -->  00:00:53.003
to access the various overloaded methods.
19

19

00:00:54.103  -->  00:00:55.453
So if you run this firstly.
20

20

00:00:57.020  -->  00:00:59.890
We can see the output at the bottom of the screen.
21

21

00:00:59.890  -->  00:01:03.090
So the first two calls to calculator add,
22

22

00:01:03.090  -->  00:01:04.520
that's these ones here,
23

23

00:01:04.520  -->  00:01:08.090
use the method that has the var arg parameters for int.
24

24

00:01:08.090  -->  00:01:11.280
Now we'd expect that for the second call on line 41,
25

25

00:01:11.280  -->  00:01:12.930
because there's three arguments there,
26

26

00:01:12.930  -->  00:01:14.440
but what about the first?
27

27

00:01:14.440  -->  00:01:16.150
Did you expect that first call
28

28

00:01:16.150  -->  00:01:19.390
to go to our int plus long overloaded method?
29

29

00:01:19.390  -->  00:01:22.380
In other words, to the one that I find on line 18?
30

30

00:01:22.380  -->  00:01:23.770
So let's make a change to that.
31

31

00:01:23.770  -->  00:01:24.603
At the moment you can see
32

32

00:01:24.603  -->  00:01:25.847
that it's using a long wrapper class,
33

33

00:01:25.847  -->  00:01:27.830
that's the second argument.
34

34

00:01:27.830  -->  00:01:30.380
If I paste in the code, we're now using a long primitive,
35

35

00:01:30.380  -->  00:01:32.240
in the method signature on line 18.
36

36

00:01:32.240  -->  00:01:33.193
Let's run the code.
37

37

00:01:36.631  -->  00:01:38.170
There you can see we've got a different result now
38

38

00:01:38.170  -->  00:01:40.120
in the output pane for both the first
39

39

00:01:40.120  -->  00:01:42.720
and third calls to calculator add.
40

40

00:01:42.720  -->  00:01:44.960
Now using the int plus long method,
41

41

00:01:44.960  -->  00:01:47.100
as opposed to using the var arguments method
42

42

00:01:47.100  -->  00:01:49.300
that it was previously executing.
43

43

00:01:49.300  -->  00:01:51.320
So you can see that a primitive data-type int
44

44

00:01:51.320  -->  00:01:53.410
will get widened to a long
45

45

00:01:53.410  -->  00:01:55.610
as it looks for a matching method parameter
46

46

00:01:55.610  -->  00:01:58.010
but it won't ever become a long wrapper,
47

47

00:01:58.010  -->  00:02:00.360
which is why a method with a long wrapper parameter
48

48

00:02:00.360  -->  00:02:03.450
won't match an int primitive parameter.
49

49

00:02:03.450  -->  00:02:06.150
The third call to add, pass an int and a long literal.
50

50

00:02:07.730  -->  00:02:09.680
You can see that on line 44.
51

51

00:02:09.680  -->  00:02:11.560
When our method parameter was long,
52

52

00:02:11.560  -->  00:02:13.410
long as in the wrapper, it matched
53

53

00:02:13.410  -->  00:02:16.140
and it also matches the long primitive.
54

54

00:02:16.140  -->  00:02:17.810
All right, so moving on now.
55

55

00:02:17.810  -->  00:02:19.140
Let's add another method
56

56

00:02:19.140  -->  00:02:21.040
that has a long as a second parameter.
57

57

00:02:23.580  -->  00:02:26.610
I'll add this right at the bottom of the calculator class
58

58

00:02:26.610  -->  00:02:27.810
and if you run this now,
59

59

00:02:31.560  -->  00:02:34.480
we can see that the method with the primitive long
60

60

00:02:34.480  -->  00:02:36.560
takes precedence over a method
61

61

00:02:36.560  -->  00:02:38.400
with the wrapper class long
62

62

00:02:38.400  -->  00:02:40.670
if you have both in the same class.
63

63

00:02:40.670  -->  00:02:43.810
All right and moving down back to our tests again,
64

64

00:02:43.810  -->  00:02:47.740 line:15% 
we've got a call that uses a double literal on line 52.
65

65

00:02:47.740  -->  00:02:49.120 line:15% 
Basically that's matching
66

66

00:02:49.120  -->  00:02:51.700
the method we've created up here on line 12,
67

67

00:02:51.700  -->  00:02:54.053
that takes two arguments, an int and a double.
68

68

00:02:56.073  -->  00:02:56.906
And you can see that in the output
69

69

00:02:56.906  -->  00:02:58.070
at the bottom of the screen.
70

70

00:02:58.070  -->  00:03:01.070
What happens when I change the double to a float?
71

71

00:03:01.070  -->  00:03:04.450
Now I'll do that by adding the post fix f,
72

72

00:03:04.450  -->  00:03:06.410
now suddenly we've got an error,
73

73

00:03:06.410  -->  00:03:09.080
can't resolve method, add int comma float.
74

74

00:03:09.080  -->  00:03:11.770
Basically an overloaded method doesn't exist
75

75

00:03:11.770  -->  00:03:13.500
for what is needed, in this case,
76

76

00:03:13.500  -->  00:03:16.537
an int and a float for the calculator add class.
77

77

00:03:16.537  -->  00:03:19.350
Now this is another example of a float literal,
78

78

00:03:19.350  -->  00:03:21.270
never becoming a double wrapper.
79

79

00:03:21.270  -->  00:03:23.000
So therefore it's not gonna match an int
80

80

00:03:23.000  -->  00:03:25.770
and a double wrapper and all the other methods
81

81

00:03:25.770  -->  00:03:27.920
that we've defined obviously do not match this, either.
82

82

00:03:27.920  -->  00:03:30.250
So let's just change that, or go back to what we had before,
83

83

00:03:30.250  -->  00:03:32.200
so the code's now valid again.
84

84

00:03:32.200  -->  00:03:35.620
And I wanna look at the var args methods, one last time.
85

85

00:03:35.620  -->  00:03:36.890
Now what I wanna do here,
86

86

00:03:36.890  -->  00:03:40.750
is make a change to one of these calculator add methods.
87

87

00:03:40.750  -->  00:03:43.003
And specifically the one I wanna change is the one
88

88

00:03:43.003  -->  00:03:44.580
that we defined here on line 18,
89

89

00:03:44.580  -->  00:03:46.963
that takes two permitted types, int and long,
90

90

00:03:47.980  -->  00:03:50.453
so I'm going to change that, paste in the code.
91

91

00:03:51.340  -->  00:03:52.173
So what have we done here?
92

92

00:03:52.173  -->  00:03:54.560
Well we've added another overloaded method
93

93

00:03:54.560  -->  00:03:55.660
with variable arguments,
94

94

00:03:55.660  -->  00:03:58.790
the var args is the last parameter on line 18.
95

95

00:03:58.790  -->  00:04:00.820
So this is a valid overloaded method.
96

96

00:04:00.820  -->  00:04:01.680
So everything's fine there,
97

97

00:04:01.680  -->  00:04:03.590
but if we look down the code now,
98

98

00:04:03.590  -->  00:04:06.150
in our main method, we've got a compile error
99

99

00:04:06.150  -->  00:04:06.983
as you can see there,
100

100

00:04:06.983  -->  00:04:08.330
and if you hover over it,
101

101

00:04:08.330  -->  00:04:10.840
the error we've got is ambiguous method call
102

102

00:04:10.840  -->  00:04:12.700
that's both the one that's int
103

103

00:04:12.700  -->  00:04:14.740
and then a variable arguments int,
104

104

00:04:14.740  -->  00:04:16.850
as well as the variable arguments int,
105

105

00:04:16.850  -->  00:04:18.800
it's confused as to which one now.
106

106

00:04:18.800  -->  00:04:20.880
Basically, the JVM at this point,
107

107

00:04:20.880  -->  00:04:23.700
can't figure out which method it should use.
108

108

00:04:23.700  -->  00:04:26.823
The method that only has variable arguments, the second one,
109

109

00:04:27.880  -->  00:04:29.720
that we defined on line 27
110

110

00:04:29.720  -->  00:04:33.217
or the method that's got both a int
111

111

00:04:33.217  -->  00:04:35.110
and a variable argument defined,
112

112

00:04:35.110  -->  00:04:36.653
which was the one on line 18.
113

113

00:04:38.290  -->  00:04:41.540
So basically, looking at that code on line 18,
114

114

00:04:41.540  -->  00:04:42.823
if we change this now,
115

115

00:04:46.477  -->  00:04:47.310
at the moment you can see,
116

116

00:04:47.310  -->  00:04:51.250
it's got an int and a variable arguments int as well.
117

117

00:04:51.250  -->  00:04:53.270
Change the int to a long,
118

118

00:04:53.270  -->  00:04:56.390
you can see that the code is now valid, we can run this
119

119

00:04:56.390  -->  00:04:57.523
and it actually works.
120

120

00:04:59.180  -->  00:05:00.880
But looking at the output,
121

121

00:05:00.880  -->  00:05:03.303
we can see that our newly pasted in method,
122

122

00:05:04.380  -->  00:05:07.340
the one up here, int var args long b,
123

123

00:05:07.340  -->  00:05:09.990
was never executed, basically never called.
124

124

00:05:09.990  -->  00:05:11.260
So let's go back to the code
125

125

00:05:11.260  -->  00:05:15.090
and come down here to our single var args method,
126

126

00:05:15.090  -->  00:05:17.637
the one with only the one parameter here on line 27.
127

127

00:05:17.637  -->  00:05:20.633
And if I change that, paste in some new code,
128

128

00:05:24.610  -->  00:05:25.480
basically you can see what I've done there.
129

129

00:05:25.480  -->  00:05:27.730
I've changed it from an int variable arguments
130

130

00:05:27.730  -->  00:05:30.580
to a long variable arguments variable.
131

131

00:05:30.580  -->  00:05:34.010
We run the code, we now see
132

132

00:05:34.010  -->  00:05:36.730
that the variable arguments method is executed.
133

133

00:05:36.730  -->  00:05:38.847
That's obviously the one up here, on line 18.
134

134

00:05:38.847  -->  00:05:41.000
Now if you just wanted to call the other method,
135

135

00:05:41.000  -->  00:05:42.860
this one up here, defined on line 27,
136

136

00:05:42.860  -->  00:05:45.130
with just the single long variable arguments.
137

137

00:05:45.130  -->  00:05:48.090
You'd first need to set the first value to a long.
138

138

00:05:48.090  -->  00:05:49.640
Now, this type of method overloading
139

139

00:05:49.640  -->  00:05:51.540
with the various variable arguments parameters,
140

140

00:05:51.540  -->  00:05:54.160
is not recommended, but it may well find it's way
141

141

00:05:54.160  -->  00:05:55.190
into an exam question,
142

142

00:05:55.190  -->  00:05:56.840
which is why we've covered it here.
143

143

00:05:56.840  -->  00:05:57.830
All right so that's that.
144

144

00:05:57.830  -->  00:05:59.300
So moving on, next we're coming up
145

145

00:05:59.300  -->  00:06:00.770
with a quiz, go through that.
146

146

00:06:00.770  -->  00:06:03.720
And then I'll see you in the video that follows after that.
