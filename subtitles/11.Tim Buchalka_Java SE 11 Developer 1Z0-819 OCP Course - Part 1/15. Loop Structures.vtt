WEBVTT
1
1

00:00:05.180  -->  00:00:06.920
<v Instructor>In previous videos in this section,</v>
2

2

00:00:06.920  -->  00:00:08.820
we looked at statements or block statements
3

3

00:00:08.820  -->  00:00:10.980
that were executed conditionally.
4

4

00:00:10.980  -->  00:00:13.580
Most of our examples included loop processing,
5

5

00:00:13.580  -->  00:00:14.720
but in this video, we're gonna start
6

6

00:00:14.720  -->  00:00:16.620
talking formally about loops,
7

7

00:00:16.620  -->  00:00:20.250
which causes a set of instructions to execute repeatedly,
8

8

00:00:20.250  -->  00:00:22.060
until a certain condition is met
9

9

00:00:22.060  -->  00:00:25.440
or the element list being looped through is exhausted.
10

10

00:00:25.440  -->  00:00:27.810
Loops are fundamental to structured programming
11

11

00:00:27.810  -->  00:00:30.530
and Java supports three types of loops, the while loop,
12

12

00:00:30.530  -->  00:00:32.280
the do while loop and the for loop.
13

13

00:00:33.390  -->  00:00:35.660
So the while and do/while loops are similar by nature,
14

14

00:00:35.660  -->  00:00:38.600
the do while loop always executes its statement block once
15

15

00:00:38.600  -->  00:00:40.590
before checking the expression.
16

16

00:00:40.590  -->  00:00:43.120
So the while loop executes until the defined condition
17

17

00:00:43.120  -->  00:00:46.760
is met, any iteration counters are done in the code block.
18

18

00:00:46.760  -->  00:00:48.210
You can see the example we've got there,
19

19

00:00:48.210  -->  00:00:50.240
while, expression in parentheses,
20

20

00:00:50.240  -->  00:00:51.073
we've got a code block,
21

21

00:00:51.073  -->  00:00:52.963
and then the statements within the code block.
22

22

00:00:53.980  -->  00:00:56.560
Do while well that always executes one time as I mentioned,
23

23

00:00:56.560  -->  00:00:58.390
before the condition is checked,
24

24

00:00:58.390  -->  00:01:01.600
and subsequently works similarly to the while loop.
25

25

00:01:01.600  -->  00:01:03.920
So we've got a do, left and right kelly braces,
26

26

00:01:03.920  -->  00:01:05.820
we've got our statements within the code block.
27

27

00:01:05.820  -->  00:01:08.070
Then outside of the code block, we've got a while,
28

28

00:01:08.070  -->  00:01:10.013
and the expression in parentheses.
29

29

00:01:10.890  -->  00:01:13.280
All right so let's create a new class here,
30

30

00:01:13.280  -->  00:01:15.190
I've created a new project called "loops".
31

31

00:01:15.190  -->  00:01:16.880
And the class, we're going to create here
32

32

00:01:16.880  -->  00:01:17.930
is called while loop.
33

33

00:01:24.520  -->  00:01:26.570
Okay so there's the code.
34

34

00:01:26.570  -->  00:01:28.220
Now this is a very simple while loop,
35

35

00:01:28.220  -->  00:01:29.800
although a bit dangerous.
36

36

00:01:29.800  -->  00:01:32.200
A minor change to the iterations variable,
37

37

00:01:32.200  -->  00:01:34.140
for getting two increment for example,
38

38

00:01:34.140  -->  00:01:36.560
cuts this code off into an infinite loop.
39

39

00:01:36.560  -->  00:01:37.860
But what I want you to note,
40

40

00:01:37.860  -->  00:01:40.740
is when keepGoing is toggled to false,
41

41

00:01:40.740  -->  00:01:43.780
any statements after this are still executed.
42

42

00:01:43.780  -->  00:01:45.930
The condition is only checked after all code
43

43

00:01:45.930  -->  00:01:48.250
statements in the iteration are complete.
44

44

00:01:48.250  -->  00:01:49.450
So if you run this code,
45

45

00:01:52.160  -->  00:01:55.060
you can see that we've got three iterations being output.
46

46

00:01:55.060  -->  00:01:56.920
All right so let's add a nested to the loop.
47

47

00:01:56.920  -->  00:01:59.060
So I'm going to add the nested to loop
48

48

00:01:59.060  -->  00:02:01.710
underneath the system for that top printIn statement.
49

49

00:02:02.730  -->  00:02:04.900
Okay so there's our do while loop.
50

50

00:02:04.900  -->  00:02:06.700
Now you can see the condition expression in the
51

51

00:02:06.700  -->  00:02:09.200
do while loop will never actually be true,
52

52

00:02:09.200  -->  00:02:11.830
because iterations is never zero.
53

53

00:02:11.830  -->  00:02:13.400
But because it's a do while loop,
54

54

00:02:13.400  -->  00:02:16.730
the code always executes once before evaluating
55

55

00:02:16.730  -->  00:02:18.070
the while condition.
56

56

00:02:18.070  -->  00:02:19.270
So if you run this code,
57

57

00:02:22.900  -->  00:02:24.500
you see the output down the bottom.
58

58

00:02:24.500  -->  00:02:26.880
Each iteration included one, and only one,
59

59

00:02:26.880  -->  00:02:30.390
iteration of the nested do while loop.
60

60

00:02:30.390  -->  00:02:33.000
So if we change the code on line 17,
61

61

00:02:33.000  -->  00:02:35.673
change that from keepGoing equals false to break.
62

62

00:02:37.530  -->  00:02:40.210
This forces the loop to stop executing immediately
63

63

00:02:40.210  -->  00:02:43.330
and like just setting the conditioned variable to false.
64

64

00:02:43.330  -->  00:02:45.510
So as a result, the code below that break
65

65

00:02:45.510  -->  00:02:48.660
that I've just added will not execute and our last iteration
66

66

00:02:48.660  -->  00:02:50.420
doesn't print anything out, the list will confirm that
67

67

00:02:50.420  -->  00:02:51.253
when we run it.
68

68

00:02:51.253  -->  00:02:53.780
So a loop break breaks out of the loop at the statement,
69

69

00:02:53.780  -->  00:02:55.710
it's declared, so if we run this
70

70

00:02:57.969  -->  00:03:00.140
and we can see we've now got a different result
71

71

00:03:00.140  -->  00:03:01.133
in the output pane.
72

72

00:03:02.320  -->  00:03:05.400
The continue statement is similar to the break statement,
73

73

00:03:05.400  -->  00:03:08.100
such that the code below the statement will no execute
74

74

00:03:08.100  -->  00:03:09.930
but it does not break out of the loop, instead
75

75

00:03:09.930  -->  00:03:12.550
it just executes the next iteration of the loop,
76

76

00:03:12.550  -->  00:03:15.140
first testing the condition of the loop.
77

77

00:03:15.140  -->  00:03:17.730
So I'm gonna add some code, just below this line
78

78

00:03:17.730  -->  00:03:18.880
that we've just worked on.
79

79

00:03:18.880  -->  00:03:20.860
I'm going to type if,
80

80

00:03:20.860  -->  00:03:22.600
parentheses,
81

81

00:03:22.600  -->  00:03:26.503
iterations is equal to two, continue.
82

82

00:03:28.610  -->  00:03:29.683
So if I run this now,
83

83

00:03:33.090  -->  00:03:34.450
you can see what's happened there, we've literally
84

84

00:03:34.450  -->  00:03:36.090
only got one iteration
85

85

00:03:36.090  -->  00:03:37.690
as a result of adding that line.
86

86

00:03:39.303  -->  00:03:41.280
Right, so next we're gonna look at the for loop
87

87

00:03:41.280  -->  00:03:44.270
which is used either when your iteration count is known
88

88

00:03:44.270  -->  00:03:46.560
or you have an iterable collection.
89

89

00:03:46.560  -->  00:03:48.070
There are two flavours of the for loop,
90

90

00:03:48.070  -->  00:03:51.350
the traditional for loop and the enhanced for loop.
91

91

00:03:51.350  -->  00:03:53.910
So the traditional for loop has a built-in mechanisms
92

92

00:03:53.910  -->  00:03:55.960
to control the initialization and updating
93

93

00:03:55.960  -->  00:03:57.850
of the loop variable as well as
94

94

00:03:57.850  -->  00:04:00.630
the comparison condition, termination section.
95

95

00:04:00.630  -->  00:04:02.840
And the general form of the for loop is for,
96

96

00:04:02.840  -->  00:04:05.330
parentheses, initialization, ;
97

97

00:04:05.330  -->  00:04:08.410
termination ; increment and then we've got a code block
98

98

00:04:08.410  -->  00:04:10.920
and then the actual statements we want executed.
99

99

00:04:10.920  -->  00:04:13.360
When using this version of the for statement, keep in mind
100

100

00:04:13.360  -->  00:04:16.660
that firstly, the initialization expression initialises
101

101

00:04:16.660  -->  00:04:20.130
the loop, it's executed once as the loop begins.
102

102

00:04:20.130  -->  00:04:23.070
It's initialization expression is optional.
103

103

00:04:23.070  -->  00:04:26.220
When the termination expression evaluates to false
104

104

00:04:26.220  -->  00:04:27.610
the loop terminates.
105

105

00:04:27.610  -->  00:04:30.400
The termination expression also is optional,
106

106

00:04:30.400  -->  00:04:32.340
it's default value is true.
107

107

00:04:32.340  -->  00:04:35.470
The increment expression is invoked after each iteration
108

108

00:04:35.470  -->  00:04:37.650
through the loop, it's perfectly acceptable
109

109

00:04:37.650  -->  00:04:40.860
for this expression to increment or decrement a value.
110

110

00:04:40.860  -->  00:04:43.033
The increment expression is optional.
111

111

00:04:44.100  -->  00:04:45.960
And the enhanced for loop is used to loop through
112

112

00:04:45.960  -->  00:04:48.530
an iterable set of data and to do something.
113

113

00:04:48.530  -->  00:04:51.303
The format is for, parentheses, FormalParameter
114

114

00:04:51.303  -->  00:04:55.060
: Expression and then statement outside of that parentheses.
115

115

00:04:55.060  -->  00:04:58.633
The top of the expression must be iterable or an array type.
116

116

00:04:59.610  -->  00:05:01.630
Right, so let's write some code with both the traditional
117

117

00:05:01.630  -->  00:05:04.600
for loop and the enhanced for loop constructs for the same
118

118

00:05:04.600  -->  00:05:05.540
set of data.
119

119

00:05:05.540  -->  00:05:07.950
So we're gonna create a new class in our loops project
120

120

00:05:07.950  -->  00:05:09.100
called ForLoopExample1.
121

121

00:05:19.770  -->  00:05:22.240
So the code that I've pasted in demonstrates looping through
122

122

00:05:22.240  -->  00:05:25.600
any command line arguments parsed when running the code.
123

123

00:05:25.600  -->  00:05:27.290
We're using a traditional for loop with int
124

124

00:05:27.290  -->  00:05:29.910
from zero to ars.length minus one
125

125

00:05:29.910  -->  00:05:31.990
and we're doing that by the test for i being
126

126

00:05:31.990  -->  00:05:33.430
less than args.length.
127

127

00:05:33.430  -->  00:05:36.120
We're using an enhanced for loop further on down,
128

128

00:05:36.120  -->  00:05:40.160
starting on line 23, iterating through the args array.
129

129

00:05:40.160  -->  00:05:42.830
So if I run this first, obviously it won't do anything
130

130

00:05:42.830  -->  00:05:44.470
because we haven't got any arguments,
131

131

00:05:44.470  -->  00:05:47.450
but if we then change this and add some arguments.
132

132

00:05:47.450  -->  00:05:48.750
Let's add three arguments.
133

133

00:05:52.290  -->  00:05:53.123
Run this,
134

134

00:05:55.030  -->  00:05:57.550
no real surprises there, there's our traditional for loop
135

135

00:05:57.550  -->  00:05:58.713
and enhanced for loop.
136

136

00:06:00.440  -->  00:06:02.190
Now some additional notes on loops.
137

137

00:06:02.190  -->  00:06:04.960
It's interesting to note that loop is not a reserved word.
138

138

00:06:04.960  -->  00:06:06.540
Any loop can have a break in it,
139

139

00:06:06.540  -->  00:06:08.430
usually a conditional break.
140

140

00:06:08.430  -->  00:06:11.130
Any loop can also have a continue statement in it,
141

141

00:06:11.130  -->  00:06:12.880
also usually conditional.
142

142

00:06:12.880  -->  00:06:15.230
Statements after the continue statement are skipped
143

143

00:06:15.230  -->  00:06:16.693
until the next iteration.
144

144

00:06:18.350  -->  00:06:21.880
And the following code is perfectly acceptable or legal
145

145

00:06:21.880  -->  00:06:23.790
for a loop, an infinite loop in fact.
146

146

00:06:23.790  -->  00:06:26.810
For, parentheses, two semi-colons in the parentheses
147

147

00:06:26.810  -->  00:06:28.453
and then a ; outside.
148

148

00:06:29.570  -->  00:06:31.160
All right, so that covers our review of loops.
149

149

00:06:31.160  -->  00:06:33.560
The next video we're gonna demonstrate some not very common
150

150

00:06:33.560  -->  00:06:35.830
place examples of the for loop, so let's move
151

151

00:06:35.830  -->  00:06:36.923
on to that video now.
