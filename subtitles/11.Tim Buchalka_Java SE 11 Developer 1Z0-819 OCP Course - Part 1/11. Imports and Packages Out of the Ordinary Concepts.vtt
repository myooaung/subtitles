WEBVTT
1
1

00:00:05.290  -->  00:00:07.440
<v Tim>So in an earlier video in this section of the course</v>
2

2

00:00:07.440  -->  00:00:09.407
I briefly discussed the package statement
3

3

00:00:09.407  -->  00:00:11.150
and shared an example of its use
4

4

00:00:11.150  -->  00:00:14.044
as well as several samples of import statements.
5

5

00:00:14.044  -->  00:00:16.627
In this video, I wanna discuss some of the mistakes
6

6

00:00:16.627  -->  00:00:19.022
you can make with the package and import statements
7

7

00:00:19.022  -->  00:00:22.280
just to make sure you're not caught out in the exam.
8

8

00:00:22.280  -->  00:00:23.530
So we're gonna start a project,
9

9

00:00:23.530  -->  00:00:25.310
we need to start by creating a new class,
10

10

00:00:25.310  -->  00:00:26.870
we're gonna call this one package tests.
11

11

00:00:26.870  -->  00:00:30.260
Gonna go ahead and do that in the root folder.
12

12

00:00:30.260  -->  00:00:32.993
Other words my package, package tests.
13

13

00:00:35.520  -->  00:00:36.750
There's the code.
14

14

00:00:36.750  -->  00:00:38.200
Very simple code as you can see
15

15

00:00:38.200  -->  00:00:40.373
simple class just a starting point for our conversation
16

16

00:00:40.373  -->  00:00:42.460
about package statements.
17

17

00:00:42.460  -->  00:00:44.330
And as you can see at the moment we don't declare one
18

18

00:00:44.330  -->  00:00:46.460
and we don't need to it's not mandatory.
19

19

00:00:46.460  -->  00:00:47.393
We run the code.
20

20

00:00:49.460  -->  00:00:52.155
We get the output package tests.
21

21

00:00:52.155  -->  00:00:54.673
So let's add a line of code just before
22

22

00:00:54.673  -->  00:00:57.240
the class definition on line six.
23

23

00:00:57.240  -->  00:01:00.900
I'm just gonna type package, semi-colon enter there
24

24

00:01:00.900  -->  00:01:02.810
so this is actually a compiler error,
25

25

00:01:02.810  -->  00:01:05.640
it is not the same as not defining a package.
26

26

00:01:05.640  -->  00:01:07.930
A class with no package declaration is part
27

27

00:01:07.930  -->  00:01:10.070
of the unnamed package.
28

28

00:01:10.070  -->  00:01:13.053
So we change this from package to package default.
29

29

00:01:16.510  -->  00:01:17.940
This too is a compiler error,
30

30

00:01:17.940  -->  00:01:20.270
the folder is not a valid package name.
31

31

00:01:20.270  -->  00:01:22.370
What we can do, is replace the package statement
32

32

00:01:22.370  -->  00:01:23.870
and set a default.
33

33

00:01:23.870  -->  00:01:26.150
Which turns it to the same name as the class,
34

34

00:01:26.150  -->  00:01:27.843
I.e package tests.
35

35

00:01:28.930  -->  00:01:30.700
See the warning down in the bottom left hand corner
36

36

00:01:30.700  -->  00:01:33.380
of IntelliJ, package name package tests does not correspond
37

37

00:01:33.380  -->  00:01:34.460
to the file path.
38

38

00:01:34.460  -->  00:01:36.256
This is not actually a compiler error, IntelliJ
39

39

00:01:36.256  -->  00:01:38.449
wants us to create a directory structure
40

40

00:01:38.449  -->  00:01:41.230
that has this directory in it, but ignore this
41

41

00:01:41.230  -->  00:01:43.110
for the moment, which I'll do and I'm gonna
42

42

00:01:43.110  -->  00:01:44.043
run the code.
43

43

00:01:45.721  -->  00:01:48.570
And you can see the code actually works as is.
44

44

00:01:48.570  -->  00:01:50.050
This proves that the package name can be
45

45

00:01:50.050  -->  00:01:52.130
the same name as a class name, including a class
46

46

00:01:52.130  -->  00:01:53.650
in that package.
47

47

00:01:53.650  -->  00:01:55.580
And in addition, its good practise
48

48

00:01:55.580  -->  00:01:58.119
but not a requirement to create a directory structure
49

49

00:01:58.119  -->  00:02:00.710
that matches your package definitions.
50

50

00:02:00.710  -->  00:02:02.350
So let's try doing something else, let's try
51

51

00:02:02.350  -->  00:02:03.780
and add a second package statement
52

52

00:02:03.780  -->  00:02:05.140
so I'm gonna on the second line type
53

53

00:02:05.140  -->  00:02:08.810
package a dot b, semicolon,
54

54

00:02:08.810  -->  00:02:10.710
well this is a definite no-no since I need
55

55

00:02:10.710  -->  00:02:12.560
one package statement to support it.
56

56

00:02:12.560  -->  00:02:15.310
So let's remove the first package statement altogether.
57

57

00:02:17.110  -->  00:02:18.460
We're gonna need the second one there,
58

58

00:02:18.460  -->  00:02:20.191
and I'm gonna let IntelliJ move this class
59

59

00:02:20.191  -->  00:02:21.620
to the A package,
60

60

00:02:21.620  -->  00:02:24.010
so I'm just gonna come over here,
61

61

00:02:24.010  -->  00:02:26.383
select the option to move to package A,
62

62

00:02:27.623  -->  00:02:29.720
and if we have a look in our folder now,
63

63

00:02:29.720  -->  00:02:31.183
we can see we've got a package A dot B and
64

64

00:02:31.183  -->  00:02:33.600
there's a package test in it.
65

65

00:02:33.600  -->  00:02:37.023
We've got no errors or warnings showing in our source code.
66

66

00:02:39.358  -->  00:02:40.450
All right I just opened that again because
67

67

00:02:40.450  -->  00:02:42.580
I need to create a new class now, let's do that.
68

68

00:02:42.580  -->  00:02:45.620
New java class in the root.
69

69

00:02:45.620  -->  00:02:46.805
Well, I say it's in the root but we're gonna type
70

70

00:02:46.805  -->  00:02:50.993
in the package first, so A dot C dot import, tests.
71

71

00:02:53.910  -->  00:02:55.238
Paste the code in, and you can see this time that
72

72

00:02:55.238  -->  00:02:58.334
we've now got A dot B with our package tests
73

73

00:02:58.334  -->  00:03:01.493
and A dot C for package without import tests.
74

74

00:03:02.467  -->  00:03:04.100
And you can see in the actual code,
75

75

00:03:04.100  -->  00:03:07.200
I've included two redundant import statements.
76

76

00:03:07.200  -->  00:03:09.750
Although your IDE would probably remove these statements,
77

77

00:03:09.750  -->  00:03:11.610
you should be aware that they don't produce
78

78

00:03:11.610  -->  00:03:12.790
a compiler error,
79

79

00:03:12.790  -->  00:03:14.790
and your code works you run with these statements.
80

80

00:03:14.790  -->  00:03:18.353
I'll do that to confirm, there her is.
81

81

00:03:18.353  -->  00:03:21.150
We get the expected output.
82

82

00:03:21.150  -->  00:03:23.700
So let's explore some other import statements here.
83

83

00:03:24.590  -->  00:03:26.800
There's that one and that's the uh comment says,
84

84

00:03:26.800  -->  00:03:29.202
import A dot status includes classes defined in A
85

85

00:03:29.202  -->  00:03:31.273
but not in A dot B.
86

86

00:03:32.280  -->  00:03:33.617
And you're looking at our package structure there,
87

87

00:03:33.617  -->  00:03:35.610
to the left hand side.
88

88

00:03:35.610  -->  00:03:37.841
In this scenario, it wouldn't include package tests.
89

89

00:03:37.841  -->  00:03:39.858
So it is important here to note that
90

90

00:03:39.858  -->  00:03:42.145
although packages appear to be hierarchical,
91

91

00:03:42.145  -->  00:03:44.280
like the directories that represent them
92

92

00:03:44.280  -->  00:03:45.550
on the file system
93

93

00:03:45.550  -->  00:03:46.860
they actually are not.
94

94

00:03:46.860  -->  00:03:49.000
A class that is a member of package A dot B
95

95

00:03:49.000  -->  00:03:50.913
is not a member of package A.
96

96

00:03:50.913  -->  00:03:54.536
So moving on, let's add some code to our main method now.
97

97

00:03:54.536  -->  00:03:57.810
And here we're gonna paste some code, simply execute
98

98

00:03:57.810  -->  00:03:58.713
package test.
99

99

00:03:59.610  -->  00:04:02.120
We have got an error here, and so IntelliJ was trying
100

100

00:04:02.120  -->  00:04:04.410
to do an import for us, cannot resolve simple
101

101

00:04:04.410  -->  00:04:05.760
package tests.
102

102

00:04:05.760  -->  00:04:07.570
And the reason we're getting a compiler error,
103

103

00:04:07.570  -->  00:04:10.480
because import A dot star that I added on line twelve
104

104

00:04:10.480  -->  00:04:13.140
doesn't import A dot B, dot package tests.
105

105

00:04:13.140  -->  00:04:14.650
Let's change this last import to
106

106

00:04:14.650  -->  00:04:18.550
A dot B dot package tests
107

107

00:04:18.550  -->  00:04:19.383
dot star.
108

108

00:04:20.440  -->  00:04:23.210
So interestingly there, this is not a compiler error,
109

109

00:04:23.210  -->  00:04:24.780
although it's got no meaning for us and it also
110

110

00:04:24.780  -->  00:04:27.510
doesn't fix our compiler error on line seventeen.
111

111

00:04:27.510  -->  00:04:28.990
We can see IntelliJ is still trying to do
112

112

00:04:28.990  -->  00:04:30.170
an import for us.
113

113

00:04:30.170  -->  00:04:32.050
So if we change this import now going back to make it
114

114

00:04:32.050  -->  00:04:35.120
A dot B dot package star, this important statement
115

115

00:04:35.120  -->  00:04:36.940
tries to use the world car, the asterisks,
116

116

00:04:36.940  -->  00:04:38.775
to import classes that start with package,
117

117

00:04:38.775  -->  00:04:41.300
and note that this doesn't work in Java.
118

118

00:04:41.300  -->  00:04:44.487
The world cars only used to import old classes.
119

119

00:04:44.487  -->  00:04:47.670
So if we go back and just replace this with typing
120

120

00:04:47.670  -->  00:04:50.751
in the exact name, import A dot B dot package tests,
121

121

00:04:50.751  -->  00:04:53.273
no more compiler errors, we run the code,
122

122

00:04:55.287  -->  00:04:57.420
and we get the required output.
123

123

00:04:57.420  -->  00:05:00.120
All right, let's create another class now.
124

124

00:05:00.120  -->  00:05:03.610
Source folder, and we'll call this one
125

125

00:05:03.610  -->  00:05:04.633
A dot number.
126

126

00:05:08.374  -->  00:05:10.053
Paste in the code.
127

127

00:05:11.880  -->  00:05:13.870
So this class is demonstrating that you can name your
128

128

00:05:13.870  -->  00:05:17.260
class the same as the class in the java dot lang package.
129

129

00:05:17.260  -->  00:05:18.870
So it's got two instanced variables, one of
130

130

00:05:18.870  -->  00:05:21.622
top number, the other of java dot lang dot number.
131

131

00:05:21.622  -->  00:05:24.990
It's got two constructors, one that takes a number,
132

132

00:05:24.990  -->  00:05:27.680
the other that takes a java dot lang dot number.
133

133

00:05:27.680  -->  00:05:29.860
And moving on down, looking at the main method,
134

134

00:05:29.860  -->  00:05:32.350
just demonstrates creating instances of both.
135

135

00:05:32.350  -->  00:05:35.000
If you run the code, I don't think there's no errors,
136

136

00:05:35.894  -->  00:05:39.020
everything works as it should.
137

137

00:05:39.020  -->  00:05:42.200
Now let's go back to the top and add one import.
138

138

00:05:42.200  -->  00:05:45.060
Obviously I need to add that below the package.
139

139

00:05:45.060  -->  00:05:46.640
In fact, right after the package.
140

140

00:05:46.640  -->  00:05:51.640
Statements import java dot lang dot number.
141

141

00:05:54.260  -->  00:05:56.590
So I've said that this line of code is unnecessary,
142

142

00:05:56.590  -->  00:05:59.840
but not only is it unnecessary, it's now a problem
143

143

00:05:59.840  -->  00:06:01.970
resulting in compiler errors, because now
144

144

00:06:01.970  -->  00:06:06.170
number becomes a defined entity, and we can then
145

145

00:06:06.170  -->  00:06:08.740
not create another class named number.
146

146

00:06:08.740  -->  00:06:11.470
All right, so I'm gonna remove that import, and
147

147

00:06:11.470  -->  00:06:12.960
we're back to what we were before.
148

148

00:06:12.960  -->  00:06:14.820
Everything's working.
149

149

00:06:14.820  -->  00:06:16.430
All right, so I'll finish the video here,
150

150

00:06:16.430  -->  00:06:19.060
in the next one, I want to revisit the import
151

151

00:06:19.060  -->  00:06:21.260
static statements, and explore what happens when two
152

152

00:06:21.260  -->  00:06:24.196
of your classes have the same static variables.
153

153

00:06:24.196  -->  00:06:25.793
See you in the next video.
