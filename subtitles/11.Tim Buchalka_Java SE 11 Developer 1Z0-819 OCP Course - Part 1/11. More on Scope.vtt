WEBVTT
1
1

00:00:05.717  -->  00:00:06.670
<v Tim>All right, so moving on,</v>
2

2

00:00:06.670  -->  00:00:09.000
we wanna continue our discussion of scope.
3

3

00:00:09.000  -->  00:00:09.910
We're going to start looking
4

4

00:00:09.910  -->  00:00:12.320
at the scope of variables in loops shortly.
5

5

00:00:12.320  -->  00:00:15.350
But firstly what we're going to do is look at method scope.
6

6

00:00:15.350  -->  00:00:17.230
So I'm gonna come down, and add a method here
7

7

00:00:17.230  -->  00:00:20.710
to our Person class, getDecade.
8

8

00:00:20.710  -->  00:00:23.670
So here we're creating a local variable, decadeString,
9

9

00:00:23.670  -->  00:00:25.860
that only has scope in this method.
10

10

00:00:25.860  -->  00:00:28.890
Nothing outside this method can reference this variable.
11

11

00:00:28.890  -->  00:00:30.730
This is method scope.
12

12

00:00:30.730  -->  00:00:32.490
Now let's go and add a line to this
13

13

00:00:32.490  -->  00:00:34.970
below the definition of decadeString,
14

14

00:00:34.970  -->  00:00:36.280
I'm gonna paste in some code
15

15

00:00:36.280  -->  00:00:37.640
int age, you can see there equals
16

16

00:00:37.640  -->  00:00:41.640
Integer.parseInt, this.age in parentheses divided by 10.
17

17

00:00:41.640  -->  00:00:43.150
And you can see that, by me doing this
18

18

00:00:43.150  -->  00:00:44.747
we've introduced a compiler error.
19

19

00:00:44.747  -->  00:00:47.320
And if we hover over the age variable,
20

20

00:00:47.320  -->  00:00:50.470
variable age is already defined in this scope.
21

21

00:00:50.470  -->  00:00:53.510
So the local variable name age, which is defined,
22

22

00:00:53.510  -->  00:00:56.900
and the method parameter name age clash.
23

23

00:00:56.900  -->  00:00:59.420
Note that the instance variable name age
24

24

00:00:59.420  -->  00:01:02.240
is not causing any issue, because it can be qualified
25

25

00:01:02.240  -->  00:01:04.380
using the this keyword, all right.
26

26

00:01:04.380  -->  00:01:05.880
So I'm gonna remove that line.
27

27

00:01:07.502  -->  00:01:08.850
All right, let's now continue on
28

28

00:01:08.850  -->  00:01:11.290
and I'm going to actually introduce a loop
29

29

00:01:11.290  -->  00:01:14.030
and I'm going to replace the existing getDecade method
30

30

00:01:14.030  -->  00:01:16.163
with a new definition that includes a loop.
31

31

00:01:17.030  -->  00:01:18.950
Paste this over the top there.
32

32

00:01:18.950  -->  00:01:20.230
All right, so we've created
33

33

00:01:20.230  -->  00:01:23.280
a local variable called decadeNumber.
34

34

00:01:23.280  -->  00:01:25.444
We've created a local variable j
35

35

00:01:25.444  -->  00:01:27.550
defined outside the loop
36

36

00:01:27.550  -->  00:01:29.490
and obviously we've created the decadeString as well,
37

37

00:01:29.490  -->  00:01:31.350
which will be returning 103.
38

38

00:01:31.350  -->  00:01:34.320
But we declare and initialise a local variable i
39

39

00:01:34.320  -->  00:01:37.160
in the loop statement increment both i and j
40

40

00:01:37.160  -->  00:01:39.040
at the end of each iteration.
41

41

00:01:39.040  -->  00:01:41.310
Now that's valid because both i and j
42

42

00:01:41.310  -->  00:01:43.110
are in scope in the loop.
43

43

00:01:43.110  -->  00:01:45.514
Now currently the for loop has no code in its code block,
44

44

00:01:45.514  -->  00:01:47.450
we'll add it in a bit later.
45

45

00:01:47.450  -->  00:01:48.470
But with that said at the moment,
46

46

00:01:48.470  -->  00:01:52.210
what happens if we wanna set j to a different value
47

47

00:01:52.210  -->  00:01:54.950
during the loop initialization.
48

48

00:01:54.950  -->  00:01:57.160
So what we should be able to do
49

49

00:01:57.160  -->  00:02:02.160
is put a comma after the int i = 0, j = 1.
50

50

00:02:02.290  -->  00:02:04.060
You can see there variable j
51

51

00:02:04.060  -->  00:02:06.150
is already defined in the scope.
52

52

00:02:06.150  -->  00:02:08.760
And because we put j = 1 in the same statement
53

53

00:02:08.760  -->  00:02:11.660
as the initialization block of the for loop,
54

54

00:02:11.660  -->  00:02:14.160
this has caused our compile error.
55

55

00:02:14.160  -->  00:02:17.550
The compiler thinks you want to create another variable j
56

56

00:02:17.550  -->  00:02:18.520
and this isn't allowed.
57

57

00:02:18.520  -->  00:02:19.720
You can see we have an error there.
58

58

00:02:19.720  -->  00:02:21.860
Variable j is already defined in the scope.
59

59

00:02:21.860  -->  00:02:25.380
We can get around that by modifying the statement slightly
60

60

00:02:25.380  -->  00:02:27.120
to correct the situation.
61

61

00:02:27.120  -->  00:02:31.623
So I can change that i = j = 0.
62

62

00:02:33.200  -->  00:02:37.230
We have for, now in parentheses, int i = j = 0.
63

63

00:02:37.230  -->  00:02:39.590
So here we've declared a new variable called i
64

64

00:02:39.590  -->  00:02:42.770
and have initialised to an existing variable j
65

65

00:02:42.770  -->  00:02:46.280
which is set to zero when loop gets initialised.
66

66

00:02:46.280  -->  00:02:48.530
And because assignments are right to left
67

67

00:02:48.530  -->  00:02:50.290
j is initialised to zero at first
68

68

00:02:50.290  -->  00:02:52.807
and then i is initialised to j.
69

69

00:02:52.807  -->  00:02:54.800
All right, so let's add the following code block
70

70

00:02:54.800  -->  00:02:56.763
I'm about to paste into our for loop.
71

71

00:02:58.540  -->  00:02:59.470
Like so.
72

72

00:02:59.470  -->  00:03:02.440
With a local variable loop block variable called decade,
73

73

00:03:02.440  -->  00:03:04.640
the scope for that is within the loop.
74

74

00:03:04.640  -->  00:03:05.570
So now that I've done that,
75

75

00:03:05.570  -->  00:03:07.180
what happens if we wanna create
76

76

00:03:07.180  -->  00:03:11.410
a new variable i in the if statement on line 103.
77

77

00:03:11.410  -->  00:03:15.403
So can I come down here and type int i = 1.
78

78

00:03:16.850  -->  00:03:17.940
As you can see, we can't,
79

79

00:03:17.940  -->  00:03:20.530
variable i is already defined in the scope.
80

80

00:03:20.530  -->  00:03:23.170
Again, we've introduced a compile error.
81

81

00:03:23.170  -->  00:03:25.070
Just because you're in your own block,
82

82

00:03:25.070  -->  00:03:26.870
the if block, you still have access
83

83

00:03:26.870  -->  00:03:29.000
to variables outside that scope
84

84

00:03:29.000  -->  00:03:31.100
and the compiler would be unable to distinguish
85

85

00:03:31.100  -->  00:03:33.010
between the i in this if block
86

86

00:03:33.010  -->  00:03:35.010
and the i in the surrounding block.
87

87

00:03:35.010  -->  00:03:36.690
Hence we've got the error.
88

88

00:03:36.690  -->  00:03:38.582
So I'll remove that line.
89

89

00:03:38.582  -->  00:03:39.670
All right, so continuing on now,
90

90

00:03:39.670  -->  00:03:42.658
let's add another loop right after our existing loop.
91

91

00:03:42.658  -->  00:03:43.870
And I'll go ahead and do that.
92

92

00:03:43.870  -->  00:03:45.750
Paste in the code there.
93

93

00:03:45.750  -->  00:03:49.340
Now, from this code, you can see that the local variable j
94

94

00:03:49.340  -->  00:03:51.730
is still in scope and using it here
95

95

00:03:51.730  -->  00:03:54.030
in this for loop is perfectly valid.
96

96

00:03:54.030  -->  00:03:56.060
But the reference to i is invalid
97

97

00:03:56.060  -->  00:03:58.270
and that's because i went out of scope
98

98

00:03:58.270  -->  00:04:00.020
when the previous loop ended.
99

99

00:04:00.020  -->  00:04:02.090
And looking back up at the code,
100

100

00:04:02.090  -->  00:04:05.450
you can see that we defined a i on line 100.
101

101

00:04:05.450  -->  00:04:07.760
And, obviously, that loop is now completed
102

102

00:04:07.760  -->  00:04:09.400
and i has gone out of scope.
103

103

00:04:09.400  -->  00:04:11.490
So we just remove now this j for loop,
104

104

00:04:11.490  -->  00:04:12.490
the second for loop.
105

105

00:04:13.390  -->  00:04:14.570
So now that we've done that,
106

106

00:04:14.570  -->  00:04:16.417
let's actually add to the toString method
107

107

00:04:16.417  -->  00:04:19.420
and what I'll do is take a copy of some code
108

108

00:04:19.420  -->  00:04:21.420
and go back up to our toString method
109

109

00:04:21.420  -->  00:04:23.480
so that we can evoke a call to this method as well,
110

110

00:04:23.480  -->  00:04:24.890
the method we've been working on.
111

111

00:04:24.890  -->  00:04:26.640
And I'm just going to replace that.
112

112

00:04:28.130  -->  00:04:30.130
So we can see now we're making a call
113

113

00:04:30.130  -->  00:04:32.150
to the getAgeGroupClassification method,
114

114

00:04:32.150  -->  00:04:34.260
but also to a getDecade method
115

115

00:04:34.260  -->  00:04:35.890
that we've defined in this video.
116

116

00:04:35.890  -->  00:04:38.630
So if you run this code you can see
117

117

00:04:38.630  -->  00:04:40.710
that Joe is 55 years old, baby boomer,
118

118

00:04:40.710  -->  00:04:42.410
decade five, year five.
119

119

00:04:42.410  -->  00:04:45.010
And Deb, decade eight and year five.
120

120

00:04:45.010  -->  00:04:47.580
And decade two, year one.
121

121

00:04:47.580  -->  00:04:50.240
So in short, summarising, the best way to quickly see
122

122

00:04:50.240  -->  00:04:52.100
if your local variable definition
123

123

00:04:52.100  -->  00:04:53.630
is going to raise a compile error
124

124

00:04:53.630  -->  00:04:57.270
is to ask yourself if you can qualify it by class type,
125

125

00:04:57.270  -->  00:04:59.500
or the words this, or super, et cetera.
126

126

00:04:59.500  -->  00:05:01.760
If you cannot, and it's already been defined
127

127

00:05:01.760  -->  00:05:03.790
in an outer scope, then it will cause an error.
128

128

00:05:03.790  -->  00:05:06.330
And we've seen many errors of that nature in this video.
129

129

00:05:06.330  -->  00:05:07.950
And this is especially hard to spot
130

130

00:05:07.950  -->  00:05:10.250
in for loop initialization statements,
131

131

00:05:10.250  -->  00:05:12.194
which is why I added some just to show you there.
132

132

00:05:12.194  -->  00:05:15.528
Shadowing is when a local variable is legally declared,
133

133

00:05:15.528  -->  00:05:18.470
but another declaration that can be qualified
134

134

00:05:18.470  -->  00:05:20.010
is not used or accessed,
135

135

00:05:20.010  -->  00:05:22.540
because the local variable takes precedence.
136

136

00:05:22.540  -->  00:05:24.310
In the next video we'll see what we can do
137

137

00:05:24.310  -->  00:05:26.760
with scope variables if we use nested
138

138

00:05:26.760  -->  00:05:29.690
or inner classes in the out of ordinary section.
139

139

00:05:29.690  -->  00:05:30.990
See you in the next video.
