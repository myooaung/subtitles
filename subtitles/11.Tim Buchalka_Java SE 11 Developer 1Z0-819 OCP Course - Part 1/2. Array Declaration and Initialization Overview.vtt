WEBVTT
1
1

00:00:05.310  -->  00:00:06.390 line:15% 
<v Tim>In the previous video,</v>
2

2

00:00:06.390  -->  00:00:09.650 line:15% 
we talked about what an array is and how its structured.
3

3

00:00:09.650  -->  00:00:11.310 line:15% 
In this video, we'll talk about declaring
4

4

00:00:11.310  -->  00:00:13.370 line:15% 
and initialising arrays in Java,
5

5

00:00:13.370  -->  00:00:17.130 line:15% 
and demonstrate some very simple manipulation techniques.
6

6

00:00:17.130  -->  00:00:18.520
When you declare an array,
7

7

00:00:18.520  -->  00:00:21.330
you define the type of the elements in the array.
8

8

00:00:21.330  -->  00:00:23.090
The brackets, the left and right square brackets,
9

9

00:00:23.090  -->  00:00:24.780
are the array identifier.
10

10

00:00:24.780  -->  00:00:27.690
One set of brackets on the declaration side is required
11

11

00:00:27.690  -->  00:00:30.240
to identify a one-dimensional array,
12

12

00:00:30.240  -->  00:00:32.850
the brackets can be to the right of the declared type,
13

13

00:00:32.850  -->  00:00:34.500
or the brackets can be to the right
14

14

00:00:34.500  -->  00:00:36.260
of the declared variable name.
15

15

00:00:37.730  -->  00:00:39.817
So adding brackets to both the right of the type
16

16

00:00:39.817  -->  00:00:42.860
and the variable name is actually a legal declaration.
17

17

00:00:42.860  -->  00:00:45.380
However, it declares a two-dimensional array,
18

18

00:00:45.380  -->  00:00:47.490
not a one-dimensional array.
19

19

00:00:47.490  -->  00:00:49.450
The type of an array can be any type,
20

20

00:00:49.450  -->  00:00:51.900
a primitive, class, or an interface.
21

21

00:00:51.900  -->  00:00:53.950
You never include the size of the array
22

22

00:00:53.950  -->  00:00:56.210
on the declaration side, the left-hand side,
23

23

00:00:56.210  -->  00:00:58.573
of a declaration initialization statement.
24

24

00:01:00.550  -->  00:01:02.730
So here's some valid array declarations.
25

25

00:01:02.730  -->  00:01:05.070
The first one int[] intArray;
26

26

00:01:05.070  -->  00:01:07.280
and obviously the brackets are after the type there.
27

27

00:01:07.280  -->  00:01:09.110
Brackets can be associated to the type,
28

28

00:01:09.110  -->  00:01:11.430
indicating the variable is an array.
29

29

00:01:11.430  -->  00:01:13.530
Next example short shortArray[];
30

30

00:01:13.530  -->  00:01:16.090
this time the brackets are to the right of the variable name
31

31

00:01:16.090  -->  00:01:18.460
brackets can be associated to the variable name,
32

32

00:01:18.460  -->  00:01:20.650
indicating that the variable is an array.
33

33

00:01:20.650  -->  00:01:22.300
Next example we've got int a, b[]
34

34

00:01:24.433  -->  00:01:25.460
, c;
35

35

00:01:25.460  -->  00:01:28.300
you can define multiple variables of a type on one line,
36

36

00:01:28.300  -->  00:01:30.550
including arrays of that type.
37

37

00:01:30.550  -->  00:01:33.600
Here we have a primitive data type variables a and c,
38

38

00:01:33.600  -->  00:01:36.400
and an array of int stored in b.
39

39

00:01:36.400  -->  00:01:40.690
Next we've got an int[] d, e and an [] f.
40

40

00:01:40.690  -->  00:01:42.540
You can define multiple array variables
41

41

00:01:42.540  -->  00:01:44.550
in a single declaration variable.
42

42

00:01:44.550  -->  00:01:46.360
Note that variable f in this statement
43

43

00:01:46.360  -->  00:01:48.840
is a declaration of a two-dimensional array,
44

44

00:01:48.840  -->  00:01:51.350
not a single or not a one-dimensional array.
45

45

00:01:51.350  -->  00:01:53.150
Next example we've got String[]
46

46

00:01:53.150  -->  00:01:54.997
with left and right square brackets to the right
47

47

00:01:54.997  -->  00:01:56.019
and then stringArray[];
48

48

00:01:56.019  -->  00:01:57.249
left and right square brackets
49

49

00:01:57.249  -->  00:01:58.870
to the right of the variable name.
50

50

00:01:58.870  -->  00:02:00.890
This is valid, but might be unintended
51

51

00:02:00.890  -->  00:02:03.163
because it declares a two-dimensional array.
52

52

00:02:05.340  -->  00:02:08.170
All right, let's look at some invalid array declarations.
53

53

00:02:08.170  -->  00:02:10.790
First, you've got int and then [2]
54

54

00:02:10.790  -->  00:02:12.570
and then the variable intArray;.
55

55

00:02:12.570  -->  00:02:15.900
Size isn't part of the declaration, this is a compile error.
56

56

00:02:15.900  -->  00:02:17.690
Next we've got int intArray
57

57

00:02:17.690  -->  00:02:20.490
then we've got our [] to the right of the variable name
58

58

00:02:20.490  -->  00:02:22.220
with a number 2 in this case,
59

59

00:02:22.220  -->  00:02:24.280
again size is not part of the declaration,
60

60

00:02:24.280  -->  00:02:25.940
you'll get a compile error.
61

61

00:02:25.940  -->  00:02:28.468
Third example int a , float b
62

62

00:02:28.468  -->  00:02:29.950
[];.
63

63

00:02:29.950  -->  00:02:31.950
You can't define multiple variables
64

64

00:02:31.950  -->  00:02:34.980
of different types on the same line separated by commas.
65

65

00:02:34.980  -->  00:02:36.480
This would be, also, an error.
66

66

00:02:38.420  -->  00:02:40.860
All right, let's look at creating an array.
67

67

00:02:40.860  -->  00:02:43.480
To create an array, you can use the new operator.
68

68

00:02:43.480  -->  00:02:44.313
An example there, I've got,
69

69

00:02:44.313  -->  00:02:45.880
int[] intArray = new int
70

70

00:02:47.448  -->  00:02:48.281
[10];
71

71

00:02:49.580  -->  00:02:51.600
and then a semicolon to end the line.
72

72

00:02:51.600  -->  00:02:53.940
This creates an array of int with 10 elements
73

73

00:02:53.940  -->  00:02:55.730
initialised to 0.
74

74

00:02:55.730  -->  00:02:57.570
Next example, we've got a string array defined,
75

75

00:02:57.570  -->  00:02:59.720
So, String[] stringArray = new String[10];.
76

76

00:03:01.867  -->  00:03:04.680
This creates an array of String with 10 elements,
77

77

00:03:04.680  -->  00:03:06.633
all elements initialised to null.
78

78

00:03:08.770  -->  00:03:09.603
There's some notes here that,
79

79

00:03:09.603  -->  00:03:11.670
even when creating an array of objects,
80

80

00:03:11.670  -->  00:03:13.850
you are not calling the Object constructor,
81

81

00:03:13.850  -->  00:03:16.910
so you are not using parentheses after the new statement.
82

82

00:03:16.910  -->  00:03:19.950
You must define the size of the array, in brackets.
83

83

00:03:19.950  -->  00:03:21.190
Once the size is defined,
84

84

00:03:21.190  -->  00:03:23.140
you cannot change the size of an array.
85

85

00:03:24.910  -->  00:03:26.740
And when you create an array this way,
86

86

00:03:26.740  -->  00:03:29.850
the Java Virtual Machine automatically assigns defaults.
87

87

00:03:29.850  -->  00:03:32.530
Those defaults are numeric primitives are set to 0.
88

88

00:03:32.530  -->  00:03:34.510
Boolean primitives are set to false.
89

89

00:03:34.510  -->  00:03:37.230
References, including primitive data type wrappers,
90

90

00:03:37.230  -->  00:03:38.093
are set to null.
91

91

00:03:39.773  -->  00:03:41.940
You can also use an array initializer.
92

92

00:03:41.940  -->  00:03:44.220
An array initializer is a shortcut, that allows you
93

93

00:03:44.220  -->  00:03:46.660
to create and initialise each element in an array,
94

94

00:03:46.660  -->  00:03:48.000
in one statement.
95

95

00:03:48.000  -->  00:03:49.090
And the examples we've got there,
96

96

00:03:49.090  -->  00:03:51.870
we've gpt String[] stringArray =
97

97

00:03:51.870  -->  00:03:54.440
then in curly braces we've got our elements
98

98

00:03:54.440  -->  00:03:55.273
that we want to initialise,
99

99

00:03:55.273  -->  00:03:57.730
I've got {"one", "two", null, "three"};
100

100

00:03:57.730  -->  00:03:59.820
with one, two, and three in double quotes,
101

101

00:03:59.820  -->  00:04:01.890
and then null as a null type.
102

102

00:04:01.890  -->  00:04:03.840
And that's perfectly valid, in this case it's creating
103

103

00:04:03.840  -->  00:04:05.770
an array of String with four elements
104

104

00:04:05.770  -->  00:04:08.390
all initialised with specific values.
105

105

00:04:08.390  -->  00:04:10.923
The next example, int[] intArray =
106

106

00:04:11.800  -->  00:04:14.987
and then the numbers, {10,9,8,7,6,5,4,3,2,1};
107

107

00:04:16.360  -->  00:04:18.570
That's creating an array of int with 10 elements,
108

108

00:04:18.570  -->  00:04:21.150
all initialised with specific values.
109

109

00:04:21.150  -->  00:04:22.970
And you can only use the array initializer,
110

110

00:04:22.970  -->  00:04:25.193
in the same statement as the declaration.
111

111

00:04:27.202  -->  00:04:28.035
All right, so let's look at some
112

112

00:04:28.035  -->  00:04:29.840
valid array creation statements.
113

113

00:04:29.840  -->  00:04:33.677
We've got int[] myIntArray = new int[50];
114

114

00:04:34.940  -->  00:04:36.940
Here, the declaration with brackets is associated
115

115

00:04:36.940  -->  00:04:39.100
to the type using the new operator.
116

116

00:04:39.100  -->  00:04:40.590
And we've got a different example here,
117

117

00:04:40.590  -->  00:04:42.440
short myShortArray[] = new short[20];
118

118

00:04:45.480  -->  00:04:48.010
and again, the declaration with brackets is associated
119

119

00:04:48.010  -->  00:04:50.420
to the variable name using the new operator.
120

120

00:04:50.420  -->  00:04:54.900
Third example, int[] mySecondIntArray = null;
121

121

00:04:54.900  -->  00:04:57.090
yes, you can set an array to null.
122

122

00:04:57.090  -->  00:05:00.220
Next example, String[] myStringArray; on one line,
123

123

00:05:00.220  -->  00:05:04.460
then on the next line, myStringArray = new String[12];.
124

124

00:05:04.460  -->  00:05:07.280
So you can declare an array without initialization,
125

125

00:05:07.280  -->  00:05:09.370
and then initialise using the new operator
126

126

00:05:09.370  -->  00:05:10.980
in a separate statement.
127

127

00:05:10.980  -->  00:05:11.850
All right, in this example,
128

128

00:05:11.850  -->  00:05:16.234
int[] myIntArray, mySecondIntArray = new int
129

129

00:05:16.234  -->  00:05:17.890
[50];.
130

130

00:05:17.890  -->  00:05:19.030
So this is a valid statement,
131

131

00:05:19.030  -->  00:05:21.530
but only the second statement is initialised here.
132

132

00:05:23.240  -->  00:05:25.750
int[] mySecondIntArray,
133

133

00:05:25.750  -->  00:05:27.730
myIntArray = mySecondIntArray = new int[50];.
134

134

00:05:31.270  -->  00:05:33.780
This statement initialises both arrays.
135

135

00:05:33.780  -->  00:05:35.690
Next example, which we've seen previously,
136

136

00:05:35.690  -->  00:05:38.060
String[] myArray =
137

137

00:05:38.060  -->  00:05:43.060
and then in curly braces,{"one", "two", null, "three"};.
138

138

00:05:43.310  -->  00:05:44.900
This is an array of string with four elements
139

139

00:05:44.900  -->  00:05:47.270
created with the array initializer.
140

140

00:05:47.270  -->  00:05:50.220
String[] myArray =
141

141

00:05:50.220  -->  00:05:51.057
and then, {};
142

142

00:05:52.360  -->  00:05:53.710
this is setting the array
143

143

00:05:53.710  -->  00:05:55.637
to a 0 length array.
144

144

00:05:55.637  -->  00:05:56.680
Right, so this example I've got,
145

145

00:05:56.680  -->  00:05:57.513
String[]
146

146

00:05:58.430  -->  00:06:00.097
stringArray[] =
147

147

00:06:01.059  -->  00:06:04.120
and then we've got two left curly braces, {{"one", "two"},
148

148

00:06:04.120  -->  00:06:05.323
separated by a comma.
149

149

00:06:06.959  -->  00:06:09.280
And then we've got the same for {"three", "four"}}; .
150

150

00:06:12.060  -->  00:06:14.620
So this is creating a two-dimensional array.
151

151

00:06:14.620  -->  00:06:15.940
We'll discuss this a little bit later,
152

152

00:06:15.940  -->  00:06:17.940
but just know that this is valid syntax.
153

153

00:06:19.630  -->  00:06:21.440
Object o = new int
154

154

00:06:21.440  -->  00:06:22.293
with [5]; .
155

155

00:06:23.600  -->  00:06:25.330
Because arrays are ultimately objects,
156

156

00:06:25.330  -->  00:06:27.210
this is valid initialization
157

157

00:06:27.210  -->  00:06:29.483
of an array and assignment to an object.
158

158

00:06:30.360  -->  00:06:33.157
int a[] = new int[]
159

159

00:06:34.000  -->  00:06:37.573
and then we've got curly braces with {1,2,3,4,5}; .
160

160

00:06:38.820  -->  00:06:41.880
You can combine the array initializer with the new operator,
161

161

00:06:41.880  -->  00:06:42.830
as long as you don't state
162

162

00:06:42.830  -->  00:06:44.913
the size of the array in the brackets.
163

163

00:06:45.880  -->  00:06:46.937
Next example, int[]
164

164

00:06:47.900  -->  00:06:48.733
then another []
165

165

00:06:49.651  -->  00:06:52.460
matrix = new int[2]
166

166

00:06:52.460  -->  00:06:53.790
and then the second []; .
167

167

00:06:54.750  -->  00:06:56.870
This is a valid two-dimensional array
168

168

00:06:56.870  -->  00:06:58.970
declaration and initialization.
169

169

00:06:58.970  -->  00:07:01.710
Only the first dimension is required to have a size,
170

170

00:07:01.710  -->  00:07:03.500
because you can have an array of arrays,
171

171

00:07:03.500  -->  00:07:06.270
and the arrays referenced by the element indices
172

172

00:07:06.270  -->  00:07:07.563
can be different sizes.
173

173

00:07:09.320  -->  00:07:12.730
Now let's look at some invalid array creation statements.
174

174

00:07:12.730  -->  00:07:13.563
First one, we've got
175

175

00:07:13.563  -->  00:07:16.553
String[] stringArray = new String()[3]; .
176

176

00:07:18.950  -->  00:07:22.110
The parentheses in this statement generate a compile error.
177

177

00:07:22.110  -->  00:07:24.527
String[3] stringArray = new String[]; .
178

178

00:07:26.260  -->  00:07:28.660
Size needs to be on the right side of the equation,
179

179

00:07:28.660  -->  00:07:29.810
not the left.
180

180

00:07:29.810  -->  00:07:31.217
int a[]
181

181

00:07:31.217  -->  00:07:32.327
= int[]
182

182

00:07:33.530  -->  00:07:36.170
and in curly braces, {1,2,3,4,5} ; .
183

183

00:07:36.170  -->  00:07:38.350
An array initializer doesn't require
184

184

00:07:38.350  -->  00:07:40.780
a restatement of the array.
185

185

00:07:40.780  -->  00:07:43.317
int b[] = new int
186

186

00:07:43.317  -->  00:07:44.150
[5]
187

187

00:07:45.100  -->  00:07:47.340
{1,2,3,4,5} ; .
188

188

00:07:47.340  -->  00:07:49.560
This is invalid because you're stating the size,
189

189

00:07:49.560  -->  00:07:53.010
but the array initializer already defines the size.
190

190

00:07:53.010  -->  00:07:55.860
String[] myArray; and then,
191

191

00:07:55.860  -->  00:07:59.550
myArray = {"one", "two", null, "three"}; .
192

192

00:07:59.550  -->  00:08:01.240
You can't use the array initializer
193

193

00:08:01.240  -->  00:08:03.920
on a separate statement line from the declaration
194

194

00:08:03.920  -->  00:08:04.753
of the array.
195

195

00:08:06.520  -->  00:08:11.414
Next we've got, short[] MySecondShortArray, myShortArray =
196

196

00:08:11.414  -->  00:08:14.333
mySecondShortArray = {1,2,3,4,5}; .
197

197

00:08:15.400  -->  00:08:16.850
This isn't a valid statement.
198

198

00:08:16.850  -->  00:08:19.120
Unlike using the new operator on the right-hand side
199

199

00:08:19.120  -->  00:08:20.440
of this equation.
200

200

00:08:20.440  -->  00:08:23.340
You can't use an array initializer in a compound statement.
201

201

00:08:23.340  -->  00:08:24.630
The last two before we end the video,
202

202

00:08:24.630  -->  00:08:25.480
we've got int
203

203

00:08:25.480  -->  00:08:26.567
and two [][]
204

204

00:08:27.940  -->  00:08:32.795
matrix = new int[] and then [2]; .
205

205

00:08:32.795  -->  00:08:34.960
Only the first dimension in a 2-d array is required
206

206

00:08:34.960  -->  00:08:37.470
to have a size, and this initialization
207

207

00:08:37.470  -->  00:08:40.110
doesn't give it a size, so it is incorrect.
208

208

00:08:40.110  -->  00:08:42.347
And lastly, int c[]
209

209

00:08:42.347  -->  00:08:44.955
= new int[5]
210

210

00:08:44.955  -->  00:08:45.900
and then []; .
211

211

00:08:47.220  -->  00:08:49.400
So you can't initialise a two-dimensional array
212

212

00:08:49.400  -->  00:08:51.100
and assign it to a one-dimensional array,
213

213

00:08:51.100  -->  00:08:53.046
as we're trying to do here.
214

214

00:08:53.046  -->  00:08:53.990 line:15% 
All right, so that's the end of the video here.
215

215

00:08:53.990  -->  00:08:56.040 line:15% 
Then, in the next one we'll come back,
216

216

00:08:56.040  -->  00:08:58.210 line:15% 
and start playing around with arrays in code.
217

217

00:08:58.210  -->  00:08:59.510 line:15% 
See you in the next video.
