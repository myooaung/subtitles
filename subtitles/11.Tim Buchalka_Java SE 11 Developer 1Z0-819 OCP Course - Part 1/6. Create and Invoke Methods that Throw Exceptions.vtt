WEBVTT
1
1

00:00:05.330  -->  00:00:06.480
<v Tim>In the earlier videos,</v>
2

2

00:00:06.480  -->  00:00:07.940
in this section of the course.
3

3

00:00:07.940  -->  00:00:10.620
I stated the checked exceptions in a method
4

4

00:00:10.620  -->  00:00:13.500
must be either core or handled in the method
5

5

00:00:13.500  -->  00:00:16.140
or the method must declare a throws clause
6

6

00:00:16.140  -->  00:00:17.660
in the declaration.
7

7

00:00:17.660  -->  00:00:20.250
In this video we're going to take a closer look at methods
8

8

00:00:20.250  -->  00:00:22.260
and the throws clause.
9

9

00:00:22.260  -->  00:00:24.320
So we need to start off by creating a new class
10

10

00:00:24.320  -->  00:00:25.920
in our exceptions project.
11

11

00:00:25.920  -->  00:00:28.060
I'm gonna call it throws clause example.
12

12

00:00:29.650  -->  00:00:32.650
(keyboard clicking)
13

13

00:00:40.278  -->  00:00:42.040
Well it's, I can see there we've got a public class
14

14

00:00:42.040  -->  00:00:45.610
throws clause example and we've got four classes
15

15

00:00:45.610  -->  00:00:47.260
in formality as you can see there.
16

16

00:00:47.260  -->  00:00:48.910
Now what they're doing is essentially,
17

17

00:00:48.910  -->  00:00:52.490
creating a custom version of an appropriate to class.
18

18

00:00:52.490  -->  00:00:54.430
And we've got the runtime exception,
19

19

00:00:54.430  -->  00:00:56.720
which we're extending for our class a custom
20

20

00:00:56.720  -->  00:00:57.780
runtime exception.
21

21

00:00:57.780  -->  00:01:01.030
It's got a constructor which then calls super to initialise
22

22

00:01:01.030  -->  00:01:04.070
and we're doing the same next for the exception class,
23

23

00:01:04.070  -->  00:01:06.390
a custom checked exceptions is the name.
24

24

00:01:06.390  -->  00:01:08.040
We've got a constructor for that as well
25

25

00:01:08.040  -->  00:01:10.480
and call it the super again to initialise that.
26

26

00:01:10.480  -->  00:01:12.130
Next we've got a throwable.
27

27

00:01:12.130  -->  00:01:13.550
So basically a customer throwable,
28

28

00:01:13.550  -->  00:01:15.890
which extends the throwable class constructor
29

29

00:01:15.890  -->  00:01:17.830
and under initialization by using super
30

30

00:01:17.830  -->  00:01:21.250
and forth, we've got this custom error class and error.
31

31

00:01:21.250  -->  00:01:24.470
It's called extending the error class with a constructor
32

32

00:01:24.470  -->  00:01:27.890
and calling the super to initialise it.
33

33

00:01:27.890  -->  00:01:29.590
Now come back to this main method shortly,
34

34

00:01:29.590  -->  00:01:32.220
but we've also got four methods down here.
35

35

00:01:32.220  -->  00:01:34.640
For starting with method one that's throws
36

36

00:01:34.640  -->  00:01:37.100
an unchecked runtime exception.
37

37

00:01:37.100  -->  00:01:39.290
Method two throws a checked exception
38

38

00:01:39.290  -->  00:01:41.540
and it must satisfy catch or specify.
39

39

00:01:41.540  -->  00:01:43.350
So he we're catching.
40

40

00:01:43.350  -->  00:01:45.640
Method three so we moved down.
41

41

00:01:45.640  -->  00:01:48.950
That throws throwable, it must satisfy catch or specify
42

42

00:01:48.950  -->  00:01:51.780
and he was specifying as you can see by the throws clause
43

43

00:01:51.780  -->  00:01:55.113
and method for just throws an unchecked error.
44

44

00:01:55.113  -->  00:01:55.946
Right.
45

45

00:01:55.946  -->  00:01:57.240
Can you back to our main method?
46

46

00:01:59.020  -->  00:02:01.430
So executing each statement in a four loop
47

47

00:02:01.430  -->  00:02:03.960
as you can see there, and depending on the number
48

48

00:02:03.960  -->  00:02:05.150
recording the appropriate method.
49

49

00:02:05.150  -->  00:02:07.220
Method one, two, three or four.
50

50

00:02:07.220  -->  00:02:09.822
The other thing we're actually doing in here,
51

51

00:02:09.822  -->  00:02:12.220
is we're gonna try catch embedded here,
52

52

00:02:12.220  -->  00:02:13.470
so execution of the followup
53

53

00:02:13.470  -->  00:02:16.717
continues after we catch each exception.
54

54

00:02:16.717  -->  00:02:18.633
All right, so let's actually run this now.
55

55

00:02:21.450  -->  00:02:23.107
All right, I can see the output there
56

56

00:02:23.107  -->  00:02:25.220
and we've got the four methods called
57

57

00:02:25.220  -->  00:02:28.950
and the results of calling them in the output pile.
58

58

00:02:28.950  -->  00:02:29.850
All right, so now that we've done that,
59

59

00:02:29.850  -->  00:02:33.510
let's actually make this catch clause on line 62.
60

60

00:02:33.510  -->  00:02:35.410
Make it a little bit more specific.
61

61

00:02:35.410  -->  00:02:38.010
And this again is from the four loop.
62

62

00:02:38.010  -->  00:02:38.893
Change throwable.
63

63

00:02:39.750  -->  00:02:41.800
We've got to make that runtime exception.
64

64

00:02:43.830  -->  00:02:45.010
It doesn't want to do that.
65

65

00:02:45.010  -->  00:02:47.190
Suddenly we've got a problem with method three.
66

66

00:02:47.190  -->  00:02:48.390
It's actually a compiler error.
67

67

00:02:48.390  -->  00:02:51.480
Unhandled exception throws clause example dot
68

68

00:02:51.480  -->  00:02:52.320
A custom throwable.
69

69

00:02:52.320  -->  00:02:55.213
So that's our method three now, which is complaining.
70

70

00:02:56.160  -->  00:02:57.870
And obviously in that code you can see with throwing
71

71

00:02:57.870  -->  00:03:00.230
the new A custom throwable.
72

72

00:03:00.230  -->  00:03:02.810
So this confirms that we have to catch the throwable object
73

73

00:03:02.810  -->  00:03:07.240
or specify that our main method throws a throwable.
74

74

00:03:07.240  -->  00:03:08.340
So let's do the lighter here.
75

75

00:03:08.340  -->  00:03:11.410
So you gonna back up to our main method declaration,
76

76

00:03:11.410  -->  00:03:13.953
up here and I'm gonna add throws,
77

77

00:03:15.571  -->  00:03:16.404
throwable.
78

78

00:03:18.040  -->  00:03:20.020
Which gets rid of the compiler error.
79

79

00:03:20.020  -->  00:03:21.303
If you run the code now.
80

80

00:03:24.040  -->  00:03:26.050
Note near now that we've done that execution
81

81

00:03:26.050  -->  00:03:28.450
has in fact stopped at method three.
82

82

00:03:28.450  -->  00:03:30.920
So in other words, method four didn't get invoked there
83

83

00:03:30.920  -->  00:03:32.630
and that's because we then are throwing
84

84

00:03:32.630  -->  00:03:35.000
the throwable error based on what we've done
85

85

00:03:35.000  -->  00:03:37.040
to the main method declaration.
86

86

00:03:37.040  -->  00:03:38.450
So let's try a different approach there.
87

87

00:03:38.450  -->  00:03:41.110
So I'm going to undo that last change.
88

88

00:03:41.110  -->  00:03:44.270
So remove the throw throwables in the declaration
89

89

00:03:44.270  -->  00:03:47.270
and we're back here to our main method.
90

90

00:03:47.270  -->  00:03:49.610
The actual code in the four loop.
91

91

00:03:49.610  -->  00:03:51.880
It is growing at a little bit more here.
92

92

00:03:51.880  -->  00:03:53.890
So we'll actually change now our catch clauses
93

93

00:03:53.890  -->  00:03:55.070
what I'm gonna do, at the moment you can see
94

94

00:03:55.070  -->  00:03:56.830
we've just got runtime exception.
95

95

00:03:56.830  -->  00:03:59.390
So let's add some additional catches there.
96

96

00:03:59.390  -->  00:04:02.850
I'm just gonna paste in a total of three of them,
97

97

00:04:02.850  -->  00:04:05.493
which will be including existing runtime exception.
98

98

00:04:06.537  -->  00:04:09.750
So I'm gonna paste that over the top there replacing them.
99

99

00:04:09.750  -->  00:04:11.820
So you can ask me about catching runtime exception,
100

100

00:04:11.820  -->  00:04:14.890
a custom throwable, and also catching an error.
101

101

00:04:14.890  -->  00:04:18.260
So as you can see, each catch declaration uses more specific
102

102

00:04:18.260  -->  00:04:21.970
exception types and not throwable and an error for example,
103

103

00:04:21.970  -->  00:04:23.810
are being pretty specific here.
104

104

00:04:23.810  -->  00:04:25.060
So we run this again now.
105

105

00:04:27.300  -->  00:04:28.890
This time you can see now four methods
106

106

00:04:28.890  -->  00:04:32.780
all four have now executed again the so far so good,
107

107

00:04:32.780  -->  00:04:34.690
but with that said, what happens if we have both
108

108

00:04:34.690  -->  00:04:37.020
a runtime exception clause and a custom
109

109

00:04:37.020  -->  00:04:38.890
runtime exception clause in other ways,
110

110

00:04:38.890  -->  00:04:42.340
the regular runtime exception and our custom class.
111

111

00:04:42.340  -->  00:04:44.320
Well let's try adding that down the bottom.
112

112

00:04:44.320  -->  00:04:47.310
All right, I'm just going to paste it down here.
113

113

00:04:47.310  -->  00:04:48.960
You see I've added a custom on time exception.
114

114

00:04:48.960  -->  00:04:51.030
We still got the runtime exception at the top there
115

115

00:04:51.030  -->  00:04:53.280
on line 62 so if you hover over that,
116

116

00:04:53.280  -->  00:04:54.880
so you've got a compiler error,
117

117

00:04:54.880  -->  00:04:57.340
throws clause example dot A custom runtime exception
118

118

00:04:57.340  -->  00:04:59.430
has already been caught.
119

119

00:04:59.430  -->  00:05:02.170
So from this we've learned that the order of the catch
120

120

00:05:02.170  -->  00:05:05.010
statements is very important, because we specified
121

121

00:05:05.010  -->  00:05:07.940
the runtime exception is the first clause at the top there.
122

122

00:05:07.940  -->  00:05:10.200
The more specific a custom runtime exception
123

123

00:05:10.200  -->  00:05:11.840
would never get executed.
124

124

00:05:11.840  -->  00:05:14.160
So let's change the order and you should define your clauses
125

125

00:05:14.160  -->  00:05:16.780
from most specific to the least specific.
126

126

00:05:16.780  -->  00:05:19.830
So I'm just going to paste in the order
127

127

00:05:19.830  -->  00:05:20.790
rather than changing the code.
128

128

00:05:20.790  -->  00:05:23.363
I'll just paste in the a change code,
129

129

00:05:24.500  -->  00:05:25.333
like so.
130

130

00:05:25.333  -->  00:05:27.760
So you learning that a custom throwable is at the top
131

131

00:05:27.760  -->  00:05:29.900
and error a custom runtime exception
132

132

00:05:29.900  -->  00:05:31.740
and then the fourth one was the runtime exception.
133

133

00:05:31.740  -->  00:05:34.530
We've no longer got a compiler error now.
134

134

00:05:34.530  -->  00:05:35.603
And if we run this,
135

135

00:05:38.500  -->  00:05:39.640
we can say we've got our output
136

136

00:05:39.640  -->  00:05:41.130
and we can clearly say the output
137

137

00:05:41.130  -->  00:05:43.900
a custom runtime exception there.
138

138

00:05:43.900  -->  00:05:45.470
All right, so that's working.
139

139

00:05:45.470  -->  00:05:47.970
Well so let's go back down and look at method two.
140

140

00:05:49.290  -->  00:05:52.500
So I can see here we've caught and handled the exception.
141

141

00:05:52.500  -->  00:05:54.780
Let's change this code to throw another exception
142

142

00:05:54.780  -->  00:05:56.870
after catching the one thrown.
143

143

00:05:56.870  -->  00:05:59.140
So just going to paste in a replacement method,
144

144

00:05:59.140  -->  00:06:00.990
which is very similar to what we had.
145

145

00:06:02.730  -->  00:06:03.590
So you can see what we're doing now.
146

146

00:06:03.590  -->  00:06:06.230
Essentially it's that line 100 right now throwing
147

147

00:06:06.230  -->  00:06:08.910
a custom runtime exception after catching
148

148

00:06:08.910  -->  00:06:11.494
the a custom checked exception.
149

149

00:06:11.494  -->  00:06:12.644
And if we run this now,
150

150

00:06:14.970  -->  00:06:18.070
you see we now caught that extra exception with now got
151

151

00:06:18.070  -->  00:06:18.940
a total of five there.
152

152

00:06:18.940  -->  00:06:22.090
You can see a customer runtime exception has been,
153

153

00:06:22.090  -->  00:06:24.030
basically executed more than once.
154

154

00:06:24.030  -->  00:06:26.810
We'll throw on more than once in the output.
155

155

00:06:26.810  -->  00:06:29.390
So there's no limit to how many try catch clauses
156

156

00:06:29.390  -->  00:06:30.960
and error can be propagated to.
157

157

00:06:30.960  -->  00:06:32.220
So keep it in mind.
158

158

00:06:32.220  -->  00:06:33.900
Now finally I just want to mention that a method
159

159

00:06:33.900  -->  00:06:37.170
can throw multiple exceptions in a comma delimited list.
160

160

00:06:37.170  -->  00:06:39.890
So we go back and look at method three.
161

161

00:06:39.890  -->  00:06:41.050
Let's just change that.
162

162

00:06:41.050  -->  00:06:43.660
I'm going to change the declaration but also add
163

163

00:06:43.660  -->  00:06:46.373
a little bit of code to generate another error.
164

164

00:06:50.366  -->  00:06:51.360
19 now.
165

165

00:06:51.360  -->  00:06:54.220
We've got multiple exceptions that can be thrown there
166

166

00:06:54.220  -->  00:06:56.710
and their declaration alarm 107.
167

167

00:06:56.710  -->  00:06:58.280
And you can say here that we're actually throwing
168

168

00:06:58.280  -->  00:07:00.660
two exceptions even at the moment only one,
169

169

00:07:00.660  -->  00:07:02.880
will actually be executed based on the programme flow
170

170

00:07:02.880  -->  00:07:03.910
we've set up.
171

171

00:07:03.910  -->  00:07:04.743
Run this.
172

172

00:07:07.660  -->  00:07:09.890
You see that it was the a custom runtime exception
173

173

00:07:09.890  -->  00:07:12.093
that was actually thrown from method three.
174

174

00:07:15.546  -->  00:07:17.213
I see that in there.
175

175

00:07:18.650  -->  00:07:19.483
Okay.
176

176

00:07:21.570  -->  00:07:23.010
All right, So in this video we discussed
177

177

00:07:23.010  -->  00:07:25.040
the four types of errors that can be thrown.
178

178

00:07:25.040  -->  00:07:28.720
Throwable error exception, which isn't runtime exception
179

179

00:07:28.720  -->  00:07:30.520
and runtime exception.
180

180

00:07:30.520  -->  00:07:33.460
And I demonstrated customising each of the types.
181

181

00:07:33.460  -->  00:07:35.850
Throwing each of the tops from methods,
182

182

00:07:35.850  -->  00:07:38.740
identifying which of the four are considered checked,
183

183

00:07:38.740  -->  00:07:41.190
and the additional requirements to satisfy the compiler
184

184

00:07:41.190  -->  00:07:42.290
when they are checked.
185

185

00:07:43.140  -->  00:07:45.430
Adding one or more exceptions to the throw clause,
186

186

00:07:45.430  -->  00:07:47.020
of a method declaration.
187

187

00:07:47.020  -->  00:07:49.530
And finally testing multiple clauses associated
188

188

00:07:49.530  -->  00:07:52.520
to a single trial clause, noting that order matters
189

189

00:07:52.520  -->  00:07:55.160
and you should declare exceptions in the catch clauses
190

190

00:07:55.160  -->  00:07:58.230
in order of most specific to the least specific.
191

191

00:07:58.230  -->  00:07:59.900
So let's end the video here in the next one.
192

192

00:07:59.900  -->  00:08:01.800
We're gonna talk about exception handling
193

193

00:08:01.800  -->  00:08:04.150
extras in some bar constraints as well.
194

194

00:08:04.150  -->  00:08:05.453
See you in the next video.
