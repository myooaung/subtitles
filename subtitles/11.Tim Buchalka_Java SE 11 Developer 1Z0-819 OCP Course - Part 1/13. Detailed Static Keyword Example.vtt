WEBVTT
1
1

00:00:04.871  -->  00:00:07.520 line:15% 
<v ->All right so the examples in the last video</v>
2

2

00:00:07.520  -->  00:00:09.710 line:15% 
demonstrated when a class is initialised
3

3

00:00:09.710  -->  00:00:12.260
and how to access static members of a class
4

4

00:00:12.260  -->  00:00:13.729
using the class name qualifier,
5

5

00:00:13.729  -->  00:00:15.662
or the instance reference variable,
6

6

00:00:15.662  -->  00:00:17.963
even when the variable itself is null.
7

7

00:00:18.830  -->  00:00:21.150
I've stated that you cannot define a static class
8

8

00:00:21.150  -->  00:00:22.640
as a stand-alone class
9

9

00:00:22.640  -->  00:00:24.650
but it has to be a nested class.
10

10

00:00:24.650  -->  00:00:26.700
So what I'm gonna do is create a new class
11

11

00:00:26.700  -->  00:00:29.390
in our methods project and show you this.
12

12

00:00:29.390  -->  00:00:31.790
We're gonna give it the name StaticClassExample.
13

13

00:00:35.123  -->  00:00:38.290
(keyboard keys click)
14

14

00:00:41.970  -->  00:00:44.093
Now nested class has an up-ready part of the
15

15

00:00:44.093  -->  00:00:47.330
1ZO-815 certification exam
16

16

00:00:47.330  -->  00:00:49.690
but you should know if you see a static class
17

17

00:00:49.690  -->  00:00:52.530
defined at the outer level it would be a compile error.
18

18

00:00:52.530  -->  00:00:54.920
So let's just review this example
19

19

00:00:54.920  -->  00:00:57.880
which has all three types of the static members for a class,
20

20

00:00:57.880  -->  00:01:01.930
a static class, a static variable and a static method.
21

21

00:01:01.930  -->  00:01:03.640
So first you can see we've got this class
22

22

00:01:03.640  -->  00:01:04.697
utility class
23

23

00:01:04.697  -->  00:01:07.090
and that defines a static abstract class
24

24

00:01:07.090  -->  00:01:09.940
as a nested class it's doing that on line 15.
25

25

00:01:09.940  -->  00:01:11.210
And the class logger
26

26

00:01:11.210  -->  00:01:13.080
is a static abstract class as I mentioned,
27

27

00:01:13.080  -->  00:01:16.050
which is said to be nested in this utility class.
28

28

00:01:16.050  -->  00:01:18.760
This class will allow the consumer of the code
29

29

00:01:18.760  -->  00:01:20.850
to create a custom logger class
30

30

00:01:20.850  -->  00:01:22.130
by implementing their own class
31

31

00:01:22.130  -->  00:01:24.330
which extends this abstract class
32

32

00:01:24.330  -->  00:01:26.360
and then set it universally.
33

33

00:01:26.360  -->  00:01:29.640
Now logger is a static variable as you can see on the screen
34

34

00:01:29.640  -->  00:01:30.640
and we'll populate that
35

35

00:01:30.640  -->  00:01:32.720
with a concrete logger that we'll create.
36

36

00:01:32.720  -->  00:01:35.240
Log moving down is a static method
37

37

00:01:35.240  -->  00:01:37.060
we called in our application code
38

38

00:01:37.060  -->  00:01:40.400
which is a pass-through method to the logger class.
39

39

00:01:40.400  -->  00:01:42.030
Right so scrolling down a bit further
40

40

00:01:42.030  -->  00:01:45.600
so we're creating a class that extends utilityclass.logger
41

41

00:01:45.600  -->  00:01:46.870
and this new class
42

42

00:01:46.870  -->  00:01:49.410
implements this custom version of the method log,
43

43

00:01:49.410  -->  00:01:51.800
and you can see that on line 34.
44

44

00:01:51.800  -->  00:01:54.237
Now note that this class is not nested.
45

45

00:01:54.237  -->  00:01:56.140
The static class example
46

46

00:01:56.980  -->  00:01:59.270
move down here the bottom one on the third class
47

47

00:01:59.270  -->  00:02:01.210
now creates an instance of the custom logger
48

48

00:02:01.210  -->  00:02:05.690
and sets it to the static variable on the utility class.
49

49

00:02:05.690  -->  00:02:08.340
So using the utility class static log method
50

50

00:02:08.340  -->  00:02:12.177
which is a pass-through to our custom-logger log method.
51

51

00:02:12.177  -->  00:02:14.120
You know there are only a few lines of code here
52

52

00:02:14.120  -->  00:02:15.540
but it does demonstrate
53

53

00:02:15.540  -->  00:02:18.730
how using modifiers allow you to extend your application
54

54

00:02:18.730  -->  00:02:20.660
to allow custom enhancements
55

55

00:02:20.660  -->  00:02:24.450
while also promoting uniformity of code in other areas.
56

56

00:02:24.450  -->  00:02:25.550
So if you run this now
57

57

00:02:29.110  -->  00:02:30.590
and there's the output.
58

58

00:02:30.590  -->  00:02:33.290
Now if you had an application peppered with log statements
59

59

00:02:33.290  -->  00:02:34.330
this method would allow you
60

60

00:02:34.330  -->  00:02:37.546
to change the way they're presented with just some mechanism
61

61

00:02:37.546  -->  00:02:41.023
with the logging osculating the change in a single place.
62

62

00:02:42.040  -->  00:02:44.140
All right so I think the previous video on this one
63

63

00:02:44.140  -->  00:02:47.140
have covered static elements on a class pretty thoroughly
64

64

00:02:47.140  -->  00:02:49.410
pointing out nuances along the way.
65

65

00:02:49.410  -->  00:02:50.370
What we're gonna do is skip
66

66

00:02:50.370  -->  00:02:52.965
the usual out-of-ordinary video for this topic
67

67

00:02:52.965  -->  00:02:56.000
and just go onto a few quiz questions next.
68

68

00:02:56.000  -->  00:02:59.920 line:15% 
We'll continue onto the capsulation video after that quiz.
69

69

00:02:59.920  -->  00:03:02.170 line:15% 
Good luck and I'll see you in the next video.
