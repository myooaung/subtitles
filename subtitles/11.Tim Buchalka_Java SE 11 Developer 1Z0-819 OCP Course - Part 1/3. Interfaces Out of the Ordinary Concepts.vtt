WEBVTT
1
1

00:00:04.510  -->  00:00:06.820
<v Tim>So let's talk about some out of ordinary situations</v>
2

2

00:00:06.820  -->  00:00:09.550
when creating and implementing interfaces.
3

3

00:00:09.550  -->  00:00:11.880
In the video on polymorphism and casting,
4

4

00:00:11.880  -->  00:00:14.560
I showed upcasting and downcasting examples
5

5

00:00:14.560  -->  00:00:17.020
with objects and class types.
6

6

00:00:17.020  -->  00:00:17.853
In this video,
7

7

00:00:17.853  -->  00:00:19.720
I wanna revisit a casting scenario
8

8

00:00:19.720  -->  00:00:23.650
that is slightly different for interfaces than classes.
9

9

00:00:23.650  -->  00:00:25.090
So in the Interfaces project,
10

10

00:00:25.090  -->  00:00:28.600
we need to create a new class name called InterfaceCast.
11

11

00:00:39.371  -->  00:00:40.670
All right, so there's the code.
12

12

00:00:40.670  -->  00:00:41.530
So you can see firstly
13

13

00:00:41.530  -->  00:00:43.490
there's an interface there, Laughable,
14

14

00:00:43.490  -->  00:00:46.080
which has one abstract method called laugh.
15

15

00:00:46.080  -->  00:00:47.090
There's a Joke class there
16

16

00:00:47.090  -->  00:00:48.810
that implements the Laughable interface,
17

17

00:00:48.810  -->  00:00:51.233
and it's got a concrete method called laugh.
18

18

00:00:52.420  -->  00:00:53.360
Moving on further down,
19

19

00:00:53.360  -->  00:00:54.950
there's a class there called Story
20

20

00:00:54.950  -->  00:00:56.820
that doesn't implement any interface
21

21

00:00:56.820  -->  00:00:59.780
or extend any class explicitly.
22

22

00:00:59.780  -->  00:01:02.350
There's also another class there, FunnyStory,
23

23

00:01:02.350  -->  00:01:04.900
that extends Story and implements Laughable,
24

24

00:01:04.900  -->  00:01:07.662
and it overrides the Story's read method
25

25

00:01:07.662  -->  00:01:11.190
and it implements the Laughable's laugh method.
26

26

00:01:11.190  -->  00:01:12.500
And finally down the bottom there,
27

27

00:01:12.500  -->  00:01:14.202
we've got a class InterfaceCast,
28

28

00:01:14.202  -->  00:01:15.860
and that includes the main method,
29

29

00:01:15.860  -->  00:01:17.340
where we're going to execute our code,
30

30

00:01:17.340  -->  00:01:18.600
but also down here,
31

31

00:01:18.600  -->  00:01:20.005
we've got two additional methods.
32

32

00:01:20.005  -->  00:01:22.540
Firstly, the testLaughable method
33

33

00:01:22.540  -->  00:01:24.565
that accepts a parameter of type Laughable
34

34

00:01:24.565  -->  00:01:28.470
and executes the laugh method on the parsed object.
35

35

00:01:28.470  -->  00:01:29.583
And then testStory,
36

36

00:01:29.583  -->  00:01:32.342
that method that accepts a parameter of type Story
37

37

00:01:32.342  -->  00:01:36.253
and executes the read method on the parsed object.
38

38

00:01:37.640  -->  00:01:38.940
All right, in terms of what we're doing,
39

39

00:01:38.940  -->  00:01:40.790
in the main method here,
40

40

00:01:40.790  -->  00:01:41.884
you can see we're instantiating
41

41

00:01:41.884  -->  00:01:43.850
three classes at the top there,
42

42

00:01:43.850  -->  00:01:45.840
and then we're actually just calling the pass through method
43

43

00:01:45.840  -->  00:01:48.948
on different types of objects for our testLaughable method,
44

44

00:01:48.948  -->  00:01:50.710
passing joke and funnyStory,
45

45

00:01:50.710  -->  00:01:52.450
and then the same for testStory,
46

46

00:01:52.450  -->  00:01:55.161
we're passing the story and funnyStory instances.
47

47

00:01:55.161  -->  00:01:56.763
So let's run that code.
48

48

00:01:59.642  -->  00:02:00.830
And as you can see, that works fine.
49

49

00:02:00.830  -->  00:02:02.573
No real surprises there so far.
50

50

00:02:03.580  -->  00:02:04.750
Right, so I'm going to close that,
51

51

00:02:04.750  -->  00:02:07.230
and at the bottom of our main method,
52

52

00:02:07.230  -->  00:02:08.493
gonna paste in some code.
53

53

00:02:09.910  -->  00:02:12.280
So what I'm trying to do there is cast the story variable
54

54

00:02:12.280  -->  00:02:14.120
of type Story to Laughable
55

55

00:02:14.120  -->  00:02:18.130
and then casting joke of type Joke to Story.
56

56

00:02:18.130  -->  00:02:19.787
So the last line there is a compiler error,
57

57

00:02:19.787  -->  00:02:20.930
and if we hover over it,
58

58

00:02:20.930  -->  00:02:22.320
we can see inconvertible types,
59

59

00:02:22.320  -->  00:02:24.520
can't cast Joke to Story.
60

60

00:02:24.520  -->  00:02:26.110
So let's look at this for a moment.
61

61

00:02:26.110  -->  00:02:29.690
The joke variable of type Joke is definitely not a Story.
62

62

00:02:29.690  -->  00:02:32.050
If you go back and have a look at our Joke class,
63

63

00:02:32.050  -->  00:02:33.570
Joke doesn't extend Story
64

64

00:02:33.570  -->  00:02:35.410
and it's got no relationship to Story.
65

65

00:02:35.410  -->  00:02:37.990
So this line, there's already been a compiler error,
66

66

00:02:37.990  -->  00:02:39.140
shouldn't surprise you.
67

67

00:02:41.030  -->  00:02:42.680
So I'm going to comment that out.
68

68

00:02:43.762  -->  00:02:45.280
And now we haven't got a compiler error.
69

69

00:02:45.280  -->  00:02:47.600
But let's now look at the line directly above it.
70

70

00:02:47.600  -->  00:02:49.857
So the variable story here is a Story,
71

71

00:02:49.857  -->  00:02:52.314
and if you come back to the Story class again,
72

72

00:02:52.314  -->  00:02:55.370
you can see Story doesn't extend any classes
73

73

00:02:55.370  -->  00:02:57.540
or implement any interfaces.
74

74

00:02:57.540  -->  00:02:58.600
So that's a bit weird.
75

75

00:02:58.600  -->  00:03:01.890
So why doesn't this line result in a compiler error?
76

76

00:03:01.890  -->  00:03:04.330
Well, the explanation is that the compiler
77

77

00:03:04.330  -->  00:03:06.955
does not apply the same rules to interface casting
78

78

00:03:06.955  -->  00:03:09.220
as it does to class casting
79

79

00:03:09.220  -->  00:03:11.969
because it may be that Story or a subclass of Story
80

80

00:03:11.969  -->  00:03:13.700
will implement the interface
81

81

00:03:13.700  -->  00:03:16.283
and applying this check will prevent this code
82

82

00:03:16.283  -->  00:03:18.690
from being extensible.
83

83

00:03:18.690  -->  00:03:20.240
So if we actually run this now,
84

84

00:03:23.040  -->  00:03:24.884
and you can see we've actually got an exception here.
85

85

00:03:24.884  -->  00:03:26.720
In fact, a ClassCastException,
86

86

00:03:26.720  -->  00:03:30.013
class Story cannot be cast to class Laughable.
87

87

00:03:30.990  -->  00:03:33.920
So now then, whilst the compiler allowed the cast,
88

88

00:03:33.920  -->  00:03:35.800
but the Java virtual machine knows at runtime
89

89

00:03:35.800  -->  00:03:39.550
that the object is definitely not a Laughable object.
90

90

00:03:39.550  -->  00:03:40.890
All right, so let's, continuing on here,
91

91

00:03:40.890  -->  00:03:43.290
what I'm going to do now is I'm gonna create
92

92

00:03:43.290  -->  00:03:45.320
a new type of story called a Farce
93

93

00:03:45.320  -->  00:03:47.470
which implements Laughable this time.
94

94

00:03:47.470  -->  00:03:48.303
So I've got some code
95

95

00:03:48.303  -->  00:03:51.590
and I'm going to paste it just above the main method
96

96

00:03:51.590  -->  00:03:55.700
before our main class definition,
97

97

00:03:55.700  -->  00:03:57.240
paste it in there.
98

98

00:03:57.240  -->  00:03:59.610
Class Farce, which extends the Story class
99

99

00:03:59.610  -->  00:04:01.760
and implements the Laughable interface.
100

100

00:04:01.760  -->  00:04:02.727
And you can see there we've got
101

101

00:04:02.727  -->  00:04:05.380
the laugh method overriden there.
102

102

00:04:05.380  -->  00:04:06.213
Now that we've done that,
103

103

00:04:06.213  -->  00:04:07.100
we need to make another change
104

104

00:04:07.100  -->  00:04:09.320
so that we're using this new class,
105

105

00:04:09.320  -->  00:04:11.730
and what we're gonna do is change line 51,
106

106

00:04:11.730  -->  00:04:12.850
Story story equals new,
107

107

00:04:12.850  -->  00:04:14.800
but this time we're gonna change that to Farce.
108

108

00:04:14.800  -->  00:04:16.380
So I'm gonna comment that line out.
109

109

00:04:16.380  -->  00:04:17.980
So I'll take a copy of it first.
110

110

00:04:24.420  -->  00:04:26.080
Okay.
111

111

00:04:26.080  -->  00:04:27.730
All right, so now if we run this,
112

112

00:04:30.360  -->  00:04:32.290
we find this time that it actually works,
113

113

00:04:32.290  -->  00:04:33.490
and our output's changed,
114

114

00:04:33.490  -->  00:04:34.323
but more importantly,
115

115

00:04:34.323  -->  00:04:37.380
we've no longer got a ClassCastException,
116

116

00:04:37.380  -->  00:04:39.080
and the reason for that this time,
117

117

00:04:39.920  -->  00:04:41.480
again, looking back to Story,
118

118

00:04:41.480  -->  00:04:44.160
didn't implement any interface or extend any class,
119

119

00:04:44.160  -->  00:04:46.960
but the class Farce did extend the Story
120

120

00:04:46.960  -->  00:04:49.520
and implemented the Laughable interface.
121

121

00:04:49.520  -->  00:04:51.680
And obviously the code that crashed previously,
122

122

00:04:51.680  -->  00:04:53.570
we were trying to cast this Laughable, which failed,
123

123

00:04:53.570  -->  00:04:54.450
but now it's working,
124

124

00:04:54.450  -->  00:04:57.920
because of course our Farce class does implement
125

125

00:04:57.920  -->  00:04:59.530
the Laughable interface.
126

126

00:04:59.530  -->  00:05:00.490
All right, so moving on.
127

127

00:05:00.490  -->  00:05:01.920
In previous videos,
128

128

00:05:01.920  -->  00:05:04.590
I've talked about implementing the abstract methods,
129

129

00:05:04.590  -->  00:05:07.640
but I didn't really discuss overriding the default method.
130

130

00:05:07.640  -->  00:05:09.650
So let's try an example of that now.
131

131

00:05:09.650  -->  00:05:11.883
So we're gonna create a new class here in our project.
132

132

00:05:11.883  -->  00:05:13.833
Gonna call this one TestDefaultMethods.
133

133

00:05:24.787  -->  00:05:26.050
All right, so there's our code.
134

134

00:05:26.050  -->  00:05:26.890
So as you can see there,
135

135

00:05:26.890  -->  00:05:28.510
we've got a couple of interfaces,
136

136

00:05:28.510  -->  00:05:29.347
and as we scroll down a little bit,
137

137

00:05:29.347  -->  00:05:31.100
and as you see with these interfaces,
138

138

00:05:31.100  -->  00:05:35.090
both have got a default method there, teachTheseLessons,
139

139

00:05:35.090  -->  00:05:36.410
and the Teachable interface
140

140

00:05:36.410  -->  00:05:38.600
has got an abstract method teach,
141

141

00:05:38.600  -->  00:05:39.750
and the Trainable interface
142

142

00:05:39.750  -->  00:05:41.753
has got an abstract method train.
143

143

00:05:43.110  -->  00:05:45.900
Looking down at the TestDefaultMethods class,
144

144

00:05:45.900  -->  00:05:47.970
it implements only one of these interfaces,
145

145

00:05:47.970  -->  00:05:49.115
in this case, Teachable,
146

146

00:05:49.115  -->  00:05:52.430
and implements the abstract method teach,
147

147

00:05:52.430  -->  00:05:53.673
and I've also implemented
148

148

00:05:53.673  -->  00:05:56.260
the train method here for later use,
149

149

00:05:56.260  -->  00:05:58.650
as you'll see later in this video.
150

150

00:05:58.650  -->  00:06:00.700
All right, and now going, scrolling down our main method,
151

151

00:06:00.700  -->  00:06:02.650
you can see we've created a new instance,
152

152

00:06:02.650  -->  00:06:07.000
and then we're calling both the teach and train methods.
153

153

00:06:07.000  -->  00:06:08.300
So if I run this code now,
154

154

00:06:10.937  -->  00:06:12.600
there are no surprises, no errors.
155

155

00:06:12.600  -->  00:06:15.183
We've got both outputs from both methods.
156

156

00:06:16.060  -->  00:06:17.470
But what happens now if we go back up
157

157

00:06:17.470  -->  00:06:19.340
to our class definition
158

158

00:06:19.340  -->  00:06:21.360
and try and implement both interfaces?
159

159

00:06:21.360  -->  00:06:25.833
So implement Teachable comma Trainable.
160

160

00:06:26.780  -->  00:06:29.480
And suddenly we've got a compile error here.
161

161

00:06:29.480  -->  00:06:30.800
If we hover over it,
162

162

00:06:30.800  -->  00:06:32.920
we can see that TestDefaultMethods inherits
163

163

00:06:32.920  -->  00:06:35.710
unrelated defaults for teachTheseLessons
164

164

00:06:35.710  -->  00:06:38.580
from types Teachable and Trainable.
165

165

00:06:38.580  -->  00:06:41.016
So basically, both interfaces have a default method,
166

166

00:06:41.016  -->  00:06:42.440
and we'll scroll up and have a look at that
167

167

00:06:42.440  -->  00:06:43.540
to confirm that again.
168

168

00:06:45.730  -->  00:06:47.130
So both have got this default method
169

169

00:06:47.130  -->  00:06:49.360
with the same signature, no arguments,
170

170

00:06:49.360  -->  00:06:51.440
and the name teachTheseLessons,
171

171

00:06:51.440  -->  00:06:53.530
and a class that implements both interfaces
172

172

00:06:53.530  -->  00:06:55.890
only has two choices to resolve the situation
173

173

00:06:55.890  -->  00:06:56.860
in this scenario,
174

174

00:06:56.860  -->  00:06:58.130
because clearly we've got a conflict.
175

175

00:06:58.130  -->  00:06:59.828
All we can really do down this situation here
176

176

00:06:59.828  -->  00:07:02.650
is remove one of the interfaces from the declaration
177

177

00:07:02.650  -->  00:07:05.180
or override a method.
178

178

00:07:05.180  -->  00:07:07.000
And what I'm going to do is override the method,
179

179

00:07:07.000  -->  00:07:07.842
the default method.
180

180

00:07:07.842  -->  00:07:09.405
Let's go ahead and do that.
181

181

00:07:09.405  -->  00:07:12.253
And I'm going to place this just above the main method.
182

182

00:07:13.860  -->  00:07:15.630
You can see I've overridden teachTheseLessons.
183

183

00:07:15.630  -->  00:07:17.310
The error disappears.
184

184

00:07:17.310  -->  00:07:18.260
If we run the code,
185

185

00:07:19.990  -->  00:07:20.903
if I scroll down,
186

186

00:07:21.800  -->  00:07:24.660
you can see that teachTheseLessons has been overridden now.
187

187

00:07:24.660  -->  00:07:26.567
The output we're seeing on the top of the line there is
188

188

00:07:26.567  -->  00:07:29.340
"Everyone should learn math and science."
189

189

00:07:29.340  -->  00:07:31.390
And obviously initially when we ran this,
190

190

00:07:32.954  -->  00:07:33.787
we were getting the output
191

191

00:07:33.787  -->  00:07:35.490
"Everyone should learn art and music"
192

192

00:07:35.490  -->  00:07:38.295
'cause that was the default method of teachTheseLessons
193

193

00:07:38.295  -->  00:07:40.113
that was being executed.
194

194

00:07:40.980  -->  00:07:42.970
All right, and just a note here that the same process
195

195

00:07:42.970  -->  00:07:45.692
that I've been through here is true of any abstract methods
196

196

00:07:45.692  -->  00:07:47.621
that have the same signature,
197

197

00:07:47.621  -->  00:07:49.370
so keep that in mind.
198

198

00:07:49.370  -->  00:07:50.700
All right, let's finish the video here.
199

199

00:07:50.700  -->  00:07:51.533
In the next one,
200

200

00:07:51.533  -->  00:07:53.090
we'll take this to the next level
201

201

00:07:53.090  -->  00:07:54.240
with some more example code.
202

202

00:07:54.240  -->  00:07:55.623
See you in the next video.
