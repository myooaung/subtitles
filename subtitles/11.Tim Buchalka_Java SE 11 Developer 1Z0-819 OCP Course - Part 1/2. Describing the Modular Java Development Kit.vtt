WEBVTT
1
1

00:00:05.004  -->  00:00:06.070
<v Instructor>All right, so I want to now describe</v>
2

2

00:00:06.070  -->  00:00:08.190
the modular JDK.
3

3

00:00:08.190  -->  00:00:12.340
So before Java 9, the JDK was a monolithic set of packages,
4

4

00:00:12.340  -->  00:00:15.320
packaged into one jar file, the rt.jar,
5

5

00:00:15.320  -->  00:00:18.090
which any java application would need to deploy
6

6

00:00:18.090  -->  00:00:19.810
along with it's own code.
7

7

00:00:19.810  -->  00:00:21.560
The Java platform has grown over time,
8

8

00:00:21.560  -->  00:00:24.770
to include about 25 different frameworks.
9

9

00:00:24.770  -->  00:00:28.000
Even if your application only used one class in a package,
10

10

00:00:28.000  -->  00:00:29.870
you'd need the rt.jar,
11

11

00:00:29.870  -->  00:00:32.500
which included all of these frameworks.
12

12

00:00:32.500  -->  00:00:35.530
Project Jigsaw was the name of the project created
13

13

00:00:35.530  -->  00:00:37.593
to modularize the JDK.
14

14

00:00:39.910  -->  00:00:42.670
The goals of modularizing the JDK was summarised
15

15

00:00:42.670  -->  00:00:45.630
by the Project Jigsaw team and restated here:
16

16

00:00:45.630  -->  00:00:48.710
One, more scalability, by allowing the JDK
17

17

00:00:48.710  -->  00:00:51.880
to more easily scale down to smaller platforms.
18

18

00:00:51.880  -->  00:00:54.140
Secondly, improve security by protecting
19

19

00:00:54.140  -->  00:00:56.140
the internals of the JDK.
20

20

00:00:56.140  -->  00:00:59.320
Third, improved maintainability by publishing dependencies
21

21

00:00:59.320  -->  00:01:02.430
and reducing the amount of interdependencies.
22

22

00:01:02.430  -->  00:01:04.010
Improved application performance,
23

23

00:01:04.010  -->  00:01:06.550
by allowing configuration flexibility.
24

24

00:01:06.550  -->  00:01:08.310
And fifth, easier construction of
25

25

00:01:08.310  -->  00:01:11.173
and maintenance of libraries and large applications.
26

26

00:01:13.585  -->  00:01:16.260
The Java designers spent a lot of time decoupling
27

27

00:01:16.260  -->  00:01:17.853
the frameworks and reconstructing the code
28

28

00:01:17.853  -->  00:01:20.930
into smaller sets of code, a few dozen modules,
29

29

00:01:20.930  -->  00:01:23.780
that met the objectives that I've just discussed.
30

30

00:01:23.780  -->  00:01:25.810
The smaller sets of code nicely package
31

31

00:01:25.810  -->  00:01:29.293
into modular jar files, comprised the Modular JDK.
32

32

00:01:30.800  -->  00:01:32.060
All right, so I'm going to open a browser now,
33

33

00:01:32.060  -->  00:01:33.310
and paste in a link, which is available
34

34

00:01:33.310  -->  00:01:36.110
in the resources section of this video.
35

35

00:01:36.110  -->  00:01:39.203
And here you can review the Modular JDK specification.
36

36

00:01:42.330  -->  00:01:46.270
And the Modular JDK is split into two sections, the Java SE,
37

37

00:01:46.270  -->  00:01:50.120
which is the Java Platform Standard Edition Java SE APIs.
38

38

00:01:50.120  -->  00:01:52.980
Now these APIs define the core Java Platform
39

39

00:01:52.980  -->  00:01:54.810
for general-purpose computing.
40

40

00:01:54.810  -->  00:01:56.170
These APIs are in modules
41

41

00:01:56.170  -->  00:01:59.083
whose names start with a java.prefix.
42

42

00:02:01.040  -->  00:02:03.730
All of the modules in the Java SE are standard modules
43

43

00:02:03.730  -->  00:02:07.670
as defined by the Java Community Process, JCP.
44

44

00:02:07.670  -->  00:02:11.470
However, not all standard modules defined by the JCP
45

45

00:02:11.470  -->  00:02:15.820
are in the Java SE, just the foundational standard modules.
46

46

00:02:15.820  -->  00:02:18.300
A standard module may contain both standard
47

47

00:02:18.300  -->  00:02:21.020
and non-standard API packages.
48

48

00:02:21.020  -->  00:02:24.730
A standard package is prefixed with 'java.' or 'javax.',
49

49

00:02:24.730  -->  00:02:28.393
such as java.lang and javax.net for example.
50

50

00:02:30.630  -->  00:02:33.290
So the second section in the Modular JDK
51

51

00:02:33.290  -->  00:02:35.600
is the JDK, the Java Development Kit,
52

52

00:02:35.600  -->  00:02:38.850
and these APIs that are specific to the JDK.
53

53

00:02:38.850  -->  00:02:41.860
So these APIs may not necessarily be available
54

54

00:02:41.860  -->  00:02:45.160
in all implementations of the Java SE Platform.
55

55

00:02:45.160  -->  00:02:46.530
These APIs are in modules
56

56

00:02:46.530  -->  00:02:49.900
whose names start with 'jdk.' prefix.
57

57

00:02:49.900  -->  00:02:52.180
Now these are non-standard modules.
58

58

00:02:52.180  -->  00:02:54.000
A non-standard module must not export
59

59

00:02:54.000  -->  00:02:56.500
any standard API packages.
60

60

00:02:56.500  -->  00:02:59.130
A non-standard package is generally prefixed
61

61

00:02:59.130  -->  00:03:02.853
with 'jdk.' such as jdk.internal.logger, for example.
62

62

00:03:05.460  -->  00:03:08.090
So the following diagram is the module graph
63

63

00:03:08.090  -->  00:03:12.500
of the Modular SE modules, which is part of the modular JDK.
64

64

00:03:12.500  -->  00:03:16.120
So a module graph is a diagram, which attempts to visualise
65

65

00:03:16.120  -->  00:03:19.373
the module dependencies of a particular module.
66

66

00:03:21.130  -->  00:03:23.920
In the diagram below, the java.se module
67

67

00:03:23.920  -->  00:03:27.040
has dependencies on all of the modules shown,
68

68

00:03:27.040  -->  00:03:29.760
where as java.base has no dependencies,
69

69

00:03:29.760  -->  00:03:33.370
but is a required dependency for all the modules shown.
70

70

00:03:33.370  -->  00:03:35.430
The arrows are called read edges,
71

71

00:03:35.430  -->  00:03:38.500
read because a module is said to be able to read another
72

72

00:03:38.500  -->  00:03:41.113
if properly configured as dependent on it.
73

73

00:03:43.000  -->  00:03:45.160
For example, the java.xml module is said
74

74

00:03:45.160  -->  00:03:48.220
to read the java.base module.
75

75

00:03:48.220  -->  00:03:50.460
Note also that a module graph only displays
76

76

00:03:50.460  -->  00:03:54.230
module dependencies and will not include packages.
77

77

00:03:54.230  -->  00:03:55.620
And the link there is also available
78

78

00:03:55.620  -->  00:03:57.630
in the resources section for you to visit
79

79

00:03:57.630  -->  00:03:58.733
or browse if you wish.
80

80

00:04:01.010  -->  00:04:04.613
So each module shown is part of the Java API specification.
81

81

00:04:05.880  -->  00:04:06.713
And it's another link,
82

82

00:04:06.713  -->  00:04:08.490
which I will just show on a browser now.
83

83

00:04:10.890  -->  00:04:11.910
We'll go to that, and again that's in
84

84

00:04:11.910  -->  00:04:13.830
the resources section for this video.
85

85

00:04:13.830  -->  00:04:15.370
This link gives you all the information
86

86

00:04:15.370  -->  00:04:17.170
about the java.base module,
87

87

00:04:17.170  -->  00:04:19.793
and the packages and resources that it contains.
88

88

00:04:22.240  -->  00:04:24.400
So the java.base module is described
89

89

00:04:24.400  -->  00:04:28.420
as the foundational APIs of the Java SE Platform,
90

90

00:04:28.420  -->  00:04:30.430
which includes the core packages
91

91

00:04:30.430  -->  00:04:34.653
such as java.lang, java.util, java.io, etcetera.
92

92

00:04:35.680  -->  00:04:37.020
All right, so let's end the video here
93

93

00:04:37.020  -->  00:04:38.820
and in the next one, I want to just go back
94

94

00:04:38.820  -->  00:04:41.440
to the command line, and we can actually use
95

95

00:04:41.440  -->  00:04:43.560
the command line and various tools
96

96

00:04:43.560  -->  00:04:46.920
to view the standard edition in JDK visible modules.
97

97

00:04:46.920  -->  00:04:49.370
Let's have a go at doing that, in the next video.
