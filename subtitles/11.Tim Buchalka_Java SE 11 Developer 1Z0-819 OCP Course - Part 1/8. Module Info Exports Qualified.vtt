WEBVTT
1
1

00:00:05.307  -->  00:00:07.530
<v ->Alright so for the last few videos with the uncoveted</v>
2

2

00:00:07.530  -->  00:00:11.450
unqualified exports directive, a required directive, as well
3

3

00:00:11.450  -->  00:00:14.610
as the required directive with the transient modifier
4

4

00:00:14.610  -->  00:00:17.100
What we are going to look at now is the qualified exports
5

5

00:00:17.100  -->  00:00:20.590
directive, identifying friend modules. So what we need to do
6

6

00:00:20.590  -->  00:00:24.453
first is go to our module-info.java file for the module
7

7

00:00:24.453  -->  00:00:26.483
or the module.2 tool, so this one here.
8

8

00:00:28.202  -->  00:00:29.750
We need to make a change to this file. At the moment, you
9

9

00:00:29.750  -->  00:00:33.770
can see its got exports org.pkg.util on line 4.
10

10

00:00:33.770  -->  00:00:38.740
I'm gonna change that specifically clearing the semi colon
11

11

00:00:39.978  -->  00:00:44.270
to org.module.base and a semi colon on the end.
12

12

00:00:44.270  -->  00:00:47.460
So in this instance, I've changed the exports directive
13

13

00:00:47.460  -->  00:00:50.550
to a qualified directive, specifying that the package will
14

14

00:00:50.550  -->  00:00:54.390
only be read by the friends we specify after the 2 keywords.
15

15

00:00:54.390  -->  00:00:57.200
In this case, I've defined the module org.module.base
16

16

00:00:57.200  -->  00:01:01.010
as a friend to the org.pkg.util module.
17

17

00:01:01.010  -->  00:01:03.513
Let's rebuild org.module.base.
18

18

00:01:04.690  -->  00:01:06.840
And nothing should change for org.module.base and you
19

19

00:01:06.840  -->  00:01:08.570
can see we didn't get any errors.
20

20

00:01:08.570  -->  00:01:11.220
Now it should execute with the same result as before.
21

21

00:01:12.580  -->  00:01:15.333
How about throw a Base Entity and run it just to make sure.
22

22

00:01:16.650  -->  00:01:20.974
I'm scrolling over and you can see we're still running
23

23

00:01:20.974  -->  00:01:23.520
in this module with the -p and the -m.
24

24

00:01:23.520  -->  00:01:25.760
So everything's working as it should be.
25

25

00:01:25.760  -->  00:01:28.410
Alright so moving on now, lets create a fourth module
26

26

00:01:29.340  -->  00:01:31.633
org.module.concrete.
27

27

00:01:37.970  -->  00:01:40.163
We'll create our module info as per normal.
28

28

00:01:41.220  -->  00:01:45.288
Then I'm gonna add a "requires" in this module-pro.java
29

29

00:01:45.288  -->  00:01:47.030
for our org.module.concrete module
30

30

00:01:48.790  -->  00:01:50.040
requires org.module.util.
31

31

00:01:51.920  -->  00:01:54.629
We need to allow IntelliJ to add that dependency
32

32

00:01:54.629  -->  00:01:55.712
to this file.
33

33

00:01:57.919  -->  00:01:59.250
Right, next we want to create a class in this module.
34

34

00:01:59.250  -->  00:02:01.950
We're gonna come down and right click the source folder,
35

35

00:02:01.950  -->  00:02:06.950
new Java class, org.pkg.concrete.Couple.
36

36

00:02:13.610  -->  00:02:15.043
Alright so let's paste in some code.
37

37

00:02:17.286  -->  00:02:19.250
So I can see we've got a compiler error over here, so
38

38

00:02:21.169  -->  00:02:23.040
if I highlight that, you can see package org.pkg.util is
39

39

00:02:23.040  -->  00:02:26.800
declared in our module org.module.util, which does not
40

40

00:02:26.800  -->  00:02:30.090
export it to module org.module.concrete.
41

41

00:02:30.090  -->  00:02:33.037
But it could get IntelliJ to do it instead.
42

42

00:02:33.037  -->  00:02:36.500
Let's go back and check out that module info.java file
43

43

00:02:36.500  -->  00:02:38.510
for org.module.util again.
44

44

00:02:38.510  -->  00:02:40.802
And you can see we've just got the one line there but if we
45

45

00:02:40.802  -->  00:02:42.850
go back again to our Couple, this time we'll get IntelliJ
46

46

00:02:42.850  -->  00:02:43.843
to add it for us.
47

47

00:02:46.170  -->  00:02:47.820
We'll go back and check that out.
48

48

00:02:48.850  -->  00:02:51.240
And you can see what its done there on line 4.
49

49

00:02:51.240  -->  00:02:54.210
Basically, org.module.Concrete was added to the qualified
50

50

00:02:54.210  -->  00:02:57.470
exports directive. Now you'll note that the modules
51

51

00:02:57.470  -->  00:02:59.835
defined as friends are listed in a commented limited list
52

52

00:02:59.835  -->  00:03:01.343
after the two keywords.
53

53

00:03:02.482  -->  00:03:05.800
A package name can only be in a single exports directive
54

54

00:03:05.800  -->  00:03:09.130
but can be exported to multiple friend modules.
55

55

00:03:09.130  -->  00:03:11.200
You'll probably have a few correct that Couple doesn't
56

56

00:03:11.200  -->  00:03:13.960
compile into the org.module.Concrete module.
57

57

00:03:13.960  -->  00:03:17.590
So if I actually remove this, I did have an error before
58

58

00:03:17.590  -->  00:03:20.690
this was added, got an error again, that won't actually
59

59

00:03:20.690  -->  00:03:22.070
work.
60

60

00:03:22.070  -->  00:03:24.520
So I'll go back and undo that change. So I put it back,
61

61

00:03:24.520  -->  00:03:25.940
the error disappears.
62

62

00:03:25.940  -->  00:03:28.900
Alright so next now, let's change this file slightly.
63

63

00:03:28.900  -->  00:03:30.680
So I'm gonna come down here and add a semi colon in that
64

64

00:03:30.680  -->  00:03:35.680
line and do an exports org.pkg.util to org.module.concrete.
65

65

00:03:39.500  -->  00:03:41.270
So I'm gonna hover over the error, I'm gonna duplicate
66

66

00:03:41.270  -->  00:03:44.270
exports org.pkg.util.
67

67

00:03:44.270  -->  00:03:46.880
So attempting to define moldable friends for the same
68

68

00:03:46.880  -->  00:03:50.020
package in different directives is a compile error.
69

69

00:03:50.020  -->  00:03:53.260
The only valid way is one exports directive and a
70

70

00:03:53.260  -->  00:03:56.140
commented list of friends as we had previously.
71

71

00:03:56.140  -->  00:03:58.880
So if you see an exam question in another format,
72

72

00:03:58.880  -->  00:04:00.623
you can mark that as incorrect.
73

73

00:04:02.524  -->  00:04:04.460
Now let us undo that, go back to how we had it, which is
74

74

00:04:04.460  -->  00:04:05.810
now valid.
75

75

00:04:05.810  -->  00:04:08.360
Alright so in the last two videos and the last one,
76

76

00:04:09.744  -->  00:04:11.210
I've demonstrated how to create and declare modules
77

77

00:04:13.616  -->  00:04:14.962
using IntelliJ's features, as well as editing the
78

78

00:04:14.962  -->  00:04:16.410
module-info.java files manually, and we've used a
79

79

00:04:16.410  -->  00:04:19.210
combination of some of the directives available.
80

80

00:04:19.210  -->  00:04:21.680
Moving on, in the next video, I'm gonna discuss some
81

81

00:04:21.680  -->  00:04:23.810
unusual features about modules.
82

82

00:04:23.810  -->  00:04:25.110
See you in the next video.
