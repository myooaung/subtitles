WEBVTT
1
1

00:00:05.560  -->  00:00:06.700
<v Tim>Well let's start talking now</v>
2

2

00:00:06.700  -->  00:00:09.650
about scope of variables.
3

3

00:00:09.650  -->  00:00:12.427
So Oracle's Java Specification states, quote,
4

4

00:00:12.427  -->  00:00:15.700
"The scope of a declaration is the region of the programme
5

5

00:00:15.700  -->  00:00:18.800
within which the entity declared by the declaration
6

6

00:00:18.800  -->  00:00:21.080
can be referred to using a simple name,
7

7

00:00:21.080  -->  00:00:22.600
provided it is visible."
8

8

00:00:22.600  -->  00:00:23.870
Unquote.
9

9

00:00:23.870  -->  00:00:27.290
A local variable, formal parameter, exception parameter,
10

10

00:00:27.290  -->  00:00:29.460
and a local class can only be referred to
11

11

00:00:29.460  -->  00:00:32.800
using a simple name, and not a qualified name.
12

12

00:00:32.800  -->  00:00:35.640
Because of this, some declarations aren't permitted
13

13

00:00:35.640  -->  00:00:37.800
within the scope of these elements.
14

14

00:00:37.800  -->  00:00:39.230
Now this can be re-stated.
15

15

00:00:39.230  -->  00:00:43.110
If you cannot qualify a variable name in its current scope
16

16

00:00:43.110  -->  00:00:45.680
then you cannot create another local variable name
17

17

00:00:45.680  -->  00:00:47.560
in a more limited scope.
18

18

00:00:47.560  -->  00:00:49.600
And I'll demonstrate that in some code in this video,
19

19

00:00:49.600  -->  00:00:50.433
in the next one.
20

20

00:00:51.310  -->  00:00:54.060
So there are several scopes that we'll need to understand
21

21

00:00:54.060  -->  00:00:55.220
and that you'll be tested on
22

22

00:00:55.220  -->  00:00:57.110
when you're creating local variables.
23

23

00:00:57.110  -->  00:01:00.110
So the scopes that we're gonna deal with is class scope,
24

24

00:01:00.110  -->  00:01:03.550
instance, method, loop, loop block
25

25

00:01:03.550  -->  00:01:05.813
and a block including an exception block.
26

26

00:01:07.360  -->  00:01:09.900
All right, so I've created a new project called Scope
27

27

00:01:09.900  -->  00:01:12.500
and now I'm gonna create a new class called Persons.
28

28

00:01:12.500  -->  00:01:13.850
Let's go ahead and do that.
29

29

00:01:15.862  -->  00:01:19.112
(computer keys typing)
30

30

00:01:20.820  -->  00:01:21.653
All right.
31

31

00:01:22.520  -->  00:01:25.620
So here we've got one class variable, name,
32

32

00:01:25.620  -->  00:01:28.940
we've got two instance variables, instanceName and age
33

33

00:01:28.940  -->  00:01:30.470
and we've also got several contractors.
34

34

00:01:30.470  -->  00:01:32.590
We've got no arguments constructor,
35

35

00:01:32.590  -->  00:01:36.280
we've got a single and a two arguments constructors as well.
36

36

00:01:36.280  -->  00:01:38.040
Now constructors are perfect examples
37

37

00:01:38.040  -->  00:01:39.970
of how a method parameter name
38

38

00:01:39.970  -->  00:01:41.390
can have the same name as class
39

39

00:01:41.390  -->  00:01:43.510
or the instance variable name.
40

40

00:01:43.510  -->  00:01:45.760
In this constructor, the one on line 18,
41

41

00:01:45.760  -->  00:01:48.970
the Person instance age doesn't get set at all
42

42

00:01:48.970  -->  00:01:51.373
and that's because age is not qualified by this,
43

43

00:01:51.373  -->  00:01:52.830
so this.age.
44

44

00:01:52.830  -->  00:01:56.970
Now this is a common mistake and may be tested in the exam.
45

45

00:01:56.970  -->  00:01:59.680
In the case of the two arguments constructor,
46

46

00:01:59.680  -->  00:02:01.400
the constructor parameters are named
47

47

00:02:01.400  -->  00:02:03.390
and typed the same as the class variable name
48

48

00:02:03.390  -->  00:02:06.270
in the instance variable age.
49

49

00:02:06.270  -->  00:02:08.380
Correctly setting the object's age using this qualifier
50

50

00:02:08.380  -->  00:02:11.100
you can see on line 34, this.age equals age.
51

51

00:02:11.100  -->  00:02:13.880
And we've done a similar thing to instanceName.
52

52

00:02:13.880  -->  00:02:16.120
Note also that's setting a static variable name
53

53

00:02:16.120  -->  00:02:18.250
in the same assignment statement.
54

54

00:02:18.250  -->  00:02:20.760
So we've got this.instanceName equals person.name
55

55

00:02:20.760  -->  00:02:21.883
equals name.
56

56

00:02:23.017  -->  00:02:25.390
All right, so let's go ahead now and add a couple of methods
57

57

00:02:25.390  -->  00:02:28.500
to our Person class which demonstrate how we can reference
58

58

00:02:28.500  -->  00:02:31.320
class and instance variables with or without a qualifier.
59

59

00:02:31.320  -->  00:02:33.330
So I'm gonna add a couple of setters
60

60

00:02:33.330  -->  00:02:35.380
and also our toString method.
61

61

00:02:35.380  -->  00:02:37.240
Just gonna paste that code in.
62

62

00:02:37.240  -->  00:02:39.240
So we've got our two simple setters as you can see there
63

63

00:02:39.240  -->  00:02:42.530
for set age and that set instanceName.
64

64

00:02:42.530  -->  00:02:44.350
We've also got toString.
65

65

00:02:44.350  -->  00:02:45.840
So in the case of the toString,
66

66

00:02:45.840  -->  00:02:48.070
instance and class variable names
67

67

00:02:48.070  -->  00:02:50.287
have scope within all non-static methods
68

68

00:02:50.287  -->  00:02:53.800
of the enclosing class, no qualifiers required.
69

69

00:02:53.800  -->  00:02:56.740
That said, qualifiers do help readability.
70

70

00:02:56.740  -->  00:02:58.720
All right, so let's try testing this and to do that,
71

71

00:02:58.720  -->  00:03:01.847
we'll create another class and call it TestPerson
72

72

00:03:03.730  -->  00:03:07.660
and we'll do some instantiation of our Person class.
73

73

00:03:07.660  -->  00:03:08.660
So there's the code.
74

74

00:03:10.470  -->  00:03:12.900
So you can see we're creating various instantiations
75

75

00:03:12.900  -->  00:03:14.103
of the Person object.
76

76

00:03:15.210  -->  00:03:16.360
So let's just run this.
77

77

00:03:20.930  -->  00:03:22.430
So you can see that PERSON.name,
78

78

00:03:22.430  -->  00:03:25.780
because it's a class variable, will maintain the last value
79

79

00:03:25.780  -->  00:03:28.080
it's set to, which was DEB, and that's because
80

80

00:03:28.080  -->  00:03:29.580
only the two arguments constructors
81

81

00:03:29.580  -->  00:03:31.270
set PERSON.name.
82

82

00:03:31.270  -->  00:03:33.730
Also the code demonstrates that ANN's information
83

83

00:03:33.730  -->  00:03:36.310
was set to defaults, instanceName equals UNKNOWN
84

84

00:03:36.310  -->  00:03:39.010
when an age equals 25, and that's because we used
85

85

00:03:39.010  -->  00:03:41.320
the No Args Constructor initially.
86

86

00:03:41.320  -->  00:03:43.240
Now setting age variables in the setters
87

87

00:03:43.240  -->  00:03:45.790
did the job and gave ANN her name and her real age.
88

88

00:03:46.665  -->  00:03:48.410
All right, so so far so good hopefully.
89

89

00:03:48.410  -->  00:03:50.260
Let's explore a lower level
90

90

00:03:50.260  -->  00:03:53.120
local variable declarations with our Person class
91

91

00:03:53.120  -->  00:03:54.860
by adding a method that will print out
92

92

00:03:54.860  -->  00:03:57.860
the generational category of our person.
93

93

00:03:57.860  -->  00:03:59.720
I'm just gonna pop up this slide.
94

94

00:03:59.720  -->  00:04:03.230
This is what we're trying to do is, based on the age range
95

95

00:04:03.230  -->  00:04:07.313
we want to output or set a string to be that value.
96

96

00:04:08.430  -->  00:04:10.633
So coming back to our Person class.
97

97

00:04:11.710  -->  00:04:13.030
I'm gonna paste in the code
98

98

00:04:13.030  -->  00:04:15.280
right at the bottom of the class.
99

99

00:04:15.280  -->  00:04:18.530
So that's our getAgeGroupClassification method
100

100

00:04:18.530  -->  00:04:19.580
as you can see there.
101

101

00:04:20.530  -->  00:04:22.540
And so depending on the value of age
102

102

00:04:22.540  -->  00:04:25.550
we're updating the ageClassification local variable
103

103

00:04:25.550  -->  00:04:28.320
to an appropriate value based on that age.
104

104

00:04:28.320  -->  00:04:32.010
Right, so now that we've done that, let's actually update
105

105

00:04:32.010  -->  00:04:34.050
our toString method on the Person class
106

106

00:04:34.050  -->  00:04:35.610
and put this information out.
107

107

00:04:35.610  -->  00:04:37.240
Now that words will invoke a call
108

108

00:04:37.240  -->  00:04:39.830
to our getAgeGroupClassification method.
109

109

00:04:39.830  -->  00:04:42.283
So go back up to our toString.
110

110

00:04:43.490  -->  00:04:45.133
And we'll just update that.
111

111

00:04:47.830  -->  00:04:50.180
Oh, I can see now showing the instanceName and the age
112

112

00:04:50.180  -->  00:04:53.570
and then when invoking getAgeGroupClassification as well.
113

113

00:04:53.570  -->  00:04:56.363
So let's now go back to our TestPerson class.
114

114

00:04:57.970  -->  00:05:00.550
And what I'm going to do is just copy and paste.
115

115

00:05:00.550  -->  00:05:03.370
A cutdown method that is a bit more concise
116

116

00:05:03.370  -->  00:05:04.970
and we'll actually run this now.
117

117

00:05:07.170  -->  00:05:08.560
And you can see the output we've got there.
118

118

00:05:08.560  -->  00:05:11.980
JOE is 55 years old, Baby Boomer in parentheses.
119

119

00:05:11.980  -->  00:05:14.060
DEB 85 years old, The Silent Generation
120

120

00:05:14.060  -->  00:05:16.433
and ANN is 21 years old, Millennial.
121

121

00:05:17.560  -->  00:05:19.020
All right so moving on,
122

122

00:05:19.020  -->  00:05:22.720
let's now test declaring local variables a little further
123

123

00:05:22.720  -->  00:05:24.680
using the method we just added to Person.
124

124

00:05:24.680  -->  00:05:27.840
So in other words our GetAgeGroupClassification method.
125

125

00:05:27.840  -->  00:05:29.040
So we can go back there.
126

126

00:05:31.140  -->  00:05:35.040
So in this first if statement that we got on line 72,
127

127

00:05:35.040  -->  00:05:37.080
let's declare it your local variable,
128

128

00:05:37.080  -->  00:05:39.280
but with the same name as ageClassification,
129

129

00:05:39.280  -->  00:05:40.553
which is defined on line 67.
130

130

00:05:40.553  -->  00:05:43.468
So I'm jut gonna add the type there on line 73.
131

131

00:05:43.468  -->  00:05:46.860
(computer keys typing)
132

132

00:05:46.860  -->  00:05:49.290
Now generally this would be perfectly fine,
133

133

00:05:49.290  -->  00:05:51.720
except we've already created a local variable
134

134

00:05:51.720  -->  00:05:54.100
with this name and the surrounding scope
135

135

00:05:54.100  -->  00:05:56.240
and the compiler can't distinguish
136

136

00:05:56.240  -->  00:05:59.340
which age classification is meant in this if statement
137

137

00:05:59.340  -->  00:06:01.650
and so therefore a compiler error occurs
138

138

00:06:01.650  -->  00:06:04.500
saying the ageClassification is already defined
139

139

00:06:04.500  -->  00:06:06.070
in the scope.
140

140

00:06:06.070  -->  00:06:07.463
So we'll undo that change.
141

141

00:06:09.740  -->  00:06:12.507
All right so, let's take a look at this Millennial code
142

142

00:06:12.507  -->  00:06:16.120
the if test, the if that's on line 80.
143

143

00:06:16.120  -->  00:06:18.260
And let's make a change to that.
144

144

00:06:18.260  -->  00:06:21.713
I'm going to replace that bit of code.
145

145

00:06:24.540  -->  00:06:25.373
So you can see we've got a little
146

146

00:06:25.373  -->  00:06:27.560
slightly more complex test there.
147

147

00:06:27.560  -->  00:06:29.110
If age is greater than equal to 20
148

148

00:06:29.110  -->  00:06:32.000
it still sets the ageClassification to be Millennial.
149

149

00:06:32.000  -->  00:06:34.430
However, it also checks now to see whether the age
150

150

00:06:34.430  -->  00:06:38.220
is greater than equal to 21 and assigns a variable age type
151

151

00:06:38.220  -->  00:06:41.340
or assigns a value of Voting and adds that ultimately on
152

152

00:06:41.340  -->  00:06:44.140
line 86 to the ageClassification variable.
153

153

00:06:44.140  -->  00:06:45.283
So if we run this now.
154

154

00:06:48.560  -->  00:06:50.020
You can see the outputs change slightly,
155

155

00:06:50.020  -->  00:06:54.080
specifically ANN is 21 years old Voting Millennial now
156

156

00:06:54.080  -->  00:06:57.030
and that's because of the change we introduced here
157

157

00:06:57.030  -->  00:06:59.153
to our code starting at line 80.
158

158

00:07:00.420  -->  00:07:02.560
Now you probably know the answer to this but what would
159

159

00:07:02.560  -->  00:07:05.970
happen if we moved ageClassification.
160

160

00:07:05.970  -->  00:07:10.143
So if we go back to that code, if I move this line,
161

161

00:07:12.480  -->  00:07:13.743
outside the scope,
162

162

00:07:16.100  -->  00:07:17.710
put it in there.
163

163

00:07:17.710  -->  00:07:19.740
Can probably guess what's gonna happen.
164

164

00:07:19.740  -->  00:07:21.920
Here we're attempting to reference the ageType
165

165

00:07:21.920  -->  00:07:24.500
outside the scope where it was declared
166

166

00:07:24.500  -->  00:07:27.340
and you can see it was declared ageType on line 82
167

167

00:07:27.340  -->  00:07:28.600
and the compiler won't let you do it.
168

168

00:07:28.600  -->  00:07:31.680
If we hover over the error, cannot resolve symbol ageType,
169

169

00:07:31.680  -->  00:07:33.470
no surprises there.
170

170

00:07:33.470  -->  00:07:35.658
All right so I'm gonna undo that change.
171

171

00:07:35.658  -->  00:07:39.210
(computer keys typing)
172

172

00:07:39.210  -->  00:07:40.550
All right so I'm gonna finish the video here
173

173

00:07:40.550  -->  00:07:42.250
and in the next one we'll continue on with our discussion
174

174

00:07:42.250  -->  00:07:45.560
of Scope and we'll start by looking at method Scope.
175

175

00:07:45.560  -->  00:07:46.860
See you in the next video.
