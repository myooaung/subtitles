WEBVTT
1
1

00:00:05.070  -->  00:00:07.440
<v Tim>In the video on the module JDK in this section,</v>
2

2

00:00:07.440  -->  00:00:10.800
I showed a module graph for the java.se module.
3

3

00:00:10.800  -->  00:00:12.830
In this video, we're gonna talk about module graphs
4

4

00:00:12.830  -->  00:00:16.370
for the modules we've created in this section of the course.
5

5

00:00:16.370  -->  00:00:19.770
So we're gonna start with org.module.global.
6

6

00:00:19.770  -->  00:00:22.190
So we'll open a terminal session in the IntelliJ.
7

7

00:00:22.190  -->  00:00:26.070
We're gonna use the out/production folder or directory,
8

8

00:00:26.070  -->  00:00:28.370
so starting from there, and basically you go
9

9

00:00:28.370  -->  00:00:30.740
to whatever output directory that you put your projects
10

10

00:00:30.740  -->  00:00:32.490
in there if they're not the same as mine.
11

11

00:00:32.490  -->  00:00:35.530
I'm gonna start by jdeps dash v
12

12

00:00:36.750  -->  00:00:38.047
org.module.global,
13

13

00:00:39.813  -->  00:00:41.570
and I'm gonna make a bit more space here
14

14

00:00:41.570  -->  00:00:44.780
because we're not gonna be doing any code in this video.
15

15

00:00:44.780  -->  00:00:47.720
So that can be able alternatively written as jdeps
16

16

00:00:47.720  -->  00:00:48.860
dash verbose
17

17

00:00:50.590  -->  00:00:53.223
org.module.global.
18

18

00:00:55.060  -->  00:00:56.463
Same output as you can see.
19

19

00:00:57.420  -->  00:00:58.253
So you can see there
20

20

00:00:58.253  -->  00:01:01.000
that the output using this verbose option,
21

21

00:01:01.000  -->  00:01:03.050
and obviously both of those'll do the same thing,
22

22

00:01:03.050  -->  00:01:05.600
will display dependencies down to the class level,
23

23

00:01:05.600  -->  00:01:08.580
and that could easily become way too much information.
24

24

00:01:08.580  -->  00:01:10.810
So if I do something like jdeps dash v
25

25

00:01:10.810  -->  00:01:13.203
dash m for java.sql,
26

26

00:01:14.850  -->  00:01:17.720
we got a lot of classes there showing.
27

27

00:01:17.720  -->  00:01:19.920
So you can see if I scroll up, heaps of 'em.
28

28

00:01:20.860  -->  00:01:22.570
There's a summary option for jdep,
29

29

00:01:22.570  -->  00:01:27.390
so jdep dash s org.module.global
30

30

00:01:31.240  -->  00:01:36.240
or jdeps dash summary org.module.global,
31

31

00:01:38.570  -->  00:01:40.070
which does the same thing.
32

32

00:01:40.070  -->  00:01:42.590
So note that unlike some of the other alternative options,
33

33

00:01:42.590  -->  00:01:45.910
you saw that dash v has the alternate dash verbose
34

34

00:01:45.910  -->  00:01:47.740
and not dash dash verbose,
35

35

00:01:47.740  -->  00:01:50.400
and here also you can see dash s has the alternative
36

36

00:01:50.400  -->  00:01:52.520
dash summary and not dash dash summary.
37

37

00:01:52.520  -->  00:01:54.110
So keep that in mind.
38

38

00:01:54.110  -->  00:01:57.270
So the summary here is actually a textual representation
39

39

00:01:57.270  -->  00:01:58.648
of the module graph.
40

40

00:01:58.648  -->  00:02:00.880
As you can see, we've got org module global,
41

41

00:02:00.880  -->  00:02:03.170
we've got an arrow pointing to java.base.
42

42

00:02:03.170  -->  00:02:04.327
So that's actually quite an easy graph.
43

43

00:02:04.327  -->  00:02:05.730
I'm gonna swing over the slides
44

44

00:02:05.730  -->  00:02:07.873
and show that in a graph format.
45

45

00:02:09.960  -->  00:02:12.640
So you can interpret a module graph by the way the arrow,
46

46

00:02:12.640  -->  00:02:14.780
called the read edge, is directing you.
47

47

00:02:14.780  -->  00:02:17.380
So in this case, the graph says pictorially
48

48

00:02:17.380  -->  00:02:21.363
org.module.global reads java.base.
49

49

00:02:22.460  -->  00:02:24.030
All right so let's expand our view
50

50

00:02:24.030  -->  00:02:26.550
and include org.module.util.
51

51

00:02:26.550  -->  00:02:29.280
So we got to type jdeps dash summary
52

52

00:02:30.610  -->  00:02:32.200
org.module.global
53

53

00:02:33.940  -->  00:02:35.933
space org.module.util,
54

54

00:02:38.560  -->  00:02:41.490
and you can see we get the output from both modules there.
55

55

00:02:41.490  -->  00:02:44.470
Now in case you forgot what our descriptors looked like,
56

56

00:02:44.470  -->  00:02:45.780
we can run these commands,
57

57

00:02:45.780  -->  00:02:48.440
so java dash dash module
58

58

00:02:48.440  -->  00:02:51.790
dash path. dash dash describe
59

59

00:02:51.790  -->  00:02:52.623
dash module
60

60

00:02:54.860  -->  00:02:57.323
org.module.global.
61

61

00:02:58.931  -->  00:03:02.187
Now the same thing for org.module.util
62

62

00:03:04.310  -->  00:03:05.143
as you can see.
63

63

00:03:06.160  -->  00:03:08.780
So we can see that although there was a directive requires
64

64

00:03:08.780  -->  00:03:11.450
org.module.global transitive,
65

65

00:03:11.450  -->  00:03:13.750
the summary listing of jdeps did not show
66

66

00:03:13.750  -->  00:03:18.333
org.module.global as a dependency of org.module.util.
67

67

00:03:20.770  -->  00:03:22.100
All right let's go over the slides,
68

68

00:03:22.100  -->  00:03:23.540
and I've drawn up the module graph
69

69

00:03:23.540  -->  00:03:26.400
for these two modules, and shown there as you can see.
70

70

00:03:26.400  -->  00:03:30.460
So org.module.util reads java.base,
71

71

00:03:30.460  -->  00:03:34.050
and org.module.global also reads java.base,
72

72

00:03:34.050  -->  00:03:36.280
and note that org.module.util does
73

73

00:03:36.280  -->  00:03:39.720
not read org.module.global.
74

74

00:03:39.720  -->  00:03:42.420
The read edges correspond to the number of elements listed
75

75

00:03:42.420  -->  00:03:44.303
in the jdeps dash s listing.
76

76

00:03:46.460  -->  00:03:48.060
All right so let's expand the graph,
77

77

00:03:48.060  -->  00:03:50.460
jdeps dash summary
78

78

00:03:51.770  -->  00:03:53.160
org.module.global
79

79

00:03:54.810  -->  00:03:56.610
space org.module.util
80

80

00:03:58.610  -->  00:04:00.113
space org.module.base.
81

81

00:04:03.333  -->  00:04:05.383
Now you can see the output showing there.
82

82

00:04:06.610  -->  00:04:08.410
So our graph will get more complicated now
83

83

00:04:08.410  -->  00:04:10.303
because we've got five read edges.
84

84

00:04:13.170  -->  00:04:15.420
So here's what it looks like on-screen.
85

85

00:04:15.420  -->  00:04:16.840
Note that we've got five arrows,
86

86

00:04:16.840  -->  00:04:18.870
which represent our read edges,
87

87

00:04:18.870  -->  00:04:23.220
org.module.base has a dependency on org.module.global
88

88

00:04:23.220  -->  00:04:25.230
although it's not specified in the directive file.
89

89

00:04:25.230  -->  00:04:28.000
This was created by the requires transient directive
90

90

00:04:28.000  -->  00:04:29.703
in org.module.util.
91

91

00:04:31.210  -->  00:04:32.850
Let's try this one more time,
92

92

00:04:32.850  -->  00:04:35.560
and we'll just add the last one, the last module,
93

93

00:04:35.560  -->  00:04:38.893
to the end there, org.module.concrete.
94

94

00:04:41.350  -->  00:04:42.183
There's the output.
95

95

00:04:42.183  -->  00:04:44.220
Let's swing over and check out the graph.
96

96

00:04:46.620  -->  00:04:49.170
This is the full module graph as you can see there.
97

97

00:04:51.580  -->  00:04:52.980
So the exam may have a question
98

98

00:04:52.980  -->  00:04:56.030
about the module graph, but will probably be restricted
99

99

00:04:56.030  -->  00:04:57.760
to two or three modules.
100

100

00:04:57.760  -->  00:04:59.590
Read the descriptors carefully,
101

101

00:04:59.590  -->  00:05:03.250
looking for qualified exports and transitive dependencies.
102

102

00:05:03.250  -->  00:05:05.630
These actually reduce the dependencies.
103

103

00:05:05.630  -->  00:05:08.260
The java.base module is an implicit dependency
104

104

00:05:08.260  -->  00:05:09.610
for every module.
105

105

00:05:09.610  -->  00:05:11.770
If you see a module graph with any module
106

106

00:05:11.770  -->  00:05:14.330
that does not read java.base,
107

107

00:05:14.330  -->  00:05:16.140
it's not an accurate graph,
108

108

00:05:16.140  -->  00:05:18.240
and if you see a module graph with a node
109

109

00:05:18.240  -->  00:05:21.793
that is a package, that is not a valid module graph.
110

110

00:05:22.790  -->  00:05:23.690
All right so moving on next,
111

111

00:05:23.690  -->  00:05:25.550
you'll see a few quiz questions,
112

112

00:05:25.550  -->  00:05:28.300
and then we'll head into the conclusion for the course.
