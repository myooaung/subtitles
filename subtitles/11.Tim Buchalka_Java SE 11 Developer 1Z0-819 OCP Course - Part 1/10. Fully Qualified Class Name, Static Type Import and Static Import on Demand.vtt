WEBVTT
1
1

00:00:05.389  -->  00:00:07.580
<v ->Right, the next two input statements I want to talk about</v>
2

2

00:00:07.580  -->  00:00:10.060
are the single-static-import declaration
3

3

00:00:10.060  -->  00:00:13.010
and a static-import-on-demand declaration.
4

4

00:00:13.010  -->  00:00:15.520
Now both of these were introduced in Java 7,
5

5

00:00:15.520  -->  00:00:17.780
and are specific only to static methods
6

6

00:00:17.780  -->  00:00:20.270
and static class variables.
7

7

00:00:20.270  -->  00:00:21.790
Now I'm gonna discuss static methods
8

8

00:00:21.790  -->  00:00:24.360
and static class variables in future videos
9

9

00:00:24.360  -->  00:00:26.910
in detail in the course, but for our purposes here,
10

10

00:00:26.910  -->  00:00:28.570
we're gonna use the static class variables
11

11

00:00:28.570  -->  00:00:31.873
defined on the java.lang.Math class.
12

12

00:00:32.800  -->  00:00:34.920
So, well we need to create a new class,
13

13

00:00:34.920  -->  00:00:36.913
we're gonna call it test import static.
14

14

00:00:40.045  -->  00:00:42.295
(clicking)
15

15

00:00:43.840  -->  00:00:44.988
Paste some coding.
16

16

00:00:44.988  -->  00:00:46.250
(clicking)
17

17

00:00:46.250  -->  00:00:49.840
Firstly, we're using PI, which is a static variable,
18

18

00:00:49.840  -->  00:00:53.090
on java.lang.Math to calculate the circumference,
19

19

00:00:53.090  -->  00:00:54.710
and we're also using a square root method
20

20

00:00:54.710  -->  00:00:57.490
defined as a static method on java.lang.Math
21

21

00:00:57.490  -->  00:01:00.250
to get the square root of 81.
22

22

00:01:00.250  -->  00:01:01.659
So if we run this code.
23

23

00:01:01.659  -->  00:01:03.909
(clicking)
24

24

00:01:05.670  -->  00:01:07.250
You can see the apple
25

25

00:01:07.250  -->  00:01:09.870
All right, so what we're gonna do now is change the code
26

26

00:01:09.870  -->  00:01:12.290
to use single static imports.
27

27

00:01:12.290  -->  00:01:14.190
Right, first I'm goin' to add the imports,
28

28

00:01:14.190  -->  00:01:15.950
at the top of the file,
29

29

00:01:15.950  -->  00:01:17.353
then as a reminder we put statements,
30

30

00:01:17.353  -->  00:01:20.790
must be the first line of code after a package statement
31

31

00:01:20.790  -->  00:01:22.710
if a package statement exists,
32

32

00:01:22.710  -->  00:01:24.240
excluding white space and comments,
33

33

00:01:24.240  -->  00:01:27.906
so I'm gonna paste in those two declarations there,
34

34

00:01:27.906  -->  00:01:30.330
on lines seven and 10.
35

35

00:01:30.330  -->  00:01:31.163
And now that I've done that,
36

36

00:01:31.163  -->  00:01:33.420
we need to change some code here
37

37

00:01:33.420  -->  00:01:36.360
to use the static variable without the class reference.
38

38

00:01:36.360  -->  00:01:38.440
So firstly, I've got java.lang.Math.PI,
39

39

00:01:38.440  -->  00:01:41.190
we're gonna change that purely to PI.
40

40

00:01:41.190  -->  00:01:42.410
(clicking)
41

41

00:01:42.410  -->  00:01:44.350
You can see our import static becomes live
42

42

00:01:44.350  -->  00:01:47.622
on line seven, we can do the same per square root.
43

43

00:01:47.622  -->  00:01:50.230
(clicking)
44

44

00:01:50.230  -->  00:01:52.330
And both imports are now being used, as you can see.
45

45

00:01:52.330  -->  00:01:53.163
And we're not done (mumbles)
46

46

00:01:53.163  -->  00:01:55.580
using fully qualified class names.
47

47

00:01:55.580  -->  00:01:56.890
And the other thing we could do here
48

48

00:01:56.890  -->  00:01:59.420
is we could replace both import statements
49

49

00:01:59.420  -->  00:02:02.410
with a single-static-import-on-demand declaration,
50

50

00:02:02.410  -->  00:02:04.380
let's have a go at doing that.
51

51

00:02:04.380  -->  00:02:06.733
What we're gonna do is comment these out, temporarily.
52

52

00:02:06.733  -->  00:02:07.870
(clicking)
53

53

00:02:07.870  -->  00:02:10.700
Obviously, whatever is there now will come back in,
54

54

00:02:10.700  -->  00:02:12.010
paste in some code,
55

55

00:02:12.010  -->  00:02:14.730
and there's our static import on demand declaration,
56

56

00:02:14.730  -->  00:02:16.890
java.lang.Math.star, as you can see.
57

57

00:02:16.890  -->  00:02:18.903
Know your rows, you can learn the code,
58

58

00:02:20.260  -->  00:02:21.760
everything works as it should.
59

59

00:02:22.694  -->  00:02:24.150
(mumbles) I'll comment that out again,
60

60

00:02:24.150  -->  00:02:25.640
just so you got it in the source file,
61

61

00:02:25.640  -->  00:02:26.678
if you are downloading this.
62

62

00:02:26.678  -->  00:02:29.290
(clicking)
63

63

00:02:29.290  -->  00:02:30.210
And I'll leave the original
64

64

00:02:30.210  -->  00:02:31.840
single-static-import declarations
65

65

00:02:31.840  -->  00:02:33.783
for PI and square root in the file.
66

66

00:02:36.370  -->  00:02:38.750
So to summarise the last three videos,
67

67

00:02:38.750  -->  00:02:40.820
the package statement is used to group classes
68

68

00:02:40.820  -->  00:02:44.680
into a logical set of classes, that have some commonality,
69

69

00:02:44.680  -->  00:02:48.260
only one package can be defined in a .java source file.
70

70

00:02:48.260  -->  00:02:50.550
The package statement must be the first line of code,
71

71

00:02:50.550  -->  00:02:54.060
excluding comments, empty lines, white space in general.
72

72

00:02:54.060  -->  00:02:56.090
Not using a package statement makes the class,
73

73

00:02:56.090  -->  00:02:59.453
or type that you define, belong to the unnamed package.
74

74

00:03:01.530  -->  00:03:03.490
To have the compiler create class files
75

75

00:03:03.490  -->  00:03:06.700
in exploded directories, that represent your package names,
76

76

00:03:06.700  -->  00:03:10.210
use java c dash d, the directory foo.java,
77

77

00:03:10.210  -->  00:03:11.750
where directory represents the directory
78

78

00:03:11.750  -->  00:03:14.160
you want the package directories to be created,
79

79

00:03:14.160  -->  00:03:16.080
not even a dot, or foo stop,
80

80

00:03:16.080  -->  00:03:18.120
means current working directory.
81

81

00:03:18.120  -->  00:03:19.661
A class file does not have to reside
82

82

00:03:19.661  -->  00:03:21.200
in a directory structure,
83

83

00:03:21.200  -->  00:03:23.380
that represents its package structure.
84

84

00:03:23.380  -->  00:03:25.330
To reference a class in a package,
85

85

00:03:25.330  -->  00:03:27.990
you must use a fully qualified class name
86

86

00:03:27.990  -->  00:03:31.553
or include an import statement for the package class name.
87

87

00:03:33.720  -->  00:03:35.960
Import statements are used to inform the compiler,
88

88

00:03:35.960  -->  00:03:37.965
where the classes outside of the current package
89

89

00:03:37.965  -->  00:03:41.300
are defined while allowing easier readability.
90

90

00:03:41.300  -->  00:03:42.390
Now you could rewrite all code
91

91

00:03:42.390  -->  00:03:43.680
without a single import statement,
92

92

00:03:43.680  -->  00:03:45.880
using just fully qualified class names,
93

93

00:03:45.880  -->  00:03:48.260
but I think you would agree it's much harder to read.
94

94

00:03:48.260  -->  00:03:51.010
You can have zero to many import statements.
95

95

00:03:51.010  -->  00:03:53.510
Import statements must follow any package statement,
96

96

00:03:53.510  -->  00:03:55.340
and precede any other code,
97

97

00:03:55.340  -->  00:03:58.173
excluding comments and white space in general.
98

98

00:04:00.200  -->  00:04:02.190
And import statements are required if not using
99

99

00:04:02.190  -->  00:04:05.610
a fully qualified class name, such as java.util.ArrayList.
100

100

00:04:05.610  -->  00:04:06.640
So in other words, you can't just use
101

101

00:04:06.640  -->  00:04:08.356
the simplified ArrayList as a type
102

102

00:04:08.356  -->  00:04:11.320
if you do not have a valid import statement for it.
103

103

00:04:11.320  -->  00:04:13.440
Java.lang.classname is implicit
104

104

00:04:13.440  -->  00:04:15.690
whenever you use any java.lang class.
105

105

00:04:15.690  -->  00:04:19.073
And we saw the example of string, used in these videos.
106

106

00:04:19.073  -->  00:04:20.760
Now, the other two import statements,
107

107

00:04:20.760  -->  00:04:22.530
prefixed with import static,
108

108

00:04:22.530  -->  00:04:24.410
actually don't import classes at all,
109

109

00:04:24.410  -->  00:04:28.050
but rather, static class attributes or methods.
110

110

00:04:28.050  -->  00:04:30.470
Right, the next video we'll review some (mumbles) aspects
111

111

00:04:30.470  -->  00:04:32.530
for running a simple java programme,
112

112

00:04:32.530  -->  00:04:34.027
and package an import statements.
113

113

00:04:34.027  -->  00:04:35.623
See you in the next video.
