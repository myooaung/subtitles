WEBVTT
0
1
00:00:05.370 --> 00:00:07.280
<v ->So let's talk about defining a structure</v>
1

2
00:00:07.280 --> 00:00:08.950
of a Java class.
2

3
00:00:08.950 --> 00:00:11.780
Since an object is an instantiation of a class
3

4
00:00:11.780 --> 00:00:13.270
it seems appropriate to discuss
4

5
00:00:13.270 --> 00:00:15.310
Java's class structure here.
5

6
00:00:15.310 --> 00:00:16.790
We've discussed some of this previously
6

7
00:00:16.790 --> 00:00:18.870
in the video of packages and import statements
7

8
00:00:18.870 --> 00:00:19.993
earlier in the course.
8

9
00:00:22.070 --> 00:00:23.330
So you know that a source file
9

10
00:00:23.330 --> 00:00:25.470
consists of the following sections.
10

11
00:00:25.470 --> 00:00:27.410
1 or zero package statements.
11

12
00:00:27.410 --> 00:00:29.350
This must be the first line of source code
12

13
00:00:29.350 --> 00:00:31.450
Excluding comments and white space.
13

14
00:00:31.450 --> 00:00:34.000
Zero to many import statements
14

15
00:00:34.000 --> 00:00:35.760
These statements follow the package statement
15

16
00:00:35.760 --> 00:00:38.830
if one exists and precede any other source code.
16

17
00:00:38.830 --> 00:00:42.350
You already know that import.java.ling.* is implied
17

18
00:00:42.350 --> 00:00:45.120
if you are using any classes in the java.lang package
18

19
00:00:46.870 --> 00:00:49.000
If you are creating a class with the same name
19

20
00:00:49.000 --> 00:00:51.540
as any class in the java.lang package
20

21
00:00:51.540 --> 00:00:54.070
you'll need to either add a single import statement
21

22
00:00:54.070 --> 00:00:55.730
with a name conflicts or use
22

23
00:00:55.730 --> 00:00:57.290
a Fully Qualified Class Name
23

24
00:00:57.290 --> 00:00:59.060
on the java.lang class.
24

25
00:00:59.060 --> 00:01:00.460
And I've shown an example of this
25

26
00:01:00.460 --> 00:01:02.320
previously in the course.
26

27
00:01:02.320 --> 00:01:03.860
And the source file can also
27

28
00:01:03.860 --> 00:01:06.630
consist of one or many type references
28

29
00:01:06.630 --> 00:01:10.110
where type is class, interface or an enum.
29

30
00:01:10.110 --> 00:01:11.660
Only one type reference can be public
30

31
00:01:11.660 --> 00:01:13.260
in a single source file
31

32
00:01:13.260 --> 00:01:15.350
with the exception of nested reference types
32

33
00:01:15.350 --> 00:01:16.850
which I'll discuss later.
33

34
00:01:16.850 --> 00:01:18.010
The source file name must match
34

35
00:01:18.010 --> 00:01:20.833
the outermost public types reference name.
35

36
00:01:22.720 --> 00:01:23.553
So I'm going to talk about
36

37
00:01:23.553 --> 00:01:25.990
interfaces and enum structures later.
37

38
00:01:25.990 --> 00:01:26.860
For this section,
38

39
00:01:26.860 --> 00:01:29.610
we're going to look at the class type reference itself.
39

40
00:01:30.860 --> 00:01:33.260
A java class type consists of two sections,
40

41
00:01:33.260 --> 00:01:36.430
the declaration and the class body block.
41

42
00:01:36.430 --> 00:01:38.110
Blocks are contained in bracket sets,
42

43
00:01:38.110 --> 00:01:39.810
left and right curly braces.
43

44
00:01:39.810 --> 00:01:41.720
The class declaration requires
44

45
00:01:41.720 --> 00:01:43.470
only the reserved word "class",
45

46
00:01:43.470 --> 00:01:44.700
and the Typeidentifier,
46

47
00:01:44.700 --> 00:01:46.930
in other words the name of the class.
47

48
00:01:46.930 --> 00:01:48.940
So basically the format here is we've got a class,
48

49
00:01:48.940 --> 00:01:52.060
modifier, class, Typeidentifier,
49

50
00:01:52.060 --> 00:01:55.600
TypeParameters, Superclass, Superinterfaces.
50

51
00:01:55.600 --> 00:01:59.010
The absolute minimal class declaration is shown.
51

52
00:01:59.010 --> 00:02:02.633
So we've got class, test, left and right curly braces.
52

53
00:02:04.810 --> 00:02:06.180
So let's talk about each of the sections
53

54
00:02:06.180 --> 00:02:07.350
of the Declaration.
54

55
00:02:07.350 --> 00:02:09.830
We're going to be discussing most of the implementations
55

56
00:02:09.830 --> 00:02:11.320
in future videos.
56

57
00:02:11.320 --> 00:02:13.780
So the class modifier, while modifiers declare
57

58
00:02:13.780 --> 00:02:15.590
the accessibility of the class as well
58

59
00:02:15.590 --> 00:02:17.830
as additional information about a class
59

60
00:02:17.830 --> 00:02:20.170
abstract, static, final.
60

61
00:02:20.170 --> 00:02:23.020
TypeParameters, a class is generic if it declares
61

62
00:02:23.020 --> 00:02:25.040
one or more type variables.
62

63
00:02:25.040 --> 00:02:27.620
This will not be on the first part of the exam.
63

64
00:02:27.620 --> 00:02:30.380
Superclass. This section is optional
64

65
00:02:30.380 --> 00:02:32.630
The extends clause in a normal class declaration
65

66
00:02:32.630 --> 00:02:36.217
specifies that the direct superclass of the current class
66

67
00:02:36.217 --> 00:02:39.220
And superinterfaces, this section is also optional
67

68
00:02:39.220 --> 00:02:41.100
the implements clause in a class declaration
68

69
00:02:41.100 --> 00:02:43.590
lists the name, so the interface is that a direct
69

70
00:02:43.590 --> 00:02:46.423
Superinterfaces of the class being declared.
70

71
00:02:48.280 --> 00:02:50.270
So here I want to talk about the class modifier
71

72
00:02:50.270 --> 00:02:52.590
sections, structures and options.
72

73
00:02:52.590 --> 00:02:55.660
It's a compile-time error if the same keyword
73

74
00:02:55.660 --> 00:02:57.830
appears more than once as a modifier
74

75
00:02:57.830 --> 00:02:59.610
for a class declaration
75

76
00:02:59.610 --> 00:03:01.350
or if a class declaration has more than one
76

77
00:03:01.350 --> 00:03:02.950
of the access modifiers
77

78
00:03:02.950 --> 00:03:05.270
public, protected and private.
78

79
00:03:05.270 --> 00:03:07.000
The class modifier section can declare
79

80
00:03:07.000 --> 00:03:09.970
zero or 1 access modifier.
80

81
00:03:09.970 --> 00:03:12.200
Note if no modifier is specified
81

82
00:03:12.200 --> 00:03:13.960
it is by default package access
82

83
00:03:13.960 --> 00:03:15.653
also known as package-private.
83

84
00:03:17.200 --> 00:03:18.740
So we'll discuss each of these and their
84

85
00:03:18.740 --> 00:03:21.710
declarations implications in a later section
85

86
00:03:21.710 --> 00:03:23.700
We've got public, protected
86

87
00:03:23.700 --> 00:03:25.000
and only a nested class can be protected
87

88
00:03:25.000 --> 00:03:27.683
or private, only a nested class can be private.
88

89
00:03:29.170 --> 00:03:31.500
In addition, the class modifier section can declare
89

90
00:03:31.500 --> 00:03:34.180
zero or several of the following modifiers:
90

91
00:03:34.180 --> 00:03:36.780
abstract, declaring a class abstract means
91

92
00:03:36.780 --> 00:03:39.320
it has one or more methods that are declared abstract.
92

93
00:03:39.320 --> 00:03:42.280
It expects a sub-class to implement fully
93

94
00:03:42.280 --> 00:03:43.920
the abstract methods.
94

95
00:03:43.920 --> 00:03:47.150
Static. The static modifier pertains only to member
95

96
00:03:47.150 --> 00:03:49.060
classes and not to top level,
96

97
00:03:49.060 --> 00:03:51.193
or local or anonymous classes.
97

98
00:03:52.350 --> 00:03:55.480
Final, declares that a class's definition is complete
98

99
00:03:55.480 --> 00:03:58.310
and no subclasses are desired or required.
99

100
00:03:58.310 --> 00:04:00.250
A final class can not have its name
100

101
00:04:00.250 --> 00:04:02.670
in an extends declaration of another class.
101

102
00:04:02.670 --> 00:04:05.000
And finally, strictfp.
102

103
00:04:05.000 --> 00:04:07.600
The affect of a strictfp modifier is to restrict
103

104
00:04:07.600 --> 00:04:10.510
floating-point calculations, to ensure portability
104

105
00:04:10.510 --> 00:04:11.623
across platforms.
105

106
00:04:13.080 --> 00:04:15.160
So here's some valid declarations.
106

107
00:04:15.160 --> 00:04:18.660
Public class test. Java file must be Test.java
107

108
00:04:18.660 --> 00:04:20.320
if this is your declaration.
108

109
00:04:20.320 --> 00:04:24.060
Public abstract class Test. Declaring a class abstract
109

110
00:04:24.060 --> 00:04:26.810
means you can not create an object directly from it.
110

111
00:04:26.810 --> 00:04:29.800
Static class Test. You can only declare a class static
111

112
00:04:29.800 --> 00:04:33.090
if it is a member of another class.
112

113
00:04:33.090 --> 00:04:35.940
And public final class Test. A final class
113

114
00:04:35.940 --> 00:04:37.410
can not be an extends clause;
114

115
00:04:37.410 --> 00:04:38.943
it can not have a subclass.
115

116
00:04:40.750 --> 00:04:43.130
And here's some invalid declaration examples.
116

117
00:04:43.130 --> 00:04:47.100
Public public class Test. You cannot duplicate modifiers.
117

118
00:04:47.100 --> 00:04:49.520
Private protected class Test. You can not have
118

119
00:04:49.520 --> 00:04:51.810
more than 1 access modifier declared.
119

120
00:04:51.810 --> 00:04:53.850
And final abstract class Test.
120

121
00:04:53.850 --> 00:04:57.100
Final and abstract are mutually exclusive declarations.
121

122
00:04:57.100 --> 00:04:59.640
Abstract requires a class to extend and complete it,
122

123
00:04:59.640 --> 00:05:02.853
whereas Final states that no class can extend it.
123

124
00:05:04.360 --> 00:05:05.540
Alright, let's finish the video here
124

125
00:05:05.540 --> 00:05:06.860
and in the next one we'll continue on
125

126
00:05:06.860 --> 00:05:09.560
and we'll actually view some declaration examples
126

127
00:05:09.560 --> 00:05:12.420
which have modifiers and or extends implements declarations
127

128
00:05:12.420 --> 00:05:14.320
that are valid and invalid.
128

129
00:05:14.320 --> 00:05:15.620
See you in the next video.
