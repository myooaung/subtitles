WEBVTT
1
1

00:00:04.610  -->  00:00:05.490
<v Instructor>Right, so we talked a lot</v>
2

2

00:00:05.490  -->  00:00:07.480
about polymorphism in the last video
3

3

00:00:07.480  -->  00:00:09.940
and overridden and overloaded methods.
4

4

00:00:09.940  -->  00:00:12.500
Let's now see what this means in code.
5

5

00:00:12.500  -->  00:00:14.420
So I've created a new project here called
6

6

00:00:14.420  -->  00:00:16.840
polymorphism, and I'm going to create a class
7

7

00:00:16.840  -->  00:00:19.673
in here, I'm going to call it override example.
8

8

00:00:27.340  -->  00:00:28.173
Now as you can see,
9

9

00:00:28.173  -->  00:00:30.090
this code has a base class,
10

10

00:00:30.090  -->  00:00:33.371
an ExtendedClass, which extends the BaseClass,
11

11

00:00:33.371  -->  00:00:34.730
and our public class OverrideExample
12

12

00:00:34.730  -->  00:00:36.060
at the bottom there, just creates an
13

13

00:00:36.060  -->  00:00:38.990
object of ExtendedClass, then executes a method.
14

14

00:00:38.990  -->  00:00:40.390
So this is going to be the starting point
15

15

00:00:40.390  -->  00:00:41.530
for our discussion.
16

16

00:00:41.530  -->  00:00:42.513
So we'll run this,
17

17

00:00:44.591  -->  00:00:46.633
BaseClass executing a good method.
18

18

00:00:49.440  -->  00:00:51.240
So maybe the goodMethod is good,
19

19

00:00:51.240  -->  00:00:52.890
and the derived class is happy with it,
20

20

00:00:52.890  -->  00:00:54.260
or maybe the derived class has
21

21

00:00:54.260  -->  00:00:55.730
a better way to do it,
22

22

00:00:55.730  -->  00:00:57.310
or they want to add additional stuff
23

23

00:00:57.310  -->  00:00:59.330
and extend the code in the method.
24

24

00:00:59.330  -->  00:01:02.810
The way for ExtendedClass to do this is by overriding.
25

25

00:01:02.810  -->  00:01:05.280
An overridden method in ExtendedClass
26

26

00:01:05.280  -->  00:01:06.960
must have the same signature,
27

27

00:01:06.960  -->  00:01:08.240
the same return type,
28

28

00:01:08.240  -->  00:01:10.120
and it's access modifier must not
29

29

00:01:10.120  -->  00:01:11.880
be more restrictive.
30

30

00:01:11.880  -->  00:01:12.713
So with that in mind,
31

31

00:01:12.713  -->  00:01:15.250
let's add some code to the ExtendedClass body,
32

32

00:01:15.250  -->  00:01:16.670
and come down here and paste that code
33

33

00:01:16.670  -->  00:01:18.320
in the ExtendedClass.
34

34

00:01:18.320  -->  00:01:19.390
So if you run this now,
35

35

00:01:19.390  -->  00:01:21.760
given what we've set up in the main method there,
36

36

00:01:21.760  -->  00:01:25.850
run the code, ExtendedClass executing a better method.
37

37

00:01:25.850  -->  00:01:27.380
So clearly, we're now using
38

38

00:01:27.380  -->  00:01:30.110
the goodMethod from ExtendedClass.
39

39

00:01:30.110  -->  00:01:31.780
So that's overriding in a nutshell.
40

40

00:01:31.780  -->  00:01:33.210
You can extend the functionality
41

41

00:01:33.210  -->  00:01:34.960
of a base class's method
42

42

00:01:34.960  -->  00:01:36.630
in the extended class instead
43

43

00:01:36.630  -->  00:01:38.460
of completely bypassing it,
44

44

00:01:38.460  -->  00:01:41.220
by calling the parent method using super.
45

45

00:01:41.220  -->  00:01:42.220
So I'm just going to copy over
46

46

00:01:42.220  -->  00:01:44.540
the goodMethod we defined in the ExtendedClass
47

47

00:01:44.540  -->  00:01:45.373
with a new one.
48

48

00:01:46.490  -->  00:01:48.180
You can see we're now using super
49

49

00:01:48.180  -->  00:01:49.620
to call goodMethod,
50

50

00:01:49.620  -->  00:01:50.664
and basically that's going to call
51

51

00:01:50.664  -->  00:01:52.850
goodMethod from the base class.
52

52

00:01:52.850  -->  00:01:54.083
Execute the code now,
53

53

00:01:56.280  -->  00:01:57.330
and you can see the following output:
54

54

00:01:57.330  -->  00:01:58.500
we've got both outputs now
55

55

00:01:58.500  -->  00:01:59.610
from both goodMethod's,
56

56

00:01:59.610  -->  00:02:01.681
the first one in ExtendedClass
57

57

00:02:01.681  -->  00:02:02.850
and the second one we've got
58

58

00:02:02.850  -->  00:02:05.620
the output from the BaseClass's goodMethod.
59

59

00:02:05.620  -->  00:02:06.590
Well an actual fact obviously
60

60

00:02:06.590  -->  00:02:08.923
the BaseClass was first because of the call
61

61

00:02:08.923  -->  00:02:11.860 line:15% 
on line 19 invoked that before the output line
62

62

00:02:11.860  -->  00:02:12.853
on line 17.
63

63

00:02:13.820  -->  00:02:14.770
All right, so let's continue on with this,
64

64

00:02:14.770  -->  00:02:17.160
let's add two more methods to each class.
65

65

00:02:17.160  -->  00:02:19.150
So I've got two methods here I'm going to paste in,
66

66

00:02:19.150  -->  00:02:21.550
and we're going to add these first to BaseClass.
67

67

00:02:23.860  -->  00:02:26.180
See we've got printInformation and getInformation,
68

68

00:02:26.180  -->  00:02:28.290
and then I'm going to do the same for
69

69

00:02:28.290  -->  00:02:31.040
our ExtendedClass, I'm going to paste in those methods
70

70

00:02:32.550  -->  00:02:33.990
which are pretty much the same other than the fact
71

71

00:02:33.990  -->  00:02:35.810
that it's outputting ExtendedClass
72

72

00:02:35.810  -->  00:02:38.270
instead of BaseClass this time.
73

73

00:02:38.270  -->  00:02:40.520
So we know where the methods are being called from
74

74

00:02:40.520  -->  00:02:42.660
or we can see the methods being called.
75

75

00:02:42.660  -->  00:02:44.220
Now look at these two methods
76

76

00:02:44.220  -->  00:02:45.780
I've added closely.
77

77

00:02:45.780  -->  00:02:48.370
Are they both overridden methods?
78

78

00:02:48.370  -->  00:02:49.500
Now most likely,
79

79

00:02:49.500  -->  00:02:52.110
your IntelliJ ID is probably illuminated you
80

80

00:02:52.110  -->  00:02:53.610
if you look at it.
81

81

00:02:53.610  -->  00:02:55.380
The printInformation method is not
82

82

00:02:55.380  -->  00:02:56.760
an overridden method,
83

83

00:02:56.760  -->  00:02:59.230
because the parameter type didn't exactly match.
84

84

00:02:59.230  -->  00:03:00.750
And we can see that there,
85

85

00:03:00.750  -->  00:03:03.100
the hint there is that it's never used.
86

86

00:03:03.100  -->  00:03:04.060
So I've got a string there
87

87

00:03:04.060  -->  00:03:06.473
defined as a parameter on line 28,
88

88

00:03:08.040  -->  00:03:10.900
and of course it's a CharSequence on line 12,
89

89

00:03:10.900  -->  00:03:12.397
for the BaseClass.
90

90

00:03:13.320  -->  00:03:14.490
So again, confirming here
91

91

00:03:14.490  -->  00:03:16.140
that printInformation,
92

92

00:03:16.140  -->  00:03:18.300
that method in ExtendedClass is not
93

93

00:03:18.300  -->  00:03:20.700
an overridden method because the parameter type
94

94

00:03:20.700  -->  00:03:22.090
didn't exactly match.
95

95

00:03:22.090  -->  00:03:24.280
You can use subtypes in the return types
96

96

00:03:24.280  -->  00:03:26.740
of overridden methods, as shown in this example,
97

97

00:03:26.740  -->  00:03:28.800
but not in the parameter lists.
98

98

00:03:28.800  -->  00:03:30.600
You don't get an error on the printInformation
99

99

00:03:30.600  -->  00:03:32.360
method in ExtendedClass because
100

100

00:03:32.360  -->  00:03:34.791
it's a valid overloaded method.
101

101

00:03:34.791  -->  00:03:36.760
Right, so let's add some code to invoke those
102

102

00:03:36.760  -->  00:03:39.020
methods in our main class.
103

103

00:03:39.020  -->  00:03:40.720
I'm going to add this code down here.
104

104

00:03:40.720  -->  00:03:42.443
I'm going to execute the code.
105

105

00:03:45.241  -->  00:03:47.420
So the call without the cast,
106

106

00:03:47.420  -->  00:03:49.340
I'll just bring up the code again.
107

107

00:03:49.340  -->  00:03:50.640
So again, the call without the cast
108

108

00:03:50.640  -->  00:03:54.010
executed the ExtendedClass's overloaded method,
109

109

00:03:54.010  -->  00:03:55.810
which accepted a string parameter
110

110

00:03:55.810  -->  00:03:58.840
which was the type returned from the ExtendedClass's
111

111

00:03:58.840  -->  00:04:01.430
getInformation overridden method.
112

112

00:04:01.430  -->  00:04:02.380
Now in the second call,
113

113

00:04:02.380  -->  00:04:04.370
we cast a string returned
114

114

00:04:04.370  -->  00:04:07.370
from the getInformation to a CharSequence,
115

115

00:04:07.370  -->  00:04:09.570
which executed the printInformation method
116

116

00:04:09.570  -->  00:04:11.630
on BaseClass this time.
117

117

00:04:11.630  -->  00:04:14.630
So we go back up to our ExtendedClass
118

118

00:04:14.630  -->  00:04:16.560
and let's change the printInformation
119

119

00:04:16.560  -->  00:04:18.690
method there, we're going to change it now
120

120

00:04:18.690  -->  00:04:20.463
so it's a valid overridden method.
121

121

00:04:21.500  -->  00:04:22.333
So now that we've done that,
122

122

00:04:22.333  -->  00:04:24.080
we scroll down and have a look,
123

123

00:04:24.080  -->  00:04:25.760
and then here, Casting e.getInformation
124

124

00:04:25.760  -->  00:04:28.240
to CharSequence is redundant.
125

125

00:04:28.240  -->  00:04:30.020
So it's just purely a warning at this point
126

126

00:04:30.020  -->  00:04:31.410
because we've made that change and we've
127

127

00:04:31.410  -->  00:04:34.100
got a valid overridden method.
128

128

00:04:34.100  -->  00:04:35.300
And if you run the code,
129

129

00:04:37.135  -->  00:04:38.720
you can see in fact ExtendedClass
130

130

00:04:38.720  -->  00:04:41.970
printInformation method was executed twice.
131

131

00:04:41.970  -->  00:04:43.700
Now if you go back to that same method,
132

132

00:04:43.700  -->  00:04:46.890
printInformation, if we change CharSequence S,
133

133

00:04:46.890  -->  00:04:49.423
the name of the variable to string,
134

134

00:04:51.780  -->  00:04:53.280
and change the output to the same thing,
135

135

00:04:53.280  -->  00:04:54.530
we'll run the code again,
136

136

00:04:56.210  -->  00:04:58.820
you saw the code compiled and ran just fine,
137

137

00:04:58.820  -->  00:05:00.690
and that proves that the parameter name's
138

138

00:05:00.690  -->  00:05:03.070
not important here, only the type.
139

139

00:05:03.070  -->  00:05:04.740
So I've already talked about access modifiers
140

140

00:05:04.740  -->  00:05:07.000
on overridden methods in a previous video,
141

141

00:05:07.000  -->  00:05:09.010
but I'm going to show another example here.
142

142

00:05:09.010  -->  00:05:11.060
If we go back to our ExtendedClass's
143

143

00:05:11.060  -->  00:05:13.180
printInformation method and try and change
144

144

00:05:13.180  -->  00:05:15.453
the access from public to private,
145

145

00:05:18.020  -->  00:05:19.060
we've now got an error,
146

146

00:05:19.060  -->  00:05:21.520
we can see the error is that it clashes
147

147

00:05:21.520  -->  00:05:23.240
with the same method in BaseClass
148

148

00:05:23.240  -->  00:05:25.610
attempting to assign weaker access privileges,
149

149

00:05:25.610  -->  00:05:27.530
private in this case.
150

150

00:05:27.530  -->  00:05:30.241
Right, so I'm just going to undo that change.
151

151

00:05:30.241  -->  00:05:32.260
Now this section wouldn't be complete
152

152

00:05:32.260  -->  00:05:34.080
unless I talked about the throws clause
153

153

00:05:34.080  -->  00:05:35.860
of overridden method.
154

154

00:05:35.860  -->  00:05:37.450
We'll be talking about exception handling
155

155

00:05:37.450  -->  00:05:40.110
in a future video, but let's just change the code
156

156

00:05:40.110  -->  00:05:41.990
now to include a throws clause
157

157

00:05:41.990  -->  00:05:44.290
in one of our methods in the BaseClass.
158

158

00:05:44.290  -->  00:05:46.780
I'm going to go back up to our BaseClass at the top,
159

159

00:05:46.780  -->  00:05:48.470
and let's do it on the goodMethod.
160

160

00:05:48.470  -->  00:05:50.130
So I'm going to come up here, I'm going to do
161

161

00:05:50.130  -->  00:05:51.983
a throws IOException.
162

162

00:05:55.228  -->  00:05:57.170
If we scroll down now to the ExtendedClass,
163

163

00:05:57.170  -->  00:05:59.500
we can see that the goodMethod is still considered
164

164

00:05:59.500  -->  00:06:00.720
an overridden method,
165

165

00:06:00.720  -->  00:06:02.360
but we've now got a compiler error on the
166

166

00:06:02.360  -->  00:06:04.390
call to super.goodMethod.
167

167

00:06:04.390  -->  00:06:07.450
So I'm going to remove the super call for now.
168

168

00:06:07.450  -->  00:06:08.370
The other thing I'm going to do
169

169

00:06:08.370  -->  00:06:10.350
is add a throws clause here.
170

170

00:06:10.350  -->  00:06:12.183
Throws FileNotFoundException,
171

171

00:06:17.430  -->  00:06:19.650
and because I haven't got autoimports on,
172

172

00:06:19.650  -->  00:06:20.963
I'm going to accept that,
173

173

00:06:22.300  -->  00:06:24.910
and that, you can see at the top of the screen there,
174

174

00:06:24.910  -->  00:06:26.230
FileNotFoundException's been added.
175

175

00:06:26.230  -->  00:06:28.967
We've got both of those exceptions now.
176

176

00:06:28.967  -->  00:06:30.300
So we can see that doing that,
177

177

00:06:30.300  -->  00:06:32.430
we've got goodMethod in BaseClass
178

178

00:06:32.430  -->  00:06:34.210
throwing an IOException,
179

179

00:06:34.210  -->  00:06:36.680
but goodMethod throwing a FileNotFoundException
180

180

00:06:36.680  -->  00:06:38.950
in the ExtendedClass's goodMethod.
181

181

00:06:38.950  -->  00:06:40.010
This just confirms that the method
182

182

00:06:40.010  -->  00:06:43.120
still meets the criteria for an overridden method.
183

183

00:06:43.120  -->  00:06:44.210
So why's that?
184

184

00:06:44.210  -->  00:06:45.620
It's because your overridden method can
185

185

00:06:45.620  -->  00:06:48.030
eliminate the throws clause completely
186

186

00:06:48.030  -->  00:06:49.650
or it can declare a throws clause
187

187

00:06:49.650  -->  00:06:51.350
with an exception type that's the same
188

188

00:06:51.350  -->  00:06:53.490
or a more specific file type.
189

189

00:06:53.490  -->  00:06:55.657
Now we have got an error down here,
190

190

00:06:55.657  -->  00:06:56.710
and this error's got to do with the fact
191

191

00:06:56.710  -->  00:06:57.910
we're not actually doing anything
192

192

00:06:57.910  -->  00:06:59.470
with the exception, so we'll ignore that error.
193

193

00:06:59.470  -->  00:07:01.680
But the other code here hasn't got
194

194

00:07:01.680  -->  00:07:03.030
any compile errors.
195

195

00:07:03.030  -->  00:07:05.996
So let's change this on the ExtendedClass.
196

196

00:07:05.996  -->  00:07:08.310
Instead of using a FileNotFoundException,
197

197

00:07:08.310  -->  00:07:11.080
let's change that to just an exception.
198

198

00:07:11.080  -->  00:07:12.810
Hover over it, and you can see we've got
199

199

00:07:12.810  -->  00:07:15.660
a compile error on the declaration line of the method.
200

200

00:07:15.660  -->  00:07:17.970
Trying to throw a less specific exception
201

201

00:07:17.970  -->  00:07:19.270
or one that's not considered a
202

202

00:07:19.270  -->  00:07:22.290
covariant of the original method isn't allowed.
203

203

00:07:22.290  -->  00:07:24.370
Right, so I'm going to revert the code back
204

204

00:07:24.370  -->  00:07:26.330
to remove any of the throw statements,
205

205

00:07:26.330  -->  00:07:28.143
I'm going to remove those altogether.
206

206

00:07:29.970  -->  00:07:31.940
Add the super.goodMethod back again,
207

207

00:07:31.940  -->  00:07:33.840
get rid of the other IOException there
208

208

00:07:35.290  -->  00:07:37.030
that we added as a throw,
209

209

00:07:37.030  -->  00:07:39.330
and if we now run the code,
210

210

00:07:39.330  -->  00:07:41.620
it's working as it was before.
211

211

00:07:41.620  -->  00:07:43.680
And again, just a reminder that
212

212

00:07:43.680  -->  00:07:44.520
I'm going to talk more about
213

213

00:07:44.520  -->  00:07:45.923
catching exceptions later.
214

214

00:07:47.960  -->  00:07:49.110
So the last two videos have
215

215

00:07:49.110  -->  00:07:50.990
reviewed the subject of polymorphism
216

216

00:07:50.990  -->  00:07:52.810
and how inheritance and overridden methods
217

217

00:07:52.810  -->  00:07:55.650
support polymorphism in Java.
218

218

00:07:55.650  -->  00:07:57.100
I discussed the differences between
219

219

00:07:57.100  -->  00:07:59.920
overloaded and overridden methods in the last video,
220

220

00:07:59.920  -->  00:08:02.930
and we went through the rules for proper overriding.
221

221

00:08:02.930  -->  00:08:04.540
So if you don't override correctly,
222

222

00:08:04.540  -->  00:08:07.470
you could get a compiler error, or no error,
223

223

00:08:07.470  -->  00:08:09.260
because your method is a valid overloaded
224

224

00:08:09.260  -->  00:08:10.640
method instead.
225

225

00:08:10.640  -->  00:08:11.730
Right so that's the end of the video here,
226

226

00:08:11.730  -->  00:08:12.620
and in the next one,
227

227

00:08:12.620  -->  00:08:13.510
we're going to discuss some more
228

228

00:08:13.510  -->  00:08:16.080
interesting samples of polymorphism.
229

229

00:08:16.080  -->  00:08:17.380
See you in the next video.
