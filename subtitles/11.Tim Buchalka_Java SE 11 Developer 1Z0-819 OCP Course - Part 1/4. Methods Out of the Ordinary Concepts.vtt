WEBVTT
1
1

00:00:05.000  -->  00:00:05.850
<v Instructor>In the last video,</v>
2

2

00:00:05.850  -->  00:00:09.160
I discussed creating constructors, or allowing the compiler
3

3

00:00:09.160  -->  00:00:11.590
to create a default constructor for us.
4

4

00:00:11.590  -->  00:00:14.590
In this video, I want to talk more about constructors.
5

5

00:00:14.590  -->  00:00:16.460
The first example is going to demonstrate
6

6

00:00:16.460  -->  00:00:17.860
why you might want to create a class
7

7

00:00:17.860  -->  00:00:20.140
with no public or package constructors,
8

8

00:00:20.140  -->  00:00:22.200
but only a private constructor.
9

9

00:00:22.200  -->  00:00:24.170
I'll be talking a lot about access modifiers
10

10

00:00:24.170  -->  00:00:25.560
in an upcoming video,
11

11

00:00:25.560  -->  00:00:28.690
but the private constructor is an interesting test case.
12

12

00:00:28.690  -->  00:00:30.270
So we're going to start by creating a new class
13

13

00:00:30.270  -->  00:00:31.610
in our methods project.
14

14

00:00:31.610  -->  00:00:33.343
We're going to call it RestrictedObjects.
15

15

00:00:41.220  -->  00:00:43.190
In this code, we're actually creating a class
16

16

00:00:43.190  -->  00:00:46.000
called OnlyClass as you can see on screen there.
17

17

00:00:46.000  -->  00:00:47.410
It's only got one constructor,
18

18

00:00:47.410  -->  00:00:49.360
which has been marked as private.
19

19

00:00:49.360  -->  00:00:50.323
I'm creating an instance of this class,
20

20

00:00:50.323  -->  00:00:54.800
and assign it to a private static final class field.
21

21

00:00:54.800  -->  00:00:56.820
I'm creating a method to return this instance,
22

22

00:00:56.820  -->  00:00:58.670
which is the only instance.
23

23

00:00:58.670  -->  00:01:00.600
You might recognise this as a singleton pattern
24

24

00:01:00.600  -->  00:01:02.290
if you've been programming for a while.
25

25

00:01:02.290  -->  00:01:03.680
Now I'm creating public methods
26

26

00:01:03.680  -->  00:01:06.940
that wrap the instance's private method.
27

27

00:01:06.940  -->  00:01:08.660
And the main method down at the bottom there
28

28

00:01:08.660  -->  00:01:11.500
of RestrictedObjects, which is the second class
29

29

00:01:11.500  -->  00:01:15.160
in this for our executed method on the one and only instance
30

30

00:01:15.160  -->  00:01:17.700
for our static public method.
31

31

00:01:17.700  -->  00:01:18.900
So I'm running this now.
32

32

00:01:21.010  -->  00:01:23.920
Only one instance of this class exists or will ever exist.
33

33

00:01:23.920  -->  00:01:25.370
Now, so far so good.
34

34

00:01:25.370  -->  00:01:27.510
That's something that you certainly will see in code,
35

35

00:01:27.510  -->  00:01:28.660
a singleton pattern.
36

36

00:01:28.660  -->  00:01:31.010
But what happens when we try to get around this restriction
37

37

00:01:31.010  -->  00:01:34.690
by creating our own class that extends this class?
38

38

00:01:34.690  -->  00:01:36.830
So let's try and do that right down the bottom here.
39

39

00:01:36.830  -->  00:01:39.230
We're gonna try and add another class.
40

40

00:01:39.230  -->  00:01:44.230
We're going to type class MyOnlyClass extends OnlyClass,
41

41

00:01:46.690  -->  00:01:49.040
and left and right curly braces to make it valid.
42

42

00:01:49.040  -->  00:01:50.930
You can see immediately we've got it compiled over there
43

43

00:01:50.930  -->  00:01:52.070
and if we hover over it,
44

44

00:01:52.070  -->  00:01:55.170
there's no default constructor available in OnlyClass.
45

45

00:01:55.170  -->  00:01:56.440
And what's actually happening here
46

46

00:01:56.440  -->  00:01:58.540
is that you cannot actually extend a class
47

47

00:01:58.540  -->  00:02:00.430
that only has private constructors,
48

48

00:02:00.430  -->  00:02:03.090
except as a nested class.
49

49

00:02:03.090  -->  00:02:05.220
Even though the error doesn't really specifically say that
50

50

00:02:05.220  -->  00:02:06.053
in this instance.
51

51

00:02:06.053  -->  00:02:09.033
If I comment that out, and we come down here instead,
52

52

00:02:10.150  -->  00:02:13.423
after the OnlyClass.doSomething, paste some code in.
53

53

00:02:14.354  -->  00:02:15.400
So we've got the same problem here,
54

54

00:02:15.400  -->  00:02:17.600
and actually in this case we've got a better error message.
55

55

00:02:17.600  -->  00:02:20.490
OnlyClass has private access in OnlyClass.
56

56

00:02:20.490  -->  00:02:21.890
Basically, you can extend a class
57

57

00:02:21.890  -->  00:02:23.690
that only has private constructors,
58

58

00:02:23.690  -->  00:02:25.130
and again we're getting a more realistic
59

59

00:02:25.130  -->  00:02:27.040
error message this time.
60

60

00:02:27.040  -->  00:02:30.150
All right, I'm just going to quorate that line out as well.
61

61

00:02:30.150  -->  00:02:34.420
Okay, so how is a class with a private constructor
62

62

00:02:34.420  -->  00:02:36.450
different from a final class?
63

63

00:02:36.450  -->  00:02:39.310
Well, let's explore that question with some code.
64

64

00:02:39.310  -->  00:02:40.750
You're gonna create another class here.
65

65

00:02:40.750  -->  00:02:43.353
We're gonna call this one FinalClassExample.
66

66

00:02:53.530  -->  00:02:57.110
Now this code, firstly defines the class called FinalEntity
67

67

00:02:57.110  -->  00:03:00.630
that has a constructor, a method, and an instance variable
68

68

00:03:00.630  -->  00:03:01.970
which you can see on screen.
69

69

00:03:01.970  -->  00:03:04.480
And the main method from the FinalClassExample class,
70

70

00:03:04.480  -->  00:03:05.860
the second class in this fold
71

71

00:03:05.860  -->  00:03:09.900
instantiates a couple of objects of top FinalEntity
72

72

00:03:09.900  -->  00:03:11.310
and executing method on h.
73

73

00:03:11.310  -->  00:03:13.210
Pretty straightforward code.
74

74

00:03:13.210  -->  00:03:14.043
Run the code.
75

75

00:03:17.030  -->  00:03:18.870
So you can see that the fact that we've marked
76

76

00:03:18.870  -->  00:03:21.410
this FinalEntity class as final
77

77

00:03:21.410  -->  00:03:24.170
doesn't prevent moldable instances being created.
78

78

00:03:24.170  -->  00:03:25.130
But what it does prevent
79

79

00:03:25.130  -->  00:03:27.800
is the entity being extended any further.
80

80

00:03:27.800  -->  00:03:29.120
Now perhaps you have a logical end
81

81

00:03:29.120  -->  00:03:31.290
to your hierarchical structure,
82

82

00:03:31.290  -->  00:03:34.350
and it doesn't make sense to allow a subclass to exist,
83

83

00:03:34.350  -->  00:03:37.830
so that would be a good reason to make the entity final.
84

84

00:03:37.830  -->  00:03:40.120
All right, so let's compare the final class
85

85

00:03:40.120  -->  00:03:42.443
with a class that has a final method.
86

86

00:03:43.540  -->  00:03:44.970
So we're going to create a new class
87

87

00:03:44.970  -->  00:03:46.957
called FinalMethodExample.
88

88

00:03:53.830  -->  00:03:55.470
Okay, so there's the code.
89

89

00:03:55.470  -->  00:03:57.600
So firstly, we have to find an abstract class
90

90

00:03:57.600  -->  00:04:00.560
on line nine called WillHaveManySubTypes.
91

91

00:04:00.560  -->  00:04:03.490
This class has two abstract methods as you can see there,
92

92

00:04:03.490  -->  00:04:06.320
that have to be implemented by classes that extend it.
93

93

00:04:06.320  -->  00:04:09.130
But it also has one method that is not extensible,
94

94

00:04:09.130  -->  00:04:10.970
because it's marked final
95

95

00:04:10.970  -->  00:04:13.130
and cannot be overridden by any subclass.
96

96

00:04:13.130  -->  00:04:15.670
Every subclass that uses this particular method
97

97

00:04:15.670  -->  00:04:18.210
has to execute the same code.
98

98

00:04:18.210  -->  00:04:19.693
Just going on down, we've got our public host
99

99

00:04:19.693  -->  00:04:22.101
down the bottom, second class in this fold
100

100

00:04:22.101  -->  00:04:24.710
that extends the abstract class as you can see,
101

101

00:04:24.710  -->  00:04:26.263
and implements the two methods.
102

102

00:04:28.540  -->  00:04:30.560
And the main method, going back up again,
103

103

00:04:30.560  -->  00:04:32.350
instantiates an object of it's own top
104

104

00:04:32.350  -->  00:04:34.070
and executes the three methods,
105

105

00:04:34.070  -->  00:04:36.233
but also prints the object to the console.
106

106

00:04:37.210  -->  00:04:38.083
Let's run this.
107

107

00:04:40.770  -->  00:04:43.530
And there's the output at the bottom of the screen.
108

108

00:04:43.530  -->  00:04:47.090
All right, so let's try overriding the doZOnlyOneWay method
109

109

00:04:48.010  -->  00:04:50.310
just to confirm that we can't do it.
110

110

00:04:50.310  -->  00:04:51.970
So again, we're trying to override
111

111

00:04:51.970  -->  00:04:53.840
the method on line 16 there.
112

112

00:04:53.840  -->  00:04:54.790
We're gonna paste this code
113

113

00:04:54.790  -->  00:04:56.900
into FinalMethodExample right down the bottom.
114

114

00:04:56.900  -->  00:04:58.650
We'll do it, it's very last method.
115

115

00:05:00.590  -->  00:05:03.430
You can see doZOnlyOneWay cannot override,
116

116

00:05:03.430  -->  00:05:05.083
override method is final.
117

117

00:05:06.630  -->  00:05:09.136
All right, so let's comment that out.
118

118

00:05:09.136  -->  00:05:11.160
All right, so let's try something else here.
119

119

00:05:11.160  -->  00:05:14.060
Let's see what happens if you don't set a method to final
120

120

00:05:14.060  -->  00:05:15.770
and it's use is universal in your code
121

121

00:05:15.770  -->  00:05:17.700
and you've allowed others to extend it.
122

122

00:05:17.700  -->  00:05:18.550
So we've gone back up
123

123

00:05:18.550  -->  00:05:21.940
and as another abstract method definition
124

124

00:05:21.940  -->  00:05:26.600
up here in our abstract class, we've got a toString there.
125

125

00:05:26.600  -->  00:05:29.070
Now we're gonna be forced to implement it
126

126

00:05:29.070  -->  00:05:31.600
in the FinalMethodExample.
127

127

00:05:31.600  -->  00:05:34.110
You can see that if we don't at the moment,
128

128

00:05:34.110  -->  00:05:36.580
we're actually getting an error there that must be declared
129

129

00:05:36.580  -->  00:05:39.710
abstract or implement abstract method toString.
130

130

00:05:39.710  -->  00:05:41.753
So let's go and implement toString.
131

131

00:05:45.277  -->  00:05:48.630
The error has now disappeared as you can see.
132

132

00:05:48.630  -->  00:05:49.463
Run the code.
133

133

00:05:51.100  -->  00:05:53.020
Not implemented yet is the output,
134

134

00:05:53.020  -->  00:05:54.780
which is consistent with what we've added
135

135

00:05:54.780  -->  00:05:55.963
to our toString method.
136

136

00:05:57.290  -->  00:05:58.860
So why is this a problem?
137

137

00:05:58.860  -->  00:06:00.380
Well it's only a problem if you ever
138

138

00:06:00.380  -->  00:06:02.420
actually want this object to be able
139

139

00:06:02.420  -->  00:06:06.063
to use java.lang.Object implementation of toString.
140

140

00:06:06.063  -->  00:06:08.563
There's now no way for this class to execute it.
141

141

00:06:09.400  -->  00:06:10.233
And to see what I mean,
142

142

00:06:10.233  -->  00:06:12.993
if I go back to here and change this,
143

143

00:06:15.990  -->  00:06:20.990
return super.toString, you get an error.
144

144

00:06:22.780  -->  00:06:26.090
Abstract method toString cannot be accessed directly.
145

145

00:06:26.090  -->  00:06:27.580
You'd think that in this scenario
146

146

00:06:27.580  -->  00:06:31.090
it should actually execute the objects toString method,
147

147

00:06:31.090  -->  00:06:33.980
but it doesn't and it doesn't compile as you can see there.
148

148

00:06:33.980  -->  00:06:36.040
Basically, it's trying to execute the parent class's
149

149

00:06:36.040  -->  00:06:39.960
toString method, but it's parent is the abstract class
150

150

00:06:39.960  -->  00:06:42.924
that we defined at the top there with an abstract method
151

151

00:06:42.924  -->  00:06:45.160
toString because the parent is the class.
152

152

00:06:45.160  -->  00:06:48.300
In this case, the class will have many subtops.
153

153

00:06:48.300  -->  00:06:50.430
What I'm saying is the abstract class overrode
154

154

00:06:50.430  -->  00:06:53.520
and hid the java.lang.Object toString method
155

155

00:06:53.520  -->  00:06:56.050
which may not have been your intention.
156

156

00:06:56.050  -->  00:06:58.113
But if there is application code you really do not want
157

157

00:06:58.113  -->  00:07:00.450
subclasses to extend or alter,
158

158

00:07:00.450  -->  00:07:02.800
you want to certainly wrap it in a FinalMethod.
159

159

00:07:04.295  -->  00:07:07.095
All right, so I'm just going to comment that change out.
160

160

00:07:08.030  -->  00:07:11.190
We're gonna uncomment this one again, so code compiles.
161

161

00:07:11.190  -->  00:07:13.290
Run it to make sure, and we're good to go.
162

162

00:07:15.080  -->  00:07:18.570
Okay. All right, that's the end of this video.
163

163

00:07:18.570  -->  00:07:19.910
Coming up, we've got a small quiz.
164

164

00:07:19.910  -->  00:07:20.743
Good luck with that,
165

165

00:07:20.743  -->  00:07:23.070
and then I'll see you in the video following that.
