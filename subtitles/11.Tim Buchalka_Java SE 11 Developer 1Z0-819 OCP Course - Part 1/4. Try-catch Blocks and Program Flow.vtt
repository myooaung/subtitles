WEBVTT
1
1

00:00:05.420  -->  00:00:07.730
<v Tim>In the previous video, I showed several code</v>
2

2

00:00:07.730  -->  00:00:10.350
with a try-catch block in the main method,
3

3

00:00:10.350  -->  00:00:12.620
catching an error of the most generic type,
4

4

00:00:12.620  -->  00:00:16.250
throwable, which is the catch-all for all exceptions.
5

5

00:00:16.250  -->  00:00:19.030
At a minimum, the try-catch block looks like the following,
6

6

00:00:19.030  -->  00:00:21.290
which catches nothing and does nothing.
7

7

00:00:21.290  -->  00:00:23.420
You go try, left to right curly braces,
8

8

00:00:23.420  -->  00:00:26.180
catch and then throwable t in parentheses,
9

9

00:00:26.180  -->  00:00:28.570
then we've got another left to right curly brace.
10

10

00:00:28.570  -->  00:00:30.450
That they're also unlike other statements,
11

11

00:00:30.450  -->  00:00:31.880
such as if and else,
12

12

00:00:31.880  -->  00:00:35.163
the enclosing left to right curly brace sets are required.
13

13

00:00:37.350  -->  00:00:39.268
Alternatively, you can replace the catch clause
14

14

00:00:39.268  -->  00:00:41.170
with a finally clause.
15

15

00:00:41.170  -->  00:00:43.660
Just declaring a try clause without either a catch
16

16

00:00:43.660  -->  00:00:46.593
or finally clause results in a compiler error.
17

17

00:00:48.820  -->  00:00:51.240
Any exception that occurs in a statement
18

18

00:00:51.240  -->  00:00:52.310
wrapped by the try block
19

19

00:00:52.310  -->  00:00:54.850
will immediately stop the instruction set
20

20

00:00:54.850  -->  00:00:56.900
at the statement that triggered the error,
21

21

00:00:56.900  -->  00:00:59.350
and fall through to the catch statement.
22

22

00:00:59.350  -->  00:01:02.110
In other words, all statements after the offending statement
23

23

00:01:02.110  -->  00:01:03.330
will be skipped.
24

24

00:01:03.330  -->  00:01:05.880
If an error occurs in a loop or nested loop
25

25

00:01:05.880  -->  00:01:08.090
and the try block is outside of the loop,
26

26

00:01:08.090  -->  00:01:10.983
the code breaks out of any participating loops.
27

27

00:01:12.420  -->  00:01:13.600
All right, let's create a new class
28

28

00:01:13.600  -->  00:01:15.160
in our exceptions project.
29

29

00:01:15.160  -->  00:01:17.643
I'm gonna call this one TryCatchExamples.
30

30

00:01:26.680  -->  00:01:27.513
So, you can see
31

31

00:01:27.513  -->  00:01:29.690
that I've got three system.out.printIn statements,
32

32

00:01:29.690  -->  00:01:32.970
the second of which has a divide by zero forced error,
33

33

00:01:32.970  -->  00:01:34.510
and I'm also including the method
34

34

00:01:34.510  -->  00:01:36.090
that I included in the previous video,
35

35

00:01:36.090  -->  00:01:39.180
which shows the exceptions class hierarchy.
36

36

00:01:39.180  -->  00:01:40.173
Let's run this now.
37

37

00:01:43.000  -->  00:01:44.410
And you can see from this output
38

38

00:01:44.410  -->  00:01:47.640
the error occurred at statement two in the try-block
39

39

00:01:47.640  -->  00:01:50.750
and skipped statement three, falling to the catch block,
40

40

00:01:50.750  -->  00:01:53.160
we can see that it's a runtime exception
41

41

00:01:53.160  -->  00:01:55.210
and unchecked exception.
42

42

00:01:55.210  -->  00:01:57.930
We actually weren't required to include the statement
43

43

00:01:57.930  -->  00:02:00.160
in the try-catch block.
44

44

00:02:00.160  -->  00:02:01.760
Right, so let's change our code a little bit.
45

45

00:02:01.760  -->  00:02:03.489
What we're going to do is
46

46

00:02:03.489  -->  00:02:07.530
add a try-catch that ignores the runtime exception.
47

47

00:02:07.530  -->  00:02:10.053
So, what I'm gonna do is on this line here,
48

48

00:02:11.010  -->  00:02:13.590
we're gonna replace that with that code,
49

49

00:02:13.590  -->  00:02:14.423
as you can see there.
50

50

00:02:14.423  -->  00:02:17.490
We've got a try-catch surrounding that statement.
51

51

00:02:17.490  -->  00:02:20.820
So, basically, we've nested a try-catch in a try block.
52

52

00:02:20.820  -->  00:02:21.960
Now when the error occurs,
53

53

00:02:21.960  -->  00:02:24.500
it falls through to the first wrapping catch,
54

54

00:02:24.500  -->  00:02:27.590
which does nothing, effectively hiding the error.
55

55

00:02:27.590  -->  00:02:29.483
So, let's confirm that by running it.
56

56

00:02:31.860  -->  00:02:33.790
You can see the output statement one is just fine.
57

57

00:02:33.790  -->  00:02:35.803
Statement three is just fine.
58

58

00:02:38.420  -->  00:02:41.110
So, you could wrap every statement in a try-catch
59

59

00:02:41.110  -->  00:02:43.310
if you never wanted to miss a statement,
60

60

00:02:43.310  -->  00:02:45.990
but in general, an error is a significant event,
61

61

00:02:45.990  -->  00:02:48.790
and you may not want to proceed with succeeding code.
62

62

00:02:48.790  -->  00:02:49.990
You can design placement
63

63

00:02:49.990  -->  00:02:52.470
of your try-catch blocks strategically
64

64

00:02:52.470  -->  00:02:55.963
to allow flow in some instances and break flow in others.
65

65

00:02:57.290  -->  00:02:59.850
So, let's modify our code a bit and create a method
66

66

00:02:59.850  -->  00:03:02.456
that will have our three statements in it.
67

67

00:03:02.456  -->  00:03:03.289
Right, so we're gonna go down
68

68

00:03:03.289  -->  00:03:06.520
and paste in our method at the bottom,
69

69

00:03:06.520  -->  00:03:07.950
there it is there.
70

70

00:03:07.950  -->  00:03:09.765
And what we're gonna do now is now that we've got that,
71

71

00:03:09.765  -->  00:03:11.800
we're gonna go back up to our main method,
72

72

00:03:11.800  -->  00:03:14.370
we're gonna replace all the code in the main method
73

73

00:03:14.370  -->  00:03:15.570
with the following code.
74

74

00:03:17.070  -->  00:03:18.780
So, now we're gonna try calling the new method
75

75

00:03:18.780  -->  00:03:20.860
before the try-catch in the try block
76

76

00:03:20.860  -->  00:03:23.500
and after the try-catch block.
77

77

00:03:23.500  -->  00:03:26.170
Since we're passing a parameter, divisor equals zero,
78

78

00:03:26.170  -->  00:03:29.240
our runtime exception should be thrown in each case.
79

79

00:03:29.240  -->  00:03:31.950
One thing to point out here is that the code compiles,
80

80

00:03:31.950  -->  00:03:33.610
and this is because the runtime exception
81

81

00:03:33.610  -->  00:03:35.470
is an unchecked exception.
82

82

00:03:35.470  -->  00:03:37.070
So, if you now execute the code,
83

83

00:03:39.917  -->  00:03:40.750
and you can see the output
84

84

00:03:40.750  -->  00:03:42.120
at the bottom of the screen there,
85

85

00:03:42.120  -->  00:03:44.540
the error occurred and execution completely stopped
86

86

00:03:44.540  -->  00:03:46.350
because we executed the method
87

87

00:03:46.350  -->  00:03:48.820
outside of our try-catch block.
88

88

00:03:48.820  -->  00:03:51.960
And obviously, you can see the error there was on line 38,
89

89

00:03:51.960  -->  00:03:53.330
and that's obviously the error
90

90

00:03:53.330  -->  00:03:55.060
caused by the two divided by divisor,
91

91

00:03:55.060  -->  00:03:58.565
and we parsed the argument of zero to cause an error.
92

92

00:03:58.565  -->  00:04:00.563
And you go back up to line 11, and there's the statement
93

93

00:04:00.563  -->  00:04:03.485
outside of the try-block that caused it.
94

94

00:04:03.485  -->  00:04:04.440
Right, so let's make a change here.
95

95

00:04:04.440  -->  00:04:06.500
We're gonna change the code divisor argument
96

96

00:04:06.500  -->  00:04:08.933
from zero to one here on line 11,
97

97

00:04:10.130  -->  00:04:11.410
which is basically the first code
98

98

00:04:11.410  -->  00:04:13.660
to the print three statements, as you can see.
99

99

00:04:13.660  -->  00:04:14.753
Execute the code,
100

100

00:04:17.800  -->  00:04:19.800
and this time I got a different result.
101

101

00:04:19.800  -->  00:04:20.990
So, this code demonstrates
102

102

00:04:20.990  -->  00:04:23.390
that the code after the try-catch statement
103

103

00:04:23.390  -->  00:04:25.740
in the main method was also executed.
104

104

00:04:25.740  -->  00:04:28.440
We caught the error in try-block and handled it,
105

105

00:04:28.440  -->  00:04:30.630
in this case, we just print information about it,
106

106

00:04:30.630  -->  00:04:34.070
and continued execution of code after the catch statement.
107

107

00:04:34.070  -->  00:04:35.890
And obviously, you can see the output in try-block,
108

108

00:04:35.890  -->  00:04:37.253
statement one is just fine.
109

109

00:04:38.440  -->  00:04:39.910
And we've got a error that's caught down there,
110

110

00:04:39.910  -->  00:04:42.380
then after try-catch, in the output as well.
111

111

00:04:42.380  -->  00:04:44.140
Still crashing on the same line,
112

112

00:04:44.140  -->  00:04:46.340
which is the two divided by the divisor,
113

113

00:04:46.340  -->  00:04:47.870
that's parsed as an argument
114

114

00:04:47.870  -->  00:04:50.000
to the print three statements method.
115

115

00:04:50.000  -->  00:04:51.930
So, basically here, we demonstrated that
116

116

00:04:51.930  -->  00:04:55.150
try-catch blocks can be placed around a single statement,
117

117

00:04:55.150  -->  00:04:56.870
or a block of statements,
118

118

00:04:56.870  -->  00:04:59.130
and there are no rules about where in the method
119

119

00:04:59.130  -->  00:05:01.180
you put a try-catch statement.
120

120

00:05:01.180  -->  00:05:03.780
So, let's talk a bit more about the catch block now.
121

121

00:05:04.800  -->  00:05:07.760
We've demonstrated catching an error of top throwable,
122

122

00:05:07.760  -->  00:05:11.000
which catches all errors, this is not best practise.
123

123

00:05:11.000  -->  00:05:12.630
It's more likely that you'll wanna handle
124

124

00:05:12.630  -->  00:05:15.300
different types of errors in different ways,
125

125

00:05:15.300  -->  00:05:18.150
and you can do this by defining more than one catch block.
126

126

00:05:18.150  -->  00:05:19.070
Right, so what I'm gonna do
127

127

00:05:19.070  -->  00:05:22.510
is replace the try-catch statements in the main method
128

128

00:05:22.510  -->  00:05:24.333
of the try-catch examples class,
129

129

00:05:25.200  -->  00:05:28.153
basically surrounding a code, pasting a new code,
130

130

00:05:30.000  -->  00:05:32.900
and what I'm gonna need to do is accept both imports here.
131

131

00:05:35.250  -->  00:05:37.163
And you can see both imports were added.
132

132

00:05:38.150  -->  00:05:40.170
So, here we now have two catch blocks,
133

133

00:05:40.170  -->  00:05:41.900
one for an IO exception,
134

134

00:05:41.900  -->  00:05:44.400
and the other, a catch-all throwable.
135

135

00:05:44.400  -->  00:05:47.060
Now, we actually are introducing a forced error
136

136

00:05:47.060  -->  00:05:50.660
in this catch clause, and you can see that on line 22.
137

137

00:05:50.660  -->  00:05:51.610
Let's run the code.
138

138

00:05:55.098  -->  00:05:57.280
And this output demonstrates that the catch blocks
139

139

00:05:57.280  -->  00:05:59.420
are not like switch case labels.
140

140

00:05:59.420  -->  00:06:02.080
The error thrown in the IO exception catch block
141

141

00:06:02.080  -->  00:06:05.430
does not then fall through to the catch block for throwable.
142

142

00:06:05.430  -->  00:06:08.070
These blocks are evaluated in the same context
143

143

00:06:08.070  -->  00:06:10.100
and are mutually exclusive.
144

144

00:06:10.100  -->  00:06:12.900
Because of this, the execution actually terminates
145

145

00:06:12.900  -->  00:06:14.870
in the IO exception catch block
146

146

00:06:14.870  -->  00:06:18.210
because of the uncaught error thrown in it.
147

147

00:06:18.210  -->  00:06:20.030
All right, so let's end this video here.
148

148

00:06:20.030  -->  00:06:22.730
In the next video, we'll look at the finally clause.
149

149

00:06:22.730  -->  00:06:24.323
See you in the next video.
