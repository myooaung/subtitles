WEBVTT
1
1

00:00:05.100  -->  00:00:05.933
<v Tim Buchalka>So in the last video</v>
2

2

00:00:05.933  -->  00:00:07.720
we ended up by covering the less familiar
3

3

00:00:07.720  -->  00:00:09.670
text search methods in String.
4

4

00:00:09.670  -->  00:00:11.240
So let's now talk about other types
5

5

00:00:11.240  -->  00:00:13.200
of manipulations of strings.
6

6

00:00:13.200  -->  00:00:14.870
Specifically in this video, we'll look at the
7

7

00:00:14.870  -->  00:00:17.750
join, split, and replace methods.
8

8

00:00:17.750  -->  00:00:19.370
So I'm gonna to create yet another new class
9

9

00:00:19.370  -->  00:00:20.743
in this Strings project.
10

10

00:00:22.940  -->  00:00:25.473
And we'll call this one StringSpliceAndDice.
11

11

00:00:35.368  -->  00:00:37.110
Okay, so we're starting out with some basic code,
12

12

00:00:37.110  -->  00:00:38.020
as you can see there.
13

13

00:00:38.020  -->  00:00:38.913
Let's run this.
14

14

00:00:41.305  -->  00:00:43.840
And you can see the following code creates a sentence
15

15

00:00:43.840  -->  00:00:45.310
out of the array of words
16

16

00:00:45.310  -->  00:00:47.450
using the good ol' concat method,
17

17

00:00:47.450  -->  00:00:49.120
and also a for loop.
18

18

00:00:49.120  -->  00:00:50.300
All right, so far so good.
19

19

00:00:50.300  -->  00:00:53.350
Let's now try out join, because we've seen concat.
20

20

00:00:53.350  -->  00:00:55.750
Now join was introduced in Java 8,
21

21

00:00:55.750  -->  00:00:56.710
so it's been here for a while now.
22

22

00:00:56.710  -->  00:00:59.200
So let's have a look at some code using join.
23

23

00:00:59.200  -->  00:01:00.040
Okay, there's the code.
24

24

00:01:00.040  -->  00:01:00.910
If you run that
25

25

00:01:04.100  -->  00:01:06.960
and you can see effectively what the join method's doing,
26

26

00:01:06.960  -->  00:01:08.510
or can do, is similar to what
27

27

00:01:08.510  -->  00:01:12.008
the concatenation operator does, but without the for loop.
28

28

00:01:12.008  -->  00:01:15.023
All right, so let's just add one more segment on joining.
29

29

00:01:16.520  -->  00:01:17.353
Okay, there's the code,
30

30

00:01:17.353  -->  00:01:19.180
I just need to add an import to that.
31

31

00:01:20.740  -->  00:01:24.270
All right so this code gives you an example of StringJoiner,
32

32

00:01:24.270  -->  00:01:26.840
which was a utility class added in Java 8.
33

33

00:01:26.840  -->  00:01:30.394
And you saw that I needed to import Java.util.StringJoiner.
34

34

00:01:30.394  -->  00:01:31.293
So if you run that,
35

35

00:01:33.874  -->  00:01:35.120
and there's the result.
36

36

00:01:35.120  -->  00:01:37.100
Now since we've talked about joining,
37

37

00:01:37.100  -->  00:01:39.650
let's now talk about splitting a string.
38

38

00:01:39.650  -->  00:01:43.140
So let's take our sentence and split it into words.
39

39

00:01:43.140  -->  00:01:45.740
I'm gonna paste in some code that'll do that for us.
40

40

00:01:47.420  -->  00:01:48.800
Okay, there's the code.
41

41

00:01:48.800  -->  00:01:50.140
Now this takes our string
42

42

00:01:50.140  -->  00:01:52.550
and splits it into an array of string,
43

43

00:01:52.550  -->  00:01:55.070
using a regular expression string to do it.
44

44

00:01:55.070  -->  00:01:57.150
Now in this case, our regular expression
45

45

00:01:57.150  -->  00:02:02.060
is simply the space character, AKA Unicode character 0020.
46

46

00:02:02.060  -->  00:02:03.073
So if we run this,
47

47

00:02:04.450  -->  00:02:05.810
you can see we get the results
48

48

00:02:05.810  -->  00:02:07.640
Hello, World, How, are, you.
49

49

00:02:07.640  -->  00:02:10.730
Basically the string, split into an array of strings.
50

50

00:02:10.730  -->  00:02:13.090
Now that's a pretty straightforward split.
51

51

00:02:13.090  -->  00:02:16.050
If you want a more sophisticated split, for example
52

52

00:02:16.050  -->  00:02:19.300
all space characters, we could try the following code
53

53

00:02:19.300  -->  00:02:20.500
which I'll paste in now.
54

54

00:02:22.930  -->  00:02:24.610
So this code uses a regular expression
55

55

00:02:24.610  -->  00:02:28.280
for the split delimiter, matching on any white space
56

56

00:02:28.280  -->  00:02:30.130
instead of what previously we used,
57

57

00:02:30.130  -->  00:02:32.640
which was just the Unicode character 0020
58

58

00:02:32.640  -->  00:02:33.800
which is a space.
59

59

00:02:33.800  -->  00:02:34.803
So let's run this.
60

60

00:02:38.610  -->  00:02:40.974
And you can see the results we're getting there
61

61

00:02:40.974  -->  00:02:42.280
at the bottom of the screen.
62

62

00:02:42.280  -->  00:02:43.113
All right, so now that we've done that,
63

63

00:02:43.113  -->  00:02:44.463
let's try a partial.
64

64

00:02:45.910  -->  00:02:47.060
I'll paste in the code.
65

65

00:02:48.878  -->  00:02:50.460
And you can see here we only want a couple of values,
66

66

00:02:50.460  -->  00:02:51.620
we don't want all the values.
67

67

00:02:51.620  -->  00:02:52.870
So let's actually run it.
68

68

00:02:54.450  -->  00:02:55.700
So the result of running this code
69

69

00:02:55.700  -->  00:02:57.670
is to create a two-element array.
70

70

00:02:57.670  -->  00:03:00.700
The first element is the first element split off,
71

71

00:03:00.700  -->  00:03:02.240
and then the remainder of the string
72

72

00:03:02.240  -->  00:03:03.420
becomes the second element.
73

73

00:03:03.420  -->  00:03:05.880
And that's why we've got Hello, and the second string
74

74

00:03:05.880  -->  00:03:07.840
is World How are you.
75

75

00:03:07.840  -->  00:03:09.820
All right, so now that we've joined and split strings,
76

76

00:03:09.820  -->  00:03:12.370
we'll turn our focus to the four replace methods
77

77

00:03:12.370  -->  00:03:13.600
on the String class.
78

78

00:03:13.600  -->  00:03:14.900
See you in the next video.
