WEBVTT
1
1

00:00:05.659  -->  00:00:06.870
<v ->All right, so you might agree that writing</v>
2

2

00:00:06.870  -->  00:00:10.040
less code feels good, and eliminating the clanky constructs
3

3

00:00:10.040  -->  00:00:13.020
after finding a class than having to execute a method on it
4

4

00:00:13.020  -->  00:00:15.310
for simple functions might be an advantage.
5

5

00:00:15.310  -->  00:00:17.320
Well the helloable interface in these examples
6

6

00:00:17.320  -->  00:00:20.890
meets the requirements for a functional interface.
7

7

00:00:20.890  -->  00:00:22.690
And there's the interface on screen.
8

8

00:00:25.160  -->  00:00:28.330
Now, pulled straight from the oracle java specification,
9

9

00:00:28.330  -->  00:00:31.307
functional interfaces are described as follows.
10

10

00:00:31.307  -->  00:00:33.600
"Functional interfaces provide target types
11

11

00:00:33.600  -->  00:00:36.170
for lambda expressions and method references.
12

12

00:00:36.170  -->  00:00:39.850
Each functional interface has a single abstract method,
13

13

00:00:39.850  -->  00:00:42.750
called the functional method for that functional interface,
14

14

00:00:42.750  -->  00:00:45.890
to which the lambda expression's parameter and return types
15

15

00:00:45.890  -->  00:00:47.810
are matched or adapted.
16

16

00:00:47.810  -->  00:00:50.320
Functional interfaces can provide a target type
17

17

00:00:50.320  -->  00:00:53.470
in multiple contexts, such as assignment context,
18

18

00:00:53.470  -->  00:00:56.447
method invocation, or cast context."
19

19

00:00:58.050  -->  00:01:00.410
So in other words, any where you can use an interface type
20

20

00:01:00.410  -->  00:01:03.430
in code you can replace the instantiated object
21

21

00:01:03.430  -->  00:01:06.063
which might have been used with a lambda expression.
22

22

00:01:08.920  -->  00:01:10.470
All right, so let's look at some
23

23

00:01:10.470  -->  00:01:12.750
basic lambda expressions and texts.
24

24

00:01:12.750  -->  00:01:15.370
So two links you'll find useful here, are on screen
25

25

00:01:15.370  -->  00:01:16.860
but also in the resources section
26

26

00:01:16.860  -->  00:01:18.900
so really good to just follow up
27

27

00:01:18.900  -->  00:01:22.540
and make sure you understand lambda expressions really well.
28

28

00:01:22.540  -->  00:01:24.010
But in particular, I like this image
29

29

00:01:24.010  -->  00:01:25.300
that I've got on screen here
30

30

00:01:25.300  -->  00:01:27.250
because it very quickly tells you what you need to know
31

31

00:01:27.250  -->  00:01:29.680
about writing a lambda expression.
32

32

00:01:29.680  -->  00:01:31.530
So we've got the argument list on the left,
33

33

00:01:31.530  -->  00:01:33.110
the arrow token in the middle,
34

34

00:01:33.110  -->  00:01:35.290
and the body on the right hand side.
35

35

00:01:35.290  -->  00:01:37.443
So let's now discuss those three parts.
36

36

00:01:40.150  -->  00:01:43.090
So a lambda expression is composed of three parts.
37

37

00:01:43.090  -->  00:01:45.710
Firstly, the parameters, the argument list.
38

38

00:01:45.710  -->  00:01:48.520
Well this is a comma-separated list of formal parameters
39

39

00:01:48.520  -->  00:01:50.730
enclosed in parentheses.
40

40

00:01:50.730  -->  00:01:52.640
You can omit the data type of the parameters
41

41

00:01:52.640  -->  00:01:54.050
in a lambda expression.
42

42

00:01:54.050  -->  00:01:57.370
If you include data types, you must declare a data type
43

43

00:01:57.370  -->  00:01:58.433
for each parameter.
44

44

00:02:01.140  -->  00:02:03.050
In addition, you can omit the parentheses
45

45

00:02:03.050  -->  00:02:05.000
if there's only one parameter.
46

46

00:02:05.000  -->  00:02:07.810
If you have no parameters, you represent this with an empty
47

47

00:02:07.810  -->  00:02:09.630
parentheses set.
48

48

00:02:09.630  -->  00:02:12.470
And you can see an example there with no parentheses
49

49

00:02:12.470  -->  00:02:13.723
that have been passed.
50

50

00:02:16.140  -->  00:02:18.370
All right, the second part of the lambda expression
51

51

00:02:18.370  -->  00:02:19.590
is the arrow token.
52

52

00:02:19.590  -->  00:02:21.490
That's a dash and a greater than sign.
53

53

00:02:23.700  -->  00:02:25.990
And the third part is the body.
54

54

00:02:25.990  -->  00:02:28.550
So the body can consist of a single expression.
55

55

00:02:28.550  -->  00:02:30.690
If you specify a single expression,
56

56

00:02:30.690  -->  00:02:32.940
then the Java runtime evaluates the expression
57

57

00:02:32.940  -->  00:02:34.730
and then returns its value.
58

58

00:02:34.730  -->  00:02:38.923
An example there, p -&gt; p.getName()=="RALPH"
59

59

00:02:41.490  -->  00:02:42.750
You do not have to enclose
60

60

00:02:42.750  -->  00:02:45.150
a void method invocation in braces.
61

61

00:02:45.150  -->  00:02:48.330
For example, the following is a valid lambda expression.
62

62

00:02:48.330  -->  00:02:51.880
S -&gt; System.out.println(s)
63

63

00:02:52.980  -->  00:02:56.360
Thirdly, a body can consist of a statement block.
64

64

00:02:56.360  -->  00:02:58.770
A return statement is not an expression.
65

65

00:02:58.770  -->  00:03:01.690
In a lambda expression you must enclose statements in braces
66

66

00:03:01.690  -->  00:03:02.950
the left or right curly braces.
67

67

00:03:02.950  -->  00:03:07.950
An example there p -&gt; { return Calculate.add(1,2); }
68

68

00:03:13.923  -->  00:03:15.470
So note that lambda expressions
69

69

00:03:15.470  -->  00:03:17.580
resemble method declarations.
70

70

00:03:17.580  -->  00:03:19.540
In fact you can consider lambda expressions
71

71

00:03:19.540  -->  00:03:22.440
to be anonymous methods, methods without a name,
72

72

00:03:22.440  -->  00:03:26.410
and no longer requiring an anonymous class to wrap them.
73

73

00:03:26.410  -->  00:03:28.530
Sometimes a lambda expression does nothing
74

74

00:03:28.530  -->  00:03:30.330
but call an existing method.
75

75

00:03:30.330  -->  00:03:33.060
In these cases, you can use a method reference.
76

76

00:03:33.060  -->  00:03:35.150
They're compact, easy to read lambda expressions
77

77

00:03:35.150  -->  00:03:37.000
for methods that already have a name.
78

78

00:03:39.113  -->  00:03:40.730
You can see the syntax for a method reference,
79

79

00:03:40.730  -->  00:03:43.970
System.out::println.
80

80

00:03:43.970  -->  00:03:45.740
A method reference can completely replace
81

81

00:03:45.740  -->  00:03:47.870
a lambda expression with an arrow token,
82

82

00:03:47.870  -->  00:03:50.210
if the method referred to meets the requirements
83

83

00:03:50.210  -->  00:03:52.010
for the functional interface method.
84

84

00:03:54.440  -->  00:03:55.810
All right, so let's look at some examples
85

85

00:03:55.810  -->  00:03:58.250
of syntactically correct parameter declarations
86

86

00:03:58.250  -->  00:04:00.140
in lambda expressions.
87

87

00:04:00.140  -->  00:04:02.140
So on the left we've got there valid lambda expressions,
88

88

00:04:02.140  -->  00:04:05.937
the first one () -&gt; System.out.println("Hello").
89

89

00:04:07.617  -->  00:04:09.680
And the notes there, no parameter syntax,
90

90

00:04:09.680  -->  00:04:10.750
parentheses required,
91

91

00:04:10.750  -->  00:04:12.670
and the parentheses in the parameter list declaration
92

92

00:04:12.670  -->  00:04:13.780
are required.
93

93

00:04:13.780  -->  00:04:18.780
Next we've got a -&gt; a + 1, it's a single parameter syntax,
94

94

00:04:19.010  -->  00:04:22.840
no parentheses are required, and the parentheses in the
95

95

00:04:22.840  -->  00:04:24.670
parameter list declaration are optional.
96

96

00:04:24.670  -->  00:04:28.067
Third, we've got (a) -&gt; a + 1,
97

97

00:04:28.067  -->  00:04:30.060
that's a single parameter syntax,
98

98

00:04:30.060  -->  00:04:31.800
parentheses valid but optional,
99

99

00:04:31.800  -->  00:04:33.140
but I've marked that as optional.
100

100

00:04:33.140  -->  00:04:37.380
Next we've got (int a) -&gt; a + 1,
101

101

00:04:37.380  -->  00:04:40.297
that's a single parameter syntax specifying the data type,
102

102

00:04:40.297  -->  00:04:43.540
and in that scenario the parentheses are required.
103

103

00:04:43.540  -->  00:04:47.280
We've got (var a) -&gt; a + 1,
104

104

00:04:47.280  -->  00:04:48.840
that's a single parameter syntax
105

105

00:04:48.840  -->  00:04:51.050
with Local Variable Type Inference,
106

106

00:04:51.050  -->  00:04:52.950
and parentheses are required for that.
107

107

00:04:55.200  -->  00:04:59.730
Next we've got (int a, int b) -&gt; a + b,
108

108

00:04:59.730  -->  00:05:02.400
and multiple parameter syntax hid there with declared types
109

109

00:05:02.400  -->  00:05:04.460
and all parameters must specify a type,
110

110

00:05:04.460  -->  00:05:06.160
and we need parentheses.
111

111

00:05:06.160  -->  00:05:10.870
Next, (a, b) -&gt; a + b,
112

112

00:05:10.870  -->  00:05:13.300
that's multiple parameter syntax with no types,
113

113

00:05:13.300  -->  00:05:14.950
if you're not specifying data types
114

114

00:05:14.950  -->  00:05:17.130
for this one you must omit them for all,
115

115

00:05:17.130  -->  00:05:19.680
parentheses are required in this scenario.
116

116

00:05:19.680  -->  00:05:24.680
And lastly, (var a, var b) -&gt; a + b.
117

117

00:05:24.800  -->  00:05:27.900
Multiple parameter syntax with Local Variable Type Inference
118

118

00:05:27.900  -->  00:05:31.060
you must use var for all parameters if you use it for one,
119

119

00:05:31.060  -->  00:05:33.310
and parentheses are required in that example.
120

120

00:05:35.710  -->  00:05:38.030
All right, now let's look at some examples of syntactically
121

121

00:05:38.030  -->  00:05:41.980
incorrect parameter declarations in lambda expressions.
122

122

00:05:41.980  -->  00:05:44.780
The first one, we've got -&gt; System.out.println("Hello"),
123

123

00:05:47.597  -->  00:05:50.240
the no parameter syntax, parameters required,
124

124

00:05:50.240  -->  00:05:51.700
and we obviously haven't got any there.
125

125

00:05:51.700  -->  00:05:54.690
Next we've got int a -&gt; a + 1,
126

126

00:05:54.690  -->  00:05:57.650
it's for a single parameter syntax specifying data type,
127

127

00:05:57.650  -->  00:06:00.620
parentheses are required and they're obviously not there.
128

128

00:06:00.620  -->  00:06:04.840
Next var a -&gt; a + 1, single parameter syntax
129

129

00:06:04.840  -->  00:06:07.650
with Local Variable Type Inference, parentheses are required
130

130

00:06:07.650  -->  00:06:09.088
and aren't there.
131

131

00:06:09.088  -->  00:06:11.613
And next we've got (int a, b) -&gt; a + b,
132

132

00:06:14.000  -->  00:06:16.610
multiple parameter syntax with declared types,
133

133

00:06:16.610  -->  00:06:19.470
all parameters in that scenario must specify a type,
134

134

00:06:19.470  -->  00:06:21.570
parentheses are required in that scenario.
135

135

00:06:23.920  -->  00:06:28.710
a, b -&gt; a + b, multiple parameter syntax with no types,
136

136

00:06:28.710  -->  00:06:30.980
you must use parentheses and obviously we're not
137

137

00:06:30.980  -->  00:06:32.000
in that scenario.
138

138

00:06:32.000  -->  00:06:36.060
Next we've got (a, var b) -&gt; a + b,
139

139

00:06:36.060  -->  00:06:37.530
that's multiple parameter syntax with
140

140

00:06:37.530  -->  00:06:39.330
Local Variable Type Inference,
141

141

00:06:39.330  -->  00:06:42.290
you must use var for all parameters if you use it for one,
142

142

00:06:42.290  -->  00:06:44.840
and parentheses are required in that scenario.
143

143

00:06:44.840  -->  00:06:46.790
Next we've got (int a, var b) -&gt; a + b,
144

144

00:06:50.150  -->  00:06:53.740
problem there is you can't mix var with actual data types
145

145

00:06:53.740  -->  00:06:55.800
and parentheses are required in that scenario,
146

146

00:06:55.800  -->  00:06:57.913
but in this case obviously, it's an error.
147

147

00:07:00.010  -->  00:07:01.500
Right now let's look at some examples
148

148

00:07:01.500  -->  00:07:03.709
of syntactically correct body declarations
149

149

00:07:03.709  -->  00:07:06.130
in lambda expressions.
150

150

00:07:06.130  -->  00:07:11.130
So we've got () -&gt; System.out.println("Hello").
151

151

00:07:11.680  -->  00:07:13.870
A single line with a statement, not an expression,
152

152

00:07:13.870  -->  00:07:17.110
is valid for methods which have a void return type.
153

153

00:07:17.110  -->  00:07:21.650
Next we've got () -&gt; isTrue &amp;&amp; isPlausible.
154

154

00:07:21.650  -->  00:07:24.230
A single line lambda expression must be an expression
155

155

00:07:24.230  -->  00:07:27.810
which evaluates to the correct return type or co-variant,
156

156

00:07:27.810  -->  00:07:29.980
if the method has a return type.
157

157

00:07:29.980  -->  00:07:34.980
Next we've got (a) -&gt; {return a + 2;};.
158

158

00:07:38.800  -->  00:07:41.120
So using return requires the use of curly braces
159

159

00:07:41.120  -->  00:07:42.410
for the expression body.
160

160

00:07:42.410  -->  00:07:44.648
Using curly braces requires a return statement
161

161

00:07:44.648  -->  00:07:46.920
if the method has a return type.
162

162

00:07:46.920  -->  00:07:49.853
And all statements must be terminated with a semi-colon.
163

163

00:07:52.219  -->  00:07:55.337
And next we've got (a) -&gt; { if (a % 2 == 0)
164

164

00:07:59.837  -->  00:08:02.754
a = 100; return a + 2; }.
165

165

00:08:05.640  -->  00:08:08.450
Multiple statements are permitted in our curly braces,
166

166

00:08:08.450  -->  00:08:11.120
every statement must be terminated with a semi-colon.
167

167

00:08:11.120  -->  00:08:12.211
The last one there we've got
168

168

00:08:12.211  -->  00:08:17.211
(a) -&gt; { int modValue = 2; if (a % modValue == 0)
169

169

00:08:20.367  -->  00:08:23.284
a = 100; return a + 2; };
170

170

00:08:25.406  -->  00:08:26.460
and the point there is
171

171

00:08:26.460  -->  00:08:29.513
you can declare local variables in the expression.
172

172

00:08:31.600  -->  00:08:33.090
All right, and just before we finish the video now,
173

173

00:08:33.090  -->  00:08:35.570
two quick examples of a syntactically incorrect
174

174

00:08:35.570  -->  00:08:37.910
body declarations in lambda expressions.
175

175

00:08:37.910  -->  00:08:41.380
The first one, () -&gt; return 1.
176

176

00:08:41.380  -->  00:08:44.810
So using return requires the use of curly braces.
177

177

00:08:44.810  -->  00:08:47.427
And the next one, (a) -&gt; { if (a % 2 == 0) a = 100,
178

178

00:08:55.405  -->  00:08:57.155
return a + 2; }.
179

179

00:08:58.450  -->  00:09:00.620
Trying to use a comma to separate statements,
180

180

00:09:00.620  -->  00:09:02.805
you have to use a semi-colon.
181

181

00:09:02.805  -->  00:09:03.970
All right, so let's end the video here.
182

182

00:09:03.970  -->  00:09:06.020
In the next one, I will start the ball rolling
183

183

00:09:06.020  -->  00:09:08.940
by looking at a single parameter lambda expression.
184

184

00:09:08.940  -->  00:09:10.273
See you in the next video.
