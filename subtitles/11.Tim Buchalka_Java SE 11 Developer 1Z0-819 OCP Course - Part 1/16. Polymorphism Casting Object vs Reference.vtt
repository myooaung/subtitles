WEBVTT
1
1

00:00:05.080  -->  00:00:06.200
<v Narrator>Right so let's have a discussion</v>
2

2

00:00:06.200  -->  00:00:07.807
on utilising polymorphism to cast
3

3

00:00:07.807  -->  00:00:10.350
and core methods differentiating
4

4

00:00:10.350  -->  00:00:13.180
object type vs reference types.
5

5

00:00:13.180  -->  00:00:15.490
I mentioned in one of the earliest videos in this course,
6

6

00:00:15.490  -->  00:00:17.760
that Java is said to be a strongly-typed
7

7

00:00:17.760  -->  00:00:18.640
programming language.
8

8

00:00:18.640  -->  00:00:21.890
You declare variables as a particular type,
9

9

00:00:21.890  -->  00:00:24.130
and you cannot change the declared type,
10

10

00:00:24.130  -->  00:00:26.400
although it is possible to assign an object
11

11

00:00:26.400  -->  00:00:29.113
to your declared variable that is a different type.
12

12

00:00:31.020  -->  00:00:32.725
There are set examples like the following on screen
13

13

00:00:32.725  -->  00:00:34.250
that are perfectly valid.
14

14

00:00:34.250  -->  00:00:36.570
The first one; Assigning a String-Literal
15

15

00:00:36.570  -->  00:00:38.010
to an object reference.
16

16

00:00:38.010  -->  00:00:40.500
The second one; Assigning a String-Builder object
17

17

00:00:40.500  -->  00:00:41.750
to an Object reference.
18

18

00:00:41.750  -->  00:00:44.810
And in the case of the third one; A Literal-int.,
19

19

00:00:44.810  -->  00:00:46.665
in this case the value of 10,
20

20

00:00:46.665  -->  00:00:49.010
that gets boxed to an Integer wrapper
21

21

00:00:49.010  -->  00:00:50.560
and then assigned to an object.
22

22

00:00:50.560  -->  00:00:53.523
There are three examples of code that's perfectly valid.
23

23

00:00:55.410  -->  00:00:57.340
But you cannot change the actual type
24

24

00:00:57.340  -->  00:00:58.880
of the reference variable.
25

25

00:00:58.880  -->  00:01:01.060
So following on from that third example,
26

26

00:01:01.060  -->  00:01:05.050
if we added some code on the line after that Integer o3=10,
27

27

00:01:05.050  -->  00:01:06.900
well that would produce a compiler error,
28

28

00:01:06.900  -->  00:01:09.763
that's because o3 cannot have its type changed.
29

29

00:01:11.410  -->  00:01:13.710
We also know that the compiler does some type checking
30

30

00:01:13.710  -->  00:01:15.030
at compile time.
31

31

00:01:15.030  -->  00:01:17.250
You cannot assign an object that is not a derivative
32

32

00:01:17.250  -->  00:01:19.680
of the declared type to the variable.
33

33

00:01:19.680  -->  00:01:21.550
In the first example, you cannot assign an object
34

34

00:01:21.550  -->  00:01:24.120
to a variable declared of a type where there is nothing
35

35

00:01:24.120  -->  00:01:26.080
in common between the types at all,
36

36

00:01:26.080  -->  00:01:27.980
and that's the case there with the String-Literal
37

37

00:01:27.980  -->  00:01:30.030
in Thread thread class.
38

38

00:01:30.030  -->  00:01:32.403
In the second scenario, both String and String-Buillder,
39

39

00:01:32.403  -->  00:01:34.890
are sub-classes of Char-Sequence.
40

40

00:01:34.890  -->  00:01:37.570
However, String-Builder is not derived from String,
41

41

00:01:37.570  -->  00:01:39.373
so therefore that code is invalid.
42

42

00:01:41.220  -->  00:01:43.680
We've also seen instances where we think an assignment
43

43

00:01:43.680  -->  00:01:45.200
should work but it doesn't.
44

44

00:01:45.200  -->  00:01:47.110
The compiler won't let us do the following:
45

45

00:01:47.110  -->  00:01:49.520
So we got a code there, short s = 10.
46

46

00:01:49.520  -->  00:01:50.850
So far so good.
47

47

00:01:50.850  -->  00:01:53.860
And adding 10 to s, given that it's a short,
48

48

00:01:53.860  -->  00:01:55.070
should be a valid short value
49

49

00:01:55.070  -->  00:01:57.680
because 20 fits nicely in the short's range
50

50

00:01:57.680  -->  00:02:00.660
but the code, short s2 = s + 10,
51

51

00:02:00.660  -->  00:02:02.140
in-fact won't work.
52

52

00:02:02.140  -->  00:02:03.460
We know it will work it work
53

53

00:02:03.460  -->  00:02:05.800
but the compiler isn't going to execute code
54

54

00:02:05.800  -->  00:02:07.173
to figure it out for us.
55

55

00:02:08.930  -->  00:02:10.090
The thing to remember is that;
56

56

00:02:10.090  -->  00:02:13.547
Polymorphism occurs at runtime, not at compile time,
57

57

00:02:13.547  -->  00:02:16.290
and sometimes we need the ability to force an object
58

58

00:02:16.290  -->  00:02:18.080
into a different form of itself,
59

59

00:02:18.080  -->  00:02:20.200
to produce the results we want.
60

60

00:02:20.200  -->  00:02:22.110
We need this code to compile,
61

61

00:02:22.110  -->  00:02:23.900
so we need a way to inform the compiler
62

62

00:02:23.900  -->  00:02:26.450
to ignore some of its type-checking rules.
63

63

00:02:26.450  -->  00:02:28.540
And we do this by using casting.
64

64

00:02:28.540  -->  00:02:31.800
You can use casting in assignments, in expressions
65

65

00:02:31.800  -->  00:02:34.163
and in passing objects to method calls.
66

66

00:02:36.030  -->  00:02:37.800
Casting can go in either direction.
67

67

00:02:37.800  -->  00:02:40.810
Down-casting is casting to a more specific type
68

68

00:02:40.810  -->  00:02:42.290
from the defined type.
69

69

00:02:42.290  -->  00:02:45.480
The down type must meet the 'IsA' criteria.
70

70

00:02:45.480  -->  00:02:48.430
And up-casting is casting to the more generic type.
71

71

00:02:48.430  -->  00:02:50.620
We will actually talk about casting and interfaces
72

72

00:02:50.620  -->  00:02:52.343
in a future video on interfaces.
73

73

00:02:53.420  -->  00:02:55.220
For now though let's create a new class
74

74

00:02:55.220  -->  00:02:57.240
in our polymorphism project.
75

75

00:02:57.240  -->  00:02:59.940
And the class name is going to be: Down-cast examples.
76

76

00:03:01.280  -->  00:03:04.113
(keyboard typing)
77

77

00:03:08.030  -->  00:03:09.860
So in this class that I've posted it in.
78

78

00:03:09.860  -->  00:03:12.920
We've firstly got an animal class with a single method.
79

79

00:03:12.920  -->  00:03:15.560
We've got two additional classes, Dog and Cat.
80

80

00:03:15.560  -->  00:03:16.860
They both extend the Animal class
81

81

00:03:16.860  -->  00:03:18.453
and each have a single method.
82

82

00:03:19.390  -->  00:03:22.727
And moving down we've got this down-cast examples class.
83

83

00:03:22.727  -->  00:03:24.189
Its got a main method but we will talk about it
84

84

00:03:24.189  -->  00:03:25.440
a little bit later.
85

85

00:03:25.440  -->  00:03:27.510
It's got three overloaded methods for test-animal
86

86

00:03:27.510  -->  00:03:28.860
which you can see there.
87

87

00:03:28.860  -->  00:03:31.900
Basically one for each of the classes we've defined above.
88

88

00:03:31.900  -->  00:03:34.160
And also down the bottom area its got two methods
89

89

00:03:34.160  -->  00:03:35.998
that specifically take a dog or cat
90

90

00:03:35.998  -->  00:03:39.160
and print the dog or cat method.
91

91

00:03:39.160  -->  00:03:40.800
Son let's actually run this and then we'll talk
92

92

00:03:40.800  -->  00:03:42.803
about what's happening in the main method.
93

93

00:03:46.570  -->  00:03:47.797
Okay, so there's the output.
94

94

00:03:47.797  -->  00:03:50.040
And we go back up to our main method.
95

95

00:03:50.040  -->  00:03:50.900
You see what we're doing there.
96

96

00:03:50.900  -->  00:03:53.670
We start off by creating instances of Dog and Cat
97

97

00:03:53.670  -->  00:03:56.590
but assigning into a variable of top animal.
98

98

00:03:56.590  -->  00:03:58.330
But then creating instances of dog and cat
99

99

00:03:58.330  -->  00:04:01.524
and assigning them to variables of the same type.
100

100

00:04:01.524  -->  00:04:03.040
Recalling our pass-through methods on these
101

101

00:04:03.040  -->  00:04:04.823
specifically typed variables,
102

102

00:04:05.790  -->  00:04:07.210
we then try the over-loaded methods
103

103

00:04:07.210  -->  00:04:09.550
with specifically typed variables.
104

104

00:04:09.550  -->  00:04:12.270
Then we finish off try the over-loaded methods again,
105

105

00:04:12.270  -->  00:04:14.840
this time with generically typed variables.
106

106

00:04:14.840  -->  00:04:16.510
Okay then we can see the code there,
107

107

00:04:16.510  -->  00:04:18.820
very basic for test animal.
108

108

00:04:18.820  -->  00:04:21.390
And the output as you can see is on the screen below.
109

109

00:04:21.390  -->  00:04:23.240
Now not more surpises there,
110

110

00:04:23.240  -->  00:04:25.160
but the other thing that you saw on the code
111

111

00:04:25.160  -->  00:04:26.610
is there's no casting either.
112

112

00:04:28.560  -->  00:04:30.750
The methods execute using the reference types
113

113

00:04:30.750  -->  00:04:32.850
we assigned the objects to.
114

114

00:04:32.850  -->  00:04:35.890
When we assigned a Dog object to a Dog reference,
115

115

00:04:35.890  -->  00:04:37.800
the call to the tests-Animal method used
116

116

00:04:37.800  -->  00:04:40.646
the overloaded method with a Dog parameter.
117

117

00:04:40.646  -->  00:04:43.089
And when we assigned a Dog object to an Animal reference,
118

118

00:04:43.089  -->  00:04:44.723
the call to the test-Animal method
119

119

00:04:44.723  -->  00:04:49.280
used the overloaded method with an Animal parameter.
120

120

00:04:49.280  -->  00:04:50.310
Right, so what I'm going to do now
121

121

00:04:50.310  -->  00:04:52.940
is I'm going to actually change the main method
122

122

00:04:52.940  -->  00:04:55.043
and I'm going to paste some new coding
123

123

00:04:55.043  -->  00:04:57.583
to replace the contents of that main method.
124

124

00:04:58.870  -->  00:05:00.290
Alright so there's the code.
125

125

00:05:00.290  -->  00:05:02.590
If you scroll up and take a look at what I've done there.
126

126

00:05:02.590  -->  00:05:04.470
I've deleted the variable declarations'
127

127

00:05:04.470  -->  00:05:06.650
specific Dog and specific Cat.
128

128

00:05:06.650  -->  00:05:09.810
And instead, with our past-through methods before,
129

129

00:05:09.810  -->  00:05:12.270
we're now casting our objects to the specific task
130

130

00:05:12.270  -->  00:05:13.860
we know the objects to be.
131

131

00:05:13.860  -->  00:05:15.887
And you can see the casting we're doing there.
132

132

00:05:15.887  -->  00:05:19.790
One is thirty-nine forty, and forty-four and forty-five.
133

133

00:05:19.790  -->  00:05:20.940
And if we run this code
134

134

00:05:23.060  -->  00:05:24.350
the out outputs on the screen there
135

135

00:05:24.350  -->  00:05:27.150
and its actually exactly the same as before,
136

136

00:05:27.150  -->  00:05:29.130
this time using casting.
137

137

00:05:29.130  -->  00:05:30.247
Alright, so let's finish the video
138

138

00:05:30.247  -->  00:05:32.010
and in the next one we'll continue on
139

139

00:05:32.010  -->  00:05:34.080
and we'll start modifying this code a bit more
140

140

00:05:34.080  -->  00:05:37.470
and what happens when we reverse the cast types by mistake.
141

141

00:05:37.470  -->  00:05:38.770
See you in the next video.
