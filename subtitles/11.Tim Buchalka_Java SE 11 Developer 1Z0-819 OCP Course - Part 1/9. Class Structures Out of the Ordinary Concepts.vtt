WEBVTT
1
1

00:00:05.430  -->  00:00:07.160
<v Instructor>So I've shown examples of code</v>
2

2

00:00:07.160  -->  00:00:09.550
with initializer blocks in the last video.
3

3

00:00:09.550  -->  00:00:12.190
The first example demonstrated the order of statements
4

4

00:00:12.190  -->  00:00:15.170
and the second demonstrated the use of local variables
5

5

00:00:15.170  -->  00:00:18.410
in the blocks and variable initialization statements.
6

6

00:00:18.410  -->  00:00:20.550
In that example, we were well behaved,
7

7

00:00:20.550  -->  00:00:22.310
and never tried to use a variable before
8

8

00:00:22.310  -->  00:00:24.910
we declared it and always referenced it
9

9

00:00:24.910  -->  00:00:26.857
with the this keyboard modifier.
10

10

00:00:26.857  -->  00:00:29.830
But let's see what happens if we relax that discipline.
11

11

00:00:29.830  -->  00:00:31.440
The exam may present sample code
12

12

00:00:31.440  -->  00:00:33.270
that expects you to be knowledgeable of something
13

13

00:00:33.270  -->  00:00:36.368
called forward variable declarations.
14

14

00:00:36.368  -->  00:00:38.100
Let's turn to our Objects project,
15

15

00:00:38.100  -->  00:00:40.220
gonna create a new class here.
16

16

00:00:40.220  -->  00:00:41.983
We'll call this one ForwardReference.
17

17

00:00:50.220  -->  00:00:51.970
All right, there's a sample code.
18

18

00:00:51.970  -->  00:00:53.270
The code's set up as follows.
19

19

00:00:53.270  -->  00:00:55.970
We're creating a package level class called Thing,
20

20

00:00:55.970  -->  00:00:57.600
which has got a constructor.
21

21

00:00:57.600  -->  00:00:59.307
Also an initializer block,
22

22

00:00:59.307  -->  00:01:00.140
which you can see on screen there,
23

23

00:01:00.140  -->  00:01:02.550
and a static initializer block as well.
24

24

00:01:02.550  -->  00:01:05.340
In addition, Thing has two instance variables
25

25

00:01:06.860  -->  00:01:08.370
and a static variable
26

26

00:01:08.370  -->  00:01:10.850
and we're implementing the toString method.
27

27

00:01:10.850  -->  00:01:13.380
Now, the main method of the class,
28

28

00:01:13.380  -->  00:01:14.760
ForwardReference in this class,
29

29

00:01:14.760  -->  00:01:16.540
instantiates an object of type Thing
30

30

00:01:16.540  -->  00:01:18.620
and prints it to the console.
31

31

00:01:18.620  -->  00:01:19.720
So if we run this now,
32

32

00:01:24.020  -->  00:01:24.930
no surprises here.
33

33

00:01:24.930  -->  00:01:27.850
We're setting variables, both static and instance variables,
34

34

00:01:27.850  -->  00:01:30.723
to String literals in the initializer blocks.
35

35

00:01:31.840  -->  00:01:34.730
And of course, as well as storing that in the constructor.
36

36

00:01:34.730  -->  00:01:35.930
All right, next what we're gonna do though
37

37

00:01:35.930  -->  00:01:39.270
is change the constructors and initializer code.
38

38

00:01:39.270  -->  00:01:40.770
What we'll do is specifically,
39

39

00:01:41.780  -->  00:01:43.710
first inside the constructor.
40

40

00:01:43.710  -->  00:01:46.871
Gonna come up here and instead of secondString equals B,
41

41

00:01:46.871  -->  00:01:48.860
I'm gonna add some code to the end of that
42

42

00:01:48.860  -->  00:01:50.743
plus thirdString.
43

43

00:01:53.820  -->  00:01:56.470
Then in the initializer down here on line 19,
44

44

00:01:56.470  -->  00:01:58.330
I'm going to do the same thing.
45

45

00:01:58.330  -->  00:02:02.090
So I'm going to do a plus thirdString.
46

46

00:02:02.090  -->  00:02:03.960
Then in the static initializer,
47

47

00:02:03.960  -->  00:02:06.690
instead of just having the assignment in there,
48

48

00:02:06.690  -->  00:02:09.090
I'm going to actually print out the thirdString.
49

49

00:02:11.170  -->  00:02:12.670
But noting where I'm actually printing it out.
50

50

00:02:12.670  -->  00:02:13.503
So thirdString.
51

51

00:02:15.240  -->  00:02:17.170
You can see straight away by doing this,
52

52

00:02:17.170  -->  00:02:18.610
I've introduced a compile error
53

53

00:02:18.610  -->  00:02:20.160
in the static initializer block.
54

54

00:02:20.160  -->  00:02:23.200
And hovering over it, illegal forward reference.
55

55

00:02:23.200  -->  00:02:26.010
You might remember that I stated in the previous video
56

56

00:02:26.010  -->  00:02:28.900
that a static initializer cannot use a static variable
57

57

00:02:28.900  -->  00:02:30.960
to clear below whatever statement
58

58

00:02:30.960  -->  00:02:33.300
other than an initialization statement.
59

59

00:02:33.300  -->  00:02:36.060
So this includes the System.out.printIn statement
60

60

00:02:36.060  -->  00:02:37.940
that we're using here.
61

61

00:02:37.940  -->  00:02:40.280
This generates an illegal forward reference compiler error
62

62

00:02:40.280  -->  00:02:42.240
as you can see on screen.
63

63

00:02:42.240  -->  00:02:43.450
Now you will note that the constructor
64

64

00:02:43.450  -->  00:02:45.150
and the initializer code are fine
65

65

00:02:46.960  -->  00:02:49.460
because thirdString is a static variable
66

66

00:02:49.460  -->  00:02:50.630
and will always be available
67

67

00:02:50.630  -->  00:02:54.070
to any instances in its initializer blocks.
68

68

00:02:54.070  -->  00:02:58.023
So let's just comment out that compile error below, line 24.
69

69

00:02:58.975  -->  00:02:59.960
All right, so let's see what happens now that
70

70

00:02:59.960  -->  00:03:01.290
in the initializer block,
71

71

00:03:01.290  -->  00:03:03.700
we changed the static firstString reference
72

72

00:03:03.700  -->  00:03:05.880
to an instance variable secondString.
73

73

00:03:05.880  -->  00:03:08.830
So I'm gonna come up there and change that to secondString.
74

74

00:03:11.070  -->  00:03:12.600
So we hover over that.
75

75

00:03:12.600  -->  00:03:13.433
Same error.
76

76

00:03:13.433  -->  00:03:15.810
We've got illegal forward reference.
77

77

00:03:15.810  -->  00:03:18.050
So again, I've introduced the compile error.
78

78

00:03:18.050  -->  00:03:19.570
This time in a legal forward reference
79

79

00:03:19.570  -->  00:03:21.560
compile area in the initializer block.
80

80

00:03:21.560  -->  00:03:23.210
So this again verifies that you cannot
81

81

00:03:23.210  -->  00:03:25.010
reference an instance variable,
82

82

00:03:25.010  -->  00:03:26.860
which is declared further on in the code
83

83

00:03:26.860  -->  00:03:28.203
in an initializer block.
84

84

00:03:29.100  -->  00:03:30.820
So I'll comment that out as well.
85

85

00:03:30.820  -->  00:03:31.790
Actually, what I'll do in this case,
86

86

00:03:31.790  -->  00:03:33.800
I'll just undo that go back to what we had before
87

87

00:03:33.800  -->  00:03:36.851
which was thirdString, which was working just fine.
88

88

00:03:36.851  -->  00:03:39.930
This time, what I'm gonna do is change the constructor
89

89

00:03:39.930  -->  00:03:42.310
to concatenate secondStting to B
90

90

00:03:42.310  -->  00:03:43.730
and reassign the value to secondString.
91

91

00:03:43.730  -->  00:03:45.630
Let's see what happens when I do that.
92

92

00:03:47.059  -->  00:03:49.133
So I change this in the constructor to second,
93

93

00:03:50.360  -->  00:03:51.300
leaving the initializer
94

94

00:03:51.300  -->  00:03:53.640
and the static initializer as they are.
95

95

00:03:53.640  -->  00:03:55.470
This time you can say we haven't got an error.
96

96

00:03:55.470  -->  00:03:57.483
The code compiles and if I run this now,
97

97

00:04:00.120  -->  00:04:03.770
we get acbnullc as the output.
98

98

00:04:03.770  -->  00:04:05.920
So let's just try one more example here.
99

99

00:04:05.920  -->  00:04:07.870
Gonna change the initializer statement.
100

100

00:04:09.870  -->  00:04:11.767
firstString equals secondString.
101

101

00:04:14.040  -->  00:04:16.170
That looks like a pretty simple initialization statement,
102

102

00:04:16.170  -->  00:04:18.520
but you can see that it's failing as well.
103

103

00:04:18.520  -->  00:04:20.930
Same error, illegal forward reference.
104

104

00:04:20.930  -->  00:04:23.370
And that's because second string cannot be fully resolved
105

105

00:04:23.370  -->  00:04:26.530
by the compiler at the time this initializer is called.
106

106

00:04:26.530  -->  00:04:29.520
It's the compiler error they're actually getting.
107

107

00:04:29.520  -->  00:04:31.410
Now, we can get around that
108

108

00:04:31.410  -->  00:04:33.263
by using this, so this dot,
109

109

00:04:34.770  -->  00:04:36.420
you can see the error is noticed up here
110

110

00:04:36.420  -->  00:04:37.850
and we can run this
111

111

00:04:39.750  -->  00:04:40.783
and the code works.
112

112

00:04:42.620  -->  00:04:44.600
So that may have been a bit unexpected.
113

113

00:04:44.600  -->  00:04:47.083
Let's go through why that's the case.
114

114

00:04:48.390  -->  00:04:51.190
When you execute initializer blocks and constructor methods,
115

115

00:04:51.190  -->  00:04:54.250
you are in a state of not quite fully initialised.
116

116

00:04:54.250  -->  00:04:57.260
Initialization occurs in these steps.
117

117

00:04:57.260  -->  00:05:00.650
One, the JVM checks which class has been initialised.
118

118

00:05:00.650  -->  00:05:02.525
If the class hasn't been initialised,
119

119

00:05:02.525  -->  00:05:04.164
JVM loads and initialises the class.
120

120

00:05:04.164  -->  00:05:07.460
The Java Virtual Machine allocates memory to house data
121

121

00:05:07.460  -->  00:05:08.900
for the new instance.
122

122

00:05:08.900  -->  00:05:11.590
Third, the JVM initialises instance variables
123

123

00:05:11.590  -->  00:05:13.130
to the default values.
124

124

00:05:13.130  -->  00:05:16.510
And four, the JVM executes custom initialization code
125

125

00:05:16.510  -->  00:05:19.800
found in assignment declarations of instance variables,
126

126

00:05:19.800  -->  00:05:22.673
initializer blocks in constructor or constructors.
127

127

00:05:23.600  -->  00:05:25.500
The compiler will not qualify variables
128

128

00:05:25.500  -->  00:05:27.950
with this implicitly until after
129

129

00:05:27.950  -->  00:05:31.000
it has evaluated all the initialization steps.
130

130

00:05:31.000  -->  00:05:32.600
Generally, it's considered an error
131

131

00:05:32.600  -->  00:05:34.540
to try and access an instance variable
132

132

00:05:34.540  -->  00:05:37.010
you haven't yet declared in initialised code
133

133

00:05:37.010  -->  00:05:39.030
and the error is a useful red flag.
134

134

00:05:39.030  -->  00:05:41.970
Now, if for some reason, you want to force the issue,
135

135

00:05:41.970  -->  00:05:44.400
and you really do mean to just use the default value
136

136

00:05:44.400  -->  00:05:46.570
assigned in step three,
137

137

00:05:46.570  -->  00:05:49.090
you can do this with the this qualifier.
138

138

00:05:49.090  -->  00:05:51.421
We saw that working in our code.
139

139

00:05:51.421  -->  00:05:52.930
All right, so moving on,
140

140

00:05:52.930  -->  00:05:56.110
in previous videos, we states initializer blocks
141

141

00:05:56.110  -->  00:05:58.750
are executed prior to the constructor block
142

142

00:05:58.750  -->  00:06:00.300
of code being executed.
143

143

00:06:00.300  -->  00:06:01.700
This is actually a statement that needs
144

144

00:06:01.700  -->  00:06:03.610
to be clarified a little bit.
145

145

00:06:03.610  -->  00:06:06.260
If your constructor called the super constructor,
146

146

00:06:06.260  -->  00:06:09.860
manually or implied, the initializer code is executed
147

147

00:06:09.860  -->  00:06:13.110
after this statement and prior to any other statements
148

148

00:06:13.110  -->  00:06:14.193
in your constructor.
149

149

00:06:15.050  -->  00:06:17.100
I think an example would serve well here.
150

150

00:06:19.291  -->  00:06:20.140
Instead of Objects project,
151

151

00:06:20.140  -->  00:06:21.390
gonna create a new class.
152

152

00:06:22.850  -->  00:06:24.513
We'll call this one InitializerOddsAndEnds.
153

153

00:06:34.569  -->  00:06:35.670
All right, so this code has a class,
154

154

00:06:35.670  -->  00:06:37.780
a super class which is a constructor
155

155

00:06:37.780  -->  00:06:40.257
as you can see there, which simply prints out
156

156

00:06:40.257  -->  00:06:41.613
the statement to the console.
157

157

00:06:42.530  -->  00:06:44.360
Middle going down, we've got another class here.
158

158

00:06:44.360  -->  00:06:47.630
A subclass that extends a superclass.
159

159

00:06:47.630  -->  00:06:50.410
This class has got an initializer block.
160

160

00:06:50.410  -->  00:06:52.870
Initializer code, you can see down there on the screen.
161

161

00:06:52.870  -->  00:06:55.780
It's a got a simple parameter constructor which we can see
162

162

00:06:55.780  -->  00:06:58.420
and that constructor explicit calls the parent constructor
163

163

00:06:58.420  -->  00:07:00.370
with super, and this class is known
164

164

00:07:00.370  -->  00:07:02.323
as a no arguments constructor.
165

165

00:07:03.540  -->  00:07:04.873
See that on line 27.
166

166

00:07:06.010  -->  00:07:08.020
Now, the InitializerOddsAndEnds class,
167

167

00:07:08.020  -->  00:07:09.520
instantiates an object.
168

168

00:07:09.520  -->  00:07:11.550
You can see that on the bottom there.
169

169

00:07:11.550  -->  00:07:15.330
Up top, ASubClass passing constructor a name.
170

170

00:07:15.330  -->  00:07:17.030
All right, so if we run this code,
171

171

00:07:19.200  -->  00:07:21.200
you can see that output as follows.
172

172

00:07:21.200  -->  00:07:23.070
So specifically, this code's demonstrating
173

173

00:07:23.070  -->  00:07:26.003
that the parent constructor called by super,
174

174

00:07:27.970  -->  00:07:29.910
there's the original superclass
175

175

00:07:29.910  -->  00:07:31.430
and there's the,
176

176

00:07:31.430  -->  00:07:34.033
you scroll down, there's the super call on line 34.
177

177

00:07:35.350  -->  00:07:37.100
So the parent constructor called by supra
178

178

00:07:37.100  -->  00:07:40.510
is executed before the child initializer blocks
179

179

00:07:40.510  -->  00:07:42.960
which were inserted before the other statements
180

180

00:07:42.960  -->  00:07:43.977
in a child constructor code
181

181

00:07:43.977  -->  00:07:46.329
and you can see that's confirmed
182

182

00:07:46.329  -->  00:07:47.350
in the output down the bottom.
183

183

00:07:47.350  -->  00:07:48.880
So if we go ahead and make a change here
184

184

00:07:48.880  -->  00:07:53.180
and change super on line 34 in a subclass constructor,
185

185

00:07:53.180  -->  00:07:57.653
change that to this, execute the code.
186

186

00:08:01.950  -->  00:08:03.940
So this looks similar to what we saw previously,
187

187

00:08:03.940  -->  00:08:05.140
except now we've got a statement
188

188

00:08:05.140  -->  00:08:07.090
from the no args constructor.
189

189

00:08:07.090  -->  00:08:09.070
So we can see from this that the call to this
190

190

00:08:09.070  -->  00:08:12.513
was executed now after the initializer block.
191

191

00:08:13.540  -->  00:08:15.300
So a call to super was implied
192

192

00:08:15.300  -->  00:08:17.370
and doesn't need to be called explicitly.
193

193

00:08:17.370  -->  00:08:20.180
It's still a code before the initializer block, though.
194

194

00:08:20.180  -->  00:08:21.193
Now I talked more about this
195

195

00:08:21.193  -->  00:08:23.760
earlier in the course on inheritance.
196

196

00:08:23.760  -->  00:08:25.920
But just something to keep in mind.
197

197

00:08:25.920  -->  00:08:28.300
All right, so coming up, we've got some quiz questions
198

198

00:08:28.300  -->  00:08:30.210
which review what we've talked about
199

199

00:08:30.210  -->  00:08:31.170
in this second of the course.
200

200

00:08:31.170  -->  00:08:32.003
Good luck with that,
201

201

00:08:32.003  -->  00:08:33.760
and I'll catch up with you after that.
