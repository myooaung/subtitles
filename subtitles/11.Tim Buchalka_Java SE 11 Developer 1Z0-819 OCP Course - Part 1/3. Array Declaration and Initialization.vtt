WEBVTT
1
1

00:00:04.990  -->  00:00:07.900
<v Tim>So, the Java Array is a useful data structure,</v>
2

2

00:00:07.900  -->  00:00:11.260
but it comes with limited methods for manipulating the data.
3

3

00:00:11.260  -->  00:00:15.150
So hence, manipulating arrays usually includes utilising
4

4

00:00:15.150  -->  00:00:18.270
the java.util.Arrays utility class,
5

5

00:00:18.270  -->  00:00:21.180
which I'll describe in more detail in the next video.
6

6

00:00:21.180  -->  00:00:23.150
For our first example, in this video,
7

7

00:00:23.150  -->  00:00:25.630
I'll demonstrate using the array length attribute,
8

8

00:00:25.630  -->  00:00:27.590
accessing elements and changing elements
9

9

00:00:27.590  -->  00:00:29.330
in a single dimensional array.
10

10

00:00:29.330  -->  00:00:32.540
And also I go over the java.util.Arrays class,
11

11

00:00:32.540  -->  00:00:35.330
we will be using the arrays utility class static method
12

12

00:00:35.330  -->  00:00:37.550
to string to print the array contents
13

13

00:00:37.550  -->  00:00:39.750
in a comment delimited string to the output.
14

14

00:00:40.767  -->  00:00:42.860
Alright, so I've got a new project to find here in Arrays.
15

15

00:00:42.860  -->  00:00:45.570
I'mma going to create the first class for that project.
16

16

00:00:45.570  -->  00:00:47.836
I'mma call this one Arrays First Example.
17

17

00:00:47.836  -->  00:00:51.586
(typing)
18

18

00:00:55.410  -->  00:00:56.710
All right, so this Code,
19

19

00:00:56.710  -->  00:00:59.630
you can see on screen firstly declares an array event
20

20

00:00:59.630  -->  00:01:01.750
and also declares an array of integer
21

21

00:01:02.830  -->  00:01:04.860
and then prints both using arrays to
22

22

00:01:04.860  -->  00:01:07.930
string the static method to demonstrate that array values,
23

23

00:01:07.930  -->  00:01:09.543
even ones in local variable arrays
24

24

00:01:09.543  -->  00:01:11.640
are set to default values.
25

25

00:01:11.640  -->  00:01:13.320
Next, moving down the list there,
26

26

00:01:13.320  -->  00:01:15.330
I'm demonstrating setting values to individual
27

27

00:01:15.330  -->  00:01:16.540
members of arrays,
28

28

00:01:16.540  -->  00:01:18.680
and then also retrieving values of
29

29

00:01:18.680  -->  00:01:20.530
individual members arrays.
30

30

00:01:20.530  -->  00:01:23.739
So, that's the code we're going to run this code now.
31

31

00:01:23.739  -->  00:01:25.940
(mouse clicks)
32

32

00:01:25.940  -->  00:01:28.090
So, there's the app put on the screen demonstrating that
33

33

00:01:28.090  -->  00:01:31.610
the array of integer wrapper objects was each set to know
34

34

00:01:31.610  -->  00:01:33.770
and another instantiated integer objects
35

35

00:01:33.770  -->  00:01:35.580
with a value of zero.
36

36

00:01:35.580  -->  00:01:37.170
And you can see the our initial values there,
37

37

00:01:37.170  -->  00:01:39.020
default values for an interest well,
38

38

00:01:39.020  -->  00:01:42.190
and the values after the loop and final values.
39

39

00:01:42.190  -->  00:01:43.700
Right, so let's see what happens now when we
40

40

00:01:43.700  -->  00:01:46.110
create new array references and assign
41

41

00:01:46.110  -->  00:01:48.370
the current array references to them.
42

42

00:01:48.370  -->  00:01:51.130
So, got some current and I'll paste in the end.
43

43

00:01:51.130  -->  00:01:52.350
(keyboard clanking)
44

44

00:01:52.350  -->  00:01:53.810
Okay, so there's the code.
45

45

00:01:53.810  -->  00:01:56.290
So, if you scroll back up to the code that I pasted in,
46

46

00:01:56.290  -->  00:01:57.400
you can see it starts there,
47

47

00:01:57.400  -->  00:01:59.680
the code I pasted in starts on line 51.
48

48

00:01:59.680  -->  00:02:01.550
So, I can see that we're creating a new intArray,
49

49

00:02:01.550  -->  00:02:05.078
intArray two, and assigning it to intArray,
50

50

00:02:05.078  -->  00:02:08.080
and also a new integer array, integer array two,
51

51

00:02:08.080  -->  00:02:10.840
that we're assigning to integer array.
52

52

00:02:10.840  -->  00:02:12.780
So, after signing it as we scroll down and
53

53

00:02:12.780  -->  00:02:13.613
have a look there,
54

54

00:02:13.613  -->  00:02:14.970
instead, we're printing it out, and then
55

55

00:02:14.970  -->  00:02:17.260
we're making some changes to the first array
56

56

00:02:17.260  -->  00:02:19.040
to see what actually happens.
57

57

00:02:19.040  -->  00:02:20.572
Right, let's run...
58

58

00:02:20.572  -->  00:02:23.650
(mouse clicking)
59

59

00:02:23.650  -->  00:02:26.270
this crop so you can see all the final output.
60

60

00:02:26.270  -->  00:02:28.110
So, this demonstrates that a change to an
61

61

00:02:28.110  -->  00:02:30.000
element referenced by one array,
62

62

00:02:30.000  -->  00:02:33.030
is reflected when the second array is printed,
63

63

00:02:33.030  -->  00:02:35.040
since both array variables are referencing
64

64

00:02:35.040  -->  00:02:36.633
the same set of objects.
65

65

00:02:37.690  -->  00:02:38.950
Alright, so in the next video,
66

66

00:02:38.950  -->  00:02:41.610
we'll talk about the ways to manipulate array data
67

67

00:02:41.610  -->  00:02:45.310
and examine the Java.util.arrays class more closely,
68

68

00:02:45.310  -->  00:02:47.190
similarly to what we did with the string class,
69

69

00:02:47.190  -->  00:02:48.960
classifying the methods and focusing on some
70

70

00:02:48.960  -->  00:02:50.300
of the ones which might not be
71

71

00:02:50.300  -->  00:02:52.180
part of your daily programming diet.
72

72

00:02:52.180  -->  00:02:53.513
See you in the next video.
