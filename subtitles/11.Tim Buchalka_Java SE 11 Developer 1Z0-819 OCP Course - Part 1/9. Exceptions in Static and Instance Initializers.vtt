WEBVTT
1
1

00:00:04.979  -->  00:00:06.480
<v Tim>All right so let's talk about exceptions</v>
2

2

00:00:06.480  -->  00:00:08.740
which occur during the initialization
3

3

00:00:08.740  -->  00:00:10.690
of a class or an object.
4

4

00:00:10.690  -->  00:00:13.450
So we need to create a new class in our exceptions project.
5

5

00:00:13.450  -->  00:00:15.450
I'm gonna call it InitializerExceptions.
6

6

00:00:26.330  -->  00:00:28.650
So in this code, we've got a class StaticTest
7

7

00:00:28.650  -->  00:00:30.550
that's got two static fields,
8

8

00:00:30.550  -->  00:00:32.290
and it's also got a Static Initializer
9

9

00:00:32.290  -->  00:00:33.560
as you can see there.
10

10

00:00:33.560  -->  00:00:36.510
Now I've introduced an error in that Static Initializer.
11

11

00:00:36.510  -->  00:00:39.340
Now the class InitializerExceptions as we move down
12

12

00:00:39.340  -->  00:00:42.520
just tries to print the currentMessage of StaticTest.
13

13

00:00:42.520  -->  00:00:44.130
So the current obviously compiles.
14

14

00:00:44.130  -->  00:00:47.790
No errors, but if we run it,
15

15

00:00:47.790  -->  00:00:51.390
we got a java.lang.ExceptionInInitializerError.
16

16

00:00:51.390  -->  00:00:53.120
So you might be thinking that we can fix it
17

17

00:00:53.120  -->  00:00:55.850
in our main method with a try catch.
18

18

00:00:55.850  -->  00:00:57.560
So let's replace our main method
19

19

00:00:57.560  -->  00:00:59.217
with some code to test out.
20

20

00:01:02.290  -->  00:01:03.570
So you now can see what we've done there
21

21

00:01:03.570  -->  00:01:06.590
is we've wrapped it in a try catch, catching Exception,
22

22

00:01:06.590  -->  00:01:10.237
and if we run this, we actually get the same thing,
23

23

00:01:10.237  -->  00:01:12.870
ExceptionInInitializerError.
24

24

00:01:12.870  -->  00:01:15.640
If an exception occurs in a static initializer,
25

25

00:01:15.640  -->  00:01:18.320
the Java virtual machine cannot recover from it.
26

26

00:01:18.320  -->  00:01:21.370
The Static Initializer needs to handle the situation itself.
27

27

00:01:21.370  -->  00:01:23.263
So we're gonna undo that last change.
28

28

00:01:24.420  -->  00:01:25.930
So we'll go back to our original main method
29

29

00:01:25.930  -->  00:01:27.170
as it looks like there,
30

30

00:01:27.170  -->  00:01:30.050
and let's go ahead and change the Static Initializer,
31

31

00:01:30.050  -->  00:01:32.810
and we'll get it to resolve the error itself.
32

32

00:01:32.810  -->  00:01:35.663
So I'm got to replace the code for the Static Initializer.
33

33

00:01:36.500  -->  00:01:37.930
You can see we've introduced a try
34

34

00:01:37.930  -->  00:01:40.130
and a finally as well there now,
35

35

00:01:40.130  -->  00:01:41.400
and no compile errors.
36

36

00:01:41.400  -->  00:01:42.373
We can run this,
37

37

00:01:44.000  -->  00:01:47.170
but again, we've got an exception in initializer error.
38

38

00:01:47.170  -->  00:01:48.473
So that also fails.
39

39

00:01:50.790  -->  00:01:53.010
A finally clause is always executed,
40

40

00:01:53.010  -->  00:01:54.810
but if a new exception is not created
41

41

00:01:54.810  -->  00:01:56.410
in the finally clause,
42

42

00:01:56.410  -->  00:01:59.210
the Java Virtual Machine still looks for the calling method
43

43

00:01:59.210  -->  00:02:02.070
to handle the exception, which does not happen here.
44

44

00:02:02.070  -->  00:02:04.280
Now this is true of any finally clause,
45

45

00:02:04.280  -->  00:02:06.950
not just one in a static initializer method.
46

46

00:02:06.950  -->  00:02:09.750
The Java Virtual Machine won't initialise the class
47

47

00:02:09.750  -->  00:02:10.920
with the exception thrown
48

48

00:02:10.920  -->  00:02:13.430
even though we now have a finally clause.
49

49

00:02:13.430  -->  00:02:15.330
So can we catch and fix the exception?
50

50

00:02:16.690  -->  00:02:18.510
So I'm gonna change the code again.
51

51

00:02:18.510  -->  00:02:20.260
Basically we're gonna add a catch
52

52

00:02:20.260  -->  00:02:21.310
to the existing code,
53

53

00:02:24.352  -->  00:02:25.440
to see we've now got a try catch
54

54

00:02:25.440  -->  00:02:27.392
and still got the finally.
55

55

00:02:27.392  -->  00:02:32.350
If we run this, the code compiled obviously
56

56

00:02:32.350  -->  00:02:34.530
and now executes, so that confirms
57

57

00:02:34.530  -->  00:02:37.460
that you can use try catch in your Static Initializer,
58

58

00:02:37.460  -->  00:02:39.510
and we resolve the problem by doing that.
59

59

00:02:40.600  -->  00:02:41.640
All right, but moving on from there,
60

60

00:02:41.640  -->  00:02:43.750
what happens if we throw an exception
61

61

00:02:43.750  -->  00:02:45.000
in the catch clause here,
62

62

00:02:46.100  -->  00:02:48.360
and below the output I'm just gonna throw
63

63

00:02:48.360  -->  00:02:49.470
an exception there.
64

64

00:02:49.470  -->  00:02:50.840
Now you can see that it results straight away
65

65

00:02:50.840  -->  00:02:53.100
in an compiler error, unhandled exception
66

66

00:02:53.100  -->  00:02:55.050
java.lang.Exception.
67

67

00:02:55.050  -->  00:02:57.380
The reason Exception is a checked Exception,
68

68

00:02:57.380  -->  00:03:00.390
so let's change that instead to a RuntimeException.
69

69

00:03:03.430  -->  00:03:05.920
The error has now disappeared as you can see,
70

70

00:03:05.920  -->  00:03:07.233
but if we run the code,
71

71

00:03:08.470  -->  00:03:09.763
compiled okay obviously,
72

72

00:03:10.670  -->  00:03:13.000
but we're back to a same problem we had earlier,
73

73

00:03:13.000  -->  00:03:16.840
java.lang.ExceptionInInitializerError.
74

74

00:03:16.840  -->  00:03:19.260
The rules for checked, unchecked exceptions
75

75

00:03:19.260  -->  00:03:22.150
still hold true for Static Initializers,
76

76

00:03:22.150  -->  00:03:24.210
but you'll notice that for your Static Initializer
77

77

00:03:24.210  -->  00:03:26.410
you can't declare a throws clause,
78

78

00:03:26.410  -->  00:03:29.190
so therefore you must handle a checked exception
79

79

00:03:29.190  -->  00:03:31.840
that occurs in a Static Initializer.
80

80

00:03:31.840  -->  00:03:33.893
So let's remove the throw statement,
81

81

00:03:36.980  -->  00:03:38.690
and we're back to code that compiles
82

82

00:03:38.690  -->  00:03:40.193
obviously, but also runs.
83

83

00:03:41.620  -->  00:03:43.290
All right so that's Static Initializers.
84

84

00:03:43.290  -->  00:03:45.957
Let's now look at regular initializers,
85

85

00:03:45.957  -->  00:03:47.670
and we're gonna add some code
86

86

00:03:47.670  -->  00:03:50.440
to our initializer exception class.
87

87

00:03:50.440  -->  00:03:52.803
We're gonna create a regular initializer,
88

88

00:03:55.643  -->  00:03:57.293
and I'm gonna accept that import,
89

89

00:03:58.450  -->  00:04:00.660
and we have a look at the error
90

90

00:04:00.660  -->  00:04:04.730
it's the familiar Unhandled exception java.io Exception,
91

91

00:04:04.730  -->  00:04:06.360
but how do we handle that here.
92

92

00:04:06.360  -->  00:04:09.240
Now we could handle it with an enclosing try, catch plug
93

93

00:04:09.240  -->  00:04:11.250
as we did with the Static Initializer,
94

94

00:04:11.250  -->  00:04:13.110
but for an instance initializer,
95

95

00:04:13.110  -->  00:04:14.770
we've also got another option.
96

96

00:04:14.770  -->  00:04:17.510
Since the instance initializer code is executed
97

97

00:04:17.510  -->  00:04:18.980
in the constructor method,
98

98

00:04:18.980  -->  00:04:21.870
we can instead add a throws declaration to the constructor.
99

99

00:04:21.870  -->  00:04:23.380
So let's have a look at that.
100

100

00:04:23.380  -->  00:04:25.430
I'm gonna add the constructor below this.
101

101

00:04:27.840  -->  00:04:29.200
Now you can see soon as I've done that,
102

102

00:04:29.200  -->  00:04:30.810
the errors disappeared.
103

103

00:04:30.810  -->  00:04:32.823
So the code obviously compiles and runs,
104

104

00:04:34.830  -->  00:04:36.440
but we're not doing at the moment
105

105

00:04:36.440  -->  00:04:38.220
is testing the constructor.
106

106

00:04:38.220  -->  00:04:39.730
So let's actually add the segment of code
107

107

00:04:39.730  -->  00:04:43.550
after the last statement in the main method down here
108

108

00:04:43.550  -->  00:04:45.473
to actually test out our constructor.
109

109

00:04:48.290  -->  00:04:49.440
Let's now run the code,
110

110

00:04:51.144  -->  00:04:53.020
and we can we've actually got it clear in the error,
111

111

00:04:53.020  -->  00:04:54.960
whoops and obviously the whoops comes
112

112

00:04:54.960  -->  00:04:57.163
from our instance initializer block.
113

113

00:04:58.093  -->  00:04:59.890
All right, so let's add another constructor
114

114

00:04:59.890  -->  00:05:02.910
that's got to tell one parameter of top string.
115

115

00:05:02.910  -->  00:05:04.960
We'll upload the existing initializer,
116

116

00:05:04.960  -->  00:05:06.560
the existing constructor rather.
117

117

00:05:08.600  -->  00:05:10.280
This code causes a compiler error.
118

118

00:05:10.280  -->  00:05:13.970
Unhandled exception again, if your instance initializer
119

119

00:05:13.970  -->  00:05:15.960
throws an unchecked exception,
120

120

00:05:15.960  -->  00:05:17.940
every constructor in your class must declare
121

121

00:05:17.940  -->  00:05:20.770
the exception in its throw declaration.
122

122

00:05:20.770  -->  00:05:22.690
So let's verify the statement.
123

123

00:05:22.690  -->  00:05:23.840
So maybe you think you can just add
124

124

00:05:23.840  -->  00:05:24.673
a try catch in the constructor
125

125

00:05:24.673  -->  00:05:27.380
and then that should work since the initializer
126

126

00:05:27.380  -->  00:05:29.590
is executed as part of the constructor.
127

127

00:05:29.590  -->  00:05:31.180
So let's try that.
128

128

00:05:31.180  -->  00:05:33.883
I'm gonna paste that into our second constructor.
129

129

00:05:35.030  -->  00:05:36.670
So we've fixed one compiler error
130

130

00:05:36.670  -->  00:05:38.060
on the constructor declaration,
131

131

00:05:38.060  -->  00:05:40.820
but we've got another one indicating
132

132

00:05:40.820  -->  00:05:43.510
that an IOException is never thrown in the try block.
133

133

00:05:43.510  -->  00:05:45.680
The instance initializer code will be executed
134

134

00:05:45.680  -->  00:05:48.630
before the try catch block we've just created,
135

135

00:05:48.630  -->  00:05:51.250
and not be wrapped in the try block as a result.
136

136

00:05:51.250  -->  00:05:53.270
The only way to get your code to compile
137

137

00:05:53.270  -->  00:05:55.080
is to have every constructor declare
138

138

00:05:55.080  -->  00:05:58.320
the exception in its throw clause.
139

139

00:05:58.320  -->  00:06:01.673
So I'm gonna remove this second constructor in our code.
140

140

00:06:04.850  -->  00:06:06.867
All right so what's the impact of having a constructor
141

141

00:06:06.867  -->  00:06:09.430
declare an exception in this throw clause?
142

142

00:06:09.430  -->  00:06:10.870
Well let's explore that.
143

143

00:06:10.870  -->  00:06:14.280
So what we're gonna do is create a nested SubClass
144

144

00:06:14.280  -->  00:06:16.787
named subclass which extends our current class,
145

145

00:06:16.787  -->  00:06:17.847
and we're gonna paste that
146

146

00:06:17.847  -->  00:06:22.123
in our initializer exceptions class,
147

147

00:06:24.244  -->  00:06:25.600
and you can see that straight away
148

148

00:06:25.600  -->  00:06:27.860
that results in a compiler error
149

149

00:06:27.860  -->  00:06:29.470
indicating that this SubClass has
150

150

00:06:29.470  -->  00:06:31.800
an unhandled exception IOException.
151

151

00:06:31.800  -->  00:06:33.920
Now we didn't create the constructor for our SubClass,
152

152

00:06:33.920  -->  00:06:36.680
and therefore, the JVM implicitly creates
153

153

00:06:36.680  -->  00:06:38.580
a no args constructor for us
154

154

00:06:38.580  -->  00:06:40.140
which we'll just call super,
155

155

00:06:40.140  -->  00:06:42.290
which does have the throws declaration.
156

156

00:06:42.290  -->  00:06:44.690
So let's create our own constructor in SubClass.
157

157

00:06:51.130  -->  00:06:52.547
So we've now got an error in our constructor,
158

158

00:06:52.547  -->  00:06:54.560
unhandled exception again.
159

159

00:06:54.560  -->  00:06:56.660
Let's add a super call to the constructor,
160

160

00:06:59.290  -->  00:07:00.720
and you can see that our compiler error
161

161

00:07:00.720  -->  00:07:02.760
has now changed to the line that's on the super,
162

162

00:07:02.760  -->  00:07:04.520
or that is the super statement.
163

163

00:07:04.520  -->  00:07:07.650
Same error again, so if we change our code one more time
164

164

00:07:07.650  -->  00:07:09.653
by wrapping it in a try catch,
165

165

00:07:12.200  -->  00:07:13.860
we've still got a problem with the code.
166

166

00:07:13.860  -->  00:07:15.250
What's wrong with this code?
167

167

00:07:15.250  -->  00:07:16.233
If we hover over super,
168

168

00:07:16.233  -->  00:07:18.000
call to super must be the first statement
169

169

00:07:18.000  -->  00:07:19.220
in the constructor body.
170

170

00:07:19.220  -->  00:07:21.410
So unfortunately, super now is no longer considered
171

171

00:07:21.410  -->  00:07:23.240
the first line of the constructor.
172

172

00:07:23.240  -->  00:07:25.140
So we're caught between a rock and a hard place.
173

173

00:07:25.140  -->  00:07:28.490
Our only solution is to create a no args constructor
174

174

00:07:28.490  -->  00:07:31.990
that declares the same exception or a broader one
175

175

00:07:31.990  -->  00:07:34.250
than your super classes constructor.
176

176

00:07:34.250  -->  00:07:36.408
So if I replace the constructor,
177

177

00:07:36.408  -->  00:07:38.908
the existing constructor code,
178

178

00:07:40.105  -->  00:07:41.115
the error's now disappeared
179

179

00:07:41.115  -->  00:07:42.280
and you can see we're now just throwing
180

180

00:07:42.280  -->  00:07:44.313
the exceptions in our constructor.
181

181

00:07:47.027  -->  00:07:48.550
All right so what have we learned about exceptions
182

182

00:07:48.550  -->  00:07:50.270
in initializer statements?
183

183

00:07:50.270  -->  00:07:53.280
Firstly, an unhandled exception in a static initializer
184

184

00:07:53.280  -->  00:07:55.360
is fatal to the application,
185

185

00:07:55.360  -->  00:07:58.930
checked or not checked, if the class is ever initialised.
186

186

00:07:58.930  -->  00:08:01.220
A checked exception in a static initializer
187

187

00:08:01.220  -->  00:08:03.860
is a compiler error that can only be caught and handled
188

188

00:08:03.860  -->  00:08:06.560
by the static initializer code itself.
189

189

00:08:06.560  -->  00:08:09.300
An unhandled exception in an instance initializer
190

190

00:08:09.300  -->  00:08:11.023
is not fatal to the application.
191

191

00:08:13.000  -->  00:08:15.090
A checked exception in an instance initializer
192

192

00:08:15.090  -->  00:08:18.220
that is not caught and handled by the instance initializer
193

193

00:08:18.220  -->  00:08:20.080
code itself is allowable
194

194

00:08:20.080  -->  00:08:22.550
if and only if all constructors declare
195

195

00:08:22.550  -->  00:08:24.960
the exception in their throws clauses.
196

196

00:08:24.960  -->  00:08:27.830
A no args constructor with a throws declaration
197

197

00:08:27.830  -->  00:08:29.610
that includes a checked exception
198

198

00:08:29.610  -->  00:08:32.380
will cause trouble for any class that extends it
199

199

00:08:32.380  -->  00:08:35.210
which does not also declare a no args constructor
200

200

00:08:35.210  -->  00:08:37.960
that either throws the same exception or a broader one.
201

201

00:08:38.940  -->  00:08:40.660
All right so that's the end of this video.
202

202

00:08:40.660  -->  00:08:43.740
You got some quiz questions coming up for exception handling
203

203

00:08:43.740  -->  00:08:46.950
and then we'll move onto section 12 understanding modules.
204

204

00:08:46.950  -->  00:08:48.350
See you in the next section.
