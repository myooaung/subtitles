WEBVTT
1
1

00:00:05.571  -->  00:00:07.730 line:15% 
<v ->All right, so let's start now looking at exceptions</v>
2

2

00:00:07.730  -->  00:00:08.800 line:15% 
in code.
3

3

00:00:08.800  -->  00:00:10.820
So, I've got a new project that I've created in
4

4

00:00:10.820  -->  00:00:13.920
IntelliJ called "Exceptions" and what we need to do is
5

5

00:00:13.920  -->  00:00:17.407
create a new class and call it "Throbble" Examples.
6

6

00:00:17.407  -->  00:00:19.893
(clicking)
7

7

00:00:19.893  -->  00:00:22.518
(typing)
8

8

00:00:22.518  -->  00:00:24.768
(clicking)
9

9

00:00:25.870  -->  00:00:29.490
So this code shows the basic constructs of a try-catch block
10

10

00:00:29.490  -->  00:00:32.350
surrounding code we know could throw an error and hopefully
11

11

00:00:32.350  -->  00:00:34.850
will in our case because it's not likely any of us have file
12

12

00:00:34.850  -->  00:00:37.130
called "This underscore file underscore
13

13

00:00:37.130  -->  00:00:39.940
does underscore not underscore exist dot out"
14

14

00:00:39.940  -->  00:00:42.280
in the current working directory of our project.
15

15

00:00:42.280  -->  00:00:45.700
You'll see that we're catching an object named "error"
16

16

00:00:45.700  -->  00:00:48.960
of top Throwable which means we will catch every error
17

17

00:00:48.960  -->  00:00:51.630
there is with this particular exception handler.
18

18

00:00:51.630  -->  00:00:54.370
Once will I print the hierarchy of the throwable object
19

19

00:00:54.370  -->  00:00:57.530
caught so we can identify if it's an error or an exception.
20

20

00:00:57.530  -->  00:00:59.530
You can see that there's a code called "print errors
21

21

00:00:59.530  -->  00:01:01.350
structure" method.
22

22

00:01:01.350  -->  00:01:04.150
And that's that method there on the screen.
23

23

00:01:04.150  -->  00:01:05.425
All right! So let's run this.
24

24

00:01:05.425  -->  00:01:07.675
(clicking)
25

25

00:01:08.730  -->  00:01:10.000
I'm looking at the output.
26

26

00:01:10.000  -->  00:01:12.620
It shows that we actually caught a "File not found"
27

27

00:01:12.620  -->  00:01:15.790
exception which is a subclass of I.O. exception
28

28

00:01:15.790  -->  00:01:17.300
as you can see.
29

29

00:01:17.300  -->  00:01:20.430
Right, so let's now add a method to our class.
30

30

00:01:20.430  -->  00:01:22.317
We're going to add it down here.
31

31

00:01:22.317  -->  00:01:23.980
(clicking)
32

32

00:01:23.980  -->  00:01:25.826
You see, this one's got a mocking error there.
33

33

00:01:25.826  -->  00:01:27.690
What we need to do is accept that import as well
34

34

00:01:27.690  -->  00:01:28.743
for I.O. error.
35

35

00:01:30.866  -->  00:01:33.123
As you can see I.O error comes from java dot IO.
36

36

00:01:34.270  -->  00:01:36.450
And what we want to do is actually throw an error
37

37

00:01:36.450  -->  00:01:38.230
which we'll do by invoking this method and we're going to
38

38

00:01:38.230  -->  00:01:41.513
do that basically back up here in the try-catch block.
39

39

00:01:42.580  -->  00:01:45.060
We're going to put this in the very first line above the
40

40

00:01:45.060  -->  00:01:46.200
File Input Stream.
41

41

00:01:46.200  -->  00:01:50.640
So I'm just going to do a "T-E" "dot" "throw an error."
42

42

00:01:50.640  -->  00:01:52.065
If I rerun the code now,
43

43

00:01:52.065  -->  00:01:54.510
(clicks)
44

44

00:01:54.510  -->  00:01:57.080
you see the error caught down at the bottom is "java dot IO
45

45

00:01:57.080  -->  00:01:58.123
Dot IO Error"
46

46

00:02:00.470  -->  00:02:03.430
So this was a very generic example that didn't discriminate
47

47

00:02:03.430  -->  00:02:06.870
between error or exception or between the two significant
48

48

00:02:06.870  -->  00:02:10.820
categories of exception, "Checked" and "Not Checked."
49

49

00:02:10.820  -->  00:02:13.580
So this table explains what types of errors are checked and
50

50

00:02:13.580  -->  00:02:15.650
unchecked exceptions.
51

51

00:02:15.650  -->  00:02:19.150
Firstly, the class type Throwable or any custom exception,
52

52

00:02:19.150  -->  00:02:22.410
which extends Throwable, it's a checked exception
53

53

00:02:22.410  -->  00:02:25.760
And yes, it must satisfy the catch or specify requirement.
54

54

00:02:25.760  -->  00:02:28.550
Next, we've got Error or any custom exception which extends
55

55

00:02:28.550  -->  00:02:30.570
error that's an unchecked exception.
56

56

00:02:30.570  -->  00:02:33.140
And no, it doesn't need to satisfy the catch or specify
57

57

00:02:33.140  -->  00:02:34.300
requirement.
58

58

00:02:34.300  -->  00:02:38.060
Third. Exception. That's any exception subclassed directly
59

59

00:02:38.060  -->  00:02:41.460
or indirectly from RuntimeException and these are called
60

60

00:02:41.460  -->  00:02:43.273
runtime exceptions, unsurprisingly.
61

61

00:02:44.190  -->  00:02:47.320
Unchecked exception in this scenario and "No" to the catch
62

62

00:02:47.320  -->  00:02:48.710
or specify requirement.
63

63

00:02:48.710  -->  00:02:50.470
And the fourth one, Exception.
64

64

00:02:50.470  -->  00:02:53.000
Any exception not subclassed from RuntimeException or
65

65

00:02:53.000  -->  00:02:54.460
its subclasses.
66

66

00:02:54.460  -->  00:02:56.447
It's a checked exception and yes, it must satisfy the
67

67

00:02:56.447  -->  00:02:58.503
catch or specify requirement.
68

68

00:03:01.482  -->  00:03:04.750
And to confirm here, a checked exception is a special
69

69

00:03:04.750  -->  00:03:07.830
designation, for a group of exceptions that the compiler
70

70

00:03:07.830  -->  00:03:12.120
forces compliance of 'The Catch or Specify' requirement.
71

71

00:03:12.120  -->  00:03:15.373
An unchecked exception will not be checked by the compiler.
72

72

00:03:17.360  -->  00:03:20.480
Now before I explain 'The Catch or Specify' requirement,
73

73

00:03:20.480  -->  00:03:22.520
let's look at some runtime exceptions.
74

74

00:03:22.520  -->  00:03:24.940
There are many more and reviewing all of them prior to the
75

75

00:03:24.940  -->  00:03:27.820
exam might be helpful, but in this table I'm going to list
76

76

00:03:27.820  -->  00:03:30.500
most of the common ones that you're probably already
77

77

00:03:30.500  -->  00:03:31.760
familiar with.
78

78

00:03:31.760  -->  00:03:34.847
So arithmetic exception - An example there an integer
79

79

00:03:34.847  -->  00:03:38.170
"divide by zero" throws and instance of this class.
80

80

00:03:38.170  -->  00:03:41.460
Array Index Out of Bounds Exception thrown to indicate that
81

81

00:03:41.460  -->  00:03:44.080
an array has been accessed with an illegal index.
82

82

00:03:44.080  -->  00:03:47.420
Array Store Exception - an attempt made to store the wrong
83

83

00:03:47.420  -->  00:03:50.040
type of object into an array of objects.
84

84

00:03:50.040  -->  00:03:53.400
Class Cast Exception - attempting to cast an object to a
85

85

00:03:53.400  -->  00:03:55.693
subclass of which it is not an instance.
86

86

00:03:57.900  -->  00:04:01.620
Index out of Bounds Exception - thrown to indicate that an
87

87

00:04:01.620  -->  00:04:04.530
index of some sort (such as to an array, to a string, or to
88

88

00:04:04.530  -->  00:04:06.450
a vector) is out of range.
89

89

00:04:06.450  -->  00:04:09.670
Negative Array Size Exception - thrown if an application
90

90

00:04:09.670  -->  00:04:12.850
tries to create an array with negative size.
91

91

00:04:12.850  -->  00:04:15.380
Null Pointer Exception - thrown when an application attempts
92

92

00:04:15.380  -->  00:04:18.870
to use null in a case where an object is required.
93

93

00:04:18.870  -->  00:04:22.120
And um Security Exception - thrown by the security manager
94

94

00:04:22.120  -->  00:04:24.670
to indicate a security violation.
95

95

00:04:24.670  -->  00:04:27.760
Because these are runtime exceptions, the compiler doesn't
96

96

00:04:27.760  -->  00:04:30.610
force you to write code to check for the exception.
97

97

00:04:30.610  -->  00:04:33.740
In other words, the try/catch block or specify the exception
98

98

00:04:33.740  -->  00:04:37.173
in the throws section of the wrapping method declaration.
99

99

00:04:39.660  -->  00:04:43.380
Only a check exception requires compliance, to 'The Catch or
100

100

00:04:43.380  -->  00:04:45.230
Specify' requirement.
101

101

00:04:45.230  -->  00:04:48.520
I repeat that a checked exception is neither an Error, nor a
102

102

00:04:48.520  -->  00:04:49.840
runtime exception.
103

103

00:04:49.840  -->  00:04:52.217
Stated in another way. Errors and runtime exceptions are
104

104

00:04:52.217  -->  00:04:55.410
unchecked exceptions, everything else is a checked
105

105

00:04:55.410  -->  00:04:56.243
exception.
106

106

00:04:57.770  -->  00:05:00.810
The Catch or Specify Requirement states that code that might
107

107

00:05:00.810  -->  00:05:04.140
throw certain exceptions, must be enclosed by either of the
108

108

00:05:04.140  -->  00:05:05.010
following:
109

109

00:05:05.010  -->  00:05:07.470
A try statement that catches the exception.
110

110

00:05:07.470  -->  00:05:09.960
The try must provide an appropriate handler for the
111

111

00:05:09.960  -->  00:05:11.010
exception.
112

112

00:05:11.010  -->  00:05:14.190
Or a method that specifies that it can throw the exception.
113

113

00:05:14.190  -->  00:05:17.200
The method must provide a throws clause that lists the
114

114

00:05:17.200  -->  00:05:20.070
exception or an appropriate exception type.
115

115

00:05:20.070  -->  00:05:22.330
So why does Java have these two different types of
116

116

00:05:22.330  -->  00:05:24.700
exceptions, and if you're creating your own exceptions,
117

117

00:05:24.700  -->  00:05:26.043
which should you use?
118

118

00:05:27.800  -->  00:05:30.920
Java designers argue that an exception thrown by a method
119

119

00:05:30.920  -->  00:05:34.290
is part of the method's public programming interface as much
120

120

00:05:34.290  -->  00:05:36.710
as its parameters and return values.
121

121

00:05:36.710  -->  00:05:40.020
If a client can be expected to recover from the exception,
122

122

00:05:40.020  -->  00:05:43.680
you inform the client by making it a checked exception, and
123

123

00:05:43.680  -->  00:05:46.740
identifying the exception in the throws clause of the
124

124

00:05:46.740  -->  00:05:47.620
method.
125

125

00:05:47.620  -->  00:05:49.940
If a client cannot be expected to recover from the
126

126

00:05:49.940  -->  00:05:52.790
exception, you don't need to make it a checked exception.
127

127

00:05:54.126  -->  00:05:55.570
All right, so I go back to our code.
128

128

00:05:55.570  -->  00:05:57.530
So it seems I've said that errors are not checked
129

129

00:05:57.530  -->  00:05:58.650
exceptions.
130

130

00:05:58.650  -->  00:06:01.060
Let's modify our code in the Throwable Example class
131

131

00:06:01.060  -->  00:06:02.320
we created earlier.
132

132

00:06:02.320  -->  00:06:05.690
And specifically, what I'm going to do there, is add the
133

133

00:06:05.690  -->  00:06:06.987
T-H dot throw an error.
134

134

00:06:06.987  -->  00:06:07.970
(clicking)
135

135

00:06:07.970  -->  00:06:10.696
We want to add that above the try/catch code
136

136

00:06:10.696  -->  00:06:13.187
(clicking)
137

137

00:06:13.187  -->  00:06:15.440
And by moving it there, as you can see, the code still
138

138

00:06:15.440  -->  00:06:16.273
compiles.
139

139

00:06:16.273  -->  00:06:17.280
There's no errors there.
140

140

00:06:17.280  -->  00:06:20.320
Then it verifies that I.O. error, subclass from error,
141

141

00:06:20.320  -->  00:06:22.161
isn't a checked exception.
142

142

00:06:22.161  -->  00:06:23.880
(clicking)
143

143

00:06:23.880  -->  00:06:24.830
Run the code again.
144

144

00:06:26.430  -->  00:06:27.440
And you can see, we get an error.
145

145

00:06:27.440  -->  00:06:29.640
An execution that simply aborts with the error message.
146

146

00:06:29.640  -->  00:06:31.660
Obviously now because we're not in the try/catch block,
147

147

00:06:31.660  -->  00:06:33.730
we can see the exception on screen.
148

148

00:06:33.730  -->  00:06:35.551
But what about "File not found" exception?
149

149

00:06:35.551  -->  00:06:38.530
Though we didn't include it, all the I.O. exceptions in our
150

150

00:06:38.530  -->  00:06:41.940
list of runtime exceptions, and we confirmed the runtime
151

151

00:06:41.940  -->  00:06:45.670
exception is not part of it's class hierarchy earlier.
152

152

00:06:45.670  -->  00:06:48.550
Since it's neither an error or a runtime exception,
153

153

00:06:48.550  -->  00:06:51.320
then it meets are definition of a checked exception.
154

154

00:06:51.320  -->  00:06:53.090
So let's do the same thing here.
155

155

00:06:53.090  -->  00:06:54.643
Let's try to move this code up.
156

156

00:06:56.586  -->  00:06:57.856
(clicking)
157

157

00:06:57.856  -->  00:07:00.970
I'm going to actually put it above the T-H dot thrown an
158

158

00:07:00.970  -->  00:07:01.820
error line there.
159

159

00:07:02.860  -->  00:07:05.207
Now by doing that, there's no code in the try block either,
160

160

00:07:05.207  -->  00:07:07.370
but we'll ignore that for now.
161

161

00:07:07.370  -->  00:07:09.940
If you hover over that and have a look, unhandled exception
162

162

00:07:09.940  -->  00:07:11.776
java dot I.O. dot file not found exception.
163

163

00:07:11.776  -->  00:07:15.480
Since we're not in a try/catch block, we're not satisfying
164

164

00:07:15.480  -->  00:07:18.680
the catch or specify requirement in the compile, as you can
165

165

00:07:18.680  -->  00:07:20.450
see, won't let us do that.
166

166

00:07:20.450  -->  00:07:23.600
So I'll empty that first, or that last change, rather
167

167

00:07:23.600  -->  00:07:26.860
and put it back into the try block.
168

168

00:07:26.860  -->  00:07:29.760
And our code is then okay and we're able to run it.
169

169

00:07:29.760  -->  00:07:33.023
We get the standard exception from the code alone 18.
170

170

00:07:34.464  -->  00:07:35.730
All right, so that's the end of video here.
171

171

00:07:35.730  -->  00:07:37.770
Moving forward, we're going to be looking at more examples
172

172

00:07:37.770  -->  00:07:40.310
of checked and unchecked exceptions in try/catch blocks
173

173

00:07:40.310  -->  00:07:42.510
and methods in the upcoming videos.
174

174

00:07:42.510  -->  00:07:43.810
See you in the next video.
