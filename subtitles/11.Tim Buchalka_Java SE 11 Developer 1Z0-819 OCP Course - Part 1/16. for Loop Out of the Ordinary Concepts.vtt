WEBVTT
1
1

00:00:05.400  -->  00:00:07.420
<v ->So this video, we want to look at: nested loops,</v>
2

2

00:00:07.420  -->  00:00:09.690
labels, break, and continue statements
3

3

00:00:09.690  -->  00:00:10.700
a little more closely.
4

4

00:00:10.700  -->  00:00:13.100
And just look at things a little bit out of the ordinary
5

5

00:00:13.100  -->  00:00:15.080
when dealing with loops.
6

6

00:00:15.080  -->  00:00:18.090
Firstly: you cannot reference a label with the continue,
7

7

00:00:18.090  -->  00:00:21.030
or break statements that is not in the loops scope.
8

8

00:00:21.030  -->  00:00:23.170
You'll get a compiler error if that happens.
9

9

00:00:23.170  -->  00:00:26.490
An outer loop cannot reference the inner loop's labels,
10

10

00:00:26.490  -->  00:00:30.000
but an inner loop can reference the outer loop's labels.
11

11

00:00:30.000  -->  00:00:33.210
You can break out of a nested loop from a nested loop.
12

12

00:00:33.210  -->  00:00:36.000
You can also completely break out of the parent loop,
13

13

00:00:36.000  -->  00:00:37.153
from the nested loop.
14

14

00:00:38.334  -->  00:00:41.240
Alright, so let's create a new class in our loops project.
15

15

00:00:41.240  -->  00:00:44.423
We're going to go with "ForLoopExample2" as the name.
16

16

00:00:55.270  -->  00:00:57.070
Now this code has an outer for loop
17

17

00:00:57.070  -->  00:00:59.300
which has a label called OUTER_LABEL,
18

18

00:00:59.300  -->  00:01:00.660
as you can see on screen there.
19

19

00:01:00.660  -->  00:01:03.130
There's a nested for loop which has a label called
20

20

00:01:03.130  -->  00:01:05.190
INNER_LABEL, also on screen.
21

21

00:01:05.190  -->  00:01:08.030
The outer loop iterates through the i variable
22

22

00:01:08.030  -->  00:01:09.800
for a maximum of five iterations;
23

23

00:01:09.800  -->  00:01:12.530
so i equals zero, one, two, three, four.
24

24

00:01:12.530  -->  00:01:14.640
The inner loop iterates through the j variable
25

25

00:01:14.640  -->  00:01:16.260
for a maximum of three times;
26

26

00:01:16.260  -->  00:01:18.420
j equals zero, one, and two.
27

27

00:01:18.420  -->  00:01:20.810
The outer loop has a continue statement,
28

28

00:01:20.810  -->  00:01:22.110
which you can see there
29

29

00:01:22.110  -->  00:01:23.390
on line twenty.
30

30

00:01:23.390  -->  00:01:24.940
That's the first iteration of the loop
31

31

00:01:24.940  -->  00:01:26.580
we're actually testing for there.
32

32

00:01:26.580  -->  00:01:28.720
The inner loop demonstrates a continue
33

33

00:01:28.720  -->  00:01:29.707
of the inner loop,
34

34

00:01:29.707  -->  00:01:31.300
and you can see we've got a continuation
35

35

00:01:31.300  -->  00:01:33.400
of the inner label there on line 28.
36

36

00:01:33.400  -->  00:01:35.923
It also demonstrates a break on the inner loop,
37

37

00:01:35.923  -->  00:01:37.860
you can see that on line 33.
38

38

00:01:37.860  -->  00:01:40.460
We're also demonstrating a break on the outer loop,
39

39

00:01:40.460  -->  00:01:42.690
there's break OUTER_LABEL.
40

40

00:01:42.690  -->  00:01:43.683
So if you run this,
41

41

00:01:45.900  -->  00:01:47.360
alright so there's the output
42

42

00:01:47.360  -->  00:01:49.315
as you can see on the screen there.
43

43

00:01:49.315  -->  00:01:50.500
So let's talk about that
44

44

00:01:50.500  -->  00:01:52.750
and I'll show you some code at the same time.
45

45

00:01:54.190  -->  00:01:56.260
So let's about each iteration here.
46

46

00:01:56.260  -->  00:01:59.500
So the first iteration, i = 0 of the outer loop,
47

47

00:01:59.500  -->  00:02:01.180
i obviously equals zero,
48

48

00:02:01.180  -->  00:02:03.200
well that's gonna execute the continue statement
49

49

00:02:03.200  -->  00:02:04.490
and that's because we're doing a test
50

50

00:02:04.490  -->  00:02:06.550
for i of having the value of 0 on line 18.
51

51

00:02:06.550  -->  00:02:08.720
So it hits the continue statement,
52

52

00:02:08.720  -->  00:02:10.520
referencing the OUTER_LABEL
53

53

00:02:10.520  -->  00:02:12.630
so that all code blocks below this statement
54

54

00:02:12.630  -->  00:02:13.490
are skipped,
55

55

00:02:13.490  -->  00:02:15.410
including the entire nested loop.
56

56

00:02:15.410  -->  00:02:17.860
And we can see that in the output on the screen.
57

57

00:02:17.860  -->  00:02:19.250
So moving down, the next iteration
58

58

00:02:19.250  -->  00:02:20.623
goes into the nested loop.
59

59

00:02:21.490  -->  00:02:24.870
And when j = 0, executes the continue statement,
60

60

00:02:24.870  -->  00:02:26.480
referencing the INNER_LABEL
61

61

00:02:26.480  -->  00:02:27.810
so the j loop continues,
62

62

00:02:27.810  -->  00:02:29.320
skipping any code
63

63

00:02:29.320  -->  00:02:31.080
below the continue in the nested loop
64

64

00:02:31.080  -->  00:02:33.450
just for the j = 0 iteration.
65

65

00:02:33.450  -->  00:02:34.860
And you can see that in the output
66

66

00:02:34.860  -->  00:02:36.700
for our iteration one,
67

67

00:02:36.700  -->  00:02:39.000
because there's on j = 0 LAST,
68

68

00:02:39.000  -->  00:02:42.110
we've got j = 0 FIRST, j = 0 CONTINUE INNER_LABEL,
69

69

00:02:42.110  -->  00:02:45.240
then it goes to j = 0 1 FIRST.
70

70

00:02:45.240  -->  00:02:46.073
So moving on down,
71

71

00:02:46.073  -->  00:02:48.913
look at iteration i = 2.
72

72

00:02:49.840  -->  00:02:51.200
Well this goes into the nested loop
73

73

00:02:51.200  -->  00:02:53.340
and when j = 1,
74

74

00:02:53.340  -->  00:02:55.859
and you can see the if statement there on line 30,
75

75

00:02:55.859  -->  00:02:57.730
i = 2 and j = 1,
76

76

00:02:57.730  -->  00:03:00.120
at that point it executes the break,
77

77

00:03:00.120  -->  00:03:02.120
and we can see that in the output
78

78

00:03:02.120  -->  00:03:04.380
right at the bottom of the output pane.
79

79

00:03:04.380  -->  00:03:06.100
Right, so moving on down then,
80

80

00:03:06.100  -->  00:03:07.620
i = 3,
81

81

00:03:07.620  -->  00:03:09.540
this goes into the nested loop,
82

82

00:03:09.540  -->  00:03:10.390
and when j = 2,
83

83

00:03:10.390  -->  00:03:13.560
and there's the if test on line 35,
84

84

00:03:13.560  -->  00:03:16.300
it breaks, or rather it executes the break statement
85

85

00:03:16.300  -->  00:03:17.960
referencing the outer label.
86

86

00:03:17.960  -->  00:03:19.860
So even though the break is in the nested loop,
87

87

00:03:19.860  -->  00:03:22.440
the outer loop terminates here.
88

88

00:03:22.440  -->  00:03:23.400
We can see this, we've got:
89

89

00:03:23.400  -->  00:03:28.400
j = 0, j = 1, j = 2 FIRST, j = 2 BREAK OUTER LABEL,
90

90

00:03:28.660  -->  00:03:32.800
OUTSIDE OF LOOPS: 3, j = 2 and basically it terminates.
91

91

00:03:32.800  -->  00:03:34.313
Alright, I'll close that.
92

92

00:03:36.170  -->  00:03:37.730
Now, in the next example I'm gonna post
93

93

00:03:37.730  -->  00:03:39.610
we're gonna test postfix
94

94

00:03:39.610  -->  00:03:43.240
and prefix increment unary operators in our for loops,
95

95

00:03:43.240  -->  00:03:45.250
a common theme in exam questions.
96

96

00:03:45.250  -->  00:03:47.410
So, we're gonna call a method in all three sections
97

97

00:03:47.410  -->  00:03:49.320
of the for loop declaration,
98

98

00:03:49.320  -->  00:03:51.410
and explore what happens if something goes wrong
99

99

00:03:51.410  -->  00:03:53.350
in each of these declaration blocks:
100

100

00:03:53.350  -->  00:03:55.700
the initialization, termination, and increment.
101

101

00:03:57.310  -->  00:03:58.900
So I've got to create another class,
102

102

00:03:58.900  -->  00:04:01.277
we'll call this one "ForLoopExample3".
103

103

00:04:08.510  -->  00:04:10.120
Okay,
104

104

00:04:10.120  -->  00:04:11.530
now this class has a method,
105

105

00:04:11.530  -->  00:04:13.580
which you can see on line 11,
106

106

00:04:13.580  -->  00:04:16.200
which throws an exception conditionally.
107

107

00:04:16.200  -->  00:04:18.040
In the first example we're calling this method
108

108

00:04:18.040  -->  00:04:20.730
in the for loop initialization block.
109

109

00:04:20.730  -->  00:04:23.173
And you can see that we've got that on line 25.
110

110

00:04:24.110  -->  00:04:25.623
So if I actually run this code;
111

111

00:04:28.350  -->  00:04:30.610
observe here that the variable i
112

112

00:04:30.610  -->  00:04:32.220
was never incremented.
113

113

00:04:32.220  -->  00:04:34.600
The for loop condition is only evalutated
114

114

00:04:34.600  -->  00:04:37.660
after the initialization section is completed
115

115

00:04:37.660  -->  00:04:40.520
for the first iteration of the loop.
116

116

00:04:40.520  -->  00:04:42.240
Right, so what we'll do is we'll change the for loop
117

117

00:04:42.240  -->  00:04:44.380
and move our method to the conditional section
118

118

00:04:44.380  -->  00:04:45.550
of the for loop.
119

119

00:04:45.550  -->  00:04:46.383
Let's go ahead and do that,
120

120

00:04:46.383  -->  00:04:48.900
so we're gonna change the call there, the for loop.
121

121

00:04:48.900  -->  00:04:50.403
I'm gonna change this to for,
122

122

00:04:51.370  -->  00:04:54.750
put i = 0 semicolon,
123

123

00:04:54.750  -->  00:04:56.710
then we'll put interruptIt,
124

124

00:04:56.710  -->  00:04:57.600
parentheses
125

125

00:04:59.194  -->  00:05:00.361
++i,
126

126

00:05:02.590  -->  00:05:04.090
we'll check that that's less than 10,
127

127

00:05:04.090  -->  00:05:05.610
then we'll leave the third component as is.
128

128

00:05:05.610  -->  00:05:07.500
So it's for i = 0,
129

129

00:05:07.500  -->  00:05:11.363
interruptIt parentheses ++i &lt; 10 and i++.
130

130

00:05:13.150  -->  00:05:14.700
So if we actually run this now;
131

131

00:05:16.740  -->  00:05:17.810
so we're gonna see what's happened here,
132

132

00:05:17.810  -->  00:05:21.340
the unary prefix increment operator did occur this time,
133

133

00:05:21.340  -->  00:05:24.800
but our loop still hasn't executed even a single iteration
134

134

00:05:24.800  -->  00:05:26.750
because of the error we introduced
135

135

00:05:26.750  -->  00:05:28.810
in the conditional section.
136

136

00:05:28.810  -->  00:05:29.830
And again, just to confirm,
137

137

00:05:29.830  -->  00:05:33.080
we're actually executing this method on line 11,
138

138

00:05:33.080  -->  00:05:34.760
and throwing an exception.
139

139

00:05:34.760  -->  00:05:35.910
Alright, so let's continue.
140

140

00:05:35.910  -->  00:05:38.820
We'll actually move, or change, the for loop again
141

141

00:05:38.820  -->  00:05:40.841
so we've got for i = 0,
142

142

00:05:40.841  -->  00:05:41.674
we're gonna change this slightly,
143

143

00:05:41.674  -->  00:05:45.750
now it's going to be ++i &lt; 10 semicolon
144

144

00:05:46.910  -->  00:05:48.660
then we're going to put interruptIt
145

145

00:05:53.473  -->  00:05:54.556
i++
146

146

00:05:56.370  -->  00:05:58.520
and we need another parentheses here.
147

147

00:05:58.520  -->  00:06:01.030
Alright, so basically we've moved our method call
148

148

00:06:01.030  -->  00:06:03.540
now to increment section of the for loop.
149

149

00:06:03.540  -->  00:06:04.940
If we actually run the code,
150

150

00:06:07.570  -->  00:06:10.380
we can see now that our loop has executed once
151

151

00:06:10.380  -->  00:06:12.320
and the increment section was being executed
152

152

00:06:12.320  -->  00:06:15.230
after this iteration, when the exception occurred,
153

153

00:06:15.230  -->  00:06:17.880
interrupting the for loop processing from continuing.
154

154

00:06:19.390  -->  00:06:21.220
So this example demonstrated
155

155

00:06:21.220  -->  00:06:22.630
in what instance and order,
156

156

00:06:22.630  -->  00:06:25.710
each of the for loop declaration blocks was executed:
157

157

00:06:25.710  -->  00:06:29.390
the initialization block is executed only once,
158

158

00:06:29.390  -->  00:06:31.280
prior to the loop termination condition
159

159

00:06:31.280  -->  00:06:33.840
being evaluated for the first time;
160

160

00:06:33.840  -->  00:06:36.920
the loop termination condition is evaluated prior
161

161

00:06:36.920  -->  00:06:38.600
to each loop iteration;
162

162

00:06:38.600  -->  00:06:42.090
and thirdly, the increment is executed after the iteration,
163

163

00:06:42.090  -->  00:06:45.820
prior to the next loop termination condition evaluation.
164

164

00:06:45.820  -->  00:06:47.200
Alright, so let's finish the video here
165

165

00:06:47.200  -->  00:06:49.483
and we'll move onto a quiz in the next video.
