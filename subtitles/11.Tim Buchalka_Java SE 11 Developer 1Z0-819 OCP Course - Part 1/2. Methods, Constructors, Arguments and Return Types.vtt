WEBVTT
1
1

00:00:05.764  -->  00:00:06.597
<v Tim Buchalka>All right, so let's start talking</v>
2

2

00:00:06.597  -->  00:00:08.110
about creating methods and constructors
3

3

00:00:08.110  -->  00:00:10.020
with arguments and return values.
4

4

00:00:10.020  -->  00:00:12.650
The following is from Oracle's Java 11 specification
5

5

00:00:12.650  -->  00:00:16.220
describing the structure of a method declaration.
6

6

00:00:16.220  -->  00:00:17.950
So you've got the method modifier,
7

7

00:00:17.950  -->  00:00:20.460
method header, then method body.
8

8

00:00:20.460  -->  00:00:22.150
The method modifiers are similar
9

9

00:00:22.150  -->  00:00:23.817
to field modifiers.
10

10

00:00:25.420  -->  00:00:27.110
So these are the access modifiers.
11

11

00:00:27.110  -->  00:00:29.060
The default modifier is package.
12

12

00:00:29.060  -->  00:00:30.590
No modifier, in other words.
13

13

00:00:30.590  -->  00:00:33.323
They've got public, protected, and private.
14

14

00:00:34.880  -->  00:00:37.280
And the non-access modifiers:
15

15

00:00:37.280  -->  00:00:39.630
abstract, declaring a method abstract means it's
16

16

00:00:39.630  -->  00:00:41.830
not implemented, it has no body.
17

17

00:00:41.830  -->  00:00:45.070
A non-abstract method is called a concrete method.
18

18

00:00:45.070  -->  00:00:47.950
Static, we've got the static non-access modifier.
19

19

00:00:47.950  -->  00:00:50.310
Static method is called a class method,
20

20

00:00:50.310  -->  00:00:52.840
it can be called using the class name.
21

21

00:00:52.840  -->  00:00:55.540
Final, well that declares that a method's definition
22

22

00:00:55.540  -->  00:00:59.220
is complete and no subclasses can override it or hide it.
23

23

00:00:59.220  -->  00:01:02.380
Strictfp, effect of a strictfp modifier is
24

24

00:01:02.380  -->  00:01:04.630
to restrict floating-point calculations
25

25

00:01:04.630  -->  00:01:06.883
to ensure portability across platforms.
26

26

00:01:09.830  -->  00:01:12.230
Synchronised non-access modifier creates
27

27

00:01:12.230  -->  00:01:13.680
a thread safe method.
28

28

00:01:13.680  -->  00:01:16.230
And finally, native, a method that is native
29

29

00:01:16.230  -->  00:01:18.970
is implemented in platform-dependent code,
30

30

00:01:18.970  -->  00:01:20.830
typically written in another programming language,
31

31

00:01:20.830  -->  00:01:22.193
so for example, C.
32

32

00:01:24.400  -->  00:01:26.978
So moving on now, the modifier rules are as follows:
33

33

00:01:26.978  -->  00:01:29.877
A keyword can only appear once as a modifier
34

34

00:01:29.877  -->  00:01:31.950
for a method declaration.
35

35

00:01:31.950  -->  00:01:34.300
Only one of the access modifiers public, protected,
36

36

00:01:34.300  -->  00:01:36.750
and private is allowed for a single method.
37

37

00:01:36.750  -->  00:01:39.210
If you use the abstract modifier, your method
38

38

00:01:39.210  -->  00:01:42.210
can only use public or protected modifier
39

39

00:01:42.210  -->  00:01:44.820
or no access modifier and must be defined in
40

40

00:01:44.820  -->  00:01:45.653
an abstract class.
41

41

00:01:45.653  -->  00:01:48.640
Native and strictfp are not modifiers that
42

42

00:01:48.640  -->  00:01:50.703
can be used in the same declaration.
43

43

00:01:53.150  -->  00:01:54.970
So the method header consists of
44

44

00:01:54.970  -->  00:01:56.910
firstly the result of a method declaration
45

45

00:01:56.910  -->  00:01:58.960
either declares the type of value
46

46

00:01:58.960  -->  00:02:01.650
that the method returns, return type in other words,
47

47

00:02:01.650  -->  00:02:04.143
or uses the key word void to indicate that
48

48

00:02:04.143  -->  00:02:06.741
that the method does not return a value.
49

49

00:02:06.741  -->  00:02:09.050
The method header also consists of the name of the method.
50

50

00:02:09.050  -->  00:02:11.100
It also consists of the formal parameters
51

51

00:02:11.100  -->  00:02:12.943
of the method or constructor, if any,
52

52

00:02:12.943  -->  00:02:14.600
and these are specified by lists of
53

53

00:02:14.600  -->  00:02:17.480
comma-separated parameter specifiers.
54

54

00:02:17.480  -->  00:02:19.355
Now, each parameter specifier consists of
55

55

00:02:19.355  -->  00:02:21.998
a type, optionally preceded by the final modifier
56

56

00:02:21.998  -->  00:02:26.998
and an identifier that specifies the name of the parameter.
57

57

00:02:28.070  -->  00:02:30.580
If a method or constructor has no formal parameters,
58

58

00:02:30.580  -->  00:02:34.508
and no receiver parameter, then an empty pair of parentheses
59

59

00:02:34.508  -->  00:02:37.740
appears in the declaration of the method or constructor.
60

60

00:02:37.740  -->  00:02:39.910
A formal parameter of a method or constructor
61

61

00:02:39.910  -->  00:02:41.790
may be a varargs parameter,
62

62

00:02:41.790  -->  00:02:44.020
indicated by an ellipsis followed by the type.
63

63

00:02:44.020  -->  00:02:46.870
At most, one varargs parameter is permitted,
64

64

00:02:46.870  -->  00:02:49.750
it has to be in the very last position.
65

65

00:02:49.750  -->  00:02:52.590
A method can optionally declare a throws clause
66

66

00:02:52.590  -->  00:02:54.980
to denote any checked exception classes.
67

67

00:02:54.980  -->  00:02:56.290
Now we're gonna discuss exceptions
68

68

00:02:56.290  -->  00:02:59.023
in the exceptions section further on in this course.
69

69

00:03:01.030  -->  00:03:04.500
So at a minimum, a method declaration looks like as follows:
70

70

00:03:04.500  -->  00:03:07.283
Void, the method name, and parentheses.
71

71

00:03:10.131  -->  00:03:12.330
All right, so let's look at some valid method declarations
72

72

00:03:12.330  -->  00:03:15.270
and then after this we'll look at some invalid ones.
73

73

00:03:15.270  -->  00:03:17.700
So void method, parentheses is valid.
74

74

00:03:17.700  -->  00:03:21.200
This method has no parameters and returns no result.
75

75

00:03:21.200  -->  00:03:24.680
Next we've got void method, and string a in parentheses.
76

76

00:03:24.680  -->  00:03:26.310
This method has one parameter of
77

77

00:03:26.310  -->  00:03:29.880
type string and returns no result back.
78

78

00:03:29.880  -->  00:03:33.100
Next we've got void method, parentheses object
79

79

00:03:33.100  -->  00:03:35.370
dot, dot, dot or the ellipsis o.
80

80

00:03:35.370  -->  00:03:37.580
So this method has a varargs parameter,
81

81

00:03:37.580  -->  00:03:39.560
meaning you can pass zero to many objects
82

82

00:03:39.560  -->  00:03:42.060
in a comma delimited list (mumbles).
83

83

00:03:42.060  -->  00:03:44.630
Next we've got object method parentheses.
84

84

00:03:44.630  -->  00:03:48.320
This method has no parameters and returns an object back.
85

85

00:03:48.320  -->  00:03:50.480
Next, string method, parentheses,
86

86

00:03:50.480  -->  00:03:54.630
final int a comma int b in those parentheses.
87

87

00:03:54.630  -->  00:03:56.870
So this method passes two int parameters,
88

88

00:03:56.870  -->  00:03:59.200
but the final key word prevents the method
89

89

00:03:59.200  -->  00:04:03.300
from changing the value of the parameter in the method code.
90

90

00:04:03.300  -->  00:04:04.470
And just as an example there,
91

91

00:04:04.470  -->  00:04:06.120
string method and in parentheses,
92

92

00:04:06.120  -->  00:04:08.340
final int a comma final int b,
93

93

00:04:08.340  -->  00:04:11.143
you can declare multiple parameters to the final.
94

94

00:04:13.939  -->  00:04:16.580
All right, so let's now look at some invalid declarations.
95

95

00:04:16.580  -->  00:04:18.630
The first one there is method parentheses.
96

96

00:04:18.630  -->  00:04:19.463
Well, this is invalid.
97

97

00:04:19.463  -->  00:04:22.250
The method requires a return type or the keyword void
98

98

00:04:22.250  -->  00:04:25.270
indicating no value is to be returned.
99

99

00:04:25.270  -->  00:04:26.730
Next we've got void, method,
100

100

00:04:26.730  -->  00:04:29.260
and then parentheses string a comma b.
101

101

00:04:29.260  -->  00:04:32.440
Each parameter must be defined with its own type.
102

102

00:04:32.440  -->  00:04:35.820
Next, void method, parentheses object dot dot dot
103

103

00:04:35.820  -->  00:04:38.563
ellipsis o comma string a.
104

104

00:04:38.563  -->  00:04:41.430
The varargs parameter must be the last parameter
105

105

00:04:41.430  -->  00:04:43.260
in a method's parameter list.
106

106

00:04:43.260  -->  00:04:45.750
Next, void method, parentheses object
107

107

00:04:45.750  -->  00:04:48.050
dot dot dot ellipsis o comma object
108

108

00:04:48.050  -->  00:04:50.210
dot dot dot another ellipsis a.
109

109

00:04:50.210  -->  00:04:52.390
We can only have one varargs parameter
110

110

00:04:52.390  -->  00:04:54.220
in a method declaration.
111

111

00:04:54.220  -->  00:04:57.240
And the final two, string method, parentheses final
112

112

00:04:57.240  -->  00:04:59.610
final int a comma int b.
113

113

00:04:59.610  -->  00:05:00.527
This is a duplicate final key word,
114

114

00:05:00.527  -->  00:05:02.950
it cannot be used for one parameter.
115

115

00:05:02.950  -->  00:05:04.580
The final invalid example there,
116

116

00:05:04.580  -->  00:05:08.450
string method in parentheses int a comma object a.
117

117

00:05:08.450  -->  00:05:10.900
You can't have two parameters with the same name.
118

118

00:05:12.920  -->  00:05:14.070
All right, so before we talk about
119

119

00:05:14.070  -->  00:05:16.290
the structure of a method's body,
120

120

00:05:16.290  -->  00:05:19.030
it is important to explain a method signature.
121

121

00:05:19.030  -->  00:05:22.020
So a method signature uniquely defines a method.
122

122

00:05:22.020  -->  00:05:23.500
Two methods with the same signature
123

123

00:05:23.500  -->  00:05:25.293
cannot be defined in one class.
124

124

00:05:26.350  -->  00:05:28.920
So the signature consists of the method name
125

125

00:05:28.920  -->  00:05:31.343
and an ordered list of parameter types.
126

126

00:05:33.490  -->  00:05:35.210
The signature does not consist of
127

127

00:05:35.210  -->  00:05:40.210
modifiers, return type, parameter names, or a throws clause.
128

128

00:05:41.000  -->  00:05:42.900
That sounds very simple and usually it is,
129

129

00:05:42.900  -->  00:05:45.290
but when we talk about overloaded methods,
130

130

00:05:45.290  -->  00:05:47.650
overridden methods, class inheritance,
131

131

00:05:47.650  -->  00:05:49.640
and implementing interfaces, you will see that
132

132

00:05:49.640  -->  00:05:52.800
the definition of the same type can get more complicated.
133

133

00:05:52.800  -->  00:05:55.400
So we'll save these examples for a little bit later.
134

134

00:05:57.890  -->  00:05:59.340
So looking at a method body,
135

135

00:05:59.340  -->  00:06:01.731
it's either a block of code that implements the method
136

136

00:06:01.731  -->  00:06:04.510
or simply a semi-colon indicating
137

137

00:06:04.510  -->  00:06:06.340
the lack of an implementation.
138

138

00:06:06.340  -->  00:06:09.513
A concrete method requires brackets, curly braces.
139

139

00:06:11.240  -->  00:06:12.790
Before we go any further we have to
140

140

00:06:12.790  -->  00:06:15.730
address the statement I made in the introduction to methods,
141

141

00:06:15.730  -->  00:06:17.630
that Java always passes parameters
142

142

00:06:17.630  -->  00:06:20.120
by value, not by reference.
143

143

00:06:20.120  -->  00:06:22.350
The pass by value, or call by value,
144

144

00:06:22.350  -->  00:06:25.160
means anything passed into a function or method call
145

145

00:06:25.160  -->  00:06:27.530
is unchanged in the caller's scope
146

146

00:06:27.530  -->  00:06:31.230
when the functional method, in this case for Java, returns.
147

147

00:06:31.230  -->  00:06:32.640
Call by reference, on the other hand,
148

148

00:06:32.640  -->  00:06:35.050
also referred to as pass by reference,
149

149

00:06:35.050  -->  00:06:36.850
where a method receives an implicit reference
150

150

00:06:36.850  -->  00:06:38.910
to the variable used as a parameter
151

151

00:06:38.910  -->  00:06:40.463
and not a copy of its value.
152

152

00:06:43.350  -->  00:06:45.320
Any modifications to the parameter
153

153

00:06:45.320  -->  00:06:47.720
would be seen by the calling code.
154

154

00:06:47.720  -->  00:06:49.970
So, call by reference can be imitated, purposely or not,
155

155

00:06:49.970  -->  00:06:52.440
in languages that use call by value by using
156

156

00:06:52.440  -->  00:06:55.030
or by making use of references.
157

157

00:06:55.030  -->  00:06:57.450
This is similar to call by sharing,
158

158

00:06:57.450  -->  00:07:00.800
passing an object, which can then be mutated.
159

159

00:07:00.800  -->  00:07:03.430
Java is said to have call by sharing.
160

160

00:07:03.430  -->  00:07:06.030
This means that string objects, which are immutable,
161

161

00:07:06.030  -->  00:07:09.430
and primitive data types will not have their values changed.
162

162

00:07:09.430  -->  00:07:11.440
A copy is made and passed to methods,
163

163

00:07:11.440  -->  00:07:14.000
when the method returns to the calling scope.
164

164

00:07:14.000  -->  00:07:15.470
However, if you are passing an
165

165

00:07:15.470  -->  00:07:17.470
object reference of any kind,
166

166

00:07:17.470  -->  00:07:19.670
a change to the underlying object
167

167

00:07:19.670  -->  00:07:21.050
which the reference refers to,
168

168

00:07:21.050  -->  00:07:23.773
will be reflected when the method returns.
169

169

00:07:26.320  -->  00:07:28.700
Now this is still considered pass by value,
170

170

00:07:28.700  -->  00:07:30.810
because the reference that the method receives
171

171

00:07:30.810  -->  00:07:33.790
in the form of a parameter, is a copy of the reference
172

172

00:07:33.790  -->  00:07:35.330
in the calling scope.
173

173

00:07:35.330  -->  00:07:37.650
So, in other words, the reference won't change
174

174

00:07:37.650  -->  00:07:39.130
when returning from the method.
175

175

00:07:39.130  -->  00:07:41.840
However, the data on the referenced object may
176

176

00:07:41.840  -->  00:07:44.150
if it's been changed in the method.
177

177

00:07:44.150  -->  00:07:45.380
All right, so let's end the video here
178

178

00:07:45.380  -->  00:07:47.440
and in the next one we'll start
179

179

00:07:47.440  -->  00:07:50.410
going through some of this with some examples in code.
180

180

00:07:50.410  -->  00:07:51.710
See you in the next video.
