WEBVTT
1
1

00:00:05.200  -->  00:00:07.420
<v Tim>So previously we've talked about initialising</v>
2

2

00:00:07.420  -->  00:00:11.060
and setting primitive data type variables to literals.
3

3

00:00:11.060  -->  00:00:14.380
But what happens if we try stuff a large value
4

4

00:00:14.380  -->  00:00:16.900
in a small container where it doesn't fit?
5

5

00:00:16.900  -->  00:00:20.140
Or if our small number is tossed into a large bucket?
6

6

00:00:20.140  -->  00:00:21.990
So here we're going to talk about what happens
7

7

00:00:21.990  -->  00:00:23.850
when there's a data type mismatch
8

8

00:00:23.850  -->  00:00:26.340
either in size or in precision.
9

9

00:00:26.340  -->  00:00:28.740
Narrowing is where you assign a larger
10

10

00:00:28.740  -->  00:00:31.900
primitive data literal or variable to a smaller one.
11

11

00:00:31.900  -->  00:00:33.730
Widening, on the other hand, is where you put
12

12

00:00:33.730  -->  00:00:36.340
something small in a larger variable.
13

13

00:00:36.340  -->  00:00:37.600
As you can imagine, the compiler is
14

14

00:00:37.600  -->  00:00:39.770
more forgiving with widening attempts,
15

15

00:00:39.770  -->  00:00:42.270
and actually has more constraints on narrowing.
16

16

00:00:42.270  -->  00:00:45.170
So why not just use doubles and longs everywhere?
17

17

00:00:45.170  -->  00:00:46.790
Well, you could, but you'd be eating up
18

18

00:00:46.790  -->  00:00:49.670
as much as twice the memory unnecessarily,
19

19

00:00:49.670  -->  00:00:52.770
which could be a problem in larger applications.
20

20

00:00:52.770  -->  00:00:53.930
I've mentioned this previously,
21

21

00:00:53.930  -->  00:00:55.850
but this is a good place to repeat it.
22

22

00:00:55.850  -->  00:00:58.210
Firstly, every numeric value literal
23

23

00:00:58.210  -->  00:01:00.290
that doesn't contain a decimal point
24

24

00:01:00.290  -->  00:01:02.640
is a 32 bit int by default.
25

25

00:01:02.640  -->  00:01:05.090
Secondly, every numeric literal with a decimal
26

26

00:01:05.090  -->  00:01:06.563
is a double by default.
27

27

00:01:07.710  -->  00:01:09.340
So let's first explore narrowing
28

28

00:01:09.340  -->  00:01:11.100
with literals with some code.
29

29

00:01:11.100  -->  00:01:12.660
We're going to continue in the same project,
30

30

00:01:12.660  -->  00:01:14.650
primitive data we've been working on,
31

31

00:01:14.650  -->  00:01:15.790
and we're gonna create a new class
32

32

00:01:15.790  -->  00:01:18.200
called NarrowExample for main method.
33

33

00:01:18.200  -->  00:01:19.380
And what I'm going to do, as always,
34

34

00:01:19.380  -->  00:01:20.727
is paste some code in here,
35

35

00:01:20.727  -->  00:01:23.100
and we're going to start looking at range,
36

36

00:01:23.100  -->  00:01:24.650
some of our primitive data types,
37

37

00:01:24.650  -->  00:01:28.640
using the wrapper functions min_value and max_value.
38

38

00:01:28.640  -->  00:01:31.090
Right, so let's create that class, NarrowExample.
39

39

00:01:40.180  -->  00:01:41.880
Okay, I'm gonna copy that code in.
40

40

00:01:43.520  -->  00:01:44.803
You can see it's pretty basic code there.
41

41

00:01:44.803  -->  00:01:47.110
It's showing the minimum and maximum values
42

42

00:01:47.110  -->  00:01:49.110
for our various tops, and if we run this
43

43

00:01:53.340  -->  00:01:57.203
you can see it's showing the range for various data types.
44

44

00:01:58.150  -->  00:01:59.760
All right, so let's talk about assigning
45

45

00:01:59.760  -->  00:02:03.210
literal int values to some primitive data variables
46

46

00:02:03.210  -->  00:02:05.530
smaller than the 32 bit int.
47

47

00:02:05.530  -->  00:02:09.130
These are the byte and the char and the short data types.
48

48

00:02:09.130  -->  00:02:11.070
So I'm gonna add some code to their class
49

49

00:02:11.070  -->  00:02:13.973
in the main method, okay.
50

50

00:02:15.420  -->  00:02:18.040
So each literal here is really a 32 bit int,
51

51

00:02:18.040  -->  00:02:19.860
but because the values in each case
52

52

00:02:19.860  -->  00:02:22.740
are within the value range of the specific type
53

53

00:02:22.740  -->  00:02:25.390
to which it's assigned, the compiler has no problems
54

54

00:02:25.390  -->  00:02:28.790
with its assignment, and the values are said to be narrowed
55

55

00:02:28.790  -->  00:02:31.000
to fit into the variables.
56

56

00:02:31.000  -->  00:02:32.800
So the obvious question now is what happens
57

57

00:02:32.800  -->  00:02:34.870
if the values exceed the range?
58

58

00:02:34.870  -->  00:02:37.623
Well, let's actually add some code and see what happens.
59

59

00:02:40.350  -->  00:02:43.610
So you can see we've now got three compiler errors.
60

60

00:02:43.610  -->  00:02:44.800
In the case of the first ones,
61

61

00:02:44.800  -->  00:02:47.030
looking for a byte and found an int.
62

62

00:02:47.030  -->  00:02:48.930
So the compiler knows data will be lost
63

63

00:02:48.930  -->  00:02:50.710
if these assignments were allowed,
64

64

00:02:50.710  -->  00:02:52.880
and won't allow it without casting,
65

65

00:02:52.880  -->  00:02:54.660
and we'll talk about casting a bit later.
66

66

00:02:54.660  -->  00:02:56.950
For now, what I'll do is I'll just comment
67

67

00:02:56.950  -->  00:03:00.023
those three lines out, to get rid of the errors.
68

68

00:03:01.220  -->  00:03:04.030
Each numeric value literal that contains a decimal
69

69

00:03:04.030  -->  00:03:07.660
is by default a double, and unlike integral conversions,
70

70

00:03:07.660  -->  00:03:10.690
a narrowing conversion of a floating point number
71

71

00:03:10.690  -->  00:03:13.550
always requires the casting operator.
72

72

00:03:13.550  -->  00:03:15.290
Now we can see that if we add the following code
73

73

00:03:15.290  -->  00:03:18.850
which I'm about to paste into our narrow example class,
74

74

00:03:18.850  -->  00:03:20.000
so let's add some code.
75

75

00:03:22.060  -->  00:03:25.300
So zero is obviously within the range for all types,
76

76

00:03:25.300  -->  00:03:28.520
and yet not one of the lines compile, as you can see.
77

77

00:03:28.520  -->  00:03:29.940
We've got an error from f over there,
78

78

00:03:29.940  -->  00:03:32.440
required float, found double.
79

79

00:03:32.440  -->  00:03:36.330
So this confirms that the value 0.0 is a double,
80

80

00:03:36.330  -->  00:03:39.850
and a double is never implicitly narrowed.
81

81

00:03:39.850  -->  00:03:41.320
Right, so again, I'll comment that out
82

82

00:03:41.320  -->  00:03:43.113
to get rid of the compiler errors.
83

83

00:03:45.730  -->  00:03:47.950
Right, so let's now move from narrowing examples
84

84

00:03:47.950  -->  00:03:52.200
for literals to narrowing examples of other variables.
85

85

00:03:52.200  -->  00:03:53.823
So let's add the following code.
86

86

00:03:56.690  -->  00:03:58.070
You can see that I've created a variable
87

87

00:03:58.070  -->  00:04:00.270
that's assigned the literal int 1,
88

88

00:04:00.270  -->  00:04:03.600
which should fall into the ranges for byte, char and short.
89

89

00:04:03.600  -->  00:04:05.600
So we should be able to assign this variable
90

90

00:04:05.600  -->  00:04:08.170
to variables of byte, char, and short, right?
91

91

00:04:08.170  -->  00:04:09.940
Well, as you can see, no, that's not the case.
92

92

00:04:09.940  -->  00:04:11.950
The compiler doesn't allow it.
93

93

00:04:11.950  -->  00:04:15.550
The compiler does not execute code so it will not know
94

94

00:04:15.550  -->  00:04:17.510
that you've put a one in the variable,
95

95

00:04:17.510  -->  00:04:20.160
and it doesn't allow the assignment for that reason.
96

96

00:04:20.160  -->  00:04:21.110
So we'll do the same thing there,
97

97

00:04:21.110  -->  00:04:22.860
we'll comment that out and move on.
98

98

00:04:27.120  -->  00:04:28.650
All right, so that's narrowing.
99

99

00:04:28.650  -->  00:04:31.500
Let's create a new class now, WideningExample,
100

100

00:04:31.500  -->  00:04:33.700
and have a look at some widening techniques.
101

101

00:04:42.870  -->  00:04:46.950
Okay, so widening is when you assign a smaller
102

102

00:04:46.950  -->  00:04:50.450
primitive data literal or variable to a larger one.
103

103

00:04:50.450  -->  00:04:54.090
In almost all cases, this could be done without casting.
104

104

00:04:54.090  -->  00:04:55.330
And you can see some examples there,
105

105

00:04:55.330  -->  00:04:58.090
we've got an exact literal type assignment for int,
106

106

00:04:58.090  -->  00:05:03.090
myInt = 0, float, myFloat = 0.0f, and double, myDouble,
107

107

00:05:03.720  -->  00:05:05.030
but widening with literals here,
108

108

00:05:05.030  -->  00:05:07.610
you can see we've got long there, myLong = 0,
109

109

00:05:07.610  -->  00:05:09.870
so that's widening an int to a long.
110

110

00:05:09.870  -->  00:05:12.340
We've got myDouble = 0.0f,
111

111

00:05:12.340  -->  00:05:14.840
well, that's widening a float literal to a double.
112

112

00:05:16.170  -->  00:05:18.030
I've got some more comments here.
113

113

00:05:18.030  -->  00:05:20.103
I've got myDouble = float = myLong
114

114

00:05:20.103  -->  00:05:22.990
= myInt = myShort = mByte,
115

115

00:05:22.990  -->  00:05:25.030
so since the assignments are right to left,
116

116

00:05:25.030  -->  00:05:27.850
the value in mByte is widened to short
117

117

00:05:27.850  -->  00:05:29.640
when assigned to myShort.
118

118

00:05:29.640  -->  00:05:31.800
The value in myShort is widened to int
119

119

00:05:31.800  -->  00:05:33.540
when assigned to myInt.
120

120

00:05:33.540  -->  00:05:35.950
The value in myInt is widened to long
121

121

00:05:35.950  -->  00:05:36.783
when assigned to myLong.
122

122

00:05:36.783  -->  00:05:39.240
The value in myLong is widened to float
123

123

00:05:39.240  -->  00:05:40.620
when assigned to myFloat,
124

124

00:05:40.620  -->  00:05:42.950
and the value in myFloat is widened to double
125

125

00:05:42.950  -->  00:05:45.410
when assigned to myDouble.
126

126

00:05:45.410  -->  00:05:47.120
So your code prints a happy widening
127

127

00:05:47.120  -->  00:05:48.490
and all is perfect, right?
128

128

00:05:48.490  -->  00:05:49.950
Well, did you notice that we don't include
129

129

00:05:49.950  -->  00:05:51.990
myChar in this assignment change?
130

130

00:05:51.990  -->  00:05:53.640
So let's actually run this first.
131

131

00:05:55.720  -->  00:05:58.270
So we've got our happy widening, so no errors,
132

132

00:05:58.270  -->  00:06:00.960
but notice again I mentioned that myChar
133

133

00:06:00.960  -->  00:06:02.573
isn't at the moment being used.
134

134

00:06:03.420  -->  00:06:06.200
And we can confirm that myChar's never used.
135

135

00:06:06.200  -->  00:06:08.130
So let's add this code to our main method
136

136

00:06:08.130  -->  00:06:11.490
exploring the char conversions in more detail.
137

137

00:06:11.490  -->  00:06:13.893
So I'm gonna put this code right down the bottom now,
138

138

00:06:15.760  -->  00:06:17.960
paste in the code, all right.
139

139

00:06:17.960  -->  00:06:21.520
So at the top, we've assigned a, a char a to myByte,
140

140

00:06:21.520  -->  00:06:24.070
and the literal char is widened to int the narrow
141

141

00:06:24.070  -->  00:06:27.030
to byte, so that's okay, but the flowing conversion
142

142

00:06:27.030  -->  00:06:30.980
on line 46, 50 and 51, you've combined both widening
143

143

00:06:30.980  -->  00:06:33.100
and narrowing primitive conversions.
144

144

00:06:33.100  -->  00:06:35.260
So firstly the byte's converted to an int
145

145

00:06:35.260  -->  00:06:37.610
by a widening primitive conversion,
146

146

00:06:37.610  -->  00:06:40.880
and then the resulting int is converted to a char
147

147

00:06:40.880  -->  00:06:43.740
by narrowing, so this doesn't work for variables.
148

148

00:06:43.740  -->  00:06:45.310
The compiler doesn't have enough information
149

149

00:06:45.310  -->  00:06:47.440
to determine if the narrowing's okay,
150

150

00:06:47.440  -->  00:06:49.770
and if we have a look at the error,
151

151

00:06:49.770  -->  00:06:51.590
required char, found byte.
152

152

00:06:51.590  -->  00:06:53.300
Now a short and char are the same width,
153

153

00:06:53.300  -->  00:06:56.060
but char is unsigned, so the conversion's not allowed.
154

154

00:06:56.060  -->  00:06:57.230
You can see we've got similar over there,
155

155

00:06:57.230  -->  00:07:00.210
required short, found char, and for myChar,
156

156

00:07:00.210  -->  00:07:01.643
required char, found short.
157

157

00:07:02.790  -->  00:07:04.690
Right, so let's just comment those lines out
158

158

00:07:04.690  -->  00:07:06.243
so that our code still works.
159

159

00:07:10.320  -->  00:07:11.740
All right, and we'll end the video here,
160

160

00:07:11.740  -->  00:07:13.460
and in the next one, we're gonna start looking
161

161

00:07:13.460  -->  00:07:15.460
and talking about casting.
162

162

00:07:15.460  -->  00:07:16.783
See you in the next video.
