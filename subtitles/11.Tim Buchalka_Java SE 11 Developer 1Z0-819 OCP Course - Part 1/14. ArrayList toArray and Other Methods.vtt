WEBVTT
1
1

00:00:05.450  -->  00:00:07.220 line:15% 
<v Tim>All right, so one more example now</v>
2

2

00:00:07.220  -->  00:00:08.980 line:15% 
for ArrayList dor toArray.
3

3

00:00:08.980  -->  00:00:12.030
We're gonna paste in this code after the other code,
4

4

00:00:12.030  -->  00:00:12.863
the main method.
5

5

00:00:13.988  -->  00:00:15.900
All righty, so there's the code and go back up to the top
6

6

00:00:15.900  -->  00:00:17.050
of what I've pasted in.
7

7

00:00:17.990  -->  00:00:19.470
So it's now ready for where the array length
8

8

00:00:19.470  -->  00:00:21.330
is less than the list size and the array
9

9

00:00:21.330  -->  00:00:22.660
elements initialise to null,
10

10

00:00:22.660  -->  00:00:24.370
or otherwise for the method toArray
11

11

00:00:24.370  -->  00:00:27.540
populates a new instantiated array of the same type
12

12

00:00:27.540  -->  00:00:30.980
as the parameter passed, and the size of the list itself.
13

13

00:00:30.980  -->  00:00:33.000
Not the parameter passed.
14

14

00:00:33.000  -->  00:00:34.601
So this code is very similar to scenario one,
15

15

00:00:34.601  -->  00:00:37.960
except what we're now using is an integer array
16

16

00:00:37.960  -->  00:00:39.950
initialised to three elements.
17

17

00:00:39.950  -->  00:00:42.820
You can see that on line 143 and our list has, in fact,
18

18

00:00:42.820  -->  00:00:44.120
has five elements.
19

19

00:00:44.120  -->  00:00:46.970
So we're sorting the result there to our local variable
20

20

00:00:46.970  -->  00:00:48.325
type var variable,
21

21

00:00:48.325  -->  00:00:52.430
and we're making no assumptions about what type of object
22

22

00:00:52.430  -->  00:00:54.330
the two array methods return in there.
23

23

00:00:55.230  -->  00:00:56.290
You can see the rest of the code there.
24

24

00:00:56.290  -->  00:00:57.658
So we're doing that again,
25

25

00:00:57.658  -->  00:00:59.460
basically for the raw ArrayList,
26

26

00:00:59.460  -->  00:01:01.093
as well as the generics one.
27

27

00:01:02.040  -->  00:01:03.590
All right, let's run this code.
28

28

00:01:05.960  -->  00:01:06.980
So all things being equal,
29

29

00:01:06.980  -->  00:01:08.510
this is exactly like scenario one
30

30

00:01:08.510  -->  00:01:10.012
that we explored in the previous video
31

31

00:01:10.012  -->  00:01:11.963
with a significant difference though
32

32

00:01:11.963  -->  00:01:13.940
The array that is returned from the method
33

33

00:01:13.940  -->  00:01:15.760
is not the array we passed,
34

34

00:01:15.760  -->  00:01:18.820
but it is the type we gave the array we passed
35

35

00:01:18.820  -->  00:01:20.560
as a parameter.
36

36

00:01:20.560  -->  00:01:22.320
One more example.
37

37

00:01:22.320  -->  00:01:23.450
Scenario five.
38

38

00:01:23.450  -->  00:01:24.700
Let's paste that code in.
39

39

00:01:26.610  -->  00:01:27.443
Okay, so there's the code.
40

40

00:01:27.443  -->  00:01:30.490
We just go back up and see the code from the top.
41

41

00:01:30.490  -->  00:01:31.979
So the scenario five here,
42

42

00:01:31.979  -->  00:01:34.550
this is just a twist to the different last example
43

43

00:01:34.550  -->  00:01:35.730
we pasted.
44

44

00:01:35.730  -->  00:01:37.670
So it's the array length list, the list size,
45

45

00:01:37.670  -->  00:01:39.910
and no reference to an array passed.
46

46

00:01:39.910  -->  00:01:42.290
The method toArray populates a new instantiated array
47

47

00:01:42.290  -->  00:01:44.400
of the same type as the parameter itself,
48

48

00:01:44.400  -->  00:01:45.669
and the size of the list itself,
49

49

00:01:45.669  -->  00:01:48.030
not the parameter passed.
50

50

00:01:48.030  -->  00:01:51.152
So we're passing here an referenced number zero array
51

51

00:01:51.152  -->  00:01:53.680
as the parameter, an empty array,
52

52

00:01:53.680  -->  00:01:56.690
at a different type than our ArrayList of integer object
53

53

00:01:56.690  -->  00:01:57.663
generic list.
54

54

00:01:59.229  -->  00:02:00.729
All right, so we run that now.
55

55

00:02:02.650  -->  00:02:04.770
So that's results for scenario five.
56

56

00:02:04.770  -->  00:02:07.380
And again, it's a number array, the array passed,
57

57

00:02:07.380  -->  00:02:08.830
and not a reference variable.
58

58

00:02:11.600  -->  00:02:12.600
So putting it all together here,
59

59

00:02:12.600  -->  00:02:14.220
at the top of array returned,
60

60

00:02:14.220  -->  00:02:16.466
is determined by the parameter passed,
61

61

00:02:16.466  -->  00:02:20.270
not by the type associated to the ArrayList itself.
62

62

00:02:20.270  -->  00:02:22.680
Type of the ArrayLsit does allow you to eliminate casting
63

63

00:02:22.680  -->  00:02:23.513
in most cases,
64

64

00:02:23.513  -->  00:02:25.790
the exception is when you have no parameter,
65

65

00:02:25.790  -->  00:02:29.066
or your parameter array is a different type.
66

66

00:02:29.066  -->  00:02:30.390
All right, so we're now going to review
67

67

00:02:30.390  -->  00:02:32.940
the other methods on ArrayLists, but very quickly.
68

68

00:02:32.940  -->  00:02:34.190
So we need a new class for this.
69

69

00:02:34.190  -->  00:02:35.800
So let's create one.
70

70

00:02:35.800  -->  00:02:38.023
ArrayListsExamples will be what we'll call it.
71

71

00:02:48.620  -->  00:02:50.290
This code includes a couple of samples each
72

72

00:02:50.290  -->  00:02:52.270
of equals, isEmpty, contains, constaintsAll,
73

73

00:02:52.270  -->  00:02:57.270
indexOf, lastIndexOf, sublist, iterator, and listIterator.
74

74

00:02:58.160  -->  00:02:59.970
They can see we're initialising our ArrayList
75

75

00:02:59.970  -->  00:03:01.370
at the top there,
76

76

00:03:01.370  -->  00:03:03.000
then we start with some of these calls.
77

77

00:03:03.000  -->  00:03:06.080
You can see that though isEmpty on line 20
78

78

00:03:06.080  -->  00:03:07.870
returns true if there's no elements in the array.
79

79

00:03:07.870  -->  00:03:11.123
Equals there returns true if the element values are equal.
80

80

00:03:11.123  -->  00:03:13.910
You can see we're comparing firstArray to second,
81

81

00:03:13.910  -->  00:03:17.346
and firstArray to the thirdArray.
82

82

00:03:17.346  -->  00:03:20.284
Using dot contains returns true if element values are equal.
83

83

00:03:20.284  -->  00:03:22.084
And you can see what we're doing there.
84

84

00:03:22.084  -->  00:03:24.640
Using firstArray dot contains DEF,
85

85

00:03:24.640  -->  00:03:26.483
and doing a contains ZZZ.
86

86

00:03:27.623  -->  00:03:30.750
ContainsAll must find all elements in the list,
87

87

00:03:30.750  -->  00:03:31.900
the order doesn't matter.
88

88

00:03:31.900  -->  00:03:35.733
We've got some examples of that on lines 37, 40, and 43.
89

89

00:03:37.486  -->  00:03:40.940
Dot indexOf returns minus one if the element is not found,
90

90

00:03:40.940  -->  00:03:42.760
or the index of the element found.
91

91

00:03:42.760  -->  00:03:44.893
You can see what got a couple examples of that.
92

92

00:03:45.985  -->  00:03:47.730
LastIndexOf returns again minus one
93

93

00:03:47.730  -->  00:03:48.840
if elements are not found,
94

94

00:03:48.840  -->  00:03:50.950
or the index of element if it's found.
95

95

00:03:50.950  -->  00:03:53.150
Two examples there of using dot lastIndexOf.
96

96

00:03:54.239  -->  00:03:55.800
And an example there of subList
97

97

00:03:55.800  -->  00:03:58.860
that returns a reduced list using the starting index
98

98

00:03:58.860  -->  00:03:59.693
and ending index.
99

99

00:03:59.693  -->  00:04:02.163
You can see the call there on line 62.
100

100

00:04:03.260  -->  00:04:05.530
An example of using an iterator there.
101

101

00:04:05.530  -->  00:04:06.980
And lastly you got an example
102

102

00:04:06.980  -->  00:04:11.233
of using the ListIterator code from line 70 and onwards.
103

103

00:04:12.460  -->  00:04:13.810
So if we run all this code.
104

104

00:04:16.070  -->  00:04:18.393
We've got the various output applicable,
105

105

00:04:19.387  -->  00:04:20.423
as you can see.
106

106

00:04:23.420  -->  00:04:24.590
All right, so I've been through quite a lot,
107

107

00:04:24.590  -->  00:04:26.660
so you may wanna go back and re-review those videos
108

108

00:04:26.660  -->  00:04:28.470
remembering that the source code is available for you
109

109

00:04:28.470  -->  00:04:30.400
to download and study.
110

110

00:04:30.400  -->  00:04:32.810
This is the case for all videos in this course.
111

111

00:04:32.810  -->  00:04:34.190
All right, so we'll end the video here.
112

112

00:04:34.190  -->  00:04:35.320 line:15% 
And in the next one,
113

113

00:04:35.320  -->  00:04:37.510 line:15% 
it's time to review some additional information
114

114

00:04:37.510  -->  00:04:39.710 line:15% 
about ArrayLists and collections.
115

115

00:04:39.710  -->  00:04:41.010 line:15% 
See you in the next video.
