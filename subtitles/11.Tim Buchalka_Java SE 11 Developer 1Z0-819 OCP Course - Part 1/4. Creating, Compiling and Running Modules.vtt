WEBVTT
1
1

00:00:05.072  -->  00:00:06.400
<v Instructor>In this video,</v>
2

2

00:00:06.400  -->  00:00:09.050
we're going to use IntelliJ's support for modules
3

3

00:00:09.050  -->  00:00:11.540
to create a module, build, and run it.
4

4

00:00:11.540  -->  00:00:13.040
In addition, we'll repeat the steps
5

5

00:00:13.040  -->  00:00:16.070
manually using a terminal session from the IDE,
6

6

00:00:16.070  -->  00:00:17.570
because you may run across questions
7

7

00:00:17.570  -->  00:00:20.110
on the exam about command line options.
8

8

00:00:20.110  -->  00:00:22.110
So you need to create a new project in IntelliJ
9

9

00:00:22.110  -->  00:00:25.310
which I've done, and name it ModuleTesting.
10

10

00:00:25.310  -->  00:00:26.880
Then we need to do something a little bit different,
11

11

00:00:26.880  -->  00:00:28.150
we need to come up here and right click
12

12

00:00:28.150  -->  00:00:31.210
on the project name, select new,
13

13

00:00:31.210  -->  00:00:34.780
module, and I'm going to click on next,
14

14

00:00:34.780  -->  00:00:37.030
and I'm going to call this one MyFirstModule.
15

15

00:00:40.290  -->  00:00:43.840
Accepting all the defaults, clicking finish.
16

16

00:00:43.840  -->  00:00:46.943
So note now that we've got this MyFirstModule here,
17

17

00:00:48.851  -->  00:00:50.490
and it's got its own source folder as well,
18

18

00:00:50.490  -->  00:00:53.310
and that's actually a path that's available in our project.
19

19

00:00:53.310  -->  00:00:54.793
So if you go and have a look at that,
20

20

00:00:56.870  -->  00:00:58.330
open in terminal, you can see
21

21

00:00:58.330  -->  00:01:00.410
we've got ModuleTesting which was the root folder,
22

22

00:01:00.410  -->  00:01:02.581
IntelliJ's created a subfolder, MyFirstModule,
23

23

00:01:02.581  -->  00:01:04.493
and we've got this source folder as well.
24

24

00:01:05.830  -->  00:01:07.310
All right, we'll exit.
25

25

00:01:07.310  -->  00:01:09.550
All right, so I'll just close down terminal for now.
26

26

00:01:09.550  -->  00:01:10.383
Now that I've done that,
27

27

00:01:10.383  -->  00:01:13.270
we want to create our first class.
28

28

00:01:13.270  -->  00:01:14.670
Now we also want to make sure
29

29

00:01:14.670  -->  00:01:17.930
we're in our MyFirstModule, and source folder,
30

30

00:01:17.930  -->  00:01:19.550
and right click that source folder
31

31

00:01:19.550  -->  00:01:22.270
and not the one outside that's created by default.
32

32

00:01:22.270  -->  00:01:23.360
That's not part of the module.
33

33

00:01:23.360  -->  00:01:25.300
Right click on this one, new,
34

34

00:01:25.300  -->  00:01:27.670
java class, and we'll call this one
35

35

00:01:27.670  -->  00:01:30.673
modular being the package, dot HelloWorld.
36

36

00:01:32.810  -->  00:01:34.810
Paste in some basic code,
37

37

00:01:34.810  -->  00:01:35.643
very simple as you can see,
38

38

00:01:35.643  -->  00:01:36.840
hello new modular world.
39

39

00:01:36.840  -->  00:01:39.393
Let's run this in the usual way.
40

40

00:01:40.920  -->  00:01:42.440
Okay, so I can see the programme ran,
41

41

00:01:42.440  -->  00:01:44.820
and although we've set up everything to be modular,
42

42

00:01:44.820  -->  00:01:46.950
or think we have, we're not actually yet
43

43

00:01:46.950  -->  00:01:49.696
running the code as a module.
44

44

00:01:49.696  -->  00:01:51.800
You'll notice that if I scroll over here
45

45

00:01:51.800  -->  00:01:53.767
and look at the arguments to java.exe,
46

46

00:01:55.140  -->  00:01:57.720
we've got this -classpath showing.
47

47

00:01:57.720  -->  00:01:59.841
The fact that IntelliJ's still using classpath
48

48

00:01:59.841  -->  00:02:01.870
in the arguments is our clue
49

49

00:02:01.870  -->  00:02:04.170
that we're not yet executing our code as a module.
50

50

00:02:04.170  -->  00:02:06.710
There's actually one more step that we need to take
51

51

00:02:06.710  -->  00:02:07.960
to make this a working module.
52

52

00:02:07.960  -->  00:02:11.350
So what we need to do is come back up to the module,
53

53

00:02:11.350  -->  00:02:14.720
and up to the source folder within the MyFirstModule,
54

54

00:02:14.720  -->  00:02:16.847
right click that, select new,
55

55

00:02:16.847  -->  00:02:19.443
and select module-info.java.
56

56

00:02:20.300  -->  00:02:21.447
You can see that we've got a new java source file
57

57

00:02:21.447  -->  00:02:23.250
that's been generated for us
58

58

00:02:23.250  -->  00:02:25.330
and look's pretty basic.
59

59

00:02:25.330  -->  00:02:28.090
We'll be discussing module-info.java in more detail
60

60

00:02:28.090  -->  00:02:30.870
in future videos in this section of the course,
61

61

00:02:30.870  -->  00:02:33.030
but for now just know that the module name
62

62

00:02:33.030  -->  00:02:34.780
follows the module keyword,
63

63

00:02:34.780  -->  00:02:36.920
and is the name of the module we created earlier
64

64

00:02:36.920  -->  00:02:39.460
in this video, and the module body is required
65

65

00:02:39.460  -->  00:02:41.270
even though it's just a set of curly braces
66

66

00:02:41.270  -->  00:02:42.580
as shown below.
67

67

00:02:42.580  -->  00:02:43.810
All right, now that we've done that,
68

68

00:02:43.810  -->  00:02:45.560
if we go back and rerun this again,
69

69

00:02:47.740  -->  00:02:49.200
we still get the same output,
70

70

00:02:49.200  -->  00:02:50.210
but if we scroll over again
71

71

00:02:50.210  -->  00:02:52.913
and look at the arguments to java.exe again,
72

72

00:02:53.990  -->  00:02:56.040
notice how we've got some different
73

73

00:02:56.040  -->  00:02:57.210
arguments there now.
74

74

00:02:57.210  -->  00:03:00.500
Specifically, we're no longer using the -classpath option,
75

75

00:03:00.500  -->  00:03:02.550
this has been replaced with -p,
76

76

00:03:02.550  -->  00:03:04.440
which alternatively can be replaced with
77

77

00:03:04.440  -->  00:03:07.490
the more meaningful --module-path,
78

78

00:03:07.490  -->  00:03:11.120
and also -m has been added as well,
79

79

00:03:11.120  -->  00:03:13.510
and that's the alias for --module.
80

80

00:03:13.510  -->  00:03:15.490
The point here is that we're now executing
81

81

00:03:15.490  -->  00:03:17.563
our code as a module.
82

82

00:03:17.563  -->  00:03:18.500
All right, so let's go and have a look
83

83

00:03:18.500  -->  00:03:20.620
a little bit more at the command line.
84

84

00:03:20.620  -->  00:03:23.540
What I'm going to do is come up to our project name up here,
85

85

00:03:23.540  -->  00:03:25.633
right click that, open in terminal.
86

86

00:03:26.490  -->  00:03:28.270
And what we want to do here is manually execute
87

87

00:03:28.270  -->  00:03:29.963
the code from the command line ourselves
88

88

00:03:29.963  -->  00:03:31.880
with different options.
89

89

00:03:31.880  -->  00:03:33.352
Now this example, I'm going to be using
90

90

00:03:33.352  -->  00:03:36.350
<v ->-module-path instead of -p,</v>
91

91

00:03:36.350  -->  00:03:38.451
but keep in mind that these are interchangeable options
92

92

00:03:38.451  -->  00:03:39.780
in the java command,
93

93

00:03:39.780  -->  00:03:41.930
and we're also specifying, or will be specifying
94

94

00:03:41.930  -->  00:03:44.520
the out/production directory.
95

95

00:03:44.520  -->  00:03:46.620
This is the directory created by IntelliJ.
96

96

00:03:49.040  -->  00:03:50.451
That's where the compiled classes are
97

97

00:03:50.451  -->  00:03:53.950
in the MyFirstModule exploded directory.
98

98

00:03:53.950  -->  00:03:56.710
Now modules can be exploded directories or JAR files,
99

99

00:03:56.710  -->  00:03:58.120
either of which must have
100

100

00:03:58.120  -->  00:04:01.160
a module-info.class in the root folder,
101

101

00:04:01.160  -->  00:04:03.410
and you can see for our MyFirstModule module,
102

102

00:04:03.410  -->  00:04:06.131
we've got that module-info.class there.
103

103

00:04:06.131  -->  00:04:08.980
All right, so let's try typing a command now.
104

104

00:04:08.980  -->  00:04:13.980
So I'm gonna type java --module-path out\production\
105

105

00:04:19.710  -->  00:04:24.010
<v ->m, which is our alias for module, MyFirstModule.</v>
106

106

00:04:24.010  -->  00:04:26.620
So MyFirstModule, typed the same way
107

107

00:04:26.620  -->  00:04:28.820
as we created it, with capital letters
108

108

00:04:28.820  -->  00:04:33.820
for My, First, and Module, and press enter.
109

109

00:04:34.209  -->  00:04:35.410
Now you'll notice that that didn't work,
110

110

00:04:35.410  -->  00:04:37.410
and we've got a message from the JVM,
111

111

00:04:37.410  -->  00:04:40.270
module MyFirstmodule doesn't have a ModuleMainClass
112

112

00:04:40.270  -->  00:04:45.020
attribute, use -m &lt;module&gt;/&lt;main-class&gt;.
113

113

00:04:45.020  -->  00:04:46.420
So basically the issue here is
114

114

00:04:46.420  -->  00:04:48.740
that we didn't specify the class we wanna run.
115

115

00:04:48.740  -->  00:04:49.573
So what we're gonna do,
116

116

00:04:49.573  -->  00:04:51.060
I'm just gonna press up arrow there,
117

117

00:04:51.060  -->  00:04:53.730
we need to put a slash, forward slash,
118

118

00:04:53.730  -->  00:04:58.003
the package name is modular, class name HelloWorld,
119

119

00:04:59.510  -->  00:05:02.130
press enter, and success.
120

120

00:05:02.130  -->  00:05:04.290
We've written our first module and executed
121

121

00:05:04.290  -->  00:05:06.923
it both from IntelliJ and from the command line.
122

122

00:05:08.091  -->  00:05:10.210
Right, so let's now create our first executable
123

123

00:05:10.210  -->  00:05:12.350
modular JAR from the command line.
124

124

00:05:12.350  -->  00:05:13.790
It's not actually different from creating
125

125

00:05:13.790  -->  00:05:16.090
an old fashioned executable JAR file.
126

126

00:05:16.090  -->  00:05:18.010
We'll create this JAR file in the module
127

127

00:05:18.010  -->  00:05:20.691
testing project root folder.
128

128

00:05:20.691  -->  00:05:21.792
And we're gonna create a new JAR file
129

129

00:05:21.792  -->  00:05:23.977
MyFirstModule.jar and specify the main method
130

130

00:05:23.977  -->  00:05:26.163
defined in the class which you've just seen,
131

131

00:05:26.163  -->  00:05:30.160
modular.helloworld, and packaging any files or folders
132

132

00:05:30.160  -->  00:05:33.940
we find in the out/production/MyFirstModule directory,
133

133

00:05:33.940  -->  00:05:36.640
which again you can see in the project pane there.
134

134

00:05:36.640  -->  00:05:38.640
So the command to do that would be jar
135

135

00:05:39.763  -->  00:05:44.763
<v ->-create --file, and the file is gonna be called</v>
136

136

00:05:45.390  -->  00:05:50.390
MyFirstModule.jar, space, you need to now
137

137

00:05:50.910  -->  00:05:55.040
specify the main class, so --main-class
138

138

00:05:55.040  -->  00:05:56.593
and that's our modular.HelloWorld.
139

139

00:05:58.620  -->  00:06:01.780
Then we need to specify the directory
140

140

00:06:01.780  -->  00:06:04.000
that we want to include the files for,
141

141

00:06:04.000  -->  00:06:09.000
so -C out\production\MyFirstModule,
142

142

00:06:11.272  -->  00:06:12.180
so I'm just following the tree you can see
143

143

00:06:12.180  -->  00:06:13.180
in the project pane,
144

144

00:06:14.940  -->  00:06:17.750
backslash space and then a dot,
145

145

00:06:17.750  -->  00:06:20.723
so we're including everything, press enter,
146

146

00:06:20.723  -->  00:06:21.556
and that's been created.
147

147

00:06:21.556  -->  00:06:23.810
And if I go back and click into the project pane,
148

148

00:06:25.140  -->  00:06:27.100
notice we've now got MyFirstModule.jar
149

149

00:06:27.100  -->  00:06:29.040
that has appeared, so that's the file we've just created
150

150

00:06:29.040  -->  00:06:30.540
with that command line.
151

151

00:06:30.540  -->  00:06:32.510
What actually makes this a modular jar file
152

152

00:06:32.510  -->  00:06:34.800
is the class file in the root of the jar file,
153

153

00:06:34.800  -->  00:06:36.470
the module-info.class.
154

154

00:06:36.470  -->  00:06:37.540
And again we can see that in the
155

155

00:06:37.540  -->  00:06:41.120
out\production\MyFirstModule directory
156

156

00:06:41.120  -->  00:06:43.480
that's now getting included in the jar file.
157

157

00:06:43.480  -->  00:06:45.860
Now you can examine the jar file as follows,
158

158

00:06:45.860  -->  00:06:50.860
so we'll do a jar -f MyFirstModule.jar --list.
159

159

00:06:57.450  -->  00:06:59.120
All right, so you can see the files there
160

160

00:06:59.120  -->  00:07:00.110
and obviously the important one
161

161

00:07:00.110  -->  00:07:02.230
module-info.class is there,
162

162

00:07:02.230  -->  00:07:03.670
and that again is what makes this
163

163

00:07:03.670  -->  00:07:04.913
a modular jar file.
164

164

00:07:06.210  -->  00:07:09.060
Now, we can use the jar file and the described module,
165

165

00:07:09.060  -->  00:07:11.670
or alternatively -d to describe the modular jar
166

166

00:07:11.670  -->  00:07:14.150
specification and not its contents.
167

167

00:07:14.150  -->  00:07:15.210
We'll actually be discussing the
168

168

00:07:15.210  -->  00:07:18.360
specifications, module jar specifications
169

169

00:07:18.360  -->  00:07:20.170
in upcoming videos in more detail.
170

170

00:07:20.170  -->  00:07:22.300
For now though, let's have a look at how to do that.
171

171

00:07:22.300  -->  00:07:27.300
So, jar -f MyFirstModule.jar -d, in this case,
172

172

00:07:31.873  -->  00:07:34.403
because again we're trying to describe the module.
173

173

00:07:36.723  -->  00:07:39.170
And you can see the output on screen there.
174

174

00:07:39.170  -->  00:07:40.440
All right, and alternatively,
175

175

00:07:40.440  -->  00:07:45.070
we can also type java --modular-path dot
176

176

00:07:48.771  -->  00:07:52.130
and space dash dash, I'm not actually saying space
177

177

00:07:52.130  -->  00:07:53.513
all the time, I'll show you now that when you typing
178

178

00:07:53.513  -->  00:07:56.330
outputs you need to specify space,
179

179

00:07:56.330  -->  00:07:59.090
describe-module and then MyFirstModule.
180

180

00:08:01.470  -->  00:08:04.420
Now, note here that using the java command here,
181

181

00:08:04.420  -->  00:08:06.030
we need to specify the module path,
182

182

00:08:06.030  -->  00:08:09.970
the --module-path or alternatively, -p for java,
183

183

00:08:09.970  -->  00:08:12.620
even if our module is in the current directory.
184

184

00:08:12.620  -->  00:08:16.330
So we do that, and I'm not sure why that didn't work.
185

185

00:08:16.330  -->  00:08:19.080
We'll just exit and try a refresh there
186

186

00:08:19.080  -->  00:08:20.430
and see whether that works.
187

187

00:08:32.900  -->  00:08:33.733
Well that was weird,
188

188

00:08:33.733  -->  00:08:34.807
I'm not sure what was going on there
189

189

00:08:34.807  -->  00:08:35.750
if that was a memory issue or something,
190

190

00:08:35.750  -->  00:08:37.660
but in any event that's working now.
191

191

00:08:37.660  -->  00:08:42.390
So that's the way to do this using the java executable.
192

192

00:08:42.390  -->  00:08:44.050
And note there that you do need to specify
193

193

00:08:44.050  -->  00:08:46.560
the module path using --module-path or
194

194

00:08:46.560  -->  00:08:49.510
alternatively -p, even if the module's
195

195

00:08:49.510  -->  00:08:51.519
in the current directory.
196

196

00:08:51.519  -->  00:08:53.330
All right, then the alternative there,
197

197

00:08:53.330  -->  00:08:57.907
java -p . MyFirstModule, and I need to put
198

198

00:09:02.900  -->  00:09:04.473
the -d there in front of that.
199

199

00:09:07.120  -->  00:09:09.993
Okay, we get the same output as previous.
200

200

00:09:10.920  -->  00:09:12.480
All right, so what about executing the code
201

201

00:09:12.480  -->  00:09:13.670
in the jar file?
202

202

00:09:13.670  -->  00:09:15.090
Well we do that by telling the java
203

203

00:09:15.090  -->  00:09:16.170
virtual machine to look for
204

204

00:09:16.170  -->  00:09:19.270
a module jar file or exploded module directory
205

205

00:09:19.270  -->  00:09:22.530
using the --module-path or -p directory
206

206

00:09:22.530  -->  00:09:25.370
then pass the module name using the -m
207

207

00:09:25.370  -->  00:09:27.050
or --module option.
208

208

00:09:27.050  -->  00:09:30.630
So it's java --module-path dot, then --module
209

209

00:09:39.781  -->  00:09:44.472
MyFirstModule, and you can see the execution
210

210

00:09:44.472  -->  00:09:46.810
output showing on the screen.
211

211

00:09:46.810  -->  00:09:48.390
All right, so let's look at using jdeps
212

212

00:09:48.390  -->  00:09:51.170
which launches the java class dependency analyzer
213

213

00:09:51.170  -->  00:09:54.300
which we've discussed earlier in this section.
214

214

00:09:54.300  -->  00:09:56.140
Now, you can use jdeps with no options
215

215

00:09:56.140  -->  00:10:01.140
using just the jar file, so jdeps MyFirstModule.jar,
216

216

00:10:05.569  -->  00:10:08.000
and you can see the output there on screen.
217

217

00:10:10.008  -->  00:10:10.900
All right, so let's end the video here
218

218

00:10:10.900  -->  00:10:11.970
because it's getting quite long.
219

219

00:10:11.970  -->  00:10:14.060
In the next one, I want to bring up
220

220

00:10:14.060  -->  00:10:16.400
some slides and show you some command line options
221

221

00:10:16.400  -->  00:10:18.120
and then we'll continue on and we'll create
222

222

00:10:18.120  -->  00:10:20.430
a second module and we'll look at how to
223

223

00:10:20.430  -->  00:10:22.500
interact and actually get the second module
224

224

00:10:22.500  -->  00:10:24.010
working with the first one.
225

225

00:10:24.010  -->  00:10:25.310
See you in the next video.
