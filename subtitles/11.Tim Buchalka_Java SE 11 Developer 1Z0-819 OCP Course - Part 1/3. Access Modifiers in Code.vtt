WEBVTT
1
1

00:00:05.469  -->  00:00:06.750
<v Tim>All right, so in the previous video,</v>
2

2

00:00:06.750  -->  00:00:10.120
we saw that through the modifiers, public, private,
3

3

00:00:10.120  -->  00:00:12.840
and no modifier, are very straightforward.
4

4

00:00:12.840  -->  00:00:15.290
The protected access modifier though, is ripe
5

5

00:00:15.290  -->  00:00:17.290
for tricky exam questions.
6

6

00:00:17.290  -->  00:00:19.380
We are going to be talking more about the protected modifier
7

7

00:00:19.380  -->  00:00:21.580
when we delve into into inheritance further.
8

8

00:00:23.630  -->  00:00:25.150
This section wouldn't be complete though
9

9

00:00:25.150  -->  00:00:27.560
if we didn't talk about overriding a little bit here,
10

10

00:00:27.560  -->  00:00:30.310
although overriding is part of the inheritance section.
11

11

00:00:30.310  -->  00:00:32.740
There are different rules to which access modifiers
12

12

00:00:32.740  -->  00:00:35.630
are allowable based on the inherited elements.
13

13

00:00:35.630  -->  00:00:37.670
You can override a parent's attribute,
14

14

00:00:37.670  -->  00:00:39.780
creating an attribute on the child class,
15

15

00:00:39.780  -->  00:00:42.560
with the same name and type as the parent.
16

16

00:00:42.560  -->  00:00:45.330
This is called attribute hiding because you are hiding
17

17

00:00:45.330  -->  00:00:48.150
the parent's attribute with the child's.
18

18

00:00:48.150  -->  00:00:50.850
A child's attribute can be more restrictive
19

19

00:00:50.850  -->  00:00:52.730
or less restrictive than the parent's.
20

20

00:00:52.730  -->  00:00:54.740
There are no invalid combinations.
21

21

00:00:54.740  -->  00:00:57.733
Let's explore a couple of these variations in code now.
22

22

00:00:58.939  -->  00:01:01.070
All right, so we're starting out in encapsulation project.
23

23

00:01:01.070  -->  00:01:02.820
We're gonna create a new class now.
24

24

00:01:03.820  -->  00:01:06.768
We're gonna call this one allowable child modifiers.
25

25

00:01:06.768  -->  00:01:08.844
(typing)
26

26

00:01:08.844  -->  00:01:10.742
(typing)
27

27

00:01:10.742  -->  00:01:12.927
(typing)
28

28

00:01:12.927  -->  00:01:15.277
Okay, so there's our code.
29

29

00:01:15.277  -->  00:01:17.500
All right, so firstly you can see here.
30

30

00:01:17.500  -->  00:01:20.600
We've got an animal class with four attributes, again,
31

31

00:01:20.600  -->  00:01:22.290
each with a different access modifier.
32

32

00:01:22.290  -->  00:01:24.960
And it also has toString method there
33

33

00:01:24.960  -->  00:01:27.220
which prints out information about the animal.
34

34

00:01:27.220  -->  00:01:28.053
Looking down a little bit further here,
35

35

00:01:28.053  -->  00:01:29.557
we've got a dog class as well
36

36

00:01:29.557  -->  00:01:31.470
that that extends the animal class
37

37

00:01:31.470  -->  00:01:33.880
and declares the same four attributes
38

38

00:01:33.880  -->  00:01:35.220
as its parents but with more
39

39

00:01:35.220  -->  00:01:37.300
or less restrictive access modifiers.
40

40

00:01:37.300  -->  00:01:40.070
So you can see in the type here, type was private on animal.
41

41

00:01:40.070  -->  00:01:41.340
We're declaring it public here.
42

42

00:01:41.340  -->  00:01:43.670
So this is obviously less restrictive hiding.
43

43

00:01:43.670  -->  00:01:44.840
The case of owner.
44

44

00:01:44.840  -->  00:01:46.570
Owner was packaged private on animal.
45

45

00:01:46.570  -->  00:01:48.260
We're declaring it here protected
46

46

00:01:48.260  -->  00:01:50.560
so its less restrictive hiding.
47

47

00:01:50.560  -->  00:01:53.120
For breed, breed was protected on animal.
48

48

00:01:53.120  -->  00:01:55.940
We're declaring it as packaged private here, by default,
49

49

00:01:55.940  -->  00:01:58.050
by not specifying an access modifier.
50

50

00:01:58.050  -->  00:02:00.720
Packaged private is more restrictive hiding than protected.
51

51

00:02:00.720  -->  00:02:03.300
And lastly, we're setting name to private
52

52

00:02:03.300  -->  00:02:04.810
and name was public on animal.
53

53

00:02:04.810  -->  00:02:06.180
We're declaring it private here,
54

54

00:02:06.180  -->  00:02:08.946
which means it's more restricted.
55

55

00:02:08.946  -->  00:02:10.233
Okay, so you can see we've got a constructor there and all,
56

56

00:02:10.233  -->  00:02:11.833
so a toString method.
57

57

00:02:12.920  -->  00:02:16.344
And then we got our allowable child modifiers class there,
58

58

00:02:16.344  -->  00:02:19.550
so you can see it's creating instantiated new versions
59

59

00:02:19.550  -->  00:02:21.590
of both classes, both animal and dog,
60

60

00:02:21.590  -->  00:02:23.040
and printing out the results.
61

61

00:02:24.060  -->  00:02:25.060
So let's run this.
62

62

00:02:27.645  -->  00:02:28.650
And you can see that that's valid.
63

63

00:02:28.650  -->  00:02:31.660
The code works fine, verifying that access modifiers
64

64

00:02:31.660  -->  00:02:34.150
for attributes already defined on a parent,
65

65

00:02:34.150  -->  00:02:36.760
can be more or less restrictive.
66

66

00:02:36.760  -->  00:02:39.290
But to note also that even though we specified
67

67

00:02:39.290  -->  00:02:41.040
all the dog's attributes,
68

68

00:02:41.040  -->  00:02:44.880
executing toString as we're doing on line 65,
69

69

00:02:44.880  -->  00:02:47.300
it doesn't print them and that's because the toString method
70

70

00:02:47.300  -->  00:02:49.620
calls the toString method of the parent
71

71

00:02:49.620  -->  00:02:51.720
which itself has no knowledge of the attributes
72

72

00:02:51.720  -->  00:02:55.120
to find on the child, even if they have the same name.
73

73

00:02:55.120  -->  00:02:57.500
You can see that you can print them though,
74

74

00:02:57.500  -->  00:02:59.220
with the exception of the name attribute,
75

75

00:02:59.220  -->  00:03:01.830
which is private for the dog class.
76

76

00:03:01.830  -->  00:03:03.820
All right, so let's continue on with this.
77

77

00:03:03.820  -->  00:03:06.157
Let's try assigning the pug to the animal attribute
78

78

00:03:06.157  -->  00:03:07.810
and see what happens.
79

79

00:03:07.810  -->  00:03:09.630
So I'm adding this code here at the bottom
80

80

00:03:09.630  -->  00:03:12.544
of the main method in allowable child modifiers.
81

81

00:03:12.544  -->  00:03:14.170
(typing)
82

82

00:03:14.170  -->  00:03:15.940
So you can see here that we can print the name,
83

83

00:03:15.940  -->  00:03:16.900
but not the type.
84

84

00:03:16.900  -->  00:03:18.380
And if we hover over type,
85

85

00:03:18.380  -->  00:03:20.313
type has private access in animal.
86

86

00:03:21.179  -->  00:03:23.233
Let's comment that out and run it.
87

87

00:03:25.320  -->  00:03:26.200
So although you were able
88

88

00:03:26.200  -->  00:03:29.340
to access parent name attribute and owner breed,
89

89

00:03:29.340  -->  00:03:32.760
you kind of actually access the child's attributes here.
90

90

00:03:32.760  -->  00:03:34.510
This structure seems to flow in the face
91

91

00:03:34.510  -->  00:03:37.290
of the features you generally desire from inheritance,
92

92

00:03:37.290  -->  00:03:39.710
but there are valid reasons for doing so in many cases
93

93

00:03:39.710  -->  00:03:42.280
which is why it's allowable.
94

94

00:03:42.280  -->  00:03:43.370
All right, so next, let's move on
95

95

00:03:43.370  -->  00:03:47.200
and see if methods are the same with access modifiers.
96

96

00:03:47.200  -->  00:03:48.765
So we're gonna create a new class here.
97

97

00:03:48.765  -->  00:03:50.848
(typing)
98

98

00:03:52.440  -->  00:03:54.954
We'll call this one allowable override modifiers.
99

99

00:03:54.954  -->  00:03:56.976
(typing)
100

100

00:03:56.976  -->  00:03:59.059
(typing)
101

101

00:04:02.070  -->  00:04:03.500
Okay, there's our code.
102

102

00:04:03.500  -->  00:04:05.690
So you can see firstly, we've got an employee class there
103

103

00:04:05.690  -->  00:04:07.080
that's got four methods.
104

104

00:04:07.080  -->  00:04:10.160
And each method has a different access modifier.
105

105

00:04:10.160  -->  00:04:11.264
So moving on down there,
106

106

00:04:11.264  -->  00:04:13.120
we've also got a method there, blog,
107

107

00:04:13.120  -->  00:04:16.210
which has protected access and calls to private method.
108

108

00:04:16.210  -->  00:04:19.150
So moving on down, we've also got boss class here
109

109

00:04:19.150  -->  00:04:20.780
and that extends the employee class
110

110

00:04:20.780  -->  00:04:21.840
and there are also overrides
111

111

00:04:21.840  -->  00:04:23.950
two of the employee class methods,
112

112

00:04:23.950  -->  00:04:26.120
the public one and the protected one.
113

113

00:04:26.120  -->  00:04:28.660
The boss class makes the private method public
114

114

00:04:28.660  -->  00:04:30.470
and the package method protected
115

115

00:04:30.470  -->  00:04:33.020
making the methods less restrictive.
116

116

00:04:33.020  -->  00:04:34.070
So moving down, we've also got
117

117

00:04:34.070  -->  00:04:37.310
our allowable override modifiers class, main method there,
118

118

00:04:37.310  -->  00:04:39.420
instantiating objects of employee and boss,
119

119

00:04:39.420  -->  00:04:42.580
and printing the results of calling various methods.
120

120

00:04:42.580  -->  00:04:43.523
So let's run this.
121

121

00:04:45.970  -->  00:04:46.803
So as you can see,
122

122

00:04:46.803  -->  00:04:48.680
an employee can make a public statement,
123

123

00:04:48.680  -->  00:04:50.420
an employee can make a protected statement,
124

124

00:04:50.420  -->  00:04:52.381
an employee can make a package statement,
125

125

00:04:52.381  -->  00:04:54.680
an employee can make a private statement,
126

126

00:04:54.680  -->  00:04:56.530
but only the employee can make it public
127

127

00:04:56.530  -->  00:04:57.900
through other means.
128

128

00:04:57.900  -->  00:04:59.860
And a boss's packaged speech can be shared
129

129

00:04:59.860  -->  00:05:00.880
with his children as well now.
130

130

00:05:00.880  -->  00:05:03.330
A boss's private statements can be made public.
131

131

00:05:03.330  -->  00:05:05.330
So we didn't try restricting access though,
132

132

00:05:05.330  -->  00:05:06.650
so let's do that now.
133

133

00:05:06.650  -->  00:05:08.440
So I'm gonna add a couple more methods now
134

134

00:05:08.440  -->  00:05:09.833
to the boss class.
135

135

00:05:11.530  -->  00:05:12.580
So there's our boss class.
136

136

00:05:12.580  -->  00:05:15.500
Let's add a couple of methods as I mentioned.
137

137

00:05:15.500  -->  00:05:16.920
And you can see that by doing that,
138

138

00:05:16.920  -->  00:05:19.620
immediately we've got compile errors for both methods.
139

139

00:05:25.270  -->  00:05:27.040
The problem here is that you can't make methods
140

140

00:05:27.040  -->  00:05:30.000
more restrictive on the child or subclass.
141

141

00:05:30.000  -->  00:05:32.450
Extending a class implies effectively,
142

142

00:05:32.450  -->  00:05:34.730
you're gonna be adding functionality to it.
143

143

00:05:34.730  -->  00:05:37.120
By trying to restrict access on methods,
144

144

00:05:37.120  -->  00:05:38.590
you are attempting the opposite.
145

145

00:05:38.590  -->  00:05:41.370
In fact, limiting the functionality of a parent class,
146

146

00:05:41.370  -->  00:05:43.080
which is not permissible.
147

147

00:05:43.080  -->  00:05:45.700
The parent class created a contract at a public
148

148

00:05:45.700  -->  00:05:47.500
and or package or protected level,
149

149

00:05:47.500  -->  00:05:50.090
and any class extending it cannot disregard
150

150

00:05:50.090  -->  00:05:51.763
or override that contract.
151

151

00:05:53.350  -->  00:05:55.944
So let's comment out those two methods.
152

152

00:05:55.944  -->  00:05:58.027
(typing)
153

153

00:06:00.510  -->  00:06:01.880
So the example we just talked about
154

154

00:06:01.880  -->  00:06:04.650
demonstrated two examples where you were restricted
155

155

00:06:04.650  -->  00:06:07.080
from using one of the four access modifiers.
156

156

00:06:07.080  -->  00:06:09.440
So this chart tries to show you all the cases
157

157

00:06:09.440  -->  00:06:12.680
where a particular access modifier is not allowed.
158

158

00:06:12.680  -->  00:06:15.220
So firstly, looking at the top level elements,
159

159

00:06:15.220  -->  00:06:18.720
class, interface, and enum, protected is not allowed,
160

160

00:06:18.720  -->  00:06:20.140
private is not allowed,
161

161

00:06:20.140  -->  00:06:22.950
and what no modifier means is package.
162

162

00:06:22.950  -->  00:06:25.250
Overriding a public method of a parent class,
163

163

00:06:25.250  -->  00:06:28.810
protected's not allowed, no modifier's not allowed,
164

164

00:06:28.810  -->  00:06:30.530
and private's not allowed.
165

165

00:06:30.530  -->  00:06:32.434
And again, no modifier means package.
166

166

00:06:32.434  -->  00:06:34.830
Next, we've got overriding a protected method
167

167

00:06:34.830  -->  00:06:37.510
of a parent class, no modifier is not allowed,
168

168

00:06:37.510  -->  00:06:38.830
either is private.
169

169

00:06:38.830  -->  00:06:41.670
Overriding a package method of a parent class,
170

170

00:06:41.670  -->  00:06:42.953
private is not allowed.
171

171

00:06:45.320  -->  00:06:47.730
Abstract methods, private's not allowed.
172

172

00:06:47.730  -->  00:06:50.670
Interface methods, protected is not allowed
173

173

00:06:50.670  -->  00:06:51.910
and in terms of private,
174

174

00:06:51.910  -->  00:06:54.950
the method must be implemented if private's used.
175

175

00:06:54.950  -->  00:06:56.840
And the note there that what no modifier means
176

176

00:06:56.840  -->  00:06:59.220
is public as of Java 8.
177

177

00:06:59.220  -->  00:07:02.230
Interface attributes, protected is not allowed
178

178

00:07:02.230  -->  00:07:03.800
and private is not allowed
179

179

00:07:03.800  -->  00:07:06.990
and no modifier means public as of Java 8.
180

180

00:07:06.990  -->  00:07:09.280
Enum constants, no modifier can be specified
181

181

00:07:09.280  -->  00:07:10.904
and it always defaults to public,
182

182

00:07:10.904  -->  00:07:14.300
public and protected as well as private are all not allowed
183

183

00:07:14.300  -->  00:07:16.570
and no modifier means public.
184

184

00:07:16.570  -->  00:07:19.610
And finally enum constructors, public and protected
185

185

00:07:19.610  -->  00:07:20.820
are both not allowed.
186

186

00:07:20.820  -->  00:07:23.390
Private is redundant if it's used
187

187

00:07:23.390  -->  00:07:25.973
and what no modifier means is private.
188

188

00:07:27.180  -->  00:07:29.570
All right, so we've now reviewed the access modifiers,
189

189

00:07:29.570  -->  00:07:32.160
their meaning, and their use for class attributes
190

190

00:07:32.160  -->  00:07:33.456
and methods as well as restrictions
191

191

00:07:33.456  -->  00:07:35.660
on their use in some cases.
192

192

00:07:35.660  -->  00:07:37.690
The next video, I wanna explore these concepts
193

193

00:07:37.690  -->  00:07:39.650
a little bit more, preparing you to look
194

194

00:07:39.650  -->  00:07:42.060
for unexpected scenarios in code samples
195

195

00:07:42.060  -->  00:07:43.470
on an exam question.
196

196

00:07:43.470  -->  00:07:44.770
See you in the next video.
