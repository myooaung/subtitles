WEBVTT
0
1
00:00:05.538 --> 00:00:06.940
<v Instructor>All right, so moving on with arrays,</v>
1

2
00:00:06.940 --> 00:00:09.960
I want to examine the array search methods next.
2

3
00:00:09.960 --> 00:00:12.320
So we need to create a new class in our arrays project.
3

4
00:00:12.320 --> 00:00:14.623
We want to call this one arrays search.
4

5
00:00:15.750 --> 00:00:17.916
Or probably, array search would be better.
5

6
00:00:17.916 --> 00:00:19.999
(typing)
6

7
00:00:23.980 --> 00:00:25.590
All right, so this code's gonna show examples
7

8
00:00:25.590 --> 00:00:27.460
of the arrays upon research method
8

9
00:00:27.460 --> 00:00:30.210
testing each of the following statements.
9

10
00:00:30.210 --> 00:00:32.780
So the binarySearch Method searches for a matching element
10

11
00:00:32.780 --> 00:00:34.450
and returns an integer indicating
11

12
00:00:34.450 --> 00:00:36.520
the array index where there is a match.
12

13
00:00:36.520 --> 00:00:39.550
If no match is found, the method returns a -1.
13

14
00:00:39.550 --> 00:00:42.190
When using a binarySearch, your array needs to be sorted.
14

15
00:00:42.190 --> 00:00:43.630
And you can perform a binarySearch
15

16
00:00:43.630 --> 00:00:46.160
on a non-sorted array but keep in mind,
16

17
00:00:46.160 --> 00:00:48.650
that doing that, the results cannot be relied on.
17

18
00:00:48.650 --> 00:00:50.610
If your array contains duplicate values
18

19
00:00:50.610 --> 00:00:53.620
there's no guarantee which index of the duplicated
19

20
00:00:53.620 --> 00:00:55.193
elements will be returned.
20

21
00:00:56.380 --> 00:00:57.890
In terms of the code here, we're setting up
21

22
00:00:57.890 --> 00:00:59.890
some array data initially.
22

23
00:00:59.890 --> 00:01:01.490
We're creating some lists again.
23

24
00:01:02.360 --> 00:01:04.500
And we're actually performing the binarySearches.
24

25
00:01:04.500 --> 00:01:06.170
You can see the first case there of the
25

26
00:01:06.170 --> 00:01:08.560
binarySearch on line 31, 32.
26

27
00:01:08.560 --> 00:01:09.980
We're doing a binarySearch on an array
27

28
00:01:09.980 --> 00:01:13.166
looking for jkl, which is in the array.
28

29
00:01:13.166 --> 00:01:15.760
And next on line 35, we're doing a search for aaa,
29

30
00:01:15.760 --> 00:01:17.480
which is not in the array.
30

31
00:01:17.480 --> 00:01:20.030
Moving on down, line 39, we're doing a search for jkl,
31

32
00:01:20.030 --> 00:01:22.730
of which there are two elements to see what happens.
32

33
00:01:22.730 --> 00:01:25.000
And finally, line 43 we're doing a binarySearch
33

34
00:01:25.000 --> 00:01:28.003
on an unsorted array for abc, which is in the array.
34

35
00:01:28.003 --> 00:01:29.803
All right, so let's just run this.
35

36
00:01:32.570 --> 00:01:35.270
And just looking at the test data there again as well.
36

37
00:01:36.330 --> 00:01:38.350
So this code demonstrates that the valid
37

38
00:01:38.350 --> 00:01:41.310
and reproducible results of searching a sorted array
38

39
00:01:41.310 --> 00:01:43.780
with no duplicates, either the index is returned
39

40
00:01:43.780 --> 00:01:46.710
where there is a match, or a -1 is returned
40

41
00:01:46.710 --> 00:01:47.700
when no match is found.
41

42
00:01:47.700 --> 00:01:50.150
And you can see that in the first two lines of output.
42

43
00:01:50.150 --> 00:01:52.180
Now although the third search did return
43

44
00:01:52.180 --> 00:01:54.690
the first instance of jkl, we should rely
44

45
00:01:54.690 --> 00:01:56.790
on the Java documentation which says
45

46
00:01:56.790 --> 00:01:59.570
that this may not be reliable on each call to this method.
46

47
00:01:59.570 --> 00:02:02.320
And on the fourth search, which is the fourth line
47

48
00:02:02.320 --> 00:02:04.280
of output, on an unsorted array,
48

49
00:02:04.280 --> 00:02:08.413
it returned -1, although abc's definitely in the array.
49

50
00:02:09.980 --> 00:02:11.930
So importantly, remember to sort your array
50

51
00:02:11.930 --> 00:02:13.590
before using this method.
51

52
00:02:13.590 --> 00:02:15.290
If you want the first match in an array
52

53
00:02:15.290 --> 00:02:18.170
which might have duplicates, use List.indexOf
53

54
00:02:18.170 --> 00:02:19.600
instead, that method.
54

55
00:02:19.600 --> 00:02:21.750
And we'll talk more about that later.
55

56
00:02:21.750 --> 00:02:24.913
I'm gonna add some code that looks at arrays.mismatch now.
56

57
00:02:26.625 --> 00:02:28.810
(typing)
57

58
00:02:28.810 --> 00:02:30.290
Okay, so there's the code.
58

59
00:02:30.290 --> 00:02:33.570
Now since I've previously talked about an array prefix,
59

60
00:02:33.570 --> 00:02:35.490
I can simply say that mismatch returns
60

61
00:02:35.490 --> 00:02:39.490
the index where the prefix no longer applies.
61

62
00:02:39.490 --> 00:02:41.013
So, if I run this code now.
62

63
00:02:44.320 --> 00:02:46.220
You can see there that the result of mismatch
63

64
00:02:46.220 --> 00:02:49.320
is the index where the elements stop matching
64

65
00:02:49.320 --> 00:02:51.760
the end of the prefix, in other words.
65

66
00:02:51.760 --> 00:02:53.180
Right, so finally now, I want to review
66

67
00:02:53.180 --> 00:02:54.870
some of the list search methods.
67

68
00:02:54.870 --> 00:02:57.124
So I'm gonna paste some code in for that.
68

69
00:02:57.124 --> 00:02:59.830
(typing)
69

70
00:02:59.830 --> 00:03:00.930
Okay, so there's the code.
70

71
00:03:00.930 --> 00:03:02.250
I'll just scroll back up to the top of the code
71

72
00:03:02.250 --> 00:03:06.200
that I've pasted which the first line was line 57.
72

73
00:03:06.200 --> 00:03:08.650
Now in this code, we use contains and containsAll
73

74
00:03:09.581 --> 00:03:11.350
to see if an element or a list of elements
74

75
00:03:11.350 --> 00:03:13.170
is contained in the list.
75

76
00:03:13.170 --> 00:03:15.650
These methods return true or false.
76

77
00:03:15.650 --> 00:03:18.160
The containsALL method does not require
77

78
00:03:18.160 --> 00:03:21.090
the elements to be in the same order to return true.
78

79
00:03:21.090 --> 00:03:22.970
And last index option, should hopefully be familiar
79

80
00:03:22.970 --> 00:03:24.900
because we discussed those when we were talking about
80

81
00:03:24.900 --> 00:03:27.190
the string class previously in the course.
81

82
00:03:27.190 --> 00:03:29.220
So see these methods return the first index
82

83
00:03:29.220 --> 00:03:33.390
or the last index of the element it matches in the array.
83

84
00:03:33.390 --> 00:03:35.810
One thing to note, is that unlike strings,
84

85
00:03:35.810 --> 00:03:38.630
these two methods don't include an overloaded method
85

86
00:03:38.630 --> 00:03:40.200
with an offset.
86

87
00:03:40.200 --> 00:03:41.900
All right, so let's run this code.
87

88
00:03:46.050 --> 00:03:48.340
And we can see the output there,
88

89
00:03:48.340 --> 00:03:50.610
which should be pretty much as you would expect.
89

90
00:03:50.610 --> 00:03:51.940
All right, so let's stop here.
90

91
00:03:51.940 --> 00:03:53.880
So far, we've covered the first two categories
91

92
00:03:53.880 --> 00:03:55.700
of array methods in our tour kit.
92

93
00:03:55.700 --> 00:03:56.970
In the next video, we'll start looking
93

94
00:03:56.970 --> 00:03:58.770
at the data manipulation methods
94

95
00:03:58.770 --> 00:04:01.340
and data transformation methods.
95

96
00:04:01.340 --> 00:04:02.640
See you in the next video.
