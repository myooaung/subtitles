WEBVTT
1
1

00:00:05.030  -->  00:00:07.540
<v ->All right, so we're now in the Out of Ordinary video</v>
2

2

00:00:07.540  -->  00:00:09.640
for access modifiers.
3

3

00:00:09.640  -->  00:00:12.059
We explored the concept of a private constructor
4

4

00:00:12.059  -->  00:00:13.610
in a previous section.
5

5

00:00:13.610  -->  00:00:15.590
Section seven, overloading methods,
6

6

00:00:15.590  -->  00:00:17.240
and showed you how you can use it to prevent
7

7

00:00:17.240  -->  00:00:20.090
any instance of a particular class from being created.
8

8

00:00:20.090  -->  00:00:21.620
That was at the single tone.
9

9

00:00:21.620  -->  00:00:24.253
Let's explore access modifiers and constructors a bit more.
10

10

00:00:24.253  -->  00:00:27.120
So we're back in our encapsulation project,
11

11

00:00:27.120  -->  00:00:28.630
we need to create a new package,
12

12

00:00:28.630  -->  00:00:30.063
and also a new class.
13

13

00:00:30.910  -->  00:00:32.560
So I'm going to first call the package
14

14

00:00:32.560  -->  00:00:37.497
package one, pkgOne and the class then LevelTwoClass.
15

15

00:00:41.663  -->  00:00:43.562
There's the code.
16

16

00:00:43.562  -->  00:00:45.346
So LevelOneClass has a protected
17

17

00:00:45.346  -->  00:00:48.146
and also a package private constructor.
18

18

00:00:48.146  -->  00:00:49.520
You see there's two there,
19

19

00:00:49.520  -->  00:00:52.990
and LevelTwoClass you can see that extends to LevelOneClass.
20

20

00:00:52.990  -->  00:00:54.450
You need also has a protected
21

21

00:00:54.450  -->  00:00:56.930
and packaged access constructors.
22

22

00:00:56.930  -->  00:00:58.610
So far so good.
23

23

00:00:58.610  -->  00:01:00.490
All right next, we want to create another package
24

24

00:01:00.490  -->  00:01:01.880
and also another class.
25

25

00:01:01.880  -->  00:01:03.380
So let's go ahead and do that.
26

26

00:01:05.150  -->  00:01:07.800
For this one we're gonna call it package two, pkgTwo,
27

27

00:01:09.550  -->  00:01:12.413
and the class I am going to call ConstructorAccess.
28

28

00:01:17.810  -->  00:01:19.870
Okay, so there's the code for that.
29

29

00:01:19.870  -->  00:01:21.623
So I can see the LevelThreeClass here extends
30

30

00:01:21.623  -->  00:01:22.650
to LevelTwoClass.
31

31

00:01:22.650  -->  00:01:24.880
We've also got a package private constructor
32

32

00:01:24.880  -->  00:01:26.390
as well as a private constructor,
33

33

00:01:26.390  -->  00:01:28.690
that takes what I've given.
34

34

00:01:28.690  -->  00:01:29.523
And further on and down further
35

35

00:01:29.523  -->  00:01:31.970
is that constructor access class,
36

36

00:01:31.970  -->  00:01:33.250
indeed it's got a main method that
37

37

00:01:33.250  -->  00:01:35.743
instantiates the LevelThreeClass object.
38

38

00:01:36.730  -->  00:01:38.103
So executing this code,
39

39

00:01:39.570  -->  00:01:42.580
we saw that that executes the package level constructor,
40

40

00:01:42.580  -->  00:01:44.400
which is valid since these classes
41

41

00:01:44.400  -->  00:01:45.233
are in the signed package,
42

42

00:01:45.233  -->  00:01:46.090
so once you're down there
43

43

00:01:46.090  -->  00:01:47.990
LevelThreeClass now has a constructor.
44

44

00:01:49.180  -->  00:01:52.040
So the LevelThreeClass instructor with no perimeter,
45

45

00:01:52.040  -->  00:01:54.000
this one has the package-private one.
46

46

00:01:54.000  -->  00:01:56.300
You can see that that change to constructor call
47

47

00:01:56.300  -->  00:01:58.400
to its own private constructor,
48

48

00:01:58.400  -->  00:02:01.223
which has got one argument there.
49

49

00:02:02.060  -->  00:02:04.090
You can see that that two was actually caught
50

50

00:02:04.090  -->  00:02:05.640
down at the bottom of the screen.
51

51

00:02:05.640  -->  00:02:08.600
Now that package LevelThreeClass constructor makes a call
52

52

00:02:08.600  -->  00:02:10.350
to its super constructor,
53

53

00:02:10.350  -->  00:02:13.360
and barring on a more, we're extending LevelTwoClass,
54

54

00:02:15.230  -->  00:02:19.070
so therefore LevelTwoClass is calling the
55

55

00:02:19.070  -->  00:02:21.540
LevelTwoClass constructor with no arguments.
56

56

00:02:21.540  -->  00:02:22.373
It's because they here
57

57

00:02:22.373  -->  00:02:24.300
have the protected access constructor.
58

58

00:02:24.300  -->  00:02:26.390
Now this is valid 'cause LevelTwoClasses with
59

59

00:02:26.390  -->  00:02:28.890
no args structures to clear the protected
60

60

00:02:28.890  -->  00:02:31.350
and the LevelThreeClass extends LevelTwoClass
61

61

00:02:31.350  -->  00:02:32.930
so this is valid.
62

62

00:02:32.930  -->  00:02:35.980
Now the LevelTwoClass with no args constructor,
63

63

00:02:35.980  -->  00:02:37.050
this one here,
64

64

00:02:37.050  -->  00:02:40.590
will cause the LevelOneClass no arguments constructor
65

65

00:02:40.590  -->  00:02:41.800
implicitly.
66

66

00:02:41.800  -->  00:02:43.985
And we can obviously see that any of them with the
67

67

00:02:43.985  -->  00:02:45.320
LevelOneClass with no args constructor.
68

68

00:02:45.320  -->  00:02:47.033
This is okay two, because LevelOneClass
69

69

00:02:47.033  -->  00:02:49.340
with no args constructor,
70

70

00:02:49.340  -->  00:02:51.153
we come back and have a look at that.
71

71

00:02:52.129  -->  00:02:54.052
We can see that's also protected,
72

72

00:02:54.052  -->  00:02:58.320
and the LevelTwoClass extends to LevelOneClass as we knew.
73

73

00:02:58.320  -->  00:03:00.033
So, that's all working correctly.
74

74

00:03:01.260  -->  00:03:02.210
Now at this point,
75

75

00:03:02.210  -->  00:03:04.190
it would be very easy to break the code down,
76

76

00:03:04.190  -->  00:03:06.860
and you may be tested without having the compiler
77

77

00:03:06.860  -->  00:03:09.050
to complain for you when constructors
78

78

00:03:09.050  -->  00:03:10.920
that do not play nicely with each other.
79

79

00:03:10.920  -->  00:03:12.820
Now obviously there working here,
80

80

00:03:12.820  -->  00:03:14.890
but we can easily simulate this
81

81

00:03:14.890  -->  00:03:16.550
by looking at our LevelTwoClass again,
82

82

00:03:16.550  -->  00:03:19.593
and specifically this constructor on line 27.
83

83

00:03:20.733  -->  00:03:23.423
So if we delete the protected access modifier.
84

84

00:03:24.879  -->  00:03:26.300
Now this doesn't make any difference
85

85

00:03:26.300  -->  00:03:28.230
to this particular code,
86

86

00:03:28.230  -->  00:03:30.740
but if we go back to our constructor access,
87

87

00:03:30.740  -->  00:03:32.870
suddenly there's an error.
88

88

00:03:32.870  -->  00:03:34.120
Super.
89

89

00:03:34.120  -->  00:03:36.840
LevelThreeCLass is not public on or in package
90

90

00:03:36.840  -->  00:03:37.740
one dot LevelTwoClass.
91

91

00:03:37.740  -->  00:03:40.360
It can not be accessed through an outside package.
92

92

00:03:40.360  -->  00:03:42.240
In other words, you can no longer use super
93

93

00:03:42.240  -->  00:03:44.760
to call that constructor from this LevelThreeClass
94

94

00:03:44.760  -->  00:03:48.120
either explicitly or by removing the super statement,
95

95

00:03:48.120  -->  00:03:49.480
which calls it implicitly.
96

96

00:03:49.480  -->  00:03:51.030
So obviously I can remove that,
97

97

00:03:52.210  -->  00:03:54.350
we still got an error here.
98

98

00:03:54.350  -->  00:03:55.893
Notify constructor of applicant.
99

99

00:03:55.893  -->  00:03:58.200
They saw there that initially the compiled error
100

100

00:03:58.200  -->  00:03:59.310
was on the super statement,
101

101

00:03:59.310  -->  00:04:00.990
and then when I commented that out,
102

102

00:04:00.990  -->  00:04:03.330
the error is now on the constructor definition
103

103

00:04:03.330  -->  00:04:05.230
if it doesn't exist.
104

104

00:04:05.230  -->  00:04:08.240
Now removing the protected modifier on the LevelTwoClass
105

105

00:04:08.240  -->  00:04:10.460
makes it it a package-private constructor.
106

106

00:04:10.460  -->  00:04:13.250
This constructor is not available to LevelThreeClass
107

107

00:04:13.250  -->  00:04:15.430
even if it extends to LevelTwoClass,
108

108

00:04:15.430  -->  00:04:17.580
because the LevelThreeClass is not defined
109

109

00:04:17.580  -->  00:04:20.700
in the same package as the LevelTwoClass.
110

110

00:04:22.240  -->  00:04:23.480
So let me do that change there
111

111

00:04:23.480  -->  00:04:25.883
and go back and undo this one.
112

112

00:04:26.750  -->  00:04:28.500
We'll see that the area disappears,
113

113

00:04:30.030  -->  00:04:32.352
and we're able to run the code again.
114

114

00:04:32.352  -->  00:04:35.330
Watch out for something similar to that in the exam.
115

115

00:04:35.330  -->  00:04:36.490
You may well be tested at that,
116

116

00:04:36.490  -->  00:04:37.370
and again you may have the
117

117

00:04:37.370  -->  00:04:39.828
compiler there to flag an error.
118

118

00:04:39.828  -->  00:04:42.010
That should actually be ahead of this scenario.
119

119

00:04:42.010  -->  00:04:43.160
All right, so in the last few videos
120

120

00:04:43.160  -->  00:04:45.350
we discussed the importance of access modifiers
121

121

00:04:45.350  -->  00:04:47.800
and the variations permitted for a sub-class,
122

122

00:04:47.800  -->  00:04:50.830
for harding attributes and overriding method.
123

123

00:04:50.830  -->  00:04:51.800
Another quiz coming up,
124

124

00:04:51.800  -->  00:04:52.890
and after that we're going to move
125

125

00:04:52.890  -->  00:04:55.024
on to applying encapsulating videos to a class.
126

126

00:04:55.024  -->  00:04:57.423
See you in the next video.
