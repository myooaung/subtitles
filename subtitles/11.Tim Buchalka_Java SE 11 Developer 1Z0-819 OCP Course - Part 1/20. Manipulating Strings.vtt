WEBVTT
1
1

00:00:05.270  -->  00:00:08.850
Lets talk about manipulating strings.
2

2

00:00:08.850  -->  00:00:11.283
The string object methods are too numerous to review
3

3

00:00:11.283  -->  00:00:13.890
individually and you are probably very familiar
4

4

00:00:13.890  -->  00:00:14.950
with many of them anyway.
5

5

00:00:14.950  -->  00:00:17.900
The thing to remember about the String object is that the
6

6

00:00:17.900  -->  00:00:20.983
index of the first character is always zero,
7

7

00:00:20.983  -->  00:00:23.950
and the index of the last character
8

8

00:00:23.950  -->  00:00:26.989
is the string length minus one.
9

9

00:00:26.989  -->  00:00:30.550
Many string methods use a starting and ending index to copy,
10

10

00:00:30.550  -->  00:00:33.610
replace, or search through the string.
11

11

00:00:33.610  -->  00:00:37.317
The beginning index used in these methods is inclusive,
12

12

00:00:37.317  -->  00:00:40.650
which means the method will use the character at that beginning index,
13

13

00:00:40.650  -->  00:00:42.970
so if you want the first character
14

14

00:00:42.970  -->  00:00:44.953
of your string used as part of the manipulation,
15

15

00:00:44.953  -->  00:00:47.440
your starting index would be zero.
16

16

00:00:47.440  -->  00:00:51.017
The ending index used in these methods is exclusive,
17

17

00:00:51.017  -->  00:00:52.683
which means the character
18

18

00:00:52.683  -->  00:00:55.817
at the ending index will not be included,
19

19

00:00:55.817  -->  00:00:58.717
so if you want to include the last character in your string,
20

20

00:00:58.717  -->  00:01:02.083
your ending index would be string.length().
21

21

00:01:02.083  -->  00:01:04.050
We will talk about the following categories of methods
22

22

00:01:04.050  -->  00:01:06.780
and show a few examples in each category.
23

23

00:01:06.780  -->  00:01:09.710
First in comparison we got equals,
24

24

00:01:09.710  -->  00:01:13.020
equals ignore case, content equals, compare to,
25

25

00:01:13.020  -->  00:01:14.830
is empty and is blank.
26

26

00:01:14.830  -->  00:01:18.490
For text searches contains, equals ignore case,
27

27

00:01:18.490  -->  00:01:20.750
ends with, index of, last index of,
28

28

00:01:20.750  -->  00:01:23.100
matches and starts with.
29

29

00:01:24.060  -->  00:01:27.730
For text manipulation concat, join which was introduced
30

30

00:01:27.730  -->  00:01:31.240
in Java eight, replace, replace all, replace first,
31

31

00:01:31.240  -->  00:01:33.800
split, substring and subsequence.
32

32

00:01:34.670  -->  00:01:37.440
And for text transformation, we've got chars which
33

33

00:01:37.440  -->  00:01:41.190
was introduced in Java nine, code points also Java nine,
34

34

00:01:41.190  -->  00:01:45.130
format, lines introduced in Java 11, repeat
35

35

00:01:45.130  -->  00:01:48.420
also introduced in Java 11, strip, strip leading,
36

36

00:01:48.420  -->  00:01:50.930
strip trailing, to char array, to lower case,
37

37

00:01:50.930  -->  00:01:53.310
to upper case, trim and value of.
38

38

00:01:55.070  -->  00:01:57.320
Let's talk about String comparison methods first
39

39

00:01:57.320  -->  00:01:58.880
a little bit using this chart.
40

40

00:01:58.880  -->  00:02:01.070
So first you have got equals equals.
41

41

00:02:01.070  -->  00:02:02.580
That compares two objects,
42

42

00:02:02.580  -->  00:02:05.420
and returns true when the reference is the same.
43

43

00:02:06.400  -->  00:02:07.780
So I've got an equals method.
44

44

00:02:07.780  -->  00:02:10.360
Now the object on equals is the same as equals equals,
45

45

00:02:10.360  -->  00:02:13.100
but a string equals tests for the string
46

46

00:02:13.100  -->  00:02:15.040
and tests for value.
47

47

00:02:15.040  -->  00:02:17.010
The origination for the equals overrides
48

48

00:02:17.010  -->  00:02:18.940
the object on the equals method.
49

49

00:02:18.940  -->  00:02:21.110
Perimeter type can be any object,
50

50

00:02:21.110  -->  00:02:23.970
however only a string might evaluate to true.
51

51

00:02:23.970  -->  00:02:25.680
In terms of for what it returns,
52

52

00:02:25.680  -->  00:02:28.320
it returns true if references are the same,
53

53

00:02:28.320  -->  00:02:31.360
or if a perimeter object is a string
54

54

00:02:31.360  -->  00:02:33.410
and the value is the same.
55

55

00:02:34.420  -->  00:02:36.170
Equals ignore case tests the string
56

56

00:02:36.170  -->  00:02:38.140
value ignoring case.
57

57

00:02:38.140  -->  00:02:39.530
Perimeter type has to be a string,
58

58

00:02:39.530  -->  00:02:41.080
and it returns true if two strings
59

59

00:02:41.080  -->  00:02:44.240
have the same value, again ignoring the case.
60

60

00:02:44.240  -->  00:02:46.330
Content equals compares the value
61

61

00:02:46.330  -->  00:02:48.540
of string to the value in the perimeter.
62

62

00:02:48.540  -->  00:02:50.780
The perimeter type is a char sequence.
63

63

00:02:50.780  -->  00:02:52.980
It returns true if values in the string
64

64

00:02:52.980  -->  00:02:55.170
and the perimeter are the same.
65

65

00:02:55.170  -->  00:02:57.300
Compare to compares the value of string
66

66

00:02:57.300  -->  00:02:59.070
to the value in the perimeter.
67

67

00:02:59.070  -->  00:03:01.830
It originates from the interface comparable.
68

68

00:03:01.830  -->  00:03:03.900
Perimeter type is string.
69

69

00:03:03.900  -->  00:03:06.870
It returns zero if the values in the string are the same.
70

70

00:03:06.870  -->  00:03:08.720
It returns a negative or positive number
71

71

00:03:08.720  -->  00:03:11.570
if the strings are not equal.
72

72

00:03:11.570  -->  00:03:13.560
And finally we got compare to ignore case,
73

73

00:03:13.560  -->  00:03:15.830
which is basically identical to compare to,
74

74

00:03:15.830  -->  00:03:18.600
but its ignoring the case in each string.
75

75

00:03:19.850  -->  00:03:21.210
All right so let's now go ahead and create
76

76

00:03:21.210  -->  00:03:23.910
a new class in our strings project we been working on.
77

77

00:03:26.320  -->  00:03:28.170
I'll call this one string comparison.
78

78

00:03:32.600  -->  00:03:35.020
All right I've pasted in some code there.
79

79

00:03:35.020  -->  00:03:38.430
In terms of the code I've pasted in for this example,
80

80

00:03:38.430  -->  00:03:42.060
see the task starting on line 12 and moving down,
81

81

00:03:42.060  -->  00:03:43.960
we got some data to test.
82

82

00:03:43.960  -->  00:03:45.910
What I've done when we scroll a little bit further,
83

83

00:03:45.910  -->  00:03:48.500
I've created various methods to test
84

84

00:03:48.500  -->  00:03:51.280
each of the different ways we can compare strings.
85

85

00:03:51.280  -->  00:03:54.820
You can see that we got methods there to test
86

86

00:03:54.820  -->  00:03:57.140
equals ignore case, test content equals,
87

87

00:03:57.140  -->  00:04:02.090
test compare to method, test compare to ignore case method.
88

88

00:04:02.090  -->  00:04:04.380
There's a few others.
89

89

00:04:04.380  -->  00:04:07.690
We're setting up some test data at the top.
90

90

00:04:07.690  -->  00:04:10.850
We are invoking the various tests as you can see down here.
91

91

00:04:10.850  -->  00:04:12.060
Invoking those various methods.
92

92

00:04:12.060  -->  00:04:14.540
It's pretty straight forward what I've done here so far.
93

93

00:04:14.540  -->  00:04:17.060
Now at the moment because of the way I've set
94

94

00:04:17.060  -->  00:04:19.100
up the tests with first string, second string,
95

95

00:04:19.100  -->  00:04:21.400
second object and second sequence.
96

96

00:04:21.400  -->  00:04:23.630
Using null in all those scenarios.
97

97

00:04:23.630  -->  00:04:25.300
We're basically passing these null values
98

98

00:04:25.300  -->  00:04:27.300
to the methods to start with.
99

99

00:04:27.300  -->  00:04:28.950
Lets have a look at the results that we get
100

100

00:04:28.950  -->  00:04:29.780
by doing that.
101

101

00:04:32.230  -->  00:04:33.650
When looking at the results you can see
102

102

00:04:33.650  -->  00:04:36.270
all but one method has thrown an exception.
103

103

00:04:36.270  -->  00:04:38.650
Its only the equals equals operator
104

104

00:04:38.650  -->  00:04:40.800
can have a null on the left side of the equation,
105

105

00:04:40.800  -->  00:04:42.670
if you think about it that makes sense,
106

106

00:04:42.670  -->  00:04:44.450
since all the other test methods are on a string
107

107

00:04:44.450  -->  00:04:46.510
assumed not to be null.
108

108

00:04:46.510  -->  00:04:48.420
We're going to use this code as a starting point
109

109

00:04:48.420  -->  00:04:50.010
for our exercise ahead.
110

110

00:04:50.010  -->  00:04:51.470
So what we actually want to do now,
111

111

00:04:51.470  -->  00:04:54.410
we're going to make some changes to the test data we got.
112

112

00:04:54.410  -->  00:04:57.870
Specifically gonna look at lines 23 through 26,
113

113

00:04:57.870  -->  00:05:00.450
that's the code that we're gonna be changing there.
114

114

00:05:00.450  -->  00:05:03.150
What I'm going to do first is change that to hello,
115

115

00:05:03.150  -->  00:05:04.790
the first string on line 23.
116

116

00:05:04.790  -->  00:05:08.840
To a string literal hello with H upper case.
117

117

00:05:08.840  -->  00:05:11.040
Leave the second string as null for now.
118

118

00:05:11.040  -->  00:05:12.640
We're going to assign second object
119

119

00:05:12.640  -->  00:05:15.180
to be second string tele reference.
120

120

00:05:15.180  -->  00:05:17.330
The second sequence we're also going to set
121

121

00:05:17.330  -->  00:05:18.620
that to second string.
122

122

00:05:21.400  -->  00:05:23.430
You can see in each case we're actually passing
123

123

00:05:23.430  -->  00:05:25.550
one of two we got the first string.
124

124

00:05:25.550  -->  00:05:28.010
We've either got the second string
125

125

00:05:28.010  -->  00:05:29.880
or the second sequence being passed
126

126

00:05:29.880  -->  00:05:33.310
to these various methods depending on the type we want.
127

127

00:05:33.310  -->  00:05:35.160
Lets go ahead and run this again now.
128

128

00:05:37.780  -->  00:05:39.110
This time we got some different results
129

129

00:05:39.110  -->  00:05:41.060
than we had previously.
130

130

00:05:41.060  -->  00:05:42.850
Here now we can see that the compare to
131

131

00:05:42.850  -->  00:05:45.530
and content equals methods do not like
132

132

00:05:45.530  -->  00:05:47.840
null references as their perimeters.
133

133

00:05:47.840  -->  00:05:49.680
So we have a look its the last three methods
134

134

00:05:49.680  -->  00:05:51.970
the last three method calls that we got
135

135

00:05:51.970  -->  00:05:52.990
now pulling exceptions.
136

136

00:05:52.990  -->  00:05:55.150
If we come down and have a look at those methods.
137

137

00:05:55.150  -->  00:05:57.890
The last three methods we got the content equals,
138

138

00:05:57.890  -->  00:06:00.080
compare to, and compare to ignore case.
139

139

00:06:00.080  -->  00:06:03.530
They're the ones that filed with exceptions.
140

140

00:06:03.530  -->  00:06:05.210
The reason for that, they don't like null
141

141

00:06:05.210  -->  00:06:07.390
references in their perimeters.
142

142

00:06:07.390  -->  00:06:09.270
Lets move on to something a bit more interesting
143

143

00:06:09.270  -->  00:06:10.100
to test now.
144

144

00:06:10.100  -->  00:06:12.030
We'll go back to our test data again.
145

145

00:06:13.220  -->  00:06:15.980
We're going to change some values here again.
146

146

00:06:15.980  -->  00:06:19.500
What I'll do is I'm gonna change the second string.
147

147

00:06:19.500  -->  00:06:21.700
We're gonna change that to string hello one.
148

148

00:06:23.120  -->  00:06:25.430
I'm using the string hello one with a capital H,
149

149

00:06:25.430  -->  00:06:28.750
because I'm differentiating the values
150

150

00:06:28.750  -->  00:06:31.780
based on the uppercase H and lowercase h.
151

151

00:06:31.780  -->  00:06:34.270
I'm using string hello one with a capital H at the moment.
152

152

00:06:34.270  -->  00:06:37.610
I won't change anything else, that's the only change.
153

153

00:06:37.610  -->  00:06:38.560
Run the code again.
154

154

00:06:41.470  -->  00:06:44.250
You can see we no longer got any exceptions.
155

155

00:06:44.250  -->  00:06:45.760
The only other thing to note here
156

156

00:06:45.760  -->  00:06:48.470
is that the compare to and compare to ignore case
157

157

00:06:48.470  -->  00:06:51.240
evaluate to zero when they're equal.
158

158

00:06:51.240  -->  00:06:53.750
Lets continue on and make a few other changes.
159

159

00:06:53.750  -->  00:06:55.770
Go back to line 23 again.
160

160

00:06:57.360  -->  00:07:00.070
This time instead of the string literal hello,
161

161

00:07:00.070  -->  00:07:01.670
I'm gonna change it so the first string
162

162

00:07:01.670  -->  00:07:04.250
now is equal to the value of string hello two.
163

163

00:07:05.790  -->  00:07:07.490
You see that's defined on line 17.
164

164

00:07:08.350  -->  00:07:09.720
I'm also gonna change second object
165

165

00:07:09.720  -->  00:07:12.930
to point to the string builder that you find
166

166

00:07:12.930  -->  00:07:14.610
on line 21.
167

167

00:07:14.610  -->  00:07:16.010
That's hello string builder.
168

168

00:07:17.240  -->  00:07:20.090
I'm going to do the same for the second sequence as well.
169

169

00:07:21.390  -->  00:07:22.930
All right I'm going to run the code.
170

170

00:07:25.780  -->  00:07:28.630
You can see here now that "equals equals" is false.
171

171

00:07:28.630  -->  00:07:31.410
That's because string hello two and string hello one
172

172

00:07:31.410  -->  00:07:33.310
no longer reference the same string,
173

173

00:07:33.310  -->  00:07:35.020
or do not reference the same string.
174

174

00:07:35.020  -->  00:07:37.610
The "equals" method is false because it only returns
175

175

00:07:37.610  -->  00:07:40.220
true if the object being compared is a string
176

176

00:07:40.220  -->  00:07:42.610
and the values are the same.
177

177

00:07:42.610  -->  00:07:44.810
Its also interesting to note that "equals ignore case"
178

178

00:07:44.810  -->  00:07:47.060
only accepts a string object that's a perimeter
179

179

00:07:47.060  -->  00:07:49.650
whereas; the equals method may accept an object
180

180

00:07:49.650  -->  00:07:53.540
but returns false if it gets anything but a string.
181

181

00:07:53.540  -->  00:07:55.880
So at this point we've evaluated the comparators
182

182

00:07:55.880  -->  00:07:57.850
with the different references and objects.
183

183

00:07:57.850  -->  00:08:00.640
Lets now just focus on the string values.
184

184

00:08:00.640  -->  00:08:02.060
We're going to go back to our test data
185

185

00:08:02.060  -->  00:08:04.760
again on lines 23 onwards.
186

186

00:08:05.960  -->  00:08:06.810
We're going to be changing the code
187

187

00:08:06.810  -->  00:08:08.650
hello strings different now by the case.
188

188

00:08:08.650  -->  00:08:12.560
At the moment on line 23 we got string hello two.
189

189

00:08:12.560  -->  00:08:16.150
We're gonna come back here and use this reference
190

190

00:08:16.150  -->  00:08:18.700
to string hello one, the one with the lower case h.
191

191

00:08:19.840  -->  00:08:22.420
Leave the second string as it is there now.
192

192

00:08:22.420  -->  00:08:24.140
I'm going to change the other two.
193

193

00:08:24.140  -->  00:08:25.750
I'm going to change second object to equal
194

194

00:08:25.750  -->  00:08:29.820
second string and same for the second sequence.
195

195

00:08:32.010  -->  00:08:34.520
So at this point now we're focusing on strings
196

196

00:08:34.520  -->  00:08:36.400
that are different by their case.
197

197

00:08:36.400  -->  00:08:37.350
If we run this now.
198

198

00:08:41.200  -->  00:08:43.170
So we can see now that we've run this
199

199

00:08:43.170  -->  00:08:45.190
that equals ignore case is true,
200

200

00:08:45.190  -->  00:08:47.940
and that compare to ignore case is zero
201

201

00:08:47.940  -->  00:08:50.170
as we would expect for methods ignoring case.
202

202

00:08:50.170  -->  00:08:52.360
What's more interesting is the compare to method
203

203

00:08:52.360  -->  00:08:54.860
returning the number 32.
204

204

00:08:54.860  -->  00:08:56.200
If your familiar with the index
205

205

00:08:56.200  -->  00:08:58.640
of method on a string this might surprise you.
206

206

00:08:58.640  -->  00:09:00.570
We'll talk more about the compare to method
207

207

00:09:00.570  -->  00:09:02.290
later in the corse,
208

208

00:09:02.290  -->  00:09:04.460
actually in the out of ordinary section video.
209

209

00:09:04.460  -->  00:09:07.020
I do encourage you to play with this class,
210

210

00:09:07.020  -->  00:09:09.370
with as many variations you can think of.
211

211

00:09:09.370  -->  00:09:11.860
That's because the exam may test you on several,
212

212

00:09:11.860  -->  00:09:14.420
as well as string builders versions which we'll
213

213

00:09:14.420  -->  00:09:16.270
be exploring later in the corse.
214

214

00:09:17.930  -->  00:09:20.160
Now before we move on to methods for searching text
215

215

00:09:20.160  -->  00:09:21.320
in the next video,
216

216

00:09:21.320  -->  00:09:23.780
there's two other methods which are comparative
217

217

00:09:23.780  -->  00:09:24.800
in nature.
218

218

00:09:24.800  -->  00:09:26.430
These are is empty and is blank
219

219

00:09:26.430  -->  00:09:28.820
which return booleans.
220

220

00:09:28.820  -->  00:09:30.860
The following slide demonstrates the difference
221

221

00:09:30.860  -->  00:09:32.850
between these two methods.
222

222

00:09:33.820  -->  00:09:36.030
Note that is blank is new to Java 11
223

223

00:09:36.030  -->  00:09:37.800
as opposed to is empty.
224

224

00:09:37.800  -->  00:09:39.800
So if your calling either of these methods
225

225

00:09:39.800  -->  00:09:41.720
with string with a length of zero.
226

226

00:09:43.130  -->  00:09:45.540
Is empty and is blank both evaluate to true.
227

227

00:09:45.540  -->  00:09:48.030
Now if the string has only whitespace
228

228

00:09:48.030  -->  00:09:49.980
characters as defined by character is whitespace,
229

229

00:09:49.980  -->  00:09:52.820
note that is empty evaluates to false,
230

230

00:09:52.820  -->  00:09:55.400
but is blank on the other hand evaluates to true.
231

231

00:09:56.460  -->  00:09:57.660
All right so lets end the video here
232

232

00:09:57.660  -->  00:09:59.270
and in the next one we'll start looking
233

233

00:09:59.270  -->  00:10:01.910
at the strings text search methods.
234

234

00:10:01.910  -->  00:10:03.210
See you in the next video.
