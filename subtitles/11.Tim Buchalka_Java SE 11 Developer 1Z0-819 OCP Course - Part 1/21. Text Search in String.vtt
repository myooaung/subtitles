WEBVTT
1
1

00:00:05.408  -->  00:00:06.241
<v Tim>All right.</v>
2

2

00:00:06.241  -->  00:00:09.370
Let's now move on to the string's text search methods.
3

3

00:00:09.370  -->  00:00:12.310
We're aiming to look at a few that could lead to confusion.
4

4

00:00:12.310  -->  00:00:15.310
These are the lastIndexOf matches and regionMatches methods.
5

5

00:00:16.370  -->  00:00:17.960
Just remember that for the other methods,
6

6

00:00:17.960  -->  00:00:20.880
the start offset parameter is inclusive
7

7

00:00:20.880  -->  00:00:23.600
and the end offset is exclusive.
8

8

00:00:23.600  -->  00:00:24.433
All right.
9

9

00:00:24.433  -->  00:00:25.950
Let's create a new class in our Strings project.
10

10

00:00:25.950  -->  00:00:27.733
We'll call this one TextSearch.
11

11

00:00:35.180  -->  00:00:36.580
Okay.
12

12

00:00:36.580  -->  00:00:37.860
Start with a simple example there.
13

13

00:00:37.860  -->  00:00:39.060
Let's actually run this.
14

14

00:00:43.090  -->  00:00:44.690
I think we can agree there's no surprises
15

15

00:00:44.690  -->  00:00:46.130
in this code so far.
16

16

00:00:46.130  -->  00:00:47.550
The code found the beginning index
17

17

00:00:47.550  -->  00:00:50.344
of the last word, index 20.
18

18

00:00:50.344  -->  00:00:51.177
All right.
19

19

00:00:51.177  -->  00:00:52.573
Let's now add an offset.
20

20

00:00:53.460  -->  00:00:54.910
I'll paste in some code here.
21

21

00:00:58.340  -->  00:01:02.020
Now we're seeing the fromIndex position 19 using the offset.
22

22

00:01:02.020  -->  00:01:02.983
Let's run the code.
23

23

00:01:05.280  -->  00:01:06.113
All right.
24

24

00:01:06.113  -->  00:01:07.890
Again, it's still no wise surprises.
25

25

00:01:07.890  -->  00:01:10.410
The search did not start at the end of the string
26

26

00:01:10.410  -->  00:01:13.860
but start at an index 19 and looked forward, not backwards,
27

27

00:01:13.860  -->  00:01:16.730
and now its last word is found at index 12.
28

28

00:01:16.730  -->  00:01:18.630
We'll add one more code segment now again
29

29

00:01:18.630  -->  00:01:20.030
after the last line of code.
30

30

00:01:23.022  -->  00:01:23.855
All right.
31

31

00:01:23.855  -->  00:01:25.030
Let's run this and see what it does.
32

32

00:01:28.070  -->  00:01:30.530
Now the result here is a little more interesting.
33

33

00:01:30.530  -->  00:01:33.380
It found the word at index 12 again
34

34

00:01:33.380  -->  00:01:34.790
although our starting index
35

35

00:01:34.790  -->  00:01:37.330
was in the middle of that same word.
36

36

00:01:37.330  -->  00:01:38.540
Is this what you expected?
37

37

00:01:38.540  -->  00:01:41.490
Or did you expected to truncate the search string
38

38

00:01:41.490  -->  00:01:45.630
at index 15 and then look forward, looking backwards
39

39

00:01:45.630  -->  00:01:47.370
resulting in index four?
40

40

00:01:47.370  -->  00:01:49.530
Again, a little bit interesting there.
41

41

00:01:49.530  -->  00:01:50.363
All right.
42

42

00:01:50.363  -->  00:01:51.920
That's lastIndexOf.
43

43

00:01:51.920  -->  00:01:53.963
Let's now discuss the matches method.
44

44

00:01:54.910  -->  00:01:56.610
I'm gonna paste in some more code.
45

45

00:01:58.660  -->  00:02:00.290
Now I'm getting some warnings there
46

46

00:02:00.290  -->  00:02:04.653
because I haven't actually imported the necessary classes
47

47

00:02:04.653  -->  00:02:07.640
and I've got the optimise inputs turned off.
48

48

00:02:07.640  -->  00:02:09.950
So, I'm gonna go ahead and do that.
49

49

00:02:09.950  -->  00:02:11.800
I'm just gonna add these two imports.
50

50

00:02:14.700  -->  00:02:15.670
You can see that it's added
51

51

00:02:15.670  -->  00:02:20.670
the java.util.regex.Matcher and java.util.regex.Pattern.
52

52

00:02:23.970  -->  00:02:24.920
Let's run the code.
53

53

00:02:28.370  -->  00:02:31.440
So, the output from this segment is shown as you can see.
54

54

00:02:31.440  -->  00:02:33.900
You can see that you can't use a simple substring
55

55

00:02:33.900  -->  00:02:36.760
of a string to try and match with.
56

56

00:02:36.760  -->  00:02:39.750
Matches return true if the whole string you're passing
57

57

00:02:39.750  -->  00:02:42.570
as a parameter matches the string.
58

58

00:02:42.570  -->  00:02:44.540
You have to use a regular expression pattern
59

59

00:02:44.540  -->  00:02:46.150
generally to use this method
60

60

00:02:46.150  -->  00:02:48.490
as a way to test for a substring.
61

61

00:02:48.490  -->  00:02:50.980
Now we're not going to go into regular expressions here.
62

62

00:02:50.980  -->  00:02:54.230
Just know that mississippi.matches, parenthesis miss
63

63

00:02:54.230  -->  00:02:57.890
is not the same as mississippi.indexOf,
64

64

00:02:57.890  -->  00:03:01.563
parenthesis miss in double quotes greater than minus one.
65

65

00:03:03.839  -->  00:03:04.672
All right.
66

66

00:03:04.672  -->  00:03:05.505
That's matches.
67

67

00:03:05.505  -->  00:03:08.060
Finally now let's look at regionMatches.
68

68

00:03:08.060  -->  00:03:11.590
Now another way to see if miss is in mississippi
69

69

00:03:11.590  -->  00:03:14.170
would be to use one of the regionMatches methods
70

70

00:03:14.170  -->  00:03:15.450
on a string.
71

71

00:03:15.450  -->  00:03:16.493
Let's add some code.
72

72

00:03:20.860  -->  00:03:21.773
Let's run this.
73

73

00:03:27.410  -->  00:03:30.310
You can see that that evaluates to true.
74

74

00:03:30.310  -->  00:03:31.960
Let's now test ignoring the case
75

75

00:03:31.960  -->  00:03:34.080
by adding a boolean parameter
76

76

00:03:34.080  -->  00:03:36.663
as the first parameter and see what happens.
77

77

00:03:37.710  -->  00:03:39.260
Again, I'll paste in some code.
78

78

00:03:41.460  -->  00:03:44.620
So, you can see we've got that first boolean parameter.
79

79

00:03:44.620  -->  00:03:45.743
Run the code.
80

80

00:03:48.720  -->  00:03:50.960
Again, this code evaluated to true.
81

81

00:03:50.960  -->  00:03:52.573
That's because case was ignored.
82

82

00:03:53.820  -->  00:03:55.080
So far, so good.
83

83

00:03:55.080  -->  00:03:57.100
Let's now change the offset.
84

84

00:03:57.100  -->  00:03:58.560
I'm gonna add some more code in.
85

85

00:03:58.560  -->  00:03:59.684
All right.
86

86

00:03:59.684  -->  00:04:00.517
So, we run this code.
87

87

00:04:04.300  -->  00:04:06.753
You can see we've got false, false, true.
88

88

00:04:08.040  -->  00:04:10.090
regionMatches doesn't evaluate
89

89

00:04:10.090  -->  00:04:13.250
whether a substring is in the full string exactly
90

90

00:04:13.250  -->  00:04:15.080
but evaluates whether the region
91

91

00:04:15.080  -->  00:04:19.430
specified by the index offsets and length match a region
92

92

00:04:19.430  -->  00:04:22.023
in the source string with the same length.
93

93

00:04:22.885  -->  00:04:23.718
All right.
94

94

00:04:23.718  -->  00:04:24.679
I think we've covered
95

95

00:04:24.679  -->  00:04:26.620
the less familiar text search methods in string.
96

96

00:04:26.620  -->  00:04:27.770
So, we'll end the video here.
97

97

00:04:27.770  -->  00:04:29.530
In the next one, we'll talk about other types
98

98

00:04:29.530  -->  00:04:31.710
of manipulations of strings.
99

99

00:04:31.710  -->  00:04:33.010
See you in the next video.
