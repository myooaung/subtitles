WEBVTT
1
1

00:00:05.200  -->  00:00:06.460
<v ->So let's talk about creating</v>
2

2

00:00:06.460  -->  00:00:08.360
and using subclasses and superclasses.
3

3

00:00:09.520  -->  00:00:12.010
Every class you create is a subclass of another,
4

4

00:00:12.010  -->  00:00:14.410
even if you don't declare that.
5

5

00:00:14.410  -->  00:00:17.530
Every class in Java is a subclass of java.lang.object
6

6

00:00:17.530  -->  00:00:20.100
implicitly, and many of the examples that I've used
7

7

00:00:20.100  -->  00:00:22.840
in the course have used subclasses and superclasses,
8

8

00:00:22.840  -->  00:00:25.440
but we're gonna review it formally and briefly here.
9

9

00:00:27.800  -->  00:00:30.800
To explicitly declare class inheritance,
10

10

00:00:30.800  -->  00:00:33.391
you use the extends keyword in the class decoration.
11

11

00:00:33.391  -->  00:00:35.441
An example as you can see below,
12

12

00:00:35.441  -->  00:00:39.210
You already know that a class can only extend one class.
13

13

00:00:39.210  -->  00:00:41.960
So a class SubClass extends SuperClass.
14

14

00:00:41.960  -->  00:00:43.870
SubClass in this example, is said to be a
15

15

00:00:43.870  -->  00:00:46.038
SubClass of the class SuperClass.
16

16

00:00:46.038  -->  00:00:50.200
It can also be said to be a child class or a derived class.
17

17

00:00:50.200  -->  00:00:51.720
SuperClass is said to be a superclass,
18

18

00:00:51.720  -->  00:00:55.253
or may also be called a base class or a parent class.
19

19

00:00:57.510  -->  00:00:59.951
A subclass is said to be of type SuperClass
20

20

00:00:59.951  -->  00:01:02.980
and an instance of the subclass can be used anywhere
21

21

00:01:02.980  -->  00:01:05.245
an instance of the superclass can be used.
22

22

00:01:05.245  -->  00:01:06.801
In other words, the subclass passes
23

23

00:01:06.801  -->  00:01:10.760
the 'IS A' test of object oriented programming.
24

24

00:01:10.760  -->  00:01:13.440
a subclass IS A SuperClass.
25

25

00:01:13.440  -->  00:01:14.273
For example,
26

26

00:01:14.273  -->  00:01:15.890
if your superclass is Dog,
27

27

00:01:15.890  -->  00:01:17.830
and your subclass is Pug,
28

28

00:01:17.830  -->  00:01:20.470
then it can be said that Pug is a Dog.
29

29

00:01:20.470  -->  00:01:22.530
Any application where a dog is expected
30

30

00:01:22.530  -->  00:01:24.420
a pug should work as well.
31

31

00:01:24.420  -->  00:01:27.410
However, the opposite is not necessarily true.
32

32

00:01:27.410  -->  00:01:29.373
A dog may not always be a pug.
33

33

00:01:31.390  -->  00:01:34.260
So, a class consists of two types of elements.
34

34

00:01:34.260  -->  00:01:36.170
These are firstly members,
35

35

00:01:36.170  -->  00:01:38.260
and members include any fields any methods
36

36

00:01:38.260  -->  00:01:40.000
and any nested types,
37

37

00:01:40.000  -->  00:01:42.700
that is classes enums and interfaces.
38

38

00:01:42.700  -->  00:01:46.410
Members of a class can be inherited by sub classes.
39

39

00:01:46.410  -->  00:01:49.510
A class consists also of elements that are not members,
40

40

00:01:49.510  -->  00:01:51.730
these are constructors initializer blocks
41

41

00:01:51.730  -->  00:01:53.770
and static initializer blocks.
42

42

00:01:53.770  -->  00:01:56.368
These are not inherited by subclasses.
43

43

00:01:56.368  -->  00:01:58.369
Although constructors are not inherited
44

44

00:01:58.369  -->  00:02:01.507
there is an implied call to the superclass's constructor,
45

45

00:02:01.507  -->  00:02:03.523
if an explicit call is not made.
46

46

00:02:03.523  -->  00:02:06.100
And I have discussed this in quite a few samples
47

47

00:02:06.100  -->  00:02:08.570
in code in previous videos in the course.
48

48

00:02:08.570  -->  00:02:10.354
Also, there's no way to call initializer blocks
49

49

00:02:10.354  -->  00:02:13.329
or static initializer blocks on the superclass,
50

50

00:02:13.329  -->  00:02:16.413
explicitly from the subclass.
51

51

00:02:19.310  -->  00:02:22.430
The rules for inheriting class members are as follows.
52

52

00:02:22.430  -->  00:02:24.550
Firstly, a subclass does not inherit
53

53

00:02:24.550  -->  00:02:26.830
the private members of its parent.
54

54

00:02:26.830  -->  00:02:28.670
A sub class inherits all the public
55

55

00:02:28.670  -->  00:02:30.380
and protected members of its parent,
56

56

00:02:30.380  -->  00:02:33.620
no matter what package the subclass is in.
57

57

00:02:33.620  -->  00:02:36.830
If the subclass is in the same package as its parent,
58

58

00:02:36.830  -->  00:02:40.343
it also inherits the package private members of the parent.
59

59

00:02:43.000  -->  00:02:46.200
You can use the inherited members as is or replace them,
60

60

00:02:46.200  -->  00:02:49.142
hide them or supplement them as follows.
61

61

00:02:49.142  -->  00:02:51.853
Inherited fields can be used directly as is,
62

62

00:02:51.853  -->  00:02:53.630
like any other fields.
63

63

00:02:53.630  -->  00:02:55.670
They can be hidden by the subclass.
64

64

00:02:55.670  -->  00:02:57.820
The subclass declares a field with the same name
65

65

00:02:57.820  -->  00:02:59.650
as the one in the superclass
66

66

00:02:59.650  -->  00:03:02.260
and in general hiding not recommended
67

67

00:03:02.260  -->  00:03:04.540
An inherit fields can also be supplemented.
68

68

00:03:04.540  -->  00:03:06.231
So the subclass can declare new fields
69

69

00:03:06.231  -->  00:03:08.393
that are not in the superclass.
70

70

00:03:10.745  -->  00:03:13.533
The inherited methods can be used directly as is,
71

71

00:03:13.533  -->  00:03:15.280
like any other methods,
72

72

00:03:15.280  -->  00:03:17.310
inherited methods can also be overridden.
73

73

00:03:17.310  -->  00:03:19.325
So the subclass can declare a new instance method
74

74

00:03:19.325  -->  00:03:22.060
that has the same signature and return type
75

75

00:03:22.060  -->  00:03:23.332
as the one in the superclass.
76

76

00:03:23.332  -->  00:03:25.864
inherited methods can be hidden by the subclass.
77

77

00:03:25.864  -->  00:03:29.120
So the subclass can declare a new static method
78

78

00:03:29.120  -->  00:03:32.570
that has the same signature as the one in the superclass.
79

79

00:03:32.570  -->  00:03:33.403
And finally,
80

80

00:03:33.403  -->  00:03:35.390
inherited methods can be supplemented.
81

81

00:03:35.390  -->  00:03:37.510
So the subclass can declare new methods
82

82

00:03:37.510  -->  00:03:40.173
in the subclass that are not in the superclass.
83

83

00:03:42.490  -->  00:03:43.427
So it's important to note
84

84

00:03:43.427  -->  00:03:45.598
that although we say that a subclass does not
85

85

00:03:45.598  -->  00:03:48.166
inherit private fields of the superclass,
86

86

00:03:48.166  -->  00:03:51.467
the object which is instantiated from the sub class type
87

87

00:03:51.467  -->  00:03:54.516
is instantiated with the private field variables
88

88

00:03:54.516  -->  00:03:56.323
of the superclass.
89

89

00:03:57.371  -->  00:03:58.515
Right, so let's end the video here.
90

90

00:03:58.515  -->  00:03:59.800
In the next one,
91

91

00:03:59.800  -->  00:04:01.140
We'll get started with going through
92

92

00:04:01.140  -->  00:04:02.581
some of these concepts in code.
93

93

00:04:02.581  -->  00:04:04.373
See you in the next video.
