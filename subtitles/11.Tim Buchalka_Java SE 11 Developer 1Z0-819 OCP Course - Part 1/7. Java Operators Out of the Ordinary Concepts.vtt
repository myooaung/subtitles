WEBVTT
0
1
00:00:05.310 --> 00:00:09.420
So let's talk about some of the out of the ordinary things with Java operators.
1

2
00:00:09.420 --> 00:00:13.390
So I mentioned the unary numeric promotion in the last few videos.
2

3
00:00:13.530 --> 00:00:19.410
If the top of operand is smaller than an int then it's promoted to an int before applying the operator.
3

4
00:00:19.410 --> 00:00:21.700
With the exception of the increment/decrement operators.
4

5
00:00:22.530 --> 00:00:23.870
So let's actually test this out.
5

6
00:00:23.900 --> 00:00:28.080
We're going to create a new class in our private project we'll call it operator oddities
6

7
00:00:39.850 --> 00:00:45.460
so this code has got a main method which uses a local variable type inference variable to accept the
7

8
00:00:45.460 --> 00:00:52.740
result of a unary plus operation and a method which evaluates the type of the variable passed to it
8

9
00:00:52.740 --> 00:00:55.300
to determine which type was returned from the operation.
9

10
00:00:55.300 --> 00:00:56.230
You can see that method there.
10

11
00:00:56.880 --> 00:00:57.790
So let's actually run that
11

12
00:01:01.270 --> 00:01:07.750
You can see in this case byte 2 which was passed to the method comes back as an int.
12

13
00:01:07.930 --> 00:01:14.000
Again I mentioned that previously, unary operators promote values to an int before executing on them.
13

14
00:01:14.020 --> 00:01:19.300
This is hard to remember when looking at code on the certification exam and even more difficult numeric
14

15
00:01:19.300 --> 00:01:22.000
promotion to catch on an exam question, I think.
15

16
00:01:22.000 --> 00:01:24.490
It's this code here that I'm about to post in
16

17
00:01:28.810 --> 00:01:29.670
So I'm looking at this code.
17

18
00:01:29.670 --> 00:01:31.790
I think you'd agree it looks perfectly reasonable.
18

19
00:01:31.950 --> 00:01:37.830
But if the exam question was assigning the value of the unary minus expression to a byte variable
19

20
00:01:38.220 --> 00:01:44.710
it would actually result in a compiler error. Let me actually run this. It should come back there as an int in here
20

21
00:01:44.710 --> 00:01:51.960
as well. So let's try a simple math example. I've got some code now which adds a byte value to a short value
21

22
00:01:54.820 --> 00:02:02.920
on the code, you can see there a short editor byte doesn't get promoted to a short. It, in fact, gets promoted
22

23
00:02:02.920 --> 00:02:04.820
to an int.
23

24
00:02:04.840 --> 00:02:06.550
Another example dealing with a long
24

25
00:02:09.910 --> 00:02:14.150
Now think about that what would you expect the answer for this one to come back at? In other words what will
25

26
00:02:14.150 --> 00:02:15.390
be the type.
26

27
00:02:15.460 --> 00:02:21.020
Let's run it and see. Result2 is a double. Did that one get you?
27

28
00:02:21.020 --> 00:02:24.240
Perhaps you forgot that the one point zero literally is a double and not a float.
28

29
00:02:26.010 --> 00:02:31.470
So it can be very confusing when your expression is using the same variable multiple times and the post
29

30
00:02:31.470 --> 00:02:35.200
fix or prefix increment/decrement operators are being used on them.
30

31
00:02:35.730 --> 00:02:39.750
So look at this interesting chart. Do any of these results surprise you?
31

32
00:02:39.840 --> 00:02:41.810
I'd suggest don't try to memorize it.
32

33
00:02:41.820 --> 00:02:45.900
What we're gonna do is walk through some sample code that test the veracity of each of these statements.
33

34
00:02:46.250 --> 00:02:52.470
So you can see that we've got the expression minus minus number minus number minus minus the result is always
34

35
00:02:52.470 --> 00:02:53.520
zero.
35

36
00:02:53.520 --> 00:03:02.310
Next one number minus minus, minus, minus minus number result is always two. So we've got number minus minus in parentheses
36

37
00:03:02.400 --> 00:03:06.110
is equal to parentheses number plus equal one.
37

38
00:03:06.140 --> 00:03:08.020
Well that actually evaluates to true.
38

39
00:03:08.160 --> 00:03:13.420
And the fourth one int number equals 10 number equals number minus minus.
39

40
00:03:13.470 --> 00:03:17.850
So the final value in number at this point is 10. Alright
40

41
00:03:17.860 --> 00:03:23.160
so let's create another class and go through some of this code. We'll call this one More Oddities
41

42
00:03:29.070 --> 00:03:35.420
And you can see that this first test that we're doing here is a result equals minus minus number minus number minus
42

43
00:03:35.420 --> 00:03:37.480
minus. The comment on line 13.
43

44
00:03:37.730 --> 00:03:39.820
The result always results to zero.
44

45
00:03:39.890 --> 00:03:42.360
I've been testing a couple of instances as you could see they were for loops.
45

46
00:03:42.380 --> 00:03:50.290
So let's run this and we can see in that case despite us having a loop there, the result is always zero.
46

47
00:03:51.210 --> 00:03:53.190
So why is it zero?
47

48
00:03:53.260 --> 00:03:58.220
Well exploring the first iteration, number equals i, i equals 10.
48

49
00:03:58.290 --> 00:03:59.660
number equals 10.
49

50
00:03:59.710 --> 00:04:03.720
result in equals minus minus number minus number minus minus.
50

51
00:04:03.810 --> 00:04:10.140
So we evaluate values left to right the result in equals number minus number minus minus.
51

52
00:04:10.170 --> 00:04:16.470
So in other words number gets assigned the value of nine from the prefix decrement operator result in equals
52

53
00:04:16.470 --> 00:04:21.810
nine take parentheses nine. Number gets assigned the value of eight from the postfix decrement operator
53

54
00:04:22.020 --> 00:04:26.280
but after this math is done result equals zero number equals eight
54

55
00:04:26.280 --> 00:04:27.180
So a bit confusing there
55

56
00:04:29.430 --> 00:04:31.050
So I'm looking back at that table that I showed you
56

57
00:04:31.050 --> 00:04:37.320
Let's look at the next expression in that table and that's int result equals number minus minus, minus, 
57

58
00:04:37.350 --> 00:04:43.660
Minus minus number. A few minuses there. So I'll paste this code in outside of the for loop.
58

59
00:04:44.700 --> 00:04:47.920
Okay there's the code. Second test.
59

60
00:04:47.920 --> 00:04:57.950
Let's run this. You can see that second test the result is 2. So let's go through the same process as before
60

61
00:04:58.250 --> 00:05:01.130
but this one I think is a little harder to grasp.
61

62
00:05:01.130 --> 00:05:07.250
We have to remember that subsequent references to the same variable in a single expression will result
62

63
00:05:07.250 --> 00:05:12.590
in the post decrement or increment occurring on those variables before they are further evaluated in 
63

64
00:05:12.590 --> 00:05:16.580
expressions. The number equals i, i equals 10.
64

65
00:05:16.580 --> 00:05:18.680
number equals 10 is what we're starting with.
65

66
00:05:18.730 --> 00:05:23.570
then we've got result equals number minus minus, minus, minus minus number
66

67
00:05:23.930 --> 00:05:29.960
So we're evaluating left to right the result equals 10 in parentheses but number is now nine minus minus
67

68
00:05:29.960 --> 00:05:30.910
minus number.
68

69
00:05:30.930 --> 00:05:35.690
So the result equals 10 minus and minus minus nine in parentheses.
69

70
00:05:35.690 --> 00:05:40.430
result equals ten take eight, result equals 2. A bit confusing.
70

71
00:05:40.430 --> 00:05:45.310
I think one more example will help train you to evaluate left to right populating the next reference of the
71

72
00:05:45.380 --> 00:05:48.570
variable accordingly. So I'm pasting a third test here.
72

73
00:05:50.150 --> 00:05:57.390
Okay, so there's the third test. So let's run it first and see the results and we'll go through them. And you can see the result
73

74
00:05:57.460 --> 00:06:01.840
equals minus seventy one and minus 341. Alright so
74

75
00:06:01.850 --> 00:06:06.140
let's step through the expression left to right for the first iteration evaluating left to right as
75

76
00:06:06.140 --> 00:06:13.010
before and adding multiplicity precedents after the values are known. So result equals number minus minus
76

77
00:06:13.220 --> 00:06:20.360
minus number plus plus multiplied by minus minus number. It takes a bit to get your head around. Result equals
77

78
00:06:20.400 --> 00:06:28.190
10 the number is now 9 after the postfix decrement minus number plus plus multiplied by minus minus
78

79
00:06:28.190 --> 00:06:28.820
number.
79

80
00:06:28.820 --> 00:06:35.060
So the result is now ten take nine number is now ten after the postfix increment multiplied by minus
80

81
00:06:35.060 --> 00:06:41.360
minus number. Result equals ten minus nine multiplied by minus minus ten in parentheses. Result equals
81

82
00:06:41.360 --> 00:06:47.660
ten minus nine times nine. Result equals ten minus eighty-one and therefore the result equals minus
82

83
00:06:47.660 --> 00:06:49.870
seventy one which we got.
83

84
00:06:49.910 --> 00:06:54.810
So hopefully that helped. Finally, let's explore the last two rows from our slide again. This one.
84

85
00:06:55.030 --> 00:06:58.040
So back to the code. We'll paste some more code.
85

86
00:06:58.220 --> 00:07:01.220
Okay so there's a code for our fourth test. Let's run this
86

87
00:07:04.300 --> 00:07:04.770
all right.
87

88
00:07:04.770 --> 00:07:12.300
So the fourth test there isequal equal true and number equals 10. So evaluating left to right again isequal
88

89
00:07:12.360 --> 00:07:19.440
equals in parentheses number minus minus isequal to parentheses number plus equal 1. Evaluating left to
89

90
00:07:19.440 --> 00:07:25.470
right isequal equals 10 now in parentheses but number is nine now isequal to number plus equal one
90

91
00:07:25.470 --> 00:07:31.720
in parentheses so isequal equals ten is equal to nine in parentheses plus equal 1.
91

92
00:07:31.800 --> 00:07:39.940
So finally isequal equals 10 equals equals 10 hence the value true. Alright so looking at our chart again
92

93
00:07:40.110 --> 00:07:46.660
let's look at the final test. Copy and paste the code for that. Okay there's the code for the final test.
93

94
00:07:48.240 --> 00:07:57.190
Run the code. We get number equals ten so the variable number is assigned to value ten and the postfix
94

95
00:07:57.190 --> 00:08:04.140
decrement never occurs because the assignment interrupted the decrement. So you may find some of these
95

96
00:08:04.140 --> 00:08:09.750
confusing chains of increments and decrements of expressions on the exam or in loops. Slow down and write
96

97
00:08:09.750 --> 00:08:13.090
it down is the best advice I can give you. Take it step by step as you saw here.
97

98
00:08:13.800 --> 00:08:17.610
All right so let's finish the video here and in the next one we'll give you a short quiz and then we'll
98

99
00:08:17.610 --> 00:08:21.580
start talking in the next section of the course about decision constructs.
99

100
00:08:21.580 --> 00:08:24.810
So, see you in the next quiz or next section of the course.
