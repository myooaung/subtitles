WEBVTT
1
1

00:00:05.300  -->  00:00:07.210
<v Tim>Well let's discuss the other operators</v>
2

2

00:00:07.210  -->  00:00:09.690
that we haven't discussed so far.
3

3

00:00:09.690  -->  00:00:12.500
With the exception of the conditional operator
4

4

00:00:12.500  -->  00:00:15.100
that is also called the ternary operator,
5

5

00:00:15.100  -->  00:00:16.690
the rest of these are binary.
6

6

00:00:16.690  -->  00:00:18.540
And I've grouped them by the type of operation
7

7

00:00:18.540  -->  00:00:20.800
they actually perform here in this table,
8

8

00:00:20.800  -->  00:00:23.053
and I also listed by their precedence level.
9

9

00:00:24.260  -->  00:00:25.680
So looking at this list,
10

10

00:00:25.680  -->  00:00:27.610
multiplicative operators have a higher precedence
11

11

00:00:27.610  -->  00:00:29.920
than the additive operators, and so on.
12

12

00:00:29.920  -->  00:00:31.750
Note that all the unary operators
13

13

00:00:31.750  -->  00:00:34.590
have a higher precedence than these binary ones.
14

14

00:00:34.590  -->  00:00:36.430
So looking at this list, then, and incidentally,
15

15

00:00:36.430  -->  00:00:38.280
this slide and all slides for this course
16

16

00:00:38.280  -->  00:00:39.900
are available for download.
17

17

00:00:39.900  -->  00:00:42.690
So check out the very last video, the bonus video.
18

18

00:00:42.690  -->  00:00:44.040
Watch that, 'cause it gives you details
19

19

00:00:44.040  -->  00:00:46.090
of how to download these slides.
20

20

00:00:46.090  -->  00:00:48.986
Can be a good thing to like grab those slides to save
21

21

00:00:48.986  -->  00:00:52.060
if you're having to pause videos and try and combat
22

22

00:00:52.060  -->  00:00:53.440
resolution issues and so forth.
23

23

00:00:53.440  -->  00:00:55.090
So grab those if you need to.
24

24

00:00:55.090  -->  00:00:57.800
But multiplicative operators are the multiplication,
25

25

00:00:57.800  -->  00:01:00.200
division, and modulus operators.
26

26

00:01:00.200  -->  00:01:02.717
The precedence is equal among them, group left to right.
27

27

00:01:02.717  -->  00:01:05.970
You've got additive operators, addition and subtraction.
28

28

00:01:05.970  -->  00:01:09.400
Precedence also equal among them, group left to right.
29

29

00:01:09.400  -->  00:01:11.670
We've got shift operators, left shift,
30

30

00:01:11.670  -->  00:01:14.730
the signed right shift, and unsigned right shift.
31

31

00:01:14.730  -->  00:01:16.380
The left-hand operand of a shift operator
32

32

00:01:16.380  -->  00:01:17.910
is the value to be shifted.
33

33

00:01:17.910  -->  00:01:21.270
The right-hand operand specifies the shift distance.
34

34

00:01:21.270  -->  00:01:24.120
Precedence also equal among them, group by left to right.
35

35

00:01:25.910  -->  00:01:27.810
We've got relational operators.
36

36

00:01:27.810  -->  00:01:29.971
Less than, less than or equal, greater than,
37

37

00:01:29.971  -->  00:01:31.700
greater than or equals, and InstanceOf.
38

38

00:01:31.700  -->  00:01:34.660
Precedence is also equal among them, group left to right.
39

39

00:01:34.660  -->  00:01:36.250
We've got equality operators,
40

40

00:01:36.250  -->  00:01:37.850
the equals and not equals there.
41

41

00:01:38.740  -->  00:01:39.940
Bitwise and logical operators.
42

42

00:01:39.940  -->  00:01:42.730
That's the AND, Exclusive OR, or OR.
43

43

00:01:42.730  -->  00:01:44.240
And these operators have different precedence
44

44

00:01:44.240  -->  00:01:46.180
with the AND having the highest precedence
45

45

00:01:46.180  -->  00:01:48.870
and OR the lowest.
46

46

00:01:48.870  -->  00:01:50.670
Bitwise operators are not on the exam,
47

47

00:01:50.670  -->  00:01:52.333
but logical operators are.
48

48

00:01:53.510  -->  00:01:55.180
Conditional AND operator.
49

49

00:01:55.180  -->  00:01:57.760
The conditional AND operator is very much
50

50

00:01:57.760  -->  00:02:00.210
like the regular logical operator,
51

51

00:02:00.210  -->  00:02:02.320
but it evaluates its right-hand operand
52

52

00:02:02.320  -->  00:02:05.050
only if the value of its left-hand operand is true.
53

53

00:02:05.050  -->  00:02:08.100
And same deal there for the conditional OR operator.
54

54

00:02:08.100  -->  00:02:11.160
Similar to the logical OR operator
55

55

00:02:11.160  -->  00:02:12.800
but evaluates its right-hand operand
56

56

00:02:12.800  -->  00:02:14.940
only if the value of its left-hand operand
57

57

00:02:14.940  -->  00:02:16.720
is false, in this case.
58

58

00:02:16.720  -->  00:02:18.030
We've got the conditional operator,
59

59

00:02:18.030  -->  00:02:19.940
as I mentioned, which isn't binary.
60

60

00:02:19.940  -->  00:02:21.880
And it's got three operands.
61

61

00:02:21.880  -->  00:02:24.610
Then just our regular assignment operators, as well.
62

62

00:02:24.610  -->  00:02:26.180
So they group right to left.
63

63

00:02:26.180  -->  00:02:29.240
So that's a equals b equals c means that a equals
64

64

00:02:29.240  -->  00:02:33.130
parentheses b equals c, which assigns the value of c to b
65

65

00:02:33.130  -->  00:02:35.390
and then assigns the value of b to a.
66

66

00:02:35.390  -->  00:02:36.540
And then we've got lambda operators,
67

67

00:02:36.540  -->  00:02:39.663
which you won't get asked about in this exam.
68

68

00:02:41.160  -->  00:02:43.510
Well so I need to make a quick few points
69

69

00:02:43.510  -->  00:02:45.920
about numeric promotion.
70

70

00:02:45.920  -->  00:02:49.060
For a unary operator that's not the pre or post
71

71

00:02:49.060  -->  00:02:50.570
decrement or increment operator,
72

72

00:02:50.570  -->  00:02:53.380
if the type of the operand is smaller than an int,
73

73

00:02:53.380  -->  00:02:56.700
the operand will automatically be promoted to an int.
74

74

00:02:56.700  -->  00:02:59.370
For a binary operator, both operands are promoted
75

75

00:02:59.370  -->  00:03:01.730
to an int if they are smaller than an int,
76

76

00:03:01.730  -->  00:03:04.160
but if any of the operands are larger than an int,
77

77

00:03:04.160  -->  00:03:06.540
then it's promoted to the larger type.
78

78

00:03:06.540  -->  00:03:08.870
But note that this is not true for the compound
79

79

00:03:08.870  -->  00:03:10.580
assignment operators.
80

80

00:03:10.580  -->  00:03:12.830
So what this means is that any operations
81

81

00:03:12.830  -->  00:03:15.490
on numeric values will never result in a value
82

82

00:03:15.490  -->  00:03:17.720
that's smaller than an int.
83

83

00:03:17.720  -->  00:03:19.047
All right, so let's finish the video here.
84

84

00:03:19.047  -->  00:03:22.090
And in the next one, we'll start getting into some code
85

85

00:03:22.090  -->  00:03:24.360
and reviewing some of these binary operators.
86

86

00:03:24.360  -->  00:03:25.660
See you in the next video.
