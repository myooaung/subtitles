WEBVTT
1
1

00:00:05.051  -->  00:00:06.460
All right, so let's turn our attention now
2

2

00:00:06.460  -->  00:00:09.740
back to list.copyof and list.of methods
3

3

00:00:09.740  -->  00:00:10.760
in this video.
4

4

00:00:10.760  -->  00:00:12.760
So we want to create a class in our Array's Project
5

5

00:00:12.760  -->  00:00:14.937
and call it "Array's and Lists".
6

6

00:00:24.980  -->  00:00:26.530
Now keep in mind list.copyof
7

7

00:00:26.530  -->  00:00:28.970
and list.of, both of these methods return
8

8

00:00:28.970  -->  00:00:32.240
immutable list objects and could easily be confused
9

9

00:00:32.240  -->  00:00:33.970
on an exam question.
10

10

00:00:33.970  -->  00:00:36.340
Now looking at this code, I think you'd probably agree
11

11

00:00:36.340  -->  00:00:37.800
that it looks innocent enough.
12

12

00:00:37.800  -->  00:00:41.090
I've created two lists which has the same data, correct?
13

13

00:00:41.090  -->  00:00:42.810
Well actually no, this isn't correct.
14

14

00:00:42.810  -->  00:00:45.030
Can you spot the problem in this code?
15

15

00:00:45.030  -->  00:00:47.493
So let's run it first and then we'll look at the output.
16

16

00:00:51.870  -->  00:00:55.150
So if you look closely at the first two lines of output,
17

17

00:00:55.150  -->  00:00:58.930
there is a difference between first list and second list.
18

18

00:00:58.930  -->  00:01:01.340
Second list is a list and it's immutable,
19

19

00:01:01.340  -->  00:01:04.470
like First list, but it's not a list of string objects.
20

20

00:01:04.470  -->  00:01:07.610
We've inadvertently created a list of lists.
21

21

00:01:07.610  -->  00:01:09.860
This is more obvious when we print out the class name
22

22

00:01:09.860  -->  00:01:10.990
of the first element
23

23

00:01:10.990  -->  00:01:12.633
of each list.
24

24

00:01:12.633  -->  00:01:14.133
And you can see that in the output.
25

25

00:01:15.430  -->  00:01:17.580
So the method list.of can take an array of elements
26

26

00:01:17.580  -->  00:01:19.240
and create a list out of it
27

27

00:01:19.240  -->  00:01:22.320
or I can take a variable argument list of objects.
28

28

00:01:22.320  -->  00:01:25.080
Because we didn't pass an array to it in the code above
29

29

00:01:25.080  -->  00:01:26.950
specifically on Line 20
30

30

00:01:26.950  -->  00:01:29.580
it assumed it a variable argument list of objects
31

31

00:01:29.580  -->  00:01:31.730
and created an array of one element
32

32

00:01:31.730  -->  00:01:33.560
the first and only element being the list
33

33

00:01:33.560  -->  00:01:35.570
we passed as the argument.
34

34

00:01:35.570  -->  00:01:38.440
This could be very hard to spot on an exam question
35

35

00:01:38.440  -->  00:01:40.970
whose subject appears to be something else.
36

36

00:01:40.970  -->  00:01:42.030
Pretty tricky.
37

37

00:01:42.030  -->  00:01:45.252
Alright, let's take another look at sublists.
38

38

00:01:45.252  -->  00:01:46.810
Alright, so I'll paste some code in
39

39

00:01:50.050  -->  00:01:52.190
and I'll need to add that to our import
40

40

00:01:52.190  -->  00:01:54.140
so do that manually if you're prompted.
41

41

00:01:55.770  -->  00:01:57.790
And you can see java.util.Collections
42

42

00:01:57.790  -->  00:01:58.690
is being imported.
43

43

00:02:00.100  -->  00:02:02.800
Now it's important to note that list.sublist
44

44

00:02:02.800  -->  00:02:05.010
and we're calling sublists on Line 33,
45

45

00:02:05.010  -->  00:02:06.960
well that's got very similar features to the
46

46

00:02:06.960  -->  00:02:10.340
arrays.asList method. Such that the return list
47

47

00:02:10.340  -->  00:02:12.780
is backed by the original list.
48

48

00:02:12.780  -->  00:02:15.430
So non-structural changes to the return list
49

49

00:02:15.430  -->  00:02:18.110
are reflected in the original list.
50

50

00:02:18.110  -->  00:02:19.690
So in this example we're actually using
51

51

00:02:19.690  -->  00:02:20.574
both as list and subList,
52

52

00:02:20.574  -->  00:02:24.590
to take the first five elements out of the array
53

53

00:02:24.590  -->  00:02:27.820
and sorting only those five elements in reverse order.
54

54

00:02:27.820  -->  00:02:29.410
And moving on down the code,
55

55

00:02:29.410  -->  00:02:31.190
with imprinting the first list again
56

56

00:02:31.190  -->  00:02:33.850
the immutable list, which was the result of copyof
57

57

00:02:33.850  -->  00:02:34.930
in the previous code segment.
58

58

00:02:34.930  -->  00:02:36.630
It basically just shows that it hasn't changed
59

59

00:02:36.630  -->  00:02:37.593
so let's run this.
60

60

00:02:41.520  -->  00:02:42.353
And there's the output right there
61

61

00:02:42.353  -->  00:02:44.040
in the bottom of the screen there.
62

62

00:02:45.458  -->  00:02:46.291
Let's move that up a little bit.
63

63

00:02:46.291  -->  00:02:47.550
So what would happen here
64

64

00:02:47.550  -->  00:02:51.230
if we replaced this line? This is Line 33,
65

65

00:02:51.230  -->  00:02:53.583
it's some different code, so we're going to do that now.
66

66

00:02:55.750  -->  00:02:57.740
So what's gonna happen in that scenario?
67

67

00:02:57.740  -->  00:02:59.720
So first you can see that the code compiles
68

68

00:02:59.720  -->  00:03:01.330
we haven't any errors showing.
69

69

00:03:01.330  -->  00:03:05.810
But if I run the code, the code actually crashes.
70

70

00:03:05.810  -->  00:03:06.690
We get a run-time error.
71

71

00:03:06.690  -->  00:03:09.640
FirstList is immutable, so when you attempt
72

72

00:03:09.640  -->  00:03:12.210
to sort the sub-list range you selected now
73

73

00:03:12.210  -->  00:03:13.970
you're actually trying to sort the elements
74

74

00:03:13.970  -->  00:03:16.160
on firstList, which is not permitted,
75

75

00:03:16.160  -->  00:03:18.530
because of course firstList is immutable.
76

76

00:03:18.530  -->  00:03:20.030
So I'm gonna undo that change.
77

77

00:03:21.370  -->  00:03:22.630
Alright, so next we're gonna revisit
78

78

00:03:22.630  -->  00:03:25.250
the list.toarray method in more detail
79

79

00:03:25.250  -->  00:03:26.600
then we've done previously.
80

80

00:03:31.230  -->  00:03:33.270
Okay, there's the code, I've just pasted it.
81

81

00:03:33.270  -->  00:03:35.130
And observe here that we're making two calls
82

82

00:03:35.130  -->  00:03:37.525
to firstList.toarray.
83

83

00:03:37.525  -->  00:03:39.200
We've got a call there on Line 53
84

84

00:03:40.090  -->  00:03:42.440
and also another reference on Line 60.
85

85

00:03:43.483  -->  00:03:45.020
And we're passing a string array's whose size
86

86

00:03:45.020  -->  00:03:47.480
is the same as the number of elements in the list.
87

87

00:03:47.480  -->  00:03:49.800
So note then that the case of Line 53
88

88

00:03:49.800  -->  00:03:52.850
we're not assigning the result to a variable,
89

89

00:03:52.850  -->  00:03:55.210
but we are doing it for the second one on Line 60.
90

90

00:03:55.210  -->  00:03:56.410
So if you run this code,
91

91

00:04:00.390  -->  00:04:02.602
we can see that the both the aArray
92

92

00:04:02.602  -->  00:04:05.150
and bArray Array's, have the same set
93

93

00:04:05.150  -->  00:04:07.100
of elements as does the Array returned
94

94

00:04:07.100  -->  00:04:09.090
from the second call of the method.
95

95

00:04:09.090  -->  00:04:11.820
The two array method, in the second instance
96

96

00:04:11.820  -->  00:04:14.413
returned the same reference as the bArray Array.
97

97

00:04:15.531  -->  00:04:16.930
And we can see it if we test the equality
98

98

00:04:16.930  -->  00:04:18.880
of the Array's, the references are the same
99

99

00:04:18.880  -->  00:04:21.530
and you can see it in the output pane down in bottom.
100

100

00:04:22.650  -->  00:04:25.150
So let's close down the run window.
101

101

00:04:25.150  -->  00:04:27.040
Now, let's go back up to the code,
102

102

00:04:27.040  -->  00:04:29.400
specifically the code now on Line 47.
103

103

00:04:29.400  -->  00:04:30.640
At the moment you can see it's using
104

104

00:04:30.640  -->  00:04:33.750
inter-array link equals firstLists.size.
105

105

00:04:33.750  -->  00:04:35.380
What happens if I change this,
106

106

00:04:35.380  -->  00:04:37.700
to instead of firstLists.size?
107

107

00:04:37.700  -->  00:04:41.670
To make it a fixed literal value 5.
108

108

00:04:41.670  -->  00:04:42.620
Let's run this code
109

109

00:04:45.753  -->  00:04:47.890
and look again at the output we've got from this.
110

110

00:04:47.890  -->  00:04:49.710
You can see that when the length of the array
111

111

00:04:49.710  -->  00:04:52.110
passed and the parameter is less than the number
112

112

00:04:52.110  -->  00:04:53.620
of elements in the list.
113

113

00:04:53.620  -->  00:04:55.640
The array that was passed in as a parameter
114

114

00:04:55.640  -->  00:04:57.420
is not populated.
115

115

00:04:57.420  -->  00:04:59.900
Instead if you call the method with an assignment
116

116

00:04:59.900  -->  00:05:02.860
the returned array is a representation of the full list.
117

117

00:05:02.860  -->  00:05:04.600
And you can see that the next array
118

118

00:05:04.600  -->  00:05:06.610
equals bArray is now false.
119

119

00:05:06.610  -->  00:05:08.713
So we've changed the 5 to a 10 there now,
120

120

00:05:11.420  -->  00:05:12.253
run
121

121

00:05:14.640  -->  00:05:16.110
the elements in the array which exceed
122

122

00:05:16.110  -->  00:05:18.250
the number of list elements are set to
123

123

00:05:18.250  -->  00:05:19.830
their default values here.
124

124

00:05:19.830  -->  00:05:21.390
It's also interesting to note that the array
125

125

00:05:21.390  -->  00:05:23.940
returned from the second call to two-array
126

126

00:05:23.940  -->  00:05:25.480
again, equals the array
127

127

00:05:25.480  -->  00:05:27.433
which was the parameter to the method.
128

128

00:05:28.850  -->  00:05:30.850
Alright, so just revert those changes back
129

129

00:05:30.850  -->  00:05:31.750
to what they were any way.
130

130

00:05:31.750  -->  00:05:33.550
In case you're downloading the code.
131

131

00:05:35.150  -->  00:05:37.450
So let's look now at one more segment of code.
132

132

00:05:41.860  -->  00:05:42.860
So there's the code.
133

133

00:05:43.875  -->  00:05:45.260
And you can see in the comment on Line 71
134

134

00:05:45.260  -->  00:05:47.010
if you always want an array that represents
135

135

00:05:47.010  -->  00:05:49.020
the elements exactly in the list,
136

136

00:05:49.020  -->  00:05:51.380
you can pass zero length array.
137

137

00:05:51.380  -->  00:05:53.180
And you can see that we're actually doing that
138

138

00:05:53.180  -->  00:05:54.013
on Line 74.
139

139

00:05:55.392  -->  00:05:57.890
And then we're pretty at the value of Arrays.toString
140

140

00:05:57.890  -->  00:05:59.600
And another example there, you can call toArray
141

141

00:05:59.600  -->  00:06:02.680
with no parameter, it returns an Array of object
142

142

00:06:02.680  -->  00:06:04.747
and doing that on Line 80.
143

143

00:06:04.747  -->  00:06:05.593
So run this now,
144

144

00:06:08.687  -->  00:06:11.370
and you can see the output on the screen below.
145

145

00:06:11.370  -->  00:06:12.450
So let's make a bit of a change,
146

146

00:06:12.450  -->  00:06:15.700
let's see what happens if you try to print this last array
147

147

00:06:15.700  -->  00:06:18.840
using arrays.toString. Can we cast an objectArray
148

148

00:06:18.840  -->  00:06:19.703
to a stringArray?
149

149

00:06:19.703  -->  00:06:21.223
Well let's try doing that.
150

150

00:06:25.320  -->  00:06:26.840
So you can see that the code is valid
151

151

00:06:26.840  -->  00:06:28.180
and if we try to run this
152

152

00:06:29.830  -->  00:06:32.200
we actually get a run-time error there.
153

153

00:06:32.200  -->  00:06:33.470
And the error specifically is that you can not
154

154

00:06:33.470  -->  00:06:36.673
cast an object effectively to a string there.
155

155

00:06:38.440  -->  00:06:39.620
So let's finish the video here
156

156

00:06:39.620  -->  00:06:41.510
and in the next one I'll just want to review
157

157

00:06:41.510  -->  00:06:44.540
there's several methods for creating a copy of array.
158

158

00:06:44.540  -->  00:06:45.840
See you in the next video.
