WEBVTT
1
1

00:00:05.462  -->  00:00:06.295
<v Tim Buchalka>All right, so let's look at some of</v>
2

2

00:00:06.295  -->  00:00:09.240
the out of the ordinary things with Java arrays.
3

3

00:00:09.240  -->  00:00:10.420
We have reviewed a lot of ways
4

4

00:00:10.420  -->  00:00:12.620
to manipulate arrays and data in arrays
5

5

00:00:12.620  -->  00:00:14.510
in videos in this section of the course.
6

6

00:00:14.510  -->  00:00:16.650
In this video, I want to cover a variety
7

7

00:00:16.650  -->  00:00:19.683
of subjects on the array and its related objects.
8

8

00:00:21.740  -->  00:00:24.920
First, arrays are fussy about their datatypes.
9

9

00:00:24.920  -->  00:00:27.390
Although we can rely on Java to autobox to
10

10

00:00:27.390  -->  00:00:30.430
and unbox from wrappers for us in many instances,
11

11

00:00:30.430  -->  00:00:32.420
this is not true for arrays.
12

12

00:00:32.420  -->  00:00:34.770
So, let's look at some examples.
13

13

00:00:34.770  -->  00:00:37.410
So, I'm going to create a new class called "ArrayExtras"
14

14

00:00:37.410  -->  00:00:39.241
in our arrays project.
15

15

00:00:39.241  -->  00:00:41.507
(mouse clicking)
16

16

00:00:41.507  -->  00:00:43.330
(keyboard clicking)
17

17

00:00:43.330  -->  00:00:44.872
ArrayExtras.
18

18

00:00:44.872  -->  00:00:47.872
(keyboard clicking)
19

19

00:00:49.620  -->  00:00:51.400
Now this code simply goes over the few things
20

20

00:00:51.400  -->  00:00:53.140
that we have looked at previously,
21

21

00:00:53.140  -->  00:00:55.260
an int giving widen to a long
22

22

00:00:55.260  -->  00:00:57.970
and an int being autoboxed to an Integer wrapper,
23

23

00:00:57.970  -->  00:00:59.950
all of which Java handles for you.
24

24

00:00:59.950  -->  00:01:00.920
And I've also added some code
25

25

00:01:00.920  -->  00:01:02.590
to demonstrate using these features
26

26

00:01:02.590  -->  00:01:06.003
in array initialization and setting elements in an array.
27

27

00:01:07.870  -->  00:01:09.224
All right, so let's run the code.
28

28

00:01:09.224  -->  00:01:12.085
(mouse clicking)
29

29

00:01:12.085  -->  00:01:13.500
All right, so in terms of the results,
30

30

00:01:13.500  -->  00:01:14.810
you can see that initially,
31

31

00:01:14.810  -->  00:01:17.700
we've got two int variables, a and b there.
32

32

00:01:17.700  -->  00:01:19.240
We can assign an int variable to a long,
33

33

00:01:19.240  -->  00:01:21.370
which you're doing on line 16 and outputting it.
34

34

00:01:21.370  -->  00:01:24.370
And further, we can do that in terms of arrays.
35

35

00:01:24.370  -->  00:01:26.870
We can create a long array with some int elements,
36

36

00:01:26.870  -->  00:01:29.183
which we're doing in the array initialization.
37

37

00:01:30.120  -->  00:01:31.320
And in the long array,
38

38

00:01:31.320  -->  00:01:33.570
we can assign an int directly to an array element.
39

39

00:01:33.570  -->  00:01:35.150
I've done that in the case of a and b.
40

40

00:01:35.150  -->  00:01:36.890
Probably technically, that should've been one
41

41

00:01:36.890  -->  00:01:38.400
because we've got two elements there,
42

42

00:01:38.400  -->  00:01:40.840
but either way that will actually work
43

43

00:01:40.840  -->  00:01:41.960
and we know that we can do this.
44

44

00:01:41.960  -->  00:01:43.730
Java autobox's Integers for us,
45

45

00:01:43.730  -->  00:01:46.312
so we've got an Integer wrapper object there, aInteger.
46

46

00:01:46.312  -->  00:01:49.680
The a is being autoboxed from an int to an Integer
47

47

00:01:49.680  -->  00:01:51.270
and we're doing the same to bInteger.
48

48

00:01:51.270  -->  00:01:52.570
Then we're just printing it out.
49

49

00:01:52.570  -->  00:01:55.150
Then of course, I've got an Integer wrapper array,
50

50

00:01:55.150  -->  00:01:57.300
which has been initialised on line 36
51

51

00:01:57.300  -->  00:01:59.430
with ints zero, one, two, three, four
52

52

00:01:59.430  -->  00:02:00.710
and we're just printing out the value there
53

53

00:02:00.710  -->  00:02:01.893
using Arrays.toString.
54

54

00:02:03.162  -->  00:02:05.570
In the following, our code you can mix and match
55

55

00:02:05.570  -->  00:02:07.460
Integer and int here as you can see.
56

56

00:02:07.460  -->  00:02:09.440
So I've got a new Integer array there
57

57

00:02:09.440  -->  00:02:11.430
of two elements IntegerArray[0].
58

58

00:02:11.430  -->  00:02:13.190
We are using aInteger, which of course,
59

59

00:02:13.190  -->  00:02:16.170
we have defined previously to be Integer object.
60

60

00:02:16.170  -->  00:02:18.260
There's aInteger on line 32.
61

61

00:02:18.260  -->  00:02:20.040
But equally, we can for the second element,
62

62

00:02:20.040  -->  00:02:21.090
we're just using b.
63

63

00:02:21.090  -->  00:02:22.570
B, of course, was an int.
64

64

00:02:22.570  -->  00:02:24.460
And you can see automatically
65

65

00:02:24.460  -->  00:02:26.280
that Java is autoboxing it there
66

66

00:02:26.280  -->  00:02:27.960
because we're printing out the values
67

67

00:02:27.960  -->  00:02:30.510
and because we're using an Integer wrapper array here,
68

68

00:02:30.510  -->  00:02:32.403
Java's doing the autoboxing for us.
69

69

00:02:33.556  -->  00:02:34.860
All right, so so far so good.
70

70

00:02:34.860  -->  00:02:37.513
So, moving on, I want to add some code now.
71

71

00:02:37.513  -->  00:02:39.433
(keyboard clicking)
72

72

00:02:39.433  -->  00:02:40.266
And you can see that
73

73

00:02:40.266  -->  00:02:42.700
neither of these two statements compile.
74

74

00:02:42.700  -->  00:02:44.730
If you have a look, hover over it.
75

75

00:02:44.730  -->  00:02:45.860
Obviously, it's a type there.
76

76

00:02:45.860  -->  00:02:47.507
Looking for a long array and found it.
77

77

00:02:47.507  -->  00:02:49.160
Int array and that's the same.
78

78

00:02:49.160  -->  00:02:50.850
And then the second example,
79

79

00:02:50.850  -->  00:02:52.380
which are looking for an Integer array
80

80

00:02:52.380  -->  00:02:54.963
and found an int array.
81

81

00:02:54.963  -->  00:02:56.470
(mouse clicking)
82

82

00:02:56.470  -->  00:02:58.220
So, now autoboxing happens
83

83

00:02:58.220  -->  00:03:00.570
on the entire int array this scenario.
84

84

00:03:00.570  -->  00:03:02.520
Comment that out, so it still compiles.
85

85

00:03:03.410  -->  00:03:05.094
All right, let's add some more code.
86

86

00:03:05.094  -->  00:03:07.970
(keyboard clicking)
87

87

00:03:07.970  -->  00:03:09.883
All right, so what if you've got errors here?
88

88

00:03:10.940  -->  00:03:12.340
Well basically, the problem is that
89

89

00:03:12.340  -->  00:03:16.260
the java.util.Arrays static methods that compare arrays,
90

90

00:03:16.260  -->  00:03:18.660
will not accept two arrays of different types
91

91

00:03:18.660  -->  00:03:21.470
even if they're types that are normally widened
92

92

00:03:21.470  -->  00:03:23.810
or autoboxed on an individual level.
93

93

00:03:23.810  -->  00:03:25.486
I'll keep that in mind.
94

94

00:03:25.486  -->  00:03:26.319
(keyboard clicking)
95

95

00:03:26.319  -->  00:03:29.527
I'll comment that out and I'm gonna add some more code.
96

96

00:03:29.527  -->  00:03:31.480
(keyboard clicking)
97

97

00:03:31.480  -->  00:03:33.810
Now, this code is perfectly acceptable
98

98

00:03:33.810  -->  00:03:36.180
unlike the previous example, which didn't compile.
99

99

00:03:36.180  -->  00:03:39.170
Now, the reason is because an Integer is a number.
100

100

00:03:39.170  -->  00:03:40.680
In other words, it extends a number class
101

101

00:03:40.680  -->  00:03:43.017
and we've got another number array here on line 57.
102

102

00:03:43.017  -->  00:03:46.240
So, in this case up here on the lines 51 through 53,
103

103

00:03:46.240  -->  00:03:48.110
we've tried to pass an int array.
104

104

00:03:48.110  -->  00:03:49.460
That's where we're getting an error,
105

105

00:03:49.460  -->  00:03:51.340
but again here, myNumberArray has been defined
106

106

00:03:51.340  -->  00:03:53.150
as a number and the integerArray,
107

107

00:03:53.150  -->  00:03:54.730
which was of type Integer.
108

108

00:03:54.730  -->  00:03:55.720
An Integer is a number.
109

109

00:03:55.720  -->  00:03:58.230
In other words, it extends the number class.
110

110

00:03:58.230  -->  00:04:00.280
Okay, I'll run this code just to confirm.
111

111

00:04:01.540  -->  00:04:03.770
And there's the app put down at the bottom.
112

112

00:04:03.770  -->  00:04:06.327
Let's try another line of output here.
113

113

00:04:06.327  -->  00:04:07.760
(keyboard clicking)
114

114

00:04:07.760  -->  00:04:09.290
So, why doesn't this compile?
115

115

00:04:09.290  -->  00:04:11.990
This is using the compare method of the array's class.
116

116

00:04:13.773  -->  00:04:15.060
Well, the answer to this is that
117

117

00:04:15.060  -->  00:04:17.480
when comparing different typed arrays,
118

118

00:04:17.480  -->  00:04:19.880
they need to implement the Comparable interface
119

119

00:04:19.880  -->  00:04:22.200
and be cast to a Comparable array
120

120

00:04:22.200  -->  00:04:24.653
and the compareTo method must compare
121

121

00:04:24.653  -->  00:04:26.913
a super class shared by both.
122

122

00:04:28.110  -->  00:04:29.510
So specifically, the area here
123

123

00:04:29.510  -->  00:04:33.440
is that java.lang.Number doesn't implement comparable.
124

124

00:04:33.440  -->  00:04:34.654
So, I'll comment that out.
125

125

00:04:34.654  -->  00:04:36.100
(keyboard clicking)
126

126

00:04:36.100  -->  00:04:37.690
All right, so let's end the video here.
127

127

00:04:37.690  -->  00:04:39.460
We've still got a lot more to look at.
128

128

00:04:39.460  -->  00:04:40.293
We'll come back in the next video
129

129

00:04:40.293  -->  00:04:43.300
and turn our attention to the list.copyOf
130

130

00:04:43.300  -->  00:04:44.810
and list.of methods.
131

131

00:04:44.810  -->  00:04:46.110
See you in the next video.
