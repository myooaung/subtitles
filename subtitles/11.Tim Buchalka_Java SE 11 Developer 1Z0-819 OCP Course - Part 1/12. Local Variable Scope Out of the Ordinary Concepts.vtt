WEBVTT
1
1

00:00:04.168  -->  00:00:05.500
<v Instructor>All right, let's look at</v>
2

2

00:00:05.500  -->  00:00:07.610
some out of the ordinary concepts
3

3

00:00:07.610  -->  00:00:09.393
for Local Variable Scope.
4

4

00:00:10.280  -->  00:00:13.840
You can define a nested or inner class within a method,
5

5

00:00:13.840  -->  00:00:16.700
which seems to break the local variable rule
6

6

00:00:16.700  -->  00:00:19.480
we've talked about in this section of the course.
7

7

00:00:19.480  -->  00:00:21.660
The code that I'm about to paste in compiles
8

8

00:00:21.660  -->  00:00:23.650
and executes without problems.
9

9

00:00:23.650  -->  00:00:25.610
The reason for that is because an inner class
10

10

00:00:25.610  -->  00:00:28.510
has an implied qualifier reference
11

11

00:00:28.510  -->  00:00:32.720
to the outer class object and its attributes and methods.
12

12

00:00:32.720  -->  00:00:34.660
So we're gonna create a new class now
13

13

00:00:34.660  -->  00:00:36.963
in our scope project called NestedScope.
14

14

00:00:44.310  -->  00:00:46.373
All right, we're gonna paste in this code.
15

15

00:00:50.690  -->  00:00:52.350
All right, and you can see that I've created
16

16

00:00:52.350  -->  00:00:55.200
a new inner class there locallyDefinedClass
17

17

00:00:55.200  -->  00:00:59.410
in our main method within our nested scope class.
18

18

00:00:59.410  -->  00:01:01.440
Now again this code seems to break the rules
19

19

00:01:01.440  -->  00:01:03.480
for scoping, but if you can remember
20

20

00:01:03.480  -->  00:01:07.420
that a class defined locally has an implied qualifier
21

21

00:01:07.420  -->  00:01:10.950
applied to any attributes and methods in the outer class
22

22

00:01:10.950  -->  00:01:13.661
then you can keep track of your variable.
23

23

00:01:13.661  -->  00:01:15.261
So if we actually run this code,
24

24

00:01:17.290  -->  00:01:18.590
you can see that it works.
25

25

00:01:20.640  -->  00:01:22.940
Right so let's change our second for loop.
26

26

00:01:22.940  -->  00:01:24.010
So this is this one down here
27

27

00:01:24.010  -->  00:01:26.010
starting on line 27.
28

28

00:01:26.010  -->  00:01:28.580
Now what I'm gonna do is remove the int type
29

29

00:01:28.580  -->  00:01:30.230
proceeding i = 5,
30

30

00:01:30.230  -->  00:01:33.060
so that we're then not declaring a new variable i
31

31

00:01:33.060  -->  00:01:35.500
but rather we're attempting to set the existing
32

32

00:01:35.500  -->  00:01:37.420
i variable to five,
33

33

00:01:37.420  -->  00:01:41.120
and scrolling up we can see we've defined i
34

34

00:01:41.120  -->  00:01:43.000
on line 11 there.
35

35

00:01:43.000  -->  00:01:43.930
So let's do that.
36

36

00:01:43.930  -->  00:01:45.980
On line 27, I'm going to remove the type,
37

37

00:01:48.303  -->  00:01:49.440
and suddenly we've got errors
38

38

00:01:49.440  -->  00:01:51.230
and if we hover over that and have a look,
39

39

00:01:51.230  -->  00:01:53.450
if variable i is accessed from within the inner class,
40

40

00:01:53.450  -->  00:01:55.710
needs to be final or effectively final.
41

41

00:01:55.710  -->  00:01:58.213
Right, so let's undo that change.
42

42

00:01:59.560  -->  00:02:01.520
Let's try changing i in a different way.
43

43

00:02:01.520  -->  00:02:03.520
We'll come down here to the line
44

44

00:02:03.520  -->  00:02:05.400
after our new instantiation
45

45

00:02:05.400  -->  00:02:07.810
of locallyDefinedClass on line 41.
46

46

00:02:07.810  -->  00:02:09.463
I'm gonna put an i++ there.
47

47

00:02:11.490  -->  00:02:12.323
You can see something.
48

48

00:02:12.323  -->  00:02:13.270
We've got other errors here.
49

49

00:02:13.270  -->  00:02:15.470
We've got errors showing up here,
50

50

00:02:15.470  -->  00:02:18.000
and it's the same error as last time.
51

51

00:02:18.000  -->  00:02:19.760
Rather cryptic error message,
52

52

00:02:19.760  -->  00:02:21.680
variable i is accessed from within inner class,
53

53

00:02:21.680  -->  00:02:24.323
needs to be final or effectively final.
54

54

00:02:25.548  -->  00:02:26.440
so I'll just undo that,
55

55

00:02:26.440  -->  00:02:28.213
and we'll actually remove that line.
56

56

00:02:29.480  -->  00:02:32.820
So, again, if you can remember that a class
57

57

00:02:32.820  -->  00:02:36.000
defined locally has an implied qualifier
58

58

00:02:36.000  -->  00:02:37.730
applied to any attributes and methods
59

59

00:02:37.730  -->  00:02:39.980
in the outer class, you can basically keep track
60

60

00:02:39.980  -->  00:02:41.480
of your variables that way.
61

61

00:02:41.480  -->  00:02:44.120
So an inner class has an implied qualifier reference
62

62

00:02:44.120  -->  00:02:47.983
to the outer class object, and its attributes and methods.
63

63

00:02:48.840  -->  00:02:50.720
All right, and we're gonna discuss the nested class
64

64

00:02:50.720  -->  00:02:52.450
in more detail in a later section.
65

65

00:02:52.450  -->  00:02:55.350
For now, we just really wanted to go through
66

66

00:02:55.350  -->  00:02:58.980
and look at how this effected variable scope
67

67

00:02:58.980  -->  00:03:00.610
at this point in the course.
68

68

00:03:00.610  -->  00:03:01.970
All right, so next coming up we're gonna have
69

69

00:03:01.970  -->  00:03:03.400
a short quiz to test you on some
70

70

00:03:03.400  -->  00:03:05.700
of the scoping concepts we're been discussing
71

71

00:03:05.700  -->  00:03:06.970
in this section of the course.
72

72

00:03:06.970  -->  00:03:08.363
See you in the next video.
