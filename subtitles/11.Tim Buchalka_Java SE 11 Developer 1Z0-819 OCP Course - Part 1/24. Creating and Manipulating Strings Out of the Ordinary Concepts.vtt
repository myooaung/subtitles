WEBVTT
0
1
00:00:05.291 --> 00:00:06.124
<v Instructor>All right, so let's have a look</v>
1

2
00:00:06.124 --> 00:00:07.625
at some of the out of the ordinary concepts
2

3
00:00:07.625 --> 00:00:10.860
about creating and manipulating Strings in Java.
3

4
00:00:10.860 --> 00:00:12.910
So note here that the compareTo method
4

5
00:00:12.910 --> 00:00:15.780
and compareToIgnoreCase do not return
5

6
00:00:15.780 --> 00:00:20.780
just 0, 1 and -1 values, but returns zero if the same String
6

7
00:00:21.310 --> 00:00:24.430
and the result is calculated as follows.
7

8
00:00:24.430 --> 00:00:26.777
So in the case of String one being abc,
8

9
00:00:26.777 --> 00:00:31.110
and String to being abcdef, then a call to compareTo
9

10
00:00:31.110 --> 00:00:35.870
on s1 passing s2 actually returns -3
10

11
00:00:35.870 --> 00:00:40.470
and the calculation there is s1.length minus s2.length.
11

12
00:00:40.470 --> 00:00:43.160
That calculation's used when the String s1
12

13
00:00:43.160 --> 00:00:46.415
is a sub-String of s2 starting index position zero.
13

14
00:00:46.415 --> 00:00:49.553
In the second scenario s2.comparedTo
14

15
00:00:49.553 --> 00:00:51.860
with s1 passed as the parameters
15

16
00:00:51.860 --> 00:00:54.772
of the result is 3 instead of -3 and that calculation
16

17
00:00:54.772 --> 00:00:59.162
is s2.length minus s1.length and that calculation's used
17

18
00:00:59.162 --> 00:01:04.162
when String two contains s1 starting at index position zero.
18

19
00:01:04.220 --> 00:01:06.250
All right, so moving on, we're doing a test now
19

20
00:01:06.250 --> 00:01:09.970
for abc in lowercase vs abc in uppercase.
20

21
00:01:09.970 --> 00:01:13.150
S1.compareTo2 s2 passed as an argument
21

22
00:01:13.150 --> 00:01:16.090
will actually return 32 and the calculation
22

23
00:01:16.090 --> 00:01:19.680
is s1.charAt and then passing as the perimeter
23

24
00:01:19.680 --> 00:01:20.730
IndexWhereStringsDiffer,
24

25
00:01:20.730 --> 00:01:24.518
minus s2.charAtIndexWhereStringsDiffer.
25

26
00:01:24.518 --> 00:01:27.300
And in this particular scenario IndexWhereStringsDiffer
26

27
00:01:27.300 --> 00:01:29.550
is equal to zero in this particular instance.
27

28
00:01:30.590 --> 00:01:34.346
Then s2.compareTo with s1 passed and an argument
28

29
00:01:34.346 --> 00:01:38.490
result instead of being 32 is -32.
29

30
00:01:38.490 --> 00:01:41.100
With s2.charAtIndexWhereStringsDiffer
30

31
00:01:41.100 --> 00:01:44.490
minus s1.charAtIndexWhereStringsDiffer
31

32
00:01:44.490 --> 00:01:46.070
being used for the calculation
32

33
00:01:46.070 --> 00:01:48.770
and this is where IndexWhereStringsDiffers is equal to zero
33

34
00:01:48.770 --> 00:01:50.580
in this particular instance.
34

35
00:01:50.580 --> 00:01:53.030
All right lastly, if you do the first argument
35

36
00:01:53.030 --> 00:01:54.896
s1 being abc in lowercase
36

37
00:01:54.896 --> 00:01:56.450
and s2 to also being abc in lowercase,
37

38
00:01:56.450 --> 00:02:01.450
s1.compareTo passing s2 as a parameter will return zero.
38

39
00:02:02.130 --> 00:02:04.870
All right just some things to keep in mind there.
39

40
00:02:04.870 --> 00:02:07.400
All right so the String constructive and the valueOf method
40

41
00:02:07.400 --> 00:02:09.800
can be used to create new Strings
41

42
00:02:09.800 --> 00:02:12.840
which a full or partial Strings to the current String,
42

43
00:02:12.840 --> 00:02:14.630
similar to the sub-string method
43

44
00:02:14.630 --> 00:02:16.510
with one very important difference
44

45
00:02:16.510 --> 00:02:19.060
and that is that the constructor and valueOf method's
45

46
00:02:19.060 --> 00:02:22.920
parameters have the same types but the last parameter
46

47
00:02:22.920 --> 00:02:24.020
has different meaning.
47

48
00:02:25.140 --> 00:02:26.900
So to see what I mean we're gonna create a class here
48

49
00:02:26.900 --> 00:02:29.513
called TestValueOf in our Strings Project.
49

50
00:02:38.360 --> 00:02:40.930
So I've created a String on line 12
50

51
00:02:40.930 --> 00:02:43.600
and in the first example there standing on line 16,
51

52
00:02:43.600 --> 00:02:46.020
the constructor is used to get the sub-string
52

53
00:02:46.020 --> 00:02:49.130
beginning at an offset index four inclusive
53

54
00:02:49.130 --> 00:02:50.340
and six characters long
54

55
00:02:51.230 --> 00:02:53.610
and we'll see the answer to that all the output to that
55

56
00:02:53.610 --> 00:02:54.580
when we run it.
56

57
00:02:54.580 --> 00:02:56.520
In the next scenario the valueOf methods used
57

58
00:02:56.520 --> 00:02:59.750
to get the sub-string beginning of the offset index four
58

59
00:02:59.750 --> 00:03:01.596
inclusive and six characters long.
59

60
00:03:01.596 --> 00:03:03.970
Again we'll see the results of that shortly.
60

61
00:03:03.970 --> 00:03:06.980
Then the method sub-string standing on line 27,
61

62
00:03:06.980 --> 00:03:07.990
we're using that.
62

63
00:03:07.990 --> 00:03:08.990
That uses offsets.
63

64
00:03:08.990 --> 00:03:10.810
Beginning the offset is inclusive again
64

65
00:03:10.810 --> 00:03:13.300
and ending offset is exclusive
65

66
00:03:13.300 --> 00:03:14.660
and what happens if we actually passed
66

67
00:03:14.660 --> 00:03:17.620
the same parameter values examples above?
67

68
00:03:17.620 --> 00:03:19.810
Then we'd make another example on line 31 where
68

69
00:03:19.810 --> 00:03:21.930
we're changing a second parameter value
69

70
00:03:21.930 --> 00:03:24.960
and then we're just confirming, which we know by now anyway
70

71
00:03:24.960 --> 00:03:26.910
that the variable won't be updated
71

72
00:03:26.910 --> 00:03:28.790
by printing it out on line 35.
72

73
00:03:28.790 --> 00:03:29.893
So let's run this.
73

74
00:03:32.350 --> 00:03:35.400
And you can see the output confirming what we've done here.
74

75
00:03:35.400 --> 00:03:37.480
So these are just things that you may
75

76
00:03:37.480 --> 00:03:40.230
well have known all about but useful things to keep in mind
76

77
00:03:40.230 --> 00:03:42.560
because there's other types of things that you'll be asked,
77

78
00:03:42.560 --> 00:03:44.760
may well be asked about in the exam
78

79
00:03:44.760 --> 00:03:46.858
and in terms of exam questions,
79

80
00:03:46.858 --> 00:03:49.650
one that we've seen before is where they come up
80

81
00:03:49.650 --> 00:03:53.100
and ask you to know when a String object is being created
81

82
00:03:53.100 --> 00:03:55.190
or how many have been created.
82

83
00:03:55.190 --> 00:03:57.450
So let's review some interesting observations
83

84
00:03:57.450 --> 00:04:00.130
by creating a new class to talk about this.
84

85
00:04:00.130 --> 00:04:02.980
You're gonna create the new classical StringCount.
85

86
00:04:02.980 --> 00:04:04.180
so go ahead and do that.
86

87
00:04:10.610 --> 00:04:13.290
And hopefully the comment makes it clear on line 13 and 14
87

88
00:04:13.290 --> 00:04:15.960
the behaviour is the same for all the replace methods
88

89
00:04:15.960 --> 00:04:16.793
on the String.
89

90
00:04:16.793 --> 00:04:20.750
If there's no match a new String object is not created
90

91
00:04:20.750 --> 00:04:25.197
and we'll just run that so you can review the code there
91

92
00:04:25.197 --> 00:04:27.820
and see that's the cases of 1 2 3 4
92

93
00:04:27.820 --> 00:04:30.200
and our output, we got the value true.
93

94
00:04:30.200 --> 00:04:31.123
Basically the point I'm making here
94

95
00:04:31.123 --> 00:04:34.000
is that you can see all of these return true indicating
95

96
00:04:34.000 --> 00:04:37.539
at the methods return the String original reference itself,
96

97
00:04:37.539 --> 00:04:40.740
so a new String object was not created.
97

98
00:04:40.740 --> 00:04:43.302
And that's in the scenario where the methods find no match.
98

99
00:04:43.302 --> 00:04:46.163
All right with that said let's add another segment of code.
99

100
00:04:46.163 --> 00:04:49.113
This is where the parameters have the same character value.
100

101
00:04:50.580 --> 00:04:51.610
All right so I can see what I've done there.
101

102
00:04:51.610 --> 00:04:54.220
The replace method with two chars that are the same
102

103
00:04:54.220 --> 00:04:57.020
does not create a new String object, let's confirm that.
103

104
00:05:00.560 --> 00:05:02.530
And you can see the fifth output String original
104

105
00:05:02.530 --> 00:05:04.540
is equal to String replaced.
105

106
00:05:04.540 --> 00:05:05.373
Basically, in other words,
106

107
00:05:05.373 --> 00:05:07.530
it's returning the same String reference back
107

108
00:05:07.530 --> 00:05:09.520
and not creating a new String object.
108

109
00:05:09.520 --> 00:05:11.940
Now interestingly here this behaviour is only true
109

110
00:05:11.940 --> 00:05:15.086
for the replace method using char parameters.
110

111
00:05:15.086 --> 00:05:18.290
The other three replace methods with matching parameters,
111

112
00:05:18.290 --> 00:05:20.880
actually do return new String references
112

113
00:05:20.880 --> 00:05:22.640
which is pretty interesting.
113

114
00:05:22.640 --> 00:05:25.020
So to confirm that, I've still got some more code
114

115
00:05:25.020 --> 00:05:26.750
that I'm going to paste in here.
115

116
00:05:26.750 --> 00:05:29.034
So let's go and check that out.
116

117
00:05:29.034 --> 00:05:30.984
All right so just looking at that code.
117

118
00:05:32.170 --> 00:05:35.060
But again the point there, passing String parameters
118

119
00:05:35.060 --> 00:05:37.660
or parameters of target String exhibits different behaviour
119

120
00:05:37.660 --> 00:05:40.110
then the ones that accept chars so let's run this
120

121
00:05:42.868 --> 00:05:45.580
and you can see that in this case the output for 678
121

122
00:05:45.580 --> 00:05:47.190
have all returned false
122

123
00:05:47.190 --> 00:05:49.900
meaning in fact a new String was created
123

124
00:05:49.900 --> 00:05:51.250
in each of those scenarios.
124

125
00:05:52.320 --> 00:05:54.700
So let's look at the sub-string example now.
125

126
00:05:54.700 --> 00:05:56.500
So I'm gonna add some code for that.
126

127
00:05:59.608 --> 00:06:00.870
And the comment gives it away.
127

128
00:06:00.870 --> 00:06:03.680
Note that creating a sub-string which is the same as String
128

129
00:06:03.680 --> 00:06:06.030
does not create a new object.
129

130
00:06:06.030 --> 00:06:06.980
We'll confirm that.
130

131
00:06:09.872 --> 00:06:12.040
And you can see we getting the answer true there.
131

132
00:06:12.040 --> 00:06:14.080
And you can confirm a new object is not created
132

133
00:06:14.080 --> 00:06:16.650
if you use sub-string with the full length
133

134
00:06:16.650 --> 00:06:17.600
of the current String.
134

135
00:06:17.600 --> 00:06:20.380
All right so I've got one more bit of code to add now.
135

136
00:06:20.380 --> 00:06:23.070
These accounting String object samples.
136

137
00:06:23.070 --> 00:06:24.290
So let's go ahead and do that.
137

138
00:06:24.290 --> 00:06:25.290
I'll have this code.
138

139
00:06:26.928 --> 00:06:30.020
So on line 59, note that the compiler calculates
139

140
00:06:30.020 --> 00:06:33.460
this expression to the constant abc:def
140

141
00:06:33.460 --> 00:06:36.217
so only one String is created at one time on this line.
141

142
00:06:36.217 --> 00:06:40.440
And we're setting up some other Strings on lines 62, 63, 64.
142

143
00:06:40.440 --> 00:06:43.458
Now the code on line 73 actually creates
143

144
00:06:43.458 --> 00:06:45.540
three String objects.
144

145
00:06:45.540 --> 00:06:49.930
Firstly, object one, that comprises s2 plus s1.
145

146
00:06:49.930 --> 00:06:52.800
Object two equals s3 plus object one.
146

147
00:06:52.800 --> 00:06:55.930
And object three equals s4 plus object two.
147

148
00:06:55.930 --> 00:06:59.121
Now if you rewrite this as you can see on line 70.
148

149
00:06:59.121 --> 00:07:02.878
So s5 equals three left parentheses, s4 plus s3,
149

150
00:07:02.878 --> 00:07:05.700
closing parentheses plus s2 closing parentheses,
150

151
00:07:05.700 --> 00:07:07.680
plus s1 closing parentheses,
151

152
00:07:07.680 --> 00:07:09.960
it might be easier to count the number of objects created
152

153
00:07:09.960 --> 00:07:12.828
by counting left parentheses groupings.
153

154
00:07:12.828 --> 00:07:14.918
But it's interesting to see how that actually runs
154

155
00:07:14.918 --> 00:07:16.653
and how that actually works.
155

156
00:07:17.650 --> 00:07:20.690
Right, so that's completed our review here of Strings.
156

157
00:07:20.690 --> 00:07:23.200
Now the String is the powerhouse of many applications
157

158
00:07:23.200 --> 00:07:25.920
and there was a lot of information to cover.
158

159
00:07:25.920 --> 00:07:27.270
Keep in mind that it's highly likely
159

160
00:07:27.270 --> 00:07:29.620
there'll be many questions on the exam testing and knowledge
160

161
00:07:29.620 --> 00:07:33.080
of the String and it's associated methods.
161

162
00:07:33.080 --> 00:07:34.120
All right so I'm moving on.
162

163
00:07:34.120 --> 00:07:34.953
There'll be a short quiz now
163

164
00:07:34.953 --> 00:07:36.900
on some of the String topics we've discussed
164

165
00:07:36.900 --> 00:07:38.640
so far in this section of the course.
165

166
00:07:38.640 --> 00:07:40.400
Good luck and I'll see you in that quiz
166

167
00:07:40.400 --> 00:07:41.530
and then in the next section,
167

168
00:07:41.530 --> 00:07:43.280
we'll move on to different content.
