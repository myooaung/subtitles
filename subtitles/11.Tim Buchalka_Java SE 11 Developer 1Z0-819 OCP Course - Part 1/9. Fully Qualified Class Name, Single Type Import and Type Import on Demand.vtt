WEBVTT
1
1

00:00:05.310  -->  00:00:06.250
<v Tim>So we ended the last video</v>
2

2

00:00:06.250  -->  00:00:09.190
showing multiple ways to reference a type
3

3

00:00:09.190  -->  00:00:10.510
from another package.
4

4

00:00:10.510  -->  00:00:12.450
Let's start work on using import statements
5

5

00:00:12.450  -->  00:00:14.400
in your class in this video.
6

6

00:00:14.400  -->  00:00:15.940
So, use a class in your code which
7

7

00:00:15.940  -->  00:00:17.320
resides in another package,
8

8

00:00:17.320  -->  00:00:18.930
even a parent package,
9

9

00:00:18.930  -->  00:00:20.850
you must use one of the mechanisms I described
10

10

00:00:20.850  -->  00:00:23.680
in the last video, a Fully Qualified Class Name,
11

11

00:00:23.680  -->  00:00:25.140
which can get tedious,
12

12

00:00:25.140  -->  00:00:27.870
or one flavour of an import statement.
13

13

00:00:27.870  -->  00:00:30.130
So, for the following exercises in this video,
14

14

00:00:30.130  -->  00:00:33.070
I'm going to make IntelliJ less intelligent.
15

15

00:00:33.070  -->  00:00:35.289
Now, IntelliJ and most IDEs will handle most
16

16

00:00:35.289  -->  00:00:38.580
of the work of maintaining the correct import statements
17

17

00:00:38.580  -->  00:00:39.839
required by your code
18

18

00:00:39.839  -->  00:00:41.420
and it will actually remove
19

19

00:00:41.420  -->  00:00:43.660
unused or redundant statements.
20

20

00:00:43.660  -->  00:00:44.750
But, we want to do the opposite,
21

21

00:00:44.750  -->  00:00:46.950
we want to go back to make it less intelligent,
22

22

00:00:46.950  -->  00:00:50.390
so you'll see in the menu commands and the menu imports
23

23

00:00:50.390  -->  00:00:52.531
and this can be very useful in exam
24

24

00:00:52.531  -->  00:00:55.081
where you won't have the advantage of using an IDE.
25

25

00:00:56.130  -->  00:00:56.963
So to do that,
26

26

00:00:56.963  -->  00:00:58.260
we're gonna go up to File
27

27

00:00:58.260  -->  00:00:59.110
into Settings
28

28

00:01:00.040  -->  00:01:01.730
and we're going to come down to Editor
29

29

00:01:01.730  -->  00:01:03.850
going to come down to General.
30

30

00:01:03.850  -->  00:01:05.880
I am going to select Auto Import.
31

31

00:01:05.880  -->  00:01:06.930
Now by default,
32

32

00:01:06.930  -->  00:01:08.120
or if not by default,
33

33

00:01:08.120  -->  00:01:08.995
what you would hear,
34

34

00:01:08.995  -->  00:01:11.600
you would normally configure IntelliJ or other IDEs
35

35

00:01:11.600  -->  00:01:13.990
you would add an unambiguous imports on the fly
36

36

00:01:13.990  -->  00:01:15.770
and optimise imports on the fly
37

37

00:01:15.770  -->  00:01:16.603
in other words,
38

38

00:01:16.603  -->  00:01:20.950
you'd hand over responsibility for importing to the IDE.
39

39

00:01:20.950  -->  00:01:22.690
But we want to specifically turn that off.
40

40

00:01:22.690  -->  00:01:23.670
So, if you are using IntelliJ,
41

41

00:01:23.670  -->  00:01:24.980
do what I am doing there
42

42

00:01:24.980  -->  00:01:27.730
or do the equivalent in whichever writer you are using.
43

43

00:01:28.610  -->  00:01:31.070
Alright, next we need to create a new class.
44

44

00:01:31.070  -->  00:01:32.508
Let's go ahead and do that.
45

45

00:01:32.508  -->  00:01:34.960
And I am going to create it at the source level.
46

46

00:01:34.960  -->  00:01:36.950
So again right-clicking on the source folder
47

47

00:01:36.950  -->  00:01:39.590
and we are just going to call this one TestFQCN.
48

48

00:01:39.590  -->  00:01:41.290
So no package name in other words.
49

49

00:01:42.550  -->  00:01:44.350
You are going to paste in some code.
50

50

00:01:45.640  -->  00:01:47.230
Now this code should compile.
51

51

00:01:47.230  -->  00:01:48.063
We run it.
52

52

00:01:49.062  -->  00:01:49.910
Zero surpirses.
53

53

00:01:49.910  -->  00:01:50.980
Pretty basic.
54

54

00:01:50.980  -->  00:01:52.900
Now in Java, you don't actually have to
55

55

00:01:52.900  -->  00:01:55.740
qualify any class in the java.lang package
56

56

00:01:55.740  -->  00:01:58.490
or use the java.lang import statement.
57

57

00:01:58.490  -->  00:02:00.950
So, you can see we are using java.lang.string at the moment.
58

58

00:02:00.950  -->  00:02:02.760
So, let's actually change the code now
59

59

00:02:02.760  -->  00:02:05.390
removing the fully-qualified class name for string
60

60

00:02:05.390  -->  00:02:07.490
but also adding a couple of lines of code
61

61

00:02:07.490  -->  00:02:09.363
to use our VineVegetable class.
62

62

00:02:11.510  -->  00:02:13.013
Okay so there is the code.
63

63

00:02:13.013  -->  00:02:14.183
I'll run that now.
64

64

00:02:16.581  -->  00:02:18.341
So you can see the string class on line 10
65

65

00:02:18.341  -->  00:02:20.880
isn't using a fully-qualified class name
66

66

00:02:20.880  -->  00:02:24.380
but other classes such as our VineVegetable class,
67

67

00:02:24.380  -->  00:02:25.370
because its in another package
68

68

00:02:25.370  -->  00:02:27.030
has to be qualified or imported.
69

69

00:02:27.030  -->  00:02:27.930
In this case we are using a
70

70

00:02:27.930  -->  00:02:30.785
fully qualified class name for VineVegetable.
71

71

00:02:30.785  -->  00:02:32.510
Right, so let's see a variation
72

72

00:02:32.510  -->  00:02:34.220
of it using an import statement.
73

73

00:02:34.220  -->  00:02:36.386
We are going to create another class now.
74

74

00:02:36.386  -->  00:02:38.290
Right-click source folder,
75

75

00:02:38.290  -->  00:02:39.660
New, Java Class.
76

76

00:02:39.660  -->  00:02:41.210
We'll call this one test import
77

77

00:02:42.060  -->  00:02:43.693
paste in the code.
78

78

00:02:45.960  -->  00:02:47.010
Alright, so you see from this code,
79

79

00:02:47.010  -->  00:02:49.160
we're not importing java.lang.string
80

80

00:02:49.160  -->  00:02:50.510
and that's because its implied.
81

81

00:02:50.510  -->  00:02:53.980
We are importing garden.vegetable.VineVegetable
82

82

00:02:53.980  -->  00:02:54.813
as you can see.
83

83

00:02:54.813  -->  00:02:56.590
And as a result of the import on line seven,
84

84

00:02:56.590  -->  00:02:58.920
we can use a simple name for VineVegetable
85

85

00:02:58.920  -->  00:03:00.980
to make the code a little less for both.
86

86

00:03:00.980  -->  00:03:01.883
If we run this,
87

87

00:03:04.360  -->  00:03:07.040
we get the appropriate output and everything works fine.
88

88

00:03:07.040  -->  00:03:09.380
Now, alternatively, you can just use a
89

89

00:03:09.380  -->  00:03:11.640
type-import-on-demand declaration
90

90

00:03:11.640  -->  00:03:12.980
for our import statement.
91

91

00:03:12.980  -->  00:03:15.140
So, I can change VineVegetable to *,
92

92

00:03:17.380  -->  00:03:18.800
Like so.
93

93

00:03:18.800  -->  00:03:20.540
And that's now a type import on demand
94

94

00:03:20.540  -->  00:03:22.090
because I am using the * there.
95

95

00:03:22.970  -->  00:03:25.200
And actually I think IntelliJ is giving us a hint there
96

96

00:03:25.200  -->  00:03:26.980
to go back to use single-class-import
97

97

00:03:26.980  -->  00:03:29.780
but we are ignoring its advice at the moment.
98

98

00:03:29.780  -->  00:03:30.763
Running that code.
99

99

00:03:31.920  -->  00:03:33.103
And that still works.
100

100

00:03:36.290  -->  00:03:38.220
So, when would you use one or the other?
101

101

00:03:38.220  -->  00:03:39.053
For the most part,
102

102

00:03:39.053  -->  00:03:41.530
you'll always use a single-type-import declaration
103

103

00:03:41.530  -->  00:03:43.960
and your IDE would be set to automatically
104

104

00:03:43.960  -->  00:03:46.350
include the import statement.
105

105

00:03:46.350  -->  00:03:48.010
However, it's important to know that
106

106

00:03:48.010  -->  00:03:49.870
the single-type-import declaration,
107

107

00:03:49.870  -->  00:03:50.860
firstly,
108

108

00:03:50.860  -->  00:03:54.170
takes precedence on the import-on-demand declaration
109

109

00:03:54.170  -->  00:03:55.003
and secondly,
110

110

00:03:55.003  -->  00:03:57.960
will prevent you from creating a class of the same name
111

111

00:03:57.960  -->  00:03:59.110
in your source file.
112

112

00:03:59.110  -->  00:04:01.450
So, lets look at both of these.
113

113

00:04:01.450  -->  00:04:03.453
To do that we need to create a new source file.
114

114

00:04:03.453  -->  00:04:05.360
For our package again, I am going to right-click the
115

115

00:04:05.360  -->  00:04:08.150
source file and New, Java Class.
116

116

00:04:08.150  -->  00:04:10.594
Nursery.vegetable.Vine Vegetable.
117

117

00:04:10.594  -->  00:04:12.810
And obviously by specifying the package,
118

118

00:04:12.810  -->  00:04:14.944
we've now got a package nursery.vegetable
119

119

00:04:14.944  -->  00:04:17.810
and a class VineVegetable in that package.
120

120

00:04:17.810  -->  00:04:19.290
We'll paste some code in there to replace
121

121

00:04:19.290  -->  00:04:21.350
what we have just created for VineVegetable
122

122

00:04:21.350  -->  00:04:23.600
with our nursery.vegetable package.
123

123

00:04:23.600  -->  00:04:25.950
Now we are going to go back to our test import.
124

124

00:04:27.230  -->  00:04:30.230
And what I am going to do is come down here,
125

125

00:04:30.230  -->  00:04:31.120
below the import,
126

126

00:04:31.120  -->  00:04:33.000
and type import
127

127

00:04:33.000  -->  00:04:36.230
nursery.vegetable.style.
128

128

00:04:36.230  -->  00:04:38.190
Semi-colon to finish the line.
129

129

00:04:38.190  -->  00:04:40.060
And you can see down here now,
130

130

00:04:40.060  -->  00:04:40.970
we'll hover over it.
131

131

00:04:40.970  -->  00:04:42.887
We'll just move this up so we can see it.
132

132

00:04:42.887  -->  00:04:44.527
"Reference to 'VineVegetable' is ambiguous,
133

133

00:04:44.527  -->  00:04:46.714
"both 'garden.vegetable.VineVegetable'
134

134

00:04:46.714  -->  00:04:50.980
"and 'nursery.vegetable.VineVegetable' match."
135

135

00:04:50.980  -->  00:04:51.813
So, basically, the problem here is
136

136

00:04:51.813  -->  00:04:54.900
we've now got ambiguous references.
137

137

00:04:54.900  -->  00:04:56.710
We can get around that by
138

138

00:04:56.710  -->  00:04:57.730
going back up to our import statements.
139

139

00:04:57.730  -->  00:04:58.955
Note also that,
140

140

00:04:58.955  -->  00:05:01.270
before I say that unused import statement,
141

141

00:05:01.270  -->  00:05:02.660
the order is telling us that
142

142

00:05:02.660  -->  00:05:05.040
this is not being used at the moment.
143

143

00:05:05.040  -->  00:05:06.820
But we can get around that as I said by changing
144

144

00:05:06.820  -->  00:05:10.047
that from a * to our VineVegetable.
145

145

00:05:10.047  -->  00:05:12.077
And suddenly the code works again.
146

146

00:05:12.077  -->  00:05:14.219
And if we run this to confirm
147

147

00:05:14.219  -->  00:05:17.710
you can see the output, "I am a nursery VineVegetable."
148

148

00:05:17.710  -->  00:05:20.640
So that's telling us that the more specific import was
149

149

00:05:20.640  -->  00:05:24.180
the import that was used if both imports are selected.
150

150

00:05:24.180  -->  00:05:27.500
And obviously IntelliJ is helpfully showing us that
151

151

00:05:27.500  -->  00:05:29.360
one of the imports is not being used
152

152

00:05:29.360  -->  00:05:30.420
by carrying it out in grey
153

153

00:05:30.420  -->  00:05:32.083
or removing the colour to grey.
154

154

00:05:33.020  -->  00:05:35.070
And just to confirm this, we can go back to
155

155

00:05:35.070  -->  00:05:36.325
changing this again
156

156

00:05:36.325  -->  00:05:39.435
.VineVegetable, specify that both of them
157

157

00:05:39.435  -->  00:05:41.240
have already got a definition there.
158

158

00:05:41.240  -->  00:05:42.810
That's an error.
159

159

00:05:42.810  -->  00:05:44.510
But if you change this one to a *,
160

160

00:05:45.519  -->  00:05:46.602
run the code.
161

161

00:05:49.831  -->  00:05:52.530
We have now got the output for the VineVegetable class
162

162

00:05:52.530  -->  00:05:54.393
in the garden.vegetable package.
163

163

00:05:55.360  -->  00:05:57.280
So, if you need to use both classes
164

164

00:05:57.280  -->  00:05:58.820
in the same source file
165

165

00:05:58.820  -->  00:06:00.990
you can use a fully-qualified class name
166

166

00:06:00.990  -->  00:06:02.630
for one instance
167

167

00:06:02.630  -->  00:06:06.127
At the moment we are using garden.vegetable.VineVegetable
168

168

00:06:06.127  -->  00:06:09.058
below that I can paste in some code
169

169

00:06:09.058  -->  00:06:11.260
using a fully-qualified class name there
170

170

00:06:11.260  -->  00:06:13.950
for VineVegetable from the nursery.vegetable package.
171

171

00:06:13.950  -->  00:06:17.813
Right-click that and we now get the output from both.
172

172

00:06:19.830  -->  00:06:21.680
Right, the other thing I want to show you now is
173

173

00:06:21.680  -->  00:06:24.890
what happens if you try and create a class in the same file
174

174

00:06:24.890  -->  00:06:25.723
with the same name.
175

175

00:06:25.723  -->  00:06:26.920
So we come down.
176

176

00:06:26.920  -->  00:06:27.930
We need to put it either before
177

177

00:06:27.930  -->  00:06:29.560
or after the test import class.
178

178

00:06:29.560  -->  00:06:32.113
I'm going to put it after...class.
179

179

00:06:32.976  -->  00:06:35.240
So we have got an arrow there.
180

180

00:06:35.240  -->  00:06:37.690
VineVegetabe is already defined in this compilation unit.
181

181

00:06:37.690  -->  00:06:40.740
Basically, IntelliJ is identifying this as a compile error
182

182

00:06:40.740  -->  00:06:43.030
because of the of the single-type-import statement.
183

183

00:06:43.030  -->  00:06:45.893
We cannot now create a local class called VineVegetable.
184

184

00:06:45.893  -->  00:06:49.180
What we can do though is go back up to where our imports.
185

185

00:06:49.180  -->  00:06:52.243
Change both to import-on-demand declarations.
186

186

00:06:53.300  -->  00:06:54.133
No errors.
187

187

00:06:54.133  -->  00:06:54.966
If we run this now,
188

188

00:06:56.910  -->  00:06:58.800
the output we get is, "I am a local VineVegetable,"
189

189

00:06:58.800  -->  00:07:01.040
which is coming from our local class
190

190

00:07:01.040  -->  00:07:02.498
and, "I am a nursery VineVegetable,"
191

191

00:07:02.498  -->  00:07:03.810
which is coming from our
192

192

00:07:03.810  -->  00:07:05.840
fully-qualified class name reference
193

193

00:07:05.840  -->  00:07:09.210
to VineVegetable from nursery.vegetable package.
194

194

00:07:09.210  -->  00:07:11.150
Alright and just before finishing this video,
195

195

00:07:11.150  -->  00:07:11.983
I want to point out,
196

196

00:07:11.983  -->  00:07:14.010
if you go back up to the import section.
197

197

00:07:14.010  -->  00:07:17.337
If we do an import along the line of import garden.*
198

198

00:07:19.670  -->  00:07:22.210
well that won't pull in the classes in the nested packages
199

199

00:07:22.210  -->  00:07:24.940
but only the classes defined in this package level
200

200

00:07:24.940  -->  00:07:25.773
So, in other words,
201

201

00:07:25.773  -->  00:07:28.650
you wouldn't be importing garden.vegetable.VineVegetable
202

202

00:07:28.650  -->  00:07:29.730
with that statement.
203

203

00:07:29.730  -->  00:07:31.440
So keep that in mind as well.
204

204

00:07:31.440  -->  00:07:33.710
Alright so I will just remove that.
205

205

00:07:33.710  -->  00:07:34.810
Right, so I will end the video here.
206

206

00:07:34.810  -->  00:07:35.830
In the next one,
207

207

00:07:35.830  -->  00:07:37.460
I want to go over and start talking
208

208

00:07:37.460  -->  00:07:39.780
about the next two types of import statements that
209

209

00:07:39.780  -->  00:07:42.410
we originally discussed in the previous video slides.
210

210

00:07:42.410  -->  00:07:44.523
Namely the static-import declaration
211

211

00:07:44.523  -->  00:07:47.380
and static-import-on-demand declarations.
212

212

00:07:47.380  -->  00:07:48.793
See you in the next video.
