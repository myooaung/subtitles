WEBVTT
1
1

00:00:05.280  -->  00:00:07.670
<v ->Well let's talk more about Polymorphism.</v>
2

2

00:00:07.670  -->  00:00:10.400
So, Polymorphism simply means many forms.
3

3

00:00:10.400  -->  00:00:12.030
In the Object Oriented world,
4

4

00:00:12.030  -->  00:00:14.680
an object can be many things or types.
5

5

00:00:14.680  -->  00:00:16.780
It can be treated as it's declared type,
6

6

00:00:16.780  -->  00:00:18.270
it's inherited type,
7

7

00:00:18.270  -->  00:00:20.042
it's parent's inherited type,
8

8

00:00:20.042  -->  00:00:22.020
a java.lang.Object,
9

9

00:00:22.020  -->  00:00:25.170
or any of the interfaces it implements.
10

10

00:00:25.170  -->  00:00:27.370
I touched on polymorphism in previous videos,
11

11

00:00:27.370  -->  00:00:29.186
when we implemented the drive and park methods,
12

12

00:00:29.186  -->  00:00:31.361
on different types of Vehicles.
13

13

00:00:31.361  -->  00:00:34.290
I'm going to demonstrate this principle in another example,
14

14

00:00:34.290  -->  00:00:37.313
using the Vehicle classes we created previously.
15

15

00:00:38.420  -->  00:00:40.720
So, we're going to get back to our inheritance project.
16

16

00:00:40.720  -->  00:00:42.870
We're going to create a new class.
17

17

00:00:42.870  -->  00:00:44.683
We're going to call this one TestVehicles.
18

18

00:00:51.610  -->  00:00:53.112
Okay, so there is the code.
19

19

00:00:53.112  -->  00:00:56.260
And, obviously, because we're using those other classes,
20

20

00:00:56.260  -->  00:00:57.100
Vehicle, etc.
21

21

00:00:57.100  -->  00:00:58.670
I'm assuming that you're in the same project.
22

22

00:00:58.670  -->  00:01:01.070
If not you'll need to add those classes to this project
23

23

00:01:01.070  -->  00:01:02.520
or just open up that project file
24

24

00:01:02.520  -->  00:01:04.150
and paste the code in there.
25

25

00:01:04.150  -->  00:01:06.410
So, this code that I've added contains a Motorcycle class,
26

26

00:01:06.410  -->  00:01:08.270
as you can see on screen there,
27

27

00:01:08.270  -->  00:01:10.890
that extends the abstract Vehicle class,
28

28

00:01:10.890  -->  00:01:13.320
of course a Vehicle constructor for our super code
29

29

00:01:13.320  -->  00:01:14.660
in the constructor.
30

30

00:01:14.660  -->  00:01:16.570
It also supplements its methods drive,
31

31

00:01:16.570  -->  00:01:18.493
park and make noise.
32

32

00:01:19.470  -->  00:01:22.480
Moving on down we've also got a TestVehicles class.
33

33

00:01:22.480  -->  00:01:24.430
You can see its got a main method.
34

34

00:01:24.430  -->  00:01:25.940
But in addition to that,
35

35

00:01:25.940  -->  00:01:26.870
scrolling down a bit further,
36

36

00:01:26.870  -->  00:01:29.460
you can see that the TestVehicle class also has two
37

37

00:01:29.460  -->  00:01:32.290
static methods: drive and park.
38

38

00:01:32.290  -->  00:01:34.080
And, each one of those methods takes a Vehicle
39

39

00:01:34.080  -->  00:01:35.700
as a parameter.
40

40

00:01:35.700  -->  00:01:37.400
Okay, and back to the main method.
41

41

00:01:38.340  -->  00:01:40.880
You can see its creating three objects in Auto
42

42

00:01:40.880  -->  00:01:42.890
and AutomatedAuto
43

43

00:01:42.890  -->  00:01:44.210
and a Motorcycle.
44

44

00:01:44.210  -->  00:01:45.957
Now, each of these is ultimately a Vehicle
45

45

00:01:45.957  -->  00:01:49.180
and can be passed to this class' drive and park methods
46

46

00:01:49.180  -->  00:01:50.280
that I just showed.
47

47

00:01:50.280  -->  00:01:52.495
And, these methods simply passed.
48

48

00:01:52.495  -->  00:01:53.640
Let me get into them again.
49

49

00:01:53.640  -->  00:01:56.320
I just simply execute the passed objects corresponding
50

50

00:01:56.320  -->  00:01:57.339
drive or park method,
51

51

00:01:57.339  -->  00:02:01.070
as well as actually identifying the actual type of object
52

52

00:02:01.070  -->  00:02:03.193
that was passed to the specific method.
53

53

00:02:04.295  -->  00:02:06.045
Alright, so let's run the code now.
54

54

00:02:07.959  -->  00:02:09.223 line:15% 
Okay, and there is the apport.
55

55

00:02:12.330  -->  00:02:15.430
So, what exactly has been demonstrated here?
56

56

00:02:15.430  -->  00:02:17.190
Well, firstly, we have demonstrated
57

57

00:02:17.190  -->  00:02:19.940
that Vehicle published a public interface
58

58

00:02:19.940  -->  00:02:21.700
that told all consumers,
59

59

00:02:21.700  -->  00:02:22.950
that any Vehicle,
60

60

00:02:22.950  -->  00:02:24.380
or subclass of Vehicle,
61

61

00:02:24.380  -->  00:02:26.210
would have the following behaviour:
62

62

00:02:26.210  -->  00:02:28.580
drive, park and makeNoise.
63

63

00:02:28.580  -->  00:02:31.046
We demonstrated that each unique subclass of Vehicle,
64

64

00:02:31.046  -->  00:02:34.160
could customise its implementation of these methods,
65

65

00:02:34.160  -->  00:02:35.570
overriding the methods,
66

66

00:02:35.570  -->  00:02:37.540
and do its own specific thing.
67

67

00:02:37.540  -->  00:02:39.560
Further, I demonstrated that the print method
68

68

00:02:39.560  -->  00:02:41.811
in TestVehicles can now execute the print method
69

69

00:02:41.811  -->  00:02:45.260
on any type of Vehicle passed into the code.
70

70

00:02:45.260  -->  00:02:47.270
There is no need for the calling code to know anything more
71

71

00:02:47.270  -->  00:02:49.793
about the specifics of the object passed to it.
72

72

00:02:52.050  -->  00:02:53.770
We demonstrated that although we passed
73

73

00:02:53.770  -->  00:02:56.060
a Vehicle to the methods on TestVehicles,
74

74

00:02:56.060  -->  00:02:57.590
the objects passed were different
75

75

00:02:57.590  -->  00:02:59.955
and concrete incarnations of Vehcile.
76

76

00:02:59.955  -->  00:03:02.200
And, finally, we demonstrated that executing
77

77

00:03:02.200  -->  00:03:04.938
the contractual methods drive park, and makeNoise,
78

78

00:03:04.938  -->  00:03:07.740
on a parameter object of type Vehicle,
79

79

00:03:07.740  -->  00:03:11.233
actually executed the overridden methods of the subclass.
80

80

00:03:13.280  -->  00:03:14.370
So the key to implementing
81

81

00:03:14.370  -->  00:03:16.670
this rather elegant way of writing code,
82

82

00:03:16.670  -->  00:03:19.871
is the combination of inheritance and overriding methods,
83

83

00:03:19.871  -->  00:03:23.060
that are defined on parent classes or interfaces.
84

84

00:03:23.060  -->  00:03:25.860
So let's look at the differences between overriding methods,
85

85

00:03:25.860  -->  00:03:27.640
and overloading methods.
86

86

00:03:27.640  -->  00:03:30.630
So first, overloading methods is done with a single class,
87

87

00:03:30.630  -->  00:03:32.840
generally to support similar behaviour,
88

88

00:03:32.840  -->  00:03:35.239
with different sets of parameters or inputs.
89

89

00:03:35.239  -->  00:03:37.107
Overriding methods is declaring
90

90

00:03:37.107  -->  00:03:39.350
a method in the current class,
91

91

00:03:39.350  -->  00:03:41.870
that is the same as a method in a parent class,
92

92

00:03:41.870  -->  00:03:43.860
either an abstract or concrete class,
93

93

00:03:43.860  -->  00:03:47.183
and creating its own custom behaviour of the named method.
94

94

00:03:49.310  -->  00:03:51.080
So, hopefully this table will help you remember the
95

95

00:03:51.080  -->  00:03:54.780
differences between overloaded and overridden methods.
96

96

00:03:54.780  -->  00:03:55.840
You can see that the rule there is that
97

97

00:03:55.840  -->  00:03:57.810
the method must have the same name.
98

98

00:03:57.810  -->  00:03:59.380
That's true for overloaded methods
99

99

00:03:59.380  -->  00:04:01.200
and overridden methods.
100

100

00:04:01.200  -->  00:04:03.201
The method must have the same number of parameters.
101

101

00:04:03.201  -->  00:04:05.040
Not true for overloaded methods,
102

102

00:04:05.040  -->  00:04:07.150
but is for overridden methods.
103

103

00:04:07.150  -->  00:04:09.220
The method must have the same types of parameters
104

104

00:04:09.220  -->  00:04:10.620
in the same order.
105

105

00:04:10.620  -->  00:04:11.900
And, names do not matter.
106

106

00:04:11.900  -->  00:04:13.530
Well, that's false for overloaded methods,
107

107

00:04:13.530  -->  00:04:15.243
but true for overridden methods.
108

108

00:04:16.860  -->  00:04:19.200
The method must have the same return type
109

109

00:04:19.200  -->  00:04:20.930
or a covariant of the type.
110

110

00:04:20.930  -->  00:04:23.002
And, primitive return types must exactly match.
111

111

00:04:23.002  -->  00:04:24.680
Well, for overloaded methods,
112

112

00:04:24.680  -->  00:04:26.440
that's irrelevant in the determination
113

113

00:04:26.440  -->  00:04:28.820
and it's true for overridden methods.
114

114

00:04:28.820  -->  00:04:30.200
Methods must have the same access
115

115

00:04:30.200  -->  00:04:32.150
or less restrictive access.
116

116

00:04:32.150  -->  00:04:33.465
Well, that's irrelevant in determination
117

117

00:04:33.465  -->  00:04:34.650
for overloaded methods
118

118

00:04:34.650  -->  00:04:35.929
and it's true for overridden methods.
119

119

00:04:35.929  -->  00:04:38.580
And, finally the Throws Clause
120

120

00:04:38.580  -->  00:04:40.752
is irrelevant in determination for overloaded methods,
121

121

00:04:40.752  -->  00:04:42.640
but for overridden methods,
122

122

00:04:42.640  -->  00:04:44.810
it's not required to have a Throws Clause,
123

123

00:04:44.810  -->  00:04:46.050
but if included,
124

124

00:04:46.050  -->  00:04:48.743
the exception cannot be wider or less specific.
125

125

00:04:50.270  -->  00:04:52.740
So, the similarities between and overridden method
126

126

00:04:52.740  -->  00:04:55.730
and an overloaded method are actually not many.
127

127

00:04:55.730  -->  00:04:58.280
The methods have the same name as another method,
128

128

00:04:58.280  -->  00:05:00.494
but that is basically where the similarities end.
129

129

00:05:00.494  -->  00:05:04.060
An overridden method will have the same name of a method,
130

130

00:05:04.060  -->  00:05:06.492
defined on a parent class or an interface.
131

131

00:05:06.492  -->  00:05:08.900
An overloaded method can have the same name as
132

132

00:05:08.900  -->  00:05:10.250
a method in its own class,
133

133

00:05:10.250  -->  00:05:13.913
or can overload a method on a parent class or interface.
134

134

00:05:15.820  -->  00:05:18.330
Overloaded methods have much fewer restrictions,
135

135

00:05:18.330  -->  00:05:19.900
because they are basically new methods
136

136

00:05:19.900  -->  00:05:21.790
in the class they are declared in,
137

137

00:05:21.790  -->  00:05:24.240
that happen to have the same method name as another,
138

138

00:05:24.240  -->  00:05:26.420
but a different parameter list.
139

139

00:05:26.420  -->  00:05:27.503
When you override a method,
140

140

00:05:27.503  -->  00:05:30.030
you're intentionally, one would hope,
141

141

00:05:30.030  -->  00:05:33.830
replacing or extending method that exists in another class,
142

142

00:05:33.830  -->  00:05:35.290
either because you want to,
143

143

00:05:35.290  -->  00:05:37.030
or because you are forced to.
144

144

00:05:37.030  -->  00:05:40.100
And it is the overridden method's particular signature,
145

145

00:05:40.100  -->  00:05:42.280
that allows a calling class to be agnostic about
146

146

00:05:42.280  -->  00:05:44.460
the class that is passed to it.
147

147

00:05:44.460  -->  00:05:45.530
Alright, with all of that said,
148

148

00:05:45.530  -->  00:05:47.080
let's finish the video now
149

149

00:05:47.080  -->  00:05:48.310
and in the next video,
150

150

00:05:48.310  -->  00:05:50.240
we'll see what this means in code.
151

151

00:05:50.240  -->  00:05:51.540
See you in the next video.
