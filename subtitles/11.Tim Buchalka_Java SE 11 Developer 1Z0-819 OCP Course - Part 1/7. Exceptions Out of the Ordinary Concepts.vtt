WEBVTT
1
1

00:00:05.330  -->  00:00:06.940
<v Instructor>In the last video, I introduced you</v>
2

2

00:00:06.940  -->  00:00:09.200
to the idea of using a single catch block to handle
3

3

00:00:09.200  -->  00:00:11.240
more than one type of exception.
4

4

00:00:11.240  -->  00:00:13.870
In this video, we'll look closer at this feature
5

5

00:00:13.870  -->  00:00:15.400
because not all exceptions can be
6

6

00:00:15.400  -->  00:00:17.827
caught in the same catch block.
7

7

00:00:17.827  -->  00:00:20.070
All right, so we need to create a new class
8

8

00:00:20.070  -->  00:00:22.810
in our exceptions project called CatchExamples.
9

9

00:00:23.830  -->  00:00:26.830
(keyboard clicking)
10

10

00:00:32.822  -->  00:00:33.960
All right, so this code consists
11

11

00:00:33.960  -->  00:00:37.250
of two checked custom exceptions.
12

12

00:00:37.250  -->  00:00:40.400
You see CustomThrowable, which extends Throwable,
13

13

00:00:40.400  -->  00:00:43.683
and CustomException, which extends Exception.
14

14

00:00:44.550  -->  00:00:47.420
So moving on down to the CatchExamples class, you see
15

15

00:00:47.420  -->  00:00:50.370
it's got a main method, but also, we'll come back to that.
16

16

00:00:50.370  -->  00:00:52.730
We've got this testError method as well.
17

17

00:00:52.730  -->  00:00:54.530
That one simply throws an IOException
18

18

00:00:54.530  -->  00:00:55.903
and more on that later.
19

19

00:00:56.780  -->  00:00:59.240
But back to the main method, you can see it's got four
20

20

00:00:59.240  -->  00:01:02.043
try catch blocks to see each of the three generic classes,
21

21

00:01:02.043  -->  00:01:04.630
Throwable and it's direct children,
22

22

00:01:04.630  -->  00:01:07.320
exception, as well as error.
23

23

00:01:07.320  -->  00:01:09.250
And each of the tri-clauses is empty again,
24

24

00:01:09.250  -->  00:01:10.770
as you can see there.
25

25

00:01:10.770  -->  00:01:12.000
We're also catching RuntimeException.
26

26

00:01:12.000  -->  00:01:14.270
All right, so let's run this.
27

27

00:01:14.270  -->  00:01:16.240
Okay, and now output at this stage.
28

28

00:01:16.240  -->  00:01:18.510
So you can wrap any code or no code at all
29

29

00:01:18.510  -->  00:01:20.107
in a try-catch clause as long as
30

30

00:01:20.107  -->  00:01:23.870
the catch clause does not specify checked exception.
31

31

00:01:23.870  -->  00:01:25.930
So let's test what happens if we catch checked
32

32

00:01:25.930  -->  00:01:27.760
exceptions in the clauses above
33

33

00:01:27.760  -->  00:01:30.040
So we're going to change our code now.
34

34

00:01:30.040  -->  00:01:32.600
What I'm going to do is just replace the first two catches
35

35

00:01:32.600  -->  00:01:34.700
there, the try, the catch Throwable,
36

36

00:01:34.700  -->  00:01:37.380
and the try and the catch Exception.
37

37

00:01:37.380  -->  00:01:39.610
We're going to replace those with our custom Throwable,
38

38

00:01:39.610  -->  00:01:41.190
and custom Exception.
39

39

00:01:41.190  -->  00:01:42.140
Replace the coding.
40

40

00:01:43.090  -->  00:01:45.640
So both of our custom Exceptions fall into the category
41

41

00:01:45.640  -->  00:01:47.610
of a checked exception and we're now
42

42

00:01:47.610  -->  00:01:50.520
getting compile errors, as a result.
43

43

00:01:50.520  -->  00:01:52.510
So, basically, we've now introduced a compile error,
44

44

00:01:52.510  -->  00:01:54.240
just by wrapping a try-catch clause
45

45

00:01:54.240  -->  00:01:56.830
with a checked exception around an empty statement.
46

46

00:01:56.830  -->  00:01:59.830
It turns out that checked exceptions are two-way streets.
47

47

00:01:59.830  -->  00:02:02.330
You cannot use them in a catch clause unless you carried
48

48

00:02:02.330  -->  00:02:04.700
throws that type of exception.
49

49

00:02:04.700  -->  00:02:06.200
So leave this code as is, for now,
50

50

00:02:06.200  -->  00:02:08.030
so we're going to come back to it shortly.
51

51

00:02:08.030  -->  00:02:09.190
What we're going to do is add
52

52

00:02:09.190  -->  00:02:11.020
some more code into the source file.
53

53

00:02:11.020  -->  00:02:14.280
I've got two classes, and we go up and paste
54

54

00:02:14.280  -->  00:02:17.776
it just before our public class CatchExamples.
55

55

00:02:17.776  -->  00:02:19.810
Then we go to SuperClass with one method that throws
56

56

00:02:19.810  -->  00:02:21.270
our CustomException.
57

57

00:02:21.270  -->  00:02:23.710
And we got sub-class, which extends SuperClass
58

58

00:02:23.710  -->  00:02:26.090
that caused the above method in it's own method,
59

59

00:02:26.090  -->  00:02:28.300
but wraps that in a try-catch block
60

60

00:02:28.300  -->  00:02:29.243
and does not propagate it.
61

61

00:02:29.243  -->  00:02:31.010
All right, the next thing we need to do is
62

62

00:02:31.010  -->  00:02:32.810
add some code to the tri-block that has
63

63

00:02:32.810  -->  00:02:34.660
the catch clause for CustomException.
64

64

00:02:36.220  -->  00:02:37.890
So I'm going to replace what we've got there
65

65

00:02:37.890  -->  00:02:38.963
with this new code.
66

66

00:02:39.989  -->  00:02:42.460
And I think by doing that, I've fixed the compile error
67

67

00:02:42.460  -->  00:02:45.110
that we had for the catch clause here, and you can see
68

68

00:02:45.110  -->  00:02:47.110
we're calling the SuperClass code there,
69

69

00:02:48.460  -->  00:02:51.620
which is obviously the methodSuperClass on line 23.
70

70

00:02:51.620  -->  00:02:53.130
But what happens if we now try
71

71

00:02:53.130  -->  00:02:54.753
and call our methodSubClass method?
72

72

00:02:56.520  -->  00:02:57.870
Come back down and do that.
73

73

00:02:57.870  -->  00:03:00.119
Change SuperClass to SubClass,
74

74

00:03:00.119  -->  00:03:02.154
(keyboard clicking)
75

75

00:03:02.154  -->  00:03:04.470
and we're back to having a compile error again.
76

76

00:03:04.470  -->  00:03:06.520
So we see that, even though our subclass
77

77

00:03:06.520  -->  00:03:08.210
is executing a method, which will come back
78

78

00:03:08.210  -->  00:03:11.030
and bring it up on the screen, methodSubClass there.
79

79

00:03:11.030  -->  00:03:12.640
It's executing a method that throws
80

80

00:03:12.640  -->  00:03:15.910
a CustomException, the compile is not satisfied.
81

81

00:03:15.910  -->  00:03:18.380
The CustomException is not propagated
82

82

00:03:18.380  -->  00:03:20.400
from the SubClass method and therefore,
83

83

00:03:20.400  -->  00:03:22.840
the catch block is not only unnecessary,
84

84

00:03:22.840  -->  00:03:24.410
but considered an error.
85

85

00:03:24.410  -->  00:03:27.410
What I'm going to do now is change all our try-catches here.
86

86

00:03:32.250  -->  00:03:33.750
And we're now left with code very similar
87

87

00:03:33.750  -->  00:03:35.490
to what we saw in the previous video.
88

88

00:03:35.490  -->  00:03:37.010
This catch clause will catch either
89

89

00:03:37.010  -->  00:03:39.840
a CustomException or a RuntimeException.
90

90

00:03:39.840  -->  00:03:42.330
So let's just add Throwable to the mix as well.
91

91

00:03:42.330  -->  00:03:44.450
We're adding it to the catch declaration clause.
92

92

00:03:44.450  -->  00:03:45.350
So come over here.
93

93

00:03:46.290  -->  00:03:48.463
Plot character Throwable.
94

94

00:03:49.840  -->  00:03:51.090
You can see that by doing that,
95

95

00:03:51.090  -->  00:03:53.200
the compiler doesn't like this code.
96

96

00:03:53.200  -->  00:03:54.260
So why not?
97

97

00:03:54.260  -->  00:03:56.310
Well you can't specify multiple exceptions
98

98

00:03:56.310  -->  00:03:58.520
in a single catch clause that are considered
99

99

00:03:58.520  -->  00:04:00.270
derivatives of another.
100

100

00:04:00.270  -->  00:04:01.820
They must be disjoined.
101

101

00:04:01.820  -->  00:04:04.062
If we look at the code there, they're both CustomException
102

102

00:04:04.062  -->  00:04:06.660
and RuntimeException are derivatives
103

103

00:04:06.660  -->  00:04:10.620
of Throwable, so the compiler disallows this declaration.
104

104

00:04:10.620  -->  00:04:13.486
So we're going to replace Throwable now with IOException.
105

105

00:04:13.486  -->  00:04:15.150
(keyboard clicking)
106

106

00:04:15.150  -->  00:04:17.130
And we've replaced one compiler error with another
107

107

00:04:17.130  -->  00:04:19.390
but this is one that we're familiar with if you look at it.
108

108

00:04:19.390  -->  00:04:20.610
The code in the try-catch block
109

109

00:04:20.610  -->  00:04:23.280
does not throw an IOException, which is,
110

110

00:04:23.280  -->  00:04:24.520
of course, a checked exception.
111

111

00:04:24.520  -->  00:04:26.480
So, let's actually add that.
112

112

00:04:26.480  -->  00:04:31.480
We'll make use of our testError method, ce.testError.
113

113

00:04:31.720  -->  00:04:33.750
That removes the error as you can see there.
114

114

00:04:33.750  -->  00:04:35.060
And that's because our testError method
115

115

00:04:35.060  -->  00:04:37.160
does throw an IOException.
116

116

00:04:37.160  -->  00:04:39.133
Now we want to do something with the Exception e
117

117

00:04:39.133  -->  00:04:42.400
pass to the catch clause by reassigning an object
118

118

00:04:42.400  -->  00:04:44.450
to be of type CustomException.
119

119

00:04:44.450  -->  00:04:45.670
Let's have a go at doing that.
120

120

00:04:45.670  -->  00:04:47.120
It'll be in the catch clause.
121

121

00:04:48.972  -->  00:04:51.260
As you can see, we've got yet another compile error.
122

122

00:04:51.260  -->  00:04:52.360
I'll hover over that.
123

123

00:04:52.360  -->  00:04:55.210
Cannot assign a value to final variable e.
124

124

00:04:55.210  -->  00:04:57.850
Using a catch clause with multiple declared exceptions
125

125

00:04:57.850  -->  00:04:59.680
comes with another limitation.
126

126

00:04:59.680  -->  00:05:03.150
The parameter of the catch clause is implicitly final
127

127

00:05:03.150  -->  00:05:04.870
and you cannot assign it to another value,
128

128

00:05:04.870  -->  00:05:08.060
as we're attempting to do here in our catch clause.
129

129

00:05:08.060  -->  00:05:09.830
So let's change the code to a throw
130

130

00:05:09.830  -->  00:05:11.180
a RuntimeException instead.
131

131

00:05:13.192  -->  00:05:16.192
(keyboard clicking)
132

132

00:05:18.073  -->  00:05:20.460
This lets our code compile, if we run it.
133

133

00:05:20.460  -->  00:05:22.760
Should work, although we won't see any output.
134

134

00:05:23.920  -->  00:05:25.090
And there it is.
135

135

00:05:25.090  -->  00:05:27.460
All right, so let's just tweak this a bit more.
136

136

00:05:27.460  -->  00:05:29.940
The exam might test you on many of these nuances
137

137

00:05:29.940  -->  00:05:32.040
which you may not be familiar with.
138

138

00:05:32.040  -->  00:05:35.107
So we're gonna change the try-catch block here now.
139

139

00:05:35.107  -->  00:05:39.188
And I'm just gonna replace the entire try-catch here.
140

140

00:05:39.188  -->  00:05:40.970
(keyboard clicking)
141

141

00:05:40.970  -->  00:05:42.270
So you can see what I've done is I've added
142

142

00:05:42.270  -->  00:05:44.840
the ArithmeticException catch block in addition
143

143

00:05:44.840  -->  00:05:46.560
to our multiple catch block.
144

144

00:05:46.560  -->  00:05:47.890
And I've put that before the other
145

145

00:05:47.890  -->  00:05:51.240
because you need to go to most specific to least specific.
146

146

00:05:51.240  -->  00:05:53.200
If we hadn't done that, we would have received
147

147

00:05:53.200  -->  00:05:55.060
a compiler error on the RuntimeException
148

148

00:05:55.060  -->  00:05:56.770
in the multiple declaration.
149

149

00:05:56.770  -->  00:05:59.080
And we're reassigning e, as you can see,
150

150

00:05:59.080  -->  00:06:01.650
to a new ArithmeticException that is throwing it.
151

151

00:06:01.650  -->  00:06:04.680
In a single exception catch clause, this is permitted.
152

152

00:06:04.680  -->  00:06:06.370
So this code compiles with no errors.
153

153

00:06:06.370  -->  00:06:08.170
I run it, we'll still get no output.
154

154

00:06:11.410  -->  00:06:13.790
You probably figured out that ArithmeticException
155

155

00:06:13.790  -->  00:06:15.950
is an unchecked exception since nothing
156

156

00:06:15.950  -->  00:06:19.154
in the try clause throws this type of exception.
157

157

00:06:19.154  -->  00:06:20.480
All right, so let's end the video here.
158

158

00:06:20.480  -->  00:06:21.990
In the next video, we'll actually
159

159

00:06:21.990  -->  00:06:23.500
start having a look at what happens
160

160

00:06:23.500  -->  00:06:25.830
if we throw an exception in a finding clause
161

161

00:06:25.830  -->  00:06:29.460
then we'll move on to looking at exceptions in initializers.
162

162

00:06:29.460  -->  00:06:30.883
See you in the next video.
