WEBVTT
1
1

00:00:05.473  -->  00:00:07.300
<v ->All right, so let's talk about declaring and using</v>
2

2

00:00:07.300  -->  00:00:10.320
List and ArrayList instances.
3

3

00:00:10.320  -->  00:00:12.290
So in Section 5, we talked about arrays
4

4

00:00:12.290  -->  00:00:13.643
and using some of the methods on the List
5

5

00:00:13.643  -->  00:00:16.360
to manipulate Aarrays.
6

6

00:00:16.360  -->  00:00:18.990
In this video, we are going to revisit the List interface,
7

7

00:00:18.990  -->  00:00:21.997
as well as talk about the java.util.ArrayList.
8

8

00:00:22.890  -->  00:00:24.610
Now that we are freshly armed with the knowledge
9

9

00:00:24.610  -->  00:00:27.270
of the differences between interfaces and classes,
10

10

00:00:27.270  -->  00:00:29.870
let's look at the List and ArrayList types together.
11

11

00:00:32.340  -->  00:00:36.970
All right, so let's start talking about the java.util.List.
12

12

00:00:36.970  -->  00:00:38.750
I'm gonna bring up the Java doc's description
13

13

00:00:38.750  -->  00:00:42.400
shortly for it, but the declaration of java.util.List
14

14

00:00:42.400  -->  00:00:45.160
is an interface that extends the Collection interface.
15

15

00:00:45.160  -->  00:00:47.720
So you can say we've got public interface List,
16

16

00:00:47.720  -->  00:00:51.170
diamond operator E, extends Collection, diamond operator E.
17

17

00:00:52.800  -->  00:00:54.823
So swinging back to the documentation,
18

18

00:00:55.730  -->  00:00:57.060
you can see the description throughout there,
19

19

00:00:57.060  -->  00:00:59.930
and just to make it a bit more easy to understand,
20

20

00:00:59.930  -->  00:01:01.210
I'm going to read out a definition
21

21

00:01:01.210  -->  00:01:03.120
which is slightly different to this one.
22

22

00:01:03.120  -->  00:01:06.090
So java.util.List is an ordered collection.
23

23

00:01:06.090  -->  00:01:08.380
The user of this interface has precise control
24

24

00:01:08.380  -->  00:01:11.580
over where in the list, each element is inserted.
25

25

00:01:11.580  -->  00:01:14.120
The user can access elements by their integer index,
26

26

00:01:14.120  -->  00:01:16.400
and search for elements in the list.
27

27

00:01:16.400  -->  00:01:19.610
Unlike sets, lists typically allow duplicate elements,
28

28

00:01:19.610  -->  00:01:22.450
and they typically also allow multiple null elements,
29

29

00:01:22.450  -->  00:01:25.130
if they allow null elements at all.
30

30

00:01:25.130  -->  00:01:26.620
So I've got the link to this page,
31

31

00:01:26.620  -->  00:01:29.000
which you can see in the resources section,
32

32

00:01:29.000  -->  00:01:30.680
of this video, so if you need to access that,
33

33

00:01:30.680  -->  00:01:32.283
then check out that link.
34

34

00:01:34.010  -->  00:01:34.870
So that was List,
35

35

00:01:34.870  -->  00:01:37.660
let's now look at the ArrayList, java.util.ArrayList.
36

36

00:01:37.660  -->  00:01:39.951
So this is a class that extends the AbstractList,
37

37

00:01:39.951  -->  00:01:42.437
and implements the List among other interfaces.
38

38

00:01:42.437  -->  00:01:44.210
And you can see an example there,
39

39

00:01:44.210  -->  00:01:47.090
public class Array List, diamond operator E
40

40

00:01:47.090  -->  00:01:49.710
extends AbstractList, diamond operator E,
41

41

00:01:49.710  -->  00:01:52.530
implements List, diamond operator E, RandomAccess,
42

42

00:01:52.530  -->  00:01:55.033
Cloneable, and java.io.Serializable.
43

43

00:01:56.670  -->  00:01:59.919
Let's now bring up the Java docs for ArrayList,
44

44

00:01:59.919  -->  00:02:02.569
link is also in the resources section for this video.
45

45

00:02:04.850  -->  00:02:08.600
So java.util.ArrayList is a resizable-array implementation
46

46

00:02:08.600  -->  00:02:10.290
of the List Interface.
47

47

00:02:10.290  -->  00:02:12.696
It implements all optional list operations,
48

48

00:02:12.696  -->  00:02:15.283
and permits all elements, including null.
49

49

00:02:17.130  -->  00:02:19.400
In addition to implementing the List interface,
50

50

00:02:19.400  -->  00:02:21.910
this class provides methods to manipulate
51

51

00:02:21.910  -->  00:02:23.170
the size of the array,
52

52

00:02:23.170  -->  00:02:25.590
that is used internally to store the list.
53

53

00:02:25.590  -->  00:02:28.030
So this list is roughly equivalent to Vector,
54

54

00:02:28.030  -->  00:02:30.500
except that it's unsynchronized.
55

55

00:02:30.500  -->  00:02:32.370
Importantly, note that ArrayLists
56

56

00:02:32.370  -->  00:02:34.740
do not support primitive data types.
57

57

00:02:34.740  -->  00:02:38.010
You will have to use the primitive data wrapper classes.
58

58

00:02:38.010  -->  00:02:39.923
Also, swinging back to (mumbles) now,
59

59

00:02:42.010  -->  00:02:44.014
I've created a new project, called ArrayList,
60

60

00:02:44.014  -->  00:02:46.240
let's create a new class now,
61

61

00:02:46.240  -->  00:02:49.013
and we'll call this one List Declaration.
62

62

00:02:49.013  -->  00:02:51.680
(clicking keys)
63

63

00:02:56.470  -->  00:02:57.340
From this code, you can see
64

64

00:02:57.340  -->  00:03:00.039
that I've imported java.util.ArrayList,
65

65

00:03:00.039  -->  00:03:03.120
as well as java.util.List, and I've also declared
66

66

00:03:03.120  -->  00:03:06.373
some local variables of top list or ArrayList.
67

67

00:03:07.430  -->  00:03:09.320
Know this also that most of the declarations
68

68

00:03:09.320  -->  00:03:10.330
are using generics,
69

69

00:03:10.330  -->  00:03:12.850
specifying a type in the diamond operator,
70

70

00:03:12.850  -->  00:03:15.433
to declare a type for a parameterized type.
71

71

00:03:18.030  -->  00:03:19.670
So why use generics?
72

72

00:03:19.670  -->  00:03:21.690
We did have a bit of a discussion about this previously,
73

73

00:03:21.690  -->  00:03:25.330
but generics enable types, classes and interfaces,
74

74

00:03:25.330  -->  00:03:27.410
to be parameters when defining classes,
75

75

00:03:27.410  -->  00:03:29.090
interfaces and methods.
76

76

00:03:29.090  -->  00:03:31.960
Similar to parameters used in method declarations,
77

77

00:03:31.960  -->  00:03:34.088
these type parameters provide a way for you to re-use
78

78

00:03:34.088  -->  00:03:37.650
the same code with different types of inputs.
79

79

00:03:37.650  -->  00:03:40.530
Before Java 5, an ArrayList was a collection
80

80

00:03:40.530  -->  00:03:42.880
of any object you wanted to put in there.
81

81

00:03:42.880  -->  00:03:44.550
If you were always putting a String element
82

82

00:03:44.550  -->  00:03:47.060
in the ArrayList, you'd have no way to enforcing,
83

83

00:03:47.060  -->  00:03:48.740
or of enforcing this rule,
84

84

00:03:48.740  -->  00:03:50.586
and you always had to cast to a String,
85

85

00:03:50.586  -->  00:03:53.407
when you retrieved an element from the ArrayList.
86

86

00:03:55.620  -->  00:03:57.904
Java 5 introduced a generic ArrayList
87

87

00:03:57.904  -->  00:04:01.200
which allows the person using an ArrayList in their code
88

88

00:04:01.200  -->  00:04:03.440
to provide a type for the ArrayList.
89

89

00:04:03.440  -->  00:04:06.050
You can create your own types that are parameterized.
90

90

00:04:06.050  -->  00:04:09.230
The ArrayList class was changed to Java 5 to be such a type,
91

91

00:04:09.230  -->  00:04:11.410
allowing the consumer of the type
92

92

00:04:11.410  -->  00:04:13.520
to decide what elements are permissible,
93

93

00:04:13.520  -->  00:04:15.400
when adding elements to the collection,
94

94

00:04:15.400  -->  00:04:17.663
prompting the compiler to do type-checking.
95

95

00:04:20.120  -->  00:04:22.210
Generics and parameterized types and methods
96

96

00:04:22.210  -->  00:04:25.500
aren't part of the 1Z0-815 exam,
97

97

00:04:25.500  -->  00:04:28.260
they are part of the second one, 1Z0-816,
98

98

00:04:28.260  -->  00:04:30.360
which I'll be doing in a second course,
99

99

00:04:30.360  -->  00:04:31.193
but with that said,
100

100

00:04:31.193  -->  00:04:34.070
you should still recognise the syntax and impact,
101

101

00:04:34.070  -->  00:04:36.580
of defining your type in a variable declaration.
102

102

00:04:36.580  -->  00:04:38.420
That's still gonna be of benefit to you
103

103

00:04:38.420  -->  00:04:42.630
when trying to pass this exam, the 1Z0-815.
104

104

00:04:42.630  -->  00:04:45.580
So some of the benefits gained by declaring your type.
105

105

00:04:45.580  -->  00:04:48.420
Firstly, stronger type checks at compile time,
106

106

00:04:48.420  -->  00:04:50.330
elimination of casts,
107

107

00:04:50.330  -->  00:04:53.823
also enabling programmers to implement generic algorithms.
108

108

00:04:56.230  -->  00:04:58.750
So we know that we cannot instantiate an interface,
109

109

00:04:58.750  -->  00:05:01.220
so we cannot create a List instance.
110

110

00:05:01.220  -->  00:05:02.783
We can create an instance of a class
111

111

00:05:02.783  -->  00:05:04.870
that implements the List interface
112

112

00:05:04.870  -->  00:05:06.810
and assign it to the the List type,
113

113

00:05:06.810  -->  00:05:08.231
which we've actually done in multiple examples
114

114

00:05:08.231  -->  00:05:10.223
in the Section 5 videos.
115

115

00:05:11.490  -->  00:05:14.860
So let's now add some code to the main method of this class,
116

116

00:05:14.860  -->  00:05:17.583
and right down at bottom after the declarations.
117

117

00:05:19.790  -->  00:05:22.450
All right, so there's the code that I pasted in.
118

118

00:05:22.450  -->  00:05:24.570
So in this code I'm demonstrating three ways
119

119

00:05:24.570  -->  00:05:28.210
to instantiate an ArrayList, two of which are typed.
120

120

00:05:28.210  -->  00:05:30.260
Well there you cannot instantiate List objects,
121

121

00:05:30.260  -->  00:05:33.650
you can assign objects to List variables, as shown.
122

122

00:05:33.650  -->  00:05:35.033
So you can see after our declarations,
123

123

00:05:35.033  -->  00:05:38.410
we got an instantiation of ArrayList objects,
124

124

00:05:38.410  -->  00:05:40.320
we're intializing a non-typed ArrayList
125

125

00:05:40.320  -->  00:05:43.030
using a no args constructor, on line 26.
126

126

00:05:43.030  -->  00:05:45.530
Moving down, we're intializing the string-typed ArrayList,
127

127

00:05:45.530  -->  00:05:48.640
using the (mumbles), which sets the initial capacity
128

128

00:05:48.640  -->  00:05:50.270
of the ArrayList.
129

129

00:05:50.270  -->  00:05:52.230
Next, we're initialising the the integer-typed ArrayList,
130

130

00:05:52.230  -->  00:05:54.490
using the collections parameter,
131

131

00:05:54.490  -->  00:05:57.160
which passes values to the ArrayList.
132

132

00:05:57.160  -->  00:05:59.920
You can leave the type out of right hand diamond operator,
133

133

00:05:59.920  -->  00:06:01.940
as you can see on line 37.
134

134

00:06:01.940  -->  00:06:03.810
So notice that I've left the diamond operator
135

135

00:06:03.810  -->  00:06:06.010
out of the right hand side of the line 40,
136

136

00:06:06.010  -->  00:06:08.970
this does generate a warning, but it will compile.
137

137

00:06:08.970  -->  00:06:11.460
And, if you go down, you can't create a List object
138

138

00:06:11.460  -->  00:06:12.321
but you can set objects
139

139

00:06:12.321  -->  00:06:14.330
that implement List to a List variable.
140

140

00:06:14.330  -->  00:06:17.090
You can see I'm doing that on that code below.
141

141

00:06:17.090  -->  00:06:18.700
That's in the video here, in the next one
142

142

00:06:18.700  -->  00:06:21.260
we're gonna start comparing Arrays and ArrayLists,
143

143

00:06:21.260  -->  00:06:22.929
specifically the (mumbles) functionality
144

144

00:06:22.929  -->  00:06:25.800
and the equivalent ArrayList methods.
145

145

00:06:25.800  -->  00:06:27.193
See you in the next video.
