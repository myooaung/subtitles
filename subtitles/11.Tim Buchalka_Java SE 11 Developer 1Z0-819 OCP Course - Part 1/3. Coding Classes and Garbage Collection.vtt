WEBVTT
1
1

00:00:04.830  -->  00:00:07.130
<v ->So when you instantiate an object in Java</v>
2

2

00:00:07.130  -->  00:00:09.840
the Java virtual machine allocates memory from the heap
3

3

00:00:09.840  -->  00:00:13.290
large enough to store the data required for the object.
4

4

00:00:13.290  -->  00:00:15.900
The address of this memory location is assigned
5

5

00:00:15.900  -->  00:00:17.500
to the declared variable.
6

6

00:00:17.500  -->  00:00:20.360
This memory stays allocated as long as a variable
7

7

00:00:20.360  -->  00:00:22.130
maintains a reference to it.
8

8

00:00:22.130  -->  00:00:24.370
You can't actually de-allocate memory manually
9

9

00:00:24.370  -->  00:00:27.580
in Java, but you can de-reference an object by
10

10

00:00:27.580  -->  00:00:29.990
setting it to null or assigning a different reference
11

11

00:00:29.990  -->  00:00:32.750
to the variable, allowing the object which lost its
12

12

00:00:32.750  -->  00:00:35.323
reference to be available for garbage collection.
13

13

00:00:36.860  -->  00:00:39.290
Objects declared locally and instantiated in
14

14

00:00:39.290  -->  00:00:42.210
method blocks, will automatically be de-referenced,
15

15

00:00:42.210  -->  00:00:44.350
when the method returns execution back to the
16

16

00:00:44.350  -->  00:00:47.500
calling thread unless the object is itself,
17

17

00:00:47.500  -->  00:00:49.260
the return value of the method.
18

18

00:00:49.260  -->  00:00:52.170
Objects never assigned to a variable, are immediately
19

19

00:00:52.170  -->  00:00:53.903
available for garbage collection.
20

20

00:00:55.100  -->  00:00:58.070
All right so let's get started by creating some code.
21

21

00:00:58.070  -->  00:00:59.880
Right so I'm gonna create a new class here
22

22

00:00:59.880  -->  00:01:02.170
I'm gonna call this class References
23

23

00:01:02.170  -->  00:01:04.300
and this is in our new objects project that
24

24

00:01:04.300  -->  00:01:06.412
I've created for this section of the course.
25

25

00:01:06.412  -->  00:01:07.910
(Typing sounds)
26

26

00:01:07.910  -->  00:01:09.260
And I'll paste in the code.
27

27

00:01:11.410  -->  00:01:13.540
Right so there's our code, so here we're actually
28

28

00:01:13.540  -->  00:01:15.977
creating two classes, firstly we're creating a
29

29

00:01:15.977  -->  00:01:18.058
TestClass here as you can see, with
30

30

00:01:18.058  -->  00:01:21.050
two string fields, a constructor,
31

31

00:01:21.050  -->  00:01:23.080
accepting two values,
32

32

00:01:23.080  -->  00:01:25.690
as well as a toString method to print the object out.
33

33

00:01:25.690  -->  00:01:27.720
Then I've also got the public class references
34

34

00:01:27.720  -->  00:01:29.600
which has got a main method that creates
35

35

00:01:29.600  -->  00:01:31.380
some objects of type TestClass and then
36

36

00:01:31.380  -->  00:01:34.253
reassigns the references to the instantiated objects.
37

37

00:01:37.050  -->  00:01:39.210
And we'll talk more about that shortly.
38

38

00:01:39.210  -->  00:01:40.310
Let's actually run it.
39

39

00:01:41.730  -->  00:01:43.850
Right so going through the code, again there's our
40

40

00:01:43.850  -->  00:01:46.310
test class, so if you scroll down a little bit
41

41

00:01:46.310  -->  00:01:47.910
we've got our references here.
42

42

00:01:47.910  -->  00:01:50.230
So A-ref is a reference to the "a" "z" object
43

43

00:01:50.230  -->  00:01:51.920
and we're calling on that because of the first
44

44

00:01:51.920  -->  00:01:54.290
and the second parameters, A to Z.
45

45

00:01:54.290  -->  00:01:57.390
B-ref, we're creating an instance of TestClass there,
46

46

00:01:57.390  -->  00:02:00.960
first and last and C-ref is start to end and
47

47

00:02:00.960  -->  00:02:03.170
D-ref and E-ref are null.
48

48

00:02:03.170  -->  00:02:05.547
So the first assignment there on line 45 are
49

49

00:02:05.547  -->  00:02:08.767
assigning A-ref to B-ref so any reference to the
50

50

00:02:08.767  -->  00:02:11.660
"A" "Z" object no longer exists after this statement.
51

51

00:02:11.660  -->  00:02:14.360
The A to Z object being what was A-ref before
52

52

00:02:14.360  -->  00:02:16.410
we overrode it, so moving on down we've got
53

53

00:02:16.410  -->  00:02:19.965
D-ref equals B-ref so A-ref, B-Ref and D-ref variables
54

54

00:02:19.965  -->  00:02:23.030
now reference the first last object, we're getting
55

55

00:02:23.030  -->  00:02:25.360
confirmation that this ref actually uh,
56

56

00:02:25.360  -->  00:02:27.070
when we ran it anyway.
57

57

00:02:27.070  -->  00:02:30.160
Moving on down E-ref equals B-ref equals C-ref
58

58

00:02:30.160  -->  00:02:33.280
so assignments not in declarations occur right to left
59

59

00:02:33.280  -->  00:02:35.770
so E-ref, B-ref and C-ref variables now all
60

60

00:02:35.770  -->  00:02:37.523
reference the start end object.
61

61

00:02:38.371  -->  00:02:40.130
And all references to the start and end object
62

62

00:02:40.130  -->  00:02:42.600
are now set to null when we run A-ref equals D-ref
63

63

00:02:42.600  -->  00:02:45.450
equals null and we get confirmation of that
64

64

00:02:45.450  -->  00:02:48.050
in the output down the bottom of the screen there.
65

65

00:02:48.050  -->  00:02:50.250
Bottom line here is by the end of the main method
66

66

00:02:50.250  -->  00:02:53.420
only one object start end still has references to it
67

67

00:02:53.420  -->  00:02:55.860
the others are then, are now eligible or would've been
68

68

00:02:55.860  -->  00:02:57.910 line:15% 
if the programme hadn't executed eligible for
69

69

00:02:57.910  -->  00:02:59.003 line:15% 
garbage collection.
70

70

00:03:00.490  -->  00:03:02.370
So I mentioned in one of the earliest videos in
71

71

00:03:02.370  -->  00:03:03.840
this course that one of the benefits of the
72

72

00:03:03.840  -->  00:03:05.990
Java runtime environment is that it
73

73

00:03:05.990  -->  00:03:08.170
frees developers from the complexity of
74

74

00:03:08.170  -->  00:03:11.540
memory management by providing a garbage collector.
75

75

00:03:11.540  -->  00:03:14.150
The garbage collector scans for de-allocated references,
76

76

00:03:14.150  -->  00:03:15.720
and reclaims that memory.
77

77

00:03:15.720  -->  00:03:17.820
Garbage collection is a process that could have
78

78

00:03:17.820  -->  00:03:20.470
a big impact on your application's performance,
79

79

00:03:20.470  -->  00:03:23.100
especially if your application processes large
80

80

00:03:23.100  -->  00:03:24.350
amounts of data.
81

81

00:03:24.350  -->  00:03:27.500
At some point you may need to examine and tune
82

82

00:03:27.500  -->  00:03:29.280
garbage collection options.
83

83

00:03:29.280  -->  00:03:31.230
The exam will not expect you to be an expert on
84

84

00:03:31.230  -->  00:03:33.973
this subject but may quiz you on the basics.
85

85

00:03:35.280  -->  00:03:37.450
So you can actually run Java.exe with one of the
86

86

00:03:37.450  -->  00:03:39.860
following options to log some of the garbage collection
87

87

00:03:39.860  -->  00:03:40.693
output.
88

88

00:03:40.693  -->  00:03:44.680
So you can use -Xlog:gc noting that putting an
89

89

00:03:44.680  -->  00:03:46.640
asterisks after the gc is more verbose and will
90

90

00:03:46.640  -->  00:03:50.180
print any message that has the gc tag and any other tag.
91

91

00:03:50.180  -->  00:03:54.230
You can also use -verbose:gc as an alias for the
92

92

00:03:54.230  -->  00:03:55.343
above command as well.
93

93

00:03:56.320  -->  00:03:58.300
And to see how that would work, let's actually
94

94

00:03:58.300  -->  00:04:00.630
make a change, so I'm gonna make a change to the
95

95

00:04:00.630  -->  00:04:04.160
configuration for references and I'll put some
96

96

00:04:04.160  -->  00:04:06.550
options in here under VM options
97

97

00:04:06.550  -->  00:04:07.943
if I put -Xlog:gc*
98

98

00:04:13.230  -->  00:04:15.010
click on OK and if we run this now
99

99

00:04:17.830  -->  00:04:19.260
you can see we've got some information there
100

100

00:04:19.260  -->  00:04:20.963
relating to what's going on here.
101

101

00:04:23.180  -->  00:04:27.180
The amount of memory being consumed, used, etcetera.
102

102

00:04:27.180  -->  00:04:28.340
Basically it's more information
103

103

00:04:28.340  -->  00:04:30.190
about the garbage collection process.
104

104

00:04:31.186  -->  00:04:33.240
And the other thing to point out here,
105

105

00:04:33.240  -->  00:04:35.060
let's scroll back up to the top there,
106

106

00:04:35.060  -->  00:04:38.570
second line of output using G1, so G1 is the
107

107

00:04:38.570  -->  00:04:40.110
garbage collector and we talked about
108

108

00:04:40.110  -->  00:04:42.160
garbage collectors earlier in the course.
109

109

00:04:43.660  -->  00:04:45.920
With that said let's very quickly go over the
110

110

00:04:45.920  -->  00:04:48.870
garbage collection options on this slide on screen now.
111

111

00:04:48.870  -->  00:04:51.020
So firstly we've got the serial collector
112

112

00:04:51.020  -->  00:04:52.870
and you can see VM option to use, I won't read
113

113

00:04:52.870  -->  00:04:54.420
all these out now but they're on screen and
114

114

00:04:54.420  -->  00:04:56.610
these slides again are available for you to download
115

115

00:04:56.610  -->  00:04:58.840
if you wish, check the bonus video the very last
116

116

00:04:58.840  -->  00:05:00.620
video in this course if you want to do that.
117

117

00:05:00.620  -->  00:05:03.210
So the serial collector uses a single thread to
118

118

00:05:03.210  -->  00:05:05.390
perform all garbage collection work.
119

119

00:05:05.390  -->  00:05:08.760
In general it's best suited to single processor machines.
120

120

00:05:08.760  -->  00:05:11.190
The parallel collector, it's basically got multiple
121

121

00:05:11.190  -->  00:05:13.830
threads that are used to speed up garbage collection,
122

122

00:05:13.830  -->  00:05:16.130
generally intended for applications with medium-sized
123

123

00:05:16.130  -->  00:05:18.840
to large-sized data sets that are run on multiprocessor
124

124

00:05:18.840  -->  00:05:20.790
or multi-threaded hardware.
125

125

00:05:20.790  -->  00:05:24.320
The garbage first collector G1, this is a service style
126

126

00:05:24.320  -->  00:05:26.240
collector for multiprocessor machines with a
127

127

00:05:26.240  -->  00:05:28.690
large amount of memory, it meets garbage collection
128

128

00:05:28.690  -->  00:05:31.100
pause-time goals with high probability, while
129

129

00:05:31.100  -->  00:05:33.634
achieving high throughput and I'm running the
130

130

00:05:33.634  -->  00:05:36.034
JDK version 11 you can see that was the default.
131

131

00:05:36.900  -->  00:05:39.510
Next we've got the Z garbage collector, which is
132

132

00:05:39.510  -->  00:05:41.800
a scalable low-latency garbage collector
133

133

00:05:41.800  -->  00:05:43.710
performing all expensive work concurrently without
134

134

00:05:43.710  -->  00:05:46.410
stopping the execution of application threads
135

135

00:05:46.410  -->  00:05:49.700
also introduced with JDK 11 and it's really intended
136

136

00:05:49.700  -->  00:05:52.010
for applications which require low latency,
137

137

00:05:52.010  -->  00:05:55.110
in other words less than 10ms pauses and or use
138

138

00:05:55.110  -->  00:05:58.500
a very large heap, in other words multi-terabytes.
139

139

00:05:58.500  -->  00:06:02.000
Finally, concurrent mark sweep collector CMS,
140

140

00:06:02.000  -->  00:06:04.970
this is deprecated as of JDK9 and it was for
141

141

00:06:04.970  -->  00:06:07.420
applications which preferred shorter garbage collection
142

142

00:06:07.420  -->  00:06:10.540
pauses and could afford to share processor resources
143

143

00:06:10.540  -->  00:06:12.590
with the garbage collection.
144

144

00:06:12.590  -->  00:06:13.720
All right so this video covered the
145

145

00:06:13.720  -->  00:06:16.810
declaration and instantiation of objects in Java
146

146

00:06:16.810  -->  00:06:19.150
as well as de-referencing them and gave you a
147

147

00:06:19.150  -->  00:06:21.540
cursory look of garbage collection options.
148

148

00:06:21.540  -->  00:06:22.970
In the next video I'm gonna present to you with
149

149

00:06:22.970  -->  00:06:25.820
a short quiz to review some of the items we've discussed
150

150

00:06:25.820  -->  00:06:27.830
then we'll pick up on a discussion about defining the
151

151

00:06:27.830  -->  00:06:30.290
structure of a class after the quiz.
152

152

00:06:30.290  -->  00:06:32.403
Good luck and see you in the next video.
