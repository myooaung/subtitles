WEBVTT
1
1

00:00:05.001  -->  00:00:05.834
<v Tim>All right, so with our</v>
2

2

00:00:05.834  -->  00:00:07.170
next example of Lambda Expressions,
3

3

00:00:07.170  -->  00:00:09.220
we're going to start using multiple parameters
4

4

00:00:09.220  -->  00:00:11.100
in those Lambda Expressions.
5

5

00:00:11.100  -->  00:00:13.630
We'll continue to use the calculator example,
6

6

00:00:13.630  -->  00:00:15.070
but for simplicity, I'm going to create
7

7

00:00:15.070  -->  00:00:17.390
a new class called BinaryCalculator.
8

8

00:00:17.390  -->  00:00:20.248
(mouse clicks)
9

9

00:00:20.248  -->  00:00:23.415
(keyboard keys clack)
10

10

00:00:27.512  -->  00:00:28.830
Right and this is almost a copy
11

11

00:00:28.830  -->  00:00:31.040
of the previous example, the calculator,
12

12

00:00:31.040  -->  00:00:34.230
except the BinaryIntegerOperation interface
13

13

00:00:34.230  -->  00:00:37.440
has a method, calculate, that accepts two parameters.
14

14

00:00:37.440  -->  00:00:38.800
And also, the Lambda Expressions
15

15

00:00:38.800  -->  00:00:40.810
that we're creating further down
16

16

00:00:40.810  -->  00:00:42.713
have actually got two parameters.
17

17

00:00:43.710  -->  00:00:44.900
Everything else is pretty much the same
18

18

00:00:44.900  -->  00:00:46.270
as what we saw in the previous videos.
19

19

00:00:46.270  -->  00:00:47.216
If we run this now,
20

20

00:00:47.216  -->  00:00:49.980
(mouse clicks)
21

21

00:00:49.980  -->  00:00:51.290
can see what the values,
22

22

00:00:51.290  -->  00:00:53.250
the numbers four and two add up to six.
23

23

00:00:53.250  -->  00:00:55.713
The numbers four and two subtracted equals two.
24

24

00:00:58.600  -->  00:01:01.390 line:15% 
For the first Lambda Expression on Line 32,
25

25

00:01:01.390  -->  00:01:03.320 line:15% 
this demonstrates a typed parameter list
26

26

00:01:03.320  -->  00:01:06.510
Parentheses are always required for multiple parameters,
27

27

00:01:06.510  -->  00:01:08.250
and we saw the results coming back
28

28

00:01:08.250  -->  00:01:09.780
with two values added together.
29

29

00:01:09.780  -->  00:01:11.850
And the second one on Line 36 demonstrates
30

30

00:01:11.850  -->  00:01:14.060
an untyped parameter list but noting
31

31

00:01:14.060  -->  00:01:15.410
that parentheses are always required
32

32

00:01:15.410  -->  00:01:16.650
for multiple parameters.
33

33

00:01:16.650  -->  00:01:18.480
This time, we're not specifying the type,
34

34

00:01:18.480  -->  00:01:20.500
unlike the the first example.
35

35

00:01:20.500  -->  00:01:21.900
All right, so continuing on,
36

36

00:01:21.900  -->  00:01:23.810
let's actually add two more Lambda Expressions
37

37

00:01:23.810  -->  00:01:24.960
to the main method.
38

38

00:01:24.960  -->  00:01:27.768
So I'm going to add them down here below the first two.
39

39

00:01:27.768  -->  00:01:28.796
(keyboard keys clack)
40

40

00:01:28.796  -->  00:01:30.380
And you can see that the compiler doesn't like
41

41

00:01:30.380  -->  00:01:32.190
either of these Lambda Expressions,
42

42

00:01:32.190  -->  00:01:34.160
the first one specifying a data type
43

43

00:01:34.160  -->  00:01:37.090
only for the first parameter, which is not valid.
44

44

00:01:37.090  -->  00:01:38.800
And the second one doesn't wrap
45

45

00:01:38.800  -->  00:01:42.020
the parameters declarations in parentheses.
46

46

00:01:42.020  -->  00:01:43.180
Parentheses are required when
47

47

00:01:43.180  -->  00:01:45.340
the method has more than one parameter.
48

48

00:01:45.340  -->  00:01:46.173
So let's fix these.
49

49

00:01:46.173  -->  00:01:47.450
What I'm going to do is just comment these out
50

50

00:01:47.450  -->  00:01:48.570
so you've got access to these
51

51

00:01:48.570  -->  00:01:49.925
if you're downloading source code.
52

52

00:01:49.925  -->  00:01:52.500
(keyboard keys clack)
53

53

00:01:52.500  -->  00:01:53.850
All right, so there's the code.
54

54

00:01:53.850  -->  00:01:55.920
Now, in the multiplication example,
55

55

00:01:55.920  -->  00:01:58.280
note that we're using the local variable type inference
56

56

00:01:58.280  -->  00:02:00.500
by setting type to var.
57

57

00:02:00.500  -->  00:02:02.030
Support for var in the parameters
58

58

00:02:02.030  -->  00:02:05.280
of Lambda Expressions was added in Java 11.
59

59

00:02:05.280  -->  00:02:07.860
And the second example was just correctly putting
60

60

00:02:07.860  -->  00:02:10.333
the two parameters in parentheses.
61

61

00:02:11.210  -->  00:02:13.960
All right, just to make sure this is working,
62

62

00:02:13.960  -->  00:02:15.970
we'll add a couple of outputs here
63

63

00:02:15.970  -->  00:02:17.970
to call those two Lambda Expressions.
64

64

00:02:17.970  -->  00:02:19.509
I'll run the code
65

65

00:02:19.509  -->  00:02:20.880
(mouse clicks)
66

66

00:02:20.880  -->  00:02:23.250
and we get the outputs for multiplied and divided,
67

67

00:02:23.250  -->  00:02:24.740
which, of course, are the two other
68

68

00:02:24.740  -->  00:02:26.540
Lambda Expressions we've just added.
69

69

00:02:29.190  -->  00:02:31.030
So I've stated that Lambda Expressions
70

70

00:02:31.030  -->  00:02:33.240
require functional interfaces to provide
71

71

00:02:33.240  -->  00:02:35.280
a targeted method and type.
72

72

00:02:35.280  -->  00:02:37.610
Java provides several interfaces for you
73

73

00:02:37.610  -->  00:02:39.530
that satisfy common patterns,
74

74

00:02:39.530  -->  00:02:42.683
and several of these are in the java.util.function package.
75

75

00:02:44.220  -->  00:02:46.970
Can see in the first example there UnaryOperator.
76

76

00:02:46.970  -->  00:02:48.950
The functional interface typed is DoubleUnaryOperator,
77

77

00:02:48.950  -->  00:02:52.490
IntUnaryOperator, or LongUnaryOperator
78

78

00:02:52.490  -->  00:02:54.330
and represents an operation on the single operand
79

79

00:02:54.330  -->  00:02:57.560
that produces a result of the same type as its operand.
80

80

00:02:57.560  -->  00:02:58.860
And I'm not going to read all these out now,
81

81

00:02:58.860  -->  00:03:01.327
remembering that the slides are available to download
82

82

00:03:01.327  -->  00:03:02.780
for you to study this in detail,
83

83

00:03:02.780  -->  00:03:05.270
but we've basically got a BinaryOperator there,
84

84

00:03:05.270  -->  00:03:10.270
Consumer, Predicate, Supplier, and Function.
85

85

00:03:10.850  -->  00:03:13.450
So grab the slides if you need to or just pause the video
86

86

00:03:13.450  -->  00:03:15.470
so you can read those for now.
87

87

00:03:15.470  -->  00:03:18.850
Basically, you can see that the interfaces provided by Java
88

88

00:03:18.850  -->  00:03:21.023
really cover a wide swath of functionality.
89

89

00:03:22.390  -->  00:03:24.350
All right, so let's use one of the supplied interfaces,
90

90

00:03:24.350  -->  00:03:27.623
the IntUnaryOperator, in our calculator class.
91

91

00:03:29.070  -->  00:03:30.780
I'm going to go back to the calculator class,
92

92

00:03:30.780  -->  00:03:32.960
not the binary calculator,
93

93

00:03:32.960  -->  00:03:33.793
and what we want to do
94

94

00:03:33.793  -->  00:03:35.943
is we're going to change our interface.
95

95

00:03:37.100  -->  00:03:38.740
So we're no longer going to use that interface.
96

96

00:03:38.740  -->  00:03:40.820
What we're going to do is basically remove that
97

97

00:03:40.820  -->  00:03:41.990
from the source file now.
98

98

00:03:41.990  -->  00:03:43.170
(mouse clicks)
(keyboard keys clack)
99

99

00:03:43.170  -->  00:03:45.920
I'll just comment it out so it's available there.
100

100

00:03:45.920  -->  00:03:47.550
And, obviously, we've got an error now
101

101

00:03:47.550  -->  00:03:49.810
in our calculate method because we've removed that.
102

102

00:03:49.810  -->  00:03:50.970
What we're going to do is change that
103

103

00:03:50.970  -->  00:03:53.170
from the UnaryIntegerOperation
104

104

00:03:53.170  -->  00:03:55.360
to one of those types we just saw on the slides:
105

105

00:03:55.360  -->  00:03:57.054
the IntUnaryOperation.
106

106

00:03:57.054  -->  00:03:58.212
(keyboard keys clack)
107

107

00:03:58.212  -->  00:04:00.510
IntUnaryOperator, I should say.
108

108

00:04:00.510  -->  00:04:02.150
And we're going to change this from calculate,
109

109

00:04:02.150  -->  00:04:03.737
which no longer is a valid method.
110

110

00:04:03.737  -->  00:04:04.570
(keyboard keys clack)
111

111

00:04:04.570  -->  00:04:06.337
It's going to be .applyAsInt(a),
112

112

00:04:09.108  -->  00:04:11.820
and we also need to change the types I've defined
113

113

00:04:11.820  -->  00:04:12.833
for the three Lambda Expressions.
114

114

00:04:12.833  -->  00:04:14.883
I'll just take a copy of IntUnaryOperator
115

115

00:04:15.890  -->  00:04:17.460
and paste that in for each of the,
116

116

00:04:17.460  -->  00:04:20.070
or the extra for them, all four.
117

117

00:04:20.070  -->  00:04:23.370
We'll need to have that type updated, like so.
118

118

00:04:23.370  -->  00:04:25.340
And, again, this is an in-built interface
119

119

00:04:25.340  -->  00:04:26.360
that comes with Java.
120

120

00:04:26.360  -->  00:04:28.763
So now that I've done that, I can run this,
121

121

00:04:30.877  -->  00:04:33.330
and you can see that the results are the same as before
122

122

00:04:33.330  -->  00:04:35.860
but this time, using the new interface.
123

123

00:04:35.860  -->  00:04:38.110
All right, so in the last four videos including this one,
124

124

00:04:38.110  -->  00:04:40.500
we covered the basics of Lambda Expressions.
125

125

00:04:40.500  -->  00:04:42.080
In the next video, I want to look at some more
126

126

00:04:42.080  -->  00:04:43.870
of the supplied functional interfaces
127

127

00:04:43.870  -->  00:04:46.050
in the java.util.function package
128

128

00:04:46.050  -->  00:04:48.380
as well as looking at how to apply Lambda Expressions
129

129

00:04:48.380  -->  00:04:50.280
to collections and lists.
130

130

00:04:50.280  -->  00:04:51.580
See you in the next video.
