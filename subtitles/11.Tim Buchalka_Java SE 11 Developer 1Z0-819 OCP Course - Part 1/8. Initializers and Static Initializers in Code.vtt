WEBVTT
1
1

00:00:05.520  -->  00:00:07.130
<v Instructor>Right, so we're first going to examine</v>
2

2

00:00:07.130  -->  00:00:10.150
if order really does matter when declaring initializers,
3

3

00:00:10.150  -->  00:00:13.180
constructors, and instance variables in code.
4

4

00:00:13.180  -->  00:00:15.560
So, in our existing project, Objects,
5

5

00:00:15.560  -->  00:00:16.950
we're going to create a new class called
6

6

00:00:16.950  -->  00:00:18.393
initializerOrder in it.
7

7

00:00:21.896  -->  00:00:23.979
(typing)
8

8

00:00:28.700  -->  00:00:30.460
Right, so looking at this class,
9

9

00:00:30.460  -->  00:00:32.562
we've got a static variable of type int,
10

10

00:00:32.562  -->  00:00:33.929
called statementOrder,
11

11

00:00:33.929  -->  00:00:35.400
we've got a method which updates
12

12

00:00:35.400  -->  00:00:38.050
the static variable each time our method's are called
13

13

00:00:39.240  -->  00:00:40.310
and you can see that one down there,
14

14

00:00:40.310  -->  00:00:43.420
it's the method called clarify.
15

15

00:00:43.420  -->  00:00:44.860
As you can see, it's updating the variable,
16

16

00:00:44.860  -->  00:00:46.730
pulling the string passed to it
17

17

00:00:46.730  -->  00:00:49.203
as well as the actual variable itself.
18

18

00:00:49.203  -->  00:00:51.690
This is going to help us ultimately determine
19

19

00:00:51.690  -->  00:00:53.440
the order that things are executed.
20

20

00:00:54.320  -->  00:00:56.520
Now the class itself, looking back at the code here,
21

21

00:00:56.520  -->  00:00:59.080
it's got three variable declarations.
22

22

00:00:59.080  -->  00:01:01.570
You can see that I've set those up there.
23

23

00:01:01.570  -->  00:01:03.923
Three initializer block declarations as well.
24

24

00:01:05.880  -->  00:01:08.090
As well as a constructor method as well.
25

25

00:01:08.090  -->  00:01:10.010
And they aren't in any particular order,
26

26

00:01:10.010  -->  00:01:12.130
but again we're setting it up to see what happens,
27

27

00:01:12.130  -->  00:01:14.310
and finally just before I run this,
28

28

00:01:14.310  -->  00:01:17.120
in the InitializeOrder main method,
29

29

00:01:17.120  -->  00:01:18.120
right down the bottom there you can see
30

30

00:01:18.120  -->  00:01:20.070
where we're actually just creating a new instance
31

31

00:01:20.070  -->  00:01:21.237
of our ordered class
32

32

00:01:21.237  -->  00:01:23.880
and that sets up all the initialization code.
33

33

00:01:23.880  -->  00:01:25.823
All right, so let's actually run this now.
34

34

00:01:28.030  -->  00:01:29.610
All right, so that's the results.
35

35

00:01:29.610  -->  00:01:30.550
So, looking at the code there,
36

36

00:01:30.550  -->  00:01:32.560
you can see the constructor output,
37

37

00:01:32.560  -->  00:01:34.890
which is basically the code on line 27,
38

38

00:01:34.890  -->  00:01:37.440
that's not called until right to the end.
39

39

00:01:37.440  -->  00:01:39.450
So, all variables and initializer blocks
40

40

00:01:39.450  -->  00:01:42.100
are executed prior to code in the constructor
41

41

00:01:42.100  -->  00:01:44.270
regardless of where in the class body
42

42

00:01:44.270  -->  00:01:45.790
the constructor is declared,
43

43

00:01:45.790  -->  00:01:47.410
because we've got an initializer block of code
44

44

00:01:47.410  -->  00:01:49.730
below and above the constructor,
45

45

00:01:49.730  -->  00:01:50.900
but the other thing to keep in mind is
46

46

00:01:50.900  -->  00:01:54.103
in terms of this initializer block of code,
47

47

00:01:54.970  -->  00:01:57.090
it's actually executed in the order
48

48

00:01:57.090  -->  00:01:59.290
that it has been set up in the class.
49

49

00:01:59.290  -->  00:02:01.910
And there you can see the output confirming that.
50

50

00:02:01.910  -->  00:02:04.980
Now you can use instance variables in initializer blocks
51

51

00:02:04.980  -->  00:02:06.670
and let's explore that now.
52

52

00:02:06.670  -->  00:02:08.620
So, I'm going to create another new class,
53

53

00:02:08.620  -->  00:02:10.670
we'll call this one initializerOrderMore.
54

54

00:02:13.146  -->  00:02:15.229
(typing)
55

55

00:02:19.945  -->  00:02:21.430
All right, so looking at this code
56

56

00:02:21.430  -->  00:02:23.200
and this code's very similar in structure
57

57

00:02:23.200  -->  00:02:24.960
to the code that we only just ran
58

58

00:02:24.960  -->  00:02:26.470
with the following differences.
59

59

00:02:26.470  -->  00:02:28.110
Firstly, I've changed the name of the package
60

60

00:02:28.110  -->  00:02:30.280
PrivateClass to MixItUpClass.
61

61

00:02:30.280  -->  00:02:32.390
Secondly, I changed the clarify method
62

62

00:02:32.390  -->  00:02:34.810
to give it an additional parameter,
63

63

00:02:34.810  -->  00:02:37.610
which is an int that we pass into the method.
64

64

00:02:37.610  -->  00:02:39.490
I've added one more instance variable, int d,
65

65

00:02:39.490  -->  00:02:42.210
you can see the declaration for that on line 49,
66

66

00:02:42.210  -->  00:02:44.089
but we're actually changing that to
67

67

00:02:44.089  -->  00:02:46.210
add a value to it in the constructor,
68

68

00:02:46.210  -->  00:02:47.420
as you can see there.
69

69

00:02:47.420  -->  00:02:50.010
I've also changed all calls to the clarify method,
70

70

00:02:50.010  -->  00:02:51.060
and you can see I've got a few of them on
71

71

00:02:51.060  -->  00:02:52.400
the screen here now.
72

72

00:02:52.400  -->  00:02:54.570
So, now it passes variables of our choosing
73

73

00:02:54.570  -->  00:02:56.130
as the second parameter.
74

74

00:02:56.130  -->  00:02:57.430
Now I'm using an instance variable
75

75

00:02:57.430  -->  00:03:00.330
in all cases but one to these method calls.
76

76

00:03:00.330  -->  00:03:01.740
So, the one difference is the one
77

77

00:03:01.740  -->  00:03:04.300
right on the top of the file there on line 11.
78

78

00:03:04.300  -->  00:03:05.470
And finally we're pulling out
79

79

00:03:05.470  -->  00:03:07.490
all the variables of A, B, C, D
80

80

00:03:07.490  -->  00:03:09.450
into toString method, you can see there.
81

81

00:03:09.450  -->  00:03:11.490
So, when we create a new instance of the class,
82

82

00:03:11.490  -->  00:03:13.040
that we're doing in the main method
83

83

00:03:13.040  -->  00:03:14.410
down the bottom of the screen there,
84

84

00:03:14.410  -->  00:03:15.960
that will ultimately print out those values.
85

85

00:03:15.960  -->  00:03:17.560
So, let's actually run this now.
86

86

00:03:19.840  -->  00:03:21.090
Okay, there's the output.
87

87

00:03:23.830  -->  00:03:24.810
So, from here we've learned that
88

88

00:03:24.810  -->  00:03:26.310
we can use instance variables
89

89

00:03:26.310  -->  00:03:28.670
in statements in the initializer blocks,
90

90

00:03:28.670  -->  00:03:29.970
the assignment declarations
91

91

00:03:29.970  -->  00:03:31.820
of instance variables themselves,
92

92

00:03:31.820  -->  00:03:33.170
as well as the constructor.
93

93

00:03:34.410  -->  00:03:35.360
But with that said,
94

94

00:03:35.360  -->  00:03:36.860
this statement's not always true
95

95

00:03:36.860  -->  00:03:38.900
for all instant variable references
96

96

00:03:38.900  -->  00:03:40.900
in all initializer blocks.
97

97

00:03:40.900  -->  00:03:42.780
And I'll take a closer look at that
98

98

00:03:42.780  -->  00:03:45.730
in the Out of Ordinary video coming up in the next video.
99

99

00:03:45.730  -->  00:03:47.300
For now, that's important that you know that
100

100

00:03:47.300  -->  00:03:49.667
the order that the statements are executed in,
101

101

00:03:49.667  -->  00:03:51.480
though we've been through that now,
102

102

00:03:51.480  -->  00:03:54.210
and the exam may well quiz you about this order.
103

103

00:03:54.210  -->  00:03:56.500
Remember that variable and initializer statements
104

104

00:03:56.500  -->  00:03:59.570
are always executed in the same order that they're declared
105

105

00:03:59.570  -->  00:04:02.030
but before any statements in a constructor
106

106

00:04:02.030  -->  00:04:03.690
with the exception of the super() statement,
107

107

00:04:03.690  -->  00:04:05.700
implied or explicit.
108

108

00:04:05.700  -->  00:04:06.820
Now before we finish this video,
109

109

00:04:06.820  -->  00:04:08.890
I want to just give you an example
110

110

00:04:08.890  -->  00:04:09.950
of a static initializer.
111

111

00:04:09.950  -->  00:04:10.783
Just review that.
112

112

00:04:10.783  -->  00:04:13.313
So, let's go ahead and create a new class here.
113

113

00:04:14.220  -->  00:04:15.602
We'll call it StaticInitializer.
114

114

00:04:15.602  -->  00:04:17.685
(typing)
115

115

00:04:22.267  -->  00:04:23.390
And again, this code's very similar
116

116

00:04:23.390  -->  00:04:25.190
to what we've been working on in this video.
117

117

00:04:25.190  -->  00:04:26.200
We've got a class here,
118

118

00:04:26.200  -->  00:04:28.280
which has a static method called clarifyOrder,
119

119

00:04:28.280  -->  00:04:30.270
you can see the call to let there,
120

120

00:04:30.270  -->  00:04:31.687
and there's the actual method itself.
121

121

00:04:31.687  -->  00:04:32.810
And this takes a string
122

122

00:04:32.810  -->  00:04:34.810
and prints it to the consol after incrementing
123

123

00:04:34.810  -->  00:04:37.340
the static variable statement order.
124

124

00:04:37.340  -->  00:04:38.330
The statement order, you can see,
125

125

00:04:38.330  -->  00:04:40.100
is defined on line 9.
126

126

00:04:40.100  -->  00:04:42.640
This class also has two static variable declarations
127

127

00:04:42.640  -->  00:04:44.420
and two static initializer blocks.
128

128

00:04:44.420  -->  00:04:46.570
And you can see the static variable declarations
129

129

00:04:46.570  -->  00:04:48.520
there on lines ten and 17.
130

130

00:04:48.520  -->  00:04:50.121
Now the static initializer main method
131

131

00:04:50.121  -->  00:04:51.675
down the bottom of the screen there,
132

132

00:04:51.675  -->  00:04:53.554
prints out the static variable statementOrder
133

133

00:04:53.554  -->  00:04:56.260
on staticInitExample class.
134

134

00:04:56.260  -->  00:04:57.730
By doing that, that causes the class
135

135

00:04:57.730  -->  00:04:59.660
to be loaded and initialised.
136

136

00:04:59.660  -->  00:05:00.793
So, let's run this.
137

137

00:05:03.590  -->  00:05:05.240
I see the output down the bottom.
138

138

00:05:07.876  -->  00:05:10.300
Your output is similar to initializer block examples,
139

139

00:05:10.300  -->  00:05:12.450
such that they're executed in the order
140

140

00:05:12.450  -->  00:05:13.580
that they're declared.
141

141

00:05:13.580  -->  00:05:15.350
These statements though only get executed
142

142

00:05:15.350  -->  00:05:17.690
when the class itself is initialised.
143

143

00:05:17.690  -->  00:05:18.760
Now we'll talk a lot more about
144

144

00:05:18.760  -->  00:05:20.140
the static elements of a class
145

145

00:05:20.140  -->  00:05:22.857
in a future video in this course.
146

146

00:05:22.857  -->  00:05:24.050
So, in the last few videos,
147

147

00:05:24.050  -->  00:05:26.600
we discussed the structure of declaring a class,
148

148

00:05:26.600  -->  00:05:28.200
I deferred on topics on fields
149

149

00:05:28.200  -->  00:05:30.140
and constructors for future videos,
150

150

00:05:30.140  -->  00:05:31.610
but I also showed you some examples
151

151

00:05:31.610  -->  00:05:33.110
of both initializer blocks
152

152

00:05:33.110  -->  00:05:35.190
and static initializer blocks.
153

153

00:05:35.190  -->  00:05:36.300
So, in the next video coming up,
154

154

00:05:36.300  -->  00:05:38.090
we're going to take a look at more nuances
155

155

00:05:38.090  -->  00:05:40.500
and oddities about class declarations
156

156

00:05:40.500  -->  00:05:41.860
and initializer blocks.
157

157

00:05:41.860  -->  00:05:43.160
See you in the next video.
