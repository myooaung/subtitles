WEBVTT
1
1

00:00:05.320  -->  00:00:06.153 line:15% 
<v ->In the last video,</v>
2

2

00:00:06.153  -->  00:00:08.550 line:15% 
we searched to compare data in arrays and lists
3

3

00:00:08.550  -->  00:00:10.600 line:15% 
but we didn't change the contents.
4

4

00:00:10.600  -->  00:00:12.530 line:15% 
In this video, we'll talk about editing data
5

5

00:00:12.530  -->  00:00:14.680 line:15% 
in an array structure or list.
6

6

00:00:14.680  -->  00:00:16.490 line:15% 
First we'll take a look at the methods provided
7

7

00:00:16.490  -->  00:00:18.860
by the Arrays utility class.
8

8

00:00:18.860  -->  00:00:21.400
So we're gonna create a new class in our arrays project.
9

9

00:00:21.400  -->  00:00:23.803
I'm gonna call us on arrays data manipulation.
10

10

00:00:26.156  -->  00:00:28.239
(typing)
11

11

00:00:36.030  -->  00:00:38.003
Alight, so this code I've of pasted here.
12

12

00:00:39.420  -->  00:00:41.480
So this code goes through most of the Arrays methods
13

13

00:00:41.480  -->  00:00:43.270
that alter data in an array,
14

14

00:00:43.270  -->  00:00:46.780
fill, setAll, sort and parallelPrefix.
15

15

00:00:46.780  -->  00:00:49.520
Some of the methods make use of lambda expressions,
16

16

00:00:49.520  -->  00:00:51.500
which we'll discuss in a later section,
17

17

00:00:51.500  -->  00:00:53.070
but show those methods now.
18

18

00:00:53.070  -->  00:00:54.270
So that you can see that there's a great deal
19

19

00:00:54.270  -->  00:00:56.803
of functionality supported now with these methods.
20

20

00:00:58.400  -->  00:01:00.801
Now, I'm not gonna demonstrate parallelSetAll
21

21

00:01:00.801  -->  00:01:01.890
or parallelSort.
22

22

00:01:01.890  -->  00:01:05.130
These methods are operationally the same as setAll or sort,
23

23

00:01:05.130  -->  00:01:06.850
But the parallel versions can be used
24

24

00:01:06.850  -->  00:01:08.270
for large sets of data,
25

25

00:01:08.270  -->  00:01:10.570
allowing multiple threads to do the work.
26

26

00:01:10.570  -->  00:01:12.070
And since there is no corresponding method
27

27

00:01:12.070  -->  00:01:13.490
to parallelPrefix,
28

28

00:01:13.490  -->  00:01:15.210
I will show that to here.
29

29

00:01:15.210  -->  00:01:17.530
This method executes a binary operation.
30

30

00:01:17.530  -->  00:01:18.550
And you'll see that in the (murmur)
31

31

00:01:18.550  -->  00:01:19.383
we'll go through shortly.
32

32

00:01:19.383  -->  00:01:21.140
Adding the elements together in parallel,
33

33

00:01:21.140  -->  00:01:22.330
storing the collection in memory,
34

34

00:01:22.330  -->  00:01:23.700
until the results are all computed it in
35

35

00:01:23.700  -->  00:01:26.623
and then replaces the Array with the new values.
36

36

00:01:28.180  -->  00:01:30.130
So you can see in terms of the codes that I've pasted here,
37

37

00:01:30.130  -->  00:01:32.270
we're creating an Array of integers,
38

38

00:01:32.270  -->  00:01:34.570
them using Arrays dot field first on line 22
39

39

00:01:34.570  -->  00:01:37.030
to fill the array with a single value.
40

40

00:01:37.030  -->  00:01:39.570
Line 26 you can also fill up partial range
41

41

00:01:39.570  -->  00:01:42.600
with Arrays dot fill in the overloaded method call
42

42

00:01:42.600  -->  00:01:44.293
I'm that time line 28.
43

43

00:01:45.240  -->  00:01:49.500
May then up line 32 setall (murmur) call it on line 34,
44

44

00:01:49.500  -->  00:01:50.850
it uses lambda expressions
45

45

00:01:50.850  -->  00:01:53.410
and we're demonstrating sample here as I mentioned.
46

46

00:01:53.410  -->  00:01:55.180
This was introduced in Java right,
47

47

00:01:55.180  -->  00:01:56.013
but we'll be talking more
48

48

00:01:56.013  -->  00:01:59.070
about lambda expressions later in the course.
49

49

00:01:59.070  -->  00:02:02.070
You can sort non primitive type arrays in reverse.
50

50

00:02:02.070  -->  00:02:04.103
I'm doing that as an example on line 39.
51

51

00:02:05.140  -->  00:02:07.890
And finally, the dot pararellprefix, as I mentioned,
52

52

00:02:07.890  -->  00:02:10.210
is on line 45.
53

53

00:02:10.210  -->  00:02:12.010
So let's actually run this code now.
54

54

00:02:15.448  -->  00:02:16.850
And you can see the output
55

55

00:02:16.850  -->  00:02:18.550
at the bottom of the screen there.
56

56

00:02:19.930  -->  00:02:21.048
So you can see
57

57

00:02:21.048  -->  00:02:22.020
that you can do practically anything
58

58

00:02:22.020  -->  00:02:23.620
you might want to do with an array,
59

59

00:02:23.620  -->  00:02:26.150
using the methods on the Arrays class,
60

60

00:02:26.150  -->  00:02:29.550
with the exception of changing the size of the array itself.
61

61

00:02:29.550  -->  00:02:31.920
I wanna talk to you about manipulating the array,
62

62

00:02:31.920  -->  00:02:35.340
using a fixed-size list backed by the specified array.
63

63

00:02:35.340  -->  00:02:38.930
and that's by calling arrays dot aslist the method.
64

64

00:02:38.930  -->  00:02:40.870
This technique allows you to use some methods
65

65

00:02:40.870  -->  00:02:41.703
of the List interface
66

66

00:02:41.703  -->  00:02:43.690
which don't change the size of the array.
67

67

00:02:44.550  -->  00:02:47.110
So to do that, we're gonna create another class here.
68

68

00:02:47.110  -->  00:02:49.773
We'll call this one is List data manipulation.
69

69

00:02:51.368  -->  00:02:53.451
(typing)
70

70

00:02:59.760  -->  00:03:01.330
Alright, this code demonstrates the methods
71

71

00:03:01.330  -->  00:03:02.850
on the list interface that can be applied
72

72

00:03:02.850  -->  00:03:05.210
to arrays through this mechanism.
73

73

00:03:05.210  -->  00:03:07.800
So setting up our test array first,
74

74

00:03:07.800  -->  00:03:10.740
There is on your list reference, some variable to the result
75

75

00:03:10.740  -->  00:03:14.670
of colouring arrays as this method set on line 22.
76

76

00:03:14.670  -->  00:03:17.280
Now that we have this list backed by the array,
77

77

00:03:17.280  -->  00:03:18.960
we can then like I want to use get,
78

78

00:03:18.960  -->  00:03:21.940
as you can see me using on line 26 as an example there,
79

79

00:03:21.940  -->  00:03:24.280
which is a get method to get an a specific element
80

80

00:03:24.280  -->  00:03:25.770
from the array.
81

81

00:03:25.770  -->  00:03:27.590
And scrolling down down a bit further,
82

82

00:03:27.590  -->  00:03:30.420
those also using sort line 30 there to sort the array
83

83

00:03:30.420  -->  00:03:32.050
via the list interface,
84

84

00:03:32.050  -->  00:03:34.660
using set, to set the value of a specific array element,
85

85

00:03:34.660  -->  00:03:36.743
using the set method on line 38.
86

86

00:03:38.020  -->  00:03:40.230
Also using replace all as you can see there
87

87

00:03:40.230  -->  00:03:43.280
to change all values in the array values interface,
88

88

00:03:43.280  -->  00:03:45.490
examples on line 47.
89

89

00:03:45.490  -->  00:03:47.540
And you can see that after each operation,
90

90

00:03:47.540  -->  00:03:48.380
I'm printing at the values
91

91

00:03:48.380  -->  00:03:50.810
which will be will have a look at shortly when you run it.
92

92

00:03:50.810  -->  00:03:53.270
Now keep in mind with the get and the set,
93

93

00:03:53.270  -->  00:03:55.730
which you can see on lines 26 and 38.
94

94

00:03:55.730  -->  00:03:57.700
They accept Zero Based index numbers
95

95

00:03:57.700  -->  00:03:58.560
to access the elements.
96

96

00:03:58.560  -->  00:04:00.370
Probably something you're aware of clearly,
97

97

00:04:00.370  -->  00:04:02.210
and you can see that in the case of line 26,
98

98

00:04:02.210  -->  00:04:04.483
I'm passing zero, same for line 38.
99

99

00:04:05.380  -->  00:04:06.530
Let's try running this.
100

100

00:04:10.297  -->  00:04:11.570
And you can see the output there
101

101

00:04:11.570  -->  00:04:13.860
after the various data manipulation
102

102

00:04:13.860  -->  00:04:15.310
that we've done in this four.
103

103

00:04:18.620  -->  00:04:23.280
Alright. So since we're talking about this creation here,
104

104

00:04:23.280  -->  00:04:24.850
I wanna talk about two other methods,
105

105

00:04:24.850  -->  00:04:26.950
listed on the data transformation category,
106

106

00:04:26.950  -->  00:04:28.650
in a title which will pop up here.
107

107

00:04:29.960  -->  00:04:32.410
There are list dot of and list dot copy of.
108

108

00:04:32.410  -->  00:04:34.120
The thing to note about both of these methods
109

109

00:04:34.120  -->  00:04:36.380
is that by return an immutable list,
110

110

00:04:36.380  -->  00:04:38.223
meaning you cannot change the list.
111

111

00:04:39.300  -->  00:04:40.133
So let's actually have a look
112

112

00:04:40.133  -->  00:04:41.340
at using both of those methods.
113

113

00:04:41.340  -->  00:04:44.453
List dot off and list dot copy of for some example code.
114

114

00:04:45.910  -->  00:04:47.560
So paste as always at the bottom.
115

115

00:04:48.580  -->  00:04:49.560
Okay, so there's the code
116

116

00:04:49.560  -->  00:04:51.300
or just got back up to the top there.
117

117

00:04:51.300  -->  00:04:54.140
Okay, stay on line 61 is what I posted in there.
118

118

00:04:54.140  -->  00:04:56.000
So I could see that the list dot of method
119

119

00:04:56.000  -->  00:04:57.270
can take an array and make it a list.
120

120

00:04:57.270  -->  00:04:59.210
We're doing that on line 64.
121

121

00:04:59.210  -->  00:05:01.020
And the list dot copyof method takes a list
122

122

00:05:01.020  -->  00:05:03.620
and makes another list which we're doing on line 67.
123

123

00:05:04.570  -->  00:05:05.543
If we run the code.
124

124

00:05:07.722  -->  00:05:08.555
Unless you can see
125

125

00:05:08.555  -->  00:05:12.340
that changing the underlying array now has no effect
126

126

00:05:12.340  -->  00:05:15.480
on the copies in the list just created.
127

127

00:05:15.480  -->  00:05:18.370
That's effective what we've done here to test this out.
128

128

00:05:18.370  -->  00:05:19.470
And taking this a step further,
129

129

00:05:19.470  -->  00:05:21.810
let's actually try making a change to the new lists
130

130

00:05:21.810  -->  00:05:24.503
that we've created. I'll paste in some more code.
131

131

00:05:27.969  -->  00:05:29.330
Alright. So I think the try and catch
132

132

00:05:29.330  -->  00:05:30.960
is going to give away what's gonna happen here,
133

133

00:05:30.960  -->  00:05:33.860
if we do try and change the list. Let's actually run this.
134

134

00:05:35.390  -->  00:05:37.390
And sure enough, we get some exceptions.
135

135

00:05:39.270  -->  00:05:40.913
The code compiles as you saw with the list object
136

136

00:05:40.913  -->  00:05:43.140
that's returned by both the list dot of
137

137

00:05:43.140  -->  00:05:44.630
and the list dot coppyof method
138

138

00:05:44.630  -->  00:05:46.420
is immutable, as I mentioned, or effectively
139

139

00:05:46.420  -->  00:05:48.970
are immutable copies of the underlying data.
140

140

00:05:48.970  -->  00:05:50.420
You can't make changes to them.
141

141

00:05:50.420  -->  00:05:54.010
You get a runtime exception decided here if that happens.
142

142

00:05:54.010  -->  00:05:56.020
Alright. So that covers the data manipulation methods.
143

143

00:05:56.020  -->  00:05:57.320
So I'm gonna end the video here.
144

144

00:05:57.320  -->  00:05:58.153 line:15% 
In the next one,
145

145

00:05:58.153  -->  00:06:00.610 line:15% 
I wanna walk through the data transformation methods,
146

146

00:06:00.610  -->  00:06:01.890 line:15% 
that we discussed previously.
147

147

00:06:01.890  -->  00:06:03.590 line:15% 
So I'll see you in the next video.
