WEBVTT
1
1

00:00:05.290  -->  00:00:08.840
<v ->So let's talk about local variable type inference.</v>
2

2

00:00:08.840  -->  00:00:11.770
So local variable type inference, LVTI for short,
3

3

00:00:11.770  -->  00:00:14.210
is also known as var declaration.
4

4

00:00:14.210  -->  00:00:16.560
Now this is a Java 10 feature introduced
5

5

00:00:16.560  -->  00:00:20.220
to reduce the verbosity of code in some situations.
6

6

00:00:20.220  -->  00:00:22.970
This feature is only available for local variables
7

7

00:00:22.970  -->  00:00:24.850
inside a method body.
8

8

00:00:24.850  -->  00:00:26.680
So what we're going to do to demonstrate this,
9

9

00:00:26.680  -->  00:00:29.660
let's see where we can use, LVTI,
10

10

00:00:29.660  -->  00:00:32.870
I've created a new project LVTI, which I've got onscreen,
11

11

00:00:32.870  -->  00:00:35.150
I'm gonna create a new class, and it's going to be
12

12

00:00:35.150  -->  00:00:37.320
quite a long class name.
13

13

00:00:37.320  -->  00:00:39.120
And I'm going to paste that name in there now.
14

14

00:00:39.120  -->  00:00:40.410
And you can see that I've created a class
15

15

00:00:40.410  -->  00:00:42.410
called a class with a very long name,
16

16

00:00:42.410  -->  00:00:44.953
package com.wordycompanyname.alongpackage,
17

17

00:00:46.574  -->  00:00:49.030
you'll see why we're doing that shortly.
18

18

00:00:49.030  -->  00:00:51.343
So whereas I'm going to paste in some code,
19

19

00:00:52.690  -->  00:00:54.920
very simple class as you can see there.
20

20

00:00:54.920  -->  00:00:56.820
Basically a class with a single variable
21

21

00:00:56.820  -->  00:00:58.930
and getter setter, to string method as well,
22

22

00:00:58.930  -->  00:01:00.210
pretty straightforward.
23

23

00:01:00.210  -->  00:01:02.710
Basically your plain-old java objective (mumbles).
24

24

00:01:04.205  -->  00:01:05.240
Now we wanna play around with this
25

25

00:01:05.240  -->  00:01:07.790
and instantiate it, so let's create a second class,
26

26

00:01:09.140  -->  00:01:11.220
this one outside of the package, I won't have the package,
27

27

00:01:11.220  -->  00:01:12.670
we'll call this one vartest.
28

28

00:01:17.446  -->  00:01:19.770
And you can see I've got some code to instantiate
29

29

00:01:19.770  -->  00:01:22.210
our class with a very long name,
30

30

00:01:22.210  -->  00:01:24.470
and we're using a fully qualified class name there.
31

31

00:01:24.470  -->  00:01:26.570
So we just run this to make sure it works.
32

32

00:01:28.340  -->  00:01:32.710
Clearly, this is pretty messy and pretty hard to read,
33

33

00:01:32.710  -->  00:01:34.540
pretty ugly code in other words.
34

34

00:01:34.540  -->  00:01:36.930
All right now, we can make it somewhat better
35

35

00:01:36.930  -->  00:01:39.990
by using an import statement, so let's do that.
36

36

00:01:39.990  -->  00:01:43.030
Come back here, can add an import there,
37

37

00:01:43.030  -->  00:01:45.730
and I must have my settings turned back on.
38

38

00:01:45.730  -->  00:01:47.840
I updated IntelliJ, this is a trick actually
39

39

00:01:47.840  -->  00:01:50.690
to keep in mind if this does happen sometimes,
40

40

00:01:50.690  -->  00:01:53.490
that you find your auto input features won't get updated
41

41

00:01:54.480  -->  00:01:56.050
when there's an update, like in my case it did
42

42

00:01:56.050  -->  00:01:57.960
and that's why when I tried to copy and paste
43

43

00:01:57.960  -->  00:01:59.220
the import segment it disappeared,
44

44

00:01:59.220  -->  00:02:01.080
'cause it was trying to optimise things,
45

45

00:02:01.080  -->  00:02:02.410
that's what I wanted.
46

46

00:02:02.410  -->  00:02:04.510
All right, so we can make this a little bit less messy,
47

47

00:02:04.510  -->  00:02:07.200
as I mentioned, by using an import statement.
48

48

00:02:07.200  -->  00:02:08.720
So, you can basically remove the package
49

49

00:02:08.720  -->  00:02:12.653
from the declaration and we can do that twice.
50

50

00:02:15.772  -->  00:02:18.860
All right, so that's better with an import statement.
51

51

00:02:18.860  -->  00:02:20.700
We've now removed the fully qualified class name
52

52

00:02:20.700  -->  00:02:21.877
on both sides of the declaration
53

53

00:02:21.877  -->  00:02:25.340
and initialization parts of that statement.
54

54

00:02:25.340  -->  00:02:27.690
All right, so Java 10 introduced the LVTI,
55

55

00:02:27.690  -->  00:02:30.490
local variable type inference, and that allows us
56

56

00:02:30.490  -->  00:02:31.990
to change the way we write our codes.
57

57

00:02:31.990  -->  00:02:35.087
What we can do instead is we can remove the type here
58

58

00:02:35.087  -->  00:02:40.020
and just put var and put that all on the same line.
59

59

00:02:42.274  -->  00:02:45.380
And that's now a lot more readable on line 11.
60

60

00:02:45.380  -->  00:02:47.260
All right, so that's local variable type inference
61

61

00:02:47.260  -->  00:02:50.240
but let's have a discussion on what specifically it is,
62

62

00:02:50.240  -->  00:02:52.170
but also what it's not.
63

63

00:02:52.170  -->  00:02:55.050
All right so firstly, local variable type inference
64

64

00:02:55.050  -->  00:02:58.340
is a shortcut to reduce the verbosity of code
65

65

00:02:58.340  -->  00:02:59.710
in some situations,
66

66

00:02:59.710  -->  00:03:02.370
but what it isn't though, is a data type.
67

67

00:03:02.370  -->  00:03:05.640
The data type must be able to be inferred by the compiler
68

68

00:03:05.640  -->  00:03:06.643
when using it, and we'll talk about that
69

69

00:03:06.643  -->  00:03:08.770
when we go back to the code shortly,
70

70

00:03:08.770  -->  00:03:10.920
but also it's not a keyword, and that means
71

71

00:03:10.920  -->  00:03:14.030
that you can actually use the text var as an identifier
72

72

00:03:14.030  -->  00:03:16.890
and we'll see an example of that in the code later on.
73

73

00:03:16.890  -->  00:03:19.650
So again, importantly, var is not a type,
74

74

00:03:19.650  -->  00:03:22.250
it's just short hand designed to reduce
75

75

00:03:22.250  -->  00:03:24.360
the verbosity of code when you're typing.
76

76

00:03:24.360  -->  00:03:27.750
It can only be used inside methods for local variables
77

77

00:03:27.750  -->  00:03:29.870
and the type of variable on the right-hand side
78

78

00:03:29.870  -->  00:03:32.511
of the equation must be inferable by the compiler
79

79

00:03:32.511  -->  00:03:34.193
to avoid compilation errors.
80

80

00:03:35.380  -->  00:03:36.940
All right, so back with our code here.
81

81

00:03:36.940  -->  00:03:39.840
So the reason that we can use var on line 11
82

82

00:03:39.840  -->  00:03:42.460
is it can infer a class with a very long name,
83

83

00:03:42.460  -->  00:03:44.770
it can infer that type because of the import statement
84

84

00:03:44.770  -->  00:03:46.900
on line seven, and an equal,
85

85

00:03:46.900  -->  00:03:49.090
if you used a fully qualified class name
86

86

00:03:49.090  -->  00:03:52.280
on the initialization side of the statement on line 11,
87

87

00:03:52.280  -->  00:03:53.970
that would also work.
88

88

00:03:53.970  -->  00:03:56.710
All right, so let's now add some code to this class
89

89

00:03:56.710  -->  00:03:59.850
and we're gonna examine some valid var declarations,
90

90

00:03:59.850  -->  00:04:02.190
other than what we've seen so far.
91

91

00:04:02.190  -->  00:04:03.390
So, let's paste that in.
92

92

00:04:05.030  -->  00:04:08.200
All right, so starting with the first one on line 17,
93

93

00:04:08.200  -->  00:04:12.120
var i = one, i is inferred to be an (mumbles) scenario
94

94

00:04:12.120  -->  00:04:15.120
since it's assigned a literal int the value of one.
95

95

00:04:15.120  -->  00:04:17.342
Line 20, an array can be assigned
96

96

00:04:17.342  -->  00:04:20.320
to a local variable type inference variable,
97

97

00:04:20.320  -->  00:04:22.850
in this case the code is quite valid on line 20.
98

98

00:04:22.850  -->  00:04:26.420
Line 23, it's valid to assign a method return value
99

99

00:04:26.420  -->  00:04:29.331
to a local variable type inference variable,
100

100

00:04:29.331  -->  00:04:31.450
we've got that example again on line 23,
101

101

00:04:31.450  -->  00:04:35.095
and also, line 26, it's okay to assign a null object
102

102

00:04:35.095  -->  00:04:38.220
to a local variable type inference variable
103

103

00:04:38.220  -->  00:04:39.670
but not the literal null.
104

104

00:04:39.670  -->  00:04:42.540
So this is okay, we've got an object defined on line 26,
105

105

00:04:42.540  -->  00:04:44.870
we're assigning that to a variable called var
106

106

00:04:44.870  -->  00:04:46.100
and I mentioned that earlier in the video
107

107

00:04:46.100  -->  00:04:48.130
that var is not a keyword and therefore we can
108

108

00:04:48.130  -->  00:04:50.840
quite happily use that when defining a variable
109

109

00:04:50.840  -->  00:04:52.830
and that's quite valid on line 27,
110

110

00:04:52.830  -->  00:04:54.596
so what we can do, we can do it that way
111

111

00:04:54.596  -->  00:04:56.770
because again, remembering the rule is
112

112

00:04:56.770  -->  00:04:58.840
that the type of variable on the right-hand side
113

113

00:04:58.840  -->  00:05:01.690
of the equation has to be inferable by the compiler,
114

114

00:05:01.690  -->  00:05:03.690
so we're doing that on line 27
115

115

00:05:03.690  -->  00:05:05.090
but we changed that to null,
116

116

00:05:07.704  -->  00:05:10.080
that's now not valid because we can infer a type
117

117

00:05:10.080  -->  00:05:12.020
based on the null, literal.
118

118

00:05:12.020  -->  00:05:13.440
I'll take that back and we'll change it back
119

119

00:05:13.440  -->  00:05:14.910
to null object again.
120

120

00:05:14.910  -->  00:05:16.803
All right, so that's some valid uses
121

121

00:05:16.803  -->  00:05:19.100
of local variable type inference.
122

122

00:05:19.100  -->  00:05:22.483
I wanna paste in some invalid scenarios for you now.
123

123

00:05:24.095  -->  00:05:27.670
So, firstly the examples on line 32 and 35,
124

124

00:05:27.670  -->  00:05:31.500
you can't use a var declaration in a compound statement.
125

125

00:05:31.500  -->  00:05:33.510
The first one there on line 32,
126

126

00:05:33.510  -->  00:05:36.260
we can have a look and move our cursor up there,
127

127

00:05:36.260  -->  00:05:38.830
it confirms that var's not allowed in a compound declaration
128

128

00:05:38.830  -->  00:05:41.890
and on line 35, you can't use the var declaration again.
129

129

00:05:41.890  -->  00:05:43.720
This is a slightly different scenario,
130

130

00:05:43.720  -->  00:05:45.000
ultimately the same thing.
131

131

00:05:45.000  -->  00:05:47.600
We've got var on the variable data initializer
132

132

00:05:47.600  -->  00:05:49.190
which is also the error on line 38,
133

133

00:05:49.190  -->  00:05:51.690
I just wanted to show you a different scenario there.
134

134

00:05:51.690  -->  00:05:54.600
Then again, we have to initialise a var variable,
135

135

00:05:54.600  -->  00:05:56.680
that's the error that we got on line 38,
136

136

00:05:56.680  -->  00:05:58.630
which we incidentally also had up here.
137

137

00:05:59.800  -->  00:06:01.460
All right, the other thing which I showed you earlier
138

138

00:06:01.460  -->  00:06:03.687
is you can assign null to the var variable,
139

139

00:06:03.687  -->  00:06:05.830
the type can be inferred in that scenario
140

140

00:06:05.830  -->  00:06:07.443
and that's why we get an error there.
141

141

00:06:09.460  -->  00:06:11.130
You can't use an array initializer
142

142

00:06:11.130  -->  00:06:13.037
in a var declaration initialization,
143

143

00:06:13.037  -->  00:06:16.280
we've got an example of that on line 44,
144

144

00:06:16.280  -->  00:06:18.470
but also you can't have an array of var as well,
145

145

00:06:18.470  -->  00:06:19.653
on line 47.
146

146

00:06:20.610  -->  00:06:22.180
So, each of these statements, as you can see,
147

147

00:06:22.180  -->  00:06:24.110
fails to compile, review them closely,
148

148

00:06:24.110  -->  00:06:26.610
you may be asked questions about that in the exam
149

149

00:06:26.610  -->  00:06:27.443
and what I'm gonna do now is
150

150

00:06:27.443  -->  00:06:29.650
I'm just gonna remove those, just comment those out
151

151

00:06:29.650  -->  00:06:31.753
so the code's there if you wanna download it.
152

152

00:06:35.054  -->  00:06:37.360
All right, so moving on, let's create another class.
153

153

00:06:37.360  -->  00:06:39.543
And we'll call this one var donts, okay.
154

154

00:06:44.900  -->  00:06:46.350
I'm gonna paste in some code.
155

155

00:06:48.290  -->  00:06:49.490
All right, so far so good.
156

156

00:06:49.490  -->  00:06:51.880
But let's actually add a class variable
157

157

00:06:51.880  -->  00:06:53.410
and an instance variable
158

158

00:06:53.410  -->  00:06:55.620
using local variable type inference,
159

159

00:06:55.620  -->  00:06:58.123
we're gonna add that obviously after the class declaration.
160

160

00:06:59.460  -->  00:07:01.800
And you can see there that the static class variables
161

161

00:07:01.800  -->  00:07:03.200
cannot be declared with var.
162

162

00:07:04.470  -->  00:07:06.380
It's got no idea what we're talking about
163

163

00:07:06.380  -->  00:07:08.070
and same for our class instance variable,
164

164

00:07:08.070  -->  00:07:11.200
we can't be declared with var, it's only local variables
165

165

00:07:11.200  -->  00:07:14.370
within methods that we can use this feature for.
166

166

00:07:14.370  -->  00:07:16.837
Basically LVTI is not supported in these cases,
167

167

00:07:16.837  -->  00:07:19.130
they can't be declared using var,
168

168

00:07:19.130  -->  00:07:20.883
all right, so I'll comment those out.
169

169

00:07:22.840  -->  00:07:25.590
All right, let's add a couple of methods to this class.
170

170

00:07:27.820  -->  00:07:29.950
And again, you can see that we've got errors here.
171

171

00:07:29.950  -->  00:07:32.500
The code fails to compile, method parameters
172

172

00:07:32.500  -->  00:07:34.880
and method return types cannot use a
173

173

00:07:34.880  -->  00:07:37.950
local variable type inference or var,
174

174

00:07:37.950  -->  00:07:41.027
LVTI is only supported in local variable declarations
175

175

00:07:41.027  -->  00:07:44.350
where the type can be inferred, as I've mentioned.
176

176

00:07:44.350  -->  00:07:47.000
All right, so I'm going to comment those methods out.
177

177

00:07:49.720  -->  00:07:50.850
Now the other thing to keep in mind
178

178

00:07:50.850  -->  00:07:55.030
is that Java 11 introduced LVTI for lambda expressions.
179

179

00:07:55.030  -->  00:07:56.390
Now we're gonna review that when we get to
180

180

00:07:56.390  -->  00:07:59.203
lambda expressions later in this course.
181

181

00:08:00.260  -->  00:08:01.320
All right, so let's end the video here
182

182

00:08:01.320  -->  00:08:03.130
and in the next one, I wanna look at some
183

183

00:08:03.130  -->  00:08:06.680
out of ordinary concepts for local variable type inference.
184

184

00:08:06.680  -->  00:08:08.313
So, see you in the next video.
