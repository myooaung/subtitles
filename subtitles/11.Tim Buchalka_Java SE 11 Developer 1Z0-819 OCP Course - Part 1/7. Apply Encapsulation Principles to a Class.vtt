WEBVTT
1
1

00:00:05.219  -->  00:00:06.052
<v ->All right,</v>
2

2

00:00:06.052  -->  00:00:07.190
so let's talk about applying encapsulation
3

3

00:00:07.190  -->  00:00:08.870
principles to a class.
4

4

00:00:08.870  -->  00:00:10.880
I've stated in the introduction to this section
5

5

00:00:10.880  -->  00:00:13.560
that encapsulation means information hiding.
6

6

00:00:13.560  -->  00:00:15.100
And we've learned that Java provides
7

7

00:00:15.100  -->  00:00:17.260
different ways to hide class members.
8

8

00:00:17.260  -->  00:00:19.177
We can hide a member from every consumer
9

9

00:00:19.177  -->  00:00:20.270
private,
10

10

00:00:20.270  -->  00:00:22.020
from consumers in other packages,
11

11

00:00:22.020  -->  00:00:23.440
no modifier package.
12

12

00:00:23.440  -->  00:00:25.760
Or we can hide members from other packages
13

13

00:00:25.760  -->  00:00:27.330
but still provide access to classes
14

14

00:00:27.330  -->  00:00:28.410
in the inheritance tree,
15

15

00:00:28.410  -->  00:00:29.600
protected.
16

16

00:00:29.600  -->  00:00:31.350
I've stated that there are two objectives
17

17

00:00:31.350  -->  00:00:32.910
when hiding information.
18

18

00:00:32.910  -->  00:00:34.640
The first objective is to protect
19

19

00:00:34.640  -->  00:00:38.280
the data of a class from unintended or unwelcome changes.
20

20

00:00:38.280  -->  00:00:40.640
The second objective is to protect upstream
21

21

00:00:40.640  -->  00:00:43.900
consumers of the class from unintended consequences
22

22

00:00:43.900  -->  00:00:45.590
causing a minimum of disruption
23

23

00:00:45.590  -->  00:00:48.090
should be the class need to change.
24

24

00:00:48.090  -->  00:00:49.000
So with this in mind,
25

25

00:00:49.000  -->  00:00:51.240
all class and instance variables should be
26

26

00:00:51.240  -->  00:00:53.100
declared private with access to the data
27

27

00:00:53.100  -->  00:00:55.140
strictly controlled through methods which
28

28

00:00:55.140  -->  00:00:58.460
we can examine and verify the requests being made.
29

29

00:00:58.460  -->  00:01:00.190
This is the convention used by a special
30

30

00:01:00.190  -->  00:01:01.250
time of class called a bean.
31

31

00:01:01.250  -->  00:01:03.200
Which I'm sure you probably know about.
32

32

00:01:04.330  -->  00:01:06.070
So a bean is a Java class which follows
33

33

00:01:06.070  -->  00:01:08.000
certain programming conventions
34

34

00:01:08.000  -->  00:01:10.270
that follow the JavaBeans guidelines,
35

35

00:01:10.270  -->  00:01:11.960
allowing applications and tools to figure
36

36

00:01:11.960  -->  00:01:13.510
out the bean's properties,
37

37

00:01:13.510  -->  00:01:14.343
methods,
38

38

00:01:14.343  -->  00:01:15.176
and events.
39

39

00:01:15.176  -->  00:01:16.530
For the certification exam,
40

40

00:01:16.530  -->  00:01:18.210
the convention you need to know
41

41

00:01:18.210  -->  00:01:21.070
is the one to define a property in a bean class,
42

42

00:01:21.070  -->  00:01:23.330
supplying public getter and setter methods.
43

43

00:01:23.330  -->  00:01:24.810
A getter method.
44

44

00:01:24.810  -->  00:01:26.770
Also known as an accessor method
45

45

00:01:26.770  -->  00:01:28.570
starts with the prefix get followed
46

46

00:01:28.570  -->  00:01:31.120
by a property name with camel case and returns
47

47

00:01:31.120  -->  00:01:32.656
an element of the property's type.
48

48

00:01:32.656  -->  00:01:35.500
This retrieves the property's data from the bean.
49

49

00:01:35.500  -->  00:01:38.576
getFirstName for example will get the
50

50

00:01:38.576  -->  00:01:40.075
value of firstName from the object.
51

51

00:01:40.075  -->  00:01:41.730
And that would be defined as get in lower case,
52

52

00:01:41.730  -->  00:01:43.690
first capitalised with an F,
53

53

00:01:43.690  -->  00:01:45.883
and name capitalised with an N.
54

54

00:01:47.780  -->  00:01:50.230
A setter method starts with the prefix set
55

55

00:01:50.230  -->  00:01:51.460
followed by the property name with
56

56

00:01:51.460  -->  00:01:52.707
camel case and takes as its argument,
57

57

00:01:52.707  -->  00:01:55.850
a value that the property can be set to.
58

58

00:01:55.850  -->  00:01:57.315
The method generally doesn't return a value.
59

59

00:01:57.315  -->  00:01:58.990
So set,
60

60

00:01:58.990  -->  00:02:01.070
first name would be an example there,
61

61

00:02:01.070  -->  00:02:02.270
set in lower case,
62

62

00:02:02.270  -->  00:02:05.350
and the words after first letter capitalised.
63

63

00:02:05.350  -->  00:02:07.450
A special case for boolean properties allows
64

64

00:02:07.450  -->  00:02:08.880
the accessor method to be defined
65

65

00:02:08.880  -->  00:02:11.320
using prefix is instead of get.
66

66

00:02:11.320  -->  00:02:14.060
For example the acccessor for boolean properties
67

67

00:02:14.060  -->  00:02:17.500
first for arguments sake may well be isFirst.
68

68

00:02:17.500  -->  00:02:19.360
Now a property of this is usually an attribute
69

69

00:02:19.360  -->  00:02:20.670
on the class with the same name
70

70

00:02:20.670  -->  00:02:22.010
in the setter getter methods,
71

71

00:02:22.010  -->  00:02:23.790
but this isn't a requirement.
72

72

00:02:23.790  -->  00:02:25.340
a property could be any attribute or
73

73

00:02:25.340  -->  00:02:27.280
a code block of some sort.
74

74

00:02:27.280  -->  00:02:29.633
Most IDA's supply some code generation for you
75

75

00:02:29.633  -->  00:02:32.050
and intelleJ is simply no exception.
76

76

00:02:32.050  -->  00:02:33.760
You probably are familiar with it but
77

77

00:02:33.760  -->  00:02:35.760
we will review it quickly here.
78

78

00:02:35.760  -->  00:02:38.260
So I'm going to clear the class and encapsulation project.
79

79

00:02:38.260  -->  00:02:39.910
We will call this one first bean.
80

80

00:02:45.384  -->  00:02:47.320
There is some sample code.
81

81

00:02:47.320  -->  00:02:49.570
And what I can do here is I can do an alt insert
82

82

00:02:49.570  -->  00:02:52.190
to be in the right area of the class file
83

83

00:02:52.190  -->  00:02:53.410
of this to actually cure.
84

84

00:02:53.410  -->  00:02:55.400
But we can actually come up here,
85

85

00:02:55.400  -->  00:02:56.250
code,
86

86

00:02:56.250  -->  00:02:57.640
generate,
87

87

00:02:57.640  -->  00:02:58.473
instructor,
88

88

00:02:59.620  -->  00:03:01.941
you're presented with a list of options,
89

89

00:03:01.941  -->  00:03:03.690
and you're going to select both options here.
90

90

00:03:03.690  -->  00:03:04.603
Okay I'm selecting both options
91

91

00:03:04.603  -->  00:03:06.400
here and clicking on OK.
92

92

00:03:06.400  -->  00:03:08.550
We've now got a constructor sequence there.
93

93

00:03:10.080  -->  00:03:12.723
And I can do the same thing for the getters and setters.
94

94

00:03:16.490  -->  00:03:17.850
Select both,
95

95

00:03:17.850  -->  00:03:18.683
click okay,
96

96

00:03:18.683  -->  00:03:19.713
and there's now lbean.
97

97

00:03:20.930  -->  00:03:25.930
One more insert method here, it should say boolean first,
98

98

00:03:28.730  -->  00:03:31.220
let's go ahead and also generate
99

99

00:03:32.970  -->  00:03:34.190
getter and setter,
100

100

00:03:35.210  -->  00:03:36.160
and there we go.
101

101

00:03:36.160  -->  00:03:37.470
Now obviously I could have fixed the order up,
102

102

00:03:37.470  -->  00:03:38.757
and I'll just move the name with
103

103

00:03:38.757  -->  00:03:40.257
int to the bottom of the file.
104

104

00:03:43.700  -->  00:03:45.030
But obviously you can see that it does matter
105

105

00:03:45.030  -->  00:03:46.400
where you curse this position.
106

106

00:03:46.400  -->  00:03:47.440
But anyway that's intelliJ.
107

107

00:03:47.440  -->  00:03:49.560
I'm sure that today you'll find that other
108

108

00:03:49.560  -->  00:03:51.870
ida's you clicked et cetera do a very similar thing,
109

109

00:03:51.870  -->  00:03:53.650
well actually know that they do.
110

110

00:03:53.650  -->  00:03:54.483
All right.
111

111

00:03:54.483  -->  00:03:56.600
So there is our basic Java bean.
112

112

00:03:56.600  -->  00:03:58.170
So far so good.
113

113

00:03:58.170  -->  00:04:00.620
Now if we add some code to the class,
114

114

00:04:00.620  -->  00:04:02.423
the code we're going to add is up here.
115

115

00:04:03.689  -->  00:04:04.522
So there's the code,
116

116

00:04:04.522  -->  00:04:06.150
I'll just paste it in.
117

117

00:04:06.150  -->  00:04:07.660
Now what do you think having done that?
118

118

00:04:07.660  -->  00:04:10.040
The bean inspector will see its a property of its class.
119

119

00:04:10.040  -->  00:04:11.940
Would it be my own variable,
120

120

00:04:11.940  -->  00:04:13.810
or field alias?
121

121

00:04:13.810  -->  00:04:17.180
Well the bean property is actually field alias,
122

122

00:04:17.180  -->  00:04:18.380
so what that demonstrates is
123

123

00:04:18.380  -->  00:04:20.990
regardless of what we name our internal field,
124

124

00:04:20.990  -->  00:04:22.743
we can give it a public alias.
125

125

00:04:23.760  -->  00:04:25.320
So the Java bean is one way to
126

126

00:04:25.320  -->  00:04:27.340
implement encapsulation in Java,
127

127

00:04:27.340  -->  00:04:28.173
and a standard,
128

128

00:04:28.173  -->  00:04:29.780
but it is not the only way.
129

129

00:04:29.780  -->  00:04:31.357
So look for questions on the exam that
130

130

00:04:31.357  -->  00:04:33.610
expect you to know that encapsulation,
131

131

00:04:33.610  -->  00:04:34.443
one,
132

132

00:04:34.443  -->  00:04:37.250
combines data and behaviour into a single class,
133

133

00:04:37.250  -->  00:04:38.083
two,
134

134

00:04:38.083  -->  00:04:41.260
hides and protects attributed by making them private,
135

135

00:04:41.260  -->  00:04:42.093
three,
136

136

00:04:42.093  -->  00:04:43.830
provides a mechanism that sets attribute
137

137

00:04:43.830  -->  00:04:44.860
or attributes.
138

138

00:04:44.860  -->  00:04:47.380
Now this mechanism could be a public constructor,
139

139

00:04:47.380  -->  00:04:50.668
a public setter method or some other mechanism,
140

140

00:04:50.668  -->  00:04:52.490
b if the attribute is a variable reference,
141

141

00:04:52.490  -->  00:04:55.010
you should remember that the underlying object
142

142

00:04:55.010  -->  00:04:56.240
passed of the reference,
143

143

00:04:56.240  -->  00:04:57.073
setting it,
144

144

00:04:57.073  -->  00:04:58.080
could change it.
145

145

00:04:58.080  -->  00:04:59.760
Making a copy of the object referenced
146

146

00:04:59.760  -->  00:05:02.660
is a way to ensure the data doesn't change.
147

147

00:05:02.660  -->  00:05:03.493
Moving on,
148

148

00:05:03.493  -->  00:05:04.507
four,
149

149

00:05:04.507  -->  00:05:06.280
provides a mechanism for getting data from the attribute.
150

150

00:05:06.280  -->  00:05:07.930
This mechanism could be a standard
151

151

00:05:07.930  -->  00:05:10.540
getter or a public method with any kind of name
152

152

00:05:10.540  -->  00:05:11.920
that returns the data.
153

153

00:05:11.920  -->  00:05:12.753
B,
154

154

00:05:12.753  -->  00:05:14.690
watch out for methods that return variable references
155

155

00:05:14.690  -->  00:05:17.120
directly remembering that the underlying
156

156

00:05:17.120  -->  00:05:19.960
object could be ordered by the calling code.
157

157

00:05:19.960  -->  00:05:21.290
All right so moving on we can
158

158

00:05:21.290  -->  00:05:22.630
explore some of these additional
159

159

00:05:22.630  -->  00:05:25.343
encapsulation techniques in the upcoming video.
