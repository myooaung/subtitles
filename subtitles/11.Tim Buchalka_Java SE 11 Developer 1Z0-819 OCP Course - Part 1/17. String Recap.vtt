WEBVTT
1
1

00:00:04.476  -->  00:00:07.900
<v Instructor>All right, so let's look at a String Recap.</v>
2

2

00:00:07.900  -->  00:00:12.120
A string in Java is an object of class java.lang.String,
3

3

00:00:12.120  -->  00:00:15.350
and represents an array or series of characters,
4

4

00:00:15.350  -->  00:00:18.750
but it's not an array of the primitive data type char.
5

5

00:00:18.750  -->  00:00:21.010
When a string is created without a constructor,
6

6

00:00:21.010  -->  00:00:22.820
aka not using new,
7

7

00:00:22.820  -->  00:00:25.160
the string's stored in a special area of the heap
8

8

00:00:25.160  -->  00:00:26.730
called the string pool,
9

9

00:00:26.730  -->  00:00:29.880
whose purpose is to maintain a set of unique strings,
10

10

00:00:29.880  -->  00:00:31.790
and this is called interning.
11

11

00:00:31.790  -->  00:00:34.840
You can manually intern using the intern method
12

12

00:00:34.840  -->  00:00:37.400
on a string object, and we'll see that in this video.
13

13

00:00:37.400  -->  00:00:40.960
When you assign two variables to the same string literal,
14

14

00:00:40.960  -->  00:00:42.980
those strings are considered equal,
15

15

00:00:42.980  -->  00:00:47.000
and the comparator == evaluates to true.
16

16

00:00:47.000  -->  00:00:48.560
So let's explore that a little bit.
17

17

00:00:48.560  -->  00:00:51.080
Create a new project in IntelliJ, called Strings,
18

18

00:00:51.080  -->  00:00:52.620
which I've done, as you can see.
19

19

00:00:52.620  -->  00:00:55.260
We're gonna create a new class called Recap.
20

20

00:00:55.260  -->  00:00:56.860
Then I'm gonna paste in my code.
21

21

00:01:01.970  -->  00:01:04.470
Okay, so there's the code, and we'll run the code.
22

22

00:01:07.560  -->  00:01:08.760
You can see that it demonstrated that
23

23

00:01:08.760  -->  00:01:10.580
assigning the same string literal
24

24

00:01:10.580  -->  00:01:12.670
to two different string variables,
25

25

00:01:12.670  -->  00:01:15.970
is assigning both variables the same reference
26

26

00:01:15.970  -->  00:01:17.290
to the same string literal.
27

27

00:01:17.290  -->  00:01:20.803
Consequently you can see there that == has returned true.
28

28

00:01:21.740  -->  00:01:24.210
So that's without using the new keyword,
29

29

00:01:24.210  -->  00:01:25.820
but if we actually change that,
30

30

00:01:25.820  -->  00:01:28.090
and create a string object using constructors,
31

31

00:01:28.090  -->  00:01:29.810
the opposite is true.
32

32

00:01:29.810  -->  00:01:33.120
To demonstrate that I'm going to add another method here.
33

33

00:01:33.120  -->  00:01:34.470
I'm going to paste that in.
34

34

00:01:37.150  -->  00:01:39.686
We've got a method there called StringConstructors,
35

35

00:01:39.686  -->  00:01:43.070
and you can see that I'm using new on lines 26 and 27
36

36

00:01:43.070  -->  00:01:44.760
when creating the strings.
37

37

00:01:44.760  -->  00:01:46.900
What I'll need to do to get that to work
38

38

00:01:46.900  -->  00:01:49.523
is update the main method to call that method.
39

39

00:01:50.390  -->  00:01:53.017
That was StringConstructors.
40

40

00:01:53.017  -->  00:01:54.067
So if I run that now.
41

41

00:01:56.760  -->  00:01:59.420
So you can see s1 and s2 are constructed String objects
42

42

00:01:59.420  -->  00:02:02.530
assigned to String variables, that's now equal to false,
43

43

00:02:02.530  -->  00:02:05.410
because we've used new, as opposed to what we did previously
44

44

00:02:05.410  -->  00:02:08.820
when we just assigned a string on lines 17 and 19.
45

45

00:02:08.820  -->  00:02:12.000
So with that said, if you used a string intern method,
46

46

00:02:12.000  -->  00:02:14.860
you're again assigning strings to the string pool,
47

47

00:02:14.860  -->  00:02:16.930
and the references will become equal again.
48

48

00:02:16.930  -->  00:02:18.358
So let me demonstrate that.
49

49

00:02:18.358  -->  00:02:19.863
We're going to create another method.
50

50

00:02:23.952  -->  00:02:25.707
StringConstructorsInterned as you can see,
51

51

00:02:25.707  -->  00:02:27.520
and you can see we're specifically calling
52

52

00:02:27.520  -->  00:02:30.620
the intern methods on line 40, and 44.
53

53

00:02:30.620  -->  00:02:32.993
So let's put a call to that method.
54

54

00:02:34.886  -->  00:02:37.093
StringConstructorsInterned, we'll run that.
55

55

00:02:40.100  -->  00:02:42.480
And you can see we've got s1 and s2,
56

56

00:02:42.480  -->  00:02:43.910
being interned String objects,
57

57

00:02:43.910  -->  00:02:46.030
are now returning the value of true
58

58

00:02:46.030  -->  00:02:48.393
when we do a comparison of them on line 50.
59

59

00:02:49.810  -->  00:02:52.440
I wanna remind you that Strings are immutable,
60

60

00:02:52.440  -->  00:02:55.000
meaning they cannot be changed in Java.
61

61

00:02:55.000  -->  00:02:56.930
Once you create a String with a string literal,
62

62

00:02:56.930  -->  00:03:00.030
for example, "Hello", the string remains on the string pool
63

63

00:03:00.030  -->  00:03:01.650
with a single reference to it.
64

64

00:03:01.650  -->  00:03:04.170
And if you do string concatenation for example,
65

65

00:03:04.170  -->  00:03:06.650
you're not actually changing the current String.
66

66

00:03:06.650  -->  00:03:09.510
Rather, you're creating a new String object
67

67

00:03:09.510  -->  00:03:12.230
with the concatenated Strings added to it.
68

68

00:03:12.230  -->  00:03:13.290
So it'd make more sense for me
69

69

00:03:13.290  -->  00:03:14.590
to show you an example of that,
70

70

00:03:14.590  -->  00:03:15.790
so let me create a new class.
71

71

00:03:15.790  -->  00:03:17.707
We'll call this ImmutableString.
72

72

00:03:21.524  -->  00:03:23.024
Paste in the code.
73

73

00:03:26.080  -->  00:03:28.310
And that, what I've set there, that on line 13,
74

74

00:03:28.310  -->  00:03:29.940
we're creating Hello on the string pool,
75

75

00:03:29.940  -->  00:03:32.240
or a string with the contents of Hello on the string pool.
76

76

00:03:32.240  -->  00:03:35.030
s1's getting a reference to it, no surprises there.
77

77

00:03:35.030  -->  00:03:39.010
But note that on line 22, s1 = s1 + " World".
78

78

00:03:39.010  -->  00:03:41.660
It doesn't change the value of Hello on the string pool.
79

79

00:03:41.660  -->  00:03:43.710
Rather, it creates a new string,
80

80

00:03:43.710  -->  00:03:45.920
that has a value of Hello and World,
81

81

00:03:45.920  -->  00:03:49.390
and passes the reference to this newly created string to s1.
82

82

00:03:49.390  -->  00:03:51.190
And Hello World is not added to the string pool
83

83

00:03:51.190  -->  00:03:52.560
unless Intern's called.
84

84

00:03:52.560  -->  00:03:53.600
So that's the second example,
85

85

00:03:53.600  -->  00:03:55.210
but down the bottom is the interesting one.
86

86

00:03:55.210  -->  00:03:57.870
Resetting s1, I'm showing another example using
87

87

00:03:57.870  -->  00:03:59.150
string's concat method,
88

88

00:03:59.150  -->  00:04:00.770
which we'll discuss actually later,
89

89

00:04:00.770  -->  00:04:05.600
but s1 = "Hello", s1.concat(" World"),
90

90

00:04:05.600  -->  00:04:07.170
what do you expect the output to be,
91

91

00:04:07.170  -->  00:04:09.420
when we actually execute line 31?
92

92

00:04:09.420  -->  00:04:10.253
Let's run it.
93

93

00:04:13.000  -->  00:04:15.530
And, did that last result surprise you?
94

94

00:04:15.530  -->  00:04:18.210
Did you think s1 would in fact be Hello World?
95

95

00:04:18.210  -->  00:04:20.960
Confirming that s1 is a reference to Hello,
96

96

00:04:20.960  -->  00:04:22.440
and you haven't changed it.
97

97

00:04:22.440  -->  00:04:26.280
Though you called the concat method, it still remains Hello.
98

98

00:04:26.280  -->  00:04:27.920
The string concat method will return
99

99

00:04:27.920  -->  00:04:30.540
a pointer to the concatenated string,
100

100

00:04:30.540  -->  00:04:34.520
which is itself a new immutable string, but the code above
101

101

00:04:34.520  -->  00:04:36.830
didn't assign the result of a concat method
102

102

00:04:36.830  -->  00:04:38.290
to any variable.
103

103

00:04:38.290  -->  00:04:40.120
So in other words, we put s1.concat,
104

104

00:04:40.120  -->  00:04:41.990
there's no pointing at the result,
105

105

00:04:41.990  -->  00:04:44.460
so s1.concat to another variable.
106

106

00:04:44.460  -->  00:04:46.200
Now if we had have assigned the result to s1,
107

107

00:04:46.200  -->  00:04:47.660
then it would have been Hello World,
108

108

00:04:47.660  -->  00:04:48.500
because it would have actually had
109

109

00:04:48.500  -->  00:04:50.800
the new reference to the newly created string.
110

110

00:04:51.790  -->  00:04:53.020
So in summary,
111

111

00:04:53.020  -->  00:04:55.610
literal strings have their own special area
112

112

00:04:55.610  -->  00:04:58.090
of the heap memory called the String Pool.
113

113

00:04:58.090  -->  00:05:00.060
Any assignment of a literal will refer to
114

114

00:05:00.060  -->  00:05:02.330
the same string in this pool.
115

115

00:05:02.330  -->  00:05:04.600
You could force a string to be added to the pool
116

116

00:05:04.600  -->  00:05:07.620
by calling the intern method on the String object.
117

117

00:05:07.620  -->  00:05:09.040
Strings are immutable,
118

118

00:05:09.040  -->  00:05:11.390
any methods that seem to operate on a string
119

119

00:05:11.390  -->  00:05:14.810
are actually creating new strings, and these new strings
120

120

00:05:14.810  -->  00:05:18.190
need to be assigned to the same variable, self-assigment,
121

121

00:05:18.190  -->  00:05:20.490
or assigned to a new variable which represents
122

122

00:05:20.490  -->  00:05:22.620
a reference to that newly created string.
123

123

00:05:22.620  -->  00:05:25.090
So this has just been a quick recap on strings.
124

124

00:05:25.090  -->  00:05:26.880
Let's continue on now to the next video,
125

125

00:05:26.880  -->  00:05:30.330
which discusses more details about creating a string object.
126

126

00:05:30.330  -->  00:05:31.630
See you in the next video.
