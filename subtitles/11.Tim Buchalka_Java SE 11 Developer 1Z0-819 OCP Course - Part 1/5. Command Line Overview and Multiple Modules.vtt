WEBVTT
1
1

00:00:05.140  -->  00:00:08.030
<v Tim>Before continuing on creating a second module,</v>
2

2

00:00:08.030  -->  00:00:09.410
I think it's worthwhile, we're now
3

3

00:00:09.410  -->  00:00:10.780
spending a bit of time here to pause
4

4

00:00:10.780  -->  00:00:11.970
and summarise some of the tools
5

5

00:00:11.970  -->  00:00:14.110
and options available for modules.
6

6

00:00:14.110  -->  00:00:16.680
Now these slides, as I mentioned a few times now,
7

7

00:00:16.680  -->  00:00:17.990
are available for downloading.
8

8

00:00:17.990  -->  00:00:20.770
Watch the bonus video, the very last video in the course,
9

9

00:00:20.770  -->  00:00:23.510
if you want to download these slides,
10

10

00:00:23.510  -->  00:00:24.770
because I'm not gonna go through them
11

11

00:00:24.770  -->  00:00:26.430
in extended detail there,
12

12

00:00:26.430  -->  00:00:28.350
we'll just cover them very quickly.
13

13

00:00:28.350  -->  00:00:30.370
But the thing is, getting familiar with these will,
14

14

00:00:30.370  -->  00:00:32.210
hopefully, cover any exam question
15

15

00:00:32.210  -->  00:00:33.930
you'll see on tool support for modules,
16

16

00:00:33.930  -->  00:00:36.040
so it's definitely worth your time,
17

17

00:00:36.040  -->  00:00:38.336
spending some time understanding this.
18

18

00:00:38.336  -->  00:00:40.400
All right, so looking firstly, we're going to go through
19

19

00:00:40.400  -->  00:00:44.630
the various options for Java first, in the Java executable.
20

20

00:00:44.630  -->  00:00:47.250
We've got list modules, and you can see two examples
21

21

00:00:47.250  -->  00:00:48.860
of using that there for list modules,
22

22

00:00:48.860  -->  00:00:52.680
using the list modules argument and the dash p as well.
23

23

00:00:52.680  -->  00:00:54.220
Noting that, on the right-hand side,
24

24

00:00:54.220  -->  00:00:55.810
if you don't specify module path
25

25

00:00:55.810  -->  00:00:57.760
you get a listing of the modular JDK.
26

26

00:00:57.760  -->  00:00:59.487
And specifying directories in the module path
27

27

00:00:59.487  -->  00:01:02.300
you'll include visible modules in those directories,
28

28

00:01:02.300  -->  00:01:04.760
either exploded directories or jar files.
29

29

00:01:04.760  -->  00:01:06.960
Dash p or dash dash module dash path,
30

30

00:01:06.960  -->  00:01:09.710
which is the same thing, two examples there
31

31

00:01:09.710  -->  00:01:13.400
and obviously, as the argument says,
32

32

00:01:13.400  -->  00:01:15.330
you need to find the module path
33

33

00:01:15.330  -->  00:01:16.840
and you need to specify the module path
34

34

00:01:16.840  -->  00:01:19.040
when executing a module jar.
35

35

00:01:19.040  -->  00:01:22.100
Next we've got module dash m or dash dash module.
36

36

00:01:22.100  -->  00:01:23.770
Two examples there and you need to specify
37

37

00:01:23.770  -->  00:01:26.563
the module name also when executing a module jar.
38

38

00:01:28.840  -->  00:01:31.410
We've got the dash dash dry dash run.
39

39

00:01:31.410  -->  00:01:34.480
Now that option loads the main class but doesn't run it.
40

40

00:01:34.480  -->  00:01:36.930
So this is used for testing module dependencies
41

41

00:01:36.930  -->  00:01:38.920
and making sure that they're satisfied.
42

42

00:01:38.920  -->  00:01:40.620
A successful result is no output
43

43

00:01:40.620  -->  00:01:42.220
and we'll actually be doing that
44

44

00:01:42.220  -->  00:01:43.440
in this video or the next one.
45

45

00:01:43.440  -->  00:01:45.440
So you'll be able to see how that works.
46

46

00:01:45.440  -->  00:01:48.170
The describe module command, dash d
47

47

00:01:48.170  -->  00:01:50.150
or dash dash describe dash module.
48

48

00:01:50.150  -->  00:01:51.720
This set gives you summary information
49

49

00:01:51.720  -->  00:01:53.240
about a module including its path,
50

50

00:01:53.240  -->  00:01:56.313
its dependencies, and its packages and resources.
51

51

00:01:58.880  -->  00:02:01.740
Now moving on to javac now, we've got
52

52

00:02:01.740  -->  00:02:04.120
the dash m or dash dash module.
53

53

00:02:04.120  -->  00:02:06.080
When you are compiling using dash dash module
54

54

00:02:06.080  -->  00:02:07.970
or dash m, you have to also specify
55

55

00:02:07.970  -->  00:02:10.590
dash dash module dash source path
56

56

00:02:10.590  -->  00:02:12.097
and you can see that in the examples.
57

57

00:02:12.097  -->  00:02:14.860
Now we've got module path here or dash p
58

58

00:02:14.860  -->  00:02:16.730
and you use that with javac when your code
59

59

00:02:16.730  -->  00:02:19.320
has a dependency on existing modules.
60

60

00:02:19.320  -->  00:02:22.690
The jar executable dash d or dash dash describe
61

61

00:02:22.690  -->  00:02:24.820
dash module, it's similar to the java one
62

62

00:02:24.820  -->  00:02:26.620
but includes the main-class as well.
63

63

00:02:28.590  -->  00:02:30.603
Jdeps which you saw in the previous video,
64

64

00:02:30.603  -->  00:02:32.650
with no options other than the jar,
65

65

00:02:32.650  -->  00:02:33.730
gives you the summary information
66

66

00:02:33.730  -->  00:02:34.960
about the jar file including module
67

67

00:02:34.960  -->  00:02:37.630
dependencies if this is a modular jar.
68

68

00:02:37.630  -->  00:02:38.893
And jdeps, we've got some other options here
69

69

00:02:38.893  -->  00:02:40.960
I won't go through all of those there now
70

70

00:02:40.960  -->  00:02:42.960
but you can see there's various options there
71

71

00:02:42.960  -->  00:02:46.223
for listing dependencies, a reduced list of dependencies.
72

72

00:02:48.300  -->  00:02:50.270
Printing module dependencies and also a check
73

73

00:02:50.270  -->  00:02:51.980
which can be interesting and useful
74

74

00:02:51.980  -->  00:02:54.530
to print the module descriptor etc.
75

75

00:02:54.530  -->  00:02:56.330
All right, enough about that but again,
76

76

00:02:56.330  -->  00:02:58.000
download the slides if you need to.
77

77

00:02:58.000  -->  00:02:59.770
Let's go swing back now to IntelliJ
78

78

00:02:59.770  -->  00:03:02.393
and what I want to do is create a second module.
79

79

00:03:03.900  -->  00:03:05.390
Let's go ahead and do that using
80

80

00:03:05.390  -->  00:03:07.880
the same thing that we did, same method.
81

81

00:03:07.880  -->  00:03:10.043
Clicking on the project name at the top.
82

82

00:03:10.043  -->  00:03:13.000
Right click new module, leaving the
83

83

00:03:13.000  -->  00:03:14.590
defaults on that screen and for this one,
84

84

00:03:14.590  -->  00:03:16.413
we're gonna call this one my second module.
85

85

00:03:20.910  -->  00:03:22.570
Then we need to come down to my second module,
86

86

00:03:22.570  -->  00:03:25.640
expand that, right click the source folder
87

87

00:03:25.640  -->  00:03:28.540
inside that folder, specify Java Class.
88

88

00:03:28.540  -->  00:03:32.313
We're gonna call this one mod two dot goodbye world.
89

89

00:03:34.580  -->  00:03:36.502
And paste in the code like so.
90

90

00:03:36.502  -->  00:03:37.510
All right so now that we've done that,
91

91

00:03:37.510  -->  00:03:39.550
we've got two modules as you can see there now.
92

92

00:03:39.550  -->  00:03:40.900
What we're gonna do is swing over
93

93

00:03:40.900  -->  00:03:43.040
to the hello world code and we're gonna
94

94

00:03:43.040  -->  00:03:45.330
add a code to goodbye world dot main.
95

95

00:03:45.330  -->  00:03:46.410
And what I'm gonna do just to save
96

96

00:03:46.410  -->  00:03:48.950
a bit of time, is just paste in some code
97

97

00:03:48.950  -->  00:03:53.210
and just overwrite that.
98

98

00:03:53.210  -->  00:03:56.720
Then that, at the moment the compiler is not satisfied.
99

99

00:03:56.720  -->  00:03:58.803
It says it's an unused import.
100

100

00:04:00.360  -->  00:04:01.950
But notice when I click over here to import
101

101

00:04:01.950  -->  00:04:05.440
I can add dependency on module MySecondModule
102

102

00:04:05.440  -->  00:04:07.310
and depending on how you've set things up,
103

103

00:04:07.310  -->  00:04:08.620
you might find you get a different message,
104

104

00:04:08.620  -->  00:04:10.560
you might get something, words to the effect
105

105

00:04:10.560  -->  00:04:13.210
that mod two is declared in an unnamed module.
106

106

00:04:13.210  -->  00:04:14.850
The point though is at the moment,
107

107

00:04:14.850  -->  00:04:16.970
before I actually click on this add dependency,
108

108

00:04:16.970  -->  00:04:18.937
what we haven't done for MySecondModule
109

109

00:04:18.937  -->  00:04:22.290
is add that all important module dash info file.
110

110

00:04:22.290  -->  00:04:23.123
So what I'm gonna do is do that first.
111

111

00:04:23.123  -->  00:04:24.920
Can we go back to the source folder
112

112

00:04:24.920  -->  00:04:28.240
for the MySecondModule, right click, New.
113

113

00:04:28.240  -->  00:04:30.450
I'm gonna select module dash info dot java again
114

114

00:04:30.450  -->  00:04:33.870
to create that file that's needed for all modules.
115

115

00:04:33.870  -->  00:04:36.990
Then I'm gonna go back to the hello world again,
116

116

00:04:36.990  -->  00:04:40.080
HelloWorld.java and now I'm gonna click on
117

117

00:04:40.080  -->  00:04:42.203
add dependency on module MySecondModule.
118

118

00:04:43.831  -->  00:04:46.240
If we go back to have a look at what's happened there,
119

119

00:04:46.240  -->  00:04:49.750
specifically, if we have a look at in our first class
120

120

00:04:49.750  -->  00:04:52.390
our module info dot java, nothing in there yet.
121

121

00:04:52.390  -->  00:04:54.600
We go back to our second one, closed down the out file,
122

122

00:04:54.600  -->  00:04:56.363
remember, to save a bit of space.
123

123

00:04:58.210  -->  00:04:59.630
At the moment they're empty but if we go back to
124

124

00:04:59.630  -->  00:05:02.130
hello world there now, notice we've got
125

125

00:05:02.130  -->  00:05:03.610
a different message there, package mod2
126

126

00:05:03.610  -->  00:05:06.270
is declared in module, MySecondModule,
127

127

00:05:06.270  -->  00:05:10.070
which does not export to module, MyFirstModule.
128

128

00:05:10.070  -->  00:05:11.280
So what we're gonna do is add the option here
129

129

00:05:11.280  -->  00:05:14.913
to add exports mod2 directive to module info dot java.
130

130

00:05:16.267  -->  00:05:17.710
And we've still got an error here.
131

131

00:05:17.710  -->  00:05:20.260
We'll go back and have a look at that error again there now.
132

132

00:05:20.260  -->  00:05:21.860
Package mod2 is declared in module MySecondModule
133

133

00:05:21.860  -->  00:05:25.360
but module MyFirstModule doesn't read it.
134

134

00:05:25.360  -->  00:05:26.990
And again we're gonna have a quick look at these files.
135

135

00:05:26.990  -->  00:05:30.800
MySecondModule has now got an exports mod2 in it
136

136

00:05:30.800  -->  00:05:32.630
but my first module, module info dot java
137

137

00:05:32.630  -->  00:05:35.230
is still empty so we go back here,
138

138

00:05:35.230  -->  00:05:37.675
look at that error again, we're gonna add
139

139

00:05:37.675  -->  00:05:40.010
the requires MySecondModule directive
140

140

00:05:40.010  -->  00:05:42.510
to module dash info dot java and now
141

141

00:05:42.510  -->  00:05:44.280
finally the errors have disappeared
142

142

00:05:44.280  -->  00:05:47.520
and go back to the module dash info dot java for
143

143

00:05:47.520  -->  00:05:51.130
MyFirstModule, it's still got a requires MySecondModule
144

144

00:05:51.130  -->  00:05:53.470
and our module dash info dot java file
145

145

00:05:53.470  -->  00:05:56.770
for MySecondModule has got the exports mod2.
146

146

00:05:56.770  -->  00:05:59.310
So basically at this point, going back to hello world,
147

147

00:05:59.310  -->  00:06:01.470
IntelliJ has figured out the dependencies
148

148

00:06:01.470  -->  00:06:03.380
and adjusted our module dash info
149

149

00:06:03.380  -->  00:06:06.190
java files accordingly, specifying which package
150

150

00:06:06.190  -->  00:06:08.680
needs to be exported in MySecondModule
151

151

00:06:08.680  -->  00:06:10.520
and which module is required by
152

152

00:06:10.520  -->  00:06:12.570
MyFirstModule and you saw those files.
153

153

00:06:12.570  -->  00:06:14.260
So if we go ahead now, rebuild,
154

154

00:06:14.260  -->  00:06:16.606
the project, which we'll do here.
155

155

00:06:16.606  -->  00:06:18.660
We'll have a look in that out folder again now,
156

156

00:06:18.660  -->  00:06:20.510
notice that we've actually got two folders there now,
157

157

00:06:20.510  -->  00:06:22.640
MyFirstModule and MySecondModule
158

158

00:06:22.640  -->  00:06:25.548
and they've both got the appropriate subfolders.
159

159

00:06:25.548  -->  00:06:27.200
They've got a package name and also,
160

160

00:06:27.200  -->  00:06:29.663
have the module info class file for each.
161

161

00:06:30.560  -->  00:06:32.793
All right, so let's open a terminal window again.
162

162

00:06:34.600  -->  00:06:37.337
So we're gonna re-jar the jar files we did before.
163

163

00:06:37.337  -->  00:06:39.110
You can see that MyFirstModule's still
164

164

00:06:39.110  -->  00:06:41.160
showing there in the project bank.
165

165

00:06:41.160  -->  00:06:43.053
The command for that jar space,
166

166

00:06:44.520  -->  00:06:47.763
dash dash create, dash dash file,
167

167

00:06:49.241  -->  00:06:53.810
MyFirstModule dot jar, specify our main class,
168

168

00:06:53.810  -->  00:06:57.330
dash dash main dash class, still the same as last time
169

169

00:06:57.330  -->  00:07:00.430
modular dot HelloWorld then we need
170

170

00:07:00.430  -->  00:07:04.460
to specify the output, dash C, out,
171

171

00:07:04.460  -->  00:07:07.330
backslash production, backslash MyFirstModule
172

172

00:07:10.206  -->  00:07:15.206
backslash and a dot, so that's that file created.
173

173

00:07:15.610  -->  00:07:19.150
Next thing we need to do is jar the second module
174

174

00:07:19.150  -->  00:07:21.040
'cause that's, obviously that's new in this video.
175

175

00:07:21.040  -->  00:07:23.740
So let's type the command, jar space
176

176

00:07:23.740  -->  00:07:27.150
dash dash create dash dash file again.
177

177

00:07:27.150  -->  00:07:28.850
This time we're creating it in the
178

178

00:07:28.850  -->  00:07:31.230
module testing dot out folder so that's out
179

179

00:07:31.230  -->  00:07:35.520
backslash MySecondModule dot jar
180

180

00:07:36.510  -->  00:07:40.820
and dash C out backslash production backslash
181

181

00:07:40.820  -->  00:07:42.830
we're specifying the path which in this case
182

182

00:07:42.830  -->  00:07:44.873
is obviously gonna be MySecondModule,
183

183

00:07:45.840  -->  00:07:48.980
I can just do a tab there, backslash and dot.
184

184

00:07:48.980  -->  00:07:50.137
So I get two things to that.
185

185

00:07:50.137  -->  00:07:52.410
And I'll just press enter there to create that.
186

186

00:07:52.410  -->  00:07:55.380
The jar is created in the module testing slash out folder
187

187

00:07:55.380  -->  00:07:56.930
and we want the modules to be in different
188

188

00:07:56.930  -->  00:07:58.510
directories for demonstration purposes
189

189

00:07:58.510  -->  00:08:00.050
in case you're wondering but also in that,
190

190

00:08:00.050  -->  00:08:02.267
we didn't create a main class in this jar file.
191

191

00:08:02.267  -->  00:08:05.380
And if you go back to that folder now in IntelliJ,
192

192

00:08:05.380  -->  00:08:08.030
you can see that MySecondModule dot jar has appeared.
193

193

00:08:08.910  -->  00:08:10.570
All right so let's now use that dry option
194

194

00:08:10.570  -->  00:08:11.940
that we saw in the slides to actually
195

195

00:08:11.940  -->  00:08:15.030
test dependencies before you attempt to run the code.
196

196

00:08:15.030  -->  00:08:18.940
So we can do that with java space dash dash dry
197

197

00:08:18.940  -->  00:08:23.940
dash run space dash p dot and dash m MyFirstModule.
198

198

00:08:28.547  -->  00:08:30.290
All right so you can see we've got a problem here
199

199

00:08:30.290  -->  00:08:32.000
and the problem here relates to
200

200

00:08:32.000  -->  00:08:33.780
finding MySecondModule, you can see
201

201

00:08:33.780  -->  00:08:35.770
module MySecondModule is not found.
202

202

00:08:35.770  -->  00:08:37.340
And obviously we changed the module path
203

203

00:08:37.340  -->  00:08:39.740
to put MySecondModule elsewhere, so what we need
204

204

00:08:39.740  -->  00:08:42.729
to do is basically indicate where that is.
205

205

00:08:42.729  -->  00:08:45.960
So I'm gonna do a java space dash dash dry
206

206

00:08:45.960  -->  00:08:50.740
dash run dash p dot then semicolon out this time
207

207

00:08:50.740  -->  00:08:53.970
to include the out directory relative to module testing
208

208

00:08:53.970  -->  00:08:55.840
which of course is where the MySecondModule
209

209

00:08:55.840  -->  00:08:57.980
dot jar file has been created.
210

210

00:08:57.980  -->  00:08:59.923
Then we do a dash m MyFirstModule.
211

211

00:09:03.440  -->  00:09:05.710
No news is good news, that means that
212

212

00:09:05.710  -->  00:09:07.300
there's no errors on the dry run
213

213

00:09:07.300  -->  00:09:09.670
so let's actually try a proper run now.
214

214

00:09:09.670  -->  00:09:14.670
Java space dash p dot semicolon out dash m MyFirstModule.
215

215

00:09:18.960  -->  00:09:20.580
And success, we can see the output
216

216

00:09:20.580  -->  00:09:22.200
is showing Hello new modular world
217

217

00:09:22.200  -->  00:09:24.730
and the new code from our goodbye world class,
218

218

00:09:24.730  -->  00:09:26.640
And that's a wrap - goodbye.
219

219

00:09:26.640  -->  00:09:27.990
Now you could've run this from IntelliJ
220

220

00:09:27.990  -->  00:09:29.450
but the exam does expect you to know
221

221

00:09:29.450  -->  00:09:31.420
how to run modules with dependencies
222

222

00:09:31.420  -->  00:09:33.320
on other modules in other parts
223

223

00:09:33.320  -->  00:09:35.150
so you now know how to do that.
224

224

00:09:35.150  -->  00:09:36.640
Now let's have a quick look at
225

225

00:09:36.640  -->  00:09:37.990
jdeps before we finish the video.
226

226

00:09:37.990  -->  00:09:42.290
I'm gonna type jdeps MyFirstModule dot jar
227

227

00:09:45.199  -->  00:09:46.723
and we've done this previously.
228

228

00:09:50.916  -->  00:09:51.749
And you can see at the moment,
229

229

00:09:51.749  -->  00:09:54.720
I'll just scroll up, give you more space here.
230

230

00:09:54.720  -->  00:09:55.820
We've actually got an error here.
231

231

00:09:55.820  -->  00:09:59.409
MySecondModule's not found, required by MyFirstModule.
232

232

00:09:59.409  -->  00:10:01.360
So in this scenario we need to include that
233

233

00:10:01.360  -->  00:10:06.320
so we go back up here, jdeps, we're going to
234

234

00:10:06.320  -->  00:10:10.486
add an argument dash p dot semicolon out,
235

235

00:10:10.486  -->  00:10:14.550
MyFirstModule dot jar, scrolling up.
236

236

00:10:14.550  -->  00:10:15.810
We've still got the same error,
237

237

00:10:15.810  -->  00:10:19.304
module MySecondModule not found, required by MyFirstModule.
238

238

00:10:19.304  -->  00:10:22.150
Third time lucky, let's press hop over again.
239

239

00:10:22.150  -->  00:10:24.640
And we need to specify module path so,
240

240

00:10:24.640  -->  00:10:28.000
at the start jdeps will now be jdeps dash dash module
241

241

00:10:28.860  -->  00:10:33.860
path dot semicolon out MyFirstModule dot jar.
242

242

00:10:35.600  -->  00:10:38.070
And you can see this time we've got the right result.
243

243

00:10:38.070  -->  00:10:40.642
And you can see it's specifying MyFirstModule
244

244

00:10:40.642  -->  00:10:43.150
and we can see also mod2 in MySecondModule
245

245

00:10:43.150  -->  00:10:45.355
showing up there and just as an alternative,
246

246

00:10:45.355  -->  00:10:47.583
you could also use this command.
247

247

00:10:49.189  -->  00:10:53.283
I could've put a dash m there and not used dot jar
248

248

00:10:54.490  -->  00:10:57.860
to achieve the same result, as you can see.
249

249

00:10:57.860  -->  00:11:00.270
So basically that time I didn't specify the jar file
250

250

00:11:00.270  -->  00:11:02.100
I just passed up the module name.
251

251

00:11:02.100  -->  00:11:04.020
So it's important to remember that for jdeps,
252

252

00:11:04.020  -->  00:11:06.610
unlike the other tools dash p is not the same
253

253

00:11:06.610  -->  00:11:10.508
as dash dash module path, very important there.
254

254

00:11:10.508  -->  00:11:11.560
Let's do a couple more commands
255

255

00:11:11.560  -->  00:11:13.920
'cause I know this video is getting quite long.
256

256

00:11:13.920  -->  00:11:14.860
All right I'll start posting these
257

257

00:11:14.860  -->  00:11:16.380
in just a set a bit of time.
258

258

00:11:16.380  -->  00:11:18.520
This command here is for an easier view,
259

259

00:11:18.520  -->  00:11:20.623
easy little dash dash list dash deps.
260

260

00:11:21.790  -->  00:11:24.080
All right as an alternative to that,
261

261

00:11:24.080  -->  00:11:27.080
dash m without the dot jar gives us the same thing.
262

262

00:11:27.080  -->  00:11:31.763
And we can use the check as well, dash dash check.
263

263

00:11:33.880  -->  00:11:36.230
Which gives us some useful information as well.
264

264

00:11:39.800  -->  00:11:42.160
So in this video and the previous video
265

265

00:11:42.160  -->  00:11:43.770
I've shown you how to build and execute
266

266

00:11:43.770  -->  00:11:45.667
a module in IntelliJ, how to jar
267

267

00:11:45.667  -->  00:11:48.070
the module, executing both jarred module
268

268

00:11:48.070  -->  00:11:50.080
and the exploded directory from the command line.
269

269

00:11:50.080  -->  00:11:51.730
And we have gone in and we worked through
270

270

00:11:51.730  -->  00:11:53.310
multiple examples of using the tools
271

271

00:11:53.310  -->  00:11:55.180
to get information about modules.
272

272

00:11:55.180  -->  00:11:56.560
And also I gave you a brief sample
273

273

00:11:56.560  -->  00:11:58.970
of how to create modules that work together.
274

274

00:11:58.970  -->  00:12:00.820
So moving forward now, in the next video I'm gonna
275

275

00:12:00.820  -->  00:12:03.090
be talking more about the module declaration
276

276

00:12:03.090  -->  00:12:05.000
and the directives used with it.
277

277

00:12:05.000  -->  00:12:06.300
See you in the next video.
