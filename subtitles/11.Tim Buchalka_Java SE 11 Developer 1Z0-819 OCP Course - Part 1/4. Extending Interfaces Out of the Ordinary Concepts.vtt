WEBVTT
1
1

00:00:04.730  -->  00:00:06.060
<v ->All right so continuing on</v>
2

2

00:00:06.060  -->  00:00:08.830
with some out of ordinary situations with interfaces.
3

3

00:00:08.830  -->  00:00:11.060
Let's now look at extending an interface.
4

4

00:00:11.060  -->  00:00:12.530
So we're going to create a class here
5

5

00:00:12.530  -->  00:00:14.473
called extend interface example.
6

6

00:00:28.230  -->  00:00:29.410
All right, so we've got an interface
7

7

00:00:29.410  -->  00:00:32.280
firstly named extendable that's got a default method
8

8

00:00:32.280  -->  00:00:35.853
called default method and then an abstract method, extend.
9

9

00:00:36.710  -->  00:00:38.886
We've got an interface sub extendable that extends
10

10

00:00:38.886  -->  00:00:42.000
the extendable interface
11

11

00:00:42.000  -->  00:00:44.860
and we've got a class extend interface example
12

12

00:00:44.860  -->  00:00:48.130
that implements the sub extendable interface.
13

13

00:00:48.130  -->  00:00:50.370
It implements extendable extend method
14

14

00:00:52.320  -->  00:00:54.500
which effectively is required of this class
15

15

00:00:54.500  -->  00:00:57.170
passing through the sub extendable interface
16

16

00:00:57.170  -->  00:00:59.460
and our main method instantiate an object of
17

17

00:00:59.460  -->  00:01:03.433
extend interface example and calls the extend method.
18

18

00:01:04.550  -->  00:01:08.393
So running this, you can see extendable
19

19

00:01:08.393  -->  00:01:10.570
default method called.
20

20

00:01:10.570  -->  00:01:13.260
Now this example wasn't terribly interesting,
21

21

00:01:13.260  -->  00:01:15.660
except we learnt that you can extend an interface
22

22

00:01:15.660  -->  00:01:19.170
and that any class that implements the extended interface
23

23

00:01:19.170  -->  00:01:23.310
must implement all abstract methods of both interfaces.
24

24

00:01:23.310  -->  00:01:25.300
So carrying this a bit further,
25

25

00:01:25.300  -->  00:01:27.130
let's add an additional abstract method
26

26

00:01:27.130  -->  00:01:28.813
on the sub extendable interface.
27

27

00:01:30.910  -->  00:01:33.080
Void append
28

28

00:01:35.726  -->  00:01:37.850
and that's obviously in the sub extendable interface.
29

29

00:01:37.850  -->  00:01:38.940
Now that I've done that,
30

30

00:01:38.940  -->  00:01:40.240
you see you've got a compiler error
31

31

00:01:40.240  -->  00:01:42.640
on the extend interface example class,
32

32

00:01:42.640  -->  00:01:45.210
telling us that we have to declare the method abstract
33

33

00:01:45.210  -->  00:01:48.690
or implement the abstract method append in sub extendible.
34

34

00:01:48.690  -->  00:01:51.370
So this demonstrates that adding additional public behaviour
35

35

00:01:51.370  -->  00:01:53.580
to an interface that is in use
36

36

00:01:53.580  -->  00:01:56.240
can cause very wide repercussions.
37

37

00:01:56.240  -->  00:01:57.690
So what I'm going to do to fix this,
38

38

00:01:57.690  -->  00:02:02.110
I'm going to replace the extend method and at the same time
39

39

00:02:02.110  -->  00:02:05.683
add the append method to our extend interface example class.
40

40

00:02:06.560  -->  00:02:08.040
They kind of pasted we've got the
41

41

00:02:08.040  -->  00:02:10.090
append definition on line 38
42

42

00:02:10.090  -->  00:02:11.670
and the extend method has been changed
43

43

00:02:11.670  -->  00:02:13.130
to call both the default method
44

44

00:02:13.130  -->  00:02:15.520
and the new append method as well.
45

45

00:02:15.520  -->  00:02:16.383
Running the code.
46

46

00:02:19.470  -->  00:02:22.210
Compiled is happy and we've got the additional line
47

47

00:02:22.210  -->  00:02:23.720
appending functionality
48

48

00:02:23.720  -->  00:02:26.210
now being output to the screen as well.
49

49

00:02:26.210  -->  00:02:27.690
All right, so let's now look at what happens
50

50

00:02:27.690  -->  00:02:30.400
if you don't implement a method from an interface.
51

51

00:02:30.400  -->  00:02:32.850
A Java allows you to make your class abstract
52

52

00:02:32.850  -->  00:02:36.000
and pass the task of defining the concrete behaviour
53

53

00:02:36.000  -->  00:02:37.620
to subclasses.
54

54

00:02:37.620  -->  00:02:38.720
So we're gonna create a new class
55

55

00:02:38.720  -->  00:02:40.070
in the interface of project
56

56

00:02:43.710  -->  00:02:46.433
and we're going to call this one abstractable example.
57

57

00:02:53.920  -->  00:02:56.130
So as you can see the code firstly,
58

58

00:02:56.130  -->  00:02:58.300
has got an interface called abstractable
59

59

00:02:58.300  -->  00:03:00.603
with one abstract method make concrete.
60

60

00:03:01.690  -->  00:03:03.960
We've got an abstract class called abstract class
61

61

00:03:03.960  -->  00:03:05.840
which implements abstractable
62

62

00:03:05.840  -->  00:03:08.840
however, it doesn't implement the make concrete method.
63

63

00:03:08.840  -->  00:03:10.483
Another abstract method is declared in this class
64

64

00:03:10.483  -->  00:03:12.570
though called call concrete
65

65

00:03:13.638  -->  00:03:16.350
and moving atom we've got our abstractable example class
66

66

00:03:16.350  -->  00:03:18.930
that extends the abstract class.
67

67

00:03:18.930  -->  00:03:20.190
Note that it's not implementing
68

68

00:03:20.190  -->  00:03:22.250
the abstractable example directly
69

69

00:03:22.250  -->  00:03:25.670
however, it is required to implement both abstract methods
70

70

00:03:25.670  -->  00:03:27.160
and you can see we've actually done that.
71

71

00:03:27.160  -->  00:03:29.610
We're gonna make concrete and call concrete methods
72

72

00:03:29.610  -->  00:03:31.620
defined in this class.
73

73

00:03:31.620  -->  00:03:32.770
So if you run this code
74

74

00:03:35.065  -->  00:03:36.550
you'll see we've got output at the bottom of the screen
75

75

00:03:36.550  -->  00:03:38.030
so that's not working fine.
76

76

00:03:38.030  -->  00:03:40.110
We've got the method declared on the abstract class, class
77

77

00:03:40.110  -->  00:03:42.610
method declared on abstractable interface airport.
78

78

00:03:43.670  -->  00:03:45.860
So if we scroll up to our definition again
79

79

00:03:45.860  -->  00:03:48.040
you can see that although we didn't explicitly
80

80

00:03:48.040  -->  00:03:49.520
implement abstractable,
81

81

00:03:49.520  -->  00:03:52.650
you can see we're extending the abstract class.
82

82

00:03:52.650  -->  00:03:55.910
The abstract class, abstract class implements abstractable.
83

83

00:03:55.910  -->  00:03:57.120
So even though that didn't happen,
84

84

00:03:57.120  -->  00:04:00.370
we didn't explicitly implement abstractable down here.
85

85

00:04:00.370  -->  00:04:03.000
In a public class at abstractable example,
86

86

00:04:03.000  -->  00:04:05.300
you still inherit both the obligations
87

87

00:04:05.300  -->  00:04:07.160
if abstract class chose not to accept them
88

88

00:04:07.160  -->  00:04:10.700
and the benefits of the interface through abstract class
89

89

00:04:10.700  -->  00:04:13.670
which does implement it explicitly.
90

90

00:04:13.670  -->  00:04:14.730
All right so to finish off now
91

91

00:04:14.730  -->  00:04:17.220
let's talk about problems that may arise
92

92

00:04:17.220  -->  00:04:20.430
when extending classes and implementing interfaces
93

93

00:04:20.430  -->  00:04:22.790
where there is overlap of variables and methods
94

94

00:04:22.790  -->  00:04:24.850
other than the default method.
95

95

00:04:24.850  -->  00:04:26.960
So for this one we need another class created
96

96

00:04:26.960  -->  00:04:27.903
in our project,
97

97

00:04:30.820  -->  00:04:32.323
ambiguous examples.
98

98

00:04:39.560  -->  00:04:41.040
All right so there's our code.
99

99

00:04:41.040  -->  00:04:42.330
You can see firstly,
100

100

00:04:42.330  -->  00:04:44.720
we've got an interface called confusable.
101

101

00:04:44.720  -->  00:04:47.710
It's got a constant field called name and a method,
102

102

00:04:47.710  -->  00:04:49.780
an abstract method named confused.
103

103

00:04:49.780  -->  00:04:51.380
We've got an abstract class defined
104

104

00:04:51.380  -->  00:04:53.190
further on down called confused.
105

105

00:04:53.190  -->  00:04:55.220
It's got a constant field called name
106

106

00:04:55.220  -->  00:04:58.730
and also an abstract method called confuse.
107

107

00:04:58.730  -->  00:05:01.060
Noting that it's got to say method signature
108

108

00:05:01.060  -->  00:05:02.800
as the interface;
109

109

00:05:02.800  -->  00:05:05.825
however, it's got a different cell return type
110

110

00:05:05.825  -->  00:05:07.230
and down here in our class,
111

111

00:05:07.230  -->  00:05:09.190
it implements the confusable interface for now
112

112

00:05:09.190  -->  00:05:10.830
and has a concrete method confused
113

113

00:05:10.830  -->  00:05:13.087
that overrides the interfaces method
114

114

00:05:13.087  -->  00:05:14.910
and this method prints out the field name
115

115

00:05:14.910  -->  00:05:16.650
without any kind of qualifier
116

116

00:05:17.610  -->  00:05:19.610
and all of this works because we can run
117

117

00:05:20.660  -->  00:05:21.493
and there's the airport.
118

118

00:05:21.493  -->  00:05:23.200
The method confused returns confusable
119

119

00:05:23.200  -->  00:05:26.600
and obviously it's getting that from the interface.
120

120

00:05:26.600  -->  00:05:29.500
Let's now change our class definition.
121

121

00:05:29.500  -->  00:05:31.040
The moment implements confusable,
122

122

00:05:31.040  -->  00:05:35.230
we're gonna change that to also extends confused
123

123

00:05:37.710  -->  00:05:39.250
and you can see that by doing that
124

124

00:05:39.250  -->  00:05:41.070
I've introduced a compiler error
125

125

00:05:41.070  -->  00:05:43.720
in the concrete method confuse on the name variable
126

126

00:05:43.720  -->  00:05:44.895
and if I hover over that,
127

127

00:05:44.895  -->  00:05:46.270
the reference to labour is ambiguous.
128

128

00:05:46.270  -->  00:05:50.380
Both confuse dot name and confusable dot name match.
129

129

00:05:50.380  -->  00:05:53.140
Probably our class identifies more closely with its parent
130

130

00:05:53.140  -->  00:05:54.200
than the interface.
131

131

00:05:54.200  -->  00:05:56.240
So what I'm going to do is qualify
132

132

00:05:56.240  -->  00:05:58.060
which name we wanna use in the method
133

133

00:05:58.060  -->  00:06:00.420
and I can come down here and put in confused
134

134

00:06:02.470  -->  00:06:04.200
to clarify that and obviously the air,
135

135

00:06:04.200  -->  00:06:06.560
the compiler error has disappeared.
136

136

00:06:06.560  -->  00:06:09.100
Notice that the declaration of the confuse method itself
137

137

00:06:09.100  -->  00:06:11.110
satisfies both contracts
138

138

00:06:11.110  -->  00:06:12.870
for the abstract methods on the interface
139

139

00:06:12.870  -->  00:06:14.333
and the abstract class.
140

140

00:06:15.766  -->  00:06:17.270
You see them there.
141

141

00:06:17.270  -->  00:06:18.103
So with that's said
142

142

00:06:18.103  -->  00:06:21.170
what happens if we change one of the methods slightly?
143

143

00:06:21.170  -->  00:06:22.570
So I'll come out too confused here
144

144

00:06:22.570  -->  00:06:25.310
and it's got abstract object confused.
145

145

00:06:25.310  -->  00:06:27.410
Let's change that to be an integer object.
146

146

00:06:31.060  -->  00:06:33.270
Something we've got a compile error down here,
147

147

00:06:33.270  -->  00:06:34.670
which we'll click on to get to.
148

148

00:06:34.670  -->  00:06:35.800
Hovering over that.
149

149

00:06:35.800  -->  00:06:37.810
The confused method in ambiguous examples
150

150

00:06:37.810  -->  00:06:40.490
clashes with confuse in confused
151

151

00:06:40.490  -->  00:06:42.713
attempting to use incompatible return type.
152

152

00:06:43.640  -->  00:06:45.450
So at the moment we're trapped.
153

153

00:06:45.450  -->  00:06:47.320
We cannot satisfy both requirements
154

154

00:06:47.320  -->  00:06:50.730
because the returned types have no subclass in common.
155

155

00:06:50.730  -->  00:06:52.410
Remember that you're overridden method
156

156

00:06:52.410  -->  00:06:56.080
must have the same return type or a more specific one.
157

157

00:06:56.080  -->  00:06:57.963
So we're going to undo that change.
158

158

00:06:59.810  -->  00:07:03.233
Back to object again and the code is now valid again.
159

159

00:07:05.590  -->  00:07:07.620
So the last two videos have been pretty full-on
160

160

00:07:07.620  -->  00:07:09.440
and we've covered compiler differences
161

161

00:07:09.440  -->  00:07:13.450
when casting to an interface versus casting to a superclass.
162

162

00:07:13.450  -->  00:07:15.380
We covered inheriting duplicate methods
163

163

00:07:15.380  -->  00:07:17.170
from multiple interfaces.
164

164

00:07:17.170  -->  00:07:19.550
We covered extending interfaces.
165

165

00:07:19.550  -->  00:07:23.000
We covered using an abstract class implementing an interface
166

166

00:07:23.000  -->  00:07:26.130
and we also covered ambiguous references and method clashes
167

167

00:07:26.130  -->  00:07:29.130
which may occur because of multiple inheritance of type
168

168

00:07:29.130  -->  00:07:30.900
which Java supports.
169

169

00:07:30.900  -->  00:07:32.360
All right, so we'll end the video here.
170

170

00:07:32.360  -->  00:07:34.210
Coming up next is some quiz questions
171

171

00:07:34.210  -->  00:07:35.930
and then in the next video after that,
172

172

00:07:35.930  -->  00:07:38.830
I'll start comparing abstract classes to interfaces
173

173

00:07:38.830  -->  00:07:40.050
in a little more detail.
174

174

00:07:40.050  -->  00:07:41.350
See you in the next video.
