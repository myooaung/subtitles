WEBVTT
1
1

00:00:04.845  -->  00:00:05.678
<v Tim Buchalka>All right, so let's talk</v>
2

2

00:00:05.678  -->  00:00:08.720
about declaring and instantiating Java Objects.
3

3

00:00:08.720  -->  00:00:10.560
A Java reference variable is used
4

4

00:00:10.560  -->  00:00:12.920
to address and manipulate an Object,
5

5

00:00:12.920  -->  00:00:15.130
and declaring such a variable is basically the same
6

6

00:00:15.130  -->  00:00:18.030
as declaring primitive data type variables,
7

7

00:00:18.030  -->  00:00:20.930
String objects and arrays, without the special constructs
8

8

00:00:20.930  -->  00:00:22.670
that those variables have.
9

9

00:00:22.670  -->  00:00:24.720
Now, some of the same rules do apply.
10

10

00:00:24.720  -->  00:00:26.690
An Object is either known by the compiler
11

11

00:00:26.690  -->  00:00:29.890
or the current context, or needs an import statement,
12

12

00:00:29.890  -->  00:00:32.240
or a Fully Qualified Class Name, an FQCN,
13

13

00:00:32.240  -->  00:00:34.180
to satisfy the compiler.
14

14

00:00:34.180  -->  00:00:36.960
Multiple variables can be declared in a single statement
15

15

00:00:36.960  -->  00:00:38.753
so long as they're of the same type.
16

16

00:00:40.090  -->  00:00:43.060
So, here we're showing a valid declaration for an Object.
17

17

00:00:43.060  -->  00:00:45.070
And just a note about this first declaration,
18

18

00:00:45.070  -->  00:00:47.680
the Object doesn't need the Fully Qualified Class Name
19

19

00:00:47.680  -->  00:00:50.530
here because java.lang is automatically in context
20

20

00:00:50.530  -->  00:00:52.960
for any java class, and, therefore, it doesn't need
21

21

00:00:52.960  -->  00:00:55.400
an import statement or Fully Qualified Class Name
22

22

00:00:55.400  -->  00:00:57.170
for type Object.
23

23

00:00:57.170  -->  00:00:59.950
The java.util.ArrayList arrayList,
24

24

00:00:59.950  -->  00:01:02.810
this declaration is using a Fully Qualified Class Name
25

25

00:01:02.810  -->  00:01:05.070
for a variable of type ArrayList.
26

26

00:01:05.070  -->  00:01:06.410
And on the next line there,
27

27

00:01:06.410  -->  00:01:09.060
we've got Object x comma y comma z.
28

28

00:01:09.060  -->  00:01:10.560
Multiple variables can be declared
29

29

00:01:10.560  -->  00:01:12.290
on a single line for a single type.
30

30

00:01:12.290  -->  00:01:15.630
We've seen that, previously, but this applies to Objects.
31

31

00:01:15.630  -->  00:01:17.500
Now, in terms of invalid declaration,
32

32

00:01:17.500  -->  00:01:20.040
much the same when we're working with primitive types.
33

33

00:01:20.040  -->  00:01:22.270
Trying to declare multiple variables with different types
34

34

00:01:22.270  -->  00:01:23.980
in one statement isn't allowed.
35

35

00:01:23.980  -->  00:01:24.813
So, the example there is
36

36

00:01:24.813  -->  00:01:27.920
String x, y, z comma Object o.
37

37

00:01:27.920  -->  00:01:29.120
That's a compiler error.
38

38

00:01:30.610  -->  00:01:33.070
Instantiating an Object requires, in most cases,
39

39

00:01:33.070  -->  00:01:35.020
the use of the new keyword, which we've already seen
40

40

00:01:35.020  -->  00:01:37.640
with primitive data wrappers and String objects.
41

41

00:01:37.640  -->  00:01:40.200
The new keyword for an Object will call a special
42

42

00:01:40.200  -->  00:01:42.470
initialization method called a constructor.
43

43

00:01:42.470  -->  00:01:45.180
You can define your own constructor, or constructors,
44

44

00:01:45.180  -->  00:01:48.110
or Java may generate a default constructor for you.
45

45

00:01:48.110  -->  00:01:49.900
We'll be discussing constructors in more depth
46

46

00:01:49.900  -->  00:01:51.100
in a future video.
47

47

00:01:51.100  -->  00:01:53.890
Alternative ways of instantiating a new Object
48

48

00:01:53.890  -->  00:01:56.550
are the clone method, which we reviewed in the section
49

49

00:01:56.550  -->  00:01:58.920
on arrays, and it won't go over here.
50

50

00:01:58.920  -->  00:02:01.470
Or deserializing an Object is yet another way
51

51

00:02:01.470  -->  00:02:02.880
of instantiating a new Object,
52

52

00:02:02.880  -->  00:02:04.993
but this is not part of the exam.
53

53

00:02:06.620  -->  00:02:07.540
So, the code on-screen there,
54

54

00:02:07.540  -->  00:02:10.080
Object o equals new Object parentheses,
55

55

00:02:10.080  -->  00:02:12.420
that's an example of using new to create a new Object
56

56

00:02:12.420  -->  00:02:15.360
of type java.lang.Object, which is the class.
57

57

00:02:15.360  -->  00:02:17.990
The referenced address to this new Object in memory
58

58

00:02:17.990  -->  00:02:20.310
is passed to the variable o.
59

59

00:02:20.310  -->  00:02:22.230
You can declare an Object and instantiate it
60

60

00:02:22.230  -->  00:02:25.140
in the same statement, as I've just demonstrated.
61

61

00:02:25.140  -->  00:02:27.490
You can declare and instantiate multiple Objects
62

62

00:02:27.490  -->  00:02:30.630
in one statement as long as they're of the same type.
63

63

00:02:30.630  -->  00:02:33.553
You can also chain declarations and instantiations.
64

64

00:02:35.760  -->  00:02:38.800
So, here's some examples of declarations and instantiations
65

65

00:02:38.800  -->  00:02:40.920
that are both valid, which we'll show first
66

66

00:02:40.920  -->  00:02:42.960
and then we'll move onto the invalid ones.
67

67

00:02:42.960  -->  00:02:46.490
First valid one is Object a equals new Object parentheses.
68

68

00:02:46.490  -->  00:02:48.250
That's a pretty straightforward declaration
69

69

00:02:48.250  -->  00:02:51.400
and initialization of a single Object.
70

70

00:02:51.400  -->  00:02:54.990
The next one, Object a equals new Object parentheses comma b
71

71

00:02:54.990  -->  00:02:57.140
equals new Object parentheses.
72

72

00:02:57.140  -->  00:02:58.980
Again, a fairly straightforward declaration
73

73

00:02:58.980  -->  00:03:00.790
and initialization of multiple Objects,
74

74

00:03:00.790  -->  00:03:03.210
this time of the same type.
75

75

00:03:03.210  -->  00:03:06.700
The third valid statement, Object b comma a equals b
76

76

00:03:06.700  -->  00:03:08.947
equals new Object parentheses.
77

77

00:03:08.947  -->  00:03:12.460
So, here Object b is declared and a is declared
78

78

00:03:12.460  -->  00:03:16.960
and assigned to b, which is assigned a new Object reference.
79

79

00:03:16.960  -->  00:03:19.760
The next example, Object a equals new Object parentheses
80

80

00:03:19.760  -->  00:03:23.380
comma s equals new String parentheses testing.
81

81

00:03:23.380  -->  00:03:26.280
Well, this actually works because s, in this case a String,
82

82

00:03:26.280  -->  00:03:28.200
is declared as an Object.
83

83

00:03:28.200  -->  00:03:31.080
String is a subtype of Object, and so this compound
84

84

00:03:31.080  -->  00:03:32.593
statement is, in fact, valid.
85

85

00:03:34.510  -->  00:03:36.880
All right, so now let's look at some invalid statements.
86

86

00:03:36.880  -->  00:03:39.800
The first one, Object a equals b comma b
87

87

00:03:39.800  -->  00:03:41.890
equals new Object parentheses.
88

88

00:03:41.890  -->  00:03:44.920
Well, Object b is not actually declared in this statement.
89

89

00:03:44.920  -->  00:03:46.700
Next, we've got Object a equals b
90

90

00:03:46.700  -->  00:03:48.590
equals new Object parentheses.
91

91

00:03:48.590  -->  00:03:50.950
Here, Object b is not actually declared in this statement,
92

92

00:03:50.950  -->  00:03:52.820
so it's invalid as well.
93

93

00:03:52.820  -->  00:03:55.440
The third one, String s equals new String parentheses
94

94

00:03:55.440  -->  00:03:57.640
testing in double quotes comma a
95

95

00:03:57.640  -->  00:03:59.680
equals new Object parentheses.
96

96

00:03:59.680  -->  00:04:01.310
Well, this one doesn't work because an Object
97

97

00:04:01.310  -->  00:04:03.780
is not a subtype of String.
98

98

00:04:03.780  -->  00:04:06.090
The last one, we've got Object a equals new Object
99

99

00:04:06.090  -->  00:04:08.780
parentheses comma String s equals new String
100

100

00:04:08.780  -->  00:04:11.730
parentheses and testing in double quotes.
101

101

00:04:11.730  -->  00:04:13.720
So, you can't define and instantiate classes
102

102

00:04:13.720  -->  00:04:15.720
of different types in the same statement,
103

103

00:04:15.720  -->  00:04:17.140
declaring different types for each,
104

104

00:04:17.140  -->  00:04:21.550
even if the different type is a subtype of the first type.
105

105

00:04:21.550  -->  00:04:23.930
And that's the reason why that was invalid.
106

106

00:04:23.930  -->  00:04:25.180
All right, so let's finish the video here.
107

107

00:04:25.180  -->  00:04:27.240
Then the next one, we'll talk briefly about
108

108

00:04:27.240  -->  00:04:28.910
to how the JVM allocates memory,
109

109

00:04:28.910  -->  00:04:31.280
and then we'll move onto some coding examples.
110

110

00:04:31.280  -->  00:04:32.580
See you in the next video.
