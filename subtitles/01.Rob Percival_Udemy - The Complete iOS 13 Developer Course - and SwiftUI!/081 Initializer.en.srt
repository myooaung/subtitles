1
00:00:00,620 --> 00:00:01,290
Hi.

2
00:00:01,400 --> 00:00:02,830
We did this lecture.

3
00:00:02,930 --> 00:00:08,890
We're going to create our first project in order to understand classes a little bit more.

4
00:00:09,180 --> 00:00:11,760
Rather than going with single view app.

5
00:00:11,760 --> 00:00:17,440
This time I'm going to go for Mac OS and I'm going to create a command line tool.

6
00:00:17,640 --> 00:00:22,710
If you remember I showed you this technique in the beginning of this course.

7
00:00:22,830 --> 00:00:25,590
Before we dive into the playgrounds.

8
00:00:25,590 --> 00:00:33,020
So if you had a problem with playground there is a high probability that you have worked with this now.

9
00:00:33,240 --> 00:00:36,410
But if you haven't it's not an issue.

10
00:00:36,480 --> 00:00:42,600
Just create a new Mac OS line comment tool and you can name it musician class.

11
00:00:42,600 --> 00:00:48,450
So that's what we were going to build in this lecture we're going to create a musician class and we're

12
00:00:48,480 --> 00:00:56,850
going to see almost every aspect of classes so that we can understand them better and we can just implement

13
00:00:56,850 --> 00:00:58,890
them in our projects as well.

14
00:00:59,490 --> 00:01:01,660
So this is going to Iran.

15
00:01:01,680 --> 00:01:09,390
This code's inside of our mac and we're not going to be dealing with main that storyboards or simulators.

16
00:01:09,420 --> 00:01:18,090
So if you just run this it will print out the result in logs so we can actually follow and track what's

17
00:01:18,090 --> 00:01:25,930
going on inside of logs as well as you can see printed out how low earth can we do this in playgrounds.

18
00:01:25,950 --> 00:01:33,740
Of course we can but we're going to learn a lot and we're going to work with different kinds of control

19
00:01:33,830 --> 00:01:40,320
there's really going to see how to work with multiple view controllers or dot swift files in this case

20
00:01:40,320 --> 00:01:47,150
not view controllers so that it would make sense to work this inside of command line too.

21
00:01:47,400 --> 00:01:54,510
So come over here and just say final new OK because we're going to add a new file.

22
00:01:54,510 --> 00:01:57,130
So let's say file okay.

23
00:01:57,270 --> 00:02:04,080
And rather than cocoa touch class I'm going to go for a swift file because I'm going to create a class

24
00:02:04,080 --> 00:02:09,300
in the swift file and I'm going to name my class musicians.

25
00:02:09,330 --> 00:02:10,060
Okay.

26
00:02:10,350 --> 00:02:12,450
So this will be my musician class.

27
00:02:12,450 --> 00:02:16,420
This will be my model actually.

28
00:02:16,440 --> 00:02:20,430
So in order to create a class it's fairly easy.

29
00:02:20,430 --> 00:02:22,550
You can just write class.

30
00:02:22,560 --> 00:02:22,980
Okay.

31
00:02:23,700 --> 00:02:32,990
And then we going to start with that in uppercase rather than lowercase remember in classes v use uppercase

32
00:02:33,030 --> 00:02:33,720
like this.

33
00:02:33,720 --> 00:02:34,770
Musicians.

34
00:02:34,770 --> 00:02:39,450
And then after you can open a curly brace and it will close it for you.

35
00:02:39,480 --> 00:02:40,960
This is your class.

36
00:02:41,010 --> 00:02:48,770
Right now we actually created our class so we can have some attributes you can have some actions in

37
00:02:48,770 --> 00:02:49,640
this class right.

38
00:02:50,090 --> 00:02:54,470
So let's cert what can a musician have it.

39
00:02:54,490 --> 00:02:56,990
It can have a name for example.

40
00:02:56,990 --> 00:03:01,210
Okay I'm going to initialize this to be an empty string first.

41
00:03:01,400 --> 00:03:04,010
So later on it will have an H.

42
00:03:04,070 --> 00:03:09,920
I'm going to say this is zero and it will have an instrument as well.

43
00:03:09,950 --> 00:03:14,290
So you can make this an empty stream too.

44
00:03:14,330 --> 00:03:18,840
So suppose that we will have these musicians class k.

45
00:03:18,890 --> 00:03:21,270
And it will have this tree attributes.

46
00:03:21,320 --> 00:03:24,260
So how can we create a musician object.

47
00:03:24,260 --> 00:03:26,910
Since now we have our class.

48
00:03:27,140 --> 00:03:28,460
It's fairly easy.

49
00:03:28,460 --> 00:03:30,030
We can go to our remains.

50
00:03:30,020 --> 00:03:31,730
That's fifth file.

51
00:03:31,800 --> 00:03:39,200
Suppose that means that Swift is your real controller and we have created a musician class.

52
00:03:39,290 --> 00:03:44,700
And now I can't create an object out of that musician class in here.

53
00:03:44,720 --> 00:03:49,040
So first musician will be James and you fire right musicians.

54
00:03:49,100 --> 00:03:51,200
It should have show up.

55
00:03:51,230 --> 00:03:51,680
Yeah.

56
00:03:51,710 --> 00:04:00,290
It sees the musicians as you can see if I do a command be it we'll build up the project or we can come

57
00:04:00,290 --> 00:04:02,750
over here to product and say Build.

58
00:04:02,750 --> 00:04:07,250
So the files will be synchronized inside of our X code project.

59
00:04:07,250 --> 00:04:16,790
So if I write let James or let's something else if I type musicians as you can see now it sees the musicians

60
00:04:16,790 --> 00:04:17,920
class.

61
00:04:18,320 --> 00:04:20,810
So double click on this.

62
00:04:20,810 --> 00:04:25,380
And as you can see there is a C character on the left hand side.

63
00:04:25,610 --> 00:04:33,830
If you do a string this is kind of creating a string object like I'm creating a musician's object right

64
00:04:33,860 --> 00:04:34,180
now.

65
00:04:35,030 --> 00:04:42,260
So if I open parentheses and close this it means that I'm creating this object out of the musicians

66
00:04:42,260 --> 00:04:43,050
class.

67
00:04:43,160 --> 00:04:47,860
And right now my object is actually created.

68
00:04:47,870 --> 00:04:54,260
So I managed to create an James instance of this musician class.

69
00:04:54,410 --> 00:04:57,160
So as you can see James has the type musicians.

70
00:04:57,170 --> 00:05:03,320
And if I say dot it can see these attributes like age instrument and name.

71
00:05:04,040 --> 00:05:07,160
So these are the attributes that we have given here.

72
00:05:07,160 --> 00:05:09,980
So let me say purpose to your attribute.

73
00:05:09,980 --> 00:05:10,760
OK.

74
00:05:11,120 --> 00:05:19,730
So I can just define the age of James here so I can say 50 and I can come over here and say James that

75
00:05:19,730 --> 00:05:23,330
name is James Hetfield OK.

76
00:05:23,600 --> 00:05:27,730
And then later on I can define the instrument as Vo.

77
00:05:27,830 --> 00:05:29,480
So this will be a guitar.

78
00:05:30,530 --> 00:05:36,110
So do this for your own favorite musician and you will see it will work.

79
00:05:36,200 --> 00:05:40,200
So let's try to print age of James.

80
00:05:40,520 --> 00:05:41,270
Here you go.

81
00:05:41,270 --> 00:05:43,610
We now see the 50.

82
00:05:43,610 --> 00:05:45,080
That's cool right.

83
00:05:45,080 --> 00:05:51,980
We have created the musician model and we have created an object out of that model and we can set the

84
00:05:51,980 --> 00:05:55,010
attributes right now.

85
00:05:55,010 --> 00:06:01,010
Now suppose that we're getting this information from internet we're downloading from a database like

86
00:06:01,010 --> 00:06:02,080
far your base.

87
00:06:02,210 --> 00:06:03,220
OK.

88
00:06:03,260 --> 00:06:09,920
So if we work on a model this will be much more structural than ever before.

89
00:06:09,920 --> 00:06:17,630
So we can actually save all those values into arrays different areas and we can try to synchronize these

90
00:06:17,630 --> 00:06:20,000
arrays using indexes.

91
00:06:20,000 --> 00:06:28,640
But if we just create a model out of these values and we can just add those model values to an array

92
00:06:28,880 --> 00:06:30,910
it will be much more structure.

93
00:06:31,490 --> 00:06:33,650
And we're going to do that in the following lectures.

94
00:06:33,650 --> 00:06:34,640
Don't worry.

95
00:06:34,970 --> 00:06:43,260
Right now suppose that I didn't define the values as I did in the James.

96
00:06:43,310 --> 00:06:47,110
So we have those previously defined values.

97
00:06:47,120 --> 00:06:47,850
Right.

98
00:06:47,870 --> 00:06:53,090
So let me try to prevent James that age without giving the values.

99
00:06:53,540 --> 00:06:55,030
So what will it be.

100
00:06:55,040 --> 00:06:57,290
It will be zero because why.

101
00:06:57,290 --> 00:07:00,490
Because I have initialized this to be zero.

102
00:07:00,500 --> 00:07:01,170
Right.

103
00:07:01,220 --> 00:07:06,440
And if I do this print James that name it will be an empty string.

104
00:07:07,100 --> 00:07:10,530
So what's the problem about that.

105
00:07:10,610 --> 00:07:13,470
So maybe I don't want to initialize this.

106
00:07:13,520 --> 00:07:18,380
Maybe I just want to say this will be an integer or this will be straight.

107
00:07:18,980 --> 00:07:25,300
Because I don't want to get numbers zero when I don't give the age value.

108
00:07:25,390 --> 00:07:33,690
OK so can I do this yes of course I can but it will give me an error.

109
00:07:34,270 --> 00:07:38,610
So as you can see class musicians has no initialize.

110
00:07:39,160 --> 00:07:46,000
So if I create a property if I create an attribute without initializing I will get an error.

111
00:07:46,630 --> 00:07:50,720
But there is a solution to that problem as well.

112
00:07:50,770 --> 00:07:58,090
We have something called initialize here and maybe you have heard this as a constructor in other programming

113
00:07:58,090 --> 00:07:59,600
languages.

114
00:07:59,740 --> 00:08:05,600
So there is a spatial function in this musician class in all classes actually.

115
00:08:05,740 --> 00:08:14,570
It defines what to do when we create this object when we create an object out of this musicians.

116
00:08:14,740 --> 00:08:21,550
So I can do the initialization as well to make this go away but if I don't want to do that if I don't

117
00:08:21,550 --> 00:08:26,800
want to initialize these properties then I have to create an equalizer.

118
00:08:27,550 --> 00:08:35,680
So if you write in it as you can see this is initialized declaration and this is what happens when an

119
00:08:35,680 --> 00:08:42,200
object is created for the first time or second time it doesn't matter actually when you create an object.

120
00:08:42,340 --> 00:08:44,580
It will happen.

121
00:08:44,650 --> 00:08:48,250
So what exactly can we do inside of this.

122
00:08:48,340 --> 00:08:50,560
We can do anything we want.

123
00:08:50,560 --> 00:08:54,940
It doesn't have to be related with class musicians at all.

124
00:08:55,840 --> 00:08:59,390
So let me do an example so you will understand it better.

125
00:08:59,770 --> 00:09:06,040
So if I initialize these and these and these last one the error will go away.

126
00:09:06,130 --> 00:09:07,140
OK.

127
00:09:07,150 --> 00:09:10,300
And I will just print something inside of my.

128
00:09:10,300 --> 00:09:15,510
In its function so I can say musician created for example.

129
00:09:15,640 --> 00:09:21,400
So whenever I create an object it will print this log.

130
00:09:21,400 --> 00:09:29,440
So let me create this James as you can see this is only creating the James and this will only print

131
00:09:29,440 --> 00:09:31,720
out the James that name.

132
00:09:31,780 --> 00:09:37,100
But before it prints it says musician create it.

133
00:09:37,120 --> 00:09:44,990
So whenever I create another instance of this musician class it will again print musician created.

134
00:09:45,400 --> 00:09:50,770
So it isn't related with properties or attributes at all.

135
00:09:50,770 --> 00:09:57,430
Of course we are going to make it relate to but let me do this example as well so I'm creating another

136
00:09:57,430 --> 00:09:59,680
instance from these musicians.

137
00:09:59,680 --> 00:10:06,410
And if I run this you will see there will be two musicians created luck.

138
00:10:06,580 --> 00:10:12,310
So in in it you can write what you want to do when an object is created.

139
00:10:12,790 --> 00:10:16,070
So this is initialized or came.

140
00:10:16,150 --> 00:10:24,050
And again you may have heard this as a constructor in other programming languages.

141
00:10:24,160 --> 00:10:32,190
What we actually want to do in here is to get some name age and instrument property values and assign

142
00:10:32,210 --> 00:10:36,790
them as our properties as our attributes.

143
00:10:36,850 --> 00:10:42,270
We are going to get those values from the developer in Maine that Swift.

144
00:10:42,430 --> 00:10:46,240
So let's stop here and do that within the next lecture.
