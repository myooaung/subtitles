WEBVTT
1
00:00:00.420 --> 00:00:01.210
Hi.

2
00:00:01.380 --> 00:00:07.380
Within this lecture of going to create our first truck so that we will understand everything I told

3
00:00:07.380 --> 00:00:08.640
you in the previous lecture.

4
00:00:08.640 --> 00:00:10.160
In a much better way.

5
00:00:10.620 --> 00:00:18.100
So rather than selecting the single wheel app I'm gonna go for Mac OS and select the command line tool.

6
00:00:18.180 --> 00:00:26.370
Remember this provides us the opportunity to run our codes inside the command line rather than a simulator.

7
00:00:26.370 --> 00:00:31.120
So we're going to be fast like we did in the intermediate swift section.

8
00:00:31.950 --> 00:00:40.440
OK so I'm going to call this something like advanced swift project OK and we're going to see a lot of

9
00:00:40.440 --> 00:00:43.100
concepts inside of this project.

10
00:00:43.140 --> 00:00:51.540
We're not going to see on these trucks but we're going to see other concepts like tuples guard lat as

11
00:00:51.540 --> 00:00:52.010
well.

12
00:00:52.620 --> 00:01:00.570
So let me make this into a full screen and if you have skipped the Intermediate section for some reason

13
00:01:00.570 --> 00:01:09.950
if you just came here directly as you can see if I hit run on here it will just compile this code on

14
00:01:09.950 --> 00:01:16.880
my Mac without to running a simulator and we will see the results in log immediately of course.

15
00:01:16.880 --> 00:01:23.220
This is the first build so it's taking its time but it will be much more faster along the way.

16
00:01:24.580 --> 00:01:32.170
So rather than printing Hello world I'm going to create a struct and I'm going to print this trucks.

17
00:01:32.170 --> 00:01:33.690
So how do we do that.

18
00:01:33.700 --> 00:01:38.860
I'm going to follow the same example like we did in the intermediates with section.

19
00:01:38.860 --> 00:01:42.610
So I'm going to come over here to create a new file.

20
00:01:42.670 --> 00:01:51.120
This will be a swift file and in my first swift file I'm going to have a class of musician.

21
00:01:51.140 --> 00:01:56.140
OK I'm going to call this musicians struct rather than class.

22
00:01:56.260 --> 00:02:00.750
And don't worry I'm going to have a musician class as well.

23
00:02:00.790 --> 00:02:03.970
I'm going to create another files swift file.

24
00:02:03.970 --> 00:02:12.520
I'm going to call this musician class so I will create one struct and one class and they will have all

25
00:02:12.520 --> 00:02:14.540
the same attributes.

26
00:02:14.650 --> 00:02:19.240
So let's start with class because we already know how to do that.

27
00:02:19.300 --> 00:02:23.800
So in order to create a class we use keyword class.

28
00:02:23.800 --> 00:02:26.290
And I will say musician class.

29
00:02:26.290 --> 00:02:30.340
So under my musician class I will have three properties.

30
00:02:30.340 --> 00:02:37.270
I will have a name which is a string I will have an H which is an integer and I will have an instrument

31
00:02:37.540 --> 00:02:39.840
which again is a string.

32
00:02:40.030 --> 00:02:45.910
So if I do that I will get an error from this class because we don't have the initializing function

33
00:02:45.910 --> 00:02:46.820
yet.

34
00:02:46.900 --> 00:02:54.590
Remember we have to have a constructor here in order to start and create an object out of this class.

35
00:02:54.640 --> 00:03:02.680
So if I say in it it will be okay for us and inside of this in it I'm going to take a name input and

36
00:03:02.680 --> 00:03:06.320
this will be a string I'm going to take an age input.

37
00:03:06.340 --> 00:03:11.950
This will be an integer and I'm going to take an instrument input as well.

38
00:03:11.950 --> 00:03:14.910
This will be again as shrink.

39
00:03:15.220 --> 00:03:21.090
So under this in it I'm going to say self that name is name input.

40
00:03:21.150 --> 00:03:34.090
Ok so s that age is age input and s dot instrument is instruments input.

41
00:03:34.090 --> 00:03:35.950
So far so good.

42
00:03:35.980 --> 00:03:42.780
Now we can create an object out of this class and this will be the first function to be executed when

43
00:03:42.790 --> 00:03:43.990
we do that.

44
00:03:43.990 --> 00:03:48.310
So we assign the attributes which related values.

45
00:03:48.910 --> 00:03:52.540
So let's do that with musicians struct.

46
00:03:52.540 --> 00:03:52.900
Right.

47
00:03:52.900 --> 00:03:55.010
So let's come over here first.

48
00:03:55.060 --> 00:03:59.440
Let's try to create an object out of this class.

49
00:03:59.440 --> 00:04:01.660
So let me say let.

50
00:04:01.660 --> 00:04:03.930
Class James for example.

51
00:04:04.060 --> 00:04:07.550
And this will be a musician class object.

52
00:04:07.840 --> 00:04:12.460
And then I do that it has to autocomplete but it doesn't work right now.

53
00:04:12.460 --> 00:04:20.920
So I'm going to delete this and hit command B on my computer to build this and then I can call musician

54
00:04:20.920 --> 00:04:21.710
class.

55
00:04:21.710 --> 00:04:28.300
If I open parentheses it will show me the parameters and for name input I'm going to go for James for

56
00:04:28.330 --> 00:04:31.610
age 50 and for instrument guitar.

57
00:04:31.930 --> 00:04:34.810
And let me try to print out the class.

58
00:04:34.810 --> 00:04:37.760
James dot age for example.

59
00:04:38.620 --> 00:04:44.170
So if I run this I will see 50 in my logs as expected.

60
00:04:44.830 --> 00:04:47.710
Now let's do that with struct.

61
00:04:47.710 --> 00:04:50.400
Let's go to a struct rather than class.

62
00:04:50.410 --> 00:04:53.100
I'm going to start by saying struct.

63
00:04:53.110 --> 00:04:56.500
So we use the actual keyword struct.

64
00:04:56.530 --> 00:05:00.750
In this case as well so struct musicians struct.

65
00:05:00.780 --> 00:05:01.760
OK.

66
00:05:02.350 --> 00:05:10.390
And let me open this parentheses we're going to have the same attributes here and name and H and then

67
00:05:10.390 --> 00:05:11.390
instruments.

68
00:05:11.830 --> 00:05:14.350
So our instrument will be strict.

69
00:05:15.250 --> 00:05:23.230
So maybe you realize the difference right now even though I don't have any initialize or I don't get

70
00:05:23.320 --> 00:05:28.860
any error so if I do command B I still don't get any error.

71
00:05:29.140 --> 00:05:32.040
So this is a great feature of struct.

72
00:05:32.260 --> 00:05:41.430
If I come over here to Maine I can say let's struct James and I will create an instance of this musician

73
00:05:41.440 --> 00:05:42.340
struct.

74
00:05:42.410 --> 00:05:43.140
Okay.

75
00:05:43.420 --> 00:05:48.520
If I open parentheses it will automatically show me the parameters.

76
00:05:48.520 --> 00:05:56.420
So this is called a free initialized and we get this initialize or even without writing the initialize

77
00:05:56.420 --> 00:05:57.700
or itself.

78
00:05:57.700 --> 00:06:06.050
This is a great feature so I can just come over here and give the exact same attributes like James 50

79
00:06:06.050 --> 00:06:12.500
and guitar and I can come over here and say struct James dots H.

80
00:06:12.620 --> 00:06:15.180
And it will give me the same results.

81
00:06:15.340 --> 00:06:16.940
So let me run this.

82
00:06:16.960 --> 00:06:17.790
And here you go.

83
00:06:17.800 --> 00:06:21.680
We have two 50s over here.

84
00:06:21.730 --> 00:06:22.870
So this is good.

85
00:06:22.900 --> 00:06:30.370
We know oh how to create struct and we know how to create class right now and in order to understand

86
00:06:30.370 --> 00:06:32.820
the technical differences between them.

87
00:06:32.940 --> 00:06:35.530
We had to dig a little bit deeper.

88
00:06:35.590 --> 00:06:43.150
For example we have to understand the two immutability and we have to understand the difference behave

89
00:06:43.180 --> 00:06:48.700
beef behavior difference between the reference type and value type.

90
00:06:48.700 --> 00:06:55.340
So remember struct is a value type where as class is a reference type.

91
00:06:55.690 --> 00:07:01.490
So they have some real major differences in terms of technicality.

92
00:07:01.660 --> 00:07:07.500
And we get to talk about all of this things in the following lectures.

93
00:07:07.510 --> 00:07:08.440
Don't worry.

94
00:07:08.440 --> 00:07:15.120
Right now you have seen how easy it is to work with struct and how easy it is to create one.

95
00:07:16.120 --> 00:07:22.540
So Reagan stop here and following the next lecture we're gonna dig a little bit deeper to understand

96
00:07:22.540 --> 00:07:24.060
it more comprehensively.
