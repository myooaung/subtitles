WEBVTT
1
00:00:00.780 --> 00:00:01.420
Hi.

2
00:00:01.500 --> 00:00:06.940
We didn't this lecture we're going to see how we can add a function inside of our class.

3
00:00:07.080 --> 00:00:15.390
And also we're going to learn a really important object oriented programming concept called inheritance.

4
00:00:15.390 --> 00:00:18.940
So adding a function is fairly easy.

5
00:00:18.990 --> 00:00:20.970
So I'm going to show that in a quick way.

6
00:00:20.970 --> 00:00:27.330
But before we do that I'm going to create another Swift file because we are going to have two classes

7
00:00:27.330 --> 00:00:28.540
right now.

8
00:00:28.560 --> 00:00:31.820
The new class is called Super musician.

9
00:00:31.860 --> 00:00:32.480
OK.

10
00:00:32.760 --> 00:00:41.530
So this is kind of a superior musician compared to a regular musician class.

11
00:00:41.520 --> 00:00:47.580
So we're going to take all of this information and we're going to use them in our superior musician

12
00:00:47.580 --> 00:00:48.300
class.

13
00:00:48.360 --> 00:00:52.780
But right now I want to add a new function before we do that.

14
00:00:52.980 --> 00:00:59.490
So adding a function is fairly easy as I said before you just come into the class and you just say funk

15
00:00:59.760 --> 00:01:01.710
sync for example.

16
00:01:01.710 --> 00:01:06.090
So this is not different than creating any function inside of a class.

17
00:01:06.120 --> 00:01:11.010
So we have done this a lot in WI controllers right.

18
00:01:11.010 --> 00:01:16.770
So for example if I make Kirk or James sing they will sing.

19
00:01:16.770 --> 00:01:18.770
Nothing else matters.

20
00:01:18.780 --> 00:01:25.610
So let me come over here and if I say James that's Sing it will sing then nothing else matters.

21
00:01:25.620 --> 00:01:25.920
Right.

22
00:01:25.920 --> 00:01:32.910
So let me run this and as you can see now we get this print out over here.

23
00:01:33.030 --> 00:01:41.400
So what happens if I want to use this function if I want to use all these properties inside my super

24
00:01:41.550 --> 00:01:45.580
musician I can copy and paste everything you know.

25
00:01:45.840 --> 00:01:49.470
And this will be OK but it's not very efficient.

26
00:01:49.470 --> 00:01:53.580
What if I want to change something in musician class.

27
00:01:53.580 --> 00:01:57.800
What if I'm not allowed to change anything in the musician's class.

28
00:01:57.810 --> 00:02:00.870
Suppose that we are working for a big company.

29
00:02:01.230 --> 00:02:10.830
So it's not actually fair or it's not actually a good idea to copy and paste everything rather than

30
00:02:10.830 --> 00:02:13.980
that I'm going to inherit this class.

31
00:02:14.010 --> 00:02:14.270
OK.

32
00:02:14.310 --> 00:02:21.750
So I can reach those values reach those methods and functions and attributes.

33
00:02:21.750 --> 00:02:22.920
Can we do that.

34
00:02:22.920 --> 00:02:29.650
Yes of course we can do that because this is objective oriented programming right.

35
00:02:29.700 --> 00:02:36.850
Right now I don't even have a class in this superior musician so I'm going to call the super musician.

36
00:02:37.020 --> 00:02:46.410
And before we go into the class I'm going to come over here and say column and musicians.

37
00:02:46.410 --> 00:02:52.090
So which means that disparate musician will inherit something from the musicians.

38
00:02:52.230 --> 00:03:00.000
It will get X has the properties and the functions of the musicians class.

39
00:03:00.060 --> 00:03:02.340
So this is super cool.

40
00:03:02.370 --> 00:03:02.730
OK.

41
00:03:02.730 --> 00:03:07.080
This is one of the greatest features of object oriented programming.

42
00:03:07.140 --> 00:03:12.810
We can now create a super musician object without doing anything actually.

43
00:03:12.810 --> 00:03:16.600
So let me create Kirk as a super musician.

44
00:03:16.700 --> 00:03:21.510
OK so he doesn't see the supreme musician let me do comment B.

45
00:03:21.760 --> 00:03:22.540
Okay.

46
00:03:22.620 --> 00:03:30.510
And then let's go here and create Kirk so super musician as you can see if I open parentheses it will

47
00:03:30.570 --> 00:03:34.560
ask me for these parameters one more time.

48
00:03:34.560 --> 00:03:36.240
So how does it work.

49
00:03:36.240 --> 00:03:41.980
We didn't even write these parameters inside of our super musician class.

50
00:03:42.000 --> 00:03:50.910
We don't have anything in here but since I'm inheriting four from musicians I can't use all of these

51
00:03:50.910 --> 00:04:00.960
properties I can come over here and I can just say this is going to be Kirk and The Age will be 55 instrument

52
00:04:01.200 --> 00:04:08.280
guitar again and type is going to be the lead guitar.

53
00:04:08.280 --> 00:04:10.750
So here you go I have created Kirk.

54
00:04:11.130 --> 00:04:16.580
It's not a musician it's a super musician but I can even make him sing.

55
00:04:16.800 --> 00:04:23.250
So let me delete all of these values in James so we can actually see what is Kurt singing.

56
00:04:23.250 --> 00:04:30.900
So as you can see it says nothing else matters even though I don't have that function in my class it

57
00:04:30.900 --> 00:04:38.040
still works because I'm leveraging inheritance so we can do other things as well.

58
00:04:38.160 --> 00:04:42.300
We can add some more features to super musician.

59
00:04:42.300 --> 00:04:50.910
We can create a sync to function for example and we can just say another thing in here like enter settlement

60
00:04:50.910 --> 00:04:52.560
or enter night.

61
00:04:52.570 --> 00:04:58.970
OK so can I come over here let me do a comment B so it will get synchronized.

62
00:04:59.010 --> 00:05:02.480
Can I come over here and say Kirk that sink too.

63
00:05:02.730 --> 00:05:07.950
Of course I can because Kirk is a superb musician and he can sink.

64
00:05:07.950 --> 00:05:09.980
He can even sink to.

65
00:05:10.080 --> 00:05:13.450
But can I come over here as a James Scott sink.

66
00:05:13.470 --> 00:05:22.020
Yes I can because sink is in the musician's about as you can see we cannot say James that sink to because

67
00:05:22.020 --> 00:05:31.980
sink too belongs to the super musician class so super musician can do everything a musician can do but

68
00:05:32.010 --> 00:05:42.450
also he can seems to write he can do some extra feature extra stuff so I can have another function in

69
00:05:42.450 --> 00:05:51.290
here I can have another attributes and not there functionalities as well but we won't have them in musicians.

70
00:05:51.390 --> 00:05:53.770
So that's to be the of it.

71
00:05:53.790 --> 00:05:58.800
So for example let me show you what the override is.

72
00:05:58.800 --> 00:06:08.310
So if I say override funk sync it means that sync is already defined for me but I'm going to change

73
00:06:08.310 --> 00:06:08.450
it.

74
00:06:08.460 --> 00:06:15.810
I'm going to override it if I write funk sync it will give me an error because this is already defined

75
00:06:15.810 --> 00:06:18.510
in the musicians class and I'm inheriting from it.

76
00:06:18.840 --> 00:06:23.030
So it says that you have to override this.

77
00:06:23.160 --> 00:06:33.930
So OK I want to override this function so I'm going to first call the original sync function and you

78
00:06:33.930 --> 00:06:39.450
can't just say super so super refers to inherited class.

79
00:06:39.480 --> 00:06:43.260
So if you say super it refers to musicians class.

80
00:06:43.260 --> 00:06:48.030
In this case as you can see super is a musician's class.

81
00:06:48.030 --> 00:06:56.430
So I can't reach musicians with the key word super in this inheriting class so I can just say super

82
00:06:56.540 --> 00:06:57.620
dots sync.

83
00:06:57.660 --> 00:07:03.750
For example I am just calling this Super dot sync function as usual.

84
00:07:03.750 --> 00:07:11.370
So this will just print me nothing else matters but also I can add some new lines to nothing else matters

85
00:07:11.720 --> 00:07:12.440
right.

86
00:07:12.450 --> 00:07:16.440
I can just say exit light for example.

87
00:07:16.440 --> 00:07:23.670
So this will give me the nothing else matters and it will give me exit light as well.

88
00:07:23.670 --> 00:07:32.180
So let me go to church and delete the scene too or comment this out and I will only print out Kirk that

89
00:07:32.180 --> 00:07:33.030
sink.

90
00:07:33.120 --> 00:07:39.450
And as you can see it printed out nothing else matters and printed out exit light because I how called

91
00:07:39.680 --> 00:07:42.000
super dots sync.

92
00:07:42.090 --> 00:07:50.430
So if I just do this with James that sync you will only see nothing else matters because James cannot

93
00:07:50.640 --> 00:08:00.120
sink the other line because James is a musician but Kirk is a super musician so that's inheritance.

94
00:08:00.120 --> 00:08:08.130
That's one of the most important aspects of object oriented programming and you can easily use this

95
00:08:08.130 --> 00:08:10.380
in your own codes as well.

96
00:08:10.470 --> 00:08:14.470
It is so easy to use and it is so convenient.

97
00:08:14.580 --> 00:08:20.910
So let's stop here and within the next lecture we're going to learn about a new concept called excess

98
00:08:20.910 --> 00:08:21.660
levels.
