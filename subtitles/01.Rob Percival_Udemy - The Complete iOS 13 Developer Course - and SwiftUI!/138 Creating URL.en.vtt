WEBVTT
1
00:00:00.210 --> 00:00:08.520
Hi within this lecture re going to start writing our codes so that we can get the data to display to

2
00:00:08.520 --> 00:00:15.900
the user and let me write down our steps that we have talked about regarding to learn a lot of new things

3
00:00:16.200 --> 00:00:22.410
in the section so that in order not to get confused we are going to follow these steps.

4
00:00:22.410 --> 00:00:29.610
First we're going to create a request and we're going to open a session which means we're going to go

5
00:00:29.610 --> 00:00:33.080
to that to all that we have talked about.

6
00:00:33.170 --> 00:00:33.760
Okay.

7
00:00:33.900 --> 00:00:37.680
So we're going to go to this your URL.

8
00:00:38.100 --> 00:00:43.380
And after going to this year I'll be going to get the data inside of that.

9
00:00:43.380 --> 00:00:45.060
You're all right.

10
00:00:45.060 --> 00:00:53.840
So does API will provide us with data and we're going to get this response after getting this response.

11
00:00:54.180 --> 00:00:57.870
After getting this data we're going to have to process it.

12
00:00:58.350 --> 00:01:02.600
It's called passing or Jason serialization.

13
00:01:03.070 --> 00:01:03.410
OK.

14
00:01:03.450 --> 00:01:12.030
So this is spelled like this Jason serialization and it means that processing the data in order to show

15
00:01:12.270 --> 00:01:15.370
users that the data that we want.

16
00:01:15.540 --> 00:01:22.860
For example we don't want anything besides the currencies that we have chosen.

17
00:01:23.070 --> 00:01:23.720
Right.

18
00:01:23.730 --> 00:01:29.740
So what are we going to do first in order to create this request and open a session.

19
00:01:29.770 --> 00:01:32.320
We're going to create a euro.

20
00:01:32.550 --> 00:01:39.290
So we have our you're right and we have this your all class you are I'll type in Swift.

21
00:01:39.330 --> 00:01:46.650
So if you write your URL and open up parentheses it will ask you for some parameters.

22
00:01:46.950 --> 00:01:50.280
And as you can see we have a lot of options in here.

23
00:01:50.340 --> 00:01:58.920
Am looking for as simple strings so as you can see this is what I'm looking for because I already have

24
00:01:58.920 --> 00:02:02.220
my Euro in a text format.

25
00:02:02.370 --> 00:02:10.230
So if you come over your browser and if you copied this okay from your browser let me copy this and

26
00:02:10.230 --> 00:02:17.370
then you're going to have to come to your X code and paste this as a string so that's it.

27
00:02:17.460 --> 00:02:20.500
That's how you create a URL.

28
00:02:20.730 --> 00:02:26.520
So make sure you put the string inside of quotation marks of course.

29
00:02:26.520 --> 00:02:31.520
And then later on you going to have to create a session.

30
00:02:31.680 --> 00:02:36.800
So in order to create a session we are going to use this year Alsatian class.

31
00:02:37.440 --> 00:02:46.920
So as you can see this gets the data and manages transferring tasks from data in specified network and

32
00:02:46.920 --> 00:02:49.760
that's exactly what we want.

33
00:02:49.830 --> 00:02:54.960
If you say you URLs session and then dot shared.

34
00:02:54.990 --> 00:02:55.640
OK.

35
00:02:55.740 --> 00:02:59.850
This creates an instance of this your Alsatian class.

36
00:02:59.850 --> 00:03:06.990
So this creates a singleton session which means that you get the same instance when you create this

37
00:03:06.990 --> 00:03:17.050
class so that you won't get confused when you try to create more than mild one actually multiple requests.

38
00:03:17.070 --> 00:03:17.380
OK.

39
00:03:17.390 --> 00:03:26.130
We are going to be working with this only instance when we try to create sessions after creating this

40
00:03:26.130 --> 00:03:29.160
object after creating this instance.

41
00:03:29.160 --> 00:03:36.390
Actually we are going to start this task we are going to start the session by saying that data.

42
00:03:36.390 --> 00:03:38.940
Task and will ask us for a year.

43
00:03:39.360 --> 00:03:42.890
But I'm not going to do this on the same line.

44
00:03:42.960 --> 00:03:43.740
OK.

45
00:03:43.770 --> 00:03:50.800
Rather I'm going to create a variable called task and you're going to see what why I am doing this.

46
00:03:50.820 --> 00:03:52.030
OK.

47
00:03:52.050 --> 00:03:58.710
And after you create this task you can't drive this from the session variable that you have created

48
00:03:59.130 --> 00:04:06.750
obviously that you can't come over here as a session that data task and will ask you for a your URL.

49
00:04:07.080 --> 00:04:11.630
And we want the one with completion handler.

50
00:04:11.850 --> 00:04:15.490
So what is this completion handler.

51
00:04:15.600 --> 00:04:21.240
It's actually defined so what's going to happen once we start this task.

52
00:04:21.240 --> 00:04:26.940
So we're going to give an input in here input being the URL that we have created.

53
00:04:27.330 --> 00:04:27.980
OK.

54
00:04:27.990 --> 00:04:30.720
And it will give us an output.

55
00:04:30.720 --> 00:04:36.480
It will give me a data and a response or an error.

56
00:04:36.480 --> 00:04:36.920
OK.

57
00:04:37.230 --> 00:04:44.940
So I will keep track what's going on so that if I get an error like if I cannot reach to your I can

58
00:04:44.940 --> 00:04:51.870
display it to the user if I get the data I can just process it and display to the user again.

59
00:04:51.900 --> 00:04:56.940
So this completion handler actually is very good for me to implement.

60
00:04:57.660 --> 00:05:05.050
So make sure you choose the one with the completion handler every going to use does a lot in the rest

61
00:05:05.050 --> 00:05:06.350
of the sections as well.

62
00:05:06.370 --> 00:05:13.660
Because after this section you're going to be dealing with this kind of situation constantly.

63
00:05:13.660 --> 00:05:19.750
So in the you're out we can't just force our app design if we don't do this as you can see it gives

64
00:05:19.750 --> 00:05:24.930
us an error because I'm certain right now that this is going to work.

65
00:05:24.940 --> 00:05:32.380
And of course you can use if flat if you want if you hit enter on the completion block it will create

66
00:05:32.380 --> 00:05:34.070
a closure for you.

67
00:05:34.090 --> 00:05:39.960
So as you can see these are the outputs of our callback function.

68
00:05:40.030 --> 00:05:45.490
Our completion block and in this block we can write whatever we want.

69
00:05:45.490 --> 00:05:50.920
We can define what's going to happen after this task got executed.

70
00:05:51.220 --> 00:05:54.760
So this structure is called closure.

71
00:05:54.760 --> 00:06:00.270
So I'm going to give this some variable names like date our response on air.

72
00:06:00.270 --> 00:06:04.420
You can choose your own variable name as well.

73
00:06:04.420 --> 00:06:12.250
And for example I'm going to say if error is not nil and I'm going to display an alert message if the

74
00:06:12.250 --> 00:06:14.640
error is not nearly in this case.

75
00:06:14.770 --> 00:06:22.990
And again this structure is called closure and we re going to be using that from now on again.

76
00:06:22.990 --> 00:06:25.450
So let me create my Elliot in here.

77
00:06:25.450 --> 00:06:28.820
Remember we use UI Eliot's controller.

78
00:06:28.920 --> 00:06:29.370
OK.

79
00:06:29.380 --> 00:06:37.210
In order to achieve this and it will ask us for a title and a message and a smile and for a title I'm

80
00:06:37.210 --> 00:06:44.180
going I'm going to go for error and the message of message will not be something constant.

81
00:06:44.290 --> 00:06:51.390
I'm going to use this error message that comes from the output of this task.

82
00:06:51.490 --> 00:06:57.910
And if you say that's localised description it will just create that description that the user can understand.

83
00:06:57.910 --> 00:07:06.280
Like you have no connection or you can just try again later if you say dots here you can just go for

84
00:07:06.340 --> 00:07:15.190
alert and remember we re going to have to create a button in order to close this down and for button

85
00:07:15.210 --> 00:07:21.520
I'm going to use the default cycle and I don't need any handler in this button and I'm going to add

86
00:07:21.520 --> 00:07:28.600
this button as an action to my Ellard and for the last time I'm going to present this.

87
00:07:28.600 --> 00:07:34.300
But since we're in a closure we have to say s that's present.

88
00:07:34.360 --> 00:07:34.790
Okay.

89
00:07:35.410 --> 00:07:43.210
So self doubt presents I'm going to present the alert of course I want the animation as usual and the

90
00:07:43.210 --> 00:07:51.940
completion will be nil and also if we don't have any error it means that I may have ADD dates I don't

91
00:07:51.940 --> 00:07:53.350
have any error.

92
00:07:53.400 --> 00:07:54.280
Okay.

93
00:07:54.310 --> 00:07:56.470
And I believe I misspelled too.

94
00:07:56.560 --> 00:07:57.760
Yep.

95
00:07:57.760 --> 00:08:03.630
And since I don't have any error I can just check to see if data is nil or not.

96
00:08:03.730 --> 00:08:09.980
And if data is not nil I can go ahead and process it to show to the user.

97
00:08:10.030 --> 00:08:11.270
OK.

98
00:08:11.350 --> 00:08:18.850
And in fact in this actually in this path I completed the first step.

99
00:08:18.910 --> 00:08:28.420
So if data is not nil it means that I managed to get I managed to create the request and after this

100
00:08:28.570 --> 00:08:34.760
I will get the response I will get the data and then later on I'm going to pass it.

101
00:08:34.840 --> 00:08:38.620
I'm going to process it to show to the user.

102
00:08:38.620 --> 00:08:38.920
OK.

103
00:08:38.950 --> 00:08:43.400
So this is number one this is number two.

104
00:08:43.450 --> 00:08:49.630
So that's it for right now we're going to stop here and within the next lecture regroup to continue

105
00:08:49.630 --> 00:08:52.390
building our currency converter app.
