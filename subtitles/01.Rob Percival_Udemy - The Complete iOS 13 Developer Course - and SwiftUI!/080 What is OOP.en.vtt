WEBVTT
1
00:00:00.810 --> 00:00:07.280
Hi within this section we're going to learn about object oriented programming.

2
00:00:07.710 --> 00:00:13.250
So this is a very important concept and we're going to deep dive into it.

3
00:00:13.530 --> 00:00:16.890
First of all we're going to start with classes.

4
00:00:16.890 --> 00:00:21.690
Classes are so important and we have seen that before right.

5
00:00:21.720 --> 00:00:26.960
So we have worked with classes in our real controller rehabbing class.

6
00:00:26.970 --> 00:00:30.760
And basically we write everything in our class.

7
00:00:30.870 --> 00:00:31.740
Right.

8
00:00:31.830 --> 00:00:40.940
So classes actually have functions have rebels have events inside of them and we're going to see what

9
00:00:40.940 --> 00:00:43.250
are those in this lecture.

10
00:00:43.290 --> 00:00:47.500
And we're going to see what is an object oriented programming.

11
00:00:48.390 --> 00:00:54.340
So first of all what are some elements inside of classes.

12
00:00:54.360 --> 00:01:04.560
We have properties we have some variables like age like name so we can call these attributes or properties.

13
00:01:04.560 --> 00:01:13.350
And this defines some attributes some options that our classes can have like we can have a musician

14
00:01:13.350 --> 00:01:20.730
class and we're going to have this in a few lecture and we will have some properties inside of that

15
00:01:20.730 --> 00:01:22.230
musician class.

16
00:01:22.230 --> 00:01:30.520
So if we can create an object from that class we can call this an object or an instance.

17
00:01:30.540 --> 00:01:31.320
Okay.

18
00:01:31.380 --> 00:01:35.650
And this instance or this object can have properties.

19
00:01:35.700 --> 00:01:40.350
So this object for example a musician can have an H.

20
00:01:40.410 --> 00:01:49.500
You can have a name so we can actually create more than one object and we can assign different ages

21
00:01:49.530 --> 00:01:52.740
different names to these each object.

22
00:01:53.220 --> 00:01:58.740
So this is not different than creating a string object or any integer object.

23
00:01:58.770 --> 00:01:59.350
Okay.

24
00:01:59.550 --> 00:02:07.380
But this time we're going to create create our own classes in which we define own properties own values

25
00:02:08.430 --> 00:02:12.530
so properties are basically variables that we set.

26
00:02:12.540 --> 00:02:14.070
So this is easy.

27
00:02:14.070 --> 00:02:17.700
And also we can how actions the inside of classes as well.

28
00:02:18.210 --> 00:02:23.870
So we can have a function to make our musicians sing for example.

29
00:02:23.880 --> 00:02:26.830
So classes are the bigger part.

30
00:02:26.850 --> 00:02:27.420
OK.

31
00:02:27.480 --> 00:02:33.570
So classes are the biggest part actually making up a whole project.

32
00:02:33.570 --> 00:02:37.390
So this is kind of blueprint of our projects.

33
00:02:37.410 --> 00:02:43.560
And in this blueprint we can have actions so we can make our singers sing.

34
00:02:43.560 --> 00:02:45.750
We can make whatever we want.

35
00:02:46.590 --> 00:02:55.440
And we can how even says Wells for example defining what will happen if we resume this or defining some

36
00:02:55.530 --> 00:02:57.920
other events as well.

37
00:02:58.490 --> 00:03:02.520
And we're going to see a lot of examples of classes.

38
00:03:02.520 --> 00:03:10.410
And if you have heard something like model in programming basically that's what we're going to do in

39
00:03:10.410 --> 00:03:15.930
this section regrowing to create a model and we're going to create some instances of that model and

40
00:03:15.930 --> 00:03:18.800
they will have properties actions.

41
00:03:18.810 --> 00:03:26.190
So let me tell you what objectives oriented programming is in an analogy so you would understand it

42
00:03:26.190 --> 00:03:26.940
better.

43
00:03:26.940 --> 00:03:27.780
OK.

44
00:03:27.960 --> 00:03:33.340
So what was the first programming language that has ever come out.

45
00:03:33.480 --> 00:03:39.780
Each of us c and c was not an objected oriented programming language.

46
00:03:40.260 --> 00:03:43.740
So it was kind of a procedural programming language.

47
00:03:43.740 --> 00:03:44.600
OK.

48
00:03:44.700 --> 00:03:50.800
So what is the difference between procedural and object oriented programming.

49
00:03:50.820 --> 00:03:55.020
Suppose that you have an agency a software company.

50
00:03:55.070 --> 00:03:55.370
OK.

51
00:03:55.380 --> 00:04:04.920
This is our company and inside of this software company we have some workers we have some employees.

52
00:04:05.220 --> 00:04:10.590
So in the procedural programming we have this kind of a structure.

53
00:04:10.650 --> 00:04:21.000
First we tell our employee to do the design create some design follow our app build some user interfaces

54
00:04:21.420 --> 00:04:30.390
and then we go to same employee as say that OK now write the code code our app and implement the design

55
00:04:30.390 --> 00:04:33.840
that you have created before.

56
00:04:33.840 --> 00:04:41.120
And then later on we go on and say Dad please do the marketing and business arrangement says well.

57
00:04:41.550 --> 00:04:48.930
So find some investors do some app store optimization so that our app will be visible throughout the

58
00:04:48.930 --> 00:04:54.930
app store and take care of everything from bottom to the top.

59
00:04:55.620 --> 00:05:02.320
So this will be a procedural programming run there in object oriented programming.

60
00:05:02.340 --> 00:05:07.080
We have different employees we have different classes different objects.

61
00:05:07.140 --> 00:05:10.220
So first we tell take care of the design.

62
00:05:10.260 --> 00:05:10.960
Okay.

63
00:05:11.040 --> 00:05:14.340
And we go to another employee another class.

64
00:05:14.340 --> 00:05:17.370
We say that please do the coding for us.

65
00:05:17.370 --> 00:05:19.260
And then finally we say that.

66
00:05:19.470 --> 00:05:19.800
Yeah.

67
00:05:19.890 --> 00:05:20.760
Yep he's ready.

68
00:05:20.760 --> 00:05:27.840
Please go find us some investors and take care of marketing as you might imagine these three classes

69
00:05:27.870 --> 00:05:35.910
these three people can talk with each other communicate with each other but they have no idea what the

70
00:05:35.910 --> 00:05:38.250
other person is doing in the real life.

71
00:05:38.280 --> 00:05:46.170
So designer will not know what the programming people are doing or programming people coders will not

72
00:05:46.170 --> 00:05:49.170
know what marketing people are doing.

73
00:05:49.410 --> 00:05:55.680
So this is kind of synchronized between each other but they are focusing on their jobs.

74
00:05:56.070 --> 00:05:59.520
So this is an example of object oriented programming.

75
00:06:00.330 --> 00:06:08.760
So as you might imagine this way is much more efficient than saying please take care of everything in

76
00:06:08.820 --> 00:06:09.990
one person.

77
00:06:10.000 --> 00:06:16.710
We how some different classes talking with each other working with each other synchrony asleep.

78
00:06:16.740 --> 00:06:20.910
But they're only focusing on their job.

79
00:06:20.910 --> 00:06:26.150
So this is an analogy for understanding object oriented programming.

80
00:06:26.460 --> 00:06:32.910
And of course if you're not gonna stop here we're just going to continue and we will see how to build

81
00:06:33.210 --> 00:06:41.220
our own classes how to create our own objects and how to implement all of this information into real

82
00:06:41.220 --> 00:06:42.240
apps as well.

83
00:06:42.540 --> 00:06:45.760
So that's what we're going to do within this section.

84
00:06:45.810 --> 00:06:49.110
So let's stop here and continue within the next lecture.
