1
00:00:00,480 --> 00:00:01,150
Hi.

2
00:00:01,310 --> 00:00:07,080
We didn't this lecture reading to learn something new and it's called a rates.

3
00:00:07,080 --> 00:00:12,520
OK so in order to do that I'm just going to save this playground.

4
00:00:12,560 --> 00:00:14,190
I'm going to close it down.

5
00:00:14,190 --> 00:00:20,620
Of course you may want to continue from this one as well but I don't want to make it too long because

6
00:00:20,620 --> 00:00:26,330
it's it will get hard to actually keep track of what we're doing.

7
00:00:26,370 --> 00:00:29,520
So I'm just going to create another playground.

8
00:00:29,620 --> 00:00:36,980
I'm going to create an stand alone playground for our air race.

9
00:00:36,990 --> 00:00:41,910
OK I'm saving all of this into my AOS complete folder.

10
00:00:41,910 --> 00:00:46,060
Later on I'm going to share all of these playgrounds with you.

11
00:00:46,080 --> 00:00:47,270
We are geared up.

12
00:00:47,880 --> 00:00:50,550
So let me go to my playgrounds folder.

13
00:00:50,820 --> 00:00:53,010
And this was named two variables.

14
00:00:53,010 --> 00:00:55,880
Now I'm going to name these as Array.

15
00:00:56,160 --> 00:01:03,320
OK so what is an array and how we can use those arrays.

16
00:01:03,390 --> 00:01:06,810
So let me create this and I will tell you all about it.

17
00:01:06,840 --> 00:01:08,370
Don't worry.

18
00:01:08,370 --> 00:01:13,650
So arrays are actually collections of values collections of data types.

19
00:01:13,650 --> 00:01:18,950
OK so let me run these and see if we have something wrong here.

20
00:01:18,960 --> 00:01:19,400
Nope.

21
00:01:19,440 --> 00:01:21,460
Everything seems to be working.

22
00:01:21,720 --> 00:01:29,400
So I'm going to start by deleting this line and rather than creating a simple string over here I'm just

23
00:01:29,400 --> 00:01:31,810
going to create an array.

24
00:01:31,920 --> 00:01:36,570
So what are collections of data types.

25
00:01:36,600 --> 00:01:45,430
So let's suppose that I have to store my favorite movies in something like this.

26
00:01:45,900 --> 00:01:55,440
So if you say var my favorite movies you can just open the breaks open the parentheses but not like

27
00:01:55,470 --> 00:01:55,830
this.

28
00:01:55,830 --> 00:01:59,580
Now that curly brace but rather just like this.

29
00:01:59,610 --> 00:02:07,530
So you do it with option an eight or option seven depending on your keyboard and if you close this that's

30
00:02:07,530 --> 00:02:09,420
how you create on Eric.

31
00:02:09,460 --> 00:02:16,850
OK so here I can write more than one value actually.

32
00:02:16,860 --> 00:02:23,640
So for example I can just say pulp fiction with quotation marks and this is a string and I can just

33
00:02:23,910 --> 00:02:28,050
do a coma and I can continue as long as I want.

34
00:02:28,080 --> 00:02:30,450
For example I can go for Kill Bill.

35
00:02:30,510 --> 00:02:31,370
OK.

36
00:02:31,650 --> 00:02:37,640
And again with a comma I can just go for another movie that I'm fan of like.

37
00:02:37,680 --> 00:02:39,400
Or is are void dogs.

38
00:02:39,450 --> 00:02:40,800
OK.

39
00:02:41,040 --> 00:02:42,090
So here you go.

40
00:02:42,090 --> 00:02:50,450
I have created a favorite movie array so I could have done that with different variables.

41
00:02:50,520 --> 00:02:51,270
Right.

42
00:02:51,270 --> 00:02:58,800
So I could I could have gone like my favorite movie one varmint my favorite movie too to my favorite

43
00:02:58,800 --> 00:03:02,910
movie three and a sign those values two different variables.

44
00:03:02,910 --> 00:03:11,860
But what if I have like a thousand values then it wouldn't be efficient to create 1000 variables at

45
00:03:11,910 --> 00:03:13,440
one time.

46
00:03:13,440 --> 00:03:14,250
Right.

47
00:03:14,250 --> 00:03:15,540
It wouldn't be efficient.

48
00:03:15,540 --> 00:03:21,870
It wouldn't be easy and this is actually easy because let's suppose that I'm downloading these values

49
00:03:21,870 --> 00:03:26,250
from internet rather than just writing those values.

50
00:03:26,250 --> 00:03:37,500
So if I can download a list OK of a favorite movie of someone or of mine I can just store these all

51
00:03:37,500 --> 00:03:43,030
of these values actually into one variable rather than creating everything one by one.

52
00:03:43,760 --> 00:03:45,300
And I cannot even do that.

53
00:03:45,300 --> 00:03:54,720
I can't go for my bar my movie One is this var my movie too is this but I don't know the exact amount

54
00:03:54,840 --> 00:03:59,850
of the movies that is going to be downloaded from the Internet.

55
00:03:59,880 --> 00:04:01,260
In most of the cases.

56
00:04:01,260 --> 00:04:01,930
Right.

57
00:04:01,950 --> 00:04:06,760
So in an array I can store as many as I want.

58
00:04:07,050 --> 00:04:08,970
So I can use this area.

59
00:04:09,480 --> 00:04:14,130
I can work with collections of values efficiently.

60
00:04:14,130 --> 00:04:22,410
So that's why we're using arrays in programming language as you can see arrays you can see lists.

61
00:04:22,590 --> 00:04:30,110
You can see these kind of values data structures in almost all programming languages because they're

62
00:04:30,150 --> 00:04:31,580
so efficient.

63
00:04:31,590 --> 00:04:37,910
You just create one variable and you saw as many as data you want in them.

64
00:04:38,100 --> 00:04:44,030
So I'm just going to delete this variable over here because I'm not going to do anything with this.

65
00:04:44,070 --> 00:04:50,960
For example if you say my favorite movies as you can see this is now an array of strings because all

66
00:04:50,960 --> 00:04:58,300
the values in my area are actually strings so we just want to keep it that way.

67
00:04:58,300 --> 00:05:05,690
Most of the time but if I want to can I add another value here like five.

68
00:05:06,280 --> 00:05:08,890
Yeah I actually I can do that.

69
00:05:08,890 --> 00:05:15,740
If you open this warning over here or error it gives you a suggestion.

70
00:05:15,760 --> 00:05:22,530
It says that insert as any because this is not a homogeneous collection.

71
00:05:22,540 --> 00:05:26,920
This is a heterogeneous collection right now.

72
00:05:26,920 --> 00:05:30,810
So what does as any mean.

73
00:05:30,820 --> 00:05:35,510
Let me fix does let me add this and I'm going to explain what it is.

74
00:05:35,530 --> 00:05:41,290
And we're just going to use this technique in some other instances as well.

75
00:05:42,610 --> 00:05:47,000
So any means any type we don't know the type yet.

76
00:05:47,020 --> 00:05:55,530
So this is either a string or a boolean or an integer and as means cast this value as a.

77
00:05:56,440 --> 00:06:02,620
So this was originally a strings of every array of strings.

78
00:06:02,620 --> 00:06:03,100
Right.

79
00:06:03,520 --> 00:06:06,630
So this is now an array of any.

80
00:06:06,640 --> 00:06:14,020
So as means cast think ok and any means any object actually.

81
00:06:14,020 --> 00:06:18,280
So this is an array of any object.

82
00:06:18,280 --> 00:06:19,540
We don't know the type.

83
00:06:19,540 --> 00:06:27,640
We don't care what the type is at this moment and we can't save anything we want in this area as long

84
00:06:27,640 --> 00:06:29,550
as it makes sense obviously.

85
00:06:29,710 --> 00:06:37,270
For example I can go over here and add a boolean for God's sake and so in my favorite movies I have

86
00:06:37,270 --> 00:06:44,370
a string I have an integer and even I have a boolean or any means literally and any objects.

87
00:06:44,640 --> 00:06:45,930
OK.

88
00:06:46,210 --> 00:06:51,820
And we're going to use this casting and we going to use this any later on.

89
00:06:53,110 --> 00:06:59,720
So now if I do my favorite movies it will show my array as an any object.

90
00:06:59,980 --> 00:07:09,740
OK so if I do my favorite movies zero it means that get the first element and show it to me and it starts

91
00:07:09,770 --> 00:07:10,480
with zero.

92
00:07:10,480 --> 00:07:10,940
Yes.

93
00:07:10,960 --> 00:07:16,710
And this is called an index and the index of an array starts with the number 0.

94
00:07:16,750 --> 00:07:19,120
It goes 0 1 2 3 4 5.

95
00:07:20,020 --> 00:07:22,720
So I can just say my favorite movies won.

96
00:07:22,990 --> 00:07:28,870
OK let me play this as you can see on the right hand side we get the values the respective values.

97
00:07:28,930 --> 00:07:32,170
OK so this is called index sync.

98
00:07:32,290 --> 00:07:40,960
My favorite movie Zero gave me Pulp Fiction Kill Bill one 0 roadblocks tree and if I go for the other

99
00:07:41,410 --> 00:07:44,430
elements I can get them as well.

100
00:07:44,530 --> 00:07:47,440
So let me try and get them as well actually.

101
00:07:47,440 --> 00:07:50,100
So my favorite movies too.

102
00:07:50,110 --> 00:07:50,900
OK.

103
00:07:50,920 --> 00:07:53,010
This will give mirrors a royal dogs.

104
00:07:53,050 --> 00:07:54,500
My favorite movies tree.

105
00:07:54,520 --> 00:07:56,060
This will give me five.

106
00:07:56,170 --> 00:08:00,520
And my favorite movies for this will give me true.

107
00:08:00,520 --> 00:08:02,230
So let me run all of this.

108
00:08:02,250 --> 00:08:05,920
So 0 1 2 4 0.

109
00:08:06,010 --> 00:08:06,910
Over here.

110
00:08:06,910 --> 00:08:07,280
OK.

111
00:08:07,290 --> 00:08:08,490
3 4.

112
00:08:08,690 --> 00:08:12,610
And can I do something like my free movies 5.

113
00:08:12,610 --> 00:08:13,690
No I cannot do that.

114
00:08:13,690 --> 00:08:17,680
I already have what I have in my area or here right.

115
00:08:17,680 --> 00:08:19,420
It will give me in there.

116
00:08:19,480 --> 00:08:28,360
Yeah as you can see when I hit dot over here I cannot reach the methods or attributes or options of

117
00:08:28,610 --> 00:08:33,900
strings so I cannot do something with Pulp Fiction over here.

118
00:08:33,910 --> 00:08:35,080
Why is that.

119
00:08:35,080 --> 00:08:38,710
Because it thinks that this is not a strength.

120
00:08:38,710 --> 00:08:40,930
This is an annual object.

121
00:08:40,940 --> 00:08:44,700
I can't try to manually write this on my own.

122
00:08:44,800 --> 00:08:52,120
But as you can see it says that really the type of any has no member uppercase because this is and this

123
00:08:52,120 --> 00:08:54,260
is not a string for Swift.

124
00:08:54,310 --> 00:08:56,530
This is an any object.

125
00:08:57,160 --> 00:09:02,040
And this is basically why we try to keep the same type values inside of an array.

126
00:09:02,050 --> 00:09:08,540
In order to reach their methods reach their attributes and change them and do something with them.

127
00:09:08,590 --> 00:09:17,050
I can have heterogeneous values as here with casting as any but if I have the same values inside of

128
00:09:17,050 --> 00:09:18,880
an area like as string Gary.

129
00:09:19,270 --> 00:09:26,450
So let me say that were my string array rather than my favorite movies.

130
00:09:26,560 --> 00:09:28,940
So I'm going to go for tests.

131
00:09:28,990 --> 00:09:29,730
Okay.

132
00:09:29,860 --> 00:09:34,180
And test two and one more test treat.

133
00:09:34,740 --> 00:09:40,270
Okay so this is actually an array of strings right.

134
00:09:40,270 --> 00:09:45,300
If you do my string Gary you will see that this is actually an array of strings.

135
00:09:45,310 --> 00:09:50,410
Now I can go for my string Gary 0 and this will give me test.

136
00:09:50,410 --> 00:09:57,460
Now I can reach those methods I can reach those attributes in functions and everything.

137
00:09:57,530 --> 00:10:06,380
So if I say uppercase and if I run this now I will see that I have converted this task to be uppercase.

138
00:10:07,850 --> 00:10:18,110
So you can use this very efficiently victories you can just call what element you want and you can do

139
00:10:18,140 --> 00:10:25,130
whatever you want to do as long as they're the same object stairs they have the same values.

140
00:10:25,220 --> 00:10:30,850
So both technique has their own advantages and disadvantages.

141
00:10:30,980 --> 00:10:33,570
You may choose when to use which to use.

142
00:10:33,980 --> 00:10:37,970
So let me show you something else you can do something like this right.

143
00:10:37,970 --> 00:10:44,750
My string Gary does count and it will give you the current count how many elements are there in that

144
00:10:44,750 --> 00:10:46,160
list in that area.

145
00:10:46,880 --> 00:10:49,360
So you can do something like this.

146
00:10:49,520 --> 00:10:53,030
My string array and open parentheses.

147
00:10:53,030 --> 00:10:59,670
And rather than saying two over here if I say two I will get test three.

148
00:10:59,780 --> 00:11:01,090
Right.

149
00:11:01,100 --> 00:11:06,410
I can't just try to get this with my string your eight.

150
00:11:06,410 --> 00:11:07,910
That count.

151
00:11:07,910 --> 00:11:08,900
Right.

152
00:11:08,900 --> 00:11:16,110
And in fact you may try to post the video and get it on your own rather than saying to.

153
00:11:16,400 --> 00:11:27,230
I can just go for my string array OK my string Gary dot count minus one.

154
00:11:27,230 --> 00:11:34,070
So my string your a will give me three and if I subtract one from that I can get the same result over

155
00:11:34,070 --> 00:11:34,580
here.

156
00:11:34,580 --> 00:11:44,570
So this is useful right because I can maybe add some more over in my string Gary I can just go for test

157
00:11:44,570 --> 00:11:52,460
four and if I run this this will give me an error because I forgot to add the quotation mark at the

158
00:11:52,460 --> 00:11:52,850
end.

159
00:11:53,090 --> 00:12:00,410
But if I run this right now I will still get test for I will still get the last elements.

160
00:12:00,500 --> 00:12:01,610
OK.

161
00:12:01,900 --> 00:12:05,200
And as you can see I got test for.

162
00:12:06,050 --> 00:12:08,060
So you can use this.

163
00:12:08,060 --> 00:12:14,060
And of course there is another method for that as well I can just go over here and I can say my Stringer

164
00:12:14,060 --> 00:12:16,610
a dot last.

165
00:12:16,640 --> 00:12:25,010
So this will give me the last object lost elements so I can get test for or here maybe I want to get

166
00:12:25,310 --> 00:12:28,480
my surgery that's count minus two.

167
00:12:28,500 --> 00:12:31,450
That makes sense to use this technique.

168
00:12:31,610 --> 00:12:37,760
I can get test three I can get not the last but the one before that.

169
00:12:37,760 --> 00:12:41,170
Using this my string array that count minus two.

170
00:12:42,200 --> 00:12:46,320
So what else can I do with string arrays or arrays in general.

171
00:12:46,820 --> 00:12:50,570
I can't do a hard and this will sort the array.

172
00:12:50,890 --> 00:12:51,730
OK.

173
00:12:51,800 --> 00:12:54,230
And let's see I get.

174
00:12:54,230 --> 00:12:54,900
Test.

175
00:12:54,920 --> 00:12:57,620
Test you test three test four.

176
00:12:57,680 --> 00:13:04,130
And since this is a string text it will sort those texts alphabetically.

177
00:13:04,130 --> 00:13:08,150
So let me change those values and we'll see we'll test that.

178
00:13:08,150 --> 00:13:11,570
So test six tests to test one test four.

179
00:13:12,140 --> 00:13:16,050
So this is not in alphabetical order right now.

180
00:13:16,070 --> 00:13:23,930
So if I run over this if I run this it fully recompile the codes and as you can see my values has been

181
00:13:23,930 --> 00:13:24,770
changed.

182
00:13:24,950 --> 00:13:30,200
But if I run the last line over here I still get the same result.

183
00:13:30,200 --> 00:13:34,890
Test one two three four or test one two four six.

184
00:13:34,910 --> 00:13:37,630
So this is a battle order right now.

185
00:13:38,660 --> 00:13:46,730
And if it was an integer array it will just order it will just sort the array based on the values of

186
00:13:46,730 --> 00:13:52,660
the integers and we have been working with strings to this point.

187
00:13:52,670 --> 00:13:59,780
But of course we can do something like an integer array so let's call this my number array and I can

188
00:13:59,780 --> 00:14:03,740
go for one two three four five six seven over here.

189
00:14:03,740 --> 00:14:07,370
So this will be an array of integers.

190
00:14:07,370 --> 00:14:15,680
It's the same principle you can just add whatever you want to add inside of an array now we can't stop

191
00:14:15,680 --> 00:14:15,890
you.

192
00:14:15,890 --> 00:14:22,220
That's it for is at this moment because we're going to use a phrase in most of the apps that we going

193
00:14:22,220 --> 00:14:23,120
to build anyway.

194
00:14:23,220 --> 00:14:26,120
We're going to get to practice them so much.

195
00:14:26,180 --> 00:14:32,960
Now we will continue some other array like data structures like stats and dictionaries and we are going

196
00:14:32,960 --> 00:14:35,000
to learn what they are.

197
00:14:35,000 --> 00:14:36,740
In the next lecture.
