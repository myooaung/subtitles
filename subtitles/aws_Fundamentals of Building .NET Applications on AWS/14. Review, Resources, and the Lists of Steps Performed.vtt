WEBVTT
1
00:00:00.940 --> 00:00:02.690
[Autogenerated] well you now have,

2
00:00:02.690 --> 00:00:08.280
or at least learned how to create an s p dot net core application that's

3
00:00:08.280 --> 00:00:12.940
fully running on AWS in three different scenarios.

4
00:00:12.940 --> 00:00:16.290
A straight up Web application running on a Kestral Web

5
00:00:16.290 --> 00:00:20.100
server inside an A C two container.

6
00:00:20.100 --> 00:00:24.880
The same application running in a series of docker containers managed

7
00:00:24.880 --> 00:00:29.840
by fargate on Amazon's elastic Container services.

8
00:00:29.840 --> 00:00:32.400
And now as a serverless application,

9
00:00:32.400 --> 00:00:37.940
which is a composition of a lambda function and our application.

10
00:00:37.940 --> 00:00:41.680
While realizing some of the benefits of Lambda functions,

11
00:00:41.680 --> 00:00:44.790
including the fact that your costs are relative to

12
00:00:44.790 --> 00:00:46.610
the requests hitting the function,

13
00:00:46.610 --> 00:00:51.210
you were able to achieve this with a standard dot net application.

14
00:00:51.210 --> 00:00:54.030
It's a clever solution by AWS,

15
00:00:54.030 --> 00:00:57.160
letting Cloud Formacion do the work of building the function.

16
00:00:57.160 --> 00:01:00.600
And coordinating the resource is an infrastructure

17
00:01:00.600 --> 00:01:03.120
that lead to your .net CoreLogic,

18
00:01:03.120 --> 00:01:06.100
and you can still write and debug the application,

19
00:01:06.100 --> 00:01:08.570
using your familiar pools and language,

20
00:01:08.570 --> 00:01:12.500
and even debug it in visual studio or your favorite I D.

21
00:01:12.500 --> 00:01:16.770
E for writing dot net applications or even at the command line.

22
00:01:16.770 --> 00:01:21.390
And you can do all of that before deploying it up to the clown while you could

23
00:01:21.390 --> 00:01:26.680
start with one of the many AWS templates for building serverless applications

24
00:01:26.680 --> 00:01:29.750
and then build your logic into that solution.

25
00:01:29.750 --> 00:01:33.220
I took the path of learning from one of those templates and then

26
00:01:33.220 --> 00:01:37.040
applying some of its code to our existing application.

27
00:01:37.040 --> 00:01:42.250
Thanks to the custom VPC I created early on for the RTs database,

28
00:01:42.250 --> 00:01:46.380
we got to experience some more useful features of the function,

29
00:01:46.380 --> 00:01:50.250
connecting it to that VPC and learning more about security

30
00:01:50.250 --> 00:01:54.740
groups as well as about VPC endpoints.

31
00:01:54.740 --> 00:01:55.620
And in the end,

32
00:01:55.620 --> 00:02:00.690
our A p I that we had already proven out in visual studio in Elastic

33
00:02:00.690 --> 00:02:06.050
Beanstalk and on Fargate also works perfectly well in a serverless

34
00:02:06.050 --> 00:02:10.140
application with AWS Lambda Functions.

35
00:02:10.140 --> 00:02:12.740
And it's been quite the journey,

36
00:02:12.740 --> 00:02:16.470
especially if you have had no experience with AWS.

37
00:02:16.470 --> 00:02:18.940
Before you began this course,

38
00:02:18.940 --> 00:02:23.560
who knew that Amazon Web services had so much to offer .net

39
00:02:23.560 --> 00:02:28.340
developers and the software that we built Now you know,

40
00:02:28.340 --> 00:02:34.560
and there is much more to dot net on AWS than what we've covered in this course.

41
00:02:34.560 --> 00:02:37.510
There were a lot of steps along the way in this module,

42
00:02:37.510 --> 00:02:42.390
so the next few slides encapsulate the steps for transforming the original

43
00:02:42.390 --> 00:02:47.840
application and the steps we took when deploying the serverless application

44
00:02:47.840 --> 00:02:50.940
and getting all of that access set up correctly.

45
00:02:50.940 --> 00:02:55.480
Here are some links and other resource is I mentioned in this module and

46
00:02:55.480 --> 00:02:59.040
some additional ones that I think you might find helpful.

47
00:02:59.040 --> 00:03:10.000
I'm Julie Lierman and thank you so much for watching my course fundamentals of building dot net applications on Amazon Web services.

