WEBVTT
1
00:00:01.040 --> 00:00:04.940
[Autogenerated] We're just about ready to debunk this app in a local container,

2
00:00:04.940 --> 00:00:08.490
but there is one step we need to perform first.

3
00:00:08.490 --> 00:00:12.040
Notice that the debug button now says Dr next to it.

4
00:00:12.040 --> 00:00:15.220
This is just a reflection of a change that the doctor extension

5
00:00:15.220 --> 00:00:17.520
made to the visual studio launch settings.

6
00:00:17.520 --> 00:00:19.940
When I added the doctor support,

7
00:00:19.940 --> 00:00:23.460
you can still run in debug against I s orchestral,

8
00:00:23.460 --> 00:00:26.840
which will totally ignore anything to do with Docker.

9
00:00:26.840 --> 00:00:29.880
But I will use the docker debug option that will

10
00:00:29.880 --> 00:00:32.140
trigger Docker to read the docker file,

11
00:00:32.140 --> 00:00:35.670
build the images and then run the final published image and

12
00:00:35.670 --> 00:00:39.120
weaken Still deep bug while the APP is running inside a

13
00:00:39.120 --> 00:00:41.150
docker container just like we can.

14
00:00:41.150 --> 00:00:45.530
If it's running in the other options before clicking that button,

15
00:00:45.530 --> 00:00:48.540
though, we need to make a tweak to the application.

16
00:00:48.540 --> 00:00:52.180
This isn't a docker problem, but more of a security issue.

17
00:00:52.180 --> 00:00:55.210
The container won't be able to get through to the AWS

18
00:00:55.210 --> 00:00:59.730
Systems manager because it won't and shouldn't inherit the

19
00:00:59.730 --> 00:01:01.440
permissions from the tool kit.

20
00:01:01.440 --> 00:01:05.210
But we don't really need to get the database credentials from AWS.

21
00:01:05.210 --> 00:01:08.950
Anyway, we've got them here in our A s p dot net secrets.

22
00:01:08.950 --> 00:01:14.630
So what I'll do is tell the host builder that if I'm running in visual studio,

23
00:01:14.630 --> 00:01:15.580
in other words,

24
00:01:15.580 --> 00:01:19.940
when the hosting environment is the development hosting environment,

25
00:01:19.940 --> 00:01:24.320
then don't even bother trying to read from the AWS parameter store.

26
00:01:24.320 --> 00:01:26.760
And when im debugging in a container,

27
00:01:26.760 --> 00:01:30.040
the doctor tools will ensure that the hosting environment

28
00:01:30.040 --> 00:01:32.940
variable is still set to development.

29
00:01:32.940 --> 00:01:36.650
When I truly deploy this to AWS at runtime,

30
00:01:36.650 --> 00:01:39.200
the hosting environment will be production,

31
00:01:39.200 --> 00:01:43.690
not development, and the code to read from the parameter store will get executed.

32
00:01:43.690 --> 00:01:51.000
So this is a good way to have your cake during development and eat it too in production.

