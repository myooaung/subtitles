WEBVTT
1
00:00:01.140 --> 00:00:04.520
[Autogenerated] Now we can recreate our secrets on AWS.

2
00:00:04.520 --> 00:00:09.920
While the AWS Toolkit for visual studio is extremely rich in features,

3
00:00:09.920 --> 00:00:13.410
it doesn't give you access to any of the systems Manager

4
00:00:13.410 --> 00:00:16.070
features where the parameters are to be stored.

5
00:00:16.070 --> 00:00:18.320
And even though we're not going to use them,

6
00:00:18.320 --> 00:00:20.700
it's good to be aware that it doesn't let you work

7
00:00:20.700 --> 00:00:23.110
with the Secrets manager either.

8
00:00:23.110 --> 00:00:23.790
Therefore,

9
00:00:23.790 --> 00:00:27.030
it's back to the online management console for this

10
00:00:27.030 --> 00:00:29.920
task from the AWS Services list.

11
00:00:29.920 --> 00:00:31.630
You can filter on parameter,

12
00:00:31.630 --> 00:00:34.670
and the filter is smart and have to give you the systems

13
00:00:34.670 --> 00:00:37.210
manager as the service you might want.

14
00:00:37.210 --> 00:00:42.040
So I'll choose that and open up the AWS Systems Manager page.

15
00:00:42.040 --> 00:00:45.310
Even though Systems Manager has a lot of features,

16
00:00:45.310 --> 00:00:49.450
parameter store is right near the top under application management.

17
00:00:49.450 --> 00:00:54.820
So now I'll choose that, and this shows a list of all your existing parameters,

18
00:00:54.820 --> 00:00:56.280
and I already do have some,

19
00:00:56.280 --> 00:00:59.240
which I created for a recent article in Code magazine.

20
00:00:59.240 --> 00:01:03.440
The button to create a new parameter is in the upper right corner of the list.

21
00:01:03.440 --> 00:01:05.240
On the parameter details page,

22
00:01:05.240 --> 00:01:07.960
the first thing you need to do is given name to the

23
00:01:07.960 --> 00:01:10.700
parameter but it's more than a name.

24
00:01:10.700 --> 00:01:13.320
You can group parameters by providing paths.

25
00:01:13.320 --> 00:01:18.460
For example, you can see the previous names I use start with slash code Maggie P.

26
00:01:18.460 --> 00:01:19.130
I.

27
00:01:19.130 --> 00:01:22.620
Then another slash and then the parameter name.

28
00:01:22.620 --> 00:01:23.310
In fact,

29
00:01:23.310 --> 00:01:26.080
I'm using the same parameter names for our demo as I

30
00:01:26.080 --> 00:01:27.990
did for the code magazine demo,

31
00:01:27.990 --> 00:01:34.440
so I'll just use a single path slash plural site slash db password.

32
00:01:34.440 --> 00:01:37.680
Keep in mind that the names are case sensitive.

33
00:01:37.680 --> 00:01:38.340
In fact,

34
00:01:38.340 --> 00:01:41.130
there's a page in AWS stocks that list the

35
00:01:41.130 --> 00:01:44.010
requirements and constraints for parameters.

36
00:01:44.010 --> 00:01:47.980
I'll leave a link to this page in the resource is at the end of the module.

37
00:01:47.980 --> 00:01:52.460
Next, you have to choose from one of the tears and of the two tiers available.

38
00:01:52.460 --> 00:01:56.050
Definitely stick with the pre selected standard tear,

39
00:01:56.050 --> 00:02:00.750
and that gives you up to 10,000 parameters for no additional charge.

40
00:02:00.750 --> 00:02:03.940
The type of parameter to select is interesting.

41
00:02:03.940 --> 00:02:05.350
My very first time,

42
00:02:05.350 --> 00:02:10.570
I left the default option string because my parameter was a strange made sense.

43
00:02:10.570 --> 00:02:14.600
But what you want here is the secure string option.

44
00:02:14.600 --> 00:02:15.170
That way,

45
00:02:15.170 --> 00:02:18.090
the secrets will be encrypted when he select secure

46
00:02:18.090 --> 00:02:20.640
string an additional section pops in,

47
00:02:20.640 --> 00:02:24.860
which is for specifying which key you want to use for encryption.

48
00:02:24.860 --> 00:02:30.880
AWS uses its key management system, or kms, to encrypt keys.

49
00:02:30.880 --> 00:02:34.970
And certainly for this demo you'll want to use your accounts default key.

50
00:02:34.970 --> 00:02:37.800
But it is possible to use another key if you want,

51
00:02:37.800 --> 00:02:41.640
so leave that option, then the key idea is populated with a default.

52
00:02:41.640 --> 00:02:42.060
Allie.

53
00:02:42.060 --> 00:02:44.110
IHS slash ws slash s.

54
00:02:44.110 --> 00:02:48.400
S m and that's also correct, so we don't have to make any changes there.

55
00:02:48.400 --> 00:02:49.070
Finally,

56
00:02:49.070 --> 00:02:52.420
there's the field to add in the parameters value I'll paste

57
00:02:52.420 --> 00:02:57.520
in my super secret database password, and you can actually see the value here,

58
00:02:57.520 --> 00:02:58.940
but I'm blurring it.

59
00:02:58.940 --> 00:03:01.900
Then scroll down to the bottom of the page and click the

60
00:03:01.900 --> 00:03:04.960
create parameter button to wrap this up.

61
00:03:04.960 --> 00:03:09.200
All I really did here was enter the parameter name with its path select,

62
00:03:09.200 --> 00:03:12.910
secure string and paste in the value of the parameter.

63
00:03:12.910 --> 00:03:14.340
And even though my user I D.

64
00:03:14.340 --> 00:03:16.040
Isn't very secretive,

65
00:03:16.040 --> 00:03:19.940
I'll create a parameter for slash plural site slash db user.

66
00:03:19.940 --> 00:03:24.040
Remember, the name is case sensitive, then click secure string again.

67
00:03:24.040 --> 00:03:26.620
Although I guess Deeb user doesn't really need to be

68
00:03:26.620 --> 00:03:32.000
encrypted and type in Julie in the value. Then click the create perimeter button

