1
00:00:02,140 --> 00:00:05,880
[Autogenerated] AWS history goes back to 2002 when Amazon

2
00:00:05,880 --> 00:00:08,570
offered a variety of cloud services.

3
00:00:08,570 --> 00:00:12,740
Then in 2006 they brought these various offerings together

4
00:00:12,740 --> 00:00:15,680
under the umbrella of Amazon Web services.

5
00:00:15,680 --> 00:00:20,030
AWS provides platforms and AP eyes on demand with pay.

6
00:00:20,030 --> 00:00:23,250
As you go billing, you pay only for the services you use,

7
00:00:23,250 --> 00:00:28,190
and in many cases you're only paying for the time that they're actually in use.

8
00:00:28,190 --> 00:00:32,590
Not for while they're sitting around waiting to to some work AWS is

9
00:00:32,590 --> 00:00:35,590
available for and widely used by individuals,

10
00:00:35,590 --> 00:00:37,340
companies and governments.

11
00:00:37,340 --> 00:00:41,470
I do want to be clear that I will only be focusing on A W s

12
00:00:41,470 --> 00:00:44,240
support for dotnet development in this course,

13
00:00:44,240 --> 00:00:49,140
and I won't be making comparisons to the other cloud providers.

14
00:00:49,140 --> 00:00:52,610
Beginning with dot net core .net became a cross platform

15
00:00:52,610 --> 00:00:55,260
framework and dot net core runs on Windows,

16
00:00:55,260 --> 00:00:57,070
Mac OS and Lennox.

17
00:00:57,070 --> 00:01:00,010
So essentially you can run dot net anywhere.

18
00:01:00,010 --> 00:01:06,000
AWS enables you to deploy and run don and applications directly on AWS is

19
00:01:06,000 --> 00:01:10,680
various services as well as in containers and on virtual machines.

20
00:01:10,680 --> 00:01:12,120
And with these capabilities,

21
00:01:12,120 --> 00:01:16,650
AWS has built all kinds of support dedicated to dotnet developers.

22
00:01:16,650 --> 00:01:20,590
The dot net on AWS team consists of dedicated engineers,

23
00:01:20,590 --> 00:01:25,130
developer advocates, AP eyes and these tool kits for a visual studio,

24
00:01:25,130 --> 00:01:29,240
V S code and jetbrains products that have already mentioned.

25
00:01:29,240 --> 00:01:33,810
Another important illustration of A W s commitment to dot net is

26
00:01:33,810 --> 00:01:36,670
that they're a sponsor of the DOT net foundation.

27
00:01:36,670 --> 00:01:39,350
And when taking this step, they wrote,

28
00:01:39,350 --> 00:01:42,260
AWS has a long standing commitment to dot net,

29
00:01:42,260 --> 00:01:47,330
with a decade of experience running Microsoft Windows and Dot net on AWS.

30
00:01:47,330 --> 00:01:50,240
Joining the DOT Net foundation is a natural step for us to

31
00:01:50,240 --> 00:01:53,300
further invest and participate in this community,

32
00:01:53,300 --> 00:01:58,000
so they're very proud of being part of the dot net foundation.

33
00:01:58,000 --> 00:02:02,400
The services and tooling for dot net on AWS are all directed towards

34
00:02:02,400 --> 00:02:06,440
enabling developers to build modern dot net applications.

35
00:02:06,440 --> 00:02:08,910
I've been programming for over 30 years,

36
00:02:08,910 --> 00:02:12,140
so that word modern does carry some weight.

37
00:02:12,140 --> 00:02:14,360
What do we mean by modern applications?

38
00:02:14,360 --> 00:02:16,740
And what is AWS mean by that?

39
00:02:16,740 --> 00:02:18,110
Leveraging the cloud?

40
00:02:18,110 --> 00:02:21,990
Modern software can take advantage of services that take care

41
00:02:21,990 --> 00:02:25,000
of the overhead of managing infrastructures,

42
00:02:25,000 --> 00:02:28,190
so it allows US developers to focus on our code and,

43
00:02:28,190 --> 00:02:30,940
more importantly, our business logic.

44
00:02:30,940 --> 00:02:36,030
By doing this, we can get our software to market more quickly and more reliably.

45
00:02:36,030 --> 00:02:39,800
And because these modern practices have us building smaller,

46
00:02:39,800 --> 00:02:42,050
more encapsulated pieces of logic,

47
00:02:42,050 --> 00:02:45,670
it also allows teams to be more innovative in their tasks

48
00:02:45,670 --> 00:02:48,740
without impacting the work done by other teams.

49
00:02:48,740 --> 00:02:52,930
One last thing I want to be sure you're aware of with AWS is that you can

50
00:02:52,930 --> 00:02:56,440
create an account and use many of its services for free.

51
00:02:56,440 --> 00:02:59,960
Some of them are always for a summer free for a period of time,

52
00:02:59,960 --> 00:03:02,350
and others have monthly usage caps.

53
00:03:02,350 --> 00:03:05,750
Because of the possibility of going over these usage caps,

54
00:03:05,750 --> 00:03:09,780
you will need to use a credit card to create the count in the resource is list.

55
00:03:09,780 --> 00:03:11,100
At the end of this module,

56
00:03:11,100 --> 00:03:14,110
I'll leave a link to this handy page that provides some

57
00:03:14,110 --> 00:03:22,000
guidance around avoiding the thing we fear accidental O verges that would lead to unexpected charges

