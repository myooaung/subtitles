1
00:00:01,010 --> 00:00:03,470
[Autogenerated] serverless functions provide a number of

2
00:00:03,470 --> 00:00:06,820
benefits over fully hosted applications.

3
00:00:06,820 --> 00:00:11,110
Rather than paying for an application that's constantly running and available,

4
00:00:11,110 --> 00:00:15,330
you only pay for individual requests to a function and in fact,

5
00:00:15,330 --> 00:00:16,710
on AWS.

6
00:00:16,710 --> 00:00:20,320
The 1st 1 million requests each month are free,

7
00:00:20,320 --> 00:00:24,020
along with a generous amount of compute time.

8
00:00:24,020 --> 00:00:26,440
Serverless functions air also stateless,

9
00:00:26,440 --> 00:00:30,110
meaning that you can run many instances of the same function

10
00:00:30,110 --> 00:00:32,310
without worrying about conflicting state.

11
00:00:32,310 --> 00:00:34,840
Across those instances,

12
00:00:34,840 --> 00:00:37,810
most of the management of serverless function is

13
00:00:37,810 --> 00:00:40,100
taken care of by the function host,

14
00:00:40,100 --> 00:00:44,970
leaving you to focus on the logic that you care about AWS.

15
00:00:44,970 --> 00:00:49,240
Lambda functions are individual server lis functions.

16
00:00:49,240 --> 00:00:53,100
You write just the function code and deploy to AWS,

17
00:00:53,100 --> 00:00:56,050
and the Lambda Service manages the rest.

18
00:00:56,050 --> 00:00:57,990
But we're not going to break up our A.

19
00:00:57,990 --> 00:01:01,640
P I methods into individual Lambda functions,

20
00:01:01,640 --> 00:01:08,610
instead will build our A P I into an AWS serve Earless application and

21
00:01:08,610 --> 00:01:13,490
used the service application model to connect especially designed lamb to

22
00:01:13,490 --> 00:01:17,140
function with our A s p dot net application,

23
00:01:17,140 --> 00:01:20,290
this lambda function will sit in front of our A P.

24
00:01:20,290 --> 00:01:25,190
I respond to requests for the individual methods and route those

25
00:01:25,190 --> 00:01:29,040
requests to the appropriate method in our a p I,

26
00:01:29,040 --> 00:01:31,810
even though the A p I will always be available.

27
00:01:31,810 --> 00:01:37,290
Because of this, we won't be paying for the A P I to be continuously running.

28
00:01:37,290 --> 00:01:40,910
You'll only pay for each request to the Lambda function,

29
00:01:40,910 --> 00:01:44,540
including the time it takes to process the request.

30
00:01:44,540 --> 00:01:47,140
What's also interesting here is that we won't be

31
00:01:47,140 --> 00:01:49,810
coating up a new Lambda function.

32
00:01:49,810 --> 00:01:52,690
We're just working with what's already familiar.

33
00:01:52,690 --> 00:01:57,650
Sp dot net core AWS is serverless application model,

34
00:01:57,650 --> 00:02:08,000
or Sam will create a special type of lambda function that will be designed to be the entry point to my a s p dot net core a guy.

