WEBVTT
1
00:00:01.040 --> 00:00:05.350
[Autogenerated] this short module introduced you to storing secrets in AWS

2
00:00:05.350 --> 00:00:08.930
so that you're deployed application can access thumb.

3
00:00:08.930 --> 00:00:12.390
The A W s Secrets Manager is the heavy duty service for

4
00:00:12.390 --> 00:00:15.030
secrets with lots of management features,

5
00:00:15.030 --> 00:00:17.600
but it's not included in the free tier,

6
00:00:17.600 --> 00:00:20.740
and you do have to pay for every secret you store.

7
00:00:20.740 --> 00:00:25.060
The parameter store in Systems Manager is another path,

8
00:00:25.060 --> 00:00:28.050
and parameters can be stored securely as well.

9
00:00:28.050 --> 00:00:31.140
And there's no extra charge for using parameters.

10
00:00:31.140 --> 00:00:34.360
So it was an easy choice for our sample application.

11
00:00:34.360 --> 00:00:35.940
Once that decision was made,

12
00:00:35.940 --> 00:00:39.840
you learned how to create parameters as secured strings in the consul

13
00:00:39.840 --> 00:00:44.040
manager and that it's important at a path to the name of the parameter

14
00:00:44.040 --> 00:00:46.730
so you can filter and group them easily.

15
00:00:46.730 --> 00:00:48.630
Then, back in our application,

16
00:00:48.630 --> 00:00:53.140
we added a new get package for the AWS Systems Manager Extension,

17
00:00:53.140 --> 00:00:56.740
which includes a library for reading from the parameter store.

18
00:00:56.740 --> 00:01:00.580
And then we updated the application with logic to read the parameters.

19
00:01:00.580 --> 00:01:05.090
I also added an A W s configuration into upset ings development,

20
00:01:05.090 --> 00:01:09.330
Jason so that visual studio had the needed permissions to access the

21
00:01:09.330 --> 00:01:14.260
parameter store during debug and Testa's well in the next module.

22
00:01:14.260 --> 00:01:18.280
Rather than deploying too easy to using elastic beanstalk,

23
00:01:18.280 --> 00:01:22.630
you learn how to package the application of into a docker image and

24
00:01:22.630 --> 00:01:27.740
deployed AWS container services using aws fargate.

25
00:01:27.740 --> 00:01:30.250
Here are some resource Is that a relevant to this

26
00:01:30.250 --> 00:01:32.770
module that you might find useful?

27
00:01:32.770 --> 00:01:40.000
I'm Julie Lierman and thanks again for watching fundamentals of building dot net applications on AWS.

