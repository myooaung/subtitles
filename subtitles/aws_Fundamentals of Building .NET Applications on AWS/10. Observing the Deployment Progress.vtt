WEBVTT
1
00:00:01.040 --> 00:00:02.490
[Autogenerated] when you click the publish button,

2
00:00:02.490 --> 00:00:06.640
you'll see in the status window that it's not just compiling the application,

3
00:00:06.640 --> 00:00:10.710
but also sipping up all of the deal else that the applications depended

4
00:00:10.710 --> 00:00:16.300
on and all of this ghost two That s three bucket all fast for the

5
00:00:16.300 --> 00:00:19.640
upload part just because of my slow Internet.

6
00:00:19.640 --> 00:00:21.220
When everything's been uploaded,

7
00:00:21.220 --> 00:00:23.810
Cloud Formation will read the instructions from the

8
00:00:23.810 --> 00:00:26.840
template file and start acting on those.

9
00:00:26.840 --> 00:00:31.570
The toolkit opens a cloud formacion window so you can watch the status.

10
00:00:31.570 --> 00:00:35.360
That cloud formation is relaying well, that's working away.

11
00:00:35.360 --> 00:00:38.540
Let's look at some of the artifacts of the deployment.

12
00:00:38.540 --> 00:00:39.090
First,

13
00:00:39.090 --> 00:00:43.470
I want to point out that the tool kit updated its Jason file with the

14
00:00:43.470 --> 00:00:47.060
names I provided for the stack and s three bucket.

15
00:00:47.060 --> 00:00:48.530
If I run the publish again,

16
00:00:48.530 --> 00:00:53.220
whether I do it from the AWS tool kit or even from the command line,

17
00:00:53.220 --> 00:00:55.920
it will have this information now as well.

18
00:00:55.920 --> 00:00:59.170
If we go over to the tool kids a ws explorer,

19
00:00:59.170 --> 00:01:03.010
we can already see some of the resource is that are being created.

20
00:01:03.010 --> 00:01:07.420
There's the cloud formation stack under AWS cloud formation.

21
00:01:07.420 --> 00:01:10.240
This is what we're watching in the window already.

22
00:01:10.240 --> 00:01:14.580
If I refresh the s three note, there's the new Net Corey P.

23
00:01:14.580 --> 00:01:14.680
I.

24
00:01:14.680 --> 00:01:17.310
Stack Bucket and opening that.

25
00:01:17.310 --> 00:01:20.350
You can see a list of the files in this bucket.

26
00:01:20.350 --> 00:01:22.620
The ZIP file that has the code in the deal.

27
00:01:22.620 --> 00:01:27.610
Els and the Serverless template pile Okay, the functions almost ready.

28
00:01:27.610 --> 00:01:31.890
So let's watch the last status messages popping in.

29
00:01:31.890 --> 00:01:36.700
And now it's done and gives us the Earl of the Serverless application,

30
00:01:36.700 --> 00:01:40.570
even though I know we're not finished setting things up,

31
00:01:40.570 --> 00:01:44.380
I do want to browse to the function anyway for some insight into what's

32
00:01:44.380 --> 00:01:47.930
left to dio first to the weather forecast controller,

33
00:01:47.930 --> 00:01:50.440
and you can see that that's working.

34
00:01:50.440 --> 00:01:52.110
That means that overall,

35
00:01:52.110 --> 00:01:57.920
the a p I is working and the code got past that startup code that is

36
00:01:57.920 --> 00:02:01.940
dependent on having access to the database credentials.

37
00:02:01.940 --> 00:02:05.090
So we know that the function did go and read from the

38
00:02:05.090 --> 00:02:09.740
parameter store now to the author's controller,

39
00:02:09.740 --> 00:02:11.510
and this doesn't work.

40
00:02:11.510 --> 00:02:14.920
It'll eventually time out, and it's what I expected,

41
00:02:14.920 --> 00:02:21.000
and it's what we're going to fix. In the second part of the deployment process,

