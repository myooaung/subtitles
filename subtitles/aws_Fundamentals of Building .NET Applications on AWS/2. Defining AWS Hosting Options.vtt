WEBVTT
1
00:00:00.940 --> 00:00:03.590
[Autogenerated] I found it helpful to get the lay of the land,

2
00:00:03.590 --> 00:00:04.540
so to speak,

3
00:00:04.540 --> 00:00:08.370
of what the hosting options are on AWS before choosing

4
00:00:08.370 --> 00:00:11.280
which one to use to publish my application.

5
00:00:11.280 --> 00:00:14.710
So I'll begin here with a quick overview for you.

6
00:00:14.710 --> 00:00:19.610
First is Amazon s three a name I had heard so many times over the

7
00:00:19.610 --> 00:00:24.290
years but never knew what it was or what s three stood for and s

8
00:00:24.290 --> 00:00:27.430
three stands for simple storage service.

9
00:00:27.430 --> 00:00:31.650
This is a managed key value storage service on AWS that

10
00:00:31.650 --> 00:00:35.320
you can use to store binary objects, whatever you choose.

11
00:00:35.320 --> 00:00:38.940
Images, documents, data, backups, blobs anything.

12
00:00:38.940 --> 00:00:46.290
AWS itself also uses s three as the storage behind many of its own services.

13
00:00:46.290 --> 00:00:49.180
One of those is Amazon E C two,

14
00:00:49.180 --> 00:00:53.400
which stands for elastic Compute cloud get it if for

15
00:00:53.400 --> 00:00:57.140
elastic and see two for compute and Cloud E.

16
00:00:57.140 --> 00:01:00.570
C two is a service that provides re sizable.

17
00:01:00.570 --> 00:01:02.550
And that's why it's called elastic.

18
00:01:02.550 --> 00:01:07.740
Compute capacity and easy to instance, is a virtual machine.

19
00:01:07.740 --> 00:01:12.370
The next service to be aware of is elastic beanstalk elastic.

20
00:01:12.370 --> 00:01:15.620
Being stuck is a service that makes it easy for you to deploy your

21
00:01:15.620 --> 00:01:19.660
abs to AWS and it takes care of a lot of the decisions about

22
00:01:19.660 --> 00:01:22.560
provisioning and resource is on your behalf.

23
00:01:22.560 --> 00:01:27.680
I think the being stock reference is to the nursery tale Jack and the Beanstalk,

24
00:01:27.680 --> 00:01:32.660
because when you publish an app, it travels up the beanstalk to the cloud,

25
00:01:32.660 --> 00:01:35.300
and I find it more entertaining to make this

26
00:01:35.300 --> 00:01:37.740
supposition than to go research the name,

27
00:01:37.740 --> 00:01:39.540
so we'll leave it at that.

28
00:01:39.540 --> 00:01:43.360
It's smart to be aware of the cost of working in AWS and

29
00:01:43.360 --> 00:01:45.830
keeping within the boundaries of your free tier.

30
00:01:45.830 --> 00:01:48.590
So I want to point out how the deployment will be

31
00:01:48.590 --> 00:01:51.090
doing relates to the free tier.

32
00:01:51.090 --> 00:01:53.210
To begin with elastic beanstalk,

33
00:01:53.210 --> 00:01:57.570
upload your application assets into an S three bucket and then

34
00:01:57.570 --> 00:02:01.400
deploys the application from there into an E.

35
00:02:01.400 --> 00:02:01.620
C.

36
00:02:01.620 --> 00:02:05.190
Two instance that means you'll be using both of these.

37
00:02:05.190 --> 00:02:07.630
Resource is with a free tier.

38
00:02:07.630 --> 00:02:14.340
You get 750 hours of compute time per month on easy to and like RTs that

39
00:02:14.340 --> 00:02:17.850
last for the 1st 12 months of your free tier subscription.

40
00:02:17.850 --> 00:02:21.880
It's also good to know that you get five gigabytes of standard as

41
00:02:21.880 --> 00:02:26.560
three storage along with a three tier and elastic beanstalk is just

42
00:02:26.560 --> 00:02:30.200
the means by which your application is deployed and there's no

43
00:02:30.200 --> 00:02:31.920
extra charge for using that.

44
00:02:31.920 --> 00:02:33.980
So if you're following the demo,

45
00:02:33.980 --> 00:02:38.080
you shouldn't have to worry about going beyond the free to your limits.

46
00:02:38.080 --> 00:02:42.740
I also want to quickly mention containers while talking about hosting on AWS,

47
00:02:42.740 --> 00:02:46.170
even though we won't be using containers until later on.

48
00:02:46.170 --> 00:02:49.570
In this course, there are two container services.

49
00:02:49.570 --> 00:02:50.300
One is E.

50
00:02:50.300 --> 00:02:53.540
C s or elastic container service,

51
00:02:53.540 --> 00:02:58.280
which is Amazon's own container orchestration service for docker containers.

52
00:02:58.280 --> 00:02:59.360
The other is E.

53
00:02:59.360 --> 00:03:04.890
K s or elastic, who bernetti service where you can use kubernetes toe,

54
00:03:04.890 --> 00:03:10.440
orchestrate your containers and alongside those is Amazon Fargate,

55
00:03:10.440 --> 00:03:13.540
which takes care of a lot of the management that you would otherwise

56
00:03:13.540 --> 00:03:18.240
need to do if you were using CCS or eks directly.

57
00:03:18.240 --> 00:03:21.420
I'll explain more about this when we get to that later module,

58
00:03:21.420 --> 00:03:27.540
where will be using fargate to deploy our application into a container on AWS?

59
00:03:27.540 --> 00:03:31.250
Okay, so now, as we move forward with publishing an application,

60
00:03:31.250 --> 00:03:38.000
you have a better idea of where that application is going. When it goes into the AWS cloud

