1
00:00:01,140 --> 00:00:04,280
[Autogenerated] and now I'm ready to debug in the local container.

2
00:00:04,280 --> 00:00:06,170
It starts up really quickly,

3
00:00:06,170 --> 00:00:09,360
and I'm already at a break point that I set in the startup file.

4
00:00:09,360 --> 00:00:12,950
I just wanted to show you that the containerized AB is still

5
00:00:12,950 --> 00:00:15,940
able to read the A S P Net core secrets.

6
00:00:15,940 --> 00:00:16,240
Here.

7
00:00:16,240 --> 00:00:20,660
You can see that the DB user secret was available and has been set to

8
00:00:20,660 --> 00:00:25,520
the builders user I d property and I'll let the d burger continue and

9
00:00:25,520 --> 00:00:29,200
the output from the controller get method all the authors and books

10
00:00:29,200 --> 00:00:33,710
from the database and scrolling down to verify that it's the database

11
00:00:33,710 --> 00:00:35,380
that's on AWS.

12
00:00:35,380 --> 00:00:36,740
Not my local Deby,

13
00:00:36,740 --> 00:00:41,650
because there's April ______ book again with the coming soon note in the title.

14
00:00:41,650 --> 00:00:45,640
I also want to point out the URL noticed that it's local host

15
00:00:45,640 --> 00:00:52,360
Port 32 7 82 The container is exposing its internal port 80 on

16
00:00:52,360 --> 00:00:55,170
Port 32 7 82 of the host machine.

17
00:00:55,170 --> 00:00:55,880
In other words,

18
00:00:55,880 --> 00:01:00,850
my computer's port 32 7 82 That port number is controlled

19
00:01:00,850 --> 00:01:03,110
by the doctor tools in visual studio,

20
00:01:03,110 --> 00:01:06,770
and it won't necessarily always be that port if I open

21
00:01:06,770 --> 00:01:09,260
up the dashboard of Docker desktop.

22
00:01:09,260 --> 00:01:11,210
You can also see the running container,

23
00:01:11,210 --> 00:01:16,370
and it shows again that it's exposed on Port 32 7 82 I won't bother

24
00:01:16,370 --> 00:01:25,000
drilling into the details about the container, though, and now we can move on to publishing this as a container on AWS.

