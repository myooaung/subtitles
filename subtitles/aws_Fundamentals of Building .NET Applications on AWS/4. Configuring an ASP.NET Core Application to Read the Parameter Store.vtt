WEBVTT
1
00:00:01.140 --> 00:00:05.570
[Autogenerated] Okay, now I've stored my database credentials securely in AWS,

2
00:00:05.570 --> 00:00:07.370
and that was fairly simple.

3
00:00:07.370 --> 00:00:10.900
Next, we need to make sure the application will read them.

4
00:00:10.900 --> 00:00:13.640
I'm back in visual studio with the Net Corey P.

5
00:00:13.640 --> 00:00:13.870
I.

6
00:00:13.870 --> 00:00:14.640
Solution.

7
00:00:14.640 --> 00:00:18.290
There are three steps I need to perform and that 1/4

8
00:00:18.290 --> 00:00:20.780
which is to get rid of my temporary hat.

9
00:00:20.780 --> 00:00:25.010
The first step is to include a new get package that extends Ace Peanuts

10
00:00:25.010 --> 00:00:29.180
configuration to be able to read from the AWS parameter store.

11
00:00:29.180 --> 00:00:33.760
This extension contains a library that was originally written by Ken Hundley,

12
00:00:33.760 --> 00:00:36.340
a developer in the open source community.

13
00:00:36.340 --> 00:00:40.640
It's called Amazon Extension's Configuration systems manager,

14
00:00:40.640 --> 00:00:43.640
so I'll add that package to the project.

15
00:00:43.640 --> 00:00:46.980
Now that that's out of the second step is for when I'm debugging in

16
00:00:46.980 --> 00:00:50.990
visual studio in the APP Settings Development Jason File.

17
00:00:50.990 --> 00:00:54.160
I'll add a set of settings that the extension can read.

18
00:00:54.160 --> 00:00:58.040
When I'm running or debugging this app locally on my machine,

19
00:00:58.040 --> 00:01:02.680
it will point the extension to my default profile in the tool kit settings.

20
00:01:02.680 --> 00:01:06.610
The structure is that first we have a group named AWS and

21
00:01:06.610 --> 00:01:10.100
within their a property named Region and another named profile

22
00:01:10.100 --> 00:01:12.740
with the appropriate values assigned.

23
00:01:12.740 --> 00:01:17.440
The last step is to wire up my ace Peanut application to use the extension so

24
00:01:17.440 --> 00:01:20.390
that it can read the parameters from the parameter store.

25
00:01:20.390 --> 00:01:22.670
And you do this in the program file,

26
00:01:22.670 --> 00:01:25.660
which is theatric ations starting point First,

27
00:01:25.660 --> 00:01:28.700
I need a reference to the configuration extension a P I.

28
00:01:28.700 --> 00:01:32.060
I just added to the project in the same place that the code is

29
00:01:32.060 --> 00:01:34.910
guiding the Web host to run the startup class.

30
00:01:34.910 --> 00:01:39.280
I'll also instruct it to read the AWS parameter store parameters.

31
00:01:39.280 --> 00:01:42.340
The Configure up configuration method uses a lambda

32
00:01:42.340 --> 00:01:45.640
function with two parameters, context and builder,

33
00:01:45.640 --> 00:01:48.690
and the extension method extends the builder with a

34
00:01:48.690 --> 00:01:51.740
method called ad systems manager.

35
00:01:51.740 --> 00:01:55.790
Then you can pass in the string, representing the path to the parameters.

36
00:01:55.790 --> 00:01:58.330
So in this case, that's slash plural site,

37
00:01:58.330 --> 00:02:01.380
which I included in both of my parameters when I added them

38
00:02:01.380 --> 00:02:04.790
in the management console and finally, the fourth step,

39
00:02:04.790 --> 00:02:06.300
which is my extra step.

40
00:02:06.300 --> 00:02:09.420
I need to remove the secrets that I stuffed into apps settings

41
00:02:09.420 --> 00:02:13.740
Jason in order to temporarily get around the fact that AWS

42
00:02:13.740 --> 00:02:19.000
didn't have access to my secrets. So that's all the changes you need to make

