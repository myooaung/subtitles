WEBVTT

00:05.140 --> 00:11.850
Object caching improves your site's performance by optimizing the process of querying the database,

00:12.040 --> 00:19.480
but there is still a lot of overhead when serving a page request since the server is required to process

00:19.480 --> 00:20.510
the IP.

00:20.560 --> 00:28.990
This overhead is caused by WordPress and needing to build the requested HTML page on every single page

00:28.990 --> 00:29.370
load.

00:29.530 --> 00:37.540
We can reduce the strain on server resources by caching the HTML version of the requested page once

00:37.540 --> 00:38.570
it has been built.

00:38.710 --> 00:47.590
Then on the next request, we simply serve the cached HTML page and can avoid hitting WordPress or altogether.

00:47.620 --> 00:55.600
This is called page caching and is especially useful on sites where the content for each page really

00:55.600 --> 00:58.260
changes the Engine X Files CGI.

00:58.260 --> 01:04.300
Our module allows dynamic content that is served from the back end to be cached.

01:04.660 --> 01:08.770
I do not recommend for CGI caching with Wilkommen sites.

01:08.770 --> 01:10.720
I have seen many issues.

01:10.720 --> 01:19.870
Some of them cannot be resolved 100 per cent rather look at using Redus and or W3 total cash.

01:24.870 --> 01:31.590
Setting up for CGI caching is relatively straightforward, the process involves adding various directives

01:31.590 --> 01:37.800
in the HTP and location context of your various sites configuration files.

01:43.040 --> 01:51.260
The first CGI cash passed directive specifies the location of the cash subdirectory levels, the KeIso

01:51.260 --> 01:59.130
name, the key zone size and the impact of time, the location of the cash can be anywhere on your desk.

01:59.330 --> 02:05.900
However, if you want to benefit from the cash being read from memory, then you should choose a location

02:05.900 --> 02:07.810
that is loaded into RAM.

02:07.860 --> 02:16.520
We will use slash for slash run levels simply refers to the subdirectory levels.

02:16.730 --> 02:22.860
The key zone is the unique name to identify the cache memory zone.

02:22.860 --> 02:24.290
Name the source.

02:24.440 --> 02:28.160
When assigning memory for caching, you need to be careful.

02:28.190 --> 02:32.960
You must always use a value that is normally freely available.

02:32.990 --> 02:37.310
You do not want your server crashing due to insufficient memory.

02:37.400 --> 02:42.510
100 megabytes is fine under most circumstances.

02:42.590 --> 02:46.150
Bear in mind, 100 megabits per site.

02:46.160 --> 02:53.120
If a cache isn't accessed for a particular amount of time as specified by the inactive option, Ingenix

02:53.120 --> 02:54.500
will remove it.

02:54.530 --> 02:57.170
We have it set at 60 Minutes.

02:57.350 --> 03:05.540
The first CGI kishke directive instructs the first CGI module on how to generate key names.

03:05.730 --> 03:12.230
It specifies how the cache file names will be hashed Engine X encrypts and accessed file.

03:12.230 --> 03:20.930
Based on this directive, the first CGI cash use, Stael, is what makes Engine X caching so robust.

03:20.960 --> 03:29.060
This tells Engine X to continue to serve cached versions of a page, even if P and therefore WordPress

03:29.060 --> 03:30.380
crashes the force.

03:30.380 --> 03:38.180
CGI Ignore Headers Directive disables processing of certain response header fields from the file CGI

03:38.180 --> 03:42.260
server in the HTTP context of engine X.com.

03:42.290 --> 03:47.670
And if the following directives get added above the sites enabled directive.

03:47.930 --> 03:54.440
The forced CGI cash path directive must be unique for each site.

03:59.390 --> 04:07.460
The first CGI cash bypass directive defines conditions under which the response will not be taken from

04:07.460 --> 04:08.100
the cash.

04:08.360 --> 04:16.670
The false CGI no cash directive defines the conditions under which the response will not be saved to

04:16.670 --> 04:17.400
the cash.

04:17.420 --> 04:27.590
The false CGI cash directive is used to identify the key zone set in the HTP context, and it must match

04:27.770 --> 04:31.730
the key zones set in the TTP context.

04:31.820 --> 04:38.150
The first CGI cash valid directive allows you to specify the cash duration.

04:38.150 --> 04:41.240
I've set it to the default 60 Minutes.

04:41.250 --> 04:43.220
You can adjust as needed.

04:43.370 --> 04:48.350
The first CGI cash bypass, no cash, cash and cash.

04:48.350 --> 04:54.530
Valid directives are placed in the processing location block of your sites.

04:54.560 --> 05:03.110
Configuration file key zone equals W-W Devar, CGI Cash WWT D they match.

05:06.810 --> 05:13.250
We also need engineers to skip the cash for certain pages that shouldn't be cashed.

05:13.350 --> 05:21.120
These directors will instruct Engine X not to cash certain pages, for example, post requests logged

05:21.120 --> 05:22.020
in users.

05:22.050 --> 05:28.340
We are going to create and include file that will contain our cash exclusion directives.

05:28.590 --> 05:33.330
This is the include file that specifies what shouldn't be cached.

05:33.540 --> 05:38.910
If you have any new URLs that you want to exclude from caching, they can be added to that.

05:38.910 --> 05:43.490
Don't cache your eyes containing the following segments.

05:43.710 --> 05:45.270
I've changed to my servers.

05:45.270 --> 05:47.450
ATC Engine X directory.

05:47.490 --> 05:50.070
You can open engine X dot com in.

05:50.070 --> 05:58.500
If using Nannar you can scroll down and in the H TTP context, we are going to add the first CGI cache

05:58.500 --> 05:59.940
path director.

06:01.260 --> 06:04.060
For CGI cash part var run.

06:04.080 --> 06:13.290
I'm going to call it when web dev and my ki zone will be uppercase w WD 100 megabytes in activity 60

06:13.290 --> 06:13.860
Minutes.

06:13.890 --> 06:22.050
We also need to add the fast CGI Kasky cashews Stael as well as ignore it is directive's underneath

06:22.050 --> 06:24.300
the first CGI cache path.

06:24.330 --> 06:28.440
You can close engine X.com in f saving your changes.

06:33.430 --> 06:40.120
You need to change to the Engine X slots available directly, then you need to open your sites, engine

06:40.120 --> 06:42.370
X configuration file using Nnenna.

06:44.360 --> 06:47.340
I want to point out the travails directive.

06:47.360 --> 06:55.430
It is the standard travois directive that you first added when you set up your first site in the location

06:55.430 --> 06:57.340
block that processes up.

06:57.560 --> 07:08.150
We need to add our first CGI cash bypass, no cash as well as cash, valid directives, fast cash w

07:08.150 --> 07:17.480
w d matches the KeIso name in the H TTP context, you can close NENO saving your changes.

07:18.230 --> 07:25.970
You can go back one level from sites available to ETSI Ingenix and then change to the includes directory.

07:26.250 --> 07:33.240
We're going to create a file for CGI cache exclusions dot com NFC Delanoe followed by the filename.

07:33.390 --> 07:38.330
I have given you the contents of this particular file in the PDF attached.

07:38.330 --> 07:42.380
In this file we are specifying our cache exclusions.

07:42.410 --> 07:50.270
You can close NENO saving your changes back to the sites available directory and you can open your sites

07:50.270 --> 07:54.440
configuration file using nenna underneath the closing.

07:54.440 --> 08:02.540
Gracy of the Draft Files Directive include path to file, CGI cache exclusions, dot com and if you

08:02.540 --> 08:04.940
can close your sites configuration file.

08:05.210 --> 08:10.700
Saving your changes to the configuration test is successful.

08:10.730 --> 08:12.560
Don't reload Ingenix yet.

08:17.740 --> 08:23.470
The X Force CGI cash is used to verify that the cash is active.

08:23.500 --> 08:31.610
You must add the X Files CGI cash directive to the end of your HTP headers include file.

08:31.660 --> 08:40.390
You can change to the global directory, Etsy, Ingenix Global Sudano http headers dot com.

08:40.450 --> 08:48.280
And if you add the X Files CGI Cash Directive to the end of the HTTP headers file, you can close the

08:48.280 --> 08:48.820
file.

08:48.820 --> 08:53.440
Saving your changes to the configuration test is successful.

08:58.810 --> 09:00.610
Reload, Ingenix.

09:05.980 --> 09:15.070
The Kerl commanders used to verify the cash status Colonel IFN uppercase, I followed by https and your

09:15.070 --> 09:24.050
domain name hit Miss and bypass hit the page is being returned from the Engine X Files CGI cache, miss.

09:24.070 --> 09:29.710
The page wasn't cached and was returned by 5pm bypass.

09:29.770 --> 09:34.270
This occurs when it is a page that we have specified to bypass the cache.

09:37.080 --> 09:41.010
Colonel hyphen uppercase, I followed by my You URL.

09:43.130 --> 09:46.760
It's fast CGI cash, miss, let's repeat.

09:48.230 --> 09:48.650
It.

09:50.130 --> 09:54.390
The page is now being served from the fast CGI cash.

10:00.780 --> 10:07.290
We need to install a WordPress engine caching plugin to purge the cache whenever your WordPress site

10:07.290 --> 10:08.660
content changes.

10:12.650 --> 10:15.800
I've changed to my site's public HCM directory.

10:15.860 --> 10:17.150
I'm going to type click.

10:23.460 --> 10:30.360
WP plugin search, engine X, engine X, cash, the sluggish engine X half in cash.

10:36.420 --> 10:45.240
WP plugin instore engine X cash, I've changed to EDC Ingenix Cat, I'd like to view the contents of

10:45.240 --> 10:47.220
Engine Eckstut Seo Net.

10:47.250 --> 10:49.440
Please take note of the path.

10:49.440 --> 10:58.530
I'm going to highlight the path and copy plugins installed plug ins, engine x cash activate settings,

10:58.800 --> 11:00.420
cache zone path.

11:00.540 --> 11:05.010
That is our path specified in the TTP context.

11:05.100 --> 11:14.130
VAR run when web dev purchase cache automatically flush the cache when content changes, save changes

11:14.490 --> 11:15.510
back to terminal.

11:15.510 --> 11:17.160
Kerl hyphen uppercase.

11:17.160 --> 11:19.050
I followed by my sites.

11:19.230 --> 11:21.000
You are all cache.

11:21.000 --> 11:28.500
It hit back to my browser purge the cash cache purged back to terminal.

11:28.620 --> 11:32.190
Koloff and I followed by the URL mess.

11:32.520 --> 11:33.690
We cleared the cache.

11:33.960 --> 11:34.800
It's a mess.

11:35.010 --> 11:42.780
Koloff and I again it to implement fast CJI caching with an additional site.

11:42.870 --> 11:50.020
Firstly, add false CGI cache path to the HTTP context of engine Eckstut SEO NF.

11:50.040 --> 11:54.600
The path and the keys must be unique for the next site.

11:54.810 --> 11:55.710
Step two.

11:55.710 --> 11:59.880
You also need to add the fast CGI cache bypass.

12:00.090 --> 12:08.830
No cash, cash, cash, fellate to the location block of your second sots engine x configuration file.

12:09.000 --> 12:17.010
Thirdly, you need to add the cache exclusions include file to your second Saaz Engine X configuration

12:17.010 --> 12:17.370
file.

12:17.550 --> 12:25.590
You need to install the engine x cache WordPress plugin finally test engine X configuration and if successful,

12:25.590 --> 12:30.240
reload to implement fast CGI caching on an additional site.

12:30.420 --> 12:39.750
This is the first CGI configuration in the context the past var run when web dev ki zone ww d.

12:39.900 --> 12:44.490
This is the first CGI configuration in the HDTV context.

12:44.520 --> 12:49.500
When I've added a second side, notice the path and the keys asone.

12:49.650 --> 12:51.810
They need to be different.

12:51.930 --> 12:52.890
VAR run.

12:53.010 --> 12:55.320
I'll call it my site key zone.

12:55.410 --> 13:05.790
My site for CGI cache key cache you stelle error and ignore headers remain as is the false CGI configuration

13:05.790 --> 13:09.060
in the location context for my second site.

13:09.240 --> 13:11.880
Notice the KeIso my site.

13:12.030 --> 13:20.760
It matches the key zone in the HTP context after testing engine X configuration and then reloading,

13:20.760 --> 13:23.490
use the call command to test that.

13:23.490 --> 13:26.550
The cache is a bit for your second site.

13:26.760 --> 13:33.510
As with object caching, it's important that you test your site thoroughly after enabling page caching,

13:33.510 --> 13:41.820
review all critical processes on your website to ensure that the cached objects are not being reused

13:41.820 --> 13:43.020
incorrectly.

13:43.020 --> 13:48.210
In this lecture, we configured Ingenix forced CGI caching.
