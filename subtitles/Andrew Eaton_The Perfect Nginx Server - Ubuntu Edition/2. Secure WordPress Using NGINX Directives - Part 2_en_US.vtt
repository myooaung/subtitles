WEBVTT

00:04.580 --> 00:15.500
Engine X does not process engine exposes the speed to what is called an application server, in our

00:15.500 --> 00:19.790
case, the application server is FPM.

00:20.520 --> 00:24.610
FPM will receive the request from Engine X.

00:24.830 --> 00:32.510
It will then process the request and then pass the HTP response back to Engine X.

00:32.690 --> 00:42.410
Engine X will then send the response back to the browser, will start its own built in fast CGI server

00:42.410 --> 00:47.530
and will listen for requests through the fast CGI protocol.

00:47.630 --> 00:54.110
CGI is the protocol for interfacing external applications to Web servers.

00:54.780 --> 01:03.020
FPM is an implementation of the fast CGI protocol because Engine X is using fast CGI.

01:03.050 --> 01:05.630
We need to optimize those settings.

01:05.630 --> 01:09.020
Firstly, the fast CGI by size.

01:09.200 --> 01:17.240
The directive sets the size of the buffer used for reading the first part of a response received from

01:17.240 --> 01:19.310
the fast CGI server.

01:19.340 --> 01:25.400
This part usually contains a small response header the fast CGI buffers.

01:25.610 --> 01:33.320
This directive sets the number and size of the buffers used for reading a response from the fast CGI

01:33.320 --> 01:36.110
server for a single connection.

01:36.200 --> 01:44.640
The Fast CGI busy Buffer's signs when buffering of responses from the fast CGI server is enabled.

01:44.690 --> 01:51.950
This directive limits the total size of the buffers that can be busy sending a response to the client.

01:51.950 --> 02:00.500
While the response is not yet fully read, the fast CGI temp file rightsized directive limits the size

02:00.500 --> 02:07.820
of darter written to a temporary file at a time when buffering of responses from the first CGI server

02:07.820 --> 02:10.490
to temporary files is enabled.

02:10.730 --> 02:16.430
You can change to the ITC Engine X sites available directory.

02:16.460 --> 02:24.650
We need to open our sites virtual host file at the location context where you have the line file CGI

02:24.650 --> 02:27.470
Pass underneath false CGI pos.

02:27.470 --> 02:35.180
We are going to use the include directive include Global Slash and we can call the include file for

02:35.200 --> 02:36.140
CGI.

02:36.140 --> 02:40.160
Optimize Dot Seo in F semicolon.

02:40.190 --> 02:42.350
We haven't created the include file.

02:42.350 --> 02:47.120
We can do that before or after adding the directive to your site's file.

02:47.150 --> 02:47.870
You can close.

02:47.870 --> 02:50.990
No, no saving your changes CD.

02:51.020 --> 02:57.500
You want to change directories, you want to go back one level to the global directory sudo.

02:57.500 --> 02:57.950
No, no.

02:57.950 --> 03:01.940
We want to create a file for CGI optimize.

03:07.180 --> 03:14.530
At the top of my include file, I have a comment, while CGI optimize included Insight's server context.

03:14.610 --> 03:23.350
Thereafter, I have my full force CGI directors with the values you can exit NENO saving the changes.

03:23.350 --> 03:28.240
We now want to test the configuration Sudo Ingenix IV and T.

03:28.270 --> 03:33.420
We could also have typed in G.T. to enable the changes.

03:33.430 --> 03:40.260
All we need type is in G to reload Ingenix and enable the changes.

03:40.480 --> 03:45.810
Now we can start securing WordPress using Ingenix directive's.

03:46.000 --> 03:52.810
Firstly, we are going to use Ingenix directive's to protect important WordPress files.

03:52.970 --> 04:02.200
For example, if somebody tries to access XML or P.c, we will deny that it's most important to disable

04:02.740 --> 04:05.320
IP in certain directories.

04:05.320 --> 04:10.660
You'll theme's directories, your plugin directories, your uploads directories.

04:10.690 --> 04:15.540
We do not want any FB scripts are running in those directories.

04:15.550 --> 04:19.990
We are also going to filter certain request methods.

04:19.990 --> 04:23.910
We are only going to allow the post method.

04:23.920 --> 04:29.980
We are also going to filter suspicious and strange requests for certain.

04:29.980 --> 04:32.000
You are URLs in the browser.

04:32.020 --> 04:35.230
Those are the different types of query strings.

04:35.230 --> 04:45.610
And then we are going to set up our nonsecure HTP response headers, HTP response headers on name value,

04:45.610 --> 04:53.650
pairs of strings sent back from the server with a content requested by sending security policies back

04:53.650 --> 04:54.490
to the client.

04:54.640 --> 05:00.510
It results in a much safer browsing experience for visitors to your site.

05:00.640 --> 05:04.960
These four directives are the initial response headers.

05:04.960 --> 05:10.540
We are going to be adding there will be more once we configure SSL.

05:10.660 --> 05:16.120
The X Frame Directive protects visitors against click checking attacks.

05:16.300 --> 05:22.930
The X content type directive reduces the risks of drive by downloads.

05:23.110 --> 05:33.070
The X x axis protection directive configures the X is protection found in all modern day browsers.

05:33.070 --> 05:41.380
And finally, the Content Security Policy Directive allows you to define a wide list of approved sources

05:41.380 --> 05:43.330
for your site's content.
