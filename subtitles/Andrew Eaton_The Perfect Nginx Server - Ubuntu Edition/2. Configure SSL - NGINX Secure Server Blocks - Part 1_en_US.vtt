WEBVTT

00:19.290 --> 00:26.730
In this lecture, we are going to configure Engine X to use our Let's Encrypt SSL certificate, there

00:26.730 --> 00:30.530
are no new configuration files that we will be editing.

00:30.540 --> 00:34.490
They ought to include files that we need to create.

00:34.650 --> 00:42.720
We are going to create a global SSL file that we can apply to any site we create on our server, as

00:42.720 --> 00:49.200
well as an include file that is site specific to create the include file.

00:49.200 --> 00:53.400
We use NENO to generate the Diffie Helmund cipher.

00:53.400 --> 00:56.870
We need to use the open SSL command.

00:57.030 --> 01:00.660
I will get to that command shortly with Engine X..

01:00.840 --> 01:07.110
It's important to organize your directives using include files.

01:07.320 --> 01:14.220
The first include file we are going to create will contain the certificate details for a particular

01:14.220 --> 01:14.970
site.

01:14.970 --> 01:21.210
Each site that you create on your server will have and include file with a certificate.

01:21.210 --> 01:25.380
Details pertaining to that particular site.

01:25.530 --> 01:31.290
Apart from the certificate details, we need to create an additional include file.

01:31.380 --> 01:37.320
That additional include file will contain global engine X directives.

01:37.350 --> 01:44.010
Those directives in the global file can be included in any site.

01:44.160 --> 01:47.460
Now your site specific include file.

01:47.580 --> 01:56.460
There are three directives that you need to specify the SSL certificate, the SSL certificate key and

01:56.460 --> 01:59.310
the SSL trusted certificate.

01:59.460 --> 02:06.420
You would type it by firstly typing the directive and then the path to the file.

02:06.570 --> 02:16.530
Each site on your server needs to have a site specific include file, where you specify the path to

02:16.530 --> 02:22.320
the cert certificate key as well as the trusted certificate files.

02:37.600 --> 02:46.480
With a global include far, there are a few directives that we need to add inside that particular file,

02:46.600 --> 02:56.620
the SSL session cash and the session time out, almost all of the overhead with SSL is during the initial

02:56.620 --> 02:57.380
connection.

02:57.520 --> 03:05.680
So what those two directives do is cache the connection parameters for that particular session.

03:05.680 --> 03:12.310
By caching the connection parameters, the subsequent requests are drastically improved.

03:12.460 --> 03:21.640
The SSL Protocols Directive is where we specify which SSL protocols we would like to use on our server,

03:21.640 --> 03:27.370
the SSL preferred server cyphers and the SSL cyphers.

03:27.460 --> 03:30.310
That is where the encryption happens.

03:30.320 --> 03:38.710
You also need to specify the preferred order of available cipher suites and then you need to list the

03:38.710 --> 03:40.540
order of those suites.

03:40.750 --> 03:46.410
The SSL d.H Perram that refers to the Diffie Halman cipher.

03:46.420 --> 03:54.040
I'm not going to go into much detail about this particular directive except to say that by enabling

03:54.040 --> 04:02.380
that directive, a man in the middle attack cannot hijack the initial SSL handshake, the SSL stapling,

04:02.680 --> 04:05.860
SSL stabling, verify and resolve.

04:06.040 --> 04:11.860
Those three directors referred to the online certificate status protocol.

04:11.890 --> 04:19.120
When a browser is presented with a certificate, it contacts the issuer of that certificate to check

04:19.120 --> 04:20.680
that it hasn't been revoked.

04:20.830 --> 04:24.700
This unfortunately slows down the process.

04:24.880 --> 04:33.400
So what stapling does is the Web server contacts the certificate authorities, ossy ISP server and it

04:33.400 --> 04:42.110
gets assigned response and it then staple's it to the handshake when the connection is set up.

04:42.370 --> 04:46.000
Finally, the strict transport security header.

04:46.150 --> 04:53.860
When a client connects to your site and you've enabled the strict transport security header, any subsequent

04:53.860 --> 04:57.580
visits to your site will be over.

04:57.580 --> 04:58.210
H.

04:58.210 --> 05:05.680
Tepes, the browser will not even attempt to connect to your site using HTTP.

05:05.710 --> 05:09.100
It will be HTP is only.
