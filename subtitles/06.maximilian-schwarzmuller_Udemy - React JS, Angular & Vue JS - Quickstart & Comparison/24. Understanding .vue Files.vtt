WEBVTT

00:02.890 --> 00:07.470
And The Last Lecture we walk through all the files which were created by the Selye by this template

00:07.470 --> 00:12.780
we used Let's have a look at this strange app called view file which seems to be important since we

00:13.050 --> 00:18.930
imported here and then we kind of render it to the dorm with that render a command or with the render

00:18.930 --> 00:26.540
property in the view instance if we open and follow what we see looks strange at first we got some HDMI

00:26.640 --> 00:33.150
in there then we got a script section and then we got a style section and was you can of course have

00:33.150 --> 00:39.080
a old document with script and style inside of it does fall here is not valid.

00:39.100 --> 00:44.990
HVM l style script and DHV part are strictly separated from each other.

00:45.030 --> 00:52.070
This is a dot view file and we use a special loader The View loader which basically is a plug in editor

00:52.070 --> 00:56.990
or our web page workflow which is able to parse and handle this file.

00:57.120 --> 01:00.340
And the thing it does we have to follow is super interesting.

01:00.360 --> 01:04.530
It basically transforms everything here to Javascript.

01:04.530 --> 01:07.530
So the template here is transform to javascript.

01:07.530 --> 01:11.890
You can of course create javascript representations of all HDMI elements.

01:12.300 --> 01:19.230
And while the script obviously can be Javascript and this style will be injected into the head of your

01:19.410 --> 01:21.640
index or HVM will fall at runtime.

01:21.690 --> 01:28.500
So we have only javascript in the end but we can write it in a very confortable way here writing HTL

01:28.620 --> 01:29.380
Javascript.

01:29.430 --> 01:31.110
And C is s code.

01:31.500 --> 01:37.020
Now why is everything transform to javascript and which advantaged estus have for us.

01:37.900 --> 01:43.990
Keep in mind what I told you in the early Electra's of this Marchal view chase when control is a part

01:44.050 --> 01:49.630
of the Dom and the end just takes that part of the storm and turns it into javascript.

01:49.630 --> 01:50.850
It does that at runtime.

01:50.850 --> 01:52.880
Once it was loaded in the browser.

01:52.990 --> 01:55.600
Now why would we do that in the browser.

01:55.690 --> 01:57.690
If we can do it during development.

01:57.910 --> 02:01.100
So what happens here is we write our HMO code.

02:01.210 --> 02:07.900
But then a wet pig will take it turn it into javascript and bundle it all into this built dot JS file

02:07.960 --> 02:10.420
which gets stored in the disk folder.

02:10.420 --> 02:16.450
Now since we do this during development that means that some restrictions applied by the normal dorm

02:16.660 --> 02:18.140
don't apply here.

02:18.190 --> 02:22.630
For example here we certainly can use case sensitive event names.

02:22.630 --> 02:28.840
We were able to do so in Cheras fiddle where we well would run everything in the DOM before viewed as

02:28.840 --> 02:30.010
parses it.

02:30.010 --> 02:32.110
Here it gets parsed during development.

02:32.110 --> 02:36.070
So what we shipped to the browser in the end already is javascript future.

02:36.090 --> 02:39.220
It doesn't need to go over it in the DOM again.

02:39.280 --> 02:42.770
And therefore the restrictions don't apply in this set up.

02:42.850 --> 02:46.050
And that's the great thing about Dot view files.

02:46.090 --> 02:52.540
We can write components and that is what we create here in the end when a very simple way with nice

02:52.540 --> 02:56.670
syntax with all the features case sensitivity included.

02:56.980 --> 03:00.190
And we then simply render a two to Dom.

03:00.190 --> 03:03.760
Now more on components and you files in the next Electra's.
