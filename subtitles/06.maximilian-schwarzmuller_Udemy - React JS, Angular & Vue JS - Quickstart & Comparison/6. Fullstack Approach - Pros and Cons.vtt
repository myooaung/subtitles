WEBVTT

00:02.520 --> 00:08.790
Knouted we saw examples for both a multi page application integrating a javascript framework into the

00:08.790 --> 00:15.870
different views and a single page application where we have one javascript app driving the whole page.

00:16.170 --> 00:21.410
Let's see which advantages or disadvantages each of these approaches might have.

00:21.510 --> 00:24.930
Let's start with the multi-page fold stack approach.

00:24.930 --> 00:26.370
Why might we use it.

00:26.400 --> 00:28.880
Why might we not do so.

00:29.250 --> 00:32.030
Let's start with the pros here on the pro side.

00:32.030 --> 00:36.800
We can say it's very easy O search engine optimization friendly.

00:36.810 --> 00:42.290
This is also the reason why you chose this approach for it's course search page and so on.

00:42.300 --> 00:45.040
Of course they want Google to find these pages.

00:45.090 --> 00:47.990
They want Google to index these pages.

00:48.030 --> 00:49.780
Why is that more friendly.

00:49.800 --> 00:57.330
Because Grall ours are having a tough time reading javascript and especially javascript code which loads

00:57.330 --> 00:59.260
things asynchronously.

00:59.340 --> 01:05.840
If we switch pages on a single page application and there are all changes in javascript re renderers

01:05.850 --> 01:08.720
parts of that page without loading a new one.

01:09.180 --> 01:11.450
Well how would the Crolla do that.

01:11.610 --> 01:18.270
That's something Kerala's can't do as of now which is by getting a new page is more SBO friendly right

01:18.270 --> 01:19.410
now.

01:19.410 --> 01:25.880
Besides staed Another advantage is that we have tons and tons of frameworks and tutorials for this approach.

01:25.890 --> 01:29.320
If you're working with Ph.D. level there are tons of tutorials.

01:29.370 --> 01:35.520
If you are working with notes as Express tons of tutorials because most applications most web pages

01:35.520 --> 01:41.640
work like this because this was a single way of creating apps or creating web pages until three or four

01:41.640 --> 01:44.480
years ago it's changing right now.

01:44.490 --> 01:50.630
But we still have these apps powering the majority of all web pages now.

01:50.730 --> 01:54.450
Another reason is we have simpler Security Solutions.

01:54.570 --> 02:01.860
With that I don't mean that security is easier but since we used this kind of apps for the last 10 20

02:01.860 --> 02:08.340
years a lot of the issues have been solved and a lot of the frameworks you typically use have security

02:08.340 --> 02:11.400
baked into them so that is some advantage here.

02:12.740 --> 02:17.960
Another advantage is that you have a higher chance of getting a working application.

02:17.960 --> 02:23.990
If the user turned off Javascript because of course in a single page application which is entirely driven

02:23.990 --> 02:25.400
by javascript.

02:25.400 --> 02:31.430
If the user turns that off you'll have a hard time on a full stop gap where you add some functionality

02:31.430 --> 02:33.980
with javascript at least a part of your page.

02:33.980 --> 02:36.020
Might still be working without it.

02:36.380 --> 02:38.080
Now there are some cons too.

02:38.120 --> 02:41.140
Otherwise we wouldn't have that trend of moving to a single page.

02:41.150 --> 02:42.690
Applications right.

02:43.010 --> 02:49.310
A big con is delayed reaction time and it might not sound like an issue because it is relatively fast

02:49.700 --> 02:54.730
but having to reload the page where everything we click is is really not ideal.

02:54.800 --> 03:01.100
That's not what we are used to for our mobile phones for example on our mobile apps we catch something

03:01.280 --> 03:03.240
and instantly something changes.

03:03.290 --> 03:08.420
And again if we need to load data or store data that happens behind the scenes and it would be great

03:08.420 --> 03:11.570
to have web apps which behave in the same way.

03:11.570 --> 03:17.290
Another thing is that it is easy to mix presentation and business logic in these Fosdyke approaches

03:17.780 --> 03:20.320
especially when using P2P for example.

03:20.330 --> 03:26.570
It's easy to empat too much business logic which runs on the server into your front and code into your

03:26.570 --> 03:27.260
view.

03:27.260 --> 03:34.490
Now that's not necessarily a problem but it can become one and it can lead to problematic code where

03:34.490 --> 03:40.640
you have a lot of your logic happening and your front end code actually and Nambour disadvantage is

03:40.880 --> 03:43.850
that you possibly have to learn multiple pages.

03:43.850 --> 03:49.250
If you are working as a full stack developer you might have to learn it if you are using that on the

03:49.250 --> 03:49.950
server.

03:50.060 --> 03:53.630
You will need HVM LCS s and Javascript.

03:53.760 --> 03:55.250
Maybe something else.

03:55.250 --> 03:59.630
Not necessarily a big disadvantage but it can be an issue.

03:59.720 --> 04:03.800
You can focus more when only developing single page applications.

04:03.830 --> 04:05.650
We're only working on the front end.
