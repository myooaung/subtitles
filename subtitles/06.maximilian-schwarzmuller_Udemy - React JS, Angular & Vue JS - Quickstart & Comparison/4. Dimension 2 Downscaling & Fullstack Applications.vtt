WEBVTT

00:02.940 --> 00:07.740
So after having a look at the learning curve let's understand how easy we can use these for books and

00:07.740 --> 00:11.420
smaller apps or on pages of multi-page applications.

00:11.430 --> 00:17.490
So when not building a single page application with these frameworks for that I came up with a couple

00:17.490 --> 00:21.110
of questions I want to ask and then answer for each framework.

00:21.480 --> 00:25.230
Can you just drop in a javascript import and get started.

00:25.230 --> 00:31.110
So simply just import the framework and start writing code is that possible is the framework for multi-page

00:31.110 --> 00:32.130
applications.

00:32.160 --> 00:34.630
So how does a ship with a lot of overhead.

00:34.710 --> 00:39.900
Do you need a workflow which you would kind of have to replicate for each page all which you have to

00:39.900 --> 00:45.750
incorporate into your full stack application which is not too convenient is a more complex build workflow

00:45.750 --> 00:49.230
required or recommended that's kind of connected to the last question.

00:49.320 --> 00:54.240
Do we really need a workflow or can we just drop and the important start writing code and don't care

00:54.240 --> 00:58.820
about any javascript supersets like typescript or stuff like that.

00:58.950 --> 01:01.770
And does the framework ship with a lot of overhead.

01:01.770 --> 01:06.420
So are there a lot of things included which we might not need on every page and which make it hard to

01:06.420 --> 01:09.080
optimize that for smaller apps.

01:09.300 --> 01:12.750
Well let's try answering these questions for the first question.

01:12.750 --> 01:16.270
Can you just drop in a javascript important get started for an angler.

01:16.530 --> 01:18.400
Well that's a no Fring.

01:18.420 --> 01:23.940
We really need that workflow because we basically need typescript and we need to compile types.

01:24.000 --> 01:27.560
That doesn't happen in the browser or Whilst technically possible.

01:27.630 --> 01:29.590
That would really be a performance head.

01:29.640 --> 01:34.900
So anger just isn't made for multi-page applications or smaller apps.

01:34.920 --> 01:38.700
It's just not what's there for the chairs however.

01:38.750 --> 01:44.640
Yeah of course we can't just import the view framework either from a Cdn or by picking the download

01:44.880 --> 01:48.330
on the official page and storing it locally and importing the file.

01:48.330 --> 01:49.380
And we're good to go.

01:49.470 --> 01:51.210
We don't have to use dot view files.

01:51.210 --> 01:52.710
We don't have to use any workflow.

01:52.740 --> 01:54.480
We can't just get started.

01:54.480 --> 01:55.150
React.

01:55.230 --> 01:56.900
Yeah we can get started there too.

01:56.970 --> 01:58.650
So I'll give it a plus here.

01:58.710 --> 02:02.000
It might not be the way you write most of your re-act apps.

02:02.040 --> 02:07.800
But again it's possible you can just import the Cdn links or download the files and import them from

02:07.800 --> 02:15.660
your local file system and get started with basic re-act components you create with IA's five javascript.

02:15.690 --> 02:18.450
That's possible no workflow is absolutely needed.

02:18.450 --> 02:22.950
Here is a framework suited for multi-page applications of course.

02:22.950 --> 02:29.160
Kind of answer the first question but here it's also really important to understand is there a lot of

02:29.220 --> 02:35.430
overhead we have because on one page we might just be interested in opening a modal on another page.

02:35.430 --> 02:39.600
Maybe you want to show an alert and you are again it's not suited for that.

02:39.620 --> 02:40.880
That's just how it is.

02:40.890 --> 02:42.150
Nothing else to add here.

02:42.180 --> 02:45.780
It's just way too much code way too complicated for that.

02:45.810 --> 02:52.860
It's not there it's not made to simply control a single piece of a tiny page you Chason you aren't yet

02:52.920 --> 02:53.510
sure.

02:53.520 --> 02:54.870
Go ahead do it.

02:54.870 --> 03:00.660
It's great that you can just control the part of the DOM of the HMO code you want to control and you

03:00.660 --> 03:01.940
want to change or.

03:02.040 --> 03:05.300
Well manipulate with view and react.

03:05.310 --> 03:11.610
Yeah sure but on the other hand it might not be super easy to get started here.

03:11.610 --> 03:14.550
You can definitely use it for multi-page applications.

03:14.580 --> 03:21.000
Facebook is the best example but if that's getting a bigger app with many pages you might still again

03:21.000 --> 03:27.870
need flow which you will have to set up first which incorporates into your full Steg app so that each

03:27.870 --> 03:33.420
page you render with your back and framework like maybe node jazz or beach B.

03:33.770 --> 03:40.410
Then each page you render there each view each HTL page includes the right script imports and the right

03:40.410 --> 03:46.200
portion of code so that you don't have a big code package which you import and every page even though

03:46.200 --> 03:49.810
it might contain a lot of code which is not needed on a single page.

03:49.810 --> 03:54.540
So technically possible but might be more complicated to set up.

03:54.540 --> 04:01.620
That leads us to the next question is a more complex build workflow absolutely required or recommended

04:01.860 --> 04:03.120
for simpler apps here.

04:03.120 --> 04:05.570
Because that's what we're talking about right now.

04:05.700 --> 04:06.630
Engler.

04:06.750 --> 04:09.020
Yes that's why I have a minus here.

04:09.060 --> 04:14.520
That's bad right because it doesn't really fit into this idea of creating smaller apps.

04:14.520 --> 04:16.930
We need the workflow we need to compile types.

04:17.100 --> 04:21.210
We need to ban everything and we need to optimize a lot fewer chairs.

04:21.360 --> 04:23.670
No it's not absolutely required.

04:23.670 --> 04:25.090
It might be beneficial.

04:25.110 --> 04:30.390
It might give you advantages but it's not absolutely required and react.

04:30.780 --> 04:32.900
Yeah I'm kind of it is.

04:32.970 --> 04:35.070
It's possible to use it without that.

04:35.310 --> 04:41.280
But really re-act works best when using ESX for which you will probably need a workflow because that

04:41.400 --> 04:43.580
isn't supported by all browsers.

04:43.740 --> 04:50.430
And you also might need to do some other things bundling things efficiently so yeah you kind of need

04:50.430 --> 04:51.360
a work flow.

04:51.360 --> 04:56.880
That is why I gave that equal sign and the last question and that might be a reason why you might not

04:56.880 --> 04:57.570
want to use it.

04:57.600 --> 05:03.270
Though keep in mind if you are willing to set up such a word for there is nothing wrong with using react.

05:03.310 --> 05:08.420
Facebook is using it in the end on their multi-page application Facebook dot com.

05:08.440 --> 05:13.080
So that's that does the framework ship with a lot of overhead.

05:13.420 --> 05:21.580
ENGLER probably yes and yes I know you can optimize it you can strip out code you're not using but still

05:21.790 --> 05:28.210
the whole idea behind laying low with modules and everything is just a bit overkill for simply controlling

05:28.210 --> 05:34.510
a tiny piece in an existing application or on a page of a multi-page application viewed as on the other

05:34.510 --> 05:35.290
hand.

05:35.320 --> 05:39.850
Yes sure of course it might also include things you don't need on that single page but in the end it

05:39.850 --> 05:42.540
is clean and you can only bring what you need.

05:42.670 --> 05:48.460
And there is no difficult concept behind it which is overkill and react.

05:48.460 --> 05:48.900
Yeah.

05:49.150 --> 05:51.640
It's also good for data.

05:51.640 --> 05:54.350
Does a ship with a lot of overhead it's pretty lean.

05:54.430 --> 05:59.580
It's made for dead except purpose of controlling and manipulating your view.

05:59.590 --> 06:04.090
So you are HVM all code and therefore that is really great for that.

06:04.090 --> 06:06.600
This brings us back to our overview page.

06:06.610 --> 06:08.860
And how would we rate of frameworks there.

06:08.980 --> 06:13.160
Well angleworm that's going to be a minus because it's just not what it's made for.

06:13.180 --> 06:20.350
If you're creating a multi page application or a very very simple single page application angler might

06:20.350 --> 06:23.820
not be the best framework for you view chairs on the other end.

06:23.860 --> 06:26.280
Great framework definitely use that.

06:26.320 --> 06:29.830
That is absolutely something you can do with it and react.

06:29.990 --> 06:36.640
All adds up plus a little bit less screen though because of that workflow thing but again it really

06:36.640 --> 06:37.570
is suited for that.

06:37.570 --> 06:43.000
It just might be more complicated to get it to work as intended and to optimize it but still doable

06:43.000 --> 06:45.700
and absolutely a nice choice here.

06:46.180 --> 06:48.250
Let's move on to the next thing.

06:48.400 --> 06:51.240
Upscaling or single page applications.
