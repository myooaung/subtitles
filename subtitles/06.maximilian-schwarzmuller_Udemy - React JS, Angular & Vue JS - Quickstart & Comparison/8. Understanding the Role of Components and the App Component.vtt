WEBVTT

00:02.740 --> 00:05.950
So now at a walk to the general structure in the last module.

00:05.980 --> 00:08.260
Let's focus on the apps folder now.

00:08.500 --> 00:10.110
Got this app component in there.

00:10.360 --> 00:15.110
And remember what we see in the browser we see app works here.

00:15.390 --> 00:21.010
Now we see that there has to be someplace in all these files where we can see that string and I can

00:21.010 --> 00:26.850
tell you that it is in the app component it would be logical to look into the app component HDMI file

00:26.860 --> 00:27.120
right.

00:27.130 --> 00:29.000
Because that kind of seems to hold.

00:29.020 --> 00:33.560
Well HVM all code we see if we all bet we are almost there.

00:33.580 --> 00:41.510
We see there's the age one tagon if we look closely then this looks like age one tech but we see tidal

00:41.530 --> 00:43.640
in there between curly braces.

00:43.690 --> 00:50.560
Now if you went through the beauteous module you might recognize the syntax angular also uses call he

00:50.560 --> 00:53.030
braces to output dynamic content.

00:53.080 --> 00:55.340
String interpellation is what it's called.

00:55.420 --> 00:57.230
I will come back to it though.

00:57.490 --> 00:59.650
So we put some dynamic content here.

00:59.650 --> 01:02.910
The question is Where is the source of this content.

01:03.250 --> 01:09.280
Well probably in one of the Abra app component files because well this fall is named a component HMO

01:09.310 --> 01:12.630
would be logical to look in the Arrow which all of our named app components.

01:13.150 --> 01:19.270
Probably not s.c.s asphalt which sounds like it's important for styling this component or whatever it

01:19.270 --> 01:25.070
is the component parts Bektashi for all of the wrong side because that is just a file which is you need

01:25.090 --> 01:26.680
it for unit testing something.

01:26.740 --> 01:28.360
I also want to touch on here.

01:28.750 --> 01:30.900
But this falls here looks promising.

01:30.990 --> 01:34.690
App component dot ts ts for typescript.

01:34.810 --> 01:42.010
If we open this we see some code which looks a bit like javascript but then again it doesn't.

01:42.040 --> 01:47.190
We've got this strange at cupholder thing and we use a class which we seem to export now.

01:47.290 --> 01:49.210
Both are not javascript features.

01:49.300 --> 01:51.490
Well classes are at E6 future.

01:51.610 --> 01:59.680
But the component thing not well here however we see AB works and we see it's stored in this tidal property

01:59.680 --> 02:00.960
of this class.

02:01.000 --> 02:06.670
So we clearly have a connection between the ABC1 HDMI fault where we output title and the title property

02:06.670 --> 02:10.000
here and that indeed is how anger works.

02:10.150 --> 02:14.560
You have components you build your whole app with components.

02:14.760 --> 02:19.420
You all of us have one root component the app component and we'll come back to our data is loaded in

02:19.420 --> 02:20.580
the next lecture.

02:20.950 --> 02:26.740
But there we then have a connection between a template and as you can see we kind of set up this connection

02:26.740 --> 02:33.520
here in the template you are l where we point to this file and then in the template we can output properties

02:33.670 --> 02:37.500
or any results from our types of father could also call a method there.

02:37.540 --> 02:41.350
For example datus how Anglo works.

02:41.380 --> 02:45.910
It uses these components and it has this root app component.

02:45.910 --> 02:49.940
Now we need to find out how these root component gets loaded.

02:50.080 --> 02:56.890
So now that we understood why the app works here we need to understand why does that get loaded.

02:56.890 --> 02:58.980
It's just one of many files in the end.
