WEBVTT

00:02.230 --> 00:08.570
In the last lecture we learned that one way of using a javascript framework like view chess is to use

00:08.570 --> 00:12.320
it in different pages of our full Stec app in different views.

00:12.320 --> 00:15.730
We get back from the server and some viewers might not use it at all.

00:15.730 --> 00:17.770
That's perfectly fine.

00:17.900 --> 00:26.180
Now the alternative which is pretty modern and a big trend right now is to create a single page application

00:26.620 --> 00:27.250
there.

00:27.260 --> 00:30.670
Our server only returns one HVM page.

00:30.680 --> 00:33.550
For all you or else we might send it.

00:33.710 --> 00:38.020
Now that might sound strange because we obviously need different pages.

00:38.240 --> 00:44.810
If I wisit slash block I certainly want to get back a different page and if I wizard slash about us

00:45.500 --> 00:54.290
the trick is that the page we get back actually won't hold any content but it will hold our javascript

00:54.350 --> 01:00.080
application and that of course will be a much bigger application than the tiny app we might add to the

01:00.080 --> 01:02.440
individual pages of a multi page app.

01:02.480 --> 01:04.990
This app will actually then capture our.

01:05.030 --> 01:12.300
You are out and parse it and render different pages but it will only look like this to a user.

01:12.560 --> 01:19.970
So dare javascript will take over and control the entire front and it will make sure that to us it looks

01:19.970 --> 01:25.580
like we have different pages the page will change but everything will be handled by javascript and we

01:25.580 --> 01:27.230
will never reload the page.

01:27.230 --> 01:29.860
We will never get a fresh page from the server.

01:29.870 --> 01:33.910
Instead the HDMI code will be changed at runtime by Chalis script.

01:33.920 --> 01:36.860
Why would we use that because it's much faster.

01:36.860 --> 01:39.950
We don't have to send the request and wait for the response.

01:39.980 --> 01:43.430
We don't have to download code which you might have used before.

01:43.550 --> 01:48.240
Instead everything happens on the front then everything happens instantly.

01:48.260 --> 01:53.600
Very reactive and if we need to reach out to the server for example because we want to store some data

01:53.600 --> 01:59.000
on that database Well then Javascript can do that behind the scenes so that we still don't have to leave

01:59.030 --> 02:00.490
our single page.

02:00.590 --> 02:06.230
One important thing we have to note here is that when creating a single page application we will have

02:06.230 --> 02:09.290
some server which holds the business logic to which we connect.

02:09.290 --> 02:16.190
Behind the scenes but the server serving this single page does single index HVM l file and the javascript

02:16.190 --> 02:19.180
Follett's can be a simple static server.

02:19.190 --> 02:23.200
We don't need Apache or any Pietsch be interpreted there.

02:23.210 --> 02:24.920
We don't need no chase we're dead.

02:24.980 --> 02:31.670
It can be any server of your choice which has this single purpose of giving us back this HVM file in

02:31.670 --> 02:33.610
a couple of javascript and see is as follows.

02:33.620 --> 02:34.550
Probably.

02:34.820 --> 02:38.350
Now let's have a look at x samples for both approaches.

02:38.360 --> 02:40.300
Some real world examples.

02:40.430 --> 02:44.040
So that that becomes a bit clearer or easier to understand.
