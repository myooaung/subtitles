WEBVTT

00:02.890 --> 00:06.940
So now did you learn the last lecture did this function form isn't bad.

00:07.210 --> 00:13.450
Let's actually now understand how we can inform the parent component about an event in this child component.

00:13.600 --> 00:16.850
Specifically I want to do something whenever we click on this paragraph.

00:16.930 --> 00:23.650
So on click and on what we can change this state in there and then I also don't want to do that instead

00:23.650 --> 00:27.220
of what I call a method in my parent component.

00:27.280 --> 00:37.400
So here I will add one now really last new method and this will simply be the user was click method.

00:37.690 --> 00:44.410
Now this user wants click method will get the name of the user and then should simply alert that alert

00:44.530 --> 00:45.820
name.

00:45.910 --> 00:50.540
However does methodis the parent component and how can I call it from the child component.

00:50.590 --> 00:51.440
Very simple.

00:51.460 --> 00:58.600
We pass it as a prop and that is how you set up parent child component with react if you want to call

00:58.630 --> 01:04.690
some code and your parent component pass a reference to the method you want to call and the parent component

01:05.080 --> 01:07.600
as a prompt child component.

01:07.600 --> 01:15.750
So here I will simply call his name clicked handler the name is up to you.

01:15.910 --> 01:22.590
And this will be a reference to my user will escalate methods here like dead.

01:22.900 --> 01:28.090
And I'll also do the same for the second usage of this component.

01:28.090 --> 01:32.740
Now with this we noted we will have a prop with the name name clicked handler.

01:33.010 --> 01:38.750
So now in our username component we can simply execute this.

01:38.950 --> 01:41.760
And of course I want to pass some data here too.

01:41.980 --> 01:48.790
So to pass my own data I will actually use a different syntax for setting up this reference.

01:48.910 --> 01:58.510
I will execute it 6 arrow function here where I will then simply execute prop's name click handler and

01:58.510 --> 02:00.570
past prop's username.

02:00.580 --> 02:06.230
I used this as 6 syntax so that I can conveniently pass data to that named click handler.

02:06.400 --> 02:14.410
If I was just executed like this or set it up like Deus between the single curly braces it would immediately

02:14.410 --> 02:18.640
execute this code because all these Keep in mind we're still in javascript here.

02:19.030 --> 02:26.050
However if I use the Otterson text using this iOS 6 arrow function this part here is actually returned

02:26.200 --> 02:28.750
and it can write return here to make this clearer.

02:28.960 --> 02:32.900
So this function is E-6 function is immediately executed.

02:33.250 --> 02:40.370
But then it only returns a configured reference so to say so it returns to code which should get executed.

02:40.450 --> 02:43.910
Which also is prepared to return some data.

02:44.200 --> 02:46.010
So now if had control enter.

02:46.240 --> 02:53.020
I don't see anything which there's a reason we can find out if we open the Verilog user rules like does

02:53.020 --> 02:58.290
not find that error strand stems from down your user will select.

02:58.330 --> 02:59.780
That of course isn't defined.

02:59.800 --> 03:00.650
It's a method.

03:00.670 --> 03:05.460
In this class so it should be this user was clicked just like for all the other methods.

03:05.740 --> 03:10.920
So now I've had control enter where back in if I click on Chris we see Chris for click.

03:10.960 --> 03:17.800
Anna we see Anna and this is how we can pass data from child component to the parent component using

03:17.800 --> 03:24.430
a prop which holds a reference to the method we want to execute and the parent component and then using

03:24.440 --> 03:32.830
these iOS 6 arrow function syntax to immediately execute a function which returns a preconfigured function

03:32.830 --> 03:39.610
call this call here which then will pass some data Dadis react.

03:39.640 --> 03:41.820
In a nutshell we're not done yet.

03:41.830 --> 03:45.700
We will leave chase full now because that's getting a lot of code here.

03:45.790 --> 03:51.730
And I also want to show you how you can create a single page application with the reactor router to

03:51.730 --> 03:53.960
load different pages.

03:54.010 --> 04:00.280
But in the context of one single page disk code here could have been thrown in one single page of multiple

04:00.280 --> 04:06.270
pages in the end but before going to that section let's practice the things we learned.

04:06.310 --> 04:09.520
So the idea behind re-act can really sink in.
