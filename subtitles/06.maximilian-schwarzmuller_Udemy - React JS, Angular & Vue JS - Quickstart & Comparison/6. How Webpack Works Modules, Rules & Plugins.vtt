WEBVTT

00:02.470 --> 00:07.860
And the last lecture you learn about entry and output of WePay and that's super important because it

00:07.860 --> 00:14.430
allows pick to analyze our structure which follows we use and it allows us to write multi-file code

00:15.150 --> 00:21.810
if we would use only regular javascript features that would already be all we need.

00:21.810 --> 00:27.180
But here we want to use some extra features like dot to view files which of course are regular javascript

00:27.180 --> 00:34.000
files or maybe like 6 as we do here with the data method.

00:34.440 --> 00:39.750
Now these features are of course not supported by modern browsers or don't view files are not even supported

00:39.750 --> 00:40.260
by WePay.

00:40.260 --> 00:42.660
It doesn't understand how to handle these files.

00:42.840 --> 00:49.240
And that is why we need to define how web page should handle the modules in a module is just a file.

00:49.320 --> 00:54.600
So modular code is multi-file code Wepa just analyzes all our Maut modules.

00:54.600 --> 01:00.550
So all our files we can define rules Wepa should use when analyzing our files.

01:00.690 --> 01:04.620
A rule typically has a task property which simply tells web page.

01:04.740 --> 01:09.320
Does this rule apply to this file and we typically use the file extension for this.

01:09.330 --> 01:12.580
So for example here we check if we have a dot view file.

01:12.620 --> 01:14.910
This is a regular expression.

01:14.910 --> 01:23.750
Then we define a loader loader is our third party or web page native plug ins we can add we installed

01:23.750 --> 01:31.350
them separately here all these dash loader packages and loaders simply add the functionality to tell

01:31.350 --> 01:33.240
where pick how to handle that file.

01:33.450 --> 01:40.590
Because web pick by default is a relatively lean tool which doesn't know all kinds of files but we can

01:40.590 --> 01:44.010
add loaders and you can write your own Lowder's theoretically.

01:44.010 --> 01:49.530
So for dought you father used a view loader which is a loader which basically in the end knows how to

01:49.530 --> 01:56.190
handle these files with the template script and Style section will then transform them to normal Javascript

01:56.190 --> 01:56.670
code.

01:56.730 --> 01:58.420
That is what the view loader does.

01:58.470 --> 02:02.540
And that is how we add this functionality to our Web Pegge workflow.

02:02.880 --> 02:09.120
Well we also have tests for normal javascript files for example so that we're able to use as sake's

02:09.120 --> 02:15.870
features with bible babble it simply is a compiler for iOS 6 2 years 5 and we're able to handle images

02:15.880 --> 02:16.240
too.

02:16.250 --> 02:19.600
We used to file loader to simply copy them.

02:19.980 --> 02:22.130
Well rissoles You may ignore that.

02:22.170 --> 02:26.260
That's just important for importing the view framework correctly.

02:26.460 --> 02:32.730
Here we get some specific settings about the def server like important the history API fallback so that

02:32.760 --> 02:40.470
we can use this history mode without the hash tag and the L performance you can ignore that death tool

02:40.470 --> 02:41.610
that simply controls.

02:41.610 --> 02:47.250
If you want to create source maps or not so that we can use the debugger in our browser to debug our

02:47.250 --> 02:53.610
code even though we have identified code then we can magically debug our original code through source

02:53.610 --> 02:55.620
maps and that down here.

02:55.740 --> 02:58.220
Well that simply looks a bit complicated.

02:58.380 --> 03:04.830
But in the end what we do here is we changed the def tools if we are in production mode that we create

03:04.950 --> 03:06.960
less expressive source maps.

03:07.260 --> 03:14.340
And we set up some plug ins plug ins are the fourth and last important step in the web peg workflow.

03:14.550 --> 03:22.680
You don't need to use plug ins but we're Lowder's or module rules in the end apply on a per file basis

03:22.800 --> 03:27.210
so view should use this loader javascript Faas should use Disk loader.

03:27.450 --> 03:30.800
Plug ins are then applied to the bundled code.

03:30.810 --> 03:33.450
But before that bundle is created.

03:33.480 --> 03:40.050
So here for example we have the ugly fight Chia's plug in which is responsible for many flying and optimizing

03:40.050 --> 03:47.970
our code does not apply to the individual files but once webcast analyze all the files and almost built

03:47.970 --> 03:55.190
the bundle then the plug ins come in and then for example we have fired or run some other plug ins here.

03:55.300 --> 03:57.390
That is how web pick works.

03:57.390 --> 04:04.680
We have rules and module rules to be precise to transform our individual files plug ins to transform

04:04.680 --> 04:11.730
the overall code ofter we analyzed all the files and entering output to find where to start and what

04:11.730 --> 04:13.000
to create.

04:13.560 --> 04:19.530
And it just does work flow which allows us to use features like Daut view files and is sake's and still

04:19.530 --> 04:22.130
ship code which is understood by the browser.
