WEBVTT

00:02.530 --> 00:07.330
I'm back into the project we created in the last module this view Cheops project.

00:07.420 --> 00:12.100
But even if you're not a fan of Futurists that doesn't really matter it's a great project to explain

00:12.100 --> 00:16.060
what's actually happening and how web peg works and so on.

00:16.060 --> 00:22.580
So as I told you in the last module DS files here and these folders were created by The View Seelye.

00:22.630 --> 00:28.450
This gives us a complete development environment we can work in and what we can use certain features

00:28.450 --> 00:34.430
which are then handled by Web Picks so that in the end we get something which is understood by the browser.

00:34.480 --> 00:42.040
I think it's best to have a look at this something and we can use a certain NPM script which is defined

00:42.040 --> 00:50.080
in a package adjacent file and run built to create the actual files web pick well creates for us which

00:50.080 --> 00:54.940
it stores in memory if we run NPM run death after descript finished.

00:55.030 --> 01:01.670
You see a new folder the disk folder and they're very interesting you see only one file that built up

01:01.680 --> 01:06.680
Cheras file well and does not map file which is the source map for easier debugging.

01:06.760 --> 01:09.020
But we can ignore this for now.

01:09.090 --> 01:11.380
The index that HDMI file didn't change.

01:11.380 --> 01:17.230
So if we were to deploy this app we would deploy this index HDMI file and to disk folder.

01:17.680 --> 01:23.260
Now if you have a look at this build chairs fall you see a lot of unreadable code and data because we

01:23.260 --> 01:24.780
built it for production.

01:24.880 --> 01:30.840
So therefore this code was minute flight optimized to be as small as possible.

01:31.300 --> 01:37.750
Now the interesting thing about this file is it actually contains the full view chess framework.

01:37.840 --> 01:44.830
All of our code and potentially over frameworks or libraries we it like the view router in our example

01:44.830 --> 01:45.600
here.

01:45.700 --> 01:51.370
So in the end we only ship one single javascript file which even though it looks quite unreadable is

01:51.460 --> 01:55.310
understood by the browser and contains all the logic we need.

01:55.360 --> 01:59.010
But of course not in a way that we would like to write it in.

01:59.200 --> 02:04.330
And that is the reason why we use workflows like this one and why we use tools like wet pig.

02:04.480 --> 02:10.450
This is the optimal file to ship to the browser small everything is in it.

02:10.570 --> 02:13.540
But of course that's not the way we want to write our code.

02:13.810 --> 02:19.960
So wet bag is a bridge between how we want to write code to write clean and understandable code and

02:19.960 --> 02:26.530
use features we maybe can use and all browsers wise and still ship code to the browser which is understood

02:26.560 --> 02:33.920
by the browser which is as small as possible and which works across all or at least most browsers.

02:34.750 --> 02:40.890
Now since it is the shop of web pack which rolled out Noj Yes and NPM play then.

02:40.930 --> 02:45.320
Let's take a closer look in the next lecture before we dive deeper into what pectore after.
