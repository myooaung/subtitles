WEBVTT

00:02.580 --> 00:07.740
So let's have a look at the performance of the frameworks and performance for me means two things.

00:07.920 --> 00:09.670
How big is the initial.

00:09.720 --> 00:11.150
Pamela we have to download.

00:11.180 --> 00:14.150
So the code we have to download before we see anything.

00:14.160 --> 00:19.940
How big is that because before the code has been downloaded user won't be able to see anything.

00:20.190 --> 00:22.630
But after dico it has been downloaded.

00:22.680 --> 00:24.030
That's the second thing.

00:24.030 --> 00:27.540
The question is how is the runtime performance of the framework.

00:27.540 --> 00:30.240
How does it behave if it needs to rerun or parts.

00:30.240 --> 00:31.580
How quick is it.

00:31.710 --> 00:34.700
That of course is important for once we started using the app.

00:34.710 --> 00:35.770
How does it behave.

00:35.790 --> 00:37.880
And is it very reactive Is it slow.

00:38.040 --> 00:39.490
These are two important things.

00:39.510 --> 00:40.950
So let's have a look at these.

00:41.220 --> 00:43.610
I'll start with the bundles size and with the angler.

00:43.710 --> 00:47.100
So here's our angler app the single page up with routeing we bult.

00:47.100 --> 00:52.020
It's a very simple app shouldn't be that big but of course we need to include the angler framework.

00:52.090 --> 01:01.410
This gives us a command Engy build dash dash Perrott dash dash A.R.T. to build it for production and

01:01.410 --> 01:03.990
optimize it as much as possible.

01:03.990 --> 01:10.110
This will take a couple of seconds and thereafter it will give us this dist folder here which will hold

01:10.140 --> 01:10.880
our bundle.

01:10.890 --> 01:12.700
So let's have a look at that bundle now.

01:12.870 --> 01:17.590
Here's the disk folder open in my finder and it created a couple of files.

01:17.610 --> 01:23.310
The unix age HTML file of course and then more interesting main vendor POLLI feels we need to poll it

01:23.310 --> 01:25.020
felt so that it runs fine.

01:25.020 --> 01:27.510
We need vendors which is to frame itself.

01:27.540 --> 01:32.530
Main is our code and align just as a little support code which is very small here.

01:32.910 --> 01:34.140
Most interesting.

01:34.170 --> 01:37.380
Let's have a look at the vendor code so the framework code.

01:37.530 --> 01:39.260
And here we see that's rather big.

01:39.260 --> 01:41.460
Four hundred and ten kilobytes.

01:41.460 --> 01:44.480
Now I will say that it hasn't been GCP here.

01:44.550 --> 01:50.190
If you were to zip it which you typically do when serving it on the real server it will become much

01:50.190 --> 01:53.170
smaller to around 130 kilobytes.

01:53.190 --> 01:54.960
So it's not as bad then.

01:55.080 --> 01:57.290
But let's keep this size here in mind.

01:57.330 --> 02:03.840
Though our main model of our own code is pretty lean because we didn't write that much code.

02:03.960 --> 02:06.410
So the vendor bundle is the biggest thing.

02:06.570 --> 02:15.310
And overall if we also add Holyfield's and inline we get to 487 kilobytes we have to download.

02:15.420 --> 02:17.850
So that's not super small.

02:17.850 --> 02:20.810
However again it will be Giuseppa and then it will be much smaller.

02:20.820 --> 02:24.570
But again let's keep this number in mind 487.

02:24.750 --> 02:29.300
Let's now move on to your view chase here in this single page application too.

02:29.360 --> 02:36.270
We are using the or we used Seelye to get a working workflow out of the box and this workflow gives

02:36.270 --> 02:43.110
us to build a script which we can run with NPM run build to also built and optimize minimize many fly

02:43.260 --> 02:48.000
everything to also give us a disk folder Dan which holds the in fight bundle.

02:48.000 --> 02:54.510
Here we only have to bundle file and if we have a look at this in the Finder too we see that here the

02:54.510 --> 03:03.000
band looks for only has 105 kilobytes and this file includes everything viewed us and our own code.

03:03.180 --> 03:04.920
And it hasn't been Giuseppa to.

03:04.920 --> 03:07.970
So once we use it but it will become even smaller.

03:08.070 --> 03:09.310
So that's awesome.

03:09.330 --> 03:12.750
There really is much smaller than angler obviously.

03:12.750 --> 03:19.100
Now how about react four weeks since we used that official package to create that project.

03:19.110 --> 03:26.130
We also got a script we can run NPM run build to build it for production to optimize it and then get

03:26.130 --> 03:28.010
an optimized production built.

03:28.020 --> 03:32.970
This gives us to build folder here author of finished and now let's have a look at this folder in the

03:32.970 --> 03:35.220
Finder in this folder.

03:35.370 --> 03:39.650
We get all the javascript fonts in the static folder in the javascript folder.

03:39.690 --> 03:43.450
And here we got one main file which again includes everything.

03:43.450 --> 03:46.900
If we have a look at this it's 240 kilobytes.

03:46.950 --> 03:49.380
Again not just zipped.

03:49.440 --> 03:55.770
So it's between View and angle are much smaller than anglica actually but also almost double the size

03:55.770 --> 03:56.580
of view.

03:57.060 --> 04:03.540
Now of course that will also shrink once we just it but this gives us a first impression about how lean

04:03.600 --> 04:07.650
the code is and how long it might take to load it.

04:07.650 --> 04:13.800
Now you can always try optimizing that more and shrink it even more and then serve it in an optimal

04:13.800 --> 04:14.400
way.

04:14.400 --> 04:21.120
So there are thousands of different numbers you can get in the end but Dish should give you a nice impression

04:21.420 --> 04:29.070
of how big of a package you can expect the whole long the initial load of that package might take.

04:29.990 --> 04:35.820
As I mentioned the bubble size isn't everything the runtime performance is important too.

04:35.840 --> 04:42.080
Now you can try measuring that on your own but I use the open source project this chase framework benchmark

04:42.080 --> 04:43.320
project on get have.

04:43.340 --> 04:48.890
So a big shout out to these people definitely visit their page if you want to run this on your own machine

04:49.190 --> 04:55.040
which will compare a couple of javascript frameworks a lot of frameworks you might have not heard before.

04:55.120 --> 05:01.670
Included two and then compare the performance of these frameworks and a couple of tasks which are described

05:01.670 --> 05:04.020
in the description of this project here.

05:04.040 --> 05:09.470
Here you will also find the instruction how to install it and then run the benchmark and it will tell

05:09.470 --> 05:13.760
you that it takes quite long which is why you don't have to run it.

05:13.970 --> 05:16.630
I can already share some results with you.

05:16.790 --> 05:19.530
Now here are a couple of results for different tests for us.

05:19.530 --> 05:24.620
The first table here is the most important one and as you can see we got a lot of frameworks here.

05:24.680 --> 05:29.900
Well let's focus on the ones which are important for us like Angola for here you see the different tasks

05:29.900 --> 05:35.740
which were executed like reading a couple of rows replacing rows swapping rows and so on.

05:35.970 --> 05:38.650
And desisting Laforet column here.

05:38.750 --> 05:44.810
And you see overall it performs decent has quite a long startup time though which is due to the view

05:44.810 --> 05:46.850
engine which works behind the scenes.

05:46.910 --> 05:49.770
And this is not the time it needs to download the bundle.

05:49.780 --> 05:56.870
This is just a time off-Terra download at the bundle it takes to start the app if we have a look at

05:56.960 --> 06:00.190
re-act now which you can find here.

06:00.380 --> 06:01.640
We see that there.

06:01.910 --> 06:07.850
Overall we also have decent results and is a bit faster than angler and definitely feel free to post

06:07.850 --> 06:14.600
a video and rewind to compare these numbers or simply again run this project on your own.

06:14.630 --> 06:16.330
In the end you just have to install it.

06:16.340 --> 06:21.470
You don't even have to run all the benchmarks that you can already start the local server chips with

06:21.770 --> 06:25.520
and then have a look at the table which chips with that without running anything.

06:25.520 --> 06:26.990
So that's possible too.

06:27.290 --> 06:31.230
So back to that table react all are performing decent.

06:31.280 --> 06:32.480
Let's have a look at the view.

06:32.540 --> 06:38.440
And here we see a lot of green because they do also because it's very lean is really fast.

06:38.450 --> 06:41.660
You can see almost everything is dark green here.

06:41.840 --> 06:44.060
So beauty has it really is fast.

06:44.060 --> 06:46.820
Does this mean that you should always pick view chess.

06:46.970 --> 06:48.530
No definitely not.

06:48.560 --> 06:55.100
This benchmark only measures some things and all these things might not be what a specific framework

06:55.100 --> 06:56.190
is best at.

06:56.420 --> 07:03.410
But for example it might be better at other tasks and angler for example is really great for very big

07:03.410 --> 07:05.670
applications with a lot of code.

07:05.750 --> 07:12.290
So the U.N. react might be slower or dare and angular wins in these apps and at least that is what the

07:12.290 --> 07:17.810
English team says that their view engine is much better for more complex apps than for simple apps like

07:17.810 --> 07:18.260
this one.

07:18.280 --> 07:19.160
In the end.

07:19.460 --> 07:26.030
So this is not the final source of truth but it definitely can give you an impression about how a framework

07:26.030 --> 07:26.790
performs.

07:26.870 --> 07:32.490
If it is fast if it is slow again it doesn't cover all use cases though.

07:32.750 --> 07:35.110
What does this mean for our overview page here.

07:35.300 --> 07:37.270
All three frameworks have a good performance.

07:37.270 --> 07:43.660
I can say that but Engler is not super awesome for smaller apps or for medium sized apps but really

07:43.680 --> 07:49.220
becomes better if we have large apps and that fits the theme of Angler still for smaller apps.

07:49.220 --> 07:54.670
It's not terrible it's just a bit worse than the average you has is awesome has a great performance

07:54.680 --> 08:01.090
as we saw and react also has a good performance and you could also put a completely green plus here

08:01.100 --> 08:01.810
if you like.

08:01.850 --> 08:04.010
It's just a bit worse than view.

08:04.010 --> 08:06.500
That is why I chose a different tone of color.

08:06.590 --> 08:09.650
But overall all frameworks and that really is important.

08:09.740 --> 08:16.350
Are fast are not super huge but depending on the use case you're planning on using it.

08:16.490 --> 08:19.060
One might be faster or better than the average.

08:19.130 --> 08:26.090
Keep in mind angler has a big bundle size and is a bit slower at startup but really excels in large

08:26.120 --> 08:27.520
very large apps.

08:27.590 --> 08:33.020
View has a very small bundle size is very fast but maybe it becomes slower in bigger apps.

08:33.020 --> 08:35.840
We don't really know because we don't really have a benchmark for this.

08:35.840 --> 08:39.710
I didn't notice it in any apps though I can tell you that and react.

08:39.740 --> 08:42.490
Also good performance so performance wise.

08:42.530 --> 08:43.790
All very good.

08:43.790 --> 08:45.440
Again run the framework.

08:45.440 --> 08:50.240
Have a look at the results for yourself to dive deeper into this.

08:50.270 --> 08:55.150
Let's move on to development to production topic next.

08:55.160 --> 08:58.480
How easy is it to get from development to production.
