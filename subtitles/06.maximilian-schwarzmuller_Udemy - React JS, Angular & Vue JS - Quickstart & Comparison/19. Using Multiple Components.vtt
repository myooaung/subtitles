WEBVTT

00:02.800 --> 00:06.060
Over the last lecture we did cover a lot here.

00:06.520 --> 00:11.140
One thing we haven't done yet though is use multiple components.

00:11.140 --> 00:17.990
However angler is all about components and still we're stuck in this single component the app component.

00:18.010 --> 00:19.660
Time to add a new one.

00:19.750 --> 00:25.000
Now it is a good practice to create a new subfolder in the app folder for new components.

00:25.000 --> 00:30.820
So I want to add my username component the same component I use yabber modules all named a folder a

00:30.820 --> 00:39.250
user name and in there ultrathin you for which are name user name dot component dot ts.

00:39.250 --> 00:46.790
Now in this fall we create our component and I do so by adding export KLOS.

00:46.930 --> 00:51.530
So creating a class which is exported which means we can't access it from outside this fall.

00:51.560 --> 00:56.740
We of course want to use it in other files then give it a name and the convention is to use the name

00:56.740 --> 01:03.580
of the component with a capital leading letter username and then component so that the name of the class

01:03.580 --> 01:05.640
also includes the description of what it is.

01:05.710 --> 01:07.970
It's a component here.

01:08.020 --> 01:15.400
This is all we need to do however to turn this into a component we need to add a decorator the ADD component

01:15.580 --> 01:18.030
decorator like this does.

01:18.160 --> 01:24.160
Now gives us an error because it's not a native typescript thing or a class it doesn't recognize it.

01:24.250 --> 01:27.630
We have to import this from the angler package.

01:27.790 --> 01:37.320
So we import a component using this index to call the braces from from the at angular slash core package.

01:37.360 --> 01:40.860
That's just one of the package just the anger framework consists of.

01:41.220 --> 01:46.620
With that we know what component is but we need to pass a javascript Optik to configure it.

01:47.560 --> 01:49.500
Let me move as whitespace here.

01:51.790 --> 01:53.790
How can we configure it.

01:53.800 --> 01:57.270
Each component needs to at least have a template.

01:57.330 --> 01:59.340
Dennis HVM all code it will display.

01:59.350 --> 02:00.880
That's an absolute must.

02:00.880 --> 02:09.610
We need to have all the code so we could define template your L to again point to an external file like

02:09.610 --> 02:11.400
we do here in the app component.

02:11.500 --> 02:15.620
However you can also inline the template if it's a very short one.

02:15.640 --> 02:17.260
That's absolutely fine.

02:17.260 --> 02:23.440
So in this case you can just write template and now assign a string which holds your age HTML code if

02:23.440 --> 02:27.230
you want to have the luxury of creating a multi-line string easily.

02:27.400 --> 02:29.160
You can use back year.

02:29.230 --> 02:30.820
So these are Nazi like quotation marks.

02:30.820 --> 02:35.650
These are back takes too easily write a multi-line string here.

02:35.650 --> 02:40.740
Now here we can write the same code as an external file and we can write as many code as we want.

02:40.780 --> 02:45.110
But again you should only use template if it's not that much code.

02:45.160 --> 02:50.960
In my case here it's only a paragraph where I want to output some user name here.

02:51.230 --> 02:55.560
User name of course should be set from outside.

02:55.870 --> 03:01.570
So for now I will simply add my username property here and assign it to you let's say Chris to mix it

03:01.570 --> 03:02.170
up.

03:02.560 --> 03:04.320
And now to output it.

03:04.320 --> 03:07.420
Now we will make this dynamic and settable from outside later.

03:07.540 --> 03:13.400
But now I want to use that component to use that we need a second thing in the component decorator.

03:13.510 --> 03:18.910
We need a selector to tail angular in the end how this component is added.

03:19.150 --> 03:25.360
As I told you before this selector is a string and works basically like osseous as selector with some

03:25.360 --> 03:25.950
limitations.

03:25.960 --> 03:28.680
You can use ID here and some other things.

03:28.720 --> 03:35.360
But you can use class or attribute selectors the typically use case is to use the tax collector here

03:35.870 --> 03:41.990
and you should add a prefix like app so that it's definitely a unique selector and you don't accidentally

03:42.050 --> 03:45.590
override existing HVM Eltang or something like that.

03:45.590 --> 03:47.960
So here we could name this app username.

03:48.230 --> 03:52.880
And now whenever we use that as a tag angler should add it.

03:53.030 --> 03:54.420
Well let's try it out.

03:54.470 --> 03:59.630
I go to my app component HMO file because remember we don't add our components to the index age.

03:59.640 --> 04:02.720
Tim I'll fall that's only done for the app component.

04:02.720 --> 04:06.650
All Avro components are added to Avro components templates.

04:06.650 --> 04:10.040
In this case the app components template because it is the only Cobbold we have.

04:10.340 --> 04:12.880
And it's our root component so we want to have it there.

04:13.250 --> 04:22.030
So now I'll add it at the top by adding this and now making this attack like that like a HDMI element.

04:22.040 --> 04:28.790
However if I save as with any sort of still running you now see me only see loading which means something

04:28.790 --> 04:31.420
went wrong the epos start incorrectly.

04:31.520 --> 04:37.820
If we open the developer tools now we see we have an error in the javascript console and it's actually

04:37.820 --> 04:40.490
a pretty descriptive error or app user name.

04:40.490 --> 04:42.150
It's not a known element.

04:42.380 --> 04:43.840
And why is it not known.

04:43.870 --> 04:46.720
Because well we did find a selector here right.

04:46.730 --> 04:48.510
Where does Englert on it.

04:48.920 --> 04:56.240
Because by default as I mentioned earlier angler doesn't scan all your files it doesn't see that you

04:56.240 --> 04:57.770
have this component here.

04:57.800 --> 05:05.080
We have to make a burglar aware of this component and we do so by adding it to the app module.

05:05.360 --> 05:13.190
Here we have to edit the declarations aere we have to add our username component here and we have to

05:13.190 --> 05:19.370
import it so that typescript not angular but typescript is able to find out where does username component

05:19.370 --> 05:21.100
class actually sits.

05:21.110 --> 05:28.910
So we have to import user name component from and now simply point to the username folder.

05:28.940 --> 05:33.890
It's a relative payoff scene from the module on and then your username component file.

05:34.010 --> 05:39.600
You can omit Didcot ts that will be automatically in the build workflow.

05:39.620 --> 05:45.600
Now with that typescript knows where to find to type since we added the type to just declarations array.

05:45.660 --> 05:47.590
ENGLER we'll have a look at this file.

05:47.780 --> 05:53.490
And now if we save this as soon as our app reloads you'll see that now we see.

05:53.510 --> 05:57.940
Chris you're at the top because now Engler is aware of are a component.

05:58.100 --> 06:05.330
So the remaining question is how can we make this username settable from outside so that we don't have

06:05.330 --> 06:07.440
to hard coded into our component here your.
