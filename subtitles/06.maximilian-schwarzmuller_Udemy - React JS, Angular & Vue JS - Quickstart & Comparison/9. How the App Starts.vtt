WEBVTT

00:02.850 --> 00:07.470
So last lecture we understood the DIAK component seems to be important but the mystery is how does it

00:07.470 --> 00:13.710
get loaded Remember to that whole unity made up tears fall as the first fall we load the first code

00:13.710 --> 00:14.990
which gets executed at the end.

00:15.030 --> 00:18.380
Of course not this exact code but the compiled javascript question.

00:18.450 --> 00:24.300
And keep in mind typescript and always is compiled javascript code so it is compiled to code the browser

00:24.300 --> 00:25.890
understands.

00:25.890 --> 00:28.460
Now here we have a couple of imports.

00:28.530 --> 00:31.550
One check here to and able some special settings.

00:31.560 --> 00:38.300
If we're running some production but this year is the important line bootstrap module now bootstrap

00:38.310 --> 00:44.730
seems to indicate that we start something we bootstrap something and we do we start our Engler app and

00:44.730 --> 00:47.160
we do that by loading a module.

00:47.160 --> 00:53.430
Modules are another important part of Angler apps components are the pieces you build your app with.

00:53.580 --> 00:58.470
Modules are basically bundles of these pieces bundles of components.

00:58.470 --> 01:03.970
For example you may have multiple modules but in many apps you also may have only one module.

01:04.260 --> 01:09.780
Well this module will load here the app module which is if you have a look at the import imported from

01:09.900 --> 01:11.660
this file here.

01:11.730 --> 01:14.820
So let's have a look at the AB module TS file then.

01:15.180 --> 01:22.690
And here we see another class with no content in it at all but a number of these at things.

01:22.860 --> 01:27.970
Now at something is called a decorator and it's a typescript feature.

01:28.170 --> 01:30.180
It's not supported by native Chavez.

01:30.240 --> 01:35.130
But again it's compiled with some tricks to code which is understood by the browser in the end.

01:35.220 --> 01:41.270
However in typescript we can use this nicer syntax of attaching some extra information to something.

01:41.310 --> 01:43.190
In this case to a class.

01:43.440 --> 01:51.150
So this extra information in angular case here is understood by angular and transforms this class from

01:51.150 --> 01:55.770
a normal class or whatever it gets compiled to to a class.

01:55.770 --> 02:03.120
Plus plus you could say to a module heater what we do is store information which components does this

02:03.120 --> 02:09.570
module use data stored in the declarations array amongst other things but mostly components and then

02:09.960 --> 02:15.480
which component is responsible for loading Zepps So what is our root component here in the bootstrap

02:15.480 --> 02:16.200
array.

02:16.200 --> 02:22.050
Now as you can see in both arrays we referenced the only component we have the app component.

02:22.500 --> 02:29.640
And what this tells angler's hey we have one component tiap component and we need to tell it this because

02:29.850 --> 02:34.380
it doesn't scan all your files and automatically add all the components you might add here.

02:34.440 --> 02:40.650
So that's good that it doesn't do that would be very unperformed And so we have one component and we

02:40.650 --> 02:43.900
also tell it well at the point of time you start the app.

02:44.160 --> 02:50.400
There has to be something you display at the beginning some root element which holds all our components

02:50.400 --> 02:51.830
you might eventually have.

02:52.020 --> 02:55.200
And we defined it this should be the app component.

02:55.200 --> 02:59.220
So with that information angle anger knows what to load first.

02:59.310 --> 03:02.810
Of course it also needs to know where to load this.

03:02.850 --> 03:05.250
Let's ignore the imports every year for now.

03:05.250 --> 03:07.390
I will come back to that app Monty Hall.

03:07.680 --> 03:15.830
Let's understand where angler finds information where it should load that component the answer probably

03:15.830 --> 03:20.140
can be found Indico Poland because here we got no extra information on that.

03:20.360 --> 03:28.100
If we switch back to the app component or typescript file we see that we have a decorator here too and

03:28.100 --> 03:29.010
we set up two things.

03:29.010 --> 03:35.020
Template your L and style or else which I guess are kind of straightforward to understand we connect

03:35.270 --> 03:39.000
types of file to some other files one for the template of this component.

03:39.030 --> 03:45.320
So the HDMI code of that component you could say and dishtowels you want to add to this component but

03:45.320 --> 03:48.990
we got a Furt property in the object repasts to the decorator.

03:49.130 --> 03:55.970
This select or it's app root and this selector here actually works like a C S S selector.

03:55.970 --> 04:04.040
So in this case we're selecting an element app route we could change it to dot app root to select any

04:04.040 --> 04:06.670
element with osseous as class of AB root.

04:06.920 --> 04:16.490
But typically for your components Eustice take like select or so now we tail and ular at this component

04:17.090 --> 04:22.270
in a file where you can find a root element.

04:22.280 --> 04:29.680
Now since we defined to does our bootstrap component the file angler will look for this tag actually

04:29.680 --> 04:34.200
as our index aged him a file and that is how the circle closes.

04:34.220 --> 04:36.040
Here we see AB rude.

04:36.050 --> 04:43.220
So here is where Engler will mount our component and will render the HMO content as a side note.

04:43.340 --> 04:49.900
All other components you might create and we will create some will not be added here in the next HMO

04:49.910 --> 04:54.500
file but you would start adding them here and the app component H.T. will fall because that is your

04:54.500 --> 04:55.520
root component.

04:55.520 --> 05:01.250
So everything as new application goes into this file or files nested into this file then in the end

05:02.210 --> 05:04.660
data is how the app starts.

05:04.700 --> 05:06.880
Now I'd say we talked a lot about this.

05:06.890 --> 05:13.190
Let's briefly have a natural look at the app model to understand the our parts here and then let's start

05:13.280 --> 05:14.150
editing the app.
