WEBVTT
1
1

00:00:00.079  -->  00:00:01.900
(tinkling music)
2

2

00:00:01.900  -->  00:00:05.320
(keyboard clicking)
3

3

00:00:05.320  -->  00:00:07.510
<v ->Alright so, what is a heap?</v>
4

4

00:00:07.510  -->  00:00:11.630
Well, a heap is a complete binary tree
5

5

00:00:11.630  -->  00:00:13.980
that satisfies the heap property,
6

6

00:00:13.980  -->  00:00:16.400
so let's look at those two requirements.
7

7

00:00:16.400  -->  00:00:18.800
So, it's a complete binary tree,
8

8

00:00:18.800  -->  00:00:21.500
and remember that for a binary tree,
9

9

00:00:21.500  -->  00:00:25.440
every node in the tree can have zero, one or two children.
10

10

00:00:25.440  -->  00:00:28.060
And it has to be a complete tree,
11

11

00:00:28.060  -->  00:00:31.360
and we went over what that means in an earlier video.
12

12

00:00:31.360  -->  00:00:34.920
It means that every level of the tree is full,
13

13

00:00:34.920  -->  00:00:37.680
except potentially the last level.
14

14

00:00:37.680  -->  00:00:38.870
And on the last level,
15

15

00:00:38.870  -->  00:00:43.020
if it's not complete, meaning that every leaf's parent
16

16

00:00:43.020  -->  00:00:45.864
doesn't have two children, so if there's any space
17

17

00:00:45.864  -->  00:00:49.890
at that bottom level, the existing leaves all
18

18

00:00:49.890  -->  00:00:52.660
have to be as far to the left as possible,
19

19

00:00:52.660  -->  00:00:56.170
and we'll go over the visual of this in a few slides.
20

20

00:00:56.170  -->  00:00:58.120
So the first requirement is that a heap
21

21

00:00:58.120  -->  00:01:00.330
is a complete binary tree.
22

22

00:01:00.330  -->  00:01:01.640
The second requirement is
23

23

00:01:01.640  -->  00:01:04.060
that it must satisfy the heap property,
24

24

00:01:04.060  -->  00:01:06.580
and that heap property will depend
25

25

00:01:06.580  -->  00:01:10.140
on whether we're talking about a max heap or a min heap.
26

26

00:01:10.140  -->  00:01:12.650
With a max heap, every parent has
27

27

00:01:12.650  -->  00:01:16.460
to have a value greater than or equal to its children,
28

28

00:01:16.460  -->  00:01:19.900
and in a min heap, every parent has to have a value
29

29

00:01:19.900  -->  00:01:22.500
that is less than or equal to its children.
30

30

00:01:22.500  -->  00:01:23.770
And so there are two types,
31

31

00:01:23.770  -->  00:01:25.680
max heap and min heap.
32

32

00:01:25.680  -->  00:01:29.690
And so, as I said, a binary heap must be a complete tree
33

33

00:01:29.690  -->  00:01:34.150
and we call them binary heaps because they're binary trees.
34

34

00:01:34.150  -->  00:01:37.370
When we're creating a heap, we add children at each level
35

35

00:01:37.370  -->  00:01:38.300
from left to right.
36

36

00:01:38.300  -->  00:01:41.520
So if we were adding a bunch of values into an empty heap,
37

37

00:01:41.520  -->  00:01:43.410
the first value would become the root,
38

38

00:01:43.410  -->  00:01:47.040
the second value would become the left child of the root,
39

39

00:01:47.040  -->  00:01:49.610
the third value would become the right child of the root,
40

40

00:01:49.610  -->  00:01:51.820
and then we'd move down to the next level,
41

41

00:01:51.820  -->  00:01:54.405
and so the fourth value would become the left child
42

42

00:01:54.405  -->  00:01:56.490
of the left child of the root,
43

43

00:01:56.490  -->  00:01:59.780
and the fifth value would become the right child
44

44

00:01:59.780  -->  00:02:01.130
of the left child of the root.
45

45

00:02:01.130  -->  00:02:05.380
And we'll go through a visual of this in a couple of slides.
46

46

00:02:05.380  -->  00:02:08.040
They're usually implemented as a raise,
47

47

00:02:08.040  -->  00:02:11.300
and so we saw an implementation of a binary tree
48

48

00:02:11.300  -->  00:02:13.770
that uses classes, that uses a tree class
49

49

00:02:13.770  -->  00:02:14.960
and a tree-node class.
50

50

00:02:14.960  -->  00:02:18.090
Well, when you have a complete binary tree,
51

51

00:02:18.090  -->  00:02:20.870
you can actually back them by a raise,
52

52

00:02:20.870  -->  00:02:23.720
and that's how heaps are usually implemented.
53

53

00:02:23.720  -->  00:02:25.820
And our implementation will use an array
54

54

00:02:25.820  -->  00:02:27.790
so you can see how that works.
55

55

00:02:27.790  -->  00:02:30.050
Now, because of the heap property,
56

56

00:02:30.050  -->  00:02:32.800
the maximum or minimum value will always be
57

57

00:02:32.800  -->  00:02:35.930
at the root of the tree and that's why heaps exist.
58

58

00:02:35.930  -->  00:02:38.250
If you're wondering, well what's the big deal
59

59

00:02:38.250  -->  00:02:41.804
about complete trees that satisfy the heap property,
60

60

00:02:41.804  -->  00:02:46.350
it's because the maximum value in the case of a max heap,
61

61

00:02:46.350  -->  00:02:48.750
or the minimum value in the case of a min heap
62

62

00:02:48.750  -->  00:02:50.450
will always be at the root.
63

63

00:02:50.450  -->  00:02:53.372
And so you can get the minimum or maximum value
64

64

00:02:53.372  -->  00:02:56.923
in constant time, because accessing the root
65

65

00:02:56.923  -->  00:02:59.220
is a constant time operation.
66

66

00:02:59.220  -->  00:03:03.150
Now, when we insert a node into a tree,
67

67

00:03:03.150  -->  00:03:05.790
we generally add it to the bottom level
68

68

00:03:05.790  -->  00:03:07.900
because, as I've said, when you're building a tree
69

69

00:03:07.900  -->  00:03:10.730
you start at the top and then you move to the next level
70

70

00:03:10.730  -->  00:03:12.450
and add nodes left to right,
71

71

00:03:12.450  -->  00:03:14.950
and then to the next level and add nodes left to right.
72

72

00:03:14.950  -->  00:03:18.500
And so when we add a node to an already existing tree,
73

73

00:03:18.500  -->  00:03:21.790
we add it at the first available spot at the bottom level,
74

74

00:03:21.790  -->  00:03:23.880
but of course once we've done that,
75

75

00:03:23.880  -->  00:03:26.980
the tree might no longer meet the heap property.
76

76

00:03:26.980  -->  00:03:29.160
And so we have to fix the tree,
77

77

00:03:29.160  -->  00:03:32.291
and that's a process known as heapify.
78

78

00:03:32.291  -->  00:03:34.331
Heapifying the tree, it's the process of converting
79

79

00:03:34.331  -->  00:03:37.500
a binary tree into a heap,
80

80

00:03:37.500  -->  00:03:40.120
and we have to do this after inserting a node,
81

81

00:03:40.120  -->  00:03:42.440
and we also have to do it after deleting a node.
82

82

00:03:42.440  -->  00:03:44.110
Because after we've deleted a node,
83

83

00:03:44.110  -->  00:03:47.110
it's possible that the heap property will no longer be met.
84

84

00:03:47.110  -->  00:03:48.690
Now, one important thing to note
85

85

00:03:48.690  -->  00:03:51.350
is there's no required ordering between siblings,
86

86

00:03:51.350  -->  00:03:53.970
so when you have nodes at the same level,
87

87

00:03:53.970  -->  00:03:56.610
they don't have to be in ascending or descending order,
88

88

00:03:56.610  -->  00:03:57.640
anything like that.
89

89

00:03:57.640  -->  00:04:00.080
The important relationship when it comes to heaps
90

90

00:04:00.080  -->  00:04:04.290
is the relative values between parents and children.
91

91

00:04:04.290  -->  00:04:06.750
In a max heap, the parent has to have a value greater
92

92

00:04:06.750  -->  00:04:08.500
than equal to its children,
93

93

00:04:08.500  -->  00:04:10.671
and in a min heap the parent has to have a value less than
94

94

00:04:10.671  -->  00:04:12.370
or equal to its children.
95

95

00:04:12.370  -->  00:04:15.440
So, here's a tree, and this is not a heap.
96

96

00:04:15.440  -->  00:04:16.870
Now, why isn't it a heap?
97

97

00:04:16.870  -->  00:04:19.090
Well, it actually fails two requirements.
98

98

00:04:19.090  -->  00:04:20.950
First of all, it's not a complete tree.
99

99

00:04:20.950  -->  00:04:25.240
If it was a complete tree, 14 would have to be 22's child,
100

100

00:04:25.240  -->  00:04:27.190
because remember in a complete tree,
101

101

00:04:27.190  -->  00:04:30.060
every level has to be full, except the last one,
102

102

00:04:30.060  -->  00:04:32.420
and if the last one isn't full, the children have
103

103

00:04:32.420  -->  00:04:34.440
to be as far to the left as possible.
104

104

00:04:34.440  -->  00:04:36.960
So here we can see level two is not full,
105

105

00:04:36.960  -->  00:04:38.990
because 22's missing a child,
106

106

00:04:38.990  -->  00:04:41.380
and so this is not a heap for that reason.
107

107

00:04:41.380  -->  00:04:44.081
But it's also not a heap because it doesn't meet
108

108

00:04:44.081  -->  00:04:47.360
the parent-child value relationships.
109

109

00:04:47.360  -->  00:04:49.810
It's not a max heap because in a max heap
110

110

00:04:49.810  -->  00:04:52.190
the parent always has a value greater than or equal
111

111

00:04:52.190  -->  00:04:55.340
to its children, and 15 is less than 22,
112

112

00:04:55.340  -->  00:04:57.550
and it's not a min heap because in a min heap
113

113

00:04:57.550  -->  00:04:59.950
the parent always has a value less than or equal
114

114

00:04:59.950  -->  00:05:03.120
to its children, and 22 is greater than 19
115

115

00:05:03.120  -->  00:05:05.180
and 18 is greater than 14.
116

116

00:05:05.180  -->  00:05:08.120
Four is greater than three, and so this is not a heap.
117

117

00:05:08.120  -->  00:05:09.691
It's not a complete binary tree
118

118

00:05:09.691  -->  00:05:12.260
and it doesn't meet the heap requirement
119

119

00:05:12.260  -->  00:05:14.670
when it comes to the relative values
120

120

00:05:14.670  -->  00:05:16.430
between the parent and the children.
121

121

00:05:16.430  -->  00:05:17.263
Okay?
122

122

00:05:17.263  -->  00:05:18.450
This isn't a heap either,
123

123

00:05:18.450  -->  00:05:21.970
this one actually meets the requirements of a max heap
124

124

00:05:21.970  -->  00:05:24.670
as far as the relative values go,
125

125

00:05:24.670  -->  00:05:28.790
so 22 is greater than 19, 19 is greater than three,
126

126

00:05:28.790  -->  00:05:32.940
22 is greater than 18, 18 is greater than 15 and 14,
127

127

00:05:32.940  -->  00:05:35.010
and 15 is greater than four,
128

128

00:05:35.010  -->  00:05:37.370
but it's not a complete binary tree.
129

129

00:05:37.370  -->  00:05:40.530
19 is missing a child, and so this is not a heap.
130

130

00:05:40.530  -->  00:05:42.410
This one is a heap.
131

131

00:05:42.410  -->  00:05:46.340
It's a complete binary tree because every level is full,
132

132

00:05:46.340  -->  00:05:49.450
except the last one, and on the last level the child
133

133

00:05:49.450  -->  00:05:52.070
is the farthest to the left that it can be.
134

134

00:05:52.070  -->  00:05:56.660
And it's a max heap because every parent has a value
135

135

00:05:56.660  -->  00:05:58.810
that is greater than or equal to its child.
136

136

00:05:58.810  -->  00:06:01.970
So we have 22, 19, 15 and 12.
137

137

00:06:01.970  -->  00:06:03.790
And 19 is greater than three,
138

138

00:06:03.790  -->  00:06:06.400
18 is greater than 14 and four.
139

139

00:06:06.400  -->  00:06:10.330
Now, one interesting characteristic of a max heap
140

140

00:06:10.330  -->  00:06:13.920
is if you travel from the root down to all the leaves,
141

141

00:06:13.920  -->  00:06:17.200
all the values along the path are in descending order.
142

142

00:06:17.200  -->  00:06:18.810
And of course the opposite would be true
143

143

00:06:18.810  -->  00:06:21.450
if you start at a leaf and travelled up to the root,
144

144

00:06:21.450  -->  00:06:23.240
all of the values along the path
145

145

00:06:23.240  -->  00:06:25.020
would be in ascending order.
146

146

00:06:25.020  -->  00:06:27.380
If you want to check whether something's a heap,
147

147

00:06:27.380  -->  00:06:30.210
just try to find a path for which that isn't true.
148

148

00:06:30.210  -->  00:06:32.180
So if you were checking if this was a max heap,
149

149

00:06:32.180  -->  00:06:35.920
you'd say, well if I travel down to every leaf,
150

150

00:06:35.920  -->  00:06:38.250
all the values along each path should be
151

151

00:06:38.250  -->  00:06:39.550
in descending order.
152

152

00:06:39.550  -->  00:06:41.510
If they're not, then it's not a heap.
153

153

00:06:41.510  -->  00:06:44.190
Or, you could start at the leaves and travel up to the root,
154

154

00:06:44.190  -->  00:06:46.240
in which case they'd be in ascending order.
155

155

00:06:46.240  -->  00:06:48.780
And of course, the opposite would be true for a min heap.
156

156

00:06:48.780  -->  00:06:51.240
For a min heap, where the value of the parent
157

157

00:06:51.240  -->  00:06:54.170
has to be less than or equal to its children,
158

158

00:06:54.170  -->  00:06:56.370
travelling from the root down to the leaves,
159

159

00:06:56.370  -->  00:06:59.170
all of the paths would be in ascending order
160

160

00:06:59.170  -->  00:07:01.410
and if you start at a leaf and travel up to the root,
161

161

00:07:01.410  -->  00:07:04.140
all of the paths would be in descending order.
162

162

00:07:04.140  -->  00:07:05.520
And so this is a heap,
163

163

00:07:05.520  -->  00:07:09.410
the path down to 12 is 22, 19, 15 and 12,
164

164

00:07:09.410  -->  00:07:10.930
so that's descending.
165

165

00:07:10.930  -->  00:07:13.487
22, 19 and three takes us to three.
166

166

00:07:13.487  -->  00:07:16.870
22, 18 and 14 takes us to 14.
167

167

00:07:16.870  -->  00:07:19.740
And 22, 18 and four takes us to four.
168

168

00:07:19.740  -->  00:07:23.156
So, the maximum value in this tree, in this heap,
169

169

00:07:23.156  -->  00:07:24.470
is at the root.
170

170

00:07:24.470  -->  00:07:26.673
And so if we wanted to get the maximum value,
171

171

00:07:26.673  -->  00:07:28.010
we just look at the root
172

172

00:07:28.010  -->  00:07:29.880
and that's a constant time operation.
173

173

00:07:29.880  -->  00:07:32.150
And that's why min and max heaps exist.
174

174

00:07:32.150  -->  00:07:35.343
And you'll see a specific use of a max heap
175

175

00:07:35.343  -->  00:07:37.270
in a couple of videos.
176

176

00:07:37.270  -->  00:07:40.023
The way that we often back a heap
177

177

00:07:40.023  -->  00:07:43.300
is using an array, and we can do that because
178

178

00:07:43.300  -->  00:07:46.550
you can back complete binary trees using an array
179

179

00:07:46.550  -->  00:07:48.900
and we'll take a look at how that's done
180

180

00:07:48.900  -->  00:07:49.890
in the next video.
181

181

00:07:49.890  -->  00:07:50.840
I'll see you there.
