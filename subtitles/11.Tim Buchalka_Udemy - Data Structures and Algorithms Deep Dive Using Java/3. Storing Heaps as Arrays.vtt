WEBVTT
1
1

00:00:00.161  -->  00:00:05.161
(lively music)
(keyboard clacking)
2

2

00:00:05.790  -->  00:00:06.798
<v Sarah>In this video, we're gonna take a look</v>
3

3

00:00:06.798  -->  00:00:09.220
at how to store a heap as an array
4

4

00:00:09.220  -->  00:00:12.400
and in fact, you can store any complete binary tree
5

5

00:00:12.400  -->  00:00:15.770
as an array and so, when we're dealing with binary heaps,
6

6

00:00:15.770  -->  00:00:17.700
we can store them as arrays.
7

7

00:00:17.700  -->  00:00:19.190
So, how do we do it?
8

8

00:00:19.190  -->  00:00:22.130
The root will go at array position zero
9

9

00:00:22.130  -->  00:00:24.940
and then we traverse each level in the tree
10

10

00:00:24.940  -->  00:00:27.440
from left to right and so, the left child
11

11

00:00:27.440  -->  00:00:29.640
of the root would go into array one
12

12

00:00:29.640  -->  00:00:33.130
and the right child of the root would go into array two
13

13

00:00:33.130  -->  00:00:35.640
and then the left child of the left child of the root
14

14

00:00:35.640  -->  00:00:37.310
would go into array three
15

15

00:00:37.310  -->  00:00:39.830
and the right child of the left child of the root
16

16

00:00:39.830  -->  00:00:42.430
would go into array four et cetera,
17

17

00:00:42.430  -->  00:00:44.930
and so, let's look at an exempla of this.
18

18

00:00:44.930  -->  00:00:47.680
So, if we have this heap and we looked at this
19

19

00:00:47.680  -->  00:00:48.950
in the last video,
20

20

00:00:48.950  -->  00:00:51.920
we're gonna put 22 into array index zero,
21

21

00:00:51.920  -->  00:00:53.920
then we're gonna traverse the next level
22

22

00:00:53.920  -->  00:00:57.030
from left to right, so 19 will go into index one
23

23

00:00:57.030  -->  00:00:59.430
and 18 will go into index two
24

24

00:00:59.430  -->  00:01:01.390
and then we move down to the next level
25

25

00:01:01.390  -->  00:01:03.640
and 15's gonna go into three,
26

26

00:01:03.640  -->  00:01:06.070
three will go into four,
27

27

00:01:06.070  -->  00:01:08.090
14 will go into five
28

28

00:01:08.090  -->  00:01:10.340
and four will go into six
29

29

00:01:10.340  -->  00:01:12.240
and then we move down to the next level
30

30

00:01:12.240  -->  00:01:14.660
and finally 12 will go into seven
31

31

00:01:14.660  -->  00:01:18.010
and so, this is how we figure out the parent
32

32

00:01:18.010  -->  00:01:22.110
and the children for any slot in the array
33

33

00:01:22.110  -->  00:01:24.930
and so, if we look at the node at array i,
34

34

00:01:24.930  -->  00:01:28.520
so let's go with 15, so if we go back here,
35

35

00:01:28.520  -->  00:01:33.290
15 has 12 as its child and its parent is 19.
36

36

00:01:33.290  -->  00:01:37.470
So, for 15, which is at index three,
37

37

00:01:37.470  -->  00:01:40.528
so i would be three, to find its left child,
38

38

00:01:40.528  -->  00:01:44.110
we multiply two by i and add done,
39

39

00:01:44.110  -->  00:01:47.740
so we're gonna say two times three is six plus one is seven
40

40

00:01:47.740  -->  00:01:49.360
and so, at array index seven,
41

41

00:01:49.360  -->  00:01:52.210
there is 12, that's 15's child.
42

42

00:01:52.210  -->  00:01:53.909
It doesn't have a right child,
43

43

00:01:53.909  -->  00:01:56.210
you would calculate the right child
44

44

00:01:56.210  -->  00:01:59.720
by multiplying two by i and adding two
45

45

00:01:59.720  -->  00:02:01.810
and we'd know it doesn't have a right child
46

46

00:02:01.810  -->  00:02:04.440
because we'd know that that was out of bounds.
47

47

00:02:04.440  -->  00:02:06.710
If you wanted to get 15's parent,
48

48

00:02:06.710  -->  00:02:10.410
and if we go back up, 15's parent is 19,
49

49

00:02:10.410  -->  00:02:12.630
we use the following expression.
50

50

00:02:12.630  -->  00:02:15.040
We subtract one from i,
51

51

00:02:15.040  -->  00:02:16.760
we divide the result from two
52

52

00:02:16.760  -->  00:02:18.290
and we take the floor of that
53

53

00:02:18.290  -->  00:02:20.990
and that just means that we're gonna round down
54

54

00:02:20.990  -->  00:02:22.950
to the nearest whole number
55

55

00:02:22.950  -->  00:02:25.470
and so, 15 is at position three,
56

56

00:02:25.470  -->  00:02:28.460
so we'd say three minus one is two
57

57

00:02:28.460  -->  00:02:31.650
divided by two is one and the floor of that is one
58

58

00:02:31.650  -->  00:02:34.170
and so, its parent is at index one.
59

59

00:02:34.170  -->  00:02:35.660
And that's 19.
60

60

00:02:35.660  -->  00:02:36.970
And so, let's look at another one
61

61

00:02:36.970  -->  00:02:37.990
that has two children.
62

62

00:02:37.990  -->  00:02:39.040
Let's look at 18.
63

63

00:02:39.040  -->  00:02:42.240
So, 18 has 14 and four,
64

64

00:02:42.240  -->  00:02:45.730
so 14 is its left child, four is its right child
65

65

00:02:45.730  -->  00:02:47.660
and its parent is 22.
66

66

00:02:47.660  -->  00:02:50.210
And so, 18 is at position two,
67

67

00:02:50.210  -->  00:02:51.750
so to find its left child,
68

68

00:02:51.750  -->  00:02:54.380
we'll multiply two by two, get four,
69

69

00:02:54.380  -->  00:02:55.750
plus one is five
70

70

00:02:55.750  -->  00:02:58.350
and so, its left child is 14
71

71

00:02:58.350  -->  00:02:59.650
and to get its right child
72

72

00:02:59.650  -->  00:03:02.650
will be two times two is four plus two is six
73

73

00:03:02.650  -->  00:03:05.360
and that's four and so, we figured out its left
74

74

00:03:05.360  -->  00:03:06.193
and right children.
75

75

00:03:06.193  -->  00:03:07.320
Now, to get its parent,
76

76

00:03:07.320  -->  00:03:09.110
we're gonna subtract one from two,
77

77

00:03:09.110  -->  00:03:10.877
so we're gonna get one over two
78

78

00:03:10.877  -->  00:03:15.877
is 0.5 and the floor of that is zero and that's 22.
79

79

00:03:16.360  -->  00:03:20.650
And so, this is how we store complete binary trees
80

80

00:03:20.650  -->  00:03:23.310
in an array, it's very important to understand
81

81

00:03:23.310  -->  00:03:25.130
and remember that we can only do this
82

82

00:03:25.130  -->  00:03:27.010
with complete binary trees.
83

83

00:03:27.010  -->  00:03:28.210
Otherwise this wouldn't work
84

84

00:03:28.210  -->  00:03:30.140
because let's say, if we go back up,
85

85

00:03:30.140  -->  00:03:32.287
let's say 12 was over here somewhere.
86

86

00:03:32.287  -->  00:03:35.760
Then we're not gonna be able to use this equation
87

87

00:03:35.760  -->  00:03:38.250
if we put 12 at seven and we wanna do that
88

88

00:03:38.250  -->  00:03:40.800
because we don't want empty slots in the array.
89

89

00:03:40.800  -->  00:03:42.440
These equations wouldn't work.
90

90

00:03:42.440  -->  00:03:45.430
We're not gonna be able to calculate 12's parent.
91

91

00:03:45.430  -->  00:03:46.900
We'll get the wrong value.
92

92

00:03:46.900  -->  00:03:50.060
And so, this works because there are no empty spots
93

93

00:03:50.060  -->  00:03:54.040
in the tree and so, we can just traverse each level
94

94

00:03:54.040  -->  00:03:56.310
in turn and fill out the array.
95

95

00:03:56.310  -->  00:03:58.610
Now let's talk about inserting into the heap.
96

96

00:03:58.610  -->  00:04:01.420
I talked about this a little bit a couple of videos ago.
97

97

00:04:01.420  -->  00:04:04.460
So, we always add new items to the end of the array
98

98

00:04:04.460  -->  00:04:05.990
and then we have to fix the heap
99

99

00:04:05.990  -->  00:04:08.000
because if we go back here,
100

100

00:04:08.000  -->  00:04:09.790
let's say we had more array back here
101

101

00:04:09.790  -->  00:04:13.780
and we come and we add the value 95
102

102

00:04:13.780  -->  00:04:15.870
into the heap and we put it here.
103

103

00:04:15.870  -->  00:04:17.130
This isn't a heap anymore
104

104

00:04:17.130  -->  00:04:19.320
because this is a max heap
105

105

00:04:19.320  -->  00:04:22.040
and in a max heap, the value at the parent
106

106

00:04:22.040  -->  00:04:23.810
has to be greater than or equal
107

107

00:04:23.810  -->  00:04:25.380
to the value of its children
108

108

00:04:25.380  -->  00:04:27.630
and if we come along and stick 95 at the end
109

109

00:04:27.630  -->  00:04:29.900
of the array, that's obviously not gonna be true.
110

110

00:04:29.900  -->  00:04:31.790
First of all, it's the maximum value,
111

111

00:04:31.790  -->  00:04:33.670
so it should be at position zero
112

112

00:04:33.670  -->  00:04:37.430
but its immediate parent, if it was index eight,
113

113

00:04:37.430  -->  00:04:40.350
its parent would be eight minus one is seven
114

114

00:04:40.350  -->  00:04:44.253
over two is 3.5, so its parent is 15.
115

115

00:04:45.449  -->  00:04:49.500
15 is obviously not greater than or equal to 95
116

116

00:04:49.500  -->  00:04:52.760
and so, we have to heapify this heap,
117

117

00:04:52.760  -->  00:04:54.447
meaning we have to fix it.
118

118

00:04:54.447  -->  00:04:58.120
We have to move 95 into its correct position
119

119

00:04:58.120  -->  00:04:59.470
and so, the way we do this,
120

120

00:04:59.470  -->  00:05:01.500
it's really not that complicated at all.
121

121

00:05:01.500  -->  00:05:03.550
What we do is we compare the new item
122

122

00:05:03.550  -->  00:05:05.620
against its parent and we can get its parent
123

123

00:05:05.620  -->  00:05:08.580
using that calculation, that expression,
124

124

00:05:08.580  -->  00:05:10.810
and if the item is greater than its parent,
125

125

00:05:10.810  -->  00:05:12.800
we swap the item with its parent.
126

126

00:05:12.800  -->  00:05:15.060
And then we just keep rinsing and repeating
127

127

00:05:15.060  -->  00:05:18.100
until it either ends up being the root
128

128

00:05:18.100  -->  00:05:20.420
or its less than its parent.
129

129

00:05:20.420  -->  00:05:21.970
And so, let's look at an example.
130

130

00:05:21.970  -->  00:05:25.190
We're going to insert a value into this tree
131

131

00:05:25.190  -->  00:05:27.430
and so, we're gonna start by putting it here
132

132

00:05:27.430  -->  00:05:30.310
because remember, when we insert values into a heap,
133

133

00:05:30.310  -->  00:05:32.810
we put them into the next available position
134

134

00:05:32.810  -->  00:05:34.800
to keep this tree as a complete tree
135

135

00:05:34.800  -->  00:05:37.150
and so, the next available position is here.
136

136

00:05:37.150  -->  00:05:39.920
And so, in our array, we're gonna put it here,
137

137

00:05:39.920  -->  00:05:42.390
so pretend there's more array beyond here
138

138

00:05:42.390  -->  00:05:45.000
and we have an empty slot at index eight.
139

139

00:05:45.000  -->  00:05:46.880
We're gonna go through it visually
140

140

00:05:46.880  -->  00:05:48.720
with the tree so you can kind of see
141

141

00:05:48.720  -->  00:05:50.080
what would happen but of course,
142

142

00:05:50.080  -->  00:05:51.890
when we're doing the swapping,
143

143

00:05:51.890  -->  00:05:54.050
we're just swapping two items in the array
144

144

00:05:54.050  -->  00:05:56.640
just like we did when we went through sort algorithms.
145

145

00:05:56.640  -->  00:05:59.310
And so, we're gonna start out by putting 20 here.
146

146

00:05:59.310  -->  00:06:01.140
We're gonna insert the value 20.
147

147

00:06:01.140  -->  00:06:04.760
Now this is not a heap anymore
148

148

00:06:04.760  -->  00:06:07.260
because 20 is greater than 15
149

149

00:06:07.260  -->  00:06:09.310
and so, this is no longer a max heap
150

150

00:06:09.310  -->  00:06:10.580
and so, the first thing we're gonna do
151

151

00:06:10.580  -->  00:06:12.410
is compare 20 against its parent,
152

152

00:06:12.410  -->  00:06:14.600
so we compare 20 against 15,
153

153

00:06:14.600  -->  00:06:17.420
20 is greater than 15 and so, we're gonna swap it
154

154

00:06:17.420  -->  00:06:20.700
with its parent and so, 15 ends up down here
155

155

00:06:20.700  -->  00:06:23.840
and now 20 is here, so now we rinse and repeat.
156

156

00:06:23.840  -->  00:06:26.480
So, we're gonna compare 20 against its parent.
157

157

00:06:26.480  -->  00:06:28.450
Well, 20 is greater than 19,
158

158

00:06:28.450  -->  00:06:30.350
so we're gonna swap these guys
159

159

00:06:30.350  -->  00:06:32.400
and so, now 20 is up here
160

160

00:06:32.400  -->  00:06:35.630
and now we're gonna compare 20 against 22,
161

161

00:06:35.630  -->  00:06:37.490
20 is less than 22
162

162

00:06:37.490  -->  00:06:40.150
and so, we have finished the heapify process
163

163

00:06:40.150  -->  00:06:41.710
and this is now a heap.
164

164

00:06:41.710  -->  00:06:46.710
Every node has a value greater than or equal to its children
165

165

00:06:46.780  -->  00:06:48.220
and this is very simple to do
166

166

00:06:48.220  -->  00:06:50.720
because we'll store the heap as an array
167

167

00:06:50.720  -->  00:06:52.790
and so, when we're comparing,
168

168

00:06:52.790  -->  00:06:56.278
all we have to do is calculate where the node's parent is,
169

169

00:06:56.278  -->  00:07:00.580
compare them and if the new value in the new node
170

170

00:07:00.580  -->  00:07:01.840
is less than the parent value,
171

171

00:07:01.840  -->  00:07:04.690
we just swap them and so, this swapping works
172

172

00:07:04.690  -->  00:07:08.540
because the characteristic of, in this case,
173

173

00:07:08.540  -->  00:07:11.730
the max heap is maintained when we swap
174

174

00:07:11.730  -->  00:07:14.148
because every time we swap we're swapping
175

175

00:07:14.148  -->  00:07:16.460
a greater value with its parent
176

176

00:07:16.460  -->  00:07:18.720
and so, we know that after the swap,
177

177

00:07:18.720  -->  00:07:21.410
the parent will have a greater value than the child.
178

178

00:07:21.410  -->  00:07:22.810
And so, that's all there is
179

179

00:07:22.810  -->  00:07:25.990
to storing a complete binary tree
180

180

00:07:25.990  -->  00:07:30.380
as an array and all there is heapifying the heap
181

181

00:07:30.380  -->  00:07:32.370
after we insert a value.
182

182

00:07:32.370  -->  00:07:34.860
Now obviously we would also have to heapify
183

183

00:07:34.860  -->  00:07:36.640
after deleting a value
184

184

00:07:36.640  -->  00:07:38.750
and in that case, it would be a little bit more involved
185

185

00:07:38.750  -->  00:07:41.740
because it depends on which node we're deleting,
186

186

00:07:41.740  -->  00:07:43.610
where it's located in the tree
187

187

00:07:43.610  -->  00:07:46.900
and so, we'll take a look at what we do for a delete
188

188

00:07:46.900  -->  00:07:48.910
in a later video but for now,
189

189

00:07:48.910  -->  00:07:52.480
let's move on and let's start to implement a heap.
190

190

00:07:52.480  -->  00:07:54.030
I'll see you in the next video.
