WEBVTT
1
1

00:00:00.027  -->  00:00:02.613
(lively electronic music)
2

2

00:00:02.613  -->  00:00:05.590
(keyboard clicking)
3

3

00:00:05.590  -->  00:00:08.570
<v Sarah>We can talk about the heapsort algorithm.</v>
4

4

00:00:08.570  -->  00:00:10.510
This'll be the final sort algorithm
5

5

00:00:10.510  -->  00:00:12.290
that we look at in the course,
6

6

00:00:12.290  -->  00:00:14.870
and so how does this algorithm work?
7

7

00:00:14.870  -->  00:00:17.830
Well, you need a heap, so this sort algorithm
8

8

00:00:17.830  -->  00:00:19.640
can only sort a heap.
9

9

00:00:19.640  -->  00:00:21.770
And when we're dealing with max heaps,
10

10

00:00:21.770  -->  00:00:24.470
and you can get the equivalent information in min heaps,
11

11

00:00:24.470  -->  00:00:26.930
the implementation would be slightly different,
12

12

00:00:26.930  -->  00:00:29.090
but the concepts would be the same.
13

13

00:00:29.090  -->  00:00:31.190
So we're gonna assume we're dealing with a max heap,
14

14

00:00:31.190  -->  00:00:32.850
and when we're dealing with a max heap
15

15

00:00:32.850  -->  00:00:35.060
we know the root has the largest value.
16

16

00:00:35.060  -->  00:00:38.120
And so if we have an array that is a heap
17

17

00:00:38.120  -->  00:00:41.150
and we wanna sort that array, what we do is
18

18

00:00:41.150  -->  00:00:44.450
we swap the root with the last element in the array.
19

19

00:00:44.450  -->  00:00:47.870
And what I mean by that is the last element in the heap.
20

20

00:00:47.870  -->  00:00:50.550
And so we take the root, which is the maximum value,
21

21

00:00:50.550  -->  00:00:53.070
we swap it with the last item in the heap,
22

22

00:00:53.070  -->  00:00:56.570
and then that means that the root is in its correct
23

23

00:00:56.570  -->  00:00:59.810
sorted position, relative to everything else in the heap.
24

24

00:00:59.810  -->  00:01:02.430
And then we have to heapify the tree,
25

25

00:01:02.430  -->  00:01:05.113
we have to heapify the heap, but we exclude
26

26

00:01:05.113  -->  00:01:09.440
the last node, so we exclude the root now.
27

27

00:01:09.440  -->  00:01:12.720
Because the root is now in that last node,
28

28

00:01:12.720  -->  00:01:15.650
we don't include it when we heapify the heap,
29

29

00:01:15.650  -->  00:01:17.650
because if we did we'd end up moving the root
30

30

00:01:17.650  -->  00:01:19.940
back up to the root and we don't wanna do that.
31

31

00:01:19.940  -->  00:01:23.520
And so we take the item at value zero,
32

32

00:01:23.520  -->  00:01:26.960
we swap it with the last item in the heap,
33

33

00:01:26.960  -->  00:01:28.950
and then we heapify everything
34

34

00:01:28.950  -->  00:01:32.110
up to the last item minus one.
35

35

00:01:32.110  -->  00:01:35.100
And after we've done that, the new root will be
36

36

00:01:35.100  -->  00:01:37.640
the second largest element in the heap,
37

37

00:01:37.640  -->  00:01:40.330
and then we rinse and repeat, and so we take the new root
38

38

00:01:40.330  -->  00:01:43.860
and we swap it with the last value in the new heap,
39

39

00:01:43.860  -->  00:01:45.340
which we have reduced by one,
40

40

00:01:45.340  -->  00:01:48.130
because when we swapped the root to the end,
41

41

00:01:48.130  -->  00:01:51.440
we then reduced the size of the heap by one,
42

42

00:01:51.440  -->  00:01:55.154
and we heapify that reduced heap and after we've done that
43

43

00:01:55.154  -->  00:01:58.470
the new root will be the second largest element
44

44

00:01:58.470  -->  00:02:01.580
that was in the original heap, and so we rinse and repeat.
45

45

00:02:01.580  -->  00:02:03.710
We're gonna swap that with the last element
46

46

00:02:03.710  -->  00:02:06.560
in the new heap and now we heapify,
47

47

00:02:06.560  -->  00:02:08.380
we reduce the heap by one again,
48

48

00:02:08.380  -->  00:02:11.570
so now our heap is gonna be reduced by two elements,
49

49

00:02:11.570  -->  00:02:14.810
we heapify what's left and when we're finished,
50

50

00:02:14.810  -->  00:02:17.170
the root will now be the third largest element
51

51

00:02:17.170  -->  00:02:20.520
in the data set and so, again, we rinse and repeat.
52

52

00:02:20.520  -->  00:02:23.210
And so, if you'll recall, when we did the delete method
53

53

00:02:23.210  -->  00:02:26.863
and we had a fixed heap below method, and we had that
54

54

00:02:26.863  -->  00:02:29.150
lastHeapIndex parameter and I said we were gonna
55

55

00:02:29.150  -->  00:02:30.250
need it for the heap sort,
56

56

00:02:30.250  -->  00:02:32.940
well this is why we're gonna need that parameter.
57

57

00:02:32.940  -->  00:02:36.600
It's because on every iteration, the heap is reduced
58

58

00:02:36.600  -->  00:02:39.090
by one and so that lastHeapIndex
59

59

00:02:39.090  -->  00:02:41.620
gets decremented by one on each iteration,
60

60

00:02:41.620  -->  00:02:43.380
and you'll see this in the implementation.
61

61

00:02:43.380  -->  00:02:45.350
So this is the heap we've been looking at,
62

62

00:02:45.350  -->  00:02:47.500
this is what it looks like in the array,
63

63

00:02:47.500  -->  00:02:51.630
and so our lastHeapIndex, when we start, is seven,
64

64

00:02:51.630  -->  00:02:55.930
and we're gonna swap heap[0] With [lastHeapIndex].
65

65

00:02:55.930  -->  00:02:58.870
There's a typo here, that should be a capital I.
66

66

00:02:58.870  -->  00:03:02.220
And so we're gonna swap 80 with 67,
67

67

00:03:02.220  -->  00:03:05.580
and so after we've done that, this is the situation we have.
68

68

00:03:05.580  -->  00:03:06.810
Now this isn't a heap.
69

69

00:03:06.810  -->  00:03:09.800
If we look at the whole thing, it's not a heap.
70

70

00:03:09.800  -->  00:03:13.140
But what we're going to do is we're now going to say,
71

71

00:03:13.140  -->  00:03:16.909
okay, our heap ends at index six, and so we're gonna
72

72

00:03:16.909  -->  00:03:21.370
heapify what's left, so from indexes zero to six,
73

73

00:03:21.370  -->  00:03:24.860
we're now gonna heapify that section of the array.
74

74

00:03:24.860  -->  00:03:26.090
And once we've done that,
75

75

00:03:26.090  -->  00:03:28.570
this is what the array will look like.
76

76

00:03:28.570  -->  00:03:32.010
And, as I said, our lastHeapIndex is now six.
77

77

00:03:32.010  -->  00:03:35.910
75 is now the new root and so we're gonna rinse and repeat.
78

78

00:03:35.910  -->  00:03:39.270
So we're gonna swap 75 with what's at the lastHeapIndex,
79

79

00:03:39.270  -->  00:03:42.950
so now it's 52, so we're gonna swap 75 with 52.
80

80

00:03:42.950  -->  00:03:47.110
And now we're gonna reduce the size of the heap by one,
81

81

00:03:47.110  -->  00:03:50.260
so now we're gonna say our heap consists
82

82

00:03:50.260  -->  00:03:54.030
of elements zero to five, and we're gonna heapify
83

83

00:03:54.030  -->  00:03:55.430
this part of the array.
84

84

00:03:55.430  -->  00:03:58.770
And after we've done that, we'll have this situation.
85

85

00:03:58.770  -->  00:04:00.980
So these two are no longer part of the heap,
86

86

00:04:00.980  -->  00:04:04.380
they are now in sorted order and now we have
87

87

00:04:04.380  -->  00:04:07.200
the third largest element at the top of the array.
88

88

00:04:07.200  -->  00:04:11.070
The lastHeapIndex is five, so this is our heap now
89

89

00:04:11.070  -->  00:04:13.400
and we're going to rinse and repeat.
90

90

00:04:13.400  -->  00:04:15.730
We're not gonna continue now, I think you get the idea,
91

91

00:04:15.730  -->  00:04:18.840
but what we would do is swap 68 with 40
92

92

00:04:18.840  -->  00:04:21.840
and then we'd heapify elements zero to four
93

93

00:04:21.840  -->  00:04:25.160
and when we're finished 67 should be at the root,
94

94

00:04:25.160  -->  00:04:28.170
because it's now the largest value of the remaining heap
95

95

00:04:28.170  -->  00:04:31.340
and our heap would consist of elements zero to four.
96

96

00:04:31.340  -->  00:04:34.490
So the lastHeapIndex would be reduced to four.
97

97

00:04:34.490  -->  00:04:36.470
And we keep doing that until, of course,
98

98

00:04:36.470  -->  00:04:38.990
we just hit the one element and at that point
99

99

00:04:38.990  -->  00:04:39.890
our heap is sorted.
100

100

00:04:39.890  -->  00:04:42.830
Now it's possible there's more array beyond here,
101

101

00:04:42.830  -->  00:04:45.470
but this part of the array was never part of the heap.
102

102

00:04:45.470  -->  00:04:49.220
Okay, so that's it for how this works.
103

103

00:04:49.220  -->  00:04:52.120
Let's go ahead now and implement the algorithm.
104

104

00:04:52.120  -->  00:04:53.670
I'll see you in the next video.
