WEBVTT
1
1

00:00:00.029  -->  00:00:05.029
(lively music)
(keyboard clacking)
2

2

00:00:05.550  -->  00:00:07.660
<v Sarah>All right, so in this video,</v>
3

3

00:00:07.660  -->  00:00:08.730
we're gonna take a look
4

4

00:00:08.730  -->  00:00:12.310
at some of the classes and interfaces in the JDK
5

5

00:00:12.310  -->  00:00:13.660
that are related to queues.
6

6

00:00:13.660  -->  00:00:15.910
But before we do that, I just wanted to say
7

7

00:00:15.910  -->  00:00:18.580
that the time complexity for a queue that's backed
8

8

00:00:18.580  -->  00:00:22.660
by an array will of course either be constant or linear.
9

9

00:00:22.660  -->  00:00:24.690
It'll be constant O of one
10

10

00:00:24.690  -->  00:00:26.850
if we don't have to resize the array
11

11

00:00:26.850  -->  00:00:28.420
and linear if we do.
12

12

00:00:28.420  -->  00:00:31.370
Now, I'm not going to go through the implementation
13

13

00:00:31.370  -->  00:00:33.410
of a queue with a linked list,
14

14

00:00:33.410  -->  00:00:35.500
a linked list, a doubly linked list
15

15

00:00:35.500  -->  00:00:37.250
is perfect of queues.
16

16

00:00:37.250  -->  00:00:39.850
I mean, you add items to the tail
17

17

00:00:39.850  -->  00:00:43.730
of the list and you remove items from the head of the list.
18

18

00:00:43.730  -->  00:00:47.280
It's perfect and all of the operations,
19

19

00:00:47.280  -->  00:00:50.300
the add, remove, and peak operations
20

20

00:00:50.300  -->  00:00:52.910
would be performed in constant time.
21

21

00:00:52.910  -->  00:00:55.140
To implement the queue,
22

22

00:00:55.140  -->  00:00:57.330
we'd do exactly what we did when we implemented
23

23

00:00:57.330  -->  00:00:58.950
a stack using a linked list.
24

24

00:00:58.950  -->  00:01:01.780
We'd wrap the LinkedLink class
25

25

00:01:01.780  -->  00:01:05.470
with a some other class that we would call a queue let's say
26

26

00:01:05.470  -->  00:01:08.460
and we would just expose the add, remove
27

27

00:01:08.460  -->  00:01:12.100
and peak methods and so, I'm not gonna go through that again
28

28

00:01:12.100  -->  00:01:14.350
because it's simple to do
29

29

00:01:14.350  -->  00:01:17.560
and if you need to review what we did with the stack,
30

30

00:01:17.560  -->  00:01:19.830
you can go ahead and watch the video
31

31

00:01:19.830  -->  00:01:22.650
about backing a stack with a linked list
32

32

00:01:22.650  -->  00:01:24.240
and the only difference with a queue
33

33

00:01:24.240  -->  00:01:26.940
would be that instead of exposing the push, pop
34

34

00:01:26.940  -->  00:01:28.640
and peak methods, you would expose
35

35

00:01:28.640  -->  00:01:31.080
the add, remove and peak methods.
36

36

00:01:31.080  -->  00:01:33.230
Okay, so with that out of the way,
37

37

00:01:33.230  -->  00:01:36.237
let's take a look at some of the classes in the JDK.
38

38

00:01:36.237  -->  00:01:38.763
The JDK has a queue interface
39

39

00:01:38.763  -->  00:01:40.870
that we can use and as you can see,
40

40

00:01:40.870  -->  00:01:43.890
there are quite a number of classes that implement this.
41

41

00:01:43.890  -->  00:01:45.430
If we take a look at the methods,
42

42

00:01:45.430  -->  00:01:46.690
we'll see there's not that many.
43

43

00:01:46.690  -->  00:01:49.450
There's the add method, the peak method
44

44

00:01:49.450  -->  00:01:50.940
and the remove method.
45

45

00:01:50.940  -->  00:01:54.050
There's also pull, it says it retrieves and removes
46

46

00:01:54.050  -->  00:01:55.150
the head of this queue
47

47

00:01:55.150  -->  00:01:57.250
or returns null if the queue is empty,
48

48

00:01:57.250  -->  00:02:00.770
so with remove, I believe if the queue is empty,
49

49

00:02:00.770  -->  00:02:03.930
let's check this, we'll get the no such element exception.
50

50

00:02:03.930  -->  00:02:06.080
So, the difference between pull and remove
51

51

00:02:06.080  -->  00:02:08.070
is in the remove case,
52

52

00:02:08.070  -->  00:02:10.810
if the queue is empty, you get an exception
53

53

00:02:10.810  -->  00:02:12.730
and in the pull case, if it's empty,
54

54

00:02:12.730  -->  00:02:14.080
you're just gonna get a null.
55

55

00:02:14.080  -->  00:02:16.170
There's also offer and you'll see here
56

56

00:02:16.170  -->  00:02:18.630
it inserts the specified element
57

57

00:02:18.630  -->  00:02:20.180
if it's possible to do so
58

58

00:02:20.180  -->  00:02:23.050
without violating capacity restrictions.
59

59

00:02:23.050  -->  00:02:24.780
So this returns a Boolean,
60

60

00:02:24.780  -->  00:02:26.410
you'll get a true back if it was able
61

61

00:02:26.410  -->  00:02:28.640
to insert the element and false otherwise,
62

62

00:02:28.640  -->  00:02:31.203
so queue isn't a very complex interface.
63

63

00:02:31.203  -->  00:02:33.940
It's only been in the JDK since 1.5,
64

64

00:02:33.940  -->  00:02:35.580
so it's rather new
65

65

00:02:36.480  -->  00:02:37.830
and as we just saw,
66

66

00:02:37.830  -->  00:02:41.060
the add, remove and element,
67

67

00:02:41.060  -->  00:02:43.670
they're using element for peak
68

68

00:02:43.670  -->  00:02:47.440
that they throw an exception if you can't complete it
69

69

00:02:47.440  -->  00:02:49.980
and in this interface, offer, pull and peak
70

70

00:02:49.980  -->  00:02:51.290
will return a special value.
71

71

00:02:51.290  -->  00:02:52.860
So, when we implemented peak,
72

72

00:02:52.860  -->  00:02:54.780
we were throwing an exception,
73

73

00:02:54.780  -->  00:02:57.470
so we kind of implemented the methods
74

74

00:02:57.470  -->  00:02:59.610
that are in this column,
75

75

00:02:59.610  -->  00:03:00.860
didn't use the same names
76

76

00:03:00.860  -->  00:03:02.680
'cause we weren't implementing queue
77

77

00:03:02.680  -->  00:03:04.020
and the methods in this column
78

78

00:03:04.020  -->  00:03:07.000
don't throw exceptions, if they can't do something,
79

79

00:03:07.000  -->  00:03:09.753
they'll let you know by returning a specific value.
80

80

00:03:10.751  -->  00:03:13.020
So, here's a ArrayBlockingQueue.
81

81

00:03:13.020  -->  00:03:15.000
And if we go to that one, we'll see
82

82

00:03:15.000  -->  00:03:17.980
that it's a bounded blocking queue backed by an array
83

83

00:03:17.980  -->  00:03:21.030
and of course the queue orders elements FIFO,
84

84

00:03:21.030  -->  00:03:22.480
first in, first out.
85

85

00:03:22.480  -->  00:03:25.140
Now this is a bounded blocking queue,
86

86

00:03:25.140  -->  00:03:28.010
so it doesn't resize the array.
87

87

00:03:28.010  -->  00:03:31.780
It says once created, the capacity cannot be changed.
88

88

00:03:31.780  -->  00:03:34.660
Attempts to put an element into a full queue
89

89

00:03:34.660  -->  00:03:37.240
will result in the operation blocking.
90

90

00:03:37.240  -->  00:03:40.930
If a thread tries to add an element into this queue,
91

91

00:03:40.930  -->  00:03:43.970
it will block until some other thread
92

92

00:03:43.970  -->  00:03:46.640
has come along and taken an element out of the queue.
93

93

00:03:46.640  -->  00:03:48.530
And the same goes for remove.
94

94

00:03:48.530  -->  00:03:50.790
If you call remove and the queue is empty,
95

95

00:03:50.790  -->  00:03:54.250
then you'll gonna block until something's added to the queue
96

96

00:03:54.250  -->  00:03:55.740
and if we take a look at the package,
97

97

00:03:55.740  -->  00:03:59.070
we'll see that this is in the java.util.concurrent package.
98

98

00:03:59.070  -->  00:04:01.030
So, it's meant to be used
99

99

00:04:01.030  -->  00:04:04.670
when more than one thread is gonna be accessing the queue.
100

100

00:04:04.670  -->  00:04:06.340
So, often this type of queue
101

101

00:04:06.340  -->  00:04:09.120
is used in producer-consumer scenarios.
102

102

00:04:09.120  -->  00:04:11.030
So, let's say, for example,
103

103

00:04:11.030  -->  00:04:13.280
messages are being passed over a network
104

104

00:04:13.280  -->  00:04:15.100
from a producer to a consumer,
105

105

00:04:15.100  -->  00:04:18.840
the producer or the sender adds messages to the queue,
106

106

00:04:18.840  -->  00:04:22.490
and the consumer or receiver will remove messages
107

107

00:04:22.490  -->  00:04:23.580
from the queue.
108

108

00:04:23.580  -->  00:04:26.910
If the producer, the sender tries to add a message
109

109

00:04:26.910  -->  00:04:29.240
to the queue and the queue was full, it's gonna block
110

110

00:04:29.240  -->  00:04:32.470
until the receiver has removed a message from the queue
111

111

00:04:32.470  -->  00:04:35.810
and of course if the receiver goes to take a message
112

112

00:04:35.810  -->  00:04:37.830
off the queue and there's nothing there,
113

113

00:04:37.830  -->  00:04:41.650
it's gonna block until the sender has sent another message.
114

114

00:04:41.650  -->  00:04:44.000
So, this producer-consumer scenario
115

115

00:04:44.000  -->  00:04:47.070
is a perfect scenario for FIFO behaviour
116

116

00:04:47.070  -->  00:04:48.990
when you want the messages to be read
117

117

00:04:48.990  -->  00:04:51.290
in the order that they're sent, right?
118

118

00:04:51.290  -->  00:04:52.630
You can use a queue,
119

119

00:04:52.630  -->  00:04:54.830
you add messages to the end of the queue
120

120

00:04:54.830  -->  00:04:56.140
and at the other end,
121

121

00:04:56.140  -->  00:04:58.580
the receiver is gonna be taking messages off the front
122

122

00:04:58.580  -->  00:05:00.981
of the queue and so, the receive is going to be processing
123

123

00:05:00.981  -->  00:05:03.940
the messages in the order that they were sent
124

124

00:05:03.940  -->  00:05:07.140
and so, this implements the queue interface.
125

125

00:05:07.140  -->  00:05:09.970
You'll see there's also a BlockingQueue interface
126

126

00:05:09.970  -->  00:05:11.540
and it implements that as well.
127

127

00:05:11.540  -->  00:05:14.660
Now if we go back to the queue interface,
128

128

00:05:14.660  -->  00:05:17.660
we'll see there's another class called ConcurrentLinkedQueue
129

129

00:05:18.600  -->  00:05:21.570
and this is an unbounded thread safe queue
130

130

00:05:21.570  -->  00:05:23.140
based on linked nodes,
131

131

00:05:23.140  -->  00:05:25.270
so this is based on a linked list.
132

132

00:05:25.270  -->  00:05:28.660
It's also in the java.util.concurrent package
133

133

00:05:28.660  -->  00:05:30.440
because it's meant to be used by multiple threads
134

134

00:05:30.440  -->  00:05:32.180
but you'll notice that this one is using
135

135

00:05:32.180  -->  00:05:34.560
an efficient non-blocking algorithm
136

136

00:05:34.560  -->  00:05:36.596
and so, it doesn't block
137

137

00:05:36.596  -->  00:05:38.600
and one other thing to note
138

138

00:05:38.600  -->  00:05:41.510
is beware that unlike in most collections,
139

139

00:05:41.510  -->  00:05:44.880
the size method is not a constant time operation.
140

140

00:05:44.880  -->  00:05:46.739
Now normally to get the size,
141

141

00:05:46.739  -->  00:05:50.560
the number of steps doesn't depend on the number of items
142

142

00:05:50.560  -->  00:05:54.200
in the list because you're usually just keeping a counter
143

143

00:05:54.200  -->  00:05:56.950
but because this implementation of a queue
144

144

00:05:56.950  -->  00:05:59.380
can be accessed by multiple threads,
145

145

00:05:59.380  -->  00:06:01.700
determining the number of elements requires
146

146

00:06:01.700  -->  00:06:03.400
a traversal of the elements
147

147

00:06:03.400  -->  00:06:07.080
and so, that's not going to be a constant time operation.
148

148

00:06:07.080  -->  00:06:09.150
So, let's go back to the queue interface
149

149

00:06:09.150  -->  00:06:11.770
and as I said, there's a number of queues here
150

150

00:06:11.770  -->  00:06:13.020
and just like with the list,
151

151

00:06:13.020  -->  00:06:14.460
if you wanna implement your own queue,
152

152

00:06:14.460  -->  00:06:17.370
you might wanna start with the AbstractQueue class
153

153

00:06:17.370  -->  00:06:19.800
because that will have implemented the methods
154

154

00:06:20.693  -->  00:06:21.780
for queue and you can just override the ones
155

155

00:06:21.780  -->  00:06:23.570
that you wanna customise.
156

156

00:06:23.570  -->  00:06:27.540
We'll see that the plain old LinkedList implements queue
157

157

00:06:27.540  -->  00:06:29.380
and as I said,
158

158

00:06:29.380  -->  00:06:32.140
we can wrap this class just as we did for stacks
159

159

00:06:32.140  -->  00:06:35.092
and only expose the methods that are related to queues
160

160

00:06:35.092  -->  00:06:37.450
and before we leave this topic,
161

161

00:06:37.450  -->  00:06:40.000
I'll leave you to explore the other classes on your own,
162

162

00:06:40.000  -->  00:06:42.973
I wanna look at the Deque interface.
163

163

00:06:44.310  -->  00:06:45.690
So, we saw this interface
164

164

00:06:45.690  -->  00:06:46.990
when we were looking at stacks
165

165

00:06:46.990  -->  00:06:51.990
and a Deque supports insertion and removal at both ends
166

166

00:06:53.330  -->  00:06:55.910
and Deque is short for double-ended queue
167

167

00:06:55.910  -->  00:06:57.330
and is usually pronounced deque
168

168

00:06:57.330  -->  00:06:59.370
and so, I've actually been pronouncing it wrong.
169

169

00:06:59.370  -->  00:07:00.210
It's one of those things
170

170

00:07:00.210  -->  00:07:01.660
that I don't say very often.
171

171

00:07:01.660  -->  00:07:03.320
I probably have it in my notes somewhere
172

172

00:07:03.320  -->  00:07:05.920
to pronounce it deque, so there you go.
173

173

00:07:05.920  -->  00:07:07.250
It's pronounced deque
174

174

00:07:07.250  -->  00:07:10.100
and there's a few tables down here
175

175

00:07:10.100  -->  00:07:13.610
that summarise how you work at the head,
176

176

00:07:13.610  -->  00:07:14.920
how you work at the tail
177

177

00:07:14.920  -->  00:07:17.060
and then a comparison of the queue
178

178

00:07:17.060  -->  00:07:18.660
and the deque methods.
179

179

00:07:18.660  -->  00:07:20.880
Now I know to say that as deque.
180

180

00:07:20.880  -->  00:07:22.520
As we saw when we looked at stacks,
181

181

00:07:22.520  -->  00:07:26.520
Java has an ArrayDeque class right here
182

182

00:07:27.480  -->  00:07:30.660
and this is a resizable array implementation,
183

183

00:07:30.660  -->  00:07:33.180
so there's no capacity restrictions.
184

184

00:07:33.180  -->  00:07:35.840
This class was only added in Java 1.6,
185

185

00:07:35.840  -->  00:07:37.120
so it's pretty new
186

186

00:07:37.120  -->  00:07:39.230
and because it implements the deque interface,
187

187

00:07:39.230  -->  00:07:44.080
it has methods for addFirst and addLast
188

188

00:07:44.080  -->  00:07:46.320
because with the deque, we're allowed to add
189

189

00:07:46.320  -->  00:07:47.950
at the beginning and the end of a queue
190

190

00:07:47.950  -->  00:07:50.641
and of course LinkedList also implements
191

191

00:07:50.641  -->  00:07:52.710
this deque interface.
192

192

00:07:52.710  -->  00:07:55.100
We saw that when we were looking at linked lists.
193

193

00:07:55.100  -->  00:07:57.500
So, if you have a situation where you want a queue
194

194

00:07:57.500  -->  00:08:01.000
that you can add and remove items from both ends,
195

195

00:08:01.000  -->  00:08:03.070
then using one of the classes
196

196

00:08:03.070  -->  00:08:06.290
that implements the deque interface would be good for you.
197

197

00:08:06.290  -->  00:08:09.490
Queues are used way more often than double-ended queues.
198

198

00:08:09.490  -->  00:08:13.640
So, that's why we went into more detail about queues
199

199

00:08:13.640  -->  00:08:15.570
and that's pretty much all I'm gonna say
200

200

00:08:15.570  -->  00:08:18.090
about deques or double-ended queues.
201

201

00:08:18.090  -->  00:08:19.973
So, I'll see you in the next video.
