WEBVTT
1
1

00:00:05.555  -->  00:00:07.630
[Narrator] Alright, so now we're going
2

2

00:00:07.630  -->  00:00:09.478
to have a little queues challenge.
3

3

00:00:09.478  -->  00:00:11.794
And hopefully you did the stacks challenge
4

4

00:00:11.794  -->  00:00:14.896
because we're going to do the same thing except this time,
5

5

00:00:14.896  -->  00:00:19.191
I want your solution to use a stack and a queue.
6

6

00:00:19.191  -->  00:00:21.365
And so I want you to determine whether
7

7

00:00:21.365  -->  00:00:25.990
a string is a palindrome using a stack and a queue.
8

8

00:00:25.990  -->  00:00:28.081
And just like with the stacks challenge,
9

9

00:00:28.081  -->  00:00:30.505
strings may contain punctuation and spaces,
10

10

00:00:30.505  -->  00:00:33.385
and you should ignore those when you're determining
11

11

00:00:33.385  -->  00:00:36.958
whether a string is a palindrome and also ignore case.
12

12

00:00:36.958  -->  00:00:39.322
And so once again, a palindrome is a string
13

13

00:00:39.322  -->  00:00:41.547
that reads the same from left to right
14

14

00:00:41.547  -->  00:00:43.661
as it does from right to left.
15

15

00:00:43.661  -->  00:00:45.600
And so if we look at race car,
16

16

00:00:45.600  -->  00:00:48.205
if you read from left to right, it's race car
17

17

00:00:48.205  -->  00:00:50.100
and if you read it in reverse,
18

18

00:00:50.100  -->  00:00:53.287
from right to left, it's also racecar.
19

19

00:00:53.287  -->  00:00:55.099
Hello isn't a palindrome because
20

20

00:00:55.099  -->  00:00:57.699
if you read from right to left, it doesn't say hello,
21

21

00:00:57.699  -->  00:01:00.646
it says olleh or something like that.
22

22

00:01:00.646  -->  00:01:03.614
And I did, did i is a palindrome.
23

23

00:01:03.614  -->  00:01:06.000
If you ignore the spaces in the punctuation,
24

24

00:01:06.000  -->  00:01:08.484
reading it from left to right is the same
25

25

00:01:08.484  -->  00:01:10.689
as reading it from right to left.
26

26

00:01:10.689  -->  00:01:13.357
There's a starter project in the resources section
27

27

00:01:13.357  -->  00:01:14.858
so you can start with that.
28

28

00:01:14.858  -->  00:01:16.894
We're going to test the same strings
29

29

00:01:16.894  -->  00:01:18.856
we did in the stacks challenge.
30

30

00:01:18.856  -->  00:01:20.955
When I say to use a stack and queue,
31

31

00:01:20.955  -->  00:01:23.322
you can use classes in the JDK
32

32

00:01:23.322  -->  00:01:25.931
and all I'm going to do that again
33

33

00:01:25.931  -->  00:01:27.533
for the stack in the queue.
34

34

00:01:27.533  -->  00:01:32.160
And so, your solution should contain push and pop
35

35

00:01:32.160  -->  00:01:35.389
and should contain queue methods like
36

36

00:01:35.389  -->  00:01:38.125
add last and remove first.
37

37

00:01:38.125  -->  00:01:40.522
So I've given you a couple of hints there.
38

38

00:01:40.522  -->  00:01:44.092
So using your choice of stack in queue,
39

39

00:01:44.092  -->  00:01:47.338
go ahead and use the starter project
40

40

00:01:47.338  -->  00:01:50.254
in the resources section and complete the method
41

41

00:01:50.254  -->  00:01:52.334
that uses a stack and a queue to check
42

42

00:01:52.334  -->  00:01:54.393
whether a string is a palindrome.
43

43

00:01:54.393  -->  00:01:57.837
Good luck and I'll see you in the solution video.
