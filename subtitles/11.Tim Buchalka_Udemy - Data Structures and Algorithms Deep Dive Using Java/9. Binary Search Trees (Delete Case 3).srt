1
1

00:00:00,000  -->  00:00:02,385
(gentle music)
2

2

00:00:02,385  -->  00:00:05,270
(keyboard strokes)
3

3

00:00:05,270  -->  00:00:07,406
<v Instructor>So, in the last video we handled the cases</v>
4

4

00:00:07,406  -->  00:00:10,090
of deleting a node with no children.
5

5

00:00:10,090  -->  00:00:13,150
A leaf node or a node with one child.
6

6

00:00:13,150  -->  00:00:16,330
And now we have to handle the most complex case.
7

7

00:00:16,330  -->  00:00:18,730
Which is a node with two children.
8

8

00:00:18,730  -->  00:00:20,130
And so how do we do that?
9

9

00:00:20,130  -->  00:00:22,740
Because we can't just take the two children,
10

10

00:00:22,740  -->  00:00:26,170
and stick it onto the parent of the deleted node,
11

11

00:00:26,170  -->  00:00:28,250
because in a binary search tree
12

12

00:00:28,250  -->  00:00:30,020
each node can only have two children.
13

13

00:00:30,020  -->  00:00:33,380
And it's possible that the parent already has two children.
14

14

00:00:33,380  -->  00:00:34,730
So what do we do?
15

15

00:00:34,730  -->  00:00:36,080
Well whatever we do,
16

16

00:00:36,080  -->  00:00:39,530
we don't wanna disrupt the existing tree structure too much.
17

17

00:00:39,530  -->  00:00:41,700
Meaning we don't wanna have to shift around
18

18

00:00:41,700  -->  00:00:43,250
a whole bunch of nodes.
19

19

00:00:43,250  -->  00:00:44,130
What we're gonna do
20

20

00:00:44,130  -->  00:00:47,560
is we're gonna look for the replacement node.
21

21

00:00:47,560  -->  00:00:49,300
So when a node has two children,
22

22

00:00:49,300  -->  00:00:51,400
we're gonna replace that node
23

23

00:00:51,400  -->  00:00:54,740
with one of the nodes from it's subtrees.
24

24

00:00:54,740  -->  00:00:57,870
And we're either gonna take a node from the left subtree
25

25

00:00:57,870  -->  00:00:59,550
or a node from the right subtree.
26

26

00:00:59,550  -->  00:01:01,360
And when you write your delete code,
27

27

00:01:01,360  -->  00:01:02,900
stick with one or the other.
28

28

00:01:02,900  -->  00:01:04,280
So your delete code is either
29

29

00:01:04,280  -->  00:01:07,760
gonna look down the left subtree for the replacement node,
30

30

00:01:07,760  -->  00:01:09,760
or it's gonna look down the right subtree
31

31

00:01:09,760  -->  00:01:11,440
for the replacement node.
32

32

00:01:11,440  -->  00:01:14,160
And so, how do we find the replacement node?
33

33

00:01:14,160  -->  00:01:16,110
What value should we look for?
34

34

00:01:16,110  -->  00:01:17,720
Well we have to make sure
35

35

00:01:17,720  -->  00:01:18,850
that the characteristics
36

36

00:01:18,850  -->  00:01:21,160
of a binary search tree are preserved.
37

37

00:01:21,160  -->  00:01:24,920
And so if we take the value from the left subtree,
38

38

00:01:24,920  -->  00:01:28,690
we have to take the largest value in the left subtree.
39

39

00:01:28,690  -->  00:01:31,600
If we're going to replace the deleted node
40

40

00:01:31,600  -->  00:01:33,200
with a node from it's subtree,
41

41

00:01:33,200  -->  00:01:36,860
so right now the deleted node is the root of a subtree.
42

42

00:01:36,860  -->  00:01:39,460
In a binary search tree everything to the left
43

43

00:01:39,460  -->  00:01:42,500
has to be less than the deleted value.
44

44

00:01:42,500  -->  00:01:44,720
And so if we're gonna look for a replacement value
45

45

00:01:44,720  -->  00:01:45,820
in the left subtree,
46

46

00:01:45,820  -->  00:01:49,720
if we take the largest value in the left subtree,
47

47

00:01:49,720  -->  00:01:51,540
and we take that node,
48

48

00:01:51,540  -->  00:01:54,790
and replace the deleted node with that node,
49

49

00:01:54,790  -->  00:01:57,710
because we've taken the largest value from the left subtree,
50

50

00:01:57,710  -->  00:02:00,980
we know that everything that remains in the left subtree
51

51

00:02:00,980  -->  00:02:04,030
will still be smaller than the root of the subtree.
52

52

00:02:04,030  -->  00:02:05,230
And so we'll know that
53

53

00:02:05,230  -->  00:02:09,440
the characteristic of a binary search tree is preserved.
54

54

00:02:09,440  -->  00:02:11,070
And so if we're gonna look to the left
55

55

00:02:11,070  -->  00:02:14,030
we're gonna look for the maximum value in the left subtree,
56

56

00:02:14,030  -->  00:02:16,090
that's the node that we're gonna use
57

57

00:02:16,090  -->  00:02:18,040
to replace the root of the subtree,
58

58

00:02:18,040  -->  00:02:20,140
and because we're taking the maximum value,
59

59

00:02:20,140  -->  00:02:21,880
we know that everything in the left subtree
60

60

00:02:21,880  -->  00:02:23,490
is still gonna be less.
61

61

00:02:23,490  -->  00:02:26,350
Now if we were gonna do it from the right subtree,
62

62

00:02:26,350  -->  00:02:30,000
we'd wanna look for the smallest value for the same reason.
63

63

00:02:30,000  -->  00:02:33,780
After we've taken the node, the replacement node,
64

64

00:02:33,780  -->  00:02:35,650
and put it at the root of the subtree,
65

65

00:02:35,650  -->  00:02:38,760
everything in the right subtree still has to be greater
66

66

00:02:38,760  -->  00:02:39,737
than the root of the subtree.
67

67

00:02:39,737  -->  00:02:41,540
And the way that we guarantee that is
68

68

00:02:41,540  -->  00:02:44,080
to take the smallest value in the right subtree,
69

69

00:02:44,080  -->  00:02:47,010
because if it's the smallest value in the right subtree,
70

70

00:02:47,010  -->  00:02:48,910
then we know that all the other nodes
71

71

00:02:48,910  -->  00:02:50,710
are greater than that value,
72

72

00:02:50,710  -->  00:02:52,800
and so it's safe for us to take that value,
73

73

00:02:52,800  -->  00:02:54,040
and put it at the root.
74

74

00:02:54,040  -->  00:02:55,270
And so if we're gonna take
75

75

00:02:55,270  -->  00:02:57,110
the replacement value from the left,
76

76

00:02:57,110  -->  00:03:00,150
we wanna look for the largest value in the left subtree,
77

77

00:03:00,150  -->  00:03:00,983
and if we're gonna take
78

78

00:03:00,983  -->  00:03:02,640
the replacement value from the right,
79

79

00:03:02,640  -->  00:03:04,340
we look for the smallest value.
80

80

00:03:04,340  -->  00:03:05,520
So let's look at a picture,
81

81

00:03:05,520  -->  00:03:07,700
'cause hopefully this will make things clearer.
82

82

00:03:07,700  -->  00:03:10,090
And so here is the tree that we have right now.
83

83

00:03:10,090  -->  00:03:11,700
That we're building in our code.
84

84

00:03:11,700  -->  00:03:14,580
Now let's say we come along and we wanna delete 20.
85

85

00:03:14,580  -->  00:03:16,200
And so we wanna delete 20,
86

86

00:03:16,200  -->  00:03:17,580
and so what we're gonna do is
87

87

00:03:17,580  -->  00:03:21,020
we're gonna select a node from it's subtrees,
88

88

00:03:21,020  -->  00:03:24,100
and put that node in place of 20.
89

89

00:03:24,100  -->  00:03:25,670
And so let's say we're gonna look for
90

90

00:03:25,670  -->  00:03:28,110
that replacement node in the left subtree.
91

91

00:03:28,110  -->  00:03:30,560
And so we're gonna move down to the left subtree,
92

92

00:03:30,560  -->  00:03:33,400
and then we wanna look for the largest value
93

93

00:03:33,400  -->  00:03:34,385
in the left subtree.
94

94

00:03:34,385  -->  00:03:36,530
And the way that you find the maximum value is
95

95

00:03:36,530  -->  00:03:39,970
that you move along the right edges until you hit a node
96

96

00:03:39,970  -->  00:03:41,260
that doesn't have a right child.
97

97

00:03:41,260  -->  00:03:43,180
So in our case it won't take as long,
98

98

00:03:43,180  -->  00:03:45,320
'cause we're gonna move down to 15,
99

99

00:03:45,320  -->  00:03:47,090
and then we're gonna start travelling to the right,
100

100

00:03:47,090  -->  00:03:48,810
and oh, we find 17.
101

101

00:03:48,810  -->  00:03:49,930
And so what we're gonna do is,
102

102

00:03:49,930  -->  00:03:53,160
we're gonna take node 17 and put it here.
103

103

00:03:53,160  -->  00:03:57,170
And obviously we would null out 15's child.
104

104

00:03:57,170  -->  00:03:59,080
And so after the deletion,
105

105

00:03:59,080  -->  00:04:00,920
this is how our tree is going to look.
106

106

00:04:00,920  -->  00:04:05,920
We have 17 here, and 15 is still less than 17,
107

107

00:04:06,027  -->  00:04:07,950
and 22 is still greater.
108

108

00:04:07,950  -->  00:04:11,170
And because of the characteristics of a binary search tree,
109

109

00:04:11,170  -->  00:04:15,410
because we're taking the largest value in the left subtree,
110

110

00:04:15,410  -->  00:04:17,830
we know that everything else in the left subtree is
111

111

00:04:17,830  -->  00:04:19,245
gonna be smaller than that value.
112

112

00:04:19,245  -->  00:04:21,370
And so when we stick it up here,
113

113

00:04:21,370  -->  00:04:23,520
we know that everything in the left subtree
114

114

00:04:23,520  -->  00:04:24,790
is gonna be smaller.
115

115

00:04:24,790  -->  00:04:27,210
So the left subtree is preserved.
116

116

00:04:27,210  -->  00:04:29,780
And because we know everything in the right subtree is
117

117

00:04:29,780  -->  00:04:33,380
greater than this value and everything here is less.
118

118

00:04:33,380  -->  00:04:35,560
We know that anything we take from here is
119

119

00:04:35,560  -->  00:04:37,960
gonna be less than what is in the right subtree.
120

120

00:04:37,960  -->  00:04:41,270
And so the right subtree characteristic will be preserved.
121

121

00:04:41,270  -->  00:04:44,173
And so this is what the binary search tree looks like
122

122

00:04:44,173  -->  00:04:46,300
after we've deleted node 20,
123

123

00:04:46,300  -->  00:04:50,750
and 17 has been selected as the replacement value.
124

124

00:04:50,750  -->  00:04:53,810
Now, there are different ways you can implement deletes
125

125

00:04:53,810  -->  00:04:55,960
for no matter what situation you're in.
126

126

00:04:55,960  -->  00:04:58,100
You can either physically move the node.
127

127

00:04:58,100  -->  00:05:01,920
So, we could take this node and physically move it up here,
128

128

00:05:01,920  -->  00:05:04,350
and then we've got a bunch of rewiring to do.
129

129

00:05:04,350  -->  00:05:07,350
Or we can just take the value of 17,
130

130

00:05:07,350  -->  00:05:09,910
and replace the value in the existing node.
131

131

00:05:09,910  -->  00:05:12,580
So basically do a set data on the existing node
132

132

00:05:12,580  -->  00:05:14,320
to set it to 17.
133

133

00:05:14,320  -->  00:05:17,640
And then of course we have to clean up any references here.
134

134

00:05:17,640  -->  00:05:20,550
Now, if 17 had had a child,
135

135

00:05:20,550  -->  00:05:22,730
because we're looking for the largest value,
136

136

00:05:22,730  -->  00:05:25,650
17 can't have a right child.
137

137

00:05:25,650  -->  00:05:26,980
It can only have a left child.
138

138

00:05:26,980  -->  00:05:29,240
If it had a right child it wouldn't be the greatest value,
139

139

00:05:29,240  -->  00:05:30,500
so it wouldn't be selected.
140

140

00:05:30,500  -->  00:05:32,130
And so, the node we find,
141

141

00:05:32,130  -->  00:05:35,700
it'll either be a leaf or it will have only a left child.
142

142

00:05:35,700  -->  00:05:40,010
And so, if 17 had a left child, that child would replace 17.
143

143

00:05:40,010  -->  00:05:43,790
And so, 17 would become the node up here,
144

144

00:05:43,790  -->  00:05:47,420
and it's left child would become 15's right child.
145

145

00:05:47,420  -->  00:05:48,660
And so, when we're doing this,
146

146

00:05:48,660  -->  00:05:50,820
if the replacement node has a child,
147

147

00:05:50,820  -->  00:05:53,530
it just replaces the node in the tree.
148

148

00:05:53,530  -->  00:05:55,870
So, the replacement node becomes
149

149

00:05:55,870  -->  00:05:58,250
the new root of the subtree,
150

150

00:05:58,250  -->  00:06:02,060
and if it has a child, it's replaced by it's child.
151

151

00:06:02,060  -->  00:06:03,310
Let's try another one.
152

152

00:06:03,310  -->  00:06:07,330
So, if we go down here our tree has now been reset.
153

153

00:06:07,330  -->  00:06:10,200
And let's delete 27.
154

154

00:06:10,200  -->  00:06:11,860
And so, in this case
155

155

00:06:11,860  -->  00:06:14,060
we're gonna search down the right subtree.
156

156

00:06:14,060  -->  00:06:15,740
You wouldn't do this in a delete method.
157

157

00:06:15,740  -->  00:06:17,620
You'd always be doing the left or the right.
158

158

00:06:17,620  -->  00:06:19,190
But I wanna show both ways.
159

159

00:06:19,190  -->  00:06:22,680
So, in this situation we wanna delete 27,
160

160

00:06:22,680  -->  00:06:24,100
and we're gonna look down the right.
161

161

00:06:24,100  -->  00:06:27,210
And so, in this case we want the smallest value.
162

162

00:06:27,210  -->  00:06:29,770
For the same reason that we wanted the largest value
163

163

00:06:29,770  -->  00:06:31,670
when we look down the left subtree.
164

164

00:06:31,670  -->  00:06:33,140
We want the smallest value,
165

165

00:06:33,140  -->  00:06:36,530
because when we replace 27 with the value,
166

166

00:06:36,530  -->  00:06:38,100
everything in the right subtree
167

167

00:06:38,100  -->  00:06:40,280
still has to be greater than 27.
168

168

00:06:40,280  -->  00:06:41,760
And the way to guarantee that
169

169

00:06:41,760  -->  00:06:43,290
is to choose the smallest value.
170

170

00:06:43,290  -->  00:06:45,890
Because if we take the smallest value
171

171

00:06:45,890  -->  00:06:48,780
from the right subtree, then we can be guaranteed,
172

172

00:06:48,780  -->  00:06:51,120
when we move the smallest value up here,
173

173

00:06:51,120  -->  00:06:52,630
that anything that's left behind
174

174

00:06:52,630  -->  00:06:54,930
is greater than the new root.
175

175

00:06:54,930  -->  00:06:57,770
And so, the characteristics of a binary search tree
176

176

00:06:57,770  -->  00:06:59,030
will be preserved.
177

177

00:06:59,030  -->  00:07:00,040
And so, in this case,
178

178

00:07:00,040  -->  00:07:02,610
we're gonna move to the root of the subtree,
179

179

00:07:02,610  -->  00:07:05,040
we're gonna search for the replacement value,
180

180

00:07:05,040  -->  00:07:07,250
and because we're looking for the minimum value
181

181

00:07:07,250  -->  00:07:10,420
in the subtree, we're gonna move along the left edges.
182

182

00:07:10,420  -->  00:07:13,240
Until we hit a node that doesn't have a left child.
183

183

00:07:13,240  -->  00:07:17,300
And so, we're gonna find 29, 29 is the minimum value.
184

184

00:07:17,300  -->  00:07:20,040
We're gonna move the node for 29 up here,
185

185

00:07:20,040  -->  00:07:23,500
and obviously we'll null out 30's left child.
186

186

00:07:23,500  -->  00:07:25,590
Now just like with the left subtree,
187

187

00:07:25,590  -->  00:07:30,490
if 29 had a child it would have to be a right child.
188

188

00:07:30,490  -->  00:07:31,830
It couldn't be a left child,
189

189

00:07:31,830  -->  00:07:34,300
otherwise 29 wouldn't be the minimum.
190

190

00:07:34,300  -->  00:07:36,990
So if 29 has a right child,
191

191

00:07:36,990  -->  00:07:39,480
that child just replaces it in the tree.
192

192

00:07:39,480  -->  00:07:41,580
So if 29 had a right child,
193

193

00:07:41,580  -->  00:07:44,390
we'd take the node for 29 and put it up here,
194

194

00:07:44,390  -->  00:07:47,300
and the right child would replace the node in the tree.
195

195

00:07:47,300  -->  00:07:49,530
And if that node had a subtree it wouldn't matter.
196

196

00:07:49,530  -->  00:07:51,980
I mean, the subtree would just come along for the ride.
197

197

00:07:51,980  -->  00:07:55,640
And so, we're gonna replace node 27 with node 29.
198

198

00:07:55,640  -->  00:07:58,580
And after that's done, this is what our tree will look like.
199

199

00:07:58,580  -->  00:07:59,610
Let's do one more.
200

200

00:07:59,610  -->  00:08:02,570
Let's look at what would happen if we deleted the root.
201

201

00:08:02,570  -->  00:08:04,810
And so, we're gonna look down the right subtree,
202

202

00:08:04,810  -->  00:08:06,650
and we wanna find the minimum value.
203

203

00:08:06,650  -->  00:08:09,460
So this time, last time we deleted 27.
204

204

00:08:09,460  -->  00:08:11,490
So we were just looking at this right subtree.
205

205

00:08:11,490  -->  00:08:12,720
But now we're deleting the root,
206

206

00:08:12,720  -->  00:08:14,760
so we're gonna look at it's right subtree.
207

207

00:08:14,760  -->  00:08:17,730
And we're gonna move to the root of the right subtree,
208

208

00:08:17,730  -->  00:08:19,656
and then start travelling down the left edges
209

209

00:08:19,656  -->  00:08:22,980
until we hit a node that doesn't have a left child.
210

210

00:08:22,980  -->  00:08:24,160
That will be the minimum.
211

211

00:08:24,160  -->  00:08:26,080
And we're gonna find 26.
212

212

00:08:26,080  -->  00:08:27,860
And so, what we're gonna do is
213

213

00:08:27,860  -->  00:08:30,490
replace the root node with this node.
214

214

00:08:30,490  -->  00:08:33,720
And of course we'll null out 27's child.
215

215

00:08:33,720  -->  00:08:35,190
And so, after we've done that.
216

216

00:08:35,190  -->  00:08:37,820
After we've moved node 26 up here,
217

217

00:08:37,820  -->  00:08:40,180
and nulled out 27's child,
218

218

00:08:40,180  -->  00:08:42,120
this is the situation that we'll have.
219

219

00:08:42,120  -->  00:08:43,907
Okay, so now that we know how we're gonna handle
220

220

00:08:43,907  -->  00:08:46,330
the case of deleting a node with two children,
221

221

00:08:46,330  -->  00:08:50,200
let's move on and handle that case in our delete method.
222

222

00:08:50,200  -->  00:08:51,750
I'll see you in the next video.
