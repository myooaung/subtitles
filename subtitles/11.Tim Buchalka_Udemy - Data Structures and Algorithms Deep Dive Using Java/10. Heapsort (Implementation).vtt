WEBVTT
1
1

00:00:05.188  -->  00:00:07.460
<v Instructor>Alright, so let's implement Heapsort.</v>
2

2

00:00:07.460  -->  00:00:10.630
What I'll do is add a sort method to the heap class.
3

3

00:00:10.630  -->  00:00:15.330
So I'll do it after the delete method,
4

4

00:00:15.330  -->  00:00:20.330
and so we'll say "public void sort" and the last index,
5

5

00:00:22.040  -->  00:00:25.510
the last heap index so int last heap index
6

6

00:00:25.510  -->  00:00:29.220
will equal size minus one when we start out.
7

7

00:00:29.220  -->  00:00:33.100
Every time we swap the root with the last item
8

8

00:00:33.100  -->  00:00:36.240
in the heap, our heap will be reduced by one.
9

9

00:00:36.240  -->  00:00:39.358
So we're gonna say 4 int i = 0
10

10

00:00:39.358  -->  00:00:43.660
i less than the last heap index, i++
11

11

00:00:44.700  -->  00:00:47.237
and the first thing we're gonna do is swap the root
12

12

00:00:47.237  -->  00:00:50.110
with the last item.
13

13

00:00:50.110  -->  00:00:51.330
You can see there's a typo here,
14

14

00:00:51.330  -->  00:00:54.900
so let me change that to index, and change that index here.
15

15

00:00:54.900  -->  00:00:59.660
Alright, so we're gonna say int tmp= heap 0
16

16

00:00:59.660  -->  00:01:03.600
because that's the largest value in the heap.
17

17

00:01:03.600  -->  00:01:07.670
Then we'll say heap 0= heap last heap index -i
18

18

00:01:13.920  -->  00:01:17.840
because that's the location of the last item
19

19

00:01:17.840  -->  00:01:20.300
in the heap, remember we're gonna be reducing
20

20

00:01:20.300  -->  00:01:25.010
the heap by one every single time we exchange the root.
21

21

00:01:25.010  -->  00:01:27.870
And so when we start out, i is zero.
22

22

00:01:27.870  -->  00:01:31.910
So, we'll be exchanging it with the item of position
23

23

00:01:31.910  -->  00:01:34.789
last heap index when i becomes one,
24

24

00:01:34.789  -->  00:01:39.060
we'll then be exchanging it with last heap index -1
25

25

00:01:39.060  -->  00:01:42.020
because the original root will now be sitting
26

26

00:01:42.020  -->  00:01:44.829
at last heap index, so it's no longer part of the heap.
27

27

00:01:44.829  -->  00:01:47.400
Then, of course, we have to assign heap
28

28

00:01:47.400  -->  00:01:52.400
last heap index -i with temp.
29

29

00:01:52.950  -->  00:01:57.940
And so here we're exchanging the root with the last item
30

30

00:01:57.940  -->  00:01:59.540
in the heap, and remember that the heap
31

31

00:01:59.540  -->  00:02:02.290
is being reduced by one on each iteration.
32

32

00:02:02.290  -->  00:02:05.720
Now, once we've done the swapping, we have to fix the heap.
33

33

00:02:05.720  -->  00:02:08.320
And so the last thing we're gonna do is called fix heap
34

34

00:02:08.320  -->  00:02:11.441
below, and because we swapped the root we always wanna start
35

35

00:02:11.441  -->  00:02:15.970
at the root, and our heap consists of the indexes from
36

36

00:02:15.970  -->  00:02:20.970
zero two, last heap index, minus i, minus one.
37

37

00:02:23.260  -->  00:02:26.030
And so the very first time we call this
38

38

00:02:26.030  -->  00:02:29.020
last heap index will be size minus one
39

39

00:02:29.020  -->  00:02:31.210
and then we wanna subtract out i,
40

40

00:02:31.210  -->  00:02:33.090
and then we need to subtract out the one
41

41

00:02:33.090  -->  00:02:36.730
because we wanna exclude where we've put the root,
42

42

00:02:36.730  -->  00:02:39.640
and so in the first iteration if we look back
43

43

00:02:39.640  -->  00:02:42.920
at the main method, so we've got one, zero, one,
44

44

00:02:42.920  -->  00:02:44.597
two, three, four, five, six, seven
45

45

00:02:44.597  -->  00:02:48.180
and so the last index of our heap when we start out is seven
46

46

00:02:48.180  -->  00:02:52.290
and so last heap index will be set to seven
47

47

00:02:52.290  -->  00:02:54.720
because size would be eight.
48

48

00:02:54.720  -->  00:02:57.260
It's always pointing to the next available index,
49

49

00:02:57.260  -->  00:03:02.260
and so we're gonna swap the root with seven minus zero
50

50

00:03:02.260  -->  00:03:04.180
on the first iteration which is seven.
51

51

00:03:04.180  -->  00:03:07.200
So we're gonna swap the root with whatever's at heap seven
52

52

00:03:07.200  -->  00:03:11.260
and then at that point our heap only goes to position six
53

53

00:03:11.260  -->  00:03:12.770
because once we've swapped the root
54

54

00:03:12.770  -->  00:03:14.702
we wanna exclude the root from the heap now.
55

55

00:03:14.702  -->  00:03:17.608
And so when we're fixing the heap we wanna go from zero
56

56

00:03:17.608  -->  00:03:22.608
to last heap index minus i which would be seven, minus one.
57

57

00:03:23.010  -->  00:03:25.490
So we always wanna be subtracting out one,
58

58

00:03:25.490  -->  00:03:27.253
because when we get to this point
59

59

00:03:27.253  -->  00:03:30.980
we wanna be excluding the value that we just swapped,
60

60

00:03:30.980  -->  00:03:33.625
and that's it, that is Heapsort.
61

61

00:03:33.625  -->  00:03:36.040
The four loop is just the rinse and repeat part,
62

62

00:03:36.040  -->  00:03:37.764
so once we've done that we're gonna come back around.
63

63

00:03:37.764  -->  00:03:41.060
I will be one, we're still gonna be swapping the root,
64

64

00:03:41.060  -->  00:03:42.940
and at this point as we saw in the slides,
65

65

00:03:42.940  -->  00:03:45.997
the new root would be 75, and this time instead of swapping
66

66

00:03:45.997  -->  00:03:49.650
it with position seven because i has been incremented
67

67

00:03:49.650  -->  00:03:53.410
to one, we'll be subtracting out seven minus one,
68

68

00:03:53.410  -->  00:03:54.243
which is six.
69

69

00:03:54.243  -->  00:03:57.340
So we'll be swapping it with whatever's at position six.
70

70

00:03:57.340  -->  00:04:00.940
And then when we come down here, we'll have 7-i
71

71

00:04:00.940  -->  00:04:05.081
so 7-1=6-1=5 so now we will have reduced
72

72

00:04:05.081  -->  00:04:08.780
on the second iteration the size of our heap by two.
73

73

00:04:08.780  -->  00:04:10.370
And so we just keep doing that
74

74

00:04:10.370  -->  00:04:14.000
until we've looked at every single item on the heap
75

75

00:04:14.000  -->  00:04:16.580
and when we've done that the heap will be sorted.
76

76

00:04:16.580  -->  00:04:21.030
So I'll come calc the peak and the delete stuff
77

77

00:04:21.030  -->  00:04:24.059
and we'll print the heap before we sort it
78

78

00:04:24.059  -->  00:04:26.167
and then we'll sort it, so we'll say heap.sort
79

79

00:04:26.167  -->  00:04:29.700
and then we'll print the heap after the sort.
80

80

00:04:29.700  -->  00:04:31.000
So let's go ahead and run
81

81

00:04:33.860  -->  00:04:36.310
and here's our heap before the sort
82

82

00:04:36.310  -->  00:04:41.310
and after the sort we have 40, 52, 55, 60, 67, 68, 75 and 80
83

83

00:04:43.680  -->  00:04:47.440
Now I didn't print out the zeros because in our print heap
84

84

00:04:47.440  -->  00:04:49.860
we're only printing the heap.
85

85

00:04:49.860  -->  00:04:52.270
We're only going up to size, but of course,
86

86

00:04:52.270  -->  00:04:54.357
because there's only eight elements in the array
87

87

00:04:54.357  -->  00:04:56.620
there'd be two zeros following that,
88

88

00:04:56.620  -->  00:04:58.810
but you'd know that when you sorted the heap.
89

89

00:04:58.810  -->  00:05:00.740
You'd know that your heap only goes
90

90

00:05:00.740  -->  00:05:02.460
to a certain point in the array.
91

91

00:05:02.460  -->  00:05:05.578
So time complexity, the worst case for this
92

92

00:05:05.578  -->  00:05:08.060
we go back to the code
93

93

00:05:09.370  -->  00:05:10.340
for the sort
94

94

00:05:11.370  -->  00:05:14.930
the worst case for this is 0 of n log n
95

95

00:05:14.930  -->  00:05:19.140
and the reason for that is we swap in elements
96

96

00:05:19.140  -->  00:05:22.900
right because we go through the loop n times,
97

97

00:05:22.900  -->  00:05:26.270
and then on each iteration of the loop we also have to fix
98

98

00:05:26.270  -->  00:05:30.530
the heap, and as we've seen before that can take log n time.
99

99

00:05:30.530  -->  00:05:35.370
And so the worst case is going to be 0 of n times log n.
100

100

00:05:35.370  -->  00:05:38.510
And so if you have a heap and you wanna sort it,
101

101

00:05:38.510  -->  00:05:41.340
Heapsort can be decent sort out algorithm.
102

102

00:05:41.340  -->  00:05:43.430
It's also an in place algorithm,
103

103

00:05:43.430  -->  00:05:46.120
we don't use any extra memory that relies
104

104

00:05:46.120  -->  00:05:48.040
on the number of items in the heap.
105

105

00:05:48.040  -->  00:05:49.627
We're doing it in place, we're swapping
106

106

00:05:49.627  -->  00:05:51.650
in the original array.
107

107

00:05:51.650  -->  00:05:54.860
Now, keep in mind that once you've sorted the heap
108

108

00:05:54.860  -->  00:05:57.810
it's no longer a heap, and so you wouldn't wanna sort
109

109

00:05:57.810  -->  00:06:01.100
a heap that you wanna continue using as a heap.
110

110

00:06:01.100  -->  00:06:04.390
And so if you wanna continue using a heap as a heap
111

111

00:06:04.390  -->  00:06:07.040
you don't wanna sort it, because the moment you sort it
112

112

00:06:07.040  -->  00:06:09.710
just like when we were doing the delete
113

113

00:06:09.710  -->  00:06:11.800
and I said that if you have to find the value
114

114

00:06:11.800  -->  00:06:13.160
you're gonna have to do a linear search.
115

115

00:06:13.160  -->  00:06:15.168
You can't use a binary search because that would require
116

116

00:06:15.168  -->  00:06:17.709
sorting the array, and once you sort the array
117

117

00:06:17.709  -->  00:06:19.527
you no longer have a heap.
118

118

00:06:19.527  -->  00:06:21.660
The whole structure of your heap has been blown away.
119

119

00:06:21.660  -->  00:06:23.988
And so you would not wanna sort
120

120

00:06:23.988  -->  00:06:26.230
a heap that you wanna continue using.
121

121

00:06:26.230  -->  00:06:27.800
So if you want to use Heapsort,
122

122

00:06:27.800  -->  00:06:29.890
your motivation for building a heap
123

123

00:06:29.890  -->  00:06:31.943
would be cause you're gonna use Heapsort on the data,
124

124

00:06:31.943  -->  00:06:34.690
not because you're gonna use the heap as a heap.
125

125

00:06:34.690  -->  00:06:38.240
If you do it that way though, then the time complexity
126

126

00:06:38.240  -->  00:06:41.680
will obviously not be 0 of n log n
127

127

00:06:41.680  -->  00:06:43.689
because you're gonna have to build the heap first,
128

128

00:06:43.689  -->  00:06:47.140
and that will involve heapifying at each step.
129

129

00:06:47.140  -->  00:06:50.250
Even so, the worst case for doing that can be better
130

130

00:06:50.250  -->  00:06:52.704
than some of the quadratic sort algorithms.
131

131

00:06:52.704  -->  00:06:55.480
So it's something you might wanna consider,
132

132

00:06:55.480  -->  00:06:57.610
but depending on the data of course,
133

133

00:06:57.610  -->  00:07:00.242
there are all sort algorithms that we looked at.
134

134

00:07:00.242  -->  00:07:03.243
Building a heap just to sort it might not be the best way
135

135

00:07:03.243  -->  00:07:06.470
to go, and that sort of brings us full circle
136

136

00:07:06.470  -->  00:07:09.601
to the beginning of the course where we say it depends.
137

137

00:07:09.601  -->  00:07:11.848
It depends on what you're going to do.
138

138

00:07:11.848  -->  00:07:13.792
Alright, so that's it for Heapsort.
139

139

00:07:13.792  -->  00:07:15.823
I'll see you in the next video.
