WEBVTT
1
1

00:00:00.270  -->  00:00:03.020
(upbeat chiming)
2

2

00:00:05.240  -->  00:00:06.073
<v Sarah>All right,</v>
3

3

00:00:06.073  -->  00:00:09.440
so let's implement a simple stack class.
4

4

00:00:09.440  -->  00:00:11.330
I've created a project.
5

5

00:00:11.330  -->  00:00:14.470
The code in academy.learnprogramming.stacks,
6

6

00:00:14.470  -->  00:00:19.330
and I've added the usual Employee class to the project.
7

7

00:00:19.330  -->  00:00:23.570
It's a copy and paste job, so nothing new here.
8

8

00:00:23.570  -->  00:00:24.810
So we're gonna start out
9

9

00:00:24.810  -->  00:00:28.320
by implementing the stack using an array,
10

10

00:00:28.320  -->  00:00:30.240
so our stack implementation is
11

11

00:00:30.240  -->  00:00:32.310
going to be backed by an array.
12

12

00:00:32.310  -->  00:00:35.740
Arrays are great for random access, as we've learned.
13

13

00:00:35.740  -->  00:00:37.940
Do we need random access for a stack?
14

14

00:00:37.940  -->  00:00:38.773
We'll no, we don't, because
15

15

00:00:38.773  -->  00:00:40.500
we are only ever gonna be working
16

16

00:00:40.500  -->  00:00:42.610
with the top item on the stack.
17

17

00:00:42.610  -->  00:00:45.830
We are never gonna say give us the 10th item in the stack,
18

18

00:00:45.830  -->  00:00:47.430
that doesn't make sense.
19

19

00:00:47.430  -->  00:00:52.430
Stacks say that you can only ever work with the top item,
20

20

00:00:52.490  -->  00:00:55.360
because it's last in, first out.
21

21

00:00:55.360  -->  00:00:57.390
The other thing about arrays is
22

22

00:00:57.390  -->  00:00:59.190
of course they are a fixed size.
23

23

00:00:59.190  -->  00:01:02.640
They're not dynamic, and so by using an array
24

24

00:01:02.640  -->  00:01:04.430
to back a stack, we're gonna
25

25

00:01:04.430  -->  00:01:07.440
have to provide an initial size for the array
26

26

00:01:07.440  -->  00:01:10.220
and if we try to push something onto the stack
27

27

00:01:10.220  -->  00:01:11.870
when the array is full,
28

28

00:01:11.870  -->  00:01:14.590
then that's obviously not going to work.
29

29

00:01:14.590  -->  00:01:16.300
Now, for the same reasons,
30

30

00:01:16.300  -->  00:01:18.500
using a list wouldn't be that great,
31

31

00:01:18.500  -->  00:01:21.240
and when I say list I mean the ArrayList
32

32

00:01:21.240  -->  00:01:23.280
or the Vector class, because they are,
33

33

00:01:23.280  -->  00:01:24.950
as we know, backed by an array,
34

34

00:01:24.950  -->  00:01:27.250
so they'll have the same problems that arrays do.
35

35

00:01:27.250  -->  00:01:31.170
The ideal data structure to back a stack is a linked list,
36

36

00:01:31.170  -->  00:01:33.500
and we'll get back to that later.
37

37

00:01:33.500  -->  00:01:36.360
Despite the problems of using an array,
38

38

00:01:36.360  -->  00:01:39.830
they are commonly used to back stack implementations,
39

39

00:01:39.830  -->  00:01:41.130
so we're gonna start with that,
40

40

00:01:41.130  -->  00:01:42.910
so you can see how it's done.
41

41

00:01:42.910  -->  00:01:47.160
Okay, so let's get going on our implementation of a stack.
42

42

00:01:47.160  -->  00:01:51.000
So I'm gonna add a class called ArrayStack to make it clear
43

43

00:01:51.000  -->  00:01:54.680
that this implementation is backed by an array.
44

44

00:01:54.680  -->  00:01:57.853
So I'll say New Java Class, ArrayStack.
45

45

00:02:00.920  -->  00:02:03.750
We're going to need a field for the array
46

46

00:02:03.750  -->  00:02:05.890
that's going to be used to back the stack,
47

47

00:02:05.890  -->  00:02:09.430
and also we're going to need to track the index
48

48

00:02:09.430  -->  00:02:11.980
of the top position on the stack,
49

49

00:02:11.980  -->  00:02:13.170
and you'll see why we need
50

50

00:02:13.170  -->  00:02:16.170
that when we implement the push and pop methods.
51

51

00:02:16.170  -->  00:02:18.863
So we'll say private Employee,
52

52

00:02:20.880  -->  00:02:23.360
and we want an array, stack,
53

53

00:02:23.360  -->  00:02:27.750
and private int top, and so we have our backing array
54

54

00:02:27.750  -->  00:02:29.470
and we have a field that's going to track
55

55

00:02:29.470  -->  00:02:31.240
where the top of the stack is.
56

56

00:02:31.240  -->  00:02:32.800
So we need to add a constructor,
57

57

00:02:32.800  -->  00:02:35.380
because we're gonna let the caller tell us how large
58

58

00:02:35.380  -->  00:02:37.430
they want the stack to be,
59

59

00:02:37.430  -->  00:02:39.650
so in other words, the capacity of the stack,
60

60

00:02:39.650  -->  00:02:42.530
so we'll say public, ArrayStack
61

61

00:02:42.530  -->  00:02:46.053
and we'll accept an int capacity,
62

62

00:02:47.920  -->  00:02:50.160
and then inside the constructor,
63

63

00:02:50.160  -->  00:02:51.430
we'll create our array,
64

64

00:02:51.430  -->  00:02:55.260
so we'll say stack equals new Employee
65

65

00:02:55.260  -->  00:02:57.433
and it'll have a length or capacity.
66

66

00:02:58.410  -->  00:03:01.740
So remember that the capacity will be the maximum number
67

67

00:03:01.740  -->  00:03:04.030
of items that we can store on the stack,
68

68

00:03:04.030  -->  00:03:06.090
because it's the maximum number of items
69

69

00:03:06.090  -->  00:03:08.080
that we can store in the array.
70

70

00:03:08.080  -->  00:03:11.740
We are not going to explicitly initialise the top field,
71

71

00:03:11.740  -->  00:03:14.280
it's gonna be initialised to zero by default.
72

72

00:03:14.280  -->  00:03:17.420
So when top is zero, the stack is empty.
73

73

00:03:17.420  -->  00:03:20.093
Okay, so now let's implement the push method.
74

74

00:03:21.310  -->  00:03:23.490
So we'll say public void push,
75

75

00:03:23.490  -->  00:03:26.840
we don't get anything back when we push an employee,
76

76

00:03:26.840  -->  00:03:30.670
but of course we need to accept the employee instance
77

77

00:03:30.670  -->  00:03:32.780
that we are going to push onto the stack,
78

78

00:03:32.780  -->  00:03:33.690
and the first thing we need
79

79

00:03:33.690  -->  00:03:35.860
to check is whether the stack is full,
80

80

00:03:35.860  -->  00:03:40.723
so we'll say if, top equals stack.length
81

81

00:03:43.280  -->  00:03:45.060
then the stack is full.
82

82

00:03:45.060  -->  00:03:48.810
The top will always be the index
83

83

00:03:48.810  -->  00:03:50.740
where we would push the next element,
84

84

00:03:50.740  -->  00:03:52.310
and so as I just mentioned,
85

85

00:03:52.310  -->  00:03:54.200
top will be initialised to zero
86

86

00:03:54.200  -->  00:03:55.430
and so the first element
87

87

00:03:55.430  -->  00:03:58.490
that we push will be pushed into position zero,
88

88

00:03:58.490  -->  00:03:59.930
and then top would be incremented
89

89

00:03:59.930  -->  00:04:01.500
to one, and so the next element
90

90

00:04:01.500  -->  00:04:03.170
would be pushed into position one.
91

91

00:04:03.170  -->  00:04:06.210
So if the top equal stack.length,
92

92

00:04:06.210  -->  00:04:08.770
that means that the next available position is equal
93

93

00:04:08.770  -->  00:04:09.780
to the length of the array
94

94

00:04:09.780  -->  00:04:12.080
and that's actually out of bounds,
95

95

00:04:12.080  -->  00:04:14.200
and so if top equals stack.length,
96

96

00:04:14.200  -->  00:04:15.980
we know the array is full,
97

97

00:04:15.980  -->  00:04:18.510
so what we are gonna do is resize the array.
98

98

00:04:18.510  -->  00:04:23.510
So I'll put here, need to resize the backing array,
99

99

00:04:23.980  -->  00:04:28.980
so we're gonna say Employee new array equals new employee
100

100

00:04:31.040  -->  00:04:35.290
and we don't just want to increase it by one,
101

101

00:04:35.290  -->  00:04:38.370
the length, because that means if we push another element,
102

102

00:04:38.370  -->  00:04:40.700
we're gonna be back into resizing the array again,
103

103

00:04:40.700  -->  00:04:43.510
so one common way to resize the array
104

104

00:04:43.510  -->  00:04:46.220
is the double the length, and that's what we're gonna do.
105

105

00:04:46.220  -->  00:04:51.220
So we're gonna say two times stack.length,
106

106

00:04:52.280  -->  00:04:55.340
and now we're gonna have to copy all of the elements
107

107

00:04:55.340  -->  00:04:59.280
that currently exist in the stack into this new array.
108

108

00:04:59.280  -->  00:05:00.800
So we'll say System.arraycopy
109

109

00:05:01.950  -->  00:05:03.520
and we wanna copy from the stack,
110

110

00:05:03.520  -->  00:05:05.990
we wanna start from the first element,
111

111

00:05:05.990  -->  00:05:08.830
we wanna copy into the new array,
112

112

00:05:08.830  -->  00:05:12.270
and we want to copy starting at the first element
113

113

00:05:12.270  -->  00:05:16.000
and we want to copy stack.length elements.
114

114

00:05:16.000  -->  00:05:17.040
And then finally, we are
115

115

00:05:17.040  -->  00:05:21.970
going to assign a new array to the stack field,
116

116

00:05:21.970  -->  00:05:25.920
and so our backing array has been resized.
117

117

00:05:25.920  -->  00:05:27.350
So now that we've done that,
118

118

00:05:27.350  -->  00:05:32.350
we can say stack top plus plus, equals the employee.
119

119

00:05:34.000  -->  00:05:35.700
And that's the push method.
120

120

00:05:35.700  -->  00:05:38.840
So we come in, we check to see whether the stack is full,
121

121

00:05:38.840  -->  00:05:42.170
if it is, we resize it by doubling the number of elements
122

122

00:05:42.170  -->  00:05:44.900
it can hold, so we double the capacity essentially,
123

123

00:05:44.900  -->  00:05:46.750
and then once we are positive
124

124

00:05:46.750  -->  00:05:49.960
that stack top is not going to give us an array out
125

125

00:05:49.960  -->  00:05:53.650
of bounds exception, we assign the employee into top
126

126

00:05:53.650  -->  00:05:56.060
and then of course we increment top.
127

127

00:05:56.060  -->  00:05:57.280
Now, because of that,
128

128

00:05:57.280  -->  00:05:59.740
because we may have to resize the array,
129

129

00:05:59.740  -->  00:06:04.510
this operation push, the time complexity is o of n.
130

130

00:06:04.510  -->  00:06:07.200
This statement here is o of one,
131

131

00:06:07.200  -->  00:06:09.700
I mean, this, to do this operation,
132

132

00:06:09.700  -->  00:06:11.410
the number of steps doesn't depend
133

133

00:06:11.410  -->  00:06:13.160
on how many items are on the stack,
134

134

00:06:13.160  -->  00:06:14.830
but because in the worst case,
135

135

00:06:14.830  -->  00:06:16.980
we have to resize the stack,
136

136

00:06:16.980  -->  00:06:19.940
and because doing so means we have to copy
137

137

00:06:19.940  -->  00:06:21.800
all of the existing elements,
138

138

00:06:21.800  -->  00:06:25.270
the worst case for push is o of n,
139

139

00:06:25.270  -->  00:06:28.840
so the worst case for pushing onto a stack is linear time.
140

140

00:06:28.840  -->  00:06:31.500
All right, so let's go ahead and implement pop.
141

141

00:06:31.500  -->  00:06:34.200
So we'll say public Employee,
142

142

00:06:34.200  -->  00:06:37.278
because remember, when we pop something off the stack,
143

143

00:06:37.278  -->  00:06:38.800
we are gonna take the top item,
144

144

00:06:38.800  -->  00:06:43.800
pop, and we want to check whether the stack is empty now,
145

145

00:06:44.310  -->  00:06:45.830
because if the stack is empty,
146

146

00:06:45.830  -->  00:06:49.590
there's nothing to pop, so let's add an isEmpty method.
147

147

00:06:49.590  -->  00:06:51.430
I'll do that after the pop method,
148

148

00:06:51.430  -->  00:06:54.700
so I'll say public boolean isEmpty,
149

149

00:06:58.100  -->  00:07:01.060
and the stack is empty if top is equal to zero,
150

150

00:07:01.060  -->  00:07:03.440
because remember, top always holds
151

151

00:07:03.440  -->  00:07:07.260
the next available position in the stack,
152

152

00:07:07.260  -->  00:07:10.630
and so we are gonna return top equals zero,
153

153

00:07:10.630  -->  00:07:13.680
and so when top equals zero, our stack is empty.
154

154

00:07:13.680  -->  00:07:16.770
So if we want to take something off the stack,
155

155

00:07:16.770  -->  00:07:19.040
we'll first check to see if the stack is empty,
156

156

00:07:19.040  -->  00:07:20.850
so we'll say if isEmpty.
157

157

00:07:22.710  -->  00:07:25.310
Now, if it is, we could return null,
158

158

00:07:25.310  -->  00:07:28.000
but instead we're actually gonna throw an exception.
159

159

00:07:28.000  -->  00:07:31.710
We are gonna say throw new and as you can see,
160

160

00:07:31.710  -->  00:07:35.010
there's an EmptyStackException in the Java.Util class,
161

161

00:07:35.010  -->  00:07:36.653
so we're just gonna use that,
162

162

00:07:37.710  -->  00:07:39.400
and so that would tell the caller
163

163

00:07:39.400  -->  00:07:40.970
and the caller would have to handle this
164

164

00:07:40.970  -->  00:07:44.160
if you're trying to pop something off an empty stack.
165

165

00:07:44.160  -->  00:07:45.720
If the stack isn't empty,
166

166

00:07:45.720  -->  00:07:47.393
we are gonna say Employee,
167

167

00:07:48.820  -->  00:07:51.947
employee equals stack and what
168

168

00:07:51.947  -->  00:07:54.110
we are gonna do is we are gonna use
169

169

00:07:54.110  -->  00:07:57.590
the prefix operator to decrement top.
170

170

00:07:57.590  -->  00:08:01.530
And so remember, top always contains the index
171

171

00:08:01.530  -->  00:08:04.870
of the next available position in the array,
172

172

00:08:04.870  -->  00:08:07.800
and so there is nothing at top,
173

173

00:08:07.800  -->  00:08:09.140
there is nothing stored at top.
174

174

00:08:09.140  -->  00:08:11.780
The top item on the stack is actually stored
175

175

00:08:11.780  -->  00:08:14.870
at top minus one, and so what we want to do
176

176

00:08:14.870  -->  00:08:16.820
is decrement top,
177

177

00:08:16.820  -->  00:08:20.650
and use the result as the index into stack.
178

178

00:08:20.650  -->  00:08:22.860
And so let's say top is five.
179

179

00:08:22.860  -->  00:08:24.980
That means that the employee
180

180

00:08:24.980  -->  00:08:27.180
at the top of the stack is at position four,
181

181

00:08:27.180  -->  00:08:28.360
so we want to come in here
182

182

00:08:28.360  -->  00:08:30.590
and we are gonna change top to four,
183

183

00:08:30.590  -->  00:08:33.987
and then we're going to take the employee at position four,
184

184

00:08:33.987  -->  00:08:36.760
that's the employee at the top of the stack,
185

185

00:08:36.760  -->  00:08:38.410
and assign it into employee,
186

186

00:08:38.410  -->  00:08:40.910
and top is now four, and that's what we want,
187

187

00:08:40.910  -->  00:08:45.100
because we've popped the employee at position four,
188

188

00:08:45.100  -->  00:08:46.700
position four is now the next
189

189

00:08:46.700  -->  00:08:49.220
available position on the stack.
190

190

00:08:49.220  -->  00:08:51.710
So what we're going to do is we're going to set
191

191

00:08:51.710  -->  00:08:56.710
that position to null, because we have popped the employee
192

192

00:08:58.170  -->  00:09:03.170
at position top and so we now want to null that out,
193

193

00:09:03.410  -->  00:09:05.653
and finally, we return the employee.
194

194

00:09:07.260  -->  00:09:09.100
And that's our pop method.
195

195

00:09:09.100  -->  00:09:13.200
Now, we could worry about resizing the array in this method,
196

196

00:09:13.200  -->  00:09:16.040
like let's say we started with a capacity of 10
197

197

00:09:16.040  -->  00:09:17.560
and then we resized the array
198

198

00:09:17.560  -->  00:09:21.870
to 20, let's say a push made us resize the array to 20,
199

199

00:09:21.870  -->  00:09:26.150
and then let's say eventually we resized the array to 40,
200

200

00:09:26.150  -->  00:09:29.070
and then we popped 30 items off the stack.
201

201

00:09:29.070  -->  00:09:33.050
Well, now our size 40 array only has 10 items in it,
202

202

00:09:33.050  -->  00:09:34.930
so there's a lot of wasted space.
203

203

00:09:34.930  -->  00:09:36.960
So if we wanted to be really diligent,
204

204

00:09:36.960  -->  00:09:38.490
we could do a check here
205

205

00:09:38.490  -->  00:09:40.610
and if we see there's lots of empty space,
206

206

00:09:40.610  -->  00:09:41.900
and the way we'd do the check
207

207

00:09:41.900  -->  00:09:46.050
is to compare the top value against the length of the array,
208

208

00:09:46.050  -->  00:09:48.310
and if we see that there is a tonne of empty space,
209

209

00:09:48.310  -->  00:09:50.730
we could consider resizing the array.
210

210

00:09:50.730  -->  00:09:52.160
But we don't have to.
211

211

00:09:52.160  -->  00:09:54.980
So if we don't worry about resizing the array,
212

212

00:09:54.980  -->  00:09:59.980
the pop operation will always be done in constant time,
213

213

00:10:00.120  -->  00:10:03.920
because it doesn't depend on the number of items.
214

214

00:10:03.920  -->  00:10:04.940
There's nothing in here
215

215

00:10:04.940  -->  00:10:07.440
that depends on the number of items on the stack,
216

216

00:10:07.440  -->  00:10:09.310
but if we do want to be diligent
217

217

00:10:09.310  -->  00:10:12.360
and we do want to worry about resizing the array
218

218

00:10:12.360  -->  00:10:14.160
if there's a lot of empty space,
219

219

00:10:14.160  -->  00:10:17.330
then the pop operation will become a linear operation.
220

220

00:10:17.330  -->  00:10:19.750
It'll have a time complexity of o of n.
221

221

00:10:19.750  -->  00:10:21.930
Now, resizing the array
222

222

00:10:21.930  -->  00:10:24.810
in the pop method does come with a risk
223

223

00:10:24.810  -->  00:10:27.520
because if we then push more items,
224

224

00:10:27.520  -->  00:10:30.650
we could end up having to resize the array again
225

225

00:10:30.650  -->  00:10:33.030
by making it larger, and because of that,
226

226

00:10:33.030  -->  00:10:35.330
you'll see implementations of stack
227

227

00:10:35.330  -->  00:10:38.350
that worry about resizing the array in the pop method
228

228

00:10:38.350  -->  00:10:40.570
and you'll see implementations that don't.
229

229

00:10:40.570  -->  00:10:44.640
Now, if you expect to push a tonne of items onto the stack
230

230

00:10:44.640  -->  00:10:48.410
and then you're gonna be popping items off over time,
231

231

00:10:48.410  -->  00:10:50.040
and never pushing items again,
232

232

00:10:50.040  -->  00:10:52.570
then resizing in the pop method could make sense
233

233

00:10:52.570  -->  00:10:54.030
if memory is an issue.
234

234

00:10:54.030  -->  00:10:55.990
But if you're gonna be pushing items
235

235

00:10:55.990  -->  00:10:57.840
and then popping some and then pushing more,
236

236

00:10:57.840  -->  00:10:59.250
popping some, et cetera,
237

237

00:10:59.250  -->  00:11:01.640
if you're gonna resize the array on a pop,
238

238

00:11:01.640  -->  00:11:05.180
you could run into the risk of resizing the array down
239

239

00:11:05.180  -->  00:11:07.430
and then having to resize it up again.
240

240

00:11:07.430  -->  00:11:08.890
So if memory isn't an issue,
241

241

00:11:08.890  -->  00:11:11.360
it's probably best to just leave the array
242

242

00:11:11.360  -->  00:11:14.030
at the size it is when you're popping items off.
243

243

00:11:14.030  -->  00:11:16.310
Okay, so that's push and pop.
244

244

00:11:16.310  -->  00:11:18.310
There is one more operation,
245

245

00:11:18.310  -->  00:11:21.580
stack operation we need to worry about and that's peek,
246

246

00:11:21.580  -->  00:11:24.320
and you will recall that when we peek at a stack,
247

247

00:11:24.320  -->  00:11:28.180
we access the top item but we do not pop it,
248

248

00:11:28.180  -->  00:11:30.780
and so we get the top item on the stack but
249

249

00:11:30.780  -->  00:11:33.600
that item remains on the stack.
250

250

00:11:33.600  -->  00:11:36.163
So we'll say public Employee,
251

251

00:11:38.090  -->  00:11:40.373
peek, we don't have to pass anything,
252

252

00:11:41.510  -->  00:11:44.300
and we're gonna do the same thing with the exception.
253

253

00:11:44.300  -->  00:11:46.670
If the stack is empty, if you're trying to peek
254

254

00:11:46.670  -->  00:11:49.250
at a stack that doesn't have anything yet,
255

255

00:11:49.250  -->  00:11:50.830
we're gonna throw an exception.
256

256

00:11:50.830  -->  00:11:52.000
If that's not the case,
257

257

00:11:52.000  -->  00:11:56.863
we're just going to return stack top minus one.
258

258

00:11:57.710  -->  00:12:00.150
We don't want to decrement top here.
259

259

00:12:00.150  -->  00:12:02.020
We don't want to use this operator
260

260

00:12:02.020  -->  00:12:04.750
because this actually changes the value of top,
261

261

00:12:04.750  -->  00:12:07.890
and remember, we are not changing the stack in any way,
262

262

00:12:07.890  -->  00:12:10.410
and so we want the value of the top to remain the same,
263

263

00:12:10.410  -->  00:12:12.030
so we're just gonna subtract one,
264

264

00:12:12.030  -->  00:12:14.040
and then return what's there because remember,
265

265

00:12:14.040  -->  00:12:17.780
top always points to the next available position
266

266

00:12:17.780  -->  00:12:21.040
in the stack, and so the top item is actually located
267

267

00:12:21.040  -->  00:12:23.240
at the index top minus one.
268

268

00:12:23.240  -->  00:12:25.090
Now, if we want a size method,
269

269

00:12:25.090  -->  00:12:27.560
a method that tells us how many items are on the stack,
270

270

00:12:27.560  -->  00:12:28.630
well, that's easy enough.
271

271

00:12:28.630  -->  00:12:30.520
That's just gonna be the value of top,
272

272

00:12:30.520  -->  00:12:33.390
because when there's one item on the stack,
273

273

00:12:33.390  -->  00:12:34.630
top equals one, right?
274

274

00:12:34.630  -->  00:12:37.800
Because that one item will be located at position zero,
275

275

00:12:37.800  -->  00:12:40.180
and so top will be one because it's pointing
276

276

00:12:40.180  -->  00:12:41.800
at the next available position.
277

277

00:12:41.800  -->  00:12:43.420
If there are five items on the stack,
278

278

00:12:43.420  -->  00:12:46.610
top will be five because the top item
279

279

00:12:46.610  -->  00:12:49.240
on the stack will be located at position four,
280

280

00:12:49.240  -->  00:12:50.930
and top will be five because
281

281

00:12:50.930  -->  00:12:52.670
that's the next available position,
282

282

00:12:52.670  -->  00:12:57.100
and so the size method is fairly simple.
283

283

00:12:57.100  -->  00:13:01.573
Public int size and we just return top.
284

284

00:13:02.540  -->  00:13:05.280
And finally, I'm gonna add a method for printing the stack,
285

285

00:13:05.280  -->  00:13:07.390
so that when we go back to our main method
286

286

00:13:07.390  -->  00:13:09.270
and we start pushing and popping items,
287

287

00:13:09.270  -->  00:13:10.750
we can print the stack out.
288

288

00:13:10.750  -->  00:13:14.240
So I'll say public void printStack.
289

289

00:13:14.240  -->  00:13:16.090
Now, our stack is an array,
290

290

00:13:16.090  -->  00:13:18.350
so this should be fairly straightforward.
291

291

00:13:18.350  -->  00:13:23.350
I'll say for int i equals top minus one.
292

292

00:13:23.360  -->  00:13:25.820
Remember that the top item is located
293

293

00:13:25.820  -->  00:13:27.940
at position top minus one.
294

294

00:13:27.940  -->  00:13:30.340
I is greater than or equal to zero,
295

295

00:13:30.340  -->  00:13:35.340
i minus minus, we'll say System.out.println stack i.
296

296

00:13:37.890  -->  00:13:41.290
So we are printing our stack from top to bottom.
297

297

00:13:41.290  -->  00:13:42.123
And that's it.
298

298

00:13:42.123  -->  00:13:45.130
That's it for our simple stack implementation,
299

299

00:13:45.130  -->  00:13:47.520
so let's pop over to our main method now
300

300

00:13:47.520  -->  00:13:49.650
and let's play with our stack.
301

301

00:13:49.650  -->  00:13:51.930
So I'll say ArrayStack,
302

302

00:13:51.930  -->  00:13:55.020
stack equals new ArrayStack,
303

303

00:13:55.020  -->  00:13:57.920
and I'm just gonna start out with a capacity of 10.
304

304

00:13:57.920  -->  00:13:59.760
We're only gonna push four employees,
305

305

00:13:59.760  -->  00:14:04.293
so five actually, and then I'll say stack.push,
306

306

00:14:06.360  -->  00:14:10.930
and we'll push Jane, Jones,
307

307

00:14:10.930  -->  00:14:14.390
one two three, you've seen these before,
308

308

00:14:14.390  -->  00:14:19.390
stack.push, new Employee John Doe, and four five six seven.
309

309

00:14:28.910  -->  00:14:33.910
Stack.push new Employee Mary, Smith, 22.
310

310

00:14:37.210  -->  00:14:42.210
Stack.push new Employee Mike Wilson,
311

311

00:14:44.680  -->  00:14:47.300
and three two four five,
312

312

00:14:47.300  -->  00:14:51.040
and finally let's push Bill right away, Bill End.
313

313

00:14:51.040  -->  00:14:56.040
New Employee Bill and End, 78 for an ID.
314

314

00:15:00.190  -->  00:15:01.920
And now let's print our stack.
315

315

00:15:01.920  -->  00:15:02.973
So let's run.
316

316

00:15:10.050  -->  00:15:11.760
And here's our stack and remember,
317

317

00:15:11.760  -->  00:15:13.660
we are printing from the top down,
318

318

00:15:13.660  -->  00:15:16.040
so we're gonna see these in reverse order,
319

319

00:15:16.040  -->  00:15:19.423
so we have Bill, Mike, Mary, Jane, and John.
320

320

00:15:20.460  -->  00:15:24.010
So let's peek at the top item on the stack,
321

321

00:15:24.010  -->  00:15:29.010
so I'll say System.out.println stack.peek.
322

322

00:15:30.870  -->  00:15:32.240
And this should give us Bill,
323

323

00:15:32.240  -->  00:15:34.390
because Bill's sitting at the top of the stack.
324

324

00:15:34.390  -->  00:15:35.810
So I'm gonna comment that out,
325

325

00:15:35.810  -->  00:15:38.360
so we won't see them all printed out and let's run.
326

326

00:15:40.850  -->  00:15:42.030
And we see Bill.
327

327

00:15:42.030  -->  00:15:44.140
Now, Bill is still at the top of the stack.
328

328

00:15:44.140  -->  00:15:45.940
Peek does not remove any items,
329

329

00:15:45.940  -->  00:15:48.180
so Bill is still sitting at the top of the stack
330

330

00:15:48.180  -->  00:15:50.980
and I guess we could see that if I copy this line
331

331

00:15:50.980  -->  00:15:52.430
and we print the stack again.
332

332

00:15:54.870  -->  00:15:56.023
So let's run again.
333

333

00:15:58.490  -->  00:16:00.430
And we'll see we're seeing Bill twice now.
334

334

00:16:00.430  -->  00:16:02.980
This printout is coming from the peek
335

335

00:16:02.980  -->  00:16:07.320
and then this section here is printing the stack,
336

336

00:16:07.320  -->  00:16:08.690
so we've peeked at Bill,
337

337

00:16:08.690  -->  00:16:10.290
Bill is still on the stack,
338

338

00:16:10.290  -->  00:16:12.980
and then finally let's pop some items.
339

339

00:16:12.980  -->  00:16:16.660
I'm gonna comment out that printStack
340

340

00:16:16.660  -->  00:16:21.660
and let's System.out.println a popped plus stack.pop.
341

341

00:16:27.220  -->  00:16:29.160
And then we'll call peek again.
342

342

00:16:29.160  -->  00:16:33.720
So we should see Bill printed out for being popped
343

343

00:16:33.720  -->  00:16:34.700
and then at that point,
344

344

00:16:34.700  -->  00:16:36.560
Mike should be at the top of the stack.
345

345

00:16:36.560  -->  00:16:38.290
So when we peek, we should get Mike.
346

346

00:16:38.290  -->  00:16:39.313
So let's run.
347

347

00:16:41.610  -->  00:16:44.440
Okay, so this Bill is from here,
348

348

00:16:44.440  -->  00:16:48.970
when we peek at Bill, and then we popped employee Bill End,
349

349

00:16:48.970  -->  00:16:51.280
and then when we peek, Mike is
350

350

00:16:51.280  -->  00:16:53.500
at the top of the stack because Bill is gone.
351

351

00:16:53.500  -->  00:16:55.840
Now, if you go back to our ArrayStack class.
352

352

00:16:55.840  -->  00:16:57.120
So I'll just close this down.
353

353

00:16:57.120  -->  00:16:58.640
So I said that for push,
354

354

00:16:58.640  -->  00:17:01.410
worse case is o of n, because we may
355

355

00:17:01.410  -->  00:17:03.900
have to resize the array.
356

356

00:17:03.900  -->  00:17:06.320
For pop, it's o of one
357

357

00:17:06.320  -->  00:17:08.860
if you're not worrying about resizing the array
358

358

00:17:08.860  -->  00:17:11.400
and it's o of n if you are.
359

359

00:17:11.400  -->  00:17:14.260
And for peek, it's always o of one,
360

360

00:17:14.260  -->  00:17:16.800
because peek, you never do any resizing,
361

361

00:17:16.800  -->  00:17:19.310
so a peek operation with a stack
362

362

00:17:19.310  -->  00:17:22.930
that's backed by an array is always constant time.
363

363

00:17:22.930  -->  00:17:24.930
If you know the maximum number
364

364

00:17:24.930  -->  00:17:27.540
of data items you're gonna have upfront,
365

365

00:17:27.540  -->  00:17:31.140
then you'll be able to set the appropriate capacity
366

366

00:17:31.140  -->  00:17:32.950
for the array and you won't
367

367

00:17:32.950  -->  00:17:36.000
have to worry about the array being resized,
368

368

00:17:36.000  -->  00:17:38.940
so that would mean all of your stack operations can be done
369

369

00:17:38.940  -->  00:17:41.330
in constant time, which should be fantastic.
370

370

00:17:41.330  -->  00:17:43.710
Now, of course if you don't know how large your data set
371

371

00:17:43.710  -->  00:17:46.070
is gonna be, then an array may not be
372

372

00:17:46.070  -->  00:17:47.750
the best implementation in that case,
373

373

00:17:47.750  -->  00:17:51.000
you might want to have a stack backed by a linked list.
374

374

00:17:51.000  -->  00:17:53.510
So in summary, if you don't expect the array to
375

375

00:17:53.510  -->  00:17:55.190
have to be resized frequently,
376

376

00:17:55.190  -->  00:17:58.410
then using an array to implement a stack is a good choice,
377

377

00:17:58.410  -->  00:17:59.970
but if you don't know how many items
378

378

00:17:59.970  -->  00:18:02.250
will ultimately be pushed onto the stack
379

379

00:18:02.250  -->  00:18:03.920
and so it's possible the array may
380

380

00:18:03.920  -->  00:18:05.840
have to be resized frequently,
381

381

00:18:05.840  -->  00:18:06.710
or if you're gonna have
382

382

00:18:06.710  -->  00:18:09.070
to worry about resizing the array on a pop,
383

383

00:18:09.070  -->  00:18:11.420
let's say memory is really tight for some reason,
384

384

00:18:11.420  -->  00:18:12.720
so you don't want a lot
385

385

00:18:12.720  -->  00:18:15.330
of wasted space in the backing array,
386

386

00:18:15.330  -->  00:18:17.860
then an array might not be a good choice.
387

387

00:18:17.860  -->  00:18:20.850
All right, so that's a simple stack implementation using
388

388

00:18:20.850  -->  00:18:22.297
an array to back the stack.
389

389

00:18:22.297  -->  00:18:25.480
We are going to move on and in the next video,
390

390

00:18:25.480  -->  00:18:28.550
we're going to look at the class available
391

391

00:18:28.550  -->  00:18:30.920
in the JDK for stacks.
392

392

00:18:30.920  -->  00:18:32.013
I'll see you there.
