WEBVTT
1
00:00:02.360 --> 00:00:06.200
Now I'll comment this out and let's move on to the next part about arrays,

2
00:00:06.200 --> 00:00:09.530
let's have a look at how we can add data to arrays.

3
00:00:09.590 --> 00:00:16.510
Let's say we have hobbies here, sports and cooking and now we want to add new data to thar array,

4
00:00:16.520 --> 00:00:19.610
there are a couple of different ways of doing that actually.

5
00:00:19.730 --> 00:00:21.790
You already learned about one way of doing it,

6
00:00:21.800 --> 00:00:27.130
you can call hobbies.push and for example add reading here.

7
00:00:27.170 --> 00:00:35.080
We then console log hobbies here and I reload,

8
00:00:35.220 --> 00:00:41.180
you see this has been added and push, and that's important, always adds new elements

9
00:00:41.220 --> 00:00:43.590
at the end of the array.

10
00:00:43.860 --> 00:00:47.210
Now what if you would want to add an element at the beginning of an array?

11
00:00:47.220 --> 00:00:50.750
Well that's also possible. Besides push,

12
00:00:50.760 --> 00:00:53.220
there also is unshift.

13
00:00:53.220 --> 00:00:59.480
Now might be a bit of a strange name because un sounds like it undo's something but actually this adds

14
00:00:59.480 --> 00:01:00.530
an item to the array

15
00:01:00.590 --> 00:01:03.370
and I'll come back to why it's named like this in a second,

16
00:01:03.420 --> 00:01:09.520
so here we could then also add coding. If I now save that and we reload,

17
00:01:09.780 --> 00:01:15.370
we see coding as the first element here added in front of the other elements.

18
00:01:15.380 --> 00:01:21.340
Now we also sometimes want to remove elements and there we got simple methods for removing the last

19
00:01:21.350 --> 00:01:22.670
or the first element,

20
00:01:22.730 --> 00:01:29.470
for example let's say here I then want to remove the last element,

21
00:01:29.480 --> 00:01:31.720
well we can do this with pop.

22
00:01:31.730 --> 00:01:35.570
If we do that, if we just call hobbies.pop and I reload

23
00:01:35.570 --> 00:01:41.480
now, we see we get an array with three elements where the last element is cooking, which is our element

24
00:01:41.480 --> 00:01:45.940
here because the element I pushed at the end, reading, is popped here.

25
00:01:45.950 --> 00:01:49.940
Now also nice to know, pop does indeed return the element in removed.

26
00:01:49.940 --> 00:01:54.890
So here since I run it on an array of strings, it will return a string, I'm not doing anything with the

27
00:01:54.890 --> 00:01:55.830
return value here,

28
00:01:55.850 --> 00:01:57.480
I just let it go into the void

29
00:01:57.530 --> 00:02:07.060
but you could store the pop value here and then do anything with it if you need to. By the way unshift

30
00:02:07.090 --> 00:02:14.650
and push also return something, they return a number which is the new length of the array and therefore

31
00:02:14.650 --> 00:02:19.720
if you needed that, you could of course also store that to get the new length of the array after pushing

32
00:02:19.720 --> 00:02:27.200
this or after adding this at the beginning with unshift. So as I said, with pop, we remove all item at

33
00:02:27.200 --> 00:02:29.340
the end of the array,

34
00:02:29.420 --> 00:02:36.610
we also can of course remove the item at the beginning of the array with hobbies.shift.

35
00:02:36.890 --> 00:02:39.840
So we have unshift to add an item and shift to add it,

36
00:02:39.890 --> 00:02:41.440
now why shift and unshift

37
00:02:41.480 --> 00:02:45.110
in this way, why doesn't shift add an item and unshift remove it

38
00:02:45.110 --> 00:02:53.030
because unshift sounds way more like removing something than shift. Well actually, the naming makes sense,

39
00:02:53.120 --> 00:02:59.360
what shift does is it shifts all elements in the array one place to the left

40
00:02:59.360 --> 00:03:05.210
so to say, that's why the first element gets dropped when we call shift. Now unshift on the other hand

41
00:03:05.600 --> 00:03:08.600
shifts all elements to the right in the end,

42
00:03:08.600 --> 00:03:11.110
so it does the opposite of shift which shifts to the left,

43
00:03:11.110 --> 00:03:12.510
this shifts to the right.

44
00:03:12.560 --> 00:03:19.230
So when we call unshift, sports is moved to place two or into the spot of element two, cooking therefore

45
00:03:19.230 --> 00:03:21.730
is moved in the spot of element three,

46
00:03:21.800 --> 00:03:27.950
that was reading, reading is therefore moved to a new index at the end and becomes the fourth element

47
00:03:28.220 --> 00:03:34.940
and then coding is inserted in the now empty spot at the beginning and shift does the opposite, it shifts

48
00:03:34.940 --> 00:03:37.280
the first element to the left and therefore deletes it,

49
00:03:37.280 --> 00:03:44.430
that's why coding gets deleted and then it will move the previously second element in the first spot,

50
00:03:44.450 --> 00:03:50.580
the third element in the second spot and so on, so unshift and shift move elements to the left and right.

51
00:03:50.600 --> 00:03:56.600
So if we save that and we reload, we again have sports and cooking because all items which I push or

52
00:03:56.600 --> 00:04:02.070
unshift eventually get popped or shifted. Now also one short word about performance.

53
00:04:02.090 --> 00:04:04.450
If you need to unshift or shift, you need to do it,

54
00:04:04.460 --> 00:04:09.260
there's no way around it I guess but you should be aware that because of the fact that unshift and

55
00:04:09.260 --> 00:04:14.090
shift affect all elements in the array, they shift all elements,

56
00:04:14.150 --> 00:04:19.640
this operation is of course slower, so unshift and shift, these operations are slower than push and pop

57
00:04:20.540 --> 00:04:25.910
because push and pop only added the last element of an array, that don't touch any other elements of

58
00:04:25.910 --> 00:04:26.550
the array,

59
00:04:26.660 --> 00:04:32.210
they just add an element at the array or remove it. So push and pop are way faster than unshift and

60
00:04:32.210 --> 00:04:32.870
shift,

61
00:04:33.020 --> 00:04:36.860
still of course if you need to add something at the beginning of the array, well you've got to do it,

62
00:04:36.920 --> 00:04:37.960
right?

63
00:04:38.030 --> 00:04:44.800
So push, pop, unshift and shift help us add or remove items at the beginning or the end of an array.

64
00:04:44.810 --> 00:04:51.200
Now what if you need to add items or manipulate items in different places of an array?

65
00:04:51.760 --> 00:04:55.150
Well for that, you can use the direct index access.

66
00:04:55.160 --> 00:05:03.120
So here we could select the element with index one, so the second element in our hobbies array and of course,

67
00:05:03.180 --> 00:05:09.330
set it to a new item. It doesn't have to be the same type as the previous item by the way,

68
00:05:09.330 --> 00:05:13.640
I could set a number here even though currently that second element is a string.

69
00:05:13.770 --> 00:05:22.260
If I now console log hobbies and we save that and we then reload, we'll see that now we have coding

70
00:05:22.260 --> 00:05:28.800
as a second element because I replace that. So with that, we replace this element at this index.

71
00:05:29.010 --> 00:05:35.040
If we would want to insert an element between sports and cooking, there is a different method,

72
00:05:35.070 --> 00:05:40.090
the splice method which I'll have a look at in just a second. Before we have a look at that,

73
00:05:40.200 --> 00:05:41.510
let's have a look at another case,

74
00:05:41.520 --> 00:05:45.480
what if we actually target an index which isn't set, like 5?

75
00:05:45.480 --> 00:05:47.400
This array only has two elements

76
00:05:47.400 --> 00:05:48.950
after all these operations,

77
00:05:49.020 --> 00:05:54.130
so 5 actually targets the 6th element which it doesn't have.

78
00:05:54.150 --> 00:05:58.560
Well let's see what happens if we add reading here, like this.

79
00:05:59.630 --> 00:06:06.490
If we do that and we log that to the console, what we'll see is that here we got sports and coding and

80
00:06:06.490 --> 00:06:11.190
then at index five, reading and we get three empty slots in between. Now by the way,

81
00:06:11.200 --> 00:06:16.010
these really are three empty slots in there. If you would access one of them,

82
00:06:16.030 --> 00:06:23.800
let's say you do log hobbies four here which is one of these empty spots and you reload, you see you get

83
00:06:23.800 --> 00:06:28.990
undefined here, you get undefined here because nothing could be found in there in the end

84
00:06:28.990 --> 00:06:31.000
so that's also nice to know.

85
00:06:31.000 --> 00:06:37.390
Now this way of adding elements is very rare though, adding something at an arbitrary index number

86
00:06:37.420 --> 00:06:42.790
where you then deliberately or not deliberately have empty spots in the array,

87
00:06:42.790 --> 00:06:47.760
that's not something you want to do in 99.99% of cases I guess

88
00:06:47.830 --> 00:06:50.400
so this is rarely used.

89
00:06:50.410 --> 00:06:55.990
Still, it's nice to know that you can directly target indexes which don't even exist and assign values

90
00:06:55.990 --> 00:06:56.710
to those.
