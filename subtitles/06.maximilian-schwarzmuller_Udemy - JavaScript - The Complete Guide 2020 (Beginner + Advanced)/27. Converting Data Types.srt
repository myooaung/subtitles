1
00:00:02,670 --> 00:00:07,060
The problem is the type of the value we're using here.

2
00:00:07,070 --> 00:00:09,540
Current result in the end is a number right,

3
00:00:09,540 --> 00:00:11,850
we start with zero here.

4
00:00:11,850 --> 00:00:16,470
Now what we add to current result here however and that's something you've just got to know which is why

5
00:00:16,470 --> 00:00:20,900
I tell you, is a string because I'm getting this from this user input

6
00:00:20,940 --> 00:00:27,220
and even though I entered a number here and even though this user input actually even is of type number

7
00:00:27,240 --> 00:00:35,490
here in the HTML code, whatever you get from a user, from a HTML input in your Javascript code will

8
00:00:35,610 --> 00:00:40,960
always be a string, just something you can memorize. An input element,

9
00:00:41,010 --> 00:00:43,950
if you read its value, will give you a string,

10
00:00:43,950 --> 00:00:46,380
that's how Javascript in the browser works.

11
00:00:46,500 --> 00:00:53,210
It doesn't try to be smart and check whether that should be a number or not, it doesn't make any assumptions,

12
00:00:53,250 --> 00:01:00,580
It just gives you a string, text and therefore what happens here is that we have a number and we have

13
00:01:00,580 --> 00:01:04,180
some text and now Javascript is in

14
00:01:04,590 --> 00:01:11,230
it has a problem because we're trying to combine a string and a number and how would it do that?

15
00:01:11,230 --> 00:01:16,240
Well we saw how it does that earlier when we built this calculation description. There,

16
00:01:16,270 --> 00:01:24,520
we also combined text with a number because the default result we use there was just a number and

17
00:01:24,520 --> 00:01:28,400
Javascript concatenated that to one long string

18
00:01:28,400 --> 00:01:29,500
and it's the same here.

19
00:01:29,500 --> 00:01:34,720
It got a number and the string, instead of converting both to a number and doing a calculation,

20
00:01:34,720 --> 00:01:40,330
it does the safer thing because it doesn't know where what you entered here as a string could be treated

21
00:01:40,330 --> 00:01:41,720
as a number or not

22
00:01:41,950 --> 00:01:47,410
and it therefore simply converts it to a string and concatenates it to a string and that's what we see

23
00:01:47,410 --> 00:01:48,140
here.

24
00:01:48,160 --> 00:01:50,400
We started with an initial value of zero,

25
00:01:50,470 --> 00:01:52,040
it concatenated 5,

26
00:01:52,150 --> 00:01:55,000
then we had 05, it added 10,

27
00:01:55,000 --> 00:01:57,640
so this is now that one long string which we got

28
00:01:57,970 --> 00:02:03,520
and again it does so because it doesn't know whether what you entered here can be used as a number or

29
00:02:03,520 --> 00:02:07,780
whether it just is some character which it can't use as a number,

30
00:02:07,800 --> 00:02:11,020
therefore the default is that it builds a string here.

31
00:02:11,020 --> 00:02:16,510
Now of course we want to build a number here however and we know that whatever the user enters here

32
00:02:16,690 --> 00:02:21,460
should be a number so that it can be used in mathematical equations.

33
00:02:21,460 --> 00:02:26,350
Now how can we convert this value to a number then to tell Javascript that we have a number and a

34
00:02:26,350 --> 00:02:33,830
number and it should therefore do a mathematical calculation instead of string concatenation? To convert this

35
00:02:33,880 --> 00:02:34,810
to a number,

36
00:02:34,810 --> 00:02:41,350
you have a function built into the browser or built into Javascript, a bit like the alert function you

37
00:02:41,350 --> 00:02:46,070
used earlier which is called parseInt.

38
00:02:46,450 --> 00:02:54,370
You also have parseFloat, the difference is that parseInt will try to parse some text, so a string, as

39
00:02:54,840 --> 00:03:01,700
number without decimal places and parseFloat will do the same with decimal places.

40
00:03:01,720 --> 00:03:04,380
So with parseFloat if you entered 10 here,

41
00:03:04,390 --> 00:03:11,530
this will be parsed as 10.0, with parseInt if you entered 10.1 here which actually this input

42
00:03:11,530 --> 00:03:12,160
doesn't allow

43
00:03:12,190 --> 00:03:20,440
but if you would do that, it would give you 10. So parseInt and parseFloat are functions built into Javascript

44
00:03:20,830 --> 00:03:28,600
that will in the end take a string as an input, take a string as a parameter you pass in and will then

45
00:03:28,870 --> 00:03:32,800
convert this text into a number.

46
00:03:32,800 --> 00:03:39,370
Now of course that can fail, if you had some text here like hi which again I can't enter here because

47
00:03:39,370 --> 00:03:45,850
this is configured to take a number but if you would have hi here, parseInt would actually of course

48
00:03:45,850 --> 00:03:48,400
not be able to convert this to a number,

49
00:03:48,400 --> 00:03:52,330
instead it would convert it to a special value which I'll show you later.

50
00:03:52,330 --> 00:03:56,320
For now, we know we get valid numbers and therefore we'll be able to parse it,

51
00:03:56,320 --> 00:04:01,940
I also only work with non-decimal numbers here, so only with integers as it's called,

52
00:04:01,960 --> 00:04:10,490
so numbers without decimal places and therefore parseInt will work. So now if I save this, we're doing a

53
00:04:10,490 --> 00:04:16,280
calculation here with a number and a number and hence if we reload and I enter 10 here and I then click

54
00:04:16,280 --> 00:04:20,900
plus, we see 10 here and this is now not 010,

55
00:04:20,900 --> 00:04:27,830
so not some concatenated string, instead if I enter a 5 and I click plus again, I see 15,

56
00:04:27,890 --> 00:04:37,010
so this is now a real number. Now instead of parseInt, you can also use a plus here by the way, even without

57
00:04:37,070 --> 00:04:38,000
parentheses.

58
00:04:38,000 --> 00:04:39,140
So we have a plus here,

59
00:04:39,140 --> 00:04:44,720
that's the operator, another plus in front of the string will then also convert the string to a

60
00:04:44,720 --> 00:04:45,380
number.

61
00:04:45,380 --> 00:04:48,230
So that's the shorter form of doing that conversion

62
00:04:48,230 --> 00:04:53,810
and it's up to you whether you prefer the plus or parseInt, parseInt and parseFloat is of course more

63
00:04:53,810 --> 00:04:55,840
explicit about what it's doing,

64
00:04:55,850 --> 00:04:58,190
the plus here is easy to overlook

65
00:04:58,190 --> 00:05:03,480
and if you know I want to have a non-decimal number or I absolutely need a decimal place,

66
00:05:03,620 --> 00:05:09,640
well then parseInt gives you that extra control, the plus will just give you the best fitting number.

67
00:05:09,640 --> 00:05:14,960
So if it's a number without decimal places, it will keep that, if it's a number with decimal places, it

68
00:05:14,960 --> 00:05:17,820
will keep that as well. So parseInt and parseFloat

69
00:05:17,840 --> 00:05:22,770
also allows you to be more specific about which kind of number you want.

70
00:05:22,850 --> 00:05:28,640
Now if you ever would want to convert a number to a string, you could do this as well by adding dot to

71
00:05:28,730 --> 00:05:29,540
string.

72
00:05:29,630 --> 00:05:31,550
That's another built-in function

73
00:05:31,550 --> 00:05:35,750
tied to the number here which converts this number to a string.

74
00:05:35,750 --> 00:05:42,770
This however is definitely used to in less cases I'd say because more often, you need to convert a string

75
00:05:42,770 --> 00:05:46,690
value to a number to use it in a calculation than the opposite way around 

76
00:05:46,690 --> 00:05:51,780
because as you saw earlier, the default of Javascript was to concatenate two strings,

77
00:05:51,920 --> 00:05:57,640
so we had that default behavior of treating this here or using this number here in a string

78
00:05:57,650 --> 00:06:04,230
anyways. So with that out of the way, we're doing that conversion correctly and the add function is working

79
00:06:04,230 --> 00:06:09,540
therefore. Now we can still improve this function a little bit or improve this overall code

80
00:06:09,630 --> 00:06:12,450
and also of course improve the output we're outputting here.
