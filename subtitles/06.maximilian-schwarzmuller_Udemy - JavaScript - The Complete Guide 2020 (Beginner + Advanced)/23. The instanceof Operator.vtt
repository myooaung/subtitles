WEBVTT
1
00:00:02.190 --> 00:00:05.310
That's it for this tiny project here. Now

2
00:00:05.310 --> 00:00:06.090
definitely

3
00:00:06.150 --> 00:00:09.180
you can refactor this, so you can change the code,

4
00:00:09.180 --> 00:00:12.600
you can definitely come up with some more elegant solutions.

5
00:00:12.600 --> 00:00:17.850
I structured it like this to show all these class features you have available and when you might want

6
00:00:17.850 --> 00:00:23.310
to use them, showed you a couple of different approaches and ways of thinking about that and hopefully

7
00:00:23.310 --> 00:00:30.570
could show you why classes allow us to split our code into logical units which we then can use to compose

8
00:00:30.570 --> 00:00:37.140
our app together because that really is the idea behind object oriented programming and behind classes

9
00:00:37.140 --> 00:00:43.710
and behind working with objects everywhere, that you have your logic and your data grouped together and

10
00:00:43.710 --> 00:00:50.410
then you just use these bundles of data and logic to put together your application.

11
00:00:50.410 --> 00:00:57.020
Now there are a couple of other things related to classes and to objects which are also useful to know

12
00:00:57.020 --> 00:01:02.460
and for that let's go here to the console and let's create a class here which we can do, let's say a person

13
00:01:02.460 --> 00:01:09.000
class here with class person, place the cursor between the curly braces, hold shift and press enter to

14
00:01:09.000 --> 00:01:15.120
write across multiple lines to make it more readable and there for example let's add a field of name

15
00:01:15.210 --> 00:01:17.460
name with a value of Max

16
00:01:17.580 --> 00:01:25.590
and if we now instantiate that class by calling new person like that, p of course is an object of type person

17
00:01:25.740 --> 00:01:27.090
with a name of Max

18
00:01:27.210 --> 00:01:30.150
and it's this type person which is interesting.

19
00:01:30.390 --> 00:01:35.370
I haven't talked about this before because you need to understand classes, to understand the idea of

20
00:01:35.580 --> 00:01:36.600
of types here.

21
00:01:36.630 --> 00:01:38.240
It's not an official type,

22
00:01:38.250 --> 00:01:46.980
if we do type of p, we'll see this is type object, this is not type person but still somehow Javascript keeps

23
00:01:46.980 --> 00:01:51.100
in mind that this was created based on that person class,

24
00:01:51.120 --> 00:01:56.580
it's not of that type but somewhere this has to be stored otherwise the developer tools couldn't show

25
00:01:56.580 --> 00:02:01.520
this to us and indeed, that is stored somewhere.

26
00:02:01.800 --> 00:02:10.050
There is a special operator, instanceof and you can use it to check if an object is created based on

27
00:02:10.050 --> 00:02:17.480
a certain class or a certain blueprint. You use it by using your concrete object,

28
00:02:17.480 --> 00:02:24.470
in this case p which is this constant it holds the object, then instanceof and then the type or the

29
00:02:24.470 --> 00:02:30.520
class you want to check, for example person like that, without parentheses just like that and this will

30
00:02:30.530 --> 00:02:37.580
return true if p was created based on person or if the value stored in p was created based on person

31
00:02:37.850 --> 00:02:44.450
and it will return false otherwise and actually in Javascript there are a bunch of built-in classes

32
00:02:44.450 --> 00:02:45.620
if you want to call them like this,

33
00:02:45.620 --> 00:02:49.910
technically it's something else but that's something I'll dive into the next module, for now let's call

34
00:02:49.910 --> 00:02:51.000
it class,

35
00:02:51.050 --> 00:02:58.310
for example if we select a button. If I store it in a constant button and I get it with query selector

36
00:02:58.700 --> 00:03:05.210
button which should yield me that first button, that order now button here, if I print that, I get it like

37
00:03:05.210 --> 00:03:10.730
this but if I console dir button like this, I get the object.

38
00:03:10.760 --> 00:03:12.560
Now here I got a different representation

39
00:03:12.560 --> 00:03:18.560
but the interesting thing is there is a type, a class built into Javascript and you'll find something

40
00:03:18.560 --> 00:03:19.790
like that on MDN,

41
00:03:19.790 --> 00:03:26.570
that's how I know that, which is called HTML button element, that's basically a class you could say

42
00:03:26.570 --> 00:03:35.090
built into Javascript or built into the browser, exposed to Javascript and the button btn is an instance

43
00:03:35.090 --> 00:03:42.260
of that. If we check that, we get true here because it's of type HTML button element. Side note, HTML

44
00:03:42.260 --> 00:03:45.990
button element extends from HTML element,

45
00:03:46.010 --> 00:03:47.830
so that's a base class so to say

46
00:03:47.900 --> 00:03:50.900
and therefore button also is an instance of

47
00:03:53.820 --> 00:04:04.340
HTML element. It's for example not an instance of person of course. Now I'll dive deeper into these HTML

48
00:04:04.350 --> 00:04:10.440
elements, where to read more about them, where to find all of that in the DOM deep dive module you'll

49
00:04:10.440 --> 00:04:16.870
find a little bit later in the course, not that far away but it's nice to know right now that you have

50
00:04:16.870 --> 00:04:23.140
these built-in classes and that the instanceof operator here helps you find out if an object you have

51
00:04:23.230 --> 00:04:27.780
is based on that type, based on that class or not.
