WEBVTT
1
00:00:02.320 --> 00:00:04.600
Now what about the while loop?

2
00:00:04.780 --> 00:00:08.710
I have no great place to squeeze it in here, though I will say

3
00:00:08.710 --> 00:00:11.840
you can also use a while loop to replace a for loop,

4
00:00:11.950 --> 00:00:16.180
so if you would want to replace this, we would have to manage the variable manually.

5
00:00:16.240 --> 00:00:21.300
Now since I use i down there, I now have to use a different name because now we're initializing it in the

6
00:00:21.310 --> 00:00:24.790
function and there we must only use each name once,

7
00:00:24.790 --> 00:00:30.880
so here I'll go with j, initialize this to be zero and then we can add a while loop with the while keyword,

8
00:00:31.210 --> 00:00:35.770
then a condition between parentheses and then your loop body.

9
00:00:35.770 --> 00:00:40.360
Now if you put something like true here, this is obviously always true and therefore this would give

10
00:00:40.360 --> 00:00:45.460
you an infinite loop which you want to avoid because it will crash your application. Instead here we could

11
00:00:45.460 --> 00:00:55.500
check if j is smaller than 3 and then here we can console log our code from up there, so these dashes

12
00:00:55.500 --> 00:00:58.420
here and then simply increment j

13
00:00:58.500 --> 00:01:04.500
and now we manually replicated this behavior, though I will say if that's what you want, you would go

14
00:01:04.500 --> 00:01:05.510
for the for loop,

15
00:01:05.520 --> 00:01:08.250
this is just so that we can have a first look at while.

16
00:01:08.310 --> 00:01:16.380
So with that, if I reload strong attack and show the log, we see our dashes here three times just as before

17
00:01:16.440 --> 00:01:20.310
but again, you wouldn't really use while for that, you would go with the for loops,

18
00:01:20.430 --> 00:01:25.040
so let me quickly comment that back in and comment out the while loop.

19
00:01:25.350 --> 00:01:32.520
Now a more realistic use case of such a while loop might be that you create some dynamic value in there

20
00:01:32.580 --> 00:01:40.010
and at some point of time, you want to stop. Let's say you're generating random numbers and I'm doing

21
00:01:40.010 --> 00:01:46.450
this in the browser console, so I create my random numbers variable and you have another variable finished

22
00:01:46.480 --> 00:01:54.170
which initially is a false and then you write your while loop where you check for it not being finished,

23
00:01:54.220 --> 00:02:00.160
so with an exclamation mark because this has to return true to make it into the body and then you place

24
00:02:00.160 --> 00:02:03.220
your cursor between the curly braces, you hold shift and press enter,

25
00:02:03.220 --> 00:02:08.110
now you can write multiline code here because pressing shift without enter executes the code.

26
00:02:08.110 --> 00:02:12.130
Don't do this yet because then you'll have an infinite loop and you'll have to close your browser and

27
00:02:12.130 --> 00:02:14.670
reopen it's to get back to work.

28
00:02:14.680 --> 00:02:23.290
So now we have that while loop and in there, I now generate a random number with math.random, haven't

29
00:02:23.380 --> 00:02:27.530
used that before but this gives you a random number between 0 and 1.

30
00:02:27.610 --> 00:02:31.300
Again hold shift, hit enter to enter a new line here,

31
00:02:31.330 --> 00:02:37.090
add that to your random numbers here, so random numbers push random number

32
00:02:37.090 --> 00:02:40.680
and now let's say we're done in another new line with shift enter

33
00:02:41.050 --> 00:02:47.230
if random number is greater than 0.5 which will take maybe just one try it or 10 tries,

34
00:02:47.230 --> 00:02:53.210
it's random. So if random number is greater than 0.5,

35
00:02:53.210 --> 00:02:57.290
then again curly brace, hold shift, hit enter,

36
00:02:57.290 --> 00:03:04.940
then in here I went to set finished to true which means then this condition will no longer be true and

37
00:03:04.940 --> 00:03:06.950
therefore we shouldn't execute this loop anymore.

38
00:03:10.800 --> 00:03:12.480
At this point of time,

39
00:03:12.480 --> 00:03:18.100
I then also want to console log my random numbers. So if we now hit enter,

40
00:03:18.120 --> 00:03:25.000
this executes and you see here, it does execute for me with four numbers that are generated and this was

41
00:03:25.000 --> 00:03:28.500
the number greater than .5 after which it finished.

42
00:03:28.500 --> 00:03:33.390
If I repeat this code by pressing the up arrow here which quickly recreates the code we just wrote,

43
00:03:33.450 --> 00:03:36.940
so the up arrow key on your keyboard, then hit enter,

44
00:03:37.710 --> 00:03:42.930
well now it doesn't even execute because finished of course was set to true,

45
00:03:42.930 --> 00:03:49.520
so let's set finished back to false here actually and then thereafter by pressing the up arrow key

46
00:03:49.520 --> 00:03:52.380
multiple times, go back to the while loop, hit enter again,

47
00:03:52.430 --> 00:03:53.980
now it took five tries,

48
00:03:54.140 --> 00:03:58.820
we have five elements here, though that's not entirely correct of course, it used the old array and

49
00:03:58.820 --> 00:04:00.000
just added one element

50
00:04:00.020 --> 00:04:01.580
so it actually took only one try.

51
00:04:02.090 --> 00:04:03.420
Let's do this again,

52
00:04:03.560 --> 00:04:10.040
let's set finished to false and let's also reset the random numbers array to be an empty array

53
00:04:10.040 --> 00:04:15.700
and now repeat while, now this took two tries here in my case. Of course,

54
00:04:15.700 --> 00:04:20.740
how many tries it takes will differ for you but this is an example where you might use while because

55
00:04:20.740 --> 00:04:23.090
you don't know in advance when you will be done,

56
00:04:23.170 --> 00:04:28.920
you don't know how often this will need to run because the exit condition is derived inside of the loop

57
00:04:28.930 --> 00:04:30.200
code.

58
00:04:30.580 --> 00:04:33.330
Now there also is a variation of while and that's do

59
00:04:33.340 --> 00:04:39.880
while. For that, I'm back in our code here and I'll bring back this while loop with j

60
00:04:40.310 --> 00:04:43.080
and there we create these three dashes.

61
00:04:43.130 --> 00:04:48.550
Now if I log j instead, let's see what that yields,

62
00:04:48.560 --> 00:04:55.850
if I save that, open the console in the developer tools and reload the page and then press show log, we

63
00:04:55.850 --> 00:05:01.370
see 0, 1 and 2, the same we earlier had for the for loop which makes sense,

64
00:05:01.370 --> 00:05:02.560
we start at 0,

65
00:05:02.570 --> 00:05:05.060
check this condition, zero is smaller than three,

66
00:05:05.060 --> 00:05:10.310
so we print this, increment this, now we have one smaller than three, we print this, increment this, now we have

67
00:05:10.310 --> 00:05:11.830
two smaller than three

68
00:05:11.960 --> 00:05:17.090
and for a third time we print this, the value currently is two which is the latest value, the most recent

69
00:05:17.090 --> 00:05:18.190
value we see here.

70
00:05:18.220 --> 00:05:20.240
We increment this, value now is three,

71
00:05:20.240 --> 00:05:22.910
this is not fitting our condition anymore,

72
00:05:22.910 --> 00:05:26.330
so we exit by that time,

73
00:05:26.330 --> 00:05:30.080
so this works as expected.

74
00:05:30.080 --> 00:05:37.880
Now let's say you actually always want to execute your loop body before the condition is checked because

75
00:05:37.880 --> 00:05:41.720
at the moment, the condition is checked before the loop body is executed,

76
00:05:41.750 --> 00:05:44.190
maybe you want to do it the other way around,

77
00:05:44.270 --> 00:05:50.300
well then you can use a do/while loop For that, you can cut your body here and then add the do keyword

78
00:05:50.300 --> 00:05:56.300
and add your body here and then typically you move while right after the closing curly brace, though

79
00:05:56.330 --> 00:05:59.000
technically it also works if it's a new line.

80
00:05:59.000 --> 00:06:06.290
What this does is it now executes the body first and thereafter checks the condition. If you now save

81
00:06:06.290 --> 00:06:15.080
that and you reload and you press show log, you see we print the same as before because we still exit

82
00:06:15.130 --> 00:06:23.960
after this is equal to three but you'll notice a difference if you for example set j to three initially.

83
00:06:24.090 --> 00:06:32.060
If you do that with a do/while loop and I reload here and show log, you still see three being printed

84
00:06:32.060 --> 00:06:33.040
here,

85
00:06:33.050 --> 00:06:38.450
now if we go back to the other while loop without do, so by cutting this and removing the do keyword,

86
00:06:39.570 --> 00:06:40.990
if we do that here,

87
00:06:41.140 --> 00:06:47.380
then you will see that now actually if I reload here and press show log, we don't see the three here.

88
00:06:47.380 --> 00:06:51.160
The reason for that is that three of course is not smaller than three

89
00:06:51.160 --> 00:06:56.800
and here we check the condition first but with do/while, in which case by the way it's also common to

90
00:06:56.800 --> 00:07:01.480
add a semicolon after while, not a must do but you typically do it in this notation,

91
00:07:01.480 --> 00:07:04.890
not after the normal while loop but that's just a side note

92
00:07:05.080 --> 00:07:06.870
but the important thing here is here,

93
00:07:06.970 --> 00:07:09.550
this code runs first and thereafter this is checked,

94
00:07:09.550 --> 00:07:14.680
so that's why we here see three being printed if we initialize j to be three because this condition

95
00:07:14.680 --> 00:07:20.890
which actually finds out that we don't want to continue for j being equal or greater than three is only

96
00:07:20.890 --> 00:07:24.910
executed after we first ran this loop body.

97
00:07:25.120 --> 00:07:31.790
So that's while and do/while, you typically will use for loops more often, while loops are kind of niche,

98
00:07:31.810 --> 00:07:37.570
there are some use cases where they're really great but for the majority of use cases, you typically

99
00:07:37.570 --> 00:07:40.600
work with for and for/of and for/in loops,

100
00:07:40.600 --> 00:07:45.570
that just happens to be the case the way we write programs and what we want to do in there

101
00:07:45.700 --> 00:07:51.670
but it's good to have while loop especially if you have some condition which changes inside of the loop

102
00:07:51.700 --> 00:07:57.970
and you don't know in advance how often you want to execute that loop, then while loops can really shine.
