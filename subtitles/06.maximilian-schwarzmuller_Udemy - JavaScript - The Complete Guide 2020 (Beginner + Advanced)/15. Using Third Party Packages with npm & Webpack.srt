1
00:00:02,310 --> 00:00:03,660
Now we're done for this module

2
00:00:03,660 --> 00:00:10,380
but here's a little bonus. With our enhanced project setup now where we use npm to manage our development

3
00:00:10,380 --> 00:00:13,950
dependencies and webpack to bundle our code and the webpack

4
00:00:13,950 --> 00:00:20,230
dev server, we now also got a new way of adding third-party packages.

5
00:00:20,250 --> 00:00:22,740
Let's take lodash again as an example,

6
00:00:22,740 --> 00:00:25,330
you saw that in the libraries module, here

7
00:00:25,470 --> 00:00:28,620
I will add it again. Now in the libraries module,

8
00:00:28,620 --> 00:00:34,320
I showed you that you can download the script or fetch such a CDN link and add all these imports in

9
00:00:34,320 --> 00:00:36,480
your index.html file.

10
00:00:36,480 --> 00:00:42,900
Well now that we actually use npm and bundling, we got a third way of adding lodash or any other third

11
00:00:42,900 --> 00:00:43,610
party library

12
00:00:43,620 --> 00:00:49,800
basically. We can scroll down to the installation and there we see that with npm, we can actually install

13
00:00:49,800 --> 00:00:52,090
lodash with this command,

14
00:00:52,200 --> 00:00:57,620
so let's copy that and execute it here in the terminal navigated into our project folder.

15
00:00:57,720 --> 00:01:05,970
It's npm i which is just a short form for npm install --save, not save dev because it's not

16
00:01:05,970 --> 00:01:11,460
a development dependency but actually a dependency which we need as part of our final code which we

17
00:01:11,460 --> 00:01:15,030
ship and then the name of the package which is lodash.

18
00:01:15,030 --> 00:01:21,420
Now if you hit enter, this is getting installed and once this process finished, it will for one be added

19
00:01:21,420 --> 00:01:27,540
to the node modules folder and you also see you now have a new dependencies entry with lodash

20
00:01:27,540 --> 00:01:29,040
as a dependency in your package.json

21
00:01:29,080 --> 00:01:30,790
file. Now

22
00:01:30,840 --> 00:01:33,580
that alone does not add it to your project though,

23
00:01:33,660 --> 00:01:38,790
it just added to your folder but not to your web application, to your script.

24
00:01:39,000 --> 00:01:44,140
if you would want to use lodash though, let's say here in the app.js file, you can now import it,

25
00:01:44,220 --> 00:01:50,250
the convention is to import third-party packages first but that's not a must do and you can import it

26
00:01:50,250 --> 00:01:57,390
as shown here, with this require syntax here in Node.js but actually also with another syntax which

27
00:01:57,390 --> 00:02:04,850
I want to show you here. You can import everything as let's say underscore to keep that's special variable

28
00:02:04,840 --> 00:02:08,460
name lodash uses from lodash.

29
00:02:08,460 --> 00:02:11,870
Now here, we don't have a relative path to any file, instead

30
00:02:11,880 --> 00:02:13,620
this is simply an instruction

31
00:02:13,620 --> 00:02:20,790
webpack will understand when it analyzes our imports and if you have a path or a package name like this

32
00:02:20,790 --> 00:02:27,510
which is not a path, so which does not start with .. or ./, then webpack will go ahead

33
00:02:27,540 --> 00:02:35,480
and look for a package with this name in node modules and import the package from the node modules folder.

34
00:02:35,640 --> 00:02:42,450
Now here, I'm storing everything in this underscore symbol and therefore here we could try to console

35
00:02:42,450 --> 00:02:56,210
log lodash difference between let's say 0, 1 and 1, 2 and with that, what we would do is we would run a

36
00:02:56,210 --> 00:03:02,390
similar example as before but now with the lodash imported differently. If we now run npm run build:

37
00:03:02,390 --> 00:03:05,900
dev again to restart our development server,

38
00:03:05,900 --> 00:03:09,950
this should work and should include lodash into our bundle.

39
00:03:09,950 --> 00:03:15,850
So if I reload my page here, indeed it works and this is the output I'm getting from my app.js file

40
00:03:16,340 --> 00:03:19,480
related to that lodash code.

41
00:03:19,550 --> 00:03:26,510
Now some libraries and lodash is one of them also offer some improved imports to not import everything

42
00:03:26,540 --> 00:03:32,720
because if you just import from lodash, you import the entire lodash package. If you're only interested

43
00:03:32,720 --> 00:03:39,140
in some features, you could import from lodash/array for example to only add array functionalities

44
00:03:39,200 --> 00:03:42,470
and difference is an array functionality.

45
00:03:42,470 --> 00:03:48,170
So now this would still work as you can tell but we would actually import less and therefore have a

46
00:03:48,170 --> 00:03:49,640
smaller bundle.

47
00:03:49,760 --> 00:03:55,310
It always depends on the exact library you're working with, each library has its own import syntax you

48
00:03:55,310 --> 00:04:00,500
can use and the official documentation is typically the best way of finding out how you can add

49
00:04:00,500 --> 00:04:04,220
this library to your project and how you can import from that library.
