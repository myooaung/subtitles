WEBVTT
1
00:00:02.400 --> 00:00:05.390
More about arrays. Now here for one

2
00:00:05.400 --> 00:00:09.600
I noticed a little typo, of course that should be fragments not fragements,

3
00:00:09.600 --> 00:00:11.610
sorry about that

4
00:00:11.610 --> 00:00:18.690
and now let's dive in two more interesting Javascript features related to arrays. to be specific into

5
00:00:18.690 --> 00:00:23.170
two syntax features which help us work with arrays.

6
00:00:23.220 --> 00:00:28.140
Now one is a feature which I already briefly introduced but didn't dive deeper into,

7
00:00:28.140 --> 00:00:30.340
well now is the time to dive deeper into it

8
00:00:30.450 --> 00:00:33.420
and that would be the spread operator.

9
00:00:33.560 --> 00:00:36.330
In case you forgot it, the spread operator is an

10
00:00:36.330 --> 00:00:44.150
operator that in the end pulls out all elements of an array and gives them to you as a standalone

11
00:00:44.150 --> 00:00:45.370
list of elements.

12
00:00:45.410 --> 00:00:51.770
So if I for example do name fragments and pulling out all the elements of that array but using it like

13
00:00:51.770 --> 00:00:57.350
this is actually not supported, here I'm pulling out all the elements of the array and I'm not doing

14
00:00:57.350 --> 00:00:59.120
anything with that.

15
00:00:59.210 --> 00:01:07.310
I also can't assign it to a constant like this because that would just be as if you had Max Schwarz

16
00:01:07.310 --> 00:01:12.830
here like that and that would be an invalid syntax, this is is not a supported operation, what would you do with

17
00:01:12.830 --> 00:01:21.230
just a comma separated list like this? Instead where you use this spread operator is for example to copy

18
00:01:21.440 --> 00:01:28.910
an array. So if I have my copied name fragments here, then I can create a new array with square brackets,

19
00:01:28.910 --> 00:01:35.240
an empty array but now populate it with the elements of name fragments but not by adding name fragments

20
00:01:35.240 --> 00:01:36.110
like this,

21
00:01:36.230 --> 00:01:42.650
this would insert this name fragments array as the first and only element in the copied name fragments

22
00:01:42.650 --> 00:01:49.610
array so we would create a nested array in the end but instead we add these three dots which make up that so-called

23
00:01:49.670 --> 00:01:52.580
spread operator, which is liked that rest

24
00:01:52.580 --> 00:01:58.790
operator you saw in the function's module but simply used in a different place. In the functions module,

25
00:01:58.820 --> 00:02:05.900
we used these three dots, the rest operator in the argument list of a function. Here I'm using that in

26
00:02:05.900 --> 00:02:08.290
a place where I need multiple elements,

27
00:02:08.360 --> 00:02:14.270
for example when we initialize an array. This will then pull out all the elements out of the name fragments

28
00:02:14.270 --> 00:02:21.110
array and add them as individual elements to that newly created, otherwise empty array and then copied

29
00:02:21.110 --> 00:02:28.990
name fragments is a new array because we created it with square brackets with the values of the old array,

30
00:02:29.000 --> 00:02:35.150
so with these strings here in that case and the consequence is that if I log name fragments here and I

31
00:02:35.150 --> 00:02:42.410
log copied name fragments here, we'll of course see that if I reload, we get the same array here but it's

32
00:02:42.410 --> 00:02:50.660
interesting that if I now go to name fragments and I for example push a new fragment here, Mr for

33
00:02:50.660 --> 00:02:54.720
mister let's say and I reload,

34
00:02:54.720 --> 00:03:01.400
we see that this mr element is part of the first array output here which is the name fragments array

35
00:03:01.410 --> 00:03:03.500
which is the one where I push that to

36
00:03:03.630 --> 00:03:10.050
but it's not part of that second array which is my copied array where I indeed created a brand new array

37
00:03:10.080 --> 00:03:12.120
and just added the existing elements.

38
00:03:12.120 --> 00:03:18.830
Therefore if I added array one, name fragments, this array two, the copied name fragments array which is a

39
00:03:18.830 --> 00:03:22.560
copy and therefore a brand new array is not touched at all.

40
00:03:22.650 --> 00:03:27.830
So that's one advantage but you don't just use this spread operator for copying things.

41
00:03:28.620 --> 00:03:35.840
If we go back to our prices which we have up there, then you see this is an array full of numbers.

42
00:03:35.850 --> 00:03:41.580
Now you also have some functionalities in Javascript, for example on the global math object which we'll

43
00:03:41.580 --> 00:03:45.960
have a closer look in the numbers module later where you have a min method.

44
00:03:45.960 --> 00:03:48.840
The min method takes a couple of arguments,

45
00:03:48.840 --> 00:03:51.920
it does not take an array,

46
00:03:51.990 --> 00:04:00.750
instead it takes values like 1, 5, -3 and then it will return the smallest value, so if we console log

47
00:04:00.750 --> 00:04:05.480
that and reload, we of course output -3 because that is the smallest value.

48
00:04:05.490 --> 00:04:11.280
Now if you would want to find the minimum value in your prices array,then you would have a problem normally

49
00:04:11.340 --> 00:04:16.620
because that is an array, not a list of values, not a list of arguments so to say.

50
00:04:16.670 --> 00:04:23.890
So if I pass in prices like that and I save that, this doesn't work, I get not a number because indeed

51
00:04:23.890 --> 00:04:27.630
I passed it in array, not a number and it only works with numbers.

52
00:04:27.640 --> 00:04:33.910
So here, again we can use the spread operator to pull these elements out of the array so that we have a

53
00:04:33.910 --> 00:04:36.090
comma separated list of elements

54
00:04:36.220 --> 00:04:39.390
and that's exactly what the min method here requires.

55
00:04:39.430 --> 00:04:45.970
So also for situations like this where you are working with some function or some method that requires

56
00:04:45.970 --> 00:04:52.390
a list of standalone values, the spread operator helps you get these values out of an array and therefore

57
00:04:52.400 --> 00:04:57.960
now, this indeed returns us the minimum price here.

58
00:04:57.960 --> 00:05:03.690
Now one important note about the spread operator and especially about copying arrays with the spread

59
00:05:03.690 --> 00:05:06.660
operator like this. When you copy such an array,

60
00:05:06.660 --> 00:05:12.720
indeed when you added the original array, the copied one is not affected as I showed you.

61
00:05:12.720 --> 00:05:16.710
Now one common mistake is that you copy an array of objects.

62
00:05:16.740 --> 00:05:24.480
So for that let's create a person's array here maybe, where we have objects with name Max, age 30 and

63
00:05:24.480 --> 00:05:29.010
another object, name Manuel, age 31.

64
00:05:29.040 --> 00:05:30.790
Now let's say we want to copy that,

65
00:05:30.840 --> 00:05:36.600
so copied persons of course can be created by adding square brackets and then using the spread operator

66
00:05:36.600 --> 00:05:38.400
on persons like this.

67
00:05:38.400 --> 00:05:46.890
Now unsurprisingly if we console log persons and copied persons like this, you will see that if I

68
00:05:46.890 --> 00:05:55.550
go to persons and I push a new person into this array, let's say Anna, age 29, that this will be part of

69
00:05:55.550 --> 00:06:00.810
persons but not of copied persons because copied persons as you learned is a brand new array and therefore

70
00:06:00.860 --> 00:06:04.130
changes to the original array are not reflected in the brand new one

71
00:06:04.130 --> 00:06:05.530
and indeed that is what we see here,

72
00:06:05.540 --> 00:06:09.020
the second array doesn't hold this Anna object.

73
00:06:09.020 --> 00:06:15.560
Now a common mistake is to think that the objects in the array which are also reference values are also

74
00:06:15.560 --> 00:06:17.460
copied and that's not the case.

75
00:06:17.640 --> 00:06:23.450
We're copying all the elements of the array which means we're copying the addresses of these objects

76
00:06:23.450 --> 00:06:24.320
at the end.

77
00:06:24.320 --> 00:06:30.620
So whilst we have a brand new array, the objects in the array, the objects in that brand new array are

78
00:06:30.620 --> 00:06:36.440
still the old objects because in the end, you must never forget you're working with reference values and

79
00:06:36.440 --> 00:06:42.910
therefore in the end, this is an array full of addresses to the places in memory of these objects,

80
00:06:43.250 --> 00:06:46.530
so you are copying all these addresses here.

81
00:06:46.610 --> 00:06:53.140
Hence if we would go to persons and there let's say to the first element which is Max and change the

82
00:06:53.150 --> 00:06:58.960
age to 31, you will see that this change is also reflected in copied persons.

83
00:06:59.030 --> 00:07:02.410
If I reload this, we have a look, expand this,

84
00:07:02.450 --> 00:07:06.210
this is copied persons and you'll see the age is 31. Now

85
00:07:06.230 --> 00:07:11.000
that happens because I copy the address of the place in memory and here

86
00:07:11.000 --> 00:07:14.200
I then added this object in that place in memory.

87
00:07:14.240 --> 00:07:20.450
So since we here only copy these addresses and create a new array but no new objects, of course any

88
00:07:20.510 --> 00:07:22.070
edits to these objects

89
00:07:22.250 --> 00:07:28.550
also affect our persons in a new, in a copied array and that's not a bug or anything like that,

90
00:07:28.550 --> 00:07:30.350
this is the intended behavior.

91
00:07:30.560 --> 00:07:36.980
If you would want to avoid that, you would have to copy every object here as well which you could achieve

92
00:07:37.220 --> 00:07:39.680
by using the map method for example.

93
00:07:39.680 --> 00:07:45.770
So here on persons, we map that to get a brand new array and then we pull elements out of that returned

94
00:07:45.770 --> 00:07:47.020
brand new array and

95
00:07:47.110 --> 00:07:52.530
now in there, we get a single person and now we can return a new object for every person.

96
00:07:52.550 --> 00:07:59.360
So then here, we could return an object and side note, since I returned something in curly braces to tell

97
00:07:59.360 --> 00:08:05.360
Javascript that this does not mark the function body but should be my object, I have to wrap this in an extra

98
00:08:05.360 --> 00:08:07.080
pair of parentheses,

99
00:08:07.250 --> 00:08:13.460
this will then tell Javascript that this here is the single expression function body,

100
00:08:13.490 --> 00:08:16.220
so I just return something immediately

101
00:08:16.220 --> 00:08:22.310
and this here does therefore not mark the function body but instead marks the object which I'm returning.

102
00:08:22.370 --> 00:08:29.120
So here I can then return a brand new object where name is equal to person.name and age is equal

103
00:08:29.120 --> 00:08:30.370
to person.age.

104
00:08:30.410 --> 00:08:36.920
So I keep all the data of the original person but I wrap it into a brand new object, so the same logic

105
00:08:37.010 --> 00:08:42.410
in the end as I do it for this array, I create a new array and keep all the original objects.

106
00:08:42.410 --> 00:08:43.900
Now I don't really do that,

107
00:08:43.900 --> 00:08:49.970
instead I map all objects in the original array into new objects which therefore have new places in

108
00:08:49.970 --> 00:08:55.820
memory and then map gives me a new array as you learned and I pull out all the elements of that new

109
00:08:55.820 --> 00:09:02.630
array that map returns and merge them into this yet another new array with these square brackets and

110
00:09:02.640 --> 00:09:09.380
therefore actually, here you could omit that, you could just save the result of map here because map

111
00:09:09.440 --> 00:09:11.200
already returns a new array,

112
00:09:11.240 --> 00:09:16.580
so now we would have a new array with new objects in there but even then, if one of these persons had

113
00:09:16.580 --> 00:09:22.070
a hobbies key which is an array, then you would have the same problem. You would clone the object, you would

114
00:09:22.070 --> 00:09:27.380
clone the outer array but any inner reference value fields are not copied.

115
00:09:27.380 --> 00:09:29.270
Now this is not necessarily a problem,

116
00:09:29.300 --> 00:09:32.850
of course you could now find ways to then clone the hobbies as well, right?

117
00:09:32.870 --> 00:09:39.620
You could say hobbies equal to new array where you make a copy with the spread operator but you can

118
00:09:39.620 --> 00:09:45.160
do this infinitely depending on how many nested reference values you have here.

119
00:09:45.170 --> 00:09:46.160
That's not really the goal,

120
00:09:46.160 --> 00:09:48.210
that's not really what you should aim for,

121
00:09:48.260 --> 00:09:54.530
instead only copy what you plan on changing where you don't want to have these changes reflected in

122
00:09:54.530 --> 00:09:58.500
the copied value, in the copied array or whatever you are copying,

123
00:09:58.520 --> 00:10:00.380
that is how you should think about that.

124
00:10:00.530 --> 00:10:03.350
So it can be tricky, in the end the spread

125
00:10:03.350 --> 00:10:10.460
operator is a very useful tool for copying, for distributing elements into the argument list of a method

126
00:10:10.460 --> 00:10:11.930
and when you do copy,

127
00:10:12.110 --> 00:10:17.090
keep in mind what I just explained about nested reference values and that you might need to copy these

128
00:10:17.090 --> 00:10:23.720
as well but only if you copy these as well and you don't want the changes to these nested reference

129
00:10:23.720 --> 00:10:29.420
values reflected in your newly created copied array or whatever it is as well.
