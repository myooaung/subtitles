WEBVTT
1
00:00:02.190 --> 00:00:09.570
So we have an idea of what the browser does with our Javascript code, how it technically is able to execute

2
00:00:09.570 --> 00:00:11.460
that, how it compiles it

3
00:00:11.700 --> 00:00:18.270
but if we take a closer look, if we zoom in into our code execution, how exactly does that work?

4
00:00:18.270 --> 00:00:24.450
I don't mean the technical aspects regarding the code getting compiled but how the different steps in

5
00:00:24.450 --> 00:00:27.420
our code, how the logic there is executed.

6
00:00:27.420 --> 00:00:30.140
So let's look inside the Javascript engine,

7
00:00:30.150 --> 00:00:37.590
the thing that executes our code and there, it's in the end all about managing memory and managing execution

8
00:00:37.590 --> 00:00:38.250
steps

9
00:00:38.280 --> 00:00:43.830
you could say and for this, we have two important concepts - 

10
00:00:43.830 --> 00:00:48.290
the heap and the stack. Now what are these concepts?

11
00:00:48.300 --> 00:00:49.640
What's the idea?

12
00:00:50.100 --> 00:00:53.250
The heap is our long term memory if you will,

13
00:00:53.250 --> 00:00:55.450
it's all about memory allocation.

14
00:00:55.500 --> 00:00:58.740
It stores data in our system memory and with it,

15
00:00:58.740 --> 00:01:04.980
I mean the browser does that, the browser manages does heap thing, the browser taps into our system memory

16
00:01:04.980 --> 00:01:08.520
and of course our operating system has a say in that as well,

17
00:01:08.580 --> 00:01:12.590
it allocates memory to the browser application, so that the bigger picture

18
00:01:12.960 --> 00:01:18.240
but if we zoom into the browser and then into the Javascript engine, in the end the browser does this

19
00:01:18.240 --> 00:01:21.230
memory allocation in that thing which is called a heap.

20
00:01:21.360 --> 00:01:25.380
So there data gets stored with which we work in our program

21
00:01:25.380 --> 00:01:30.450
and important, long term data and then there is this stack thing.

22
00:01:30.450 --> 00:01:34.850
Now that stack thing is in the end important for the execution of our code.

23
00:01:34.920 --> 00:01:36.800
Of course the data is also important for that

24
00:01:36.810 --> 00:01:40.300
but the stack is kind of the short term memory if you will.

25
00:01:40.440 --> 00:01:47.340
It manages our program flow and mainly that means that the stack keeps control over which function is

26
00:01:47.340 --> 00:01:48.720
currently executing

27
00:01:48.720 --> 00:01:54.360
and when we execute a new function that this function is not executing and if a function returns, to

28
00:01:54.360 --> 00:01:58.980
which function it returns that data. Now this becomes much clearer

29
00:01:58.980 --> 00:02:05.330
if we simply have a look at an example and for this, attached again you find a very basic starting project

30
00:02:05.360 --> 00:02:08.240
with an HTML file that's basically empty,

31
00:02:08.240 --> 00:02:11.960
all it has is a script import and then we have this script.

32
00:02:11.960 --> 00:02:18.230
So there are no real elements on the screen, there are no styles, it renders this empty page because now

33
00:02:18.230 --> 00:02:23.180
we'll just have a look at some of the behind the scenes things where we can use the developer tools,

34
00:02:23.240 --> 00:02:27.110
for example the console to get a feeling for what's happening.

35
00:02:27.170 --> 00:02:34.940
So now here, let's write a basic program to get an understanding of what's happening. In this basic program

36
00:02:34.940 --> 00:02:41.960
here, I want to have a function which I'll name greet and in this function,

37
00:02:42.170 --> 00:02:43.580
I want to say

38
00:02:46.340 --> 00:02:48.560
hello and I don't just want to say hello,

39
00:02:48.560 --> 00:02:57.300
I also want to get the name of a user, so I'll have my userName constant and that value should be fetched

40
00:02:57.300 --> 00:02:59.000
by another function.

41
00:02:59.070 --> 00:03:06.150
So here, I'll add another function which I'll call get name and in this get name function, I have returned

42
00:03:06.150 --> 00:03:10.110
a result of us prompting the user for the name.

43
00:03:10.110 --> 00:03:17.250
So your name in this prompt here opens this dialog where we have to enter something, then prompt returns

44
00:03:17.280 --> 00:03:23.100
that value and then I return the value returned by prompt to whoever called get name which in my

45
00:03:23.100 --> 00:03:24.410
case will be greet.

46
00:03:24.420 --> 00:03:26.210
So here I call get name,

47
00:03:26.280 --> 00:03:32.450
so whatever we enter into this prompt will in the end end up in userName and then I output this here

48
00:03:32.550 --> 00:03:37.200
in the console. Now last but not least, I just call greet down there,

49
00:03:37.240 --> 00:03:40.890
otherwise these functions would only be registered but never executed,

50
00:03:40.900 --> 00:03:41.230
right,

51
00:03:41.230 --> 00:03:42.640
that's what you already learned.

52
00:03:42.820 --> 00:03:47.160
This defines functions, Javascript then registers them,

53
00:03:47.170 --> 00:03:52.440
you could say it stores them in the heap because these functions have have a long life

54
00:03:52.450 --> 00:03:56.960
typically, they live as long as you do something in your application

55
00:03:57.220 --> 00:03:59.660
and here we then call such a function.

56
00:03:59.680 --> 00:03:59.890
OK

57
00:03:59.920 --> 00:04:06.400
so with that if we save this and we reload this page, I get prompted here, I can enter Max and if I do so,

58
00:04:06.520 --> 00:04:08.820
I print Hello Max here.

59
00:04:08.890 --> 00:04:13.480
Now how does this relate to our stack heap thing here?

60
00:04:13.540 --> 00:04:19.600
As mentioned, the functions themselves are basically stored in the heap, so that's where the browser stores

61
00:04:19.630 --> 00:04:23.770
these functions and the code it should execute when these functions are executed

62
00:04:23.770 --> 00:04:31.450
you could say and now when our script runs, the stack is getting active or to be precise, the browser in

63
00:04:31.450 --> 00:04:38.530
the end pushes stuff into our stack and remember the stack is basically our short term memory, heap is

64
00:04:38.530 --> 00:04:40.330
the long term memory.

65
00:04:40.330 --> 00:04:46.180
Now in the stack, it all starts with some anonymous code execution which basically is the script file

66
00:04:46.180 --> 00:04:47.890
itself, it doesn't have a name,

67
00:04:47.890 --> 00:04:53.260
of course the file has a name but it's like in a big gigantic function to which you didn't assign a

68
00:04:53.260 --> 00:04:53.890
name.

69
00:04:53.890 --> 00:04:59.530
So the code directly in the file is in a function without a name you could say and therefore, we have

70
00:04:59.530 --> 00:05:02.140
this anonymous execution in our stack,

71
00:05:02.200 --> 00:05:06.010
so that's the overall script which is getting executed.

72
00:05:06.100 --> 00:05:12.630
Of course that execution of our script only happens after Javascript evaluated the entire script

73
00:05:12.700 --> 00:05:15.610
and for example saw all the function definitions,

74
00:05:15.610 --> 00:05:18.340
that's what I already explained earlier in the course.

75
00:05:18.340 --> 00:05:24.400
So the script execution started, we're executing the entire script and that basically means that this

76
00:05:24.490 --> 00:05:26.440
greet line is getting executed,

77
00:05:26.440 --> 00:05:35.450
so we call the greet function, therefore Javascript moves this greet function execution onto the stack. So the

78
00:05:35.450 --> 00:05:42.950
stack is in the end a data structure, a short living data structure you could say, where your function executions

79
00:05:42.950 --> 00:05:43.690
are stored

80
00:05:43.700 --> 00:05:50.080
so to say, so where the browser or the Javascript engine keeps track of what's currently happening and

81
00:05:50.080 --> 00:05:58.610
the stack is simply populated by pushing new function calls or new short living data on top of it

82
00:05:59.150 --> 00:06:02.820
and popping it off when it's not required anymore. 

83
00:06:02.870 --> 00:06:09.320
So we started with the overall script execution, this anonymous function and in there, we call the greet

84
00:06:09.320 --> 00:06:14.320
function hence this is pushed onto the stack and is now the topmost item in the stack

85
00:06:14.720 --> 00:06:20.130
and the topmost item in the stack is always the thing which is currently happening

86
00:06:20.150 --> 00:06:26.720
you could say. Now if we have a look at the greet function, what happens there is that we create a variable

87
00:06:27.230 --> 00:06:32.610
and the variable is created by calling yet another function, the get name function.

88
00:06:32.700 --> 00:06:39.780
So now the Javascript engine pushes this get name function execution onto the stack, therefore it now

89
00:06:39.780 --> 00:06:42.090
knows this is the currently running function,

90
00:06:42.090 --> 00:06:47.190
it was started by the greet function which in turn was started by this anonymous function,

91
00:06:47.190 --> 00:06:53.190
so by our overall script. This is how Javascript or the Javascript engine can also keep track of the

92
00:06:53.190 --> 00:06:55.130
relations of these function calls,

93
00:06:55.170 --> 00:06:57.860
so which function called what.

94
00:06:58.050 --> 00:06:59.940
So get name is running,

95
00:06:59.940 --> 00:07:04.620
now what happens next? In get name,

96
00:07:04.620 --> 00:07:07.050
we return the value of prompt.

97
00:07:07.050 --> 00:07:12.000
Now technically, we therefore also call the prompt function which of course is not a function written

98
00:07:12.000 --> 00:07:18.380
by us but a function provided by the browser which we can access through Javascript but still this is a

99
00:07:18.380 --> 00:07:25.450
function call and therefore this also gets pushed on top of the stack and it would continue like this,

100
00:07:25.450 --> 00:07:31.680
the more functions you call, the more it gets pushed onto the stack. Now what happens next?

101
00:07:31.930 --> 00:07:33.720
Prompt opens that dialog

102
00:07:33.730 --> 00:07:40.990
and once we entered something there and we clicked OK or also when we click cancel, prompt actually returns

103
00:07:40.990 --> 00:07:43.050
this value to get name.

104
00:07:43.060 --> 00:07:50.380
Now when a function returns or is done executing, it's popped off the stack, which means it's removed

105
00:07:50.380 --> 00:07:54.330
from the stack, it's removed from that short term memory because it's done.

106
00:07:54.440 --> 00:07:59.260
Now important, that does not mean that the function definition is removed from the heap, from that long

107
00:07:59.260 --> 00:08:05.500
term stack just as current execution which of course also involves resources that need to be allocated

108
00:08:05.710 --> 00:08:09.100
and data that needs to be managed for this function execution.

109
00:08:09.100 --> 00:08:17.980
That data, this execution context therefore is removed from the stack. Now in get name, we therefore

110
00:08:17.990 --> 00:08:20.770
get that result from this prompt function call,

111
00:08:20.880 --> 00:08:22.530
now what do we do with it?

112
00:08:22.530 --> 00:08:23.920
Well we also return that,

113
00:08:23.940 --> 00:08:31.940
so get name returns the data to the greet function. As a result, get name also gets popped off of the

114
00:08:31.940 --> 00:08:38.960
stack, whenever a function returns a value or simply is done with all its steps, it's removed from the

115
00:08:38.960 --> 00:08:46.190
stack, it's popped off the stack, the Javascript engine does that for us. Now after being popped off,

116
00:08:46.610 --> 00:08:47.980
so get name was popped off,

117
00:08:47.980 --> 00:08:53.600
we're in greet. Now greet contines running, we don't have a return statement in there but once the function

118
00:08:53.630 --> 00:08:55.460
executed its last line

119
00:08:55.460 --> 00:08:58.790
that's part of the function, it implicitly returns,

120
00:08:58.790 --> 00:09:00.430
so it automatically returns,

121
00:09:00.550 --> 00:09:05.480
so therefore once this is done, greet is also popped off the stack

122
00:09:05.480 --> 00:09:11.540
which leaves us with the main script, with the script itself which you could imagine as being wrapped

123
00:09:11.540 --> 00:09:18.310
by a big anonymous function and now in this script, clearly once we're done with greet, there is no other

124
00:09:18.310 --> 00:09:21.880
step left, right, there is nothing after greet, no other steps left

125
00:09:21.880 --> 00:09:28.630
so we're done with this overall script execution. So therefore, we also pop this off,

126
00:09:28.630 --> 00:09:34.720
that means we're done with everything that needs to be executed at the moment. We can also see that

127
00:09:34.750 --> 00:09:38.130
in the browser, of course we see the result in the console

128
00:09:38.380 --> 00:09:44.740
but if you go to sources and then to your script file there, we worked with that earlier in the debugging

129
00:09:44.740 --> 00:09:45.800
section,

130
00:09:45.970 --> 00:09:53.950
you can actually place a breakpoint and place one here inside of get name by clicking on this line

131
00:09:53.950 --> 00:09:59.660
number 2 in my case. If you now reload the page, it stops execution at this point of time

132
00:09:59.740 --> 00:10:04.390
and if you now expand this, you actually see the call stack here.

133
00:10:04.420 --> 00:10:10.570
This is exactly the stack I was talking about, not the full stack because these stack memory itself does

134
00:10:10.570 --> 00:10:16.960
actually not just manage function calls but also short living values stored in variables

135
00:10:16.960 --> 00:10:22.360
but it shows us the order in which the functions are executed and how they are managed as a stack

136
00:10:22.360 --> 00:10:25.490
and this is just the stack I was just referring to

137
00:10:25.570 --> 00:10:31.640
and here you see get name before you see greet and then you see this anonymous thing at the bottom.

138
00:10:31.690 --> 00:10:36.370
Now get name is about to call prompt and we can actually see that by stepping into the next function

139
00:10:36.370 --> 00:10:41.590
call which opens this prompt here and there if I enter Max and hit

140
00:10:41.620 --> 00:10:48.030
OK, well we're back to get name, unfortunately here it never shows prompt being called but prompt would

141
00:10:48.040 --> 00:10:50.350
be pushed on top of the stack as well

142
00:10:50.380 --> 00:10:55.660
and now if I continue here and I step out of the current function call for example, we're back in greet,

143
00:10:56.070 --> 00:10:59.350
therefore get name was popped off the stack.

144
00:10:59.350 --> 00:11:01.410
If I step out of this function call,

145
00:11:01.720 --> 00:11:06.010
well then we're back to anonymous because greet was popped off the stack

146
00:11:06.010 --> 00:11:13.960
and if I now resume script execution, eventually the call stack is empty. So that is how this in the

147
00:11:13.960 --> 00:11:16.280
end works.

148
00:11:16.310 --> 00:11:23.200
This is how Javascript manages the data and the execution context, the order of execution

149
00:11:23.300 --> 00:11:26.140
and this is how it therefore works under the hood.

150
00:11:26.150 --> 00:11:32.180
Now you might remember from the first course section that there I mentioned that Javascript is single

151
00:11:32.180 --> 00:11:34.820
threaded. Now without getting too technical,

152
00:11:34.820 --> 00:11:38.570
that basically means that Javascript can only do one thing at a time.

153
00:11:38.600 --> 00:11:39.890
That's exactly what happened here,

154
00:11:39.890 --> 00:11:45.560
it called one function at a time and the other functions waited for the response of that function, just

155
00:11:45.560 --> 00:11:47.260
as you saw it in that stack.

156
00:11:47.450 --> 00:11:55.790
So the stack and this idea of managing our function calls and the flow of the script therefore in such

157
00:11:55.790 --> 00:12:03.290
a stack, that basically ensures that this single threading thing works and that the order of execution

158
00:12:03.290 --> 00:12:09.660
is ensured and that every function basically knows to which function it relates.

159
00:12:09.740 --> 00:12:15.050
Now there is one other important concept which is actually not part of the Javascript engine but of

160
00:12:15.050 --> 00:12:18.070
modern browsers, like Google Chrome browser

161
00:12:18.080 --> 00:12:23.030
but also of other browsers and that's a thing called the event loop.

162
00:12:23.030 --> 00:12:28.740
This will actually help us with asynchronous code which we haven't really learned too much about yet,

163
00:12:28.970 --> 00:12:36.160
it helps us with things like event listeners, these click listeners which we added to buttons. The current

164
00:12:36.170 --> 00:12:41.750
picture which you have here, where we have this stack which does stuff and which eventually is empty

165
00:12:42.200 --> 00:12:48.050
kind of implies that a script always has a certain point of time where it's just done with everything,

166
00:12:48.740 --> 00:12:54.800
just like this script actually is, it's done after line 10 executed but that's not necessarily always

167
00:12:54.800 --> 00:12:56.900
the case for all scripts.

168
00:12:56.900 --> 00:13:01.490
What about a script like this and you'll find this setup attached as well, it's this index.html

169
00:13:01.540 --> 00:13:06.130
file which has a bit more content and it has two buttons in this app.js file.

170
00:13:06.170 --> 00:13:08.500
Let's not worry too much about what's happening here,

171
00:13:08.540 --> 00:13:13.650
I'll come back to this script and about an issue which it actually has later in this module

172
00:13:13.820 --> 00:13:19.910
but the main thing which is important to us right now is that here, we're actually adding event listeners.

173
00:13:20.690 --> 00:13:27.860
We're adding event listeners here to buttons and that of course therefore means that if we would actually

174
00:13:27.860 --> 00:13:37.890
execute this and remove this breakpoint here and instead I set a new one in app.js and I set one here

175
00:13:37.890 --> 00:13:42.450
at the end, at line 14 when we register this event listener and now I reload,

176
00:13:42.450 --> 00:13:47.640
well then of course execution pauses and we have our call stack down there.

177
00:13:47.640 --> 00:13:53.130
Right now, I'm not pausing inside of a function, so the anonymous wrapping function is the only thing on

178
00:13:53.130 --> 00:13:53.830
there

179
00:13:54.020 --> 00:13:57.030
and if I resume, the call stack is empty here as well.

180
00:13:57.030 --> 00:14:03.120
Now this would imply that this script is not able to do anything ever again and still if we go to the

181
00:14:03.120 --> 00:14:09.420
console and you enter something here in the input, click add a listener and then click me, you see this

182
00:14:09.510 --> 00:14:11.160
actually still does something,

183
00:14:11.160 --> 00:14:14.860
this output here is coming from our script from line 7.

184
00:14:14.910 --> 00:14:20.190
So this script is still alive, even though we're at the end of it and even though our call stack

185
00:14:20.190 --> 00:14:20.990
is empty.

186
00:14:21.090 --> 00:14:23.880
So that can be confusing, why is that happening?

187
00:14:23.880 --> 00:14:27.670
Well that's exactly what that event loop is about.

188
00:14:27.810 --> 00:14:34.020
We'll dive into that in way more detail later once we learned more, we'll learn something at all about

189
00:14:34.350 --> 00:14:39.120
asynchronous code in Javascript and what this is and what the opposite is,

190
00:14:39.150 --> 00:14:44.510
for now you can just keep in mind that there is something else in the browser, not in the Javascript engine,

191
00:14:44.520 --> 00:14:47.130
the engine is really just that heap stack thing

192
00:14:47.130 --> 00:14:51.840
but in the browser which communicates with the engine of course which is this event loop and in the

193
00:14:51.840 --> 00:14:58.950
end, you can imagine these click listeners as information being passed to the browser,

194
00:14:58.980 --> 00:15:03.300
so therefore the Javascript engine does not care at all about these ongoing listeners,

195
00:15:03.300 --> 00:15:10.440
the browser manages them and the browser basically pings the Javascript engine you could say whenever

196
00:15:10.530 --> 00:15:15.960
it has a new event being fired by the listeners set up by the Javascript code.

197
00:15:15.960 --> 00:15:21.510
So the browser kind of manages these listeners and whenever such a listener triggers, whenever a button

198
00:15:21.510 --> 00:15:26.040
is clicked which of course is part of the web page rendered by the browser, so the browser knows when

199
00:15:26.040 --> 00:15:31.530
that happens, whenever that happens, it basically pushes that information to your script

200
00:15:31.530 --> 00:15:38.340
you could say and it does so with the help of that event loop which is there to control that this pushed

201
00:15:38.430 --> 00:15:44.310
event does not interrupt with your ongoing script which might be running but instead is executed in

202
00:15:44.310 --> 00:15:44.930
order

203
00:15:44.970 --> 00:15:46.740
once your call stack is empty

204
00:15:46.920 --> 00:15:52.200
but again we'll have a detailed look at this event loop thing in a later module after we learned about

205
00:15:52.260 --> 00:15:57.060
asynchronous code. The Javascript engine itself is this heap and stack thing here.
