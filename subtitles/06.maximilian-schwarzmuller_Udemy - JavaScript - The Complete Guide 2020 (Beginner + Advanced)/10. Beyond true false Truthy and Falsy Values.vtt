WEBVTT
1
00:00:02.290 --> 00:00:08.130
Now in Javascript, you also have a concept which is called falsy and truthy values.

2
00:00:08.170 --> 00:00:11.760
Now we learned about false and true which were these boolean values,

3
00:00:11.770 --> 00:00:18.160
now what's falsy and truthy, is this kind of a strange, special extra data type?

4
00:00:18.190 --> 00:00:23.440
No, it's actually just how Javascript under the hood evaluates conditions.

5
00:00:23.440 --> 00:00:30.200
Generally, Javascript conditions work with booleans, true or false but they also work with these falsy

6
00:00:30.240 --> 00:00:31.510
or truthy values,

7
00:00:31.510 --> 00:00:33.000
here's an example.

8
00:00:33.250 --> 00:00:37.210
Let's say you have a constant name input which holds a value of Max,

9
00:00:37.240 --> 00:00:39.160
here it's hardcoded into the code

10
00:00:39.190 --> 00:00:41.790
but of course that could be fetched from an input field on the web page

11
00:00:41.800 --> 00:00:47.410
let's say and then we use this in a condition where I compare the value in name input to the hardcoded

12
00:00:47.410 --> 00:00:48.510
value of Max,

13
00:00:48.520 --> 00:00:53.640
well we know that name input stores Max and therefore this of course would work, to be precise

14
00:00:53.650 --> 00:00:56.140
this condition yields true in this example here,

15
00:00:56.350 --> 00:00:59.220
so it yields a boolean value and therefore this of course works,

16
00:00:59.230 --> 00:01:01.750
that's what we saw thus far.

17
00:01:01.750 --> 00:01:04.260
Now consider this code snippet here.

18
00:01:04.510 --> 00:01:07.360
We again have name input which holds Max,

19
00:01:07.450 --> 00:01:11.480
in this case hardcoded but could be fetch from the input field on a web page

20
00:01:11.560 --> 00:01:16.810
but now in the if condition, I don't compare name and put to any concrete value, I just have

21
00:01:16.840 --> 00:01:22.920
if name input here and this name input constant here of course holds a string, not a boolean, right?

22
00:01:22.990 --> 00:01:24.610
We initialize it one line above it,

23
00:01:24.640 --> 00:01:26.520
so this holds a string, not a boolean

24
00:01:26.710 --> 00:01:32.980
and still this works and this works because Javascript tries to coerce values to a boolean value

25
00:01:32.980 --> 00:01:37.150
if a boolean is required as it is the case in an if statement. So yes,

26
00:01:37.150 --> 00:01:43.480
if statements work with booleans but Javascript tries to convert a value to a boolean if it doesn't

27
00:01:43.480 --> 00:01:48.110
get a boolean comparison and also not a boolean itself.

28
00:01:48.160 --> 00:01:53.980
So for example, if you have a variable which you pass into an if condition which you don't compare to anything

29
00:01:54.010 --> 00:02:00.370
but you just say if that variable and that variable holds a value of zero, then this will actually be

30
00:02:00.370 --> 00:02:01.730
treated as false,

31
00:02:01.810 --> 00:02:05.010
so zero is treated as false in a condition.

32
00:02:05.290 --> 00:02:09.870
Any other number, including negative numbers on the other hand are treated as true,

33
00:02:10.030 --> 00:02:14.260
so zero is kind of a special case which Javascript treats as false.

34
00:02:14.260 --> 00:02:16.070
Now when might this come in handy?

35
00:02:16.390 --> 00:02:21.480
Let's say you're doing some division and you don't want to divide by zero.

36
00:02:21.490 --> 00:02:26.740
Now let's say the value is provided by the user, the user enters a value in the input and you want

37
00:02:26.740 --> 00:02:29.290
to make sure that you don't divide by zero.

38
00:02:29.320 --> 00:02:36.550
Of course you could check if user input is equal to zero and if it is, you return or you just use that

39
00:02:36.550 --> 00:02:44.630
shortcut of just plugging in the variable name and actually again, our calculator is a great example.

40
00:02:44.650 --> 00:02:52.740
It actually never makes sense in our calculator if the user enters 0 here - adding 0, subtracting 0

41
00:02:53.320 --> 00:02:56.810
or multiplying or dividing by zero doesn't really make sense,

42
00:02:56.830 --> 00:03:01.960
you could say multiplying resets it but let's say we don't want to have that case and dividing would

43
00:03:01.960 --> 00:03:05.280
even be illegal, it's not allowed to divide by zero.

44
00:03:05.320 --> 00:03:10.600
So what we could do in the calculator here, in the calculate result function, besides checking our cases

45
00:03:10.620 --> 00:03:11.330
here,

46
00:03:11.440 --> 00:03:16.780
we could also make sure that we return if and now we can actually use the or operator here

47
00:03:16.780 --> 00:03:23.690
if the entered number and for that, we just have to extract it before we run that code here.

48
00:03:23.700 --> 00:03:29.550
So if the entered number here is equal to zero, of course we could do that.

49
00:03:29.550 --> 00:03:35.970
What this would now do is it means we would return right away if either the calculation type is not add,

50
00:03:35.970 --> 00:03:41.340
not subtract, not multiply and not divide or if the entered number is zero,

51
00:03:41.400 --> 00:03:49.430
so let's test this. If we reload this page, of course everything works here but if I enter a zero here, you'll

52
00:03:49.440 --> 00:03:52.830
see our output doesn't change down there,

53
00:03:52.830 --> 00:03:53.850
so that works.

54
00:03:56.560 --> 00:03:56.920
Now

55
00:03:56.950 --> 00:04:05.140
again we can do that but we can also say if entered number or to be precise, since this would be treated

56
00:04:05.140 --> 00:04:11.980
as true, if it's anything but zero, we can add an exclamation mark in front of this. Now this might look strange

57
00:04:11.980 --> 00:04:18.430
at first but what this says is if not entered number. You might remember that slide at the very bottom

58
00:04:18.430 --> 00:04:19.630
here, the exclamation mark

59
00:04:19.630 --> 00:04:21.880
operator, that's what we're using here.

60
00:04:21.880 --> 00:04:23.980
This negates a value and checks

61
00:04:24.010 --> 00:04:33.720
if it's not true. So in this case, entered number if it's 0 is treated as false by Javascript, it's falsy

62
00:04:33.750 --> 00:04:37.540
and therefore by adding an exclamation mark in front of it,

63
00:04:37.580 --> 00:04:43.390
we kind of invert that value, we say if that's not the case, then we want to make it in here.

64
00:04:44.080 --> 00:04:53.790
Now since zero if the user entered zero is treated as false, this means if not false which is true, then execute

65
00:04:53.790 --> 00:04:54.710
this code.

66
00:04:54.810 --> 00:05:02.010
So if entered number is a falsy value, then not falsy will return true

67
00:05:02.040 --> 00:05:03.740
and if we return true here,

68
00:05:03.780 --> 00:05:08.860
well then we make it into this if block and therefore we return from this function and we don't execute

69
00:05:08.860 --> 00:05:16.580
the function. If entered number is any other number but zero including negative numbers, then it's truthy

70
00:05:16.650 --> 00:05:20.960
and then with the exclamation mark in front of it, it's converted to false,

71
00:05:20.970 --> 00:05:26.820
so if false will never execute the code in there right because this code only executes if this first

72
00:05:26.820 --> 00:05:32.010
condition is true and therefore we don't make it in here and we don't skip function execution by returning

73
00:05:32.040 --> 00:05:32.750
early.

74
00:05:32.820 --> 00:05:36.960
This is how this works and this is the idea behind the truthy and falsy values,

75
00:05:36.960 --> 00:05:42.320
you don't always have to make an explicit comparison with the equal or greater than operators,

76
00:05:42.330 --> 00:05:49.020
you can also just throw in the variable or the value which you're interested in and then just take this

77
00:05:49.080 --> 00:05:55.350
as a condition itself and if it doesn't hold true or false, Javascript tries to convert it to true or

78
00:05:55.350 --> 00:05:59.040
false and there, zero is treated as false,

79
00:05:59.040 --> 00:06:04.270
any other number is treated as true. Now for strings, an empty string is treated as false,

80
00:06:04.290 --> 00:06:11.310
any other string is treated as true and for objects and arrays, it's important to understand that all

81
00:06:11.340 --> 00:06:15.360
objects and arrays, even empty ones are always treated as true.

82
00:06:15.360 --> 00:06:19.760
So an empty object is not treated as false, it's always treated as true

83
00:06:19.770 --> 00:06:27.120
no matter if there is data in it or not. Null, undefined and not a number by the way are always treated as false.

84
00:06:27.210 --> 00:06:31.520
So these are the truthy and falsy values

85
00:06:31.530 --> 00:06:36.510
you can keep in mind, you can take that slide, it's attached and kind of print it out and put it next

86
00:06:36.510 --> 00:06:37.580
to your desk,

87
00:06:37.590 --> 00:06:44.190
these are the special cases in Javascript if you just throw in a single value or just a variable with

88
00:06:44.190 --> 00:06:48.400
a value in it into an if condition without a comparison operator,

89
00:06:48.410 --> 00:06:54.900
so without the equal sign or the greater than operator, so just the variable like this, then Javascript

90
00:06:54.900 --> 00:07:00.780
will look into the variable or look into the value and if it's not true or false already, it will try

91
00:07:00.780 --> 00:07:02.530
to convert it to true or false

92
00:07:02.610 --> 00:07:04.780
and this is how it then does it.

93
00:07:04.920 --> 00:07:11.570
Now that's it for our calculator and for the basics about if statements, before we advance to loops

94
00:07:11.570 --> 00:07:16.530
I'd say it's definitely time to work more with if statements to get a better feeling for them,

95
00:07:16.550 --> 00:07:21.590
for the comparison operators, for booleans and for all these things which we used a bit here but which is

96
00:07:21.590 --> 00:07:24.650
still brand new and therefore definitely needs more practice

97
00:07:24.740 --> 00:07:27.830
so that you feel confident using if statements in your code.
