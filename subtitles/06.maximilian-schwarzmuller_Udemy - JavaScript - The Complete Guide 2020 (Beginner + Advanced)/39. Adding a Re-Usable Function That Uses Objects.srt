1
00:00:02,470 --> 00:00:09,220
So it would be nice to generate similar log entries for subtraction, multiplication and so on

2
00:00:09,280 --> 00:00:16,720
and of course that means we can grab that code here and copy that over to subtract, use subtract here

3
00:00:17,290 --> 00:00:18,650
as an identifier

4
00:00:18,730 --> 00:00:20,670
and that actually is all we need to adjust

5
00:00:20,680 --> 00:00:24,070
but again, that means we're duplicating code here.

6
00:00:24,070 --> 00:00:28,720
Now we already have one thing in common in all these functions here,

7
00:00:28,720 --> 00:00:32,930
we call create and write output.

8
00:00:32,940 --> 00:00:38,960
Now why don't we create a similar function for creating our log?

9
00:00:39,090 --> 00:00:48,150
So I'll add a new function here where I say write to log and this expects to get the let's say operation

10
00:00:48,270 --> 00:00:54,450
identifier or whatever you want to call it, the previous result,

11
00:00:57,020 --> 00:01:00,200
the operation number if you want to call it like this,

12
00:01:00,210 --> 00:01:03,660
so the number we used in the operation and the new result.

13
00:01:03,690 --> 00:01:05,950
Now these are very long names here

14
00:01:06,580 --> 00:01:07,770
and to make this easier to read,

15
00:01:07,800 --> 00:01:13,410
I'll now actually all the split this in multiple lines with the code formatting shortcut, my IDE actually

16
00:01:13,410 --> 00:01:14,510
does this automatically,

17
00:01:14,520 --> 00:01:16,080
you can do that without issues,

18
00:01:16,080 --> 00:01:19,410
Javascript understands this, you can write multiline code.

19
00:01:19,410 --> 00:01:24,360
You have commas between your arguments here and therefore Javascript is able to understand where your

20
00:01:24,360 --> 00:01:29,490
function parameter lists starts, here with the opening parentheses and where it ends,

21
00:01:29,490 --> 00:01:31,520
and you can write it across multiple lines,

22
00:01:31,530 --> 00:01:35,360
It's not a must do but I'd say it's a bit easier to read.

23
00:01:35,460 --> 00:01:39,170
So that's my write to log function which gets all these arguments.

24
00:01:39,330 --> 00:01:42,670
Now in the function body, I in the end want to do what I did here,

25
00:01:42,780 --> 00:01:48,290
so I'll cut that code from add and add it here, create the log entry

26
00:01:48,540 --> 00:01:53,470
and now of course all the values I use here are the values I'm getting here as parameters.

27
00:01:53,550 --> 00:01:57,160
So for operation, I use my operation identifier,

28
00:01:57,180 --> 00:02:02,320
so this argument I'm getting here, for previous result, I use previous result.

29
00:02:02,340 --> 00:02:06,490
So here I have the same name for the argument I'm getting,

30
00:02:06,540 --> 00:02:12,630
as for the key I'm using in the object, you can do that, you can avoid it if you prefer, it won't clash

31
00:02:12,660 --> 00:02:16,200
because of course these are two totally different places where you use it,

32
00:02:16,200 --> 00:02:21,600
so here Javascript knows that this here on the left side of the colon is an identifier in the newly

33
00:02:21,600 --> 00:02:22,840
created object

34
00:02:23,010 --> 00:02:27,410
and it would never look for a variable of that name because you can't use a variable here

35
00:02:27,520 --> 00:02:29,620
and on the right side it knows it needs a value,

36
00:02:29,760 --> 00:02:34,920
so it looks for a valid value and it could be something hardcoded like some string you enter in place

37
00:02:35,310 --> 00:02:37,710
or it could be a variable that holds a value.

38
00:02:37,710 --> 00:02:43,170
So here, Javascript will look for a variable or in this case, for a parameter which is like a variable

39
00:02:43,350 --> 00:02:50,060
and therefore it will take that variables or that arguments value. For number, I want to use operation number

40
00:02:50,930 --> 00:02:57,000
and for result, of course new result and now this is added and I also log this

41
00:02:57,020 --> 00:03:01,630
and now we just need to call write to log and provide all these pieces of information,

42
00:03:01,640 --> 00:03:10,390
so these four arguments. So here in add, we can call write to log like this and now the identifier could be

43
00:03:10,480 --> 00:03:17,380
add, then our previous result and my IDE here gives me some autocompletion support to tell me which

44
00:03:17,380 --> 00:03:20,500
value for which parameter I now need to enter.

45
00:03:20,500 --> 00:03:25,960
So here for previous result, that would be the initial result variable value which I have stored here

46
00:03:26,020 --> 00:03:31,510
so that this is provided to the function. For the operation number, that would be the entered number which

47
00:03:31,510 --> 00:03:39,010
I want to pass into the write to log function and for the new result, that would be current result

48
00:03:39,010 --> 00:03:40,120
at this point of time,

49
00:03:40,150 --> 00:03:40,380
right

50
00:03:40,390 --> 00:03:41,710
because we change it here,

51
00:03:41,710 --> 00:03:48,380
so two lines thereafter it's still the same result and therefore I pass this to the write to log function.

52
00:03:48,380 --> 00:03:53,100
And now we can copy that and call that here in subtract as well,

53
00:03:53,230 --> 00:03:59,270
leave everything as it is but change the identifier and do the same here for multiply.

54
00:03:59,290 --> 00:04:02,680
So here I'll add multiply as an identifier

55
00:04:02,980 --> 00:04:08,340
and of course do the same here for the division and add divide as an identifier

56
00:04:08,500 --> 00:04:15,700
and now we're reusing this write to log function to create our log object with different dynamic data

57
00:04:15,730 --> 00:04:21,880
which we add in which we get as parameters in the function, which we then use to build that object which

58
00:04:21,880 --> 00:04:25,700
we then add to our array, which we then log to the console.

59
00:04:26,380 --> 00:04:27,510
So let's give that a try,

60
00:04:27,520 --> 00:04:31,280
let's save that and reload and now deduct five,

61
00:04:31,310 --> 00:04:37,470
so with minus five here we have an entry in the array and we see the operation was subtract, previous result

62
00:04:37,480 --> 00:04:39,180
was zero, number

63
00:04:39,280 --> 00:04:42,720
now is five or was five, result is minus five.

64
00:04:43,240 --> 00:04:48,040
If I try to multiply this with seven, we get a new entry in the array,

65
00:04:48,130 --> 00:04:49,170
this one is it.

66
00:04:49,390 --> 00:04:51,000
Previous result minus five,

67
00:04:51,010 --> 00:04:52,690
number seven, we multiplied it

68
00:04:52,690 --> 00:04:55,590
so the new result is minus 35

69
00:04:55,650 --> 00:05:04,950
and now if I divide this by let's say 2, we got a new output here. Divide, number is two, previous result

70
00:05:04,950 --> 00:05:08,340
is minus 35, 

71
00:05:08,800 --> 00:05:13,640
therefore the new result is therefore half of that minus 17.5.

72
00:05:13,690 --> 00:05:18,850
So that all seems to work, we're able to log that, we're able to reuse that logic and we're able to do

73
00:05:18,850 --> 00:05:21,790
this basic work with our Javascript object here.
