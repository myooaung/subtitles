1
00:00:02,290 --> 00:00:04,290
So what is performance?

2
00:00:04,360 --> 00:00:10,480
Now when we think about performance in the context of a web site we're visiting, performance can be a

3
00:00:10,480 --> 00:00:12,140
lot of different things

4
00:00:12,250 --> 00:00:18,670
but I think there are two main categories into which we can split this term performance.

5
00:00:18,670 --> 00:00:25,210
We can have a look at the startup time of a web site, of a web application and we can have a look at

6
00:00:25,210 --> 00:00:30,910
the runtime performance because these are really two different things that of course in the end work

7
00:00:30,910 --> 00:00:39,280
together end and which both matter. Startup time is all about the question how long does it take to see something

8
00:00:39,280 --> 00:00:44,290
on the screen and how quickly is a user able to interact with the page,

9
00:00:44,320 --> 00:00:51,460
we all know how it feels like when we visit a page which is slow, which takes forever to load or which

10
00:00:51,460 --> 00:00:54,230
at some point seems like it loaded

11
00:00:54,310 --> 00:00:57,310
but when we try to click something, nothing happens,

12
00:00:57,340 --> 00:01:05,200
so we all know that and therefore this is of course one important part. But then once a page did load, of course

13
00:01:05,200 --> 00:01:10,520
it should also offer a great performance and also avoid certain bugs.

14
00:01:10,750 --> 00:01:14,590
Here the question is how is smooth the application runs in general,

15
00:01:14,590 --> 00:01:17,370
does it occasionally freeze or lag?

16
00:01:17,380 --> 00:01:23,800
We of course don't like visiting pages where we for example try to enter some text into a text box and

17
00:01:24,250 --> 00:01:30,760
it takes us forever to do so because our input is only picked up with a lag, especially web sites or

18
00:01:30,760 --> 00:01:37,240
web applications, I use these terms interchangeably as you can tell, with a lot of animations could

19
00:01:37,570 --> 00:01:43,810
end up in a state where we have a lot of visual lag, a lot of visual change where the animations don't

20
00:01:43,810 --> 00:01:50,530
play smoothly or anything like that or where a running animation prevents us from doing anything else

21
00:01:51,430 --> 00:01:57,190
or of course we could have a web site with certain memory leaks which add up over time,

22
00:01:57,190 --> 00:02:04,200
so where some part of the code is buggy and actually occupies more and more memory the more often it

23
00:02:04,210 --> 00:02:13,270
runs and depending on the device you're running this website on, eventually the device or the page might

24
00:02:13,270 --> 00:02:16,970
run out of memory and the browser might shut it down therefore,

25
00:02:17,080 --> 00:02:23,440
so that of course is also something we want avoid but it's also important to understand that performance

26
00:02:23,440 --> 00:02:30,040
is not just about Javascript but about everything that's involved when it comes to visiting and

27
00:02:30,040 --> 00:02:31,360
using a web page.

28
00:02:31,420 --> 00:02:37,050
It's influenced by a lot of factors, the CSS code and HTML code also play a role.

29
00:02:37,180 --> 00:02:45,130
If you have very complex CSS selectors, that takes the browser longer to apply styling. If you have a

30
00:02:45,130 --> 00:02:51,790
lot of unnecessary HTML code, that is more code which needs to be downloaded initially hence slowing

31
00:02:51,790 --> 00:02:53,140
down the startup time

32
00:02:53,230 --> 00:02:59,470
but of course Javascript is a major factor because that influences a lot of the parts related to runtime

33
00:02:59,470 --> 00:03:00,430
performance

34
00:03:00,430 --> 00:03:06,290
and if you're downloading a lot of Javascript code, it of course also influences the startup time negatively.

35
00:03:06,730 --> 00:03:12,130
Also of course the speed of the server you're hosting your web site on, as well as the configuration

36
00:03:12,130 --> 00:03:15,650
of the server can have a negative impact on your users.

37
00:03:15,790 --> 00:03:22,900
If you have a server that resides in the US and you have a lot of users from let's say India,

38
00:03:22,900 --> 00:03:27,640
well it simply takes you a bit longer to get your data from the server.

39
00:03:27,640 --> 00:03:32,580
Now of course we're talking about milliseconds here and it might not really have an impact

40
00:03:32,710 --> 00:03:38,290
but the bigger your application is, the more users you're reaching, the more you want to think about all

41
00:03:38,290 --> 00:03:43,720
the factors that influence performance or that could potentially influence performance and optimize

42
00:03:43,720 --> 00:03:44,310
them.

43
00:03:44,380 --> 00:03:49,690
In this module however, I will focus on the Javascript performance part but I want to put that out

44
00:03:49,690 --> 00:03:53,650
there that there are other factors which also play a role.

45
00:03:53,770 --> 00:03:59,980
Now when we talk about Javascript performance, what influences our performance there? When we think about

46
00:03:59,980 --> 00:04:02,710
our Javascript execution,

47
00:04:02,710 --> 00:04:05,470
of course here again we have two different areas,

48
00:04:05,470 --> 00:04:07,130
we have the startup time,

49
00:04:07,270 --> 00:04:13,730
the question here is how fast the script loads and is able to execute and we have the runtime performance

50
00:04:13,750 --> 00:04:15,960
and here it's all about the work

51
00:04:15,970 --> 00:04:19,960
the script has to do and how efficiently it does that work

52
00:04:20,110 --> 00:04:25,210
and it's not just about the work the script does on its own but also about the interactions with our

53
00:04:25,210 --> 00:04:26,650
other web page,

54
00:04:26,650 --> 00:04:34,090
when you work with the DOM for example, when you add and remove HTML elements via Javascript, that can

55
00:04:34,090 --> 00:04:38,530
have a negative impact on the overall web application performance

56
00:04:38,530 --> 00:04:43,780
if you doing this in a poor way and I'll come back to that in this module and of course we have this

57
00:04:43,780 --> 00:04:49,930
memory thing. You want to avoid memory leaks to make sure that you're not slowing down the application

58
00:04:49,930 --> 00:04:56,860
over time or that you even have the worst case scenario of the browser shutting down your application.

59
00:04:56,860 --> 00:05:00,960
Now also it's important to understand that I talked about the browser here,

60
00:05:01,000 --> 00:05:06,910
I talked about the DOM but of course Javascript as you'll learned does not just run in the browser.

61
00:05:07,000 --> 00:05:12,820
Now the startup time, that's really a thing that is primarily related to the browser side because when

62
00:05:12,820 --> 00:05:20,350
we're talking about server side Javascript with Node.js, then there is no download delay or anything

63
00:05:20,350 --> 00:05:21,060
like that,

64
00:05:21,100 --> 00:05:25,160
The code already is on the server where it will get executed,

65
00:05:25,210 --> 00:05:31,420
so that whole startup time thing is less of an issue on the server side because all the code is already

66
00:05:31,420 --> 00:05:32,110
there

67
00:05:32,290 --> 00:05:37,900
so therefore it can be executed very efficiently and quickly by default.

68
00:05:37,900 --> 00:05:43,990
But when we talk about runtime performance, that affects all Javascript environments, all places where

69
00:05:43,990 --> 00:05:45,490
we can execute Javascript.

70
00:05:45,700 --> 00:05:49,890
Of course there are certain problems which can only occur in the browser,

71
00:05:49,930 --> 00:05:57,010
for example when we talk about DOM interaction but there also are other parts, other things about Javascript

72
00:05:57,250 --> 00:06:01,000
which apply to both browser side and server side Javascript.

73
00:06:01,180 --> 00:06:06,610
In this modular, I will focus on the browser side because there we actually have more pitfalls but we'll

74
00:06:06,610 --> 00:06:13,840
also have a look at certain things which you will see really affect any Javascript code no matter where

75
00:06:13,840 --> 00:06:14,470
it runs.
