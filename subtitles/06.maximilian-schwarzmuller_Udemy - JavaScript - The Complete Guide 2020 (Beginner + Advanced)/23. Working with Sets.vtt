WEBVTT
1
00:00:02.300 --> 00:00:10.900
For that, I'll create a brand new script file, setsmaps.js because the other file is pretty crowded

2
00:00:10.900 --> 00:00:18.130
already and I want to have a clean one and import setsmaps therefore and not the app.js file anymore.

3
00:00:18.130 --> 00:00:21.720
So with that imported in here, let's start with sets.

4
00:00:21.880 --> 00:00:26.740
Let's create a new set of let's say IDs because that is a super example,

5
00:00:26.740 --> 00:00:31.420
IDs should be unique and therefore you might want to store them in a data structure where you can't

6
00:00:31.420 --> 00:00:37.990
have any duplicates. You create a new set always with new set,

7
00:00:38.110 --> 00:00:43.690
you saw new array earlier and there I told you that this is not a great idea and you should use square

8
00:00:43.690 --> 00:00:44.800
brackets instead,

9
00:00:44.830 --> 00:00:49.300
well you have nothing similar, for sets there you have to use new set.

10
00:00:49.300 --> 00:00:52.130
Now you can create a set like this which would be an empty set,

11
00:00:52.700 --> 00:00:57.550
let's log it to get a feeling for how that looks like, if we save it and reload,

12
00:00:57.550 --> 00:01:04.630
this is how it looks like, an empty set and you can alternatively also initialize it by passing in an

13
00:01:04.630 --> 00:01:13.010
existing iterable, any iterable goes. So it can be an array, can be another set, can be a node list.

14
00:01:13.090 --> 00:01:19.020
So here I'll pass in 1, 2, 3, an array with the values 1, 2, 3 and save that

15
00:01:19.030 --> 00:01:22.820
and if we reload, now indeed we have that in the set.

16
00:01:22.840 --> 00:01:25.570
Now here we see index values, 0, 1, 2

17
00:01:25.720 --> 00:01:31.000
but we don't really have access through these values. If we try to access this index 1 let's say, like

18
00:01:31.000 --> 00:01:36.160
that, you will see that this returns undefined, so this doesn't work,

19
00:01:36.190 --> 00:01:42.850
it's just here in the console. Instead to retrieve a value from the set, you can use one of these specific set

20
00:01:42.850 --> 00:01:47.890
methods which you see if you type a dot here and then you get this auto completion. You got add to add

21
00:01:47.890 --> 00:01:53.860
a new entry, clear to clear all entries, delete to delete a single entry entries which we'll have a look

22
00:01:53.860 --> 00:01:58.360
at in a second. ForEach has keys, values and so on.

23
00:01:58.360 --> 00:02:04.000
Now what you don't have here is a method to get a value, there is no get method or anything like

24
00:02:04.000 --> 00:02:04.780
that.

25
00:02:04.990 --> 00:02:10.660
Well if you think about a set, since every value can only be stored once there, you typically don't

26
00:02:10.660 --> 00:02:12.700
want to retrieve a value from there,

27
00:02:12.700 --> 00:02:15.130
instead you can check if it has a certain value,

28
00:02:15.160 --> 00:02:21.040
if one is stored in there and if it is, well in your subsequent code that depends on this existence in

29
00:02:21.040 --> 00:02:22.150
the set,

30
00:02:22.210 --> 00:02:27.730
you can just continue with one, you can just use this value of one because you know it's in the set.

31
00:02:27.850 --> 00:02:33.460
This will return true or false and therefore you can use it in if checks or ternary expressions

32
00:02:33.520 --> 00:02:35.320
and this is how you work with a set,

33
00:02:35.320 --> 00:02:41.760
it's a data storage that basically tells you whether it contains something or not. Now interesting is

34
00:02:41.760 --> 00:02:48.490
if we add a value, let's say we add two here which is a value that already is part of the set here.

35
00:02:48.510 --> 00:02:53.930
So if I now check if it has two and I reload, I get true

36
00:02:54.610 --> 00:02:57.250
but we don't know how often it is stored in there.

37
00:02:57.250 --> 00:02:59.590
Well, let's again log the entire set

38
00:02:59.590 --> 00:03:04.670
therefore to get a view into it and indeed we see, it still has only three elements,

39
00:03:04.690 --> 00:03:08.470
the value of two still only exists once in there

40
00:03:08.470 --> 00:03:14.080
and the reason for that simply is that as I mentioned on the slide, in a set a value is guaranteed to

41
00:03:14.080 --> 00:03:15.690
be unique.

42
00:03:15.700 --> 00:03:23.500
Now if you would want to go through all elements in a set, you can do that with ids.entries. 

43
00:03:23.510 --> 00:03:30.430
ids.entries, entries is a method which you can execute and it returns, as you can see, an iterable, which

44
00:03:30.430 --> 00:03:32.260
means you can use it in a for loop,

45
00:03:32.260 --> 00:03:41.770
in a for/of loop, so you can go through entry of ids.entries and console log entry here like that. If

46
00:03:41.770 --> 00:03:48.880
you do that and you reload, you see what you get is actually a couple of arrays which look quite strange

47
00:03:48.880 --> 00:03:50.410
here with these numbers,

48
00:03:50.410 --> 00:03:57.770
it gets clearer what these arrays mean if we change 1, 2, 3 here to different values like hi, from,

49
00:03:59.000 --> 00:04:02.480
set which is of course not your typical set usage I guess

50
00:04:02.480 --> 00:04:06.210
but let's say you want to guarantee that each word is only part of the set once.

51
00:04:06.320 --> 00:04:08.750
If we save that and we reload,

52
00:04:08.750 --> 00:04:14.620
now we see this output here - hi, from, set and then 2, 2 here because I add this there,

53
00:04:14.630 --> 00:04:15.280
right

54
00:04:15.290 --> 00:04:19.080
and as you can see therefore, we can have mixed value types in a set.

55
00:04:19.100 --> 00:04:21.180
So what do we actually get here?

56
00:04:21.230 --> 00:04:26.450
We got something where we have the value twice basically,

57
00:04:26.450 --> 00:04:28.630
well that's just what entries returns.

58
00:04:28.790 --> 00:04:37.190
It returns an iterable of arrays where you always have exactly two entries or elements per entry I

59
00:04:37.190 --> 00:04:38.090
should say

60
00:04:38.090 --> 00:04:41.650
and that's simply the value twice which might sound strange,

61
00:04:41.660 --> 00:04:42.890
why would you have it twice?

62
00:04:42.890 --> 00:04:47.270
Why would it give you these arrays where you have the same value twice?

63
00:04:47.270 --> 00:04:53.150
Well this is there to be in line with the entries method on the map which we'll also later see where you

64
00:04:53.150 --> 00:04:56.300
also get two values but there, they will be different.

65
00:04:56.300 --> 00:05:02.330
So I guess the idea here was that you could easily swap a set for a map and keep your other code in

66
00:05:02.330 --> 00:05:08.150
place and therefore have the same signature here, where you get an entry with exactly two elements,

67
00:05:08.150 --> 00:05:12.620
even though for a set, entry is an array of the same value twice.

68
00:05:12.620 --> 00:05:17.150
So it's just a bit confusing right now, in the end if you want to through all values, you can just access

69
00:05:17.150 --> 00:05:21.230
the first element in the entry, since the second one is exactly the same, you could of course use that

70
00:05:21.230 --> 00:05:25.580
as well and you then log all the values you have in that set.

71
00:05:25.730 --> 00:05:30.140
So this allows you to read the values from a set and not just get the information whether something

72
00:05:30.140 --> 00:05:32.010
is part of it or not

73
00:05:32.030 --> 00:05:34.210
and with that, you can manage the set.

74
00:05:34.220 --> 00:05:39.230
Now if you want to delete something, you can also do this, for example with the delete method and then

75
00:05:39.230 --> 00:05:44.930
enter the value you want to delete, like hi which should delete the string. If you try to delete something

76
00:05:44.930 --> 00:05:50.020
which is not part, you'll not get an error as you see but it will just not do anything,

77
00:05:50.030 --> 00:05:54.160
it's basically ignored. The same as if you add a value which is already part,

78
00:05:54.260 --> 00:05:56.830
you don't get an error, it's just ignored

79
00:05:56.930 --> 00:06:02.870
but of course you typically want to delete what you have and you could always check if IDs has hi

80
00:06:03.080 --> 00:06:09.350
before you try deleting it, though since this won't throw an error if it fails, there might not be a need

81
00:06:09.350 --> 00:06:11.120
to perform this extra check.

82
00:06:11.210 --> 00:06:16.700
Still here to also show the has method, this is how we could ensure that we only try to delete what's

83
00:06:16.700 --> 00:06:18.280
part of that set.

84
00:06:18.320 --> 00:06:24.230
So now with that since I'm deleting hi, if I reload this, hi should no longer be output there because

85
00:06:24.230 --> 00:06:32.250
it's no longer part of the set. So to summarize, sets are a data structure or are data structures which

86
00:06:32.250 --> 00:06:38.030
help you manage unique values and in some cases, that can be useful.

87
00:06:38.040 --> 00:06:43.320
Now as I mentioned earlier already, the array is the most important data structure, so you will probably

88
00:06:43.320 --> 00:06:49.320
not use sets everywhere but if you have an application, a more complex application where you want to

89
00:06:49.320 --> 00:06:56.580
manage let's say ID which are already in use by logged in users, then you could use a set to keep track

90
00:06:56.580 --> 00:07:01.710
of these IDs and you might want to use a set instead of an array because you want to ensure that a

91
00:07:01.710 --> 00:07:06.830
single ID can't be part of the set more than once so that it doesn't get too big,

92
00:07:06.830 --> 00:07:10.790
doesn't consume too much memory or leads to other logical errors

93
00:07:10.800 --> 00:07:16.440
you might have in your code. So sets are great if you need uniqueness amongst your data.

94
00:07:16.440 --> 00:07:17.490
So that's sets,

95
00:07:17.490 --> 00:07:18.780
what about maps?
