1
00:00:02,350 --> 00:00:08,450
Now back in our little project, the monster killer project, let's simulate such a problem.

2
00:00:08,500 --> 00:00:15,450
We do get some user input here actually, we get that entered value and I already do some validation here,

3
00:00:15,460 --> 00:00:21,490
we check whether what the user entered can be used as a maximum life,

4
00:00:21,490 --> 00:00:26,960
so if it's bigger than zero and if it is a number to begin with, after converting it to a number.

5
00:00:27,190 --> 00:00:34,390
Now the kind of sad thing here, in quotes because it's actually good of course is that parseInt doesn't

6
00:00:34,390 --> 00:00:35,400
throw an error

7
00:00:35,440 --> 00:00:41,230
if the user enters something invalid. In other programming languages, that could be the case but Javascript

8
00:00:41,230 --> 00:00:42,910
is really forgiving here

9
00:00:42,910 --> 00:00:48,640
and if you enter something that can't be converted to an integer or to a number here, well then you don't

10
00:00:48,640 --> 00:00:54,130
get an error, you don't get a system error that crashes your script but instead parseInt generates

11
00:00:54,130 --> 00:00:58,080
this NAN value which we check for with isNan.

12
00:00:58,080 --> 00:01:04,660
So this doesn't really produce an error but here to continue and show you try catch, I want to have

13
00:01:04,660 --> 00:01:05,770
a real error

14
00:01:05,950 --> 00:01:11,170
ANd the good thing is we can create and throw our own errors and whilst it might sound strange that

15
00:01:11,170 --> 00:01:16,720
you want to do that in your code, you have to keep in mind that with Javascript, you can write very big

16
00:01:16,720 --> 00:01:23,380
applications spanning across multiple files and indeed you might want to throw an error in some parts

17
00:01:23,380 --> 00:01:31,120
of your application so that you can use these official error management tools to handle that error instead

18
00:01:31,120 --> 00:01:37,390
of having to write a bunch of if statements in a couple of different places of your code.

19
00:01:37,390 --> 00:01:43,480
So especially in bigger applications, it's quite common that you throw your own errors in some parts

20
00:01:43,480 --> 00:01:44,090
of it

21
00:01:44,170 --> 00:01:50,230
and here we will throw our own error so we can practice with try catch. In other situations which we'll

22
00:01:50,230 --> 00:01:51,220
see later in the course,

23
00:01:51,220 --> 00:01:55,450
for example when communicating to a server, you will automatically get an error

24
00:01:55,450 --> 00:02:01,270
so Javascript or the browser will automatically throw an error if things go wrong, here for this user

25
00:02:01,270 --> 00:02:01,880
input,

26
00:02:01,900 --> 00:02:06,740
this kind of unfortunately isn't the case so we'll do it on our own.

27
00:02:06,770 --> 00:02:09,440
So how can we do it on our own?

28
00:02:09,440 --> 00:02:18,990
Well let's first of all move this logic here where we get that entered value into a function. So I'll cut

29
00:02:19,020 --> 00:02:19,530
that

30
00:02:19,570 --> 00:02:27,190
and then maybe here add a new function which I'll name getMaxLifeValues

31
00:02:27,450 --> 00:02:28,720
and in here I get that

32
00:02:28,720 --> 00:02:32,460
entered value and I try to pass it as an integer

33
00:02:32,710 --> 00:02:38,670
and then here, I'll take that if check and put it in here to validate what the user entered

34
00:02:38,770 --> 00:02:42,360
but then here I'll not set chosenMaxLife to 100

35
00:02:42,400 --> 00:02:45,310
if this is not valid,

36
00:02:45,310 --> 00:02:52,610
instead I will change this to be a constant which I'll name parsed value, something like this, we'll need

37
00:02:52,610 --> 00:03:00,420
that in a second and then outside of that function here, I will add that chosenMaxLife variable which

38
00:03:00,420 --> 00:03:06,690
I'll for now set equal to getMaxLifeValues. So I will call the function here and in that function,

39
00:03:06,720 --> 00:03:09,710
I want to return the parsed value here in the end,

40
00:03:09,720 --> 00:03:10,580
that's the idea

41
00:03:10,890 --> 00:03:17,370
but in this if statement, if we have an invalid value, then I will not return 100 as a fallback value

42
00:03:17,370 --> 00:03:19,060
which we of course could do

43
00:03:19,140 --> 00:03:25,110
but in order to see how you handle errors, I will use another keyword in Javascript which is the throw

44
00:03:25,110 --> 00:03:33,450
keyword which throws a new error and an error can be anything, you can throw a number as an error, a string

45
00:03:34,020 --> 00:03:35,200
or an object

46
00:03:35,200 --> 00:03:38,610
and here I'll throw an object with a message property,

47
00:03:38,640 --> 00:03:46,440
that's kind of the convention, most errors are objects that have a message property where I say invalid

48
00:03:46,470 --> 00:03:49,530
user input, not a number,

49
00:03:49,560 --> 00:03:50,610
something like that.

50
00:03:51,090 --> 00:03:57,510
So now we throw our own error here and the result of that is that if we go back to our application and

51
00:03:57,660 --> 00:04:05,220
we open the developer tools here and I reload and I enter a valid value, then I got a different error,

52
00:04:05,220 --> 00:04:09,180
cannot access chosenMaxLife before initialization.

53
00:04:09,180 --> 00:04:15,210
Yes because here of course, in my if condition here, I should check parsed value, not chosenMaxLife,

54
00:04:15,210 --> 00:04:18,690
since I changed it here we should change it here as well.

55
00:04:18,690 --> 00:04:20,550
So that was not what I wanted to show you,

56
00:04:20,550 --> 00:04:21,720
let's reload,

57
00:04:21,720 --> 00:04:24,810
if I enter 100 hundred instead, this works as before

58
00:04:25,170 --> 00:04:32,130
but if we now reload and I enter hi there which can't be converted to a number, we now get our own custom

59
00:04:32,160 --> 00:04:33,590
error throw here.

60
00:04:33,600 --> 00:04:39,000
You see this is just an error which is our object in the end with that message but it's marked

61
00:04:39,000 --> 00:04:45,420
as red because this indeed is now really an error and it stops our script execution therefore.

62
00:04:45,450 --> 00:04:47,780
So pressing these buttons doesn't do anything,

63
00:04:47,790 --> 00:04:50,120
so we crashed our script. Again

64
00:04:50,310 --> 00:04:55,320
you might want to do that on your own in more complex scripts, so that you can use the error handling

65
00:04:55,320 --> 00:04:57,740
mechanism in different parts of it, here

66
00:04:57,750 --> 00:05:03,450
I'm mostly doing it so that we can now practice with try catch because you will later also work with

67
00:05:03,450 --> 00:05:09,510
other things, like network requests where Javascript itself will throw errors and therefore you need

68
00:05:09,510 --> 00:05:12,620
to be prepared to handle such errors.

69
00:05:12,690 --> 00:05:14,460
So how do we use try catch?
