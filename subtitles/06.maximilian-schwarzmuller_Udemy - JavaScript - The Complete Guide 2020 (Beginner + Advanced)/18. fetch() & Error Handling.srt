1
00:00:02,140 --> 00:00:08,500
So we see that the fetch API thus far is pretty easy to use and it uses promises by default

2
00:00:08,500 --> 00:00:11,220
and actually it only works with promises,

3
00:00:11,380 --> 00:00:15,020
so it looks a lot better than XMLHttpRequest.

4
00:00:15,040 --> 00:00:21,100
Now one downside of it, of the fetch API could be that it doesn't support older browsers but as you

5
00:00:21,100 --> 00:00:25,250
will learn in the browser support module, you might be able to work around that.

6
00:00:25,660 --> 00:00:33,040
A bigger problem or a bigger annoyance at least can be seen when we have a look at error handling,

7
00:00:33,130 --> 00:00:35,190
so let's see what happens there.

8
00:00:35,200 --> 00:00:43,510
Again I'll break my get URL here by simply changing this to a URL which does not exist on the

9
00:00:43,510 --> 00:00:49,870
server we're sending the request to and let's see what happens in that case. If I reload, click fetch

10
00:00:49,870 --> 00:00:51,070
posts,

11
00:00:51,220 --> 00:00:56,110
well at some point we get an error that we can't use the response data.

12
00:00:56,110 --> 00:00:58,720
So of course we work with promises there,

13
00:00:59,110 --> 00:01:06,610
so since this returns a promise, we could use try catch to wrap this all into our try catch block

14
00:01:06,610 --> 00:01:12,250
and do our error handling or if we didn't use aync await, we could use the catch method in our promise

15
00:01:12,250 --> 00:01:12,930
chain.

16
00:01:13,000 --> 00:01:21,040
Now the problem with that just is just like with the XMLHttpRequest, that a request that technically

17
00:01:21,040 --> 00:01:22,110
succeeded,

18
00:01:22,180 --> 00:01:29,080
so where we don't have a technical issue but maybe just a 400 or 500 status code sent back by the server

19
00:01:29,650 --> 00:01:32,470
will not trigger a traditional error.

20
00:01:33,130 --> 00:01:41,140
So if I would to try to add some first error handling here in my sendHttpRequest function, then I could

21
00:01:41,140 --> 00:01:47,080
add a catch method here in my promise chain which I return and keep in mind that this promise chain

22
00:01:47,110 --> 00:01:48,660
itself also returns a promise,

23
00:01:48,670 --> 00:01:55,830
that's how promises work. So here I could then catch any error we might be getting and we could handle

24
00:01:55,830 --> 00:02:03,210
it here, store it in some internal log and then maybe just throw a new error object where I say something

25
00:02:03,210 --> 00:02:07,640
went wrong or maybe we also provide more information than that.

26
00:02:07,650 --> 00:02:12,730
The problem is, we'll never make it into this catch block for the error we currently have,

27
00:02:12,820 --> 00:02:17,160
if I fetch posts again, you see this is coming from a different place,

28
00:02:17,160 --> 00:02:24,630
we got no log coming from line 44, we got the line 56 here. So we don't make it into the catch block

29
00:02:24,630 --> 00:02:30,510
and the reason is the same as with XMLHttpRequest, only technical issues like network connectivity

30
00:02:30,510 --> 00:02:34,060
issues would lead us to go into that catch block,

31
00:02:34,410 --> 00:02:36,800
instead we're here in the then block.

32
00:02:36,870 --> 00:02:45,270
Good thing is just as with XMLHttpRequest, we can check the response status and find out if we have

33
00:02:45,270 --> 00:02:46,150
an error here.

34
00:02:46,710 --> 00:02:56,900
So if response status is greater or equal than 200 and response status is smaller than 300, then

35
00:02:56,900 --> 00:02:59,570
we have a success case and then I want to return response

36
00:02:59,570 --> 00:03:06,260
JSON, else I know we have an error, so else I can throw a new error here,

37
00:03:06,260 --> 00:03:08,660
something went wrong

38
00:03:08,660 --> 00:03:10,790
server side,

39
00:03:11,060 --> 00:03:12,260
anything like that.

40
00:03:12,260 --> 00:03:20,240
So if I save that and I now reload, if I fetch my posts, now we get that correct output but still we

41
00:03:20,240 --> 00:03:21,630
have a problem here.

42
00:03:21,650 --> 00:03:26,360
What if we want to look into the body of our response

43
00:03:26,360 --> 00:03:33,350
because often for server side errors, the server might attach extra information to the response body.

44
00:03:33,590 --> 00:03:37,580
So it's not just about the status code, even in the error case,

45
00:03:37,610 --> 00:03:44,810
we get back a valid response with a response body and we might want to parse that response body to get

46
00:03:44,810 --> 00:03:47,370
the data that the server might have added.

47
00:03:47,480 --> 00:03:52,660
Now in the XMLHttpRequest world, that would have been easy, here in this else case

48
00:03:52,670 --> 00:03:58,170
if we got an error, we could still access xhr.response,

49
00:03:58,250 --> 00:04:03,660
that would be possible here in the XMLHttpRequest world.

50
00:04:03,680 --> 00:04:09,980
Unfortunately that's not the case in the fetch API world. Remember, the body is streamed,

51
00:04:10,010 --> 00:04:13,840
so at this point of time we have no direct access to the body,

52
00:04:13,880 --> 00:04:18,830
we first of all need to call response.json in the error case as well.

53
00:04:19,670 --> 00:04:24,890
So we always need to call that in order to get our data.

54
00:04:24,900 --> 00:04:29,730
Now of course, you could think then I just add an extra step here,

55
00:04:29,850 --> 00:04:31,290
return response.json

56
00:04:31,290 --> 00:04:31,920
here

57
00:04:31,920 --> 00:04:33,620
no matter if it's an error or not

58
00:04:33,930 --> 00:04:40,050
and then I check my response status code in the next then block where I have access to the body data.

59
00:04:40,070 --> 00:04:42,020
The problem just is here

60
00:04:42,210 --> 00:04:46,020
we get the data but we don't have access to the response object anymore,

61
00:04:46,020 --> 00:04:47,940
we only have access to that here.

62
00:04:48,090 --> 00:04:54,690
So the place where we need the status code is a different place than where we get access to the body

63
00:04:55,820 --> 00:04:57,830
and that's the problem we face here.

64
00:04:57,850 --> 00:05:03,000
Essentially we need to write some wrapping code here to make all of that work.

65
00:05:03,150 --> 00:05:10,500
We can say if we have an error, then I want to parse my body with JSON, that yields a new promise and

66
00:05:10,500 --> 00:05:15,290
now we have a promise chain in a promise chain which is never such a great idea

67
00:05:15,750 --> 00:05:25,380
but then here I have access to my error data and now here, I could throw my error and maybe utilize this

68
00:05:25,500 --> 00:05:26,900
extra error data

69
00:05:26,910 --> 00:05:31,710
we might be getting by the server. So let's now give that a try

70
00:05:31,740 --> 00:05:36,100
if I reload and click fetch posts again and now you'll see a different problem,

71
00:05:36,120 --> 00:05:42,930
now we throw the error basically in that nested promise chain, so the outer promise chain doesn't have

72
00:05:42,930 --> 00:05:49,530
an error and hence we again think everything is fine and we try to list our posts and that of course

73
00:05:49,680 --> 00:05:51,150
breaks.

74
00:05:51,150 --> 00:05:55,590
So throwing the error here in the nested promise chain is also not an option,

75
00:05:55,590 --> 00:05:59,990
we need to throw it outside of there but there, we don't have access to the error data

76
00:06:00,020 --> 00:06:01,650
so how can we solve that.

77
00:06:01,650 --> 00:06:07,770
Well we can move that back in there and simply return that inner promise chain so that it is basically

78
00:06:07,770 --> 00:06:12,890
merged into the outer promise chain or now connected to the outer promise chain

79
00:06:12,990 --> 00:06:20,280
and now with that, if I reload and I click fetch posts, now we have the proper error propagation and

80
00:06:20,310 --> 00:06:24,710
we have access to the error data. So it's possible we can solve this but

81
00:06:24,750 --> 00:06:28,920
of course that's not the most beautiful error handling code you ever saw.

82
00:06:28,920 --> 00:06:36,030
It is what it is however with the fetch API and this is how you can use the fetch API and implement proper

83
00:06:36,150 --> 00:06:41,730
error handling, with access to the response body at the same time.

84
00:06:41,730 --> 00:06:46,710
Now with that if I go down here and I re-add try catch here,

85
00:06:46,800 --> 00:06:48,390
let's see if that all works,

86
00:06:48,390 --> 00:06:53,130
if we add this block again, reload, click fetch posts,

87
00:06:53,130 --> 00:06:59,820
now I get something went wrong here as an error alert and we don't try to use the invalid data.

88
00:06:59,820 --> 00:07:06,870
If I on the other hand fix this link again and then I reload, then fetching works again.

89
00:07:06,870 --> 00:07:10,080
So that's the fetch API and how we can handle errors there.
