1
00:00:02,190 --> 00:00:07,500
So we got our hands dirty with TypeScript and we see why typescript might be helpful.

2
00:00:07,500 --> 00:00:13,350
We also already learned about the first type typescript supports and that's the number type and how

3
00:00:13,350 --> 00:00:17,320
we can assign this type to in this case a parameter.

4
00:00:17,340 --> 00:00:24,320
Now before we dive into other types let me also make it clear how else you can work with types and types.

5
00:00:24,390 --> 00:00:27,120
Here we are assigning a type.

6
00:00:27,150 --> 00:00:32,260
We are actively tallying typescript hey this parameter is of type No.

7
00:00:32,520 --> 00:00:38,550
Now actually in this snippet here types are all getting used in other places.

8
00:00:38,640 --> 00:00:44,580
For example in this line here which type does result half we don't assign a type here right.

9
00:00:44,580 --> 00:00:47,800
We have no colon after this.

10
00:00:47,820 --> 00:00:50,100
Well turns out that we don't need to.

11
00:00:50,190 --> 00:00:55,080
We can actually add one and make it clear that result will also hold a number.

12
00:00:55,140 --> 00:01:00,510
Of course it will because we returned the addition of two numbers here but we don't have to do that.

13
00:01:00,570 --> 00:01:06,180
We can do that but it's not necessary because typescript has a built in feature which is called Type

14
00:01:06,270 --> 00:01:10,280
inference which means typescript is really doing its best.

15
00:01:10,290 --> 00:01:15,010
And it is really smart about inferring types you're working with.

16
00:01:15,010 --> 00:01:21,680
And in this case if I hover over result here in Visual Studio code I see that types inferred that dissolve

17
00:01:21,690 --> 00:01:23,130
type number.

18
00:01:23,130 --> 00:01:24,780
Now how did it do that.

19
00:01:24,780 --> 00:01:32,300
Well it actually also inferred the return type of the add function if I hover over at here.

20
00:01:32,310 --> 00:01:35,270
You see this is basically the type of this function.

21
00:01:35,310 --> 00:01:37,310
You see the two parameter types here.

22
00:01:37,410 --> 00:01:41,540
And then after to function as a whole you also see a colon.

23
00:01:41,880 --> 00:01:43,330
And then here also the type.

24
00:01:43,330 --> 00:01:44,520
No no.

25
00:01:44,570 --> 00:01:50,360
That basically is what typescript inferred to be the return type of this function.

26
00:01:50,400 --> 00:01:56,370
So typescript correctly infers that since we add a and b in here and return the result and a and b a

27
00:01:56,370 --> 00:01:59,930
numbers we have a return type of type No.

28
00:02:00,090 --> 00:02:06,690
Well and since we store the return value of the add function in result typescript all the infers that

29
00:02:06,690 --> 00:02:08,440
result holds a number.

30
00:02:08,580 --> 00:02:12,660
So type inference is really a key feature of typescript as well.

31
00:02:13,080 --> 00:02:20,030
And it is a good practice to not unnecessarily reassign a type types who could infer anyways.

32
00:02:20,100 --> 00:02:26,180
It's also not a bad mistake but it's simply not required typescript already knows which type we have

33
00:02:26,180 --> 00:02:29,790
here inside out if y now where to assign another type.

34
00:02:29,790 --> 00:02:35,940
For example string which types could also supports of course get an error because I'm actually storing

35
00:02:35,940 --> 00:02:44,280
a number in constant which I'd find to hold a string so if I wanted to store a string in here then indeed

36
00:02:44,280 --> 00:02:50,460
I now need to fix something about it my code I ever need to return a String here for example by wrapping

37
00:02:50,460 --> 00:02:59,260
this into parentheses and calling to string here or instead of doing that of course we also could call

38
00:02:59,290 --> 00:03:01,270
to string here.

39
00:03:01,270 --> 00:03:02,490
So that is something we can do.

40
00:03:02,500 --> 00:03:07,900
But here I will get rid of it and I will use this type inference because I'm fine with using a number

41
00:03:07,900 --> 00:03:08,770
here.

42
00:03:08,980 --> 00:03:12,700
No speaking of numbers which other types do we have.

43
00:03:12,700 --> 00:03:14,860
We just saw the string right.

44
00:03:14,890 --> 00:03:21,630
I assigned to type string here so string is another core type type score it supports and in general

45
00:03:21,620 --> 00:03:29,740
it supports all the core types javascript knows as well numbers strings boolean as objects and so on.

46
00:03:29,740 --> 00:03:31,120
So this is the string.

47
00:03:31,240 --> 00:03:38,350
If we wanted to work the boolean like is done well then here types would infer that is done holds a

48
00:03:38,350 --> 00:03:45,100
boolean actually it and for us here that it holds exactly false and I'll come back to these exact types

49
00:03:45,100 --> 00:03:50,860
later but we can also accept any boolean here and if I would code turned us into a variable here where

50
00:03:50,860 --> 00:03:56,380
we can assign a new value then type could all infers that this is a boolean and it would allow us to

51
00:03:56,590 --> 00:04:04,780
assign true as a value as well just for a constant ID in third the concrete type false because constants

52
00:04:04,780 --> 00:04:09,820
can't get new values so they're typescript knows that it's not even a boolean it's really just false

53
00:04:10,150 --> 00:04:16,600
for a variable it is a boolean so boolean is strings numbers we have all these types makes sense I guess

54
00:04:16,960 --> 00:04:18,190
whichever types do we have.

55
00:04:18,760 --> 00:04:25,450
Well we also have function types and with that I don't mean the types of the parameters I really mean

56
00:04:25,450 --> 00:04:27,360
the type of the function as a whole.

57
00:04:27,550 --> 00:04:30,580
So a type that describes the entire function.

58
00:04:30,580 --> 00:04:31,600
What do you mean by that.

59
00:04:31,990 --> 00:04:35,010
Well if we hover over ad we see the function type.

60
00:04:35,020 --> 00:04:39,880
This is how the function type in the end is inferred the function type includes both the parameters

61
00:04:40,180 --> 00:04:46,090
as well as the return value and we can of course also set our own return value here by adding a colon

62
00:04:46,180 --> 00:04:50,020
after the parameter list and then defining our return type.

63
00:04:50,020 --> 00:04:55,870
And here again if I set this to type string that of course my current logic and a function is not correct

64
00:04:55,900 --> 00:05:00,910
because this will return just the result of two numbers being added together which is a number.

65
00:05:00,910 --> 00:05:04,000
So I would not meet my function type here.

66
00:05:04,000 --> 00:05:08,830
So we might when I get rid of that and use type inference or change our logic.

67
00:05:08,980 --> 00:05:13,560
So the function is made up of the parameter types and the return type.

68
00:05:13,560 --> 00:05:19,240
Now when it comes to the return type you can all of course have functions that don't return anything.

69
00:05:19,330 --> 00:05:29,410
For example print result let's say this is a function which takes a result and there I console log the

70
00:05:29,410 --> 00:05:31,760
result like this.

71
00:05:31,780 --> 00:05:39,260
Now if I use this function down there to print the well result I got here you see this will work.

72
00:05:39,370 --> 00:05:42,270
But now of course this function doesn't return anything.

73
00:05:42,490 --> 00:05:48,390
We can make clear that this function won't return anything by adding a return type of Y it here.

74
00:05:48,400 --> 00:05:54,650
Now that's a type added by TypeScript and this basically means this function has no return statement.

75
00:05:55,510 --> 00:06:01,660
We could also go with undefined here undefined is also valid type and typescript but as you see I'm

76
00:06:01,660 --> 00:06:02,880
now getting an error.

77
00:06:03,010 --> 00:06:03,550
Why.

78
00:06:03,970 --> 00:06:09,910
Well technically a function that doesn't return anything returns undefined in javascript but in typescript

79
00:06:10,090 --> 00:06:13,380
there is a slight differentiation between these cases.

80
00:06:13,420 --> 00:06:19,330
If I set the return type of a function to undefined timescale I would expect that I have a return value

81
00:06:19,600 --> 00:06:21,300
which simply is undefined.

82
00:06:21,640 --> 00:06:28,150
If I don't intend on returning anything then technically still if I would use the return value I would

83
00:06:28,150 --> 00:06:34,210
have undefined but then in typescript I should set this to wide to make my intention clear my intention

84
00:06:34,210 --> 00:06:36,670
is to not even have a return statement.

85
00:06:36,670 --> 00:06:39,790
And we do make this clear by setting this too wide here.

86
00:06:39,790 --> 00:06:46,930
If I now would return undefined here I also could do that.

87
00:06:46,930 --> 00:06:50,500
But the better practices to now not return anything.

88
00:06:50,500 --> 00:06:54,790
Now Justice before however typescript infers that I don't return anything.

89
00:06:54,790 --> 00:07:00,670
So we don't need to add to return type of wide here if we don't added then types could correctly and

90
00:07:00,670 --> 00:07:05,640
first that the return type is wide and you'll always see one other important type here.

91
00:07:05,710 --> 00:07:11,300
The any type you see that 4 result I didn't assign my own type.

92
00:07:11,320 --> 00:07:17,200
Now of course typescript can't infer the type of result because we just find a function here.

93
00:07:17,200 --> 00:07:19,980
It is as if we would create a variable a here.

94
00:07:20,050 --> 00:07:23,300
How would typescript know what we plan on storing in there.

95
00:07:23,320 --> 00:07:26,140
How does typescript know what we plan on receiving here.

96
00:07:26,170 --> 00:07:32,380
It's not inferring the type by how we call the function later so it Condit for to type here in such

97
00:07:32,380 --> 00:07:34,680
a case the type of default is any.

98
00:07:34,720 --> 00:07:38,890
And of course we can also explicitly set to type to any here if we want to.

99
00:07:38,890 --> 00:07:41,570
Now you should use any type carefully though.

100
00:07:41,680 --> 00:07:45,700
It's kind of a last resort type you have in typescript.

101
00:07:45,700 --> 00:07:51,400
This is basically the default for all values if you don't work with types at all and therefore you give

102
00:07:51,400 --> 00:07:59,110
up all the advantages types offers because any well really works with any value so the advantage you

103
00:07:59,110 --> 00:08:06,280
get by being explicit about your types and the advantage of being able to catch errors early that is

104
00:08:06,280 --> 00:08:12,110
all lost if you work with the any type because of course with that typescript accepts any values.

105
00:08:12,220 --> 00:08:17,830
If on the other hand I make it clear that I want a number here then I really only can pass a number

106
00:08:17,830 --> 00:08:24,460
into print result and if it would pass and anything else a string a boolean whatever then it would fail.

107
00:08:24,460 --> 00:08:29,060
So sometimes it's fine to use to any type but you should be careful about that here.

108
00:08:29,230 --> 00:08:31,590
I will leave it like this for the moment.

109
00:08:31,600 --> 00:08:37,450
Now before we move on let me also show you another way of working with types and how you can overwrite

110
00:08:37,540 --> 00:08:42,840
type inference by typescript to give you an example let's say in the index each html file.

111
00:08:42,850 --> 00:08:50,770
We actually have two input fields and input field with an idea of let's say num 1.

112
00:08:50,940 --> 00:08:52,610
And then one with NUM 2.

113
00:08:52,620 --> 00:08:54,190
And then we all have a button.

114
00:08:54,300 --> 00:08:58,420
And when we click this button I want to trigger my add function here.

115
00:08:58,440 --> 00:09:01,200
So now we got these two inputs and the button.

116
00:09:01,200 --> 00:09:05,330
Now of course we need to get access to those inputs and the button in order to work with them and in

117
00:09:05,340 --> 00:09:08,940
order to read values from there and add an event listener.

118
00:09:09,090 --> 00:09:15,360
So at the very top of the file we could add a constant here num 1 input and use document get element

119
00:09:15,360 --> 00:09:16,010
by D.

120
00:09:16,350 --> 00:09:17,220
And use the idea.

121
00:09:17,250 --> 00:09:23,340
Num 1 year to get access to this element in the DOM now num 1 simply is the idea I assigned here.

122
00:09:23,340 --> 00:09:30,730
The Abbott input has the idea come to hence we can duplicate this to get the NUM to input by that idea

123
00:09:31,240 --> 00:09:38,560
and also get access to the button element with document query selector button.

124
00:09:38,620 --> 00:09:46,100
We only have one button on the page so we can selected with this query selector now with all that I

125
00:09:46,100 --> 00:09:51,720
will actually comment out this code here at the bottom because we don't need it right now.

126
00:09:51,860 --> 00:09:57,520
And instead I'll use the button element to add an event listener for the Click event and upon a click

127
00:09:57,880 --> 00:10:01,610
I went to call ad and I want to use my two inputs here.

128
00:10:01,780 --> 00:10:04,270
So we'll actually use an anonymous function here.

129
00:10:04,390 --> 00:10:10,630
A little arrow function here simply and in there I will get to two concrete values the user entered

130
00:10:10,630 --> 00:10:13,950
into these inputs and then call add with those values.

131
00:10:14,110 --> 00:10:21,730
So num one here simply is num one input dot value and you already see I didn't get auto completion here

132
00:10:21,820 --> 00:10:26,180
and I do get an error or here in my I.D. even though this should work right.

133
00:10:26,260 --> 00:10:31,510
We are selecting input element here so I'm not sure where does this coming from we'll fix it later.

134
00:10:31,510 --> 00:10:37,540
For now let's live with the error and let's also extract num 2 from num Q input.

135
00:10:37,540 --> 00:10:44,740
Then we can calculate the result by calling add by passing in num 1 and 2 and then last but not least

136
00:10:44,740 --> 00:10:48,840
we can call print result and pass in the result.

137
00:10:49,000 --> 00:10:52,190
Now we have errors here but let's try running this code.

138
00:10:52,480 --> 00:10:58,660
So I will compile apt Yes and of course we get errors here because we get the same error as my I'd already

139
00:10:58,680 --> 00:11:04,100
detected but as I mentioned earlier the file D.J. S file is still generated.

140
00:11:04,300 --> 00:11:06,640
So we do get this file here.

141
00:11:07,000 --> 00:11:13,730
Hence if we go to the running application and I reload I got these two inputs and I can enter my two

142
00:11:13,730 --> 00:11:17,200
values and click Add and it does something.

143
00:11:17,240 --> 00:11:24,490
Now we are looking at an old bag again though the two values got concatenated instead of added.

144
00:11:24,650 --> 00:11:28,120
Now this is not really what we wanted right and why do we get this.

145
00:11:28,120 --> 00:11:31,040
I think we got rid of that when we introduced types.

146
00:11:31,040 --> 00:11:33,950
So why do we have that error again.

147
00:11:33,950 --> 00:11:39,990
Well keep in mind that types can help us but only if we really use them.

148
00:11:40,040 --> 00:11:42,500
And here we clearly have an error.

149
00:11:42,590 --> 00:11:48,530
So typescript doesn't really understand that we have a value property on num one input and if we take

150
00:11:48,530 --> 00:11:52,690
a closer look at offer of course also doesn't know what's inside of value.

151
00:11:52,760 --> 00:12:01,550
So num one effectively is of type any and we passed that into at and indeed add expects to numbers but

152
00:12:01,610 --> 00:12:07,170
it turns out since num 1 is any typescript trusts us maybe that is a numbers.

153
00:12:07,190 --> 00:12:12,350
So it doesn't complain here also because we already got an error here so types could kind of gives up

154
00:12:12,680 --> 00:12:15,920
and allows us to pass and values which seem to be strings.

155
00:12:16,220 --> 00:12:20,200
OK well maybe let's resolve this error first.

156
00:12:20,210 --> 00:12:27,500
Why does typescript not understand that there is a value property on num when input we are selecting

157
00:12:27,500 --> 00:12:32,420
elements in a dorm here and we know these will be input elements and of course they therefore have a

158
00:12:32,420 --> 00:12:33,370
value property.

159
00:12:33,410 --> 00:12:37,690
And indeed this part is not failing our code is working here.

160
00:12:37,940 --> 00:12:41,190
So why does not understand that these are inputs.

161
00:12:41,210 --> 00:12:47,990
Well how would it we only tell typescript that we select an element in the dorm by I.D. but this could

162
00:12:47,990 --> 00:12:53,660
be any element you can have any idea on any element it could be a paragraph it could be a button it

163
00:12:53,660 --> 00:12:59,900
could be a list item it doesn't have to be an input element and therefore if we have our Overgaard element

164
00:12:59,900 --> 00:13:07,340
by I.D. we indeed see the typescript only infers that this is of type h him out element and that's of

165
00:13:07,340 --> 00:13:14,010
course very unspecific it just means any h him Al element not specifically input element.

166
00:13:14,090 --> 00:13:20,090
Now we of course know as a developer that we will get an input element here and by the way typescript

167
00:13:20,090 --> 00:13:24,340
doesn't scan our index h t metal file to check what we're selecting there.

168
00:13:24,560 --> 00:13:26,420
So we can't rely on type inference here.

169
00:13:27,050 --> 00:13:33,860
Instead we can do something which is known as type costing we can override the inference made by typescript

170
00:13:33,890 --> 00:13:40,670
we can tell typescript that this will be of a different type that you could think we'll do this by adding

171
00:13:40,670 --> 00:13:46,580
a type here and here we could use the H HTML input element type you might not notice type it's one of

172
00:13:46,580 --> 00:13:52,550
the built in types for working with the Dom and this basically says what I stored in here has to be

173
00:13:52,580 --> 00:13:59,360
not any H Tim Al element but at h t male input element of course you see we get an error here and we

174
00:13:59,360 --> 00:14:04,400
get an error here because just because we want to store as such an element here doesn't change the way

175
00:14:04,400 --> 00:14:08,740
get element by idea works typescript still doesn't know what we get here.

176
00:14:08,960 --> 00:14:15,070
So instead we'll use this typecasting thing I mentioned you do that by adding the ASCII word after it

177
00:14:15,070 --> 00:14:19,880
a thing where TypeScript and first some type which you want to change and then you set the type you

178
00:14:19,880 --> 00:14:22,430
want to use instead of the type typescript inferred.

179
00:14:22,430 --> 00:14:28,790
So in this case h him l input element no this is pure typescript syntax this will all be lost once we

180
00:14:28,790 --> 00:14:36,620
convert to javascript but this now overrides what typescript uses or infers here if we now hover over

181
00:14:36,620 --> 00:14:42,290
num 1 input we see what's stored in there is a h t Mal input element and if we scroll down we see that

182
00:14:42,290 --> 00:14:50,000
they for num 1 input we don't get this error anymore we now know OK yep this is now clearly a way lable

183
00:14:50,000 --> 00:14:57,200
this property exists we get a new error which I'll come back later but this error is gone so this is

184
00:14:57,190 --> 00:14:58,700
typecasting and action.

185
00:14:58,700 --> 00:15:01,280
There also is another syntax you can use.

186
00:15:01,280 --> 00:15:05,870
You can use angle brackets in front of the thing you want to cost instead of after it.

187
00:15:05,900 --> 00:15:10,180
As we do it with ass and then use to type here both works.

188
00:15:10,310 --> 00:15:16,040
This syntax is a bit more common now but both does the same thing in the end with Dad we're simply overriding

189
00:15:16,040 --> 00:15:21,200
the type types called inferred and I'll leave both syntax is here to show you both of course in your

190
00:15:21,200 --> 00:15:27,150
apps you should be consistent and typically use either of the two so now the errors down there are gone

191
00:15:27,180 --> 00:15:31,390
but we've got a new error here and that error now makes sense.

192
00:15:31,560 --> 00:15:38,010
It's important to understand that the value property owner input element always returns a string no

193
00:15:38,010 --> 00:15:40,080
matter which type does input is off.

194
00:15:40,080 --> 00:15:44,910
So even if you set this to type number here this doesn't change the type of value you get from the value

195
00:15:44,910 --> 00:15:49,960
prop and it also does not change with the value the user entered.

196
00:15:49,980 --> 00:15:55,070
If a user enters the number 10 into an input it's still a string it's wrapped in two quotes.

197
00:15:55,140 --> 00:15:58,880
So to say value always gives you a string.

198
00:15:58,920 --> 00:16:04,290
So when I'm 1 and I'm 2 are strings and therefore we are now calling add with two strings and that's

199
00:16:04,290 --> 00:16:06,130
what typescript is not liking here.

200
00:16:06,180 --> 00:16:12,300
If we would compile this file we would get errors where we clearly learn that type string is not allowed

201
00:16:12,300 --> 00:16:16,110
here but that we want to type no instead.

202
00:16:16,110 --> 00:16:22,110
So 2 changed as we now need to parse these strings two numbers so we can add a plus in front of both

203
00:16:22,530 --> 00:16:27,590
value it retrieval easier to cost the string into a number.

204
00:16:27,660 --> 00:16:31,740
Now that of course means that if anything which can't be cost is entered.

205
00:16:31,740 --> 00:16:35,110
This will be converted into not a number but that's fine for now.

206
00:16:35,910 --> 00:16:42,690
And with that we again see the power of typescript in action by being clear about the types we're working

207
00:16:42,690 --> 00:16:50,130
with we can catch this nasty bug we introduced where we forgot to cost to values and where we hence

208
00:16:50,140 --> 00:16:54,660
concatenated the two values instead of adding them mathematically.

209
00:16:54,660 --> 00:17:01,300
So now with that if we safeties and we compiled is we can reload this page and now if I enter the two

210
00:17:01,300 --> 00:17:08,020
numbers here we get additions in a mathematical sense instead of concatenate strings.

211
00:17:08,110 --> 00:17:13,120
So this is how we work with types and some of the core types we can work with.

212
00:17:13,150 --> 00:17:19,570
Now of course you can learn about all types in the official box here in the handbook but we will also

213
00:17:19,570 --> 00:17:23,040
have a look at some of the core types and features for this module.

214
00:17:23,140 --> 00:17:23,920
So let's continue.
