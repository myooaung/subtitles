1
00:00:02,190 --> 00:00:07,830
Thus far when we worked with arrays, we always talked about adding items or selecting single items or

2
00:00:07,830 --> 00:00:09,590
a range of items.

3
00:00:09,600 --> 00:00:15,750
Now you also encounter use cases or scenarios where you have an array of data and now you want to

4
00:00:15,750 --> 00:00:22,680
find out at which index in that array a certain item sits, so that you can use that index to replace

5
00:00:22,680 --> 00:00:25,740
the item or for whatever reason you might have.

6
00:00:26,160 --> 00:00:32,870
Let's say we want to find out where in this array this item with the value of 1.5 lives.

7
00:00:33,080 --> 00:00:41,410
You can do this with another method that is available in Javascript on every array,

8
00:00:41,600 --> 00:00:45,970
let's run it on test results here and that's the indexof method.

9
00:00:45,970 --> 00:00:52,100
Now as the name suggests, this returns the index of the value you're passing as an argument here.

10
00:00:52,100 --> 00:00:54,460
So for example here we could search for 1.5,

11
00:00:54,500 --> 00:01:00,100
you also have an optional second argument that would allow you to specify a starting index

12
00:01:00,110 --> 00:01:05,480
so that you for example only start searching on elements with index 2 or higher.

13
00:01:05,510 --> 00:01:12,380
Now I will search the entire array here and hopefully, get a result of 2 which is the index of this 1.5

14
00:01:12,380 --> 00:01:13,910
value here.

15
00:01:14,000 --> 00:01:18,660
So if we reload this, indeed I see 2 here. Now

16
00:01:18,730 --> 00:01:21,300
there are a couple of important things to understand,

17
00:01:21,400 --> 00:01:28,060
for one if you have the same value more than once, like I do here now that I added 1.5, then this will

18
00:01:28,060 --> 00:01:34,990
stop after it found the first matching value, so it will return you two, it will not return you all indexes

19
00:01:34,990 --> 00:01:37,630
of all items that have that value.

20
00:01:37,660 --> 00:01:43,690
So if I repeat that code with that new item added, you'll see I still get to here even though I have

21
00:01:43,690 --> 00:01:49,670
another item of the same value at index four. So that's one thing,

22
00:01:49,720 --> 00:01:54,650
indexof stopped once it found the first element that fits this description.

23
00:01:54,670 --> 00:02:00,640
Now if you want to start searching from the right, there is last indexof, you can use that to search

24
00:02:00,640 --> 00:02:03,310
from the right and therefore it will now stop at this index,

25
00:02:03,370 --> 00:02:06,400
so it does the same as index of, just starting from the right.

26
00:02:06,400 --> 00:02:12,520
So if I now reload, we see an index four here because it started from the right. Another important

27
00:02:12,530 --> 00:02:16,580
gotcha regarding index of and last index of is that

28
00:02:16,600 --> 00:02:21,400
it works fine for primitive values but not for reference values.

29
00:02:21,430 --> 00:02:30,230
Let's say we had our person data array here and there we have an object with name Max in there and

30
00:02:30,230 --> 00:02:32,380
another object with name Manuel,

31
00:02:32,380 --> 00:02:34,720
so it's an array of two objects.

32
00:02:34,720 --> 00:02:45,730
If I want to find out where Manuel is, then of course we could try person data index of and pass in

33
00:02:45,740 --> 00:02:46,720
that object, right?

34
00:02:46,730 --> 00:02:48,030
We could try that.

35
00:02:48,320 --> 00:02:57,050
If we do this and I reload my page, we'll get -1 though, -1 is the return value of index of and

36
00:02:57,050 --> 00:03:01,940
last index of if it couldn't find any entry, then it always returns -1.

37
00:03:01,940 --> 00:03:03,440
So it doesn't throw an error,

38
00:03:03,440 --> 00:03:05,560
it doesn't return false or anything like that,

39
00:03:05,660 --> 00:03:09,320
it returns -1 if it didn't find anything.

40
00:03:09,320 --> 00:03:13,840
Now the reason for this behavior of course is this reference value thing.

41
00:03:13,850 --> 00:03:20,090
Objects are reference values and therefore in the end here, I'm creating a brand new object and I'm passing

42
00:03:20,090 --> 00:03:26,660
this to index of and behind the scenes, index of is of course comparing all values to the value I passed

43
00:03:26,690 --> 00:03:27,780
to index of

44
00:03:27,950 --> 00:03:33,050
and because two objects even if they look similar are never similar,

45
00:03:33,050 --> 00:03:37,280
it doesn't find any match and therefore it returns -1.

46
00:03:37,280 --> 00:03:42,980
So index of won't work if you have objects in there but no worries, we'll have a different method that

47
00:03:42,980 --> 00:03:45,640
does work if you do have objects in there.
