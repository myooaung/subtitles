1
00:00:02,120 --> 00:00:09,020
Now it is important to understand that the prototype chain does not end after reaching out to that prototype

2
00:00:09,030 --> 00:00:10,600
of that person object.

3
00:00:10,700 --> 00:00:16,040
If we try to call a method like printAge which is not part of the person object itself because we

4
00:00:16,040 --> 00:00:20,810
don't set it up in the constructor function and we didn't add it to the person thereafter either,

5
00:00:21,050 --> 00:00:24,410
well then we go back to the fallback object which is the prototype, right?

6
00:00:24,410 --> 00:00:28,370
So it's this prototype here which indeed has the printAge method.

7
00:00:28,580 --> 00:00:37,250
If we called something else, for example if I tried to console log p.toString, the question is will

8
00:00:37,250 --> 00:00:38,870
this now still work.

9
00:00:38,870 --> 00:00:44,970
It worked earlier because we could fall back to an object, a base object which had the toString method,

10
00:00:44,990 --> 00:00:47,430
the question is, is that still the case now

11
00:00:47,430 --> 00:00:49,380
that we kind of edited

12
00:00:49,400 --> 00:00:51,510
the prototype here?

13
00:00:51,560 --> 00:00:52,670
Well let's see.

14
00:00:52,670 --> 00:00:53,920
Let's save it and reload

15
00:00:53,930 --> 00:00:55,670
and yes it still works,

16
00:00:55,680 --> 00:01:03,560
we get no error. Now it still works because the prototype chain doesn't end at this default prototype.

17
00:01:03,560 --> 00:01:09,080
If we have a look at our prototype, it's this function or this object excuse me which has the printAge

18
00:01:09,290 --> 00:01:14,160
method and the constructor method but which itself also has a prototype.

19
00:01:14,270 --> 00:01:21,500
As I mentioned, every object has a prototype, not just the object we build based on a constructor function

20
00:01:21,800 --> 00:01:25,220
but also the fallback object of our object,

21
00:01:25,220 --> 00:01:32,390
so the prototype of our object. That prototype, that fallback object has its own fallback object, its own

22
00:01:32,420 --> 00:01:38,810
prototype and we can reach out to it with the special __proto__

23
00:01:38,810 --> 00:01:40,210
property here.

24
00:01:40,310 --> 00:01:46,040
If we expand it here, we see an object which has that toString method, the question just is where is this

25
00:01:46,070 --> 00:01:51,050
object coming from? This in the end is the base object

26
00:01:51,050 --> 00:02:00,490
you always have access to. The default prototype every object gets, thanks to it being assigned as a default

27
00:02:00,700 --> 00:02:08,830
to be assigned prototype on every constructor function can be found on the global object class or to

28
00:02:08,830 --> 00:02:12,820
be precise, object constructor function.

29
00:02:12,820 --> 00:02:18,520
If I console log object like this, this is globally available in Javascript,

30
00:02:18,520 --> 00:02:25,210
this is a constructor function that's built into Javascript so to say. If I console log that, maybe at

31
00:02:25,210 --> 00:02:27,470
the bottom and get rid of that p2 log,

32
00:02:27,530 --> 00:02:32,020
if I console log that, you'll see that this is in the end

33
00:02:32,270 --> 00:02:33,930
something like that.

34
00:02:34,030 --> 00:02:39,100
Let's try console dir here if we can look into it, well yes we can

35
00:02:39,190 --> 00:02:43,800
but in there you'll find a bunch of interesting things but toString is not part of it,

36
00:02:43,810 --> 00:02:50,050
instead this has its own prototype but again, no toString in there. In its prototype,

37
00:02:50,050 --> 00:02:52,780
we find toString somewhere though

38
00:02:52,780 --> 00:03:00,450
but that's actually not the reason why we have access to toString here on our person, instead object

39
00:03:00,460 --> 00:03:11,230
here is a constructor function with a bunch of built-in properties or methods you can call. In the class

40
00:03:11,230 --> 00:03:12,340
based world,

41
00:03:12,340 --> 00:03:18,010
we would call these properties and methods which you can call without instantiating an object based

42
00:03:18,100 --> 00:03:24,700
on that constructor function static properties and static methods. So everything you see here in the

43
00:03:24,700 --> 00:03:30,730
end are just static methods and static properties of that object constructor function

44
00:03:30,730 --> 00:03:36,600
and indeed when you go to your class and you add a static property,

45
00:03:36,610 --> 00:03:44,980
this simply means that a property is added directly here to your constructor function object, so it is

46
00:03:45,040 --> 00:03:51,670
as if you go to person which is a function but which therefore also is an object and you add describe

47
00:03:51,850 --> 00:04:00,410
to it and say that this is a function where you want to describe what this function does for example,

48
00:04:00,410 --> 00:04:02,750
creating persons.

49
00:04:02,750 --> 00:04:05,780
Now this is a property of the person object,

50
00:04:05,780 --> 00:04:12,570
it's not a property that will be added to objects created based on the constructor function.

51
00:04:12,650 --> 00:04:15,980
There we only add what's inside the constructor function,

52
00:04:15,980 --> 00:04:19,270
this does not tweak the function body or anything like that,

53
00:04:19,280 --> 00:04:22,910
instead it interacts with that function object which is created

54
00:04:23,000 --> 00:04:27,530
and even though it's not that common, of course you can add properties and methods to that object as

55
00:04:27,530 --> 00:04:28,070
well.

56
00:04:28,070 --> 00:04:31,820
Again, this has no impact on what executes the function body,

57
00:04:31,820 --> 00:04:36,380
it's just something you can interact with on the function object itself.

58
00:04:36,380 --> 00:04:38,430
So if I add describe like this,

59
00:04:38,600 --> 00:04:46,430
indeed if we build a new person and we console log the entire person object down there, like that, you

60
00:04:46,430 --> 00:04:51,230
will see that if I reload here, our person has no describe method.

61
00:04:51,230 --> 00:04:54,710
My function which I log up there however has a describe method,

62
00:04:54,710 --> 00:05:01,160
so it's really added on the function object itself and object here, this globally available constructor

63
00:05:01,160 --> 00:05:06,910
function, has a bunch of such predefined static methods and properties

64
00:05:07,190 --> 00:05:13,860
but the important thing is that object itself is not the fallback object, the fallback prototype

65
00:05:14,000 --> 00:05:21,170
all other objects can come back to in the end. If it would be, then we should be able to for example call

66
00:05:22,810 --> 00:05:28,180
length and get a value of one on any object of our choice,

67
00:05:28,230 --> 00:05:34,770
so I should be able to reach out to p.length and print a length of exactly one because a length

68
00:05:34,770 --> 00:05:39,150
property does not exist on person, so it should go to its fallback value,

69
00:05:39,150 --> 00:05:40,170
this prototype,

70
00:05:40,290 --> 00:05:45,780
there it also won't exist and therefore it should go to the fallback value of this object

71
00:05:45,780 --> 00:05:53,830
and if that were object, so this global object here, then this should print one but as you will see instead

72
00:05:53,860 --> 00:06:00,130
if I reload here, it prints undefined because as I mentioned, this global object constructor function

73
00:06:00,130 --> 00:06:04,080
is not the fallback object of everything, instead

74
00:06:04,300 --> 00:06:06,190
and that can be confusing at first,

75
00:06:06,250 --> 00:06:15,650
the fallback value of all objects is object.prototype, again because of this property naming it can

76
00:06:15,650 --> 00:06:21,980
be confusing but keep in mind that this prototype property exists on everything which is a constructor

77
00:06:21,980 --> 00:06:29,000
function and object is just such a constructor function in the end. It defines what will be assigned

78
00:06:29,360 --> 00:06:35,200
as a prototype to any object that is created based on this constructor function.

79
00:06:35,210 --> 00:06:41,090
Therefore, any object created based on person receives the default prototype with the printAge function

80
00:06:41,100 --> 00:06:46,310
added. Every object created based on this object constructor function,

81
00:06:46,310 --> 00:06:53,440
this built-in object constructor function receives its default prototype and it's this default prototype

82
00:06:53,450 --> 00:06:58,690
if we have a look at it that indeed has the toString method and a couple of other methods.

83
00:07:00,190 --> 00:07:06,790
So this is just configuring which default fallback is assigned to objects that are created based on

84
00:07:06,790 --> 00:07:13,090
the object constructor and there it's just important to know that this fallback object here for the

85
00:07:13,090 --> 00:07:14,580
person constructor function,

86
00:07:14,590 --> 00:07:21,250
this default prototype you get here or any object you create on your own with the object literal notation

87
00:07:21,250 --> 00:07:28,330
for example by default always uses this global object constructor. So any object created with the object

88
00:07:28,330 --> 00:07:34,990
literal notation or the object created by Javascript automatically is a default prototype here will

89
00:07:34,990 --> 00:07:41,950
be based on this object constructor function and will therefore use this prototype as its fallback value,

90
00:07:41,980 --> 00:07:49,600
so every object by default uses this as its fallback value including the default prototype object you

91
00:07:49,600 --> 00:07:52,060
get for your own constructor functions,

92
00:07:52,090 --> 00:07:54,740
this is how that is connected.

93
00:07:54,910 --> 00:08:01,600
Now in case you're wondering, this prototype itself then has no other prototype, you will not find any

94
00:08:01,660 --> 00:08:04,390
__proto method here,

95
00:08:04,510 --> 00:08:05,640
just a getter and a setter

96
00:08:05,650 --> 00:08:06,860
but this won't do anything,

97
00:08:06,880 --> 00:08:14,050
it will basically just capture any interactions because if you try to get the prototype of that base

98
00:08:14,050 --> 00:08:18,970
prototype of everything, you will see that if I now reload this, it just prints null.

99
00:08:19,000 --> 00:08:23,650
So that's where the prototype chain ends, it ends at object.prototype.
