1
00:00:02,530 --> 00:00:04,750
Now let's start with numbers.

2
00:00:04,750 --> 00:00:12,280
Numbers are of course an important construct in Javascript and it's important to keep in mind that in

3
00:00:12,280 --> 00:00:19,600
Javascript, every number is a float, a floating point number which means a number with an integer place

4
00:00:19,930 --> 00:00:22,840
and then also with a couple of decimal places.

5
00:00:22,870 --> 00:00:28,110
So there is no specific integer type for numbers without decimal places,

6
00:00:28,110 --> 00:00:30,400
that does not exist in Javascript.

7
00:00:30,400 --> 00:00:36,970
We do have a special integer type in certain other programming languages but Javascript is not one of them,

8
00:00:37,000 --> 00:00:42,280
every number instead is a float which means a number with decimal places.

9
00:00:42,310 --> 00:00:51,640
Now internally, numbers are stored as 64 bit floating points, so there are 64 bits available to internally

10
00:00:51,700 --> 00:00:57,430
represent a number, bits are these things which can be either 0 or 1.

11
00:00:57,430 --> 00:00:59,990
One bit is reserved for the sign,

12
00:01:00,010 --> 00:01:07,120
so if it's a positive or negative number and the other bits are basically there to represent the digits

13
00:01:07,120 --> 00:01:10,050
of the number and where the dot is,

14
00:01:10,060 --> 00:01:16,900
so where the decimal separator sits and the combination of these bits is therefore capable of describing

15
00:01:16,900 --> 00:01:21,100
numbers, of course within certain boundaries.

16
00:01:21,100 --> 00:01:26,830
Now before we have a closer look at these boundaries, if you want to learn all the theory about floating

17
00:01:26,830 --> 00:01:34,180
point arithmetic and how numbers are represented as bits, not just in Javascript but in any programming

18
00:01:34,210 --> 00:01:40,420
language, you can check out some of the attached articles and resources like Wikipedia article or

19
00:01:40,420 --> 00:01:42,850
this discussion on stack overflow.

20
00:01:42,970 --> 00:01:49,090
There you can dive much deeper into this, something I won't do here simply because it's not really the

21
00:01:49,090 --> 00:01:55,210
core of Javascript, it's definitely interesting to notice and to understand this but for your day-to-day

22
00:01:55,210 --> 00:01:57,620
work, you typically won't need this

23
00:01:57,730 --> 00:02:00,180
which is why I will ignore it here.

24
00:02:00,250 --> 00:02:06,490
The important takeaway from these resources or without them by just listening to what I'm saying here

25
00:02:06,490 --> 00:02:13,360
I guess is just that of course, due to the fact that we have 64 bits available to represent a number,

26
00:02:13,960 --> 00:02:16,660
there are certain limits in Javascript,

27
00:02:16,660 --> 00:02:19,010
there is a maximum and a minimum number

28
00:02:19,090 --> 00:02:24,970
and there also is only a certain amount of precision we can get regarding the decimal places of a number,

29
00:02:25,330 --> 00:02:31,450
so you can't represent every number in Javascript and there are of course certain ways around that if

30
00:02:31,450 --> 00:02:37,990
you really need to, though of course we're talking about very large numbers or numbers with lots of decimal

31
00:02:37,990 --> 00:02:39,010
places

32
00:02:39,130 --> 00:02:44,170
and the question is how often you really need to work with such large numbers or with such detailed

33
00:02:44,170 --> 00:02:50,860
numbers but be aware of the fact that there are certain limits and these limits are actually with what

34
00:02:50,860 --> 00:02:52,150
I want to start here.

35
00:02:52,330 --> 00:02:58,750
Attached you again find a very basic starting project, HTML file and an empty script and for now

36
00:02:58,750 --> 00:03:01,060
we'll just work in the console here.

37
00:03:01,060 --> 00:03:06,970
Now in Javascript, we have a maximum and a minimum number and you can easily find out what the maximum

38
00:03:06,970 --> 00:03:13,510
and the minimum is by using the global number object which is built into Javascript and then with a

39
00:03:13,510 --> 00:03:20,170
dot, you got a couple of methods and properties available and for example, there is a MAX_SAFE_INTEGER

40
00:03:20,740 --> 00:03:23,090
and this gives us just what it sounds like,

41
00:03:23,110 --> 00:03:30,550
this is the biggest possible number you can represent with the normal number type in Javascript, that's

42
00:03:30,550 --> 00:03:31,930
9 quadrillion,

43
00:03:31,930 --> 00:03:38,290
so a relatively large number and just in case you're interested, it's basically the same as two at the

44
00:03:38,290 --> 00:03:45,340
power of 53 - 1 which you can calculate with the math object where you we have a power of

45
00:03:45,340 --> 00:03:46,600
function,

46
00:03:46,600 --> 00:03:51,550
basically the same function we wrote in the functions module with our recursion built into Javascript

47
00:03:51,550 --> 00:03:59,700
on the math object and there, you can enter two at the power of 53 - 1, this is the largest

48
00:03:59,700 --> 00:04:03,480
number Javascript can reliably produce.

49
00:04:03,480 --> 00:04:06,670
Now you might wonder why we then can also print this number,

50
00:04:06,690 --> 00:04:14,310
the thing simply is whilst Javascript can display this number, calculations with such a number will not really

51
00:04:14,310 --> 00:04:14,640
work,

52
00:04:14,640 --> 00:04:20,090
for example if we add one here to this limit, you see this number was not changed,

53
00:04:20,090 --> 00:04:23,300
we get the same result as when we just output the number.

54
00:04:23,430 --> 00:04:28,160
So that proves that this is the highest possible number we really can work with.

55
00:04:28,200 --> 00:04:33,240
Of course if you would add anything to that number, we again would enter that range where Javascript is

56
00:04:33,240 --> 00:04:39,180
not able of representing it and therefore working with that number is only possible if you deduct something

57
00:04:39,180 --> 00:04:42,990
from it basically or if you divide it by some other number,

58
00:04:42,990 --> 00:04:45,970
so that's how you can think about this maximum number.

59
00:04:46,140 --> 00:04:51,150
Of course you don't just have a maximum integer, you also have a MIN_SAFE_INTEGER which is essentially

60
00:04:51,150 --> 00:04:56,460
the same number with a negative sign in front of it and you also have a max value here,

61
00:04:56,460 --> 00:05:00,520
the difference is that this is actually a decimal number,

62
00:05:00,540 --> 00:05:06,810
so here we don't have the largest integer but the largest number we can express and in the end, that's

63
00:05:07,110 --> 00:05:12,980
1.79 and so on multiplied with e at the power of 308,

64
00:05:12,990 --> 00:05:20,400
so that's the biggest value you can work with in Javascript, not the biggest non-decimal value, so not

65
00:05:20,400 --> 00:05:26,940
the biggest integer but the biggest value in general and these biggest and smallest values and integers

66
00:05:27,150 --> 00:05:34,590
simply result from the fact how Javascript numbers are represented internally, how they are stored

67
00:05:34,590 --> 00:05:38,050
in these 64 bits in the end.

68
00:05:38,090 --> 00:05:43,440
Again, the resources attached to the last lecture are a great way of diving deeper into that if you want

69
00:05:43,440 --> 00:05:45,450
to learn all the theory behind that.

70
00:05:45,510 --> 00:05:52,290
The core takeaway here is that if you ever should work with such detailed or large numbers or integers,

71
00:05:53,340 --> 00:05:58,830
you want to be aware of the fact that there are limits, you want to be aware of the fact that for example

72
00:05:58,830 --> 00:06:04,520
you can't deduct anything from that number because it already is the smallest possible integer,

73
00:06:04,590 --> 00:06:10,440
you can't deduct any other integer I should say. You can't add anything to that number because it already

74
00:06:10,440 --> 00:06:13,910
is the biggest number you can represent in Javascript.

75
00:06:13,950 --> 00:06:20,220
Now if you still do add something to that number or you do deduct an integer from that number, you don't

76
00:06:20,220 --> 00:06:23,430
get an error as you see if I deduct 10 here,

77
00:06:23,520 --> 00:06:27,360
the thing just is Javascript gives you an imprecise result,

78
00:06:27,390 --> 00:06:34,320
for example here you see we exceed that bit range and therefore we simply get the result where Javascript

79
00:06:34,320 --> 00:06:40,150
cuts the number after its 64 bits and then converts this back to a decimal number,

80
00:06:40,200 --> 00:06:47,160
so in a decimal system I mean, with a base of 10 and that would then be this number. So it can be difficult

81
00:06:47,160 --> 00:06:52,050
to wrap your head around that because we're also working with two different number systems here,

82
00:06:52,050 --> 00:06:58,350
the decimal system with a base of 10 and the binary system with a base of two which of course gets used

83
00:06:58,380 --> 00:07:01,360
when we work with bits where we only have 0 and 1,

84
00:07:01,410 --> 00:07:08,190
that is what the binary system is all about and therefore, Javascript internally works with the binary

85
00:07:08,190 --> 00:07:13,310
system and then always converts it back to the decimal system when it outputs that number.

86
00:07:13,320 --> 00:07:17,890
This is how is such a strange result happens when we deduct 10 from this number,

87
00:07:17,970 --> 00:07:24,720
we exceed that bit range which is available for numbers and then Javascript just cuts off the bits

88
00:07:24,900 --> 00:07:30,800
and converts that bit, that binary number back to a decimal number which would be this one.

89
00:07:31,020 --> 00:07:38,520
Now again, it can be tricky, you rarely of course work with such large numbers or with numbers with that

90
00:07:38,520 --> 00:07:44,130
many decimal places here in the end but it's important to be aware of the limitations you might be facing.
