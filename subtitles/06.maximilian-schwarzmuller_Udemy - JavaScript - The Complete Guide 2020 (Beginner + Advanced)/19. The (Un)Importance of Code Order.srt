1
00:00:02,270 --> 00:00:04,880
Let's have a look at the order. Here,

2
00:00:04,880 --> 00:00:08,110
I'm defining my constant and my variable before I use it,

3
00:00:08,180 --> 00:00:08,450
right?

4
00:00:08,450 --> 00:00:13,730
I define current result right at the top of the script file and then here's the first time where I try

5
00:00:13,730 --> 00:00:19,000
to use it because I try to assign a new value to it and then I also use it down there when I forward

6
00:00:19,000 --> 00:00:23,650
it or when I pass the value that stored inside of it to output result.

7
00:00:23,720 --> 00:00:28,260
Now our code would break if I would move that all the way to the bottom of the script,

8
00:00:28,280 --> 00:00:35,430
so if I declare my variable here. Now if we reload this page, you see zero everywhere

9
00:00:35,430 --> 00:00:37,260
and if you open the developer tools again,

10
00:00:40,660 --> 00:00:46,150
in the console you'll see an error, cannot access current result before initialization.

11
00:00:46,150 --> 00:00:50,500
Now this error message which the browser throws at us is pretty clear,

12
00:00:50,710 --> 00:00:53,590
we're trying to use it here

13
00:00:53,830 --> 00:00:58,190
and actually the error message even gives us the line number of where this error occurred,

14
00:00:58,210 --> 00:01:00,980
it's this number you see here, eight.

15
00:01:01,000 --> 00:01:05,280
So you see in line number eight and indeed that's the problematic number here,

16
00:01:05,560 --> 00:01:11,290
we're getting an error because we're trying to assign something to the current result variable without

17
00:01:11,290 --> 00:01:13,260
defining it first.

18
00:01:13,270 --> 00:01:19,750
So in Javascript, when using the let or the const keyword which you should use, you need to declare

19
00:01:19,870 --> 00:01:27,130
your variables and constants before you use them and declare is the part where you create the variable

20
00:01:27,130 --> 00:01:28,470
with let or const.

21
00:01:28,540 --> 00:01:32,560
Then as mentioned for the same name, you must only declare it once,

22
00:01:32,560 --> 00:01:37,720
you can always reassign a value but with let and const, you only declare it once and you need to do

23
00:01:37,720 --> 00:01:43,000
that declaration before you first try to read from it or assign a value to it.

24
00:01:43,030 --> 00:01:47,040
You don't need to define it, so you don't need to initialize it with a value,

25
00:01:47,110 --> 00:01:53,590
if I just set up current result like this, this would actually be valid, if I now tried to execute it,

26
00:01:53,590 --> 00:01:57,870
you see this runs because I declared a variable before I then use it

27
00:01:57,970 --> 00:02:03,440
and since I use it by initializing it with a value here anyways or by assigning a value here anyways,

28
00:02:03,970 --> 00:02:06,740
I don't need to initialize and define it up there.

29
00:02:06,760 --> 00:02:11,680
So doing this up here is totally optional, we don't really need to do that because I'm assigning a value

30
00:02:11,710 --> 00:02:12,450
down there anyways

31
00:02:12,730 --> 00:02:15,910
but you need to declare it with the let keyword.

32
00:02:15,910 --> 00:02:18,260
Now for functions, that's actually a bit different.

33
00:02:18,370 --> 00:02:24,910
I could grab this function and move it to the bottom of this file and if I do this, please keep in mind

34
00:02:24,910 --> 00:02:26,950
that I do call it up here,

35
00:02:27,010 --> 00:02:34,930
so technically before I define it. Still if I now reload this page, we get the same result as before and

36
00:02:34,930 --> 00:02:40,400
if we have a look into the developer tools, you see no new error here.

37
00:02:40,510 --> 00:02:47,680
The reason for that is that for functions, we have a special behavior in Javascript. What Javascript actually

38
00:02:47,680 --> 00:02:53,620
does or what the browser actually does is that when it loads your script , it runs through it from top

39
00:02:53,620 --> 00:03:00,190
to bottom, it parses the entire script and actually it doesn't execute it right away, instead it just reads

40
00:03:00,190 --> 00:03:07,780
it from top to bottom and will take any functions it finds in there and automatically pull them to the

41
00:03:07,780 --> 00:03:09,750
top and be aware of them

42
00:03:09,760 --> 00:03:16,780
so to say. So it automatically registers all functions before it then really executes your script and

43
00:03:16,780 --> 00:03:19,650
that's just the special behavior Javascript has there.

44
00:03:20,350 --> 00:03:27,580
Therefore it's up to you whether you prefer to have your functions at the bottom of your script or towards

45
00:03:27,580 --> 00:03:30,210
the beginning or is somewhere in between,

46
00:03:30,250 --> 00:03:34,300
you just should try to find some consistent code style.

47
00:03:34,390 --> 00:03:41,260
Now I personally like to have my functions towards the beginning of the file in most cases because I

48
00:03:41,260 --> 00:03:46,120
think if you then read the file as a developer, you kind of see what's in there and if you then

49
00:03:46,120 --> 00:03:51,490
later see that I call add, you recall that you did see that function definition above and you don't need

50
00:03:51,490 --> 00:03:53,900
to scroll to the bottom of the file to find it

51
00:03:54,130 --> 00:03:58,720
but there also are developers who prefer to have their function definitions at the bottom of the file

52
00:03:59,290 --> 00:04:05,110
and ultimately, there is no wrong or right is up to you but you should find one approach and then kind

53
00:04:05,110 --> 00:04:07,920
of stick to it for this program you're writing.

54
00:04:07,990 --> 00:04:13,600
Of course, you can switch anytime in new applications you're creating or refactor your existing code

55
00:04:13,600 --> 00:04:15,870
and move your functions to the bottom or to the top

56
00:04:15,940 --> 00:04:22,450
if you kind of decide to go the opposite direction whilst in the project. Here again I'll have it towards

57
00:04:22,450 --> 00:04:30,370
the beginning but this is up to you. You also reformat that which I did with the autoformatting functionality

58
00:04:30,370 --> 00:04:32,320
I showed you in the first course module.
