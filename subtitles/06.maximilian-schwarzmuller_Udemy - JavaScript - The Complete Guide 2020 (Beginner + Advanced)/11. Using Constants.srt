1
00:00:02,250 --> 00:00:07,230
Now the output you'll get if you reload might not exactly be what you want because it actually yields

2
00:00:07,230 --> 00:00:10,250
14 here instead of 0

3
00:00:10,260 --> 00:00:15,870
but if you take a closer look at your code, that makes sense because current result is 0 here

4
00:00:16,110 --> 00:00:18,770
but then we calculate a new current result.

5
00:00:18,900 --> 00:00:25,950
So if I then use current result here, I of course take this current result and not the one I had up here.

6
00:00:26,000 --> 00:00:27,590
The reason for that is simple,

7
00:00:27,590 --> 00:00:31,190
your Javascript code gets executed from top to bottom,

8
00:00:31,220 --> 00:00:35,510
actually your HTML file gets parsed from top to bottom by the browser

9
00:00:35,630 --> 00:00:41,390
and if you then import some Javascript in there, that file gets evaluated and executed by the browser

10
00:00:41,690 --> 00:00:45,950
and the code in there also gets executed from top to bottom and

11
00:00:46,070 --> 00:00:51,590
that's the default Javascript behavior and hence of course if you do something in this line and then you

12
00:00:51,590 --> 00:00:57,030
use it in the line thereafter, you get the result from this line and not the result from the first line.

13
00:00:57,080 --> 00:01:01,700
It would be pretty bad if that would be the case because then you could never do anything in your code.

14
00:01:02,570 --> 00:01:10,460
So to print zero here, we would either have to do this before we execute this line or store this initial

15
00:01:10,460 --> 00:01:12,800
value in another variable

16
00:01:13,030 --> 00:01:19,380
and that's actually where we could use a constant. Let's say we're writing a program here where we want

17
00:01:19,380 --> 00:01:27,580
to initialize our current result with a default result value and I'm naming this constant here default

18
00:01:27,580 --> 00:01:28,110
result,

19
00:01:28,110 --> 00:01:29,570
you could pick any name you want.

20
00:01:29,700 --> 00:01:35,400
Now I'm using the const keyword to indicate that the value I store in here will never change and I store

21
00:01:35,430 --> 00:01:37,080
zero in here.

22
00:01:37,080 --> 00:01:41,280
Now we can use the default result here to initialize the variable,

23
00:01:41,280 --> 00:01:46,830
yes you can initialize a variable with the value of another variable or of another constant and

24
00:01:46,860 --> 00:01:49,140
that's exactly what I'm doing here.

25
00:01:49,170 --> 00:01:54,300
The result of that is if we now change current result, we can do that because that's a variable created

26
00:01:54,300 --> 00:01:57,780
with let, we couldn't change default result,

27
00:01:57,780 --> 00:02:04,350
so if I would try to do that here and I now save this, you will actually see zero here because our

28
00:02:04,350 --> 00:02:07,770
script broke and you can see that in an even better way

29
00:02:07,860 --> 00:02:13,860
if you go to the developer tools here in Chrome which I recommend that you use, you'll find those in the

30
00:02:13,860 --> 00:02:19,020
view menu and then developer, developer tools or by using the shortcut you see there.

31
00:02:19,020 --> 00:02:21,120
Now what are these developer tools?

32
00:02:21,120 --> 00:02:26,100
I'll have a whole module after this module where we dive deeper into them and what you can do with them,

33
00:02:26,100 --> 00:02:31,470
in general that's simply a tool built into the browser which you don't typically see or use if you're

34
00:02:31,470 --> 00:02:37,800
using the browser as a normal user but as a developer, this is a special feature built into the

35
00:02:37,800 --> 00:02:45,690
browser that helps us understand our code, look behind the scenes, have some insights in how our code

36
00:02:45,780 --> 00:02:54,030
executes, trace and fix possible errors and also see error messages or info messages being output here.

37
00:02:54,030 --> 00:03:00,900
So these are the developer tools, a crucial feature which do not just exist in Chrome, Firefox and Edge

38
00:03:00,960 --> 00:03:06,570
also have developer tools built-in, Chrome just has very good ones and therefore that will be

39
00:03:06,570 --> 00:03:12,240
the browser I use in this course but again, I'll have a whole module where we dive a bit deeper into

40
00:03:12,240 --> 00:03:14,610
developer tools and what we can do with them

41
00:03:14,730 --> 00:03:21,740
after this module. And in these tools if you go to the console here, so to console, you should see an error,

42
00:03:21,920 --> 00:03:23,750
assignment constant variable.

43
00:03:23,750 --> 00:03:25,640
That's a problem,

44
00:03:25,640 --> 00:03:29,060
your browser complains about it because that's not allowed.

45
00:03:29,060 --> 00:03:32,950
So that's not allowed but assigning to current result is allowed because that's a variable

46
00:03:33,080 --> 00:03:39,440
but since I now store this default result which I then use to initialize current result, I can also refer

47
00:03:39,440 --> 00:03:47,080
to this down there when I output my text or when I generate my text. We can refer to it here and here,

48
00:03:47,090 --> 00:03:49,910
so I'm referring to default result in two places of my code,

49
00:03:49,910 --> 00:03:53,150
I'm never changing it though because that wouldn't be allowed.

50
00:03:53,770 --> 00:04:00,460
Now we introduced a constant and you might be wondering if we're not implicitly still changing the constant

51
00:04:00,460 --> 00:04:07,140
with our code because I initialize current result with the value which is stored in my constant and

52
00:04:07,150 --> 00:04:13,420
since I thereafter change current result, you could think that implicitly we also change the constant, right,

53
00:04:13,450 --> 00:04:16,570
because we set those equal in this line

54
00:04:16,570 --> 00:04:23,860
but it's important to understand that indeed we are not changing the constant here because here, we are

55
00:04:23,860 --> 00:04:28,930
copying the value that's in a constant into this brand new variable.

56
00:04:28,930 --> 00:04:35,920
So if we thereafter change the variable, we're changing the copy, the original constant and its value are

57
00:04:35,980 --> 00:04:36,630
untouched

58
00:04:36,640 --> 00:04:42,850
if we then change the variable, that's something important to keep in mind here or to understand. And

59
00:04:42,850 --> 00:04:44,300
therefore now if I reload,

60
00:04:44,510 --> 00:04:51,370
we see this result and we see the correct text representation of this calculation because we're now

61
00:04:51,460 --> 00:04:57,070
using this correctly and we're building a text with our default value which never changes.

62
00:04:57,100 --> 00:05:00,220
So this shows us constants and variables in action,

63
00:05:00,280 --> 00:05:06,970
it shows us operators both used with numbers and also with text and we get something on the screen, not

64
00:05:06,970 --> 00:05:08,620
too bad to get started with.
