1
00:00:02,250 --> 00:00:07,710
So we wrote to our first line of code and we're setting a variable here and this variable of course

2
00:00:07,890 --> 00:00:09,840
doesn't do anything yet.

3
00:00:09,840 --> 00:00:11,610
Now let's do something simple,

4
00:00:11,610 --> 00:00:18,630
let's for the moment not care about what the user enters here but let's make sure that we actually right

5
00:00:18,630 --> 00:00:26,220
away have a simple mathematical operation where we output the result down here in the result part of

6
00:00:26,220 --> 00:00:34,370
this screen and therefore, I want to set current result to a new value and that new value will later

7
00:00:34,370 --> 00:00:35,380
be the user input

8
00:00:35,390 --> 00:00:40,100
but since we don't really fetch this yet, I'll use a dummy value here, let's say 10

9
00:00:40,100 --> 00:00:49,470
but you can use any number you want and add this to the current result, so let's say current result plus

10
00:00:49,470 --> 00:00:54,000
10 and then store this value back in current result.

11
00:00:54,000 --> 00:00:56,640
So here a couple of things are happening,

12
00:00:56,700 --> 00:01:01,800
I am again referring to the current result variable here on the left side of the equal sign and on the

13
00:01:01,800 --> 00:01:03,390
right side

14
00:01:03,570 --> 00:01:09,840
and if we start on the right side, I'm using the current value stored in current result and I'm adding

15
00:01:09,990 --> 00:01:12,150
a value to it, in this case 10,

16
00:01:12,270 --> 00:01:15,480
I'm adding by using this plus operator.

17
00:01:15,480 --> 00:01:18,050
Now operators are something we haven't heard about yet,

18
00:01:18,060 --> 00:01:27,050
what are operators? Operators are syntax features or a syntax feature in Javascript that allows us to

19
00:01:27,470 --> 00:01:29,090
manipulate values

20
00:01:29,090 --> 00:01:35,260
you could say and there are the typical mathematical operators you're used to - plus, minus,

21
00:01:35,300 --> 00:01:41,690
then the asterisk operator, the asterisk character here to multiply two numbers and the slash to divide

22
00:01:41,690 --> 00:01:43,340
two numbers.

23
00:01:43,340 --> 00:01:49,190
There also is a modulus operator, the percentage sign which divides two numbers but doesn't return the

24
00:01:49,190 --> 00:01:50,230
result of the division

25
00:01:50,240 --> 00:01:51,240
but the remainder,

26
00:01:51,260 --> 00:01:59,870
so the part that remains if clean division without a decimal value as a result isn't possible and there

27
00:01:59,930 --> 00:02:07,960
also is the exponentiation operator which allows you to use exponentiation on a number.

28
00:02:07,990 --> 00:02:13,250
Now these are the mathematical operators which you typically also know from math,

29
00:02:13,270 --> 00:02:19,150
there also are other operators in Javascript, like the assignment operator which we already use to assign

30
00:02:19,240 --> 00:02:26,210
a value to a variable, the equal sign. So here in this line of code, we're using two operators, the plus

31
00:02:26,210 --> 00:02:28,730
operator to combine two numbers

32
00:02:28,730 --> 00:02:35,450
and now this combination, this operator yields the result of this mathematical operation and we then

33
00:02:35,930 --> 00:02:42,980
assign this result we're getting here with the equal sign to the value on the left or to the variable

34
00:02:43,100 --> 00:02:44,050
on the left.

35
00:02:44,060 --> 00:02:49,980
So here, current result gets overwritten with the result of this operation

36
00:02:50,150 --> 00:02:52,790
and now we use current result on both sides of the equal sign

37
00:02:52,790 --> 00:02:55,060
but the right side will execute first,

38
00:02:55,100 --> 00:02:56,850
that's something you can just keep in mind

39
00:02:56,960 --> 00:02:57,620
and therefore

40
00:02:57,620 --> 00:03:05,750
we'll use the old result 0 here, add 10 and therefore we now have 10 as a total result

41
00:03:05,750 --> 00:03:08,080
and then we overwrite current result with it.

42
00:03:08,090 --> 00:03:13,390
So we only overwrite it after we're done with this calculation, so that we don't try to overwrite it with

43
00:03:13,390 --> 00:03:16,760
a value we depend on or anything like that.

44
00:03:16,760 --> 00:03:23,180
So now current result, after this line was executed, will store of value of 10. Now to output this, we can

45
00:03:23,180 --> 00:03:30,190
use one of the things I'm providing here in vendor and we'll learn what exactly that is in just a second,

46
00:03:30,260 --> 00:03:37,070
for now we'll use this output result thing by simply writing output result here and then adding parentheses,

47
00:03:37,070 --> 00:03:46,250
opening and closing and in there, you can pass in current result, just like this, also add a comma and

48
00:03:46,250 --> 00:03:50,350
thereafter two single quotes with nothing in between.

49
00:03:50,360 --> 00:03:53,410
Again, I'll come back to what this is and what this does 

50
00:03:53,420 --> 00:04:00,590
in just a second. If you do that and you now reload your page, you should now see result 10 down there and

51
00:04:00,710 --> 00:04:04,600
that's just a result of our code which executed here.

52
00:04:04,800 --> 00:04:07,930
We're calculating this result, storing it here

53
00:04:07,970 --> 00:04:11,270
and then what this thing here which we're getting from the vendor file,

54
00:04:11,270 --> 00:04:17,450
well what this does is actually it just takes whatever we pass in here and outputs this in this part

55
00:04:17,450 --> 00:04:22,880
of the HTML page and throughout the course, it will become clearer how this works, for the moment you can just

56
00:04:22,880 --> 00:04:31,150
take it for granted. So we had a first basic look at a variable, at an operation and then at this thing

57
00:04:31,150 --> 00:04:33,140
here which we don't really understand,

58
00:04:33,160 --> 00:04:35,180
let me come back to that operation. Here

59
00:04:35,260 --> 00:04:41,440
we use two operators but as I mentioned, there are a couple of operators available, actually more than

60
00:04:41,440 --> 00:04:42,460
the ones I just showed

61
00:04:42,460 --> 00:04:49,330
but even with those which I did show, all these basic mathematical operators, you can do a bunch of things

62
00:04:49,750 --> 00:04:54,330
and you're not limited to two operators per line or to one,

63
00:04:54,370 --> 00:05:01,810
you can also add the asterisk here, the multiplication operator and multiply this by three and Javascript

64
00:05:01,810 --> 00:05:08,890
by default follows normal mathematical rules where it will now first execute 10 times 3 and then

65
00:05:08,980 --> 00:05:10,880
add this to current result.

66
00:05:11,110 --> 00:05:17,440
You could change that order however by adding parentheses, just like you do it in math. If I add parentheses

67
00:05:17,440 --> 00:05:18,150
around that,

68
00:05:18,160 --> 00:05:25,300
now Javascript will first add ten to current result and then multiply the result of this with three

69
00:05:25,450 --> 00:05:30,650
and of course we can then also divide this by two and subtract one or whatever you want,

70
00:05:30,700 --> 00:05:37,660
you can have any mathematical equation here, any mathematical operation here as long as it should be

71
00:05:37,750 --> 00:05:43,270
where you can use parentheses to group the different mathematical calculations together if you need

72
00:05:43,270 --> 00:05:44,640
to do that.

73
00:05:44,650 --> 00:05:54,370
So now if I would run this for example, I got a result of 14 because we have 0 plus 10 times 3 divided

74
00:05:54,370 --> 00:05:57,660
by 2 is 15 minus 1 is 14,

75
00:05:57,670 --> 00:06:04,900
so that makes sense. Now with that out of the way, let's think a bit more about the that values we're

76
00:06:04,900 --> 00:06:11,590
actually working with. I added a number here but numbers are not the only values you can use in Javascript

77
00:06:11,800 --> 00:06:15,190
and actually in all other modern programming languages.
