WEBVTT
1
00:00:02.230 --> 00:00:04.850
So now what's the problem with this?

2
00:00:04.870 --> 00:00:10.330
Let's go back to the place where we use get formatted title and let's go back to destructuring.

3
00:00:10.330 --> 00:00:12.880
So I pull out get formatted title from movie,

4
00:00:12.910 --> 00:00:18.460
we can still do that even with the shorter function or method to be precise syntax,

5
00:00:18.460 --> 00:00:23.920
it still can be pulled out with object destructuring but of course now we just use it like that.

6
00:00:23.920 --> 00:00:28.840
We pulled it out, stored it in a brand new constant in the end and this constant now holds a pointer

7
00:00:28.870 --> 00:00:30.630
at this function in the object

8
00:00:30.640 --> 00:00:33.060
so now we can execute it like that.

9
00:00:33.150 --> 00:00:39.720
Now if we do that and we reload and we enter a new movie here, Javascript level 5, you'll see I get an

10
00:00:39.780 --> 00:00:45.290
error and it's not getting added down there, cannot read property title of undefined,

11
00:00:45.590 --> 00:00:50.970
now where is this coming from? It's coming from objects.js line 58 and if we have a look,

12
00:00:51.150 --> 00:00:59.350
that's the line where I try to dive in to info and title. Now since title can't be found on undefined, it

13
00:00:59.350 --> 00:01:05.710
means that info basically returned undefined but we do have this info property which holds an object

14
00:01:05.710 --> 00:01:07.510
in movie so what's wrong?

15
00:01:07.510 --> 00:01:13.420
Remember, this does not automatically refer to the object that kind of surrounds it,

16
00:01:13.560 --> 00:01:18.700
it instead refers to who or what was responsible for calling this function

17
00:01:18.700 --> 00:01:24.020
and I mentioned that the best way to memorize this is to look in front of that function.

18
00:01:24.040 --> 00:01:30.670
Previously, we had movie. and therefore movie, that object, was in the end responsible for triggering this

19
00:01:30.670 --> 00:01:31.510
function.

20
00:01:31.510 --> 00:01:33.060
Now we have nothing there

21
00:01:33.070 --> 00:01:41.800
and then the thing responsible for triggering the function is our global execution context. In non-strict

22
00:01:41.800 --> 00:01:43.150
mode which I'm using here,

23
00:01:43.150 --> 00:01:51.220
this will then actually refer to the window object which I can prove. If we console log this in here

24
00:01:51.220 --> 00:01:57.250
to see what it's actually referring to and we save that and reload and we give this another try with

25
00:01:57.250 --> 00:02:00.220
some dummy values here, it doesn't really matter,

26
00:02:00.220 --> 00:02:01.680
you see this here,

27
00:02:01.750 --> 00:02:07.440
this is what this refers to, it's my window object and that's just the default in non-strict mode and

28
00:02:07.540 --> 00:02:12.280
then this, if it refers to nothing else, refers to the global object.

29
00:02:12.430 --> 00:02:18.340
If we were in strict mode which we can quickly enter of course by just adding use strict at the top,

30
00:02:18.370 --> 00:02:24.370
so if we were in strict mode, if we tried it again, you will see that this will actually be undefined,

31
00:02:24.880 --> 00:02:28.170
either way it will never refer to my movie.

32
00:02:28.180 --> 00:02:34.180
So how can we work around that then, how can we make sure that this refers to the right thing? We can

33
00:02:34.180 --> 00:02:38.550
do that with something we already learned about earlier in this course,

34
00:02:38.560 --> 00:02:45.820
the good old bind method. In the past we used bind to preconfigure which arguments a function takes

35
00:02:46.000 --> 00:02:50.740
which we don't execute on our own but which for example is added to an event listener,

36
00:02:50.770 --> 00:02:56.470
so for example we would have used the bind in situations like this if add movie handler would require

37
00:02:56.470 --> 00:02:59.910
certain arguments which it doesn't but if it would need that.

38
00:03:00.190 --> 00:03:06.670
Now we can also use bind to not only preconfigure arguments a function will get but also to preconfigure

39
00:03:06.730 --> 00:03:15.440
what this will refer to. So in this case here, of course one fix would be to simply go back to movie.,

40
00:03:15.530 --> 00:03:15.800
right,

41
00:03:15.800 --> 00:03:18.250
this worked and there is nothing wrong with it

42
00:03:18.470 --> 00:03:24.250
but if that isn't an option or for whatever reason we don't want to do it, we can use bind here as well,

43
00:03:24.320 --> 00:03:25.550
not here,

44
00:03:25.550 --> 00:03:34.260
you can't add bind here like this but you can actually do it before you call that function here.

45
00:03:34.430 --> 00:03:40.500
So we could actually use let here instead of const so that I can assign a new value to get formatted

46
00:03:40.540 --> 00:03:46.550
title and then we could set get formatted title, which is a variable that holds a pointer at a function,

47
00:03:47.060 --> 00:03:54.290
equal to get formatted title but now also add bind here and now it's this first argument which you pass

48
00:03:54.290 --> 00:03:56.610
to bind which matters. Previously

49
00:03:56.660 --> 00:04:00.230
I said this doesn't matter because we hadn't learned about this yet,

50
00:04:00.230 --> 00:04:05.390
so we set it to null in the past and then we added our arguments which was the thing we were interested

51
00:04:05.390 --> 00:04:06.620
in back then,

52
00:04:06.650 --> 00:04:11.690
now we might still be interested in parsing in certain arguments and we can still add them just as before

53
00:04:11.690 --> 00:04:13.400
if that's the case, here

54
00:04:13.400 --> 00:04:15.230
however that's not what I'm interested in

55
00:04:15.260 --> 00:04:20.810
but instead now the first argument is the important thing. You can see, it's the this arg, it's the end

56
00:04:21.040 --> 00:04:26.570
what you want this to refer to it inside of that function.

57
00:04:26.570 --> 00:04:32.950
Now we can set this to this to make sure that this inside of the function refers to the same thing

58
00:04:33.050 --> 00:04:34.700
this refers to here

59
00:04:34.850 --> 00:04:40.160
but that's not what we would want because this here would not refer to movie,

60
00:04:40.160 --> 00:04:44.180
you can always console log this to see what it refers to.

61
00:04:44.630 --> 00:04:50.410
So we don't want to pass it this here but if you don't have to, we can pass in movie for example

62
00:04:50.570 --> 00:04:59.510
and now we're saying when this function executes which it does here, then this inside of the function,

63
00:04:59.510 --> 00:05:06.140
so here this keyword should not refer to what it normally would refer to, which is the thing that

64
00:05:06.140 --> 00:05:13.100
is responsible for executing the function but instead in this example here, it should refer to this movie

65
00:05:13.100 --> 00:05:20.590
object and therefore we now fix this. If we now save that and we reload here and again I enter Javascript

66
00:05:21.220 --> 00:05:27.820
level 5 and I click add movie, it works as before and this is our console log where we log this inside

67
00:05:27.850 --> 00:05:32.480
of the get formatted title function and you see here indeed, that is our movie.

68
00:05:32.500 --> 00:05:37.810
So this refers to the right thing as we can also tell by the fact that we're not getting an error and

69
00:05:37.810 --> 00:05:39.480
that we do have the right output down there.
