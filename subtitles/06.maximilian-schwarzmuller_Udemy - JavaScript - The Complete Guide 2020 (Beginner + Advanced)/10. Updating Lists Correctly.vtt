WEBVTT
1
00:00:02.660 --> 00:00:04.730
So now what about adding a product?

2
00:00:04.730 --> 00:00:09.740
Well when we add a product, we obviously want to create a new product and then add to the list

3
00:00:09.740 --> 00:00:15.230
but we want to add it to the list in a way that doesn't affect the other product items so that not everything

4
00:00:15.230 --> 00:00:16.030
is re-rendered

5
00:00:16.030 --> 00:00:25.210
just because we added a product . S therefore when the mode is is adding here, I want to create a new

6
00:00:25.450 --> 00:00:26.100
item,

7
00:00:26.110 --> 00:00:32.970
so I basically want to execute this code here, though I will say we can optimize this as well but then

8
00:00:32.970 --> 00:00:39.100
I want to add to the list in a way that doesn't negatively impact the other parts, that doesn't re-render

9
00:00:39.150 --> 00:00:40.350
everything.

10
00:00:40.380 --> 00:00:48.340
So first of all let's outsource this create element code here so that we can reuse it by grabbing all

11
00:00:48.340 --> 00:00:52.180
that code inside of that for each anonymous function here

12
00:00:55.340 --> 00:00:55.940
like

13
00:00:58.680 --> 00:01:01.730
this here without the product list

14
00:01:01.740 --> 00:01:10.850
el append child code and add this to create element. Now in there, we'll need a product argument, we'll also

15
00:01:10.850 --> 00:01:17.110
need a prodId and all the places where we access product.id, let's use prodId instead

16
00:01:19.850 --> 00:01:21.680
and we'll need a pointer at that

17
00:01:21.740 --> 00:01:26.810
delete product fn, delete product function which I'm using here.

18
00:01:27.050 --> 00:01:33.770
Now we can call create element and this function should also return something, it should return that

19
00:01:33.780 --> 00:01:36.710
new list element, the new product element

20
00:01:36.740 --> 00:01:39.420
for the DOM which is created here in the end.

21
00:01:39.580 --> 00:01:46.820
So now we can call create element, call it here in render products, there we have our new list element

22
00:01:46.820 --> 00:01:53.000
which is the result of calling create element with product, product.id and delete

23
00:01:55.670 --> 00:02:02.620
product fn which is an argument we're getting here which I'm just forwarding to create element and

24
00:02:02.680 --> 00:02:11.320
now here in update products, we can also call create element, forward product and prodId, forward

25
00:02:11.320 --> 00:02:20.210
the delete product function and what we get back is our new product el or new list el, of course we can

26
00:02:20.210 --> 00:02:26.200
use the same name as up there, just using a different one to avoid confusion and now we want to add this

27
00:02:26.200 --> 00:02:32.470
to the DOM and actually we want to add it to the DOM such that we add it in front of the other elements

28
00:02:32.500 --> 00:02:38.770
because the logic we have in product management for adding a product is also that we unshift it, so

29
00:02:38.770 --> 00:02:44.820
that we add it at the beginning of the array, so we should reflect this also in our rendering method.

30
00:02:44.860 --> 00:02:52.000
So here, I now need access to the place in DOM where this should get rendered and I can get this here

31
00:02:52.720 --> 00:02:57.820
in the same way I'm getting it in render products, it's that element with the product list ID, that's

32
00:02:57.820 --> 00:02:59.440
in the unordered list.

33
00:02:59.440 --> 00:03:04.780
Now since I need access to this both here in render products and in update products, it makes sense

34
00:03:04.780 --> 00:03:11.350
to outsource this and turn this into a global variable here.

35
00:03:11.360 --> 00:03:19.210
So now with that, when we use product list el like we do here in render products, it will still be available

36
00:03:20.930 --> 00:03:27.500
and now we can also use it here in update products, product list el and now insert adjacent element after

37
00:03:27.500 --> 00:03:32.870
begin to add it inside of the unordered list but at the very beginning of it, we want to add that new

38
00:03:32.870 --> 00:03:38.930
product element and now we just have to make sure that we call update products from inside the product

39
00:03:38.930 --> 00:03:41.240
management file when we add a product.

40
00:03:41.240 --> 00:03:45.130
So here at the moment we call render products, this is not what we want to do,

41
00:03:45.200 --> 00:03:52.710
instead here in the add product function, we want to call update products and forward the new product

42
00:03:52.710 --> 00:04:01.700
we created, the new product.id so that we also pass on the product.id in a dedicated way. The

43
00:04:01.700 --> 00:04:13.690
delete product function pointer pointing at this delete product function here and also true for is adding.

44
00:04:15.090 --> 00:04:19.980
Another implication of this is now that we can remove the render products import here because we're

45
00:04:19.980 --> 00:04:21.680
not needing this here anymore

46
00:04:21.780 --> 00:04:29.320
and with that if we now save that, we should have a set up where we don't re-render everything if we

47
00:04:29.380 --> 00:04:30.980
add an item either.

48
00:04:31.240 --> 00:04:33.940
So let's again have a look at all the list items here on the right.

49
00:04:33.940 --> 00:04:36.000
and let's add a new product here

50
00:04:36.260 --> 00:04:43.300
and if we click add product now, okay this actually reloads because in shop.js where I have my dynamic

51
00:04:43.300 --> 00:04:50.230
import function here, we should call event prevent default here otherwise when we call it in the real

52
00:04:50.230 --> 00:04:54.790
add product function this will be too late because this happens asynchronously after this extra script

53
00:04:54.790 --> 00:04:55.600
was downloaded,

54
00:04:55.780 --> 00:04:58.420
so we need to do it here, a little oversight from my side,

55
00:04:58.420 --> 00:04:59.630
sorry about that,

56
00:04:59.820 --> 00:05:03.690
it also means we can remove event prevent default here in product-management.js

57
00:05:03.730 --> 00:05:09.040
in the add product function but now with that, let's try it again.

58
00:05:09.400 --> 00:05:12.350
Let's now enter test five here or whatever you want,

59
00:05:12.430 --> 00:05:18.160
watch the list items on the right and click add product and you'll see this first one flashed, the other

60
00:05:18.160 --> 00:05:21.930
ones didn't because they weren't re-rendered.

61
00:05:21.970 --> 00:05:26.530
So now with that, we actually implemented a huge improvement,

62
00:05:26.530 --> 00:05:32.470
we might not really see it here in performance because of the simplicity of this app but still, this is

63
00:05:32.470 --> 00:05:36.060
something which can really slow down bigger apps if you're doing it wrong.

64
00:05:36.130 --> 00:05:39.870
So let's now delete something again here and take a snapshot of that,

65
00:05:39.940 --> 00:05:45.300
well as you can tell, if we expand the main thread here,

66
00:05:48.780 --> 00:05:56.150
we didn't gain that much here but actually, it's a bit faster than it was before but we could speed it

67
00:05:56.150 --> 00:05:57.860
up a little bit at least

68
00:05:57.980 --> 00:06:01.390
and I can tell you that this is definitely better than what we had before

69
00:06:01.550 --> 00:06:07.880
and still, it's not optimal yet, our rendering code isn't perfect yet. We're creating a bunch of DOM nodes

70
00:06:07.940 --> 00:06:15.170
separately and we can actually do this with less code and with a bit better code. So let's revisit

71
00:06:15.170 --> 00:06:17.770
the create element function here.

72
00:06:17.960 --> 00:06:22.970
Of course we need to create our list item element here but the h2 and the p tags, we don't really need

73
00:06:22.970 --> 00:06:29.410
to create them like this, instead what we could do here is we could reach out to the new list element

74
00:06:29.880 --> 00:06:34.210
and set its innerHTML here to a template literal like this

75
00:06:34.210 --> 00:06:43.500
and in here, then add a h2 tag and a paragraph tag and then here we dynamically output whatever the

76
00:06:43.500 --> 00:06:44.610
user entered,

77
00:06:44.610 --> 00:06:50.160
so in this case the product title and then here, also the product price.

78
00:06:50.250 --> 00:06:52.840
Now beware of cross site scripting attacks here

79
00:06:52.850 --> 00:06:57.400
as you learned in the Security Module, you want to sanitize this content

80
00:06:57.420 --> 00:07:02.520
normally, here we're not doing it and the user could therefore inject malicious code here.

81
00:07:02.550 --> 00:07:03.890
So this is a security issue

82
00:07:03.930 --> 00:07:08.280
and you normally want to sanitize therefore, I'm just not doing it here because I want to focus on the

83
00:07:08.280 --> 00:07:09.670
performance part.

84
00:07:09.750 --> 00:07:16.770
I will create the button like this because there, I will also add an event listener. These two lines can

85
00:07:16.770 --> 00:07:17.190
go now,

86
00:07:17.220 --> 00:07:23.830
they were related to the previous way of creating separate nodes for the h2 and the paragraph tag. For

87
00:07:23.830 --> 00:07:28.480
the button here instead of setting innerHTML, we can also use text content which is a bit better because

88
00:07:28.480 --> 00:07:34.870
we are only setting text here, so no need to use innerHTML. Adding the event listener like this is

89
00:07:34.870 --> 00:07:40.150
fine and then down there, we don't need to add the title and price element anymore because we're using

90
00:07:40.150 --> 00:07:43.370
innerHTML, instead we just need to add the button at the end.

91
00:07:43.480 --> 00:07:52.180
So this is now actually a better version of that snippet, it's less code and simply a bit better. With

92
00:07:52.180 --> 00:07:58.150
this now, I'm quite happy with our rendering code here and you can definitely always find something which

93
00:07:58.150 --> 00:08:04.840
you can improve but for now this is good and the part where we made sure that we don't unnecessarily

94
00:08:04.870 --> 00:08:08.740
re-render the entire list is of course the most important improvement we achieved here.
