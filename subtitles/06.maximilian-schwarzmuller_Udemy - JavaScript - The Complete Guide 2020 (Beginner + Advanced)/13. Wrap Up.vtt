WEBVTT
1
00:00:02.530 --> 00:00:06.390
So that is it for constructor functions and prototypes.

2
00:00:06.790 --> 00:00:07.780
A core concept,

3
00:00:07.840 --> 00:00:10.450
you won't have to write this code a lot

4
00:00:10.450 --> 00:00:14.140
or actually that depends on the job you're on, the project you're on,

5
00:00:14.170 --> 00:00:17.020
you might end up in jobs where you have to write that code

6
00:00:17.020 --> 00:00:20.280
but in modern Javascript you typically work with classes,

7
00:00:20.410 --> 00:00:24.030
you can extend other classes, still under the hood

8
00:00:24.040 --> 00:00:29.890
as I showed you, this embraces this prototype concept and you need to know that, you need to know that

9
00:00:29.890 --> 00:00:35.530
because it helps you implement performance optimizations like this one or use the proper syntax there,

10
00:00:35.560 --> 00:00:36.730
at least be aware of it,

11
00:00:36.760 --> 00:00:38.370
that's already a plus

12
00:00:38.530 --> 00:00:43.810
and it also helps you ace your interviews and in general get a feeling for the language you're working

13
00:00:43.810 --> 00:00:44.310
with.

14
00:00:44.410 --> 00:00:49.270
You don't just want to copy and paste snippets, you want to understand what's happening behind the scenes

15
00:00:49.640 --> 00:00:56.380
and in this module, you learned that classes are in the end syntactical sugar for prototypes and constructor

16
00:00:56.380 --> 00:01:02.580
functions. Though very important, let me come back to that slide I showed you earlier regarding constructor

17
00:01:02.580 --> 00:01:04.200
function versus classes,

18
00:01:04.350 --> 00:01:10.500
there also are differences, differences which you at least should be aware of. Constructor functions are

19
00:01:10.500 --> 00:01:16.770
these functions which you can call with new, so that they don't behave like normal functions but differently.

20
00:01:16.800 --> 00:01:23.280
Now classes actually have to be used with new, if you try to call a class without new, it'll just fail.

21
00:01:24.640 --> 00:01:30.660
Another difference is that when you create an object with the help of a constructor function, all properties

22
00:01:30.660 --> 00:01:33.490
and methods are enumerable by default.

23
00:01:33.510 --> 00:01:39.750
Remember at the end of last module, I had a look at object descriptors and I showed you this idea of

24
00:01:39.880 --> 00:01:46.710
enumerability and how you can turn it on or off and how that affects what gets used or what gets output

25
00:01:46.710 --> 00:01:51.960
in a for/in loop. For objects based on these old school constructor functions

26
00:01:51.960 --> 00:01:58.590
if we want to call them like this, every method is treated as an enumerable property. For classes, that's

27
00:01:58.590 --> 00:02:03.770
different, there methods are non-enumerable by default.

28
00:02:03.780 --> 00:02:09.360
One other difference which I want to highlight is that constructor functions by default don't use strict

29
00:02:09.360 --> 00:02:09.720
mode,

30
00:02:09.750 --> 00:02:13.760
you would have to turn it on, classes on the other hand do use strict mode.

31
00:02:13.950 --> 00:02:19.940
So all behaviors you have in strict mode, you have that turned on in classes out of the box.

32
00:02:20.070 --> 00:02:24.170
Now these are all not the most important things to know,

33
00:02:24.210 --> 00:02:30.450
the thing regarding methods not being enumerable is probably the most important one but still for completeness,

34
00:02:30.660 --> 00:02:32.460
combined with all the other things,

35
00:02:32.490 --> 00:02:35.280
this is what you should take away from this module and

36
00:02:35.430 --> 00:02:41.460
with that, you're well prepared to work with classes, to inherit, to extend, to work with properties and

37
00:02:41.460 --> 00:02:41.900
methods

38
00:02:41.940 --> 00:02:46.830
and you also have the theoretical foundation to understand what's happening behind the scenes.
