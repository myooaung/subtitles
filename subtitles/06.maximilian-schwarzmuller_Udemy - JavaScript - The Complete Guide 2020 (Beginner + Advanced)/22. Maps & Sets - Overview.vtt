WEBVTT
1
00:00:02.360 --> 00:00:04.820
That is it for arrays,

2
00:00:04.820 --> 00:00:10.790
lot of information about arrays, lots of things you will of course see throughout this course and in many

3
00:00:10.790 --> 00:00:14.090
of the projects you will work on as a Javascript developer.

4
00:00:14.090 --> 00:00:17.550
Now definitely of course take the time to go through these things again,

5
00:00:17.570 --> 00:00:19.760
have a look at some of these important array methods,

6
00:00:19.790 --> 00:00:21.890
get acquainted to them, practice with them,

7
00:00:21.890 --> 00:00:23.560
get a feeling for them.

8
00:00:23.630 --> 00:00:29.210
For now I will move on to two totally different constructs or iterables though or not

9
00:00:29.210 --> 00:00:37.220
totally different but quite different which also exist besides arrays and that are maps and sets.

10
00:00:37.220 --> 00:00:41.870
So in Javascript, we got three major iterable data structures

11
00:00:41.870 --> 00:00:47.120
you could say. We got arrays but we also got sets and we got maps.

12
00:00:47.150 --> 00:00:51.310
Now one important thing right away, arrays are the most important one,

13
00:00:51.320 --> 00:00:57.200
the one you work with most often and objects of course but objects also are a bit more than just

14
00:00:57.200 --> 00:01:03.340
a data container, something you'll especially see once we dive deeper into objects in the objects

15
00:01:03.350 --> 00:01:04.560
deep dive module.

16
00:01:04.670 --> 00:01:11.150
So when we talk about lists of data or storing kind of connected data, arrays are the main storage

17
00:01:11.450 --> 00:01:13.030
for storing that data

18
00:01:13.130 --> 00:01:18.530
and there you can have nested data of any kind, of any length, you can mix data types.

19
00:01:18.530 --> 00:01:22.280
It's an iterable as you learned with many special array methods available,

20
00:01:22.280 --> 00:01:28.220
all these great methods which we used and a couple of key characteristics of arrays are that the order

21
00:01:28.220 --> 00:01:29.690
of elements is guaranteed,

22
00:01:29.720 --> 00:01:33.680
so the order doesn't magically change. Duplicates are allowed,

23
00:01:33.680 --> 00:01:39.530
you can have the same number twice in an array for example and you have a zero based index to access

24
00:01:39.560 --> 00:01:39.980
elements,

25
00:01:39.980 --> 00:01:44.630
these are things you of course learned throughout this course and especially throughout this module.

26
00:01:44.660 --> 00:01:52.420
Now what are sets then? Sets are also data structures which store nested data of any kind in length,

27
00:01:52.430 --> 00:01:56.390
so you can have sets of arrays, sets of numbers,

28
00:01:56.390 --> 00:01:57.690
anything goes

29
00:01:57.950 --> 00:02:02.750
and it's an iterable with some special set methods but not with all these array methods.

30
00:02:02.750 --> 00:02:08.180
So these array methods are not supported on sets, instead there are standalone set methods which are mostly

31
00:02:08.180 --> 00:02:14.450
there to manage the data in the set though, not for transforming it and so on, though you can always, what

32
00:02:14.450 --> 00:02:20.420
you already learned, convert any iterable to an array with the array.from method.

33
00:02:20.480 --> 00:02:25.730
Now what are the key characteristics of a set and how does it differ from an array then other than that

34
00:02:25.730 --> 00:02:27.490
it misses some methods?

35
00:02:27.500 --> 00:02:33.200
Well in a set, the order of elements is not guaranteed which might sound bad but that isn't necessarily

36
00:02:33.200 --> 00:02:33.650
a problem,

37
00:02:33.650 --> 00:02:39.520
you don't always need a specific order and also important, duplicates are not allowed.

38
00:02:39.530 --> 00:02:46.940
This makes sets a great choice to store data where you don't want duplicates, for unique IDs or anything

39
00:02:46.940 --> 00:02:47.900
like that.

40
00:02:47.990 --> 00:02:54.830
You also have no index based access, instead you just have an access that allows you to get a specific

41
00:02:54.830 --> 00:02:59.940
value if you looking for it and then you can see whether it's in the set or not.

42
00:02:59.990 --> 00:03:07.550
Now maps are yet another data container where you store key-value data of any kind in length and that's

43
00:03:07.550 --> 00:03:10.270
a bit like an object where you also have key-value data,

44
00:03:10.280 --> 00:03:17.780
one important difference is that in an object, you may only have strings or numbers as keys or symbols

45
00:03:17.810 --> 00:03:23.780
but we haven't learned about those yet, in maps you can use anything as a key. You can have an array

46
00:03:23.780 --> 00:03:31.350
as a key, you can have another object as a key and that offers you more flexibility.

47
00:03:31.670 --> 00:03:35.500
It's an iterable with some special map methods but not with the array methods,

48
00:03:35.510 --> 00:03:41.300
again just as with the set, the methods which you have here are mostly there to help you manage the items

49
00:03:41.300 --> 00:03:45.200
in the map and here, the order is guaranteed,

50
00:03:45.320 --> 00:03:48.800
that's by the way not the case for objects, there the order of the key-value

51
00:03:48.800 --> 00:03:54.650
pair is not guaranteed, often that doesn't matter because you retrieve values by key anyways and you

52
00:03:54.650 --> 00:03:56.110
don't care where it's stored,

53
00:03:56.140 --> 00:04:03.080
well nonetheless here it is guaranteed. Duplicate keys are not allowed but values can be duplicated

54
00:04:03.080 --> 00:04:06.990
throughout this map and you access values by key.

55
00:04:07.040 --> 00:04:13.970
So let's now work a bit with these data structures and then get a feeling for when we use them and how

56
00:04:13.970 --> 00:04:14.690
we use them.
