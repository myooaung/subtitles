1
00:00:02,270 --> 00:00:08,530
Back in our calculator, we can already start thinking about data containers we might need in there

2
00:00:08,900 --> 00:00:15,590
and there, one value that immediately comes to my mind when thinking about a calculator is the result.

3
00:00:15,950 --> 00:00:19,670
So we can create as a result variable with let,

4
00:00:19,670 --> 00:00:27,450
so with this special let keyword which Javascript understands and then give it any name you want, like result

5
00:00:27,740 --> 00:00:31,190
or current result.

6
00:00:31,190 --> 00:00:37,760
Now regarding the name of your variable or constant, there are a couple of rules and recommendations

7
00:00:37,760 --> 00:00:39,640
you should keep in mind.

8
00:00:39,690 --> 00:00:44,200
There are certain allowed and not allowed names, so allowed

9
00:00:44,210 --> 00:00:47,420
is this name for example, userName, written like this

10
00:00:47,490 --> 00:00:53,490
and it's a best practice to use this special naming convention which is called camel case, which means

11
00:00:53,490 --> 00:00:59,190
that your name starts with a lowercase character and is only one word,

12
00:00:59,220 --> 00:01:06,330
so there are no blanks in there, no whitespace, that would actually be forbidden but every word inside

13
00:01:06,330 --> 00:01:13,740
of the word, like name here in userName starts with an upper case character to make that more readable.

14
00:01:13,740 --> 00:01:16,640
So that would be a variable name which is allowed,

15
00:01:16,740 --> 00:01:20,820
it also is a good name because it describes what's in the variable,

16
00:01:20,820 --> 00:01:23,780
so here we would probably store the name of a user,

17
00:01:23,850 --> 00:01:29,310
so that's a better name than what the user entered because it might not be clear if what the user entered

18
00:01:29,310 --> 00:01:31,050
should be a user name or a password,

19
00:01:31,050 --> 00:01:36,510
so you want to give the variable a name that describes which kind of data you storing in there.

20
00:01:36,510 --> 00:01:42,380
By the way, also important, Javascript is case sensitive and this means that

21
00:01:42,420 --> 00:01:47,020
it really matters whether a character is a capital character or not.

22
00:01:47,070 --> 00:01:52,350
So userName written the way it's written here on the left with a lowercase u at the beginning and

23
00:01:52,350 --> 00:01:58,260
then the uppercase N in there is not the same as if it were written with an upper case

24
00:01:58,260 --> 00:02:00,830
u at the beginning and otherwise the same.

25
00:02:00,930 --> 00:02:05,900
So the casing in the names you choose really matters and that's important to keep in mind.

26
00:02:06,000 --> 00:02:08,470
Now also allowed would be a name like this,

27
00:02:08,490 --> 00:02:13,980
It's basically similar to the first example but this also includes a digit because your variable names

28
00:02:13,980 --> 00:02:17,400
can be made up of any letters or digits.

29
00:02:17,430 --> 00:02:23,250
You can also use the dollar sign special character and your variable name can even start with it,

30
00:02:23,250 --> 00:02:26,550
you can use it anywhere in the variable name but it can even start with it.

31
00:02:26,910 --> 00:02:33,420
Similarly, you can also use the underscore character at the beginning of your variable name or anywhere

32
00:02:33,420 --> 00:02:34,140
inside of it,

33
00:02:34,140 --> 00:02:36,180
so that's also allowed.

34
00:02:36,360 --> 00:02:41,820
Now there are a couple of names which are not allowed or not recommended, for example userName like

35
00:02:41,820 --> 00:02:42,270
this.

36
00:02:42,270 --> 00:02:45,710
This is actually allowed but it's a bad practice,

37
00:02:45,780 --> 00:02:52,890
You should use this camel case notation on the left with lowercase starting character, one word and each

38
00:02:52,890 --> 00:02:56,290
word instead of the words starting with an uppercase character.

39
00:02:56,310 --> 00:03:01,770
So here, what you see there is actually another convention called snake case which you have in some

40
00:03:01,770 --> 00:03:05,460
other programming languages like Python but not in Javascript.

41
00:03:05,490 --> 00:03:10,410
So whilst this technically would be a valid name, you can use the underscore here, whilst this would be a

42
00:03:10,410 --> 00:03:12,020
valid name, it's not recommended

43
00:03:12,030 --> 00:03:14,930
instead use the version on the left.

44
00:03:15,000 --> 00:03:21,720
Now what's not recommended but more importantly, not allowed is for example a variable name like this.

45
00:03:22,640 --> 00:03:27,060
Whilst I did say that you can use any name that uses letters or digits,

46
00:03:27,260 --> 00:03:34,700
you must not start with a digit, so your variable name or your constant name and everything I explained

47
00:03:34,700 --> 00:03:39,510
here is true for constants created with the const keyword as well, these

48
00:03:39,520 --> 00:03:46,290
variables and constants must not start with a digit. Now there also are special rules when it comes to

49
00:03:46,290 --> 00:03:52,500
special characters, you can use dollar sign and underscore at the beginning of your variable or anywhere

50
00:03:52,590 --> 00:03:59,070
in your variable but you must not use other special characters, neither at the beginning of your variable

51
00:03:59,130 --> 00:04:00,430
nor anywhere else,

52
00:04:00,480 --> 00:04:04,680
so dashes or whitespace is not allowed.

53
00:04:04,680 --> 00:04:10,830
The underscore is allowed as mentioned on the left but other special characters are not allowed no matter

54
00:04:10,830 --> 00:04:17,090
where you plan on using them. And the last important thing you should keep in mind, in this course you

55
00:04:17,090 --> 00:04:23,450
will learn about a couple of keywords like let and const and using these keywords as names is also

56
00:04:23,450 --> 00:04:29,570
not allowed because how would Javascript be able to find out whether you want to use the keyword here

57
00:04:29,690 --> 00:04:31,070
or your variable,

58
00:04:31,070 --> 00:04:31,450
right?

59
00:04:31,460 --> 00:04:34,040
It wouldn't and therefore this is not allowed.

60
00:04:34,040 --> 00:04:37,280
So now that we know what's allowed and what's not allowed,

61
00:04:37,400 --> 00:04:39,680
let's go back to our code and write some good code.

62
00:04:40,160 --> 00:04:45,600
So I got the current result variable and now we could write the variable just like this.

63
00:04:45,740 --> 00:04:52,400
Now in Javascript, you don't have to initialize this variable with a value, so you can leave it like this

64
00:04:52,400 --> 00:04:55,220
and now it's an uninitialized variable.

65
00:04:55,220 --> 00:05:00,430
You could also say and that's a term you will hear in other programming languages as well,

66
00:05:00,440 --> 00:05:04,150
this variable is now declared, the program

67
00:05:04,160 --> 00:05:10,680
Javascript is now aware of its existence but it's not initialized or defined yet,

68
00:05:10,700 --> 00:05:19,280
it has no value yet or no value set by you. So you can leave it like this and sometimes this is just

69
00:05:19,310 --> 00:05:20,020
what you need,

70
00:05:20,030 --> 00:05:26,840
sometimes you have certain variables where you don't really need a starting value. For the result

71
00:05:26,840 --> 00:05:33,020
however, I'd like to have one and therefore I'll add an equal sign and then set an initial value which

72
00:05:33,020 --> 00:05:39,530
could be zero here, the number zero and I'm using a number here because of course, I want to use this

73
00:05:39,530 --> 00:05:43,060
variable in some calculations later and add numbers,

74
00:05:43,070 --> 00:05:48,860
the dec numbers and so on and therefore having a number here with which we can do mathematical operations

75
00:05:48,980 --> 00:05:54,960
makes a lot of sense. Now to conclude our first line of good Javascript code we write,

76
00:05:54,960 --> 00:05:56,740
let's see how we end this line.

77
00:05:56,760 --> 00:06:02,490
We could end it like this and just go to the next line to write the next piece of code but you'll also

78
00:06:02,490 --> 00:06:06,510
often see code where we use a semicolon to finish off this line.

79
00:06:06,690 --> 00:06:11,160
Now in Javascript, using the semicolon is generally optional,

80
00:06:11,160 --> 00:06:18,690
I'm saying generally because there are some very rare niche cases where it's not optional but you can

81
00:06:18,690 --> 00:06:24,030
avoid these cases typically and hence you can write Javascript code without semicolons and you'll

82
00:06:24,030 --> 00:06:29,760
see certain tutorials or guides which actually recommend that you don't add a semicolon.

83
00:06:29,760 --> 00:06:36,000
Ultimately, it's up to you whether you want to end each line of code and that's not just the case for variable

84
00:06:36,000 --> 00:06:41,430
definitions but for any code you write basically, whether you want to end these lines with semicolons

85
00:06:41,430 --> 00:06:42,340
or not.

86
00:06:42,360 --> 00:06:47,580
I personally like to do it, also because there are many other programming languages where it's

87
00:06:47,580 --> 00:06:53,370
mandatory to use a semicolon and it's easier to switch to those if you're used to adding it but you

88
00:06:53,370 --> 00:06:59,070
can also avoid it and just use a new line to write a new expression.

89
00:06:59,070 --> 00:07:00,910
It's up to you, just whatever you use,

90
00:07:01,020 --> 00:07:03,220
you should then stick to it and be consistent.

91
00:07:03,240 --> 00:07:06,980
So I will go with semicolons, not just here but throughout the rest of the course

92
00:07:07,050 --> 00:07:08,070
but it is up to you.
