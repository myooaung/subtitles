1
00:00:02,120 --> 00:00:06,080
So what exactly is typescript that's important to understand right.

2
00:00:06,080 --> 00:00:10,150
Because without knowing that it will be hard to learn it and to use it.

3
00:00:10,220 --> 00:00:16,250
Now it's important to understand and I really want to stress this the typescript is not a brand new

4
00:00:16,250 --> 00:00:18,770
language with a totally different syntax.

5
00:00:18,770 --> 00:00:21,440
No it builds up on javascript.

6
00:00:21,440 --> 00:00:28,880
It is a so-called super asset to JavaScript which in the end means it is javascript but it adds more

7
00:00:28,880 --> 00:00:32,450
features more syntax features you can use.

8
00:00:32,450 --> 00:00:39,890
Now it is worth noting as I mentioned that typescript does not run in browsers browsers don't know how

9
00:00:39,890 --> 00:00:44,570
to execute typescript they know how to execute javascript.

10
00:00:44,660 --> 00:00:50,000
So whilst you will learn how to write type code in this module here it's not a language you can use

11
00:00:50,000 --> 00:00:55,450
like this in browsers instead and that's of course also something you'll learn and as a module we need

12
00:00:55,450 --> 00:01:02,360
the extra tool which compiles typescript code to JavaScript code so which converts the code to javascript.

13
00:01:02,630 --> 00:01:09,500
So did we have javascript code we learn about but during development when we write type of code we have

14
00:01:09,500 --> 00:01:13,010
a better experience because of all these extra features.

15
00:01:13,010 --> 00:01:16,450
Now speaking off that which features desk types could add.

16
00:01:16,500 --> 00:01:21,980
Well most importantly the thing that gives typescript its name it adds types.

17
00:01:21,980 --> 00:01:23,690
And with that I mean data types.

18
00:01:23,690 --> 00:01:30,080
Now of course in JavaScript we also know types you'll learn about the core types Chavez could pass strings

19
00:01:30,080 --> 00:01:33,800
numbers boolean objects and so on.

20
00:01:33,800 --> 00:01:40,340
Now it is important to understand that JavaScript is I dynamic weakly typed language which means that

21
00:01:40,370 --> 00:01:43,730
types are evaluated during runtime.

22
00:01:43,760 --> 00:01:50,000
So when your script executes but they're not something you define when you write your code of course

23
00:01:50,000 --> 00:01:55,370
you might know that here you're working with a string and in another place you're working with a number

24
00:01:55,760 --> 00:01:58,720
but you're not putting that into your code.

25
00:01:58,760 --> 00:02:04,400
And let me give you an example where this might matter considered as simple add function which adds

26
00:02:04,400 --> 00:02:07,170
to numbers presumably at least.

27
00:02:07,190 --> 00:02:13,850
But now let's say you're calling this function with two strings which you're passing and please notice

28
00:02:13,850 --> 00:02:15,700
the quotes around the numbers.

29
00:02:15,710 --> 00:02:18,070
Now of course you might wonder why you would do that.

30
00:02:18,200 --> 00:02:23,480
But consider that this is coming from my input field in your dorm and your web page.

31
00:02:23,570 --> 00:02:26,060
What you get from there will always be a string.

32
00:02:26,060 --> 00:02:30,730
So even if the user enters a No dear it's technically will be a string.

33
00:02:30,740 --> 00:02:36,360
Now if you add these two strings here you will actually find a bug in your application.

34
00:02:36,440 --> 00:02:39,040
It will not crash or show an error.

35
00:02:39,200 --> 00:02:46,760
But what you will get is basically to concatenated strings and I can quickly show this to you here in

36
00:02:46,760 --> 00:02:49,220
the normal javascript console in a browser.

37
00:02:49,580 --> 00:02:58,860
If I add five plus three we get 50 free as a string because it simply concatenate those instead of adding

38
00:02:58,860 --> 00:03:01,730
them.

39
00:03:01,750 --> 00:03:05,770
Now that's probably undesired and entire script.

40
00:03:05,770 --> 00:03:11,170
You can a white this because in typescript you can add types and this is now a syntax feature which

41
00:03:11,170 --> 00:03:17,680
is added by typescript which does not exist in JavaScript noticed a colons after a and b in the parameter

42
00:03:17,680 --> 00:03:18,960
list of the function.

43
00:03:19,150 --> 00:03:22,200
And after the colon you see the word no.

44
00:03:22,450 --> 00:03:27,850
This is typescript certain text which in the end tells typescript that both a and b in this case here

45
00:03:28,150 --> 00:03:29,540
should be of type No.

46
00:03:29,800 --> 00:03:36,730
So we must only call this function with two numbers being fed and not with two strings.

47
00:03:36,730 --> 00:03:43,960
So here in typescript when we compiled is to javascript I mentioned that it needs to be compiled we

48
00:03:43,960 --> 00:03:50,290
will get a compile time error giving us as a developer a chance of fixing this before we even tested

49
00:03:50,290 --> 00:03:55,570
in the browser so we can catch errors or bugs like this way earlier.

50
00:03:55,720 --> 00:04:01,750
And that's the huge thing about typescript or one of the huge things now besides adding types types

51
00:04:01,780 --> 00:04:07,420
but also adds some other nice features which don't exist like this in javascript of course these features

52
00:04:07,450 --> 00:04:13,060
since TIBCO doesn't run in browsers are always compiled down to JavaScript work arounds to make the

53
00:04:13,060 --> 00:04:18,880
same feature work there as well but in times it's often easier to implement certain things thanks to

54
00:04:18,880 --> 00:04:20,530
these extra features.

55
00:04:20,530 --> 00:04:27,340
And in addition types all the compilers next generation javascript code to old generation javascript

56
00:04:27,340 --> 00:04:28,320
code you could say.

57
00:04:28,420 --> 00:04:34,240
So the thing Babel does the tool we learned about in the browser support module types could actually

58
00:04:34,240 --> 00:04:40,510
has this built in typescript also allows you to write modern javascript types could code in the typescript

59
00:04:40,510 --> 00:04:47,150
files and as a result get JavaScript files which will run in older browsers as well.

60
00:04:47,350 --> 00:04:49,900
So type sounds pretty interesting to me.

61
00:04:49,900 --> 00:04:51,340
Let's take a close look at it.

62
00:04:51,340 --> 00:04:55,540
Let's see how we install that compiler and let's write some type of code.
