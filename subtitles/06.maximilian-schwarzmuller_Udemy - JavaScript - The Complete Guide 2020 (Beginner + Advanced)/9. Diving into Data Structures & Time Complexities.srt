1
00:00:02,290 --> 00:00:10,110
So what's up with data structures for this I'll add and you file data dash structures.

2
00:00:10,150 --> 00:00:13,990
J.S. and in there I want to get started with data structures.

3
00:00:14,090 --> 00:00:20,620
Let's import them and for a data structures it's important to understand that data structure is anything

4
00:00:20,620 --> 00:00:21,760
that stores stayed up.

5
00:00:22,060 --> 00:00:28,870
So string like this is a data structure but of course a fairly trivial one where we can't do much with

6
00:00:29,140 --> 00:00:35,470
and which is also already built into javascript an array is a more interesting data structure also already

7
00:00:35,470 --> 00:00:38,020
built into javascript but very important.

8
00:00:38,020 --> 00:00:42,550
And of course one we use a lot the same for an object or maps or sets.

9
00:00:42,640 --> 00:00:47,730
These would all be Data Structures data structures built into javascript.

10
00:00:47,740 --> 00:00:57,040
Now maybe let's start with the array and let's say we have an array of ages 30 29 54 something like

11
00:00:57,040 --> 00:01:03,730
this with this array we can of course do things we can sum it up as we did before here with the sum

12
00:01:03,730 --> 00:01:09,730
up algorithm or we can find the minimum value something like this.

13
00:01:09,730 --> 00:01:15,220
Now it's important to understand that certain operations with data structures also have certain time

14
00:01:15,220 --> 00:01:16,480
complexities.

15
00:01:16,480 --> 00:01:25,990
For example if I push a new age onto disarray what would be the time complexity of this action.

16
00:01:25,990 --> 00:01:32,680
Now of course push is not an algorithm not a function we created on our own but still it is a function

17
00:01:32,710 --> 00:01:34,310
that does something.

18
00:01:34,350 --> 00:01:39,520
And if you want to learn what it does you can check out MDA and or other resources that explains such

19
00:01:39,520 --> 00:01:42,150
built in functions like this one.

20
00:01:42,190 --> 00:01:49,390
Well it's important to understand how push works when you push something you have an array like this

21
00:01:49,390 --> 00:01:57,870
one here and then push adds a new element in this array and it adds it at the end.

22
00:01:57,880 --> 00:02:02,950
So here where I added this blank space dad is where push inserts an item.

23
00:02:02,950 --> 00:02:07,990
Now it's all important to understand and you'll learn this dead in an array.

24
00:02:07,990 --> 00:02:13,480
The elements are ordered and every element has an index that identifies the element.

25
00:02:13,480 --> 00:02:15,770
So here we have an index of 0.

26
00:02:15,790 --> 00:02:17,990
Here we have an index of 1.

27
00:02:18,040 --> 00:02:26,260
And here we have an index of 2 right now when we push here we of course create a new index for that

28
00:02:26,280 --> 00:02:30,580
newly added item the index free in this case.

29
00:02:30,640 --> 00:02:36,920
So what happens when we push we add a new item at the end and this item gets a new index.

30
00:02:36,940 --> 00:02:39,580
Does this affect the other items.

31
00:02:39,580 --> 00:02:41,070
No not at all.

32
00:02:41,080 --> 00:02:49,030
So adding item at the end of an array with push has actually a constant time complexity.

33
00:02:49,030 --> 00:02:56,020
0 1 because the other items are not affected we add one item we don't affect the other items we have

34
00:02:56,020 --> 00:03:04,330
a constant time complexity note that changes if we use on shift on shift adds the item at the beginning

35
00:03:04,330 --> 00:03:12,110
of an array so if we take a closer look at this and I copy that here then we see that what.

36
00:03:12,120 --> 00:03:18,020
On shift will do is dead it adds the item here at the beginning.

37
00:03:18,250 --> 00:03:23,680
The problem with that is that means all items effectively have to be moved.

38
00:03:23,680 --> 00:03:27,070
You could say they get a new index.

39
00:03:27,070 --> 00:03:35,530
So here it is new item receives an index of zero the item which previously had zero 30 had zero now

40
00:03:35,530 --> 00:03:41,470
receives a new index one the item which previously had the index one which was the item twenty nine

41
00:03:41,680 --> 00:03:45,540
receives a new index 2 and so on.

42
00:03:45,550 --> 00:03:50,890
So here for on shift all existing elements are touched.

43
00:03:50,950 --> 00:03:59,970
So this actually has a linear time complexity o n for every new item we add we have to touch and move

44
00:04:00,120 --> 00:04:06,870
all existing items we have to reassign indexes so that is of course way worse than pushing.

45
00:04:07,050 --> 00:04:13,800
It's also something I mentioned earlier in the course already in the arrays section so I'm shifting

46
00:04:13,800 --> 00:04:19,320
sometimes of course is what you want to do and then you should do it but you should be aware that it's

47
00:04:19,320 --> 00:04:27,450
way more expensive from a performance perspective than pushing an item to the end of the list.

48
00:04:27,520 --> 00:04:33,640
What's all the important to know and to understand is that of course it also costs you something it

49
00:04:33,640 --> 00:04:36,280
takes some time to find an element.

50
00:04:36,340 --> 00:04:45,940
For example if I want to get my age and let's say I am 30 then of course if I know that my age is stored

51
00:04:46,030 --> 00:04:56,180
in position 1 or year after underreporting actually at position 2 I can get it by its index index 1

52
00:04:56,190 --> 00:05:03,550
here index 1 gives me 30 so if I know did I want my age and my age is the second item India raise so

53
00:05:03,550 --> 00:05:06,820
it has a mix of 1 then I can access it like this.

54
00:05:06,970 --> 00:05:15,310
And this actually accesses it at constant time complexity 0 1.

55
00:05:15,310 --> 00:05:16,600
Why is this constant.

56
00:05:16,840 --> 00:05:18,780
Because every item has a index.

57
00:05:18,820 --> 00:05:23,340
So JavaScript can immediately go to that place in memory and give me that item.

58
00:05:23,350 --> 00:05:30,920
It doesn't need to look at all the other items now of course this changes if we work with a different

59
00:05:30,920 --> 00:05:32,140
data structure.

60
00:05:32,210 --> 00:05:40,010
So here's a new example let's say we actually have an array name popularity

61
00:05:42,480 --> 00:05:44,810
and what's in there is a bunch of objects.

62
00:05:44,830 --> 00:05:54,550
So we have objects which is a no data structure in an array and there we have an I.D. or user name whatever

63
00:05:54,550 --> 00:06:02,780
you want to call it like let's say Max and we have a number of usages let's say five times and then

64
00:06:02,780 --> 00:06:08,840
here we have the user name menu and that's getting used six times.

65
00:06:08,930 --> 00:06:10,910
And of course you could have more and more items.

66
00:06:10,910 --> 00:06:18,320
So effectively we have identifiers and then we have values for these identifiers and now we want to

67
00:06:18,350 --> 00:06:21,730
get the usages of menus.

68
00:06:21,740 --> 00:06:27,320
So we want to get the number of times the name man who gets used.

69
00:06:27,320 --> 00:06:35,480
So menu usages could then be named popularity where we use the built in fine method which executes a

70
00:06:35,480 --> 00:06:38,630
function on every element in the array.

71
00:06:38,990 --> 00:06:44,420
Looking at that person or whatever we want to name it and we have to return true if it's the item we're

72
00:06:44,420 --> 00:06:46,700
interested in and fault if it's not.

73
00:06:46,700 --> 00:06:52,480
So here I look for manuals I check of person user name is equal to menu.

74
00:06:52,580 --> 00:06:54,430
If that's the case we return true.

75
00:06:54,440 --> 00:06:59,510
We stopped searching for more and then this object will be returned by find.

76
00:06:59,510 --> 00:07:04,700
So what I get back is an object which has is used just queue and this gives me the use such as off the

77
00:07:04,700 --> 00:07:06,790
name menu.

78
00:07:06,830 --> 00:07:11,260
So what I'm doing here is I'm looking for the item with a user name of menu and then I get the use just

79
00:07:11,300 --> 00:07:12,140
for this item.

80
00:07:12,140 --> 00:07:14,590
That's what I do with this line here.

81
00:07:14,690 --> 00:07:18,350
Now in the best case manuals the first item here.

82
00:07:18,620 --> 00:07:24,560
So we execute does function which we pass to find exactly once because we find manual right away for

83
00:07:24,560 --> 00:07:26,580
the very first item we're looking at.

84
00:07:26,600 --> 00:07:34,460
So we have executed this function once we get to use it as and we basically in the best case have constant

85
00:07:34,670 --> 00:07:36,710
time complexity right.

86
00:07:36,860 --> 00:07:42,360
The very first item was the one we were looking for but that's of course not always the case.

87
00:07:42,470 --> 00:07:54,920
The worst case is that we have linear time complexity o n because manuals the last item and the average

88
00:07:54,920 --> 00:08:00,140
case of course is somewhere in between but for a large number of items this in the end all the ends

89
00:08:00,140 --> 00:08:08,700
up to be linear time complexity you could say so on average we'll have to walk through all the items

90
00:08:08,700 --> 00:08:14,520
or close to all the items to find what we get because the elements are randomly distributed let's say

91
00:08:14,940 --> 00:08:21,640
we don't know at which position manuals and data for we have linear time complexity because find executes

92
00:08:21,640 --> 00:08:24,830
this function on all items in the array.

93
00:08:24,870 --> 00:08:31,140
Now this is a scenario where another data structure might be a better choice instead of using an array

94
00:08:31,140 --> 00:08:34,820
like this why don't we use an object or a map.

95
00:08:35,280 --> 00:08:42,120
Let's rebuild this in this better way we have our name map let's say and we can use a normal javascript

96
00:08:42,150 --> 00:08:48,770
object for this and now the keys here are the user names and the values for the keys are to use the

97
00:08:48,770 --> 00:08:52,730
chips like this.

98
00:08:53,130 --> 00:09:00,630
And now when we want to get men use usages and I'll just name it man you use just two to not clash with

99
00:09:00,630 --> 00:09:01,540
this name.

100
00:09:01,800 --> 00:09:06,660
Then we can simply reach out to the name map and access the key.

101
00:09:06,660 --> 00:09:08,250
Man you'll like this.

102
00:09:08,250 --> 00:09:15,900
And then this gives us the usages for man you know this is way better because this will be constant

103
00:09:17,200 --> 00:09:18,930
time complexity

104
00:09:21,420 --> 00:09:29,010
0 1 because the way javascript stores objects internally they are just key value pairs and for a given

105
00:09:29,010 --> 00:09:34,770
key JavaScript can instantly give us back the value that's stored for the key so it doesn't have to

106
00:09:34,770 --> 00:09:36,590
go through all the key value pairs.

107
00:09:36,690 --> 00:09:43,050
Just as an array can instantly give you the value for a specific index an object can instantly give

108
00:09:43,050 --> 00:09:45,360
you the value for a specific key.

109
00:09:45,420 --> 00:09:51,270
So if we have a scenario like this using an object might be better than using an array of objects as

110
00:09:51,270 --> 00:09:57,270
we have it here because we go from linear time complexity in the worst case or in the average case to

111
00:09:57,270 --> 00:10:00,180
constant time complexity.

112
00:10:00,200 --> 00:10:07,760
Now if we had a key which is not a string but let's say some other object or anything like this then

113
00:10:07,760 --> 00:10:14,870
of course we could use a real map and you learn about that in the data structure section early and of

114
00:10:14,870 --> 00:10:21,800
course we can create a new map like this and then simply add our items to this real map which is capable

115
00:10:21,800 --> 00:10:27,810
of using anything as a key not just strings or numbers but also our object ends on.

116
00:10:27,860 --> 00:10:34,580
So a real map is already built into javascript and if you had a scenario where you need uniqueness you

117
00:10:34,580 --> 00:10:40,310
could use a set so you will have these different built in data structures and for different operations

118
00:10:40,310 --> 00:10:44,180
stay off for different performance or different time complexities.

119
00:10:44,180 --> 00:10:49,910
You should be aware of that so that you can use the right data structure for the task you are trying

120
00:10:49,910 --> 00:10:51,020
to solve.

121
00:10:51,020 --> 00:10:57,160
Now just as before here I also got an article I can strongly recommend about built in data structures

122
00:10:57,170 --> 00:11:02,210
and also other data structures you could build on your own where you also see time complexities for

123
00:11:02,210 --> 00:11:07,970
different operations some comments and then also some examples for these data structures and how to

124
00:11:07,970 --> 00:11:10,670
use them with certain operations not important.

125
00:11:10,670 --> 00:11:15,080
This article does not just include built in data structures like the array.

126
00:11:15,170 --> 00:11:19,780
It also shows you how to build brand new data structures with the built in ones.

127
00:11:19,790 --> 00:11:22,310
So building up on the built in ones of course.

128
00:11:22,310 --> 00:11:27,050
Dad can be better suited for certain operations or certain tasks.

129
00:11:27,050 --> 00:11:32,720
This is a bit more advanced and I will say right away that in many scenarios you will not need these

130
00:11:32,720 --> 00:11:39,050
custom built data structures but for a highly sophisticated or advanced applications you might need

131
00:11:39,050 --> 00:11:44,550
to build your own data structures which just an optimized for certain tasks to be faster than what you

132
00:11:44,550 --> 00:11:45,530
got built in.

133
00:11:45,650 --> 00:11:47,000
But that's a next step.

134
00:11:47,030 --> 00:11:48,810
After you master the basics.

135
00:11:48,860 --> 00:11:55,070
For now it is important to understand different time complexities of different operations and that therefore

136
00:11:55,070 --> 00:12:00,620
it is important to think about what you plan on doing and coming up with the right or with the best

137
00:12:00,620 --> 00:12:02,510
solution for the task at hand.

138
00:12:02,630 --> 00:12:05,210
To have a well performing solution.
