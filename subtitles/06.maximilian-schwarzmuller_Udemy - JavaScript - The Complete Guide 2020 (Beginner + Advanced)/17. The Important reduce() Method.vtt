WEBVTT
1
00:00:02.200 --> 00:00:07.650
Now there is one last important array method which you absolutely have to know

2
00:00:08.000 --> 00:00:09.840
and that's the reduce method.

3
00:00:09.860 --> 00:00:14.330
Now I'm diving into it last because it's one of the more complex or challenging functions

4
00:00:14.330 --> 00:00:18.130
but in the end, it's also pretty straightforward and I will explain it step-by-step.

5
00:00:18.800 --> 00:00:24.920
So let's assume here with your prices, let's say the unfiltered, unchanged prices, you want to sum them

6
00:00:24.920 --> 00:00:25.510
up.

7
00:00:25.550 --> 00:00:32.930
Now of course what you can do is you can create for loop or you can use ForEach and you could create

8
00:00:32.930 --> 00:00:34.150
a sum here,

9
00:00:34.190 --> 00:00:36.260
let sum, set it to equal

10
00:00:36.260 --> 00:00:43.950
and then you could go through your prices, let's say with ForEach where you have the value of each price

11
00:00:43.960 --> 00:00:47.870
and then here in the end you say sum plus equal price, right?

12
00:00:47.890 --> 00:00:52.650
And if you do that and you console log the sum thereafter, we should have

13
00:00:52.660 --> 00:00:54.840
the sum of all prices.

14
00:00:55.030 --> 00:00:56.410
So that's not too much code

15
00:00:56.410 --> 00:01:02.930
and if I reload this, this probably is to sum. Again let's ignore this strange output here,

16
00:01:03.010 --> 00:01:08.080
I'll explain it later, it's not a bug or an issue, just related to how computers work with floating point

17
00:01:08.080 --> 00:01:09.100
numbers.

18
00:01:09.250 --> 00:01:12.430
So I added these values together and I got a sum.

19
00:01:12.430 --> 00:01:19.450
Now of course that's not too difficult or not too problematic here, it's a quite short code snippet but

20
00:01:19.600 --> 00:01:22.330
we can actually write this with less code.

21
00:01:22.330 --> 00:01:31.820
Let me comment this out and instead, create a constant sum and set this equal to prices.reduce. Now the

22
00:01:31.820 --> 00:01:37.530
reduce method is another built-in method available on arrays and the reduce method takes a function.

23
00:01:37.650 --> 00:01:45.300
This function as you can see takes a couple of arguments, it takes a so-called previous value, okay, it takes

24
00:01:45.300 --> 00:01:54.150
a current value, okay, it takes a current index if you want to and it also accepts this original array on

25
00:01:54.150 --> 00:02:00.480
which you are running it. Now I will say that current index and that array again are the arguments you don't

26
00:02:00.480 --> 00:02:06.030
use that often here, the index maybe sometimes, this original array pretty much never.

27
00:02:06.030 --> 00:02:08.430
I'm just adding all arguments here for completeness sake,

28
00:02:08.430 --> 00:02:11.060
the first two arguments are the really important ones here though.

29
00:02:11.520 --> 00:02:16.970
Now the reduce method itself also takes another optional argument or parameter.

30
00:02:17.430 --> 00:02:23.040
So the first argument or parameter is this function and you must never forget, we're always passing functions

31
00:02:23.040 --> 00:02:26.220
here as arguments, as parameters to sort

32
00:02:26.220 --> 00:02:27.060
and so on.

33
00:02:27.060 --> 00:02:32.460
So here I'm passing a function to reduce and then reduce itself does not just take this function as

34
00:02:32.460 --> 00:02:36.960
its first parameter but another optional second parameter.

35
00:02:36.960 --> 00:02:39.610
Now what does reduce do to begin with?

36
00:02:39.720 --> 00:02:45.860
Reduce, as the name suggests, reduces an array to a simpler value,

37
00:02:45.870 --> 00:02:51.230
for example it can reduce an array of numbers to the sum of these numbers.

38
00:02:51.390 --> 00:02:53.990
Of course that's not the only kind of reduction it can do,

39
00:02:54.060 --> 00:02:57.240
you can reduce any array to any value you need,

40
00:02:57.240 --> 00:03:02.790
so the idea always is that you reduce an array to a simpler value.

41
00:03:02.790 --> 00:03:08.860
Typically an array to a single number or a single string or whatever it is.

42
00:03:08.960 --> 00:03:15.650
Now the second argument you pass to reduce is the initial value with which you want to start,

43
00:03:15.650 --> 00:03:20.570
so here if we want to get the sum, we would start with zero probably here.

44
00:03:20.600 --> 00:03:27.080
Now what happens is reduce executes this function on every element in the array, just like map and find

45
00:03:27.080 --> 00:03:33.120
did and previous value for the first execution is this initial value which you set here

46
00:03:33.170 --> 00:03:40.550
if it's set, otherwise it will be undefined. Current value is the first element of the array,

47
00:03:40.580 --> 00:03:43.850
so generally the element of the array it's currently executing on.

48
00:03:43.850 --> 00:03:48.780
So for the first execution, current value is the value of the first element in the array,

49
00:03:48.890 --> 00:03:54.850
previous value is this initial value. Now here in this function,

50
00:03:54.850 --> 00:03:59.180
you have to return your updated value,

51
00:03:59.210 --> 00:04:01.590
so your currently reduced value,

52
00:04:01.620 --> 00:04:06.740
so that in this case here would be previous value plus current value.

53
00:04:06.740 --> 00:04:11.120
So for the first execution, previous value is zero, current value is

54
00:04:11.210 --> 00:04:17.510
the first element in prices, so current value would be 10.99.

55
00:04:17.520 --> 00:04:23.610
So now for the second execution, this function here is executed on the second element in the array which

56
00:04:23.610 --> 00:04:26.520
in this case is 5.99.

57
00:04:26.520 --> 00:04:32.610
Now on that second execution, previous value no longer refers to that initial value but instead, to the

58
00:04:32.610 --> 00:04:36.000
value you returned in the previous execution,

59
00:04:36.000 --> 00:04:41.460
so in this case since we're on the second execution, previous value will hold the value of the first

60
00:04:41.460 --> 00:04:42.240
execution,

61
00:04:42.300 --> 00:04:45.540
so the result here of that first execution.

62
00:04:45.540 --> 00:04:50.950
Now remember in the first execution, we had 0 + 10.99 and the end here because 10.99

63
00:04:50.950 --> 00:04:52.470
is the first value,

64
00:04:52.560 --> 00:04:57.420
so in the second execution we'll get this 0 + 10.99,

65
00:04:57.420 --> 00:05:01.600
so 10.99 in total value as a previous value

66
00:05:01.710 --> 00:05:08.760
and now, this 10.99 value is what we use in this calculation here to add our current value which

67
00:05:08.760 --> 00:05:13.670
for this second iteration is the second elements value, 5.99,

68
00:05:13.960 --> 00:05:22.040
so now we add 10.99 + 5.99 and so on for all elements in the array. Here's

69
00:05:22.110 --> 00:05:27.090
a graphical representation of what happens, let's say we have an array with the value is 1, 2 and 3 and

70
00:05:27.090 --> 00:05:30.990
we want to reduce it. We might start within initial value of 0,

71
00:05:30.990 --> 00:05:35.820
of course you can start with any initial value but let's say we start with zero and now the reducer

72
00:05:35.820 --> 00:05:37.510
function executes.

73
00:05:37.550 --> 00:05:40.380
Now this means it has a look at the first element

74
00:05:40.410 --> 00:05:46.870
so to say and it returns this initial value plus that first value which is 1.

75
00:05:46.890 --> 00:05:51.390
Now does this fed in into the second execution where we have a look at the second element,

76
00:05:51.390 --> 00:05:57.750
so the reducer function returns three, 1 which was the result of the first execution plus 2 which is

77
00:05:57.750 --> 00:05:59.790
that second element we're looking at

78
00:05:59.790 --> 00:06:04.860
and then we repeat that one last time, where we have a look at the last element of that array and hence

79
00:06:04.860 --> 00:06:09.680
we get six because we had three as a result of the last execution,

80
00:06:09.710 --> 00:06:15.510
three also is our last element in the array, so we have 3 + 3 equals 6.

81
00:06:15.510 --> 00:06:19.230
Now of course the original array is not emptied or anything like that,

82
00:06:19.260 --> 00:06:23.560
I'm just removing the numbers we worked with here to make this slide clearer.

83
00:06:23.640 --> 00:06:26.690
The original array is not edited in any way,

84
00:06:26.700 --> 00:06:34.050
instead this only executes this logic on all array elements to gradually build up a value which you in

85
00:06:34.090 --> 00:06:39.170
the end return. Well and for the last execution if there are no array elements left,

86
00:06:39.310 --> 00:06:45.900
well this value is returned overall and is stored in this case in this sum constant which we can therefore

87
00:06:45.900 --> 00:06:48.490
log and hence what we see here

88
00:06:48.660 --> 00:06:55.320
if I log this is this same result as before which makes sense, it would be bad if we had a different

89
00:06:55.320 --> 00:07:01.800
result. Now just as before, you can also shorten this, thanks to arrow functions, we only need the first

90
00:07:01.800 --> 00:07:06.150
two arguments so we can get rid of the other two, we need to keep the parentheses here since we have

91
00:07:06.150 --> 00:07:12.300
more than one argument but we can get rid of the curly braces like this, then have to get rid of the

92
00:07:12.300 --> 00:07:19.200
return value and just write it like that, get rid of the semicolon and have a very concise reduce function

93
00:07:19.440 --> 00:07:26.070
which really just reduces this array of numbers to a single number. That's just one use case but reduce

94
00:07:26.070 --> 00:07:31.290
can be really powerful for combining values in an array to a single value.
