1
00:00:02,190 --> 00:00:05,520
So what are these different features about?

2
00:00:05,520 --> 00:00:10,650
Well let's start with symbols, though we'll later also have a look at iterators and generators, reflect

3
00:00:10,680 --> 00:00:11,730
and the proxy API

4
00:00:11,910 --> 00:00:16,160
but what are symbols? Symbols and that's really interesting and

5
00:00:16,170 --> 00:00:16,950
good to know

6
00:00:16,950 --> 00:00:18,550
are a primitive value.

7
00:00:18,720 --> 00:00:24,180
I did mention that before in the course, we learned about strings, numbers, booleans there,

8
00:00:24,240 --> 00:00:28,040
now symbols are also just yet another primitive value,

9
00:00:28,050 --> 00:00:32,900
symbols are not objects, not reference values, they are primitive values.

10
00:00:33,090 --> 00:00:39,060
You can use symbols as object property identifiers, as keys in objects

11
00:00:39,060 --> 00:00:45,930
so to say, just like you can use numbers and strings. There are built-in symbols and you can also

12
00:00:45,930 --> 00:00:49,800
build your own symbols and we'll see both in this module

13
00:00:50,040 --> 00:00:53,840
and that's the unique feature or the special feature about symbols,

14
00:00:54,000 --> 00:00:58,820
they guarantee uniqueness, every symbol you build is unique.

15
00:00:58,980 --> 00:01:06,540
So you can use symbols to add a key, to add a property to an object where you know that this name won't

16
00:01:06,540 --> 00:01:09,840
exist there yet because you just created the symbol,

17
00:01:09,840 --> 00:01:15,480
it will be unique and you can't override an existing symbol of the same name there because every symbol

18
00:01:15,480 --> 00:01:19,860
is standalone and unique and that's the biggest feature of symbols.

19
00:01:19,860 --> 00:01:24,060
Now let's see how we use them and what this uniqueness actually means.

20
00:01:24,330 --> 00:01:29,970
For this I get a very simple project which you find attached, just an empty HTML file where we import

21
00:01:30,090 --> 00:01:31,850
app.js which is also empty

22
00:01:31,860 --> 00:01:35,900
and then I just open this here, because I will not build a fancy user interface here,

23
00:01:36,000 --> 00:01:42,390
as I mentioned all these features are less about end user interaction, they're more about code quality

24
00:01:42,390 --> 00:01:48,480
and writing code that you could share with others which can have certain features that ensure that other

25
00:01:48,480 --> 00:01:51,060
people work with your code correctly

26
00:01:51,060 --> 00:01:53,350
and as I said let's start with symbols.

27
00:01:53,520 --> 00:01:59,130
Let's create a new symbol, let's maybe name it uid for userId but you can name it however you

28
00:01:59,130 --> 00:02:05,100
want and then you create a symbol by calling symbol. Important, not new symbol,

29
00:02:05,130 --> 00:02:09,100
that would not work but just symbol, like a function basically.

30
00:02:09,240 --> 00:02:12,390
So symbol then creates a new symbol.

31
00:02:12,450 --> 00:02:16,790
If we now console log uid, let's see what we got there.

32
00:02:16,860 --> 00:02:21,300
If we save that and we reload this page, we see 

33
00:02:21,350 --> 00:02:22,820
we got a symbol there,

34
00:02:22,830 --> 00:02:23,300
right,

35
00:02:23,340 --> 00:02:26,760
and that's not too exciting but that's in the end a symbol here.

36
00:02:26,760 --> 00:02:34,590
Now you can pass an identifier to symbol, like uid, which is only for logging purposes, for identification

37
00:02:34,590 --> 00:02:36,600
purposes for you as a developer,

38
00:02:36,600 --> 00:02:42,710
now if I reload here, you see that's part of the symbol and we can identify this symbol by that ID.

39
00:02:42,750 --> 00:02:48,720
This does not mean that this symbol now has an internal name, uid or anything like that, this is

40
00:02:48,720 --> 00:02:53,870
really just an identification criteria for you as a developer.

41
00:02:53,890 --> 00:02:56,020
Now how can we use such a symbol?

42
00:02:56,020 --> 00:03:02,200
Well let's say we have a person object and we want to have an ID in there, abc or p1 or whatever

43
00:03:02,200 --> 00:03:10,230
it is, I should add an equal sign here and we also want have a name in there, Max and an age, 30.

44
00:03:10,230 --> 00:03:15,030
Now this is an object, how we created it multiple times throughout the course

45
00:03:15,030 --> 00:03:19,440
and here I got an ID property which is just a regular property,

46
00:03:19,500 --> 00:03:22,270
it's not a symbol, it's just a regular key name.

47
00:03:22,290 --> 00:03:25,890
Now here we'll have to do some mental yoga,

48
00:03:25,890 --> 00:03:32,070
let's imagine you're building a library where you expose certain objects with the users of your library,

49
00:03:32,280 --> 00:03:39,300
just like the axios library which we used earlier exposes the axios object if you remember.

50
00:03:39,330 --> 00:03:46,290
Now in the objects you expose, you might have certain keys, certain properties which you want to ensure

51
00:03:46,380 --> 00:03:50,010
are not overridden by the users of your library.

52
00:03:50,040 --> 00:03:57,420
So let's say we had some library, maybe some authentication library which creates user objects and in

53
00:03:57,420 --> 00:04:01,140
the user object, you want to give the users of your library,

54
00:04:01,140 --> 00:04:08,130
the developers using your library the full power to change the objects your library spits out but you

55
00:04:08,130 --> 00:04:14,460
want to ensure that all the user objects your library generates always have some ID identifier which

56
00:04:14,460 --> 00:04:16,050
can't be overridden.

57
00:04:16,050 --> 00:04:21,660
Now if your library would generate objects like this, then of course, let's say this is coming from a

58
00:04:21,660 --> 00:04:22,290
library,

59
00:04:22,320 --> 00:04:30,450
if I'm the consumer of such a library, I could always change the ID here like that. This is one

60
00:04:30,450 --> 00:04:33,550
scenario where symbols could come in handy.

61
00:04:33,600 --> 00:04:37,860
Let's say this here is library land

62
00:04:41,590 --> 00:04:44,650
and this here is app land

63
00:04:44,950 --> 00:04:46,540
using the library.

64
00:04:46,720 --> 00:04:50,670
So we're authoring this library and then someone else is using it

65
00:04:50,740 --> 00:04:51,670
here with this code.

66
00:04:51,700 --> 00:04:56,620
So this is exposed by our library, someone else is using it and we want to make sure that this should

67
00:04:56,620 --> 00:04:58,830
not be possible.

68
00:04:59,050 --> 00:05:04,450
Now that's where we could use a symbol, instead of adding an ID like this if we want to ensure that

69
00:05:04,720 --> 00:05:05,580
only we,

70
00:05:05,650 --> 00:05:09,780
so only the code in our library knows how to interact with that ID,

71
00:05:09,790 --> 00:05:15,580
well then we could just add this symbol as a key and we don't do this by repeating the symbol name, this

72
00:05:15,580 --> 00:05:21,610
would just add a regular key name to ID, instead we use this dynamic property ID syntax you learned

73
00:05:21,610 --> 00:05:27,400
about in this course where you use square brackets here and then you could point at some variable

74
00:05:27,400 --> 00:05:29,650
which holds the key name you want to use,

75
00:05:29,740 --> 00:05:36,340
well in this case I point at this uid constant and we'll therefore use this symbol as an identifier

76
00:05:36,340 --> 00:05:39,330
here now and then we could have p1 here.

77
00:05:39,340 --> 00:05:46,500
Now this is a valid object but the thing is if we then use this object in our code, so we the developer

78
00:05:46,510 --> 00:05:53,470
using the library use that object and we add or try to override the ID with this code, we can do that

79
00:05:53,500 --> 00:05:58,570
but we won't interfere with this library internal ID here.

80
00:05:58,570 --> 00:06:07,830
So if I console log my user object here, you will see that the symbol is untouched by this line here,

81
00:06:07,850 --> 00:06:15,470
if I now reload here, you see there we still got this symbol identifier and since we know the symbol

82
00:06:15,530 --> 00:06:16,250
in the library

83
00:06:16,270 --> 00:06:23,390
but this code is hidden away from the users of our library, users got no way of accessing this property

84
00:06:23,390 --> 00:06:25,840
here because they don't know this symbol

85
00:06:25,970 --> 00:06:31,610
and if you would try to access something like symbol uid here,

86
00:06:31,610 --> 00:06:37,550
so I create a new symbol on the fly and try to access this symbol on the user object, you'll see that

87
00:06:37,550 --> 00:06:44,900
I get undefined for that because even though I use the same identifier here for the symbol, as I mentioned

88
00:06:44,900 --> 00:06:50,960
this is really just for debugging purposes. This technically still is a new symbol, totally unrelated

89
00:06:51,170 --> 00:06:52,330
to this symbol,

90
00:06:52,330 --> 00:06:54,320
they are totally different objects.

91
00:06:54,320 --> 00:07:03,050
You can also see this if you console log symbol uid and check if that is equal to symbol uid

92
00:07:03,050 --> 00:07:09,910
and you'll see you get false as a response here as an output because these are not equal if I reload here.

93
00:07:09,980 --> 00:07:12,270
So that's the idea behind symbols,

94
00:07:12,320 --> 00:07:19,730
we do have unique identifiers which can't be accidentally overridden and only if we use that exact

95
00:07:19,730 --> 00:07:20,810
same symbol again,

96
00:07:20,810 --> 00:07:25,320
so inside of the library, if I then access this symbol again, I could change it.

97
00:07:25,340 --> 00:07:29,210
So here I am of course using the exact same symbol I created here

98
00:07:29,300 --> 00:07:34,370
and therefore not a copy of it or something like that but really the same symbol and hence I can change

99
00:07:34,370 --> 00:07:40,640
it but if I don't expose this symbol as part of my library, users of the library have no way of using

100
00:07:40,640 --> 00:07:41,350
it.

101
00:07:41,360 --> 00:07:47,210
So now with that if I save that and I also console log user here and save that now, you will see that

102
00:07:47,210 --> 00:07:52,570
now I change that symbol userId to p3 but I did that inside of the library,

103
00:07:52,580 --> 00:07:54,410
it's not available outside of it.

104
00:07:54,410 --> 00:07:58,090
Now of course you're not limited to using symbols inside of libraries,

105
00:07:58,100 --> 00:08:02,730
this is just a common example or a use case where it might be particularly useful.

106
00:08:02,750 --> 00:08:05,780
Also be aware that you don't need to add such an identifier,

107
00:08:05,780 --> 00:08:10,670
this here also is a perfectly fine symbol, you don't have to add the identifier,

108
00:08:10,670 --> 00:08:16,820
you just can add one so that you as a developer if you console log that or if you use the debugging

109
00:08:16,820 --> 00:08:22,400
tools in the browser, that you can identify a symbol and you remember where in your code you set this

110
00:08:22,400 --> 00:08:24,590
up, you technically don't have to add that.
