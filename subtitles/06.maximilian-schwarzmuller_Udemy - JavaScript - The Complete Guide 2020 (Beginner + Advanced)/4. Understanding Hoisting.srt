1
00:00:02,280 --> 00:00:09,300
So that block scope thing really is extremely important and is one of the major changes we saw from

2
00:00:09,330 --> 00:00:13,940
ES5 to ES6, other changes include some text features which we haven't learned yet,

3
00:00:13,950 --> 00:00:16,950
so you will learn them of course throughout the course.

4
00:00:16,950 --> 00:00:24,600
One other major difference between var and let, which also is yet another reason to use let and const

5
00:00:24,600 --> 00:00:31,960
instead of var is how Javascript actually read and initialized variables created with var

6
00:00:31,990 --> 00:00:38,530
versus how it does that for variables and constants created with let and const. Here's a short

7
00:00:38,530 --> 00:00:39,200
example,

8
00:00:39,400 --> 00:00:42,040
let me comment this out and go down there,

9
00:00:42,100 --> 00:00:47,620
let's write some code, so all the other code won't run and let's write some code here where I console

10
00:00:47,620 --> 00:00:56,360
log userName, so a variable which I have never created here and I then, below that log, create userName

11
00:00:56,360 --> 00:01:00,920
and set this equal to Max or whatever you want.

12
00:01:00,970 --> 00:01:02,930
Would you expect that this code works?

13
00:01:02,930 --> 00:01:08,770
Please note that I'm using var. Now maybe you do because I'm using var and you already learned that var

14
00:01:08,770 --> 00:01:12,250
was quite different from let and const but let's give it a try.

15
00:01:12,340 --> 00:01:20,830
So let's reload this page and you see I don't get an error but I do get undefined here, now that's interesting,

16
00:01:20,830 --> 00:01:28,570
we don't print Max but we print undefined. Now let me change this to let or const, doesn't matter

17
00:01:29,320 --> 00:01:31,070
and now reload this page,

18
00:01:31,180 --> 00:01:35,610
now we get an error, cannot access userName before initialization.

19
00:01:35,680 --> 00:01:40,990
So with let and const, we get an error, with var we don't. Now why is that?

20
00:01:41,100 --> 00:01:49,750
Well Javascript has a special feature called hoisting which in the end means that the Javascript engine,

21
00:01:49,750 --> 00:01:56,050
the browser, when it loads your script goes over your entire script and it does things like look for

22
00:01:56,050 --> 00:02:03,310
functions which it then automatically loads and registers so that you can write functions below the

23
00:02:03,310 --> 00:02:04,660
code where you actually use them,

24
00:02:04,660 --> 00:02:10,150
that's something I covered earlier in the course, it does the same for variables and for variables

25
00:02:10,150 --> 00:02:17,140
created with var, it actually pulls this variable declaration to the beginning of your file,

26
00:02:17,140 --> 00:02:22,930
so that's what the browser does invisibly and then just leaves your initialization, so where you assign

27
00:02:22,930 --> 00:02:26,680
a value down there, where you really wrote the code. So invisibly,

28
00:02:26,680 --> 00:02:34,570
the browser does this. Now it does not only do that for var but also technically for let and const,

29
00:02:34,590 --> 00:02:41,630
this hoisting concept also exists but there, the browser doesn't initialize this variable to undefined,

30
00:02:41,700 --> 00:02:48,090
it just kind of declares it but assigns no initial value at all and therefore you get this error that

31
00:02:48,090 --> 00:02:51,050
there has been no initialization. For var,

32
00:02:51,060 --> 00:02:52,660
this is different, there

33
00:02:52,680 --> 00:02:59,280
the browser pulls this up and also assigns an initial value of undefined, so that you get no error message

34
00:02:59,310 --> 00:03:01,510
but you have an undefined value here.

35
00:03:01,570 --> 00:03:02,700
Now that's one difference

36
00:03:02,700 --> 00:03:09,480
and it's not necessarily an advantage that you could do that with var because it really leads to a code

37
00:03:09,510 --> 00:03:10,920
that's harder to understand.

38
00:03:10,920 --> 00:03:15,230
If I'm a developer and I'm reading your code and let's say you have more code in there,

39
00:03:15,480 --> 00:03:21,840
so the declaration is way at the bottom of the file and I find this line, I as a developer might be wondering

40
00:03:22,130 --> 00:03:22,510
wait,

41
00:03:22,530 --> 00:03:23,790
where is userName coming from,

42
00:03:23,790 --> 00:03:27,910
I didn't see that thus far in the file and of course knowing Javascript,

43
00:03:27,930 --> 00:03:30,090
I'm aware that it could be defined somewhere below

44
00:03:30,090 --> 00:03:31,740
but why would you do that,

45
00:03:31,740 --> 00:03:33,470
that's really hard to understand,

46
00:03:33,480 --> 00:03:38,700
you have to dig through the entire file to find out what's in userName. So it's much clearer if you

47
00:03:38,700 --> 00:03:45,510
are forced to declare a variable before you start using it, so that you're forced to move your declaration

48
00:03:45,570 --> 00:03:46,300
at the top

49
00:03:46,380 --> 00:03:52,560
and of course you could do that with var and older versions of Javascript but you weren't forced to

50
00:03:52,560 --> 00:03:55,920
do it, with let and const you actually are,

51
00:03:55,920 --> 00:03:57,360
so that's an advancement.

52
00:03:57,870 --> 00:04:03,600
This worked in the past with var and it still works today with var of course but it doesn't work today

53
00:04:03,660 --> 00:04:04,710
with let and const.
