WEBVTT
1
00:00:02.200 --> 00:00:08.590
So that's an iterator. Now iterators are nice and with a while loop, you can create your own looping

2
00:00:08.590 --> 00:00:17.690
logic but maybe you would want to do for const employee of company here,

3
00:00:17.710 --> 00:00:19.570
maybe this is what you want to do

4
00:00:19.780 --> 00:00:27.030
and at the moment this would not be possible, if I console log employee here and I save that, you'll see

5
00:00:27.030 --> 00:00:27.720
I get an error,

6
00:00:27.720 --> 00:00:29.870
company is not iterable.

7
00:00:29.880 --> 00:00:36.030
Now we get this next method but Javascript is actually not looking for a next method when you use a

8
00:00:36.030 --> 00:00:37.060
for/of loop,

9
00:00:37.320 --> 00:00:42.710
instead what it is looking for is a special symbol.

10
00:00:42.870 --> 00:00:51.270
It's looking for a symbol which I can add here in company of type symbol.iterator, another well-known

11
00:00:51.270 --> 00:00:53.640
symbol built into Javascript obviously

12
00:00:53.850 --> 00:00:56.090
otherwise for/of couldn't be looking for it

13
00:00:56.260 --> 00:00:58.710
and now what is the value for that symbol,

14
00:00:58.710 --> 00:01:00.450
that's the interesting question.

15
00:01:00.600 --> 00:01:03.780
The value has to be an iterator.

16
00:01:03.780 --> 00:01:10.790
Now remember, company overall is an iterator because any object with a next method is an iterator.

17
00:01:10.830 --> 00:01:17.130
So what we store for this symbol iterator property now should be such an object with the next method,

18
00:01:17.130 --> 00:01:19.810
so not company should have the next method,

19
00:01:19.890 --> 00:01:21.840
well it can but that doesn't help us

20
00:01:21.930 --> 00:01:27.260
but what we store in the symbol iterator properties should be an object with the next method so that

21
00:01:27.270 --> 00:01:28.480
we can use for/of

22
00:01:29.100 --> 00:01:35.370
and now instead of creating such an object manually again, we can use something else which builds us such

23
00:01:35.370 --> 00:01:36.670
an iterator

24
00:01:36.810 --> 00:01:45.630
and that would be a generator. A generator is something in Javascript which builds us an iterator object,

25
00:01:45.780 --> 00:01:53.160
so which builds as an object that does have a next method built-in. A generator in the end is a special

26
00:01:53.160 --> 00:01:59.190
type of Javascript function which automatically generates iterators for you,

27
00:01:59.190 --> 00:02:02.190
so which generates objects that have a next method

28
00:02:02.190 --> 00:02:09.290
you could say, that's a generator. You create such a generator by using the function keyword and then

29
00:02:09.290 --> 00:02:17.300
and that's special, you add a star after this keyword, this turns this function into a generator.

30
00:02:17.300 --> 00:02:22.100
Then you can use any name you want here or of course also write an anonymous function,

31
00:02:22.100 --> 00:02:29.170
here I will assign a name, employee generator and then you have a normal function signature,

32
00:02:29.210 --> 00:02:35.900
you can get parameters here and you have your function body but the star is really important here.

33
00:02:36.870 --> 00:02:43.100
Now inside of this generator function, you can now write your looping logic.

34
00:02:43.140 --> 00:02:47.080
So here, we could take our while loop here,

35
00:02:47.160 --> 00:02:52.500
copy it and comment it out down there and move it into our generator function.

36
00:02:52.570 --> 00:02:57.110
It's now here, I'm looping through all my employees using my own next methods,

37
00:02:57.120 --> 00:03:04.530
I'm still using this, we still have that but now instead of console logging the employee here, what I

38
00:03:04.530 --> 00:03:09.840
do is I use another keyword which is available in Javascript and that's the yield keyword

39
00:03:09.840 --> 00:03:13.500
and I yield the employee value I got here.

40
00:03:14.240 --> 00:03:16.060
Now what does this all do?

41
00:03:16.090 --> 00:03:21.970
Well this here in the end generates a new object, this function when it's called generates a new object

42
00:03:22.000 --> 00:03:24.820
which has a next method on its own.

43
00:03:24.850 --> 00:03:27.780
The fact that I use another next method in there does not matter,

44
00:03:27.790 --> 00:03:35.530
we can do that but we could alternatively also put all that logic in here and just wrap it into a while

45
00:03:35.530 --> 00:03:42.160
loop to go through all employees here and indeed just to avoid confusion, let's do that. Instead of utilizing

46
00:03:42.160 --> 00:03:49.090
another iterator function we wrote, let's write a new loop here where we get the current employee let's

47
00:03:49.090 --> 00:03:54.430
say, where we start at zero and that should be a variable of course so that we can change it

48
00:03:54.670 --> 00:04:03.520
and then while current employee is smaller than this employees length, we want to continue with that loop

49
00:04:04.110 --> 00:04:05.670
and inside of that loop,

50
00:04:05.800 --> 00:04:12.320
I then yield this employees for the current employee.

51
00:04:13.250 --> 00:04:18.140
So now here, we've got a loop that should also go through all employees but we get the special yield keyword.

52
00:04:18.290 --> 00:04:21.080
The yield keyword is a bit like return,

53
00:04:21.140 --> 00:04:29.500
it basically returns the thing after the yield keyword as a value, as a result of this function call.

54
00:04:29.720 --> 00:04:35.440
We use yield though because this is not a normal function, we have this star here turning this into a generator.

55
00:04:35.450 --> 00:04:39.160
Now what yield does is it kind of pauses execution,

56
00:04:39.170 --> 00:04:44.920
well not really because what the generator function overall does is it isn't executed like this,

57
00:04:44.920 --> 00:04:51.440
instead when this generator function gets executed, an iterator object will be created,

58
00:04:51.440 --> 00:04:58.070
so an object which has a next method, this generator function builds you such an object. It gives you

59
00:04:58.070 --> 00:05:04.670
basically what we wrote before manually out of the box and the yield keyword will then basically define

60
00:05:04.700 --> 00:05:11.450
the return value of every call to the next method in that generated object.

61
00:05:11.480 --> 00:05:17.480
Now it sounds complex, we'll see it in action in a second of course and it executes until it encounters yield

62
00:05:17.960 --> 00:05:25.700
and then it returns the value after yield and pauses at the point where you had called yield and when

63
00:05:25.700 --> 00:05:31.460
you then execute the same function again, it does not start from scratch again but continuous running

64
00:05:31.700 --> 00:05:35.930
at the point where it paused before and I can show this to you here.

65
00:05:35.930 --> 00:05:44.110
Let's comment out this for/of loop and let's instead for now not use a symbol here but use any key here,

66
00:05:44.560 --> 00:05:49.560
get employee, any name of your choice.

67
00:05:49.620 --> 00:05:58.140
So now here if I console log company get employee and I call this as a regular function and then call

68
00:05:58.560 --> 00:06:00.180
next on that function

69
00:06:00.180 --> 00:06:07.530
because this here, this generator produces in the end an iterator, so it produces an object with a next

70
00:06:07.530 --> 00:06:08.300
method for us,

71
00:06:08.310 --> 00:06:09.860
that's what a generator does,

72
00:06:09.870 --> 00:06:15.870
so the return value of get employee is not what yield returns but it's just such an iterator, it's an

73
00:06:15.930 --> 00:06:17.430
object with the next method.

74
00:06:17.430 --> 00:06:23.580
So I have to call next on the result which we get back here and with that if we save that and we reload,

75
00:06:23.850 --> 00:06:29.760
we see we get exactly the same as before but now, we're not calling our custom next method up there,

76
00:06:29.760 --> 00:06:30.920
this is not happening.

77
00:06:30.960 --> 00:06:36.460
I could comment this out and comment out this current employee property here to make it really clear

78
00:06:36.460 --> 00:06:42.250
that this is not getting called and it will still work because the generator built such an object for

79
00:06:42.250 --> 00:06:50.400
us with its own next method and we can call this next method multiple times of course as you see and

80
00:06:50.400 --> 00:06:53.380
this will then execute our logic here.

81
00:06:53.400 --> 00:06:57.400
Now as you see, it always however yields me Max here,

82
00:06:57.570 --> 00:07:02.370
the reason for that is that whenever I call get employee, I generate a new iterator.

83
00:07:02.370 --> 00:07:09.390
So instead what we should do is we should create a new constant here and call company get employee once

84
00:07:09.780 --> 00:07:13.840
and then use that same object all the time down there.

85
00:07:13.920 --> 00:07:20.580
In addition, after changing this, we should also make sure that in our generator logic here, we also increment

86
00:07:20.670 --> 00:07:24.650
current employee by one. Now with these changes here,

87
00:07:24.690 --> 00:07:30.360
we now change that whenever we yielded a new value, we increment that value and therefore now if we

88
00:07:30.360 --> 00:07:35.840
save that and we reload, you see I print Max, Manu, Anna and thereafter undefined and we are done

89
00:07:35.850 --> 00:07:36.630
which we aren't

90
00:07:36.630 --> 00:07:42.380
before. Now this is our own generator logic doing its work here,

91
00:07:42.530 --> 00:07:45.650
now why is that useful now?

92
00:07:45.650 --> 00:07:48.880
Well for one we have a very simple way of creating an iterator,

93
00:07:48.890 --> 00:07:52.050
we don't have to write our own next method as we did before,

94
00:07:52.070 --> 00:07:57.830
we just have this short logic here and yield is the special thing here together with the star.

95
00:07:57.830 --> 00:08:04.460
This allows Javascript to build such an iterator behind the scenes and whenever yield is encountered,

96
00:08:04.460 --> 00:08:10.220
this basically is the point where Javascript saves the current state of execution and the next time

97
00:08:10.220 --> 00:08:16.760
you call the next method on the created iterator, it will continue from that point on and therefore then

98
00:08:16.790 --> 00:08:22.250
give you the next value and the next value and the next value, wrapped into such an object where the

99
00:08:22.310 --> 00:08:29.060
actual value you yielded can be found on the value key and you get this additional done property that

100
00:08:29.090 --> 00:08:32.630
tells you whether there are more values left or not.

101
00:08:32.630 --> 00:08:35.950
Now and if we combine this with our symbol here,

102
00:08:35.960 --> 00:08:44.060
so if we don't use get employee here but symbol.iterator, well then we can actually tap into some

103
00:08:44.060 --> 00:08:49.970
native Javascript features to loop through our object here. Now we can indeed comment out this code down

104
00:08:49.970 --> 00:08:56.800
there and use such a for/of loop here and it should work. If we do this and we reload,

105
00:08:57.020 --> 00:09:03.590
you see I'm printing Max, Manu and Anna here because what a for/of loop does is it goes to this object

106
00:09:03.590 --> 00:09:09.830
you're looping through and it searches for this symbol iterator thing there, then it executes the function

107
00:09:09.830 --> 00:09:15.110
which it finds there which should be a generator so that in the end this returns an iterator, right?

108
00:09:15.140 --> 00:09:20.960
If you execute that generator function, you get an iterator as you learned and then Javascript executes

109
00:09:20.960 --> 00:09:28.820
the next method on this iterator it got for you as long as done is not true and extracts the thing in

110
00:09:28.820 --> 00:09:35.640
the value property into this constant here which you can then use and consume inside of your for/of

111
00:09:35.640 --> 00:09:37.190
the loop body

112
00:09:37.190 --> 00:09:43.370
and this is how you can write your own for/of loopable objects with the help of this special well-known

113
00:09:43.640 --> 00:09:47.420
iterator symbol and this generator function.

114
00:09:47.420 --> 00:09:51.520
Now of course iterators and generators, these are very advanced features

115
00:09:51.550 --> 00:09:55.800
but this really can be handy if you want to write your own looping logic.

116
00:09:55.880 --> 00:10:00.470
You can either do it manually by adding your own next method and making sure it gets called correctly

117
00:10:00.920 --> 00:10:07.040
or by simply writing such a generator function which together with the yield keyword allows you to define

118
00:10:07.250 --> 00:10:13.610
when the function should pause or when a new value should be emitted the next time the function is called

119
00:10:13.610 --> 00:10:16.610
again and again until there are no more values left,

120
00:10:16.610 --> 00:10:22.010
so until there are no more yield calls found in the function execution which in this case happens once

121
00:10:22.010 --> 00:10:27.040
you make it out of this while loop and then together with this special symbol, you can use for/of,

122
00:10:27.050 --> 00:10:34.890
you can also use the spread operator now on this object for example. If I console log company here, this

123
00:10:34.890 --> 00:10:38.010
normally would not work, not like this at least

124
00:10:38.100 --> 00:10:44.430
but here you see it works and it gives me these three employees because the spread operator also behind

125
00:10:44.430 --> 00:10:47.130
the scenes looks for this iterator symbol,

126
00:10:47.130 --> 00:10:52.530
it then goes through all the values we get there and adds them as elements here in this new array.

127
00:10:52.530 --> 00:10:59.760
These are symbols, integrators and generators, an advanced feature which still can come in handy in certain

128
00:10:59.760 --> 00:11:00.390
scenarios.
