WEBVTT
1
00:00:02.340 --> 00:00:04.920
So our game is taking shape,

2
00:00:04.920 --> 00:00:09.060
the login functionality is still missing and we'll add it soon,

3
00:00:09.060 --> 00:00:15.060
before we do that I want to show you one pattern which you also sometimes see in code or which you might

4
00:00:15.060 --> 00:00:21.230
want to use if you're having an if condition where you are using some kind of identifier

5
00:00:21.240 --> 00:00:28.110
as I'm doing it here with the mode in attack monster. There we get attack and strong attack as values

6
00:00:28.110 --> 00:00:29.730
for which I check here.

7
00:00:29.730 --> 00:00:35.670
Now that means that in this case, since we receive that here as a parameter in this function, we need to

8
00:00:35.670 --> 00:00:42.330
make sure that whenever we call that function, we do pass in attack or strong attack written exactly

9
00:00:42.330 --> 00:00:48.380
like this and a simple typo like this already will break our function.

10
00:00:48.380 --> 00:00:55.950
Now obviously, we can always find and fix such a typo thereafter but you might want avoid code where

11
00:00:55.980 --> 00:01:01.830
you use string identifiers like this, where you then can mistype.

12
00:01:01.830 --> 00:01:05.890
Now that does not mean that you should avoid string identifiers altogether,

13
00:01:05.940 --> 00:01:10.110
there is just a more elegant way of handling them and that's exactly what I want to show to you now.

14
00:01:10.110 --> 00:01:17.010
What you can always do is you can create some global constants, let's say here at the top of our

15
00:01:17.010 --> 00:01:19.670
file, doesn't technically have to be there,

16
00:01:19.680 --> 00:01:23.550
it just should be done before you start using these constants

17
00:01:23.550 --> 00:01:30.580
but having such global static constants at the top of your file quickly makes it possible for other

18
00:01:30.580 --> 00:01:34.370
developers to understand which key-values this file uses,

19
00:01:34.470 --> 00:01:37.760
which key static values this file uses

20
00:01:37.830 --> 00:01:45.360
and there we could create something like mode, attack and store a string value of attack in there

21
00:01:45.360 --> 00:01:53.250
or alternatively, a number. So you could also have mode attack equal to zero, let's say and also have mode

22
00:01:53.330 --> 00:02:00.630
strong attack where you then store strong attack in there or if you work with numbers instead of

23
00:02:00.630 --> 00:02:04.430
string, mode strong attack might be one,

24
00:02:04.440 --> 00:02:06.780
so a different number then for general attack.

25
00:02:06.780 --> 00:02:08.700
Now what's the idea behind these constants?

26
00:02:08.700 --> 00:02:12.700
The idea is that you can use them in your if condition down there

27
00:02:12.810 --> 00:02:19.590
and also when you call the function because now instead of comparing mode to a hardcoded string here,

28
00:02:19.950 --> 00:02:23.610
we can compare it to mode attack,

29
00:02:23.610 --> 00:02:27.210
so to this constant which of course holds such a string.

30
00:02:27.210 --> 00:02:31.260
The idea is that we have for only type the string once up there

31
00:02:31.260 --> 00:02:35.910
and even if we do mistype here, that doesn't really matter therefore because thereafter we only

32
00:02:35.910 --> 00:02:41.430
refer to this constant in all the places where we want to use this identifier and therefore we avoid

33
00:02:41.580 --> 00:02:43.800
that danger of mistyping.

34
00:02:43.800 --> 00:02:47.570
So here I refer to mode strong attack and therefore

35
00:02:47.570 --> 00:02:52.950
now when we call the function, we pass in mode attack and mode strong attack

36
00:02:52.950 --> 00:02:58.650
and it's way harder for us to mistype the variable or the constant name here because here we get some

37
00:02:58.680 --> 00:03:03.630
IDE support and therefore we avoid this extra error source.

38
00:03:03.780 --> 00:03:07.410
So with that, our code still works exactly as before,

39
00:03:07.530 --> 00:03:14.700
it just should make it easier for us to ensure that we avoid dumb mistakes or dumb typos which might

40
00:03:14.700 --> 00:03:17.550
cost us minutes or hours to find and fix.
