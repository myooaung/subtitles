1
00:00:02,490 --> 00:00:06,650
There are two other ways of transforming an array.

2
00:00:06,900 --> 00:00:13,350
Let's say instead of getting our tax adjusted prices here, we're happy with the original prices array

3
00:00:13,350 --> 00:00:19,600
but we want to sort it because right now as you can tell, it's clearly not sorted. For that you have

4
00:00:19,600 --> 00:00:27,070
another method which you can call and I'll store that sorted array in a new constant, sorted prices and

5
00:00:27,070 --> 00:00:29,490
you call that on an array, just like map and so on 

6
00:00:29,500 --> 00:00:31,140
and that's the sort method.

7
00:00:31,210 --> 00:00:37,330
Now this will sort the array and let's see what this gives us, if we console log sorted prices here and

8
00:00:37,330 --> 00:00:41,240
save that and I reload,

9
00:00:41,260 --> 00:00:43,260
these are my sorted prices.

10
00:00:43,270 --> 00:00:46,020
Well, are they? This does really look sorted,

11
00:00:46,540 --> 00:00:51,750
it's certainly not the original order though. There, 5.99 was the second element,

12
00:00:51,760 --> 00:00:55,710
now it's the third one but it's also not sorted correctly.

13
00:00:55,780 --> 00:01:03,010
Well the thing is sort by default converts everything to a string and then it's simply sorts this

14
00:01:03,280 --> 00:01:06,640
in a string logic and there, one is smaller than three

15
00:01:06,640 --> 00:01:08,850
for example, this is how it sorts it,

16
00:01:08,860 --> 00:01:10,840
now that's not what we want here.

17
00:01:10,840 --> 00:01:16,660
The good thing is you can pass your own function to sort, a function which takes two numbers, a compare

18
00:01:16,660 --> 00:01:23,280
function in the end. You can label these parameters A and B, the name is up to you and what this does

19
00:01:23,280 --> 00:01:30,120
is it executes these functions on pairs of elements here and it always gives you these two elements

20
00:01:30,150 --> 00:01:36,150
which it's currently comparing and then you should return for that pair of elements which it is comparing,

21
00:01:36,810 --> 00:01:37,760
whether A,

22
00:01:37,860 --> 00:01:44,820
so the first value is greater than B, if they're equal or if B is greater and then it will swap these

23
00:01:44,820 --> 00:01:48,780
two values if needed based on that and move on to the next pair,

24
00:01:48,780 --> 00:01:55,010
so to one of the values it just swapped and the next value in line. Let's see that in practice because that

25
00:01:55,010 --> 00:01:56,570
will clarify things.

26
00:01:56,570 --> 00:02:02,270
So here we can add an if check in a function because we will need to return one of three values, is A greater

27
00:02:02,270 --> 00:02:03,140
than B,

28
00:02:03,140 --> 00:02:10,630
are they equal or is B  greater? So let's check if A is greater than B, what should return in that case is

29
00:02:11,200 --> 00:02:12,030
1.

30
00:02:12,070 --> 00:02:17,280
So you return 1 and it should be 1 if A is greater than B,

31
00:02:17,350 --> 00:02:25,390
else if A is equal to B and it's up to you whether you will use a triple or a double equality check here

32
00:02:25,390 --> 00:02:29,650
depending on which kind of data you are sorting, you return 0.

33
00:02:29,650 --> 00:02:31,860
So if they're equal, you return 0,

34
00:02:32,230 --> 00:02:38,410
well you can probably guess what you return in the else case which is that B is greater than A, well then you

35
00:02:38,410 --> 00:02:40,000
return -1.

36
00:02:40,480 --> 00:02:46,470
So 1 positive if A is greater than B, zero if they're equal, -1

37
00:02:46,480 --> 00:02:48,070
if B is greater

38
00:02:48,070 --> 00:02:53,280
and if you now do that and you reload, now this looks much better

39
00:02:53,320 --> 00:02:57,700
and now we have a correctly sorted list here for our number logic.

40
00:02:57,700 --> 00:03:03,970
Now of course which logic you have in here in your function you pass to sort totally is up to you

41
00:03:03,970 --> 00:03:08,310
and depends on the kind of data you have in your array which you are trying to sort.

42
00:03:08,320 --> 00:03:11,460
Here for numbers, such a comparison makes sense,

43
00:03:11,500 --> 00:03:13,980
you could be checking anything in here though.

44
00:03:14,020 --> 00:03:14,860
Now that sort

45
00:03:14,860 --> 00:03:20,080
kind of related to it is another function which you can call on arrays and that is reverse.

46
00:03:20,830 --> 00:03:22,990
Well and this does just what it sounds like,

47
00:03:22,990 --> 00:03:26,640
you can't pass any arguments to it, it simply reverses in array.

48
00:03:26,650 --> 00:03:31,980
So here I first sort the array and then I output the reversed array, so hence if I reload

49
00:03:31,990 --> 00:03:35,280
now we get the highest number first and the lowest number last.

50
00:03:35,320 --> 00:03:38,920
Now side note, here of course I'm just showing that to show you reverse,

51
00:03:38,920 --> 00:03:44,890
if you indeed do find yourself writing such code, it would always be better to just inverse your sorting

52
00:03:44,890 --> 00:03:45,460
logic,

53
00:03:45,460 --> 00:03:50,380
this would also sort from highest to lowest and save you that extra reverse call here,

54
00:03:50,380 --> 00:03:50,630
right?

55
00:03:50,620 --> 00:03:57,220
So no need to do that double sorting and reversal if you can just adjust your sort logic,

56
00:03:57,220 --> 00:03:59,530
so this here also yields the same.

57
00:03:59,530 --> 00:04:01,520
I just wanted to show you reverse here

58
00:04:01,630 --> 00:04:06,460
and of course it's good to know reverse because you're not always sorting, sometimes you have an array

59
00:04:06,460 --> 00:04:10,400
which generally has the right order, just for this specific use case,

60
00:04:10,480 --> 00:04:11,650
you want to reverse it,

61
00:04:11,650 --> 00:04:13,390
well then reverse is your friend.
