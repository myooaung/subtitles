WEBVTT
1
00:00:02.140 --> 00:00:07.660
So I talked a lot about cross site scripting attacks but this is an important and very dangerous attack

2
00:00:07.660 --> 00:00:08.820
pattern.

3
00:00:08.860 --> 00:00:14.800
There also is another way of launching cross site scripting attacks which is also important to be aware of

4
00:00:14.800 --> 00:00:16.200
and to keep in mind.

5
00:00:16.360 --> 00:00:23.980
Let's say you fixed all your holes in your code by either using text content or in places where you

6
00:00:23.980 --> 00:00:30.100
need to render HTML code by using sanitize-html or something comparable.

7
00:00:30.100 --> 00:00:35.410
Now you still might be vulnerable to cross site scripting attacks and do you have any idea where they

8
00:00:35.410 --> 00:00:36.540
might be coming from?

9
00:00:36.550 --> 00:00:44.470
How could someone still get Javascript code into your page which then executes when users load your

10
00:00:44.470 --> 00:00:45.410
page?

11
00:00:45.490 --> 00:00:49.870
Let's say you fixed all these holes where you output user generated content which is the number one

12
00:00:49.870 --> 00:00:55.370
hole, well how about third-party packages? In this project,

13
00:00:55.370 --> 00:01:00.070
I'm using the Google Maps Javascript SDK for example, I do have this import here

14
00:01:00.260 --> 00:01:06.920
and what this does is it downloads a script written by a team at Google which then also of course runs

15
00:01:07.280 --> 00:01:09.270
on the machines of my users,

16
00:01:09.530 --> 00:01:16.070
Any third-party Javascript package you add to your project executes code when your app runs because

17
00:01:16.070 --> 00:01:18.020
you use the code of that package,

18
00:01:18.020 --> 00:01:24.110
in the case of Google Maps, we use it in the map.js file There we use that new Google Maps map thing,

19
00:01:24.410 --> 00:01:29.150
where do you think is this coming from? It's coming from the Google Maps Javascript SDK,

20
00:01:29.150 --> 00:01:34.120
so it is based on the Javascript code we import from Google's servers.

21
00:01:34.280 --> 00:01:38.880
So we trust Google that the code is secure because if it weren't,

22
00:01:38.990 --> 00:01:45.530
since this runs on the machines of our users, this of course would also be able to execute malicious

23
00:01:45.530 --> 00:01:46.650
code there.

24
00:01:46.670 --> 00:01:52.240
So when adding third-party libraries, you want to make sure that it's from parties whom you trust,

25
00:01:52.250 --> 00:01:59.570
for example Google is quite trustworthy of course but you also of course need to be sure or very sure

26
00:01:59.570 --> 00:02:08.750
at least that these companies or library authors protect themselves against being compromised.

27
00:02:08.750 --> 00:02:15.890
You might trust Google but if someone gets access to this code on their servers which sounds unlikely

28
00:02:15.920 --> 00:02:23.600
but if this is done by a frustrated Google engineer let's say, then this person can of course rewrite

29
00:02:23.630 --> 00:02:29.660
this code which you import such that it still works but that in addition to working, it does something

30
00:02:29.660 --> 00:02:30.950
malicious.

31
00:02:30.950 --> 00:02:37.340
So third-party libraries of course also can be hacked and if they are, the malicious code that's injected

32
00:02:37.340 --> 00:02:42.780
into the library runs in your app and on the machines of your users.

33
00:02:42.830 --> 00:02:48.950
So you need to be sure that the libraries you're using are secure, that they're trustworthy and that

34
00:02:48.950 --> 00:02:52.190
they are also defending against being hacked.

35
00:02:52.190 --> 00:02:58.430
So you want to make sure you're working with third-party libraries which are actively maintained so

36
00:02:58.430 --> 00:03:04.460
that security holes in the libraries are fixed but at the same time, where contributions which in the

37
00:03:04.460 --> 00:03:10.460
case of open source libraries which most libraries are can be made by anyone, that contributions are

38
00:03:10.460 --> 00:03:11.360
checked.

39
00:03:11.390 --> 00:03:14.960
Of course you can check the source code of the third-party library as well

40
00:03:15.020 --> 00:03:21.020
and if it's a relatively straightforward simple library, it might be worth scanning over that code and

41
00:03:21.020 --> 00:03:23.110
looking for anything strange.

42
00:03:23.120 --> 00:03:25.390
Does it try to access browser storage?

43
00:03:25.400 --> 00:03:30.590
Does it try to send HttpRequests even though it's a library that shouldn't do that?

44
00:03:30.590 --> 00:03:33.500
Have a look at that and analyze that code.

45
00:03:33.500 --> 00:03:39.680
It might sound dumb but this is a potential security issue, so you want to make sure you protect yourself

46
00:03:39.920 --> 00:03:41.480
against it.

47
00:03:41.690 --> 00:03:45.340
If you install something through npm, you also get a little hint.

48
00:03:45.440 --> 00:03:51.110
If I run npm install here to install all the third-party packages we're executing here, you'll see that once

49
00:03:51.110 --> 00:03:53.800
this is done, we get a little output here,

50
00:03:53.900 --> 00:04:00.530
all these packages and found zero vulnerabilities. Not every vulnerability it finds here

51
00:04:00.800 --> 00:04:05.950
is an issue though and for some projects, it will find quite a lot of vulnerabilities.

52
00:04:06.020 --> 00:04:11.660
It just means that there are potential security holes which might also not be related to the code which

53
00:04:11.660 --> 00:04:13.010
is output to your users

54
00:04:13.130 --> 00:04:18.290
but all these build tools which run on your machine and only on your machine as a developer and therefore

55
00:04:18.290 --> 00:04:24.140
might not be as dangerous but still, it just shows you that if there are vulnerabilities, you might want

56
00:04:24.140 --> 00:04:28.080
to check the versions of packages you're using and consider updating.

57
00:04:28.100 --> 00:04:33.980
Now again, you shouldn't freak out just because you find some vulnerabilities here because most packages

58
00:04:33.980 --> 00:04:37.310
you use in modern projects only run on your machine

59
00:04:37.310 --> 00:04:39.860
and of course this is also not what you want,

60
00:04:39.870 --> 00:04:45.110
that you have a potential security hole there but at least you're not sharing this code with all users

61
00:04:45.110 --> 00:04:48.050
of your web page, so therefore this might not matter as much

62
00:04:48.170 --> 00:04:53.660
and a lot of vulnerabilities are really just that, a vulnerability, not necessarily one which is getting

63
00:04:53.660 --> 00:04:59.750
abused at this point of time. Still having a green zero here is nice to have but even more important

64
00:04:59.750 --> 00:05:06.620
is that any packages you use that end up in your code, like the Google Maps package here, that these packages

65
00:05:06.620 --> 00:05:09.230
are also trustworthy and secure.

66
00:05:09.260 --> 00:05:15.140
You never have 100% security but you should of course aim for as much security as possible.
