1
00:00:02,330 --> 00:00:07,140
Now let me have a closer look at our text here, at our string which we're combining from a couple of

2
00:00:07,140 --> 00:00:08,520
substrings.

3
00:00:08,520 --> 00:00:14,010
Now for one I mentioned that you can use single or double quotes and the decision is really up to you,

4
00:00:14,010 --> 00:00:16,710
you can go for either of the two solutions,

5
00:00:16,710 --> 00:00:22,440
I will use single quotes throughout the course but that's just my personal preference, not something you

6
00:00:22,440 --> 00:00:23,320
have to use.

7
00:00:23,340 --> 00:00:27,460
However, you should be consistent and stick to your choice thereafter.

8
00:00:27,690 --> 00:00:35,670
What you can't do is mix your characters, so you can't open a string with a double quote and try to close

9
00:00:35,670 --> 00:00:37,030
it with a single quote,

10
00:00:37,050 --> 00:00:37,890
this will not work,

11
00:00:37,890 --> 00:00:41,300
you always have to close a string with the character,

12
00:00:41,300 --> 00:00:44,580
so with double quote or single quote with which you opened it.

13
00:00:44,880 --> 00:00:50,330
So this string here for example is opened with a double quote and then I have no other double quote,

14
00:00:50,340 --> 00:00:52,550
therefore this string never gets closed,

15
00:00:52,620 --> 00:00:59,250
that actually therefore is invalid Javascript code and hence my IDE already complains here that

16
00:00:59,250 --> 00:01:04,370
this is an unterminated string literal so that this string has no end

17
00:01:04,440 --> 00:01:08,640
and if we would try to run this code and reload our page,

18
00:01:08,640 --> 00:01:14,280
indeed if you look into the developer tools again, you'll get an error.

19
00:01:14,290 --> 00:01:17,880
Now the interesting thing actually is if I do close it with a double quote,

20
00:01:17,980 --> 00:01:22,540
now everything in between will be treated as one text.

21
00:01:22,540 --> 00:01:28,000
So when you open something with single or double quotes, everything in between the opening and closing

22
00:01:28,120 --> 00:01:33,310
single or double quotes will be one piece of text, which makes sense if you think about it.

23
00:01:33,340 --> 00:01:37,080
How would Javascript know whether you want to create a new string there,

24
00:01:37,070 --> 00:01:40,440
there also is nothing like a string inside of a string?

25
00:01:40,540 --> 00:01:47,520
Instead if we now reload the page, we got rid of our error but now our whole we want to create a string

26
00:01:47,530 --> 00:01:54,100
code is actually treated as one piece of text and therefore output as such here.

27
00:01:54,130 --> 00:01:59,470
So you always have to close your string with what you opened it and everything in between will be treated

28
00:01:59,470 --> 00:02:00,750
as text.

29
00:02:00,760 --> 00:02:07,210
Now you can take advantage of this if you for example want to print this single quote character because

30
00:02:07,210 --> 00:02:12,520
right now if I use just single quotes and no double quotes and the same would be true if you were just

31
00:02:12,520 --> 00:02:18,270
using double quotes and no single quotes, if I reload, we get the output we saw before

32
00:02:18,490 --> 00:02:24,010
but what if I actually did want to output a single quote character here?

33
00:02:24,060 --> 00:02:28,830
Well then, you could try to add a single quote inside of a single quote but this won't work, instead

34
00:02:28,830 --> 00:02:35,580
what now happens is that Javascript creates a string here and creates a string here and in between, it

35
00:02:35,580 --> 00:02:41,760
has this bracket which actually leads to some invalid Javascript code overall here because we're not

36
00:02:41,760 --> 00:02:47,940
using any operators that would try to concatenate that and even if we would, a single opening bracket

37
00:02:47,940 --> 00:02:51,180
like this is not valid Javascript code.

38
00:02:51,300 --> 00:02:57,030
So if you want to output the single quote character, you can actually take advantage of the double quotes

39
00:02:57,030 --> 00:03:03,820
and for example wrap your code, your string that contains the single quote which you want to output, between

40
00:03:03,820 --> 00:03:09,280
double quotes because now we use double quotes to create the string, everything in between the treated

41
00:03:09,280 --> 00:03:12,850
as text and therefore if we save that and we reload,

42
00:03:12,850 --> 00:03:16,090
now we see the single quotes here as well.

43
00:03:16,090 --> 00:03:22,150
So that's one way of outputting single quotes if you wanted to, you could deviate from the rule of sticking

44
00:03:22,150 --> 00:03:27,750
to either a single or double quotes and make an exception if you really want to output the single or

45
00:03:27,760 --> 00:03:31,680
double quotes you otherwise use as your string delimiters.

46
00:03:31,720 --> 00:03:36,400
Here of course, I don't really want to print my single quotes so I don't need to do that.

47
00:03:36,490 --> 00:03:40,720
Now we'll dive into strings again and again throughout the course because there are more things you can do

48
00:03:40,720 --> 00:03:41,500
with them,

49
00:03:41,500 --> 00:03:45,540
one thing I want to do right away is restructure this string.

50
00:03:45,550 --> 00:03:52,570
We're building our string here with three pieces of text you could say, with the opening parentheses,

51
00:03:52,570 --> 00:03:59,080
with this code thereafter or with this text thereafter and with the value that's stored in default result.

52
00:03:59,080 --> 00:04:06,190
Now in such cases, you can actually also use back ticks instead of single quotes.

53
00:04:06,190 --> 00:04:07,620
So this is now not a single quote,

54
00:04:07,630 --> 00:04:13,190
this is the back tick character which you'll find on your keyboard, get rid of all other single quotes

55
00:04:13,200 --> 00:04:18,750
you actually have and get rid of these pluses you used to combine your strings, only keep the plus which

56
00:04:18,750 --> 00:04:22,860
you want to output on the page and replace the closing single quote

57
00:04:22,860 --> 00:04:25,830
also with the closing back tick or with the back tick.

58
00:04:25,920 --> 00:04:32,820
So now I got two back ticks which surround my text and therefore now if I save this, unsurprisingly here

59
00:04:32,820 --> 00:04:39,370
I say default result instead of the value which is actually stored in that default result constant

60
00:04:39,540 --> 00:04:43,150
but now back ticks give you access to a special syntax.

61
00:04:43,380 --> 00:04:49,710
You can now use a dollar sign in here and then an opening and closing curly brace and now you can put

62
00:04:49,710 --> 00:04:56,670
your variable or any expression which yields some result, which can be output as text,

63
00:04:56,790 --> 00:05:02,040
so you could also have a calculation like one plus one in here, so you can put that between your opening

64
00:05:02,040 --> 00:05:03,350
and closing curly braces

65
00:05:03,370 --> 00:05:11,340
now and what this does is it tells Javascript to output the value that's in this constant in this case in

66
00:05:11,340 --> 00:05:17,630
this place of your text. So it will not output the dollar sign or the curly brace,

67
00:05:17,760 --> 00:05:22,890
instead it will output the value of the expression as it's called,

68
00:05:22,890 --> 00:05:29,320
so in this case of the constant you have between the opening and closing curly brace. So if you now save

69
00:05:29,360 --> 00:05:35,090
that file and you reload, you'll see zero here which indeed is the value we have in default

70
00:05:35,090 --> 00:05:41,070
result. This only works with back ticks, if you used single or double quotes,

71
00:05:41,110 --> 00:05:47,620
this dollar sign curly brace thing would be treated as regular text and therefore output as such as you

72
00:05:47,620 --> 00:05:48,980
can see.

73
00:05:49,180 --> 00:05:54,580
So this is a really nice feature, using these back tics with this dollar sign curly brace thing,

74
00:05:54,940 --> 00:06:01,660
if you have some text in which you want to embed or inject some dynamic value, so the result of some

75
00:06:01,660 --> 00:06:09,220
calculation or the value that's stored in a variable or a constant, then this is simply shorter, it saves

76
00:06:09,220 --> 00:06:15,880
you the manual string concatenation which we previously had to do where we combined multiple strings with

77
00:06:15,880 --> 00:06:17,140
the plus operator,

78
00:06:17,140 --> 00:06:23,350
this is simply a bit shorter and therefore how you typically would build a string that includes dynamic

79
00:06:23,350 --> 00:06:24,320
values.

80
00:06:24,340 --> 00:06:32,350
This overall construct here is called a template literal, so if you ever Google for Javascript template

81
00:06:32,350 --> 00:06:36,030
literal, you'll find exactly this piece of syntax.

82
00:06:36,040 --> 00:06:40,050
Now there's actually more to it and we'll dive deeper into it throughout this course

83
00:06:40,120 --> 00:06:46,300
but this is the most basic and I would say most important form of using it because that's the form

84
00:06:46,330 --> 00:06:53,290
where you will work with it most often to have some text into which you inject or embed some dynamic

85
00:06:53,290 --> 00:06:54,020
value.

86
00:06:54,250 --> 00:06:59,620
Now some additional information about strings and template literals as we have it here.

87
00:06:59,830 --> 00:07:07,120
One convenient thing about template literals is that you can easily write multiline strings there. Now

88
00:07:07,150 --> 00:07:12,910
with multiline strings, I mean strings which really do have a line break in them.

89
00:07:12,970 --> 00:07:19,840
So let's say here in front of the asterisk character, I add a couple of line breaks and hence this string

90
00:07:19,840 --> 00:07:24,660
looks like that might look a bit strange at first but this is valid Javascript syntax,

91
00:07:24,670 --> 00:07:30,460
we opened a string here, we close it here and since it is a template literal with back ticks, this is

92
00:07:30,460 --> 00:07:35,620
allowed. For a normal string with single or double quotes, this would not be allowed but I will come back

93
00:07:35,620 --> 00:07:41,470
to that. Now if you save that and you reload this in the browser, you'll not see a difference, though if

94
00:07:41,470 --> 00:07:45,810
you have the developer tools opened which you can always open with view

95
00:07:45,970 --> 00:07:53,500
developer, developer tools and you then click on this select icon there and you select this part of

96
00:07:53,500 --> 00:07:59,750
your webpage, you will see that indeed the whitespace is considered here,

97
00:07:59,800 --> 00:08:05,660
it's just the browser and the default behavior of the browser and the h2 element that basically strips

98
00:08:05,660 --> 00:08:11,890
this redundant whitespace but it's output there and depending on where you output this, in which element

99
00:08:11,890 --> 00:08:19,540
and how that element is styled, you might also get that whitespace or the extra line break here in your

100
00:08:19,540 --> 00:08:20,350
webpage.

101
00:08:20,350 --> 00:08:25,480
So the fact that we don't see the line break here in the middle is really just due to how this is styled

102
00:08:25,510 --> 00:08:26,830
and rendered.

103
00:08:26,830 --> 00:08:32,950
If you go down here to the elements style of the h2 element which is selected and you add whitespace

104
00:08:33,010 --> 00:08:39,280
pre for example, then you will see the whitespace here as well because this is some CSS styling

105
00:08:39,280 --> 00:08:45,220
which does not omit the extra whitespace but instead render it, here in this case that means it renders

106
00:08:45,220 --> 00:08:52,570
this extra line break. So you can easily add line breaks here when using the template literal syntax,

107
00:08:52,930 --> 00:08:58,870
this can help you with readability because you might be able to read long strings easier or better here

108
00:08:58,870 --> 00:09:04,420
in the IDE if you add line breaks but you should always keep in mind that this is not just a visual

109
00:09:04,420 --> 00:09:09,780
thing for you in the IDE but that the line breaks really are part of the string.

110
00:09:09,820 --> 00:09:14,890
The same is true if you indent this, for example you could think that if you write it like this, it's

111
00:09:14,890 --> 00:09:18,270
a normal string but it's more readable to you as a developer.

112
00:09:18,310 --> 00:09:25,030
Well if you save that and you reload, our styling will be lost because we reloaded but here on the right

113
00:09:25,030 --> 00:09:27,580
you can see this extra whitespace,

114
00:09:27,610 --> 00:09:34,630
it really is part of the string and if we re-add this style here to our h2 element here in the developer

115
00:09:34,630 --> 00:09:41,140
tools by setting whitespace to pre, you see we really do have the line break and the extra whitespace

116
00:09:41,140 --> 00:09:48,090
in here. So be careful when you use that and really only use the line break or extra whitespace feature

117
00:09:48,090 --> 00:09:48,410
here

118
00:09:48,520 --> 00:09:54,160
if you want to build a string that has the extra whitespace or that has the line break, don't do it just

119
00:09:54,160 --> 00:09:56,370
for readability.

120
00:09:56,380 --> 00:09:59,650
Now if I come back to normal strings, there

121
00:09:59,650 --> 00:10:06,500
let's say we have an error message which we don't need for this app or for this website here but just

122
00:10:06,500 --> 00:10:11,830
to demonstrate how we work with normal, which means non-template literal strings,

123
00:10:11,830 --> 00:10:18,940
then of course you use single or double quotes and you might have a message like an error occurred, something

124
00:10:18,940 --> 00:10:20,380
like this.

125
00:10:20,380 --> 00:10:26,200
If you would want to split this across multiple lines, you have two options - you can close the string

126
00:10:26,200 --> 00:10:32,620
here by adding a single quote and then reopen a new one and combine them with a plus and then add a

127
00:10:32,620 --> 00:10:33,800
line break,

128
00:10:33,820 --> 00:10:40,400
this is valid Javascript code, you can span expressions that use operators across multiple lines,

129
00:10:40,540 --> 00:10:45,970
that would be possible here for mathematical operations just as it is possible for concatenating strings

130
00:10:45,970 --> 00:10:47,680
with the plus operator

131
00:10:47,710 --> 00:10:53,620
and here you can also indent. If you do this and you would output this somewhere on the webpage,

132
00:10:53,650 --> 00:10:59,590
this indeed would not include a line break and also not extra whitespace because this is really just

133
00:10:59,590 --> 00:11:05,740
something we do for us here in the IDE to make this more readable. The string that's getting constructed

134
00:11:05,800 --> 00:11:12,430
only consists of these characters between the single quotes, so there's no line break in there and there

135
00:11:12,430 --> 00:11:15,340
is also no extra whitespace.

136
00:11:15,640 --> 00:11:21,090
Now if you would want to add a real line break here in a string enclosed by single or double quotes,

137
00:11:21,100 --> 00:11:28,750
that is possible with a special character or a special combination of characters - you add a backslash

138
00:11:28,870 --> 00:11:36,310
and then n. What this will do if it would be rendered to the screen is it will not output \n

139
00:11:36,430 --> 00:11:40,650
there but instead it will treat this as a line break. To show this,

140
00:11:40,650 --> 00:11:46,390
let's temporarily output the error message here instead of the calculation description, just temporarily

141
00:11:46,390 --> 00:11:47,870
so that we can see that.

142
00:11:48,130 --> 00:11:54,340
Now with that if you reload here, we see an error occurred and if we go back and add our good old style

143
00:11:54,340 --> 00:12:00,130
here to the h2 element right in developer tools down there by setting whitespace to pre, you see the

144
00:12:00,130 --> 00:12:03,050
line break here as well and you can also see it here,

145
00:12:03,250 --> 00:12:05,690
there is a line break after error.

146
00:12:06,010 --> 00:12:11,200
So with this \n, you can add a line break in a string no matter if you use single or double

147
00:12:11,200 --> 00:12:14,980
quotes, you could also use this here in the template literal by the way,

148
00:12:14,980 --> 00:12:20,620
it's also supported there but there you don't need it because there you can just add a normal line break

149
00:12:20,740 --> 00:12:24,440
and since you're in a template literal, that will add a line break to the string as well.

150
00:12:24,490 --> 00:12:29,920
So there, this is available, here in a normal string with single or double quotes, you need that \n

151
00:12:30,040 --> 00:12:30,540
thing.

152
00:12:31,600 --> 00:12:37,840
And by the way, using a backslash in a string has a special meaning, it escapes the character that comes

153
00:12:37,930 --> 00:12:44,470
after the backslash, which means the character after the backslash is not treated as a normal character

154
00:12:44,500 --> 00:12:50,240
with its normal meaning but instead combined with the backslash, it gets a special meaning.

155
00:12:50,320 --> 00:12:56,410
In this case here, we escaped the n and therefore we don't just output n here but instead backslash

156
00:12:56,410 --> 00:12:59,110
and n combined mean line break.

157
00:12:59,230 --> 00:13:05,440
You have more such combinations and attached, you will find a list of available shortcuts or combinations

158
00:13:05,440 --> 00:13:12,280
here in your strings. One other important combination for example is backslash and then a single quote.

159
00:13:12,340 --> 00:13:18,480
This is helpful if you want to output a single quote in your string, especially if your string is enclosed

160
00:13:18,490 --> 00:13:23,890
by single quotes. Without the backslash, we would have a syntax error here because what happens is we

161
00:13:23,890 --> 00:13:29,170
open a string with a single quote, here we then close it and then here in this case, we have a redundant

162
00:13:29,170 --> 00:13:33,910
single quote that tries to open a new string which then never gets closed.

163
00:13:33,910 --> 00:13:40,420
So we have to tell Javascript that this single quote should not be used as it normally uses single quotes,

164
00:13:40,540 --> 00:13:46,990
i.e. to close that string but instead that we want to output this single quote here as a normal character

165
00:13:46,990 --> 00:13:53,050
in our text and adding a backslash in front of it escapes the meaning the single quote would otherwise

166
00:13:53,050 --> 00:13:58,900
have and therefore allows us to do that, and of course an alternative always is to use double quotes

167
00:13:58,990 --> 00:14:05,130
to surround the string instead of single quotes and then you can use single quotes in the double quoted

168
00:14:05,130 --> 00:14:10,950
string without issues and without escaping it because it then won't have that special meaning of finishing

169
00:14:10,950 --> 00:14:16,350
your string or closing your string because you can only close a string with the character with which

170
00:14:16,350 --> 00:14:17,200
you opened it

171
00:14:17,250 --> 00:14:22,770
and since here, we opened a string with a double quote character, we can only close it with such and Javascript

172
00:14:22,770 --> 00:14:27,660
won't interpret a single quote as please close my string character,

173
00:14:27,660 --> 00:14:33,120
still useful to know that you could escape it like this. By the way if you want to output a backslash

174
00:14:33,120 --> 00:14:38,550
in the string, you need to escape this as well because otherwise, a single backslash always tells Javascript

175
00:14:38,580 --> 00:14:43,010
that the character after the backslash should be considered or should be escaped.

176
00:14:43,080 --> 00:14:48,600
So if you want to output just a backslash, you put another backslash in front of it to tell Javascript

177
00:14:48,900 --> 00:14:55,080
hey the character after this backslash has a special meaning and double backslash then in fact tells

178
00:14:55,080 --> 00:15:01,950
Javascript I want to output a single backslash here as part of my string. So these are some of the useful

179
00:15:01,950 --> 00:15:04,040
things that you should know about strings,

180
00:15:04,170 --> 00:15:06,090
you will encounter them throughout this course

181
00:15:06,090 --> 00:15:10,380
and throughout your career as a developer. You don't need to learn all these things by heart,

182
00:15:10,380 --> 00:15:16,980
the attached list of escapable characters might be useful, though \n, \\

183
00:15:17,010 --> 00:15:21,960
and backslash single quote are the most important ones I would argue, the ones you typically use most

184
00:15:22,020 --> 00:15:22,960
often.

185
00:15:23,160 --> 00:15:28,260
And being aware of the template literal, that you can interpolate content here and that you can easily

186
00:15:28,260 --> 00:15:30,420
add line breaks and whitespace in here,

187
00:15:30,420 --> 00:15:32,630
that's also something which is good to know I guess.

188
00:15:35,000 --> 00:15:40,530
And with that, I reverted all of that, again I'm sending a calculation description to output result and

189
00:15:40,530 --> 00:15:44,640
I deleted the extra error message variable because we don't need it here to continue,

190
00:15:44,660 --> 00:15:48,880
I just wanted to dive into some of these string specialties and things you should know.
