1
00:00:02,280 --> 00:00:08,080
Time to comment this all out again and dive in more examples.

2
00:00:08,080 --> 00:00:16,320
So let's say here, we have another array, prices where we have a bunch of numbers like

3
00:00:16,320 --> 00:00:16,920
this

4
00:00:20,550 --> 00:00:22,940
and now we want to do something with every price,

5
00:00:22,950 --> 00:00:27,380
we want to add tax on it. So we might have a tax here,

6
00:00:27,540 --> 00:00:37,110
Germany that's 19% value added tax and now we want to get the adjusted prices, so tax adjusted

7
00:00:37,480 --> 00:00:40,110
prices is an empty array initially.

8
00:00:40,110 --> 00:00:47,700
Now what we can do is we can add a for loop and go through all prices, like this here and then we could

9
00:00:47,700 --> 00:00:51,020
push a new item onto tax adjusted prices,

10
00:00:51,030 --> 00:00:56,460
we can do that despite it being a const because it's a reference type and we never assign a new value

11
00:00:56,460 --> 00:00:57,600
to that constant,

12
00:00:57,600 --> 00:01:02,040
we just change the data in memory, check out the behind the scenes module if that's brand new to you,

13
00:01:02,040 --> 00:01:03,930
there I talk about that.

14
00:01:03,930 --> 00:01:10,180
So now we can push a new item onto it and that would be price times one plus tax for example

15
00:01:10,310 --> 00:01:19,500
and if I then console log the tax adjusted prices here, that will just work. If I now reload this, here

16
00:01:19,500 --> 00:01:21,560
we have the tax adjusted prices.

17
00:01:21,630 --> 00:01:23,910
Let's ignore this strange float value here,

18
00:01:24,060 --> 00:01:25,680
that's something I'll come back to in the number

19
00:01:25,680 --> 00:01:26,710
deep dive section,

20
00:01:26,760 --> 00:01:28,510
it's not a bug or anything like that,

21
00:01:28,590 --> 00:01:30,570
it's just some number imprecision

22
00:01:30,600 --> 00:01:37,570
computers can have with floating point numbers. So generally that all works though, that's the main takeaway

23
00:01:37,680 --> 00:01:39,710
and there's nothing wrong with that.

24
00:01:39,830 --> 00:01:42,940
They're just also is an alternative to the for/of loop,

25
00:01:42,940 --> 00:01:46,020
not saying though that anything is wrong with the for/of loop

26
00:01:46,240 --> 00:01:50,770
but if you would for example need the index for some reason, then you don't have that available here

27
00:01:50,770 --> 00:01:55,690
in the for/of loop, instead you could use a regular for loop of course where you manually manage

28
00:01:55,690 --> 00:02:02,560
the index in the end or you just use another nice method you have on arrays and that's the ForEach method.

29
00:02:03,180 --> 00:02:09,910
The ForEach method, just like find and find index, takes a function and that function which it takes

30
00:02:10,180 --> 00:02:17,980
takes three arguments or up to three arguments. The value it's currently looking at, because just like

31
00:02:17,980 --> 00:02:23,560
the function you pass to find and find index, this function executes for every element in the array,

32
00:02:24,010 --> 00:02:30,340
so here we get our price let's say, then the index or idx or however you want to name this argument

33
00:02:30,700 --> 00:02:36,310
and then the full array in case you're interested but I won't need that here, just for completeness sake

34
00:02:36,340 --> 00:02:42,690
I'll add it here. By the way, the fact that I use the same name as I do here is not an issue here because

35
00:02:42,690 --> 00:02:45,750
of shadowing, this has a different scope here,

36
00:02:45,780 --> 00:02:46,050
right?

37
00:02:46,050 --> 00:02:48,270
It has its own block scope in the end,

38
00:02:48,360 --> 00:02:50,330
this is in the end like a variable of this block

39
00:02:50,340 --> 00:02:54,120
so it has its own scope and therefore if I use a name that's defined outside of it,

40
00:02:54,120 --> 00:03:00,060
well for inside this function, this outside constant is simply overwritten, not here of course

41
00:03:00,090 --> 00:03:03,700
so this will work, just if it would try to access it from inside the function.

42
00:03:03,750 --> 00:03:08,520
Of course you could also pick a different name here for prices but due to this shadowing process and

43
00:03:08,520 --> 00:03:11,040
block scope, it also won't be a problem.

44
00:03:11,100 --> 00:03:17,280
Well and now in here, we could do the same thing I did in my for/of loop. So of course the only difference

45
00:03:17,280 --> 00:03:24,150
therefore is that I don't use for/of which on its own isn't necessarily an advantage but the advantage

46
00:03:24,150 --> 00:03:27,840
could be that if you need it you have to index available here.

47
00:03:27,840 --> 00:03:33,090
So if you also would want to transform your entries to objects where you store the index, that would

48
00:03:33,090 --> 00:03:39,930
be fairly easy to do here. Price object could be an object where you have the index, which is now that

49
00:03:39,990 --> 00:03:48,330
idx value and then the tax adjusted price which is that price we're calculating with that formula

50
00:03:48,630 --> 00:03:54,120
and then we could push the price object here and now we get access to the index which we don't have

51
00:03:54,120 --> 00:03:55,710
in the for/of loop.

52
00:03:55,710 --> 00:04:02,580
So with that if I now save that and reload, we see we now have an array of objects with index zero tax adjusted

53
00:04:02,580 --> 00:04:06,380
price, index one tax adjusted price and so on.

54
00:04:06,420 --> 00:04:08,820
So that's ForEach, an alternative for/of

55
00:04:08,820 --> 00:04:12,480
which has the extra benefit of giving you easy access to the index

56
00:04:12,690 --> 00:04:18,600
and in general, simply an alternative you could use instead of for loops if you want. Using for loops

57
00:04:18,630 --> 00:04:22,620
is not bad though, both is possible and simply an option.
