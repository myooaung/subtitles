1
00:00:02,610 --> 00:00:06,480
So the order matters for variables and constants,

2
00:00:06,480 --> 00:00:07,370
it does not

3
00:00:07,370 --> 00:00:12,810
for functions. There is one more interesting thing in our code here and that's that we have a constant

4
00:00:12,810 --> 00:00:17,790
here in the function and we have a variable and a constant outside of the function.

5
00:00:17,790 --> 00:00:20,140
Now when should you use what

6
00:00:20,140 --> 00:00:21,510
and what's the difference?

7
00:00:21,510 --> 00:00:22,740
Is there a difference?

8
00:00:22,740 --> 00:00:23,790
Well there is a difference

9
00:00:24,150 --> 00:00:30,090
and generally, if you use some data only in the function, like this result which I use in the function,

10
00:00:30,210 --> 00:00:31,530
I return it here,

11
00:00:31,530 --> 00:00:34,620
then you want to define it in the function.

12
00:00:34,620 --> 00:00:43,020
I could have said let result here and then just assign a new value here and then we could even do something

13
00:00:43,020 --> 00:00:49,860
strange, we could say add like this and set current result equal to result.

14
00:00:49,920 --> 00:00:56,370
This code would technically work because what I'm doing here is I'm defining this result variable globally,

15
00:00:56,400 --> 00:01:00,900
so in my script, then I assign a new value to it in a function

16
00:01:00,900 --> 00:01:07,140
because in your functions and that's one important thing to keep in mind, you can access any variable

17
00:01:07,140 --> 00:01:13,870
or constant defined outside of the function, so you can read variables or constants defined globally, 

18
00:01:13,920 --> 00:01:18,350
so we can interact with this result variable and I'm assigning a new value to it

19
00:01:18,510 --> 00:01:23,850
and therefore when I thereafter call the function, I actually don't care about the return value, I let

20
00:01:23,850 --> 00:01:25,280
that go into the void

21
00:01:25,500 --> 00:01:32,880
but since inside of the function, I assigned a new value to result, I can use that global variable and

22
00:01:32,880 --> 00:01:36,140
store it in another global variable or use it anywhere else,

23
00:01:36,150 --> 00:01:42,840
whatever you want to do. This however would not be very good code because we have a function that manipulates

24
00:01:42,840 --> 00:01:49,440
a global variable, that's sometimes something you want to do but often that makes your functions harder

25
00:01:49,440 --> 00:01:56,780
to understand and harder to predict what they're going to do and in addition, that we return this

26
00:01:56,900 --> 00:01:58,670
value here is totally redundant,

27
00:01:58,670 --> 00:02:01,430
so not the best code we could write.

28
00:02:01,580 --> 00:02:08,180
Instead it's way better if we go with the setup we had before, where we have our contained constant here,

29
00:02:08,180 --> 00:02:11,830
we returned this and the function therefore works standalone.

30
00:02:12,020 --> 00:02:15,200
It doesn't magically change our global variables,

31
00:02:15,200 --> 00:02:17,390
instead we know when we call the function,

32
00:02:17,390 --> 00:02:21,470
this function will not alter anything, not anything global,

33
00:02:21,470 --> 00:02:24,740
instead it will only work with its internal data and then return us.

34
00:02:24,920 --> 00:02:26,740
This is called a pure function,

35
00:02:26,780 --> 00:02:30,260
it gets some input, returns an output, for the same input

36
00:02:30,260 --> 00:02:37,760
it always returns the same output and it doesn't manipulate anything global but it is worth noting that

37
00:02:37,760 --> 00:02:40,570
functions can access global variables, 

38
00:02:40,610 --> 00:02:46,220
they can also access other functions you might have defined, so you can call a function from inside a function

39
00:02:47,030 --> 00:02:48,740
and that is built into Javascript

40
00:02:48,740 --> 00:02:52,590
and it's a good thing which we'll also use from time to time.

41
00:02:52,700 --> 00:02:59,300
Now the other way around won't work though, if you define a constant or a variable inside of a function,

42
00:02:59,660 --> 00:03:06,890
then this has a so-called local or block scope which means it's available inside of this block, the block

43
00:03:06,890 --> 00:03:12,800
is surrounded or marked by these curly braces and we can use it anywhere in this block but we can't

44
00:03:12,800 --> 00:03:14,240
use it outside of there.

45
00:03:14,240 --> 00:03:19,600
So if I try to throw an alert where I want to output the value that's stored in result here

46
00:03:19,730 --> 00:03:26,750
after defining the function, you will see that if I reload this, nothing happens. You see we seem to have

47
00:03:26,750 --> 00:03:33,020
an error and indeed if I open my console in the developer tools again, I get a reference error that result

48
00:03:33,080 --> 00:03:39,370
is not defined because I'm trying to use a variable here in line 9,

49
00:03:39,380 --> 00:03:47,060
so in this line here, which wasn't defined because as I just explained, you can use global variables and

50
00:03:47,060 --> 00:03:54,140
constants and functions inside of functions but you can't use local variables or constants or functions,

51
00:03:54,320 --> 00:03:58,710
so variables or constants or functions defined inside of functions

52
00:03:58,760 --> 00:04:04,370
and yes you can define functions inside of functions, something I'll dive in later, you can use those

53
00:04:04,520 --> 00:04:07,610
from outside of the function.

54
00:04:07,610 --> 00:04:13,940
So using result outside of the function won't work because this is a constant defined inside of the

55
00:04:13,940 --> 00:04:19,640
function and it won't work no matter if we use it here or here after we call the function because you

56
00:04:19,640 --> 00:04:22,270
could think we only called a function here,

57
00:04:22,310 --> 00:04:26,270
so thereafter result has to be defined and now it should be available.

58
00:04:26,450 --> 00:04:31,510
Well actually as it turns out, if you now reload, you still get the same error here,

59
00:04:31,520 --> 00:04:37,010
now in line 11 instead of line 9 because I moved that code but still, result it's not available

60
00:04:37,160 --> 00:04:43,700
outside of the function and that's one important thing you need to understand with Javascript. Functions

61
00:04:43,790 --> 00:04:51,740
have full access to their surrounding context, so to all the variables and so on that are defined above

62
00:04:51,740 --> 00:04:53,480
them or outside of them

63
00:04:53,480 --> 00:04:57,370
but what you define inside of a function is only available in there,

64
00:04:57,440 --> 00:05:02,690
the only way of kind of getting it out is by returning it.

65
00:05:02,690 --> 00:05:10,160
Now at this point you might also wonder, what if a variable is defined globally and then we try to create

66
00:05:10,160 --> 00:05:12,560
it locally in a function as well?

67
00:05:12,560 --> 00:05:17,870
So we have it declared with let or const globally and then we want to do the same with let or

68
00:05:17,870 --> 00:05:19,370
const in the function,

69
00:05:19,370 --> 00:05:22,610
so not overwrite the existing one but create a new one,

70
00:05:22,610 --> 00:05:23,930
is that possible?

71
00:05:23,960 --> 00:05:28,220
And the answer would be yes, this is a process called shadowing and in the lecture after this one,

72
00:05:28,250 --> 00:05:29,600
I'll dive a bit deeper into this.
