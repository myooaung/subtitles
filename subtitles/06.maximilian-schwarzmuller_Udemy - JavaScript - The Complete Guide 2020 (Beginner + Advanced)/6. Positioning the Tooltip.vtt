WEBVTT
1
00:00:02.360 --> 00:00:09.230
Let's now go back to our main project here by again changing to index.html. Now there,

2
00:00:09.560 --> 00:00:12.720
we want to position this tooltip here.

3
00:00:12.740 --> 00:00:16.000
If I click on more info, I don't want to render it is here at the bottom,

4
00:00:16.040 --> 00:00:23.840
instead it would be nice to kind of position it near this element. To do that, we need to tap into Javascript,

5
00:00:23.840 --> 00:00:29.750
into the app.js file and there, work on the positioning with some of the properties and tools we now

6
00:00:29.750 --> 00:00:30.930
learned about.

7
00:00:31.280 --> 00:00:33.560
It's in the place where we create the tooltip,

8
00:00:33.740 --> 00:00:39.320
so therefore inside of the tooltip class in the create method where we can configure it and where we

9
00:00:39.320 --> 00:00:45.680
can position it. To position that tooltip, we also need to know where the host element, so the element

10
00:00:45.710 --> 00:00:50.420
that is responsible for showing that tooltip, lives in.

11
00:00:50.420 --> 00:00:55.610
So in the end, where this project item, where we clicked on more info, where this can be found

12
00:00:55.910 --> 00:01:01.580
and for that on the tooltip when we create it here in the constructor, I expect one extra argument,

13
00:01:01.580 --> 00:01:09.320
I also want to get the host element ID here so that I can actually pass this to super host element

14
00:01:09.350 --> 00:01:16.090
ID because in that component which is our base class, we expect that host element ID

15
00:01:16.100 --> 00:01:19.190
and then we use it to select that host element and store it in a

16
00:01:19.210 --> 00:01:24.920
this host element property which we'll of course therefore can then also access from our subclass

17
00:01:24.950 --> 00:01:30.250
because we can access any property which we have in a base class or therefore in a prototype

18
00:01:30.350 --> 00:01:38.270
also from a subclass or an object using that prototype and hence here in tooltip, we now pass this

19
00:01:38.270 --> 00:01:44.620
on to our base class component and therefore we'll have access to this host element property.

20
00:01:44.660 --> 00:01:45.940
So what can we do with that?

21
00:01:45.950 --> 00:01:53.540
Well here in create where we create our tooltip element, before we add the event listeners maybe, let's console

22
00:01:53.540 --> 00:02:02.840
log this host element and then getBoundingClientRect, this method we saw earlier before just to see

23
00:02:02.840 --> 00:02:08.900
whether that all works and where we can get that information about that host element positioning and so

24
00:02:08.900 --> 00:02:09.740
on.

25
00:02:09.740 --> 00:02:14.420
So now to test this, we just need to make sure that we actually do get a host element ID here on the

26
00:02:14.420 --> 00:02:18.620
constructor of tooltip because at the moment, we're expecting this but we're not sending this when we

27
00:02:18.620 --> 00:02:20.000
create a tooltip.

28
00:02:20.060 --> 00:02:26.540
So here in project item where I create a new tooltip as a third argument to the tooltip constructor, we

29
00:02:26.540 --> 00:02:32.210
should now forward the ID of this project which we can get under this ID, that's the property of

30
00:02:32.210 --> 00:02:38.470
this project which holds the ID of that project and with that if we go back and reload, let's click

31
00:02:38.470 --> 00:02:44.290
on more info and indeed we get our object here and there we get the coordinates of this project

32
00:02:44.290 --> 00:02:51.010
DOM node and its size and width. The tooltip now also is created here based on the logic we have in

33
00:02:51.010 --> 00:02:57.190
that component class where we now use the host element now that we got it to insert our tooltip there

34
00:02:57.370 --> 00:03:02.110
and whilst this doesn't look too bad, it's not exactly how I want to position this, also because I don't

35
00:03:02.110 --> 00:03:06.780
want this to grow and shrink when I add a tooltip but we'll come back to that. For now let's focus on

36
00:03:06.780 --> 00:03:10.390
the coordinates and there we see to the left,

37
00:03:10.390 --> 00:03:16.210
we have 63 pixels in the end here, to the excuse me to the left, to the top it's 161

38
00:03:16.200 --> 00:03:22.270
and the exact values here are of course not values I set up like this in the app.css

39
00:03:22.270 --> 00:03:23.340
file, instead

40
00:03:23.440 --> 00:03:30.400
that depends on how the browser renders this from top to bottom, on system specific settings, you might have

41
00:03:30.400 --> 00:03:37.810
for example regarding the font size because I'm using rem in here to set my sizes and hence these are the

42
00:03:37.930 --> 00:03:43.660
calculated values which are of course exactly the values I'm interested in because I want to have the current

43
00:03:43.960 --> 00:03:48.190
position I have on the screen to position this tooltip.

44
00:03:48.880 --> 00:03:55.840
So now back in the script, we can position this tooltip in the tooltip create method here with some information

45
00:03:55.840 --> 00:04:00.400
from that bounding client rect or to also practice with some of the other properties I showed you,

46
00:04:00.610 --> 00:04:02.550
with some information from those properties.

47
00:04:02.860 --> 00:04:08.670
So for example I am interested in the host element position left and I'll name the constant like this

48
00:04:08.670 --> 00:04:14.190
therefore and we get this by accessing this host element and then offsetLeft.

49
00:04:14.240 --> 00:04:21.130
Remember that's the distance from the start of our coordinate system on the page to the leftmost

50
00:04:21.130 --> 00:04:24.340
point of our element.

51
00:04:24.380 --> 00:04:30.830
Now I also want to get the host element position top and this can be fetched with this host element

52
00:04:31.490 --> 00:04:33.700
offsetTop.

53
00:04:33.730 --> 00:04:39.010
So now I know the x and y coordinates of my element,

54
00:04:39.010 --> 00:04:44.980
so the top left corner of the host elements so to say, which coordinates this top left corner has. Now

55
00:04:44.980 --> 00:04:51.760
I also need the height because I want to position the tooltip, at the end at the bottom of this element

56
00:04:51.790 --> 00:04:59.510
and not in the top left corner. So I can get my host el height here with this host element and now the height

57
00:04:59.510 --> 00:05:00.750
is the client height,

58
00:05:00.760 --> 00:05:03.370
that's the height of the content,

59
00:05:03.700 --> 00:05:09.830
I could also get offsetHeight to get the full height including any borders but here I have no borders

60
00:05:09.940 --> 00:05:18.350
so that should be the same. With that information, we can try positioning our tooltip, for that let's 

61
00:05:18.400 --> 00:05:21.590
calculate an x and a y position for the tooltip.

62
00:05:21.730 --> 00:05:26.980
x could be the host el position left and then maybe plus 20 pixels,

63
00:05:26.980 --> 00:05:32.980
and if you work with values here, these are now always pixels because what you fetch here are also

64
00:05:32.980 --> 00:05:37.180
pixels and let's get a y coordinate

65
00:05:37.240 --> 00:05:44.500
and here I want to use my host element position top, so the position of my top border in the coordinate

66
00:05:44.500 --> 00:05:49.000
system so to say and to that, I want to add the height.

67
00:05:49.000 --> 00:05:54.700
Now important, when I add something to that since my coordinate system starts in the top left corner,

68
00:05:54.970 --> 00:05:57.470
we push elements further down.

69
00:05:57.520 --> 00:06:03.790
So if I have the coordinate of my mouse cursor here and then I add 100 to that and we render an

70
00:06:03.820 --> 00:06:10.420
element at that new position, it will be rendered 100 pixels down from that point because the coordinate

71
00:06:10.420 --> 00:06:15.820
system goes from top left to bottom right basically, that's how the browser lays out the web page and

72
00:06:15.820 --> 00:06:17.520
that's how you have to think about that,

73
00:06:17.530 --> 00:06:25.750
so we have to add to height here to go down on the page. Now I'll actually then deduct 10 pixels to not go down

74
00:06:25.750 --> 00:06:30.010
the entire height but only height - 10 basically

75
00:06:30.040 --> 00:06:37.180
and now let's try out these coordinates for rendering tooltip. Now to position an element, you don't do this

76
00:06:37.450 --> 00:06:45.700
by accessing tooltip element and then offsetTop and setting this equal to a value. All these top and

77
00:06:45.700 --> 00:06:52.240
left coordinates are just read-only values, if you want to assign a new value, you do that with CSS

78
00:06:52.240 --> 00:06:52.990
instead.

79
00:06:52.990 --> 00:06:59.950
So here we can access the style property of the tooltip element and then we can set left equal to x

80
00:07:00.280 --> 00:07:02.170
and now important, really important and

81
00:07:02.170 --> 00:07:08.400
a common mistake, if you're assigning a style and we need to do that here as explained, it's not enough

82
00:07:08.400 --> 00:07:14.310
to just set this equal to some number which is in the end what we have here in x and y but you need to set

83
00:07:14.310 --> 00:07:19.380
it up as you would write it in CSS code which means if you work with pixels here, you have to

84
00:07:19.380 --> 00:07:22.080
add px after the value.

85
00:07:22.650 --> 00:07:29.220
So here in app.js, I need to add +px, so we in the end set this to a string which is now made up

86
00:07:29.220 --> 00:07:33.080
of my number and pixels and therefore this gives me something like 500px,

87
00:07:33.150 --> 00:07:43.230
just an example and we do the same for tooltip elements style top and set this to y + px. If we now

88
00:07:43.230 --> 00:07:50.460
do that and we save this, let's reload and click on more info and you will see no difference and

89
00:07:50.470 --> 00:07:57.900
the reason for that is that we can set left and top but due to the way CSS works and you can't magically

90
00:07:57.900 --> 00:08:01.090
change this with Javascript which is good,

91
00:08:01.170 --> 00:08:06.270
you also first of all need to set one other style on the tooltip element,

92
00:08:06.270 --> 00:08:12.750
you need to set the position style to absolute and then you can really position the element in the absolute

93
00:08:12.750 --> 00:08:14.970
coordinate system on the screen,

94
00:08:14.970 --> 00:08:18.630
otherwise it's always positioned relative in the document flow,

95
00:08:18.660 --> 00:08:21.060
this is how the browser and CSS works.

96
00:08:21.060 --> 00:08:26.880
So now by setting position to absolute, we can make that work and now if we reload, indeed you see now

97
00:08:26.880 --> 00:08:32.260
the box doesn't grow anymore and we render the tooltip in this position.

98
00:08:32.320 --> 00:08:33.490
Now that's great,

99
00:08:33.520 --> 00:08:39.130
you will encounter a strange behavior if you now scroll to the bottom

100
00:08:39.130 --> 00:08:45.160
project in the first box and you click on more info here, you see the tooltip is totally in the wrong

101
00:08:45.160 --> 00:08:46.180
position now,

102
00:08:46.230 --> 00:08:48.570
now what could be the reason for that?

103
00:08:48.580 --> 00:08:56.110
Well if we take a closer look and we scroll this element down again, I would say this tooltip is roughly

104
00:08:56.110 --> 00:09:01.150
in the same position as the tooltip is here for the first element, just ignoring that we scrolled it.

105
00:09:02.350 --> 00:09:05.140
So the scroll distance here,

106
00:09:05.170 --> 00:09:06.820
that's the problem.

107
00:09:06.820 --> 00:09:13.200
It's not taken into account here when we calculate our top and leftmost position and indeed that is

108
00:09:13.200 --> 00:09:19.830
what's happening, when we get coordinates of an element, these coordinates ignore whether the element has

109
00:09:19.830 --> 00:09:22.170
been scrolled somewhere or not.

110
00:09:22.380 --> 00:09:29.100
Now to include the scrolling information, we just have to find out by how far we scroll the content in

111
00:09:29.100 --> 00:09:32.370
this box and we of course can find out how far we scrolled it,

112
00:09:32.430 --> 00:09:34.070
I showed you how that works.

113
00:09:34.290 --> 00:09:42.790
So we can get our parent element scrolling or however you want to name it by reaching out to this host

114
00:09:42.800 --> 00:09:48.110
element, then to the parent element of that to get the entire box, the entire unordered list and not just

115
00:09:48.110 --> 00:09:51.860
the single project item and then the scrollTop property.

116
00:09:51.860 --> 00:09:59.480
Remember, this tells you by how far you scrolled in that container and in the end, this parent element scrolling,

117
00:09:59.480 --> 00:10:02.930
that is something we have to deduct from our calculation here,

118
00:10:02.930 --> 00:10:09.260
so we have to deduct it from there so that we move the tooltip up a bit and don't position it at the

119
00:10:09.250 --> 00:10:13.190
original position or the original coordinates of that element

120
00:10:13.310 --> 00:10:20.550
but the actual position which is adjusted by the amount of scrolling we did basically.

121
00:10:20.600 --> 00:10:27.920
So now by deducting this, if we reload again and I scroll up this box here, this project that and I click

122
00:10:27.920 --> 00:10:28.930
on more info,

123
00:10:28.970 --> 00:10:30.760
now this is in the right position.

124
00:10:30.890 --> 00:10:32.030
Now it's not sticky

125
00:10:32.030 --> 00:10:36.260
if you scrolled, that would be a bit more advanced, you would have to set up event listeners, listen to scrolling

126
00:10:36.440 --> 00:10:39.070
and I will dive into event listeners and so on

127
00:10:39.170 --> 00:10:43.010
in the events module where we can learn way more about event listeners

128
00:10:43.010 --> 00:10:45.020
but for now, this is not the focus,

129
00:10:45.020 --> 00:10:51.350
the important thing here is that we are able to now position this correctly with the help of the coordinates

130
00:10:51.350 --> 00:10:54.620
we're getting and with the help of the width and the scrolling we're getting.
