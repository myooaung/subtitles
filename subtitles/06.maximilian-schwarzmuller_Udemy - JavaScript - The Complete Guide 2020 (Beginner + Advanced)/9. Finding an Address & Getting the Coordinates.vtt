WEBVTT
1
00:00:02.210 --> 00:00:07.580
So let's make sure that finding a user address works or an entered address and we'll do that in the

2
00:00:07.580 --> 00:00:13.580
find address handler here of course. For that we need to do a couple of things, we need to get access

3
00:00:13.580 --> 00:00:14.930
to what the user entered here,

4
00:00:15.020 --> 00:00:20.450
we need to prevent the default so that submitting a form doesn't actually submit it, it doesn't try

5
00:00:20.450 --> 00:00:22.740
to send the request to the server,

6
00:00:22.780 --> 00:00:29.600
we then need to reach out to Google's servers and translate a user entered address into coordinates,

7
00:00:29.660 --> 00:00:30.980
latitude and longitude,

8
00:00:30.980 --> 00:00:38.930
this is how you express places, coordinates on the map or on in a geographic way in general.

9
00:00:38.930 --> 00:00:40.280
So let's start simple,

10
00:00:40.280 --> 00:00:46.250
we will get the event argument here and we can call prevent default on that to prevent the submission

11
00:00:46.250 --> 00:00:47.660
of the form.

12
00:00:47.780 --> 00:00:55.790
Next I want to get the address the user entered and we can get this by using event target which will

13
00:00:55.790 --> 00:00:57.170
be our form,

14
00:00:57.320 --> 00:01:00.140
that's the target which triggered the event in the end

15
00:01:00.140 --> 00:01:05.910
and there we can use query selector to get the input in the form and I only have one input in there,

16
00:01:06.050 --> 00:01:08.720
so we'll get that input then.

17
00:01:08.740 --> 00:01:13.280
Now I'm not interested in the entire input, I'm just interested in the value the user entered, so we can

18
00:01:13.280 --> 00:01:16.160
access .value here to get that value.

19
00:01:16.220 --> 00:01:21.770
Now we can do a little bit of validation here and check if we don't have an address somehow or if we

20
00:01:21.770 --> 00:01:29.330
do have an address but after trimming it, the length is zero which means the user didn't enter something

21
00:01:29.810 --> 00:01:35.710
and then I just show an alert where I say invalid address entered,

22
00:01:35.720 --> 00:01:43.240
please try again and I return. If we make it past this if check, we know we have a valid address or at least

23
00:01:43.390 --> 00:01:45.760
we have some text and we can try to look it up.

24
00:01:46.630 --> 00:01:55.720
So here, I will again show my loading spinner then, create a new modal and point at the same content I

25
00:01:55.720 --> 00:02:02.560
have up there, loading modal content, we can actually take both arguments we have up there and we could

26
00:02:02.560 --> 00:02:04.950
therefore also refactor this into its own method

27
00:02:04.960 --> 00:02:10.590
but I'll just do it like this and I will call show here to show that spinner. Next,

28
00:02:10.690 --> 00:02:15.820
we need to make sure that we reach out to Google's servers because they do have an API for us which

29
00:02:15.820 --> 00:02:21.220
we can use to translate the entered address which could be something like a street name into coordinates

30
00:02:21.970 --> 00:02:24.250
and I don't want to do this here in this class,

31
00:02:24.250 --> 00:02:27.770
this class should be focused on working with the inputs and so on,

32
00:02:27.790 --> 00:02:32.520
instead I'll create a new folder, utility and you can name this however you want and in there

33
00:02:32.530 --> 00:02:38.480
I'll create a location.js file and this should be a file which holds utility methods for getting

34
00:02:38.620 --> 00:02:48.040
coordinates for an address for example. So in here, in the location.js file, we can add a new method or a new

35
00:02:48.040 --> 00:02:56.020
function now just like this, doesn't have to be in a class, get coords from address would be a fitting

36
00:02:56.020 --> 00:03:02.590
name where we get an address as an argument and this should be a function and we then make a HttpRequest

37
00:03:02.590 --> 00:03:06.070
in here and return the coordinates.

38
00:03:06.100 --> 00:03:11.920
Now I want to export this function so that we can use it from outside this file as well and I will add

39
00:03:11.920 --> 00:03:17.800
the async keyword inside of it because we will use a promise in here, we will send a HttpRequest and

40
00:03:17.800 --> 00:03:23.500
I want to use that async await syntax you learned about in the course to have this more readable promise

41
00:03:23.560 --> 00:03:28.690
syntax instead of using then and catch but of course you could use then and catch as you learned it

42
00:03:28.890 --> 00:03:32.530
in the async code section.

43
00:03:32.530 --> 00:03:37.660
Now in here, we need to send a request and we need to send this to Google's servers, to be precise we'll

44
00:03:37.660 --> 00:03:39.450
need the geocoding API

45
00:03:39.460 --> 00:03:45.580
Google offers and if you google for Google geocoding API, you should find the official docs here.

46
00:03:45.580 --> 00:03:50.680
Now as always here you can learn all about that and you will need an API key and a working project for

47
00:03:50.680 --> 00:03:51.630
all that

48
00:03:51.760 --> 00:03:58.480
but with that, we can just copy this example URL here by clicking this copy button and send a

49
00:03:58.480 --> 00:04:04.480
request to this with our real address for what you want to get coordinates. So we can use the fetch API

50
00:04:04.480 --> 00:04:10.360
here which of course not all browsers support, so we might want to use a library like axios instead

51
00:04:10.750 --> 00:04:17.620
but here to also practice fetching again, I'll go with that and send a request to this URL,

52
00:04:17.650 --> 00:04:24.880
enter it as a string here. Now actually, I'll not enter it as a string but as a template literal so that

53
00:04:24.880 --> 00:04:30.580
we can inject content into the string easily because there are a couple of parts that we'll need to replace,

54
00:04:30.580 --> 00:04:35.500
for example the address. This is a dummy address which is getting looked up here, Google headquarters

55
00:04:36.040 --> 00:04:39.730
and we can replace this entire part here with our actual address,

56
00:04:39.850 --> 00:04:42.020
so here I'll inject some content,

57
00:04:42.130 --> 00:04:47.530
same for the API key, we need to replace that and I want to inject it because I will set up a global

58
00:04:47.530 --> 00:04:54.550
constant here, Google API key where I want to store that key and that can be the same key as you're using

59
00:04:54.550 --> 00:04:56.320
in your index.html file,

60
00:04:56.380 --> 00:05:06.220
so here you can grab this key which we added there earlier and add this here in this constant in the

61
00:05:06.220 --> 00:05:12.190
location.js file as a string and then we can use the Google API key here as a key which is injected

62
00:05:12.190 --> 00:05:14.950
into this dynamically generated string.

63
00:05:15.130 --> 00:05:20.290
Now for the address, I want to use the address we're getting here but one important note, since it will be part

64
00:05:20.290 --> 00:05:28.150
of a URL, we have to make sure it's converted such that whitespace or special characters are translated

65
00:05:28.150 --> 00:05:35.770
into a URL-friendly encoding and for that we got a helpful utility function built into Javascript

66
00:05:35.950 --> 00:05:42.370
or exposed by the browser in Javascript I should say and that's the encodeURI function. It's globally

67
00:05:42.430 --> 00:05:48.910
available, made available by the browser, we can pass in a string and we get a URL-friendly string back.

68
00:05:49.240 --> 00:05:56.370
So here I got my URL address which we can now inject into our string here and with that, we should send

69
00:05:56.370 --> 00:06:02.440
a request to a URL that works there. It should be a get request so we don't need to configure it in

70
00:06:02.440 --> 00:06:09.160
any other way and instead we can just await it because I'm using async here and store the response

71
00:06:09.220 --> 00:06:17.650
in a constant, of course as I mentioned, you could use then and catch as well. Now if the response is not

72
00:06:17.790 --> 00:06:21.180
okay, then we know we have an error,

73
00:06:21.180 --> 00:06:31.900
so I want to throw a new error here where I say failed to fetch coordinates, please try again. If that's not

74
00:06:31.900 --> 00:06:38.020
the case, I want to extract the response data by awaiting response.json

75
00:06:38.080 --> 00:06:40.040
and now that should be our coordinates data

76
00:06:40.040 --> 00:06:42.680
but and that's a Google specific thing,

77
00:06:42.680 --> 00:06:46.440
it could also fail without using an error status code,

78
00:06:46.490 --> 00:06:50.670
so without making it into this if block and we can tell if it failed

79
00:06:50.720 --> 00:06:56.930
if we have an error message property in the response body. So it will have a 200 status code

80
00:06:56.930 --> 00:07:01.290
and still it might have such an error message which signals that it failed.

81
00:07:01.310 --> 00:07:08.240
So in this case, I also want to throw a new error using this built-in error constructor function Javascript

82
00:07:08.330 --> 00:07:12.740
provides and there, use the error message as an error message

83
00:07:12.740 --> 00:07:13.820
I forward,

84
00:07:13.820 --> 00:07:19.900
so the error constructor function here is really built into Javascript and globally available there.

85
00:07:20.180 --> 00:07:24.740
If we make it past all these if checks, we know we have a successful response and we get the response

86
00:07:24.740 --> 00:07:27.610
data which should hold the coordinates.

87
00:07:27.610 --> 00:07:31.310
Now we can console log the data here to get a feeling for its structure,

88
00:07:31.310 --> 00:07:36.130
of course this is also something you find in the official docs though, it will look something like this

89
00:07:36.350 --> 00:07:39.550
and in there what you'll have is a results

90
00:07:39.560 --> 00:07:40.980
key which is an array

91
00:07:41.300 --> 00:07:48.140
and the first element of the array is itself an object which will have a geometry property which will

92
00:07:48.140 --> 00:07:52.930
be an object with a location property, which will be an object with latitude and longitude

93
00:07:53.030 --> 00:08:01.340
and that's the thing I'm interested in. So to extract this here, we can get our coordinates by accessing

94
00:08:01.340 --> 00:08:07.310
data results and there, the first array element as I just explained, there the geometry key and there,

95
00:08:07.310 --> 00:08:11.590
the location key and that will then be an object with the lat and long keys

96
00:08:11.600 --> 00:08:17.090
and I want to return these coordinates, these coordinates object as part of this get coords from address

97
00:08:17.090 --> 00:08:18.080
function

98
00:08:18.080 --> 00:08:20.450
and now, we can use this in share place.
