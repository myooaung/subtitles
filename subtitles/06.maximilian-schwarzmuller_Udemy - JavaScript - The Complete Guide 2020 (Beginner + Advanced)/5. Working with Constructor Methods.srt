1
00:00:02,310 --> 00:00:07,410
So when I call new product, I want to create a product with different values than the default values

2
00:00:07,410 --> 00:00:08,510
here.

3
00:00:08,610 --> 00:00:14,790
It would be nice if we could call new product and just pass information to that product function because

4
00:00:14,790 --> 00:00:20,850
we call it like a function, wouldn't it be nice if you could pass some arguments like a title, a price

5
00:00:20,880 --> 00:00:22,550
and so on here?

6
00:00:22,560 --> 00:00:23,850
Well turns out you can do that

7
00:00:23,850 --> 00:00:28,660
and for that, you go back to your class and you add a method to that class.

8
00:00:28,670 --> 00:00:35,080
Now a method is added just by adding some name and this can be any name of your choice of course,

9
00:00:35,220 --> 00:00:37,840
then parentheses and then curly braces.

10
00:00:37,860 --> 00:00:44,190
So like this method shorthand you learned about, important you don't add a semicolon thereafter and you

11
00:00:44,190 --> 00:00:46,110
also don't have an equals sign in here,

12
00:00:46,140 --> 00:00:52,290
it's just this shorthand here, right after any fields you might have added and you can of course have more

13
00:00:52,290 --> 00:00:58,530
than one method. You can add another method like this, just in a new line, no semicolon thereafter, just

14
00:00:58,530 --> 00:00:59,040
like that,

15
00:00:59,040 --> 00:01:04,720
basically like you would create a function outside of a class just without the function keyword.

16
00:01:04,770 --> 00:01:09,600
So here however, we don't add the some name method, we'll add custom methods later

17
00:01:09,690 --> 00:01:16,410
but now we need a special method, a method which Javascript automatically calls when we create a new

18
00:01:16,500 --> 00:01:21,720
instance of this class and we create a new instance when we call new and then execute this class like

19
00:01:21,720 --> 00:01:22,950
a function

20
00:01:22,950 --> 00:01:29,940
and this special method which Javascript executes for us is called the constructor method or the constructor

21
00:01:29,940 --> 00:01:34,060
function. We add constructor here as a method name

22
00:01:34,080 --> 00:01:35,650
and that's a reserved name

23
00:01:35,910 --> 00:01:38,210
and then parentheses and then curly braces.

24
00:01:38,300 --> 00:01:45,150
The idea behind a constructor is that it can accept arguments like any normal method and there for example,

25
00:01:45,150 --> 00:01:50,670
we could accept a title, an image or imageUrl or however you want to name it,

26
00:01:50,670 --> 00:01:56,940
I'll just name it image, a description and a price. So we can accept any arguments, any parameters you

27
00:01:56,940 --> 00:01:57,420
want

28
00:01:57,510 --> 00:02:05,190
just like that and in the curly braces and that's the interesting thing now, you can assign the values

29
00:02:05,190 --> 00:02:11,160
you're getting here for these parameters, so you can assign the arguments you're getting, to your class

30
00:02:11,520 --> 00:02:17,220
field, so to the properties of the object when it is instantiated then and you do this with the good

31
00:02:17,220 --> 00:02:25,410
old this keyword. This in here refers to your class or to be precise,

32
00:02:25,410 --> 00:02:31,290
since this class will be used to create an object, to the object that is created. So we can then for example

33
00:02:31,290 --> 00:02:34,910
say this title and set it equal to the title argument.

34
00:02:34,980 --> 00:02:39,330
So this title here refers to the property title which is added to product,

35
00:02:39,420 --> 00:02:40,730
so to the same property

36
00:02:40,740 --> 00:02:45,180
this field would add, title here refers to the title argument.

37
00:02:45,180 --> 00:02:49,760
Therefore we can also say this imageUrl and set it equal to image,

38
00:02:49,800 --> 00:02:52,190
so to the value we get in this parameter,

39
00:02:52,320 --> 00:02:59,860
same for the description. We can set this description equal to desc and this price equal to price.

40
00:03:00,000 --> 00:03:06,930
Now that will create a bunch of properties on the object which is created with this call here and initialize

41
00:03:06,930 --> 00:03:11,740
the values of these properties with the values you passed to the constructor.

42
00:03:11,760 --> 00:03:18,900
So now we can pass in a value for title like a pillow, thereafter

43
00:03:18,930 --> 00:03:20,890
second parameter is the image,

44
00:03:20,890 --> 00:03:26,980
so let's grab that imageUrl and pass that in here as a next argument to our constructor call

45
00:03:27,160 --> 00:03:31,870
and you call this like a normal function with the different values for the different parameters separated

46
00:03:31,870 --> 00:03:33,310
by commas.

47
00:03:33,310 --> 00:03:39,700
Third parameter is description, so let's grab this description here and add this after the image and

48
00:03:39,700 --> 00:03:42,550
last but not least, I have the price which I add here.

49
00:03:42,640 --> 00:03:48,700
Now let me restructure this with my shortcut and now we can get rid of this object because now we create

50
00:03:48,700 --> 00:03:52,520
our object with new product and the same for the carpet of course,

51
00:03:52,570 --> 00:03:59,710
here we can say a carpet, grab that image here and replace this image here with that image,

52
00:03:59,860 --> 00:04:08,950
adjust the price to 89.99 and also replace the description and thereafter we can get

53
00:04:08,950 --> 00:04:11,370
rid of this object as well.

54
00:04:11,410 --> 00:04:17,740
So now we're using this class as a blueprint and the huge advantage here is that we now have an easy,

55
00:04:17,740 --> 00:04:22,920
reusable way of creating objects which are guaranteed to always look the same,

56
00:04:22,960 --> 00:04:29,920
it's impossible for us to omit properties or to mistype properties because it's all defined in here

57
00:04:29,920 --> 00:04:32,010
in this class definition.

58
00:04:32,170 --> 00:04:34,570
So now if we save that and we reload,

59
00:04:34,570 --> 00:04:36,240
we get the same output as before

60
00:04:36,270 --> 00:04:40,270
because we're working with normal Javascript objects in the end,

61
00:04:40,270 --> 00:04:47,200
such a class when we instantiate it with a new keyword returns a normal Javascript object but in a more

62
00:04:47,200 --> 00:04:48,700
convenient way as I would argue.
