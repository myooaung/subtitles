1
00:00:02,270 --> 00:00:08,570
So we set up this project to have a package.JSON file to be managed by npm therefore, we also installed

2
00:00:08,570 --> 00:00:11,870
the ESLint extension in Visual Studio Code.

3
00:00:11,870 --> 00:00:18,470
Now with that out of the way, we can install our first package by running npm install, a command we used

4
00:00:18,500 --> 00:00:24,230
earlier already but now not -g because I don't want install it globally but instead

5
00:00:24,230 --> 00:00:34,020
--save or to be precise, --save-dev which basically signals to npm we want install

6
00:00:34,010 --> 00:00:40,280
the following package as a development dependency of this project, development dependency because it's

7
00:00:40,280 --> 00:00:44,510
not a third-party package which I want to use as part of my project,

8
00:00:44,510 --> 00:00:46,060
it will not be part of the code

9
00:00:46,070 --> 00:00:52,160
I want to upload to some server, it's just a package I need to do something with the code during development

10
00:00:52,400 --> 00:00:53,900
to optimize it, to check it,

11
00:00:53,900 --> 00:00:55,250
anything like that

12
00:00:55,400 --> 00:00:57,960
and then the name of the package here is ESLint,

13
00:00:57,980 --> 00:00:58,450
one word,

14
00:00:58,460 --> 00:01:03,480
that's the package we want install. You can by the way always search for

15
00:01:03,500 --> 00:01:10,670
in this case npm ESLint and find out the npm js page about ESLint to read more about this package,

16
00:01:10,670 --> 00:01:12,390
about its usage and so on,

17
00:01:12,500 --> 00:01:17,570
for this specific package, there is a lot you can configure and I won't dive into all these details here

18
00:01:17,780 --> 00:01:22,280
but of course therefore you have these official docs so that you can learn more about that.

19
00:01:23,210 --> 00:01:30,050
So let's simply hit enter now and this will now install ESLint in this project here. It can take a while

20
00:01:30,050 --> 00:01:31,900
here, shouldn't take too long though

21
00:01:32,240 --> 00:01:37,380
and once this command finished, you should see some output like this and in package.json,

22
00:01:37,380 --> 00:01:43,760
you now have a dev dependencies entry where you see ESLint and the version number under which it

23
00:01:43,760 --> 00:01:45,800
was installed.

24
00:01:45,800 --> 00:01:52,250
This symbol here simply means that we're not necessarily focusing only on this specific version which

25
00:01:52,250 --> 00:01:57,230
is the latest version at the point of time I'm recording this but then we would be fine with this version

26
00:01:57,320 --> 00:02:00,270
or any version higher than that.

27
00:02:00,290 --> 00:02:05,150
We also have a package-lock.json file which holds more detailed information about this dependency

28
00:02:05,240 --> 00:02:07,580
and all the dependencies of this dependency

29
00:02:07,730 --> 00:02:11,840
and you can simply ignore that file, that package-lock.json file.

30
00:02:12,050 --> 00:02:15,500
Now important, you also now have a node modules folder.

31
00:02:15,560 --> 00:02:21,360
This folder holds the dependencies you installed and that's why this folder is quite big,

32
00:02:21,530 --> 00:02:26,960
all the dependencies of this dependency and the dependencies of the dependencies of the dependency and

33
00:02:26,960 --> 00:02:27,840
so on.

34
00:02:27,860 --> 00:02:33,440
So we have a lot of packages in there and in the end here, we also see ESLint, here you can see the code

35
00:02:33,470 --> 00:02:35,720
that the ESLint tool uses.

36
00:02:35,720 --> 00:02:41,980
It's all Javascript code but important to you, you should never change code in node modules,

37
00:02:41,990 --> 00:02:44,600
this is third-party package code,

38
00:02:44,600 --> 00:02:45,920
none of your business,

39
00:02:45,950 --> 00:02:51,660
we take it as granted and this node modules folder is managed by npm.

40
00:02:51,740 --> 00:02:57,340
Indeed you can delete it and if you want to share your code, you always should delete it and recreate

41
00:02:57,340 --> 00:03:04,290
it with npm install in your project folder. When you run npm install, npm will go into your package.json

42
00:03:04,310 --> 00:03:10,640
file, look at your dependencies and development dependencies and install all the dependencies it

43
00:03:10,640 --> 00:03:11,400
finds there,

44
00:03:11,420 --> 00:03:15,700
in this case ESLint and all the dependencies the ESLint package needs

45
00:03:15,860 --> 00:03:21,380
and that's also where this version number then is important, npm install will install at least this version

46
00:03:21,470 --> 00:03:25,160
of this package because of this version number we specified here.

47
00:03:25,220 --> 00:03:30,650
So if I hit npm install, it again we'll go ahead and download all required packages which in my case

48
00:03:30,650 --> 00:03:33,510
is the ESLint package.

49
00:03:33,520 --> 00:03:35,550
So with that, we have ESLint installed,

50
00:03:35,560 --> 00:03:36,820
how can we now use it?
