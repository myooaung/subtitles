1
00:00:02,240 --> 00:00:07,060
So let's work on the output here of our log, of the calculation we did

2
00:00:07,070 --> 00:00:12,910
so to say. Here, I in the end want to output the last calculation we did

3
00:00:13,100 --> 00:00:18,690
and for that I want to output a string here and I'll create it with back ticks so that I can inject values

4
00:00:18,690 --> 00:00:25,490
dynamically with this dollar sign curly brace syntax because what I want to output is current result

5
00:00:26,760 --> 00:00:30,530
plus and then the new result.

6
00:00:30,540 --> 00:00:35,840
Now the problem we have with that of course is that after this line, our current result already changed,

7
00:00:36,690 --> 00:00:42,490
so I rather create this description here, maybe just name it

8
00:00:42,480 --> 00:00:47,140
description or calc description or whatever you like

9
00:00:48,360 --> 00:00:55,580
and grab the template literal as it's called and move it up here and then here, I refer to current result

10
00:00:55,590 --> 00:01:05,540
before we change it because I run this line before this line and I want to add my number here. So I can

11
00:01:05,540 --> 00:01:08,690
copy this code and add this here as well

12
00:01:08,690 --> 00:01:13,850
and actually we of course don't need to parse this as an integer because I will need it as a text anyways,

13
00:01:13,910 --> 00:01:17,990
we're building a text here after all, so I can also just use it like this.

14
00:01:17,990 --> 00:01:22,330
Side note, when using this embedding syntax here in a template literal,

15
00:01:22,640 --> 00:01:28,060
any values you pass in, even if they are numbers, will be converted to a string anyways,

16
00:01:28,220 --> 00:01:34,250
so this implicitly calls to string anyways you could say, so this is automatically treated as a string

17
00:01:34,250 --> 00:01:35,120
here.

18
00:01:35,360 --> 00:01:41,660
And now I build my description here and output this as well and reformat the code to use these two blanks

19
00:01:41,660 --> 00:01:43,340
here as indentation

20
00:01:43,340 --> 00:01:47,780
and now we're building the description before we run the calculation.

21
00:01:47,780 --> 00:01:55,670
And now if I save this and I reload and I enter five here, we see the description of the last calculation

22
00:01:55,670 --> 00:02:01,340
we performed whenever we run a calculation. We don't see the full log because that would be way

23
00:02:01,340 --> 00:02:05,550
more complex to build, a bit beyond what we can do right now

24
00:02:05,660 --> 00:02:12,020
but we see the exact calculation that was just executed that led to this new result.

25
00:02:12,020 --> 00:02:17,120
Now with that, there is however more we can change about this function because what we're doing here

26
00:02:17,570 --> 00:02:20,420
is, we have a bit of code repetition.

27
00:02:20,420 --> 00:02:27,920
Now in general, as a programmer, you want to avoid code repetition as good as you can, as much as you can

28
00:02:28,490 --> 00:02:35,240
because if you repeat code, you write too much and that takes time and you want to save time

29
00:02:35,240 --> 00:02:41,150
and in addition, if you ever need to change something about that piece of code, about that logic you wrote

30
00:02:41,150 --> 00:02:48,880
there, chances are that you need to change it in a couple of different places. So therefore, you want to

31
00:02:48,980 --> 00:02:53,950
avoid repeating yourselves, so that whenever you need to change that piece of code you wrote, you'll

32
00:02:53,960 --> 00:02:58,840
only need to change it in one place, instead of 10 places or something like that.

33
00:02:58,850 --> 00:03:02,260
So here for example, extracting that user input value,

34
00:03:02,360 --> 00:03:07,410
let's say we renamed this user input constant here to usr input,

35
00:03:08,030 --> 00:03:13,210
well then I have to change it in two places, usr input, usr input.

36
00:03:13,370 --> 00:03:19,160
Of course that's not too bad but imagine that this would be a longer script, would be very annoying.

37
00:03:19,160 --> 00:03:26,300
So it's better to then create a new constant, since I never plan on reassigning a value, which I could

38
00:03:26,300 --> 00:03:35,090
name user number or better maybe, entered number and that could be this code snippet here.

39
00:03:35,090 --> 00:03:43,940
So where I get the user input and parse it as an integer and now we can use entered number here because

40
00:03:43,940 --> 00:03:50,680
that string interpolation or embedding syntax here doesn't care whether that's a string or a number,

41
00:03:50,690 --> 00:03:55,320
it will convert it to a string anyways and we can use it here and

42
00:03:55,350 --> 00:04:00,470
now the advantage of this is that whenever something changes here, like the name of this constant, we

43
00:04:00,470 --> 00:04:03,800
only need to change it here and not in these two places.

44
00:04:03,800 --> 00:04:09,830
So even though I added a new line of code now, we actually did something good because we're now more

45
00:04:09,830 --> 00:04:12,990
flexible and we don't repeat ourselves.

46
00:04:13,010 --> 00:04:17,840
Well of course, we repeat that name of the constant but that's something we can't change,

47
00:04:17,840 --> 00:04:21,580
however we make sure we don't repeat the entire logic here

48
00:04:21,590 --> 00:04:26,630
even though of course that's not too much logic here but you could have a more complex calculation and

49
00:04:26,630 --> 00:04:30,480
you would therefore even save more repetition.

50
00:04:30,500 --> 00:04:37,600
You could also take it one step further and add a brand new function, get user input for example.

51
00:04:37,700 --> 00:04:41,600
Again I name this function like this because I want to describe what the function does

52
00:04:41,600 --> 00:04:49,010
and this is a function which should actually give me the user input as a number, so we could also name

53
00:04:49,010 --> 00:04:54,530
it get user input number or get user number input

54
00:04:54,530 --> 00:05:01,070
if you want to be very clear but in the end, you want to give a clear idea of what this function does. Well

55
00:05:01,070 --> 00:05:09,860
and in there, I want to return this logic here where I get that user input and parse it as an integer

56
00:05:10,350 --> 00:05:15,680
so that here I can just call get user number input as a function.

57
00:05:15,680 --> 00:05:21,470
So here I now call that manually instead of adding it to an event listener because whenever this function

58
00:05:21,470 --> 00:05:27,040
runs, I want to run this function as well which I now use to outsource this logic,

59
00:05:27,080 --> 00:05:32,390
that's especially great of course if you have more code here, multiple lines of logic for example that

60
00:05:32,390 --> 00:05:33,520
you want to share,

61
00:05:33,620 --> 00:05:38,690
you can then all put it into a function and call that function in any place in your code where you want

62
00:05:38,690 --> 00:05:39,810
to execute it.

63
00:05:39,920 --> 00:05:45,590
Right now that's only one place but that will soon change because we got more than one button here, so

64
00:05:45,590 --> 00:05:46,760
let's work on the other buttons

65
00:05:46,760 --> 00:05:47,030
now.
