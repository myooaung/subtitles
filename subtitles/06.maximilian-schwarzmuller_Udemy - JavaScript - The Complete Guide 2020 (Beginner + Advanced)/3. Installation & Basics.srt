1
00:00:02,150 --> 00:00:06,410
For that, we can simply open a brand new folder with nothing inside of it,

2
00:00:06,410 --> 00:00:11,330
here I just got my IDE configuration file and the git config file, you need neither of the two,

3
00:00:11,480 --> 00:00:16,720
so you can create a brand new folder and open it in your editor, in Visual Studio Code here and in

4
00:00:16,730 --> 00:00:20,660
there we can add a script, app.js maybe

5
00:00:20,660 --> 00:00:26,870
and now here we can write some code which does not depend on the browser APIs and executed with 

6
00:00:26,870 --> 00:00:29,880
Node.js, for example to have a very simple script,

7
00:00:30,020 --> 00:00:33,950
we can add console log in here and say hello world.

8
00:00:34,220 --> 00:00:41,270
The console object and the log method on it is provided by the browser but Node.js also offers this,

9
00:00:41,270 --> 00:00:47,750
so this is actually a functionality we can use both in browser side and in Node.js side Javascript.

10
00:00:47,810 --> 00:00:53,090
It's not part of the core language, not part of the engine itself but it is provided as an API so to

11
00:00:53,090 --> 00:00:55,520
say by both environments.

12
00:00:55,520 --> 00:01:00,950
Now if we save that, the question is how can we now execute that file if we don't load it into a browser,

13
00:01:00,950 --> 00:01:02,480
into a HTML file

14
00:01:02,480 --> 00:01:06,920
and the answer is by using Node.js. You can visit nodejs.org,

15
00:01:07,040 --> 00:01:13,220
you most likely already did this because we had to install Node.js already to use webpack and so on.

16
00:01:13,220 --> 00:01:16,540
If you haven't done it, make sure you install the latest version of Node.js

17
00:01:16,550 --> 00:01:21,470
now, in my case 12.11 but of course that will most likely have changed by the point of time

18
00:01:21,470 --> 00:01:24,440
you're watching this but simply download this latest version,

19
00:01:24,440 --> 00:01:29,980
download the installer you find there and run through that installer to install Node.js.

20
00:01:30,020 --> 00:01:34,160
Once you did that and Node.js is available for all operating systems,

21
00:01:34,160 --> 00:01:39,770
once you did that, you can run this app.js file with the help of Node.js. For that simply open your

22
00:01:39,770 --> 00:01:40,610
terminal,

23
00:01:40,610 --> 00:01:46,790
for example here with view terminal or open it outside of the IDE and navigate into the folder you

24
00:01:46,790 --> 00:01:52,330
created with the cd command and then you have a node command available now that you installed Node.js,

25
00:01:52,330 --> 00:01:56,840
you might need to restart your system to ensure that this works.

26
00:01:56,840 --> 00:02:02,780
Type node into the terminal and then the file name you want to execute, app.js and this will tell

27
00:02:02,810 --> 00:02:07,750
Node.js which was installed in your system to run this Javascript file,

28
00:02:07,850 --> 00:02:12,700
basically the same the browser does with files it encounters in the HTML code.

29
00:02:12,950 --> 00:02:18,980
So if we hit enter here, you should see hello world as output here because Node.js has executed that

30
00:02:18,980 --> 00:02:24,210
file and of course if you would try to do something which Node.js doesn't understand, for example use

31
00:02:24,230 --> 00:02:29,510
query selector and search for a button, if you execute this file, you would get an error,

32
00:02:29,510 --> 00:02:30,640
here you see I'm getting an error

33
00:02:30,650 --> 00:02:35,720
that document is not defined. that's what I mean with the missing browser APIs but all the core

34
00:02:35,720 --> 00:02:38,000
Javascript features exist and

35
00:02:38,000 --> 00:02:45,320
we can for example also create a new variable or constant with the const or let keyword, user name and

36
00:02:45,320 --> 00:02:50,980
name that Max and change this here maybe to use a template literal, that's also supported here,

37
00:02:50,990 --> 00:02:56,690
so with these back ticks and say hi user name like this

38
00:02:56,690 --> 00:03:03,470
and if we now execute this file with node app.js, we see hi Max here. So that all works and this is

39
00:03:03,550 --> 00:03:07,380
Node.js, it's Javascript running outside of the browser.

40
00:03:07,460 --> 00:03:10,390
Now you can use Node.js for anything you want,

41
00:03:10,400 --> 00:03:15,870
you will often find it in the context of web servers because indeed you can use Node.js as a server side

42
00:03:15,870 --> 00:03:21,650
language, you can write a web server with it and write all the web server logic for handling incoming

43
00:03:21,650 --> 00:03:27,290
requests and for sending back responses, you can do all of that with Node.js but you're not restricted

44
00:03:27,290 --> 00:03:33,590
to that. In the end, you can execute any Javascript code you want here and Node.js for example

45
00:03:33,600 --> 00:03:39,200
also gives you certain tools which we'll have a look at that allow you to write a file or to read a file,

46
00:03:39,230 --> 00:03:44,720
so that's also something you can do with Node.js and you could therefore use Node.js to write your

47
00:03:44,720 --> 00:03:52,730
own utility scripts that do a task you want to perform on your system, that download your latest bank

48
00:03:52,730 --> 00:03:57,780
statements from a server and store that in files or anything you want, you can write your own utility

49
00:03:57,780 --> 00:04:03,380
scripts with Node.js if you want to do that, you can write Node.js code that parses an excel file

50
00:04:03,380 --> 00:04:10,010
and reads in the data, all of that is possible with Node.js or especially if you then add third-party

51
00:04:10,010 --> 00:04:16,490
packages which of course also exist for Node.js apps and not just for browser side apps but we don't

52
00:04:16,490 --> 00:04:19,930
even need to look at such more complex examples.

53
00:04:20,030 --> 00:04:24,920
If we have a look at the practice app we worked on in an earlier module, there

54
00:04:24,950 --> 00:04:27,950
we also use Node.js without even noticing it.

55
00:04:28,010 --> 00:04:30,960
The webpack-config.js file is a Javascript file,

56
00:04:30,980 --> 00:04:34,390
now who do you think is in the end using and executing this file?

57
00:04:34,400 --> 00:04:39,320
It's not the browser, we're not importing this into HTML and for example this here, this module

58
00:04:39,320 --> 00:04:44,300
export thing would also be something HTML doesn't understand or the browser doesn't understand,

59
00:04:44,300 --> 00:04:47,840
the same for these strange imports up there.

60
00:04:47,840 --> 00:04:51,470
This is Node.js syntax and I'll dive into this in a second

61
00:04:51,500 --> 00:04:56,960
when we write our own script but this is Node.js and and therefore in the end, what's executing this

62
00:04:56,960 --> 00:05:03,770
config.js file and what's taking this into account is a Node.js script. In the end when we run npm

63
00:05:03,770 --> 00:05:05,670
run build or build dev,

64
00:05:05,690 --> 00:05:07,460
we use the webpack tool or the webpack

65
00:05:07,470 --> 00:05:15,560
dev server and what happens there is behind the scenes, Node.js is used there to execute certain Javascript

66
00:05:15,740 --> 00:05:22,370
scripts which do not run in the browser but which utilize Node.js methods to read your files because

67
00:05:22,400 --> 00:05:27,800
Node.js is able to read the file system and parse files. So that's what webpack does behind the scenes,

68
00:05:27,800 --> 00:05:30,370
it uses Node.js to read in your files,

69
00:05:30,500 --> 00:05:37,280
it uses Node.js to have a look at the webpack-config.js file and to then use this configuration. So

70
00:05:37,290 --> 00:05:44,630
webpack runs on Node.js, it's written in Javascript to work with your Javascript code but it uses

71
00:05:45,020 --> 00:05:48,470
Node.js because it of course does not run inside of a browser.

72
00:05:48,470 --> 00:05:53,890
We don't load webpack in the browser, we load the finished result into our page here not the webpack

73
00:05:53,890 --> 00:05:55,140
script itself.

74
00:05:55,310 --> 00:05:58,520
So there, we implicitly already use Node.js

75
00:05:58,520 --> 00:06:02,430
with the help of this webpack tool and therefore back to our script here,

76
00:06:02,450 --> 00:06:07,700
let's now see what you can do with Node.js outside of a web server environment before we then later

77
00:06:07,700 --> 00:06:13,760
also have a look at how we can use Node.js to write our own simple web server, server page and receive

78
00:06:13,760 --> 00:06:14,780
incoming requests.
