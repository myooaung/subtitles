1
00:00:02,600 --> 00:00:07,670
So now with splice, we already entered the world of special methods

2
00:00:07,670 --> 00:00:09,030
we can use on arrays.

3
00:00:09,080 --> 00:00:12,260
Now there are many methods we can use on arrays and for that,

4
00:00:12,280 --> 00:00:17,150
I'll also comment out this code block and I always just do that so that console here doesn't get

5
00:00:17,150 --> 00:00:23,570
too crowded and we can always focus on the most recent code we're writing and I'll add a brand new array

6
00:00:23,570 --> 00:00:30,210
here. I'll name it test result but the name is totally up to you and in there, I'll have a couple of numbers,

7
00:00:30,460 --> 00:00:32,550
integers and floating point numbers,

8
00:00:32,550 --> 00:00:38,990
so numbers without decimal places and with decimal places, also some negative numbers,

9
00:00:38,990 --> 00:00:42,420
yes something like that, really doesn't matter, just a bunch of numbers.

10
00:00:42,440 --> 00:00:49,340
Now we saw splice which is a really versatile method for adding and removing and inserting and even

11
00:00:49,340 --> 00:00:52,540
swapping if you use it correctly elements.

12
00:00:52,610 --> 00:00:58,610
Now another method you but you can use which has a similar name but does something totally different

13
00:00:59,120 --> 00:01:00,470
is slice,

14
00:01:00,470 --> 00:01:03,790
so not splice but slice.

15
00:01:03,900 --> 00:01:07,620
You can use slice like that and that should be test results of course

16
00:01:07,700 --> 00:01:13,660
and if you save that and then reload this page, you see basically an array as I entered it.

17
00:01:13,680 --> 00:01:19,650
The interesting thing slice does here though is it returns a brand new array and therefore this actually

18
00:01:19,650 --> 00:01:25,830
is also a nice way of copying an array, you remember? Arrays are in the end objects and therefore reference

19
00:01:25,830 --> 00:01:26,460
values.

20
00:01:26,520 --> 00:01:33,030
So if you compare an array to an array that looks totally equal to us humans, it will return false if

21
00:01:33,030 --> 00:01:35,590
it's not exactly the same object.

22
00:01:35,610 --> 00:01:45,740
Also if we store an array, store the results in another variable, so if I store test results in the stored

23
00:01:45,860 --> 00:01:53,840
results constant here, then you of course see that if you output the stored results here and the test

24
00:01:53,840 --> 00:01:56,630
results, these will be equal

25
00:01:56,630 --> 00:02:00,900
even if you then added the test results and you push a new value in there.

26
00:02:00,950 --> 00:02:07,010
So if you add this value here to test results, you'll see that stored results are also affected if I

27
00:02:07,010 --> 00:02:07,490
reload.

28
00:02:08,240 --> 00:02:13,000
So you see, this new value 5.91 is part of both arrays.

29
00:02:13,220 --> 00:02:19,670
That happens because arrays are reference values and they affirm what we store here is just a pointer

30
00:02:19,670 --> 00:02:22,790
at this place in memory, just the address of the array.

31
00:02:22,790 --> 00:02:26,480
So if we then change the array, well that still points at the same address

32
00:02:26,510 --> 00:02:27,050
so it

33
00:02:27,140 --> 00:02:29,500
points at the same changed array.

34
00:02:29,630 --> 00:02:36,590
That's something where slice can help us because it returns a brand new array based on the old array.

35
00:02:36,590 --> 00:02:43,640
So if I call slice here and I store the result of that slice call in stored results, I store a copy

36
00:02:43,640 --> 00:02:46,220
of that array in stored results,

37
00:02:46,220 --> 00:02:50,290
so a brand new array is created and stored in memory based on that

38
00:02:50,300 --> 00:02:54,330
old array, it has a brand new address which is in the end stored here and therefore

39
00:02:54,340 --> 00:03:00,710
now if we added test results here, this will not affect stored results because that stores its own

40
00:03:00,710 --> 00:03:02,090
brand new copy.

41
00:03:02,180 --> 00:03:10,250
So here if we save that and reload, in test results we see 5.91, in stored results which is this first

42
00:03:10,250 --> 00:03:10,650
array,

43
00:03:10,700 --> 00:03:17,510
we don't see it, there we don't have that sixth value. So that's one use case of slice for copying arrays

44
00:03:17,810 --> 00:03:24,230
but actually slice is also really nice for selecting ranges of an array. You can select a single element

45
00:03:24,260 --> 00:03:29,180
of an array with the index based access here, 0, 1, 2 and so on

46
00:03:29,180 --> 00:03:32,050
but what if you want to select two elements at the same time?

47
00:03:32,090 --> 00:03:39,680
So you want to select a part of your array, not the entire array but a part. Well slice helps you with

48
00:03:39,680 --> 00:03:45,560
that, you can use it like this and it will give you the full array but you can also specify a start and

49
00:03:45,800 --> 00:03:49,970
an end number and these are indexes of the array,

50
00:03:50,510 --> 00:03:59,270
start is included and is not. So if I specify 0, 2 here, I tell slice to give me a new array which is

51
00:03:59,270 --> 00:04:06,740
based on the existing array, starts add the first element, index 0 and then goes all the way up to the

52
00:04:06,920 --> 00:04:14,910
element with index 2 which is the third element here but does not include that. So slice here with this

53
00:04:14,910 --> 00:04:19,510
configuration should give us this part of the array, 1 and 5.3.

54
00:04:19,560 --> 00:04:20,640
Well let's have a look at that.

55
00:04:21,000 --> 00:04:27,570
If I now reload this, indeed we have 1 and 5.3 in that first array which is my stored results

56
00:04:27,570 --> 00:04:31,080
array. So slice can be used for selecting ranges,

57
00:04:31,080 --> 00:04:35,790
of course you can start at any index but of course the index where you end should then typically be

58
00:04:35,790 --> 00:04:41,790
higher than that index, though even if that's not the case, you'll see that it works but it's now just

59
00:04:41,790 --> 00:04:46,890
an empty array because there is nothing between the element with index three and the element with

60
00:04:46,950 --> 00:04:54,350
the index two, it doesn't select in the reverse direction. Though what you can use are negative indexes

61
00:04:54,360 --> 00:04:59,250
but then both have to be negative. So you can start at the third last element,

62
00:04:59,250 --> 00:05:02,470
this has negative index 1 because there is no negative 0,

63
00:05:02,490 --> 00:05:08,550
so in the negative indexes the first element from the end has index 1, negative index 2, negative index

64
00:05:08,550 --> 00:05:14,400
3 and then going up to 2, you might think you select this part but this is actually not supported,

65
00:05:14,400 --> 00:05:19,740
this is not how it works but you can for example go to -1 and this will then select from the third

66
00:05:19,740 --> 00:05:21,750
last element all the way up to the last element

67
00:05:21,750 --> 00:05:23,440
so these two should be selected.

68
00:05:23,440 --> 00:05:28,280
Now if we save that and we reload, indeed that's what we get here,

69
00:05:28,290 --> 00:05:35,660
these two elements were selected. You can also just specify a single index here, negative or not, doesn't

70
00:05:35,660 --> 00:05:40,760
matter and not specify a second argument and this will then start at this index,

71
00:05:40,790 --> 00:05:46,820
so in this case at the element with index 2 which is of course this element and then select everything

72
00:05:47,150 --> 00:05:49,800
up from this element all the way to the end,

73
00:05:49,820 --> 00:05:55,970
so this would select this here for example, this configuration would select this. Hence if I save that

74
00:05:57,040 --> 00:05:57,960
and I reload,

75
00:05:58,060 --> 00:05:58,620
exactly

76
00:05:58,630 --> 00:05:59,800
that's what we get,

77
00:05:59,800 --> 00:06:03,490
starting at 1.5 all the way up to 10 which is the end here.
