WEBVTT
1
00:00:02.440 --> 00:00:09.810
Now how do we dive right in? I would suggest let's start by making sure that this attack button does

2
00:00:09.810 --> 00:00:13.460
something, that we actually shrink these health bars.

3
00:00:13.530 --> 00:00:17.510
Now as I mentioned, we need to configure how much health is available

4
00:00:17.520 --> 00:00:21.840
and later we'll ask the user of this web page for a starting value,

5
00:00:21.840 --> 00:00:23.880
for now we will hardcode it.

6
00:00:23.910 --> 00:00:32.310
So here in app.js, I will start by adding a constant which I'll name chosenMaxLife, again later the

7
00:00:32.310 --> 00:00:35.910
user will be able to choose that, hence that variable name,

8
00:00:35.910 --> 00:00:41.110
right now I will hardcode it and I will set it to 100 health points.

9
00:00:41.130 --> 00:00:44.970
Now in addition, I'll also set an attack value here,

10
00:00:44.970 --> 00:00:50.640
now this also is a constant because this will not change throughout the program lifecycle. By the way, the

11
00:00:50.670 --> 00:00:56.100
health of course will change so this actually should be a variable with let, my mistake, so this should

12
00:00:56.100 --> 00:00:57.000
be a variable.

13
00:00:57.000 --> 00:01:02.520
The constant here however will not change and the order by the way does not matter, you could have the variable

14
00:01:02.520 --> 00:01:08.160
first, whatever you want but I like to have my constants that never change first and the constant here

15
00:01:08.160 --> 00:01:11.730
which won't change is the attack value which I'll set to 10

16
00:01:11.730 --> 00:01:17.370
and of course here, you can experiment with different values. This is basically how hard we hit the monster,

17
00:01:17.400 --> 00:01:24.780
though I will say in the vendor.js file, we got a little randomization logic built in so that the attack

18
00:01:24.780 --> 00:01:31.590
value I set up here will actually be treated as a maximum value and we will generate a random value

19
00:01:31.740 --> 00:01:37.380
between 0 and that value to have a little bit of randomness in the game. Now

20
00:01:37.440 --> 00:01:44.190
also one little thing which I want to change here, attack value is a constant which will never change

21
00:01:44.190 --> 00:01:45.510
throughout the entire program and

22
00:01:45.510 --> 00:01:46.700
therefore it's a constant

23
00:01:46.710 --> 00:01:53.740
as I just said, we can also leave it like this but for such a global game value which we really hardcode

24
00:01:53.740 --> 00:01:59.790
in there, so which we don't derive from let's say some user input which thereafter never changes but

25
00:01:59.790 --> 00:02:06.610
which we as a developer set up as a global value which you just hardcode into your code,

26
00:02:06.780 --> 00:02:14.250
it's also quite common to use all uppercase characters there and separate words with an underscore, to

27
00:02:14.250 --> 00:02:19.460
make it really clear that this is a global value which you just hardcoded into the code as

28
00:02:19.470 --> 00:02:20.310
we did it here.

29
00:02:20.310 --> 00:02:23.500
It's not required, technically it doesn't make any difference,

30
00:02:23.610 --> 00:02:28.640
it's just a convention you see in some programs and therefore one which I want to establish here,

31
00:02:28.740 --> 00:02:31.380
again not a must use but an option.

32
00:02:31.560 --> 00:02:36.540
So that's the attack value, the maximum attack value we can get as a player,

33
00:02:36.540 --> 00:02:40.730
that's the max life for both the player and the monster

34
00:02:41.370 --> 00:02:48.000
and the first thing we can do therefore is we can call a function which is exposed by vendor.js, the adjust

35
00:02:48.030 --> 00:02:54.060
health bars function which takes the maximum life and which then just sets the maximum life in our user

36
00:02:54.060 --> 00:02:54.770
interface,

37
00:02:54.780 --> 00:02:58.050
so in the HTML code in the end for these progress bars.

38
00:02:58.050 --> 00:03:04.620
So here we can call adjust health bars and simply forward the chosenMaxLife so that this gets

39
00:03:04.620 --> 00:03:08.060
updated on the screen whenever we load this game.

40
00:03:08.130 --> 00:03:09.510
Of course we see no difference here,

41
00:03:09.500 --> 00:03:15.210
the bars were full before that but if you inspect them actually with right click inspect here in Chrome,

42
00:03:15.630 --> 00:03:21.550
you see the HTML code as it's configured for this running web page and there, you see the max value

43
00:03:21.550 --> 00:03:25.470
is set to 100, the current value is also set to 100

44
00:03:25.650 --> 00:03:31.560
and if you would change the chosenMaxLife here to 50 and reload, you would see that these values also

45
00:03:31.630 --> 00:03:37.830
change to 50. So that's the impact we're having here, just so that you see how this all is connected.

46
00:03:37.850 --> 00:03:38.030
Okay,

47
00:03:38.040 --> 00:03:42.810
so with that we get the chosenMaxLife set up, we're setting this in our web page

48
00:03:42.810 --> 00:03:49.650
so to say, now we want to connect this attack button here to a function which we execute which then

49
00:03:49.770 --> 00:03:52.020
lowers this health.

50
00:03:52.020 --> 00:04:00.090
So for that in the vendor.js file, we expose this attack button, that's a constant which we can use. By

51
00:04:00.090 --> 00:04:06.720
the way, these constants are not written in all caps because these don't hold hardcoded string or number

52
00:04:06.720 --> 00:04:11.640
values but instead references to parts of our HTML code,

53
00:04:11.640 --> 00:04:17.490
so parts of our web page and there, this is not such a global hardcoded value but it's a bit more dynamic even

54
00:04:17.490 --> 00:04:22.460
though it of course also won't change whilst the app is running. So we can refer to the attack button

55
00:04:22.470 --> 00:04:29.160
constant here which is basically a reference to this button and we can use this here to then also add

56
00:04:29.160 --> 00:04:34.860
an event listener here and this event listener should listen to the click event and then fire a function

57
00:04:34.860 --> 00:04:36.460
which I'll add here which I'll name

58
00:04:36.470 --> 00:04:42.400
attack handler and now the name of the function is totally up to you. Previously in the course, I used

59
00:04:42.400 --> 00:04:43.990
the different naming scheme,

60
00:04:44.100 --> 00:04:51.900
now from now on, I will use a different one where the functions which I assign to event handlers will

61
00:04:51.900 --> 00:04:58.680
always be named some description of what the function is there for and then handler at the end. This is

62
00:04:58.770 --> 00:05:05.410
absolutely not a must do, it's also not the only convention you will find out there, some people also use

63
00:05:05.410 --> 00:05:12.250
a convention where these event handler functions start with on and then for example onClick or onAttack

64
00:05:12.880 --> 00:05:13.990
or you just name it

65
00:05:13.990 --> 00:05:19.900
attack monster if you want to go with that, just to make clear which functions are attached to an event

66
00:05:19.900 --> 00:05:26.220
listener and which functions aren't, I will go with that attack handler or with that handler convention

67
00:05:26.220 --> 00:05:26.400
here

68
00:05:26.410 --> 00:05:28.960
but again that is optional.

69
00:05:28.960 --> 00:05:33.280
So attack handler is the function I'll point it here on my event listener

70
00:05:33.280 --> 00:05:38.120
and in this function, I now want to launch an attack towards that monster.

71
00:05:38.320 --> 00:05:43.390
Now to launch that attack, we can have a look at the vendor.js file

72
00:05:43.540 --> 00:05:46.650
and there we actually have that deal monster damage function.

73
00:05:46.660 --> 00:05:53.940
What this does is it calculates a random amount of damage based on the damage we feed in as a parameter,

74
00:05:54.040 --> 00:06:00.850
then it adjusts the monster health bar, so the health bar we see on the page here and it returns the

75
00:06:00.850 --> 00:06:05.680
damage it calculated so that we can also use it in the app.js file.

76
00:06:05.680 --> 00:06:14.500
So I want to call deal monster damage here and I want to pass in my attack value here and this will

77
00:06:14.500 --> 00:06:20.680
return that damage that was dealt which I'll store in a damage constant, a constant because this value

78
00:06:20.680 --> 00:06:23.440
will not change for this function execution

79
00:06:23.620 --> 00:06:28.750
so I will store it in this local constant which is available inside of this function thereafter

80
00:06:28.840 --> 00:06:34.800
and now we can use that stored damage to adjust our monster health. Now for that

81
00:06:34.810 --> 00:06:44.570
up here, I'll add a new variable, monster health or current monster health, which I'll set equal to 

82
00:06:44.570 --> 00:06:45.450
chosenMaxLife

83
00:06:45.470 --> 00:06:48.110
which of course renders this variable a bit redundant,

84
00:06:48.110 --> 00:06:53.600
it will become more important later once we let the user set this, for now it's just like a dummy data

85
00:06:53.600 --> 00:06:58.820
container, we could of course also initialize current monster health to 100 here but again, since later

86
00:06:58.820 --> 00:07:01.220
this variable will be populated by the user,

87
00:07:01.400 --> 00:07:08.120
I'll use that extra variable and the currentPlayerHealth can also be initialized to the 

88
00:07:08.120 --> 00:07:09.350
chosenMaxLife.

89
00:07:09.350 --> 00:07:14.780
Now that current monster health should be reduced by the damages which was dealt down there

90
00:07:14.890 --> 00:07:21.230
and for this, of course we can use the minus equal operator and set this to damage,

91
00:07:21.230 --> 00:07:27.900
this means that current monster Health is set equal to current monster health minus damage.

92
00:07:27.950 --> 00:07:32.490
Now the UI is updated by the deal monster damage function as I explained

93
00:07:32.570 --> 00:07:36.650
and with that, we should be able to attack the monster with a normal attack.

94
00:07:37.010 --> 00:07:44.840
If I save this and I reload and I click attack, you'll see the monster health bar shrinks by different amounts

95
00:07:44.840 --> 00:07:47.430
because it's random but it shrinks.

96
00:07:47.450 --> 00:07:53.180
Of course, we have no win condition though, so it would make sense to add this and therefore of course

97
00:07:53.210 --> 00:07:54.650
we'll need an if statement.
