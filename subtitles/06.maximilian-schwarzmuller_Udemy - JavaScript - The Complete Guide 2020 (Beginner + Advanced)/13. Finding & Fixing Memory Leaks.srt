1
00:00:02,220 --> 00:00:04,180
Let's explore memory leaks.

2
00:00:04,190 --> 00:00:11,840
Now for that we got that memory tab and attached you find an article from the official Google Chrome

3
00:00:11,900 --> 00:00:15,680
developer tool documentation where you can learn all about that tab

4
00:00:15,680 --> 00:00:22,310
and here one of the most useful things you can do is click on take heap snapshots to take a heap snapshot,

5
00:00:23,360 --> 00:00:29,930
then do some operation for example delete a carpet and take another snapshot and then go to comparison

6
00:00:29,940 --> 00:00:33,390
here in the dropdown to see the difference to the last snapshot

7
00:00:33,410 --> 00:00:40,290
and this allows us to find out what changed in memory which can be helpful for finding problems. So here

8
00:00:40,310 --> 00:00:44,840
for example we see a script element was added, which makes sense,

9
00:00:44,840 --> 00:00:49,740
that's the lazy loading going on, that's what webpack does behind the scenes when we load the code for

10
00:00:49,740 --> 00:00:56,050
deleting and yes other than that, a bunch of things were added,

11
00:00:56,050 --> 00:01:01,250
lot of things which are going on here are really just not directly related to your code.

12
00:01:01,510 --> 00:01:09,610
What we can see is that for example when we talk about HTML elements, it doesn't look like we have

13
00:01:09,610 --> 00:01:15,040
a difference, it doesn't seem like we actually got rid of a button and an li element,

14
00:01:15,670 --> 00:01:19,700
so that's not too good because we removed one so it should be gone.

15
00:01:19,730 --> 00:01:26,010
So let's maybe run another snapshot and compare it to the previous one and see if we see a difference

16
00:01:26,010 --> 00:01:32,740
there, maybe by sorting for delta and looking at the things which got removed first

17
00:01:32,900 --> 00:01:38,570
but even there, we see what was touched is not really the li element, the button element and so on,

18
00:01:38,570 --> 00:01:39,300
right.

19
00:01:39,350 --> 00:01:43,300
We had one deleted but we also had one added,

20
00:01:43,340 --> 00:01:49,920
so it doesn't really look like we got rid of our element here with the current approach. If you click

21
00:01:49,920 --> 00:01:51,300
on that garbage

22
00:01:51,300 --> 00:01:57,860
icon here, you can also let the garbage collector run but if we take another snapshot thereafter,

23
00:01:58,000 --> 00:02:00,520
well we still don't see any difference right.

24
00:02:00,550 --> 00:02:03,470
No matter how we order this, nothing was removed.

25
00:02:03,580 --> 00:02:12,640
So it looks like our li elements are not getting removed here from the DOM when we actually delete

26
00:02:12,880 --> 00:02:14,230
items.

27
00:02:14,230 --> 00:02:18,610
So now let's see how we can find and fix this potential memory leak

28
00:02:18,640 --> 00:02:23,980
we have. For that again, I'll take an initial snapshot here, then delete an item,

29
00:02:23,980 --> 00:02:28,990
take another snapshot, confirm that we still have that potential issue

30
00:02:32,130 --> 00:02:41,770
by having a look at my changes here and here, oh it now actually is gone.

31
00:02:41,840 --> 00:02:44,360
Now you might or might not be seeing this,

32
00:02:44,390 --> 00:02:50,070
i ran this multiple times and most of the time i didn't see this getting cleaned up here,

33
00:02:50,090 --> 00:02:52,580
now it is cleaned up though.

34
00:02:52,580 --> 00:02:53,690
Well let's give it another try,

35
00:02:53,690 --> 00:02:55,340
let's clear these profiles,

36
00:02:55,430 --> 00:02:56,510
take a snapshot,

37
00:02:56,510 --> 00:02:57,560
delete an item,

38
00:02:57,560 --> 00:02:58,670
take a snapshot,

39
00:02:58,670 --> 00:03:00,570
have a look at the comparison,

40
00:03:00,860 --> 00:03:01,190
check

41
00:03:01,190 --> 00:03:01,790
delta

42
00:03:02,150 --> 00:03:04,870
and we're back to where we were before.

43
00:03:04,910 --> 00:03:06,740
So let's have a look at the summary then

44
00:03:06,740 --> 00:03:13,040
and there you can search for li element and you'll find this HTML li element summary here.

45
00:03:13,040 --> 00:03:17,290
Now if you expand this, you'll see a bunch of li elements, more than we have on the page,

46
00:03:17,330 --> 00:03:18,380
we have four,

47
00:03:18,440 --> 00:03:20,080
here i see eight

48
00:03:20,080 --> 00:03:24,920
and now let's see if we can kind of find out which element here belongs to which element on the screen.

49
00:03:25,360 --> 00:03:32,210
For that, we can select an element here and then at the bottom, you have this retainers view and 

50
00:03:32,240 --> 00:03:35,270
here we see just a bunch of strange proto stuff.

51
00:03:35,270 --> 00:03:41,240
So this doesn't look like an actually rendered element here because if we go to the second one and

52
00:03:41,240 --> 00:03:49,140
we close this, here we actually see related elements or objects and for example we see a HTML

53
00:03:49,150 --> 00:03:53,620
button element and if you hover over this, one of the buttons on the left should highlight.

54
00:03:53,660 --> 00:03:56,780
So this clearly is an element which is currently rendered.

55
00:03:56,870 --> 00:04:01,540
Let's go to the next element, close this, find the button, hover over it,

56
00:04:01,580 --> 00:04:01,810
okay

57
00:04:01,820 --> 00:04:03,260
this is the last element,

58
00:04:03,260 --> 00:04:05,250
so this also seems to be rendered.

59
00:04:05,270 --> 00:04:08,230
Let's check this element here, hover over that button,

60
00:04:08,330 --> 00:04:09,720
it's the second one.

61
00:04:09,920 --> 00:04:11,510
So let's go to this element,

62
00:04:11,510 --> 00:04:13,520
hover over the button,

63
00:04:13,520 --> 00:04:15,320
it's the third one.

64
00:04:15,320 --> 00:04:20,810
So we can say that these three elements here are currently rendered,

65
00:04:20,810 --> 00:04:24,250
they also all have the same retained size here on the right

66
00:04:24,410 --> 00:04:27,440
which makes sense since they're all in the same state.

67
00:04:27,560 --> 00:04:34,130
We don't know what the first one is, might be the internal constructor function which Javascript is

68
00:04:34,130 --> 00:04:39,920
aware of of course because if you create a new HTML li element, Javascript in the end will call

69
00:04:39,920 --> 00:04:41,270
such a constructor function

70
00:04:41,270 --> 00:04:43,440
so that's probably what this is

71
00:04:43,490 --> 00:04:50,800
and these three here, these are really just old objects lingering around ready for cleanup. Here if i see

72
00:04:50,810 --> 00:04:56,630
that, i also got a button element but if i hover over this, no button is getting highlighted. We also

73
00:04:56,630 --> 00:05:01,370
see this has a greater distance than the other items, the distance in the end is kind of an indicator

74
00:05:01,370 --> 00:05:06,560
of how actively this is used, the smaller the distance, the more actively it's getting used,

75
00:05:06,560 --> 00:05:12,020
so this is clearly not getting used a lot and the retained size is also smaller.

76
00:05:12,260 --> 00:05:15,980
So it's probably a browser thing that this doesn't get removed,

77
00:05:15,980 --> 00:05:18,600
it's probably not a mistake on our side.

78
00:05:18,600 --> 00:05:25,040
Now let me show you how a mistake and a real memory leak could look like though. Let's say for whatever

79
00:05:25,040 --> 00:05:28,530
reason we're keeping track of all the elements we're creating,

80
00:05:28,610 --> 00:05:39,930
so we have a constant, maybe here, rendered products which should be an array which exists in the rendering.js

81
00:05:39,930 --> 00:05:42,450
file. Now this is an array

82
00:05:42,450 --> 00:05:45,750
and now whenever we add a new product, we want to add this here,

83
00:05:45,750 --> 00:05:53,970
so we have our rendered products and there I push my new product el onto this array. We're maybe doing

84
00:05:53,970 --> 00:05:59,760
this so that thereafter we can console log all the rendered products we rendered in the past or

85
00:05:59,760 --> 00:06:01,680
we have currently on the screen.

86
00:06:01,930 --> 00:06:10,470
Now if i save this, now we go to the console first of all, if I now add a new product here, we see this list

87
00:06:10,500 --> 00:06:15,810
item. If I add another new product, we see both list items here in the array,

88
00:06:15,840 --> 00:06:17,550
so that is working.

89
00:06:17,550 --> 00:06:25,830
However if i now delete an item here, you will see that if i add yet another new item, the one which

90
00:06:25,830 --> 00:06:28,580
i deleted is also still part of the array.

91
00:06:29,010 --> 00:06:33,960
So we can already see that we might have a problem here and i can prove that we have a problem if we

92
00:06:33,960 --> 00:06:35,280
go to the memory tab,

93
00:06:35,280 --> 00:06:38,550
let's clear the existing snapshots and take a new one

94
00:06:38,680 --> 00:06:43,220
and now let's delete this item and take another new one.

95
00:06:43,230 --> 00:06:48,780
Now if we go to comparison view, we still don't see that a list item was removed here.

96
00:06:48,780 --> 00:06:56,460
Now we had this before but if we now go to the summary view and search for list element, then we see

97
00:06:56,580 --> 00:07:04,620
a problem here. We see in the HTML li elements, we've got a bunch of elements here, 10 to be precise

98
00:07:05,010 --> 00:07:09,810
and there are some which are currently rendered, here if we hover over the button, we see which button

99
00:07:09,810 --> 00:07:12,150
gets highlighted

100
00:07:12,150 --> 00:07:17,940
but we also see some, for example this one here, which is currently not rendered.

101
00:07:17,940 --> 00:07:24,360
Now we had this before but now this is probably not a mistake by the browser here because we also

102
00:07:24,360 --> 00:07:27,540
find this detached HTML li element thing.

103
00:07:27,900 --> 00:07:29,550
So this is a hint that

104
00:07:29,550 --> 00:07:37,270
something seems to be wrong with our li element and indeed we see it stored in some array. So whilst

105
00:07:37,270 --> 00:07:43,000
this might be hard to read because there's a lot of stuff in there, we suddenly have a new element here

106
00:07:43,000 --> 00:07:46,920
in our list here, the detached HTML li element

107
00:07:47,140 --> 00:07:53,500
and when we inspect it, it tells us that it's stored in some array, that some array holds a reference

108
00:07:53,500 --> 00:07:54,830
to it.

109
00:07:54,850 --> 00:08:00,670
So these are now indicators before we also had some li elements here which weren't cleaned up but

110
00:08:00,670 --> 00:08:03,200
we couldn't find any issue in our code.

111
00:08:03,200 --> 00:08:08,470
Now here with this extra hint, we should take another look and indeed of course here we have a memory

112
00:08:08,470 --> 00:08:15,530
leak, every newly added item, every newly added DOM object is added to this array.

113
00:08:15,610 --> 00:08:22,240
Now since i don't remove the items from the array when we remove them from the DOM, they are in a detached

114
00:08:22,300 --> 00:08:22,960
state,

115
00:08:23,080 --> 00:08:31,360
the DOM node was removed, the underlying Javascript object wasn't. Normally when you remove a DOM node,

116
00:08:31,570 --> 00:08:38,410
the browser also destroys the underlying Javascript object but if you have another reference to that object

117
00:08:38,650 --> 00:08:44,710
as we do have it here where we also point at that DOM object from inside an array, the browser of

118
00:08:44,710 --> 00:08:49,780
course does not delete the Javascript object because it thinks you still plan on working with it,

119
00:08:50,200 --> 00:08:53,980
well maybe you do but here it's just an oversight.

120
00:08:53,980 --> 00:09:00,190
What we should do when we really want to keep track of elements like this is we should try to also clean

121
00:09:00,190 --> 00:09:07,000
them up when we remove them from the DOM, for example by ID or of course we just don't keep track

122
00:09:07,000 --> 00:09:07,750
of them at all,

123
00:09:07,750 --> 00:09:11,170
maybe there is another way of achieving what we want it to do.

124
00:09:11,170 --> 00:09:17,920
This is a typical example for a memory leak, that you point at elements in your code which you remove

125
00:09:17,920 --> 00:09:24,700
in the DOM but which you then don't clean up in your code and with the memory tools here in the browser

126
00:09:24,700 --> 00:09:30,240
dev tools, as you just saw you can search for such problems.

127
00:09:30,310 --> 00:09:36,670
It requires some experience and trial and error probably but you can look for strange patterns and

128
00:09:36,670 --> 00:09:41,470
see if there is something you should check in your code which might not be entirely correct.
