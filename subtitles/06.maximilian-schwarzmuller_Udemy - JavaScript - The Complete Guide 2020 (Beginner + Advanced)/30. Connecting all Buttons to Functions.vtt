WEBVTT
1
00:00:02.310 --> 00:00:08.040
So let's make sure we can also press the other buttons and for that, the thing we can do is we can add

2
00:00:08.040 --> 00:00:12.870
more functions. We can add another function which could be called subtract because that's what it

3
00:00:12.870 --> 00:00:14.100
should do.

4
00:00:14.100 --> 00:00:16.230
We can add another function which should in the end

5
00:00:16.290 --> 00:00:25.800
multiply values and a fourth function for this which is called divide which does just that.

6
00:00:25.830 --> 00:00:28.640
Now we have all these functions which of course are empty right now,

7
00:00:28.650 --> 00:00:31.820
there is nothing in the function body but they are defined

8
00:00:31.890 --> 00:00:33.990
and now let's add logic.

9
00:00:33.990 --> 00:00:37.000
Now the logic is generally the same as in the add function,

10
00:00:37.020 --> 00:00:39.080
so I'll copy that and adjust it.

11
00:00:39.180 --> 00:00:45.900
I want to get the entered number and here by the way, I can reuse that constant name because as you learned,

12
00:00:46.320 --> 00:00:53.820
this constant or any variable or constant which you define inside of a function belongs to this single

13
00:00:53.820 --> 00:00:58.830
function and therefore you can use the same name in another function because these two are totally

14
00:00:58.830 --> 00:01:00.330
detached from each other.

15
00:01:00.420 --> 00:01:05.110
This name is now not reused because it's not available outside of the function anyways,

16
00:01:05.220 --> 00:01:12.040
hence we can use it in multiple functions. So here, I'm also getting the user input, then here my description

17
00:01:12.040 --> 00:01:13.020
of course is different,

18
00:01:13.030 --> 00:01:14.670
I want to have a minus here

19
00:01:15.010 --> 00:01:17.380
and the calculation also is different,

20
00:01:17.380 --> 00:01:24.360
I want to have my current result which is calculated with a minus instead of a plus.

21
00:01:24.370 --> 00:01:30.200
Now you see, there's still some code repetition we have here, still some code we need to copy,

22
00:01:30.460 --> 00:01:35.140
there are some piece of code we we can't avoid copying or we can't avoid reusing, like here getting

23
00:01:35.140 --> 00:01:36.700
access to the number input.

24
00:01:36.700 --> 00:01:39.640
We don't necessarily need to store this in a brand new constant,

25
00:01:39.640 --> 00:01:43.740
we could use it directly in the places where we need that entered number like here

26
00:01:44.290 --> 00:01:48.430
but I'll find it a bit easier to read if we store it in a new content

27
00:01:48.460 --> 00:01:56.680
but for generating this log text and outputting this, this is actually something we can put into a function

28
00:01:56.680 --> 00:02:00.130
to share and reuse the code instead of copying it.

29
00:02:00.370 --> 00:02:02.290
So I can add a new function up here

30
00:02:02.320 --> 00:02:08.150
and again it's just my pattern that I like to use, that I define functions before I use them.

31
00:02:08.380 --> 00:02:11.430
So if I use a function down there, I define it above

32
00:02:11.440 --> 00:02:13.070
but that's up to you,

33
00:02:13.120 --> 00:02:15.910
the order does not matter as you learned.

34
00:02:16.060 --> 00:02:23.890
So here I'll add a new function, name it createAndWriteLog or something like this which should write

35
00:02:23.910 --> 00:02:28.100
that output or therefore create the write output maybe

36
00:02:28.190 --> 00:02:32.490
and now this function will need three operators to work the way I wanted to work.

37
00:02:32.560 --> 00:02:36.130
I'm interested in the operator that was used in that function

38
00:02:36.130 --> 00:02:40.600
and you can name this however you want, this should be some text which contains the plus, minus or so

39
00:02:40.600 --> 00:02:41.200
on,

40
00:02:41.200 --> 00:02:47.260
not the real operator which we could use because you can't pass an operator as an argument but we can

41
00:02:47.260 --> 00:02:57.240
parse a text which contains the operator so that we can output it. Then I need to result before calculation

42
00:02:57.750 --> 00:03:04.080
and the calculation number let's say, so the number which was used in the calculation. And then I can

43
00:03:04.080 --> 00:03:09.690
grab this calc description and create it here,

44
00:03:09.730 --> 00:03:16.230
now the operator is also dynamic, so I'll also embed this and use my operator and I have my result

45
00:03:16.250 --> 00:03:21.880
before calculation and the calc number, these are the three pieces which I combined together into

46
00:03:21.880 --> 00:03:23.100
one text.

47
00:03:23.200 --> 00:03:24.580
So that's text here,

48
00:03:24.580 --> 00:03:28.590
it's not a mathematical equation which is executed by Javascript,

49
00:03:28.690 --> 00:03:32.170
it's just some output text which I'm generating here

50
00:03:32.590 --> 00:03:36.740
and thereafter, I'll call output result here,

51
00:03:36.850 --> 00:03:43.690
I can refer to the current result because that's a global variable which gets changed and my calc description,

52
00:03:43.720 --> 00:03:53.570
well that's this constant and now the idea is that here, I can actually run, create and write output,

53
00:03:53.570 --> 00:03:59.930
the operator here was a plus and I need that to build that string correctly which describes the operation

54
00:03:59.930 --> 00:04:03.370
which was performed. The result before calc

55
00:04:03.410 --> 00:04:08.370
which is my second parameter that is expected and the order does matter of course,

56
00:04:08.390 --> 00:04:14.490
so my second parameter here is the result before we ran this calculation,

57
00:04:14.510 --> 00:04:23.290
so here that's current result before we ran it. To store this, I can add a new constant, initial result

58
00:04:23.320 --> 00:04:26.780
maybe which is current result before we change it.

59
00:04:26.860 --> 00:04:30.370
Now since we copy that value, initial result won't change

60
00:04:30.430 --> 00:04:33.960
if we then run this line, that's what I also explained earlier,

61
00:04:33.970 --> 00:04:41.210
so now we can pass initial result here and the calc number of course is the entered number here.

62
00:04:41.260 --> 00:04:47.340
So now we can use that, also down there and get rid of that line with output result and where we build

63
00:04:47.390 --> 00:04:51.190
the calc description and here instead, just forward that minus

64
00:04:51.220 --> 00:04:58.210
and yes we need to copy that initial result code. So still some copied code but the logic of building

65
00:04:58.210 --> 00:05:05.860
that string and of outputting it in our webpage, that is outsourced into a new function and all that

66
00:05:06.040 --> 00:05:12.310
refactoring, as this process is called, where we move code around and try to write it in a more elegant

67
00:05:12.310 --> 00:05:14.950
way, is totally optional,

68
00:05:14.950 --> 00:05:21.490
I just want to get you used to it because it is something you will need in your life, in your day as

69
00:05:21.490 --> 00:05:23.370
a programmer, as a developer,

70
00:05:23.380 --> 00:05:28.600
you want to write elegant code where you don't repeat yourself and where you then try to split your

71
00:05:28.600 --> 00:05:29.250
logic.

72
00:05:29.410 --> 00:05:35.080
There rarely is a single right or wrong way of doing it but getting started with it and thinking about

73
00:05:35.080 --> 00:05:37.410
it is always something you should do.

74
00:05:38.720 --> 00:05:45.490
So now with that, let's actually copy that logic into multiply and there

75
00:05:45.620 --> 00:05:51.890
we need the star operator and here in the calculation of course also the asterisk here to multiply

76
00:05:51.890 --> 00:05:58.400
this and for dividing, here we need the slash which is the division operator and also output this here

77
00:05:58.400 --> 00:06:00.170
in our log

78
00:06:00.200 --> 00:06:05.750
and now with that if we save all of that, we just need to register the event listeners for these buttons.

79
00:06:05.750 --> 00:06:10.910
So just as we have an add button in the vendor file, we've got a subtract, multiply and divide button so

80
00:06:10.910 --> 00:06:12.680
we can use these as well.

81
00:06:12.680 --> 00:06:19.020
So here I'll add subtract button and then just copy this code here

82
00:06:19.020 --> 00:06:25.740
but of course point at the subtract function here and then repeat that but of course now use the multiply

83
00:06:25.770 --> 00:06:27.530
and the divide button here,

84
00:06:27.660 --> 00:06:38.140
so multiply and divide button and point at multiply and add divide. Now with that if we save that and

85
00:06:38.140 --> 00:06:43.120
we reload this page, if I add 5 with the plus, 0 plus 5,

86
00:06:43.210 --> 00:06:48.190
now enter three and then click minus, five minus three and the calculator

87
00:06:48.190 --> 00:06:52.900
now just works such that you need to enter the value and then press the button where you want to

88
00:06:52.900 --> 00:06:54.880
use that value with the previous result,

89
00:06:54.910 --> 00:06:56.650
that's how this calculator works,

90
00:06:56.650 --> 00:06:59.500
that's why it's the unconventional calculator.

91
00:06:59.500 --> 00:07:01.940
So now let's add 10 and star,

92
00:07:01.970 --> 00:07:04.430
so we had two, so now it should be 2 times 10

93
00:07:04.450 --> 00:07:05.980
and that's the case

94
00:07:05.980 --> 00:07:09.660
and finally divide by 4 maybe and we get 5.

95
00:07:10.330 --> 00:07:12.340
So this all works,

96
00:07:12.340 --> 00:07:19.480
now we connected a couple of buttons to our functions and we also had a first look at code refactoring

97
00:07:19.480 --> 00:07:26.590
and code reusage, an art which you will master as you work as a developer and where you shouldn't

98
00:07:26.590 --> 00:07:30.060
worry if you're not totally sure how to split your code yet,

99
00:07:30.220 --> 00:07:35.830
that is something that comes with experience and something you will also do a lot throughout this course.

100
00:07:35.830 --> 00:07:41.140
So by the end of the course, you'll already feel way more confident about that than you probably do right

101
00:07:41.140 --> 00:07:41.470
now.
