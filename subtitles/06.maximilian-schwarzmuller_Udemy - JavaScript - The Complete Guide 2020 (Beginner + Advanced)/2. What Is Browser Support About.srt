1
00:00:02,340 --> 00:00:04,710
So what exactly is browser support?

2
00:00:04,710 --> 00:00:07,110
What do I mean by that term?

3
00:00:07,110 --> 00:00:13,110
Well consider an application where you're writing some Javascript code and you want to use the fetch API,

4
00:00:13,110 --> 00:00:17,160
you want to send an HttpRequest with that fetch API

5
00:00:17,160 --> 00:00:24,240
you learned about in this course. You as a developer want to use this because it's nice to use, it is promise

6
00:00:24,240 --> 00:00:25,930
based out of the box,

7
00:00:26,010 --> 00:00:33,390
it's easier to use than XMLHttpRequest in many regards and you might not want to use a third-party

8
00:00:33,390 --> 00:00:34,770
library like axios

9
00:00:34,800 --> 00:00:37,620
so therefore you decide to use fetch.

10
00:00:37,740 --> 00:00:43,740
Now the problem you as a developer have when writing Javascript for the browser and of course this really

11
00:00:43,740 --> 00:00:46,280
only applies to the browser therefore is

12
00:00:46,290 --> 00:00:50,060
you can't control which browser your users will use,

13
00:00:50,100 --> 00:00:57,060
you don't know if people use Internet Explorer, if they use Firefox, if they use Chrome and which version

14
00:00:57,060 --> 00:00:58,380
of that browser they use,

15
00:00:58,380 --> 00:01:01,070
that's something you can't control.

16
00:01:01,080 --> 00:01:08,550
You can test your code in a certain browser and you might as a developer be using cutting edge browsers

17
00:01:08,790 --> 00:01:14,610
but you can't rely on the fact that all your users do the same because indeed as you of course know,

18
00:01:14,830 --> 00:01:21,690
there is a broad variety of browsers users can use, even more than what I'm showing here and for these browsers,

19
00:01:21,690 --> 00:01:29,070
we even have different versions for desktop, iOS and Android and whilst they share the same branding,

20
00:01:29,370 --> 00:01:31,330
the browsers for desktop

21
00:01:31,330 --> 00:01:37,120
and iOS and Android also don't necessarily have to be the same and support the same set of features.

22
00:01:37,140 --> 00:01:43,740
So for example here, fetch would be supported in Chrome since 2015 already, in Firefox

23
00:01:43,740 --> 00:01:47,430
also since 2015 but not in Internet Explorer.

24
00:01:47,430 --> 00:01:50,480
Now of course Internet Explorer is an old browser,

25
00:01:50,490 --> 00:01:56,340
Microsoft is now working on Edge which now also actually is based on the chromium project, so it has a

26
00:01:56,340 --> 00:01:58,800
similar core as the Chrome browser

27
00:01:58,800 --> 00:02:05,610
but there still are users out there, especially in some companies that still use Internet Explorer even

28
00:02:05,610 --> 00:02:06,660
though it's outdated,

29
00:02:06,780 --> 00:02:12,900
so that might be a problem because for those users, your code that uses fetch would simply not work, it

30
00:02:12,900 --> 00:02:16,270
would throw an error and your application would crash.

31
00:02:16,400 --> 00:02:22,470
Now to complete this picture, Edge actually is supporting this since 2016 and Safari is also supporting

32
00:02:22,470 --> 00:02:24,330
it since 2017.

33
00:02:24,690 --> 00:02:30,630
So fetch has decent browser support but it has one browser, Internet Explorer, no matter which version

34
00:02:30,630 --> 00:02:33,370
you are using there, where it won't work.

35
00:02:33,600 --> 00:02:40,170
So that can be a problem and that's a problem you as a developer have to work around because as a developer,

36
00:02:40,200 --> 00:02:46,290
it's your responsibility to make sure that you write code that works for all the browsers you're targeting

37
00:02:46,290 --> 00:02:47,920
with your web page.

38
00:02:47,940 --> 00:02:53,880
It's also important to differentiate between browser features and Javascript syntax,

39
00:02:53,910 --> 00:02:56,830
sometimes it does not matter but sometimes it does.

40
00:02:56,910 --> 00:03:02,910
When we talk about browser features, we talk about the APIs a browser exposes, whereas Javascript syntax

41
00:03:02,910 --> 00:03:08,850
really is about all the keywords, all the functionalities and features that are built into the Javascript

42
00:03:08,850 --> 00:03:09,920
language,

43
00:03:09,950 --> 00:03:14,850
they're of course kind of related but not exactly the same. For browser features,

44
00:03:14,860 --> 00:03:19,220
these browser APIs, the browser decides which features it offers and

45
00:03:19,260 --> 00:03:24,280
examples there would be the fetch API, geolocation, the DOM API,

46
00:03:24,360 --> 00:03:31,830
so all these objects and functions and methods that are exposed by the browser in Javascript. Of course

47
00:03:31,830 --> 00:03:37,070
you worked with these features in Javascript but they're not part of the core Javascript language,

48
00:03:37,080 --> 00:03:43,860
instead the browser as you learned provides a bridge to these functionalities and exposes APIs in Javascript

49
00:03:43,980 --> 00:03:49,380
so that you can conveniently use these features. On the other hand when we talk about Javascript syntax,

50
00:03:49,380 --> 00:03:56,130
I really mean parts and features that are built into the Javascript engine and there, it's the browsers

51
00:03:56,130 --> 00:04:02,040
Javascript engine that defines which syntax and which version of the Javascript language is supported.

52
00:04:02,040 --> 00:04:07,260
Now there also, a browser might have an engine that supports some features but not all

53
00:04:07,260 --> 00:04:12,870
and ultimately of course it's the developers of the Javascript engine that decide what is supported

54
00:04:12,870 --> 00:04:19,740
and often these developers are part of the browser developer team but technically, there is a differentiation

55
00:04:19,740 --> 00:04:22,260
and these teams might not always be the same.

56
00:04:22,500 --> 00:04:28,250
Examples for Javascript syntax would be things like let, const, async await, promises,

57
00:04:28,290 --> 00:04:32,470
so all these core functionalities that are baked into Javascript.

58
00:04:32,490 --> 00:04:33,630
Now why does this matter?

59
00:04:33,900 --> 00:04:37,320
Because browser features typically are implemented individually,

60
00:04:37,320 --> 00:04:44,040
so one feature at a time. There might be some new feature which is coming up and let's say the team behind

61
00:04:44,040 --> 00:04:47,840
the Chrome browser decides that they want to implement it.

62
00:04:48,030 --> 00:04:54,120
They might just go ahead and offer this feature as part of Chrome, other browsers might not yet offer

63
00:04:54,120 --> 00:04:58,920
this feature and they might not even plan to offer it in the near future at all.

64
00:04:58,920 --> 00:05:05,030
So then you can only use this feature in Chrome browser and hence if you're using it in your application,

65
00:05:05,360 --> 00:05:09,040
only users using the Chrome browser could use that feature.

66
00:05:09,110 --> 00:05:15,770
Now for the Javascript syntax, it's of course a bit related but there, features sometimes are also unlocked

67
00:05:15,770 --> 00:05:19,340
or implemented individually but also sometimes in chunks,

68
00:05:19,340 --> 00:05:26,720
for example for Javascript there is a specific version, ES6, which brought a lot of changes. It introduced

69
00:05:26,720 --> 00:05:30,390
let, const, arrow functions and much more

70
00:05:30,440 --> 00:05:36,980
and of course all these features also were implemented step-by-step by browsers but they all worked towards

71
00:05:36,980 --> 00:05:40,320
that goal of supporting these features at some point,

72
00:05:40,400 --> 00:05:46,340
so it was like a big chunk of features where all browsers kind of agreed that they want to implement

73
00:05:46,340 --> 00:05:47,090
this

74
00:05:47,090 --> 00:05:49,580
and that's a difference you can be aware of.

75
00:05:49,970 --> 00:05:58,100
It's typically safer to rely on certain Javascript syntax features to be available at some point than

76
00:05:58,160 --> 00:06:00,290
it is for certain browser

77
00:06:00,290 --> 00:06:06,730
APIs, especially if it's very new experimental APIs, then it might take way longer until all browsers

78
00:06:06,730 --> 00:06:07,820
support it.

79
00:06:07,820 --> 00:06:13,970
Additionally, for Javascript syntax features, you will learn in this module that there is a way of writing

80
00:06:14,090 --> 00:06:21,650
code with all the latest syntax features and compiling it down to older code that works in older browsers

81
00:06:21,650 --> 00:06:22,600
as well.

82
00:06:22,670 --> 00:06:23,980
For DOM APIs,

83
00:06:23,990 --> 00:06:30,800
that's not really possible. If one browser gives you the functionality of getting the user location and

84
00:06:30,800 --> 00:06:32,310
another browser doesn't,

85
00:06:32,360 --> 00:06:36,780
then there is no way of magically making it work in the browser which doesn't offer that,

86
00:06:36,800 --> 00:06:39,020
so this is another important difference here.

87
00:06:39,230 --> 00:06:45,230
And in general the takeaway is that not all browser support all features and that browser support changes

88
00:06:45,230 --> 00:06:47,050
all the time in modern,

89
00:06:47,090 --> 00:06:52,700
also sometimes called evergreen browsers, the browsers are also called evergreen browsers because they

90
00:06:52,700 --> 00:06:56,630
automatically update. If your users are using Firefox,

91
00:06:56,690 --> 00:07:00,400
they're typically using the latest version or one of the latest versions

92
00:07:00,440 --> 00:07:07,070
because the browser updates itself behind the scenes. For older browsers, also called legacy browsers,

93
00:07:07,280 --> 00:07:09,410
for example Internet Explorer 8,

94
00:07:09,410 --> 00:07:10,550
that's not the case,

95
00:07:10,580 --> 00:07:16,820
so people who are using Internet Explorer 8 would have to manually switch away or manually install a

96
00:07:16,820 --> 00:07:18,140
new version at least

97
00:07:18,140 --> 00:07:23,700
and if that doesn't happen, well then these users will never get the new features.

98
00:07:24,020 --> 00:07:29,980
So that's browser support and the difference between browser APIs and Javascript syntax.

99
00:07:29,990 --> 00:07:33,920
Now how can you find out which features are supported where?
