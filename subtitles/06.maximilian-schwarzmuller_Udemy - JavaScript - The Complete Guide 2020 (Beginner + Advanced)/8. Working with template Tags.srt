1
00:00:02,220 --> 00:00:05,140
So enough of the positioning and sizing and scrolling,

2
00:00:05,190 --> 00:00:10,740
let's come back to working with content and there, one thing we did a couple of times throughout this course

3
00:00:10,740 --> 00:00:17,280
because we had no better way was that when we wanted to set up some HTML code that should be rendered

4
00:00:17,310 --> 00:00:22,920
or some content, we always did this here in our scripts.

5
00:00:22,920 --> 00:00:30,030
Now in this example here or in this project here, I actually have no HTML code in my script but it

6
00:00:30,030 --> 00:00:35,220
would be easy to add some to the tooltip for example, you could say that when we create the tooltip here,

7
00:00:35,490 --> 00:00:43,370
we don't just set some text content but we set some innerHTML here which for example includes

8
00:00:48,060 --> 00:00:56,310
a h2 tag where we say more info and then below that, a paragraph where we output the actual text here

9
00:00:56,580 --> 00:01:03,980
with string interpolation like this and if we do so and now reload and I click on more info, we

10
00:01:03,990 --> 00:01:05,570
get this kind of tooltip here.

11
00:01:05,590 --> 00:01:11,000
Now of course you could adjust the styling but the core idea is here that now I have this HTML code

12
00:01:11,030 --> 00:01:17,660
in the script and this is not ideal because you might be working in a team where other people are responsible

13
00:01:17,660 --> 00:01:23,100
for the markup and so on or you're not working in such a team but you don't want to have all that

14
00:01:23,110 --> 00:01:26,390
HTML code in your Javascript code.

15
00:01:26,390 --> 00:01:29,020
Now obviously, this is a very simple HTML code right

16
00:01:29,060 --> 00:01:34,790
but if you had longer HTML code, lots of HTML code in there, this could get more and more cumbersome

17
00:01:35,330 --> 00:01:38,320
and thankfully the web has a solution for this.

18
00:01:38,480 --> 00:01:45,860
We can use a special HTML tag in our HTML code to kind of setup such to be used

19
00:01:45,950 --> 00:01:51,890
HTML code which we don't want to render right from the start but which we want to eventually use

20
00:01:51,890 --> 00:01:59,150
from inside our Javascript code and for this we can use a special tag, the template tag here. Just

21
00:01:59,160 --> 00:02:05,270
add it in your HTML code, in your body and the special thing about the template tag is that its content

22
00:02:05,270 --> 00:02:08,630
by default is not rendered but it's part of the DOM,

23
00:02:08,630 --> 00:02:13,970
so you can query it and use it and then use it in your Javascript code but it's not getting rendered

24
00:02:14,060 --> 00:02:15,820
by default at the beginning.

25
00:02:16,160 --> 00:02:23,760
We can add an ID to the template, we can for example assign tooltip here and then move this HTML

26
00:02:23,760 --> 00:02:29,050
code from our Javascript file into this template.

27
00:02:29,190 --> 00:02:31,740
Now this string interpolation will not work here,

28
00:02:31,770 --> 00:02:34,060
so for now I'll just have my empty paragraph here,

29
00:02:34,080 --> 00:02:38,620
we'll have to insert content there from Javascript in a second.

30
00:02:38,640 --> 00:02:44,280
So now we've got the HTML code in the HTML file which makes sense. Now in Javascript we can use

31
00:02:44,310 --> 00:02:52,860
such a template of course, for that here, we can get access to our tooltip template with document get

32
00:02:52,890 --> 00:02:59,070
element by ID and then looking for the ID we assigned to the template and now we get access to

33
00:02:59,070 --> 00:03:07,170
this template element. Now to utilize this template, we can create a new constant here, tooltip body for

34
00:03:07,170 --> 00:03:17,870
example and there we can use document import node to which we then pass tooltipTemplate.content

35
00:03:17,900 --> 00:03:20,580
and this in the end gives us the content of our template tag,

36
00:03:21,110 --> 00:03:27,590
so the h2 tag and the paragraph we set up there and essentially creates a new node based on that,

37
00:03:27,590 --> 00:03:29,900
that's what this line does.

38
00:03:29,900 --> 00:03:35,450
We should set up true here so that we do a deep import which means we really import everything in the

39
00:03:35,450 --> 00:03:38,560
content of the template which is exactly what we want

40
00:03:38,660 --> 00:03:44,400
and now we got that body available which we can add to our tooltip element.

41
00:03:44,420 --> 00:03:49,880
So here we can call append and append the tooltip body, only thing we should do before we do that is of

42
00:03:49,880 --> 00:03:57,050
course we should adjust the paragraph in there and insert our text and we can do that with tooltip body

43
00:03:58,960 --> 00:04:05,740
query selector for a paragraph, first matching paragraph because we only got one and then there,

44
00:04:05,740 --> 00:04:10,140
set text content equal to this.text.

45
00:04:10,270 --> 00:04:14,250
Now of course this takes up more lines of code than the approach before did

46
00:04:14,380 --> 00:04:20,650
but this simply moved the HTML code out of the script which is especially useful for longer snippets

47
00:04:20,650 --> 00:04:26,350
of HTML code because now you can manage all your HTML code here in the HTML file and then

48
00:04:26,350 --> 00:04:33,130
just import it into app.js, adjust it, tweak it and configure it, maybe insert your dynamic data and then

49
00:04:33,130 --> 00:04:35,860
use that and that's the advantage of this approach.

50
00:04:35,980 --> 00:04:41,680
So with that if we save that and we reload, we get the same result as before but now it's simply managed

51
00:04:41,950 --> 00:04:48,700
in a more elegant way, which is much better and actually how we should do this since this helps us split

52
00:04:48,760 --> 00:04:55,420
our HTML logic, our HTML code from our Javascript code which can help us work in teams and keep

53
00:04:55,480 --> 00:04:57,920
our Javascript code easier to manage.

54
00:04:57,970 --> 00:05:03,910
Last but not least, it's also more convenient to write HTML code in an HTML file in an editor

55
00:05:03,910 --> 00:05:10,000
like this one than in Javascript in a string because we get better autocompletion and so on in an HTML

56
00:05:10,000 --> 00:05:12,220
file than we do in the Javascript string.
