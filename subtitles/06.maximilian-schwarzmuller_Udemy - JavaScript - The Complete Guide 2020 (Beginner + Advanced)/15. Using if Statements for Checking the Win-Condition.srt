1
00:00:02,490 --> 00:00:08,970
So it's time for our first if statement. We want to find out if after an attack, we won.

2
00:00:08,970 --> 00:00:15,090
So here in the attack handler, we could add an if statement with the if keyword and check if the current monster

3
00:00:15,090 --> 00:00:24,160
health, after we deducted the damage from it of course, if that is smaller or smaller or equal to zero

4
00:00:24,330 --> 00:00:29,400
because I also want to check for equality because the monster is that not only if its health is below

5
00:00:29,400 --> 00:00:37,480
zero but also if it's equal to zero. If that is the case, then we know that we won,

6
00:00:37,630 --> 00:00:41,690
so in this case we could throw an alert when we say you won.

7
00:00:41,710 --> 00:00:46,720
So this code here will only execute if this condition here is met and this condition is only met if the

8
00:00:46,720 --> 00:00:50,830
current monster health is below zero or equal to zero.

9
00:00:50,830 --> 00:00:55,780
So with that if we now reload this and we launch a couple of attacks against the monster's, span this button

10
00:00:55,780 --> 00:01:00,290
until the health bar is below zero, we get this one.

11
00:01:00,310 --> 00:01:05,860
Now please note, this message is output before the health bar updates simply due to the way Javascript

12
00:01:05,860 --> 00:01:06,650
works here,

13
00:01:06,670 --> 00:01:10,530
it blocks the UI update until we dismiss this dialog here

14
00:01:10,630 --> 00:01:15,130
but the general logic works and if we dismiss it, we also see the health go down.

15
00:01:15,130 --> 00:01:20,460
So this works and this is our first basic if check in action.

16
00:01:20,530 --> 00:01:28,130
Now of course, it's a bit boring if we can attack the monster but the monster is not able to fight back.

17
00:01:28,150 --> 00:01:34,560
So what we actually want here is to adjust the logic to let the monster fight back.

18
00:01:34,720 --> 00:01:41,390
To do that, after we hit the monster, the monster should immediately lash back at us,

19
00:01:41,470 --> 00:01:44,720
so it automatically hit us after we hit it.

20
00:01:44,920 --> 00:01:51,610
Now for that, in vendor.js, we got the deal player damage function.

21
00:01:51,640 --> 00:01:54,790
It works basically like a deal monster damage function,

22
00:01:54,820 --> 00:02:01,510
it takes some damage, then calculates a random damage which is actually dealt, adjusts the player health

23
00:02:01,510 --> 00:02:04,850
bar in the UI and returns the dealt damage.

24
00:02:04,930 --> 00:02:10,420
So in app.js, I can take advantage of this, for that we just need to define what's the maximum damage

25
00:02:10,510 --> 00:02:11,890
of the monster

26
00:02:11,890 --> 00:02:20,290
and here I'll add a constant, monster attack value, again hardcoded into here and I will let the monster

27
00:02:20,290 --> 00:02:24,170
hit me back with let's say a maximum damage of 14,

28
00:02:24,190 --> 00:02:25,860
so more than we can hit it for

29
00:02:25,870 --> 00:02:30,910
which means that right now, we will need a lot of luck in order to win because these are maximum damages

30
00:02:30,910 --> 00:02:32,610
and the monster has an edge there.

31
00:02:32,650 --> 00:02:37,630
Of course the game will evolve throughout this module and we'll also make the other buttons work which

32
00:02:37,630 --> 00:02:39,730
will give us an edge again.

33
00:02:39,730 --> 00:02:45,470
So let's take that monster attack value here to let the monster deal some damage to us

34
00:02:45,580 --> 00:02:55,170
and for this, I will get my monster damage let's say or player damage depending on how you see it,

35
00:02:55,170 --> 00:02:59,220
it's the damage dealt to the players, so maybe player damage makes more sense

36
00:02:59,220 --> 00:03:07,290
and for that I will called deal player damage here, forward the monster attack value and then reduce the

37
00:03:07,290 --> 00:03:15,420
currentPlayerHealth by that amount, again by simply deducting player damage with the minus equal operator.

38
00:03:15,420 --> 00:03:19,970
Now here, we want to check if the player won,

39
00:03:20,010 --> 00:03:25,260
so if the current monster health is smaller or equal than zero or if the monster won.

40
00:03:25,430 --> 00:03:30,990
Now you might think that we simply add an else block, right? Because if we haven't won, if the monster health

41
00:03:30,990 --> 00:03:33,970
is not below zero, then we lost

42
00:03:34,080 --> 00:03:35,370
but that would actually be wrong,

43
00:03:35,370 --> 00:03:39,660
keep in mind that the attack handler is executed for every click on the button,

44
00:03:39,720 --> 00:03:46,480
so we run this check here for every button click and on most clicks, especially when the game just started,

45
00:03:46,530 --> 00:03:48,140
neither party won.

46
00:03:48,210 --> 00:03:54,510
So we don't want to let the player lose in the else case because if you do that, if we say you lost here,

47
00:03:55,290 --> 00:04:01,200
you will see that if we reload here, right after the first attack, we get the you lost message which makes

48
00:04:01,200 --> 00:04:04,110
sense because we run this check on every button click,

49
00:04:04,170 --> 00:04:08,730
now after the first attack, we certainly didn't win so this condition is not met,

50
00:04:08,890 --> 00:04:11,040
hence we make it into the else block and we lost,

51
00:04:11,040 --> 00:04:14,400
so else is not right for this scenario,

52
00:04:14,400 --> 00:04:20,750
instead I want to check else if, so if we haven't won, if maybe the monster won.

53
00:04:21,210 --> 00:04:27,450
So here I'll check if the currentPlayerHealth is smaller or equal than zero.

54
00:04:27,450 --> 00:04:32,730
Now of course you could argue about this logic because what I do at the moment is, I let the player hit

55
00:04:32,730 --> 00:04:38,640
the monster and then the monster immediately hits back and only thereafter I check if the player won

56
00:04:38,640 --> 00:04:42,170
which means the monster already dealt damage to us

57
00:04:42,270 --> 00:04:50,190
and still, even if that damage took us below zero, we will have won if we also took the monster below

58
00:04:50,190 --> 00:04:50,610
zero,

59
00:04:50,640 --> 00:04:58,800
if we also reduced the monster's health below zero, which means the monster's damage basically is irrelevant

60
00:04:58,800 --> 00:05:04,250
if we also took the monster's health below zero and of course you could argue about that.

61
00:05:04,350 --> 00:05:11,040
Maybe you instead want to check if the player won here after the player dealt damage and therefore

62
00:05:11,340 --> 00:05:17,190
don't give the monster a chance of dealing damage to us if we won or you just don't care, you always execute

63
00:05:17,190 --> 00:05:22,200
both and then you give the player the advantage of checking the monster health first and therefore the

64
00:05:22,200 --> 00:05:27,900
player wins even if the player's health also is below zero because the monster's health is below zero

65
00:05:27,900 --> 00:05:28,830
after this attack.

66
00:05:29,700 --> 00:05:34,800
So a lot of talking about how you look at this, from a technical perspective it's way easier,

67
00:05:34,830 --> 00:05:36,770
we check if this condition is met,

68
00:05:36,780 --> 00:05:38,920
so if the monster health is below zero.

69
00:05:39,000 --> 00:05:41,130
If that is the case, we won,

70
00:05:41,130 --> 00:05:43,710
if that's not the case, we check if maybe the monster won,

71
00:05:43,710 --> 00:05:49,740
so if the current player's health is below zero and if neither of the two is the case, then nothing happens

72
00:05:49,740 --> 00:05:50,970
in this if statement,

73
00:05:51,030 --> 00:05:57,220
neither of these two code lines is executed, so neither the you won alert nor the you lost alert is shown

74
00:05:57,300 --> 00:06:02,790
and instead we just finish the function execution and we're done and that will be the case for most

75
00:06:03,450 --> 00:06:07,630
clicks, for most executions, especially at the start of the game.

76
00:06:07,650 --> 00:06:14,100
So with that, if we now save this and we reload, let's attack and you see the monster is hitting us real

77
00:06:14,100 --> 00:06:15,010
hard here,

78
00:06:15,060 --> 00:06:18,760
we had a couple of weak hits and therefore we're probably going to lose,

79
00:06:18,810 --> 00:06:21,300
so let's see what the end result is

80
00:06:21,330 --> 00:06:24,160
and yes, we get the you lost message here

81
00:06:24,270 --> 00:06:30,690
once our health dropped below zero, so the else if check is also working here. Now to fine tune this a

82
00:06:30,690 --> 00:06:32,100
bit more,

83
00:06:32,100 --> 00:06:38,700
we could of course say yes we really want to tweak this and we shouldn't be able to win if our health

84
00:06:38,760 --> 00:06:41,890
is also below zero, instead it should be a draw

85
00:06:41,910 --> 00:06:44,860
if both health values are below zero.

86
00:06:44,970 --> 00:06:51,240
So here, we could say we won if the monster health is smaller or equal than zero

87
00:06:51,240 --> 00:06:57,360
and, now with the and operator, the currentPlayerHealth actually is above zero,

88
00:06:57,370 --> 00:06:59,840
so greater than zero, not greater or equal

89
00:06:59,850 --> 00:07:01,560
because if it's equal we lost

90
00:07:01,560 --> 00:07:07,480
but greater. So we can only win if our, the player's health, still is above zero

91
00:07:07,860 --> 00:07:15,510
and the same for the monster, the monster only wins if our, the player's health, is below zero and the monster

92
00:07:15,510 --> 00:07:17,890
health on the other hand is above zero

93
00:07:18,210 --> 00:07:23,730
and that of course means that if both health values are below zero, it's a draw.

94
00:07:23,910 --> 00:07:33,690
So we could add else alert you have a draw but of course, that again would be wrong because if we do

95
00:07:33,690 --> 00:07:37,350
that, keep in mind attack handler executes for every click,

96
00:07:37,440 --> 00:07:42,450
so this else case will basically execute whenever neither of the two conditions is met and that most

97
00:07:42,450 --> 00:07:44,130
of the time will be the case.

98
00:07:44,130 --> 00:07:46,950
So now again we have the same case as before, on the first click

99
00:07:46,980 --> 00:07:47,570
we get that

100
00:07:47,580 --> 00:07:54,900
you have a draw message because else again for this scenario, not always but for this scenario is wrong,

101
00:07:55,120 --> 00:08:02,160
instead here I want to check else if the currentPlayerHealth is smaller than zero, smaller or equal

102
00:08:02,160 --> 00:08:02,810
than zero

103
00:08:03,660 --> 00:08:13,070
and the current monster health also is smaller or equal than zero, only in that case we have a draw. Now

104
00:08:13,070 --> 00:08:13,840
to simulate that,

105
00:08:13,840 --> 00:08:19,580
let's start with the max life of five where we have a realistic chance or a more realistic chance of

106
00:08:19,580 --> 00:08:24,040
actually launching an attack that takes us both below zero and let's have a look at this.

107
00:08:24,050 --> 00:08:25,380
If I now click attack,

108
00:08:25,610 --> 00:08:25,870
yes

109
00:08:25,910 --> 00:08:27,280
right away I have a draw,

110
00:08:27,290 --> 00:08:33,620
you might have to test this a bit more often because since the damage is calculated randomly, you can certainly

111
00:08:33,620 --> 00:08:38,630
have situations where you hit the monster for two and the monster hits you for six and therefore you lose

112
00:08:38,690 --> 00:08:41,370
but after clicking this a couple of times, you should get that 

113
00:08:41,480 --> 00:08:45,540
you have a draw message here.

114
00:08:45,560 --> 00:08:48,070
So with that, let me take it back to 100,

115
00:08:48,110 --> 00:08:51,030
with that we now have logic that works correctly,

116
00:08:51,050 --> 00:08:54,250
let's also check for a regular win or loss,

117
00:08:54,270 --> 00:08:55,770
yes we lost here.

118
00:08:56,090 --> 00:09:03,740
And with that, we got our basic if statement with if, else if and different logical operators as well

119
00:09:03,740 --> 00:09:07,070
as the and operator to also combine multiple conditions,

120
00:09:07,100 --> 00:09:12,560
so already quite a lot of the things you learned about in the past lectures are getting applied in this

121
00:09:12,560 --> 00:09:14,990
first crucial element of our game.
