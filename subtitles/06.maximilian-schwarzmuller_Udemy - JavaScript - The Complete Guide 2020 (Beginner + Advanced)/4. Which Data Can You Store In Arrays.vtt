WEBVTT
1
00:00:02.230 --> 00:00:04.650
Now that we know how we can create arrays,

2
00:00:04.660 --> 00:00:08.140
I also want to emphasize what you can store in arrays.

3
00:00:08.410 --> 00:00:13.280
You can store numbers as you see, you can store strings, you can store objects,

4
00:00:13.280 --> 00:00:15.390
these are all things you did throughout the course.

5
00:00:15.550 --> 00:00:22.570
It's really important to understand that arrays can be of the same type, like hobbies where we have cooking

6
00:00:22.570 --> 00:00:30.090
and sports which are both strings but can also be of mixed types, like personal data where we might have

7
00:00:30.100 --> 00:00:33.510
the age as the first element, then the name as a second argument and

8
00:00:33.520 --> 00:00:41.020
then even an object with more details which might even be another array as a third element. So you

9
00:00:41.020 --> 00:00:46.430
can have arrays which are uniform or which have different types of data in there.

10
00:00:46.480 --> 00:00:52.400
You can also have nested arrays or multi-dimensional arrays as they're also called,

11
00:00:52.480 --> 00:00:58.060
for example you could have some analytics data which is in the end an array of arrays where you have

12
00:00:58.060 --> 00:01:06.900
1, 1.6 and then another array, -5.3 or 5.4, 2.1

13
00:01:06.900 --> 00:01:07.900
and so on.

14
00:01:07.900 --> 00:01:14.110
So where you have an array, where each element in the array is another array and of course you could

15
00:01:14.110 --> 00:01:20.020
for example also loop over such an array, const data of analytics data.

16
00:01:20.020 --> 00:01:22.170
This will go over the outer array,

17
00:01:22.180 --> 00:01:25.200
so now data will be these elements of the array,

18
00:01:25.270 --> 00:01:32.590
so the nested arrays. So you can have a loop in a loop and go through the data points here for example

19
00:01:32.950 --> 00:01:34.390
of data,

20
00:01:34.570 --> 00:01:40.690
so data is this data which is just one of the elements, which in turn is an array and then console log

21
00:01:41.200 --> 00:01:43.090
data point here,

22
00:01:43.180 --> 00:01:47.350
that should be data point because we'll always have a look at one element at a time.

23
00:01:47.350 --> 00:01:50.430
So that's also something you can have, if I reload here,

24
00:01:50.440 --> 00:01:56.840
we see the data point is being logged here. So multi-dimensional arrays are also a thing

25
00:01:56.860 --> 00:02:01.820
and of course you could have even more dimensions, you could have an array in an array in an array.

26
00:02:01.870 --> 00:02:07.300
You can also have a mixture of an array with arrays and then still have another element which is an

27
00:02:07.300 --> 00:02:11.890
object or a string, so you can also have mixed data in multi-dimensional arrays.

28
00:02:11.890 --> 00:02:15.970
So what I want to say here is you're really flexible there.

29
00:02:15.970 --> 00:02:20.320
Of course if you would have an array with nested data and then you have some other element which is

30
00:02:20.320 --> 00:02:23.500
just a number let's say, it's still not an iterable object,

31
00:02:23.500 --> 00:02:28.600
well then code like this would break because there we loop over this array with this outer loop and we

32
00:02:28.600 --> 00:02:33.940
have a look at each array element and then we loop over that array element again which works for iterables

33
00:02:34.120 --> 00:02:35.340
but not for numbers.

34
00:02:35.380 --> 00:02:41.220
So you have to be careful how you can use your array but in general you can store whatever you want

35
00:02:41.220 --> 00:02:47.020
in there, nested arrays, nested arrays and nested arrays, mixed data, strings, numbers, whatever you need,

36
00:02:47.260 --> 00:02:53.020
arrays are really flexible regarding the values you store in there. Also important to know about arrays

37
00:02:53.080 --> 00:02:58.840
and something we of course had a look at already but it's something which sometimes gets messed up is

38
00:02:58.840 --> 00:03:00.880
that arrays are index based,

39
00:03:00.880 --> 00:03:06.850
so you can access data by index. If I would want to get my name from personal data which is that second

40
00:03:06.850 --> 00:03:15.100
element, I would do so by accessing personal data one because it's index based and the index starts at

41
00:03:15.100 --> 00:03:15.870
0,

42
00:03:15.940 --> 00:03:19.180
so the first element in an array has an index of 0,

43
00:03:19.210 --> 00:03:25.510
second element has an index of one, third element has an index of two and that's simply important to

44
00:03:25.510 --> 00:03:30.040
keep in mind, it's a common mistake because the length of that array would be three,

45
00:03:30.190 --> 00:03:33.120
the highest index value would be two.

46
00:03:33.340 --> 00:03:36.400
That's something you learn earlier already and what we used already

47
00:03:36.400 --> 00:03:40.020
but since it's easy to mess up, I just wanted to repeat it here.

48
00:03:40.030 --> 00:03:42.370
Index based, index starts at zero,

49
00:03:42.430 --> 00:03:45.460
the length of an array is max index plus 1 though.
