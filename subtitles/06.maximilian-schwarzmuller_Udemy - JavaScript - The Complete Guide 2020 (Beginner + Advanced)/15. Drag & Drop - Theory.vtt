WEBVTT
1
00:00:02.460 --> 00:00:07.770
So now that we gain some experience with events and saw a lot of examples and how to work with events

2
00:00:07.770 --> 00:00:10.630
in Javascript, specifically in the browser,

3
00:00:10.650 --> 00:00:16.630
let's have a look at drag and drop and how we can implement such a behavior in a web page.

4
00:00:16.630 --> 00:00:19.120
Now we'll do this on this project example

5
00:00:19.290 --> 00:00:21.080
we already worked on in the past

6
00:00:21.300 --> 00:00:27.390
but before we dive into that, let's go through the steps that you need to go through to make elements

7
00:00:27.420 --> 00:00:33.870
draggable on your web page and then also to make sure that they can be dropped somewhere and that something

8
00:00:33.870 --> 00:00:37.270
happens if they are dropped somewhere.

9
00:00:37.380 --> 00:00:43.320
So to make elements draggable, you have to mark them as such and you do that by adding the draggable

10
00:00:43.440 --> 00:00:49.140
attribute or setting the draggable property on the DOM elements to true,

11
00:00:49.140 --> 00:00:53.960
so both needs to be set to true, either the attribute or directly through the property.

12
00:00:54.000 --> 00:00:57.180
Once you did that, this element is draggable.

13
00:00:57.240 --> 00:01:03.560
The next step then is to listen to a drag start event on the element which is draggable,

14
00:01:03.570 --> 00:01:09.780
this will be triggered whenever a user starts dragging the event. In the event listener there,

15
00:01:09.840 --> 00:01:15.380
you can also interact with the event object to describe the drag operation

16
00:01:15.420 --> 00:01:21.540
if you are copying or if you're moving which will for example also affect how this is displayed to

17
00:01:21.540 --> 00:01:27.930
the user, how the cursor changes and so on and you can also append data to the event because a drag and

18
00:01:27.930 --> 00:01:35.700
drop operation is actually a combination of different events, on different elements on your page and

19
00:01:35.700 --> 00:01:42.690
in order to make sure that they can work together and that you know in the place where you dropped something

20
00:01:42.870 --> 00:01:49.170
what you started to drag in another place, you can add data to that drag event which is then invisibly

21
00:01:49.380 --> 00:01:54.640
kind of passed around to the other events related to dragging and dropping.

22
00:01:54.690 --> 00:02:03.060
So once we started our drag operation and we configured the drag event, we have to tell Javascript where

23
00:02:03.060 --> 00:02:04.580
the item can be dropped.

24
00:02:04.620 --> 00:02:11.400
Of course, the user can drop the item anywhere but we typically don't support it everywhere on our page,

25
00:02:11.400 --> 00:02:17.440
instead we kind of mark the areas where an item can be dropped by adding an event listener

26
00:02:17.460 --> 00:02:21.100
to the element on which the other element can be dropped.

27
00:02:21.180 --> 00:02:27.960
We add a listener to the drag enter and the drag over events. You can omit the drag enter event, you

28
00:02:27.960 --> 00:02:30.210
definitely need the drag over event.

29
00:02:30.300 --> 00:02:33.990
Both will be triggered whenever an item is dragged onto that element,

30
00:02:33.990 --> 00:02:40.590
the difference between the two elements is that drag over basically also triggers for child elements

31
00:02:40.680 --> 00:02:46.800
of the element where you added it, drag enter won't trigger there and then here, the trick is that in

32
00:02:46.800 --> 00:02:50.010
the event listeners you set to these events here,

33
00:02:50.130 --> 00:02:57.300
you have to call prevent default because the default is always that a drop operation is cancelled, so

34
00:02:57.300 --> 00:03:03.060
that drag and drop isn't allowed onto an element because as I said for most parts of your page, you don't

35
00:03:03.060 --> 00:03:05.890
want allow it and therefore that's the browser default,

36
00:03:05.940 --> 00:03:12.450
you have to prevent that default to allow a drop operation, so it's an important step to listen to these

37
00:03:12.450 --> 00:03:15.600
events and prevent the default to allow a drop.

38
00:03:15.600 --> 00:03:21.600
Now before we react to a drop, you can also optionally listen to a drag leave event

39
00:03:21.600 --> 00:03:28.500
if you want to update the UI for example, updates some styles when the item is dragged away from the

40
00:03:28.500 --> 00:03:34.920
element on which it was dragged over. That is optional, not optional at least if you want to do something

41
00:03:34.920 --> 00:03:40.980
upon a drop is that you listen to the drop event on the same element where you listened to drag

42
00:03:41.010 --> 00:03:47.280
enter and drag over. The drop event will only be triggered if you prevented the default in drag enter

43
00:03:47.280 --> 00:03:51.580
and drag over and the item is then dropped onto that same element.

44
00:03:51.630 --> 00:03:55.740
Now in that drop event, you can then do whatever you want to do upon a drop,

45
00:03:55.740 --> 00:04:02.550
update some data, update the UI, move the element on the UI, anything like that because that's also important.

46
00:04:02.940 --> 00:04:08.610
When you make an element draggable, you'll get some visual feedback that looks like the user is really

47
00:04:08.640 --> 00:04:12.750
dragging the element but it's actually not getting moved in the DOM

48
00:04:12.750 --> 00:04:19.470
technically, you have to do that programmatically through Javascript if you want to update the DOM after

49
00:04:19.500 --> 00:04:22.540
performing such a drag and drop operation.

50
00:04:22.560 --> 00:04:28.530
You also optionally can then listen to a drag end event, not on the place where it was dropped but on

51
00:04:28.530 --> 00:04:34.320
the dragged element itself and there you could also then update the UI or some data, whatever you want

52
00:04:34.320 --> 00:04:34.890
to do.

53
00:04:34.950 --> 00:04:39.560
The drag end event is always fired even if the drop is cancelled,

54
00:04:39.600 --> 00:04:45.960
so if the element was dropped in an invalid area but as I will show you, you will get some property on

55
00:04:45.960 --> 00:04:49.920
the event object which tells you whether the drop was successful or not.

56
00:04:50.250 --> 00:04:51.400
So that's the theory,

57
00:04:51.420 --> 00:04:56.700
let's now go through these steps and implement drag and drop step-by-step in our project.
