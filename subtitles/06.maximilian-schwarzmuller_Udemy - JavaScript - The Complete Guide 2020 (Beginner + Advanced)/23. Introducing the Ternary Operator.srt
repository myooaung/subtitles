1
00:00:02,210 --> 00:00:07,430
There is one special conditional expression which we haven't seen and used thus far and that's the so-called

2
00:00:07,430 --> 00:00:14,300
ternary operator or the ternary expression. It's important to understand that if statements themselves

3
00:00:14,310 --> 00:00:15,570
return no values,

4
00:00:15,600 --> 00:00:15,860
right,

5
00:00:15,860 --> 00:00:20,400
you just dump them into your code to then execute code conditionally,

6
00:00:20,400 --> 00:00:26,160
it's not like a function or a calculation with some operators, an if statement doesn't return any value

7
00:00:26,160 --> 00:00:27,550
which you could store somewhere.

8
00:00:27,590 --> 00:00:30,120
Therefore this for example does not work,

9
00:00:30,150 --> 00:00:36,830
you can't assign an if statement to a constant because this will not return anything, an

10
00:00:36,870 --> 00:00:41,430
if statement won't return anything and this will actually be a syntax error therefore, this is

11
00:00:41,430 --> 00:00:49,220
not allowed. But maybe you have code where you want to use a different value in let's say user name or

12
00:00:49,220 --> 00:00:55,220
any other constant or variable and the concrete value you do want to save in that constant depends on some

13
00:00:55,220 --> 00:01:02,780
condition. Actually that is something which we have in our code already, there here in attack monster,

14
00:01:02,810 --> 00:01:09,320
we have max damage and log event and these are variables that hold conditional values, they either hold,

15
00:01:09,470 --> 00:01:15,680
for max damage, attack value or strong attack value based on this condition and thereafter we use that

16
00:01:15,680 --> 00:01:16,530
variable.

17
00:01:16,580 --> 00:01:22,130
So in the end here, we have a variable where we store data that depends on some condition but I do so

18
00:01:22,130 --> 00:01:27,170
by first setting up the variable and not assigning any value

19
00:01:27,170 --> 00:01:32,660
and then we have an if condition which we don't try to store in any variable or constant because that wouldn't

20
00:01:32,660 --> 00:01:32,930
work

21
00:01:32,930 --> 00:01:33,610
as I mentioned

22
00:01:33,950 --> 00:01:38,900
and then inside of the if condition, we assign values to max damage in this case and to log event as

23
00:01:38,900 --> 00:01:39,530
well.

24
00:01:39,560 --> 00:01:43,690
This is valid code and this works but this snippet here doesn't work

25
00:01:43,700 --> 00:01:48,620
but it would be convenient to have some kind of if statement that would work like this where we kind

26
00:01:48,620 --> 00:01:55,580
of return a value in it and then that returned value get stored in a variable, would save us some extra

27
00:01:55,580 --> 00:01:57,060
lines of code.

28
00:01:57,080 --> 00:01:59,020
Well there is a solution for that,

29
00:01:59,090 --> 00:02:02,730
you can use the so-called ternary operator in such cases.

30
00:02:02,960 --> 00:02:09,080
It allows you to have an inline if statement if you will, without the if keyword because that can't be

31
00:02:09,080 --> 00:02:15,260
used inline but with the question mark and colon operators here and together, they make up that ternary

32
00:02:15,290 --> 00:02:16,550
operator.

33
00:02:16,550 --> 00:02:18,990
Now the logic here is simple,

34
00:02:19,010 --> 00:02:22,290
you first put your condition which you want to check

35
00:02:22,430 --> 00:02:28,310
and there you can have any condition, you could have an if statement, including multiple conditions combined

36
00:02:28,310 --> 00:02:34,760
with and and or, then you have the question mark and thereafter you have the value you want to use if the

37
00:02:34,760 --> 00:02:36,500
condition is true

38
00:02:36,500 --> 00:02:37,390
and that's important,

39
00:02:37,430 --> 00:02:38,860
you have a value here,

40
00:02:38,930 --> 00:02:42,650
so something which could be stored in a constant.

41
00:02:42,650 --> 00:02:48,630
You don't put more complex code here, not multiline code, not multiple expressions,

42
00:02:48,680 --> 00:02:56,210
you can't use an if statement here or define a new variable here, instead here after the question mark,

43
00:02:56,420 --> 00:03:04,230
you need some value that could be stored in a constant or a variable in any other place as well,

44
00:03:04,280 --> 00:03:09,950
so which you could direct assign with the equal sign to a variable or constant, and then you have a

45
00:03:09,950 --> 00:03:14,380
colon and then you have your else value and you need to specify this.

46
00:03:14,450 --> 00:03:17,420
So omitting that else value is not allowed,

47
00:03:17,420 --> 00:03:19,790
that would be a syntax error as well.

48
00:03:19,790 --> 00:03:27,140
So here, we have the isLogin condition which probably is a boolean or as some truthy or falsy value

49
00:03:27,140 --> 00:03:30,890
and if that is true, we store Max in user name,

50
00:03:30,920 --> 00:03:34,290
if it's not true, I store null in user name.

51
00:03:34,400 --> 00:03:41,590
This is a ternary operator in action and we can actually use that in our code as well,

52
00:03:41,750 --> 00:03:47,750
we can change that code to not use this if statement and let me make it very clear that there is nothing

53
00:03:47,750 --> 00:03:50,160
wrong with using an if statement like this,

54
00:03:50,240 --> 00:03:57,050
in some cases using explicit if statements like this might also lead to more readable code than using ternary

55
00:03:57,050 --> 00:04:03,520
operators but in some cases, you also can save some extra code by using ternary operators and

56
00:04:03,530 --> 00:04:11,390
for example here we can comment out the if statement and set max damage here equal to and now I check if mode

57
00:04:12,050 --> 00:04:21,590
is equal to mode attack and then if that's true, separated by a question mark, I assign the value to max

58
00:04:21,590 --> 00:04:24,950
damage that should be used if mode is equal to mode attack,

59
00:04:24,950 --> 00:04:30,320
so basically attack value here and otherwise, separated by a colon,

60
00:04:30,320 --> 00:04:31,640
I use the else case,

61
00:04:31,640 --> 00:04:35,180
so in this case strong attack value

62
00:04:35,180 --> 00:04:40,850
and now we set that variable to either attack value or to strong attack value based on this condition,

63
00:04:40,880 --> 00:04:48,010
so on this condition, if mode is equal to mode attack. Now of course, since i therefore never really assign a value

64
00:04:48,010 --> 00:04:52,680
here, previously we did do it because we assigned values in the if statement,

65
00:04:52,690 --> 00:04:56,810
now we initialize this variable with a value right away

66
00:04:56,830 --> 00:05:02,710
thanks to this ternary expression, we can also switch this to be a constant because I never assign a

67
00:05:02,710 --> 00:05:05,080
new value, we never use the equal sign

68
00:05:05,110 --> 00:05:11,370
after max damage again in this function here and of course we can do the same for the log event.

69
00:05:11,380 --> 00:05:18,770
We can also switch this to a constant and now assign a value based on this check here. So check whether

70
00:05:18,770 --> 00:05:20,630
mode is equal to mode attack

71
00:05:20,630 --> 00:05:25,400
and if that is the case, then we have a value of log event player attack,

72
00:05:25,400 --> 00:05:32,060
otherwise we have a value of log event strong attack here and we can also structure this across multiple

73
00:05:32,060 --> 00:05:33,180
lines, like this.

74
00:05:33,200 --> 00:05:39,290
I did this with the auto formatting shortcut, as you see it's no problem, as always in Javascript you

75
00:05:39,290 --> 00:05:45,350
can write your code along multiple lines here, Javascript then finds out where this ends with the

76
00:05:45,350 --> 00:05:48,460
help of the semicolon here.

77
00:05:48,470 --> 00:05:54,560
So with that, we remove that if statement and we saved some extra code

78
00:05:54,560 --> 00:05:59,930
here, we are able to initialize these constants right away and therefore we are able to use constants

79
00:05:59,960 --> 00:06:01,390
instead of variables

80
00:06:01,430 --> 00:06:07,090
and as I mentioned, this is now not strictly better than using the if statement, absolutely do use the

81
00:06:07,100 --> 00:06:13,040
if statement, especially if you had more complex conditions here and more complex values where you may

82
00:06:13,040 --> 00:06:16,660
be also run some calculation first of all,

83
00:06:16,760 --> 00:06:22,700
so where you then all of a sudden have very long lines of code, then you might actually prefer having

84
00:06:22,700 --> 00:06:27,890
an if statement where this is more structured and readable. If you have relatively short conditions

85
00:06:27,920 --> 00:06:33,440
and value assignments as we have it here however, then using the ternary expression is a fine alternative

86
00:06:33,470 --> 00:06:39,530
that can save you some extra code. Well and with that we should see that if I reload here and I start

87
00:06:39,530 --> 00:06:47,210
my game, that still works as before but now with the help of that ternary expression. It's also worth

88
00:06:47,210 --> 00:06:51,230
noting that a ternary expression can also have nested conditions,

89
00:06:51,230 --> 00:06:59,210
so here where a value is expected, you can have some other check and then have a nested ternary expression

90
00:06:59,210 --> 00:07:05,450
where you then have the nested value and the nested alternative value here

91
00:07:05,930 --> 00:07:12,710
but you should use that with caution because that can quickly lead to very hard to read code and using

92
00:07:13,090 --> 00:07:20,230
a real if statement with else if blocks often is the better alternative to deeply nested ternary expressions.

93
00:07:20,240 --> 00:07:22,630
Nonetheless it does work, it is supported and

94
00:07:22,690 --> 00:07:28,550
it is something you can use, especially if you have short code, short conditions and it's not getting

95
00:07:28,580 --> 00:07:29,180
unreadable.
