WEBVTT
1
00:00:02.320 --> 00:00:07.870
So therefore here in app, I'll start by adding an init method and I'll turn it into a static method

2
00:00:07.900 --> 00:00:12.790
because we'll only call this once basically like this, so that I call init right

3
00:00:12.790 --> 00:00:21.520
when this script parses and executes for the first time and in init, we could now add the logic to parse

4
00:00:21.850 --> 00:00:26.660
the different items but actually I created this project list class, right?

5
00:00:26.680 --> 00:00:32.980
So if you think about it, it would make sense that it's a task of the project list class or of an instance

6
00:00:32.980 --> 00:00:39.820
created based on the class to parse its content and find out which projects belong to that list. So we

7
00:00:39.820 --> 00:00:47.200
can create two instances of this list class, one for each box and then we tell it to which box with which

8
00:00:47.200 --> 00:00:52.360
ID it is connected so that the list itself can do the parsing.

9
00:00:52.570 --> 00:00:58.080
So let's go to the project list then and continue there before we go back to app init.

10
00:00:58.360 --> 00:01:05.020
In the project list, we can add a constructor because my goal is to create two project lists here in init,

11
00:01:05.020 --> 00:01:11.530
in the app class because we have two project boxes, two lists of projects

12
00:01:11.770 --> 00:01:18.790
and then when such a project list is constructed, when it is instantiated, that project list should get

13
00:01:18.790 --> 00:01:24.220
all the information it needs, for example whether it's for the active or finished projects and then parse

14
00:01:24.280 --> 00:01:26.750
all the related projects.

15
00:01:26.770 --> 00:01:31.690
So here in project list, it would make sense to expect the type of project list in the constructor because

16
00:01:31.690 --> 00:01:33.010
we have two types,

17
00:01:33.010 --> 00:01:40.740
we have basically the active projects with this ID here and we have the finished projects with this

18
00:01:40.740 --> 00:01:43.230
ID on the surrounding section.

19
00:01:43.230 --> 00:01:54.030
So therefore, here in init in app, we could create an active projects list with new project list where

20
00:01:54.030 --> 00:02:01.650
we instantiate this and as a type parameter, here we could parse in active and then we repeat this process

21
00:02:01.650 --> 00:02:08.550
for the finished projects list where we parse in finished. So active and finished and I actually chose

22
00:02:08.550 --> 00:02:13.740
words which we find in the exact same way in the HTML file, finished,

23
00:02:13.920 --> 00:02:20.970
this part here and active. Thereafter we always have -projects but that's the same for both boxes,

24
00:02:21.270 --> 00:02:26.580
only the identifier at the beginning, active and finished, differs.

25
00:02:26.640 --> 00:02:32.910
So now with that information passed into project list, here in the constructor, we can start reaching

26
00:02:32.910 --> 00:02:35.820
out to the items that are part of that list.

27
00:02:35.850 --> 00:02:43.410
So here we can add our project items constant for example and then use document query selector all,

28
00:02:43.920 --> 00:02:49.890
all to get a list of items and not just the first matching item, where we then can use a template expression

29
00:02:49.890 --> 00:02:57.510
here to define a string, our query string and there I want to look for a certain ID and that ID and

30
00:02:57.510 --> 00:03:03.270
that's why I'm using the back ticks here and that template literal, that ID will take my type into

31
00:03:03.270 --> 00:03:10.650
account because I am looking for my sections here with the ID finished projects or active projects.

32
00:03:10.650 --> 00:03:18.480
So here we can inject or interpolate, however you want to call it, type-projects so that this type

33
00:03:18.480 --> 00:03:23.900
thing is dynamic and then not just all these sections but actually I'm interested in the items in there,

34
00:03:24.090 --> 00:03:25.800
so I'm interested in the list items.

35
00:03:25.800 --> 00:03:33.320
So this is my CSS selector for all list items in the sections with these IDs.

36
00:03:33.330 --> 00:03:39.720
Now if we quickly console log project items, just to verify whether we're on the right path and then

37
00:03:39.720 --> 00:03:46.390
save this and go back and reload here, we should see two node lists, one with two list items,

38
00:03:46.410 --> 00:03:52.320
that's the first box, the active projects and one with one list item and that's that last box here,

39
00:03:52.320 --> 00:03:54.030
the finished projects.

40
00:03:54.120 --> 00:03:55.460
So that's a solid start,

41
00:03:55.470 --> 00:03:58.810
now we have access to these items in the DOM,

42
00:03:58.890 --> 00:04:03.930
now we can read information from these DOM nodes and actually there's one piece of information I'm interested

43
00:04:03.930 --> 00:04:05.190
in and that's the ID.

44
00:04:05.280 --> 00:04:06.510
So let's continue with that now.
