WEBVTT
1
00:00:02.320 --> 00:00:07.690
So that was a lot of talking about functions and variables and constants but these are some core things

2
00:00:07.690 --> 00:00:13.320
you've got to understand with Javascript regarding how code executes and how code is related.

3
00:00:13.360 --> 00:00:19.180
Now our goal was to make sure that when we click the plus button, we actually take whatever the user

4
00:00:19.210 --> 00:00:27.700
entered here and we then use that in this addition and generate a new result which we then output.

5
00:00:27.700 --> 00:00:30.750
Now for that, we need to add an event listener to this button

6
00:00:30.770 --> 00:00:36.160
and now that's something we haven't learned at all, we don't really know how to interact with the HTML page

7
00:00:36.550 --> 00:00:41.320
because that's a bit more complex and I'll have a whole module where we dive into all the depths of

8
00:00:41.320 --> 00:00:45.460
this. For now we can take something from the vendor.js file,

9
00:00:45.460 --> 00:00:54.700
we can take this add button which the end is a reference, a pointer at this plus button we have here. So

10
00:00:54.700 --> 00:01:04.030
in app.js, we can use that, replace this code here with add button and then add a dot here which is

11
00:01:04.240 --> 00:01:06.870
strange, we have never seen that before here,

12
00:01:06.880 --> 00:01:13.540
let's ignore it for now and then type addEventListener, written like this.

13
00:01:13.570 --> 00:01:21.730
This is actually a function built into the browser you could say which is tied to this button which

14
00:01:21.730 --> 00:01:27.630
is why we have this dot in between and we'll dive a bit deeper into what this dot means in just a while.

15
00:01:27.640 --> 00:01:34.380
So for now, let's just write this and now this is a function that takes two parameters or two arguments

16
00:01:34.390 --> 00:01:40.980
and the first parameter is actually a string which identifies the event to which we want to listen.

17
00:01:41.060 --> 00:01:45.670
Now there are a bunch of available events and I'll walk you through them and where to find them all

18
00:01:45.970 --> 00:01:48.040
in the dedicated module,

19
00:01:48.040 --> 00:01:50.320
for now we can add click here.

20
00:01:50.350 --> 00:01:56.230
Now as a string between single or double quotes or back ticks, though back ticks don't make a lot of

21
00:01:56.230 --> 00:02:02.640
sense here because we don't need to embed anything dynamic here. So that's the first parameter,

22
00:02:02.820 --> 00:02:08.800
the second parameter and that's now the strange thing actually should be a function.

23
00:02:08.850 --> 00:02:14.870
It's not that strange if you think about it though since functions are a code on demand,

24
00:02:15.000 --> 00:02:22.320
you want to make sure that you tell the browser, that you tell Javascript which function should be executed

25
00:02:22.410 --> 00:02:25.080
if this button is clicked.

26
00:02:25.130 --> 00:02:28.620
So how do we now point at a function here?

27
00:02:29.150 --> 00:02:31.520
Well you could do something like add here,

28
00:02:31.580 --> 00:02:31.820
right,

29
00:02:31.820 --> 00:02:34.710
you could execute your add function here.

30
00:02:34.760 --> 00:02:36.790
Now this would actually be wrong

31
00:02:36.950 --> 00:02:41.990
and this is one of the trickier things to understand in Javascript or in programming in general,

32
00:02:41.990 --> 00:02:44.160
it's not exclusive to Javascript.

33
00:02:44.510 --> 00:02:49.490
We want to tell the browser what to execute when a click occurs.

34
00:02:49.490 --> 00:02:55.610
Now if we execute add like this, no matter if we add arguments or not which we of course should theoretically

35
00:02:55.610 --> 00:03:02.270
though, what happens is that this code gets parsed by the browser when it encounters our script and in

36
00:03:02.270 --> 00:03:06.470
the end after registering all functions and so on, it will go ahead,

37
00:03:06.470 --> 00:03:12.800
it will add this event listener but then this here tells the browser call this function because we

38
00:03:12.800 --> 00:03:18.550
have parentheses with arguments here. We want to tell the browser however or we want to tell the Javascript

39
00:03:18.550 --> 00:03:22.330
engine, don't execute this function right away,

40
00:03:22.330 --> 00:03:31.260
instead keep in mind that this function should be executed when this button is clicked. The solution

41
00:03:31.260 --> 00:03:39.440
therefore is to not pass the function here with parentheses but just the function name. By doing that,

42
00:03:39.440 --> 00:03:44.360
you're telling the Javascript engine when this button is clicked,

43
00:03:44.360 --> 00:03:49.760
have a look at the function with this name and execute it for me.

44
00:03:51.070 --> 00:03:58.150
So before we manually called the function in our code because we the developer so to say, we're the

45
00:03:58.150 --> 00:04:00.590
one executing the function,

46
00:04:00.730 --> 00:04:06.760
now we want to make sure that the browser can execute the function when the click occurs and we don't

47
00:04:06.760 --> 00:04:08.140
know when that will be the case,

48
00:04:08.170 --> 00:04:13.700
so we want to give Javascript the name of the function which it should call for us,

49
00:04:13.720 --> 00:04:17.260
we want to allow the browser to call that function for us.

50
00:04:17.260 --> 00:04:19.340
Here's a real life analogy,

51
00:04:19.420 --> 00:04:27.220
you live in some flat and you have an address where you get your mail and so on.

52
00:04:27.220 --> 00:04:31.990
Now of course, you can go down to your doorbell and ring it yourself,

53
00:04:32.020 --> 00:04:36.020
you can do that because you know where you live and what your doorbell is,

54
00:04:36.040 --> 00:04:42.880
which button you need to press but you want to make sure that the mail service, the people delivering

55
00:04:42.880 --> 00:04:47.590
your mail and your packages, that they know where to ring.

56
00:04:47.590 --> 00:04:49.300
So you give them your address,

57
00:04:49.480 --> 00:04:55.210
you give them your address by providing it to Amazon or wherever you order your stuff.

58
00:04:55.210 --> 00:05:00.550
So now you basically tell them your address and in this case, the name of the function is the address so

59
00:05:00.550 --> 00:05:02.790
to say where they need to ring,

60
00:05:03.370 --> 00:05:08.950
so that when they are there with your package with which you ordered, they can ring that bell and

61
00:05:08.980 --> 00:05:14.620
that's the same we're doing here, we're giving the browser the address, the name of the function which

62
00:05:14.620 --> 00:05:18.530
it should call for us when the button is clicked.

63
00:05:18.550 --> 00:05:25.360
So now this add function will be executed for us by the browser whenever a user clicks this add button.

64
00:05:25.360 --> 00:05:25.990
The thing now

65
00:05:25.990 --> 00:05:26.910
just is

66
00:05:26.920 --> 00:05:30.000
what about these arguments which we want to get there,

67
00:05:30.000 --> 00:05:39.320
we don't know what to add here. Well in the end, what should be added here is is the current result and

68
00:05:39.320 --> 00:05:40.880
then whatever the user entered.

69
00:05:41.360 --> 00:05:46.940
So we need two additional pieces of information, we need to find out what the user entered and we need

70
00:05:46.940 --> 00:05:50.520
to get our current result. For that,

71
00:05:50.530 --> 00:05:56.770
we can restructure the function a bit and instead of getting arguments here, we can take advantage of

72
00:05:56.770 --> 00:06:03.400
something which I mentioned earlier, a function can read from the globally available variables. So we

73
00:06:03.400 --> 00:06:09.250
know the current result of course, so we can use that here in a read-only way, so we're reading from

74
00:06:09.250 --> 00:06:09.510
it,

75
00:06:09.550 --> 00:06:14.620
we could of course also reassign a value to it but here I'm just reading from it and now I want to get

76
00:06:14.620 --> 00:06:16.370
the value the user entered here.

77
00:06:16.600 --> 00:06:20.660
Now for that, the vendor.js file again got us covered,

78
00:06:20.670 --> 00:06:27.300
this user input constant which is added globally here, that in the end points at this input field here.

79
00:06:28.050 --> 00:06:30.110
So we can use user input here

80
00:06:30.120 --> 00:06:35.470
but now that's just a pointer at the input field, again without diving into too many details here,

81
00:06:35.550 --> 00:06:41.910
you can add dot value here and that will actually give you the value of what the user entered

82
00:06:41.910 --> 00:06:47.640
and now we get these two pieces of information from our globally available variables and constants,

83
00:06:47.640 --> 00:06:49.100
we then derive that result,

84
00:06:49.110 --> 00:06:52.200
we return that result and of course that's another problem,

85
00:06:52.230 --> 00:06:56.320
we return the result but we don't really care about the return value here.

86
00:06:56.370 --> 00:07:00.550
We're telling the browser when the button is clicked, click the add function,

87
00:07:00.600 --> 00:07:04.470
the browser however doesn't care about our result here,

88
00:07:04.470 --> 00:07:07.620
it just knows on a click, I execute this function,

89
00:07:07.680 --> 00:07:10.000
I don't care whether you return something

90
00:07:10.110 --> 00:07:12.390
and if you do, what that would be.

91
00:07:13.460 --> 00:07:18.950
So we can actually change that too on that function and just make sure that we immediately change the

92
00:07:18.950 --> 00:07:20.550
current result

93
00:07:20.600 --> 00:07:26.870
and earlier, I mentioned that it's not the best idea for a function to kind of change something from

94
00:07:26.870 --> 00:07:27.780
outside.

95
00:07:27.890 --> 00:07:33.620
Well if it's a function like this which is very clear about that, which doesn't kind of mix some internal

96
00:07:33.620 --> 00:07:40.550
constant and some external global values but which clearly only works with global values and which we just

97
00:07:40.550 --> 00:07:44.070
use as event listener, that's kind of fine

98
00:07:44.090 --> 00:07:46.370
and this might sound totally arbitrary

99
00:07:46.370 --> 00:07:50.150
right now, you'll get a feeling for this throughout the course, promised.

100
00:07:50.150 --> 00:07:55.250
This is something which gets clearer the more you work with Javascript, you in the end just want to write clear

101
00:07:55.250 --> 00:08:02.360
functions which might work with global constants and variables but which then shouldn't mix it too much

102
00:08:02.360 --> 00:08:10.100
with internally managed data and then some return value even though they're also manipulating some global

103
00:08:10.100 --> 00:08:12.590
value. As a general rule of thumb,

104
00:08:12.650 --> 00:08:18.830
you can have a function that manipulates some global variable but then this function maybe also shouldn't

105
00:08:18.830 --> 00:08:25.130
return something because if a function returns something, it kind of signals hey I do something and I

106
00:08:25.130 --> 00:08:28.090
give you the result of that, I don't do anything else than that.

107
00:08:28.130 --> 00:08:31.120
If that function then starts changing something else too,

108
00:08:31.220 --> 00:08:32.870
that's the confusing part.

109
00:08:32.870 --> 00:08:37.640
If you have a function without a return statement as we have it here, this function doesn't give us the

110
00:08:37.640 --> 00:08:40.610
illusion that it would return its result,

111
00:08:40.640 --> 00:08:46.820
it probably instead starts editing the global variables right away which it does and then this is clear

112
00:08:46.820 --> 00:08:50.030
to us as a developer if we read that code as well,

113
00:08:50.030 --> 00:08:56.550
so this now again make sense. Now that was a lot of talking but we now should have a setup where

114
00:08:56.550 --> 00:09:01.620
we actually are able to change the current result when that button is pressed.

115
00:09:01.800 --> 00:09:11.210
So if we now save that and we reload here and I enter a five and I click plus, ha nothing changes,

116
00:09:11.240 --> 00:09:16.380
now why is that? Well we're almost there

117
00:09:16.730 --> 00:09:23.060
but keep in mind that we're calling output result here at the end of our script. Now as I mentioned before,

118
00:09:23.330 --> 00:09:26.860
the script runs from top to bottom right,

119
00:09:26.870 --> 00:09:32.500
so that of course means that after that, it's done and it doesn't run again.

120
00:09:32.510 --> 00:09:37.540
The only thing that runs again is this function whenever we press that button because we, when the script

121
00:09:37.660 --> 00:09:43.310
executed, told the browser to be aware of that click listener and it then registers the click listener

122
00:09:43.640 --> 00:09:49.070
and it will, even after the script completed, then always execute this function because it stored that

123
00:09:49.070 --> 00:09:53.790
in memory and all the surrounding data it needs whenever the button is clicked.

124
00:09:53.900 --> 00:09:57.550
Output result however is not executed when the button is clicked

125
00:09:57.560 --> 00:09:59.690
but when the script first executes.

126
00:09:59.690 --> 00:10:08.230
So what we do here is we try to write to our page but we don't do that whenever the button is clicked

127
00:10:08.240 --> 00:10:12.170
and therefore when our current result changes but only when the script initially runs.

128
00:10:12.800 --> 00:10:18.740
So the solution is to grab that piece of code and also add it into the add function so that now here,

129
00:10:19.040 --> 00:10:21.500
we output our result

130
00:10:21.500 --> 00:10:27.140
and now we can also soon start adding a calculation description again,

131
00:10:27.140 --> 00:10:29.390
for now I'll just replace it with an empty string

132
00:10:29.390 --> 00:10:35.060
but the more important thing is that now it uses this current result here and it now outputs that into

133
00:10:35.060 --> 00:10:35.830
our webpage

134
00:10:35.940 --> 00:10:38.180
whenever the add function runs.

135
00:10:38.390 --> 00:10:47.750
So if we now save this and I reload and I enter five and then I press plus, you see result 05,

136
00:10:47.750 --> 00:10:51.140
let's add a 10 here, this gets stranger and stranger,

137
00:10:51.140 --> 00:10:53.890
this is clearly not a valid calculator.

138
00:10:54.080 --> 00:10:57.650
So the good thing is, receiving the output here

139
00:10:57.650 --> 00:11:04.550
so generally our setup with the functions on seems to work but we're clearly not doing some mathematically

140
00:11:04.550 --> 00:11:06.560
correct calculations here.

141
00:11:06.560 --> 00:11:07.570
So what's the problem?
