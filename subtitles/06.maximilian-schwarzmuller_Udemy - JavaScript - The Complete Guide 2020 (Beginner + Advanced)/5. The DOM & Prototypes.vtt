WEBVTT
1
00:00:02.440 --> 00:00:09.100
Now before we continue working with width and height, one short extra lecture regarding MDN and the

2
00:00:09.100 --> 00:00:13.230
element docs we find there and the HTML element docs we find there.

3
00:00:13.270 --> 00:00:17.430
Now that we understand how inheritance and prototypes works,

4
00:00:17.470 --> 00:00:24.340
this picture here actually also makes more sense or should make more sense. Javascript or this DOM

5
00:00:24.370 --> 00:00:30.610
API exposed by the browser in Javascript I should say simply alsi works with multiple constructor

6
00:00:30.610 --> 00:00:34.060
functions, with multiple classes if you want to call it like this

7
00:00:34.060 --> 00:00:35.840
and this is how they are related.

8
00:00:35.950 --> 00:00:41.870
The way you should read this is that every HTML element is inheriting basically from element, so

9
00:00:41.870 --> 00:00:47.440
has an element prototype, any element prototype has a node prototype and that in turn has an event

10
00:00:47.470 --> 00:00:53.980
target prototype and that makes sense because if you remember earlier, I explained that elements are

11
00:00:53.980 --> 00:00:59.440
just specific type of nodes, so it makes sense that they have a node prototype but then they bring their

12
00:00:59.530 --> 00:01:02.000
own properties and methods as well

13
00:01:02.380 --> 00:01:07.480
and you even have more specific types than just HTML element because you have specific types of

14
00:01:07.480 --> 00:01:08.840
HTML elements.

15
00:01:08.890 --> 00:01:14.950
If you scroll down a bit further on this HTML element article, you find the more specialised versions

16
00:01:15.430 --> 00:01:20.340
and there are a bunch of them as you can see, for example there is the HTML input element.

17
00:01:20.410 --> 00:01:25.930
The specific thing here is that it has all the properties or it has access to all the properties and

18
00:01:25.930 --> 00:01:32.050
methods of HTML element, of element, of node and of event target but it also adds its own special

19
00:01:32.050 --> 00:01:36.280
properties and methods to which only an input element has access.

20
00:01:36.280 --> 00:01:38.380
Here for example, the labels property,

21
00:01:38.410 --> 00:01:44.770
a property other HTML elements don't have access to but HTML input elements have access to it.

22
00:01:44.800 --> 00:01:47.590
Now how do you create such a HTML input element?

23
00:01:47.590 --> 00:01:51.920
Well you don't have to create these objects or these instances,

24
00:01:52.000 --> 00:01:58.270
instead when you select a HTML input element from the DOM, you will automatically get such an object

25
00:01:58.330 --> 00:01:59.380
of that type

26
00:01:59.410 --> 00:02:05.260
With all these properties and all these methods and thanks to how prototypes and the prototype chain

27
00:02:05.260 --> 00:02:10.490
works, we then also have access to everything from HTML element, from element, from node and from event

28
00:02:10.490 --> 00:02:11.040
target.

29
00:02:11.440 --> 00:02:16.720
So this hopefully now also makes a bit more sense now that we had a look at object oriented programming

30
00:02:16.860 --> 00:02:18.970
and at prototypes in earlier modules.
