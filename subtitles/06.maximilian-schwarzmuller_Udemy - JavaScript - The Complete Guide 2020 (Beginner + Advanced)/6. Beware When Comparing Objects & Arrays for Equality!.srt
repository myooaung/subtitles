1
00:00:02,490 --> 00:00:09,750
When comparing values in Javascript, there is a strange behavior you might notice if you start comparing

2
00:00:09,840 --> 00:00:12,080
objects and arrays to each other

3
00:00:12,080 --> 00:00:20,820
because these don't work like numbers or strings do. Consider this example - you have an object which has

4
00:00:20,820 --> 00:00:26,610
a name property which holds Max as a value and you have another object which has the same value.

5
00:00:26,640 --> 00:00:28,620
Now these are not the same object,

6
00:00:28,650 --> 00:00:32,390
we're not talking about one variable here which I want to compare to itself,

7
00:00:32,400 --> 00:00:37,010
that would be redundant but instead let's say these are two different variables with two different objects

8
00:00:37,050 --> 00:00:42,630
but of course the objects themselves regarding the values that are stored in there are kind of equal to

9
00:00:42,630 --> 00:00:44,420
us humans. Now

10
00:00:44,430 --> 00:00:51,750
still, if you compare these, no matter if with the triple or the double equal operator, you will find out

11
00:00:51,750 --> 00:00:56,930
that the value is not true as you might have expected but instead that it's false.

12
00:00:56,940 --> 00:00:58,290
Now why is that?

13
00:00:58,410 --> 00:01:03,600
Because objects and arrays and for arrays, it's indeed the same, if you had two arrays with the same values,

14
00:01:03,870 --> 00:01:08,730
they would not yield true if you compare them with the equal sign operators. For objects and arrays,

15
00:01:08,730 --> 00:01:12,330
you have to understand that they're kind of special in Javascript.

16
00:01:12,330 --> 00:01:15,720
Now I'll dive deeper into what exactly is special there

17
00:01:15,720 --> 00:01:21,930
later in the course where we have a closer look at the technical details of Javascript and some of the

18
00:01:21,930 --> 00:01:23,890
core things you also have to be aware of,

19
00:01:24,060 --> 00:01:30,750
for now let's just keep in mind that these two types of data, objects and arrays, are special. Now we can

20
00:01:30,750 --> 00:01:33,850
again check this by opening the console in the developer tools,

21
00:01:33,870 --> 00:01:39,690
here again in the calculator but that does not matter and in there, let's create two constants or variables,

22
00:01:39,720 --> 00:01:45,450
doesn't matter, person1 which is an object with name Max,

23
00:01:45,470 --> 00:01:55,400
so with a name property that holds a string and then person2 which basically now holds the same data.

24
00:01:55,420 --> 00:02:01,600
Now if you now compare person1 to person2 with the equality operator, again it doesn't matter if you use

25
00:02:01,600 --> 00:02:09,460
two or three equals signs here, you see you get false as a value here, so this generates a boolean of the value

26
00:02:09,460 --> 00:02:10,330
false here

27
00:02:10,360 --> 00:02:15,630
not true, even though to us humans, this looks exactly the same.

28
00:02:15,700 --> 00:02:19,630
Now it has something to do with how that is stored behind the scenes in memory

29
00:02:19,840 --> 00:02:23,400
but again we'll dive into the details of that a bit later,

30
00:02:23,500 --> 00:02:28,800
for now just keep in mind that two objects stored in different variables will never be the same.

31
00:02:28,840 --> 00:02:35,530
It's different if you have an object stored in a variable or constant and then you create a new constant

32
00:02:35,530 --> 00:02:39,830
or variable, let's say a person3 which you set equal to person1,

33
00:02:39,940 --> 00:02:46,300
then you will see the person3 is indeed equal to person1 but if you have another constant or variable

34
00:02:46,510 --> 00:02:51,670
where you assigned a brand new object which you created like this and then assigned like this, then this

35
00:02:51,670 --> 00:02:58,300
will never be equal to an equal looking but differently created object in another constant or variable.

36
00:02:58,300 --> 00:02:59,800
So that's just something to keep in mind,

37
00:02:59,800 --> 00:03:03,860
again why this is the way it is is something we'll have a detailed look later.

38
00:03:04,420 --> 00:03:06,460
It's also the same for arrays as I mentioned

39
00:03:06,460 --> 00:03:17,180
if you have your hobbies array here and it includes sports and cooking, like this and then you have more

40
00:03:17,180 --> 00:03:23,530
hobbies and that has exactly the same values written in exactly the same way, then here

41
00:03:23,540 --> 00:03:29,990
also you will find out that hobbies in this case is never equal to more hobbies no matter how many

42
00:03:29,990 --> 00:03:34,040
equal signs you use, just as it was the case with objects, now

43
00:03:34,040 --> 00:03:38,620
also because arrays behind the scenes are objects as you learned earlier.

44
00:03:38,690 --> 00:03:41,210
So again why this is the case will be covered later, for now

45
00:03:41,210 --> 00:03:42,280
just keep it in mind,

46
00:03:42,290 --> 00:03:49,640
equality comparisons won't work like this for object and arrays. You would have to compare individual

47
00:03:49,640 --> 00:03:50,270
values,

48
00:03:50,270 --> 00:03:54,680
so for example person1.name equal to person2.name

49
00:03:54,680 --> 00:03:57,740
since you then get access to the string that's stored in there,

50
00:03:57,740 --> 00:04:03,140
this again would work so this is a comparison you can make but the overall object or array, that can't

51
00:04:03,140 --> 00:04:03,740
be compared.
