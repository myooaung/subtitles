WEBVTT
1
00:00:00.001 --> 00:00:06.006
(upbeat music)

2
00:00:06.006 --> 00:00:09.002
- [Tutor] Now it's time to show you my solution.

3
00:00:09.002 --> 00:00:10.001
But before we get there,

4
00:00:10.001 --> 00:00:12.007
I want to chat a little bit about the testing strategies

5
00:00:12.007 --> 00:00:15.009
that I used, because I think it's a very good one.

6
00:00:15.009 --> 00:00:18.008
Now, first and foremost, I'm a big fan of writing tests.

7
00:00:18.008 --> 00:00:20.008
I especially like to spend time

8
00:00:20.008 --> 00:00:23.003
on negative and boundary conditions.

9
00:00:23.003 --> 00:00:26.001
I guess a lot of this comes from my entry into this industry

10
00:00:26.001 --> 00:00:27.008
as a software tester.

11
00:00:27.008 --> 00:00:29.006
Now I'm going to assume that you're using TDD

12
00:00:29.006 --> 00:00:31.008
or some similar process.

13
00:00:31.008 --> 00:00:33.008
And if so, the first thing you're going to do

14
00:00:33.008 --> 00:00:36.003
is write your happy path test.

15
00:00:36.003 --> 00:00:38.008
Now you should write a test that implements

16
00:00:38.008 --> 00:00:42.007
an injection attack, and you saw that in my example.

17
00:00:42.007 --> 00:00:45.008
You should do this for every single data access method

18
00:00:45.008 --> 00:00:47.003
that accepts input.

19
00:00:47.003 --> 00:00:49.001
And if you have multiple inputs,

20
00:00:49.001 --> 00:00:52.007
you should write a test that injects into each one of those.

21
00:00:52.007 --> 00:00:54.006
There's a valid reason for doing this.

22
00:00:54.006 --> 00:00:58.003
It lets you test each of those conditions separately,

23
00:00:58.003 --> 00:00:59.008
and now you're going to write your code

24
00:00:59.008 --> 00:01:03.004
and then you're going to make sure that your tests always pass.

25
00:01:03.004 --> 00:01:04.003
Now with that being said,

26
00:01:04.003 --> 00:01:06.005
let's take a look at my solution.

27
00:01:06.005 --> 00:01:08.002
Before we get to the solution, let's take a look

28
00:01:08.002 --> 00:01:09.005
at the problem.

29
00:01:09.005 --> 00:01:12.002
So we've got loaded for you here, the PrecedentDAO,

30
00:01:12.002 --> 00:01:14.008
which is where you should have found the SQL injection

31
00:01:14.008 --> 00:01:16.001
to begin with.

32
00:01:16.001 --> 00:01:17.009
And here on line 16,

33
00:01:17.009 --> 00:01:21.001
you'll see that I've created a string format.

34
00:01:21.001 --> 00:01:22.008
So instead of straight concatenation,

35
00:01:22.008 --> 00:01:25.007
I'm using formatting and in that formatting,

36
00:01:25.007 --> 00:01:30.000
I'm replacing it with an input in this case, LAST_NAME.

37
00:01:30.000 --> 00:01:32.005
So what will happen then is that entire LAST_NAME

38
00:01:32.005 --> 00:01:37.002
will be injected as if it were raw string concatenation

39
00:01:37.002 --> 00:01:39.007
and that's where the problem set comes from.

40
00:01:39.007 --> 00:01:41.007
So just to show you that I fixed it,

41
00:01:41.007 --> 00:01:44.005
I'm going to run my test real quick

42
00:01:44.005 --> 00:01:47.003
and then we'll talk about how we fixed it.

43
00:01:47.003 --> 00:01:50.002
And both of my tests pass, which is what I would expect.

44
00:01:50.002 --> 00:01:56.001
And I made no modifications to the test file in my solution.

45
00:01:56.001 --> 00:01:58.003
So let's take a look at how I fixed this.

46
00:01:58.003 --> 00:02:00.003
So what I did was on line 16,

47
00:02:00.003 --> 00:02:04.006
I changed the SQL statement to include a question mark

48
00:02:04.006 --> 00:02:05.007
for the variable,

49
00:02:05.007 --> 00:02:09.003
instead of doing string concatenation or string formatting.

50
00:02:09.003 --> 00:02:13.001
Then on line 20, I set a statement parameter,

51
00:02:13.001 --> 00:02:16.001
setString equal to the lastName.

52
00:02:16.001 --> 00:02:19.001
And then I executed the query and continue down the path

53
00:02:19.001 --> 00:02:23.003
of looking at the results sets and populating our data.

54
00:02:23.003 --> 00:02:28.007
So what happens then is that because that Trump's statement

55
00:02:28.007 --> 00:02:32.003
where it says Trump equals one or one,

56
00:02:32.003 --> 00:02:35.005
no data exists with that lastName.

57
00:02:35.005 --> 00:02:37.005
As such it returns zero,

58
00:02:37.005 --> 00:02:40.007
which is why our test was now able to pass,

59
00:02:40.007 --> 00:02:44.002
whereas before it failed when we got 45 results back.

60
00:02:44.002 --> 00:02:46.009
And that's my solution to how to do SQL injection.

61
00:02:46.009 --> 00:02:48.000
It's pretty straightforward

62
00:02:48.000 --> 00:02:50.003
and really that should be your pattern

63
00:02:50.003 --> 00:02:54.001
whenever you're doing straight data access with JDBC

64
00:02:54.001 --> 00:02:58.006
is to actually go through and do the query parameters

65
00:02:58.006 --> 00:03:00.009
in such a way that you're binding variables

66
00:03:00.009 --> 00:03:02.005
instead of concatenating 'em.

67
00:03:02.005 --> 00:03:05.006
Do that for everything and you'll never run into issues

68
00:03:05.006 --> 00:03:09.000
with SQL injection in the Java language.

