WEBVTT
1
00:00:00.007 --> 00:00:01.008
- [Instructor] We're going to spend a lot more time talking

2
00:00:01.008 --> 00:00:04.007
about SQL injection or challenge exercises

3
00:00:04.007 --> 00:00:07.002
as well as how to prevent it.

4
00:00:07.002 --> 00:00:10.004
While this attack vector continues to be a major issue,

5
00:00:10.004 --> 00:00:12.003
it is rather easily mitigated.

6
00:00:12.003 --> 00:00:15.000
So we're not going to go into the web specific examples.

7
00:00:15.000 --> 00:00:17.004
If you're interested in how to mitigate those,

8
00:00:17.004 --> 00:00:20.001
check out my other course on secure coding here

9
00:00:20.001 --> 00:00:22.000
on the LinkedIn Learning Library,

10
00:00:22.000 --> 00:00:24.000
I do want to spend a bit of time to talk about

11
00:00:24.000 --> 00:00:25.009
some of those other injection attacks

12
00:00:25.009 --> 00:00:28.006
however that are prevalent in Java

13
00:00:28.006 --> 00:00:32.000
LDAP injection attacks can be a common internal attack

14
00:00:32.000 --> 00:00:33.009
within enterprise systems.

15
00:00:33.009 --> 00:00:36.002
Obviously LDAP is used outside of enterprises,

16
00:00:36.002 --> 00:00:38.006
but it does seem to be more prevalent

17
00:00:38.006 --> 00:00:40.007
within the enterprise itself.

18
00:00:40.007 --> 00:00:43.008
LDAP injection has caused like all injection

19
00:00:43.008 --> 00:00:45.007
from not sanitizing the input

20
00:00:45.007 --> 00:00:48.008
before submitting it to an interpreter.

21
00:00:48.008 --> 00:00:51.002
Consider the following query for LDAP

22
00:00:51.002 --> 00:00:53.000
to authenticate a user.

23
00:00:53.000 --> 00:00:56.000
We're doing a query here where sn is USERSN

24
00:00:56.000 --> 00:00:59.007
and userPassword equals a variable USERPASWORD.

25
00:00:59.007 --> 00:01:00.005
Now,

26
00:01:00.005 --> 00:01:04.001
consider taking some non-sanitized inputs for both fields.

27
00:01:04.001 --> 00:01:09.002
For instance a username of F* and a password of *.

28
00:01:09.002 --> 00:01:11.008
What happens here is that this will return all users

29
00:01:11.008 --> 00:01:14.004
whose username actually starts with F

30
00:01:14.004 --> 00:01:18.004
so my username would show up in most systems.

31
00:01:18.004 --> 00:01:20.009
Now the real way to solve this with LDAP injection

32
00:01:20.009 --> 00:01:24.004
because it doesn't give you the framework to prevent it

33
00:01:24.004 --> 00:01:25.008
like you get with sequel,

34
00:01:25.008 --> 00:01:29.001
is to actually check your inputs before submitting them.

35
00:01:29.001 --> 00:01:32.002
And I put a little snippet of code here that you could use.

36
00:01:32.002 --> 00:01:33.006
So what this says here

37
00:01:33.006 --> 00:01:35.000
is not,

38
00:01:35.000 --> 00:01:39.001
if the username variable matches some word with a star

39
00:01:39.001 --> 00:01:40.006
or,

40
00:01:40.006 --> 00:01:44.008
not password matches some word with a star.

41
00:01:44.008 --> 00:01:48.007
So in both cases * would return true you not it,

42
00:01:48.007 --> 00:01:51.000
which makes it or condition itself true.

43
00:01:51.000 --> 00:01:54.002
And you would get an illegal argument exception.

44
00:01:54.002 --> 00:01:56.001
In addition we could put some letter

45
00:01:56.001 --> 00:01:58.009
in than a star because we've included this word value.

46
00:01:58.009 --> 00:02:00.008
So really what we're doing is we're checking

47
00:02:00.008 --> 00:02:03.003
against all cases where * is present

48
00:02:03.003 --> 00:02:04.007
with or without a word.

49
00:02:04.007 --> 00:02:06.002
And if we get to that,

50
00:02:06.002 --> 00:02:07.003
we're going to to throw an exception

51
00:02:07.003 --> 00:02:09.002
before we submit the query.

52
00:02:09.002 --> 00:02:11.006
This is a pretty standard way of checking inputs

53
00:02:11.006 --> 00:02:15.007
in a Java application where the frameworks themselves

54
00:02:15.007 --> 00:02:18.003
don't have built in protection.

55
00:02:18.003 --> 00:02:21.006
XPath injection isn't the most common injection attack.

56
00:02:21.006 --> 00:02:23.007
However there still are a lot of people

57
00:02:23.007 --> 00:02:26.005
who use XSLT applications

58
00:02:26.005 --> 00:02:29.009
that have XML and XPath embedded in.

59
00:02:29.009 --> 00:02:32.002
And there are probably more than a few XML databases,

60
00:02:32.002 --> 00:02:34.006
still out there in the wild.

61
00:02:34.006 --> 00:02:35.004
Now,

62
00:02:35.004 --> 00:02:36.008
once again like all injection attacks,

63
00:02:36.008 --> 00:02:40.001
it's caused by a lack of sanitizing our input.

64
00:02:40.001 --> 00:02:40.009
However,

65
00:02:40.009 --> 00:02:43.006
it is much more similar to sequel injection remediation

66
00:02:43.006 --> 00:02:48.002
than just raw input validation like we saw with LDAB.

67
00:02:48.002 --> 00:02:52.002
Because most of the frameworks that do XPath allow

68
00:02:52.002 --> 00:02:54.008
you to set parameterized queries.

69
00:02:54.008 --> 00:02:57.003
Now these attacks can be dangerous and injecting

70
00:02:57.003 --> 00:02:59.001
and manipulating data.

71
00:02:59.001 --> 00:03:01.005
What's XSLT for instance?

72
00:03:01.005 --> 00:03:04.004
A lot of ETL operations still rely on XML,

73
00:03:04.004 --> 00:03:07.005
and use XPath to process the data.

74
00:03:07.005 --> 00:03:10.006
So you do need to be cognizant of what you're doing,

75
00:03:10.006 --> 00:03:13.008
if you're using XPath to protect yourself.

76
00:03:13.008 --> 00:03:15.009
A lot of times these are going to be internal applications,

77
00:03:15.009 --> 00:03:18.008
but as I've said before

78
00:03:18.008 --> 00:03:21.004
the internal users tend to be the most dangerous,

79
00:03:21.004 --> 00:03:23.005
especially if they're disgruntled.

80
00:03:23.005 --> 00:03:26.007
Now XPath libraries all differ quite a bit.

81
00:03:26.007 --> 00:03:28.007
So I'm not really going to show an example,

82
00:03:28.007 --> 00:03:32.005
because there's a good chance it won't match your library.

83
00:03:32.005 --> 00:03:35.008
But all of the good ones have one thing in common.

84
00:03:35.008 --> 00:03:38.003
And that is they have the ability to create a query

85
00:03:38.003 --> 00:03:41.005
and use parameterized inputs,

86
00:03:41.005 --> 00:03:43.004
just like we saw with SQL.

87
00:03:43.004 --> 00:03:45.009
So check the documentation of the XPath library

88
00:03:45.009 --> 00:03:47.000
that you're using

89
00:03:47.000 --> 00:03:49.001
and find a way to submit those queries,

90
00:03:49.001 --> 00:03:52.000
using parameterized inputs.

