WEBVTT
1
00:00:00.006 --> 00:00:03.000
- [Instructor] Extensibility is a core concept

2
00:00:03.000 --> 00:00:05.003
of object oriented programming languages.

3
00:00:05.003 --> 00:00:09.001
Inheritance and composition are critical to this style.

4
00:00:09.001 --> 00:00:12.007
However, sometimes that extensibility can allow you

5
00:00:12.007 --> 00:00:16.000
to expose yourself to security risks.

6
00:00:16.000 --> 00:00:19.007
When dealing with class and method extensibility in Java,

7
00:00:19.007 --> 00:00:21.008
you need to work within the guidelines

8
00:00:21.008 --> 00:00:23.005
of the language itself,

9
00:00:23.005 --> 00:00:27.003
and in doing so, you need to put some time into design.

10
00:00:27.003 --> 00:00:29.008
Designing of classes needs to take into account

11
00:00:29.008 --> 00:00:31.009
the Java inheritance model.

12
00:00:31.009 --> 00:00:33.007
You need to be cognizant of the effects

13
00:00:33.007 --> 00:00:35.000
of extending your class

14
00:00:35.000 --> 00:00:38.004
and what power that gives somebody, your consumer,

15
00:00:38.004 --> 00:00:40.006
or worse yet, a bad actor can leverage

16
00:00:40.006 --> 00:00:45.000
the ability to extend your class to use it to leak data,

17
00:00:45.000 --> 00:00:47.006
or impact the systems negatively.

18
00:00:47.006 --> 00:00:50.007
Better yet, when working with code that will be consumed,

19
00:00:50.007 --> 00:00:54.006
consider using final modifiers on the classes themselves.

20
00:00:54.006 --> 00:00:57.006
This will allow you to not only protect your classes

21
00:00:57.006 --> 00:00:59.008
as we have previously discussed,

22
00:00:59.008 --> 00:01:03.000
but also ensure that no one can circumvent your design

23
00:01:03.000 --> 00:01:05.005
by simply extending your class.

24
00:01:05.005 --> 00:01:08.002
Final classes, especially in public APIs,

25
00:01:08.002 --> 00:01:10.003
are a very good thing.

26
00:01:10.003 --> 00:01:13.009
Ultimately, you should favor composition to inheritance.

27
00:01:13.009 --> 00:01:17.006
While inheritance may be easier in many cases,

28
00:01:17.006 --> 00:01:21.001
composition is really a better model for both security

29
00:01:21.001 --> 00:01:23.009
and robustness of your application as a whole.

30
00:01:23.009 --> 00:01:27.005
Your contract will be set in stone and can be tested

31
00:01:27.005 --> 00:01:30.007
while your consumers can still use and access your code

32
00:01:30.007 --> 00:01:33.002
within the confines of that contract.

33
00:01:33.002 --> 00:01:36.009
You also need to understand how super classes work in Java.

34
00:01:36.009 --> 00:01:39.008
If you build a class with the best intentions,

35
00:01:39.008 --> 00:01:42.007
but you inherit from some other class

36
00:01:42.007 --> 00:01:46.003
that isn't as diligent, you may still be exposed.

37
00:01:46.003 --> 00:01:49.006
This is especially true when they modify their code.

38
00:01:49.006 --> 00:01:51.008
You can inherit from a class

39
00:01:51.008 --> 00:01:54.001
after checking it for correctness.

40
00:01:54.001 --> 00:01:56.009
They then can change the implementation

41
00:01:56.009 --> 00:01:59.001
while still adhering to the contract.

42
00:01:59.001 --> 00:02:01.003
Your code will still compile,

43
00:02:01.003 --> 00:02:03.009
but now will behave differently,

44
00:02:03.009 --> 00:02:07.009
all of which is ripe for security flaws within your system.

45
00:02:07.009 --> 00:02:11.008
Any time an attacker can get into an unexpected workflow,

46
00:02:11.008 --> 00:02:14.004
it increases their chances of finding

47
00:02:14.004 --> 00:02:18.003
a flaw in the system to leak data, gain access,

48
00:02:18.003 --> 00:02:22.000
or do some other bad activity within your system.

