WEBVTT
1
00:00:00.006 --> 00:00:01.006
- [Instructor] So now we're going to talk about one

2
00:00:01.006 --> 00:00:03.009
of the more painful areas of data leakage,

3
00:00:03.009 --> 00:00:06.002
and that is log messages.

4
00:00:06.002 --> 00:00:07.003
If you've been writing code

5
00:00:07.003 --> 00:00:09.004
for any amount of time professionally,

6
00:00:09.004 --> 00:00:12.002
you can see how this is a juxtaposition

7
00:00:12.002 --> 00:00:16.006
between security and progress, and that's a valid point.

8
00:00:16.006 --> 00:00:19.003
Log messages are an invaluable tool

9
00:00:19.003 --> 00:00:21.004
for the operations of a system.

10
00:00:21.004 --> 00:00:23.000
We need log messages.

11
00:00:23.000 --> 00:00:26.001
We need it to track user behavior in our systems,

12
00:00:26.001 --> 00:00:28.007
as well as troubleshoot issues.

13
00:00:28.007 --> 00:00:31.005
To make operational work more efficient,

14
00:00:31.005 --> 00:00:34.005
more information in our logs is better.

15
00:00:34.005 --> 00:00:36.005
Now, I'm not saying more log messages.

16
00:00:36.005 --> 00:00:39.002
I'm saying more verbose messaging.

17
00:00:39.002 --> 00:00:42.002
The more detail we put into a single message,

18
00:00:42.002 --> 00:00:43.009
the bigger picture we paint

19
00:00:43.009 --> 00:00:46.007
of what is going on at any given time.

20
00:00:46.007 --> 00:00:49.002
To add to this mix, we use log aggregations

21
00:00:49.002 --> 00:00:52.008
to consolidate all of our logs into one place.

22
00:00:52.008 --> 00:00:55.005
This gives us the ability to traverse the logs

23
00:00:55.005 --> 00:00:57.007
from multiple systems at once

24
00:00:57.007 --> 00:01:01.000
to add clarity to the picture we are painting.

25
00:01:01.000 --> 00:01:05.001
All of this yields a great operational stance,

26
00:01:05.001 --> 00:01:09.005
but it also creates a very high-value target.

27
00:01:09.005 --> 00:01:12.008
If there is any sensitive data in the log messages,

28
00:01:12.008 --> 00:01:16.007
that high-value target becomes even bigger target.

29
00:01:16.007 --> 00:01:19.005
The tool we use to keep our users happy

30
00:01:19.005 --> 00:01:23.001
with our systems can also be our demise.

31
00:01:23.001 --> 00:01:25.001
So what can we do?

32
00:01:25.001 --> 00:01:27.009
We need to continue to produce solid log data

33
00:01:27.009 --> 00:01:31.005
for all of our systems, but they are a risk.

34
00:01:31.005 --> 00:01:34.006
The answer is a plan of mitigation.

35
00:01:34.006 --> 00:01:37.009
First and foremost, don't log the data.

36
00:01:37.009 --> 00:01:41.003
If it's sensitive data and it really doesn't help,

37
00:01:41.003 --> 00:01:43.005
and you have to be super critical here,

38
00:01:43.005 --> 00:01:47.009
if it doesn't help operationally in our log messages,

39
00:01:47.009 --> 00:01:49.008
simply don't log it.

40
00:01:49.008 --> 00:01:55.001
Many times, this is sufficient, but it isn't always valid.

41
00:01:55.001 --> 00:01:57.005
Obfuscation is a valid strategy

42
00:01:57.005 --> 00:02:00.008
when the data is useful in our logs,

43
00:02:00.008 --> 00:02:03.004
but it still has to be protected.

44
00:02:03.004 --> 00:02:06.006
I've run a few SSO and customer management systems

45
00:02:06.006 --> 00:02:10.000
in my time for a couple different companies.

46
00:02:10.000 --> 00:02:14.004
And we need things like email address in our log messages.

47
00:02:14.004 --> 00:02:17.001
The only way to accomplish this is

48
00:02:17.001 --> 00:02:21.005
to obfuscate the data in a way that we can still find it,

49
00:02:21.005 --> 00:02:24.009
but if a bad actor does, it will be worthless.

50
00:02:24.009 --> 00:02:27.002
If the data needs to be in logs,

51
00:02:27.002 --> 00:02:29.006
but it doesn't need to be searchable,

52
00:02:29.006 --> 00:02:31.009
consider tokenizing the data.

53
00:02:31.009 --> 00:02:35.001
You can simply log a unique identifier for the data

54
00:02:35.001 --> 00:02:37.008
or build some tokenization strategy.

55
00:02:37.008 --> 00:02:40.001
This will allow you to still find the data

56
00:02:40.001 --> 00:02:42.007
in the logs through redirection.

57
00:02:42.007 --> 00:02:45.009
Of course, you can still search on this data,

58
00:02:45.009 --> 00:02:48.009
but it usually requires extra data look-ups

59
00:02:48.009 --> 00:02:52.001
that simple obfuscation can remove.

60
00:02:52.001 --> 00:02:54.000
Ultimately, the core answer here is

61
00:02:54.000 --> 00:02:56.008
to build strategies around log messages

62
00:02:56.008 --> 00:03:00.004
and ensure that your team follows those strategies

63
00:03:00.004 --> 00:03:04.003
through code reviews as well as routine validation

64
00:03:04.003 --> 00:03:06.009
of your log data itself.

65
00:03:06.009 --> 00:03:09.008
So I'm going to share with you an obfuscation strategy

66
00:03:09.008 --> 00:03:12.007
that I almost exclusively use

67
00:03:12.007 --> 00:03:15.007
when I need to log data that needs to be searchable.

68
00:03:15.007 --> 00:03:17.005
The strategy that I use is

69
00:03:17.005 --> 00:03:19.009
through the use of cryptographic hashing.

70
00:03:19.009 --> 00:03:23.001
By using a strong cryptographic algorithm,

71
00:03:23.001 --> 00:03:25.000
I get several benefits.

72
00:03:25.000 --> 00:03:27.002
First, it is one-way,

73
00:03:27.002 --> 00:03:30.008
meaning unless the hashing algorithm is compromised,

74
00:03:30.008 --> 00:03:34.003
the data cannot be identified in its raw form.

75
00:03:34.003 --> 00:03:36.008
It is also unique in the logs,

76
00:03:36.008 --> 00:03:42.000
so I am guaranteed a one-to-one mapping of data and hash.

77
00:03:42.000 --> 00:03:44.008
I then take that binary data and hex encode it.

78
00:03:44.008 --> 00:03:45.007
So I take the hash,

79
00:03:45.007 --> 00:03:48.001
and I run it through a hex encoding algorithm.

80
00:03:48.001 --> 00:03:51.003
This makes it a smaller and more manageable footprint

81
00:03:51.003 --> 00:03:52.008
in the log itself.

82
00:03:52.008 --> 00:03:56.007
Seeing a hex value of binary data is much easier on the eyes

83
00:03:56.007 --> 00:03:59.001
and on the length of the message itself.

84
00:03:59.001 --> 00:04:02.004
Finally, I leverage the uniqueness of the hash

85
00:04:02.004 --> 00:04:03.009
to search for the data.

86
00:04:03.009 --> 00:04:07.004
I know if user X has log-in issues, for instance,

87
00:04:07.004 --> 00:04:10.009
I can take his or her email address, hash it,

88
00:04:10.009 --> 00:04:14.001
hex encode it, and then search for that value

89
00:04:14.001 --> 00:04:18.000
to find the logs around that user's activity.

