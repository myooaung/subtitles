WEBVTT
1
00:00:00.007 --> 00:00:01.007
- [Instructor] Now, we've talked a little bit

2
00:00:01.007 --> 00:00:02.008
about this topic already,

3
00:00:02.008 --> 00:00:06.000
but I want to spend a bit more time talking about this

4
00:00:06.000 --> 00:00:08.004
because many security risks can be avoided

5
00:00:08.004 --> 00:00:10.006
by simple input validation.

6
00:00:10.006 --> 00:00:13.004
We're talking about a couple of different strategies.

7
00:00:13.004 --> 00:00:15.009
Now, there are a few general thoughts about validation

8
00:00:15.009 --> 00:00:18.004
that can be applied to Java applications.

9
00:00:18.004 --> 00:00:21.009
First and foremost, your validation logic in Java

10
00:00:21.009 --> 00:00:25.002
should be reusable if at all possible.

11
00:00:25.002 --> 00:00:28.000
Embedded input validation in each method

12
00:00:28.000 --> 00:00:32.004
is messy, repetitive, and quite frankly, error prone,

13
00:00:32.004 --> 00:00:34.006
so consolidating it and reusing it

14
00:00:34.006 --> 00:00:36.004
is definitely your best bet.

15
00:00:36.004 --> 00:00:38.007
In a similar vein, the validation logic

16
00:00:38.007 --> 00:00:41.001
should be clean and easy to read.

17
00:00:41.001 --> 00:00:43.004
Obviously, this is subjective,

18
00:00:43.004 --> 00:00:47.008
but validation must be understandable by your entire team.

19
00:00:47.008 --> 00:00:50.004
Part of the desire with validation logic,

20
00:00:50.004 --> 00:00:54.001
especially from a reusability perspective,

21
00:00:54.001 --> 00:00:56.009
is to have consistent error messages.

22
00:00:56.009 --> 00:00:59.003
Utilizing validation exceptions,

23
00:00:59.003 --> 00:01:01.009
and doing so in a consistent manner

24
00:01:01.009 --> 00:01:06.003
will make error handling and debugging significantly easier.

25
00:01:06.003 --> 00:01:09.004
Because concurrency is a feature of Java,

26
00:01:09.004 --> 00:01:12.003
you need to ensure that you write your validation logic

27
00:01:12.003 --> 00:01:13.007
to be thread safe.

28
00:01:13.007 --> 00:01:16.008
This means taking care with static variables,

29
00:01:16.008 --> 00:01:19.007
using constructs that are known to be thread safe,

30
00:01:19.007 --> 00:01:22.005
and if possible, keeping no state

31
00:01:22.005 --> 00:01:24.009
in your validation logic itself.

32
00:01:24.009 --> 00:01:27.004
And finally, if at all possible,

33
00:01:27.004 --> 00:01:32.008
make your input validation implicit, as opposed to explicit.

34
00:01:32.008 --> 00:01:34.005
The reason is pretty simple,

35
00:01:34.005 --> 00:01:37.009
you never have to worry about people using your robust logic

36
00:01:37.009 --> 00:01:41.000
that you just built if it's implicitly called,

37
00:01:41.000 --> 00:01:43.007
whereas if they have to explicitly do so,

38
00:01:43.007 --> 00:01:45.007
there's a chance that they'll forget.

39
00:01:45.007 --> 00:01:48.005
Java bean validation is one of the easiest ways

40
00:01:48.005 --> 00:01:51.002
to get started with validation logic.

41
00:01:51.002 --> 00:01:55.009
Bean validation is defined in JSR 303, 349,

42
00:01:55.009 --> 00:01:58.000
and then finally in 380,

43
00:01:58.000 --> 00:02:00.009
meaning that it is standards based.

44
00:02:00.009 --> 00:02:03.007
There is a huge advantage to using standards,

45
00:02:03.007 --> 00:02:07.001
especially those with high quality implementations,

46
00:02:07.001 --> 00:02:09.000
like bean validation.

47
00:02:09.000 --> 00:02:10.002
Now with bean validation,

48
00:02:10.002 --> 00:02:14.006
you get default validators like bin, max, no, not no,

49
00:02:14.006 --> 00:02:16.008
and pattern based validators.

50
00:02:16.008 --> 00:02:19.008
These give you a significant number of edge cases

51
00:02:19.008 --> 00:02:21.008
to validate against.

52
00:02:21.008 --> 00:02:26.000
In addition, the spec and subsequent implementations

53
00:02:26.000 --> 00:02:28.008
provide a way to build customized validators

54
00:02:28.008 --> 00:02:30.009
specific to your domain.

55
00:02:30.009 --> 00:02:34.006
Now, personally, I'm a big fan of annotations in Java

56
00:02:34.006 --> 00:02:37.009
and bean validation uses annotations.

57
00:02:37.009 --> 00:02:39.009
This provides you an easy,

58
00:02:39.009 --> 00:02:43.005
nearly implicit way of calling your validation logic

59
00:02:43.005 --> 00:02:45.001
throughout your code.

60
00:02:45.001 --> 00:02:47.000
And finally, it usually lives

61
00:02:47.000 --> 00:02:49.006
on your domain objects themselves.

62
00:02:49.006 --> 00:02:52.008
This means that the validation is close to the code

63
00:02:52.008 --> 00:02:54.005
it is being applied to.

64
00:02:54.005 --> 00:02:57.008
It can also be applied to your APIs themselves,

65
00:02:57.008 --> 00:03:02.007
giving you even more flexibility of contract validation.

66
00:03:02.007 --> 00:03:05.001
Now, if you don't want to use bean validation,

67
00:03:05.001 --> 00:03:08.004
you can definitely roll your own validation logic

68
00:03:08.004 --> 00:03:11.006
based on usually positive and negative checking.

69
00:03:11.006 --> 00:03:12.007
Now this has other names,

70
00:03:12.007 --> 00:03:15.008
but this is what I prefer to call this type of checking.

71
00:03:15.008 --> 00:03:19.005
You should always prefer positive checking when possible.

72
00:03:19.005 --> 00:03:22.004
Positive checking provides input validation

73
00:03:22.004 --> 00:03:25.000
on what is acceptable for the contract.

74
00:03:25.000 --> 00:03:28.002
This provides you a clean path to check against

75
00:03:28.002 --> 00:03:31.003
and allows you to control the input better.

76
00:03:31.003 --> 00:03:34.009
Negative checking is inflexible at best.

77
00:03:34.009 --> 00:03:39.009
It can offer many cases of false testing or false positives.

78
00:03:39.009 --> 00:03:43.001
Consider filtering on an apostrophe character,

79
00:03:43.001 --> 00:03:44.009
What happens when a name comes in

80
00:03:44.009 --> 00:03:47.008
with a valid apostrophe character in it?

81
00:03:47.008 --> 00:03:50.003
In addition, many times bad actors

82
00:03:50.003 --> 00:03:54.005
can circumvent these filters because they are so brittle.

83
00:03:54.005 --> 00:03:58.002
Now both of these cases usually rely on RegEx

84
00:03:58.002 --> 00:04:00.007
and that is off-putting to some developers,

85
00:04:00.007 --> 00:04:02.006
so keep that in mind.

86
00:04:02.006 --> 00:04:04.008
But in the end, whether you roll your own

87
00:04:04.008 --> 00:04:07.009
or use one of the standards based strategies,

88
00:04:07.009 --> 00:04:09.008
validation is an important feature

89
00:04:09.008 --> 00:04:13.000
to maintain in your toolkit.

