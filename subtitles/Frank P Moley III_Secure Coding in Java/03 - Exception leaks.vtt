WEBVTT
1
00:00:00.005 --> 00:00:01.008
- [Instructor] Nothing says, oops,

2
00:00:01.008 --> 00:00:04.006
like an exception message on a webpage.

3
00:00:04.006 --> 00:00:08.006
It just looks bad, but it's also very dangerous.

4
00:00:08.006 --> 00:00:12.008
Even more error handling can lead to sensitive data loss.

5
00:00:12.008 --> 00:00:14.005
And as such we need to handle

6
00:00:14.005 --> 00:00:17.000
all of these situations appropriately.

7
00:00:17.000 --> 00:00:19.007
Let's start with discussing our exception handling

8
00:00:19.007 --> 00:00:23.006
and the dangers that can arise from improperly doing so.

9
00:00:23.006 --> 00:00:26.007
First of all, leaking an exception to the user interface

10
00:00:26.007 --> 00:00:29.006
reveals detailed information about the system.

11
00:00:29.006 --> 00:00:34.002
You are immediately telling the user or worse a bad actor,

12
00:00:34.002 --> 00:00:36.009
a way to trigger an exception in your system.

13
00:00:36.009 --> 00:00:38.008
You are also giving them insights

14
00:00:38.008 --> 00:00:41.000
about your application as a whole.

15
00:00:41.000 --> 00:00:43.000
Now, bad actors can use this data

16
00:00:43.000 --> 00:00:46.000
especially a full stack trace to learn

17
00:00:46.000 --> 00:00:48.008
about the internal structure of your application.

18
00:00:48.008 --> 00:00:50.004
These stack traces, for instance,

19
00:00:50.004 --> 00:00:53.004
in the UI, lets them know the languages that play

20
00:00:53.004 --> 00:00:57.009
and the class structures and any additional components.

21
00:00:57.009 --> 00:01:00.003
And this is what brings us to the real danger.

22
00:01:00.003 --> 00:01:02.001
They can learn the internal components

23
00:01:02.001 --> 00:01:04.002
of your application as a whole.

24
00:01:04.002 --> 00:01:06.004
If you are using a dependency

25
00:01:06.004 --> 00:01:08.005
that has a known vulnerability,

26
00:01:08.005 --> 00:01:11.006
your stack trace may give them that insight.

27
00:01:11.006 --> 00:01:14.000
In addition, it gives them more data

28
00:01:14.000 --> 00:01:17.003
about what to try to use to attack your system,

29
00:01:17.003 --> 00:01:20.000
stack traces are another of those tools

30
00:01:20.000 --> 00:01:22.003
that are great for developers

31
00:01:22.003 --> 00:01:26.006
which in turn makes them great for malicious developers.

32
00:01:26.006 --> 00:01:28.004
So we get why exceptions are bad,

33
00:01:28.004 --> 00:01:31.005
but what about when we actually control the exceptions

34
00:01:31.005 --> 00:01:35.004
and use error messaging to indicate a bad state?

35
00:01:35.004 --> 00:01:39.004
Now these two can be right for sensitive data leakage.

36
00:01:39.004 --> 00:01:40.005
First of all,

37
00:01:40.005 --> 00:01:44.002
inconsistent messaging can be used to gain information

38
00:01:44.002 --> 00:01:45.006
about your system.

39
00:01:45.006 --> 00:01:49.005
If error messages for a similar case are different

40
00:01:49.005 --> 00:01:53.009
under different inputs, the bad actor can make assumptions

41
00:01:53.009 --> 00:01:56.000
about the underlying data.

42
00:01:56.000 --> 00:01:59.007
Mainly they can use this information to determine

43
00:01:59.007 --> 00:02:01.008
if information is present.

44
00:02:01.008 --> 00:02:05.001
Consider the case of a reset password page.

45
00:02:05.001 --> 00:02:08.000
If you ask your users to provide an email address,

46
00:02:08.000 --> 00:02:10.007
to send a password reset link

47
00:02:10.007 --> 00:02:12.009
which is a great practice by the way,

48
00:02:12.009 --> 00:02:14.009
you may think that you're safe,

49
00:02:14.009 --> 00:02:18.004
but how you respond when the user exists

50
00:02:18.004 --> 00:02:22.008
versus when they don't immediately lets your attacker know

51
00:02:22.008 --> 00:02:24.009
if that person is in your system.

52
00:02:24.009 --> 00:02:28.007
If your messaging in both cases isn't the same,

53
00:02:28.007 --> 00:02:31.001
well, bad actors are smart

54
00:02:31.001 --> 00:02:33.007
and they know how to read these messages.

55
00:02:33.007 --> 00:02:37.006
This will amount to you leaking sensitive data by proxy,

56
00:02:37.006 --> 00:02:40.006
a bad actor can collect information about users

57
00:02:40.006 --> 00:02:43.001
and structure through these messages

58
00:02:43.001 --> 00:02:44.008
and use it to their advantage.

59
00:02:44.008 --> 00:02:48.008
They can brute force a user or file system to gain access.

60
00:02:48.008 --> 00:02:49.009
In the user case,

61
00:02:49.009 --> 00:02:52.007
they can impersonate your site through phishing attacks

62
00:02:52.007 --> 00:02:56.001
and collect information about your users by proxy.

63
00:02:56.001 --> 00:02:58.007
Again, there is so much possible here

64
00:02:58.007 --> 00:03:01.007
because a dedicated bad actor only needs

65
00:03:01.007 --> 00:03:04.009
a touch of information to do malicious things.

66
00:03:04.009 --> 00:03:09.005
Any motivation to attack your system becomes enough.

67
00:03:09.005 --> 00:03:11.008
So how do we mitigate these sensitive data leaks

68
00:03:11.008 --> 00:03:14.001
caused by errors and exceptions?

69
00:03:14.001 --> 00:03:15.004
Let me start by saying,

70
00:03:15.004 --> 00:03:19.004
even the best laid plans can still be compromised.

71
00:03:19.004 --> 00:03:21.003
There just isn't a good way to say

72
00:03:21.003 --> 00:03:23.002
that your system is hacker proof

73
00:03:23.002 --> 00:03:26.002
and anyone who does say that is a fool

74
00:03:26.002 --> 00:03:28.004
and just asking to get attacked.

75
00:03:28.004 --> 00:03:31.008
So first consider exception handling,

76
00:03:31.008 --> 00:03:33.008
you should never allow an exception

77
00:03:33.008 --> 00:03:35.007
to bubble up to your users,

78
00:03:35.007 --> 00:03:38.005
trap everything through common mechanisms

79
00:03:38.005 --> 00:03:40.008
and use standardized controls.

80
00:03:40.008 --> 00:03:44.004
It is better that you simply return a 500 status code

81
00:03:44.004 --> 00:03:47.006
to your user than an exception message.

82
00:03:47.006 --> 00:03:50.003
Ideally, you control even the 500s

83
00:03:50.003 --> 00:03:53.008
and push them into an error flow that you control.

84
00:03:53.008 --> 00:03:58.006
But as long as the exception itself isn't leaked,

85
00:03:58.006 --> 00:04:01.002
you are hiding the real cause.

86
00:04:01.002 --> 00:04:05.000
Secondly, use consistent error messages.

87
00:04:05.000 --> 00:04:06.006
Don't have different messages

88
00:04:06.006 --> 00:04:08.009
for different states of an error.

89
00:04:08.009 --> 00:04:12.004
You can use common messaging across the board

90
00:04:12.004 --> 00:04:15.001
and let your users make the determination

91
00:04:15.001 --> 00:04:16.008
of what that means.

92
00:04:16.008 --> 00:04:20.001
Back to the password reset, if you simply say

93
00:04:20.001 --> 00:04:22.002
that you're resetting the password

94
00:04:22.002 --> 00:04:23.009
and you will send them a link

95
00:04:23.009 --> 00:04:26.001
that doesn't really tell a user,

96
00:04:26.001 --> 00:04:28.001
whether they're in the system or not,

97
00:04:28.001 --> 00:04:30.007
but when they get the email, they will know.

98
00:04:30.007 --> 00:04:34.009
So an attacker has no clue, but the user themselves does

99
00:04:34.009 --> 00:04:37.000
kind of tangential to this concept,

100
00:04:37.000 --> 00:04:38.008
but something I wanted to mention

101
00:04:38.008 --> 00:04:41.005
is the thought of deny first.

102
00:04:41.005 --> 00:04:43.009
Many times when dealing with security,

103
00:04:43.009 --> 00:04:45.004
we have a permissive policy

104
00:04:45.004 --> 00:04:48.004
and permissive policies can be very bad.

105
00:04:48.004 --> 00:04:51.003
We should always deny first and never trust

106
00:04:51.003 --> 00:04:54.007
that the user has access to any resource on the system

107
00:04:54.007 --> 00:04:58.001
until we can prove they have access.

108
00:04:58.001 --> 00:05:00.009
And then and only then do we grant it.

109
00:05:00.009 --> 00:05:03.004
So it's really looking at the problem in a different way

110
00:05:03.004 --> 00:05:07.009
instead of saying, if not restricted, give them access.

111
00:05:07.009 --> 00:05:12.001
It's saying if restricted, don't give them access,

112
00:05:12.001 --> 00:05:14.003
if not restricted, give them access.

113
00:05:14.003 --> 00:05:17.006
So it's really looking at it from a denial first

114
00:05:17.006 --> 00:05:19.008
and while that's not really exception related,

115
00:05:19.008 --> 00:05:24.000
a lot of exceptions are generated by poor security.

