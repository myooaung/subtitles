WEBVTT
1
00:00:00.005 --> 00:00:01.008
- [Instructor] When writing Java code,

2
00:00:01.008 --> 00:00:05.006
it is often simple to just create getters and setters

3
00:00:05.006 --> 00:00:07.007
for all of your data elements.

4
00:00:07.007 --> 00:00:10.009
It's a bad habit from Java (mumbles)

5
00:00:10.009 --> 00:00:14.001
that has taken hold of many other areas.

6
00:00:14.001 --> 00:00:14.009
We'll spend a little bit

7
00:00:14.009 --> 00:00:19.000
of time talking about mutability of our data.

8
00:00:19.000 --> 00:00:21.006
I will warn you, this is a little bit of a soap box for me,

9
00:00:21.006 --> 00:00:24.003
because this is something I'm very passionate about

10
00:00:24.003 --> 00:00:27.006
across the way we write applications in web

11
00:00:27.006 --> 00:00:30.008
as well as desktop and backend processing.

12
00:00:30.008 --> 00:00:34.006
Making classes immutable is not an easy task.

13
00:00:34.006 --> 00:00:36.002
If you're writing libraries

14
00:00:36.002 --> 00:00:38.000
and need to protect your consumers

15
00:00:38.000 --> 00:00:41.000
and ultimately protect their users,

16
00:00:41.000 --> 00:00:44.000
you need to take immutability seriously.

17
00:00:44.000 --> 00:00:47.003
In addition, if you're integrating with other systems,

18
00:00:47.003 --> 00:00:51.004
immutability should be a primary concern.

19
00:00:51.004 --> 00:00:55.000
First and foremost, you need to treat all class attributes

20
00:00:55.000 --> 00:00:57.004
as final when possible.

21
00:00:57.004 --> 00:01:01.002
This applies primarily on data transfer objects,

22
00:01:01.002 --> 00:01:02.009
but even your worker objects

23
00:01:02.009 --> 00:01:05.000
that maintain some form of state

24
00:01:05.000 --> 00:01:08.005
should maintain immutability on that state where it can,

25
00:01:08.005 --> 00:01:11.007
final is the best way to handle this.

26
00:01:11.007 --> 00:01:14.005
Of course, this requires constructors

27
00:01:14.005 --> 00:01:18.005
that accept all of the stated object construction time.

28
00:01:18.005 --> 00:01:22.001
Oftentimes, data is dangerous in its own right.

29
00:01:22.001 --> 00:01:23.008
A better option in my opinion

30
00:01:23.008 --> 00:01:25.008
is to leverage private constructors

31
00:01:25.008 --> 00:01:28.001
with static builder methods.

32
00:01:28.001 --> 00:01:30.003
These builders can build the class

33
00:01:30.003 --> 00:01:34.004
using all of the other constraints that we will discuss.

34
00:01:34.004 --> 00:01:38.001
If output is a live object from your state,

35
00:01:38.001 --> 00:01:41.002
you should clone it prior to returning it.

36
00:01:41.002 --> 00:01:45.000
This deep copy will ensure that your internal state

37
00:01:45.000 --> 00:01:48.000
cannot be modified by reference

38
00:01:48.000 --> 00:01:50.001
outside your immutable walls.

39
00:01:50.001 --> 00:01:54.007
In a similar vein, your inputs can also be live objects.

40
00:01:54.007 --> 00:01:58.009
As such, you should copy the inputs to a new object

41
00:01:58.009 --> 00:02:01.003
before you start working on it.

42
00:02:01.003 --> 00:02:04.005
A true deep copy will ensure you are

43
00:02:04.005 --> 00:02:09.000
no longer referencing memory that others can manipulate.

44
00:02:09.000 --> 00:02:11.005
To make your consumer's life easier,

45
00:02:11.005 --> 00:02:14.000
you should create a safe copy functionality

46
00:02:14.000 --> 00:02:17.001
for all of your classes that they will consume

47
00:02:17.001 --> 00:02:20.004
so that they can maintain your immutable pose.

48
00:02:20.004 --> 00:02:23.003
Another key takeaway should be at this point

49
00:02:23.003 --> 00:02:26.007
to not trust anything you don't control.

50
00:02:26.007 --> 00:02:28.006
This includes equality,

51
00:02:28.006 --> 00:02:32.004
equality can be easily overwritten in Java.

52
00:02:32.004 --> 00:02:34.007
As such, if you are basing decisions

53
00:02:34.007 --> 00:02:38.008
especially state decisions on equality,

54
00:02:38.008 --> 00:02:42.003
you need to write the equality routine that you will use

55
00:02:42.003 --> 00:02:46.000
and not rely on someone else's.equals method.

56
00:02:46.000 --> 00:02:50.008
Finally, consider common wrappers for all state change.

57
00:02:50.008 --> 00:02:53.000
Obviously purely immutable objects

58
00:02:53.000 --> 00:02:55.005
have limited value in a system.

59
00:02:55.005 --> 00:02:59.008
There's usually a need to modify some state at sometime

60
00:02:59.008 --> 00:03:01.004
by using wrapper methods,

61
00:03:01.004 --> 00:03:04.008
you can more robustly control the state change

62
00:03:04.008 --> 00:03:08.000
even if you don't go to full immutability,

63
00:03:08.000 --> 00:03:10.007
your setter methods should have some kind

64
00:03:10.007 --> 00:03:14.000
of input validation and production code.

65
00:03:14.000 --> 00:03:16.007
Role setters are dangerous.

66
00:03:16.007 --> 00:03:21.004
So honestly, why go through the trouble of immutability?

67
00:03:21.004 --> 00:03:24.000
You can simply prevent data issues.

68
00:03:24.000 --> 00:03:26.005
Mutable data can be modified by its very nature

69
00:03:26.005 --> 00:03:30.007
after to serve to or from a method, as such,

70
00:03:30.007 --> 00:03:35.000
you can put in the best input validation in the world,

71
00:03:35.000 --> 00:03:36.008
but if the object is mutable

72
00:03:36.008 --> 00:03:39.008
and you don't protect against it, you can have bad data

73
00:03:39.008 --> 00:03:42.003
by the time you act on it.

74
00:03:42.003 --> 00:03:45.007
Ultimately you're controlling all paths of code,

75
00:03:45.007 --> 00:03:49.002
you can trace every change and why it happened.

76
00:03:49.002 --> 00:03:52.006
You can control the inputs and outputs in a way

77
00:03:52.006 --> 00:03:55.008
that will give you a guaranteed contract.

78
00:03:55.008 --> 00:03:59.004
This allows you to command expected results,

79
00:03:59.004 --> 00:04:01.008
you can prevent yourself and your consumers

80
00:04:01.008 --> 00:04:05.002
from having to handle unexpected edge cases

81
00:04:05.002 --> 00:04:07.000
because you control the path.

82
00:04:07.000 --> 00:04:09.003
You can guard against the contract

83
00:04:09.003 --> 00:04:12.000
and not have to deal with unexpected changes

84
00:04:12.000 --> 00:04:15.007
and ultimately, this is what bad actors are looking for.

85
00:04:15.007 --> 00:04:17.006
Ways to exploit your system

86
00:04:17.006 --> 00:04:21.002
in a way that you don't handle and didn't expect.

87
00:04:21.002 --> 00:04:23.004
Now for these reasons,

88
00:04:23.004 --> 00:04:26.000
immutable objects are not just security related.

89
00:04:26.000 --> 00:04:28.004
You can control a lot of bugs in your code

90
00:04:28.004 --> 00:04:31.001
by using robust input and output controls.

91
00:04:31.001 --> 00:04:35.002
Immutability is ultimately all about the level of control

92
00:04:35.002 --> 00:04:39.000
that you maintain in your application runtime.

