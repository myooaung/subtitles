WEBVTT
1
00:00:00.003 --> 00:00:06.005
(upbeat music)

2
00:00:06.005 --> 00:00:10.000
- So now I will present my solution to this challenge.

3
00:00:10.000 --> 00:00:11.007
Now there definitely were a couple of ways

4
00:00:11.007 --> 00:00:13.003
to solve this one.

5
00:00:13.003 --> 00:00:16.000
You could have simply not admitted the email address

6
00:00:16.000 --> 00:00:19.006
and the to toSring method of the president object.

7
00:00:19.006 --> 00:00:21.006
You could have tokenized that data.

8
00:00:21.006 --> 00:00:22.009
Now the solution that I picked,

9
00:00:22.009 --> 00:00:24.002
and the one that I will show you

10
00:00:24.002 --> 00:00:27.002
is what I usually do with email addresses

11
00:00:27.002 --> 00:00:30.003
and other unique identifiers that I need in my logs.

12
00:00:30.003 --> 00:00:33.005
And it's a great pattern to have in your toolkit.

13
00:00:33.005 --> 00:00:35.008
Okay, so the first thing that I'm want to do here

14
00:00:35.008 --> 00:00:40.000
is I'm want to run the test before I put in my fix.

15
00:00:40.000 --> 00:00:44.007
So as I run the test, and bring up the console,

16
00:00:44.007 --> 00:00:49.002
you'll see, that we're logging out the email address,

17
00:00:49.002 --> 00:00:50.003
in our query.

18
00:00:50.003 --> 00:00:52.004
So we return data, and in that data,

19
00:00:52.004 --> 00:00:55.006
we logged out the email address.

20
00:00:55.006 --> 00:00:59.004
Now, if you take a look at the DAO method,

21
00:00:59.004 --> 00:01:01.008
again, this is before you started the challenge.

22
00:01:01.008 --> 00:01:05.005
But if you look, and we scroll down, you will see

23
00:01:05.005 --> 00:01:07.003
in the process result set,

24
00:01:07.003 --> 00:01:09.006
I'm simply resolving the president

25
00:01:09.006 --> 00:01:11.008
and outputting that object,

26
00:01:11.008 --> 00:01:13.002
which is going to in turn,

27
00:01:13.002 --> 00:01:16.004
call the toString method on the president.

28
00:01:16.004 --> 00:01:18.004
So when I come down here to the toString

29
00:01:18.004 --> 00:01:19.005
on my president object,

30
00:01:19.005 --> 00:01:22.002
you'll see that I'm simply in my string builder

31
00:01:22.002 --> 00:01:24.008
appending the email address value.

32
00:01:24.008 --> 00:01:26.005
And that's where we get into trouble.

33
00:01:26.005 --> 00:01:29.005
And this is part of the problem of toStrings in general,

34
00:01:29.005 --> 00:01:32.002
when you auto generate them.

35
00:01:32.002 --> 00:01:36.006
So let's take a look at the solution, that I put in play.

36
00:01:36.006 --> 00:01:39.002
So I didn't change anything in the presidentDAO.

37
00:01:39.002 --> 00:01:41.007
I'm still resolving my president,

38
00:01:41.007 --> 00:01:43.003
in line 48.

39
00:01:43.003 --> 00:01:46.008
I'm still printing that log message, just the exact same.

40
00:01:46.008 --> 00:01:50.003
What I did change, however, here on line 71,

41
00:01:50.003 --> 00:01:54.007
is I created an obfuscation utility to obfuscate the data.

42
00:01:54.007 --> 00:01:57.005
So let's take a look at that method.

43
00:01:57.005 --> 00:02:01.003
Now what that method does, is it takes in a string,

44
00:02:01.003 --> 00:02:04.007
and that string data then runs through a message digest,

45
00:02:04.007 --> 00:02:08.000
and I'm using a SHA-256/.

46
00:02:08.000 --> 00:02:12.002
That's a cryptographically secure hashing algorithm today.

47
00:02:12.002 --> 00:02:14.003
Obviously, all hashing algorithms

48
00:02:14.003 --> 00:02:16.000
can be cracked at some point.

49
00:02:16.000 --> 00:02:18.000
But as of today, this is considered

50
00:02:18.000 --> 00:02:21.003
a cryptographically secure hashing algorithm.

51
00:02:21.003 --> 00:02:24.006
Now on line 16, I run the digest.

52
00:02:24.006 --> 00:02:27.004
So I give them encoded hash, and this is a byte array.

53
00:02:27.004 --> 00:02:29.001
So it's binary data.

54
00:02:29.001 --> 00:02:33.008
On line 17, I then use a tool from Apache Commons,

55
00:02:33.008 --> 00:02:37.007
in their binary codec called encodehex.

56
00:02:37.007 --> 00:02:41.006
So I encode that data that hash data, that binary data,

57
00:02:41.006 --> 00:02:44.009
I encode it into a hex string.

58
00:02:44.009 --> 00:02:48.004
So now when I run that same test,

59
00:02:48.004 --> 00:02:52.005
but after the code fix,

60
00:02:52.005 --> 00:02:56.000
you'll see that my log data still prints out the president,

61
00:02:56.000 --> 00:02:58.004
but instead of an email address,

62
00:02:58.004 --> 00:03:02.003
it prints out a hexencoded binary representation

63
00:03:02.003 --> 00:03:03.008
of the hash.

64
00:03:03.008 --> 00:03:05.005
So how does that work?

65
00:03:05.005 --> 00:03:08.007
Notice that this hash starts with e8a9.

66
00:03:08.007 --> 00:03:13.005
If I run this test again,

67
00:03:13.005 --> 00:03:15.007
I get the same exact hash value.

68
00:03:15.007 --> 00:03:19.007
As a matter of fact, no matter how I run SHA-256,

69
00:03:19.007 --> 00:03:21.000
either within this test,

70
00:03:21.000 --> 00:03:23.003
out of band through some other utility,

71
00:03:23.003 --> 00:03:26.003
I'm always going to get the same hex value.

72
00:03:26.003 --> 00:03:29.000
So now in my log aggregation system,

73
00:03:29.000 --> 00:03:32.005
like (indistinct), or any of them,

74
00:03:32.005 --> 00:03:37.000
I can search for this hexencoded binary value

75
00:03:37.000 --> 00:03:39.000
that represents the email address.

76
00:03:39.000 --> 00:03:41.003
And know that anytime I get it,

77
00:03:41.003 --> 00:03:42.009
I've got this record.

78
00:03:42.009 --> 00:03:46.006
That's a really powerful tool, to have in your toolkit

79
00:03:46.006 --> 00:03:48.005
when dealing with log messages

80
00:03:48.005 --> 00:03:52.000
and preventing data loss through them.

