WEBVTT
1
00:00:00.006 --> 00:00:03.004
- We have a few additional topics to discuss,

2
00:00:03.004 --> 00:00:06.000
the first of which is going to be our build system.

3
00:00:06.000 --> 00:00:09.005
This is the last location that many developers have control

4
00:00:09.005 --> 00:00:12.004
of where security issues can be injected

5
00:00:12.004 --> 00:00:14.000
into an application.

6
00:00:14.000 --> 00:00:17.008
The build process itself has several areas we can focus

7
00:00:17.008 --> 00:00:19.003
on as developers.

8
00:00:19.003 --> 00:00:22.003
First and foremost is the dependencies being used

9
00:00:22.003 --> 00:00:23.005
for application.

10
00:00:23.005 --> 00:00:26.006
Now we can write the most secure code in the world,

11
00:00:26.006 --> 00:00:30.004
any vulnerable dependency can spoil the entire party.

12
00:00:30.004 --> 00:00:35.001
mitigating this risk is actually a two phase process.

13
00:00:35.001 --> 00:00:39.004
First, you should run a dependency checking plugin,

14
00:00:39.004 --> 00:00:43.003
and process that uses a database to evaluate

15
00:00:43.003 --> 00:00:46.009
if there are known CVE's in a given dependency.

16
00:00:46.009 --> 00:00:50.004
Or worse, for instance, produces one such plugin for free,

17
00:00:50.004 --> 00:00:52.003
though there may be better ones out there

18
00:00:52.003 --> 00:00:54.000
that you may have to pay for.

19
00:00:54.000 --> 00:00:56.001
Now, the second part of this process is

20
00:00:56.001 --> 00:01:00.006
to actually fix what the data comes up with.

21
00:01:00.006 --> 00:01:03.005
So if it tells you that you have a dependency

22
00:01:03.005 --> 00:01:06.004
that has a CVE, and you ignore it,

23
00:01:06.004 --> 00:01:08.006
you might as well not even run the plugin,

24
00:01:08.006 --> 00:01:11.005
what you should do is actually address

25
00:01:11.005 --> 00:01:13.002
the build system failure.

26
00:01:13.002 --> 00:01:15.000
Now, there is a caveat to that.

27
00:01:15.000 --> 00:01:17.007
And that is when a new version isn't available

28
00:01:17.007 --> 00:01:18.009
of the dependency.

29
00:01:18.009 --> 00:01:21.002
And in those cases, you need to ensure

30
00:01:21.002 --> 00:01:25.004
that you're not subject to the vulnerability itself.

31
00:01:25.004 --> 00:01:28.007
And if you are, you need to find other ways to mitigate it.

32
00:01:28.007 --> 00:01:31.003
Now, the next build system vulnerability may not be

33
00:01:31.003 --> 00:01:33.008
as obvious you need to run Java

34
00:01:33.008 --> 00:01:38.000
to compile Java should be pretty straightforward.

35
00:01:38.000 --> 00:01:40.003
But often times, companies won't keep

36
00:01:40.003 --> 00:01:44.001
the build system Java version updated, like they do

37
00:01:44.001 --> 00:01:47.006
with production systems because of licensing costs.

38
00:01:47.006 --> 00:01:50.008
Now, it's worth noting that you should target

39
00:01:50.008 --> 00:01:53.007
the same version that you run in production.

40
00:01:53.007 --> 00:01:56.004
And that should be supported and patched version

41
00:01:56.004 --> 00:01:58.002
of Java itself.

42
00:01:58.002 --> 00:02:00.001
And this is critical, keep it updated,

43
00:02:00.001 --> 00:02:01.006
and keep it consistent.

44
00:02:01.006 --> 00:02:05.000
And then target that when you're doing your builds.

45
00:02:05.000 --> 00:02:07.002
Now the next build system check that I want to talk

46
00:02:07.002 --> 00:02:09.001
about is one that we've talked about before

47
00:02:09.001 --> 00:02:10.006
and that's testing.

48
00:02:10.006 --> 00:02:11.008
During the build process.

49
00:02:11.008 --> 00:02:14.007
Of course, you should be running unit tests.

50
00:02:14.007 --> 00:02:18.005
Your unit test should either include or be adjacent

51
00:02:18.005 --> 00:02:21.009
to security focused testing, each part

52
00:02:21.009 --> 00:02:24.001
of your application or library

53
00:02:24.001 --> 00:02:27.005
that has a possible attack vector should test

54
00:02:27.005 --> 00:02:29.003
those attack vectors.

55
00:02:29.003 --> 00:02:33.002
Now we saw this with our SQL injection exercise.

56
00:02:33.002 --> 00:02:37.008
Finally, I asked you to consider using static code analysis.

57
00:02:37.008 --> 00:02:41.001
Now these processes scan your code and actually look

58
00:02:41.001 --> 00:02:44.004
for patterns that lead to security flaws.

59
00:02:44.004 --> 00:02:47.002
There are both commercial and open source offerings

60
00:02:47.002 --> 00:02:50.003
in this space, and I've used them both.

61
00:02:50.003 --> 00:02:53.005
And while the commercial are definitely much more robust

62
00:02:53.005 --> 00:02:57.003
with respect to reporting and remediation tips,

63
00:02:57.003 --> 00:03:00.002
they both are usually adequate for someone just starting out

64
00:03:00.002 --> 00:03:01.009
with code security.

65
00:03:01.009 --> 00:03:04.007
Be prepared, however, because you will have

66
00:03:04.007 --> 00:03:06.009
to wade through false positives,

67
00:03:06.009 --> 00:03:09.007
as well as risks you deem acceptable,

68
00:03:09.007 --> 00:03:13.000
when you look at static code analysis.

