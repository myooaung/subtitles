WEBVTT
1
00:00:00.007 --> 00:00:05.002
- Serialization is a much criticized feature of Java,

2
00:00:05.002 --> 00:00:07.004
mainly because it's attack prone.

3
00:00:07.004 --> 00:00:09.000
Let's finish up this course,

4
00:00:09.000 --> 00:00:12.005
talking a bit about serialization in Java

5
00:00:12.005 --> 00:00:14.007
and ways to mitigate the risk.

6
00:00:14.007 --> 00:00:17.004
First of all we need to talk about, what is it?

7
00:00:17.004 --> 00:00:21.001
Serialization is a mechanism for class data access

8
00:00:21.001 --> 00:00:24.003
as well as construction that lies outside

9
00:00:24.003 --> 00:00:26.000
our normal getters and setters,

10
00:00:26.000 --> 00:00:28.009
as well as our normal construction routines.

11
00:00:28.009 --> 00:00:33.000
It bypasses all field level access controls.

12
00:00:33.000 --> 00:00:36.002
And this is by design because usually we don't want those

13
00:00:36.002 --> 00:00:40.000
to get in the way when we're de-serializing data

14
00:00:40.000 --> 00:00:41.006
as it's coming in.

15
00:00:41.006 --> 00:00:43.007
Now, the bad part about this is that

16
00:00:43.007 --> 00:00:47.000
because we're bypassing access controls,

17
00:00:47.000 --> 00:00:49.004
input can be injected maliciously

18
00:00:49.004 --> 00:00:52.002
into our serialized data classes.

19
00:00:52.002 --> 00:00:53.006
The bad part about all of this

20
00:00:53.006 --> 00:00:56.004
is that we can't actually avoid serialization

21
00:00:56.004 --> 00:00:58.005
in most applications.

22
00:00:58.005 --> 00:01:00.003
Many web applications, for instance,

23
00:01:00.003 --> 00:01:03.005
required de-serialization as the data comes in,

24
00:01:03.005 --> 00:01:06.002
and serialization as the data comes out.

25
00:01:06.002 --> 00:01:09.003
So we can't really avoid it, even though we may like to,

26
00:01:09.003 --> 00:01:12.000
from a security perspective.

27
00:01:12.000 --> 00:01:15.006
Now, mitigation of serialized data risks

28
00:01:15.006 --> 00:01:19.001
really is a multi-step and a multi-variate process.

29
00:01:19.001 --> 00:01:20.007
First and foremost,

30
00:01:20.007 --> 00:01:23.008
don't serialize sensitive classes.

31
00:01:23.008 --> 00:01:26.005
Don't even allow them to be considered available

32
00:01:26.005 --> 00:01:29.002
for serialization across your enterprise.

33
00:01:29.002 --> 00:01:31.005
You can use things like code comments and such

34
00:01:31.005 --> 00:01:33.007
to make sure that no one serializes them

35
00:01:33.007 --> 00:01:35.000
in the future.

36
00:01:35.000 --> 00:01:38.008
In addition, if your class contains sensitive data,

37
00:01:38.008 --> 00:01:41.005
but you need the class to be serialized,

38
00:01:41.005 --> 00:01:43.003
you need to guard that sensitive data

39
00:01:43.003 --> 00:01:45.007
to make sure that it is not leaked

40
00:01:45.007 --> 00:01:49.000
or worse yet maliciously injected.

41
00:01:49.000 --> 00:01:50.004
Really the strategy here is

42
00:01:50.004 --> 00:01:53.008
to treat de-serialization as object construction.

43
00:01:53.008 --> 00:01:55.006
So if you go back to what we talked about

44
00:01:55.006 --> 00:01:58.009
about good object construction practices,

45
00:01:58.009 --> 00:02:01.006
you'll remember that we talked about cloning objects

46
00:02:01.006 --> 00:02:04.002
as they come in and treating them as immutable.

47
00:02:04.002 --> 00:02:06.008
And these are things that you really should do

48
00:02:06.008 --> 00:02:09.004
when you de-serialize an object

49
00:02:09.004 --> 00:02:11.007
in that construction routine.

50
00:02:11.007 --> 00:02:15.008
This will help guard against remote sources changing data,

51
00:02:15.008 --> 00:02:18.007
as you're de-serializing it into your interface.

52
00:02:18.007 --> 00:02:21.007
If possible, use the built-in security manager,

53
00:02:21.007 --> 00:02:24.002
when dealing with serialized data.

54
00:02:24.002 --> 00:02:27.000
This just gives you an added layer of protection,

55
00:02:27.000 --> 00:02:28.008
but it's one that many Java developers

56
00:02:28.008 --> 00:02:31.001
don't even understand exists.

57
00:02:31.001 --> 00:02:34.006
I encourage you, if you are dealing with serialization

58
00:02:34.006 --> 00:02:37.005
to look at security manager and see how easy it is

59
00:02:37.005 --> 00:02:39.008
to add into your methods.

60
00:02:39.008 --> 00:02:43.005
And finally at this point really should be unsaid,

61
00:02:43.005 --> 00:02:45.002
but we need to say it anyway

62
00:02:45.002 --> 00:02:48.001
is we need you to filter un-trusted data.

63
00:02:48.001 --> 00:02:51.002
And since you can't ever trust data that is input

64
00:02:51.002 --> 00:02:54.002
into your system from an external source,

65
00:02:54.002 --> 00:02:56.000
you really should be filtering all data.

66
00:02:56.000 --> 00:02:58.006
And this goes back to input validation,

67
00:02:58.006 --> 00:03:01.009
as well as using immutable objects practices

68
00:03:01.009 --> 00:03:04.000
to keep your system safe.

