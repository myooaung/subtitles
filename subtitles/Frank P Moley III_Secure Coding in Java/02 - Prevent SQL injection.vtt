WEBVTT
1
00:00:00.005 --> 00:00:02.009
- We're going to spend a considerable amount of time,

2
00:00:02.009 --> 00:00:05.001
talking about SQL injection,

3
00:00:05.001 --> 00:00:06.003
and how to prevent it.

4
00:00:06.003 --> 00:00:07.004
This attack vector,

5
00:00:07.004 --> 00:00:10.009
continues to be a major issue across the industry,

6
00:00:10.009 --> 00:00:14.006
but it's rather easily mitigated especially in Java.

7
00:00:14.006 --> 00:00:17.000
The situation that causes SQL injection,

8
00:00:17.000 --> 00:00:18.004
is very straightforward.

9
00:00:18.004 --> 00:00:20.005
You start with the SQL statement,

10
00:00:20.005 --> 00:00:22.009
that accepts at least one variable.

11
00:00:22.009 --> 00:00:25.003
This can be as simple WHERE clause variable,

12
00:00:25.003 --> 00:00:28.001
or a VALUES clause variable for instance.

13
00:00:28.001 --> 00:00:31.006
The SQL statement, when created in code,

14
00:00:31.006 --> 00:00:35.005
must leverage string concatenation or formatting,

15
00:00:35.005 --> 00:00:39.007
to insert the input into the SQL statement.

16
00:00:39.007 --> 00:00:42.008
Malicious input can then be entered,

17
00:00:42.008 --> 00:00:47.003
into the system which repurposed the SQL statement itself.

18
00:00:47.003 --> 00:00:50.005
The simplest example on a string variable,

19
00:00:50.005 --> 00:00:54.000
is to add an OR clause to your input,

20
00:00:54.000 --> 00:00:57.001
and then a statement that will always return true.

21
00:00:57.001 --> 00:01:00.000
This will return all data from the table,

22
00:01:00.000 --> 00:01:02.004
in an injectable code path,

23
00:01:02.004 --> 00:01:05.006
based on the other where clauses that are available.

24
00:01:05.006 --> 00:01:07.008
So I'm going to walk through an example of code

25
00:01:07.008 --> 00:01:09.008
that would be considered susceptible.

26
00:01:09.008 --> 00:01:12.000
So what I have for you here is a method.

27
00:01:12.000 --> 00:01:13.006
And in the first line of the method we create

28
00:01:13.006 --> 00:01:14.009
is SQL statement.

29
00:01:14.009 --> 00:01:17.009
And you'll notice that we're doing string concatenation,

30
00:01:17.009 --> 00:01:22.000
to insert the input directly into our WHERE clause.

31
00:01:22.000 --> 00:01:24.001
Now we go through and recreate a connection,

32
00:01:24.001 --> 00:01:25.007
we create a statement from that,

33
00:01:25.007 --> 00:01:28.007
and then we execute the SQL statement.

34
00:01:28.007 --> 00:01:31.002
If I insert some value,

35
00:01:31.002 --> 00:01:34.000
there will always make username return true,

36
00:01:34.000 --> 00:01:37.007
I will actually dump all of the data from the user table.

37
00:01:37.007 --> 00:01:40.009
So preventing this in Java is very easy,

38
00:01:40.009 --> 00:01:43.008
because it's built into the language itself.

39
00:01:43.008 --> 00:01:47.002
The solution is to use the concept of prepared statements,

40
00:01:47.002 --> 00:01:49.005
instead of statements themselves.

41
00:01:49.005 --> 00:01:53.003
Because this remediates the risk of SQL injection,

42
00:01:53.003 --> 00:01:56.003
the SQL statement is created with a question mark

43
00:01:56.003 --> 00:01:58.001
for all variables,

44
00:01:58.001 --> 00:02:01.004
instead of manually concatenating the string.

45
00:02:01.004 --> 00:02:05.001
The variables are then attached to the statement,

46
00:02:05.001 --> 00:02:08.006
instead of directly to the SQL query string.

47
00:02:08.006 --> 00:02:11.005
Then here's that same example from before,

48
00:02:11.005 --> 00:02:13.008
only doing so with a prepared statement,

49
00:02:13.008 --> 00:02:15.005
you will see in the first line of our method

50
00:02:15.005 --> 00:02:17.004
that we create our SQL statement,

51
00:02:17.004 --> 00:02:19.003
and we put a question mark placeholder

52
00:02:19.003 --> 00:02:21.006
for our username variable,

53
00:02:21.006 --> 00:02:24.001
within create our connection as we did before,

54
00:02:24.001 --> 00:02:28.008
and a statement is created using that SQL.

55
00:02:28.008 --> 00:02:32.000
But now, I set a string value,

56
00:02:32.000 --> 00:02:34.009
on the statement, using my input,

57
00:02:34.009 --> 00:02:38.006
and you'll notice that it's a parametrized index.

58
00:02:38.006 --> 00:02:41.004
It's not a zero based index as an array,

59
00:02:41.004 --> 00:02:42.002
but that's okay,

60
00:02:42.002 --> 00:02:45.004
because we can just count from one instead of zero.

61
00:02:45.004 --> 00:02:46.008
The idea here, however,

62
00:02:46.008 --> 00:02:50.008
is that everything passed into the input string,

63
00:02:50.008 --> 00:02:53.009
will be treated completely as a string.

64
00:02:53.009 --> 00:02:57.003
So in the case of passing in the OR 1=1,

65
00:02:57.003 --> 00:02:59.008
it's now going to look for a username,

66
00:02:59.008 --> 00:03:02.008
that equals whatever the input was supposed to be,

67
00:03:02.008 --> 00:03:04.009
in addition to the OR clause was added,

68
00:03:04.009 --> 00:03:07.008
and it's going to treat it as one entire string,

69
00:03:07.008 --> 00:03:10.007
escaping all of those values.

70
00:03:10.007 --> 00:03:12.005
So now when this is executed,

71
00:03:12.005 --> 00:03:16.000
it actually should return zero data elements.

