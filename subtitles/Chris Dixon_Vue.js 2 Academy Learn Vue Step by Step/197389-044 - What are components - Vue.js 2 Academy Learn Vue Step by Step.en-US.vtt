WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.290 --> 00:00:06.405
One of the great features of vue.Js is the ability to use components.

00:00:06.405 --> 00:00:11.249
You can think of a component like a building block for our application.

00:00:11.249 --> 00:00:17.070
We use them to break up our code into smaller, more maintainable pieces.

00:00:17.070 --> 00:00:20.880
A component can also be reused multiple times,

00:00:20.880 --> 00:00:24.870
from your application to avoid code repetition.

00:00:24.870 --> 00:00:29.810
Keeping sections of code into self-contained components also helps

00:00:29.810 --> 00:00:34.915
with debugging and keeping our code more organized and maintainable.

00:00:34.915 --> 00:00:40.580
Let's take a look at how components can be applied to our project.

00:00:40.580 --> 00:00:44.285
This is our finished card application.

00:00:44.285 --> 00:00:47.740
We can see there is some areas which are repeated.

00:00:47.740 --> 00:00:51.935
We have the text input fields on the left side,

00:00:51.935 --> 00:00:54.455
and all three are exactly the same.

00:00:54.455 --> 00:00:58.340
The same applies on a card itself where the text is displayed.

00:00:58.340 --> 00:01:02.210
This is an ideal use case for using components.

00:01:02.210 --> 00:01:05.780
We already know from exploring the files in

00:01:05.780 --> 00:01:11.045
our app that there is a main wrapper called the app.vue file.

00:01:11.045 --> 00:01:15.815
We know that we can use this wrapper to contain the rest of our application,

00:01:15.815 --> 00:01:18.710
which can all be nested inside.

00:01:18.710 --> 00:01:21.260
Within this app.vue wrapper,

00:01:21.260 --> 00:01:23.825
we can begin creating more components,

00:01:23.825 --> 00:01:25.990
such as a header.

00:01:25.990 --> 00:01:30.365
This header will be placed inside its own single file template,

00:01:30.365 --> 00:01:33.050
like the app.vue file.

00:01:33.050 --> 00:01:35.480
When naming component files,

00:01:35.480 --> 00:01:38.285
it's best to be as descriptive as possible.

00:01:38.285 --> 00:01:42.665
This helps on building larger scale apps with many components.

00:01:42.665 --> 00:01:46.450
We can clearly see where the components will fit in.

00:01:46.450 --> 00:01:50.690
In this project I've called this file the header.vue.

00:01:50.690 --> 00:01:55.985
Also I have placed the footer into a footer.vue file.

00:01:55.985 --> 00:02:00.505
Both the header and footer files are called from within the main wrapper.

00:02:00.505 --> 00:02:02.400
In the case of this app,

00:02:02.400 --> 00:02:07.295
it is not essential to have the header and footer in separate components.

00:02:07.295 --> 00:02:11.270
We could have hand-coded it inside of our app.vue template,

00:02:11.270 --> 00:02:13.235
as we'll only use them once.

00:02:13.235 --> 00:02:17.365
However, it gives us more practice at creating components.

00:02:17.365 --> 00:02:20.305
Still inside the main app.vue ,

00:02:20.305 --> 00:02:24.670
we have the main body section controlled by a wrapper component.

00:02:24.670 --> 00:02:29.265
For each side of the card we have the card front.

00:02:29.265 --> 00:02:32.835
Card inside left, card inside right,

00:02:32.835 --> 00:02:35.190
and the card back.

00:02:35.190 --> 00:02:39.050
We switch between these components using the navigation links,

00:02:39.050 --> 00:02:40.895
inside of the header.

00:02:40.895 --> 00:02:42.680
These components will act as

00:02:42.680 --> 00:02:46.400
a parent container for all of the child components within them,

00:02:46.400 --> 00:02:49.885
such as a text and image components.

00:02:49.885 --> 00:02:52.185
As a parent component,

00:02:52.185 --> 00:02:57.420
this will be used to pass data between components which we will cover soon.

00:02:57.490 --> 00:03:01.990
This now leaves us with the reusable components.

00:03:01.990 --> 00:03:05.075
On the left is area for editing the card,

00:03:05.075 --> 00:03:06.830
and this particular section,

00:03:06.830 --> 00:03:10.475
the front of the card has free text input areas,

00:03:10.475 --> 00:03:14.040
inside of a file called text-input.vue.

00:03:14.600 --> 00:03:18.530
The nature of components means we only have to create this component

00:03:18.530 --> 00:03:22.990
once and then we can add this as many times as we like.

00:03:22.990 --> 00:03:26.135
Text inputted into these text areas,

00:03:26.135 --> 00:03:30.790
is then displayed inside of the text output areas on the right-hand side.

00:03:30.790 --> 00:03:35.405
Remember how we talked about when using data properties in components,

00:03:35.405 --> 00:03:38.420
that the data property must be a function.

00:03:38.420 --> 00:03:41.875
Well, this is where the importance of this comes in.

00:03:41.875 --> 00:03:44.510
If we never had data as a function,

00:03:44.510 --> 00:03:46.520
like we did in the first project,

00:03:46.520 --> 00:03:49.490
when any of the text inputs were edited.

00:03:49.490 --> 00:03:55.600
All three of these texts outputs on the right will be updated with the same text.

00:03:55.600 --> 00:03:58.520
Of course, this would not work well throughout because we want

00:03:58.520 --> 00:04:01.790
the free text areas to be independent.

00:04:01.790 --> 00:04:04.775
They can share the same template visually,

00:04:04.775 --> 00:04:08.500
but we want the data to not be shared with others.

00:04:08.500 --> 00:04:11.055
Having data-sets work as of function,

00:04:11.055 --> 00:04:14.315
allows a components to maintain their own state,

00:04:14.315 --> 00:04:16.895
so they can work independently.

00:04:16.895 --> 00:04:20.195
We also do the same for the images too,

00:04:20.195 --> 00:04:22.340
there are two components.

00:04:22.340 --> 00:04:28.440
One for the image upload area then one on the right to display the image.

00:04:28.490 --> 00:04:32.060
Moving on to the back of the card which simply has

00:04:32.060 --> 00:04:36.230
the same two image components because they are now reusable.

00:04:36.230 --> 00:04:39.065
Then just the copyright text below.

00:04:39.065 --> 00:04:43.660
This is how components work and how we can reuse them multiple times.

00:04:43.660 --> 00:04:49.445
Splitting up our application like this is made possible with tools such as webpack,

00:04:49.445 --> 00:04:52.985
which bundles all these modules, the files,

00:04:52.985 --> 00:04:58.240
and all their dependencies together into a single bill file for production.

00:04:58.240 --> 00:05:02.165
Hopefully you can now see the benefits of using components.

00:05:02.165 --> 00:05:05.610
Now let's move on to putting them into practice.
