WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.090 --> 00:00:05.250
In the last video, we successfully created

00:00:05.250 --> 00:00:09.840
our new creative cards projects using the Vue CLI.

00:00:09.840 --> 00:00:13.035
I've now got the project opened up in Visual Studio,

00:00:13.035 --> 00:00:15.735
and the development server up and running.

00:00:15.735 --> 00:00:20.445
Now I just want to take a few moments to look at the project structure,

00:00:20.445 --> 00:00:22.635
which we've actually created.

00:00:22.635 --> 00:00:26.760
If we look at the files and folders on the left-hand side,

00:00:26.760 --> 00:00:31.525
we can see that the first folder is the node modules.

00:00:31.525 --> 00:00:34.880
This folder is where all of the MPM modules are

00:00:34.880 --> 00:00:39.505
installed when we run the MPM install command in the last video.

00:00:39.505 --> 00:00:44.085
This is where things such as the View Call Library is located,

00:00:44.085 --> 00:00:45.845
and now we have that as a package,

00:00:45.845 --> 00:00:48.440
we don't need to use the CDN links,

00:00:48.440 --> 00:00:51.190
like we did in the first projects.

00:00:51.190 --> 00:00:53.915
Next, we have the source folder.

00:00:53.915 --> 00:00:57.335
The source folder will be where we do most of our work.

00:00:57.335 --> 00:01:01.225
This is where we'll be adding most of our code for the projects.

00:01:01.225 --> 00:01:04.250
This contains all our projects source files,

00:01:04.250 --> 00:01:09.780
and these are all stored on the server rather than being available for the public to see.

00:01:09.910 --> 00:01:14.240
Next, we have the dot babelrc file.

00:01:14.240 --> 00:01:19.300
This is the configuration file for a tool which we've installed called babel.

00:01:19.300 --> 00:01:22.240
As we go through the course, we'll take advantage of some of

00:01:22.240 --> 00:01:26.574
the new JavaScript features from the latest version of JavaScript,

00:01:26.574 --> 00:01:30.260
which is called ES6 or ES2015.

00:01:30.260 --> 00:01:34.365
Both ES6 and ES2015 are the same thing.

00:01:34.365 --> 00:01:36.390
ES6 is the version,

00:01:36.390 --> 00:01:39.580
ES2015 is the year of the release.

00:01:39.580 --> 00:01:43.400
The ES, which is in both, stands for ECMAScripts.

00:01:43.400 --> 00:01:48.010
ECMAScript is a standard or specification for scripting languages,

00:01:48.010 --> 00:01:51.235
whereas JavaScript is the actual scripting language,

00:01:51.235 --> 00:01:53.330
which is based on the standard.

00:01:53.330 --> 00:01:56.700
When we talk about ES6 or ES2015,

00:01:56.700 --> 00:01:59.560
we're talking about the same thing.

00:02:00.380 --> 00:02:05.000
However, the browser cannot understand this new code.

00:02:05.000 --> 00:02:07.280
This is where a babel comes in.

00:02:07.280 --> 00:02:11.860
It takes our code and compiles it to be converted back to ES5,

00:02:11.860 --> 00:02:14.780
which can then be read by the browser.

00:02:14.900 --> 00:02:18.130
We'll come back to this later on.

00:02:18.290 --> 00:02:22.340
Gitignore is for the git version control system.

00:02:22.340 --> 00:02:27.710
Here is where we can list any files or folders which you don't want to be tracked by git.

00:02:27.710 --> 00:02:32.020
Then we have our familiar index.html file.

00:02:32.020 --> 00:02:34.480
This works like in the last project,

00:02:34.480 --> 00:02:37.889
where we still have our main app container.

00:02:38.710 --> 00:02:42.620
We also have a script tag down at the bottom.

00:02:42.620 --> 00:02:46.175
In the first project, we only had one JavaScript file,

00:02:46.175 --> 00:02:48.695
which is our app.js file,

00:02:48.695 --> 00:02:52.910
which had all of our view js code inside.

00:02:52.910 --> 00:02:56.825
This project will work differently because we'll have many files,

00:02:56.825 --> 00:02:58.550
mainly because we'll be spitting up

00:02:58.550 --> 00:03:03.215
our call base into separate modules called components.

00:03:03.215 --> 00:03:04.910
We'll then use webpack,

00:03:04.910 --> 00:03:07.790
which is installed with the Vue CLI,

00:03:07.790 --> 00:03:10.235
where pack is a module bundler,

00:03:10.235 --> 00:03:13.400
which basically takes all of our code which you write,

00:03:13.400 --> 00:03:16.895
along with any dependencies such as babel,

00:03:16.895 --> 00:03:20.350
and then bundles it all together into one file.

00:03:20.350 --> 00:03:23.450
This bundle file, which we'll have at the bottom here,

00:03:23.450 --> 00:03:25.865
is isn't read by the browser.

00:03:25.865 --> 00:03:32.990
The output of his compiled file is the build.js file, which you can see here.

00:03:32.990 --> 00:03:38.570
You may also notice that there is no dist folder in the project tree.

00:03:38.570 --> 00:03:42.155
Dist folder is only created when we build for production,

00:03:42.155 --> 00:03:43.940
and we have not yet done this.

00:03:43.940 --> 00:03:47.410
We're just working with the development server for now.

00:03:47.410 --> 00:03:51.690
We also have the package.json file,

00:03:51.690 --> 00:03:55.660
which you may recognize if you've worked with node in the past.

00:03:55.660 --> 00:03:58.780
This file contains information about our app,

00:03:58.780 --> 00:04:03.390
and also includes any module dependencies which you may have.

00:04:04.040 --> 00:04:09.150
I'll just close this terminal down just so you can see some more.

00:04:09.150 --> 00:04:11.760
The Vue CLI is already populated,

00:04:11.760 --> 00:04:13.594
the name and the description,

00:04:13.594 --> 00:04:17.125
and also some information about these projects.

00:04:17.125 --> 00:04:22.390
This is the information which we provided during the installation process.

00:04:22.390 --> 00:04:27.405
The ASM scripts provided such as dev and built.

00:04:27.405 --> 00:04:30.630
We used dev before when running the development server,

00:04:30.630 --> 00:04:33.135
by using npm run dev,

00:04:33.135 --> 00:04:37.285
running npm rebuilt, will build our app production.

00:04:37.285 --> 00:04:41.430
It will also create the distribution folder for our bundle.

00:04:41.430 --> 00:04:45.655
This production build also minifies our core 2.

00:04:45.655 --> 00:04:48.565
Then we have a list of any dependencies,

00:04:48.565 --> 00:04:52.090
the projects, such as view js.

00:04:52.090 --> 00:04:58.030
We can also specify any dependencies which we only want to use for developments in

00:04:58.030 --> 00:05:02.290
the dev dependencies objects such as babel because we only want

00:05:02.290 --> 00:05:07.670
to use this during development to then convert our code ready for production.

00:05:07.700 --> 00:05:12.040
We'll then have a README file too with the instructions for running and

00:05:12.040 --> 00:05:16.790
building our app and then a webpack.config file,

00:05:16.790 --> 00:05:20.785
this as the name suggests is where we can configure webpack.

00:05:20.785 --> 00:05:25.480
I won't go into everything here in detail as webpack can be a course topic by

00:05:25.480 --> 00:05:30.850
itself but one of the main things is the entry and output file paths,

00:05:30.850 --> 00:05:33.760
which you can see just here.

00:05:33.760 --> 00:05:36.785
The entry point is our source file,

00:05:36.785 --> 00:05:42.305
which is main.js, which is inside of our source folder.

00:05:42.305 --> 00:05:45.950
Although we have many source files when creating components,

00:05:45.950 --> 00:05:47.870
they are all still rendered through this

00:05:47.870 --> 00:05:52.270
main.js file and we'll look at this in more detail soon.

00:05:52.270 --> 00:05:56.030
The output is our build.js file and this is

00:05:56.030 --> 00:06:01.620
the final file which is run inside of the browser with all of our compile code.

00:06:02.330 --> 00:06:06.285
Then we can add things such as loaders.

00:06:06.285 --> 00:06:11.030
As I mentioned before, we're using babel to convert any ES6 code

00:06:11.030 --> 00:06:15.695
into regular JavaScripts and here is the babel loader,

00:06:15.695 --> 00:06:20.350
which looks for any files with the.js extension.

00:06:20.350 --> 00:06:24.140
Often here we'll also see a list of what is called presets

00:06:24.140 --> 00:06:28.385
2 but because we have the babel.rc file,

00:06:28.385 --> 00:06:31.810
we have all of our presets active in there instead.

00:06:31.810 --> 00:06:34.485
Presets are a bit like adding plugins.

00:06:34.485 --> 00:06:38.315
They're presets available to not only convert ES6 code,

00:06:38.315 --> 00:06:43.770
but also things such as jsx code and the react library.

00:06:43.940 --> 00:06:51.070
If we head over to our source folder and then click on main.js,

00:06:51.320 --> 00:06:55.325
this is a main file for webpack to use.

00:06:55.325 --> 00:07:03.275
This file imports both the view Library and also the main app file called App.vue.

00:07:03.275 --> 00:07:06.770
You can think of update App.vue as the main wrapper or

00:07:06.770 --> 00:07:11.020
the parent file to all of the components in which we create.

00:07:11.020 --> 00:07:14.505
This is why the webpack entry point is main.js,

00:07:14.505 --> 00:07:17.870
because it renders App.vue and then this App.vue

00:07:17.870 --> 00:07:22.085
file contains all the rest follow code in the application.

00:07:22.085 --> 00:07:25.745
You will also see the familiar el property,

00:07:25.745 --> 00:07:32.640
which is the ID inside the index page where we want to render our content to.

00:07:33.100 --> 00:07:36.629
If we explore App.vue,

00:07:37.220 --> 00:07:41.600
this is what is called a single file components.

00:07:41.600 --> 00:07:47.525
It has a.v extension and the contents are split into three sections.

00:07:47.525 --> 00:07:51.450
First of all, we have the template section.

00:07:51.790 --> 00:07:55.535
A template is the main content of the component.

00:07:55.535 --> 00:08:01.145
Here we can create our html markup that we'll want to use inside of the components.

00:08:01.145 --> 00:08:04.040
We can also mix in our view data with

00:08:04.040 --> 00:08:07.880
the double curly braces just like we've done previously.

00:08:07.880 --> 00:08:11.820
Below that, we then have our script section.

00:08:12.250 --> 00:08:15.815
So a lot this will look familiar from the last section.

00:08:15.815 --> 00:08:20.915
The script tags where we wants to include our vuejs dates properties, our methods,

00:08:20.915 --> 00:08:23.900
computed properties and all the rest which we've looked at

00:08:23.900 --> 00:08:27.525
so far and also any plain JavaScript too.

00:08:27.525 --> 00:08:31.450
We'll look at this in more detail during the projects.

00:08:31.450 --> 00:08:36.665
Further down, we have the third and final section of our component,

00:08:36.665 --> 00:08:39.185
which is the Style section.

00:08:39.185 --> 00:08:42.080
We can also add styles to this template.

00:08:42.080 --> 00:08:45.770
We have the options to make these styles applied to the whole of our App.

00:08:45.770 --> 00:08:49.550
I'll just contain them to this particular template.

00:08:49.550 --> 00:08:53.255
Split up our code like this into a single file templates

00:08:53.255 --> 00:08:56.825
is made possible by using a bill tools such as webpack,

00:08:56.825 --> 00:09:02.290
which bundles everything together for us into one bundled output file in the end.

00:09:02.290 --> 00:09:06.845
So this is an overview of the structure of our new app,

00:09:06.845 --> 00:09:09.680
which was set up using the Vue CLI.

00:09:09.680 --> 00:09:14.630
Now I know things may look a little complicated at the moment if this kind of

00:09:14.630 --> 00:09:15.860
setup is unfamiliar to

00:09:15.860 --> 00:09:20.045
you but we will be using this structure for the rest of the course.

00:09:20.045 --> 00:09:24.570
So by the end, you should be a lot more comfortable after a bit more practice.
