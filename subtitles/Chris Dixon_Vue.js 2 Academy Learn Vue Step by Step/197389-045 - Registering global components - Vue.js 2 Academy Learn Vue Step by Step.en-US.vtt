WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.500 --> 00:00:04.770
Now we have a better understanding of what components are and how

00:00:04.770 --> 00:00:08.595
we're going to break up our application into these components.

00:00:08.595 --> 00:00:11.685
Let's get to work on actually creating them.

00:00:11.685 --> 00:00:14.460
If your project is not already running,

00:00:14.460 --> 00:00:18.315
you will need to go down to the terminal and run npm,

00:00:18.315 --> 00:00:25.990
run dev and they should open up the development server in the browser.

00:00:28.460 --> 00:00:32.050
We see in this page and everything is working fine.

00:00:32.050 --> 00:00:37.490
To begin, let's clean up the sample code from over in the app.vue file.

00:00:37.490 --> 00:00:40.560
Head over to app.vue.

00:00:41.000 --> 00:00:46.655
The first thing we want to do is remove all the code from between the template tags.

00:00:46.655 --> 00:00:51.030
So everything from the div with the id of app,

00:00:51.370 --> 00:00:56.315
all the way down, up to the closing template tag.

00:00:56.315 --> 00:01:04.235
So remove that. The same for the script contents and also for the styles,

00:01:04.235 --> 00:01:08.550
well other own styles and script in when we need them.

00:01:10.850 --> 00:01:14.955
This is our empty single file template.

00:01:14.955 --> 00:01:19.400
Then I'm going to add some simple HTML structure for the app.

00:01:19.400 --> 00:01:24.670
Remember this app.vue file will end up being the main wrapper for our app.

00:01:24.670 --> 00:01:29.990
So make sense to add our bootstrap containers and rows inside here.

00:01:29.990 --> 00:01:34.380
Templates also need to have one main outer elements,

00:01:34.380 --> 00:01:37.365
so all bootstrap container will cover this.

00:01:37.365 --> 00:01:40.295
For example, this will not work,

00:01:40.295 --> 00:01:50.750
if we add some HTML such as an image tag and then a second elements such as API tag.

00:01:51.380 --> 00:01:55.655
If we save this and then go over to the browser,

00:01:55.655 --> 00:01:58.365
we see we've got a blank screen.

00:01:58.365 --> 00:02:03.545
If we go into the developer tools and then open up the console,

00:02:03.545 --> 00:02:05.945
we see we get a message saying

00:02:05.945 --> 00:02:10.945
components template should contain exactly one root element.

00:02:10.945 --> 00:02:13.280
To fix this, we can use a div,

00:02:13.280 --> 00:02:17.645
for example, as a root element to surround our code.

00:02:17.645 --> 00:02:24.260
Let's add a div inside here and paste

00:02:24.260 --> 00:02:30.950
the closing tag down at the bottom and then "Save" and now when we refresh,

00:02:30.950 --> 00:02:35.870
we see the error messages have gone and now we have our hello message.

00:02:36.350 --> 00:02:39.800
Let's continue to add our bootstrap rows.

00:02:39.800 --> 00:02:45.905
We can remove the texts and also the image tag and then carry on by creating a class,

00:02:45.905 --> 00:02:48.840
a bootstrap class of container.

00:02:49.610 --> 00:02:53.230
Then here we can create our row.

00:02:54.590 --> 00:02:58.010
So bootstrap class of row which will

00:02:58.010 --> 00:03:02.040
surround all the content that we're going to add inside.

00:03:02.380 --> 00:03:06.905
Finally, a third and final div for the section,

00:03:06.905 --> 00:03:12.000
which is going to have a class of col-sm-12.

00:03:13.690 --> 00:03:18.150
Would you make the app vue full 12 columns wide.

00:03:18.200 --> 00:03:23.460
For this to work, we need to grab the bootstrap for CDN link.

00:03:23.460 --> 00:03:27.045
If we go over to the browser,

00:03:27.045 --> 00:03:31.610
then once you Google and then do search for

00:03:31.610 --> 00:03:40.320
bootstrap for CDN and then scroll on down.

00:03:40.320 --> 00:03:45.730
We can see under the download title we have the jump to bootstrap CDN section.

00:03:47.470 --> 00:03:49.910
We don't need the JavaScript just now,

00:03:49.910 --> 00:03:52.310
so I'm just going to copy the CSS link,

00:03:52.310 --> 00:03:54.690
which is the top line.

00:03:54.800 --> 00:04:03.330
Copy that and then we can add this in our index page just underneath the title.

00:04:05.300 --> 00:04:10.985
So give that a "Save" and then we can take a look at using global components.

00:04:10.985 --> 00:04:15.890
This is the first component type I'm going to show you and this means the component is

00:04:15.890 --> 00:04:20.960
not restricted to be used only in a particular instance or components.

00:04:20.960 --> 00:04:24.950
We can basically have access to anywhere where we need it.

00:04:24.950 --> 00:04:28.790
If we go over to the main.js file,

00:04:28.790 --> 00:04:34.535
we can begin to work on our first component just above the vue instance.

00:04:34.535 --> 00:04:37.370
Make sure the component is above this as we need to

00:04:37.370 --> 00:04:40.910
register it before the vue instance is instantiated,

00:04:40.910 --> 00:04:43.150
for it to work correctly.

00:04:43.150 --> 00:04:53.520
We register this global component by calling vue.components inside here,

00:04:53.520 --> 00:04:58.230
we then give the components a tag name inside of a string.

00:04:58.960 --> 00:05:02.895
This is a name which used to refer to the components.

00:05:02.895 --> 00:05:06.270
I'm going to call this the text input.

00:05:07.570 --> 00:05:11.690
The name formats of lowercase separated by hyphens is

00:05:11.690 --> 00:05:15.410
considered good practice, although not essential,

00:05:15.410 --> 00:05:19.885
then separated by a comma and within curly braces,

00:05:19.885 --> 00:05:22.485
we pass in the options,

00:05:22.485 --> 00:05:25.120
just like a normal vue instance.

00:05:25.120 --> 00:05:29.590
We're going to begin by creating a template and

00:05:29.590 --> 00:05:34.505
this template within a string is going to contain a single text area.

00:05:34.505 --> 00:05:37.405
Let's out our HTML inside here.

00:05:37.405 --> 00:05:42.850
The text area opening and closing tag.

00:05:46.330 --> 00:05:49.700
For this to work correctly, we need to make sure craft

00:05:49.700 --> 00:05:52.535
the vue JS library imported correctly,

00:05:52.535 --> 00:05:58.285
which we already do at the top of the page with the import view from view.

00:05:58.285 --> 00:06:04.340
If we import module from the node modules folder just over here,

00:06:04.340 --> 00:06:08.450
we can just refer to it by the module name, such as vue.

00:06:08.450 --> 00:06:12.575
If were import anything else which is not in the node modules folder,

00:06:12.575 --> 00:06:16.130
we need to specify the file path for the file,

00:06:16.130 --> 00:06:22.725
like you can see with the up import on line two and then save that.

00:06:22.725 --> 00:06:25.620
Then all the in the index.html file,

00:06:25.620 --> 00:06:29.690
we can now add the component to our main app div,

00:06:29.690 --> 00:06:33.210
just like a HTML elements.

00:06:33.370 --> 00:06:38.720
To locate our div with the id of app and then inside here,

00:06:38.720 --> 00:06:41.495
I'm going to add it just like a normal element,

00:06:41.495 --> 00:06:50.140
so text, inputs, opening tag and then our closing tag.

00:06:51.050 --> 00:06:55.405
Note this element name must march the components tag name,

00:06:55.405 --> 00:07:00.200
which will only before inside of the vue components.

00:07:00.240 --> 00:07:05.500
These are reusable components and we can add them as many times as we like,

00:07:05.500 --> 00:07:11.500
so if we were to copy and paste this in a few more times,

00:07:11.500 --> 00:07:14.900
we should be able to see three components.

00:07:14.900 --> 00:07:19.585
If we save that and then move over to the browser,

00:07:19.585 --> 00:07:25.465
we should see three text area components but we just see a blank screen.

00:07:25.465 --> 00:07:29.135
This is because of main.js.

00:07:29.135 --> 00:07:36.305
Our vue instance is overriding the content by rendering the contents of our app.vue file.

00:07:36.305 --> 00:07:40.040
This behavior is normally what we want but for this example,

00:07:40.040 --> 00:07:44.765
I'm going to comment out the render function so we can see our components.

00:07:44.765 --> 00:07:50.150
So there's comments out the section and then now if we refresh,

00:07:50.150 --> 00:07:53.935
we see our three text areas appear on the screen.

00:07:53.935 --> 00:07:56.765
Also because they are registered globally,

00:07:56.765 --> 00:08:01.235
we can add them into the vue templates inside of our app.

00:08:01.235 --> 00:08:05.050
In the same way with our HTML elements,

00:08:05.050 --> 00:08:08.639
our options object inside of the vue component,

00:08:08.639 --> 00:08:13.510
is not just limited to adding a string template like we're currently using,

00:08:13.510 --> 00:08:18.860
we can in fact use other options which we have available to us in the vue instance,

00:08:18.860 --> 00:08:21.820
such as adding data and methods.

00:08:21.820 --> 00:08:26.239
We know from the last section using the data property in components,

00:08:26.239 --> 00:08:27.965
is a little different.

00:08:27.965 --> 00:08:30.620
We need to add it as a function.

00:08:30.620 --> 00:08:36.445
Let's add some data to change the placeholder text of the text area.

00:08:36.445 --> 00:08:40.780
First of all, let's bind the placeholder,

00:08:44.390 --> 00:08:48.970
to a date property or text value.

00:08:50.790 --> 00:08:56.605
Then at a [inaudible] onto the end of our templates to add our data property.

00:08:56.605 --> 00:08:59.320
This is a function as we know,

00:08:59.320 --> 00:09:08.690
which then takes in a object and then we return an object containing our data.

00:09:08.690 --> 00:09:11.535
Let's create our text value,

00:09:11.535 --> 00:09:16.305
date property and set this to a string,

00:09:16.305 --> 00:09:19.240
just simply of type here.

00:09:22.300 --> 00:09:29.415
Save that and now we should see the value of type here inside of the three text areas.

00:09:29.415 --> 00:09:34.465
Also, we can add methods to changes placeholder text when we click on it.

00:09:34.465 --> 00:09:38.125
So just underneath the data section,

00:09:38.125 --> 00:09:42.500
add a comma and then we can add our methods.

00:09:43.020 --> 00:09:46.855
Methods added just the same as we already know.

00:09:46.855 --> 00:09:48.925
I'm going to add a method called

00:09:48.925 --> 00:09:55.855
change text and then

00:09:55.855 --> 00:10:00.355
all I want this method to do is to select this.text value,

00:10:00.355 --> 00:10:02.230
which is this data that we set

00:10:02.230 --> 00:10:10.400
here and we're just going to set it to a new string of texts changed.

00:10:11.490 --> 00:10:17.120
To trigger this method, we need to add a click listener onto the text area,

00:10:17.120 --> 00:10:18.660
so any opening tag,

00:10:18.660 --> 00:10:21.510
we can add the shorthand of at

00:10:21.510 --> 00:10:27.870
click and then use it to trigger the function of change text.

00:10:30.070 --> 00:10:34.725
Let's save that. If we check this out in the browser,

00:10:34.725 --> 00:10:38.280
you'll notice the three components will act independently,

00:10:38.280 --> 00:10:39.720
so if we click on the first one,

00:10:39.720 --> 00:10:40.935
we see the text changed.

00:10:40.935 --> 00:10:46.615
For the text inside the second and third component is just as it was before.

00:10:46.615 --> 00:10:51.050
This is how we can add components to our app globally and now we can

00:10:51.050 --> 00:10:56.010
move on to the next video and take a look at registering components locally.
