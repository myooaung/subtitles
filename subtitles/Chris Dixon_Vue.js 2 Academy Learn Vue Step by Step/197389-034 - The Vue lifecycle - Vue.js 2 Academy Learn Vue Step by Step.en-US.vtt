WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.310 --> 00:00:04.590
We should now have a better understanding of how

00:00:04.590 --> 00:00:08.665
Vue.js creates a template and manage it to the DOM.

00:00:08.665 --> 00:00:11.190
When creating Vue instances though,

00:00:11.190 --> 00:00:13.995
there is something important going on behind the scenes,

00:00:13.995 --> 00:00:19.800
which we have not yet looked at and this is a Vue instance lifecycle.

00:00:19.800 --> 00:00:23.490
We can hook into various stages of the lifecycle,

00:00:23.490 --> 00:00:28.230
such as before the instance is created or before there is an update,

00:00:28.230 --> 00:00:31.635
for example and we can tell Vue what code

00:00:31.635 --> 00:00:36.305
to run on each one of these specific points in the lifecycle.

00:00:36.305 --> 00:00:40.055
There are a number of these lifecycle hooks which we can use,

00:00:40.055 --> 00:00:42.560
so let's take a look at them now.

00:00:42.560 --> 00:00:48.455
We should now be familiar with creating a new Vue instance using new Vue,

00:00:48.455 --> 00:00:51.725
which we can see is at the top of this drawing.

00:00:51.725 --> 00:00:58.255
This is the lifecycle starting point before observing data and initializing any events.

00:00:58.255 --> 00:01:01.640
The stage should also make sense now because we know from

00:01:01.640 --> 00:01:05.885
previous videos that upon creation of the Vue instance,

00:01:05.885 --> 00:01:11.900
Vue.js is aware of the data inside of it and creates the watcher effect.

00:01:12.430 --> 00:01:14.930
Between these first two stages,

00:01:14.930 --> 00:01:17.630
we can call the first of our life cycle hooks,

00:01:17.630 --> 00:01:20.380
which is called beforeCreate.

00:01:20.380 --> 00:01:23.390
beforeCreate, as the name implies,

00:01:23.390 --> 00:01:27.290
is a method which we can use to define any code we want to run

00:01:27.290 --> 00:01:32.905
before any of our data is observed or any methods have been initialized.

00:01:32.905 --> 00:01:38.150
If we want to run the code after the data and methods are initialized,

00:01:38.150 --> 00:01:41.080
we then need to use the created hook.

00:01:41.080 --> 00:01:44.040
This means our instance is being created,

00:01:44.040 --> 00:01:47.280
all data's being setup such as watchers,

00:01:47.280 --> 00:01:50.185
computed properties, and any methods,

00:01:50.185 --> 00:01:54.600
although it has yet to be mounted to the DOM at this stage.

00:01:54.850 --> 00:01:59.360
The next lifecycle stage is related to templates.

00:01:59.360 --> 00:02:02.480
We've used both the template property and also

00:02:02.480 --> 00:02:06.230
created templates within our HTML code in this section,

00:02:06.230 --> 00:02:08.210
this is where Vue.js will look for

00:02:08.210 --> 00:02:12.360
these options and then compile these templates when required.

00:02:12.400 --> 00:02:16.010
After the templates have been compiled by using

00:02:16.010 --> 00:02:22.195
the template property or by looking up the templates in HTML with the el property,

00:02:22.195 --> 00:02:24.740
our next lifecycle hook is run.

00:02:24.740 --> 00:02:27.925
This hook is called beforeMount.

00:02:27.925 --> 00:02:32.660
beforeMount is called just before the mounting of the instance begins,

00:02:32.660 --> 00:02:37.045
and just before the render function will be called for the first time.

00:02:37.045 --> 00:02:40.530
Next up is replace el with template,

00:02:40.530 --> 00:02:43.170
now Vue.js has our templates ready.

00:02:43.170 --> 00:02:47.720
It has all HTML prepared which can be read by the browser.

00:02:47.720 --> 00:02:50.960
The curly braces or the interpolation we see in

00:02:50.960 --> 00:02:55.145
the editor will be replaced with the correspondent data values.

00:02:55.145 --> 00:02:58.070
This is why we can't see the double curly braces

00:02:58.070 --> 00:03:01.285
when we take a look inside the developer tools.

00:03:01.285 --> 00:03:04.355
This means the elements which we specify using

00:03:04.355 --> 00:03:08.735
el will be replaced with our compiled template.

00:03:08.735 --> 00:03:13.030
Now everything is in place to mount our template to the DOM.

00:03:13.030 --> 00:03:17.345
We're not done though once our instance mounting stage is been reached.

00:03:17.345 --> 00:03:21.410
We've discussed reactivity during this course and how Vue watches

00:03:21.410 --> 00:03:25.820
for changes and then reacts to these changes by obtaining the DOM.

00:03:25.820 --> 00:03:29.330
This is the effect we can see over on the far left,

00:03:29.330 --> 00:03:32.830
which is the virtual DOM re-render and patch.

00:03:32.830 --> 00:03:37.190
This is an ongoing cycle and the virtual DOM re-render and

00:03:37.190 --> 00:03:42.810
patch is triggered when some reactive or so much data is changed.

00:03:43.250 --> 00:03:46.005
Next, we have beforeUpdate.

00:03:46.005 --> 00:03:50.420
This cycle of updating provides us with two new life cycle hooks.

00:03:50.420 --> 00:03:54.140
First is beforeUpdate, and this as it sounds,

00:03:54.140 --> 00:03:57.095
is called before any data changes.

00:03:57.095 --> 00:04:00.545
Second of all, there is the updated hook.

00:04:00.545 --> 00:04:02.780
This is where we can add any code we want to

00:04:02.780 --> 00:04:05.795
run when there has been a data change detected,

00:04:05.795 --> 00:04:08.905
which causes the virtual DOM to be re-rendered.

00:04:08.905 --> 00:04:12.545
Vue.js recommends avoiding this hook in most cases,

00:04:12.545 --> 00:04:15.365
as we are provided with the computer property

00:04:15.365 --> 00:04:19.090
and also watchers which should be referred wherever possible.

00:04:19.090 --> 00:04:22.675
Next up there is the beforeDestroy hook.

00:04:22.675 --> 00:04:26.400
This is called right before a Vue instance is destroyed.

00:04:26.400 --> 00:04:28.135
At the moment it is called,

00:04:28.135 --> 00:04:30.505
the incidence is still fully functional,

00:04:30.505 --> 00:04:33.640
nothing has begun yet for the destroy phase.

00:04:33.640 --> 00:04:38.770
Then Vue prepares the instance to be destroyed by removing all watches,

00:04:38.770 --> 00:04:42.355
event listeners, and also any child components.

00:04:42.355 --> 00:04:43.960
We've not covered components yet,

00:04:43.960 --> 00:04:45.720
but we'll do soon.

00:04:45.720 --> 00:04:48.200
Finally, we have destroyed,

00:04:48.200 --> 00:04:50.180
so this is all the stages of

00:04:50.180 --> 00:04:54.720
the Vue instance lifecycle and in the instance being destroyed.

00:04:54.720 --> 00:04:58.755
When this happens, the final destroyed hook is called.

00:04:58.755 --> 00:05:02.020
There is nothing magic going on behind the scenes,

00:05:02.020 --> 00:05:05.290
just a series of stages of the Vue instance,

00:05:05.290 --> 00:05:09.300
which you can now see that we can tap into using these hooks.

00:05:09.300 --> 00:05:14.360
There are actually two more hooks called activated and deactivated.

00:05:14.360 --> 00:05:18.110
These are not typically available in this regular instance,

00:05:18.110 --> 00:05:22.160
but rather made available when using a kept-alive component.

00:05:22.160 --> 00:05:26.260
We will cover kept-alive components in the component section later,

00:05:26.260 --> 00:05:28.770
but for now, let's move to the last video.

00:05:28.770 --> 00:05:34.650
In this section, we will put into practice these life cycle hooks to see them in action.
