WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.890 --> 00:00:04.830
In the last video, we looked at using computed properties,

00:00:04.830 --> 00:00:08.700
which are a great way to add functionality to our app.

00:00:08.700 --> 00:00:15.495
Computed properties watch the code and will only react if any of the data changes.

00:00:15.495 --> 00:00:20.580
As an alternative Vue.js also provides us with a watch property,

00:00:20.580 --> 00:00:26.865
which we can use when we want to watch a data property and react to any changes.

00:00:26.865 --> 00:00:30.420
Using Watch also allows us to perform

00:00:30.420 --> 00:00:36.355
asynchronous tasks which we are unable to use with computed properties.

00:00:36.355 --> 00:00:40.145
We set up the watch objects on the vue instance,

00:00:40.145 --> 00:00:44.125
just like we did with computed methods and data.

00:00:44.125 --> 00:00:48.385
To begin, I'm going to start by deleting the examples from the last video.

00:00:48.385 --> 00:00:53.000
So in app.js, we can delete the test method.

00:00:53.000 --> 00:00:56.490
We can also remove method call.

00:00:57.050 --> 00:01:01.815
So remove those two and then back in index.html,

00:01:01.815 --> 00:01:06.030
we can also remove the Example button that we added too.

00:01:06.950 --> 00:01:13.770
Once this is done, let's go back over to the app.js and that set up our Watch object.

00:01:13.770 --> 00:01:17.945
This of course is added just like the other objects that we've looked at.

00:01:17.945 --> 00:01:21.950
So add a comma just after the computed section,

00:01:21.950 --> 00:01:24.930
and then add our watch object.

00:01:26.390 --> 00:01:28.760
Inside of the watch object,

00:01:28.760 --> 00:01:32.525
we can set a data property which you want to observe.

00:01:32.525 --> 00:01:35.690
This name must match an existing data name.

00:01:35.690 --> 00:01:40.835
So for example, we need to use guestName or something such as eventDate,

00:01:40.835 --> 00:01:44.455
which we already have inside of our data property.

00:01:44.455 --> 00:01:47.735
I'm going to watch our guestName property.

00:01:47.735 --> 00:01:54.070
We then specify a function which we want to run when there is a change to guestName.

00:01:54.070 --> 00:01:58.355
Upon change Vue.js will pass the value of this change

00:01:58.355 --> 00:02:02.580
to the function.Inside of the function parentheses,

00:02:02.580 --> 00:02:07.400
we can pass in a name we want to give to the data vue will pass in.

00:02:07.400 --> 00:02:09.770
This name can be anything it wants,

00:02:09.770 --> 00:02:12.230
but I'm going to call it data,

00:02:13.070 --> 00:02:15.920
and then inside of the function,

00:02:15.920 --> 00:02:19.999
I'm going to log to the console a message when guestName,

00:02:19.999 --> 00:02:23.800
which is being observed by the watcher, is changed.

00:02:23.800 --> 00:02:29.040
Then let's add the console log of watch triggered.

00:02:32.060 --> 00:02:36.330
Then let's open up the console in the browser,

00:02:36.400 --> 00:02:40.380
and then add some names to the guest list.

00:02:43.790 --> 00:02:50.555
So one thing you'll notice is watch triggered is printed twice per name added.

00:02:50.555 --> 00:02:55.165
This is because we are observing the data property of guestName.

00:02:55.165 --> 00:02:57.860
GuestName is changed twice.

00:02:57.860 --> 00:03:02.410
It's changed once inside of the form submitted method,

00:03:02.410 --> 00:03:06.215
and then once again inside of the computed property,

00:03:06.215 --> 00:03:09.275
to sort the names into alphabetical order.

00:03:09.275 --> 00:03:15.980
So we can see this data is being observed and the function runs on each change.Of course,

00:03:15.980 --> 00:03:17.510
this is a basic example,

00:03:17.510 --> 00:03:20.965
but it gives you an idea of how they can be used.

00:03:20.965 --> 00:03:25.070
We'll use a more later as we go through the course projects.

00:03:25.070 --> 00:03:28.205
For performance reasons, usually it's better to use

00:03:28.205 --> 00:03:35.395
a computed property wherever possible because of this efficient rendering due to caching.

00:03:35.395 --> 00:03:38.105
But watchers, as we've discussed,

00:03:38.105 --> 00:03:40.550
are useful for observing changes in

00:03:40.550 --> 00:03:44.885
data properties and also useful for asynchronous tasks,

00:03:44.885 --> 00:03:48.360
such as accessing API data.
