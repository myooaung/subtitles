WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.540 --> 00:00:04.660
So this is how our structure looks so far.

00:00:04.660 --> 00:00:12.860
We have Text Input and Output components inside of a parent component called CardFront.

00:00:12.890 --> 00:00:17.440
Data can be passed between two sibling components.

00:00:17.440 --> 00:00:23.020
So we can't move the text from the Input to the Output components directly.

00:00:23.020 --> 00:00:26.740
Instead, we have to communicate through the parent component,

00:00:26.740 --> 00:00:29.240
which is Card Front.

00:00:29.790 --> 00:00:35.350
We already know how to pass data from a child to a parent component.

00:00:35.350 --> 00:00:41.470
We do this by emitting a custom event and we're already doing this in our app,

00:00:41.470 --> 00:00:43.640
so we have this part covered.

00:00:43.640 --> 00:00:47.055
Next, we need a way to do this all the way round.

00:00:47.055 --> 00:00:53.215
The parent component needs to pass this data back down to a child component.

00:00:53.215 --> 00:00:56.965
In our case, to the Text Output component.

00:00:56.965 --> 00:00:59.155
We can do this with props,

00:00:59.155 --> 00:01:01.615
which is short for properties.

00:01:01.615 --> 00:01:06.775
Props are custom attributes for passing data down to child components.

00:01:06.775 --> 00:01:09.910
If you come from a react.js background,

00:01:09.910 --> 00:01:11.815
it works in the same way.

00:01:11.815 --> 00:01:14.920
The first thing to do is to declare inside of

00:01:14.920 --> 00:01:18.870
the child component the props we expect to receive.

00:01:18.870 --> 00:01:23.375
So if we go over to the TextOutput.vue file,

00:01:23.375 --> 00:01:26.135
and then down to the Script.

00:01:26.135 --> 00:01:29.525
We can then add our Props inside here.

00:01:29.525 --> 00:01:33.620
The props option is an array of prop names,

00:01:33.620 --> 00:01:36.930
which we expect to be passed as a string.

00:01:37.550 --> 00:01:45.470
I've called this prop the Display Text to reflect the data which will pass down to it.

00:01:45.470 --> 00:01:50.560
We can go back up to our templates and remove the sample text.

00:01:50.560 --> 00:01:54.480
Then in the place of this we can add the name of the prop,

00:01:54.480 --> 00:01:56.490
which is Display Text.

00:01:56.490 --> 00:01:58.775
So once this data is passed down,

00:01:58.775 --> 00:02:01.700
this will be displayed inside of our template.

00:02:01.700 --> 00:02:08.015
We can now add this prop over in the parent component, which is CardFront.vue.

00:02:08.015 --> 00:02:13.535
So to begin, we add a custom attributes inside the Output component,

00:02:13.535 --> 00:02:16.040
which is the name of the prop.

00:02:16.040 --> 00:02:20.310
So I'm going to add, Display Text inside here.

00:02:22.690 --> 00:02:27.380
So this test is just going to add a string of, Hello.

00:02:27.380 --> 00:02:30.080
So now make sure the development server is running.

00:02:30.080 --> 00:02:31.790
Now if we go over,

00:02:31.790 --> 00:02:35.345
we should now see the value of the prop on the screen.

00:02:35.345 --> 00:02:41.215
So this value is being passed down to the child component of Text Output.

00:02:41.215 --> 00:02:45.965
We then tell vue.js which props we expect to receive,

00:02:45.965 --> 00:02:49.985
and then we can output them inside our templates.

00:02:49.985 --> 00:02:51.860
However, in this case,

00:02:51.860 --> 00:02:55.650
this only works because we've used a string.

00:02:56.260 --> 00:02:59.510
If we try to use dynamic data,

00:02:59.510 --> 00:03:03.545
such as our textBoxValue1.

00:03:03.545 --> 00:03:08.730
So we copy that and paste that in.

00:03:09.590 --> 00:03:11.735
We see that this won't work.

00:03:11.735 --> 00:03:16.135
We just get the string value rather than the dynamic data.

00:03:16.135 --> 00:03:18.230
If the data is dynamic,

00:03:18.230 --> 00:03:21.935
we need to use v-binds or the shorthand syntax.

00:03:21.935 --> 00:03:24.320
So just before Display Text,

00:03:24.320 --> 00:03:30.990
we can add the short syntax of the colon, now save that.

00:03:30.990 --> 00:03:33.540
Now if we go over to the browser,

00:03:33.540 --> 00:03:39.240
and we start typing text inside of the first text input box.

00:03:41.560 --> 00:03:47.015
We can see the changes are now reflected over in the right-hand side.

00:03:47.015 --> 00:03:49.460
We try this with the second one.

00:03:49.460 --> 00:03:52.040
We see nothing happens because we haven't added

00:03:52.040 --> 00:03:55.885
any props to the second or third component yet.

00:03:55.885 --> 00:03:59.300
So let's go over to the CardFront and we can do this

00:03:59.300 --> 00:04:03.140
now for the second and third components.

00:04:03.140 --> 00:04:10.270
So copy the props and add this in the second and third components.

00:04:10.270 --> 00:04:14.520
To make these unique we need to add to the date property or

00:04:14.520 --> 00:04:20.700
textBoxValue2 and textBoxValue3. So save that.

00:04:20.700 --> 00:04:24.479
Now we should have three independent components.

00:04:25.580 --> 00:04:32.430
So box1, box2, and finally box3.

00:04:32.430 --> 00:04:36.425
So these are all working independently with their own data.

00:04:36.425 --> 00:04:38.330
All three of these text areas work

00:04:38.330 --> 00:04:42.370
independently because they have a different data source.

00:04:42.370 --> 00:04:47.620
This is how we can use props to pass data down to child components.

00:04:47.620 --> 00:04:53.015
It's important that we understand the props form a one-way down binding,

00:04:53.015 --> 00:04:55.805
meaning that if the parent data updates.

00:04:55.805 --> 00:04:59.995
The data will automatically pass down to the child.

00:04:59.995 --> 00:05:03.145
However, it must not work the other way around.

00:05:03.145 --> 00:05:07.670
We should not change the value of the prop inside of the child component,

00:05:07.670 --> 00:05:10.700
we should treat them as read-only.

00:05:10.700 --> 00:05:14.840
If we need to change the value of a prop which is being passed down,

00:05:14.840 --> 00:05:17.405
we should not do it directly.

00:05:17.405 --> 00:05:20.855
If we want to use a prop and then change the value,

00:05:20.855 --> 00:05:25.825
we should first setup a data property inside of the child components.

00:05:25.825 --> 00:05:29.630
We should then assign the dates property as the initial value of

00:05:29.630 --> 00:05:35.700
the prop and then change your data rather than changing the prop value directly.
