WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.270 --> 00:00:06.540
Now we know how to work with looping through objects,

00:00:06.540 --> 00:00:10.809
let's structure this so it's more suited to our application.

00:00:10.940 --> 00:00:15.030
We'll also add a unique key to each item and make

00:00:15.030 --> 00:00:19.275
sure each navigation item has a URL to link to.

00:00:19.275 --> 00:00:24.280
To begin, I'm going to remove the full list item from the last video.

00:00:25.190 --> 00:00:28.635
Then replace this with a standard list item,

00:00:28.635 --> 00:00:32.560
which outputs the navLink dot name.

00:00:32.870 --> 00:00:36.670
This will simply show the names from our links,

00:00:36.670 --> 00:00:38.705
and because this is a nav bar,

00:00:38.705 --> 00:00:40.940
we also want to make these links.

00:00:40.940 --> 00:00:45.340
Let's go ahead and surround the nav link with a tags.

00:00:45.340 --> 00:00:48.315
Add them inside the list items.

00:00:48.315 --> 00:00:51.609
At the a tag with the href,

00:00:52.460 --> 00:00:58.360
and just leave this empty for now and then close off the a tag.

00:01:00.010 --> 00:01:04.505
Now let's add some links to our object to link to,

00:01:04.505 --> 00:01:09.010
back over in the nav links in the App dot js.

00:01:09.010 --> 00:01:13.270
After the ID most you want to add a URL to link to.

00:01:13.270 --> 00:01:17.855
This is just going to be a dummy link just to test its working,

00:01:17.855 --> 00:01:23.100
after the comma we'll add the URL and add a link,

00:01:23.100 --> 00:01:25.990
I'm just going to use Google for this example.

00:01:26.600 --> 00:01:30.650
Type in H-T-T-P-S colon forward slash,

00:01:30.650 --> 00:01:35.610
forward slash, and then www dot google dot com.

00:01:36.440 --> 00:01:39.530
Then we can copy this and paste this in,

00:01:39.530 --> 00:01:41.910
in the four links.

00:01:43.490 --> 00:01:47.820
I'll set the second one to go to Amazon dot com,

00:01:49.010 --> 00:01:52.810
the third one to go to eBay,

00:01:55.820 --> 00:01:59.890
and then the forth form we will add as Facebook.

00:02:02.120 --> 00:02:08.180
Now we have a URL to add to our a tags in HTML.

00:02:08.180 --> 00:02:11.290
Remember from the last section we said that we can not use

00:02:11.290 --> 00:02:16.745
the double curly braces to add reactive data to HTML attributes like this.

00:02:16.745 --> 00:02:20.640
It could add the double curly braces,

00:02:20.640 --> 00:02:25.420
and then add navlink dot URL.

00:02:25.730 --> 00:02:32.185
For this to work, we need to use the V bind directive to add to our URL,

00:02:32.185 --> 00:02:37.400
or I'm going to use the shorthand technique of just the colon.

00:02:37.500 --> 00:02:44.120
We also need to remove the double curly braces for this to work inside of an attribute.

00:02:45.530 --> 00:02:50.590
Let's save this, and if we go over to our navigation links in the browser,

00:02:50.590 --> 00:02:54.170
we can click on the links and test the work.

00:02:55.940 --> 00:02:59.080
They all appear to be working fine.

00:02:59.080 --> 00:03:01.490
We'll just try one more.

00:03:02.030 --> 00:03:06.375
Great. Now the links work as we want.

00:03:06.375 --> 00:03:09.400
It's time to now add some styling to the links.

00:03:09.400 --> 00:03:12.835
Since already we have Bootstrap linked to our project.

00:03:12.835 --> 00:03:16.700
We can add some Bootstrap classes to our navigation.

00:03:16.700 --> 00:03:20.155
First of all, if we open up the URL tag,

00:03:20.155 --> 00:03:24.130
we can add a Bootstrap class of nav,

00:03:26.600 --> 00:03:30.905
and then in the list items we can also add a cluster too.

00:03:30.905 --> 00:03:35.730
Again, this is a Bootstrap class of nav hyphen item.

00:03:38.450 --> 00:03:43.740
Then inside the links will add a class of navLink,

00:03:46.340 --> 00:03:51.890
and then if you want to add some horizontal lines in place just to break up our app.

00:03:51.890 --> 00:03:58.145
The first one I'm going to add just underneath the level one heading of our app name,

00:03:58.145 --> 00:04:01.500
so add hr inside there.

00:04:02.440 --> 00:04:07.220
The second one is just before the closing div with the ID of

00:04:07.220 --> 00:04:16.940
navigation and this will add a line above and also below our navigation links.

00:04:17.940 --> 00:04:25.780
The final thing I want to do to our navigation is to add a unique key to each list item.

00:04:25.780 --> 00:04:28.465
We touched on this a few videos ago.

00:04:28.465 --> 00:04:33.955
But this time we now have access to an ID inside of our nav links object.

00:04:33.955 --> 00:04:39.585
This makes for an ideal key because we have each value set to be unique.

00:04:39.585 --> 00:04:43.320
Now let's go back over to our HTML.

00:04:43.880 --> 00:04:51.680
Now let's add this key inside the template element just after the for loop.

00:04:52.140 --> 00:04:58.100
Bind the key and set this equal to navLink dot ID.

00:04:59.810 --> 00:05:02.350
In theory they should work.

00:05:02.350 --> 00:05:04.720
But however, there will be a small problem,

00:05:04.720 --> 00:05:08.660
which we'll see if we go over to the developer tools.

00:05:10.070 --> 00:05:13.480
Right-click and inspect.

00:05:13.830 --> 00:05:18.745
We see the red warning saying template cannot be keyed.

00:05:18.745 --> 00:05:22.190
Places key on real elements instead.

00:05:22.190 --> 00:05:26.350
We get the warning that we need to use this on a real element because

00:05:26.350 --> 00:05:31.450
template is used as a container for its templated contents.

00:05:31.450 --> 00:05:36.170
It acts as a wrapper rather than a HTML element.

00:05:36.170 --> 00:05:39.950
To fix this, we can change the template tags to something else,

00:05:39.950 --> 00:05:47.795
such as a div and save that.

00:05:47.795 --> 00:05:50.915
Now if we go back to the console and refresh,

00:05:50.915 --> 00:05:56.315
there now goes away and we have a unique key working on our navigation.

00:05:56.315 --> 00:06:02.140
That's now our navigation completed and also our second view instance.

00:06:02.140 --> 00:06:04.595
We'll build on this in the next video,

00:06:04.595 --> 00:06:06.260
where we'll look at how we can access

00:06:06.260 --> 00:06:10.920
a view instance externally from another view instance.
