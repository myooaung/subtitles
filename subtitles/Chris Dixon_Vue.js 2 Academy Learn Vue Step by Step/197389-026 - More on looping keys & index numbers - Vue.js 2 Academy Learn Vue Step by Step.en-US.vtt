WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.490 --> 00:00:06.810
In this video, we're going to take a little bit of a deeper look into using fore-loops.

00:00:06.810 --> 00:00:12.915
We're going to show you how to add keys and also how to add index numbers to each item.

00:00:12.915 --> 00:00:15.540
Sometimes when we loop through an array,

00:00:15.540 --> 00:00:19.875
just like when we loop through all our guests names and display them to the screen,

00:00:19.875 --> 00:00:26.175
we may have a need to grab the index number for each item inside of the array.

00:00:26.175 --> 00:00:30.150
The index number is the position of each item.

00:00:30.150 --> 00:00:33.270
For example, the first name added is position

00:00:33.270 --> 00:00:37.620
zero because arrays always begin at position zero.

00:00:37.620 --> 00:00:41.775
The second name added will be at position one, and so on.

00:00:41.775 --> 00:00:47.825
We have access to this index number in VUGS when using a v-for loop.

00:00:47.825 --> 00:00:53.530
All we need to do is add a second argument to the v-for loop like this.

00:00:53.530 --> 00:00:57.120
Make sure you're in the index.html.

00:00:57.120 --> 00:01:03.340
If we scroll down to the bottom, we have the v-for loop to loop through the guest names.

00:01:03.340 --> 00:01:05.895
The inside this v-for loop,

00:01:05.895 --> 00:01:07.995
we can add our second argument.

00:01:07.995 --> 00:01:11.185
We need to rap them inside the brackets.

00:01:11.185 --> 00:01:17.560
The first argument is still the name which we give to each value inside of the loop.

00:01:17.560 --> 00:01:21.575
Then the second is a name we want to give to the index number.

00:01:21.575 --> 00:01:23.720
Both of these names are totally up to us.

00:01:23.720 --> 00:01:25.505
We can choose whatever we want,

00:01:25.505 --> 00:01:29.070
but it's best to keep them more descriptive if possible.

00:01:29.170 --> 00:01:31.770
Now the name for the index is set.

00:01:31.770 --> 00:01:35.660
We can add this using the double curly braces.

00:01:35.660 --> 00:01:38.270
Just after our formative name,

00:01:38.270 --> 00:01:44.160
we're going to output inside the brackets the value of our index.

00:01:45.770 --> 00:01:49.310
Now if we save and go over to the browser,

00:01:49.310 --> 00:01:53.880
we can see the index position of each name.

00:01:54.070 --> 00:01:56.750
We learned early that we can also add

00:01:56.750 --> 00:02:00.545
JavaScript inside of this double curly brace syntax.

00:02:00.545 --> 00:02:03.620
Let's take advantage of this by going back to

00:02:03.620 --> 00:02:07.505
the index and adding plus one to the index number.

00:02:07.505 --> 00:02:12.440
This means our index now begins at position one rather than zero.

00:02:12.440 --> 00:02:17.970
We add index plus one, and save that.

00:02:17.970 --> 00:02:23.070
Now if we go back to our application and add some names,

00:02:24.730 --> 00:02:30.050
we now have the index number matching the number of guests.

00:02:30.290 --> 00:02:34.455
Next, I want to take a look at adding keys to our loops.

00:02:34.455 --> 00:02:36.950
We can also allow view to better track

00:02:36.950 --> 00:02:42.295
our array values by providing a unique key to each of the items.

00:02:42.295 --> 00:02:47.420
It's recommended to use a unique key with v-for wherever possible.

00:02:47.420 --> 00:02:52.460
The default behavior view uses when updating a list of elements,

00:02:52.460 --> 00:02:59.005
such as an array, is the patch and element in place at a particular index number.

00:02:59.005 --> 00:03:01.575
If [inaudible] adds an array,

00:03:01.575 --> 00:03:04.700
it patches this extra item in place at

00:03:04.700 --> 00:03:07.550
the designated index position rather than

00:03:07.550 --> 00:03:10.940
move [inaudible] elements around to the correct order.

00:03:10.940 --> 00:03:13.835
This makes for an efficient way of doing things,

00:03:13.835 --> 00:03:15.755
but we can go one better.

00:03:15.755 --> 00:03:20.780
We can make sure each item in the array has a unique identifier,

00:03:20.780 --> 00:03:24.390
which we can reference if we need to make a change.

00:03:24.410 --> 00:03:30.534
View can then track each item and can move things about when updating,

00:03:30.534 --> 00:03:33.650
and even reuse items when needed.

00:03:33.650 --> 00:03:38.005
At any unique key means view is now aware of the items,

00:03:38.005 --> 00:03:43.670
rather than just knowing which index position it needs to patch in a new value.

00:03:43.670 --> 00:03:49.960
This makes for safer and more predictable behavior when changing values in an array.

00:03:49.960 --> 00:03:54.560
We can add key by going over to our for-loop.

00:03:55.440 --> 00:03:59.450
We use colon for dynamic binding,

00:03:59.450 --> 00:04:02.965
and the name we give to this key is important too.

00:04:02.965 --> 00:04:06.640
It must link up to some existing reactive data.

00:04:06.640 --> 00:04:09.620
If we try to add a random name which is not

00:04:09.620 --> 00:04:13.135
declared in the view instance, we will get an error.

00:04:13.135 --> 00:04:18.150
Let's just type in random name and then save that.

00:04:18.150 --> 00:04:22.510
Then if we go to the app and add a name to the guest list,

00:04:25.120 --> 00:04:29.130
open up the console, we'll see an error.

00:04:30.950 --> 00:04:35.585
We can use an existing data such as our guest name.

00:04:35.585 --> 00:04:39.000
Let's type a name inside the key.

00:04:41.780 --> 00:04:45.290
Now if we save that and go over to the browser.

00:04:45.290 --> 00:04:49.625
If we hit refresh, we can now see that the error message is being removed.

00:04:49.625 --> 00:04:53.510
Now view recognizes this name as a date property.

00:04:53.510 --> 00:04:58.940
Now this may not be ideal because we may have more than one person with the same name.

00:04:58.940 --> 00:05:04.280
We could set up an object to hold a unique ID with each guest name.

00:05:04.280 --> 00:05:08.450
Also open new date property to hold a unique value,

00:05:08.450 --> 00:05:10.530
and then use it as a key.

00:05:10.530 --> 00:05:14.760
For now, I'm just going to leave and come back to this in a few videos time.

00:05:14.760 --> 00:05:18.635
The main thing to understand is that when creating a for-loop,

00:05:18.635 --> 00:05:24.420
it really is best practice to add a key to a list of values wherever possible.
