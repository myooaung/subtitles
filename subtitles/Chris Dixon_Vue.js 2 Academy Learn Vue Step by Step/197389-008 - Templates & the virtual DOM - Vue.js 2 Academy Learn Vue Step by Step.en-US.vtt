WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.190 --> 00:00:04.440
In the last video, we looked at how to create

00:00:04.440 --> 00:00:10.110
a Vue instance and also how to add reactive data to our app.

00:00:10.110 --> 00:00:13.410
How does Vue js manages data to make it

00:00:13.410 --> 00:00:16.965
reactive and update our page when there is a change?

00:00:16.965 --> 00:00:20.940
But let's take a little look at what goes on in the background.

00:00:20.940 --> 00:00:24.890
If we go to the browser developer tools inside of Chrome,

00:00:24.890 --> 00:00:29.155
we can access these with a right-click and then select "Inspect".

00:00:29.155 --> 00:00:33.360
If will then select the Div with the class of card block,

00:00:33.360 --> 00:00:38.075
we can take a little look at the contents and we can see that the event title,

00:00:38.075 --> 00:00:44.735
the event dates, and the event description is added between P-tags or headings.

00:00:44.735 --> 00:00:50.165
So the HTML output is different to what we have typed inside of the Editor.

00:00:50.165 --> 00:00:53.945
We don't have any of the double curly brace syntax

00:00:53.945 --> 00:00:57.065
and we cannot see the names of our data properties,

00:00:57.065 --> 00:00:59.620
such as event title.

00:00:59.620 --> 00:01:02.750
This is because Vue.js takes

00:01:02.750 --> 00:01:08.305
our HTML code and creates a template based on it behind the scenes.

00:01:08.305 --> 00:01:15.965
This templates, which is created is unused to render to the DOM with valid HTML code.

00:01:15.965 --> 00:01:19.130
Using a template instead of directly updating

00:01:19.130 --> 00:01:23.480
the DOM with our code also provides additional benefits.

00:01:23.480 --> 00:01:25.295
When our data, for example,

00:01:25.295 --> 00:01:27.455
is updated inside of the app,

00:01:27.455 --> 00:01:31.570
Vue then works out which parts of the template is changed.

00:01:31.570 --> 00:01:35.000
Since Vue is aware of exactly which part is changed,

00:01:35.000 --> 00:01:38.605
it will only re-render this change part of the template.

00:01:38.605 --> 00:01:43.490
So by only re-rendering the minimum amount of code to the real DOM.

00:01:43.490 --> 00:01:47.570
This has the effect of making our Vue.js applications really

00:01:47.570 --> 00:01:50.270
fast as manipulating the DOM

00:01:50.270 --> 00:01:53.905
is typically one of the most expensive operations to perform.

00:01:53.905 --> 00:01:55.830
If you're not familiar with the DOM,

00:01:55.830 --> 00:01:58.625
it stands for Document Object Model.

00:01:58.625 --> 00:02:02.195
It's a structured representation of a documents.

00:02:02.195 --> 00:02:05.570
In our case, the document being the webpage.

00:02:05.570 --> 00:02:07.400
In most simple cases,

00:02:07.400 --> 00:02:09.290
the DOM, which is created,

00:02:09.290 --> 00:02:11.195
looks like our HTML code,

00:02:11.195 --> 00:02:16.145
which were right and here we see a typical visual representations of the DOM,

00:02:16.145 --> 00:02:20.570
which is like a tree of objects starting with the HTML elements

00:02:20.570 --> 00:02:25.300
on the top and then we have the head section and the body section,

00:02:25.300 --> 00:02:28.010
and then all of our nested elements contained

00:02:28.010 --> 00:02:30.740
within the head section of the body section.

00:02:30.740 --> 00:02:35.495
So this should look familiar to you if you've had some HTML experience.

00:02:35.495 --> 00:02:39.170
Because obtained need DOM elements takes time,

00:02:39.170 --> 00:02:42.940
Vue.js also uses what is called the virtual DOM.

00:02:42.940 --> 00:02:44.610
These templates which Vue.

00:02:44.610 --> 00:02:48.980
js creates a compiled into virtual DOM render functions.

00:02:48.980 --> 00:02:54.695
The virtual DOM is like a copy of the real DOM and this allows view behind the scenes

00:02:54.695 --> 00:02:56.390
to compare the real DOM with

00:02:56.390 --> 00:03:00.830
the virtual DOM and only updates where and when is necessary.

00:03:00.830 --> 00:03:06.070
So don't worry too much if you don't quite understand what this all means for now.

00:03:06.070 --> 00:03:09.470
We get plenty of practice with how Vue works and

00:03:09.470 --> 00:03:12.935
how it renders templates as you go for the course.

00:03:12.935 --> 00:03:17.950
So this is how Vue.js works with templates and also the virtual DOM.

00:03:17.950 --> 00:03:20.870
I just wanted to give you a little background into what is

00:03:20.870 --> 00:03:24.335
going on behind the scenes when we're writing our code.

00:03:24.335 --> 00:03:30.030
Next up, we'll look at two-way data mining using a V model directive.
