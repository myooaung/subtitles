WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.040 --> 00:00:06.495
We are not limited to adding transitions on animations to just elements.

00:00:06.495 --> 00:00:11.610
We can even transition between components when we click on the menu links.

00:00:11.610 --> 00:00:14.805
It starts with the familiar transition wrapper,

00:00:14.805 --> 00:00:18.300
which we can still use with the keep-alive tags.

00:00:18.300 --> 00:00:21.300
Let's begin over in the App.vue.

00:00:21.300 --> 00:00:25.725
If we locate this keep-alive section with the components,

00:00:25.725 --> 00:00:30.540
I'm just going to create some space above and also below.

00:00:30.540 --> 00:00:37.605
Then we're going to create the familiar transition wrapper. Add this at the start.

00:00:37.605 --> 00:00:39.480
Then on the closing tag,

00:00:39.480 --> 00:00:45.420
just after the final keep-alive tag, just like that.

00:00:45.420 --> 00:00:48.035
Then I'm going to reuse the fade name,

00:00:48.035 --> 00:00:54.040
take advantage of the styles we've already set down at the bottom. Just here.

00:00:54.040 --> 00:00:59.165
Let's do this by adding the transition name inside the opening tag.

00:00:59.165 --> 00:01:04.460
The name equal to the fade, and then give them a same.

00:01:04.460 --> 00:01:06.110
Now, if we go over to the browser,

00:01:06.110 --> 00:01:08.365
we can take a look at the effects.

00:01:08.365 --> 00:01:11.525
Now if we click on the different pages,

00:01:11.525 --> 00:01:14.900
we can see that there is a transition happening.

00:01:14.900 --> 00:01:18.290
But if we take a closer look, we can see a problem.

00:01:18.290 --> 00:01:20.090
To show this in more detail,

00:01:20.090 --> 00:01:22.310
I'm going to zoom out.

00:01:23.690 --> 00:01:27.305
Then now, if we click on the different web pages,

00:01:27.305 --> 00:01:32.110
we can see that the web page starts at the bottom and then jumps.

00:01:33.560 --> 00:01:36.690
It's now back to full size.

00:01:36.690 --> 00:01:40.495
This is not the behavior which we're expecting.

00:01:40.495 --> 00:01:43.730
The reason is happened is because by default,

00:01:43.730 --> 00:01:50.425
the transition elements entering and leave phase both happen at the same time.

00:01:50.425 --> 00:01:53.060
As a new component enters,

00:01:53.060 --> 00:01:56.420
the space is still occupied by the all components.

00:01:56.420 --> 00:01:58.670
Then once the old component leaves,

00:01:58.670 --> 00:02:01.550
the space is then created for the new components,

00:02:01.550 --> 00:02:04.525
causing and end to jump into place.

00:02:04.525 --> 00:02:10.240
Fortunately, Vue just write this with a transition mode to help deal with this.

00:02:10.240 --> 00:02:15.420
We can add the mode as an attribute to the transition opening tag.

00:02:15.430 --> 00:02:19.770
Just after the name, I'm going to add the mode.

00:02:20.060 --> 00:02:24.655
Here, we can either set in-out or out-in.

00:02:24.655 --> 00:02:31.440
Let's start with in-out and take a look, and give that refresh.

00:02:34.160 --> 00:02:37.475
Now, we can see there's a bit of a delay,

00:02:37.475 --> 00:02:39.785
but the page being changed.

00:02:39.785 --> 00:02:44.900
In-out will not be useful for those because it brings in the new component first,

00:02:44.900 --> 00:02:47.905
and then removes the existing components.

00:02:47.905 --> 00:02:56.130
Let's try out-in, and let's see how this is looking.

00:02:56.130 --> 00:03:02.430
If we go back to the browser and we'll zoom out again just to make sure.

00:03:02.900 --> 00:03:06.075
Great. Now, when we select the different pages,

00:03:06.075 --> 00:03:09.800
we can see that the component is switched in the same position,

00:03:09.800 --> 00:03:14.065
rather than beginning at the bottom and then jumping back into place.

00:03:14.065 --> 00:03:16.425
This is exactly what we want.

00:03:16.425 --> 00:03:18.755
The old component is first removed,

00:03:18.755 --> 00:03:22.230
then the new component begins to fade in.
