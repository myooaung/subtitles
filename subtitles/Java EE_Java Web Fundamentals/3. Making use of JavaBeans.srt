1
00:00:01,825 --> 00:00:05,330
The primary way of passing data to a JavaServer Page and having

2
00:00:05,330 --> 00:00:08,825
that data visible on the page is to use JavaBeans.

3
00:00:08,825 --> 00:00:12,805
The expression language has quite a rich syntax for accessing these beans.

4
00:00:12,805 --> 00:00:16,805
So using the expression language, we can also get to the bean properties,

5
00:00:16,805 --> 00:00:19,845
and we can use either a dot syntax, or a square bracket syntax.

6
00:00:19,845 --> 00:00:22,845
So it's very similar to the way that JavaScript works.

7
00:00:22,845 --> 00:00:24,855
So if we have a user bean with a name property,

8
00:00:24,855 --> 00:00:28,765
we can say user.name, or user, square brackets,

9
00:00:28,765 --> 00:00:32,775
and then place the name property in quotes.

10
00:00:32,775 --> 00:00:35,486
We can also use the square bracket syntax to access

11
00:00:35,486 --> 00:00:37,835
things like lists or arrays or maps.

12
00:00:37,835 --> 00:00:42,805
We can also use the square bracket syntax to access nested beans.

13
00:00:42,805 --> 00:00:47,815
So for example, if we have a name bean that has a first property,

14
00:00:47,815 --> 00:00:49,775
or a name bean that has a second property,

15
00:00:49,775 --> 00:00:52,775
for example, we can say a, brackets, name.first,

16
00:00:52,775 --> 00:00:55,835
or a, brackets, name, brackets, first, and we can nest this arbitrarily.

17
00:00:55,835 --> 00:00:59,845
So we can go down as many levels of beans as we need to.

18
00:00:59,845 --> 00:01:04,785
The expression language also gives us access to a set of built-in objects,

19
00:01:04,785 --> 00:01:06,785
also known as implicit objects.

20
00:01:06,785 --> 00:01:07,138
So for example,

21
00:01:07,138 --> 00:01:09,495
if we need to reach in and get values from the

22
00:01:09,495 --> 00:01:11,845
header as a header values property,

23
00:01:11,845 --> 00:01:13,855
there's also a header property that we can get out,

24
00:01:13,855 --> 00:01:15,845
so we can say header.host to get out the host header,

25
00:01:15,845 --> 00:01:19,805
or header, square bracket, host to also get at the host header.

26
00:01:19,805 --> 00:01:21,825
Things like pageContext or the session,

27
00:01:21,825 --> 00:01:26,765
so all of these things are available within the expression language itself.

28
00:01:26,765 --> 00:01:29,795
So in this code, we've introduced a new bean.

29
00:01:29,795 --> 00:01:31,835
So if we look at the ApplicationSettings bean,

30
00:01:31,835 --> 00:01:34,765
rather than just getting the name from here,

31
00:01:34,765 --> 00:01:36,825
we've introduced another class called CssClass,

32
00:01:36,825 --> 00:01:41,795
and the idea behind CssClass is that we can store CSS information

33
00:01:41,795 --> 00:01:43,825
that we need to use for a particular thing.

34
00:01:43,825 --> 00:01:45,825
So in this case, we're just using the name,

35
00:01:45,825 --> 00:01:49,775
similar to what we were using previously.

36
00:01:49,775 --> 00:01:53,835
To use this in the servlet, we now create a CssClass,

37
00:01:53,835 --> 00:01:57,942
we set the name within our class to be, in this case,

38
00:01:57,942 --> 00:02:03,855
blueUser again, and then add that CssClass onto the applicationSettings,

39
00:02:03,855 --> 00:02:07,855
and then store the applicationSettings object within the ServletContext.

40
00:02:07,855 --> 00:02:09,785
So we now have a nested bean.

41
00:02:09,785 --> 00:02:10,845
So to get at the name,

42
00:02:10,845 --> 00:02:14,815
we need to go through the applicationSettings object called app,

43
00:02:14,815 --> 00:02:22,785
from there to the CssClass, then from there to the actual name itself.

44
00:02:22,785 --> 00:02:23,835
So now to use the name,

45
00:02:23,835 --> 00:02:26,845
we have to go through the formCssClass and get the name property.

46
00:02:26,845 --> 00:02:28,785
So we treat this as a nested bean.

47
00:02:28,785 --> 00:02:33,855
So we say app.formCssClass .name.

48
00:02:33,855 --> 00:02:37,855
Then if we go to the browser and refresh,

49
00:02:37,855 --> 00:02:41,785
then everything works, and just to prove that it is still working,

50
00:02:41,785 --> 00:02:47,461
if we go back to the ApplicationSettings to where we set the

51
00:02:47,461 --> 00:02:48,785
applicationSettings inside the servlet,

52
00:02:48,785 --> 00:02:53,785
and change the name from blueUser to redUser,

53
00:02:53,785 --> 00:02:59,775
and redeploy the application, and then go to the browser and refresh,

54
00:02:59,775 --> 00:03:02,855
and we should get red, and sure enough, we do.

55
00:03:02,855 --> 00:03:06,805
We can also access the nested properties of the bean

56
00:03:06,805 --> 00:03:08,835
through the square bracket syntax.

57
00:03:08,835 --> 00:03:12,785
So rather than just saying app.formCssClass .name,

58
00:03:12,785 --> 00:03:15,835
we could say app,

59
00:03:15,835 --> 00:03:21,825
and then use square brackets and quotes to get the name that way,

60
00:03:21,825 --> 00:03:26,805
and then say .name in the same way, and again if we go back into the browser,

61
00:03:26,805 --> 00:03:27,795
nothing should have changed.

62
00:03:27,795 --> 00:03:31,815
If I refresh, sure enough, the page still works,

63
00:03:31,815 --> 00:03:36,805
and we can also go one step further and put square

64
00:03:36,805 --> 00:03:46,815
brackets around the name property, and again save and go back to the browser,

65
00:03:46,815 --> 00:03:47,845
and sure enough, things are the same.

66
00:03:47,845 --> 00:03:51,269
So we also saw that we can use the built-in intrinsics to

67
00:03:51,269 --> 00:03:53,815
get the data within the application.

68
00:03:53,815 --> 00:03:55,795
An example would be the init parameters.

69
00:03:55,795 --> 00:04:00,282
So here we have an expression to get the init parameter,

70
00:04:00,282 --> 00:04:03,845
ProductName, that we can use as the title of this application,

71
00:04:03,845 --> 00:04:06,775
and we can change that to use an expression.

72
00:04:06,775 --> 00:04:16,855
So here we can say, dollar, brace, and inside here say initParam.ProductName,

73
00:04:16,855 --> 00:04:22,294
and if we go into the web.xml file and change the product name from

74
00:04:22,294 --> 00:04:25,785
My Application to using the expression language,

75
00:04:25,785 --> 00:04:29,805
redeploy the application, and if we go the browser,

76
00:04:29,805 --> 00:04:31,795
we can see currently it says My Application,

77
00:04:31,795 --> 00:04:35,795
if I refresh the page, now it says Using The Expression Language.

78
00:04:35,795 --> 00:04:37,845
So within the page itself,

79
00:04:37,845 --> 00:04:43,825
we can access these intrinsics within expressions using the expression language.

80
00:04:43,825 --> 00:04:46,785
So we've added some tabs to the user interface,

81
00:04:46,785 --> 00:04:49,845
as we can see if we go to the browser.

82
00:04:49,845 --> 00:04:52,981
So here we can see Home, Profile, Messages,

83
00:04:52,981 --> 00:04:54,835
and Settings as the names of those tabs.

84
00:04:54,835 --> 00:04:58,845
The way this is set up is by adding an unordered list to the page,

85
00:04:58,845 --> 00:05:00,037
and within that list,

86
00:05:00,037 --> 00:05:04,835
each list item defines a tab; the text here is the name of the tab.

87
00:05:04,835 --> 00:05:07,835
Now it may be that we want to set those names dynamically

88
00:05:07,835 --> 00:05:10,825
depending on possibly the user's preferred language.

89
00:05:10,825 --> 00:05:13,855
So rather than English in this case, you might want French or Spanish.

90
00:05:13,855 --> 00:05:17,765
In that case, we'd like to get these strings from some value passed to us,

91
00:05:17,765 --> 00:05:21,815
maybe from the servlet where we can configure these values.

92
00:05:21,815 --> 00:05:27,765
To do that within this application, we've changed our ApplicationSettings class,

93
00:05:27,765 --> 00:05:31,805
and the ApplicationSettings class, we now have another property called tabNames,

94
00:05:31,805 --> 00:05:33,845
and tabNames returns to us an array of names.

95
00:05:33,845 --> 00:05:37,765
So we return the string array.

96
00:05:37,765 --> 00:05:39,855
We can set the values of the tab names inside ControllerServlet.

97
00:05:39,855 --> 00:05:44,495
So here we set the tab names, we set maybe SignIn and Home,

98
00:05:44,495 --> 00:05:45,845
Profile, and Settings.

99
00:05:45,845 --> 00:05:50,152
TabNames is then set inside the ApplicationSettings class and passed

100
00:05:50,152 --> 00:05:53,805
into the JavaServer Page though the ServletContext,

101
00:05:53,805 --> 00:05:56,889
which is the same as we had previously when we were just

102
00:05:56,889 --> 00:05:58,855
using this for the CSS class name.

103
00:05:58,855 --> 00:06:03,765
What that means is that inside index.jsp,

104
00:06:03,765 --> 00:06:04,835
rather than just using home here,

105
00:06:04,835 --> 00:06:08,805
we can use an expression to get a value from the string.

106
00:06:08,805 --> 00:06:12,765
So here we can have an expression, let's say dollar brace.

107
00:06:12,765 --> 00:06:19,795
Inside here we can say, app.tabNames 0,

108
00:06:19,795 --> 00:06:24,492
and then after we deploy we can go back to the browser and refresh and run,

109
00:06:24,492 --> 00:06:27,825
we see in Home here, we should see Sign in.

110
00:06:27,825 --> 00:06:30,472
We can then replace the rest of the tab names with the value from

111
00:06:30,472 --> 00:06:34,855
the bean passed in through the ServletContext.

112
00:06:34,855 --> 00:06:41,845
So after updating the JavaServer Page, we can go in back to the browser,

113
00:06:41,845 --> 00:06:48,000
and we see now we have Signin, Home, Profile, and Settings.

