WEBVTT
1
00:00:03.216 --> 00:00:08.146
All applications require some form of initialization.

2
00:00:08.146 --> 00:00:08.602
For example,

3
00:00:08.602 --> 00:00:11.829
we might need to pass connection strings to the application so the

4
00:00:11.829 --> 00:00:14.176
application knows how to connect to a database,

5
00:00:14.176 --> 00:00:18.186
and this connection string should not be hardcoded.

6
00:00:18.186 --> 00:00:22.146
These values change after the application has been deployed.

7
00:00:22.146 --> 00:00:27.136
They might change for testing purposes, might change for many reasons.

8
00:00:27.136 --> 00:00:32.216
For servlets, there are a couple of ways in which they can be initialized.

9
00:00:32.216 --> 00:00:36.146
One way of doing it is via the web.xml file,

10
00:00:36.146 --> 00:00:37.156
but another way of doing this,

11
00:00:37.156 --> 00:00:43.146
since the Servlet 3.0 specification has been released is to use annotation.

12
00:00:43.146 --> 00:00:47.176
We've seen annotations already, so here we have our WebServlet annotation,

13
00:00:47.176 --> 00:00:52.681
and we can add an initParams field to this annotation that will let us

14
00:00:52.681 --> 00:00:57.156
specify any initialization parameters that the servlet needs.

15
00:00:57.156 --> 00:01:00.226
This initParams value is a set of name-value pairs.

16
00:01:00.226 --> 00:01:01.036
So for example,

17
00:01:01.036 --> 00:01:04.062
here we can pass in a connection string with some value

18
00:01:04.062 --> 00:01:08.174
that identifies the server and the database to connect to

19
00:01:08.174 --> 00:01:10.146
using that connection string.

20
00:01:10.146 --> 00:01:13.176
Init parameters are typically used for the full life of the servlet,

21
00:01:13.176 --> 00:01:15.844
which means that we should get the values as early as

22
00:01:15.844 --> 00:01:18.166
possible and hold on to those values,

23
00:01:18.166 --> 00:01:22.644
and we typically do that by overriding the init method from

24
00:01:22.644 --> 00:01:26.600
GenericServlet and calling the getInitParameter helper method

25
00:01:26.600 --> 00:01:30.136
that's also provided by GenericServlet.

26
00:01:30.136 --> 00:01:34.186
To the getInitParameter method, we pass the name of the initialization parameter,

27
00:01:34.186 --> 00:01:38.226
in this case connstr, and that gives us back the value.

28
00:01:38.226 --> 00:01:40.972
And we put that value into a variable that we can then

29
00:01:40.972 --> 00:01:44.196
use in our various servlet methods, such as doGet and doPost.

30
00:01:44.196 --> 00:01:48.186
So this is the application more or less as we left it.

31
00:01:48.186 --> 00:01:51.156
The thing that's changed now is that we've added an app name,

32
00:01:51.156 --> 00:01:53.166
in this case My Application,

33
00:01:53.166 --> 00:01:57.156
and changed the XML so that as well as displaying the name of the user,

34
00:01:57.156 --> 00:02:01.156
it also outputs the name of the application.

35
00:02:01.156 --> 00:02:02.226
This has been deployed.

36
00:02:02.226 --> 00:02:05.176
If I go to the browser,

37
00:02:05.176 --> 00:02:09.226
we can see that the XML that's produced contains the product element,

38
00:02:09.226 --> 00:02:17.166
and that product element contains the text My Application.

39
00:02:17.166 --> 00:02:20.186
This is currently a hardcoded value,

40
00:02:20.186 --> 00:02:25.136
and we'd like to be able to change that using an initialization parameter.

41
00:02:25.136 --> 00:02:25.809
As we've seen,

42
00:02:25.809 --> 00:02:29.716
one way we can do this is by using the WebServlet annotation and

43
00:02:29.716 --> 00:02:33.216
changing it to contain an initParams parameter.

44
00:02:33.216 --> 00:02:39.186
So we can amend the annotation by adding initParams.

45
00:02:39.186 --> 00:02:43.156
InitParams is a collection of WebInitParam annotations,

46
00:02:43.156 --> 00:02:47.146
and each WebInitParam is a name-value pair.

47
00:02:47.146 --> 00:02:50.028
In this case we have the name of ProductName and

48
00:02:50.028 --> 00:02:54.136
the value of Welcome Application.

49
00:02:54.136 --> 00:02:58.136
We can grab that value by calling getInitParameter,

50
00:02:58.136 --> 00:03:03.186
and typically we do this inside the servlet's init method.

51
00:03:03.186 --> 00:03:12.166
So inside the servlet, I can override the init method.

52
00:03:12.166 --> 00:03:17.136
And inside here, I can say appName = getInitParameter,

53
00:03:17.136 --> 00:03:21.186
pass in the name of the init parameter, which is ProductName.

54
00:03:21.186 --> 00:03:24.196
Once we have that, we can redeploy the application,

55
00:03:24.196 --> 00:03:30.206
go to the browser, and if we refresh, we should see a different product name.

56
00:03:30.206 --> 00:03:35.156
There we go, it now says Welcome Application.

57
00:03:35.156 --> 00:03:37.216
Init parameters are provided this way, through the annotation,

58
00:03:37.216 --> 00:03:44.166
act as default values, and we can override those values in a web.xml file.

59
00:03:44.166 --> 00:03:47.176
So here, for example, we provide a servlet,

60
00:03:47.176 --> 00:03:49.156
we give the servlet a name and a class,

61
00:03:49.156 --> 00:03:54.136
and then we can provide a set of init parameters to that servlet.

62
00:03:54.136 --> 00:03:56.183
If we provide init parameters here with the same

63
00:03:56.183 --> 00:04:00.156
name that are on the annotations, then we override those values.

64
00:04:00.156 --> 00:04:03.441
Any parameters that we provide with different names get added to the set

65
00:04:03.441 --> 00:04:07.186
of init parameters that are available to the servlet.

66
00:04:07.186 --> 00:04:11.206
So here we can see we've added a parameter with the name of connstr,

67
00:04:11.206 --> 00:04:15.216
which is the same as the name provided inside the annotation.

68
00:04:15.216 --> 00:04:18.136
And we get at this thing in exactly the same way,

69
00:04:18.136 --> 00:04:22.226
by calling getInitParameter in our overwritten init method.

70
00:04:22.226 --> 00:04:25.186
When we add an init param annotation,

71
00:04:25.186 --> 00:04:30.136
that's typically used to give us default values for the init parameter.

72
00:04:30.136 --> 00:04:33.648
We can override those default values by providing init

73
00:04:33.648 --> 00:04:36.136
parameters inside the web.xml file.

74
00:04:36.136 --> 00:04:41.216
So if we go to the web.xml file, we can add an init parameter for our servlet.

75
00:04:41.216 --> 00:04:44.206
To do that, we have to add a full servlet entry,

76
00:04:44.206 --> 00:04:48.156
including the servlet name and the servlet mapping.

77
00:04:48.156 --> 00:04:58.166
So, here we say servlet, the servlet has a name,

78
00:04:58.166 --> 00:05:01.196
which we can call, let's say SimpleServlet,

79
00:05:01.196 --> 00:05:03.226
and it has a class.

80
00:05:03.226 --> 00:05:06.186
The class is the fully-qualified class name to our servlet,

81
00:05:06.186 --> 00:05:10.156
so com.mantiso .SimpleServlet.

82
00:05:10.156 --> 00:05:15.146
And then for this servlet, we provide any init parameters.

83
00:05:15.146 --> 00:05:17.226
Again, in here we provide a collection of init parameters,

84
00:05:17.226 --> 00:05:21.146
so we'd have for each one, init parameter,

85
00:05:21.146 --> 00:05:28.136
each of these has a param-name, which in this case will be ProductName,

86
00:05:28.136 --> 00:05:31.176
and a param-value.

87
00:05:31.176 --> 00:05:34.166
And we'll give the param-value a different product name,

88
00:05:34.166 --> 00:05:42.146
so Yet Another Product Name.

89
00:05:42.146 --> 00:05:45.216
Again, we need to provide a servlet mapping.

90
00:05:45.216 --> 00:05:49.226
So for this we can say servlet-mapping,

91
00:05:49.226 --> 00:05:52.216
and in here we have SimpleServlet and the URL pattern.

92
00:05:52.216 --> 00:05:54.523
And we choose a different URL pattern to one that's

93
00:05:54.523 --> 00:05:57.136
already been defined in the annotations,

94
00:05:57.136 --> 00:06:00.226
so let's just say other for simplicity here.

95
00:06:00.226 --> 00:06:06.166
We can then take this and redeploy it, and now if we go to the browser,

96
00:06:06.166 --> 00:06:10.196
in here we change the URL to say other,

97
00:06:10.196 --> 00:06:14.146
and indeed we see Yet Another Product Name as the name of the product.

98
00:06:14.146 --> 00:06:18.531
One thing you will have noticed is that we have a different URL pattern in the

99
00:06:18.531 --> 00:06:22.196
web.xml file than we have in the web servlet annotation.

100
00:06:22.196 --> 00:06:28.196
So here we have /home and * .do, whereas here we have /other.

101
00:06:28.196 --> 00:06:30.196
Retreating slightly here,

102
00:06:30.196 --> 00:06:36.156
if I try and change this to /home and redeploy the servlet,

103
00:06:36.156 --> 00:06:41.156
if I go to the browser and refresh this page,

104
00:06:41.156 --> 00:06:42.216
we'll get an error.

105
00:06:42.216 --> 00:06:47.916
And this error is happening because we have a servlet here

106
00:06:47.916 --> 00:06:52.206
called SimpleServlet to which we map /home.

107
00:06:52.206 --> 00:06:55.186
But here, we haven't named the servlet.

108
00:06:55.186 --> 00:06:58.506
We're still trying to map /home to whatever the

109
00:06:58.506 --> 00:07:02.226
internal name of this servlet is, which turns out to be the fully-qualified name.

110
00:07:02.226 --> 00:07:06.226
So in this case, com.mantiso .SimpleServlet,

111
00:07:06.226 --> 00:07:12.206
and you can't match the same URL pattern to two different servlets.

112
00:07:12.206 --> 00:07:15.196
To fix that, we can give the servlet a name.

113
00:07:15.196 --> 00:07:22.226
So if we call this servlet SimpleServlet,

114
00:07:22.226 --> 00:07:29.186
we can now change the mapping in the web.xml file from /other to /home.

115
00:07:29.186 --> 00:07:34.196
If we redeploy and go to the browser,

116
00:07:34.196 --> 00:07:37.926
we can refresh here and we're back where we were

117
00:07:37.926 --> 00:07:40.921
originally with a servlet called simple,

118
00:07:40.921 --> 00:07:44.216
and a URL mapping of home.

119
00:07:44.216 --> 00:07:50.156
And this is another example of the web.xml file overriding an annotation.

120
00:07:50.156 --> 00:07:53.186
So in the web.xml file, we're providing a URL pattern of /home,

121
00:07:53.186 --> 00:07:57.146
and that's overriding these URL patterns defined here.

122
00:07:57.146 --> 00:08:02.136
What this also means is that the * .do mapping will now have disappeared.

123
00:08:02.136 --> 00:08:09.854
So back in the browser, if I try and say, / foo.do?

124
00:08:09.854 --> 00:08:12.226
name=kevin, and again we'll get a 404.

125
00:08:12.226 --> 00:08:16.226
As well as per-servlet initialization parameters,

126
00:08:16.226 --> 00:08:21.176
there are also application-wide initialization parameters.

127
00:08:21.176 --> 00:08:24.186
These are provided via the ServletContext.

128
00:08:24.186 --> 00:08:29.156
The ServletContext allows the servlet to access its container.

129
00:08:29.156 --> 00:08:34.176
And we can use the ServletContext to do things such as logging, for example.

130
00:08:34.176 --> 00:08:37.216
We are using the ServletContext here to provide init params.

131
00:08:37.216 --> 00:08:42.512
This is done by providing a context-param section in the web.xml file,

132
00:08:42.512 --> 00:08:49.146
and then inside the servlet, calling getServletContext.getInitParameter,

133
00:08:49.146 --> 00:08:50.726
and that will access the values from the context-param

134
00:08:50.726 --> 00:08:54.226
section rather than from the servlet section.

135
00:08:54.226 --> 00:08:57.216
What this means is that we can provide, for example,

136
00:08:57.216 --> 00:09:01.495
a single connection string that can be used by all the servlets,

137
00:09:01.495 --> 00:09:03.691
and maybe single logging information or the app name,

138
00:09:03.691 --> 00:09:07.206
or whatever we'd need that's used across servlet boundaries.

139
00:09:07.206 --> 00:09:11.146
To use the ServletContext parameters,

140
00:09:11.146 --> 00:09:14.206
we need to add a context-param entry to the web.xml file.

141
00:09:14.206 --> 00:09:18.186
So we say context-param, and in here we give the parameter a name,

142
00:09:18.186 --> 00:09:27.176
so again we'll use ProductName.

143
00:09:27.176 --> 00:09:34.196
And we give it a value, so we can call this maybe Servlet Context product name.

144
00:09:34.196 --> 00:09:38.196
Then in the servlet, rather than just calling getInitParameter,

145
00:09:38.196 --> 00:09:43.176
we'd call getServletContext.getInitParameter,

146
00:09:43.176 --> 00:09:46.136
and that would pass us the context parameter.

147
00:09:46.136 --> 00:09:50.206
Again, if we deploy this, and then go to the browser,

148
00:09:50.206 --> 00:09:51.997
you can see we currently have Yet Another Product

149
00:09:51.997 --> 00:09:53.226
Name as the name of the product.

150
00:09:53.226 --> 00:09:57.166
If we refresh, we see Servlet Context Product Name.

151
00:09:57.166 --> 00:10:05.000
So we're now using the name from the context parameters, so that's the global parameter that we're using.

