1
00:00:00,288 --> 00:00:03,348
So in this chapter, we'll take a look at event listeners.

2
00:00:03,348 --> 00:00:06,288
So events are essentially method calls,

3
00:00:06,288 --> 00:00:09,328
and they're method calls made by the servlet container at

4
00:00:09,328 --> 00:00:13,308
appropriate times during the lifecycle of that container.

5
00:00:13,308 --> 00:00:14,641
So for an example,

6
00:00:14,641 --> 00:00:17,502
an application event can fire when the application

7
00:00:17,502 --> 00:00:20,288
starts up or when the application ends.

8
00:00:20,288 --> 00:00:23,318
So if we need to do any per-application initialization,

9
00:00:23,318 --> 00:00:26,328
we can do it in response to this event.

10
00:00:26,328 --> 00:00:30,628
Session events start when a session starts or a session ends,

11
00:00:30,628 --> 00:00:33,725
and again we can use this to initialize a session for a user and

12
00:00:33,725 --> 00:00:36,368
then tidy up when that session's finished.

13
00:00:36,368 --> 00:00:40,912
Request events happen on every request start and request end,

14
00:00:40,912 --> 00:00:44,358
so these are the more frequent events that fire.

15
00:00:44,358 --> 00:00:48,862
There are also events fired when attributes are added to certain things,

16
00:00:48,862 --> 00:00:52,348
such as a session or a request.

17
00:00:52,348 --> 00:00:58,132
Listeners are classes and code that listen for these events and do

18
00:00:58,132 --> 00:01:01,348
specific processing when one of these events files.

19
00:01:01,348 --> 00:01:07,288
So to create a listener, we have to implement the appropriate interface.

20
00:01:07,288 --> 00:01:10,348
So for an application event, we'd implement ServletContextListener,

21
00:01:10,348 --> 00:01:14,338
for session events, there's an HttpSessionActivationListener,

22
00:01:14,338 --> 00:01:18,378
and for request events, there's the ServletRequestListener.

23
00:01:18,378 --> 00:01:21,879
There are also corresponding interfaces for the

24
00:01:21,879 --> 00:01:27,288
various attribute events as well, such as ServletContextAttributeListener.

25
00:01:27,288 --> 00:01:30,308
Each of these interfaces defines methods,

26
00:01:30,308 --> 00:01:35,577
and those methods will pass the appropriate event object when an event is fired,

27
00:01:35,577 --> 00:01:41,308
and we can use this event object to discover information about the events.

28
00:01:41,308 --> 00:01:44,368
We can register these listeners in a web.xml file.

29
00:01:44,368 --> 00:01:45,368
So here for example,

30
00:01:45,368 --> 00:01:51,318
we've registered a class called com.mantiso .WhitePagesListener.

31
00:01:51,318 --> 00:01:54,298
Notice here we don't specify the type of listener,

32
00:01:54,298 --> 00:01:55,358
so this could be an application listener,

33
00:01:55,358 --> 00:01:59,298
a session listener, or a request listener.

34
00:01:59,298 --> 00:02:03,035
The type of listener this class represents is figured out by the

35
00:02:03,035 --> 00:02:08,338
container depending on the interface this class implements.

36
00:02:08,338 --> 00:02:11,378
There can be many entries inside listener,

37
00:02:11,378 --> 00:02:14,948
and these listeners are executed in the order they

38
00:02:14,948 --> 00:02:17,348
are listed inside the web.xml file,

39
00:02:17,348 --> 00:02:23,338
and then called again in reverse order for the deactivation events.

40
00:02:23,338 --> 00:02:26,378
We can also use annotations to register events,

41
00:02:26,378 --> 00:02:29,348
as we mentioned in the introduction,

42
00:02:29,348 --> 00:02:32,358
and to do that we use the WebListener annotation,

43
00:02:32,358 --> 00:02:39,288
and we'll see examples of that as we build our event handlers.

44
00:02:39,288 --> 00:02:43,378
So as a first example, let's take a look at an application listener.

45
00:02:43,378 --> 00:02:49,318
So to be an application listener, you implement ServletContextListener.

46
00:02:49,318 --> 00:02:52,045
Events on this listener are fired up at application

47
00:02:52,045 --> 00:03:00,318
start and an application end, and they are passed a ServletContextEvent object.

48
00:03:00,318 --> 00:03:04,629
This object, amongst other things, gives us access to the ServletContext.

49
00:03:04,629 --> 00:03:06,378
And here's an example.

50
00:03:06,378 --> 00:03:09,308
Here we have a WhitePagesServletListener,

51
00:03:09,308 --> 00:03:13,328
it implements javax.servlet .ServletContextListener,

52
00:03:13,328 --> 00:03:14,358
and notice there are two methods on here,

53
00:03:14,358 --> 00:03:18,318
contextInitialized and contextDestroyed.

54
00:03:18,318 --> 00:03:22,378
Both methods are passed a ServletContextEvent,

55
00:03:22,378 --> 00:03:25,328
and these methods represent the event.

56
00:03:25,328 --> 00:03:29,308
So the contextInitialized method is called when the application is loaded,

57
00:03:29,308 --> 00:03:32,298
and that's the applicationInitialized event,

58
00:03:32,298 --> 00:03:39,000
and contextDestroyed is called just before the application is unloaded, and that's the contextDestroyed event.

