WEBVTT
1
00:00:05.625 --> 00:00:09.605
So far, we've shown relatively simple tags.

2
00:00:09.605 --> 00:00:12.381
What I'd like to do now is to show an example of a

3
00:00:12.381 --> 00:00:13.675
tag that does a number of things.

4
00:00:13.675 --> 00:00:16.595
We're going to have a tag to which we can pass an attribute,

5
00:00:16.595 --> 00:00:17.645
which we've seen before.

6
00:00:17.645 --> 00:00:21.645
The tag itself is going to execute other tag libraries.

7
00:00:21.645 --> 00:00:26.605
So in this case, we're going to use the for each tag from the core tag library.

8
00:00:26.605 --> 00:00:27.392
And then to the tag itself,

9
00:00:27.392 --> 00:00:31.625
we're actually going to pass fragments of JavaServer Pages

10
00:00:31.625 --> 00:00:34.675
that the tag will then render as necessary.

11
00:00:34.675 --> 00:00:38.585
So within the tag, depending on a specific condition,

12
00:00:38.585 --> 00:00:41.585
we'll render a specific part of the page.

13
00:00:41.585 --> 00:00:45.615
This tag will display a list of to-do items for this particular user.

14
00:00:45.615 --> 00:00:47.585
Yes, yes, I know, to-do items again,

15
00:00:47.585 --> 00:00:50.595
but in this case it's the simplest thing to show.

16
00:00:50.595 --> 00:00:53.635
And we'll display these to-do items underneath the home pane.

17
00:00:53.635 --> 00:00:58.797
So the first thing I want to do is to take the active attribute of

18
00:00:58.797 --> 00:01:04.605
the profile pane and move that to the home pane.

19
00:01:04.605 --> 00:01:06.655
The code in the application has changed slightly,

20
00:01:06.655 --> 00:01:12.803
so inside the user class, we've had a getTodos and an addTodo method.

21
00:01:12.803 --> 00:01:16.595
The getTodos method returns a list of to-do objects.

22
00:01:16.595 --> 00:01:17.625
To-do object are here.

23
00:01:17.625 --> 00:01:21.625
These are fairly simple, they have a description and a priority.

24
00:01:21.625 --> 00:01:24.655
And there within the controller, when we create the user,

25
00:01:24.655 --> 00:01:27.585
we've added a couple of to-dos for this user.

26
00:01:27.585 --> 00:01:30.645
So we have a to-do called Finish Course with a priority of 1,

27
00:01:30.645 --> 00:01:34.615
and a to-do a Go for a run with a priority of 3.

28
00:01:34.615 --> 00:01:38.528
What we'd like to do is depending on the different priority for the

29
00:01:38.528 --> 00:01:42.635
to-do is to display a different fragment of HTML,

30
00:01:42.635 --> 00:01:45.665
and we can do that within the tag itself.

31
00:01:45.665 --> 00:01:49.665
So the first thing to do is to add another tag.

32
00:01:49.665 --> 00:01:57.595
So if we go back to our web app and WEB-INF and the tags folder,

33
00:01:57.595 --> 00:02:07.655
in here we'll create a new file called priority.tag.

34
00:02:07.655 --> 00:02:10.615
So again, this tag will need a tag attribute.

35
00:02:10.615 --> 00:02:16.645
So same as before, we do less than percent at tag body-content.

36
00:02:16.645 --> 00:02:20.585
But this time, the body of the tag will not be empty.

37
00:02:20.585 --> 00:02:20.965
This time,

38
00:02:20.965 --> 00:02:23.660
the body of the tag will contain the fragments that we're going

39
00:02:23.660 --> 00:02:26.615
to use to display the data within the tag.

40
00:02:26.615 --> 00:02:27.665
So we can't say empty.

41
00:02:27.665 --> 00:02:30.312
In this case we say scriptless,

42
00:02:30.312 --> 00:02:34.655
what scriptless means is that the body of the tag can contain other HTML,

43
00:02:34.655 --> 00:02:37.655
it can contain other tags, it can contain expressions,

44
00:02:37.655 --> 00:02:46.625
it just can't contain any JavaScript, and that's exactly what we want.

45
00:02:46.625 --> 00:02:48.665
Once we have the tag attribute in place,

46
00:02:48.665 --> 00:02:52.635
we then need to decide what the rest of the tag will look like.

47
00:02:52.635 --> 00:02:56.585
So I want the tag to do several things.

48
00:02:56.585 --> 00:02:58.675
It'll be passed an attribute, which is the user,

49
00:02:58.675 --> 00:03:03.605
it will itself use other tags, it's going to use the core tag library,

50
00:03:03.605 --> 00:03:06.635
and the tag will also be passed a couple of fragments,

51
00:03:06.635 --> 00:03:10.655
jsp fragments, that we'll render within the tag.

52
00:03:10.655 --> 00:03:13.665
So as before, we have a user attribute, it's required,

53
00:03:13.665 --> 00:03:17.635
and it's of type com.mantiso .user.

54
00:03:17.635 --> 00:03:22.585
We need to specify that we're going to use the core tag library.

55
00:03:22.585 --> 00:03:25.585
So to do that, we just use the taglib directive,

56
00:03:25.585 --> 00:03:28.665
the prefix of c, and the URI of the core tag library.

57
00:03:28.665 --> 00:03:30.665
So before we write the rest of the tag,

58
00:03:30.665 --> 00:03:33.645
let's take a look at how we want this tag to work.

59
00:03:33.645 --> 00:03:40.665
And that will be in index.jsp.

60
00:03:40.665 --> 00:03:44.585
So I want the tag to be used inside the home pane.

61
00:03:44.585 --> 00:03:51.635
So here we'll say st:, and it's going to be our priority tag.

62
00:03:51.635 --> 00:03:55.652
This will have a user, which will be dollar braces user,

63
00:03:55.652 --> 00:03:59.675
as before, but now the tag itself won't be empty.

64
00:03:59.675 --> 00:04:03.665
What we'll pass into here are two fragments of HTML,

65
00:04:03.665 --> 00:04:07.645
one fragment to be used when the priority is low,

66
00:04:07.645 --> 00:04:13.655
and one fragment to use when the priority is high of the given to-do item.

67
00:04:13.655 --> 00:04:16.675
These will be passed in as attributes to the tag,

68
00:04:16.675 --> 00:04:19.605
but they're not simple attributes like user is,

69
00:04:19.605 --> 00:04:22.615
they are attributes that contain HTML.

70
00:04:22.615 --> 00:04:26.468
And the way we do that is within the tag itself is

71
00:04:26.468 --> 00:04:30.635
to use the jsp:attribute syntax.

72
00:04:30.635 --> 00:04:31.655
So these attributes have a name,

73
00:04:31.655 --> 00:04:40.135
so we'll have one called normalPriority and then

74
00:04:40.135 --> 00:04:42.585
we'll have one call highPriority.

75
00:04:42.585 --> 00:04:50.615
So I can just copy this, paste into the right place, and change the name.

76
00:04:50.615 --> 00:04:51.819
Now at the moment,

77
00:04:51.819 --> 00:04:54.978
IntelliJ is showing these in red as we haven't added

78
00:04:54.978 --> 00:04:57.665
those attributes into the tag itself yet.

79
00:04:57.665 --> 00:05:01.320
So the way we'll write the tag is for the tag to

80
00:05:01.320 --> 00:05:06.645
create an ordered list of elements, one for each to-do item.

81
00:05:06.645 --> 00:05:10.827
These attributes will then provide the list item to appear inside

82
00:05:10.827 --> 00:05:13.655
that unordered list depending on the priority.

83
00:05:13.655 --> 00:05:20.645
So each of these will contain an li element,

84
00:05:20.645 --> 00:05:29.585
and each li element will have a couple of spans.

85
00:05:29.585 --> 00:05:35.645
The first span will contain the description of the to-do item,

86
00:05:35.645 --> 00:05:44.585
and the second span will contain its priority,

87
00:05:44.585 --> 00:05:47.665
and this will be repeated for the highPriority element as well.

88
00:05:47.665 --> 00:05:52.675
The difference with a highPriority element is that we add a class here,

89
00:05:52.675 --> 00:05:56.605
which says highPriority,

90
00:05:56.605 --> 00:06:00.625
and this will change the display of this particular element.

91
00:06:00.625 --> 00:06:03.625
So this is how we want to use the tag itself.

92
00:06:03.625 --> 00:06:05.635
So that means we now need to create these two attributes,

93
00:06:05.635 --> 00:06:09.346
the normalPriority attribute and the highPriority attribute,

94
00:06:09.346 --> 00:06:10.645
within the tag.

95
00:06:10.645 --> 00:06:16.595
We also need to write the tag so that it iterates over each of the to-do items,

96
00:06:16.595 --> 00:06:19.665
and then within each item displays the appropriate fragment.

97
00:06:19.665 --> 00:06:26.635
So if we go back to our tag, in here need to add a couple of extra attributes.

98
00:06:26.635 --> 00:06:30.615
So the first one, again, we're using the less than percent at syntax,

99
00:06:30.615 --> 00:06:33.595
and we'll say less than percent at attribute.

100
00:06:33.595 --> 00:06:39.635
So the name of this will be normalPriority.

101
00:06:39.635 --> 00:06:40.831
And in this case,

102
00:06:40.831 --> 00:06:45.635
we're not passing either a string or an object with a given type.

103
00:06:45.635 --> 00:06:50.615
Instead, we're passing a fragment, so we say fragment=true.

104
00:06:50.615 --> 00:06:52.665
So that says that I'm passing in a fragment of HTML,

105
00:06:52.665 --> 00:06:56.625
and that fragment will be executed as part of this tag.

106
00:06:56.625 --> 00:07:05.615
So again, I can copy that, paste it back in, and call this one highPriority.

107
00:07:05.615 --> 00:07:12.615
So we now how to attributes passed in.

108
00:07:12.615 --> 00:07:17.628
Now if we go back to the page where this tag will be used,

109
00:07:17.628 --> 00:07:18.645
the index.jsp page,

110
00:07:18.645 --> 00:07:24.108
we can see that each of these fragments is expecting to be

111
00:07:24.108 --> 00:07:27.645
passed a description and the priority, but where do they come from?

112
00:07:27.645 --> 00:07:29.675
Well they come from the tag itself.

113
00:07:29.675 --> 00:07:33.625
So within the tag, within the priority tag,

114
00:07:33.625 --> 00:07:38.005
we need to create a couple of variables that we can pass back out to the

115
00:07:38.005 --> 00:07:41.655
outside world to allow the outside world to display them.

116
00:07:41.655 --> 00:07:44.919
And we do that inside here by using the less than,

117
00:07:44.919 --> 00:07:46.605
percent, and variable directive.

118
00:07:46.605 --> 00:07:54.625
So variables have a name, that's name-given, and we'll create two.

119
00:07:54.625 --> 00:08:04.665
We have a name-given of description and a name-given of priority.

120
00:08:04.665 --> 00:08:06.655
And these will be used back on the page.

121
00:08:06.655 --> 00:08:09.655
So, description here and priority here.

122
00:08:09.655 --> 00:08:13.635
Once we have that in place, we can now write the actual body of the tag.

123
00:08:13.635 --> 00:08:16.605
So we said the body will be an unordered list.

124
00:08:16.605 --> 00:08:21.125
So we can say ul, then within that list,

125
00:08:21.125 --> 00:08:24.635
we iterate over each of the to-do items for this given user.

126
00:08:24.635 --> 00:08:27.605
So we can say c:forEach.

127
00:08:27.605 --> 00:08:34.665
Inside the forEach we'll have an items, the items is user.todos,

128
00:08:34.665 --> 00:08:38.625
that comes from our user object.

129
00:08:38.625 --> 00:08:50.585
I'm going to give this a variable name, which we'll just call todo.

130
00:08:50.585 --> 00:08:53.645
So inside here, we have to do two things.

131
00:08:53.645 --> 00:08:58.635
We have to set the description and priority variables

132
00:08:58.635 --> 00:09:01.585
that will pass by the outside world.

133
00:09:01.585 --> 00:09:05.625
Once we've done that, we then need to execute the appropriate fragment.

134
00:09:05.625 --> 00:09:20.675
So to set these variables, we do c:set var=description,

135
00:09:20.675 --> 00:09:23.625
and the value comes from the to-do itself.

136
00:09:23.625 --> 00:09:33.675
So we say value=$ todo.description.

137
00:09:33.675 --> 00:09:36.635
And again, the same for priority.

138
00:09:36.635 --> 00:09:47.675
So we say var=priority value= todo.priority.

139
00:09:47.675 --> 00:09:48.839
So they are set.

140
00:09:48.839 --> 00:09:53.615
We are now ready to execute the appropriate fragment to set the description

141
00:09:53.615 --> 00:09:56.655
of the priority with the appropriate display information,

142
00:09:56.655 --> 00:10:00.605
so the appropriate class used for the CSS.

143
00:10:00.605 --> 00:10:01.523
To do that,

144
00:10:01.523 --> 00:10:05.468
we first need to test to see if we have a highPriority

145
00:10:05.468 --> 00:10:07.675
or a normalPriority todo element.

146
00:10:07.675 --> 00:10:15.615
Again, we can use the core tag library, so we can say c:if test=,

147
00:10:15.615 --> 00:10:24.635
and in here we just use $ todo.priority = 1.

148
00:10:24.635 --> 00:10:27.635
So that'll be our normalPriority.

149
00:10:27.635 --> 00:10:29.595
Then we do the same thing again,

150
00:10:29.595 --> 00:10:36.635
so we can say test todo.priority is greater than 1,

151
00:10:36.635 --> 00:10:38.625
and that gives us our high priority.

152
00:10:38.625 --> 00:10:43.105
So for normal priority, we want to execute the normalPriority fragment,

153
00:10:43.105 --> 00:10:45.620
that's this guy, and for high priority,

154
00:10:45.620 --> 00:10:49.615
we want to execute the highPriority fragment.

155
00:10:49.615 --> 00:10:55.625
We do that from within the tag by using another JSP element called jsp invoke.

156
00:10:55.625 --> 00:11:01.675
So I say jsp:invoke.

157
00:11:01.675 --> 00:11:03.461
This has a fragment attribute,

158
00:11:03.461 --> 00:11:11.635
and the fragment for this one is going to be normalPriority.

159
00:11:11.635 --> 00:11:17.655
And for this one, the fragment would be highPriority.

160
00:11:17.655 --> 00:11:21.595
So to recap what we've done, we've created a tag,

161
00:11:21.595 --> 00:11:23.595
and the body content is scriptless,

162
00:11:23.595 --> 00:11:26.675
which means we can execute other tag codes from within the JSP,

163
00:11:26.675 --> 00:11:30.595
or we can execute things like expressions inside it.

164
00:11:30.595 --> 00:11:33.630
The tag has an attribute called user, an attribute called normalPriority,

165
00:11:33.630 --> 00:11:36.625
which is a fragment, and an attribute called highPriority,

166
00:11:36.625 --> 00:11:38.595
which is also a fragment.

167
00:11:38.595 --> 00:11:40.665
The tag is using the core tag library itself,

168
00:11:40.665 --> 00:11:43.635
so within our tag we are making use of other tags.

169
00:11:43.635 --> 00:11:49.605
And our tag will set two variables, a description variable and priority variable.

170
00:11:49.605 --> 00:11:52.605
So the output from the tag will be an unordered list.

171
00:11:52.605 --> 00:11:54.645
And then for each to-do item that we have,

172
00:11:54.645 --> 00:11:56.655
we will execute the appropriate fragments,

173
00:11:56.655 --> 00:11:59.625
either normalPriority if our priority is 1,

174
00:11:59.625 --> 00:12:03.595
or highPriority if our priority is greater than 1.

175
00:12:03.595 --> 00:12:06.665
Before executing the fragments, we set a couple of variables,

176
00:12:06.665 --> 00:12:10.635
a description variable and a priority variable.

177
00:12:10.635 --> 00:12:14.645
Back on the page, we use the tag, so we have st:priority,

178
00:12:14.645 --> 00:12:18.635
we pass in the user, and we supply the two fragments to use.

179
00:12:18.635 --> 00:12:23.585
It supplies those attributes, so we have an attribute here for normalPriority,

180
00:12:23.585 --> 00:12:26.645
and an attribute here called highPriority.

181
00:12:26.645 --> 00:12:28.595
Each of these is very similar,

182
00:12:28.595 --> 00:12:32.428
except for the highPriority attribute we pass in an li

183
00:12:32.428 --> 00:12:34.615
with a class set to highPriority.

184
00:12:34.615 --> 00:12:37.625
So again if I go back to the browser and I refresh,

185
00:12:37.625 --> 00:12:39.645
I should go to the Home tab on the browser,

186
00:12:39.645 --> 00:12:43.635
and the Home tab should list the to-dos.

187
00:12:43.635 --> 00:12:49.454
So if we go to the page and refresh, it doesn't work,

188
00:12:49.454 --> 00:12:52.411
so if we go back to the code and check this,

189
00:12:52.411 --> 00:12:54.615
we can see here the tests are wrong.

190
00:12:54.615 --> 00:13:01.655
So if we say todo.priority is 1 and todo.priority is greater than 1,

191
00:13:01.655 --> 00:13:04.955
again go back to the browser and refresh,

192
00:13:04.955 --> 00:13:06.605
and it shows up.

193
00:13:06.605 --> 00:13:07.802
So for this,

194
00:13:07.802 --> 00:13:13.585
we have the list item in normal and this one with the appropriate class applied.

195
00:13:13.585 --> 00:13:20.000
So it's white text on a red background, not the best bit of UI in the world, but it serves its purpose.

