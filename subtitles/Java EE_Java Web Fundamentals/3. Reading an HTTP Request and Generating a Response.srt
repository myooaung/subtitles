1
00:00:04,302 --> 00:00:07,594
As we've seen, doGet, doPost,

2
00:00:07,594 --> 00:00:13,292
etc., get past an HttpServletRequest and an HttpServletResponse object.

3
00:00:13,292 --> 00:00:17,854
These give us access to the incoming request and the

4
00:00:17,854 --> 00:00:20,242
outgoing response respectively.

5
00:00:20,242 --> 00:00:24,262
We can use the incoming request object to get at the data in the request.

6
00:00:24,262 --> 00:00:28,262
For example, we can get at any headers sent as part of the request,

7
00:00:28,262 --> 00:00:30,292
using the request.getHeader method.

8
00:00:30,292 --> 00:00:33,312
We just specify the name of the HTTP header here.

9
00:00:33,312 --> 00:00:36,282
We can get at specific things in the request,

10
00:00:36,282 --> 00:00:40,292
so there's a request.getContentType if we need to know the

11
00:00:40,292 --> 00:00:41,302
content type of the incoming request.

12
00:00:41,302 --> 00:00:44,242
For example, whether we're sending up maybe JSON data,

13
00:00:44,242 --> 00:00:48,252
if we're sending up image data, if we're sending up data from a form.

14
00:00:48,252 --> 00:00:51,282
Perhaps the most important one is the getParameter call.

15
00:00:51,282 --> 00:00:55,332
So this gives us access to any of the incoming HTTP parameters.

16
00:00:55,332 --> 00:01:00,070
The parameters are those specified with a question mark on the URL,

17
00:01:00,070 --> 00:01:02,252
or also as part of the incoming body,

18
00:01:02,252 --> 00:01:05,272
so if we're sending up an HTTP form for example,

19
00:01:05,272 --> 00:01:10,282
and that form contains data, those parameters will be the data from the form.

20
00:01:10,282 --> 00:01:13,262
And we can also get at the actual data itself.

21
00:01:13,262 --> 00:01:16,332
So again, for example, if we're uploading an image file,

22
00:01:16,332 --> 00:01:19,312
then getReader gives us access to a stream reader,

23
00:01:19,312 --> 00:01:21,624
and using that reader we can read in the data that

24
00:01:21,624 --> 00:01:24,282
comes up as part of the HTTP request.

25
00:01:24,282 --> 00:01:30,252
We can use HttpServletResponse to send data back to the browser.

26
00:01:30,252 --> 00:01:30,945
Like the request,

27
00:01:30,945 --> 00:01:35,242
the response object gives us access to various parts of the response.

28
00:01:35,242 --> 00:01:39,272
So for example, we could do things like redirect the browser.

29
00:01:39,272 --> 00:01:42,272
This will send back a 303 HTTP code,

30
00:01:42,272 --> 00:01:44,704
and that will cause the browser to send another request to

31
00:01:44,704 --> 00:01:47,312
the particular page that we specify here.

32
00:01:47,312 --> 00:01:49,312
This is used for in a couple of circumstances.

33
00:01:49,312 --> 00:01:54,272
So here, for example, we're looking at the logged-on status of the user.

34
00:01:54,272 --> 00:01:55,312
So if the user's not logged on,

35
00:01:55,312 --> 00:01:59,262
we can redirect the log on page and this lets us do authentication.

36
00:01:59,262 --> 00:02:05,272
But this is also useful when we do the standard POST, GET processing for a form.

37
00:02:05,272 --> 00:02:07,302
So when the user posts data from a form,

38
00:02:07,302 --> 00:02:09,282
if that processing succeeds,

39
00:02:09,282 --> 00:02:13,508
we want to redirect the user to the success page to

40
00:02:13,508 --> 00:02:15,302
show the data that's just been posted.

41
00:02:15,302 --> 00:02:18,302
We can then change the response in various ways.

42
00:02:18,302 --> 00:02:21,312
So we can set the content type on the response,

43
00:02:21,312 --> 00:02:24,312
we can set any headers on the response that we need to,

44
00:02:24,312 --> 00:02:29,282
and again, very importantly, we can output data as part of the response.

45
00:02:29,282 --> 00:02:33,262
So here for example, we grab the Writer object that we can send data down,

46
00:02:33,262 --> 00:02:34,025
we call out.write,

47
00:02:34,025 --> 00:02:39,332
and to this we can write out any HTML or in this case XML that we need to,

48
00:02:39,332 --> 00:02:42,322
and that data will get written back to the browser.

49
00:02:42,322 --> 00:02:46,332
We can also if we need to send back any error information to the browser.

50
00:02:46,332 --> 00:02:52,080
So response.sendError sets a 500 error code that the browser

51
00:02:52,080 --> 00:02:55,262
will see and display hopefully the appropriate error message

52
00:02:55,262 --> 00:02:57,292
when that response gets sent back.

53
00:02:57,292 --> 00:03:00,262
This is the server as we left it earlier,

54
00:03:00,262 --> 00:03:03,010
and we can see that we're using response.getwriter to write

55
00:03:03,010 --> 00:03:05,252
some information back to the browser.

56
00:03:05,252 --> 00:03:07,850
What we're now going to do is to use the request and response

57
00:03:07,850 --> 00:03:11,252
object to change the behavior of the servlet.

58
00:03:11,252 --> 00:03:15,957
The first thing we'll do is take the request object and use it to call

59
00:03:15,957 --> 00:03:18,972
GetParameter to get the value of a parameter coming into the servlet and

60
00:03:18,972 --> 00:03:24,332
then send that value back to the browser.

61
00:03:24,332 --> 00:03:39,282
To do this, we can say String name =, request.getParameter name.

62
00:03:39,282 --> 00:03:45,322
Be careful here as the parameter names are case sensitive.

63
00:03:45,322 --> 00:03:48,282
And then rather than using request.getWriter .write,

64
00:03:48,282 --> 00:03:51,302
we can use request.getWriter .printf Hello,

65
00:03:51,302 --> 00:04:02,312
and we'll say %s, name, to send back to the name.

66
00:04:02,312 --> 00:04:04,322
We should also check if the name is valid.

67
00:04:04,322 --> 00:04:21,272
So we will say if name is not equal to null, then send back the name.

68
00:04:21,272 --> 00:04:27,292
Otherwise, we'll just send back a message saying please enter a name value.

69
00:04:27,292 --> 00:04:29,332
We can now deploy this.

70
00:04:29,332 --> 00:04:35,332
If we go to the browser, we can enter localhost simple/home,

71
00:04:35,332 --> 00:04:38,262
and we get the text saying please enter a name,

72
00:04:38,262 --> 00:04:40,940
and then from here we can use?

73
00:04:40,940 --> 00:04:45,312
name=Kevin, and we should see Hello Kevin.

74
00:04:45,312 --> 00:04:50,302
So request.getParameter takes parameters off the query string

75
00:04:50,302 --> 00:04:55,262
and will also take parameters from a form.

76
00:04:55,262 --> 00:04:57,322
So here we have a simple page, it's a JSP page,

77
00:04:57,322 --> 00:04:59,272
that just has a form, which is action home,

78
00:04:59,272 --> 00:05:03,322
method is post, and that's going to post requests into our servlet.

79
00:05:03,322 --> 00:05:08,272
For this to work, we need to add a doPost method to the servlet.

80
00:05:08,272 --> 00:05:11,282
In this case I'll simply copy the doGet method.

81
00:05:11,282 --> 00:05:12,302
We will make some changes to this in a moment,

82
00:05:12,302 --> 00:05:17,302
so rather than simply calling doGet.

83
00:05:17,302 --> 00:05:23,272
So at the moment, this method is exactly the same as the GET method.

84
00:05:23,272 --> 00:05:26,302
So out of the doPost method, we need to redeploy the application.

85
00:05:26,302 --> 00:05:31,656
Then if we go back to the browser, and then to simple/ index.jsp,

86
00:05:31,656 --> 00:05:34,332
we see the form.

87
00:05:34,332 --> 00:05:39,252
If we click on Enter Name, we'll see a message saying Hello, blank.

88
00:05:39,252 --> 00:05:42,252
That's because the name parameter does exist,

89
00:05:42,252 --> 00:05:46,292
but the value passed back into the servlet in this case is just an empty string.

90
00:05:46,292 --> 00:05:47,647
Like from the query string,

91
00:05:47,647 --> 00:05:52,282
when didn't enter the name value that came up as a blank string.

92
00:05:52,282 --> 00:05:56,302
So back in the code, I guess we should say if name is not null.

93
00:05:56,302 --> 00:05:59,807
So back in the servlet, we should say if name is not null,

94
00:05:59,807 --> 00:06:02,797
and name is not equal to the empty string,

95
00:06:02,797 --> 00:06:06,322
then display the name, otherwise display the message.

96
00:06:06,322 --> 00:06:13,302
Again, we can redeploy, go back to the browser.

97
00:06:13,302 --> 00:06:17,292
If we go back to the form page and click on Enter name, we now get the message.

98
00:06:17,292 --> 00:06:22,322
If we go back to the form page, enter the name of Kevin,

99
00:06:22,322 --> 00:06:25,242
then we see Hello Kevin.

100
00:06:25,242 --> 00:06:26,898
So one of the other things we can use the response

101
00:06:26,898 --> 00:06:29,322
object to do is to send a redirect.

102
00:06:29,322 --> 00:06:32,312
So for example in this case, inside doPost,

103
00:06:32,312 --> 00:06:35,242
rather than displaying a message saying Please enter a name,

104
00:06:35,242 --> 00:06:39,135
we should perhaps redirect back to the form page to allow

105
00:06:39,135 --> 00:06:42,262
the user to re-enter the form again.

106
00:06:42,262 --> 00:06:48,272
To do that, we can say response.sendRedirect,

107
00:06:48,272 --> 00:06:49,312
and we give it the string to redirect to,

108
00:06:49,312 --> 00:06:55,302
which is going to be index.jsp.

109
00:06:55,302 --> 00:07:01,292
Again, if we redeploy the application and then go to the browser,

110
00:07:01,292 --> 00:07:08,242
go back to the form, if we leave the name blank and click on Enter name,

111
00:07:08,242 --> 00:07:10,272
we now come back to the same page.

112
00:07:10,272 --> 00:07:14,990
If I bring up the Chrome tools and click on Enter name,

113
00:07:14,990 --> 00:07:18,332
we can see here that we've sent the POST,

114
00:07:18,332 --> 00:07:23,252
and the POST has returned a 302 code, and the 302 code means redirect.

115
00:07:23,252 --> 00:07:28,272
The browser simply redirects and reclaims the page again.

116
00:07:28,272 --> 00:07:30,965
So one other thing we might like to do is to change

117
00:07:30,965 --> 00:07:32,332
the content type of the response.

118
00:07:32,332 --> 00:07:35,262
So for example, inside the doGet here,

119
00:07:35,262 --> 00:07:37,332
we can set the content type to something other than HTML,

120
00:07:37,332 --> 00:07:40,292
which is the default.

121
00:07:40,292 --> 00:07:43,292
We do this by saying resp.setContentType.

122
00:07:43,292 --> 00:07:46,302
In this case, we can set it to text/xml.

123
00:07:46,302 --> 00:07:55,242
And then we can perhaps surround the output in XML tags, maybe add a name tag.

124
00:07:55,242 --> 00:07:59,252
Again, if you redeploy this and then go back to the browser,

125
00:07:59,252 --> 00:08:08,000
if we say simple/home? name=Kevin again, now we'll get back the XML rather than the HTML.

