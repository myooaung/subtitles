WEBVTT
1
00:00:00.000 --> 00:00:00.580
Hi.

2
00:00:00.580 --> 00:00:04.060
This is Kevin Jones from Pluralsight.

3
00:00:04.060 --> 00:00:09.060
In this module, we're going to take a look at Java Server Pages.

4
00:00:09.060 --> 00:00:12.060
We're going to cover the various aspects of JavaServer Pages.

5
00:00:12.060 --> 00:00:15.060
We want to look at and understand the syntax of the page.

6
00:00:15.060 --> 00:00:17.760
We want to look at how we include other pages

7
00:00:17.760 --> 00:00:20.010
dynamically within a JavaServer Page.

8
00:00:20.010 --> 00:00:23.090
We want to look at how we include other static resources within the page,

9
00:00:23.090 --> 00:00:27.060
which may include other HTML resources.

10
00:00:27.060 --> 00:00:30.090
We'll take a look at the use of scripts and scriptlets on the page.

11
00:00:30.090 --> 00:00:33.000
We'll look at how we use directives on the page.

12
00:00:33.000 --> 00:00:40.080
And we'll also look at how we can configure the page within the application.

13
00:00:40.080 --> 00:00:44.080
Before we get into the details of amending a JavaServer Page,

14
00:00:44.080 --> 00:00:49.000
we'll just take a look at what a JavaServer Page actually is.

15
00:00:49.000 --> 00:00:53.000
We have one open here inside the editor inside IntelliJ IDEA,

16
00:00:53.000 --> 00:00:56.040
and we can see essentially this thing is just an HTML page,

17
00:00:56.040 --> 00:01:00.000
obviously there's slightly more to it than that.

18
00:01:00.000 --> 00:01:01.090
Within this page we have some HTML,

19
00:01:01.090 --> 00:01:04.040
we have some CSS and a little bit of JavaScript.

20
00:01:04.040 --> 00:01:07.050
It's a Bootstrap-based page, and with all the rage for Bootstrap at the moment,

21
00:01:07.050 --> 00:01:09.030
I felt we had to do that.

22
00:01:09.030 --> 00:01:14.070
If we take this project and deploy it,

23
00:01:14.070 --> 00:01:19.020
if we then go to Chrome and browse the page,

24
00:01:19.020 --> 00:01:25.010
if I want to browse to index.jsp, we'll see the page here.

25
00:01:25.010 --> 00:01:28.070
So here we can see the output from the JavaServer Page.

26
00:01:28.070 --> 00:01:31.675
Now obviously as this is a JSP there's some processing that goes

27
00:01:31.675 --> 00:01:34.030
on under the covers to generate this output.

28
00:01:34.030 --> 00:01:39.050
And in fact the JavaServer Page is compiled, and it's compiled into a servlet.

29
00:01:39.050 --> 00:01:43.000
And by using Tomcat, we can actually see that server code.

30
00:01:43.000 --> 00:01:46.923
So if we go to Tomcat's work directory, see here we're in work,

31
00:01:46.923 --> 00:01:49.563
Catalina, localhost, simple, in org, apache,

32
00:01:49.563 --> 00:01:50.070
jsp.

33
00:01:50.070 --> 00:01:54.090
Here's the class that's created for this page, so index.jsp .class.

34
00:01:54.090 --> 00:01:58.060
And here's the Java code that gets compiled to that class.

35
00:01:58.060 --> 00:02:04.010
If I take that Java code and just drag it into IntelliJ IDEA,

36
00:02:04.010 --> 00:02:08.030
we can see what that JSP code looks like.

37
00:02:08.030 --> 00:02:14.060
Here we can see that our code extends a class called HttpJspBase,

38
00:02:14.060 --> 00:02:16.030
and this is part of Tomcat.

39
00:02:16.030 --> 00:02:21.050
And in fact HttpJspBase extends HttpServlet.

40
00:02:21.050 --> 00:02:26.050
So we know that anything that extends HttpServlet is itself a servlet.

41
00:02:26.050 --> 00:02:29.070
The code here follows the same lifecycle as a standard servlet.

42
00:02:29.070 --> 00:02:33.000
So we have an init method, we have a destroy method,

43
00:02:33.000 --> 00:02:36.030
and we have a service method.

44
00:02:36.030 --> 00:02:39.040
And it's this service method that does all the work.

45
00:02:39.040 --> 00:02:40.090
In the service method,

46
00:02:40.090 --> 00:02:43.678
we can see some initialization code where it goes and gets

47
00:02:43.678 --> 00:02:46.030
things that sets the content type on the output.

48
00:02:46.030 --> 00:02:50.000
It then gets a reference to an output stream through pageContext.getOut,

49
00:02:50.000 --> 00:02:53.693
and it uses that output stream to write out any

50
00:02:53.693 --> 00:02:57.040
static data that is part of the page.

51
00:02:57.040 --> 00:02:59.070
So in the index page where we can see things like

52
00:02:59.070 --> 00:03:04.040
HTML and head and header and nav, if we look in the Java code for this,

53
00:03:04.040 --> 00:03:07.050
sure enough we can see there's the DOCTYPE being written out,

54
00:03:07.050 --> 00:03:10.040
there's the header being written out, there's the nav being written out.

55
00:03:10.040 --> 00:03:14.040
So it simply writes out the HTML.

56
00:03:14.040 --> 00:03:17.050
As we'll see later, we can embed script into the page.

57
00:03:17.050 --> 00:03:19.040
We can embed Java into the page.

58
00:03:19.040 --> 00:03:26.000
If there was Java on this page, then that Java would be executed as part of the servlet.

