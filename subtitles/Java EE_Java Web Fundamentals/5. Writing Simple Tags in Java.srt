1
00:00:04,143 --> 00:00:07,183
So we've seen how to write tags in tag files.

2
00:00:07,183 --> 00:00:10,213
Those are written using fragments of JavaServer Pages.

3
00:00:10,213 --> 00:00:14,223
We've seen how to gather those tag files together into a tag library.

4
00:00:14,223 --> 00:00:18,213
We can now take a look at how we write tags actually in Java itself,

5
00:00:18,213 --> 00:00:19,954
and this gives us more flexibility because,

6
00:00:19,954 --> 00:00:20,203
well,

7
00:00:20,203 --> 00:00:22,912
this is Java and Java obviously is more powerful

8
00:00:22,912 --> 00:00:26,203
language than just using JSP on its own.

9
00:00:26,203 --> 00:00:29,193
Tags written in Java must be part of the tag library,

10
00:00:29,193 --> 00:00:32,233
which is why we introduced tag libraries first.

11
00:00:32,233 --> 00:00:36,213
So we create our first Java tag, we go into our taglib project,

12
00:00:36,213 --> 00:00:43,153
we go to the main folder, and we can add a subfolder called java.

13
00:00:43,153 --> 00:00:44,156
Then inside this,

14
00:00:44,156 --> 00:00:53,143
we can add a new package and create a package called com.mantiso.

15
00:00:53,143 --> 00:00:56,153
And then inside this package we can create our first tag.

16
00:00:56,153 --> 00:00:59,203
And again, just to do what we did with the tag files,

17
00:00:59,203 --> 00:01:05,143
we'll create a Java class, and we'll call this thing Simple.

18
00:01:05,143 --> 00:01:08,193
So there are various ways of implementing tags in Java.

19
00:01:08,193 --> 00:01:09,050
But by far,

20
00:01:09,050 --> 00:01:14,143
the most straightforward way is to extend a base class called SimpleTagSupport.

21
00:01:14,143 --> 00:01:18,193
So here we just say extends SimpleTagSupport,

22
00:01:18,193 --> 00:01:20,969
and that will bring in the import for us,

23
00:01:20,969 --> 00:01:25,693
and then inside here we simply add a method,

24
00:01:25,693 --> 00:01:29,183
override a method called doTag,

25
00:01:29,183 --> 00:01:33,183
and it's inside this method that we add the work of the tag.

26
00:01:33,183 --> 00:01:36,233
If we look at the SimpleTagSupport class,

27
00:01:36,233 --> 00:01:41,195
we can see that this class has various properties that we have access to.

28
00:01:41,195 --> 00:01:44,153
We have something called a JspContext.

29
00:01:44,153 --> 00:01:48,183
The JspContext is similar to things like the ServletContext.

30
00:01:48,183 --> 00:01:51,163
So this gives us access to the outside world.

31
00:01:51,163 --> 00:01:55,143
And we can use this JspContext to write out into the output stream

32
00:01:55,143 --> 00:02:00,233
that the JSP is currently being rendered to.

33
00:02:00,233 --> 00:02:06,203
So inside the tag, we can call getJspContext.

34
00:02:06,203 --> 00:02:10,233
What this will return us is something of type JspContext

35
00:02:10,233 --> 00:02:13,223
that is in fact actually a PageContext.

36
00:02:13,223 --> 00:02:16,223
If you remember back to the JSP chapters,

37
00:02:16,223 --> 00:02:21,574
the PageContext is the thing that a JavaServer Page creates to,

38
00:02:21,574 --> 00:02:24,173
again, let us have access to things outside the page,

39
00:02:24,173 --> 00:02:26,203
so things like an output stream for example.

40
00:02:26,203 --> 00:02:36,223
So here I can say PageContext ctx = getJspContext.

41
00:02:36,223 --> 00:02:41,153
And we can either cast, we can cast this the appropriate thing.

42
00:02:41,153 --> 00:02:46,163
Once I have the PageContext, this gives me access to the output stream,

43
00:02:46,163 --> 00:02:47,223
so I can called getOut.

44
00:02:47,223 --> 00:02:53,183
And then to this thing, I can write, and I can write a message into the page.

45
00:02:53,183 --> 00:02:59,183
So let's say Hello from this tag.

46
00:02:59,183 --> 00:03:03,183
Now that we've written the tag, we have to add this tag to the tag library,

47
00:03:03,183 --> 00:03:06,173
and we do that by editing the TLD file.

48
00:03:06,173 --> 00:03:13,163
So in the TLD file, we add a tag attribute,

49
00:03:13,163 --> 00:03:15,193
and this tag attribute have various sub-attributes,

50
00:03:15,193 --> 00:03:19,163
so we need to give this thing a name.

51
00:03:19,163 --> 00:03:24,143
So we can call it Simple.

52
00:03:24,143 --> 00:03:35,143
We specify the tag-class, which is going to be com.mantiso .simple.

53
00:03:35,143 --> 00:03:39,153
And we tell the library, the body-content of the tag.

54
00:03:39,153 --> 00:03:43,173
So just like we do for tag-files, we say body-content,

55
00:03:43,173 --> 00:03:46,233
in this case we'll have body-content of empty.

56
00:03:46,233 --> 00:03:49,213
Once we have that, we can then use the tag in the page.

57
00:03:49,213 --> 00:03:53,143
So I go to the JSP page and go to the active pane,

58
00:03:53,143 --> 00:03:58,678
which is just the home pane, then inside here above the priority tag,

59
00:03:58,678 --> 00:04:02,693
you can say m:, and Simple shows up there,

60
00:04:02,693 --> 00:04:04,203
so I can say n:simple.

61
00:04:04,203 --> 00:04:07,458
So we're using the same tag library prefix and the same tag

62
00:04:07,458 --> 00:04:10,213
library URI as we used for the tag files.

63
00:04:10,213 --> 00:04:18,143
We can mix tag files and tags within the same tag library.

64
00:04:18,143 --> 00:04:22,223
So again, if I deploy the application and go to the browser and refresh,

65
00:04:22,223 --> 00:04:25,223
then we see Hello from this tag on the page,

66
00:04:25,223 --> 00:04:29,233
so the tag is working.

67
00:04:29,233 --> 00:04:32,173
So that was indeed a simple tag.

68
00:04:32,173 --> 00:04:34,163
We can also write something slightly more complex.

69
00:04:34,163 --> 00:04:37,143
So how about having a tag that maybe repeats data?

70
00:04:37,143 --> 00:04:41,223
So we go back to our tag library and add a new Java class,

71
00:04:41,223 --> 00:04:45,203
let's call this Repeat.

72
00:04:45,203 --> 00:04:58,163
And again, this will extend SimpleTagSupport.

73
00:04:58,163 --> 00:05:03,233
And again, we want to override doTag.

74
00:05:03,233 --> 00:05:09,203
So for this tag, we want to specify how many times to repeat the body of the tag.

75
00:05:09,203 --> 00:05:16,173
So to do that, we can add a public setter method, so public void setRepeat.

76
00:05:16,173 --> 00:05:22,223
The setRepeat will take an int, it should be the repeat.

77
00:05:22,223 --> 00:05:28,153
And we can assign this value to a variable within the class.

78
00:05:28,153 --> 00:05:39,223
Then within the tag body, we can say for int i = 0, i is less than repeat, i++.

79
00:05:39,223 --> 00:05:44,233
Then inside the loop, we can execute the body of the tag.

80
00:05:44,233 --> 00:05:48,423
So the way we do that is by calling another helper called getJspBody,

81
00:05:48,423 --> 00:05:53,934
and getJspBody returns back to us the actual body data

82
00:05:53,934 --> 00:05:56,173
that's encapsulated by this tag.

83
00:05:56,173 --> 00:06:00,233
Once we have that, we can then call invoke,

84
00:06:00,233 --> 00:06:01,848
and if we call invoke null,

85
00:06:01,848 --> 00:06:05,203
this will just write out that data into the current output stream,

86
00:06:05,203 --> 00:06:07,233
so the current place the page is being rendered to.

87
00:06:07,233 --> 00:06:14,143
So this is similar to executing a fragment inside a tag file.

88
00:06:14,143 --> 00:06:16,143
So once we have this tag in place,

89
00:06:16,143 --> 00:06:19,203
we need to add information about this tag to the TLD file.

90
00:06:19,203 --> 00:06:25,223
So we need to add another tag element in here,

91
00:06:25,223 --> 00:06:37,163
this thing will have a name, and we can call this thing repeat.

92
00:06:37,163 --> 00:06:39,066
It's going to have a tag class,

93
00:06:39,066 --> 00:06:47,203
and the tag class is going to be com.mantiso .repeat.

94
00:06:47,203 --> 00:06:48,233
Then we'll have body-content.

95
00:06:48,233 --> 00:06:52,685
But now the body-content won't be empty just like our tag file,

96
00:06:52,685 --> 00:06:55,173
the body-content will be scriptless.

97
00:06:55,173 --> 00:07:03,173
This tag also has an attribute, the name of the attribute will be repeat.

98
00:07:03,173 --> 00:07:08,143
And again, just like a tag file, we can specify that this attribute is required.

99
00:07:08,143 --> 00:07:11,153
So we can say required is true.

100
00:07:11,153 --> 00:07:16,179
Once we have this in place, we can go back to the JavaServer Page,

101
00:07:16,179 --> 00:07:18,233
so index.jsp, and here where we have our simple tag,

102
00:07:18,233 --> 00:07:20,203
we could wrap that in the repeat.

103
00:07:20,203 --> 00:07:28,213
We can say m:repeat, repeat equals, let's say, 5 times here.

104
00:07:28,213 --> 00:07:34,163
And if we grab the closing tag and wrap that around our embedded tag,

105
00:07:34,163 --> 00:07:36,233
again we need to deploy the application.

106
00:07:36,233 --> 00:07:39,739
And if we go back to the browser and we refresh,

107
00:07:39,739 --> 00:07:44,183
which we should see Hello from this tag repeated five times.

108
00:07:44,183 --> 00:07:50,357
And there we are, no extra data in here, but we could mix in some HTML as well.

109
00:07:50,357 --> 00:07:54,065
So we can say simple and then maybe put a break here.

110
00:07:54,065 --> 00:07:58,153
No need to deploy this time, it's just an HTML change,

111
00:07:58,153 --> 00:08:05,000
go back to the browser and refresh, and sure enough, we get Hello from this tag with HTML embedded inside it.

