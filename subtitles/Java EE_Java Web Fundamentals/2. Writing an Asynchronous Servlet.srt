1
00:00:00,000 --> 00:00:01,989
We are going to create an async servlet.

2
00:00:01,989 --> 00:00:06,453
The first thing we'll do is to create a servlet that will log

3
00:00:06,453 --> 00:00:09,909
out information about the request it receives.

4
00:00:09,909 --> 00:00:10,369
In particular,

5
00:00:10,369 --> 00:00:14,184
you want to log out thread IDs so we understand the threads that

6
00:00:14,184 --> 00:00:18,899
are used for various parts of the request.

7
00:00:18,899 --> 00:00:22,909
To do this, we'll start an async call, get async context,

8
00:00:22,909 --> 00:00:23,979
and add async listener.

9
00:00:23,979 --> 00:00:27,939
That listener can log the various events that are fired.

10
00:00:27,939 --> 00:00:31,909
So it's giving us information about async calls.

11
00:00:31,909 --> 00:00:35,909
As part of this logging, we log out the thread in which the calls are being made,

12
00:00:35,909 --> 00:00:39,909
we get the thread at these to give us more information.

13
00:00:39,909 --> 00:00:43,959
So the first thing we'll do is mark the servlet as async.

14
00:00:43,959 --> 00:00:48,909
In the servlet we say asyncSupported = true.

15
00:00:48,909 --> 00:00:54,939
Then in the doGet method, we add a call to print out the current thread ID.

16
00:00:54,939 --> 00:00:58,939
We can then grab the async context by calling startAsync.

17
00:00:58,939 --> 00:01:04,929
This tells the container, we are going to work asynchronously.

18
00:01:04,929 --> 00:01:08,008
Now we can add a listener to the context to log out the

19
00:01:08,008 --> 00:01:09,949
events that get fired within the container.

20
00:01:09,949 --> 00:01:13,989
This listener takes the AsyncListener instance that is four methods,

21
00:01:13,989 --> 00:01:16,949
one per event.

22
00:01:16,949 --> 00:01:20,929
Each method is passed an AsyncEvent object.

23
00:01:20,929 --> 00:01:22,429
There is an onStart,

24
00:01:22,429 --> 00:01:25,969
onComplete that are called when the async call is started and completed,

25
00:01:25,969 --> 00:01:29,989
an onError that is called when there are any errors in the async call,

26
00:01:29,989 --> 00:01:34,949
and onTimeout if a call of the context times out.

27
00:01:34,949 --> 00:01:36,111
In each of these methods,

28
00:01:36,111 --> 00:01:38,979
we'll log that the event has being called along with the thread

29
00:01:38,979 --> 00:01:43,939
ID of the thread on which the event is called.

30
00:01:43,939 --> 00:01:46,979
After that, we'll start the async work.

31
00:01:46,979 --> 00:01:51,358
We do that by calling start on the context and

32
00:01:51,358 --> 00:01:53,929
passing the start method a lambda.

33
00:01:53,929 --> 00:01:56,909
Inside the lambda we'll do a couple of things.

34
00:01:56,909 --> 00:02:02,959
Firstly, we'll add a try catch block to handle any errors.

35
00:02:02,959 --> 00:02:04,069
Inside the try,

36
00:02:04,069 --> 00:02:07,929
we add a log method to show the thread that is calling this lambda,

37
00:02:07,929 --> 00:02:11,929
and also write that ID back to the caller.

38
00:02:11,929 --> 00:02:15,899
To write to the browser, we use the context to get the response object,

39
00:02:15,899 --> 00:02:20,073
then on that response object we call getWriter and write

40
00:02:20,073 --> 00:02:23,939
a text message back to the browser.

41
00:02:23,939 --> 00:02:28,909
Then inside the catch, we simply log out any errors.

42
00:02:28,909 --> 00:02:32,929
After the try catch, we call context.complete.

43
00:02:32,929 --> 00:02:35,720
This tells the async context that we are done and allows

44
00:02:35,720 --> 00:02:40,909
the container to free up any resources.

45
00:02:40,909 --> 00:02:42,959
Now we can deploy the application.

46
00:02:42,959 --> 00:02:47,919
In the browser, browse to async/simple,

47
00:02:47,919 --> 00:02:49,909
and that executes the asynchronous servlet.

48
00:02:49,909 --> 00:02:54,929
And in the output here we can see the thread ID.

49
00:02:54,929 --> 00:02:58,909
And if we now look in the log file, we see the messages.

50
00:02:58,909 --> 00:03:01,989
We'll see the call to doGet is the first log message we had,

51
00:03:01,989 --> 00:03:06,899
and the call to start, which is in the start body.

52
00:03:06,899 --> 00:03:08,989
We also see a call to onComplete.

53
00:03:08,989 --> 00:03:13,939
However, notice that we don't see a call to onStart.

54
00:03:13,939 --> 00:03:18,909
We don't see the onStart event fired inside this listener.

55
00:03:18,909 --> 00:03:22,316
That's because we start the async context before we wire up

56
00:03:22,316 --> 00:03:26,276
the listener so that the event is fired before we've wired

57
00:03:26,276 --> 00:03:28,969
up the listener to the context.

58
00:03:28,969 --> 00:03:30,989
Also notice the thread ID of the calls.

59
00:03:30,989 --> 00:03:33,979
These calls all happen on different threads.

60
00:03:33,979 --> 00:03:36,939
DoGet happens on the initial thread,

61
00:03:36,939 --> 00:03:44,000
start happens on the thread created from the lambda, and onComplete happens on a thread created by the container for these events.

