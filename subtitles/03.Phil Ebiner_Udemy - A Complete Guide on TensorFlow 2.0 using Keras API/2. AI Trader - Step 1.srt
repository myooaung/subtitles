1
00:00:00,510 --> 00:00:07,170
Hello everyone and welcome to this python tutorial in the previous video we started with our A.I. traitor

2
00:00:07,180 --> 00:00:08,050
project.

3
00:00:08,320 --> 00:00:15,820
By setting up our environment and installing all libraries for the section and now in this video we

4
00:00:15,830 --> 00:00:19,900
will start with the implementation of the A.I. trainer model itself.

5
00:00:19,910 --> 00:00:23,730
It is the deep human network that we have traded stock for us.

6
00:00:24,080 --> 00:00:29,600
But before we jump into that part of the video let me walk you through libraries that we are going to

7
00:00:29,600 --> 00:00:31,510
need for the project.

8
00:00:31,550 --> 00:00:38,430
The first one is math later in the section that we will implement our own sigmoid function to scale

9
00:00:38,430 --> 00:00:39,900
our stock prices.

10
00:00:40,140 --> 00:00:41,840
But more on that later.

11
00:00:42,090 --> 00:00:44,920
And that's why we will need the math library.

12
00:00:45,120 --> 00:00:47,640
Then we have this random library.

13
00:00:47,640 --> 00:00:50,780
It will help us to generate random numbers.

14
00:00:50,850 --> 00:00:51,460
No.

15
00:00:51,510 --> 00:00:57,040
As always is here to help us work with matrices and umpire race.

16
00:00:57,170 --> 00:01:03,590
Then we have the pen this library tends to flow our library of choice for a neural network modelling

17
00:01:04,190 --> 00:01:06,220
then for data visualization.

18
00:01:06,320 --> 00:01:12,160
We have met blood to leap then we have this Panda's data reader.

19
00:01:12,200 --> 00:01:19,880
This library is used to download and work with the stock market information TDM is here as always to

20
00:01:19,880 --> 00:01:22,360
visualize any progress in the product.

21
00:01:23,110 --> 00:01:28,150
And lastly we have these De Q data structure in this product.

22
00:01:28,180 --> 00:01:33,190
We will implement experience a replay using this data structure.

23
00:01:33,490 --> 00:01:40,360
You have the intuition lecture about this concept included in the annex of the course execute the cell

24
00:01:40,870 --> 00:01:48,550
and just execute the next cell as well to make sure that we are using the Tanzer flow 2.0 and finally

25
00:01:48,580 --> 00:01:51,200
we are done with the first part of the video.

26
00:01:51,250 --> 00:01:56,690
It's time to start working on the A.I. trader class later in the course.

27
00:01:56,700 --> 00:01:59,070
We will talk about states and actions.

28
00:01:59,070 --> 00:02:06,990
For now let's define the algorithm itself to get that part out of the way we will use python class to

29
00:02:06,990 --> 00:02:14,790
create our structure of the A.I. trader bot so right class a trader.

30
00:02:14,970 --> 00:02:23,470
The next thing that we have to do is to define the init function of the class or its constructor death

31
00:02:24,060 --> 00:02:24,550
in it.

32
00:02:25,360 --> 00:02:27,140
And this function is called.

33
00:02:27,190 --> 00:02:36,100
Each time we define an object of the class so all things that we have to define right away are initialized

34
00:02:36,250 --> 00:02:43,440
in this function for its arguments just right self which is the keyword that connects a function and

35
00:02:43,530 --> 00:02:47,100
attributes of a class to a specific object.

36
00:02:47,100 --> 00:02:50,400
Then we have to specify a state size.

37
00:02:50,400 --> 00:02:56,030
More on that later and action space which is by default free when trading.

38
00:02:56,040 --> 00:03:01,860
We have free actions state which is does don't do anything.

39
00:03:01,860 --> 00:03:07,710
Buy and Sell and our agent will be able to perform these free actions as well.

40
00:03:09,060 --> 00:03:14,410
Lastly we have model name as an argument and this can be anything you want.

41
00:03:14,430 --> 00:03:22,430
Just put me for example a traitor for not now that we are done with the arguments part of the constructor

42
00:03:22,580 --> 00:03:26,760
let's define all hyper parameters of the network.

43
00:03:27,000 --> 00:03:35,320
The first two parameters are just state size and action space defined as an object attributes now have

44
00:03:35,320 --> 00:03:38,110
more model related parameters.

45
00:03:38,110 --> 00:03:42,160
The first one is the experience of replay memory cell Dot.

46
00:03:42,160 --> 00:03:45,240
Memory is equal to the Q.

47
00:03:45,260 --> 00:03:49,520
The problem with this function is it doesn't have a good dog string.

48
00:03:49,520 --> 00:03:56,030
You can Google it and find what arguments it can receive in this course we will use only one Max land

49
00:03:56,150 --> 00:03:57,990
is equal to 2000.

50
00:03:58,310 --> 00:04:01,550
Or how many elements we can store inside it.

51
00:04:01,550 --> 00:04:08,540
In our case it just put two thousand then initialize an empty list call in the three and this list will

52
00:04:08,540 --> 00:04:14,340
hold all both stocks since we cannot sell a stock we haven't bought before.

53
00:04:14,390 --> 00:04:18,720
And lastly we have this model name is equal to model name.

54
00:04:18,820 --> 00:04:26,140
OK now we have to initialize for more arguments before the end of this video and that is our gamma parameter.

55
00:04:26,190 --> 00:04:32,160
And if you remember the formula of our discount the total reward the gamma parameter helps us to maximize

56
00:04:32,160 --> 00:04:34,410
the current reward over long time reward.

57
00:04:35,450 --> 00:04:43,630
So right self doubt gamma and said it's something between zero point nine and one I will set it to zero

58
00:04:43,630 --> 00:04:45,580
point ninety five.

59
00:04:45,690 --> 00:04:51,270
There are only free variables left to define and they're all connected to the same thing.

60
00:04:51,990 --> 00:04:57,630
We have this Epsilon parameter that is used to determine whether should we choose and the random action

61
00:04:57,690 --> 00:04:59,880
or to use the model for it.

62
00:04:59,880 --> 00:05:02,330
Start by defining it to a 1.

63
00:05:02,340 --> 00:05:08,360
This means that at the very beginning of the training process when our network is not trained at all.

64
00:05:08,430 --> 00:05:15,810
All actions are performed randomly but over time we want to decrease this number so we can stop using

65
00:05:15,810 --> 00:05:21,330
random actions and start using mostly our train network.

66
00:05:21,330 --> 00:05:27,420
Even though we have a fully train network we still want the agent to take some random actions and that

67
00:05:27,420 --> 00:05:35,560
is for our environment exploration and that's where the next variable comes into play set epsilon final

68
00:05:36,040 --> 00:05:44,470
and set it to 0.01 for example when the value of epsilon is equal to or less this number we will start

69
00:05:44,470 --> 00:05:46,780
decreasing it any further.

70
00:05:46,780 --> 00:05:53,290
And finally we have an argument that determines how fast to decrease and epsilon defined a variable

71
00:05:53,290 --> 00:05:59,840
called Epsilon decay and define it to something less than 1.

72
00:05:59,950 --> 00:06:07,870
I will set it to zero point nine on five and that the whole a trader set up in the next video we will

73
00:06:07,870 --> 00:06:10,850
start building the brain of the algorithm.

74
00:06:10,870 --> 00:06:16,480
Stay tuned for that and if you have any questions or comments so far please post them in the comments

75
00:06:16,480 --> 00:06:17,220
section.

76
00:06:17,470 --> 00:06:19,330
Otherwise I'll see you in the next tutorial.
