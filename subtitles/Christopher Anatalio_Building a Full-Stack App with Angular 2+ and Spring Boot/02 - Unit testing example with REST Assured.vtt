WEBVTT
1
00:00:00.060 --> 00:00:03.070
Let's talk about options for testing your API.

2
00:00:03.070 --> 00:00:06.080
In post-band we have a two-wall called Runner.

3
00:00:06.080 --> 00:00:10.040
If you click on Runner, on the upper left-hand side,

4
00:00:10.040 --> 00:00:14.000
it will open up a Collection Runner interface.

5
00:00:14.000 --> 00:00:16.060
A Collection Runner will quickly test

6
00:00:16.060 --> 00:00:19.050
all of your API end points.

7
00:00:19.050 --> 00:00:24.010
So, let's click on your existing reservation collection,

8
00:00:24.010 --> 00:00:26.030
set one iteration,

9
00:00:26.030 --> 00:00:28.030
and zero delay.

10
00:00:28.030 --> 00:00:31.040
You could output a log file, if wanted.

11
00:00:31.040 --> 00:00:32.030
Okay?

12
00:00:32.030 --> 00:00:33.080
We've selected our collection.

13
00:00:33.080 --> 00:00:36.010
Let's click Start Run.

14
00:00:36.010 --> 00:00:41.010
You can see it quickly cycled through all of our end points.

15
00:00:41.010 --> 00:00:43.070
Please make sure that your application is running,

16
00:00:43.070 --> 00:00:46.050
at the time that you've run collection Runner.

17
00:00:46.050 --> 00:00:51.060
As you can see, we got a 200 response for each end point.

18
00:00:51.060 --> 00:00:54.050
It will also capture response time,

19
00:00:54.050 --> 00:00:58.040
payload size and other metrics.

20
00:00:58.040 --> 00:01:02.070
You could export the results as a JSON.

21
00:01:02.070 --> 00:01:05.080
You can also test and validate a rest service

22
00:01:05.080 --> 00:01:08.090
using a JAVA unit test.

23
00:01:08.090 --> 00:01:11.080
One library is REST-assured.

24
00:01:11.080 --> 00:01:13.060
You can learn more about REST-assured

25
00:01:13.060 --> 00:01:17.090
at rest-assured.io

26
00:01:17.090 --> 00:01:20.070
Let's stop our JAVA API server.

27
00:01:20.070 --> 00:01:24.000
Let's try running a REST-assured unit test locally.

28
00:01:24.000 --> 00:01:27.090
First, lets grab the great all dependency.

29
00:01:27.090 --> 00:01:35.060
Okay, let's do a search for io.rest-assured maven.

30
00:01:35.060 --> 00:01:38.030
Let's open up MVNrepository,

31
00:01:38.030 --> 00:01:40.020
click on the newest version,

32
00:01:40.020 --> 00:01:43.000
copy the dependency import,

33
00:01:43.000 --> 00:01:44.080
for cradle.

34
00:01:44.080 --> 00:01:47.030
Let's open up the bill dock cradle,

35
00:01:47.030 --> 00:01:52.000
add in the dependency, then let's rebuild our application

36
00:01:52.000 --> 00:01:54.040
using the cradle wrapper,

37
00:01:54.040 --> 00:01:58.060
let's execute clean and build.

38
00:01:58.060 --> 00:02:02.080
Let's open up ReservationResource.

39
00:02:02.080 --> 00:02:08.080
Let's right-click on source, flesh test, flesh JAVA.

40
00:02:08.080 --> 00:02:14.020
Go to new and let's create a new JUnit test case.

41
00:02:14.020 --> 00:02:18.040
Let's name it, ReservationResource.

42
00:02:18.040 --> 00:02:23.000
Click setup so that we have a setup method.

43
00:02:23.000 --> 00:02:25.010
Now, click finish.

44
00:02:25.010 --> 00:02:28.030
Let's add a RunWith annotation,

45
00:02:28.030 --> 00:02:31.000
passing in SpringRunner.

46
00:02:31.000 --> 00:02:33.080
Let's import the SpringRunner class,

47
00:02:33.080 --> 00:02:36.090
then let's import that annotation.

48
00:02:36.090 --> 00:02:41.010
Next, let's add a SpringBootTest annotation.

49
00:02:41.010 --> 00:02:46.000
Okay, let's import it and then let's pass in our SpringBoot

50
00:02:46.000 --> 00:02:52.070
application class and also our webEnvironment.

51
00:02:52.070 --> 00:02:56.000
Let's use a RANDOM_PORT for our webEnvironment,

52
00:02:56.000 --> 00:02:59.030
so that we don't have any port conflicts.

53
00:02:59.030 --> 00:03:04.080
This webEnvironment will select a random open port to use.

54
00:03:04.080 --> 00:03:07.020
Let's create a private int called port

55
00:03:07.020 --> 00:03:11.000
and add the annotation @LocalServerPort.

56
00:03:11.000 --> 00:03:13.050
Let's import that annotation,

57
00:03:13.050 --> 00:03:18.070
then in our setup method, let's configure RESTassured.

58
00:03:18.070 --> 00:03:23.050
Okay, we set the port, now let's set the base path.

59
00:03:23.050 --> 00:03:29.070
Let's grab the room reservation constant,

60
00:03:29.070 --> 00:03:34.070
let's export it from ResourceConstance,

61
00:03:34.070 --> 00:03:39.010
then let's set the baseURI.

62
00:03:39.010 --> 00:03:41.040
Let's set it to localhost.

63
00:03:41.040 --> 00:03:45.010
The port will be randomized and set here.

64
00:03:45.010 --> 00:03:47.080
Now, let's add a test.

65
00:03:47.080 --> 00:03:50.020
Let's do a static import

66
00:03:50.020 --> 00:03:52.070
of import static

67
00:03:52.070 --> 00:04:01.010
io.restassured.RestAssured.given

68
00:04:01.010 --> 00:04:07.040
Using that static important, let's add the given method call

69
00:04:07.040 --> 00:04:12.070
and then a chained when call and then a chained get call,

70
00:04:12.070 --> 00:04:17.010
passing in slash, plus an expected ID

71
00:04:17.010 --> 00:04:19.070
of one of the rooms,

72
00:04:19.070 --> 00:04:23.030
which we pre-populate in the database.

73
00:04:23.030 --> 00:04:26.060
Then let's add a chained then call,

74
00:04:26.060 --> 00:04:34.070
and then let's add an expectation of a status code 200.

75
00:04:34.070 --> 00:04:36.000
Okay.

76
00:04:36.000 --> 00:04:38.070
This statement will attempt to execute a call

77
00:04:38.070 --> 00:04:42.060
to the baseURI, to this path, on this port,

78
00:04:42.060 --> 00:04:46.030
trying to get the resource

79
00:04:46.030 --> 00:04:48.040
with the ID 1

80
00:04:48.040 --> 00:04:51.060
and then it will ensure it has a status code of 200.

81
00:04:51.060 --> 00:04:56.080
Let's right-click on the background, run as JUnit test.

82
00:04:56.080 --> 00:05:00.060
Because we added the annotation @RunWith,

83
00:05:00.060 --> 00:05:03.010
we're going to run the application

84
00:05:03.010 --> 00:05:06.090
with the full application context.

85
00:05:06.090 --> 00:05:10.060
If you click on the JUnit window, on the right sidebar,

86
00:05:10.060 --> 00:05:15.000
you can see that our test completed successfully.

