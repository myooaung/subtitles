WEBVTT
1
00:00:00.060 --> 00:00:03.010
- [Instructor] Now that we've extracted the project files,

2
00:00:03.010 --> 00:00:06.030
let's get the project imported into our IDE.

3
00:00:06.030 --> 00:00:09.050
First, let's install Spring Tool Suite.

4
00:00:09.050 --> 00:00:13.090
Let's navigate to Spring.io/tools.

5
00:00:13.090 --> 00:00:16.040
Click download STS.

6
00:00:16.040 --> 00:00:19.010
Next, let's open the downloaded file.

7
00:00:19.010 --> 00:00:22.050
Double click to extract,

8
00:00:22.050 --> 00:00:28.000
open the extracted files, click on STS, and copy.

9
00:00:28.000 --> 00:00:32.040
Then, let's navigate to applications, and paste.

10
00:00:32.040 --> 00:00:37.010
Now, let's open STS using the default workspace.

11
00:00:37.010 --> 00:00:40.070
Next, we'll need to install the Gradle plugin for Eclipse,

12
00:00:40.070 --> 00:00:42.040
called Buildship.

13
00:00:42.040 --> 00:00:43.040
Let's navigate to

14
00:00:43.040 --> 00:00:51.060
projects.eclipse.org/projects/tools.buildship.

15
00:00:51.060 --> 00:00:55.020
Click on the current version, then copy the link to

16
00:00:55.020 --> 00:00:57.000
the update site.

17
00:00:57.000 --> 00:01:00.020
Next, let's open up Spring Tool Suite,

18
00:01:00.020 --> 00:01:03.050
click on the help tab, then install the new software.

19
00:01:03.050 --> 00:01:07.070
Next, let's click Add, then paste the update site link

20
00:01:07.070 --> 00:01:12.080
into the location and name field, then click OK.

21
00:01:12.080 --> 00:01:15.040
Check the box next to the box next to the Buildship plug-in,

22
00:01:15.040 --> 00:01:18.040
then click next, and next again.

23
00:01:18.040 --> 00:01:22.070
Accept the terms, and click finish.

24
00:01:22.070 --> 00:01:27.010
Then click yes to restart STS.

25
00:01:27.010 --> 00:01:30.060
Next, let's import our project into STS.

26
00:01:30.060 --> 00:01:33.050
Click on the File tab, select Import,

27
00:01:33.050 --> 00:01:37.050
expand the Gradle item in the import wizard tree.

28
00:01:37.050 --> 00:01:41.080
Select Existing Gradle Project, then click Next, and Next.

29
00:01:41.080 --> 00:01:45.020
Click Browse, and navigate to your projects root directory,

30
00:01:45.020 --> 00:01:49.080
and click Open, then click Finish.

31
00:01:49.080 --> 00:01:52.020
The project will now begin importing, building,

32
00:01:52.020 --> 00:01:55.000
and downloading dependencies.

33
00:01:55.000 --> 00:01:58.000
Next, let's build and run the application.

34
00:01:58.000 --> 00:02:00.050
Right click on the project's root directory,

35
00:02:00.050 --> 00:02:04.080
click Run As, then select Spring Boot App.

36
00:02:04.080 --> 00:02:07.090
The application should begin starting up.

37
00:02:07.090 --> 00:02:10.080
The final log statement in your console should indicate your

38
00:02:10.080 --> 00:02:13.060
Spring Boot Application has started.

39
00:02:13.060 --> 00:02:16.010
Next, let's stop the application,

40
00:02:16.010 --> 00:02:20.030
and look into an alternative way of writing your app.

41
00:02:20.030 --> 00:02:22.080
Open up a terminal and cd into your

42
00:02:22.080 --> 00:02:26.010
project's root directory.

43
00:02:26.010 --> 00:02:29.090
Next, let's run the application using the Gradle wrapper,

44
00:02:29.090 --> 00:02:33.020
and the bootrun task.

45
00:02:33.020 --> 00:02:36.050
We're able to run a Spring Boot Application without first

46
00:02:36.050 --> 00:02:40.030
deploying it to a servlet container, such as Tomcat,

47
00:02:40.030 --> 00:02:43.000
because the servlet container is embedded

48
00:02:43.000 --> 00:02:45.000
in the jar file itself.

