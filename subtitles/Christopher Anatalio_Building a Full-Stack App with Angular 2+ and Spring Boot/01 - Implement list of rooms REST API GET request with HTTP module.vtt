WEBVTT
1
00:00:00.070 --> 00:00:02.020
- [Narrator] Now that we have our end points

2
00:00:02.020 --> 00:00:03.090
hooked into our data layer, let's get our

3
00:00:03.090 --> 00:00:07.060
Angular JS2 hooked up into our API.

4
00:00:07.060 --> 00:00:10.080
We will be using HTTP module to execute

5
00:00:10.080 --> 00:00:14.000
our rest API calls.

6
00:00:14.000 --> 00:00:18.030
We will receive what is called a observable in response.

7
00:00:18.030 --> 00:00:22.060
An observable is a new type of asynchronous data stream

8
00:00:22.060 --> 00:00:24.080
in Angular JS2.

9
00:00:24.080 --> 00:00:31.000
We will be using RxJS, a reactive library for JavaScript.

10
00:00:31.000 --> 00:00:34.000
It is a third party library that is endorsed

11
00:00:34.000 --> 00:00:37.030
by Angular JS2 as a framework.

12
00:00:37.030 --> 00:00:40.050
An observable is a asynchronous stream of data

13
00:00:40.050 --> 00:00:43.030
that is emitted over time.

14
00:00:43.030 --> 00:00:46.000
This leads to a better user experience

15
00:00:46.000 --> 00:00:50.010
since you can process data as it streams in.

16
00:00:50.010 --> 00:00:53.050
First, let's add a cross origin annotation

17
00:00:53.050 --> 00:00:55.090
to our reservation resource.

18
00:00:55.090 --> 00:01:00.040
Since our Angular app is running on local host 4200

19
00:01:00.040 --> 00:01:04.060
and our API is running on local host 8080,

20
00:01:04.060 --> 00:01:07.040
they are considered different origins.

21
00:01:07.040 --> 00:01:09.080
Normally, for security reasons, you would want

22
00:01:09.080 --> 00:01:13.020
to maintain a same origin policy,

23
00:01:13.020 --> 00:01:15.070
however during local development we will want

24
00:01:15.070 --> 00:01:18.050
to open up this restriction so that our

25
00:01:18.050 --> 00:01:23.090
Angular JS2 app can communicate with our API.

26
00:01:23.090 --> 00:01:28.090
So, let's add a cross origin annotation

27
00:01:28.090 --> 00:01:31.080
which is imported from spring.

28
00:01:31.080 --> 00:01:36.040
Let's save and restart our API.

29
00:01:36.040 --> 00:01:39.000
Okay, we're restarted.

30
00:01:39.000 --> 00:01:43.000
Let's open up app.component.ts.

31
00:01:43.000 --> 00:01:45.050
Let's import the dependencies we need

32
00:01:45.050 --> 00:01:49.040
from the HTTP module and also

33
00:01:49.040 --> 00:01:52.020
from the reactive JS module.

34
00:01:52.020 --> 00:02:00.090
Let's import HTTP and response.

35
00:02:00.090 --> 00:02:04.010
If you look in app.module.ts you can see

36
00:02:04.010 --> 00:02:08.090
that we already have that import in place.

37
00:02:08.090 --> 00:02:13.090
Next, let's import observable.

38
00:02:13.090 --> 00:02:18.090
Let's also import the operators map and catch.

39
00:02:18.090 --> 00:02:23.060
Map will help us process the results from a HTTP call.

40
00:02:23.060 --> 00:02:28.030
Catch will help us handle any exceptions we encounter.

41
00:02:28.030 --> 00:02:32.050
In our app component let's pass in HTTP

42
00:02:32.050 --> 00:02:34.040
to our constructor.

43
00:02:34.040 --> 00:02:38.080
Next, let's create a function called get all.

44
00:02:38.080 --> 00:02:41.060
Make sure this function is within the scope

45
00:02:41.060 --> 00:02:43.010
of your app component.

46
00:02:43.010 --> 00:02:47.030
Let's add in a HTTP get call.

47
00:02:47.030 --> 00:02:53.070
Let's define our base URL at the top of app component.

48
00:02:53.070 --> 00:02:58.070
This base URL will be how we access our API.

49
00:02:58.070 --> 00:03:02.050
Let's pass in that base URL to our get call

50
00:03:02.050 --> 00:03:08.070
and add in the rest of our URL.

51
00:03:08.070 --> 00:03:14.020
Passing in our check in and check out parameters.

52
00:03:14.020 --> 00:03:16.010
Next, let's define a mapping function

53
00:03:16.010 --> 00:03:18.090
to help process the result.

54
00:03:18.090 --> 00:03:21.010
The function will be named map room

55
00:03:21.010 --> 00:03:24.090
and will take in one parameter response

56
00:03:24.090 --> 00:03:26.060
of the type response.

57
00:03:26.060 --> 00:03:29.080
It will return a array of rooms.

58
00:03:29.080 --> 00:03:33.050
Room is a object we defined earlier here.

59
00:03:33.050 --> 00:03:38.080
Let's take that response, extract the json,

60
00:03:38.080 --> 00:03:42.040
and then grab the element content from that json.

61
00:03:42.040 --> 00:03:46.060
Looking at the raw json string you can see here

62
00:03:46.060 --> 00:03:50.010
content will return the actual data which was

63
00:03:50.010 --> 00:03:53.060
returned from your API call minus

64
00:03:53.060 --> 00:03:58.000
all the information used for paging.

65
00:03:58.000 --> 00:04:01.070
Let's map the response using that mapping function

66
00:04:01.070 --> 00:04:03.080
we just created.

67
00:04:03.080 --> 00:04:06.090
Let's have our get all function return

68
00:04:06.090 --> 00:04:12.040
a observable containing a room array.

69
00:04:12.040 --> 00:04:14.020
Let's make sure we have a colon

70
00:04:14.020 --> 00:04:18.000
between the function name and the return type.

71
00:04:18.000 --> 00:04:21.030
Now, in the on submit function which is triggered

72
00:04:21.030 --> 00:04:26.020
when we click search on our page.

73
00:04:26.020 --> 00:04:29.040
Let's call the get all function.

74
00:04:29.040 --> 00:04:34.010
Get all returns a observable that we can subscribe to.

75
00:04:34.010 --> 00:04:36.050
When you subscribe to an observable

76
00:04:36.050 --> 00:04:40.070
you are subscribing to the asynchronous data string.

77
00:04:40.070 --> 00:04:44.050
We will pass in a lamda which will take the

78
00:04:44.050 --> 00:04:49.030
streaming data and put it into an array called rooms.

79
00:04:49.030 --> 00:04:54.030
We will also pass in a second lamda to handle errors.

80
00:04:54.030 --> 00:04:57.080
In this case, we will just log each error.

81
00:04:57.080 --> 00:04:59.060
Okay, let's save.

82
00:04:59.060 --> 00:05:02.070
Next, let's delete the hard coded data

83
00:05:02.070 --> 00:05:09.020
we had previously and remove this initialization.

84
00:05:09.020 --> 00:05:13.010
Now, rooms will be empty until we submit

85
00:05:13.010 --> 00:05:17.010
our get all rest API call.

86
00:05:17.010 --> 00:05:20.090
Let's head to app.component.html.

87
00:05:20.090 --> 00:05:22.070
Let's navigate to the table

88
00:05:22.070 --> 00:05:25.010
which contains our room data,

89
00:05:25.010 --> 00:05:29.020
then let's add a ng if directive.

90
00:05:29.020 --> 00:05:32.090
This directive will only display the section

91
00:05:32.090 --> 00:05:36.020
if rooms is populated.

92
00:05:36.020 --> 00:05:38.030
Okay, let's save.

93
00:05:38.030 --> 00:05:40.020
We could see webpack has compiled

94
00:05:40.020 --> 00:05:42.030
our changes successfully.

95
00:05:42.030 --> 00:05:45.020
So, let's go take a look at our site.

96
00:05:45.020 --> 00:05:47.040
If you right click on the page, go to inspect,

97
00:05:47.040 --> 00:05:52.020
right click on refresh and click on empty cache

98
00:05:52.020 --> 00:05:55.030
and hard reload that will clear your cache

99
00:05:55.030 --> 00:06:00.000
and give you a fresh update of your website.

100
00:06:00.000 --> 00:06:04.020
Type in a date, then click submit.

101
00:06:04.020 --> 00:06:07.030
Clicking submit will trigger this method

102
00:06:07.030 --> 00:06:14.080
on submit passing in your form group, room search.

103
00:06:14.080 --> 00:06:18.040
That method will execute the get all

104
00:06:18.040 --> 00:06:21.080
rest API call and then we will subscribe

105
00:06:21.080 --> 00:06:25.010
to the return observable which will

106
00:06:25.010 --> 00:06:29.080
populate data into the array rooms.

107
00:06:29.080 --> 00:06:33.060
Then, we use a ng 4 directive to iterate

108
00:06:33.060 --> 00:06:38.000
through that data and display it in the table.

109
00:06:38.000 --> 00:06:40.070
We can see the data displayed here.

110
00:06:40.070 --> 00:06:42.090
We have added formatting to make the price

111
00:06:42.090 --> 00:06:46.040
look more like an actual price.

112
00:06:46.040 --> 00:06:49.020
You can see the three elements displayed

113
00:06:49.020 --> 00:06:52.070
in our table now match up with the three elements

114
00:06:52.070 --> 00:06:55.060
which we pulled from our data base.

115
00:06:55.060 --> 00:06:58.000
We have prices being two hundred, two fifteen

116
00:06:58.000 --> 00:06:59.080
and two eighteen.

117
00:06:59.080 --> 00:07:01.070
Also, let's take a look at some of the

118
00:07:01.070 --> 00:07:03.050
client side validation.

119
00:07:03.050 --> 00:07:08.040
If you try to add a invalid date, such as March 32nd,

120
00:07:08.040 --> 00:07:13.000
it will automatically change it to the last valid date.

121
00:07:13.000 --> 00:07:16.010
If you leave a field empty and try to click submit

122
00:07:16.010 --> 00:07:19.000
you'll get a validation error.

