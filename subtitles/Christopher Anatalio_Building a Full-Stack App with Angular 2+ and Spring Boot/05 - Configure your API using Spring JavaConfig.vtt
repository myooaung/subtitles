WEBVTT
1
00:00:00.050 --> 00:00:02.060
- [Narrator] Now let's dive into some code.

2
00:00:02.060 --> 00:00:05.050
First, we need to configure our application.

3
00:00:05.050 --> 00:00:09.070
We will use annotative Java classes for our configuration.

4
00:00:09.070 --> 00:00:12.030
Let's create a package named config.

5
00:00:12.030 --> 00:00:15.040
Let's right click on the root package,

6
00:00:15.040 --> 00:00:19.020
mouse over new, and select package.

7
00:00:19.020 --> 00:00:21.050
And then we're going to name it config.

8
00:00:21.050 --> 00:00:23.080
Next, click finish.

9
00:00:23.080 --> 00:00:26.050
Let's right click on the config package,

10
00:00:26.050 --> 00:00:30.040
mouse over new, and create a new class.

11
00:00:30.040 --> 00:00:33.050
Let's name the class ApiConfig.

12
00:00:33.050 --> 00:00:35.080
Then, click finish.

13
00:00:35.080 --> 00:00:38.040
First, let's add a configuration annotation

14
00:00:38.040 --> 00:00:43.020
so that Spring knows to use this class for configuration.

15
00:00:43.020 --> 00:00:45.080
Let's left click on the error

16
00:00:45.080 --> 00:00:50.030
and import the Spring framework configuration annotation.

17
00:00:50.030 --> 00:00:53.040
Next, we will add two beans to this class,

18
00:00:53.040 --> 00:00:57.010
an ObjectMapper and an ObjectWriter.

19
00:00:57.010 --> 00:01:00.060
The ObjectMapper will define how JSON strings

20
00:01:00.060 --> 00:01:04.000
in the request body are deserialized from requests

21
00:01:04.000 --> 00:01:08.020
in POJOs or Plain Old Java Objects,

22
00:01:08.020 --> 00:01:10.090
which we use to model our data.

23
00:01:10.090 --> 00:01:13.090
The ObjectWriter will define how we serialize

24
00:01:13.090 --> 00:01:18.050
our Java objects into a JSON string in the response body.

25
00:01:18.050 --> 00:01:21.010
Let's create a new public method,

26
00:01:21.010 --> 00:01:29.000
ObjectMapper, that returns a ObjectMapper object.

27
00:01:29.000 --> 00:01:33.040
Next, left click on the error and import

28
00:01:33.040 --> 00:01:35.090
the Jackson ObjectMapper.

29
00:01:35.090 --> 00:01:39.080
Then let's add a bean annotation to that method.

30
00:01:39.080 --> 00:01:43.050
Click on the error, and import the Spring framework

31
00:01:43.050 --> 00:01:45.030
bean annotation.

32
00:01:45.030 --> 00:01:47.090
Next, let's create another public method

33
00:01:47.090 --> 00:01:50.060
that takes in that ObjectMapper bean

34
00:01:50.060 --> 00:01:52.060
as a parameter.

35
00:01:52.060 --> 00:01:55.080
This method will return a ObjectWriter.

36
00:01:55.080 --> 00:01:58.040
It will use the ObjectMapper to create

37
00:01:58.040 --> 00:02:02.040
a Default PrettyPrinter, which will output a JSON

38
00:02:02.040 --> 00:02:04.050
in Human Readable Format.

39
00:02:04.050 --> 00:02:06.090
Let's click on the error, and import

40
00:02:06.090 --> 00:02:09.030
the Jackson ObjectWriter.

41
00:02:09.030 --> 00:02:12.010
Next, let's add another bean annotation.

42
00:02:12.010 --> 00:02:15.080
Next, let's jump to our Spring Boot Application Class.

43
00:02:15.080 --> 00:02:18.020
We are going to add two annotations,

44
00:02:18.020 --> 00:02:23.020
enable auto configuration and component scan.

45
00:02:23.020 --> 00:02:26.050
The annotation, enable auto configuration

46
00:02:26.050 --> 00:02:28.070
will intelligently configure beans

47
00:02:28.070 --> 00:02:30.080
that you are likely to need in your

48
00:02:30.080 --> 00:02:33.050
Spring application context.

49
00:02:33.050 --> 00:02:35.050
The annotation, component scan,

50
00:02:35.050 --> 00:02:37.070
will enable automatic scanning

51
00:02:37.070 --> 00:02:40.020
for configuration classes to wire up

52
00:02:40.020 --> 00:02:43.060
in your Spring application context.

53
00:02:43.060 --> 00:02:46.010
Left click on the error and import

54
00:02:46.010 --> 00:02:49.090
the enable auto configuration annotation.

55
00:02:49.090 --> 00:02:53.020
Now let's add the component scan annotation.

56
00:02:53.020 --> 00:02:54.070
Click on the error,

57
00:02:54.070 --> 00:02:57.080
and import the component scan annotation.

58
00:02:57.080 --> 00:03:01.070
Let's save our changes.

59
00:03:01.070 --> 00:03:04.010
Right click on the project root,

60
00:03:04.010 --> 00:03:07.050
go to run as Spring Boot App.

61
00:03:07.050 --> 00:03:08.050
Okay, great.

62
00:03:08.050 --> 00:03:11.000
So our application started up correctly.

