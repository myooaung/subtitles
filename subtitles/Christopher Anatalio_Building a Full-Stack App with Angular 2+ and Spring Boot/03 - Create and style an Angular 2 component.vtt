WEBVTT
1
00:00:00.000 --> 00:00:01.070
- [Male Voice] Next, let's update our

2
00:00:01.070 --> 00:00:05.020
AngularJS component and create a form

3
00:00:05.020 --> 00:00:09.040
to allow a user to search for available rooms

4
00:00:09.040 --> 00:00:14.030
by passing in a desired check-in and check-out date.

5
00:00:14.030 --> 00:00:18.060
Just to clarify, we will be using the CSS components

6
00:00:18.060 --> 00:00:22.080
from Twitter Bootstrap and not the jQuery aspects.

7
00:00:22.080 --> 00:00:25.010
Generally, best practice dictates

8
00:00:25.010 --> 00:00:29.000
that you should not use jQuery and AngularJS 2

9
00:00:29.000 --> 00:00:33.030
since they represent different programming paradigms.

10
00:00:33.030 --> 00:00:35.010
There are several libraries out there

11
00:00:35.010 --> 00:00:37.040
that are attempting to combine Twitter Bootstrap

12
00:00:37.040 --> 00:00:40.090
with AngularJS 2 but many are in alpha

13
00:00:40.090 --> 00:00:43.040
and not currently stable.

14
00:00:43.040 --> 00:00:46.070
Twitter Bootstrap uses a 12 column grid-based layout.

15
00:00:46.070 --> 00:00:48.090
This allows you to organize your content

16
00:00:48.090 --> 00:00:52.080
in a flexible and mobile responsive manner.

17
00:00:52.080 --> 00:00:56.080
Let's open up app.component.html.

18
00:00:56.080 --> 00:01:01.090
Let's add a row and a 12 column div.

19
00:01:01.090 --> 00:01:04.040
Next, let's grab the header and drop it

20
00:01:04.040 --> 00:01:07.080
in our 12 column div.

21
00:01:07.080 --> 00:01:12.000
Let's update the header to Book a Room.

22
00:01:12.000 --> 00:01:15.030
Next, let's create a form.

23
00:01:15.030 --> 00:01:20.000
Let's use the Twitter Bootstrap class form dash horizontal.

24
00:01:20.000 --> 00:01:21.060
Next, let's create form group

25
00:01:21.060 --> 00:01:28.000
that contains a label and an input field.

26
00:01:28.000 --> 00:01:32.000
Let's set the label to column dash 4

27
00:01:32.000 --> 00:01:34.040
which will give the label one-third

28
00:01:34.040 --> 00:01:36.000
of the available space.

29
00:01:36.000 --> 00:01:38.090
Let's name the label Check-In.

30
00:01:38.090 --> 00:01:41.040
Let's create a input of a type date

31
00:01:41.040 --> 00:01:46.060
in a div with eight columns.

32
00:01:46.060 --> 00:01:49.080
Next, let's name that input Check-In

33
00:01:49.080 --> 00:01:54.000
then let's associate the label with that input.

34
00:01:54.000 --> 00:01:58.010
Let's add the class form dash control to our input.

35
00:01:58.010 --> 00:02:01.080
Now, let's add another form group for check out.

36
00:02:01.080 --> 00:02:04.040
Let's copy that form group, paste

37
00:02:04.040 --> 00:02:07.080
and then update the label to Check-Out.

38
00:02:07.080 --> 00:02:09.040
Let's update the ID on the input

39
00:02:09.040 --> 00:02:11.050
to Check-Out as well.

40
00:02:11.050 --> 00:02:13.090
Finally, let's add one final form group

41
00:02:13.090 --> 00:02:18.000
with a Submit button.

42
00:02:18.000 --> 00:02:21.040
Let's create a div with a offset of two columns

43
00:02:21.040 --> 00:02:24.030
and a width of 10.

44
00:02:24.030 --> 00:02:28.070
This will offset this section two columns from the left.

45
00:02:28.070 --> 00:02:31.080
Let's create a button of the type Submit

46
00:02:31.080 --> 00:02:36.080
and use the classes BTN, BTN dash primary,

47
00:02:36.080 --> 00:02:40.050
and BTN large from Twitter Bootstrap.

48
00:02:40.050 --> 00:02:44.010
Then, let's update the label on the button to Submit.

49
00:02:44.010 --> 00:02:46.020
Okay, let's save our changes.

50
00:02:46.020 --> 00:02:49.000
If you have your AngularJS 2 server running,

51
00:02:49.000 --> 00:02:52.030
it will automatically update your changes

52
00:02:52.030 --> 00:02:54.010
into the live site.

53
00:02:54.010 --> 00:02:55.090
So let's take a look.

54
00:02:55.090 --> 00:03:00.010
As you could see we have a form with two fields

55
00:03:00.010 --> 00:03:02.090
Check-In and Check-Out and a submit button.

56
00:03:02.090 --> 00:03:05.020
But they are not styled correctly.

57
00:03:05.020 --> 00:03:08.070
Let's go ahead and update our Bootstrap CSS

58
00:03:08.070 --> 00:03:14.050
which we installed using MPM.

59
00:03:14.050 --> 00:03:15.090
And then save.

60
00:03:15.090 --> 00:03:18.050
And we can see that AngularJS 2 and Wetpack

61
00:03:18.050 --> 00:03:21.090
have automatically updated our changes.

62
00:03:21.090 --> 00:03:24.090
Now our form is formatted correctly.

63
00:03:24.090 --> 00:03:27.090
Next, let's build the functionality behind our form

64
00:03:27.090 --> 00:03:30.000
by updating the typescript.

65
00:03:30.000 --> 00:03:34.020
Let's open up the file app.module.ts.

66
00:03:34.020 --> 00:03:38.010
Let's import the module Reactive Forms Module

67
00:03:38.010 --> 00:03:40.030
from Angular Forms.

68
00:03:40.030 --> 00:03:43.020
Then, let's update the imports.

69
00:03:43.020 --> 00:03:46.020
When updating the app.module.ts file

70
00:03:46.020 --> 00:03:49.010
you may see errors pop up.

71
00:03:49.010 --> 00:03:51.090
Just give Eclipse a couple moments to catch up

72
00:03:51.090 --> 00:03:55.030
and recompile and revalidate your code.

73
00:03:55.030 --> 00:03:59.000
Now, let's go into app.component.ts.

74
00:03:59.000 --> 00:04:06.070
Let's import component, OnInit, Form Control and Form Group.

75
00:04:06.070 --> 00:04:10.050
Let's implement OnInit in our app component.

76
00:04:10.050 --> 00:04:14.050
Then let's add a Form Group called room search.

77
00:04:14.050 --> 00:04:16.080
We could delete this title field

78
00:04:16.080 --> 00:04:20.010
which was generated by the AngularJS 2 command

79
00:04:20.010 --> 00:04:22.030
just to test our application.

80
00:04:22.030 --> 00:04:25.070
Let's create a NG OnInit method to initialize

81
00:04:25.070 --> 00:04:30.090
our form group.

82
00:04:30.090 --> 00:04:33.070
Let's add two form controls to that form group,

83
00:04:33.070 --> 00:04:38.090
check-in and check-out.

84
00:04:38.090 --> 00:04:42.010
Then, let's add another parameter called submitted

85
00:04:42.010 --> 00:04:46.030
on the type boolean to track if our form was submitted.

86
00:04:46.030 --> 00:04:48.080
Let's set it to public visibility.

87
00:04:48.080 --> 00:04:52.000
Then let's create a method on submit to trigger

88
00:04:52.000 --> 00:04:54.080
when our form is submitted.

89
00:04:54.080 --> 00:04:57.060
Let's create a interface, room search

90
00:04:57.060 --> 00:05:04.060
that has two fields, check-in and check-out.

91
00:05:04.060 --> 00:05:06.060
Let's update our on submit method

92
00:05:06.060 --> 00:05:09.080
to take in two fields, a room search object

93
00:05:09.080 --> 00:05:15.020
and a boolean indicating whether a form was submitted.

94
00:05:15.020 --> 00:05:18.030
In a later video, we will create a rest service

95
00:05:18.030 --> 00:05:21.020
to make a call to our backend rest API.

96
00:05:21.020 --> 00:05:24.010
But for now, let's just use console log

97
00:05:24.010 --> 00:05:28.030
to log the value.

98
00:05:28.030 --> 00:05:31.050
Let's make sure our interface is declared

99
00:05:31.050 --> 00:05:38.060
outside our app component.

100
00:05:38.060 --> 00:05:40.080
Okay, then let's save.

101
00:05:40.080 --> 00:05:45.050
Next, let's head back into app.component.html.

102
00:05:45.050 --> 00:05:48.000
Let's update our form to hook into

103
00:05:48.000 --> 00:05:49.050
our AngularJS 2 logic.

104
00:05:49.050 --> 00:05:54.030
First, let's add a form group to our form of room search.

105
00:05:54.030 --> 00:05:58.050
Let's set the NG submit to the method on submit

106
00:05:58.050 --> 00:06:02.000
passing in the room search object.

107
00:06:02.000 --> 00:06:05.040
Next, let's update the input check-in

108
00:06:05.040 --> 00:06:09.010
with a form control name also called check-in.

109
00:06:09.010 --> 00:06:11.050
Okay, let's add the form control name field

110
00:06:11.050 --> 00:06:13.050
to check-out.

111
00:06:13.050 --> 00:06:15.030
Then let's save.

112
00:06:15.030 --> 00:06:18.010
Looks like we got some errors importing

113
00:06:18.010 --> 00:06:20.020
the reactive forms module.

114
00:06:20.020 --> 00:06:24.020
It looks like I tried to import the reactive forms module

115
00:06:24.020 --> 00:06:30.040
from http when I should've imported it from forms.

116
00:06:30.040 --> 00:06:32.060
Let's save our changes and it looks like

117
00:06:32.060 --> 00:06:35.000
that fixed the issue.

118
00:06:35.000 --> 00:06:38.020
Okay, it looks like our changes were updated.

119
00:06:38.020 --> 00:06:40.080
Let's test out the form.

120
00:06:40.080 --> 00:06:43.050
Let's open up the inspect window by right-clicking

121
00:06:43.050 --> 00:06:47.020
on the background and clicking on inspect.

122
00:06:47.020 --> 00:06:50.090
Then, let's click on the console tab.

123
00:06:50.090 --> 00:06:54.030
Let's test out our form by clicking on submit.

124
00:06:54.030 --> 00:06:56.090
As you could see, we submitted the object

125
00:06:56.090 --> 00:07:00.080
containing the fields check-in and check-out.

126
00:07:00.080 --> 00:07:04.060
Which was logged out of app.component.ts.

127
00:07:04.060 --> 00:07:07.000
So it looks like our form's working correctly.

128
00:07:07.000 --> 00:07:10.030
So in this case, we used a reactive form.

129
00:07:10.030 --> 00:07:13.050
In AngularJS 2 you have an option to use

130
00:07:13.050 --> 00:07:17.020
a template driven form or reactive forms.

131
00:07:17.020 --> 00:07:19.050
Template driven forms are generally simpler

132
00:07:19.050 --> 00:07:21.080
and require less Javascript.

133
00:07:21.080 --> 00:07:25.020
Reactive forms are much easier to unit test

134
00:07:25.020 --> 00:07:27.060
because they are model driven.

135
00:07:27.060 --> 00:07:29.040
You could test a reactive form

136
00:07:29.040 --> 00:07:33.010
using a unit testing framework such as Karma.

137
00:07:33.010 --> 00:07:36.010
Testing a template driven form would require

138
00:07:36.010 --> 00:07:40.000
a end-to-end testing framework such as Selenium.

