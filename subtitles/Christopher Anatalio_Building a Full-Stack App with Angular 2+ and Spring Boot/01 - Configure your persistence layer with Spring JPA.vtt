WEBVTT
1
00:00:00.060 --> 00:00:02.010
- [Instructor] Okay now let's finish up

2
00:00:02.010 --> 00:00:04.030
coding the back end rest API

3
00:00:04.030 --> 00:00:06.050
by implementing a persistence layer

4
00:00:06.050 --> 00:00:11.010
to interact with our in memory, H2 database.

5
00:00:11.010 --> 00:00:17.040
We added the runtime dependency, com.h2database:h2

6
00:00:17.040 --> 00:00:20.020
during booth trapping our project.

7
00:00:20.020 --> 00:00:22.020
This dependency which you could find

8
00:00:22.020 --> 00:00:24.000
in the build.gradle file

9
00:00:24.000 --> 00:00:27.000
will spin up an in memory H2 database

10
00:00:27.000 --> 00:00:31.010
when we start up our Spring Boot app using the gradle task

11
00:00:31.010 --> 00:00:32.090
boot run.

12
00:00:32.090 --> 00:00:35.070
Let's create a new class in our config package

13
00:00:35.070 --> 00:00:37.070
called database config.

14
00:00:37.070 --> 00:00:40.000
Let's add two annotations

15
00:00:40.000 --> 00:00:44.000
the first being enable JPA repositories.

16
00:00:44.000 --> 00:00:48.050
The enable JPA repositories annotation enables scanning

17
00:00:48.050 --> 00:00:51.030
for spring data repositories.

18
00:00:51.030 --> 00:00:55.000
A JPA repository is an interface uni find

19
00:00:55.000 --> 00:00:58.000
that extends CRUD repository.

20
00:00:58.000 --> 00:01:02.060
A CRUD repository provides create, read, update,

21
00:01:02.060 --> 00:01:06.010
and delete functions for a defined entity.

22
00:01:06.010 --> 00:01:08.070
An entity is an annotated Java class

23
00:01:08.070 --> 00:01:13.010
which has an object relational mapping to a database table.

24
00:01:13.010 --> 00:01:15.060
The enable transaction management annotation

25
00:01:15.060 --> 00:01:19.040
sets up annotation driven transaction management

26
00:01:19.040 --> 00:01:21.080
such as the transaction interceptor

27
00:01:21.080 --> 00:01:25.060
or aspect J based advice.

28
00:01:25.060 --> 00:01:29.000
Now, let's create the database config class.

29
00:01:29.000 --> 00:01:33.020
Right click on config, new, class.

30
00:01:33.020 --> 00:01:36.010
Let's name it database config.

31
00:01:36.010 --> 00:01:41.040
Let's add the enable JPA repository's annotation

32
00:01:41.040 --> 00:01:44.050
then let's import that annotation.

33
00:01:44.050 --> 00:01:49.070
Let's pass in the location of our repository.

34
00:01:49.070 --> 00:01:54.020
Next let's add the enable transaction management annotation.

35
00:01:54.020 --> 00:01:56.090
Then let's import that annotation.

36
00:01:56.090 --> 00:01:59.010
Okay then let's save.

37
00:01:59.010 --> 00:02:02.040
Next let's create a new class, conversion config,

38
00:02:02.040 --> 00:02:04.030
in our config package.

39
00:02:04.030 --> 00:02:07.050
Conversion config will register converters

40
00:02:07.050 --> 00:02:11.030
that will allow us to convert request or response objects

41
00:02:11.030 --> 00:02:14.040
into entities and vice versa.

42
00:02:14.040 --> 00:02:18.070
Okay now let's create the conversion config class.

43
00:02:18.070 --> 00:02:23.090
Let's right click on config, new, and then new class.

44
00:02:23.090 --> 00:02:25.060
And create.

45
00:02:25.060 --> 00:02:31.000
Let's go to API config, copy the configuration annotation,

46
00:02:31.000 --> 00:02:34.080
and then add it to conversion config, then save.

47
00:02:34.080 --> 00:02:37.080
Let's create a method, get converters,

48
00:02:37.080 --> 00:02:41.070
that will return a set of converter objects.

49
00:02:41.070 --> 00:02:50.030
Let's create a new hash set of converters.

50
00:02:50.030 --> 00:02:53.030
Okay let's import set.

51
00:02:53.030 --> 00:02:56.070
Next, let's import hash set.

52
00:02:56.070 --> 00:03:02.090
Next, let's import org.springframework.core.converter.

53
00:03:02.090 --> 00:03:05.090
Next, let's return that set.

54
00:03:05.090 --> 00:03:13.000
Next, let's add a public method called conversion service.

55
00:03:13.000 --> 00:03:22.090
Let's create a new conversion service factory bean.

56
00:03:22.090 --> 00:03:27.070
Then let's import conversion service factory bean.

57
00:03:27.070 --> 00:03:33.010
Next, let's set the convertors by calling get converters.

58
00:03:33.010 --> 00:03:36.080
Next, let's call after property set on that bean.

59
00:03:36.080 --> 00:03:41.040
Finally, let's return bean.get object.

60
00:03:41.040 --> 00:03:45.090
Finally, let's import the spring conversion service

61
00:03:45.090 --> 00:03:46.080
and save.

62
00:03:46.080 --> 00:03:52.020
Let's open up our application properties in resources.

63
00:03:52.020 --> 00:03:57.080
Let's add the property spring.h2.console.enabled

64
00:03:57.080 --> 00:03:59.010
equals true.

65
00:03:59.010 --> 00:04:04.020
Next let's set the console path to /console.

66
00:04:04.020 --> 00:04:09.080
Let's set the platform to h2, our in memory h2 database.

67
00:04:09.080 --> 00:04:13.060
Finally, let's set our JDBC URL

68
00:04:13.060 --> 00:04:16.090
to our h2 in memory database.

69
00:04:16.090 --> 00:04:18.020
Then let's save.

70
00:04:18.020 --> 00:04:20.030
Next, let's click on the root package

71
00:04:20.030 --> 00:04:27.060
and create a new package called repository.

72
00:04:27.060 --> 00:04:29.030
Within repository, let's create

73
00:04:29.030 --> 00:04:34.030
a new interface room repository.

74
00:04:34.030 --> 00:04:38.070
Room repository will extend a CRUD repository.

75
00:04:38.070 --> 00:04:42.000
This CRUD repository will take in a room entity

76
00:04:42.000 --> 00:04:44.080
and a long variable.

77
00:04:44.080 --> 00:04:47.070
Room entity is an entity we will create

78
00:04:47.070 --> 00:04:52.040
to define a room object in our table.

79
00:04:52.040 --> 00:04:55.040
Next let's crate a method find by ID.

80
00:04:55.040 --> 00:04:59.070
This will return a list of rooms from our database.

81
00:04:59.070 --> 00:05:03.060
Then let's pass in a long ID as a parameter.

82
00:05:03.060 --> 00:05:07.010
Next up let's define that room entity.

83
00:05:07.010 --> 00:05:11.070
First, let's create a new package called entity.

84
00:05:11.070 --> 00:05:15.080
Entity will be a new package in the base package.

85
00:05:15.080 --> 00:05:18.040
Within entity, let's right click on that package

86
00:05:18.040 --> 00:05:20.060
and create a new class.

87
00:05:20.060 --> 00:05:24.020
Let's name it room entity.

88
00:05:24.020 --> 00:05:27.010
Let's add the annotation entity.

89
00:05:27.010 --> 00:05:33.030
We want to import the Javax.persistence annotation.

90
00:05:33.030 --> 00:05:35.090
Next let's add a table annotation,

91
00:05:35.090 --> 00:05:40.020
passing in the name of our table which is room.

92
00:05:40.020 --> 00:05:43.090
Then let's import that table annotation

93
00:05:43.090 --> 00:05:47.010
from Java X persistence.

94
00:05:47.010 --> 00:05:49.000
Now let's add some fields.

95
00:05:49.000 --> 00:05:52.070
First let's create an auto generated ID.

96
00:05:52.070 --> 00:05:55.000
This ID will be auto generated

97
00:05:55.000 --> 00:05:57.020
anytime you insert a new record.

98
00:05:57.020 --> 00:06:01.040
Let's add an ID annotation.

99
00:06:01.040 --> 00:06:03.000
Let's import it.

100
00:06:03.000 --> 00:06:06.050
Then let's add a generated value annotation

101
00:06:06.050 --> 00:06:10.010
where the strategy is auto.

102
00:06:10.010 --> 00:06:14.080
Let's import the Java X generated value annotation.

103
00:06:14.080 --> 00:06:19.020
Then let's also import that generated type annotation.

104
00:06:19.020 --> 00:06:22.060
Okay we've set the generation type to auto.

105
00:06:22.060 --> 00:06:25.090
Next let's add a field called room number

106
00:06:25.090 --> 00:06:27.080
of the type integer.

107
00:06:27.080 --> 00:06:31.050
Let's add a not null annotation to room number.

108
00:06:31.050 --> 00:06:34.080
This will ensure that room number is populated

109
00:06:34.080 --> 00:06:40.030
anytime you add a new room record to this table.

110
00:06:40.030 --> 00:06:43.000
Okay let's import not null.

111
00:06:43.000 --> 00:06:45.090
Then let's add another field called price

112
00:06:45.090 --> 00:06:48.010
of the type string.

113
00:06:48.010 --> 00:06:51.020
Let's also add that not null annotation here.

114
00:06:51.020 --> 00:06:54.050
Let's use the keyboard shortcut command alt s

115
00:06:54.050 --> 00:06:56.030
to bring up the source menu

116
00:06:56.030 --> 00:06:59.030
and let's generate some getters and setters.

117
00:06:59.030 --> 00:07:04.030
Select price and room number then okay.

118
00:07:04.030 --> 00:07:07.000
Now let's add a constructor.

119
00:07:07.000 --> 00:07:12.070
Open up that source menu and click on generate constructor.

120
00:07:12.070 --> 00:07:15.030
Let's pass in room number and price.

121
00:07:15.030 --> 00:07:17.090
Okay and then one more thing.

122
00:07:17.090 --> 00:07:21.020
Let's add a parameter list constructor.

123
00:07:21.020 --> 00:07:24.070
Click on deselect all, and okay.

124
00:07:24.070 --> 00:07:27.040
Now let's go back to room repository

125
00:07:27.040 --> 00:07:31.020
and import that room entity we just created.

126
00:07:31.020 --> 00:07:32.060
Looks like we have a typo.

127
00:07:32.060 --> 00:07:36.030
We left off an s on extends.

128
00:07:36.030 --> 00:07:42.040
Lets import that CRUD repository from spring.

129
00:07:42.040 --> 00:07:50.060
Let's ensure we don't have a typo here.

130
00:07:50.060 --> 00:07:54.000
Okay let's import that room entity that we just created

131
00:07:54.000 --> 00:07:58.050
and finally let's import java.util.list.

132
00:07:58.050 --> 00:08:00.080
Okay let's save all those changes.

133
00:08:00.080 --> 00:08:05.020
Next we're going to create a class called h2 boot strap.

134
00:08:05.020 --> 00:08:09.040
This class will pre-populate some data in the room table

135
00:08:09.040 --> 00:08:11.090
so that we have data to work with.

136
00:08:11.090 --> 00:08:16.040
Let's right click on the base package, go to new, new class.

137
00:08:16.040 --> 00:08:23.030
For the name enter in h2 boot strap.

138
00:08:23.030 --> 00:08:25.090
Let's implement command line runner.

139
00:08:25.090 --> 00:08:28.090
Let's go ahead and import command line runner.

140
00:08:28.090 --> 00:08:31.050
Now since we implemented that interface

141
00:08:31.050 --> 00:08:35.040
we need to implement the method run though.

142
00:08:35.040 --> 00:08:36.090
Let's click on that error

143
00:08:36.090 --> 00:08:40.060
and select add unimplemented method.

144
00:08:40.060 --> 00:08:44.010
Okay Eclipse generated the stub for us.

145
00:08:44.010 --> 00:08:46.060
Now let's add in some code.

146
00:08:46.060 --> 00:08:51.080
First let's auto wire a room repository bean.

147
00:08:51.080 --> 00:08:54.080
Let's go ahead and import that room repository

148
00:08:54.080 --> 00:08:58.000
and then add an auto wired annotation to it.

149
00:08:58.000 --> 00:09:02.070
Then let's import that auto wired annotation.

150
00:09:02.070 --> 00:09:04.060
Now let's create some data.

151
00:09:04.060 --> 00:09:07.070
Using that auto wired room repository,

152
00:09:07.070 --> 00:09:10.040
let's call the save method.

153
00:09:10.040 --> 00:09:12.090
Let's create a room entity

154
00:09:12.090 --> 00:09:16.060
and pass in a room number and a price.

155
00:09:16.060 --> 00:09:20.000
Then let's import that room entity.

156
00:09:20.000 --> 00:09:23.060
Okay let's add a couple more rows of data.

157
00:09:23.060 --> 00:09:26.010
I'm going to copy that save statement

158
00:09:26.010 --> 00:09:28.090
and paste it two more times.

159
00:09:28.090 --> 00:09:32.060
Then I'm going to update that room number

160
00:09:32.060 --> 00:09:35.000
and update the price.

161
00:09:35.000 --> 00:09:39.030
Now we want to verify all that data got saved correctly.

162
00:09:39.030 --> 00:09:41.030
Let's use that room repository

163
00:09:41.030 --> 00:09:45.030
to select all the data currently in that table.

164
00:09:45.030 --> 00:09:49.010
Let's use auto complete to select room repository.

165
00:09:49.010 --> 00:09:53.070
Then let's use the find all method.

166
00:09:53.070 --> 00:09:57.000
If you hold down command and click on find all

167
00:09:57.000 --> 00:10:02.010
you could find out that it returns an iterable object.

168
00:10:02.010 --> 00:10:05.040
So let's right click and copy on that iterable object,

169
00:10:05.040 --> 00:10:08.060
head back to h2 boot strap,

170
00:10:08.060 --> 00:10:12.080
pass in the generic room entity

171
00:10:12.080 --> 00:10:15.020
and then let's name it ITR.

172
00:10:15.020 --> 00:10:18.020
next let's loop through that interval object

173
00:10:18.020 --> 00:10:20.070
and print out all the rooms.

174
00:10:20.070 --> 00:10:27.070
Let's create a for loop of room entities from ITR.

175
00:10:27.070 --> 00:10:30.010
For each iteration, let's call

176
00:10:30.010 --> 00:10:33.060
a system.out.printline statement

177
00:10:33.060 --> 00:10:37.090
and then let's call the get room number method.

178
00:10:37.090 --> 00:10:41.000
So we should print out the room number for each entry

179
00:10:41.000 --> 00:10:42.060
in the table.

180
00:10:42.060 --> 00:10:45.020
Let's save all our changes.

181
00:10:45.020 --> 00:10:50.020
Let's head to a terminal and run the gradle task boot run

182
00:10:50.020 --> 00:10:54.080
using the gradle wrapper.

183
00:10:54.080 --> 00:10:58.030
Let's head back to h2 boot strap.

184
00:10:58.030 --> 00:11:00.070
Let's add a diagnostic print

185
00:11:00.070 --> 00:11:05.060
so that we know when these items are being saved.

186
00:11:05.060 --> 00:11:07.050
Okay we're going to print out

187
00:11:07.050 --> 00:11:09.060
the message boot strapping data

188
00:11:09.060 --> 00:11:12.020
when we begin saving data.

189
00:11:12.020 --> 00:11:13.080
Let's go ahead and save

190
00:11:13.080 --> 00:11:19.000
then let's copy that printline statement

191
00:11:19.000 --> 00:11:21.080
and paste it right above our for loop

192
00:11:21.080 --> 00:11:27.010
and then update the message to printing out data.

193
00:11:27.010 --> 00:11:28.070
Then let's save.

194
00:11:28.070 --> 00:11:32.040
This time let's do a clean and build

195
00:11:32.040 --> 00:11:36.070
to clean out our cache using the gradle wrapper.

196
00:11:36.070 --> 00:11:43.000
Okay now let's run a boot run gradle task.

197
00:11:43.000 --> 00:11:47.000
Let's search for this diagnostic message that we print out.

198
00:11:47.000 --> 00:11:49.040
Using the keyboard shortcut control F

199
00:11:49.040 --> 00:11:55.000
let's paste in that message and search for it.

200
00:11:55.000 --> 00:11:58.050
It looks like our command line runner is not being executed

201
00:11:58.050 --> 00:12:00.030
on start up.

202
00:12:00.030 --> 00:12:03.000
Let's make sure all our changes are saved.

203
00:12:03.000 --> 00:12:07.030
Let's try running our application within Eclipse itself.

204
00:12:07.030 --> 00:12:15.000
Right click on the project route, run as spring boot app.

205
00:12:15.000 --> 00:12:17.080
It looks like we left off a component annotation

206
00:12:17.080 --> 00:12:19.090
on our h2 boot strap.

207
00:12:19.090 --> 00:12:23.060
A component annotation makes a class a candidate

208
00:12:23.060 --> 00:12:27.020
to be added to the spring application context.

209
00:12:27.020 --> 00:12:29.090
The component scan annotation will search

210
00:12:29.090 --> 00:12:34.030
for classes that have that component annotation.

211
00:12:34.030 --> 00:12:38.010
Let's go ahead and add a component annotation

212
00:12:38.010 --> 00:12:45.010
and then import it, save, and then let's try running again.

213
00:12:45.010 --> 00:12:49.010
Okay if we scroll up in the console

214
00:12:49.010 --> 00:12:53.050
we can see our diagnostic print boot strapping data

215
00:12:53.050 --> 00:12:56.090
and then printing out data here.

216
00:12:56.090 --> 00:13:00.030
You could see the for loop looped through each entry,

217
00:13:00.030 --> 00:13:04.050
saved in the database, and printed out the room number.

218
00:13:04.050 --> 00:13:06.020
It looks like we're saving data

219
00:13:06.020 --> 00:13:08.000
and retrieving data correctly now.

