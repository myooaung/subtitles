WEBVTT
1
00:00:00.060 --> 00:00:02.050
- [Instructor] We will be building a application

2
00:00:02.050 --> 00:00:04.080
for the fictional Landon Hotel.

3
00:00:04.080 --> 00:00:07.070
An example resource will allow users

4
00:00:07.070 --> 00:00:09.070
to view available rooms,

5
00:00:09.070 --> 00:00:13.040
create, update, and delete a reservation.

6
00:00:13.040 --> 00:00:15.090
Let's go over resource modeling.

7
00:00:15.090 --> 00:00:19.060
A RESTful system is composed of resources.

8
00:00:19.060 --> 00:00:23.030
A resource is anything that has a URI.

9
00:00:23.030 --> 00:00:26.020
Examples of resources in the room domain

10
00:00:26.020 --> 00:00:30.080
are reservation, amenity, and service requests.

11
00:00:30.080 --> 00:00:36.050
You can create, update, retrieve or delete a resource.

12
00:00:36.050 --> 00:00:40.010
These actions are mapped to the HTTP verbs

13
00:00:40.010 --> 00:00:43.030
POST, PUT, GET, and DELETE.

14
00:00:43.030 --> 00:00:46.030
Resources are grouped into domains.

15
00:00:46.030 --> 00:00:50.030
A domain is a cohesive set of resources.

16
00:00:50.030 --> 00:00:53.030
An example of a domain is a room.

17
00:00:53.030 --> 00:00:57.020
In the room domain, you will have resources such as

18
00:00:57.020 --> 00:01:02.030
Room Reservation, Amenities, and Service Request.

19
00:01:02.030 --> 00:01:05.040
We will want to identify the proper domain and resource

20
00:01:05.040 --> 00:01:09.090
to be used in a URI for our endpoints.

21
00:01:09.090 --> 00:01:12.090
An API endpoint will be in the format

22
00:01:12.090 --> 00:01:17.040
slash, domain, slash, resource, slash, version.

23
00:01:17.040 --> 00:01:20.000
For example, at the Landon Hotel

24
00:01:20.000 --> 00:01:22.050
we will have a domain called room.

25
00:01:22.050 --> 00:01:24.060
You can check for available rooms

26
00:01:24.060 --> 00:01:28.000
and create a reservation for a room.

27
00:01:28.000 --> 00:01:30.060
Getting a list of available rooms

28
00:01:30.060 --> 00:01:32.070
would return a collection.

29
00:01:32.070 --> 00:01:35.020
Getting a single resource by ID

30
00:01:35.020 --> 00:01:37.090
would retun a singleton.

31
00:01:37.090 --> 00:01:39.060
Versioning allows you to handle

32
00:01:39.060 --> 00:01:42.000
different versions of a resource.

33
00:01:42.000 --> 00:01:45.090
When booking a reservation, the complete URI

34
00:01:45.090 --> 00:01:52.000
would be POST, slash, room, slash, reservations, slash, v1.

35
00:01:52.000 --> 00:01:54.020
You will also need to include

36
00:01:54.020 --> 00:01:57.020
the required headers and request body.

37
00:01:57.020 --> 00:02:00.010
The POST will be in JSON format.

38
00:02:00.010 --> 00:02:02.020
You will need to include the ID

39
00:02:02.020 --> 00:02:04.030
of the resource being reserved,

40
00:02:04.030 --> 00:02:05.090
in this case, the room.

41
00:02:05.090 --> 00:02:08.000
You will also need to include

42
00:02:08.000 --> 00:02:11.000
the check-in date and the check-out date.

