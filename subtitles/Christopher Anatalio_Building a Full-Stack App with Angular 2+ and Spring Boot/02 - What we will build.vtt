WEBVTT
1
00:00:00.000 --> 00:00:03.040
- [Instructor] In this course, we will be building a mobile,

2
00:00:03.040 --> 00:00:07.060
responsive website for the fictional Landon Hotel.

3
00:00:07.060 --> 00:00:10.090
We will design and build a rest API

4
00:00:10.090 --> 00:00:13.050
using Java and Spring Boot.

5
00:00:13.050 --> 00:00:16.050
Then, we will build a responsive front-end

6
00:00:16.050 --> 00:00:20.080
using Angularjs 2.0 and Twitter Bootstrap.

7
00:00:20.080 --> 00:00:23.060
Finally, we will test each end point

8
00:00:23.060 --> 00:00:26.050
using a tool called Postman.

9
00:00:26.050 --> 00:00:29.070
The website will be mobile, responsive, and

10
00:00:29.070 --> 00:00:36.020
be able to scale to a tablet or mobile device view port.

11
00:00:36.020 --> 00:00:39.090
A user will be able to check for available rooms

12
00:00:39.090 --> 00:00:43.030
based on a check-in and check-out date.

13
00:00:43.030 --> 00:00:44.090
The results of your search

14
00:00:44.090 --> 00:00:49.070
will be populated by our back-end rest API.

15
00:00:49.070 --> 00:00:53.040
You will also be able to reserve a room.

16
00:00:53.040 --> 00:00:56.040
As you can see here, after clicking reserve,

17
00:00:56.040 --> 00:01:01.060
we executed a post request to the back-end rest API

18
00:01:01.060 --> 00:01:05.060
and got back a 201, in response.

19
00:01:05.060 --> 00:01:08.090
We will also use Postman to check each end point

20
00:01:08.090 --> 00:01:11.000
on our rest API.

21
00:01:11.000 --> 00:01:15.050
Here, we are executing a get command to get available rooms

22
00:01:15.050 --> 00:01:18.000
based on a check-in and check-out date.

23
00:01:18.000 --> 00:01:20.050
After executing that get command,

24
00:01:20.050 --> 00:01:23.080
we get back a response of 200 OK.

25
00:01:23.080 --> 00:01:27.040
Looking at the request body in the content field

26
00:01:27.040 --> 00:01:31.070
we have an array of available rooms.

27
00:01:31.070 --> 00:01:35.020
Each room has a self-referential link

28
00:01:35.020 --> 00:01:39.090
that allows you to look up more information on that entry.

29
00:01:39.090 --> 00:01:42.090
The results will also be paginated,

30
00:01:42.090 --> 00:01:47.000
so that you are able to page through results.

31
00:01:47.000 --> 00:01:50.040
You will be able to create a new room reservation

32
00:01:50.040 --> 00:01:54.070
by executing a post command passing in

33
00:01:54.070 --> 00:01:56.040
a JSON raw body

34
00:01:56.040 --> 00:01:59.010
including the room you want to reserve,

35
00:01:59.010 --> 00:02:02.020
the check-in date, and the check-out date.

36
00:02:02.020 --> 00:02:04.090
Let's try to execute that post command.

37
00:02:04.090 --> 00:02:08.060
After executing that command, we get a 201 created,

38
00:02:08.060 --> 00:02:12.050
and information about the reservation we just created.

39
00:02:12.050 --> 00:02:16.020
You can also update a existing room reservation

40
00:02:16.020 --> 00:02:18.050
using a put command.

41
00:02:18.050 --> 00:02:22.050
Finally, you should be able to delete a room reservation

42
00:02:22.050 --> 00:02:25.000
passing in a reservation ID.

