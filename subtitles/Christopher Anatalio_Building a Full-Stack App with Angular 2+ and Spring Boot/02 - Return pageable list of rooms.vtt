WEBVTT
1
00:00:00.070 --> 00:00:03.030
- [Instructor] Okay, now let's hook our GET endpoint

2
00:00:03.030 --> 00:00:07.030
for listing available rooms into our data layer.

3
00:00:07.030 --> 00:00:09.030
We are going to change our GET endpoint

4
00:00:09.030 --> 00:00:11.090
to return a Pageable list of rooms

5
00:00:11.090 --> 00:00:14.080
populated from our database.

6
00:00:14.080 --> 00:00:17.080
If you have a lot of data, you don't want to return

7
00:00:17.080 --> 00:00:20.040
all that data at once to a user.

8
00:00:20.040 --> 00:00:23.000
It's a lot of load on your database,

9
00:00:23.000 --> 00:00:26.060
and it can be difficult to manage on the front end.

10
00:00:26.060 --> 00:00:30.090
Paging allows an API consumer, such as your front end,

11
00:00:30.090 --> 00:00:35.000
to iterate through data in a more manageable fashion.

12
00:00:35.000 --> 00:00:38.010
First off, let's create a room entity

13
00:00:38.010 --> 00:00:41.010
to reservation response converter.

14
00:00:41.010 --> 00:00:44.020
The data model which represents a database table

15
00:00:44.020 --> 00:00:47.080
will very often be different than the model

16
00:00:47.080 --> 00:00:52.050
which represents the data which you will return in your API.

17
00:00:52.050 --> 00:00:54.050
A converter gives you a nice clean way

18
00:00:54.050 --> 00:00:57.010
to perform that conversion.

19
00:00:57.010 --> 00:01:00.070
First, let's create a new package called converter.

20
00:01:00.070 --> 00:01:04.020
Right-click on the base package, go to New,

21
00:01:04.020 --> 00:01:08.030
and create a new package called Converter.

22
00:01:08.030 --> 00:01:11.090
Okay, let's create a new class in that converter package

23
00:01:11.090 --> 00:01:17.040
called room entity to reservation response converter.

24
00:01:17.040 --> 00:01:20.030
Click on the converter package, go to new,

25
00:01:20.030 --> 00:01:27.060
and let's create a new class.

26
00:01:27.060 --> 00:01:30.000
A spring conversion class should

27
00:01:30.000 --> 00:01:32.070
implement the converter interface,

28
00:01:32.070 --> 00:01:38.070
passing in the source type and the intended output type.

29
00:01:38.070 --> 00:01:43.030
Let's import the spring framework converter,

30
00:01:43.030 --> 00:01:46.040
the room entity,

31
00:01:46.040 --> 00:01:50.070
and then let's also import the reservation response.

32
00:01:50.070 --> 00:01:52.090
Let's right-click on the background,

33
00:01:52.090 --> 00:01:59.010
go to source, and then go to override or implement methods.

34
00:01:59.010 --> 00:02:01.070
Since we implemented the converter interface,

35
00:02:01.070 --> 00:02:06.020
it was expecting us to implement the convert method.

36
00:02:06.020 --> 00:02:09.080
So let's click on that and click okay.

37
00:02:09.080 --> 00:02:12.070
Eclipse will stub out that method for you,

38
00:02:12.070 --> 00:02:15.020
and then you'll go ahead and implement it.

39
00:02:15.020 --> 00:02:21.060
Let's go ahead and create a new reservation response object.

40
00:02:21.060 --> 00:02:24.040
First, let's set the room number

41
00:02:24.040 --> 00:02:27.000
on the reservation response.

42
00:02:27.000 --> 00:02:28.040
Let's grab that room number

43
00:02:28.040 --> 00:02:32.080
from the passed in room entity called source.

44
00:02:32.080 --> 00:02:34.050
Next, let's set the price.

45
00:02:34.050 --> 00:02:36.090
You could use the keyboard shortcut,

46
00:02:36.090 --> 00:02:39.080
Ctrl + Space, to auto complete.

47
00:02:39.080 --> 00:02:42.060
Okay, let's get the price from source

48
00:02:42.060 --> 00:02:46.010
and set it in the reservation response.

49
00:02:46.010 --> 00:02:49.050
If you mouse over, it looks like we're getting an error.

50
00:02:49.050 --> 00:02:52.010
Reservation response is expecting an integer,

51
00:02:52.010 --> 00:02:56.040
while source has it stored as a string.

52
00:02:56.040 --> 00:02:58.080
So we could perform that conversion

53
00:02:58.080 --> 00:03:03.010
using the value of method in integer.

54
00:03:03.010 --> 00:03:08.010
So if we wrap source.getprice in a integer.valueof

55
00:03:08.010 --> 00:03:11.050
method call, we can perform that conversion.

56
00:03:11.050 --> 00:03:16.040
In our reservation response, we have a section called links.

57
00:03:16.040 --> 00:03:20.050
Within links we will add a self-referring link

58
00:03:20.050 --> 00:03:24.060
to be able to get that resource directly by ID.

59
00:03:24.060 --> 00:03:28.030
Let's create a new instance of links.

60
00:03:28.030 --> 00:03:29.070
Then let's import.

61
00:03:29.070 --> 00:03:33.070
Next, let's create a new instance of self.

62
00:03:33.070 --> 00:03:36.080
Okay, and let's import that model.

63
00:03:36.080 --> 00:03:41.070
Next, let's set the ref, or the self-referring link,

64
00:03:41.070 --> 00:03:45.070
to the room reservation V1 URL

65
00:03:45.070 --> 00:03:50.000
with a link to that resource's ID.

66
00:03:50.000 --> 00:03:54.090
Let's grab that URL from the resource constants.

67
00:03:54.090 --> 00:03:59.000
Then let's append a forward slash,

68
00:03:59.000 --> 00:04:02.050
and then let's get the ID from the source.

69
00:04:02.050 --> 00:04:06.040
It looks like we may be missing a getter for ID.

70
00:04:06.040 --> 00:04:10.030
So let's jump into the room entity object.

71
00:04:10.030 --> 00:04:15.010
Let's press Ctrl + Alt + S and go to generate getter.

72
00:04:15.010 --> 00:04:17.090
Click on ID and click okay.

73
00:04:17.090 --> 00:04:21.050
Let's use Ctrl + Shift + F to auto format

74
00:04:21.050 --> 00:04:23.070
and clean up, then save.

75
00:04:23.070 --> 00:04:26.010
Let's head back to our converter.

76
00:04:26.010 --> 00:04:30.030
Then let's grab the ID from source.

77
00:04:30.030 --> 00:04:32.020
We left off the keyword new,

78
00:04:32.020 --> 00:04:35.090
so let's go ahead and add that and save.

79
00:04:35.090 --> 00:04:39.010
Let's add the ID to the link,

80
00:04:39.010 --> 00:04:44.000
then let's set that link in reservation response.

81
00:04:44.000 --> 00:04:45.060
Then, let's save.

82
00:04:45.060 --> 00:04:48.030
Using this conversion service, we keep a lot

83
00:04:48.030 --> 00:04:51.030
of this logic out of the controller.

84
00:04:51.030 --> 00:05:00.060
Next up, let's add this converter to our conversion config.

85
00:05:00.060 --> 00:05:04.050
Okay, we added a new instance of room entity

86
00:05:04.050 --> 00:05:10.030
to reservation response converter to our set of converters.

87
00:05:10.030 --> 00:05:14.070
Any class that auto wires the conversion service bean

88
00:05:14.070 --> 00:05:18.000
will be able to use that converter.

89
00:05:18.000 --> 00:05:20.010
When you call the convert method,

90
00:05:20.010 --> 00:05:24.080
you pass in the object in a expected output type.

91
00:05:24.080 --> 00:05:27.020
The conversion service will infer

92
00:05:27.020 --> 00:05:31.040
what converter to use based on those types.

93
00:05:31.040 --> 00:05:37.050
Let's also be sure to add a bean to this method.

94
00:05:37.050 --> 00:05:39.070
This bean annotation will make the

95
00:05:39.070 --> 00:05:44.030
conversion service available for auto wiring.

96
00:05:44.030 --> 00:05:48.080
Next, let's create a Pageable room repository.

97
00:05:48.080 --> 00:05:51.040
Right-click on your repository package,

98
00:05:51.040 --> 00:05:54.010
go to new, and create a new class.

99
00:05:54.010 --> 00:05:58.060
We are going to extend a paging and sorting repository.

100
00:05:58.060 --> 00:06:01.080
A paging and sorting repository is similar

101
00:06:01.080 --> 00:06:07.020
to a CrudRepository except it lets you page the results.

102
00:06:07.020 --> 00:06:11.050
Let's pass in a room entity type and long.

103
00:06:11.050 --> 00:06:13.060
Long is a type of the ID.

104
00:06:13.060 --> 00:06:16.090
It looks like we declared this as a class

105
00:06:16.090 --> 00:06:19.020
when it should be an interface.

106
00:06:19.020 --> 00:06:21.080
Let's create a method, find by ID,

107
00:06:21.080 --> 00:06:27.090
that takes in a long ID and a Pageable page as parameters.

108
00:06:27.090 --> 00:06:33.000
It will return a page object containing room entities.

109
00:06:33.000 --> 00:06:35.080
Let's import Pageable from Spring.

110
00:06:35.080 --> 00:06:40.030
Let's use the keyboard shortcut, Cmd + Shift + O

111
00:06:40.030 --> 00:06:43.090
and organize our imports.

112
00:06:43.090 --> 00:06:47.010
Let's add the extends keyword so that we extend

113
00:06:47.010 --> 00:06:50.080
the paging and sorting repository correctly.

114
00:06:50.080 --> 00:06:53.000
Using Cmd + Shift + O, let's optimize

115
00:06:53.000 --> 00:06:56.050
our imports again, then save.

116
00:06:56.050 --> 00:06:59.040
This is because we are returning a list

117
00:06:59.040 --> 00:07:04.040
of room entities from Pageable room repository.

118
00:07:04.040 --> 00:07:07.000
Now, let's update our endpoint.

119
00:07:07.000 --> 00:07:09.080
Let's go into reservation resource.

120
00:07:09.080 --> 00:07:17.050
First, let's auto wire the Pageable room repository.

121
00:07:17.050 --> 00:07:22.000
Let's add a auto wired annotation.

122
00:07:22.000 --> 00:07:26.000
Now we have access to the Pageable room repository bean.

123
00:07:26.000 --> 00:07:30.050
Okay, so let's use that repository.

124
00:07:30.050 --> 00:07:32.090
Let's call the find all method

125
00:07:32.090 --> 00:07:35.050
and pass in a Pageable object.

126
00:07:35.050 --> 00:07:38.060
We don't currently have a Pageable object in scope,

127
00:07:38.060 --> 00:07:42.060
so let's add it as a parameter.

128
00:07:42.060 --> 00:07:45.090
Let's import that Pageable class.

129
00:07:45.090 --> 00:07:52.050
Then, let's capture the return value of find all.

130
00:07:52.050 --> 00:07:55.090
Let's import room entity, and let's also

131
00:07:55.090 --> 00:08:01.050
import a page from Spring framework.

132
00:08:01.050 --> 00:08:05.030
Let's update the return value to page

133
00:08:05.030 --> 00:08:10.060
so that we return a paged list of reservation responses.

134
00:08:10.060 --> 00:08:14.070
Next, let's get the list of results from a repository,

135
00:08:14.070 --> 00:08:20.080
call the map method, and pass in the converter we created.

136
00:08:20.080 --> 00:08:25.000
Let's auto complete using Ctrl + space.

137
00:08:25.000 --> 00:08:29.000
This map function will take a list of room entities

138
00:08:29.000 --> 00:08:34.040
and convert it to a list of reservation responses.

139
00:08:34.040 --> 00:08:37.020
Let's go ahead and save.

140
00:08:37.020 --> 00:08:40.050
Then let's start up our application,

141
00:08:40.050 --> 00:08:42.050
clicking on the project root

142
00:08:42.050 --> 00:08:45.030
and going to run as Spring Boot.

143
00:08:45.030 --> 00:08:47.030
Be sure to save.

144
00:08:47.030 --> 00:08:53.000
Okay, so we started out, we boot strapped our data.

145
00:08:53.000 --> 00:08:56.090
Let's head to postman and call or get endpoint.

146
00:08:56.090 --> 00:08:59.080
So we are returning your paging envelope,

147
00:08:59.080 --> 00:09:02.070
but we are getting no results.

148
00:09:02.070 --> 00:09:05.010
It looks like in our convert method,

149
00:09:05.010 --> 00:09:07.030
we are returning a null value.

150
00:09:07.030 --> 00:09:15.000
So let's go ahead and create the reservation response.

151
00:09:15.000 --> 00:09:22.020
Okay, let's restart and let's try out that GET endpoint.

152
00:09:22.020 --> 00:09:23.080
Okay, great.

153
00:09:23.080 --> 00:09:28.060
So, we are returning the three rooms which we bootstrapped,

154
00:09:28.060 --> 00:09:31.090
along with a paging envelope.

155
00:09:31.090 --> 00:09:34.020
The way you would use that paging envelope

156
00:09:34.020 --> 00:09:37.020
is by adding additional parameters.

157
00:09:37.020 --> 00:09:39.050
You could add a page parameter

158
00:09:39.050 --> 00:09:42.000
and then also a size parameter for the number

159
00:09:42.000 --> 00:09:44.040
of results you want on each page.

160
00:09:44.040 --> 00:09:47.080
This would give you page two of 10 results.

161
00:09:47.080 --> 00:09:51.010
Let's check why our self-referencing

162
00:09:51.010 --> 00:09:53.080
link is not currently set up.

163
00:09:53.080 --> 00:10:00.080
Okay, let's go back to our converter and fix our link setup.

164
00:10:00.080 --> 00:10:07.030
Okay, let's save and restart.

165
00:10:07.030 --> 00:10:10.000
Let's try out that GET endpoint again.

166
00:10:10.000 --> 00:10:12.020
It looks like we're getting back the results

167
00:10:12.020 --> 00:10:15.090
with the self-referencing link populated.

168
00:10:15.090 --> 00:10:22.020
However, if we try that link, we get an error.

169
00:10:22.020 --> 00:10:25.040
So let's head back to our resource

170
00:10:25.040 --> 00:10:30.090
and let's add a GET endpoint to get a room by room ID.

171
00:10:30.090 --> 00:10:37.080
Let' create a method called get room by ID.

172
00:10:37.080 --> 00:10:45.000
It will return a response entity containing a room entity,

173
00:10:45.000 --> 00:10:48.030
Ctrl + Shift + O, to import.

174
00:10:48.030 --> 00:10:53.010
We will take in a long room ID,

175
00:10:53.010 --> 00:11:00.010
and then let's annotate that as a path variable.

176
00:11:00.010 --> 00:11:03.080
Okay, let's add a request mapping annotation.

177
00:11:03.080 --> 00:11:07.010
Let's set the path to flash room ID.

178
00:11:07.010 --> 00:11:09.060
We are going to use ID Spring expression language

179
00:11:09.060 --> 00:11:13.010
to pull that ID off the URI.

180
00:11:13.010 --> 00:11:19.080
Let's set the method to get, and the return value

181
00:11:19.080 --> 00:11:24.020
will be of the type JSON UT58.

182
00:11:24.020 --> 00:11:26.070
Let's auto wire our room repository

183
00:11:26.070 --> 00:11:31.070
since we are jut getting a single result.

184
00:11:31.070 --> 00:11:36.010
Let's be sure to add a auto wired annotation.

185
00:11:36.010 --> 00:11:43.050
Then, let's use that room repository to find a room by ID.

186
00:11:43.050 --> 00:11:51.050
Then let's save and restart.

187
00:11:51.050 --> 00:11:55.010
Trying out our GET endpoint again.

188
00:11:55.010 --> 00:12:02.020
Let's check one of these self-referencing URLs.

189
00:12:02.020 --> 00:12:04.000
It looks like we are not returning the value

190
00:12:04.000 --> 00:12:10.040
correctly from the repository.

191
00:12:10.040 --> 00:12:14.060
Let's create a new response entity passing in

192
00:12:14.060 --> 00:12:20.090
that room entity and also the status code okay.

193
00:12:20.090 --> 00:12:27.040
Okay, let's save and restart.

194
00:12:27.040 --> 00:12:30.040
Okay, jumping back to postman.

195
00:12:30.040 --> 00:12:34.070
Let's call our endpoint, click on the link,

196
00:12:34.070 --> 00:12:38.000
and now we can get a room entity by ID as well.

