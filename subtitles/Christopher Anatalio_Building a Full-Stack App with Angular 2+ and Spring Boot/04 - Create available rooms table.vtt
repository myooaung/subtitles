WEBVTT
1
00:00:00.040 --> 00:00:03.020
- Next, let's create a dynamic table

2
00:00:03.020 --> 00:00:08.020
to display search results from our available room search.

3
00:00:08.020 --> 00:00:11.080
We are going to use prebuilt Twitter Bootstrap classes

4
00:00:11.080 --> 00:00:15.010
to create a mobile, responsive, dynamic table

5
00:00:15.010 --> 00:00:18.060
that displays the room number, price,

6
00:00:18.060 --> 00:00:22.030
a placeholder picture, and also a button

7
00:00:22.030 --> 00:00:25.040
to create a reservation for that room.

8
00:00:25.040 --> 00:00:30.000
We will use a ngFor directive to iterate through a list

9
00:00:30.000 --> 00:00:34.020
of room objects populated from a JSON array.

10
00:00:34.020 --> 00:00:37.090
Let's open up app.component.html.

11
00:00:37.090 --> 00:00:46.050
First, let's create a row in a 12-column div.

12
00:00:46.050 --> 00:00:54.050
Next, let's create a responsive table.

13
00:00:54.050 --> 00:00:57.050
Then, let's add a tbody element.

14
00:00:57.050 --> 00:01:01.000
Within that tbody, let's add a table row.

15
00:01:01.000 --> 00:01:06.070
Within that table row, let's add three table columns.

16
00:01:06.070 --> 00:01:09.070
In the first row, let's add a placeholder picture

17
00:01:09.070 --> 00:01:10.090
of the room.

18
00:01:10.090 --> 00:01:15.050
Let's copy and paste a sample picture into that column.

19
00:01:15.050 --> 00:01:19.010
This image will serve as a placeholder.

20
00:01:19.010 --> 00:01:21.030
In the next column, we will display

21
00:01:21.030 --> 00:01:25.030
the room number and the price.

22
00:01:25.030 --> 00:01:30.050
In the final column, let's add a button of the type submit.

23
00:01:30.050 --> 00:01:34.080
Then, let's add the class btn and btn-primary.

24
00:01:34.080 --> 00:01:37.090
Let's update the button label to Reserve.

25
00:01:37.090 --> 00:01:41.000
Okay, let's save and take a look at what we've got so far.

26
00:01:41.000 --> 00:01:45.000
Looks like we need to add a header to that section.

27
00:01:45.000 --> 00:01:48.050
Let's copy and paste the Book a Room header

28
00:01:48.050 --> 00:01:51.030
and add it to the top of our table.

29
00:01:51.030 --> 00:01:54.070
Let's rename it Available Rooms.

30
00:01:54.070 --> 00:01:59.030
Also, let's add a line break between Room # and Price.

31
00:01:59.030 --> 00:02:03.060
Next, let's jump into app.component.ts.

32
00:02:03.060 --> 00:02:07.070
Let's create an interface called Room that has four fields:

33
00:02:07.070 --> 00:02:10.070
id, roomNumber, price, and links.

34
00:02:10.070 --> 00:02:13.090
Let's copy the Roomsearch interface,

35
00:02:13.090 --> 00:02:18.000
paste it right below, and rename it to Room.

36
00:02:18.000 --> 00:02:20.050
Let's rename checkin to id.

37
00:02:20.050 --> 00:02:24.000
Let's rename checkout to roomNumber.

38
00:02:24.000 --> 00:02:26.090
Let's add a string called price

39
00:02:26.090 --> 00:02:29.050
and another string called links.

40
00:02:29.050 --> 00:02:34.010
Now, let's define a array of rooms called rooms.

41
00:02:34.010 --> 00:02:37.000
Next, let's create a hardcoded JSON

42
00:02:37.000 --> 00:02:42.060
containing a array of rooms.

43
00:02:42.060 --> 00:02:46.040
This JSON string is similar to what we would get back

44
00:02:46.040 --> 00:02:49.060
from a call to the backend REST API.

45
00:02:49.060 --> 00:02:52.070
Let's add a id element.

46
00:02:52.070 --> 00:02:56.080
Let's add a random string of numbers to represent the id.

47
00:02:56.080 --> 00:03:01.020
Then, let's add a room number.

48
00:03:01.020 --> 00:03:03.080
Next, let's add a price.

49
00:03:03.080 --> 00:03:07.040
And then, let's add a empty string for the links.

50
00:03:07.040 --> 00:03:11.030
Now, let's copy that JSON element

51
00:03:11.030 --> 00:03:14.040
and make two more copies.

52
00:03:14.040 --> 00:03:16.050
On the second element, let's update

53
00:03:16.050 --> 00:03:19.050
the id to a random string.

54
00:03:19.050 --> 00:03:23.050
Let's increment the room number and change the price.

55
00:03:23.050 --> 00:03:27.060
Then, same thing on the third element.

56
00:03:27.060 --> 00:03:32.010
We are using this array to simulate a response from our API.

57
00:03:32.010 --> 00:03:35.090
Okay, next, in the ngOnInit method,

58
00:03:35.090 --> 00:03:41.070
let's set the rooms array to this hardcoded JSON response

59
00:03:41.070 --> 00:03:43.050
we created below.

60
00:03:43.050 --> 00:03:48.020
Next, let's head back into app.component.html.

61
00:03:48.020 --> 00:03:53.020
In the table row element, let's add a ngFor directive.

62
00:03:53.020 --> 00:03:57.020
This ngFor directive comes from Component.

63
00:03:57.020 --> 00:04:00.060
Component is a module in angular/core.

64
00:04:00.060 --> 00:04:04.050
Let's set our ngFor directive to iterate

65
00:04:04.050 --> 00:04:07.040
through the array of rooms.

66
00:04:07.040 --> 00:04:12.040
room will keep track of the current room being iterated on.

67
00:04:12.040 --> 00:04:15.010
For each iteration, let's display

68
00:04:15.010 --> 00:04:19.030
the room number and the room price.

69
00:04:19.030 --> 00:04:22.030
Let's add a literal string $

70
00:04:22.030 --> 00:04:25.060
to indicate the price in US dollars.

71
00:04:25.060 --> 00:04:28.080
Okay, it looks like we may have a typo.

72
00:04:28.080 --> 00:04:31.070
Let's look at app.component.ts.

73
00:04:31.070 --> 00:04:35.010
It looks like we are trying to create an array

74
00:04:35.010 --> 00:04:37.000
of the object Rooms.

75
00:04:37.000 --> 00:04:42.020
However, we defined interface as Room, singular.

76
00:04:42.020 --> 00:04:44.070
Let's go ahead and fix that.

77
00:04:44.070 --> 00:04:47.010
Let's save our changes,

78
00:04:47.010 --> 00:04:50.010
and it looks like webpack compiled our changes now.

79
00:04:50.010 --> 00:04:53.090
So now, it looks like we are populating the data correctly.

80
00:04:53.090 --> 00:04:58.010
Next, let's add a on-click action to the Reserve button

81
00:04:58.010 --> 00:05:02.060
to reserve that room by id.

82
00:05:02.060 --> 00:05:04.080
Let's define the click event

83
00:05:04.080 --> 00:05:08.040
to trigger the method reserveRoom.

84
00:05:08.040 --> 00:05:13.020
reserveRoom will pass in the room id.

85
00:05:13.020 --> 00:05:17.050
This id is populated dynamically for each iteration.

86
00:05:17.050 --> 00:05:22.050
In the app component, let's create that reserveRoom method.

87
00:05:22.050 --> 00:05:26.010
reserveRoom will accept a string parameter.

88
00:05:26.010 --> 00:05:33.080
For now, let's go ahead and console.log the id passed in.

89
00:05:33.080 --> 00:05:38.010
Later, we will create an API call to reserve that room.

90
00:05:38.010 --> 00:05:41.020
Let's open up the Inspect window by right clicking

91
00:05:41.020 --> 00:05:44.080
on the background and clicking Inspect.

92
00:05:44.080 --> 00:05:50.050
Click on the Console tab and then click a Reserve button.

93
00:05:50.050 --> 00:05:54.020
It looks like I need to save my changes

94
00:05:54.020 --> 00:05:56.040
to see them reflected.

95
00:05:56.040 --> 00:05:59.090
You may notice errors sometimes in Eclipse

96
00:05:59.090 --> 00:06:02.020
when in a TypeScript file.

97
00:06:02.020 --> 00:06:06.010
It looks like the tooling is not fully up to date

98
00:06:06.010 --> 00:06:10.050
or caught up with all TypeScript ES6 features.

99
00:06:10.050 --> 00:06:14.000
Let's double check that webpack compiled our changes,

100
00:06:14.000 --> 00:06:16.060
and then go back to our homepage.

101
00:06:16.060 --> 00:06:19.000
Now, let's click on Reserve.

102
00:06:19.000 --> 00:06:22.010
It looks like we might have a typo in the function name.

103
00:06:22.010 --> 00:06:25.020
Let's make sure the function defined in the click event

104
00:06:25.020 --> 00:06:29.040
in the button matches up with the function defined

105
00:06:29.040 --> 00:06:31.020
in the app component.

106
00:06:31.020 --> 00:06:35.010
Then, let's try out the button again.

107
00:06:35.010 --> 00:06:39.020
It looks like we are logging the id for each room

108
00:06:39.020 --> 00:06:43.050
from app.component.ts as intended.

109
00:06:43.050 --> 00:06:47.010
Later, we will create a AngularJS 2 service

110
00:06:47.010 --> 00:06:51.010
so that our table can be populated from a JSON response

111
00:06:51.010 --> 00:06:54.000
returned from a backend REST API.

