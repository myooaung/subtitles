WEBVTT
1
00:00:00.005 --> 00:00:01.003
- [Instructor] The whole concept

2
00:00:01.003 --> 00:00:03.006
of managing Kubernetes operations

3
00:00:03.006 --> 00:00:05.009
is based on a well-documented pattern

4
00:00:05.009 --> 00:00:08.001
within the Kubernetes documentation

5
00:00:08.001 --> 00:00:10.004
called the operator pattern.

6
00:00:10.004 --> 00:00:13.001
So what is a Kubernetes operator at its core?

7
00:00:13.001 --> 00:00:16.007
Well, Kubernetes documentations gives us some key points.

8
00:00:16.007 --> 00:00:19.001
First and foremost, it is a software extension

9
00:00:19.001 --> 00:00:21.000
of Kubernetes itself.

10
00:00:21.000 --> 00:00:23.002
This means you are actually extending

11
00:00:23.002 --> 00:00:25.007
the rich Kubernetes API,

12
00:00:25.007 --> 00:00:27.005
which is a powerful proposition

13
00:00:27.005 --> 00:00:29.009
since you already know how to interact

14
00:00:29.009 --> 00:00:33.004
with the Kubernetes API through things like kubectl.

15
00:00:33.004 --> 00:00:36.003
Most of this interaction with the human

16
00:00:36.003 --> 00:00:41.001
is through custom resource definitions or CRDs.

17
00:00:41.001 --> 00:00:42.007
You can use these extensions

18
00:00:42.007 --> 00:00:45.005
to manage applications or components

19
00:00:45.005 --> 00:00:49.007
of the applications or the platform itself.

20
00:00:49.007 --> 00:00:51.008
And all of this is accomplished based

21
00:00:51.008 --> 00:00:54.004
on the common principles of Kubernetes.

22
00:00:54.004 --> 00:00:58.008
More specifically, what is called the control loop.

23
00:00:58.008 --> 00:01:01.004
So the Kubernetes documentation has a lot

24
00:01:01.004 --> 00:01:03.004
of potential use cases

25
00:01:03.004 --> 00:01:05.003
for the operator pattern.

26
00:01:05.003 --> 00:01:06.006
And I want to share some thoughts

27
00:01:06.006 --> 00:01:11.009
on some of the ones that I have seen or used operators for.

28
00:01:11.009 --> 00:01:14.005
Probably the single most used use case,

29
00:01:14.005 --> 00:01:19.000
at least in my experience of operators is deployments.

30
00:01:19.000 --> 00:01:21.006
Many times, tools like Helm work great

31
00:01:21.006 --> 00:01:23.008
but eventually, you get tired

32
00:01:23.008 --> 00:01:26.005
of typing helm install multiple times.

33
00:01:26.005 --> 00:01:29.007
And you keep doing it over and over for every single cluster

34
00:01:29.007 --> 00:01:31.004
throughout your deployment.

35
00:01:31.004 --> 00:01:34.009
Operators can assist in more than one way.

36
00:01:34.009 --> 00:01:38.003
You can wrap all of your charts behind an operator,

37
00:01:38.003 --> 00:01:40.008
and use it to manage the entire state

38
00:01:40.008 --> 00:01:42.003
of your deployments.

39
00:01:42.003 --> 00:01:45.005
You can also build environments much quicker,

40
00:01:45.005 --> 00:01:48.005
especially when building out sandboxes

41
00:01:48.005 --> 00:01:51.001
through the use of an operator that wraps Helm,

42
00:01:51.001 --> 00:01:53.009
because oftentimes, your common components exist

43
00:01:53.009 --> 00:01:55.006
in all of your clusters,

44
00:01:55.006 --> 00:01:59.003
things like log aggregation and metrics, for example.

45
00:01:59.003 --> 00:02:01.008
The one that I get most excited about to be honest,

46
00:02:01.008 --> 00:02:04.004
and what we will use in this course

47
00:02:04.004 --> 00:02:08.008
is the ability to bring services to your applications.

48
00:02:08.008 --> 00:02:11.000
Say you need a database provisioning

49
00:02:11.000 --> 00:02:14.004
or disk or caching or something,

50
00:02:14.004 --> 00:02:16.009
anything that you can think of

51
00:02:16.009 --> 00:02:20.006
but you can do it by utilizing the operator pattern

52
00:02:20.006 --> 00:02:24.006
so that you can specify a CR in your deployment

53
00:02:24.006 --> 00:02:27.003
that your operator will use to configure a hook

54
00:02:27.003 --> 00:02:28.008
to the service.

55
00:02:28.008 --> 00:02:31.003
This is a very powerful proposition

56
00:02:31.003 --> 00:02:33.003
for large distributed systems.

57
00:02:33.003 --> 00:02:37.003
Think about the fact that you may rely on cloud resources.

58
00:02:37.003 --> 00:02:39.006
Your application, as it's deployed,

59
00:02:39.006 --> 00:02:41.006
needs that cloud resource.

60
00:02:41.006 --> 00:02:44.006
By building an operator to provision that resource,

61
00:02:44.006 --> 00:02:47.009
you can then put your CR in your deployment

62
00:02:47.009 --> 00:02:50.001
so that you will get it.

63
00:02:50.001 --> 00:02:52.000
Chaos, and we all love it.

64
00:02:52.000 --> 00:02:55.001
In an operator, the chaos pattern is great

65
00:02:55.001 --> 00:02:57.005
and it's an easy way to do it

66
00:02:57.005 --> 00:03:00.004
because you can deploy a chaos agent

67
00:03:00.004 --> 00:03:02.003
from your deployment itself

68
00:03:02.003 --> 00:03:04.001
through the use of an operator.

69
00:03:04.001 --> 00:03:07.000
Now, first of all, if you aren't using some chaos

70
00:03:07.000 --> 00:03:08.009
and don't understand why I'm all excited,

71
00:03:08.009 --> 00:03:11.004
you're really not testing the resilience

72
00:03:11.004 --> 00:03:13.000
of your deployments

73
00:03:13.000 --> 00:03:15.006
but more than that, you can leverage operators

74
00:03:15.006 --> 00:03:18.002
to do this chaos so you don't have to do it

75
00:03:18.002 --> 00:03:19.006
through manual intervention.

76
00:03:19.006 --> 00:03:22.001
And what happens is these chaos operators

77
00:03:22.001 --> 00:03:24.004
will randomly take down pods

78
00:03:24.004 --> 00:03:25.008
throughout your entire deployment

79
00:03:25.008 --> 00:03:29.001
to make sure that your system is fault tolerant

80
00:03:29.001 --> 00:03:30.009
and this is especially important

81
00:03:30.009 --> 00:03:33.003
in large distributed systems.

82
00:03:33.003 --> 00:03:35.007
And finally, let's talk about upgrades.

83
00:03:35.007 --> 00:03:38.007
Upgrading a single deployment is usually pretty easy

84
00:03:38.007 --> 00:03:42.000
but we all know that it doesn't always work the way

85
00:03:42.000 --> 00:03:43.004
that you want it to.

86
00:03:43.004 --> 00:03:45.007
Operators can help you maintain

87
00:03:45.007 --> 00:03:48.003
and upgrade your system components,

88
00:03:48.003 --> 00:03:51.000
as well as applications to get the most out

89
00:03:51.000 --> 00:03:54.002
of your time when doing manual operators

90
00:03:54.002 --> 00:03:55.009
by making them automated.

91
00:03:55.009 --> 00:03:57.006
And that really is the point.

92
00:03:57.006 --> 00:03:59.008
Write some code instead of doing

93
00:03:59.008 --> 00:04:02.008
the same work multiple times.

94
00:04:02.008 --> 00:04:04.009
There are dedicated sets of tools

95
00:04:04.009 --> 00:04:07.004
for building operators themselves.

96
00:04:07.004 --> 00:04:11.004
Their purpose is to abstract as much of Kubernetes away

97
00:04:11.004 --> 00:04:14.006
and instead, giving you an easy entry point

98
00:04:14.006 --> 00:04:16.007
to extending Kubernetes.

99
00:04:16.007 --> 00:04:19.002
Now, Kubebuilder's probably the most popular

100
00:04:19.002 --> 00:04:21.007
and is one of the most low-level toolkits,

101
00:04:21.007 --> 00:04:23.006
again at least in my opinion.

102
00:04:23.006 --> 00:04:25.008
It leverages Go, like Kubernetes goes,

103
00:04:25.008 --> 00:04:27.007
to build these operators.

104
00:04:27.007 --> 00:04:31.003
And this is the toolkit that we're going to use in this course.

105
00:04:31.003 --> 00:04:33.008
The Operator Framework, backed by Red Hat

106
00:04:33.008 --> 00:04:35.002
is an operator toolkit

107
00:04:35.002 --> 00:04:38.002
that leverages Helm, Ansible or Go

108
00:04:38.002 --> 00:04:39.006
to build operators.

109
00:04:39.006 --> 00:04:42.004
It is very popular and in many use cases,

110
00:04:42.004 --> 00:04:46.001
it's easier to use but in my opinion,

111
00:04:46.001 --> 00:04:49.002
the additional abstractions it takes less value

112
00:04:49.002 --> 00:04:52.007
from a learning context but be sure to look at it

113
00:04:52.007 --> 00:04:55.000
if you are building a production operator

114
00:04:55.000 --> 00:04:58.007
and many times, this is the one I leverage in production

115
00:04:58.007 --> 00:05:02.003
because it adds an easier path forward.

116
00:05:02.003 --> 00:05:07.000
Juju is an operator framework based on Charmed Operator SDK

117
00:05:07.000 --> 00:05:09.004
and a lifecycle manager.

118
00:05:09.004 --> 00:05:11.001
It has a lot of scaffolding

119
00:05:11.001 --> 00:05:14.000
that aids in standard deployment practices,

120
00:05:14.000 --> 00:05:17.000
especially around operators themselves.

121
00:05:17.000 --> 00:05:18.009
KubeOps is an operator framework

122
00:05:18.009 --> 00:05:21.003
for .NET-based teams

123
00:05:21.003 --> 00:05:23.006
that want to keep the language consistent

124
00:05:23.006 --> 00:05:25.009
with their development languages.

125
00:05:25.009 --> 00:05:30.000
So if you're a C# shop, check out KubeOps.

