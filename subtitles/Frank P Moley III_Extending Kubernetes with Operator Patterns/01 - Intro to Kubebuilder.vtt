WEBVTT
1
00:00:00.004 --> 00:00:01.004
- [Instructor] So now that we've gone through

2
00:00:01.004 --> 00:00:04.005
the operator pattern itself, it's time to talk about

3
00:00:04.005 --> 00:00:07.000
the tool we will use to build our operator,

4
00:00:07.000 --> 00:00:09.006
and that is kubebuilder.

5
00:00:09.006 --> 00:00:11.008
So we've talked about it a few times now at this point,

6
00:00:11.008 --> 00:00:13.009
so some of this may be repetitive.

7
00:00:13.009 --> 00:00:16.002
But it's important to understand the language used

8
00:00:16.002 --> 00:00:19.004
in describing objects in the SDK.

9
00:00:19.004 --> 00:00:22.008
And with that, it is a software development kit, or SDK,

10
00:00:22.008 --> 00:00:25.009
for extending Kubernetes, but it does so based on

11
00:00:25.009 --> 00:00:29.001
how Kubernetes was actually built.

12
00:00:29.001 --> 00:00:30.006
It's built on the Go language,

13
00:00:30.006 --> 00:00:34.007
and its project generation will build a Go project.

14
00:00:34.007 --> 00:00:38.004
One of its primary goals as part of extending Kubernetes

15
00:00:38.004 --> 00:00:41.004
is to build operators.

16
00:00:41.004 --> 00:00:43.008
It also provides facilities to publish

17
00:00:43.008 --> 00:00:46.002
Kubernetes operators as well,

18
00:00:46.002 --> 00:00:48.002
and we're going to do that throughout our course

19
00:00:48.002 --> 00:00:51.001
as we're building this because we're going to test this

20
00:00:51.001 --> 00:00:53.007
against a live running Kubernetes

21
00:00:53.007 --> 00:00:56.004
throughout the development life cycle.

22
00:00:56.004 --> 00:00:58.005
So let's start our semantic leveling

23
00:00:58.005 --> 00:01:01.001
with the concept of groups.

24
00:01:01.001 --> 00:01:03.002
Now groups are what you might imagine,

25
00:01:03.002 --> 00:01:06.005
logical groupings of APIs.

26
00:01:06.005 --> 00:01:11.000
The resources they interact with should have some semblance

27
00:01:11.000 --> 00:01:14.009
of related functionality, at least logically.

28
00:01:14.009 --> 00:01:18.004
The key point here is that versions in the API

29
00:01:18.004 --> 00:01:23.002
are attributed to groups and not individual APIs.

30
00:01:23.002 --> 00:01:25.000
They're the groups of APIs.

31
00:01:25.000 --> 00:01:27.009
So as your API changes over time,

32
00:01:27.009 --> 00:01:31.008
the group's version is what actually changes.

33
00:01:31.008 --> 00:01:34.000
So you could have three APIs,

34
00:01:34.000 --> 00:01:36.005
three resources within a group,

35
00:01:36.005 --> 00:01:39.007
and if you modify one in a version change,

36
00:01:39.007 --> 00:01:44.004
the entire group's API itself is what will change.

37
00:01:44.004 --> 00:01:47.005
So the next topic and one that can be kind of confusing

38
00:01:47.005 --> 00:01:49.002
is the kind.

39
00:01:49.002 --> 00:01:53.008
A kind is an API type within a group.

40
00:01:53.008 --> 00:01:59.002
Kind elements must remain passive across version changes,

41
00:01:59.002 --> 00:02:02.002
but they themselves can change.

42
00:02:02.002 --> 00:02:07.004
You just need to ensure you don't lose data across versions.

43
00:02:07.004 --> 00:02:11.004
A resource is a use of a kind,

44
00:02:11.004 --> 00:02:15.004
and often they will appear to be one to one.

45
00:02:15.004 --> 00:02:21.004
But a kind can be returned by many different resources.

46
00:02:21.004 --> 00:02:23.006
Therefore, they are not, indeed, one to one.

47
00:02:23.006 --> 00:02:27.008
So don't be misled by what you may often see on the surface.

48
00:02:27.008 --> 00:02:30.001
A kind is a part of a resource

49
00:02:30.001 --> 00:02:34.000
and it is a type within the group.

50
00:02:34.000 --> 00:02:37.006
So it gets a little bit confusing, but these words matter

51
00:02:37.006 --> 00:02:40.006
as we're starting to build out our operator.

52
00:02:40.006 --> 00:02:43.008
Because we are going to focus primarily on building

53
00:02:43.008 --> 00:02:48.007
APIs and kinds and then defining the details of that kind.

54
00:02:48.007 --> 00:02:50.002
But as you get into more advanced,

55
00:02:50.002 --> 00:02:53.008
your kinds may be sub-kinds of others.

56
00:02:53.008 --> 00:02:56.002
So it gets a little bit confusing.

57
00:02:56.002 --> 00:02:59.005
Spend some time on this wording and go read the kubebuilder

58
00:02:59.005 --> 00:03:03.009
API documentation to understand this terminology.

59
00:03:03.009 --> 00:03:06.006
I also encourage you to look at how that terminology

60
00:03:06.006 --> 00:03:09.004
is also used in SDK operator

61
00:03:09.004 --> 00:03:13.000
and other components within the operator ecosystem.

