WEBVTT
1
00:00:00.005 --> 00:00:01.008
- [Instructor] We have mentioned the topic

2
00:00:01.008 --> 00:00:03.009
of the Kubernetes control loop already,

3
00:00:03.009 --> 00:00:06.009
and it is important that we discuss it

4
00:00:06.009 --> 00:00:09.006
before we get into coding an operator,

5
00:00:09.006 --> 00:00:13.002
because it is critical to understanding how operators,

6
00:00:13.002 --> 00:00:17.007
and really, all Kubernetes constructs should work.

7
00:00:17.007 --> 00:00:20.005
The control loop is one of the most important aspects

8
00:00:20.005 --> 00:00:23.006
of Kubernetes, especially in the operations

9
00:00:23.006 --> 00:00:26.004
and its deterministic APIs.

10
00:00:26.004 --> 00:00:29.008
A control loop is essentially an infinite loop,

11
00:00:29.008 --> 00:00:32.007
meaning that it is always running and transitions,

12
00:00:32.007 --> 00:00:35.003
usually, from sleep to wake, so to say,

13
00:00:35.003 --> 00:00:38.002
where work is done during the wake state.

14
00:00:38.002 --> 00:00:39.008
The work of the control loop

15
00:00:39.008 --> 00:00:42.004
is to regulate the system itself.

16
00:00:42.004 --> 00:00:45.004
If everything is good, nothing happens,

17
00:00:45.004 --> 00:00:49.001
and we return to that proverbial sleep state.

18
00:00:49.001 --> 00:00:53.001
The work that can be performed is to maintain the system

19
00:00:53.001 --> 00:00:55.001
in its desired state.

20
00:00:55.001 --> 00:00:57.008
Now, I love the example from the Kubernetes documentation

21
00:00:57.008 --> 00:01:00.009
itself on this very topic.

22
00:01:00.009 --> 00:01:04.001
They attribute this system who a thermostat.

23
00:01:04.001 --> 00:01:07.004
So you set the desired state on the oven thermostat,

24
00:01:07.004 --> 00:01:10.000
for instance, where you want to cook your food.

25
00:01:10.000 --> 00:01:14.000
The thermostat then triggers the heating element circuits

26
00:01:14.000 --> 00:01:18.008
to turn on until the desired state, or temperature,

27
00:01:18.008 --> 00:01:22.001
is achieved, at which point the thermostat

28
00:01:22.001 --> 00:01:24.006
shuts off the heating elements.

29
00:01:24.006 --> 00:01:28.000
Now, as the temperature is lost to the outside environment

30
00:01:28.000 --> 00:01:31.005
or to the food itself, the thermostat once again

31
00:01:31.005 --> 00:01:34.008
triggers the elements to turn back on.

32
00:01:34.008 --> 00:01:39.002
Now, this process repeats over and over again.

33
00:01:39.002 --> 00:01:41.008
The desired state is the temperature

34
00:01:41.008 --> 00:01:46.002
on the thermostat itself, but the system or environment

35
00:01:46.002 --> 00:01:50.001
is the actual temperature of the oven box.

36
00:01:50.001 --> 00:01:53.005
Now, this is all describing a convergence.

37
00:01:53.005 --> 00:01:57.000
In the oven example, we probably spend very little

38
00:01:57.000 --> 00:02:00.006
of the total time at the desired state,

39
00:02:00.006 --> 00:02:03.006
but we are converging to that temperature.

40
00:02:03.006 --> 00:02:06.002
Not too hot, not too cold.

41
00:02:06.002 --> 00:02:08.001
In our Kubernetes environment,

42
00:02:08.001 --> 00:02:11.001
we have a much less analog situation.

43
00:02:11.001 --> 00:02:14.008
We are either at a desired state or we aren't.

44
00:02:14.008 --> 00:02:18.003
If we aren't, we are either in an error state

45
00:02:18.003 --> 00:02:23.008
or the control loop is trying to achieve the desired state.

46
00:02:23.008 --> 00:02:27.002
Controllers are at the heart of the control loop.

47
00:02:27.002 --> 00:02:29.006
Kind of makes sense, based on their name.

48
00:02:29.006 --> 00:02:33.004
And most of our time creating operators is actually spent

49
00:02:33.004 --> 00:02:37.005
in the controller itself, at least code wise.

50
00:02:37.005 --> 00:02:39.009
Now, they are primarily responsible

51
00:02:39.009 --> 00:02:42.004
for maintaining the control loop,

52
00:02:42.004 --> 00:02:46.004
specifically ensuring the current state approaches

53
00:02:46.004 --> 00:02:49.001
the desired state of a system.

54
00:02:49.001 --> 00:02:53.001
The controller tracks at least one resource type

55
00:02:53.001 --> 00:02:55.007
via a resource definition.

56
00:02:55.007 --> 00:02:57.007
In these resource definitions,

57
00:02:57.007 --> 00:03:02.001
there is a spec field that defines the desired state.

58
00:03:02.001 --> 00:03:04.003
Or, back to our temperature example,

59
00:03:04.003 --> 00:03:06.005
the oven box thermostat.

60
00:03:06.005 --> 00:03:10.004
The controller itself can act on its own,

61
00:03:10.004 --> 00:03:14.009
or it can leverage the Kubernetes API as needed

62
00:03:14.009 --> 00:03:19.006
in order to move the system to the desired state.

63
00:03:19.006 --> 00:03:21.006
So now let's take a look at the control loop

64
00:03:21.006 --> 00:03:23.008
from a high level perspective.

65
00:03:23.008 --> 00:03:26.006
So we're going to start with our environment,

66
00:03:26.006 --> 00:03:30.002
and within our environment, we have our controller.

67
00:03:30.002 --> 00:03:32.007
Now, this controller is part of the control loop.

68
00:03:32.007 --> 00:03:36.006
It looks at its resource type, determines if they are at

69
00:03:36.006 --> 00:03:41.000
the desired state, and takes action if it isn't.

70
00:03:41.000 --> 00:03:44.003
Now, we also have a description of our desired state.

71
00:03:44.003 --> 00:03:48.004
This is usually a YAML file, often part of a deployment.

72
00:03:48.004 --> 00:03:52.000
In order to set off the operations, we move our resource

73
00:03:52.000 --> 00:03:55.003
definition into the cluster by applying it.

74
00:03:55.003 --> 00:03:57.006
This is when the control loop will notice

75
00:03:57.006 --> 00:04:02.000
that the desired state does not match the current state,

76
00:04:02.000 --> 00:04:06.004
and its activity will commence until the environment

77
00:04:06.004 --> 00:04:09.005
as a whole reaches the desired state,

78
00:04:09.005 --> 00:04:13.000
based on this definition within the cluster.

