WEBVTT
1
00:00:00.005 --> 00:00:01.006
- [Instructor] After controllers,

2
00:00:01.006 --> 00:00:03.006
the next most important concept

3
00:00:03.006 --> 00:00:07.002
to understand is custom resources.

4
00:00:07.002 --> 00:00:10.007
Resources are one of the most common things we work with

5
00:00:10.007 --> 00:00:12.009
throughout the Kubernetes API.

6
00:00:12.009 --> 00:00:14.003
In fact, you have worked with them

7
00:00:14.003 --> 00:00:15.006
and may not even known

8
00:00:15.006 --> 00:00:18.002
that they were technically resources.

9
00:00:18.002 --> 00:00:22.000
A resource is an endpoint in the Kubernetes API.

10
00:00:22.000 --> 00:00:25.000
It is the thing in the API itself

11
00:00:25.000 --> 00:00:27.003
that we perform actions on.

12
00:00:27.003 --> 00:00:31.001
A resource is technically a collection of objects.

13
00:00:31.001 --> 00:00:33.007
While there may be only one instance,

14
00:00:33.007 --> 00:00:36.002
it's still a collection.

15
00:00:36.002 --> 00:00:38.008
Some of the most used resources in the system

16
00:00:38.008 --> 00:00:40.003
are things like pods,

17
00:00:40.003 --> 00:00:43.009
services, jobs including CRON jobs

18
00:00:43.009 --> 00:00:46.006
and the list goes on from here.

19
00:00:46.006 --> 00:00:50.003
Custom resources are critical in operators,

20
00:00:50.003 --> 00:00:54.006
just like resources themselves are critical for Kubernetes.

21
00:00:54.006 --> 00:00:58.001
Custom resources are simple extensions

22
00:00:58.001 --> 00:01:00.000
of the Kubernetes API.

23
00:01:00.000 --> 00:01:02.007
Today, many common components

24
00:01:02.007 --> 00:01:05.005
are built as modular CRDs

25
00:01:05.005 --> 00:01:08.003
to help make Kubernetes more modular

26
00:01:08.003 --> 00:01:11.005
but a CRD may or may not be part

27
00:01:11.005 --> 00:01:14.000
of a default Kubernetes install.

28
00:01:14.000 --> 00:01:17.008
And, of course, all of the operators that you build

29
00:01:17.008 --> 00:01:20.000
with custom resource definitions

30
00:01:20.000 --> 00:01:23.008
will not be part of the default Kubernetes install

31
00:01:23.008 --> 00:01:26.006
unless you contribute it back to the community

32
00:01:26.006 --> 00:01:30.006
and it is accepted but that's a different situation.

33
00:01:30.006 --> 00:01:32.007
Once a CRD is installed,

34
00:01:32.007 --> 00:01:35.004
it can be accessed via the API

35
00:01:35.004 --> 00:01:38.009
and most commonly, that's done through kubectl.

36
00:01:38.009 --> 00:01:43.008
CRDs can exist without controllers to store data.

37
00:01:43.008 --> 00:01:46.002
There is no requirement for a controller

38
00:01:46.002 --> 00:01:51.002
but an operator usually includes both.

39
00:01:51.002 --> 00:01:53.006
Kubernetes provides some nice bullet points

40
00:01:53.006 --> 00:01:56.009
about declarative versus imperative APIs.

41
00:01:56.009 --> 00:01:59.008
I am including them verbatim from their website

42
00:01:59.008 --> 00:02:01.003
because I think it's important

43
00:02:01.003 --> 00:02:04.003
when evaluating if your resource fits

44
00:02:04.003 --> 00:02:07.003
into the Kubernetes API or not.

45
00:02:07.003 --> 00:02:10.003
So let's first look at the key points

46
00:02:10.003 --> 00:02:14.000
about what they say is a declarative API.

47
00:02:14.000 --> 00:02:15.000
These are the points

48
00:02:15.000 --> 00:02:18.008
that will fit into the Kubernetes API itself.

49
00:02:18.008 --> 00:02:21.000
So things like your API consists

50
00:02:21.000 --> 00:02:23.000
of a relatively small number

51
00:02:23.000 --> 00:02:25.006
of relatively small objects.

52
00:02:25.006 --> 00:02:27.006
The objects define configuration

53
00:02:27.006 --> 00:02:30.003
of applications or infrastructure.

54
00:02:30.003 --> 00:02:34.006
The objects are updated relatively infrequently.

55
00:02:34.006 --> 00:02:38.008
Humans often need to read and write the objects.

56
00:02:38.008 --> 00:02:41.000
The main operations on the objects

57
00:02:41.000 --> 00:02:44.009
are CRUD-y, meaning create, read, update, delete.

58
00:02:44.009 --> 00:02:49.000
And transactions across objects are not required.

59
00:02:49.000 --> 00:02:54.000
The API represents a desired state, not an exact state.

60
00:02:54.000 --> 00:02:56.005
So when you're looking at your object

61
00:02:56.005 --> 00:02:58.005
and determining whether it fits in

62
00:02:58.005 --> 00:03:00.002
to the Kubernetes API,

63
00:03:00.002 --> 00:03:03.002
it needs to fit into this declarative model.

64
00:03:03.002 --> 00:03:04.009
And this is really important

65
00:03:04.009 --> 00:03:06.006
because you don't want to force things

66
00:03:06.006 --> 00:03:08.003
into a Kubernetes API

67
00:03:08.003 --> 00:03:10.009
that should simply be a service.

68
00:03:10.009 --> 00:03:13.001
But some stuff, and what we are going to do

69
00:03:13.001 --> 00:03:14.008
in this course,

70
00:03:14.008 --> 00:03:18.006
do fit very nicely into this declarative model.

71
00:03:18.006 --> 00:03:21.005
So let's take a look at the imperative ones.

72
00:03:21.005 --> 00:03:23.005
And these are things that are not a good fit

73
00:03:23.005 --> 00:03:25.006
for the Kubernetes API

74
00:03:25.006 --> 00:03:27.009
and should be rolled into a service artifact

75
00:03:27.009 --> 00:03:30.009
and that artifact then deployed to Kubernetes.

76
00:03:30.009 --> 00:03:33.008
So things like the client says do this,

77
00:03:33.008 --> 00:03:36.001
and then gets a synchronous response back

78
00:03:36.001 --> 00:03:37.006
when it's done.

79
00:03:37.006 --> 00:03:39.000
And that's really, really important

80
00:03:39.000 --> 00:03:41.001
because Kubernetes is asynchronous

81
00:03:41.001 --> 00:03:43.002
when it comes to its API.

82
00:03:43.002 --> 00:03:45.000
The clients says do this

83
00:03:45.000 --> 00:03:47.005
and then gets an operation ID back,

84
00:03:47.005 --> 00:03:50.009
and has to check a separate Operation object

85
00:03:50.009 --> 00:03:53.006
to determine completion of the request.

86
00:03:53.006 --> 00:03:57.009
And this is very common in an asynchronous API

87
00:03:57.009 --> 00:04:00.003
where you would write using an imperative structure.

88
00:04:00.003 --> 00:04:01.008
So we would give you an ID

89
00:04:01.008 --> 00:04:05.002
and say come back to this ID later to see the status.

90
00:04:05.002 --> 00:04:07.009
You talk about Remote Procedure Calls.

91
00:04:07.009 --> 00:04:10.001
Directly storing large amounts of data,

92
00:04:10.001 --> 00:04:13.007
for example, greater than a few kilobytes per object

93
00:04:13.007 --> 00:04:15.006
or thousands of objects.

94
00:04:15.006 --> 00:04:18.005
And this is something that I actually have had to deal with

95
00:04:18.005 --> 00:04:20.006
in things that actually fit really well

96
00:04:20.006 --> 00:04:21.009
in the declarative

97
00:04:21.009 --> 00:04:24.007
but they were too big and that caused issues

98
00:04:24.007 --> 00:04:26.007
with the master servers

99
00:04:26.007 --> 00:04:29.008
because etcd filled up.

100
00:04:29.008 --> 00:04:31.006
The next one, high bandwidth access.

101
00:04:31.006 --> 00:04:34.002
So it's tens of requests per second sustained.

102
00:04:34.002 --> 00:04:36.002
Again, looking at the kube API

103
00:04:36.002 --> 00:04:39.002
is not designed for that level of operation

104
00:04:39.002 --> 00:04:41.002
with queries going on.

105
00:04:41.002 --> 00:04:42.007
Storing end user data.

106
00:04:42.007 --> 00:04:45.001
So things like images, PII, et cetera

107
00:04:45.001 --> 00:04:48.009
and other large-scale data processed by applications.

108
00:04:48.009 --> 00:04:51.007
Those belong in a database, not in etcd

109
00:04:51.007 --> 00:04:53.007
and not in Kubernetes.

110
00:04:53.007 --> 00:04:57.006
The natural operations on the objects are not CRUD-y.

111
00:04:57.006 --> 00:05:01.000
And finally, you choose to represent pending operations

112
00:05:01.000 --> 00:05:05.001
with an operation ID or an operation object

113
00:05:05.001 --> 00:05:06.007
as opposed to a status,

114
00:05:06.007 --> 00:05:10.002
which is what you usually do with a declarative API.

115
00:05:10.002 --> 00:05:11.007
So again, these are guidelines

116
00:05:11.007 --> 00:05:14.000
that you should use when you're looking at your system

117
00:05:14.000 --> 00:05:16.008
and deciding does it fit in Kubernetes

118
00:05:16.008 --> 00:05:19.000
or does it fit as a service?

119
00:05:19.000 --> 00:05:20.003
From here on out, we're going to assume

120
00:05:20.003 --> 00:05:22.002
that we're declarative with what we're doing

121
00:05:22.002 --> 00:05:24.000
and we are going to build our operator

122
00:05:24.000 --> 00:05:26.000
using this declarative model.

