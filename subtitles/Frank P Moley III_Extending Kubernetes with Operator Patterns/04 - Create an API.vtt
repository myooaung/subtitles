WEBVTT
1
00:00:00.004 --> 00:00:02.005
- [Instructor] So we have our operators scaffolding

2
00:00:02.005 --> 00:00:04.006
but we cannot do anything with it yet.

3
00:00:04.006 --> 00:00:09.000
Let's change that with an API and a kind.

4
00:00:09.000 --> 00:00:10.009
So when we initialized our project

5
00:00:10.009 --> 00:00:14.003
the last console message was to create an API.

6
00:00:14.003 --> 00:00:15.007
It's time to do that now.

7
00:00:15.007 --> 00:00:18.007
So we're going to be in our terminal and before we hit enter

8
00:00:18.007 --> 00:00:21.001
I want to discuss some of the things that we're going to do.

9
00:00:21.001 --> 00:00:23.003
So you can go ahead and type what I'm going to type

10
00:00:23.003 --> 00:00:26.003
but don't hit enter yet, so we can talk about it.

11
00:00:26.003 --> 00:00:27.001
So I'm going to go to

12
00:00:27.001 --> 00:00:39.000
kubebuilder create api --group cninf --version v1alpha1

13
00:00:39.000 --> 00:00:43.009
- -kind Objstore, OBJ store.

14
00:00:43.009 --> 00:00:45.007
Okay, so let's talk about this.

15
00:00:45.007 --> 00:00:48.002
So what we're doing here is we're telling kubebuilder

16
00:00:48.002 --> 00:00:51.007
to create an API and all the scaffolding for it.

17
00:00:51.007 --> 00:00:54.008
We're going to give it a group called cninf

18
00:00:54.008 --> 00:00:56.008
as all the APIs that we build

19
00:00:56.008 --> 00:00:59.007
are going to be part of the Cloud Native infrastructure

20
00:00:59.007 --> 00:01:02.004
and that's what that abbreviation stands for.

21
00:01:02.004 --> 00:01:07.002
Now, we are specifying a version of v1alpha1

22
00:01:07.002 --> 00:01:09.004
as we are in active development.

23
00:01:09.004 --> 00:01:10.006
Now it's important to note

24
00:01:10.006 --> 00:01:14.006
that those version tags are very specifically defined.

25
00:01:14.006 --> 00:01:17.006
You can't just pick any version that you want.

26
00:01:17.006 --> 00:01:19.006
You have a finite set to pick from

27
00:01:19.006 --> 00:01:23.004
and v1alpha1 is generally the earliest version

28
00:01:23.004 --> 00:01:25.000
that you would pick.

29
00:01:25.000 --> 00:01:28.009
Now, usually you're going to modify that version as you go

30
00:01:28.009 --> 00:01:32.002
and you append it to your API definitions

31
00:01:32.002 --> 00:01:35.002
and you'll see how the folder structure would match that.

32
00:01:35.002 --> 00:01:37.005
But again, we're going to start at the beginning

33
00:01:37.005 --> 00:01:39.009
and you can build your way towards the end

34
00:01:39.009 --> 00:01:42.005
if you want to continue with this controller

35
00:01:42.005 --> 00:01:44.007
in a real world scenario.

36
00:01:44.007 --> 00:01:46.009
Now the last value is critical

37
00:01:46.009 --> 00:01:48.008
and it is our kind.

38
00:01:48.008 --> 00:01:52.006
In this case, Objstore for object store.

39
00:01:52.006 --> 00:01:54.005
Now again, think of a kind

40
00:01:54.005 --> 00:01:57.004
as that element that you use with kubectl.

41
00:01:57.004 --> 00:02:01.000
So a pod is a kind, a deployment is a kind,

42
00:02:01.000 --> 00:02:03.007
a config map is a kind.

43
00:02:03.007 --> 00:02:08.001
We are creating a new kind called Objstore for object store.

44
00:02:08.001 --> 00:02:12.003
Now, when we build our object store objects with CRs,

45
00:02:12.003 --> 00:02:15.006
that's what's going to trigger our controller to do work.

46
00:02:15.006 --> 00:02:18.004
So let's go ahead and hit enter and let this run.

47
00:02:18.004 --> 00:02:19.009
You're going to notice it's going to prompt you.

48
00:02:19.009 --> 00:02:21.003
Do you want to create a resource?

49
00:02:21.003 --> 00:02:23.006
Select Y for yes.

50
00:02:23.006 --> 00:02:25.006
And do you want to create a controller?

51
00:02:25.006 --> 00:02:27.006
Select Y again.

52
00:02:27.006 --> 00:02:28.008
Now let's let that run.

53
00:02:28.008 --> 00:02:32.009
It's going to do some downloads and things.

54
00:02:32.009 --> 00:02:35.005
Okay, hopefully that didn't take too long for you to run.

55
00:02:35.005 --> 00:02:36.009
Now that we've got this run,

56
00:02:36.009 --> 00:02:40.007
let's go ahead and jump into our IDE.

57
00:02:40.007 --> 00:02:44.001
And within our IDE, we got several changes.

58
00:02:44.001 --> 00:02:46.000
A few things were added to our go_mod.

59
00:02:46.000 --> 00:02:49.002
That was because we brought in more dependencies

60
00:02:49.002 --> 00:02:50.002
but let's take a look.

61
00:02:50.002 --> 00:02:54.000
We now have in v1alpha several elements.

62
00:02:54.000 --> 00:02:55.008
We've got an objstore_type

63
00:02:55.008 --> 00:02:57.003
and this is our object store.

64
00:02:57.003 --> 00:03:00.003
This is the kind that we created.

65
00:03:00.003 --> 00:03:03.005
We also have an objstore_controller

66
00:03:03.005 --> 00:03:05.007
and a test suite to go with that.

67
00:03:05.007 --> 00:03:08.007
Most of our work is going to be in those two files,

68
00:03:08.007 --> 00:03:12.007
objstore_types, and objstore_controller.

69
00:03:12.007 --> 00:03:16.009
Now you also got in the config directory,

70
00:03:16.009 --> 00:03:18.003
you now have a sample

71
00:03:18.003 --> 00:03:21.006
and that sample we can use for our testing.

72
00:03:21.006 --> 00:03:24.007
Under crd we got some customization files

73
00:03:24.007 --> 00:03:26.005
and some patch files.

74
00:03:26.005 --> 00:03:29.003
And under rbac we got a couple more rbac rules

75
00:03:29.003 --> 00:03:32.005
that are going to be applied through customization.

76
00:03:32.005 --> 00:03:34.006
Now that's all we got from doing that

77
00:03:34.006 --> 00:03:35.008
but that's actually quite a bit.

78
00:03:35.008 --> 00:03:37.002
We could now run this.

79
00:03:37.002 --> 00:03:40.007
It's not going to do anything, but we can run this controller

80
00:03:40.007 --> 00:03:44.006
and we can build instances of our empty object store

81
00:03:44.006 --> 00:03:46.003
but let's save that for later when we actually

82
00:03:46.003 --> 00:03:47.003
have some meat to go with it.

83
00:03:47.003 --> 00:03:52.000
For now, this is sufficient on getting the API created.

