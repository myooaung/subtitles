WEBVTT
1
1

00:00:00.130  -->  00:00:02.440
<v Narrator>Hello and welcome to this Python tutorial.</v>
2

2

00:00:02.440  -->  00:00:03.760
So how did the homework go?
3

3

00:00:03.760  -->  00:00:06.310
Did you manage to compute the tested loss?
4

4

00:00:06.310  -->  00:00:09.700
And if so, did you manage to get one below one star?
5

5

00:00:09.700  -->  00:00:11.130
That's what we are about to figure out
6

6

00:00:11.130  -->  00:00:13.050
in this tutorial, and you're gonna see
7

7

00:00:13.050  -->  00:00:15.020
if you got the logic right, because
8

8

00:00:15.020  -->  00:00:18.080
in this logic there is one crucial thing to understand,
9

9

00:00:18.080  -->  00:00:20.770
which I'm gonna highlight in one or two minutes.
10

10

00:00:20.770  -->  00:00:24.370
So, before getting to that crucial thing to understand,
11

11

00:00:24.370  -->  00:00:26.000
the first thing to understand of course,
12

12

00:00:26.000  -->  00:00:29.030
is that we will not need a double for loop here
13

13

00:00:29.030  -->  00:00:31.080
because we don't need 200 epochs
14

14

00:00:31.080  -->  00:00:32.600
to measure the tested performance
15

15

00:00:32.600  -->  00:00:34.000
to measure the tested loss.
16

16

00:00:34.000  -->  00:00:36.060
We of course need one epoch
17

17

00:00:36.060  -->  00:00:38.660
because we're gonna measure the global loss, one time.
18

18

00:00:38.660  -->  00:00:41.610
And therefore, we only need this for loop here
19

19

00:00:41.610  -->  00:00:44.670
because this for loop loops over all the users
20

20

00:00:44.670  -->  00:00:45.710
of the data set.
21

21

00:00:45.710  -->  00:00:48.500
So the first thing that we're gonna do to be efficient
22

22

00:00:48.500  -->  00:00:51.520
is to copy this whole part of the code here
23

23

00:00:51.520  -->  00:00:54.750
inside this first for loop over the epochs.
24

24

00:00:54.750  -->  00:00:58.120
So let's do this, that's gonna be our first step.
25

25

00:00:58.120  -->  00:01:00.530
So I'm copying this, and of course then
26

26

00:01:00.530  -->  00:01:03.370
we will adapt the code to the test set.
27

27

00:01:03.370  -->  00:01:07.420
So copying that here, and now, what we'll do is
28

28

00:01:07.420  -->  00:01:09.480
look at each line of code one by one,
29

29

00:01:09.480  -->  00:01:11.920
and see what we need to change, or remove.
30

30

00:01:11.920  -->  00:01:12.753
So here we go.
31

31

00:01:12.753  -->  00:01:15.670
First line, well, this introduces the loss,
32

32

00:01:15.670  -->  00:01:17.510
but that was for the training set before,
33

33

00:01:17.510  -->  00:01:21.090
so of course we're gonna call it test loss
34

34

00:01:21.090  -->  00:01:23.760
because this time we are measuring the test loss.
35

35

00:01:23.760  -->  00:01:27.250
So we initialize it to zero as well and then you know
36

36

00:01:27.250  -->  00:01:29.870
we'll add the different errors between the real ratings,
37

37

00:01:29.870  -->  00:01:31.720
and the breakthrough ratings.
38

38

00:01:31.720  -->  00:01:35.560
Then s, remember s is for the number of users that rated
39

39

00:01:35.560  -->  00:01:38.050
at least one movie, so we keep this s,
40

40

00:01:38.050  -->  00:01:39.710
we will still need it, because we're gonna
41

41

00:01:39.710  -->  00:01:41.870
measure the loss the same way as we did
42

42

00:01:41.870  -->  00:01:43.360
for the training set.
43

43

00:01:43.360  -->  00:01:46.580
So that's okay, and then we start the for loop,
44

44

00:01:46.580  -->  00:01:49.970
but the for loop over all the users of the data set.
45

45

00:01:49.970  -->  00:01:51.400
So here that's still the same,
46

46

00:01:51.400  -->  00:01:54.110
we loop over all the observations of our data set
47

47

00:01:54.110  -->  00:01:56.890
because each observation corresponds to a user,
48

48

00:01:56.890  -->  00:01:59.120
and then we go inside the for loop.
49

49

00:01:59.120  -->  00:02:00.420
That's this line here.
50

50

00:02:00.420  -->  00:02:03.360
And we start by taking the input.
51

51

00:02:03.360  -->  00:02:06.070
And now here comes the crucial question.
52

52

00:02:06.070  -->  00:02:08.400
If you get the correct answer to the question
53

53

00:02:08.400  -->  00:02:10.610
I'm about to ask, that means that you understand
54

54

00:02:10.610  -->  00:02:11.443
what's going on.
55

55

00:02:11.443  -->  00:02:13.310
You understand the main point.
56

56

00:02:13.310  -->  00:02:15.820
So, the question is, Right now we're measuring the
57

57

00:02:15.820  -->  00:02:19.070
test set loss, so when we take the input here,
58

58

00:02:19.070  -->  00:02:22.470
do we need to keep the training set here, or replace
59

59

00:02:22.470  -->  00:02:25.140
this training set here by test set?
60

60

00:02:25.140  -->  00:02:27.658
So, that's the question, and the answer is,
61

61

00:02:27.658  -->  00:02:30.480
We need to keep the training set.
62

62

00:02:30.480  -->  00:02:31.650
So here is why.
63

63

00:02:31.650  -->  00:02:34.180
Right now, we are dealing with a specific user.
64

64

00:02:34.180  -->  00:02:36.720
This ID user here, and we wanna to take
65

65

00:02:36.720  -->  00:02:39.560
the input corresponding to that user.
66

66

00:02:39.560  -->  00:02:42.580
And the input corresponding to that user is of course,
67

67

00:02:42.580  -->  00:02:45.800
all the ratings of movies this user watched.
68

68

00:02:45.800  -->  00:02:47.310
So that's our input vector.
69

69

00:02:47.310  -->  00:02:50.060
We put this input vector into the network,
70

70

00:02:50.060  -->  00:02:51.740
that is our auto encoder,
71

71

00:02:51.740  -->  00:02:55.510
then the auto encoder will look at the ratings of the movies
72

72

00:02:55.510  -->  00:02:57.400
and especially the positive ratings,
73

73

00:02:57.400  -->  00:03:00.840
and based on these ratings, it will predict the ratings
74

74

00:03:00.840  -->  00:03:03.400
of the movies that the user hasn't watched yet.
75

75

00:03:03.400  -->  00:03:06.680
So, for example, if in our input vector our user
76

76

00:03:06.680  -->  00:03:10.500
gave five star ratings to all the action movies he watched,
77

77

00:03:10.500  -->  00:03:13.720
then when we feed this input vector into the network,
78

78

00:03:13.720  -->  00:03:16.650
well, the new realms corresponding to the specific features
79

79

00:03:16.650  -->  00:03:18.370
related to action movies,
80

80

00:03:18.370  -->  00:03:20.560
will be activated with a large weight
81

81

00:03:20.560  -->  00:03:23.370
to predict high ratings for the other
82

82

00:03:23.370  -->  00:03:26.060
action movies that the user hasn't watched yet.
83

83

00:03:26.060  -->  00:03:28.910
And then what we'll do, is we will compare
84

84

00:03:28.910  -->  00:03:32.710
this predicted ratings to the ratings of the test set
85

85

00:03:32.710  -->  00:03:35.360
because the test set contains these ratings
86

86

00:03:35.360  -->  00:03:37.350
that were not part of the training set.
87

87

00:03:37.350  -->  00:03:39.050
That is, these action movies
88

88

00:03:39.050  -->  00:03:42.070
that the user hasn't watched yet, in the training set.
89

89

00:03:42.070  -->  00:03:43.380
So you can see it this way,
90

90

00:03:43.380  -->  00:03:45.210
the training set is like, the set that
91

91

00:03:45.210  -->  00:03:47.390
contains all the ratings of the movies by this
92

92

00:03:47.390  -->  00:03:50.380
specific user, up to a certain point in time.
93

93

00:03:50.380  -->  00:03:52.910
Then we predict the ratings of the other movies
94

94

00:03:52.910  -->  00:03:54.630
that the user hasn't watched yet,
95

95

00:03:54.630  -->  00:03:56.660
and then we have the test set in the future
96

96

00:03:56.660  -->  00:03:58.230
that contains the real answers,
97

97

00:03:58.230  -->  00:04:01.030
like it contains the real ratings for these movies
98

98

00:04:01.030  -->  00:04:03.070
that were not part of the training set.
99

99

00:04:03.070  -->  00:04:06.330
And so then we compare these real ratings of the test set
100

100

00:04:06.330  -->  00:04:07.870
to our predicted ratings,
101

101

00:04:07.870  -->  00:04:09.460
and that's how we measure the loss.
102

102

00:04:09.460  -->  00:04:10.940
And we are gonna do that of course,
103

103

00:04:10.940  -->  00:04:12.990
for all the users, and that's why we have to take
104

104

00:04:12.990  -->  00:04:15.890
this for loop here to loop over all the users.
105

105

00:04:15.890  -->  00:04:17.930
So, that's a crucial thing to understand.
106

106

00:04:17.930  -->  00:04:20.080
Here you have to keep training set,
107

107

00:04:20.080  -->  00:04:22.280
because you are predicting the ratings of the movies
108

108

00:04:22.280  -->  00:04:24.120
that the user hasn't watched yet,
109

109

00:04:24.120  -->  00:04:26.520
and these movies are part of the training set.
110

110

00:04:26.520  -->  00:04:28.500
Then in the future we have this test set,
111

111

00:04:28.500  -->  00:04:30.320
that will therefore contain the real ratings
112

112

00:04:30.320  -->  00:04:32.800
because in the future, the user will have watched
113

113

00:04:32.800  -->  00:04:35.470
these movies, and so we can compare the real ratings
114

114

00:04:35.470  -->  00:04:37.240
to the predicted ratings.
115

115

00:04:37.240  -->  00:04:38.790
So that's the training set here,
116

116

00:04:38.790  -->  00:04:40.760
and now let's compute the target.
117

117

00:04:40.760  -->  00:04:44.400
The target is not a clone of the input,
118

118

00:04:44.400  -->  00:04:46.470
but based on what we've just explained,
119

119

00:04:46.470  -->  00:04:49.890
the target is of course the real ratings of the test set.
120

120

00:04:49.890  -->  00:04:51.620
That is, the answer is in the future
121

121

00:04:51.620  -->  00:04:53.570
when the user watches the movies.
122

122

00:04:53.570  -->  00:04:56.300
So here, we don't take a clone of the input,
123

123

00:04:56.300  -->  00:04:59.400
what we do is take variable of
124

124

00:04:59.400  -->  00:05:01.800
not the training set,
125

125

00:05:01.800  -->  00:05:04.410
but the test set
126

126

00:05:04.410  -->  00:05:06.923
because the target contains the real answers.
127

127

00:05:07.770  -->  00:05:11.080
All right, so we have our input, we have our target,
128

128

00:05:11.080  -->  00:05:13.080
and now we need to make our predictions.
129

129

00:05:13.080  -->  00:05:15.410
And the predictions happen right here
130

130

00:05:15.410  -->  00:05:18.410
with this output equals S A E input.
131

131

00:05:18.410  -->  00:05:19.510
So now new question,
132

132

00:05:19.510  -->  00:05:21.460
Do we need to change something here?
133

133

00:05:21.460  -->  00:05:23.650
Does it correspond to our predictions?
134

134

00:05:23.650  -->  00:05:25.790
Well, based on what we've just explained,
135

135

00:05:25.790  -->  00:05:27.020
of course it is.
136

136

00:05:27.020  -->  00:05:29.800
These are our predictions because based on
137

137

00:05:29.800  -->  00:05:32.080
the ratings of the movies the user watched
138

138

00:05:32.080  -->  00:05:34.350
in the training set and gave ratings,
139

139

00:05:34.350  -->  00:05:37.010
we are going to predict what's gonna happen for
140

140

00:05:37.010  -->  00:05:39.750
the other movies that the user hasn't watched yet.
141

141

00:05:39.750  -->  00:05:42.740
We are gonna predict the ratings of these other movies,
142

142

00:05:42.740  -->  00:05:46.100
and this is exactly what this S A E input will do
143

143

00:05:46.100  -->  00:05:49.190
because S A E contains our forward function
144

144

00:05:49.190  -->  00:05:51.810
that returns the vector of predicted ratings
145

145

00:05:51.810  -->  00:05:54.850
and therefore by calling our object on the input here,
146

146

00:05:54.850  -->  00:05:57.170
we will get our vector of predicted ratings
147

147

00:05:57.170  -->  00:06:00.100
for the movies that the user hasn't watched yet,
148

148

00:06:00.100  -->  00:06:02.340
and this will go into output.
149

149

00:06:02.340  -->  00:06:06.250
Then same, we use this to override the computations
150

150

00:06:06.250  -->  00:06:08.820
of the gradient with respect to the target because
151

151

00:06:08.820  -->  00:06:11.700
we don't need them, so that's the same as before.
152

152

00:06:11.700  -->  00:06:16.100
Then we use this line of code to only consider the ratings
153

153

00:06:16.100  -->  00:06:19.900
of the movies that are non-zero ratings in the test set
154

154

00:06:19.900  -->  00:06:22.440
because target corresponds to the real ratings
155

155

00:06:22.440  -->  00:06:25.490
in the test set, and we don't wanna measure the future loss
156

156

00:06:25.490  -->  00:06:28.720
on these movies that didn't get any rating.
157

157

00:06:28.720  -->  00:06:29.553
That makes sense.
158

158

00:06:29.553  -->  00:06:31.950
We just wanna compute the error by comparing
159

159

00:06:31.950  -->  00:06:34.500
the real ratings that took place and therefore are
160

160

00:06:34.500  -->  00:06:36.400
between one star and five stars
161

161

00:06:36.400  -->  00:06:38.660
to our predicted ratings returned by
162

162

00:06:38.660  -->  00:06:40.710
our stacked auto encoders.
163

163

00:06:40.710  -->  00:06:42.070
So that's still the same.
164

164

00:06:42.070  -->  00:06:45.950
Then at the next line, we measure the loss between
165

165

00:06:45.950  -->  00:06:50.000
the output that is our predicted ratings and the target
166

166

00:06:50.000  -->  00:06:52.820
that is the real ratings of the test set.
167

167

00:06:52.820  -->  00:06:54.180
So that's still the same.
168

168

00:06:54.180  -->  00:06:58.030
Then we use this mean corrector that will still be the same
169

169

00:06:58.030  -->  00:07:00.100
adjusting factor that will measure the relevant
170

170

00:07:00.100  -->  00:07:01.280
loss on the test set.
171

171

00:07:01.280  -->  00:07:02.230
So that's still the same.
172

172

00:07:02.230  -->  00:07:04.650
We're doing that with respect to the ratings
173

173

00:07:04.650  -->  00:07:05.760
that are non-zero ratings.
174

174

00:07:05.760  -->  00:07:08.330
So we only consider the movies that were rated
175

175

00:07:08.330  -->  00:07:11.510
in the test set, but then we have this line,
176

176

00:07:11.510  -->  00:07:14.120
loss dot backward, and so now I have another question,
177

177

00:07:14.120  -->  00:07:15.270
but a simple one.
178

178

00:07:15.270  -->  00:07:17.560
The question is, Do we need to keep this line?
179

179

00:07:17.560  -->  00:07:20.650
And the answer is, of course, no because
180

180

00:07:20.650  -->  00:07:23.550
this is related to back propagation and back propagation
181

181

00:07:23.550  -->  00:07:25.810
is related to the training, and by measuring
182

182

00:07:25.810  -->  00:07:28.220
the test set loss, we are not updating any weight.
183

183

00:07:28.220  -->  00:07:30.920
So we have to remove this because this is only
184

184

00:07:30.920  -->  00:07:32.870
for the training, okay?
185

185

00:07:32.870  -->  00:07:34.350
So then, next line.
186

186

00:07:34.350  -->  00:07:38.170
Here we compute the loss accumulated with the user
187

187

00:07:38.170  -->  00:07:39.890
we're dealing with right now, the loop.
188

188

00:07:39.890  -->  00:07:43.160
So remember the loss starts at zero, then we compute
189

189

00:07:43.160  -->  00:07:45.450
the area between the predicted rating and the real rating
190

190

00:07:45.450  -->  00:07:48.890
for the first user, and so we add the generated loss
191

191

00:07:48.890  -->  00:07:50.500
to this loss here.
192

192

00:07:50.500  -->  00:07:53.250
So that becomes this loss related to the first user.
193

193

00:07:53.250  -->  00:07:54.930
Then we do the same for the second user,
194

194

00:07:54.930  -->  00:07:58.020
and we add the loss generated with the second user
195

195

00:07:58.020  -->  00:08:00.410
to the loss generated with the first user,
196

196

00:08:00.410  -->  00:08:02.560
and therefore we are incrementing at each step
197

197

00:08:02.560  -->  00:08:04.350
of the for loop after each time
198

198

00:08:04.350  -->  00:08:06.680
we feed a user to the network.
199

199

00:08:06.680  -->  00:08:08.700
But here of course we need to replace
200

200

00:08:08.700  -->  00:08:11.940
train loss by test loss
201

201

00:08:11.940  -->  00:08:13.660
because we introduced our new variable
202

202

00:08:13.660  -->  00:08:17.920
for the test loss as test loss, and I think that's all.
203

203

00:08:17.920  -->  00:08:20.100
Here we don't have anything to change because
204

204

00:08:20.100  -->  00:08:22.250
the mean corrector is based on our target
205

205

00:08:22.250  -->  00:08:25.080
that is based on the test set, so that's fine,
206

206

00:08:25.080  -->  00:08:29.307
and the loss data is based on this loss here,
207

207

00:08:29.307  -->  00:08:32.060
which is based on the output and our target
208

208

00:08:32.060  -->  00:08:34.120
that are correctly related to the test set.
209

209

00:08:34.120  -->  00:08:36.560
So that's fine, and then at the next line,
210

210

00:08:36.560  -->  00:08:40.330
we increment s by one, so again, that's only to consider
211

211

00:08:40.330  -->  00:08:43.430
the users that gave at least one non-zero rating.
212

212

00:08:43.430  -->  00:08:46.910
And finally we have our optimizer, and so now another
213

213

00:08:46.910  -->  00:08:48.220
very simple question,
214

214

00:08:48.220  -->  00:08:49.620
Do we need to keep this?
215

215

00:08:49.620  -->  00:08:52.220
Well of course the answer is no again because
216

216

00:08:52.220  -->  00:08:54.700
this is related to backward propagation
217

217

00:08:54.700  -->  00:08:56.600
that is related to the training.
218

218

00:08:56.600  -->  00:09:01.410
And finally last line of code where we print the loss
219

219

00:09:01.410  -->  00:09:03.840
while here again, what we have to do is very clear.
220

220

00:09:03.840  -->  00:09:07.090
There is no longer the epochs, so of course we need to
221

221

00:09:07.090  -->  00:09:09.880
remove this, so here we go.
222

222

00:09:09.880  -->  00:09:13.090
Here we remove the space because this was to put a space
223

223

00:09:13.090  -->  00:09:15.560
between the number of epoch and the loss,
224

224

00:09:15.560  -->  00:09:17.890
but here that's fine, okay.
225

225

00:09:17.890  -->  00:09:19.990
So now we have this string loss
226

226

00:09:19.990  -->  00:09:21.730
and then we'll get the result,
227

227

00:09:21.730  -->  00:09:23.250
which is the loss of the test set.
228

228

00:09:23.250  -->  00:09:27.610
So of course we need to replace train here by test
229

229

00:09:27.610  -->  00:09:31.020
so that we get test loss that we divide by s
230

230

00:09:31.020  -->  00:09:34.535
to get the average test loss over all the users
231

231

00:09:34.535  -->  00:09:37.403
that gave at least one non-zero rating.
232

232

00:09:37.403  -->  00:09:38.430
So here we go.
233

233

00:09:38.430  -->  00:09:40.550
I think the code is done.
234

234

00:09:40.550  -->  00:09:43.130
Let's check that there is no error.
235

235

00:09:43.130  -->  00:09:44.970
No, everything seems to be correct.
236

236

00:09:44.970  -->  00:09:49.090
Let's maybe specify that it's the test loss
237

237

00:09:49.090  -->  00:09:50.610
to make it even more clear.
238

238

00:09:50.610  -->  00:09:54.760
And now what we're gonna do is select all this section
239

239

00:09:54.760  -->  00:09:58.180
and we're about to know if the challenge is successful,
240

240

00:09:58.180  -->  00:10:01.160
that is if we manage to get a test loss that is
241

241

00:10:01.160  -->  00:10:02.990
at least below one star.
242

242

00:10:02.990  -->  00:10:05.580
If we manage to do this, that means that even for
243

243

00:10:05.580  -->  00:10:09.210
new observations, observations that happen in the future,
244

244

00:10:09.210  -->  00:10:12.240
that is movies that a user hasn't watched yet but will watch
245

245

00:10:12.240  -->  00:10:14.660
in the future and provide rating.
246

246

00:10:14.660  -->  00:10:17.810
Well, we're about to know if, on average, our model is
247

247

00:10:17.810  -->  00:10:20.490
going to predict a rating that will be different from
248

248

00:10:20.490  -->  00:10:23.270
the real rating by less than one star.
249

249

00:10:23.270  -->  00:10:25.270
If we manage to do this, that means that
250

250

00:10:25.270  -->  00:10:27.420
our recommended system will be pretty powerful
251

251

00:10:27.420  -->  00:10:29.270
because it can predict for new movies
252

252

00:10:29.270  -->  00:10:31.730
if basically you are going to like it or not.
253

253

00:10:31.730  -->  00:10:34.060
So there we go, we're about to find out.
254

254

00:10:34.060  -->  00:10:35.600
The test loss is
255

255

00:10:37.083  -->  00:10:40.010
0.95, Bravo, perfect.
256

256

00:10:40.010  -->  00:10:42.740
We built a robust recommended system.
257

257

00:10:42.740  -->  00:10:46.870
The test loss is 0.95 stars, that is less than one star.
258

258

00:10:46.870  -->  00:10:49.880
So for example if you're applying this recommended system
259

259

00:10:49.880  -->  00:10:51.740
for the movie you're gonna watch tonight,
260

260

00:10:51.740  -->  00:10:53.660
and let's say that after watching the movie
261

261

00:10:53.660  -->  00:10:55.730
you give the rating four stars,
262

262

00:10:55.730  -->  00:10:57.710
then this recommended system would predict that
263

263

00:10:57.710  -->  00:11:01.330
you would give between three and five stars to this movie.
264

264

00:11:01.330  -->  00:11:03.900
So in other words, it predict that you're likely
265

265

00:11:03.900  -->  00:11:05.400
to like your movie.
266

266

00:11:05.400  -->  00:11:07.440
Now it's time for the homework of this section
267

267

00:11:07.440  -->  00:11:10.250
where the goal is to improve the model we've made here,
268

268

00:11:10.250  -->  00:11:12.070
and to do that, you will learn how to manipulate
269

269

00:11:12.070  -->  00:11:15.200
classes in object in Python, which is very important
270

270

00:11:15.200  -->  00:11:17.380
and good of you to know how to master.
271

271

00:11:17.380  -->  00:11:19.400
So good luck with that, and I hope you'll get
272

272

00:11:19.400  -->  00:11:22.090
even better results than this one.
273

273

00:11:22.090  -->  00:11:24.070
So I'll see you back with an even better model,
274

274

00:11:24.070  -->  00:11:25.883
and until then, enjoy deep learning.
