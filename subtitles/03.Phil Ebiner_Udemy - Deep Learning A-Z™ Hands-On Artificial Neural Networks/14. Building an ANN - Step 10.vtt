WEBVTT
1
1

00:00:00.130  -->  00:00:02.870
<v Teacher>Hello and welcome to this Python tutorial.</v>
2

2

00:00:02.870  -->  00:00:05.270
So, we just trained our artificial neural network
3

3

00:00:05.270  -->  00:00:08.280
on the training set, and now time to make the predictions
4

4

00:00:08.280  -->  00:00:09.600
on the test set.
5

5

00:00:09.600  -->  00:00:13.000
So, the good thing is that we have everything ready here,
6

6

00:00:13.000  -->  00:00:14.930
we actually don't need to change anything
7

7

00:00:14.930  -->  00:00:15.810
to make the predictions,
8

8

00:00:15.810  -->  00:00:19.100
because even if we made this classifier object with Keras
9

9

00:00:19.100  -->  00:00:22.370
and scikit-learn, well there is the same predict method
10

10

00:00:22.370  -->  00:00:24.460
to make the predictions on the test set,
11

11

00:00:24.460  -->  00:00:26.940
so we can directly select this line
12

12

00:00:26.940  -->  00:00:31.900
and execute to get the predicted probabilities.
13

13

00:00:31.900  -->  00:00:33.350
Great, so let's have a look.
14

14

00:00:33.350  -->  00:00:37.110
Y_pred is here, let's double-click on it, here we go.
15

15

00:00:37.110  -->  00:00:38.850
And that's all the probabilities
16

16

00:00:38.850  -->  00:00:42.270
that the 2,000 customers of the test set leave the bank.
17

17

00:00:42.270  -->  00:00:45.210
So, for example if we have a look at the first probability,
18

18

00:00:45.210  -->  00:00:48.600
20%, well that means that this first customer
19

19

00:00:48.600  -->  00:00:51.250
of the test set, indexed by zero here,
20

20

00:00:51.250  -->  00:00:53.770
has a 20% chance to leave the bank.
21

21

00:00:53.770  -->  00:00:56.550
So, making these predictions on the test set
22

22

00:00:56.550  -->  00:00:59.110
will be interesting for us to evaluate the performance
23

23

00:00:59.110  -->  00:01:01.310
of the model on new observations,
24

24

00:01:01.310  -->  00:01:03.160
because the accuracy we obtained
25

25

00:01:03.160  -->  00:01:04.390
in the previous tutorial,
26

26

00:01:04.390  -->  00:01:06.510
with the accuracy on the training set.
27

27

00:01:06.510  -->  00:01:08.210
But right now we're making some predictions
28

28

00:01:08.210  -->  00:01:10.640
on new observations, and so it's very interesting
29

29

00:01:10.640  -->  00:01:13.270
to see if this accuracy is going to be as good
30

30

00:01:13.270  -->  00:01:15.690
as the one obtained on the training set.
31

31

00:01:15.690  -->  00:01:18.220
And we'll get this accuracy on new observations
32

32

00:01:18.220  -->  00:01:19.760
thanks to the confusion matrix
33

33

00:01:19.760  -->  00:01:21.890
that we'll look at afterwards.
34

34

00:01:21.890  -->  00:01:24.810
And then, if we get a good accuracy on the test set
35

35

00:01:24.810  -->  00:01:28.000
that is close to 86%, the one that we obtained
36

36

00:01:28.000  -->  00:01:31.140
on the training set, well that would validate the model.
37

37

00:01:31.140  -->  00:01:32.990
And so next, what's very interesting to do
38

38

00:01:32.990  -->  00:01:34.990
for the bank is to use this model
39

39

00:01:34.990  -->  00:01:37.580
that we just validated thanks to the test set,
40

40

00:01:37.580  -->  00:01:39.810
on the customers of the bank.
41

41

00:01:39.810  -->  00:01:41.900
The bank will then be able to apply the model
42

42

00:01:41.900  -->  00:01:43.730
on all the customers of the bank,
43

43

00:01:43.730  -->  00:01:46.820
and by ranking the probabilities from the highest
44

44

00:01:46.820  -->  00:01:50.180
to the lowest, it gets a ranking of the customers
45

45

00:01:50.180  -->  00:01:52.040
most likely to leave the bank.
46

46

00:01:52.040  -->  00:01:53.790
So then, for example, the bank can have a look
47

47

00:01:53.790  -->  00:01:56.870
at the 10% highest probabilities of their customers
48

48

00:01:56.870  -->  00:01:59.620
to leave the bank and so, make it a segment,
49

49

00:01:59.620  -->  00:02:01.150
and then analyze in more depth
50

50

00:02:01.150  -->  00:02:02.950
thanks to data-mining techniques,
51

51

00:02:02.950  -->  00:02:05.580
to understand why the customers of this segment
52

52

00:02:05.580  -->  00:02:07.650
are the most likely to leave the bank.
53

53

00:02:07.650  -->  00:02:10.053
And so, overall, this artificial neural network
54

54

00:02:10.053  -->  00:02:13.580
that we made creates a lot of added value for the bank,
55

55

00:02:13.580  -->  00:02:16.170
because by targeting these customers most likely
56

56

00:02:16.170  -->  00:02:18.230
to leave the bank, then the bank itself
57

57

00:02:18.230  -->  00:02:20.300
can take some measures to prevent
58

58

00:02:20.300  -->  00:02:22.140
these customers from leaving.
59

59

00:02:22.140  -->  00:02:26.130
So now, let's hope our model is validated on the test set,
60

60

00:02:26.130  -->  00:02:27.960
and so that's what we'll see right now,
61

61

00:02:27.960  -->  00:02:30.080
thanks to the confusion matrix.
62

62

00:02:30.080  -->  00:02:32.350
All right, so I'm going to press OK here,
63

63

00:02:32.350  -->  00:02:34.280
and so let's have a look at the results
64

64

00:02:34.280  -->  00:02:35.740
of the confusion matrix.
65

65

00:02:35.740  -->  00:02:37.280
However, before we do this,
66

66

00:02:37.280  -->  00:02:39.080
we must be careful with something.
67

67

00:02:39.080  -->  00:02:42.450
This predict method here returns the probabilities
68

68

00:02:42.450  -->  00:02:44.150
that the customers leave the bank,
69

69

00:02:44.150  -->  00:02:46.430
and in order to use this confusion matrix,
70

70

00:02:46.430  -->  00:02:47.790
we don't need the probabilities,
71

71

00:02:47.790  -->  00:02:49.860
but we need the predicted results
72

72

00:02:49.860  -->  00:02:51.990
in the form "true or false".
73

73

00:02:51.990  -->  00:02:54.030
So we just need to do a little something here
74

74

00:02:54.030  -->  00:02:58.120
to convert these probabilities into the predicted results
75

75

00:02:58.120  -->  00:03:01.330
in the form "true or false", and to do this we need
76

76

00:03:01.330  -->  00:03:03.670
to choose a threshold to decide
77

77

00:03:03.670  -->  00:03:05.570
when the predicted results is one,
78

78

00:03:05.570  -->  00:03:07.730
and when the predicted results is zero.
79

79

00:03:07.730  -->  00:03:10.090
So we predict one over the threshold,
80

80

00:03:10.090  -->  00:03:12.560
and we predict zero below the threshold,
81

81

00:03:12.560  -->  00:03:17.200
and of course a natural threshold to take is 0.5, 50%.
82

82

00:03:17.200  -->  00:03:19.730
In medicine we can take higher thresholds
83

83

00:03:19.730  -->  00:03:22.530
if what we have to predict is sensitive information,
84

84

00:03:22.530  -->  00:03:24.270
like for example if we have to predict
85

85

00:03:24.270  -->  00:03:27.240
if a tumor is malignant, but here we're just predicting
86

86

00:03:27.240  -->  00:03:30.170
if a customer is leaving or staying in the bank,
87

87

00:03:30.170  -->  00:03:32.280
so a 50% threshold is fine,
88

88

00:03:32.280  -->  00:03:34.520
and that's the threshold we'll choose here.
89

89

00:03:34.520  -->  00:03:37.380
Alright, so the trick that we're going to use now
90

90

00:03:37.380  -->  00:03:42.380
is to update our vector y_pred of predicted probabilities,
91

91

00:03:43.110  -->  00:03:46.010
so equals, and then this trick is to
92

92

00:03:46.010  -->  00:03:47.740
add some parentheses here,
93

93

00:03:47.740  -->  00:03:50.827
and inside the parentheses we put "y_pred &gt; 0.5".
94

94

00:03:52.003  -->  00:03:55.360
and inside the parentheses we put "y_pred &gt; 0.5".
95

95

00:03:55.360  -->  00:03:58.257
And that syntax here is equivalent as
96

96

00:03:58.257  -->  00:04:02.447
"if y_pred is larger than 0.5, then it returns true,
97

97

00:04:02.447  -->  00:04:05.117
"and if y_pred is not larger than 0.5,
98

98

00:04:05.117  -->  00:04:07.220
"then it will return false."
99

99

00:04:07.220  -->  00:04:08.410
So let's check it out,
100

100

00:04:08.410  -->  00:04:11.690
I'm going to select this line and execute.
101

101

00:04:11.690  -->  00:04:13.760
Alright, so now y_pred is updated
102

102

00:04:13.760  -->  00:04:15.750
and if we have a look at y_pred now,
103

103

00:04:15.750  -->  00:04:19.180
we see that we get the results in the form "false or true",
104

104

00:04:19.180  -->  00:04:21.630
so the five first customers of the test set
105

105

00:04:21.630  -->  00:04:24.040
don't leave the bank, according to the model,
106

106

00:04:24.040  -->  00:04:27.250
and customer number six in the test set leaves the bank,
107

107

00:04:27.250  -->  00:04:28.850
according to the model.
108

108

00:04:28.850  -->  00:04:31.290
Great, and so now, thanks to this form,
109

109

00:04:31.290  -->  00:04:34.860
we can execute this code to get the confusion matrix.
110

110

00:04:34.860  -->  00:04:35.930
So let's have a look,
111

111

00:04:35.930  -->  00:04:39.650
I'm going to select these two lines here and execute.
112

112

00:04:39.650  -->  00:04:42.550
Here we go, executed properly, and so now,
113

113

00:04:42.550  -->  00:04:45.070
let's have a look at the results to see the number
114

114

00:04:45.070  -->  00:04:46.490
of correct predictions, and the number
115

115

00:04:46.490  -->  00:04:49.170
of incorrect predictions, and then eventually,
116

116

00:04:49.170  -->  00:04:51.400
the accuracy on new observations.
117

117

00:04:51.400  -->  00:04:52.700
So let's see.
118

118

00:04:52.700  -->  00:04:55.170
So out of 2,000 new observations,
119

119

00:04:55.170  -->  00:04:57.410
we get 1,550,
120

120

00:04:57.410  -->  00:05:00.800
plus 175 correct predictions,
121

121

00:05:00.800  -->  00:05:04.910
and 230 plus 45 incorrect preditions,
122

122

00:05:04.910  -->  00:05:06.420
so that looks really good.
123

123

00:05:06.420  -->  00:05:09.200
We will confirm that right now thanks to the accuracy,
124

124

00:05:09.200  -->  00:05:12.750
so let's press OK here, and let's compute the accuracy,
125

125

00:05:12.750  -->  00:05:14.730
We'll compute it here in the console.
126

126

00:05:14.730  -->  00:05:17.310
So, the accuracy is the number of correct predictions
127

127

00:05:17.310  -->  00:05:19.790
divided by the total number of predictions,
128

128

00:05:19.790  -->  00:05:22.670
so let's see, we're going to put in parentheses,
129

129

00:05:22.670  -->  00:05:24.730
first the number of correct predictions,
130

130

00:05:24.730  -->  00:05:29.730
which was 1,550 plus 175 correct predictions,
131

131

00:05:32.210  -->  00:05:34.410
and then we divide this number by the total number
132

132

00:05:34.410  -->  00:05:37.820
of predictions in the test set, that is 2000.
133

133

00:05:37.820  -->  00:05:39.050
And what do we get?
134

134

00:05:39.050  -->  00:05:44.050
We get an accuracy of 86%, awesome.
135

135

00:05:45.670  -->  00:05:48.120
On new observations, that is observations
136

136

00:05:48.120  -->  00:05:51.400
on which we didn't train our artificial nerual network,
137

137

00:05:51.400  -->  00:05:55.290
we get an accuracy of 86%, and besides,
138

138

00:05:55.290  -->  00:05:57.940
we get this prediction without being an artist.
139

139

00:05:57.940  -->  00:06:01.150
By that, I mean that we didn't do any parameter tuning,
140

140

00:06:01.150  -->  00:06:04.430
so maybe we can still get an even better accuracy,
141

141

00:06:04.430  -->  00:06:07.580
but 86% is really good, since it is the same,
142

142

00:06:07.580  -->  00:06:10.370
high accuracy that we obtained on the training set,
143

143

00:06:10.370  -->  00:06:12.750
but obtained here on the test set.
144

144

00:06:12.750  -->  00:06:15.230
So, eventually, we can validate our model,
145

145

00:06:15.230  -->  00:06:17.480
and now the bank can use it to make a ranking
146

146

00:06:17.480  -->  00:06:20.110
of their customers, ranked by their probability
147

147

00:06:20.110  -->  00:06:21.850
to leave the bank, from the customer
148

148

00:06:21.850  -->  00:06:24.350
that has the highest probability to leave the bank,
149

149

00:06:24.350  -->  00:06:26.830
down to the customer that has the lowest probability
150

150

00:06:26.830  -->  00:06:27.900
to leave the bank.
151

151

00:06:27.900  -->  00:06:29.920
So great, mission accomplished,
152

152

00:06:29.920  -->  00:06:32.080
and congratulations for having built
153

153

00:06:32.080  -->  00:06:34.830
your first artificial neural network.
154

154

00:06:34.830  -->  00:06:36.420
That's the end of this section,
155

155

00:06:36.420  -->  00:06:38.730
next section will be about evaluating,
156

156

00:06:38.730  -->  00:06:41.660
improving and tuning the artificial neural network.
157

157

00:06:41.660  -->  00:06:43.150
I'll just give you a little homework
158

158

00:06:43.150  -->  00:06:45.030
in the next tutorial that will teach you how
159

159

00:06:45.030  -->  00:06:46.690
to make a single prediction,
160

160

00:06:46.690  -->  00:06:50.120
and the solution, and then we'll move onto the next section.
161

161

00:06:50.120  -->  00:06:51.840
So, I look forward to seeing you there,
162

162

00:06:51.840  -->  00:06:53.903
and until then, enjoy deep learning!
