1
1

00:00:00,260  -->  00:00:02,770
<v Instructor>Hello and welcome to this Python tutorial.</v>
2

2

00:00:02,770  -->  00:00:05,730
All right, so I hope you enjoyed that homework.
3

3

00:00:05,730  -->  00:00:07,340
No worries if you couldn't make it work.
4

4

00:00:07,340  -->  00:00:09,420
It was actually quite a big challenge
5

5

00:00:09,420  -->  00:00:12,638
because that involved research, doing some research online
6

6

00:00:12,638  -->  00:00:17,130
on what tools to use to make single predictions with CNNs,
7

7

00:00:17,130  -->  00:00:19,180
but anyway, even if you didn't succeed,
8

8

00:00:19,180  -->  00:00:22,420
while trying to do the homework is excellent practice
9

9

00:00:22,420  -->  00:00:24,200
because that's a big part of the job
10

10

00:00:24,200  -->  00:00:26,240
of a deep learning scientist.
11

11

00:00:26,240  -->  00:00:29,290
The deep learning scientist spends a lot of his time
12

12

00:00:29,290  -->  00:00:32,100
doing research on how to implement models,
13

13

00:00:32,100  -->  00:00:34,270
or even sometimes on how to use them.
14

14

00:00:34,270  -->  00:00:38,240
So, what you did is definitely real life deep learning.
15

15

00:00:38,240  -->  00:00:40,120
All right, so as you can see right now in my model
16

16

00:00:40,120  -->  00:00:42,820
of this training and the training is about to end,
17

17

00:00:42,820  -->  00:00:46,300
so we will be ready soon to make that single prediction.
18

18

00:00:46,300  -->  00:00:47,800
We are at the last epoch.
19

19

00:00:47,800  -->  00:00:51,820
We reached an accuracy of 86% on the training set,
20

20

00:00:51,820  -->  00:00:54,100
and let's see the accuracy on the test set
21

21

00:00:54,100  -->  00:00:55,840
that is on the validation set.
22

22

00:00:55,840  -->  00:00:56,673
Here we go.
23

23

00:00:56,673  -->  00:00:58,252
We are about to get it.
24

24

00:00:58,252  -->  00:01:03,252
And we got 81%, so quite close to what we got before.
25

25

00:01:05,880  -->  00:01:06,713
Perfect.
26

26

00:01:06,713  -->  00:01:09,240
We are now ready to make that single prediction.
27

27

00:01:09,240  -->  00:01:11,728
So, as explained in the homework documentation,
28

28

00:01:11,728  -->  00:01:15,257
I added a new sub-folder in the data set folder
29

29

00:01:15,257  -->  00:01:17,730
that is called Single Prediction,
30

30

00:01:17,730  -->  00:01:20,972
and basically, this new folder contains two images
31

31

00:01:20,972  -->  00:01:24,150
that are called Cat or Dog One and Cat or Dog Two,
32

32

00:01:24,150  -->  00:01:26,520
and one of these images contains a dog
33

33

00:01:26,520  -->  00:01:28,120
and the other contains a cat.
34

34

00:01:28,120  -->  00:01:31,640
We can actually have a look at them to see what they are.
35

35

00:01:31,640  -->  00:01:34,890
So, the first image, Cat or Dog One, is obviously a dog,
36

36

00:01:34,890  -->  00:01:39,800
a beautiful dog, and the second image is a very cute cat.
37

37

00:01:39,800  -->  00:01:44,800
So now, the challenge is to make our CNN model
38

38

00:01:44,960  -->  00:01:47,540
that we just built to predict correctly
39

39

00:01:47,540  -->  00:01:51,220
if each of these images contains a cat or a dog.
40

40

00:01:51,220  -->  00:01:54,490
So, let's do it and we're gonna start with the first image,
41

41

00:01:54,490  -->  00:01:58,410
Cat or Dog One, which remember contains a dog.
42

42

00:01:58,410  -->  00:02:00,800
So, what do we need to start with?
43

43

00:02:00,800  -->  00:02:03,060
First step is to import a NumPy
44

44

00:02:03,060  -->  00:02:05,590
because we will actually use a function by NumPy
45

45

00:02:05,590  -->  00:02:08,840
to pre-process the image that we are going to load,
46

46

00:02:08,840  -->  00:02:11,410
so that it can be accepted by the predict method
47

47

00:02:11,410  -->  00:02:14,500
that we are gonna use to make our single prediction.
48

48

00:02:14,500  -->  00:02:15,333
So, let's do it.
49

49

00:02:15,333  -->  00:02:16,520
Let's import NumPy
50

50

00:02:18,092  -->  00:02:22,500
and let's give the same shortcut as usual, NP,
51

51

00:02:22,500  -->  00:02:23,333
and here we go.
52

52

00:02:24,620  -->  00:02:25,453
Let's do it.
53

53

00:02:25,453  -->  00:02:27,070
We're gonna do it step by step
54

54

00:02:27,070  -->  00:02:30,100
and execute each line one by one.
55

55

00:02:30,100  -->  00:02:32,470
All right, so NumPy is well imported.
56

56

00:02:32,470  -->  00:02:34,780
Now, we need to import a second module,
57

57

00:02:34,780  -->  00:02:38,540
which is the image module from Keras, and more precisely,
58

58

00:02:38,540  -->  00:02:41,150
from the pre-processing module from Keras.
59

59

00:02:41,150  -->  00:02:43,300
So, let's import this image module.
60

60

00:02:43,300  -->  00:02:46,250
Import, then image.
61

61

00:02:46,250  -->  00:02:48,020
And we import this image module
62

62

00:02:48,020  -->  00:02:52,480
from Keras dot pre-processing.
63

63

00:02:53,770  -->  00:02:54,603
Here we go.
64

64

00:02:54,603  -->  00:02:58,400
We are ready to import image, and that's done.
65

65

00:02:58,400  -->  00:02:59,233
Perfect.
66

66

00:02:59,233  -->  00:03:00,790
Now, third step.
67

67

00:03:00,790  -->  00:03:03,620
The third step is to load our image
68

68

00:03:03,620  -->  00:03:06,400
on which we wanna make our prediction.
69

69

00:03:06,400  -->  00:03:10,370
So to do this, we're gonna use the load image function
70

70

00:03:10,370  -->  00:03:12,910
by Keras, which belongs to the image module.
71

71

00:03:12,910  -->  00:03:15,099
That's why we had to import image here.
72

72

00:03:15,099  -->  00:03:17,580
And so, we're gonna create a new variable
73

73

00:03:17,580  -->  00:03:20,500
that I'm gonna call Test Image,
74

74

00:03:20,500  -->  00:03:23,720
because you know we're testing the model on new predictions,
75

75

00:03:23,720  -->  00:03:28,043
and this test image will contain the Cat or Dog One image.
76

76

00:03:28,043  -->  00:03:31,090
That's what we're about to load, so let's load it.
77

77

00:03:31,090  -->  00:03:34,620
To load it, we use the image module,
78

78

00:03:34,620  -->  00:03:37,220
and then dot to get the right function,
79

79

00:03:37,220  -->  00:03:42,090
and this right function is called load underscore I M G,
80

80

00:03:42,090  -->  00:03:44,560
then parenthesis, and inside the parenthesis
81

81

00:03:44,560  -->  00:03:46,780
we just need to import two arguments.
82

82

00:03:46,780  -->  00:03:50,010
The first argument is the path that leads to this image,
83

83

00:03:50,010  -->  00:03:52,380
Cat or Dog One, but we have to include the image
84

84

00:03:52,380  -->  00:03:55,070
because, basically, we are loading the image;
85

85

00:03:55,070  -->  00:03:57,280
and the second argument is the target size
86

86

00:03:57,280  -->  00:03:59,400
that must be the exact same dimensions
87

87

00:03:59,400  -->  00:04:01,150
that were used for the training.
88

88

00:04:01,150  -->  00:04:05,060
So, here we used 64 times 64 dimensions
89

89

00:04:05,060  -->  00:04:06,670
for the training set images,
90

90

00:04:06,670  -->  00:04:09,100
and therefore, that's what the predict function will expect,
91

91

00:04:09,100  -->  00:04:11,070
even for new images.
92

92

00:04:11,070  -->  00:04:13,870
Okay so first, let's import the path.
93

93

00:04:13,870  -->  00:04:17,320
So, the path is specified in quotes.
94

94

00:04:17,320  -->  00:04:18,586
And so basically, that's the same.
95

95

00:04:18,586  -->  00:04:22,050
Our working directory starts at the data set folder,
96

96

00:04:22,050  -->  00:04:26,540
so we can start the path with data set, then slash,
97

97

00:04:26,540  -->  00:04:28,630
then we need to go to the single prediction folder
98

98

00:04:28,630  -->  00:04:31,914
because this is this folder that contains the Cat
99

99

00:04:31,914  -->  00:04:36,260
or Dog One image, so single underscore prediction
100

100

00:04:36,260  -->  00:04:38,660
to access this folder, then slash again
101

101

00:04:38,660  -->  00:04:40,920
because we need to input the image
102

102

00:04:40,920  -->  00:04:42,720
because we are loading it.
103

103

00:04:42,720  -->  00:04:45,490
So, the name of the image is Cat underscore
104

104

00:04:46,331  -->  00:04:48,810
or underscore Dog underscore One.
105

105

00:04:48,810  -->  00:04:49,680
Here we go.
106

106

00:04:49,680  -->  00:04:51,510
And let's not forget the extension.
107

107

00:04:51,510  -->  00:04:54,563
We have to include it, which is JPG.
108

108

00:04:55,580  -->  00:04:58,050
All right, so that's for the first argument,
109

109

00:04:58,050  -->  00:05:01,120
and now the second argument is the target size,
110

110

00:05:01,120  -->  00:05:04,060
and so basically, we need to take the exact same
111

111

00:05:04,060  -->  00:05:06,640
target size that was used for the training set
112

112

00:05:06,640  -->  00:05:08,730
or the test set that's the same,
113

113

00:05:08,730  -->  00:05:11,700
so we can copy it and place it here
114

114

00:05:11,700  -->  00:05:14,420
in our load image function.
115

115

00:05:14,420  -->  00:05:15,253
Here we go.
116

116

00:05:15,253  -->  00:05:19,390
Now, we're ready to load our first image, Cat or Dog One.
117

117

00:05:19,390  -->  00:05:20,660
So, let's do it.
118

118

00:05:20,660  -->  00:05:23,800
I'm going to select this line and execute.
119

119

00:05:23,800  -->  00:05:24,633
Here we go.
120

120

00:05:24,633  -->  00:05:26,500
The test image is well imported.
121

121

00:05:26,500  -->  00:05:28,880
We can check it out in Variable Explorer.
122

122

00:05:28,880  -->  00:05:32,420
Here it is, and so far, the type is an image
123

123

00:05:32,420  -->  00:05:36,710
and it has the dimension 64 by 64, as required.
124

124

00:05:36,710  -->  00:05:37,543
So, good.
125

125

00:05:37,543  -->  00:05:39,300
That's the first required step done,
126

126

00:05:39,300  -->  00:05:40,860
but that's not enough.
127

127

00:05:40,860  -->  00:05:44,410
Now, what we need to do is add a new dimension
128

128

00:05:44,410  -->  00:05:47,019
to this estimate because, remember,
129

129

00:05:47,019  -->  00:05:50,730
the input shape in the input layer of our CNN
130

130

00:05:50,730  -->  00:05:55,150
has three dimensions, 64 by 64 by three,
131

131

00:05:55,150  -->  00:05:58,132
and remember, the three here is because it's a colored image
132

132

00:05:58,132  -->  00:06:00,760
and therefore, now what we have to do
133

133

00:06:00,760  -->  00:06:03,690
is to use another function by image,
134

134

00:06:03,690  -->  00:06:07,240
which is the image to array, and that will allow to create
135

135

00:06:07,240  -->  00:06:11,100
this third dimensional array that will have the same format
136

136

00:06:11,100  -->  00:06:14,370
as the input shape in the input layer of our CNN.
137

137

00:06:14,370  -->  00:06:15,370
So, let's do it.
138

138

00:06:15,370  -->  00:06:18,570
Let's use the image to array function.
139

139

00:06:18,570  -->  00:06:19,900
So, next line of code.
140

140

00:06:19,900  -->  00:06:22,050
And so basically, we're going to modify
141

141

00:06:22,050  -->  00:06:25,150
this test image variable because this will go
142

142

00:06:25,150  -->  00:06:27,860
from being an image of two dimensions
143

143

00:06:27,860  -->  00:06:29,980
to a three dimensional array.
144

144

00:06:29,980  -->  00:06:32,825
So, we'll just take our variable again
145

145

00:06:32,825  -->  00:06:37,825
and modify it by using the image dot I M G underscore
146

146

00:06:39,990  -->  00:06:44,480
two underscore array function, parenthesis,
147

147

00:06:44,480  -->  00:06:47,900
and inside the parenthesis, we just need to input our image
148

148

00:06:47,900  -->  00:06:50,440
that is contained in the test image variable,
149

149

00:06:50,440  -->  00:06:55,110
and therefore, we simply input here test underscore image.
150

150

00:06:55,110  -->  00:06:56,790
All right, now let's check it out.
151

151

00:06:56,790  -->  00:07:00,550
This test image variable is gonna go from being an image
152

152

00:07:00,550  -->  00:07:03,550
of two dimensions, 64 by 64,
153

153

00:07:03,550  -->  00:07:07,730
to an array of three dimensions, as you can see here,
154

154

00:07:07,730  -->  00:07:12,730
64 by 64 by three, so exactly as the input shape
155

155

00:07:13,120  -->  00:07:16,550
that was used for the architecture of our CNN.
156

156

00:07:16,550  -->  00:07:19,380
Perfect, but that's still not enough.
157

157

00:07:19,380  -->  00:07:22,710
Now, what we need to do is add one dimension again
158

158

00:07:22,710  -->  00:07:26,820
to our three dimensional array, and I'm gonna explain why.
159

159

00:07:26,820  -->  00:07:29,720
We are about to use the predict method
160

160

00:07:29,720  -->  00:07:31,450
to make that single prediction,
161

161

00:07:31,450  -->  00:07:33,800
but if we use the predict method directly,
162

162

00:07:33,800  -->  00:07:35,510
well, look what happens.
163

163

00:07:35,510  -->  00:07:36,820
So, to use the predict method,
164

164

00:07:36,820  -->  00:07:39,250
it's exactly the same as for A N S.
165

165

00:07:39,250  -->  00:07:42,364
We take our classifier, then dot and then predict,
166

166

00:07:42,364  -->  00:07:44,826
and inside the predict method we input the sample
167

167

00:07:44,826  -->  00:07:49,120
for which we want to predict the outcome.
168

168

00:07:49,120  -->  00:07:50,800
That is, our test image.
169

169

00:07:50,800  -->  00:07:51,720
So, let's see what happens
170

170

00:07:51,720  -->  00:07:56,100
if I input test underscore image directly.
171

171

00:07:56,100  -->  00:07:57,520
So, I'm going to execute this,
172

172

00:07:57,520  -->  00:07:59,970
but we will get an error saying that we will need
173

173

00:07:59,970  -->  00:08:03,640
four dimensions instead of three dimensions.
174

174

00:08:03,640  -->  00:08:04,900
All right, let's do it.
175

175

00:08:04,900  -->  00:08:05,900
Here we go.
176

176

00:08:05,900  -->  00:08:07,120
And we have an error.
177

177

00:08:07,120  -->  00:08:10,060
Error when checking, expected convolution two D
178

178

00:08:10,060  -->  00:08:12,700
to have four dimensions, but got array
179

179

00:08:12,700  -->  00:08:15,570
with shape 64 by 64 by three.
180

180

00:08:15,570  -->  00:08:19,720
So basically, now what we have to do is add a new dimension
181

181

00:08:19,720  -->  00:08:22,390
to our test image, and to do this we're gonna use
182

182

00:08:22,390  -->  00:08:26,830
the expand dims function that will add this dimension.
183

183

00:08:26,830  -->  00:08:28,490
We're just doing this to give
184

184

00:08:28,490  -->  00:08:30,920
what the predict method expects,
185

185

00:08:30,920  -->  00:08:32,210
and for those of you curious to know
186

186

00:08:32,210  -->  00:08:34,090
what this dimension corresponds to,
187

187

00:08:34,090  -->  00:08:36,040
well, it corresponds to the batch
188

188

00:08:36,040  -->  00:08:39,100
because, in general, the functions of neural networks,
189

189

00:08:39,100  -->  00:08:42,380
like the predict function, cannot accept a single input
190

190

00:08:42,380  -->  00:08:44,660
by itself, like the image we have here.
191

191

00:08:44,660  -->  00:08:47,390
It only accepts inputs in a batch.
192

192

00:08:47,390  -->  00:08:49,750
Even if the batch contains one input,
193

193

00:08:49,750  -->  00:08:51,870
the input must be in the batch,
194

194

00:08:51,870  -->  00:08:54,570
and this new dimension that we are creating right now
195

195

00:08:54,570  -->  00:08:56,610
corresponds to the batch.
196

196

00:08:56,610  -->  00:08:58,590
The batch that will contain the input,
197

197

00:08:58,590  -->  00:09:01,270
whether there is one input or several inputs.
198

198

00:09:01,270  -->  00:09:04,640
So here, we will have one batch of one input,
199

199

00:09:04,640  -->  00:09:07,090
but then in general, we can have several batches
200

200

00:09:07,090  -->  00:09:08,950
of several inputs, and we can apply
201

201

00:09:08,950  -->  00:09:10,740
the predict method on that.
202

202

00:09:10,740  -->  00:09:12,870
So for example, if for this new dimension
203

203

00:09:12,870  -->  00:09:15,360
we had two elements, that means that we would have
204

204

00:09:15,360  -->  00:09:19,080
two batches containing single or several inputs.
205

205

00:09:19,080  -->  00:09:19,913
So, let's do it.
206

206

00:09:19,913  -->  00:09:23,180
We need to modify our variable again,
207

207

00:09:23,180  -->  00:09:25,830
so test image again, equals,
208

208

00:09:25,830  -->  00:09:28,230
and now, we're gonna use the expand dims function,
209

209

00:09:28,230  -->  00:09:31,550
but this expand dims functions is not taken from image,
210

210

00:09:31,550  -->  00:09:35,390
the image module by Keras, it is taken from NumPy.
211

211

00:09:35,390  -->  00:09:39,050
So here, instead of using image, we're gonna use NP,
212

212

00:09:39,050  -->  00:09:40,740
which is the shortcut for NumPy,
213

213

00:09:40,740  -->  00:09:45,730
and we're gonna use the expand underscore dims parenthesis,
214

214

00:09:45,730  -->  00:09:47,470
and inside this expand dims function,
215

215

00:09:47,470  -->  00:09:49,040
we need to input two arguments.
216

216

00:09:49,040  -->  00:09:52,070
The first argument is, of course, our test image
217

217

00:09:52,070  -->  00:09:54,430
because that's the test image that we want to expand,
218

218

00:09:54,430  -->  00:09:56,420
that is add a new dimension,
219

219

00:09:56,420  -->  00:10:00,900
and the second argument is axis, and axis is to specify
220

220

00:10:00,900  -->  00:10:03,223
the position of the index of the dimension
221

221

00:10:03,223  -->  00:10:04,770
that we are adding.
222

222

00:10:04,770  -->  00:10:07,759
So, we need to add this dimension in the first position
223

223

00:10:07,759  -->  00:10:10,850
because, again, that's what the predict method expects,
224

224

00:10:10,850  -->  00:10:13,610
and therefore, we will specify axis equals zero
225

225

00:10:13,610  -->  00:10:16,160
because axis equals zero means that that index
226

226

00:10:16,160  -->  00:10:17,840
of this new dimension we are adding
227

227

00:10:17,840  -->  00:10:21,110
is gonna have the first index, that is index zero.
228

228

00:10:21,110  -->  00:10:21,943
So, let's do it.
229

229

00:10:21,943  -->  00:10:26,000
Let's input the first argument, test underscore image.
230

230

00:10:26,000  -->  00:10:27,470
That's the first argument.
231

231

00:10:27,470  -->  00:10:32,060
And now, the second argument, axis equals zero.
232

232

00:10:32,060  -->  00:10:35,750
All right, and now my test image has three dimensions,
233

233

00:10:35,750  -->  00:10:40,750
64 by 64 by three, and now when I'm going to execute this,
234

234

00:10:41,420  -->  00:10:46,060
we will get four dimensions, one, 64, 64, and three.
235

235

00:10:46,060  -->  00:10:46,893
Let's check it out.
236

236

00:10:46,893  -->  00:10:48,310
I'm going to execute.
237

237

00:10:48,310  -->  00:10:52,880
Here we go, four dimensions, one, 64, 64, and three.
238

238

00:10:52,880  -->  00:10:56,730
And now, we have exactly what the predict method expects,
239

239

00:10:56,730  -->  00:11:00,678
and so, if now I select this and execute,
240

240

00:11:00,678  -->  00:11:04,040
indeed we get our final prediction,
241

241

00:11:04,040  -->  00:11:06,150
and we can see it as one, but don't worry,
242

242

00:11:06,150  -->  00:11:07,790
that is not our final word.
243

243

00:11:07,790  -->  00:11:10,490
We will see what one corresponds to.
244

244

00:11:10,490  -->  00:11:14,100
So now, what I'm gonna do is put the result
245

245

00:11:14,100  -->  00:11:16,280
of that single prediction in a new variable
246

246

00:11:16,280  -->  00:11:18,610
that I'm gonna call result.
247

247

00:11:18,610  -->  00:11:20,309
So, equals.
248

248

00:11:20,309  -->  00:11:22,740
Result equals classifier dot predict test image,
249

249

00:11:22,740  -->  00:11:27,090
and so now, if I execute this, well, this result here,
250

250

00:11:27,090  -->  00:11:29,950
array one, will go into the variable result,
251

251

00:11:29,950  -->  00:11:32,060
so let's execute this.
252

252

00:11:32,060  -->  00:11:35,430
All right, now as you can see, if I click on result,
253

253

00:11:35,430  -->  00:11:38,590
well, I have my new single prediction, one.
254

254

00:11:38,590  -->  00:11:40,920
But now, does one correspond to cat
255

255

00:11:40,920  -->  00:11:42,550
or one correspond to dog?
256

256

00:11:42,550  -->  00:11:43,520
Let's check it out.
257

257

00:11:43,520  -->  00:11:47,760
I'm going to press okay, and to get that information
258

258

00:11:47,760  -->  00:11:50,380
whether one corresponds to cat or dog,
259

259

00:11:50,380  -->  00:11:52,010
well we need to use an attribute
260

260

00:11:52,010  -->  00:11:54,090
that is called class indices
261

261

00:11:54,090  -->  00:11:56,130
and that will tell us exactly the mapping
262

262

00:11:56,130  -->  00:11:58,450
between the strings Cat and Dogs
263

263

00:11:58,450  -->  00:12:01,720
and their associated numeric values, zero and one.
264

264

00:12:01,720  -->  00:12:02,840
So, let's get this.
265

265

00:12:02,840  -->  00:12:04,693
We need to take our training set,
266

266

00:12:05,860  -->  00:12:09,240
then we add dot, and then we add this attribute,
267

267

00:12:09,240  -->  00:12:13,450
class underscore indices,
268

268

00:12:13,450  -->  00:12:18,350
and now if we select this and execute, we get the mapping;
269

269

00:12:18,350  -->  00:12:21,950
and so here, we can clearly see that cats correspond to zero
270

270

00:12:21,950  -->  00:12:23,860
and dogs correspond to one.
271

271

00:12:23,860  -->  00:12:28,040
Perfect, so that means that the prediction by our CNN model
272

272

00:12:28,040  -->  00:12:31,762
for this first image, Cat or Dog One, is correct
273

273

00:12:31,762  -->  00:12:34,200
because this image contains a dog
274

274

00:12:34,200  -->  00:12:36,720
and our model predicted a dog;
275

275

00:12:36,720  -->  00:12:39,500
and if you want to make it even more simple for you
276

276

00:12:39,500  -->  00:12:42,820
or for any person that is going to use your model,
277

277

00:12:42,820  -->  00:12:44,200
we can add this.
278

278

00:12:44,200  -->  00:12:47,170
There is this if condition, if result,
279

279

00:12:47,170  -->  00:12:50,360
then we're gonna get the value of one here,
280

280

00:12:50,360  -->  00:12:52,830
but as you can notice, this result is an array
281

281

00:12:52,830  -->  00:12:54,100
of two dimensions.
282

282

00:12:54,100  -->  00:12:56,540
This is the first line and this is the first column,
283

283

00:12:56,540  -->  00:12:58,900
so to get this one here,
284

284

00:12:58,900  -->  00:13:02,140
we need to add a double pair of brackets
285

285

00:13:02,140  -->  00:13:05,800
to get the first line and the first column,
286

286

00:13:05,800  -->  00:13:07,340
and so here, we need to take the first line,
287

287

00:13:07,340  -->  00:13:10,180
which has index zero, so zero,
288

288

00:13:10,180  -->  00:13:12,600
and the first column, which has index zero, as well;
289

289

00:13:12,600  -->  00:13:14,680
and so, we add a zero here.
290

290

00:13:14,680  -->  00:13:16,920
And so, if result zero zero,
291

291

00:13:16,920  -->  00:13:19,290
that is basically the result of the prediction,
292

292

00:13:19,290  -->  00:13:22,900
equals equals one, then column,
293

293

00:13:22,900  -->  00:13:26,060
and then we say, what happens if this condition is verified?
294

294

00:13:26,060  -->  00:13:27,640
So, we're gonna create a new variable
295

295

00:13:27,640  -->  00:13:29,950
that we're gonna call prediction,
296

296

00:13:29,950  -->  00:13:34,620
and that's our ultimate prediction in text, Cat or Dog,
297

297

00:13:34,620  -->  00:13:37,700
and so we're gonna say that if the result is one,
298

298

00:13:37,700  -->  00:13:41,900
then the prediction is going to be the string Dog,
299

299

00:13:41,900  -->  00:13:45,750
and else, column, then the prediction
300

300

00:13:45,750  -->  00:13:49,700
is going to be equal to the string Cat,
301

301

00:13:49,700  -->  00:13:52,240
because if result equals one, then we know it's a dog
302

302

00:13:52,240  -->  00:13:54,250
because one correspond to dog,
303

303

00:13:54,250  -->  00:13:56,610
and else if the result equals zero,
304

304

00:13:56,610  -->  00:13:58,380
then the prediction will be cat
305

305

00:13:58,380  -->  00:14:00,500
because zero corresponds to cat.
306

306

00:14:00,500  -->  00:14:01,333
All right?
307

307

00:14:01,333  -->  00:14:04,360
And now, if I execute this, this new variable prediction
308

308

00:14:04,360  -->  00:14:08,090
will be created and will contain the final result in text.
309

309

00:14:08,090  -->  00:14:09,030
So, let's do it.
310

310

00:14:09,030  -->  00:14:10,010
Execute.
311

311

00:14:10,010  -->  00:14:10,843
Here we go.
312

312

00:14:10,843  -->  00:14:13,400
And the final prediction for the first image
313

313

00:14:13,400  -->  00:14:15,330
is this beautiful dog.
314

314

00:14:15,330  -->  00:14:16,373
Perfect.
315

315

00:14:16,373  -->  00:14:19,560
Okay, and now let's test if it also gives
316

316

00:14:19,560  -->  00:14:21,920
a correct prediction for a cat,
317

317

00:14:21,920  -->  00:14:24,810
that is for the second image, Cat or Dog Two.
318

318

00:14:24,810  -->  00:14:26,780
So, let's remind what it is.
319

319

00:14:26,780  -->  00:14:29,330
That's this beautiful cat, and so now,
320

320

00:14:29,330  -->  00:14:32,210
let's see if your model predicts correctly.
321

321

00:14:32,210  -->  00:14:36,160
So, what we simply need to do is to replace here
322

322

00:14:36,160  -->  00:14:39,200
Cat or Dog One by Cat or Dog Two,
323

323

00:14:39,200  -->  00:14:40,750
and then we don't have anything to do.
324

324

00:14:40,750  -->  00:14:43,250
The code is ready to get the final prediction,
325

325

00:14:43,250  -->  00:14:47,290
and therefore what I'm gonna do is re-select everything
326

326

00:14:47,290  -->  00:14:51,670
and execute to get this new final prediction.
327

327

00:14:51,670  -->  00:14:53,840
And now, let's see if the model predicted right.
328

328

00:14:53,840  -->  00:14:55,830
We're gonna go to Variable Explorer
329

329

00:14:55,830  -->  00:14:57,760
and the prediction is a cat.
330

330

00:14:57,760  -->  00:14:58,928
Perfect!
331

331

00:14:58,928  -->  00:15:01,070
Congratulations to the model.
332

332

00:15:01,070  -->  00:15:04,080
Our model made a correct prediction one more time,
333

333

00:15:04,080  -->  00:15:08,100
and by the way, when we look at the test set
334

334

00:15:08,100  -->  00:15:10,950
validation accuracy, well, remember we obtained
335

335

00:15:10,950  -->  00:15:14,070
between 81 and 83%, so you know our model
336

336

00:15:14,070  -->  00:15:17,210
had 82% chance to make correct predictions,
337

337

00:15:17,210  -->  00:15:19,400
and that's how we got these good results.
338

338

00:15:19,400  -->  00:15:20,920
So, congratulations.
339

339

00:15:20,920  -->  00:15:23,060
If you managed to get these single predictions,
340

340

00:15:23,060  -->  00:15:24,360
you really did a great job,
341

341

00:15:24,360  -->  00:15:27,400
and also congratulations to those of you who tried.
342

342

00:15:27,400  -->  00:15:28,700
Don't worry if you didn't manage
343

343

00:15:28,700  -->  00:15:30,120
to get the final prediction.
344

344

00:15:30,120  -->  00:15:32,420
By trying, you definitely made some progress
345

345

00:15:32,420  -->  00:15:34,500
and also some experience of deep learning
346

346

00:15:34,500  -->  00:15:37,090
because that's exactly how deep learning is.
347

347

00:15:37,090  -->  00:15:39,950
You always have to experiment to make your models work
348

348

00:15:39,950  -->  00:15:41,770
for some specific tasks.
349

349

00:15:41,770  -->  00:15:43,880
So, congratulations in both cases.
350

350

00:15:43,880  -->  00:15:45,690
This is now the end of this section,
351

351

00:15:45,690  -->  00:15:47,430
and now we're going to move on to the next section
352

352

00:15:47,430  -->  00:15:49,390
about evaluating, improving,
353

353

00:15:49,390  -->  00:15:51,870
and tuning convolutional neural networks.
354

354

00:15:51,870  -->  00:15:53,730
Another challenge is waiting for you
355

355

00:15:53,730  -->  00:15:55,530
so that you can practice even more.
356

356

00:15:55,530  -->  00:15:57,180
Another podium will be involved
357

357

00:15:57,180  -->  00:15:58,850
and I can't wait to see your results
358

358

00:15:58,850  -->  00:16:00,690
and the medal you will obtain.
359

359

00:16:00,690  -->  00:16:02,300
So, I'll see you in this next section
360

360

00:16:02,300  -->  00:16:04,133
and until then, enjoy deep learning.
