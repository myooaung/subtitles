1
1

00:00:01,092  -->  00:00:02,789
<v Voiceover>After the Flexbox properties</v>
2

2

00:00:02,789  -->  00:00:04,343
for the flex container,
3

3

00:00:04,343  -->  00:00:05,987
now I wanna show you the properties
4

4

00:00:05,987  -->  00:00:09,239
that we use directly on the flex items.
5

5

00:00:09,239  -->  00:00:13,136
So this is where we left off after the last lecture.
6

6

00:00:13,136  -->  00:00:14,645
Now, let me just put this one here
7

7

00:00:14,645  -->  00:00:17,395
so it aligns item back to center.
8

8

00:00:19,405  -->  00:00:22,108
Because now the first thing that I wanna show you
9

9

00:00:22,108  -->  00:00:24,872
is the align-self property.
10

10

00:00:24,872  -->  00:00:27,296
So you can come here to one of these items,
11

11

00:00:27,296  -->  00:00:29,262
and then use align-self.
12

12

00:00:29,262  -->  00:00:31,411
And remember what align-self does.
13

13

00:00:31,411  -->  00:00:35,022
Well, basically it overrides the align-contents property
14

14

00:00:35,022  -->  00:00:37,632
for one individual item.
15

15

00:00:37,632  -->  00:00:42,311
So right now, the align-items is set to center.
16

16

00:00:42,311  -->  00:00:43,512
And so all these items here
17

17

00:00:43,512  -->  00:00:46,503
are now centered along the cross axis, right?
18

18

00:00:46,503  -->  00:00:48,373
So, from top to bottom.
19

19

00:00:48,373  -->  00:00:50,836
But if you wanna override that for one individual,
20

20

00:00:50,836  -->  00:00:52,884
let's say the number four here,
21

21

00:00:52,884  -->  00:00:54,717
we can say align-self.
22

22

00:00:57,058  -->  00:00:59,162
And put this one, for example, at the end.
23

23

00:00:59,162  -->  00:01:00,926
So, flex-end.
24

24

00:01:00,926  -->  00:01:04,021
Now all the flex items except this one here
25

25

00:01:04,021  -->  00:01:05,776
are aligned to the center,
26

26

00:01:05,776  -->  00:01:07,654
so along the cross axis here
27

27

00:01:07,654  -->  00:01:11,378
except for this one, which we set to flex-end.
28

28

00:01:11,378  -->  00:01:14,393
And we can set it to flex-start, of course.
29

29

00:01:14,393  -->  00:01:16,261
Can also set it to stretch
30

30

00:01:16,261  -->  00:01:18,815
and that one is pretty useful.
31

31

00:01:18,815  -->  00:01:20,750
We're gonna see that one in the course.
32

32

00:01:20,750  -->  00:01:23,732
So now this one is actually the same height as this one
33

33

00:01:23,732  -->  00:01:26,735
because it's stretched in order to fill the entire container
34

34

00:01:26,735  -->  00:01:29,728
which was defined by this element with the number two.
35

35

00:01:29,728  -->  00:01:33,700
Now the number four here has the same height.
36

36

00:01:33,700  -->  00:01:36,827
So let's just put it back to the end here,
37

37

00:01:36,827  -->  00:01:38,548
so flex-end, alright?
38

38

00:01:38,548  -->  00:01:40,630
So that's the first one that I wanna show you
39

39

00:01:40,630  -->  00:01:43,453
and next we can play around with the order.
40

40

00:01:43,453  -->  00:01:47,111
Remember that the initial value of order is zero.
41

41

00:01:47,111  -->  00:01:49,406
So if you wanna put one of these elements
42

42

00:01:49,406  -->  00:01:50,395
here at the beginning,
43

43

00:01:50,395  -->  00:01:52,521
all we need to do is to put the value
44

44

00:01:52,521  -->  00:01:54,467
which is lower than zero.
45

45

00:01:54,467  -->  00:01:56,447
So let me show you how.
46

46

00:01:56,447  -->  00:01:58,947
So, "order: -1"
47

47

00:01:58,947  -->  00:02:02,702
And now it will go here to the start.
48

48

00:02:02,702  -->  00:02:04,248
So, why's that?
49

49

00:02:04,248  -->  00:02:06,140
Well, Flexbox orders all of these elements
50

50

00:02:06,140  -->  00:02:08,705
according to their order number.
51

51

00:02:08,705  -->  00:02:12,898
So this one has zero, zero, zero, and zero.
52

52

00:02:12,898  -->  00:02:14,517
So all of these have zero,
53

53

00:02:14,517  -->  00:02:16,126
but this one has minus one
54

54

00:02:16,126  -->  00:02:19,377
and so this is the one that has the lowest order.
55

55

00:02:19,377  -->  00:02:23,056
Since Flexbox starts ordering from the lowest order number
56

56

00:02:23,056  -->  00:02:26,719
Well, then of course this one here becomes the first.
57

57

00:02:26,719  -->  00:02:29,241
Now, if you wanna change this,
58

58

00:02:29,241  -->  00:02:32,910
and let's put another class here for the third one,
59

59

00:02:32,910  -->  00:02:35,160
so "i3."
60

60

00:02:36,873  -->  00:02:38,988
If you want this one here to be the first one,
61

61

00:02:38,988  -->  00:02:42,059
then we can set this order to minus two, for example.
62

62

00:02:42,059  -->  00:02:43,680
And now this one will be the one
63

63

00:02:43,680  -->  00:02:44,895
with the lowest order.
64

64

00:02:44,895  -->  00:02:48,146
And so it now comes here to the first position.
65

65

00:02:48,146  -->  00:02:50,025
Now we can also do this the other way around.
66

66

00:02:50,025  -->  00:02:52,218
So if we set this one to one,
67

67

00:02:52,218  -->  00:02:54,446
then it's the one with the highest order.
68

68

00:02:54,446  -->  00:02:56,606
And so it moves here to the end.
69

69

00:02:56,606  -->  00:02:58,339
And so now we have minus one,
70

70

00:02:58,339  -->  00:03:02,324
zero, zero, zero, one.
71

71

00:03:02,324  -->  00:03:04,394
And we can use this even further if you wanna.
72

72

00:03:04,394  -->  00:03:06,926
For example here, order two,
73

73

00:03:06,926  -->  00:03:09,843
and now this one would be the last.
74

74

00:03:10,863  -->  00:03:12,405
So that's how we use order.
75

75

00:03:12,405  -->  00:03:13,800
And that's actually pretty useful,
76

76

00:03:13,800  -->  00:03:15,848
once more, for responsive design
77

77

00:03:15,848  -->  00:03:18,132
in order to change position for some elements
78

78

00:03:18,132  -->  00:03:20,329
on a smaller or on a bigger screen
79

79

00:03:20,329  -->  00:03:22,092
depending if we're using a mobile first
80

80

00:03:22,092  -->  00:03:24,309
or a desktop first strategy.
81

81

00:03:24,309  -->  00:03:26,863
So that's order and align-self.
82

82

00:03:26,863  -->  00:03:28,730
Now let's take a look at the last three
83

83

00:03:28,730  -->  00:03:32,656
which are flex-grow, flex-shrink, and flex-basis.
84

84

00:03:32,656  -->  00:03:35,638
So the first one that I wanna show you is flex-grow
85

85

00:03:35,638  -->  00:03:37,257
and remember that flex-grow
86

86

00:03:37,257  -->  00:03:40,625
is the ability of an element to grow.
87

87

00:03:40,625  -->  00:03:43,469
And what we do is to specify an integer.
88

88

00:03:43,469  -->  00:03:46,033
So just a number like we did in the order.
89

89

00:03:46,033  -->  00:03:47,676
The first thing I wanna do
90

90

00:03:47,676  -->  00:03:50,431
is to actually set flex on all the items.
91

91

00:03:50,431  -->  00:03:53,585
And so for that I can use the item class.
92

92

00:03:53,585  -->  00:03:57,457
So, "flex-grow: 1"
93

93

00:03:57,457  -->  00:03:59,560
Take a look what happens now.
94

94

00:03:59,560  -->  00:04:01,394
Alright, so all of them now
95

95

00:04:01,394  -->  00:04:04,623
occupy the entire space that they can.
96

96

00:04:04,623  -->  00:04:07,908
Or, in other words, they growed as much as they can.
97

97

00:04:07,908  -->  00:04:11,551
So they are now occupying all the space they possibly can.
98

98

00:04:11,551  -->  00:04:13,175
And we can see it even better
99

99

00:04:13,175  -->  00:04:16,342
if we move this margin here, actually.
100

100

00:04:17,678  -->  00:04:20,182
Okay, and so now they're actually touching one another
101

101

00:04:20,182  -->  00:04:23,985
because again, they occupy all the space that they can.
102

102

00:04:23,985  -->  00:04:27,146
And that's what flex-grow here does.
103

103

00:04:27,146  -->  00:04:29,817
So it gives items the ability to grow.
104

104

00:04:29,817  -->  00:04:31,689
Now if we set all of them to a higher number
105

105

00:04:31,689  -->  00:04:34,346
like two or three or even 23,
106

106

00:04:34,346  -->  00:04:35,771
it doesn't really matter,
107

107

00:04:35,771  -->  00:04:37,166
because this number only matters
108

108

00:04:37,166  -->  00:04:39,886
in relation to other numbers.
109

109

00:04:39,886  -->  00:04:42,078
So let me actually give you an example of that.
110

110

00:04:42,078  -->  00:04:45,328
So, I'm going to set these back to one.
111

111

00:04:46,568  -->  00:04:49,180
Put this margin here back as well.
112

112

00:04:49,180  -->  00:04:51,676
But now what I'm gonna do with this one here,
113

113

00:04:51,676  -->  00:04:54,433
is to set flex-grow to two.
114

114

00:04:54,433  -->  00:04:56,001
And watch what happens now.
115

115

00:04:56,001  -->  00:04:57,093
You saw that?
116

116

00:04:57,093  -->  00:05:01,313
This element here is now double the size of these ones.
117

117

00:05:01,313  -->  00:05:04,203
That's because two is double of one.
118

118

00:05:04,203  -->  00:05:06,599
So this one has twice the ability to grow
119

119

00:05:06,599  -->  00:05:08,894
than all the other flex items.
120

120

00:05:08,894  -->  00:05:10,683
I can show you that even better
121

121

00:05:10,683  -->  00:05:12,854
by setting this, for example, to three
122

122

00:05:12,854  -->  00:05:15,903
and now it's three times bigger than the others.
123

123

00:05:15,903  -->  00:05:20,707
Flex-grow, again, gives the element an ability to grow.
124

124

00:05:20,707  -->  00:05:23,103
Now, remember that there is also a shorten property
125

125

00:05:23,103  -->  00:05:27,122
which stands for flex-grow, flex-shrink, and flex-basis.
126

126

00:05:27,122  -->  00:05:30,259
So saying flex-grow is actually the same thing
127

127

00:05:30,259  -->  00:05:32,842
as saying "flex: 1"
128

128

00:05:34,822  -->  00:05:37,334
So, a simple trick to expand a flex item
129

129

00:05:37,334  -->  00:05:39,774
to occupy as much width as it can
130

130

00:05:39,774  -->  00:05:44,044
is simply setting its flex property to one.
131

131

00:05:44,044  -->  00:05:46,211
Let me get rid of this now
132

132

00:05:48,494  -->  00:05:49,622
and this one here as well.
133

133

00:05:49,622  -->  00:05:50,961
So let me show you what happens
134

134

00:05:50,961  -->  00:05:53,694
if I just set this on one of them.
135

135

00:05:53,694  -->  00:05:55,607
Let's say this one here, the last one.
136

136

00:05:55,607  -->  00:05:58,107
So, "flex: 1"
137

137

00:05:59,143  -->  00:06:00,811
Alright, and so now this one occupies
138

138

00:06:00,811  -->  00:06:02,240
all the space that it can
139

139

00:06:02,240  -->  00:06:03,973
so all the available white space
140

140

00:06:03,973  -->  00:06:05,975
and then the remaining flex items here
141

141

00:06:05,975  -->  00:06:08,903
they just occupy the rest of the space.
142

142

00:06:08,903  -->  00:06:11,147
So that is flex-grow.
143

143

00:06:11,147  -->  00:06:13,870
Now next up, I wanna show you flex-basis.
144

144

00:06:13,870  -->  00:06:15,715
Let's do it on this one here.
145

145

00:06:15,715  -->  00:06:18,508
And I can actually get rid of this one here.
146

146

00:06:18,508  -->  00:06:20,970
So flex-basis.
147

147

00:06:20,970  -->  00:06:22,815
And now remember that with this one
148

148

00:06:22,815  -->  00:06:25,661
we can set the width of a flex item.
149

149

00:06:25,661  -->  00:06:28,845
Instead of using the width property on a flex item,
150

150

00:06:28,845  -->  00:06:32,040
we usually use flex-basis, right?
151

151

00:06:32,040  -->  00:06:35,139
So let's set it to 20%, for example.
152

152

00:06:35,139  -->  00:06:36,506
And here we go.
153

153

00:06:36,506  -->  00:06:38,509
So it's now 20% of the container
154

154

00:06:38,509  -->  00:06:40,448
than these other elements here
155

155

00:06:40,448  -->  00:06:43,786
which basically have their flex-basis set to auto
156

156

00:06:43,786  -->  00:06:46,352
which is the initial value for flex-basis.
157

157

00:06:46,352  -->  00:06:47,971
So this one here simply occupied
158

158

00:06:47,971  -->  00:06:49,557
the space that they need
159

159

00:06:49,557  -->  00:06:51,211
and then all the remaining space
160

160

00:06:51,211  -->  00:06:53,416
is occupied by this last element here
161

161

00:06:53,416  -->  00:06:55,749
because its flex set to one.
162

162

00:06:56,621  -->  00:06:59,996
Another one that's missing is flex-shrink.
163

163

00:06:59,996  -->  00:07:02,142
And in order to better show that to you,
164

164

00:07:02,142  -->  00:07:03,903
let's actually change this one here
165

165

00:07:03,903  -->  00:07:06,108
to a pixel based value.
166

166

00:07:06,108  -->  00:07:08,263
So let's say 300 pixels.
167

167

00:07:08,263  -->  00:07:10,664
So now this one here has 300 pixels.
168

168

00:07:10,664  -->  00:07:12,284
Now take a look at what happens
169

169

00:07:12,284  -->  00:07:14,444
when I decrease the viewport width.
170

170

00:07:14,444  -->  00:07:17,527
So, just decreasing this window here.
171

171

00:07:19,484  -->  00:07:22,027
You saw what happens?
172

172

00:07:22,027  -->  00:07:24,727
Again, the first thing of course that happens
173

173

00:07:24,727  -->  00:07:27,710
is that this element here grows smaller and smaller.
174

174

00:07:27,710  -->  00:07:29,778
That's because it has less and less space
175

175

00:07:29,778  -->  00:07:31,230
which it can occupy.
176

176

00:07:31,230  -->  00:07:33,570
So, of course, it becomes smaller, right?
177

177

00:07:33,570  -->  00:07:36,495
Now, as I further decrease this here,
178

178

00:07:36,495  -->  00:07:38,340
what start to happen now?
179

179

00:07:38,340  -->  00:07:42,670
Well, you see, that this element here also decreases, right?
180

180

00:07:42,670  -->  00:07:46,569
So even if we set its flex-basis to 300 pixels,
181

181

00:07:46,569  -->  00:07:49,562
so basically we set the width to 300 pixels,
182

182

00:07:49,562  -->  00:07:51,115
it still starts decreasing
183

183

00:07:51,115  -->  00:07:54,692
when there's no more available space.
184

184

00:07:54,692  -->  00:07:58,402
But sometimes that's not exactly what we want.
185

185

00:07:58,402  -->  00:07:59,771
So we can actually change that
186

186

00:07:59,771  -->  00:08:02,212
using the flex-shrink property.
187

187

00:08:02,212  -->  00:08:04,439
Because remember, flex-shrink controls
188

188

00:08:04,439  -->  00:08:06,606
how an element can shrink.
189

189

00:08:10,053  -->  00:08:12,144
So, flex-shrink.
190

190

00:08:12,144  -->  00:08:13,887
Now remember that flex-shrink
191

191

00:08:13,887  -->  00:08:16,454
has the initial value of one.
192

192

00:08:16,454  -->  00:08:18,594
So, one means that the element
193

193

00:08:18,594  -->  00:08:21,351
is basically allowed to shrink.
194

194

00:08:21,351  -->  00:08:23,590
And that's why we see this behavior here.
195

195

00:08:23,590  -->  00:08:26,239
Where the element starts getting smaller and smaller
196

196

00:08:26,239  -->  00:08:29,245
as there is no more available space.
197

197

00:08:29,245  -->  00:08:31,102
Now if we don't want this to happen,
198

198

00:08:31,102  -->  00:08:33,994
we simply set it to zero and with that,
199

199

00:08:33,994  -->  00:08:36,805
the element is no longer allowed to shrink.
200

200

00:08:36,805  -->  00:08:38,388
So, let's see that.
201

201

00:08:40,227  -->  00:08:42,353
And you see what happens now?
202

202

00:08:42,353  -->  00:08:44,772
These last elements simply get clipped
203

203

00:08:44,772  -->  00:08:47,105
basically from the viewport.
204

204

00:08:48,777  -->  00:08:51,342
Or actually, the viewport increases its width
205

205

00:08:51,342  -->  00:08:53,705
in order to fit these remaining elements,
206

206

00:08:53,705  -->  00:08:55,066
but what doesn't happen
207

207

00:08:55,066  -->  00:08:57,553
is that this element doesn't change its width
208

208

00:08:57,553  -->  00:09:00,760
because it's not allowed to shrink.
209

209

00:09:00,760  -->  00:09:05,018
So that's what you did here with flex-shrink to zero.
210

210

00:09:05,018  -->  00:09:06,027
Now as I mentioned before,
211

211

00:09:06,027  -->  00:09:09,311
we should always use the flex property.
212

212

00:09:09,311  -->  00:09:12,001
Instead of having this,
213

213

00:09:12,001  -->  00:09:14,119
we just use the shorthand
214

214

00:09:14,119  -->  00:09:16,380
because that's the best practice.
215

215

00:09:16,380  -->  00:09:20,430
So flex, and now it's zero for flex-grow
216

216

00:09:20,430  -->  00:09:22,601
because we don't want this element to grow
217

217

00:09:22,601  -->  00:09:24,300
as much as it can,
218

218

00:09:24,300  -->  00:09:26,910
so occupying all the space it can.
219

219

00:09:26,910  -->  00:09:29,910
Then we also don't want it to shrink
220

220

00:09:30,847  -->  00:09:34,501
and do want a flex-basis of 300 pixels, for example.
221

221

00:09:34,501  -->  00:09:37,658
So that's exactly the thing that we had before.
222

222

00:09:37,658  -->  00:09:39,235
Let's convert this one here as well.
223

223

00:09:39,235  -->  00:09:42,036
Where is it? Now it's not here anymore.
224

224

00:09:42,036  -->  00:09:44,015
So I already deleted.
225

225

00:09:44,015  -->  00:09:47,300
But what we usually want here is actually the one.
226

226

00:09:47,300  -->  00:09:49,033
So usually we want the elements
227

227

00:09:49,033  -->  00:09:51,181
to be able to shrink, right?
228

228

00:09:51,181  -->  00:09:52,678
Because we don't want that situation
229

229

00:09:52,678  -->  00:09:57,424
where the elements no longer fit the container.
230

230

00:09:57,424  -->  00:09:59,697
So that's the way it works now.
231

231

00:09:59,697  -->  00:10:02,228
With that, I showed you all the properties
232

232

00:10:02,228  -->  00:10:05,263
that we can apply to a flex item.
233

233

00:10:05,263  -->  00:10:07,243
Now there's a lot more to learn, of course.
234

234

00:10:07,243  -->  00:10:10,910
Again, we're gonna use all of this later in the project.
235

235

00:10:10,910  -->  00:10:12,767
By then, you can see how we actually
236

236

00:10:12,767  -->  00:10:16,154
use all of these properties in real life situations.
237

237

00:10:16,154  -->  00:10:18,224
This here is just a very small example
238

238

00:10:18,224  -->  00:10:20,608
just to really show you how the properties work
239

239

00:10:20,608  -->  00:10:21,947
and that they exist.
240

240

00:10:21,947  -->  00:10:23,691
But as soon as we start a project
241

241

00:10:23,691  -->  00:10:25,896
you will use these properties in the real life
242

242

00:10:25,896  -->  00:10:29,979
and everything will make a lot more sense to you.
