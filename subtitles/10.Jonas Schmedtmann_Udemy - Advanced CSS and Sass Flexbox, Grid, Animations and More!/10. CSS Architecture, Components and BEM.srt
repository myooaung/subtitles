1
1

00:00:00,438  -->  00:00:02,732
<v Jonas>Hey, there, welcome back.</v>
2

2

00:00:02,732  -->  00:00:06,377
This is once again an extremely important lecture
3

3

00:00:06,377  -->  00:00:09,124
because we're gonna talk about CSS architecture,
4

4

00:00:09,124  -->  00:00:11,335
how we should think about layouts,
5

5

00:00:11,335  -->  00:00:14,898
and how we should mark up our code in a professional way.
6

6

00:00:14,898  -->  00:00:17,667
So this one is technically not about how CSS works
7

7

00:00:17,667  -->  00:00:22,126
but it still made sense to put it here in this section.
8

8

00:00:22,126  -->  00:00:24,988
So, remember that we want code that is clean,
9

9

00:00:24,988  -->  00:00:28,071
modular, reusable, that makes it easy
10

10

00:00:28,071  -->  00:00:29,878
to add more and more features
11

11

00:00:29,878  -->  00:00:32,837
to our webpage or app if it needs to grow.
12

12

00:00:32,837  -->  00:00:34,951
So because of all of these reasons,
13

13

00:00:34,951  -->  00:00:37,327
we cannot just dive into a new project
14

14

00:00:37,327  -->  00:00:41,093
and leave architecture behind just as a second thought.
15

15

00:00:41,093  -->  00:00:43,612
Instead, we need to take important decisions
16

16

00:00:43,612  -->  00:00:46,254
concerning our HTML and CSS code
17

17

00:00:46,254  -->  00:00:48,674
right from the beginning of the project.
18

18

00:00:48,674  -->  00:00:51,946
And that's what I wanna help you with in this lecture.
19

19

00:00:51,946  -->  00:00:55,145
So we need a good strategy here, a good mindset,
20

20

00:00:55,145  -->  00:00:57,590
and from my experience, the best strategy
21

21

00:00:57,590  -->  00:00:59,159
is something I like to call
22

22

00:00:59,159  -->  00:01:02,327
the think, build, architect mindset.
23

23

00:01:02,327  -->  00:01:05,390
We need to think about the layout of our webpage
24

24

00:01:05,390  -->  00:01:08,466
or web app before we actually write the code.
25

25

00:01:08,466  -->  00:01:10,715
After having the layout figured out,
26

26

00:01:10,715  -->  00:01:13,300
we should build it in HTML and CSS
27

27

00:01:13,300  -->  00:01:16,726
with a consistent structure for naming our classes.
28

28

00:01:16,726  -->  00:01:20,059
Also, at the same time, we should create a logical
29

29

00:01:20,059  -->  00:01:24,941
CSS architecture by using multiple files and folders.
30

30

00:01:24,941  -->  00:01:27,417
So starting with the think part,
31

31

00:01:27,417  -->  00:01:30,852
I like to use something called component-driven design,
32

32

00:01:30,852  -->  00:01:32,399
which is actually a principle
33

33

00:01:32,399  -->  00:01:35,531
that is used across all software development.
34

34

00:01:35,531  -->  00:01:38,640
In CSS, with component-driven design,
35

35

00:01:38,640  -->  00:01:42,126
we try to divide our page into modular components.
36

36

00:01:42,126  -->  00:01:44,498
So, what are these components?
37

37

00:01:44,498  -->  00:01:47,426
Components are the building blocks that we use
38

38

00:01:47,426  -->  00:01:49,583
to construct our interfaces.
39

39

00:01:49,583  -->  00:01:52,409
So we can basically think of our interface
40

40

00:01:52,409  -->  00:01:54,228
as a collection of components
41

41

00:01:54,228  -->  00:01:57,557
held together by the overall layout of the page.
42

42

00:01:57,557  -->  00:02:00,183
Probably the most important thing about components
43

43

00:02:00,183  -->  00:02:03,556
is that they should be reusable across a project
44

44

00:02:03,556  -->  00:02:05,628
and also between different projects.
45

45

00:02:05,628  -->  00:02:07,239
That's really important.
46

46

00:02:07,239  -->  00:02:09,685
So you can build a library of your components
47

47

00:02:09,685  -->  00:02:11,963
and then reuse them across projects,
48

48

00:02:11,963  -->  00:02:14,627
which will speed up your development.
49

49

00:02:14,627  -->  00:02:16,812
Plus, components should be independent
50

50

00:02:16,812  -->  00:02:19,693
so that we can use them completely on their own
51

51

00:02:19,693  -->  00:02:21,685
no matter where on the page.
52

52

00:02:21,685  -->  00:02:23,423
What this means is that components
53

53

00:02:23,423  -->  00:02:26,498
should not depend on their parent elements.
54

54

00:02:26,498  -->  00:02:29,284
Once again, all of this will make your CSS code
55

55

00:02:29,284  -->  00:02:32,549
easier to maintain and to scale if necessary.
56

56

00:02:32,549  -->  00:02:34,879
Now of course, these are all the general rules,
57

57

00:02:34,879  -->  00:02:37,678
and they can be broken if it's strictly necessary
58

58

00:02:37,678  -->  00:02:39,565
as long as you have a good reason.
59

59

00:02:39,565  -->  00:02:42,220
Now I don't want you to memorize anything here, okay?
60

60

00:02:42,220  -->  00:02:44,478
This is just a discussion that we need to have
61

61

00:02:44,478  -->  00:02:47,230
in order to become better CSS developers.
62

62

00:02:47,230  -->  00:02:49,598
Over time with practice, all of this
63

63

00:02:49,598  -->  00:02:51,595
will become really intuitive to you,
64

64

00:02:51,595  -->  00:02:53,567
and of course, we're actually gonna apply this
65

65

00:02:53,567  -->  00:02:57,073
in a later project that we already started coding.
66

66

00:02:57,073  -->  00:02:58,820
All right, and just as a side note,
67

67

00:02:58,820  -->  00:03:01,109
this whole thinking component strategy
68

68

00:03:01,109  -->  00:03:03,592
is actually a bit similar to Brad Frost's
69

69

00:03:03,592  -->  00:03:07,101
super popular atomic design philosophy,
70

70

00:03:07,101  -->  00:03:09,233
which maybe you have heard of by now.
71

71

00:03:09,233  -->  00:03:10,887
So according to atomic design,
72

72

00:03:10,887  -->  00:03:13,747
the smallest units on a page are atoms,
73

73

00:03:13,747  -->  00:03:15,772
which together form molecules,
74

74

00:03:15,772  -->  00:03:18,541
which combine together to form organisms.
75

75

00:03:18,541  -->  00:03:21,556
And these organisms can be seen as our components
76

76

00:03:21,556  -->  00:03:23,184
in some situations.
77

77

00:03:23,184  -->  00:03:26,260
Now we're not gonna focus so much on atomic design
78

78

00:03:26,260  -->  00:03:27,652
in the course though.
79

79

00:03:27,652  -->  00:03:28,855
I just wanted to let you know
80

80

00:03:28,855  -->  00:03:32,191
that there are other ways of thinking about our interfaces.
81

81

00:03:32,191  -->  00:03:35,629
You can take a look at atomic design if you're interested
82

82

00:03:35,629  -->  00:03:38,059
and if you haven't heard about it.
83

83

00:03:38,059  -->  00:03:40,806
All right, so after thinking about your design,
84

84

00:03:40,806  -->  00:03:43,893
we need to code the design using HTML and CSS,
85

85

00:03:43,893  -->  00:03:45,671
and in this step, it's important
86

86

00:03:45,671  -->  00:03:47,300
to have a consistent strategy
87

87

00:03:47,300  -->  00:03:49,777
and structure for naming our classes.
88

88

00:03:49,777  -->  00:03:52,882
There are many approaches for naming classes.
89

89

00:03:52,882  -->  00:03:55,882
Things like object-oriented CSS or S Max
90

90

00:03:55,882  -->  00:03:58,132
but the one I like the most is BEM,
91

91

00:03:58,132  -->  00:04:00,109
which is becoming more and more popular
92

92

00:04:00,109  -->  00:04:02,014
by developers around the world.
93

93

00:04:02,014  -->  00:04:05,237
It's a nice clean system for marking up our layouts.
94

94

00:04:05,237  -->  00:04:08,737
So, BEM stands for Block Element Modifier.
95

95

00:04:09,672  -->  00:04:11,971
And this is how class notes usually look like
96

96

00:04:11,971  -->  00:04:14,704
using the BEM methodology.
97

97

00:04:14,704  -->  00:04:17,951
So, if you've ever seen code that looks like this
98

98

00:04:17,951  -->  00:04:21,856
example here, now you know that it used the BEM system.
99

99

00:04:21,856  -->  00:04:26,289
So, first, in BEM a block is a standalone component
100

100

00:04:26,289  -->  00:04:28,645
that is meaningful on its own.
101

101

00:04:28,645  -->  00:04:30,745
And what this means is that the component
102

102

00:04:30,745  -->  00:04:34,205
as we defined in the last slide are the blocks in BEM.
103

103

00:04:34,205  -->  00:04:36,946
In this example, the recipe is a block
104

104

00:04:36,946  -->  00:04:39,440
and also the button because both of them
105

105

00:04:39,440  -->  00:04:41,879
are standalone components that can be reused
106

106

00:04:41,879  -->  00:04:43,665
anywhere in the project.
107

107

00:04:43,665  -->  00:04:46,843
And note how these two blocks are actually nested.
108

108

00:04:46,843  -->  00:04:50,586
So the button block is inside the recipe block,
109

109

00:04:50,586  -->  00:04:53,592
and that's perfectly normal and acceptable.
110

110

00:04:53,592  -->  00:04:57,070
Next, an element is a part of a block
111

111

00:04:57,070  -->  00:04:59,173
and has no meaning on its own.
112

112

00:04:59,173  -->  00:05:02,423
So in our example, that could be the info panel
113

113

00:05:02,423  -->  00:05:03,961
or the stats box,
114

114

00:05:03,961  -->  00:05:06,203
but there are a lot of other elements there.
115

115

00:05:06,203  -->  00:05:09,972
But again, if we take one of these elements out of the block
116

116

00:05:09,972  -->  00:05:11,930
then they wouldn't be useful at al.
117

117

00:05:11,930  -->  00:05:13,797
They wouldn't have any meaning.
118

118

00:05:13,797  -->  00:05:15,697
Now what's important to note here
119

119

00:05:15,697  -->  00:05:17,887
is how the recipe block still appears
120

120

00:05:17,887  -->  00:05:20,393
in all the class names within the block.
121

121

00:05:20,393  -->  00:05:21,630
Do you see that?
122

122

00:05:21,630  -->  00:05:23,599
That's why we have the word recipe
123

123

00:05:23,599  -->  00:05:25,989
all over the place in this HTML code.
124

124

00:05:25,989  -->  00:05:28,328
Also, notice how this creates selectors
125

125

00:05:28,328  -->  00:05:32,137
with really low specificities because we always use classes
126

126

00:05:32,137  -->  00:05:34,111
and they are never nested.
127

127

00:05:34,111  -->  00:05:36,605
And so they always have a pretty low specificity,
128

128

00:05:36,605  -->  00:05:39,164
and this is one of the big reasons why BEM
129

129

00:05:39,164  -->  00:05:43,290
is so widely used for easy to maintain and reusable code.
130

130

00:05:43,290  -->  00:05:47,128
All right, and last, we have the modifier,
131

131

00:05:47,128  -->  00:05:50,917
and the modifier is a flag that we can put on a block
132

132

00:05:50,917  -->  00:05:53,207
or an element in order to make it different
133

133

00:05:53,207  -->  00:05:55,534
from the regular blocks or elements.
134

134

00:05:55,534  -->  00:05:57,930
To make a different version, let's say.
135

135

00:05:57,930  -->  00:06:02,363
In our example, we have a modifier to make the button round.
136

136

00:06:02,363  -->  00:06:05,878
So for instance, there may be some rules for all buttons,
137

137

00:06:05,878  -->  00:06:07,585
and then we use a modifier
138

138

00:06:07,585  -->  00:06:10,128
to make a more specific, different button.
139

139

00:06:10,128  -->  00:06:12,532
And in this case, a round one.
140

140

00:06:12,532  -->  00:06:15,776
Now, try to read that entire HTML markup
141

141

00:06:15,776  -->  00:06:17,411
I just showed you, okay?
142

142

00:06:17,411  -->  00:06:20,779
Seriously, try to stop the video and read the code
143

143

00:06:20,779  -->  00:06:23,029
because just by reading the markup
144

144

00:06:23,029  -->  00:06:24,378
with these class names in it,
145

145

00:06:24,378  -->  00:06:27,316
you can instantly see how all elements are related
146

146

00:06:27,316  -->  00:06:29,257
and what each of them does.
147

147

00:06:29,257  -->  00:06:31,432
Now imagine this with a whole page,
148

148

00:06:31,432  -->  00:06:34,370
and the effect would become even better.
149

149

00:06:34,370  -->  00:06:37,376
Now again, you're gonna get used to all this
150

150

00:06:37,376  -->  00:06:40,728
once we start using it in practice throughout the project
151

151

00:06:40,728  -->  00:06:42,552
in one of the next lectures.
152

152

00:06:42,552  -->  00:06:44,646
All right, and just to finish this part,
153

153

00:06:44,646  -->  00:06:47,596
I know that many people really hate BEM
154

154

00:06:47,596  -->  00:06:50,732
because they say it looks ugly and it's hard to write
155

155

00:06:50,732  -->  00:06:54,396
and yeah, I agree that it might look a bit funny actually
156

156

00:06:54,396  -->  00:06:56,941
and that you might have to type a bit more code,
157

157

00:06:56,941  -->  00:06:59,436
but believe me that it's really worth it.
158

158

00:06:59,436  -->  00:07:01,728
You should absolutely try it with me
159

159

00:07:01,728  -->  00:07:04,200
once we start coding again.
160

160

00:07:04,200  -->  00:07:07,117
And now the last part of our strategy,
161

161

00:07:07,117  -->  00:07:09,061
which is architecting CSS.
162

162

00:07:09,061  -->  00:07:12,919
And remember by that I mean to create a logical folder
163

163

00:07:12,919  -->  00:07:15,958
and file structure for our CSS to live in.
164

164

00:07:15,958  -->  00:07:18,140
Once again, there are different options here
165

165

00:07:18,140  -->  00:07:21,461
like the ITCSS method or S Max,
166

166

00:07:21,461  -->  00:07:24,426
but I like to use something called the 7-1 Pattern
167

167

00:07:24,426  -->  00:07:26,834
introduced by Hugo Giraudel.
168

168

00:07:26,834  -->  00:07:30,317
I'm not sure if I spelled his name right, but let's hope.
169

169

00:07:30,317  -->  00:07:33,679
Okay, so the 7-1 Pattern is extremely simple.
170

170

00:07:33,679  -->  00:07:36,791
All it means is that we have seven different folders
171

171

00:07:36,791  -->  00:07:39,035
where we put partial Sass files,
172

172

00:07:39,035  -->  00:07:41,797
and then one main Sass file in which we import
173

173

00:07:41,797  -->  00:07:44,159
all of our partial files into one final
174

174

00:07:44,159  -->  00:07:46,670
compiled CSS stylesheet.
175

175

00:07:46,670  -->  00:07:48,722
Of course, when I say Sass here,
176

176

00:07:48,722  -->  00:07:51,346
I could mean any other CSS pre-processor
177

177

00:07:51,346  -->  00:07:54,614
because all of them allow to implement this pattern, okay?
178

178

00:07:54,614  -->  00:07:56,991
And we'll see how that works in practice
179

179

00:07:56,991  -->  00:07:59,045
once again a bit later.
180

180

00:07:59,045  -->  00:08:00,851
So the seven folders I've mentioned
181

181

00:08:00,851  -->  00:08:03,897
that are used in this method are the base folder
182

182

00:08:03,897  -->  00:08:06,347
where we put the basic product definitions,
183

183

00:08:06,347  -->  00:08:09,347
the components folder where we have one file
184

184

00:08:09,347  -->  00:08:11,764
for each component, the layout folder,
185

185

00:08:11,764  -->  00:08:14,587
where we define the overall layout of the project,
186

186

00:08:14,587  -->  00:08:17,229
the pages folder where we have styles
187

187

00:08:17,229  -->  00:08:19,516
for specific pages of the project,
188

188

00:08:19,516  -->  00:08:22,183
the themes folder if you want to implement
189

189

00:08:22,183  -->  00:08:25,103
different visual themes, the abstracts folder
190

190

00:08:25,103  -->  00:08:28,236
where we put code that doesn't output any CSS,
191

191

00:08:28,236  -->  00:08:30,574
such as variables or mix-ins,
192

192

00:08:30,574  -->  00:08:32,844
and finally, the vendors folder
193

193

00:08:32,844  -->  00:08:35,499
where all third party CSS goes.
194

194

00:08:35,499  -->  00:08:37,394
So that's just a big overview,
195

195

00:08:37,394  -->  00:08:39,818
but I'll go into further details about these folders
196

196

00:08:39,818  -->  00:08:42,623
once we really implement them in a project.
197

197

00:08:42,623  -->  00:08:45,544
Now we don't always need to use all of these folders.
198

198

00:08:45,544  -->  00:08:49,320
It's gonna depend on the size and the scope of the project.
199

199

00:08:49,320  -->  00:08:52,177
All right, and that's it about CSS architecture,
200

200

00:08:52,177  -->  00:08:55,036
BEM, and component-based design.
201

201

00:08:55,036  -->  00:08:56,831
I hope this made sense to you
202

202

00:08:56,831  -->  00:08:58,936
and that you can see and appreciate
203

203

00:08:58,936  -->  00:09:01,226
the huge value that these techniques
204

204

00:09:01,226  -->  00:09:03,337
can add to our workflow.
205

205

00:09:03,337  -->  00:09:05,050
I'm sure that putting this into practice
206

206

00:09:05,050  -->  00:09:06,998
will help with that, so
207

207

00:09:06,998  -->  00:09:08,711
stay tuned for the next lectures
208

208

00:09:08,711  -->  00:09:11,628
where we're gonna do exactly that.
