WEBVTT
1
1

00:00:01.759  -->  00:00:04.477
<v Instructor>It's now time for one of the most fun parts</v>
2

2

00:00:04.477  -->  00:00:07.819
of this project and that's building a gallery
3

3

00:00:07.819  -->  00:00:09.576
with CSS grid.
4

4

00:00:09.576  -->  00:00:13.198
That's exactly what you're going to learn in this lecture.
5

5

00:00:13.198  -->  00:00:16.317
How to create a complex grid-looking gallery,
6

6

00:00:16.317  -->  00:00:18.713
one that you can really see that it was built
7

7

00:00:18.713  -->  00:00:20.475
with an underlying grid.
8

8

00:00:20.475  -->  00:00:22.636
And for that, you're also going to learn
9

9

00:00:22.636  -->  00:00:26.803
how to use object fit together with images for grid items.
10

10

00:00:27.676  -->  00:00:30.123
This is the gallery that I'm talking about.
11

11

00:00:30.123  -->  00:00:33.179
From the beginning, I wanted to include something like this
12

12

00:00:33.179  -->  00:00:36.638
in this project because it's really a perfect use case
13

13

00:00:36.638  -->  00:00:39.377
for CSS grid because you can really see
14

14

00:00:39.377  -->  00:00:42.892
how these images were literally aligned
15

15

00:00:42.892  -->  00:00:44.725
to an underlying grid.
16

16

00:00:45.678  -->  00:00:49.197
It's really visible, so it's a perfect use case
17

17

00:00:49.197  -->  00:00:52.950
and actually, it would have been maybe not impossible,
18

18

00:00:52.950  -->  00:00:56.732
but extremely difficult to do this without CSS grid.
19

19

00:00:56.732  -->  00:01:00.320
Again, it's a perfect use case to show you, once again,
20

20

00:01:00.320  -->  00:01:03.086
how powerful CSS grids are.
21

21

00:01:03.086  -->  00:01:07.516
How do we go about creating this grid structure?
22

22

00:01:07.516  -->  00:01:10.075
We have to select the number of columns
23

23

00:01:10.075  -->  00:01:12.119
and the number of row tracks, of course.
24

24

00:01:12.119  -->  00:01:14.192
How are we gonna do that?
25

25

00:01:14.192  -->  00:01:17.516
It seems like a rather complex task, right?
26

26

00:01:17.516  -->  00:01:19.279
A couple of things about that,
27

27

00:01:19.279  -->  00:01:22.607
the most important thing to consider is the smallest unit
28

28

00:01:22.607  -->  00:01:25.132
that you want to have in your grid.
29

29

00:01:25.132  -->  00:01:29.021
In this case, that would be this cell, here,
30

30

00:01:29.021  -->  00:01:30.449
like this image.
31

31

00:01:30.449  -->  00:01:33.097
So, I have to create a grid with as many columns
32

32

00:01:33.097  -->  00:01:37.167
as necessary to create a small image like this.
33

33

00:01:37.167  -->  00:01:40.922
So, one of the columns is the size of this image
34

34

00:01:40.922  -->  00:01:42.942
because it's the smallest unit here
35

35

00:01:42.942  -->  00:01:45.935
and the same, of course, applies to the row.
36

36

00:01:45.935  -->  00:01:47.790
So, you'll see that the height of one row
37

37

00:01:47.790  -->  00:01:50.126
is the height of this unit here.
38

38

00:01:50.126  -->  00:01:52.078
This height is actually visible here
39

39

00:01:52.078  -->  00:01:53.038
anywhere over the place.
40

40

00:01:53.038  -->  00:01:55.905
So, the height of this unit here is also, for example,
41

41

00:01:55.905  -->  00:01:57.965
this one here, and so that's going to allow us
42

42

00:01:57.965  -->  00:02:02.017
to place items like this using some spanning
43

43

00:02:02.017  -->  00:02:06.255
so that it really looks like this huge grid here in the end
44

44

00:02:06.255  -->  00:02:08.433
with all of these items aligned like this,
45

45

00:02:08.433  -->  00:02:10.608
with some images bigger than the others,
46

46

00:02:10.608  -->  00:02:13.615
like this one and this one, and some smaller ones,
47

47

00:02:13.615  -->  00:02:15.925
and coming in all different shapes.
48

48

00:02:15.925  -->  00:02:20.531
This one here is in portrait, this here is a square,
49

49

00:02:20.531  -->  00:02:23.693
this is also like a square and this one,
50

50

00:02:23.693  -->  00:02:27.102
so they're similar to the one here.
51

51

00:02:27.102  -->  00:02:29.811
Basically, the more columns and the more rows you have
52

52

00:02:29.811  -->  00:02:33.712
the more complex you can create these items here,
53

53

00:02:33.712  -->  00:02:36.377
the more variety in sizes and shapes
54

54

00:02:36.377  -->  00:02:39.389
you can create with the grid.
55

55

00:02:39.389  -->  00:02:43.556
Let us take a look at the underlying grid that we have here.
56

56

00:02:44.606  -->  00:02:47.102
Let me select it here from the list
57

57

00:02:47.102  -->  00:02:49.375
and it's this gallery.
58

58

00:02:49.375  -->  00:02:53.446
So, you see that we have eight columns,
59

59

00:02:53.446  -->  00:02:56.959
so it goes from line number one to line number nine
60

60

00:02:56.959  -->  00:02:58.209
and seven rows.
61

61

00:02:59.723  -->  00:03:02.752
I did this through some experimentation, of course,
62

62

00:03:02.752  -->  00:03:05.795
which means that you never come up with this
63

63

00:03:05.795  -->  00:03:07.118
right from the beginning.
64

64

00:03:07.118  -->  00:03:09.841
Maybe I started with ten columns and ten rows
65

65

00:03:09.841  -->  00:03:12.132
and then, at some point I noticed that ten
66

66

00:03:12.132  -->  00:03:15.216
was a bit too much and then, I did an eight by eight grid
67

67

00:03:15.216  -->  00:03:18.705
and then, I noticed that I don't even need the eighth row
68

68

00:03:18.705  -->  00:03:20.929
and so, I just cut it to seven rows.
69

69

00:03:20.929  -->  00:03:23.140
And so, in the end, I ended up
70

70

00:03:23.140  -->  00:03:24.751
with this eight by seven grid.
71

71

00:03:24.751  -->  00:03:26.527
And you'll see, again, that this here is the smallest unit
72

72

00:03:26.527  -->  00:03:29.630
and you'll see this grid cell, for example, over here
73

73

00:03:29.630  -->  00:03:33.296
on the side and so, basically, each of these areas
74

74

00:03:33.296  -->  00:03:34.878
that you see here are made up
75

75

00:03:34.878  -->  00:03:37.697
of a couple of these grid cells.
76

76

00:03:37.697  -->  00:03:41.646
For example, here we have two and two and here we have four
77

77

00:03:41.646  -->  00:03:45.813
and here we have nine in this image, here we have six.
78

78

00:03:47.218  -->  00:03:50.608
And so, again, the more grid cells we have,
79

79

00:03:50.608  -->  00:03:54.138
the more complex and the more variety that we can have
80

80

00:03:54.138  -->  00:03:55.471
in these images.
81

81

00:03:56.495  -->  00:04:00.996
So, let's set up that underlying grid here in CSS
82

82

00:04:00.996  -->  00:04:03.329
and, of course, we need some grid items,
83

83

00:04:03.329  -->  00:04:05.585
so let's start with having just one image
84

84

00:04:05.585  -->  00:04:09.752
so that I can show you how I implemented all of this.
85

85

00:04:10.892  -->  00:04:14.309
So, down here we should have the gallery.
86

86

00:04:16.592  -->  00:04:19.792
I'm going to use the image here
87

87

00:04:19.792  -->  00:04:21.709
and call it gallery_img
88

88

00:04:24.901  -->  00:04:29.068
and this one is going to be called image and then, gal-1
89

89

00:04:33.886  -->  00:04:36.386
and gallery image one.
90

90

00:04:36.386  -->  00:04:39.455
We're going to change this later,
91

91

00:04:39.455  -->  00:04:42.358
but more on that a bit later.
92

92

00:04:42.358  -->  00:04:44.903
We can close our home now
93

93

00:04:44.903  -->  00:04:48.653
and open the gallery file, which is this one.
94

94

00:04:49.988  -->  00:04:52.725
Let's get rid of this background color,
95

95

00:04:52.725  -->  00:04:54.392
set display to grid,
96

96

00:04:55.927  -->  00:04:58.760
and then add our rows and columns.
97

97

00:04:59.621  -->  00:05:03.397
So, grid-template-columns and, as I mentioned,
98

98

00:05:03.397  -->  00:05:07.716
I made eight columns and all the same size, of course,
99

99

00:05:07.716  -->  00:05:10.967
occupying the entire grid container
100

100

00:05:10.967  -->  00:05:12.546
and then, the rows.
101

101

00:05:12.546  -->  00:05:14.046
So, template-rows.
102

102

00:05:16.946  -->  00:05:19.092
Remember that I said that I have seven.
103

103

00:05:19.092  -->  00:05:23.169
And now, what about the height of each of them?
104

104

00:05:23.169  -->  00:05:25.502
So, let me show that to you.
105

105

00:05:26.640  -->  00:05:29.723
What happens when I resize this here?
106

106

00:05:30.596  -->  00:05:34.116
You see that each of these cells here
107

107

00:05:34.116  -->  00:05:38.550
actually maintains its aspect ratio perfectly fine.
108

108

00:05:38.550  -->  00:05:42.820
What that means is that the height of these rows
109

109

00:05:42.820  -->  00:05:45.983
is somehow tied to the viewport width.
110

110

00:05:45.983  -->  00:05:49.635
The easiest way to do that is to simply use
111

111

00:05:49.635  -->  00:05:51.474
the viewport width unit.
112

112

00:05:51.474  -->  00:05:54.372
That's exactly what I did.
113

113

00:05:54.372  -->  00:05:57.314
We have seven columns, each on with the height
114

114

00:05:57.314  -->  00:05:59.231
of five viewport width.
115

115

00:06:00.308  -->  00:06:02.817
Again, I experimented with these heights
116

116

00:06:02.817  -->  00:06:05.987
and I came to the conclusion that 5% of the viewport width
117

117

00:06:05.987  -->  00:06:08.643
is the perfect size for the height.
118

118

00:06:08.643  -->  00:06:11.635
We, of course, could have done this in a different way
119

119

00:06:11.635  -->  00:06:14.307
and that is to basically preset the height
120

120

00:06:14.307  -->  00:06:15.890
of this entire row.
121

121

00:06:19.618  -->  00:06:22.140
So, basically, preset the height of the row
122

122

00:06:22.140  -->  00:06:24.774
that contains this gallery container
123

123

00:06:24.774  -->  00:06:28.189
and then, we could have used the FR unit here as well
124

124

00:06:28.189  -->  00:06:30.418
and so, that would have then divided equally
125

125

00:06:30.418  -->  00:06:33.808
the height of the container by the number of rows.
126

126

00:06:33.808  -->  00:06:36.142
I hope that doesn't sound too confusing,
127

127

00:06:36.142  -->  00:06:38.645
but I think it's actually a bit more straightforward
128

128

00:06:38.645  -->  00:06:40.305
to do it like this,
129

129

00:06:40.305  -->  00:06:42.272
using the viewport with the unit
130

130

00:06:42.272  -->  00:06:44.697
and so, that will define the height
131

131

00:06:44.697  -->  00:06:47.554
of this gallery item here, which will then, in turn,
132

132

00:06:47.554  -->  00:06:51.721
define the height of the row of our overall layout.
133

133

00:06:53.191  -->  00:06:55.358
Let's take a look at that.
134

134

00:06:57.557  -->  00:06:58.474
Here we go.
135

135

00:06:59.753  -->  00:07:02.948
Maybe I shouldn't have removed the background color here.
136

136

00:07:02.948  -->  00:07:04.737
Actually, yeah, I shouldn't have
137

137

00:07:04.737  -->  00:07:07.349
because this was actually the correct background color
138

138

00:07:07.349  -->  00:07:08.766
for this element.
139

139

00:07:09.972  -->  00:07:12.132
Let's get it back.
140

140

00:07:12.132  -->  00:07:14.132
I think it was this one.
141

141

00:07:20.096  -->  00:07:20.929
Okay.
142

142

00:07:23.325  -->  00:07:26.242
Let's just quickly add another one.
143

143

00:07:30.729  -->  00:07:33.808
So, gallery number two, just to let me see
144

144

00:07:33.808  -->  00:07:35.701
how they look like side by side.
145

145

00:07:35.701  -->  00:07:38.418
But, I see that they're not really side by side,
146

146

00:07:38.418  -->  00:07:41.735
so let's check out what we have here
147

147

00:07:41.735  -->  00:07:43.189
and now, that's really weird.
148

148

00:07:43.189  -->  00:07:46.189
For some reason, we have two columns
149

149

00:07:47.334  -->  00:07:49.076
and our grid container is way too big,
150

150

00:07:49.076  -->  00:07:52.791
so I'm not sure what's going on here.
151

151

00:07:52.791  -->  00:07:55.208
This page is really huge now,
152

152

00:07:58.584  -->  00:08:02.751
but I don't really have an idea why that is happening.
153

153

00:08:04.006  -->  00:08:05.839
Let's inspect element.
154

154

00:08:07.558  -->  00:08:10.774
It tells me that the gallery is 2000 pixels wide now,
155

155

00:08:10.774  -->  00:08:12.903
which doesn't make much sense,
156

156

00:08:12.903  -->  00:08:16.444
so let's add this page in Google Chrome
157

157

00:08:16.444  -->  00:08:19.981
to see if this is maybe a bug with Firefox
158

158

00:08:19.981  -->  00:08:21.598
and so, I'm just going to copy, here,
159

159

00:08:21.598  -->  00:08:23.532
the address of our page
160

160

00:08:23.532  -->  00:08:25.449
and open Google Chrome,
161

161

00:08:28.588  -->  00:08:32.206
pasting it here, and we see that our site looks good
162

162

00:08:32.206  -->  00:08:33.917
here, too, in Google Chrome.
163

163

00:08:33.917  -->  00:08:35.584
That's good to know.
164

164

00:08:36.469  -->  00:08:39.410
All right, so now I see what's going on here.
165

165

00:08:39.410  -->  00:08:42.499
It's because these images are huge.
166

166

00:08:42.499  -->  00:08:45.487
For some reason, in Firefox,
167

167

00:08:45.487  -->  00:08:47.856
it doesn't show up like this.
168

168

00:08:47.856  -->  00:08:49.748
The images are actually quite small,
169

169

00:08:49.748  -->  00:08:51.987
but this shows me why the grid container
170

170

00:08:51.987  -->  00:08:53.654
is so big right now.
171

171

00:08:54.881  -->  00:08:58.464
Let's now go back to our code and fix that.
172

172

00:09:01.497  -->  00:09:03.447
This is just a temporary fix.
173

173

00:09:03.447  -->  00:09:08.162
Let me simply say that I want all of the child elements
174

174

00:09:08.162  -->  00:09:10.579
to have a width of 100%.
175

175

00:09:13.417  -->  00:09:16.903
That should fix it and, indeed, here we go.
176

176

00:09:16.903  -->  00:09:19.367
That is much better.
177

177

00:09:19.367  -->  00:09:23.960
Well, actually there's still something going on here.
178

178

00:09:23.960  -->  00:09:26.484
I'm not sure what's that, but it's no problem.
179

179

00:09:26.484  -->  00:09:28.759
I'm sure that if I reload the page or something,
180

180

00:09:28.759  -->  00:09:30.983
then that's gonna disappear
181

181

00:09:30.983  -->  00:09:33.031
or, if not, it's gonna disappear later
182

182

00:09:33.031  -->  00:09:35.094
at some point, I'm sure.
183

183

00:09:35.094  -->  00:09:37.799
Now, remember the talk that we had earlier
184

184

00:09:37.799  -->  00:09:40.021
about images as grid items.
185

185

00:09:40.021  -->  00:09:42.854
So, up here we had the same thing.
186

186

00:09:44.584  -->  00:09:47.494
We had images as grid items
187

187

00:09:47.494  -->  00:09:49.123
and remember that these images,
188

188

00:09:49.123  -->  00:09:51.895
they have an intrinsic aspect ratio
189

189

00:09:51.895  -->  00:09:55.172
and because of that, they don't really fill the grid cells
190

190

00:09:55.172  -->  00:09:57.413
that they are assigned to.
191

191

00:09:57.413  -->  00:09:59.154
So, you see that this image here,
192

192

00:09:59.154  -->  00:10:02.823
it's not really filling up just one of these cells,
193

193

00:10:02.823  -->  00:10:04.955
but instead, it really overflows it
194

194

00:10:04.955  -->  00:10:07.397
and stretches as much as it has to
195

195

00:10:07.397  -->  00:10:10.660
in order to keep its intrinsic aspect ratio
196

196

00:10:10.660  -->  00:10:12.535
and the same, of course, with this one.
197

197

00:10:12.535  -->  00:10:16.070
Now, this is going to create a huge problem for our gallery
198

198

00:10:16.070  -->  00:10:18.295
because these images actually don't have
199

199

00:10:18.295  -->  00:10:20.853
the same aspect ratio and so, therefore,
200

200

00:10:20.853  -->  00:10:24.055
this will create a very messy looking gallery,
201

201

00:10:24.055  -->  00:10:26.740
not exactly like we want it to be
202

202

00:10:26.740  -->  00:10:29.559
and if we add a gap here to our grid,
203

203

00:10:29.559  -->  00:10:31.523
then that's going to make it even worse,
204

204

00:10:31.523  -->  00:10:33.690
so let's actually do that.
205

205

00:10:34.785  -->  00:10:37.785
So, a grid gap of one point five rem
206

206

00:10:39.650  -->  00:10:42.471
and, as you have noticed, this gap is always
207

207

00:10:42.471  -->  00:10:45.478
only between the columns and the rows,
208

208

00:10:45.478  -->  00:10:49.399
but not on the sides, so not around the grid,
209

209

00:10:49.399  -->  00:10:51.864
but in this case, we actually want some space
210

210

00:10:51.864  -->  00:10:53.799
around the grid container as well,
211

211

00:10:53.799  -->  00:10:57.216
and so, let's just add some padding here.
212

212

00:10:58.690  -->  00:11:01.895
So, a padding of one point five rem, as well,
213

213

00:11:01.895  -->  00:11:04.119
and so, that's going to look as if the gutter
214

214

00:11:04.119  -->  00:11:07.119
was also on the outside of the grid.
215

215

00:11:07.975  -->  00:11:09.906
Just like that.
216

216

00:11:09.906  -->  00:11:13.156
Again, we want this image to stop here,
217

217

00:11:14.490  -->  00:11:17.970
so in order to only occupy this cell
218

218

00:11:17.970  -->  00:11:19.583
that it was assigned to.
219

219

00:11:19.583  -->  00:11:23.151
We did actually manually assign it to this cell,
220

220

00:11:23.151  -->  00:11:26.399
but the grid auto-placement overridden just put this image
221

221

00:11:26.399  -->  00:11:28.945
here in this first cell and the second image
222

222

00:11:28.945  -->  00:11:30.268
into the second cell.
223

223

00:11:30.268  -->  00:11:32.010
But still, it's overflowing the cell
224

224

00:11:32.010  -->  00:11:34.527
and that's not the behavior that we want.
225

225

00:11:34.527  -->  00:11:36.383
So, how can we fix that?
226

226

00:11:36.383  -->  00:11:38.569
What we're going to do is a small property
227

227

00:11:38.569  -->  00:11:40.318
that we've used before in another project
228

228

00:11:40.318  -->  00:11:44.232
called object fit, and object fit is perfect for this
229

229

00:11:44.232  -->  00:11:47.158
because, remember, if we set object fit to cover,
230

230

00:11:47.158  -->  00:11:50.218
it's like setting background size to cover
231

231

00:11:50.218  -->  00:11:51.577
for the background image.
232

232

00:11:51.577  -->  00:11:54.873
So basically, having an image filling a container.
233

233

00:11:54.873  -->  00:11:58.766
What we're going to do here is to add a parent container
234

234

00:11:58.766  -->  00:12:01.643
for each of these elements, then put the element in there
235

235

00:12:01.643  -->  00:12:05.095
and add object fit to that parent element.
236

236

00:12:05.095  -->  00:12:07.403
Does that make sense?
237

237

00:12:07.403  -->  00:12:10.736
Let me show that to you her in the HTML.
238

238

00:12:11.771  -->  00:12:13.929
Let's use the figure element here,
239

239

00:12:13.929  -->  00:12:16.929
which I'm going to call gallery_item
240

240

00:12:20.710  -->  00:12:23.043
and gallery_item number one.
241

241

00:12:26.820  -->  00:12:31.391
This is a figure, so I have to put the name in here.
242

242

00:12:31.391  -->  00:12:35.224
Now, this is where I'm going to put the image.
243

243

00:12:36.799  -->  00:12:39.786
Let's get rid of this one.
244

244

00:12:39.786  -->  00:12:42.560
Remember, gallery item is what it is called.
245

245

00:12:42.560  -->  00:12:44.893
Let's just add that selector
246

246

00:12:50.874  -->  00:12:53.874
and then, forward the image as well.
247

247

00:12:56.155  -->  00:13:00.322
We actually want the image to have the width of 100%.
248

248

00:13:02.548  -->  00:13:03.892
Right?
249

249

00:13:03.892  -->  00:13:05.810
Let's take a look at that now.
250

250

00:13:05.810  -->  00:13:08.016
For now, of course, it's still the same,
251

251

00:13:08.016  -->  00:13:10.640
but now, it's not longer the image that is the grid item
252

252

00:13:10.640  -->  00:13:13.057
but the figure element, okay?
253

253

00:13:13.937  -->  00:13:17.187
Now, let's use the object fit property.
254

254

00:13:18.500  -->  00:13:22.250
We have to do that here on the image element.
255

255

00:13:24.021  -->  00:13:26.021
Object fit set to cover.
256

256

00:13:27.300  -->  00:13:28.810
Now, this is only going to work
257

257

00:13:28.810  -->  00:13:31.325
if you set both the width and the height.
258

258

00:13:31.325  -->  00:13:34.181
I once tried making this work for half an hour
259

259

00:13:34.181  -->  00:13:36.287
and it didn't work until I discovered
260

260

00:13:36.287  -->  00:13:40.501
that I have to manually set both the width and the height.
261

261

00:13:40.501  -->  00:13:43.125
Let's just set the height to 100% as well.
262

262

00:13:43.125  -->  00:13:45.621
With that, we're good to go.
263

263

00:13:45.621  -->  00:13:47.792
Actually, I'm also going to set the image
264

264

00:13:47.792  -->  00:13:49.637
to a block element.
265

265

00:13:49.637  -->  00:13:52.180
So, display block because otherwise
266

266

00:13:52.180  -->  00:13:56.056
it always has this weird, small, white space after it
267

267

00:13:56.056  -->  00:13:58.067
because it's treated like an inline element
268

268

00:13:58.067  -->  00:13:59.622
and so it's like it's text.
269

269

00:13:59.622  -->  00:14:01.539
So, that should fix it.
270

270

00:14:02.513  -->  00:14:04.208
And, indeed, it does.
271

271

00:14:04.208  -->  00:14:05.992
So, that part that was overlapping
272

272

00:14:05.992  -->  00:14:08.400
the figure element is now gone.
273

273

00:14:08.400  -->  00:14:10.567
Let's take a look at that.
274

274

00:14:11.590  -->  00:14:15.790
So, you see that the figure is right here in the grid cell
275

275

00:14:15.790  -->  00:14:18.373
and then, the image is in there
276

276

00:14:19.325  -->  00:14:22.715
and it's now only the height of the parent element itself
277

277

00:14:22.715  -->  00:14:25.361
and that's, again, because of the object fit
278

278

00:14:25.361  -->  00:14:27.712
property set to cover.
279

279

00:14:27.712  -->  00:14:30.129
Let's now position this item.
280

280

00:14:32.688  -->  00:14:34.605
This is the number one.
281

281

00:14:36.531  -->  00:14:39.281
So, grid-row from one and span to
282

282

00:14:45.953  -->  00:14:48.418
and this one, the same.
283

283

00:14:48.418  -->  00:14:49.870
Now, it's going to be bigger.
284

284

00:14:49.870  -->  00:14:50.869
Yep.
285

285

00:14:50.869  -->  00:14:52.896
And, you'll see that it's only occupying
286

286

00:14:52.896  -->  00:14:55.791
the exact grid area that we defined,
287

287

00:14:55.791  -->  00:14:57.696
just like we have it here.
288

288

00:14:57.696  -->  00:14:59.588
It's now exactly the same,
289

289

00:14:59.588  -->  00:15:01.155
no longer causing the problems
290

290

00:15:01.155  -->  00:15:04.592
with the intrinsic aspect ratio that we had before.
291

291

00:15:04.592  -->  00:15:06.259
The first image is now placed,
292

292

00:15:06.259  -->  00:15:09.234
we now know how this works and how we do all of this.
293

293

00:15:09.234  -->  00:15:11.297
In the next video, we can then place
294

294

00:15:11.297  -->  00:15:14.193
all of the remaining images in order to make it look,
295

295

00:15:14.193  -->  00:15:16.944
in the end, just like this.
296

296

00:15:16.944  -->  00:15:19.861
Stay tuned and see you in a minute.
