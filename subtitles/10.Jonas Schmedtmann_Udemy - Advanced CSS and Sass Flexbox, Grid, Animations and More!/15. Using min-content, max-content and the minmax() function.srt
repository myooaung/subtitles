1
1

00:00:01,734  -->  00:00:03,975
<v Instructor>Welcome to the last small demo project</v>
2

2

00:00:03,975  -->  00:00:07,846
in this first intro section of CSS Grids.
3

3

00:00:07,846  -->  00:00:09,416
So in this lecture, we're gonna learn
4

4

00:00:09,416  -->  00:00:13,075
some more advanced topics, including min-content,
5

5

00:00:13,075  -->  00:00:16,867
max-content, and also the minmax() function.
6

6

00:00:16,867  -->  00:00:18,987
So let's go straight to it.
7

7

00:00:18,987  -->  00:00:21,925
So once again, we start here from an empty CodePen,
8

8

00:00:21,925  -->  00:00:25,007
but actually let me go back to the one that we created
9

9

00:00:25,007  -->  00:00:27,150
in the last couple of lectures
10

10

00:00:27,150  -->  00:00:31,102
and actually copy all of our markup here.
11

11

00:00:31,102  -->  00:00:34,285
Okay, so I want the exact same HTML, and also,
12

12

00:00:34,285  -->  00:00:37,132
I am going to take all of the CSS here
13

13

00:00:37,132  -->  00:00:39,181
and then remove what I don't want.
14

14

00:00:39,181  -->  00:00:42,156
Okay, just so we can save some time,
15

15

00:00:42,156  -->  00:00:44,606
instead of having to write out the same stuff
16

16

00:00:44,606  -->  00:00:46,773
over and over again, okay?
17

17

00:00:48,339  -->  00:00:51,756
So I'm gonna remove all of this and okay.
18

18

00:00:52,970  -->  00:00:55,746
So now we're ready to start from a clean state.
19

19

00:00:55,746  -->  00:00:57,473
Actually, one that I want to do
20

20

00:00:57,473  -->  00:01:00,687
is to give each of these items a different background color
21

21

00:01:00,687  -->  00:01:03,065
so that we can better distinguish what we're gonna do
22

22

00:01:03,065  -->  00:01:05,048
in this lecture, okay?
23

23

00:01:05,048  -->  00:01:09,215
So number one, and let me just copy this part in here
24

24

00:01:13,467  -->  00:01:17,159
and then I'm gonna create eight of these.
25

25

00:01:17,159  -->  00:01:21,242
So two, three, four, five, six, seven, and eight,
26

26

00:01:24,395  -->  00:01:25,825
and this one we don't need.
27

27

00:01:25,825  -->  00:01:27,416
And the colors that I selected for them
28

28

00:01:27,416  -->  00:01:31,583
are called yellowgreen, this one is called blueviolet,
29

29

00:01:35,104  -->  00:01:39,271
then this is palevioletred, yeah exactly, then royalblue,
30

30

00:01:41,916  -->  00:01:42,749
goldenrod,
31

31

00:01:46,969  -->  00:01:51,341
crimson, and finally darkslategray or something like that,
32

32

00:01:51,341  -->  00:01:52,508
darkslategray.
33

33

00:01:54,056  -->  00:01:55,454
All right.
34

34

00:01:55,454  -->  00:01:58,495
So let's now define our explicit grid, okay,
35

35

00:01:58,495  -->  00:02:00,381
and I hope you remember from the last couple of lectures
36

36

00:02:00,381  -->  00:02:02,183
what an explicit grid is.
37

37

00:02:02,183  -->  00:02:03,776
So it's just the one that we defined
38

38

00:02:03,776  -->  00:02:07,728
with the template rows and template columns, okay?
39

39

00:02:07,728  -->  00:02:10,895
So the first thing, display: grid,
40

40

00:02:10,895  -->  00:02:14,748
and then let's give this just two rows.
41

41

00:02:14,748  -->  00:02:16,498
So grid-template-rows
42

42

00:02:17,903  -->  00:02:22,070
and I want them both to be 250 or 150 pixels high, okay?
43

43

00:02:24,483  -->  00:02:26,499
So that's what we see down here,
44

44

00:02:26,499  -->  00:02:28,597
and there you see that then
45

45

00:02:28,597  -->  00:02:30,432
the other six items here of course,
46

46

00:02:30,432  -->  00:02:33,832
they're added into the implicit grid, okay,
47

47

00:02:33,832  -->  00:02:36,249
so because right now we only defined two cells
48

48

00:02:36,249  -->  00:02:38,453
and so the remaining ones are then added
49

49

00:02:38,453  -->  00:02:41,860
to the implicit grid that we didn't define, all right?
50

50

00:02:41,860  -->  00:02:44,527
So let's now define the columns,
51

51

00:02:47,044  -->  00:02:48,734
and here is the new thing.
52

52

00:02:48,734  -->  00:02:52,750
So, so far we have only used like real units here
53

53

00:02:52,750  -->  00:02:56,374
in these columns definitions or the row definitions,
54

54

00:02:56,374  -->  00:02:59,524
so like pixels, percentages, or the fractional unit,
55

55

00:02:59,524  -->  00:03:00,826
so something like this.
56

56

00:03:00,826  -->  00:03:04,064
So we could do 1fr, 1fr, and 1fr,
57

57

00:03:04,064  -->  00:03:08,355
or of course a repeat, so repeat four, and then 1fr.
58

58

00:03:08,355  -->  00:03:10,988
That would be the same, but I want to show you something now
59

59

00:03:10,988  -->  00:03:12,660
and so I did it like this.
60

60

00:03:12,660  -->  00:03:14,382
So up until this point,
61

61

00:03:14,382  -->  00:03:17,002
we always used these normal units here
62

62

00:03:17,002  -->  00:03:20,072
but there are some new keywords that are associated
63

63

00:03:20,072  -->  00:03:22,998
with CSS Grids that we can use here instead
64

64

00:03:22,998  -->  00:03:24,349
and the first one that I want to show you
65

65

00:03:24,349  -->  00:03:25,923
is called max-content.
66

66

00:03:25,923  -->  00:03:28,181
So instead of having here a real unit,
67

67

00:03:28,181  -->  00:03:32,264
let's just add max-content, and see what happens.
68

68

00:03:33,659  -->  00:03:35,871
Okay, and so you see that the first track,
69

69

00:03:35,871  -->  00:03:39,108
so the first column track here which is this one of course
70

70

00:03:39,108  -->  00:03:41,741
has the exact width so that it can accommodate
71

71

00:03:41,741  -->  00:03:44,077
here this content, okay?
72

72

00:03:44,077  -->  00:03:47,248
So this is the largest content that we have in this column
73

73

00:03:47,248  -->  00:03:49,541
and so therefore that becomes the width
74

74

00:03:49,541  -->  00:03:51,526
of this entire column, okay,
75

75

00:03:51,526  -->  00:03:54,124
and so that's what the max keyword does here
76

76

00:03:54,124  -->  00:03:55,032
with the columns.
77

77

00:03:55,032  -->  00:03:57,651
It makes this column as wide as it has to be
78

78

00:03:57,651  -->  00:04:02,202
to fit this content, and in fact, max-content also tries
79

79

00:04:02,202  -->  00:04:04,529
not to make any line breaks.
80

80

00:04:04,529  -->  00:04:09,304
So let's also add max-content here to the last one
81

81

00:04:09,304  -->  00:04:13,125
and so now it has the width of this word Flexbox,
82

82

00:04:13,125  -->  00:04:14,996
but now, let's see what happens
83

83

00:04:14,996  -->  00:04:18,879
if we add a bunch of text here to this last field here,
84

84

00:04:18,879  -->  00:04:20,277
this last cell.
85

85

00:04:20,277  -->  00:04:21,110
So let's see.
86

86

00:04:21,110  -->  00:04:25,116
Modern CSS with Flexbox and Grid is great
87

87

00:04:25,116  -->  00:04:26,033
and amazing
88

88

00:04:29,569  -->  00:04:32,069
and just awesome to work with.
89

89

00:04:34,119  -->  00:04:35,662
Okay, so a bunch of text.
90

90

00:04:35,662  -->  00:04:37,078
And you see what happened now.
91

91

00:04:37,078  -->  00:04:39,916
It expanded this column and it became really wide
92

92

00:04:39,916  -->  00:04:42,759
because as I mentioned, it tries to make the column
93

93

00:04:42,759  -->  00:04:45,933
as wide as possible without having to cause any line break
94

94

00:04:45,933  -->  00:04:49,654
in the content, and so that's exactly what happened here.
95

95

00:04:49,654  -->  00:04:51,507
And then of course, the remaining space.
96

96

00:04:51,507  -->  00:04:55,199
So this one here in the middle is then divided in
97

97

00:04:55,199  -->  00:04:57,730
for these two columns, so the 1fr and 1fr
98

98

00:04:57,730  -->  00:04:59,471
are these two columns here.
99

99

00:04:59,471  -->  00:05:01,440
So that's the remaining space.
100

100

00:05:01,440  -->  00:05:04,022
Now in this case, it doesn't make much sense here for us
101

101

00:05:04,022  -->  00:05:04,855
right?
102

102

00:05:04,855  -->  00:05:07,128
So let's actually change this.
103

103

00:05:07,128  -->  00:05:10,803
And what we can do is to instead of writing max-content
104

104

00:05:10,803  -->  00:05:13,515
to just put min-content, so that's another keyword
105

105

00:05:13,515  -->  00:05:17,221
that was introduced with CSS Grid and that we can use here.
106

106

00:05:17,221  -->  00:05:19,092
And so what happens now is that the column track
107

107

00:05:19,092  -->  00:05:22,840
takes the largest width that is needed to fit this content
108

108

00:05:22,840  -->  00:05:26,288
without overflowing, but actually it does overflow
109

109

00:05:26,288  -->  00:05:28,919
a bit down here, right?
110

110

00:05:28,919  -->  00:05:33,086
So the column is just the width of this awesome word here,
111

111

00:05:34,856  -->  00:05:37,966
right, so that's the minimum width that this column
112

112

00:05:37,966  -->  00:05:40,701
has to have in order to fit the content,
113

113

00:05:40,701  -->  00:05:42,654
so without overflowing here on the sides,
114

114

00:05:42,654  -->  00:05:47,272
but now as we define the rows with a height of 150 pixels,
115

115

00:05:47,272  -->  00:05:50,283
this content doesn't really fit anymore into the height,
116

116

00:05:50,283  -->  00:05:51,223
right?
117

117

00:05:51,223  -->  00:05:54,464
And so what we can do is to use min-content or max-content
118

118

00:05:54,464  -->  00:05:56,381
also on the rows, okay?
119

119

00:05:57,608  -->  00:06:00,081
So let me show that to you.
120

120

00:06:00,081  -->  00:06:02,945
So let's just get rid of that one
121

121

00:06:02,945  -->  00:06:06,392
and put a new one down here and then instead of saying
122

122

00:06:06,392  -->  00:06:09,021
that the height should be fixed 150 pixels,
123

123

00:06:09,021  -->  00:06:11,938
let's put min-content here as well.
124

124

00:06:13,580  -->  00:06:16,666
And let's see how that works out, and all right.
125

125

00:06:16,666  -->  00:06:19,424
Now then all of this text fits in the height
126

126

00:06:19,424  -->  00:06:23,051
and also the width of this grid cell here, right?
127

127

00:06:23,051  -->  00:06:24,793
Now what also happened is of course
128

128

00:06:24,793  -->  00:06:29,593
that this first row now also has just a min width
129

129

00:06:29,593  -->  00:06:32,676
to accommodate, to fit the text here.
130

130

00:06:33,717  -->  00:06:35,764
So in this case, this is just one line.
131

131

00:06:35,764  -->  00:06:38,035
Let's just increase this a little bit
132

132

00:06:38,035  -->  00:06:40,989
like Modern modern modern, I don't know,
133

133

00:06:40,989  -->  00:06:42,712
something like this.
134

134

00:06:42,712  -->  00:06:45,152
So actually this column just got wider
135

135

00:06:45,152  -->  00:06:46,876
because we have max-content here,
136

136

00:06:46,876  -->  00:06:49,846
but if you put this to min-content, then you would see
137

137

00:06:49,846  -->  00:06:52,067
that this happens, all right?
138

138

00:06:52,067  -->  00:06:55,023
So now the column is just as wide as necessary
139

139

00:06:55,023  -->  00:06:58,665
to fit one of these words and then the row track
140

140

00:06:58,665  -->  00:07:02,540
also expands in order to fit all of this content in there,
141

141

00:07:02,540  -->  00:07:03,654
okay?
142

142

00:07:03,654  -->  00:07:05,086
Now let's get rid of that.
143

143

00:07:05,086  -->  00:07:08,765
This was just to show you even further how this works.
144

144

00:07:08,765  -->  00:07:11,714
And on this case, it's really not so different
145

145

00:07:11,714  -->  00:07:16,407
to having max or min here because it's just one word anyway
146

146

00:07:16,407  -->  00:07:20,191
and so there's nothing to break, nothing to overflow.
147

147

00:07:20,191  -->  00:07:23,801
So this is how max-content and min-content work.
148

148

00:07:23,801  -->  00:07:25,596
Does it make sense to you?
149

149

00:07:25,596  -->  00:07:29,100
Now suppose that we really wanted this first row track here
150

150

00:07:29,100  -->  00:07:33,118
to be 150 pixels height, not just the min-content,
151

151

00:07:33,118  -->  00:07:36,283
so not just to fit these words that we have here.
152

152

00:07:36,283  -->  00:07:39,351
So we could hard-code it like this.
153

153

00:07:39,351  -->  00:07:43,518
So grid-template-rows, and we could say 150 pixels here
154

154

00:07:46,396  -->  00:07:50,563
and then min-content and then this would kind of work
155

155

00:07:51,714  -->  00:07:53,753
the way we wanted it to be, right?
156

156

00:07:53,753  -->  00:07:56,138
But now, just suppose that, for some reason,
157

157

00:07:56,138  -->  00:07:59,982
we add all of this text here to this cell
158

158

00:07:59,982  -->  00:08:04,149
or actually, not to this one, actually to this one here,
159

159

00:08:06,732  -->  00:08:09,080
and so now you see that it actually overflows.
160

160

00:08:09,080  -->  00:08:12,227
So it again no longer fits, right?
161

161

00:08:12,227  -->  00:08:16,137
So let's go back and let me tell you the solution
162

162

00:08:16,137  -->  00:08:17,969
to this problem.
163

163

00:08:17,969  -->  00:08:19,818
And the solution is to use something called
164

164

00:08:19,818  -->  00:08:22,717
the minmax() function, okay?
165

165

00:08:22,717  -->  00:08:26,416
So, let's get rid of this one here,
166

166

00:08:26,416  -->  00:08:30,583
and again add a new one based on the one that we had before.
167

167

00:08:32,457  -->  00:08:35,818
Okay, so what is the minmax() function?
168

168

00:08:35,818  -->  00:08:39,145
Well basically the minmax() function is just something
169

169

00:08:39,145  -->  00:08:42,594
that we pass two values in and then CSS ensures
170

170

00:08:42,594  -->  00:08:47,373
that the track will always stay between these two values.
171

171

00:08:47,373  -->  00:08:49,898
So imagine that we pass into the minmax() function
172

172

00:08:49,898  -->  00:08:52,991
100 pixels and 200 pixels for a column,
173

173

00:08:52,991  -->  00:08:56,313
and so CSS grid will ensure that no matter what happens,
174

174

00:08:56,313  -->  00:08:58,609
this grid column will always stay
175

175

00:08:58,609  -->  00:09:02,553
between 100 and 200 pixels width, okay?
176

176

00:09:02,553  -->  00:09:06,107
So let me show that to you in practice with this example.
177

177

00:09:06,107  -->  00:09:09,400
And so we write minmax, and we say that the rows
178

178

00:09:09,400  -->  00:09:13,567
should be at least 150 pixels and at most min-content.
179

179

00:09:16,138  -->  00:09:19,038
Okay, and that is exactly what we were talking about before.
180

180

00:09:19,038  -->  00:09:20,745
So this is what we want.
181

181

00:09:20,745  -->  00:09:25,311
So again, we want the row to be at least 150 pixels high,
182

182

00:09:25,311  -->  00:09:29,151
so that's happening here in this first row here, right?
183

183

00:09:29,151  -->  00:09:31,163
Let's give it some more space here.
184

184

00:09:31,163  -->  00:09:32,620
So that is happening here.
185

185

00:09:32,620  -->  00:09:34,591
So this one has now 150 pixels again
186

186

00:09:34,591  -->  00:09:36,496
but the second one is larger
187

187

00:09:36,496  -->  00:09:38,857
and that's because we allowed CSS Grid
188

188

00:09:38,857  -->  00:09:43,358
to size somewhere between 150 pixels and the min-content,
189

189

00:09:43,358  -->  00:09:46,403
okay, and if we were now to remove this text here,
190

190

00:09:46,403  -->  00:09:49,956
so I'm gonna cut it and put something else,
191

191

00:09:49,956  -->  00:09:52,447
like just great, like it was before,
192

192

00:09:52,447  -->  00:09:56,785
then you see that it is now 150 pixels high, right?
193

193

00:09:56,785  -->  00:09:59,772
So let's put that back, and you will see
194

194

00:09:59,772  -->  00:10:02,190
that it now grows again, and the same thing
195

195

00:10:02,190  -->  00:10:05,014
if I put it here into this pink cell.
196

196

00:10:05,014  -->  00:10:06,097
So let's see.
197

197

00:10:08,585  -->  00:10:09,832
And all right.
198

198

00:10:09,832  -->  00:10:12,658
So now it grew in order to accommodate to fit
199

199

00:10:12,658  -->  00:10:14,863
all of this content again.
200

200

00:10:14,863  -->  00:10:16,696
So does that make sense?
201

201

00:10:16,696  -->  00:10:17,917
Let me actually give you
202

202

00:10:17,917  -->  00:10:20,227
maybe a more easy-to-understand example
203

203

00:10:20,227  -->  00:10:22,666
with some columns now, okay?
204

204

00:10:22,666  -->  00:10:26,719
So let's get rid of all of this huge text that we put here
205

205

00:10:26,719  -->  00:10:29,046
and so let's get back to the old sentence
206

206

00:10:29,046  -->  00:10:31,393
that we had before so that I can now show you
207

207

00:10:31,393  -->  00:10:34,908
some other examples of using the minmax() function
208

208

00:10:34,908  -->  00:10:36,716
with the columns, okay?
209

209

00:10:36,716  -->  00:10:39,549
So let me just put a comment here,
210

210

00:10:41,267  -->  00:10:44,100
Using min-content and max-content,
211

211

00:10:47,474  -->  00:10:49,624
and now let's do this all again,
212

212

00:10:49,624  -->  00:10:52,167
and now let's do another part here of the code
213

213

00:10:52,167  -->  00:10:56,334
where we used the minmax() function.
214

214

00:11:00,091  -->  00:11:00,924
All right.
215

215

00:11:01,976  -->  00:11:04,291
So let's say that we want the first column
216

216

00:11:04,291  -->  00:11:08,124
to always be between 200 and 300 pixels, okay?
217

217

00:11:09,388  -->  00:11:11,471
So grid-template-columns,
218

218

00:11:12,702  -->  00:11:14,530
and we can now use the minmax() function
219

219

00:11:14,530  -->  00:11:16,518
to say exactly that.
220

220

00:11:16,518  -->  00:11:19,421
So the minimum should be 200 pixels
221

221

00:11:19,421  -->  00:11:22,642
and the maximum 300 pixels, and then the other ones
222

222

00:11:22,642  -->  00:11:25,511
should just fill up the remaining space.
223

223

00:11:25,511  -->  00:11:28,178
So we can use repeat and 3, 1fr.
224

224

00:11:30,504  -->  00:11:32,886
So nothing new here, right?
225

225

00:11:32,886  -->  00:11:37,053
So let's check this out now here with the Inspector again
226

226

00:11:38,042  -->  00:11:41,084
and so yeah, so you see that now this column
227

227

00:11:41,084  -->  00:11:44,462
has actually 300 pixels of width, right?
228

228

00:11:44,462  -->  00:11:46,844
Now in order to see this a little bit better,
229

229

00:11:46,844  -->  00:11:49,475
we should actually give this here, this container,
230

230

00:11:49,475  -->  00:11:52,033
a relative width so that we can play around
231

231

00:11:52,033  -->  00:11:54,786
here with the viewport width, okay?
232

232

00:11:54,786  -->  00:11:57,531
So right now the width is 1,000 pixels
233

233

00:11:57,531  -->  00:12:00,781
but let me just specify a new one here,
234

234

00:12:01,762  -->  00:12:03,113
and let's say 90%.
235

235

00:12:03,113  -->  00:12:06,364
So that's gonna override then the 1,000 pixels, okay?
236

236

00:12:06,364  -->  00:12:09,229
And so now if we play around here with this viewport width,
237

237

00:12:09,229  -->  00:12:11,433
we can actually see what will happen.
238

238

00:12:11,433  -->  00:12:12,850
So let's do that.
239

239

00:12:15,771  -->  00:12:18,561
And you see that nothing changes this far.
240

240

00:12:18,561  -->  00:12:20,054
So let's inspect it again.
241

241

00:12:20,054  -->  00:12:23,768
So this one has still 300 pixels and these other ones
242

242

00:12:23,768  -->  00:12:25,513
are lot smaller.
243

243

00:12:25,513  -->  00:12:28,637
So let's decrease this even further and now you see
244

244

00:12:28,637  -->  00:12:30,558
that it started to change.
245

245

00:12:30,558  -->  00:12:31,822
You see?
246

246

00:12:31,822  -->  00:12:34,671
So now it has a width of 200 pixels
247

247

00:12:34,671  -->  00:12:37,141
and we could put it somewhere in between
248

248

00:12:37,141  -->  00:12:40,675
and now you see it has 230, okay?
249

249

00:12:40,675  -->  00:12:44,842
Now it has 271, but it always stays between 300 as it is now
250

250

00:12:46,951  -->  00:12:51,860
and 200, so even if we make this even, even really small,
251

251

00:12:51,860  -->  00:12:54,186
so you see that now the grid doesn't even fit anymore,
252

252

00:12:54,186  -->  00:12:57,813
but the first column, it's never less than 200 pixels.
253

253

00:12:57,813  -->  00:12:58,773
So you see that?
254

254

00:12:58,773  -->  00:13:01,385
It is still 200 pixels, and no matter what we do,
255

255

00:13:01,385  -->  00:13:06,202
this will always be the minimum width of this column, okay?
256

256

00:13:06,202  -->  00:13:09,335
So this is really powerful here with Grid.
257

257

00:13:09,335  -->  00:13:11,378
The minmax() function is a great addition
258

258

00:13:11,378  -->  00:13:13,229
and we're gonna use it all the time actually
259

259

00:13:13,229  -->  00:13:14,579
and there's some great techniques
260

260

00:13:14,579  -->  00:13:16,571
that I'm gonna show you also in the next video
261

261

00:13:16,571  -->  00:13:18,654
where it comes in really handy.
262

262

00:13:18,654  -->  00:13:20,183
So let's look at another example
263

263

00:13:20,183  -->  00:13:23,647
because this can be different from pixels of course.
264

264

00:13:23,647  -->  00:13:28,233
So let me put 50% here, okay, and so yeah.
265

265

00:13:28,233  -->  00:13:31,489
So now you see that it is 50% here of this entire column.
266

266

00:13:31,489  -->  00:13:33,069
So let's see the size.
267

267

00:13:33,069  -->  00:13:37,236
So the container has 1,007 pixels and so this one has 503,
268

268

00:13:38,849  -->  00:13:40,912
which is half of the entire width.
269

269

00:13:40,912  -->  00:13:43,919
And so if we now start decreasing this,
270

270

00:13:43,919  -->  00:13:46,936
then of course the first column track also decreases
271

271

00:13:46,936  -->  00:13:50,171
it still always has 50%, so you see?
272

272

00:13:50,171  -->  00:13:53,754
The total is 680 so this one is 340, right?
273

273

00:13:55,149  -->  00:13:58,446
But at some point, there will come a point
274

274

00:13:58,446  -->  00:14:00,330
where this is no longer true.
275

275

00:14:00,330  -->  00:14:04,099
So it's no longer 50%, but it's 200 pixels, right,
276

276

00:14:04,099  -->  00:14:06,051
because we said that it should never be less
277

277

00:14:06,051  -->  00:14:08,399
than 200 pixels, right?
278

278

00:14:08,399  -->  00:14:10,529
So just like before.
279

279

00:14:10,529  -->  00:14:12,183
And just another example.
280

280

00:14:12,183  -->  00:14:16,327
We can of course also put a fractional unit here, okay?
281

281

00:14:16,327  -->  00:14:19,274
And so then, at this state, it is the same width
282

282

00:14:19,274  -->  00:14:22,745
as all of the other columns, but as we start decreasing it,
283

283

00:14:22,745  -->  00:14:26,738
at some point, you see that it fixes at this 200 pixels
284

284

00:14:26,738  -->  00:14:30,298
while all the other ones then divide their remaining space
285

285

00:14:30,298  -->  00:14:32,733
by these three columns, right?
286

286

00:14:32,733  -->  00:14:35,472
So this one stays at 200 no matter what happens
287

287

00:14:35,472  -->  00:14:38,818
and then these take up the remaining space.
288

288

00:14:38,818  -->  00:14:42,107
Now one interesting thing that we can see here
289

289

00:14:42,107  -->  00:14:45,216
is that this column here is actually larger than this,
290

290

00:14:45,216  -->  00:14:48,472
and actually these three have all different width, okay,
291

291

00:14:48,472  -->  00:14:51,616
even if we set them all to one fractional unit.
292

292

00:14:51,616  -->  00:14:53,390
So we said that they should be all the same,
293

293

00:14:53,390  -->  00:14:55,527
that they should be all one fractional unit,
294

294

00:14:55,527  -->  00:14:58,072
and this behavior actually confused a lot of people
295

295

00:14:58,072  -->  00:15:01,074
but it really shouldn't because it's really straightforward.
296

296

00:15:01,074  -->  00:15:05,020
So the CSS Grid specification says that a fractional unit
297

297

00:15:05,020  -->  00:15:09,343
fills up the entire remaining space but it is never smaller
298

298

00:15:09,343  -->  00:15:13,510
than the minimum content of a row or a column, okay?
299

299

00:15:14,641  -->  00:15:18,339
So ideally, these three columns here should be all the same
300

300

00:15:18,339  -->  00:15:21,585
because they are all 1fr, but at the limit,
301

301

00:15:21,585  -->  00:15:24,027
when this content here gets too wide,
302

302

00:15:24,027  -->  00:15:27,349
then this fractional unit simply takes the minimum width
303

303

00:15:27,349  -->  00:15:31,174
that it needs to fill the column without overflowing, okay?
304

304

00:15:31,174  -->  00:15:33,841
So that's just an interesting fact
305

305

00:15:33,841  -->  00:15:35,476
that confused a lot of people,
306

306

00:15:35,476  -->  00:15:38,779
but now it's not gonna confuse you, okay?
307

307

00:15:38,779  -->  00:15:43,492
So let's get back to the original size here, and yeah.
308

308

00:15:43,492  -->  00:15:46,179
So now you know how the minmax() function works,
309

309

00:15:46,179  -->  00:15:49,786
how min-content and max-content work,
310

310

00:15:49,786  -->  00:15:51,812
and that's all that I had to show you
311

311

00:15:51,812  -->  00:15:53,361
in this lecture actually.
312

312

00:15:53,361  -->  00:15:56,078
Now in the next lecture, we're actually gonna take this
313

313

00:15:56,078  -->  00:15:58,709
a step further and bring even more stuff
314

314

00:15:58,709  -->  00:16:00,577
into this grid definition here
315

315

00:16:00,577  -->  00:16:03,900
so that we can build truly advanced layouts, okay?
316

316

00:16:03,900  -->  00:16:05,795
But for now, I really hope that you understand
317

317

00:16:05,795  -->  00:16:08,239
all of this, what we just learned in this lecture
318

318

00:16:08,239  -->  00:16:11,332
and only if you really did, you should then move on
319

319

00:16:11,332  -->  00:16:14,249
right on to the next video with me.
