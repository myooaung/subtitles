WEBVTT
1
1

00:00:01.458  -->  00:00:02.875
<v Instructor>In this lecture you will learn</v>
2

2

00:00:02.875  -->  00:00:06.506
all about the auto-fit and auto-fill keywords,
3

3

00:00:06.506  -->  00:00:09.236
and also how to build truly responsive layouts
4

4

00:00:09.236  -->  00:00:13.153
with them without writing a single media query.
5

5

00:00:14.144  -->  00:00:18.144
So let's get rid of this code that we have here.
6

6

00:00:22.535  -->  00:00:24.785
And add a new comment here.
7

7

00:00:28.969  -->  00:00:30.469
So using auto-fill
8

8

00:00:32.503  -->  00:00:33.586
and auto-fit.
9

9

00:00:37.574  -->  00:00:38.407
Okay.
10

10

00:00:38.407  -->  00:00:41.740
And actually, we want to roll this back,
11

11

00:00:42.913  -->  00:00:46.526
okay, so that we have a 150 pixels row.
12

12

00:00:46.526  -->  00:00:50.886
So we're also back to the 1,000 pixel container here, okay?
13

13

00:00:50.886  -->  00:00:52.885
So just like we have defined here,
14

14

00:00:52.885  -->  00:00:55.899
and that's better to show you how auto-fit
15

15

00:00:55.899  -->  00:00:57.623
and auto-fill actually work.
16

16

00:00:57.623  -->  00:00:58.456
Okay?
17

17

00:00:58.456  -->  00:01:02.515
So where and how do we use these keywords?
18

18

00:01:02.515  -->  00:01:03.591
So let me show it to you.
19

19

00:01:03.591  -->  00:01:05.674
So grid-template-columns,
20

20

00:01:07.657  -->  00:01:12.094
and so what we usually did was to use the repeat keyword,
21

21

00:01:12.094  -->  00:01:15.329
right, then put some number in here, like four,
22

22

00:01:15.329  -->  00:01:19.419
and then say, for example, one fractional unit, right?
23

23

00:01:19.419  -->  00:01:22.796
And that then translate to something like this.
24

24

00:01:22.796  -->  00:01:25.105
But what if we didn't want to specify
25

25

00:01:25.105  -->  00:01:26.579
this exact number here?
26

26

00:01:26.579  -->  00:01:28.689
What if we simply wanted to adapt this
27

27

00:01:28.689  -->  00:01:32.024
to the number of items that we have?
28

28

00:01:32.024  -->  00:01:35.267
So, for example, let's put 100 pixels here,
29

29

00:01:35.267  -->  00:01:38.511
and it now is going to create four columns,
30

30

00:01:38.511  -->  00:01:39.913
each with 100 pixels.
31

31

00:01:39.913  -->  00:01:42.530
But imagine if you want it to have eight columns here,
32

32

00:01:42.530  -->  00:01:44.023
but instead of writing eight,
33

33

00:01:44.023  -->  00:01:46.120
we wanted this to happen automatically.
34

34

00:01:46.120  -->  00:01:48.680
And that is where auto-fill comes in.
35

35

00:01:48.680  -->  00:01:52.604
So, instead of a number here, we can write auto-fill,
36

36

00:01:52.604  -->  00:01:56.533
and then CSS Grid is automatically gonna create
37

37

00:01:56.533  -->  00:01:58.168
eight tracks for us.
38

38

00:01:58.168  -->  00:02:01.090
And actually, in fact, it's not just eight tracks,
39

39

00:02:01.090  -->  00:02:03.707
it creates 10 tracks, okay?
40

40

00:02:03.707  -->  00:02:05.584
Let me show that to you here with the Inspector.
41

41

00:02:05.584  -->  00:02:08.485
And so here we see the 10 column tracks.
42

42

00:02:08.485  -->  00:02:10.314
And why 10, and not eight?
43

43

00:02:10.314  -->  00:02:14.230
Well, that's because our container is 1,000 pixels,
44

44

00:02:14.230  -->  00:02:16.233
as you can see, and we specified
45

45

00:02:16.233  -->  00:02:18.610
that we wanted 100 pixel columns,
46

46

00:02:18.610  -->  00:02:22.583
and so 1,000 divided by 100 is, of course, 10.
47

47

00:02:22.583  -->  00:02:26.240
And therefore, it then creates 10 column tracks.
48

48

00:02:26.240  -->  00:02:28.728
And then after that it actually puts our items
49

49

00:02:28.728  -->  00:02:30.841
in there also, of course.
50

50

00:02:30.841  -->  00:02:32.539
Okay, does it make sense?
51

51

00:02:32.539  -->  00:02:34.478
So again, what auto-fill here does
52

52

00:02:34.478  -->  00:02:37.557
is that it automatically creates as many tracks
53

53

00:02:37.557  -->  00:02:40.260
with the desired width the we specify here
54

54

00:02:40.260  -->  00:02:42.196
as fit into the container.
55

55

00:02:42.196  -->  00:02:45.002
And in this case, that's 10 tracks, okay?
56

56

00:02:45.002  -->  00:02:47.806
Because 1,000 divided by 100 is 10.
57

57

00:02:47.806  -->  00:02:50.518
Now, what's different then between auto-fill
58

58

00:02:50.518  -->  00:02:53.954
and auto-fit, that I'm going to show you next?
59

59

00:02:53.954  -->  00:02:55.884
So auto-fill does it like this,
60

60

00:02:55.884  -->  00:02:58.467
and auto-fit does it like this.
61

61

00:02:59.469  -->  00:03:00.302
Okay?
62

62

00:03:00.302  -->  00:03:02.801
So, what happened here, what's the difference?
63

63

00:03:02.801  -->  00:03:05.678
Well, it actually still created the 10 columns.
64

64

00:03:05.678  -->  00:03:07.231
And we can see that here
65

65

00:03:07.231  -->  00:03:09.376
by the last line number, which is 11.
66

66

00:03:09.376  -->  00:03:12.594
And so this means that the grid actually has 10 columns.
67

67

00:03:12.594  -->  00:03:14.272
So you can see that it's 10 columns,
68

68

00:03:14.272  -->  00:03:17.028
because it ends here still at number 11,
69

69

00:03:17.028  -->  00:03:18.636
but what auto-fit does
70

70

00:03:18.636  -->  00:03:20.843
is that it actually collapses these tracks
71

71

00:03:20.843  -->  00:03:22.643
and gives it a width of zero,
72

72

00:03:22.643  -->  00:03:26.348
creating then this extra space that we see here.
73

73

00:03:26.348  -->  00:03:27.181
Okay?
74

74

00:03:27.181  -->  00:03:28.547
So basically, it is as if
75

75

00:03:28.547  -->  00:03:30.938
it only created really eight tracks,
76

76

00:03:30.938  -->  00:03:32.334
right, but actually, down here,
77

77

00:03:32.334  -->  00:03:36.113
you can see that it's only like eight column tracks, right?
78

78

00:03:36.113  -->  00:03:37.630
So, it creates these tracks,
79

79

00:03:37.630  -->  00:03:39.746
and then leaves this empty space here,
80

80

00:03:39.746  -->  00:03:42.454
which we can then fill, if we want it.
81

81

00:03:42.454  -->  00:03:43.287
Okay?
82

82

00:03:43.287  -->  00:03:44.342
And so that's the big difference.
83

83

00:03:44.342  -->  00:03:47.198
With auto-fill, it actually creates 10 columns,
84

84

00:03:47.198  -->  00:03:48.852
so as many as fit in here,
85

85

00:03:48.852  -->  00:03:51.889
while with auto-fit, it still creates these 10 columns,
86

86

00:03:51.889  -->  00:03:54.076
but then collapses the ones that are empty
87

87

00:03:54.076  -->  00:03:56.461
to have a width of zero,
88

88

00:03:56.461  -->  00:03:57.294
okay?
89

89

00:03:57.294  -->  00:04:00.928
And so what this allows us to do is something really great.
90

90

00:04:00.928  -->  00:04:03.355
So let me copy this here,
91

91

00:04:03.355  -->  00:04:05.180
and put it here, and so this allows us
92

92

00:04:05.180  -->  00:04:09.360
to use the minmax function in here like this.
93

93

00:04:09.360  -->  00:04:12.460
So, minmax, it should be at least 100 pixels,
94

94

00:04:12.460  -->  00:04:16.341
but it can be up until one fractional unit.
95

95

00:04:16.341  -->  00:04:19.253
So watch what happens now.
96

96

00:04:19.253  -->  00:04:20.587
And here we go.
97

97

00:04:20.587  -->  00:04:23.642
So it occupied our entire grid here.
98

98

00:04:23.642  -->  00:04:26.203
So our entire grid container, right?
99

99

00:04:26.203  -->  00:04:28.348
So basically filling that extra space
100

100

00:04:28.348  -->  00:04:31.362
that was left over by expanding these columns
101

101

00:04:31.362  -->  00:04:33.922
into more than 100 pixels of width.
102

102

00:04:33.922  -->  00:04:35.944
Now, to show this even better to you,
103

103

00:04:35.944  -->  00:04:40.557
let's go back to having the width of 90%,
104

104

00:04:40.557  -->  00:04:42.150
90%,
105

105

00:04:42.150  -->  00:04:43.133
okay.
106

106

00:04:43.133  -->  00:04:46.667
And so now let me show you what happens as we decrease this.
107

107

00:04:46.667  -->  00:04:50.834
So right now the container has 1,007 pixels of width.
108

108

00:04:51.798  -->  00:04:53.383
So and now I start reducing,
109

109

00:04:53.383  -->  00:04:56.306
and watch what is going to happen.
110

110

00:04:56.306  -->  00:04:59.363
So right now we have 831 pixels,
111

111

00:04:59.363  -->  00:05:02.636
and so we can still fit the eight columns in there, right?
112

112

00:05:02.636  -->  00:05:04.153
Because each column has to be
113

113

00:05:04.153  -->  00:05:06.671
at least 100 pixels here, right?
114

114

00:05:06.671  -->  00:05:10.044
So 100 pixels has to be the minimum of each column,
115

115

00:05:10.044  -->  00:05:12.604
and right now we have 830 pixels.
116

116

00:05:12.604  -->  00:05:15.172
So we can still fit the eight columns in here.
117

117

00:05:15.172  -->  00:05:18.638
But watch what happens if I decrease this even further.
118

118

00:05:18.638  -->  00:05:20.983
And so, here you see it.
119

119

00:05:20.983  -->  00:05:23.526
The last grid item moved into the next line,
120

120

00:05:23.526  -->  00:05:24.825
and that's because right now
121

121

00:05:24.825  -->  00:05:26.724
we only have seven columns here.
122

122

00:05:26.724  -->  00:05:28.736
So let's check it out, and yeah,
123

123

00:05:28.736  -->  00:05:32.406
you see that we only have 796, so it's almost 800,
124

124

00:05:32.406  -->  00:05:34.247
but it's no longer really 800.
125

125

00:05:34.247  -->  00:05:36.764
And so we can no longer fit eight columns here
126

126

00:05:36.764  -->  00:05:38.895
with 100 pixel each, right?
127

127

00:05:38.895  -->  00:05:41.736
Because for that we would need 800 pixels.
128

128

00:05:41.736  -->  00:05:43.981
And so what auto-fit here does then
129

129

00:05:43.981  -->  00:05:46.627
is that it simply creates instead of eight columns,
130

130

00:05:46.627  -->  00:05:48.467
seven columns, and so that's actually
131

131

00:05:48.467  -->  00:05:49.796
what you see down here.
132

132

00:05:49.796  -->  00:05:53.462
So now you'll no longer have eight columns, but seven.
133

133

00:05:53.462  -->  00:05:55.801
And as you can imagine, this will keep happening
134

134

00:05:55.801  -->  00:05:58.710
as we decrease this even further.
135

135

00:05:58.710  -->  00:06:01.265
So let's now actually, instead of 100 pixels,
136

136

00:06:01.265  -->  00:06:04.025
put 200 pixels here, okay.
137

137

00:06:04.025  -->  00:06:05.744
So what's gonna happen then?
138

138

00:06:05.744  -->  00:06:09.144
Well, instead of having eight columns, we have five.
139

139

00:06:09.144  -->  00:06:12.531
And that's because right now we have 1,007 pixels
140

140

00:06:12.531  -->  00:06:14.043
and as you see,
141

141

00:06:14.043  -->  00:06:15.401
1,007
142

142

00:06:15.401  -->  00:06:17.224
divided by 200 pixels
143

143

00:06:17.224  -->  00:06:19.927
fits approximately five columns, all right?
144

144

00:06:19.927  -->  00:06:21.706
And so we have five columns now,
145

145

00:06:21.706  -->  00:06:25.717
with each of them with 201 pixels wide.
146

146

00:06:25.717  -->  00:06:28.682
As we decrease this, this is what happens.
147

147

00:06:28.682  -->  00:06:31.973
So, we no longer have enough space for the five columns,
148

148

00:06:31.973  -->  00:06:34.892
and so we end up with having only the four columns.
149

149

00:06:34.892  -->  00:06:37.316
And so each one has 240 pixels,
150

150

00:06:37.316  -->  00:06:40.813
so which is still well above our 200 limit.
151

151

00:06:40.813  -->  00:06:43.290
So, not this one here again,
152

152

00:06:43.290  -->  00:06:47.224
so let's decrease this even further, even further,
153

153

00:06:47.224  -->  00:06:49.333
and so, you see what happened?
154

154

00:06:49.333  -->  00:06:51.165
It changed it from four to three,
155

155

00:06:51.165  -->  00:06:53.340
'cause it no longer has the space now.
156

156

00:06:53.340  -->  00:06:58.083
So again, 797, it no longer fits four columns of 200,
157

157

00:06:58.083  -->  00:07:01.830
because for that we need 800, which we don't have anymore.
158

158

00:07:01.830  -->  00:07:05.885
And so we only have three columns, okay?
159

159

00:07:05.885  -->  00:07:09.530
And now actually you see that it started here a third line,
160

160

00:07:09.530  -->  00:07:12.915
so let's actually format that as well.
161

161

00:07:12.915  -->  00:07:16.165
So, do you remember how that works?
162

162

00:07:16.165  -->  00:07:17.748
So, grid-auto-rows,
163

163

00:07:18.939  -->  00:07:21.576
and remember we had 150 pixels,
164

164

00:07:21.576  -->  00:07:25.165
and so let's continue with that, and all right.
165

165

00:07:25.165  -->  00:07:29.269
So now you see that all of these have 150 pixels
166

166

00:07:29.269  -->  00:07:30.864
of height.
167

167

00:07:30.864  -->  00:07:33.950
So let's decrease this even further,
168

168

00:07:33.950  -->  00:07:36.634
and at some point you can guess it,
169

169

00:07:36.634  -->  00:07:39.272
we end up with a two column layout,
170

170

00:07:39.272  -->  00:07:41.345
which is now two by four.
171

171

00:07:41.345  -->  00:07:42.849
And actually we can starting to see
172

172

00:07:42.849  -->  00:07:46.572
this is really a flexible, a adaptive, layout, right?
173

173

00:07:46.572  -->  00:07:51.300
Really responsive, without writing a single media query.
174

174

00:07:51.300  -->  00:07:52.947
So this absolutely fantastic,
175

175

00:07:52.947  -->  00:07:56.037
and really useful, and so this trick that we have here
176

176

00:07:56.037  -->  00:07:59.398
in this line with this auto-fit and then the minmax
177

177

00:07:59.398  -->  00:08:02.824
between a fixed number and a 1fr,
178

178

00:08:02.824  -->  00:08:06.184
that is a huge trick that we can use and will use
179

179

00:08:06.184  -->  00:08:09.679
to build our layouts, which will then automatically adapt
180

180

00:08:09.679  -->  00:08:11.579
to the screen size without us
181

181

00:08:11.579  -->  00:08:12.921
having to worry about anything,
182

182

00:08:12.921  -->  00:08:14.697
without having to write any media query,
183

183

00:08:14.697  -->  00:08:16.892
or anything like that,
184

184

00:08:16.892  -->  00:08:17.763
okay?
185

185

00:08:17.763  -->  00:08:19.839
Now, let's decrease it even further,
186

186

00:08:19.839  -->  00:08:22.585
and now it's really a one column layout,
187

187

00:08:22.585  -->  00:08:25.919
so really like a completely responsive layout
188

188

00:08:25.919  -->  00:08:28.367
for like a small phone or something like that.
189

189

00:08:28.367  -->  00:08:29.200
Okay?
190

190

00:08:29.200  -->  00:08:31.864
And so it created these eight rows now,
191

191

00:08:31.864  -->  00:08:34.830
all with 150 pixels, as we specified,
192

192

00:08:34.830  -->  00:08:36.663
and all in one column.
193

193

00:08:37.647  -->  00:08:38.480
Okay.
194

194

00:08:38.480  -->  00:08:40.234
So you see this is really responsive,
195

195

00:08:40.234  -->  00:08:43.234
really adaptive to our screen width.
196

196

00:08:44.092  -->  00:08:44.968
Okay.
197

197

00:08:44.968  -->  00:08:48.443
So, I didn't just want to throw this line of code to you
198

198

00:08:48.443  -->  00:08:50.675
without explaining how everything works.
199

199

00:08:50.675  -->  00:08:52.585
Instead, we built up from the beginning,
200

200

00:08:52.585  -->  00:08:55.368
first learning how the minmax function works,
201

201

00:08:55.368  -->  00:08:58.009
then how auto-fill and auto-fit work,
202

202

00:08:58.009  -->  00:09:00.573
and then finally we brought it all together
203

203

00:09:00.573  -->  00:09:03.230
to learn how to build these adaptive,
204

204

00:09:03.230  -->  00:09:05.019
these responsive, layouts,
205

205

00:09:05.019  -->  00:09:08.392
without writing a single line of media query, okay?
206

206

00:09:08.392  -->  00:09:10.859
So grid allows us to do this, and once again
207

207

00:09:10.859  -->  00:09:13.369
this is a huge step forward for CSS,
208

208

00:09:13.369  -->  00:09:15.096
and it makes it so much easier
209

209

00:09:15.096  -->  00:09:18.965
to code our designs or layouts using CSS Grid.
210

210

00:09:18.965  -->  00:09:21.589
Okay, so I hope that you understand this,
211

211

00:09:21.589  -->  00:09:24.438
you can again play around with this if you want.
212

212

00:09:24.438  -->  00:09:26.888
And if you want to see my code,
213

213

00:09:26.888  -->  00:09:28.677
actually, so these four examples
214

214

00:09:28.677  -->  00:09:31.075
that we just coded in this section,
215

215

00:09:31.075  -->  00:09:33.980
all you have to do is to come here to my profile,
216

216

00:09:33.980  -->  00:09:37.620
which is here codepen.io/ my name,
217

217

00:09:37.620  -->  00:09:41.086
and then here in the public pens,
218

218

00:09:41.086  -->  00:09:43.846
you'll have the ones that we covered in this section,
219

219

00:09:43.846  -->  00:09:45.901
Part 1, two, three, and four,
220

220

00:09:45.901  -->  00:09:48.368
to review the code if you want.
221

221

00:09:48.368  -->  00:09:51.456
Or of course, if you code it along with me
222

222

00:09:51.456  -->  00:09:53.305
during these videos, then you have your own code
223

223

00:09:53.305  -->  00:09:57.258
to play around with, and you can make some changes
224

224

00:09:57.258  -->  00:09:58.355
and play around with this
225

225

00:09:58.355  -->  00:10:00.663
until everything makes a lot of sense.
226

226

00:10:00.663  -->  00:10:01.496
All right?
227

227

00:10:01.496  -->  00:10:04.300
So, at this point we actually covered almost everything
228

228

00:10:04.300  -->  00:10:06.735
there is to know about CSS Grid.
229

229

00:10:06.735  -->  00:10:08.262
So, you could already start building
230

230

00:10:08.262  -->  00:10:10.224
your own CSS Grid layouts
231

231

00:10:10.224  -->  00:10:12.976
without having to watch any more videos.
232

232

00:10:12.976  -->  00:10:14.352
But I decided, of course,
233

233

00:10:14.352  -->  00:10:17.095
that I want to add yet another project to this course.
234

234

00:10:17.095  -->  00:10:19.261
And so in the next section we will start
235

235

00:10:19.261  -->  00:10:23.424
an entire new project built from scratch using CSS Grid
236

236

00:10:23.424  -->  00:10:24.949
so that you can use and apply
237

237

00:10:24.949  -->  00:10:27.201
all of what we learned here in this section
238

238

00:10:27.201  -->  00:10:28.800
to a real world project.
239

239

00:10:28.800  -->  00:10:31.712
Because knowing how all of this works is one thing,
240

240

00:10:31.712  -->  00:10:34.111
but then applying it to a real world context
241

241

00:10:34.111  -->  00:10:36.236
is something really different, okay?
242

242

00:10:36.236  -->  00:10:38.896
And so that's why I added a new project
243

243

00:10:38.896  -->  00:10:42.221
that we will build together in the next section.
244

244

00:10:42.221  -->  00:10:44.955
So I hope that you're really as excited as I am for that,
245

245

00:10:44.955  -->  00:10:47.719
and so after you're ready playing around with all of this,
246

246

00:10:47.719  -->  00:10:50.429
then I hope to welcome you to the next section
247

247

00:10:50.429  -->  00:10:53.179
and to start a project with you.
