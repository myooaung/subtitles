1
1

00:00:01,743  -->  00:00:03,414
<v Instructor>All right, now before we start</v>
2

2

00:00:03,414  -->  00:00:05,760
really building the rest of the Natours project,
3

3

00:00:05,760  -->  00:00:08,029
let's just quickly review the three basic
4

4

00:00:08,029  -->  00:00:10,700
principles of responsive design.
5

5

00:00:10,700  -->  00:00:12,216
I'm pretty sure that many of you are
6

6

00:00:12,216  -->  00:00:13,836
already familiar with these,
7

7

00:00:13,836  -->  00:00:16,699
but I want to make 100% sure that we're all
8

8

00:00:16,699  -->  00:00:21,428
on the same page before diving deep into this project.
9

9

00:00:21,428  -->  00:00:25,035
So, the first, let's say, ingredient for responsive design
10

10

00:00:25,035  -->  00:00:28,077
is to use fluid grids and layouts.
11

11

00:00:28,077  -->  00:00:30,753
And what this means is that we use percentages
12

12

00:00:30,753  -->  00:00:34,010
rather than pixels for all layout related length,
13

13

00:00:34,010  -->  00:00:35,866
and especially width.
14

14

00:00:35,866  -->  00:00:37,851
We do this, of course, in order to allow
15

15

00:00:37,851  -->  00:00:41,266
the content to easily adapt to the current view port
16

16

00:00:41,266  -->  00:00:45,163
that the user is using to browse the website.
17

17

00:00:45,163  -->  00:00:48,598
The next ingredient are flexible and responsive images.
18

18

00:00:48,598  -->  00:00:50,236
It's necessary to mention this aspect
19

19

00:00:50,236  -->  00:00:53,847
because images behave a bit different than text content.
20

20

00:00:53,847  -->  00:00:56,105
Because they do not scale automatically
21

21

00:00:56,105  -->  00:00:59,040
as we change the view port and so we need to ensure
22

22

00:00:59,040  -->  00:01:02,537
that they also adapt nicely to the current view port.
23

23

00:01:02,537  -->  00:01:04,992
Usually we make images flexible by defining
24

24

00:01:04,992  -->  00:01:07,498
their dimensions in percentages rather than
25

25

00:01:07,498  -->  00:01:10,180
fixed units like pixels.
26

26

00:01:10,180  -->  00:01:12,932
Plus, images usually make up the biggest part
27

27

00:01:12,932  -->  00:01:16,405
of our website's size, in terms of megabytes,
28

28

00:01:16,405  -->  00:01:19,987
and so we should optimize the images for different width,
29

29

00:01:19,987  -->  00:01:21,338
which is something we're gonna do later
30

30

00:01:21,338  -->  00:01:25,031
when we talk deeper about responsive images.
31

31

00:01:25,031  -->  00:01:27,057
All right, and the last piece of the puzzle,
32

32

00:01:27,057  -->  00:01:29,292
because fluid grids and layouts
33

33

00:01:29,292  -->  00:01:31,864
and flexible images alone aren't enough,
34

34

00:01:31,864  -->  00:01:34,894
are media queries, which allow us to change styles
35

35

00:01:34,894  -->  00:01:38,500
on certain view port width, which are called breakpoints.
36

36

00:01:38,500  -->  00:01:41,277
So, basically, media queries allow developers
37

37

00:01:41,277  -->  00:01:43,549
to create different versions of a website
38

38

00:01:43,549  -->  00:01:47,264
for different types of devices, okay?
39

39

00:01:47,264  -->  00:01:50,126
Now, moving on and taking a closer look
40

40

00:01:50,126  -->  00:01:52,505
at the first aspect that we talked about,
41

41

00:01:52,505  -->  00:01:54,579
so fluid grids and layouts.
42

42

00:01:54,579  -->  00:01:56,785
In modern web design there are currently
43

43

00:01:56,785  -->  00:02:00,952
three major ways of laying out a webpage or app.
44

44

00:02:00,952  -->  00:02:04,498
So, for a long time we have been using float based layouts
45

45

00:02:04,498  -->  00:02:06,331
where we simply put a bunch of boxes
46

46

00:02:06,331  -->  00:02:09,936
side by side, using floats, simple as that.
47

47

00:02:09,936  -->  00:02:12,893
This method is still being used in 2017
48

48

00:02:12,893  -->  00:02:17,229
and it's still how I personally layout my designs today.
49

49

00:02:17,229  -->  00:02:19,430
And that's because the alternatives are still
50

50

00:02:19,430  -->  00:02:22,661
not 100% supported by all browsers.
51

51

00:02:22,661  -->  00:02:25,125
So, about these modern alternatives,
52

52

00:02:25,125  -->  00:02:28,050
I'm talking about Flexbox and, even more modern,
53

53

00:02:28,050  -->  00:02:29,985
CSS grid technology.
54

54

00:02:29,985  -->  00:02:32,498
And you've probably heard of these, right?
55

55

00:02:32,498  -->  00:02:35,389
So, while Flexbox offers an amazing way
56

56

00:02:35,389  -->  00:02:38,361
of laying out elements in a one dimensional row,
57

57

00:02:38,361  -->  00:02:41,762
CSS grid is perfect for creating the overall layout
58

58

00:02:41,762  -->  00:02:45,205
of a page in a fully-fledged 2D grid,
59

59

00:02:45,205  -->  00:02:47,359
so two-dimensional grid.
60

60

00:02:47,359  -->  00:02:49,664
These are great technologies, as I was saying,
61

61

00:02:49,664  -->  00:02:51,890
and they will make our life a lot easier
62

62

00:02:51,890  -->  00:02:54,232
in the future, but as of 2017,
63

63

00:02:54,232  -->  00:02:57,158
I'm not sure we should use them in production.
64

64

00:02:57,158  -->  00:03:00,024
The thing is that the layout is the single most
65

65

00:03:00,024  -->  00:03:02,602
fundamental aspect of our design,
66

66

00:03:02,602  -->  00:03:05,376
and so if a browser does not support a technology
67

67

00:03:05,376  -->  00:03:08,692
like Flexbox or CSS grid, then that's a major
68

68

00:03:08,692  -->  00:03:11,842
problem and can ruin our entire designs.
69

69

00:03:11,842  -->  00:03:13,749
If we choose to only rely on these
70

70

00:03:13,749  -->  00:03:15,954
new technologies, of course.
71

71

00:03:15,954  -->  00:03:18,352
So, for all these reasons, we're going to use
72

72

00:03:18,352  -->  00:03:21,324
float layouts for this project, simply because
73

73

00:03:21,324  -->  00:03:23,681
this is still used everywhere and will be
74

74

00:03:23,681  -->  00:03:25,730
used for a long time and so you need
75

75

00:03:25,730  -->  00:03:28,000
to really know how it works.
76

76

00:03:28,000  -->  00:03:30,077
But, since you bought the most advanced
77

77

00:03:30,077  -->  00:03:32,870
CSS course on the market, you will of course
78

78

00:03:32,870  -->  00:03:36,138
also learn Flexbox and CSS grid.
79

79

00:03:36,138  -->  00:03:37,999
Not in a Natours project though,
80

80

00:03:37,999  -->  00:03:41,117
but in future projects later in the course.
81

81

00:03:41,117  -->  00:03:44,009
So, the next project will be about Flexbox
82

82

00:03:44,009  -->  00:03:48,422
and a third and last project will be with CSS grid.
83

83

00:03:48,422  -->  00:03:50,622
So, moving forward in the future,
84

84

00:03:50,622  -->  00:03:52,908
you will always have to know how to use
85

85

00:03:52,908  -->  00:03:54,923
all of these three layout types,
86

86

00:03:54,923  -->  00:03:58,615
because that's really where CSS is moving right now.
87

87

00:03:58,615  -->  00:04:01,337
For the ones of you who are familiar with JavaScript,
88

88

00:04:01,337  -->  00:04:05,382
this is a bit like the older JavaScript versions and ES6.
89

89

00:04:05,382  -->  00:04:06,215
These days you really need to know both JavaScript versions,
90

90

00:04:06,215  -->  00:04:09,215
because even with ES6 around by now,
91

91

00:04:11,183  -->  00:04:13,849
you're still going to see a lot of the older ES5
92

92

00:04:13,849  -->  00:04:16,258
around for a long time.
93

93

00:04:16,258  -->  00:04:18,963
All right, and that's enough for one lecture.
94

94

00:04:18,963  -->  00:04:21,139
See you in a second, in the next video.
95

95

00:04:21,139  -->  00:04:22,389
Back to coding.
