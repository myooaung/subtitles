WEBVTT
1
1

00:00:01.284  -->  00:00:04.548
<v Narrator>So, before actually using Flexbox in practice,</v>
2

2

00:00:04.548  -->  00:00:06.990
I wanna show you the philosophy behind Flexbox
3

3

00:00:06.990  -->  00:00:09.715
and show you the main properties that we can use
4

4

00:00:09.715  -->  00:00:12.953
in order to build Flexbox layouts.
5

5

00:00:12.953  -->  00:00:15.849
So, what is Flexbox actually?
6

6

00:00:15.849  -->  00:00:19.316
Well, Flexbox is a new module in CSS3
7

7

00:00:19.316  -->  00:00:22.617
that makes it very easy to align elements to one another
8

8

00:00:22.617  -->  00:00:24.872
in different directions and orders
9

9

00:00:24.872  -->  00:00:28.069
and also to change dis-alignments if necessary,
10

10

00:00:28.069  -->  00:00:31.054
like for example, for responsive design.
11

11

00:00:31.054  -->  00:00:33.823
And this works perfectly even if you have no idea
12

12

00:00:33.823  -->  00:00:35.988
about the dimensions of these elements
13

13

00:00:35.988  -->  00:00:38.363
because the main idea behind Flexbox
14

14

00:00:38.363  -->  00:00:40.296
is to actually give the container
15

15

00:00:40.296  -->  00:00:43.284
the ability to expand and to shrink elements
16

16

00:00:43.284  -->  00:00:46.378
to best use all the available space.
17

17

00:00:46.378  -->  00:00:50.045
So, with Flexbox, you can easily replace float layouts
18

18

00:00:50.045  -->  00:00:54.000
with much less and much more readable and logical code.
19

19

00:00:54.000  -->  00:00:55.429
And because of that,
20

20

00:00:55.429  -->  00:00:59.118
Flexbox completely changes the way that we build layouts,
21

21

00:00:59.118  -->  00:01:01.471
especially one-dimensional layouts
22

22

00:01:01.471  -->  00:01:04.587
because that's where Flexbox really shines.
23

23

00:01:04.587  -->  00:01:06.190
For two-dimensional layouts,
24

24

00:01:06.190  -->  00:01:09.068
there are actually better ways of building these,
25

25

00:01:09.068  -->  00:01:11.210
like using CSS grid layouts
26

26

00:01:11.210  -->  00:01:14.330
as I'm going to show you later in the course.
27

27

00:01:14.330  -->  00:01:16.309
So, for all of these reasons,
28

28

00:01:16.309  -->  00:01:20.318
I'd like to say that Flexbox is a true revolution in CSS.
29

29

00:01:20.318  -->  00:01:24.485
It makes our lives as CSS developers so much easier.
30

30

00:01:25.775  -->  00:01:29.632
And there are actually not that many concepts behind Flexbox
31

31

00:01:29.632  -->  00:01:32.488
that you need to understand in order to use it.
32

32

00:01:32.488  -->  00:01:34.773
But what you need to know is this.
33

33

00:01:34.773  -->  00:01:38.136
So first of all, the element on which we use Flexbox
34

34

00:01:38.136  -->  00:01:40.445
is called the Flex container.
35

35

00:01:40.445  -->  00:01:43.439
And all we have to do in order to create a Flex container
36

36

00:01:43.439  -->  00:01:47.455
is to set its display property to flex. Simple as that.
37

37

00:01:47.455  -->  00:01:50.238
We can also set it to flex-inline,
38

38

00:01:50.238  -->  00:01:52.554
which will then create a Flex container
39

39

00:01:52.554  -->  00:01:54.638
that behaves like an in-line element,
40

40

00:01:54.638  -->  00:01:57.744
but I almost never use that one, okay?
41

41

00:01:57.744  -->  00:02:00.896
Then, all the direct children of the Flex container
42

42

00:02:00.896  -->  00:02:03.049
are called the Flex items.
43

43

00:02:03.049  -->  00:02:06.799
Now, the direction which these Flex items are laid out
44

44

00:02:06.799  -->  00:02:08.840
is called the main axis,
45

45

00:02:08.840  -->  00:02:11.574
which is represented with this arrow here.
46

46

00:02:11.574  -->  00:02:13.567
Then the other perpendicular axis
47

47

00:02:13.567  -->  00:02:16.383
is simply called the cross axis.
48

48

00:02:16.383  -->  00:02:18.924
Now, it's important to be aware of these names
49

49

00:02:18.924  -->  00:02:21.838
because we can change the direction of the main axis,
50

50

00:02:21.838  -->  00:02:23.820
and also because there are different ways
51

51

00:02:23.820  -->  00:02:26.490
of aligning elements both along the main axis
52

52

00:02:26.490  -->  00:02:28.891
and the cross axis.
53

53

00:02:28.891  -->  00:02:31.091
So, just keep these concepts in mind
54

54

00:02:31.091  -->  00:02:32.957
so that you can fully understand
55

55

00:02:32.957  -->  00:02:36.300
how the different Flexbox-related properties work.
56

56

00:02:36.300  -->  00:02:40.526
And actually, that's what we're going to talk about next.
57

57

00:02:40.526  -->  00:02:44.996
So, the Flexbox specification defines a couple of properties
58

58

00:02:44.996  -->  00:02:47.365
that we use on the Flex container
59

59

00:02:47.365  -->  00:02:50.894
in order to position and align all the Flex items.
60

60

00:02:50.894  -->  00:02:53.759
And then some other properties that we use directly
61

61

00:02:53.759  -->  00:02:56.256
on the Flex items themselves.
62

62

00:02:56.256  -->  00:02:58.479
Of course I'm gonna show you all of these properties
63

63

00:02:58.479  -->  00:02:59.994
over the course of this section
64

64

00:02:59.994  -->  00:03:01.819
and the project that we built here.
65

65

00:03:01.819  -->  00:03:02.760
But for now,
66

66

00:03:02.760  -->  00:03:05.836
I just wanna give you a very brief overview over all of them
67

67

00:03:05.836  -->  00:03:08.744
so that you can get an idea of how Flexbox works
68

68

00:03:08.744  -->  00:03:12.024
and how many properties there are and how they work.
69

69

00:03:12.024  -->  00:03:14.340
Maybe you can actually print out the slide
70

70

00:03:14.340  -->  00:03:17.226
and use it as a cheat sheet throughout this section.
71

71

00:03:17.226  -->  00:03:19.716
I'm sure that would be really helpful.
72

72

00:03:19.716  -->  00:03:22.653
Okay. But now let's start with the properties
73

73

00:03:22.653  -->  00:03:25.062
that we use on the container.
74

74

00:03:25.062  -->  00:03:28.313
First up, there's one called flex-direction,
75

75

00:03:28.313  -->  00:03:32.382
which specifies in which direction the main axis goes.
76

76

00:03:32.382  -->  00:03:34.570
So I have here the name of the property
77

77

00:03:34.570  -->  00:03:37.050
and then the possible values it can take,
78

78

00:03:37.050  -->  00:03:39.633
where the first one is the initial value.
79

79

00:03:39.633  -->  00:03:42.371
And that means that it's the default, right?
80

80

00:03:42.371  -->  00:03:45.002
So, the direction can go as a row,
81

81

00:03:45.002  -->  00:03:46.721
which is the default direction
82

82

00:03:46.721  -->  00:03:49.146
in the one you see in the graphic up there.
83

83

00:03:49.146  -->  00:03:51.632
But it can also go in the opposite direction
84

84

00:03:51.632  -->  00:03:56.581
and even up or down, which will then form a column, alright?
85

85

00:03:56.581  -->  00:04:00.008
Now, this is obviously much easier to visualize in practice
86

86

00:04:00.008  -->  00:04:02.516
but again, for now I just wanna let you know
87

87

00:04:02.516  -->  00:04:05.477
that these properties exist.
88

88

00:04:05.477  -->  00:04:07.913
Okay? Next, there is flex-wrap,
89

89

00:04:07.913  -->  00:04:10.080
which simply defines if the Flex items
90

90

00:04:10.080  -->  00:04:12.936
should wrap into a new line if there is not enough space
91

91

00:04:12.936  -->  00:04:15.868
in the Flex container or not.
92

92

00:04:15.868  -->  00:04:19.333
Then, we have justify-content, and this one defines
93

93

00:04:19.333  -->  00:04:23.472
how the Flex items will be aligned along the main axis.
94

94

00:04:23.472  -->  00:04:24.305
Okay?
95

95

00:04:24.305  -->  00:04:28.536
So it's important to know where the main axis is actually.
96

96

00:04:28.536  -->  00:04:31.421
Next, there's the align-items property,
97

97

00:04:31.421  -->  00:04:34.852
which is very similar to justify-content with a difference
98

98

00:04:34.852  -->  00:04:37.853
that this one defines how the Flex items will be aligned
99

99

00:04:37.853  -->  00:04:41.481
along the cross axis, not the main axis.
100

100

00:04:41.481  -->  00:04:44.034
So, align-items is many times used
101

101

00:04:44.034  -->  00:04:47.338
together with justify-content, and to me,
102

102

00:04:47.338  -->  00:04:52.045
these two are the most important Flexbox properties of all.
103

103

00:04:52.045  -->  00:04:55.100
And then finally, there is align-content,
104

104

00:04:55.100  -->  00:04:57.803
which only applies when there is more than one row
105

105

00:04:57.803  -->  00:04:59.269
of Flex items.
106

106

00:04:59.269  -->  00:05:01.520
In that case, align-content controls
107

107

00:05:01.520  -->  00:05:04.864
how the rows are aligned along the cross axis
108

108

00:05:04.864  -->  00:05:07.304
if there is some empty space.
109

109

00:05:07.304  -->  00:05:09.678
So again, we're gonna look at this in code
110

110

00:05:09.678  -->  00:05:12.376
starting in the next lecture, alright?
111

111

00:05:12.376  -->  00:05:15.042
Now, about the properties for Flex items,
112

112

00:05:15.042  -->  00:05:18.052
the first one is called align-self,
113

113

00:05:18.052  -->  00:05:20.439
which is very similar to align-items
114

114

00:05:20.439  -->  00:05:23.147
but for one individual Flex item.
115

115

00:05:23.147  -->  00:05:27.457
So imagine for example, that we set align items to center,
116

116

00:05:27.457  -->  00:05:29.083
but then we want one of the items
117

117

00:05:29.083  -->  00:05:30.696
to be aligned to the bottom.
118

118

00:05:30.696  -->  00:05:34.380
And so we can use align-self for that, okay?
119

119

00:05:34.380  -->  00:05:36.622
Next up, there is order,
120

120

00:05:36.622  -->  00:05:39.703
which defines the order in which one specific Flex item
121

121

00:05:39.703  -->  00:05:42.282
should appear inside the container.
122

122

00:05:42.282  -->  00:05:44.814
And this is really helpful to reorder items
123

123

00:05:44.814  -->  00:05:47.627
for example for smaller screens.
124

124

00:05:47.627  -->  00:05:51.041
And now finally, we have three properties that together,
125

125

00:05:51.041  -->  00:05:55.208
basically helps Flexbox decide on the width of a Flex item.
126

126

00:05:56.203  -->  00:06:00.272
So, with flex-grow, we define how much an item can grow.
127

127

00:06:00.272  -->  00:06:03.564
With flex-shrink, we define how much it can shrink.
128

128

00:06:03.564  -->  00:06:07.610
And with flex-basis, we can define its base width.
129

129

00:06:07.610  -->  00:06:10.213
And there's actually a shortened property of these,
130

130

00:06:10.213  -->  00:06:12.207
which is simply called flex.
131

131

00:06:12.207  -->  00:06:15.540
And this one is actually the one that should be used.
132

132

00:06:15.540  -->  00:06:17.688
Alright, and all of these is of course,
133

133

00:06:17.688  -->  00:06:19.685
much easier to explain with code,
134

134

00:06:19.685  -->  00:06:21.450
and so that's what we're gonna start doing
135

135

00:06:21.450  -->  00:06:23.481
right in the next lecture.
136

136

00:06:23.481  -->  00:06:25.064
So, see you there.
