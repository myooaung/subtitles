WEBVTT
1
1

00:00:01.243  -->  00:00:04.131
<v ->Alright, welcome back to yet another theory lecture</v>
2

2

00:00:04.131  -->  00:00:07.141
about how CSS works behind the scenes.
3

3

00:00:07.141  -->  00:00:11.098
Remember that we were talking about parsing CSS, right?
4

4

00:00:11.098  -->  00:00:13.282
First, we talked about the cascade
5

5

00:00:13.282  -->  00:00:15.336
and so now it's time to talk about how values
6

6

00:00:15.336  -->  00:00:18.900
are processed in a CSS parsing phase.
7

7

00:00:18.900  -->  00:00:22.077
We're also going to look at the most commonly used CSS units
8

8

00:00:22.077  -->  00:00:26.015
by percentages, ems, rems, vh, and more
9

9

00:00:26.015  -->  00:00:29.917
in order to learn how they are actually calculated.
10

10

00:00:29.917  -->  00:00:31.668
But first off, you may ask,
11

11

00:00:31.668  -->  00:00:33.987
"Why this is even important to learn?"
12

12

00:00:33.987  -->  00:00:36.815
It is important for a lot of reasons.
13

13

00:00:36.815  -->  00:00:40.424
First, because each time you use a unit other than pixels,
14

14

00:00:40.424  -->  00:00:43.924
like rem or vh or some other relative unit,
15

15

00:00:43.924  -->  00:00:46.869
you need to know that it will ultimately be converted
16

16

00:00:46.869  -->  00:00:50.885
to pixels and you also want to know how that happens.
17

17

00:00:50.885  -->  00:00:53.961
Also knowing this stuff, will help you predict and control
18

18

00:00:53.961  -->  00:00:57.601
better which property takes which value in the end.
19

19

00:00:57.601  -->  00:00:59.099
So ultimately, if you want to become
20

20

00:00:59.099  -->  00:01:01.505
a serious CSS developer, it's just good to know
21

21

00:01:01.505  -->  00:01:04.034
how all of these pieces fit together to render
22

22

00:01:04.034  -->  00:01:06.625
a final website in the end.
23

23

00:01:06.625  -->  00:01:09.162
So this is what we're going to do in this slide.
24

24

00:01:09.162  -->  00:01:12.324
We will analyze how these five CSS declarations built
25

25

00:01:12.324  -->  00:01:15.593
a small element in the bottom of the slides here.
26

26

00:01:15.593  -->  00:01:18.292
And in particular, how exactly the declared values
27

27

00:01:18.292  -->  00:01:20.563
are processed in six different steps
28

28

00:01:20.563  -->  00:01:22.547
starting from the declared value
29

29

00:01:22.547  -->  00:01:26.406
all the way to the final actual value.
30

30

00:01:26.406  -->  00:01:30.418
So we're going to analyze the width, padding, and font-size
31

31

00:01:30.418  -->  00:01:32.738
in order to see what's going on here.
32

32

00:01:32.738  -->  00:01:35.074
So let's start with the paragraph's width,
33

33

00:01:35.074  -->  00:01:37.762
which you see has two declared values.
34

34

00:01:37.762  -->  00:01:40.722
100 pixels from the p selector and 66%
35

35

00:01:40.722  -->  00:01:43.389
from the amazing class selector.
36

36

00:01:44.408  -->  00:01:46.533
So these are our declared values.
37

37

00:01:46.533  -->  00:01:48.652
They're actually conflicting.
38

38

00:01:48.652  -->  00:01:52.394
So what is used to determine which one will apply?
39

39

00:01:52.394  -->  00:01:54.672
That's right, it's the cascade.
40

40

00:01:54.672  -->  00:01:56.603
And in this case, it is quite simple,
41

41

00:01:56.603  -->  00:01:59.258
because the amazing class selector is more specific
42

42

00:01:59.258  -->  00:02:01.749
than the p element selector, right?
43

43

00:02:01.749  -->  00:02:05.279
This means that the width of 66 will be applied
44

44

00:02:05.279  -->  00:02:08.176
and it is therefore, our cascaded value.
45

45

00:02:08.176  -->  00:02:10.899
Now, of course you don't need to know every single technical
46

46

00:02:10.899  -->  00:02:12.693
name I'm going to show you here,
47

47

00:02:12.693  -->  00:02:15.677
but if you ignore the jargon and the more technical words,
48

48

00:02:15.677  -->  00:02:19.612
then you will see how this is actually all quite simple.
49

49

00:02:19.612  -->  00:02:21.940
Alright, so next up in the sequence,
50

50

00:02:21.940  -->  00:02:24.725
there's something called the specified value
51

51

00:02:24.725  -->  00:02:27.134
in the official CSS specification.
52

52

00:02:27.134  -->  00:02:31.458
This one is the default value of a certain CSS property.
53

53

00:02:31.458  -->  00:02:33.101
In this case, it's not really relevant
54

54

00:02:33.101  -->  00:02:35.849
because we have a cascaded value already,
55

55

00:02:35.849  -->  00:02:38.037
but we'll come back to this later.
56

56

00:02:38.037  -->  00:02:40.107
Next, there's a computed value.
57

57

00:02:40.107  -->  00:02:43.064
In this step, values with relative units
58

58

00:02:43.064  -->  00:02:46.424
are converted to pixels so that they can be inherited,
59

59

00:02:46.424  -->  00:02:48.533
but more on inheritance later.
60

60

00:02:48.533  -->  00:02:53.009
Also, CSS key words like "orange, oral, boulder"
61

61

00:02:53.009  -->  00:02:56.851
and a lot more are computed and replaced here in this step.
62

62

00:02:56.851  -->  00:02:59.656
Here in this case, we have a percentage value
63

63

00:02:59.656  -->  00:03:01.502
which is technically not a unit,
64

64

00:03:01.502  -->  00:03:03.905
and so nothing happens in this step.
65

65

00:03:03.905  -->  00:03:07.171
Next up, is the so called "used value".
66

66

00:03:07.171  -->  00:03:09.651
In this calculation step, the CSS engine uses
67

67

00:03:09.651  -->  00:03:12.180
the rendered layout to figure out some
68

68

00:03:12.180  -->  00:03:15.259
of the remaining values, for example percentage values
69

69

00:03:15.259  -->  00:03:18.955
that depend on the layout, and that's actually the case here
70

70

00:03:18.955  -->  00:03:22.740
because the 66 percent that we specified is in relation
71

71

00:03:22.740  -->  00:03:25.515
to its parent element and so the parser
72

72

00:03:25.515  -->  00:03:27.342
needs to know that width in order
73

73

00:03:27.342  -->  00:03:30.662
to calculate the paragraphs width, right?
74

74

00:03:30.662  -->  00:03:35.308
So the sections width is defined as 280 pixels
75

75

00:03:35.308  -->  00:03:38.808
and so 66 percent of that is 184.8 pixels.
76

76

00:03:40.248  -->  00:03:42.837
And this is now our "used value".
77

77

00:03:42.837  -->  00:03:45.965
Now technically the step five in the next one only happened
78

78

00:03:45.965  -->  00:03:48.155
in the rendering phase of the page,
79

79

00:03:48.155  -->  00:03:49.138
but that's not really relevant
80

80

00:03:49.138  -->  00:03:51.719
in order to understand this logic.
81

81

00:03:51.719  -->  00:03:55.886
Now, bravas usually cannot really display 184.8 pixels.
82

82

00:03:56.940  -->  00:03:59.945
That's just way too specific and so usually, a value
83

83

00:03:59.945  -->  00:04:02.676
with a comma like this is simply rounded.
84

84

00:04:02.676  -->  00:04:07.500
In this case, to just 185 pixels, and that is after
85

85

00:04:07.500  -->  00:04:11.736
all these calculation steps, the so called "actual value"
86

86

00:04:11.736  -->  00:04:14.300
which is now ready to be used in the layout.
87

87

00:04:14.300  -->  00:04:17.289
And so the actual value as we see here is usually obtained
88

88

00:04:17.289  -->  00:04:20.991
by considering the browser and revised restrictions.
89

89

00:04:20.991  -->  00:04:25.431
Cool, so now we know how this works behind the scenes of CSS
90

90

00:04:25.431  -->  00:04:28.082
Awesome, that's great progress.
91

91

00:04:28.082  -->  00:04:30.916
So let's now take a look at the padding property
92

92

00:04:30.916  -->  00:04:31.751
for the paragraph.
93

93

00:04:31.751  -->  00:04:33.840
Now, you're probably thinking,
94

94

00:04:33.840  -->  00:04:36.801
"There is no padding property there." Right?
95

95

00:04:36.801  -->  00:04:39.303
And it's actually true that we didn't declare it
96

96

00:04:39.303  -->  00:04:41.984
but it still has to have a value, okay?
97

97

00:04:41.984  -->  00:04:44.255
That's because in each element of the page,
98

98

00:04:44.255  -->  00:04:48.119
each and every CSS property needs to have a value even
99

99

00:04:48.119  -->  00:04:50.826
if you don't even declare it at all.
100

100

00:04:50.826  -->  00:04:53.514
So, for padding, we have no declared value
101

101

00:04:53.514  -->  00:04:57.681
and also no cascaded value, but we do have a specified value
102

102

00:04:58.933  -->  00:05:00.874
and that's because each CSS property
103

103

00:05:00.874  -->  00:05:04.077
has something called an "initial value"
104

104

00:05:04.077  -->  00:05:05.716
which is simply the value used
105

105

00:05:05.716  -->  00:05:08.205
if there is no cascaded value.
106

106

00:05:08.205  -->  00:05:11.192
So basically, if we don't declare a value
107

107

00:05:11.192  -->  00:05:14.060
and if neither the browser nor the user define a value,
108

108

00:05:14.060  -->  00:05:16.866
then the initial value will be used.
109

109

00:05:16.866  -->  00:05:19.565
Actually, inheritance also plays a role here,
110

110

00:05:19.565  -->  00:05:22.729
but let's leave that for later, okay?
111

111

00:05:22.729  -->  00:05:25.461
Now, different properties have different initial values
112

112

00:05:25.461  -->  00:05:28.700
of course, and for padding, it's zero pixels,
113

113

00:05:28.700  -->  00:05:30.870
which makes a ton of sense actually.
114

114

00:05:30.870  -->  00:05:32.709
Because if we declare a padding,
115

115

00:05:32.709  -->  00:05:36.216
that should probably mean that we don't want any, right?
116

116

00:05:36.216  -->  00:05:38.996
And so it's zero, and that's it.
117

117

00:05:38.996  -->  00:05:40.791
There's no more calculations to do
118

118

00:05:40.791  -->  00:05:43.108
because it's already an absolute unit
119

119

00:05:43.108  -->  00:05:45.644
and so the computed, used, and actual values
120

120

00:05:45.644  -->  00:05:47.727
are all just zero pixels.
121

121

00:05:48.765  -->  00:05:50.965
Alright, now about the root font-size.
122

122

00:05:50.965  -->  00:05:54.294
This means the overall font-size of a document.
123

123

00:05:54.294  -->  00:05:56.511
We didn't define it anywhere, right?
124

124

00:05:56.511  -->  00:05:59.547
So again, there is no declared value.
125

125

00:05:59.547  -->  00:06:02.898
However, this is different from the padding property
126

126

00:06:02.898  -->  00:06:04.715
that we looked at before.
127

127

00:06:04.715  -->  00:06:06.714
That's because for the font-size,
128

128

00:06:06.714  -->  00:06:10.386
the browser usually has a default value of 16 pixels.
129

129

00:06:10.386  -->  00:06:12.954
Remember how we said earlier that CSS
130

130

00:06:12.954  -->  00:06:15.195
could come from different sources?
131

131

00:06:15.195  -->  00:06:18.338
Well, in this case, the font-size is a user agent
132

132

00:06:18.338  -->  00:06:21.898
declaration and therefore, the result of the cascade
133

133

00:06:21.898  -->  00:06:24.354
is these 60 pixels that the browser
134

134

00:06:24.354  -->  00:06:26.503
has declared for the font-size.
135

135

00:06:26.503  -->  00:06:29.574
And so, this is our cascaded value.
136

136

00:06:29.574  -->  00:06:32.483
Again, there is no more calculations needed
137

137

00:06:32.483  -->  00:06:36.534
and therefore, 60 pixels is also the used value.
138

138

00:06:36.534  -->  00:06:39.709
Next, let's analyze the section's font-size
139

139

00:06:39.709  -->  00:06:43.876
and now we actually do have a declared value of 1.5 RAM.
140

140

00:06:44.893  -->  00:06:47.470
Remember that RAM is a relative unit
141

141

00:06:47.470  -->  00:06:51.505
and so it needs to be converted to pixels by the engine.
142

142

00:06:51.505  -->  00:06:55.353
So the cascaded and specified values are still 1.5 RAM
143

143

00:06:55.353  -->  00:06:58.353
but the computed value is 24 pixels.
144

144

00:06:59.339  -->  00:07:01.489
And why is that you may ask?
145

145

00:07:01.489  -->  00:07:03.391
It seems a bit random, right?
146

146

00:07:03.391  -->  00:07:06.068
It's because the RAM unit is always relative
147

147

00:07:06.068  -->  00:07:10.313
to the root font-size, which is 16 pixels in this example
148

148

00:07:10.313  -->  00:07:14.480
as we saw before and therefore 1.5 RAM is 1.5 times 16
149

149

00:07:16.093  -->  00:07:18.997
which is 24, but I'm going to explain this in more detail
150

150

00:07:18.997  -->  00:07:21.116
in our next slide, don't worry.
151

151

00:07:21.116  -->  00:07:25.283
Alright, and so 24 pixels is our final actual value as well.
152

152

00:07:26.252  -->  00:07:30.526
And now the last one, the font-size of the paragraph.
153

153

00:07:30.526  -->  00:07:35.390
Once more, looking at the code, we can't find a font-size
154

154

00:07:35.390  -->  00:07:38.961
so how come the text still has a font-size?
155

155

00:07:38.961  -->  00:07:41.685
Well, in this case, it's no default and it's also
156

156

00:07:41.685  -->  00:07:45.998
no initial value, but it's a mechanism called inheritance.
157

157

00:07:45.998  -->  00:07:49.077
Now, I'm going to talk in great detail about inheritance
158

158

00:07:49.077  -->  00:07:51.937
a bit later, but what you need to know is that some
159

159

00:07:51.937  -->  00:07:55.465
properties like the ones related to text, such as font-size,
160

160

00:07:55.465  -->  00:07:59.319
inherit the computed value of their parent elements.
161

161

00:07:59.319  -->  00:08:02.774
It works like this because it's actually extremely useful.
162

162

00:08:02.774  -->  00:08:04.880
Imagine you had to specify the font-size
163

163

00:08:04.880  -->  00:08:06.663
on each and every element.
164

164

00:08:06.663  -->  00:08:08.805
It wouldn't be really practical, right?
165

165

00:08:08.805  -->  00:08:11.714
So we just need to define it on some parent
166

166

00:08:11.714  -->  00:08:14.336
and the children will then inherit it
167

167

00:08:14.336  -->  00:08:17.000
unless we declare it something else of course.
168

168

00:08:17.000  -->  00:08:19.765
So again, we talk about inheritance a bit later
169

169

00:08:19.765  -->  00:08:22.488
but this is the most important lesson about it.
170

170

00:08:22.488  -->  00:08:25.784
Alright, and so these 24 pixels, we inherited
171

171

00:08:25.784  -->  00:08:29.233
from the sectioned diff of our specified value
172

172

00:08:29.233  -->  00:08:33.137
and of course, it's all the same down to the actual value.
173

173

00:08:33.137  -->  00:08:36.220
Phew, wow, this was a lot to take in.
174

174

00:08:37.615  -->  00:08:39.993
It's great that you're still with me at this point.
175

175

00:08:39.993  -->  00:08:44.160
Good to see you're really willing to learn this stuff.
176

176

00:08:45.002  -->  00:08:47.338
In this slide, I want to show you in great detail
177

177

00:08:47.338  -->  00:08:51.051
how the CSS engine converts relative units to pixels
178

178

00:08:51.051  -->  00:08:54.406
in order to calculate computed and used values
179

179

00:08:54.406  -->  00:08:57.871
because this is crucial to know when you write your own code
180

180

00:08:57.871  -->  00:09:00.295
so this has actually a very practical application
181

181

00:09:00.295  -->  00:09:02.623
in the real world and its relative units are fundamental
182

182

00:09:02.623  -->  00:09:05.856
to build modern responsive layouts as you'll see
183

183

00:09:05.856  -->  00:09:08.192
when we continue with the project.
184

184

00:09:08.192  -->  00:09:11.535
So again, I have a small code example here for you
185

185

00:09:11.535  -->  00:09:13.974
so I can show you how different units work
186

186

00:09:13.974  -->  00:09:15.600
in different situations.
187

187

00:09:15.600  -->  00:09:19.883
So we have some global CSS code for the html, then a header,
188

188

00:09:19.883  -->  00:09:23.663
and then an element inside header called "header child".
189

189

00:09:23.663  -->  00:09:25.602
That's the basic structure.
190

190

00:09:25.602  -->  00:09:28.168
Alright, so we start with percentages.
191

191

00:09:28.168  -->  00:09:30.478
And there's a distinction between using percentages
192

192

00:09:30.478  -->  00:09:34.391
for fonts or for length or distance measurements.
193

193

00:09:34.391  -->  00:09:36.513
Now again, the percentage is technically
194

194

00:09:36.513  -->  00:09:39.110
not a unit, but to make things easier,
195

195

00:09:39.110  -->  00:09:42.256
we'll simply treat it as one, okay?
196

196

00:09:42.256  -->  00:09:44.110
So in a header, we have a declaration that says
197

197

00:09:44.110  -->  00:09:47.872
"font-size, 150%" and what that means is
198

198

00:09:47.872  -->  00:09:49.283
that the element will have a font-size
199

199

00:09:49.283  -->  00:09:52.740
150% larger than its parent element.
200

200

00:09:52.740  -->  00:09:56.121
In this case, the parent element is simply the HTML
201

201

00:09:56.121  -->  00:09:59.074
or the body with a font-size of 16
202

202

00:09:59.074  -->  00:10:01.995
and so the header will have 150 percent of that
203

203

00:10:01.995  -->  00:10:05.744
which gives us 24 pixels and that's how it works.
204

204

00:10:05.744  -->  00:10:07.255
Quite simple, right?
205

205

00:10:07.255  -->  00:10:09.750
Now for length expressed in percentages,
206

206

00:10:09.750  -->  00:10:11.173
it works a bit different.
207

207

00:10:11.173  -->  00:10:14.039
When we express a length measurement in percentages,
208

208

00:10:14.039  -->  00:10:17.518
like height, a padding, a margin, or something else,
209

209

00:10:17.518  -->  00:10:20.926
the reference is always the parent element's width
210

210

00:10:20.926  -->  00:10:24.182
like in our example where the padding of 10 percent
211

211

00:10:24.182  -->  00:10:27.253
results in a used value of 100 pixels
212

212

00:10:27.253  -->  00:10:30.735
because our parent element has 1000 pixels of width
213

213

00:10:30.735  -->  00:10:34.045
and 10 percent of 1000 is of course 100.
214

214

00:10:34.045  -->  00:10:37.730
So never forget that the parent's width is the reference
215

215

00:10:37.730  -->  00:10:40.442
for percentage based calculations.
216

216

00:10:40.442  -->  00:10:42.056
Believe me, that I learned this the hard way
217

217

00:10:42.056  -->  00:10:45.539
through a lot of confusion and experimentation.
218

218

00:10:45.539  -->  00:10:49.564
Next up, we have some font-based relative units, em and rem.
219

219

00:10:49.564  -->  00:10:53.727
And again, it's different to use ems for fonts or for length
220

220

00:10:53.727  -->  00:10:56.727
so both ems and rems are font-based,
221

221

00:10:57.743  -->  00:11:00.431
but the difference between them is that ems
222

222

00:11:00.431  -->  00:11:03.035
use the parent or the current element as a reference
223

223

00:11:03.035  -->  00:11:06.573
while rems use the root font-size as the reference.
224

224

00:11:06.573  -->  00:11:08.414
So let's see how it works.
225

225

00:11:08.414  -->  00:11:10.471
If we want to use ems for font-sizes,
226

226

00:11:10.471  -->  00:11:14.209
then the reference is simply the parent's computed font-size
227

227

00:11:14.209  -->  00:11:16.496
similar to what happens with percentages.
228

228

00:11:16.496  -->  00:11:20.191
In our example, a three em font-size on the header child
229

229

00:11:20.191  -->  00:11:25.126
element results in 72 pixels simply because that's three
230

230

00:11:25.126  -->  00:11:27.793
times the parent font size, which is 24.
231

231

00:11:27.793  -->  00:11:31.421
So three times 24 makes 72, make sense?
232

232

00:11:31.421  -->  00:11:34.629
Now for length, it's just a bit different.
233

233

00:11:34.629  -->  00:11:36.387
The two em padding on the header,
234

234

00:11:36.387  -->  00:11:38.073
since it's a length measurement,
235

235

00:11:38.073  -->  00:11:41.806
uses the font size of the current element as a reference
236

236

00:11:41.806  -->  00:11:44.605
and we already know that's 24 pixels.
237

237

00:11:44.605  -->  00:11:48.772
And so two em will result in a 48 pixel padding, got it?
238

238

00:11:50.077  -->  00:11:53.362
It's a subtle difference, but an important one.
239

239

00:11:53.362  -->  00:11:56.053
So for fonts, the reference is the parent.
240

240

00:11:56.053  -->  00:11:59.361
For length, the reference is the current element.
241

241

00:11:59.361  -->  00:12:01.665
And now finally, about the rem.
242

242

00:12:01.665  -->  00:12:03.107
It actually works the same way
243

243

00:12:03.107  -->  00:12:05.440
for both font sizes and length
244

244

00:12:05.440  -->  00:12:06.962
because it always just uses the
245

245

00:12:06.962  -->  00:12:09.881
root font size as a reference.
246

246

00:12:09.881  -->  00:12:12.589
This means that the 10 rem padding that we have here
247

247

00:12:12.589  -->  00:12:16.859
will result in a 160 pixels because the root font size is 16
248

248

00:12:16.859  -->  00:12:20.557
and 10 times 16 is of course 160 pixels.
249

249

00:12:20.557  -->  00:12:23.811
So, that's the big difference between ems and rems.
250

250

00:12:23.811  -->  00:12:26.797
Now, you may ask, "Why should we actually size stuff
251

251

00:12:26.797  -->  00:12:30.164
with ems and rems if they are based on font-size?
252

252

00:12:30.164  -->  00:12:31.634
It seems a bit strange, right?"
253

253

00:12:31.634  -->  00:12:33.954
And the answer is that by doing so,
254

254

00:12:33.954  -->  00:12:37.075
we can build more request responsive layouts
255

255

00:12:37.075  -->  00:12:39.449
because just by changing font sizes,
256

256

00:12:39.449  -->  00:12:41.616
we will automatically change length
257

257

00:12:41.616  -->  00:12:44.591
since it depend on a font size and that gives us a lot
258

258

00:12:44.591  -->  00:12:48.031
of flexibility, and it's just a great technique.
259

259

00:12:48.031  -->  00:12:50.044
And so we're actually going to do that in practice
260

260

00:12:50.044  -->  00:12:51.546
in a project so that you can see
261

261

00:12:51.546  -->  00:12:53.627
how powerful this approach is.
262

262

00:12:53.627  -->  00:12:56.467
Now finally, we have two more relative units
263

263

00:12:56.467  -->  00:12:58.571
but they're really simple.
264

264

00:12:58.571  -->  00:13:01.333
These two are based on a browser's view port
265

265

00:13:01.333  -->  00:13:03.888
and they're called vh and vw.
266

266

00:13:03.888  -->  00:13:07.036
Basically one vh is just one percent of the view port
267

267

00:13:07.036  -->  00:13:11.203
height and one vw is just one percent of the view port width
268

268

00:13:12.763  -->  00:13:15.563
so when we specify a height of 90 vh,
269

269

00:13:15.563  -->  00:13:17.458
this will simply translate to 90 percent
270

270

00:13:17.458  -->  00:13:19.558
of the current view port height.
271

271

00:13:19.558  -->  00:13:21.566
Of course, in this specific example,
272

272

00:13:21.566  -->  00:13:23.867
we don't know what the view port height is
273

273

00:13:23.867  -->  00:13:27.078
but the browser who's painting the page knows about it
274

274

00:13:27.078  -->  00:13:28.538
and so it does these calculations
275

275

00:13:28.538  -->  00:13:31.973
when it's calculating the used values in pixels
276

276

00:13:31.973  -->  00:13:34.285
and the same applies, of course, to vw.
277

277

00:13:34.285  -->  00:13:37.520
So a width of 80 vw, for example,
278

278

00:13:37.520  -->  00:13:40.390
is just 80 percent of the view port's width.
279

279

00:13:40.390  -->  00:13:43.831
You probably already used the vh unit before, right?
280

280

00:13:43.831  -->  00:13:46.930
That one was really useful to built nice hero sections
281

281

00:13:46.930  -->  00:13:49.934
with 100 percent of the view port's height
282

282

00:13:49.934  -->  00:13:51.632
so that's where we use them a lot.
283

283

00:13:51.632  -->  00:13:54.416
Alright, let's now quickly summarize
284

284

00:13:54.416  -->  00:13:56.356
what we learned in this lecture.
285

285

00:13:56.356  -->  00:13:58.209
Maybe you can even print this out
286

286

00:13:58.209  -->  00:14:00.550
if that makes learning easier for you.
287

287

00:14:00.550  -->  00:14:03.653
So each CSS property has an initial value
288

288

00:14:03.653  -->  00:14:06.310
which is used if nothing else is declared
289

289

00:14:06.310  -->  00:14:09.075
and if there is no inheritance, but we're going
290

290

00:14:09.075  -->  00:14:11.660
to talk more about inheritance in the next lecture.
291

291

00:14:11.660  -->  00:14:14.280
Browsers specify default font size
292

292

00:14:14.280  -->  00:14:17.363
for each page and that's usually 60 pixels,
293

293

00:14:17.363  -->  00:14:19.872
and this is a user agent definition, so it's not
294

294

00:14:19.872  -->  00:14:24.496
an initial value coming from the CSS specification.
295

295

00:14:24.496  -->  00:14:27.367
Percentages and relative values are always converted
296

296

00:14:27.367  -->  00:14:30.683
to pixels in order for the CSS engine to be able
297

297

00:14:30.683  -->  00:14:33.744
to render the page on the screen.
298

298

00:14:33.744  -->  00:14:36.214
About percentages, they are measured relative
299

299

00:14:36.214  -->  00:14:39.847
to their parent's font-size if used to specify font-sizes
300

300

00:14:39.847  -->  00:14:42.778
and they are measured relative to their parent's width
301

301

00:14:42.778  -->  00:14:46.014
if they're used to specify length.
302

302

00:14:46.014  -->  00:14:49.061
Now ems are measured relative to their parent's font size
303

303

00:14:49.061  -->  00:14:52.947
if used to specify font-sizes and they're measured relative
304

304

00:14:52.947  -->  00:14:57.114
to the current font-size if they're used to specify length.
305

305

00:14:58.604  -->  00:15:01.690
Next, rems are always measured relative
306

306

00:15:01.690  -->  00:15:05.036
to the document's root font-size that I mentioned before.
307

307

00:15:05.036  -->  00:15:09.402
And finally, vh and vw are simply percentage measurements
308

308

00:15:09.402  -->  00:15:12.789
of the view port's height and width respectively.
309

309

00:15:12.789  -->  00:15:16.479
Okay, and so this wraps up this lecture which was rather
310

310

00:15:16.479  -->  00:15:20.931
intense, I know, but still super important, in my opinion.
311

311

00:15:20.931  -->  00:15:23.152
If anything is not 100 percent clear,
312

312

00:15:23.152  -->  00:15:26.093
I would actually advise you to watch the lecture again
313

313

00:15:26.093  -->  00:15:28.219
or at least parts of it, so that everything
314

314

00:15:28.219  -->  00:15:30.100
makes sense for you.
315

315

00:15:30.100  -->  00:15:32.626
Then after that, let's just move on to the next lecture
316

316

00:15:32.626  -->  00:15:35.218
where we're going to talk about inheritance
317

317

00:15:35.218  -->  00:15:39.385
that we only touched very briefly in this lecture.
