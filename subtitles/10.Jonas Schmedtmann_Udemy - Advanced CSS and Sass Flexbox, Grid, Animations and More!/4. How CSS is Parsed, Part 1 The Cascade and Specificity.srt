1
1

00:00:01,060  -->  00:00:03,233
<v Instructor>Hey there, so in the last lecture</v>
2

2

00:00:03,233  -->  00:00:05,175
I gave you a high level overview
3

3

00:00:05,175  -->  00:00:09,385
about how HTML and CSS are processed in the browser.
4

4

00:00:09,385  -->  00:00:11,684
Now in this lecture we're going to start to look
5

5

00:00:11,684  -->  00:00:13,660
at the CSS parsing phase,
6

6

00:00:13,660  -->  00:00:18,321
because a lot of important stuff happens in this phase.
7

7

00:00:18,321  -->  00:00:19,973
Now just before we start
8

8

00:00:19,973  -->  00:00:22,490
let's do a quick review of the official terms
9

9

00:00:22,490  -->  00:00:24,738
that we can find in a CSS rule
10

10

00:00:24,738  -->  00:00:26,540
just so that we're all on the same page
11

11

00:00:26,540  -->  00:00:29,282
in these and the coding videos.
12

12

00:00:29,282  -->  00:00:31,832
So a rule consists of a selector
13

13

00:00:31,832  -->  00:00:34,038
and a declaration block.
14

14

00:00:34,038  -->  00:00:36,019
As you know we use the selector
15

15

00:00:36,019  -->  00:00:40,184
to select one or more HTML elements that we want to style.
16

16

00:00:40,184  -->  00:00:41,977
Then in a declaration block
17

17

00:00:41,977  -->  00:00:44,247
is where we write the actual styles
18

18

00:00:44,247  -->  00:00:46,866
in order to style elements on our page.
19

19

00:00:46,866  -->  00:00:50,687
To do so we can write one or more CSS declarations
20

20

00:00:50,687  -->  00:00:52,777
in each declaration block.
21

21

00:00:52,777  -->  00:00:56,164
Each declaration consists of a CSS property
22

22

00:00:56,164  -->  00:00:57,989
and its corresponding value,
23

23

00:00:57,989  -->  00:01:00,685
which is the value that we assign to a property.
24

24

00:01:00,685  -->  00:01:02,801
This value we assign to a property
25

25

00:01:02,801  -->  00:01:05,232
is called the declared value.
26

26

00:01:05,232  -->  00:01:07,567
All right and that's it, very simple.
27

27

00:01:07,567  -->  00:01:09,387
So let's now talk about the first step
28

28

00:01:09,387  -->  00:01:11,470
of the CSS parsing phase.
29

29

00:01:12,389  -->  00:01:15,221
First off remember that in the parsing phase
30

30

00:01:15,221  -->  00:01:18,718
the first step is to resolve conflicting CSS declarations
31

31

00:01:18,718  -->  00:01:22,698
and the second step is to process the final CSS values.
32

32

00:01:22,698  -->  00:01:24,913
So let's start with step one in this lecture,
33

33

00:01:24,913  -->  00:01:28,827
which is the cascade and let's define exactly what it is.
34

34

00:01:28,827  -->  00:01:31,651
So the cascade is the process of combining
35

35

00:01:31,651  -->  00:01:34,044
different stylesheets and resolving conflicts
36

36

00:01:34,044  -->  00:01:36,657
between different CSS rules and declarations
37

37

00:01:36,657  -->  00:01:40,508
when more than one rule applies to a certain element.
38

38

00:01:40,508  -->  00:01:43,049
Because as you probably already know
39

39

00:01:43,049  -->  00:01:46,567
a declaration for a certain style property like font size
40

40

00:01:46,567  -->  00:01:48,425
can appear in several stylesheets
41

41

00:01:48,425  -->  00:01:52,552
and also several times inside one single stylesheet.
42

42

00:01:52,552  -->  00:01:55,839
Now CSS can also come from different sources.
43

43

00:01:55,839  -->  00:01:59,694
The most common one is the CSS that we the developers write.
44

44

00:01:59,694  -->  00:02:02,513
These declarations that we put in our stylesheets
45

45

00:02:02,513  -->  00:02:05,207
are called the author declarations.
46

46

00:02:05,207  -->  00:02:07,636
Another source can be the user declarations,
47

47

00:02:07,636  -->  00:02:10,597
which is CSS coming from the user.
48

48

00:02:10,597  -->  00:02:12,580
For instance, when the user changes
49

49

00:02:12,580  -->  00:02:14,504
the default font size in the browser
50

50

00:02:14,504  -->  00:02:17,103
then that is user CSS,
51

51

00:02:17,103  -->  00:02:18,660
and last but not least
52

52

00:02:18,660  -->  00:02:21,692
there are the default browser declarations.
53

53

00:02:21,692  -->  00:02:25,469
For instance, if we put an anchor tag in our HTML for a link
54

54

00:02:25,469  -->  00:02:28,035
and then don't style it at all it will usually
55

55

00:02:28,035  -->  00:02:31,491
be rendered with blue text and underlined, right.
56

56

00:02:31,491  -->  00:02:34,209
That's called the user agent CSS,
57

57

00:02:34,209  -->  00:02:36,997
because it's set by the browser.
58

58

00:02:36,997  -->  00:02:39,851
So the cascade combines the CSS declarations
59

59

00:02:39,851  -->  00:02:42,592
coming from all these different sources,
60

60

00:02:42,592  -->  00:02:45,093
but how does the cascade actually resolve conflicts
61

61

00:02:45,093  -->  00:02:47,239
when more than one rule applies?
62

62

00:02:47,239  -->  00:02:50,867
Well what it does is to look at the importance,
63

63

00:02:50,867  -->  00:02:52,966
at the selector specificity,
64

64

00:02:52,966  -->  00:02:55,940
and to source order of conflicting declarations
65

65

00:02:55,940  -->  00:03:00,035
in order to determine which one takes precedence,
66

66

00:03:00,035  -->  00:03:01,888
and here's how that works.
67

67

00:03:01,888  -->  00:03:04,487
First off the cascade starts by giving
68

68

00:03:04,487  -->  00:03:07,064
the conflicting declarations different importance's
69

69

00:03:07,064  -->  00:03:08,780
based on where they are declared,
70

70

00:03:08,780  -->  00:03:11,300
so based on their source.
71

71

00:03:11,300  -->  00:03:12,954
The most important declarations
72

72

00:03:12,954  -->  00:03:16,625
are user declarations marked with the important keyword.
73

73

00:03:16,625  -->  00:03:19,450
You already know the important keyword in CSS, right?
74

74

00:03:19,450  -->  00:03:22,604
If not I'm going to show you an example in a second.
75

75

00:03:22,604  -->  00:03:24,935
Next the second most important declarations
76

76

00:03:24,935  -->  00:03:28,082
are the author declarations marked with important.
77

77

00:03:28,082  -->  00:03:30,434
Third, the normal author declarations,
78

78

00:03:30,434  -->  00:03:32,231
then the normal user declarations,
79

79

00:03:32,231  -->  00:03:34,458
and finally the least important ones
80

80

00:03:34,458  -->  00:03:36,683
are the default browser declarations,
81

81

00:03:36,683  -->  00:03:38,439
which actually makes a lot of sense
82

82

00:03:38,439  -->  00:03:40,005
so that we can easily overwrite
83

83

00:03:40,005  -->  00:03:43,819
these declarations coming by default from the browser,
84

84

00:03:43,819  -->  00:03:46,919
but we should get a look at an example here, right.
85

85

00:03:46,919  -->  00:03:48,459
So here we have two rules
86

86

00:03:48,459  -->  00:03:50,658
which both apply to the button class
87

87

00:03:50,658  -->  00:03:52,626
and we have two conflicting declarations
88

88

00:03:52,626  -->  00:03:54,373
about the background color.
89

89

00:03:54,373  -->  00:03:56,659
These are both author declarations,
90

90

00:03:56,659  -->  00:03:58,906
but if you look closely in the first rule
91

91

00:03:58,906  -->  00:04:00,953
the declaration with the blue background color
92

92

00:04:00,953  -->  00:04:02,908
contains the important keyword
93

93

00:04:02,908  -->  00:04:06,040
and therefore this declaration is more important
94

94

00:04:06,040  -->  00:04:08,176
as we can see from our table.
95

95

00:04:08,176  -->  00:04:11,360
This means that this is the declaration that gets precedence
96

96

00:04:11,360  -->  00:04:15,277
and so we see that our button is indeed blue.
97

97

00:04:16,208  -->  00:04:18,792
Great, does it make sense to you?
98

98

00:04:18,792  -->  00:04:19,953
I'm sure it does
99

99

00:04:19,953  -->  00:04:23,454
and we'll see a lot more examples later on.
100

100

00:04:23,454  -->  00:04:24,790
Now a lot of times
101

101

00:04:24,790  -->  00:04:27,102
we will just have a bunch of conflicting rules
102

102

00:04:27,102  -->  00:04:30,875
in our author stylesheets without any important keyword.
103

103

00:04:30,875  -->  00:04:32,971
That is actually the most common scenario
104

104

00:04:32,971  -->  00:04:34,877
and in this case all the declarations
105

105

00:04:34,877  -->  00:04:37,118
have the exact same importance.
106

106

00:04:37,118  -->  00:04:39,215
Now what happens in this case?
107

107

00:04:39,215  -->  00:04:41,352
What the cascade does if this is the case
108

108

00:04:41,352  -->  00:04:44,540
is to calculate and compare the specificities
109

109

00:04:44,540  -->  00:04:46,726
of the declaration selectors,
110

110

00:04:46,726  -->  00:04:48,632
and this is how it works.
111

111

00:04:48,632  -->  00:04:51,295
Inline styles have the highest specificity
112

112

00:04:51,295  -->  00:04:53,565
followed by IDs, then classes,
113

113

00:04:53,565  -->  00:04:55,759
pseudo classes and attribute selectors,
114

114

00:04:55,759  -->  00:04:57,733
and finally the least specific
115

115

00:04:57,733  -->  00:05:00,817
the element and pseudo element selector.
116

116

00:05:00,817  -->  00:05:03,259
So when we have conflicting declarations
117

117

00:05:03,259  -->  00:05:06,637
with the same importance as we saw in the last slide
118

118

00:05:06,637  -->  00:05:09,480
we calculate their selector specificity
119

119

00:05:09,480  -->  00:05:12,318
based on the priorities I just showed you,
120

120

00:05:12,318  -->  00:05:14,820
but let's see how we actually calculate specificities
121

121

00:05:14,820  -->  00:05:18,468
with a small example, that's always best, right.
122

122

00:05:18,468  -->  00:05:21,603
First off all these declarations have the same importance,
123

123

00:05:21,603  -->  00:05:24,257
because they're all author declarations.
124

124

00:05:24,257  -->  00:05:27,773
So let's calculate their selector specificities
125

125

00:05:27,773  -->  00:05:29,846
in order to find out if the background color
126

126

00:05:29,846  -->  00:05:33,202
will be either blue, green, purple, or yellow,
127

127

00:05:33,202  -->  00:05:35,146
and this is how we do it.
128

128

00:05:35,146  -->  00:05:38,319
The specificity is actually not just one number,
129

129

00:05:38,319  -->  00:05:40,876
but one number for each of the four categories
130

130

00:05:40,876  -->  00:05:42,180
I showed you before.
131

131

00:05:42,180  -->  00:05:46,119
Inline styles, IDs, classes, pseudo elements and attributes,
132

132

00:05:46,119  -->  00:05:49,108
and finally elements and for each of these
133

133

00:05:49,108  -->  00:05:52,468
we count the number of occurrences in the selector.
134

134

00:05:52,468  -->  00:05:54,142
Simple as that.
135

135

00:05:54,142  -->  00:05:55,773
So here in selector one
136

136

00:05:55,773  -->  00:05:58,226
we don't have any inline styles of course,
137

137

00:05:58,226  -->  00:06:01,065
because an inline style has to be written in the HTML,
138

138

00:06:01,065  -->  00:06:03,839
which is not the case here, so it's a zero.
139

139

00:06:03,839  -->  00:06:07,580
We also have no IDs here, so it's again a zero,
140

140

00:06:07,580  -->  00:06:10,701
but we do have one class, the button class.
141

141

00:06:10,701  -->  00:06:13,941
So for the classes category we have a one,
142

142

00:06:13,941  -->  00:06:16,623
and finally there's no element selector here
143

143

00:06:16,623  -->  00:06:18,794
so zero for that one as well,
144

144

00:06:18,794  -->  00:06:19,789
and that's it.
145

145

00:06:19,789  -->  00:06:21,902
The selector specificity is
146

146

00:06:21,902  -->  00:06:24,526
zero, zero, one, zero.
147

147

00:06:24,526  -->  00:06:28,148
Great, let's now compare it to the others.
148

148

00:06:28,148  -->  00:06:30,417
The next one is also not an inline style,
149

149

00:06:30,417  -->  00:06:32,955
so zero for the first one.
150

150

00:06:32,955  -->  00:06:35,680
Now here we actually have an ID selector
151

151

00:06:35,680  -->  00:06:38,165
for the nav ID, right,
152

152

00:06:38,165  -->  00:06:40,645
so it's one for the ID.
153

153

00:06:40,645  -->  00:06:43,928
We also have two classes pull right and button
154

154

00:06:43,928  -->  00:06:46,667
so it's a two for the classes category,
155

155

00:06:46,667  -->  00:06:50,136
and finally there are also two element selectors here.
156

156

00:06:50,136  -->  00:06:52,345
The nav element and the div element,
157

157

00:06:52,345  -->  00:06:56,273
which means that it's also two for the elements category.
158

158

00:06:56,273  -->  00:06:59,315
So finally the specificity to the selector
159

159

00:06:59,315  -->  00:07:02,023
is zero, one, two, two,
160

160

00:07:02,023  -->  00:07:05,213
which is actually a highly specific selector.
161

161

00:07:05,213  -->  00:07:07,671
Selector number three is very simple.
162

162

00:07:07,671  -->  00:07:09,284
It's just an element selector
163

163

00:07:09,284  -->  00:07:13,898
and so the specificity is zero, zero, zero, one.
164

164

00:07:13,898  -->  00:07:16,701
Now the last one, selector number four.
165

165

00:07:16,701  -->  00:07:21,251
First again we have the nav ID, so it's one for the ID.
166

166

00:07:21,251  -->  00:07:23,630
Next we have a class, the button class
167

167

00:07:23,630  -->  00:07:25,896
and also a pseudo class, which is hover,
168

168

00:07:25,896  -->  00:07:29,358
which makes it two for the classes category in total.
169

169

00:07:29,358  -->  00:07:31,818
Since there's also one element selector
170

170

00:07:31,818  -->  00:07:35,698
the final specificity is zero, one, two, one.
171

171

00:07:35,698  -->  00:07:37,378
Make sense?
172

172

00:07:37,378  -->  00:07:39,094
Now you're probably wondering
173

173

00:07:39,094  -->  00:07:40,521
well this is all great,
174

174

00:07:40,521  -->  00:07:42,625
but how do we actually use these numbers
175

175

00:07:42,625  -->  00:07:46,058
to find out which of the selectors applies.
176

176

00:07:46,058  -->  00:07:49,528
We start to look at the numbers from left to right
177

177

00:07:49,528  -->  00:07:53,369
starting with the most specific category, the inline styles.
178

178

00:07:53,369  -->  00:07:55,058
If there is a selector with one
179

179

00:07:55,058  -->  00:07:57,379
it wins against all the other selectors,
180

180

00:07:57,379  -->  00:07:59,848
because this is the most specific category.
181

181

00:07:59,848  -->  00:08:01,285
Well this is not the case here,
182

182

00:08:01,285  -->  00:08:03,726
so let's move on to the IDs.
183

183

00:08:03,726  -->  00:08:06,601
We see that selector two and four have a one here
184

184

00:08:06,601  -->  00:08:08,532
while the others have zero
185

185

00:08:08,532  -->  00:08:11,305
so the ones with zero are out of the game,
186

186

00:08:11,305  -->  00:08:14,588
because they are less specific then selectors two and four
187

187

00:08:14,588  -->  00:08:16,079
the ones with the IDs.
188

188

00:08:16,079  -->  00:08:17,367
Okay?
189

189

00:08:17,367  -->  00:08:20,875
Now since both selectors have a one in this category
190

190

00:08:20,875  -->  00:08:23,921
we have to move on and check the classes.
191

191

00:08:23,921  -->  00:08:26,680
They both have a two in this category
192

192

00:08:26,680  -->  00:08:29,003
so it's still a tie between them,
193

193

00:08:29,003  -->  00:08:31,262
and finally in the elements category
194

194

00:08:31,262  -->  00:08:33,097
the selector two has a two
195

195

00:08:33,097  -->  00:08:35,663
while the selector four has only one
196

196

00:08:35,663  -->  00:08:37,270
and so we have a winner here.
197

197

00:08:37,270  -->  00:08:39,414
The selector number two is the most
198

198

00:08:39,414  -->  00:08:41,502
specific selector of all
199

199

00:08:41,502  -->  00:08:44,739
and so it will give our button a green background.
200

200

00:08:44,739  -->  00:08:46,334
The value of the winning declaration
201

201

00:08:46,334  -->  00:08:48,055
is called the cascaded value,
202

202

00:08:48,055  -->  00:08:50,892
because it's the result from the cascade.
203

203

00:08:50,892  -->  00:08:53,943
So we start with a bunch of declared values
204

204

00:08:53,943  -->  00:08:57,161
in this case blue, green, purple, and yellow
205

205

00:08:57,161  -->  00:09:00,251
and one of them wins and becomes the cascaded value,
206

206

00:09:00,251  -->  00:09:02,727
which is in our example green.
207

207

00:09:02,727  -->  00:09:05,539
Now imagine sector four also had two elements
208

208

00:09:05,539  -->  00:09:07,672
then both selectors two and four
209

209

00:09:07,672  -->  00:09:10,497
would have the exact same specificity, right.
210

210

00:09:10,497  -->  00:09:12,704
So what happens in this case
211

211

00:09:12,704  -->  00:09:15,752
and I promise you it's almost over now okay.
212

212

00:09:15,752  -->  00:09:18,439
Well if there's still a tie at this point
213

213

00:09:18,439  -->  00:09:21,505
then the last CSS declaration written in the code
214

214

00:09:21,505  -->  00:09:23,505
is the one that will apply.
215

215

00:09:23,505  -->  00:09:26,151
So again if everything is equal,
216

216

00:09:26,151  -->  00:09:28,097
if all the declarations selectors
217

217

00:09:28,097  -->  00:09:29,963
have the same specificity
218

218

00:09:29,963  -->  00:09:32,815
then it's simply the last declaration that will be used
219

219

00:09:32,815  -->  00:09:36,874
to style the selected element, that's it.
220

220

00:09:36,874  -->  00:09:39,041
Now just before we finish this lecture
221

221

00:09:39,041  -->  00:09:41,251
let me give you a quick summary and overview
222

222

00:09:41,251  -->  00:09:44,235
of the most important things we just learned.
223

223

00:09:44,235  -->  00:09:46,433
This is essentially what you should really retain
224

224

00:09:46,433  -->  00:09:47,882
from this lecture.
225

225

00:09:47,882  -->  00:09:50,641
First off we learned that CSS declarations
226

226

00:09:50,641  -->  00:09:53,903
marked with important keyword have the highest priority
227

227

00:09:53,903  -->  00:09:56,683
when multiple declarations are in conflict,
228

228

00:09:56,683  -->  00:10:00,679
but you should only ever use important as a last resource.
229

229

00:10:00,679  -->  00:10:03,411
If something doesn't work the way you think it should
230

230

00:10:03,411  -->  00:10:05,445
then look at your selector specificities
231

231

00:10:05,445  -->  00:10:07,445
and figure out what's going on.
232

232

00:10:07,445  -->  00:10:09,949
That's always better then just adding important,
233

233

00:10:09,949  -->  00:10:12,399
which may solve the problem in an easier way,
234

234

00:10:12,399  -->  00:10:14,819
but will cause you problems in the long run.
235

235

00:10:14,819  -->  00:10:17,143
Remember the talk about maintainable code
236

236

00:10:17,143  -->  00:10:19,491
well thinking about specificities
237

237

00:10:19,491  -->  00:10:22,555
and using important only as the last resource
238

238

00:10:22,555  -->  00:10:23,982
is one of the things that will make your code
239

239

00:10:23,982  -->  00:10:26,618
more maintainable for the future.
240

240

00:10:26,618  -->  00:10:27,964
The next thing to remember
241

241

00:10:27,964  -->  00:10:30,463
is that inline styles that you write in your HTML
242

242

00:10:30,463  -->  00:10:32,983
will always have priority over styles
243

243

00:10:32,983  -->  00:10:35,455
you write in an external stylesheet,
244

244

00:10:35,455  -->  00:10:36,985
but since using inline styles
245

245

00:10:36,985  -->  00:10:38,940
isn't such a good practice anyway
246

246

00:10:38,940  -->  00:10:41,338
this one isn't all too important.
247

247

00:10:41,338  -->  00:10:45,022
Next a selector that contains even only one ID
248

248

00:10:45,022  -->  00:10:48,251
is more specific than one with 1,000 classes.
249

249

00:10:48,251  -->  00:10:52,556
So if you want to be really specific use an ID.
250

250

00:10:52,556  -->  00:10:55,077
In the same way a selector with one class
251

251

00:10:55,077  -->  00:10:58,854
is more specific than one with 1,000 elements of course.
252

252

00:10:58,854  -->  00:11:01,071
One thing that is really important to note
253

253

00:11:01,071  -->  00:11:04,935
is that the universal selector has no specificity value
254

254

00:11:04,935  -->  00:11:07,347
and so it's zero, zero, zero, zero,
255

255

00:11:07,347  -->  00:11:09,608
which means that all other selectors
256

256

00:11:09,608  -->  00:11:11,370
have a precedence over it.
257

257

00:11:11,370  -->  00:11:12,681
You will see how and why
258

258

00:11:12,681  -->  00:11:15,891
when we start coding our project.
259

259

00:11:15,891  -->  00:11:17,911
Another thing that you should note
260

260

00:11:17,911  -->  00:11:21,068
is that it's best to always rely on more specificity
261

261

00:11:21,068  -->  00:11:23,592
than on the order of selectors.
262

262

00:11:23,592  -->  00:11:27,051
This way if you someday rearrange all your CSS code
263

263

00:11:27,051  -->  00:11:29,355
you won't have any surprises which could mess up
264

264

00:11:29,355  -->  00:11:31,285
your entire code.
265

265

00:11:31,285  -->  00:11:33,856
This again makes your code a lot easier to maintain,
266

266

00:11:33,856  -->  00:11:35,911
which is hugely important.
267

267

00:11:35,911  -->  00:11:38,929
Now there's actually one case where you do
268

268

00:11:38,929  -->  00:11:41,072
need to worry about the order of selectors
269

269

00:11:41,072  -->  00:11:42,668
and that's when you're using external
270

270

00:11:42,668  -->  00:11:44,704
third party stylesheets.
271

271

00:11:44,704  -->  00:11:46,069
Imagine for instance
272

272

00:11:46,069  -->  00:11:48,573
that you include something like a reset stylesheets,
273

273

00:11:48,573  -->  00:11:51,883
which defines a couple of styles for common elements.
274

274

00:11:51,883  -->  00:11:53,231
In this case of course
275

275

00:11:53,231  -->  00:11:55,755
you want your stylesheets to be able to overwrite
276

276

00:11:55,755  -->  00:11:58,020
the third party styles if necessary,
277

277

00:11:58,020  -->  00:11:59,679
and so your own stylesheet
278

278

00:11:59,679  -->  00:12:02,320
should be the last one to be included in the HTML.
279

279

00:12:02,320  -->  00:12:06,721
So in this case the order is actually usually important.
280

280

00:12:06,721  -->  00:12:09,255
All right, that's actually all there is to know
281

281

00:12:09,255  -->  00:12:12,409
about the cascade and specificity in CSS.
282

282

00:12:12,409  -->  00:12:15,073
So if you ever wondered what the cascading word
283

283

00:12:15,073  -->  00:12:17,439
in cascading stylesheets actually means
284

284

00:12:17,439  -->  00:12:18,453
now you know it.
285

285

00:12:18,453  -->  00:12:20,042
Great, right?
286

286

00:12:20,042  -->  00:12:22,575
And the best part is that understanding all of this
287

287

00:12:22,575  -->  00:12:24,482
will now allow you to write better,
288

288

00:12:24,482  -->  00:12:27,732
cleaner and more maintainable CSS code.
