WEBVTT
1
00:00:01.095 --> 00:00:05.464
Improving task estimation should be a continuous goal of your team.

2
00:00:05.464 --> 00:00:07.702
Estimating user stories is done in story points,

3
00:00:07.702 --> 00:00:11.032
but when we do task estimates, we want them in hours.

4
00:00:11.032 --> 00:00:15.062
Remember, tasks are very discreet units of technical work.

5
00:00:15.062 --> 00:00:15.683
Okay.

6
00:00:15.683 --> 00:00:20.080
Now developers may resist making estimates since it can be hard to do,

7
00:00:20.080 --> 00:00:22.010
and after development begins,

8
00:00:22.010 --> 00:00:25.141
they don't want to be all stressed out trying to make their estimates.

9
00:00:25.141 --> 00:00:29.331
To make up for this, developers sometimes pad their estimates two or three times,

10
00:00:29.331 --> 00:00:31.083
and even then it may be too low.

11
00:00:31.083 --> 00:00:32.965
We don't want to have this happen.

12
00:00:32.965 --> 00:00:37.109
Always use ideal time, not calendar time when making estimates.

13
00:00:37.109 --> 00:00:39.729
Calendar time means nothing to me since you don't know if

14
00:00:39.729 --> 00:00:42.660
someone is working for 8 hours a day, 12 hours a day,

15
00:00:42.660 --> 00:00:45.642
taking a vacation, or any other multitude of variations.

16
00:00:45.642 --> 00:00:50.118
Yet, ask any developer, and they will say, well, I should be done by Friday.

17
00:00:50.118 --> 00:00:51.039
Wrong answer.

18
00:00:51.039 --> 00:00:54.042
What I want to know is the number of ideal hours remaining.

19
00:00:54.042 --> 00:00:57.086
Now research shows using a consistent estimating technique

20
00:00:57.086 --> 00:01:00.251
by your team will yield better estimates.

21
00:01:00.251 --> 00:01:00.630
Remember,

22
00:01:00.630 --> 00:01:04.357
your velocity is your feedback loop to see how well your task

23
00:01:04.357 --> 00:01:07.139
estimates compare to your story point estimates.

24
00:01:07.139 --> 00:01:10.516
If you underestimate, you will likely not finish your user stories.

25
00:01:10.516 --> 00:01:10.930
Now,

26
00:01:10.930 --> 00:01:14.601
that's basically okay since this causes your velocity to go down

27
00:01:14.601 --> 00:01:17.043
because you did not finish your user stories,

28
00:01:17.043 --> 00:01:20.078
thus taking on fewer user stories in the next sprint,

29
00:01:20.078 --> 00:01:21.621
which makes total sense.

30
00:01:21.621 --> 00:01:24.930
This will help normalize and level out your velocity.

31
00:01:24.930 --> 00:01:27.838
Velocity is such a great feedback loop,

32
00:01:27.838 --> 00:01:37.000
and it helps your team calibrate your estimation practices and individual competencies for both task and user story estimates.

