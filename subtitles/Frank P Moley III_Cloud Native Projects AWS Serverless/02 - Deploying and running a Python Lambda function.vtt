WEBVTT
1
00:00:00.005 --> 00:00:03.007
- In our last video, we created a very simple,

2
00:00:03.007 --> 00:00:07.004
yet ultimately powerful lambda function that allowed

3
00:00:07.004 --> 00:00:10.004
us to iterate over some request data

4
00:00:10.004 --> 00:00:12.009
and spit it out to the console.

5
00:00:12.009 --> 00:00:14.008
So now let's take a look at how to run

6
00:00:14.008 --> 00:00:18.007
that lambda in the absence of some external trigger.

7
00:00:18.007 --> 00:00:20.003
And this is really a great way

8
00:00:20.003 --> 00:00:23.008
for you to test your Lambdas within the console.

9
00:00:23.008 --> 00:00:25.004
If you don't have access to any

10
00:00:25.004 --> 00:00:28.003
of Amazon's testing tools that you can install locally

11
00:00:28.003 --> 00:00:30.009
on your machine.

12
00:00:30.009 --> 00:00:34.002
So let's navigate back to the AWS management console

13
00:00:34.002 --> 00:00:38.009
and we're going to click on Lambda

14
00:00:38.009 --> 00:00:41.001
and we'll go into our Lambda functions

15
00:00:41.001 --> 00:00:46.009
and we'll click our LinkedIn learning demo.

16
00:00:46.009 --> 00:00:48.004
And you'll see that we have our function

17
00:00:48.004 --> 00:00:51.000
that we created earlier.

18
00:00:51.000 --> 00:00:55.007
Now, from right here, we can click the test function.

19
00:00:55.007 --> 00:00:58.006
Now, what this allows us to do is we can create

20
00:00:58.006 --> 00:01:01.007
a new test event or edit an existing

21
00:01:01.007 --> 00:01:04.000
saved test event.

22
00:01:04.000 --> 00:01:06.007
We will head and create a new one.

23
00:01:06.007 --> 00:01:09.004
The event template doesn't really matter

24
00:01:09.004 --> 00:01:12.002
because all we're doing is giving it

25
00:01:12.002 --> 00:01:13.005
some sort of a structure.

26
00:01:13.005 --> 00:01:15.006
And all we need is a Json payload

27
00:01:15.006 --> 00:01:17.006
For this test.

28
00:01:17.006 --> 00:01:24.001
So we'll name this testing IL.

29
00:01:24.001 --> 00:01:27.009
And we will replace all of this Json payload.

30
00:01:27.009 --> 00:01:32.005
So if you remember, our function took a message.

31
00:01:32.005 --> 00:01:35.004
And for this message, we will simply do a hello

32
00:01:35.004 --> 00:01:39.009
LinkedIn learning.

33
00:01:39.009 --> 00:01:43.009
And we're also going to send it a count

34
00:01:43.009 --> 00:01:46.003
and we'll do it five times.

35
00:01:46.003 --> 00:01:50.001
Now, make sure your Json is structured correctly

36
00:01:50.001 --> 00:01:53.001
and now we will simply create it.

37
00:01:53.001 --> 00:01:55.001
So now that we're back in our code source, you'll see

38
00:01:55.001 --> 00:01:59.008
that there's a warning here that says changes not deployed.

39
00:01:59.008 --> 00:02:04.004
We need to actually commit our code to our Lambda.

40
00:02:04.004 --> 00:02:05.002
And we can do that

41
00:02:05.002 --> 00:02:09.000
within the console by simply clicking deploy.

42
00:02:09.000 --> 00:02:11.003
So now that our changes have been deployed

43
00:02:11.003 --> 00:02:13.004
We can run this function.

44
00:02:13.004 --> 00:02:18.007
So let's select our testing, L I L, and run it.

45
00:02:18.007 --> 00:02:22.002
And what you see here is we get an execution result based

46
00:02:22.002 --> 00:02:25.001
on our function itself.

47
00:02:25.001 --> 00:02:26.006
So the first thing you'll notice here

48
00:02:26.006 --> 00:02:28.006
in the first few lines is we got the response

49
00:02:28.006 --> 00:02:30.008
payload that came back from our Lambda.

50
00:02:30.008 --> 00:02:32.007
And that was something that was defaulted

51
00:02:32.007 --> 00:02:36.005
in from the code editor in AWS.

52
00:02:36.005 --> 00:02:40.002
But you'll also notice that we get all of our log output

53
00:02:40.002 --> 00:02:43.008
and you'll see the log messages start with our request

54
00:02:43.008 --> 00:02:46.004
because we asked it to spit our requests out.

55
00:02:46.004 --> 00:02:49.000
And that requests came in just like we entered it

56
00:02:49.000 --> 00:02:51.008
as part of the test as we might expect

57
00:02:51.008 --> 00:02:54.007
but then we get into the loop to recreate it.

58
00:02:54.007 --> 00:02:56.006
And that loop executed five times

59
00:02:56.006 --> 00:03:00.005
and it printed out, hello, LinkedIn learning.

60
00:03:00.005 --> 00:03:01.007
You'll see the next section here

61
00:03:01.007 --> 00:03:05.000
for execution results actually list the function logs.

62
00:03:05.000 --> 00:03:07.004
And this is the log output that we told our

63
00:03:07.004 --> 00:03:09.002
application to produce.

64
00:03:09.002 --> 00:03:10.000
So we start

65
00:03:10.000 --> 00:03:12.004
with getting the environment variables that are passed

66
00:03:12.004 --> 00:03:14.000
by default to our Lambda.

67
00:03:14.000 --> 00:03:16.006
And in this case, it's the request ID.

68
00:03:16.006 --> 00:03:20.000
Then we start into the log messaging that we produced.

69
00:03:20.000 --> 00:03:20.008
You'll see

70
00:03:20.008 --> 00:03:23.001
that we have the request that we asked it to spit out.

71
00:03:23.001 --> 00:03:24.005
And then we have a loop

72
00:03:24.005 --> 00:03:27.004
of five times that we see that message.

73
00:03:27.004 --> 00:03:30.004
And that's based on the code that we produced.

74
00:03:30.004 --> 00:03:33.004
Then you'll see that we get an end message on that request.

75
00:03:33.004 --> 00:03:35.003
And then we get a final report

76
00:03:35.003 --> 00:03:37.001
and it tells us about the duration,

77
00:03:37.001 --> 00:03:39.009
how much we were billed and the memory size

78
00:03:39.009 --> 00:03:41.001
that we consumed.

79
00:03:41.001 --> 00:03:44.002
Now, a lot of this stuff is configurable,

80
00:03:44.002 --> 00:03:45.002
but within this case,

81
00:03:45.002 --> 00:03:47.005
you'll see we have 128 megabytes.

82
00:03:47.005 --> 00:03:50.006
The maximum we use for our interpreter listen up here

83
00:03:50.006 --> 00:03:53.000
towards the top was 51.

84
00:03:53.000 --> 00:03:54.002
We're in good shape.

85
00:03:54.002 --> 00:03:56.002
Now, as you're building bigger and bigger Lambdas

86
00:03:56.002 --> 00:03:59.004
you can use this test data to actually size your

87
00:03:59.004 --> 00:04:03.001
Lambda appropriately, knowing that the larger, the size

88
00:04:03.001 --> 00:04:06.007
the larger, the costs that you may be paying, but

89
00:04:06.007 --> 00:04:08.008
for the purposes of what we've just done

90
00:04:08.008 --> 00:04:10.005
we've written a Lambda function.

91
00:04:10.005 --> 00:04:11.003
And we did so

92
00:04:11.003 --> 00:04:12.009
in the embedded council,

93
00:04:12.009 --> 00:04:16.000
we executed that Lambda function after deploying it.

94
00:04:16.000 --> 00:04:18.004
And now we can analyze the results.

95
00:04:18.004 --> 00:04:20.005
Now, the sky's the limit from here.

96
00:04:20.005 --> 00:04:24.003
One thing I will tell you from experience is make sure

97
00:04:24.003 --> 00:04:27.004
in real systems that you use structured logging

98
00:04:27.004 --> 00:04:31.000
instead of just printing out data to the console

99
00:04:31.000 --> 00:04:31.009
you're going to want to go ahead

100
00:04:31.009 --> 00:04:34.006
and create some form of structured logging.

101
00:04:34.006 --> 00:04:37.009
It will make it easier to troubleshoot live

102
00:04:37.009 --> 00:04:40.000
production systems.

