WEBVTT
1
00:00:00.002 --> 00:00:05.006
(bright music)

2
00:00:05.006 --> 00:00:06.005
- [Instructor] And now it's time for me

3
00:00:06.005 --> 00:00:10.003
to show you my solution to this challenge exercise.

4
00:00:10.003 --> 00:00:13.005
Now I'm going to walk you through the actual uploading steps

5
00:00:13.005 --> 00:00:17.000
that I took when I actually tested this program

6
00:00:17.000 --> 00:00:20.001
so that you can match it to what you did.

7
00:00:20.001 --> 00:00:21.006
So you'll see at this point,

8
00:00:21.006 --> 00:00:24.008
I have deleted the Python module that I created

9
00:00:24.008 --> 00:00:27.008
and I just have that original demo version.

10
00:00:27.008 --> 00:00:28.007
And that's on purpose,

11
00:00:28.007 --> 00:00:30.005
again, I want to show you what goes on

12
00:00:30.005 --> 00:00:34.000
and you cannot actually create a module again

13
00:00:34.000 --> 00:00:35.008
that's already been created.

14
00:00:35.008 --> 00:00:39.007
Okay, so here's how I implemented my Python function.

15
00:00:39.007 --> 00:00:41.005
I imported json and random.

16
00:00:41.005 --> 00:00:44.005
I created the actual handler.

17
00:00:44.005 --> 00:00:47.003
I set the count equal to the event count.

18
00:00:47.003 --> 00:00:50.002
I said, heads = 0 and then tails = 0.

19
00:00:50.002 --> 00:00:52.000
And then I went through a range function

20
00:00:52.000 --> 00:00:54.008
just another for loop within Python.

21
00:00:54.008 --> 00:00:59.003
And I created a random integer with 0,1 as my seed values.

22
00:00:59.003 --> 00:01:00.007
And then I flipped.

23
00:01:00.007 --> 00:01:04.008
So if I flipped it and got a 0, I considered that heads.

24
00:01:04.008 --> 00:01:06.002
I went ahead and printed that out.

25
00:01:06.002 --> 00:01:08.006
I incremented my heads count at that point.

26
00:01:08.006 --> 00:01:11.006
If I got 1, I consider that tails,

27
00:01:11.006 --> 00:01:13.008
incremented the tails count after printing it out.

28
00:01:13.008 --> 00:01:18.001
And then at the end, I set a dictionary equal to my results

29
00:01:18.001 --> 00:01:20.005
which had count, which was the original count,

30
00:01:20.005 --> 00:01:21.008
heads and tails,

31
00:01:21.008 --> 00:01:25.005
and then I output that as a return statement.

32
00:01:25.005 --> 00:01:27.000
So let's jump into the console here,

33
00:01:27.000 --> 00:01:29.003
so I can show you how to upload this

34
00:01:29.003 --> 00:01:32.002
and then test this through the CLI.

35
00:01:32.002 --> 00:01:33.000
So the first thing

36
00:01:33.000 --> 00:01:37.008
that I'm going to do is I'm going to create a zip called chal.zip,

37
00:01:37.008 --> 00:01:39.004
and I'm going to put into it,

38
00:01:39.004 --> 00:01:42.009
my Python challenge actual file.

39
00:01:42.009 --> 00:01:44.007
So now that my zip is created,

40
00:01:44.007 --> 00:01:47.009
and this is all predicated on two key aspects.

41
00:01:47.009 --> 00:01:51.001
First of all, that my AWS Config is set.

42
00:01:51.001 --> 00:01:55.007
And second, that I have created a role in my account,

43
00:01:55.007 --> 00:01:58.009
according to the instructions from AWS.

44
00:01:58.009 --> 00:01:59.007
All right.

45
00:01:59.007 --> 00:02:02.006
So now I'm going to do an AWS command using the CLI,

46
00:02:02.006 --> 00:02:12.009
lambda create-function --function-name cointoss --zip-file

47
00:02:12.009 --> 00:02:20.004
will be fileb://chal.zip, its what I named my zip file.

48
00:02:20.004 --> 00:02:28.005
Now the handler is going to be python_chal.lambda_handler.

49
00:02:28.005 --> 00:02:31.003
And this comes from the name on my file,

50
00:02:31.003 --> 00:02:36.004
and then the lambda_handler itself.

51
00:02:36.004 --> 00:02:40.009
Now I'm going to set my runtime to python3.8

52
00:02:40.009 --> 00:02:44.007
and the role is going to be the role that I created.

53
00:02:44.007 --> 00:02:46.009
Now, that role that I created is based on

54
00:02:46.009 --> 00:02:50.004
that example documentation that I gave you.

55
00:02:50.004 --> 00:02:52.006
So I need to put in the ARN for that role.

56
00:02:52.006 --> 00:02:55.005
Now there's a couple of ways you can get this ARN.

57
00:02:55.005 --> 00:03:02.000
One is to jump into the console and go IAM,

58
00:03:02.000 --> 00:03:07.003
go to Roles, select the Role

59
00:03:07.003 --> 00:03:11.003
and you can copy the Role ARN here.

60
00:03:11.003 --> 00:03:13.002
Or, it follows a pattern

61
00:03:13.002 --> 00:03:16.006
and that pattern embeds your account number.

62
00:03:16.006 --> 00:03:21.007
So now that I've captured that, let's paste that here

63
00:03:21.007 --> 00:03:23.004
and I need to pass a profile

64
00:03:23.004 --> 00:03:26.002
because I actually run multiple AWS accounts

65
00:03:26.002 --> 00:03:27.003
off this machine,

66
00:03:27.003 --> 00:03:33.002
and I have a profile set up specifically for this course.

67
00:03:33.002 --> 00:03:34.003
And now we get the output,

68
00:03:34.003 --> 00:03:37.007
and this output tells us all about the ARN of our function

69
00:03:37.007 --> 00:03:40.002
and some details about it.

70
00:03:40.002 --> 00:03:42.005
Now, one of the cool things about the AWS CLI is

71
00:03:42.005 --> 00:03:45.003
we actually can test this right here.

72
00:03:45.003 --> 00:03:47.001
So let's go ahead and do that,

73
00:03:47.001 --> 00:03:53.001
aws lambda invoke, and again,

74
00:03:53.001 --> 00:03:56.000
I'm going to set my profile equal to LinkedIn Learning

75
00:03:56.000 --> 00:03:59.001
or lil is how I've called it.

76
00:03:59.001 --> 00:04:00.009
Pass it the function name,

77
00:04:00.009 --> 00:04:04.000
which in this case is cointoss,

78
00:04:04.000 --> 00:04:08.005
and now let's send it a payload.

79
00:04:08.005 --> 00:04:12.002
We'll do a single tick, curly brace, double quote,

80
00:04:12.002 --> 00:04:19.001
count, 10, curly brace, single tick.

81
00:04:19.001 --> 00:04:21.007
Now I'm using the version two of the CLI.

82
00:04:21.007 --> 00:04:35.005
So I need to pass in cli-binary-format raw-in-base64-out.

83
00:04:35.005 --> 00:04:39.009
If you're not using CLI two, you don't need to do that.

84
00:04:39.009 --> 00:04:44.000
And I'm going to pass it a file to put my output into.

85
00:04:44.000 --> 00:04:46.008
So you see, I got a StatusCode of 200

86
00:04:46.008 --> 00:04:50.003
and if I cat that file out,

87
00:04:50.003 --> 00:04:52.007
you'll see that I get the json body itself.

88
00:04:52.007 --> 00:04:54.006
And in this case I flipped it 10 times

89
00:04:54.006 --> 00:04:57.005
and I got exactly 5 heads and 5 tails.

90
00:04:57.005 --> 00:05:02.001
If I run that same element again,

91
00:05:02.001 --> 00:05:03.008
and then look at the output,

92
00:05:03.008 --> 00:05:06.009
this time I got 6 heads and 4 tails.

93
00:05:06.009 --> 00:05:08.007
Now the final thing I want to show you is

94
00:05:08.007 --> 00:05:14.008
back into the console, let's go back to Lambda.

95
00:05:14.008 --> 00:05:19.002
There's my function defined.

96
00:05:19.002 --> 00:05:21.007
You'll see that it's deployed.

97
00:05:21.007 --> 00:05:25.003
I can pull the code up in here because it's Python.

98
00:05:25.003 --> 00:05:26.006
It doesn't work for every language,

99
00:05:26.006 --> 00:05:28.000
but Python as we've seen,

100
00:05:28.000 --> 00:05:31.009
does have the ability to use the code editor in Line.

101
00:05:31.009 --> 00:05:34.008
And I can test it right here.

102
00:05:34.008 --> 00:05:38.008
Much the same way that I did from the console.

103
00:05:38.008 --> 00:05:40.005
So again, it's really your choice

104
00:05:40.005 --> 00:05:42.004
on how to test these things.

105
00:05:42.004 --> 00:05:45.004
I find that I work better in the console.

106
00:05:45.004 --> 00:05:49.005
So I use that functionality more often than not,

107
00:05:49.005 --> 00:05:51.009
but again, your mileage may vary,

108
00:05:51.009 --> 00:05:55.009
use what makes sense to you.

109
00:05:55.009 --> 00:05:59.007
Go ahead and create a body and now test it.

110
00:05:59.007 --> 00:06:02.008
And this time I got 7 heads and 8 tails.

111
00:06:02.008 --> 00:06:06.001
So relatively simple program, but it does give you a feel

112
00:06:06.001 --> 00:06:07.008
for the way you would do this

113
00:06:07.008 --> 00:06:09.008
in a little bit more professional manner

114
00:06:09.008 --> 00:06:12.009
by creating the code on your machine itself,

115
00:06:12.009 --> 00:06:17.004
uploading it to AWS and then executing it there.

116
00:06:17.004 --> 00:06:20.001
Now in the real world, I don't use zip files for this.

117
00:06:20.001 --> 00:06:24.000
I actually build container images, store them in ECR

118
00:06:24.000 --> 00:06:25.007
and then pull them out of there,

119
00:06:25.007 --> 00:06:27.008
but that's outside the scope of this course.

120
00:06:27.008 --> 00:06:28.008
What's really important here is

121
00:06:28.008 --> 00:06:33.000
that we can package it in zip, upload it and move forward.

