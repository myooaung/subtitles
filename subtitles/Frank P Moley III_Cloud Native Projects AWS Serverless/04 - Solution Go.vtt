WEBVTT
1
00:00:00.000 --> 00:00:05.006
(upbeat music)

2
00:00:05.006 --> 00:00:06.005
- [Frank] And now it's time for me

3
00:00:06.005 --> 00:00:09.000
to show you my solution to this challenge,

4
00:00:09.000 --> 00:00:13.002
using Go as a language for Lambda function.

5
00:00:13.002 --> 00:00:17.001
Okay, so I created a very simple main Go file.

6
00:00:17.001 --> 00:00:18.006
You'll notice here, on line nine,

7
00:00:18.006 --> 00:00:22.008
I created a constant for "fizz" and "buzz", the text.

8
00:00:22.008 --> 00:00:26.002
I then created a Request struct to the Count int.

9
00:00:26.002 --> 00:00:29.006
I then created a Response struct to pass out the FizzCount,

10
00:00:29.006 --> 00:00:35.004
the BuzzCount the FizzBuzzCount and the total Count.

11
00:00:35.004 --> 00:00:38.004
I then created a Handler, starting here on 25.

12
00:00:38.004 --> 00:00:40.001
Now you'll look here, and notice

13
00:00:40.001 --> 00:00:42.006
that I'm keeping all of these counts internally.

14
00:00:42.006 --> 00:00:44.001
There's a couple of better ways to do this,

15
00:00:44.001 --> 00:00:46.004
but I wanted to be very descriptive, here,

16
00:00:46.004 --> 00:00:47.007
to make it easier.

17
00:00:47.007 --> 00:00:49.009
This is not the most efficient way to write Go,

18
00:00:49.009 --> 00:00:52.001
but, again, it works just fine.

19
00:00:52.001 --> 00:00:53.009
So I iterate over my list,

20
00:00:53.009 --> 00:00:59.000
so from I equals one, until I equals the total Count,

21
00:00:59.000 --> 00:01:00.009
so less than or equal to the total Count,

22
00:01:00.009 --> 00:01:03.002
incrementing every time.

23
00:01:03.002 --> 00:01:06.008
If the mod of three, or the mod of five equals zero,

24
00:01:06.008 --> 00:01:10.003
I print FizzBuzz and then I update that Count

25
00:01:10.003 --> 00:01:11.005
to be one greater.

26
00:01:11.005 --> 00:01:14.003
I do the same for three, and then five.

27
00:01:14.003 --> 00:01:17.007
And if it's none of those, I print out the number.

28
00:01:17.007 --> 00:01:20.002
Now notice here, I'm doing format print line,

29
00:01:20.002 --> 00:01:22.002
as opposed to log, because I want to just show you

30
00:01:22.002 --> 00:01:24.007
that it's, basically, the same thing

31
00:01:24.007 --> 00:01:26.007
when it comes to output, because everything

32
00:01:26.007 --> 00:01:28.004
goes to stdout just like it would

33
00:01:28.004 --> 00:01:31.008
in a containerized workflow.

34
00:01:31.008 --> 00:01:34.007
I then return the actual total Count,

35
00:01:34.007 --> 00:01:36.001
and, finally, here, on line 52

36
00:01:36.001 --> 00:01:38.006
I have my main function that looks the same

37
00:01:38.006 --> 00:01:44.001
for almost every single AWS Lambda written in Go.

38
00:01:44.001 --> 00:01:46.006
So I executed my code,

39
00:01:46.006 --> 00:01:50.009
and I'm just going to pop it up again.

40
00:01:50.009 --> 00:01:52.003
I'm going to do it a thousand times.

41
00:01:52.003 --> 00:01:58.004
There's 267 fizzes, 134 buzzes and 66 fizz-buzzes

42
00:01:58.004 --> 00:02:00.004
over a thousand.

43
00:02:00.004 --> 00:02:03.002
So let's go take a look at CloudWatch now.

44
00:02:03.002 --> 00:02:06.001
So in CloudWatch, each of my Lambdas gets its output.

45
00:02:06.001 --> 00:02:09.005
Let's take a look at FizzBuzz,

46
00:02:09.005 --> 00:02:12.006
and we have a single log stream

47
00:02:12.006 --> 00:02:14.009
and you'll see that I've actually printed out the text,

48
00:02:14.009 --> 00:02:16.006
which is what we would expect.

49
00:02:16.006 --> 00:02:20.009
So 100, which is the last one, was buzz.

50
00:02:20.009 --> 00:02:25.005
99 was fizz, 998, 997 and the list goes on.

51
00:02:25.005 --> 00:02:28.004
We can obviously scroll through all of the logs

52
00:02:28.004 --> 00:02:30.008
until we got to the very beginning,

53
00:02:30.008 --> 00:02:34.000
but we would be here for quite a while looking at those.

54
00:02:34.000 --> 00:02:38.004
Now these examples may seem very simple on paper,

55
00:02:38.004 --> 00:02:40.003
and indeed they are,

56
00:02:40.003 --> 00:02:44.008
but the reality is that Lambda is not a very hard concept.

57
00:02:44.008 --> 00:02:48.006
It's designed to be simple, simple execution

58
00:02:48.006 --> 00:02:52.007
of simple code that is required to get work done,

59
00:02:52.007 --> 00:02:55.000
often triggered by events.

60
00:02:55.000 --> 00:02:58.000
We've synthesized those events by simply testing this

61
00:02:58.000 --> 00:03:00.008
with JSON payloads, but, of course,

62
00:03:00.008 --> 00:03:07.002
that can expand to any AWS property that supports triggers.

63
00:03:07.002 --> 00:03:10.001
I would love for you to take a look at digging in deeper

64
00:03:10.001 --> 00:03:13.006
into AWS Lambda, to see the real power of it,

65
00:03:13.006 --> 00:03:17.000
is a technology that I use every single day

66
00:03:17.000 --> 00:03:19.002
to run massively large systems

67
00:03:19.002 --> 00:03:21.005
that are distributed globally.

68
00:03:21.005 --> 00:03:25.000
There are some things that just don't work in Kubernetes,

69
00:03:25.000 --> 00:03:28.006
in easy fashion, but do work very effectively

70
00:03:28.006 --> 00:03:33.000
as Lambda functions.

