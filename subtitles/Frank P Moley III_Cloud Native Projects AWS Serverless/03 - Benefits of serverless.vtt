WEBVTT
1
00:00:00.000 --> 00:00:02.003
- [Instructor] We have now seen how serverless works

2
00:00:02.003 --> 00:00:03.008
at a very high level,

3
00:00:03.008 --> 00:00:08.005
so let's take a look at why one would want to do this.

4
00:00:08.005 --> 00:00:11.007
First and foremost is cost savings.

5
00:00:11.007 --> 00:00:15.004
With serverless, you get the ability to scale

6
00:00:15.004 --> 00:00:17.001
based on your need.

7
00:00:17.001 --> 00:00:20.005
But instead of scaling for your highest demand,

8
00:00:20.005 --> 00:00:22.009
you're scaling by the operation,

9
00:00:22.009 --> 00:00:26.003
and you're paying for just the operation,

10
00:00:26.003 --> 00:00:29.001
and by doing so, you are not paying

11
00:00:29.001 --> 00:00:31.004
for your peak usage throughout the year,

12
00:00:31.004 --> 00:00:33.006
as I previously stated.

13
00:00:33.006 --> 00:00:36.005
You also get benefits from reduced maintenance.

14
00:00:36.005 --> 00:00:39.008
So even though a VM may be in the cloud,

15
00:00:39.008 --> 00:00:42.005
you still have maintenance that you have to do on it.

16
00:00:42.005 --> 00:00:44.002
You've got to upgrade your VM,

17
00:00:44.002 --> 00:00:46.002
you've got to patch components.

18
00:00:46.002 --> 00:00:49.000
And with serverless, you simply deploy your code;

19
00:00:49.000 --> 00:00:51.009
you don't do any of those maintenance activities

20
00:00:51.009 --> 00:00:54.008
on your VM itself.

21
00:00:54.008 --> 00:01:00.005
Now, separation is another key benefit of using serverless.

22
00:01:00.005 --> 00:01:05.004
There is no longer a need to cram disjointed operations

23
00:01:05.004 --> 00:01:09.008
into a single VM in order to maximize its value.

24
00:01:09.008 --> 00:01:13.006
You get some security and permissions benefits as well,

25
00:01:13.006 --> 00:01:16.002
because usually with serverless,

26
00:01:16.002 --> 00:01:20.000
these functions are operating in their own little sandbox,

27
00:01:20.000 --> 00:01:22.005
and that sandbox has its own security

28
00:01:22.005 --> 00:01:25.002
and its own permissions associated with it,

29
00:01:25.002 --> 00:01:28.001
and you're not crossing threads with other functions

30
00:01:28.001 --> 00:01:31.001
that may be operating in the same VM pool.

31
00:01:31.001 --> 00:01:33.001
Again, something that you don't get

32
00:01:33.001 --> 00:01:36.002
when you're trying to cram multiple operations

33
00:01:36.002 --> 00:01:39.004
into a single VM pool itself.

34
00:01:39.004 --> 00:01:42.000
Another benefit of this separation is

35
00:01:42.000 --> 00:01:45.004
it solves many of the async patterns that we have

36
00:01:45.004 --> 00:01:48.002
by reducing the waste associated with it.

37
00:01:48.002 --> 00:01:50.002
Let me give you an example.

38
00:01:50.002 --> 00:01:52.009
Traditionally, when we write a messaged listener,

39
00:01:52.009 --> 00:01:55.001
we run that on a server

40
00:01:55.001 --> 00:01:59.001
that is actively pulling against the messaging system

41
00:01:59.001 --> 00:02:02.001
to determine if there is a message to act on,

42
00:02:02.001 --> 00:02:04.006
and in doing so, it's using resources,

43
00:02:04.006 --> 00:02:07.002
but there's a lot of waste associated with that.

44
00:02:07.002 --> 00:02:11.006
With serverless, we actually trigger the serverless function

45
00:02:11.006 --> 00:02:14.002
based on the presence of a message.

46
00:02:14.002 --> 00:02:16.008
And this, again, reduces our waste

47
00:02:16.008 --> 00:02:20.000
but allows us a just-in-time operation

48
00:02:20.000 --> 00:02:21.006
that reduces overall costs

49
00:02:21.006 --> 00:02:25.005
since we're only paying for the operation itself.

50
00:02:25.005 --> 00:02:27.008
Now, let's talk a little bit more

51
00:02:27.008 --> 00:02:29.007
about asynchronous operations,

52
00:02:29.007 --> 00:02:33.002
because most if not all serverless functions

53
00:02:33.002 --> 00:02:38.001
tend to end up being some form of an asynchronous process.

54
00:02:38.001 --> 00:02:40.002
Even if it's running on a website,

55
00:02:40.002 --> 00:02:44.001
a lot of times we will front that with some sort of CDN

56
00:02:44.001 --> 00:02:47.001
that actually makes the operation itself async.

57
00:02:47.001 --> 00:02:48.007
Now, not always,

58
00:02:48.007 --> 00:02:51.005
but asynced is a very strong pattern,

59
00:02:51.005 --> 00:02:53.001
and it's worth talking about.

60
00:02:53.001 --> 00:02:55.007
The serverless functions can be a key player

61
00:02:55.007 --> 00:02:57.008
in asynchronous operations,

62
00:02:57.008 --> 00:03:02.001
especially as you move into a public cloud ecosystem.

63
00:03:02.001 --> 00:03:05.004
Again, it reduces the waste of waiting.

64
00:03:05.004 --> 00:03:09.002
That waiting operation is nothing but a wasteful event

65
00:03:09.002 --> 00:03:12.006
when you're dealing with operations of scale

66
00:03:12.006 --> 00:03:15.002
on a VM consumption model.

67
00:03:15.002 --> 00:03:18.008
It's also much easier to isolate and respond

68
00:03:18.008 --> 00:03:21.008
in a serverless function type behavior,

69
00:03:21.008 --> 00:03:25.002
because each listener will respond

70
00:03:25.002 --> 00:03:27.003
based on a function itself

71
00:03:27.003 --> 00:03:29.001
as opposed to a listener pool

72
00:03:29.001 --> 00:03:31.008
that responds to many different cues.

73
00:03:31.008 --> 00:03:34.002
It also offers a lot of flexibility

74
00:03:34.002 --> 00:03:37.004
in that you can scale multiple operations

75
00:03:37.004 --> 00:03:39.002
within a serverless function

76
00:03:39.002 --> 00:03:40.007
by chaining them together

77
00:03:40.007 --> 00:03:44.006
instead of tying them all to individual listeners.

78
00:03:44.006 --> 00:03:47.000
A lot of times, we would do things in async

79
00:03:47.000 --> 00:03:49.008
where the first listener would do some operation

80
00:03:49.008 --> 00:03:51.000
and put a message back on a queue

81
00:03:51.000 --> 00:03:53.003
so that another listener could pick it up.

82
00:03:53.003 --> 00:03:55.002
Well, with serverless functions,

83
00:03:55.002 --> 00:03:57.006
we can simply trigger the next in the chain

84
00:03:57.006 --> 00:03:59.009
without the intermediate queue

85
00:03:59.009 --> 00:04:03.000
that was really a fancy way of doing piping

86
00:04:03.000 --> 00:04:05.009
across a large-scale operation.

87
00:04:05.009 --> 00:04:08.005
Now, let's talk about some of the "-ilities"

88
00:04:08.005 --> 00:04:12.004
that we get to solve with serverless functions.

89
00:04:12.004 --> 00:04:14.002
The first is scalability.

90
00:04:14.002 --> 00:04:16.005
Because we're dealing with an individual function

91
00:04:16.005 --> 00:04:19.009
and we're paying for the operation of that function,

92
00:04:19.009 --> 00:04:21.003
we can have as many of them running

93
00:04:21.003 --> 00:04:24.003
at any given point in time that we need to,

94
00:04:24.003 --> 00:04:27.008
and each of them is usually within the cloud provider

95
00:04:27.008 --> 00:04:31.004
isolated into its own runtime and own sandbox,

96
00:04:31.004 --> 00:04:35.005
even if it's the same function running 10, 20, 30 times

97
00:04:35.005 --> 00:04:37.005
in a given period of time.

98
00:04:37.005 --> 00:04:41.003
Serverless functions also give us maintainability.

99
00:04:41.003 --> 00:04:44.005
Because each distinct function only does one task,

100
00:04:44.005 --> 00:04:47.003
we're not deploying a pool of operations

101
00:04:47.003 --> 00:04:49.003
to do many different tasks.

102
00:04:49.003 --> 00:04:52.000
This increases our maintainability,

103
00:04:52.000 --> 00:04:54.007
because when we have to modify an individual function,

104
00:04:54.007 --> 00:04:57.002
we're only impacting that function,

105
00:04:57.002 --> 00:05:00.009
of course reducing the risk associated with regressions

106
00:05:00.009 --> 00:05:03.005
across a pool of operations.

107
00:05:03.005 --> 00:05:06.007
Serverless functions tend to be very easy to deploy,

108
00:05:06.007 --> 00:05:09.007
especially within cloud operations.

109
00:05:09.007 --> 00:05:13.008
Because of their ease in deployability and maintainability,

110
00:05:13.008 --> 00:05:16.006
they give us a speed to market function

111
00:05:16.006 --> 00:05:18.003
that comes along with it.

112
00:05:18.003 --> 00:05:19.007
And that's another ability

113
00:05:19.007 --> 00:05:22.002
that kind of comes behind the scenes

114
00:05:22.002 --> 00:05:25.004
from maintainability and deployability.

115
00:05:25.004 --> 00:05:27.002
And obviously, with serverless functions,

116
00:05:27.002 --> 00:05:29.000
you get a lot of flexibility.

117
00:05:29.000 --> 00:05:32.000
You can do just about anything you could imagine

118
00:05:32.000 --> 00:05:33.005
in a serverless function.

119
00:05:33.005 --> 00:05:35.009
And by only paying for the operation,

120
00:05:35.009 --> 00:05:39.000
you get all of the benefits without a lot of the pain

121
00:05:39.000 --> 00:05:42.007
that is associated with deploying large-scale operations

122
00:05:42.007 --> 00:05:46.000
to handle a multitude of single functions.

