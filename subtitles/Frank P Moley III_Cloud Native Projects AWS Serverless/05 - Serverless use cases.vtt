WEBVTT
1
00:00:00.005 --> 00:00:01.009
- [Instructor] So let's take a look at a couple

2
00:00:01.009 --> 00:00:06.001
of the use cases for serverless technologies.

3
00:00:06.001 --> 00:00:09.009
Autoscaling web apps is definitely a very niche proposal

4
00:00:09.009 --> 00:00:12.005
within serverless for many people,

5
00:00:12.005 --> 00:00:16.003
but it is a use case that can be leveraged.

6
00:00:16.003 --> 00:00:19.004
Autoscaling is the primary benefit of this.

7
00:00:19.004 --> 00:00:22.003
But building a web application that responds

8
00:00:22.003 --> 00:00:24.007
to a traditional HTTP request,

9
00:00:24.007 --> 00:00:28.002
you get autoscaling essentially for free

10
00:00:28.002 --> 00:00:32.003
with the serverless footprint on many cloud providers.

11
00:00:32.003 --> 00:00:35.006
Therefore, as your request volume increases,

12
00:00:35.006 --> 00:00:37.008
serverless can really start to shine

13
00:00:37.008 --> 00:00:40.008
as you don't have to build your app per say,

14
00:00:40.008 --> 00:00:44.005
to be fault tolerant and resilient to this scaling need

15
00:00:44.005 --> 00:00:48.006
because serverless takes care of much of that for you.

16
00:00:48.006 --> 00:00:51.005
Another benefit here is that there's minimal initial setup

17
00:00:51.005 --> 00:00:53.001
to get this scaling.

18
00:00:53.001 --> 00:00:55.001
You simply write your web application

19
00:00:55.001 --> 00:00:57.004
and then as it becomes more and more popular,

20
00:00:57.004 --> 00:01:00.002
serverless will handle the scaling needs

21
00:01:00.002 --> 00:01:02.004
of your application.

22
00:01:02.004 --> 00:01:04.006
Now I do want to point out once again,

23
00:01:04.006 --> 00:01:06.000
that you need to be careful

24
00:01:06.000 --> 00:01:08.006
as the sustained volume increases.

25
00:01:08.006 --> 00:01:11.006
If you find that your application becomes so popular

26
00:01:11.006 --> 00:01:14.006
that it's used constantly throughout the day

27
00:01:14.006 --> 00:01:17.009
at a high volume, you may actually start to get benefits

28
00:01:17.009 --> 00:01:19.009
from moving away from serverless

29
00:01:19.009 --> 00:01:22.009
into a more traditional VM environment.

30
00:01:22.009 --> 00:01:27.003
Now, event streaming is a use case that I most often use

31
00:01:27.003 --> 00:01:30.009
for serverless in a cloud native world.

32
00:01:30.009 --> 00:01:34.000
Much of event streaming is based on asynchronous actions.

33
00:01:34.000 --> 00:01:35.001
And we've already talked about

34
00:01:35.001 --> 00:01:39.006
how serverless can really shine in asynchronous actions.

35
00:01:39.006 --> 00:01:42.006
Events through your streaming model can trigger

36
00:01:42.006 --> 00:01:44.007
these functions to operate

37
00:01:44.007 --> 00:01:47.009
and manipulate data as needed.

38
00:01:47.009 --> 00:01:51.005
As always with serverless is you get built in scalability

39
00:01:51.005 --> 00:01:55.000
because of the way that the framework operates.

40
00:01:55.000 --> 00:01:56.008
Then this can be very useful

41
00:01:56.008 --> 00:02:00.006
in observability processing and transformation of that data.

42
00:02:00.006 --> 00:02:03.006
In fact, a large majority of the use cases

43
00:02:03.006 --> 00:02:06.004
that I've used serverless technologies for,

44
00:02:06.004 --> 00:02:09.000
wrap around the use of observability,

45
00:02:09.000 --> 00:02:12.005
specifically around security patterns

46
00:02:12.005 --> 00:02:15.002
within an application space.

47
00:02:15.002 --> 00:02:17.006
Now, be careful with this use case

48
00:02:17.006 --> 00:02:21.003
as sprawl and dependent triggers starts to increase,

49
00:02:21.003 --> 00:02:26.000
it can make your serverless model that much more complex.

50
00:02:26.000 --> 00:02:28.001
Now file manipulation is another one

51
00:02:28.001 --> 00:02:32.000
of those use cases that just naturally works.

52
00:02:32.000 --> 00:02:36.007
Anytime you upload or manipulate files, videos, or images,

53
00:02:36.007 --> 00:02:40.009
those can be triggers in many cloud providers naturally

54
00:02:40.009 --> 00:02:44.000
for serverless functions.

55
00:02:44.000 --> 00:02:47.003
Many times these occur on save or delete actions,

56
00:02:47.003 --> 00:02:49.000
but they can also occur with moves

57
00:02:49.000 --> 00:02:53.008
because those are just saves and deletes in many patterns.

58
00:02:53.008 --> 00:02:56.008
Again, we're dealing with asynchronous processing.

59
00:02:56.008 --> 00:03:00.009
As we save the file, this trigger occurs after that point,

60
00:03:00.009 --> 00:03:04.007
therefore it becomes an asynchronous action.

61
00:03:04.007 --> 00:03:07.006
You can also use this in many use cases

62
00:03:07.006 --> 00:03:11.000
where you're pushing data to live data stores,

63
00:03:11.000 --> 00:03:12.006
based on some action.

64
00:03:12.006 --> 00:03:15.002
Again, it's giving you this opportunity

65
00:03:15.002 --> 00:03:17.003
to do something after the fact

66
00:03:17.003 --> 00:03:21.008
and push data or manipulate data as you need it.

67
00:03:21.008 --> 00:03:25.004
And once again, be careful here when using this use case,

68
00:03:25.004 --> 00:03:28.002
intense processing needs can start

69
00:03:28.002 --> 00:03:31.003
to overrun the serverless benefits.

70
00:03:31.003 --> 00:03:34.008
And of course there's debugging, which often has to happen

71
00:03:34.008 --> 00:03:38.008
with these large complex tasks that tend to get associated

72
00:03:38.008 --> 00:03:40.001
with file manipulation,

73
00:03:40.001 --> 00:03:43.005
especially around videos and imaging.

74
00:03:43.005 --> 00:03:45.007
Now, another one of the primary use cases

75
00:03:45.007 --> 00:03:49.003
around connectors within a cloud native environment.

76
00:03:49.003 --> 00:03:52.002
Cloud providers often provide connectors

77
00:03:52.002 --> 00:03:55.003
to serverless functions.

78
00:03:55.003 --> 00:03:58.004
These give you remote system operations

79
00:03:58.004 --> 00:04:00.005
not just within your cloud provider,

80
00:04:00.005 --> 00:04:03.000
but truly with SaaS models

81
00:04:03.000 --> 00:04:05.002
where you need to execute some action based

82
00:04:05.002 --> 00:04:08.002
on a remote system trigger.

83
00:04:08.002 --> 00:04:09.009
These third party operations

84
00:04:09.009 --> 00:04:11.009
in addition to leveraging the benefits

85
00:04:11.009 --> 00:04:15.008
of the cloud provider, can give you an asynchronous gate

86
00:04:15.008 --> 00:04:19.006
but one that's air-gapped away from your primary runtime

87
00:04:19.006 --> 00:04:23.005
and serverless tends to fit really well in this model.

88
00:04:23.005 --> 00:04:25.008
These disjointed applications

89
00:04:25.008 --> 00:04:28.007
don't really need live connectivity,

90
00:04:28.007 --> 00:04:30.009
but need a way to communicate with each other

91
00:04:30.009 --> 00:04:33.006
over some sort of a triggered mechanism.

92
00:04:33.006 --> 00:04:35.008
And I said this were triggered a lot

93
00:04:35.008 --> 00:04:38.008
because a lot of times that's how we think

94
00:04:38.008 --> 00:04:40.004
of serverless functions.

95
00:04:40.004 --> 00:04:42.009
Some trigger execute some function,

96
00:04:42.009 --> 00:04:45.002
and it continues down this path.

97
00:04:45.002 --> 00:04:48.002
And we see this a lot with third-party operations

98
00:04:48.002 --> 00:04:50.008
where we're interacting with a SaaS provider

99
00:04:50.008 --> 00:04:53.001
and either they're sending us event

100
00:04:53.001 --> 00:04:54.007
or we're sending them an event.

101
00:04:54.007 --> 00:04:57.009
And at some point these serverless functions tend

102
00:04:57.009 --> 00:04:59.004
to fit the bill.

103
00:04:59.004 --> 00:05:01.003
These SaaS models are all over the place.

104
00:05:01.003 --> 00:05:05.007
Things like Salesforce and things like Stripe and Split

105
00:05:05.007 --> 00:05:09.001
that are very prevalent within the ecosystem,

106
00:05:09.001 --> 00:05:10.009
allow you to subscribe

107
00:05:10.009 --> 00:05:15.001
and also push triggers to their systems.

108
00:05:15.001 --> 00:05:16.007
Now, one thing to be careful in something

109
00:05:16.007 --> 00:05:19.001
that's gotten me in the past is that some

110
00:05:19.001 --> 00:05:22.006
of these third-party products especially in the SaaS space,

111
00:05:22.006 --> 00:05:26.002
can be very noisy and push lots of events

112
00:05:26.002 --> 00:05:28.008
because they tend to err on the side of caution,

113
00:05:28.008 --> 00:05:33.000
send you too much data and you deal with what you want.

114
00:05:33.000 --> 00:05:36.001
In doing so you can actually get a lot of processing

115
00:05:36.001 --> 00:05:38.006
that's really nothing more than waste.

116
00:05:38.006 --> 00:05:41.006
So you do want to be careful on how much you allow them

117
00:05:41.006 --> 00:05:46.000
to impact your costs through these remote connectors.

