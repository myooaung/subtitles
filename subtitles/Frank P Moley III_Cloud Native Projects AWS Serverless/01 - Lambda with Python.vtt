WEBVTT
1
00:00:00.005 --> 00:00:02.005
- [Narrator] So it's time to start our code journey

2
00:00:02.005 --> 00:00:03.006
with Lambda.

3
00:00:03.006 --> 00:00:07.008
And we're going to do that by using the Python language.

4
00:00:07.008 --> 00:00:09.008
What I'd like you to do is to log into

5
00:00:09.008 --> 00:00:13.000
your AWS Management Console

6
00:00:13.000 --> 00:00:17.007
and let's go to Lambda.

7
00:00:17.007 --> 00:00:19.003
once Lambda loads you'll be presented

8
00:00:19.003 --> 00:00:20.008
with one of the dashboards

9
00:00:20.008 --> 00:00:24.006
either the raw functions or the dashboard itself.

10
00:00:24.006 --> 00:00:27.008
Let's take a look real quickly at the dashboard itself.

11
00:00:27.008 --> 00:00:29.003
You'll see that it gives us the listing

12
00:00:29.003 --> 00:00:32.002
of the number of Lambda functions that we're running.

13
00:00:32.002 --> 00:00:35.008
How much concurrency do we have, how much is unreserved.

14
00:00:35.008 --> 00:00:37.005
And you'll see all of our metrics

15
00:00:37.005 --> 00:00:40.001
about our functions themselves.

16
00:00:40.001 --> 00:00:43.009
So let's jump in and we're going to create a new function.

17
00:00:43.009 --> 00:00:46.002
Now we're going to do this from scratch

18
00:00:46.002 --> 00:00:53.006
and we will call this LinkedIn_learning_demo

19
00:00:53.006 --> 00:00:59.007
and we will select Python3.8 as the interpreter.

20
00:00:59.007 --> 00:01:01.005
And for the purposes of this demo

21
00:01:01.005 --> 00:01:04.002
we don't need to worry about any of the permission changes

22
00:01:04.002 --> 00:01:05.006
or any of the advanced settings.

23
00:01:05.006 --> 00:01:08.009
We'll allow it to create default.

24
00:01:08.009 --> 00:01:11.004
So go ahead and click create function.

25
00:01:11.004 --> 00:01:13.009
This may take a little bit of time

26
00:01:13.009 --> 00:01:16.008
but what you're seeing is we're brought into the dashboard

27
00:01:16.008 --> 00:01:20.005
of our existing function that we just created.

28
00:01:20.005 --> 00:01:22.004
Now with the Python language,

29
00:01:22.004 --> 00:01:25.004
you're going to get a code editor in line

30
00:01:25.004 --> 00:01:27.007
with the function itself.

31
00:01:27.007 --> 00:01:29.009
So let's go ahead and jump into the code editor

32
00:01:29.009 --> 00:01:35.001
that is presented as part of the AWS Console.

33
00:01:35.001 --> 00:01:38.006
And we're going to click on our Lambda function.

34
00:01:38.006 --> 00:01:39.004
Now you'll see here

35
00:01:39.004 --> 00:01:42.004
that they've given us the basic skeleton,

36
00:01:42.004 --> 00:01:44.002
all Python Lambda functions

37
00:01:44.002 --> 00:01:46.000
should follow a skeleton similar

38
00:01:46.000 --> 00:01:47.005
to this.

39
00:01:47.005 --> 00:01:50.009
Where we declared our function name, we accepted event,

40
00:01:50.009 --> 00:01:54.001
in any context, we didn't have a to do section

41
00:01:54.001 --> 00:01:56.006
and ultimately we'll return a 200

42
00:01:56.006 --> 00:01:58.003
if everything is successful

43
00:01:58.003 --> 00:02:01.004
and it's not an appropriate status code.

44
00:02:01.004 --> 00:02:05.004
So for this example, let's remove the to do

45
00:02:05.004 --> 00:02:09.009
and we're going to put in some very very simple functions here.

46
00:02:09.009 --> 00:02:12.004
So we're going to do a print

47
00:02:12.004 --> 00:02:17.007
and we're going to print our requests

48
00:02:17.007 --> 00:02:21.000
using Jason.dumps

49
00:02:21.000 --> 00:02:23.005
and the event itself.

50
00:02:23.005 --> 00:02:26.000
Now, what this will do is this will take our request

51
00:02:26.000 --> 00:02:28.009
and actually dump it to the screen.

52
00:02:28.009 --> 00:02:31.004
So let's go ahead and run just a little bit of code here.

53
00:02:31.004 --> 00:02:36.006
So we're going to do, I=zero.

54
00:02:36.006 --> 00:02:37.008
We'll do a while loop.

55
00:02:37.008 --> 00:02:44.001
Where I is less than event and we're going to pull

56
00:02:44.001 --> 00:02:50.009
from that body account.

57
00:02:50.009 --> 00:02:52.002
And once we are in there,

58
00:02:52.002 --> 00:02:59.001
we will simply print the event message.

59
00:02:59.001 --> 00:03:01.005
And then of course, we're going to increment I,

60
00:03:01.005 --> 00:03:04.007
so we'll do I+= one

61
00:03:04.007 --> 00:03:06.009
and we'll give it a carriage return.

62
00:03:06.009 --> 00:03:10.006
And that's all we actually need to do to implement a Lambda.

63
00:03:10.006 --> 00:03:14.007
Now, obviously this is a very, very simplistic example

64
00:03:14.007 --> 00:03:16.006
and that's fine for the purposes of this course,

65
00:03:16.006 --> 00:03:19.007
because what's important here is you've created a Lambda.

66
00:03:19.007 --> 00:03:21.006
We can test this and we're going to do that

67
00:03:21.006 --> 00:03:22.007
in the next video.

68
00:03:22.007 --> 00:03:24.008
We can execute against it.

69
00:03:24.008 --> 00:03:27.005
We can tie a trigger to some other event

70
00:03:27.005 --> 00:03:32.001
in AWS that would allow this Lambda to be executed.

71
00:03:32.001 --> 00:03:35.009
All of the logic is really depending on your business cases

72
00:03:35.009 --> 00:03:38.002
this is all you need to do

73
00:03:38.002 --> 00:03:40.007
outside of implementing your core logic

74
00:03:40.007 --> 00:03:44.003
to get Lambda running using the Python language.

75
00:03:44.003 --> 00:03:46.008
It really is that that's simple.

76
00:03:46.008 --> 00:03:50.000
So stay tuned next one I'll show you how to test this.

