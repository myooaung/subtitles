WEBVTT
1
00:00:00.005 --> 00:00:01.003
- [Instructor] The final language

2
00:00:01.003 --> 00:00:04.007
we're going to talk about in this course is Go

3
00:00:04.007 --> 00:00:08.002
and how it applies to AWS Lambdas.

4
00:00:08.002 --> 00:00:10.001
Now Go is a fantastic language

5
00:00:10.001 --> 00:00:13.000
and it's one that I use almost every day.

6
00:00:13.000 --> 00:00:14.009
While I'm still kind of a Java guy,

7
00:00:14.009 --> 00:00:18.002
Go does have a special place in my heart.

8
00:00:18.002 --> 00:00:20.004
However, when it comes to running Lambdas,

9
00:00:20.004 --> 00:00:23.004
Python is still number one for me.

10
00:00:23.004 --> 00:00:25.003
But that being said,

11
00:00:25.003 --> 00:00:28.005
Go really is a fantastic language for Lambdas

12
00:00:28.005 --> 00:00:30.000
as well as many other things

13
00:00:30.000 --> 00:00:31.008
that you might want to use it for.

14
00:00:31.008 --> 00:00:34.005
So if you're interested in go, this is a great opportunity

15
00:00:34.005 --> 00:00:36.003
for you to really play around with it

16
00:00:36.003 --> 00:00:38.005
and learn what you need to do

17
00:00:38.005 --> 00:00:42.003
to become efficient at writing Lambdas with Go.

18
00:00:42.003 --> 00:00:44.007
So let's start by creating a new project.

19
00:00:44.007 --> 00:00:46.004
Now I'm going to do this with my IDE

20
00:00:46.004 --> 00:00:48.006
which is GoLand from jet brains.

21
00:00:48.006 --> 00:00:50.009
Obviously you do not need to use this IDE,

22
00:00:50.009 --> 00:00:53.005
there are many quality Go IDEs,

23
00:00:53.005 --> 00:00:57.001
many of which are free that you can use,

24
00:00:57.001 --> 00:00:58.006
but in this case, this is what I'm going to use.

25
00:00:58.006 --> 00:01:00.006
So I'm going to create a new project

26
00:01:00.006 --> 00:01:02.004
and I'm going to base it off Gomod.

27
00:01:02.004 --> 00:01:06.000
So Gomod isn't dependency management system for Go

28
00:01:06.000 --> 00:01:09.000
you can do the same thing by doing a Gomod in it

29
00:01:09.000 --> 00:01:10.000
that this is going to do,

30
00:01:10.000 --> 00:01:12.004
it just saves me that extra step

31
00:01:12.004 --> 00:01:15.007
but I'm going to allow Gomod to handle all of my dependencies

32
00:01:15.007 --> 00:01:18.009
specifically around Lambda.

33
00:01:18.009 --> 00:01:20.000
So let's jump in here

34
00:01:20.000 --> 00:01:22.001
and let's find the appropriate place to put this.

35
00:01:22.001 --> 00:01:27.007
So we're going to put this in serverlessaws,

36
00:01:27.007 --> 00:01:29.008
we'll create a new folder

37
00:01:29.008 --> 00:01:31.003
and this is just how I manage it,

38
00:01:31.003 --> 00:01:35.006
this is just where I have my exercise files.

39
00:01:35.006 --> 00:01:38.009
Put a Go functions out there

40
00:01:38.009 --> 00:01:47.001
and we're going to call this one Go demo.

41
00:01:47.001 --> 00:01:50.005
So you see when it creates it, we get a go.mod folder

42
00:01:50.005 --> 00:01:53.001
and we're going to use that go.mod

43
00:01:53.001 --> 00:01:55.001
to manage our dependencies, as I said.

44
00:01:55.001 --> 00:01:57.001
But we've got to load them in first.

45
00:01:57.001 --> 00:02:00.000
So I'm going to pop up in a terminal window here

46
00:02:00.000 --> 00:02:02.005
and I'm going to type a, go get command.

47
00:02:02.005 --> 00:02:12.006
And I want to go get github.com/aws/aws-lambda-go/lambda.

48
00:02:12.006 --> 00:02:16.001
So I specifically want the Lambda package.

49
00:02:16.001 --> 00:02:18.008
So we'll allow, go to go grab that,

50
00:02:18.008 --> 00:02:22.003
got it on my machine, so I'm good to go.

51
00:02:22.003 --> 00:02:23.008
Now, the first thing we need to do

52
00:02:23.008 --> 00:02:25.002
is we need to create a Go file

53
00:02:25.002 --> 00:02:27.007
and we're just going to call this one, main.

54
00:02:27.007 --> 00:02:29.000
So I've got a main file.

55
00:02:29.000 --> 00:02:33.005
I need to rename the package to main.

56
00:02:33.005 --> 00:02:35.005
Now there's a few things that we're going to add here

57
00:02:35.005 --> 00:02:36.005
into our package.

58
00:02:36.005 --> 00:02:39.003
So the first thing I want to do is I want to create a struct

59
00:02:39.003 --> 00:02:41.002
and it is going to be for my requests.

60
00:02:41.002 --> 00:02:44.006
So we'll create a Request struct

61
00:02:44.006 --> 00:02:50.005
in this request will have two elements, a count integer

62
00:02:50.005 --> 00:02:54.007
and we'll go ahead and specify the json for it.

63
00:02:54.007 --> 00:03:03.006
And the other element is going to be a Message.

64
00:03:03.006 --> 00:03:08.006
Now, the next one we are going to do is a Response.

65
00:03:08.006 --> 00:03:15.002
Once again, a struct and we will simply do a Status string

66
00:03:15.002 --> 00:03:19.007
and we will give it a json moniker.

67
00:03:19.007 --> 00:03:22.002
Now we're going to create our handler function itself.

68
00:03:22.002 --> 00:03:27.005
So a new function we'll simply call us HandleRequest,

69
00:03:27.005 --> 00:03:32.000
we're going to pass it in context

70
00:03:32.000 --> 00:03:37.005
and we will also pass in our request element

71
00:03:37.005 --> 00:03:43.008
and we will respond was our Response struct and error.

72
00:03:43.008 --> 00:03:45.003
Now the structured format

73
00:03:45.003 --> 00:03:48.001
to what this request has to look like,

74
00:03:48.001 --> 00:03:50.001
this handler has very specific rules

75
00:03:50.001 --> 00:03:54.002
and they're very well documented on the AWS website.

76
00:03:54.002 --> 00:03:57.009
So if you ever have to deal with specific request response

77
00:03:57.009 --> 00:03:59.008
whether you need to use context,

78
00:03:59.008 --> 00:04:02.009
I highly encourage you to go read that documentation.

79
00:04:02.009 --> 00:04:05.003
This is how I work in Go everyday.

80
00:04:05.003 --> 00:04:07.006
Context is invaluable for me

81
00:04:07.006 --> 00:04:09.005
especially when it comes to log in.

82
00:04:09.005 --> 00:04:12.000
So by default, I'm going to bring context in

83
00:04:12.000 --> 00:04:14.005
but the reality is for what we're doing,

84
00:04:14.005 --> 00:04:16.007
we could have simply just passed and request

85
00:04:16.007 --> 00:04:18.009
and responded with the response element.

86
00:04:18.009 --> 00:04:22.003
Nothing we're doing is really that painful.

87
00:04:22.003 --> 00:04:26.001
Now that that's done, let's do a log,

88
00:04:26.001 --> 00:04:29.007
we're going to simply do a Printf

89
00:04:29.007 --> 00:04:39.007
and we will do this, we'll say value of request that Count.

90
00:04:39.007 --> 00:04:41.002
So that's going to be a simple log message

91
00:04:41.002 --> 00:04:44.006
that will get executed when this Lambda runs.

92
00:04:44.006 --> 00:04:46.007
We've seen it before, nothing crazy.

93
00:04:46.007 --> 00:04:59.005
Let's do our for loop, for i:=0;i<request.Count;i++

94
00:04:59.005 --> 00:05:04.004
brace it out and we will do it log.Print.

95
00:05:04.004 --> 00:05:06.003
We're simply going to do our Message

96
00:05:06.003 --> 00:05:09.009
that comes from our payrod.

97
00:05:09.009 --> 00:05:11.002
And for you simplicity sake,

98
00:05:11.002 --> 00:05:18.006
we will return a response that has a Status of 200 OK,

99
00:05:18.006 --> 00:05:20.008
all done.

100
00:05:20.008 --> 00:05:25.005
And we need to finish that with a nil for the error.

101
00:05:25.005 --> 00:05:27.006
Now it's time for our main function.

102
00:05:27.006 --> 00:05:29.008
So Go always operates on a main function

103
00:05:29.008 --> 00:05:31.007
just like many other languages.

104
00:05:31.007 --> 00:05:37.000
But for this, we are going to do a Lambda that start

105
00:05:37.000 --> 00:05:39.009
and we're going to asset the Handler function

106
00:05:39.009 --> 00:05:43.006
that we just created.

107
00:05:43.006 --> 00:05:45.001
And that's all there is.

108
00:05:45.001 --> 00:05:47.007
That is the simplicity of Go.

109
00:05:47.007 --> 00:05:50.007
This is everything we need to do, very similar to Python

110
00:05:50.007 --> 00:05:53.002
in order to execute our program.

111
00:05:53.002 --> 00:05:56.006
So in the next video, we'll compile this, zip it up,

112
00:05:56.006 --> 00:06:00.000
set it up to AWS and execute.

