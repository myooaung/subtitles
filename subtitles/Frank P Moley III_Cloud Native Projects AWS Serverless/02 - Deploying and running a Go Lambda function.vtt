WEBVTT
1
00:00:00.003 --> 00:00:01.005
- [Narrator] So now that we've written

2
00:00:01.005 --> 00:00:04.003
our simple Lambda function using Go,

3
00:00:04.003 --> 00:00:06.004
it's time to compile it, package it,

4
00:00:06.004 --> 00:00:08.009
deploy it, and run it.

5
00:00:08.009 --> 00:00:10.000
We're also going to take a look

6
00:00:10.000 --> 00:00:13.005
at how CloudWatch manifests the logs

7
00:00:13.005 --> 00:00:16.005
that we have created throughout this course.

8
00:00:16.005 --> 00:00:18.008
So, after we get done doing all the work,

9
00:00:18.008 --> 00:00:20.003
we're going to jump back into the console

10
00:00:20.003 --> 00:00:22.001
and just take a look at a CloudWatch,

11
00:00:22.001 --> 00:00:22.009
so you can get a picture

12
00:00:22.009 --> 00:00:25.009
of why we've been doing all of this logging.

13
00:00:25.009 --> 00:00:28.007
All right, I want you to jump into your command line.

14
00:00:28.007 --> 00:00:32.004
Now, these commands that I am going to deal with, especially

15
00:00:32.004 --> 00:00:35.007
around compilation, are very specific

16
00:00:35.007 --> 00:00:37.007
to my operating system.

17
00:00:37.007 --> 00:00:40.005
Go is a language that targets operating systems

18
00:00:40.005 --> 00:00:43.006
specifically as native files.

19
00:00:43.006 --> 00:00:44.004
That being said,

20
00:00:44.004 --> 00:00:47.007
if you are not on a Mac or a Linux machine,

21
00:00:47.007 --> 00:00:50.003
you are going to have slightly different Go commands

22
00:00:50.003 --> 00:00:53.002
in order to target a Linux deployment.

23
00:00:53.002 --> 00:00:56.007
AWS has some very good documentation around this

24
00:00:56.007 --> 00:00:59.009
in their building and deploying Go section.

25
00:00:59.009 --> 00:01:01.004
So let's get going.

26
00:01:01.004 --> 00:01:03.007
So the first thing I need to do,

27
00:01:03.007 --> 00:01:06.001
is send a few commands

28
00:01:06.001 --> 00:01:08.003
to the compiler to let it know that

29
00:01:08.003 --> 00:01:16.004
I'm targeting Linux and I am on a Linux-based system.

30
00:01:16.004 --> 00:01:19.000
Now I'm going to call Go build,

31
00:01:19.000 --> 00:01:23.000
and I'm going to build main.go.

32
00:01:23.000 --> 00:01:26.006
Now, if I do an LS on my directory

33
00:01:26.006 --> 00:01:28.006
you will see that I have a main.go file.

34
00:01:28.006 --> 00:01:32.009
But now I have an executable called main.

35
00:01:32.009 --> 00:01:34.009
You also noticed the size of it.

36
00:01:34.009 --> 00:01:37.003
The Lambert package is pretty big,

37
00:01:37.003 --> 00:01:40.009
and that adds to the complexity of running Go,

38
00:01:40.009 --> 00:01:43.005
because you'll see that we can't edit these files

39
00:01:43.005 --> 00:01:45.002
because of their size.

40
00:01:45.002 --> 00:01:47.004
Now I've never been able to get a Go program

41
00:01:47.004 --> 00:01:49.009
small enough with the Lambda packages

42
00:01:49.009 --> 00:01:52.001
to be able to show it in the console.

43
00:01:52.001 --> 00:01:54.008
But my assumption is, is that it works

44
00:01:54.008 --> 00:01:56.002
based on the messaging.

45
00:01:56.002 --> 00:01:57.006
I don't know that for sure.

46
00:01:57.006 --> 00:02:01.003
If you ever get a Go program small enough to work in Lambda,

47
00:02:01.003 --> 00:02:02.004
you might be able to try it.

48
00:02:02.004 --> 00:02:06.003
But I have yet to do it even with bringing nothing else in.

49
00:02:06.003 --> 00:02:08.004
So let's go ahead and go back through these commands

50
00:02:08.004 --> 00:02:09.004
that we've seen a few times.

51
00:02:09.004 --> 00:02:10.009
We're going to zip this thing up.

52
00:02:10.009 --> 00:02:14.001
We'll create a function.zip file.

53
00:02:14.001 --> 00:02:17.008
And we're just going to send that binary to it.

54
00:02:17.008 --> 00:02:26.009
Now we're going to do an AWS Lambda create function.

55
00:02:26.009 --> 00:02:32.002
Function name will be go demo.

56
00:02:32.002 --> 00:02:41.000
The zip file, file B:\\function.zip,

57
00:02:41.000 --> 00:02:43.005
the handler will be main.

58
00:02:43.005 --> 00:02:45.005
And this is really important to get your handler name

59
00:02:45.005 --> 00:02:47.009
right, and in this case its main.

60
00:02:47.009 --> 00:02:52.009
The runtime we will use is go 1.x

61
00:02:52.009 --> 00:02:55.000
Our role that we've seen so many times

62
00:02:55.000 --> 00:02:57.003
is Arne:AWS:

63
00:02:57.003 --> 00:03:05.001
I am::your account number.

64
00:03:05.001 --> 00:03:10.000
Your role and Lambda X.

65
00:03:10.000 --> 00:03:13.009
And I will send my profile of lil.

66
00:03:13.009 --> 00:03:16.003
The thing I note here, I went and added

67
00:03:16.003 --> 00:03:20.007
to that role, the ability to have full access to CloudWatch

68
00:03:20.007 --> 00:03:22.004
so that I can actually see the logs.

69
00:03:22.004 --> 00:03:24.007
By default we never added CloudWatch

70
00:03:24.007 --> 00:03:28.005
because it doesn't specify that in the AWS guide.

71
00:03:28.005 --> 00:03:29.006
Now you may have done that

72
00:03:29.006 --> 00:03:33.002
or you may have used your own role, but in this case

73
00:03:33.002 --> 00:03:35.005
I went and added that manually behind the scenes.

74
00:03:35.005 --> 00:03:38.002
So we're going to actually get log output.

75
00:03:38.002 --> 00:03:40.005
Let's go ahead and run that,

76
00:03:40.005 --> 00:03:42.008
and we've deployed our artifact.

77
00:03:42.008 --> 00:03:45.008
So now let's go ahead and execute it.

78
00:03:45.008 --> 00:03:50.000
So AWS Lambda invoke,

79
00:03:50.000 --> 00:03:54.004
I'm going to pass my profile in again.

80
00:03:54.004 --> 00:03:58.006
The function name is go demo.

81
00:03:58.006 --> 00:04:03.006
The payload, in this case, we will send it

82
00:04:03.006 --> 00:04:10.005
count of 10

83
00:04:10.005 --> 00:04:14.002
and a message

84
00:04:14.002 --> 00:04:20.000
of hello from Go learners.

85
00:04:20.000 --> 00:04:24.004
And one more time, I need to pass in the CLI binary format

86
00:04:24.004 --> 00:04:30.004
because I am on command line version 2.

87
00:04:30.004 --> 00:04:37.004
Raw in base 64 out.

88
00:04:37.004 --> 00:04:40.008
And we will pass this to output.texts.

89
00:04:40.008 --> 00:04:43.001
And I'm going to go ahead and cap that file

90
00:04:43.001 --> 00:04:49.004
out as part of my command and we're good to go.

91
00:04:49.004 --> 00:04:54.007
So it ran, we got our Okay all done message, not too bad.

92
00:04:54.007 --> 00:04:58.007
Let's jump into the console and take a look at CloudWatch.

93
00:04:58.007 --> 00:04:59.005
All right.

94
00:04:59.005 --> 00:05:02.005
So right now I'm on the dashboard of AWS Lambda.

95
00:05:02.005 --> 00:05:04.000
We can do this in a couple of ways.

96
00:05:04.000 --> 00:05:06.007
We can go straight to CloudWatch, or we can go

97
00:05:06.007 --> 00:05:11.001
into our go demo that we just ran,

98
00:05:11.001 --> 00:05:12.007
allow it to load,

99
00:05:12.007 --> 00:05:18.001
go into our monitor,

100
00:05:18.001 --> 00:05:23.005
and then click view logs in CloudWatch.

101
00:05:23.005 --> 00:05:27.000
Now this is the latest stream that we're running,

102
00:05:27.000 --> 00:05:29.005
and you'll see that we now have messages

103
00:05:29.005 --> 00:05:31.002
that have printed out.

104
00:05:31.002 --> 00:05:33.008
So we have a log message from our latest execution,

105
00:05:33.008 --> 00:05:36.004
hello from Go it's time to get some work done.

106
00:05:36.004 --> 00:05:41.003
And then we executed hello from Go all you LinkedIn learners

107
00:05:41.003 --> 00:05:44.008
in this case 10 times, because that's what we past it.

108
00:05:44.008 --> 00:05:47.006
It that's exactly what we would expect.

109
00:05:47.006 --> 00:05:49.003
So this is how logs

110
00:05:49.003 --> 00:05:53.002
from our Lambdas can actually be visualizing news

111
00:05:53.002 --> 00:05:54.009
not only to troubleshoot what's going on,

112
00:05:54.009 --> 00:05:57.008
but to see this system as a whole.

113
00:05:57.008 --> 00:05:59.008
This does not just apply to Go,

114
00:05:59.008 --> 00:06:02.007
it was just a great opportunity for me to show you this,

115
00:06:02.007 --> 00:06:05.000
before we wrapped up the course.

