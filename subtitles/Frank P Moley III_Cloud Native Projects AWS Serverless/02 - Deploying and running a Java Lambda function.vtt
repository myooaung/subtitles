WEBVTT
1
00:00:00.004 --> 00:00:01.007
- [Instructor] In the previous video,

2
00:00:01.007 --> 00:00:04.004
we created a Java application

3
00:00:04.004 --> 00:00:07.006
that would run as a Lambda function.

4
00:00:07.006 --> 00:00:09.009
In this video, we're going to take that code,

5
00:00:09.009 --> 00:00:13.005
compile it, package it, deploy it,

6
00:00:13.005 --> 00:00:16.005
and then invoke it in an effort to show you

7
00:00:16.005 --> 00:00:20.003
that the operations are really very similar with Java

8
00:00:20.003 --> 00:00:22.008
as they were with Python.

9
00:00:22.008 --> 00:00:24.008
Now I want you to jump into your command-line,

10
00:00:24.008 --> 00:00:27.004
and navigate to the directory containing

11
00:00:27.004 --> 00:00:30.009
your pom file from the previous video.

12
00:00:30.009 --> 00:00:32.004
All right, our first step here is to go to

13
00:00:32.004 --> 00:00:35.007
mvn clean package.

14
00:00:35.007 --> 00:00:37.001
And you'll see, if you read the output,

15
00:00:37.001 --> 00:00:39.007
that the Shade plugin runs, and what this does

16
00:00:39.007 --> 00:00:42.004
is it takes all of our dependencies and, actually,

17
00:00:42.004 --> 00:00:45.004
packages them into the jar file,

18
00:00:45.004 --> 00:00:49.002
so this jar file is a self-contained jar file

19
00:00:49.002 --> 00:00:54.001
that includes everything that is needed for execution.

20
00:00:54.001 --> 00:00:57.002
Now I'm going to do a little ls on the target directory,

21
00:00:57.002 --> 00:01:00.009
just so you can see the java-demo snapshot jar.

22
00:01:00.009 --> 00:01:03.005
The original one is one that has not been shaded,

23
00:01:03.005 --> 00:01:06.006
so it does not contain all the dependencies,

24
00:01:06.006 --> 00:01:09.006
do not use that with AWS Lambda.

25
00:01:09.006 --> 00:01:12.005
So let's go ahead and upload this file now.

26
00:01:12.005 --> 00:01:13.003
So we're going to go to

27
00:01:13.003 --> 00:01:18.005
aws lambda create-function

28
00:01:18.005 --> 00:01:23.003
the --function-name will be java-demo,

29
00:01:23.003 --> 00:01:26.007
we'll pass it as --zip-file

30
00:01:26.007 --> 00:01:36.000
from our target directory java-demo-1.0-SNAPSHOT.jar.

31
00:01:36.000 --> 00:01:38.007
You'll notice that I'm sending a jar to a zip-file,

32
00:01:38.007 --> 00:01:42.005
it's perfectly okay because a jar is a zip-file,

33
00:01:42.005 --> 00:01:46.003
it just has some extra metadata with it.

34
00:01:46.003 --> 00:01:48.003
I'm going to use my profile again,

35
00:01:48.003 --> 00:01:51.005
for the same reason I did before.

36
00:01:51.005 --> 00:01:55.000
We'll pass a runtime of java11.

37
00:01:55.000 --> 00:01:57.000
Now we're going to use our roll, that we created

38
00:01:57.000 --> 00:02:00.002
a long time ago, that we're using to execute our Lambda.

39
00:02:00.002 --> 00:02:02.008
So everybody's, here, is going to be different,

40
00:02:02.008 --> 00:02:04.005
but it all comes in the same package.

41
00:02:04.005 --> 00:02:11.007
So, arn:aws:iam::, your account number, the roll

42
00:02:11.007 --> 00:02:15.008
and then the roll name, which I followed the example,

43
00:02:15.008 --> 00:02:19.007
and I used the same name of lambda-ex.

44
00:02:19.007 --> 00:02:22.009
Now we need to pass the handler that we wanted to run,

45
00:02:22.009 --> 00:02:26.005
and the handler is the fully qualified name of the class,

46
00:02:26.005 --> 00:02:28.004
including the package.

47
00:02:28.004 --> 00:02:33.009
So I put it in com.frankmoley.lil.lambda,

48
00:02:33.009 --> 00:02:37.003
and it is called DemoHandler.

49
00:02:37.003 --> 00:02:40.002
All right, let's let that run.

50
00:02:40.002 --> 00:02:44.004
And our function has uploaded, so now we can invoke it.

51
00:02:44.004 --> 00:02:52.005
So let's do an aws lambda invoke, I'll use my profile,

52
00:02:52.005 --> 00:02:57.004
I will send it a function name of java-demo,

53
00:02:57.004 --> 00:03:04.002
I will send a payload

54
00:03:04.002 --> 00:03:09.002
with a count value, let's do seven this time,

55
00:03:09.002 --> 00:03:18.008
and a message: "Hello from Java LinkedIn Learning"

56
00:03:18.008 --> 00:03:21.004
and, once again, because I'm using CLA2

57
00:03:21.004 --> 00:03:28.008
I need to pass it a cli-binary command

58
00:03:28.008 --> 00:03:35.001
and I'm going to use raw-in-base64-out.

59
00:03:35.001 --> 00:03:37.002
I'm going to put this in my target directory,

60
00:03:37.002 --> 00:03:39.000
'cause that's, kind of, good Maven practice

61
00:03:39.000 --> 00:03:43.002
to use that target directory for transient files.

62
00:03:43.002 --> 00:03:44.009
And I'm going to go ahead and cat it out,

63
00:03:44.009 --> 00:03:47.008
just to save me a step at the end.

64
00:03:47.008 --> 00:03:50.000
You can definitely do this as two separate commands

65
00:03:50.000 --> 00:03:53.009
if you would like, but let's go ahead and run this.

66
00:03:53.009 --> 00:03:57.002
You'll see we got a status code of 200,

67
00:03:57.002 --> 00:03:59.002
and then you'll see that we have our executions

68
00:03:59.002 --> 00:04:02.003
which was our Response object that we created,

69
00:04:02.003 --> 00:04:04.006
we simply put the Count back in.

70
00:04:04.006 --> 00:04:08.004
So our Lambda has executed, it printed out all of the data

71
00:04:08.004 --> 00:04:12.006
and all of that data culminated in a Response,

72
00:04:12.006 --> 00:04:16.003
and that really is the basics of running a Java program

73
00:04:16.003 --> 00:04:18.004
as a Lambda function.

74
00:04:18.004 --> 00:04:20.003
You'll see that there are benefits in Java,

75
00:04:20.003 --> 00:04:22.006
but there's also a lot of detriments,

76
00:04:22.006 --> 00:04:24.007
including the size component.

77
00:04:24.007 --> 00:04:27.000
I don't use it a lot, but it is powerful

78
00:04:27.000 --> 00:04:29.000
if you want to use it.

