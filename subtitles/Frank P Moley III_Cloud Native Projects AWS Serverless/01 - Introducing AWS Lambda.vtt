WEBVTT
1
00:00:00.005 --> 00:00:02.004
- [Instructor] Lambda is a compute service

2
00:00:02.004 --> 00:00:05.005
from Amazon AWS that allows you

3
00:00:05.005 --> 00:00:08.006
to run code called Lambda functions

4
00:00:08.006 --> 00:00:12.006
without provisioning or managing virtual servers.

5
00:00:12.006 --> 00:00:16.007
This runtime is scalable and can be multitenant

6
00:00:16.007 --> 00:00:21.003
without you having to manage that aspect of the environment.

7
00:00:21.003 --> 00:00:25.004
AWS Lambda functions offer a robust set of language support,

8
00:00:25.004 --> 00:00:30.005
making this technology more open for many users.

9
00:00:30.005 --> 00:00:32.007
AWS Lambda natively supports some

10
00:00:32.007 --> 00:00:35.004
of the most popular languages used

11
00:00:35.004 --> 00:00:37.007
in cloud native computing today,

12
00:00:37.007 --> 00:00:40.007
including Go, Java, and Python,

13
00:00:40.007 --> 00:00:43.004
that we'll look at in this course.

14
00:00:43.004 --> 00:00:45.000
There's also native support

15
00:00:45.000 --> 00:00:48.003
for some other very popular languages like Ruby,

16
00:00:48.003 --> 00:00:52.007
C#, Node.js, and even PowerShell.

17
00:00:52.007 --> 00:00:56.001
In addition, Lambda has a runtime API

18
00:00:56.001 --> 00:00:58.004
that you can use for languages

19
00:00:58.004 --> 00:01:00.007
that are not natively supported

20
00:01:00.007 --> 00:01:03.008
to keep with the polyglot theme.

21
00:01:03.008 --> 00:01:05.004
Now, one of the beauties of Lambda,

22
00:01:05.004 --> 00:01:08.000
in my opinion, is the hooks

23
00:01:08.000 --> 00:01:10.006
to the Lambda framework are simple.

24
00:01:10.006 --> 00:01:13.004
There are no complex APIs to learn

25
00:01:13.004 --> 00:01:15.007
or deal with for very simple,

26
00:01:15.007 --> 00:01:20.000
or even more complex executions within the framework.

27
00:01:20.000 --> 00:01:22.005
Lambda as a serverless technology

28
00:01:22.005 --> 00:01:25.009
in the AWS ecosystem plays very nicely

29
00:01:25.009 --> 00:01:28.009
with other AWS offerings.

30
00:01:28.009 --> 00:01:31.006
Lambda can be used to process data

31
00:01:31.006 --> 00:01:36.002
or binary files through simple triggers in AWS.

32
00:01:36.002 --> 00:01:40.002
Changes in S3, RDS, or Dynamo, for instance,

33
00:01:40.002 --> 00:01:45.002
can trigger a Lambda function to do some meaningful work.

34
00:01:45.002 --> 00:01:49.001
Lambda can also be used to respond to web requests

35
00:01:49.001 --> 00:01:52.000
through API Gateway or CloudFront,

36
00:01:52.000 --> 00:01:56.007
acting as web applications or web services.

37
00:01:56.007 --> 00:01:59.005
Data streams are a powerful option

38
00:01:59.005 --> 00:02:02.003
in asynchronous processing through integrations

39
00:02:02.003 --> 00:02:05.004
with SQS or Kinesis.

40
00:02:05.004 --> 00:02:07.008
And of course, we wouldn't be talking about AWS

41
00:02:07.008 --> 00:02:10.001
if we didn't mention IoT.

42
00:02:10.001 --> 00:02:12.008
And IoT is another powerful integration point

43
00:02:12.008 --> 00:02:14.009
with things like Alexa Skills,

44
00:02:14.009 --> 00:02:20.000
or IoT, IoT events within AWS.

45
00:02:20.000 --> 00:02:21.001
And that isn't it.

46
00:02:21.001 --> 00:02:22.005
You can integrate Lambda

47
00:02:22.005 --> 00:02:27.008
with other Lambda functions and various other AWS services.

48
00:02:27.008 --> 00:02:31.003
Now AWS has provided many operational tools

49
00:02:31.003 --> 00:02:35.000
around Lambda to make it a truly effective system

50
00:02:35.000 --> 00:02:37.004
for application development.

51
00:02:37.004 --> 00:02:41.001
Out of the box, the console itself provides base,

52
00:02:41.001 --> 00:02:45.007
but rich monitoring of your Lambda executions.

53
00:02:45.007 --> 00:02:48.004
You can also build customized dashboards

54
00:02:48.004 --> 00:02:51.008
if your operational needs demand it.

55
00:02:51.008 --> 00:02:55.003
Lambda comes with a testing framework, REI,

56
00:02:55.003 --> 00:02:59.001
that can provide a way to test your serverless functions

57
00:02:59.001 --> 00:03:01.007
without doing deployments.

58
00:03:01.007 --> 00:03:04.003
And when it comes time to deploy,

59
00:03:04.003 --> 00:03:07.000
Lambda provides many different paths,

60
00:03:07.000 --> 00:03:09.009
some of which we will look at through this course,

61
00:03:09.009 --> 00:03:14.002
including console, command line, and container deployments

62
00:03:14.002 --> 00:03:16.006
if that fits your needs.

63
00:03:16.006 --> 00:03:18.007
Now that we have seen what Lambda offers,

64
00:03:18.007 --> 00:03:20.006
let's take a look at Serverless

65
00:03:20.006 --> 00:03:25.000
and what it offers as a technology to developers.

