WEBVTT
1
00:00:00.005 --> 00:00:02.000
- [Instructor] Before we get too deep,

2
00:00:02.000 --> 00:00:04.004
let's take a look at what serverless is,

3
00:00:04.004 --> 00:00:08.003
and how it operates at a conceptual level.

4
00:00:08.003 --> 00:00:10.005
Now many times you may hear the word serverless,

5
00:00:10.005 --> 00:00:13.004
and immediately think, well, there's no server.

6
00:00:13.004 --> 00:00:15.003
Well that's not true.

7
00:00:15.003 --> 00:00:18.001
There obviously is a server.

8
00:00:18.001 --> 00:00:21.008
The difference here is that you are paying for operations,

9
00:00:21.008 --> 00:00:24.002
not for the server itself.

10
00:00:24.002 --> 00:00:25.004
And there's a reason for this.

11
00:00:25.004 --> 00:00:29.000
This allows the Cloud provider to aggregate a whole bunch

12
00:00:29.000 --> 00:00:32.001
of functions instead of you dedicating

13
00:00:32.001 --> 00:00:34.009
that VM hardware for downtime.

14
00:00:34.009 --> 00:00:37.006
So again, you're not paying to run a VM,

15
00:00:37.006 --> 00:00:40.000
you're paying for the operations.

16
00:00:40.000 --> 00:00:42.001
But there is still a server,

17
00:00:42.001 --> 00:00:45.008
even though this technology name is serverless.

18
00:00:45.008 --> 00:00:50.004
Another aspect is you are not managing the runtime of VM.

19
00:00:50.004 --> 00:00:53.006
Now even in Cloud, where the VM is controlled

20
00:00:53.006 --> 00:00:56.006
by Cloud infrastructure, you still have maintenance

21
00:00:56.006 --> 00:01:00.006
of a running VM, whatever form of compute it is.

22
00:01:00.006 --> 00:01:02.006
So that is where the benefit comes from.

23
00:01:02.006 --> 00:01:05.009
Is not only are you not paying 24 hours a day,

24
00:01:05.009 --> 00:01:09.008
seven days a week for the VM, but you're not managing it,

25
00:01:09.008 --> 00:01:12.002
dealing with upgrades, dealing with nodes dying,

26
00:01:12.002 --> 00:01:15.001
dealing with any of the other aspects that come

27
00:01:15.001 --> 00:01:19.001
with management of the VM, even in Cloud infrastructure.

28
00:01:19.001 --> 00:01:21.006
Now, this may get a little bit confusing

29
00:01:21.006 --> 00:01:23.005
as to why this is offered.

30
00:01:23.005 --> 00:01:28.005
And the key here is that it provides maximum utilization

31
00:01:28.005 --> 00:01:32.001
of the compute time itself.

32
00:01:32.001 --> 00:01:36.009
A Cloud provider can take and pair cyclical workloads,

33
00:01:36.009 --> 00:01:39.007
such that the maximum capacity of the VM

34
00:01:39.007 --> 00:01:42.007
is achieved throughout the entire day

35
00:01:42.007 --> 00:01:46.007
as opposed to you out in the VM, where it's only

36
00:01:46.007 --> 00:01:51.001
achieving maximum throughput at given times of the day.

37
00:01:51.001 --> 00:01:54.009
Now this allows the provider to leverage many workloads

38
00:01:54.009 --> 00:01:59.003
on a group of VMs, instead of you getting the leverage

39
00:01:59.003 --> 00:02:01.006
of that group yourself.

40
00:02:01.006 --> 00:02:04.009
This allows them to maximize the value again,

41
00:02:04.009 --> 00:02:07.008
and do so in a way that is cost-effective

42
00:02:07.008 --> 00:02:10.001
for you and for them.

43
00:02:10.001 --> 00:02:13.005
Now there are many, many workloads that this applies to

44
00:02:13.005 --> 00:02:16.009
that make it very attractive.

45
00:02:16.009 --> 00:02:18.001
Now, I want to take a look

46
00:02:18.001 --> 00:02:21.001
at this concept of cyclical workloads.

47
00:02:21.001 --> 00:02:24.002
Now, I'm going to give you a very exaggerated view

48
00:02:24.002 --> 00:02:26.004
of a cyclical workload,

49
00:02:26.004 --> 00:02:30.009
and I have never seen a real one that is this cyclical.

50
00:02:30.009 --> 00:02:34.007
But I have seen workloads that mimics this.

51
00:02:34.007 --> 00:02:36.008
It's just not a pure sine wave,

52
00:02:36.008 --> 00:02:39.003
which is what I'm going to provide.

53
00:02:39.003 --> 00:02:42.001
Now the idea here is that we have a single process

54
00:02:42.001 --> 00:02:42.009
that is running,

55
00:02:42.009 --> 00:02:45.005
and you'll see throughout the day, throughout the week,

56
00:02:45.005 --> 00:02:48.000
throughout the year, that you have peak times

57
00:02:48.000 --> 00:02:51.001
and valleys within this workload.

58
00:02:51.001 --> 00:02:54.009
Now, again, this varies by provider,

59
00:02:54.009 --> 00:02:57.006
and it varies by situation, but you'll see these peaks

60
00:02:57.006 --> 00:03:00.002
and valleys throughout the life cycle

61
00:03:00.002 --> 00:03:04.002
of an application running on a single VM.

62
00:03:04.002 --> 00:03:06.000
Now in the serverless world,

63
00:03:06.000 --> 00:03:09.005
we can take an add another cyclical workload

64
00:03:09.005 --> 00:03:11.003
on this series of VMs.

65
00:03:11.003 --> 00:03:13.005
And what you see here is that even

66
00:03:13.005 --> 00:03:17.003
though we still have peaks and valleys of a single flow,

67
00:03:17.003 --> 00:03:19.003
we've now filled those peaks and valleys

68
00:03:19.003 --> 00:03:23.002
with another process, such that the peak of one

69
00:03:23.002 --> 00:03:25.003
may mimic the valley of another.

70
00:03:25.003 --> 00:03:29.007
And we're getting more utilization on this VM pool.

71
00:03:29.007 --> 00:03:32.007
Now, if we add yet another workflow,

72
00:03:32.007 --> 00:03:34.008
you will see that we've reduced the time

73
00:03:34.008 --> 00:03:36.008
where we're not under peak workload,

74
00:03:36.008 --> 00:03:38.004
and we've reduced the time

75
00:03:38.004 --> 00:03:42.004
where we're not under a valley to be as small as possible.

76
00:03:42.004 --> 00:03:44.006
Now, obviously a VM is not going

77
00:03:44.006 --> 00:03:47.001
to just run three serverless functions.

78
00:03:47.001 --> 00:03:49.002
Ideally, it's going to run hundreds

79
00:03:49.002 --> 00:03:51.009
or thousands in a pool of VMs,

80
00:03:51.009 --> 00:03:55.000
and this allows them to get maximum throughput

81
00:03:55.000 --> 00:03:57.007
across the workload the entire time.

82
00:03:57.007 --> 00:04:01.000
Now, you may step back and question this whole idea

83
00:04:01.000 --> 00:04:05.000
of cyclical workloads, but I encourage you to take a look

84
00:04:05.000 --> 00:04:08.000
at what actually happens on your services.

85
00:04:08.000 --> 00:04:11.002
If you run Cron operations, you'll see that they peak,

86
00:04:11.002 --> 00:04:14.003
and then they go dormant for a period of time.

87
00:04:14.003 --> 00:04:17.008
You can see this same utilization across industries.

88
00:04:17.008 --> 00:04:19.004
Look at something like e-commerce,

89
00:04:19.004 --> 00:04:22.002
where during the holiday shopping season,

90
00:04:22.002 --> 00:04:25.002
you see a ramp up in technology usage,

91
00:04:25.002 --> 00:04:28.008
and then a ramp down after the holiday season is over.

92
00:04:28.008 --> 00:04:32.008
And what often happens in a traditional environment

93
00:04:32.008 --> 00:04:34.008
where you're running VMs,

94
00:04:34.008 --> 00:04:38.004
is that you will actually scale your entire infrastructure

95
00:04:38.004 --> 00:04:42.003
for the peaks so that you can handle the peak workload,

96
00:04:42.003 --> 00:04:44.008
and the rest of the time when you're in the valley

97
00:04:44.008 --> 00:04:46.008
it becomes wasted space.

98
00:04:46.008 --> 00:04:49.004
So this is where serverless can start to offer some value

99
00:04:49.004 --> 00:04:52.009
as we maximize the utilization on peaks,

100
00:04:52.009 --> 00:04:57.000
and decrease the utilization on these valleys.

