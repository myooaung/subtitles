WEBVTT
1
00:00:00.005 --> 00:00:01.009
- [Instructor] As with all technology,

2
00:00:01.009 --> 00:00:04.003
there is no silver bullet.

3
00:00:04.003 --> 00:00:07.008
Serverless has some risks that need to be evaluated

4
00:00:07.008 --> 00:00:09.004
before making the jump to it

5
00:00:09.004 --> 00:00:13.008
as a technology choice for your institution.

6
00:00:13.008 --> 00:00:17.007
First and foremost, we need to talk about costs.

7
00:00:17.007 --> 00:00:20.007
Now, heavy workloads in a serverless environment

8
00:00:20.007 --> 00:00:24.005
can actually cost more than running a VM,

9
00:00:24.005 --> 00:00:27.002
even when that VM has those peaks

10
00:00:27.002 --> 00:00:29.007
and valleys that we talked about.

11
00:00:29.007 --> 00:00:32.001
It's hard sometimes to get a true picture

12
00:00:32.001 --> 00:00:37.004
of cost effectiveness in a serverless model because of this.

13
00:00:37.004 --> 00:00:42.000
Now, designing with serverless may hide some efficiencies

14
00:00:42.000 --> 00:00:45.005
that you could gain from a cost perspective.

15
00:00:45.005 --> 00:00:47.003
So let's take a look at the example

16
00:00:47.003 --> 00:00:50.005
of where we're running multiple serverless functions

17
00:00:50.005 --> 00:00:53.003
against a single trigger.

18
00:00:53.003 --> 00:00:56.005
Could we achieve the same thing by fanning that trigger out

19
00:00:56.005 --> 00:00:59.006
and actually reducing our costs

20
00:00:59.006 --> 00:01:02.006
in a traditional VM environment?

21
00:01:02.006 --> 00:01:04.000
Another risk that comes

22
00:01:04.000 --> 00:01:08.002
with serverless is the inability to do proper debugging.

23
00:01:08.002 --> 00:01:10.005
Now I'm not saying it's impossible,

24
00:01:10.005 --> 00:01:14.009
but it sometimes becomes very difficult to debug operations,

25
00:01:14.009 --> 00:01:18.006
especially when those serverless functions are running

26
00:01:18.006 --> 00:01:20.006
in a Cloud environment.

27
00:01:20.006 --> 00:01:25.001
You cannot simply connect to running servers many times,

28
00:01:25.001 --> 00:01:28.004
which makes it difficult to do real time debugging

29
00:01:28.004 --> 00:01:30.009
against a running process.

30
00:01:30.009 --> 00:01:34.002
Now, when you start chaining serverless functions,

31
00:01:34.002 --> 00:01:37.004
that debugging becomes even more complex,

32
00:01:37.004 --> 00:01:39.005
because now we have serverless functions

33
00:01:39.005 --> 00:01:41.001
that trigger other functions,

34
00:01:41.001 --> 00:01:43.006
and we now have to figure out how to get output

35
00:01:43.006 --> 00:01:48.006
and debug against multiple functions at one time.

36
00:01:48.006 --> 00:01:51.007
I often find that logging is the most effective way

37
00:01:51.007 --> 00:01:54.004
to do debugging, which is kind of an old school way

38
00:01:54.004 --> 00:01:58.003
of doing debugging, but sometimes it's your only choice.

39
00:01:58.003 --> 00:02:00.005
By putting a little out statements that say,

40
00:02:00.005 --> 00:02:02.008
look here, or I'm here,

41
00:02:02.008 --> 00:02:05.008
we can get a better indication of where we're at by reducing

42
00:02:05.008 --> 00:02:10.001
the complexity associated with connecting to debugging.

43
00:02:10.001 --> 00:02:12.001
But of course, every time you're doing that,

44
00:02:12.001 --> 00:02:13.007
you have to trigger a function,

45
00:02:13.007 --> 00:02:16.005
which then costs you more money.

46
00:02:16.005 --> 00:02:19.003
Now, another hard part is testing.

47
00:02:19.003 --> 00:02:23.006
Testing can be a struggle with serverless.

48
00:02:23.006 --> 00:02:26.006
And that's simply because the emulators from vendors

49
00:02:26.006 --> 00:02:31.008
that help, aren't an exact replica of what happens

50
00:02:31.008 --> 00:02:33.005
in a real runtime.

51
00:02:33.005 --> 00:02:35.005
In addition, sometimes you run

52
00:02:35.005 --> 00:02:37.000
against serverless technologies

53
00:02:37.000 --> 00:02:39.003
that don't have an emulator at all,

54
00:02:39.003 --> 00:02:41.009
so it's almost impossible to test against them

55
00:02:41.009 --> 00:02:44.006
in a live environment.

56
00:02:44.006 --> 00:02:46.000
It also can be very hard

57
00:02:46.000 --> 00:02:49.000
to integration tests serverless functions,

58
00:02:49.000 --> 00:02:52.004
because you have to be able to run them in your environment,

59
00:02:52.004 --> 00:02:55.000
but that environment isn't something that you run,

60
00:02:55.000 --> 00:02:57.002
it runs in a Cloud provider.

61
00:02:57.002 --> 00:02:58.008
So that adds to the complexity

62
00:02:58.008 --> 00:03:00.009
of actually effectively testing it,

63
00:03:00.009 --> 00:03:03.006
and oftentimes you end up doing mocks around

64
00:03:03.006 --> 00:03:06.007
those serverless functions, so that you don't have to deal

65
00:03:06.007 --> 00:03:09.002
with the Cloud provider itself.

66
00:03:09.002 --> 00:03:12.003
But of course, those are mocks and not true tests

67
00:03:12.003 --> 00:03:14.007
of the running system as a whole.

68
00:03:14.007 --> 00:03:17.000
Now one of the biggest problems that I've seen

69
00:03:17.000 --> 00:03:21.005
with serverless functions is this concept of sprawl.

70
00:03:21.005 --> 00:03:24.002
As you start to write more and more functions,

71
00:03:24.002 --> 00:03:26.006
your function-base grows.

72
00:03:26.006 --> 00:03:31.005
And as with any growth, individual elements become harder

73
00:03:31.005 --> 00:03:34.003
to control when you're running multiple,

74
00:03:34.003 --> 00:03:37.003
especially when you start interacting with triggers

75
00:03:37.003 --> 00:03:40.003
from the Cloud provider or from various technologies

76
00:03:40.003 --> 00:03:42.000
and chaining events.

77
00:03:42.000 --> 00:03:45.004
That sprawl can be almost unimaginable to deal

78
00:03:45.004 --> 00:03:49.006
with when you first start running serverless functions.

79
00:03:49.006 --> 00:03:53.003
And again, triggers and chains just expand this pain

80
00:03:53.003 --> 00:03:56.006
beyond belief, because now you have different ways

81
00:03:56.006 --> 00:03:58.002
of calling functions.

82
00:03:58.002 --> 00:04:00.008
It's not uncommon for a function to have two

83
00:04:00.008 --> 00:04:03.005
or three triggers, or two or three chains,

84
00:04:03.005 --> 00:04:05.005
or sometimes a mixture of them.

85
00:04:05.005 --> 00:04:07.007
And that complexity that gets added

86
00:04:07.007 --> 00:04:10.005
to your environment makes maintaining that,

87
00:04:10.005 --> 00:04:12.007
that much more difficult.

88
00:04:12.007 --> 00:04:14.008
Now, I don't want to discourage you from serverless,

89
00:04:14.008 --> 00:04:16.006
I think it's a fantastic technology

90
00:04:16.006 --> 00:04:19.008
if used in the proper use case.

91
00:04:19.008 --> 00:04:23.000
So let's take a look at some of the use cases next.

