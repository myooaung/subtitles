WEBVTT
1
00:00:00.005 --> 00:00:01.009
- [Instructor] So in the previous chapter,

2
00:00:01.009 --> 00:00:04.003
we looked at creating lambda functions

3
00:00:04.003 --> 00:00:07.007
and testing them using the Python language.

4
00:00:07.007 --> 00:00:09.001
Now outside of Go,

5
00:00:09.001 --> 00:00:12.005
which is what I use on an almost everyday basis,

6
00:00:12.005 --> 00:00:15.005
Python's probably my second favorite language.

7
00:00:15.005 --> 00:00:17.009
And when it comes to lambda functions,

8
00:00:17.009 --> 00:00:21.002
Python is definitely my first choice.

9
00:00:21.002 --> 00:00:25.000
However, there are a lot of people that use Java,

10
00:00:25.000 --> 00:00:28.006
and Java is a very capable language,

11
00:00:28.006 --> 00:00:30.002
especially when you start looking

12
00:00:30.002 --> 00:00:33.006
at the various triggers throughout AWS Lambda.

13
00:00:33.006 --> 00:00:35.001
So let's take a look at what it takes

14
00:00:35.001 --> 00:00:38.008
to create a Java-based lambda function.

15
00:00:38.008 --> 00:00:41.005
Alright, so I want you to go ahead and open up your IDE,

16
00:00:41.005 --> 00:00:44.000
and I'm going to create a new project,

17
00:00:44.000 --> 00:00:46.002
and I'm going to base it off of Java 11,

18
00:00:46.002 --> 00:00:48.005
and it's going to be a Maven project.

19
00:00:48.005 --> 00:00:50.001
Now I'm using IntelliJ.

20
00:00:50.001 --> 00:00:52.005
Everybody's IDEs are going to be a little bit different,

21
00:00:52.005 --> 00:00:53.009
but all of them allow you to create

22
00:00:53.009 --> 00:00:57.000
a Maven-based project using Java 11,

23
00:00:57.000 --> 00:00:59.009
assuming you have the JDK installed.

24
00:00:59.009 --> 00:01:02.001
Go ahead and hit next here.

25
00:01:02.001 --> 00:01:07.007
And I'm going to call this java-demo.

26
00:01:07.007 --> 00:01:11.009
And I'm going to store it

27
00:01:11.009 --> 00:01:22.008
on my local machine in an appropriate folder.

28
00:01:22.008 --> 00:01:25.005
I'm going to go ahead and hit finish.

29
00:01:25.005 --> 00:01:28.002
Now, this is going to bring up the POM file.

30
00:01:28.002 --> 00:01:31.000
And we've got some work to do here in the POM file

31
00:01:31.000 --> 00:01:34.000
in order to make this project work.

32
00:01:34.000 --> 00:01:36.005
Now I'm about to enter some dependencies

33
00:01:36.005 --> 00:01:40.005
and a build section into my POM file.

34
00:01:40.005 --> 00:01:42.005
In lieu of having you watch me type

35
00:01:42.005 --> 00:01:45.000
a whole bunch of text into the POM file,

36
00:01:45.000 --> 00:01:47.004
I want you to reference this website

37
00:01:47.004 --> 00:01:49.004
displayed on your screen,

38
00:01:49.004 --> 00:01:51.005
and it provides you all of the instructions

39
00:01:51.005 --> 00:01:54.000
on the dependencies to set in your POM,

40
00:01:54.000 --> 00:01:56.005
as well as the build plugin to use

41
00:01:56.005 --> 00:02:00.004
to actually compile this into a shaded JAR

42
00:02:00.004 --> 00:02:04.007
and the additional notes around using the logging system.

43
00:02:04.007 --> 00:02:07.008
And that's all there is to writing the actual code.

44
00:02:07.008 --> 00:02:10.009
In the next chapter, I'm going to show you how to compile it

45
00:02:10.009 --> 00:02:14.000
and upload it and run it as a Lambda function.

