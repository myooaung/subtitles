WEBVTT
1
00:00:00.001 --> 00:00:05.006
(upbeat music)

2
00:00:05.006 --> 00:00:07.005
- [Instructor] And now, it's time for my solution

3
00:00:07.005 --> 00:00:09.008
to this problem.

4
00:00:09.008 --> 00:00:12.008
I created a new project called Java chow,

5
00:00:12.008 --> 00:00:15.007
and I put three classes in there, a request to response

6
00:00:15.007 --> 00:00:16.009
and the handler.

7
00:00:16.009 --> 00:00:18.002
The request is very simple.

8
00:00:18.002 --> 00:00:20.004
It takes an integer value, that is the count.

9
00:00:20.004 --> 00:00:25.001
This was the number of flips that we wanted to execute.

10
00:00:25.001 --> 00:00:28.009
My coin toss response is a little bit more complicated.

11
00:00:28.009 --> 00:00:31.009
In addition to the flips and heads and tails

12
00:00:31.009 --> 00:00:33.004
that you might expect,

13
00:00:33.004 --> 00:00:35.003
and all of the getters and setters,

14
00:00:35.003 --> 00:00:37.004
I added two helper methods,

15
00:00:37.004 --> 00:00:39.008
an increment heads and an increment tails,

16
00:00:39.008 --> 00:00:42.002
just so I could create the objects at the beginning

17
00:00:42.002 --> 00:00:45.000
and increment it throughout my if statements.

18
00:00:45.000 --> 00:00:47.007
So now, let's look at my coin toss handler.

19
00:00:47.007 --> 00:00:49.008
And while this may not be the most effective way

20
00:00:49.008 --> 00:00:52.000
to do this, it definitely works.

21
00:00:52.000 --> 00:00:54.003
So I created the handler and I implemented it

22
00:00:54.003 --> 00:00:56.001
using request handler,

23
00:00:56.001 --> 00:00:58.006
passing it through request and response.

24
00:00:58.006 --> 00:01:00.000
Then we get to line 12,

25
00:01:00.000 --> 00:01:01.009
and I actually implement the function

26
00:01:01.009 --> 00:01:04.007
that overrides that interface.

27
00:01:04.007 --> 00:01:06.009
I created an instance of my logger.

28
00:01:06.009 --> 00:01:09.007
I then do a response object.

29
00:01:09.007 --> 00:01:11.004
And from there, I set my flips,

30
00:01:11.004 --> 00:01:14.001
go ahead and equal to the number of count.

31
00:01:14.001 --> 00:01:18.005
Now I create a random object called random,

32
00:01:18.005 --> 00:01:20.002
and then I enter my loop.

33
00:01:20.002 --> 00:01:22.005
And it's the traditional for loop.

34
00:01:22.005 --> 00:01:26.001
But what you'll see here is I use the random object,

35
00:01:26.001 --> 00:01:28.001
and I called the next Boolean on it.

36
00:01:28.001 --> 00:01:30.007
So next Boolean is either going to be true or false,

37
00:01:30.007 --> 00:01:32.002
heads or tails, right?

38
00:01:32.002 --> 00:01:37.001
So if it's true, I log it out that this flip found heads.

39
00:01:37.001 --> 00:01:40.001
And then I do a response to increment heads.

40
00:01:40.001 --> 00:01:42.006
Then on the else, which is where it would be tails,

41
00:01:42.006 --> 00:01:44.000
I logged that it's tails,

42
00:01:44.000 --> 00:01:48.000
and I increment tails on my response object.

43
00:01:48.000 --> 00:01:50.009
Then I simply return the response.

44
00:01:50.009 --> 00:01:54.004
So when it comes time to test this,

45
00:01:54.004 --> 00:01:57.001
and I'm going to use my embedded terminal here,

46
00:01:57.001 --> 00:02:00.001
I can simply invoke it.

47
00:02:00.001 --> 00:02:03.006
Let me clear that out to make it easier here.

48
00:02:03.006 --> 00:02:05.006
I can simply invoke that function,

49
00:02:05.006 --> 00:02:10.004
and I'm going to flip 50 coin tosses.

50
00:02:10.004 --> 00:02:12.008
And what you'll see is this coming out at 26 heads

51
00:02:12.008 --> 00:02:14.007
and 24 tails.

52
00:02:14.007 --> 00:02:16.004
I can run that again.

53
00:02:16.004 --> 00:02:20.001
And I got 26 heads, 24 tails.

54
00:02:20.001 --> 00:02:22.000
Do it one more time.

55
00:02:22.000 --> 00:02:26.004
Now I got 24 heads in 26 tails.

56
00:02:26.004 --> 00:02:27.003
And one more time.

57
00:02:27.003 --> 00:02:30.000
There we go. 19 heads, 31 tails.

58
00:02:30.000 --> 00:02:33.001
So it truly is a random system,

59
00:02:33.001 --> 00:02:37.002
and it runs it through the actual Lambda function.

60
00:02:37.002 --> 00:02:39.000
Pretty straightforward, but hopefully,

61
00:02:39.000 --> 00:02:40.008
you got a little bit of a taste.

62
00:02:40.008 --> 00:02:42.001
Now, if you went out

63
00:02:42.001 --> 00:02:46.005
and actually did sort of the bonus prize on this exercise,

64
00:02:46.005 --> 00:02:50.002
I'm curious what you came up with around SQS handler.

65
00:02:50.002 --> 00:02:53.009
The SQS handler is another type of request handler

66
00:02:53.009 --> 00:02:55.006
that you can use with Lambda,

67
00:02:55.006 --> 00:02:57.007
and it ties you to an event.

68
00:02:57.007 --> 00:03:01.000
Now, it's a little bit more but Amazon Docs

69
00:03:01.000 --> 00:03:03.003
are actually pretty good around this,

70
00:03:03.003 --> 00:03:06.002
on how to bind to an SQS queue,

71
00:03:06.002 --> 00:03:09.006
receive the event and operate on it.

72
00:03:09.006 --> 00:03:12.000
If you didn't do it for this challenge,

73
00:03:12.000 --> 00:03:13.000
but you're interested

74
00:03:13.000 --> 00:03:15.005
in actually using Lambda professionally,

75
00:03:15.005 --> 00:03:17.004
that's a great place to start,

76
00:03:17.004 --> 00:03:19.007
is looking at the SQS path.

77
00:03:19.007 --> 00:03:23.001
Because quite honestly, it's one of the most used ways

78
00:03:23.001 --> 00:03:25.008
that I use Lambda on a daily basis,

79
00:03:25.008 --> 00:03:29.000
is to respond to asynchronous messaging.

