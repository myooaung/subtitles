WEBVTT
1
00:00:00.510 --> 00:00:06.750
What is going on, everyone, I'm wicked, and today I'm going to address an issue some of the new developers

2
00:00:06.750 --> 00:00:12.690
often encounter while working with the Block Library, you might find yourself at the moment in time

3
00:00:12.690 --> 00:00:16.560
in which your block or Cubitt state won't update at all.

4
00:00:16.860 --> 00:00:21.900
So in this tutorial, you'll find out why this happens and exactly how we can fix it.

5
00:00:22.050 --> 00:00:25.980
Will also take a more in-depth look over the equatable package.

6
00:00:26.220 --> 00:00:32.159
So we know from previous tutorials that each block or cubitt incorporates a stream of outgoing states.

7
00:00:32.369 --> 00:00:38.970
Our state not updating problem translates into a new state from a block or Cubitt can't be admitted

8
00:00:38.970 --> 00:00:40.920
to the stream of outgoing states.

9
00:00:41.140 --> 00:00:43.460
The cause of this problem is pretty simple.

10
00:00:43.470 --> 00:00:47.550
You're probably emitting the same exact state as the previous one.

11
00:00:47.790 --> 00:00:53.940
The problem with this is that Block Library does not allow two identical states to be emitted one after

12
00:00:53.940 --> 00:00:54.400
another.

13
00:00:54.780 --> 00:00:57.970
You can imagine this rule exists because of optimization techniques.

14
00:00:58.140 --> 00:01:02.790
Why would you want to admit to identical states one after another, after all?

15
00:01:03.210 --> 00:01:04.830
You probably don't want that.

16
00:01:04.830 --> 00:01:08.400
But the code you wrote unfortunately translates into that.

17
00:01:08.880 --> 00:01:14.460
First and foremost, you need to understand how Dart compares to objects, since that's how it also

18
00:01:14.460 --> 00:01:18.650
compares to states in order to see if they're equal or not.

19
00:01:18.900 --> 00:01:26.070
From the documentation, we find out that two objects are equal if and only if both are the same object.

20
00:01:26.550 --> 00:01:31.310
Unfortunately, this may not seem really straightforward and some people misinterpreted.

21
00:01:31.590 --> 00:01:36.090
So let's say we have a middle class class containing an integer value inside.

22
00:01:36.090 --> 00:01:42.030
The main function will create two instances of this my class object, both having the value set to one

23
00:01:42.270 --> 00:01:43.710
based on the definition.

24
00:01:43.740 --> 00:01:46.040
What do you think this predicament will display?

25
00:01:46.350 --> 00:01:51.600
You might be tempted to say that they're equal, but they're definitely not what the definition is trying

26
00:01:51.600 --> 00:01:58.320
to say that the only way we can get through here is when we compare A to A and B to be our aim.

27
00:01:58.320 --> 00:02:04.020
B variables are not the same object, even though it looks like they are from the code, they are different.

28
00:02:04.170 --> 00:02:07.730
Therefore, comparing A to B will return a false value.

29
00:02:07.950 --> 00:02:11.670
So that's how the default equality operator works inside DART.

30
00:02:11.670 --> 00:02:15.600
But obviously we can override it to compare objects as we want to.

31
00:02:15.630 --> 00:02:21.450
We want to compare these two instances to see if they're both instantiated from the same type of class

32
00:02:21.450 --> 00:02:24.990
and also to see if they have the same value stored inside them.

33
00:02:25.170 --> 00:02:30.750
To do that, we can override the equal operator by pressing the control plus period keys right next

34
00:02:30.750 --> 00:02:33.880
to the class and then by choosing to generate equality.

35
00:02:33.930 --> 00:02:40.500
So what this does is check if the other object we're comparing to is of type my class and if the other

36
00:02:40.500 --> 00:02:44.190
objects value is equal to the ones we're comparing to.

37
00:02:44.460 --> 00:02:49.230
Now, as you can see, if you run this program, the print sequence displays true.

38
00:02:49.500 --> 00:02:55.390
The question now is, do we have to override this equal operator every time we're doing this?

39
00:02:55.590 --> 00:02:56.970
Fortunately, no.

40
00:02:57.150 --> 00:03:01.550
There is already a really popular darte package which simplifies things a lot.

41
00:03:01.560 --> 00:03:03.420
Its name is equatable.

42
00:03:03.660 --> 00:03:08.740
So let's import this package into the public that YAML file and see how it works.

43
00:03:08.790 --> 00:03:15.120
All we need to do now is to extend our class from the equatable package and overwrite its props.

44
00:03:15.330 --> 00:03:20.970
The props will be a list of all the variables we would want equatable to compare in order to decide

45
00:03:20.970 --> 00:03:22.890
the quality of two objects.

46
00:03:23.010 --> 00:03:26.790
In our case, we want to pass the value variables to the list of props.

47
00:03:26.970 --> 00:03:32.730
If we save and we start our project, you will see that it works exactly as if we would manually override

48
00:03:32.940 --> 00:03:34.350
the quality operator.

49
00:03:34.800 --> 00:03:36.500
Let's test it even further.

50
00:03:36.750 --> 00:03:38.550
What if we have different values?

51
00:03:38.940 --> 00:03:40.250
It will return false.

52
00:03:40.260 --> 00:03:44.300
But let's say we forget to mention the value parameter inside the file.

53
00:03:44.310 --> 00:03:50.790
As you can see, if we compare and B will still get through, even though the values are different.

54
00:03:50.790 --> 00:03:55.200
And that's because equatable will only compare the run type of the objects.

55
00:03:55.350 --> 00:04:00.210
Both of them are instances of my class class, thus marking them equal.

56
00:04:00.420 --> 00:04:05.940
That's why it's important to pay attention to every scenario on how that compares objects.

57
00:04:06.210 --> 00:04:11.700
Remember that each state from inside your blocks or cubits is still a class nevertheless.

58
00:04:11.850 --> 00:04:18.390
So everything we discussed applies to every state to coming back to our state, not updating issue.

59
00:04:18.390 --> 00:04:24.420
We said that the cause of it is mainly the fact that the state we want to omit is actually equal to

60
00:04:24.420 --> 00:04:25.980
the previous omitted one.

61
00:04:25.980 --> 00:04:31.280
In order to understand this in more detail, I have created a settings page containing two switching

62
00:04:31.380 --> 00:04:37.650
styles, one serving for an eventual AB notification feature and the other one serving for an eventual

63
00:04:37.650 --> 00:04:39.060
email notification feature.

64
00:04:39.240 --> 00:04:44.790
So each of these two titles can be either on or off, depending on the user's preference to receive

65
00:04:44.800 --> 00:04:46.560
app or email notifications.

66
00:04:46.890 --> 00:04:53.400
To manage this page, I have also created a settings cubitt, a cubitt which will emit a single setting

67
00:04:53.400 --> 00:04:53.910
state.

68
00:04:53.910 --> 00:04:59.850
Each time one of the titles are toggled, the settings state glass will contain two boolean class.

69
00:05:00.390 --> 00:05:06.510
App notifications and email notifications by default, the initial state of the cubitt will be setting

70
00:05:06.510 --> 00:05:09.420
state with both of the fields set to force.

71
00:05:09.600 --> 00:05:12.930
I have also created two functions inside the cubitt.

72
00:05:12.960 --> 00:05:19.350
One is triggered when the ID style is pressed and the other one is triggered when the email notification

73
00:05:19.350 --> 00:05:20.160
starts pressed.

74
00:05:20.430 --> 00:05:25.560
Both of these two functions will meet a single state according to what the new value of the Boolean

75
00:05:25.560 --> 00:05:27.910
values will be inside the UI.

76
00:05:27.930 --> 00:05:31.580
Of course, I use Block Builder in order to rebuild the switch list.

77
00:05:31.590 --> 00:05:35.400
That's according to the specific values found inside the setting state.

78
00:05:35.550 --> 00:05:41.580
I have also added a block lisner at the top in which I'm showing a snack bar to see that the values

79
00:05:41.580 --> 00:05:44.730
of the setting state correspond to what's shown on the screen.

80
00:05:44.940 --> 00:05:51.120
The settings Cubitt is provided globally above the material app widget, thus being available to all

81
00:05:51.120 --> 00:05:51.960
of our screens.

82
00:05:52.080 --> 00:05:57.360
Remember, if you have doubts or don't understand a line of code, you can find a source code for this

83
00:05:57.360 --> 00:05:58.920
material into description.

84
00:05:58.920 --> 00:06:02.100
And you can also leave me a comment right below the video.

85
00:06:02.160 --> 00:06:07.920
OK, now let's investigate the mistakes some of the users of Block Library make while coding mistakes

86
00:06:07.920 --> 00:06:10.560
that lead to the state not being updated anymore.

87
00:06:10.860 --> 00:06:16.140
Let's switch our review to the Tuggle app notifications method inside settings Cubitt class.

88
00:06:16.150 --> 00:06:21.630
I said that inside this function will have to retrieve the new value of the switch style from the UI,

89
00:06:21.780 --> 00:06:27.470
then omit a sitting state containing the app notifications field populated with the new value.

90
00:06:27.510 --> 00:06:29.340
Some people may do the following.

91
00:06:29.520 --> 00:06:35.820
They will take the current state, which is the setting state, modify its application value directly

92
00:06:35.820 --> 00:06:41.330
to the new value, subsequently omitting that state again into the stream of omitted states.

93
00:06:41.580 --> 00:06:48.600
These two lines of code are really, really, really wrong and must be avoided at all costs.

94
00:06:48.600 --> 00:06:52.740
First of all, we're mutating an existing state of our cubitt.

95
00:06:52.740 --> 00:06:56.100
This is a complete violation of the main principle of block.

96
00:06:56.520 --> 00:07:02.550
Remember, for every interaction user makes with UI, there should be a new state omitted from the OR

97
00:07:02.550 --> 00:07:02.960
cubit.

98
00:07:03.000 --> 00:07:10.860
So you should never but never modify or mutate any already existing state from inside a block or cubitt.

99
00:07:10.980 --> 00:07:16.800
You can access its value using the state operator right here, but you should never modify it.

100
00:07:16.920 --> 00:07:21.540
The biggest problem isn't, however, this line of code, but rather the next one.

101
00:07:21.840 --> 00:07:27.810
It may seem that if you modify the app notifications value above with the new value, the state we're

102
00:07:27.880 --> 00:07:30.720
missing here will be different from the previous one.

103
00:07:30.900 --> 00:07:32.910
This is again wrong.

104
00:07:33.030 --> 00:07:37.500
Remember that we discussed earlier on how that compares objects at the moment.

105
00:07:37.500 --> 00:07:43.440
Currently this omitted state is to dart the same exact state as it was before.

106
00:07:43.500 --> 00:07:49.530
Doesn't matter if we modified its value here is just like we previously compared it to A and B to be,

107
00:07:49.650 --> 00:07:50.910
it will still return.

108
00:07:50.910 --> 00:07:56.430
True, since it's the same object to the previous state being equal to one you're trying to omit.

109
00:07:56.460 --> 00:08:02.560
Block Library won't admit a new state to the stream of states, therefore not updating the UI.

110
00:08:02.850 --> 00:08:05.940
This can be noticed if we save and run the project right now.

111
00:08:06.060 --> 00:08:09.690
As you can see, if we click the switch style, nothing happens.

112
00:08:09.690 --> 00:08:13.290
In order to fix this, we need to erase these lines of code.

113
00:08:13.380 --> 00:08:19.200
I don't know if you noticed, but inside the sitting state class I have this copy with method I generated

114
00:08:19.200 --> 00:08:22.040
by clicking control plus period next to the class name.

115
00:08:22.140 --> 00:08:27.990
If you're not familiar with this method, what it essentially does is create a new instance of a setting

116
00:08:27.990 --> 00:08:30.630
state by copying the entire previous one.

117
00:08:30.750 --> 00:08:36.090
And then inside the methods parameters, you can mention which field you want to modify after it gets

118
00:08:36.090 --> 00:08:36.659
created.

119
00:08:36.809 --> 00:08:42.780
In our class, we can omit a new state by calling state that copy with which will create a new setting

120
00:08:42.780 --> 00:08:49.620
state and copy the content from the previous one to the new state by also setting up the new value of

121
00:08:49.620 --> 00:08:50.880
app notifications.

122
00:08:51.180 --> 00:08:57.150
As you can see, if we save and run the project right now, the application is going to work perfectly.

123
00:08:57.420 --> 00:09:03.150
As I told you before, another mistake users do use that whenever they use the equatable package, they

124
00:09:03.150 --> 00:09:06.360
forget to place the values inside the variable.

125
00:09:06.360 --> 00:09:11.640
In our case, if we were to do that, we would have set our settings state to extend equatable.

126
00:09:11.820 --> 00:09:16.460
Then let's say we forgot to write the AB notifications variable inside the props.

127
00:09:16.740 --> 00:09:23.600
This means that DART will only compare to setting state by checking only the values of imaginative locations

128
00:09:23.610 --> 00:09:24.180
variables.

129
00:09:24.420 --> 00:09:30.750
So, for example, if only the notifications variable modifies, Dart won't care about it and will still

130
00:09:30.750 --> 00:09:31.200
return.

131
00:09:31.200 --> 00:09:32.940
True while comparing the two states.

132
00:09:33.030 --> 00:09:37.830
So if we save money, run this project and click the switch style for the notifications feature, it

133
00:09:37.830 --> 00:09:43.020
won't do anything since Dart thinks it's the same state as before and won't admit it.

134
00:09:43.200 --> 00:09:49.980
So please pay attention while working with equatable package and with how that compares objects in general,

135
00:09:50.310 --> 00:09:54.470
we are easily but steadily approaching the end of this amazing course.

136
00:09:54.470 --> 00:09:55.650
I hope you liked it.

137
00:09:55.650 --> 00:09:59.670
Until now, only two chapters separate us from the end in.

138
00:09:59.720 --> 00:10:04.820
The next chapter, I will teach you a really important topic, every blog developer should note that

139
00:10:04.820 --> 00:10:10.310
is how the status of an app can be maintained and restored from the app's internal storage.

140
00:10:10.430 --> 00:10:12.530
Hydrating block is the key to that.

141
00:10:12.560 --> 00:10:17.330
With that being said, I'm looking forward to seeing each and every one of you in the next chapter.

142
00:10:17.360 --> 00:10:19.130
Stay tuned and let's get wicked.

