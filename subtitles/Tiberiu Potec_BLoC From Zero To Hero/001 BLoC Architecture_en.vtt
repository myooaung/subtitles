WEBVTT
1
00:00:00.060 --> 00:00:01.810
Hello, everyone, and welcome back.

2
00:00:02.310 --> 00:00:05.700
In this chapter, I'll introduce you to the block architecture.

3
00:00:06.090 --> 00:00:11.190
So we remember a couple of years back when I was talking about blocks and cubits I mentioned that will

4
00:00:11.190 --> 00:00:14.960
come back later into checking out what's up with this data layer?

5
00:00:14.970 --> 00:00:16.850
We took out the equation back then.

6
00:00:16.860 --> 00:00:19.460
Well, buckle up, because the time has come.

7
00:00:19.470 --> 00:00:21.870
First of all, what is an architecture?

8
00:00:21.990 --> 00:00:23.460
What is it all about?

9
00:00:23.620 --> 00:00:26.150
Why do we need an architecture in the first place?

10
00:00:26.160 --> 00:00:27.370
Can't we just skip it?

11
00:00:27.390 --> 00:00:33.660
Well, no, we can't keep it at all, because as simple and as natural as it may be, if you think a

12
00:00:33.660 --> 00:00:40.320
little bit in depth, we as human species can't live without a predefined and stable architecture,

13
00:00:40.350 --> 00:00:42.130
which is mainly our skeleton.

14
00:00:42.150 --> 00:00:48.130
Imagine having all kinds of different classes, method's functions, variables all over the place.

15
00:00:48.180 --> 00:00:51.510
This is definitely going to result in a total failure.

16
00:00:51.540 --> 00:00:54.220
Now, assimilate this to us humans.

17
00:00:54.240 --> 00:00:58.050
How would our life be if we only had our organs?

18
00:00:58.050 --> 00:01:02.910
Everyone had to choose where to place their heart, their lungs, their kidneys, as probably none of

19
00:01:02.910 --> 00:01:08.160
these people would have survived in this situation without an organized structure and a stable skeleton,

20
00:01:08.160 --> 00:01:13.230
neither would have any of the apps built without the proper architecture.

21
00:01:13.260 --> 00:01:14.880
It's as simple as that.

22
00:01:14.910 --> 00:01:20.340
So think of the architecture as being the skeleton, the blueprint, the structure which keeps all your

23
00:01:20.340 --> 00:01:24.350
code organized, stable and easy to test and maintain.

24
00:01:24.390 --> 00:01:30.670
Now, look, architecture is simply an architecture which has block as its center of gravity.

25
00:01:30.690 --> 00:01:37.350
So not only is block a design better and the State Management Library, but it is also an architectural

26
00:01:37.350 --> 00:01:37.770
pattern.

27
00:01:37.950 --> 00:01:41.220
Let's come back to a familiar image you saw a couple of years back.

28
00:01:41.250 --> 00:01:47.520
What we know for now is that for every interaction and user makes with the app through its UI, there

29
00:01:47.520 --> 00:01:53.670
should be an event dispatched to the specialized block or Cubitt, which will process it and will eventually

30
00:01:53.790 --> 00:02:00.180
meet a state that is going to rebuild the UI in a way so that the user gets a feedback of what's going

31
00:02:00.180 --> 00:02:01.190
on with the app.

32
00:02:01.230 --> 00:02:08.850
The big unknown variable in all this equation is how Block processes the event and perhaps retrieves

33
00:02:08.850 --> 00:02:11.490
the necessary data to show to the user.

34
00:02:11.520 --> 00:02:12.840
Let me put it this way for you.

35
00:02:12.870 --> 00:02:17.310
Almost every app nowadays retrieves its data from the Internet.

36
00:02:17.310 --> 00:02:23.430
So in order to link our block based flutter app with the outer data layer, we need to add the data

37
00:02:23.430 --> 00:02:29.220
layer into our equation so that, for example, whenever the block receives a fetchingly event from

38
00:02:29.220 --> 00:02:35.550
the UI, it will request some data from the Internet, retrieve it as a response, pass it and then

39
00:02:35.550 --> 00:02:38.500
return the data with a new state to the user.

40
00:02:38.520 --> 00:02:45.080
We can split this into three separate main layers, which, not surprisingly, will depend one on another.

41
00:02:45.210 --> 00:02:48.920
So the UI is mostly seen as a presentation layer.

42
00:02:49.180 --> 00:02:56.460
Blocks this cubitt as the business logic layer and the last, but not least, the app's data as simply

43
00:02:56.460 --> 00:02:57.350
the data layer.

44
00:02:57.390 --> 00:03:03.090
We're going to start with the data layer, which is farthest from the user interface and work our way

45
00:03:03.090 --> 00:03:04.770
up to the presentation layer.

46
00:03:04.870 --> 00:03:11.760
OK, so as we discussed previously, the data layer has the responsibility of retrieving and also manipulating

47
00:03:11.760 --> 00:03:18.240
data from one or more sources, whether we are talking about network request databases or other asynchronous

48
00:03:18.240 --> 00:03:19.590
sources to do this.

49
00:03:19.590 --> 00:03:27.510
The data layer has been split up into three important sub layers, modals, data providers and repositories.

50
00:03:27.660 --> 00:03:33.420
I have set them up into this specific order because you see that they will also be dependent on one

51
00:03:33.420 --> 00:03:33.810
another.

52
00:03:33.870 --> 00:03:38.870
OK, so you finish some flutter tutorials and you feel confident of what you have accomplished.

53
00:03:38.880 --> 00:03:40.550
You want to build your own first step.

54
00:03:40.560 --> 00:03:46.220
Now you think of an idea, but then you realize that you don't know where to actually start programming

55
00:03:46.230 --> 00:03:46.510
yet.

56
00:03:46.650 --> 00:03:49.360
What is actually the first thing you should code?

57
00:03:49.380 --> 00:03:54.660
From my experience, I believe that the best way to start your application, of course, after you visually

58
00:03:54.660 --> 00:03:58.140
and technically design it, is by coding your models.

59
00:03:58.140 --> 00:04:00.330
But what exactly is a model?

60
00:04:00.330 --> 00:04:06.830
A model is, as its name is implying, a blueprint to the data your application will work with.

61
00:04:06.840 --> 00:04:10.170
Let's pretend your application is a brand new weather app.

62
00:04:10.290 --> 00:04:15.400
So the data it will be fetching from the Internet is going to be mainly weather data, right?

63
00:04:15.420 --> 00:04:19.680
Well, this data needs to be stored somehow inside your application.

64
00:04:19.680 --> 00:04:24.480
How can you do that inside flutter simply by creating a class for the specific data.

65
00:04:24.510 --> 00:04:28.370
So in this case, we'll have a weather class right in this class.

66
00:04:28.380 --> 00:04:34.260
We'll need to set up specific attributes like temperature forecast, weather icons, wind speed city

67
00:04:34.260 --> 00:04:35.700
name and so on and so forth.

68
00:04:35.700 --> 00:04:38.670
But how do you know which attributes your class should have?

69
00:04:38.700 --> 00:04:44.730
Well, you need to be sure that these attributes will be a little bit linked and not completely pay

70
00:04:44.730 --> 00:04:50.750
attention, a little bit linked to the data that will be received from the data source.

71
00:04:50.760 --> 00:04:55.320
So if the data source for app will be a weather API like A..

72
00:04:55.320 --> 00:04:59.790
Weather, for example, chances are that the weather data response from them will be a.

73
00:04:59.920 --> 00:05:05.620
Jason Shrink telling you what, Jason is is not a part of this tutorial, nor is the definition of an

74
00:05:05.620 --> 00:05:06.270
API.

75
00:05:06.280 --> 00:05:13.360
But in short, a Jason is a collection of pure data like this one here, and that API stands for application

76
00:05:13.360 --> 00:05:14.680
programming interface.

77
00:05:14.690 --> 00:05:21.130
The API lets your product or app communicate with other products and apps without having to know how

78
00:05:21.130 --> 00:05:23.080
they were implemented in the first place.

79
00:05:23.110 --> 00:05:28.660
So, for example, with a subscription, we can access the Equador API weather data without having to

80
00:05:28.660 --> 00:05:30.960
dive into their code implementation.

81
00:05:30.970 --> 00:05:34.360
We can just take the data we're interested in and that's all.

82
00:05:34.360 --> 00:05:38.880
Therefore, a model is nothing more than a class which contains the data.

83
00:05:38.890 --> 00:05:45.610
The application itself will be dependent on note that it is highly recommended that your app models

84
00:05:45.610 --> 00:05:48.580
should be pretty independent of the source.

85
00:05:48.610 --> 00:05:51.820
As I said, they should not be completely linked.

86
00:05:51.850 --> 00:05:53.110
What do I mean by this?

87
00:05:53.140 --> 00:05:59.310
The models from inside the app must be kind of generic and universal to multiple data sources.

88
00:05:59.320 --> 00:06:03.430
So why shouldn't they be identical to the data provided by the other API?

89
00:06:03.460 --> 00:06:09.460
Well, think of what is going to happen if you have two different weather apps in your app as a source

90
00:06:09.460 --> 00:06:14.500
to your weather data, their apps will set completely different Jasons to your app.

91
00:06:14.500 --> 00:06:20.590
Perhaps one of them has the temperature inside a temp name field and the other one in a temperature

92
00:06:20.590 --> 00:06:21.160
named field.

93
00:06:21.170 --> 00:06:24.990
Then you will need to parse them separately to your universal models.

94
00:06:25.030 --> 00:06:32.290
Remember that inside many apps there might be multiple data sources, but it's recommended to have only

95
00:06:32.290 --> 00:06:36.190
one specific data model in which they will be passed.

96
00:06:36.310 --> 00:06:42.010
This means that your model should be independent enough to get weather data from many different weather

97
00:06:42.010 --> 00:06:42.810
apps.

98
00:06:42.850 --> 00:06:48.610
So now, after you hopefully understood what a model is, it is time to move over to the next layer.

99
00:06:48.730 --> 00:06:56.020
The data provider, the data provider's responsibility is to provide raw data to its successor, the

100
00:06:56.020 --> 00:06:57.220
repository layer.

101
00:06:57.220 --> 00:07:00.250
But let's concentrate on the data provider for a moment.

102
00:07:00.430 --> 00:07:04.870
Data provider is actually an API for your own application.

103
00:07:04.930 --> 00:07:10.210
This means that it is going to be a class which will contain different methods and these methods will

104
00:07:10.210 --> 00:07:13.900
serve as a direct communication way with the data sources.

105
00:07:13.930 --> 00:07:16.100
This is where all the magic happens.

106
00:07:16.120 --> 00:07:20.560
This is where Flutter asks for the required data straight from the Internet.

107
00:07:20.570 --> 00:07:26.950
All your network requests like HTP that get HTP, the post put delete will go inside.

108
00:07:26.980 --> 00:07:34.030
Take in mind that the return type of these functions won't be of the type of model you created earlier,

109
00:07:34.030 --> 00:07:41.050
but rather of the type of raw data you received from the data source, which for example, may be a

110
00:07:41.050 --> 00:07:42.310
type of decent stream.

111
00:07:42.340 --> 00:07:48.580
The component in which will have our modal class is instantiated as objects is the repository.

112
00:07:48.700 --> 00:07:53.800
The repository is mainly a wrapper around one or more data providers.

113
00:07:53.830 --> 00:07:59.890
It is safe to say that it's the part of the data layer block communicates with similar to the other

114
00:07:59.890 --> 00:08:07.150
data layer subparts repositories are also classes classes which contain dependencies of the respective

115
00:08:07.150 --> 00:08:08.290
data providers.

116
00:08:08.320 --> 00:08:14.650
So, for example, the weather repository will have a dependency on the weather provider with the help

117
00:08:14.650 --> 00:08:19.480
of which will call the JETRO weather method and retrieve the weather data.

118
00:08:19.630 --> 00:08:26.440
The repository is where the modal object will be instantiated with the raw data from the data provider

119
00:08:26.470 --> 00:08:32.110
or raw data, which will be passed to model data with from Jason Method's.

120
00:08:32.230 --> 00:08:39.460
The repository is also a perfect place for fine tuning the data before giving it as a response to the

121
00:08:39.460 --> 00:08:39.909
block.

122
00:08:39.909 --> 00:08:46.630
Here you can filter it sorted and do all kinds of changes before it will be sent to the business logic

123
00:08:46.630 --> 00:08:46.960
layer.

124
00:08:47.110 --> 00:08:52.930
The business logic layer is where most of the blocks and cubits will be created inside your flutter

125
00:08:52.930 --> 00:08:53.170
app.

126
00:08:53.180 --> 00:08:58.960
Its main responsibility is to respond to the user input from the presentation layer with new omitted

127
00:08:58.960 --> 00:08:59.470
states.

128
00:08:59.650 --> 00:09:06.850
This layer is meant to be the mediator between the beautiful right and colorful side of the UI in the

129
00:09:06.850 --> 00:09:10.540
dark, dangerous and unstable side of the data layer.

130
00:09:10.540 --> 00:09:15.460
Why is one of them beautiful and shiny and the water one dark and unstable, you might ask?

131
00:09:15.460 --> 00:09:20.440
Well, you are supposedly designing and programming your app to the best standards so that the UI and

132
00:09:20.440 --> 00:09:24.370
the backend looks and most importantly works flawlessly.

133
00:09:24.550 --> 00:09:25.780
This is the bright side.

134
00:09:26.050 --> 00:09:27.670
But what about the Internet?

135
00:09:27.700 --> 00:09:30.430
What about the APIs you're getting data from?

136
00:09:30.430 --> 00:09:36.040
You have any guarantee that they will be as amazing and well programmed as your APIs?

137
00:09:36.040 --> 00:09:42.430
Well, if the apps are not designed and programmed by yourself, definitely no errors may arise.

138
00:09:42.430 --> 00:09:45.610
Bugs, crashes, server issues and so on and so forth.

139
00:09:45.670 --> 00:09:51.310
Being the mediator between the bright and the dark side, the business logic layer is the last layer

140
00:09:51.310 --> 00:09:58.540
that can intercept and catch any errors from within the data layer and protect the application from

141
00:09:58.540 --> 00:09:59.200
crashing.

142
00:09:59.590 --> 00:10:05.720
The last moment now, since this letter is closely related to the data layer, especially the repository

143
00:10:05.900 --> 00:10:12.320
layer, it can depend on one or more repositories to retrieve the data needed to build up the application

144
00:10:12.320 --> 00:10:12.700
state.

145
00:10:12.710 --> 00:10:16.950
And we'll see how every part of the puzzle starts to get into the right place now.

146
00:10:17.030 --> 00:10:18.200
Truly amazing.

147
00:10:18.230 --> 00:10:23.990
Another important fact you need to know and understand is that blocks can communicate one with each

148
00:10:23.990 --> 00:10:24.440
other.

149
00:10:24.540 --> 00:10:25.800
You can do this too.

150
00:10:25.850 --> 00:10:27.320
This is really important.

151
00:10:27.350 --> 00:10:33.680
So let's say we have our previous Twitter block and we also have an Internet block which emits states

152
00:10:33.680 --> 00:10:37.350
based on whether there is a stable Internet connection or not.

153
00:10:37.370 --> 00:10:42.380
Supposedly your Internet connection dies when you want to know the weather from your location.

154
00:10:42.410 --> 00:10:47.960
Inside the weather block, you can depend on the Internet block and subscribe to its stream of emitted

155
00:10:47.960 --> 00:10:52.710
states, then react on every Internet state emitted by the Internet.

156
00:10:53.090 --> 00:10:59.480
So in this case, the Internet block would have emitted a no Internet state down the stream.

157
00:10:59.480 --> 00:11:05.150
The weather block will listen to the stream and will eventually receive the no internet state.

158
00:11:05.150 --> 00:11:11.240
The weather blog can also emit a state in response to this Internet state, letting the user know that

159
00:11:11.240 --> 00:11:12.920
there is no Internet connection.

160
00:11:12.950 --> 00:11:18.330
Don't forget that a subscription to the Block needs to be closed manually by overriding the closed method.

161
00:11:18.470 --> 00:11:21.770
We don't want any stream leaks inside our app.

162
00:11:21.990 --> 00:11:27.020
We have arrived at our final layer of the block architecture, the presentation layer.

163
00:11:27.200 --> 00:11:33.950
This layer sums up everything related to the user interface, the widgets, the user inputs, the lifecycle

164
00:11:33.950 --> 00:11:36.860
events, animations and so on and so forth.

165
00:11:37.280 --> 00:11:45.860
And also its responsibility in our case is to figure out how to render itself based on one or more block

166
00:11:45.860 --> 00:11:46.370
states.

167
00:11:46.370 --> 00:11:53.030
Most application flows will start with perhaps an abstract event, which triggers the application to

168
00:11:53.030 --> 00:11:54.960
fetch some data from the data layer.

169
00:11:54.980 --> 00:12:01.130
For example, when the first screen of the app will be created inside constructor, there will be another

170
00:12:01.130 --> 00:12:07.070
block which adds the app started event so that some location based weather will be displayed on the

171
00:12:07.070 --> 00:12:08.180
screen right away.

172
00:12:08.210 --> 00:12:14.210
Here's a quick tip on how you can structure a project and folders in order to abate its architecture.

173
00:12:14.220 --> 00:12:20.270
So the rule is that for every layer and even some layer I introduce today, you need to have a separate

174
00:12:20.270 --> 00:12:21.900
folder inside the liberal.

175
00:12:22.130 --> 00:12:29.270
So in a series complete application, you may have three folders data, business, logic and presentation.

176
00:12:29.270 --> 00:12:36.050
Inside the data layer, you might have multiples of folders like models, data providers and repositories

177
00:12:36.050 --> 00:12:37.970
inside of the business logic folder.

178
00:12:37.970 --> 00:12:40.400
You might have blocks and two bits of folders.

179
00:12:40.400 --> 00:12:46.940
And finally, inside the presentation layer, you might have multiple folders like widgets, pages,

180
00:12:46.940 --> 00:12:49.220
animations and so on and so forth.

181
00:12:49.340 --> 00:12:53.930
You can name these folders, whatever you want, as long as you stick to the architecture.

182
00:12:53.960 --> 00:13:00.290
OK, let's proceed to the entire block architecture workflow for a basic weather application.

183
00:13:00.410 --> 00:13:05.120
We currently have only one screen and a single text input inside.

184
00:13:05.120 --> 00:13:09.980
Let's say, for example, that the user wants to know the current weather for Chicago.

185
00:13:10.010 --> 00:13:13.570
He types in Chicago and then hits the get weather button.

186
00:13:13.580 --> 00:13:17.350
Currently, everything is happening inside the presentation layer.

187
00:13:17.480 --> 00:13:23.930
Now, when the user press the get weather button, a get weather event was dispatched to the weather

188
00:13:23.930 --> 00:13:24.380
blog.

189
00:13:24.380 --> 00:13:30.620
Whether a block knows that, first of all, it should emit a loading state to the user to let him know

190
00:13:30.620 --> 00:13:36.170
that it is working on his request by displaying a loading animation on the screen.

191
00:13:36.290 --> 00:13:42.260
Then inside the weather block, there is a dependency on the weather provider which can be accessed

192
00:13:42.260 --> 00:13:47.330
and with the help of which the get weather for a location will be called asynchronously.

193
00:13:47.330 --> 00:13:52.940
We call it asynchronously because we don't know when the data is going to come back, so we'll have

194
00:13:52.940 --> 00:13:53.750
to wait for it.

195
00:13:53.750 --> 00:13:59.990
Now, inside the weather repository, there is a dependency for the weather API data provider, with

196
00:13:59.990 --> 00:14:04.570
the help of which will call the get raw weather for location of Chicago.

197
00:14:04.580 --> 00:14:08.870
Here is where the connection with the outer dark parts of the Internet occurs.

198
00:14:08.870 --> 00:14:12.290
Inside of this gets real weather for location function.

199
00:14:12.290 --> 00:14:19.160
There will be an update request towards another API like AQ weather, which will receive the request

200
00:14:19.160 --> 00:14:26.300
and then send back adjacent string full of requested data backed or whether API inside a data provider

201
00:14:26.300 --> 00:14:28.190
layer if everything is OK.

202
00:14:28.370 --> 00:14:34.370
The raw weather data, which is actually adjacent string, will be sent back to the weather repository

203
00:14:34.370 --> 00:14:37.240
where it will be passed into a weather model.

204
00:14:37.250 --> 00:14:41.420
Then finally, the weather model will get passed back into the block.

205
00:14:41.570 --> 00:14:48.500
The block is really happy that everything went smooth and meets a new state cold weather load in which

206
00:14:48.500 --> 00:14:53.930
it will send the weather model object as an attribute towards the presentation layer.

207
00:14:53.960 --> 00:14:59.390
The presentation layer with the help of block builder will exit the loading state since the new.

208
00:14:59.560 --> 00:15:07.210
It has been received and rebuild the UI with the new weather data marking the end of this entire workflow.

209
00:15:07.240 --> 00:15:12.910
I hope you have understood how important it is to have a well-designed architecture in place ready to

210
00:15:12.910 --> 00:15:16.000
organize code and skill killer application over time.

211
00:15:16.070 --> 00:15:21.010
Unfortunately, having a strong architecture doesn't mean that your application will be shockproof.

212
00:15:21.010 --> 00:15:24.490
Bugs and errors may arise at the slightest scale refactoring.

213
00:15:24.760 --> 00:15:30.380
So it's important to have a strong testing method in order to make sure our app is as stable as possible.

214
00:15:30.820 --> 00:15:34.000
That is what we're going to cover up in the next chapter of this course.

215
00:15:34.030 --> 00:15:36.270
We're going to talk about block testing.

216
00:15:36.430 --> 00:15:40.810
With that being said, I'm looking forward to seeing each and every one of you up next.

217
00:15:41.080 --> 00:15:43.240
Stay tuned and let's get wicked.

