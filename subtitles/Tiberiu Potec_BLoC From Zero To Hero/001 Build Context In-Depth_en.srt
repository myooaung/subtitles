1
00:00:00,150 --> 00:00:01,859
Hey, what is going on, everyone?

2
00:00:02,190 --> 00:00:04,320
Welcome back to chapter number eight.

3
00:00:04,320 --> 00:00:10,320
In this chapter, I will take even deeper into the concept of the context, talking about how it works

4
00:00:10,320 --> 00:00:16,620
inside flutter and therefore how it is used by the Block library to provide different blocks or cubits

5
00:00:16,830 --> 00:00:18,120
across the widget.

6
00:00:18,450 --> 00:00:20,610
This is a really, really important tutorial.

7
00:00:20,610 --> 00:00:22,240
So make sure you don't skip it.

8
00:00:22,470 --> 00:00:28,290
We will be going to tackle up different scenarios to see how build context can cause the unwanted block

9
00:00:28,290 --> 00:00:33,490
provided a lot of ways to find the context containing a specific block or cubitt error.

10
00:00:33,510 --> 00:00:39,480
So if you encounter this issue too often, it's a great idea to watch this tutorial in depth.

11
00:00:39,730 --> 00:00:44,520
Remember from my third story of the series regarding floatable block concepts, when I told you that

12
00:00:44,520 --> 00:00:50,340
everything in Flutter is mainly a widget and that flutter uses what's called a widget tree in order

13
00:00:50,340 --> 00:00:55,710
to organize and structure the widgets you want to set up and use inside your application.

14
00:00:55,920 --> 00:00:58,840
But how is this widget restructured at the end?

15
00:00:59,040 --> 00:01:02,610
What links everything into place in a perfect Armony?

16
00:01:02,700 --> 00:01:05,280
You guessed it the build context.

17
00:01:05,670 --> 00:01:13,350
So the build context is somehow a tool which helps handle the location of a widget inside the widget

18
00:01:13,350 --> 00:01:13,620
tree.

19
00:01:13,890 --> 00:01:19,160
So you may ask ourselves, well, that means every widget is built within a context, right?

20
00:01:19,350 --> 00:01:20,670
Absolutely correct.

21
00:01:20,940 --> 00:01:26,760
In fact, every widget has a build function of function, which gets called whenever the widget is being

22
00:01:26,760 --> 00:01:28,230
built in your application.

23
00:01:28,470 --> 00:01:35,610
Inside that builder function, you will often see a build context e as best that lets flutter know where

24
00:01:35,610 --> 00:01:37,920
the widget will sit inside the widget.

25
00:01:38,310 --> 00:01:42,660
You must know that not all widgets have a user accessible context.

26
00:01:42,660 --> 00:01:50,370
By default, for example, a text widget will be built within a context, but that context will be anonymous

27
00:01:50,370 --> 00:01:51,150
by default.

28
00:01:51,360 --> 00:01:57,210
On the other hand, when you're creating a block provider or whenever you're building a new screen inside

29
00:01:57,210 --> 00:02:03,000
the build function parameters, you will see that there is a build context eason's that you can use

30
00:02:03,000 --> 00:02:06,660
later on in order to access the context inside your page.

31
00:02:06,840 --> 00:02:09,990
To better visualize how context actually works.

32
00:02:09,990 --> 00:02:14,100
Will watch how the widget three of our current app is created.

33
00:02:14,100 --> 00:02:20,820
Widget by widget to App Code Base will be using is the counter app from my last tutorial regarding block

34
00:02:20,820 --> 00:02:22,100
to block communication.

35
00:02:22,110 --> 00:02:25,350
You can find the source code for that in the video's description.

36
00:02:25,590 --> 00:02:30,410
Let's start with the beginning of every application must start at the point in flutter.

37
00:02:30,450 --> 00:02:36,890
This point is actually the required main function from inside the main that dart file, the run app

38
00:02:36,900 --> 00:02:39,840
method inside will start building the app.

39
00:02:39,840 --> 00:02:41,760
Therefore, our widget tree.

40
00:02:42,000 --> 00:02:49,140
Every tree must always have a root node, a node where everything starts and develops from there for

41
00:02:49,140 --> 00:02:52,530
every widget, tree must always have a root widget.

42
00:02:52,530 --> 00:02:58,920
In our case, the root widget is actually the first widget created more specifically the My App Widget.

43
00:02:58,920 --> 00:03:05,220
As I previously said, since every flutter widget is built within a built context, the map widget will

44
00:03:05,220 --> 00:03:07,760
also be built within a build context.

45
00:03:07,800 --> 00:03:13,710
Now, please be a little bit more attention because I'll tell you the relationship between different

46
00:03:13,710 --> 00:03:14,760
build context.

47
00:03:14,760 --> 00:03:20,820
I'm going to tell you three completely wrong assumptions you might make during the development of your

48
00:03:20,820 --> 00:03:21,090
app.

49
00:03:21,090 --> 00:03:23,560
Firstly, you might be tempted to say this.

50
00:03:23,640 --> 00:03:27,360
All this build context instances have the same name.

51
00:03:27,390 --> 00:03:31,730
Then that means we're talking of the same build context over and over again.

52
00:03:31,830 --> 00:03:37,920
Secondly, you might be tempted to say that since there is no build context instance mentioned as a

53
00:03:37,920 --> 00:03:42,900
parameter to a widget, then the widget isn't built within a build context.

54
00:03:42,930 --> 00:03:49,650
Last but not least, you might be tempted to think that the context in which the next widget will be

55
00:03:49,650 --> 00:03:53,100
built won't be related at all to the previous context.

56
00:03:53,100 --> 00:03:53,990
Inside the widget.

57
00:03:53,990 --> 00:03:54,240
Three.

58
00:03:54,420 --> 00:03:59,940
All of these assumptions are terribly wrong and let me explain why in detail.

59
00:04:00,090 --> 00:04:02,310
We'll start with the first wrong assumption.

60
00:04:02,520 --> 00:04:09,270
Even though the names of the build context instances are the same here and here and here, this doesn't

61
00:04:09,270 --> 00:04:11,840
mean they're identical by any means.

62
00:04:12,030 --> 00:04:17,519
This context is completely different from this one and completely different from this one.

63
00:04:17,790 --> 00:04:19,380
This is crucial to understand.

64
00:04:19,410 --> 00:04:27,060
Context in this case is just a name for a build context, for instance, which is best as an argument

65
00:04:27,060 --> 00:04:28,350
to different functions.

66
00:04:28,350 --> 00:04:32,490
It's like having three different functions, both having the same name arguments.

67
00:04:32,490 --> 00:04:39,270
But when called the past arguments, values will be different, even though the arguments are named

68
00:04:39,300 --> 00:04:39,840
the same.

69
00:04:40,170 --> 00:04:46,620
In this situation, when there is a built context, context, for instance, task to a builder function,

70
00:04:46,860 --> 00:04:53,010
you need to start imagining the name context as being the build context in which the current widget

71
00:04:53,010 --> 00:04:54,450
is being created.

72
00:04:54,450 --> 00:04:59,640
Therefore, in order to make things even more understandable for learning purposes, I'll rename.

73
00:04:59,750 --> 00:05:05,850
This context, the following, the context in which the MIT, which is billed, will be called by up

74
00:05:05,870 --> 00:05:11,750
context, the context in which the block provider of type enter and Cubitt widget will be created will

75
00:05:11,750 --> 00:05:13,900
be called Internet Cubitt context.

76
00:05:13,910 --> 00:05:19,640
And finally, the context in which the block provider of type counter cubitt widget will be created

77
00:05:19,910 --> 00:05:22,400
will be called counter cubitt context.

78
00:05:22,400 --> 00:05:26,930
I rename them this way so that you will see better that they are completely different.

79
00:05:26,930 --> 00:05:32,660
When you fully understand this, you will find it easier to name all of them context since you'll know

80
00:05:32,660 --> 00:05:35,040
which context goes where immediately.

81
00:05:35,300 --> 00:05:39,890
Now that we figured out the first wrong assumption, let's move to the second one.

82
00:05:39,980 --> 00:05:46,400
As I told you before, every widget inside flutter has a build function which will require a build context

83
00:05:46,410 --> 00:05:52,280
instance in order for it to be built and most importantly, placed correctly inside the widget.

84
00:05:52,730 --> 00:05:59,200
So if you are seeing the material up here alone, this doesn't mean it was built without any context.

85
00:05:59,210 --> 00:06:05,600
It has an anonymous built context, but it's still a build context like every other widget, and will

86
00:06:05,600 --> 00:06:07,880
be placed correctly inside the widget.

87
00:06:08,150 --> 00:06:13,760
Finally, to discuss the last wrong assumption regarding the relationship between build contexts, you

88
00:06:13,760 --> 00:06:21,930
need to know that the build context of a widget keeps track only of its direct parent and nothing else.

89
00:06:21,980 --> 00:06:29,510
So in our case, our widget build within its next context only knows that its parent is the widget built

90
00:06:29,510 --> 00:06:32,490
on the previous context and nothing else.

91
00:06:32,660 --> 00:06:40,700
So to sum up, the relationship between build context is a bottom up relationship because the only way

92
00:06:40,700 --> 00:06:48,020
to know what's at the top of the tree is to start from a bottom child and work your way up asking at

93
00:06:48,020 --> 00:06:51,290
each step for every parent that is above.

94
00:06:51,560 --> 00:06:56,930
Until you reach the top build context only cares about its parent context.

95
00:06:57,170 --> 00:07:00,960
It won't record any information about its child or children.

96
00:07:01,460 --> 00:07:07,040
This is crucial to understand because this way you will know that the only way to move inside the widget

97
00:07:07,040 --> 00:07:11,990
tree is by choosing a context and then navigating up from there.

98
00:07:12,200 --> 00:07:14,480
The only way is up.

99
00:07:14,720 --> 00:07:18,110
No left, no right, no down, just up.

100
00:07:18,350 --> 00:07:19,510
This is the only way.

101
00:07:19,520 --> 00:07:22,040
Build context, navigate between each other.

102
00:07:22,160 --> 00:07:23,900
Coming back to our widget tree.

103
00:07:23,900 --> 00:07:29,780
Every time you see the build function, returning a widget, that widget is going to be a child of your

104
00:07:29,780 --> 00:07:30,640
current widget.

105
00:07:30,650 --> 00:07:36,110
In our case, the my returns in its build function a Mutai block provider.

106
00:07:36,110 --> 00:07:40,790
So this widget is going to be built in a new context, this time anonymous.

107
00:07:40,790 --> 00:07:47,120
Therefore, the multiple provider widget will be the child of the app widget inside the widget tree.

108
00:07:47,480 --> 00:07:52,370
Now to continue, we need to understand what multiple provider really does.

109
00:07:52,610 --> 00:07:58,310
Remember for my third flutter block concept tutorial, when I talked about multiple provider, I mentioned

110
00:07:58,310 --> 00:08:04,520
that this widget was built to facilitate providing multiple blocks or kibbitz so that instead of nesting

111
00:08:04,520 --> 00:08:11,330
them one inside another, you can create a list and mention them inside it to understand that behind

112
00:08:11,330 --> 00:08:16,610
the scenes, multiple provider will be still nesting each block provider from the list.

113
00:08:16,820 --> 00:08:22,400
Multiple provider is just a way of making the code look more readable and organized.

114
00:08:22,490 --> 00:08:27,680
So having this in mind, we can deduce that the provider of type Internet cubitt is going to be the

115
00:08:27,680 --> 00:08:29,380
next widget in our widget.

116
00:08:29,630 --> 00:08:33,289
We did own Internet covid context bill context.

117
00:08:33,289 --> 00:08:39,950
Then in a new countercoup context bill context, another child will be linked to our widget tree, the

118
00:08:39,950 --> 00:08:43,039
block provider of type counter cubitt.

119
00:08:43,220 --> 00:08:49,970
Let's continue for whenever you see a child parameter, the widget test will be a child of their current

120
00:08:49,970 --> 00:08:50,480
widget.

121
00:08:50,480 --> 00:08:52,250
So material up goes.

122
00:08:52,250 --> 00:08:59,360
Up next, inside the widget of our app, be aware that team data glass is not a widget since it does

123
00:08:59,360 --> 00:09:01,610
not extend any type of widget glass.

124
00:09:01,610 --> 00:09:05,280
So we won't take it into consideration inside our widget tree.

125
00:09:05,420 --> 00:09:10,820
In my six tutorial from the series regarding block access and navigation, one of the resulting options

126
00:09:10,820 --> 00:09:13,550
we tackled was a generated routing.

127
00:09:13,550 --> 00:09:19,880
So by default, our application will pushing the default home route into the navigation stack, which

128
00:09:19,880 --> 00:09:21,410
is linked to our home screen.

129
00:09:21,950 --> 00:09:27,230
Therefore, the next widget inside our widget tree is going to be the home screen widget again.

130
00:09:27,230 --> 00:09:34,070
This widget comes with a built method and the new context which will call home screen context for learning

131
00:09:34,070 --> 00:09:34,730
purposes.

132
00:09:34,970 --> 00:09:39,890
The return widget is the Block Lisner, which will be placed right out the registry.

133
00:09:39,890 --> 00:09:41,450
As we have previously done.

134
00:09:41,600 --> 00:09:45,770
It's build context will be called Internet Cubitt listener context.

135
00:09:45,770 --> 00:09:49,690
The Block listener also comes with a child parameter the scaffold.

136
00:09:49,700 --> 00:09:53,130
So this will be the next widget inside our widget tree.

137
00:09:53,210 --> 00:09:55,760
Now please be a little bit more attention.

138
00:09:55,970 --> 00:09:59,000
As you can see the scaffold in our case.

139
00:09:59,380 --> 00:10:07,300
Receives two widget parameters, the Apapa widget inside the abar parameter and the central widget inside

140
00:10:07,300 --> 00:10:12,730
the body parameter, when you see this kind of scenario with multiple parameters filled with different

141
00:10:12,730 --> 00:10:18,650
widgets inside the same widget, you need to know that these will be children of the same parent widget.

142
00:10:18,670 --> 00:10:23,560
So in our case, we have two widgets building from the scaffold widget.

143
00:10:23,590 --> 00:10:30,100
One will be the Abre child widget and the other one the center child widget will need to see for each

144
00:10:30,100 --> 00:10:33,060
of these two widgets, which are their children.

145
00:10:33,070 --> 00:10:37,630
In the case of the Apple widget, there is only one child, the text widget.

146
00:10:37,630 --> 00:10:43,320
On the other hand, the center widget has a column widget child with multiple children.

147
00:10:43,510 --> 00:10:47,470
Those will be again direct children of the column widget.

148
00:10:47,470 --> 00:10:50,430
So they'll be on the same level inside the widget.

149
00:10:50,770 --> 00:10:57,910
Let's write them one by one, the block builder, the divider, the block consumer, the material button

150
00:10:58,030 --> 00:11:00,430
and again, the other material button.

151
00:11:00,640 --> 00:11:05,950
The block builder returns text widgets within a new counter cubitt builder context.

152
00:11:05,950 --> 00:11:11,020
Depending on which state is receiving block, consumer is almost the same scenario.

153
00:11:11,020 --> 00:11:15,290
It will return the counter text widget within similar naming style context.

154
00:11:15,400 --> 00:11:20,940
Now, please pay more attention to what I'm going to introduce right now inside the material button.

155
00:11:21,070 --> 00:11:26,950
You might remember from my tutorial regarding block routing and navigation that we have an unpressed

156
00:11:26,950 --> 00:11:33,880
function from where we're calling navigator that ov push named to push a new screen inside the navigation

157
00:11:33,880 --> 00:11:34,310
stack.

158
00:11:34,330 --> 00:11:41,920
This is the moment when you will finally encounter why it is crucial to understand how context works

159
00:11:41,920 --> 00:11:42,940
inside flutter.

160
00:11:43,090 --> 00:11:48,220
You might think that this line of code is simply a default way of navigating inside flutter.

161
00:11:48,220 --> 00:11:49,990
Well, it's not like that.

162
00:11:50,110 --> 00:11:52,380
Let me translate to you, Navigator.

163
00:11:52,390 --> 00:12:00,190
That of context that Bush named is equal to search for the closest navigator widget inside the widget

164
00:12:00,190 --> 00:12:02,260
tree starting from the past.

165
00:12:02,260 --> 00:12:09,310
Build context instance and then add to the navigator widget is found at the new screen widget as a child

166
00:12:09,310 --> 00:12:10,660
of the navigator widget.

167
00:12:10,660 --> 00:12:11,980
So let's take this easily.

168
00:12:11,980 --> 00:12:17,140
One piece at a time search for the closest navigator widget inside the widget tree.

169
00:12:17,290 --> 00:12:24,250
This means Flutter is going to do a lookup after the closest navigation widget starting from the past

170
00:12:24,250 --> 00:12:25,930
build context instance.

171
00:12:25,930 --> 00:12:28,210
As you can see, there is a built context.

172
00:12:28,210 --> 00:12:31,350
Easton's past inside of Navigator State.

173
00:12:31,450 --> 00:12:36,640
This is done to indicate flutter from which exact context inside the widget read.

174
00:12:36,820 --> 00:12:38,530
The lookup should start.

175
00:12:38,530 --> 00:12:44,200
As I told you before, in order to find a specific widget in the widget tree, you need to choose a

176
00:12:44,200 --> 00:12:50,730
starting context and then proceed upwards parent by parent until you find it.

177
00:12:50,740 --> 00:12:56,500
So in our case, Futter will start searching for a navigator widget right from the provided bill context

178
00:12:56,510 --> 00:13:01,570
instance, which in our case should be the context of the material button widget.

179
00:13:01,570 --> 00:13:08,110
The thing is that since the material button is built within an anonymous context, we can't access it.

180
00:13:08,140 --> 00:13:12,160
So we cannot mention it inside the navigator, that of line of code.

181
00:13:12,160 --> 00:13:17,770
But can we transform an anonymous context of a widget into a normal, accessible one?

182
00:13:17,800 --> 00:13:18,790
Yes, we can.

183
00:13:18,790 --> 00:13:23,020
And this is done by wrapping the widget inside a building widget.

184
00:13:23,020 --> 00:13:29,530
The Builder widget was created to be able to specify a built context insert name in which a widget should

185
00:13:29,530 --> 00:13:30,100
be built.

186
00:13:30,100 --> 00:13:36,730
So in our case, all we need to do is wrap the material button inside the builder widget and specify

187
00:13:36,730 --> 00:13:42,940
the name of material button context for the bill context instance in which the widget should be created.

188
00:13:42,940 --> 00:13:49,810
Now we can pass the material button context to the navigator, that old line of code for the second

189
00:13:49,810 --> 00:13:55,690
scenario, when we want to start searching for the navigator widget from inside, the context of the

190
00:13:55,690 --> 00:14:01,480
home screen will need to pass the homescreen context instance to the navigator, that of line of code.

191
00:14:01,600 --> 00:14:03,610
So we'll have two scenarios to test.

192
00:14:04,030 --> 00:14:09,670
One starting from the context of material button widget and the other one starting from the context

193
00:14:09,670 --> 00:14:10,930
of the homescreen widget.

194
00:14:10,990 --> 00:14:14,380
OK, so let's simulate how Flutter works with both scenarios.

195
00:14:14,380 --> 00:14:20,230
In the first scenario, we want to push the second screen onto the navigation stack right after the

196
00:14:20,230 --> 00:14:23,180
navigator widget is found inside the widget.

197
00:14:23,470 --> 00:14:29,320
We're starting to look up from the context in which the material button was created, which is the material

198
00:14:29,320 --> 00:14:34,420
button context, and then Flutter will ask for the parent widget of it.

199
00:14:34,420 --> 00:14:40,540
It will go right to the column widget, then to center scaffold and block Lisner Widgets.

200
00:14:40,750 --> 00:14:45,520
Finally, Flutter will search inside the homescreen context for the Navigator widget.

201
00:14:45,670 --> 00:14:51,490
None was found there, so it moves again to the parent widget of the home screen widget, which is the

202
00:14:51,490 --> 00:14:52,750
material app widget.

203
00:14:53,050 --> 00:14:58,000
Even though there is no the Navigator widget inside our material app widget.

204
00:14:58,360 --> 00:14:59,260
You need to know that.

205
00:14:59,320 --> 00:15:03,250
Material app has it inside its core functionality.

206
00:15:03,430 --> 00:15:05,770
This is where the Navigator feature starts.

207
00:15:05,830 --> 00:15:12,220
So if you are always wondering why the material app widget contains all the parameters for setting up

208
00:15:12,220 --> 00:15:15,390
the preferred routing option, well, now you know why?

209
00:15:15,520 --> 00:15:21,280
Because it contains the Navigator Widget core, which manages the navigation feature of your app.

210
00:15:21,610 --> 00:15:26,260
OK, so right now Flutter found the navigator widget it was looking for.

211
00:15:26,410 --> 00:15:30,360
Now it's time for a navigator to pull the second screen onto the stack.

212
00:15:30,370 --> 00:15:36,220
But remember, it will push it from the context of the navigator widget and that's the context of the

213
00:15:36,220 --> 00:15:37,180
material app.

214
00:15:37,270 --> 00:15:42,690
So the new second screen widget will be placed as a child of the material app widget.

215
00:15:42,790 --> 00:15:49,420
So the new mediatory following our previous rules will transform into this node that if you click the

216
00:15:49,420 --> 00:15:56,170
big button, the second screen widget will pop from the navigation stack and will no longer exist inside

217
00:15:56,170 --> 00:15:56,680
the widget.

218
00:15:57,010 --> 00:16:00,530
In the second scenario, the same procedure applies inside flutter.

219
00:16:00,910 --> 00:16:06,370
The only difference being that the lookup starts from the home screen context instead of the material

220
00:16:06,370 --> 00:16:12,700
button context, and that instead of building the second screen as a child of the material app will

221
00:16:12,700 --> 00:16:14,140
build the third screen.

222
00:16:14,320 --> 00:16:20,490
You need to understand that the translation of the navigator, that of context, line of code works.

223
00:16:20,500 --> 00:16:27,970
Also, when you're writing block provider, that of context team, that of context, scaffolded not

224
00:16:27,970 --> 00:16:32,260
of context or any similar sequences, therefore block provider.

225
00:16:32,260 --> 00:16:38,500
That of context means that will search for a specific provided instance of a block or cubitt inside

226
00:16:38,500 --> 00:16:44,770
the widget, restarting from the provided context since there might be multiple providea blocks or kibbitz.

227
00:16:44,780 --> 00:16:48,640
That's why we're mentioning the type of ID between angle brackets.

228
00:16:48,670 --> 00:16:54,340
I hope you understood how context work and interact with each other overall.

229
00:16:54,340 --> 00:17:00,520
If you have ever wondered why wrapping the material up with block providers cards, the blocks are kubis

230
00:17:00,520 --> 00:17:03,310
to be provided globally to the entire widget tree.

231
00:17:03,460 --> 00:17:04,510
Now you know why?

232
00:17:04,540 --> 00:17:10,900
It's because all the screen widgets from inside your app will be children of the material app widget,

233
00:17:10,900 --> 00:17:16,540
therefore creating and providing them before the context in which the material app is created, which,

234
00:17:16,540 --> 00:17:17,589
by the way, contains.

235
00:17:17,589 --> 00:17:23,710
Also the navigator widget means that whenever a new screen is Bouchet searching for the Block or Cubitt

236
00:17:23,710 --> 00:17:29,740
unique instance by calling block provider out of context from the context of that screen, we'll go

237
00:17:29,740 --> 00:17:34,280
and search for the instance until it finds it above the material app widget.

238
00:17:34,300 --> 00:17:40,390
That's also why if we wrap the homescreen widget inside the block provider and then we push a new screen

239
00:17:40,390 --> 00:17:45,220
widget, which is going to be a child of the material app, you won't be able to access the block or

240
00:17:45,220 --> 00:17:51,910
Cubitt instance provided from the home screen inside that new screen widget y because this is the nature

241
00:17:51,910 --> 00:17:53,770
of how context works.

242
00:17:53,770 --> 00:17:59,770
Searching for a cubit or block and started from the context of the new screen widget will drive flutter

243
00:17:59,770 --> 00:18:02,740
to the material seized as the parent of the new stream.

244
00:18:02,890 --> 00:18:05,680
Then Flutter will go to my approved widget.

245
00:18:05,680 --> 00:18:10,840
And since it wasn't able to find any instance of the block or cube down the road, it will throw the

246
00:18:10,840 --> 00:18:17,170
well known area of block provider that fails to find the context containing the specific block or cubitt.

247
00:18:17,330 --> 00:18:24,010
Another thing you need to understand is that you cannot access a block or cubitt instance from the same

248
00:18:24,010 --> 00:18:26,400
context in which it was provided.

249
00:18:26,410 --> 00:18:34,210
So you must ensure block provider that is called Within a Child Bill context to analyze the series in

250
00:18:34,210 --> 00:18:35,080
more detail.

251
00:18:35,200 --> 00:18:38,040
Here's three examples you need to understand.

252
00:18:38,050 --> 00:18:40,960
So first example, this code for a bit.

253
00:18:40,960 --> 00:18:43,230
And let's apply what we learned so far.

254
00:18:43,360 --> 00:18:47,590
Can you access the unique instance of Block AI in this specific case?

255
00:18:47,770 --> 00:18:52,780
Pause the video for a moment and think of it, then come back for the full explanation.

256
00:18:52,810 --> 00:19:00,010
OK, so the answer to this example is yes, you can access the unique instance of block AI by using

257
00:19:00,010 --> 00:19:03,230
block provider of block AI of context.

258
00:19:03,460 --> 00:19:09,550
Now let me explain to you why the first widget is built in a context built context.

259
00:19:09,700 --> 00:19:11,110
Then it's child.

260
00:19:11,110 --> 00:19:15,540
The block provider is built in an anonymous context right below it.

261
00:19:15,550 --> 00:19:21,430
Bear in mind, whenever you see an underscore past as a parameter to a function, it translates to it

262
00:19:21,430 --> 00:19:25,730
doesn't matter which parameter it's passed there, we don't care about its name.

263
00:19:25,780 --> 00:19:31,240
So in our case, we don't actually care about the name of the context in which Block AI is created.

264
00:19:31,240 --> 00:19:37,160
Then we have a child called My Child, which is also built in a context context.

265
00:19:37,180 --> 00:19:42,530
Remember that even though these build functions have the same parameter names, they're not the same.

266
00:19:42,670 --> 00:19:46,510
This is a completely separate context from the context above.

267
00:19:46,510 --> 00:19:52,810
We also have a race button built with its own anonymous context at the end of the widget tree in which

268
00:19:52,810 --> 00:19:57,700
we're asking Flutter to find us the first block provider of type block AI.

269
00:19:57,760 --> 00:19:59,050
So the context for.

270
00:19:59,160 --> 00:20:04,890
Which will start searching east, as you can see, the context of my child, which it will start going

271
00:20:04,890 --> 00:20:10,290
up from there and voila, my parent is actually what we were searching for.

272
00:20:10,620 --> 00:20:16,950
The block provider of Block A, which contains the block, a unique instance, success.

273
00:20:16,950 --> 00:20:18,630
Let's move to the second example.

274
00:20:18,990 --> 00:20:20,610
Here's the code again.

275
00:20:20,610 --> 00:20:26,770
I want you to take a look and think whether the unique instance of Block eight is accessible or not.

276
00:20:27,180 --> 00:20:28,350
So what do you see?

277
00:20:28,620 --> 00:20:32,550
If you think the Block A is accessible there, you are wrong.

278
00:20:32,970 --> 00:20:39,330
And let's investigate why we have a widget built in a context Bill context at the top.

279
00:20:39,930 --> 00:20:47,250
Then right below it, a block provider will create the block a into an anonymous context.

280
00:20:47,670 --> 00:20:50,790
The race button will also be built as a child.

281
00:20:51,000 --> 00:20:57,540
Within an anonymous context, we're asking Flutter to find the closest block provider of type block

282
00:20:57,540 --> 00:21:00,540
a starting with the best context.

283
00:21:00,630 --> 00:21:05,970
If you pay attention, the best context is actually the one in which the top widget was built.

284
00:21:06,150 --> 00:21:11,110
Since the other created widgets have anonymous context, which we cannot access.

285
00:21:11,370 --> 00:21:18,660
So in this case, a flutter won't be able to find the block provider of type block A, therefore throwing

286
00:21:18,660 --> 00:21:24,200
the well known error of block provider that of fails to find a block or cubitt.

287
00:21:24,360 --> 00:21:30,420
So do you think there is a way on how we could adapt this specific example in order to make it work?

288
00:21:30,600 --> 00:21:32,430
The widget tree looks rather good.

289
00:21:32,430 --> 00:21:37,920
If we only had an accessible context in order to start to look up from there, we can now start to look

290
00:21:37,920 --> 00:21:39,240
up from this context.

291
00:21:39,240 --> 00:21:44,640
And since the block provider is actually above this context, we know for sure that the unique instance

292
00:21:44,640 --> 00:21:46,670
of the Block A is accessible.

293
00:21:46,890 --> 00:21:52,560
This was the example number three, and I hope you understood why knowing how Bill context works is

294
00:21:52,560 --> 00:21:53,220
crucial.

295
00:21:53,250 --> 00:21:56,190
We're almost at the end of this important tutorial.

296
00:21:56,190 --> 00:22:02,070
What's left for now is for me to tell you a trick on how you can easily visualize the widget tree of

297
00:22:02,070 --> 00:22:05,620
your app without having to manually write it down every time.

298
00:22:05,640 --> 00:22:11,640
So first of all, inside this code, you need to build and run your application, then heat control,

299
00:22:11,640 --> 00:22:16,820
shift P and search for the tools, then open it in a new browser tab.

300
00:22:16,830 --> 00:22:22,500
If you go to flutter, Inspector, you can notice the entire widget tree which is currently built inside

301
00:22:22,500 --> 00:22:22,920
your app.

302
00:22:22,920 --> 00:22:26,850
As you can see, it's actually the same widget tree we manually built.

303
00:22:26,970 --> 00:22:27,950
How convenient.

304
00:22:27,960 --> 00:22:33,930
So whenever you have doubts in which context a specific widget is built, you can now double check it

305
00:22:33,930 --> 00:22:34,410
inside.

306
00:22:34,440 --> 00:22:35,440
Flutter Inspector.

307
00:22:35,580 --> 00:22:40,710
This was definitely a long but really, really, really important tutorial.

308
00:22:40,740 --> 00:22:43,980
Bill context is actually one of the key concepts of flutter.

309
00:22:44,070 --> 00:22:49,500
So understanding how it works underneath will win you big time in the long run.

310
00:22:49,710 --> 00:22:53,970
We have successfully covered about two thirds of this amazing blog.

311
00:22:54,070 --> 00:22:55,770
First, congratulations.

312
00:22:55,770 --> 00:23:00,730
In the next chapter you'll learn what are the new additions of Flutter Block Version six point one point

313
00:23:00,780 --> 00:23:01,170
zero.

314
00:23:01,170 --> 00:23:03,540
It's a really nice update, so make sure to check it out.

315
00:23:03,600 --> 00:23:07,980
With that being said, I'm looking forward to seeing each and every one of you in the next chapter.

316
00:23:07,980 --> 00:23:09,870
Stay tuned and let's get wicked.

