1
00:00:00,120 --> 00:00:01,990
What is going on, everyone?

2
00:00:02,009 --> 00:00:02,760
I'm wicked.

3
00:00:02,760 --> 00:00:08,730
And today I'm going to show you how easy it is to maintain the state of your block build application

4
00:00:08,730 --> 00:00:10,550
with dehydrated block package.

5
00:00:10,560 --> 00:00:16,650
This is a topic that is often omitted, but to be honest, I think it's one of the most important pillars

6
00:00:16,650 --> 00:00:18,360
of a flutter application.

7
00:00:18,360 --> 00:00:24,030
By default, every application you'll build inside Flutter won't be able to maintain its state after

8
00:00:24,030 --> 00:00:24,770
rebooting.

9
00:00:24,780 --> 00:00:28,230
As an example, we'll take a look at our current counter app.

10
00:00:28,230 --> 00:00:34,050
If we increment the counter to five and then hit the restart button, the state of the application will

11
00:00:34,050 --> 00:00:36,330
revert back to its initial state.

12
00:00:36,330 --> 00:00:42,270
So in order to avoid this, we'll need to somehow store the entire state of our application so that

13
00:00:42,270 --> 00:00:47,040
whenever the application reboots, it will be able to access the already stored data.

14
00:00:47,070 --> 00:00:52,590
Okay, so states we've all been talking about them since the beginning of this tutorial series.

15
00:00:52,590 --> 00:00:59,610
We learn that a state is a group of data that is stored inside the application at a moment in time.

16
00:00:59,610 --> 00:01:00,180
Right.

17
00:01:00,180 --> 00:01:03,840
Remember, BLOCK Library is a powerful state management solution.

18
00:01:03,840 --> 00:01:11,520
BLOCK Library helped us create the state, but now it's our duty to help its store, therefore maintain

19
00:01:11,520 --> 00:01:11,970
them.

20
00:01:11,970 --> 00:01:15,540
The way we're going to do this is by using the hydrated block package.

21
00:01:15,540 --> 00:01:21,840
In order to understand how hydrated block works, we need to see where and more importantly, how it

22
00:01:21,840 --> 00:01:24,090
stores the data of our app.

23
00:01:24,090 --> 00:01:27,840
So where are we going to store all of our data?

24
00:01:27,840 --> 00:01:31,500
This place needs to be fast and close to the application.

25
00:01:31,500 --> 00:01:37,590
Therefore, the most intuitive solution would be actually the local storage of the device the application

26
00:01:37,590 --> 00:01:38,430
runs on.

27
00:01:38,460 --> 00:01:44,730
You may have heard that every app running on an Android device will benefit from its own internal storage

28
00:01:44,730 --> 00:01:46,470
where it can store some of its data.

29
00:01:46,470 --> 00:01:51,870
So this is where hydrogen block will also have access to store our application state.

30
00:01:51,870 --> 00:01:52,980
Let's start with this.

31
00:01:52,980 --> 00:01:58,920
First, I'll open up my previous project Inside the Scope, a project that can be found on my GitHub

32
00:01:58,920 --> 00:02:01,590
page, which is listed into description.

33
00:02:01,590 --> 00:02:04,500
Then we'll need to add dehydrated block dependency.

34
00:02:04,500 --> 00:02:08,009
So we'll open up the box, pick that YAML file and list it.

35
00:02:08,009 --> 00:02:13,860
Right there will also need a path provider dependency because this will help flutter retrieve the path

36
00:02:13,860 --> 00:02:17,910
for the storage of different devices the application may be installed on.

37
00:02:17,910 --> 00:02:24,480
Now we'll let you tell a hydrated block what will be the accessible storage area required to store our

38
00:02:24,480 --> 00:02:25,560
data onto.

39
00:02:25,560 --> 00:02:31,740
To do that inside the main function from our main dart file, we need to set up its storage.

40
00:02:31,920 --> 00:02:38,250
This hydrated build function asynchronously creates the connection from the hydrated block to the storage

41
00:02:38,250 --> 00:02:41,430
on where it's going to store the data by default.

42
00:02:41,430 --> 00:02:46,800
If we're not mentioning anything to the storage directory parameter of the function, the data will

43
00:02:46,800 --> 00:02:53,220
be stored to a temporary storage which can be easily removed by the operating system at any time.

44
00:02:53,220 --> 00:02:56,190
So it's not really recommended to store anything there.

45
00:02:56,190 --> 00:03:01,860
Instead, we could set the storage to the one provided by Android for the current app.

46
00:03:01,860 --> 00:03:08,040
This entire line of code will call native code to initialize the required storage and link it to hydrated

47
00:03:08,040 --> 00:03:08,370
block.

48
00:03:08,370 --> 00:03:14,070
But in order to do that, we need to initialize the widget bindings before we start building our app.

49
00:03:14,070 --> 00:03:18,540
Otherwise we wouldn't be able to call the native code, so keep that in mind.

50
00:03:18,540 --> 00:03:18,930
Okay.

51
00:03:18,930 --> 00:03:24,420
So currently we establish the connection between the hydrated block and the app storage layer.

52
00:03:24,420 --> 00:03:29,310
Now all we need to find out is how hydrated block will interpret and save the data.

53
00:03:29,310 --> 00:03:32,160
We want to be stored inside that storage layer.

54
00:03:32,160 --> 00:03:34,500
And the answer is Jasons.

55
00:03:34,500 --> 00:03:36,660
You must have heard about Jason before.

56
00:03:36,660 --> 00:03:41,730
I talked about them in my full tutorial in block architecture when I say that the data fetched from

57
00:03:41,730 --> 00:03:49,200
the outside of the app may come in adjacent file format, so similar to how the app can import the data

58
00:03:49,200 --> 00:03:52,800
from adjacent format, the same thing can happen vice versa.

59
00:03:52,800 --> 00:03:57,090
The application can also export the data to a JSON format.

60
00:03:57,090 --> 00:04:01,650
What's left for us right now is to decide which data we want to save in the storage.

61
00:04:01,650 --> 00:04:05,250
So let's start by maintaining the state of the counter qubit.

62
00:04:05,280 --> 00:04:09,330
The state of the counter qubit is found in the counter state class.

63
00:04:09,330 --> 00:04:11,220
So let's code that first.

64
00:04:11,220 --> 00:04:18,089
As I told you a couple of moments ago, we'll need to export the data of this class into a JSON later

65
00:04:18,089 --> 00:04:18,329
on.

66
00:04:18,329 --> 00:04:23,310
Hydrated block will take the exported JSON and store it safely into the storage.

67
00:04:23,310 --> 00:04:30,180
You can easily create the to JSON and from JSON methods of an already existing class by clicking control

68
00:04:30,180 --> 00:04:33,840
plus period and then by selecting JSON serialization.

69
00:04:33,840 --> 00:04:38,910
This is only available through the dark data class generated via Xcode module.

70
00:04:38,910 --> 00:04:44,250
I know a lot of you asked me what this module was, so here it is installed on my VTS code.

71
00:04:44,370 --> 00:04:50,250
As you can see, the module generated all the functions we needed for our counter state class implementation.

72
00:04:50,250 --> 00:04:57,480
Now I want you to understand why it created four methods to map from map to JSON and from JSON.

73
00:04:57,510 --> 00:04:59,820
A JSON is a file having the json.

74
00:04:59,930 --> 00:05:02,190
An extension appended to its name.

75
00:05:02,210 --> 00:05:06,450
This is mostly how an API will reply to your HTTP request.

76
00:05:06,470 --> 00:05:12,470
Dart language can only understand its own types of data like integers, doubles, booleans, maps,

77
00:05:12,500 --> 00:05:14,360
lists and so on and so forth.

78
00:05:14,390 --> 00:05:20,030
It doesn't have a special type called JSON, so we need to take the JSON file, which is mainly a really

79
00:05:20,030 --> 00:05:26,950
large string and decoded to a type that is familiar with the type that is similar to the structure of

80
00:05:26,960 --> 00:05:27,590
a JSON.

81
00:05:27,590 --> 00:05:30,120
Is the map similar to a JSON?

82
00:05:30,140 --> 00:05:33,250
A map keeps multiple key value pairs inside it.

83
00:05:33,260 --> 00:05:35,150
So we have the JSON file.

84
00:05:35,150 --> 00:05:39,020
We'll decode it into a map variable using the from JSON method.

85
00:05:39,020 --> 00:05:43,800
Then we'll use the map to create a class instance with the from map method.

86
00:05:43,820 --> 00:05:44,720
Vice versa.

87
00:05:44,720 --> 00:05:49,940
If you have an instance of a class with some data inside, it will use that to map method to create

88
00:05:49,940 --> 00:05:55,940
a map out of that specific instance, then use the to JSON method to create a JSON file out of that

89
00:05:55,940 --> 00:05:56,390
map.

90
00:05:56,390 --> 00:06:02,330
And that's the entire process of converting an instance of a class to a completely storable JSON and

91
00:06:02,330 --> 00:06:03,230
vice versa.

92
00:06:03,260 --> 00:06:09,080
That's the purpose of all these methods, and that's how helpful this dark data class generator function

93
00:06:09,080 --> 00:06:09,560
is.

94
00:06:09,590 --> 00:06:12,960
Imagine how much time it would take to manually write this function.

95
00:06:12,980 --> 00:06:20,540
So at this point, the counter state class can be fully exported and imported to and from JSON.

96
00:06:20,750 --> 00:06:25,970
Now we want to find out where and when hydrated block will come into action.

97
00:06:25,970 --> 00:06:31,610
So let's switch our attention to the counter qubit class for a block or qubit to become hydrated.

98
00:06:31,610 --> 00:06:35,600
That is for the state of a block or qubit to be saved and retrieved from the storage.

99
00:06:35,600 --> 00:06:38,240
We need to use the high rate in mixing to the class.

100
00:06:38,270 --> 00:06:45,200
Note that we can also use the hydrated qubit or hydrogen block extension of the counter state class

101
00:06:45,200 --> 00:06:46,910
instead of using the hydrogen mixing.

102
00:06:46,910 --> 00:06:53,090
As you can see, that warns us that we need to override the two methods of the hydrated mixing from

103
00:06:53,090 --> 00:06:54,530
JSON and to JSON.

104
00:06:54,530 --> 00:07:01,010
These two methods are the pillars of storing and saving the state to the storage while also being able

105
00:07:01,010 --> 00:07:03,740
to retrieve it back when the app is rebooted.

106
00:07:03,740 --> 00:07:09,380
Take in mind also that these methods should have been called from map and to map, since all they do

107
00:07:09,380 --> 00:07:12,110
is import and export a map type from the storage.

108
00:07:12,110 --> 00:07:17,750
Since the JSON is most of the time translated into a map, it is acceptable to call them from JSON to

109
00:07:17,750 --> 00:07:18,230
JSON.

110
00:07:18,230 --> 00:07:20,730
But you have to keep in mind the difference.

111
00:07:20,750 --> 00:07:24,440
All we have to do now is to implement those functions.

112
00:07:24,440 --> 00:07:30,350
You need to take in mind that the to JSON function is called for every state emitted by the counter

113
00:07:30,350 --> 00:07:36,110
qubit and that the from JSON function is called every time the application needs the locally stored

114
00:07:36,110 --> 00:07:36,650
data.

115
00:07:36,650 --> 00:07:38,600
Let's go the to JSON method first.

116
00:07:38,600 --> 00:07:43,820
So every time there is a new counter state emitted with the new counter value, we want to save its

117
00:07:43,820 --> 00:07:49,370
data to a map and then send it to the hydrated block to store it onto the local storage.

118
00:07:49,370 --> 00:07:55,040
When we want the app to access the last safe data from the local storage, high rated block will call

119
00:07:55,040 --> 00:08:00,110
the from JSON function and retrieve the JSON, which is already converted into a map.

120
00:08:00,110 --> 00:08:05,210
As I told you before, we need to return a new instance of the counter state populated with the data

121
00:08:05,210 --> 00:08:06,080
from that map.

122
00:08:06,080 --> 00:08:10,220
So we'll use the counter state from map method for that to happen.

123
00:08:10,220 --> 00:08:16,580
If we finally save a run the project now you'll see that after we increment the value to five and then

124
00:08:16,580 --> 00:08:22,040
restart the application, the value will still remain five.

125
00:08:22,040 --> 00:08:27,740
And that's the exact behavior that we wanted to understand this tutorial much more in depth.

126
00:08:27,740 --> 00:08:31,820
Let me get the whiteboard one more time and simulate every step of the process.

127
00:08:31,820 --> 00:08:38,630
So we have the app, the counter cube with its hydrating block plugin attached, the counter state and

128
00:08:38,630 --> 00:08:40,429
our storage components.

129
00:08:40,429 --> 00:08:44,630
We have a counter value of zero, the initial value of the counter qubit.

130
00:08:44,630 --> 00:08:50,750
When a user presses the plus button, the increment function from inside the qubit is triggered, causing

131
00:08:50,750 --> 00:08:55,640
the counter cube to emit a new counter state with an incremented value of one.

132
00:08:55,640 --> 00:09:02,720
Here, the hydrated block is notified that a new state has been dispatched and calls the to JSON function.

133
00:09:02,720 --> 00:09:08,240
The to JSON function will call the two map method from inside the counter state, which takes all the

134
00:09:08,240 --> 00:09:12,950
attributes of the class and their values and puts them into a map.

135
00:09:12,950 --> 00:09:17,210
So right now we'll have a map which looks exactly like this.

136
00:09:17,210 --> 00:09:23,270
This map is then being taken care of by the hydrated block plugin, therefore being stored on to the

137
00:09:23,270 --> 00:09:23,900
storage.

138
00:09:23,900 --> 00:09:29,630
Now let's say the app got killed or has been restarted by the user when it will be opened again.

139
00:09:29,630 --> 00:09:34,790
High rated block will retrieve the last known data from the storage as a map of data.

140
00:09:34,790 --> 00:09:40,880
Then, with the help of from JSON method of counter qubit and with the help of from map method of counter

141
00:09:40,880 --> 00:09:47,240
state, it will create a new instance of counter state with the previously stored values, thus ending

142
00:09:47,240 --> 00:09:49,990
the cycle and maintaining the counter state.

143
00:09:50,000 --> 00:09:55,100
You might be wondering, well, what if we have a ton of read and write operations from the storage?

144
00:09:55,100 --> 00:09:57,410
Won't that slow down the application?

145
00:09:57,410 --> 00:09:57,860
No.

146
00:09:57,860 --> 00:09:59,780
Hydrogen block is not only a real.

147
00:09:59,860 --> 00:10:06,770
A useful plugin, but it's also really optimized and that's thanks to the high package that it used

148
00:10:06,770 --> 00:10:09,290
under the hood to store the data.

149
00:10:09,320 --> 00:10:12,320
Hive is the most efficient way of storing data.

150
00:10:12,350 --> 00:10:14,330
Take a look at these benchmarks.

151
00:10:14,360 --> 00:10:16,710
It's absolutely blazing fast.

152
00:10:16,730 --> 00:10:22,590
So to sum up, every state from your blocks or qubits can be maintained and saved to the storage.

153
00:10:22,610 --> 00:10:27,950
All you need to do is to decide which ones you want to keep in storage and which ones you don't.

154
00:10:27,980 --> 00:10:33,500
For example, inside this application, you may store the state of the counter qubit and the state of

155
00:10:33,500 --> 00:10:34,330
the settings qubit.

156
00:10:34,340 --> 00:10:39,740
But you won't need to store the state of internet qubits since the state of the Internet connection

157
00:10:39,740 --> 00:10:43,220
must be retrieved constantly, even when you reboot the app.

158
00:10:43,250 --> 00:10:45,560
This was chapter number 11.

159
00:10:45,590 --> 00:10:48,920
You are one chapter away from becoming a block hero.

160
00:10:48,950 --> 00:10:50,050
Isn't it exciting?

161
00:10:50,060 --> 00:10:54,680
In the final chapter, we're going to buckle up everything we learned and play with all the debugging

162
00:10:54,680 --> 00:10:56,420
methods of a block or qubit.

163
00:10:56,420 --> 00:11:01,070
So in case something goes wrong with them, we'll be able to successfully track and debug them at a

164
00:11:01,070 --> 00:11:01,430
glance.

165
00:11:01,430 --> 00:11:06,350
With that being said, I'm looking forward to seeing each and every one of you in the last chapter of

166
00:11:06,350 --> 00:11:07,070
this course.

167
00:11:07,070 --> 00:11:09,560
Stay tuned and let's get wicked.

