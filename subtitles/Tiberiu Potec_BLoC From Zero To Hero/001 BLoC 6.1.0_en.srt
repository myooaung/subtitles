1
00:00:00,060 --> 00:00:01,740
Hey, what is going on, everyone?

2
00:00:01,920 --> 00:00:04,750
Welcome back to chapter number nine today.

3
00:00:04,820 --> 00:00:10,390
I'm going to show you some important changes introduced in the new stable version of Block Library.

4
00:00:10,470 --> 00:00:16,500
We will tackle up newest additions like context, that watch context, that select and context, that

5
00:00:16,500 --> 00:00:22,580
read additions which cause context, that block and context that the repository to become deprecated.

6
00:00:22,680 --> 00:00:28,860
This video is going to be an extension of my third tutorial on Flutter Block concept since the changes

7
00:00:28,860 --> 00:00:34,710
from six point one point zero are strongly related to some of the concepts we discussed back then.

8
00:00:34,770 --> 00:00:41,130
OK, so in order to understand the changelog of clutter, block six point one point zero, we need to

9
00:00:41,130 --> 00:00:46,800
see what was wrong with the previous six point zero point zero and lower version.

10
00:00:47,090 --> 00:00:50,370
Remember when I introduced you to the Block Builder Widget concept?

11
00:00:50,370 --> 00:00:57,390
Back in tutorial number three Block Builders duty was to rebuild a widget as a response to a state change

12
00:00:57,390 --> 00:00:59,400
coming from a block or cubitt.

13
00:00:59,580 --> 00:01:06,360
Of course, the obvious limitation of this approach lies exactly in the definition of more specifically

14
00:01:06,510 --> 00:01:13,680
in the fact that block builder only reacts to a state change emerging from only one single block or

15
00:01:13,680 --> 00:01:14,190
cubitt.

16
00:01:14,370 --> 00:01:19,410
As a consequence of this limitation, some users wanted more granular control.

17
00:01:19,590 --> 00:01:25,950
And since there is already a multiple provider and a multi repository provider that accepts multiple

18
00:01:25,950 --> 00:01:32,130
blocks, cubits or repositories to be provided throughout the widget tree, they also wanted some kind

19
00:01:32,130 --> 00:01:40,080
of a multi block builder, a tool which can rebuild a widget based on multiple blocks or Cubitt states.

20
00:01:40,410 --> 00:01:45,060
This is where the newest concept named context, that watch was introduced.

21
00:01:45,210 --> 00:01:51,300
In order to understand exactly what the context that watch function does, I need to translate it in

22
00:01:51,300 --> 00:01:51,750
depth.

23
00:01:51,750 --> 00:01:59,340
So context that watch of block a function translates into from the widget that was built within the

24
00:01:59,340 --> 00:02:06,810
context built context starts searching for the unique instance of Block A provided above in the widget

25
00:02:06,810 --> 00:02:07,080
tree.

26
00:02:07,590 --> 00:02:12,660
Then after it's found, watch or subscribe to its stream of emitted states.

27
00:02:12,660 --> 00:02:19,650
And whenever a new state is emitted by Block A rebuild the widget from which the lookup was started.

28
00:02:20,190 --> 00:02:23,830
This was a surprisingly long translation for the code sequence, right?

29
00:02:23,850 --> 00:02:29,310
So currently you might be tempted to say that the translation seems to be familiar to the definition

30
00:02:29,310 --> 00:02:34,110
of block builder, yet there is still no multiple blocks or cubits mentioned inside it.

31
00:02:34,260 --> 00:02:41,010
Then how can we watch state emitted by multiple blocks or qubits simply by calling context that watch

32
00:02:41,010 --> 00:02:43,530
on the blocks or cubits you need to watch.

33
00:02:43,530 --> 00:02:49,680
For example, if you want to rebuild a specific widget as a result of the states emitted by Block A,

34
00:02:49,920 --> 00:02:57,360
block B and block C instances, all you need to do is 30 states in three different variables like block

35
00:02:57,360 --> 00:03:02,130
A state, block B state, block C state and then return a widget.

36
00:03:02,130 --> 00:03:06,030
You want to be built with the information from those three states.

37
00:03:06,210 --> 00:03:11,880
Bear in mind that the return widget is not the only one that will be rebuilt whenever at least one of

38
00:03:11,880 --> 00:03:18,240
these three status updates, but rather the entire widget built within the context from which the watch

39
00:03:18,240 --> 00:03:19,520
method was called.

40
00:03:19,530 --> 00:03:23,040
In our case, the entire building widget will be rebuilt.

41
00:03:23,050 --> 00:03:25,320
Therefore our return widget too.

42
00:03:25,660 --> 00:03:27,000
I hope this makes sense.

43
00:03:27,000 --> 00:03:33,540
And if it doesn't, I invite you to watch my in-depth video about Bill context to see the context that

44
00:03:33,540 --> 00:03:40,320
watch function in action will obviously need to blocks or kibbitz, so that will rebuild a specific

45
00:03:40,320 --> 00:03:42,540
widget based on their separate states.

46
00:03:42,720 --> 00:03:46,920
So I'll open up the project from my latest tutorial inside the code.

47
00:03:46,920 --> 00:03:52,770
And right away you can observe that Flutter warns us we are using a deprecated version of Block.

48
00:03:52,770 --> 00:03:58,530
So first and foremost, we need to update it to six point one point zero will do that by going to pub

49
00:03:58,530 --> 00:04:04,080
spec that Yamal and rename the version of the flutter underscore block dependency from six point zero

50
00:04:04,080 --> 00:04:06,960
point zero to six point one point zero.

51
00:04:06,990 --> 00:04:12,780
If you have forgotten what our contract does every time the phone is connected to wi fi or mobile,

52
00:04:12,870 --> 00:04:17,310
the counter value will either increment or decrement by one.

53
00:04:17,610 --> 00:04:22,660
Therefore, currently our counter app is dependent on the network state.

54
00:04:22,680 --> 00:04:29,820
But in order to test if a specific widget will rebuild based on at least one of the two separate states,

55
00:04:29,940 --> 00:04:36,300
we need to make the cubits independent again so will delete the block listner which caused the counter

56
00:04:36,300 --> 00:04:42,030
to to increment and decrement based on whether the Internet Cubitt was connected to wi fi or mobile,

57
00:04:42,240 --> 00:04:47,880
then will uncommented the lines of code containing the plus and minus floating buttons that caused the

58
00:04:47,880 --> 00:04:51,450
counter cubitt to manually increment or degremont.

59
00:04:51,600 --> 00:04:54,360
Now both of our qubits are independent.

60
00:04:54,600 --> 00:04:59,640
They won't do anything one as a response to the other in order to demonstrate our.

61
00:05:00,130 --> 00:05:06,610
That watch works will have to create a widget which will rebuild whenever at least one of these two

62
00:05:06,610 --> 00:05:08,810
cubits meets new states.

63
00:05:08,890 --> 00:05:12,700
So let's create a text widget containing the current counter value.

64
00:05:12,700 --> 00:05:18,160
And the current state of the Internet connection will need to wrap this widget with a builder so that

65
00:05:18,160 --> 00:05:21,900
we get access to its closest context above it, after all.

66
00:05:21,940 --> 00:05:28,360
All we need to do is to write the context that watch that state for each of the two cubits we're interested

67
00:05:28,360 --> 00:05:32,460
in, then use them appropriately to return reserve text widget.

68
00:05:33,130 --> 00:05:39,370
We can now save, build and run the application, thus observing that whenever I press the minus and

69
00:05:39,370 --> 00:05:44,800
plus buttons, the builder widget built within the context from which the watch function was called

70
00:05:44,800 --> 00:05:45,420
rebuilds.

71
00:05:45,760 --> 00:05:48,830
Therefore the text widget rebuilds as well.

72
00:05:49,150 --> 00:05:55,360
Then if I switch from mobile to Wi-Fi connection, you can see that the widget rebuilds again, leaving

73
00:05:55,360 --> 00:05:56,870
the counter unchanged.

74
00:05:56,980 --> 00:06:02,860
I hope you understood what the purpose of context that watch is and why it was introduced as an addition

75
00:06:02,860 --> 00:06:04,990
of blog six point 1.0.

76
00:06:05,320 --> 00:06:08,170
Now it's time to move on to the next edition.

77
00:06:08,290 --> 00:06:14,360
The next feature was added as a response to those users who wanted a much simpler build and function.

78
00:06:14,500 --> 00:06:20,530
So let's say, for example, you wanted a specific widget to be rebuilt only when the name of the user

79
00:06:20,530 --> 00:06:21,090
changes.

80
00:06:21,220 --> 00:06:23,790
How would you do that inside block six point zero point?

81
00:06:23,810 --> 00:06:28,930
Oh, well, you would have created a block builder then you would have set up the building function

82
00:06:28,930 --> 00:06:35,200
so that the widget you want to rebuild will rebuild only when the previous day that user that name is

83
00:06:35,200 --> 00:06:38,030
different from current state, that user, that name.

84
00:06:38,290 --> 00:06:41,170
But what if you wanted to do this in a simple manner?

85
00:06:41,350 --> 00:06:47,170
Well, this is where context that select function comes into place as a new addition to block six point

86
00:06:47,170 --> 00:06:50,650
one point zero contact that select similarly to contacts.

87
00:06:50,660 --> 00:06:57,340
That watch is still linked to a build context, so it will still rebuild the widget built inside that

88
00:06:57,340 --> 00:06:58,510
specific context.

89
00:06:58,510 --> 00:06:59,390
Build context.

90
00:06:59,590 --> 00:07:06,460
Remember, this select function is useful only when you want to rebuild a widget based on only one simple

91
00:07:06,460 --> 00:07:09,430
select condition for more advanced conditions.

92
00:07:09,700 --> 00:07:15,700
The recommended way to do it still remains the builder, along with the buildout and method.

93
00:07:15,940 --> 00:07:21,970
Again, to test this, all we have to do is to wrap a text widget inside a building widget to access

94
00:07:21,970 --> 00:07:28,690
its closer, build context and then retrieve the new counter value inside the variable while also updating

95
00:07:28,690 --> 00:07:30,980
and rebuilding the builder widget.

96
00:07:31,150 --> 00:07:37,030
If we save and run the project, you can see that context that select is working as it should whenever

97
00:07:37,030 --> 00:07:42,460
the current counter value is different from the previous counter value context that select returns the

98
00:07:42,460 --> 00:07:47,860
new value and rebuilds the builder widget and to move on to the next added feature.

99
00:07:47,890 --> 00:07:52,450
You may have noticed during this tutorial that I have ignored some of the warnings from inside.

100
00:07:53,200 --> 00:07:55,730
This is the most crucial one to understand.

101
00:07:55,780 --> 00:07:58,810
Block is deprecated and shouldn't be used.

102
00:07:59,080 --> 00:08:04,870
If we click on it, we find out that context, that block function got deprecated and that it will be

103
00:08:04,870 --> 00:08:09,360
completely removed in version seven point zero point zero of block.

104
00:08:09,610 --> 00:08:12,160
But why exactly is that happening?

105
00:08:12,250 --> 00:08:17,830
I remember from my tutorial number three on Flutter Block Concepts when I explained that you can access

106
00:08:17,830 --> 00:08:24,910
the unique provided instance of a block or Cubitt by either calling block provider out of context or

107
00:08:25,120 --> 00:08:25,870
context.

108
00:08:25,870 --> 00:08:30,460
That block from the feedback Felix Angelov retrieved from its block users.

109
00:08:30,460 --> 00:08:35,049
He realized that people misunderstood the purpose of context that block.

110
00:08:35,049 --> 00:08:41,799
Some of the users were using context that block to get the current state of a block or covid inside

111
00:08:41,919 --> 00:08:43,750
the build function of a widget.

112
00:08:43,990 --> 00:08:48,820
Then they would use the retrieved state in order to make further decisions on other widgets.

113
00:08:49,000 --> 00:08:55,540
This is terribly wrong and should be avoided at all costs because it can cost unpredictable behavior.

114
00:08:55,630 --> 00:09:02,530
Whitewell Because there is nothing that guarantees at what moment in time that build function will be

115
00:09:02,530 --> 00:09:04,350
called within flutter engine.

116
00:09:04,540 --> 00:09:09,030
Thus, what will the state of the Block or Cubitt be in that situation?

117
00:09:09,220 --> 00:09:16,000
Remember, state is a stream of data, so you should be listening to it and do something in response

118
00:09:16,000 --> 00:09:23,030
to each value of the stream rather than asking randomly for a value at a random moment in time.

119
00:09:23,230 --> 00:09:24,970
But wait, you said contact.

120
00:09:24,970 --> 00:09:26,320
That block will be removed.

121
00:09:26,620 --> 00:09:30,240
Then how can we access an instance of a provided block?

122
00:09:30,280 --> 00:09:37,000
Well, you can still access it by using block provider that of context or from now on by using the last

123
00:09:37,000 --> 00:09:44,380
addition of blocks six point one point zero, which is context that read function context that read

124
00:09:44,440 --> 00:09:51,610
is as the name is implying a way of accessing or reading a block or covid instance provided in the widget

125
00:09:51,940 --> 00:09:58,030
context that we won't rebuild the widget from the context in which it's called, as opposed to context

126
00:09:58,030 --> 00:09:59,890
that watch and context that select.

127
00:09:59,940 --> 00:10:04,940
Functions at the same time, you need to understand that you should be asking for a block or Cubitt

128
00:10:04,950 --> 00:10:09,340
instance only when you need it and only where you need it.

129
00:10:09,360 --> 00:10:15,840
For example, asking for the Easton's bill's method of a widget will start a lookup every time the widget

130
00:10:15,840 --> 00:10:22,230
will rebuild, which is not optimal at all, especially when you only needed to call a function or add

131
00:10:22,230 --> 00:10:24,060
an event from inside a button.

132
00:10:24,330 --> 00:10:29,850
Keep in mind that we don't know when Flutter will automatically build or rebuild its widgets, except

133
00:10:29,850 --> 00:10:35,850
in the cases when we're using block builder contacts that watch or contact that select cases in which

134
00:10:35,850 --> 00:10:41,790
we're manually telling flutter to rebuild them based on different states from different blocks or qubits.

135
00:10:41,790 --> 00:10:48,180
All it's left to be done now is to modify all context that block to context that read right where it's

136
00:10:48,180 --> 00:10:49,890
needed, save, run.

137
00:10:50,070 --> 00:10:54,130
And as you can see, the app still works perfectly as it should.

138
00:10:54,270 --> 00:10:57,210
Hope you enjoyed the newest additions to the Block Library.

139
00:10:57,420 --> 00:11:00,800
We are kind of done with understanding and learning the block concepts.

140
00:11:00,810 --> 00:11:07,020
So in the next chapter will focus more on understanding and fixing one of the most frequent issues some

141
00:11:07,020 --> 00:11:10,990
of the new blog developers encounter while working with the Block Library.

142
00:11:11,010 --> 00:11:16,770
Chapter 10 will definitely be a chapter worth watching as it will test all the knowledge accumulated

143
00:11:16,770 --> 00:11:17,500
until now.

144
00:11:17,550 --> 00:11:22,590
With that being said, I am looking forward to seeing each and every one of you in the next chapter.

145
00:11:22,620 --> 00:11:23,340
Stay tuned.

146
00:11:23,340 --> 00:11:25,440
And of course, let's get wicked.

