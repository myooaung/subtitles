1
00:00:00,150 --> 00:00:05,250
Hello, everyone, and welcome to the second chapter of this amazing course in which we are going to

2
00:00:05,250 --> 00:00:12,810
dive into the core concepts of Block, and I have to tell you that it is critical to understand them

3
00:00:12,810 --> 00:00:14,300
before trying to use block.

4
00:00:14,640 --> 00:00:21,690
So, Mark, as an important lesson, because you may need to revisit it multiple times in order to understand

5
00:00:21,690 --> 00:00:22,690
every concept.

6
00:00:22,830 --> 00:00:26,080
So without further ado, let's get right into it.

7
00:00:26,370 --> 00:00:32,070
The first major concept you need to get familiar with is the concept of a stream.

8
00:00:32,310 --> 00:00:34,370
This is the foundation of block.

9
00:00:34,380 --> 00:00:41,540
So please pay as much attention as possible because I will try to make it as simple as possible to understand.

10
00:00:41,700 --> 00:00:43,220
Imagine the following scenery.

11
00:00:43,500 --> 00:00:49,920
You are with another friend in a beautiful mountainous area and you spotted a nice river flowing from

12
00:00:49,920 --> 00:00:51,000
top to bottom.

13
00:00:51,030 --> 00:00:53,930
You decide to take part in a recreational activity.

14
00:00:54,240 --> 00:00:59,180
You will go uphill to where the river starts flowing and your friend will wait down here.

15
00:00:59,460 --> 00:01:04,800
You are not able to see each other since the river swim left and right multiple times.

16
00:01:04,830 --> 00:01:11,340
Now, the task of this activity is that you will said no more than 10 boats down the river containing

17
00:01:11,340 --> 00:01:16,470
multiple numbers inside them corresponding to the order they were dispatched.

18
00:01:16,470 --> 00:01:18,390
The first boat will have no one.

19
00:01:18,750 --> 00:01:22,280
The second will have number two and so on and so forth.

20
00:01:22,500 --> 00:01:29,220
The purpose of this activity is for your friends to shout out the number he will receive at the end

21
00:01:29,220 --> 00:01:29,850
of the river.

22
00:01:30,060 --> 00:01:32,130
So lets him lay this activity for a bit.

23
00:01:32,310 --> 00:01:35,150
You will send the first boat with no one in sight.

24
00:01:35,160 --> 00:01:38,280
Your friend is waiting patiently for it to arrive downhill.

25
00:01:38,640 --> 00:01:43,290
It eventually arrives after a couple of moments and your friend shouts one.

26
00:01:43,290 --> 00:01:50,010
After two seconds, you send another boat, your friend receives it, a shout outs to and so on and

27
00:01:50,010 --> 00:01:53,010
so forth until there are no more boats to arrive.

28
00:01:53,280 --> 00:01:58,650
If you understood this little activity, then you understood what a stream is.

29
00:01:58,770 --> 00:02:06,600
A stream is at its foundation, mostly a river, which transports some data on a boat from the sender

30
00:02:06,720 --> 00:02:07,590
to the receiver.

31
00:02:07,620 --> 00:02:14,460
The transported data is asynchronous, which means the receiver doesn't really know when he'll receive

32
00:02:14,460 --> 00:02:15,030
the data.

33
00:02:15,420 --> 00:02:18,270
He just waits or listens to it.

34
00:02:18,750 --> 00:02:23,580
Now let me attach the codes to every component of this entire recreational activity.

35
00:02:23,730 --> 00:02:28,410
Just take a look and observe how natural everything goes into place.

36
00:02:28,710 --> 00:02:33,870
So there is a bowstring function which returns a stream type of integer numbers.

37
00:02:34,080 --> 00:02:40,080
This will be a function designed by you, the guy who is sending all the boats down the river.

38
00:02:40,170 --> 00:02:46,710
In this function, all you are doing is iterating ten times in a for loop in order to send the boat

39
00:02:46,740 --> 00:02:48,300
with the corresponding number.

40
00:02:48,600 --> 00:02:52,890
You may notice that there are three keywords that we have not discussed yet.

41
00:02:53,550 --> 00:02:56,610
Async start a wait and yield.

42
00:02:56,880 --> 00:03:03,420
I told you before that the data or the boats in our case that are being dispatched are asynchronous.

43
00:03:03,420 --> 00:03:11,790
Well, the function from where all the magic happens needs to be an async generator function because

44
00:03:11,790 --> 00:03:17,820
it generates asynchronous data, hence marking it with the async star.

45
00:03:18,030 --> 00:03:20,580
Koeberg in an async star function.

46
00:03:20,580 --> 00:03:24,630
The keyword Hield pushes the boat to the Dreamweaver.

47
00:03:24,960 --> 00:03:31,590
So every time we use something in an async star function, we are sending that piece of data to the

48
00:03:31,590 --> 00:03:31,980
stream.

49
00:03:32,160 --> 00:03:38,580
The await keyword helps waiting for a process to finish before proceeding to the next step.

50
00:03:38,700 --> 00:03:43,530
In this case, we are waiting for two seconds gap between both dispatching.

51
00:03:43,710 --> 00:03:50,130
OK, so we took care of the guy who sends the data, but what about the guy who receives it again?

52
00:03:50,130 --> 00:03:52,740
Will notice how natural that code sounds like.

53
00:03:53,280 --> 00:03:58,140
In the main function, all there is to be done is initializing the stream.

54
00:03:58,710 --> 00:04:04,350
Then we will listen to the stream by analyzing whether a boat is approaching or not.

55
00:04:04,950 --> 00:04:11,820
Remember, your friend doesn't know when the boat will arrive down the stream, so he needs to listen

56
00:04:11,820 --> 00:04:14,400
to it or practically watch for it.

57
00:04:14,520 --> 00:04:19,500
But eventually you ask yourself a question why streams?

58
00:04:19,560 --> 00:04:20,730
Why do we need them?

59
00:04:20,910 --> 00:04:26,970
You might remember from the last video on Why Block when I mentioned that for every interaction inside

60
00:04:26,970 --> 00:04:30,060
the app, there should be a state emerging from it.

61
00:04:30,060 --> 00:04:30,390
Right.

62
00:04:30,510 --> 00:04:34,470
Can you see where streams will come in extremely handy in this situation?

63
00:04:34,710 --> 00:04:41,280
So you will have interactions emerging from the app which needs to be listened to in order to meet state

64
00:04:41,400 --> 00:04:44,790
based on the sequence of code which changes the app.

65
00:04:44,910 --> 00:04:50,430
Take a look at both of these next concepts so that everything will be more clear on the video and have

66
00:04:50,430 --> 00:04:55,620
a couple of seconds to properly read them and try to understand what's going on.

67
00:04:55,770 --> 00:04:59,520
Both cubits and blocks can also communicate with the outer.

68
00:04:59,580 --> 00:05:06,330
Detail here, but this part is beyond the purpose of this video and will get covered later on, so let's

69
00:05:06,330 --> 00:05:07,710
remove this part for now.

70
00:05:07,920 --> 00:05:09,660
What can we observe here?

71
00:05:09,810 --> 00:05:15,260
Cubitt and Block are two really important concepts which you will need to understand.

72
00:05:15,510 --> 00:05:22,500
The only difference you should have in mind for now is that a cubit is a minimal version of a block.

73
00:05:22,680 --> 00:05:25,380
So Block actually extends Cubic.

74
00:05:25,590 --> 00:05:31,860
To understand why is that, we need to dive into what is a cubit and what is a block.

75
00:05:32,040 --> 00:05:33,660
Let's start with a cubit first.

76
00:05:33,900 --> 00:05:40,590
A cubit, as you can see from the picture above, is a special kind of a stream component, which is

77
00:05:40,590 --> 00:05:47,340
based on some functions which are called from the UI functions that rebuild the UI by emitting different

78
00:05:47,340 --> 00:05:51,670
states on a stream to make the understanding process simpler.

79
00:05:51,900 --> 00:05:56,920
Let's associate the concepts with the default counter app from Flutter.

80
00:05:57,060 --> 00:06:04,950
So question number one, what is the initial state of the app when you started in this case, the default

81
00:06:04,950 --> 00:06:07,400
counter value default at zero.

82
00:06:07,680 --> 00:06:13,760
Question number two, what is the main interaction the user can have with the app?

83
00:06:13,770 --> 00:06:17,670
Well, and user can click one of those plus and minus buttons.

84
00:06:17,670 --> 00:06:24,510
And question number three, what are the functions which need to be listed in the Cubitt component in

85
00:06:24,510 --> 00:06:31,200
order to describe the actions defined by the minus and plus buttons will have two functions, one called

86
00:06:31,200 --> 00:06:38,160
increment and the other called decrement, which will logically add or subtract one to the current state

87
00:06:38,160 --> 00:06:39,000
of the counter.

88
00:06:39,390 --> 00:06:45,030
Now let me show you the implementation of the Cubitt to the screen so that you completely understand

89
00:06:45,030 --> 00:06:47,700
every question and answer from above.

90
00:06:47,970 --> 00:06:53,430
Here we're declaring the Cubitt responsible for managing the counter feature of the app.

91
00:06:53,670 --> 00:06:59,220
As you can see, we are setting the default state of the counter to zero right in the constructor.

92
00:06:59,220 --> 00:07:05,760
Then we are creating an increment and decrement function so that when we call it from the UI, then

93
00:07:05,760 --> 00:07:09,420
you increment its decrement in state will be omitted.

94
00:07:09,900 --> 00:07:12,930
The main function acts like the UI currently.

95
00:07:12,930 --> 00:07:16,650
So don't worry if you don't see any plus or minus buttons to play with.

96
00:07:16,650 --> 00:07:22,710
Right now, the function was just designed for educational purposes and ease of understanding will get

97
00:07:22,710 --> 00:07:25,740
you further user interface and widgets in the next tutorial.

98
00:07:25,920 --> 00:07:29,430
So inside the main function are declaring the counter cubitt.

99
00:07:29,580 --> 00:07:35,730
Then we can observe how we can update the state of the counter value easily by calling the specific

100
00:07:35,730 --> 00:07:37,650
functions we created earlier.

101
00:07:37,800 --> 00:07:41,910
And this is the cubitt is actually a type of stream mitting states.

102
00:07:42,120 --> 00:07:45,150
You can listen to it and observe the state change.

103
00:07:45,150 --> 00:07:53,250
You take in mind that as you can see, compared to block, the cubitt functions are not part of a stream,

104
00:07:53,250 --> 00:07:58,800
but rather of a predefined standalone list of what can be done inside the cube.

105
00:07:58,800 --> 00:08:04,890
It's actually the important difference is highlighted by the lack of these blue points on the schema.

106
00:08:05,370 --> 00:08:10,710
The one and only stream existing in a cubitt is the stream of empty states.

107
00:08:11,250 --> 00:08:15,690
So you may not ask what advantages could block bring into the game?

108
00:08:15,810 --> 00:08:17,280
Is an cubitt enough?

109
00:08:17,820 --> 00:08:25,890
Remember that Cubitt is a component which based on some functions, I repeat, functions that are not

110
00:08:26,070 --> 00:08:32,340
part of a stream and meets a stream of state which modify the UI.

111
00:08:32,610 --> 00:08:41,309
Block, on the other hand, is more advanced since not only emits a stream of states but also receives

112
00:08:41,429 --> 00:08:42,720
a stream of events.

113
00:08:43,350 --> 00:08:49,350
So think of block as being the brain of an advanced and complex component from your app.

114
00:08:49,350 --> 00:08:56,010
Depending on the interactions the user has with the app, there will be an event emerging from it which

115
00:08:56,010 --> 00:08:57,780
comes as an input to the block.

116
00:08:57,930 --> 00:09:04,440
Then inside the block there will be a required mapped event to state function, which will take the

117
00:09:04,440 --> 00:09:11,140
event and convert it into a state so that the UI can successfully rebuild.

118
00:09:11,520 --> 00:09:17,880
Let's take a look at the same counter app example and turn the previous cube it into a block.

119
00:09:18,600 --> 00:09:26,580
So here, as you can see, instead of having a precooked increment function, we have an inner called

120
00:09:26,580 --> 00:09:35,670
counter event which contains two events the increment and decrement ones, which can be entered as an

121
00:09:35,670 --> 00:09:43,410
input into the map events, the state functions, and then a new increment is DiClemente state will

122
00:09:43,410 --> 00:09:48,840
be yielded into the output state stream as we the cubit.

123
00:09:48,840 --> 00:09:54,810
In order to use block, you have to declare it whenever there should be a new event dispatched.

124
00:09:55,080 --> 00:09:59,160
We call block that ad and the event we want to.

125
00:09:59,760 --> 00:10:06,300
For example, when the plus or minus button is pressed, there should be an increment or decrement event

126
00:10:06,300 --> 00:10:13,200
dispatched, the blueprints will listen to the event stream, receive the event just how your friend

127
00:10:13,200 --> 00:10:19,890
was receiving the boat on the river, actually, and then calculate the next value and Hield it on the

128
00:10:19,890 --> 00:10:20,660
State Street.

129
00:10:21,270 --> 00:10:26,910
Knowing that we've covered the basics of the cubitt and block classes, you might be wondering in the

130
00:10:26,910 --> 00:10:34,320
first place when you should create a cubitt or a block in your app, in the second place where you should

131
00:10:34,320 --> 00:10:41,220
use Cubitt as opposed to when you should use block and what is actually the real big difference, setting

132
00:10:41,220 --> 00:10:42,540
them apart from each other.

133
00:10:42,900 --> 00:10:45,020
So let's get right into question number one.

134
00:10:45,330 --> 00:10:49,170
When should you create a cubitt or a block in your app?

135
00:10:49,410 --> 00:10:51,630
This is a really important question.

136
00:10:51,630 --> 00:10:56,040
You ask yourself when you will finally understand the concepts of these two.

137
00:10:56,100 --> 00:11:04,140
Technically, there should be a block slash cubitt component for every feature of your app and by feature

138
00:11:04,260 --> 00:11:08,060
you should understand a key functionality your app offers.

139
00:11:08,460 --> 00:11:14,040
For example, you have a customer step where you can create show delays some people from a list.

140
00:11:14,580 --> 00:11:21,510
Then you will need either a cubitt or a block to manage the events of creating, deleting, showing

141
00:11:21,510 --> 00:11:26,910
a customer and the states emerging from them, which will change the UI accordingly.

142
00:11:27,360 --> 00:11:30,890
Another example can be the type of Internet connection you have.

143
00:11:31,290 --> 00:11:38,400
You need a block or a cubitt to keep track of what is going on with the app when there is no Internet

144
00:11:38,400 --> 00:11:43,830
connection or when there is a poor one, or when you're connected to wi fi rather than mobile data and

145
00:11:43,830 --> 00:11:44,870
so on and so forth.

146
00:11:45,030 --> 00:11:46,650
So I hope it's clear for now.

147
00:11:46,650 --> 00:11:48,900
And now here comes question number two.

148
00:11:49,200 --> 00:11:55,430
Where should you use Cubitt as opposed to block and what is the real big difference, setting them apart.

149
00:11:55,440 --> 00:12:02,640
So as I have previously said, the main major difference between a cubitt and a block is related to

150
00:12:02,640 --> 00:12:06,600
how each one of them receives input from the UI.

151
00:12:06,690 --> 00:12:08,960
So you may ask why this difference?

152
00:12:09,210 --> 00:12:11,460
Why is there a cubitt in the first place?

153
00:12:11,700 --> 00:12:16,280
Is a block an already amazing and powerful solution for everything?

154
00:12:16,740 --> 00:12:19,680
Well, technically it is.

155
00:12:20,070 --> 00:12:24,090
You can use block as opposed to Cubitt everywhere in your app.

156
00:12:24,240 --> 00:12:27,450
You don't even need to care about Cubitt if you ask me.

157
00:12:27,780 --> 00:12:34,170
But you see, there is no real need for a stream of events when you want to implement a simple counter

158
00:12:34,170 --> 00:12:41,040
feature using a stream for events to do this is like getting a bulldozer to dig in a fifty centimeters

159
00:12:41,040 --> 00:12:44,310
hole in the ground where you can simply use a shovel to do it.

160
00:12:44,400 --> 00:12:50,550
So when the stream advantages come into place, then we'll think about searching for a weather location.

161
00:12:50,550 --> 00:12:57,120
For example, you're typing each letter and for each one there is a new list of locations displayed

162
00:12:57,360 --> 00:12:58,770
from work and choose from.

163
00:12:59,160 --> 00:13:01,650
What would the cubits do in this situation?

164
00:13:01,830 --> 00:13:02,850
Let's think a little.

165
00:13:03,030 --> 00:13:09,540
It will call to get locations list function, for example, for each letter you type into the input

166
00:13:09,540 --> 00:13:09,930
field.

167
00:13:10,080 --> 00:13:11,400
What would a block do?

168
00:13:11,670 --> 00:13:17,310
Well, you can set the block to call to get locations, list function once every four letters, for

169
00:13:17,310 --> 00:13:22,590
example, or maybe once every two seconds, or maybe when the user stops typing.

170
00:13:22,590 --> 00:13:28,980
And that's because the input events can be delayed and manipulated thanks to them being dispatched on

171
00:13:28,980 --> 00:13:30,480
an actual stream.

172
00:13:30,780 --> 00:13:37,410
OK, so having that in mind, we can deduce that block is the big brain of the project, whereas Cubitt

173
00:13:37,560 --> 00:13:42,470
is a smaller part of it, which can be used to optimize code workflow.

174
00:13:42,690 --> 00:13:49,380
The advice I can give you right now is to start with a cubitt and modify the cubit into a block when

175
00:13:49,380 --> 00:13:52,380
you really, really need the extra streambed use.

176
00:13:52,680 --> 00:13:58,350
Having all of this in mind in the next chapter will discuss another really important topic, the flutter

177
00:13:58,350 --> 00:13:59,190
block concepts.

178
00:13:59,310 --> 00:14:03,750
Maybe you heard about blow provider, block builder and block listener along the way.

179
00:14:03,750 --> 00:14:05,640
These are some of the floatable concepts.

180
00:14:05,640 --> 00:14:06,930
Will Dekel up next.

181
00:14:06,930 --> 00:14:10,200
With that being said, I'm looking forward to seeing each and every one of you.

182
00:14:10,200 --> 00:14:10,890
Up next.

183
00:14:11,040 --> 00:14:13,080
Stay tuned and let's get wicked.

