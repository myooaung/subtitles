1
00:00:00,420 --> 00:00:01,930
What is going on, everyone?

2
00:00:01,950 --> 00:00:04,220
And welcome back to chapter number seven.

3
00:00:04,350 --> 00:00:10,050
In this chapter, I will introduce you to block to block communication, especially how books or kibbitz

4
00:00:10,050 --> 00:00:15,960
communicate between each other in this material will also cover up some further block architecture tips

5
00:00:15,960 --> 00:00:16,470
and tricks.

6
00:00:16,470 --> 00:00:22,100
And to general recap of everything we learned so far so that you'll be able to practice and structure

7
00:00:22,110 --> 00:00:23,290
code even better.

8
00:00:23,310 --> 00:00:28,140
Also, if you want to follow up by practicing this tutorial, you need to clone my block from zero to

9
00:00:28,140 --> 00:00:32,470
hero repository from GitHub and open up the sixth block access folder.

10
00:00:32,759 --> 00:00:34,140
That's where we left last time.

11
00:00:34,170 --> 00:00:39,210
OK, so in order to start this lesson with the motivational purpose, you need to know that sooner or

12
00:00:39,210 --> 00:00:45,570
later you said your application, you will have one or multiple blocks or qubits which may need to communicate

13
00:00:45,570 --> 00:00:47,370
with other blocks or cubits.

14
00:00:47,370 --> 00:00:52,750
By communication, I mean that one may do something in response to a state change over another.

15
00:00:52,770 --> 00:00:58,560
Remember, from my third and second story on the series that both cubits and blocks emit a stream of

16
00:00:58,560 --> 00:00:59,070
states.

17
00:00:59,070 --> 00:01:04,980
Well, because of that, other blocks can listen and receive those states and then act appropriately

18
00:01:04,980 --> 00:01:09,850
in response to them by perhaps adding an event or by calling a new function.

19
00:01:09,870 --> 00:01:15,110
So the main question here is how can a block or Cubitt listen to another block or cubie?

20
00:01:15,210 --> 00:01:20,000
To be fair, there are two possible scenarios you can tackle in order to achieve this.

21
00:01:20,010 --> 00:01:23,730
Both have their own pros and cons and can be equally good.

22
00:01:23,730 --> 00:01:27,500
So the method you'll be choosing in the future will be strictly a matter of taste.

23
00:01:27,510 --> 00:01:33,390
Today, as an example, will learn how to communicate between two cubits by adapting our existing app

24
00:01:33,390 --> 00:01:38,790
a little bit so that whenever the phone is connected to Wi-Fi, the counter will be incremented by one.

25
00:01:38,790 --> 00:01:43,290
And whenever the phone is connected to mobile data, the counter will be documented by one.

26
00:01:43,300 --> 00:01:47,820
So we'll have an internal cubitt and a countercoup, both communicating one with another.

27
00:01:47,880 --> 00:01:53,550
Let's start by discussing the first method on how to blocks or qubits can communicate one with another.

28
00:01:53,670 --> 00:01:58,950
If you remember back in the trial, number two, when I talked about streams, I told you that in order

29
00:01:58,950 --> 00:02:03,600
to listen to a stream of data, you need to subscribe to a stream subscription.

30
00:02:03,630 --> 00:02:08,039
A stream subscription is the foundation object from which you can listen to a stream.

31
00:02:08,070 --> 00:02:12,370
So what would stop us from using it as a method to listen to a block cubitt?

32
00:02:12,420 --> 00:02:13,680
Well, nothing.

33
00:02:13,680 --> 00:02:20,700
So currently we know that blocks or qubits start to emit states right after the unique instance is created.

34
00:02:20,700 --> 00:02:24,400
Most of them will admit an initial state right after they were created.

35
00:02:24,420 --> 00:02:29,400
So it's important to understand that the stream subscription object will use to listen to a block or

36
00:02:29,400 --> 00:02:35,320
Cubitt should be listening right from the start and actually before the first date is emitted.

37
00:02:35,370 --> 00:02:36,390
How can we do that?

38
00:02:36,390 --> 00:02:40,750
Well, by initializing the Stream subscription inside the Block or Cubitt constructor.

39
00:02:40,770 --> 00:02:46,650
So in our example, we set up an Internet Stream subscription object inside the countercoup constructor.

40
00:02:46,680 --> 00:02:50,870
Since this is where we start listening to the Internet, Bloks emitted states.

41
00:02:50,910 --> 00:02:55,980
However, you need to understand that since you created the stream subscription manually, you also

42
00:02:55,980 --> 00:03:00,430
need to close it manually somewhere so that you won't listen to the stream forever.

43
00:03:00,450 --> 00:03:05,270
You can do this inside the overridden close method from inside any block or cube.

44
00:03:05,360 --> 00:03:09,940
OK, so we established the connection between the two bits, but what's the purpose of it?

45
00:03:09,960 --> 00:03:12,350
The purpose of it lies in the listener function.

46
00:03:12,480 --> 00:03:16,530
There you'll have a stream of internal states coming from the Internet cubitt.

47
00:03:16,530 --> 00:03:22,590
So since we want to counter incremented by one every time the phone is connected to wi fi, all we need

48
00:03:22,590 --> 00:03:27,740
to do is checking if an incoming state is the one corresponding to when the phone is connected to a

49
00:03:27,750 --> 00:03:32,490
fight and as a result will come the counter kibbitz increment function right away.

50
00:03:32,610 --> 00:03:36,790
This is how you can stream subscription in order to establish a block to block connection.

51
00:03:36,840 --> 00:03:38,820
Let's dive ourselves into the coding part.

52
00:03:38,940 --> 00:03:44,770
OK, so after opening project number six inside this code will start by browsing the perspective of

53
00:03:44,770 --> 00:03:45,690
the file here.

54
00:03:45,840 --> 00:03:50,290
We need to add the latest connectivity underscore plus dependancy to our project.

55
00:03:50,310 --> 00:03:56,490
This dependency will help us find out when the phone is connected to either wi fi mobile or to nothing.

56
00:03:56,640 --> 00:03:57,870
Know that on Android.

57
00:03:57,870 --> 00:04:03,450
If the plugin reports a wi fi or mobile connection running on your phone, that doesn't mean it has

58
00:04:03,450 --> 00:04:04,540
Internet connection.

59
00:04:04,560 --> 00:04:09,690
For now, we're only interested if the phone is connected to a network or not and we don't care if that

60
00:04:09,690 --> 00:04:12,310
network sends or retrieve data from the Internet.

61
00:04:12,360 --> 00:04:17,100
Now, let's start by creating our Internet cubitt and move it inside our Cubitt folder.

62
00:04:17,160 --> 00:04:23,520
The first thing I always go after creating a block or Cubitt are its dates, because first and foremost,

63
00:04:23,520 --> 00:04:28,230
you need to know the purpose of your block or Kubi and also what are the possible cases.

64
00:04:28,230 --> 00:04:30,550
It will return as a stream of data.

65
00:04:30,570 --> 00:04:36,300
So by analyzing the documentation of connectivity plus package, we can deduce that the first possible

66
00:04:36,300 --> 00:04:40,920
states are connected to wi fi, connected to mobile and disconnected.

67
00:04:41,070 --> 00:04:46,870
Since there are two almost identical states will create an enum for the type of connection we were using.

68
00:04:46,890 --> 00:04:53,050
There are two types, so we'll have two members for the connection type info, wi fi and mobile.

69
00:04:53,350 --> 00:04:59,370
Now here's an architecture tip number one predefined types enum constants and generally call that.

70
00:04:59,410 --> 00:05:05,080
Doesn't change at all during the life cycle of Europe can be moved inside, the Konstanz folder will

71
00:05:05,080 --> 00:05:07,030
create one inside the folder.

72
00:05:07,060 --> 00:05:13,030
We also need to create an Enum Stoddart file, since every enum you'll create inside your app must lie

73
00:05:13,030 --> 00:05:14,720
down there for easier access.

74
00:05:14,740 --> 00:05:17,080
Therefore, the code will be more organized.

75
00:05:17,230 --> 00:05:22,690
OK, coming back to our Internet states, we have decided to have an Internet connected and internet

76
00:05:22,690 --> 00:05:23,410
disconnected.

77
00:05:23,410 --> 00:05:26,460
State will focus on the Internet connected for a moment.

78
00:05:26,500 --> 00:05:31,670
We know that our phone can be connected to the Internet by using either Wi-Fi or mobile data.

79
00:05:31,690 --> 00:05:35,410
Therefore, the type of connection needs to be specified inside the state.

80
00:05:35,560 --> 00:05:40,930
This can be done by creating a final variable of the connection type will assign it as a required parameter

81
00:05:40,940 --> 00:05:42,000
inside the constructor.

82
00:05:42,010 --> 00:05:47,140
So whenever the Internet Cubitt will meet, a new interconnected state will have to mention the type

83
00:05:47,140 --> 00:05:50,530
of connection we're using, whether it's Wi-Fi or mobile.

84
00:05:50,530 --> 00:05:53,970
By default, every block or cubitt comes with an initial state.

85
00:05:54,160 --> 00:05:58,080
This state is emitted when the block or Cubitt instance gets created.

86
00:05:58,090 --> 00:06:01,930
We know that will instantiate the Internet cubitt when the application starts.

87
00:06:01,960 --> 00:06:08,020
And since the plug in may take some time to detect whether the phone is connected to wi fi or mobile

88
00:06:08,020 --> 00:06:13,360
or to nothing, we'll need to show a loading animation in order to let the user know that something

89
00:06:13,360 --> 00:06:15,370
is actually happening in the background.

90
00:06:15,520 --> 00:06:20,160
So instead of showing an Internet initial state will show an Internet loading state.

91
00:06:20,210 --> 00:06:25,290
Now, if we switch to the Internet with glass, we can notice that when the Internet KUBIS constructor

92
00:06:25,310 --> 00:06:30,280
gets called, the first and immediate Internet state down the stream will be Internet loading.

93
00:06:30,310 --> 00:06:33,850
OK, so we finished coding our internal states successfully.

94
00:06:33,850 --> 00:06:39,310
From this point, I'd like to continue by creating the specific Cubitt methods which will the states

95
00:06:39,310 --> 00:06:40,780
we created previously.

96
00:06:40,810 --> 00:06:46,810
The Imit Internet connected function will take a connection type as a parameter and will emit an Internet

97
00:06:46,810 --> 00:06:51,940
connected state with the same connection type so that we know whether it's the wi fi or mobile data

98
00:06:51,940 --> 00:06:52,840
we're connected to.

99
00:06:52,930 --> 00:06:59,260
Last but not least will create an Internet disconnected function that will end the Internet disconnected

100
00:06:59,260 --> 00:07:00,420
state accordingly.

101
00:07:00,460 --> 00:07:07,840
So to recap, the purpose of this Internet Cubitt is to emit different Internet connection states based

102
00:07:07,840 --> 00:07:10,500
on what is written by the connectivity plus plugin.

103
00:07:10,630 --> 00:07:17,410
Therefore, somehow we need to react to do something in response to the connectivity plus plugin.

104
00:07:17,410 --> 00:07:21,760
So we need to add a dependency of it into the Internet cubitt class.

105
00:07:21,760 --> 00:07:26,890
We can do this by creating a connectivity variable and passing it as a required parameter inside the

106
00:07:26,890 --> 00:07:27,540
constructor.

107
00:07:27,550 --> 00:07:32,290
Let's take a look again at how the plugin returns, the type of connection of your phone, as you can

108
00:07:32,290 --> 00:07:38,650
see it can either return it a single time when we call the check connectivity function or multiple times

109
00:07:38,650 --> 00:07:42,220
through a stream that is internally managed by the plugin.

110
00:07:42,220 --> 00:07:48,070
We're really interested in the latter scenario since we always want to know the state of our connection

111
00:07:48,070 --> 00:07:53,440
as we want to listen to every possible connection type the plugin sends down the stream.

112
00:07:53,590 --> 00:07:54,400
How convenient.

113
00:07:54,430 --> 00:08:00,250
So today, not only will learn how a block can listen to another block, but also how can a block listen

114
00:08:00,250 --> 00:08:02,110
to a specific stream of a plugin?

115
00:08:02,380 --> 00:08:07,650
Both have the same stream subscription approach, so it's amazing that we can tackle out both of them.

116
00:08:07,840 --> 00:08:11,770
OK, since we need our internal QB to listen to the connectivity plus stream.

117
00:08:11,770 --> 00:08:16,570
First and foremost, we need to create a stream subscription so that we'll be able to subscribe to the

118
00:08:16,570 --> 00:08:17,500
specific stream.

119
00:08:17,530 --> 00:08:23,080
Then we'll need to initialize this connectivity stream subscription inside the constructor by subscribing

120
00:08:23,080 --> 00:08:26,930
to the on connectivity change stream and then by listening to it.

121
00:08:26,950 --> 00:08:33,100
So to recap, every time a new connection is noticed by the connectivity plus plugging this on connectivity

122
00:08:33,100 --> 00:08:36,380
change stream will send the connectivity result down the stream.

123
00:08:36,400 --> 00:08:41,820
Currently, our Internet cubitt is just listening to the connectivity results emitted by the plugin,

124
00:08:41,830 --> 00:08:45,140
but we also need to do something in response to them.

125
00:08:45,160 --> 00:08:49,600
We need to meet new Internet states accordingly to what the connectivity result is.

126
00:08:49,600 --> 00:08:55,990
So every time a connectivity result is received down the stream will verify if it's of type connectivity

127
00:08:55,990 --> 00:09:02,380
that wi fi, mobile or not, if it's of type connectivity that wi fi will call the imit.

128
00:09:02,410 --> 00:09:07,930
Internet connected function from inside the cube in the mobile case will change the connection type

129
00:09:07,930 --> 00:09:08,520
to mobile.

130
00:09:08,530 --> 00:09:14,270
And finally, if the connectivity result is of type connectivity result that none will amidst the Internet

131
00:09:14,270 --> 00:09:15,100
disconnected state.

132
00:09:15,100 --> 00:09:20,410
Not that we don't need to meet the Internet loading state since it will be automatically emitted when

133
00:09:20,410 --> 00:09:22,150
the Internet cubitt is created.

134
00:09:22,150 --> 00:09:27,400
If you hover on the connectivity stream subscription variable, you can see that DART is warning you

135
00:09:27,400 --> 00:09:30,490
because the created stream subscription hasn't been closed yet.

136
00:09:30,490 --> 00:09:32,620
We don't want you to be listening forever.

137
00:09:32,620 --> 00:09:35,350
So we'll close the subscription right when the block is closed.

138
00:09:35,350 --> 00:09:38,980
So let's have a little overview of what we did until now.

139
00:09:38,980 --> 00:09:42,100
So we added the connectivity plus dependency in our project.

140
00:09:42,130 --> 00:09:43,750
We created the Internet Cubitt.

141
00:09:43,750 --> 00:09:47,020
We did the respective Internet states inside the Internet Cubitt.

142
00:09:47,020 --> 00:09:50,980
We created the methods from which we can admit our created internal states.

143
00:09:50,980 --> 00:09:57,160
And then we learned how to be can communicate with the plugin by subscribing to its stream of data.

144
00:09:57,190 --> 00:09:58,990
The stream contains the type of connection.

145
00:09:59,060 --> 00:10:04,280
Our phone records during the lifecycle of our app, depending on whether the phone is connected to wi

146
00:10:04,280 --> 00:10:09,210
fi mobile or to nothing, we called our cubitt functions accordingly.

147
00:10:09,230 --> 00:10:09,710
Nice.

148
00:10:09,720 --> 00:10:11,950
We're really making a ton of progress.

149
00:10:11,960 --> 00:10:17,900
What's left for now is how our well known counter cubitt can communicate with the newly created Internet

150
00:10:17,900 --> 00:10:18,340
Cubitt.

151
00:10:18,350 --> 00:10:24,290
Remember that our goal is that whenever the phone is connected to Wi-Fi, the counter should increment

152
00:10:24,290 --> 00:10:27,870
and whenever the phone is connected to mobile, the counter should dichromate.

153
00:10:27,890 --> 00:10:33,110
So let's switch our attention to the counter cubitt since we need a counter to be incremented or decrement

154
00:10:33,110 --> 00:10:38,310
it as a result of a new Internet state, the counter cubitt will be dependent on the Internet cubitt.

155
00:10:38,330 --> 00:10:40,610
So we need to have a final field of type.

156
00:10:40,610 --> 00:10:45,980
Interent Cubitt ready to be initialized inside the counter cubitt constructor as a required field.

157
00:10:45,980 --> 00:10:51,710
Then, in order for the counter to communicate with the Internet, Cubitt will proceed, as we did previously,

158
00:10:51,830 --> 00:10:56,840
by creating a stream subscription which will subscribe to the Internet Cubitt stream of states.

159
00:10:57,020 --> 00:11:01,500
Remember that each block or cubitt has a stream of states you can subscribe to.

160
00:11:01,520 --> 00:11:07,160
Therefore, Internet Cubitt has one too, and will subscribe to it inside countercoup so that whenever

161
00:11:07,160 --> 00:11:12,760
a new Internet state is retrieved down the stream, we can do something in response.

162
00:11:12,770 --> 00:11:18,800
In our case, we need to check whether the received interstate is a type of Internet connected and the

163
00:11:18,800 --> 00:11:25,700
connection type is either wi fi or mobile so that we can call either the increment or Dyckman functions

164
00:11:25,700 --> 00:11:26,510
respectively.

165
00:11:26,570 --> 00:11:31,640
Again, we need to cancel the Internet stream subscription inside the closed method of the cube so that

166
00:11:31,640 --> 00:11:33,440
we won't listen to it forever.

167
00:11:33,470 --> 00:11:35,180
And now here's architecture.

168
00:11:35,180 --> 00:11:36,170
Tip number two.

169
00:11:36,200 --> 00:11:39,170
You have to agree that the code looks a little bit messy now.

170
00:11:39,170 --> 00:11:41,810
So let's refactor it a little bit inside the Internet.

171
00:11:41,810 --> 00:11:46,490
Cubitt, you can see that all we do in the constructor can be extracted to a method.

172
00:11:46,490 --> 00:11:48,800
We can call it monitor Internet connection.

173
00:11:48,800 --> 00:11:53,870
Since this is what the function actually does, we can do the same with the counter cubitt this time

174
00:11:53,870 --> 00:11:59,420
we'll call it monitor Internet Cubitt, since according to the states emitted by it will increment or

175
00:11:59,420 --> 00:12:01,060
decrement our counter value.

176
00:12:01,070 --> 00:12:07,220
All we need to do now is to provide both our internal cubitt and counter cubitt globally to our pages.

177
00:12:07,400 --> 00:12:12,440
But the reality is that the counter cubitt is dependent on the Internet cubitt and the Internet.

178
00:12:12,440 --> 00:12:15,760
Cubitt is also dependent on the connectivity plus plugin.

179
00:12:15,770 --> 00:12:17,210
So what do we do in this case?

180
00:12:17,210 --> 00:12:22,940
What I usually do is instantiate the objects by following the order from the least dependent one to

181
00:12:22,940 --> 00:12:24,260
the most dependent one.

182
00:12:24,260 --> 00:12:29,150
We know that our connectivity plugin doesn't depend on anything, so we'll create it firstly.

183
00:12:29,150 --> 00:12:30,770
And now here's architecture.

184
00:12:30,770 --> 00:12:32,930
Tip number three, a good practice.

185
00:12:32,930 --> 00:12:37,400
When you want to create a standalone instance, which is an instance that doesn't depend on anything,

186
00:12:37,400 --> 00:12:42,530
is to create it at the top inside the main function and then inject it into the app.

187
00:12:42,530 --> 00:12:45,100
In our case, within the app glass.

188
00:12:45,110 --> 00:12:51,440
This way, our dependent cubits, blocks or repositories can use their specific methods like block provider,

189
00:12:51,470 --> 00:12:57,320
repository provider to create and also inject themselves into the rest of the app accordingly while

190
00:12:57,320 --> 00:13:00,290
also having access to the required dependencies.

191
00:13:00,320 --> 00:13:03,290
Of course, this varies on the way you chose the provider blocks.

192
00:13:03,290 --> 00:13:07,060
As we learned in the previous tutorial, all you need to do is to adapt to your needs.

193
00:13:07,100 --> 00:13:12,140
Now we need to modify the UI of the home screen a little bit just to double check that everything works

194
00:13:12,140 --> 00:13:17,540
will also place a block builder which will rebuild a text widget accordingly to the current internal

195
00:13:17,540 --> 00:13:17,900
state.

196
00:13:17,900 --> 00:13:23,930
So whenever the interstate is Internet connected, will display either wi fi or more, but also when

197
00:13:23,930 --> 00:13:28,850
the interstate is Internet disconnected, will display a disconnected text widget on the screen.

198
00:13:28,880 --> 00:13:34,730
Finally, when the interstate is Internet loading, will use a circular progress indicator to let the

199
00:13:34,730 --> 00:13:40,220
user know that some process is actually running in the background will also disable the plus and minus

200
00:13:40,220 --> 00:13:42,950
buttons since we won't use their functionality anymore.

201
00:13:42,980 --> 00:13:47,270
I also need some refactoring to the UI code, which only beautifies our app.

202
00:13:47,270 --> 00:13:51,380
You don't need to do that since we only care about the functionality right now.

203
00:13:51,380 --> 00:13:53,510
We can finally save and run the application.

204
00:13:53,510 --> 00:13:58,760
And as you can see, when it finds out that the phone is connected to wi fi, a new Internet connected

205
00:13:58,760 --> 00:14:01,910
state is emitted and the UI rebuilds accordingly.

206
00:14:01,910 --> 00:14:08,420
You can also notice that the counter cubitt successfully retrieved the new internal state, too, since

207
00:14:08,420 --> 00:14:10,760
it incremented the value by one.

208
00:14:10,760 --> 00:14:15,170
And if we turn off the wi fi and connect to mobile data, you'll see the same behavior.

209
00:14:15,440 --> 00:14:21,140
This time, though, the counter will decrement when no Internet connection is available, though the

210
00:14:21,140 --> 00:14:25,070
application displays it properly and the counter doesn't do anything.

211
00:14:25,070 --> 00:14:30,590
Since it wasn't programmed to do anything as a response to the state, we finally succeeded tackling

212
00:14:30,590 --> 00:14:34,820
up this block to block communication scenario by using stream subscriptions.

213
00:14:34,820 --> 00:14:40,910
I hope that from the above code you learned even more than that, since we also improved our block architecture

214
00:14:40,910 --> 00:14:42,220
structure even more.

215
00:14:42,350 --> 00:14:47,270
Let's have a minute and talk a little bit about the pros and cons of the stream subscription way of

216
00:14:47,270 --> 00:14:48,770
communicating between blocks.

217
00:14:48,770 --> 00:14:54,710
Well, for me, the advantage is that the code looks really understandable, readable and easy to structure

218
00:14:54,710 --> 00:14:55,460
and maintain.

219
00:14:55,460 --> 00:14:58,640
This method will also help you practice your stream skills.

220
00:14:58,930 --> 00:15:03,100
Stream subscription is the foundation of subscribing and listening to the stream flow.

221
00:15:03,150 --> 00:15:09,060
A disadvantage may be that if you have lots and lots of block to block communications, you may be overwhelmed

222
00:15:09,060 --> 00:15:11,620
by the number of stream subscriptions you need to create.

223
00:15:11,640 --> 00:15:17,820
But most importantly, close things can get pretty cluttered in a big application, and huge memory

224
00:15:17,820 --> 00:15:19,500
leaks may appear as a result.

225
00:15:19,530 --> 00:15:24,360
So if you're not really ready to manage the stream subscriptions, you need to take a look at the next

226
00:15:24,360 --> 00:15:26,640
method used to communicate between blocks and.

227
00:15:27,450 --> 00:15:33,330
Remember that in my third Flutter Block concept story of the series, I specifically introduced you

228
00:15:33,330 --> 00:15:35,250
to a widget called Block Listener.

229
00:15:35,250 --> 00:15:41,700
If you remember, this widget was meant to be used only when you want to do something in response to

230
00:15:41,700 --> 00:15:43,780
a block or cubitt state change.

231
00:15:43,800 --> 00:15:48,570
For example, we use block listner to show an increment or decrements snack.

232
00:15:48,580 --> 00:15:54,630
But so what prevents us from using the block listener in order to do something in response to a new

233
00:15:54,630 --> 00:15:55,040
state?

234
00:15:55,050 --> 00:15:56,300
Absolutely nothing.

235
00:15:56,310 --> 00:15:58,290
But why would we do that?

236
00:15:58,620 --> 00:16:02,160
What is the advantage of this over the stream subscription method?

237
00:16:02,310 --> 00:16:07,260
Well, the advantage is that you don't need to create a stream subscription anymore since the Block

238
00:16:07,260 --> 00:16:10,420
or Cubitt manages it internally from the start.

239
00:16:10,440 --> 00:16:15,690
So in having many blocks communicating with each other, you don't need to think of which subscription

240
00:16:15,690 --> 00:16:17,170
you should cancel or create.

241
00:16:17,190 --> 00:16:23,400
Everything is being taken care of under the hood at the first glance since the Block listener is a widget

242
00:16:23,400 --> 00:16:28,980
and must be placed inside the widget, you may feel like doing something in response to a state change

243
00:16:28,980 --> 00:16:32,040
inside the UI introduces logic inside.

244
00:16:32,040 --> 00:16:38,700
The UI therefore violates our architecture principle of isolating the logic from the UI.

245
00:16:38,820 --> 00:16:45,270
This is wrong because calling a new Cubitt function or adding a new block event isn't related to the

246
00:16:45,270 --> 00:16:46,350
logic of the app.

247
00:16:46,350 --> 00:16:53,130
It's just a notifier on what the block or kibbitz should do is just notifying the block what to do,

248
00:16:53,220 --> 00:16:54,690
not how to do it.

249
00:16:54,810 --> 00:16:59,100
Hence by using the block listner widget in order to do something in response to a state.

250
00:16:59,100 --> 00:17:01,140
Change isn't related to logic.

251
00:17:01,200 --> 00:17:03,750
OK, let's get into the coding part of this method.

252
00:17:03,750 --> 00:17:09,510
So definitely the most important advantage over stream subscription is the fact that we don't need to

253
00:17:09,510 --> 00:17:12,710
create or manage the stream subscriptions manually.

254
00:17:12,720 --> 00:17:16,589
So that's reflected the code and delete the subscriptions from inside the counter.

255
00:17:16,589 --> 00:17:21,690
Cubitt, we don't even need the Internet blog dependancy anymore since we'll just listen to it by using

256
00:17:21,690 --> 00:17:23,670
block listener inside the widget tree.

257
00:17:23,670 --> 00:17:28,500
So the counter cubitt class will actually be having just its plain functionality in there.

258
00:17:28,500 --> 00:17:33,720
But now inside the homescreen page we can add a block listener somewhere here.

259
00:17:33,750 --> 00:17:35,250
Doesn't really matter where.

260
00:17:35,280 --> 00:17:41,580
As long as there is a context containing the block or Cubitt, you want to react to the incoming status.

261
00:17:41,580 --> 00:17:47,370
So in our case, the context should contain both the Internet, covid and counter cubitt unique instances.

262
00:17:47,370 --> 00:17:51,500
We provided them globally, so they're available everywhere inside the app.

263
00:17:51,510 --> 00:17:56,550
I like to wrap the top of the widget three of the page with the Block listener so that it looks more

264
00:17:56,550 --> 00:17:57,230
organized.

265
00:17:57,240 --> 00:18:00,120
Remember that Block listener is different to block builder.

266
00:18:00,120 --> 00:18:06,540
Block listener just listens to a stream of data while Lochbihler listens and rebuilds the UI based on

267
00:18:06,540 --> 00:18:07,410
a stream of data.

268
00:18:07,410 --> 00:18:13,170
So it's safe to place block listener at the top of the tree since it won't rebuild anything inside the

269
00:18:13,170 --> 00:18:13,410
block.

270
00:18:13,410 --> 00:18:19,190
Listener will listen to the Internet covid and act accordingly by calling the behavior that we want.

271
00:18:19,200 --> 00:18:25,560
If the internal state is of type Internet connected and the Internet type is wi fi will call the increment

272
00:18:25,560 --> 00:18:27,000
function of the countercoup.

273
00:18:27,210 --> 00:18:30,840
If it's of type mobile will call the Degremont one again.

274
00:18:30,840 --> 00:18:37,290
We can access the countercoup unique provided instance by either calling context that block or provider

275
00:18:37,290 --> 00:18:37,980
that of.

276
00:18:37,980 --> 00:18:43,470
Now, if we save and run the project, you will see that the application has exactly the same functionality

277
00:18:43,500 --> 00:18:45,350
as with the stream subscription method.

278
00:18:45,360 --> 00:18:50,160
So what about the pros and cons of this block listener approach compared to the stream subscription?

279
00:18:50,160 --> 00:18:55,980
Once Inside Block Listener Block Library takes care internally of all these streams subscriptions,

280
00:18:55,980 --> 00:19:01,920
so we don't need to spend extra time verifying where they were created or closed in the first place

281
00:19:01,920 --> 00:19:02,820
in the same time.

282
00:19:02,850 --> 00:19:09,000
Adding Block listeners inside your UI may also create some readability issues if you have a lot of them

283
00:19:09,000 --> 00:19:10,370
stacked one over another.

284
00:19:10,380 --> 00:19:12,360
So at the end of the day, it's up to you.

285
00:19:12,360 --> 00:19:13,950
What's the method you'll be approaching?

286
00:19:13,950 --> 00:19:14,580
More or less?

287
00:19:14,940 --> 00:19:18,180
Let me know in the comments section which one you actually prefer the most.

288
00:19:18,180 --> 00:19:20,850
I hope you enjoyed this chapter in the next one.

289
00:19:20,850 --> 00:19:24,300
I will get really in-depth on how to context works.

290
00:19:24,300 --> 00:19:25,710
This is an important topic.

291
00:19:25,710 --> 00:19:28,860
I noticed most of the tutorials failed to explain properly.

292
00:19:28,860 --> 00:19:34,770
Will understand together how Futter builds the widget tree in the background and help build context

293
00:19:34,770 --> 00:19:37,050
helps towards organising and structuring it.

294
00:19:37,050 --> 00:19:42,360
Believe me, if you have any doubts on how context works along with Flutter and Block, after watching

295
00:19:42,360 --> 00:19:45,360
this next chapter, you won't have anything more to worry about.

296
00:19:45,360 --> 00:19:50,550
With that being said, I'm looking forward to seeing each and every one of you in the next chapter detuned

297
00:19:50,760 --> 00:19:51,990
and let's get wicked.

