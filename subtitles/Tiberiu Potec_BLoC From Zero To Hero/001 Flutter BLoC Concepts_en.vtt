WEBVTT
1
00:00:00.120 --> 00:00:03.830
Hello, everyone, and welcome back to the third chapter of discourse.

2
00:00:04.590 --> 00:00:11.010
Remember the concepts we discussed in the previous chapter, the streams, cubits and blocks, because

3
00:00:11.010 --> 00:00:17.240
we will use them as the foundation when learning the new flutter block concepts.

4
00:00:17.880 --> 00:00:23.250
There are some important basic flutter concepts you really need to understand before getting our hands

5
00:00:23.250 --> 00:00:25.410
dirty with flutter block concepts.

6
00:00:25.410 --> 00:00:30.470
So we'll begin with these first in order to make sure everything goes nicely into place.

7
00:00:30.510 --> 00:00:36.510
Let me start by highlighting the proverb Everyone interested in Flutter heard at least once.

8
00:00:36.870 --> 00:00:39.390
Everything in Flutter is a widget, right?

9
00:00:39.660 --> 00:00:42.000
So it's most that the like button, if you knew that.

10
00:00:42.030 --> 00:00:47.820
Well, since in this video will be discussing floatable concepts, you must know that every concept

11
00:00:47.820 --> 00:00:49.680
is actually a widget.

12
00:00:49.860 --> 00:00:52.260
But what exactly is a widget?

13
00:00:52.380 --> 00:00:58.240
Widgets in Flutter are classes, classes which have their own attributes and methods.

14
00:00:58.290 --> 00:01:05.040
These classes can be instantiated as objects by defining the required parameters and methods into their

15
00:01:05.040 --> 00:01:05.820
constructor.

16
00:01:05.950 --> 00:01:09.930
As an example, let's take a look at the floating action button widget.

17
00:01:10.170 --> 00:01:15.510
As you can see, there are all sorts of parameters passed through the constructor of this widget, the

18
00:01:15.510 --> 00:01:20.820
foreground color, the background color, the unpressed function and many, many more.

19
00:01:20.850 --> 00:01:27.690
If you tap control and click on the widget, the code will open a tab which contains the floating action

20
00:01:27.690 --> 00:01:35.730
button widget, which, as I told you, is actually a class with all kinds of attributes from primitive

21
00:01:35.730 --> 00:01:43.650
types like booleans, strings, double's integers to functions and even other widgets.

22
00:01:43.950 --> 00:01:47.960
You may have also noticed that some widgets have a child parameter.

23
00:01:48.090 --> 00:01:49.770
Well, what could be that for?

24
00:01:50.100 --> 00:01:55.590
Well, since everything in Flutter is a widget, there must be a way for the framework to keep them

25
00:01:55.590 --> 00:01:56.190
organized.

26
00:01:56.190 --> 00:01:56.670
Right.

27
00:01:56.670 --> 00:02:01.910
And what's a better way to nest and organize stuff than using a tree?

28
00:02:01.970 --> 00:02:03.180
Observe this picture.

29
00:02:03.330 --> 00:02:05.280
Take a look at the top of the tree.

30
00:02:05.430 --> 00:02:06.450
That's the root.

31
00:02:06.450 --> 00:02:10.699
Note below that you can see two other widgets emerging from it.

32
00:02:11.070 --> 00:02:12.660
These are the children.

33
00:02:12.900 --> 00:02:17.280
The above widget is also called the parent widget audience.

34
00:02:17.310 --> 00:02:17.790
Yes, sir.

35
00:02:17.790 --> 00:02:23.960
And that's how the tree evolves for every widget until there are no more children inside the tree.

36
00:02:23.970 --> 00:02:30.270
Now that we know what a widget is and how Flutter organizes them, let's start with the first flutter

37
00:02:30.270 --> 00:02:33.210
block concept, which is block providers.

38
00:02:33.240 --> 00:02:36.060
Now, a quick note so that you won't get confused.

39
00:02:36.180 --> 00:02:42.060
Remember that in the previous video I talked about cubits and blocks and the difference between the

40
00:02:42.180 --> 00:02:46.080
well, there won't be a block provider and a separate cable provider.

41
00:02:46.080 --> 00:02:52.470
In this case, Cubitt is a smaller part of a block, so it works the same as a block with block provider

42
00:02:52.710 --> 00:02:59.190
has every flutter block feature I will discuss today will apply to both cubits and blocks.

43
00:02:59.520 --> 00:03:05.220
So have you ever asked yourself, after you build your first block, how will you access it in your

44
00:03:05.220 --> 00:03:05.730
UI?

45
00:03:06.120 --> 00:03:09.480
How will you access it inside Flautre in the first place?

46
00:03:09.480 --> 00:03:15.720
You might say that you will create a block object for every widget where it may be useful, if that's

47
00:03:15.720 --> 00:03:16.680
what you are thinking.

48
00:03:16.680 --> 00:03:19.620
Well, it's actually pretty wrong.

49
00:03:19.890 --> 00:03:21.930
I mean, extremely wrong.

50
00:03:22.110 --> 00:03:27.960
What if you have an internal block which manages the current state of the app in different network scenarios?

51
00:03:28.110 --> 00:03:33.270
Think about how many widgets should have a working instance of the internal block available.

52
00:03:33.270 --> 00:03:38.940
So creating an instance for every widget that needs it is a terrible idea.

53
00:03:38.970 --> 00:03:42.780
Instead, what you must use is the block provide a widget.

54
00:03:43.170 --> 00:03:49.680
Block provider is a flutter widget which creates and provides a block to all of its children.

55
00:03:49.710 --> 00:03:57.780
This is also known as a dependency injection widget so that a single instance of a block can be provided

56
00:03:57.780 --> 00:04:00.380
to multiple widgets within a subtree.

57
00:04:00.510 --> 00:04:08.130
In other words, the entire subtree will benefit from a single instance of a block injected into it.

58
00:04:08.160 --> 00:04:12.450
Hence the subtree will be dependent on the block we're providing.

59
00:04:12.570 --> 00:04:20.100
So, for example, if we instantiate a block provider with a block A here at the top, it will be available

60
00:04:20.100 --> 00:04:22.140
through the entire subtree below it.

61
00:04:22.530 --> 00:04:28.260
If we instantiated here in the middle part of the three, the block instance will be available only

62
00:04:28.260 --> 00:04:32.070
to the nodes below and to none of the ones above.

63
00:04:32.180 --> 00:04:38.940
Notice how block provider creates the single instance of the block using a function which takes the

64
00:04:38.940 --> 00:04:48.090
build context as an argument and returns the only one instance of block a bill context is like its name

65
00:04:48.090 --> 00:04:52.920
is implying the context in which a specific widget is built.

66
00:04:53.190 --> 00:04:59.400
So we'll have the current widget context and will be instantiating the Block A to all of its widgets.

67
00:04:59.830 --> 00:05:06.910
In the subtree, but how can we access it in the subtree, the single instance of Blook A can be accessed

68
00:05:06.910 --> 00:05:16.360
by calling block provider that of block context or even simpler, by calling context that block or block

69
00:05:16.450 --> 00:05:22.870
an optimization technique block provider offers is that by default it will create the block Lezley,

70
00:05:23.080 --> 00:05:29.860
meaning that the create function will get executed when the block is looked up for via block provider

71
00:05:29.860 --> 00:05:35.620
of block a context so that there won't be a ton of created blocks when they're not needed inside the

72
00:05:35.620 --> 00:05:41.740
app to override this behavior and for the block provider to create function to be run immediately as

73
00:05:41.740 --> 00:05:42.740
soon as possible.

74
00:05:42.790 --> 00:05:46.600
Lazy can be said to force inside the widgets parameters.

75
00:05:47.020 --> 00:05:47.830
They can mine that.

76
00:05:47.830 --> 00:05:55.270
Even though block provider is responsible for creating the block, it will also automatically close

77
00:05:55.270 --> 00:05:59.890
the block so that there won't be any stream leaks all over the place.

78
00:06:00.190 --> 00:06:05.410
OK, so this is what happens locally when you have only a screen in Europe.

79
00:06:05.410 --> 00:06:11.890
But what is it going to happen where there will be a new portion of the three available to the existing

80
00:06:11.890 --> 00:06:12.170
one?

81
00:06:12.430 --> 00:06:18.790
This scenario can happen when we push a new screen into the navigation routing feature of Flutter.

82
00:06:19.030 --> 00:06:21.990
Is the block a going to be available there, too?

83
00:06:22.420 --> 00:06:24.000
The answer is no.

84
00:06:24.130 --> 00:06:30.520
And that's because there is another context created on the new route, a context which the block provider

85
00:06:30.520 --> 00:06:31.820
doesn't know yet.

86
00:06:31.960 --> 00:06:38.740
So in order to pass the only instance of the block to the new route, we will use block provider that

87
00:06:38.740 --> 00:06:46.570
value in which we'll pass the blockade to the value parameter, thus making the instance of it propagate

88
00:06:46.690 --> 00:06:48.020
through the next widgets.

89
00:06:48.190 --> 00:06:54.310
Note that in this case, the block provider, that value won't close the block automatically, since

90
00:06:54.310 --> 00:06:59.440
we still want the block to be accessible to the assessor tree above.

91
00:06:59.740 --> 00:07:06.940
Since we initially instantiated the block with block provider, it will, as I said, handle the closing

92
00:07:06.940 --> 00:07:08.440
part automatically.

93
00:07:08.620 --> 00:07:10.330
This was a brief introduction.

94
00:07:10.360 --> 00:07:13.230
How Block can be accessed inside flutter.

95
00:07:13.240 --> 00:07:20.470
But we will have a separate video in which I'll talk more in-depth about block access across every possible

96
00:07:20.470 --> 00:07:21.090
scenario.

97
00:07:21.460 --> 00:07:27.400
Now, as an example, to make sure you understand the block provider concept by actually practicing

98
00:07:27.400 --> 00:07:32.880
it, we will start implementing the default counter app from Flutter using Block.

99
00:07:32.890 --> 00:07:35.320
So let's start by creating a Futter project.

100
00:07:35.470 --> 00:07:41.770
You can name it whatever you want and then add the flutter underscore block dependencies into the spec

101
00:07:41.770 --> 00:07:48.790
that YAML file know that I'm also using the block the extension, so I recommend it to download it because

102
00:07:48.790 --> 00:07:52.420
believe me, it will make your life easier along the way.

103
00:07:52.600 --> 00:07:58.570
Since the counter feature of the app we want to implement is really simple, we will start by creating

104
00:07:58.570 --> 00:08:01.870
a new Kubis called Counter Cubitt.

105
00:08:02.020 --> 00:08:09.400
From here, I will start by coding an implementation that will be more extensive and self-explanatory

106
00:08:09.670 --> 00:08:12.130
instead of a quicker and abstract one.

107
00:08:12.190 --> 00:08:17.680
I'm doing this so that you understand all the concepts really, really well.

108
00:08:18.060 --> 00:08:24.760
So in the folder created by Cube, it will open the counter state dot dot file and modify it so that

109
00:08:24.760 --> 00:08:28.080
it only includes the counter state class.

110
00:08:28.270 --> 00:08:34.780
This class will be the blueprint for all the possible states which will be emitted by the Cubitt.

111
00:08:35.080 --> 00:08:41.380
Since this class must have the counter value, let's write it down and also create a constructor for

112
00:08:41.380 --> 00:08:41.590
it.

113
00:08:41.890 --> 00:08:49.780
The application must have a valid counter value at all times, so every time will have a new state emerging

114
00:08:49.780 --> 00:08:50.650
from the cubitt.

115
00:08:50.950 --> 00:08:54.400
The counter value must be a required attribute.

116
00:08:54.730 --> 00:09:00.480
Has annotating it with the required keyword now inside the counter cubitt file.

117
00:09:00.490 --> 00:09:04.360
Firstly, we need to set the initial state of the counter.

118
00:09:04.360 --> 00:09:07.930
Cubitt, can you think about what the initial state is?

119
00:09:08.200 --> 00:09:11.230
Well, it is definitely going to be a state.

120
00:09:11.530 --> 00:09:14.050
So we will select the counter state class.

121
00:09:14.260 --> 00:09:21.400
Then, as you can see, will receive an error inside VTS kilt telling us that the counter value parameter

122
00:09:21.670 --> 00:09:22.720
is required.

123
00:09:23.200 --> 00:09:25.960
So we need to pass it inside the constructor.

124
00:09:26.260 --> 00:09:33.670
The initial state of the counter up will have the zero value, so we'll set the counter value to zero.

125
00:09:34.180 --> 00:09:41.830
Then all we have to do is implement the increment and decrement functions which will meet new counter

126
00:09:41.830 --> 00:09:42.310
states.

127
00:09:42.550 --> 00:09:49.270
So the increment function will omit a new counter state with a new counter value passed into its constructor

128
00:09:49.600 --> 00:09:54.460
account or value, which is going to be equal to the current counter value.

129
00:09:54.790 --> 00:09:55.930
Plus one.

130
00:09:56.350 --> 00:09:59.620
You can access the current state of a cubit by using.

131
00:09:59.700 --> 00:10:07.140
A state key word, this will return an instance of the current state of our counter and by saying stay

132
00:10:07.150 --> 00:10:14.130
that counter value will receive the counter value of our current counter state, the same procedure

133
00:10:14.130 --> 00:10:15.930
applies to the decrement function.

134
00:10:15.960 --> 00:10:22.740
The only difference being that instead of adding one will subtract one from the current counter value.

135
00:10:23.010 --> 00:10:29.340
OK, so we finally created the counter cubitt successfully by using everything we learned in the previous

136
00:10:29.340 --> 00:10:29.970
tutorial.

137
00:10:30.000 --> 00:10:35.670
Now it's time to link the Cubitt to the UI using the first concept we learned today.

138
00:10:36.030 --> 00:10:37.410
The block provider.

139
00:10:37.500 --> 00:10:44.440
As you can see in the main, that dirt file, the top of the tree is actually the material app widget.

140
00:10:44.640 --> 00:10:48.350
This is where the tree starts from in most of the other apps.

141
00:10:48.360 --> 00:10:54.390
So from what we've learned today, in order to make our counter cubitt available throughout the entire

142
00:10:54.390 --> 00:11:01.500
tree over app, we must create a block provider with it at our material app level.

143
00:11:01.800 --> 00:11:09.840
So all we have to do is select the material app and then click control plus period to open up this dialogue

144
00:11:09.840 --> 00:11:12.550
and then select Ruppe with Block Provider.

145
00:11:12.750 --> 00:11:17.730
I told you the block fiasco's extension will come in handy then into the create parameter.

146
00:11:17.730 --> 00:11:23.940
All we need to do is to take the current context and return a counter cubitt instance.

147
00:11:24.120 --> 00:11:28.890
Make sure you also import the flutter underscore block up there into the import section.

148
00:11:28.950 --> 00:11:36.540
OK, so what we did now is we told Flutter to create a single and unique instance of the counter cubitt

149
00:11:36.540 --> 00:11:42.150
and make it available to the subtree below material app widget onto our homepage.

150
00:11:42.150 --> 00:11:48.750
We will adapt the code a little bit by adding a real child to the column widget AROW, which will contain

151
00:11:48.750 --> 00:11:55.690
two children, the two floating action buttons which are supposed to increment or decrement the counter.

152
00:11:55.830 --> 00:12:01.560
Remember what I said when we started learning block that for every interaction and user makes with the

153
00:12:01.560 --> 00:12:07.290
app, there should be a state emerging from the app letting the user know what's going on.

154
00:12:07.800 --> 00:12:13.920
Having that in mind, we conclude that for every step of either of these two buttons, there should

155
00:12:13.920 --> 00:12:18.960
be a new counter state, perhaps counter value shown on the screen.

156
00:12:18.990 --> 00:12:24.750
To do that, we need to call the increment or decrement functions on the Cubitt instance.

157
00:12:24.960 --> 00:12:27.670
But how do we access the instance of the Cubitt?

158
00:12:27.690 --> 00:12:34.500
As I told you before, either by calling block provider of counter cubitt context or with in context

159
00:12:34.500 --> 00:12:41.490
that block of counter cubitt, then all we have to do is to parse the incremental decrement functions

160
00:12:41.490 --> 00:12:48.330
onto the unpressed parameter on the floating auction buttons, which tells us that every time we press

161
00:12:48.330 --> 00:12:56.190
one of these buttons, the cubitt, that increment or decrement functions will be called adding or subtracting

162
00:12:56.190 --> 00:12:58.080
one to the current state.

163
00:12:58.230 --> 00:13:03.140
The question now is how do we receive the new state inside the UI?

164
00:13:03.150 --> 00:13:08.690
How do we rebuild the specific text widget which prints out the counter value?

165
00:13:08.820 --> 00:13:14.910
It is now time to introduce the second important flutter block concept, which is block builder.

166
00:13:15.150 --> 00:13:23.470
Block Builder is, as its name suggests, a widget which helps rebuilding the UI based on some blocks

167
00:13:23.470 --> 00:13:24.490
state changes.

168
00:13:24.720 --> 00:13:32.430
This is the magic component which revealed the UI every single time a new state is emitted by either

169
00:13:32.430 --> 00:13:33.980
block or cubie.

170
00:13:34.320 --> 00:13:41.280
If you watched my previous video on Block Concepts, you have to know that this block builder is actually

171
00:13:41.460 --> 00:13:45.630
you waiting for the boats your friend sent down the river.

172
00:13:45.780 --> 00:13:52.710
You are the block builder waiting for the boat and its number so that you can rebuild the UI by calling

173
00:13:52.740 --> 00:13:53.920
the number out loud.

174
00:13:54.210 --> 00:14:01.110
Now you have to understand that rebuilding a large chunk of the UI inside your app may take a lot of

175
00:14:01.110 --> 00:14:02.150
time to compute.

176
00:14:02.160 --> 00:14:08.850
So that's why a good practice would be to wrap the exact part of the UI you want to rebuild inside block

177
00:14:08.850 --> 00:14:14.880
builder, for example, if you have a text widget which updates from a sequence of omitted states and

178
00:14:14.880 --> 00:14:19.200
that text is inside a sign of columns, rows and other widgets.

179
00:14:19.440 --> 00:14:24.510
It is a huge mistake to rebuild all of them just to update the text widget.

180
00:14:24.660 --> 00:14:30.700
Instead, what you should do is rebuild only the text widget by wrapping it inside.

181
00:14:30.720 --> 00:14:38.430
Lochbihler syntax wise block builder is a widget which requires a block or cubitt and the builder function.

182
00:14:38.760 --> 00:14:44.910
The builder function will potentially be called many times due to how flutter engine works behind the

183
00:14:44.910 --> 00:14:51.960
scenes and should be a pure function that returns a widget in response to a state.

184
00:14:52.080 --> 00:14:54.240
So what is a pure function, you might ask?

185
00:14:54.510 --> 00:14:58.880
Well, a function where the return value depends on.

186
00:14:58.960 --> 00:15:06.220
The on the functions, arguments and no others, thus making it pure, so in this case, our builder

187
00:15:06.220 --> 00:15:13.570
function should return a widget, which only depends on the context and state parameters and nothing

188
00:15:13.810 --> 00:15:14.350
more.

189
00:15:14.500 --> 00:15:20.740
If the cubitt or block is not provided, the block builder will automatically perform a look up for

190
00:15:20.740 --> 00:15:24.700
each instance using block provider and the current build context.

191
00:15:25.090 --> 00:15:30.500
Now for even more control of when should the block builder rebuild the UI.

192
00:15:30.550 --> 00:15:34.300
There is another parameter which you can use called build.

193
00:15:34.300 --> 00:15:40.660
When this you take in a function having the previous state and the current state as parameters.

194
00:15:40.660 --> 00:15:46.270
For example, if the current state contains a tax value and that tax value is greater than the previous

195
00:15:46.270 --> 00:15:52.060
state tax value, you can return false so that the builder function won't trigger and won't rebuild

196
00:15:52.060 --> 00:15:52.610
the UI.

197
00:15:52.750 --> 00:15:57.870
OK, so it is now time to integrate Block Builder with our counter app example.

198
00:15:57.880 --> 00:16:01.420
We left the app open inside the main that dart file.

199
00:16:01.450 --> 00:16:07.340
The counter value of the app should be printed right inside this text widget right here.

200
00:16:07.360 --> 00:16:14.950
Now all we have to do is to wrap this specific text widget into a block builder by clicking control

201
00:16:14.950 --> 00:16:18.580
plus period and selecting block builder.

202
00:16:18.710 --> 00:16:24.340
Not that I could have wrapped the entire center widget with a block builder instead, but that would

203
00:16:24.340 --> 00:16:31.150
be wrong performance wise, since the builder function will rebuild the entire widget tree instead of

204
00:16:31.150 --> 00:16:36.290
only the specific part we're interested in, which is the text value.

205
00:16:36.430 --> 00:16:39.010
OK, so now into the builder function.

206
00:16:39.010 --> 00:16:44.860
For every new emitted counter state, the text widget will show a new value.

207
00:16:44.860 --> 00:16:51.870
The value can be accessed by calling state, not counter value and then by convert it to a string.

208
00:16:52.120 --> 00:16:58.780
Since we know that the value is actually an integer, it is finally time to test out our app, a moment

209
00:16:58.780 --> 00:17:01.230
which we've been waiting for so long.

210
00:17:01.570 --> 00:17:02.890
So let's run it together.

211
00:17:03.140 --> 00:17:08.890
As you can see, when I'm pressing the button, the counter Cubitt calculates the new counter value

212
00:17:08.890 --> 00:17:17.980
and meets a new counter state with the new counter value, and then UI rebuilds with that specific value.

213
00:17:18.280 --> 00:17:24.339
To make this rebuilding process even more clear, take a look at how I can play with the limited states.

214
00:17:24.339 --> 00:17:29.890
I can check whether the state that counts or value is negative and print a negative text widget.

215
00:17:30.010 --> 00:17:37.690
I can check if the counter value is even and print yay or I can check if the counter very is equal to

216
00:17:37.690 --> 00:17:41.970
five and print number five into the UI.

217
00:17:42.190 --> 00:17:46.810
I hope you can now understand the power of streams states and block.

218
00:17:46.960 --> 00:17:52.930
It may seem like Block is a little overkill for a counter app, but in order to understand the concepts,

219
00:17:53.140 --> 00:18:00.550
we need to try them on simple examples and then see the power of it and what amazing apps and features

220
00:18:00.550 --> 00:18:02.200
you can build by using it.

221
00:18:02.410 --> 00:18:08.200
I hope you understood the block builder concept because it's now time to move on to another flutter

222
00:18:08.200 --> 00:18:11.440
block concept, which is block listner.

223
00:18:11.680 --> 00:18:18.520
Block Listner has mainly the same structure as block builder, but it is really different in many ways.

224
00:18:18.520 --> 00:18:24.400
You see, the block builder function can be called multiple times inside the flutter engine due to how

225
00:18:24.400 --> 00:18:26.740
flutter engine works behind the scenes.

226
00:18:26.740 --> 00:18:33.790
So, for example, navigating to another screen can't be done inside Block Builder as a response to

227
00:18:33.790 --> 00:18:39.850
a state change because this action can be actually done multiple times.

228
00:18:40.130 --> 00:18:43.690
Imagine the builder function inside being called five times.

229
00:18:43.720 --> 00:18:48.520
Would you want the new screen to be pushed inside the navigation stack five times?

230
00:18:48.910 --> 00:18:49.600
No way.

231
00:18:49.720 --> 00:18:50.350
Or one.

232
00:18:50.350 --> 00:18:56.320
If you want to show a snack bar or a dialogue for a new arriving state, the builder function may be

233
00:18:56.320 --> 00:19:00.550
called four times by the flutter engine, rebuilding the UI accordingly.

234
00:19:00.880 --> 00:19:08.110
But the snack bar will be shown four times as well as the dialog box, which pretty much is not what

235
00:19:08.110 --> 00:19:08.710
we want.

236
00:19:08.980 --> 00:19:13.330
This is where Block Listener comes into place as its name suggests.

237
00:19:13.330 --> 00:19:19.390
This is a flutter widget which listens to any state change as Block Builder does.

238
00:19:19.600 --> 00:19:26.020
But instead of building a widget, as block builder did with the builder function, it takes a simple

239
00:19:26.020 --> 00:19:34.600
void function called listner, which is called only once per state, not including the initial state.

240
00:19:34.750 --> 00:19:36.970
Again, for fine grained control.

241
00:19:37.090 --> 00:19:43.300
There is also a list and when parameter function you can pass to tell the block listener when to call

242
00:19:43.300 --> 00:19:50.140
the listener function or not as build one parameter was for the block builder widget to understand block

243
00:19:50.140 --> 00:19:51.280
listener easily.

244
00:19:51.400 --> 00:19:53.440
What we want to do is the following.

245
00:19:53.680 --> 00:19:58.660
Every time the user presses plus or minus buttons, there should be a snack bar.

246
00:19:58.810 --> 00:20:05.680
Showing in the bottom part of the screen saying incremented or degremont it, depending, of course,

247
00:20:05.680 --> 00:20:07.180
on which button was pressed.

248
00:20:07.210 --> 00:20:09.130
Can you guess how we're going to do that?

249
00:20:09.250 --> 00:20:10.550
Let's start with the beginning.

250
00:20:10.570 --> 00:20:16.720
So what happens when we press either of these two buttons, the increment or decrement function from

251
00:20:16.720 --> 00:20:18.690
inside the cube, it gets cold.

252
00:20:18.790 --> 00:20:20.500
What do these functions do?

253
00:20:20.650 --> 00:20:25.870
Well, they emit a new counter state with the new increment or diclemente the counter value.

254
00:20:26.020 --> 00:20:30.840
So this is mainly where Flutter understands what the press button does.

255
00:20:30.850 --> 00:20:38.120
And this is where we should tell flutters UI to a state that we incremented or diclemente the value.

256
00:20:38.170 --> 00:20:44.860
So all we have to do is to add another boolean attribute to the counter state class calling.

257
00:20:44.860 --> 00:20:46.630
It was incremented.

258
00:20:47.080 --> 00:20:52.070
This was incremented field will be to when we pressed the plus button and false.

259
00:20:52.090 --> 00:20:57.610
When we press the minus button, we can go into the counter cubitt class and modify the incremental

260
00:20:57.610 --> 00:20:59.620
decremental function accordingly.

261
00:20:59.620 --> 00:21:06.520
Setting up the was incremented burm as we discussed, and now we can go back inside our block listner

262
00:21:06.520 --> 00:21:10.420
and based on our status was incremented attribute.

263
00:21:10.510 --> 00:21:17.740
We will display a snack bar accordingly to whether the counter value of our counter state was incremented

264
00:21:17.860 --> 00:21:19.150
or diclemente.

265
00:21:19.300 --> 00:21:24.500
And voila, you can see from the screen that our application works as we want it.

266
00:21:24.550 --> 00:21:30.700
So perhaps you're in our situation right now when you're updating the UI using blog builder and also

267
00:21:30.700 --> 00:21:32.980
showing a snack bar using block listner.

268
00:21:33.010 --> 00:21:35.540
Isn't there an easier way to do it?

269
00:21:35.560 --> 00:21:36.850
Of course there is.

270
00:21:36.860 --> 00:21:38.860
It's called Block Consumer.

271
00:21:39.010 --> 00:21:46.330
Block Consumer is a widget which combines both Block Lisner and Block Builder into a single widget.

272
00:21:46.330 --> 00:21:47.240
How convenient.

273
00:21:47.440 --> 00:21:52.930
So instead of writing Block Listner on top of Block Builder, as we did in our example, actually we

274
00:21:52.930 --> 00:22:00.250
can refactor the code by writing both of them inside the block consumer widget and then copy and paste

275
00:22:00.250 --> 00:22:06.340
the necessary content from block listener to the listener function and the content from block builder

276
00:22:06.340 --> 00:22:07.630
to the builder function.

277
00:22:07.630 --> 00:22:14.150
And voila, the code is no more readable and easier to maintain and the application works perfect.

278
00:22:14.170 --> 00:22:19.780
Another amazing flutter block concept, which you use a lot is repository provider.

279
00:22:19.780 --> 00:22:24.560
Repository provider is the same exact widget as a block provider.

280
00:22:24.580 --> 00:22:31.870
The only difference being that it provides a single repository class instance instead of a single block

281
00:22:31.870 --> 00:22:32.500
instance.

282
00:22:32.500 --> 00:22:38.380
We will talk about the repository more thoroughly in future tutorials when I introduce you to the block

283
00:22:38.380 --> 00:22:39.160
architecture.

284
00:22:39.370 --> 00:22:46.480
In a couple of words, a repository is a class which has the main functions which make flutter, communicate

285
00:22:46.480 --> 00:22:52.210
with the outer data, layer, the Internet, the APIs, the databases and so on and so forth.

286
00:22:52.210 --> 00:22:58.180
It again will cover these concepts in depth in future tutorials, in more feature rich applications.

287
00:22:58.180 --> 00:23:04.510
You can imagine that there will be maybe tens of blocks in cubits having their own functionality in

288
00:23:04.510 --> 00:23:05.310
this material.

289
00:23:05.320 --> 00:23:13.120
We talked about how we can provide only one block or Cubitt to UI, but what are we going to do when

290
00:23:13.120 --> 00:23:16.540
we have ten blocks to provide and ten blocks to listen to?

291
00:23:16.540 --> 00:23:22.560
When we want to display ten different snack bars, we will stack them together one after another?

292
00:23:22.750 --> 00:23:30.800
No, we will definitely use multiple provider, multi block listener and even multi repository provider.

293
00:23:30.820 --> 00:23:34.540
So these are mainly the simple concept widgets we discussed before.

294
00:23:34.540 --> 00:23:42.490
But instead of taking only one block or Cubitt or even a repository, they can take as many as they

295
00:23:42.490 --> 00:23:43.320
possibly can.

296
00:23:43.480 --> 00:23:47.170
OK, so it is finally time to wrap things up.

297
00:23:47.170 --> 00:23:51.910
If it's the first time you solve this concept, this might be a pretty difficult tutorial.

298
00:23:51.910 --> 00:23:58.690
And I recommend you to watch this video at least twice and then try to build this counter app by yourself

299
00:23:58.690 --> 00:24:05.230
so that you can understand the flutter block concepts by practicing instead of just watching the tutorial.

300
00:24:05.290 --> 00:24:10.360
Having all of these in mind, it's time to move to another chapter in chapter number four.

301
00:24:10.360 --> 00:24:16.360
I'm going to show you why it is crucial to have a clean structure architecture in mind while designing

302
00:24:16.360 --> 00:24:19.300
and coding a flutter block based application.

303
00:24:19.300 --> 00:24:24.460
Together, it will find out what presentation, business logic and data layers mean and what benefits

304
00:24:24.460 --> 00:24:26.050
do they bring in the long run.

305
00:24:26.200 --> 00:24:31.270
With that being said, and looking forward to seeing each and every one of you up next, stay tuned

306
00:24:31.270 --> 00:24:32.320
and let us get Wickett.

