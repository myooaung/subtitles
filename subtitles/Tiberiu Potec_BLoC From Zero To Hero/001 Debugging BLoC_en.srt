1
00:00:00,330 --> 00:00:06,300
What is going on, everyone, I'm wicked, and today I'm really happy to present you the last chapter

2
00:00:06,300 --> 00:00:10,110
of this amazing block, complete course in this chapter.

3
00:00:10,140 --> 00:00:15,900
I'll introduce you to debugging blocks and cubists code facilitating via code extensions and the some

4
00:00:15,900 --> 00:00:21,540
of the most important naming conventions you should follow when working with Block Library on a large

5
00:00:21,540 --> 00:00:22,140
project.

6
00:00:22,170 --> 00:00:28,740
OK, so until now we kind of understood in big words how book library works, what are the main concepts

7
00:00:28,740 --> 00:00:31,460
and how to structure the code of a blog driven app.

8
00:00:31,470 --> 00:00:34,930
But what if something is wrong with one of our kibitzer blocks?

9
00:00:34,950 --> 00:00:37,830
Is there a way we can specifically debug them?

10
00:00:37,860 --> 00:00:44,190
Yes, there is both blocks and you have specific debugging methods you can override so that you can

11
00:00:44,190 --> 00:00:47,410
observe their behavior while the app is running.

12
00:00:47,430 --> 00:00:52,560
Remember, if that's a block is just an advanced type of cubitt block extends Cubitt.

13
00:00:52,560 --> 00:00:58,710
Therefore, every debugging method found inside the cubitt will also be available inside a block.

14
00:00:58,710 --> 00:01:04,019
At the same time, a block will benefit from some separate specific functions, thanks to its special

15
00:01:04,019 --> 00:01:07,450
ability of being triggered by a stream of events.

16
00:01:07,650 --> 00:01:09,380
So let's start with the Cubitt first.

17
00:01:09,570 --> 00:01:12,120
Remember this diagram we discussed way back then?

18
00:01:12,420 --> 00:01:17,190
When a cubit emits a new state, we say that a change occurs.

19
00:01:17,400 --> 00:01:24,150
Therefore, we can deduce that a change contains only two pieces of information the current state and

20
00:01:24,150 --> 00:01:24,820
the next state.

21
00:01:25,020 --> 00:01:30,240
But why are they called current and next state instead of current and previous state?

22
00:01:30,510 --> 00:01:37,590
Well, you need to understand that this unchanged method is called right before the state will be emitted

23
00:01:37,590 --> 00:01:38,790
down the stream of states.

24
00:01:38,820 --> 00:01:43,320
So at that moment in time, it makes more sense to call them current the next state.

25
00:01:43,380 --> 00:01:49,530
So to sum up, with the help of this overeaten own change function, we can observe all changes for

26
00:01:49,530 --> 00:01:50,640
a given Cubitt.

27
00:01:50,820 --> 00:01:55,230
In order to see this in action, I'll open up my last project inside the code.

28
00:01:55,500 --> 00:01:59,550
You can find it on my GitHub beach as always in the video description.

29
00:01:59,730 --> 00:02:04,700
Then I'll simply navigate the counter cubitt and override the own change function.

30
00:02:04,920 --> 00:02:10,020
As you may notice, this function takes a change instance of type counter state parameter.

31
00:02:10,020 --> 00:02:15,210
So every time a new state is emitted down the stream of states, this function will be called with a

32
00:02:15,210 --> 00:02:19,570
change instance containing both the current and the next state.

33
00:02:19,590 --> 00:02:25,110
Obviously, this will help you track and debug the stream of omitted states, which is really important.

34
00:02:25,110 --> 00:02:26,100
Inside this function.

35
00:02:26,100 --> 00:02:27,930
You may adopt two approaches.

36
00:02:27,960 --> 00:02:33,480
You can either manually code what you want to be printed by accessing both counts values of the current

37
00:02:33,480 --> 00:02:34,230
and previous state.

38
00:02:34,230 --> 00:02:37,890
Or you can opt for a much faster and efficient approach.

39
00:02:37,900 --> 00:02:43,640
You can simply print the past change instance as a parameter to the O change function.

40
00:02:43,650 --> 00:02:48,810
But how does Dart know how to print an instance of the counter state, you may ask?

41
00:02:48,810 --> 00:02:51,510
Well, at the moment it doesn't.

42
00:02:51,510 --> 00:02:56,790
But if we go to the counter state class, we can override the two string function, which is mainly

43
00:02:56,790 --> 00:03:03,150
called when DART once a string representation of the object instantiated from the country's state class.

44
00:03:03,180 --> 00:03:05,310
This is exactly what we want.

45
00:03:05,310 --> 00:03:10,740
If we save and run the project right now, you'll notice how simple it is to track and debug a cubitt

46
00:03:10,890 --> 00:03:16,930
whenever a new state is emitted by the counter cubitt either by incrementing or decremental the value.

47
00:03:16,950 --> 00:03:22,680
A new change is printed in the debug console, letting us know what the current state is and what the

48
00:03:22,680 --> 00:03:24,300
next state will be.

49
00:03:24,300 --> 00:03:29,490
Another important method which you can override inside a cubitt is the on error method.

50
00:03:29,730 --> 00:03:33,390
This is triggered whenever there is an exception inside a cubitt.

51
00:03:33,550 --> 00:03:37,880
An application is most likely to have some exceptions during its lifetime.

52
00:03:37,880 --> 00:03:43,050
But whenever we write something to the internal storage, something may go wrong with the operation.

53
00:03:43,170 --> 00:03:48,570
If something goes wrong, then we may want to dispatch an exception with a specific error message.

54
00:03:48,840 --> 00:03:53,100
We can do that by using the error function from inside any cubitt.

55
00:03:53,400 --> 00:04:00,390
This function takes into arguments the exception you want to dispatch and the stack trace to where the

56
00:04:00,390 --> 00:04:03,330
program ran until it retrieved that exception.

57
00:04:03,450 --> 00:04:09,090
Let's add this function randomly inside the to Jason method to simulate something that may go wrong

58
00:04:09,090 --> 00:04:09,450
with it.

59
00:04:09,570 --> 00:04:15,000
So whenever that adjacent method is called, that is whenever a new state is being emitted by the Cubitt,

60
00:04:15,090 --> 00:04:21,899
a new error will be added at the same time, due to the fact that we override the on error method inside

61
00:04:21,899 --> 00:04:27,840
the cubitt, the app will print the exception and it's territories so that you'll will be able to understand

62
00:04:27,840 --> 00:04:30,120
what went wrong with the application.

63
00:04:30,360 --> 00:04:34,860
OK, so we finished with how we can debug and trace a specific cubitt.

64
00:04:34,860 --> 00:04:36,690
But what about the block?

65
00:04:36,690 --> 00:04:42,600
By extending Cubitt block is actually a more advanced type of cubitt comparing both of them.

66
00:04:42,600 --> 00:04:48,870
We learned in the past that the only difference between a cubitt and a block is that the block is event

67
00:04:48,870 --> 00:04:49,410
driven.

68
00:04:49,440 --> 00:04:57,840
That means a block does something in response to a stream of events dispatched from the UI in comparison

69
00:04:58,020 --> 00:04:59,790
to those things whenever.

70
00:04:59,860 --> 00:05:05,650
One of the predefined methods is called, therefore, due to the fact that Block reacts as a response

71
00:05:05,650 --> 00:05:11,350
to a stream of events, there must be a way to debug and trace this stream of events to.

72
00:05:11,350 --> 00:05:17,710
And indeed, it is the first method that can be overridden, which is only available to a block is the

73
00:05:17,710 --> 00:05:20,740
on event method, as name is implying.

74
00:05:20,860 --> 00:05:28,030
And similar to the own change method on event is simply a method that is called as soon as the new event

75
00:05:28,030 --> 00:05:30,460
gets dispatched to the stream of events.

76
00:05:30,580 --> 00:05:36,370
Another block specific method that can be overridden is the own transition method on transition.

77
00:05:36,370 --> 00:05:40,630
Method is kind of a combination between own change and on event.

78
00:05:40,630 --> 00:05:47,230
Since you displace the current state, the next state and also the event that triggered the block to

79
00:05:47,230 --> 00:05:50,160
dispatch a new state over the current state.

80
00:05:50,170 --> 00:05:56,290
So by calling on change, you'd get this output and by calling on transition you also get this.

81
00:05:56,290 --> 00:06:01,330
But in addition, you'll also retrieve the event that caused the states to change.

82
00:06:01,630 --> 00:06:08,350
So to sum up, along with the only change and on error methods, methods borrowed from the covid a block

83
00:06:08,350 --> 00:06:14,780
also comes in addition with its specific ones, like on event and on transition.

84
00:06:14,950 --> 00:06:17,740
Now another important question will arise.

85
00:06:18,160 --> 00:06:24,160
In a huge application, you'd have maybe more than 20, 30 blocks and qubits altogether doing different

86
00:06:24,160 --> 00:06:24,700
tasks.

87
00:06:24,730 --> 00:06:27,400
What if you want to track each and every one of them?

88
00:06:27,520 --> 00:06:32,160
Will you have to manually override every function inside every block or cubitt?

89
00:06:32,200 --> 00:06:35,530
Well, you could do that, but it will be obviously time consuming.

90
00:06:35,530 --> 00:06:41,770
Instead will use a block library internal feature, which manages everything related to observing and

91
00:06:41,770 --> 00:06:43,930
debugging cubits and blocks.

92
00:06:44,050 --> 00:06:46,630
I'm talking about the Block Observer.

93
00:06:46,960 --> 00:06:53,320
The Block Observer is a utility class from Inside the Block library, which contains every previously

94
00:06:53,320 --> 00:07:01,750
mentioned methods like own change on error, on event, on transition, and also two extra ones on create

95
00:07:01,870 --> 00:07:02,980
and one close.

96
00:07:03,220 --> 00:07:07,720
These last ones are called Whenever A Block or Cubitt has been created or closed.

97
00:07:07,750 --> 00:07:13,060
We'll take a look at those in a couple of moments in order to test block observer first and foremost

98
00:07:13,090 --> 00:07:16,630
and erase the already overridden methods inside our country.

99
00:07:16,630 --> 00:07:19,750
Cubitt, of course, to avoid multiple identical outputs.

100
00:07:19,870 --> 00:07:24,850
Remember, Block Observer will take care of every cubitt and block inside Europe.

101
00:07:25,030 --> 00:07:30,760
Then let's create a new folder called Utility inside our Logic Folder, inside of which I'll create

102
00:07:30,760 --> 00:07:31,420
an app.

103
00:07:31,420 --> 00:07:34,750
Underscore, Block, Underscore Observer that dirt file here.

104
00:07:34,750 --> 00:07:41,620
I'll create an app block observer class that obviously extends the block observer managed internally

105
00:07:41,620 --> 00:07:47,530
by the Block Library after that, and they sure to overwrite every method we discussed today.

106
00:07:47,530 --> 00:07:51,790
Most of them I won't be able to test since we're only playing with bits at the moment.

107
00:07:51,790 --> 00:07:56,950
But the key of this material is to understand in big words what they're exactly doing.

108
00:07:57,160 --> 00:08:03,280
So if we take a look at the own change method here, we can print the change exactly as we previously

109
00:08:03,280 --> 00:08:04,390
did in the tutorial.

110
00:08:04,510 --> 00:08:10,610
This unchanged will react globally right now to every change from every cubitt.

111
00:08:10,630 --> 00:08:17,410
Therefore, the change parameter can be a type of counter state, internal state or setting state.

112
00:08:17,590 --> 00:08:22,870
We need to make sure that every one of them have their two string Mesan overridden so that we can easily

113
00:08:22,870 --> 00:08:24,210
print their values.

114
00:08:24,370 --> 00:08:28,090
Let's switch our view to the uncreate and unclosed methods.

115
00:08:28,240 --> 00:08:35,230
If you've ever been curious on how and most importantly, when our kibbitz get created inside our app,

116
00:08:35,230 --> 00:08:38,380
now it's the time to learn one important key factor.

117
00:08:38,380 --> 00:08:44,200
So let's print whatever kibbitz gets created here and observe a really important difference.

118
00:08:44,440 --> 00:08:50,290
One thing that's left to be done now is to navigate inside the main dirt file and set up the block.

119
00:08:50,290 --> 00:08:54,610
That observer to our newly created app Block Observer instance.

120
00:08:54,610 --> 00:08:58,420
If we save our run, our app will notice an interesting fact.

121
00:08:58,570 --> 00:09:05,320
Even though we have set up three block providers to get three cubits provided globally, only two of

122
00:09:05,320 --> 00:09:10,390
them were created when we opened the app, the counter covid and the Internet covid.

123
00:09:10,750 --> 00:09:12,700
But what about the settings covid?

124
00:09:13,120 --> 00:09:14,550
Why wasn't it created?

125
00:09:15,040 --> 00:09:16,480
Is there something wrong with it?

126
00:09:16,780 --> 00:09:22,060
If we click the settings icon, we can observe that right after we pressed it, the settings Cubitt

127
00:09:22,060 --> 00:09:22,990
got created.

128
00:09:23,290 --> 00:09:26,020
So why exactly is this happening?

129
00:09:26,230 --> 00:09:29,800
Well, let's switch our view to our block providers.

130
00:09:29,830 --> 00:09:36,430
If you have ever wondered what these boolean lazy variable was designed for, now you'll understand

131
00:09:36,430 --> 00:09:40,590
by default the lazy parameter of a block provider is set to true.

132
00:09:40,720 --> 00:09:46,680
That means the providers block or Cubitt will be created only when the app really needs it.

133
00:09:46,780 --> 00:09:52,480
In our case, the settings Cubitt was created when the app needed it in the settings page.

134
00:09:52,690 --> 00:09:55,270
So this is a really cool optimization technique.

135
00:09:55,360 --> 00:09:59,720
As a result, if we said the lazy parameter to force the settings cubitt.

136
00:09:59,880 --> 00:10:06,330
Will be created right after the app runs, another fact you may have observed is that the first change

137
00:10:06,330 --> 00:10:12,060
occurring in our app is actually the one where we're checking for the type of Internet connection then

138
00:10:12,090 --> 00:10:18,180
whether we're incrementing or discriminating our counter value, other changes occur into the bug window.

139
00:10:18,210 --> 00:10:24,330
Last but not least, if we modify the notification settings will also see a change with its respective

140
00:10:24,330 --> 00:10:24,890
values.

141
00:10:25,020 --> 00:10:31,650
So we're finally done discussing how we can debug and trace all of your blocks and qubits inside your

142
00:10:31,650 --> 00:10:31,930
app.

143
00:10:31,950 --> 00:10:34,400
I hope you understand how everything works.

144
00:10:34,410 --> 00:10:39,660
Now it's time for me to continue showing you some of the tips and tricks that will make your development

145
00:10:39,660 --> 00:10:42,470
life easier while working with Block Library.

146
00:10:42,570 --> 00:10:47,220
I'll talk a little bit about some of the most frequently asked questions I got from you guys.

147
00:10:47,370 --> 00:10:51,720
First question, how do you know when you should create a cubitt or a block?

148
00:10:51,960 --> 00:10:58,170
The general rule is that you should create a cubitt or a block for every feature of your app.

149
00:10:58,170 --> 00:11:04,710
As I said multiple times, and as you noticed in my tutorials, for every feature my app had, I created

150
00:11:04,710 --> 00:11:05,640
a new cubitt.

151
00:11:05,640 --> 00:11:11,160
Whenever we're talking about the counter feature, the Internet feature or the settings feature.

152
00:11:11,400 --> 00:11:12,680
So that's the main rule.

153
00:11:12,690 --> 00:11:17,580
If you want your app to be able to log in and create user accounts, then you should have an authentication

154
00:11:17,580 --> 00:11:18,590
cubitt or a block.

155
00:11:18,600 --> 00:11:24,720
If your apps work with different models like a country's fruits, weather planes, etc., then you should

156
00:11:24,720 --> 00:11:27,980
have a block or cubitt for each and every one of them.

157
00:11:28,020 --> 00:11:35,130
Then the next question would be when should I create a cubitt and when should I pick a block instead?

158
00:11:35,190 --> 00:11:40,620
The general rule of this is that you should start by designing a cubitt for your feature and then if

159
00:11:40,620 --> 00:11:46,100
you need the advanced features of a block, you can easily refactor the code and switch to it.

160
00:11:46,110 --> 00:11:51,930
You know, the only difference between a block and the cubitt is that a block is event driven.

161
00:11:52,260 --> 00:11:58,110
So you must think in which scenarios of your app it will be better to have events triggering a block

162
00:11:58,110 --> 00:12:03,170
to do the job instead of having a method to trigger a cubit to do its job.

163
00:12:03,210 --> 00:12:06,290
Remember, Cubitt works with simple and plain methods.

164
00:12:06,300 --> 00:12:08,130
It's not a stream of methods.

165
00:12:08,160 --> 00:12:14,370
Block, on the other hand, works with a stream of events, so you must take advantage of what operations

166
00:12:14,370 --> 00:12:16,320
you could perform on that stream.

167
00:12:16,470 --> 00:12:22,410
Another question I frequently get is what's the naming conventions you should follow when designing

168
00:12:22,410 --> 00:12:23,690
a block or cubitt?

169
00:12:23,940 --> 00:12:26,840
The answer here is not really a general rule.

170
00:12:26,880 --> 00:12:30,210
You can name the blocks, cubits, events, methods and states.

171
00:12:30,210 --> 00:12:32,730
Whatever you feel, it makes sense for your app.

172
00:12:32,880 --> 00:12:39,270
There are, however, some naming conventions that will make your code look more organized and straightforward

173
00:12:39,270 --> 00:12:40,130
for the state.

174
00:12:40,290 --> 00:12:47,130
It recommended that you name them after this pattern, a block or cubitt subject, plus the action,

175
00:12:47,520 --> 00:12:49,760
plus the state of the action.

176
00:12:49,770 --> 00:12:54,450
For example, if you have a weather block, some of the weather states may sound like weather.

177
00:12:54,450 --> 00:12:59,930
Fetch success, weather, fetch in progress or weather fetch failure.

178
00:12:59,970 --> 00:13:05,970
If you have another user QB, some of the other states may sound like user creates success, user create

179
00:13:05,970 --> 00:13:11,970
in progress, user delete, failer use their fetch success, etc..

180
00:13:12,090 --> 00:13:14,850
You can see where I'm going with this for the events.

181
00:13:14,850 --> 00:13:20,340
It recommended that you name them after this battered block or cubitt subject.

182
00:13:20,670 --> 00:13:22,140
Plus the action.

183
00:13:22,290 --> 00:13:28,710
The event itself in past tense events should be named in the past tense because events are things that

184
00:13:28,710 --> 00:13:31,590
have already occurred from the blocks perspective.

185
00:13:31,980 --> 00:13:38,120
For example, if you have one user block, again, some of the user events may sound like user fetched,

186
00:13:38,370 --> 00:13:42,570
user deleted, user created, user modified, etc..

187
00:13:42,750 --> 00:13:44,490
Now what about the methods of a cubitt?

188
00:13:44,730 --> 00:13:50,670
Methods of a kibbitz should be named so that they denote exactly what a cubit is working on.

189
00:13:50,730 --> 00:13:57,030
For example, if there is an user cubitt the method inside it should sound like Thach, delete, create,

190
00:13:57,210 --> 00:13:59,000
modify and so on and so forth.

191
00:13:59,130 --> 00:14:03,000
As I told you, these are only recommended conversions.

192
00:14:03,000 --> 00:14:08,730
Feel free to modify them as much as you want, as long as it makes sense inside your own app.

193
00:14:09,000 --> 00:14:14,340
One last question I receive in the comments is what we the extensions do I frequently use.

194
00:14:14,400 --> 00:14:17,670
So here's a list of every viscose extension I use.

195
00:14:17,790 --> 00:14:19,620
The first one is better comments.

196
00:14:19,620 --> 00:14:23,130
I use this to highlight some of my code in a brighter color.

197
00:14:23,460 --> 00:14:29,730
The block extension is a must when working with Block Library just because it offers you many timesaving

198
00:14:29,730 --> 00:14:33,420
options like wrapping widgets and useful code snippets.

199
00:14:33,420 --> 00:14:37,980
Bracket eyes are, on the other hand, is also an awesome extension.

200
00:14:37,980 --> 00:14:40,260
I used to keep track of some of my brackets.

201
00:14:40,290 --> 00:14:44,250
You'll find a dozen of brackets inside darte, so this is really efficient.

202
00:14:44,400 --> 00:14:50,640
That extension adds support to the code for the DART programming language and provides tools for effectively

203
00:14:50,640 --> 00:14:53,400
editing, refactoring, running and reloading apps.

204
00:14:53,520 --> 00:14:56,340
Now, maybe the most popular one I used my tutorials.

205
00:14:56,640 --> 00:14:59,400
The Dart data cloud generator is one of the best.

206
00:15:00,170 --> 00:15:05,980
You can have four first class cogeneration like generating class constructors to string to Jason and

207
00:15:05,990 --> 00:15:12,800
from Jason methods and many, many more, that import is a plugin I often use to refactor and optimize

208
00:15:12,800 --> 00:15:14,390
my imports inside my app.

209
00:15:14,420 --> 00:15:16,490
It's an amazing timesaver extension.

210
00:15:16,490 --> 00:15:23,330
Flutter like the dart extension is also a really must have plugin for viscose, adding support for effectively

211
00:15:23,540 --> 00:15:29,780
editing, refactoring, running and reloading flutter and mobile apps as well as support for the dart

212
00:15:29,780 --> 00:15:31,340
programming language gradle.

213
00:15:31,340 --> 00:15:36,870
Language support is a very useful extension to manage and code the dart griddled files found inside

214
00:15:36,870 --> 00:15:43,580
the Flutter project now above the streaming of skilled material I team and Vaskov icons are the Vasko

215
00:15:43,640 --> 00:15:46,700
extensions I use for personalizing my folder icons.

216
00:15:46,700 --> 00:15:52,910
And last but not least, Bob's big assist is one of the most amazing extensions which will help you

217
00:15:52,910 --> 00:15:59,080
add the latest dart and flutter packages from Pop that live right inside the pop spec that will file.

218
00:15:59,240 --> 00:16:05,090
This is a plugin I really use a lot, so I definitely recommend it and I think disrupts out everything.

219
00:16:05,090 --> 00:16:12,530
I wanted you to understand not only for this tutorial but also for this entire block from zero to Hero

220
00:16:12,530 --> 00:16:13,580
tutorial series.

221
00:16:13,580 --> 00:16:16,580
It is finally time to end this tutorial series.

222
00:16:16,820 --> 00:16:23,540
I have spent so much time making every tutorial and I really hope I could help you in learning the really

223
00:16:23,540 --> 00:16:25,160
popular blog library.

224
00:16:25,160 --> 00:16:30,830
If I did, I would really appreciate if you could support me by subscribing to this channel and by liking

225
00:16:30,830 --> 00:16:33,080
and sharing the entire tutorial series.

226
00:16:33,080 --> 00:16:39,650
We learned everything about Block, but now it's time to put everything to practice by building real

227
00:16:39,650 --> 00:16:40,730
world apps.

228
00:16:40,760 --> 00:16:42,680
This will be the next tutorial series.

229
00:16:42,680 --> 00:16:45,670
I invite each and every one of you to join.

230
00:16:45,840 --> 00:16:48,530
Until then, as always, take care.

231
00:16:48,650 --> 00:16:49,700
Stay safe.

232
00:16:49,700 --> 00:16:50,060
Work.

233
00:16:50,060 --> 00:16:50,660
It is out.

234
00:16:51,140 --> 00:16:51,830
Bye bye.

