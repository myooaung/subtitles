WEBVTT
1
00:00:00.150 --> 00:00:00.460
Hello.

2
00:00:00.480 --> 00:00:02.160
What is going on, everyone?

3
00:00:02.340 --> 00:00:08.220
Welcome back to this amazing course in this chapter will take an in-depth look at how we can test a

4
00:00:08.220 --> 00:00:09.780
block built application.

5
00:00:09.930 --> 00:00:12.280
Why is everyone so afraid of testing?

6
00:00:12.300 --> 00:00:18.450
What are the pros and cons and why is it so important to test every feature of your app?

7
00:00:18.480 --> 00:00:20.000
We'll discuss it all today.

8
00:00:20.010 --> 00:00:22.530
So why do developers hate testing so much?

9
00:00:22.560 --> 00:00:26.740
Well, the answer I'm always receiving is so simple.

10
00:00:26.760 --> 00:00:31.320
We hate testing because the application works fine without it.

11
00:00:31.350 --> 00:00:33.380
It seems like a reasonable answer, right?

12
00:00:33.390 --> 00:00:34.730
And indeed it is.

13
00:00:34.740 --> 00:00:41.730
An application can work perfectly fine without testing, but that doesn't mean we should consider it

14
00:00:41.730 --> 00:00:42.510
so badly.

15
00:00:42.660 --> 00:00:46.300
Testing is in so many cases, a lifesaver.

16
00:00:46.350 --> 00:00:49.730
It's the hero nobody talks about on the news.

17
00:00:49.770 --> 00:00:55.500
So if you hate testing that much, think of it as a cute little duck which will be loyal to you and

18
00:00:55.500 --> 00:00:57.090
your application all the time.

19
00:00:57.180 --> 00:01:04.170
Think of it as a layer of security, a layer which will bark whenever something breaks inside your app.

20
00:01:04.200 --> 00:01:05.880
Now, let me ask you something.

21
00:01:05.910 --> 00:01:12.000
Have you ever worked on a big project in which you wanted to add a new feature and you realized that

22
00:01:12.000 --> 00:01:18.870
after two or even three days of work, despite the fact that the feature works perfectly fine, it breaks

23
00:01:18.870 --> 00:01:22.940
other features in a completely different place inside your app?

24
00:01:22.950 --> 00:01:29.220
Or maybe have you thought if you ever want to delete a piece of code from within Europe, will this

25
00:01:29.220 --> 00:01:32.780
action be destructive or not destructive to the app itself?

26
00:01:32.880 --> 00:01:35.660
How would you check if everything is okay afterwards?

27
00:01:35.670 --> 00:01:40.920
Most of you will say that they will run the app and check every feature to see if everything works well.

28
00:01:40.920 --> 00:01:46.620
But I'm sure that some of you won't even physically test it and leave with the idea that nothing will

29
00:01:46.620 --> 00:01:50.120
break a conclusion which is fundamentally wrong.

30
00:01:50.130 --> 00:01:53.790
Code is code and code will break.

31
00:01:53.820 --> 00:01:54.780
Keep that in mind.

32
00:01:54.810 --> 00:02:01.020
So what if I tell you that there is something which will run a full check up of every feature you wrote

33
00:02:01.020 --> 00:02:07.080
inside your app so that whenever you refactor your code, you'll be stress free without having to worry

34
00:02:07.080 --> 00:02:09.060
about if it's going to crash or not?

35
00:02:09.160 --> 00:02:10.710
You may have already guessed that.

36
00:02:10.710 --> 00:02:12.930
I'm talking about our body testing.

37
00:02:12.990 --> 00:02:19.530
Now, the difference between the pros and cons becomes rather a problem of deciding whether it's worth

38
00:02:19.530 --> 00:02:23.890
choosing testing for its advantages over its disadvantages.

39
00:02:23.910 --> 00:02:29.970
So obviously we know that the disadvantages of writing tests are that in the first place, we need to

40
00:02:29.970 --> 00:02:35.580
learn and understand the structure of them and in the second place that it will obviously take more

41
00:02:35.580 --> 00:02:39.150
time to implement and write all the necessary code.

42
00:02:39.180 --> 00:02:40.900
But is it worth it?

43
00:02:40.920 --> 00:02:46.260
I'll let you answer this question in the following minutes after we understand the structure and practice

44
00:02:46.260 --> 00:02:48.760
testing on our beloved calendar app.

45
00:02:48.810 --> 00:02:52.920
So testing, how could we implement a test for a feature?

46
00:02:53.040 --> 00:02:54.360
Think of it logically.

47
00:02:54.540 --> 00:02:57.570
How would you test if something is working or not?

48
00:02:57.570 --> 00:03:04.230
In big words, a test is defined by how you will programmatically tell Flutter to double check if the

49
00:03:04.230 --> 00:03:12.300
output given by a feature is equal to the expected response, you plan on receiving a no order.

50
00:03:12.360 --> 00:03:18.480
Now let's switch to the coding part, where I'll show you how testing works and afterwards how to write

51
00:03:18.480 --> 00:03:19.980
tests inside your app.

52
00:03:19.990 --> 00:03:25.920
So in order to follow up, you can clone my Block Concepts Counter Project from GitHub because we'll

53
00:03:25.920 --> 00:03:29.360
start coding from the link to that is into description.

54
00:03:29.370 --> 00:03:34.890
The first thing you should do after you open up the project inside the code is to go and open up the

55
00:03:34.890 --> 00:03:36.600
pub spec that YAML file.

56
00:03:36.600 --> 00:03:43.410
We already have the flutter underscore a block dependency inside, but for testing purposes we also

57
00:03:43.410 --> 00:03:48.670
need to add both the test and block underline test dependencies to the record.

58
00:03:48.690 --> 00:03:55.020
Now, inside our project, we need to create a separate test folder in which we'll have all our test

59
00:03:55.020 --> 00:03:55.470
files.

60
00:03:55.470 --> 00:04:01.590
A little hint I can give you that every feature of your application needs to be tested in the first

61
00:04:01.590 --> 00:04:02.010
place.

62
00:04:02.040 --> 00:04:08.970
So the test inside the test folder should be kind of symmetrical to the features from within your app.

63
00:04:08.970 --> 00:04:15.210
So all we have to do is to create the folder symmetrical to the folder inside the test folder and add

64
00:04:15.210 --> 00:04:17.779
the underscore test to the name of the file.

65
00:04:17.790 --> 00:04:24.570
In this case will have a counter underscore Cubitt underscore test that dirt file in which will test

66
00:04:24.570 --> 00:04:27.890
out the functionality of our counter feature.

67
00:04:27.900 --> 00:04:33.750
We remember from a couple of years back that all the counterfeiter does is to increment or document

68
00:04:33.750 --> 00:04:38.070
a counter value based on which button is pressed by the user.

69
00:04:38.100 --> 00:04:43.500
So inside the test file, we need to start by creating a main function inside.

70
00:04:43.500 --> 00:04:49.380
This main function will go right ahead and create a group with the name of culture Cubitt.

71
00:04:49.380 --> 00:04:54.570
A group is actually a way of organising multiple tests for a feature.

72
00:04:54.570 --> 00:04:59.790
So, for example, inside our counter Cubitt group will write all the necessary.

73
00:04:59.940 --> 00:05:07.350
As for the counter feature in a group, you can also share a common set up and tear down function across

74
00:05:07.350 --> 00:05:08.860
all the available tests.

75
00:05:08.880 --> 00:05:11.760
But what is the purpose of these functions?

76
00:05:11.760 --> 00:05:13.160
Inside a set up function?

77
00:05:13.170 --> 00:05:18.270
You can instantiate, for example, the objects our test will be working with.

78
00:05:18.270 --> 00:05:25.640
In our case, we will instantiate the counter block so that we can access it later on in our tests.

79
00:05:25.650 --> 00:05:32.550
So set up is merely as its name is implying a function which will be called to create and initialize

80
00:05:32.550 --> 00:05:33.790
the necessary data.

81
00:05:33.810 --> 00:05:35.370
This will work with.

82
00:05:35.400 --> 00:05:42.450
On the other hand, the teardown down function is a function that will get called after each test is

83
00:05:42.450 --> 00:05:42.840
run.

84
00:05:42.840 --> 00:05:48.930
And if it's called within a group, it will apply, of course, only to the test in that group.

85
00:05:48.930 --> 00:05:52.680
Inside of these, perhaps we can close the created Cubitt.

86
00:05:52.710 --> 00:05:59.400
Now the time has finally come for us to write our first test, which is going to be checking if the

87
00:05:59.400 --> 00:06:06.310
initial state of our culture Cubitt is equal to the counter state with a counter value of zero.

88
00:06:06.330 --> 00:06:12.540
We're going to do this by creating a test function and give it a description which would denote the

89
00:06:12.540 --> 00:06:20.040
purpose of it in this case is going to be the initial state is counter state with a counter value of

90
00:06:20.040 --> 00:06:20.610
zero.

91
00:06:20.640 --> 00:06:21.990
So how do we check this?

92
00:06:22.020 --> 00:06:28.950
Well, I told you earlier that the purpose of any test is to double check that the output of the feature

93
00:06:29.100 --> 00:06:34.480
is actually equal to the expected output and nothing else to do this.

94
00:06:34.500 --> 00:06:42.120
All we need is the except function, which will take two main important arguments, the actual value

95
00:06:42.120 --> 00:06:48.220
returned by our initial state and the expected value which we're expecting to be received.

96
00:06:48.240 --> 00:06:57.540
So our initial state returned when the cubit is created, will be counted covid that state and the expected

97
00:06:57.540 --> 00:07:03.490
value should be a counter state which has the counter value equal to zero.

98
00:07:03.510 --> 00:07:10.020
We can run this test by typing the pub run test command into the castle or rather by clicking the run

99
00:07:10.020 --> 00:07:11.480
button next to the group.

100
00:07:11.490 --> 00:07:19.050
So if we run this test, we will surprisingly receive a complete failure with this message in which

101
00:07:19.050 --> 00:07:26.960
we expected an instance of counter state and we actually receive an instance of counter state here.

102
00:07:26.970 --> 00:07:31.650
You can actually start to understand why testing is such an amazing tool.

103
00:07:31.780 --> 00:07:36.010
It has already signaled us a problem with our staff.

104
00:07:36.030 --> 00:07:40.880
Remember that the application worked perfectly when we manually tested it.

105
00:07:40.890 --> 00:07:43.330
How come that this test fails that?

106
00:07:43.440 --> 00:07:50.640
Well, since it tells us that both the expected and actual outputs are an instance of counter state

107
00:07:50.640 --> 00:07:54.400
and we know that both should have a zero value inside.

108
00:07:54.420 --> 00:07:58.350
That means that the instances are still different somehow.

109
00:07:58.350 --> 00:08:06.450
And that's due to the fact that inside dart language, two instances of the same exact class are equal,

110
00:08:06.450 --> 00:08:09.160
even though they are basically identical.

111
00:08:09.210 --> 00:08:15.860
This is happening because these two instances are stored in a different part of the memory, and DART

112
00:08:15.870 --> 00:08:22.970
compares their location in memory instead of their values, hence making them not equal.

113
00:08:22.980 --> 00:08:29.670
You can override this behavior really simple by using a really popular library you may have already

114
00:08:29.670 --> 00:08:31.920
heard about Equatable in the back.

115
00:08:32.190 --> 00:08:40.080
Equatable is just a simple tool which overrides the equal operator and the hash code for every class

116
00:08:40.080 --> 00:08:47.490
that extends it has tricking darte into comparing the instances by value rather than by where they're

117
00:08:47.490 --> 00:08:48.840
placed in the memory.

118
00:08:48.870 --> 00:08:55.620
So if you want the functionality of comparing to instances like we do in our test, equatable is the

119
00:08:55.620 --> 00:08:56.250
way to go.

120
00:08:56.370 --> 00:09:03.400
OK, so all we need to do inside our app right now is to add the equatable dependency into the pub spec

121
00:09:03.420 --> 00:09:07.990
that YAML file and then extend the counter state class with it.

122
00:09:08.010 --> 00:09:14.640
Know that now will get the warning telling us that we need to override the props of the equatable class.

123
00:09:14.640 --> 00:09:21.960
The props are just a way of indicating equatable, which are the fields in our class that we want to

124
00:09:21.960 --> 00:09:25.430
be compared while applying the equal operator.

125
00:09:25.440 --> 00:09:31.500
So we're going to pass both the counter value and there was incremented attribute inside the props list.

126
00:09:31.500 --> 00:09:38.970
And now whenever we will compare to counter states, DART will compare them attributes by attributes

127
00:09:38.970 --> 00:09:42.210
in order to see whether they're equal or not.

128
00:09:42.240 --> 00:09:49.620
So right now, if you go back to our test file and run the test, the test should finally pass since

129
00:09:49.620 --> 00:09:55.500
our expected an actual counter state had the same counter value, which is zero.

130
00:09:55.510 --> 00:09:59.820
Now it is time for us to test out the functionality of the increment and.

131
00:10:00.230 --> 00:10:06.410
And functions from inside our counter feature, because these are the most important right for this,

132
00:10:06.410 --> 00:10:12.620
will use the block test function from inside the block, underscore test dependency will use this because

133
00:10:12.620 --> 00:10:19.430
we need to test the output as a response to the increment or decrement functions will start with the

134
00:10:19.430 --> 00:10:21.730
test for the increment functionality.

135
00:10:21.740 --> 00:10:28.730
So firstly, we to describe it properly, the cubitt should emit a counter state with a counter value

136
00:10:28.730 --> 00:10:35.780
of one and there was increment in value of two when cubitt that increment function is called.

137
00:10:35.780 --> 00:10:43.130
To do this will use the trial parameters of build, act and expect from inside block test function.

138
00:10:43.130 --> 00:10:50.300
The build parameter is a function that will return the current instance of the counter cubitt in order

139
00:10:50.300 --> 00:10:53.200
to make it available to the testing process.

140
00:10:53.210 --> 00:11:01.070
The ACT parameter is a function that will take the cubitt and will return the action applied on it,

141
00:11:01.070 --> 00:11:04.280
which in our case is the increment function.

142
00:11:04.430 --> 00:11:12.110
The expected parameter is an iterable list which will verify if the order of the state and the actual

143
00:11:12.110 --> 00:11:19.130
admitted state correspond with the image it wants and no other sees the counteractive it emits only

144
00:11:19.130 --> 00:11:20.210
a single state.

145
00:11:20.210 --> 00:11:23.930
In this example, we will place it inside the least list accordingly.

146
00:11:23.940 --> 00:11:27.380
The same procedure applies also to the Degremont function.

147
00:11:27.410 --> 00:11:33.590
The only difference being that will act by calling the Degremont function and that will expect a counter

148
00:11:33.590 --> 00:11:37.460
state with a counter value of minus one instead of one.

149
00:11:37.460 --> 00:11:44.930
Since we subtract one from the initial counter value, let's run all the test and as you can see everything.

150
00:11:45.470 --> 00:11:50.990
And then we can know for sure that the counter cubitt works as it should think about the scenario,

151
00:11:50.990 --> 00:11:51.650
for example.

152
00:11:51.650 --> 00:11:57.110
Now, so let's say you were moved away from this project and another guy comes into place to continue

153
00:11:57.110 --> 00:11:57.980
the development.

154
00:11:57.980 --> 00:12:04.490
He doesn't know dart that well and he thinks that the equatable package is not needed and that the application

155
00:12:04.490 --> 00:12:06.570
can work just fine without it.

156
00:12:06.590 --> 00:12:12.260
So he reflectors the code Rosia and indeed the app is still working perfectly.

157
00:12:12.260 --> 00:12:18.890
But underneath, if we run the counter QB test, we can see that if there would be a part inside our

158
00:12:18.920 --> 00:12:24.530
app comparing two identical states, the output would have been completely different.

159
00:12:24.590 --> 00:12:27.850
This is exactly why AB testing should not be skipped.

160
00:12:27.860 --> 00:12:33.230
It may seem like the refactoring works fine, but in reality it isn't.

161
00:12:33.260 --> 00:12:40.370
So I guess now you understood why it's worth spending the extra time writing tests for your application.

162
00:12:40.650 --> 00:12:46.570
The next chapter will dive into more advanced flutter block topics like block access and routing.

163
00:12:46.580 --> 00:12:49.990
There are multiple ways of navigating between different screens in flutter.

164
00:12:50.030 --> 00:12:56.170
Therefore, there are also multiple ways of providing and accessing blocks or qubits between those pages.

165
00:12:56.210 --> 00:13:01.010
This chapter is going to be the longest chapter from Discoursed, so you might want to clear your mind

166
00:13:01.010 --> 00:13:02.450
and grab some popcorn before.

167
00:13:02.510 --> 00:13:07.310
With that being said, I am looking forward to seeing each and every one of you in the next chapter.

168
00:13:07.340 --> 00:13:09.200
Stay tuned and let's get wicked.

