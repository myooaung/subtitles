WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.080 --> 00:00:02.430
With our app now mounted,

00:00:02.430 --> 00:00:05.130
we now need some data to work with.

00:00:05.130 --> 00:00:08.920
To do this, we're going to add some options to create app.

00:00:08.920 --> 00:00:11.990
Inside here, we're going to pass in an object,

00:00:11.990 --> 00:00:15.510
and this object is going to be where we're going to be working from now on.

00:00:15.510 --> 00:00:20.520
The first option which is going to go on this object is the data property,

00:00:20.520 --> 00:00:24.300
which sounds is used to hold our application's data,

00:00:24.300 --> 00:00:27.135
which is sometimes referred to as state.

00:00:27.135 --> 00:00:31.050
State is a function which is going to return an object.

00:00:31.050 --> 00:00:34.905
This is going to contain all of our data properties,

00:00:34.905 --> 00:00:39.465
which you can think of as a place to store the information our application needs.

00:00:39.465 --> 00:00:42.255
Just like we would do with variables.

00:00:42.255 --> 00:00:44.515
If you've used Vue 2 in the past,

00:00:44.515 --> 00:00:50.755
the data property could either be declared as a function like this or also an object,

00:00:50.755 --> 00:00:54.890
both the Vue free and must now always be declared as a function.

00:00:54.890 --> 00:00:58.170
Back over to our index, our HTML.

00:00:58.170 --> 00:01:00.640
Remember that we have a Vue app mounted to

00:01:00.640 --> 00:01:05.845
both the header section and also the blog section at just below.

00:01:05.845 --> 00:01:08.440
Which means that we can now use the Vue [inaudible]

00:01:08.440 --> 00:01:12.185
control any of the data inside of these two sections.

00:01:12.185 --> 00:01:13.785
Currently, we work in,

00:01:13.785 --> 00:01:15.505
inside of the header section,

00:01:15.505 --> 00:01:20.455
meaning we can output our data properties inside of this header section.

00:01:20.455 --> 00:01:23.290
The first one I'm going to control from

00:01:23.290 --> 00:01:27.235
the Vue application is going to be the portfolio title.

00:01:27.235 --> 00:01:30.530
So if we put our name outside here,

00:01:30.530 --> 00:01:35.245
and then we can store this inside of a property called "name".

00:01:35.245 --> 00:01:39.300
This will be a string, so add this inside of the quotations.

00:01:39.300 --> 00:01:43.340
Now, instead of having this "name" as hard-coded HTML,

00:01:43.340 --> 00:01:46.765
we can now use this data property called name.

00:01:46.765 --> 00:01:49.580
I'll put this anywhere inside of our header section.

00:01:49.580 --> 00:01:54.530
We can use the double curly braces and then access our name property.

00:01:54.530 --> 00:01:58.450
Let's go over to the browser and check this is still working,

00:01:58.450 --> 00:02:02.255
since this is linked or mounted to our header section,

00:02:02.255 --> 00:02:06.050
this name value cannot be used anywhere outside of this.

00:02:06.050 --> 00:02:12.720
If you go just below our header and try to output this name variable or to the browser,

00:02:12.720 --> 00:02:15.740
we see this is outputted as a regular string rather

00:02:15.740 --> 00:02:19.490
than being replaced with the actual name, data property.

00:02:19.490 --> 00:02:23.720
The benefits of declaring our data inside of the data section,

00:02:23.720 --> 00:02:25.925
rather than hard-coded HTML,

00:02:25.925 --> 00:02:28.564
is that the data is reactive,

00:02:28.564 --> 00:02:32.785
meaning that if any of the values inside here would change,

00:02:32.785 --> 00:02:38.300
all of the HTML sections which uses data would then be updated instantly.

00:02:38.300 --> 00:02:42.035
This is a pretty simple example using a string of text.

00:02:42.035 --> 00:02:44.525
But what if we had multiple items,

00:02:44.525 --> 00:02:46.340
such as an array?

00:02:46.340 --> 00:02:50.735
Well, we do have three values inside of our unordered list.

00:02:50.735 --> 00:02:53.600
Have the home, the portfolio,

00:02:53.600 --> 00:02:56.350
and also the contact me section.

00:02:56.350 --> 00:02:58.170
Back over to the script,

00:02:58.170 --> 00:03:01.420
we can now see how this would look as a data property.

00:03:01.420 --> 00:03:05.135
The second value separated by a comma is going to be links.

00:03:05.135 --> 00:03:07.685
I'm going to set this up as an array.

00:03:07.685 --> 00:03:10.310
This first one is going to be home.

00:03:10.310 --> 00:03:13.250
The second link was portfolio,

00:03:13.250 --> 00:03:16.650
and the third one of contact me.

00:03:17.230 --> 00:03:20.915
Since this is an array containing multiple values,

00:03:20.915 --> 00:03:24.065
we do have some options of how we can output this.

00:03:24.065 --> 00:03:29.870
The most basic option is to output this directly as a data property.

00:03:29.870 --> 00:03:33.120
We could output the name of links.

00:03:33.120 --> 00:03:37.840
This will be directly output just like a string.

00:03:37.840 --> 00:03:40.775
However, this is unlikely to be what we want.

00:03:40.775 --> 00:03:45.145
Instead, we could access each one of these links individually.

00:03:45.145 --> 00:03:47.030
Just like a regular array,

00:03:47.030 --> 00:03:49.444
we could use the double curly braces,

00:03:49.444 --> 00:03:55.375
access our links, and then access each individual link by the index number.

00:03:55.375 --> 00:03:58.880
The first value inside of an array is zero,

00:03:58.880 --> 00:04:04.550
the second one is position one,

00:04:04.550 --> 00:04:06.740
and the third one of contact me.

00:04:06.740 --> 00:04:09.125
There's going to be links too.

00:04:09.125 --> 00:04:11.840
Again, this will work perfectly fine,

00:04:11.840 --> 00:04:15.875
but it is a long way of doing things if you have lots of array items,

00:04:15.875 --> 00:04:22.165
a more efficient way of dealing with list items like this is to use a for loop.

00:04:22.165 --> 00:04:25.255
Up to our unordered list,

00:04:25.255 --> 00:04:28.255
we can use a V for loop,

00:04:28.255 --> 00:04:32.280
which is going to be link and links.

00:04:32.280 --> 00:04:36.720
Links with the S is our date's property stored in our script,

00:04:36.720 --> 00:04:41.270
and then the value of link will be updated for each loop.

00:04:41.270 --> 00:04:44.360
So the first time we loop through these three items,

00:04:44.360 --> 00:04:47.195
the link value will be set to home.

00:04:47.195 --> 00:04:50.470
The second time it loops through will be set to portfolio,

00:04:50.470 --> 00:04:53.215
and the third and final time it leaves through,

00:04:53.215 --> 00:04:55.670
this will be set to contact me.

00:04:55.670 --> 00:04:58.955
v-for is a Vue.js directive,

00:04:58.955 --> 00:05:02.950
which is a special attribute we add to our HTML.

00:05:02.950 --> 00:05:06.275
Directives will begin with a V dash prefix.

00:05:06.275 --> 00:05:11.765
And this particular one allows Vue.js to loop through a particular data property.

00:05:11.765 --> 00:05:15.445
We will also look at more directives during the course.

00:05:15.445 --> 00:05:19.085
Since we have three items inside of our links array,

00:05:19.085 --> 00:05:22.685
the content inside here will be repeated three times.

00:05:22.685 --> 00:05:27.185
So effectively we've repeated our unordered list three separate times.

00:05:27.185 --> 00:05:29.635
But this is not what we want either.

00:05:29.635 --> 00:05:32.880
So instead we can cut out the v-for

00:05:32.880 --> 00:05:37.615
loop and instead just repeat our list item three times.

00:05:37.615 --> 00:05:41.300
We can remove the second and third list item,

00:05:41.300 --> 00:05:43.250
leaving just one in place,

00:05:43.250 --> 00:05:47.045
which we're going to repeat for each item inside of links.

00:05:47.045 --> 00:05:50.975
We can then replace this with our link variable,

00:05:50.975 --> 00:05:55.365
save this, and our three links and now back in place.

00:05:55.365 --> 00:05:59.360
So just to recap, we have three items inside the links.

00:05:59.360 --> 00:06:00.980
The first time loops through,

00:06:00.980 --> 00:06:02.630
link will be set to home.

00:06:02.630 --> 00:06:04.655
So this will be replaced with home.

00:06:04.655 --> 00:06:08.830
The second time which will be replaced with portfolio and so on.

00:06:08.830 --> 00:06:12.080
Data properties can also be over data types too,

00:06:12.080 --> 00:06:14.945
such as booleans and also numbers,

00:06:14.945 --> 00:06:18.870
and also objects to which we're going to discover next.
