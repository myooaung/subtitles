WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.680 --> 00:00:04.020
When the Composition API was first announced,

00:00:04.020 --> 00:00:08.430
it initially received a bit of negative feedback in the Vue community.

00:00:08.430 --> 00:00:11.400
This was mainly due to a lack of understanding of what

00:00:11.400 --> 00:00:14.760
the Composition API was intended to achieve.

00:00:14.760 --> 00:00:18.600
We thought that the vue.js core team was intending on replacing

00:00:18.600 --> 00:00:22.830
the existing Options API which includes things like the data,

00:00:22.830 --> 00:00:25.634
the methods on the computed sections,

00:00:25.634 --> 00:00:28.650
and replacing it with a whole new thing to learn.

00:00:28.650 --> 00:00:30.540
This is not the case, however,

00:00:30.540 --> 00:00:36.000
the way we write vue.js code with the Options API is still completely valid,

00:00:36.000 --> 00:00:40.680
and everything we've covered so far is essential in learning vue.js.

00:00:40.680 --> 00:00:42.140
With Vue 3, though,

00:00:42.140 --> 00:00:47.735
the composition API is also provided as an additional way of writing Vue code.

00:00:47.735 --> 00:00:53.290
A lower composition is used in place of the existing Options API.

00:00:53.290 --> 00:00:55.290
The Vue team recommends only using

00:00:55.290 --> 00:00:59.600
the Composition API when your existing project is becoming large,

00:00:59.600 --> 00:01:04.310
hard to maintain, and difficult to navigate as a developer.

00:01:04.310 --> 00:01:09.035
In fact, both of them can be used together in the same components if needed,

00:01:09.035 --> 00:01:11.965
making refactoring much smoother.

00:01:11.965 --> 00:01:17.120
The motivation behind composition was to make it much easier to organize,

00:01:17.120 --> 00:01:19.775
maintain, and reuse our code.

00:01:19.775 --> 00:01:22.320
Reusable components take us so far,

00:01:22.320 --> 00:01:28.045
but the actual JavaScript inside of these components can be organized in a better way.

00:01:28.045 --> 00:01:32.295
It will have a typical Vue component which has a user,

00:01:32.295 --> 00:01:34.845
products, and a shopping basket.

00:01:34.845 --> 00:01:38.900
The user related code is in the data section,

00:01:38.900 --> 00:01:41.225
mounted, there is a method,

00:01:41.225 --> 00:01:43.540
and also a watch too.

00:01:43.540 --> 00:01:45.840
We also have products in data,

00:01:45.840 --> 00:01:50.140
we fetch them using a method which is called when the application mounts,

00:01:50.140 --> 00:01:52.740
and the remaining code is for our basket.

00:01:52.740 --> 00:01:55.760
The user can update or add products to the basket,

00:01:55.760 --> 00:01:59.020
they can then check out with the contents of this basket,

00:01:59.020 --> 00:02:02.060
and we also have a computed section to only show

00:02:02.060 --> 00:02:05.510
the basket if the user has added an item.

00:02:05.510 --> 00:02:10.610
This is traditional vue.js code and nothing at all wrong with this.

00:02:10.610 --> 00:02:13.510
Why introduce a new way?

00:02:13.510 --> 00:02:18.475
As mentioned before, this is fine until our application gets much bigger.

00:02:18.475 --> 00:02:21.130
This is a pretty simple example where we can see

00:02:21.130 --> 00:02:23.935
a high-level overview of all of our code,

00:02:23.935 --> 00:02:26.755
it also has been simplified to fill this page.

00:02:26.755 --> 00:02:29.360
We have no code inside of our methods,

00:02:29.360 --> 00:02:31.075
and in a real application,

00:02:31.075 --> 00:02:35.705
this simple example could easily be 3-4 times longer.

00:02:35.705 --> 00:02:40.780
Another drawback is our related code is all separated.

00:02:40.780 --> 00:02:44.620
All of these related parts are not glued together and it

00:02:44.620 --> 00:02:48.800
only becomes more of a problem as our files get bigger.

00:02:48.800 --> 00:02:52.510
This is one of the things composition aims to resolve.

00:02:52.510 --> 00:02:54.280
We can now write code more like

00:02:54.280 --> 00:02:58.795
traditional JavaScript and also group our code much more easily.

00:02:58.795 --> 00:03:03.185
In regular JavaScript, we may write the user section like this,

00:03:03.185 --> 00:03:06.125
using a constant [inaudible] the use object,

00:03:06.125 --> 00:03:09.790
and a function to get the user from a database.

00:03:09.790 --> 00:03:13.180
For the products, we could also have the product array and

00:03:13.180 --> 00:03:16.625
also a function to get the data which we need.

00:03:16.625 --> 00:03:19.935
Also, for the basket related go to,

00:03:19.935 --> 00:03:22.840
maybe some code which overlaps down the line,

00:03:22.840 --> 00:03:28.855
but we can already see that grouping these together to make our code much more organized.

00:03:28.855 --> 00:03:31.855
But where do we put all this code?

00:03:31.855 --> 00:03:35.170
As always, it goes in our export default section.

00:03:35.170 --> 00:03:39.910
Both of this, we wrap it in a setup function inside of here,

00:03:39.910 --> 00:03:43.940
we then also return anything we want to then be available to

00:03:43.940 --> 00:03:48.790
use in our template such as our constants and our functions.

00:03:48.790 --> 00:03:53.865
We're not just leaving Vue behind here either with this new look syntax.

00:03:53.865 --> 00:03:57.770
We still have access to familiar things such as life-cycle hooks,

00:03:57.770 --> 00:03:59.690
using the on prefix.

00:03:59.690 --> 00:04:02.510
Here, we see onMounted to get the user,

00:04:02.510 --> 00:04:05.335
and also the products when the component mount.

00:04:05.335 --> 00:04:09.615
We also import this from the Vue library as a named import,

00:04:09.615 --> 00:04:12.895
meaning we only import the parts which we need.

00:04:12.895 --> 00:04:18.290
Also, familiar things like watches and computed is also available too.

00:04:18.290 --> 00:04:19.970
In this example here,

00:04:19.970 --> 00:04:22.235
we import computed and wrap

00:04:22.235 --> 00:04:27.205
our show basket code with it to keep it updated with any changes.

00:04:27.205 --> 00:04:32.075
The second thing composition aims to improve on is reusability.

00:04:32.075 --> 00:04:36.980
This refactor we see has not made the components smaller or more reusable,

00:04:36.980 --> 00:04:40.330
it simply just grouped together the related sections.

00:04:40.330 --> 00:04:43.370
We may want to reuse the use objects and

00:04:43.370 --> 00:04:47.105
also the products too in a different part of our app.

00:04:47.105 --> 00:04:50.870
Current solutions include the possibility of getting this data

00:04:50.870 --> 00:04:54.935
at a top level component and then passing it down as prop.

00:04:54.935 --> 00:04:59.035
Although this can get messy when components are deeply nested,

00:04:59.035 --> 00:05:04.795
it can also place coding components which it was never intended to be in.

00:05:04.795 --> 00:05:07.910
We could also use a state management libraries such as

00:05:07.910 --> 00:05:12.325
Vuex which is a good option and provides a central store.

00:05:12.325 --> 00:05:18.665
Although this is something else to learn and also some extra way to add to our project,

00:05:18.665 --> 00:05:21.990
would it be great though if Vue natively provided

00:05:21.990 --> 00:05:27.245
a solution to make our code more easily accessible and reusable?

00:05:27.245 --> 00:05:30.920
Thanks to composition, this is now possible by

00:05:30.920 --> 00:05:34.865
moving our reusable code into separate files.

00:05:34.865 --> 00:05:36.890
The folder name is obtuse,

00:05:36.890 --> 00:05:40.685
but you may commonly see it called composables where

00:05:40.685 --> 00:05:44.945
each section of our code is then placed into a JavaScript file,

00:05:44.945 --> 00:05:47.540
commonly using the use prefix,

00:05:47.540 --> 00:05:52.045
which we can then import into any components which needs to use it.

00:05:52.045 --> 00:05:56.320
This leaves our components much lighter and more reusable.

00:05:56.320 --> 00:05:59.570
All of this code may look strange and confusing at first,

00:05:59.570 --> 00:06:01.910
especially if you are new to Vue.

00:06:01.910 --> 00:06:03.965
At first, it did to me too,

00:06:03.965 --> 00:06:06.710
but we are going to be spending a lot of time writing

00:06:06.710 --> 00:06:09.684
composition code in the upcoming sections,

00:06:09.684 --> 00:06:14.640
so you will get lots of practice and this will soon become more familiar.
