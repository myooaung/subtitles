WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.350 --> 00:00:02.580
For each one of our events,

00:00:02.580 --> 00:00:06.885
we need to calculate the number of days left until the event occurs.

00:00:06.885 --> 00:00:10.305
To do this, we're going to create a calculation based off

00:00:10.305 --> 00:00:14.730
the current date and then the date inside of our objects,

00:00:14.730 --> 00:00:19.240
so this property inside of each one of our items.

00:00:19.240 --> 00:00:21.060
Once you have this and the current dates,

00:00:21.060 --> 00:00:22.800
we can then work out the difference between

00:00:22.800 --> 00:00:26.520
these two dates and then convert this to be the number of days.

00:00:26.520 --> 00:00:30.615
This inside of the [inaudible] we are going to create a method.

00:00:30.615 --> 00:00:32.220
Under the data section,

00:00:32.220 --> 00:00:34.125
we can create our method section,

00:00:34.125 --> 00:00:38.010
and the name of the method is going to be Days Left.

00:00:38.080 --> 00:00:43.285
Days left is going to take in the particular event we want to calculate.

00:00:43.285 --> 00:00:46.250
This is soon going to calculate the number of days left.

00:00:46.250 --> 00:00:49.070
But first we need a way of actually calling

00:00:49.070 --> 00:00:52.585
this method and also providing the event data.

00:00:52.585 --> 00:00:56.465
Well, we cannot do this all at once in our template.

00:00:56.465 --> 00:01:00.320
We can setup a property which is going to be passed to our events.

00:01:00.320 --> 00:01:01.819
This will be dynamic,

00:01:01.819 --> 00:01:04.795
and this is going to be the number of days left.

00:01:04.795 --> 00:01:07.500
This can be set to old method,

00:01:07.500 --> 00:01:09.540
which is also called Days Left,

00:01:09.540 --> 00:01:11.780
where we're going to pass in each individual event,

00:01:11.780 --> 00:01:14.160
which is from our loop.

00:01:15.230 --> 00:01:17.800
One thing to beware of here,

00:01:17.800 --> 00:01:21.620
we are not actually passing this method as a prop.

00:01:21.620 --> 00:01:25.400
Instead, what we're going to be doing is passing the result of this method,

00:01:25.400 --> 00:01:27.640
which is going to be returned back.

00:01:27.640 --> 00:01:29.970
The way we can do this is by calling

00:01:29.970 --> 00:01:33.410
this function and then providing a return section at the end.

00:01:33.410 --> 00:01:38.880
We're going to return value rather than the actual reference to this method.

00:01:39.530 --> 00:01:43.100
Let's first check our method is working and we are receiving

00:01:43.100 --> 00:01:46.580
the event data by doing a console log.

00:01:46.580 --> 00:01:50.720
Let's do the event.date and for this we're going

00:01:50.720 --> 00:01:55.170
to need to go into the browser developer tools with right-click and inspect,

00:01:55.450 --> 00:01:59.060
open up the console and now we see

00:01:59.060 --> 00:02:03.875
six different dates since we are calling this method for each one of our events,

00:02:03.875 --> 00:02:05.770
mainly this is working fine.

00:02:05.770 --> 00:02:08.875
Now we need to work with some JavaScript date methods,

00:02:08.875 --> 00:02:10.340
and to get the current date,

00:02:10.340 --> 00:02:13.015
we can use date.now.

00:02:13.015 --> 00:02:17.045
First let's do this inside of a console log and we can check we have

00:02:17.045 --> 00:02:21.875
all the information which we need to log data now.

00:02:21.875 --> 00:02:24.465
Then we're can refresh the browser,

00:02:24.465 --> 00:02:26.660
and this may look pretty confusing,

00:02:26.660 --> 00:02:29.605
but we need to look at each one of these impairs.

00:02:29.605 --> 00:02:33.110
We're doing it two console logs for each time the method is called.

00:02:33.110 --> 00:02:35.710
The first two is for the first event,

00:02:35.710 --> 00:02:39.805
the third, fourth item is for the second event and so on.

00:02:39.805 --> 00:02:42.960
We can see that both the event.date,

00:02:42.960 --> 00:02:47.735
which is the first one on the date.now is in completely different formats.

00:02:47.735 --> 00:02:51.365
The first one of the event date is a string, which is the year,

00:02:51.365 --> 00:02:55.965
the month, and finally the day and then below the current date.

00:02:55.965 --> 00:02:59.270
The current date is going to be formatted in a number of

00:02:59.270 --> 00:03:03.175
milliseconds since the 1st of January, 1970.

00:03:03.175 --> 00:03:04.820
To compare these two,

00:03:04.820 --> 00:03:09.790
we need to convert the event date to be in the same format,

00:03:09.790 --> 00:03:14.495
and to do this JavaScript provides us with a date method called Pass,

00:03:14.495 --> 00:03:17.390
upon is to replace,

00:03:17.390 --> 00:03:22.500
again we'll access the date object and call the method Call Pass.

00:03:22.550 --> 00:03:26.275
Where we're going to pass in our event.date,

00:03:26.275 --> 00:03:29.240
refresh the browser and we'll now see that each pair

00:03:29.240 --> 00:03:32.195
of dates we have is now in the same format.

00:03:32.195 --> 00:03:37.105
This is good because this now means we can compare our two dates which we have.

00:03:37.105 --> 00:03:40.594
We need to build this up in a number of stages.

00:03:40.594 --> 00:03:45.905
The first stage is to deduct the current date from the date of the event.

00:03:45.905 --> 00:03:50.820
Grab this and then we'll deduct date.now.

00:03:52.090 --> 00:03:57.395
This will give us the difference which I'm going to store in a constant called Time.

00:03:57.395 --> 00:04:00.965
Just like the results within inside the console this time,

00:04:00.965 --> 00:04:04.595
variable is also going to be stored in milliseconds.

00:04:04.595 --> 00:04:07.699
This time constant is stored in milliseconds,

00:04:07.699 --> 00:04:10.130
so we need to now convert this.

00:04:10.130 --> 00:04:14.450
Grab all constants and to convert milliseconds to seconds,

00:04:14.450 --> 00:04:17.645
we divide the result by 1000,

00:04:17.645 --> 00:04:20.390
which will then give us the number of seconds

00:04:20.390 --> 00:04:23.330
between the current date and the event date.

00:04:23.330 --> 00:04:25.160
But we don't want the number of seconds.

00:04:25.160 --> 00:04:29.530
What we want to do is to convert this into the number of days.

00:04:29.530 --> 00:04:32.160
To convert this seconds days, first,

00:04:32.160 --> 00:04:35.570
we need to multiply this by 60 seconds and then again,

00:04:35.570 --> 00:04:39.750
we'll multiply this by 60 minutes and last of all,

00:04:39.750 --> 00:04:44.760
we'll multiply this by 24 since we have 24 hours in a day.

00:04:44.760 --> 00:04:47.600
This will be our new results which we can store inside of

00:04:47.600 --> 00:04:50.750
a constant called Days and make

00:04:50.750 --> 00:04:54.340
sure that the text editor doesn't place these brackets in the wrong places.

00:04:54.340 --> 00:04:58.680
We need to provide the brackets around the numbers.

00:04:59.060 --> 00:05:02.740
Just as a recap, we have the time in milliseconds.

00:05:02.740 --> 00:05:04.230
To convert this into seconds,

00:05:04.230 --> 00:05:06.010
we divide this by 1000.

00:05:06.010 --> 00:05:08.645
We multiply this by the number of seconds in a day,

00:05:08.645 --> 00:05:10.280
the number of minutes in a day,

00:05:10.280 --> 00:05:12.245
and then the number of hours in a day,

00:05:12.245 --> 00:05:17.575
which results in the number of days between our current date and also the event date.

00:05:17.575 --> 00:05:22.130
We can take a step out of these two by reducing 60 multiplied by

00:05:22.130 --> 00:05:27.020
60 by instead of passing in the result of 3,600.

00:05:27.020 --> 00:05:28.400
This is exactly the same,

00:05:28.400 --> 00:05:31.280
but just a shorter way of doing things.

00:05:31.280 --> 00:05:33.620
The final thing to do to get

00:05:33.620 --> 00:05:38.240
our correctly formatted number of days is to round this number up.

00:05:38.240 --> 00:05:40.775
Cut out the result of this,

00:05:40.775 --> 00:05:44.190
use a math function called Seal,

00:05:44.390 --> 00:05:49.040
which is going to round up our number to the nearest whole number.

00:05:49.040 --> 00:05:53.420
Passes [inaudible]. We can clean up our console logs and

00:05:53.420 --> 00:05:58.315
it's this number of days which we want to return back from this method.

00:05:58.315 --> 00:06:04.115
It is return value which is going to be passed as a prop to the event component.

00:06:04.115 --> 00:06:06.500
Let's head over to this event component now,

00:06:06.500 --> 00:06:10.115
we can receive this as a prop inside of our array.

00:06:10.115 --> 00:06:13.050
This prop was days left,

00:06:13.210 --> 00:06:18.155
then we can check if this is working by outputting this inside of our template.

00:06:18.155 --> 00:06:20.000
Instead of this hard-coded value,

00:06:20.000 --> 00:06:24.690
let's remove this and output prop which was days left.

00:06:25.040 --> 00:06:30.305
Over to the browser and this has now changed for each one of our events.

00:06:30.305 --> 00:06:34.220
Notice he will see both positive and negative numbers and this

00:06:34.220 --> 00:06:38.490
is completely normal and this is something which we will deal with soon.
