WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.020 --> 00:00:02.805
Reactive objects, just like this one,

00:00:02.805 --> 00:00:05.520
are ideal if we have multiple properties,

00:00:05.520 --> 00:00:07.020
just like we do here,

00:00:07.020 --> 00:00:11.460
especially if they are also related to and we want to group them together.

00:00:11.460 --> 00:00:15.405
But what about simpler values like strings or numbers?

00:00:15.405 --> 00:00:19.230
If we just had a single value like a primitive,

00:00:19.230 --> 00:00:21.465
let's say a user,

00:00:21.465 --> 00:00:24.165
which was equal to a string,

00:00:24.165 --> 00:00:29.295
we could also place our user property onto an object, just like this,

00:00:29.295 --> 00:00:31.170
and then use reactive,

00:00:31.170 --> 00:00:33.090
or for single values like this,

00:00:33.090 --> 00:00:36.180
it may be more convenient to use a ref.

00:00:36.180 --> 00:00:37.860
Now, to see a ref in action,

00:00:37.860 --> 00:00:41.555
we also need to import this from the view library,

00:00:41.555 --> 00:00:44.150
and then just like reactive above,

00:00:44.150 --> 00:00:46.160
we also use ref as a wrapper,

00:00:46.160 --> 00:00:50.390
so when we can cut this out and wrap this inside of our ref.

00:00:50.390 --> 00:00:52.640
To use this in our template,

00:00:52.640 --> 00:00:56.040
we also need to return this from setup,

00:00:57.020 --> 00:01:00.640
and let's add this to our template,

00:01:01.730 --> 00:01:06.755
and set our user to be equal to this user which we have just returned.

00:01:06.755 --> 00:01:10.100
Okay. So we now see our user inside the browser,

00:01:10.100 --> 00:01:13.375
but we also need to test for reactivity too.

00:01:13.375 --> 00:01:16.655
We can do this inside of our timeout.

00:01:16.655 --> 00:01:18.970
Instead of updating our data,

00:01:18.970 --> 00:01:21.770
we can now update the username.

00:01:22.820 --> 00:01:26.070
So this and refresh the browser.

00:01:26.070 --> 00:01:29.125
We see an error that we're trying to update the user,

00:01:29.125 --> 00:01:32.170
but this is a constant. So this is fair enough.

00:01:32.170 --> 00:01:36.350
We can change this to be let and see what happens,

00:01:37.640 --> 00:01:39.665
and after three seconds,

00:01:39.665 --> 00:01:42.695
we don't see any updates to this username.

00:01:42.695 --> 00:01:44.470
Now, this may seem strange,

00:01:44.470 --> 00:01:47.155
but there is a reason why this is happening.

00:01:47.155 --> 00:01:49.720
Behind the scenes, our user value,

00:01:49.720 --> 00:01:54.515
which we have here, is also being converted to a reactive object,

00:01:54.515 --> 00:01:57.325
and to access our object's value,

00:01:57.325 --> 00:02:00.005
it gives us a property called value,

00:02:00.005 --> 00:02:03.805
and we need to reference this every time we want to access our user.

00:02:03.805 --> 00:02:06.220
So to access the name inside of here,

00:02:06.220 --> 00:02:09.700
we need to access user.value.

00:02:09.700 --> 00:02:12.800
Save and refresh the browser.

00:02:13.520 --> 00:02:17.605
Three seconds later, our user is now updated.

00:02:17.605 --> 00:02:20.260
This value property always needs to be used when

00:02:20.260 --> 00:02:23.175
working inside of the JavaScript section.

00:02:23.175 --> 00:02:25.990
However, up in the template, just here,

00:02:25.990 --> 00:02:29.285
as we can see, we don't need to use it inside the template.

00:02:29.285 --> 00:02:32.590
When accessing a ref value inside the template,

00:02:32.590 --> 00:02:35.635
the value is automatically unwrapped for us.

00:02:35.635 --> 00:02:37.945
Now, with ref and reactive,

00:02:37.945 --> 00:02:42.815
this now leaves us with two options when it comes to making values reactive,

00:02:42.815 --> 00:02:46.065
and either way, we end up with a reactive object.

00:02:46.065 --> 00:02:48.830
The exact use for either is pretty flexible,

00:02:48.830 --> 00:02:50.170
both as a general rule.

00:02:50.170 --> 00:02:52.595
I use reactive when I want to group together

00:02:52.595 --> 00:02:57.234
multiple properties or values in a object like syntax,

00:02:57.234 --> 00:02:59.070
and then use ref, just like this,

00:02:59.070 --> 00:03:02.270
and we'll a single standalone value such as a string,

00:03:02.270 --> 00:03:05.845
a number, or even a single object too.

00:03:05.845 --> 00:03:09.515
But again, the use case of both of these is pretty flexible and it's up to

00:03:09.515 --> 00:03:13.950
us as a developer which one we prefer to use in our project.
