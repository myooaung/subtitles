WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.720
Upon selecting any of these cards from our grid,

00:00:03.720 --> 00:00:06.060
we then take into this great view,

00:00:06.060 --> 00:00:09.990
and we also have access to the ID of the selected card.

00:00:09.990 --> 00:00:13.695
This means we can use this to get the card which we need to display,

00:00:13.695 --> 00:00:17.595
and this can also go inside of a composable file 2,

00:00:17.595 --> 00:00:22.290
into the sidebar, and then into the composables,

00:00:22.290 --> 00:00:26.890
create a new file inside here called, use Current card.

00:00:27.560 --> 00:00:31.709
Remember these have the js extension.

00:00:31.709 --> 00:00:37.510
Setup an export, with default function called use Current card.

00:00:42.110 --> 00:00:48.770
The job of this function is going to be to get the selected card, to retrieve this,

00:00:48.770 --> 00:00:50.960
we also need to access all of our cards,

00:00:50.960 --> 00:00:53.360
so we can filter down the selected one,

00:00:53.360 --> 00:00:58.020
we can possibly use cards composable, into this section.

00:00:59.180 --> 00:01:02.705
Only file path, which is going to be dot slash,

00:01:02.705 --> 00:01:05.210
and the filename of use Cards.

00:01:05.210 --> 00:01:08.660
Remember the use Cards has returned to this all cards variables,

00:01:08.660 --> 00:01:11.180
now we need to go back into our composable,

00:01:11.180 --> 00:01:14.220
and then extract this from our function.

00:01:18.140 --> 00:01:23.734
We now have all of our cards and what we need to do now is to create a second constant,

00:01:23.734 --> 00:01:26.665
which is going to store the selected card.

00:01:26.665 --> 00:01:29.510
This selected card will also be an object,

00:01:29.510 --> 00:01:33.125
we can pass in an empty object as the initial value.

00:01:33.125 --> 00:01:35.060
Since we are using a ref,

00:01:35.060 --> 00:01:39.030
we also need to import this from the view library,

00:01:40.790 --> 00:01:46.270
and then we're going to filter this all Card section that with the selected card.

00:01:46.270 --> 00:01:48.810
First grab the selected cards,

00:01:48.810 --> 00:01:50.415
and we can set the value,

00:01:50.415 --> 00:01:52.590
to be equal to all card.

00:01:52.590 --> 00:01:55.405
This all card is also erupt in a raft 2,

00:01:55.405 --> 00:01:59.815
we also need to use the dot value to access the result,

00:01:59.815 --> 00:02:05.880
and make use of the JavaScript filter method which is going to take in a function,

00:02:05.900 --> 00:02:12.595
which is going to filter these if the card dot id is equal to something.

00:02:12.595 --> 00:02:16.325
Now we just set this to a static value of one,

00:02:16.325 --> 00:02:19.460
back over to have a great dot view components.

00:02:19.460 --> 00:02:23.105
We can now check this is working by importing this composable,

00:02:23.105 --> 00:02:26.110
and then display this inside of the template.

00:02:26.110 --> 00:02:28.275
First import this.

00:02:28.275 --> 00:02:31.420
It says use Current card,

00:02:31.970 --> 00:02:38.670
from the file path into the source composables,

00:02:38.670 --> 00:02:41.530
and then use Current card,

00:02:41.870 --> 00:02:47.080
into our exports, for the setup function.

00:02:47.780 --> 00:02:50.580
Infact, we forgot to do one thing,

00:02:50.580 --> 00:02:52.920
and that one thing is over and use Current cards,

00:02:52.920 --> 00:02:57.430
we also need to return back a value to use in our components,

00:02:57.430 --> 00:03:01.800
and the return value is going to be selected card,

00:03:02.380 --> 00:03:04.665
I hope you spotted that one,

00:03:04.665 --> 00:03:08.685
back to the create section into the setup.

00:03:08.685 --> 00:03:12.570
Will now extract this into a constant.

00:03:14.480 --> 00:03:17.180
To display this in the templates,

00:03:17.180 --> 00:03:20.880
this also needs to be returned back from this function,

00:03:21.260 --> 00:03:25.665
and then place it anywhere in the template above,

00:03:25.665 --> 00:03:28.120
just to check this is working.

00:03:30.230 --> 00:03:34.320
Let's check this. We see an error in our composable,

00:03:34.320 --> 00:03:37.900
all is defined, but never used.

00:03:39.620 --> 00:03:42.720
We can also autocomplete that.

00:03:42.720 --> 00:03:46.665
Refresh and there's our selected card.

00:03:46.665 --> 00:03:51.020
Good, this is all of the details from our card with the ID 1,

00:03:51.020 --> 00:03:53.095
which we set just here.

00:03:53.095 --> 00:03:58.100
But notice how our card object is also surrounded in these array brackets.

00:03:58.100 --> 00:04:02.105
This is because our all cards data is an array of objects.

00:04:02.105 --> 00:04:04.670
To work with this one single object,

00:04:04.670 --> 00:04:08.285
we need to pull it out of this array with districting.

00:04:08.285 --> 00:04:12.065
We did say before that this selected card needs be a object,

00:04:12.065 --> 00:04:15.470
and we distribute this outs of our array,

00:04:15.470 --> 00:04:18.350
by surrounding this in the square brackets.

00:04:18.350 --> 00:04:22.310
Refresh and these brackets are now gone.

00:04:22.310 --> 00:04:26.360
Next, rather than using the hard-coded value of one,

00:04:26.360 --> 00:04:28.625
we now go to import the router,

00:04:28.625 --> 00:04:31.580
and get the ID from the params.

00:04:31.580 --> 00:04:34.320
First import this.

00:04:34.510 --> 00:04:37.505
We use equal route.

00:04:37.505 --> 00:04:41.280
This is from the view relative package,

00:04:41.660 --> 00:04:47.370
and then store is in a constant so we can access this inside of our function.

00:04:49.100 --> 00:04:52.820
This routes can now be used to access the params rather than

00:04:52.820 --> 00:04:57.215
these hard coded value, route params,

00:04:57.215 --> 00:05:00.710
and the parameter name which you gave this over in the routers index page,

00:05:00.710 --> 00:05:06.255
was the ID of the browser,

00:05:06.255 --> 00:05:09.190
and it just wants to be use route.

00:05:09.380 --> 00:05:14.045
The card has now disappeared. Let's try one more.

00:05:14.045 --> 00:05:16.820
Now, we did have a card on the screen just before,

00:05:16.820 --> 00:05:19.760
but now since we replace this with our router,

00:05:19.760 --> 00:05:21.970
we don't see anything on the screen.

00:05:21.970 --> 00:05:25.310
Now, this is one of them, web development gotcha moments.

00:05:25.310 --> 00:05:26.810
What we need here,

00:05:26.810 --> 00:05:27.980
is a card ID,

00:05:27.980 --> 00:05:31.265
which we get in with the router.params.id.

00:05:31.265 --> 00:05:34.775
We need this to be a data type of number.

00:05:34.775 --> 00:05:38.870
In act, when we read anything from our URL parameters,

00:05:38.870 --> 00:05:41.785
this is returned back as a string.

00:05:41.785 --> 00:05:44.870
We can see this if we do a console log.

00:05:44.870 --> 00:05:47.810
Just anywhere inside this file,

00:05:47.810 --> 00:05:52.620
access the route params.id,

00:05:52.850 --> 00:06:02.820
and we can use JavaScript to track the datatype with type of into the console,

00:06:02.820 --> 00:06:07.525
refresh the browser and we see the data type is string,

00:06:07.525 --> 00:06:11.675
and this is why all filter is not working because this is comparing,

00:06:11.675 --> 00:06:15.320
with the strict equality we check in if the data type of string,

00:06:15.320 --> 00:06:17.995
is equal to this, which is a number.

00:06:17.995 --> 00:06:21.815
We could just use the double equals like this.

00:06:21.815 --> 00:06:24.770
This would ignore the datatype difference,

00:06:24.770 --> 00:06:26.525
and just use the value.

00:06:26.525 --> 00:06:29.390
Or alternatively, we could grab this,

00:06:29.390 --> 00:06:32.575
wrap this inside of the number function,

00:06:32.575 --> 00:06:35.405
and this would convert the string to be a number,

00:06:35.405 --> 00:06:37.730
and this would also work to.

00:06:37.730 --> 00:06:40.325
Let us check a couple more cards.

00:06:40.325 --> 00:06:41.795
This will be the third one.

00:06:41.795 --> 00:06:44.070
We see the ID 3.

00:06:44.180 --> 00:06:47.760
The fifth one, ID 5.

00:06:47.760 --> 00:06:50.890
This also matches up to.
