WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.350 --> 00:00:04.230
Provide and inject is something we've already looked at,

00:00:04.230 --> 00:00:07.710
the having a source of data in a top level component,

00:00:07.710 --> 00:00:10.335
and then directly injecting it into

00:00:10.335 --> 00:00:16.245
any child components without needing to pass down props to each component level.

00:00:16.245 --> 00:00:19.170
We can also use this with the composition tool.

00:00:19.170 --> 00:00:23.720
The setup function can accept either provide or inject.

00:00:23.720 --> 00:00:29.000
One of the issues earlier was the provided data was not reactive.

00:00:29.000 --> 00:00:32.270
When there was a change to the data inside this provider,

00:00:32.270 --> 00:00:37.125
any of the child components below which relied on this, was not updated.

00:00:37.125 --> 00:00:39.485
But now we know about view free,

00:00:39.485 --> 00:00:42.740
the composition API and also reactivity,

00:00:42.740 --> 00:00:46.220
we can now make use of this to fix this issue.

00:00:46.220 --> 00:00:48.920
Over to the update view components and I'm going to

00:00:48.920 --> 00:00:51.830
show you how we can use this with composition.

00:00:51.830 --> 00:00:55.475
Remember though a provider can be placed in any component,

00:00:55.475 --> 00:00:57.920
not just this main update view.

00:00:57.920 --> 00:01:01.430
First, we need a setup function with some data.

00:01:01.430 --> 00:01:04.330
Place this inside of our script section,

00:01:04.330 --> 00:01:06.440
and then for our demonstration purposes,

00:01:06.440 --> 00:01:15.029
create a user object with the name property and also the occupation.

00:01:18.470 --> 00:01:21.590
Since this is our top-level component,

00:01:21.590 --> 00:01:24.665
we're going to place in the provider inside of here.

00:01:24.665 --> 00:01:29.160
To do this, we need to import this from the view library.

00:01:29.440 --> 00:01:34.210
This is provide from the view library.

00:01:34.210 --> 00:01:38.360
Then down to the setup function we can place in our provider,

00:01:38.360 --> 00:01:41.200
which is going to take in two things.

00:01:41.200 --> 00:01:44.675
The first one is the name of this data,

00:01:44.675 --> 00:01:47.270
and this is like a variable name.

00:01:47.270 --> 00:01:49.385
Next one is the user.

00:01:49.385 --> 00:01:54.530
Then separated by comma we're going to pass down the actual data which you want to send.

00:01:54.530 --> 00:01:57.650
In our case, this refers to our user objects.

00:01:57.650 --> 00:02:00.094
Inside of any of these child components,

00:02:00.094 --> 00:02:02.120
when we inject in the user,

00:02:02.120 --> 00:02:04.880
this is the data which it will receive.

00:02:04.880 --> 00:02:08.905
To save this file, I'm going to go over to the text output.

00:02:08.905 --> 00:02:13.415
We already have a setup function and we also have an import just here,

00:02:13.415 --> 00:02:15.970
so we can also import inject into here,

00:02:15.970 --> 00:02:21.930
and then we can inject this user object down to the setup, create a constant.

00:02:21.930 --> 00:02:27.885
To store this, user data, access inject.

00:02:27.885 --> 00:02:31.160
Then when it passes in the data which you want to inject,

00:02:31.160 --> 00:02:34.590
and in our case, we give this name the user.

00:02:35.450 --> 00:02:38.040
Pass this in as a string.

00:02:38.040 --> 00:02:41.555
We can also add a optional second value two,

00:02:41.555 --> 00:02:44.095
which is a default value.

00:02:44.095 --> 00:02:46.835
Like when we use these slots early on when we added

00:02:46.835 --> 00:02:49.760
a default or a fallback piece of data,

00:02:49.760 --> 00:02:53.670
I'm just going to alternate string of no data available.

00:02:54.200 --> 00:02:58.750
Return is user data constant down at the bottom.

00:03:00.080 --> 00:03:05.670
We can check this is working by outputting this inside of our template,

00:03:07.330 --> 00:03:10.505
over to the browser and reload this,

00:03:10.505 --> 00:03:15.095
and there's our object at the top of each one of our text output components.

00:03:15.095 --> 00:03:19.445
Now, reactivity was an issue early on when we looked at provide and inject,

00:03:19.445 --> 00:03:21.535
with the options API,

00:03:21.535 --> 00:03:24.665
let's see how this compares with the composition.

00:03:24.665 --> 00:03:26.795
Back to our app dot vue,

00:03:26.795 --> 00:03:35.735
we can simulate the data obtained with set timeout as NA function,

00:03:35.735 --> 00:03:38.150
which we'll call after three seconds.

00:03:38.150 --> 00:03:42.335
What I want to do inside of here is to start to use objects,

00:03:42.335 --> 00:03:44.045
access the name property,

00:03:44.045 --> 00:03:46.600
and set this to any different value.

00:03:46.600 --> 00:03:50.835
We can try this out with a refresh.

00:03:50.835 --> 00:03:53.380
Give this three seconds.

00:03:53.570 --> 00:03:58.205
We see no updates inside of this child component.

00:03:58.205 --> 00:04:03.325
Even with composition provides and inject is not reactive by default.

00:04:03.325 --> 00:04:07.345
But as we already know, composition gives us access to reactive wrappers,

00:04:07.345 --> 00:04:10.070
so we can use either rough or reactive.

00:04:10.070 --> 00:04:13.225
In this occasion I'm going to go for reactive,

00:04:13.225 --> 00:04:17.780
inside the app dot vue and pull this.

00:04:17.800 --> 00:04:22.190
This is now going to be a wrapper for our use objects.

00:04:22.190 --> 00:04:26.345
Cut out the contents of the object,

00:04:26.345 --> 00:04:31.475
place in reactive, paste this inside of the brackets.

00:04:31.475 --> 00:04:36.200
Save this once again and over to the browser, refresh.

00:04:36.200 --> 00:04:40.940
Give it three seconds, and our name is now updated.

00:04:40.940 --> 00:04:45.475
If we had multiple pieces of data to pass down to child components,

00:04:45.475 --> 00:04:47.900
we could also set up multiple providers,

00:04:47.900 --> 00:04:50.870
just like this one here, or alternatively,

00:04:50.870 --> 00:04:54.770
we could pass down all of our data in one big reactive object,

00:04:54.770 --> 00:04:57.295
and then pass this to the provider.

00:04:57.295 --> 00:05:00.450
This is how provide and inject works with composition.

00:05:00.450 --> 00:05:02.385
We don't need this for our projects,

00:05:02.385 --> 00:05:07.054
so I'm going to remove the setup function, the imports,

00:05:07.054 --> 00:05:10.910
we also have the inject inside of the text output,

00:05:10.910 --> 00:05:13.340
move the user data,

00:05:13.340 --> 00:05:16.560
the import, the user data,

00:05:16.560 --> 00:05:19.685
and then finally, our returned object.

00:05:19.685 --> 00:05:23.695
The use cases for provide and inject may not be as common now,

00:05:23.695 --> 00:05:26.800
since we also have the ability to use composable files

00:05:26.800 --> 00:05:30.445
and then import them directly into child components.

00:05:30.445 --> 00:05:34.285
But it isn't an option and a novel way of passing down our data,

00:05:34.285 --> 00:05:36.490
especially if we maybe have a smaller app,

00:05:36.490 --> 00:05:41.465
we don't plan on breaking up our code into smaller composable files.

00:05:41.465 --> 00:05:44.865
We've pushed through quite a bit of project code in this section,

00:05:44.865 --> 00:05:47.830
and our project is almost fully functional.

00:05:47.830 --> 00:05:51.220
In the upcoming section, we will discover that some more cool features

00:05:51.220 --> 00:05:55.520
of vue.js And also the view router provides.
