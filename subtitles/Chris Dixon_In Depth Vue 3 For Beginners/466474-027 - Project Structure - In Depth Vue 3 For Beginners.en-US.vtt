WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.710 --> 00:00:05.055
I just want to take a few moments to look at the project structure,

00:00:05.055 --> 00:00:06.750
which we've just created.

00:00:06.750 --> 00:00:09.240
If we look in the sidebar we'll see all of the files and

00:00:09.240 --> 00:00:12.345
folders which are now inside of our project.

00:00:12.345 --> 00:00:16.365
The first folder we see is the node modules.

00:00:16.365 --> 00:00:20.490
This folder is where all of the MPM modules are installed.

00:00:20.490 --> 00:00:22.485
If you have used node before,

00:00:22.485 --> 00:00:25.320
you will be familiar with this kind of setup.

00:00:25.320 --> 00:00:29.640
Typically, projects which use node is split up into packages.

00:00:29.640 --> 00:00:32.235
Each one add in some functionality.

00:00:32.235 --> 00:00:34.380
We may have a package, for example,

00:00:34.380 --> 00:00:37.875
which formats dates, one which does form validation.

00:00:37.875 --> 00:00:41.145
We can also add our own packages in here too,

00:00:41.145 --> 00:00:43.905
using MPM which we have just set up.

00:00:43.905 --> 00:00:48.290
This is where things such as the vue.js code libraries located,

00:00:48.290 --> 00:00:53.510
rather than linking it to the CDN script like we did in the first project.

00:00:53.510 --> 00:00:55.955
If you are familiar with all of this,

00:00:55.955 --> 00:01:01.375
an MPM install has been run for us when we set up the project with the CLI.

00:01:01.375 --> 00:01:06.425
After this, we have the public folder which contains our static files,

00:01:06.425 --> 00:01:08.750
such as any images we want to use,

00:01:08.750 --> 00:01:10.835
and also any HTML.

00:01:10.835 --> 00:01:12.845
First we have the favicon,

00:01:12.845 --> 00:01:15.905
which is the icon which will appear in the browser tab.

00:01:15.905 --> 00:01:18.680
Then we have the index.html.

00:01:18.680 --> 00:01:20.810
If we open up this index.html,

00:01:20.810 --> 00:01:23.965
we don't see a lot of content inside of here,

00:01:23.965 --> 00:01:27.650
and as I mentioned in the single-page application video,

00:01:27.650 --> 00:01:30.980
these types of apps have a minimal html structure.

00:01:30.980 --> 00:01:37.435
Then the rest of the code will be bundled and injected into this div with the ID of App.

00:01:37.435 --> 00:01:40.250
Just like in the first project where we mounted

00:01:40.250 --> 00:01:43.940
the view instance to a particular element in HTML.

00:01:43.940 --> 00:01:46.130
This is the location in this project,

00:01:46.130 --> 00:01:47.975
which it will be mounted to.

00:01:47.975 --> 00:01:50.935
We'll see how this is done very soon.

00:01:50.935 --> 00:01:54.050
After this, we have the source folder.

00:01:54.050 --> 00:01:56.750
This folder is where we do most of our work.

00:01:56.750 --> 00:02:00.580
This is where we will be at in most of our code for this project.

00:02:00.580 --> 00:02:03.180
Here we have the assets folder,

00:02:03.180 --> 00:02:08.900
this is where we store the assets for the project such as any CSS files any icons

00:02:08.900 --> 00:02:13.055
our phones and we can also place images inside of here too.

00:02:13.055 --> 00:02:17.885
Below this, the components folder is something which we'll look at in more detail soon.

00:02:17.885 --> 00:02:21.965
But rather than creating components like we looked at in the last section,

00:02:21.965 --> 00:02:24.830
we can organize them into separate files.

00:02:24.830 --> 00:02:27.500
And this is where we're going to be storing them.

00:02:27.500 --> 00:02:32.345
The single component we have setup is this HelloWorld example.

00:02:32.345 --> 00:02:36.370
This is an example of a single file component.

00:02:36.370 --> 00:02:39.830
This is generally split up into three sections.

00:02:39.830 --> 00:02:42.410
First of all, we have the template section,

00:02:42.410 --> 00:02:45.410
which is going to contain our HTML code.

00:02:45.410 --> 00:02:50.660
This is similar to the last section where we created our global and our local components,

00:02:50.660 --> 00:02:53.320
we had the template section as a string.

00:02:53.320 --> 00:02:55.490
However, with a single file component,

00:02:55.490 --> 00:03:01.220
this is much more convenient since we can lay this out just like regular HTML.

00:03:01.220 --> 00:03:05.150
We can also use the double curly braces to insert our data.

00:03:05.150 --> 00:03:07.390
So this should all look pretty familiar.

00:03:07.390 --> 00:03:11.300
If we scroll down to the end of the template section,

00:03:11.300 --> 00:03:13.805
we then have a script section.

00:03:13.805 --> 00:03:19.115
It's actually is where we're going to add both our JavaScript and also our view JS code.

00:03:19.115 --> 00:03:21.920
Inside of this export default section is where we can

00:03:21.920 --> 00:03:25.285
setup things such as our data and methods.

00:03:25.285 --> 00:03:31.060
Then finally at the bottom, we also have a style section where we could place our CSS,

00:03:31.060 --> 00:03:34.970
splitting up our code into single file components like this.

00:03:34.970 --> 00:03:38.540
It's made possible by using bill tools such as web Park,

00:03:38.540 --> 00:03:40.430
which bundles everything together,

00:03:40.430 --> 00:03:45.010
throws into one output file which is then used for production.

00:03:45.010 --> 00:03:47.640
Next we see the App.vue file,

00:03:47.640 --> 00:03:50.480
and this is a special Vue file which you can think of as

00:03:50.480 --> 00:03:53.675
the main file or the main component.

00:03:53.675 --> 00:03:57.140
Just like with the HelloWorld example we just looked at,

00:03:57.140 --> 00:03:59.870
this file also has a template section,

00:03:59.870 --> 00:04:03.355
a script, and also the style section too.

00:04:03.355 --> 00:04:08.135
We could write our full project code inside of this one single file.

00:04:08.135 --> 00:04:10.535
However, it will get very big.

00:04:10.535 --> 00:04:16.495
Instead we generally take our code and break these up into smaller components.

00:04:16.495 --> 00:04:19.895
Since these components in their own separate file,

00:04:19.895 --> 00:04:21.365
we do need to import them,

00:04:21.365 --> 00:04:22.730
just like we see here,

00:04:22.730 --> 00:04:25.660
before we can use them in our template.

00:04:25.660 --> 00:04:28.905
So with all of this Vue.js code in place,

00:04:28.905 --> 00:04:31.615
we now just need a way to mount this to the dom.

00:04:31.615 --> 00:04:34.365
We already seen in the index.html,

00:04:34.365 --> 00:04:35.720
we have this mountain point,

00:04:35.720 --> 00:04:38.180
which is the div with the ID of App.

00:04:38.180 --> 00:04:40.280
This mounting is done in the next file,

00:04:40.280 --> 00:04:42.715
which is the main.js.

00:04:42.715 --> 00:04:46.100
This is the main JavaScript file for our project

00:04:46.100 --> 00:04:50.285
and the place where we can also add plugins to such as the router.

00:04:50.285 --> 00:04:54.290
Since we are now using the view MPM module,

00:04:54.290 --> 00:04:57.895
we'll now need to import the parts of this library which we need.

00:04:57.895 --> 00:05:02.900
The main part which we need is this createApp and we're using the curly braces.

00:05:02.900 --> 00:05:06.560
So we import only the single section of the vue library.

00:05:06.560 --> 00:05:09.830
This is also referred to as a named import.

00:05:09.830 --> 00:05:12.305
Now we have access to createApp.

00:05:12.305 --> 00:05:15.200
We can use it just like we did in the earlier project

00:05:15.200 --> 00:05:18.770
and then mount this to the div with the ID of App,

00:05:18.770 --> 00:05:21.035
which we've just seen in our index page.

00:05:21.035 --> 00:05:24.605
In the earlier project, we added an object to createApp.

00:05:24.605 --> 00:05:30.305
We did this manually by passing in an object and then we save things such as our data.

00:05:30.305 --> 00:05:33.125
But now instead with this type of setup,

00:05:33.125 --> 00:05:35.495
we import the root components,

00:05:35.495 --> 00:05:38.015
which is the App.vue.

00:05:38.015 --> 00:05:42.865
Then all of our components are going to be nested inside of here.

00:05:42.865 --> 00:05:45.470
This may all seem a little complex at first,

00:05:45.470 --> 00:05:48.770
but all we are generally doing is creating an index page or

00:05:48.770 --> 00:05:52.775
an HTML file and then mounting our view application to it.

00:05:52.775 --> 00:05:55.325
The difference now rather than passing in an object,

00:05:55.325 --> 00:05:58.565
is this new app file can also contain components,

00:05:58.565 --> 00:06:03.425
but ultimately they all nested under this one App.vue file.

00:06:03.425 --> 00:06:06.260
After this, we have the gitignore file.

00:06:06.260 --> 00:06:08.975
If you are using git for version control,

00:06:08.975 --> 00:06:13.450
we have a file to say which files we don't want to include in gits,

00:06:13.450 --> 00:06:15.785
followed by a babel config file,

00:06:15.785 --> 00:06:18.940
which we can use to add any custom babel settings.

00:06:18.940 --> 00:06:21.200
Babel is a tool used to transform

00:06:21.200 --> 00:06:26.270
any newer JavaScript code which writes into the older style syntax.

00:06:26.270 --> 00:06:28.960
If the browser does not yet support it,

00:06:28.960 --> 00:06:34.930
the package.json is a config file which we have in node based projects.

00:06:34.930 --> 00:06:39.350
It contains project information such as the name and also

00:06:39.350 --> 00:06:45.220
any scripts which we're going to use to start our project and also build for production.

00:06:45.220 --> 00:06:49.280
We've already used this serve script when we ran MPM run serve,

00:06:49.280 --> 00:06:51.560
startup our development server.

00:06:51.560 --> 00:06:54.965
Dependencies just below are the main packages

00:06:54.965 --> 00:06:59.270
our project needs and we can't add more at a later date too.

00:06:59.270 --> 00:07:04.750
We'll link it to Vue.js package rather than using a CDM link.

00:07:04.750 --> 00:07:09.680
Dev dependencies are packages which we only need during development,

00:07:09.680 --> 00:07:15.320
such as the development server to run the project and also things such as eslint,

00:07:15.320 --> 00:07:19.835
which will check our code quality inside the editor during development.

00:07:19.835 --> 00:07:22.550
These will not be included when we push our site to

00:07:22.550 --> 00:07:26.645
production and we'll have a lock file which we don't touch.

00:07:26.645 --> 00:07:28.130
Mine is a yarn version,

00:07:28.130 --> 00:07:31.510
but yours may not be if you were just using MPM.

00:07:31.510 --> 00:07:36.725
This is a auto-generated file which lists all of the packages which we use,

00:07:36.725 --> 00:07:41.785
along with all of the dependencies on the exact version numbers we have installed.

00:07:41.785 --> 00:07:43.880
Finally, one quick note too,

00:07:43.880 --> 00:07:49.295
we only have a small amount of dependencies and dev dependencies inside a here.

00:07:49.295 --> 00:07:52.960
However, this resulted in a lot more Node modules.

00:07:52.960 --> 00:07:57.940
This is because some of these packages also have sub dependencies too.

00:07:57.940 --> 00:08:01.940
So further packages are also pulled in with MPM.

00:08:01.940 --> 00:08:05.420
But now this is an overview of our course project and we'll get

00:08:05.420 --> 00:08:09.660
a lot more familiar as we create our next project.
