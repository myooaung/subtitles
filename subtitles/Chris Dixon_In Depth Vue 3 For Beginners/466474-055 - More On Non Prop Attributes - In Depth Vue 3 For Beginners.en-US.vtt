WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.199
We now know how to pass basic non-prop attributes,

00:00:04.199 --> 00:00:07.410
but there's also a few more things we can look at too.

00:00:07.410 --> 00:00:11.370
One of these things is to cancel the auto inheritance.

00:00:11.370 --> 00:00:13.080
We know from the last video that

00:00:13.080 --> 00:00:17.265
the child component inherits the attributes automatically.

00:00:17.265 --> 00:00:19.575
But if we don't want this to happen,

00:00:19.575 --> 00:00:22.140
we have full control over this.

00:00:22.140 --> 00:00:23.940
Inside of the child component,

00:00:23.940 --> 00:00:25.860
which is the Event.vue,

00:00:25.860 --> 00:00:31.270
we go down to our script section and we can add a new property, which is inheritAttrs.

00:00:31.930 --> 00:00:34.640
If we then set this to false,

00:00:34.640 --> 00:00:37.789
this will now mean our template will not automatically

00:00:37.789 --> 00:00:41.515
inherit all of the non-prop attributes which we pass down.

00:00:41.515 --> 00:00:44.355
We can prove this is working by toggling,

00:00:44.355 --> 00:00:48.575
let's put it just here, and our color scheme stays exactly the same.

00:00:48.575 --> 00:00:50.915
But why would we want to do this?

00:00:50.915 --> 00:00:52.700
Well, let's say, for example,

00:00:52.700 --> 00:00:57.395
we don't want all of these attributes to be inherited at this top level wrapper.

00:00:57.395 --> 00:01:01.055
Well, we're not restricted to just use this top level wrapper,

00:01:01.055 --> 00:01:05.030
Vue gives us access to these attributes anywhere inside of this template,

00:01:05.030 --> 00:01:07.555
and also in our script section.

00:01:07.555 --> 00:01:11.085
Let's do this by adding the mounted hook,

00:01:11.085 --> 00:01:14.660
and as soon as this component is mounted,

00:01:14.660 --> 00:01:16.240
once it logs to the console,

00:01:16.240 --> 00:01:19.880
the value of this.$attrs.

00:01:20.210 --> 00:01:24.620
So if we access in our attributes inside of our script section,

00:01:24.620 --> 00:01:26.360
we use the 'this' keyword.

00:01:26.360 --> 00:01:29.930
If we're directly accessing them in our template, remember,

00:01:29.930 --> 00:01:31.775
we don't need to use a 'this' keyword,

00:01:31.775 --> 00:01:35.940
and we can access it directly over to the console.

00:01:35.940 --> 00:01:43.725
Let's check this out. Refresh. We now have six different attributes.

00:01:43.725 --> 00:01:46.170
Because we have six different events,

00:01:46.170 --> 00:01:47.730
inside of here we,

00:01:47.730 --> 00:01:50.940
still have access to our style object and we can access

00:01:50.940 --> 00:01:56.050
any other non-prop attributes which are passed down to this event.

00:01:56.050 --> 00:02:01.015
This dollar symbol attribute is a built-in view property.

00:02:01.015 --> 00:02:03.890
We're now free to use this anywhere we want.

00:02:03.890 --> 00:02:07.220
For example, if we wanted to place this in a different div,

00:02:07.220 --> 00:02:09.680
we can do so by using v-bind.

00:02:09.680 --> 00:02:13.235
So remember, we are currently not automatically inheriting this,

00:02:13.235 --> 00:02:16.735
so this article doesn't have access automatically.

00:02:16.735 --> 00:02:21.579
Now, we can place this into any other section using v-bind,

00:02:21.579 --> 00:02:27.390
and then pass in our attributes into the console.

00:02:27.530 --> 00:02:31.905
At the top of our app is the options object with all three buttons.

00:02:31.905 --> 00:02:34.650
So blow this, open up the unordered list.

00:02:34.650 --> 00:02:36.845
For each event we have the list item,

00:02:36.845 --> 00:02:39.935
we have the article wrapper, and so our article.

00:02:39.935 --> 00:02:42.200
Then the div with the class of data,

00:02:42.200 --> 00:02:44.350
let's toggle this button.

00:02:44.350 --> 00:02:50.285
Then we see our style attribute is now been added to this section with this.

00:02:50.285 --> 00:02:52.880
This is just an example of how we can place

00:02:52.880 --> 00:02:56.275
these attributes into any section for our template.

00:02:56.275 --> 00:03:01.565
Something we also need to be aware of is if we have multiple root level elements.

00:03:01.565 --> 00:03:04.980
To see this, let remove our v-bind.

00:03:05.360 --> 00:03:10.605
If we also, comment out our inherited attributes.

00:03:10.605 --> 00:03:15.865
Now, if we go back up to our template and if we were to cut out this remove button,

00:03:15.865 --> 00:03:17.685
the full div section,

00:03:17.685 --> 00:03:20.845
and then places just above our article.

00:03:20.845 --> 00:03:25.280
Remember from before that this article was inheriting automatically.

00:03:25.280 --> 00:03:28.430
All of the non-prop attributes which are passed down,

00:03:28.430 --> 00:03:31.985
but now we have two elements alongside each other.

00:03:31.985 --> 00:03:35.509
Which one would automatically inherit these attributes?

00:03:35.509 --> 00:03:37.985
Well, let's take a look in the browser.

00:03:37.985 --> 00:03:43.530
Back into the developer tools, into the console.

00:03:43.530 --> 00:03:47.600
Refresh. We now also see some error messages in the console

00:03:47.600 --> 00:03:51.925
since the inheritance will only occur if there is one root element.

00:03:51.925 --> 00:03:54.500
So it does makes sense that this behavior does exist,

00:03:54.500 --> 00:03:58.280
because if we do have two elements alongside each other like this,

00:03:58.280 --> 00:04:01.135
Vue would have to guess which one to mount to.

00:04:01.135 --> 00:04:03.890
We will then resolve this by again using

00:04:03.890 --> 00:04:09.610
our v-bind syntax and then tell Vue.js which one of these elements we want to bind to,

00:04:09.610 --> 00:04:12.185
just like before we bind our attributes.

00:04:12.185 --> 00:04:15.035
Then if we go back over to the developer tools,

00:04:15.035 --> 00:04:18.820
into the console, we no longer see any errors.

00:04:18.820 --> 00:04:21.290
The final thing we're going to look at is also

00:04:21.290 --> 00:04:24.515
a passing event listeners as attributes too.

00:04:24.515 --> 00:04:27.320
So far, if we go to our App.vue,

00:04:27.320 --> 00:04:30.910
and then where we render out our events components.

00:04:30.910 --> 00:04:34.980
Up to now we've only looked at passing data such as styles,

00:04:34.980 --> 00:04:38.055
but passing an event listener works just the same.

00:04:38.055 --> 00:04:41.160
If we wanted to listen out for an event, such as a click,

00:04:41.160 --> 00:04:46.635
we can also pass this into our components at @click.

00:04:46.635 --> 00:04:49.010
Then just like with any other event,

00:04:49.010 --> 00:04:50.780
we can then trigger a method,

00:04:50.780 --> 00:04:52.970
or we can just do some simple JavaScript,

00:04:52.970 --> 00:04:58.255
such as setting a gray mode to be equal to true,

00:04:58.255 --> 00:05:01.095
save this over to our browser.

00:05:01.095 --> 00:05:02.690
Remember in the Event.vue,

00:05:02.690 --> 00:05:06.740
we are currently binding these attributes to this remove button.

00:05:06.740 --> 00:05:09.995
Now, if we click on this remove button section,

00:05:09.995 --> 00:05:12.845
we see the darker background color has appeared,

00:05:12.845 --> 00:05:15.625
is we are setting it gray mode to be true.

00:05:15.625 --> 00:05:19.025
We can also now see this if we go over to the developer tools,

00:05:19.025 --> 00:05:22.190
where we're still doing the console log for each one of our attributes.

00:05:22.190 --> 00:05:25.745
If we open this up, and then it's the target section,

00:05:25.745 --> 00:05:27.530
you see we have this style property,

00:05:27.530 --> 00:05:30.670
but also now an onClick event handler.

00:05:30.670 --> 00:05:33.080
Now, this is just a simple example of how

00:05:33.080 --> 00:05:36.245
a click listener works with non-proper attributes.

00:05:36.245 --> 00:05:39.745
So we're going to remove this as we don't need this in our project.

00:05:39.745 --> 00:05:42.105
Also, over in the event,

00:05:42.105 --> 00:05:45.575
if we toggle this, we're still passing the attributes to the button.

00:05:45.575 --> 00:05:49.370
We want these to actually apply to the article so we're going to remove

00:05:49.370 --> 00:05:54.060
all v-bind and then pass this over to our article.

00:05:54.440 --> 00:05:57.675
Let's test this out by clicking on our toggle,

00:05:57.675 --> 00:06:00.310
and everything is working once again.

00:06:00.310 --> 00:06:03.195
This is how non-prop attributes work.

00:06:03.195 --> 00:06:08.610
Next, we'll take a look at some other ways of passing around data using slots.
