WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.945
We can also work with objects in Vue.js too.

00:00:03.945 --> 00:00:07.755
We're going to do this to add some some posts to our example.

00:00:07.755 --> 00:00:10.980
For this, we can use the second Vue instance which we

00:00:10.980 --> 00:00:14.610
created for our blog section into this script.

00:00:14.610 --> 00:00:18.300
We can not setup the options object for the createApp

00:00:18.300 --> 00:00:22.455
which is mounted through our blog section as an object,

00:00:22.455 --> 00:00:25.800
and we're going to work with the data property once more.

00:00:25.800 --> 00:00:27.900
This is a function just like above,

00:00:27.900 --> 00:00:32.910
which is going to return all of the data which we can use in our blog section.

00:00:32.910 --> 00:00:38.840
Inside here we're going to access our posts which is going to be an array.

00:00:38.840 --> 00:00:41.375
Each one of these posts is going to be stored

00:00:41.375 --> 00:00:44.375
inside of an object which is going to have an ID,

00:00:44.375 --> 00:00:46.945
a title, and the body section.

00:00:46.945 --> 00:00:51.830
The first ID is going to be the value of one separated by a comma,

00:00:51.830 --> 00:00:54.020
the title for the blog post.

00:00:54.020 --> 00:00:58.990
This is just [inaudible] so you can add anything you want to this blog post.

00:00:58.990 --> 00:01:01.520
The third item is the body,

00:01:01.520 --> 00:01:04.535
which is the actual content of our blog post.

00:01:04.535 --> 00:01:08.975
I'm going to grab the content from our index page.

00:01:08.975 --> 00:01:12.785
As a string, we can paste this inside of the body section.

00:01:12.785 --> 00:01:15.770
If you do see any errors just like we see here,

00:01:15.770 --> 00:01:17.890
this would be because we are using multi-line text.

00:01:17.890 --> 00:01:20.510
We could go through each one of these lines

00:01:20.510 --> 00:01:24.335
individually and bring them to be all onto the same line.

00:01:24.335 --> 00:01:29.335
Just like this, but this is not an efficient way of doing things.

00:01:29.335 --> 00:01:32.515
Or another way to do this is to use the backticks.

00:01:32.515 --> 00:01:34.209
So rather than these quotations,

00:01:34.209 --> 00:01:37.280
we could replace these with the backtick icon.

00:01:37.280 --> 00:01:40.890
This will now allow us to use multi-line text.

00:01:40.890 --> 00:01:43.095
Just to give us some content to work with,

00:01:43.095 --> 00:01:45.060
I'm going to copy this object,

00:01:45.060 --> 00:01:48.580
and then I'll paste this in for a second blog post.

00:01:48.580 --> 00:01:53.310
The ID of two, change the title.

00:01:53.310 --> 00:01:56.185
This one is going to be using the Vue CDN.

00:01:56.185 --> 00:01:58.195
Then the third one,

00:01:58.195 --> 00:02:00.800
which has the ID of three.

00:02:01.100 --> 00:02:04.995
This one is going to be how I mastered Vue,

00:02:04.995 --> 00:02:08.280
which you can write when you finish this course.

00:02:08.280 --> 00:02:11.569
Even though these posts are objects,

00:02:11.569 --> 00:02:14.120
it's still an array of objects.

00:02:14.120 --> 00:02:18.735
Meaning we can again use the V-for directive in our HTML.

00:02:18.735 --> 00:02:23.720
Down to the blog section which we are controlling with this Vue instance.

00:02:23.720 --> 00:02:26.875
We have two hard coded articles.

00:02:26.875 --> 00:02:30.380
For simplicity, let's remove the second one.

00:02:30.380 --> 00:02:35.410
We can now use a V-for loop to repeat this as many times as needed.

00:02:35.410 --> 00:02:37.465
We want to repeat the article.

00:02:37.465 --> 00:02:40.560
So we can add the V-for directive.

00:02:40.560 --> 00:02:44.220
This time, this will be post in posts.

00:02:44.220 --> 00:02:48.170
Remember that post is the name of our array and

00:02:48.170 --> 00:02:52.160
the post variable is the name for each array item.

00:02:52.160 --> 00:02:56.335
We can now access this inside of our article.

00:02:56.335 --> 00:02:58.310
Inside the double curly braces,

00:02:58.310 --> 00:03:00.290
we can output our post.

00:03:00.290 --> 00:03:02.920
Let's see how this looks in the browser.

00:03:02.920 --> 00:03:04.550
If we output the post,

00:03:04.550 --> 00:03:07.685
this is the value of our full post object.

00:03:07.685 --> 00:03:10.025
This will be repeated three times.

00:03:10.025 --> 00:03:14.430
Since we have three separate blog posts, is also unique.

00:03:14.430 --> 00:03:15.580
We have the ID of one,

00:03:15.580 --> 00:03:18.965
the ID of two and the ID of three at the bottom.

00:03:18.965 --> 00:03:22.100
Rather than accessing this full blog post,

00:03:22.100 --> 00:03:26.155
we can scripture this by accessing any of these properties.

00:03:26.155 --> 00:03:28.215
This was the post title.

00:03:28.215 --> 00:03:31.750
We can access this with post.title.

00:03:34.010 --> 00:03:37.460
Then, instead of this text inside of the p elements,

00:03:37.460 --> 00:03:40.500
we can access the post.body.

00:03:41.930 --> 00:03:45.330
This all works now perfectly fine.

00:03:45.330 --> 00:03:47.335
Back over to our script,

00:03:47.335 --> 00:03:50.935
if you were to add a lot more data properties just like this.

00:03:50.935 --> 00:03:54.755
Our Vue instance can quickly become really crowded.

00:03:54.755 --> 00:03:56.990
To help with this, we can also take our array of

00:03:56.990 --> 00:04:00.850
objects and place this outside of the Vue instance.

00:04:00.850 --> 00:04:03.845
Let's grab all of the contents of the array,

00:04:03.845 --> 00:04:06.505
including the square brackets.

00:04:06.505 --> 00:04:10.635
Grab all of this, leaving just the post variable.

00:04:10.635 --> 00:04:12.530
Outside of the Vue instance,

00:04:12.530 --> 00:04:16.250
we can create a regular JavaScript variable.

00:04:16.250 --> 00:04:21.185
This is called posts. Then, we can set this equal to our array.

00:04:21.185 --> 00:04:26.905
This post array can now be referenced down inside of our Vue instance.

00:04:26.905 --> 00:04:31.595
So the post date property can be equal to our posts array.

00:04:31.595 --> 00:04:33.455
Let's check this is working.

00:04:33.455 --> 00:04:34.955
Over to the browser.

00:04:34.955 --> 00:04:37.615
The free blog post is still in place.

00:04:37.615 --> 00:04:41.615
I'm also, using the ES6 shorthand property syntax,

00:04:41.615 --> 00:04:44.345
since the name and the value are both the same,

00:04:44.345 --> 00:04:47.485
we can shorten it to just the single value,

00:04:47.485 --> 00:04:50.940
which also works completely fine too.
