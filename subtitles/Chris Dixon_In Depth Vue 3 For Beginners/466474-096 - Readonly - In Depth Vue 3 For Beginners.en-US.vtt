WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.150
Sometimes we may need to wait to control exactly what components can update our data.

00:00:06.150 --> 00:00:11.055
If we have a reactive object which was shared across multiple components,

00:00:11.055 --> 00:00:17.170
we may want them to all read the data or only allow some of them to update it.

00:00:17.170 --> 00:00:19.985
For this, we have available readonly,

00:00:19.985 --> 00:00:21.485
which takes an object.

00:00:21.485 --> 00:00:25.380
This can be a regular JavaScript object or a reactive one,

00:00:25.380 --> 00:00:27.765
which uses either ref or reactive,

00:00:27.765 --> 00:00:31.200
and then returns a readonly proxy to the original.

00:00:31.200 --> 00:00:34.980
Again, we need to import this from the vue library.

00:00:34.980 --> 00:00:42.945
In the AppHome, in our import statement, pass in readonly.

00:00:42.945 --> 00:00:48.365
Then what we're going to do is to take a readonly copy of our data,

00:00:48.365 --> 00:00:52.365
store this in a constant called readOnlyData.

00:00:52.365 --> 00:00:57.105
Then just like we've done with reactive and with isReactive,

00:00:57.105 --> 00:01:00.135
we then use this as a wrapper,

00:01:00.135 --> 00:01:05.125
passing readonly, and then we want to wrap our data from above.

00:01:05.125 --> 00:01:07.255
We now have this new data,

00:01:07.255 --> 00:01:14.310
which we can return from our setup and then we can output this loop at the very top.

00:01:14.310 --> 00:01:17.715
Let's clean this up. First of all,

00:01:17.715 --> 00:01:19.725
we'll type in readonly,

00:01:19.725 --> 00:01:25.335
and then we'll output our readonly object on the e-mail property.

00:01:25.335 --> 00:01:30.780
Also the user, so we can test the original object, is still working.

00:01:30.780 --> 00:01:34.785
We can output the data.email.

00:01:34.785 --> 00:01:38.560
Down to our setTimeout where we simulate an update.

00:01:38.560 --> 00:01:40.555
Inside of here we're still updating

00:01:40.555 --> 00:01:44.710
the original reactive object and certainly new e-mail address.

00:01:44.710 --> 00:01:48.950
So let's go to the browser and refresh and see what happens.

00:01:50.750 --> 00:01:56.620
After three seconds, both the readonly version and the original has been updated.

00:01:56.620 --> 00:02:00.295
So this means that the copy is still reactive.

00:02:00.295 --> 00:02:05.790
Let's see what happens if we try to update the copy in the Timeout rather than the data.

00:02:05.790 --> 00:02:08.670
We'll change this to be readOnlyData.

00:02:08.670 --> 00:02:12.070
Save this and refresh.

00:02:13.850 --> 00:02:17.185
Three seconds later, nothing happens.

00:02:17.185 --> 00:02:21.169
This update will now fail because the copy is readonly,

00:02:21.169 --> 00:02:25.970
and this allows us to protect any data which we don't want to change in our components,

00:02:25.970 --> 00:02:30.000
or data which you may want to control more closely.
