WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.860 --> 00:00:05.790
We discovered in the last video that when we click on any of these category links,

00:00:05.790 --> 00:00:10.965
this all works fine and filters down our cards by the selected category.

00:00:10.965 --> 00:00:14.670
However though, if we click on any of these navigation links,

00:00:14.670 --> 00:00:17.850
the first one will initially load correctly from the homepage,

00:00:17.850 --> 00:00:20.985
but if we try to switch between these category links,

00:00:20.985 --> 00:00:23.790
we don't see any further updates.

00:00:23.790 --> 00:00:26.715
This happens because of the view router,

00:00:26.715 --> 00:00:30.195
and the reason is because when we are on the homepage, just like this,

00:00:30.195 --> 00:00:32.520
and we click through any of these categories,

00:00:32.520 --> 00:00:36.720
we're switching from the home component to the category component.

00:00:36.720 --> 00:00:42.074
This change of route or change of component causes our component to re-render,

00:00:42.074 --> 00:00:46.035
therefore, once again, calling our category function.

00:00:46.035 --> 00:00:49.610
But when we are already on the category component just like

00:00:49.610 --> 00:00:52.685
this and we switch between these free nav links,

00:00:52.685 --> 00:00:55.039
we're staying on this category component,

00:00:55.039 --> 00:00:57.530
but just switch now the params.

00:00:57.530 --> 00:00:59.150
When we do something like this,

00:00:59.150 --> 00:01:00.950
the view routes will not re-render

00:01:00.950 --> 00:01:04.820
the components because we are still on this category component,

00:01:04.820 --> 00:01:06.470
and for performance reasons,

00:01:06.470 --> 00:01:11.305
it won't re-render this components just for a change of parameters.

00:01:11.305 --> 00:01:16.285
Since the view router will not re-render this components for a change of parameters,

00:01:16.285 --> 00:01:18.625
we need to now watch out for this manually.

00:01:18.625 --> 00:01:21.520
We've already looked at a watcher during this course,

00:01:21.520 --> 00:01:25.650
and they can be used with composition too alongside a new version

00:01:25.650 --> 00:01:30.620
called watchEffect of in the use category composable.

00:01:30.620 --> 00:01:35.695
Inside of this function we'll receive new category name from the router parameters,

00:01:35.695 --> 00:01:38.600
and then inside of our computed section,

00:01:38.600 --> 00:01:41.795
we send back the cards based on this category,

00:01:41.795 --> 00:01:45.505
and we pass this category to our file just here.

00:01:45.505 --> 00:01:48.465
Since this category.vue component is not

00:01:48.465 --> 00:01:51.290
being re-rendered when we click on these navigation links,

00:01:51.290 --> 00:01:54.110
what we're going to do is to remove this section just

00:01:54.110 --> 00:01:58.315
here and use a router directly inside of our composable,

00:01:58.315 --> 00:02:03.440
this will allow us to then place a watcher on this router or more specifically,

00:02:03.440 --> 00:02:06.110
onto the parameters which we need and

00:02:06.110 --> 00:02:09.595
then trigger the updates once there is a change in these parameters.

00:02:09.595 --> 00:02:13.000
To do this, it works just like we looked at the inside of the components,

00:02:13.000 --> 00:02:20.795
we first need to import useRoute from the vue.router,

00:02:20.795 --> 00:02:26.000
and then inside the function we'll save this inside of a constant called route.

00:02:28.310 --> 00:02:31.520
Since we now accessing this router directly,

00:02:31.520 --> 00:02:34.395
we can also remove this from our category.vue.

00:02:34.395 --> 00:02:36.830
I'll remove this, we'll pass it to our function,

00:02:36.830 --> 00:02:41.255
we can also remove the router import and also the constant too.

00:02:41.255 --> 00:02:42.890
Since we no longer post on this,

00:02:42.890 --> 00:02:46.145
we can also remove this from inside of here.

00:02:46.145 --> 00:02:50.045
But remember this computed section is still expecting a category,

00:02:50.045 --> 00:02:53.030
so we can now create one locally to replace the one which we have just

00:02:53.030 --> 00:02:57.240
removed, so const category.

00:02:57.240 --> 00:03:01.365
This will also be equal to route.parameter.category,

00:03:01.365 --> 00:03:04.910
but this time we're going to make this reactive by passing this inside of

00:03:04.910 --> 00:03:12.310
ref, and pull this just above.

00:03:12.440 --> 00:03:15.110
Since this category is now a ref,

00:03:15.110 --> 00:03:21.240
we also need to access the dot value and also in the includes section too.

00:03:22.610 --> 00:03:26.555
Something which we need to note here is this category,

00:03:26.555 --> 00:03:30.395
it's just going to be signed with the initial value when this loads.

00:03:30.395 --> 00:03:33.110
We then need to manually watch for any changes to

00:03:33.110 --> 00:03:36.445
these parameters and then update this value.

00:03:36.445 --> 00:03:39.950
To prove this, we can now log this to the console just below,

00:03:39.950 --> 00:03:42.600
so log the category.value,

00:03:44.450 --> 00:03:47.150
open up the developer tools,

00:03:47.150 --> 00:03:50.980
refresh the page, so we see the anniversary.

00:03:50.980 --> 00:03:55.040
As mentioned earlier, if we go to the home page and then click on a category,

00:03:55.040 --> 00:03:57.095
we see the correct one just in here.

00:03:57.095 --> 00:03:59.960
What if we switch between these three links at the top,

00:03:59.960 --> 00:04:03.660
we see the category is not updated.

00:04:04.190 --> 00:04:07.400
What we now need to do is to watch out for the change

00:04:07.400 --> 00:04:09.815
to these parameters, obtain the category,

00:04:09.815 --> 00:04:12.710
and since this is reactive this will then re-run

00:04:12.710 --> 00:04:16.719
our computed section and then update our components.

00:04:16.719 --> 00:04:19.650
For this we're going to import watch from

00:04:19.650 --> 00:04:24.970
the vue-library and then pass this inside of here.

00:04:25.340 --> 00:04:29.570
When we use the watcher, we're composing in any data which we want to watch,

00:04:29.570 --> 00:04:32.620
such as a ref or a reactive property.

00:04:32.620 --> 00:04:35.055
Here if we pass in the category,

00:04:35.055 --> 00:04:37.770
on this occasion this would be of no use,

00:04:37.770 --> 00:04:41.535
we know this isn't going to work because as we just checked in the console,

00:04:41.535 --> 00:04:46.650
this category is not going to be updated when there is a change of parameters.

00:04:46.650 --> 00:04:51.420
Instead we can replace this with a getter function,

00:04:52.500 --> 00:04:57.025
which is going to return the value of our router directly,

00:04:57.025 --> 00:05:04.440
access the route.params.category and then separate it by a comma,

00:05:04.440 --> 00:05:06.040
we attend a call back function,

00:05:06.040 --> 00:05:09.350
which is going to run when there is a change.

00:05:10.000 --> 00:05:13.450
It's inside of this call back function where we want to update

00:05:13.450 --> 00:05:17.449
the category value with the new router parameters,

00:05:17.449 --> 00:05:25.455
so category.value is going to be equal to route.params.category.

00:05:25.455 --> 00:05:29.440
Let's try this out over to the browser,

00:05:29.450 --> 00:05:31.510
and thanks to our watcher,

00:05:31.510 --> 00:05:34.160
these navigation links will all now work.

00:05:34.160 --> 00:05:36.680
This watcher which we have just used is the

00:05:36.680 --> 00:05:39.635
same as when we looked at earlier with the options API,

00:05:39.635 --> 00:05:42.170
but there is also another type too,

00:05:42.170 --> 00:05:44.315
which is called watchEffect.

00:05:44.315 --> 00:05:47.520
With this we also need to import this.

00:05:48.500 --> 00:05:54.460
WatchEffect is a little simpler than watch, and it looks like this.

00:05:55.280 --> 00:06:00.650
Inside of the brackets, we can then pass in any function which we want to run,

00:06:00.650 --> 00:06:02.270
so just as a demonstration,

00:06:02.270 --> 00:06:04.610
we could do a console log,

00:06:04.610 --> 00:06:08.040
look the value of our category.

00:06:09.080 --> 00:06:14.465
This function inside of here will be run each time the data inside changes.

00:06:14.465 --> 00:06:17.540
In our case, every time the category's value changes,

00:06:17.540 --> 00:06:20.015
we should see a new console log,

00:06:20.015 --> 00:06:23.460
onto the console, right-click and inspect,

00:06:23.840 --> 00:06:26.880
refresh the page, and now we only birthday route,

00:06:26.880 --> 00:06:29.705
so we see this run by anniversary,

00:06:29.705 --> 00:06:35.680
Christmas, and this watchEffect is now re-run for each parameter change.

00:06:35.680 --> 00:06:40.280
WatchEffect is a little bit like a computed property,

00:06:40.280 --> 00:06:45.880
we pass in a function which is called once any reactive property inside changes,

00:06:45.880 --> 00:06:50.120
but the difference is that it can also perform side effects too.

00:06:50.120 --> 00:06:54.340
So rather than we computed which can only return a value,

00:06:54.340 --> 00:06:58.800
watchEffect on the other hand can directly update our data or state.

00:06:58.800 --> 00:07:02.900
There is also some differences between watch and watchEffect too.

00:07:02.900 --> 00:07:04.820
Notice how when we reload the browser,

00:07:04.820 --> 00:07:06.955
we see the category immediately.

00:07:06.955 --> 00:07:10.095
If we go back into the console and refresh,

00:07:10.095 --> 00:07:12.230
we see a console log has been run

00:07:12.230 --> 00:07:15.950
immediately even though we haven't clicked on any of these links.

00:07:15.950 --> 00:07:18.200
This is because watchEffect will both run

00:07:18.200 --> 00:07:22.165
immediately and also when the data inside changes.

00:07:22.165 --> 00:07:27.890
However, watch is considered lazy and will only run upon a data change.

00:07:27.890 --> 00:07:30.380
Another difference is watch will also allow us to

00:07:30.380 --> 00:07:33.950
access the previous and the next values too,

00:07:33.950 --> 00:07:37.210
and we pass these into this callback function.

00:07:37.210 --> 00:07:40.700
If we wanted access them, we could pass them in with

00:07:40.700 --> 00:07:45.250
variable names then we have access to these inside of our function.

00:07:45.250 --> 00:07:49.140
We currently don't need access to watchEffect for our projects,

00:07:49.140 --> 00:07:50.595
so I'm going to remove this,

00:07:50.595 --> 00:07:52.740
and we'll also need to remove the import

00:07:52.740 --> 00:07:57.080
too just to recap both the watch and also the watchEffect,

00:07:57.080 --> 00:08:00.370
we'll re-run when the observed data changes.

00:08:00.370 --> 00:08:03.140
As we've just seen, watchEffect will also run

00:08:03.140 --> 00:08:06.725
immediately too even if there is no data change,

00:08:06.725 --> 00:08:09.385
and we've seen this before with the console log.

00:08:09.385 --> 00:08:12.575
If we need to access the previous and next values,

00:08:12.575 --> 00:08:15.260
we can do this by passing them to the watchers callback

00:08:15.260 --> 00:08:19.950
function and use them just like we did with the options API.
