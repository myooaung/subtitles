WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.260 --> 00:00:04.080
As part of the view router package we've installed,

00:00:04.080 --> 00:00:08.820
we can make use of navigation guards when changing between our route.

00:00:08.820 --> 00:00:12.765
You can think of a nav guard as somebody standing on the door of a club,

00:00:12.765 --> 00:00:16.890
asking to see some identification before you can get in.

00:00:16.890 --> 00:00:19.770
In terms of code, this identification,

00:00:19.770 --> 00:00:23.265
it can be anything such as if the user is logged in,

00:00:23.265 --> 00:00:27.480
if they have the correct permissions or even things like only allowing

00:00:27.480 --> 00:00:32.705
a user to access a download area if they have purchased that particular item.

00:00:32.705 --> 00:00:38.575
We can basically run any code which we like either before or after a change of route.

00:00:38.575 --> 00:00:40.440
There is different guards available,

00:00:40.440 --> 00:00:42.560
but let's take a look at some of the common ones,

00:00:42.560 --> 00:00:46.640
starting with if we want to apply a guard against all of our route,

00:00:46.640 --> 00:00:49.880
with this we can use a global guard which is called beforeEach.

00:00:49.880 --> 00:00:52.225
We do this over to our route file,

00:00:52.225 --> 00:00:58.040
and this is inside of the router and then the index.js.

00:00:58.040 --> 00:01:03.100
Below our route's array, we can access our router with this router constants.

00:01:03.100 --> 00:01:05.595
We need to go just below this,

00:01:05.595 --> 00:01:10.270
we can then access this router and then call the guard, which is beforeEach.

00:01:10.270 --> 00:01:16.160
BeforeEach is a global navigation guard so it will apply to all routes in our project.

00:01:16.160 --> 00:01:19.670
When is a change, we're going to provide a callback function,

00:01:19.670 --> 00:01:22.445
and it's inside this function where we can intercept

00:01:22.445 --> 00:01:25.355
this route change and then it runs some code.

00:01:25.355 --> 00:01:27.230
As a very basic example,

00:01:27.230 --> 00:01:29.180
we can return false inside

00:01:29.180 --> 00:01:33.235
this function and this will stop any change of route occurring.

00:01:33.235 --> 00:01:34.980
We can't even load our app.

00:01:34.980 --> 00:01:39.820
We can't click on the Home button and also these category links don't work either.

00:01:39.820 --> 00:01:41.460
But it's at its most basic.

00:01:41.460 --> 00:01:44.910
This is how we block a change of route and since

00:01:44.910 --> 00:01:48.900
this is not very specific it will apply to all route changes.

00:01:48.900 --> 00:01:52.745
BeforeEach also gives us access to the route details,

00:01:52.745 --> 00:01:56.260
where you're going from and also the route we are leaving to.

00:01:56.260 --> 00:02:00.540
We're going to pass these into our functions with to and from.

00:02:00.540 --> 00:02:04.730
As it sounds, the to value is route where you're going to and

00:02:04.730 --> 00:02:09.405
the from is the one which we are leaving. Let's see how these look.

00:02:09.405 --> 00:02:16.960
Passing the to, and then also the from variables. Over to the console.

00:02:18.920 --> 00:02:21.035
Those are our two objects.

00:02:21.035 --> 00:02:23.380
The first one is the route where you're going to

00:02:23.380 --> 00:02:26.195
and this is just the home route. This makes sense.

00:02:26.195 --> 00:02:28.655
The second one is the from objects,

00:02:28.655 --> 00:02:30.440
and since we are not changing routes,

00:02:30.440 --> 00:02:33.260
this is still default slash versus if we remove

00:02:33.260 --> 00:02:37.220
the return statement and to switch between its about routes.

00:02:37.220 --> 00:02:41.190
We go from the homepage to our category,

00:02:41.190 --> 00:02:44.555
and we can see this category if we click on to section,

00:02:44.555 --> 00:02:47.035
and we covenant from the home route.

00:02:47.035 --> 00:02:51.815
These objects give us access to things such as the full path of the route,

00:02:51.815 --> 00:02:54.605
the queries, the name of our routes,

00:02:54.605 --> 00:02:58.705
the params, and these are all fully accessible from our function,

00:02:58.705 --> 00:03:03.500
and this information means we can be more specific with which routes we wants to guard.

00:03:03.500 --> 00:03:07.430
For example, instead of watching all of our routes inside of here,

00:03:07.430 --> 00:03:10.855
we could watch for a user entering a admin route.

00:03:10.855 --> 00:03:14.015
We can add an if statement inside of here and we can access

00:03:14.015 --> 00:03:17.135
our to value and then select our name.

00:03:17.135 --> 00:03:20.030
This name, such as the category just here,

00:03:20.030 --> 00:03:24.215
is a name which we give to the route inside of our array just above.

00:03:24.215 --> 00:03:26.325
We can access the admin.

00:03:26.325 --> 00:03:30.280
If to.name is equal to admin,

00:03:30.280 --> 00:03:33.410
and make sure this much is the name from above.

00:03:33.410 --> 00:03:38.300
If this is true, we're going to return an alert to

00:03:38.300 --> 00:03:44.490
the user with the text of "This area is for logged in users only."

00:03:47.150 --> 00:03:50.560
Let's check this out in the browser.

00:03:50.560 --> 00:03:52.940
We don't use any from variables,

00:03:52.940 --> 00:03:55.200
so we can also remove this.

00:03:56.540 --> 00:03:59.930
All of the route seemed to work completely fine,

00:03:59.930 --> 00:04:04.930
and let's go to /Admin, and there's our alert.

00:04:04.930 --> 00:04:08.640
Once we click on "Okay", we are still taken to this admin route.

00:04:08.640 --> 00:04:10.970
Currently we're not actually block in the user,

00:04:10.970 --> 00:04:13.915
we're just simply displaying an alert.

00:04:13.915 --> 00:04:16.790
In reality though we maybe would want to check if the user is

00:04:16.790 --> 00:04:19.550
logged in or has admin privileges,

00:04:19.550 --> 00:04:21.290
rather than it just an alert.

00:04:21.290 --> 00:04:22.880
If there were not allowed access,

00:04:22.880 --> 00:04:27.470
we could either return false or even return a router redirect method,

00:04:27.470 --> 00:04:29.615
such as the push method,

00:04:29.615 --> 00:04:33.725
and the way to do this is to also access the relative variable,

00:04:33.725 --> 00:04:35.960
and then we still have access to do things such as

00:04:35.960 --> 00:04:38.800
the push method which we looked at earlier.

00:04:38.800 --> 00:04:42.080
This means if the user is trying to access this admin route,

00:04:42.080 --> 00:04:45.305
we could then redirect them to the homepage.

00:04:45.305 --> 00:04:48.125
We're on the homepage at the moment.

00:04:48.125 --> 00:04:50.555
But if we go to the admin,

00:04:50.555 --> 00:04:53.950
This will then push us back to the homepage.

00:04:53.950 --> 00:04:58.010
Along with this before each guard which is run before the route change.

00:04:58.010 --> 00:05:00.485
We also have afterEach to,

00:05:00.485 --> 00:05:04.225
and this is a hook which runs once the navigation has finished.

00:05:04.225 --> 00:05:06.605
Since the navigation has already happened,

00:05:06.605 --> 00:05:11.885
it cannot make any changes such as redirecting or blocking the route either.

00:05:11.885 --> 00:05:16.385
Or instead, we can maybe use it for things such as tracking a user's visits

00:05:16.385 --> 00:05:21.185
to a particular page or even changing some page details after it loads.

00:05:21.185 --> 00:05:25.700
It can also take in at the to and from data if needed too and both of

00:05:25.700 --> 00:05:30.230
these guards are considered global since it will run for each navigation change.

00:05:30.230 --> 00:05:31.580
If we didn't want them to be global,

00:05:31.580 --> 00:05:35.635
we can also place them directly into a single route too.

00:05:35.635 --> 00:05:40.565
I'm just going to comment this out and leave this in for a reference.

00:05:40.565 --> 00:05:44.675
But we can also place this into any one of our component routes too.

00:05:44.675 --> 00:05:48.500
Meaning if we only wanted to protect this admin route for example,

00:05:48.500 --> 00:05:52.070
we could instead directly place a guard on this object.

00:05:52.070 --> 00:05:56.010
The guard for this is called before enter

00:05:56.270 --> 00:05:59.435
and then we setup a method which is going to run

00:05:59.435 --> 00:06:02.585
each time we try to enter this admin route.

00:06:02.585 --> 00:06:05.210
Just like before we can do things such as return a

00:06:05.210 --> 00:06:09.175
false to block any access to this route.

00:06:09.175 --> 00:06:14.320
The homepage works, the category works, the crate works.

00:06:14.320 --> 00:06:16.580
But if we're trying to go into the admin,

00:06:16.580 --> 00:06:21.305
we can see the component is not loaded since we don't have the admin title.

00:06:21.305 --> 00:06:24.395
This could also take in the to and also the from

00:06:24.395 --> 00:06:28.175
variables too if we needed access to this information.

00:06:28.175 --> 00:06:31.220
But realistically, we would again do something like checking if

00:06:31.220 --> 00:06:34.685
the user is logged in before we actually load this route.

00:06:34.685 --> 00:06:37.805
We don't currently have access to a user for this project,

00:06:37.805 --> 00:06:40.445
but we can simulate one for this example.

00:06:40.445 --> 00:06:45.450
Just above the routes that would be constants called logged in,

00:06:45.450 --> 00:06:47.940
which will be initially false.

00:06:47.940 --> 00:06:50.790
We can then use this down inside of our guard.

00:06:50.790 --> 00:06:52.745
Instead of returning false directly,

00:06:52.745 --> 00:06:57.905
we're going to first check if the user is not logged in before blocking this route.

00:06:57.905 --> 00:07:00.680
Remember this is currently false.

00:07:00.680 --> 00:07:02.240
So if we try to refresh,

00:07:02.240 --> 00:07:05.000
we don't see any access to this components.

00:07:05.000 --> 00:07:07.590
If we change this to true,

00:07:08.950 --> 00:07:12.485
we now have access to our admin.

00:07:12.485 --> 00:07:16.995
This type of guard will also only trigger on a full route change.

00:07:16.995 --> 00:07:20.500
Meaning, the change of route must trigger a new components.

00:07:20.500 --> 00:07:25.930
It won't run if we just have a change of the query or the change of params in the URL.

00:07:25.930 --> 00:07:28.675
Just like earlier when we had to alter these manually,

00:07:28.675 --> 00:07:31.364
almost switching between these categories.

00:07:31.364 --> 00:07:35.255
Well, for this example, we still staying on the category components,

00:07:35.255 --> 00:07:37.970
but we are just changing the params.

00:07:37.970 --> 00:07:39.680
For this particular case,

00:07:39.680 --> 00:07:43.459
the guard will not run since we're on the same components.

00:07:43.459 --> 00:07:46.040
Another useful thing we can do with these guards is to

00:07:46.040 --> 00:07:49.070
move the code into stand alone functions,

00:07:49.070 --> 00:07:53.645
so if I had a function which checks if the user is logged in.

00:07:53.645 --> 00:07:56.915
We could then extract our code from our guard.

00:07:56.915 --> 00:07:59.645
It will put out the if-statements,

00:07:59.645 --> 00:08:02.225
place this into our function,

00:08:02.225 --> 00:08:06.515
and it's function name can be now fast forward guard as an array.

00:08:06.515 --> 00:08:09.665
So for this, we don't want to run this method,

00:08:09.665 --> 00:08:13.355
instead pass in an array an old function name.

00:08:13.355 --> 00:08:16.715
Save this and our routes will work.

00:08:16.715 --> 00:08:19.475
Let's try to visit the admin.

00:08:19.475 --> 00:08:23.600
We can access this since our use is true,

00:08:23.600 --> 00:08:28.550
changes to the false, and this time it blocks our access.

00:08:28.550 --> 00:08:32.855
If needed, these functions can also take in these two and this from data,

00:08:32.855 --> 00:08:35.525
if we need to access the route information.

00:08:35.525 --> 00:08:38.090
A really good use case for these functions is if

00:08:38.090 --> 00:08:40.640
we have multiple guards on different routes,

00:08:40.640 --> 00:08:43.625
and we'll want to check if the user is logged in on more than one.

00:08:43.625 --> 00:08:46.190
This means rather than it duplicates this code

00:08:46.190 --> 00:08:48.695
inside the function for each one of these routes,

00:08:48.695 --> 00:08:52.805
we could instead reuse these function as many times as we need to.

00:08:52.805 --> 00:08:57.020
The last type of guard I want to show you is in component guards.

00:08:57.020 --> 00:09:01.055
Just as they sound, they go into the individual component files,

00:09:01.055 --> 00:09:03.260
such as our admin component.

00:09:03.260 --> 00:09:06.740
So before we do this, let's comment this out,

00:09:06.740 --> 00:09:09.735
also all guard from these component,

00:09:09.735 --> 00:09:13.370
and then also our logged in variable.

00:09:13.470 --> 00:09:18.115
For these in component guards we'll also stick with the admin component.

00:09:18.115 --> 00:09:22.045
So head over to this page inside the views.

00:09:22.045 --> 00:09:24.980
Write our script section.

00:09:25.540 --> 00:09:30.660
The first guard we're going to look at is called beforeRouteLeave.

00:09:32.440 --> 00:09:35.075
As it sounds this is going to run

00:09:35.075 --> 00:09:38.570
this function before we tried to leave a particular route.

00:09:38.570 --> 00:09:41.300
This may be useful for prompting the user to

00:09:41.300 --> 00:09:44.495
log out before they leave this particular page.

00:09:44.495 --> 00:09:48.530
Also, make sure they have saved any changes before they are lost.

00:09:48.530 --> 00:09:52.175
At the prompt, the user we're going to access the window,

00:09:52.175 --> 00:09:57.785
they confirm, and this will setup a confirm message to the user.

00:09:57.785 --> 00:10:00.770
This message will be a string and I'm going to say,

00:10:00.770 --> 00:10:02.735
"Do you really want to leave?"

00:10:02.735 --> 00:10:06.150
You have unsaved changes.

00:10:06.790 --> 00:10:09.710
It just needs to be a lowercase w,

00:10:09.710 --> 00:10:14.280
and then will store this inside of a constant called confirm.

00:10:14.920 --> 00:10:18.350
This confirm box is going to give the user the option

00:10:18.350 --> 00:10:21.140
to either click on okay or to cancel,

00:10:21.140 --> 00:10:24.110
which will leave this constant either true or false.

00:10:24.110 --> 00:10:30.680
If this is false, we are going to cancel the navigation by returning false.

00:10:30.680 --> 00:10:32.900
That seems to be working,

00:10:32.900 --> 00:10:34.820
refresh the admin page.

00:10:34.820 --> 00:10:38.750
Now if we try to click on a different route, we see the confirm.

00:10:38.750 --> 00:10:41.630
Click on "Cancel" and this will be set to be false,

00:10:41.630 --> 00:10:43.385
so we'll return false,

00:10:43.385 --> 00:10:46.775
and this results in staying on this admin page.

00:10:46.775 --> 00:10:50.015
However, if we try to make a change and click on "Okay",

00:10:50.015 --> 00:10:53.360
we then confirm this is okay to do,

00:10:53.360 --> 00:10:55.970
and then we'll go ahead with our change of route.

00:10:55.970 --> 00:11:01.625
This also has access to to and from if we need to access the route's information.

00:11:01.625 --> 00:11:05.195
We also have access to two more guards which we can use;

00:11:05.195 --> 00:11:07.295
one which is for entering the route,

00:11:07.295 --> 00:11:09.605
and one went for updating it.

00:11:09.605 --> 00:11:13.080
The first one is beforeRouteEnter,

00:11:14.500 --> 00:11:17.825
and see this we'll place in a console log.

00:11:17.825 --> 00:11:20.810
This one is enter and a comma.

00:11:20.810 --> 00:11:24.360
The second one is beforeRouterUpdate,

00:11:24.580 --> 00:11:27.290
placed in a console log of updates.

00:11:27.290 --> 00:11:30.440
We can now see when each one of these routes are run.

00:11:30.440 --> 00:11:36.360
Save this and open up the developer tools. Over to our admin.

00:11:37.330 --> 00:11:39.875
We only see this enter message,

00:11:39.875 --> 00:11:41.810
and even if you keep on refreshing,

00:11:41.810 --> 00:11:44.730
we don't see the update message is run.

00:11:44.730 --> 00:11:48.730
So what exactly is going to trigger this update message?

00:11:48.730 --> 00:11:54.264
Well, this one runs when the route updates but the same component is reused.

00:11:54.264 --> 00:11:55.750
So as an example,

00:11:55.750 --> 00:11:58.275
if we click on any of these links over the top,

00:11:58.275 --> 00:12:00.200
it will confirm this.

00:12:00.200 --> 00:12:02.870
When we switch in between all three of these links,

00:12:02.870 --> 00:12:05.660
we're staying on this same category components,

00:12:05.660 --> 00:12:08.015
but just updating the query.

00:12:08.015 --> 00:12:11.990
For this use case, this beforeRouteUpdate will run.

00:12:11.990 --> 00:12:14.990
Confirm this from [inaudible] both of these knob guards,

00:12:14.990 --> 00:12:17.555
and then go over to our category page.

00:12:17.555 --> 00:12:23.340
This is inside the views and paste this into our export.

00:12:23.520 --> 00:12:25.660
Refresh. We see enters,

00:12:25.660 --> 00:12:28.849
since we've entered the catalytic component.

00:12:29.020 --> 00:12:31.730
Switch between these three pages,

00:12:31.730 --> 00:12:34.580
and you see the update is now being called.

00:12:34.580 --> 00:12:37.250
Component guards can also be run inside of

00:12:37.250 --> 00:12:41.255
the setup function too but with a small adjustment.

00:12:41.255 --> 00:12:43.145
First, inside the category,

00:12:43.145 --> 00:12:45.245
remove these two guards,

00:12:45.245 --> 00:12:48.425
and then go back to our admin components.

00:12:48.425 --> 00:12:54.335
By using composition, we first need to import them from the view router package.

00:12:54.335 --> 00:13:00.545
With composition, we have access to beforeRouteLeave and also beforeRouteUpdate.

00:13:00.545 --> 00:13:03.830
The only difference is we use the on prefix.

00:13:03.830 --> 00:13:07.320
So this one will be on beforeRouteLeave.

00:13:07.660 --> 00:13:11.240
This is from the view router,

00:13:11.240 --> 00:13:14.390
commonly section L so it doesn't run,

00:13:14.390 --> 00:13:17.310
placed in the setup function.

00:13:18.130 --> 00:13:24.740
Access on beforeRouteLeave, which is then going to run a function.

00:13:24.740 --> 00:13:28.910
I'm just going to make use of the same example from above.

00:13:28.910 --> 00:13:32.120
Paste this in and uncomment this out.

00:13:32.120 --> 00:13:36.090
Save this file and head over to our admin.

00:13:37.180 --> 00:13:41.795
Try to leave, cancel and we stay on the same page.

00:13:41.795 --> 00:13:46.250
Click on "Okay", and then the navigation is completed.

00:13:46.250 --> 00:13:48.290
These guards are really useful for

00:13:48.290 --> 00:13:52.070
so many reasons such as protecting unauthorized access,

00:13:52.070 --> 00:13:58.170
redirecting, and also write through to just display in a simple message to the user.
