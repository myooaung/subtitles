WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.560
Just before we move on to removing our events using this Cross button,

00:00:04.560 --> 00:00:08.115
we're going to fix a small issue which we looked at in the last video.

00:00:08.115 --> 00:00:10.470
Now, this issue was highlighted.

00:00:10.470 --> 00:00:12.740
If we go into the Add New section,

00:00:12.740 --> 00:00:16.170
we'll see we don't have any of these forms pre-filled in.

00:00:16.170 --> 00:00:19.575
However, if we go into a Edit section,

00:00:19.575 --> 00:00:21.750
which is all working completely fine.

00:00:21.750 --> 00:00:25.875
Close this down, and now if we go back into the Add section,

00:00:25.875 --> 00:00:29.350
all of our work form fields are now pre-filled in.

00:00:29.350 --> 00:00:33.740
Now the reason this happens is because once you open up the Edit section,

00:00:33.740 --> 00:00:36.545
this is setting over in the app.view,

00:00:36.545 --> 00:00:39.829
our data property, which is currentEvent,

00:00:39.829 --> 00:00:43.355
and this is then sending this to the currentEvent data.

00:00:43.355 --> 00:00:46.640
Now to fix this, we're going to reset this back to

00:00:46.640 --> 00:00:50.440
an empty object when we close down this form.

00:00:50.440 --> 00:00:53.840
When we close down this form, look at the very top,

00:00:53.840 --> 00:00:57.860
all you're doing is setting the showForm property to be equal to false.

00:00:57.860 --> 00:01:00.380
We're now going to move this over to a method,

00:01:00.380 --> 00:01:04.145
and we can also reset our currentEvent data.

00:01:04.145 --> 00:01:08.020
We'll cut this out, we'll use it in just a moment.

00:01:08.020 --> 00:01:11.105
This method is going to be called closed form,

00:01:11.105 --> 00:01:14.990
and then we can scroll down and create this just below.

00:01:16.460 --> 00:01:19.410
Closed form doesn't need to take in any data,

00:01:19.410 --> 00:01:21.975
all we need to do is to paste this back in.

00:01:21.975 --> 00:01:24.080
Now since we're in our view section,

00:01:24.080 --> 00:01:27.370
we refer to this with this keyword.

00:01:27.370 --> 00:01:33.870
Then after this, we'll reset our currentEvent data feedback to be an empty object.

00:01:36.580 --> 00:01:39.785
Let's try this out, refresh the browser.

00:01:39.785 --> 00:01:43.680
This is empty. This is fine.

00:01:43.680 --> 00:01:45.540
Then back into our add form,

00:01:45.540 --> 00:01:47.740
this is now all empty.

00:01:47.740 --> 00:01:52.960
Now we can move on to removing our events using this Cross button.

00:01:52.960 --> 00:01:57.710
Removing events will follow a similar pattern of creating a custom event,

00:01:57.710 --> 00:02:00.125
and colon it from the child components.

00:02:00.125 --> 00:02:05.470
This time though, it will be called from the event component rather than from the form.

00:02:05.470 --> 00:02:08.245
Over to the event.view,

00:02:08.245 --> 00:02:10.750
where we already have this button set up,

00:02:10.750 --> 00:02:14.140
and very soon we're going to hook this up to a custom event.

00:02:14.140 --> 00:02:18.450
Look right, it's custom event as always in the app.view.

00:02:18.450 --> 00:02:22.925
First, let's set up a method which this custom event is going to call.

00:02:22.925 --> 00:02:25.680
This is going to be called remove.

00:02:26.720 --> 00:02:29.700
This will also be past event data,

00:02:29.700 --> 00:02:32.315
so we know which events we want to remove.

00:02:32.315 --> 00:02:35.240
Now, just like in the update section,

00:02:35.240 --> 00:02:37.570
we also need to find the index position,

00:02:37.570 --> 00:02:41.185
so we know which one we want to remove from our array.

00:02:41.185 --> 00:02:45.005
We can copy this and paste this inside of here,

00:02:45.005 --> 00:02:49.505
and we can only use this index position to select the correct event.

00:02:49.505 --> 00:02:52.600
First we'll select this.events,

00:02:52.600 --> 00:02:55.175
then the JavaScript array method,

00:02:55.175 --> 00:02:56.735
which is called splice,

00:02:56.735 --> 00:02:59.830
is going to allow us to remove a particular item.

00:02:59.830 --> 00:03:02.040
This is going to take in two things.

00:03:02.040 --> 00:03:06.245
The first one is going to be the position of the item which we want to remove.

00:03:06.245 --> 00:03:08.900
We know we already have this from the index.

00:03:08.900 --> 00:03:12.605
Second of all, the number of items from this index position.

00:03:12.605 --> 00:03:14.975
We only want to remove the single event,

00:03:14.975 --> 00:03:16.715
meaning the value is one.

00:03:16.715 --> 00:03:19.520
Then we scroll up to our templates and the events

00:03:19.520 --> 00:03:22.855
section where we want to pass our custom event.

00:03:22.855 --> 00:03:27.675
As an attribute, we'll pass in our crystal method, which is remove-event.

00:03:27.675 --> 00:03:30.965
This is going to be equal to our remove method,

00:03:30.965 --> 00:03:34.115
which will also receive the event data.

00:03:34.115 --> 00:03:36.560
The next step should be pretty familiar.

00:03:36.560 --> 00:03:38.449
We go over to the event components,

00:03:38.449 --> 00:03:41.670
and then we're going to add our emits array.

00:03:42.440 --> 00:03:46.850
This emits array is currently only going to take in one event,

00:03:46.850 --> 00:03:49.260
and this is remove event.

00:03:50.380 --> 00:03:52.865
Up to our button.

00:03:52.865 --> 00:03:56.710
To trigger this, we need to listen out for a click.

00:03:56.710 --> 00:03:58.560
Then we'll click on this button,

00:03:58.560 --> 00:04:00.550
this will then call the remove method,

00:04:00.550 --> 00:04:02.695
which will now set up just below.

00:04:02.695 --> 00:04:04.660
We don't have a method section,

00:04:04.660 --> 00:04:06.860
so we need to set this up,

00:04:08.120 --> 00:04:15.165
and then set up our remove method where we're going to emit our custom event.

00:04:15.165 --> 00:04:17.100
Since we're in the view section,

00:04:17.100 --> 00:04:19.960
we need to call it with this keyword.

00:04:19.960 --> 00:04:24.275
Enter our event name which is remove-events.

00:04:24.275 --> 00:04:27.085
Then we want to pass the event data.

00:04:27.085 --> 00:04:30.130
We already have this saved as a prop,

00:04:30.130 --> 00:04:33.650
so we pass this in as the second argument.

00:04:33.650 --> 00:04:37.005
Let's give this a try. Over to the browser and refresh.

00:04:37.005 --> 00:04:40.320
Now if we try and clicking on any of these events,

00:04:40.320 --> 00:04:43.415
we can see in the background that the event has been removed.

00:04:43.415 --> 00:04:47.490
We'll also see this form popping up. Let's try this once more.

00:04:47.490 --> 00:04:48.975
We'll remove the birthday,

00:04:48.975 --> 00:04:51.590
and we can see from the background that this is gone.

00:04:51.590 --> 00:04:53.840
But why are we seeing this form?

00:04:53.840 --> 00:04:57.050
Well, this is because even though in this component,

00:04:57.050 --> 00:04:59.195
we are clicking on this button.

00:04:59.195 --> 00:05:04.984
This button is nested inside of the app.view and inside of this pairing app.view,

00:05:04.984 --> 00:05:07.730
we also have this surrounded in a click listener,

00:05:07.730 --> 00:05:10.195
which is triggering setForm.

00:05:10.195 --> 00:05:13.220
Then inside of showForm if we scroll down,

00:05:13.220 --> 00:05:17.855
we can see that we set in this.showForm to be equal to true.

00:05:17.855 --> 00:05:21.830
Why is being called when we click on the Remove button?

00:05:21.830 --> 00:05:27.110
Well, the reason this happens is because of something called event propagation.

00:05:27.110 --> 00:05:29.510
This is nothing to do with Vue.js,

00:05:29.510 --> 00:05:33.605
just something which you should generally be aware of when using JavaScript.

00:05:33.605 --> 00:05:37.370
Yes, we are clicking on the remove button which is nested inside,

00:05:37.370 --> 00:05:42.515
but clicking on an event inside of the HTML would trigger a chain reaction.

00:05:42.515 --> 00:05:46.255
To see this, we can open up the developer tools.

00:05:46.255 --> 00:05:49.570
Right-click and inspect.

00:05:49.910 --> 00:05:53.160
What we need to find is this Remove button,

00:05:53.160 --> 00:05:55.830
so into the body section, the app section.

00:05:55.830 --> 00:05:58.820
Then inside of here we have an unordered list with all of the events,

00:05:58.820 --> 00:06:01.700
and then we can select one of our list items.

00:06:01.700 --> 00:06:05.270
If we open this up, this is in a article wrapper,

00:06:05.270 --> 00:06:10.200
and the button is nested in the countdown section just here.

00:06:10.970 --> 00:06:13.890
As we can see, this puts in is deeply nested,

00:06:13.890 --> 00:06:15.330
it has surrounding divs,

00:06:15.330 --> 00:06:16.950
it has list items.

00:06:16.950 --> 00:06:19.080
In order list the body section,

00:06:19.080 --> 00:06:21.210
and it goes right through to the top of the tree,

00:06:21.210 --> 00:06:22.710
which is the window.

00:06:22.710 --> 00:06:24.950
Even though we're clicking on this button,

00:06:24.950 --> 00:06:27.545
it will trigger a series of phases.

00:06:27.545 --> 00:06:30.680
It will start at the very top and this then will pass down through

00:06:30.680 --> 00:06:34.460
all of the elements until it reaches our button.

00:06:34.460 --> 00:06:37.375
This is called the capture phase.

00:06:37.375 --> 00:06:40.580
Then it reaches the button or the elements which we clicked on,

00:06:40.580 --> 00:06:42.455
and this is called the target.

00:06:42.455 --> 00:06:46.150
Therefore, the stage is called the target stage.

00:06:46.150 --> 00:06:48.620
Finally, once it reaches this button,

00:06:48.620 --> 00:06:53.315
it then climbs back up through all of the parent elements one by one.

00:06:53.315 --> 00:06:57.655
In doing so, we'll also trigger any events on the way back up.

00:06:57.655 --> 00:07:03.185
As we just looked at, one of these events on the way back up will still open the form.

00:07:03.185 --> 00:07:06.025
This stage is called the bubbling phase.

00:07:06.025 --> 00:07:09.350
Now, you don't need to fully understand all of this for now.

00:07:09.350 --> 00:07:12.575
All you need to understand is that when we click on an event,

00:07:12.575 --> 00:07:14.585
it goes through all of the parents

00:07:14.585 --> 00:07:18.445
DOM elements and we'll trigger others along the way too.

00:07:18.445 --> 00:07:22.310
All of this is referred to as events propagation.

00:07:22.310 --> 00:07:28.385
Vue.js also provides us with an event modifier to stop this behavior if needed.

00:07:28.385 --> 00:07:31.795
Over in the event.view.

00:07:31.795 --> 00:07:34.080
Just like earlier when we added

00:07:34.080 --> 00:07:38.190
the prevent modifier which stopped the default behavior of the browser,

00:07:38.190 --> 00:07:42.410
this stop modifier will stop this event propagation.

00:07:42.410 --> 00:07:45.865
Let's save this and over to our project.

00:07:45.865 --> 00:07:50.690
Click on these. Now these events are successfully removed.

00:07:50.690 --> 00:07:52.280
Just to finish things off,

00:07:52.280 --> 00:07:56.260
I'm going to do a small refactor over in the app.view.

00:07:56.260 --> 00:08:01.085
At the moment, inside of this remove method and also the update,

00:08:01.085 --> 00:08:03.800
we are duplicating this line of code.

00:08:03.800 --> 00:08:08.990
To prevent this, let's place this line of code into its own re-usable method.

00:08:08.990 --> 00:08:13.420
We cut this out, and also this one too,

00:08:13.420 --> 00:08:18.180
and then create a new method called findEventIndex,

00:08:19.480 --> 00:08:22.580
where we can paste in this line of code.

00:08:22.580 --> 00:08:25.459
This method also needs access to our event,

00:08:25.459 --> 00:08:27.515
so we can crop the event ID.

00:08:27.515 --> 00:08:32.900
Or alternatively we can simplify this and just pass the ID of the events.

00:08:32.900 --> 00:08:36.150
We can do this one called findEventIndex,

00:08:36.150 --> 00:08:40.470
so let's grab this and first into the remove method.

00:08:40.470 --> 00:08:43.580
We now don't have access to this index constant,

00:08:43.580 --> 00:08:46.625
so we're going to replace this with a method call.

00:08:46.625 --> 00:08:49.165
We can call findEventIndex,

00:08:49.165 --> 00:08:55.500
where we also need to pass it in a valid ID which we can grab from the event.ID.

00:08:56.320 --> 00:09:00.235
This also needs to be called when the this keyword,

00:09:00.235 --> 00:09:02.420
and we can also copy this section and replace

00:09:02.420 --> 00:09:07.020
the update section where we call the index. We'll paste this in.

00:09:07.020 --> 00:09:11.180
Now we need to return the value from this method.

00:09:11.180 --> 00:09:13.520
Instead of storing this inside of a constant,

00:09:13.520 --> 00:09:16.040
we're going to return its index number,

00:09:16.040 --> 00:09:20.470
which is going to be then available inside of these two sections.

00:09:20.470 --> 00:09:22.230
Let's test this out. First of all,

00:09:22.230 --> 00:09:26.325
we can remove an event, and this works fine.

00:09:26.325 --> 00:09:27.890
Then the update functionality,

00:09:27.890 --> 00:09:29.765
you change any of the details.

00:09:29.765 --> 00:09:33.900
Click on Update, and this also works fine too.
