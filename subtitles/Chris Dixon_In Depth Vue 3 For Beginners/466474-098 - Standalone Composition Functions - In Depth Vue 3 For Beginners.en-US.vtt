WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.760 --> 00:00:03.905
Inside of this category.view file,

00:00:03.905 --> 00:00:08.999
this composition code we have wrote so far only solves one of the concerns,

00:00:08.999 --> 00:00:12.660
which is we can now group together related code.

00:00:12.660 --> 00:00:15.765
For example, we have this category variable,

00:00:15.765 --> 00:00:19.845
and we have this organized and placed next to our computed section,

00:00:19.845 --> 00:00:22.005
which relies on this variable.

00:00:22.005 --> 00:00:24.490
With options API for example,

00:00:24.490 --> 00:00:27.050
this category would be a data property.

00:00:27.050 --> 00:00:31.479
Then we may have this computed section a lot further down in our component.

00:00:31.479 --> 00:00:37.700
Another benefit the composition aims to solve is the reusability and organization.

00:00:37.700 --> 00:00:40.895
Even though we've not yet wrote a lot of code for this project,

00:00:40.895 --> 00:00:43.555
we already seen some duplicates.

00:00:43.555 --> 00:00:46.240
For example, here in the category we're importing

00:00:46.240 --> 00:00:49.640
cards and then assigning them to this constant.

00:00:49.640 --> 00:00:55.100
Over in the app home we are importing the cards and then a bit further down,

00:00:55.100 --> 00:00:57.695
we're doing exactly the same just here.

00:00:57.695 --> 00:01:03.125
To help with this, we can extract our composition code into standalone functions.

00:01:03.125 --> 00:01:06.740
These can also be placed into their own separate files.

00:01:06.740 --> 00:01:09.865
To see this would go over to the sidebar,

00:01:09.865 --> 00:01:15.660
into the source, well we'll create a new folder called composables.

00:01:16.310 --> 00:01:19.525
This folder name is totally up to us,

00:01:19.525 --> 00:01:22.630
but it is common to save this named composables.

00:01:22.630 --> 00:01:26.240
Then inside we're going to create a new JavaScript file.

00:01:26.240 --> 00:01:28.484
We want the file name to be descriptive,

00:01:28.484 --> 00:01:31.670
and again, the name is totally up to us.

00:01:31.670 --> 00:01:37.375
But the common naming convention so far seems to be to have the use prefix,

00:01:37.375 --> 00:01:42.620
so we will have names for our projects such as useCards and also useCategories.

00:01:42.620 --> 00:01:44.400
This one will be for useCards,

00:01:44.400 --> 00:01:46.900
and this is a regular JavaScript files,

00:01:46.900 --> 00:01:49.835
so we use the.js extension.

00:01:49.835 --> 00:01:54.015
Inside of this file, we're going to export default function.

00:01:54.015 --> 00:01:59.340
I want to give the same name as our file, which is useCards.

00:02:00.200 --> 00:02:04.475
This now means we can extract all of the composition code from

00:02:04.475 --> 00:02:08.210
any of our setup sections and place it into this function.

00:02:08.210 --> 00:02:10.730
We can then import it and have access to all of

00:02:10.730 --> 00:02:14.165
the data and all the functions which we place inside.

00:02:14.165 --> 00:02:17.205
For now we're going to select allCards,

00:02:17.205 --> 00:02:21.795
let's copy this and then paste this into our function.

00:02:21.795 --> 00:02:28.030
We also need to have access to our data and also import the ref from the vue library too.

00:02:28.030 --> 00:02:30.845
Just like here, we'll bring over

00:02:30.845 --> 00:02:37.435
these two import places outside of the function and we don't need computed.

00:02:37.435 --> 00:02:40.660
We're not going to bring over any of the category related

00:02:40.660 --> 00:02:44.795
sections because these are going to go into their own separate composable.

00:02:44.795 --> 00:02:51.100
All this file is responsible for doing is to fetch the initial cards from our data file,

00:02:51.100 --> 00:02:54.050
and then just like when we use this in our components,

00:02:54.050 --> 00:02:55.805
we're going to return an object.

00:02:55.805 --> 00:03:00.155
This is going to give our components access to any of the data,

00:03:00.155 --> 00:03:01.370
any of the variables,

00:03:01.370 --> 00:03:04.540
any of the methods which we have in this function.

00:03:04.540 --> 00:03:08.460
This is pretty simple, all we have is allCards,

00:03:08.460 --> 00:03:10.665
so we can return this.

00:03:10.665 --> 00:03:13.580
At the moment this file is not actually doing anything and it's just

00:03:13.580 --> 00:03:16.750
sitting there and we can import it when we need it.

00:03:16.750 --> 00:03:19.280
But next, let's create a new file,

00:03:19.280 --> 00:03:22.625
which is for the code related to our category.

00:03:22.625 --> 00:03:27.780
Therefore, we'll give this a descriptive name called useCategory,

00:03:28.220 --> 00:03:31.560
with the js extension.

00:03:31.560 --> 00:03:38.590
Set up our export default with the same name as the file.

00:03:40.220 --> 00:03:43.650
This also needs to return something too.

00:03:43.650 --> 00:03:46.320
To begin over in the app home,

00:03:46.320 --> 00:03:51.355
this component is getting a list of all of our categories that just here.

00:03:51.355 --> 00:03:56.900
Then over in the category we're getting the individual cards for this selected category.

00:03:56.900 --> 00:04:00.710
It would make sense to extract all of this category related code

00:04:00.710 --> 00:04:05.105
from both of these files and then place it into our new composable.

00:04:05.105 --> 00:04:08.375
I head over to the useCategory and to begin,

00:04:08.375 --> 00:04:13.310
we are going to need access to all of our cards which are inside of this useCards.

00:04:13.310 --> 00:04:18.125
Remember we've exported this and return this back from our object.

00:04:18.125 --> 00:04:24.320
Now we can import this into our composable, which was useCards.

00:04:24.320 --> 00:04:28.904
The file path is./useCards,

00:04:28.904 --> 00:04:31.400
and this is one of the good things about composables.

00:04:31.400 --> 00:04:35.230
We can reuse data between each one of our files.

00:04:35.230 --> 00:04:40.335
Here we have effectively imported the full function from useCards.

00:04:40.335 --> 00:04:43.995
Now we want to pull out the allCards variable.

00:04:43.995 --> 00:04:47.340
Now we're going to store this in a constant,

00:04:47.340 --> 00:04:53.045
this is allCards, and then we're going to extract this from our useCards function.

00:04:53.045 --> 00:04:56.210
We can now start to bring over all of our category

00:04:56.210 --> 00:04:59.600
related code unless we going in the app home.

00:04:59.600 --> 00:05:02.120
We already have our allCards sections,

00:05:02.120 --> 00:05:06.730
so grab the uniqueCategories and also the loop just below.

00:05:06.730 --> 00:05:12.930
We can cut this out then place it just below allCards.

00:05:12.930 --> 00:05:16.380
Then we also need to return a uniqueCategories.

00:05:16.380 --> 00:05:19.160
With this now extracted into its own file,

00:05:19.160 --> 00:05:21.440
we can go back over to the app home or

00:05:21.440 --> 00:05:25.960
any other components which needs this information and import this to use.

00:05:25.960 --> 00:05:28.850
Goodness app home has quite a bit of example code,

00:05:28.850 --> 00:05:32.255
so we can remove all this from the setup function.

00:05:32.255 --> 00:05:33.830
We don't need allCards.

00:05:33.830 --> 00:05:37.545
I'm going to remove our return statements for now.

00:05:37.545 --> 00:05:39.585
We don't need the data,

00:05:39.585 --> 00:05:41.955
so we remove all of these imports.

00:05:41.955 --> 00:05:45.610
The import we do need now though is our useCategory.

00:05:45.610 --> 00:05:49.110
This is importing our useCategory function,

00:05:49.110 --> 00:05:51.470
and the file path was the source,

00:05:51.470 --> 00:05:53.120
which is the at symbol.

00:05:53.120 --> 00:05:59.220
We'll head into the composable folder and then into useCategory,

00:05:59.390 --> 00:06:03.315
and make sure this is spelled correctly, useCategory.

00:06:03.315 --> 00:06:08.205
This useCategory function is exporting our uniqueCategories,

00:06:08.205 --> 00:06:14.010
and now we can go into our setup section and install inside of a constant.

00:06:14.120 --> 00:06:21.640
That's extract uniqueCategories from this useCategory function.

00:06:21.860 --> 00:06:24.420
Make this available in our template,

00:06:24.420 --> 00:06:27.590
we also need to return this and open our template.

00:06:27.590 --> 00:06:32.030
Remember, we'll make use of this uniqueCategories inside of this v-for loop.

00:06:32.030 --> 00:06:34.825
Let's try this out, refresh,

00:06:34.825 --> 00:06:37.430
now we don't currently see anything inside the browser,

00:06:37.430 --> 00:06:43.100
so let's take a look inside the developer tools into the console.

00:06:43.100 --> 00:06:48.160
We see that allCards.forEach is not a function.

00:06:48.160 --> 00:06:53.415
Now this is happening in our useCategory.js file.

00:06:53.415 --> 00:06:56.775
Here we're trying to loop over allCards,

00:06:56.775 --> 00:07:01.070
and this is thrown in arrow because when we first wrote the section,

00:07:01.070 --> 00:07:04.780
allCards constant was not making use of refs.

00:07:04.780 --> 00:07:07.410
But here inside of allCards.

00:07:07.410 --> 00:07:10.200
If we go over to the section where this is created,

00:07:10.200 --> 00:07:12.615
we open this in a ref,

00:07:12.615 --> 00:07:16.420
this now means we need to access allCards.value,

00:07:16.910 --> 00:07:20.410
and this should now fix the problem.

00:07:20.480 --> 00:07:23.290
We still see an arrow cannot read property,

00:07:23.290 --> 00:07:27.275
e-mail and this is probably from the template.

00:07:27.275 --> 00:07:29.155
Yet we can also remove this,

00:07:29.155 --> 00:07:33.875
just try ones more, and there's all of our categories now back on the screen.

00:07:33.875 --> 00:07:37.470
But this time from a composition function.
