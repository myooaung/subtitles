WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.710 --> 00:00:03.035
Inside of our app.vue file,

00:00:03.035 --> 00:00:05.860
we now have this provide object which will provide all

00:00:05.860 --> 00:00:09.339
of the data inside to any of the child components.

00:00:09.339 --> 00:00:14.454
This data is not automatically inherited in the child components.

00:00:14.454 --> 00:00:17.650
Instead, what we need to do is to go into any components,

00:00:17.650 --> 00:00:23.210
where we want to use it and add an injector array with the properties we want to accept.

00:00:23.210 --> 00:00:25.600
Let's begin in the items sold,

00:00:25.600 --> 00:00:28.690
where we need this quantity of items sold value.

00:00:28.690 --> 00:00:31.580
We can start to have a script,

00:00:31.730 --> 00:00:35.140
just like when we accept any props.

00:00:35.140 --> 00:00:39.155
Inside here, we're going to setup an array called inject.

00:00:39.155 --> 00:00:41.210
Then we can pass in the value we need,

00:00:41.210 --> 00:00:44.255
which is quantity of items sold.

00:00:44.255 --> 00:00:48.890
If we save this, we now see the value has been updated inside the browser.

00:00:48.890 --> 00:00:52.325
This works because both of these names will match.

00:00:52.325 --> 00:00:54.125
Let's grab the script section,

00:00:54.125 --> 00:00:57.695
and we are going to place this also in the sales total.

00:00:57.695 --> 00:01:02.120
This also needs the total sales value which is passed down.

00:01:02.120 --> 00:01:04.100
Save this, and this will now appear.

00:01:04.100 --> 00:01:06.690
Then finally, the bestseller.

00:01:09.910 --> 00:01:13.490
There we go. But as we already know,

00:01:13.490 --> 00:01:15.790
this is all just currently static data,

00:01:15.790 --> 00:01:20.695
but it should be dynamic and based of our orders.js file.

00:01:20.695 --> 00:01:22.620
To do this back in our app.vue,

00:01:22.620 --> 00:01:25.550
we are now going to set these first two values to

00:01:25.550 --> 00:01:29.090
be dynamic by setting up a computed property.

00:01:29.090 --> 00:01:32.000
First, let's go for the quantity of items sold.

00:01:32.000 --> 00:01:34.790
They're just underneath our sorted items,

00:01:34.790 --> 00:01:37.910
separated by comma, we will set this up.

00:01:37.910 --> 00:01:40.310
Now this leaves us with a couple of options.

00:01:40.310 --> 00:01:44.020
We could go directly into our orders.js file.

00:01:44.020 --> 00:01:45.680
Just like we've done previously,

00:01:45.680 --> 00:01:49.955
we can loop through all the orders and then all of the order items,

00:01:49.955 --> 00:01:52.340
or alternatively just above this,

00:01:52.340 --> 00:01:54.485
we already have our sorted items,

00:01:54.485 --> 00:01:57.730
which is an array of all items which we've sold.

00:01:57.730 --> 00:01:59.685
Instead we can use this,

00:01:59.685 --> 00:02:03.950
but first we'll create a new variable called quantity,

00:02:03.950 --> 00:02:06.725
and set this up to be an initial value of zero.

00:02:06.725 --> 00:02:10.400
Then to obtain this, we can grab our computed property which

00:02:10.400 --> 00:02:14.145
was sorted items, loop over this.

00:02:14.145 --> 00:02:17.770
Then create a function for each item.

00:02:18.170 --> 00:02:22.730
We're looping through all of those sold items and we have this object,

00:02:22.730 --> 00:02:24.335
just like we see here.

00:02:24.335 --> 00:02:28.055
Remember that each one of these objects has a quantity field.

00:02:28.055 --> 00:02:33.695
What we now need to do is to update our quantity with the quantity field from this item.

00:02:33.695 --> 00:02:35.645
So grab our variable,

00:02:35.645 --> 00:02:42.140
and then we can add using the += operator, the item.quantity.

00:02:42.140 --> 00:02:48.680
This operator will auto-renew item quantity to the existing value rather than replace it.

00:02:48.680 --> 00:02:52.830
Then return our quantity from this computed value.

00:02:53.330 --> 00:02:58.640
Now we can use this name openly provide objects and replace the hard-coded value

00:02:58.640 --> 00:03:04.080
of 54 with the value of this dots quantity of items sold.

00:03:04.420 --> 00:03:08.260
Next, the total sales value.

00:03:08.260 --> 00:03:11.580
I'll just [inaudible] add a comma,

00:03:11.580 --> 00:03:14.810
and setup our second computed property.

00:03:14.810 --> 00:03:17.945
Just like both will create a new variable,

00:03:17.945 --> 00:03:19.625
this time called total,

00:03:19.625 --> 00:03:22.655
and set this to an initial value of zero.

00:03:22.655 --> 00:03:25.100
Again, for this one, we have a couple of options.

00:03:25.100 --> 00:03:28.175
We could once again live through our sorted items.

00:03:28.175 --> 00:03:32.915
We could do something such as multiplying the quantity by the price of the item,

00:03:32.915 --> 00:03:35.405
or we could go directly to our orders array.

00:03:35.405 --> 00:03:37.700
Then loop through our orders,

00:03:37.700 --> 00:03:39.229
loop through the items,

00:03:39.229 --> 00:03:41.855
and then add together all of the prices.

00:03:41.855 --> 00:03:46.295
This is what I'm going to do, which is loop through all of our orders.

00:03:46.295 --> 00:03:48.750
We do this.orders.map.

00:03:50.720 --> 00:03:54.820
We will grab each individual order,

00:03:54.820 --> 00:03:58.500
and then loop through the items property.

00:03:58.880 --> 00:04:01.605
Select each item.

00:04:01.605 --> 00:04:05.270
Then for each item in one of our single orders,

00:04:05.270 --> 00:04:07.460
we will then grab the price field,

00:04:07.460 --> 00:04:10.050
and update our total,

00:04:13.580 --> 00:04:17.380
and then return back this total value.

00:04:19.640 --> 00:04:24.675
Now, back up to our provider, move this.

00:04:24.675 --> 00:04:29.230
We can set this value to be this.totalsalesvalue.

00:04:29.230 --> 00:04:32.090
Give this a save and off to the browser.

00:04:32.090 --> 00:04:35.145
We are now seeing no data inside of here.

00:04:35.145 --> 00:04:39.620
Let's go into the inspector and see what's going on in the console.

00:04:39.620 --> 00:04:44.660
We got an error saying we can not read the property of quantity of items sold.

00:04:44.660 --> 00:04:48.790
Now, the reason we are seeing this error is because when referencing

00:04:48.790 --> 00:04:53.695
any data properties or dynamic data on this provide object,

00:04:53.695 --> 00:04:57.145
we need to instead return this as a function.

00:04:57.145 --> 00:05:00.745
This function is setup just like the data property above.

00:05:00.745 --> 00:05:05.090
This is going to return all of our values which include dynamic data.

00:05:05.090 --> 00:05:08.570
This was completely fine before because all we were outputing was

00:05:08.570 --> 00:05:12.560
static data such as the string and also our numbers.

00:05:12.560 --> 00:05:14.765
If we turn this into a function,

00:05:14.765 --> 00:05:16.640
just like the data,

00:05:16.640 --> 00:05:21.060
we're going to grab our three values and then return these

00:05:21.060 --> 00:05:25.155
back from all function off to the browser.

00:05:25.155 --> 00:05:26.840
We now see the items sold,

00:05:26.840 --> 00:05:30.005
but we're missing the sales total. Let's take a look.

00:05:30.005 --> 00:05:39.880
We have this.totalsalesvalue of the quantity of items sold.

00:05:44.390 --> 00:05:50.380
I think we maybe just need to place this in the computed section,

00:05:50.380 --> 00:05:52.225
so we cut this.

00:05:52.225 --> 00:05:56.555
If we take a look at the closing brace for the computed,

00:05:56.555 --> 00:06:01.520
we just need to place this inside of the right section,

00:06:01.850 --> 00:06:07.020
separated by a comma, and there we go.

00:06:07.020 --> 00:06:12.085
Lastly, we have this top-selling item which is currently passed down as a string.

00:06:12.085 --> 00:06:16.585
Now, we're going to fix this by again accessing the sorted items,

00:06:16.585 --> 00:06:19.465
which is an array of our top selling items.

00:06:19.465 --> 00:06:22.900
Remember this is the highest quantity sold first.

00:06:22.900 --> 00:06:28.655
All we need to do for this is to access the very first item inside of our array.

00:06:28.655 --> 00:06:34.215
I'll cut out the string. We can access this.sorteditems.

00:06:34.215 --> 00:06:38.135
Then access this first one which is the highest selling quantity.

00:06:38.135 --> 00:06:40.880
This will return our full object for this item.

00:06:40.880 --> 00:06:44.030
We can now narrow this down in the best-seller components,

00:06:44.030 --> 00:06:47.450
and directly access the name property.

00:06:47.450 --> 00:06:52.740
Now, our free injected values are now in the correct components.
