WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.025
It's also important to handle what happens if the user lands on the wrong part

00:00:05.025 --> 00:00:09.525
of our application or onto a page which doesn't exist.

00:00:09.525 --> 00:00:13.290
We can setup a general catch all components such as a

00:00:13.290 --> 00:00:17.550
follow four page to display if no over routes are matched.

00:00:17.550 --> 00:00:23.145
At the moment, if we go to the browser and type in unrecognized URL,

00:00:23.145 --> 00:00:26.760
we don't see any component displaying in the browser.

00:00:26.760 --> 00:00:29.145
To catch this, we're going to go over to

00:00:29.145 --> 00:00:34.420
our Views and create a new page called NotFound.vue.

00:00:37.340 --> 00:00:41.880
Just a simple template will be fine with a level 1 heading,

00:00:41.880 --> 00:00:45.275
and this heading is just going to say page not found.

00:00:45.275 --> 00:00:49.640
If we wanted to, we could also place in links to different parts

00:00:49.640 --> 00:00:53.570
for app or even redirect back to the homepage if we wanted to.

00:00:53.570 --> 00:00:56.350
This is fine for this example.

00:00:56.350 --> 00:00:58.640
Say this and now to access this,

00:00:58.640 --> 00:01:00.980
we need to go over to our router,

00:01:00.980 --> 00:01:06.570
and at the very top, we'll import this as not found.

00:01:07.130 --> 00:01:10.545
Then into our router array,

00:01:10.545 --> 00:01:13.760
create a new object which is going to handle

00:01:13.760 --> 00:01:17.555
all of the routes which are not recognized just above.

00:01:17.555 --> 00:01:22.760
It will also need to take in a path which we'll take a look at in just a second.

00:01:22.760 --> 00:01:25.790
The name, not found,

00:01:25.790 --> 00:01:28.820
and also the components which you just imported,

00:01:28.820 --> 00:01:31.340
which is also not found too.

00:01:31.340 --> 00:01:37.360
If you've used view to in the past and used a router to catch any unrecognized paths,

00:01:37.360 --> 00:01:41.075
all we would need to do is to add in a star inside here,

00:01:41.075 --> 00:01:46.090
and this would then render out our NotFound components for any unrecognized path.

00:01:46.090 --> 00:01:48.240
However, though in view 3,

00:01:48.240 --> 00:01:50.950
we need to pass in a custom parameter.

00:01:50.950 --> 00:01:56.120
A custom parameter is just like the ones we've used above for the user ID,

00:01:56.120 --> 00:01:58.715
but the difference this time is we also need to pass in

00:01:58.715 --> 00:02:03.010
a regular expression to match any unrecognized route.

00:02:03.010 --> 00:02:06.245
Let's add in our custom parameter,

00:02:06.245 --> 00:02:09.530
which I'm going to call the pathname.

00:02:09.530 --> 00:02:11.780
A mistakes in the regular expression,

00:02:11.780 --> 00:02:14.720
which is the dot and the star,

00:02:14.720 --> 00:02:19.140
and this will match any other routes which are not listed above.

00:02:19.140 --> 00:02:21.290
I will say this, we see that

00:02:21.290 --> 00:02:27.020
our unrecognized URL will now render out our page not found components.

00:02:27.020 --> 00:02:33.965
We can also access these parameters too which we have just here inside of the component.

00:02:33.965 --> 00:02:38.060
Do this, we access them just like any other router parameters.

00:02:38.060 --> 00:02:40.595
We open up the double curly braces,

00:02:40.595 --> 00:02:42.875
access the current route,

00:02:42.875 --> 00:02:45.710
and then select the params.

00:02:45.710 --> 00:02:51.265
This now gives us access to this path name variable and also the value too.

00:02:51.265 --> 00:02:54.710
We could also access multiple path just like this if we

00:02:54.710 --> 00:02:58.040
added a forward slash and then a second segment.

00:02:58.040 --> 00:03:01.910
However, though this will just render out a simple string.

00:03:01.910 --> 00:03:06.950
If we did want to break up the sections and access them individually,

00:03:06.950 --> 00:03:10.850
we can repeat this and create an array of parameters.

00:03:10.850 --> 00:03:13.610
To do this, all we need to do is to go to

00:03:13.610 --> 00:03:17.535
our router and then add a optional star at the very end,

00:03:17.535 --> 00:03:23.060
and mostly say we see this is converted to an array with multiple values.

00:03:23.060 --> 00:03:28.040
This now gives us the option to use these parameters individually if we needed to,

00:03:28.040 --> 00:03:31.310
or even navigate through this path too.

00:03:31.310 --> 00:03:35.255
We also don't need to much the full URL just like this.

00:03:35.255 --> 00:03:38.800
This can also be a section of our URL too.

00:03:38.800 --> 00:03:41.780
For example, if this was forward slash Admin,

00:03:41.780 --> 00:03:43.790
this would match the admin section,

00:03:43.790 --> 00:03:48.410
and then we could use the catch-all section for anything which follows.

00:03:48.410 --> 00:03:50.850
This would then allow us to be more specific,

00:03:50.850 --> 00:03:55.745
and we could create custom components for different pages, which may be wrong.

00:03:55.745 --> 00:03:58.040
For this use case, we could then customize

00:03:58.040 --> 00:04:01.880
our not found page to be more personal for this admin route,

00:04:01.880 --> 00:04:05.360
we can maybe add in some texts or just no admin page found,

00:04:05.360 --> 00:04:07.895
and then we could also pass in the router,

00:04:07.895 --> 00:04:11.000
let the user know exactly which path they are on.

00:04:11.000 --> 00:04:13.160
Since this is in the admin route,

00:04:13.160 --> 00:04:15.290
we're not seeing this not found page.

00:04:15.290 --> 00:04:19.115
What we need to do is to go to forward slash admin and then place in

00:04:19.115 --> 00:04:23.910
anything after this path or page not found is then rendered,

00:04:23.910 --> 00:04:27.360
and then also our customer message just below.
