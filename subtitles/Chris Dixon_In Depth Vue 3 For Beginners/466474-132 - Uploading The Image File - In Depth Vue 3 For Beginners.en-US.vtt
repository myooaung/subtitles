WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.080 --> 00:00:04.365
First video gave us access to the user's uploaded image.

00:00:04.365 --> 00:00:07.530
We then started image preview for the user to see.

00:00:07.530 --> 00:00:10.275
Now we're going to save this to Cloudinary.

00:00:10.275 --> 00:00:12.600
Once Cloudinary receives these images,

00:00:12.600 --> 00:00:16.140
we'll also assign it a unique URL too.

00:00:16.140 --> 00:00:20.415
We'll also soon save this URL to our card object.

00:00:20.415 --> 00:00:24.375
We're going to do this inside of our upload file function,

00:00:24.375 --> 00:00:26.855
just below where we read the actual file.

00:00:26.855 --> 00:00:29.720
Since we're sending data to a different location,

00:00:29.720 --> 00:00:32.195
we can handle this using try and catch,

00:00:32.195 --> 00:00:34.920
which will handle any errors.

00:00:34.970 --> 00:00:39.060
Then catch which will take in any errors.

00:00:39.060 --> 00:00:41.675
If there is an error, we'll throw a new error,

00:00:41.675 --> 00:00:44.610
passing in this error message.

00:00:46.250 --> 00:00:48.360
Up to the try section,

00:00:48.360 --> 00:00:53.860
the first thing we'll do inside here is to create a new FormData object.

00:00:53.860 --> 00:00:57.740
A FormData object is a way of constructing sets of

00:00:57.740 --> 00:01:03.350
key value pairs in a correct format which is needed to send it to a server.

00:01:03.350 --> 00:01:07.160
These key value pairs will contain our Cloudinary presets,

00:01:07.160 --> 00:01:09.710
and also the image file we want to send.

00:01:09.710 --> 00:01:12.400
We'll also keep this in sync with our state,

00:01:12.400 --> 00:01:15.570
so just above where we have our state object.

00:01:15.570 --> 00:01:19.845
Also the formData, which will initially be null.

00:01:19.845 --> 00:01:24.860
We can then update our formData with the contents of this object.

00:01:24.860 --> 00:01:29.140
So this will be state.formData.

00:01:29.140 --> 00:01:32.760
Set this equal to our object which is currently empty.

00:01:32.760 --> 00:01:37.385
But to add some contents to this formData or some key value pairs,

00:01:37.385 --> 00:01:41.000
we can use the append method, which will look like this.

00:01:41.000 --> 00:01:44.915
We gain access of our state.formData.

00:01:44.915 --> 00:01:49.480
Then we can call append to passing our key value pairs.

00:01:49.480 --> 00:01:54.430
One of the things we need to upload with this image is the upload_preset.

00:01:54.430 --> 00:01:56.440
This is the key of the name,

00:01:56.440 --> 00:01:59.500
and then separated by comma the value is the preset,

00:01:59.500 --> 00:02:01.675
which we receive from Cloudinary.

00:02:01.675 --> 00:02:06.330
Wrap this, and place this in as a string.

00:02:06.330 --> 00:02:12.770
Duplicate this and the second key value pair is going to be for our image file.

00:02:13.880 --> 00:02:18.220
The file is available from event.target.

00:02:18.500 --> 00:02:22.750
Its FormData is now going to be used to send the Cloudinary.

00:02:22.750 --> 00:02:25.915
But we first need a way to send this request.

00:02:25.915 --> 00:02:29.210
For this, I'm going to use a package called axios.

00:02:29.210 --> 00:02:32.085
Axios is a package to make web requests,

00:02:32.085 --> 00:02:35.200
and we can install this using npm.

00:02:35.540 --> 00:02:40.300
Open up the terminal, close this down with control C,

00:02:40.300 --> 00:02:43.565
and then install this in our project with npm.

00:02:43.565 --> 00:02:45.875
Install all the i short hand,

00:02:45.875 --> 00:02:48.900
and then the package name which is axios.

00:02:53.900 --> 00:02:58.665
Once this is done, restart the server with npm run serve.

00:02:58.665 --> 00:03:00.795
Back to our component,

00:03:00.795 --> 00:03:02.520
and to use this axios package,

00:03:02.520 --> 00:03:05.220
we first need to import it.

00:03:05.220 --> 00:03:08.010
So import axios.

00:03:08.010 --> 00:03:10.070
Since this is a node module,

00:03:10.070 --> 00:03:11.825
we don't need to add in the file path.

00:03:11.825 --> 00:03:14.210
We can just add the package name.

00:03:14.210 --> 00:03:17.840
Back to our function, axios,

00:03:17.840 --> 00:03:22.640
now we need some certain things to make this request and send this data to Cloudinary.

00:03:22.640 --> 00:03:25.970
I'm going to store all this inside of an object.

00:03:25.970 --> 00:03:30.870
So const imageRequestData.

00:03:30.970 --> 00:03:35.555
Setup this object where we are going to pass in three things.

00:03:35.555 --> 00:03:40.175
First, the URL, the method,

00:03:40.175 --> 00:03:42.820
and also the data.

00:03:42.820 --> 00:03:45.425
First of all, we have the URL,

00:03:45.425 --> 00:03:48.695
and this is the location where we want to send this image to,

00:03:48.695 --> 00:03:51.355
and this is the Cloudinary API,

00:03:51.355 --> 00:03:53.670
pass this in as a string,

00:03:53.670 --> 00:04:02.780
which is https://api.cloudinary.com/,

00:04:02.780 --> 00:04:06.750
the API version number, which is v1_1.

00:04:07.030 --> 00:04:10.445
Then we need to point to our own account,

00:04:10.445 --> 00:04:13.340
back over to the Cloudinary dashboard.

00:04:13.340 --> 00:04:16.839
We can get this from our account details.

00:04:16.839 --> 00:04:19.890
This is the Cloud name which is at the very top.

00:04:19.890 --> 00:04:26.160
Copy this and this onto the end of our URL, and then /upload.

00:04:26.160 --> 00:04:28.975
By this we have the method,

00:04:28.975 --> 00:04:32.930
and this is a post request since we are posting data.

00:04:32.930 --> 00:04:34.940
Then last of all, the data,

00:04:34.940 --> 00:04:37.580
which is the actual data we want to send.

00:04:37.580 --> 00:04:41.885
We already have this stored in our state.formData.

00:04:41.885 --> 00:04:46.205
Good. This is everything we now need to make a axios request.

00:04:46.205 --> 00:04:48.590
So we'll call the axios library,

00:04:48.590 --> 00:04:51.545
and then pass in this image request data.

00:04:51.545 --> 00:04:55.460
If you wanted to, you could pass an object directly into here,

00:04:55.460 --> 00:04:57.695
rather than creating a separate object.

00:04:57.695 --> 00:05:00.740
But personally, I think this is a cleaner approach.

00:05:00.740 --> 00:05:04.750
Would just cut this typo before we go any further?

00:05:04.750 --> 00:05:09.880
Okay, say this. Now back over to our project, refresh this.

00:05:09.880 --> 00:05:12.100
Now if we upload a new file,

00:05:12.100 --> 00:05:15.645
use any image opens up.

00:05:15.645 --> 00:05:21.870
There's our preview over to Cloudinary and into the Media Library.

00:05:22.030 --> 00:05:24.620
Remember when we set up the preset,

00:05:24.620 --> 00:05:26.495
we also set up these cards folder.

00:05:26.495 --> 00:05:30.705
So go into this. There we see our image,

00:05:30.705 --> 00:05:32.310
and now we know this is working.

00:05:32.310 --> 00:05:35.900
In the next video, we're going to grab our images URL,

00:05:35.900 --> 00:05:38.540
which is been assigned to this image by Cloudinary,

00:05:38.540 --> 00:05:43.530
and then setup a update function to save this to our card object.
