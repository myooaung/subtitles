WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.640
What we have at the moment is this card preview which displays a background image.

00:00:05.640 --> 00:00:09.075
Then just below for each one of our sections on this page,

00:00:09.075 --> 00:00:11.955
it will then output the user input.

00:00:11.955 --> 00:00:13.980
We've all seen something like this.

00:00:13.980 --> 00:00:16.350
If we go to the front page, we see the background image.

00:00:16.350 --> 00:00:22.820
Then the text overlaid for pages with multiple sections of texts like the inside right.

00:00:22.820 --> 00:00:25.220
We see these displaying just here.

00:00:25.220 --> 00:00:30.115
This text though is not intended to be displayed like plain text, just like this.

00:00:30.115 --> 00:00:32.505
If we go to the data.js,

00:00:32.505 --> 00:00:35.600
we have an array of sections with an object,

00:00:35.600 --> 00:00:39.200
and this particular one has this user input just here.

00:00:39.200 --> 00:00:42.755
Then we have various things for styling and layout.

00:00:42.755 --> 00:00:47.660
To show these, we're going to create a new component to output each one of these pieces

00:00:47.660 --> 00:00:53.000
of text over to the component section and into the card.

00:00:53.000 --> 00:00:58.230
This is the text output.vue,

00:00:59.260 --> 00:01:05.980
the template, and just some simple text for now.

00:01:06.120 --> 00:01:12.505
This is going to be displayed inside of our card preview in place of this text just here,

00:01:12.505 --> 00:01:14.815
into the scripts action,

00:01:14.815 --> 00:01:20.135
import this file, which is the text output.

00:01:20.135 --> 00:01:24.000
This is in the same folder so all we need to do is./,

00:01:24.000 --> 00:01:26.950
and then into our text output,

00:01:27.140 --> 00:01:36.900
register our components, and back up to the template,

00:01:36.900 --> 00:01:38.250
we don't need this section,

00:01:38.250 --> 00:01:40.155
we don't use inputs anymore.

00:01:40.155 --> 00:01:43.510
Replace this with our new component.

00:01:44.570 --> 00:01:48.230
Of course, this text output needs some data to display,

00:01:48.230 --> 00:01:53.070
so we'll send down the full contents of the section as a prop.

00:01:54.740 --> 00:01:57.935
This is all we need to do for this component.

00:01:57.935 --> 00:02:00.050
Over to the text output.

00:02:00.050 --> 00:02:04.695
The scripts, place in our props,

00:02:04.695 --> 00:02:09.755
and the section prop will have the type of object.

00:02:09.755 --> 00:02:12.965
Remember, this is the shorthand for the type.

00:02:12.965 --> 00:02:14.835
Rather than having the object,

00:02:14.835 --> 00:02:17.545
I'm placing the type just like this.

00:02:17.545 --> 00:02:20.100
Just like in the card preview,

00:02:20.100 --> 00:02:23.685
if we now output the contents of the section,

00:02:23.685 --> 00:02:27.930
we should also have access to the user inputs.

00:02:28.070 --> 00:02:33.930
Let's see. Good. We have all three separate user inputs and also,

00:02:33.930 --> 00:02:36.490
the same for the fronts of the card too.

00:02:36.490 --> 00:02:40.510
This leaves us in the same position as the beginning of the video.

00:02:40.510 --> 00:02:42.370
We have just the plain text home,

00:02:42.370 --> 00:02:45.174
but this time from a separate component.

00:02:45.174 --> 00:02:48.895
We can now use these CSS values we see in the data file

00:02:48.895 --> 00:02:53.465
to create a CSS object and apply it to this text.

00:02:53.465 --> 00:03:03.245
First, place in our setup function and a constant to store our CSS object.

00:03:03.245 --> 00:03:05.370
Keep an eye on any changes.

00:03:05.370 --> 00:03:09.970
We're going to make use of a computed value inside of this setup function.

00:03:09.970 --> 00:03:12.910
We'll pass in a function and

00:03:12.910 --> 00:03:16.960
this function is going to run each time the data inside changes.

00:03:16.960 --> 00:03:19.270
Just like when using the Options API,

00:03:19.270 --> 00:03:22.205
this also needs to return some data,

00:03:22.205 --> 00:03:26.680
but I'll just place in an empty object and we'll come back to this in just a second.

00:03:26.680 --> 00:03:30.930
Before we forget, place number returns action for the setup,

00:03:30.930 --> 00:03:34.170
where we're going to return our CSS object,

00:03:34.170 --> 00:03:36.165
because now we use computed,

00:03:36.165 --> 00:03:38.640
we need to import this from

00:03:38.640 --> 00:03:47.630
the view library into our returned CSS object.

00:03:47.630 --> 00:03:49.700
This is going to be an object with all of

00:03:49.700 --> 00:03:53.495
these CSS properties which we can pull from this section.

00:03:53.495 --> 00:03:59.560
But first, we have a couple of static CSS values which are not going to change,

00:03:59.560 --> 00:04:03.830
but just a border which will surround each one of these pieces of text

00:04:03.830 --> 00:04:08.480
so the user knows the height of the section as a string,

00:04:08.480 --> 00:04:12.185
the one pixel width, a dotted line,

00:04:12.185 --> 00:04:16.985
a gray color, and then separate each one of these with a comma.

00:04:16.985 --> 00:04:20.755
The display type is going to be equal to flex.

00:04:20.755 --> 00:04:25.220
This flex type will allow us to make use of the flexbox properties,

00:04:25.220 --> 00:04:28.310
which are over in this data, and in particular,

00:04:28.310 --> 00:04:33.420
the values for alignments such as justifyContent and align items.

00:04:33.560 --> 00:04:36.905
Since we are now returning the CSS object,

00:04:36.905 --> 00:04:40.790
we can test this is working up in our text file.

00:04:40.790 --> 00:04:45.450
A CSS style property and set this equal to our object.

00:04:46.060 --> 00:04:49.025
If we now refresh the browser,

00:04:49.025 --> 00:04:50.300
we see the dotted line,

00:04:50.300 --> 00:04:53.875
so our CSS object is now taking effect.

00:04:53.875 --> 00:04:57.260
The rest of the styling to apply to this text is going to be

00:04:57.260 --> 00:05:01.685
dynamic and based on the values which had been passed down from our props.

00:05:01.685 --> 00:05:05.090
For example, the CSS color property,

00:05:05.090 --> 00:05:11.390
we could normally access this using the options object with something like this.section.

00:05:11.390 --> 00:05:15.515
Then we could access the individual properties, but remember though,

00:05:15.515 --> 00:05:17.605
using the settle upon composition,

00:05:17.605 --> 00:05:21.110
we'll no longer have access to read this keyword.

00:05:21.110 --> 00:05:25.640
The way to do this in composition is to pass in the props to setup.

00:05:25.640 --> 00:05:28.715
This will then give us direct access to our props,

00:05:28.715 --> 00:05:30.995
where we can access the section,

00:05:30.995 --> 00:05:35.640
and then one of our values on this section object, which is the color.

00:05:35.930 --> 00:05:44.250
Next, the height of the section, props.section.height.

00:05:44.250 --> 00:05:46.310
Since we're working with CSS,

00:05:46.310 --> 00:05:49.055
we also need to add the pixel value.

00:05:49.055 --> 00:05:52.830
After the height, we have justifyContent,

00:05:54.370 --> 00:06:00.785
which is equal to prompts.section.justifyContent.

00:06:00.785 --> 00:06:11.070
Align items. Then save this section and test this out over in the browser.

00:06:11.070 --> 00:06:15.170
Good. We see we have various heights for these pieces of text.

00:06:15.170 --> 00:06:19.455
We have a different on color. Over to the front.

00:06:19.455 --> 00:06:21.560
Good, we have a height just on here too,

00:06:21.560 --> 00:06:24.080
and this is also aligned into the center,

00:06:24.080 --> 00:06:27.095
so our flexbox properties are taking effect.

00:06:27.095 --> 00:06:37.960
Let's also place in the font family and the font size. The font size.

00:06:40.910 --> 00:06:45.375
Place in the comma, and we now see a larger text,

00:06:45.375 --> 00:06:48.260
and also the font family has been applied.

00:06:48.260 --> 00:06:50.930
Don't worry about the spacing between these sections

00:06:50.930 --> 00:06:53.180
or the bottom one being off the page for now.

00:06:53.180 --> 00:06:55.855
We will fix this with CSS in a bit.

00:06:55.855 --> 00:06:58.455
Though we're now done with our style object and

00:06:58.455 --> 00:07:01.895
this computed section will keep the card preview updated.

00:07:01.895 --> 00:07:05.510
When we update the card from the edit section later on,

00:07:05.510 --> 00:07:09.275
all of these values will be updated in our composable function.

00:07:09.275 --> 00:07:14.820
Then the reactive values will be passed back down the chain to this preview component.
