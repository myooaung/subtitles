WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.020
all right.

00:00:02.020 --> 00:00:07.130
So in the last lecture we learned about how to merge two branches and we considered fast

00:00:07.130 --> 00:00:08.380
forward type of march.

00:00:08.380 --> 00:00:11.300
Now I'm going to show you another type of merge,

00:00:11.300 --> 00:00:13.010
which is called Three Way Merger.

00:00:13.010 --> 00:00:17.230
This kind of merge a cures when we create a new branch,

00:00:17.230 --> 00:00:23.610
work on the branch and at the same time someone else makes commits on the master branch

00:00:23.610 --> 00:00:25.610
before we emerge the branches.

00:00:25.610 --> 00:00:29.090
Let's consider this type of merge with an example.

00:00:29.090 --> 00:00:31.620
Let's recall what branches do we have.

00:00:31.620 --> 00:00:32.900
I'm going to run,

00:00:32.900 --> 00:00:33.930
get branch!

00:00:33.930 --> 00:00:37.850
So overall we have two branches,

00:00:37.850 --> 00:00:39.090
master and death,

00:00:39.090 --> 00:00:41.990
and currently we're on the master branch.

00:00:41.990 --> 00:00:43.110
Next,

00:00:43.110 --> 00:00:44.650
I'm going to log the history.

00:00:44.650 --> 00:00:53.130
So as the sea had points to both branches because the last thing that we did Waas merging

00:00:53.130 --> 00:00:54.170
off those branches.

00:00:54.170 --> 00:00:56.970
Now I'm going to switch to the branch.

00:00:56.970 --> 00:00:57.770
What's wrong?

00:00:57.770 --> 00:01:07.990
Get check out death and then let's make a couple of commits open script Js file and create

00:01:07.990 --> 00:01:09.290
a variable.

00:01:09.290 --> 00:01:18.380
Then make a new commit I'm going to use again get commit Desh am,

00:01:18.380 --> 00:01:25.940
which allows us to add file to the staging area and make the commit simultaneously as the

00:01:25.940 --> 00:01:27.450
message that's interfered,

00:01:27.450 --> 00:01:28.850
created variable,

00:01:28.850 --> 00:01:32.800
then love the history.

00:01:32.800 --> 00:01:36.560
Next,

00:01:36.560 --> 00:01:38.140
I'm going to make another commit.

00:01:38.140 --> 00:01:50.570
Let's create a function in Charles could file and then make a committee use again.

00:01:50.570 --> 00:01:51.290
Get committed.

00:01:51.290 --> 00:01:58.070
Tash am with a message created function and finally,

00:01:58.070 --> 00:01:59.350
let's around the history.

00:01:59.350 --> 00:02:04.020
All right,

00:02:04.020 --> 00:02:09.570
so now we made to commits and death branches to commit ahead off the massive brunch.

00:02:09.570 --> 00:02:15.810
Now suppose that someone else is working on the master branches well and is making some

00:02:15.810 --> 00:02:18.610
commits to imitate this process,

00:02:18.610 --> 00:02:25.950
I'm going to switch back to the massive branch that I'm going to make some changes in index

00:02:25.950 --> 00:02:27.200
dot html file.

00:02:27.200 --> 00:02:34.250
Let's create a span element where the content this is span out,

00:02:34.250 --> 00:02:40.100
then make a commit run again.

00:02:40.100 --> 00:02:40.940
Get commit.

00:02:40.940 --> 00:02:42.610
Yes,

00:02:42.610 --> 00:02:46.160
I am with message addict span element.

00:02:46.160 --> 00:02:49.390
And lastly,

00:02:49.390 --> 00:02:50.700
let's love the history.

00:02:50.700 --> 00:02:56.520
Now suppose that we want to merge those two branches.

00:02:56.520 --> 00:02:57.580
In this case,

00:02:57.580 --> 00:03:02.680
we will no longer have a fast forward merge because we've been working on both branches

00:03:02.680 --> 00:03:03.710
simultaneously.

00:03:03.710 --> 00:03:07.340
Let's go ahead and merge those two branches.

00:03:07.340 --> 00:03:10.080
Ron gets merge death.

00:03:10.080 --> 00:03:14.720
As you see,

00:03:14.720 --> 00:03:17.820
the new file is opened in our text editor,

00:03:17.820 --> 00:03:20.470
and also we got the hint in the terminal,

00:03:20.470 --> 00:03:26.750
saying that get is waiting to close this file in attitude so we don't have to do anything

00:03:26.750 --> 00:03:27.480
in this file.

00:03:27.480 --> 00:03:29.860
Let's live it as it is and just closed.

00:03:29.860 --> 00:03:34.230
So Murch is made successfully,

00:03:34.230 --> 00:03:37.070
but in this guise would have a different type of march,

00:03:37.070 --> 00:03:39.430
which is called Three Way Merche.

00:03:39.430 --> 00:03:41.390
Also as a C here.

00:03:41.390 --> 00:03:44.360
It was made by the recourse of strategy,

00:03:44.360 --> 00:03:48.460
which actually is the default strategy off three way merger.

00:03:48.460 --> 00:03:50.580
Let's love your history.

00:03:50.580 --> 00:03:53.940
So,

00:03:53.940 --> 00:03:57.340
as you see we have here new commit with the text merch,

00:03:57.340 --> 00:03:58.240
branch death.

00:03:58.240 --> 00:04:04.480
So now all the changes which we made on Death Branch are available on the master branches.

00:04:04.480 --> 00:04:11.800
But unlike the fast forward approach had points to master and not to both branches.

00:04:11.800 --> 00:04:15.220
The reason is that after making commits on the depth branch,

00:04:15.220 --> 00:04:17.980
we made a commit on the master branches ball,

00:04:17.980 --> 00:04:23.320
and that's why we see here just master next to head pointer and not both branches.

00:04:23.320 --> 00:04:25.870
If we switch to duck brunch,

00:04:25.870 --> 00:04:30.950
then this panel meant won't be available.

00:04:30.950 --> 00:04:32.070
And also,

00:04:32.070 --> 00:04:33.260
if we check the history,

00:04:33.260 --> 00:04:38.250
we will find on Lee the commits which were made on that branch.

00:04:38.250 --> 00:04:40.300
All right,

00:04:40.300 --> 00:04:45.070
Let's take a look at the diagram and see once again went three way merger cures.

00:04:45.070 --> 00:04:47.850
So when we create a new branch,

00:04:47.850 --> 00:04:53.920
Makesem commits on the branch and then someone else makes commit on the massive branch.

00:04:53.920 --> 00:04:59.450
It means that we no longer have fast forward merge and merge type is three way merger.

00:04:59.450 --> 00:05:04.050
So in this guy's get will check out if there are any conflicts in files,

00:05:04.050 --> 00:05:06.590
because people may work on the same files.

00:05:06.590 --> 00:05:08.340
If everything is OK,

00:05:08.340 --> 00:05:13.400
then that branch will merge to master and the commits will be placed in a sequence in

00:05:13.400 --> 00:05:13.900
history.

00:05:13.900 --> 00:05:19.520
So that's the case when three way merger cures all right.

00:05:19.520 --> 00:05:20.540
In some cases,

00:05:20.540 --> 00:05:22.660
there might be emerging conflicts.

00:05:22.660 --> 00:05:26.630
You have heard these terms several times and to learn what it means.

00:05:26.630 --> 00:05:28.000
Let's move on to the next lecture.

