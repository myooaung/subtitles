WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.160 --> 00:00:03.180
In the previous lab,

00:00:03.180 --> 00:00:08.310
we created the basic structure of our Python application for processing files.

00:00:08.310 --> 00:00:11.520
We created three different Python files,

00:00:11.520 --> 00:00:14.490
and we also created classes and instantiated

00:00:14.490 --> 00:00:18.180
them and invoke functions within those classes.

00:00:18.180 --> 00:00:22.035
Let's now understand an important concept called constructors.

00:00:22.035 --> 00:00:26.115
Using constructors, we can essentially class-level variables.

00:00:26.115 --> 00:00:28.860
So in the driver that by way of a driver program,

00:00:28.860 --> 00:00:31.455
and when we instantiate this class,

00:00:31.455 --> 00:00:34.695
by default, the default constructor gets invoked.

00:00:34.695 --> 00:00:39.060
We did not have to rate the default constructor when we are seeing Dr. program.

00:00:39.060 --> 00:00:42.684
And then parenthesis, it's calling a default constructor.

00:00:42.684 --> 00:00:45.420
Let's see how that looks.

00:00:45.520 --> 00:00:52.640
As soon as you type def init PyCharm auto-completes the default constructor.

00:00:52.640 --> 00:00:56.460
We can have a simple print statement here.

00:00:57.010 --> 00:01:00.090
Let's run the program.

00:01:00.520 --> 00:01:04.400
And you can see that I am within the constructor is getting invoked.

00:01:04.400 --> 00:01:06.965
We did not have to call the init method explicitly.

00:01:06.965 --> 00:01:09.095
When we instantiate the class,

00:01:09.095 --> 00:01:11.550
the constructor gets called.

00:01:14.350 --> 00:01:21.380
Now let's understand how to define class-level variables and use it throughout the class.

00:01:21.380 --> 00:01:26.420
We'll be using the file processing framework to process different kinds of files

00:01:26.420 --> 00:01:31.770
while instantiating the driver program will pass file type is an argument,

00:01:33.730 --> 00:01:36.695
will have a class level variable,

00:01:36.695 --> 00:01:40.760
file type, which will

00:01:40.760 --> 00:01:45.540
store the file type getting past when the constructor is getting invoked.

00:01:46.030 --> 00:01:50.340
And let's pass the file type here.

00:01:51.340 --> 00:01:58.265
Will pass CSV file tape and then store that to the class level variable file type.

00:01:58.265 --> 00:02:00.590
Now, we did the main function.

00:02:00.590 --> 00:02:06.480
We can determine which files that we need to process by using the class level variable.

00:02:06.580 --> 00:02:10.079
We can say you're processing.

00:02:10.810 --> 00:02:17.990
And then self.age file type, processing, file type.

00:02:17.990 --> 00:02:21.330
And then finally, let's run and see what happens.

00:02:21.580 --> 00:02:28.190
So we can see that the file type CSV got past and got assigned to a class level variable.

00:02:28.190 --> 00:02:31.850
The way to his any class level variable is by using self.

00:02:31.850 --> 00:02:36.740
And then we can use it anywhere in the class.

00:02:36.740 --> 00:02:40.160
All the function of the class will have access to this.

00:02:40.160 --> 00:02:44.285
We'll now move this code to the function within the driver program.

00:02:44.285 --> 00:02:46.820
Because from men will invoke the driver and then

00:02:46.820 --> 00:02:50.550
driver would subsequently invoke other fight and files.

00:02:51.880 --> 00:02:57.330
And wild calling FileReader will pass file type as a parameter.

00:03:00.640 --> 00:03:06.260
And let's modify FileReader to take that parameter.

00:03:06.260 --> 00:03:09.780
We live as similar Cortes David program

00:03:14.860 --> 00:03:17.970
will run the driver again.

00:03:18.610 --> 00:03:22.595
Firstly printed this within the driver program.

00:03:22.595 --> 00:03:25.294
Then it entered the FileReader constructor.

00:03:25.294 --> 00:03:27.920
After that it printed the reading a CSV file

00:03:27.920 --> 00:03:30.785
which is within the file reader read file function.

00:03:30.785 --> 00:03:33.320
And finally, it invokes storing data.

00:03:33.320 --> 00:03:35.510
Now when it comes to storing data,

00:03:35.510 --> 00:03:37.790
would be storing data in a Postgres table.

00:03:37.790 --> 00:03:40.715
So we'll specify that type here.

00:03:40.715 --> 00:03:45.450
First. Let's declare a constructor here.

00:03:46.360 --> 00:03:52.775
And we'll take BB type as a parameter.

00:03:52.775 --> 00:03:57.680
Let's have a print statement here and then self.age,

00:03:57.680 --> 00:04:01.430
BB type as DBT.

00:04:01.430 --> 00:04:08.100
And we'll say storing data to whatever is the DBT.

00:04:13.570 --> 00:04:17.555
Now within the driver program will pass to our database type.

00:04:17.555 --> 00:04:20.450
Let's pass Postgres.

00:04:20.450 --> 00:04:23.480
We can see that storing data to Postgres is

00:04:23.480 --> 00:04:25.820
getting printed within the purchase dot-dot-dot.

00:04:25.820 --> 00:04:30.200
And we can also see the print statement within the parses data constructor.

00:04:30.200 --> 00:04:36.630
So this is how you can use constructors in Python to initialize class level variables.
