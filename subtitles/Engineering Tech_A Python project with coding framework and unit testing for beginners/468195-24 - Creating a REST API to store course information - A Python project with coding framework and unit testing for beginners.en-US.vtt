WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.040 --> 00:00:04.050
In the previous lab, we created a risk and

00:00:04.050 --> 00:00:06.930
point using which we can fetch all the course information.

00:00:06.930 --> 00:00:10.890
Now let's create a rest endpoint using which we can post

00:00:10.890 --> 00:00:15.820
course information or insert course information to the course catalog.

00:00:15.950 --> 00:00:19.890
Let's create another end point called course.

00:00:19.890 --> 00:00:24.465
And this time we'll be sending data to the method table needs to be post.

00:00:24.465 --> 00:00:27.645
Let's have a function called Insert course.

00:00:27.645 --> 00:00:30.990
We have a function in the sys.path which reads

00:00:30.990 --> 00:00:34.320
a JSON object and inserts that to the database table.

00:00:34.320 --> 00:00:37.380
Let's use that for this demo.

00:00:37.380 --> 00:00:41.875
We'll first create a db object for the parses data class.

00:00:41.875 --> 00:00:46.400
Next we'll invoke right from JSON to PG function to insert data.

00:00:46.400 --> 00:00:50.330
It takes core stable and JSON as a parameter.

00:00:50.330 --> 00:00:53.180
Now when a user is interacting with this endpoint,

00:00:53.180 --> 00:00:56.030
the eugenics to post the JSON object in the request.

00:00:56.030 --> 00:01:00.575
And that'll be red here and the JSON string would be extracted.

00:01:00.575 --> 00:01:03.810
So let's see how that would work.

00:01:04.810 --> 00:01:07.670
Now using request dot get JSON,

00:01:07.670 --> 00:01:11.645
we can read the data and store it in a local variable.

00:01:11.645 --> 00:01:15.380
Let's also print it and see the output for our reference.

00:01:15.380 --> 00:01:18.170
So we'll read the JSON in past 30 days

00:01:18.170 --> 00:01:22.280
onto this function to store it in a database table.

00:01:22.280 --> 00:01:25.500
Let's stop and start it again.

00:01:28.750 --> 00:01:31.880
So now we have two endpoints exposed.

00:01:31.880 --> 00:01:34.655
One is to retrieve course information,

00:01:34.655 --> 00:01:37.745
and one is to store course information.

00:01:37.745 --> 00:01:43.140
Let's go to Postman and hit Send.

00:01:43.630 --> 00:01:46.650
This still works fine.

00:01:46.870 --> 00:01:53.010
Now we'll invoke the course you are in and change the request tape to post.

00:01:53.170 --> 00:01:58.520
And we also need to send the course JSON in the body.

00:01:58.520 --> 00:02:02.790
Let's copy it from the JSON file that we created earlier.

00:02:03.550 --> 00:02:14.900
Will change the values. And let's post it.

00:02:14.900 --> 00:02:17.900
We got an error, let's check it out.

00:02:17.900 --> 00:02:22.830
We did not have a return statement here, simply return success.

00:02:24.430 --> 00:02:32.255
And we'll stop and started. It's running again.

00:02:32.255 --> 00:02:36.390
We'll go to Postman and submit this request again.

00:02:37.150 --> 00:02:40.175
And we got success.

00:02:40.175 --> 00:02:43.880
Let's see if this new course got inserted.

00:02:43.880 --> 00:02:49.325
We can go to the history and get-go old request information from Postman here.

00:02:49.325 --> 00:02:52.050
We'll send a get request again.

00:02:54.790 --> 00:02:58.745
The course that we just inserted, it's showing off here.

00:02:58.745 --> 00:03:02.700
We can also verify the same in the database.

00:03:02.950 --> 00:03:06.030
Let's send another one.

00:03:08.620 --> 00:03:12.210
We'll call it new course six.

00:03:17.290 --> 00:03:24.170
Let's send it and go to the database and query it is showing up here.

00:03:24.170 --> 00:03:27.455
So this is how you can create an endpoint

00:03:27.455 --> 00:03:31.685
using which user can post the course information to your application.

00:03:31.685 --> 00:03:36.065
Earlier we created an endpoint to retrieve course information.

00:03:36.065 --> 00:03:38.600
Let's now see how to interact with

00:03:38.600 --> 00:03:43.440
the coarse endpoint to post-course information from a Python program.

00:03:44.590 --> 00:03:47.900
Let's declare a new variable called posterior.

00:03:47.900 --> 00:03:57.980
And now instead of saying request dot gate,

00:03:57.980 --> 00:04:00.950
will do request dot post.

00:04:00.950 --> 00:04:03.875
And we'll specify the URL.

00:04:03.875 --> 00:04:07.620
And we'll specify the course Jason.

00:04:07.720 --> 00:04:12.720
Now let's have a sample JSON string in the course Jason variable.

00:04:12.760 --> 00:04:15.515
Now we have this JSON string.

00:04:15.515 --> 00:04:18.185
Let's use it in the rest client.

00:04:18.185 --> 00:04:22.280
We need to remove all the extra spaces before we can paste it here.

00:04:22.280 --> 00:04:25.460
There are various online tools available using which

00:04:25.460 --> 00:04:28.205
you can remove extra spaces from your JSON string.

00:04:28.205 --> 00:04:30.320
Let's use code beautify.

00:04:30.320 --> 00:04:34.385
Simply paste the JSON string here and click Remove,

00:04:34.385 --> 00:04:37.309
recreate a string without spaces.

00:04:37.309 --> 00:04:41.690
Let's copy this string and use it in the wrist gland.

00:04:41.690 --> 00:04:45.695
Now let's create a JSON object from the string,

00:04:45.695 --> 00:04:49.430
will say json.dumps and then capture the string here.

00:04:49.430 --> 00:04:52.625
This should convert the string to a JSON object.

00:04:52.625 --> 00:04:55.890
We also need to import JSON here.

00:04:57.790 --> 00:05:04.700
Let's change the course name to something else and send the request.

00:05:04.700 --> 00:05:07.910
We need to have the post URL here.

00:05:07.910 --> 00:05:10.710
Let's correct the urine.

00:05:11.650 --> 00:05:15.030
And this time we got success.

00:05:15.730 --> 00:05:19.115
We can see that the new record has been inserted.

00:05:19.115 --> 00:05:23.910
So this is how you can send a post request from a Python program.
