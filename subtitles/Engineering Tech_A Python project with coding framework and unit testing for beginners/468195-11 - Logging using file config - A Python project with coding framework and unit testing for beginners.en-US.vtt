WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.770 --> 00:00:04.860
Let's now understand how to control the log level through a config file.

00:00:04.860 --> 00:00:10.680
It will create a directory called resources.

00:00:10.680 --> 00:00:15.330
Under that will keep all kind of resources including dot config file.

00:00:15.330 --> 00:00:18.435
Let's create another directory under Resources called

00:00:18.435 --> 00:00:23.740
conflicts and the under config file called login.com.

00:00:23.870 --> 00:00:26.925
First, we need to define the type of loggers.

00:00:26.925 --> 00:00:29.190
We'll start with root logger that we'll be using.

00:00:29.190 --> 00:00:30.405
The entire application.

00:00:30.405 --> 00:00:34.560
Subsequently will have different loggers for each apart python files next to it.

00:00:34.560 --> 00:00:35.790
To declare a handler.

00:00:35.790 --> 00:00:41.725
With handler, we can send output to either console or to e-mail or to some other channel.

00:00:41.725 --> 00:00:43.955
Trying out Console handler.

00:00:43.955 --> 00:00:45.050
Can this lab.

00:00:45.050 --> 00:00:50.370
Next we need to specify that route logger will be using the console handler.

00:00:50.440 --> 00:00:54.140
And to do that, we need to declare a property called

00:00:54.140 --> 00:00:57.170
Logger underscore root and then declared the handler.

00:00:57.170 --> 00:00:59.225
We can also specify the log level here.

00:00:59.225 --> 00:01:02.400
It could be debugging for error are running.

00:01:02.470 --> 00:01:07.610
Next we need to have a property called handler underscore console handler.

00:01:07.610 --> 00:01:09.710
And within that, we need to have a formatter.

00:01:09.710 --> 00:01:13.895
We also need to declare a formatter underscore sample formatter property,

00:01:13.895 --> 00:01:17.045
and then define in what format the log will get printed.

00:01:17.045 --> 00:01:20.330
We also need to define the format is a property

00:01:20.330 --> 00:01:24.650
here and specify the keys is humbled for murder.

00:01:24.650 --> 00:01:27.319
We'll go to the main application.

00:01:27.319 --> 00:01:32.240
Let's now understand how to use the property filing the logging framework.

00:01:32.240 --> 00:01:34.895
First we need to import logging dot config.

00:01:34.895 --> 00:01:37.340
Then instead of using the basic config,

00:01:37.340 --> 00:01:41.585
we'll use the config from the configuration file that we just created.

00:01:41.585 --> 00:01:46.400
And to do that we'll say login dot config, dot file config,

00:01:46.400 --> 00:01:51.380
and then specify the file path which would be related to the root directory.

00:01:51.380 --> 00:01:56.430
It would be slash resources, slash conflicts.

00:01:57.310 --> 00:02:01.910
The file name, which is login.com.

00:02:01.910 --> 00:02:04.160
And we can get rid of it.

00:02:04.160 --> 00:02:09.380
Let's same thing in other classes.

00:02:09.510 --> 00:02:13.400
Now we'll run it and see if it works fine.

00:02:13.890 --> 00:02:17.425
We also need to import logging dot config in,

00:02:17.425 --> 00:02:19.585
in just dot py and persistent by.

00:02:19.585 --> 00:02:21.040
Let's do that.

00:02:21.040 --> 00:02:23.980
We've got a key error that formatter doesn't exist.

00:02:23.980 --> 00:02:26.300
Let's check it out.

00:02:26.670 --> 00:02:29.620
We need to remove the slash here.

00:02:29.620 --> 00:02:33.850
It should be relative directory starting from the root directory, nurture, done fine.

00:02:33.850 --> 00:02:36.655
Make sure you do that in all the classes.

00:02:36.655 --> 00:02:39.265
Now we can see that nothing is getting printed.

00:02:39.265 --> 00:02:42.830
So let's understand how to control the log level here.

00:02:46.320 --> 00:02:49.245
The root login is defined as debug.

00:02:49.245 --> 00:02:52.280
That is getting overwritten by the console handler will

00:02:52.280 --> 00:02:56.400
set this to debug also and run it again.

00:02:57.100 --> 00:03:01.700
Now you can see that all the debug statements are getting printed.

00:03:01.700 --> 00:03:04.205
You have a root log level.

00:03:04.205 --> 00:03:05.840
And for each of your handler,

00:03:05.840 --> 00:03:09.470
you also have a log level which overweights third root log level.

00:03:09.470 --> 00:03:12.930
Let's put one in here and see what happens.

00:03:16.480 --> 00:03:20.120
Now nothing is getting printed, though.

00:03:20.120 --> 00:03:22.580
Handler overwrites the root log level.

00:03:22.580 --> 00:03:25.520
In this case, root is wanting log level which is higher

00:03:25.520 --> 00:03:28.865
than the debug log level set in the console handler.

00:03:28.865 --> 00:03:31.710
So that would take precedence.

00:03:32.890 --> 00:03:35.930
Let's change this to debug.

00:03:35.930 --> 00:03:40.640
And then we can control the logging level of the application using the console handler.

00:03:40.640 --> 00:03:43.950
This one, Let's set it to info.

00:03:45.250 --> 00:03:49.085
Now, anything higher than in Ford get printed.

00:03:49.085 --> 00:03:55.950
And we'll keep this debug for now so that we can see all the log statements.

00:03:55.960 --> 00:04:01.380
So this is how you can control logging level three configuration file.

00:04:01.420 --> 00:04:05.450
Now we used route logger for the entire application.

00:04:05.450 --> 00:04:07.610
In the next lab, we'll understand how to have

00:04:07.610 --> 00:04:11.310
different loggers for each of our Python files.
