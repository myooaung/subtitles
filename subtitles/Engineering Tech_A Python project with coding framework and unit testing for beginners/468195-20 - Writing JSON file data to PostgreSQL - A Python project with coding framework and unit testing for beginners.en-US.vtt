WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.420 --> 00:00:04.765
In the previous lab, we read course information from a JSON file.

00:00:04.765 --> 00:00:09.680
Now let's understand how to insert that data into the Postgres table.

00:00:10.050 --> 00:00:14.680
We have their data populated in the Read JSON variable.

00:00:14.680 --> 00:00:18.925
And within the sys.path will create a new method.

00:00:18.925 --> 00:00:25.730
Let's call it right from JSON to PZ.

00:00:27.990 --> 00:00:31.330
And we'll create a connection.

00:00:31.330 --> 00:00:33.950
Create a cursor.

00:00:37.830 --> 00:00:42.615
Apart from target table will also take JSON is a parameter.

00:00:42.615 --> 00:00:43.880
Let's call it course

00:00:43.880 --> 00:00:52.670
Jason will

00:00:52.670 --> 00:00:55.320
have an insert query is before.

00:00:58.510 --> 00:01:02.130
We'll also declared a tuple.

00:01:09.280 --> 00:01:11.840
This time instead of hard-coding,

00:01:11.840 --> 00:01:14.690
the course information will extract the values from the course.

00:01:14.690 --> 00:01:21.110
Jason will say course Jason.

00:01:21.110 --> 00:01:24.660
And we didn't bracket course name.

00:01:28.780 --> 00:01:32.630
It has to match with what is their invalidation file.

00:01:32.630 --> 00:01:35.130
Next, we love our third name.

00:01:38.350 --> 00:01:42.005
And we'll have core XN and cleared that.

00:01:42.005 --> 00:01:45.840
We also need the max course ID here.

00:01:55.840 --> 00:02:01.080
Finally, we'll execute the query and commit the connection.

00:02:02.440 --> 00:02:07.320
Let's now call this function from the store data function.

00:02:08.080 --> 00:02:12.840
We'll comment out the other two function invocation court.

00:02:16.570 --> 00:02:20.220
We need to pass the target table.

00:02:21.040 --> 00:02:24.810
And courts JSON.

00:02:27.250 --> 00:02:31.730
There are two ways you can pass the courses and from the driver program,

00:02:31.730 --> 00:02:34.250
either while calling the stored data method as

00:02:34.250 --> 00:02:37.700
an additional parameter or we can put it in the constructor code.

00:02:37.700 --> 00:02:40.950
Let's pass it as an additional parameter.

00:02:46.240 --> 00:02:49.245
Will go to a driver dot-dot-dot.

00:02:49.245 --> 00:02:53.780
And whatever Jason we are reading will pass that as a parameter.

00:02:55.050 --> 00:02:59.449
Let's have a print statement before we executed.

00:03:03.570 --> 00:03:07.190
Now let's run it and see the output.

00:03:10.170 --> 00:03:13.795
It says course NameNode defined.

00:03:13.795 --> 00:03:18.950
We need to put this JSON attributes within quotes.

00:03:27.330 --> 00:03:31.600
Now we got a different error while inserting to the caudate

00:03:31.600 --> 00:03:36.505
failed because core sections adjacent type and we're trying to insert a blank string.

00:03:36.505 --> 00:03:39.130
We can either convert this blank screen to

00:03:39.130 --> 00:03:44.020
JSON format or glitz Article Six 100 and JSON format.

00:03:44.020 --> 00:03:47.090
And then use that to insert the record.

00:03:50.130 --> 00:03:55.015
Let's go to JSON editor on lane and four core 67.

00:03:55.015 --> 00:03:56.500
Instead of having a blank value,

00:03:56.500 --> 00:03:58.285
we'll have another JSON.

00:03:58.285 --> 00:04:01.520
So you'll have a JSON within the Qishan.

00:04:02.640 --> 00:04:06.740
Now we'll use that JSON in our program.

00:04:10.230 --> 00:04:12.460
Now we got to mirror that,

00:04:12.460 --> 00:04:15.050
counted up the type dictionary.

00:04:16.390 --> 00:04:18.920
So within the parses dot py,

00:04:18.920 --> 00:04:20.825
we're reading the course section.

00:04:20.825 --> 00:04:24.060
Let's print the value of course section.

00:04:25.120 --> 00:04:28.355
The core six and is getting laid correctly.

00:04:28.355 --> 00:04:31.010
However, is getting treated as a dictionary,

00:04:31.010 --> 00:04:32.360
not as a JSON object,

00:04:32.360 --> 00:04:34.520
which our database field is expecting.

00:04:34.520 --> 00:04:36.500
To solve this issue.

00:04:36.500 --> 00:04:39.570
We can convert this to addition.

00:04:39.670 --> 00:04:42.960
Let's import JSON here.

00:04:44.140 --> 00:04:47.525
Now instead of saying core 67,

00:04:47.525 --> 00:04:49.400
now we'll say json.dumps,

00:04:49.400 --> 00:04:53.795
which will convert this to a JSON object and pass it to the database query.

00:04:53.795 --> 00:04:55.650
Let's see that.

00:04:56.500 --> 00:05:00.090
Now it got inserted correctly.

00:05:01.750 --> 00:05:04.940
Let's query the database to find out.

00:05:04.940 --> 00:05:08.090
We can see a new entry with the name new

00:05:08.090 --> 00:05:12.155
course and the course 600 details that we just entered.

00:05:12.155 --> 00:05:15.630
Let's modify the value and try again.

00:05:23.470 --> 00:05:26.255
You've got executed successfully,

00:05:26.255 --> 00:05:28.130
will create the table again.

00:05:28.130 --> 00:05:32.930
We can see the new entry is that we can read data from

00:05:32.930 --> 00:05:38.520
a JSON file to Python program and then use that to insert to a database table.
