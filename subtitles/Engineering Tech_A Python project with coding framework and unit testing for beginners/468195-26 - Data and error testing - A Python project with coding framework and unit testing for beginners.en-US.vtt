WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.860 --> 00:00:06.790
Let's now our taste to one of the functions we created under purchased dot-dot-dot.

00:00:07.370 --> 00:00:10.080
Let's unit test this function.

00:00:10.080 --> 00:00:12.810
The idea behind the unit test is we should be able to taste

00:00:12.810 --> 00:00:16.169
this function without running the entire application.

00:00:16.169 --> 00:00:19.170
So we need to look at what are the parameters the function is

00:00:19.170 --> 00:00:22.005
expecting and what is the output parameter.

00:00:22.005 --> 00:00:26.700
So this function expects the table name and it returns the records.

00:00:26.700 --> 00:00:29.250
So let's write a test for it.

00:00:29.250 --> 00:00:32.325
Will remove the taste that we tried earlier.

00:00:32.325 --> 00:00:36.840
And wherever test to test the read from PZ function.

00:00:36.840 --> 00:00:42.220
And within that, we can invoke the function and paste if it is working fine or not.

00:00:42.220 --> 00:00:46.565
First, we need to create an object for the purchase data class.

00:00:46.565 --> 00:00:51.245
After that, we can invoke the read from PC function,

00:00:51.245 --> 00:00:53.105
passing the table name.

00:00:53.105 --> 00:00:56.150
We need to import the purchase dot py here.

00:00:56.150 --> 00:01:00.510
So from the folder name import, persist.

00:01:01.480 --> 00:01:04.090
Now if we just run it,

00:01:04.090 --> 00:01:06.680
it will run fine and the taste would pass.

00:01:06.680 --> 00:01:08.885
Though we're not doing any S dot here,

00:01:08.885 --> 00:01:14.450
but you can add a search statement to check the data that is getting returned here.

00:01:14.450 --> 00:01:19.910
Let's print the first record in courses and see what are the values in that.

00:01:19.910 --> 00:01:23.870
The first item in the catalog contents Hadoop Spark.

00:01:23.870 --> 00:01:27.155
If we know that this is not going to change,

00:01:27.155 --> 00:01:30.395
then we can extract one of these values and do a assertEquals.

00:01:30.395 --> 00:01:35.195
For example, let's print the second item in this tuple that is at index one.

00:01:35.195 --> 00:01:38.280
And that should be Hadoop Spark.

00:01:38.710 --> 00:01:42.065
And then we can write an assert equal here.

00:01:42.065 --> 00:01:44.195
It would be self.age, assert equal.

00:01:44.195 --> 00:01:49.650
And then we can compare this with the stream Hadoop Spark.

00:01:54.520 --> 00:01:57.660
Let's run the test again.

00:01:58.360 --> 00:02:00.440
So this ran fine.

00:02:00.440 --> 00:02:05.315
If we change it to something else and rerun.

00:02:05.315 --> 00:02:09.510
This time the test failed because the comparison fed.

00:02:09.910 --> 00:02:13.595
This is one way of testing your particular function.

00:02:13.595 --> 00:02:16.190
But if we know that this course name might

00:02:16.190 --> 00:02:19.220
change or your catalog might get modified in new Minard,

00:02:19.220 --> 00:02:21.545
get a Hadoop Spark is the first course,

00:02:21.545 --> 00:02:26.010
then you cannot have this because in that case your test would fail.

00:02:26.020 --> 00:02:30.680
Another thing that you could try to seek the length of the tuple,

00:02:30.680 --> 00:02:32.570
though your catalog might change,

00:02:32.570 --> 00:02:37.235
but number of elements in a catalog that might not change very frequently.

00:02:37.235 --> 00:02:40.640
Length of the course tuple gives you number of elements

00:02:40.640 --> 00:02:44.750
and you can verify whether it matches with the expected number of elements.

00:02:44.750 --> 00:02:48.200
Let's run it and see the output.

00:02:48.200 --> 00:02:50.915
So the length, of course, tuple is five.

00:02:50.915 --> 00:02:53.760
Let's do an assert equal here.

00:02:54.190 --> 00:02:56.674
We would say assertEquals,

00:02:56.674 --> 00:02:58.505
length up courts tuple,

00:02:58.505 --> 00:03:00.635
and then compare that with five.

00:03:00.635 --> 00:03:02.930
Now our page should pass.

00:03:02.930 --> 00:03:07.700
Let's run it. We can see that the test passed.

00:03:07.700 --> 00:03:09.770
Let's write a second test,

00:03:09.770 --> 00:03:13.535
what this function will call it tastes read from PC2,

00:03:13.535 --> 00:03:17.400
will give an invalidate the table name.

00:03:18.430 --> 00:03:21.540
Let's run this test.

00:03:23.470 --> 00:03:32.810
We got an exception that the table doesn't exist and the error is undefined table.

00:03:32.810 --> 00:03:36.665
So this is the expected behavior because the table name doesn't exist.

00:03:36.665 --> 00:03:39.545
Your function might throw all kind of errors.

00:03:39.545 --> 00:03:41.135
If it is throwing a valid error,

00:03:41.135 --> 00:03:45.035
then that is expected behavior and you should be able to taste that.

00:03:45.035 --> 00:03:49.430
You can check for any error using self.age assert ridges.

00:03:49.430 --> 00:03:53.460
Then you specify the error name which is undefined table.

00:03:54.040 --> 00:03:57.720
Then we'll call this function here.

00:03:59.860 --> 00:04:03.605
Also, this error name is not getting recognized.

00:04:03.605 --> 00:04:07.160
So let's import psycopg2 and will give

00:04:07.160 --> 00:04:12.540
the package name and also the class name that is psycopg2 errors are different table.

00:04:14.320 --> 00:04:19.910
Now when we run it, read from P2 through our defined table error,

00:04:19.910 --> 00:04:21.800
which will be recognized here.

00:04:21.800 --> 00:04:23.555
And our test would pass.

00:04:23.555 --> 00:04:25.530
Let's run it.

00:04:25.690 --> 00:04:28.950
And our test passed.

00:04:29.170 --> 00:04:34.805
So this is how you can check for different kinds of errors within your Python function.

00:04:34.805 --> 00:04:37.040
And if the function throws a valid error,

00:04:37.040 --> 00:04:39.140
then you can make your test pass.

00:04:39.140 --> 00:04:42.620
Let's now run both artists. In one test.

00:04:42.620 --> 00:04:43.985
We're doing a data validation.

00:04:43.985 --> 00:04:48.330
In the other test we are checking if the function is stringer valid or not.
