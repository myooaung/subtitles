WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.260 --> 00:00:02.970
Let's now understand how to create

00:00:02.970 --> 00:00:06.810
a rest endpoint to retrieve all the course information.

00:00:06.810 --> 00:00:09.840
Python is a popular web framework called Flask,

00:00:09.840 --> 00:00:12.465
using which we can easily build rest EPA's.

00:00:12.465 --> 00:00:14.490
Let's see how that works.

00:00:14.490 --> 00:00:18.730
First, we need to import Flask and request object.

00:00:22.910 --> 00:00:27.420
We need to ensure flask is added to the Python interpreter.

00:00:27.420 --> 00:00:30.280
Let's go to File Settings.

00:00:32.600 --> 00:00:40.230
We'll click on the plus sign here and select flask and install.

00:00:40.510 --> 00:00:43.925
Flask got installed successfully.

00:00:43.925 --> 00:00:46.710
Let's close this.

00:00:46.900 --> 00:00:50.250
Now the error has gone away.

00:00:50.710 --> 00:00:53.345
Now to create a flask endpoint,

00:00:53.345 --> 00:00:55.710
we first need to create an app.

00:00:55.840 --> 00:01:00.320
Then using app, we need to define the end points.

00:01:00.320 --> 00:01:06.300
Let's first have a gated point using which will retrieve all the course information.

00:01:06.520 --> 00:01:09.530
Will declared slash courses,

00:01:09.530 --> 00:01:13.890
which will then point the URI to get course information.

00:01:13.990 --> 00:01:17.225
And the meter type would be good.

00:01:17.225 --> 00:01:25.100
Let's have a method. Courses. Good courses will be mapped to the last courses you array.

00:01:25.100 --> 00:01:31.715
The function name doesn't matter as long as it is defined after the approved definition.

00:01:31.715 --> 00:01:35.850
It will get triggered when slash courses you are releasing book.

00:01:36.430 --> 00:01:42.260
Here we can create a new method or we can connect to parses don't buy read from PC to get

00:01:42.260 --> 00:01:51.860
the course information will create a new object, db object.

00:01:51.860 --> 00:01:56.670
This will be an instance of dog persist data class.

00:01:56.710 --> 00:02:00.410
Will invoke read from PC function of db object.

00:02:00.410 --> 00:02:03.000
To get this information.

00:02:03.760 --> 00:02:06.365
Let's go to that function.

00:02:06.365 --> 00:02:10.710
And are they return statement to return the records.

00:02:12.640 --> 00:02:18.275
Back in the graduate program will store the return value GenEd courses variable.

00:02:18.275 --> 00:02:23.910
Next we'll return the courses to the client, invoking this APA.

00:02:23.920 --> 00:02:27.300
Let's append some text to it.

00:02:27.940 --> 00:02:31.730
Courses are, and then the courses variable,

00:02:31.730 --> 00:02:34.110
which will have all the courses.

00:02:36.700 --> 00:02:41.150
Next, let's make some changes to the main function.

00:02:41.150 --> 00:02:44.340
Will commend the old code.

00:02:45.190 --> 00:02:49.730
And we'll simply say Update run that would start the up.

00:02:49.730 --> 00:02:52.745
At a particular port. I have defined a 1000 five,

00:02:52.745 --> 00:02:55.170
but you can have any port here.

00:02:55.270 --> 00:02:57.770
When the program starts.

00:02:57.770 --> 00:02:59.990
This will launch a Flask app.

00:02:59.990 --> 00:03:02.435
It port in 2005.

00:03:02.435 --> 00:03:06.770
And it would expose an endpoint using which all the course information can

00:03:06.770 --> 00:03:11.490
be retrieved. Let's run this.

00:03:13.630 --> 00:03:15.965
The app is started.

00:03:15.965 --> 00:03:18.410
We can see a misses that it's running it.

00:03:18.410 --> 00:03:21.830
Localhost 8,500, 2700, 0,

00:03:21.830 --> 00:03:25.595
1 maps to the local IP of this machine.

00:03:25.595 --> 00:03:28.650
Let's go to a browser.

00:03:28.690 --> 00:03:32.430
We need to put slash courses here.

00:03:34.330 --> 00:03:39.920
And we got an error that missing one required positional argument target table.

00:03:39.920 --> 00:03:43.025
This method expects that target table.

00:03:43.025 --> 00:03:46.170
Let's simply hard-coded for now.

00:03:52.210 --> 00:03:55.380
We'll stop and read on it.

00:03:55.720 --> 00:03:58.970
It's running again at 48000 five.

00:03:58.970 --> 00:04:01.620
Let's refresh the page.

00:04:03.760 --> 00:04:07.955
It says cannot concatenate lists to screen.

00:04:07.955 --> 00:04:10.775
Python is dynamically typed.

00:04:10.775 --> 00:04:14.600
Many typewriters will not be known until the program is executed.

00:04:14.600 --> 00:04:18.920
It will convert the courses to stream before returning.

00:04:18.920 --> 00:04:22.080
It will stop and read on it.

00:04:23.830 --> 00:04:27.840
It is again running at port 8,005.

00:04:27.910 --> 00:04:32.520
Now we can see that the course information is getting phased.

00:04:32.710 --> 00:04:36.935
We can also make a rest call using the postman.

00:04:36.935 --> 00:04:41.070
Let's search what Postman tool installation.

00:04:45.610 --> 00:04:49.905
Download the right version for your operating system.

00:04:49.905 --> 00:04:54.865
Once downloaded, click on the EXE to install Postman,

00:04:54.865 --> 00:04:57.205
then magically get loaded.

00:04:57.205 --> 00:05:01.430
You can sign up using your Gmail ID.

00:05:01.950 --> 00:05:05.510
Let's open Postman again.

00:05:05.850 --> 00:05:09.535
Now let's create a new request.

00:05:09.535 --> 00:05:15.700
In Postman, we need to capture the URL and specify the request tape.

00:05:15.700 --> 00:05:23.170
Let's capture the URL up dab that we just launched in the local environment and change

00:05:23.170 --> 00:05:32.690
the request tape to get click Send.

00:05:34.240 --> 00:05:37.620
We can see the output here.

00:05:38.230 --> 00:05:42.905
We can also create a risk gland to face this information.

00:05:42.905 --> 00:05:45.720
Let's create a new project.

00:05:46.150 --> 00:05:49.530
We'll call it risk gland.

00:05:49.600 --> 00:05:52.820
Let's get rid of all this code.

00:05:52.820 --> 00:05:55.610
We need to import requests.

00:05:55.610 --> 00:05:58.520
Then let's declare the URL and we'll

00:05:58.520 --> 00:06:02.270
point it to the court says endpoint that we just created.

00:06:02.270 --> 00:06:05.630
We need to make sure request is important.

00:06:05.630 --> 00:06:09.980
Using requests package we can send and receive HTTP request.

00:06:09.980 --> 00:06:13.175
We need to ensure that is added to the Python environment.

00:06:13.175 --> 00:06:15.840
Let's go to File Settings.

00:06:16.390 --> 00:06:18.470
In the Python interpreter.

00:06:18.470 --> 00:06:20.609
Let's are the requests.

00:06:22.960 --> 00:06:26.580
Will select it and say install.

00:06:27.880 --> 00:06:32.430
Your day's been installed successfully. Let's close this.

00:06:34.960 --> 00:06:37.580
Now that error has gone away.

00:06:37.580 --> 00:06:41.990
Next, we'll invoke the rest service using requests dot get.

00:06:41.990 --> 00:06:44.790
And we'll specify the URL.

00:06:47.530 --> 00:06:50.165
And whatever response we get,

00:06:50.165 --> 00:06:57.630
we'll print that. Let's run it.

00:07:00.910 --> 00:07:04.310
We got a response to a 100.

00:07:04.310 --> 00:07:06.710
So that means it's able to access it.

00:07:06.710 --> 00:07:11.490
Now we'll do a response dot txt to print the contents.

00:07:13.570 --> 00:07:19.110
We can see that the course information is getting face can getting displayed here.

00:07:20.020 --> 00:07:23.240
So this though, we can create a rest endpoint and

00:07:23.240 --> 00:07:26.645
expose your course information to the outside world.

00:07:26.645 --> 00:07:30.424
You do not need to give people direct access to a database.

00:07:30.424 --> 00:07:35.280
They can just hit the URL and retrieve all the courses.
