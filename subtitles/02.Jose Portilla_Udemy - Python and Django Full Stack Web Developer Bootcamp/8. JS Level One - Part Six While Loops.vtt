WEBVTT
1
00:00:04.960 --> 00:00:11.810
Hello everyone and welcome to part six while loops so let's learn a bit about while loops and javascript's

2
00:00:12.020 --> 00:00:13.340
and loops in general.

3
00:00:13.370 --> 00:00:18.920
Allow us to automatically repeat blocks of code and the while loop will continually execute code as

4
00:00:18.920 --> 00:00:20.740
long as condition remains true.

5
00:00:21.040 --> 00:00:25.070
And like I mentioned for the previous lecture if you're already familiar five loops from another programming

6
00:00:25.070 --> 00:00:30.230
language you may just want to check the notes for this lecture and just reference the syntax changes

7
00:00:30.230 --> 00:00:30.950
yourself.

8
00:00:31.990 --> 00:00:35.450
OK in case you're new to a WHILE loop Let's see what it actually looks like.

9
00:00:35.470 --> 00:00:37.330
So in Javascript the while loop looks like this.

10
00:00:37.330 --> 00:00:42.970
You say the keyword while and then print sees you have some sort of condition and then inside the curly

11
00:00:42.970 --> 00:00:48.550
brackets you execute some code and that code is going to be continually executed while that condition

12
00:00:48.550 --> 00:00:54.280
is true and something to be careful with while loops is if you have a condition that will always remain

13
00:00:54.280 --> 00:01:00.250
true no matter what the that while loop will execute forever and that may lead to buggy code because

14
00:01:00.250 --> 00:01:04.080
your while loop just never breaks it always stays running forever.

15
00:01:04.510 --> 00:01:06.100
OK let's see some actual examples.

16
00:01:06.100 --> 00:01:11.470
And we're also going to learn about a few key words such as the break word which will break out of a

17
00:01:11.470 --> 00:01:13.720
top level block of code.

18
00:01:13.720 --> 00:01:15.650
Let's jump to her editor to get started.

19
00:01:15.950 --> 00:01:22.490
OK so just like last time I have an HMO I'll script that's connected to my javascript this my script

20
00:01:22.490 --> 00:01:27.260
that Jap's and that in turn has HDMI connected to this browser.

21
00:01:27.550 --> 00:01:35.190
So let's get started with a very simple while example going to create a variable called X and set it

22
00:01:35.190 --> 00:01:36.510
equal to zero.

23
00:01:36.920 --> 00:01:39.830
And then I can begin typing while enter.

24
00:01:40.050 --> 00:01:42.260
Adam helps me out the rest of the context.

25
00:01:42.420 --> 00:01:46.890
So I say a while x is less than 5.

26
00:01:46.900 --> 00:01:48.670
That's the condition I want.

27
00:01:48.670 --> 00:01:50.630
I'm going to perform some action.

28
00:01:50.800 --> 00:02:03.760
I will log x is currently and then I'm going to say plus X here so that prints out and then I'm also

29
00:02:03.760 --> 00:02:18.330
going to log x is still less than 5 adding one to X and then finally to make sure this doesn't run forever.

30
00:02:18.330 --> 00:02:23.130
I'm going to say x is equal to x plus 1.

31
00:02:23.130 --> 00:02:26.460
So before we run this let's break down what's actually happening here.

32
00:02:26.460 --> 00:02:28.360
I start off with X equals zero.

33
00:02:28.380 --> 00:02:31.770
This is outside this while loop than inside this while loop.

34
00:02:31.770 --> 00:02:38.180
I'll say while X is less than 5 I want you to execute this block of code in the first block of code

35
00:02:38.180 --> 00:02:42.870
or the first line of code on line 4 says just X is currently and then whatever the current number of

36
00:02:42.870 --> 00:02:46.900
x's and then as long as X is still less than 5.

37
00:02:46.900 --> 00:02:47.810
My condition.

38
00:02:47.810 --> 00:02:48.930
I'll also log.

39
00:02:49.090 --> 00:02:50.450
X is still less than 5.

40
00:02:50.490 --> 00:02:53.670
Adding one to X and then finally on line 7.

41
00:02:53.670 --> 00:02:55.690
I'll say x is equal to x plus 1.

42
00:02:55.710 --> 00:03:03.230
So I re-assign X to the current X plus 1 and also show you later on some syntax to have a shortcut.

43
00:03:03.270 --> 00:03:09.660
Doing this sort of operation will save that and let's run a browser or a refresher browser page here

44
00:03:10.230 --> 00:03:11.010
and see what we get.

45
00:03:11.010 --> 00:03:12.070
So we get a lot of output.

46
00:03:12.120 --> 00:03:14.310
Let's expand this and see what's happening here.

47
00:03:14.580 --> 00:03:16.020
So I get X is currently zero.

48
00:03:16.020 --> 00:03:17.010
That makes sense.

49
00:03:17.010 --> 00:03:18.200
So it's still less than 5.

50
00:03:18.230 --> 00:03:23.260
Add 1 2 x x currently 1 and this keeps going all the way until it prints out.

51
00:03:23.400 --> 00:03:24.860
X is currently 4.

52
00:03:25.200 --> 00:03:27.420
Which makes sense if X is currently 4.

53
00:03:27.420 --> 00:03:28.150
I would log.

54
00:03:28.220 --> 00:03:30.780
X is still less than 5 adding 1 to x.

55
00:03:30.870 --> 00:03:38.270
And note that once I add 1 to X then X becomes 5 and 5 is no longer less than 5 it's equal to 5.

56
00:03:38.340 --> 00:03:40.160
So the while loop stops operating.

57
00:03:40.200 --> 00:03:45.830
Which is why we never see X is currently fired and that's the very basics of how a while loop works.

58
00:03:46.150 --> 00:03:53.370
OK now let's add in some manual brake conditions which will exit out of the loop and it's going to use

59
00:03:53.370 --> 00:03:55.120
the keyword break.

60
00:03:55.140 --> 00:03:58.690
So right now I start with variable x is equal to zero.

61
00:03:58.740 --> 00:04:07.500
I'll say while X is less than 5 and I'm going to cancel again log x is currently X and then here I'm

62
00:04:07.500 --> 00:04:10.140
going to add in some control flow with an if statement

63
00:04:13.210 --> 00:04:30.250
and I will say if x is equal to 3 I'm going to log x is equal to three and that's all different now.

64
00:04:30.280 --> 00:04:32.480
So let's run this code again and see what happens.

65
00:04:35.070 --> 00:04:38.450
So looks like very much the same code 0 1 2 3.

66
00:04:38.460 --> 00:04:44.730
Except when X is currently 3 before I say X is less than 5 I get this big announcement x is equal to

67
00:04:44.730 --> 00:04:45.680
3.

68
00:04:45.690 --> 00:04:51.450
Now let's actually try to break the while loop on this certain condition and then we can do that is

69
00:04:51.510 --> 00:04:55.910
by adding in the special key word break.

70
00:04:56.160 --> 00:04:58.310
And this will break out of the top level loop.

71
00:04:58.320 --> 00:05:04.980
It's in basically what says what this is saying is if x is equal to three log this and then break out

72
00:05:04.980 --> 00:05:08.290
of the top level loop you find this key word in.

73
00:05:08.370 --> 00:05:09.690
And it happens to be this while.

74
00:05:09.780 --> 00:05:16.160
So let's save this expand this and refresh the page.

75
00:05:16.160 --> 00:05:20.430
And now we see when I refresh it stops at this as x is equal to three line.

76
00:05:20.570 --> 00:05:24.530
So it says x is equal to 3 and then it breaks out of that while loop.

77
00:05:24.530 --> 00:05:30.110
And that's how we can use the keyword break to essentially prematurely break out of a while loop so

78
00:05:30.110 --> 00:05:34.500
that we don't have to wait until this condition is actually meant to be false.

79
00:05:34.640 --> 00:05:36.840
And that's really all there is to the While loop.

80
00:05:36.950 --> 00:05:38.500
We'll use it later on in the course.

81
00:05:38.510 --> 00:05:45.140
But as a quick exercise I want you to do this right a while loop that prints out only the even numbers

82
00:05:45.140 --> 00:05:46.650
from 1 to 10.

83
00:05:47.000 --> 00:05:51.480
So again just to clarify what I want you to do right now.

84
00:05:51.510 --> 00:05:59.950
All right in here as a comments write a while loop prints out only the even numbers from 1 to 10.

85
00:05:59.990 --> 00:06:05.860
OK so positivity You see if you can do it on your own and then I'm going to write out the solution for

86
00:06:05.860 --> 00:06:06.890
this question.

87
00:06:07.000 --> 00:06:11.300
Just write a while loop that prints out only the even numbers from 1 to 10.

88
00:06:11.300 --> 00:06:13.680
OK so let's get started with this.

89
00:06:14.720 --> 00:06:17.790
I'm going to clear everything I have here my editor.

90
00:06:17.900 --> 00:06:23.700
Hopefully you were able to actually do this yourself or at least attempt it yourself.

91
00:06:23.990 --> 00:06:25.380
But everything is clear.

92
00:06:25.400 --> 00:06:26.430
So let's try it out.

93
00:06:26.600 --> 00:06:27.020
OK.

94
00:06:27.020 --> 00:06:30.270
So let's see how we can attempt to solve this problem.

95
00:06:30.290 --> 00:06:36.010
First thing I'm going to do is create a variable called numb and started off equal to 1.

96
00:06:36.160 --> 00:06:40.410
Then I'm going to create my while loop and I want to go from numbers 1 to 10.

97
00:06:40.480 --> 00:06:48.770
So I will say while my number is less than 11 and let's just start off with a very simple example I

98
00:06:48.770 --> 00:06:57.070
will log the number and then say num is equal to nonplus 1 saved this.

99
00:06:57.100 --> 00:06:58.480
And let's see if this works.

100
00:06:58.560 --> 00:07:04.940
Refresh the page and here I get all the numbers from 1 to 10 but the assignment is to only print out

101
00:07:04.940 --> 00:07:05.830
these even numbers.

102
00:07:05.840 --> 00:07:11.300
So I need some sort of method to check the numbers even and hopefully you remember from the number or

103
00:07:11.300 --> 00:07:18.390
the very basics of javascript lecture the very first javascript lecture we touch you the maade operator.

104
00:07:18.530 --> 00:07:28.920
So I'm going to say if numb model 2 is equal to zero then I can do something and I know that the number

105
00:07:28.920 --> 00:07:29.440
is even.

106
00:07:29.470 --> 00:07:33.040
So I will walk that number.

107
00:07:33.040 --> 00:07:34.310
So what does that actually mean.

108
00:07:34.330 --> 00:07:37.220
Well remember that model checks for remainder.

109
00:07:37.390 --> 00:07:42.650
And I know if the number divided by two leaves the remainder equal to zero.

110
00:07:42.700 --> 00:07:44.030
And that number is even.

111
00:07:44.200 --> 00:07:46.230
So Six divided by two has no remainder.

112
00:07:46.240 --> 00:07:48.770
Eight divided by two is the remainder etc..

113
00:07:49.000 --> 00:07:49.750
OK.

114
00:07:50.170 --> 00:07:52.990
And then lastly I want to make sure this doesn't run forever.

115
00:07:53.230 --> 00:08:01.860
So outside of that if I'm going to say Num. is equal to 1 so let's say that and see if our first page

116
00:08:01.860 --> 00:08:03.150
it works.

117
00:08:03.150 --> 00:08:05.750
And there we have it two four six eight 10.

118
00:08:05.910 --> 00:08:09.970
And those are all the even numbers from 1 to 10 Using a while loop.

119
00:08:10.020 --> 00:08:10.770
Take your time.

120
00:08:10.800 --> 00:08:16.220
This was a little confusing for you and some key things to remember here is this Ma'at operator.

121
00:08:16.260 --> 00:08:21.150
This is a really common way to check of the numbers even and also key to this is to remember to increase

122
00:08:21.150 --> 00:08:25.370
the number and to remember to increase the number outside of the if statement.

123
00:08:25.500 --> 00:08:29.820
If you only had it inside of this statement that would cause problems because you would only be adding

124
00:08:29.830 --> 00:08:31.390
one if the number was even.

125
00:08:31.470 --> 00:08:37.050
You want to do it on the odd numbers and you can tell if something is within the block using these clearly

126
00:08:37.050 --> 00:08:40.680
brackets as indicators and indentation for javascript.

127
00:08:40.710 --> 00:08:44.970
Doesn't matter a whole lot although you should try to keep code readable and clean later on when we

128
00:08:44.970 --> 00:08:48.670
talk about Python indentation is going to be a huge aspect of it.

129
00:08:48.860 --> 00:08:49.560
OK.

130
00:08:49.650 --> 00:08:52.520
So thanks everyone and I will see you at the next lecture.

131
00:08:52.530 --> 00:08:54.930
We're going to begin to discuss for loops.

132
00:08:54.990 --> 00:08:55.950
I'll see you there.
