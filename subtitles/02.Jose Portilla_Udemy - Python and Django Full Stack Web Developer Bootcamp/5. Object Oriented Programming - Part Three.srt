1
00:00:04,950 --> 00:00:05,470
Hello everyone.

2
00:00:05,470 --> 00:00:10,500
Welcome back to where we left off last time and this lecture will be discussing two topics inheritance

3
00:00:10,590 --> 00:00:11,960
and special methods.

4
00:00:12,090 --> 00:00:17,330
Inheritance is a way to form new classes using older classes that have already been defined that way.

5
00:00:17,330 --> 00:00:22,710
The newly formed classes are called derived classes and the classes that we derive from are called the

6
00:00:22,710 --> 00:00:23,830
base classes.

7
00:00:23,890 --> 00:00:29,640
So you derive from the base class important benefits of inheritance our code reuse and reduction in

8
00:00:29,640 --> 00:00:34,370
the complexity of a program that we don't have to constantly be creating duplicate classes.

9
00:00:34,410 --> 00:00:39,470
You can just inherit from another class and use some of the methods that are available there.

10
00:00:39,480 --> 00:00:41,500
So let's see an example of this.

11
00:00:41,690 --> 00:00:49,350
I'm going to create a base class and this base class is going to be called Animal class in the Animal

12
00:00:49,350 --> 00:00:52,120
class it needs its initialization method.

13
00:00:52,230 --> 00:00:54,640
That's a special method in it.

14
00:00:55,080 --> 00:01:03,140
And here we'll just have self and then we'll say Prince animal created so we're doing very very simple

15
00:01:03,140 --> 00:01:05,830
class just to show kind of the idea behind inheritance.

16
00:01:05,870 --> 00:01:09,590
Usually you won't have a print statement inside of the initialization method.

17
00:01:09,620 --> 00:01:14,020
You'll just have self-taught and then all your attribute assignments then I'm going to create another

18
00:01:14,060 --> 00:01:20,820
method called Who am I will call itself.

19
00:01:21,090 --> 00:01:26,890
And then this is going to print animal.

20
00:01:27,120 --> 00:01:29,390
And then here and going say eat.

21
00:01:29,670 --> 00:01:38,770
This will also take in self and then this will just prints eating that needs to be a string.

22
00:01:38,770 --> 00:01:39,110
All right.

23
00:01:39,120 --> 00:01:42,930
So a very simple class it just prints things when you call these two methods on it.

24
00:01:42,930 --> 00:01:44,340
It prints something else.

25
00:01:44,520 --> 00:01:47,610
So it's actually kind of play around with this and explore a little bit.

26
00:01:47,610 --> 00:01:57,590
I'll make an animal we'll call it say my A is equal to animal instantiate that and then let's have it

27
00:01:57,600 --> 00:02:01,490
say something like my a dot.

28
00:02:01,720 --> 00:02:03,180
Who am I.

29
00:02:03,250 --> 00:02:06,100
And then my A thought it.

30
00:02:06,190 --> 00:02:11,420
And no I don't have to wrap this in print because the prince is already inside of these two methods.

31
00:02:11,500 --> 00:02:13,700
So it's called Python those pie.

32
00:02:13,780 --> 00:02:16,910
And I see here animal and eating perfect.

33
00:02:16,930 --> 00:02:17,240
All right.

34
00:02:17,260 --> 00:02:21,550
Now let's say I want to create a new class of dog.

35
00:02:22,580 --> 00:02:27,630
Now all dogs are animals so I want to inherit from the base class of animal.

36
00:02:27,740 --> 00:02:33,890
So I'm going to do here is instead of just passing nothing in these princes I will pass in the other

37
00:02:33,890 --> 00:02:37,170
class which was animal and I don't have clothes princess here.

38
00:02:37,250 --> 00:02:47,550
I'm just passing the whole class in there and then I'm going to say the F in it's essence self.

39
00:02:47,670 --> 00:02:51,400
And then one actually creates the initialization.

40
00:02:51,600 --> 00:03:05,470
I'm going to call animal dot in its And then pasand self here and then I'm going to Prince dog created

41
00:03:07,520 --> 00:03:14,850
so will save this and then notice when I ran this first time it said animal created animal eating.

42
00:03:15,040 --> 00:03:20,000
So that was for when I created an animal that animal created when I said who it's that animal.

43
00:03:20,020 --> 00:03:24,070
When I said eating it said or when I said eat it said eating.

44
00:03:24,070 --> 00:03:28,400
So what I'm going to do now is save this and then I'm not going to create an animal.

45
00:03:28,630 --> 00:03:40,500
Instead I'm going to create a dog and have this be say it's my dog my dog who is my and then my dog

46
00:03:40,500 --> 00:03:41,060
here.

47
00:03:41,840 --> 00:03:48,070
Now when I save this and run it by fun it's that pie expand this so we can see the output here.

48
00:03:48,170 --> 00:03:51,500
It says animal created dog created animal eating.

49
00:03:51,500 --> 00:03:58,520
So that makes sense because when I created the dog I said animal here in it self.

50
00:03:58,550 --> 00:04:03,260
So it means initialize an animal and then we say print them created.

51
00:04:03,260 --> 00:04:07,940
Now I don't actually have to have this initialization line so I'm going to comment that out.

52
00:04:08,060 --> 00:04:10,490
And now let's actually see what happens when I run this.

53
00:04:10,610 --> 00:04:13,590
It says that created animal eating.

54
00:04:13,760 --> 00:04:21,230
So know that even though the class dog does not have who him-I or eat methods inside of it it was able

55
00:04:21,230 --> 00:04:26,810
to inherit those methods or derive those methods from the base class of animal.

56
00:04:26,810 --> 00:04:31,970
And that's basically the entire idea behind inheritance is the fact that you can inherit from another

57
00:04:31,970 --> 00:04:37,850
class or derive another class and then you can see here I can call who am I.

58
00:04:37,850 --> 00:04:42,010
And eat even though they're not strictly defined inside of this dog class.

59
00:04:43,520 --> 00:04:50,360
Now I can also create new methods here so I can say something like Barch it takes in self and then it

60
00:04:50,360 --> 00:04:54,010
says print's.

61
00:04:54,050 --> 00:05:00,190
So now I can go all the way down here and say My dog bark close parentheses.

62
00:05:00,220 --> 00:05:04,180
And when I run this I should be able to see my new class Wolf.

63
00:05:04,370 --> 00:05:09,110
Now I can also overwrite classes so I'm not strictly limited to everything that was an animal.

64
00:05:09,250 --> 00:05:12,700
If I want eat to say dog eating I can do that as well.

65
00:05:12,700 --> 00:05:18,360
All I have to do is just say F and then call eat pasand self.

66
00:05:18,400 --> 00:05:20,300
And then basically right over it.

67
00:05:20,350 --> 00:05:25,550
So here I'll say now dog eating save that.

68
00:05:25,560 --> 00:05:32,580
So when I run this again Python oats I see that dogs created animal dog eating Wolf.

69
00:05:32,610 --> 00:05:35,700
So I was able to successfully overwrite the previous method.

70
00:05:35,720 --> 00:05:38,030
You can check out the nose for more examples of this.

71
00:05:38,130 --> 00:05:42,090
But the basic idea I want you to get is that if you've already created the class and you want to use

72
00:05:42,090 --> 00:05:46,950
some of those methods in a new class all you have to do is inherit it like this and you can then derive

73
00:05:47,190 --> 00:05:48,510
from the base class.

74
00:05:48,510 --> 00:05:48,800
All right.

75
00:05:48,810 --> 00:05:54,540
So special methods are basically going to allow you to perform special operations and these methods

76
00:05:54,540 --> 00:05:59,870
are not actually called directly but they're called by specific Python language syntax.

77
00:05:59,930 --> 00:06:01,510
Let me show you what I mean by that.

78
00:06:01,710 --> 00:06:12,710
Imagine that I create a list I will say my list is equal to 1 to 3 and then I say Prince my list and

79
00:06:12,740 --> 00:06:18,010
if I run this by fun notes that pi I see 1 2 3 I printed my list.

80
00:06:18,180 --> 00:06:19,990
Zoom a little bit out.

81
00:06:20,040 --> 00:06:23,320
Now what happens if I create my own class and try to print it.

82
00:06:23,670 --> 00:06:32,230
So I will create a class called book and this is going to be a very simple thing so far.

83
00:06:32,350 --> 00:06:43,520
Say d f will pass an R in its special method will say self and this will also have a title and author

84
00:06:43,760 --> 00:06:51,560
and pages and then what we will do here is say colon and assign those attributes.

85
00:06:51,620 --> 00:06:59,260
So a self-taught title is equal to the title self the author is equal to the author provided and then

86
00:06:59,260 --> 00:07:08,330
say self-taught pages is equal to the pages provided lips pages great and now what I will do is say

87
00:07:08,360 --> 00:07:13,220
B is equal to book clothes print CS and then add in the title.

88
00:07:13,400 --> 00:07:20,310
So the python is the title Wilson and the author Jose and we'll say it's 200 pages long and I always

89
00:07:20,320 --> 00:07:21,720
say Prince B.

90
00:07:21,730 --> 00:07:22,580
Print my book.

91
00:07:22,610 --> 00:07:25,460
So is kind of the exact same thing we did here.

92
00:07:25,470 --> 00:07:25,870
It's it.

93
00:07:25,870 --> 00:07:29,710
Notice what happens when I run this I say Python what's up high.

94
00:07:29,800 --> 00:07:36,030
I enter when I print out my book object it says main book object at its location in memory.

95
00:07:36,070 --> 00:07:40,690
So the question arises What is the print function actually doing and how can I get it to pronounce something

96
00:07:40,900 --> 00:07:41,730
that looks nicer.

97
00:07:41,770 --> 00:07:45,990
Something that says like title Python author Jose pages 200.

98
00:07:46,300 --> 00:07:52,200
Well what happens when you call the print function on an object is it looks for its string representation.

99
00:07:52,300 --> 00:07:56,650
And right now we haven't actually specifically defined the books string representation.

100
00:07:56,650 --> 00:08:02,200
We need to use what's known as a special method to do that and all special methods inside of a class

101
00:08:02,650 --> 00:08:08,960
are annotated with two underscores the name of the special method and then two extra underscores and

102
00:08:08,960 --> 00:08:13,120
we can see here the syntax highlighting also notes that there are special method and they all need to

103
00:08:13,120 --> 00:08:20,300
take in the self argument so this special method as TR is the string representation of my object.

104
00:08:20,300 --> 00:08:25,640
So whenever a function asks for the string representation of my object and the print function does that

105
00:08:25,730 --> 00:08:27,980
it will return whatever I put here to return.

106
00:08:28,220 --> 00:08:29,830
So I will just say return.

107
00:08:30,240 --> 00:08:31,340
Hello.

108
00:08:31,590 --> 00:08:35,120
We save that and when we run this we get back.

109
00:08:35,130 --> 00:08:41,450
Hello when I print out my book and let's delete this my list is for an old beat using it anymore.

110
00:08:41,490 --> 00:08:45,630
So realistically you're not going to want to say return hello but instead you're going to want to return

111
00:08:45,630 --> 00:08:47,920
a string representation that actually makes sense.

112
00:08:47,940 --> 00:08:52,920
And for our case the string represents representation that might make sense as something like title

113
00:08:53,460 --> 00:08:55,750
and will use some formatting here.

114
00:08:55,830 --> 00:09:06,610
Author and then let's say pages and then we will say that format and we Passons self-taught title comma

115
00:09:07,390 --> 00:09:16,710
sulpha author comma self-taught pages and we will save this unless checked to see if we made any errors

116
00:09:16,710 --> 00:09:18,330
and if everything runs correctly.

117
00:09:18,840 --> 00:09:19,510
OK here we go.

118
00:09:19,500 --> 00:09:24,420
When I actually called to print B or print that book prints the actual function.

119
00:09:24,440 --> 00:09:29,580
Looked for a string representation and that was returned by the special method in which case we got

120
00:09:29,580 --> 00:09:29,850
back.

121
00:09:29,860 --> 00:09:32,840
Title Python author Jose pages 200.

122
00:09:32,910 --> 00:09:37,890
And this is how you are going to going to typically see the special method SDR for a string representation

123
00:09:37,890 --> 00:09:39,590
used.

124
00:09:39,600 --> 00:09:42,960
Now will show you a couple of more useful special methods.

125
00:09:43,020 --> 00:09:46,130
So another special method is the Eliane or length method.

126
00:09:46,860 --> 00:09:52,650
So imagine I call Eliane on a list 1 1 to 3.

127
00:09:52,650 --> 00:09:58,890
I know I will get back the number 3 indicating three elements inside of that list.

128
00:09:58,910 --> 00:10:06,510
But what happens if I call length on B while I can return or save this and run it and lets actually

129
00:10:06,510 --> 00:10:11,790
print out LNB But notice what happens.

130
00:10:11,860 --> 00:10:19,360
I should get an error and it says object of type book has no link which means I need to add in a special

131
00:10:19,360 --> 00:10:19,830
method.

132
00:10:19,840 --> 00:10:24,920
The E-F underscore underscore Elyon underscore underscore.

133
00:10:25,030 --> 00:10:32,540
And this is the length method so underscore underscore let me make sure I have balanced underscores.

134
00:10:32,570 --> 00:10:34,090
OK two on each side.

135
00:10:34,320 --> 00:10:39,090
I type in self and then what I end up doing is returning whatever I want.

136
00:10:39,090 --> 00:10:44,400
The length representation to be of my book and a good representation here of the length of the book

137
00:10:44,640 --> 00:10:47,690
would probably be the pages so I call self-taught pages.

138
00:10:47,880 --> 00:10:51,270
Note that including self-taught pages and not just pages by itself.

139
00:10:51,270 --> 00:10:54,570
So now see if we can print the link for the book without any errors.

140
00:10:54,960 --> 00:10:59,780
When we get back 200 which makes sense because that's what I find here as the length of the book.

141
00:10:59,820 --> 00:11:05,550
So what this link function that's built into Python does is it goes inside the object checks if it has

142
00:11:05,550 --> 00:11:10,770
a special method Eliane and then returns whatever that method tells it to return and then finally one

143
00:11:10,770 --> 00:11:13,290
other special method that you may find yourself encountering.

144
00:11:13,430 --> 00:11:16,420
And there are a lot of special methods as you can see here.

145
00:11:16,470 --> 00:11:22,260
All of these are special methods so anything that is wrapped in two sets of underscores is a special

146
00:11:22,260 --> 00:11:25,810
method and there's a whole bunch of them that I'm just showing you the most common ones.

147
00:11:25,920 --> 00:11:31,440
We'll explore more as we continue on with Gengel later on but delete is another special method you might

148
00:11:31,440 --> 00:11:33,050
find yourself running into.

149
00:11:33,090 --> 00:11:35,120
And that's just when you call deletes.

150
00:11:35,310 --> 00:11:39,680
So I will say Prince book is destroyed.

151
00:11:41,900 --> 00:11:48,500
And the way you can delete an object from memory space is with DL and then whatever the object name

152
00:11:48,500 --> 00:11:49,400
was.

153
00:11:49,400 --> 00:11:52,130
So now if I run this code I get back.

154
00:11:52,130 --> 00:11:55,010
I created a book but a book has been destroyed.

155
00:11:55,040 --> 00:11:55,300
All right.

156
00:11:55,310 --> 00:11:57,540
That's all you need to know for special methods.

157
00:11:57,560 --> 00:12:00,400
The most common one will probably be using throughout the rest of the Course.

158
00:12:00,440 --> 00:12:02,960
Is this one the SDR the string representation.

159
00:12:02,960 --> 00:12:06,910
Because if we ever want to print something it's important that we have the method to do that and not

160
00:12:06,910 --> 00:12:08,020
get any errors.

161
00:12:08,330 --> 00:12:12,380
All right thanks everyone and I'll see at the next lecture where we're going to be walking through a

162
00:12:12,380 --> 00:12:16,390
project for you to do to practice object oriented programming.
