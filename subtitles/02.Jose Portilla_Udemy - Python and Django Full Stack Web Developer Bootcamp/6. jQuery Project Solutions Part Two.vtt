WEBVTT
1
00:00:05.160 --> 00:00:09.330
Or it's a dream from where we left off last time we have the empty javascript file.

2
00:00:09.340 --> 00:00:15.060
So we need to be using Jay query and javascript to actually grab elements from the document object model.

3
00:00:15.250 --> 00:00:19.820
But what we also now have is the Tim Allen CSSA done for our project.

4
00:00:19.880 --> 00:00:22.530
There's a couple of things we're going to need to be able to do.

5
00:00:22.570 --> 00:00:27.420
One thing we need to ask for the player names and then assign them their colors red and blue and I've

6
00:00:27.430 --> 00:00:29.870
picked some shades using RSGB.

7
00:00:30.160 --> 00:00:35.670
Then the next thing we need to do is figure out a function that can change the color of a button.

8
00:00:35.680 --> 00:00:39.920
So if I click somewhere here I want to be able to change the color of that button.

9
00:00:40.420 --> 00:00:46.230
Now remember we also need to figure out what a buttons color is.

10
00:00:46.300 --> 00:00:49.790
So I need to make two functions that are very similar to each other.

11
00:00:49.810 --> 00:00:53.290
One is to find what color a button is.

12
00:00:53.290 --> 00:01:00.310
If I click somewhere on a row or column index and the other one is if I supply a row index and column

13
00:01:00.310 --> 00:01:02.620
index to actually change the color.

14
00:01:02.740 --> 00:01:05.790
So we'll be programming those out or coding them out.

15
00:01:06.040 --> 00:01:12.800
Then I also need a function that checks what is the bottom most available row.

16
00:01:13.090 --> 00:01:19.750
So if I click on one of these columns I want my chip to go all the way down until it finally meets the

17
00:01:20.110 --> 00:01:22.920
last available gray button.

18
00:01:22.930 --> 00:01:26.920
So if these start getting filled up I don't want to mess up.

19
00:01:26.920 --> 00:01:31.840
I just wanted to drop all the way down to the first gray button it seems and we're going to be creating

20
00:01:31.840 --> 00:01:36.610
a function called check bottom that will check for the bottom and then supply back the row.

21
00:01:37.550 --> 00:01:43.220
Then we need to create a function that checks for inputs are the same color to actually check for Connect

22
00:01:43.220 --> 00:01:43.950
4.

23
00:01:44.630 --> 00:01:46.680
And then we need to create the when checks.

24
00:01:46.700 --> 00:01:49.350
So we do make a check for horizontal wins.

25
00:01:49.430 --> 00:01:55.530
We need to make a check for vertical wins and then we need to make a check for diagonal wins.

26
00:01:55.550 --> 00:01:59.200
After that we to check some way that the game has ended either.

27
00:01:59.210 --> 00:02:03.670
Everything is filled up and nobody's won or somebody has won.

28
00:02:03.750 --> 00:02:09.540
After that we want to actually create the game logic where we start with player 1 player one will select

29
00:02:09.540 --> 00:02:10.820
something we'll fill it in.

30
00:02:10.830 --> 00:02:12.950
Then it goes player 2 they'll fit it in.

31
00:02:13.140 --> 00:02:14.510
And as I keep filling it in.

32
00:02:14.520 --> 00:02:16.630
We keep checking to see if somebody has one.

33
00:02:16.740 --> 00:02:20.310
And once somebody has won we end the game and ask if they want to play again.

34
00:02:20.370 --> 00:02:22.270
Or along those lines.

35
00:02:22.320 --> 00:02:22.830
All right.

36
00:02:23.070 --> 00:02:25.890
Definitely check out the solution file for this.

37
00:02:25.890 --> 00:02:28.560
There are a lot of helpful functions there.

38
00:02:28.680 --> 00:02:33.900
And if you scroll all the way to the bottom of the solutions file there are actually help or functions

39
00:02:33.900 --> 00:02:41.040
that are commented out to help you understand how a table row index and a table column index work.

40
00:02:41.040 --> 00:02:42.620
It's actually kind of backwards.

41
00:02:42.810 --> 00:02:49.000
For instance the very bottom row the index here is row index five.

42
00:02:49.050 --> 00:02:57.180
So I have to check from five four three two one zero instead of 0 1 2 3 4 5 and the Collin's kind of

43
00:02:57.180 --> 00:02:58.170
feel backwards as well.

44
00:02:58.170 --> 00:03:02.290
So just keep that in mind if you're confused on the indexing.

45
00:03:02.370 --> 00:03:04.640
Definitely check out all the way at the bottom of the solutions.

46
00:03:04.650 --> 00:03:05.740
Javascript file.

47
00:03:05.820 --> 00:03:09.230
There are some help or functions to help you understand.

48
00:03:09.270 --> 00:03:13.860
So one of them is change color on click so you can click on any of them it'll change the color for you.

49
00:03:14.100 --> 00:03:20.100
And the other one is to actually report back the index location of any button you click.

50
00:03:20.100 --> 00:03:21.180
So those are there to help you.

51
00:03:21.180 --> 00:03:23.480
They're not actually there for the game logic.

52
00:03:23.490 --> 00:03:24.630
Let's get started.

53
00:03:24.630 --> 00:03:28.510
I'm going to be doing a mix of coding and then copying pasting from the solution.

54
00:03:28.590 --> 00:03:37.970
If there's too much code just to save time I'm going to copy and paste the very first lines of code

55
00:03:38.120 --> 00:03:39.610
and walk through them.

56
00:03:39.620 --> 00:03:41.240
So here are the first lines of code.

57
00:03:42.090 --> 00:03:47.150
Here I can see them asking player 1 through a prompt and to your name and you will be blue.

58
00:03:47.520 --> 00:03:49.830
And then I'm saying that player wants color.

59
00:03:49.890 --> 00:03:51.980
Is this RSGB code that I found.

60
00:03:52.440 --> 00:03:57.030
And then I have Player 2 and I'm saying player to enter your name you will be read.

61
00:03:57.030 --> 00:03:58.800
And I set them to RGV value.

62
00:03:58.800 --> 00:04:03.580
So this is some R.G. because he read and this is some R.G. be code for it like a light blue.

63
00:04:03.750 --> 00:04:04.760
And keep in mind the music.

64
00:04:04.770 --> 00:04:09.140
RG B because you'll be using a query to change the actual color of the buttons.

65
00:04:09.240 --> 00:04:14.570
It expects a string in the form of R.G. B and it also expects it with this sort of spacing here.

66
00:04:14.730 --> 00:04:15.690
So keep that in mind.

67
00:04:15.690 --> 00:04:19.600
That's why this is in this specific format instead of just like a hex code.

68
00:04:20.040 --> 00:04:22.920
Then I have game on which is equal to true.

69
00:04:22.920 --> 00:04:26.720
That's going to be a boolean variable that tells me whether that game is running or not.

70
00:04:27.000 --> 00:04:33.740
And then I have a table here which is just a query call to table TR OK.

71
00:04:33.880 --> 00:04:38.120
Up next let's create a report when function.

72
00:04:38.190 --> 00:04:45.820
Again I'm just going to kind of copy and paste this one so report when it takes in a row number and

73
00:04:45.820 --> 00:04:52.000
a column number and then it says you one starting at this row column and this is just console log.

74
00:04:52.000 --> 00:04:58.300
So this is for a record for us so that we can check at the very end once the game is over we log what

75
00:04:58.300 --> 00:05:01.390
was the winning move what row number and what column number.

76
00:05:01.390 --> 00:05:02.180
Did they win it.

77
00:05:02.190 --> 00:05:05.630
This is not necessary for the actual code to work.

78
00:05:05.650 --> 00:05:09.230
This is just more of a convenience function for you as you're debugging.

79
00:05:09.970 --> 00:05:12.350
Now it's actually code something out manually.

80
00:05:12.670 --> 00:05:20.290
So I'm going to create a function called change color and change color function is going to take in

81
00:05:20.290 --> 00:05:32.220
a row index a column index and the color and then we're going to return the table number the table is

82
00:05:32.220 --> 00:05:34.120
just that variable we got object query.

83
00:05:34.530 --> 00:05:41.100
I'm going to use e q and then passen the row index to grab a row.

84
00:05:41.280 --> 00:05:52.750
Then I'm going to find the values for those rows and then I'm going say e q call index and then I will

85
00:05:52.750 --> 00:05:54.800
say that find the button there.

86
00:05:56.760 --> 00:06:03.830
And then I will say C Ss and then passen background color and change its color.

87
00:06:04.170 --> 00:06:05.560
So that's a lot of code.

88
00:06:05.850 --> 00:06:11.700
And there's actually a link to a stack overflow article that really helps you out with this specific

89
00:06:11.700 --> 00:06:13.210
command right here.

90
00:06:13.230 --> 00:06:15.310
So I looked up on stack overflow.

91
00:06:15.420 --> 00:06:19.620
How do I get a table cell by index using a query.

92
00:06:19.620 --> 00:06:26.070
So if I know the row index and column index of a table how can I use a query to grab that particular

93
00:06:26.070 --> 00:06:32.000
cell value from a table and they came out with this really nice code where you just have that table.

94
00:06:32.130 --> 00:06:38.540
Each row index find table cell and then equal column index and then we added find the buttons.

95
00:06:38.550 --> 00:06:43.070
We know there are buttons and then we have CSSA background color and then color.

96
00:06:43.110 --> 00:06:48.630
What I would recommend you do is just kind of follow along with this and keep adding it.

97
00:06:48.660 --> 00:06:57.820
So in the consul of your browser say table e q and then say 1 and then say find T.T. then say that Q

98
00:06:57.930 --> 00:07:00.810
and then some are in that column and then say that find bun.

99
00:07:00.900 --> 00:07:04.370
So peel back the layers so you can understand it yourself.

100
00:07:05.270 --> 00:07:10.460
Next we want to do is create a function called Return color which is going to report back the current

101
00:07:10.460 --> 00:07:11.490
color button.

102
00:07:11.690 --> 00:07:18.200
And this is going to look virtually the same as the first function we just wrote except in this case

103
00:07:18.200 --> 00:07:22.290
we are not changing the color so we don't need the colors to be a parameter.

104
00:07:22.470 --> 00:07:27.530
We don't need it to be an input here and this will just report back to color that we can call a change.

105
00:07:27.620 --> 00:07:33.950
Or excuse me not change color but I'll say return color or report color whatever you want to call it.

106
00:07:34.250 --> 00:07:39.870
And this returns whatever color at this row at this column index for that particular button.

107
00:07:40.040 --> 00:07:45.680
The next function we're going to need is going to be the check bottom and the check bottom function

108
00:07:45.710 --> 00:07:50.590
is going to take in a column index and then return the bottom row that is still gray.

109
00:07:50.750 --> 00:07:51.870
It's actually code this one out

110
00:07:56.200 --> 00:08:05.590
a function check bottom it takes center column index and create a variable here called Color report.

111
00:08:05.780 --> 00:08:10.430
And that's going to just be equal to the return color function.

112
00:08:14.530 --> 00:08:21.510
And we will start at 5 and then say CIOL index.

113
00:08:21.690 --> 00:08:25.860
And the reason we're starting a five flip still actually want that sort of brackets there.

114
00:08:27.040 --> 00:08:35.200
The reason we're starting a five is because I have a for loop in I'm going to go from we'll change this

115
00:08:35.200 --> 00:08:36.020
to be row.

116
00:08:36.030 --> 00:08:45.460
So it's really clear or all started rows equal to 5 and then I'm going to decrease the rows so I'll

117
00:08:45.480 --> 00:08:54.750
say row minus minus and I will keep going in my for loop until a row is zero meaning row greater than

118
00:08:54.930 --> 00:08:56.170
negative 1.

119
00:08:56.190 --> 00:09:00.500
So as long as row is greater than negative 1 starting at row is equal to 5.

120
00:09:00.630 --> 00:09:08.620
Keep subtracting the rows and for each of these one I'm going to do is grab the color report and set

121
00:09:08.620 --> 00:09:13.880
it equal to return color at the current row.

122
00:09:14.290 --> 00:09:30.080
At my current column index and then I will say this if the color report is equal to gray R.G. be one

123
00:09:30.080 --> 00:09:33.360
to a 1 2 8 1 2 8.

124
00:09:33.710 --> 00:09:39.280
Then I'm just going to return that Roe Okay.

125
00:09:39.280 --> 00:09:40.770
So what's actually happening here.

126
00:09:40.810 --> 00:09:46.810
Well I'm taking in a particular column index so someone let's imagine is clicking on a column and then

127
00:09:46.810 --> 00:09:49.730
what I'm doing is I'm grabbing a color report.

128
00:09:49.810 --> 00:09:54.490
Basically this is just the initialization of this value called reports and it's already going to start

129
00:09:54.490 --> 00:10:00.010
at 5 and that's return color row index 5 column index.

130
00:10:00.010 --> 00:10:06.640
So I'm just going up the rows searching for the first gray button that I have available.

131
00:10:07.900 --> 00:10:12.610
Then I want an other function that will check to see if four inputs are the same color.

132
00:10:12.670 --> 00:10:16.400
So we want some sort of color match function.

133
00:10:16.430 --> 00:10:32.340
Let's create one ongoing say function color match check and it will take an 1 2 3 and 4 as variables.

134
00:10:32.790 --> 00:10:35.180
And then we're going to return.

135
00:10:35.370 --> 00:10:37.780
And now let's check if it matches each one.

136
00:10:38.070 --> 00:10:43.530
So I want to check if button 1 matches to.

137
00:10:44.090 --> 00:10:55.470
And if button one matches three and if button one matches for and the other thing I want to check is

138
00:10:55.470 --> 00:10:58.920
to make sure that these buttons aren't gray buttons.

139
00:10:58.980 --> 00:11:04.230
So if I look at my board right now I have Connect Four of gray buttons so I don't want that to be a

140
00:11:04.230 --> 00:11:05.490
glitch or a bug.

141
00:11:05.880 --> 00:11:14.280
So say make sure one is not equal to the RGV color code 1 2 8 1 2 8 1 2 8.

142
00:11:14.670 --> 00:11:19.500
And the other thing I also want to make sure is that if I'm checking for horizontal winds or checking

143
00:11:19.500 --> 00:11:25.160
for vertical ints and accidentally start checking outside of the table cells then I will get undefine

144
00:11:25.160 --> 00:11:26.160
the calls.

145
00:11:26.310 --> 00:11:37.240
So I want to make sure that one is not equal to undefined and that is my color match check centrally

146
00:11:37.240 --> 00:11:41.640
crafts for buttons and mixtures one is equal to 2 3 and four.

147
00:11:41.740 --> 00:11:45.970
And it also makes sure that one is not gray so we don't have four gray buttons.

148
00:11:46.150 --> 00:11:53.150
And we also don't have four undefined slots being matched together and think we have a color match.

149
00:11:53.430 --> 00:11:57.150
Now it's time to actually copy and paste the when checks.

150
00:11:57.150 --> 00:12:02.950
So we have three functions for checking wins the horizontal and vertical and check in then diagonal

151
00:12:02.950 --> 00:12:03.940
one check.

152
00:12:03.960 --> 00:12:06.920
Let me copy and paste this code here.

153
00:12:08.110 --> 00:12:09.000
It's a lot of code.

154
00:12:09.010 --> 00:12:13.600
So you may have to zoom out to really see it well but I'm going to briefly explain it.

155
00:12:13.870 --> 00:12:19.300
But before I do that let me just explain the general logic over at the actual board.

156
00:12:19.400 --> 00:12:23.540
So let me bring back the board over here.

157
00:12:23.640 --> 00:12:25.160
This is what the board looks like.

158
00:12:25.350 --> 00:12:30.060
If I want to check for a horizontal when what I'm going to do is starting over here.

159
00:12:30.240 --> 00:12:32.440
I'll check these for equal to each other.

160
00:12:32.570 --> 00:12:38.070
If they're not all move one over check of these four equal to each other if not move one over check

161
00:12:38.070 --> 00:12:42.990
these four equal to each other if not all move one over check of these four equal to each other which

162
00:12:42.990 --> 00:12:50.340
means for every row I need to do four horizontal checks and I know I have then six columns which means

163
00:12:50.340 --> 00:12:54.300
if I come over here to horizontal wind check that's exactly what we're doing in the four loops.

164
00:12:54.360 --> 00:12:57.060
I'm checking the columns.

165
00:12:57.090 --> 00:13:00.640
So there's six columns here meaning excuse me.

166
00:13:00.770 --> 00:13:08.160
Are six rows level of rows and there are four columns that I'm going to have to iterate through to check

167
00:13:08.940 --> 00:13:16.530
and the phrasing here reflects that better than I just said basically for the six rows for four columns

168
00:13:16.830 --> 00:13:24.360
do the color match check on a roll call and then RHO call plus 1 same row call plus 2 x etc..

169
00:13:24.360 --> 00:13:25.900
So we're just moving along.

170
00:13:25.940 --> 00:13:27.070
Check in these four.

171
00:13:27.270 --> 00:13:32.880
And then we're going to do that for six of these rows and then I'm going to call report win so that

172
00:13:32.880 --> 00:13:38.370
I console log that a horizontal one occurred and then I want to return true if there was a horizontal

173
00:13:38.370 --> 00:13:39.330
when check.

174
00:13:39.330 --> 00:13:41.780
If not I'm going to just continue.

175
00:13:42.120 --> 00:13:47.640
So this is going to go all the way and it's going to return true if there's a horizontal wind check.

176
00:13:47.640 --> 00:13:51.680
If not if nothing happened nothing's going to actually be reported back.

177
00:13:52.910 --> 00:13:57.450
This continue keyword is something we may not have encountered before but it basically just tells the

178
00:13:57.450 --> 00:13:59.850
code to continue and not do anything.

179
00:13:59.860 --> 00:14:05.640
The other thing you could have just done here is log something or just alert it something probably a

180
00:14:05.640 --> 00:14:12.670
log so you're not constantly alerting your user logs something like no match at row or col.

181
00:14:12.680 --> 00:14:18.110
Now if we scroll down now we have the vertical in check and it's doing a really similar thing.

182
00:14:18.220 --> 00:14:24.120
It's going for the six columns here in this column and of course we have 1 2 3 4 5 6 7.

183
00:14:24.140 --> 00:14:29.690
We have seven columns which makes sense because going up to 7 and then the rows when you check here

184
00:14:30.320 --> 00:14:36.210
are 1 2 3 4 go up 1 1 2 3 4 go up 1 more 1 2 3 4 and that's it.

185
00:14:36.230 --> 00:14:37.160
That's your limit.

186
00:14:37.190 --> 00:14:39.400
Other than that you're already off the table.

187
00:14:39.410 --> 00:14:46.430
So here we can see that I am just going to go through seven columns go three rows off the bottom do

188
00:14:46.430 --> 00:14:49.940
a color match check and then report the win return true.

189
00:14:49.940 --> 00:14:56.370
If I get the verdict one check otherwise I'm just going to continue doing these four loops then they

190
00:14:56.370 --> 00:15:01.740
have the diagonal in check and this one's a little more complicated but it's a very similar idea to

191
00:15:01.740 --> 00:15:02.870
the first two.

192
00:15:02.880 --> 00:15:10.830
Basically what I'm doing is I'm saying the very first horizontal or excuse me diagonal check happens

193
00:15:10.830 --> 00:15:11.740
right here.

194
00:15:12.060 --> 00:15:17.940
Hopefully see this along and then I'm going to continue doing the diagonal checks that essentially have

195
00:15:17.940 --> 00:15:23.480
a negative slope and then I'm going to do all the diagonal checks to have a positive slope.

196
00:15:23.610 --> 00:15:26.370
And this is where four loops come into play.

197
00:15:26.570 --> 00:15:32.430
And then we have the color match checks and we can see here we scroll over for some of them I'm saying

198
00:15:32.460 --> 00:15:35.770
plus one plus one plus two plus two.

199
00:15:35.970 --> 00:15:40.160
And the other ones I'm saying minus one plus one minus two plus two.

200
00:15:40.390 --> 00:15:45.570
That's basically a difference between the positive slopes for the diagonal checks versus the negative

201
00:15:45.570 --> 00:15:47.180
slopes for the diagonal checks.

202
00:15:47.340 --> 00:15:54.930
Essentially whichever direction it's going diagonal from left up to the right or from left down to the

203
00:15:54.930 --> 00:15:56.700
right.

204
00:15:56.770 --> 00:15:59.660
OK so we have those three functions that took for wins.

205
00:15:59.670 --> 00:16:04.800
What I want to do is now actually create the game logic for the next lecture.

206
00:16:04.800 --> 00:16:09.570
We'll be showing you how to create that game logic as well as a few more help for functions to really

207
00:16:09.570 --> 00:16:12.750
help us out as far as understanding how this game is working.

208
00:16:12.750 --> 00:16:14.710
Thanks everyone and I'll see you at the next lecture.
