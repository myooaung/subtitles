WEBVTT
1
00:00:05.020 --> 00:00:09.860
Hello everyone and welcome to the model forums lecture for jingle level 3.

2
00:00:09.940 --> 00:00:14.590
We've seen how we can use Django forms to grab information from the user and then do something with

3
00:00:14.590 --> 00:00:16.050
it on the backend.

4
00:00:16.090 --> 00:00:19.960
And so far we've only printed out that information directly to the console.

5
00:00:19.960 --> 00:00:20.880
Nothing too useful.

6
00:00:20.890 --> 00:00:26.740
But what if we actually wanted to grab that information and save it to a model so maybe we have a user

7
00:00:26.740 --> 00:00:31.660
that's signing up for a web site and we want to save their information to a model or someone's inputting

8
00:00:31.720 --> 00:00:37.300
a reply post to a comment we want to save the information to a model so we can always have it on our

9
00:00:37.300 --> 00:00:37.910
Web site.

10
00:00:37.920 --> 00:00:39.280
How do we actually do that.

11
00:00:39.760 --> 00:00:43.590
Luckily Gengel makes accepting form input and then passing it to a model.

12
00:00:43.630 --> 00:00:44.620
Very simple.

13
00:00:44.770 --> 00:00:50.080
Instead of inheriting from that forms that forms class were instead going to be using forms that model

14
00:00:50.080 --> 00:00:57.960
form in our forms not py file this helper class allows us to create a form from a preexisting model.

15
00:00:58.030 --> 00:01:03.430
We then add an inline class something we haven't actually seen before called Mehta and this medic class

16
00:01:03.430 --> 00:01:08.500
provides information connecting the model to the form and that topic of an inline class is actually

17
00:01:08.500 --> 00:01:09.390
really simple.

18
00:01:09.400 --> 00:01:12.840
It's just a class within an other class.

19
00:01:12.850 --> 00:01:17.440
Let's see some example code of what this new type of model form class would look like.

20
00:01:17.440 --> 00:01:22.080
All right so this is the most generic code example that you would find inside an applications forms

21
00:01:22.090 --> 00:01:23.470
that py file.

22
00:01:23.620 --> 00:01:28.960
The very first thing you need to do is the actual imports just like before I will say from Django import

23
00:01:28.960 --> 00:01:29.670
forms.

24
00:01:29.770 --> 00:01:34.660
Except this time we're going to be using forms that model form instead of just forms that form and then

25
00:01:34.660 --> 00:01:39.980
we also need to actually import our model from the models that py file inside application.

26
00:01:40.090 --> 00:01:42.100
So you can import this however you want.

27
00:01:42.100 --> 00:01:47.200
Typically you'll see it's done from my laptop models import my model a lot of times people also say

28
00:01:47.530 --> 00:01:50.830
from datt import models not my model et cetera.

29
00:01:51.340 --> 00:01:53.250
Then we have the actual form class.

30
00:01:53.350 --> 00:01:55.780
So you have class whatever you want to call your form.

31
00:01:55.780 --> 00:01:57.600
In this case we're calling it My new form.

32
00:01:57.730 --> 00:02:01.070
And then you inherits or derive from the forms that model form class.

33
00:02:01.070 --> 00:02:05.290
Class is a subclass of that model form very similar to what we did before.

34
00:02:05.320 --> 00:02:09.420
Right below that you have the form fields that we showed earlier in the course.

35
00:02:09.730 --> 00:02:14.680
And then we have the middle class C inline class and this is what's really going to connect the model

36
00:02:14.680 --> 00:02:16.240
to the form fields.

37
00:02:16.240 --> 00:02:21.610
So again the fields attribute inside of that class that inline metaclass is going to do a lot of the

38
00:02:21.610 --> 00:02:22.770
connection to the model.

39
00:02:22.930 --> 00:02:28.390
So right now I haven't read about certain options but let's discuss a little bit more about that inline

40
00:02:28.420 --> 00:02:29.520
class.

41
00:02:29.650 --> 00:02:35.640
So there are many ways to make that connection on the fields attribute of the inline class Middx.

42
00:02:36.100 --> 00:02:42.460
But you first need to think about security for the fields and it's also very common to not actually

43
00:02:42.460 --> 00:02:45.010
provide any additional field information.

44
00:02:45.310 --> 00:02:51.030
So before I mention that form fields like we typically saw would go right below that my new form class.

45
00:02:51.040 --> 00:02:57.430
But then since you're already matching up the form to match up with the model exactly you don't actually

46
00:02:57.430 --> 00:02:59.180
need to specify those fields.

47
00:02:59.970 --> 00:03:03.760
So you'll typically just see the inline class immediately after that form class.

48
00:03:03.750 --> 00:03:06.030
That's very common to see as well.

49
00:03:06.030 --> 00:03:11.460
And you can have the form be just generated completely from the model and that saves you a lot of work.

50
00:03:11.460 --> 00:03:13.090
You don't have to type in those fields again.

51
00:03:13.110 --> 00:03:17.350
All you have to do is say class meta model equals my model and then connect the field somehow which

52
00:03:17.360 --> 00:03:20.290
we're going to talk about several options in just a little bit.

53
00:03:20.550 --> 00:03:26.790
But if you want to actually use custom validators like we previously discussed then you do have to pass

54
00:03:26.790 --> 00:03:30.790
in those form fields where you provide the validator parameters.

55
00:03:30.840 --> 00:03:36.870
So most of the kust most of the cost of validation you'll have to provide if you want it but the automatic

56
00:03:36.870 --> 00:03:40.250
cleaning and validation will be directly from your model.

57
00:03:40.290 --> 00:03:45.360
So remember your model had its own constraints and those sort of validation just come automatically

58
00:03:45.570 --> 00:03:46.420
when you call class.

59
00:03:46.420 --> 00:03:49.270
Medha and connect that to your model.

60
00:03:49.270 --> 00:03:51.310
So it's really up to you how you want to see this.

61
00:03:51.460 --> 00:03:52.180
It's very common.

62
00:03:52.180 --> 00:03:55.090
Just to see this class your forum and then directly below it.

63
00:03:55.090 --> 00:03:58.980
Class meta and not have to worry about any customer validation.

64
00:03:58.990 --> 00:04:02.940
All right let's continue on by discussing how we can actually work that fields.

65
00:04:02.950 --> 00:04:05.980
Attribute that's inside the inline class Mehta.

66
00:04:06.310 --> 00:04:11.920
So option 1 is just to set it to the special keyword underscore underscore or underscore underscore

67
00:04:12.400 --> 00:04:17.230
and Bisco it is you're grabbing all the fields from the model you're going to place them into the form

68
00:04:19.080 --> 00:04:23.530
Option two is to specify what fields you actually want to exclude.

69
00:04:23.820 --> 00:04:27.540
So here you can just pass in a list of the field names that you want to exclude.

70
00:04:27.540 --> 00:04:32.470
So you say my model and I actually don't want to include field one in the form or field to in the form

71
00:04:34.050 --> 00:04:38.310
and then Option three is to actually list the included field instead.

72
00:04:38.370 --> 00:04:44.160
So you can debate whether you have a huge model if it's easier to just include or if you have a small

73
00:04:44.160 --> 00:04:49.280
model if it's easier just to exclude really depends on what is better for you.

74
00:04:49.770 --> 00:04:54.120
All right so we briefly went over the options of how to connect the fields but I definitely suggest

75
00:04:54.120 --> 00:04:59.100
you check out the documentation for more discussion on how to connect the fields in the forms the fields

76
00:04:59.130 --> 00:05:00.120
in the model.

77
00:05:00.120 --> 00:05:03.260
The documentation page is really great for the model forms.

78
00:05:03.270 --> 00:05:07.560
Basically just google Django plus model forms will take you there has a ton of examples ton of different

79
00:05:07.560 --> 00:05:13.110
situations and more discussion on certain security things so if you plan on making this a big Web site

80
00:05:13.140 --> 00:05:19.380
where for some reason most malicious users are going to come of fields and forms is definitely something

81
00:05:19.380 --> 00:05:20.690
you want to keep secure.

82
00:05:20.700 --> 00:05:26.220
Django has a lot of built in stuff we've already seen things like the CSA RF tokin and even these special

83
00:05:26.220 --> 00:05:28.520
calls the options take security in mind.

84
00:05:28.620 --> 00:05:30.190
But if that's a big concern for you.

85
00:05:30.240 --> 00:05:33.480
Definitely check out the documentation's full discussion on that.

86
00:05:33.650 --> 00:05:38.130
OK so let's get some practice for all of this and what we're going to do is try adding a model form

87
00:05:38.430 --> 00:05:39.360
to our pro too.

88
00:05:39.360 --> 00:05:42.740
That was the second project from Gengel level 2.

89
00:05:42.840 --> 00:05:47.460
So this project if you remember had a single user class in its models that py file.

90
00:05:47.520 --> 00:05:52.470
Well we're going to be doing is connecting it to a form allowing users to register their names and emails

91
00:05:52.470 --> 00:05:57.410
to the site and this sort of logic could easily be used to create a simple coming soon landing page.

92
00:05:57.540 --> 00:06:03.070
So you've probably seen the single one page web sites where you go in there working on a project and

93
00:06:03.070 --> 00:06:08.370
they say oh you know come back soon or will email you to let you know whenever the project launches

94
00:06:08.430 --> 00:06:10.520
and it just has entered your name.

95
00:06:10.520 --> 00:06:15.600
Enter email address and submit and we submit that information goes to a database that they can later

96
00:06:15.630 --> 00:06:16.280
access.

97
00:06:16.290 --> 00:06:21.300
So this is easily something you could do just based off of the information in this lecture plus everything

98
00:06:21.300 --> 00:06:22.830
you've already learned about.

99
00:06:22.830 --> 00:06:23.070
All right.

100
00:06:23.070 --> 00:06:23.990
So to get started.

101
00:06:24.090 --> 00:06:29.100
Make sure you have the pro tools folder from the jingle level to folder in the notes and to see the

102
00:06:29.100 --> 00:06:30.300
completed version of this.

103
00:06:30.300 --> 00:06:33.240
Check out the pro folder in the Django level 3 folder.

104
00:06:33.240 --> 00:06:38.820
Again we're going to start with the finished pro to folder from a level 2 and then work with it by the

105
00:06:38.820 --> 00:06:41.820
end of this lecture will have what's available to you in the notes.

106
00:06:41.960 --> 00:06:43.390
Undertaking level 3 approach too.

107
00:06:43.410 --> 00:06:44.180
So keep that in mind.

108
00:06:44.190 --> 00:06:46.620
You want to see kind of a before and after.

109
00:06:46.980 --> 00:06:48.000
And let's get started.

110
00:06:48.000 --> 00:06:48.910
I'll see at the next lecture.
