WEBVTT
1
00:00:04.930 --> 00:00:10.890
Hello everyone and welcome to part for errors and exceptions often times our code isn't going to be

2
00:00:10.890 --> 00:00:11.520
perfect.

3
00:00:11.520 --> 00:00:12.990
Meaning we run into errors.

4
00:00:13.060 --> 00:00:17.160
I'm sure by now you've actually ran into your own errors while trying to cut out some of the examples

5
00:00:17.160 --> 00:00:18.370
in this course.

6
00:00:18.540 --> 00:00:22.960
You may be wondering also how do we actually set up our own error an exception calls.

7
00:00:22.980 --> 00:00:23.760
Let's find out.

8
00:00:24.730 --> 00:00:28.590
The key to all of this are these three keywords try except.

9
00:00:28.600 --> 00:00:35.230
And finally we can use them to dictate our code logic in case of an error to show how this works we're

10
00:00:35.230 --> 00:00:40.810
going to be opening files in one way to open files is to use the open function and the open function

11
00:00:40.810 --> 00:00:46.320
looks like this as a general example where your first parameter is the actual file or path to the file.

12
00:00:46.390 --> 00:00:50.980
And the second parameter is a string code indicating whether you're just going to be reading the file

13
00:00:51.190 --> 00:00:55.220
writing to the file or reading and writing to the file.

14
00:00:55.270 --> 00:00:59.630
So as I mentioned that second parameter dictates how you're going to be opening the file.

15
00:00:59.630 --> 00:01:04.480
And if you accidentally use the wrong code for instance you say you're just going to read the file and

16
00:01:04.480 --> 00:01:06.390
then you attempt to write on the file.

17
00:01:06.430 --> 00:01:08.140
You may get an error.

18
00:01:08.140 --> 00:01:12.240
So we're going to be using this open function to actually show how we can handle errors.

19
00:01:12.250 --> 00:01:14.470
Let's hop over to the editor and get started.

20
00:01:14.690 --> 00:01:15.030
OK.

21
00:01:15.040 --> 00:01:20.650
So here I am at the editor to begin with let's actually show what happens when we make a mistake and

22
00:01:20.650 --> 00:01:22.560
actually get an error out.

23
00:01:22.570 --> 00:01:27.630
So for instance let's say I say print here and I say hello.

24
00:01:27.940 --> 00:01:32.870
But for some reason I accidentally cut off that last single quote and messed up.

25
00:01:33.010 --> 00:01:38.700
If I try to run this note stop PI file saying Python notes stop PI and a hit enter.

26
00:01:38.860 --> 00:01:45.430
I get a syntax error and it's either well or end of line while scanning string literal meaning the line

27
00:01:45.430 --> 00:01:48.030
suddenly ended and expected more here.

28
00:01:48.040 --> 00:01:49.630
So that's one type of error you get.

29
00:01:49.690 --> 00:01:52.570
Notice it's called syntax error.

30
00:01:52.570 --> 00:01:55.890
Now let's say I do another air I say something like.

31
00:01:55.900 --> 00:02:00.490
Print my list and for some reason I forgot to define my list.

32
00:02:00.610 --> 00:02:06.600
Or maybe I defined my list earlier but I called it my list here.

33
00:02:08.000 --> 00:02:14.180
Set it equal to 1 2 3 and later on of my code I forgot it was my list here and I just said my list let's

34
00:02:14.180 --> 00:02:16.220
save this and run this.

35
00:02:16.260 --> 00:02:17.550
No I get another air.

36
00:02:17.570 --> 00:02:21.650
This one's called name error saying the name my list is not defined.

37
00:02:21.980 --> 00:02:27.830
And basically what this means is that we get these specific errors that are trying to help us out actually

38
00:02:27.830 --> 00:02:33.170
figure out what's wrong of our code and this type of error and description is known as an exception

39
00:02:33.710 --> 00:02:39.380
even if the statement or expression is syntactically correct it may cause an error when an attempt is

40
00:02:39.380 --> 00:02:45.770
made to actually execute that specific command errors detected during execution are called exceptions

41
00:02:46.070 --> 00:02:48.480
and they're actually not unconditionally fatal.

42
00:02:48.500 --> 00:02:52.550
And what do you mean by that phrase unconditionally fatal is that you can use those three key words

43
00:02:52.550 --> 00:02:57.500
we talked about earlier to actually dictate how your code can handle those errors or exceptions and

44
00:02:57.500 --> 00:02:59.480
continue on with the rest of the script.

45
00:02:59.480 --> 00:03:04.970
That way if something pops up you can actually move with the punches and keep going.

46
00:03:04.970 --> 00:03:10.340
So let's show you how to use try and accept the basic terminology and syntax used to handle errors or

47
00:03:10.400 --> 00:03:13.270
try except and sometimes finally statements.

48
00:03:13.460 --> 00:03:18.590
Basically it's code which can cause an exception is put inside the try block in the handling of that

49
00:03:18.590 --> 00:03:21.470
exception is implemented in the except block of code.

50
00:03:21.500 --> 00:03:26.720
Let me copy and paste the example syntax from the notes to show you I'm going to copy and paste some

51
00:03:26.720 --> 00:03:31.190
comments and code here that's sick trolls the there we go.

52
00:03:31.190 --> 00:03:36.320
So the general syntax looks like this you have a try and you do your operations inside the try statement

53
00:03:36.410 --> 00:03:37.630
and like the keyword.

54
00:03:37.700 --> 00:03:43.340
Kind of implies you're going to try to do this you're going to attempt to do it and then you have except

55
00:03:43.940 --> 00:03:44.950
an exceptional one.

56
00:03:44.960 --> 00:03:48.530
So if there's exception one exception one would be something like this.

57
00:03:48.560 --> 00:03:53.410
Name error or syntax errors are kind of watching for a specific exception.

58
00:03:53.420 --> 00:03:58.220
Then you execute some certain block of code then you can add another except if there's an exception

59
00:03:58.220 --> 00:03:58.520
to.

60
00:03:58.520 --> 00:04:01.510
So that's maybe one check is for a syntax error.

61
00:04:01.600 --> 00:04:03.690
Another check is for a name error etc..

62
00:04:03.830 --> 00:04:08.530
Then you execute this block and then else if there is no exception you execute that block.

63
00:04:08.840 --> 00:04:12.230
So we can better understand this by actually walking through an example.

64
00:04:12.290 --> 00:04:13.540
Let me delete all this.

65
00:04:13.550 --> 00:04:18.590
And inside of the same folder are going to create a new file is going to be a simple text file will

66
00:04:18.620 --> 00:04:23.650
say simple cxxviii and it just says hello world.

67
00:04:23.650 --> 00:04:25.310
This is just a normal text file.

68
00:04:25.470 --> 00:04:26.350
Save that.

69
00:04:26.550 --> 00:04:28.040
And then inside of notes that pi.

70
00:04:28.060 --> 00:04:29.840
And we tried to open this file.

71
00:04:30.210 --> 00:04:40.850
So say try and I will say F is equal to open and we'll pass in simple t XTi that simple text.

72
00:04:40.850 --> 00:04:48.030
Now I'm going to open it with a parameter w as my second argument and then I'm going to write.

73
00:04:48.200 --> 00:04:58.150
So I will say test right two simple text and then I'm going to say except

74
00:05:01.450 --> 00:05:10.700
in I will specify except I O error which isn't in import output or input output operation air and this

75
00:05:10.700 --> 00:05:16.880
will only check for an I O error exception and then execute a certain block of code so let's prince

76
00:05:21.060 --> 00:05:25.590
could not find file or read data.

77
00:05:26.770 --> 00:05:34.140
And then finally we'll say else and I will Prince success.

78
00:05:34.480 --> 00:05:38.030
And then finally we need to close that file.

79
00:05:38.170 --> 00:05:40.840
So the basics of working off a file is you open it.

80
00:05:40.840 --> 00:05:43.600
You either read or write it and then you close it.

81
00:05:43.630 --> 00:05:46.250
So it's actually run this and see what happens.

82
00:05:47.120 --> 00:05:48.810
So I'll call Python notes not pi.

83
00:05:48.920 --> 00:05:52.130
And it looks like it was a success so everything's working well.

84
00:05:53.240 --> 00:05:58.640
Now let's see what happens if I accidently instead of saying with W for right I said R which stands

85
00:05:58.640 --> 00:05:59.380
for read.

86
00:05:59.630 --> 00:06:04.310
And when you open a file with only r That means you only have reading permissions on a file you can't

87
00:06:04.310 --> 00:06:05.570
write to the file.

88
00:06:05.600 --> 00:06:10.940
And what's useful about only st r is if you want to make sure your code is accidently write over a file

89
00:06:11.120 --> 00:06:15.980
you make sure to only open it with the permissions meaning you can only read it that way if you actually

90
00:06:16.100 --> 00:06:17.510
write to the file it won't happen.

91
00:06:17.510 --> 00:06:19.070
You'll get some sort of error.

92
00:06:19.130 --> 00:06:26.960
So let's clear the cons. and run that note here instead of getting that sort of I O error I get this

93
00:06:27.050 --> 00:06:27.340
error.

94
00:06:27.350 --> 00:06:34.280
Could not find file or read data and that's how this excepts works except I can look for a specific

95
00:06:34.370 --> 00:06:34.890
error.

96
00:06:35.120 --> 00:06:40.250
And then instead of actually outputting what the error would usually output and stopping all your code

97
00:06:40.550 --> 00:06:43.440
it prints error could not find the file or read data.

98
00:06:43.580 --> 00:06:47.200
And then we can have an else statement and then we can actually keep going.

99
00:06:47.210 --> 00:06:50.060
So let's say I have something outside of this that says Prince

100
00:06:52.870 --> 00:06:56.140
hello world save that run Python.

101
00:06:56.170 --> 00:06:56.900
Again.

102
00:06:57.070 --> 00:06:59.540
It says error cannot find file or read data.

103
00:06:59.680 --> 00:07:00.490
Hello world.

104
00:07:00.670 --> 00:07:06.850
So what this try except clause actually helps you do is handle errors and then continue on with your

105
00:07:06.850 --> 00:07:07.490
code.

106
00:07:07.720 --> 00:07:12.650
Let's imagine that I didn't actually use try that I just tried to do this without the sort of Bloch's

107
00:07:12.650 --> 00:07:13.140
like comment.

108
00:07:13.150 --> 00:07:22.450
All that out and then I just say f open simple text I say F right.

109
00:07:22.870 --> 00:07:29.940
And then if I scroll all the way down let's say after doing that I try to print hello world if I save

110
00:07:29.940 --> 00:07:36.390
this and run this I get back this IO error not write it will and I never actually output prints hello

111
00:07:36.390 --> 00:07:36.990
world.

112
00:07:37.050 --> 00:07:43.200
This was fatal to my actual up-I file and the way we can use try and accept is to make these sort of

113
00:07:43.200 --> 00:07:48.870
exceptions not unconditionally fatal meaning having your code being able to handle these sort of unexpected

114
00:07:49.170 --> 00:07:52.820
or in this case expected errors and continue on.

115
00:07:52.890 --> 00:07:54.460
And that's really the whole point of this.

116
00:07:54.660 --> 00:08:00.090
If you expect something wrong may occur or you have a certain condition that may actually mess up your

117
00:08:00.090 --> 00:08:00.620
code.

118
00:08:00.780 --> 00:08:04.560
You can counter it with an except clause.

119
00:08:04.560 --> 00:08:09.520
Now another thing you may be wondering is well how am I supposed to know what error is going to happen.

120
00:08:09.540 --> 00:08:11.860
I can't have all these error codes memorized.

121
00:08:12.000 --> 00:08:15.950
You know the basic one like syntax error or name error but you may not have known.

122
00:08:15.960 --> 00:08:22.170
I know there are other errors where you can do is you actually don't need to give any error code if

123
00:08:22.170 --> 00:08:26.660
you just have a general except here it's going to print on any sort of air.

124
00:08:26.910 --> 00:08:31.260
So let's save this and run this again on it's up-I.

125
00:08:31.350 --> 00:08:32.600
Report back on error.

126
00:08:32.610 --> 00:08:35.810
So you don't actually need to specify the specific error.

127
00:08:35.880 --> 00:08:40.180
So a lot of times you're going to be writing except they're OK.

128
00:08:40.440 --> 00:08:47.190
So now let's introduce the finally keyword and the finally key block of code will always be run regardless

129
00:08:47.190 --> 00:08:50.810
if there's an exception in the try code block.

130
00:08:50.920 --> 00:08:57.550
So right now if you look at our code structure we have try which tries to do something except which

131
00:08:57.550 --> 00:08:58.840
is going to report back.

132
00:08:58.840 --> 00:09:04.990
This block of code if there's an error here and then we have the else meaning if we don't actually have

133
00:09:04.990 --> 00:09:06.510
that exception we'll say.

134
00:09:06.510 --> 00:09:06.850
Else.

135
00:09:06.850 --> 00:09:09.140
Print success and then f close.

136
00:09:09.190 --> 00:09:11.170
But what if we actually get an error.

137
00:09:11.210 --> 00:09:15.740
But want to continue doing stuff inside of a block of code here.

138
00:09:15.820 --> 00:09:22.370
So instead of having like prints hello world out here what we can do is have the final keyword so I

139
00:09:22.370 --> 00:09:35.600
will add in a finally block and then I'm going to say Prince I always work no matter what.

140
00:09:35.670 --> 00:09:39.490
And then let's save this and run this.

141
00:09:39.810 --> 00:09:44.460
And we see here even though we got an error we always get the finally block to occur.

142
00:09:44.460 --> 00:09:48.180
So I always work no matter what OK.

143
00:09:48.190 --> 00:09:50.570
That's really all we need to know for now about try.

144
00:09:50.590 --> 00:09:51.130
Except.

145
00:09:51.130 --> 00:09:58.420
And finally as a quick note these try blocks are not invulnerable to all errors if you have an error

146
00:09:58.420 --> 00:10:01.260
that affects the try block itself.

147
00:10:01.270 --> 00:10:08.200
So for instance if I close this off and I have the try block continuing on I'm going to get an error

148
00:10:08.230 --> 00:10:08.740
here.

149
00:10:08.800 --> 00:10:13.740
So if I saved this and then try something like Python it's up-I.

150
00:10:13.810 --> 00:10:19.180
I will get here a syntax error and it's not caught by this except statement because the error is actually

151
00:10:19.180 --> 00:10:22.710
affecting the try except finally statement itself.

152
00:10:22.720 --> 00:10:28.090
So it thinks that all of this belongs to this string and you have some sort of syntax error there.

153
00:10:28.090 --> 00:10:30.860
So except is actually being messed up there.

154
00:10:30.880 --> 00:10:36.060
So again you don't actually usually use try her something like a simple syntax mistake.

155
00:10:36.190 --> 00:10:41.980
Use it for larger blocks of code that are usually interacted with some sort of user input.

156
00:10:41.980 --> 00:10:46.630
That way you can handle any user mistakes that happen to affect your code.

157
00:10:46.630 --> 00:10:49.180
Again the key words here are try except.

158
00:10:49.180 --> 00:10:54.520
And finally where are you going to try to execute some block of code you'll say except to try to catch

159
00:10:54.520 --> 00:10:55.570
certain exceptions.

160
00:10:55.690 --> 00:11:00.400
And a lot of times you're going to catch certain exceptions and print out something that's more useful

161
00:11:00.430 --> 00:11:02.080
than just syntax error.

162
00:11:02.080 --> 00:11:08.230
Invalid syntax something useful like hey you had an error using this specific operation.

163
00:11:08.230 --> 00:11:08.910
Check this out.

164
00:11:08.920 --> 00:11:14.690
Maybe review this line of code etc. and then you have the finally block which always works.

165
00:11:14.830 --> 00:11:16.740
Even if there's an exception.

166
00:11:16.750 --> 00:11:19.870
OK thanks everyone and I'll see you at the next lecture.
