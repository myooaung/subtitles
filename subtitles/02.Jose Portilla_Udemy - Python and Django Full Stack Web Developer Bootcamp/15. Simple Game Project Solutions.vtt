WEBVTT
1
00:00:04.700 --> 00:00:09.960
Hello everyone and welcome to the simple game project solutions lecture will be finishing off my follow

2
00:00:09.950 --> 00:00:11.060
one with this lecture.

3
00:00:11.060 --> 00:00:14.450
Are we going to be coding through the solutions for the game project.

4
00:00:14.450 --> 00:00:15.360
Let's get started.

5
00:00:15.560 --> 00:00:15.970
OK.

6
00:00:15.980 --> 00:00:20.540
Whenever we begin a project it's always a good idea to map out the steps we need to take to actually

7
00:00:20.540 --> 00:00:21.910
complete the tasks.

8
00:00:23.000 --> 00:00:27.000
For one thing I'm going to need to get the actual player guess.

9
00:00:27.090 --> 00:00:29.330
So that's one of the steps I need to do.

10
00:00:29.340 --> 00:00:34.970
The other thing I need to do is generate the computer code that's the three digit number.

11
00:00:36.810 --> 00:00:41.550
Then I also want to generate the clues.

12
00:00:41.680 --> 00:00:45.560
So that's going to be comparing the guest to the computer code that I generate.

13
00:00:46.460 --> 00:00:50.960
And then what I want to do is actually have some sort of logic that runs the game.

14
00:00:50.960 --> 00:00:56.520
So we'll call this run game logic OK.

15
00:00:56.670 --> 00:01:03.790
Let's get started with the simpler function of getting the guess sort of going to do here is say D E

16
00:01:03.880 --> 00:01:13.030
F get underscore guess and I won't take any actual parameters for this function.

17
00:01:13.030 --> 00:01:24.690
Instead what I'm going to do is return the input of what is your guess.

18
00:01:24.700 --> 00:01:27.990
So let's actually hear at the bottom where it says run game logic.

19
00:01:28.210 --> 00:01:36.460
Test this out by saying Get guess and then I'm going to save this as some variable called X and then

20
00:01:36.460 --> 00:01:40.570
let's say print TX.

21
00:01:40.780 --> 00:01:43.520
I will save this and let's run this.

22
00:01:43.530 --> 00:01:45.230
I will see Python.

23
00:01:45.280 --> 00:01:49.170
No it's not pi enter and I see a function.

24
00:01:49.170 --> 00:01:52.180
So actually Whoops forgot to call the function.

25
00:01:52.300 --> 00:01:53.950
And now let's run this.

26
00:01:53.960 --> 00:01:55.660
OK so what is your guess.

27
00:01:55.780 --> 00:02:02.920
I'm going to input let's say 1 2 3 enter and it types 1 to 3 out.

28
00:02:02.920 --> 00:02:09.950
Now let's check to see what type that is going to save this run this again.

29
00:02:10.060 --> 00:02:11.800
I'll put one two three is my guess.

30
00:02:11.800 --> 00:02:13.420
And it says it's a string.

31
00:02:13.420 --> 00:02:16.530
So I can see here that any input is a string.

32
00:02:16.540 --> 00:02:20.590
Now you can definitely work for string and you can index off of strings so I could say something like

33
00:02:21.020 --> 00:02:23.070
X 0 and then do stuff with it.

34
00:02:23.110 --> 00:02:24.720
But a string is also immutable.

35
00:02:24.790 --> 00:02:31.270
And I may want to play around with this object more so I will cast it to a list after the input.

36
00:02:31.270 --> 00:02:32.350
Again it's totally up to you.

37
00:02:32.360 --> 00:02:39.700
There's many ways you could have created this project but I'll just do that for safekeeping and now

38
00:02:39.760 --> 00:02:42.030
my guess function is complete.

39
00:02:42.280 --> 00:02:45.390
The next step is to generate some computer code.

40
00:02:45.600 --> 00:02:48.660
So there's the three digit number that the computer is going to generate.

41
00:02:48.770 --> 00:02:58.260
Then when I say generate code and then let's do it this way I'm going to create an object called digits

42
00:02:58.440 --> 00:03:03.540
and I will use a list comprehension to do it again you couldn't just use the for loop here but I will

43
00:03:03.540 --> 00:03:06.900
say string for

44
00:03:10.560 --> 00:03:13.780
an range 10.

45
00:03:13.800 --> 00:03:22.140
So here what I'm doing is I'm creating a list of every number from 0 to 9 and I'm going to cast it as

46
00:03:22.140 --> 00:03:22.900
a string.

47
00:03:24.230 --> 00:03:26.040
And then what I need to do is generate a code.

48
00:03:26.300 --> 00:03:30.290
So I will say this shuffle this digit.

49
00:03:30.320 --> 00:03:41.570
So I'm going to shuffle the digits then grab the first three after the shuffle and this is given to

50
00:03:41.590 --> 00:03:45.000
as a hint in the hint lecture.

51
00:03:45.000 --> 00:03:52.180
So I'll say import random and we'll talk about importing random and making your own modules later on.

52
00:03:52.180 --> 00:04:01.090
But this will allow you to say random shuffle and pass in our digits list and then when I grab the first

53
00:04:01.090 --> 00:04:12.010
three I'm going to do here say return digits whoops colon three.

54
00:04:12.080 --> 00:04:15.920
So I've created digits shuffle them and then return the first three.

55
00:04:15.980 --> 00:04:21.080
So that should give me a random three digit code that is completely unique.

56
00:04:21.110 --> 00:04:24.810
So all the numbers are unique because I used range 0 tonight.

57
00:04:25.740 --> 00:04:31.080
Next I want to generate the clues and this probably the harder part both a little bit logic and control

58
00:04:31.080 --> 00:04:31.620
flow.

59
00:04:31.620 --> 00:04:38.670
We should be able to manage it I'm going to create a function called Let's just call it generate Kloos

60
00:04:41.080 --> 00:04:46.540
and it will take in the code that the computer did and then the user

61
00:04:48.950 --> 00:04:52.970
gets so the user is going to make some guess.

62
00:04:52.970 --> 00:04:58.100
So this again is going to take any user guess in some code and I compared the numbers in a loop and

63
00:04:58.100 --> 00:05:01.730
it's going to create a list of clues according to the matching parameters.

64
00:05:01.730 --> 00:05:09.550
So first off I'm going to say if the user guess is equal to the computer code I'm just going to return

65
00:05:12.850 --> 00:05:17.150
code cracked because if the guess is the same as the computer Curt Weldon we're all done here.

66
00:05:17.170 --> 00:05:20.040
So that's a very first thing I should check next.

67
00:05:20.170 --> 00:05:26.230
If that has happened and going to create a list an empty list right now called clues and I will keep

68
00:05:26.230 --> 00:05:31.260
adding to it as I go through the user gets.

69
00:05:31.340 --> 00:05:38.670
So something I can do here is use enumerate and let me show you what enumerate actually does and going

70
00:05:38.670 --> 00:05:44.230
to say for I N.Z. numb in enumerate.

71
00:05:44.310 --> 00:05:46.330
And you don't have to use enumerate but you can.

72
00:05:46.560 --> 00:05:53.130
Basically what it does is it allows you to instead of having to do something like Count equals zero

73
00:05:53.910 --> 00:05:56.040
or to make this a more realistic sample.

74
00:05:56.070 --> 00:06:03.800
I Endy is equal to zero and then come in here and say something like I N D is equal to I n the plus

75
00:06:03.800 --> 00:06:04.650
1.

76
00:06:04.820 --> 00:06:10.070
If I just want the actual index I can use enumerate which is going to enumerate starting at zero for

77
00:06:10.070 --> 00:06:10.420
me.

78
00:06:13.560 --> 00:06:15.810
And then I'm going to put in the user guess

79
00:06:18.530 --> 00:06:27.590
and then I will say if number is equal to code I and the I'm going to append

80
00:06:30.970 --> 00:06:31.860
match.

81
00:06:32.230 --> 00:06:33.470
So what does this actually mean.

82
00:06:33.490 --> 00:06:40.120
Well I'm going to with enumerate go through the user guess and using tuple and packing and unpacking

83
00:06:40.120 --> 00:06:44.720
two things the actual index location and then the number itself.

84
00:06:44.770 --> 00:06:52.500
And I'm saying if the number is equal to the code index locations remember I'm going through user guess.

85
00:06:52.500 --> 00:06:59.160
So I'm saying if the current number and user guesses equal to the number of the code at the same index

86
00:06:59.190 --> 00:07:00.960
location that I know I have a match.

87
00:07:00.990 --> 00:07:04.500
So append the word match to my list of clues.

88
00:07:05.960 --> 00:07:11.540
Then I'm going to say Elif numb is in code.

89
00:07:11.780 --> 00:07:12.590
So what does that mean.

90
00:07:12.600 --> 00:07:14.830
Well I know the name is somewhere in the code.

91
00:07:17.580 --> 00:07:25.140
Then I will say Kloos append close.

92
00:07:25.170 --> 00:07:28.370
So I'm saying hey you didn't get a match but you're pretty close.

93
00:07:28.570 --> 00:07:30.440
And pay attention to the ordering here.

94
00:07:30.520 --> 00:07:34.660
I'm saying if there's a match then check that first.

95
00:07:34.990 --> 00:07:38.150
Then if the name is in the code a the close.

96
00:07:38.350 --> 00:07:43.570
I can't have this go in another order so I can't check for close first.

97
00:07:43.600 --> 00:07:47.210
Otherwise I would always skip overmatch.

98
00:07:47.290 --> 00:07:48.640
So pay attention to the ordering.

99
00:07:48.640 --> 00:07:52.120
Here it's kind of important for the specific case.

100
00:07:52.120 --> 00:07:58.270
Otherwise if I didn't actually have a match or a close one I'm going to do is start off with another

101
00:07:58.280 --> 00:08:03.600
if statement where I say if Kloos is empty.

102
00:08:03.710 --> 00:08:05.380
So after going for the for loop.

103
00:08:05.510 --> 00:08:15.810
If the clues is empty then all I'm going to do is return a list of a single item that says nope.

104
00:08:15.980 --> 00:08:17.330
And then I will say else

105
00:08:19.860 --> 00:08:21.000
return clues.

106
00:08:21.000 --> 00:08:22.950
So what does this actually mean.

107
00:08:22.950 --> 00:08:24.380
Well let's break it down.

108
00:08:25.990 --> 00:08:29.470
And I'm going to zoom out a little bit so he can see the entire function.

109
00:08:29.470 --> 00:08:31.030
Will you break it down.

110
00:08:31.090 --> 00:08:34.410
OK first off I just want to check if the user gets matches a code.

111
00:08:34.450 --> 00:08:37.420
If it does I've cracked it and we're ready to go.

112
00:08:37.420 --> 00:08:40.930
Otherwise what I'm going to do is to find an empty list called clues.

113
00:08:41.050 --> 00:08:47.180
And then using the special enumerate function I'm going to go through the index and numbers again.

114
00:08:47.200 --> 00:08:53.170
You could have done this without enumerate by just saying indexical 0 and then adding to index for every

115
00:08:53.170 --> 00:08:53.670
iteration.

116
00:08:53.680 --> 00:08:54.660
This for loop.

117
00:08:54.700 --> 00:08:57.390
But this is kind of just say convenience function.

118
00:08:57.590 --> 00:09:04.180
Then I will say if the number the user guess is equal to the code at the specific index location that

119
00:09:04.180 --> 00:09:05.970
is going to append the word.

120
00:09:06.310 --> 00:09:12.000
Else if the number is in the code then I append close and note the order here.

121
00:09:12.010 --> 00:09:15.350
I write the check for the match first before I check if it's close or not.

122
00:09:16.870 --> 00:09:21.340
Then if I go through this entire for loop includes a still empty meaning there was no match or there

123
00:09:21.340 --> 00:09:26.980
was no close and willing to return no else I'll just return clues.

124
00:09:27.040 --> 00:09:30.900
Next it's time to add in some game logic so I'll show you how we can do this.

125
00:09:32.550 --> 00:09:34.110
I'm going to print something like

126
00:09:37.200 --> 00:09:47.570
welcome codebreaker and then I will generate a secret code so I'll make some variable called secret

127
00:09:47.570 --> 00:09:48.270
code.

128
00:09:51.020 --> 00:09:56.590
And said equal to generate code remember generate code returns the computer's code.

129
00:09:56.930 --> 00:10:04.560
So that's the secret code and then I'm going to also say make some very well called Clear report and

130
00:10:04.560 --> 00:10:06.930
set that equal to an empty list.

131
00:10:08.340 --> 00:10:14.580
Well let's try to follow snake case here and then I want to keep asking this until the code is cracked.

132
00:10:14.580 --> 00:10:23.530
So while clu report is not equal to the string code cracked.

133
00:10:23.530 --> 00:10:25.890
Now let's make sure that matches exactly appear.

134
00:10:26.230 --> 00:10:31.970
OK so while it's not this here's one I'm going to do.

135
00:10:32.030 --> 00:10:36.150
I'm going to set my guess equal to

136
00:10:39.120 --> 00:10:45.360
guess close princes and then what I want to do is say

137
00:10:49.460 --> 00:11:01.710
clear report is equal to generate Kloos of the user guess and the secret code.

138
00:11:02.290 --> 00:11:04.470
Then I'm going to print.

139
00:11:05.130 --> 00:11:08.240
Here's the result of your guess.

140
00:11:10.070 --> 00:11:14.980
And actually save for clue inside the clear.

141
00:11:14.980 --> 00:11:18.940
Poor print the clue.

142
00:11:19.110 --> 00:11:24.000
And this keeps going over and over and over again until I actually have a clue report that says code

143
00:11:24.020 --> 00:11:26.980
cracked because remember generate Kloos returns.

144
00:11:27.000 --> 00:11:31.280
This string could crack once have actually gotten the correct code.

145
00:11:31.920 --> 00:11:35.720
So let's run this and see if we can actually play again.

146
00:11:35.900 --> 00:11:40.550
When say Python notes stop PI enter.

147
00:11:40.570 --> 00:11:45.700
Looks like an invalid syntax right now so I say it's Kloos equal to whoops that should be two equal

148
00:11:45.700 --> 00:11:49.920
signs so let's check that that's happening at line 29.

149
00:11:49.960 --> 00:11:53.800
Scroll back up we'll save clues double equal sign.

150
00:11:53.860 --> 00:11:59.710
Save this then you can always reference the core solution notes to get the actual correct code.

151
00:11:59.710 --> 00:12:01.880
Now I get Python notes that pi perfect.

152
00:12:01.900 --> 00:12:04.690
Welcome Codebreaker what is your guess I'm going to guess.

153
00:12:04.690 --> 00:12:08.230
One two three enter and here is the result to be a guess.

154
00:12:08.230 --> 00:12:09.660
It says match match.

155
00:12:09.910 --> 00:12:15.990
So let's confirm this by typing something like five six seven and we get close.

156
00:12:16.030 --> 00:12:17.450
So that's interesting means.

157
00:12:17.470 --> 00:12:20.860
One of the extra numbers is 1 5 6 or 7.

158
00:12:20.860 --> 00:12:24.900
So that means if I say 8 9 0 it should give me none.

159
00:12:25.100 --> 00:12:26.280
Nope perfect.

160
00:12:26.290 --> 00:12:28.220
So looks like my game is working so far.

161
00:12:28.360 --> 00:12:36.320
So now it's just time of guessing 3 to 6 6 3 to 6 to 3.

162
00:12:36.330 --> 00:12:36.610
All right.

163
00:12:36.610 --> 00:12:39.160
Looks like the code is cracked with 6 to 3.

164
00:12:39.190 --> 00:12:40.390
Great.

165
00:12:40.390 --> 00:12:40.870
All right.

166
00:12:40.870 --> 00:12:44.620
So if you have any questions on how to do that project or what was going on.

167
00:12:44.620 --> 00:12:48.990
Feel free to post the Q&amp;A forums and make sure you walk through the solutions code yourself.

168
00:12:49.030 --> 00:12:52.520
This is just one simple example of how you could have done this problem.

169
00:12:52.540 --> 00:12:57.040
There are many many ways you could have done this project and you could have added more to it.

170
00:12:57.040 --> 00:12:58.800
It's really up to you how far you want to go.

171
00:12:58.810 --> 00:13:02.170
But again if you have any questions feel free to post the Kewney forums.

172
00:13:02.170 --> 00:13:04.090
Thanks everyone and I'll see you at the next lecture.
