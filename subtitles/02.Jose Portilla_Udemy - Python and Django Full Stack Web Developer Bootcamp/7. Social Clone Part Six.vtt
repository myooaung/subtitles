WEBVTT
1
00:00:05.510 --> 00:00:09.190
Hello everyone and welcome to part six of the social club project.

2
00:00:09.710 --> 00:00:14.620
Well we're going to be doing now is after we've created the directories and files for groups and posts

3
00:00:14.930 --> 00:00:19.820
we will actually build out the models that PI files for both groups and post applications.

4
00:00:19.820 --> 00:00:20.930
Let's get started.

5
00:00:21.280 --> 00:00:21.730
OK.

6
00:00:21.730 --> 00:00:26.870
The first models not py file are going to be working with is the group's models that py file.

7
00:00:26.870 --> 00:00:30.900
And then once this one is ready to go we'll move over to the post models that py file.

8
00:00:31.070 --> 00:00:36.320
So right now under groups open up models up PI and then you can type along with me and then double checked

9
00:00:36.320 --> 00:00:38.250
against the provided NOTES.

10
00:00:38.360 --> 00:00:46.220
I'm going to say from Django that you tildes thought you'd tildes text import and I'm going to be importing

11
00:00:46.220 --> 00:00:52.400
slug ephi and slug file just allows us to remove any characters that are alphanumerics or underscores

12
00:00:52.400 --> 00:00:57.290
or hyphens and basically the idea behind that is if you have a string that has spaces in it and you

13
00:00:57.290 --> 00:01:02.670
want to use that as part of your R-AL it's going to be able to lowercase and add dashes instead of spaces.

14
00:01:02.720 --> 00:01:04.580
That way it works if your browser.

15
00:01:04.670 --> 00:01:10.790
So we have slug a fine and then I'm also going to import something called Misaka and that allows us

16
00:01:10.790 --> 00:01:13.080
to actually do Lincoln betting.

17
00:01:13.370 --> 00:01:18.470
If you've ever use something like redit commenting system you can actually put links are a little bit

18
00:01:18.470 --> 00:01:21.530
a mark down text that that's what Misaka actually does.

19
00:01:21.560 --> 00:01:23.870
Now in order to use this when you actually install it.

20
00:01:23.930 --> 00:01:33.200
So open up your terminal and then say pitte install Misaka hit enter and then my requirements were satisfied

21
00:01:33.200 --> 00:01:34.720
because I already installed it earlier.

22
00:01:34.880 --> 00:01:39.390
But in your virtual environment again just type out Pippin's tall am I.

23
00:01:39.510 --> 00:01:40.390
Aka.

24
00:01:40.450 --> 00:01:44.220
And again is going to allow us to use markdown inside of these posts.

25
00:01:44.270 --> 00:01:52.590
So I'm going to minimize this once that we've done that and the next thing to do is say from jingo dot

26
00:01:52.610 --> 00:02:00.970
contrib dot 88 so that authorization I'm going to import a function called Get user model and that returns

27
00:02:00.970 --> 00:02:04.160
the user model that's currently active in this project.

28
00:02:04.210 --> 00:02:09.330
So I'm going to be able to do that to create a user object so get user model.

29
00:02:09.580 --> 00:02:15.950
And essentially what that allows me to do is call things off of the current user's session and that

30
00:02:15.950 --> 00:02:19.370
will make more sense once we actually call things off this user.

31
00:02:19.370 --> 00:02:24.260
So we'll save that for now and then the last thing I wanted to do which I'm not going to able to explain

32
00:02:24.860 --> 00:02:29.580
right now but you'll see it in the future when we actually deal a template that uses it.

33
00:02:29.610 --> 00:02:38.210
I'm going to say from Django import template and then say register is equal to template library and

34
00:02:38.210 --> 00:02:39.260
we'll talk about that later.

35
00:02:39.260 --> 00:02:44.440
But basically this is how we can use custom template tags in the future.

36
00:02:44.450 --> 00:02:50.780
So later on I'm going to have an in-group members check templates and we're actually dealing with the

37
00:02:50.780 --> 00:02:54.130
group HVM files and that's going to come in handy here.

38
00:02:54.140 --> 00:02:58.140
So keep us in the back of your mind you're not going to see it used until a future lecture but we're

39
00:02:58.140 --> 00:02:59.600
going to go ahead and type it in now.

40
00:02:59.900 --> 00:03:00.540
OK.

41
00:03:00.770 --> 00:03:02.870
Now it's time for actual made model.

42
00:03:02.870 --> 00:03:10.920
It's group some would say class group and this is going to inherit from models that model and right

43
00:03:10.920 --> 00:03:16.530
now I'll just say pass because I want to add in one more class here which is the group member class

44
00:03:16.650 --> 00:03:24.270
to have groups and then group members will see group members and then we'll say models the model and

45
00:03:24.270 --> 00:03:27.740
then here I will also say pass and then save.

46
00:03:27.950 --> 00:03:28.220
OK.

47
00:03:28.230 --> 00:03:30.400
So the simpler one is actually the group member.

48
00:03:30.420 --> 00:03:33.620
So that's all work on first and then we'll have group itself.

49
00:03:33.750 --> 00:03:39.420
Let me collapse see the victory tree and get a little more space under group and then once we fill this

50
00:03:39.420 --> 00:03:41.280
out we'll remove the pass.

51
00:03:41.340 --> 00:03:47.310
So in class group member what I'm going to do is create a group attribute and that's going to be linked

52
00:03:47.700 --> 00:03:51.420
with a foreign key to the group class.

53
00:03:51.430 --> 00:03:55.740
So we'll say group and then we'll give a related name and the related name.

54
00:03:55.740 --> 00:03:58.240
I'm going to call it membership's.

55
00:03:58.450 --> 00:04:04.120
And essentially that means that the group member is related to the group class through the foreign key

56
00:04:04.150 --> 00:04:06.280
which we've called membership's which makes sense.

57
00:04:06.280 --> 00:04:11.770
A group member can have a membership to a group and then will have a user also be an attribute.

58
00:04:11.950 --> 00:04:18.900
And that's going to be models foreign key and that's going to be a link to user and the related name

59
00:04:18.930 --> 00:04:22.660
is going to be user underscore groups.

60
00:04:22.680 --> 00:04:27.750
So essentially we'll have a user that we get from here that current user that's logged in and playing

61
00:04:27.840 --> 00:04:32.310
out the Web site and they're going to have some groups that they belong to or that they're going to

62
00:04:32.310 --> 00:04:33.180
be a member of.

63
00:04:33.180 --> 00:04:37.870
So we want to link this group member class to both the user and the various groups that the user could

64
00:04:37.890 --> 00:04:38.970
belong to.

65
00:04:38.970 --> 00:04:39.780
So we have that.

66
00:04:39.900 --> 00:04:47.880
And then finally let's add an ADF call for a string representation of the object passes itself and then

67
00:04:47.880 --> 00:04:57.030
I'm going to return self user dot username so you remember when we're creating the accounts application

68
00:04:57.030 --> 00:05:00.600
we had a user and remember users can have user names.

69
00:05:00.630 --> 00:05:03.220
And that's we're going to be using for the string representation.

70
00:05:03.540 --> 00:05:09.990
So I will save that and then we want to add in one more subclass here at the meta.

71
00:05:10.290 --> 00:05:18.920
And here I'm going to call unique together so unique underscore together and say equals to

72
00:05:22.070 --> 00:05:23.180
and user.

73
00:05:23.230 --> 00:05:25.260
And we'll explain later on what that actually means.

74
00:05:25.280 --> 00:05:28.250
But right now that's all we need in the actual group member.

75
00:05:28.250 --> 00:05:31.750
Class we have the link to the group to the user.

76
00:05:31.880 --> 00:05:32.630
The string method.

77
00:05:32.630 --> 00:05:36.970
And then this unique together for group and user and then we will save that.

78
00:05:36.980 --> 00:05:42.350
Now it's time to deal with this larger group class or group model.

79
00:05:42.350 --> 00:05:47.540
So this group model or model class is going to have an attribute called name which is going to be the

80
00:05:47.540 --> 00:05:50.730
actual name of the group that's going to just be models.

81
00:05:50.790 --> 00:05:58.030
It will be a character field and we'll give it a max length of let's say fifty five.

82
00:05:58.040 --> 00:05:59.310
Doesn't really matter.

83
00:05:59.420 --> 00:06:06.240
And then I need unique to be equal to true because I don't want groups to have overlapping group names.

84
00:06:06.500 --> 00:06:12.170
So once we have that the next thing to do is say slug and the group is going to have a slug which is

85
00:06:12.170 --> 00:06:21.060
going to be at models a slug field and I'm going to allow underscore Unicode equal to true.

86
00:06:21.530 --> 00:06:24.320
And then I'm also going to require that this is unique that way.

87
00:06:24.440 --> 00:06:30.130
I don't get any mistakes calling a moral code and I make sure that group slug's and group names don't

88
00:06:30.140 --> 00:06:38.630
accidentally overlap each other then we will have a description field as well or attribute and then

89
00:06:38.630 --> 00:06:42.610
we will say this is a text field and it can be blank.

90
00:06:42.620 --> 00:06:43.970
We'll let it be blank.

91
00:06:44.010 --> 00:06:45.670
Or actually let's not let it be blank.

92
00:06:45.680 --> 00:06:47.810
Someone should always have a description for the group.

93
00:06:47.960 --> 00:06:52.020
So we'll say has to be true will make the default value be blank.

94
00:06:52.040 --> 00:06:55.110
So default value is just going to be a blank string.

95
00:06:55.130 --> 00:06:56.660
So I have two single quotes there.

96
00:06:57.020 --> 00:07:01.940
And that's going to be the description for the group and then we're going to add another attribute called

97
00:07:02.000 --> 00:07:08.530
description description underscore HVM L which you may find useful in the future.

98
00:07:08.530 --> 00:07:11.810
But right now we'll just type it in whether or not we're going to use it.

99
00:07:11.920 --> 00:07:17.800
And it's just going to be a text field where we say edible where whether or not you can edit it will

100
00:07:17.800 --> 00:07:19.260
set it equal to false.

101
00:07:19.420 --> 00:07:21.770
The default value is going to be a blank string.

102
00:07:21.820 --> 00:07:28.260
And we're going to say that it can be blank in case we want a kind of HTL version of our description.

103
00:07:28.390 --> 00:07:34.840
And then finally the members of a group is going to be equal to models and this is a many to many field

104
00:07:36.070 --> 00:07:42.730
so many to many field and it's going to pass in a user object and then the through argument is going

105
00:07:42.730 --> 00:07:46.750
to be through a member class.

106
00:07:46.760 --> 00:07:47.580
There we go.

107
00:07:47.980 --> 00:07:53.170
OK so now we have the basic attributes for our group and we're going to add in a couple of methods.

108
00:07:53.390 --> 00:07:59.600
So the first method we're just going to say as to your pasand self and this is just going to be the

109
00:07:59.600 --> 00:08:03.010
string representation of a group object where it's going to return.

110
00:08:03.200 --> 00:08:08.030
Self-taught name so the group string representation is just the name of the group.

111
00:08:08.030 --> 00:08:13.090
Next we're going to say save So when you want to save a group we're going to do the following.

112
00:08:13.310 --> 00:08:18.060
We'll take in args and keyword arguments.

113
00:08:20.170 --> 00:08:29.650
And then we'll set the slug of the group once you're saving it to slug ify self-taught name which means

114
00:08:29.650 --> 00:08:33.550
whatever the name is you can go ahead and put spaces in it while you're filling out the group form.

115
00:08:33.550 --> 00:08:40.550
But then when we actually save it the slog will become the slug if I call on self-taught name essentially

116
00:08:40.550 --> 00:08:48.940
just replacing and lower casing things and then we will say self description HVM else so that extra

117
00:08:48.940 --> 00:08:56.370
attribute that we created that's going to be equal to Misaka that each team will allow us to put markdown

118
00:08:56.370 --> 00:09:01.050
in their self description.

119
00:09:01.110 --> 00:09:01.610
There we go.

120
00:09:01.610 --> 00:09:06.750
So in case we have marked down in the description I can call it with Misaka h t m l and then finally

121
00:09:06.750 --> 00:09:16.470
we'll say super well to save our args and keyword arguments.

122
00:09:16.470 --> 00:09:22.020
OK so that's going to be our Save method for the group and then I'm going to get another method called

123
00:09:22.080 --> 00:09:35.760
Get absolute's underscore your L self and then this is going to return a reverse call of groups single.

124
00:09:35.790 --> 00:09:37.430
And right now we haven't actually defined.

125
00:09:37.480 --> 00:09:38.150
Are you URLs.

126
00:09:38.200 --> 00:09:40.140
Py file so keep that in mind.

127
00:09:40.200 --> 00:09:44.820
Later I will explain more about what groups and single is but that's going to be a reverse and we're

128
00:09:44.820 --> 00:09:47.780
going to add in some keyword arguments.

129
00:09:47.790 --> 00:09:52.770
Basically a dictionary where the slug is equal to self-taught slug

130
00:09:56.000 --> 00:09:56.440
OK.

131
00:09:56.660 --> 00:10:03.290
And then finally we will have a medic class call and we'll say ordering is equal to.

132
00:10:03.330 --> 00:10:08.060
And this has to be fast and has a list name save that it was kind of explain.

133
00:10:08.060 --> 00:10:09.220
Overall we just did.

134
00:10:09.450 --> 00:10:15.120
So we set up our group class as well as our group member class group member just connects to a group

135
00:10:15.120 --> 00:10:19.970
that this group member belongs to and a user that connects to the sexual individual member and the stronger

136
00:10:19.970 --> 00:10:24.760
representation is a username that we have or actual group class or group model.

137
00:10:24.900 --> 00:10:30.480
The name of the group the slug representation that group the description of that group and then a description

138
00:10:30.480 --> 00:10:35.730
that is to description underscore each T.M. that we're going to use with moussaka to actually get some

139
00:10:35.780 --> 00:10:41.190
marked on text and then we will call members which is just many many fields so all the members that

140
00:10:41.190 --> 00:10:45.250
belong to this particular group and that so far is all we have to do with the models.

141
00:10:45.270 --> 00:10:49.310
Py file underneath the group's application.

142
00:10:49.320 --> 00:10:53.540
OK now let's hop over to the models that py file in the posts applications.

143
00:10:53.540 --> 00:10:59.420
I will save this models PI come over to pose models that pi and then collapses.

144
00:10:59.410 --> 00:11:07.960
So right now this is the most models up-I file that we're going to be editing.

145
00:11:07.970 --> 00:11:08.360
All right.

146
00:11:08.360 --> 00:11:11.260
So the first thing I want to do here is couple of imports.

147
00:11:11.300 --> 00:11:22.760
So for the posts I'm going to say from Jane with that core that your resolvers import reverse that way

148
00:11:22.760 --> 00:11:27.640
when someone does a post or we're going to kind of send them back to and then the other thing I'm going

149
00:11:27.640 --> 00:11:37.760
to say is from Django that CNF import settings going to import moussaka.

150
00:11:37.810 --> 00:11:42.060
Again that way people can write Mark down inside of their actual post.

151
00:11:42.100 --> 00:11:50.140
And then we will say from groups models import group so we can connect the post to an actual group.

152
00:11:50.140 --> 00:11:54.150
And then finally we can do this Billos comment kind of up to you wherever you want to put it.

153
00:11:54.160 --> 00:11:58.250
We'll say from jingo dot contrib.

154
00:11:58.550 --> 00:12:08.950
Th for authorization in poor get user model and it will create a user object saying get user model and

155
00:12:09.160 --> 00:12:13.340
that's just going to connect the current post to whoever's like logged in as a user.

156
00:12:13.350 --> 00:12:21.320
That way you can actually get the current user logged into a session not going to say class post models

157
00:12:21.330 --> 00:12:25.390
that model and I just put it past right there for now.

158
00:12:25.610 --> 00:12:27.430
And we're going to do a couple of things.

159
00:12:27.430 --> 00:12:32.910
One is that at the boots for post sort of the string representation method the Save method and then

160
00:12:32.930 --> 00:12:37.610
the absolute Your method which means once someone has posted something where are we going to send them.

161
00:12:37.620 --> 00:12:40.940
And we'll have a medic class for other information.

162
00:12:41.190 --> 00:12:44.680
So I'm going to now get rid of that past and start typing that out.

163
00:12:44.920 --> 00:12:45.170
OK.

164
00:12:45.180 --> 00:12:51.070
So we have user and that's going to be models and there'll be a foreign key to a user.

165
00:12:51.110 --> 00:13:01.900
Basically this current user and I will say related name is equal to Persse I'll create a field called

166
00:13:01.900 --> 00:13:03.200
created that.

167
00:13:03.700 --> 00:13:08.410
And that's going to be equal to models that will be a date time field.

168
00:13:09.660 --> 00:13:16.140
And I'm going to have the auto now is equal to true that way once someone post the actual date time

169
00:13:16.140 --> 00:13:16.880
that they post.

170
00:13:17.060 --> 00:13:18.450
It's just automatically connected.

171
00:13:18.450 --> 00:13:20.430
So you don't actually fill in the time you posted.

172
00:13:20.580 --> 00:13:26.340
It's just auto generated for you and you can display that or not display it's kind of up to you but

173
00:13:26.340 --> 00:13:29.420
will have that information inside or adamant models.

174
00:13:29.490 --> 00:13:31.820
So then I'm going to say message.

175
00:13:31.920 --> 00:13:37.570
So what's actually the message in that post that's going to be equal to models textfield and all these

176
00:13:37.590 --> 00:13:38.900
old defaults there.

177
00:13:38.940 --> 00:13:41.130
I don't want to really put a max length on that right now.

178
00:13:41.430 --> 00:13:48.150
And then the HDMI out markdown version of this same message underscore each Steimle that's going to

179
00:13:48.150 --> 00:13:49.720
be equal to models.

180
00:13:49.930 --> 00:13:52.910
Textfield but I don't want people to be able to edit that.

181
00:13:53.010 --> 00:13:58.830
So I'll say editable is equal to false because we're going to basically grab that directly from message

182
00:13:58.830 --> 00:14:05.220
and you'll see that in a second and then one last attribute here I will say a group that's going to

183
00:14:05.230 --> 00:14:13.520
models foreign key foreign key and that's going to connect to group which we remember imported from

184
00:14:13.580 --> 00:14:14.930
are grouped up models.

185
00:14:14.930 --> 00:14:18.260
So this post is connected with a foreign key to a group.

186
00:14:18.430 --> 00:14:25.210
It has a related name of posts and then we'll say Knoll's equal to true.

187
00:14:25.370 --> 00:14:29.280
And then we will say blank is equal to true.

188
00:14:30.000 --> 00:14:36.200
OK so are four key can be knowledge can be Blinkx true but we'll take care of that in further detail.

189
00:14:36.210 --> 00:14:37.710
The templates themselves.

190
00:14:37.710 --> 00:14:40.550
But let's go through those methods that we we're going to do.

191
00:14:40.550 --> 00:14:47.880
So first one is the string representation of this and that that's just going to be the actual message

192
00:14:47.880 --> 00:14:57.820
the post will say return self-taught message the next one I want to do is the Save method that's going

193
00:14:57.820 --> 00:15:06.070
to look similar to what we've been doing in the past where we have args our keyword arguments K args.

194
00:15:06.100 --> 00:15:07.220
KW args.

195
00:15:07.600 --> 00:15:17.940
And then there will be self message underscore each Tamil is equal to Misaka each T.M. of self-taught

196
00:15:17.940 --> 00:15:19.410
message.

197
00:15:19.530 --> 00:15:24.450
That way if someone writes in a mark down so they put a link in their post it doesn't look like a strange

198
00:15:24.450 --> 00:15:29.320
imitation of Bracken's stuff it actually is supported with the H T.M. from Misaka.

199
00:15:29.610 --> 00:15:31.200
And then we're going to say super

200
00:15:34.210 --> 00:15:35.000
save.

201
00:15:35.020 --> 00:15:40.100
And then again the arcs and the keyword arguments.

202
00:15:40.250 --> 00:15:42.170
All right so that's the Save method.

203
00:15:42.210 --> 00:15:47.700
And then finally we're going to do the last method get absolute URL for that will do.

204
00:15:47.700 --> 00:15:50.100
Class Mehtar are a subclass.

205
00:15:50.100 --> 00:15:56.960
So the get absolute You are all going to say self and this is going to return the following.

206
00:15:56.960 --> 00:15:58.570
Let me put some more lines in here.

207
00:15:59.660 --> 00:16:08.490
This is going to return the reverse function call and we will passen posts single.

208
00:16:08.530 --> 00:16:12.520
So again we haven't set up the actual you or else but that will be set up eventually and then it's also

209
00:16:12.520 --> 00:16:18.520
going to take in some keyword arguments which is going to be a dictionary of the username that will

210
00:16:18.520 --> 00:16:19.390
be self-taught.

211
00:16:19.390 --> 00:16:27.140
User thought user name and then the other thing that's going to go on here is the primary key.

212
00:16:27.230 --> 00:16:32.970
So we're going to be kind of using primary keys as a way to relate to post back to your l.

213
00:16:32.990 --> 00:16:39.650
That's going to be equal to self-taught primary key and that should be it for the actual get.

214
00:16:39.780 --> 00:16:42.640
Absolutely or alcohol.

215
00:16:42.730 --> 00:16:43.930
Then we're going to say class Metta

216
00:16:46.710 --> 00:16:52.170
will say ordering is equal to which they created at.

217
00:16:52.180 --> 00:16:54.200
But notice I put a minus sign here.

218
00:16:54.230 --> 00:16:59.810
That way we see him in descending order so the most recent posts are at the top and then we will say

219
00:16:59.840 --> 00:17:05.250
unique underscore together is equal to.

220
00:17:05.250 --> 00:17:07.800
And that's going to be realistic and also be a tuple.

221
00:17:07.820 --> 00:17:11.110
It was a user message.

222
00:17:11.390 --> 00:17:11.980
OK.

223
00:17:12.320 --> 00:17:17.470
That way every message is uniquely linked to a user.

224
00:17:17.510 --> 00:17:22.780
All right so those are the models that Pif for files for posts and groups.

225
00:17:22.790 --> 00:17:24.290
Now we definitely get a lot of typing here.

226
00:17:24.290 --> 00:17:30.110
So double check that you match up to the supplied notes in case you were were able to follow along or

227
00:17:30.110 --> 00:17:31.960
were looking down and typing etc..

228
00:17:32.120 --> 00:17:37.580
So always check against the actual provided by files and coming up next we're going to expand on these

229
00:17:37.580 --> 00:17:41.890
models that py files and begin to work with them using our views not pie.

230
00:17:42.080 --> 00:17:44.600
All right thanks everyone and I'll see you at the next lecture.
