1
00:00:05,700 --> 00:00:11,520
Hello everyone and welcome back in this lecture we're going to quickly cover some more your L mappings

2
00:00:11,520 --> 00:00:12,330
methods.

3
00:00:13,420 --> 00:00:18,890
So as we continue on throughout the course we're going to be dealing with mapping or else quite a bit.

4
00:00:18,910 --> 00:00:20,580
There are several ways of doing this.

5
00:00:20,590 --> 00:00:25,950
So I want to briefly touch upon another way but first off let's review what we've done in the past.

6
00:00:26,020 --> 00:00:33,140
Previously we showed a very direct mapping that imported the views of Pi file directly into the thought

7
00:00:33,380 --> 00:00:35,380
pie of your projects.

8
00:00:35,440 --> 00:00:41,490
So you're connecting your views of your application to the or else that py file of the project itself.

9
00:00:41,500 --> 00:00:46,990
Now we want to do is show you the ability of using the include function that you can import from a Django

10
00:00:47,050 --> 00:00:54,540
module the include function allows us to look for a match with Figler expressions and link back to our

11
00:00:54,540 --> 00:00:57,590
application's Own Your else thought py file.

12
00:00:57,750 --> 00:01:03,630
That way each application has its own your L's py file as a quick note we'll have to manually add in

13
00:01:03,660 --> 00:01:08,940
this Yarl's py file because when you start your application it doesn't automatically create one for

14
00:01:08,940 --> 00:01:09,380
you.

15
00:01:09,660 --> 00:01:14,040
Unlike when you start your project it does create the Oreilles that PI file for the project.

16
00:01:15,400 --> 00:01:21,190
So we would want to do is add the following to the project's Uriel's that PI file will add that first

17
00:01:21,190 --> 00:01:27,030
line which basically imports that include function and then where it says the usual patterns list.

18
00:01:27,040 --> 00:01:28,480
We've worked with before.

19
00:01:28,570 --> 00:01:34,450
What you will do is called the function from before and then add in a regular expression as a first

20
00:01:34,450 --> 00:01:35,020
argument.

21
00:01:35,050 --> 00:01:41,320
And basically what this regular expression does is it just says OK look at your domain name slash and

22
00:01:41,320 --> 00:01:48,250
then whatever that string is in the first regular expression slash and then call the app your Elle's

23
00:01:48,310 --> 00:01:53,950
from the include function and this will all make a lot more sense when we actually code this out later

24
00:01:53,950 --> 00:01:54,160
on.

25
00:01:54,180 --> 00:01:56,770
But just to touch upon what I just explained.

26
00:01:57,070 --> 00:02:02,770
Basically what this does it's allowing us to look for any URL that has this sort of pattern.

27
00:02:02,770 --> 00:02:09,370
Bill GWW that domain name dot com slashed first underscore app or whatever you happen to have put there

28
00:02:09,460 --> 00:02:10,950
in that first regular expression.

29
00:02:10,970 --> 00:02:15,900
In this case I'm just calling it what the application was called first underscore app slash.

30
00:02:16,210 --> 00:02:21,970
And then if we match that pattern what happens is the include function basically tells Django hey go

31
00:02:21,970 --> 00:02:28,480
look at the Urals PI file that's inside of the first app folder not the world's top pie file it's inside

32
00:02:28,480 --> 00:02:30,360
of the project.

33
00:02:30,550 --> 00:02:35,530
And basically this might seem like a lot of work especially for such a simple mapping but later on we

34
00:02:35,530 --> 00:02:41,920
really want to try to keep our projects or else the py file clean and modular that we want to set the

35
00:02:41,920 --> 00:02:47,080
reference to the application instead of listing them all in the main Your Alstott py file.

36
00:02:47,380 --> 00:02:50,200
So you can easily plug and play a few applications.

37
00:02:50,230 --> 00:02:51,760
Everything is modular now.

38
00:02:51,880 --> 00:02:55,350
And the Jor-El's are inside the actual application.

39
00:02:56,440 --> 00:03:00,380
So let's quickly walk through an example of all this just to show how it all works.

40
00:03:00,550 --> 00:03:05,450
And as a quick note we've covered everything in part 1 of jingoes official tutorial.

41
00:03:05,470 --> 00:03:10,540
So after this lecture you may want to go visit part one of that efficient Tauriel and browse through

42
00:03:10,540 --> 00:03:11,020
it.

43
00:03:11,020 --> 00:03:16,130
You can check the resource for direct link to part 1 of jingoes official tutorial.

44
00:03:16,150 --> 00:03:16,450
All right.

45
00:03:16,450 --> 00:03:20,880
With that said let's jump to Adam and actually code out everything that I just explained.

46
00:03:21,280 --> 00:03:22,910
Ok so here we are at.

47
00:03:22,910 --> 00:03:29,290
Adam the first thing you want to do is actually check out our original your PI file from our first project

48
00:03:29,370 --> 00:03:36,560
and important we need to have their so previously we just said from first app import use and then we

49
00:03:36,560 --> 00:03:43,030
called using the URL function a regular expression here and that just said OK put in the use that index

50
00:03:43,040 --> 00:03:46,080
in case you ever get anything just the domain name.

51
00:03:46,170 --> 00:03:54,860
What we all do now is add in another your I'll call here and put in a regular expression with an extension

52
00:03:54,860 --> 00:03:55,250
of this.

53
00:03:55,250 --> 00:04:02,000
And basically was going to say is something like first underscore app forward slash and then we're going

54
00:04:02,000 --> 00:04:07,610
to use the include function in order to use the include function I need to import it and I can do from

55
00:04:07,610 --> 00:04:12,520
Django got C-L an F for configuration.

56
00:04:12,570 --> 00:04:16,390
Got you or else in poor include.

57
00:04:16,620 --> 00:04:21,680
And then with this function I can actually now just pass this in as the second argument include.

58
00:04:22,200 --> 00:04:30,150
And then I'm going to call my first underscore app dot you are else in it takes it in as a string and

59
00:04:30,150 --> 00:04:35,620
then finally I want to make sure I have a comma here OK let's save that.

60
00:04:36,190 --> 00:04:41,930
And then the next thing I want to do is actually create this stop file inside our first application.

61
00:04:41,980 --> 00:04:44,830
So I'll say right click on first map.

62
00:04:44,830 --> 00:04:51,360
Create a new file and call it your ELSE STOP pie and it's going inside that first application I made.

63
00:04:51,520 --> 00:04:57,340
And now what we will do is essentially create almost like a mini your old Pif file is going to have

64
00:04:57,340 --> 00:05:00,100
a lot of the same functionality we just saw earlier.

65
00:05:00,100 --> 00:05:10,590
So again I will say from jingo dot CNF got you Earles import your el WIPs you r l Cingular.

66
00:05:10,710 --> 00:05:21,610
And then I will also say from ferse underscore app poor use and then I will say you are all pattern's

67
00:05:23,170 --> 00:05:34,770
is equal to and I will do another call to your el and now I'm going to do a very generic regular expression

68
00:05:34,770 --> 00:05:38,510
so I will just say for basically anything there.

69
00:05:38,760 --> 00:05:40,630
And I will call you start.

70
00:05:40,650 --> 00:05:43,510
Now let's just go ahead and call the index right now.

71
00:05:43,650 --> 00:05:48,480
Later on we'll test to make sure things are working by creating a new view and then I will say name

72
00:05:48,750 --> 00:05:55,540
is index and we can have a comma here so we can have this on three lines.

73
00:05:55,670 --> 00:06:00,040
Then I will just say that now let's make sure this actually all worked.

74
00:06:00,050 --> 00:06:08,520
I'm going to say Python helps manage that pi and then run the server.

75
00:06:08,640 --> 00:06:10,980
You have to make sure you're in the correct they're accurate do this.

76
00:06:10,980 --> 00:06:15,150
I'm going that initial first underscore project folder.

77
00:06:15,150 --> 00:06:18,860
I'll enter run my server lets make sure everything works OK.

78
00:06:19,020 --> 00:06:20,120
So we have our server running.

79
00:06:20,160 --> 00:06:25,770
Let's copy and paste this and we'll copy that and dragline over my Chrome browser.

80
00:06:27,080 --> 00:06:28,630
Let me bring that into frame.

81
00:06:28,670 --> 00:06:29,360
Here it is.

82
00:06:29,360 --> 00:06:29,720
Great.

83
00:06:29,720 --> 00:06:31,670
So that's what we actually had before.

84
00:06:31,670 --> 00:06:38,390
Now what I want to check to make sure it works is say slash or forward slash first underscore app and

85
00:06:38,390 --> 00:06:39,330
then hit enter.

86
00:06:39,410 --> 00:06:41,000
And you notice it's working we still get.

87
00:06:41,000 --> 00:06:41,960
Hello world.

88
00:06:41,960 --> 00:06:47,170
And just to prove that this isn't a coincidence or anything let's do something that we haven't defined

89
00:06:47,220 --> 00:06:51,970
forward slash new page hit enter and you will get a 404.

90
00:06:51,980 --> 00:06:53,390
This page has not been found.

91
00:06:53,420 --> 00:06:55,400
So clearly what we've done is working.

92
00:06:55,400 --> 00:07:03,020
We're able to actually direct some extension of our domain into the or else stop pie of the application.

93
00:07:03,020 --> 00:07:08,000
And this is basically what we're trying to get at as an overall idea that I can have the application

94
00:07:08,000 --> 00:07:15,350
itself host its own neural patterns that I can then call from the Urals Alstom project or you are also

95
00:07:15,350 --> 00:07:17,630
up high in the first project folder.

96
00:07:17,630 --> 00:07:24,650
So again here I'm going to use this include functionality and then passen as a string.

97
00:07:24,650 --> 00:07:30,350
My application name dot your else and this we can actually call whatever you want.

98
00:07:30,350 --> 00:07:41,670
So for instance let's say something like this my new extension and then I will save files save this.

99
00:07:41,920 --> 00:07:46,000
And let's go ahead and make sure this updated.

100
00:07:46,330 --> 00:07:47,590
I believe it updated right now.

101
00:07:47,600 --> 00:07:53,020
Let me just control C and restart it just to make sure everything worked correctly and then let's bring

102
00:07:53,020 --> 00:07:54,600
back in that browser.

103
00:07:55,670 --> 00:07:57,890
OK so bringing this browser again.

104
00:07:57,890 --> 00:08:03,340
Now let's go ahead and say first underscore app enter.

105
00:08:03,350 --> 00:08:03,710
Great.

106
00:08:03,740 --> 00:08:04,550
That's not working.

107
00:08:04,550 --> 00:08:07,480
So now let's actually try and this new extension just made.

108
00:08:07,760 --> 00:08:13,010
So I can say my new extension enter.

109
00:08:13,030 --> 00:08:14,150
And we can see it's calling.

110
00:08:14,150 --> 00:08:15,130
Hello world.

111
00:08:15,140 --> 00:08:17,360
So all of these basically are calling the same thing.

112
00:08:17,360 --> 00:08:23,840
So the main index page that home page is just the domain name is calling the exact same view of the

113
00:08:23,920 --> 00:08:29,270
my new extension page which we can do just for simplicity call first app.

114
00:08:29,410 --> 00:08:34,360
So it is a nice idea to try to get these regular expressions to match re-application application name

115
00:08:34,370 --> 00:08:36,860
that way it's easier to reference you know get lost.

116
00:08:36,860 --> 00:08:41,830
It will always happen but it's a good idea to try to make things at least in your own mind readable

117
00:08:41,840 --> 00:08:44,660
so when you come back to them later things make sense to you.

118
00:08:45,510 --> 00:08:48,880
But all right that's all I really wanted to show you for this particular lecture.

119
00:08:49,080 --> 00:08:54,900
And again the main idea here is that the applications can have their own URLs that PI file that we can

120
00:08:54,900 --> 00:08:58,990
then call from the projects your patterns list.

121
00:08:59,280 --> 00:08:59,850
All right.

122
00:08:59,850 --> 00:09:00,680
Hope you enjoy that.

123
00:09:00,690 --> 00:09:01,820
And I will see at the next lecture.
