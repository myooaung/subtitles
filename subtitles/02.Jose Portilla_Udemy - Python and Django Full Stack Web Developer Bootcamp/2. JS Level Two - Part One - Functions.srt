1
00:00:00,210 --> 00:00:03,460
Hello everyone and welcome to part one functions.

2
00:00:03,600 --> 00:00:07,610
Functions are going to be our main building block when we're ever dealing with javascript code.

3
00:00:07,680 --> 00:00:12,720
And honestly any code they're going to allow us to easily reuse code more than once and not constantly

4
00:00:12,720 --> 00:00:13,940
repeat our cells.

5
00:00:14,010 --> 00:00:18,090
If you've already programmed in another programming language you may just want to check out the notes

6
00:00:18,090 --> 00:00:21,270
to quickly grab the syntax for functions in Javascript.

7
00:00:21,270 --> 00:00:25,800
But if this is your first time programming Lets take a little bit of time to describe what a function

8
00:00:25,800 --> 00:00:29,940
is and what it's going to look like in javascript and then we'll hop over to the editor and code out

9
00:00:30,030 --> 00:00:34,640
a bunch of examples so the general syntax for a javascript function looks like this.

10
00:00:34,650 --> 00:00:39,810
You have the keyword function and that's going to indicate that you have a function.

11
00:00:39,830 --> 00:00:43,970
Then you have the actual name of your function and you're going to decide whether you want the name

12
00:00:43,970 --> 00:00:45,380
to be.

13
00:00:45,500 --> 00:00:49,970
And then you also have the option of passing parameters and you could also not have any promotors So

14
00:00:49,970 --> 00:00:56,210
here I just showed two parameters parameter one parameter to and someone using the function could pass

15
00:00:56,210 --> 00:01:00,500
in parameters required for the function to do something with Zuid passing those parameters and then

16
00:01:00,530 --> 00:01:05,980
inside that code to be executed inside those curly brackets you would do something with those parameters.

17
00:01:06,140 --> 00:01:10,700
So let's go straight to the other and our consul to really show how to create and use functions in javascript

18
00:01:10,940 --> 00:01:13,330
and get a better understanding of what's actually going on here.

19
00:01:13,370 --> 00:01:19,500
Going to jump to my editor now or so I have my editor open I have an html file that linked to my script

20
00:01:19,500 --> 00:01:21,910
that Jesus and here I have a blank.

21
00:01:21,910 --> 00:01:26,950
My script that Jesus and that is email file is open and linked teare in the browser.

22
00:01:26,950 --> 00:01:31,000
And if you want you can also put everything that we're type being straight into the console but it's

23
00:01:31,000 --> 00:01:34,010
going to look a little better if you put it into Atam.

24
00:01:34,050 --> 00:01:38,510
Let's start off with the most simple function we can think of which is just a hello function.

25
00:01:38,750 --> 00:01:46,440
So I'm going to put it in the special keyword function called my function hello so I give it a name.

26
00:01:46,440 --> 00:01:49,650
Close parentheses so it won't have any parameters.

27
00:01:49,830 --> 00:01:56,770
Then the curly brackets and inside this function and put some code in I'm going to input log.

28
00:01:57,250 --> 00:02:01,020
And will just say hello world.

29
00:02:01,020 --> 00:02:03,340
And this is the most basic function we can have.

30
00:02:03,360 --> 00:02:04,930
So what's actually going on here.

31
00:02:05,130 --> 00:02:10,500
A keyword function than the name of my function imprint sees a pass and any parameters.

32
00:02:10,530 --> 00:02:12,560
In this case we won't pass anything yet.

33
00:02:12,750 --> 00:02:15,660
And then whenever this function is called I will log.

34
00:02:15,690 --> 00:02:17,540
Hello world.

35
00:02:17,570 --> 00:02:23,170
So let's save this if we refresh our page.

36
00:02:23,170 --> 00:02:28,240
Well notice that we can actually call hello enter and we get.

37
00:02:28,260 --> 00:02:29,490
Hello world.

38
00:02:29,490 --> 00:02:35,130
So in our browser after running this java script connected to say Tim L. I can now call this function

39
00:02:35,130 --> 00:02:41,250
here and what I want you to know is sometimes what happens is students get confused on how to call a

40
00:02:41,250 --> 00:02:41,860
function.

41
00:02:41,910 --> 00:02:48,390
They'll just type in hello over here with no parentheses enter and they actually get back the function

42
00:02:48,390 --> 00:02:49,350
itself.

43
00:02:49,350 --> 00:02:54,310
So the difference here is that one of these is calling the function and the other one is just returning

44
00:02:54,310 --> 00:02:54,850
it.

45
00:02:55,200 --> 00:02:59,030
So going to zoom in a little more here just so you can see what I'm talking about.

46
00:02:59,840 --> 00:03:05,060
In this case I called the function to execute with the parentheses there in the second case.

47
00:03:05,060 --> 00:03:08,860
I'm actually just calling the function but I'm not executing the function.

48
00:03:09,010 --> 00:03:12,050
And in that case javascript's says like oh you wanted the function.

49
00:03:12,050 --> 00:03:13,100
Well here it is.

50
00:03:13,100 --> 00:03:15,700
This is what the function actually is with the prince.

51
00:03:15,730 --> 00:03:19,380
Though you're telling javascript OK actually execute that function.

52
00:03:20,980 --> 00:03:25,600
All right let's expand this example by calling the function.

53
00:03:25,630 --> 00:03:32,420
Hello you and we will pasan passen a name.

54
00:03:32,460 --> 00:03:34,500
So that's my parameter name.

55
00:03:34,720 --> 00:03:38,020
In this case I will say console log.

56
00:03:38,040 --> 00:03:38,640
Hello

57
00:03:41,470 --> 00:03:43,820
plus name.

58
00:03:44,260 --> 00:03:45,480
So I will save that.

59
00:03:45,500 --> 00:03:46,100
It's FREE.

60
00:03:46,150 --> 00:03:50,550
Let's clear a console and then a refresher page

61
00:03:53,260 --> 00:03:54,550
and now we're going to do is call.

62
00:03:54,550 --> 00:03:59,470
Hello you boops clear.

63
00:04:00,370 --> 00:04:05,230
Hello you and know what happens if I just typed help you if no parentheses.

64
00:04:05,370 --> 00:04:10,060
It returns back the actual function but I want to call the function.

65
00:04:10,390 --> 00:04:17,260
So I will say hello you if I just have princes with no name parameter I'll get hello.

66
00:04:17,280 --> 00:04:18,200
Undefined.

67
00:04:18,240 --> 00:04:24,140
So that's important to note here because I expected something to be the name a parameter to be passed.

68
00:04:24,270 --> 00:04:26,960
In this case since I didn't pass anything it just said hello.

69
00:04:27,000 --> 00:04:28,810
Undefined parameter.

70
00:04:28,860 --> 00:04:30,410
Well I really should do something like this.

71
00:04:30,420 --> 00:04:31,300
Hello.

72
00:04:31,610 --> 00:04:37,130
You then pass in that name parameter which in my case I expect a string there.

73
00:04:37,380 --> 00:04:39,040
So I will say hello you Jose.

74
00:04:39,090 --> 00:04:41,060
And it says Hello Jose.

75
00:04:41,070 --> 00:04:42,450
In the actual con..

76
00:04:42,540 --> 00:04:48,810
So that's the very basics of a function that accepts some sort of parameter input and then uses it within

77
00:04:48,810 --> 00:04:54,150
the function code itself and later on also talk about scope of the function which is pretty important

78
00:04:54,150 --> 00:04:54,620
as well.

79
00:04:54,640 --> 00:04:59,610
But right now the basics here that I want you to get is that you can put in a parameter and then use

80
00:04:59,610 --> 00:05:02,000
it within your actual function code.

81
00:05:02,010 --> 00:05:07,440
The main idea of a function overall is that I don't have to keep typing cancel that log every time that

82
00:05:07,440 --> 00:05:08,330
I want to do something.

83
00:05:08,340 --> 00:05:09,500
All I have to do is call.

84
00:05:09,510 --> 00:05:13,680
Hello you and this is going to be really useful for more complicated functions.

85
00:05:13,680 --> 00:05:18,660
Let's expand this to a simple function but a function that takes in two parameters and only to delete

86
00:05:18,690 --> 00:05:19,520
this.

87
00:05:19,670 --> 00:05:25,050
And if you can start typing fun enter and you get something like this function name.

88
00:05:25,050 --> 00:05:30,480
Note that it's camel case meaning that we don't use underscores and instead we separate words by lowercase

89
00:05:30,480 --> 00:05:32,690
and then uppercase letters.

90
00:05:32,750 --> 00:05:35,110
In this case no pun intended.

91
00:05:35,120 --> 00:05:45,920
I'm going to say add numb as my actual function name and then I will take number one and number two

92
00:05:46,580 --> 00:05:49,500
to be the function parameters.

93
00:05:50,270 --> 00:05:57,370
And then I will log number 1 plus 2.

94
00:05:57,430 --> 00:06:04,850
So let me save this and I will clear the council Well I actually should refresh the page to make sure

95
00:06:04,880 --> 00:06:07,040
Adam is loaded up.

96
00:06:07,050 --> 00:06:14,340
So here I refresh the page let's call ad nauseam and let's passen two and three.

97
00:06:14,510 --> 00:06:16,220
We hit enter and we get five.

98
00:06:16,310 --> 00:06:16,520
All right.

99
00:06:16,520 --> 00:06:18,250
So it's actually happening here.

100
00:06:18,290 --> 00:06:23,590
While Adam is taking in two parameters and I called the printer's number one and them two.

101
00:06:23,690 --> 00:06:29,600
And then inside the actual function code that block it's going to add them together and then lock that.

102
00:06:29,710 --> 00:06:31,750
Let's see what happens if I say add

103
00:06:34,990 --> 00:06:37,690
Hello comma

104
00:06:40,890 --> 00:06:44,540
we hit Enter we notice that we get hello world back.

105
00:06:44,710 --> 00:06:49,140
Something to remember here is that we can concatenate strings with this addition sign.

106
00:06:49,210 --> 00:06:53,920
So later on we'll be talking about making sure that you have the correct data type you expect whenever

107
00:06:53,920 --> 00:06:58,750
you're creating a function because right now this functions a little too loose in what it expects as

108
00:06:58,750 --> 00:06:59,690
a parameter.

109
00:06:59,710 --> 00:07:05,410
You'll end up working with either strings or numbers which isn't very good for us because that means

110
00:07:05,710 --> 00:07:12,610
if we call this function later on in our code and we actually do something like this add and we pass

111
00:07:12,610 --> 00:07:19,540
an maybe a two a string to as a number you'll end up getting something like 22.

112
00:07:19,690 --> 00:07:24,100
But that's not really what you were probably expecting you may have been expecting for.

113
00:07:24,130 --> 00:07:29,100
So it's kind of a dangerous situation to be in because of javascript's type coersion.

114
00:07:29,200 --> 00:07:34,430
So usually you want to check types or make sure the operations will only work on certain data types.

115
00:07:34,450 --> 00:07:38,560
So that's just a little warning but we'll talk a lot more about that later on in the course.

116
00:07:38,580 --> 00:07:42,700
For right now what I really want you to understand is that I have two parameters and I'm using them

117
00:07:42,760 --> 00:07:44,400
inside of my function call.

118
00:07:44,810 --> 00:07:45,530
OK.

119
00:07:45,700 --> 00:07:48,220
Now let's talk about default values.

120
00:07:48,490 --> 00:07:53,740
So so far we've had to define every single argument or parameter in the function when using it.

121
00:07:53,940 --> 00:07:56,620
But we can also have default values by using an equal sign.

122
00:07:56,620 --> 00:07:58,930
And let me show you an example of that.

123
00:07:59,040 --> 00:08:01,680
And again I will create a function here.

124
00:08:02,540 --> 00:08:05,180
The function name will be hello someone

125
00:08:09,050 --> 00:08:20,600
it takes in a name and it will console log Hello plus that name but instead of having a name be undefined

126
00:08:20,870 --> 00:08:25,690
if no one passes in a name I'm going to have a default name.

127
00:08:25,710 --> 00:08:28,750
Now let's make that the fault name Frankie.

128
00:08:28,860 --> 00:08:30,260
So let's see what happens now.

129
00:08:30,330 --> 00:08:40,740
When I refresh this page and I call hello someone if I call hello someone with Jose as the parameter

130
00:08:41,090 --> 00:08:42,320
then I hit enter.

131
00:08:42,360 --> 00:08:48,920
I get Hello Jose but if I call hello someone with nothing inside of it then I hit enter.

132
00:08:48,940 --> 00:08:50,050
Hello Frankie.

133
00:08:50,080 --> 00:08:56,440
So we can use an equal sign in this manner to actually assign default parameters in case a parameter

134
00:08:56,440 --> 00:08:59,520
is not supplied by the user OK.

135
00:08:59,600 --> 00:09:01,310
So that's the fault parameters.

136
00:09:01,310 --> 00:09:03,450
Now let's talk about returning values.

137
00:09:03,650 --> 00:09:07,130
So far we've actually just been printing or logging results.

138
00:09:07,280 --> 00:09:12,140
But what if we actually want to return results so we could assign them to a variable and then we can

139
00:09:12,200 --> 00:09:14,420
use the return keyword for this task.

140
00:09:14,570 --> 00:09:21,890
In this falling manner let me show you what I mean by all this will create another other function and

141
00:09:21,890 --> 00:09:30,240
let's call it formal and formal takes in a name will give a default name of Sam.

142
00:09:30,470 --> 00:09:37,370
And it also takes in a title argument and will also give a default title of Sir.

143
00:09:37,410 --> 00:09:42,150
So we have two default parameters are two default arguments there and the terms parameters and arguments

144
00:09:42,150 --> 00:09:44,520
are used entertain interchangeably a lot.

145
00:09:44,670 --> 00:09:46,320
So keep that in mind.

146
00:09:46,350 --> 00:09:56,900
Now I'm going to say console log title plus a space plus name.

147
00:09:57,040 --> 00:10:02,690
So let me save this going to refresh the page and call formal

148
00:10:05,490 --> 00:10:08,840
hit enter and it says Sursum great.

149
00:10:08,860 --> 00:10:15,350
So what if I do this I say welcome.

150
00:10:15,560 --> 00:10:19,560
Plus formal will then it says welcome.

151
00:10:19,850 --> 00:10:22,660
Undefined which is probably not what you expected.

152
00:10:22,670 --> 00:10:24,290
You expected it to say.

153
00:10:24,290 --> 00:10:26,240
Welcome sir Sam.

154
00:10:26,390 --> 00:10:30,400
We can see here that it only outputted sir Sam when the formal was called.

155
00:10:30,530 --> 00:10:34,380
But when I wanted to actually print this whole thing that said welcome in the find.

156
00:10:34,580 --> 00:10:40,680
So if I would actually put that all within a console log call.

157
00:10:40,820 --> 00:10:47,760
So I say welcome plus formal hit enter.

158
00:10:47,840 --> 00:10:49,980
I get again a welcome on the find.

159
00:10:49,980 --> 00:10:53,090
So you might be wondering what's actually going on here and what's going on.

160
00:10:53,090 --> 00:10:55,060
Is this function right here.

161
00:10:55,070 --> 00:10:57,100
Is it actually returning anything.

162
00:10:57,170 --> 00:10:59,790
It was just printing something one time.

163
00:10:59,870 --> 00:11:04,820
If we want to actually return something so we can use it in a variable we need to use the return keyword

164
00:11:05,920 --> 00:11:08,350
and let me show you how we can do that.

165
00:11:08,380 --> 00:11:09,710
We will just say return.

166
00:11:09,710 --> 00:11:14,220
We could see there's already a return keyword and then say whatever you want to return.

167
00:11:14,260 --> 00:11:20,800
In our case will return the exact same thing title plus space plus name.

168
00:11:20,890 --> 00:11:23,570
And now I can save this.

169
00:11:23,770 --> 00:11:30,240
Refresh my page and if I call formal I still get the output.

170
00:11:30,240 --> 00:11:31,640
Sir Sam.

171
00:11:31,740 --> 00:11:41,410
Now I can actually assign that value so I can say variable output is equal to formal Banafsheh call

172
00:11:41,410 --> 00:11:42,260
output.

173
00:11:42,400 --> 00:11:48,430
I get Sir Sam means I can also do what I wanted to do before which was welcome plus formal.

174
00:11:48,430 --> 00:11:49,060
Now I get it.

175
00:11:49,070 --> 00:11:56,220
Welcome Sursum instead of just welcoming the find OK so that might seem a little confusing at first

176
00:11:56,310 --> 00:12:00,370
especially with these examples of showing the console log versus the return.

177
00:12:00,570 --> 00:12:07,770
But all you really need to understand for now is that if you want to save the result of a function you

178
00:12:07,770 --> 00:12:12,740
want to use the return keyword so that it actually spits out something to return.

179
00:12:12,750 --> 00:12:17,610
So whenever I call formal whatever it does it's going to return what is on this line.

180
00:12:17,610 --> 00:12:25,410
So usually you'll have a bunch of code over here doing something code some more code etc. and at the

181
00:12:25,410 --> 00:12:32,510
very end you will return some sort of variable that you find using all of this code up here.

182
00:12:33,590 --> 00:12:41,090
Let's break down a more complicated example by doing something like multiplication so I will call a

183
00:12:41,090 --> 00:12:53,950
new function function name and I will call this function times 5 and I will say no input so takes in

184
00:12:53,950 --> 00:12:57,560
this parameter and the input inside of my function.

185
00:12:57,610 --> 00:13:10,350
I create a variable called result and set equal to numb input times 5 and then I return that result.

186
00:13:10,350 --> 00:13:11,420
So far so good.

187
00:13:12,500 --> 00:13:20,860
And then if I refresh this page I can call times 5 pasan a number 4 and I see I get 20 back.

188
00:13:21,280 --> 00:13:24,990
OK so that also means that I'm using the return keyboard.

189
00:13:25,000 --> 00:13:35,820
I can see variable let's say variable answer is equal to times 5 and will pass and another number 10

190
00:13:35,820 --> 00:13:36,260
here.

191
00:13:37,140 --> 00:13:40,520
And now if I call answer I get 50.

192
00:13:40,650 --> 00:13:45,830
I wouldn't be able to do this sort of variable assignment if I was just doing a console log of the result.

193
00:13:46,110 --> 00:13:51,130
Instead of this return key word I can now assign the result to some sort of variable.

194
00:13:51,150 --> 00:13:55,100
In my case the variables called the answer great.

195
00:13:55,140 --> 00:14:01,560
So you've talked so far about using the return key word using parameters and also using default parameters.

196
00:14:01,560 --> 00:14:06,600
Let's take a moment to talk about a really important concept that's called scope and scope is the term

197
00:14:06,600 --> 00:14:12,510
we use to describe how objects and variables get defined offend javascript's when discussing scope with

198
00:14:12,510 --> 00:14:18,810
functions as a general rule we can say that if a variable is defined only inside a function then its

199
00:14:18,810 --> 00:14:21,460
scope is limited to that function.

200
00:14:21,510 --> 00:14:28,440
So let's consider the example we just showed here times five input we created a variable called Rozell

201
00:14:28,620 --> 00:14:30,430
equals to input times 5.

202
00:14:30,600 --> 00:14:39,190
Now we return a result if I call answer I get 50.

203
00:14:39,200 --> 00:14:47,270
But if I try calling result here I get result is not defined at anonymous and the main idea here is

204
00:14:47,270 --> 00:14:54,530
that the scope of results is limited to this function that actual variable doesn't exist outside of

205
00:14:54,530 --> 00:14:55,390
this function.

206
00:14:55,490 --> 00:14:57,730
Unless I define it outside of the function.

207
00:14:58,010 --> 00:15:04,190
So again as a general rule we can say that if a variable is defined only inside of a function then the

208
00:15:04,190 --> 00:15:07,420
scope of that variable is limited to the function.

209
00:15:07,460 --> 00:15:14,720
So it's only going to be recognized when it's called inciters function and the same goes for these parameters.

210
00:15:14,750 --> 00:15:21,680
So if I come up here next to the console and try to say something like num input and hit enter I will

211
00:15:21,680 --> 00:15:25,900
also get a not defined error.

212
00:15:26,100 --> 00:15:38,650
So that means that this has a bit of a Pip's local scope to the function.

213
00:15:38,650 --> 00:15:46,030
Now let's try to make something more of the global scope.

214
00:15:46,200 --> 00:15:49,870
So the global scope is going to be different than that local scope.

215
00:15:50,020 --> 00:15:55,840
And basically what happens is if we have a variable that we define outside of the function that's going

216
00:15:55,840 --> 00:16:01,200
to be a global variable and the function will have access to them due to their scope.

217
00:16:01,210 --> 00:16:03,270
Let's show an example or create a variable.

218
00:16:03,280 --> 00:16:12,870
It's outside of any function and we'll call it the and this is going to just be a string that kind of

219
00:16:12,870 --> 00:16:17,830
really obviously is going to be a global variable so say global V.

220
00:16:17,940 --> 00:16:22,890
So that stands for Global variables so we can see variable be just a big string out there.

221
00:16:22,890 --> 00:16:26,450
Also make a variable called Stuff.

222
00:16:26,550 --> 00:16:34,620
Now we'll say have it be a string global stuff you know and create a new function.

223
00:16:34,980 --> 00:16:36,500
It's going to be called just fun.

224
00:16:38,050 --> 00:16:40,210
It's going to take and stuff

225
00:16:43,030 --> 00:16:49,810
and it's going to log the it's going to reassign stuff inside.

226
00:16:49,820 --> 00:16:58,490
So I will reassign it literally to a string claiming it's re-assignment so reassigned stuff inside func

227
00:17:00,180 --> 00:17:08,050
and then I will log stuff and let's delete this top function here since we won't be using it.

228
00:17:08,540 --> 00:17:08,990
OK.

229
00:17:08,990 --> 00:17:12,920
Before we actually run this let's break down what's happening here.

230
00:17:12,920 --> 00:17:20,500
I have two variables defined outside of any function that I'm calling function fun have stuff as a parameter.

231
00:17:20,510 --> 00:17:24,260
But no I never actually I'm going to call stuff.

232
00:17:24,260 --> 00:17:32,560
I'm just going to do this fun and then I'm going to say console log the I never find the inside the

233
00:17:32,560 --> 00:17:34,510
function it's only to find that peer.

234
00:17:34,570 --> 00:17:40,900
I will reassign stuff only inside the function and then I will say console log stuff.

235
00:17:41,010 --> 00:17:45,390
Let's save this and run it in our browser.

236
00:17:45,390 --> 00:17:53,440
So refresh and I get this global V re-assign stuff inside function.

237
00:17:53,440 --> 00:18:00,700
Now let's add one more line of code after this function call to execute the function.

238
00:18:00,700 --> 00:18:03,530
And then when say this cancel the log.

239
00:18:04,050 --> 00:18:07,030
And I was going to log stuff.

240
00:18:07,140 --> 00:18:10,620
Let's see what happens when we actually run this code.

241
00:18:10,640 --> 00:18:15,860
So let me save that and refresh and run.

242
00:18:15,890 --> 00:18:20,300
So it says global V re-assign stuff inside func and then global stuff.

243
00:18:20,990 --> 00:18:25,710
OK let's break down all the lines of code here and actually explain what's going on.

244
00:18:25,730 --> 00:18:27,950
So we get a really clear idea of scope.

245
00:18:27,950 --> 00:18:32,490
So this whole idea that we're talking about right now is known as scope.

246
00:18:32,630 --> 00:18:39,800
So the folly happens console log the is going to check for the global variable v the outer scope if

247
00:18:39,800 --> 00:18:45,390
it can't find anything there that is going to check for the local scope inside of the function.

248
00:18:45,470 --> 00:18:50,690
And if it can't find anything there then it's going to throw an error that it was never defined.

249
00:18:50,780 --> 00:18:53,860
Console log stuff over there at the bottom.

250
00:18:53,890 --> 00:18:56,820
We'll also check for the global variable stuff.

251
00:18:57,770 --> 00:19:04,760
And then the call fun stuff is accepting or even stuff that it's printing out V and it's re-assigning

252
00:19:04,760 --> 00:19:07,340
stuff only inside the scope of the function.

253
00:19:07,670 --> 00:19:09,080
And then it's going to print us stuff.

254
00:19:09,080 --> 00:19:10,690
So notice two things here.

255
00:19:10,850 --> 00:19:16,820
The re-assignment of stuff only affects the scope of the stuff variable inside the function.

256
00:19:17,090 --> 00:19:21,940
And the fun function first checks to see if these the fine at the functions go.

257
00:19:22,060 --> 00:19:28,100
And if not which is our case it will then search the global scope for the variable names V leading it

258
00:19:28,100 --> 00:19:31,910
to print out these global V as a string.

259
00:19:31,910 --> 00:19:32,380
OK.

260
00:19:32,600 --> 00:19:36,660
So really take your time with these few lines of code and understand what's happening here.

261
00:19:36,860 --> 00:19:43,570
Really Make sure you understand why global is printed out why we get this re-assign stuff inside function.

262
00:19:43,820 --> 00:19:47,050
And then even with the re-assignment inside of this function.

263
00:19:47,240 --> 00:19:49,920
So that's only happening at a low level.

264
00:19:50,030 --> 00:19:54,420
Even after I call the function of line 11 when I print out stuff online.

265
00:19:54,440 --> 00:19:57,940
Well I still get back the original global stuff.

266
00:19:57,950 --> 00:19:58,520
Thanks everyone.
