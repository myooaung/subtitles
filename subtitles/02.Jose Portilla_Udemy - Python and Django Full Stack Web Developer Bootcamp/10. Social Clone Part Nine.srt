1
00:00:05,420 --> 00:00:09,390
Hello everyone and welcome to part nine of the social club project.

2
00:00:09,570 --> 00:00:14,910
Now we're going to jump over to the Post's application and set up our views that PI filed there a lot

3
00:00:14,910 --> 00:00:19,530
of the views will require extra methods to ensure that certain privileges are connected correctly to

4
00:00:19,530 --> 00:00:22,510
the logged in user and selected group.

5
00:00:22,680 --> 00:00:27,360
But we're also going to need to do is install a library called Django that braces and you can do that

6
00:00:27,360 --> 00:00:31,950
at your command line with Pippin's Telecinco dash braces and this allows us to access some convenient

7
00:00:31,950 --> 00:00:34,380
mixdowns to use with class based views.

8
00:00:34,380 --> 00:00:39,660
All right let's up over to the editor because the Post's fuse up high file get started already here

9
00:00:39,660 --> 00:00:44,250
and at my posts views that PI file is going to collapse the directory tree to give us a little more

10
00:00:44,250 --> 00:00:44,910
room.

11
00:00:44,920 --> 00:00:47,660
I'm going to start off by doing a couple of imports.

12
00:00:47,760 --> 00:00:56,690
We're first going to say from jingo talk contrib off the Nixons in poor loggin required Nixon.

13
00:00:56,790 --> 00:01:01,110
That way we know someone has to be logged in to actually do a lot of these post actions such as creating

14
00:01:01,110 --> 00:01:02,320
a new post.

15
00:01:02,520 --> 00:01:10,980
Then we're also going to save from Jingo the core the Yoro resolvers import reverse lazy so that in

16
00:01:10,980 --> 00:01:14,710
case some wants to delete a post we have that reversely is a call which you can use later.

17
00:01:14,910 --> 00:01:18,280
And then we also are going to be using some generic class based views.

18
00:01:18,490 --> 00:01:26,460
I will say from Jingo the views import generic and there we're also going to be using HTP 404.

19
00:01:26,460 --> 00:01:36,060
That way we can return for a four page later on so will say from jingo HTP import HTP 404.

20
00:01:36,180 --> 00:01:45,580
Save that and then finally we'll save from Brace's views in poor select related mixin.

21
00:01:45,580 --> 00:01:50,140
Now remember that you have to install braces as we just discussed in the slides and you can do that

22
00:01:50,140 --> 00:01:51,840
just by going to your command line.

23
00:01:51,960 --> 00:01:57,820
And that your command line instead of your virtual environment just say Pipp install Shingo dash braces

24
00:01:57,970 --> 00:01:59,610
enter and then let them install.

25
00:01:59,620 --> 00:02:04,360
Now my requirements are already satisfied because I've already installed it before this lecture.

26
00:02:04,360 --> 00:02:06,660
OK so now we have Brace's ready to go.

27
00:02:06,700 --> 00:02:12,340
And then I'm also going to say from the import models so that smacks role models for the post and then

28
00:02:12,340 --> 00:02:14,920
later on we're actually going to create a form for the post.

29
00:02:14,980 --> 00:02:20,530
So we'll say from the import forms although we haven't actually created the forms up high file yet although

30
00:02:20,530 --> 00:02:22,160
we'll do that later on.

31
00:02:22,940 --> 00:02:32,490
And then I will say from Jingo that contrib a th import get user model and that's going to be a function

32
00:02:32,490 --> 00:02:38,970
that allows me to set a user object equal to get user model and then I call it user model.

33
00:02:38,970 --> 00:02:43,860
Basically what that means is when some is logged into a session I'm going to be able to use this user

34
00:02:43,860 --> 00:02:47,080
object as the current user and then call things off of that.

35
00:02:47,130 --> 00:02:51,370
So let's start off with probably the simplest view here and that's going to be the post list view.

36
00:02:51,420 --> 00:02:56,910
So when you select a person you can see a list of all their posts or once you select a group you can

37
00:02:56,910 --> 00:02:58,760
see a list of all the posts for that group.

38
00:02:58,950 --> 00:03:02,950
So we'll start off with the post list class.

39
00:03:02,980 --> 00:03:07,780
And that's going to be lists of posts belonging to a group so we're going to say pass and the selected

40
00:03:07,790 --> 00:03:15,470
related mixin as well as call this a generic list view and then let's give a couple more lines here

41
00:03:15,800 --> 00:03:18,910
all the way back up and inside of this post list.

42
00:03:18,930 --> 00:03:25,250
All we're going to do is connect it to a model the Olby models that post to our post model that we created

43
00:03:25,280 --> 00:03:31,520
earlier and then I'm also going to have this method or attribute selected underscore related which is

44
00:03:31,520 --> 00:03:37,130
just the mixin that allows us to provide a tuple of related models so basically the foreign keys for

45
00:03:37,130 --> 00:03:37,960
this post.

46
00:03:38,000 --> 00:03:44,470
Now that's going to be the user that the post belongs to and the group that the post belongs to.

47
00:03:44,500 --> 00:03:50,980
I'm saving that and up next we're going to create another class for user posts and that's just going

48
00:03:50,980 --> 00:03:55,320
to be a generic list view and let's give ourselves some more room here.

49
00:03:55,330 --> 00:04:01,510
Don't forget that colon and then this is going to be the generic view for the user posts so we'll connect

50
00:04:01,510 --> 00:04:04,610
this with model models.

51
00:04:04,680 --> 00:04:11,540
Post and then we'll give it the template name so the template name is going to be called to post slash

52
00:04:11,600 --> 00:04:15,140
user underscore post underscore list.

53
00:04:15,200 --> 00:04:17,470
HTL OK.

54
00:04:17,540 --> 00:04:21,380
Now we're going to have to add a few more methods in here to make sure that all works correctly when

55
00:04:21,380 --> 00:04:23,270
a user is logged in.

56
00:04:23,270 --> 00:04:31,150
So we're going to have a method called Get underscore queries set past and self and we're going to do

57
00:04:31,160 --> 00:04:31,940
inside this method.

58
00:04:31,940 --> 00:04:39,860
We're going to first try to say self post the user so check if self-oust self-taught post-flight user

59
00:04:40,190 --> 00:04:41,810
is equal to x.

60
00:04:41,870 --> 00:04:42,730
This is really a check.

61
00:04:42,740 --> 00:04:51,050
This is an assignment so assign user to objects and then we're going to call prefetch underscore related

62
00:04:52,610 --> 00:04:53,820
posts.

63
00:04:53,850 --> 00:04:59,990
Remember we can say these different methods or attributes can call off objects as is another one.

64
00:04:59,990 --> 00:05:04,930
There's a giant list of them in the documentation and then off of this we're going to say get.

65
00:05:05,470 --> 00:05:15,530
And we will say get the username underscore exact underscore or excuse me equals self-taught keyword

66
00:05:15,560 --> 00:05:22,410
args that gets in print C's user name and that's it.

67
00:05:22,410 --> 00:05:24,730
So we're going to first try to do this whole giant life.

68
00:05:24,750 --> 00:05:26,750
So let's explain what's going on here.

69
00:05:26,760 --> 00:05:30,490
Here we're going to try to get the queries set.

70
00:05:30,490 --> 00:05:34,840
So basically when you call user post that list view what does it actually going to attempt to do here

71
00:05:34,840 --> 00:05:37,710
is going to try to set postop user.

72
00:05:37,840 --> 00:05:44,620
That is the user that belongs to this particular post equal to user that users objects are going to

73
00:05:44,620 --> 00:05:46,570
prefetch related posts.

74
00:05:46,750 --> 00:05:52,210
And then this user name should be a double underscore as I described before in previous lectures we

75
00:05:52,210 --> 00:05:56,400
can call these double underscores and you can see how the syntax highlighting changes.

76
00:05:56,530 --> 00:06:02,440
And then we're going to get the user name is exactly equal to the user name of whatever is user logged

77
00:06:02,470 --> 00:06:05,240
in or whatever user you happen to click on.

78
00:06:06,110 --> 00:06:11,460
So we're going to try to do that and then we're going to match this try call with an accept call tool

79
00:06:11,470 --> 00:06:19,530
say except and we'll say except this the user does not exists for some reason the user got deleted.

80
00:06:19,730 --> 00:06:28,110
So say either it does not exist and this is just an attribute I will raise HTP four or four and we don't

81
00:06:28,110 --> 00:06:35,560
have to actually call that you just raise it and then else I'm going to return self post underscore

82
00:06:36,630 --> 00:06:38,240
user posts.

83
00:06:38,280 --> 00:06:41,370
The law Okay and we'll save that.

84
00:06:41,400 --> 00:06:47,310
Now this is basically just to make sure that when you call the query for the user post that these are

85
00:06:47,310 --> 00:06:53,100
actually exists and then you're able to fetch the posts that are related to that user using this check

86
00:06:53,100 --> 00:06:53,530
right here.

87
00:06:53,540 --> 00:06:58,930
I exact continuing on what we're going to do one more method here.

88
00:06:58,990 --> 00:07:04,600
The ref also underscore context data that's going to be self.

89
00:07:04,630 --> 00:07:06,340
And then some keyword arguments

90
00:07:10,240 --> 00:07:20,320
and then we'll say context is equal to super underscore context data and then passing keyword arguments

91
00:07:21,690 --> 00:07:30,350
and then we'll say context post underscore user is equal to self-taught poster's core user.

92
00:07:30,790 --> 00:07:36,970
And then I'm finally going to return that context that way I'm just returning the context data object

93
00:07:37,620 --> 00:07:43,210
essentially connected to whoever actually posted that that specific user OK.

94
00:07:43,390 --> 00:07:47,820
Moving along we have a couple of more classes these are much simpler than this one is probably the most

95
00:07:47,820 --> 00:07:50,670
complicated class that we had to deal with just connecting this post.

96
00:07:50,670 --> 00:07:53,730
The users actually want to do it just to post the tail.

97
00:07:53,970 --> 00:08:03,160
So I'll say post detail and that's going to take in that select related mixin as well as a generic detailed

98
00:08:03,160 --> 00:08:08,730
view essentially this is the detail view and you click on a singular post and what happens is we just

99
00:08:08,730 --> 00:08:15,980
connect this model's up post and then we'll say select related and we're going to connect it with some

100
00:08:15,980 --> 00:08:16,980
foreign keys.

101
00:08:17,120 --> 00:08:24,140
And this is just going to be the user and the group that this post belongs to.

102
00:08:24,180 --> 00:08:37,090
And then after this we're going to say E-F get the queries set self and then I'll say queery set is

103
00:08:37,090 --> 00:08:45,810
equal to super get super thoughts gets queery set and we'll explain all this in just a second.

104
00:08:47,100 --> 00:08:53,840
And then we will say return the queery set and we're going to filter it.

105
00:08:53,850 --> 00:08:54,950
So what are we going to filter this.

106
00:08:54,960 --> 00:09:08,240
We want to check that the user's user name is exactly equal to where self keyword arguments get that

107
00:09:08,250 --> 00:09:09,430
user name.

108
00:09:09,600 --> 00:09:13,270
Kind of similar to what we were doing before with this get queery set.

109
00:09:13,320 --> 00:09:18,960
So again all we're doing here is we're saying OK get the query set for the actual post and then I want

110
00:09:18,960 --> 00:09:20,960
you to filter where the user name.

111
00:09:21,000 --> 00:09:26,210
We're going to passen as you go to the user name and have to be exactly the user's username.

112
00:09:26,250 --> 00:09:29,160
Centrally just that username off that model's object.

113
00:09:29,160 --> 00:09:31,600
And I know the sort of syntax can be really strange.

114
00:09:31,620 --> 00:09:38,720
First those double underscores and the sort of object model that object relation model that Django has.

115
00:09:38,730 --> 00:09:43,350
But definitely check out the documentation that can help a lot essentially just go through those examples

116
00:09:43,400 --> 00:09:48,420
of really well-written documentation there go through it and this will become clear and clear as you

117
00:09:48,420 --> 00:09:50,070
see more and more examples of this.

118
00:09:50,070 --> 00:09:55,950
It's definitely really weird at first the sort of customized get query calls OK.

119
00:09:56,120 --> 00:10:01,610
Moving on we have two more classes we want to create for those views and that is a create Post and a

120
00:10:01,610 --> 00:10:03,130
delete post.

121
00:10:03,140 --> 00:10:09,590
So for the create class or create post we're going to say create a post and this will have a log in

122
00:10:09,590 --> 00:10:17,260
required of mixin a select required mixin or select related Mixner I should say and then generic create

123
00:10:17,270 --> 00:10:24,450
view then it gives some extra lines here inside of this we'll start off by saying fields.

124
00:10:24,540 --> 00:10:30,740
So the fields to want someone to be able to edit is just the message of the actual post and then the

125
00:10:30,740 --> 00:10:41,790
group that the post belongs to and then the model can be models the post and we just want to check that

126
00:10:41,800 --> 00:10:42,790
the form is valid.

127
00:10:42,790 --> 00:10:52,490
So we'll say DPF form underscore valid as a method and it has taken self and the form and then this

128
00:10:52,490 --> 00:10:58,880
will be self object as equal to form that's safe and we're going to set commit equal to false

129
00:11:01,530 --> 00:11:07,500
and then say self object user and set that equal to the request user.

130
00:11:07,590 --> 00:11:09,780
So the actual user that's at the request.

131
00:11:09,960 --> 00:11:14,030
And then we will say self object save.

132
00:11:14,100 --> 00:11:19,290
And essentially what this is just to connect the actual post to the user itself and then once for those

133
00:11:19,350 --> 00:11:29,870
that will say return super form the form score valid Pessin form save.

134
00:11:29,950 --> 00:11:37,530
And then finally we have to delete post which will be the other class called Delete post and that's

135
00:11:37,530 --> 00:11:43,310
going to be logged and acquired a mixin a select related mixin and another generic view.

136
00:11:43,320 --> 00:11:51,590
In this case the delete view get some more lines and here come back up and we'll connect this to a model

137
00:11:51,590 --> 00:12:01,300
so they'll be models that post then we will also say select related and set equal to the user and group

138
00:12:01,330 --> 00:12:05,800
as we've just been doing before and he's to be in a string.

139
00:12:06,050 --> 00:12:11,540
And then we're going to say success you're ill and that's going to be reversed lazy and that's going

140
00:12:11,540 --> 00:12:12,800
to go to post.

141
00:12:13,160 --> 00:12:15,170
All so you can use that your template tagging.

142
00:12:15,170 --> 00:12:19,850
So basically what that means is once you delete a post well what's the success you or else if you hit

143
00:12:20,150 --> 00:12:21,520
Yes I confirmed delete.

144
00:12:21,590 --> 00:12:22,630
It should take you back somewhere.

145
00:12:22,640 --> 00:12:25,850
Reverse lazy and we'll just go back to all the posts.

146
00:12:26,180 --> 00:12:29,860
Then we're going to say the F A.

147
00:12:29,880 --> 00:12:35,420
Get queries set self.

148
00:12:35,460 --> 00:12:44,730
And then we'll say the queries set of this is equal to super get queries set and then I'm going to return

149
00:12:45,180 --> 00:12:54,530
queries set that I just made that variable then going to filter out the user ID is equal to self request

150
00:12:56,120 --> 00:12:58,230
user ID.

151
00:12:58,250 --> 00:13:03,740
OK so that's the parameter and for the filter and then finally I'm going to have a delete method on

152
00:13:03,740 --> 00:13:17,670
this self arx keyword arguments and that's going to be the messages success and will say self-taught

153
00:13:18,450 --> 00:13:28,980
request and will send and post deleted and then we're going to return super delete and you can look

154
00:13:28,980 --> 00:13:34,410
up a lot of these kind of convention calls in the documentation for a delete view.

155
00:13:34,440 --> 00:13:39,340
A lot of these things are really just chosen by the convention that delete views to delete you.

156
00:13:39,360 --> 00:13:43,520
Kind of expects if you want to mess around with what happens after you click delete.

157
00:13:43,820 --> 00:13:46,610
It has a delete method for it or get queries set.

158
00:13:46,650 --> 00:13:50,850
So a lot of these things were not actually making up the terms or methods or variables.

159
00:13:50,850 --> 00:13:54,660
To use a lot of them just come with the class based views.

160
00:13:54,720 --> 00:13:55,960
We've already seen a couple of them.

161
00:13:56,100 --> 00:14:01,830
Things like model are success you are all methods like Duleep are just on top of that kind of thing.

162
00:14:02,740 --> 00:14:03,230
OK.

163
00:14:03,480 --> 00:14:09,240
So that should be everything we need for actual views not pie and what we need to do next is linked

164
00:14:09,330 --> 00:14:12,270
up to our Urals in our postop pi.

165
00:14:12,300 --> 00:14:16,020
So let's come over to the posts folder.

166
00:14:16,020 --> 00:14:23,940
Open up your Olsdorf pie here and then fill out the Euros we need we'll say from jingo CNF for configuration

167
00:14:24,030 --> 00:14:33,240
you Elle's import euro and then I'm also going to save from the import views and let's give this app

168
00:14:33,300 --> 00:14:37,360
a name of posts that we can use that in our template tags.

169
00:14:37,710 --> 00:14:42,780
Then we will say you are all patterns is equal to and essentially now it's just time to make all the

170
00:14:42,780 --> 00:14:47,670
list of your old patterns and I'm going to collapse the directory tree to get a little more room here

171
00:14:48,280 --> 00:14:50,230
and also offer further expression.

172
00:14:50,240 --> 00:14:56,660
So for the actual If you just go to your domain name dot com slash posts will say dollar sign.

173
00:14:56,970 --> 00:15:07,190
And this would just give views post list as underscore view and I will just give this the name all so

174
00:15:07,250 --> 00:15:09,950
simple view they're the next Euro.

175
00:15:10,020 --> 00:15:13,150
We can do for a new post if someone wants to make any post.

176
00:15:13,240 --> 00:15:20,150
Those just go to post slash new dollar sign and then this will be the Create post so views dot create

177
00:15:20,150 --> 00:15:26,910
post as a view and the name is equal to.

178
00:15:27,160 --> 00:15:30,490
Then after that we're going to do is for the user post.

179
00:15:30,490 --> 00:15:35,340
So when you click on a user you can see a list of all their posts and then we all need to do the post

180
00:15:35,380 --> 00:15:36,710
detail and delete posts.

181
00:15:36,880 --> 00:15:46,100
So start with that user post so say your all in here again regular expression and this will be by or

182
00:15:46,170 --> 00:15:51,240
honestly whatever you want to call that and then we'll use some regular expressions here which is just

183
00:15:51,240 --> 00:15:53,320
going to look similar to what we just used in the past.

184
00:15:53,400 --> 00:16:01,890
Question Mark P and then open tag username clothes tag and then we'll use another regular expression

185
00:16:01,980 --> 00:16:08,780
minus backslash w plus sensuousness matches up the user name.

186
00:16:08,780 --> 00:16:15,650
So when you go to your domain name that compote slash by Slash who's every user name then we can actually

187
00:16:15,650 --> 00:16:25,590
have buse dot user posts as you and we'll give this the name for user.

188
00:16:25,910 --> 00:16:31,750
So I believe that's what we've been using and the templates will say for underscore user.

189
00:16:31,890 --> 00:16:36,760
And then we want just one more or two more actually the post detail.

190
00:16:36,780 --> 00:16:41,850
So it's actually going to look really similar to this as far as regular expressions are going to copy

191
00:16:41,850 --> 00:16:44,840
this entire string.

192
00:16:45,020 --> 00:16:46,980
And this shows all the user posts.

193
00:16:47,030 --> 00:16:53,140
So then we're going to do one more slash and we're going to copy and paste this actually let's just

194
00:16:53,150 --> 00:16:55,130
write it out so we can see more detail here.

195
00:16:55,250 --> 00:16:56,480
We'll see princes.

196
00:16:56,630 --> 00:17:00,580
Question mark p. open tag.

197
00:17:00,670 --> 00:17:03,810
P.K. close to backslash.

198
00:17:03,830 --> 00:17:07,900
The plus forward slash dollar sign.

199
00:17:09,590 --> 00:17:16,410
Views post the tail as a view and will give this the name single

200
00:17:21,090 --> 00:17:27,750
and the last one is just if you want delete something it will be delete and then we want it to connect

201
00:17:27,750 --> 00:17:32,670
to the actual primary key here because we already know it's going to be that user itself that is going

202
00:17:32,670 --> 00:17:39,870
to be able to delete them so I'll say delete the primary key and then dollar sign and then use that

203
00:17:39,870 --> 00:17:50,130
delete post as a view but the name is equal to delete perfect So those are the URLs we need so we definitely

204
00:17:50,130 --> 00:17:53,130
did a lot here and has a lot of new stuff that we haven't actually seen yet.

205
00:17:53,140 --> 00:17:55,980
Whoops let me make sure that says From there we go.

206
00:17:55,980 --> 00:17:58,050
So let's quickly review everything we just did.

207
00:17:58,080 --> 00:18:00,950
We'll start off with the views so imposed views not pi.

208
00:18:00,960 --> 00:18:05,340
We ended up doing is essentially a bunch of imports that were going to use later and we start off a

209
00:18:05,340 --> 00:18:06,120
very simple one.

210
00:18:06,120 --> 00:18:11,550
Just the post list but remember before that we wanted user equal to get user model so we could play

211
00:18:11,550 --> 00:18:13,050
around and pass that in if needed.

212
00:18:14,100 --> 00:18:15,720
So Clast post list.

213
00:18:15,990 --> 00:18:22,250
So this shows a list of the posts related to either the user or the group or both of them really since

214
00:18:22,260 --> 00:18:23,820
post model has that.

215
00:18:24,060 --> 00:18:29,030
Then we have the user post so that's the list view for a specific users post and then we have this get

216
00:18:29,040 --> 00:18:34,810
queries sent method which essentially just checks where the username is exactly equal to the get user

217
00:18:34,810 --> 00:18:39,970
name of who's ever logged in right now so you can see here that user object that we set up.

218
00:18:39,970 --> 00:18:41,040
They get user model.

219
00:18:41,040 --> 00:18:42,120
This is where we could use it.

220
00:18:42,120 --> 00:18:42,880
So let's see.

221
00:18:42,960 --> 00:18:49,770
Or am that Gengel provides that object relational model or mapper then we have the context data which

222
00:18:49,770 --> 00:18:54,000
allows us to grab that post-Easter and then return the contex dictionary for that.

223
00:18:54,000 --> 00:18:56,840
Then we have the post details when you select a particular post.

224
00:18:56,850 --> 00:18:58,220
There is a detail view on it.

225
00:18:58,290 --> 00:19:02,290
Again just connected to the post model and select related that should be in a string.

226
00:19:02,490 --> 00:19:03,660
So good catch there.

227
00:19:03,690 --> 00:19:09,930
Save that and then we have the Create post and again that's just when you want to create a post the

228
00:19:09,930 --> 00:19:14,030
message in the group and then we check to the form is valid and then we had delete posts.

229
00:19:14,040 --> 00:19:19,830
Very simple thing except we added a little more on this delete method to actually return something saying

230
00:19:19,830 --> 00:19:21,000
the post was deleted.

231
00:19:21,390 --> 00:19:27,210
OK so finally after that we said you Elle's that pi and just matched up all the Euro patterns that we

232
00:19:27,210 --> 00:19:28,690
just created.

233
00:19:28,710 --> 00:19:32,010
Definitely check out the documentation for a lot of these class based views.

234
00:19:32,040 --> 00:19:37,470
If you are having trouble with some of these methods such as the get context data or get query set the

235
00:19:37,470 --> 00:19:39,890
documentation really explains those thoroughly.

236
00:19:39,900 --> 00:19:42,990
Those are methods you're going to use as you get more advanced in Jingo.

237
00:19:43,110 --> 00:19:47,070
A lot of the class based views you can use them without these additional methods.

238
00:19:47,070 --> 00:19:48,740
In fact we've seen that already in the past.

239
00:19:48,780 --> 00:19:53,460
So with that group's application it's only when you start getting more advanced or want certain functionality

240
00:19:53,650 --> 00:19:56,640
that you'll end up adding on with extra methods.

241
00:19:56,760 --> 00:20:00,180
A lot of the functionality you'll be using for a lot of your own projects probably at the start are

242
00:20:00,180 --> 00:20:02,850
going to work just fine with class based views.

243
00:20:03,180 --> 00:20:05,570
OK thanks everyone and I'll see you at the next lecture.
