1
00:00:04,960 --> 00:00:09,870
Hello everyone and welcome to the solutions lecture the function exercises from Part 2.

2
00:00:09,940 --> 00:00:12,750
We're going to hop over to the editor and get started.

3
00:00:13,030 --> 00:00:16,240
OK here I am at the javascript file.

4
00:00:16,350 --> 00:00:21,330
And let's start off with Problem number one which is actually quite simple but it may be a little tricky.

5
00:00:21,340 --> 00:00:24,140
First you can do all in one line.

6
00:00:24,220 --> 00:00:25,780
So let's see how we can do this.

7
00:00:26,690 --> 00:00:32,240
The basic question here is we want to write a function called sleep then that takes into boolean parameters

8
00:00:32,570 --> 00:00:34,380
weekday and vacation.

9
00:00:34,550 --> 00:00:40,130
And if the parameter week is true it means it's a weekday and if the parameter vacation is true it means

10
00:00:40,130 --> 00:00:45,680
we're on vacation and we want to sleep in if we're on vacation or it's on a weekday.

11
00:00:46,010 --> 00:00:48,200
So let's see how we can do that.

12
00:00:48,850 --> 00:00:54,640
It's actually quite easy if you remember your comparison operators and logical operators where we can

13
00:00:54,640 --> 00:00:58,110
do is just check that it's not a weekday.

14
00:00:58,150 --> 00:01:07,120
With an exclamation mark so we say it's not a weekday or vacation is true because remember these are

15
00:01:07,120 --> 00:01:11,290
just boolean values and that's actually all you had to do for this particular function.

16
00:01:11,290 --> 00:01:17,500
So that's the solution for sleep in check that it's not a weekday or using the two pipe operators that

17
00:01:17,500 --> 00:01:18,970
were truly on vacation.

18
00:01:18,970 --> 00:01:20,030
That vacation is true.

19
00:01:21,280 --> 00:01:24,230
Next up is a similar problem called monkey trouble.

20
00:01:24,400 --> 00:01:30,910
And here we have two monkeys A and B in the parameters a smile and B smile indicate if each is smiling

21
00:01:31,360 --> 00:01:32,400
and we're in trouble.

22
00:01:32,470 --> 00:01:38,320
If they are both smiling or if neither of them is smiling and return true if we are in trouble.

23
00:01:38,710 --> 00:01:40,780
So here is an example.

24
00:01:40,780 --> 00:01:44,870
If a smiling and be smiling then we are in trouble.

25
00:01:45,160 --> 00:01:48,330
If neither of them are smiling then we are in trouble.

26
00:01:48,400 --> 00:01:52,060
If it's one of the other true false then we're not in trouble.

27
00:01:52,060 --> 00:01:52,980
False.

28
00:01:53,330 --> 00:01:55,330
OK so how can we do this.

29
00:01:55,330 --> 00:02:00,970
Again this is actually an other one liner will say return.

30
00:02:01,120 --> 00:02:04,320
I want to check for the case where they're both smiling.

31
00:02:04,330 --> 00:02:13,890
So since these are both booleans I can just say a smile and be smile.

32
00:02:16,630 --> 00:02:20,420
So if that's true and true then I am in trouble.

33
00:02:20,680 --> 00:02:22,190
So that's one case.

34
00:02:22,420 --> 00:02:28,210
Or we have to remember the other case so I can also put the second case in parentheses where neither

35
00:02:28,210 --> 00:02:32,770
of them are smiling which is going to look almost the same except in this case.

36
00:02:32,830 --> 00:02:34,510
I have these operators here

37
00:02:37,760 --> 00:02:39,610
and that's the solution and one line right there.

38
00:02:39,620 --> 00:02:45,910
So we check the case where they're both smiling or the case where neither of them are smiling.

39
00:02:45,980 --> 00:02:49,180
Anything else will just return false.

40
00:02:49,200 --> 00:02:51,600
Let's continue on to Problem number three.

41
00:02:51,750 --> 00:02:56,910
And if you are having trouble with these and that I'm in multiple lines don't worry I'm showing these

42
00:02:56,910 --> 00:03:01,890
solutions on purpose because once you've done a lot of programming and you're more of an experienced

43
00:03:01,890 --> 00:03:05,530
programmer These are the type of solutions are going to be naturally doing.

44
00:03:05,670 --> 00:03:08,850
If you still got the question right but did it in multiple lines.

45
00:03:08,850 --> 00:03:10,560
Don't worry if you're just a beginner.

46
00:03:10,560 --> 00:03:12,010
That's totally fine as well.

47
00:03:12,120 --> 00:03:13,620
As long as it actually works.

48
00:03:13,680 --> 00:03:15,060
Don't sweat it.

49
00:03:15,070 --> 00:03:17,850
Moving along to Problem 3 string times.

50
00:03:17,940 --> 00:03:23,730
So we are given a string and a non-negative integer n and we want to return a larger string that has

51
00:03:23,840 --> 00:03:26,100
any copies of the original string.

52
00:03:26,240 --> 00:03:30,210
We see here some input output examples.

53
00:03:30,210 --> 00:03:31,480
So how can we do this.

54
00:03:31,680 --> 00:03:38,050
Well it's type of code and show you are going to make a variable called Return.

55
00:03:38,110 --> 00:03:39,960
S t r.

56
00:03:40,070 --> 00:03:43,930
And that's going to be the string that I return and start off with.

57
00:03:44,240 --> 00:03:51,150
It's just an empty string and then I'm going to say variable I's equal to zero.

58
00:03:53,080 --> 00:03:59,770
And only a while loop loops a while loop that says While I is less than an

59
00:04:02,510 --> 00:04:14,190
the return String that I made is going to add SDR which is the actual input string and then I'm going

60
00:04:14,190 --> 00:04:16,230
to increment.

61
00:04:16,240 --> 00:04:25,760
I once that while loop is done then I jus return the return String and that's all there is to it.

62
00:04:25,820 --> 00:04:28,070
So let's review what's actually happening here.

63
00:04:28,100 --> 00:04:30,470
I make an empty string.

64
00:04:30,630 --> 00:04:36,160
I initialize I to be equal to zero and then will I is less than n.

65
00:04:36,180 --> 00:04:43,290
I'm going to keep concatenating the SDR the input string to the return String and then increment by

66
00:04:43,290 --> 00:04:50,290
one until I reach an and after that the while loop is over and I just return string itself.

67
00:04:50,640 --> 00:04:55,110
So hopefully you remember here how to use a while loop and the fact that you can concatenate strings

68
00:04:55,110 --> 00:05:01,090
together Louis long to Problem number four is a little more mathematical.

69
00:05:01,090 --> 00:05:05,770
In this case even three numerical values A B and C returned their sum.

70
00:05:05,770 --> 00:05:10,690
However there's a little special rule to it if one of the values is 13 then it does not count towards

71
00:05:10,690 --> 00:05:13,050
the sum and values to its right.

72
00:05:13,060 --> 00:05:14,080
Also do not count.

73
00:05:14,170 --> 00:05:18,060
So for example if B is 13 both B and C do not count.

74
00:05:18,070 --> 00:05:22,770
So it was 13 then none of the values would count.

75
00:05:22,770 --> 00:05:24,990
So here we have a function lucky sum.

76
00:05:25,140 --> 00:05:26,730
And let's see how we can do this.

77
00:05:26,760 --> 00:05:31,250
It's actually just they essentially a bunch of if statements to check for the various cases.

78
00:05:32,750 --> 00:05:39,520
So the first statement if I'm going to say if a is equal to 13.

79
00:05:39,520 --> 00:05:43,580
Remember that was the case where if A's tickled the 13 then it doesn't count.

80
00:05:43,630 --> 00:05:45,830
And nothing to the right counts right off the bat.

81
00:05:45,850 --> 00:05:47,350
Physical 13.

82
00:05:47,700 --> 00:05:48,950
I'm going to return 0

83
00:05:51,790 --> 00:05:59,550
and then I'm going to check for the next case and that next case can be another if statement if the

84
00:06:01,150 --> 00:06:02,410
is 13.

85
00:06:04,870 --> 00:06:08,880
Return a.

86
00:06:09,080 --> 00:06:21,890
And then we can say if C is equal to 13 in that case return a plus b and if none of those returns get

87
00:06:21,890 --> 00:06:26,710
executed we could return a B plus C.

88
00:06:26,900 --> 00:06:29,890
So that's all you can do this with just a bunch of if statements.

89
00:06:30,050 --> 00:06:32,370
But let's rewrite this now to use if.

90
00:06:32,390 --> 00:06:34,400
Else if and else statements.

91
00:06:34,400 --> 00:06:38,820
So I'm going to delete this composite screen if you want to see this code.

92
00:06:38,900 --> 00:06:40,640
Also the in solution.

93
00:06:40,640 --> 00:06:43,530
Well let's show you now with if and else if statement.

94
00:06:43,530 --> 00:06:51,950
So if a is equal to 13 and I was using double equal sign there just because we assume that we're actually

95
00:06:51,950 --> 00:07:02,080
going to get integers not strings but if it's triple equal science 13 I return 0 then we have LCF.

96
00:07:02,230 --> 00:07:11,620
So physical 13 then I'm going to return a which makes sense because I still only wants the left of B

97
00:07:12,960 --> 00:07:21,120
when we say LCF see is equal to 13 and I'm going to return a plus b.

98
00:07:22,650 --> 00:07:23,830
And else.

99
00:07:23,880 --> 00:07:30,480
So if a is not equal to 13 and B's not equal to 13 and sees that equaled 13 that I just return the sum

100
00:07:30,480 --> 00:07:36,650
of all of them a plus b c and that's how you can do this problem using if LCF and L statements.

101
00:07:36,730 --> 00:07:42,210
It's up to you when you want to use the same gender one makes more sense to you is fine.

102
00:07:42,210 --> 00:07:47,460
And then finally problem 5 the bonus problem if you're driving a little too fast the police officer

103
00:07:47,460 --> 00:07:48,310
stops you.

104
00:07:48,330 --> 00:07:54,480
And basically what happens here is we have to compute the ticket and we have some encoded integer values

105
00:07:54,750 --> 00:07:56,270
where 0 is no ticket.

106
00:07:56,280 --> 00:08:00,290
One is a small ticket and two is a big ticket and a first beat.

107
00:08:00,290 --> 00:08:04,980
Well we were driving a 60 mph or kilometers per hour or less.

108
00:08:04,980 --> 00:08:06,030
The result is zero.

109
00:08:06,300 --> 00:08:11,580
If the speed is between 61 and 80 inclusive the result is one we get a small ticket.

110
00:08:11,580 --> 00:08:17,460
And if the speed is 81 or more the result is two we get a big ticket unless it's your birthday.

111
00:08:17,580 --> 00:08:21,480
And on that day your speed can be five higher in all cases.

112
00:08:21,810 --> 00:08:30,540
So the second input this false true that indicates whether or not it is your birthday OK let's actually

113
00:08:30,540 --> 00:08:39,200
write some code here I'm going to start off by with an if statement and I'm going to say if it's your

114
00:08:39,200 --> 00:08:39,730
birthday.

115
00:08:39,740 --> 00:08:48,570
So if is birthday speed I'm just right off the bat going to subtract 5 from it.

116
00:08:51,430 --> 00:09:04,210
And then I can say if speed is less than or equal to 60 I return 0 and then I can say well show it with

117
00:09:04,210 --> 00:09:06,060
the IF statements for now.

118
00:09:06,250 --> 00:09:08,050
If the speed

119
00:09:10,620 --> 00:09:22,180
is greater than 60 but less than or equal to 80 then I will say return 1.

120
00:09:22,340 --> 00:09:27,060
And if none of those gets triggered then I just return to going too fast overall.

121
00:09:27,290 --> 00:09:32,950
So that's say you can do just a few If statements and if you wanted to you could rewrite these to be

122
00:09:33,030 --> 00:09:37,240
in if LCF and then an ELSE to return to.

123
00:09:37,490 --> 00:09:41,300
So this would be the if statement this would be the Elspeth.

124
00:09:41,300 --> 00:09:46,030
And then this would be the else it's really up to you again however you want to write them whether it

125
00:09:46,100 --> 00:09:47,710
makes more sense to you.

126
00:09:47,720 --> 00:09:54,650
The trick I used for this was basically this very first if statement which is outside of these last

127
00:09:54,650 --> 00:10:02,110
three because it says essentially just saying OK if it is your birthday then the speed is minus five.

128
00:10:02,180 --> 00:10:07,000
And that way I can just check against everything except subtract 5 from it.

129
00:10:08,180 --> 00:10:10,610
To me personally that's what made the most sense logically.

130
00:10:10,820 --> 00:10:16,190
But there's tons of solutions for this so your logic may be totally different than what's here depending

131
00:10:16,190 --> 00:10:22,610
on how you dealt with it is birthday Bulleen so feel free to share the Q&amp;A forums your solutions.

132
00:10:22,620 --> 00:10:27,930
Finally we have the bonus make bricks and for this bonus problem we wanted to make a row of bricks.

133
00:10:27,930 --> 00:10:33,150
That is some sort of goal inches long and we have a number of small bricks that are one in sheet and

134
00:10:33,150 --> 00:10:35,660
a number of big bricks that are 5 inches each.

135
00:10:35,660 --> 00:10:40,470
We want to return true if it is possible to make the goal by choosing from the given bricks.

136
00:10:40,470 --> 00:10:44,370
And this is a little harder than it looks but it can actually be done without any loops and in a single

137
00:10:44,370 --> 00:10:45,150
line.

138
00:10:45,150 --> 00:10:48,710
And like I said before if you can't figure this one out don't worry it's a bonus.

139
00:10:48,870 --> 00:10:59,520
But let me show you how you could do this all in one line I'm going to say return and first I will say

140
00:10:59,700 --> 00:11:00,990
take our goal.

141
00:11:00,990 --> 00:11:10,800
Inches same model five greater than or equal to zero has to be true.

142
00:11:12,050 --> 00:11:24,870
And the goal inches model five minus the amount of small Brick's has to be less than or equal to zero.

143
00:11:26,070 --> 00:11:41,080
And if we come back here we want small plus five times as big to be greater than or equal to the goal.

144
00:11:41,690 --> 00:11:43,130
And that's how you can do this launch.

145
00:11:43,190 --> 00:11:44,860
This is problem all in one line.

146
00:11:44,860 --> 00:11:47,450
So let's actually break down what's happening here.

147
00:11:48,460 --> 00:11:50,210
So you remember we want to make bricks.

148
00:11:50,320 --> 00:11:54,640
We have a certain number of small bricks that are 1 inch each and a certain number of big bricks that

149
00:11:54,640 --> 00:11:56,240
are 5 inches each.

150
00:11:56,350 --> 00:11:59,370
And we want to make the road that is gole inches long.

151
00:11:59,410 --> 00:12:04,420
And what we really want to know is return true if it's even possible to make the goal by choosing from

152
00:12:04,420 --> 00:12:05,790
the given bricks.

153
00:12:05,800 --> 00:12:15,190
So for example if we have one small brick and one big brick we can make 1 inch five inch and six inch

154
00:12:15,190 --> 00:12:20,350
goals but we wouldn't be able to make four inch goals because we don't have enough small bricks and

155
00:12:20,350 --> 00:12:25,730
we have just one big brick so we can't actually make that incircle if you will.

156
00:12:26,140 --> 00:12:28,910
So that's kind of the logic behind the solution.

157
00:12:29,170 --> 00:12:36,200
So the very first one just checks if the goal maade of five is greater than or equal to zero.

158
00:12:36,370 --> 00:12:41,050
Then that checks for the large bricks and then we do this.

159
00:12:41,190 --> 00:12:47,350
The goal modifies minus the amount of small bricks needs to be less than or equal to zero here.

160
00:12:47,400 --> 00:12:54,750
And basically what that means is I need to know that I have enough filler bricks between the counts

161
00:12:54,840 --> 00:12:55,790
of five.

162
00:12:55,800 --> 00:12:57,380
So between the multiples of 5.

163
00:12:57,570 --> 00:13:04,070
This checks for the actual filler bricks and then here this last case where I say small plus five times

164
00:13:04,080 --> 00:13:11,130
big checks I have the right combination of small bricks and big bricks in order to at least meet or

165
00:13:11,130 --> 00:13:12,490
exceed that goal.

166
00:13:12,840 --> 00:13:13,160
OK.

167
00:13:13,170 --> 00:13:14,450
So take your time.

168
00:13:14,460 --> 00:13:16,820
This one's really tricky to think about.

169
00:13:16,830 --> 00:13:22,670
And like I said it's not so much about general javascript's syntax it's more about programming in general.

170
00:13:22,740 --> 00:13:25,950
I would recommend that you check out coding that dot com.

171
00:13:25,950 --> 00:13:31,850
So if you scroll all the way up here I mentioned the actual Web site called coding that dot com.

172
00:13:31,890 --> 00:13:38,070
They actually have a full video explanation on how you can get to this one line of code for this make

173
00:13:38,070 --> 00:13:38,960
bricks problem.

174
00:13:38,970 --> 00:13:43,890
It's kind of the famous problem on the Web site because it's so tricky and this solution on a one line

175
00:13:43,890 --> 00:13:47,410
can seem so unintuitive at first so take your time with it.

176
00:13:47,460 --> 00:13:54,060
Visit coding that com search for make bricks and you'll find that question along with a full video explanation

177
00:13:54,150 --> 00:13:56,370
of the specific solution for it.

178
00:13:56,670 --> 00:13:57,270
OK.

179
00:13:57,600 --> 00:13:58,380
Thanks everyone.

180
00:13:58,380 --> 00:13:59,920
Hope you enjoyed the exercises.

181
00:13:59,940 --> 00:14:01,490
Feel free to post the Q&amp;A forums.

182
00:14:01,500 --> 00:14:04,180
If you get stuck on anything I'll see you at the next lecture.
