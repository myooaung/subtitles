WEBVTT

00:02.110 --> 00:04.900
So the goal is to create a new subscription now

00:05.170 --> 00:07.420
through the service worker but in our app.js

00:07.450 --> 00:12.620
file and a new subscription is generally created very simply.

00:12.850 --> 00:15.340
We use our service worker registration.

00:15.340 --> 00:22.330
Now since this is a variable, an argument only available in this then function here, I'll quickly create

00:22.420 --> 00:31.000
a new variable which I'll name reg and I will store the service worker registration in it, this variable can

00:31.000 --> 00:32.650
now be accessed everywhere,

00:32.740 --> 00:34.310
so I'll access it here

00:34.660 --> 00:39.880
and now we can access the push manager again to also create a new subscription.

00:39.880 --> 00:43.420
We do this by simply calling subscribe. Now

00:43.480 --> 00:45.150
we will not stop here

00:45.160 --> 00:50.020
but basically what this will do is it will create a new subscription for the given browser on this

00:50.020 --> 00:51.070
device.

00:51.070 --> 00:53.440
This is what it does, creates a new subscription.

00:53.740 --> 00:58.540
If we have an existing subscription, it will render the old one useless.

00:58.540 --> 01:00.750
So we have a new subscription now,

01:01.000 --> 01:04.590
however this is not how we do it.

01:04.630 --> 01:11.020
As I mentioned earlier, a subscription contains the endpoint of that browser vendor server to which

01:11.020 --> 01:13.820
we push our push messages,

01:13.840 --> 01:20.170
anyone with this endpoint can send messages to that server and this server will forward them to our

01:20.170 --> 01:21.620
web app.

01:21.640 --> 01:27.520
Now if anyone finds out what our endpoint URL is, he can start sending messages to our users

01:27.550 --> 01:31.490
in our app and these messages will look like they are coming from us,

01:31.660 --> 01:37.860
therefore we need to protect this and we protect this in two ways.

01:37.960 --> 01:43.150
We do it by passing configuration to subscribe with a Javascript object.

01:43.240 --> 01:48.090
First of all there is a user visible only property which we set to true,

01:48.250 --> 01:55.830
this basically says that push notifications sent through our service are only visible to this user.

01:55.890 --> 02:02.740
Now that's not really a security mechanism though, the security mechanism is that we will identify our

02:02.830 --> 02:04.600
own application server,

02:04.600 --> 02:12.670
so this is now our own back-end server as the only valid source sending you push messages, so that anyone

02:12.670 --> 02:19.930
else sending push messages to the API endpoint by the browser vendor server will simply not get through,

02:20.230 --> 02:22.930
his push messages won't be delivered.

02:22.930 --> 02:28.200
Now to identify our own application server, passing just the IP

02:28.210 --> 02:34.440
or something like that certainly isn't enough because that's easy to trick and not really secure.

02:34.900 --> 02:43.180
Instead what we want to do is we'll use an approach, an approach which is called vapid. Now vapid can be

02:43.180 --> 02:50.260
thought of as an approach where we have two keys, a public and a private one. The public one as the name

02:50.260 --> 02:53.310
implies is the one which can be exposed to the public,

02:53.530 --> 02:58.210
that's the one we'll use in Javascript because as you know, everyone can read our Javascript,

02:58.210 --> 03:00.410
we can't hide information in there,

03:00.530 --> 03:06.520
therefore that is where we use the public one. The private key is connected to the public one but can't

03:06.520 --> 03:12.000
be derived from the public one and is stored on our application server only,

03:12.010 --> 03:16.840
so it runs on the server and therefore can't be accessed without people hacking our server,

03:17.020 --> 03:22.050
in which case they could start sending push notifications to our users anyways.

03:22.540 --> 03:24.160
So that's the private key,

03:24.160 --> 03:26.130
only the two together work.

03:26.320 --> 03:31.020
So if you only get the public one, that's not enough to start sending information.

03:31.380 --> 03:35.370
This is the approach we'll use and for that, we need these vapid

03:35.380 --> 03:42.420
keys. Now behind the scenes and I'll link this article that at the end of this module, the vapid keys use

03:42.430 --> 03:48.330
JSON Web Tokens to carry identifying information and simply are converted

03:48.440 --> 03:53.210
to base 64 strings you could say, to keys we can use easily.

03:53.440 --> 03:58.720
Now you could theoretically create them from scratch manually and that's no fun at all, which is why

03:58.720 --> 04:06.070
we use package, a Javascript library to generate them. We'll also need a library to send push messages

04:06.070 --> 04:12.310
later on because whilst you can build everything from ground, there is absolutely no sense in doing so

04:12.310 --> 04:16.850
and there is a great push library we will use, it's called web push.

04:17.260 --> 04:19.000
So this is what I'll do next, 

04:19.000 --> 04:23.330
I'll install the web push and use it to generate my vapid

04:23.340 --> 04:28.170
keys to then use these keys to secure the push messages.

04:28.300 --> 04:30.330
Let's do this in the next lecture.
