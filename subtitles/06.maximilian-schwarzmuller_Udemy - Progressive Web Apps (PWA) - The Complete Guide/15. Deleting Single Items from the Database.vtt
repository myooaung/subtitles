WEBVTT

00:02.300 --> 00:05.450
Now as I mentioned, clearing everything is one solution,

00:05.450 --> 00:11.330
sometimes you might have an approach where you simply want to have your own logic to delete single items

00:11.330 --> 00:12.680
from the database.

00:12.680 --> 00:18.470
Now that logic might be whatever you need but for that, you probably want to delete the single items,

00:18.500 --> 00:20.350
so I'll show you how that works too.

00:20.510 --> 00:28.230
So in the utility.js file, I'll create a new function which I'll name deleteItemFromData

00:28.250 --> 00:31.620
and of course you can choose any name you want as always.

00:31.640 --> 00:37.040
Now here we definitely need two arguments, the store which we want to access but then the ID of the

00:37.040 --> 00:41.600
element which we want to delete of course because it's all about deleting a single element here.

00:41.990 --> 00:51.620
So here, I now again use return dbPromise and call then and in there, we get as always access to the

00:51.620 --> 00:52.230
database,

00:52.250 --> 00:54.240
so far that's nothing new.

00:54.470 --> 01:00.700
Now in that database here, I first of all create a transaction as before with DB transaction,

01:00.770 --> 01:06.450
so you know that code and transaction requires the store which we get as an argument in this function

01:06.890 --> 01:08.640
and then which kind of transaction it is

01:08.750 --> 01:14.150
and it still is a readwrite transaction here because we plan on deleting something which is a write

01:14.240 --> 01:17.130
access basically, we're writing something to the database

01:17.150 --> 01:20.570
even though we're deleting but it's basically changing the database.

01:20.990 --> 01:28.640
So next, we get access to a store with tx object store and we pass the store we want to access and

01:28.640 --> 01:35.600
then we can conveniently call store delete ID. By the way, getting a single item is basically the same,

01:35.600 --> 01:42.440
there you have store get ID and you can directly return that, the get function just like with get all

01:42.500 --> 01:47.150
because a read request never needs to wait for the transaction to succeed

01:47.210 --> 01:51.350
basically. Deleting it though is a different story, here of course

01:51.350 --> 01:58.940
we return tx complete to make sure that we keep database integrity and then I feel free

01:59.180 --> 02:08.760
to chain another then block here where I basically have a function where I console log item deleted.

02:09.270 --> 02:12.320
Now therefore, I don't need to return the promise because I'm handling it here.

02:12.330 --> 02:17.430
I didn't have it handled before in the other files by the way but I wanted to return it to have at least the

02:17.430 --> 02:18.790
option of doing so.

02:19.140 --> 02:25.260
So this is the code which allows us to delete a single object, later in the course, we'll need this again,

02:25.530 --> 02:26.250
for now

02:26.250 --> 02:28.330
I just want to demonstrate how it works.

02:28.500 --> 02:35.470
So back in the sw.js file, I will go into my code where I clear all the data.

02:35.850 --> 02:39.480
Now clearing all the data is of course nice,

02:39.510 --> 02:41.480
I also want to do something else now,

02:41.520 --> 02:45.010
I basically want to delete the data immediately after it was written.

02:45.210 --> 02:54.540
So for testing only, I'll briefly chain a then call here, call delete item from data thereafter on posts,

02:54.780 --> 03:01.190
pass the key which will be my ID and this should delete an item instantly after it was written,

03:01.260 --> 03:04.160
so now basically our cache shouldn't get populated.

03:04.170 --> 03:05.940
This of course is no code that makes sense,

03:05.970 --> 03:08.950
it's just there to test the delete item from data method.

03:09.420 --> 03:16.440
So for that, let's go back and clear the storage to start from scratch, reload the application, reload

03:16.440 --> 03:19.110
one more time to also initialize our cache here

03:19.410 --> 03:25.390
and now let's have a look at indexedDB, we should see that posts is empty and it is

03:25.510 --> 03:31.360
and now if I reload this again and again and I close the developer tools to make sure I don't have a buggy

03:31.360 --> 03:36.420
display here on indexedDB, so let me refresh this, close this again,

03:36.430 --> 03:37.450
open it,

03:37.450 --> 03:38.760
have a look at posts,

03:38.800 --> 03:40.030
it's still empty.

03:40.030 --> 03:43.590
This is the expected behavior because we're deleting everything instantly.

03:43.630 --> 03:45.490
Again, doesn't make much sense,

03:45.490 --> 03:46.830
I'll remove it in a second

03:46.990 --> 03:48.570
but for demo purposes

03:48.580 --> 03:50.230
delete item from data works.

03:50.230 --> 03:55.660
You could of course implement your own logic to decide which item needs to be deleted when, later in

03:55.660 --> 03:59.760
the course as mentioned, we'll also use this method in a place where it makes more sense.

03:59.800 --> 04:03.790
So for now, I'll remove this code here because it doesn't make any sense.
