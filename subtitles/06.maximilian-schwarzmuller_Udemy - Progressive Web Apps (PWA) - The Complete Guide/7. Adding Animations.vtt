WEBVTT

00:02.130 --> 00:06.570
Know there's one other thing I want to do in this module which is not really related to responsive

00:06.570 --> 00:12.360
design but more to making it look good on mobile devices. In our application,

00:12.450 --> 00:16.200
I'll switch back to the iPhone here, a little bit more room,

00:16.590 --> 00:24.380
if we click this button, we just get this modal here which simply is lying across our whole screen.

00:24.660 --> 00:30.610
Now wouldn't it be nicer if that would slide up, like you know it from real mobile devices?

00:30.930 --> 00:36.870
Well we can do that, adding animations is something you definitely want to consider in your application

00:37.290 --> 00:42.630
because just like here where this slides out and slides back in, these really are the tiny things

00:42.900 --> 00:49.590
that provide an awesome user experience and make your web app feel like a real native mobile app and

00:49.590 --> 00:53.810
we can actually easily provide an animation for this effect here.

00:54.090 --> 00:59.940
Let's go back to our code and let's identify what we have to animate. In the index.html file

00:59.940 --> 01:01.510
in the public folder,

01:01.710 --> 01:08.340
there this modal is actually this create post div here. In this div, I have these text fields using

01:08.340 --> 01:14.580
the material design lite components and we would need to animate this whole div to simply slide

01:14.580 --> 01:16.970
up instead of just be there.

01:17.070 --> 01:21.180
Now if we have a look at how it gets there, we have to look at the feed.js

01:21.220 --> 01:28.050
file, there all the way at the top we have that open create post modal method.

01:28.170 --> 01:33.510
That's the method which in the end is executed when we click the plus and there I simply set the style

01:33.510 --> 01:35.360
to block, the display style,

01:35.370 --> 01:39.790
this is there to unhide it, to show it basically.

01:39.950 --> 01:48.990
Now all we have to do here is actually change not only the the display style to block but also animate it, basically

01:49.050 --> 01:50.220
move it

01:50.480 --> 01:56.020
and for that I'll start with the initial state which I'll also animate here in my feed.css

01:56.020 --> 01:56.840
file.

01:57.190 --> 02:03.760
This is the create post selector for that div and there, I want to add two properties.

02:04.200 --> 02:10.560
The first property I'll add is transform which allows us to transform it,

02:10.560 --> 02:15.070
for example move it and I move it on the Y-axis, 

02:15.180 --> 02:18.960
so up and down with translateY

02:19.470 --> 02:25.410
and here I will use 100vh which is view height,

02:26.100 --> 02:32.250
so that basically is depending on the screen you're looking at it, the full height of the given screen.

02:32.250 --> 02:36.870
Now if you have a look at the browser support for vh and the other port units which are in the

02:36.870 --> 02:42.380
same category, it's pretty good. If we have a look at the known issues, we see there are some issues with

02:42.390 --> 02:43.350
some browsers

02:43.440 --> 02:48.860
but generally it should work fine on most browsers. If you don't want to use vh though,

02:48.960 --> 02:52.190
you can also work around that by using 100%, though

02:52.200 --> 02:59.290
then you need to make sure that all elements wrapping create post, like for example main also set their

02:59.300 --> 03:00.690
height to 100%,

03:00.810 --> 03:02.880
so that's the alternative then.

03:02.910 --> 03:07.840
Now since I'm setting the min-height here with 100vh too, I'll stick to vh here too,

03:07.860 --> 03:13.300
just wanted to throw that browser support thing and the possibility of moving to percentages

03:13.510 --> 03:14.640
also into the room.

03:14.670 --> 03:15.890
So that's one thing,

03:15.930 --> 03:17.360
we're moving it down,

03:17.520 --> 03:19.810
this already has one important implication.

03:20.010 --> 03:28.770
If we go back to our application and we clear the storage and reload to apply our updated style, as

03:28.770 --> 03:35.440
always going online first, if I click this button here now, whoops I canceled that update,

03:35.520 --> 03:41.430
you see we don't see it here because now the item will be there but it slides down,

03:41.520 --> 03:46.170
we can just see it here in the element inspector create post.

03:46.380 --> 03:49.070
It is visible, display none is disabled

03:49.350 --> 03:52.040
bu it slides all the way down

03:52.110 --> 04:00.590
and if I change this value here to for example 50, we see it's slowly coming up and this exactly is the

04:00.650 --> 04:04.870
animation we want to play here, right, have it slide all the way to the top.

04:05.070 --> 04:07.190
Well maybe not in the negative area though,

04:07.950 --> 04:09.450
just 20.

04:09.810 --> 04:11.880
So this is what we want to do,

04:11.880 --> 04:14.100
now how do we play this animation?

04:14.580 --> 04:20.940
We can take advantage of the transition property in CSS which allows us to animate a given property

04:20.940 --> 04:27.000
over time, so we can animate the transform property over 300 milliseconds.

04:27.000 --> 04:29.070
So whatever transform changes,

04:29.070 --> 04:35.300
so for example if we ever change this here, then it will be animated and not instantly changed.

04:35.670 --> 04:37.920
Well with that, we know what we have to do, right?

04:37.950 --> 04:45.630
We just have to go to feed.js where we show it and also change the transform value.

04:45.630 --> 04:48.990
So here, create post area gives us access to that element,

04:49.200 --> 04:55.610
we have to change style and then change the style transform to translateY

04:55.640 --> 04:56.470
zero

04:56.680 --> 05:01.410
which is the position we want to end in.

05:01.570 --> 05:09.590
Now if we save that and we go to application, clear the storage and I reload our application and click this

05:09.590 --> 05:13.850
button, you'll see it still instantly appears.

05:13.910 --> 05:16.490
Now there's a reason for that. In our code

05:16.490 --> 05:20.970
we set this to block and then we instantly also set this.

05:20.990 --> 05:27.740
The problem just is the animation will not be played because it doesn't recognize that it should play

05:27.740 --> 05:33.410
it because it doesn't recognize the block is actually assigned before, it does this in the same

05:33.410 --> 05:34.640
step basically

05:34.760 --> 05:40.250
and for that reason, it does not play the animation because it doesn't think that the item is visible

05:40.270 --> 05:40.970
anyways.

05:41.060 --> 05:46.850
Now here's a simple workaround which will work on basically all browsers. We can use set

05:46.850 --> 05:55.600
timeout here to basically wait for, only one millisecond should be enough, in the function which then is called,

05:55.740 --> 06:02.370
so which is basically almost immediately after setting this style to block, we then animate it by changing

06:02.370 --> 06:04.080
the transform style.

06:04.080 --> 06:06.870
Now this is enough to make CSS aware that

06:06.900 --> 06:10.160
these are two different steps and not happening in the same step.

06:10.500 --> 06:16.580
So with this in place, if I now go back to application and clear the storage and I reload this,

06:16.590 --> 06:22.130
now if I click this, we actually see it slide up. We still dismiss it instantly though and on 

06:22.120 --> 06:25.510
the second time we try to open it, there is no animation.

06:25.620 --> 06:28.070
The reason for this is that we never set the state back,

06:28.080 --> 06:29.630
we never animate back.

06:29.940 --> 06:36.600
Well to do that, all we have to do is we actually have to go to close create post modal, where I set the

06:36.600 --> 06:40.350
style to none and reverse the whole procedure.

06:40.740 --> 06:50.500
So here, I can basically say create posts area, style transform and set this equal to translateY

06:50.790 --> 06:58.080
and then just what we had here in feed.css, 100vh which will move it down by 100 viewport units

06:58.440 --> 06:59.720
on the height axis, 

06:59.940 --> 07:04.040
so the Y-axis. Now just as before,

07:04.070 --> 07:09.120
I want to make sure that this animation plays first before we then disable it.

07:09.260 --> 07:14.520
Now actually we don't even have to do this whole none thing here,

07:14.540 --> 07:16.300
you will see it also works

07:16.310 --> 07:21.020
if I comment this out because it will be outside of the viewport anyways.

07:21.530 --> 07:29.360
So if I reload this application here and clear the storage first to take my updated style file, you'll

07:29.360 --> 07:35.670
see it slide up, slide down, slide up, slide down and so on.

07:35.750 --> 07:38.460
Now you could still use the other trick

07:38.510 --> 07:42.920
and use set timeout here, though here you would have to wait for this animation to finish,

07:43.040 --> 07:48.110
so set timeout to 300 milliseconds since that's the duration of our animation

07:48.410 --> 07:50.270
but it also works like that.

07:50.450 --> 07:56.440
And yes of course also means that we can theoretically turn disable none off here, whoops

07:56.450 --> 08:02.870
we're inside a CSS file though and that we can also get rid of our trick up here because we don't

08:02.900 --> 08:05.510
even need to change the display style,

08:05.510 --> 08:09.620
we can just use the transform.

08:09.650 --> 08:12.110
Now let's save this and try it one final time,

08:12.110 --> 08:19.210
clear the site data, remove this and now we see it slide up and down and up and down

08:19.210 --> 08:21.260
and this looks much better.

08:21.280 --> 08:23.830
Now we will continue working on this modal later in the course

08:24.010 --> 08:27.970
but with that, we got a nice responsive application with a nice animation.
