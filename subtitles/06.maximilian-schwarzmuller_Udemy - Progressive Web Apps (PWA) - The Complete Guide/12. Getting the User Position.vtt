WEBVTT

00:02.270 --> 00:04.780
Let's dive into geolocation next

00:04.840 --> 00:10.010
and I already start on the MDN page of the geolocation object,

00:10.040 --> 00:14.580
that's another web API we may access to get the user position.

00:14.690 --> 00:17.570
Now as you can see, support is pretty decent,

00:17.570 --> 00:19.360
even Internet Explorer 9 has it,

00:19.370 --> 00:20.160
boy.

00:20.540 --> 00:23.400
Now on mobile, it's also pretty good,

00:23.510 --> 00:27.980
so getting access to the user position location shouldn't be too hard

00:28.070 --> 00:34.100
and actually the geolocation API, of course a link to this article can be found in the last lecture, the

00:34.160 --> 00:37.490
geolocation API allows you to not only get the current position,

00:37.490 --> 00:38.500
what we'll do,

00:38.660 --> 00:45.350
you can also watch a position to follow the user, to show that on a map or something, we'll use the current

00:45.350 --> 00:46.330
position.

00:46.820 --> 00:50.050
So that's geolocation API and where we can use it,

00:50.060 --> 00:56.660
now let's use it. Now for that, we need to get access to the button with which we want to fetch this position,

00:57.150 --> 01:03.270
that will be the button we have in our mobile here,

01:03.380 --> 01:04.420
get location.

01:04.550 --> 01:06.400
That's the button I'm interested in

01:06.530 --> 01:09.490
which will allow me to get the location of the user,

01:09.530 --> 01:17.060
it has the location button ID. We'll also need access to that location loader element which is just a

01:17.060 --> 01:23.240
spinner provided by that third-party library we're using, material-design-lite, to show some loading animation

01:23.240 --> 01:25.400
whilst we're fetching the location.

01:25.880 --> 01:31.320
So location button and location loader, let's add them in feed.js.

01:32.190 --> 01:36.680
I'll add two new variables, the location button,

01:36.680 --> 01:45.110
I get it by using document.querySelector and then ID location-btn was the ID and the loader, location

01:45.200 --> 01:49.950
loader equals document.querySelector

01:50.030 --> 01:55.910
and then there it was location-loader as ID, with a dash between these words.

01:55.930 --> 01:57.840
So now we get access to both,

01:57.880 --> 02:05.350
now initially I want to hide that loader, so I'll go to feed.css and add a quick rule that inside create post,

02:05.890 --> 02:13.550
I'll basically also say create post location loader should also have a display of none initially. Now in

02:13.590 --> 02:14.280
feed.js,

02:14.320 --> 02:21.310
I want to listen to clicks on the location button and I'll add that code maybe right below our

02:21.310 --> 02:23.200
initialization here.

02:23.200 --> 02:30.020
So there, I'll add location, not loader, location button and

02:31.090 --> 02:38.070
add an event listener to a click event of course where we execute this function in which I want to get

02:38.170 --> 02:40.930
the user location.

02:40.930 --> 02:46.390
Now one thing I'll do before I write the code here, we'll probably show the loader at some point of time

02:46.750 --> 02:48.610
and then hide the button,

02:48.640 --> 02:56.560
so in the code where we close the modal, where we reset everything, I want to make sure that I now again

02:56.560 --> 02:59.000 
show the button in case it was hidden

02:59.020 --> 02:59.980
in the meantime,

03:00.240 --> 03:03.080
so I'll set it to inline here

03:04.010 --> 03:07.880
and then I don't show the loader because maybe it was showing before.

03:07.990 --> 03:09.330
So that should be none,

03:09.370 --> 03:12.890
so that I'm back to my initial setup.

03:13.230 --> 03:17.230
Now with that in place, let's go back to fetching the location.

03:17.310 --> 03:21.720
Now what do we want to do inside that click listener here on the location button?

03:21.720 --> 03:28.500
Well first of all, we need to check if we do have access to the location, to the geolocation service and

03:28.500 --> 03:34.950
maybe we do that in the place where we open that modal, where we initialize the media,

03:34.950 --> 03:40.530
why don't we also initialize the location here?

03:40.600 --> 03:49.080
So let's quickly create that function, I'll add it right below this event listener here,

03:50.760 --> 03:53.090
so here we initialize location and

03:53.220 --> 03:54.190
what I want to do here is

03:54.240 --> 03:59.200
I want to check if we have the geolocation object in the navigator,

03:59.490 --> 04:01.430
to be precise I'll check the opposite.

04:01.620 --> 04:05.290
If we don't have it, then I don't want to show this button,

04:05.310 --> 04:11.910
so the location button, I'll set the display to none because there's no need in showing it, the user

04:11.910 --> 04:14.470
can't use it, it won't do anything,

04:14.490 --> 04:17.060
so that is how I initialized the location.

04:17.070 --> 04:22.220
So therefore if the button gets clicked, it was showing up and we can assume the user has access

04:22.230 --> 04:27.360
and of course in theory you could enable it by changing the styles in the elements tab in the developer

04:27.360 --> 04:28.020
tools

04:28.230 --> 04:34.440
but if you're doing that, you're not a normal user and yes it's OK if you then just fail, fetching your location,

04:34.740 --> 04:37.380
chances are you have a modern browser then anyways.

04:37.410 --> 04:43.860
So this code here should only get executed if we do have access to geolocation, of course

04:43.860 --> 04:49.250
feel free to simply put in another test and return in case you don't have access.

04:49.590 --> 04:53.200
So here I'm positive that we do have access to the geolocation,

04:53.220 --> 04:57.930
the next thing of course is we want to get the current position. For that,

04:57.930 --> 05:04.330
I'll use my navigator and then call geolocation get current position.

05:04.420 --> 05:10.240
Now by simply calling this, the user will also get prompted to grant permission.

05:10.260 --> 05:14.620
Now if he denies it, the error callback will be executed,

05:14.760 --> 05:17.570
if he accepts it, we will continue

05:17.730 --> 05:23.010
and in the future the user will not be prompted again unless he just skip the decision of course.

05:23.010 --> 05:29.350
So just as with the camera here, we automatically prompt for permission when it's necessary.

05:29.760 --> 05:32.040
So here, we get two callbacks, 

05:32.040 --> 05:35.300
the first one is a function where we get the position,

05:35.340 --> 05:37.750
that's our success callback.

05:37.860 --> 05:43.850
The second argument we pass to get current position is the error callback,

05:44.040 --> 05:46.660
for example this fires if permission is denied,

05:47.010 --> 05:51.220
so we can output the exact error we got here to get more information.

05:51.300 --> 05:58.830
Of course this will also error if we think we have geolocation access and we don't. We also have a third

05:58.860 --> 06:03.110
argument which is a Javascript object where we can configure this call.

06:03.150 --> 06:07.710
Now you can check this MDN article I highlighted earlier to see which options we have here.

06:07.890 --> 06:13.730
Now one very useful option I want to set up is the timeout property in this object.

06:13.800 --> 06:20.440
Timeout allows us to specify how long we try to get a location, a position.

06:20.700 --> 06:22.700
Now of course this shouldn't be too short,

06:22.710 --> 06:24.400
this is in milliseconds by the way

06:24.570 --> 06:31.200
but if it's super long, then you may just be looking and looking and there is just no GPS signal and it will

06:31.200 --> 06:33.880
fail after three minutes or something like that.

06:34.290 --> 06:38.110
So 1000 would be one second,

06:38.280 --> 06:44.340
so maybe we set this to 7000 and feel free to choose any amount you want.

06:44.340 --> 06:49.360
So here I'll give it seven seconds to find a position and thereafter, it will fail.

06:49.380 --> 06:56.710
Now if it fails, maybe we start with this case, now before it even fails, we need to do something else.

06:56.790 --> 06:59.700
We click the button and we know we have access to the location,

06:59.850 --> 07:05.760
so we want to hide the button and show that spinner. So I can reach out to the location button and set

07:05.760 --> 07:08.020
the display to none,

07:08.020 --> 07:16.870
excuse me, I want to hide the button but the loader, there I'll set the display to block to show it.

07:16.890 --> 07:23.410
Now if you fail, I can theoretically show that button again but chances are it won't work,

07:23.460 --> 07:31.580
still I can set the display to inline again and hide the loader.

07:31.620 --> 07:35.290
So location loader, here I'll set the style to none.

07:35.760 --> 07:41.700
So the user could click the button again and try again or always enter a manual location of course.

07:41.700 --> 07:50.510
Now what I also want to do is, I may want to throw an alert where I say couldn't fetch location,

07:50.510 --> 07:56.040
please enter manually, something like that, to inform the user they we're having issues.

07:56.190 --> 08:02.690
Now I also will add a new variable at the top which I'll name fetchedLocation and this fetchedLocation

08:02.690 --> 08:05.580
is undefined initially, here

08:05.650 --> 08:10.130
I'll also then set fetchedLocation to null again.

08:10.290 --> 08:15.320
Now in this case here that we got a position,

08:15.400 --> 08:17.090
now of course we can use it.

08:17.410 --> 08:24.550
So here I still want to re-enable the button and disable the loader because we're done loading,

08:24.640 --> 08:33.340
we also could output the position object but I can also tell you what's inside of it, here

08:33.370 --> 08:40.250
I then want to set fetchedLocation equal to position and there we have coords and then we have latitude

08:40.250 --> 08:45.890
and longitude. Now I'll only use the latitude for a reason,

08:45.910 --> 08:48.660
I don't want to disclose my position here.

08:48.730 --> 08:50.500
Now of course you can use both,

08:50.590 --> 08:53.270
you can use a Javascript object here.

08:53.380 --> 08:58.960
Now of course you could take the position coordinates, latitude and longitude and use something like

08:58.990 --> 09:03.820
Google geocoding API, link to which can be found in the last lecture of this module.

09:03.820 --> 09:08.970
There you can send latitudes and longitudes to them and they will give you back a valid address which

09:08.980 --> 09:12.570
you could then store, of course to really finish that thought,

09:12.610 --> 09:15.550
you would also have to make sure to handle this when you are offline,

09:15.570 --> 09:18.380
so also handle this with your service worker.

09:18.430 --> 09:21.620
Definitely an advanced practice you can do. Here

09:21.640 --> 09:25.170
I want to keep it simple because these are all things we already covered.

09:25.480 --> 09:33.340
So what I'll do here is I'll simply store the latitude in the fetchedLocation and I want to set my location

09:33.400 --> 09:39.970
input value equal to the latitude or to the fetched address you might have, here

09:40.030 --> 09:45.220
I'll simply write in Munich as a dummy value, which I'll of course always use while I'm sitting in Munich,

09:45.260 --> 09:51.960
of course in a real app you would want to fetch that data from Google's geocoding API or something comparable.

09:52.270 --> 10:02.050
Now with that, I also will reach out to location input and on the CSS class list, I'll add the isFocused class,

10:02.050 --> 10:06.550
this is required by the third-party library I'm using to make it look correctly

10:06.580 --> 10:13.270
once you manually set the value, so make sure to add isFocused with the add operator on the class list

10:13.270 --> 10:16.230
property on our location input.

10:16.750 --> 10:24.150
With all that set, we stored the fetchedLocation in extra variable and we adjusted our input value.

10:24.160 --> 10:31.120
Now I want to pass this new extra variable also to our back-end so that we would have the raw coordinates

10:31.150 --> 10:37.210
there too because in a real app, you could think that you have one object here, where you have a fetchedLocation

10:37.210 --> 10:42.880
let's say with latitude and then longitude which I'll set to zero here but you could fetch it from the

10:42.880 --> 10:43.880
coordinates

10:44.260 --> 10:50.860
and of course for the fallback case here, it would be maybe an object where you have

10:50.870 --> 10:54.120
latitude null and longitude null

10:54.460 --> 10:59.130
and now you could send the raw coordinates along with the parsed address.

10:59.140 --> 11:01.960
That's why I'm having this set up here too.

11:02.100 --> 11:07.240
Now with that, let's adjust our HTTP calls to also send these coordinates.

11:07.420 --> 11:14.620
Let's start in the feed.js file, in the part where we store it in indexedDB for synchronization,

11:14.660 --> 11:19.630
there I'll add my raw location property which is my fetchedLocation.

11:19.630 --> 11:28.030
With that, in send data, I of course want to append something, I want to append my raw location here,

11:28.180 --> 11:37.240
to be precise my raw location latitude which is the fetchedLocation latitude and I copy this

11:37.240 --> 11:44.560
to have my raw location longitude and in the service worker, we'll use the values from indexedDB.

11:44.740 --> 11:48.410
So there, I'll also go down to that sync listener,

11:48.670 --> 11:54.600
and on that sync listener here, I also want to have my,

11:54.880 --> 12:00.570
just to keep the names, raw location lat and lng,

12:00.780 --> 12:03.610
so let's quickly append that here

12:03.770 --> 12:11.430
and here it's of course dt.rawLocation.lat and dt.rawLocation.lng,

12:11.680 --> 12:17.000
raw location is what we're storing in indexedDB

12:18.200 --> 12:20.890
here in feed.js.

12:21.000 --> 12:27.350
So now I'm accessing this here to also store it in the database alongside with my dummy position which

12:27.350 --> 12:30.540
I'm always entering when I fetch a location.

12:30.700 --> 12:32.690
Now that's all nice, that was a lot of work,

12:32.810 --> 12:34.120
let's test it.

12:34.490 --> 12:36.590
So let's head over to the application

12:37.640 --> 12:42.870
and let's reload it to install the new service worker which should update since we changed the file.

12:43.100 --> 12:47.610
Let's then close the tab and open a new one to activate it as always

12:48.110 --> 12:53.040
and let's open our modal and let's try fetching the location.

12:53.220 --> 12:55.980
I'm prompted to allow this, so I will click yes

12:56.930 --> 13:01.150
and now let's see, if it manages to do this within seven seconds.

13:01.150 --> 13:01.960
Looks good,

13:01.960 --> 13:05.100
it fetched Munich here, somehow didn't fix that bug,

13:05.110 --> 13:06.810
I'll have to look into that.

13:06.910 --> 13:09.550
Now let me smile at the camera

13:10.220 --> 13:12.550
and send something

13:12.690 --> 13:16.290
and now let's post this to the server and see if it works.

13:17.150 --> 13:18.670
If we go to the database there,

13:18.730 --> 13:21.660
we got a new post in Munich,

13:21.830 --> 13:23.230
test location,

13:23.570 --> 13:26.330
however our raw data is missing.

13:26.360 --> 13:27.910
Now the reason for this is simple,

13:27.950 --> 13:30.060
we're not handling it on the server.

13:30.350 --> 13:35.300
In the index.js file where we stored something in the database, we're not handling this raw location

13:35.480 --> 13:37.020
which is coming in.

13:37.070 --> 13:40.500
So that's something I want to fix too.

13:40.670 --> 13:47.900
So in our server side code, let's enter raw location and that can be a Javascript object here where

13:47.900 --> 13:55.940
we have a latitude which should be fields.rawLocation.lat and longitude which should be

13:55.940 --> 13:58.180
fields.rawLocation.lng.

13:58.310 --> 14:00.430
So these are just the two properties

14:00.470 --> 14:03.310
I also do pass, rawLocation.lat and lng,

14:03.440 --> 14:08.590
that is what I am appending here to my incoming post data.

14:08.690 --> 14:15.100
So now we should store this in a rawLocation object in the database, let's simply deploy this to

14:15.110 --> 14:18.340
Firebase to see this again, of course this takes some seconds.

14:18.660 --> 14:21.570
Regarding the other bug with isFocused,

14:21.570 --> 14:23.410
let me quickly have a look at that too.

14:23.640 --> 14:29.420
The issue there is this isFocused thing shouldn't be added to the location input,

14:29.550 --> 14:33.420
it should be added to the wrapping div,

14:33.540 --> 14:41.560
so in our index.html file, here is the location input and isFocused needs to be added to this div,

14:41.580 --> 14:50.280
so with the ID manual location here. Now we can simply select this with the ID manual location and add

14:50.280 --> 14:51.660
the class to that.

14:51.660 --> 14:54.900
So in feed.js let me quickly go here,

14:54.990 --> 15:01.670
use document.querySelector and select this element to now add isFocused to its class list,

15:01.710 --> 15:05.040
so that's the wrapping div, not the input element.

15:05.040 --> 15:08.560
Now with that, let's wait for this deployment here to finish.

15:08.670 --> 15:10.210
It is finished, great,

15:10.290 --> 15:12.710
so now let's go back to our application,

15:12.840 --> 15:18.270
we need to bump up the static cache version since I changed something in Javascript without changing

15:18.280 --> 15:19.710
the service worker.

15:20.100 --> 15:23.800
Let's reload to install the new service worker as always

15:24.060 --> 15:29.150
and let's then quickly reopen the tab,

15:29.160 --> 15:31.190
there you can see our test location by the way

15:31.890 --> 15:34.570
and let's now try it out. So time to smile

15:37.470 --> 15:42.640
and time to test location again by fetching it here

15:44.170 --> 15:47.610
and let's now hit post.

15:47.700 --> 15:49.260
So now this looks better,

15:49.290 --> 15:53.590
you saw it automatically updated this to not have this bug anymore

15:53.880 --> 16:00.840
and on the database there, we should also see that we got a new post which also has a raw location

16:00.840 --> 16:01.840
object

16:01.870 --> 16:05.560
and longitude is simply set to zero because I hardcode that.

16:06.030 --> 16:09.000
So this is what we have here, now

16:09.300 --> 16:11.190
there are two things I want to fix.

16:11.190 --> 16:14.770
One is that the camera stays on, as you can see here indicated by this record

16:14.790 --> 16:20.040
icon, even if I close the modal, I want to close the camera if the modal is closed and the other thing

16:20.040 --> 16:26.340
is that I want to test if the location also works correctly for offline because it shouldn't be able

16:26.340 --> 16:29.490
to fetch the location then if we have absolutely no connection

16:29.620 --> 16:30.130
even though GPS

16:30.270 --> 16:33.620
maybe, then it should correctly fallback.

16:33.630 --> 16:36.990
So this is something I'll try and test in the next video.
