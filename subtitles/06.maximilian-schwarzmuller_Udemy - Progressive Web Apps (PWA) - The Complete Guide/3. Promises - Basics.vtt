WEBVTT

00:02.210 --> 00:08.920
In the last lecture, we wrote this basic code allowing us to handle this with callbacks, let's now rewrite

00:08.920 --> 00:17.380
this with promises. Promises are a relatively new feature, though already supported by quite some browsers,

00:17.680 --> 00:23.260
an article with detailed browser support can be found at the end of this module and promises work like

00:23.260 --> 00:24.010
that.

00:24.040 --> 00:28.260
We create a new promise which I'll store in a variable, I'll name the variable promise

00:28.270 --> 00:29.890
but you can pick any name you like.

00:30.160 --> 00:37.950
We then instantiate a new promise object and often times, you use promises which already have been instantiated,

00:37.990 --> 00:40.850
for example the register method returns a promise,

00:40.930 --> 00:42.410
I'll come back to that later.

00:42.430 --> 00:47.560
The promise constructor takes one argument, a function which will get executed right away,

00:47.560 --> 00:53.590
this function on the other hand also gets two arguments, two functions we can execute inside that function, a

00:53.590 --> 00:59.200
resolve and a reject function. Promises are basically able to give us back two types of results,

00:59.200 --> 01:02.990
they either resolve to a value or they throw an error

01:03.010 --> 01:08.270
by rejecting the promise. They will give us back a response under all circumstances,

01:08.350 --> 01:09.580
so we always get back

01:09.610 --> 01:12.370
either resolve or reject.

01:12.400 --> 01:16.360
Now let me take that set timeout code and put it into that

01:16.360 --> 01:17.480
promise.

01:17.660 --> 01:27.140
Now in that function here where I log this, I will simply resolve this text here for example,

01:27.180 --> 01:29.660
so I will resolve this string.

01:29.670 --> 01:31.860
This simply means the promise is done,

01:31.920 --> 01:38.730
pass this argument here back and I will come back to how we consume this in a second. So with that, I'll comment

01:38.760 --> 01:41.060
out the console log and the promise.

01:41.280 --> 01:48.150
We can now use the promise here and now we have two functions or methods we can execute on that promise

01:48.180 --> 01:52.320
object, then and catch.

01:52.320 --> 01:59.820
Now we already saw then earlier, here for example because register returns as such a promise, there we

01:59.820 --> 02:01.620
don't have to create it on our own

02:01.650 --> 02:05.640
and oftentimes you work with APIs that give you back promises.

02:05.640 --> 02:11.580
So this syntax of you creating a promise on your own, you're probably not going to use that that often.

02:11.820 --> 02:19.770
So the promise we created, we can use then to react to anytime the promise resolves,

02:19.770 --> 02:24.170
so this line here. We actually can also react to rejections,

02:24.170 --> 02:25.590
I'll come back to that too,

02:25.590 --> 02:27.830
let's stick to resolving now.

02:27.930 --> 02:36.480
Here we then execute some function and this function will get executed whenever resolve or reject

02:36.570 --> 02:38.120
is called.

02:38.130 --> 02:42.200
Here we get back the value we passed to resolve,

02:42.240 --> 02:43.990
so this string in this case.

02:44.010 --> 02:47.220
So since I created the promise, I know that I get back some text,

02:47.250 --> 02:52.920
you can of course give this argument any name you like and it can you then console log the text here to

02:52.920 --> 02:55.500
still write this to the console.

02:55.500 --> 03:02.730
Now if we change it like this and we save that and we go back to our application and reload, you'll still

03:02.730 --> 03:05.050
see this is executed right after set timeout

03:05.100 --> 03:08.970
and after three seconds, you'll see this is executed once the timer is done.

03:09.210 --> 03:15.090
So this still works as before but now using a promise. Now correctly you would say that's not shorter

03:15.090 --> 03:16.630
than the code we had before

03:16.920 --> 03:18.090
but that's not the idea,

03:18.090 --> 03:25.380
the real value of promises shines once you have multiple asynchronous tasks chained after each other

03:25.830 --> 03:30.040
because then you can really just chain then calls.

03:30.360 --> 03:36.780
If here console log were another value we return, maybe we do that,

03:36.900 --> 03:40.790
so we return text here, even though that's no asynchronous code, we still can do that,

03:40.800 --> 03:43.110
we can also return synchronous values.

03:43.110 --> 03:49.030
I can chain another then call where I have my function receiving let's say new text

03:49.080 --> 03:53.290
just to mix up the names and I could console log here.

03:53.330 --> 03:59.280
Now typically of course you wouldn't return the unchanged value but maybe funnel this value from the

03:59.280 --> 04:04.750
first resolved call through another promise or another asynchronous code.

04:04.830 --> 04:11.100
But having then calls chained after each other is a convenient and easy to understand way of handling

04:11.100 --> 04:11.730
values

04:11.790 --> 04:16.380
which you basically pass through a chain of tasks you could say.

04:16.410 --> 04:18.960
Now of course, your promise could also fail

04:18.960 --> 04:21.310
but first let me show you that this works.

04:21.330 --> 04:24.310
So let's quickly go back to the application reload,

04:24.390 --> 04:26.540
this is executed right after set timeout,

04:26.670 --> 04:28.020
let's wait for three seconds,

04:28.020 --> 04:29.870
this is executed once the timer is done.

04:29.880 --> 04:32.060
So here we see multiple then calls.

04:32.070 --> 04:35.820
Now as I said, your promise could also reject so it could fail.

04:35.820 --> 04:38.560
Let's handle this case in the next lecture.
