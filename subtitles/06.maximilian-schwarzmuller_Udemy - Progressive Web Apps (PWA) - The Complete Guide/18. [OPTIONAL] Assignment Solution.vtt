WEBVTT

00:02.050 --> 00:03.580
¿Por qué tienes éxito?

00:03.710 --> 00:05.180
Vamos a intentar esto juntos.

00:05.470 --> 00:10.870
En primer lugar, debemos registrar un programa de servicio y lo haré como cualquier carpeta pública porque quiero

00:10.870 --> 00:14.650
que mi trabajador de servicio tenga alcance en toda mi aplicación.

00:14.680 --> 00:17.060
Debe aplicarse a toda la aplicación.

00:17.230 --> 00:19.830
Así que agrega una carpeta y no la nombres como W. J ..

00:19.830 --> 00:23.510
Sí, aunque como aprendiste, el nombre del archivo depende de ti.

00:23.660 --> 00:26.180
No es de extrañar que no necesito hacer nada en este momento.

00:26.200 --> 00:30.790
Fui a registrarlo y lo haré en mi punto principal J. S. caer justo aquí en la parte superior.

00:30.790 --> 00:34.960
Tal vez usted aprenderá cómo registrar un trabajador de servicios.

00:34.960 --> 00:41.300
En primer lugar, asegúrese de que el navegador que usa su usuario es compatible con esta función.

00:41.560 --> 00:47.830
Entonces, verifiquemos si una propiedad de registro de servicio está presente en el objeto del navegador, que es el

00:47.880 --> 00:49.540
navegador que usa el usuario.

00:49.630 --> 00:57.610
Si ese es el caso, podemos acceder al trabajador de servicio del navegador y puede haber una nueva línea para facilitar

00:57.610 --> 01:03.330
la lectura. Registre al trabajador de servicio que apunta al servicio de archivo de carta.

01:03.340 --> 01:05.390
En este caso, slash s. W ..

01:05.430 --> 01:06.340
J. S ..

01:06.700 --> 01:09.540
Y entonces no necesitas hacer esto, pero lo haré aquí.

01:09.610 --> 01:14.650
Haré una promesa en la que simplemente daré a conocer que registramos con éxito al trabajador del servicio.

01:14.860 --> 01:24.790
Por lo tanto, diré que el trabajador de servicios registrado en el registro de la consola dice que el trabajador de servicios está registrado.

01:24.850 --> 01:30.920
No está haciendo nada, aunque aún podemos confirmar que está registrado al recargar nuestra aplicación

01:31.300 --> 01:36.410
y ahora vemos al trabajador de servicio registrado en el próximo paso.

01:36.580 --> 01:42.520
Identifiquemos el shell de la aplicación, los activos principales y esta es una tarea en la que no tenemos que escribir

01:42.940 --> 01:44.730
ningún código para analizar su aplicación.

01:45.010 --> 01:49.180
Así que caerá cualquiera en HVM, que es la recarga de nuestra página principal.

01:49.300 --> 01:53.630
Y nuevamente, lo que en una aplicación de una sola página sería la única página que está cargando.

01:53.830 --> 02:01.450
Veamos qué necesitamos para mostrar el estilo central de nuestra aplicación para que funcione el marco central.

02:01.690 --> 02:07.620
Definitivamente necesitamos importar el valor de tu archivo, por supuesto, funciona sin eso.

02:07.630 --> 02:13.300
Pero se ve bien, es parte de nuestro diseño principal de nuestra aplicación principal, por ejemplo.

02:13.750 --> 02:19.360
También digo que necesitamos Deakins, aunque como viste en las últimas conferencias, encontraremos algunos problemas que podemos

02:19.360 --> 02:21.930
solucionar con el almacenamiento en caché dinámico.

02:22.300 --> 02:25.760
También deberíamos cargar nuestra CSA como Feme.

02:25.830 --> 02:30.760
Entonces, si el diseño del material ilumina este tema porque define cómo todo se verá

02:30.760 --> 02:38.200
definitivamente importante y estamos cargando en el CSS de Arafat y es posible que no veamos SS y aquí es donde puede hacer

02:38.200 --> 02:42.450
una pequeña distinción si puede ver el CSS de apt aquí. .

02:42.490 --> 02:51.060
Creo una clase de utilidad en la que simplemente puedo centrar fácilmente el texto y lo uso tanto en esta época de caída como

02:51.070 --> 02:56.120
en la carpeta dinámica en la página de índice para encontrar un archivo allí.

02:56.140 --> 03:04.240
Sin embargo, no cargo la caída CSSA enseñada principal, solo la cargo en mi archivo HMO de índice raíz, por lo que podría argumentar que

03:04.240 --> 03:10.090
la aplicación C S es parte del shell de la aplicación porque proporciona alguna utilidad general que

03:10.090 --> 03:11.500
utilizamos en nuestra aplicación.

03:11.500 --> 03:16.700
Si bien es posible que no nos veamos, el otoño solo es relevante para el contenido de nuestra página de ruta.

03:16.840 --> 03:23.200
Y sí, este es un primer usuario de la página, pero el usuario también puede ir directamente a barra dinámica

03:23.200 --> 03:24.650
y visitar esa página.

03:24.760 --> 03:28.250
Entonces, no es realmente parte de la aplicación compartir mucho de nuestro diseño central.

03:28.510 --> 03:34.450
Sí, nuestra página raíz no funcionará correctamente sin eso, pero seguirá siendo el marco general de nuestra aplicación.

03:34.490 --> 03:40.060
Bueno, ahora qué es y qué más es parte de nuestro marco central de shell Orap.

03:40.270 --> 03:42.230
Así que DS importa.

03:42.580 --> 03:48.820
Y luego, si nos desplazamos hacia abajo, caeremos en el genio de la mentalidad de los materiales, lo que garantiza que

03:48.820 --> 03:56.330
nuestro javascript funcione correctamente con nuestro paquete de diseño de materiales, así que de esa biblioteca de terceros estoy usando el archivo principal de genios remanente

03:56.410 --> 04:01.460
principal que se usa tanto en el anexo como él. y caer en una carpeta publica.

04:01.600 --> 04:04.820
Y en este archivo de edad html en la carpeta dinámica.

04:05.020 --> 04:09.450
Así que eso es todo parte de nuestra aplicación y hay otra cosa.

04:09.460 --> 04:10.410
¿Sabes cuál?

04:10.410 --> 04:12.740
Es super obvio pero fácil de pasar por alto.

04:13.910 --> 04:21.980
Bueno, el siguiente archivo HDMI en sí mismo o simplemente barra mientras aprendes, porque estás almacenando solicitudes, de lo

04:22.160 --> 04:24.140
contrario no caerás pauvres.

04:24.350 --> 04:30.500
Así que esto es lo que quiero almacenar en caché, así que vamos a guardarlo en caché en nuestro archivo Rooker

04:30.680 --> 04:37.850
de servicio porque está la siguiente tarea, la tarea de liberar a todos los de Lisner registrados, porque aprendió que el evento de instalación es

04:37.910 --> 04:41.580
el mejor lugar para los activos estáticos previos a fallos. .

04:41.630 --> 04:48.590
Lo hacemos como accediendo al propio detector de eventos de AD y el trabajador de servicios escucha el evento de

04:48.590 --> 04:53.340
instalación y en esa función aquí ahora queremos realizar un bloqueo previo.

04:53.660 --> 05:01.400
Hacemos esto al acceder a la API de almacenamiento de caché de disco en caché y ahí tenemos este método abierto para abrir

05:01.400 --> 05:05.370
un caché existente o crear uno nuevo si aún no existe.

05:05.420 --> 05:11.150
Ahora es importante que queremos asegurarnos de no terminar la instalación antes de que hayamos terminado con el almacenamiento en

05:11.150 --> 05:11.750
caché.

05:12.050 --> 05:13.880
Así que no te olvides de usar también.

05:13.880 --> 05:14.960
Evento.

05:14.960 --> 05:21.380
Espere hasta que sea súper importante para asegurarse de que nos detenemos o de que esperemos los días para terminar.

05:21.400 --> 05:27.820
Básicamente, una nota al margen nunca agregará un punto y coma aquí porque está dentro de una llamada de función.

05:27.830 --> 05:33.230
Así que este es básicamente un argumento que está pasando a esperar hasta que no se necesite el punto y coma.

05:33.500 --> 05:35.300
Así que su dinero está abierto.

05:35.300 --> 05:37.020
Vamos a darle un nombre a este caché.

05:37.130 --> 05:38.330
Oh usa la estática.

05:38.330 --> 05:41.060
Puedes usar cualquier nombre que desees, por supuesto.

05:41.060 --> 05:43.890
Una vez que está abierto esto devuelve un año de promesa.

05:44.090 --> 05:51.840
Una vez que esté abierto, podemos ejecutar el código en esa función a la que pasaste para luego bloquearnos allí obtenemos acceso a

05:51.840 --> 05:58.720
tu efectivo y aquí quiero guardar en caché todos mis archivos que forman parte del shell de la aplicación.

05:58.840 --> 06:07.290
Ahora podríamos usar el agregado de efectivo para agregarlos paso a paso o para agregar una serie de cadenas que identifiquen a los diferentes usuarios

06:07.290 --> 06:10.960
o quienes quieran almacenar en caché AGA con ese enfoque.

06:11.430 --> 06:15.850
Ahora aquí en esa matriz quiero guardar un par de cosas.

06:15.870 --> 06:17.940
En primer lugar solo barra.

06:17.940 --> 06:27.600
Si cargamos la página de ruta, además, barra de índice de edad T. METRO. y, por cierto, podría argumentar que esto tampoco es

06:27.600 --> 06:29.490
parte del Derecho real.

06:29.490 --> 06:35.380
Es solo una ruta específica donde estamos sentados y estarías en lo cierto en una aplicación de una sola página.

06:35.400 --> 06:38.940
Este es tu actual porque solo tienes una página allí.

06:38.940 --> 06:45.150
Y si no lo almacenamos aquí, todas las otras partes de la esencia de la memoria caché tampoco tienen ningún sentido

06:45.420 --> 06:49.680
porque no tenemos nada que cargar fuera de línea donde requeriríamos los otros activos.

06:49.800 --> 06:51.140
Así que fue como un compromiso.

06:51.270 --> 06:58.020
Hago tu lugar donde digo que sí, que emitiré aquí es una página grosera para que tengamos algo con qué trabajar.

06:58.080 --> 07:02.980
Si estamos desconectados, no estoy guardando las otras partes de la página en este momento.

07:03.060 --> 07:08.760
Así que la otra parte puede llevarnos a que no nos veamos caer, pero volveré a eso.

07:08.770 --> 07:10.740
Así que vamos a añadir esto aquí.

07:10.900 --> 07:13.450
No seamos también fuente de efectivo.

07:13.450 --> 07:21.220
S. s. s. s. s. s. porque como se explica, esto es parte del shell

07:21.220 --> 07:22.510
de nuestro AP, lo usamos en varios archivos en nuestra aplicación.

07:22.960 --> 07:32.090
También quiero almacenar el mal humor principal de los carceleros de origen porque, de nuevo, todo esto es parte de nuestro shell de aplicaciones.

07:32.110 --> 07:38.390
Lo usamos en varios archivos de la misma manera para el archivo más desagradable del polvo del material.

07:38.410 --> 07:46.540
También almacenemos en caché el material que los compendios de hombres caen y guardemos en caché todos estos datos de usted o de CD.

07:46.540 --> 07:52.790
Tenemos en la era del índice Tim un archivo en la sección principal como nuestras fuentes aquí.

07:52.840 --> 07:57.660
Ahora, tomemos ese enlace, vayamos al servicio Rooker y lo agreguemos aquí.

07:58.120 --> 08:00.900
Y los mismos azotes para los Aikins.

08:00.970 --> 08:05.200
Ahora a pesar de que vimos que cargar los íconos no funcionará así.

08:05.230 --> 08:07.430
Esta es la primera petición que se está haciendo.

08:07.480 --> 08:10.330
Así que si no cacheamos eso nunca funcionará.

08:10.420 --> 08:13.670
Incluso si luego capturamos dinámicamente los propios iconos.

08:13.780 --> 08:20.200
Bueno, ahí también lo guardamos en caché dinámicamente, pero aún así quiero bloquearlo previamente porque es parte

08:20.320 --> 08:22.400
de nuestra aplicación shell India.

08:23.200 --> 08:29.870
Bueno, una cosa que quiero guardar aquí es, por supuesto, el enlace a la página de estilo de C S aquí.

08:30.040 --> 08:35.790
O su archivo de estilo aquí fuera del marco o la biblioteca para ser precisos que estoy usando.

08:36.010 --> 08:39.490
También agreguemos esto a nuestro efectivo.

08:39.490 --> 08:44.170
Y con eso diría que todo lo que necesitamos se ha agregado a este efectivo por ahora.

08:44.200 --> 08:50.520
Este es el shell de nuestro AP y ahora tenemos la siguiente tarea terminada.

08:50.710 --> 08:53.910
Pero, por supuesto, no vale mucho si no lo vemos.

08:54.040 --> 08:59.910
Así que vamos a agregar código para obtener estos activos prefabricados para hacer eso.

09:00.120 --> 09:07.220
Necesito registrar a un nuevo oyente de eventos y quiero escuchar los hechos, su evento allí.

09:07.230 --> 09:08.810
Tenemos un funcionamiento.

09:08.830 --> 09:15.670
El segundo argumento, como en todos los detectores de eventos, y obtenemos un objeto de evento que se pasa a esta función automáticamente.

09:15.720 --> 09:23.020
Ahora, aquí quiero reaccionar a esta fette que fue y una a reaccionar devolviendo mis activos en efectivo.

09:23.250 --> 09:29.540
Ahora, ¿usamos el evento respondemos porque queremos asegurarnos de que respondemos con nuestro efectivo?

09:29.570 --> 09:32.240
Esset y aprendes como funciona eso.

09:32.400 --> 09:37.630
Puede usar efectivo sí y luego hacer coincidir para buscar todo su efectivo.

09:37.710 --> 09:41.360
Solo tenemos uno aquí y devolvemos un activo apropiado.

09:41.700 --> 09:46.580
Así que aquí buscaré la solicitud de evento porque esa es la solicitud que estamos emitiendo.

09:46.870 --> 09:49.920
Y luego bloquearé a ver si tenemos uno.

09:50.040 --> 09:56.490
Ahora, como ha aprendido, esta función aquí siempre se ejecutará, no importa si encontramos algo en el efectivo

09:56.490 --> 09:57.580
o no.

09:57.840 --> 10:01.440
Simplemente no responde, no si no encontramos nada.

10:01.800 --> 10:06.990
Así que aquí quiero devolverles su respuesta, nunca lo devuelvan así.

10:07.020 --> 10:12.960
No tengo un plan B si no encuentro el objeto en mi efectivo.

10:13.170 --> 10:17.370
Acabo de devolver NULL que puede estar bien.

10:17.370 --> 10:21.900
Pero, por supuesto, nunca nos da la oportunidad de obtenerlo de la red porque quizás no

10:21.900 --> 10:25.080
lo tenemos en efectivo, pero sí tenemos acceso a la red.

10:25.110 --> 10:29.740
Así que para eso verificaré si tenemos algo en efectivo.

10:29.820 --> 10:37.470
Así que comprobaré si existe respuesta devuelta o respuesta si la tenemos en el efectivo y de

10:37.470 --> 10:42.180
lo contrario, devolveré la búsqueda y enviaré la solicitud.

10:42.180 --> 10:48.900
Esto es para solicitar y ahora, cuando termine con la deuda, sé que debo devolver algo en caso

10:48.900 --> 10:50.330
de que falle.

10:51.400 --> 10:58.600
Ahora, aquí también puedo agregar un detector de capturas para asegurarme de que, en caso de que recibamos un error o no recibamos correo no deseado

10:58.600 --> 11:01.310
con mensajes de error, no quiero hacer nada aquí.

11:01.330 --> 11:03.300
Sin embargo, sólo quiero buscarlo.

11:03.670 --> 11:08.200
Así que con eso deberíamos poder recuperar nuestros activos prefabricados.

11:08.200 --> 11:10.100
Vamos a ver si eso funciona.

11:10.240 --> 11:16.120
Si realmente tengo la aplicación aquí, deberíamos ver que un nuevo trabajador de servicio está ansioso por instalarse y

11:16.120 --> 11:22.180
lo vemos aquí, está esperando actuar D-Wade para que pueda hacer clic en saltar esperando o simplemente abrir una nueva

11:22.180 --> 11:22.620
pestaña.

11:22.640 --> 11:27.940
Como lo haré aquí y en la nueva pestaña aquí tenemos al trabajador del Servicio de Noticias activado.

11:28.180 --> 11:32.840
Si inspeccionamos el caché obtenemos un caché estático con todos los mensajes que deseamos bloquear antes.

11:33.160 --> 11:37.630
Y ahora, si me desconecté y recargué esta página, faltan los íconos.

11:37.630 --> 11:43.220
Vimos que en las conferencias antes de que la asignación a la aplicación Buddy esté funcionando.

11:43.400 --> 11:44.850
El no no funcionará.

11:45.070 --> 11:46.610
O al menos no se mostrará.

11:46.630 --> 11:49.540
D D D caja.

11:49.540 --> 11:53.010
Queremos que se muestre porque nos ves como Stolle falta.

11:53.200 --> 11:55.470
Pero todo funciona aquí en general.

11:55.480 --> 11:56.700
El menú se puede abrir.

11:56.700 --> 12:03.010
Por supuesto, estábamos en esa página porque no hicimos un bloqueo previo, pero las aplicaciones generales cargan el código para abrir el

12:03.100 --> 12:06.250
menú de la barra de herramientas, y así está funcionando.

12:06.250 --> 12:08.990
Así que esa es la siguiente parte de la tarea terminada.

12:09.010 --> 12:15.580
Ahora obtenemos los activos prefabricados en el Paso 5 en el paso 5 de la tarea.

12:15.670 --> 12:21.130
Ahora debería agregar los otros activos al almacenamiento en caché de Prete que debe realizar

12:21.240 --> 12:22.910
en la próxima HVM.

12:22.930 --> 12:25.090
Ahora que solo es un activo en nuestro caso.

12:25.090 --> 12:26.770
Él no puede vernos como culpa.

12:26.980 --> 12:29.220
Le expliqué por qué no edité antes.

12:29.230 --> 12:34.960
Por supuesto, normalmente lo haría antes de que se caiga porque eso es lo que hace que esta página funcione,

12:34.960 --> 12:36.990
pero no es parte del shell AB.

12:37.180 --> 12:42.600
Y nuevamente, si estuvieras en una aplicación de una sola página, el shell de la aplicación sería más importante que

12:42.650 --> 12:46.590
quizás este año, siempre es necesario cargar algo más para que una página funcione.

12:46.780 --> 12:52.210
Todavía es importante comprender la idea de tener un marco básico que proporcione un diseño

12:52.210 --> 12:53.350
agradable al usuario.

12:53.350 --> 12:56.770
Así que ahora vamos a agregar Baynard C S S a nuestro caché también.

12:56.950 --> 13:01.220
Así que aquí en el trabajador de servicio simplemente lo agregaré y la posición no importa.

13:01.220 --> 13:06.480
Todas las ediciones para cargar el RC son las siguientes, aunque todas con éxito restante.

13:06.490 --> 13:11.830
Ahora guardemos esto y cambiemos la carga de los trabajadores del servicio, deberíamos intentar

13:11.920 --> 13:15.190
instalarlo y usted lo hace como antes.

13:15.230 --> 13:19.500
Simplemente cerremos la vieja pestaña y abramos una nueva y ahí.

13:19.730 --> 13:27.160
Ahora deberíamos ver eso, incluso si me desconecto, tomo la casilla fuera de línea y la recargo.

13:27.160 --> 13:27.700
Sí.

13:28.560 --> 13:34.200
Esto todavía funciona porque puede que no nos vea tan lejos, que es el responsable de procesar esto ahora, todo

13:34.230 --> 13:38.830
lo que se cargó, por lo que ya hay un paso más en la tarea.

13:38.860 --> 13:42.400
Paso 5 resolver en la tarea seis.

13:42.460 --> 13:47.620
Ahora deberías cambiar algo sobre el estilo y puede que no nos veamos caer y esto probablemente no se

13:47.620 --> 13:50.030
verá reflejado en tu aplicación en ese momento.

13:50.080 --> 13:56.410
Así que, en general, lo que actualmente no hace tanto es colorear y esto es d d Estas son dimensiones d.

13:56.530 --> 14:00.580
Tal vez doble la altura a 200 píxeles.

14:00.580 --> 14:02.000
Ahora eso es todo lo que quiero hacer.

14:02.230 --> 14:08.870
Pero con ese cambio en el lugar, un tiap muy bajo no lo veo porque todavía estamos sirviendo el caché, mientras que

14:08.900 --> 14:11.630
no estamos, puede que no nos vean tan lejos.

14:11.960 --> 14:15.800
Y aprendiste cómo puedes solucionar esto empeorando.

14:16.250 --> 14:20.870
Entonces, lo que podemos hacer es simplemente nombrar esta estática nosotros también.

14:21.240 --> 14:25.670
Y haz que este simple cambio sea un trabajador de servicios.

14:25.740 --> 14:32.510
Por lo tanto, se reinstalará, lo refundiremos todo y lo guardaremos en un nuevo caché.

14:32.510 --> 14:36.120
Sin embargo, todos aprenden que esto solo no lo arreglará.

14:36.350 --> 14:38.960
Y esta ya es la próxima tarea.

14:38.960 --> 14:42.410
Tarea 7 necesitamos limpiar cachés no utilizados.

14:42.620 --> 14:49.870
De lo contrario, realmente no veremos cómo se carga el nuevo archivo, por lo que también podemos hacerlo en el siguiente paso.

14:50.210 --> 14:56.240
Así que agreguemos un activador de escucha de eventos porque activar es el lugar donde debe realizar la

14:56.270 --> 15:03.860
limpieza para no interferir con el caché en una aplicación que aún está en ejecución, porque nuevamente la instalación en realidad espera o

15:03.860 --> 15:05.450
se ejecuta de inmediato.

15:05.450 --> 15:10.290
Entonces, una vez que hayamos bloqueado la página, el usuario todavía puede usar su página.

15:10.390 --> 15:14.790
Y si limpia el caché en el mismo paso, esto puede romper la experiencia del usuario.

15:15.020 --> 15:16.300
Así que hazlo y activa.

15:16.370 --> 15:18.910
Es lo que corre justo al principio.

15:18.980 --> 15:25.190
Cuando la página se carga después de que todas las demás páginas se hayan cerrado para que no interfiera con el

15:25.190 --> 15:30.360
trabajador del servicio, que podría estar haciendo algo que un usuario de tapero promedio ha abierto actualmente.

15:30.800 --> 15:38.540
Así que aquí, en el identificador de activación, por ahora, uno para limpiar y usted aprendió a limpiar en la última clase

15:38.550 --> 15:39.350
o dos.

15:39.530 --> 15:44.110
Ahora también hay otros fragmentos de código que podrías usar para hacer esto.

15:44.210 --> 15:46.460
Me quedo con el que te mostré.

15:46.460 --> 15:50.080
Espere hasta que el proceso de limpieza finalice.

15:50.210 --> 15:54.830
Y luego obtendré todas mis claves en su almacenamiento en caché.

15:54.920 --> 15:58.620
Así que todos esos nombres de caché básicamente.

15:58.740 --> 16:04.450
Y luego aquí, en el bloque de entonces, obtengo una función que recibe una lista de teclas.

16:04.460 --> 16:06.400
Esto de nuevo es una serie de cadenas.

16:07.260 --> 16:13.440
Y allí ahora convertiré esto en una promesa para poder esperar a que todas estas operaciones terminen con la

16:14.100 --> 16:20.440
promesa, todo lo que tomaré para mantener la lista y el uso mapeado puede convertir esto en una serie de promesas.

16:20.670 --> 16:26.340
Y allí aprendió que puede usar o que tiene que pasar una función para asignar que se ejecutará

16:26.340 --> 16:29.120
en cada elemento de la lista de eliminación.

16:29.340 --> 16:34.380
Y aquí ahora quiero comprobar si la clave no es igual a.

16:34.380 --> 16:36.130
En mi caso estático V-2.

16:36.130 --> 16:39.360
Así que la última versión de la caché que quiero mantener.

16:39.360 --> 16:43.190
No tenemos ningún almacenamiento dinámico en caché, así que eso es todo lo que necesito verificar por ahora.

16:43.320 --> 16:50.220
Y luego, aquí puedo devolver cachés borrar y borrar el caché con ese nombre de clave.

16:50.220 --> 16:54.360
Ahora, por supuesto, es un inconveniente cambiar manualmente el nombre aquí y arriba.

16:54.450 --> 17:02.670
Entonces, mejoremos la solución agregando un nombre estático de caché de nombre variable y lo denominaré V-2 estático

17:02.880 --> 17:08.980
aquí y ahora puedo usar esa variable aquí en todos los lugares.

17:08.980 --> 17:17.230
Una cadena muy difícil de codificar antes de terminar con eso guardemos eso y veamos si funciona.

17:17.520 --> 17:18.640
Vamos a recargar esto.

17:18.660 --> 17:23.410
Por supuesto, necesitamos cerrar la pestaña y abrir que desea activar el nuevo trabajador de servicio.

17:23.760 --> 17:30.780
Y ahora ya deberíamos ver que tenemos el cambio disponible aquí también disponible si estamos fuera de línea.

17:32.010 --> 17:35.990
Porque ahora el trabajador del servicio de noticias estaba almacenado en el almacenamiento de caché.

17:36.000 --> 17:37.690
Vemos la constante acordada en efectivo.

17:37.770 --> 17:40.950
No vemos el viejo porque limpiamos con éxito.

17:41.070 --> 17:48.270
Por supuesto, siéntase libre de lanzar en contra. Bloquee las declaraciones a Cedar's en la consola para la última tarea en

17:48.270 --> 17:54.870
esta asignación. Agregue el almacenamiento en caché dinámico con el control de versiones para capturar todo en su aplicación cada vez que el

17:54.870 --> 17:57.820
asistente del usuario esté con ella y la recupere.

17:57.840 --> 18:00.620
Ahora has aprendido cómo hacerlo también.

18:00.750 --> 18:05.670
Así que simplemente volvamos al trabajador de servicios porque ahí es donde queremos hacer

18:05.670 --> 18:13.350
eso y está en el método Thach porque es aquí donde el usuario busca algo que no encontramos en el caché y

18:13.350 --> 18:15.240
queremos almacenar estas cosas.

18:15.240 --> 18:21.820
Queremos almacenar todo lo que el usuario ha buscado y no ha encontrado para poder encontrarlo en el futuro.

18:21.840 --> 18:29.520
Así que aquí están las llamadas de la cadena y es importante cambiarlas directamente después de la búsqueda y no en nuestra cadena de

18:29.520 --> 18:35.220
promesa principal, porque solo quiero reaccionar a la solicitud fecunda y no a la respuesta en efectivo que

18:35.220 --> 18:36.480
estamos devolviendo aquí.

18:36.480 --> 18:44.320
Entonces, aquí ejecutaremos y obtendremos la respuesta que obtengamos del servidor donde lo solicitamos, sí,

18:44.380 --> 18:46.380
en cualquier año.

18:46.410 --> 18:52.090
Lo que quiero hacer, por supuesto, es guardar esto en mi efectivo dinámico.

18:52.440 --> 18:56.810
Así que si estamos muertos, llamaré cashless y open wide y Amec cash.

18:57.000 --> 19:04.350
Ahora, Goodheart no pudo nombrar a nadie aquí o uso el enfoque optimizado utilizando un nombre dinámico

19:04.350 --> 19:07.660
de efectivo variable que podría ser dinámico.

19:07.920 --> 19:11.280
El de este caso tal vez porque es la primera vez que lo usamos.

19:11.310 --> 19:15.120
Así que copiemos esa variable y usemos eso como un nombre.

19:15.120 --> 19:21.870
Esto creará ese efectivo si aún no existe u omitirlo si lo tenemos ahora con la deuda creada o

19:21.870 --> 19:22.560
abierta.

19:22.740 --> 19:27.470
Ejecutamos esta función el siguiente bloque donde obtenemos el efectivo abierto.

19:27.480 --> 19:30.360
Así que ahora podemos interactuar con eso y aprenderás eso.

19:30.360 --> 19:34.760
Ahora puedes llamar a cash put para poner un recurso que ya tienes.

19:34.980 --> 19:37.420
Tienes que solicitar y tienes que responder.

19:37.770 --> 19:44.400
Por lo tanto, pones la solicitud de eventos que tienes como identificador y la respuesta debe ser la respuesta que

19:44.400 --> 19:44.960
recibiste.

19:45.060 --> 19:52.140
Sin embargo, no olvide usar Clone su para almacenar una respuesta aquí y aún así poder devolver una al

19:52.140 --> 19:52.770
usuario.

19:52.860 --> 19:55.190
De lo contrario nunca obtendrás lo que solicitaste.

19:55.440 --> 20:02.900
Por lo tanto, la respuesta de devolución aquí para asegurarse de que también se devuelva efectivo está abierta porque de lo contrario, la

20:02.920 --> 20:08.240
respuesta en este bloque no hace mucho porque no le importa devolver toda la operación.

20:08.310 --> 20:13.030
Con eso, se asegura de que si solicitamos el recurso de la red lo obtengamos de inmediato.

20:13.230 --> 20:18.170
Pero entras y todo igual y el dinero hace todo lo que quiero hacer aquí.

20:18.180 --> 20:22.360
Así que con eso, deberíamos tener implementado el almacenamiento en caché dinámico.

20:22.680 --> 20:25.800
Volvamos a nuestra aplicación y recarguemos.

20:26.020 --> 20:31.260
Obviamente, intentaremos instalar y utilizar el trabajador de servicio ahora o lo

20:31.260 --> 20:36.860
instaló. Intenta activarlo. Permitámoslo activarlo cerrando la pestaña anterior y abriendo una nueva.

20:36.900 --> 20:39.670
Esto ahora actuará de manera a dos.

20:39.960 --> 20:44.690
Y en la memoria caché ya ve que tenemos una memoria caché dinámica donde almacenamos los Aikins.

20:44.850 --> 20:49.440
Así que si nos salimos de la línea ahora al menos tenemos un aspecto mejor de DS.

20:49.440 --> 20:53.730
Por supuesto, la página promedio no funcionará porque todavía no está en caché.

20:53.730 --> 21:00.760
Así que volvamos a conectarnos a Lotus y navegamos a todas las páginas de nuestra aplicación.

21:01.230 --> 21:08.930
Y ahora, si marcamos la opción fuera de línea, podemos cargar esta página para volver a la página principal, hacer clic en todos

21:09.270 --> 21:15.030
los botones y toda nuestra aplicación está disponible aunque no tengamos conexión a Internet en este momento.

21:15.090 --> 21:17.370
Lo mismo ocurre con la tarea terminada.

21:17.430 --> 21:20.290
Ahora todos tenemos el caché dinámico implementado.

21:20.400 --> 21:25.620
Estas fueron solo las cosas que aprendiste en las últimas conferencias, pero me imagino que escribirlas desde

21:25.620 --> 21:29.420
cero es un desafío de Robert, lo cual es totalmente normal.

21:29.430 --> 21:35.730
Seguiremos adelante con estrategias de almacenamiento en caché más avanzadas, pero sin duda nos aseguraremos de que estos conceptos básicos se

21:35.730 --> 21:38.250
establezcan y comprendan si algo no está claro.

21:38.250 --> 21:42.470
Vuelva a la clase, véalo nuevamente y asegúrese de que lo entiende.

21:42.510 --> 21:45.930
Diríjase a la sección de Preguntas y respuestas en caso de que pueda resolverlo por su cuenta.

21:45.960 --> 21:49.420
Necesitas tener el set básico para que tú y los otros Electra.
