WEBVTT

00:02.140 --> 00:08.290
So let's dive into the three most popular frameworks or libraries in the case of React, which allow us to

00:08.290 --> 00:10.030
build single page applications

00:10.030 --> 00:16.540
and let's see how we can turn this single page application into a progressive web app for the different

00:16.570 --> 00:18.380
libraries or frameworks.

00:18.490 --> 00:20.700
You'll see it isn't that difficult thankfully,

00:20.860 --> 00:27.490
let's start with React. For this I'll use create react app which is the recommended way of creating

00:27.490 --> 00:33.460
a new React application if it should be a single page application. You see the required commands here,

00:33.460 --> 00:40.180
first of all you need to install create react app globally with the -g flag on your system.

00:40.300 --> 00:43.930
Now you already should have npm otherwise this course wouldn't work for you,

00:43.990 --> 00:50.590
so just execute this command in your terminal or command prompt to install create react app.

00:50.860 --> 00:55.030
Once this is done, we can execute the following commands together.

00:55.090 --> 01:00.040
Make sure to either create a new folder as I did here and I already am in the folder where I want to

01:00.040 --> 01:05.270
create this app or go into the folder where you want to create a new app in a subfolder.

01:05.410 --> 01:08.980
You can then execute create react app, since we install it globally,

01:08.980 --> 01:15.530
this should be available and then the name of the app if you want to use a new folder,

01:15.640 --> 01:18.640
otherwise use a dot and it will use the existing folder.

01:18.640 --> 01:20.220
So I'll use that since I want to create

01:20.230 --> 01:22.100
the app in that folder.

01:22.120 --> 01:28.780
Now with that, it will set this project up for me, install all the dependencies using yarn here which

01:29.530 --> 01:34.030
I have available but it will use npm if you don't have that, no worries.

01:34.030 --> 01:40.680
So the set up finished for me here and this fills the folder with a lot of new files and folders.

01:40.690 --> 01:45.290
Now this folder structure you see here is the default create react app structure.

01:45.310 --> 01:49.600
Now this course is of course not about teaching you React or this structure,

01:49.690 --> 01:52.750
if that's totally new to you, first you should learn React,

01:52.810 --> 01:56.700
then you should learn how to turn it into a progressive web app.

01:56.830 --> 02:01.190
What does turn it into a progressive web app mean anyways?

02:01.780 --> 02:07.940
Consider the things we learn in this course, in its most basic form, it probably means that we have a

02:07.950 --> 02:08.580
manifest.json

02:08.590 --> 02:16.480
file which allows us to make our app installable on home screens and that we have a service

02:16.480 --> 02:21.480
worker which also does some caching, at least precaching of our static assets,

02:21.670 --> 02:23.610
that already is a progressive web app,

02:23.710 --> 02:29.940
we provide some offline capabilities and we also provide installability.

02:29.950 --> 02:34.770
The cool thing is create react app gives us all that out of the box.

02:35.020 --> 02:37.420
You see the register service worker file here,

02:37.540 --> 02:39.150
now it looks really complex,

02:39.190 --> 02:45.370
in the end it just takes care for you running this in production and development and it only

02:45.610 --> 02:47.200
asks the service worker in production

02:47.290 --> 02:52.810
but in the end what it does is it installs a service-worker.js file which it also creates for

02:52.810 --> 02:55.370
you. In the public folder,

02:55.390 --> 02:58.580
you also see a manifest.json file. There

02:58.600 --> 03:04.300
you see we have a basic set up with only one icon but that's enough for a very basic application,

03:04.360 --> 03:11.290
short name and name, theme color, background color and you have an index.html file where we also set up the

03:11.290 --> 03:12.270
theme color.

03:12.280 --> 03:14.920
Now you could add the Safari properties here,

03:15.010 --> 03:20.150
you could add the Internet Explorer properties here and you can fine tune this manifest.json

03:20.150 --> 03:21.280
file to your needs,

03:21.280 --> 03:27.850
for example by changing your title here and adding more icons, all the things you've learned about

03:27.850 --> 03:31.400
the app manifest in the app manifest module.

03:31.450 --> 03:34.900
Now that is already a progressive web app,

03:35.200 --> 03:37.520
the one thing we can't see is the service worker.

03:37.600 --> 03:44.380
I said it's getting generated for us and it does but we can't easily access the code like that because

03:44.380 --> 03:47.970
the configuration of this workflow is hidden to us by default.

03:48.160 --> 03:56.430
You can eject this project though, by running npm run eject using this script.

03:56.470 --> 04:01.060
This gives you access to the underlying build workflow set up but it's a one-way process, you can't

04:01.060 --> 04:03.800
go back, if you ever want to go back to the world of

04:03.820 --> 04:08.270
I don't see the set up, you would have to create a new project with create react app.

04:08.500 --> 04:15.310
Now if I do run this here, I get asked if I'm sure because it's a one-way process so I'll tick y and it basically

04:15.310 --> 04:21.010
tells me that this is not possible because I have a git repository and I'm not tracking on any of these

04:21.010 --> 04:21.730
files.

04:21.940 --> 04:29.730
So I'll quickly do this and after doing this, if I repeat this eject command and answer with y again,

04:29.920 --> 04:31.820
now it's successfully ejected

04:31.960 --> 04:37.540
and now you see we have more folders, for example the config folder which holds the webpack configuration

04:37.540 --> 04:40.030
because create react app uses webpack.

04:40.390 --> 04:45.340
Now if we dive into that configuration, you can customize everything you want but you should know what

04:45.340 --> 04:47.200
you're doing before you do that.

04:47.200 --> 04:52.530
The interesting part is towards the bottom of that file and everything is highlighted here as invalid

04:52.540 --> 04:55.760
since my Javascript version is still set to ES5, so

04:55.770 --> 04:57.220
let me quickly switch that,

04:57.400 --> 05:00.020
so now I switch to ES6 and this looks way better

05:00.190 --> 05:03.700
and here this SWPrecacheWebpackPlugin gets used.

05:03.800 --> 05:07.080
Now this is not using workbox, the tool we used before,

05:07.280 --> 05:09.940
it's the predecessor of workbox.

05:10.010 --> 05:16.950
So SWPrecache is the older tool, therefore more stable but also limited in features.

05:16.940 --> 05:23.210
This setup here basically generates this service-worker.js file which gets registered automatically

05:23.210 --> 05:25.550
by the register service worker file

05:25.910 --> 05:27.140
and there it does

05:27.140 --> 05:33.920
one important thing, it registers all files to be precached you generate in this project.

05:33.920 --> 05:40.580
So your bundled Javascript files, your CSS code, all of that gets precached. Let's see it in action by

05:40.580 --> 05:43.730
simply running npm run build,

05:44.000 --> 05:47.250
this will use this build tool here,

05:47.270 --> 05:53.300
this build command which in the end just does that, it builds our project for production.

05:53.360 --> 05:59.180
So if we run this command, it will basically bundle this React app together about which I haven't changed

05:59.180 --> 06:00.140
anything,

06:00.140 --> 06:07.040
it will generate this service worker and it will register it and use this manifest.json file we already

06:07.040 --> 06:07.660
have.

06:07.880 --> 06:13.580
So once this is finished, we will actually have a project which already is a progressive web app and where

06:13.580 --> 06:18.450
we then of course can add other features, like accessing the camera.

06:18.460 --> 06:24.100
Now what I want to do is, I want to see that in action and here it suggests what we can do.

06:24.100 --> 06:27.160
Now if you don't have yarn, it should show the npm command,

06:27.340 --> 06:31.550
you can run npm install -g serve,

06:31.720 --> 06:37.630
that's a HTTP server, like HTTP server used in the project but one we

06:37.630 --> 06:42.060
can still look globally and then easily run any folder with it. I'll run sudo in front of it

06:42.070 --> 06:45.960
otherwise it will fail on my machine, so I'll quickly

06:46.000 --> 06:51.820
enter my password and this will now install the server on my machine which I need to simply simulate

06:51.910 --> 06:53.760
this build project.

06:53.860 --> 06:56.590
We have the finished project here in the build folder,

06:56.620 --> 07:01.120
this is what you would deploy onto a server and since I don't want to deploy it right now,

07:01.240 --> 07:08.180
I'll install this serve package to just simulate this and run my own local testing server on my machine.

07:08.380 --> 07:11.590
And again this of course does not replace you deploying it,

07:11.590 --> 07:14.400
it's just there to test it. We can already see that

07:14.400 --> 07:21.140
here we have a service worker though populated with code generated by the plugin, the

07:21.160 --> 07:22.560
SWPrecachePlugin

07:22.720 --> 07:25.320
and you also see with the manifest.json file.

07:25.600 --> 07:30.750
So let's now run serve -s build,

07:30.760 --> 07:33.190
so basically serve the content in the build folder

07:33.970 --> 07:38.450
and it should spin up this development server and give us the URL at which we can visit it.

07:38.480 --> 07:44.920
So let's copy that URL and go to that page, I'll simply load it here.

07:45.990 --> 07:55.270
Now if we do that, you increase this, we should see that we now have an application which should also

07:55.270 --> 08:02.010
work if I turn this to offline because we precached everything about it and it does work offline.

08:02.080 --> 08:06.400
We also see if we inspect the manifest that it is recognized, that we have

08:06.410 --> 08:09.060  
an icon so that this is also working.

08:09.340 --> 08:16.150
So we got a valid progressive web app out of the box with create react app and the key takeaway for

08:16.150 --> 08:24.670
you is that you can eject the configuration to hook into it, to change it and to configure this SWPrecachePlugin

08:24.670 --> 08:26.410
to your needs.

08:26.410 --> 08:32.530
And of course that includes you possibly commenting it out and using the workbox, webpack plugin

08:32.530 --> 08:37.360
instead if you want to switch to workbox, you can configure everything you want.

08:37.360 --> 08:41.160
Of course this is kind of advanced, you need to know what you're doing here

08:41.350 --> 08:46.060
but the key takeaway is it's easy to turn this application into a progressive web app

08:46.150 --> 08:52.570
and one other key takeaway is the code you write, the features you use doesn't change.

08:52.570 --> 08:54.250
This is a single page application,

08:54.340 --> 08:56.580
so what? If you wanted to use the camera,

08:56.770 --> 08:59.200
you would simply do this in your React components,

08:59.200 --> 09:03.490
you would still use the same features I showed you in this course.

09:03.670 --> 09:08.500
The things you add in your service worker file if you for example switch to workbox and build up on

09:08.500 --> 09:09.950
your own base file,

09:09.970 --> 09:13.180
you use the same code, you use the same event listeners,

09:13.180 --> 09:14.520
it's the same.

09:14.830 --> 09:20.350
And with that, I hope it's a bit clearer how single page applications are related to progressive web

09:20.350 --> 09:27.460
apps and how you can turn your React application built with create react app into a progressive web app.
