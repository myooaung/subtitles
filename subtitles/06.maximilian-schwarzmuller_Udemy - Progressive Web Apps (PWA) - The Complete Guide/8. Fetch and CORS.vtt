WEBVTT

00:02.120 --> 00:05.630
You learned how to send get and post requests with fetch,

00:05.690 --> 00:12.710
now I want to discuss one other option you can set when posting data or when sending any request actually.

00:13.370 --> 00:16.240
In this object where we configured a request,

00:16.250 --> 00:20.480
you can also set the mode to for example cors.

00:20.540 --> 00:27.350
Now that is actually the default and it means the response has to include the cors headers.

00:27.350 --> 00:34.880
Now we can see this if we go back to our application and there to the network tab, here you see the post

00:34.880 --> 00:36.320
request we made

00:36.770 --> 00:39.850
and on the response we get back,

00:40.010 --> 00:47.000
you see that we have access-control-allow-credentials and allow-origin-headers which basically means

00:47.330 --> 00:52.120
this origin which is our URL is allowed to access the response body.

00:52.280 --> 00:53.700
This is set by the server,

00:53.720 --> 00:59.570
nothing we can do, if the server doesn't set this, we can't enforce it. Some servers don't set these headers

00:59.570 --> 01:04.600
which basically means if you were accessing the data from a different origin and the URL the server

01:04.600 --> 01:08.510
is running on, you're not allowed to read the content of the response.

01:08.570 --> 01:12.220
Now in such cases, you can set the mode to no-cors,

01:12.230 --> 01:18.830
basically whenever you get some error, that no control-allow-origin-header was found, set this to no-cors

01:18.830 --> 01:22.800
and you can still get the response without an error,

01:22.910 --> 01:25.060
you can't access the data inside of it

01:25.060 --> 01:30.540
though. That's a security mechanism because it's the server deciding that you shouldn't be able to,

01:30.590 --> 01:37.550
so you can't circumvent this on the client, on the front-end. There are some cases where this empty response

01:37.550 --> 01:42.980
or actually it's the complete response but the data is hidden from you, where you can still use that

01:43.280 --> 01:48.620
and there will be in service workers if for example you want to cache an image, the image is coming from

01:48.620 --> 01:52.050
a server which doesn't grant you access to the data directly

01:52.220 --> 02:01.730
but some HTML elements like the index element which we also have in our application here, are able

02:01.730 --> 02:04.330
to still access the data in that response

02:04.340 --> 02:05.540
even though you aren't.

02:05.750 --> 02:11.090
So you could still cache such a response and pass it on to image and you could extract the image with

02:11.090 --> 02:14.210
this element even though you can't directly access the data.

02:14.420 --> 02:19.050
So that's cors and no-cors, the default is cors and you should try to use that

02:19.250 --> 02:23.990
but if you get the response from a server where you can't read the data but you don't need to do that,

02:24.260 --> 02:27.400
you can use no-cors to circumvent the issue,

02:27.830 --> 02:34.790
so that's just one addition. By the way if I set this no-cors here and now I go back to my console

02:34.790 --> 02:41.720
and reload the page, you'll see that we got a syntax error because we try to read the JSON data

02:41.990 --> 02:44.020
but our response actually is empty,

02:44.060 --> 02:45.350
the body is null. Now

02:45.500 --> 02:47.980
again, the data will be there

02:48.020 --> 02:50.160
but the type is opaque and it's hidden from us,

02:50.180 --> 02:52.610
we can't access it from Javascript.

02:52.610 --> 02:58.030
We could access it from for example this image element if the response were an image, so the response

02:58.040 --> 03:00.350
body if that were an image.

03:00.350 --> 03:05.670
Again I'll turn this back to cors because this server does set the right headers and we can access the data

03:05.690 --> 03:09.810
therefore, I just wanted to bring the no-cors option to your attention.
