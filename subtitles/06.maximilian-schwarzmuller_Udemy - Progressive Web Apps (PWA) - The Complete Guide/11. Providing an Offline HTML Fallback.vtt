WEBVTT

00:02.090 --> 00:10.320
In the last lecture, we set up our own route with indexedDB, now I want to provide a fallback, an offline.html fallback

00:10.530 --> 00:12.930
for routes I can't find

00:13.420 --> 00:19.870
and right now, workboxSW here doesn't provide an easy way to set up such a fallback.

00:20.020 --> 00:25.960
I think chances are good that it will offer this feature in the future since it seems kind of common

00:25.960 --> 00:29.510
to be used but we can easily implement it right now too.

00:29.750 --> 00:36.760
I'll copy my custom route here and here, I'll now show you another trick.

00:36.760 --> 00:45.100
Thus far I showed you this matching via strings, express style routes or via regular expressions,

00:45.110 --> 00:48.340
actually there's a third way of matching requests.

00:48.340 --> 00:52.410
You can pass a function which will receive the route data,

00:52.480 --> 00:58.720
so data about the route, the URL, the request which is about to be loaded. Now in there,

00:58.720 --> 01:01.210
you have to return true if it should be a hit,

01:01.230 --> 01:04.980
so like this would always handle every route.

01:05.320 --> 01:06.970
Of course that's not what I want to do,

01:07.120 --> 01:13.170
instead I want to check if my route data which exposes the fetch event,

01:13.300 --> 01:23.570
so .event, if the request in that fetch event, if the headers there have an accept header which then includes

01:25.920 --> 01:28.010
text/html.

01:28.470 --> 01:34.010
So this basically is checking, is the incoming request no matter which URL it is targeting,

01:34.050 --> 01:37.480
I'm not caring about that but does it have a header where it accepts

01:37.560 --> 01:43.270
HTML because that then seems like a valid candidate to get the offline.html file

01:43.680 --> 01:49.790
and I just returned this, this will be true if an incoming request does accept this kind of content.

01:49.860 --> 01:55.260
And again I access route data event because route data is an object which has two properties,

01:55.320 --> 02:02.280
one is the fetch event and the other would be URL, so routeData.url, this would hold

02:02.470 --> 02:06.570
the URL which you of course can also extract from route data event request,

02:06.630 --> 02:08.510
so it's just an easier way.

02:08.730 --> 02:13.100
Now with that, we get a hit on every request wanting HTML,

02:13.260 --> 02:20.910
now we can write our own handler and in this own handler, I now want to make sure that I of course return

02:21.000 --> 02:27.570
the actual requested page if possible but return my HTML, my offline.html file if not

02:27.570 --> 02:28.330
possible

02:29.060 --> 02:37.070
and we already got the code for this. In my service-worker.js file, here my cache with network fallback,

02:37.300 --> 02:39.200
I can basically use that.

02:39.460 --> 02:42.130
So here I can copy all that code

02:42.140 --> 02:43.790
and we're going to tweak it a little bit

02:43.810 --> 02:51.600
but in general, it will work and I'll replace all the code here from fetch downwards with it.

02:52.120 --> 02:57.220
So now first of all, we need to make sure that we don't use event requests here when we match it with

02:57.220 --> 02:57.910
the cache

02:57.970 --> 03:04.560
but args.event.request because keep in mind, we're in that handler function where we only get args

03:04.630 --> 03:11.380
but on the args, there is an event property which gives us access to the fetch event. Then we still get

03:11.470 --> 03:16.810
the response if we find it in the cache and we return it and we fallback to the network if we don't

03:16.810 --> 03:18.280
find it in the cache,

03:18.320 --> 03:25.870
therefore here it's also args.event.request and we want to store it in our cache if we get

03:25.870 --> 03:28.170
a successful network response.

03:28.180 --> 03:35.710
Now here, I'll simply add a name dynamic because I no longer have this global variable and we could reintroduce

03:35.710 --> 03:36.100
it

03:36.160 --> 03:39.590
but we don't really have to manage that much cache versions here anymore,

03:39.600 --> 03:44.740
so I'll just hardcode it in here and it's the only place where we use that anyways.

03:45.130 --> 03:52.240
So here, we open the dynamic cache or create it if it doesn't exist and put the element we got back in

03:52.240 --> 03:52.710
there,

03:52.810 --> 03:55.270
so that's basically the code we already used.

03:55.300 --> 03:57.050
We also cached any errors,

03:57.130 --> 03:58.920
so we couldn't find it in the cache,

03:58.930 --> 04:01.310
we also can't fetch it from the network,

04:01.420 --> 04:08.020
so in this case I want to return the offline.html file and I do this by calling caches match

04:08.170 --> 04:09.360
instead of open

04:09.550 --> 04:12.910
and I want to match the offline.html file.

04:13.340 --> 04:19.730
This then gives me the response in the function, in the then block and in there, I only have to return

04:19.730 --> 04:23.170
the response because I don't have to check the content-type,

04:23.380 --> 04:24.910
I already do this here,

04:24.910 --> 04:27.250
we don't even get to this part

04:27.490 --> 04:32.080
if the incoming request doesn't expect or accept HTML.

04:32.590 --> 04:39.310
So with this, our offline.html fallback should work again and keep in mind, this page is getting cached

04:39.670 --> 04:46.970
because in our workbox-cli-config, we do cache all HTML files except for help related ones,

04:47.080 --> 04:49.600
so therefore this does work.

04:49.660 --> 04:59.380
Now with that, let's open the terminal again and re-run generate-sw and with that, execute it. Let's clear

04:59.380 --> 05:04.770
the storage one more time and reload this one more time

05:07.050 --> 05:10.240
and this does not seem to be working as expected.

05:10.350 --> 05:11.420
Let's see what's wrong,

05:12.290 --> 05:18.110
yes in our base file here, we're putting something invalid on the cache,

05:18.180 --> 05:20.120
this should be args.event.request.url.

05:20.120 --> 05:22.780
Now with this tweak,

05:22.810 --> 05:29.290
let's rerun generate-sw and then let's go back to our application here and clear the storage one more

05:29.290 --> 05:30.370
time,

05:30.430 --> 05:33.660
now let's reload and reload again

05:33.700 --> 05:37.780
and now it's working correctly because now it's storing it correctly in the cache.

05:37.780 --> 05:44.230
Now the cool thing is if we go offline, that still works but if I navigate to help which wasn't cached,

05:44.680 --> 05:48.840
I get my fallback page which still works as before.

05:48.970 --> 05:52.560
So we're already pretty close to our previous behavior,

05:52.690 --> 05:58.870
actually we implemented all the logic from the old service worker when it comes to fetching. We're handling

05:58.870 --> 06:00.560
posts with indexedDB,

06:00.760 --> 06:07.310
we're serving our precached files and we also have a fallback for HTML files.

06:07.570 --> 06:14.230
Additionally, we even take the extra effort which isn't that much effort of splitting our other dynamic assets

06:14.320 --> 06:20.020
like Google fonts and the CDN here over different caches and also the store the post images in a separate

06:20.020 --> 06:20.740
cache.

06:21.040 --> 06:23.880
So this already is a nice set up

06:23.920 --> 06:26.450
and as you see, it's very clean to read,

06:26.560 --> 06:32.530
we don't have to mess around with if/else statements or switch statements inside our fetch listener,

06:32.620 --> 06:37.590
we use workboxSW router and it's just working.

06:37.650 --> 06:43.060
Of course we're not done though, the whole background synchronization and push message stuff is missing.

06:43.110 --> 06:45.260
So let's fix this next.
