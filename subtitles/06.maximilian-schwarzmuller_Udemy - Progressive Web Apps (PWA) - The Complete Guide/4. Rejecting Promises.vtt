WEBVTT

00:02.070 --> 00:08.730
So now that we saw how we resolve a promise and handle this value in the then callback, let's reject it.

00:08.970 --> 00:16.380
So for this, I'll comment out resolve here and instead I'll call reject and reject here, I will also pass

00:16.470 --> 00:22.140
a value, this time maybe a Javascript object just to mix it up, where I have an error code maybe, let's

00:22.140 --> 00:27.350
say 500 and a message, an error occurred

00:27.420 --> 00:29.700
and you're totally free to pass back what you want,

00:29.700 --> 00:32.770
you could still just pass a string if you want to do that.

00:33.090 --> 00:39.450
So now we call reject, if we don't change anything else let's save this and let's reload this in the browser

00:39.690 --> 00:41.710
and let's see what happens.

00:41.970 --> 00:50.570
We still execute this right after set timeout but then we get an error that we didn't catch this rejected

00:50.570 --> 00:54.880
value basically. We don't get the console log from before,

00:55.020 --> 01:02.640
so we don't execute the then blocks here or actually we do but we only handle success cases here in the

01:02.640 --> 01:10.440
first argument you passed to then. We can also pass a second argument though, you could pass another function

01:10.530 --> 01:15.580
here which will then handle any rejected promise results, so any errors,

01:15.690 --> 01:18.280
of course this argument name is also up to you.

01:18.300 --> 01:23.900
There you could console log err.code and err.messages

01:24.060 --> 01:28.790
and I know that I can access both properties because I pass them here in this object.

01:28.890 --> 01:35.550
If we do this and save and we reload our application again, we see this is executed right after set timeout

01:35.550 --> 01:41.700
again and then after three seconds, we get this log with the error code and our error messages. We

01:41.700 --> 01:45.470
no longer get this error result from before.

01:45.660 --> 01:47.150
We also get undefined,

01:47.270 --> 01:53.160
that's stemming from the second then call where we just don't get the argument because in the error

01:53.160 --> 01:57.230
case, we don't return a value we could process here.

01:57.330 --> 02:01.000
Now this is one way of handling promise rejections,

02:01.080 --> 02:09.510
the more common way is to not use this second argument though. I will quickly comment this out to keep

02:09.510 --> 02:16.970
it for reference but what I want to show here is that you typically wouldn't use that second argument

02:17.370 --> 02:19.370
but to make this super easy to read,

02:19.620 --> 02:22.110
you can simply add catch here,

02:22.110 --> 02:29.340
so I'll add another method to this chain here, catch, I could add it in a new line but let me stick it right

02:29.340 --> 02:30.940
to the end of that line

02:31.080 --> 02:37.160
and here I can now also pass a function which will only be executed in rejected cases,

02:37.200 --> 02:44.050
so never on resolve and there I can also console log err.code and err.messages.

02:44.070 --> 02:50.640
The cool thing about catch is it will catch any errors occurring at any step prior to catch,

02:50.660 --> 02:53.980
so either on the first then block or the second one

02:54.300 --> 03:02.040
and I could also add catch here right after the first then block and then it would only react to errors

03:02.100 --> 03:06.000
which were thrown at this step and would ignore errors at the second step,

03:06.000 --> 03:12.810
so that's possible too. Here I'm now catching errors occurring at any point of time in this

03:12.810 --> 03:13.920
promise chain

03:14.090 --> 03:21.850
and if we now save this and reload this application again, we again see executed right after set timeout

03:22.140 --> 03:25.200
and then we get 500 and an error occured,

03:25.350 --> 03:31.830
you see that the undefined log is missing because catch caught the error immediately and prevented

03:31.830 --> 03:36.660
the promise from executing any other lines because we added it at the end here.

03:37.080 --> 03:39.030
And this is how we can work with promises

03:39.040 --> 03:45.840
in its very basic feature set, then and catch are the two important methods you have to be aware. Use

03:45.870 --> 03:53.850
then to use the normal return values in cases where no error occurred and use catch to handle any

03:53.850 --> 03:55.510
errors which might occur.

03:55.860 --> 04:01.740
Now with that knowledge, let's go back to the promises we already used in this application and try to

04:01.770 --> 04:03.360
understand those a bit better.
