WEBVTT

00:02.270 --> 00:03.580
Entonces, ¿dónde tienes éxito.

00:03.650 --> 00:08.960
Reunámonos todos y comencemos por crear una nueva promesa en la que pongamos tiempo y función a

00:08.960 --> 00:09.880
estos conjuntos.

00:10.130 --> 00:15.380
Así que crearé una nueva promesa muy bien y en su historia y usted promete

00:15.380 --> 00:23.430
el objeto, aprenderá que la nueva promesa tiene una función como argumento y la disfunción requiere que dos argumentos se resuelvan y rechacen.

00:23.480 --> 00:28.250
Estas son funciones internas que puede ejecutar dentro de esa función anónima.

00:28.250 --> 00:30.940
Aquí se pasa al constructor de la promesa.

00:31.340 --> 00:35.760
Así que me voy a tomar un tiempo y lo pondré en mi promesa ahora.

00:35.790 --> 00:40.110
Allí debería resolver que ustedes eran elfos.

00:40.110 --> 00:41.250
Voy a hacer justamente eso.

00:41.270 --> 00:43.870
Te lo resolvimos antes.

00:44.330 --> 00:46.670
Con eso resolvimos eso.

00:46.700 --> 00:54.550
Ahora, por supuesto, queremos encadenar a nuestros manejadores, así que agréguelos a bloque para manejar el valor que se resuelve aquí.

00:54.590 --> 01:01.620
Después de 3 segundos y pasamos una función anónima, el argumento será nuestro valor resuelto.

01:01.640 --> 01:06.170
En este caso, parece que eres al-Tunisi, así que nombraré el argumento de que eres todo

01:06.260 --> 01:08.670
lo que puedes nombrar como quieras, por supuesto.

01:08.720 --> 01:15.990
Así que esa es nuestra promesa que se resolverá, por supuesto, queremos devolver una llamada hoy.

01:16.010 --> 01:22.610
Todos ustedes son llamados Churton fetch y pasaron a usted o si no.

01:22.910 --> 01:27.110
Y eso es todo lo que necesito hacer aquí porque una solicitud GET es la predeterminada.

01:27.170 --> 01:30.740
No necesito configurarlo de ninguna manera específica.

01:30.830 --> 01:41.110
Ahora, como paso siguiente, también cambiaré un número, luego llamaré aquí y allá, ahora recibiré una respuesta esperanzada.

01:41.170 --> 01:44.530
Entonces tiene una función donde obtengo la respuesta como un argumento.

01:44.960 --> 01:48.830
Y ahora, por supuesto, quiero obtener datos adyacentes de esa respuesta.

01:48.830 --> 01:53.590
Ahora lo sé y lo sabes porque te dije que esta API devuelve datos adyacentes.

01:53.630 --> 01:56.350
Por eso te pedí que extrajeras los datos.

01:56.540 --> 02:04.820
Entonces, la respuesta de retorno es fuerte y luego Jason es un método importante, no una propiedad, es un método para extraer DJO y

02:05.000 --> 02:08.640
datos en el siguiente bloque, luego podemos usar esos datos.

02:08.670 --> 02:16.110
Entonces, aquí sé que obtengo los datos y esa función puede, por lo tanto, simplemente acceder al campo de salida.

02:16.190 --> 02:21.230
Así que con salida me refiero a esta variable donde obtuve acceso al párrafo de salida y

02:21.230 --> 02:28.150
establecí que el contenido del texto era igual al nombre de datos de datos, habrá una propiedad de nombre T en los datos que recibimos

02:28.150 --> 02:29.100
de esa API.

02:29.570 --> 02:34.160
Bueno, con eso ya deberíamos tener una aplicación operativa que nos salvó y asegurarnos de que su servidor de desarrollo

02:34.160 --> 02:34.920
se está ejecutando.

02:34.940 --> 02:36.070
Es para mí aquí.

02:36.350 --> 02:41.440
Volvamos a la aplicación recargada y enviamos la solicitud.

02:41.550 --> 02:45.910
Ahora, después de unos segundos, deberíamos ver a Luke Skywalker aquí.

02:46.220 --> 02:50.430
Así que esta es la primera parte de la tarea y espero que haya funcionado para usted.

02:50.600 --> 02:54.480
Ahora continuemos y hagamos lo mismo para una solicitud de puerto ahora.

02:54.530 --> 02:59.190
Para eso simplemente tomaré esa nueva url.

02:59.210 --> 03:00.880
Debemos enviar la solicitud a.

03:00.890 --> 03:04.890
Así que esta es tu L y la pondremos allí mientras resolvemos el desvalor.

03:04.900 --> 03:06.260
Este es el primer paso.

03:06.260 --> 03:11.610
El segundo paso, por supuesto, es configurar nuestra solicitud de recuperación aquí ahora para que podamos usar una solicitud GET más.

03:11.630 --> 03:16.550
Por lo tanto, debemos pasar un objeto como segundo argumento para obtener esta configuración.

03:16.580 --> 03:18.950
En primer lugar establecer el método a puerto.

03:19.280 --> 03:23.380
Necesito hacer esto porque el valor predeterminado era obtener y, por supuesto, ahora queremos enviar una solicitud.

03:23.510 --> 03:29.690
Además, necesito ajustar los encabezados antes de que estén bien, pero ahora debo indicar a la API

03:29.930 --> 03:32.620
qué tipo de tipo estoy enviando.

03:32.630 --> 03:37.310
Entonces, todos ustedes envían la aplicación de datos de Jason y qué tipo de tipo cuántico.

03:37.320 --> 03:38.190
Todo excepto.

03:38.360 --> 03:41.690
Y esa también será la aplicación de Jason.

03:42.200 --> 03:45.080
Así que esta es mi configuración de encabezados, por supuesto.

03:45.080 --> 03:49.660
Ahora también necesito configurar el cuerpo y los cuerpos los datos reales que quiero enviar.

03:49.730 --> 03:54.670
Ahora, desde que le enviaré a Jason, no necesitan llamar a Jason para tomar un vuelo para enviar una serie de vuelos.

03:54.860 --> 03:57.600
Así que básicamente las palabras de cadena de mis datos javascript.

03:58.010 --> 04:02.480
Y ahí me limitaré al objeto que propongo para el año, aunque, por supuesto, puede utilizar cualquier otro dato

04:02.480 --> 04:03.290
que desee enviar.

04:03.470 --> 04:07.930
Así que aquí enviaré un objeto que tiene un objeto persona anidado que tiene dos propiedades.

04:08.030 --> 04:09.600
Nombre y edad.

04:09.950 --> 04:14.730
Con eso siempre estoy configurando la solicitud y analizando la respuesta que está bien.

04:14.750 --> 04:18.400
Sin embargo, los datos que obtengo ahora tienen que ser accesos a diferentes Lee.

04:18.530 --> 04:22.970
En primer lugar, necesito acceder a Jason debido a cómo esa API devuelve los datos.

04:22.970 --> 04:28.190
Básicamente se encapsulará en un objeto adyacente en una propiedad llamada Jason, debo decir.

04:28.520 --> 04:38.330
Y luego quiero acceder a mi nombre de persona y la última parte de esta expresión aquí, por supuesto, está vinculada o se relaciona con

04:38.360 --> 04:43.180
qué tan bien o qué tipo de datos envío a esa API.

04:43.670 --> 04:50.230
Entonces con eso digamos que lo hace de nuevo y recarguemos la aplicación y enviemos la solicitud.

04:50.340 --> 04:55.180
Ahora deberíamos ver a Max o lo que sea que hayas enviado, por supuesto, en mi caso es el máximo.

04:55.230 --> 04:58.320
Así que esa es la segunda parte de la tarea resuelta.

04:58.320 --> 05:00.960
Ahora casi hemos terminado con la tarea de terminarlo.

05:00.960 --> 05:04.590
Debemos agregar un error y manejarlo de dos maneras diferentes.

05:04.600 --> 05:07.090
Ahora voy a añadir un simple error aquí.

05:07.140 --> 05:11.950
Simplemente me convertiré en algo inválido, no existen puntos.

05:12.300 --> 05:14.950
Así que comenzaré con la primera forma de manejar esto y reenviarlo.

05:14.970 --> 05:17.800
Voy a pasar el segundo argumento para disolver la función aquí.

05:18.090 --> 05:21.210
No es el primero porque ahí es donde vuelvo a buscar.

05:21.210 --> 05:27.220
Entonces, en este punto del tiempo, si lo manejara aquí con un segundo argumento que siempre

05:27.220 --> 05:33.640
maneja flechas potenciales, esto solo manejaría flechas provenientes de la parte antes de que lo haga el Bloque.

05:33.870 --> 05:35.680
Y aquí no tengo un error.

05:35.700 --> 05:41.670
Lo edité aquí pero, por supuesto, todavía resuelvo las cadenas válidas, así que este voto para un error si quiero

05:41.670 --> 05:42.140
manejarlo.

05:42.150 --> 05:43.200
Error HTP.

05:43.380 --> 05:46.810
Tengo que hacerlo y luego bloquear después de haber enviado la solicitud DHP.

05:46.860 --> 05:48.180
Así que hace uno aquí.

05:48.420 --> 05:53.670
Así que, por lo tanto, todos están configurados para este segundo argumento y luego el segundo argumento

05:53.870 --> 05:56.610
es Anfang, una función que maneja posibles errores.

05:56.790 --> 06:00.040
Así que aquí quiero que la consola registre el error.

06:00.090 --> 06:01.500
Así que esa es una forma de manejar esto.

06:01.500 --> 06:05.700
Vamos a ver si funciona o recargar la aplicación y enviar esa solicitud.

06:05.820 --> 06:09.060
Y ahora deberíamos ver que después de unos segundos tenemos un montón de errores.

06:09.180 --> 06:14.960
Y este año es lo que intentamos con la consola de registro Así que esa es una forma de manejar esto.

06:15.130 --> 06:22.050
Y hay una mejor manera, aunque el mejor método es no usar el segundo argumento.

06:22.060 --> 06:27.730
Entonces, por supuesto, no hay nada de malo en usarlo, pero es más fácil leer su código si simplemente

06:27.730 --> 06:33.420
usa catch porque entonces está claro que solo está ahí para manejar casos de éxito y atrapar un paso

06:33.430 --> 06:34.950
o para manejar errores.

06:34.960 --> 06:43.070
Ahora puede capturar al final o agregar las diferencias aquí o que comiencen con las similitudes.

06:43.090 --> 06:45.350
En ambos casos usted podría atrapar un error muerto.

06:45.370 --> 06:49.030
Incluso podría atraparlo si agrega el error o aquí.

06:49.430 --> 06:57.480
Sin embargo, en este caso que agregó al final, detecta cualquier error en cualquiera de las líneas de código anteriores.

06:57.520 --> 07:03.100
Por lo tanto, si un cursor de flecha aquí también lo atrapa, si lo agrega aquí si agrega el retén aquí, solo detectará los

07:03.120 --> 07:05.040
errores que hayan ocurrido hasta este punto.

07:05.050 --> 07:06.870
Ahora eso es solo algo que puedes tener en mente.

07:06.970 --> 07:08.460
Lo atraparé al final aquí.

07:08.470 --> 07:12.040
Sin embargo, siéntase libre de editar cualquier lugar que desee.

07:12.040 --> 07:14.810
Así que con eso ahora bloquearé el error aquí.

07:14.830 --> 07:20.260
La captura solo tiene una función que la justicia hace, pero la captura nunca se maneja como un caso de acceso.

07:20.260 --> 07:22.400
Sólo se maneja casos aero.

07:22.570 --> 07:28.480
Entonces, si Dizon coloca, recarguemos la aplicación y deberíamos ver la misma salida que antes, pero ahora

07:28.480 --> 07:35.400
está impresa debido a la captura y se puede ver que la línea 30 ahora es responsable de este año.

07:35.440 --> 07:40.770
Esa es la línea y ya no es el segundo argumento al que pasamos entonces.

07:41.200 --> 07:44.520
Así que esta es la parte final de esta tarea.

07:44.620 --> 07:49.030
Sólo algunos pequeños ejercicios relacionados con la recuperación en las promesas.

07:49.180 --> 07:50.890
Como dije, puedes bucear más profundo.

07:50.890 --> 07:53.080
No dude en consultar los documentos.

07:53.110 --> 07:57.030
Básicamente me he vinculado al final de este módulo.

07:57.130 --> 08:01.180
Sin embargo, esto debería permitirle establecer lo básico que se usará mucho para todo el curso.
