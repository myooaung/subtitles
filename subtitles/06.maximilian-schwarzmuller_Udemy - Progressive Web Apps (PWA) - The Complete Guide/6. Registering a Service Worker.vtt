WEBVTT

00:02.340 --> 00:09.030
In our project folder here, I first of all want to draw your attention to the script which starts our development

00:09.030 --> 00:09.860
server.

00:09.930 --> 00:12.620
Now this is only the development server here,

00:12.720 --> 00:15.540
you won't use that for production, here

00:15.550 --> 00:19.050
however I added this -c-1 flag,

00:19.050 --> 00:26.430
what this will do on the HTTP server package is, it will ensure that we don't cache any assets using the

00:26.430 --> 00:28.330
normal browser cache.

00:28.350 --> 00:31.630
Now you will learn later in the course that there are two types of caches,

00:31.710 --> 00:35.960
one cache which can be used by the service worker and the default browser cache

00:36.180 --> 00:42.060
and I don't want to use the default browser cache to make sure that all changes we put into place here

00:42.360 --> 00:44.820
are immediately reflected in the browser.

00:44.910 --> 00:50.920
Now for production, this is not necessarily required because you don't change your files every second.

00:51.330 --> 00:56.640
Now with that out of the way, make sure that your server is running by opening the terminal,

00:56.680 --> 01:01.410
this is simply a terminal integrated into my IDE and running npm start,

01:01.410 --> 01:05.480
this will then execute the start script then start our server with that

01:05.490 --> 01:11.080
please don't cache anything policy, now I'll close the terminal here simply to have more space.

01:11.190 --> 01:14.160
Now with that of course, we want to create a new service worker

01:14.550 --> 01:19.150
and as I told you, a service worker actually is a Javascript file.

01:19.170 --> 01:24.220
Now you could be inclined to add it to /src/js because that is where the other Javascript files

01:24.220 --> 01:24.950
sit,

01:25.030 --> 01:31.200
however do you remember that scope thing I mentioned? That you can define the scope of a service worker

01:31.260 --> 01:39.720
and which kind of pages it can actually react to events and control? Well the scope by default always is

01:40.170 --> 01:42.750
the folder the service worker sits in,

01:42.750 --> 01:49.980
so if we add it to the Javascript folder, the service worker will only apply to pages inside that folder.

01:49.980 --> 01:52.360
Now clearly, we don't have any in there

01:52.410 --> 01:54.960
and the Javascript files here are of course no pages,

01:54.960 --> 01:56.420
these are Javascript file,

01:56.490 --> 02:03.300
I'm talking about HTML pages. So the Javascript folder is the wrong place to add the service worker,

02:03.300 --> 02:09.650
instead we typically add it in your root web folder, so the folder which gets served by your server,

02:09.690 --> 02:11.450
in our case the public folder.

02:11.700 --> 02:17.040
Then you ensure that the service worker applies to all pages in your application

02:17.040 --> 02:21.040
no matter in which sub-folder or root folder they sit.

02:21.180 --> 02:27.030
If you were to add it in the help folder, the service worker could control the index.html file there but

02:27.030 --> 02:30.130
not the index.html file in the public folder.

02:30.150 --> 02:34.770
Sometimes you want that behavior, you only want to control certain parts of your application with a service

02:34.770 --> 02:35.270
worker,

02:35.280 --> 02:36.920
sometimes you don't want that,

02:37.080 --> 02:42.030
so I will add it in the public folder to be able to use it everywhere in the application.

02:42.030 --> 02:46.810
There, I simply create a new file and you can give this file any name you want,

02:46.830 --> 02:48.420
I'll name it sw.js,

02:48.540 --> 02:51.420
obviously for service worker,

02:51.420 --> 02:56.850
of course you could also as I just said name it differently. So that's the service worker file being

02:56.910 --> 03:02.720
added to the public folder, to our root web folder where our application is getting served from.

03:02.910 --> 03:08.560
Before I put any code inside of the service worker, I wanna register it.

03:08.670 --> 03:11.750
Now how do we register the service worker?

03:11.790 --> 03:14.910
As I said, you do this in your normal Javascript code.

03:15.120 --> 03:19.120
You could add this code to the index.html file with some inline code

03:19.120 --> 03:24.970
here between script tags, you could do that and then you would have to do it in every page

03:24.970 --> 03:29.070
though, every page, HTML page, because and that's another important thing,

03:29.250 --> 03:34.800
you want to register the service worker in every page of your application because you don't know which page

03:34.800 --> 03:38.320
the user is going to visit. Once you registered it,

03:38.640 --> 03:44.100
it won't be replaced easily or quickly unless you have a new version of the service worker but you need

03:44.100 --> 03:49.830
to be able to register it from anywhere because otherwise, you need to bet on the user visiting a specific

03:49.830 --> 03:51.010
page of your app.

03:51.510 --> 03:58.050
So a nice place to add the registration code would be the app.js file because I'm importing this

03:58.050 --> 03:59.240
both in the index.html

03:59.240 --> 04:04.540
in the root folder and in the index.html file in the help folder,

04:04.920 --> 04:11.580
so I'll add the registration code to the app.js file here. In there,

04:11.580 --> 04:17.200
I first of all want to check if the service worker feature is available in the browser

04:17.220 --> 04:19.620
the user visiting this web page uses

04:19.890 --> 04:26.250
because as with all the features you learned in this course, progressive web apps are about progressively

04:26.250 --> 04:32.540
enhancing web apps and therefore, we can't bet on service workers being available.

04:32.730 --> 04:34.410
It would be nice if we could use them,

04:34.410 --> 04:39.800
it's a big enhancement of the web application but if they aren't, there's nothing we can do,

04:40.050 --> 04:45.390
all we can do is we can at least check for the existence to not execute code which won't work.

04:45.720 --> 04:47.950
So I'll add an if statement and there

04:47.970 --> 04:55.320
I want to check if serviceWorker and make sure you get the casing correct, capital W but a lower case

04:55.380 --> 04:57.210
s at the beginning,

04:57.240 --> 05:05.250
if serviceWorker in navigator. Navigator simply is your browser and the in keyword allows you to check

05:05.250 --> 05:09.810
if a property, this property exists in this object,

05:09.810 --> 05:17.610
so in the browser. That means that the code inside the if statement will only execute if the browser of

05:17.610 --> 05:24.990
the user visiting the page has the service worker object which means it supports imports service workers,

05:25.140 --> 05:27.390
otherwise this code will just not execute

05:27.450 --> 05:30.540
and we don't add any service workers because it's not supported

05:30.720 --> 05:34.750
but the app will still work, just without service workers.

05:34.780 --> 05:42.560
Now since we know that service workers are available, we can execute navigator.serviceWorker,

05:42.570 --> 05:47.640
the casing is the same as the property we checked here because now we are accessing that property

05:47.970 --> 05:54.540
and on that property, you can call register and even though I added it in a new line, it still applies

05:54.540 --> 05:56.340
to this expression here,

05:56.340 --> 05:59.760
I'm just putting it in a new line to make it easier to read.

05:59.760 --> 06:03.210
So here, we register a new service worker,

06:03.300 --> 06:06.810
now we have to define the path pointing to the service worker

06:07.050 --> 06:14.280
and that will be /sw.js, slash to make sure we always go to the root folder first and then

06:14.280 --> 06:16.580
well, this is the file name, sw.js.

06:16.600 --> 06:24.790
This will tell the browser, browsers that support the service worker feature that this file should be

06:24.840 --> 06:30.840
treated in a special way and should be registered as a service worker, as a background process so to

06:30.840 --> 06:38.250
say. Register actually returns a promise and I'll dive deeper into promises in the next course module,

06:38.250 --> 06:44.690
for now you can know that this is simply a feature allowing us to work with asynchronous code and register

06:44.690 --> 06:49.980
is an asynchronous action which means it doesn't instantly or immediately finish, this registration process

06:49.980 --> 06:51.540
takes some time.

06:51.540 --> 06:55.050
So in order to get informed once it is done, we can chain

06:55.080 --> 07:02.880
then after it, this is a promise feature and the function we passed to then will simply be executed once

07:02.880 --> 07:04.100
the promise is done,

07:04.110 --> 07:10.010
so once the registration is done. This ensures that this is not blocking our work,

07:10.020 --> 07:16.650
so if I add more code after this if statement here, it will immediately execute because the registration

07:16.650 --> 07:18.300
won't block the single thread

07:18.630 --> 07:21.480
and again more on this in the next course module.

07:21.900 --> 07:31.380
Now here in then, I can simply say console log service worker registered, like that. With that,

07:31.620 --> 07:36.710
we now have a code which should inform us once the service worker is registered,

07:36.900 --> 07:40.990
let's go back to our application then and make sure that the web development server is running,

07:41.010 --> 07:43.440
I just restarted it in a few seconds ago.

07:43.830 --> 07:46.830
Once we reloaded the web application, I just did this,

07:46.910 --> 07:47.820
I do it again,

07:48.010 --> 07:51.590
you see service worker registered here in the console, which is great,

07:51.590 --> 07:53.600
it means that then block got executed.

07:53.760 --> 07:59.310
You'll also see that if you visit application here and you click on service worker, you get some information

07:59.310 --> 08:00.960
about the service worker here.

08:01.170 --> 08:03.130
This is your scope here

08:03.150 --> 08:08.840
since we place the service worker file in our public directory, it's the entire domain,

08:09.150 --> 08:11.840
here you see that it is activated and running

08:12.210 --> 08:16.500
and here you see the name, you can click on it to view the file content which of course is empty right

08:16.500 --> 08:17.670
now.

08:17.670 --> 08:22.920
Now these buttons here allow you to quickly update it to a new version if you've got one, simulate a

08:22.920 --> 08:23.710
push event,

08:23.790 --> 08:25.380
we'll come back to this later,

08:25.520 --> 08:27.900
simulate a background synchronization event,

08:27.930 --> 08:32.070
we'll come back to this too later or unregister it if you want to get rid,

08:32.070 --> 08:34.950
these are all debugging development only tools,

08:35.010 --> 08:37.830
you can't rely on using them in a production ready application

08:37.830 --> 08:42.240
of course. The checkboxes up here allow you to simulate offline mode,

08:42.240 --> 08:47.620
we'll do this in the future. To automatically update the service worker whenever you refresh the page,

08:47.640 --> 08:53.280
I'll come back to what I mean with that soon, to not use the service worker in case you're intercepting

08:53.280 --> 08:54.340
requests with fetch,

08:54.360 --> 08:56.340
we don't do this yet but we will later do it.

08:56.340 --> 09:01.770
If you wanted to disable it temporarily, you could check this and to show all service workers you have,

09:01.890 --> 09:08.130
so not just the ones relating to the page we currently have open here. This is the service worker registered

09:08.640 --> 09:13.500
and here you see that you want to terminate it because it's not doing anything but dev tools prevented

09:13.500 --> 09:14.530
it from doing so,

09:14.640 --> 09:16.160
doesn't really matter to us here,

09:16.210 --> 09:17.580
this is the important line.

09:17.850 --> 09:23.880
Let's next see how we can use the install and activate event and what we can actually do with the service

09:23.880 --> 09:24.270
worker.
