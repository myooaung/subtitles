WEBVTT

00:02.150 --> 00:08.120
In the last lecture, we added a fallback to directly send the data if our browser doesn't support service

00:08.120 --> 00:10.700
workers or the sync manager,

00:10.700 --> 00:16.430
now I also want to make sure that we do send data in the service worker though.

00:16.670 --> 00:22.170
So to send a request from inside the service worker, we'll go into this file and there, I'll register

00:22.200 --> 00:25.920
a new event, I'll do this here at the very bottom of this file,

00:26.180 --> 00:32.300
so with self add event listener, I listen to the sync event and as I explained on the slide, this event will

00:32.300 --> 00:38.830
be executed whenever the service worker believes it reestablished connectivity or that will also

00:38.850 --> 00:41.280
fire if the connectivity was always there

00:41.300 --> 00:43.900
as soon as a new sync task was registered.

00:44.150 --> 00:49.490
So whenever the service worker thinks it has connectivity and it has an outstanding synchronization

00:49.490 --> 00:52.260
task, it will trigger this event.

00:52.280 --> 00:59.210
Now in this event here which we of course also passed to the function, I want to basically now send

00:59.210 --> 01:05.960
a request to the server because at this point of time, I know that we have an internet connection. So

01:05.960 --> 01:10.150
to do that, I'll first of all log something here so that we can see it's working,

01:10.370 --> 01:12.840
so service worker is doing something here,

01:12.980 --> 01:18.840
it's background syncing and we can put the event here to to get some extra information.

01:18.860 --> 01:22.010
That of course doesn't add any useful logic though,

01:22.070 --> 01:25.420
the first thing I want to do is I want to check the event tag.

01:25.670 --> 01:31.520
In theory, we could have multiple event tags and you probably want to do different things for the different

01:31.520 --> 01:32.620
events.

01:32.630 --> 01:34.430
So right now in feed.js,

01:34.500 --> 01:38.310
I have a tag of sync

01:38.330 --> 01:39.290
new post

01:39.410 --> 01:45.650
and of course I want to handle this specific task now with a specific way of sending the data and also

01:45.780 --> 01:47.720
the tag defines which data I want to send

01:47.720 --> 01:52.100
most of the time. To check the tag, I'll use an if statement, access the event

01:52.190 --> 01:59.600
and there, there is a tag property and I'll check if this is sync new post, of course has to be written

01:59.600 --> 02:04.000
in the exact same way as in the feed.js file where I registered it.

02:04.400 --> 02:08.600
So if we do have this event here, then I want to do something specific

02:08.630 --> 02:13.460
and if you have different tags or different synchronization tests, you probably want to use a switch

02:13.460 --> 02:18.420
case statement to do different things for the different events. Here

02:18.430 --> 02:22.410
I'll first of all output a log message again to show that I am in the

02:22.430 --> 02:23.660
right

02:23.700 --> 02:30.290
part of this event listener so to say and here I will say syncing new posts and it should be clear then

02:30.530 --> 02:38.440
that the if statement successfully gave me access. Then I'll use event wait until just as before,

02:38.450 --> 02:45.410
this simply allows me to make sure that the event doesn't finish preemptively but that it waits for

02:45.410 --> 02:46.330
this to finish

02:46.330 --> 02:47.730
and for what to finish?

02:47.780 --> 02:55.700
Well for me sending the data of course. For that, I first of all need to read the data in the sync posts in

02:55.700 --> 02:58.130
my indexedDB, that is where I stored it, right?

02:58.130 --> 03:02.010
Here with writeData, we stored it in sync posts.

03:02.150 --> 03:08.220
Now thankfully in our utility function, we have that read all data function which is just what we need.

03:08.480 --> 03:15.280
So inside there, I'll call read all data, of course on the sync posts store

03:15.590 --> 03:18.160
and then I want to use that data.

03:18.290 --> 03:25.350
So I'll have a function here which gives me that data and now I want to send this to my server

03:25.760 --> 03:29.780
and that actually is pretty comparable to the code we have in feed.js.

03:29.780 --> 03:34.450
So I will copy that from the send data method here,

03:34.460 --> 03:39.830
copy that code with the fetch statement, go to the service worker and paste it in there and we need to

03:39.830 --> 03:40.420
finetune it 

03:40.430 --> 03:43.540
but generally, the logic is the same. I'm inside

03:43.570 --> 03:46.130
the event callback on read all data

03:46.560 --> 03:49.640
and now, I of course need to populate all these fields.

03:49.640 --> 03:53.000
Now I'll take the ID from my data store here,

03:53.150 --> 03:58.740
however keep in mind, we might have multiple posts in the store, multiple posts

03:58.740 --> 04:03.620
we need to synchronize because maybe the user submitted multiple posts while no internet connection

04:03.620 --> 04:04.330
was there,

04:04.670 --> 04:11.800
so we definitely need to loop through all the data pieces. So I'll store this in a dt variable and I'll

04:11.840 --> 04:14.230
use a for/of loop here in the service worker

04:14.270 --> 04:19.270
since browsers supporting service workers also support for/of loops.

04:19.310 --> 04:23.850
Now here are my IDE does complain that I'm using the wrong Javascript version,

04:23.870 --> 04:29.790
you can always fall back to normal for loop but here I know the browsers executing

04:29.790 --> 04:32.120
this code will support for/of.

04:32.420 --> 04:36.030
So I'll take my fetch method and add it into this loop

04:36.380 --> 04:43.250
and here again, I get access to all the posts which are queued up for synchronisation. I'll then first

04:43.250 --> 04:44.950
of all output or store

04:44.970 --> 04:53.570
the ID here by accessing dt.id and dt will just refer to an individual entry in my indexedDB

04:53.610 --> 04:56.270
sync posts store

04:56.720 --> 05:00.000
and of course I'll follow this pattern here for all the other things too.

05:00.180 --> 05:06.060
dt.title gives me access to the title, dt.location gives me access to the location

05:06.530 --> 05:10.770
and I'm getting this data from here in feed.js 

05:10.800 --> 05:14.270
where I queue this up to store it.

05:14.300 --> 05:16.490
I store the ID, title and location,

05:16.490 --> 05:19.460
I store all of that with writeData,

05:19.550 --> 05:24.980
well this is what I'm extracting now in the service worker, ID title and location and I'll hardcode the image

05:24.980 --> 05:25.640
for now,

05:25.640 --> 05:27.310
later we'll store this too

05:27.350 --> 05:32.840
once we know how to take an image. So that's the data I want to send, the rest of the request

05:32.840 --> 05:39.080
actually is just the same, however here in the then block after sending the request,

05:39.170 --> 05:45.770
I'll of course not update the UI because we don't have access to the DOM here, this update UI method won't

05:45.770 --> 05:47.090
work here.

05:47.090 --> 05:55.070
Instead what I want to do here is, I want to clean up my sync post object store in indexedDB because

05:55.070 --> 05:59.760
now we handled the queue, we handled all queued up posts,

05:59.810 --> 06:01.820
of course I want to remove it

06:02.090 --> 06:07.790
or actually we didn't handle all of them but since we execute this in the for loop, I have to delete

06:07.820 --> 06:09.910
each post for which we handle that.

06:10.310 --> 06:17.270
So here to make sure that this works, I can use another method from my utility.js file and

06:17.270 --> 06:22.300
that is delete item from data, we haven't used it yet but it's exactly what we need now.

06:22.550 --> 06:29.050
We passed the store from which we want to delete an item and the ID of the item and we have both here. So

06:29.120 --> 06:36.130
in then block after executing this request, we know we did successfully send the request to the server

06:36.140 --> 06:36.610
now,

06:36.740 --> 06:38.320
so now we can clean it up.

06:38.660 --> 06:39.820
Well to be super safe,

06:39.830 --> 06:43.630
I'll check if OK is true on the response,

06:43.820 --> 06:49.970
OK is a helper property provided on the response object which indicates if the response code is in the

06:49.970 --> 06:53.560
200 area which means it was successful.

06:53.570 --> 06:58.700
Now in there, I want to call this helper method in utility.js, delete item from data which allows

06:58.700 --> 07:04.400
us to delete an element from indexedDB and I want to delete the element we just handled in this for

07:04.400 --> 07:08.910
loop iteration for which we just sent the request. So here I will now execute

07:08.940 --> 07:17.270
delete item from data on the sync post object store in indexedDB and the item I want to delete is dt.id,

07:17.510 --> 07:22.400
this ID here of this current loop iteration.

07:22.730 --> 07:29.660
As a side note, we will later enhance this and get back the ID from the server which is much safer since

07:29.660 --> 07:33.470
we then definitely execute the right code on the right response,

07:33.470 --> 07:39.290
this will be something we add in future modules of this course where we basically will change the way our

07:39.290 --> 07:40.750
code executes on the server

07:40.760 --> 07:41.530
a little bit.

07:41.660 --> 07:44.660
So for now, I'll use this ID here though

07:44.720 --> 07:48.440
and delete it from my indexedDB.

07:48.800 --> 07:51.250
And with that, we did all that clean up work,

07:51.530 --> 07:58.040
if the response isn't OK, then I don't want to purge it from my store because then we definitely need

07:58.040 --> 08:01.110
to try again the next time the connectivity re-established

08:01.340 --> 08:07.440
and if this request fails, so if we are not inside then but we catch it basically,

08:07.610 --> 08:13.550
well then we can output some error message in the log or do whatever we want but it definitely also

08:13.550 --> 08:23.970
don't want to clear this from my indexedDB because we have to try again. So only make sure to clear your

08:23.970 --> 08:32.730
indexedDB here in the then block after sending your post request with fetch only if the response is OK. And

08:32.740 --> 08:40.830
that is the code for a service worker to react to this sync event, get the data we stored in indexedDB, loop through it

08:41.070 --> 08:47.210
send a post request for each of the data pieces be stored and then delete it from indexedDB

08:47.220 --> 08:55.440
if we successfully sent it to the server. Let's now try this out. For that, I'll go back to my application

08:56.220 --> 08:59.570
and I will clear the storage and reload the page,

08:59.880 --> 09:02.780
alternatively close the tab and open a new tab

09:03.180 --> 09:05.180
and now let's see if this works.

09:05.340 --> 09:13.710
If I open this and I enter some title here and some location here and I click post, we get an error,

09:13.710 --> 09:20.670
cannot read showSnackBar of undefined. The reason for this is in our feed.js file, snack back

09:20.710 --> 09:25.460
container, well that should be the snack bar container

09:25.460 --> 09:29.630
first of all and then here, material snack bar,

09:29.630 --> 09:31.000
so a little typo.

09:31.040 --> 09:35.840
Sorry about that, so this should now be cleaned up and let's quickly clear the storage.

09:35.840 --> 09:41.120
Make sure to clear this well or bump up that static cache version and reload your tab, close it and open

09:41.240 --> 09:45.090
new tab but don't just close and open the tab without bumping up the static

09:45.170 --> 09:46.010
version, that won't work.

09:46.220 --> 09:49.520
So now we set this up, register the new code,

09:49.520 --> 09:58.550
let's try this again, some title and some location and hit post, you should see that is background sync now.

09:58.580 --> 10:03.800
Now if you don't see this for the very first time after you added this feature, you might need to turn

10:03.800 --> 10:07.180
off your Wi-Fi connection and really do that,

10:07.190 --> 10:12.110
don't just go offline here, that won't simulate with background sync, that's important,

10:12.110 --> 10:18.380
offline here won't trigger it. Really go offline on your machine by turning off your Wi-Fi or your internet

10:18.380 --> 10:20.320
connection and re-enabling it

10:20.480 --> 10:26.650
and then this should occur, if it doesn't occur immediately, in the future it should keep on occurring immediately.

10:26.930 --> 10:30.410
And with that we now set this up or we see that it's fired,

10:30.410 --> 10:36.590
however we see that it doesn't really do it though. Now that it's related to a little typo, the tag is

10:36.590 --> 10:37.030
sync

10:37.040 --> 10:38.390
new post,

10:38.670 --> 10:40.850
that is the tag we stored in feed.js.

10:40.940 --> 10:50.530
Here when we registered this sync new post, that should be new posts with an S at the end because that is

10:50.530 --> 10:52.880
what we're also listening to in the service worker,

10:53.000 --> 10:54.380
sync new posts,

10:54.420 --> 10:56.240
that's the tag we're checking.

10:56.260 --> 11:01.240
This shows the importance of really being careful about this, so it's a good mistake here, that's why

11:01.240 --> 11:02.280
I left it in,

11:02.410 --> 11:05.290
definitely make sure your tags are equal.

11:05.290 --> 11:10.840
Now we can confirm that under the application tab if we inspect the indexedDB database by refreshing it,

11:11.350 --> 11:16.480
we do have that sync post stored where we have one post stored up or queued up.

11:16.510 --> 11:20.150
So now with that adjusted, with the tag adjusted in feed.js,

11:20.160 --> 11:22.540
let me clear the storage again

11:22.600 --> 11:28.450
since I changed something in my normal Javascript code, reload the application or as before

11:28.450 --> 11:31.310
bump up the static cache version, close the tab and

11:31.330 --> 11:34.360
open a new one and now I will again execute

11:34.500 --> 11:37.940
this with some title and some location, post.

11:37.960 --> 11:39.200
Now it's firing

11:39.460 --> 11:43.080
and now you see the server responded with 401.

11:43.180 --> 11:47.780
Now that's a good thing actually because it means it tried to send it but we weren't authorised,

11:48.040 --> 11:50.300
that's the response, unauthorised.

11:50.470 --> 11:53.170
So the background synchronization task worked,

11:53.200 --> 11:57.910
the only thing is that on Firebase, we're not allowed to send data to it.

11:58.010 --> 12:01.100
Now that can be changed under database rules

12:01.450 --> 12:02.640
and here right now

12:02.640 --> 12:03.000
write

12:03.010 --> 12:09.220
access is only given to users who are authenticated. Now I will set this to true to allow to everyone, in a real

12:09.220 --> 12:14.380
application you want to use this carefully of course because you probably have some way of user authentication

12:14.380 --> 12:19.810
in your app and having this check is fine but then your users would be authenticated and you could attach

12:19.810 --> 12:23.360
this authorisation information to the request we're sending. Here

12:23.370 --> 12:24.730
we don't have that feature though,

12:24.790 --> 12:26.840
so I will enable it for everyone.

12:27.130 --> 12:32.550
Now with this changed, we can go back and reload here

12:32.800 --> 12:39.940
and by the way you will see that in indexedDB, it still has this queued up because we didn't clear it because

12:39.940 --> 12:41.450
the request wasn't successful,

12:41.470 --> 12:47.560
so exactly what we wanted and now we could either make sure we get connectivity again,

12:47.590 --> 12:50.240
it will try again later at some point

12:50.440 --> 12:57.480
but to speed this up, I will simply send a second request, some location to send post,

12:57.550 --> 13:02.010
now it sent two requests which made sense because two were queued up,

13:02.050 --> 13:10.410
now if we refresh indexedDB, close our developer tools here to get a really refreshed view of it, you see

13:10.520 --> 13:11.950
only one is there.

13:12.180 --> 13:14.770
Now that is simply related to the way we're clearing it,

13:14.770 --> 13:22.210
we're doing this in a for loop and if you aware of how Javascript works, then this ID here will always

13:22.210 --> 13:24.210
refer to the latest iteration,

13:24.220 --> 13:29.440
it doesn't refer to the iteration you executed in because this is asynchronous code,

13:29.530 --> 13:33.230
so this will execute after the whole loop finished, that is why

13:33.250 --> 13:36.830
we will later fix this by using the ID we get back from the server.

13:36.880 --> 13:41.610
Right now this isn't working as it should be, isn't working correctly,

13:41.620 --> 13:44.950
I'll clearly add this here, it's only clearing the latest ID,

13:45.010 --> 13:51.010
not the ID of the item we really send the request for. Sending the request does work though, if

13:51.010 --> 13:57.000
we inspect it here in our database, under posts you see we have two new posts,

13:57.000 --> 14:00.360
this cryptic ID is generated by Firebase automatically,

14:00.400 --> 14:05.400
we have our own ID in there though if you want to use that and you can see the values are different

14:05.410 --> 14:07.200
so it sent the correct requests,

14:07.240 --> 14:14.110
it's only the cleanup which doesn't work correctly due to the way Javascript for loops work and

14:14.170 --> 14:17.370
especially how they work when combined with asynchronous code.

14:17.740 --> 14:19.340
Overall, this is working though,

14:19.360 --> 14:21.860
we are successfully synchronizing that,

14:21.940 --> 14:24.390
we haven't seen it work offline though.

14:24.520 --> 14:31.180
So let's quickly do that too and for that, I'll first of all manually clear this one element here in my

14:31.180 --> 14:31.900
store 

14:31.930 --> 14:39.000
because as I just said, this simply should be gone, doesn't work due to the way Javascript works.

14:39.100 --> 14:45.130
Now I will turn off my Wi-Fi connection and again, you have to do this, going offline here doesn't

14:45.130 --> 14:45.730
do the trick,

14:45.730 --> 14:47.840
you have to be really offline

14:48.310 --> 14:53.700
and now I will post some title and some location three, post it,

14:53.830 --> 14:55.980
it was stored for syncing

14:56.290 --> 14:58.330
and now let's go back online.

14:58.600 --> 15:02.010
So I will turn on my Wi-Fi

15:02.220 --> 15:06.300
and then we see, it is indeed triggered, the request is sent,

15:06.570 --> 15:11.410
we see it here on Firebase, some location three, some title three was added

15:11.630 --> 15:17.700
and if I reload my application here, we also see all these new items which are now being fetched because

15:17.700 --> 15:19.680
we now pass them to our back-end.

15:19.680 --> 15:22.400
So that's really really cool,

15:22.410 --> 15:24.630
this is now working as it should.

15:24.780 --> 15:32.660
Now in the next lectures or in the next modules, we will fine tune our back-end code, change it,

15:32.700 --> 15:38.910
we will also find a way to return some data here from the request when we get it on

15:38.910 --> 15:39.870
our back-end

15:40.050 --> 15:46.520
but this is already background synchronization working, both when we're online and offline as you saw

15:46.620 --> 15:48.410
and this is a very powerful tool

15:48.450 --> 15:50.550
you should definitely have in your toolbox.
