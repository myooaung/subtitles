WEBVTT

00:02.230 --> 00:08.330
Así que vamos a profundizar en eso y comencemos con TASC. Uno identificó una estrategia que actualmente

00:08.330 --> 00:12.680
utilizamos en el trabajo de servicio. Aquí, de qué estrategia se trata.

00:13.010 --> 00:14.630
Pues vamos a analizarlo.

00:14.720 --> 00:23.570
Respondemos con algo donde primero revisamos nuestro efectivo y vemos si podemos encontrar al solicitante, y si

00:24.260 --> 00:29.330
tenemos una respuesta válida, la devolvemos de otra manera.

00:29.420 --> 00:36.710
Si la respuesta es nula, devolvemos una solicitud de recuperación donde simplemente contactamos a la red con

00:36.710 --> 00:44.870
la solicitud original que capturamos y luego tomamos esa respuesta de la red, la almacenamos en el efectivo y

00:45.740 --> 00:47.090
la devolvemos.

00:47.480 --> 00:50.330
Entonces, ¿cuál es esta estrategia.

00:51.550 --> 00:55.300
Es el efectivo que recae en la estrategia de red.

00:55.360 --> 01:00.750
Miramos el efectivo primero, pero si no encontramos una respuesta, nos dirigimos a la red.

01:00.880 --> 01:06.580
Y además, todos apoyamos cualquier respuesta de red que obtengamos en efectivo para agregarle almacenamiento dinámico en

01:06.580 --> 01:06.960
caché.

01:07.090 --> 01:12.140
Eso es parte de la estrategia, pero la estrategia funcionaría sin límite aquí.

01:12.160 --> 01:17.920
Así que podríamos eliminar eso y aún tendríamos un efectivo que recurra a la estrategia de red.

01:17.950 --> 01:20.970
Así es la respuesta a la primera tarea.

01:21.100 --> 01:22.200
Lo pondré debajo de él.

01:22.300 --> 01:29.370
Es efectivo volver a la red con el almacenamiento en caché dinámico si desea agregar este opcional.

01:29.380 --> 01:32.640
Pero sí sí almacenamos todo en el efectivo.

01:32.780 --> 01:37.730
Vamos a pasar a la tarea de una estrategia de red solamente.

01:37.730 --> 01:47.670
Así que para eso aquí simplemente copiaré la estrategia que ya tenemos en efectivo y retrocederemos y lo

01:47.680 --> 01:48.620
comentaremos.

01:48.630 --> 01:51.910
Lo copié para que lo tengamos aquí como referencia.

01:52.320 --> 01:54.720
Así que el objetivo es sólo la red.

01:55.170 --> 02:02.400
Bueno, en realidad es fácil de implementar. Podríamos eliminar al oyente por completo porque luego nos comunicamos

02:02.400 --> 02:08.100
con la red de cualquier manera en nuestro código y en el siguiente

02:08.880 --> 02:11.490
extremófilo cuando recuperamos archivos, etc.

02:11.610 --> 02:16.030
Pero entonces no respondemos con el partido en efectivo.

02:16.140 --> 02:24.510
En su lugar, respondemos simplemente llegando a la Web simplemente enviando una solicitud fecunda y luego podemos optar

02:24.510 --> 02:27.420
por almacenar muertos en el caché.

02:27.420 --> 02:31.740
Sin embargo, realmente no hace una diferencia porque realmente no estamos cargando a ningún amigo del caché, por lo

02:32.040 --> 02:35.310
que no puede deshacerse de eso y simplemente devolvió la solicitud de recuperación.

02:35.340 --> 02:37.230
Eso es super simple.

02:37.230 --> 02:44.880
Ahora guardemos esto y cambié. Hice un Jaspal, pero solo edite esta línea para no tener que juntar

02:44.880 --> 02:47.970
la palabra en mi trabajador de servicio.

02:48.150 --> 02:55.860
Entonces, solo trabajemos en el servicio de seguridad, volvamos a la tarea y siempre puede recargar y luego simplemente

02:55.860 --> 03:02.860
cerrar la pestaña y abrir una o la aplicación borrar el almacenamiento, borrar los datos del sitio.

03:02.970 --> 03:09.360
Tal como escribí en las instrucciones, luego vuelva a cargar todo y las personas que vea, el trabajador de servicio, se registrará

03:09.960 --> 03:11.750
y la aplicación seguirá funcionando.

03:11.970 --> 03:20.880
Y si inspeccionamos esta caja, tiene el ancho a la altura 310 que en realidad es cinco veces mi IP en los

03:20.880 --> 03:22.950
primeros dos dígitos 1:54.

03:23.070 --> 03:24.700
Así que eso funciona.

03:24.750 --> 03:31.350
Así que con esto conseguimos este conjunto y resolvimos nuestras primeras tareas.

03:31.350 --> 03:37.840
Siempre nos comunicamos con la red aquí para ver si estamos completos, veamos qué sucede si nos desconectamos.

03:37.860 --> 03:42.000
Como era de esperar, nuestra aplicación falla porque no tenemos un respaldo de efectivo.

03:42.030 --> 03:44.100
Siempre nos acercamos a la red.

03:44.160 --> 03:47.910
Así que esta es una tarea que ha resuelto una estrategia de red solamente.

03:48.110 --> 03:53.970
Lo agregaré sobre él para que tengamos solo para la red de referencia.

03:54.120 --> 03:56.500
Vamos a pasar a la tarea libre.

03:56.560 --> 03:58.600
Una estrategia solo en efectivo.

03:58.620 --> 04:02.950
Así que de vuelta en el trabajador de servicio ahora trabajamos en esto otra vez.

04:02.980 --> 04:10.080
No, lo copiaré y luego lo comentaré con la única estrategia de la red y ahora quiero tener una estrategia de

04:10.080 --> 04:11.040
solo efectivo.

04:11.370 --> 04:12.740
Bueno, eso es simple también.

04:13.050 --> 04:23.960
En lugar de ir a buscar aquí, fuimos cobradores y vemos si podemos encontrar la solicitud en nuestro efectivo, entonces tenemos una función en la

04:23.960 --> 04:31.400
que obtendría una respuesta si no fallamos si la encontramos en todas las circunstancias y respondí

04:31.400 --> 04:34.730
que la respuesta podría ser aunque anulado

04:34.910 --> 04:41.720
Y para abreviarlo o hacerlo un poco más corto, también puedo eliminar que si todo lo que estoy haciendo es devolver la

04:41.720 --> 04:43.490
respuesta en todas las circunstancias.

04:43.550 --> 04:47.840
Puedo dejar de lado la llamada y solo llamar al efectivo este partido.

04:47.840 --> 04:53.920
Ahora con eso solo devolvemos cosas del efectivo y si no está en el efectivo, no podemos usarlo.

04:54.320 --> 04:56.720
Así que volvamos a nuestra aplicación aquí.

04:56.840 --> 05:04.990
Si lo vuelvo a cargar y luego voy a la aplicación borrar el almacenamiento, borrar los datos del sitio volver a cargar.

05:05.950 --> 05:10.490
Está funcionando bajo la pestaña de red si vuelvo a cargar una vez más.

05:10.490 --> 05:12.880
Vemos que todo se carga desde el trabajador del servicio.

05:13.090 --> 05:18.940
Ahora, sin embargo, en la segunda recarga que teníamos que hacer porque el trabajador de servicio

05:18.940 --> 05:24.290
solo controla esta página aquí ahora vemos que fallaron un par de cosas.

05:24.490 --> 05:27.490
Todas las cosas dinámicas son solo estáticas.

05:27.490 --> 05:29.130
El caché funciona.

05:29.170 --> 05:34.600
Entonces, si les dije que funciona pero no usa, recalcular el ancho porque nunca obtuvo

05:34.600 --> 05:35.370
mi IP.

05:35.380 --> 05:38.390
Tampoco lo ves en el registro de la consola.

05:38.410 --> 05:43.510
Por supuesto, el motivo es que solo me dirijo al caché y si no lo encuentro, la solicitud

05:43.510 --> 05:44.190
está muerta.

05:44.290 --> 05:46.740
No lo dejo continuar a la red.

05:46.780 --> 05:54.710
Ahora, obviamente, esto es un problema porque las únicas cosas que tenemos en el caché una vez que las borramos es la

05:54.710 --> 05:58.010
parte que cobramos de manera estática durante la instalación.

05:58.190 --> 06:00.080
Así que solo tenemos el dinero estático.

06:00.290 --> 06:05.280
Es por eso que el estilo base está funcionando porque nuestro shell de aplicación se cargó.

06:05.480 --> 06:11.660
Pero también es una razón por la que no tenemos íconos y por qué no podemos obtener la IP

06:11.660 --> 06:14.390
porque no se cargan todas esas cosas dinámicas.

06:14.690 --> 06:16.100
Así que eso es sólo en efectivo.

06:16.100 --> 06:18.160
Y esa es la desventaja del efectivo solamente.

06:18.500 --> 06:25.880
Pasemos a la tarea para reemplazarlo con la estrategia de respaldo de caché de red.

06:25.910 --> 06:31.090
Así que ahora el objetivo es llegar primero a la red y solo si eso falla.

06:31.160 --> 06:34.450
Queremos llegar al efectivo, pero no podemos hacer eso.

06:34.760 --> 06:41.720
En primer lugar, permítanme copiar el antiguo oyente aquí y comentarlo nuevamente para que lo tengamos como referencia aquí, pero

06:41.720 --> 06:43.510
ya no queremos usarlo.

06:43.780 --> 06:49.000
Y ahora el objetivo de la red es volver al efectivo.

06:49.130 --> 06:53.680
Algo opuesto a lo que teníamos al principio, donde el efectivo se redujo a la red.

06:54.170 --> 07:02.430
Así que aquí el objetivo es responder con una solicitud para hacer bien la solicitud que queríamos.

07:02.810 --> 07:09.100
Pero luego lo atrapamos si falla, si no falla, es todo lo que queríamos, recibimos la respuesta.

07:09.230 --> 07:12.560
Pero la alternativa es llegar al efectivo.

07:12.590 --> 07:19.940
Entonces, en caso de que obtengamos algún error, queremos llegar al efectivo para poder devolver el efectivo que tenemos para acceder a todo

07:19.970 --> 07:21.330
el efectivo que tenemos.

07:21.500 --> 07:24.750
Y ver si tiene un éxito en cualquiera de estos cachés.

07:25.070 --> 07:32.420
Así que comprobaré si la solicitud se puede encontrar en alguno de los cachés que en realidad ya son todo lo que no necesito

07:32.420 --> 07:34.180
hacer mucho más que eso.

07:34.490 --> 07:38.320
Vamos a guardar esto volver a la aplicación de nuevo.

07:39.240 --> 07:46.020
Allí, en la pestaña de la aplicación y el almacenamiento de Cleator, vacíe los datos del sitio una vez para instalar el servicio Rooker y

07:46.020 --> 07:50.440
vuelva a cargar una segunda vez para poner esto bajo el control del trabajador del servicio.

07:51.000 --> 07:54.270
Y ahora su red recurre al efectivo.

07:54.370 --> 07:59.490
Por lo tanto, en la pestaña de red vemos que todo se recupera de la red en el año final, lo que

07:59.490 --> 08:02.370
tiene sentido porque primero se lo pasamos al trabajador de servicio.

08:02.490 --> 08:06.330
Pero luego decidimos oye quiero hacer una petición fecunda.

08:06.330 --> 08:12.220
Ahora veamos qué sucede si me desconecto tomando esta casilla para ahora recargar.

08:12.480 --> 08:17.850
Todavía funciona, excepto por las cosas cargadas dinámicamente porque no estamos haciendo un almacenamiento dinámico en este

08:17.850 --> 08:18.380
momento.

08:18.570 --> 08:24.960
No tenemos código para poner las cosas en el caché una vez que las tienes, pero aún funciona.

08:24.960 --> 08:26.560
Se puede ver en la narrativa.

08:26.640 --> 08:32.640
Ahora obtenemos la mayoría de las cosas del trabajador del servicio directamente porque nuestra solicitud de red falló, pero eso no es un problema.

08:32.640 --> 08:33.990
Lo tenemos en el trabajador de servicio.

08:33.990 --> 08:37.530
Es por eso que todavía está en el caché que cargamos para el trabajador del servicio.

08:37.560 --> 08:39.490
Por eso sigue funcionando.

08:39.540 --> 08:46.880
Ahora, tenga en cuenta que lo negativo de este enfoque es que si tiene una red que no solo es adecuada

08:46.890 --> 08:54.690
para la red, sino que también es inestable, que desaparece al cabo de un tiempo, tiene que esperar hasta que la solicitud falle

08:54.870 --> 08:57.010
y solo entonces nos descubran.

08:57.090 --> 08:58.490
Así que esto podría ser demasiado tarde.

08:58.530 --> 09:01.730
Puede llevar a una mala experiencia de usuario.

09:01.740 --> 09:09.300
Ahora ganemos algunos puntos de bonificación agregando también un oyente y asegurándonos de que almacenemos en caché las respuestas

09:09.300 --> 09:13.710
que obtengamos para volver a agregar el caché dinámico al juego.

09:13.830 --> 09:15.490
Esto es puramente opcional.

09:15.570 --> 09:18.110
Siéntase libre de hacer una pausa ahora y pruébelo por su cuenta.

09:19.430 --> 09:20.840
Y ahora lo hacemos juntos.

09:21.050 --> 09:26.340
Así que aquí tenemos una respuesta y luego quiero guardarla en mi efectivo.

09:26.390 --> 09:34.120
Entonces, lo que puedo hacer es simplemente acercarme a mis cajeros y abrir el efectivo dinámico.

09:34.370 --> 09:43.420
Entonces, si el nombre dinámico cambiará, aquí tengo acceso a ese efectivo en la función aquí y todo el efectivo

09:43.930 --> 09:52.340
que puedo poner quiero poner la URL de mi solicitud de evento y almacenar la respuesta que recibí.

09:52.510 --> 09:58.720
También quiero devolver la respuesta y, por lo tanto, quiero devolver efectivo este año, lo que al

09:58.990 --> 10:00.620
final traerá esa respuesta.

10:00.940 --> 10:06.060
Aquí hay una cosa importante, sin embargo, antes de que intentemos esto, asegúrese de llamar a clonar aquí.

10:06.400 --> 10:12.190
De lo contrario, está consumiendo la solicitud y, por lo tanto, puede almacenarla en efectivo.

10:12.430 --> 10:14.770
Así que asegúrate de guardar un clon aquí.

10:14.850 --> 10:17.100
Ahora con eso volvamos a la aplicación.

10:17.260 --> 10:22.440
Vamos a borrar el almacenamiento, borrar los datos del sitio, volver a cargar.

10:23.010 --> 10:28.920
En realidad, dos veces para asegurarnos de que todo esté bajo el control del trabajador del servicio y

10:29.580 --> 10:37.620
salga de la línea y debería ver que los iconos están disponibles al igual que el tamaño ajustado del cuadro aquí porque en nuestra memoria caché

10:37.620 --> 10:42.570
dinámica ahora almacenamos todas las cosas que todos Han buscado a través de la red.

10:42.570 --> 10:46.390
Estos son solo algunos puntos de bonificación, pero también una buena práctica.

10:46.890 --> 10:55.260
Así que con esto resolvimos esta tarea en la tarea 5 aquí, queremos reemplazar la estrategia de reserva de caché de red

10:55.260 --> 10:58.400
con la estrategia de red de caché luego.

10:58.740 --> 11:04.110
Ahora, esta es una estrategia en la que tenemos que escribir el código tanto en nuestro archivo javascript aquí en la

11:04.140 --> 11:08.960
parte delantera para decir que, en general, no caiga tan bien como en el trabajador de servicio.

11:09.000 --> 11:10.870
¿Recuerdas cómo funciona?

11:11.100 --> 11:12.390
Empecemos por lo principal.

11:12.490 --> 11:16.020
Jaiswal aquí estamos recogiendo nuestros datos.

11:16.290 --> 11:23.100
Y en realidad, después de que lo hagamos, todos queremos ver si ya podemos obtener la respuesta del caché mientras la

11:23.100 --> 11:25.740
solicitud de red aún está en camino.

11:25.770 --> 11:32.100
En primer lugar, deberíamos comprobar si el objeto sin efectivo está disponible en la ventana para no intentar acceder a una

11:32.100 --> 11:35.170
función que sepa que no es compatible con el navegador.

11:35.370 --> 11:38.010
Si ese es el caso, queremos llegar a la memoria caché.

11:38.130 --> 11:42.930
Entonces, lo que se puede calentar es algo que se llama cachés que coincide y lo busca.

11:42.940 --> 11:44.020
D usted r l.

11:44.140 --> 11:47.800
Guardaré que todos ustedes están en una nueva variable aquí.

11:47.800 --> 11:54.730
Así que permítame almacenarlo rápidamente allí y luego usar su l, por supuesto, aquí en la solicitud de hechizo y allí

11:54.790 --> 11:57.370
donde trato de encontrarlo en el caché.

11:57.370 --> 12:00.920
Ahora, en la función, volvemos a una respuesta del caché.

12:01.060 --> 12:06.160
Ahora podría ser nulo también podría tener éxito si se establece la respuesta.

12:06.160 --> 12:09.960
Así que si encontraste algo, entonces quiero usarlo, por supuesto.

12:10.000 --> 12:15.080
Entonces, si ese es el caso, quiero ejecutar ese código aquí.

12:15.300 --> 12:19.860
Bueno, en primer lugar, aunque tengo que devolver la respuesta Jason.

12:20.370 --> 12:27.300
Esto llevará al siguiente bloque aquí donde obtendré el extracto de los datos de

12:27.300 --> 12:38.040
Jason. Puedo decir que la consola registra desde la caché los datos y aquí están antiguos y quiero usar este código aquí para

12:38.040 --> 12:45.390
ajustar el estilo de un cuadro. Para ver realmente una diferencia o tal vez con 20.

12:45.400 --> 12:49.970
Y realmente muy grande para que pudiéramos ver si el caché ganaría al final.

12:49.990 --> 12:55.720
Así que aquí estoy recuperando o regineando eso es justo lo que el software nos devuelve del objeto de datos

12:55.720 --> 13:00.910
que extraemos, que se multiplican los dos primeros caracteres del AP y con 20 hace lo que estoy

13:00.910 --> 13:01.650
haciendo aquí.

13:02.050 --> 13:04.720
Así que ese es el caso del caché.

13:04.720 --> 13:11.050
Sin embargo, también nos comunicamos con la red y queremos asegurarnos de que la red responda siempre gana.

13:11.050 --> 13:20.920
Entonces, lo que haré es crear una nueva variable que nombre la respuesta de red recibida y la estableceré

13:20.920 --> 13:22.990
en falso inicialmente.

13:22.990 --> 13:30.280
Ahora, una vez que obtengamos una respuesta de red, aquí en el controlador de solicitud de recuperación.

13:30.300 --> 13:34.150
También es cierto porque ahora sé que obtuve datos de la red.

13:34.240 --> 13:36.250
Así que quiero ponerlo en verdad, obviamente.

13:36.580 --> 13:41.550
Y ahí abajo, en el caché, solo quiero usar mis datos.

13:41.860 --> 13:44.270
Si no es cierto.

13:44.410 --> 13:50.140
Por lo tanto, si no recibimos los datos de la red, recibimos una respuesta, porque si recibimos una,

13:50.140 --> 13:53.710
ciertamente no quiero anular los datos que recibimos de la red.

13:53.710 --> 14:01.620
Por lo tanto, esta línea aquí siempre debe ganar este año, solo debe usarse si aún no hay respuesta de la

14:01.620 --> 14:02.160
red.

14:03.310 --> 14:04.050
Ahora eso está bien.

14:04.050 --> 14:08.690
Al acceder al cajero, todos queremos agregar almacenamiento dinámico en caché.

14:08.710 --> 14:14.530
Esa es la parte que escribimos sobre el trabajador de servicios y obviamente es opcional, pero nunca

14:14.530 --> 14:18.320
rellenará ese dinero si no lo hace con esa lógica.

14:18.360 --> 14:29.930
Así que copiaré la regla de efectivo de la red aquí y agregaré el almacenamiento en caché dinámico para la red. Discúlpeme por el efectivo y luego la

14:30.910 --> 14:36.750
estrategia de la red porque eso es todo lo que estamos haciendo aquí.

14:36.820 --> 14:41.470
En algunos cachés dinámicos hacemos esto respondiendo con algo especial.

14:41.470 --> 14:48.370
Estamos respondiendo porque el efectivo está abierto y quiero abrir mi efectivo dinámico aquí para poder escribir en

14:48.370 --> 14:49.000
él.

14:49.480 --> 14:55.160
Así que ten una función aquí donde podamos acceder a cobrarlos y allí.

14:55.480 --> 15:03.610
Ahora quiero devolver mi solicitud de llamada a evento para dejar que la deuda continúe, porque siempre tenga en cuenta que el trabajador de

15:03.970 --> 15:08.970
servicio se mete en el carbón que emitimos aquí en la caída más importante.

15:08.980 --> 15:11.330
Así que definitivamente tenemos que dejar que esto continúe.

15:11.440 --> 15:14.000
Lo hacemos devolviendo petición fecca.

15:14.110 --> 15:19.140
Sin embargo, también queremos tener acceso a los datos que hay.

15:19.390 --> 15:26.330
Entonces tenemos una función aquí donde obtenemos la respuesta donde ahora quiero almacenarla en efectivo.

15:26.530 --> 15:33.400
Así que aquí tendré acceso al efectivo, tenemos acceso a la disfunción de Frew porque abrimos la

15:33.400 --> 15:38.320
llamada de efectivo y para la solicitud del evento eres l.

15:38.380 --> 15:44.940
Por cierto, usted podría solicitar todo el uso del cofre que haría todo el trabajo que quisiera para almacenar un clon

15:44.940 --> 15:45.990
de la respuesta.

15:45.990 --> 15:52.260
Y, por supuesto, devuelva su respuesta original para que devolvamos algo a la solicitud de recuperación

15:52.410 --> 15:55.180
que proviene del archivo dot js principal.

15:55.260 --> 16:00.530
En realidad, esto se ejecutará, por supuesto, en cualquier solicitud de heces proveniente de cualquier parte de

16:00.530 --> 16:03.530
nuestra aplicación, pero estamos escribiendo específicamente para este año.

16:03.960 --> 16:06.320
Así que ahora tenemos algún lugar.

16:06.660 --> 16:17.070
Si ahora guardamos esto, retrocedamos y borremos el almacenamiento en nuestra aplicación, vuelve a cargar la aplicación aquí dos veces y ahora vemos desde

16:17.460 --> 16:26.760
la memoria caché indefinida porque no está ahí si recargo esto una vez más, aunque vemos desde la memoria caché que

16:26.790 --> 16:32.800
encontró algo porque es demasiado dinámico. el almacenamiento en caché fue almacenado allí.

16:32.840 --> 16:39.510
Sin embargo, lo que también veremos es que en la red lo hacemos desde la red al final, lo que

16:39.510 --> 16:43.320
tiene sentido porque tenemos una estrategia de red Denn de caché.

16:43.320 --> 16:51.010
Sin embargo, veremos que si me desconecto de la línea, todo se rompe, la razón de esto es que en el

16:51.010 --> 16:55.020
trabajador de servicio no tenemos ninguna lógica para devolver nada.

16:55.030 --> 17:00.810
Si estamos fuera de línea no estamos devolviendo nada, solo estamos almacenando algo para las solicitudes que recibimos.

17:01.300 --> 17:08.620
Entonces, esta es la parte que conduce a la última tarea que ofrece la tarea en la que queremos diferenciarnos en

17:08.980 --> 17:16.060
función de su solicitud, qué estrategia utilizamos para que para algunos de ustedes o de lo contrario devolvamos una página en

17:16.090 --> 17:20.670
la que llegamos a la parte final. de su tarea asignada 6.

17:20.860 --> 17:28.570
Ahora quiero que utilices el enrutamiento o estás analizando para elegir las estrategias correctas para diferentes tipos de solicitudes o solicitudes que

17:28.570 --> 17:35.290
apuntan a vistas diferentes o, de lo contrario, quiero implementar para almacenar en caché la estrategia de red que

17:35.350 --> 17:36.820
acabamos de agregar.

17:37.270 --> 17:40.860
Pero también quería agregar al caché con la estrategia de red Fulbeck.

17:40.930 --> 17:47.230
La que teníamos al comienzo de la estrategia de asignación y solo efectivo, y una promesa que puedes

17:47.230 --> 17:50.550
incluir a los tres en este simple proyecto.

17:51.010 --> 17:57.670
Por lo tanto, necesitará instrucciones adicionales para asegurarse de que analiza una vista diferente o de lo contrario, esta es

17:57.670 --> 17:59.430
probablemente la parte más difícil.

17:59.620 --> 18:02.590
Pero al final solo usa cosas que viste en las últimas conferencias.

18:02.590 --> 18:06.370
Así que siéntete libre de saltar allí para probar esto por tu cuenta.

18:06.490 --> 18:08.590
Aquí está mi solución.

18:08.650 --> 18:15.140
Así que queremos tener efectivo en la red para el tipo de solicitud que tendría esto.

18:15.900 --> 18:24.090
Bueno, solo para una solicitud de esta aquí porque la memoria caché y la red en su mayoría ocurren en nuestras caídas

18:24.090 --> 18:27.860
normales de JavaScript y ahí solo la usamos para esto.

18:27.930 --> 18:31.700
L este bloque aquí es para cachear el bloque de red.

18:32.310 --> 18:40.090
Por lo tanto, por lo tanto, debemos buscar que usted también sea L-N el trabajador de servicio y solo use días.

18:40.110 --> 18:44.200
Solo quiero almacenar la lógica aquí para esta URL.

18:44.370 --> 18:53.710
Así que en el trabajador de servicio aquí me registraré para ver si su evento Ifti your L solicita su l.

18:53.880 --> 19:00.960
Si podemos identificar este Eurail como parte de la solicitud, Eurail debería ser en realidad completar su Ehle.

19:00.960 --> 19:07.830
Pero nuevamente, solo para asegurarnos de que sea suficiente si es parte de Durell, si la deuda es

19:07.830 --> 19:14.380
mayor que menos uno, significa que encontramos algo. Entonces quiero usar esto y simplemente guardar algo.

19:14.910 --> 19:24.300
Esto me permite entonces, como en el otro caso, por ejemplo, implementar el efectivo, luego la red volver a caer en el efectivo o la

19:24.660 --> 19:28.440
lógica de recuperación de red que teníamos al principio.

19:28.440 --> 19:34.260
Así que permítanme copiarlo aquí desde el final y agregarlo en el bloque else.

19:34.530 --> 19:37.380
Y por supuesto necesito quitar los comentarios.

19:37.380 --> 19:43.680
Así que esto se asegura de que solo para esto lo guardemos para todas nuestras solicitudes.

19:43.710 --> 19:48.270
En realidad, tratamos de encontrar una respuesta en el efectivo si no la encontramos.

19:48.270 --> 19:56.680
Llegamos a la red. Ahora también nos pidieron que implementáramos una estrategia de efectivo, aunque ahora

19:56.680 --> 20:00.000
solo tenemos las dos primeras.

20:00.010 --> 20:07.330
El efectivo solo tiene sentido para todas las cosas que cobramos de manera estática durante la instalación porque sabemos que

20:07.330 --> 20:10.510
estos elementos estarán en efectivo desde el principio.

20:10.510 --> 20:15.340
Así que podemos volver a una estrategia segura en la que solo los obtuvimos de allí.

20:15.340 --> 20:19.060
Estos tampoco son activos donde esperamos actualizaciones regulares.

20:19.210 --> 20:24.450
Por lo tanto, no es una mala práctica cuando no está mal solo obtenerlos del efectivo.

20:24.940 --> 20:32.150
Las cosas que queremos cobrar dinámicamente serían la página de Obert y es posible que la CSA como archivo que está usando la

20:32.210 --> 20:37.000
dinámica no nos vea como sigue, por ejemplo, que no forma parte de la estrategia.

20:37.330 --> 20:39.270
Cosas de efectivo aquí.

20:39.370 --> 20:42.120
Así que eso es exactamente lo que estamos buscando.

20:42.160 --> 20:50.430
Queremos asegurarnos de que todo lo que forma parte de esta matriz aquí esté cargado con una estrategia de efectivo solamente.

20:50.860 --> 21:01.450
Así que en Altes, si es el caso, aquí quiero buscar esta condición y, de hecho, compartí el fragmento de JavaScript en una expresión regular

21:01.480 --> 21:05.770
en las últimas conferencias en las que usamos solo deuda.

21:05.800 --> 21:08.920
Así que siéntete libre de simplemente reutilizar eso por supuesto.

21:08.960 --> 21:15.190
Allí simplemente creé una nueva expresión regular donde teníamos barra invertida barra diagonal inversa B.

21:15.700 --> 21:19.560
Entonces me uniría a mi matriz de tu otra cosa juntos.

21:19.660 --> 21:20.610
Así que haré eso.

21:20.620 --> 21:30.770
Son archivos estáticos de wups demasiado estáticos, tal vez solo sean matrices muertas. Aquí estamos pasando a usted.

21:30.880 --> 21:32.320
Vamos a guardarlo aquí.

21:33.330 --> 21:42.060
Y luego utilicemos caídas estáticas aquí para todos, pero también en la parte inferior aquí y aquí.

21:42.140 --> 21:45.710
Eres otra cosa si unirte a Gabber.

21:45.730 --> 21:51.500
Así que aquí queríamos unirnos con el símbolo de barra invertida de barra diagonal inversa.

21:51.650 --> 21:57.090
Así que era el símbolo incorrecto de la pipa del carácter barra invertida barra diagonal inversa B.

21:57.640 --> 22:05.750
Y luego agregue otro separador de palabras barra diagonal inversa barra diagonal inversa B y luego simplemente haga una prueba de

22:05.760 --> 22:07.530
cuándo solicitar su l.

22:07.640 --> 22:12.930
Esto descubrirá si su L en realidad contiene una de estas solicitudes.

22:12.970 --> 22:21.270
Ahora almacenamos estáticamente con la verificación de papá en su lugar. Podemos agregar a la estrategia de efectivo solamente aquí.

22:21.270 --> 22:23.970
Así que queremos responder con solo eso.

22:23.970 --> 22:33.480
Entonces, rápidamente agreguemos eso a su deuda similar y nos aseguramos de que todos estos archivos cobrados de manera estática sean directamente

22:33.480 --> 22:36.860
y solo se sirvan desde el caché.

22:37.320 --> 22:41.170
Volvamos a nuestra aplicación clara para el almacenamiento allí.

22:42.390 --> 22:44.120
Y recargarlo.

22:44.520 --> 22:46.560
Así que ahora ya estamos cargando de efectivo.

22:46.580 --> 22:53.760
Ahora en la red, vemos que en su mayoría estamos cargando cosas de nuestro trabajador de servicio.

22:53.760 --> 22:57.500
Pero también vemos que algunas cosas están fallando.

22:57.530 --> 23:03.660
Ahora, la razón de este comportamiento de que muchas cosas se cargan desde el registro de servicio,

23:03.660 --> 23:09.820
pero algunos archivos simplemente fallan, es simplemente la forma en que nos encontramos si la condición funciona aquí.

23:10.080 --> 23:14.540
Ahora mismo lo consume todo porque hay una cosa en esta matriz.

23:14.610 --> 23:17.440
Esta barra diagonal que es parte de cada u r l.

23:17.460 --> 23:22.010
Esta es la razón por la que esto es cierto para cada solicitud que eres, básicamente, todo lo que recibimos.

23:22.020 --> 23:30.450
Ahora, para solucionar este problema, elimine este término de solución aquí y simplemente agregue una función auxiliar que tenga todo

23:30.990 --> 23:33.940
el nombre en la matriz allí.

23:33.990 --> 23:39.320
Espero obtener una cadena y una matriz.

23:39.650 --> 23:44.750
Y allí, simplemente, puedo batir allí. Simplemente puedo recorrer la matriz para poder comprobar

23:44.750 --> 23:50.270
si var es igual a cero siempre que sea más pequeño que la longitud de la matriz.

23:50.300 --> 23:51.960
Quiero incrementar yo.

23:52.460 --> 23:56.200
Y luego puedo simplemente comprobar si la matriz.

23:56.660 --> 24:04.440
Así que el elemento en el que estoy actualmente es igual a la cadena, entonces quiero devolver verdadero.

24:04.860 --> 24:09.660
De lo contrario, si voy por todo el bucle sin un hit, todo devuelve falso.

24:09.750 --> 24:15.620
Así que ahora puedo usarlo en array aquí y simplemente pasar los dos pasé.

24:15.780 --> 24:22.220
Solicite su L como la palabra que quiero verificar y luego los archivos estáticos.

24:22.230 --> 24:28.570
Ahora, si hay un emplace con esta mejora aquí, debería poder volver a la aplicación aquí.

24:29.260 --> 24:36.290
Los látigos están vacíos de almacenamiento, recargue mi aplicación para instalar todo, recargue dos veces.

24:36.290 --> 24:44.830
Ahora puedo comenzar al menos de vuelta y con eso, si ahora vuelvo al modo fuera de línea, también funciona.

24:45.750 --> 24:51.420
Aquí puede ver que el caché gana en el caché y en la condición de la red, por lo que el cuadro es muy alto.

24:51.600 --> 24:53.100
Porque esto es justo lo que hacemos.

24:53.100 --> 24:57.110
Primero lo sacamos del caché y allí lo multiplicamos por 20.

24:57.120 --> 25:03.720
Recuerda que si vuelves al punto principal, James caerá aquí 20 años más tarde si obtuvo el pozo del cache y, por supuesto,

25:03.720 --> 25:07.870
si estamos fuera de línea no tendremos una oportunidad promedio de obtenerlo desde allí.

25:07.950 --> 25:14.140
Así que esto demuestra que todo esto funciona fuera de línea, así como el resto de nuestra aplicación aquí para volver a conectarse y

25:14.190 --> 25:15.230
volver a cargar.

25:15.510 --> 25:19.040
Bueno, entonces vemos el cuadro mucho más pequeño porque ahora la red gana.

25:19.110 --> 25:24.690
Y en la red vemos la mayor parte de la recuperación desde la memoria caché, excepto por nuestra dinámica en la

25:24.690 --> 25:29.600
que tenemos que almacenar en caché la condición de la red, por lo que la red debería ganar.

25:29.610 --> 25:35.540
Así que ahora todo está funcionando fue bastante trabajo, definitivamente no es un ejercicio fácil pero vale la pena.

25:35.580 --> 25:37.050
Y muy importante.

25:37.350 --> 25:41.370
Espero que aprendas mucho y definitivamente sigas practicando estas cosas.

25:41.370 --> 25:43.470
Solo puedo instarte a que lo hagas.

25:43.680 --> 25:46.210
Es muy importante entender las estrategias.

25:46.270 --> 25:48.290
Practícalos en tus propios proyectos.

25:48.360 --> 25:50.590
Entonces, ¿realmente te sientes seguro al usarlos?
