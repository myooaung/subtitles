WEBVTT

00:02.150 --> 00:06.640
Now after having a look at React, let's turn our heads towards Angular

00:06.980 --> 00:12.040
and here I actually do provide a starting application which you can find attached to this lecture.

00:12.170 --> 00:18.100
I use the CLI to create it, on the CLI Github page, you'll find the documentation how to use it,

00:18.110 --> 00:22.940
basically you install the CLI globally on your machine and then you can create a new project with

00:22.940 --> 00:30.680
these commands, again attached too, you find a project. You can then serve this by running ngServe in your

00:30.680 --> 00:32.450
terminal in this folder,

00:32.450 --> 00:36.430
so this would start a development server but it's not actually what I want to do right now.

00:36.650 --> 00:41.320
Instead for now, I want to turn this into a progressive web app.

00:41.510 --> 00:44.020
Now the application you have here is a super simple one,

00:44.090 --> 00:49.970
you have a main page with two routes and you can load two different pages for these routes, a blog and

00:49.970 --> 00:51.050
a users page

00:51.110 --> 00:53.390
though both are test dummy pages.

00:53.510 --> 01:01.870
I also have an import in index.html where I pull in Bootstrap 4 via CDN, so this is some external resource.

01:02.000 --> 01:07.960
Now preparing our Angular project to be a progressive web app is actually pretty simple.

01:08.130 --> 01:14.030
Create a React app, I created one out of the box, the Angular CLI doesn't do that, at least not at the point

01:14.030 --> 01:15.410
of time I'm recording this

01:15.410 --> 01:19.120
though I'm pretty sure they will do this too in the future.

01:19.280 --> 01:24.680
Until they do this, we can manually turn this into a progressive web app and that mostly means adding

01:24.680 --> 01:27.720
a manifest of course and adding service workers.

01:27.860 --> 01:29.960
Let's start with service workers,

01:29.990 --> 01:31.300
how does that work?

01:31.430 --> 01:33.650
A crucial step is to go to the angular-cli.json

01:33.670 --> 01:42.460
file and there in the apps configuration, in this first object here in the apps array,

01:42.710 --> 01:45.020
there you simply add a new key.

01:45.020 --> 01:49.890
You can add it anywhere here, you can add it as the first one or after the assets array, whatever you like

01:50.210 --> 01:55.680
and here I will simply name this service worker.

01:55.790 --> 01:58.710
The value of that then has to be true

01:58.850 --> 02:01.270
and don't forget to add a comma after it.

02:01.310 --> 02:06.200
Now this will basically tell the CLI that you want to create a service worker automatically through it,

02:06.620 --> 02:10.730
just like create React app which also created one automatically.

02:10.730 --> 02:12.460
That alone won't do it though,

02:12.560 --> 02:17.360
we don't just have to set the configuration up like this,

02:17.360 --> 02:23.680
we also have to install an extra package, so I'll quickly do that. For that I'll use the terminal, navigate it

02:23.690 --> 02:29.810
into this project folder and then npm to install that package. With npm install --save,

02:29.810 --> 02:35.200
I also save an entry in the package.json file and the package now is @Angular,

02:35.240 --> 02:41.900
so you can tell it's part of the official Angular suite kind of, though it's not the most active package

02:41.900 --> 02:43.000
at the moment,

02:43.010 --> 02:46.100
I guess it'll see more activity in the future though,

02:46.100 --> 02:52.630
anyways it's @angular/service-worker, simply hit enter to install that package.

02:52.670 --> 02:58.180
Now it will take a couple of seconds but it will download it and basically add it to your project.

02:58.190 --> 03:04.380
Now with this added, you can already run a production build and that's the important thing,

03:04.490 --> 03:09.680
it has to be a production build because service workers are only added in production versions by

03:09.680 --> 03:15.500
the CLI. With ngBuild, you can create a build and with --prod, you turn it into a production build,

03:15.590 --> 03:17.130
so everything gets optimized

03:17.300 --> 03:21.200
and as part of that, it also sets up a service worker.

03:21.380 --> 03:25.550
So let's wait for this to finish and let's see what the CLI gives us.

03:25.550 --> 03:29.240
It finished here and now we'll have this brand new dist folder.

03:29.330 --> 03:36.020
If we inspect it, we see that we have a file which sounds like it's related to service workers, that

03:36.020 --> 03:42.020
we get this service worker register file which is probably also related and we get this ngsw for

03:42.140 --> 03:47.480
Angular service worker manifest.json file. If we inspect the manifest, we see there are a couple of

03:47.480 --> 03:51.150
files in there and these are actually all our static assets,

03:51.200 --> 03:58.620
the assets the CLI automatically identified during the build process and just like sw precache or workbox

03:58.610 --> 04:02.290
also picked up all the assets and set them up for precaching,

04:02.310 --> 04:05.890
this is what the Angular service worker package does here too.

04:06.080 --> 04:11.930
It basically specifies that all these packages should be precached and it uses this hash here to track

04:11.930 --> 04:15.970
the version of that and it will basically change this whenever the package changes

04:15.980 --> 04:19.200
so that we always have an up-to-date version in the cache.

04:19.220 --> 04:22.510
Now service worker register will in the end just do that,

04:22.520 --> 04:28.820
register the service worker and worker basic is our service worker file, already managed and set

04:28.820 --> 04:31.340
up by the service worker package.

04:31.340 --> 04:35.840
So this is all the service worker stuff happening automatically.

04:35.840 --> 04:41.600
Now one thing we can see in this ngsw-manifest.json file is it added all the

04:41.600 --> 04:46.410
assets but we're missing external links, like for example our bootstrap import

04:46.460 --> 04:47.530
but that could be anything,

04:47.540 --> 04:48.340
could be fonts

04:48.360 --> 04:49.910
you're fetching from somewhere else,

04:50.090 --> 04:51.430
whatever it may be.

04:51.740 --> 04:57.890
It would also be nice if we could set up our own routes we can handle there, basically a bit like what

04:57.890 --> 04:59.470
we did with workbox.

04:59.610 --> 05:05.900
Now the cool thing as we can simply add a file in our root project directory, so directly in our main

05:05.910 --> 05:11.280
project directory next to package.json so to say and this file is also named 

05:11.280 --> 05:12.420
ngsw-manifest.json

05:12.540 --> 05:13.500
.

05:13.530 --> 05:14.610
.

05:14.620 --> 05:19.490
Now don't mistake this with the manifest.json file for creating a web app with an app installed

05:19.490 --> 05:20.420
banner,

05:20.430 --> 05:24.670
this is a config file for the Angular service worker package instead.

05:24.990 --> 05:30.600
So in this file, you can now set up some configuration for this package to use,

05:30.600 --> 05:35.240
for example you can add external dependencies with the external key.

05:35.250 --> 05:38.420
This takes a Javascript object and there you specify some

05:38.460 --> 05:42.380
URLs you also want to precache, a URL

05:42.390 --> 05:49.410
is basically a part in this array of URLs, a Javascript object and this has two elements or one element

05:49.410 --> 05:50.160
to be precise,

05:50.190 --> 05:54.370
a property of URL and then the actual URL.

05:54.390 --> 05:58.930
So for example here, I could fetch the URL leading to Bootstrap here.

05:58.980 --> 06:03.780
Now with that, I can copy it into here as a value for the URL property,

06:03.780 --> 06:06.900
all of that is of course written in the JSON format.

06:07.060 --> 06:08.610
Now that's external,

06:08.610 --> 06:11.870
sometimes you also have some files you don't want to precache,

06:12.180 --> 06:14.650
you can do this with static.ignore.

06:14.700 --> 06:20.630
This also takes an array and in this array, you simply add strings with regular expressions.

06:20.640 --> 06:25.880
So for example if you want to exclude all Javascript source maps, you can do \\.js\\.map$

06:25.880 --> 06:32.760
and this would simply execute all files ending with Javascript.map,

06:32.760 --> 06:33.390
so

06:33.510 --> 06:42.240
all Javascript source maps. The most interesting part about this configuration is the dynamic routing

06:42.270 --> 06:49.170
though, we can add the dynamic key here and that allows us to set up our own routes and the cache rules,

06:49.170 --> 06:54.330
the cache strategies for the assets fetched from these routes. In this object,

06:54.330 --> 06:58.250
we set up a group property and that takes an array

06:58.440 --> 07:04.380
and now here you can set up your different strategies for different URLs. In each object you add

07:04.380 --> 07:06.320
here inside the group array,

07:06.480 --> 07:11.110
you set up a name property and that basically is the name of the cache you want to use,

07:11.130 --> 07:17.790
for example posts images. Now we're not fetching any in this project but in our other, in our main project,

07:17.820 --> 07:18.370
we did.

07:18.540 --> 07:24.300
So this could be the cache name and then use set up the URLs which should be part of that rule

07:24.300 --> 07:31.710
so to say. URLs is again a Javascript object and there, you now simply have key-value pairs where the

07:31.710 --> 07:33.940
key is you your URL,

07:33.960 --> 07:43.380
for example it could be https, firebasestorage.googleapis.com/ and the value then is an

07:43.380 --> 07:46.390
object configuring this specific URL.

07:46.560 --> 07:51.810
The most important configuration here probably is the match key where you can for example set it to prefix

07:51.810 --> 07:55.770
to indicate every URL starting with this part 

07:55.770 --> 07:59.140
here should basically match this rule.

07:59.160 --> 08:04.550
The alternative would be exact or you could also set this to regex

08:04.650 --> 08:11.240
if you want to specify a regular expression up here, now I'll go back to prefix to basically say every

08:11.300 --> 08:14.780
URL starting with this should match this rule.

08:14.790 --> 08:17.310
Now what should then happen if this rule is matched?

08:17.610 --> 08:20.070
Well we know that we want to match

08:20.100 --> 08:23.640
this URL and we could add multiple ones, as a next step,

08:23.640 --> 08:28.120
we can set up the cache implications this has.

08:28.500 --> 08:33.880
So the most important thing here is optimize for which defines the strategy

08:33.940 --> 08:41.930
and here you can choose performance or freshness. Now freshness reaches out to a network first because

08:41.930 --> 08:45.270
it wants to get the freshest possible data

08:45.380 --> 08:50.210
whereas performance reaches out to the cache first to get something on the screen quickly.

08:50.630 --> 08:52.580
You can then also limit the age,

08:52.610 --> 08:54.030
for example max age

08:54.040 --> 08:59.330
milliseconds allows you to specify a value in milliseconds to define how long the cached value should

08:59.330 --> 09:00.100
be valid

09:00.440 --> 09:07.940
and max entries allows you to set the maximum number of entries stored for this rule.

09:08.030 --> 09:10.230
This is another important part.

09:10.350 --> 09:17.420
Now something else you may need to add if you are facing problems with routing is the routing key

09:17.420 --> 09:18.150
here.

09:18.440 --> 09:21.260
Routing also takes a Javascript object

09:21.500 --> 09:26.930
and here you can basically inform the service worker package about the routes you have in your application,

09:27.230 --> 09:32.830
so that when it's offline, it let's the Angular router do its job without interfering.

09:33.260 --> 09:36.400
For that, you will basically specify your index file,

09:36.440 --> 09:37.970
so /index.html

09:38.000 --> 09:42.740
in my case and then also the routes you have in your app and in the future, this will probably

09:42.740 --> 09:44.430
be fetched automatically.

09:44.600 --> 09:46.740
You might even not face these issues,

09:46.790 --> 09:50.090
I found that it's rather unstable because the project as a whole

09:50.120 --> 09:57.400
unfortunately as I said is not that actively developed right now but I'm sure it'll pick up soon

09:57.410 --> 10:01.670
since Google is the main driver behind progressive web apps anyways.

10:01.700 --> 10:03.810
So anyways back to this route.

10:04.010 --> 10:05.390
It doesn't hurt to set them up,

10:05.420 --> 10:11.890
so here you can specify the routes you have, for example slash and then you can define that here,

10:11.930 --> 10:15.240
this should only be treated as a prefix or not,

10:15.260 --> 10:19.060
in this case not, so it means we have an exact route which is just slash

10:19.220 --> 10:25.940
and we do in our application, that route, if we have a look at the routing module would lead to block component.

10:25.940 --> 10:33.000
I also have users in this application, so what I could add here too is another route, /users where

10:33.020 --> 10:35.530
I could say here it should be a prefix,

10:35.570 --> 10:40.860
it also is a full route in my case but I could have nested routes and all of them should also

10:40.880 --> 10:44.500
redirect to the index.html file so that this is always loaded,

10:44.540 --> 10:48.440
so that Angular always has a chance of taking over.

10:48.620 --> 10:53.060
This is basically the core configuration you may set up in this file.

10:53.070 --> 10:59.840
Now one other thing that's missing of course is the manifest.json file to get this app installed banner.

10:59.840 --> 11:06.260
You should add that in the assets folder because that is a folder Angular will copy over into the dist folder,

11:06.350 --> 11:12.560
if you added in your source folder, these files don't get copied over so the manifest.json file wouldn't

11:12.560 --> 11:14.480
make it into your build files.

11:14.600 --> 11:15.820
In assets it will,

11:15.950 --> 11:20.440
so there I'll add a manifest.json file

11:20.720 --> 11:22.640
and now we can add some content.

11:22.850 --> 11:28.600
Now there, I'll simply paste in the manifest.json file we have in our main project, maybe replace the

11:28.630 --> 11:31.720
name, Angular as PWA,

11:31.820 --> 11:33.770
so we have PWAngular

11:33.800 --> 11:37.200
I guess. The icons here are the icons

11:37.220 --> 11:42.130
I do have in my project, though I have them under assets icons now,

11:42.280 --> 11:44.490
so I need to replace this,

11:44.660 --> 11:55.310
this first part here should basically become /assets for all these icons. And then I correctly

11:55.310 --> 12:02.520
state the index.html as my starting page and all the other parts are also OK, maybe change the description, this is

12:02.680 --> 12:06.610
Angular as PWA. With all these changes in place,

12:06.710 --> 12:14.420
let's run build again with --prod to see if that all correctly makes it into our build folder,

12:14.700 --> 12:15.130
though

12:15.200 --> 12:18.140
I can cancel this because I forgot something important,

12:18.230 --> 12:20.980
of course the manifest file alone won't do anything,

12:21.020 --> 12:25.050
we have to import it in index.html, so let's add a link there too.

12:25.280 --> 12:32.390
We add a link which doesn't import a stylesheet but the manifest and then here we link to /assets

12:32.510 --> 12:35.670
/manifest.json.

12:35.750 --> 12:39.770
Now with that, we can trigger the build process and see what it spits out

12:39.950 --> 12:46.290
and of course you could add all the other made up properties for Safari and Internet Explorer here too.

12:46.400 --> 12:48.370
Now let's wait for this to finish

12:48.700 --> 12:50.760
and let's then send have a look at the dist folder.

12:51.430 --> 12:58.630
There you see the assets folder with the manifest and you'll also see the index.html file.

12:58.630 --> 13:04.890
Now let me serve this in production mode with --prod and let's see what this does.

13:06.300 --> 13:10.180
Here it warns us that we shouldn't use this as a production server and we shouldn't,

13:10.250 --> 13:11.970
it's only there for testing

13:12.260 --> 13:17.180
and I'm interested in seeing if we now correctly load our manifest and so on.

13:17.630 --> 13:19.640
So here on http://localhost:4200

13:19.640 --> 13:25.970
we can load our application, just to be super safe that I load the latest state I'll clear the storage

13:26.720 --> 13:30.690
and let's inspect the manifest. It correctly picked it up here,

13:30.770 --> 13:32.660
so there this is all looking good,

13:32.660 --> 13:40.280
we see our manifest as we did set it up and we also see that we have a cache storage there where we don't

13:40.280 --> 13:46.070
have anything stored in there but I believe that is a bug or it is because we just loaded this, we should

13:46.070 --> 13:48.820
be able to see more than nothing in this cache.

13:48.980 --> 13:51.030
For some reason, the cache here won't update

13:51.200 --> 13:55.700
but if I go to service worker in offline and I reload the application, you'll see it's still

13:55.700 --> 13:56.240
working,

13:56.240 --> 13:57.740
I could even navigate around,

13:57.800 --> 13:59.780
so it did obviously cache the things,

13:59.810 --> 14:01.980
we can check this if we go to the network,

14:02.030 --> 14:04.490
you see everything is loaded from the service worker here.

14:04.700 --> 14:09.950
So we do we have Angular loaded or driven by a service worker here even though it kind of seems a

14:09.950 --> 14:12.360
bit buggy, with the cache here

14:12.440 --> 14:13.630
it does cache it,

14:13.730 --> 14:15.360
it does use the service worker

14:15.680 --> 14:21.050
and with that, we got a set up where we use service workers in the Angular app. A bit clunky because support

14:21.080 --> 14:22.130
could be better

14:22.190 --> 14:24.770
and I'm sure support will be better in the future

14:24.890 --> 14:30.500
but already something you can work with and something you can build up on. Configure it to your needs,

14:30.500 --> 14:33.530
set up your own strategies in this file here

14:33.830 --> 14:37.980
and with that, turn your next Angular app into a progressive web app.
