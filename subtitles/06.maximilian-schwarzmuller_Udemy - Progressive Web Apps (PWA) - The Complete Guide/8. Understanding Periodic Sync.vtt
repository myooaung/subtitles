WEBVTT

00:02.220 --> 00:03.780
Thus far in this module,

00:03.780 --> 00:10.670
we had a look at background synchronization where we set up our own synchronization event and that then

00:10.710 --> 00:14.610
gets executed whenever we have connectivity again.

00:14.970 --> 00:21.660
Now I want to move on to another way of background synchronization which isn't implemented in any browser

00:21.750 --> 00:25.300
at the point of time I'm recording this but which will come in the future,

00:25.330 --> 00:26.480
periodic sync.

00:26.850 --> 00:28.920
Now it handles a different problem,

00:28.920 --> 00:35.400
we have our app and we have a server and periodic sync is all about getting data on a regular basis

00:35.400 --> 00:36.350
from the server.

00:36.450 --> 00:38.250
So it's not about sending data

00:38.250 --> 00:41.060
we try to send when we were offline,

00:41.070 --> 00:48.150
it's about getting data and this could be useful if we have some back-end. Imagine Twitter, the Twitter

00:48.150 --> 00:55.770
API where data changes frequently and it would be nice if our application could get updates in the background

00:55.980 --> 01:02.820
so that the next time the user opens our web app, it already has the fresh data, it doesn't need to fetch

01:02.820 --> 01:04.790
it at the point of time we start the app,

01:04.950 --> 01:09.090
that would of course be awesome because it would speed up our web application startup.

01:09.090 --> 01:15.150
Again, it's not supported by browsers yet but it will come in the future and it will work like this.

01:15.150 --> 01:19.030
We will register a periodic sync task with the service worker,

01:19.200 --> 01:23.720
so just like before, we registered sync, it would be periodic sync.

01:23.910 --> 01:30.680
There we also pass a schedule where we basically say, please update every hour or something like that

01:31.260 --> 01:37.840
and then this schedule will trigger the periodic sync event on the service worker to which we can listen

01:37.860 --> 01:41.470
with add event listener based on the schedule.

01:41.490 --> 01:47.350
So this now then makes the service worker reach out to the server and request new data.

01:47.660 --> 01:53.100
This is how it will work in the back and more information about this can be found in the article after

01:53.100 --> 01:53.880
this lecture.

01:53.970 --> 01:57.990
Again just because it's important, you can't use it yet, it's not supported by any browser

01:58.050 --> 02:03.390
but it will come in the future and it of course is a great addition because it makes sure that you

02:03.390 --> 02:06.430
can get data whilst your application is closed.

02:06.720 --> 02:11.400
And just because it's important, it's not related to connectivity issues at all,

02:11.430 --> 02:12.650
it's about fetching data

02:12.660 --> 02:14.280
even if your app is not opened.
