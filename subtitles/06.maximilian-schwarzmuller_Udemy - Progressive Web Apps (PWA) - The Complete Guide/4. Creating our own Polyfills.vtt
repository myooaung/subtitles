WEBVTT

00:02.280 --> 00:06.240
So in the last lecture, we set up some basic code to interact with the DOM,

00:06.250 --> 00:10.030
now let's do that and let's start displaying the camera.

00:10.150 --> 00:17.590
Now first of all, I can check if we have media devices in the navigator. Media devices is the API

00:17.590 --> 00:22.060
which gives us access to the device camera, also to the microphone by the way,

00:22.060 --> 00:23.630
so all the media input

00:23.650 --> 00:24.900
a device can generate

00:24.910 --> 00:29.180
and that typically is audio or video, video includes images.

00:29.260 --> 00:33.650
So this is the first thing and if we do support this, everything's fine

00:33.850 --> 00:39.790
but let's check the opposite, that we don't have it in the navigator. In this case, we can kind of create

00:39.850 --> 00:43.840
our own polyfill to extend the support a bit.

00:43.960 --> 00:50.440
Now before we do that, let's check the general support. If we access the media devices page on MDN and scroll

00:50.440 --> 00:51.070
down,

00:51.070 --> 00:54.970
we see that the support isn't that great, on mobile it's super bad.

00:55.150 --> 01:00.040
However it's one specific method that's interesting to us and that's get user media.

01:00.070 --> 01:06.640
Now if we visit that sub-page and that's the command we will use and we scroll to the bottom there to

01:06.820 --> 01:14.080
have a look at the browser support, we see it's OK in Chrome, Firefox and Edge, not supported in Safari, on

01:14.080 --> 01:15.860
mobile it's ok though,

01:15.870 --> 01:21.400
also Chrome supports it, not the very old versions but definitely the more later versions,

01:21.550 --> 01:25.540
so we can use it but there is no super broad support.

01:25.540 --> 01:32.980
Now there actually is an old method or there are some old methods some browsers implement and that's

01:32.980 --> 01:35.480
exactly what I want to leverage here.

01:35.650 --> 01:41.830
So we know that a given browser doesn't support media devices, we can in this case create our own media devices

01:41.830 --> 01:43.350
object on the navigator,

01:43.450 --> 01:44.290
that's Javascript,

01:44.290 --> 01:45.910
we can simply add a property.

01:45.910 --> 01:50.620
Keep in mind this property doesn't exist here because we check that first, so it doesn't exist,

01:50.800 --> 01:55.310
now we add it and we set it equal to an empty object.

01:55.330 --> 01:59.710
Now with that done, we have an empty object, doesn't do too much, right?

01:59.740 --> 02:03.970
So what we'll next do is, we'll fill this object with some life.

02:04.090 --> 02:05.230
Now as a next step,

02:05.240 --> 02:13.270
I'll add another if statement and check if navigator media devices and this will never fail because

02:13.330 --> 02:20.650
even browsers which don't support it natively now have at least an empty object, if that has the get user

02:20.680 --> 02:22.250
media property.

02:22.450 --> 02:28.360
So I'll say get user media is that in this media devices object.

02:28.360 --> 02:31.130
Now you might say what a dumb question

02:31.540 --> 02:32.700
and there's a typo,

02:32.890 --> 02:35.150
what a dumb question of course it isn't in there,

02:35.170 --> 02:36.590
it's an empty object.

02:36.870 --> 02:42.430
Yes that's the one we create for browsers which don't have media devices but of course this check here

02:42.430 --> 02:43.560
doesn't have to fail,

02:43.600 --> 02:47.790
for example in the latest versions of Chrome, we will have media devices in the navigator.

02:47.920 --> 02:50.590
So now we reach this and we checked the next thing, we have

02:50.620 --> 02:51.640
media devices,

02:51.700 --> 02:53.750
do we have get user media?

02:54.070 --> 02:55.230
And if 

02:55.330 --> 03:01.300
this is true, we won't enter this if statement, if it's false though and it will be false

03:01.300 --> 03:08.410
for this set up here of course, we can now implement our own solution, taking advantage of older camera

03:08.410 --> 03:12.040
access implementations we used in the past.

03:12.040 --> 03:18.580
So here we can then initialize navigator media devices which will exist on every navigator since we

03:18.580 --> 03:25.240
add it here and add our own get user media function eventually.

03:25.240 --> 03:31.690
So that is a function and the function takes some constraints as input. Constraint basically will

03:31.690 --> 03:32.200
be

03:32.290 --> 03:35.850
is it audio or is it video which we want to capture?

03:36.250 --> 03:40.000
This is basically rebuilding the native get user media function

03:40.000 --> 03:42.080
modern browsers have anyways.

03:42.460 --> 03:45.600
Now you might be scratching your head and saying that's nice,

03:45.610 --> 03:49.900
how are we now coding the whole camera access thing from scratch?

03:50.350 --> 03:51.870
The answer is No.

03:51.940 --> 03:58.240
Actually some older or other browsers have their own native implementations which pretty much do the

03:58.240 --> 04:05.770
same and we can bind them to this modern syntax so that in the rest of our application, we can only use

04:05.770 --> 04:07.310
that modern syntax.

04:07.630 --> 04:14.620
So I'll create a new variable which I'll name get user media, so this is not interfering with this property

04:14.620 --> 04:19.020
on a media devices and this variable now holds

04:19.150 --> 04:24.780
navigator webkit get user media which is Safari's implementation.

04:24.820 --> 04:33.790
You notice Safari doesn't support get user media, here, doesn't support it but it has its own

04:34.060 --> 04:39.580
implementation which it of course supports. So now we're binding this custom implementation to get user media

04:40.180 --> 04:43.440
or if that's undefined because maybe we are not using a web browser,

04:43.450 --> 04:44.860
we're not using Safari,

04:45.160 --> 04:52.840
maybe we're using Mozilla and there conveniently, we have must get user media.

04:53.290 --> 04:57.810
So now we try to bind either of the two hoping that we have a browser,

04:57.850 --> 05:02.650
if it doesn't support the modern syntax, it at least has its own implementation

05:02.650 --> 05:05.620
we can now bind to get user media here.

05:05.890 --> 05:11.550
Now with that set up, we can check if get user media is not true,

05:11.560 --> 05:16.730
so basically if this is undefined, we only get undefined here or null,

05:16.750 --> 05:24.210
so if this only returns true, so it's not set. If we neither can get access to webkit,

05:24.250 --> 05:27.170
user media normal Mozilla because either we're using another browser,

05:27.190 --> 05:32.500
maybe Internet Explorer, an older version which doesn't support get user media or we use as a Safari

05:32.500 --> 05:34.800
browser but just an older version too.

05:35.080 --> 05:41.060
So in this case, all hope is lost and all we can do is return a promise, why a promise? Because we want

05:41.060 --> 05:44.600
to rebuild this behavior,

05:44.860 --> 05:50.140
keep in mind we're still in that function, get user media, that get user media returns a promise because

05:50.140 --> 05:51.890
the modern get user media will,

05:51.910 --> 05:54.710
so our own custom implementation also has to

05:54.850 --> 05:58.740
and if we just can't get it to work, then this promise will simply reject.

05:58.990 --> 06:01.620
So here we return a promise which immediately rejects,

06:01.660 --> 06:07.390
that's just a shortcut and there we can throw a new error where we say get user

06:07.390 --> 06:16.570
media is not implemented and it will be in our duty to later handle this error and provide a fallback.

06:17.230 --> 06:19.290
If we make it past this if statement here

06:19.290 --> 06:22.420
though, we know we got get user media,

06:22.450 --> 06:26.200
now we have our own get user media function here which we can use.

06:26.200 --> 06:32.500
So here we also return a new promise because again, get user media, the modern implementation returns one,

06:32.530 --> 06:34.090
so our custom one should do so

06:34.090 --> 06:38.200
too, this promise will resolve or reject

06:38.470 --> 06:42.450
and actually it of course will resolve. 

06:42.700 --> 06:44.290
We call get user media,

06:44.350 --> 06:50.560
so our variable which stores this native implementation of the individual browsers, either of webkit or

06:50.560 --> 06:51.630
Mozilla

06:51.880 --> 06:56.860
and I use the Javascript call method to basically alter the way this will be called.

06:57.280 --> 07:02.890
I'll call it on the navigator by passing navigator in there, so that this inside get user media refers

07:02.910 --> 07:08.490
to the navigator. I'll pass the constraints as arguments and resolve and reject,

07:08.530 --> 07:16.270
so that in the end whenever we call get user media here on media devices, we call that function and

07:16.270 --> 07:22.090
in that function in the end, we return a promise which will automatically resolve the result of get user media

07:22.180 --> 07:26.330
which is this custom implementation of either webkit or Mozilla.

07:26.710 --> 07:31.660
And just keep in mind, we only do this if we're on a browser which doesn't have the modern,

07:31.830 --> 07:32.920
the nowadays

07:32.920 --> 07:36.460
valid implementation of media devices.

07:36.580 --> 07:40.310
So that was a lot of code to create this own polyfill,

07:40.330 --> 07:47.260
so our general fallback code for browsers which don't support the modern syntax of get user media. In the

07:47.260 --> 07:53.620
next lecture, we'll now use this or the modern syntax because we use the same name, so we don't care from

07:53.620 --> 08:00.840
this point on and we'll actually get access to the camera, or not, in which case we'll display a fallback,

08:00.910 --> 08:01.840
our image picker.
