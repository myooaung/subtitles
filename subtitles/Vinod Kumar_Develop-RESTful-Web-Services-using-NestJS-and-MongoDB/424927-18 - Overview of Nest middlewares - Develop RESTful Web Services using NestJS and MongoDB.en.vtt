WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.430
middleware is a function which is called before the road handler.

00:00:04.430 --> 00:00:08.320
Middleweight functions have access to the request object response.

00:00:08.320 --> 00:00:10.590
Object on the reference your function,

00:00:10.590 --> 00:00:16.180
generally called as next which can be used toe in with the next middleware function if

00:00:16.180 --> 00:00:16.830
available,

00:00:16.830 --> 00:00:20.750
are the target controller in the applications request response cycle.

00:00:20.750 --> 00:00:23.430
If you are familiar with express Js,

00:00:23.430 --> 00:00:26.340
then a nest middleware is identical.

00:00:26.340 --> 00:00:27.140
Toe Express.

00:00:27.140 --> 00:00:32.420
Middle Way America can be used to execute any kind of court before the request,

00:00:32.420 --> 00:00:34.250
which is the actual controller.

00:00:34.250 --> 00:00:38.250
It can also make changes to the request or response objects.

00:00:38.250 --> 00:00:41.450
Our end the request response lifecycle itself.

00:00:41.450 --> 00:00:44.800
If the middle does not end the request response cycle,

00:00:44.800 --> 00:00:50.280
it must call the next function which passes the control to the next available middle.

00:00:50.280 --> 00:00:52.350
Where are the intended controller?

00:00:52.350 --> 00:00:57.620
Most common Use off middle where are logging the incoming request Details.

00:00:57.620 --> 00:00:58.580
Adding additional.

00:00:58.580 --> 00:00:59.570
Http response.

00:00:59.570 --> 00:01:03.050
Headers Checking for authorization header In the request,

00:01:03.050 --> 00:01:08.970
you may implement a customer anywhere in either a function are in a class with an

00:01:08.970 --> 00:01:10.650
illiterate injectable decorator.

00:01:10.650 --> 00:01:14.600
The class should implement an interface called ness middleware,

00:01:14.600 --> 00:01:18.050
while the function doesn't have any set special requirements.

00:01:18.050 --> 00:01:20.220
If you're implementing the middle where,

00:01:20.220 --> 00:01:20.560
where?

00:01:20.560 --> 00:01:21.390
A class.

00:01:21.390 --> 00:01:25.640
Then you may also ask for additional dependencies in the constructor,

00:01:25.640 --> 00:01:28.350
just like how we did in the case off controllers,

00:01:28.350 --> 00:01:33.850
although in the documentation it is mentioned that the middleware class must be decorated

00:01:33.850 --> 00:01:35.100
us at injectable,

00:01:35.100 --> 00:01:40.350
there is no place for a middle way in the act model decorator like services.

00:01:40.350 --> 00:01:41.430
Instead,

00:01:41.430 --> 00:01:45.650
we set them up using the conficker function off the model class.

00:01:45.650 --> 00:01:50.210
Now that we have a fair idea about middle bit in the next lecture,

00:01:50.210 --> 00:01:55.250
let's create and set up a middleware toe logged the incoming requests for our contacts

00:01:55.250 --> 00:01:55.850
controller.

