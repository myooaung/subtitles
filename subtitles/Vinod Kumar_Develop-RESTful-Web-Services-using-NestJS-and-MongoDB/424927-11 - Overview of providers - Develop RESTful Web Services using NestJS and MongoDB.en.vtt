WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.520
in this lecture,

00:00:01.520 --> 00:00:06.990
let's discuss about providers which are a fundamental on an important concept in nest.

00:00:06.990 --> 00:00:10.150
Many of the basic next classes may be treated as a provider,

00:00:10.150 --> 00:00:11.370
for example,

00:00:11.370 --> 00:00:13.050
services repositories,

00:00:13.050 --> 00:00:13.670
factories,

00:00:13.670 --> 00:00:14.790
helpers and so on.

00:00:14.790 --> 00:00:18.830
The main idea off a provider is that it can injured dependencies,

00:00:18.830 --> 00:00:22.720
which means objects can create various relationships with each other,

00:00:22.720 --> 00:00:27.730
and the function off winding up off objects can largely be delegated to the Nestor runtime

00:00:27.730 --> 00:00:28.240
system.

00:00:28.240 --> 00:00:33.270
A provider is simply a class annotated with an at injectable decorator.

00:00:33.270 --> 00:00:34.940
In the previous lectures,

00:00:34.940 --> 00:00:40.030
we built a simple contacts controller controller should be limited toe handle.

00:00:40.030 --> 00:00:41.670
Http requests alone.

00:00:41.670 --> 00:00:45.330
Andi should delegate more complex US to the providers.

00:00:45.330 --> 00:00:48.780
This brings one of the most powerful design principles.

00:00:48.780 --> 00:00:49.610
Your application,

00:00:49.610 --> 00:00:51.640
which is called Separation of Concerns.

00:00:51.640 --> 00:00:57.640
Nest is built around the strong design pattern commonly known as dependency injection in

00:00:57.640 --> 00:00:58.090
nest.

00:00:58.090 --> 00:00:59.730
Thanks to typescript capabilities,

00:00:59.730 --> 00:01:01.810
it is extremely easy to manage.

00:01:01.810 --> 00:01:05.230
Dependence is because they are result just by type.

00:01:05.230 --> 00:01:06.990
In the example shown here,

00:01:06.990 --> 00:01:12.680
Nest will resolve the contact salaries by creating onder returning an instance of context

00:01:12.680 --> 00:01:14.330
at risk class are,

00:01:14.330 --> 00:01:18.240
in the normal case of Singleton returning an existing instance,

00:01:18.240 --> 00:01:20.660
if it has already been requested elsewhere,

00:01:20.660 --> 00:01:23.030
providers normally have a lifetime,

00:01:23.030 --> 00:01:26.870
also known as a scope synchronized with the application life cycle.

00:01:26.870 --> 00:01:30.600
The default scope of a provider Instances called Singleton,

00:01:30.600 --> 00:01:33.840
which means a single instance of the product class,

00:01:33.840 --> 00:01:36.330
is shared across the entire application.

00:01:36.330 --> 00:01:40.530
The instance Lifetime is tied directly to the application life cycle.

00:01:40.530 --> 00:01:43.050
Once the application has boots stopped,

00:01:43.050 --> 00:01:48.670
all the singleton providers have Bean instance created on these proto instances will only

00:01:48.670 --> 00:01:51.020
be destroyed when the application shuts down.

00:01:51.020 --> 00:01:52.160
However,

00:01:52.160 --> 00:01:56.510
it is possible to make the scope of a provider instance request to scoped as well.

00:01:56.510 --> 00:02:01.740
A new instance of the provided is created exclusively for each incoming request.

00:02:01.740 --> 00:02:02.960
On the instances,

00:02:02.960 --> 00:02:07.970
garbage collected after the request has completed processing on the responses given back to

00:02:07.970 --> 00:02:08.520
the plate.

00:02:08.520 --> 00:02:12.410
Using singleton scope is recommended for most use cases.

00:02:12.410 --> 00:02:17.690
Shading provided across consumers on across request means that on instance,

00:02:17.690 --> 00:02:23.050
can be cashed on its initialization because only once during the application startup.

00:02:23.050 --> 00:02:27.080
The technique we have used so far is called constructor based injection.

00:02:27.080 --> 00:02:28.680
Since the Providence R,

00:02:28.680 --> 00:02:32.380
injected by the constructor in some very specific cases,

00:02:32.380 --> 00:02:35.390
a property based injection might also be useful.

00:02:35.390 --> 00:02:36.620
For instance,

00:02:36.620 --> 00:02:40.550
if your top level class depends on either one or more providence,

00:02:40.550 --> 00:02:46.020
passing them on the way up by calling Super in the sub classes from the constructor can be

00:02:46.020 --> 00:02:46.840
very tedious.

00:02:46.840 --> 00:02:51.170
Take a look at this example where class has to dependencies.

00:02:51.170 --> 00:02:51.880
Service X.

00:02:51.880 --> 00:02:52.680
Enter his wife.

00:02:52.680 --> 00:02:55.830
If you create a subclass for Class K,

00:02:55.830 --> 00:02:59.840
let's a Class B which has a dependency off Servizi.

00:02:59.840 --> 00:03:01.890
Then in it's constructor,

00:03:01.890 --> 00:03:03.850
you have to ask for service,

00:03:03.850 --> 00:03:06.200
tax and service by along with Servizi.

00:03:06.200 --> 00:03:07.890
Since in JavaScript,

00:03:07.890 --> 00:03:11.480
a subclass constructor must involve the super plus constructor.

00:03:11.480 --> 00:03:13.590
I seen the super class constructor,

00:03:13.590 --> 00:03:14.170
high salaries,

00:03:14.170 --> 00:03:14.570
accents,

00:03:14.570 --> 00:03:16.020
every square as dependencies.

00:03:16.020 --> 00:03:19.470
You must to supply the same to the super class constructor as well.

00:03:19.470 --> 00:03:21.110
In order to avoid this,

00:03:21.110 --> 00:03:25.550
you can use inject decorator at the property level in the subclass.

00:03:25.550 --> 00:03:29.010
Since there is no constructor in Class B,

00:03:29.010 --> 00:03:33.860
there is no need to in work super class constructor and hence there is no need to possible

00:03:33.860 --> 00:03:34.970
class dependencies.

00:03:34.970 --> 00:03:39.720
Now that we have defined a provider and we have a consumer off that service,

00:03:39.720 --> 00:03:44.810
we need to register the service with nest so that it can perform the dependency injection

00:03:44.810 --> 00:03:45.650
wherever required.

00:03:45.650 --> 00:03:48.700
We do this by editing or model file.

00:03:48.700 --> 00:03:49.740
For example,

00:03:49.740 --> 00:03:53.800
Abdullah Module 30 years or contact start model Dirty s.

00:03:53.800 --> 00:03:59.880
And I didn't this Aries to the protests are off the act module decorator with this idea

00:03:59.880 --> 00:04:00.880
about providers.

00:04:00.880 --> 00:04:04.560
Let's create our contact service in the next lecture,

00:04:04.560 --> 00:04:06.150
along with its basic set up.

