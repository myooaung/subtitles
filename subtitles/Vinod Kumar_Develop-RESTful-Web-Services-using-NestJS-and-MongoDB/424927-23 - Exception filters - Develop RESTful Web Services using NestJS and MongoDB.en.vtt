WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.040
nest comes with a built in exception layer,

00:00:03.040 --> 00:00:08.160
which is responsible for processing all unhand ill exceptions across the application.

00:00:08.160 --> 00:00:13.050
We saw both those standard exceptions and custom exceptions in the previous couple of

00:00:13.050 --> 00:00:13.740
lectures.

00:00:13.740 --> 00:00:19.150
While the building exception filter can automatically handle many cases for you,

00:00:19.150 --> 00:00:22.320
you may want full control over the exception layer.

00:00:22.320 --> 00:00:23.190
Sometimes,

00:00:23.190 --> 00:00:24.160
for example,

00:00:24.160 --> 00:00:29.920
you may want to add logging or use a different Jason Schema based on some dynamic factors.

00:00:29.920 --> 00:00:33.880
Exception Filters are designed exactly for this purpose.

00:00:33.880 --> 00:00:39.830
They let you control the exact to flow off control on the content of the response sent back

00:00:39.830 --> 00:00:40.490
to the plaint.

00:00:40.490 --> 00:00:41.900
In this lecture,

00:00:41.900 --> 00:00:46.660
let's create an exception filter that is responsible for catching exceptions,

00:00:46.660 --> 00:00:52.290
which are the instance of the http exception class on implementing custom response logic

00:00:52.290 --> 00:00:52.890
for them.

00:00:52.890 --> 00:00:56.740
To do this will need to access the underlying platforms.

00:00:56.740 --> 00:00:58.550
Request and Response object,

00:00:58.550 --> 00:01:00.740
which comes from express model,

00:01:00.740 --> 00:01:05.530
will access the request object so that we can put the original you are early on.

00:01:05.530 --> 00:01:07.470
Include that in the logging information.

00:01:07.470 --> 00:01:11.110
We'll access the request objects so we can pull the original.

00:01:11.110 --> 00:01:16.120
You are all on include that in the logging information and we lose the response object to

00:01:16.120 --> 00:01:21.100
take direct control off the response that is going to be sent using the response toward

00:01:21.100 --> 00:01:22.000
Jason mattered.

00:01:22.000 --> 00:01:27.140
So the first thing we have to do is to create a class that implements exception filter,

00:01:27.140 --> 00:01:30.650
which must implement a function called Catch.

00:01:30.650 --> 00:01:36.430
So let's goto our SRC folder Onda create a new file on.

00:01:36.430 --> 00:01:44.170
I'm gonna call this as my custom exception dot filter dirty s a press enter and then I'm

00:01:44.170 --> 00:01:51.930
going to say export class my custom exception filter implements exception filter.

00:01:51.930 --> 00:01:54.080
So as you can see exception,

00:01:54.080 --> 00:01:56.360
Fielder comes from this chase common Andi.

00:01:56.360 --> 00:02:01.740
It also comes with an error because the class must implement the method defining this

00:02:01.740 --> 00:02:07.120
interface so you can go here and then press command dot on mac control dot on windows and

00:02:07.120 --> 00:02:07.670
leaners.

00:02:07.670 --> 00:02:10.740
You'll get that implement interface suggestion.

00:02:10.740 --> 00:02:11.680
Select the same.

00:02:11.680 --> 00:02:16.400
You can see that the catch function comes with two parameters.

00:02:16.400 --> 00:02:18.160
Number one is the exception.

00:02:18.160 --> 00:02:23.380
The exception is going to be the object that is going to be received depending on your

00:02:23.380 --> 00:02:24.220
configuration.

00:02:24.220 --> 00:02:29.050
The host is an object off type called arguments host,

00:02:29.050 --> 00:02:31.870
through which we can get different context.

00:02:31.870 --> 00:02:32.670
For example,

00:02:32.670 --> 00:02:36.850
if you're using this in an http or a Web socket.

00:02:36.850 --> 00:02:39.280
They're depending on your applications requirement.

00:02:39.280 --> 00:02:42.160
You can choose the Pont takes and get the relevant information.

00:02:42.160 --> 00:02:44.040
So we're going to see that in eminent.

00:02:44.040 --> 00:02:46.570
But we don't want this kind off imports.

00:02:46.570 --> 00:02:49.160
I'm going to remove this from here bigger and other,

00:02:49.160 --> 00:02:51.710
saying that arguments host is not defined.

00:02:51.710 --> 00:02:53.520
So we simply have to press again,

00:02:53.520 --> 00:02:54.220
commander,

00:02:54.220 --> 00:02:55.270
or controlled out.

00:02:55.270 --> 00:03:00.150
And then add this to the already existing nest Jay's common imports.

00:03:00.150 --> 00:03:05.750
One more thing that we have to do before we actually called our logic is to say what kind

00:03:05.750 --> 00:03:09.170
of exceptions this filter is supposed to handle on.

00:03:09.170 --> 00:03:11.970
Do we need to do a mapping with an exception?

00:03:11.970 --> 00:03:12.290
Plus,

00:03:12.290 --> 00:03:15.240
by using accurate catch decorator again,

00:03:15.240 --> 00:03:18.090
it is coming from the nest Js common here.

00:03:18.090 --> 00:03:21.790
We're going to specify one or more exception data types.

00:03:21.790 --> 00:03:22.620
Right now,

00:03:22.620 --> 00:03:25.720
I want to handle all kinds of standard exception.

00:03:25.720 --> 00:03:28.070
So I'm going to simply say here http,

00:03:28.070 --> 00:03:28.800
exception.

00:03:28.800 --> 00:03:34.340
Which means that the object I'm gonna receive here is always going to be off type http.

00:03:34.340 --> 00:03:38.000
Exception are one off its subtype so we can start over,

00:03:38.000 --> 00:03:40.820
go and say that this is nothing but an http exception.

00:03:40.820 --> 00:03:42.760
We don't want this throw statement,

00:03:42.760 --> 00:03:49.080
but instead we want toe respond to the user with their customized Jason information.

00:03:49.080 --> 00:03:52.070
So to send the actual response directly,

00:03:52.070 --> 00:03:57.020
we need the response object which can be obtained from this particular host.

00:03:57.020 --> 00:03:59.850
So the way you do is you first get the context.

00:03:59.850 --> 00:04:02.330
So I'll say here const City X,

00:04:02.330 --> 00:04:07.230
which is not the model context on their host to dot switch on.

00:04:07.230 --> 00:04:10.320
You can see that there is a two x TTP to RPC,

00:04:10.320 --> 00:04:12.690
and then there is a two web sockets.

00:04:12.690 --> 00:04:17.960
I'm going to select that to Http Now I got the context and from the context,

00:04:17.960 --> 00:04:19.710
I can get the request.

00:04:19.710 --> 00:04:23.050
I'd say city extort get requests like this,

00:04:23.050 --> 00:04:26.920
and then it's a constant response equals two city extort.

00:04:26.920 --> 00:04:28.480
Get response.

00:04:28.480 --> 00:04:31.110
I noticed that the return barely off.

00:04:31.110 --> 00:04:33.620
This comes as an ordinary object.

00:04:33.620 --> 00:04:35.790
So when I type your arctic your dot,

00:04:35.790 --> 00:04:37.220
I may not get any intel.

00:04:37.220 --> 00:04:37.930
Instance.

00:04:37.930 --> 00:04:38.640
However,

00:04:38.640 --> 00:04:40.300
if you want to get the intelligence,

00:04:40.300 --> 00:04:43.330
then you may also say that the request,

00:04:43.330 --> 00:04:44.160
whatever comes,

00:04:44.160 --> 00:04:47.890
must be costed toe the requested A from express.

00:04:47.890 --> 00:04:48.660
So to do that,

00:04:48.660 --> 00:04:51.170
I'll simply have to give here the syntax,

00:04:51.170 --> 00:04:55.220
the generates that I'm gonna use and say that data date that is going to be used this

00:04:55.220 --> 00:04:58.010
request coming from Express.

00:04:58.010 --> 00:05:02.570
You concede that the request is coming from different interfaces on the one that I want is

00:05:02.570 --> 00:05:08.420
from express the 3rd 1 here the same way I have to do it for this as well.

00:05:08.420 --> 00:05:10.630
This is gonna be the response on.

00:05:10.630 --> 00:05:11.180
Once again,

00:05:11.180 --> 00:05:14.350
Respond is supposed to be taken from the Express.

00:05:14.350 --> 00:05:14.960
Now,

00:05:14.960 --> 00:05:16.260
if I say request,

00:05:16.260 --> 00:05:21.530
start and you can see I get the intelligence response dot I get all the functions and

00:05:21.530 --> 00:05:22.690
attributes of the same.

00:05:22.690 --> 00:05:27.130
Now let's prepare our actual response to be given to do that,

00:05:27.130 --> 00:05:29.200
I'll say rest our status.

00:05:29.200 --> 00:05:32.860
This is the stages number like 200 fortnight for etcetera.

00:05:32.860 --> 00:05:38.940
I just want to borrow that from the It's TDP exception I got so I can simply say status,

00:05:38.940 --> 00:05:42.250
which is nothing but exception dot get status.

00:05:42.250 --> 00:05:46.250
So this will automatically get the status from the got an exception.

00:05:46.250 --> 00:05:51.800
But then I also want to send a Jason or put So there is a function called Jason,

00:05:51.800 --> 00:05:54.640
which takes the JavaScript object converts that into it.

00:05:54.640 --> 00:05:59.930
Jason acts the http header called content ICT application slash x Similar.

00:05:59.930 --> 00:06:00.670
That's value.

00:06:00.670 --> 00:06:02.880
So here is where I want to say times.

00:06:02.880 --> 00:06:03.180
Time,

00:06:03.180 --> 00:06:04.030
for example,

00:06:04.030 --> 00:06:09.460
is nothing but new date dot toe eso string like we used earlier.

00:06:09.460 --> 00:06:12.790
We can also send some message back to the user.

00:06:12.790 --> 00:06:13.720
For example,

00:06:13.720 --> 00:06:16.450
the message may be coming from the exception itself.

00:06:16.450 --> 00:06:18.800
Exception dot message.

00:06:18.800 --> 00:06:24.330
You can also are the original You are that caused the problem so I can say her part is

00:06:24.330 --> 00:06:30.250
nothing but are acute or you are on any additional court that you understand you can add

00:06:30.250 --> 00:06:30.570
here.

00:06:30.570 --> 00:06:31.800
So I lied one last,

00:06:31.800 --> 00:06:36.560
which is nothing but does status scored exception dot get status.

00:06:36.560 --> 00:06:42.650
Let's put a semicolon over here on our custom exception filter is ready,

00:06:42.650 --> 00:06:46.050
we know have to tell the next year's when to use the same.

00:06:46.050 --> 00:06:51.460
We can use it at a given function level or a handler level.

00:06:51.460 --> 00:06:58.550
All we can use it at the entire controller level are if you have multiple controllers and

00:06:58.550 --> 00:07:01.700
you want that to be used across all the controllers,

00:07:01.700 --> 00:07:03.760
then you can specify the AP level.

00:07:03.760 --> 00:07:05.850
So let's check one by one.

00:07:05.850 --> 00:07:11.240
I'm gonna write one simple handler here which is nothing but a hollow message and simply

00:07:11.240 --> 00:07:14.580
going to throw a forbid an exception without doing anything.

00:07:14.580 --> 00:07:15.890
So I'll say hello.

00:07:15.890 --> 00:07:18.770
Throw new forbidden exception.

00:07:18.770 --> 00:07:19.150
Remember,

00:07:19.150 --> 00:07:22.520
this is one of those standard exceptions on I'll simply map this year,

00:07:22.520 --> 00:07:24.900
part called Get Slashed.

00:07:24.900 --> 00:07:25.450
Hello.

00:07:25.450 --> 00:07:32.570
So if I go to the postman and then say here slash Hello here after local host Fritos and

00:07:32.570 --> 00:07:35.320
Slash this is coming back with an exception,

00:07:35.320 --> 00:07:37.750
because I'm throwing a forbid an exception.

00:07:37.750 --> 00:07:40.230
There is a state of sport 40 tree.

00:07:40.230 --> 00:07:41.610
There's a message forbidden.

00:07:41.610 --> 00:07:43.660
The same thing is visible here Also,

00:07:43.660 --> 00:07:44.790
however,

00:07:44.790 --> 00:07:47.500
I want to make use off this custom exception.

00:07:47.500 --> 00:07:51.250
Filter on to do that at a unusual handler level,

00:07:51.250 --> 00:07:58.960
you can simply are here at the rate use filters on then supply one arm or filter class are

00:07:58.960 --> 00:08:01.680
filter object so I can stay here.

00:08:01.680 --> 00:08:05.310
My custom exception filter Neiffer.

00:08:05.310 --> 00:08:07.620
Go back and send the same request again.

00:08:07.620 --> 00:08:11.230
You can see that I know how the times time,

00:08:11.230 --> 00:08:11.970
the message.

00:08:11.970 --> 00:08:16.220
The part on the state of scored all of them in a custom Jason here.

00:08:16.220 --> 00:08:17.070
However,

00:08:17.070 --> 00:08:21.390
if I go and change from hello toe little for example,

00:08:21.390 --> 00:08:24.650
john dot txt and the file doesn't exist.

00:08:24.650 --> 00:08:26.890
This is the other message we're getting.

00:08:26.890 --> 00:08:27.700
However,

00:08:27.700 --> 00:08:32.330
if I want to make it off my custom filter across my controllers,

00:08:32.330 --> 00:08:38.370
I can go to my court and then shift this line from the function to the actual class.

00:08:38.370 --> 00:08:40.430
So if I go back over here on,

00:08:40.430 --> 00:08:41.820
then send it now,

00:08:41.820 --> 00:08:47.850
you'll see that we get the exact same style of response even for this request.

00:08:47.850 --> 00:08:48.770
Similarly,

00:08:48.770 --> 00:08:53.320
if I simply access local host 3000 without the authorization token,

00:08:53.320 --> 00:08:58.990
you can still see that the details are in the same style as the previous one.

00:08:58.990 --> 00:09:03.350
So our custom filter is applicable for the entire controller.

00:09:03.350 --> 00:09:06.350
If I have a different controller and in that controller,

00:09:06.350 --> 00:09:07.680
I have a handler function,

00:09:07.680 --> 00:09:08.890
which throws an exception.

00:09:08.890 --> 00:09:11.750
This custom filter will not be applicable.

00:09:11.750 --> 00:09:18.450
If you want our custom exception filter to be applicable globally toward the application,

00:09:18.450 --> 00:09:24.350
Then we can go to the main dirty years where we have created our application as AP,

00:09:24.350 --> 00:09:27.290
and then we can register Abd art,

00:09:27.290 --> 00:09:32.950
use global filters and then supply my custom exception filter.

00:09:32.950 --> 00:09:35.140
But this one doesn't take a class.

00:09:35.140 --> 00:09:40.920
It takes an objects allowed to say your new my custom filter with the brackets as

00:09:40.920 --> 00:09:41.630
constructor.

00:09:41.630 --> 00:09:45.620
Now that I have you in the my custom exception filter globally here,

00:09:45.620 --> 00:09:49.390
I don't need to give it in my control load so I can get it off this from here.

00:09:49.390 --> 00:09:50.690
So I'm gonna delete that line,

00:09:50.690 --> 00:09:52.490
go back to the browser,

00:09:52.490 --> 00:09:53.990
make a request again.

00:09:53.990 --> 00:09:55.780
You can see slash 3000.

00:09:55.780 --> 00:09:58.190
I get that exception in this time.

00:09:58.190 --> 00:10:00.480
I goto john dot txt,

00:10:00.480 --> 00:10:01.650
which doesn't exist,

00:10:01.650 --> 00:10:03.380
and others are in the same style.

00:10:03.380 --> 00:10:05.150
I also go toe hollow,

00:10:05.150 --> 00:10:07.510
which is throwing a forbidden exception.

00:10:07.510 --> 00:10:09.720
The same thing I get once again.

00:10:09.720 --> 00:10:16.100
One last point I want to mention here is that except in the main dirty is were we created

00:10:16.100 --> 00:10:17.280
an object here.

00:10:17.280 --> 00:10:18.700
The rest of the places,

00:10:18.700 --> 00:10:24.480
like in the control of classes or in the handler level regionally give the class.

00:10:24.480 --> 00:10:25.360
However,

00:10:25.360 --> 00:10:26.850
we can also given object.

00:10:26.850 --> 00:10:29.460
But according to Nestor documentation,

00:10:29.460 --> 00:10:35.610
we have toe prefer applying filters by using the classes Insel off instances when possible

00:10:35.610 --> 00:10:35.610
,

00:10:35.610 --> 00:10:41.720
it reduces memory usage since nest can easily reuse instances of the same class across your

00:10:41.720 --> 00:10:42.540
entire model

