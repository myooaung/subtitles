0
1
00:00:02,840 --> 00:00:09,860
The goal of this video is to introduce you a little bit more to the sympy module and integrating
1

2
00:00:09,860 --> 00:00:11,980
sympy with latex.
2

3
00:00:12,020 --> 00:00:17,750
So this goes a little bit beyond what I showed you in the past couple of videos and it will give you
3

4
00:00:17,750 --> 00:00:24,800
a bit more experience and more comfort with working with symbolic variables and printing out nice looking
4

5
00:00:24,800 --> 00:00:28,400
equations in a python notebook.
5

6
00:00:28,400 --> 00:00:33,050
So let's just immediately switch to Python and get started.
6

7
00:00:33,050 --> 00:00:43,100
So we start of course by importing the sympy module, so I'm going to say import sympy as sym.
7

8
00:00:43,130 --> 00:00:43,400
All right.
8

9
00:00:43,400 --> 00:00:49,010
Now I press controlled enter to run this cell and give me a new cell below it.
9

10
00:00:49,490 --> 00:00:56,660
So in the last video, or I guess it was two videos ago, I showed you how to create a single symbolic variable.
10

11
00:00:56,660 --> 00:01:01,120
It was something like this, sym dot symbols and then with an X.
11

12
00:01:01,190 --> 00:01:02,270
So that's fine.
12

13
00:01:02,270 --> 00:01:09,440
And what I'm going to show you here is that you are not limited to just using single letters like this.
13

14
00:01:09,440 --> 00:01:15,920
In particular, I'm going to show you using Greek characters as variable names, so let's say we have mu
14

15
00:01:16,280 --> 00:01:20,990
Alpha and Sigma and then they need to be called the corresponding things here.
15

16
00:01:20,990 --> 00:01:26,710
So mu, Alpha, Sigma. And now we can run this code.
16

17
00:01:26,750 --> 00:01:34,190
And now we get three new variables in the workspace, so I can now use these as symbolic variables so
17

18
00:01:34,190 --> 00:01:39,330
for example let's say we want to have an expression that's e to the something.
18

19
00:01:39,410 --> 00:01:46,580
So I'm going to say in this symbolic tool box the function for the natural exponent e and if you're
19

20
00:01:46,580 --> 00:01:51,830
not familiar with the natural exponent yet then don't worry, I'm going to introduce that in the next
20

21
00:01:51,830 --> 00:01:53,640
section of the course.
21

22
00:01:53,660 --> 00:01:58,280
but it's the function is called exp for exponential, it's the natural exponent.
22

23
00:01:58,730 --> 00:02:10,640
So let's say we want this to be mu minus alpha squared divided by two times sigma squared.
23

24
00:02:10,640 --> 00:02:16,010
So this turns out to be the formula for something called a Gaussian, which is also called a normal curve
24

25
00:02:16,040 --> 00:02:19,040
or a bell curve. It's something that starts close to zero
25

26
00:02:19,040 --> 00:02:23,110
and it comes up smoothly and then it goes back down to zero.
26

27
00:02:23,110 --> 00:02:23,330
OK.
27

28
00:02:23,360 --> 00:02:28,850
So I can run this cell and then the output is basically just what I inputted here, and now what I'm going to
28

29
00:02:28,850 --> 00:02:33,530
do is set this entire expression to be a variable.
29

30
00:02:33,530 --> 00:02:36,980
So let's even call that variable expr for expression.
30

31
00:02:37,790 --> 00:02:45,410
So let's see if we can make this look a little bit nicer so I can try printing out the expression and
31

32
00:02:45,440 --> 00:02:46,880
that doesn't really look any nicer.
32

33
00:02:46,880 --> 00:02:51,740
This is certainly not a nice mathematical formatting.
33

34
00:02:51,740 --> 00:02:56,200
Maybe we should try using the display function which I like to use.
34

35
00:02:56,300 --> 00:03:09,620
And of course for this display function to work we need to import from IPython dot display
35

36
00:03:11,160 --> 00:03:11,940
is from
36

37
00:03:15,010 --> 00:03:20,290
IPython dot display we want to import the display function.
37

38
00:03:20,730 --> 00:03:21,090
OK.
38

39
00:03:21,170 --> 00:03:22,960
So run that.
39

40
00:03:22,960 --> 00:03:28,490
And now I run this and now this doesn't really look any nicer than it did with the print function.
40

41
00:03:28,490 --> 00:03:35,030
So in a previous video I introduced a function that you can activate in the sympy toolbox called
41

42
00:03:35,130 --> 00:03:36,030
init.
42

43
00:03:36,290 --> 00:03:45,010
Printing. And then, that is going to make this equation look a little bit nicer.
43

44
00:03:45,020 --> 00:03:51,140
So here I have sym dot exp for the natural exponential, and then in the parentheses is everything that
44

45
00:03:51,140 --> 00:03:52,580
goes into the exponent.
45

46
00:03:52,580 --> 00:03:54,380
So this is E to the.
46

47
00:03:54,470 --> 00:04:00,300
And then you can see, or maybe after zoom in a little bit on your display, minus alpha plus mu.
47

48
00:04:00,350 --> 00:04:06,730
So it actually turn this around here about mu minus alpha, squared divided by two sigma squared.
48

49
00:04:07,280 --> 00:04:13,400
So the point of this exercise, the point of this cell here was, to see that you can have symbolic variables
49

50
00:04:13,430 --> 00:04:16,130
that are longer than just a single letter.
50

51
00:04:16,220 --> 00:04:22,910
And if those correspond to Greek characters then sympy will know that when you write mu, when you
51

52
00:04:22,910 --> 00:04:28,530
use mu as a variable name, it should convert that into the Greek letter mu.
52

53
00:04:28,610 --> 00:04:37,580
You can also make up your own longer variable names. For example you can say hello equals sym dot symbols
53

54
00:04:38,300 --> 00:04:39,860
and then I'm gonna call this variable.
54

55
00:04:40,280 --> 00:04:40,720
Hello.
55

56
00:04:40,730 --> 00:04:42,860
And now I can write Hello.
56

57
00:04:42,890 --> 00:04:44,530
Divided by three.
57

58
00:04:44,540 --> 00:04:45,390
So there you go.
58

59
00:04:45,390 --> 00:04:48,350
I'm not totally sure what that means mathematically.
59

60
00:04:48,350 --> 00:04:54,080
One third of a hello... but this does show that you can create arbitrary variable names to be symbolic
60

61
00:04:54,080 --> 00:04:54,890
variables.
61

62
00:04:55,530 --> 00:04:55,900
OK.
62

63
00:04:55,910 --> 00:05:05,990
So let me get a single variable X in here. So I can introduce you to substitutions sym dot symbols and
63

64
00:05:06,020 --> 00:05:08,590
let's make this X.
64

65
00:05:08,670 --> 00:05:14,740
So now I previously showed you that you can have some expression that is let's say x plus four.
65

66
00:05:14,880 --> 00:05:21,240
And if we look at what this expression is, it's really just X plus four, X is a symbolic variable.
66

67
00:05:21,240 --> 00:05:25,980
It doesn't yet have a value so it just prints out as x plus four.
67

68
00:05:25,980 --> 00:05:34,080
This is how it's represented. But there is a method in sympy expressions, called subs which stands for
68

69
00:05:34,140 --> 00:05:36,260
substitution.
69

70
00:05:36,270 --> 00:05:42,420
So here I can substitute X for let's say how about six.
70

71
00:05:42,420 --> 00:05:43,020
So I write
71

72
00:05:43,080 --> 00:05:50,200
Expr, which is just this variable name, dot subs and then X comma six.
72

73
00:05:50,640 --> 00:05:52,730
And now the answer I get is 10.
73

74
00:05:52,770 --> 00:05:59,760
And so what Python did here, what the sympy module in Python did here, is look inside this expression,
74

75
00:06:00,090 --> 00:06:10,200
this expression here, for a symbolic variable called X and it substituted 6 for X. So it replaced wherever
75

76
00:06:10,200 --> 00:06:14,320
you see X in here, it replaced that with six in here.
76

77
00:06:14,400 --> 00:06:18,210
So we can try this with some other variables I can say minus four.
77

78
00:06:18,300 --> 00:06:20,130
And then we get zero.
78

79
00:06:20,130 --> 00:06:22,260
So this is for one variable.
79

80
00:06:22,260 --> 00:06:25,250
You can also substitute for multiple variables.
80

81
00:06:25,260 --> 00:06:30,090
So let's say X comma Y equals sym dot symbols X comma y.
81

82
00:06:30,750 --> 00:06:30,980
Okay.
82

83
00:06:30,990 --> 00:06:36,140
Now so far I haven't changed anything but now I'm going to put X or say y in here as well.
83

84
00:06:36,150 --> 00:06:43,230
So let's make this expression x plus four plus two times y.
84

85
00:06:44,070 --> 00:06:44,370
Okay.
85

86
00:06:44,370 --> 00:06:48,090
So now what do you think is going to happen when I run this code again?
86

87
00:06:48,100 --> 00:06:55,380
I'm only substituting X I'm not specifying anything for y to be I'm just telling Python to substitute
87

88
00:06:55,470 --> 00:06:58,920
X with minus 4.
88

89
00:06:58,980 --> 00:07:06,900
So what happens is that we get two Y. And this should make sense because I told Python to replace X with
89

90
00:07:06,900 --> 00:07:08,250
minus 4 so it did that.
90

91
00:07:08,250 --> 00:07:11,670
So this becomes minus four plus four is zero.
91

92
00:07:11,670 --> 00:07:19,140
And then what we're left with in this expression is two Y, but I haven't told Python how to replace y
92

93
00:07:19,140 --> 00:07:21,150
or substitute anything for Y.
93

94
00:07:21,150 --> 00:07:23,010
So the answer is just two y.
94

95
00:07:23,600 --> 00:07:23,850
Okay.
95

96
00:07:23,880 --> 00:07:30,840
So how might we go about substituting a value for X and a value for y? You might think that it would
96

97
00:07:30,840 --> 00:07:37,160
be something simple like this, let's say, let's make this how about three.
97

98
00:07:37,410 --> 00:07:40,240
However that is not the proper syntax.
98

99
00:07:40,380 --> 00:07:47,490
This is the error is that subs, which is this method, here accepts either one or two arguments and we've
99

100
00:07:47,490 --> 00:07:55,800
provided four arguments. So the correct approach here is to input not a list of variables and substitution
100

101
00:07:55,920 --> 00:07:59,790
numbers like this but instead to input a dictionary.
101

102
00:07:59,790 --> 00:08:05,280
Now if you're not yet familiar with dictionaries in Python don't worry I'm going to have a whole video
102

103
00:08:05,310 --> 00:08:11,940
later on in the course just about dictionaries and introducing you to dictionaries. For now you don't
103

104
00:08:11,940 --> 00:08:16,710
have to worry about the terms you can just pay attention to the syntax itself.
104

105
00:08:16,710 --> 00:08:20,240
So what I'm going to do is have curly brackets like this.
105

106
00:08:20,250 --> 00:08:27,240
Now this is actually just one input into this method and then we need to change this slightly so it's
106

107
00:08:27,240 --> 00:08:33,380
going to say X colon minus four comma Y colon three.
107

108
00:08:33,420 --> 00:08:40,190
So now I'm letting Python know that I'm going to replace X with minus four and Y with three.
108

109
00:08:40,200 --> 00:08:45,080
So now I can run this and the answer is six and let's make sure that makes sense.
109

110
00:08:45,090 --> 00:08:51,780
We have minus four plus four that turns out to be zero and then two times Y and Y equals three.
110

111
00:08:51,810 --> 00:08:52,560
So that's six.
111

112
00:08:52,560 --> 00:08:57,720
So in fact we can confirm that this is the right answer.
112

113
00:08:57,830 --> 00:09:04,020
Okay so now I want to get back to talking a little bit about latex coding and integrating latex
113

114
00:09:04,090 --> 00:09:05,680
with Python.
114

115
00:09:05,680 --> 00:09:10,750
So let's start by making another expression. How about three divided by x.
115

116
00:09:10,780 --> 00:09:12,890
Pretty simple expression.
116

117
00:09:12,910 --> 00:09:16,990
So in the sympy module there's another function called latex.
117

118
00:09:17,260 --> 00:09:25,150
And if you input an expression, then the result is going to be the latex code that you can use in Python
118

119
00:09:26,140 --> 00:09:29,110
to print out this expression.
119

120
00:09:29,110 --> 00:09:40,210
So now I can write display math and then the latex code corresponding to this expression here.
120

121
00:09:40,240 --> 00:09:40,570
All right.
121

122
00:09:40,600 --> 00:09:46,480
Now in this case we got an error and I believe that you are knowledgeable enough at this point in the
122

123
00:09:46,480 --> 00:09:52,180
course to diagnose this error and correct it. And I'm sure you've guessed it right.
123

124
00:09:52,180 --> 00:09:58,990
The problem is that we haven't yet imported the math function into the python workspace.
124

125
00:09:58,990 --> 00:10:06,130
So I'm going to scroll up to the top here and say from Ipython dot display import display and also import
125

126
00:10:06,160 --> 00:10:11,110
math and then I run this cell again and now I believe that this should work.
126

127
00:10:11,110 --> 00:10:14,900
So here we get three divided by X.
127

128
00:10:15,010 --> 00:10:19,600
Now notice what's going to happen if I delete this sympy latex function.
128

129
00:10:19,620 --> 00:10:25,660
Here we get an error and the error is that the math function expects text.
129

130
00:10:25,660 --> 00:10:35,630
So the math function is actually looking for latex code, not a sympy expression. So we need the sym dot
130

131
00:10:35,740 --> 00:10:43,450
latex in order to convert from this expression into latex code and then the output of this function
131

132
00:10:43,780 --> 00:10:51,310
is the latex code that gets input into math and display and that's what gives us this nice message here.
132

133
00:10:51,340 --> 00:10:56,990
I would now like to show you a little bit more about using the sym dot latex function.
133

134
00:10:57,100 --> 00:11:02,950
So I already showed you here that the output of sym dot latex is going to be a string it's going to be
134

135
00:11:02,950 --> 00:11:09,140
text which corresponds to latex code that you can then use in Python.
135

136
00:11:09,190 --> 00:11:16,000
So that was for this expression. This already is a simple expression because I've defined X to be a symbolic
136

137
00:11:16,000 --> 00:11:23,020
variable. But what if you would just put in some fraction and let's say three divided by four.
137

138
00:11:23,050 --> 00:11:27,310
Now here sym dot latex actually outputs point seventy five.
138

139
00:11:27,310 --> 00:11:33,320
So when in fact it computed three point three divided by four which is point seven five.
139

140
00:11:33,340 --> 00:11:37,270
And then just converted the number point seven five into the string
140

141
00:11:37,390 --> 00:11:40,030
point seven five. You can see those single quotes surrounding it.
141

142
00:11:40,060 --> 00:11:42,890
So this is in fact a string.
142

143
00:11:42,920 --> 00:11:49,480
Now if you would like to get the latex code corresponding to three divided by four, you might think that
143

144
00:11:49,480 --> 00:11:52,590
the way to do that would be to already start with a string.
144

145
00:11:52,600 --> 00:12:01,550
However this doesn't work either. Now in this case, latex is just seeing the string three 
145

146
00:12:01,850 --> 00:12:03,560
slash four.
146

147
00:12:03,800 --> 00:12:06,970
And it's simply printing out the latex code for this string.
147

148
00:12:06,980 --> 00:12:13,860
But you know the latex code in this case is just the same thing as these characters here.
148

149
00:12:14,120 --> 00:12:22,280
So in fact what we need to do is convert this string into a sympy object. And the way that you do that
149

150
00:12:22,280 --> 00:12:26,640
is with another function called sym dot sympify.
150

151
00:12:27,830 --> 00:12:33,710
It kind of a weird function name because there is another function called simplify with an i.
151

152
00:12:33,710 --> 00:12:38,840
That would be to simplify an expression and you'll learn more about using the function simplify in
152

153
00:12:38,840 --> 00:12:39,660
the future.
153

154
00:12:39,980 --> 00:12:47,150
But this is actually sympify, like to convert this string into a sympy object.
154

155
00:12:47,180 --> 00:12:54,590
So now let's see what happens when we run this cell and we get slash slash frac 3 4.
155

156
00:12:54,620 --> 00:13:04,690
So this is now code that you could input directly into display and and then math exactly like this.
156

157
00:13:04,730 --> 00:13:12,260
And this would be the way to get this fraction three divided by four to be printed out using LaTeX in
157

158
00:13:12,350 --> 00:13:14,060
Ipython notebook
158

159
00:13:17,620 --> 00:13:25,260
Here is the exercise for this video. So you can see this mathematical expression: X squared plus four.
159

160
00:13:25,540 --> 00:13:34,240
And what you're going to do is substitute X for minus two, minus 1 0 1 and 2 and then you basically print
160

161
00:13:34,240 --> 00:13:40,090
out the results, so print out the substitution and then print out the final result like this.
161

162
00:13:40,090 --> 00:13:46,210
So that's the important part, getting this part and this part. If you want a little bit of an extra challenge
162

163
00:13:46,480 --> 00:13:51,720
then you can also figure out how to print this right arrow in latex.
163

164
00:13:52,120 --> 00:13:57,370
And also a space that you can see there's a big space here and then a right arrow and then a big space
164

165
00:13:57,430 --> 00:13:58,680
over here.
165

166
00:13:58,870 --> 00:13:59,230
All right.
166

167
00:13:59,260 --> 00:14:05,260
So now is your opportunity to pause the video, switch to Python on your own and see how far you can get
167

168
00:14:05,260 --> 00:14:06,890
with this challenge.
168

169
00:14:06,910 --> 00:14:11,770
And then when you're ready, you come back to the video and you can watch me switch to Python.
169

170
00:14:11,770 --> 00:14:14,250
And now I'm going to solve it.
170

171
00:14:14,510 --> 00:14:21,320
All right so let's get started by just printing out one line and then once I have that one line working
171

172
00:14:21,650 --> 00:14:27,660
then I'm going to put that one line inside of a loop and then get the whole thing to display.
172

173
00:14:27,710 --> 00:14:29,750
So let's start with our expression.
173

174
00:14:29,750 --> 00:14:36,230
I'll say the expression is X squared plus four.
174

175
00:14:36,380 --> 00:14:44,810
Now of course I don't need to redefine X because I've already defined X up here to be a symbolic variable.
175

176
00:14:44,810 --> 00:14:51,110
So if you're starting from a fresh Python workspace you would also need to set up this and of course
176

177
00:14:51,110 --> 00:14:53,580
you would need to run this stuff as well.
177

178
00:14:53,780 --> 00:14:54,010
Okay.
178

179
00:14:54,020 --> 00:14:56,560
So here is our expression.
179

180
00:14:56,600 --> 00:15:00,860
And then to display, we want to say display and then math
180

181
00:15:03,590 --> 00:15:06,120
and now this has to write with...
181

182
00:15:06,120 --> 00:15:10,290
Now first I'm just going to hard code everything and write this out and then I'm going to go back and
182

183
00:15:10,290 --> 00:15:14,080
start replacing all of the variables where necessary.
183

184
00:15:14,160 --> 00:15:16,830
So with X equals minus two.
184

185
00:15:16,830 --> 00:15:18,490
That's what it's going to be on the first run.
185

186
00:15:18,780 --> 00:15:22,500
X squared plus four.
186

187
00:15:22,630 --> 00:15:28,140
And now to get a large space in latex you can use the expression quad.
187

188
00:15:28,200 --> 00:15:31,650
So that's going to give me a big space and then to get a right arrow.
188

189
00:15:31,650 --> 00:15:33,690
You can say right arrow.
189

190
00:15:33,690 --> 00:15:38,120
All one word, of course with slashes because we don't want the word right arrow.
190

191
00:15:38,130 --> 00:15:44,160
We want slash right arrow and then we need this escape character here to let Python know that we are
191

192
00:15:44,160 --> 00:15:51,420
going to be using a special latex word here. And then add another space here quad.
192

193
00:15:51,420 --> 00:15:58,210
And then it's going to be minus two squared plus four equals.
193

194
00:15:58,230 --> 00:16:00,840
So this is going to end up being four plus four.
194

195
00:16:00,840 --> 00:16:02,820
So that equals eight.
195

196
00:16:02,880 --> 00:16:03,120
Okay.
196

197
00:16:03,120 --> 00:16:07,450
So I'm going to run this cell now and make sure that it looks good.
197

198
00:16:07,470 --> 00:16:09,210
So this part looks fine.
198

199
00:16:09,210 --> 00:16:16,650
So with X equals minus two, X squared plus four goes to minus two squared plus four, which is eight.
199

200
00:16:17,040 --> 00:16:19,530
However this with doesn't look right.
200

201
00:16:19,530 --> 00:16:25,140
And the problem here is we need to make this explicit text so like this.
201

202
00:16:25,140 --> 00:16:25,560
All right.
202

203
00:16:25,590 --> 00:16:28,000
So this is starting to look good.
203

204
00:16:28,080 --> 00:16:34,060
And here you can see this nice big space that I got from using the quad keyword in latex.
204

205
00:16:34,080 --> 00:16:34,320
All right.
205

206
00:16:34,350 --> 00:16:35,220
So we're getting there.
206

207
00:16:35,220 --> 00:16:36,690
I need some substitutions now.
207

208
00:16:36,690 --> 00:16:41,580
So this needs to be substituted and this and the answer needs to be substituted.
208

209
00:16:41,590 --> 00:16:51,570
So I'm going to say percent G here and then we need another percent G here and a third percent G here.
209

210
00:16:51,810 --> 00:16:58,240
And then I need to indicate all of these substitutions into everywhere I've written this percent G.
210

211
00:16:58,260 --> 00:17:01,810
So the first substitution is going to be minus two.
211

212
00:17:01,830 --> 00:17:03,960
And then again minus two.
212

213
00:17:03,990 --> 00:17:06,030
And then it's going to be the answer.
213

214
00:17:06,030 --> 00:17:13,920
So that is expr subs and here I'm substituting X with minus two.
214

215
00:17:13,920 --> 00:17:14,160
All right.
215

216
00:17:14,160 --> 00:17:22,590
So now I'm going to run all of this code again and we see with X equals minus two comma X squared plus
216

217
00:17:22,590 --> 00:17:25,700
four goes to minus two squared plus four.
217

218
00:17:25,710 --> 00:17:28,430
And that does indeed equal eight.
218

219
00:17:28,440 --> 00:17:31,590
So now this looks really good.
219

220
00:17:31,590 --> 00:17:36,540
Now what we need to do is get this whole thing to work inside a for loop.
220

221
00:17:36,540 --> 00:17:40,350
So let's say for i in range.
221

222
00:17:40,350 --> 00:17:47,280
So remember this loop is going to go from minus two to plus two, which means that the second input into
222

223
00:17:47,670 --> 00:17:54,960
the range function here has to be three -- one higher than the upper bound for the counting.
223

224
00:17:54,960 --> 00:17:55,200
Okay.
224

225
00:17:55,230 --> 00:17:58,800
So now this is no longer hardcoded to minus two.
225

226
00:17:58,830 --> 00:18:01,320
This has to be I and I.
226

227
00:18:01,320 --> 00:18:03,740
And then we are substituting in I.
227

228
00:18:04,410 --> 00:18:04,740
Let's see.
228

229
00:18:04,770 --> 00:18:10,200
So I think I've done that all correctly and yet this all looks really good to me.
229

230
00:18:11,010 --> 00:18:12,060
So this is all fine.
230

231
00:18:12,060 --> 00:18:17,850
There's one more thing I want to show you, just to highlight another feature of working with sympy
231

232
00:18:17,880 --> 00:18:19,400
and substitution.
232

233
00:18:19,410 --> 00:18:25,260
So here I've written this expression out explicitly, which is fine but it turns out that we can do even
233

234
00:18:25,260 --> 00:18:26,730
something a little bit simpler.
234

235
00:18:26,730 --> 00:18:38,850
So I'm going to say answer equals X plus four dots subs, and I'm going to substitute X for I squared and then
235

236
00:18:38,850 --> 00:18:42,450
here this ends up just being the answer because I've already computed it.
236

237
00:18:42,720 --> 00:18:47,020
So let me get rid of this and now I will explain what I'm doing here.
237

238
00:18:47,040 --> 00:18:53,130
So here I'm not actually creating a variable for the expression; I'm just putting the entire expression
238

239
00:18:53,160 --> 00:19:01,050
into parentheses. And I don't need to have a separate variable so then I'm substituting X in this expression
239

240
00:19:01,050 --> 00:19:02,880
here for I squared.
240

241
00:19:02,880 --> 00:19:08,940
Now of course you could have also written this to be X squared and then you're substituting an X for
241

242
00:19:08,940 --> 00:19:16,110
I. I just want to show you some of the flexibility that you have when you are creating sympy expressions
242

243
00:19:16,200 --> 00:19:18,580
and then substituting in variables.
243

244
00:19:18,630 --> 00:19:24,450
So I'm going to run this again and make sure that this all works and we get 8 and 5 4 5 8.
244

245
00:19:24,450 --> 00:19:31,970
So this is all still equally correct. So I hope you enjoyed this video and I hope you feel like you are
245

246
00:19:32,510 --> 00:19:39,440
starting to learn how to use the sympy module in python. In the next video, you are going to get to see
246

247
00:19:39,440 --> 00:19:48,110
a real practical example of using sympy to understand an important principle in mathematics.
