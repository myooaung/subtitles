WEBVTT
0
1
00:00:03.690 --> 00:00:11.400
In several previous videos in this course I have mentioned the variable type of a list.
1

2
00:00:11.400 --> 00:00:17.760
So you've already gotten a bit of an introduction into lists in Python but in this video I want to take
2

3
00:00:17.760 --> 00:00:23.760
a few moments to tell you more about lists -- how they work, how to create them, how to work with them, how
3

4
00:00:23.760 --> 00:00:30.120
to store different kinds of data in a list... and that's also going to lead to a discussion of slicing,
4

5
00:00:30.120 --> 00:00:34.140
a procedure in Python called slicing.
5

6
00:00:34.140 --> 00:00:41.070
So let's begin. I'm going to have a list and lists are indicated in Python with square brackets like
6

7
00:00:41.070 --> 00:00:47.340
this and then you can have commas separating the different elements of the list.
7

8
00:00:47.340 --> 00:00:48.800
So here is a list.
8

9
00:00:48.810 --> 00:00:52.920
Let's see what it looks like when I print it out. So, well print it out.
9

10
00:00:52.920 --> 00:00:54.320
It's not terribly interesting.
10

11
00:00:54.330 --> 00:01:00.900
It's literally just exactly what I typed but with an extra space and we can also see that the type or
11

12
00:01:00.900 --> 00:01:03.780
the class is a list.
12

13
00:01:03.870 --> 00:01:09.600
So this function type will print out the variable type or the class of the input.
13

14
00:01:09.600 --> 00:01:15.200
So this is a list. To access individual elements within a list,
14

15
00:01:15.210 --> 00:01:21.990
you also use square brackets, so the square brackets to create a list and square brackets to access elements
15

16
00:01:22.080 --> 00:01:23.660
in a list.
16

17
00:01:23.670 --> 00:01:29.440
Now you always have to keep in mind with Python that Python starts counting at zero.
17

18
00:01:29.490 --> 00:01:37.470
So if I try to access element 3 here, that's actually the fourth element and that's because this is the
18

19
00:01:37.470 --> 00:01:42.840
zero-th element, the first element, the second element, and the third element.
19

20
00:01:42.840 --> 00:01:47.620
So therefore I expect that list item number three.
20

21
00:01:47.640 --> 00:01:51.330
Or with index 3 corresponds to the number 7.
21

22
00:01:52.110 --> 00:01:57.360
Likewise, if I were to say 1 here, that's actually the second element in this list.
22

23
00:01:57.360 --> 00:02:03.180
So that's going to be the number three because this is the zero-th item in the list, and this is the first
23

24
00:02:03.240 --> 00:02:05.160
item in the list.
24

25
00:02:05.160 --> 00:02:11.330
Now if you want to access the last item in the list you can also use a minus one.
25

26
00:02:11.400 --> 00:02:17.930
That's a special procedure in Python that will immediately go to the end of the list.
26

27
00:02:17.940 --> 00:02:23.190
Now this is pretty useful because when you have the list printed out like this, I can just see that there
27

28
00:02:23.190 --> 00:02:27.070
are four numbers so if I want the last number it's really easy just to type three.
28

29
00:02:27.540 --> 00:02:34.610
However, if this list were longer, or maybe this list was something that I imported from a dataset
29

30
00:02:34.860 --> 00:02:38.160
then I might not necessarily know how long it is immediately.
30

31
00:02:38.160 --> 00:02:46.640
So it's pretty convenient to be able to access the final item of a list by just using minus one.
31

32
00:02:46.670 --> 00:02:46.980
Okay.
32

33
00:02:46.980 --> 00:02:51.030
And that is going to lead into a discussion of slicing.
33

34
00:02:51.030 --> 00:02:56.160
So this is called slicing variables in Python.
34

35
00:02:56.160 --> 00:03:00.240
So here I showed you how to access one single element.
35

36
00:03:00.240 --> 00:03:03.210
What if we want to access more elements?
36

37
00:03:03.210 --> 00:03:06.840
For example, what if I want to get the first two elements here?
37

38
00:03:06.870 --> 00:03:12.840
So the first element and the second element, corresponding to values 1 and 3.
38

39
00:03:13.380 --> 00:03:20.390
So what you can do here is use the colon and then two, and now this will print out one comma three.
39

40
00:03:20.490 --> 00:03:26.820
And the idea of this syntax here is that you're saying all of the elements from the beginning up and
40

41
00:03:26.840 --> 00:03:30.510
to the index corresponding to this number minus one.
41

42
00:03:31.170 --> 00:03:37.800
So from the beginning and then moving up for two elements gives us the zero-th element and the first
42

43
00:03:37.800 --> 00:03:44.910
element, and you can also do this with variables, so I could say n equals 2 and then give me list from
43

44
00:03:44.910 --> 00:03:47.170
the beginning up until 2.
44

45
00:03:47.400 --> 00:03:56.670
So this would be slicing, to print out the first N elements. And if you wanted to do slicing to print
45

46
00:03:56.760 --> 00:04:03.640
out the final, let's call this K elements, just to use a different variable from n here.
46

47
00:04:03.720 --> 00:04:06.040
So I can say k equals, 
47

48
00:04:06.120 --> 00:04:14.070
Let's also stick with two. And I'm going to say list minus K and then colon, and this will print out the last
48

49
00:04:14.070 --> 00:04:17.040
two elements of this list.
49

50
00:04:17.070 --> 00:04:19.340
So that's 6 and 7.
50

51
00:04:19.410 --> 00:04:26.010
So again now the principle of this syntax is that I'm going from the end minus two.
51

52
00:04:26.100 --> 00:04:33.320
So the second to last element, this would be the first last element and here is the well k-th last element
52

53
00:04:33.330 --> 00:04:36.260
here it's two. Up until the end.
53

54
00:04:36.300 --> 00:04:42.420
So now I've shown you how to slice for the first N elements and for the final k elements. Of course
54

55
00:04:42.420 --> 00:04:48.780
you can get from any arbitrary N to any arbitrary K. And to do that I actually want to make this list
55

56
00:04:48.780 --> 00:04:49.590
a little bit longer.
56

57
00:04:49.620 --> 00:04:52.980
So I would say just put in some random numbers.
57

58
00:04:53.040 --> 00:04:56.210
This is going to give me an error here and this will also give me an error.
58

59
00:04:56.220 --> 00:04:57.760
Let's do zero there.
59

60
00:04:57.840 --> 00:04:58.160
All right.
60

61
00:04:58.210 --> 00:04:59.370
I run this cell again.
61

62
00:04:59.440 --> 00:05:05.360
Basically I just want more elements inside this list and now what I want to do is access.
62

63
00:05:05.360 --> 00:05:08.700
Let's say I want to get these elements in here.
63

64
00:05:08.780 --> 00:05:15.040
So now I have a lowercase n equals three, and K equals seven.
64

65
00:05:15.050 --> 00:05:25.040
So by combining this syntax with this and syntax, we can write list from n through K and actually let
65

66
00:05:25.040 --> 00:05:27.740
me copy actually I'll just print that out again.
66

67
00:05:27.770 --> 00:05:28.760
So let's see.
67

68
00:05:29.000 --> 00:05:32.990
Print out the full list and then we can see what elements we have here.
68

69
00:05:32.990 --> 00:05:37.820
So remember this the zero with element and then element 1 2 3.
69

70
00:05:37.850 --> 00:05:38.720
And that's where we started.
70

71
00:05:38.750 --> 00:05:44.160
So n equals three starts at seven up to element K minus one.
71

72
00:05:44.180 --> 00:05:46.930
So this seven here is element three.
72

73
00:05:47.060 --> 00:05:49.810
And then we have four five six.
73

74
00:05:49.820 --> 00:05:51.830
And then this will be the seventh element.
74

75
00:05:51.830 --> 00:05:57.260
And so this syntax means just go up to the element just preceding this,
75

76
00:05:57.260 --> 00:05:58.390
what we specify here.
76

77
00:05:58.400 --> 00:06:00.500
So in this case the number seven.
77

78
00:06:00.500 --> 00:06:00.770
All right.
78

79
00:06:00.800 --> 00:06:04.460
So this is about making lists of numbers.
79

80
00:06:04.910 --> 00:06:09.800
And for a course on using Python to understand mathematics of course it makes sense.
80

81
00:06:10.040 --> 00:06:14.480
But I also want to point out to you that lists are not confined to numbers.
81

82
00:06:14.480 --> 00:06:20.090
So for example I can create a new variable called words and let's call this.
82

83
00:06:20.090 --> 00:06:29.950
Hello my name is Mike maybe that should be capital.
83

84
00:06:31.070 --> 00:06:32.620
Okay so now I have a list.
84

85
00:06:32.630 --> 00:06:40.370
This is still a list just like this was a list but this list now contains strings instead of containing
85

86
00:06:40.460 --> 00:06:42.410
numbers.
86

87
00:06:42.410 --> 00:06:49.160
So now what I'm going to do is access each individual element of this list in a for loop.
87

88
00:06:49.190 --> 00:06:54.370
Let's say for I in words print i.
88

89
00:06:54.380 --> 00:07:01.940
So now this loop, this for loop, is going to go through all of the individual elements and then it's just
89

90
00:07:01.940 --> 00:07:03.620
going to print them.
90

91
00:07:03.620 --> 00:07:04.280
So here we go.
91

92
00:07:04.310 --> 00:07:06.630
Hello my name is Mike.
92

93
00:07:06.740 --> 00:07:11.780
So this is one way, now the indexing variable is actually each of these cells.
93

94
00:07:11.840 --> 00:07:17.120
I just want to show you how to set this up slightly differently, so that i -- this indexing variable -- can
94

95
00:07:17.120 --> 00:07:20.890
be a number instead of the entire string.
95

96
00:07:20.960 --> 00:07:27.830
So we can do for i in range 0 to the length of words.
96

97
00:07:27.950 --> 00:07:35.270
So now I'm creating a range of numbers that starts from zero and goes up to however long this thing
97

98
00:07:35.270 --> 00:07:36.670
is.
98

99
00:07:36.690 --> 00:07:43.070
Now if I print i, you can see that this is going to print the numbers 0 through 4.
99

100
00:07:43.130 --> 00:07:50.300
So now if I want to print these individual words I can say words and then in square brackets like this
100

101
00:07:51.020 --> 00:07:52.200
the index i.
101

102
00:07:52.210 --> 00:07:56.990
So this is now the i-th index into this list words.
102

103
00:07:57.080 --> 00:08:03.410
So now you've seen that lists can contain numbers, a list can contain strings, and it gets even better
103

104
00:08:03.410 --> 00:08:09.260
than that, because a list can contain multiple different kinds of information.
104

105
00:08:09.530 --> 00:08:10.730
All in the same list.
105

106
00:08:10.760 --> 00:08:12.590
So let's create a new list.
106

107
00:08:12.590 --> 00:08:18.140
I'll call this alist and let's have elements 1 and 2 and then a string.
107

108
00:08:18.140 --> 00:08:22.940
I don't know how about cookies because maybe I'm a little bit hungry at this point... and then I'm actually
108

109
00:08:22.940 --> 00:08:27.560
going to create the last element in this list to be another list.
109

110
00:08:27.570 --> 00:08:31.420
So let's say six comma four.
110

111
00:08:31.460 --> 00:08:36.420
So notice I have a list that is actually an item inside a list.
111

112
00:08:36.440 --> 00:08:39.260
So it's a list inside of a list.
112

113
00:08:39.810 --> 00:08:40.130
Okay.
113

114
00:08:40.130 --> 00:08:44.240
And so to see what that looks like I'm going to use a for loop.
114

115
00:08:44.240 --> 00:08:48.210
So for i in a list and then I'm just going to print out each of these items.
115

116
00:08:48.200 --> 00:08:50.410
So here you see the number one.
116

117
00:08:50.420 --> 00:08:54.310
Number two these string cookies and then the list itself.
117

118
00:08:54.350 --> 00:08:56.030
Six comma four.
118

119
00:08:56.060 --> 00:08:59.750
So that leads to the question of how you would index for example the six?
119

120
00:08:59.750 --> 00:09:01.940
How do you find the six here?
120

121
00:09:01.940 --> 00:09:06.140
So we know that this is the final element of a list.
121

122
00:09:06.140 --> 00:09:09.490
So I can write a list and then minus one.
122

123
00:09:09.680 --> 00:09:13.640
And that's going to give me the result that this is another list on its own.
123

124
00:09:13.640 --> 00:09:19.740
So now we need to access the first element of this list, which is a member of this list.
124

125
00:09:19.790 --> 00:09:25.280
So the way to do that in Python is to use again square brackets afterwards.
125

126
00:09:25.280 --> 00:09:33.560
So we have a square bracket to access the final element in a list and then from this result we want
126

127
00:09:33.560 --> 00:09:39.380
to use another set of square brackets like this to access the zero-th element or the first element
127

128
00:09:39.770 --> 00:09:41.950
here and that is going to be six.
128

129
00:09:41.960 --> 00:09:47.300
And of course if you would write one here then we would get four because this is the second element
129

130
00:09:48.050 --> 00:09:53.660
of the list, which is the final element of this larger list. It gets a little confusing to talk about.
130

131
00:09:53.660 --> 00:10:00.350
But I think you get the idea. Here is your exercise for this video.
131

132
00:10:00.740 --> 00:10:05.500
What you want to do is implement these three expressions using sympy.
132

133
00:10:06.020 --> 00:10:11.900
But then I want you to put each of these three into a list. In python, a few moments ago, I showed you
133

134
00:10:11.900 --> 00:10:17.510
how to make a list out of numbers out of strings out of a combination of numbers and strings and even
134

135
00:10:17.540 --> 00:10:18.530
other lists.
135

136
00:10:18.530 --> 00:10:26.250
And now what you're going to do is create a list in Python where each element of the list is an entire
136

137
00:10:26.270 --> 00:10:32.390
sympy expression. And it's going to be these expressions and then what you want to do is using a for
137

138
00:10:32.390 --> 00:10:33.250
loop.
138

139
00:10:33.380 --> 00:10:40.850
Expand these expressions and print out the simplified version of these expressions using LaTeX and make
139

140
00:10:40.850 --> 00:10:42.290
a nice looking format.
140

141
00:10:42.320 --> 00:10:44.280
Eventually it's going to look something like this.
141

142
00:10:44.300 --> 00:10:50.170
You have this expression up here and when you expand it, that this gets reduced to this.
142

143
00:10:50.190 --> 00:10:56.930
And so you see each of these expressions and each of their simplifications using the expand function
143

144
00:10:56.960 --> 00:10:59.830
the expand function in sympy.
144

145
00:11:00.440 --> 00:11:00.740
All right.
145

146
00:11:00.760 --> 00:11:05.110
So now is your opportunity to pause the video, work through this assignment.
146

147
00:11:05.150 --> 00:11:10.790
And now I'm going to switch to Python and show you how I solved this.
147

148
00:11:10.820 --> 00:11:17.240
So I believe we haven't yet imported the sympy module. So that's actually the first thing I'm going
148

149
00:11:17.240 --> 00:11:17.510
to do.
149

150
00:11:17.570 --> 00:11:19.050
Let's see.
150

151
00:11:19.280 --> 00:11:22.840
Import sympy as sym.
151

152
00:11:23.060 --> 00:11:31.800
And then we need to create a symbolic variable so I can say X equals symbols and then x.
152

153
00:11:32.090 --> 00:11:32.430
All right.
153

154
00:11:32.450 --> 00:11:43.790
So now I'm going to write out these expressions, so e one expression was 1 was 2 x plus X times 4 minus
154

155
00:11:43.850 --> 00:11:56.720
6 x plus another X and then we had e 2 that was minus X times 2 divided by X plus 4 divided by.
155

156
00:11:56.720 --> 00:12:03.280
Now here you have to be careful because the denominator was X squared.
156

157
00:12:03.530 --> 00:12:09.410
And now the question is whether python is going to know to put these square term in the denominator
157

158
00:12:09.710 --> 00:12:13.750
or whether python is going to implement this like this.
158

159
00:12:13.820 --> 00:12:19.640
Now to think about this we have to remember the order of operations -- that was PEMDAS, or
159

160
00:12:19.640 --> 00:12:22.110
Please excuse my dear aunt Sally.
160

161
00:12:22.280 --> 00:12:29.630
So we see, first of all parentheses always takes highest priority, but exponent takes priority over division.
161

162
00:12:29.660 --> 00:12:36.200
So that means that the this squared term actually will apply only to the X in the denominator and not
162

163
00:12:36.200 --> 00:12:38.530
to the four in the numerator.
163

164
00:12:38.540 --> 00:12:40.370
All right so we are good here.
164

165
00:12:40.370 --> 00:12:46.190
That said, you know, if you think it looks nicer or easier to read with the parenthesis here, then by all
165

166
00:12:46.190 --> 00:12:47.730
means keep it there.
166

167
00:12:48.620 --> 00:12:50.690
So four over X squared.
167

168
00:12:50.780 --> 00:13:02.120
And then outside the parenthesis it was plus four plus x divided by four times x.
168

169
00:13:02.210 --> 00:13:08.540
Now in this case for the numerator we definitely need the parentheses here because otherwise division
169

170
00:13:08.570 --> 00:13:12.440
is going to take priority over the additions here.
170

171
00:13:12.440 --> 00:13:12.680
All right.
171

172
00:13:12.680 --> 00:13:27.500
And then we get to expression E three and that was x plus three times x minus three times x times one
172

173
00:13:27.500 --> 00:13:29.980
divided by nine times X. oof!
173

174
00:13:29.990 --> 00:13:33.080
This is quite an eyeful here.
174

175
00:13:33.080 --> 00:13:33.290
All right.
175

176
00:13:33.290 --> 00:13:36.070
So now I have these three separate equations.
176

177
00:13:36.080 --> 00:13:37.950
I want to put them in a list.
177

178
00:13:38.150 --> 00:13:40.400
So let's call this variable exprs.
178

179
00:13:40.580 --> 00:13:44.860
And I'm going to say e one comma E two comma E three.
179

180
00:13:44.900 --> 00:13:49.550
So essentially I'm creating these three expressions up here in this part of the code.
180

181
00:13:49.730 --> 00:13:54.050
These expressions are separate objects, separate sympy objects.
181

182
00:13:54.050 --> 00:13:58.720
And now here I put them into a single list.
182

183
00:13:58.760 --> 00:13:59.140
All right.
183

184
00:13:59.150 --> 00:14:06.050
And then what I want to do is show the original expression and then the expanded form of the expression.
184

185
00:14:06.080 --> 00:14:12.140
So that has to be done in a for loop but before worrying about the for loop I'm gonna make sure that
185

186
00:14:12.140 --> 00:14:15.520
I can get this to work for just one element.
186

187
00:14:15.560 --> 00:14:16.700
So just one expression.
187

188
00:14:16.700 --> 00:14:24.950
So let's say display math and then this is going to be the expression let's call it c e 1 and then I'm
188

189
00:14:24.950 --> 00:14:31.020
going to need some kind of an arrow here and then e one again.
189

190
00:14:31.040 --> 00:14:31.310
All right.
190

191
00:14:31.340 --> 00:14:33.270
So now let's start doing some replacement.
191

192
00:14:33.270 --> 00:14:34.740
So this is going to be.
192

193
00:14:34.780 --> 00:14:36.130
Percent s.
193

194
00:14:36.230 --> 00:14:38.190
And then here another percent s.
194

195
00:14:38.300 --> 00:14:41.570
And now we want to replace these with two strings.
195

196
00:14:41.570 --> 00:14:50.730
This is going to be sympy latex so the latex version of E one and then the same that latex.
196

197
00:14:51.110 --> 00:14:52.350
I need a dot there.
197

198
00:14:52.390 --> 00:14:57.200
sym dot latex of the expanded version.
198

199
00:14:57.230 --> 00:14:59.570
Expand of E 1.
199

200
00:14:59.600 --> 00:14:59.880
Okay.
200

201
00:14:59.920 --> 00:15:04.650
So let's run this code and see if we get any errors.
201

202
00:15:04.730 --> 00:15:09.530
We don't get any errors so far it's looking pretty decent except we have this arrow here.
202

203
00:15:09.530 --> 00:15:13.220
So what I actually want this to be is a double sided arrow.
203

204
00:15:13.910 --> 00:15:23.000
And so the keyword that I'm going to use in latex for this is a long left right arrow.
204

205
00:15:23.870 --> 00:15:26.270
So that's going to give me a double sided arrow.
205

206
00:15:26.270 --> 00:15:27.590
So this is looking pretty good.
206

207
00:15:27.590 --> 00:15:32.700
I want a little bit of space in in between the expression and the arrows.
207

208
00:15:32.720 --> 00:15:38.630
I'm going to write quad to give me a little bit of room and then quad again here.
208

209
00:15:39.170 --> 00:15:39.420
All right.
209

210
00:15:39.440 --> 00:15:44.110
I think that just provides a little bit nicer visual separation here.
210

211
00:15:44.340 --> 00:15:46.870
Okay so we got this to work for expression 1.
211

212
00:15:46.880 --> 00:15:52.430
So what I'm gonna do now is get this to work for all of the expressions in the loop.
212

213
00:15:52.430 --> 00:15:59.080
So let's call this expri in the exprs.
213

214
00:15:59.180 --> 00:16:06.140
So I'm using a looping variable that ends with the letter i, as a reminder to me that this is an index
214

215
00:16:06.140 --> 00:16:08.410
variable inside a for loop.
215

216
00:16:08.570 --> 00:16:13.950
And now essentially we just need to replace e one with expri.
216

217
00:16:14.060 --> 00:16:20.120
So now I'm going to run this code again, but we get an error and the error is an indentation error, expected
217

218
00:16:20.120 --> 00:16:21.440
an indented block.
218

219
00:16:21.680 --> 00:16:28.610
So you remember from the very beginning of this course, that I told you that a for loop needs to have
219

220
00:16:28.700 --> 00:16:35.690
indented code, and that is how Python knows which code belongs inside the for loop and which code belongs
220

221
00:16:35.750 --> 00:16:36.680
outside the for loop.
221

222
00:16:36.710 --> 00:16:41.170
So in particular you need four spaces one two three four.
222

223
00:16:41.450 --> 00:16:48.020
And you can also see if there's not enough spaces there's the insufficient number of spaces then this
223

224
00:16:48.020 --> 00:16:49.670
first function turns red.
224

225
00:16:49.670 --> 00:16:52.640
And so now it turns black.
225

226
00:16:52.640 --> 00:16:53.200
All right.
226

227
00:16:53.240 --> 00:16:54.050
Very nice.
227

228
00:16:54.050 --> 00:16:56.650
This looks really nice.
228

229
00:16:56.660 --> 00:17:03.490
So in this video I gave you a more in-depth view into working with lists in Python.
229

230
00:17:03.560 --> 00:17:10.100
And I also showed you how to slice lists in Python in order to access individual elements or groups of
230

231
00:17:10.100 --> 00:17:12.530
elements inside a list.
231

232
00:17:12.530 --> 00:17:18.830
You will have many more opportunities throughout this course and in your career as programmers to work
232

233
00:17:18.830 --> 00:17:19.590
with lists.
233

234
00:17:19.670 --> 00:17:22.520
So if it's not yet totally clear then don't worry.
234

235
00:17:22.550 --> 00:17:25.520
There's going to be more opportunities for learning.
