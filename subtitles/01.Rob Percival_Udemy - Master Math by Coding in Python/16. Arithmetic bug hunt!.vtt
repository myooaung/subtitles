WEBVTT
0
1
00:00:03.900 --> 00:00:10.380
One of the best ways to become a better programmer is to debug other people's code.
1

2
00:00:10.410 --> 00:00:11.580
It's actually terrible.
2

3
00:00:11.580 --> 00:00:17.790
I hate going through other people's code and having to debug it, but it's something you have to do and
3

4
00:00:18.120 --> 00:00:20.330
it makes you a better programmer.
4

5
00:00:20.400 --> 00:00:20.730
All right.
5

6
00:00:20.730 --> 00:00:24.680
And that is the idea of this assignment.
6

7
00:00:24.690 --> 00:00:26.250
This project.
7

8
00:00:26.250 --> 00:00:27.480
It is a bug hunt.
8

9
00:00:27.870 --> 00:00:31.370
Essentially what I've done is written a bunch of code.
9

10
00:00:31.380 --> 00:00:37.110
You can see here and every cell of code contains at least one error.
10

11
00:00:37.140 --> 00:00:43.530
And what you have to do is go through each of these cells in turn and try to run the code in that cell
11

12
00:00:43.560 --> 00:00:48.030
and figure out what is the error and how to fix it.
12

13
00:00:48.360 --> 00:00:51.450
Now sometimes it's a pretty simple error to fix.
13

14
00:00:51.450 --> 00:00:57.720
Sometimes you have to do a little bit of guesswork and a little bit of mind reading because sometimes
14

15
00:00:57.720 --> 00:01:04.590
there are situations where Python doesn't explicitly throw an error but you can guess that the result
15

16
00:01:04.650 --> 00:01:10.880
of the code, the output of the code, is probably not what I had intended when I was writing it.
16

17
00:01:10.950 --> 00:01:13.560
All right so I hope you enjoy this project.
17

18
00:01:13.560 --> 00:01:17.100
I think it's should be a lot of fun. If you haven't already,
18

19
00:01:17.130 --> 00:01:22.950
then now is the opportunity to pause the video so you can work through this on your own and then come
19

20
00:01:22.950 --> 00:01:23.330
back.
20

21
00:01:23.400 --> 00:01:26.030
And now I'm going to go through this.
21

22
00:01:26.040 --> 00:01:32.610
So my general strategy for these kinds of things is just to start by immediately running the code to
22

23
00:01:32.610 --> 00:01:33.690
see what happens.
23

24
00:01:35.180 --> 00:01:41.030
So here is one of these cases that I said that Python didn't actually throw an error; we didn't actually
24

25
00:01:41.030 --> 00:01:43.700
make any explicit coding errors.
25

26
00:01:43.700 --> 00:01:51.200
However, when I look at this code it kind of seems like what the person who wrote this code wanted to
26

27
00:01:51.200 --> 00:01:54.290
do was to print x plus y.
27

28
00:01:54.290 --> 00:02:00.220
So the arithmetic equation x plus y which is one plus two.
28

29
00:02:00.620 --> 00:02:02.910
In fact these are set to be strings.
29

30
00:02:03.020 --> 00:02:06.080
So the plus sign is interpreted here as concatenation.
30

31
00:02:06.080 --> 00:02:08.990
So this is actually not really the number 12.
31

32
00:02:09.020 --> 00:02:10.300
This is the string.
32

33
00:02:10.400 --> 00:02:11.140
1 2.
33

34
00:02:11.660 --> 00:02:18.860
So I think that what the person who wrote this code wanted to do was something like this and get an
34

35
00:02:18.860 --> 00:02:20.450
answer of three.
35

36
00:02:20.750 --> 00:02:21.110
All right.
36

37
00:02:21.140 --> 00:02:21.960
So there's that.
37

38
00:02:22.020 --> 00:02:23.980
Now let's move on to the next one.
38

39
00:02:24.020 --> 00:02:31.130
Again we start by running this cell. Now the first error that we see is that the name math is not defined
39

40
00:02:31.700 --> 00:02:35.420
and this is an error that you've seen multiple times.
40

41
00:02:35.420 --> 00:02:42.500
And essentially we just have to import the math function into the python workspace so I'm going to say
41

42
00:02:42.920 --> 00:02:48.590
from IPython display import math.
42

43
00:02:48.680 --> 00:02:48.950
All right.
43

44
00:02:48.980 --> 00:02:54.480
So it seems like that should take care of things, because the error was about the math function.
44

45
00:02:54.500 --> 00:03:00.180
So now I run this code again and now we get rack one two.
45

46
00:03:00.200 --> 00:03:06.380
Now you might remember from when I gave you a brief introduction to latex coding and integrating
46

47
00:03:06.440 --> 00:03:11.660
latex coding with Python coding, that you actually need two slashes here.
47

48
00:03:11.690 --> 00:03:13.420
So now let's try this again.
48

49
00:03:13.430 --> 00:03:14.180
All right.
49

50
00:03:14.180 --> 00:03:15.350
This looks good.
50

51
00:03:15.350 --> 00:03:16.280
This one is done.
51

52
00:03:16.310 --> 00:03:18.070
Let's move to the next one.
52

53
00:03:18.110 --> 00:03:19.550
Here we see another display.
53

54
00:03:19.550 --> 00:03:27.410
So another case where we are trying to integrate latex coding with Python coding to make a nice display
54

55
00:03:27.760 --> 00:03:28.220
huh.
55

56
00:03:28.220 --> 00:03:36.020
So this error says not enough arguments for format string. So that's not a super helpful error message,
56

57
00:03:36.050 --> 00:03:39.390
but it does tell us a few keywords that we can look for.
57

58
00:03:39.410 --> 00:03:43.950
So not enough arguments and then something about a string.
58

59
00:03:44.420 --> 00:03:44.660
OK.
59

60
00:03:44.660 --> 00:03:50.050
So if we look at what's going on here you can see that there are three percent G.
60

61
00:03:50.060 --> 00:03:54.310
So three numbers that are going to be replaced by whatever is in here.
61

62
00:03:54.350 --> 00:03:54.800
Aha.
62

63
00:03:54.800 --> 00:03:56.780
And there's only two over here.
63

64
00:03:56.780 --> 00:04:03.200
So this is going to be presumably X plus Y equals whatever X plus Y equals.
64

65
00:04:03.380 --> 00:04:05.080
But that's not listed in here.
65

66
00:04:05.360 --> 00:04:06.260
So here I'm going to write
66

67
00:04:06.320 --> 00:04:09.410
comma X plus Y.
67

68
00:04:09.410 --> 00:04:09.770
All right.
68

69
00:04:09.770 --> 00:04:13.590
And then we get X plus Y equals X plus Y.
69

70
00:04:13.610 --> 00:04:16.480
And that's four plus five equals nine.
70

71
00:04:16.490 --> 00:04:16.790
All right.
71

72
00:04:16.820 --> 00:04:17.900
So it's going pretty well.
72

73
00:04:17.930 --> 00:04:20.260
Let's move on to the next one.
73

74
00:04:21.110 --> 00:04:28.950
Now here we see an interesting case: it says frac and then the numerator the denominator equals something.
74

75
00:04:29.340 --> 00:04:33.230
So but the result says four divided by five equals zero.
75

76
00:04:33.230 --> 00:04:36.560
Now the formatting looks nice so the formatting isn't the problem.
76

77
00:04:36.560 --> 00:04:38.690
The substitution isn't the problem.
77

78
00:04:38.690 --> 00:04:43.490
The problem here is that percent I stands for integer.
78

79
00:04:43.490 --> 00:04:50.330
Now I don't believe I've actually explicitly told you about that here in previous videos so far in this
79

80
00:04:50.330 --> 00:04:50.830
section,
80

81
00:04:51.170 --> 00:04:57.080
but you might already have seen that something was wrong here and then this percent I is different from
81

82
00:04:57.080 --> 00:04:59.440
the percent g that I typically use.
82

83
00:04:59.510 --> 00:05:05.070
The other option would be percent s if your X explicitly putting strings into here.
83

84
00:05:05.120 --> 00:05:05.320
All right.
84

85
00:05:05.330 --> 00:05:13.190
So it turns out that the solution is just to change this to g which will give us a floating point number.
85

86
00:05:13.190 --> 00:05:19.000
And these are actually OK to leave as I in this particular case because these are already integers.
86

87
00:05:19.000 --> 00:05:27.380
However, if you would change this to be 4.5 then this is also going to display incorrectly so therefore
87

88
00:05:27.740 --> 00:05:33.370
it's probably not a bad idea to change these both to percent G.
88

89
00:05:33.410 --> 00:05:34.220
All right.
89

90
00:05:34.220 --> 00:05:35.180
Next one.
90

91
00:05:35.510 --> 00:05:37.480
Here we get three squares.
91

92
00:05:37.510 --> 00:05:39.320
So this looks like it says three squared.
92

93
00:05:39.320 --> 00:05:42.890
Of course that should equal nine but it equals one.
93

94
00:05:42.950 --> 00:05:45.760
So three times three is not equal to one.
94

95
00:05:45.890 --> 00:05:53.880
And this notation I briefly introduced you to in a previous video, and basically the problem is that
95

96
00:05:54.150 --> 00:05:57.750
in Python you indicate power is using a double asterisk.
96

97
00:05:57.750 --> 00:06:00.860
So three squared equals nine.
97

98
00:06:00.920 --> 00:06:04.030
All right we've fixed that one as well.
98

99
00:06:04.220 --> 00:06:05.360
Onto the next one!
99

100
00:06:05.370 --> 00:06:08.470
Let's see what the problem is here.
100

101
00:06:08.810 --> 00:06:15.300
And we get an error that says invalid syntax and this little gray caret sign here is right at the end
101

102
00:06:15.470 --> 00:06:16.360
huh.
102

103
00:06:16.440 --> 00:06:17.640
And here is the problem.
103

104
00:06:17.640 --> 00:06:19.020
There is no colon.
104

105
00:06:19.020 --> 00:06:27.840
We need to have a colon at the end of this for loop and now I think it works fine. Let's see: 0 times 2 is 0, 2 and
105

106
00:06:27.840 --> 00:06:28.620
then 4.
106

107
00:06:28.620 --> 00:06:28.980
All right.
107

108
00:06:29.010 --> 00:06:35.770
So that was a pretty simple case of just accidentally forgetting to type the colon.
108

109
00:06:35.850 --> 00:06:36.410
Great.
109

110
00:06:36.420 --> 00:06:39.640
We are doing great let's see.
110

111
00:06:39.640 --> 00:06:46.390
So now I'm creating two variables A and B and then it looks like I'm setting some result to be equal
111

112
00:06:46.390 --> 00:06:52.330
to two times A is equal to or less than B and then printing that result.
112

113
00:06:52.330 --> 00:06:53.450
So.
113

114
00:06:54.150 --> 00:07:01.470
And here we get another invalid syntax error and I believe the problem here is that it should actually
114

115
00:07:01.470 --> 00:07:06.050
be less than or equal to B.
115

116
00:07:06.490 --> 00:07:06.880
Yep.
116

117
00:07:06.930 --> 00:07:07.650
So now it works.
117

118
00:07:07.650 --> 00:07:13.140
So that was a really simple case of just putting the less than sign on the wrong side of the equals
118

119
00:07:13.140 --> 00:07:14.440
sign.
119

120
00:07:14.460 --> 00:07:15.000
All right.
120

121
00:07:15.030 --> 00:07:15.540
This is good.
121

122
00:07:15.540 --> 00:07:18.090
We're making good progress here.
122

123
00:07:18.120 --> 00:07:18.510
Let's see.
123

124
00:07:18.510 --> 00:07:22.940
So first I'm going to check for the colon because we got stung with that one before.
124

125
00:07:22.950 --> 00:07:23.170
All right.
125

126
00:07:23.220 --> 00:07:25.770
So let's see what this one says.
126

127
00:07:26.070 --> 00:07:29.450
Still something going on here... huh...
127

128
00:07:29.490 --> 00:07:34.710
And now here the problem is that someone wrote if and then then I don't know who wrote this.
128

129
00:07:34.710 --> 00:07:37.270
Probably someone who's not a very good programmer.
129

130
00:07:37.560 --> 00:07:43.530
Now these kinds of statements, these kinds of control statements are sometimes called if then statements
130

131
00:07:43.920 --> 00:07:49.980
and in some computer languages you actually do need to put a "then" statement here.
131

132
00:07:49.980 --> 00:07:57.000
But in python you don't; you just make the if statement, you write the word if and then you put the
132

133
00:07:57.030 --> 00:08:04.050
conditional, which evaluates to true or false, and then the colon.
133

134
00:08:04.190 --> 00:08:04.670
All right.
134

135
00:08:04.700 --> 00:08:05.330
Good.
135

136
00:08:05.330 --> 00:08:07.280
Fifty is greater than 40.
136

137
00:08:07.280 --> 00:08:09.740
Well it's not quite time to celebrate.
137

138
00:08:09.740 --> 00:08:12.760
We have a little bit more to go before we can celebrate.
138

139
00:08:12.800 --> 00:08:14.090
It's almost time to celebrate.
139

140
00:08:14.110 --> 00:08:16.230
I'll even change this here.
140

141
00:08:16.550 --> 00:08:18.500
Almost time to celebrate.
141

142
00:08:18.500 --> 00:08:26.270
There you go. Okay so here it looks like what we're trying to do is input a number and then just print
142

143
00:08:26.270 --> 00:08:27.210
out that number.
143

144
00:08:27.230 --> 00:08:33.980
Pretty straightforward, except we get another invalid syntax error. And here,
144

145
00:08:33.980 --> 00:08:42.040
the issue is that what goes inside the input to the input function has to be a string.
145

146
00:08:42.050 --> 00:08:47.480
This is not a string; I'm just writing in words here and you can see that Python is even getting confused
146

147
00:08:47.510 --> 00:08:54.500
because python is actually thinking that I'm trying to use the input function as the input into the
147

148
00:08:54.500 --> 00:08:56.300
input function.
148

149
00:08:56.300 --> 00:08:56.570
All right.
149

150
00:08:56.600 --> 00:09:04.700
So what we need to do is encase all of this text in single quotes and now we get,
150

151
00:09:04.720 --> 00:09:10.820
So let's say about forty two and Okay this works. Next cell.
151

152
00:09:10.830 --> 00:09:13.110
So here we are at Division.
152

153
00:09:13.110 --> 00:09:17.540
It looks like we're trying to divide 4 by 10.
153

154
00:09:18.000 --> 00:09:23.310
And now we get an error says unexpected character after line continuation character.
154

155
00:09:23.310 --> 00:09:29.960
So even without knowing anything about what that means you might be able to guess that we are just having
155

156
00:09:30.020 --> 00:09:32.530
the wrong slash orientation here.
156

157
00:09:32.530 --> 00:09:36.530
In fact you can see if you look down at this slash here this is purple.
157

158
00:09:36.530 --> 00:09:39.610
Notice this is highlighted purple just like the plus sign.
158

159
00:09:39.690 --> 00:09:41.930
And this is not this is thin and black.
159

160
00:09:41.930 --> 00:09:50.410
So in fact, we need the percent... or sorry, the division signed to be represented using a forward slash.
160

161
00:09:50.450 --> 00:09:53.570
All right let's go down to this one here.
161

162
00:09:53.570 --> 00:09:55.250
This seems pretty straightforward.
162

163
00:09:55.250 --> 00:09:59.300
I actually don't see immediately what the error is.
163

164
00:09:59.300 --> 00:09:59.540
All right.
164

165
00:09:59.570 --> 00:10:01.760
So let's try to input a number.
165

166
00:10:01.760 --> 00:10:04.880
I'm gonna say four and another number.
166

167
00:10:04.880 --> 00:10:11.200
How about three and this says the sum of four and three is forty three.
167

168
00:10:11.230 --> 00:10:18.310
Okay so maybe your little sister thinks that four plus three is forty three, but actually this is not
168

169
00:10:18.310 --> 00:10:19.250
the right answer.
169

170
00:10:19.270 --> 00:10:25.930
This is, in fact, a really similar problem that we encountered at the very very beginning the very first
170

171
00:10:25.930 --> 00:10:26.910
problem.
171

172
00:10:27.010 --> 00:10:35.230
So the issue here is that these numbers get input it has strings they get represented as strings but
172

173
00:10:35.230 --> 00:10:38.020
we need them to be actual numbers.
173

174
00:10:38.020 --> 00:10:45.550
So therefore you can either encase the input function here in the function int, which will convert it
174

175
00:10:45.550 --> 00:10:52.060
to an integer or the function float which will convert it into a floating point number or a number that
175

176
00:10:52.060 --> 00:10:53.260
has a decimal point.
176

177
00:10:53.880 --> 00:10:54.120
All right.
177

178
00:10:54.160 --> 00:10:55.510
So I used float.
178

179
00:10:55.510 --> 00:10:57.520
So let's try this again.
179

180
00:10:57.530 --> 00:11:03.310
Input a number about four point four and another number will be three point three.
180

181
00:11:04.480 --> 00:11:04.830
Okay.
181

182
00:11:04.840 --> 00:11:10.360
And now this says the sum of four point four and three point three is seven point seven.
182

183
00:11:10.360 --> 00:11:14.410
That is mathematically correct.
183

184
00:11:14.410 --> 00:11:15.310
We're doing good.
184

185
00:11:15.310 --> 00:11:16.450
We're getting close.
185

186
00:11:16.990 --> 00:11:17.620
Let's see.
186

187
00:11:17.620 --> 00:11:23.350
I don't immediately see something wrong here, this part of the latex code certainly looks good with the
187

188
00:11:23.410 --> 00:11:24.930
double backslash.
188

189
00:11:25.270 --> 00:11:33.100
Oh but we have an error it says expected EOF is for end of file while passing.
189

190
00:11:33.260 --> 00:11:41.120
Now there's a little visualization tool in Python or in Jupiter and IPython notebooks.
190

191
00:11:41.200 --> 00:11:49.330
Now notice that this set of parentheses here is black but when I put the cursor on it it turns green
191

192
00:11:49.420 --> 00:11:54.390
and the corresponding other parenthesis also turns green.
192

193
00:11:54.400 --> 00:12:01.000
So this is green that's handy it lets me match which parentheses goes with which other pair.
193

194
00:12:01.000 --> 00:12:04.310
So now when I put the cursor here I see this is green.
194

195
00:12:04.540 --> 00:12:06.790
And then this is highlighted green here.
195

196
00:12:06.880 --> 00:12:12.380
But that means that we are actually missing the end parenthesis for this parenthesis here.
196

197
00:12:12.520 --> 00:12:15.550
And you can see that as well when I click on it it turns red.
197

198
00:12:15.550 --> 00:12:21.490
So I'm going to put another parenthesis here and you also know from this little gray caret symbol that
198

199
00:12:21.490 --> 00:12:25.060
the problem was here at this part of the code.
199

200
00:12:25.170 --> 00:12:25.580
All right.
200

201
00:12:25.690 --> 00:12:28.550
And now we get a sensible answer.
201

202
00:12:28.630 --> 00:12:31.540
Nine divided by three is three.
202

203
00:12:31.540 --> 00:12:34.240
All right next one I'm already going to check.
203

204
00:12:34.240 --> 00:12:36.430
So actually the parentheses are correct here.
204

205
00:12:36.430 --> 00:12:40.310
You can see there are three, as there should be.
205

206
00:12:40.330 --> 00:12:44.340
So what could be the problem on this line?
206

207
00:12:44.350 --> 00:12:51.190
The problem on this line is that nine divided by three is definitely not equal to two point two five.
207

208
00:12:51.670 --> 00:12:55.330
So in fact, in this case there is no programming error.
208

209
00:12:55.340 --> 00:12:57.230
There's nothing wrong with the latex code.
209

210
00:12:57.250 --> 00:12:59.550
There's nothing wrong with the python code.
210

211
00:12:59.560 --> 00:13:01.940
This is a mathematical error.
211

212
00:13:02.050 --> 00:13:07.780
And the problem here is that I wrote nine and three for the numerator and denominator but then here
212

213
00:13:07.780 --> 00:13:10.870
I wrote equals nine divided by four.
213

214
00:13:10.900 --> 00:13:12.310
So it's pretty simple fix.
214

215
00:13:12.310 --> 00:13:15.300
You could write you could change this three to be four.
215

216
00:13:15.310 --> 00:13:18.180
You could have also changed this for it to be three.
216

217
00:13:18.670 --> 00:13:26.710
Of course an even better solution would be to set variables, for example to say you know a equals nine
217

218
00:13:26.740 --> 00:13:28.820
and then B equals four.
218

219
00:13:28.840 --> 00:13:32.850
And then of course replacing this with a and b and so forth.
219

220
00:13:33.060 --> 00:13:33.400
Okay.
220

221
00:13:33.400 --> 00:13:38.060
And then we get to the very last exercise. I'm having so much fun here!
221

222
00:13:38.200 --> 00:13:40.620
I'm almost sorry that they're done.
222

223
00:13:40.960 --> 00:13:49.030
So this is a while loop and a while loop is different from a for loop. A for loop operates by let's see
223

224
00:13:49.030 --> 00:13:49.980
So here's a for loop.
224

225
00:13:49.990 --> 00:13:57.100
So the way that a for loop works is that all the code inside the loop gets run only a number of times
225

226
00:13:57.100 --> 00:13:59.070
corresponding to whatever...
226

227
00:13:59.080 --> 00:14:04.370
however many elements in this variable after the in keyword.
227

228
00:14:04.660 --> 00:14:06.010
A while loop is different.
228

229
00:14:06.010 --> 00:14:09.910
The while loop has a conditional, it's a boolean conditional here.
229

230
00:14:09.910 --> 00:14:11.790
So it's either true or false.
230

231
00:14:12.010 --> 00:14:20.890
And all the code inside the while loop is run continuously over and over and over again until this conditional
231

232
00:14:20.920 --> 00:14:21.880
becomes false.
232

233
00:14:21.910 --> 00:14:25.270
So as long as this is true this code will keep running.
233

234
00:14:25.390 --> 00:14:27.580
So let's see what happens when I run this.
234

235
00:14:28.240 --> 00:14:30.640
Oh we get lots and lots of ones.
235

236
00:14:30.640 --> 00:14:31.240
Look at this.
236

237
00:14:31.240 --> 00:14:32.280
This is ridiculous.
237

238
00:14:32.290 --> 00:14:33.720
How many ones are here :(
238

239
00:14:33.790 --> 00:14:38.050
In fact, I'm going to have to go up here press Kernel, and interrupt.
239

240
00:14:38.080 --> 00:14:42.410
So I forced the kernel to stop.
240

241
00:14:42.420 --> 00:14:49.980
So what's happening here is that I set the variables t to be equal to 1 and then I'm just printing out
241

242
00:14:50.010 --> 00:14:57.280
T which is 1, and I don't ever do anything with t; I don't update it, I don't say that t should be anything
242

243
00:14:57.280 --> 00:14:57.860
else.
243

244
00:14:57.880 --> 00:15:04.040
So that means that t is always less than 11 -- t is never not less than eleven.
244

245
00:15:04.090 --> 00:15:04.320
OK.
245

246
00:15:04.330 --> 00:15:10.300
So what I'm going to do is write t equals T plus 1.
246

247
00:15:10.300 --> 00:15:16.630
So now each time we go through this loop each iteration of this while loop t is incremented.
247

248
00:15:16.780 --> 00:15:25.210
So now I run this cell again and now we see t is equal to 1 through 10 and then essentially what happens
248

249
00:15:25.240 --> 00:15:34.570
is we print t when it equals 10 and then t gets set to be T plus 1, which becomes 11 and then the python
249

250
00:15:34.570 --> 00:15:34.900
will.
250

251
00:15:35.050 --> 00:15:41.980
Will check this a boolean here, this conditional, and T is equal to eleven, which means that t is not
251

252
00:15:41.980 --> 00:15:44.500
less than 11 which means that this is false.
252

253
00:15:44.530 --> 00:15:51.550
So the while loop is finished. And it's interesting to compare the output for this while loop like this
253

254
00:15:51.910 --> 00:15:57.100
where the print statement is first and the updating statement is second,
254

255
00:15:57.130 --> 00:16:00.050
and that gives us the numbers 1 through 10, versus
255

256
00:16:00.130 --> 00:16:02.110
If I would just swap the order here.
256

257
00:16:02.110 --> 00:16:09.300
So it's exactly the same code; I've just swapped the order. And now we get the numbers two through eleven.
257

258
00:16:09.490 --> 00:16:16.210
So I will let you ponder this why you get this difference between setting up the while loop like this
258

259
00:16:16.270 --> 00:16:18.300
versus setting up the while loop like this.
259

260
00:16:18.760 --> 00:16:22.030
But for now I'm going to call this video to a close.
260

261
00:16:22.030 --> 00:16:28.570
I hope you enjoyed this, and I hope that you improved your python coding skills a bit by finding and
261

262
00:16:28.570 --> 00:16:31.150
fixing all of the problems in this code.
