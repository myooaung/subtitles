0
1
00:00:04,630 --> 00:00:06,910
This video is a bug hunt.
1

2
00:00:07,000 --> 00:00:14,590
So what you have to do is go through this code, look through each cell and basically run the cell and
2

3
00:00:14,590 --> 00:00:16,770
try to figure out what the problem is.
3

4
00:00:16,810 --> 00:00:20,330
Every one of these cells contains at least one problem.
4

5
00:00:20,350 --> 00:00:26,050
Sometimes there is a full blown error -- you will get an error message in Python -- and there'll be a couple
5

6
00:00:26,050 --> 00:00:32,830
of other cases where you don't really get an error but it's probably not doing what you want the code
6

7
00:00:32,830 --> 00:00:33,670
to do.
7

8
00:00:33,700 --> 00:00:38,010
So in those cases you have to do a little bit of guesswork to try to guess what....
8

9
00:00:38,050 --> 00:00:43,250
whoever wrote the code (i.e. me) was intending to be done with it.
9

10
00:00:43,300 --> 00:00:43,580
All right.
10

11
00:00:43,600 --> 00:00:49,240
So if you haven't already gone through this code then now is your chance to pause the video and go through
11

12
00:00:49,240 --> 00:00:49,350
it.
12

13
00:00:49,360 --> 00:00:54,440
Because now I will start going through cell by painful cell.
13

14
00:00:54,490 --> 00:00:54,730
All right.
14

15
00:00:54,760 --> 00:00:55,330
So let's see.
15

16
00:00:55,330 --> 00:01:01,390
So my approach is just going to be to run each cell and then start looking at the error.
16

17
00:01:01,420 --> 00:01:01,720
All right.
17

18
00:01:01,750 --> 00:01:03,720
So this error is about,
18

19
00:01:03,790 --> 00:01:05,220
so it's coming from this line.
19

20
00:01:05,230 --> 00:01:06,960
It's coming from the first line.
20

21
00:01:06,990 --> 00:01:12,640
Now maybe you think that the error happened because we didn't yet import these sympy module.
21

22
00:01:12,670 --> 00:01:18,040
However, in this case I'm not actually importing the entire module, or we don't need to import the entire
22

23
00:01:18,040 --> 00:01:18,770
module.
23

24
00:01:18,870 --> 00:01:24,910
We are importing only x2 from part of the module ABC.
24

25
00:01:25,210 --> 00:01:29,830
But actually it turns out that you can only import single letters, so either
25

26
00:01:29,830 --> 00:01:30,970
so we have two options here.
26

27
00:01:31,000 --> 00:01:36,060
Either we change this from X2 into x, and now it's going to work.
27

28
00:01:36,070 --> 00:01:39,920
I can type x here or I would have to,
28

29
00:01:39,940 --> 00:01:40,680
Let me see it.
29

30
00:01:40,810 --> 00:01:44,110
Undo. I'll leave this... or this can be x 2.
30

31
00:01:44,560 --> 00:01:52,350
But then I would need to say X to equals sym dot symbols, and then X2 like this.
31

32
00:01:52,360 --> 00:01:55,170
Now in that case this is also not going to work.
32

33
00:01:55,240 --> 00:02:00,520
Sym is not defined because I haven't yet imported the sympy toolbox.
33

34
00:02:00,520 --> 00:02:05,990
However, you can see that we're going to need the sympy module further down below.
34

35
00:02:05,990 --> 00:02:11,230
So I'm also just going to import sympy as sym.
35

36
00:02:11,230 --> 00:02:11,530
All right.
36

37
00:02:11,550 --> 00:02:14,870
So now that also works.
37

38
00:02:14,890 --> 00:02:18,220
So now we get to the next one and let's run that and see what happens.
38

39
00:02:18,250 --> 00:02:19,010
OK.
39

40
00:02:19,060 --> 00:02:20,770
Name D is not defined.
40

41
00:02:20,800 --> 00:02:22,390
That's a pretty simple one to fix.
41

42
00:02:22,390 --> 00:02:26,740
We can say comma D and here comma D.
42

43
00:02:27,100 --> 00:02:27,460
All right.
43

44
00:02:27,490 --> 00:02:29,340
So that one looks good.
44

45
00:02:29,440 --> 00:02:31,300
Here we see import math.
45

46
00:02:31,330 --> 00:02:37,450
And then we were using the greatest common denominator function to determine the greatest common denominator
46

47
00:02:37,480 --> 00:02:39,410
between these two numbers.
47

48
00:02:40,060 --> 00:02:41,620
So that seems like it should be fine.
48

49
00:02:41,710 --> 00:02:48,370
And you learned that the G C D function is in fact contained inside the math module... oops but we get
49

50
00:02:48,730 --> 00:02:51,350
named G C D is not defined.
50

51
00:02:51,460 --> 00:02:56,650
So we have two options for fixing this. One, which is my preferred option,
51

52
00:02:56,650 --> 00:03:02,650
I think this is the best way to do it, to type math dot to make it clear that G C.D. is in the math
52

53
00:03:02,710 --> 00:03:03,620
module.
53

54
00:03:03,910 --> 00:03:05,560
So that one works.
54

55
00:03:05,560 --> 00:03:12,190
Another way to do it would be to say from math import G C D.
55

56
00:03:12,430 --> 00:03:14,410
And then we don't need this here.
56

57
00:03:14,440 --> 00:03:20,770
So now this is actually importing the G C D function from the math module and then this gets imported
57

58
00:03:20,770 --> 00:03:23,680
directly into the main workspace of Python.
58

59
00:03:24,220 --> 00:03:25,710
Now this is also fine.
59

60
00:03:25,720 --> 00:03:32,260
The reason why this is a slightly less preferred solution is that this now means that G D cannot be
60

61
00:03:32,260 --> 00:03:38,380
used as a variable or shouldn't be used as a variable because we are having it be this G C D function
61

62
00:03:38,380 --> 00:03:40,240
from the math module.
62

63
00:03:40,240 --> 00:03:46,510
Furthermore, there are other cases which you will see in fact you've already seen this and you will continue
63

64
00:03:46,510 --> 00:03:52,900
to see this as use python more and more, that different modules can have functions of the same name but
64

65
00:03:52,900 --> 00:03:55,100
they might operate slightly differently.
65

66
00:03:55,120 --> 00:04:01,830
For example, there is numpy dot square root and there is scipy dot square root and there is sympy
66

67
00:04:01,830 --> 00:04:03,260
dot square root.
67

68
00:04:03,260 --> 00:04:05,600
There might also be a math dot square root.
68

69
00:04:05,600 --> 00:04:05,890
Yeah.
69

70
00:04:06,520 --> 00:04:11,200
So there you go: the square root function exists in at least four modules.
70

71
00:04:11,200 --> 00:04:14,170
Maybe there are even more that I'm not aware of at the moment.
71

72
00:04:14,170 --> 00:04:19,000
So for this reason I generally find it a good strategy.
72

73
00:04:19,000 --> 00:04:19,420
Good
73

74
00:04:19,540 --> 00:04:27,690
python programming to say import math and then to use the name of the module and then a dot.
74

75
00:04:27,790 --> 00:04:28,150
All right.
75

76
00:04:28,170 --> 00:04:28,990
So now.
76

77
00:04:28,990 --> 00:04:29,880
Oh look at this.
77

78
00:04:29,890 --> 00:04:34,480
This one has pretty much the same problem, so name solve is not defined.
78

79
00:04:34,510 --> 00:04:38,660
So here that's also in the sympy module.
79

80
00:04:38,760 --> 00:04:39,030
OK.
80

81
00:04:39,040 --> 00:04:45,700
So there's actually another problem, which I inadvertently caused, and that's because I set X to be the
81

82
00:04:45,700 --> 00:04:46,780
number four
82

83
00:04:46,780 --> 00:04:47,380
down here.
83

84
00:04:47,410 --> 00:04:55,480
So I'm going to redefine x so x equals some symbols X.
84

85
00:04:55,510 --> 00:04:55,930
There you go.
85

86
00:04:55,960 --> 00:04:58,890
So this looks better when x equals two.
86

87
00:04:58,960 --> 00:05:03,770
This expression, which equals zero, is true.
87

88
00:05:03,800 --> 00:05:06,740
So let's see what's going on here... huh.
88

89
00:05:06,760 --> 00:05:11,980
So here there's nothing wrong, we don't get any error messages or anything, but there is a comment in
89

90
00:05:11,990 --> 00:05:14,230
here that says make it look nice.
90

91
00:05:14,270 --> 00:05:21,050
So my guess, based on my knowledge of whoever wrote this code, is that we probably want to make this thing
91

92
00:05:21,050 --> 00:05:22,530
look a little bit nicer.
92

93
00:05:22,640 --> 00:05:25,390
For example using LaTeX coding.
93

94
00:05:25,640 --> 00:05:34,380
So then the arrangement is display and then math and then sym latex.
94

95
00:05:35,750 --> 00:05:36,110
All right.
95

96
00:05:36,140 --> 00:05:42,290
So I realized that I just gave you this whole long lecture about how you shouldn't import individual
96

97
00:05:42,290 --> 00:05:50,190
functions directly into the python workspace and yet I do it all the time with display and math.
97

98
00:05:50,210 --> 00:05:54,530
So I guess I'm not always entirely consistent with the advice that I give :\
98

99
00:05:54,530 --> 00:05:54,860
Let's see.
99

100
00:05:54,890 --> 00:06:07,310
So we want to, let's see from Ipython dot display import  display and math.
100

101
00:06:07,310 --> 00:06:07,580
Right.
101

102
00:06:07,580 --> 00:06:10,290
So this is looking a little bit better maybe.
102

103
00:06:10,700 --> 00:06:16,940
But you might remember from the video on using matrices to store data that in fact what we need to do
103

104
00:06:16,940 --> 00:06:18,710
is also sympify this.
104

105
00:06:18,710 --> 00:06:27,800
So a is currently a numpy array but we need to make it into a sympy object, so sympy dot
105

106
00:06:28,440 --> 00:06:29,020
sympify
106

107
00:06:32,240 --> 00:06:32,690
all right.
107

108
00:06:32,690 --> 00:06:35,480
And now this looks much better.
108

109
00:06:35,480 --> 00:06:36,110
OK let's see.
109

110
00:06:36,110 --> 00:06:43,580
So here we are doing prime factorization of the number 44, putting the results into dictionary and then
110

111
00:06:43,610 --> 00:06:46,260
getting all of the keys out of that dictionary.
111

112
00:06:46,640 --> 00:06:52,580
And then here's a loop and it looks like we're looping through the number of keys and printing out number
112

113
00:06:52,580 --> 00:06:54,470
was present number time.
113

114
00:06:54,470 --> 00:07:00,620
So I think this is supposed to say the prime number -- the prime factor -- and the number of times that that
114

115
00:07:00,710 --> 00:07:07,480
prime number was present in... goes into making up this number 44.
115

116
00:07:07,570 --> 00:07:07,880
Okay.
116

117
00:07:07,880 --> 00:07:08,470
So let's see.
117

118
00:07:08,470 --> 00:07:08,720
Huh.
118

119
00:07:08,720 --> 00:07:11,390
Here we get an error.
119

120
00:07:11,400 --> 00:07:12,540
This is not subscript double.
120

121
00:07:12,560 --> 00:07:15,100
But you know I don't even think this is a good approach.
121

122
00:07:15,110 --> 00:07:18,510
So I'm going to do some pretty drastic editing here.
122

123
00:07:18,560 --> 00:07:20,750
I'm gonna get rid of this entirely.
123

124
00:07:20,870 --> 00:07:23,300
In fact I'm even going to get rid of this entirely.
124

125
00:07:23,300 --> 00:07:24,430
I'm going to simplify this.
125

126
00:07:24,430 --> 00:07:26,680
We're doing whoever wrote this code
126

127
00:07:26,690 --> 00:07:28,570
we're doing them a big favor.
127

128
00:07:28,580 --> 00:07:39,480
So for i in fact dict and then we say that the key was present fact dict I times see all that looks
128

129
00:07:39,540 --> 00:07:43,920
Two was present twice and 11 was present once and that makes,
129

130
00:07:43,920 --> 00:07:46,850
We have eleven times two twice.
130

131
00:07:46,890 --> 00:07:50,110
That would be 11 times four makes forty four.
131

132
00:07:50,370 --> 00:07:50,700
All right.
132

133
00:07:50,720 --> 00:07:52,650
That's for that cell.
133

134
00:07:52,740 --> 00:07:54,950
Let's see what's going on here.
134

135
00:07:55,120 --> 00:07:56,860
Okay invalid syntax.
135

136
00:07:56,860 --> 00:07:58,270
All we're trying to say.
136

137
00:07:58,380 --> 00:07:59,550
X equals five.
137

138
00:07:59,550 --> 00:08:01,230
What is going on here??
138

139
00:08:01,260 --> 00:08:09,780
You will remember from the subs method that one way to input the variables in the replacements is to
139

140
00:08:09,780 --> 00:08:10,800
use a dictionary.
140

141
00:08:10,830 --> 00:08:13,380
But this is not the way the dictionary works.
141

142
00:08:13,380 --> 00:08:16,420
We need to say the key and then the value.
142

143
00:08:16,440 --> 00:08:19,340
So the key is X and the value is five.
143

144
00:08:19,410 --> 00:08:23,400
But in between them is a colon like this.
144

145
00:08:23,460 --> 00:08:29,280
So now we get when we replace X for five we get twenty four times five is 20.
145

146
00:08:29,280 --> 00:08:30,420
That's this term.
146

147
00:08:30,420 --> 00:08:32,580
And then well this term has no x's.
147

148
00:08:32,610 --> 00:08:36,510
So it stays as itself as a function of y.
148

149
00:08:36,510 --> 00:08:36,770
Okay.
149

150
00:08:36,840 --> 00:08:40,050
So here it says The goal is to show a fraction.
150

151
00:08:40,050 --> 00:08:41,030
So let's see.
151

152
00:08:41,220 --> 00:08:48,730
Run this cell and we do not get a fraction. So again, there's no explicit coding errors here but I don't
152

153
00:08:48,730 --> 00:08:55,190
think that this is actually doing what the author -- the writer of this code -- wants us to be doing.
153

154
00:08:55,210 --> 00:08:58,780
So how can we show this as a fraction?
154

155
00:09:00,100 --> 00:09:04,840
Well one thing we can do or one thing we can try is to convert this from a number
155

156
00:09:04,860 --> 00:09:09,090
So the number five divided by nine into a simple object.
156

157
00:09:09,100 --> 00:09:16,840
So let's try sym dot sympify and then putting the fraction in here huh.
157

158
00:09:16,840 --> 00:09:19,190
And that doesn't really change anything.
158

159
00:09:19,270 --> 00:09:25,380
Now the reason why that didn't change anything is because five divided by nine is already computed.
159

160
00:09:25,390 --> 00:09:34,060
This is evaluated as a number and then that number which is point 55555555 becomes simplified
160

161
00:09:35,500 --> 00:09:41,510
So in fact what we want to do is sympify the individual numbers before they get divided.
161

162
00:09:41,710 --> 00:09:47,520
And it turns out that one way to do that, or a good way to do that, is just to sympify one of those, so
162

163
00:09:47,530 --> 00:09:51,420
now five is no longer a number;
163

164
00:09:51,430 --> 00:09:53,890
so in here actually 5 is still a number.
164

165
00:09:53,890 --> 00:10:00,700
But out here before we get to the division 5 becomes the sympy version of 5.
165

166
00:10:00,730 --> 00:10:06,190
So a symbolic number five rather than the analytic or numeric number five.
166

167
00:10:07,900 --> 00:10:09,380
And then we get the right answer.
167

168
00:10:09,400 --> 00:10:10,270
Now if you want.
168

169
00:10:10,270 --> 00:10:14,490
You can also make nine be symbolic like this.
169

170
00:10:14,920 --> 00:10:24,190
However as you can see from this example that is not actually necessary so basically in this expression
170

171
00:10:24,190 --> 00:10:27,240
here this is a symbolic representation of five.
171

172
00:10:27,250 --> 00:10:29,230
And this is the actual number five.
172

173
00:10:29,290 --> 00:10:33,800
But as long as one of them is symbolic we'll still get a fraction like this.
173

174
00:10:33,820 --> 00:10:34,110
OK.
174

175
00:10:34,120 --> 00:10:38,500
Here we want to print the last three items from a list.
175

176
00:10:38,530 --> 00:10:40,690
So this seems like it should work.
176

177
00:10:40,690 --> 00:10:42,570
We have minus three.
177

178
00:10:42,580 --> 00:10:46,380
So that means from the end minus three and then minus one.
178

179
00:10:46,390 --> 00:10:52,750
And I think this should work because if we just say list minus one we do get the final item.
179

180
00:10:52,750 --> 00:10:57,600
So let's try this with minus three colon minus one huh.
180

181
00:10:57,610 --> 00:11:02,950
And now this actually returns just five and three and not the very last one.
181

182
00:11:02,980 --> 00:11:09,250
So we actually just need to get rid of this minus one and say minus three until the end.
182

183
00:11:09,250 --> 00:11:10,450
So there you go.
183

184
00:11:10,450 --> 00:11:10,750
All right.
184

185
00:11:10,780 --> 00:11:12,490
So let's see what's going on here.
185

186
00:11:12,490 --> 00:11:14,610
This says solve for y.
186

187
00:11:14,860 --> 00:11:19,470
And here, it looks like, so we get a dictionary and it looks like it's actually solving for x.
187

188
00:11:19,480 --> 00:11:22,390
So we get x in terms of y.
188

189
00:11:22,390 --> 00:11:25,170
So the solution here is we say comma Y.
189

190
00:11:25,180 --> 00:11:33,100
So we are explicitly telling the sympy module and the solve function that we want to solve for
190

191
00:11:33,100 --> 00:11:33,480
y.
191

192
00:11:34,080 --> 00:11:40,240
And then the answer is minus X over two, and that you can also we can even just compute it in our heads
192

193
00:11:40,240 --> 00:11:40,900
here.
193

194
00:11:40,900 --> 00:11:45,190
So this is implicitly there is a equals zero over here.
194

195
00:11:45,220 --> 00:11:51,010
So then we subtract two X from both sides so that gives us the minus two X over here and then divide
195

196
00:11:51,010 --> 00:11:51,910
by two.
196

197
00:11:51,910 --> 00:11:55,040
And that gives us minus X divided over two.
197

198
00:11:55,690 --> 00:11:55,950
All right.
198

199
00:11:55,980 --> 00:11:57,520
So let's see what we're doing here.
199

200
00:11:57,520 --> 00:12:00,040
Here we create a matrix.
200

201
00:12:00,130 --> 00:12:05,320
So the first row is 1 to the second row is 3 4.
201

202
00:12:05,410 --> 00:12:11,770
And now what we want to do is set the element in the second row and second column to be nine instead
202

203
00:12:11,770 --> 00:12:12,390
of four.
203

204
00:12:13,060 --> 00:12:14,160
So the error message.
204

205
00:12:14,200 --> 00:12:15,470
It's an index error.
205

206
00:12:15,550 --> 00:12:20,920
And the message says index 2 is out of bounds for Axis 0 with size 2.
206

207
00:12:20,920 --> 00:12:24,470
So an axis in Python is just the dimension.
207

208
00:12:24,730 --> 00:12:29,180
But the problem here is that Python starts counting at zero.
208

209
00:12:29,200 --> 00:12:35,740
So in fact, the second row second column has index 1 comma 1.
209

210
00:12:35,770 --> 00:12:38,860
So there we go we've replaced the second row.
210

211
00:12:38,860 --> 00:12:43,000
And so the second row and second column which was originally a four.
211

212
00:12:43,000 --> 00:12:45,790
We've replaced it with a nine.
212

213
00:12:45,790 --> 00:12:46,180
All right.
213

214
00:12:46,180 --> 00:12:49,230
So I hope you enjoyed working through this bug hunt.
214

215
00:12:49,810 --> 00:12:55,390
And I hope you feel like you've improved your coding skills and I hope you're really excited for the
215

216
00:12:55,390 --> 00:12:56,470
next section of the course.
216

217
00:12:56,500 --> 00:12:58,390
It's going to be just great.
