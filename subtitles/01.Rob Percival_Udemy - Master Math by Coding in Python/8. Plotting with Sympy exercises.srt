1
00:00:03,660 --> 00:00:10,560
This video is a follow up to the previous video where I introduced you to plotting using the simple

2
00:00:10,810 --> 00:00:11,660
module.

3
00:00:11,820 --> 00:00:17,820
So if you haven't gone through the previous video then I recommend having a look at that before moving

4
00:00:17,820 --> 00:00:19,460
on to this one.

5
00:00:19,500 --> 00:00:24,990
All right so this video is basically going to involve generating this plot.

6
00:00:24,990 --> 00:00:32,750
Now this plot is showing the function Y equals X divided by the quantity x squared minus a.

7
00:00:32,760 --> 00:00:37,750
So you want to do is define this function using simple.

8
00:00:37,780 --> 00:00:44,380
So these are symbolic variables here and then you want to substitute for a the numbers one two three

9
00:00:44,400 --> 00:00:45,140
four.

10
00:00:45,240 --> 00:00:49,980
And each time you substitute that's going to generate a new line in a plot.

11
00:00:50,010 --> 00:00:54,460
So ultimately you're going to get a result that looks like this.

12
00:00:54,540 --> 00:01:01,350
So you can see that the x axis limits go from minus five to plus five the y axis limits go from minus

13
00:01:01,350 --> 00:01:02,290
10 to plus 10.

14
00:01:02,310 --> 00:01:06,330
And there is a legend showing what each of the functions are.

15
00:01:06,660 --> 00:01:13,220
Now the way that I generated this plot was by having random numbers assigned to the color.

16
00:01:13,260 --> 00:01:19,050
So that means every time I rerun this piece of code the colors are going to be different the functions

17
00:01:19,050 --> 00:01:23,610
will all be the same the legends will be the same but the colors will all be different.

18
00:01:23,610 --> 00:01:28,860
So you can think of that as like a little extra bonus to try and get that to work otherwise that the

19
00:01:28,860 --> 00:01:30,720
color doesn't matter so much.

20
00:01:30,720 --> 00:01:36,330
The more important thing is getting this function with these parameters for a to produce a plot that

21
00:01:36,330 --> 00:01:37,530
looks like this.

22
00:01:37,530 --> 00:01:38,010
All right.

23
00:01:38,010 --> 00:01:43,410
So now is your chance to pause the video work through this code on your own.

24
00:01:44,190 --> 00:01:51,480
And now I'm going to switch to Python and show you how I went about producing this plot so I'm going

25
00:01:51,480 --> 00:01:56,900
to continue working from the script that I showed from the previous video.

26
00:01:57,000 --> 00:01:59,600
So we start by defining our function.

27
00:01:59,610 --> 00:02:06,520
So y equals a divided by x squared minus a k.

28
00:02:06,570 --> 00:02:12,580
So there's the function and now the way that I'm going to do this is setup a loop.

29
00:02:12,660 --> 00:02:17,670
So it's gonna be for i in range of something.

30
00:02:17,670 --> 00:02:25,050
I'll get back to that something in a moment and then I'm gonna write p dot extend to extend the plot

31
00:02:25,200 --> 00:02:29,900
and then I will say then I'll basically have to change the label.

32
00:02:29,940 --> 00:02:30,150
Okay.

33
00:02:30,180 --> 00:02:36,480
So this is not yet operational code of course but I just want to paint a little bit of a high level

34
00:02:36,480 --> 00:02:41,820
picture of what I'm going to be doing that helps me organize my thoughts to write out a little bit of

35
00:02:42,090 --> 00:02:45,690
kind of pseudo code first and then I'll go back and fill in everything.

36
00:02:45,690 --> 00:02:45,930
Okay.

37
00:02:45,960 --> 00:02:52,230
So actually the first thing I want to do is make sure that this variable p is cleared and that's because

38
00:02:52,860 --> 00:02:58,200
I've already been using this variable p for the plotting object earlier in the code.

39
00:02:58,200 --> 00:03:00,930
So I'm going to write p equals none.

40
00:03:01,000 --> 00:03:04,660
I can see that none is green and boldface.

41
00:03:04,950 --> 00:03:12,060
So this is a reserved keyword and effectively this is just clearing out whatever information is in this

42
00:03:12,060 --> 00:03:12,920
variable.

43
00:03:12,930 --> 00:03:17,430
So now when this code gets run P just gets cleared out to be nothing.

44
00:03:17,430 --> 00:03:24,410
Now the way that I'm going to solve this is by first writing up the initial value for Pete.

45
00:03:24,410 --> 00:03:32,500
So I'm going to setup a plot some plot and then the function is Y.

46
00:03:32,550 --> 00:03:38,940
So the simple type object but this mathematical function is variable y dot subs.

47
00:03:38,970 --> 00:03:42,670
And now we start with substituting a for one.

48
00:03:43,050 --> 00:03:48,900
And then I input as a list the x axis limit so X goes from minus five to plus five.

49
00:03:48,990 --> 00:03:53,600
And then I write a show equals false okay.

50
00:03:53,610 --> 00:03:59,770
And actually let me say P that show and now I'm going to comment out these three lines here.

51
00:03:59,790 --> 00:04:03,500
So I just want to make sure that I haven't made any mistakes so far.

52
00:04:05,110 --> 00:04:05,440
OK.

53
00:04:05,480 --> 00:04:07,680
So so far this looks pretty good.

54
00:04:07,700 --> 00:04:10,370
The y axis limit is also not correct.

55
00:04:10,370 --> 00:04:13,280
So maybe I'll change that real quick.

56
00:04:13,280 --> 00:04:16,520
So p dot y Lim equals.

57
00:04:16,610 --> 00:04:22,610
So in the graph that I showed in the slides that was from minus ten to plus 10 and all right.

58
00:04:22,640 --> 00:04:28,430
This is starting to look at this looks recognizable from what I showed in the slides.

59
00:04:28,430 --> 00:04:30,280
We're also gonna need to activate the legend.

60
00:04:30,290 --> 00:04:32,800
So while I'm down here I'm already kind of right.

61
00:04:32,810 --> 00:04:34,940
Legend equals true.

62
00:04:34,970 --> 00:04:38,840
So this auto generated a legend which is technically correct.

63
00:04:38,840 --> 00:04:45,530
This is the function that I input it however I want this to appear in nice latex formatting so therefore

64
00:04:45,560 --> 00:04:53,210
I actually need to change the legend explicitly and that is with p 0 because remember now these are

65
00:04:53,210 --> 00:04:56,290
properties of the entire plotting object.

66
00:04:56,300 --> 00:05:00,770
This is just a property of this particular line.

67
00:05:00,770 --> 00:05:10,780
So the label for that line equals percent s and then percent Sin Lei tech.

68
00:05:10,850 --> 00:05:15,540
And then why That sub's a comma one.

69
00:05:15,600 --> 00:05:15,900
Okay.

70
00:05:15,920 --> 00:05:19,130
So now we're in the same situation that we were before.

71
00:05:19,130 --> 00:05:26,420
So this has to be dollar signs around it and that will tell Python that whatever is in between these

72
00:05:26,960 --> 00:05:32,730
dollar signs should be interpreted as latex code which is what we're inputting here.

73
00:05:32,840 --> 00:05:33,170
All right.

74
00:05:33,200 --> 00:05:36,740
So this is not the end of the assignment of course.

75
00:05:36,740 --> 00:05:42,120
This is just one of the lines and this is where the for loop comes into play.

76
00:05:42,170 --> 00:05:47,350
So now I've already done the first line corresponding to a equals one.

77
00:05:47,570 --> 00:05:54,650
And what we need to do now is replace for a goes from two through four not one through four because

78
00:05:54,650 --> 00:06:02,360
we've already done the first plot so to come a five and then my strategy here is to extend this plot

79
00:06:02,660 --> 00:06:06,040
by adding more and more Simplot functions.

80
00:06:06,080 --> 00:06:10,640
So I'm just going to copy and paste that in here.

81
00:06:10,640 --> 00:06:12,380
And now we're not substituting one.

82
00:06:12,380 --> 00:06:15,710
Each time we are substituting for AI.

83
00:06:15,710 --> 00:06:15,980
Okay.

84
00:06:15,990 --> 00:06:20,060
So and then we can change the label.

85
00:06:20,060 --> 00:06:22,960
So I'm going to copy and paste this in here.

86
00:06:23,120 --> 00:06:26,740
And now of course this is substituting for I not for one.

87
00:06:26,840 --> 00:06:29,990
And here what number should we what should we replace this with.

88
00:06:29,990 --> 00:06:31,670
It's certainly not going to be zero.

89
00:06:31,700 --> 00:06:37,280
Actually I can show you what happens if we do that then essentially we're just replacing the first line

90
00:06:38,500 --> 00:06:44,740
or the label of the first line with each individual element inside this for loop.

91
00:06:44,740 --> 00:06:46,290
So that ends up being wrong.

92
00:06:46,390 --> 00:06:49,200
Maybe this should be P I.

93
00:06:49,330 --> 00:06:49,650
Huh.

94
00:06:49,660 --> 00:06:51,050
And now we get an error.

95
00:06:51,190 --> 00:06:53,280
Why are we getting this error here.

96
00:06:53,410 --> 00:06:55,380
Now of course I could just tell you the right answer.

97
00:06:55,390 --> 00:06:59,940
But what I want to do is show you how to debug in Python.

98
00:07:00,580 --> 00:07:06,340
So if you have an error that says something like index out of range or something to this effect and

99
00:07:06,340 --> 00:07:14,050
it's inside a for loop then a good thing to do is to print out basically whatever you think is relevant

100
00:07:14,050 --> 00:07:14,870
to print out.

101
00:07:15,040 --> 00:07:19,210
In this case the most relevant thing to print out is the looping index I hear.

102
00:07:19,210 --> 00:07:23,320
So let's print that out so you can see that this crashed basically right away.

103
00:07:23,320 --> 00:07:26,130
So it we print it out too.

104
00:07:26,140 --> 00:07:33,490
So I is first equal to 2 which is of course how we specified this and then it immediately crashed over

105
00:07:33,490 --> 00:07:37,880
here without getting to the next iteration without getting to I equals three.

106
00:07:37,900 --> 00:07:45,040
So the problem here is that when I equals two that's totally fine here we're just substituting I equals

107
00:07:45,040 --> 00:07:52,570
two is totally fine here we're just substituting and just printing text but here to the number two as

108
00:07:52,570 --> 00:07:58,510
an index means that we are trying to access the third element of this P object but there aren't three

109
00:07:58,510 --> 00:07:59,650
elements here.

110
00:07:59,710 --> 00:08:02,630
Here there's one element with an index of zero.

111
00:08:02,680 --> 00:08:03,790
And here we extend it.

112
00:08:03,820 --> 00:08:07,700
So then there's two elements with an index of one.

113
00:08:07,780 --> 00:08:14,620
So we are trying to access the third element of a two element object and that is the problem.

114
00:08:14,620 --> 00:08:22,540
So the solution is that we have to say I am minus 1 and it's minus 1 because we're starting with I equals

115
00:08:22,580 --> 00:08:29,170
2 but the way that I'm using IE here is to substitute into this expression and the way that I'm using

116
00:08:29,200 --> 00:08:35,350
I here is as an index into this object.

117
00:08:35,350 --> 00:08:37,600
All right I hope that makes sense.

118
00:08:37,600 --> 00:08:42,160
Essentially I'm using i in to this variable i in two different ways.

119
00:08:42,160 --> 00:08:48,500
Here for substitution of a number and here for indexing into an object.

120
00:08:48,900 --> 00:08:49,250
Okay.

121
00:08:49,270 --> 00:08:52,150
So now this plot is almost complete.

122
00:08:52,150 --> 00:08:55,030
We are almost finished with the exercise.

123
00:08:55,030 --> 00:08:56,320
The problem now.

124
00:08:56,380 --> 00:09:02,820
The remaining issue is that we don't know which line corresponds to which value of this function.

125
00:09:02,860 --> 00:09:07,130
So therefore what we need to do is change the line color.

126
00:09:07,300 --> 00:09:10,530
So this is going to be p and it's still I minus 1.

127
00:09:10,810 --> 00:09:17,510
I minus one and what we want to change is the line color.

128
00:09:17,530 --> 00:09:23,700
So the way that I'm going to set this to be a random color is using num pi.

129
00:09:23,710 --> 00:09:32,260
So MP for num PI that random to generate random numbers whoops and then dot Rand for uniformly distributed

130
00:09:32,260 --> 00:09:35,680
numbers and then I went three random numbers.

131
00:09:35,680 --> 00:09:38,150
So that's going to correspond to our GDP.

132
00:09:38,440 --> 00:09:45,100
Now later on in the course I'm gonna have a lot more to say about generating random numbers and interpreting

133
00:09:45,130 --> 00:09:48,220
random numbers from different distributions.

134
00:09:48,220 --> 00:09:55,960
But for now suffice it to say that num pi random dot Rand will generate random numbers that are between

135
00:09:55,960 --> 00:09:57,580
0 and 1.

136
00:09:57,580 --> 00:10:00,680
So with the decimal point somewhere between 0 and 1.

137
00:10:00,820 --> 00:10:06,650
And that's exactly what we need for colors because to specify a line color you have to specify the RG

138
00:10:06,650 --> 00:10:12,080
B values in fractions so in numbers between 0 and 1.

139
00:10:12,160 --> 00:10:12,400
Okay.

140
00:10:12,400 --> 00:10:19,240
Now you might already guess that this is not going to work and that's because we haven't defined end

141
00:10:19,240 --> 00:10:28,620
P so I need to import the NUM pi module so and say import num pi as in P.

142
00:10:28,840 --> 00:10:34,660
By the way you might notice that I often say I'm going to say when I'm actually not saying something

143
00:10:34,660 --> 00:10:38,980
I'm just writing it down and my view programming is like talking to the computer.

144
00:10:38,980 --> 00:10:44,640
So whenever I type in code I'm imagining that I am talking to the computer.

145
00:10:44,650 --> 00:10:45,020
Mm hmm.

146
00:10:45,120 --> 00:10:45,830
Okay.

147
00:10:45,880 --> 00:10:47,650
So we still get an error.

148
00:10:47,680 --> 00:10:49,710
Let's see what this area is.

149
00:10:49,720 --> 00:10:49,960
Okay.

150
00:10:49,990 --> 00:10:55,780
So this is actually not a very usefully interpretable error but it turns out that what we need to do

151
00:10:55,780 --> 00:11:00,340
is input a list into the line color argument.

152
00:11:00,370 --> 00:11:04,770
So we embed this call inside a list because the output.

153
00:11:04,780 --> 00:11:06,850
This is a num pi array.

154
00:11:07,030 --> 00:11:10,670
And the line color needs to be as a list.

155
00:11:10,720 --> 00:11:11,200
All right.

156
00:11:11,200 --> 00:11:12,640
So this looks pretty nice.

157
00:11:12,640 --> 00:11:15,960
Now these lines all have slightly different colours.

158
00:11:15,970 --> 00:11:19,320
These two are a little bit difficult to distinguish from each other.

159
00:11:19,320 --> 00:11:22,240
So I'm just going to run this again and then up.

160
00:11:22,270 --> 00:11:23,050
This looks nice.

161
00:11:23,050 --> 00:11:26,290
I think this is a pretty nice set of pastel colors.

162
00:11:26,290 --> 00:11:29,500
This reminds me of early summer somehow.

163
00:11:29,500 --> 00:11:38,270
So in this video and in the last video you gain some expertise with generating plots in simple as I

164
00:11:38,270 --> 00:11:43,850
mentioned at the end of the previous video in general I recommend sticking to Mat plot lib whenever

165
00:11:43,850 --> 00:11:44,700
possible.

166
00:11:44,780 --> 00:11:47,080
Just because it makes your code more consistent.

167
00:11:47,090 --> 00:11:53,010
But there are definitely cases where it's useful to use the plotting methods in simple.

