1
00:00:02,500 --> 00:00:08,560
By this point in the course you now know all about plotting coordinates on a graph you know about plotting

2
00:00:08,560 --> 00:00:16,060
lines rational functions polynomials using simplify to generate plots.

3
00:00:16,060 --> 00:00:22,190
What I'm going to introduce you to now in this video is making images from matrices.

4
00:00:22,330 --> 00:00:27,820
And you've already been introduced to the idea of storing data in a matrix.

5
00:00:27,820 --> 00:00:32,400
And now I'm gonna show you how to visualize a matrix with images.

6
00:00:32,410 --> 00:00:39,280
So let me first start by explaining how images are represented as matrices not only in Python but in

7
00:00:39,280 --> 00:00:41,620
computers in general.

8
00:00:41,620 --> 00:00:48,700
So if you have a picture that looks something like this maybe this is just a zoomed in part of a larger

9
00:00:48,700 --> 00:00:53,520
picture so you can see each of these blocks here that have one common color to them.

10
00:00:54,130 --> 00:01:00,190
So these are called pixels of course and you can think of each individual pixel as being a separate

11
00:01:00,190 --> 00:01:06,380
block and then the idea is that computers will represent each block as having a different number.

12
00:01:06,400 --> 00:01:13,270
So this pixel has a number twenty two and that's just some value in a matrix so you can see this is

13
00:01:13,270 --> 00:01:13,920
a matrix.

14
00:01:13,930 --> 00:01:20,650
These are the rows and the columns of The Matrix and The Matrix contains a bunch of numbers that you

15
00:01:20,650 --> 00:01:27,910
see here and what the computer is doing what Python is doing is assigning color values to each different

16
00:01:28,030 --> 00:01:34,540
number so larger numbers have darker colors and smaller numbers have cooler colors.

17
00:01:35,110 --> 00:01:41,140
And then the exact color is called the color map and you can change the color map so you can make a

18
00:01:41,140 --> 00:01:46,840
really pretty looking image that looks something like that so you can see all of the numbers from this

19
00:01:46,840 --> 00:01:47,350
matrix.

20
00:01:47,350 --> 00:01:53,980
So this is a matrix that has 10 rows and 14 columns.

21
00:01:54,340 --> 00:01:59,920
So the numbers tell you what are the what is the value of the elements at each location in the matrix

22
00:02:00,280 --> 00:02:02,710
and then those get mapped onto colors.

23
00:02:02,710 --> 00:02:08,010
Now this is an exact picture that you are going to make in Python in a moment.

24
00:02:08,050 --> 00:02:11,720
Very exciting in order to make this matrix.

25
00:02:11,800 --> 00:02:13,600
We need to know this formula.

26
00:02:13,630 --> 00:02:17,930
So each individual pixel each element.

27
00:02:17,950 --> 00:02:24,990
So the eighth row and the JF column is defined by this simple formula three times I.

28
00:02:25,090 --> 00:02:29,920
The row index minus four times J or the column index.

29
00:02:29,920 --> 00:02:30,180
OK.

30
00:02:30,190 --> 00:02:32,230
So now let's switch to Python.

31
00:02:32,230 --> 00:02:38,740
I will first introduce you very briefly to generating images from matrices and then we'll work through

32
00:02:38,800 --> 00:02:41,850
this particular matrix right here.

33
00:02:42,160 --> 00:02:47,370
We are going to be using map plot lib dot pie plot and name pie.

34
00:02:48,070 --> 00:02:50,110
So let's start by creating a matrix.

35
00:02:50,110 --> 00:02:54,270
This is not the more detailed larger matrix that I just showed in the slides.

36
00:02:54,280 --> 00:02:58,600
I'm starting with something a little bit simpler just to give you the basic idea.

37
00:02:58,600 --> 00:03:06,180
So let's say this matrix has the first row of one comma two and the second row of one comma for us.

38
00:03:06,210 --> 00:03:12,220
So we can print this matrix and it doesn't really look super nice.

39
00:03:12,220 --> 00:03:18,220
It doesn't look like a beautiful mathematical matrix you learned in the last section of this course

40
00:03:18,220 --> 00:03:25,780
about how to use the display and math functions and later coding to make this look like a nice formatted

41
00:03:26,290 --> 00:03:26,870
matrix.

42
00:03:26,890 --> 00:03:31,360
But for our purposes in this video that part doesn't really matter.

43
00:03:31,360 --> 00:03:40,020
Instead what I want to show you is to use the function in the map plot lib module called I Am show.

44
00:03:40,030 --> 00:03:46,660
So for image show and then I'm going to say a in here and then appeal to that show.

45
00:03:47,440 --> 00:03:50,240
And now you can see what this image looks like.

46
00:03:50,260 --> 00:03:57,150
So we have different colors for these different blocks and that corresponds to one two and one four.

47
00:03:57,160 --> 00:04:04,570
So you can see that these two blocks these two pixels have the same exact color in the image and in

48
00:04:04,570 --> 00:04:08,650
the matrix they have the same exact values one and one.

49
00:04:08,650 --> 00:04:08,860
All right.

50
00:04:08,860 --> 00:04:14,580
Now this labeling here is a little bit awkward because in fact this is really just for pixels.

51
00:04:14,590 --> 00:04:19,900
So it's not really I think it's not really appropriate to have so many pixels in here because a little

52
00:04:19,900 --> 00:04:21,940
bit of a misleading impression.

53
00:04:21,970 --> 00:04:28,440
So what I'm going to do is change the x ticks and the Y ticks so the tick marks here.

54
00:04:28,450 --> 00:04:33,550
So you can see here there's tick marks at minus point 5 and 0 and so on.

55
00:04:33,550 --> 00:04:40,780
So I just want to have the x ticks at 0 and 1.

56
00:04:40,870 --> 00:04:41,350
All right.

57
00:04:41,350 --> 00:04:42,170
So this looks good.

58
00:04:42,160 --> 00:04:47,980
Now you just see the 0 with element and the first element are really it's the first and the second according

59
00:04:47,980 --> 00:04:50,260
to the way that human beings count.

60
00:04:50,260 --> 00:04:52,660
But Python starts counting at zero.

61
00:04:52,700 --> 00:04:52,990
Okay.

62
00:04:52,990 --> 00:04:58,020
And then for the Y ticks I guess in theory this should also be 0 and 1.

63
00:04:58,030 --> 00:05:02,150
But I would like to show you that you can actually set whatever values you want here.

64
00:05:02,180 --> 00:05:06,600
So let's say we want tick marks at point eight five.

65
00:05:06,770 --> 00:05:11,060
And how about one point zero four.

66
00:05:11,480 --> 00:05:11,750
OK.

67
00:05:11,770 --> 00:05:19,070
So for this particular matrix this isn't really a sensible set of Y ticks but that does show you how

68
00:05:19,100 --> 00:05:23,680
easy it is to define the Y ticks however you want them to be.

69
00:05:23,750 --> 00:05:24,240
All right.

70
00:05:24,260 --> 00:05:30,320
Now what we're going to do is implement the formula that I showed in the slides to create that nice

71
00:05:30,320 --> 00:05:31,790
looking matrix.

72
00:05:31,790 --> 00:05:37,370
So let's start by creating a matrix that we initialize to be zeros.

73
00:05:37,400 --> 00:05:44,780
So this is going to be a 10 by 14 matrix and let's already even look at this thing.

74
00:05:44,990 --> 00:05:53,270
So you can see it's a matrix of all zeros and we can confirm that it is in fact a matrix that has 10

75
00:05:53,270 --> 00:05:55,090
rows and 14 columns.

76
00:05:55,100 --> 00:05:57,240
I mean here you just see it right here.

77
00:05:57,350 --> 00:06:07,730
But I'm going to use a function and PS num pi dot shape and this is going to return the shape of this

78
00:06:07,730 --> 00:06:08,680
matrix.

79
00:06:08,870 --> 00:06:12,090
So the shape is the number of sizes in each dimension.

80
00:06:12,110 --> 00:06:15,770
So the first dimension which is the rows has 10 elements.

81
00:06:15,770 --> 00:06:20,770
And the second dimension which is columns has 14 elements.

82
00:06:20,810 --> 00:06:27,890
OK so now what we need to do is assign this formula to each individual element of the matrix.

83
00:06:27,890 --> 00:06:37,340
So it's gonna be something like the I.S. throw and the J column equals three times I minus four times

84
00:06:37,400 --> 00:06:38,660
J.

85
00:06:38,660 --> 00:06:38,960
Okay.

86
00:06:38,980 --> 00:06:46,140
So that's generally how we implement the formula for element y's population of this matrix.

87
00:06:46,290 --> 00:06:51,660
And now of course we need to loop over all the rows and all of the columns.

88
00:06:51,670 --> 00:06:59,690
So let's say for I n now this is going to have to be a range and it's going to go from zero to the number

89
00:06:59,690 --> 00:07:00,890
of rows.

90
00:07:00,890 --> 00:07:03,850
So how can we figure out what is that the number of rows.

91
00:07:03,860 --> 00:07:05,410
What should be the number here.

92
00:07:05,450 --> 00:07:11,060
Now of course you can just look at this here and I could write 10 and technically that works but that's

93
00:07:11,060 --> 00:07:17,210
hard coding this number here and hard coding is generally something that should be avoided whenever

94
00:07:17,210 --> 00:07:18,200
possible.

95
00:07:18,200 --> 00:07:24,380
The reason is that if I want to make this matrix bigger let's say I just want to make it eleven then

96
00:07:24,380 --> 00:07:26,780
all the sudden this is not going to work anymore.

97
00:07:26,780 --> 00:07:29,830
This would also need to be adopted.

98
00:07:30,050 --> 00:07:37,870
So therefore what I'm going to do is change this to be the shape of matrix A.

99
00:07:37,970 --> 00:07:46,700
So I'm going to write and p dot shape of matrix A and now this is going to return to numbers it's going

100
00:07:46,700 --> 00:07:52,340
to return a tuple and that you can see here and for the number of rows we just want to access the first

101
00:07:52,490 --> 00:07:53,780
element of this.

102
00:07:53,780 --> 00:08:02,390
So therefore I'm gonna write in square brackets zero like this and this will only return the first element

103
00:08:02,390 --> 00:08:05,830
here which is of course the number of rows.

104
00:08:05,870 --> 00:08:06,190
All right.

105
00:08:06,200 --> 00:08:11,040
Now I want to write another for loop so for J.

106
00:08:11,240 --> 00:08:16,620
In range 0 2 and p doc shape a.

107
00:08:16,680 --> 00:08:21,390
And now of course we want the number of columns and so that's going to be 1.

108
00:08:21,440 --> 00:08:21,880
All right.

109
00:08:21,950 --> 00:08:23,550
So we try running this code.

110
00:08:23,720 --> 00:08:26,350
Let's try running the code huh.

111
00:08:26,390 --> 00:08:27,660
So this gives us an error.

112
00:08:27,680 --> 00:08:31,270
It says expected an indented block.

113
00:08:31,700 --> 00:08:39,170
And what's going on here is that this line of code assigning the result of this algorithm to the to

114
00:08:39,170 --> 00:08:45,380
each element in the matrix A that actually has to be done inside this embedded for loop which means

115
00:08:45,440 --> 00:08:49,490
we need to have the proper spacing here and the proper indentation.

116
00:08:49,490 --> 00:08:49,970
All right.

117
00:08:49,970 --> 00:08:52,580
So let's see what this looks like.

118
00:08:52,580 --> 00:08:56,020
I'm going to start by just printing out this matrix.

119
00:08:56,080 --> 00:08:56,370
OK.

120
00:08:56,390 --> 00:09:01,730
So we get a bunch of numbers and it looks already kind of neat it's already kind of interesting to look

121
00:09:01,730 --> 00:09:01,820
at.

122
00:09:01,820 --> 00:09:07,670
You can see there's like this band here of small numbers and then there's larger numbers down here and

123
00:09:08,000 --> 00:09:10,210
larger negative numbers over here.

124
00:09:10,460 --> 00:09:13,660
And looking at this algorithm this actually does make sense.

125
00:09:13,670 --> 00:09:15,530
This pattern does make sense.

126
00:09:15,650 --> 00:09:19,160
And basically when these numbers are close to each other.

127
00:09:19,190 --> 00:09:25,470
So when I is close to J then this result is going to be close to zero.

128
00:09:25,640 --> 00:09:28,640
And the further away I is from J.

129
00:09:28,820 --> 00:09:31,160
The larger the number is going to be.

130
00:09:31,250 --> 00:09:38,780
And as you get down to later rows and earlier columns then this number becomes large relative to this

131
00:09:38,780 --> 00:09:39,130
number.

132
00:09:39,130 --> 00:09:41,320
So there we get large positive numbers.

133
00:09:41,750 --> 00:09:49,090
And when you get to later columns and earlier rows then this term becomes large relative to this term.

134
00:09:49,100 --> 00:09:50,470
And of course this is negatives.

135
00:09:50,490 --> 00:09:54,590
Then you get large magnitude negative numbers over here.

136
00:09:54,590 --> 00:10:02,810
Again I'm just showing how to use a combination of Python and visualization to understand mathematics

137
00:10:03,430 --> 00:10:03,790
OK.

138
00:10:03,830 --> 00:10:09,310
But what we want to do is actually see what this thing looks like as an image.

139
00:10:09,320 --> 00:10:13,290
So plots that I am show a.

140
00:10:14,120 --> 00:10:19,130
And then we already get this nice looking matrix down here.

141
00:10:19,130 --> 00:10:19,460
All right.

142
00:10:19,490 --> 00:10:23,990
So there are a few other things that I would like to illustrate to you here.

143
00:10:23,990 --> 00:10:29,510
One is that we can draw lines on top of these matrices.

144
00:10:29,510 --> 00:10:37,820
So for example I'm going to draw a line using the plot function that goes from 0 to 3 on the x axis

145
00:10:38,150 --> 00:10:40,840
and 8 to 2 on the y axis.

146
00:10:40,850 --> 00:10:45,040
I want to make sure that this line is really visible really easy to see.

147
00:10:45,050 --> 00:10:48,350
So I'm gonna make it thick and red.

148
00:10:48,540 --> 00:10:48,800
Okay.

149
00:10:48,830 --> 00:10:53,270
So now let's look at this line of code and see how that maps onto this line.

150
00:10:53,780 --> 00:11:02,510
So the x values go from 0 to 3 and then you see here zero up to three and then the y axis values go

151
00:11:02,510 --> 00:11:04,010
from eight to two.

152
00:11:04,010 --> 00:11:06,210
So eight up to two.

153
00:11:06,260 --> 00:11:13,130
So notice here that the rows actually correspond to the y coordinates here.

154
00:11:13,550 --> 00:11:18,080
So these are the rows of the matrix but this is the y axis of the matrix.

155
00:11:18,260 --> 00:11:24,190
These are the columns of the matrix and that is on the x axis okay.

156
00:11:24,190 --> 00:11:30,790
And that is the key insight to the next thing that I want to do which is to get all of these numbers

157
00:11:30,790 --> 00:11:34,290
to print inside this matrix here.

158
00:11:34,360 --> 00:11:34,610
Okay.

159
00:11:34,630 --> 00:11:41,360
So what I'm going to do is write another for loop it's gonna be another double for loop here.

160
00:11:41,650 --> 00:11:47,980
And what I want to do inside this for loop is plot a bit of text and the text is going to be each individual

161
00:11:47,980 --> 00:11:57,310
number from this matrix A and it has to be plotted into the right location in the image so P L T dot

162
00:11:57,370 --> 00:11:58,280
text.

163
00:11:58,300 --> 00:12:04,720
Now I haven't yet used this text function so this might be a bit new to you essentially the way that

164
00:12:04,720 --> 00:12:13,720
this works is you supply three inputs corresponding to the x axis location and the y axis location and

165
00:12:13,720 --> 00:12:16,720
then the actual text that you want to display.

166
00:12:17,180 --> 00:12:22,760
Okay so now because of what I just said we actually need to plot at index J.

167
00:12:22,840 --> 00:12:24,020
Comma I.

168
00:12:24,100 --> 00:12:26,500
And then the text is going to be the.

169
00:12:26,530 --> 00:12:35,880
Well let me first write it as the matrix and then the I.F. J ith element OK so what you see is that

170
00:12:35,880 --> 00:12:41,700
we get a bunch of decimal points in here so it's kind of hard to see what's really happening it's hard

171
00:12:41,700 --> 00:12:44,040
to make out the individual numbers.

172
00:12:44,220 --> 00:12:51,810
So therefore I'm going to write it basically just to convert these into integers just so it's less to

173
00:12:51,810 --> 00:12:52,760
look at.

174
00:12:52,860 --> 00:12:53,090
All right.

175
00:12:53,100 --> 00:12:55,730
So this is starting to look a little bit better.

176
00:12:55,890 --> 00:13:02,170
But one thing I don't like about this is that the numbers are not really centered so the numbers are

177
00:13:02,170 --> 00:13:04,360
kind of OK for these single digits.

178
00:13:04,500 --> 00:13:05,340
But out here.

179
00:13:05,370 --> 00:13:10,920
You know it's like the numbers are kind of spilling off into the neighbors into the next pixels.

180
00:13:10,920 --> 00:13:18,330
So what I'm going to do is adjust the alignment of these numbers of the text so horizontal

181
00:13:21,310 --> 00:13:25,150
alignment equals center.

182
00:13:25,150 --> 00:13:31,720
So this is an optional input that you can give into the text function to make the horizontal alignment

183
00:13:31,810 --> 00:13:33,580
be centered.

184
00:13:33,580 --> 00:13:35,620
So that's starting to look a little bit better.

185
00:13:35,620 --> 00:13:38,860
And now you see that the numbers are also kind of shifted up.

186
00:13:38,980 --> 00:13:45,310
So I'm going to copy and paste here except now it's going to be

187
00:13:47,770 --> 00:13:50,500
vertical alignment center.

188
00:13:50,500 --> 00:13:51,160
All right.

189
00:13:51,160 --> 00:13:54,230
And this is starting to look really nice.

190
00:13:54,310 --> 00:13:59,460
So let me explain once again very quickly why the order is swapped here.

191
00:13:59,570 --> 00:14:06,010
So the order is swapped here because I want the number from the Matrix to be plotted in the correct

192
00:14:06,100 --> 00:14:08,120
row and column.

193
00:14:08,170 --> 00:14:14,440
So when you're storing information in a matrix you always store it using row first and then column.

194
00:14:14,800 --> 00:14:21,910
However when you're making a plot the x axis corresponds to the columns and the y axis corresponds to

195
00:14:21,910 --> 00:14:22,900
the rows.

196
00:14:22,990 --> 00:14:26,010
And that's why the order is different here.

197
00:14:26,020 --> 00:14:26,260
Okay.

198
00:14:26,260 --> 00:14:32,800
Now there is one more thing that I would like to do and that is to change this color plot so change

199
00:14:32,800 --> 00:14:34,660
the color scaling.

200
00:14:34,660 --> 00:14:41,470
So I'm going to write P.L. t the set C map and the C in map is for color.

201
00:14:41,470 --> 00:14:51,280
So I'm going to change the color map to be from its defaults to something called a map called purples.

202
00:14:51,280 --> 00:14:53,290
So this is a pretty nice looking color map.

203
00:14:53,290 --> 00:15:00,220
It goes from white to purple so large positive values will be deep purple and large negative values

204
00:15:00,220 --> 00:15:01,240
will be white.

205
00:15:01,240 --> 00:15:04,090
Now how did I know that that was a color map.

206
00:15:04,090 --> 00:15:11,260
And how can I find all of the other color maps that python can show essentially the way that I did this

207
00:15:11,260 --> 00:15:17,440
was by opening up an Internet browser and searching for Python color maps.

208
00:15:17,710 --> 00:15:24,190
So the Internet is your friend particularly when it comes to programming in Python.

209
00:15:24,190 --> 00:15:29,920
One of the nice advantages of Python as a language is that it has a very large user base all over the

210
00:15:29,920 --> 00:15:35,170
world of people who post a lot of things on the internet about using Python.

211
00:15:35,440 --> 00:15:40,130
So here this first result choosing color maps in map plot lib.

212
00:15:40,180 --> 00:15:45,130
Now there's a lot of text and I encourage you to go through this but basically I'm just going to scroll

213
00:15:45,130 --> 00:15:46,450
down and show you.

214
00:15:46,450 --> 00:15:50,560
Here are some of the options for various color maps.

215
00:15:50,560 --> 00:15:51,310
So let's try.

216
00:15:51,310 --> 00:15:53,650
For example Twilight shifted.

217
00:15:53,650 --> 00:15:55,470
That looks pretty interesting.

218
00:15:55,510 --> 00:15:58,420
So Twilight shifted.

219
00:15:59,770 --> 00:16:00,400
OK.

220
00:16:00,460 --> 00:16:10,430
That's also a nice one in this video you learned how to make images from matrices of data and I also

221
00:16:10,430 --> 00:16:17,150
showed you several new functions in the NUM pi tool box and I showed you more details about generating

222
00:16:17,150 --> 00:16:19,250
plots in the next video.

223
00:16:19,250 --> 00:16:25,460
There is going to be a challenge and exercise for you to complete based on the knowledge that you gained

224
00:16:25,460 --> 00:16:26,210
in this video.
