WEBVTT
1
00:00:02.680 --> 00:00:08.470
This video contains the exercise associated with the previous video.

2
00:00:08.530 --> 00:00:13.540
So the goal of this exercise is essentially to produce this graph.

3
00:00:13.540 --> 00:00:18.940
This will allow you to explore the central limit theorem and a little bit more detail.

4
00:00:19.300 --> 00:00:25.750
So for the central limit theorem to be valid for the central limit theorem to hold you need to have

5
00:00:25.780 --> 00:00:31.990
a sufficient number of sampling from the different distributions that you are combining together.

6
00:00:32.110 --> 00:00:38.530
And so what you want to do in this exercise is essentially repeat the code that we went through in the

7
00:00:38.560 --> 00:00:44.500
previous video where we created a sine wave and uniform noise and added them together.

8
00:00:44.680 --> 00:00:50.800
And what you are manipulating here is the number of data points that you use to create the sine wave

9
00:00:50.860 --> 00:00:56.910
and the uniform distribution of noise ranging from 50 to ten.

10
00:00:57.040 --> 00:01:00.140
And that is going to go on the y axis here.

11
00:01:00.250 --> 00:01:03.120
So you can see this starts off at well close to zero.

12
00:01:03.120 --> 00:01:07.550
So this is 50 and ten thousand data points here.

13
00:01:07.720 --> 00:01:14.140
And then what you're looking at in this color plot is actually the distribution for each of these samples.

14
00:01:14.140 --> 00:01:17.110
So the distribution is going to look something like this.

15
00:01:17.130 --> 00:01:23.260
It's gonna be this kind of like normal ish looking distribution and that you saw in the previous video

16
00:01:23.770 --> 00:01:31.300
but now each of those distributions for each n here each number in here goes into a matrix and then

17
00:01:31.300 --> 00:01:40.330
you make an image of that matrix of the distribution matrix so each row in this matrix corresponds to

18
00:01:40.810 --> 00:01:46.690
a distribution and the height of that distribution corresponds to the color here.

19
00:01:46.690 --> 00:01:49.030
So good luck working through this project.

20
00:01:49.360 --> 00:01:54.250
And now I'm gonna switch to Python and show you how I solved this exercise.

21
00:01:56.340 --> 00:01:57.330
So let's see.

22
00:01:57.330 --> 00:02:01.300
I'm going to start by creating a variable an s.

23
00:02:01.320 --> 00:02:02.870
This is for ends.

24
00:02:03.450 --> 00:02:12.170
It's going to be numbers ranging from 50 to ten thousand and in steps of one hundred.

25
00:02:12.180 --> 00:02:15.730
So let's already look at what this and this variable is.

26
00:02:15.870 --> 00:02:20.460
So you can see it starts at 50 it actually doesn't make it all the way up to 10000.

27
00:02:20.570 --> 00:02:24.280
And that's because I'm skipping in increments of one hundred.

28
00:02:24.420 --> 00:02:30.700
So okay maybe you want to argue that I'm already violating the instructions but that's okay.

29
00:02:30.780 --> 00:02:33.500
It actually doesn't really make much of a difference.

30
00:02:33.660 --> 00:02:33.990
All right.

31
00:02:34.020 --> 00:02:40.950
And then I'm going to specify a variable for the number of bins because once I finish all the code I

32
00:02:40.950 --> 00:02:47.610
want to explore what is the effect of the number of bins on the shape of the distribution which means

33
00:02:47.610 --> 00:02:49.500
on that figure.

34
00:02:49.500 --> 00:02:49.800
Okay.

35
00:02:49.800 --> 00:02:57.420
And so the way that I'm going to do this is by creating a matrix I'll call it all hist for all of the

36
00:02:57.420 --> 00:02:58.550
histogram.

37
00:02:58.590 --> 00:03:00.740
And that's going to be zero.

38
00:03:00.740 --> 00:03:02.860
So initialize it as zeros.

39
00:03:02.960 --> 00:03:06.010
And what is going to be the size of this matrix.

40
00:03:06.030 --> 00:03:14.160
Well coming down on the y axis it's going to be the length of N S so the number of ends and then going

41
00:03:14.160 --> 00:03:19.340
across on the x axis is going to be the number of beans.

42
00:03:19.380 --> 00:03:22.020
So that's going to be n beans.

43
00:03:22.120 --> 00:03:30.660
And now what I'm going to do is loop through all of the ends and then what I want to do in here is create

44
00:03:30.660 --> 00:03:37.900
the two signals I'm actually going to scroll up and copy and paste here.

45
00:03:37.940 --> 00:03:43.140
So we copy and paste down here.

46
00:03:43.140 --> 00:03:49.040
So here's where I create the two signals and now the main thing I have to change is this variable n

47
00:03:49.050 --> 00:03:50.070
this parameter ends.

48
00:03:50.070 --> 00:03:52.020
This is no longer n.

49
00:03:52.020 --> 00:04:01.740
Instead it is the N S I see the ice index into N S and this is pretty tricky because you have to be

50
00:04:01.740 --> 00:04:05.500
careful that you don't just want the variable ie.

51
00:04:05.520 --> 00:04:09.550
This is actually going from zero to ninety nine.

52
00:04:09.600 --> 00:04:18.810
So we want to use the variable I as the indexing into this other vector here n s OK and obviously that

53
00:04:18.810 --> 00:04:25.780
has to change here as well so that s n s of index I okay.

54
00:04:25.800 --> 00:04:32.760
And now in the previous video we were actually just directly creating the plots of the histogram using

55
00:04:33.330 --> 00:04:40.710
the P L T dot hist function but here what we actually want to do is extract the information not draw

56
00:04:40.710 --> 00:04:47.820
the plot directly so therefore we want to use num pi dot histogram and the thing that we want to get

57
00:04:47.820 --> 00:04:54.030
the histogram of is the combination of the two signals so I'm going to write directly in the input here

58
00:04:54.320 --> 00:04:59.300
Sig 1 plus Sig 2 and we have n beans.

59
00:04:59.460 --> 00:05:04.820
So now you might remember that the histogram function gives two outputs.

60
00:05:04.830 --> 00:05:08.050
It gives the heights of all the histogram.

61
00:05:08.100 --> 00:05:10.530
And also the bean edges.

62
00:05:10.530 --> 00:05:18.270
So that's generally of the form y comma X but now instead of just putting this into a vector Y this

63
00:05:18.270 --> 00:05:25.950
is actually going to go into the matrix all hist and it's going to be the I S throw and all of the columns

64
00:05:26.250 --> 00:05:32.370
in this matrix all hist so let's already run this code and see if that runs okay.

65
00:05:32.400 --> 00:05:36.940
So that runs we don't get any python coding errors so that's a pretty good sign.

66
00:05:36.960 --> 00:05:39.030
Now it turns out we're not quite done with this.

67
00:05:39.030 --> 00:05:40.950
There's a few more things we need to do.

68
00:05:41.040 --> 00:05:43.630
But first of all I want to try to plot this.

69
00:05:43.650 --> 00:05:46.340
I'm going to use the function P color.

70
00:05:46.350 --> 00:05:53.040
That's basically a way to make the image look full and readily visible.

71
00:05:53.040 --> 00:06:00.930
So we want on the x axis is going to be the variable x here except it's not all of x you remember from

72
00:06:01.230 --> 00:06:02.820
a couple of videos ago.

73
00:06:02.820 --> 00:06:11.910
We want to use just the first N minus one points in X and the y axis is going to correspond to the ends

74
00:06:11.910 --> 00:06:18.630
or variable n s and then the matrix that we want to plot is called All hist like this.

75
00:06:18.630 --> 00:06:29.730
And then I will type P L T that X label and the X label is going to be the data value the Y label will

76
00:06:29.730 --> 00:06:38.750
be the number of points in the sample and let's also plot a color bar.

77
00:06:38.930 --> 00:06:39.240
Okay.

78
00:06:39.260 --> 00:06:41.960
And then finally peel to that show.

79
00:06:41.960 --> 00:06:43.600
Let's see how this thing looks.

80
00:06:44.030 --> 00:06:44.430
OK.

81
00:06:44.450 --> 00:06:47.070
So this is looking pretty interesting.

82
00:06:47.150 --> 00:06:54.500
It seems like the distribution is approaching a normal distribution only for really large values of

83
00:06:54.560 --> 00:06:57.610
n and not for small values of n.

84
00:06:58.220 --> 00:07:03.140
But you know this doesn't really look exactly like the plot that I showed in the slides in the beginning

85
00:07:03.140 --> 00:07:04.720
of this video.

86
00:07:04.940 --> 00:07:06.920
And part of the problem.

87
00:07:07.130 --> 00:07:08.970
Well part of the difference is the color.

88
00:07:08.990 --> 00:07:10.840
And I'm going to get back to that in a moment.

89
00:07:10.940 --> 00:07:16.940
But part of the problem here which is really a limitation is that the output of the histogram function

90
00:07:17.030 --> 00:07:24.530
is actually in counts but the counts is going to differ the raw counts per Bin will differ for every

91
00:07:24.530 --> 00:07:28.370
row in this matrix because the ends are different.

92
00:07:28.880 --> 00:07:30.950
So that's really not very good.

93
00:07:30.950 --> 00:07:38.150
That means we can't actually directly compare this line with this line because just the sheer number

94
00:07:38.150 --> 00:07:41.060
of points in the signal is much smaller.

95
00:07:41.060 --> 00:07:46.030
So we need to do is convert this into a probability function.

96
00:07:46.100 --> 00:07:52.670
Now the way that I showed how to do that in a couple of videos ago was by getting this output separate

97
00:07:52.700 --> 00:07:58.160
and then dividing it by the sum and so on what I'm going to do now is show you an alternative method

98
00:07:58.520 --> 00:08:01.490
which is to right density equals true.

99
00:08:01.490 --> 00:08:06.220
So that means it's going to output a probability density.

100
00:08:06.230 --> 00:08:11.490
Now running this code again we see that the plot actually looks quite a bit different.

101
00:08:11.630 --> 00:08:18.350
And it seems like it's Gaussian or sort of you know normal looking all the way down almost exactly to

102
00:08:18.350 --> 00:08:21.260
the bottom it gets kind of weird and choppy down here.

103
00:08:21.260 --> 00:08:29.240
Now I am not very happy with the range of color values that Python picked automatically for this plot.

104
00:08:29.240 --> 00:08:31.920
I would like this to be scaled down a little bit.

105
00:08:31.940 --> 00:08:39.950
So I'm going to specify as an additional input into the pea color function that the V Max which is the

106
00:08:40.070 --> 00:08:43.530
maximum color limit should be point six.

107
00:08:44.390 --> 00:08:45.200
Oh right.

108
00:08:45.200 --> 00:08:47.460
This is starting to look better.

109
00:08:47.750 --> 00:08:51.910
Now your plot on your screen might look different than mine.

110
00:08:52.040 --> 00:08:57.560
It might have a flipped axis you might have the larger numbers down here and the smaller numbers up

111
00:08:57.560 --> 00:09:00.570
here and your color scale might be different.

112
00:09:00.620 --> 00:09:07.370
So it turns out when you activate essence that set that's actually changing some of the graphics settings

113
00:09:07.370 --> 00:09:11.060
for you know the rest of your python session.

114
00:09:11.060 --> 00:09:18.280
And to illustrate that to you what I'm going to do is click on kernel restart and clear output.

115
00:09:18.890 --> 00:09:26.750
So that clears everything from the from the kernel from the workspace I have to rerun these two lines

116
00:09:26.750 --> 00:09:33.410
of this cell to reinforce num pie and map plot lib and then I'm not going to run this line I'm just

117
00:09:33.410 --> 00:09:40.910
going to run this cell of code here and you can see that the data are basically the same the results

118
00:09:40.910 --> 00:09:43.940
are the same but the color map is different.

119
00:09:43.970 --> 00:09:51.080
So we can change the color map as we like here with an optional input of see map.

120
00:09:51.080 --> 00:09:54.710
And then you can define which color map you want to use.

121
00:09:54.740 --> 00:09:59.450
So this default in Python is called very dis.

122
00:10:00.500 --> 00:10:02.980
So that's actually not going to change anything.

123
00:10:03.020 --> 00:10:09.620
I'm going to just by way of illustration apply the purples color map which I happen to like very much

124
00:10:09.620 --> 00:10:15.890
because all of the purples are great colors anyway what I would like to do now is just spend a moment

125
00:10:15.920 --> 00:10:18.010
to interpret this plot.

126
00:10:18.080 --> 00:10:25.670
So essentially what you are seeing is that the distribution approaches a normal distribution consistent

127
00:10:25.700 --> 00:10:28.680
with the prediction from the central limit theorem.

128
00:10:28.790 --> 00:10:34.520
In this case almost regardless of how many points are in the sample you can see that when the number

129
00:10:34.520 --> 00:10:39.460
of points is very small the distribution kind of breaks down it doesn't really look so good.

130
00:10:39.470 --> 00:10:48.020
And actually to show you that maybe I will start this down at let's say 20 and go up to about 1000 just

131
00:10:48.020 --> 00:10:51.050
to focus a little bit more on the lower edge of things.

132
00:10:51.050 --> 00:10:57.500
Now this is actually pretty extreme down here but you can see that these distributions each of these

133
00:10:57.500 --> 00:11:01.250
rows looks a little bit less like a normal distribution.

134
00:11:01.250 --> 00:11:06.140
They're still starting small and ending small and getting larger towards the middle.

135
00:11:06.140 --> 00:11:14.540
But when we increase the n then you can see it's starting to look more and more like a normal or Gaussian

136
00:11:14.630 --> 00:11:22.350
distribution I hope you enjoyed this and the previous videos you learned about the central limit theorem

137
00:11:22.830 --> 00:11:29.430
which essentially says that combining distributions are randomly sampled numbers from various distributions

138
00:11:29.700 --> 00:11:33.580
will have a distribution that approaches a gaussian.

139
00:11:33.600 --> 00:11:39.960
You also learned a little bit more about graphics and plotting in python and a very very small introduction

140
00:11:40.230 --> 00:11:46.290
to the seaborne module and you will learn a little bit more about seaborne in the next few videos.
