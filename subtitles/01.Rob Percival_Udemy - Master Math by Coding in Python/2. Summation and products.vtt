WEBVTT
1
00:00:02.690 --> 00:00:10.590
We are going to begin this section of the course on algebra 2 talking about summation and products and

2
00:00:10.590 --> 00:00:17.390
I will also tell you about a cumulative sum along the way you will get a bit of a reminder about lists.

3
00:00:17.400 --> 00:00:21.750
This particular variable type in Python called a list.

4
00:00:21.750 --> 00:00:22.000
All right.

5
00:00:22.020 --> 00:00:23.980
So let's get started.

6
00:00:24.030 --> 00:00:28.080
So imagine you have a set a so there's some variable a.

7
00:00:28.230 --> 00:00:33.480
And that refers to this set of numbers so it's five numbers in this set.

8
00:00:33.480 --> 00:00:37.410
Now of course you could add all of these numbers together and you would write that out like this.

9
00:00:37.410 --> 00:00:42.180
So one plus three plus four and cetera and that gives you 15.

10
00:00:42.210 --> 00:00:51.180
Now this is fine but if I wanted to add more numbers to this set or if I wanted to indicate this summation

11
00:00:51.240 --> 00:00:58.920
in a more general way that is not specifically tied to these individual numbers that I picked then how

12
00:00:58.920 --> 00:01:00.080
could we do that.

13
00:01:00.120 --> 00:01:06.870
Well one way you could think of doing that is by using subscript like this so you say a 1 plus a 2.

14
00:01:06.880 --> 00:01:13.260
And now the one and the two is referring not to the number one and the number two but the first element

15
00:01:13.350 --> 00:01:14.010
of the set.

16
00:01:14.040 --> 00:01:16.170
And the second element of the set.

17
00:01:16.320 --> 00:01:24.270
So a two here actually corresponds with the number three and a n is just the numbers of the last number

18
00:01:24.300 --> 00:01:25.850
which here is six.

19
00:01:25.860 --> 00:01:31.270
Now this is also fine but this requires a little bit more writing out.

20
00:01:31.440 --> 00:01:38.450
So there is an even more compact way of representing the sum of a set of numbers.

21
00:01:38.610 --> 00:01:41.700
And that is to use this summation sine.

22
00:01:41.700 --> 00:01:45.690
So this is often used in mathematics to indicate summation.

23
00:01:45.690 --> 00:01:52.920
It's a capital Greek character Sigma and the way you interpret this is that you are summing together

24
00:01:53.220 --> 00:02:01.530
all of the elements in this set a so a for the ISF element and then ice starts at 1 and it goes up to

25
00:02:01.590 --> 00:02:09.420
n now counting from one to end of course is how we do things in math this is how do you account in normal

26
00:02:09.420 --> 00:02:13.830
like human language and when we switch to Python Of course then you're counting with zeros.

27
00:02:13.830 --> 00:02:20.750
So this would actually go in Python this would go I equals zero to end minus one on the other hand there's

28
00:02:20.760 --> 00:02:26.820
actually a python function that will do the summation for you and I'll show you that in a moment.

29
00:02:26.820 --> 00:02:27.040
OK.

30
00:02:27.060 --> 00:02:30.020
So this is for adding together a bunch of numbers.

31
00:02:30.060 --> 00:02:32.720
What if we wanted to take the product of a bunch of numbers.

32
00:02:32.730 --> 00:02:39.660
So one times three times four and so on again of course you can just write it all out like this but

33
00:02:39.660 --> 00:02:47.010
it's nice to have a more general way of indicating this operation of multiplying all of the elements

34
00:02:47.100 --> 00:02:56.220
in a set and exactly like on the previous slide you can write it out like this but there's also a mathematical

35
00:02:56.220 --> 00:03:03.540
notation for the product which looks almost exactly the same as the summation sine except it's a capital

36
00:03:03.540 --> 00:03:06.270
pie instead of a sigma.

37
00:03:06.270 --> 00:03:11.640
Now of course you're familiar with the lower case pie that you learn about in trigonometry and it's

38
00:03:11.640 --> 00:03:13.680
related to circles and so on.

39
00:03:13.680 --> 00:03:18.080
This is the upper case version of that same Greek letter pi.

40
00:03:18.120 --> 00:03:18.340
OK.

41
00:03:18.360 --> 00:03:23.040
So this means that you multiply all the elements instead of summing all of the elements.

42
00:03:23.730 --> 00:03:24.050
OK.

43
00:03:24.060 --> 00:03:26.730
So that's for summation and products.

44
00:03:26.970 --> 00:03:30.810
And the next thing I want to tell you about is something called a cumulative sum.

45
00:03:31.260 --> 00:03:33.870
It's like a sum except it's cumulative.

46
00:03:33.870 --> 00:03:35.010
So it's ongoing.

47
00:03:35.640 --> 00:03:38.640
So here the notation is slightly different.

48
00:03:38.640 --> 00:03:47.070
So we say that the K if element of some vector Y some variable Y is equal to the sum not of all the

49
00:03:47.070 --> 00:03:51.430
elements in the set a but just the first k.

50
00:03:51.450 --> 00:03:55.430
So let me break this down to explain this more clearly.

51
00:03:55.470 --> 00:04:00.520
So the first element in Y is y ones of k equals 1.

52
00:04:00.690 --> 00:04:04.590
And then so that would be from i equals 1 to K is 1.

53
00:04:04.590 --> 00:04:05.930
So that's just a.

54
00:04:05.940 --> 00:04:12.630
So the first element is Y is simply the first element in the set A and then the second element is in

55
00:04:12.630 --> 00:04:15.150
Y is A1 plus a.

56
00:04:15.150 --> 00:04:20.940
So the sum of the first two elements the third element is the sum of the first three elements here and

57
00:04:20.940 --> 00:04:23.220
so on until you get to the end.

58
00:04:23.250 --> 00:04:30.720
So then for every case element in the output vector y all you have to do is sum up all of the individual

59
00:04:30.720 --> 00:04:35.070
elements in a all the way up to the K if element.

60
00:04:35.070 --> 00:04:35.740
All right.

61
00:04:35.740 --> 00:04:37.330
Now let's switch to Python.

62
00:04:37.440 --> 00:04:44.340
You'll see that it's actually easier to implement this stuff in Python than it is to explain it.

63
00:04:44.340 --> 00:04:53.160
So we are going to be using the NUM pi module so let's say import num pi as in P and let's create the

64
00:04:53.160 --> 00:04:53.540
list.

65
00:04:53.550 --> 00:04:55.310
I'm going to say LSD.

66
00:04:55.360 --> 00:04:57.840
This is the variable name I'm gonna use for this.

67
00:04:57.900 --> 00:05:00.160
You don't want to use the variable name.

68
00:05:00.220 --> 00:05:01.190
L I SD.

69
00:05:01.260 --> 00:05:05.090
In fact you can use this because this is a reserved keyword.

70
00:05:05.090 --> 00:05:09.800
This is a function list for actually converting something into a list.

71
00:05:09.800 --> 00:05:17.440
So let's just actually see what happens if I try to create a variable that is a python keyword.

72
00:05:17.960 --> 00:05:23.660
So unfortunately it actually works but that's going to create some confusion.

73
00:05:23.660 --> 00:05:27.220
So that means that this operation is technically legal to do.

74
00:05:27.230 --> 00:05:29.260
It's just a terrible idea.

75
00:05:29.360 --> 00:05:37.430
So I'm going to remove the I here to be more consistent with good practice in programming.

76
00:05:37.480 --> 00:05:37.730
Okay.

77
00:05:37.760 --> 00:05:45.020
So the function to sum up a list there is actually a function that's already in the default Python workspace

78
00:05:45.050 --> 00:05:46.450
and that's just some.

79
00:05:46.450 --> 00:05:49.640
So some l s t and we can seize.

80
00:05:49.640 --> 00:05:52.370
The answer is 15 and let's confirm that quickly.

81
00:05:52.370 --> 00:05:59.060
So one plus three is four plus four is eight plus one is nine plus six gives us 15.

82
00:05:59.360 --> 00:06:01.340
So some works here.

83
00:06:01.440 --> 00:06:08.360
There's also a corresponding function in the NUM pi module which is also called Sum and of course that

84
00:06:08.360 --> 00:06:10.130
also gives 15.

85
00:06:10.250 --> 00:06:15.230
And now let's see this is just a quick reminder about how things work in Python.

86
00:06:15.260 --> 00:06:22.940
So now I'm asking for the sum of the list and also num pi some list so you might naively expect to see

87
00:06:22.940 --> 00:06:30.410
two answers here to 15s printing out but actually you only see one and that's because python is only

88
00:06:30.410 --> 00:06:36.830
going to show or least the Jupiter notebook is only going to show the output for the last piece of code

89
00:06:36.860 --> 00:06:38.400
that's run in a cell.

90
00:06:38.420 --> 00:06:44.630
So if you want to print out both of these results then you would have to use print so you could say

91
00:06:44.630 --> 00:06:47.790
print this and print that.

92
00:06:48.050 --> 00:06:55.040
And now we are actually going to get two answers 15 corresponding to this function and 15 corresponding

93
00:06:55.040 --> 00:06:57.060
to num paid out sum.

94
00:06:57.080 --> 00:06:57.310
All right.

95
00:06:57.320 --> 00:06:59.270
So that's pretty straightforward.

96
00:06:59.270 --> 00:07:02.630
It's also pretty straightforward to compute the product.

97
00:07:02.630 --> 00:07:04.160
So N.P. dot pride.

98
00:07:04.190 --> 00:07:06.180
So the function is just called product.

99
00:07:06.440 --> 00:07:13.790
And this one is actually also pretty simple to confirm mentally because we can basically just ignore

100
00:07:13.790 --> 00:07:15.020
the ones for the product.

101
00:07:15.020 --> 00:07:22.240
So it's really just three times four is twelve and twelve times four is seventy two and that's the answer.

102
00:07:22.250 --> 00:07:22.580
All right.

103
00:07:22.610 --> 00:07:30.350
So now let me show you the cumulative sum that function is called QM sum for a cumulative sum and then

104
00:07:30.410 --> 00:07:32.030
the input variable.

105
00:07:32.030 --> 00:07:38.780
So now you can see that the output is a is an array it's a num pi array and let's again think about

106
00:07:38.930 --> 00:07:42.230
how we can arrive at this conclusion here at this answer.

107
00:07:42.230 --> 00:07:48.680
So the first element in the cumulative sum is the sum of all the numbers in the list from the first

108
00:07:48.680 --> 00:07:52.250
element to the current element while the current element is the first one.

109
00:07:52.250 --> 00:07:54.770
So you know one plus nothing.

110
00:07:54.770 --> 00:07:55.550
Well that's just one.

111
00:07:55.550 --> 00:07:57.560
So it is itself OK.

112
00:07:57.590 --> 00:08:01.030
Then the next one is one plus three.

113
00:08:01.340 --> 00:08:06.830
And then the next one is going to be one plus three plus four which is eight.

114
00:08:06.830 --> 00:08:12.800
Now you have to be mindful here that which you're not doing so the wrong way to do this is to sum the

115
00:08:12.890 --> 00:08:15.200
existing numbers in the cumulative sum.

116
00:08:15.200 --> 00:08:16.380
That's not the way it works.

117
00:08:16.430 --> 00:08:22.930
You always go back to the original array the original list and you sum all of those numbers.

118
00:08:23.000 --> 00:08:29.330
So then we add one to that list and we get nine and then we add 16 and we get 15 here.

119
00:08:29.330 --> 00:08:29.710
All right.

120
00:08:29.720 --> 00:08:33.980
And now what I'd like to do is just make a simple plot.

121
00:08:34.010 --> 00:08:37.940
So let's say peel to dot plot and I'm going to plot the list.

122
00:08:37.940 --> 00:08:43.490
Let's make this be red squares with lines connecting the squares.

123
00:08:43.490 --> 00:08:49.790
Now I'm sure that right now while you're watching this you are screaming at your monitor saying No Mike

124
00:08:49.820 --> 00:08:51.580
you can't do this it's going to crash.

125
00:08:51.680 --> 00:08:58.280
And of course it's going to crash because the name P ulti is not defined and that's not defined because

126
00:08:58.280 --> 00:09:01.280
we haven't yet imported map plot lives.

127
00:09:01.280 --> 00:09:13.610
I'm going to write import met plot lib dot pie plot as P L T and then I run this code again and now

128
00:09:13.730 --> 00:09:17.550
I can run this and I hope you're not screaming at me anymore.

129
00:09:17.660 --> 00:09:17.890
All right.

130
00:09:17.900 --> 00:09:20.080
So this is just a list of numbers.

131
00:09:20.090 --> 00:09:26.920
It was 1 3 4 1 6 and now I'm going to plot on top of that the cumulative sum.

132
00:09:26.930 --> 00:09:27.320
So.

133
00:09:27.320 --> 00:09:33.750
And Peter Kumar's loops cumulative some of the list.

134
00:09:33.770 --> 00:09:37.370
And how about we make this blue circles

135
00:09:41.810 --> 00:09:42.140
all right.

136
00:09:42.150 --> 00:09:49.040
So now here you see the individual numbers and the numbers being summed together and maybe be good to

137
00:09:49.050 --> 00:09:50.410
add a label to this.

138
00:09:50.430 --> 00:09:55.890
So you now know from the previous section of this course that you can add labels this way you can say

139
00:09:55.890 --> 00:09:59.280
label equals and you can also do it here.

140
00:09:59.310 --> 00:10:07.650
So I'm going to write a plot that legend and then as a list I will call this the well list.

141
00:10:07.710 --> 00:10:17.640
Maybe I'll call this the set and then here we have cumulative sum now it's time for the exercise for

142
00:10:17.670 --> 00:10:18.390
this video.

143
00:10:18.390 --> 00:10:21.080
There are in fact two exercises here.

144
00:10:21.120 --> 00:10:27.660
So what you want to do is start with this set a it's just the numbers one two three four five and then

145
00:10:27.750 --> 00:10:33.470
you want to test whether this equality is true and whether this equality is true.

146
00:10:33.480 --> 00:10:40.710
So this says whether the sum of a is the sum of all these numbers divided by the sum of a squared is

147
00:10:40.710 --> 00:10:43.140
equal to one over the sum of a.

148
00:10:43.150 --> 00:10:45.740
And now you have to be careful with this notation.

149
00:10:45.810 --> 00:10:51.970
This is each individual element of a squared and then you sum all of those together.

150
00:10:52.020 --> 00:10:57.810
That's not the same thing as summing those elements together and then squaring the resulting summation.

151
00:10:57.810 --> 00:11:03.240
So this one is a little bit tricky because actually if you would just imagine for a moment ignoring

152
00:11:03.240 --> 00:11:04.770
these summation signs.

153
00:11:04.890 --> 00:11:08.570
So pretend this is just a and a is just a single number.

154
00:11:08.580 --> 00:11:15.330
So if this were so ignoring these summations a divided by a squared actually is the same thing as one

155
00:11:15.330 --> 00:11:16.350
over a.

156
00:11:16.350 --> 00:11:20.880
And the question is whether that equality also holds for this summation.

157
00:11:20.880 --> 00:11:22.650
It's an interesting question.

158
00:11:22.700 --> 00:11:22.970
OK.

159
00:11:22.980 --> 00:11:25.680
And then you repeat the procedure using products.

160
00:11:25.680 --> 00:11:32.280
So the product of the set a divided by the product of a squared and whether that equals one over the

161
00:11:32.280 --> 00:11:34.230
product of a good.

162
00:11:34.260 --> 00:11:38.740
So now is your opportunity to pause the video and work through this on your own.

163
00:11:38.910 --> 00:11:40.850
Come up with some answers to this.

164
00:11:40.950 --> 00:11:47.370
And when you've solved this in Python for these specific numbers then you can come back and see if you

165
00:11:47.370 --> 00:11:54.120
can figure out maybe using a piece of paper and a pencil why this is true or not true and why this is

166
00:11:54.120 --> 00:11:56.790
true or not true.

167
00:11:56.950 --> 00:11:57.340
All right.

168
00:11:57.370 --> 00:11:58.880
So let's get started.

169
00:11:58.880 --> 00:12:04.690
So I'm going to start by saying writing out this set and that was called a So set a equals and I will

170
00:12:04.690 --> 00:12:12.280
use the NUM PI that a range function and then s and then I'll say one comma six so we can just look

171
00:12:12.280 --> 00:12:12.610
at this.

172
00:12:12.640 --> 00:12:19.800
That's going to give me the numbers 1 through 5 and this variable type is a num pi array.

173
00:12:19.870 --> 00:12:20.100
OK.

174
00:12:20.110 --> 00:12:25.150
So now what I'm going to do so actually I'm just going to start here with the summation.

175
00:12:25.150 --> 00:12:29.710
So that was like question number one or do it like this.

176
00:12:29.740 --> 00:12:38.110
So now let's create a new variable we'll call this the let's call this some A equals the NUM PI that

177
00:12:38.120 --> 00:12:48.680
sum of a and then some a two where the two is kind of like four A squared equals P dot sum.

178
00:12:48.790 --> 00:12:52.910
And now we want to say a star star 2.

179
00:12:53.110 --> 00:12:59.380
And the reason why I'm creating these separate variables in this way is that now I can say answer one

180
00:13:00.160 --> 00:13:09.620
equals sum a divided by sum a squared whereas answer 2 equals 1 divided by sum.

181
00:13:09.620 --> 00:13:16.800
Hey so remember these are the two equations the two fractions that we are trying to test in python.

182
00:13:16.870 --> 00:13:17.140
All right.

183
00:13:17.140 --> 00:13:20.760
So now I'm going to do some printing so let's say print.

184
00:13:20.980 --> 00:13:21.380
Let's see.

185
00:13:21.380 --> 00:13:24.940
I call this option 1 equals.

186
00:13:24.940 --> 00:13:31.680
And then it's going to be percent s and then I'm going to replace this with answer 1.

187
00:13:31.870 --> 00:13:36.840
And now I'm gonna run all this code first just to make sure I haven't made any mistakes.

188
00:13:37.080 --> 00:13:37.330
Okay.

189
00:13:37.360 --> 00:13:41.810
So I haven't made any mistakes it looks like everything worked out fine.

190
00:13:41.860 --> 00:13:44.770
So now copy and paste I say.

191
00:13:44.800 --> 00:13:48.430
Option 2 equals answer 2.

192
00:13:48.460 --> 00:13:51.070
So if those two fractions are equal to each other.

193
00:13:51.070 --> 00:13:57.310
So this thing in this thing then I should get the same answer four ends one and answer two huh.

194
00:13:57.310 --> 00:13:59.170
And in fact they are different.

195
00:13:59.170 --> 00:14:01.030
They are not the same.

196
00:14:01.060 --> 00:14:06.310
So I'm going to talk in a moment when I go back to the slides about why that is the case but for now

197
00:14:06.340 --> 00:14:10.840
I just want to show you an alternative for printing out two lines like this.

198
00:14:10.840 --> 00:14:18.440
So instead of issuing two separate print commands like this you can also do something like this.

199
00:14:18.460 --> 00:14:25.990
So now I'm going to write slash n and this slash and gets interpreted as a new line character.

200
00:14:25.990 --> 00:14:32.720
So now I have all of the print statements that I want on the same lines in the same print function.

201
00:14:32.770 --> 00:14:32.950
OK.

202
00:14:32.980 --> 00:14:35.620
But this does mean that there's two percent S's in here.

203
00:14:35.620 --> 00:14:40.080
So this needs to be an S one.

204
00:14:40.210 --> 00:14:40.430
Okay.

205
00:14:40.470 --> 00:14:40.770
Whoops.

206
00:14:40.780 --> 00:14:43.290
And then there's an extra space in there.

207
00:14:43.330 --> 00:14:43.570
All right.

208
00:14:43.570 --> 00:14:46.430
So now you still get this dual line output.

209
00:14:46.570 --> 00:14:46.840
All right.

210
00:14:46.840 --> 00:14:48.580
So this was for summation.

211
00:14:48.580 --> 00:14:56.860
Now I'm basically going to repeat this thing floor products and let's see how much I can copy and paste

212
00:14:56.860 --> 00:14:58.500
from here.

213
00:14:58.690 --> 00:15:03.130
So I don't need to copy and paste a because the set is the same.

214
00:15:03.130 --> 00:15:09.850
However all of these sums here need to change to products this prod and prod.

215
00:15:09.850 --> 00:15:14.040
Now in theory I could actually leave these variables the same.

216
00:15:14.050 --> 00:15:15.380
And it's still going to work.

217
00:15:15.520 --> 00:15:21.200
But this is confusing variable so anyone else who reads your code is going to be horribly confused.

218
00:15:21.250 --> 00:15:26.270
So I'm going to write prod instead of some.

219
00:15:26.320 --> 00:15:26.980
So let's see.

220
00:15:27.010 --> 00:15:39.030
Copy and paste and then here paste OK so I don't really know if in this case I actually really saved

221
00:15:39.030 --> 00:15:40.740
much time by copying pasting.

222
00:15:40.740 --> 00:15:41.570
But anyway.

223
00:15:41.820 --> 00:15:42.440
Huh.

224
00:15:42.450 --> 00:15:48.890
So now I run this and we get exactly the same result for both of these cases.

225
00:15:49.170 --> 00:15:52.990
So it seems like the answer is that these two are not equal.

226
00:15:53.040 --> 00:15:54.880
And these two are equal.

227
00:15:54.960 --> 00:16:01.230
So why is that the case so actually for summation for addition it's easy to see that this is not the

228
00:16:01.230 --> 00:16:01.880
case.

229
00:16:01.980 --> 00:16:07.890
You just run it with a few examples and you will see that you don't really get much in the way of cancellation

230
00:16:08.340 --> 00:16:13.980
but for products it turns out that you do get a lot of cancellations and you can go through this with

231
00:16:13.980 --> 00:16:14.990
individual numbers.

232
00:16:15.000 --> 00:16:21.200
But in fact I think it's easier and also better to see this by replacing the numbers with letters.

233
00:16:21.200 --> 00:16:26.910
And now we don't have to think about what these letters stand for we just know that each letter corresponds

234
00:16:26.910 --> 00:16:28.840
to an individual number.

235
00:16:28.920 --> 00:16:30.410
And when you write it out this way.

236
00:16:30.410 --> 00:16:36.570
So writing out all of the individual products rather than using the product symbol you can see that

237
00:16:36.570 --> 00:16:41.970
for every letter that's on the numerator you have the same letters squared in the denominator.

238
00:16:42.000 --> 00:16:45.730
So of course each one of these is going to cancel.

239
00:16:45.810 --> 00:16:46.110
All right.

240
00:16:46.140 --> 00:16:54.590
So I discussed the mathematical notations and Python codes for sums and products and cumulative sums.

241
00:16:54.870 --> 00:17:00.440
And you learned yet again this is something I'm really trying to illustrate throughout this course.

242
00:17:00.630 --> 00:17:08.040
How to use Python as a tool for helping you understand and investigate mathematical claims and mathematical

243
00:17:08.040 --> 00:17:08.790
principles.
