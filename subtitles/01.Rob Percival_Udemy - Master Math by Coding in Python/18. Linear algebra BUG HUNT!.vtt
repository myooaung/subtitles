WEBVTT
1
00:00:03.450 --> 00:00:10.470
I know you are excited because you've been looking forward to this bug con for the entire section on

2
00:00:10.530 --> 00:00:12.090
linear algebra.

3
00:00:12.090 --> 00:00:13.420
So here we go.

4
00:00:13.470 --> 00:00:15.140
If you haven't already.

5
00:00:15.150 --> 00:00:22.930
Now is the time to pause the video go through all of this code and find and fix all of the bugs.

6
00:00:22.950 --> 00:00:30.360
All right so I can already see that we are going to need to start by importing some modules and special

7
00:00:30.360 --> 00:00:31.300
functions.

8
00:00:31.440 --> 00:00:33.510
So let's see.

9
00:00:33.510 --> 00:00:43.380
We will need import gnome pi as and P. We will need import Sim pie as Sim and we will need to import

10
00:00:43.470 --> 00:00:45.360
from IE.

11
00:00:45.570 --> 00:00:51.840
Python that display the display and math functions.

12
00:00:51.840 --> 00:00:52.940
Possibly we will need.

13
00:00:52.950 --> 00:00:54.780
Oh we will definitely need Matlab lib.

14
00:00:54.780 --> 00:00:55.820
Now I see it here.

15
00:00:56.010 --> 00:01:04.890
So also import map plot lib dot pi plot as P L T.

16
00:01:04.890 --> 00:01:05.340
All right.

17
00:01:05.340 --> 00:01:09.070
I think that's probably all of the modules that we will need.

18
00:01:09.090 --> 00:01:09.530
Let's see.

19
00:01:09.540 --> 00:01:16.230
Create a column vector and then off this is a lot of complicated embedded functions here.

20
00:01:16.230 --> 00:01:17.490
Let's just see what happens.

21
00:01:17.490 --> 00:01:18.350
Mm hmm.

22
00:01:18.510 --> 00:01:18.780
All right.

23
00:01:18.780 --> 00:01:24.420
So first of all this looks a little awkward to have these double square brackets here but this is also

24
00:01:24.420 --> 00:01:26.150
clearly not a column vector.

25
00:01:26.150 --> 00:01:33.300
It's supposed to be a column vector well what's going on here is that each row in the matrix when you

26
00:01:33.390 --> 00:01:39.510
specify a matrix using num paid array each row needs to be in its own square brackets.

27
00:01:39.540 --> 00:01:46.260
So this needs to be in a square bracket and the three needs to be in a square brackets.

28
00:01:46.260 --> 00:01:50.700
So and those other parentheses I think we're just there to confuse us.

29
00:01:50.700 --> 00:01:51.700
So there we go.

30
00:01:51.780 --> 00:01:57.370
Each row in its own square bracket and then the entire matrix is in a set of square brackets.

31
00:01:57.480 --> 00:01:59.690
That gives us a column vector.

32
00:02:00.000 --> 00:02:00.770
All right.

33
00:02:00.960 --> 00:02:04.650
Visualize scalar vector multiplication.

34
00:02:04.650 --> 00:02:08.580
Let's see I'm just going to run this and we get an error.

35
00:02:08.580 --> 00:02:11.220
Now this one is a bit tricky actually.

36
00:02:11.220 --> 00:02:15.630
So we say the error message claims to be on this line.

37
00:02:15.900 --> 00:02:22.020
Then if you look at the error message itself it says string object is not callable.

38
00:02:22.020 --> 00:02:22.980
So what is going on here.

39
00:02:22.980 --> 00:02:26.160
There are actually no strings in this line.

40
00:02:26.160 --> 00:02:27.630
So this is really tricky.

41
00:02:27.630 --> 00:02:33.000
The mistake here the the error actually happens on this line of code.

42
00:02:33.240 --> 00:02:39.150
And when I'm doing wrong here well you know I whoever wrote this code the terrible programmer who wrote

43
00:02:39.150 --> 00:02:44.310
this code what they are trying to do is set the axis to be square.

44
00:02:44.310 --> 00:02:50.070
But in fact what they've done is set the axis as a variable to be string.

45
00:02:50.130 --> 00:02:59.480
So what we need to do is put this in parentheses like this except now we still actually get this error.

46
00:02:59.550 --> 00:03:05.040
And basically what's happened here is we've just done some real fundamental damage to peel.

47
00:03:05.060 --> 00:03:09.480
You got access by setting it equal to the string a square.

48
00:03:09.660 --> 00:03:16.260
And you know sometimes when you really get your python code all caught up in a bundle it's good just

49
00:03:16.260 --> 00:03:17.450
to restart everything.

50
00:03:17.460 --> 00:03:24.450
So I'm going to select kernel up here and restart and it says are you sure you want to restart all the

51
00:03:24.450 --> 00:03:26.160
variables will be lost.

52
00:03:26.210 --> 00:03:30.830
Now sometimes that's problematic but it's no problem here.

53
00:03:30.840 --> 00:03:38.640
All we need to do is rerun this cell here to reinforce all of these modules okay.

54
00:03:38.660 --> 00:03:40.950
And then I'm going to go back and rerun this.

55
00:03:41.330 --> 00:03:43.930
So now the plotting part looks good.

56
00:03:44.330 --> 00:03:46.360
But the legend doesn't quite look right.

57
00:03:46.370 --> 00:03:48.410
So I don't know what this percent is doing here.

58
00:03:48.410 --> 00:03:52.750
This is actually just vector V here in red an SUV.

59
00:03:52.850 --> 00:03:55.730
So I think we don't even need that percent sign.

60
00:03:55.730 --> 00:03:56.040
Okay.

61
00:03:56.070 --> 00:03:58.100
Now let's look at what's happening here.

62
00:03:58.100 --> 00:04:00.090
Just to make sure that we're doing the right thing.

63
00:04:00.140 --> 00:04:07.030
So we have this vector here minus two two that is minus 2 comma 2 not minus a 2 2.

64
00:04:07.310 --> 00:04:10.760
And these scalar here is point seven.

65
00:04:10.790 --> 00:04:17.690
Now if the vector is minus two plus two which is this line here and a scalar is point seven then actually

66
00:04:17.690 --> 00:04:20.690
this blue line should probably come up to around here.

67
00:04:20.720 --> 00:04:21.730
It shouldn't be this dot.

68
00:04:21.740 --> 00:04:24.820
I think something is fundamentally wrong here.

69
00:04:24.830 --> 00:04:28.650
Let's also check out what this variable s v actually is.

70
00:04:28.640 --> 00:04:34.190
So if we print out S V then it's just a zero.

71
00:04:34.220 --> 00:04:38.090
This is actually not this vector times point seven.

72
00:04:38.090 --> 00:04:39.140
And so what's going on here.

73
00:04:39.140 --> 00:04:44.630
I have no idea what's going on here actually but it looks like we are computing the dot product between

74
00:04:45.020 --> 00:04:51.880
s com s so a vector that is point seven point seven and minus two plus two.

75
00:04:51.920 --> 00:04:58.580
Now it actually makes sense where this result comes from essentially what we are doing here is saying

76
00:04:58.610 --> 00:05:03.880
point seven times minus two plus point seven times plus two and that equals zero.

77
00:05:03.890 --> 00:05:05.660
So this is totally totally wrong.

78
00:05:05.660 --> 00:05:13.350
This actually is just supposed to be s times V like this.

79
00:05:13.350 --> 00:05:16.520
And now when we print this out we see we get what we expect.

80
00:05:16.550 --> 00:05:23.330
So point seven times two is one point four and then we just get a scaled version of this vector course.

81
00:05:23.330 --> 00:05:29.030
Now we've gotten some other errors and the arrows on this line and you can actually see that this is

82
00:05:29.360 --> 00:05:35.940
you know we need the first component here and the second component here.

83
00:05:36.860 --> 00:05:40.050
That should be one for the second component.

84
00:05:40.070 --> 00:05:40.760
All right.

85
00:05:40.760 --> 00:05:42.850
Now this looks good.

86
00:05:42.890 --> 00:05:49.130
I'm gonna say that is the successful completion of this particular problem here.

87
00:05:49.160 --> 00:05:49.460
All right.

88
00:05:49.460 --> 00:05:50.390
So here we go.

89
00:05:50.390 --> 00:05:52.340
Algorithm to compute the dot product.

90
00:05:52.370 --> 00:06:00.130
So we have some random vectors and then we do the dot product by setting the dot product to be there

91
00:06:00.200 --> 00:06:01.900
this variable to be zero.

92
00:06:02.060 --> 00:06:07.860
And adding to itself the corresponding element in V Times W..

93
00:06:07.910 --> 00:06:11.570
And then we compare that to the function and num num pi dot dot.

94
00:06:12.530 --> 00:06:12.820
All right.

95
00:06:12.850 --> 00:06:15.730
So we already get an error and this is related to shape.

96
00:06:15.720 --> 00:06:21.070
So I hope that you already caught that one so you could change this to 7.

97
00:06:21.080 --> 00:06:24.060
Or you could have changed that to 8 either way would be fine.

98
00:06:24.830 --> 00:06:25.130
Mm hmm.

99
00:06:25.260 --> 00:06:29.360
Now these two answers are actually not equal to each other.

100
00:06:29.430 --> 00:06:31.440
And what is going on here.

101
00:06:31.440 --> 00:06:36.000
Well if we look at this line of code carefully it looks like this was a typo.

102
00:06:36.000 --> 00:06:38.210
This probably should say hi.

103
00:06:38.340 --> 00:06:44.410
Otherwise it was fixed to be the first or the second element in vector W..

104
00:06:44.520 --> 00:06:44.970
Let's see.

105
00:06:44.970 --> 00:06:50.070
And now we get the same answer for both of these mechanisms.

106
00:06:50.070 --> 00:06:55.130
And now I'd like to show you a little bit of a shortcut in Python for getting this to work.

107
00:06:55.200 --> 00:07:02.130
So if you want to set a variable to be equal to itself plus something else you can write out the line

108
00:07:02.130 --> 00:07:03.120
of code like this.

109
00:07:03.150 --> 00:07:04.020
Totally fine.

110
00:07:04.020 --> 00:07:06.040
I think this looks very clear.

111
00:07:06.090 --> 00:07:10.870
However it's possible to write it out in even more condensed language.

112
00:07:11.070 --> 00:07:15.570
And that's by saying plus equals instead of just equals.

113
00:07:15.630 --> 00:07:23.760
So python will interpret this expression here as saying that the dot product equals itself plus whatever

114
00:07:23.760 --> 00:07:27.450
is on the right hand side of this equation and you can see that here.

115
00:07:27.460 --> 00:07:35.200
Now I'm running this again and you get the same answer for NPR dot dot and our algorithm here.

116
00:07:35.250 --> 00:07:41.130
Now obviously these answers will change every time I run it because these are random numbers.

117
00:07:41.130 --> 00:07:42.120
Very nice.

118
00:07:42.120 --> 00:07:43.760
Let's see.

119
00:07:43.770 --> 00:07:49.260
This doesn't exactly tell us what we're supposed to be doing here but I can look down so here we are

120
00:07:49.260 --> 00:07:58.680
creating some data as a range of numbers that goes from 0 to 9 and then we add some normally distributed

121
00:07:58.680 --> 00:07:59.970
random numbers.

122
00:08:00.030 --> 00:08:05.640
And here we are computing the correlation and confirm with the NUM pi correlation coefficient.

123
00:08:05.670 --> 00:08:06.240
OK.

124
00:08:06.270 --> 00:08:13.350
So I expect these two variables to be identical to each other and they're kind of close I guess but

125
00:08:13.440 --> 00:08:15.360
certainly not identical.

126
00:08:15.360 --> 00:08:16.500
Let's see what's going wrong.

127
00:08:17.070 --> 00:08:22.280
So remember from the video that I showed about computing the correlation coefficient.

128
00:08:22.290 --> 00:08:30.840
That was an application of the dot product in statistics that the numerator of the correlation coefficient

129
00:08:30.930 --> 00:08:37.410
is the dot product between the two vectors and the denominator is the square root of the dot product

130
00:08:37.430 --> 00:08:44.010
of the vector with itself times the square root of the dot product of the other vector with itself.

131
00:08:44.190 --> 00:08:46.230
And then we do this division.

132
00:08:46.260 --> 00:08:48.560
And so actually all of this is correct.

133
00:08:48.570 --> 00:08:51.090
However we are missing one thing.

134
00:08:51.090 --> 00:08:53.190
What does that one thing that we're missing.

135
00:08:53.310 --> 00:09:00.360
The one thing that we're missing is that these data vectors these data streams need to be mean centered

136
00:09:00.600 --> 00:09:07.120
so means center and that just means subtracting the mean from the data set.

137
00:09:07.150 --> 00:09:13.840
So data 1 equals data 1 minus num Pi I mean of data 1.

138
00:09:14.130 --> 00:09:20.100
And now if you are already thinking that this can be simplified then good for you we are going to do

139
00:09:20.100 --> 00:09:25.530
that like this and now so that's four data one.

140
00:09:25.620 --> 00:09:29.260
And then we repeat this for data too.

141
00:09:29.420 --> 00:09:35.220
And now we get exactly the same correlation coefficient for both of these operations.

142
00:09:35.490 --> 00:09:40.740
And actually it's interesting to see that once you get down to about 10 or twelve or whatever this is

143
00:09:41.010 --> 00:09:46.530
degrees of precision then eventually these algorithms do start to diverge a tiny bit.

144
00:09:46.590 --> 00:09:51.930
And that's because core color of this function is actually implementing a slightly different and more

145
00:09:51.930 --> 00:09:56.240
efficient and faster algorithm than what I am showing here.

146
00:09:56.250 --> 00:09:56.730
All right.

147
00:09:56.730 --> 00:09:57.420
Here we go.

148
00:09:57.420 --> 00:10:04.530
We are trying to compute the outer product and this looks again like one of these approaches where we

149
00:10:04.530 --> 00:10:07.710
compare the known pi function outer.

150
00:10:07.710 --> 00:10:15.480
So the built in function outer to computing this manually using the algorithm for computing the outer

151
00:10:15.480 --> 00:10:16.380
product.

152
00:10:16.380 --> 00:10:23.460
So remember that one way to compute the outer product is to set each row of the outer product matrix

153
00:10:23.880 --> 00:10:26.970
to be the row of the right matrix.

154
00:10:26.970 --> 00:10:34.140
So are the right vector which is gonna be this one times each element of the Left vector which here

155
00:10:34.140 --> 00:10:36.020
looks like 0 1.

156
00:10:36.120 --> 00:10:39.260
So that already tells me that there's something going wrong here.

157
00:10:39.870 --> 00:10:44.570
So let's let's just try to run this and this says could not broadcast input.

158
00:10:44.590 --> 00:10:44.800
Right.

159
00:10:44.820 --> 00:10:45.470
OK.

160
00:10:45.540 --> 00:10:52.590
So based on what I just described as the algorithm for computing the outer product matrix I can already

161
00:10:52.620 --> 00:10:54.840
determine that this is incorrect.

162
00:10:54.840 --> 00:11:02.220
This should be the entire row vector on the right and each element of the column vector on the left

163
00:11:02.400 --> 00:11:03.880
like this.

164
00:11:03.890 --> 00:11:04.320
Mm hmm.

165
00:11:04.320 --> 00:11:14.160
So now we don't get any explicit Python errors but when I say the outer mat so this outer product matrix

166
00:11:14.160 --> 00:11:22.230
here minus num pi dot outer we get zeros for the first four rows and then non zeros for these last four

167
00:11:22.230 --> 00:11:23.160
rows.

168
00:11:23.220 --> 00:11:26.040
So there's clearly something strange happening here.

169
00:11:26.070 --> 00:11:27.890
Let's try it again.

170
00:11:27.930 --> 00:11:28.590
Mm hmm.

171
00:11:28.590 --> 00:11:29.720
Again the same things.

172
00:11:29.730 --> 00:11:35.370
Now we get all zeros for the first four rows and a couple of zeros here as well.

173
00:11:35.370 --> 00:11:40.460
But it seems like the first four rows of zeros is pretty consistent.

174
00:11:40.470 --> 00:11:44.050
I wonder what would happen if I would change the sizes of these matrices.

175
00:11:44.060 --> 00:11:50.170
So let's say what if this is like six elements and this is eight elements.

176
00:11:50.170 --> 00:11:57.570
Oh now we actually do get an error message and it says index six is out of bounds for Axis 0 with size

177
00:11:57.570 --> 00:11:58.080
6.

178
00:11:58.090 --> 00:12:03.540
OK what's actually happening is in this line here for the range.

179
00:12:03.570 --> 00:12:10.710
Now notice that we are what we are actually looping through is elements in 0 1 but what we are looping

180
00:12:10.710 --> 00:12:16.620
through here what we are specifying is the range of the elements is actually coming from the size of

181
00:12:16.650 --> 00:12:18.330
0 2.

182
00:12:18.330 --> 00:12:23.700
So I'm just going to replace the two with one and now we get a matrix of all zeros.

183
00:12:23.700 --> 00:12:30.180
But this is a really tricky point because you know when it was this way.

184
00:12:30.180 --> 00:12:36.840
So how it was initially we didn't get any python coding errors because technically we haven't done anything

185
00:12:36.840 --> 00:12:38.560
wrong in terms of programming.

186
00:12:38.700 --> 00:12:44.520
We've done something wrong in terms of of math and indexing but we haven't done anything illegal in

187
00:12:44.520 --> 00:12:46.180
terms of Python coding.

188
00:12:46.410 --> 00:12:47.620
But the result is wrong.

189
00:12:47.640 --> 00:12:53.520
And if you weren't actually comparing this then yeah you probably wouldn't even notice.

190
00:12:53.520 --> 00:12:56.370
You might not even notice that this error was in there.

191
00:12:56.430 --> 00:13:00.840
So these are the most devious kinds of coding mistakes.

192
00:13:00.840 --> 00:13:02.630
Anyway let's move on.

193
00:13:02.850 --> 00:13:03.170
OK.

194
00:13:03.180 --> 00:13:04.970
Matrix multiplication.

195
00:13:05.190 --> 00:13:10.710
So we have a random five by five matrix multiply it by the five by five.

196
00:13:10.710 --> 00:13:18.630
Identity matrix and what we should see is a full matrix of random numbers which we don't see in fact

197
00:13:18.630 --> 00:13:21.870
we see a matrix that's mostly zeros.

198
00:13:21.960 --> 00:13:28.500
So what's happening here is that the asterisk is implementing element y's multiplication but we need

199
00:13:28.710 --> 00:13:31.620
a full on matrix multiplication.

200
00:13:31.710 --> 00:13:33.720
So there you go.

201
00:13:33.720 --> 00:13:35.460
All right let's go on to the next cell.

202
00:13:35.460 --> 00:13:38.330
It looks like this is a similar kind of problems.

203
00:13:38.340 --> 00:13:46.190
I can already see that this is a little bit weird here multiplying a by the identity matrix so here

204
00:13:46.190 --> 00:13:48.950
we see the original matrix A.

205
00:13:48.950 --> 00:13:51.980
Here we are doing element y's multiplication.

206
00:13:52.370 --> 00:13:56.030
And this says there's actually a size problem.

207
00:13:56.180 --> 00:14:02.150
So for element y's multiplication it's not possible with these two matrices because they are different

208
00:14:02.150 --> 00:14:04.580
sizes they have a different number of elements.

209
00:14:04.640 --> 00:14:09.620
So let's see what would happen if we would replace this with matrix multiplication.

210
00:14:09.770 --> 00:14:10.460
And there you go.

211
00:14:10.460 --> 00:14:19.460
We get that a on the top is the same thing as a matrix multiplying by the identity matrix on the bottom

212
00:14:19.460 --> 00:14:19.700
here.

213
00:14:19.730 --> 00:14:25.310
So you can see that this matrix is the same as this matrix All right.

214
00:14:25.320 --> 00:14:26.490
Here.

215
00:14:26.730 --> 00:14:31.390
This one says random matrices are in vertical.

216
00:14:31.410 --> 00:14:37.560
So what we do is create a matrix of random integers between minus five and plus five.

217
00:14:37.560 --> 00:14:41.310
It's five by five and it's random so it should be in vertical.

218
00:14:41.310 --> 00:14:44.210
So I don't really see what the issue is here.

219
00:14:44.210 --> 00:14:50.460
We should get the identity matrix because the matrix times its inverse is the identity matrix.

220
00:14:50.460 --> 00:14:53.180
Let's see what's going on.

221
00:14:53.280 --> 00:15:02.100
Module num Pi has no attribute in are the problem here is that it is not in the main num pi module it's

222
00:15:02.100 --> 00:15:06.300
actually in the Lin algebra module or the sub module.

223
00:15:07.090 --> 00:15:16.540
Okay so now we've multiplied a by its inverse and we get the identity matrix let's see so here we are

224
00:15:16.780 --> 00:15:18.440
plotting the iron spectrum.

225
00:15:18.480 --> 00:15:27.070
So we create a matrix multiply that matrix by its own transpose remember that gives us a square symmetric

226
00:15:27.070 --> 00:15:33.280
matrix this matrix is already Square but it does give us a symmetric matrix and let's just see what's

227
00:15:33.280 --> 00:15:34.650
going on here.

228
00:15:34.690 --> 00:15:35.340
Hmm.

229
00:15:35.350 --> 00:15:37.500
So we don't get any python errors.

230
00:15:37.510 --> 00:15:41.860
So that part seems okay but let's look at these eigenvalues.

231
00:15:41.900 --> 00:15:48.880
You know there's like 25 of these eigenvalues but this is just a five by five matrix and we can even

232
00:15:48.880 --> 00:15:49.600
confirm this.

233
00:15:49.600 --> 00:15:57.240
I'm going to print out num Pi the shape of M and this is a five by five matrix.

234
00:15:57.250 --> 00:16:01.180
So there's really only supposed to be five eigenvalues.

235
00:16:01.180 --> 00:16:02.740
Let's see what's going on.

236
00:16:02.740 --> 00:16:10.110
I'm going to look at the help file of the dark string for Ike and let's see if this gives us some insight.

237
00:16:10.540 --> 00:16:19.840
So this returns W is the eigenvalues and then V the second output is the icon vectors.

238
00:16:19.930 --> 00:16:22.630
So in fact the order of the output is wrong here.

239
00:16:22.630 --> 00:16:23.920
This is just swapped.

240
00:16:23.950 --> 00:16:30.240
This should be the icon values and this should be the icon vectors.

241
00:16:30.610 --> 00:16:37.780
And now we only get five components five things being plotted here which is consistent that is exactly

242
00:16:37.780 --> 00:16:41.120
how many we expect for the eigenvalues.

243
00:16:41.380 --> 00:16:48.430
By the way I haven't yet introduced you to this function flatten num pie dot matrix dot flatten but

244
00:16:48.430 --> 00:16:54.940
essentially what that's doing is taking this matrix or whatever is the input matrix and expanding it

245
00:16:54.940 --> 00:16:59.920
out from a matrix into one really long array a really long vector.

246
00:16:59.920 --> 00:17:06.980
And so for a the ion vectors matrix which is a five by five matrix when you flatten it you get twenty

247
00:17:06.980 --> 00:17:12.730
five total elements and that's why you get a line of twenty five here.

248
00:17:12.730 --> 00:17:18.520
So these are just all the individual components of all the each of the five ion vectors.

249
00:17:18.810 --> 00:17:19.110
Okay.

250
00:17:19.120 --> 00:17:20.780
So set that back.

251
00:17:21.130 --> 00:17:23.650
So that looks better by the way.

252
00:17:23.650 --> 00:17:29.640
You can also see here that the eigenvalues are not intrinsically sorted by magnitude.

253
00:17:29.740 --> 00:17:33.550
So they don't come out as the largest eigenvalues first.

254
00:17:33.640 --> 00:17:40.860
That has to do with the estimation algorithm that Python uses to compute the eigenvalues.

255
00:17:40.990 --> 00:17:42.610
Anyway let's move on.

256
00:17:42.610 --> 00:17:47.460
This looks like the last exercise to work on for this bug hunt.

257
00:17:47.590 --> 00:17:52.000
So it looks like we are creating a matrix of random integers.

258
00:17:52.060 --> 00:17:58.420
It's a 10 by 20 matrix so actually we cannot perform an eigenvalues composition on this matrix.

259
00:17:58.420 --> 00:18:01.330
But of course we can do an SVOD.

260
00:18:01.330 --> 00:18:02.610
So we do the SVOD.

261
00:18:03.460 --> 00:18:11.320
We create a full matrix based on a diagonal matrix based on these singular values.

262
00:18:11.470 --> 00:18:16.300
And then we try to reconstruct that matrix and make some plots.

263
00:18:16.300 --> 00:18:16.540
All right.

264
00:18:16.540 --> 00:18:20.110
And we already get an error and it's related to size.

265
00:18:20.110 --> 00:18:27.660
And this is in fact something that I discussed in the previous video on the singular value decomposition.

266
00:18:27.670 --> 00:18:36.010
So what we need to do is first reconstruct is to be a zeros matrix corresponding to the size or the

267
00:18:36.010 --> 00:18:48.520
shape of the matrix A and then we need to loop over the elements in s so range of length s and then

268
00:18:48.520 --> 00:18:55.510
we say s the ISF diagonal element equals the corresponding element in the little s.

269
00:18:55.510 --> 00:18:57.250
So in vector us.

270
00:18:57.370 --> 00:18:57.670
Okay.

271
00:18:57.700 --> 00:18:59.990
So now let's see how this looks.

272
00:19:00.010 --> 00:19:01.740
Oh we still get an error.

273
00:19:01.900 --> 00:19:07.720
It's another mismatched dimension hey but you know looking at the order this is not the correct order.

274
00:19:07.720 --> 00:19:11.560
It should be you times Sigma times V.

275
00:19:11.590 --> 00:19:15.230
So I'm going to rewrite this like this.

276
00:19:15.220 --> 00:19:17.530
You times Sigma times V.

277
00:19:17.530 --> 00:19:23.680
Actually this is v transpose python will automatically spit out v transpose.

278
00:19:24.260 --> 00:19:31.510
OK so this is looking good here we see the Matrix a reconstructed matrix A and the difference between

279
00:19:31.510 --> 00:19:36.730
the two which is an empty plot it's all zeros and that's comforting because that means that we have

280
00:19:36.730 --> 00:19:40.050
reconstructed this matrix accurately.

281
00:19:40.160 --> 00:19:46.160
I hope you enjoyed this bug hunt and more generally I hope you enjoyed learning a little bit about linear

282
00:19:46.160 --> 00:19:52.370
algebra from this section of the course as I mentioned in the beginning of this section linear algebra

283
00:19:52.400 --> 00:19:59.000
is a beautiful rich and really important topic in mathematics I hope you feel like you got a little

284
00:19:59.000 --> 00:20:05.150
bit of a taste a little bit of enthusiasm about learning linear algebra from this section and maybe

285
00:20:05.150 --> 00:20:09.440
you are inspired to continue learning about linear algebra in more depth.
