WEBVTT
1
00:00:02.780 --> 00:00:10.790
There are many special matrices in linear algebra special matrices have special properties or they are

2
00:00:10.790 --> 00:00:14.120
used for very specific purposes.

3
00:00:14.120 --> 00:00:17.920
In this video I'm going to tell you about a couple of special matrices.

4
00:00:17.930 --> 00:00:24.980
Just as a way of introduction and in the exercise you're also going to learn about the strategy for

5
00:00:25.130 --> 00:00:28.200
basically learning about new special matrices.

6
00:00:28.310 --> 00:00:35.000
And again this is consistent with my main goal of creating this course is to show you how to use python

7
00:00:35.030 --> 00:00:39.010
as a tool to learn about particular topics in mathematics.

8
00:00:39.020 --> 00:00:44.240
In this case though in this video about one specific kind of a special matrix.

9
00:00:44.240 --> 00:00:52.730
All right let's begin this matrix is called an identity matrix an identity matrix is a matrix that has

10
00:00:52.730 --> 00:01:01.070
all zeros everywhere except for the diagonal which contains all ones and the identity matrix is always

11
00:01:01.100 --> 00:01:05.890
a square matrix so it has the same number of rows as it has columns.

12
00:01:05.930 --> 00:01:08.810
So this is a general form of the identity matrix.

13
00:01:08.810 --> 00:01:15.050
All the dots around here indicate that this matrix can keep going you know for many many rows many many

14
00:01:15.050 --> 00:01:21.050
columns the identity matrix is often indicated using a capital boldface letter.

15
00:01:21.050 --> 00:01:22.430
I like this.

16
00:01:22.430 --> 00:01:24.320
Sometimes you'll see a subscript.

17
00:01:24.320 --> 00:01:26.900
This would mean the two by two identity matrix.

18
00:01:26.900 --> 00:01:29.780
This would mean the five by five identity matrix.

19
00:01:29.780 --> 00:01:35.020
And if it doesn't really matter exactly what the size is then you'll just see the letter.

20
00:01:35.030 --> 00:01:37.400
I like this.

21
00:01:37.400 --> 00:01:39.670
Here you see a zeros matrix.

22
00:01:39.680 --> 00:01:41.300
This is called the zeros matrix.

23
00:01:41.300 --> 00:01:44.990
It is very simply a matrix of all zeros.

24
00:01:44.990 --> 00:01:50.370
It's also typically Square and it's indicated not surprisingly using a zero.

25
00:01:50.420 --> 00:01:52.940
But this is always a boldface zero.

26
00:01:52.940 --> 00:01:57.020
So this is not the same zero as what this would be.

27
00:01:57.020 --> 00:02:03.440
Here we have a diagonal matrix so a diagonal matrix actually initially looks a bit like the identity

28
00:02:03.440 --> 00:02:04.050
matrix.

29
00:02:04.070 --> 00:02:10.380
It's a matrix of all zeros except for the diagonals which contain non zeros.

30
00:02:10.400 --> 00:02:16.340
The main difference between a diagonal matrix and an identity matrix is that the identity matrix contains

31
00:02:16.460 --> 00:02:23.690
only ones on the diagonal whereas a more general diagonal matrix can contain other values.

32
00:02:23.690 --> 00:02:29.840
As long as they are not equal to or as long as the off diagonal elements are not non zeros.

33
00:02:29.900 --> 00:02:34.570
Now a diagonal matrix doesn't have to be square so this is a square matrix.

34
00:02:34.580 --> 00:02:41.150
You can also have non square matrices or rectangular matrices that are still diagonals so notice that

35
00:02:41.390 --> 00:02:48.470
this is the diagonal the diagonal can contain zeroes but it's the only part of the matrix that is allowed

36
00:02:48.470 --> 00:02:51.440
to contain non-zero elements.

37
00:02:51.440 --> 00:02:58.220
So I just mentioned that an identity matrix is a form of a diagonal matrix and in fact if you have a

38
00:02:58.220 --> 00:03:05.030
diagonal matrix that square and where all of the diagonal elements are the same then in fact you can

39
00:03:05.030 --> 00:03:11.080
write this a little bit more simply as some numbers some factor times the identity matrix.

40
00:03:11.150 --> 00:03:15.540
So this matrix here is just 2 times the identity matrix.

41
00:03:15.790 --> 00:03:18.270
All right so that is a diagonal matrix.

42
00:03:18.320 --> 00:03:24.530
The last kind of special matrix that I'm going to introduce you to here before switching to Python is

43
00:03:24.530 --> 00:03:27.950
called a triangular matrix triangular.

44
00:03:27.950 --> 00:03:30.950
Now that doesn't mean that the matrix is shaped like a triangle.

45
00:03:30.950 --> 00:03:38.210
The Matrix is still shaped like a square but only either the lower diagonal or the upper diagonal matrix

46
00:03:38.210 --> 00:03:40.630
contains all zeros.

47
00:03:40.760 --> 00:03:47.060
So this is called an upper triangular matrix because only the diagonal and the elements above the diagonal

48
00:03:47.510 --> 00:03:49.910
can contain non-zero elements.

49
00:03:49.910 --> 00:03:56.450
This is called a lower triangular matrix because only the diagonal elements and the elements below the

50
00:03:56.450 --> 00:03:59.190
matrix are allowed to contain non-zero elements.

51
00:03:59.220 --> 00:04:04.750
So here all of these elements are zero and all of these elements are zero.

52
00:04:04.760 --> 00:04:11.820
All right let's switch to Python and we will see how to implement some of these special matrices.

53
00:04:11.920 --> 00:04:17.530
A lot of special matrices are used so often that they have their own functions to generate them.

54
00:04:17.530 --> 00:04:23.760
So for example the identity matrix is created by this function called AI.

55
00:04:23.760 --> 00:04:25.490
It's a pretty clever name.

56
00:04:25.510 --> 00:04:28.120
Whoops I have to put an equal sign here.

57
00:04:28.900 --> 00:04:31.640
So I equals the identity matrix.

58
00:04:31.670 --> 00:04:34.850
Now let's print this out so print I.

59
00:04:35.460 --> 00:04:38.980
So here you see there's all zeros and ones on the diagonal.

60
00:04:39.040 --> 00:04:41.200
So that's the four by four identity matrix.

61
00:04:41.200 --> 00:04:45.190
We can also make a seven by seven identity matrix.

62
00:04:45.190 --> 00:04:52.540
The zeros matrix is given by you guessed it the function called zeros and in fact I've already introduced

63
00:04:52.540 --> 00:04:54.340
you to this function before.

64
00:04:54.340 --> 00:04:58.960
So we can write one number here and see print Z.

65
00:04:59.020 --> 00:05:06.070
However this is actually going to give us a vector of four zeros not a matrix so to create a matrix

66
00:05:06.100 --> 00:05:08.910
you need to use or you need to input a tuples.

67
00:05:08.920 --> 00:05:13.350
That would be an extra set of parentheses so let's say for comma.

68
00:05:13.360 --> 00:05:17.290
For now the reason why the input is different here.

69
00:05:17.290 --> 00:05:19.690
So here you only input a single number.

70
00:05:19.690 --> 00:05:23.110
And here you have to input a tuple of numbers.

71
00:05:23.110 --> 00:05:29.050
Is that the identity matrix is only defined for a square matrix so all identity matrices are square

72
00:05:29.050 --> 00:05:30.020
matrices.

73
00:05:30.040 --> 00:05:37.660
So it's a bit redundant to say 7 7 because for example you can't have a 7 by 4 identity matrix.

74
00:05:37.840 --> 00:05:44.050
Of course you can create a matrix that's 7 by 4 and it has ones on the diagonal but that's not formally

75
00:05:44.050 --> 00:05:52.420
the identity matrix but a 0 is matrix can be any size so we can have a 4 by 14 zeros matrix and that

76
00:05:52.420 --> 00:05:54.090
is well-defined.

77
00:05:54.400 --> 00:05:54.700
Okay.

78
00:05:54.730 --> 00:05:57.010
Now we have a diagonal matrix.

79
00:05:57.010 --> 00:06:03.880
Now there's two functions in the NUM pi tool box that are called diagonal or related to diagonal.

80
00:06:03.880 --> 00:06:13.240
One is this function Diak and you can input a vector here so let's say 1 4 6 3 and how about I make

81
00:06:13.240 --> 00:06:15.150
this last one zero.

82
00:06:15.180 --> 00:06:17.570
Now I fly print D.

83
00:06:17.680 --> 00:06:24.460
What happens is that num PI will create a diagonal matrix where these elements in this vector are on

84
00:06:24.460 --> 00:06:29.200
the diagonals so 1 4 6 3 and 0.

85
00:06:29.200 --> 00:06:37.080
So this function is creating a diagonal matrix from me specifying just the diagonal elements.

86
00:06:37.140 --> 00:06:41.640
There is a related function which is the word diagonal so that num piled up.

87
00:06:41.770 --> 00:06:45.790
I go No and this is actually doing the opposite.

88
00:06:45.820 --> 00:06:54.220
So here we've created a matrix based on inputting a vector here I'm inputting an entire matrix and what

89
00:06:54.220 --> 00:06:58.570
it's going to return is the vector of the diagonal elements.

90
00:06:58.570 --> 00:07:00.350
Let me comment this out here.

91
00:07:00.370 --> 00:07:03.080
So here we just get a vector.

92
00:07:03.080 --> 00:07:08.880
Now this is the same thing that I wrote here but we can also input let's say a random numbers matrix.

93
00:07:08.890 --> 00:07:19.270
So if I write num piled up random round n and let's make a habit a six by six random matrix then even

94
00:07:19.270 --> 00:07:27.190
though I'm creating a six by six matrix the output of this diagonal function is just six numbers because

95
00:07:27.190 --> 00:07:30.400
these are the numbers that happen to be on the diagonal.

96
00:07:30.400 --> 00:07:35.950
The final special matrix that I discussed was the triangular matrix.

97
00:07:35.950 --> 00:07:43.300
So to create a triangular matrix you could think of you know ran random random and let's start with

98
00:07:43.300 --> 00:07:47.050
a like a 15 by 15 matrix.

99
00:07:47.050 --> 00:07:52.750
Now to create a triangular matrix you could think of doing something like you know having a double for

100
00:07:52.750 --> 00:07:58.330
loop and looping through all the rows and looping through all the columns of this matrix and saying

101
00:07:58.330 --> 00:08:05.380
well if the row index is greater than the column index and set that element to 0 totally fine but that's

102
00:08:05.380 --> 00:08:08.800
a lot of extra code you're likely to make mistakes.

103
00:08:08.860 --> 00:08:12.420
Instead you can use a function called num pi.

104
00:08:12.430 --> 00:08:17.080
Try for a triangular and then you for upper.

105
00:08:17.440 --> 00:08:17.710
Okay.

106
00:08:17.720 --> 00:08:20.610
Well still kind of hard to see what this looks like here.

107
00:08:20.620 --> 00:08:23.010
Why don't we make an image of this instead.

108
00:08:23.080 --> 00:08:29.710
So let's write I am sorry P L T that I am show and then P O T dot show.

109
00:08:30.280 --> 00:08:30.820
All right.

110
00:08:30.850 --> 00:08:38.890
So here you see we've created a triangular an upper triangular matrix based on a random numbers matrix

111
00:08:39.250 --> 00:08:44.410
and just to prove to you that this is really knocking out all these elements down here we can remove

112
00:08:44.410 --> 00:08:45.150
that function.

113
00:08:45.160 --> 00:08:50.780
And now you see it's a dense matrix every element has a non zero value.

114
00:08:51.070 --> 00:08:58.360
And now we have a upper triangular matrix and you've probably already guessed that to create a lower

115
00:08:58.360 --> 00:08:59.720
triangular matrix.

116
00:08:59.800 --> 00:09:02.360
You write try L for lower.

117
00:09:02.560 --> 00:09:09.580
So this is now a lower triangular random numbers matrix because all the elements above the diagonal

118
00:09:09.640 --> 00:09:16.220
are zero there are two exercises associated with this video.

119
00:09:16.230 --> 00:09:23.520
The first is to create a four by four matrix of random integers so not just random numbers but random

120
00:09:23.520 --> 00:09:29.160
integers that vary between and including minus four and plus four.

121
00:09:29.160 --> 00:09:34.920
And then once you've created this matrix multiply it by the identity matrix you have to make sure that

122
00:09:34.920 --> 00:09:37.230
the identity matrix is the correct size.

123
00:09:37.890 --> 00:09:43.440
And then multiply it by an upper triangular random numbers matrix and this matrix doesn't need to be

124
00:09:43.800 --> 00:09:48.840
random integers it can just be an upper triangular random numbers matrix.

125
00:09:48.900 --> 00:09:51.190
Okay so that is the first part.

126
00:09:51.300 --> 00:09:55.760
The second exercise is to create what's called a two plates matrix.

127
00:09:55.770 --> 00:09:59.490
Now if you don't know what a two plates matrix is then that's great.

128
00:09:59.580 --> 00:10:05.670
This is going to be really fun if you do know what a tuple it's matrix is then you can figure out how

129
00:10:05.670 --> 00:10:07.650
to create it in Python.

130
00:10:07.650 --> 00:10:09.160
If you don't know already.

131
00:10:09.360 --> 00:10:16.500
If you have no idea what a tuple it's matrix is then my recommendation is you can use the Internet to

132
00:10:16.500 --> 00:10:19.590
search only for how to create a two plus matrix.

133
00:10:19.590 --> 00:10:21.290
Don't look up on the Internet.

134
00:10:21.420 --> 00:10:24.050
What a two puts matrix is or what it means.

135
00:10:24.090 --> 00:10:31.500
Instead just figure out how to implement it in Python and then use python as a tool as a guide to help

136
00:10:31.500 --> 00:10:36.510
you explore what a two bullets matrix is and how it's created.

137
00:10:37.140 --> 00:10:42.660
All right so I hope you enjoy working through this exercise and I assume that by now you've paused the

138
00:10:42.660 --> 00:10:48.990
video or you're about to pause video because I am going to spoil the fun by switching of Python and

139
00:10:49.050 --> 00:10:50.220
start coding for you.

140
00:10:51.350 --> 00:10:51.720
All right.

141
00:10:51.750 --> 00:10:54.480
So we need a new cell down here.

142
00:10:54.510 --> 00:10:59.020
So I'm going to create a matrix of random integers.

143
00:10:59.020 --> 00:11:07.350
I call this into Matt for an integer matrix so there is a function called random dot Rand int.

144
00:11:07.360 --> 00:11:09.920
And let's see how this function works.

145
00:11:09.990 --> 00:11:15.350
So this function says low high equals none in size equals none.

146
00:11:15.390 --> 00:11:21.300
So that means that it's going to return whoops scroll down here.

147
00:11:21.300 --> 00:11:29.360
Random integers from low inclusive to high exclusive according to the size specified by the third input.

148
00:11:29.400 --> 00:11:36.230
So we want random integers between minus 4 and the upper value should be 4.

149
00:11:36.240 --> 00:11:39.120
Except that here we have to specify that exclusively.

150
00:11:39.150 --> 00:11:44.280
So we actually have to write five in order to make sure that the largest number is four.

151
00:11:44.490 --> 00:11:47.760
And then the size is going to be four by four.

152
00:11:47.760 --> 00:11:49.110
So lots of four is going here.

153
00:11:49.710 --> 00:11:51.600
And let's have a look at what this looks like.

154
00:11:51.600 --> 00:11:52.040
So.

155
00:11:52.080 --> 00:11:53.120
And Matt.

156
00:11:53.850 --> 00:11:54.110
All right.

157
00:11:54.120 --> 00:12:01.170
So here we see a matrix of random integers and at the smallest number is minus four the largest number

158
00:12:01.170 --> 00:12:02.350
is plus four.

159
00:12:02.400 --> 00:12:06.660
And you keep running this over and over again and see what numbers you happen to get.

160
00:12:06.660 --> 00:12:07.350
All right.

161
00:12:07.350 --> 00:12:09.150
So now we have that.

162
00:12:09.150 --> 00:12:17.040
Now I want to create the identity matrix and the identity matrix needs to be four by four because it's

163
00:12:17.040 --> 00:12:24.810
going to multiply by this matrix and that matrix multiplication is valid only if this is if this is

164
00:12:24.810 --> 00:12:27.120
a four by four matrix.

165
00:12:27.120 --> 00:12:27.380
All right.

166
00:12:27.450 --> 00:12:30.840
And then we need an upper triangular random matrix.

167
00:12:30.840 --> 00:12:39.360
So I'll call that upper four and that's going to be equal to num pi to try upper and then inside the

168
00:12:39.400 --> 00:12:51.490
try upper function or try you function I generate a random random number matrix that is four by four.

169
00:12:51.540 --> 00:12:51.840
All right.

170
00:12:51.840 --> 00:12:54.790
So now we have all three of these matrices.

171
00:12:54.790 --> 00:12:56.460
And now I just want to multiply them.

172
00:12:56.500 --> 00:12:59.820
Let's see print and match.

173
00:12:59.880 --> 00:13:05.160
And actually I think I'll do it this way I'll print the original matrix and then I'll print it.

174
00:13:05.180 --> 00:13:12.970
Matt time's I for and let's see what that looks like well these are right on top of each other.

175
00:13:12.970 --> 00:13:18.460
I think it would be nice just visually to have a little bit of space between these two matrices.

176
00:13:18.520 --> 00:13:22.710
I'm going to write print and then slash n.

177
00:13:22.780 --> 00:13:25.640
This is for the new line character.

178
00:13:25.650 --> 00:13:27.920
See that gives me a space here.

179
00:13:28.150 --> 00:13:28.420
Okay.

180
00:13:28.430 --> 00:13:29.790
And now it's pretty interesting.

181
00:13:29.980 --> 00:13:32.020
These numbers are basically all the same.

182
00:13:32.020 --> 00:13:34.650
Well not basically they are exactly the same.

183
00:13:34.750 --> 00:13:43.790
So multiplying a matrix by the identity matrix gives back the original matrix so numerically we haven't

184
00:13:43.790 --> 00:13:44.740
changed anything.

185
00:13:44.750 --> 00:13:47.810
And that's actually the idea of the identity matrix.

186
00:13:47.810 --> 00:13:50.380
That's why the identity matrix is important.

187
00:13:50.410 --> 00:13:53.240
That's also why it's called the identity matrix.

188
00:13:53.240 --> 00:13:58.570
Any matrix times the identity matrix is the same matrix.

189
00:13:58.660 --> 00:14:00.180
OK so this is an important point.

190
00:14:00.180 --> 00:14:04.600
So numerically mathematically we haven't changed the matrix at all.

191
00:14:04.620 --> 00:14:10.890
However in terms of the computer representing these matrices we actually have changed the matrix A little

192
00:14:10.890 --> 00:14:11.410
bit.

193
00:14:11.460 --> 00:14:13.910
So this is an integer as matrix.

194
00:14:13.920 --> 00:14:20.180
This matrix is all integers and this matrix you can see the decimal point these are floating numbers.

195
00:14:20.190 --> 00:14:21.320
So let's look at this.

196
00:14:21.330 --> 00:14:26.910
I'm going to say instead of printing out the matrix I'm going to print out the type of the matrix or

197
00:14:26.910 --> 00:14:33.230
the class the way that the computer is representing these two matrices right.

198
00:14:33.230 --> 00:14:35.720
Well of course these are both num pi arrays.

199
00:14:35.720 --> 00:14:39.350
Actually what I meant to do is this.

200
00:14:39.350 --> 00:14:43.640
So we want to know the data type.

201
00:14:43.640 --> 00:14:47.720
So this is an integer so intimate is in 32.

202
00:14:47.720 --> 00:14:51.320
So this is represented by the computer as integers.

203
00:14:51.440 --> 00:15:02.270
And then here when we multiply it by the identity matrix to type this now becomes a floating point representation.

204
00:15:02.270 --> 00:15:08.540
So in terms of the numerical precision the representation by the computer multiplying by the identity

205
00:15:08.540 --> 00:15:14.210
matrix in this particular case because these are integers actually has changed the representation of

206
00:15:14.210 --> 00:15:21.410
the numbers but numerically in terms of like math we haven't actually changed the matrix by multiplying

207
00:15:21.410 --> 00:15:23.370
it by the identity matrix.

208
00:15:23.390 --> 00:15:23.960
All right.

209
00:15:23.960 --> 00:15:31.240
Let's do that same thing for multiplying by the upper triangular matrix.

210
00:15:31.310 --> 00:15:31.570
Okay.

211
00:15:31.580 --> 00:15:34.970
And here you see the result is a dense matrix.

212
00:15:34.970 --> 00:15:41.480
Now this shouldn't be too surprising considering the mechanism of matrix multiplication that you learned

213
00:15:41.480 --> 00:15:46.420
about in a previous video where it's all about dot products between rows and columns.

214
00:15:46.430 --> 00:15:52.040
However I think it's still useful to see that just because you have a lot of zeros in a matrix when

215
00:15:52.040 --> 00:15:58.340
you multiply that by another matrix you're not necessarily going to get a product matrix that also has

216
00:15:58.400 --> 00:16:00.560
a lot of zeros.

217
00:16:00.560 --> 00:16:01.030
All right.

218
00:16:01.040 --> 00:16:04.600
So that was for the first part of this exercise.

219
00:16:04.790 --> 00:16:11.060
And the next part was to investigate what a two plates matrix is and how it's created.

220
00:16:11.060 --> 00:16:17.810
So to create a two plates matrix you actually need to import these CI pi modules on your right import

221
00:16:17.810 --> 00:16:20.140
side pi as s.

222
00:16:20.330 --> 00:16:29.980
And then there's a function here called SPDR Lin ouch dot two plates.

223
00:16:30.050 --> 00:16:32.260
And here we can input some numbers.

224
00:16:32.270 --> 00:16:39.510
Let's go for Range 1 through 5 like this.

225
00:16:39.760 --> 00:16:40.110
OK.

226
00:16:40.130 --> 00:16:47.750
And now what I'm gonna do is let's see let's print out the Matrix 2 or maybe you pronounces toe but

227
00:16:47.750 --> 00:16:56.480
it's short for 2 plates and I'm also gonna make an image of this so appeal to that I am show to all

228
00:16:56.490 --> 00:16:56.730
right.

229
00:16:56.730 --> 00:17:04.200
This is a feature of say PI that you have to actually import the functions or these sub modules directly.

230
00:17:04.220 --> 00:17:04.820
So let's see.

231
00:17:04.830 --> 00:17:15.850
We want to from Sai pi dot Lin LJ import explicitly the two plates function.

232
00:17:16.450 --> 00:17:17.240
Okay.

233
00:17:17.880 --> 00:17:18.270
Let's see.

234
00:17:18.270 --> 00:17:20.040
And now I believe this should work.

235
00:17:20.040 --> 00:17:20.630
Okay.

236
00:17:20.850 --> 00:17:21.540
So here we go.

237
00:17:21.570 --> 00:17:23.380
So we have this function two plates.

238
00:17:23.400 --> 00:17:31.530
It's in the Sai pi Lin LJ module and I've input it into this tuple its function a vector the numbers

239
00:17:31.530 --> 00:17:33.110
1 through 5.

240
00:17:33.360 --> 00:17:36.320
And here's what it looks like in terms of numbers.

241
00:17:36.330 --> 00:17:39.360
And here is when an image of this matrix looks like.

242
00:17:39.360 --> 00:17:45.660
So what you'll notice is that these numbers 1 through 5 become the off diagonals so the main diagonal

243
00:17:45.660 --> 00:17:48.100
is 1 the next diagonal.

244
00:17:48.180 --> 00:17:52.650
Then the next off diagonal is 2 and then 3 and then 4 and 5.

245
00:17:52.680 --> 00:18:01.190
And same thing for the lower triangular here so I hope you enjoyed this video you learned about a couple

246
00:18:01.190 --> 00:18:07.760
of different kinds of special matrices and linear algebra how to create them using functions in Python

247
00:18:08.360 --> 00:18:16.310
and I showed you how to use python as a tool to understand what a two plates matrix is two plates matrices

248
00:18:16.310 --> 00:18:21.680
are pretty useful they're used in statistics in polynomial fitting and so on.
