WEBVTT
1
00:00:03.410 --> 00:00:07.100
In this video I'm going to talk about virtual coin tosses.

2
00:00:07.220 --> 00:00:14.060
You are going to learn about generating binary random distributions which is mimicking the results of

3
00:00:14.060 --> 00:00:15.090
flipping a coin.

4
00:00:15.100 --> 00:00:18.310
It can be a fair coin or a biased coin.

5
00:00:18.470 --> 00:00:24.590
And I'm also going to give you a little bit of an introduction into the pandas module and in particular

6
00:00:24.590 --> 00:00:32.710
the pandas data frame pandas is a module that's often used for organizing data for example in statistics.

7
00:00:32.780 --> 00:00:37.120
So let's just switch to Python and begin immediately.

8
00:00:37.130 --> 00:00:39.730
All right so num pi and Matt Platt lib.

9
00:00:39.800 --> 00:00:43.480
We will also use pandas but I will get to that later.

10
00:00:43.490 --> 00:00:46.520
So let's say we want to simulate a coin toss.

11
00:00:46.520 --> 00:00:49.400
Well how do we do that to simulate a coin toss.

12
00:00:49.400 --> 00:00:56.180
We want to generate a number that's going to correspond to heads or tails so a binary outcome we can

13
00:00:56.180 --> 00:01:00.260
do that by generating a number that is 1 or 0.

14
00:01:00.260 --> 00:01:03.410
Now there's multiple ways that you can generate integers.

15
00:01:03.410 --> 00:01:07.540
You can use for example the rand int function in num pi.

16
00:01:07.670 --> 00:01:15.380
But for reasons that will become clear momentarily I'm going to use the random that rand function so

17
00:01:15.410 --> 00:01:22.010
you will remember from previously in this course that the rand function like this generates numbers

18
00:01:22.040 --> 00:01:27.190
that are randomly picked and uniformly distributed between 0 and 1.

19
00:01:27.200 --> 00:01:30.740
So for example that gives us you know all these possible numbers.

20
00:01:31.100 --> 00:01:38.210
So what I'm going to do now is say that the random number greater than point five.

21
00:01:38.210 --> 00:01:46.280
And so the idea is that if I run this code lots and lots of times then approximately 50 percent of the

22
00:01:46.280 --> 00:01:52.490
time it's going to be true and approximately 50 percent of the time it's going to be false.

23
00:01:52.520 --> 00:01:56.030
So this would be like flipping a fair coin.

24
00:01:56.060 --> 00:01:57.540
So like a real coin.

25
00:01:57.710 --> 00:02:01.660
Now we can make this an unfair coin by just changing this number.

26
00:02:01.670 --> 00:02:04.310
So let's say point six.

27
00:02:04.310 --> 00:02:06.770
So now we expect in the long run.

28
00:02:06.770 --> 00:02:13.490
So flipping this coin many many many times or generating many many random numbers that 40 percent of

29
00:02:13.490 --> 00:02:15.680
the time it's going to return true.

30
00:02:15.770 --> 00:02:18.880
And 60 percent of the time it's going to return false.

31
00:02:18.890 --> 00:02:25.280
And that's because 40 percent of the time this number is going to be by chance it's going to randomly

32
00:02:25.280 --> 00:02:28.100
be greater than point six.

33
00:02:28.100 --> 00:02:28.340
OK.

34
00:02:28.370 --> 00:02:30.380
So let's create some variables here.

35
00:02:30.410 --> 00:02:41.450
So I will call this fair coin equals point five and let's call this the bias coin equals point six.

36
00:02:41.450 --> 00:02:45.600
And what I'm gonna do is loop through a number of trials let's say 10 trials.

37
00:02:45.710 --> 00:02:51.820
So I'm going to let's see I'll start by initializing the results matrix.

38
00:02:51.830 --> 00:02:59.420
So that's going to be a matrix of zeros and it's going to be two by the number of trials.

39
00:02:59.570 --> 00:03:06.650
And the two here corresponds to flipping the fair coin and flipping the biased coin.

40
00:03:06.650 --> 00:03:14.770
So now I'm going to loop through all of these trials and essentially do an experiment for i in range

41
00:03:15.010 --> 00:03:17.380
0 2 and trials of course.

42
00:03:17.380 --> 00:03:19.780
You can also leave out the 0 if you like.

43
00:03:19.780 --> 00:03:27.910
I'm going to say that the results for the first coin and the IMF experiment the ice trial in our experiment

44
00:03:28.390 --> 00:03:31.210
is going to be basically that code that I just showed.

45
00:03:31.240 --> 00:03:34.540
So Rand greater than fair coin.

46
00:03:35.200 --> 00:03:40.840
And then here do a little copy pasting this is going to be the biased coin.

47
00:03:40.840 --> 00:03:46.270
And here we put the result in the second row of this results matrix.

48
00:03:46.330 --> 00:03:47.890
So run through the code.

49
00:03:47.920 --> 00:03:51.310
Make sure we don't get any coding errors which we don't.

50
00:03:51.310 --> 00:03:52.900
And now I'm just gonna plot this.

51
00:03:52.910 --> 00:03:55.600
So how should we make a plot of this.

52
00:03:55.600 --> 00:04:03.450
Well what I'm going to do is plot the experiment trial on the x axis and the outcome on the y axis.

53
00:04:03.450 --> 00:04:09.010
So the outcome is going to be heads or tails or in this case true or false or 1 or 0.

54
00:04:09.280 --> 00:04:18.730
So let's start by writing plot results and we want the first row like this and let's actually just see

55
00:04:18.730 --> 00:04:20.070
what this looks like so far.

56
00:04:20.860 --> 00:04:22.960
Okay so here we get a line.

57
00:04:22.960 --> 00:04:29.470
So this means that when I ran this experiment we got I don't know if 0 is heads or tails but let's pretend

58
00:04:29.470 --> 00:04:31.440
that this is tails and this is heads.

59
00:04:31.510 --> 00:04:37.520
So we got tails heads tails heads heads heads and then some more tells here at the end.

60
00:04:37.540 --> 00:04:44.410
Now it's not really so easy to see all the individual flips the individual outcomes and also the line

61
00:04:44.410 --> 00:04:50.620
is a little misleading because it's not like we got an outcome of point five at experiment and no trial

62
00:04:50.620 --> 00:04:52.240
no point five.

63
00:04:52.240 --> 00:04:58.820
So I'm going to change this to be a square and this is looking a little bit better.

64
00:04:58.840 --> 00:05:03.910
I'm going to set the marker size to be a bit larger.

65
00:05:03.910 --> 00:05:09.910
Okay so this is for the fair coin so let's put a label in here.

66
00:05:09.910 --> 00:05:16.780
This was the fair coin and then I'm gonna copy and paste this for the bias coin.

67
00:05:16.990 --> 00:05:17.650
So let's see.

68
00:05:17.640 --> 00:05:21.010
Then this is going to be from the second row or index 1.

69
00:05:22.060 --> 00:05:22.500
OK.

70
00:05:22.510 --> 00:05:23.770
So what's going on here.

71
00:05:23.770 --> 00:05:30.670
It looks like we only have exactly three results for the fair coin.

72
00:05:30.670 --> 00:05:35.560
But actually what's happening is that these are being plotted exactly on top of each other.

73
00:05:35.590 --> 00:05:37.000
So that makes it hard to see.

74
00:05:37.030 --> 00:05:43.540
So what I'm going to do is actually change the y axis coordinates here a little bit so I'm gonna say

75
00:05:43.810 --> 00:05:45.550
basically just kind of add an offset.

76
00:05:45.580 --> 00:05:49.320
So this is going to be minus point 0 5.

77
00:05:49.330 --> 00:05:55.570
And here I will offset the biased coin by plus point 0 5.

78
00:05:55.570 --> 00:06:01.540
So now it's easy to see the results for the fair coin and for the biased coin.

79
00:06:01.570 --> 00:06:06.010
Now there's nothing particularly special about the number point 0 5.

80
00:06:06.040 --> 00:06:09.490
You could try different numbers you know maybe point 0 2.

81
00:06:09.640 --> 00:06:13.970
These are just numbers that I tried and I thought that they looked pretty good.

82
00:06:13.970 --> 00:06:14.200
Okay.

83
00:06:14.230 --> 00:06:19.870
So a few other things I want to change because you know there isn't really a value of point eight.

84
00:06:19.900 --> 00:06:20.590
There's only.

85
00:06:20.590 --> 00:06:21.920
Heads or tails.

86
00:06:21.970 --> 00:06:27.000
So I'm going to change the Y tick so appeal to the Y ticks.

87
00:06:27.010 --> 00:06:31.920
And first of all we only want to show the values 0 and 1.

88
00:06:31.930 --> 00:06:40.140
We don't want to show any of these values and then I'm going to change the labels to be tails and heads.

89
00:06:40.230 --> 00:06:40.840
All right.

90
00:06:40.840 --> 00:06:44.410
This is starting to look better and there's a few more things I want to do.

91
00:06:44.410 --> 00:06:47.700
So first of all there's an awful lot of white space in here.

92
00:06:47.740 --> 00:06:52.310
What I am going to do is adjust the y axis limit.

93
00:06:52.330 --> 00:06:57.280
So why Lim let's set this to B minus point five to one point five.

94
00:06:57.460 --> 00:07:03.100
And essentially that's just going to give us some extra padding at the bottom and the top.

95
00:07:03.100 --> 00:07:10.510
So it's a bit more visible and then I think the last thing I'm going to do is say peel t the X label

96
00:07:10.600 --> 00:07:12.990
is the flip number.

97
00:07:13.090 --> 00:07:17.570
So this is the simulation of flipping a fair coin and a biased coin.

98
00:07:17.620 --> 00:07:20.560
And now this is actually a pretty interesting result here.

99
00:07:20.560 --> 00:07:25.290
The question is without putting on the label would you be able to guess.

100
00:07:25.300 --> 00:07:30.790
So yeah I mean you can already know because you see this code and you've probably learned by now that

101
00:07:30.790 --> 00:07:33.790
blue is the first color that Python draws.

102
00:07:33.790 --> 00:07:41.770
But imagine if I only showed you this plot and I told you that one coin is fair and the other coin is

103
00:07:41.770 --> 00:07:42.370
biased.

104
00:07:42.400 --> 00:07:47.170
Would you be able to guess which coin was fair and which coin was biased.

105
00:07:47.200 --> 00:07:53.710
I think it would be basically impossible you would probably guess based on this plot that both of these

106
00:07:53.710 --> 00:07:56.080
coins in fact are biased.

107
00:07:56.080 --> 00:08:03.690
So the blue coin got heads 80 percent of the time and the yellow coin or the orange coin got tails 80

108
00:08:03.730 --> 00:08:04.880
percent of the time.

109
00:08:04.930 --> 00:08:07.150
Now that just happened to be that way.

110
00:08:07.360 --> 00:08:10.150
You know we run it again and we're going to get different results.

111
00:08:10.150 --> 00:08:16.410
But the larger point here that I want to illustrate is that even though there is a theoretical difference

112
00:08:16.500 --> 00:08:18.630
in the probabilities.

113
00:08:18.630 --> 00:08:24.960
Because we are randomly picking numbers because we are randomly drawing values from this distribution

114
00:08:25.380 --> 00:08:29.460
with a relatively small number of trials in the experiment.

115
00:08:29.490 --> 00:08:33.460
It's not necessarily obvious what the probabilities are.

116
00:08:33.480 --> 00:08:40.380
So to really evaluate to be confident about a probability distribution you actually need to get a lot

117
00:08:40.440 --> 00:08:41.010
of numbers.

118
00:08:41.010 --> 00:08:46.750
That's something I'm going to talk about more in a later video in this section of the course.

119
00:08:46.890 --> 00:08:53.350
But for now what I want to do is give you a little bit of an introduction into the pandas module.

120
00:08:53.490 --> 00:08:58.320
So I'm going to write import pandas as PD.

121
00:08:58.380 --> 00:09:07.440
So just like people often call num pi and P and map plot lived up pi plot BLT the common Li used shortcut

122
00:09:07.440 --> 00:09:09.390
for pandas is PD.

123
00:09:10.020 --> 00:09:17.070
So what I'm going to do is basically create a new pandas table of data or a way of storing data which

124
00:09:17.070 --> 00:09:19.200
is often called a data frames.

125
00:09:19.200 --> 00:09:22.890
I'm going to call this D for data frame.

126
00:09:23.130 --> 00:09:24.770
So this is going to be PD.

127
00:09:24.790 --> 00:09:32.960
That data frame and into this function I'm going to import the results that we already have generated.

128
00:09:32.970 --> 00:09:41.630
So results and let's just stop at that and let's output D F and see what that looks like all right.

129
00:09:41.650 --> 00:09:48.640
So you can see we have all the data here and it comes out as this nice interactive formatted table where

130
00:09:48.640 --> 00:09:53.370
you see all the individual runs of the experiment and the two outcomes.

131
00:09:53.380 --> 00:09:58.680
Now we know that this is supposed to be corresponding to two coins so this was the fair coin.

132
00:09:58.690 --> 00:10:01.120
And this was the biased coin.

133
00:10:01.120 --> 00:10:08.770
So therefore I want to actually change the names I want to give pandas names too to associate with these

134
00:10:08.770 --> 00:10:09.900
two rows.

135
00:10:09.970 --> 00:10:17.440
So I'm going to write index equals and then provide in the list the names of these two rows.

136
00:10:17.500 --> 00:10:21.510
So fair and biased run this code again.

137
00:10:21.520 --> 00:10:27.370
Now you can see that the numbers have stayed the same of course but now we get more meaningful labels

138
00:10:27.370 --> 00:10:28.850
for these two rows.

139
00:10:28.870 --> 00:10:33.430
Now there's one more thing I would like to change about the importing here and that is that you know

140
00:10:33.460 --> 00:10:36.820
these numbers are not really like floating point numbers.

141
00:10:36.820 --> 00:10:41.380
They correspond to the outcome of flipping a coin or a binary outcome.

142
00:10:41.380 --> 00:10:48.920
So I'm going to change the data type from the default floating point to an integer so I will write D

143
00:10:48.940 --> 00:10:52.440
type for data type equals int.

144
00:10:52.540 --> 00:10:58.720
So now notice that these have changed into zeros and ones which year I'm calling tails and heads.

145
00:10:58.780 --> 00:10:59.030
OK.

146
00:10:59.050 --> 00:11:06.910
So now I would like to know how many heads were there for the fair coin and the biased coin or actually

147
00:11:06.910 --> 00:11:13.690
maybe an average is better because the total number is going to depend on the total number of flips.

148
00:11:13.690 --> 00:11:17.170
So let's say we want to create a new column here.

149
00:11:17.170 --> 00:11:20.970
So this these columns correspond to all the individual flips.

150
00:11:21.010 --> 00:11:27.310
I want to add a new column that corresponds to the average of all these other columns.

151
00:11:27.310 --> 00:11:32.710
So the way we do that is by treating this data frame like a dictionary because it actually is basically

152
00:11:32.710 --> 00:11:33.970
just a dictionary.

153
00:11:33.970 --> 00:11:41.260
So I'm going to call this new column EV for average equals and then I want the average of all of these

154
00:11:41.320 --> 00:11:47.470
other columns so I'm going to write DFS so the data frame and then I'm going to call a method that will

155
00:11:47.560 --> 00:11:54.070
act on this data frame and that is the mean method and then we write access equals one because we want

156
00:11:54.070 --> 00:11:57.910
to average over the columns not average over the rows this way.

157
00:11:58.290 --> 00:11:58.560
Okay.

158
00:11:58.570 --> 00:12:02.110
And then let's have a look at this data frame again.

159
00:12:02.140 --> 00:12:02.410
All right.

160
00:12:02.410 --> 00:12:03.690
So this was pretty interesting.

161
00:12:03.700 --> 00:12:09.950
You see that the fair coin got heads and tails equally likely equally often.

162
00:12:09.970 --> 00:12:16.600
So that is consistent with the true probability and the bias coin had 40 percent heads.

163
00:12:16.600 --> 00:12:20.020
And that's also consistent with what I specified up here.

164
00:12:20.020 --> 00:12:25.270
But now to show you that this is random I run this code again and let's see what this happens to be

165
00:12:25.270 --> 00:12:26.110
here.

166
00:12:26.140 --> 00:12:26.400
OK.

167
00:12:26.410 --> 00:12:31.150
So now the fair coin actually gave heads only three times out of ten.

168
00:12:31.240 --> 00:12:33.540
So only 30 percent of the time.

169
00:12:33.550 --> 00:12:39.220
Again this illustrates that when you are running an experiment that involves random numbers in order

170
00:12:39.220 --> 00:12:46.660
to see the true probabilities the true distributions you actually need to run many experiments and for

171
00:12:46.660 --> 00:12:53.060
a case like this where you get a binary ization 10 is really not enough.

172
00:12:53.320 --> 00:12:59.860
In this video I showed you how to create binary random distributions with different biases or different

173
00:13:00.130 --> 00:13:01.890
probability distributions.

174
00:13:01.990 --> 00:13:06.390
And I gave you a very quick introduction to the pend US data frame.

175
00:13:06.490 --> 00:13:11.040
So this was about virtual coin tosses in the exercise for this video.

176
00:13:11.170 --> 00:13:17.230
We are going to create a weighted die or weighted dice and then play around with those dice and random

177
00:13:17.230 --> 00:13:17.940
numbers.

178
00:13:17.980 --> 00:13:24.040
So have a quick break you know grab a glass of water whatever and come right back and get to the exercise

179
00:13:24.040 --> 00:13:25.540
associated with this video.
