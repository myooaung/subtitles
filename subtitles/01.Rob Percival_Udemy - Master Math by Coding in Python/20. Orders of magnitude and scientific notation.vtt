WEBVTT
1
00:00:03.820 --> 00:00:08.290
In this video I'm going to talk to you about scientific notation.

2
00:00:08.290 --> 00:00:13.420
I will introduce the concept and explain why scientific notation is important.

3
00:00:13.420 --> 00:00:18.960
And you'll also get to see how to print and decode scientific notation in python.

4
00:00:18.970 --> 00:00:25.840
This will also help you better understand how to print information in python in strings.

5
00:00:25.840 --> 00:00:32.020
Now I've already introduced this concept of scientific notation several times in this course.

6
00:00:32.020 --> 00:00:38.020
In particular it was related to discussions of numbers that you expected to be zero but they ended up

7
00:00:38.020 --> 00:00:42.900
being some weird looking number that was like some a bunch of numbers.

8
00:00:42.910 --> 00:00:46.380
And then there was an E minus 15 after it or something.

9
00:00:46.420 --> 00:00:53.260
So if that still seems confusing then it now is the opportunity to shed some light on that bizarre looking

10
00:00:53.320 --> 00:00:56.720
number with the E and the and the minus 15.

11
00:00:56.720 --> 00:01:00.490
Okay so here is where we kind of start from scientific notation.

12
00:01:00.490 --> 00:01:07.240
It starts from orders of magnitude and the idea of orders of magnitude is to just give us an approximation

13
00:01:07.330 --> 00:01:15.730
of the size of a number so we can say ten thousand and twenty one is sort of kind of equal to ten thousand.

14
00:01:15.730 --> 00:01:20.570
It's not exactly ten thousand but this number is pretty close to ten thousand.

15
00:01:20.570 --> 00:01:22.990
Now this number is pretty close to 1000.

16
00:01:22.990 --> 00:01:25.830
It's certainly closer to 1000 than it is ten thousand.

17
00:01:26.320 --> 00:01:33.030
And this number zero point zero three four is kind of close enough to zero point zero one.

18
00:01:33.100 --> 00:01:40.990
So we call these orders of magnitude and the way to convert a number into an order of magnitude is to

19
00:01:40.990 --> 00:01:45.790
think about what is the closest power of ten to that number.

20
00:01:45.790 --> 00:01:53.860
So for example tend to the power of minus two is zero point zero one tend to the zero is one tend to

21
00:01:53.860 --> 00:01:56.000
the three is one thousand.

22
00:01:55.990 --> 00:02:01.510
And essentially what you're doing with this number in the exponent is using it to shift the decimal

23
00:02:01.510 --> 00:02:03.220
point to the left.

24
00:02:03.220 --> 00:02:09.970
If it's a negative number or to the right if it's a positive number so tend to the zero means that the

25
00:02:09.970 --> 00:02:16.000
decimal point is just after the 1 10 to the minus 1 means you take the decimal point that used to be

26
00:02:16.000 --> 00:02:23.030
here and you move it over one position to the left and here it's over 2 to the left and so on.

27
00:02:23.080 --> 00:02:29.920
So therefore you can say that the number ten thousand and twenty one is for orders of magnitude and

28
00:02:29.920 --> 00:02:36.700
you say that this is for orders of magnitude because ten thousand and twenty one is pretty close to

29
00:02:36.700 --> 00:02:43.350
the number ten thousand and ten thousand is the same thing as tend to the four so four orders of magnitude.

30
00:02:43.390 --> 00:02:46.270
This would be minus one order of magnitude and so on.

31
00:02:47.020 --> 00:02:50.770
OK so that's about orders of magnitude and approximations.

32
00:02:50.770 --> 00:02:53.330
How does scientific notation come into this.

33
00:02:53.350 --> 00:02:58.210
Well scientific notation is basically just a shorthand for writing out all of this.

34
00:02:58.210 --> 00:03:04.870
So instead of writing this out in words you just write it out in numbers so we can say that this number

35
00:03:04.870 --> 00:03:11.770
ten thousand twenty one is approximately or it's the order of magnitude 1 times ten to the power of

36
00:03:11.770 --> 00:03:12.880
four.

37
00:03:12.970 --> 00:03:18.500
And here you would say that two thousand one hundred and nineteen is two times tend to the three.

38
00:03:18.670 --> 00:03:25.210
I should say is approximately equal to it's the same order of magnitude as tend to the three and then

39
00:03:25.210 --> 00:03:30.790
to get a little bit more precise you can say that it's two times tend to the three and if you want to

40
00:03:30.790 --> 00:03:37.000
get even more precise you could say that this is two point one times tend to the three and then here

41
00:03:37.000 --> 00:03:43.030
for a number that's less than 1 then you could say that this number is that in scientific notation This

42
00:03:43.030 --> 00:03:45.400
is three times tend to the minus two.

43
00:03:45.430 --> 00:03:45.660
All right.

44
00:03:45.670 --> 00:03:52.450
So this is how you would write out scientific notation like in a math textbook or if you're writing

45
00:03:52.450 --> 00:03:58.660
this out on a chalkboard or on a piece of paper in computers it looks slightly differently and they

46
00:03:58.660 --> 00:04:02.900
write E plus or minus and then the number in the exponent.

47
00:04:02.950 --> 00:04:07.960
So this is the math notation and this would be the computer notation.

48
00:04:07.960 --> 00:04:10.180
So this is what you see in Python.

49
00:04:10.360 --> 00:04:16.690
So I hope that now it's clear when you see this number in Python and I said that it's a tiny tiny number

50
00:04:16.690 --> 00:04:20.230
it's basically zero plus computer rounding error.

51
00:04:20.230 --> 00:04:25.290
Then you saw that that was like some number times e minus 16.

52
00:04:25.360 --> 00:04:31.330
So that means that there is a decimal point and then 16 zeros and then you get some numbers.

53
00:04:31.330 --> 00:04:33.130
Those are tiny numbers.

54
00:04:33.130 --> 00:04:33.430
All right.

55
00:04:33.430 --> 00:04:40.210
So now let's switch to Python and I'm going to introduce you to some alternate ways of printing with

56
00:04:40.210 --> 00:04:44.770
special formatting that I haven't yet shown you in this course.

57
00:04:44.770 --> 00:04:45.020
OK.

58
00:04:45.040 --> 00:04:47.340
So let's start with some number.

59
00:04:47.500 --> 00:04:49.440
And I just want this to be a big number.

60
00:04:49.450 --> 00:04:50.980
Let's say just like that.

61
00:04:51.040 --> 00:04:51.280
OK.

62
00:04:51.280 --> 00:04:56.410
Now what I'm going to write is going to look a little bit strange at first but this is the way to get

63
00:04:56.410 --> 00:05:01.510
this number to print out in scientific notation in Python.

64
00:05:01.570 --> 00:05:06.250
So what I'm going to do is print in curly brackets.

65
00:05:06.320 --> 00:05:09.890
Colon comma e surrounded by a single close.

66
00:05:09.920 --> 00:05:16.400
And then dot format and then into the format function goes this variable X and let's see what that looks

67
00:05:16.400 --> 00:05:23.520
like this prints out the first number and then a decimal point and then a couple of other numbers six

68
00:05:23.530 --> 00:05:25.290
other numbers times.

69
00:05:25.300 --> 00:05:28.620
Well you don't see the times here explicitly but times E..

70
00:05:28.690 --> 00:05:29.620
Plus nine.

71
00:05:29.620 --> 00:05:36.110
So that means that this number here is three point nine times 10 to the nine.

72
00:05:36.280 --> 00:05:41.590
And that should make sense because if we think about the decimal point being here then we can shift

73
00:05:41.590 --> 00:05:49.300
the decimal point over one two three four five six seven eight nine so then that gives us three point

74
00:05:49.300 --> 00:05:54.570
nine times ten to the power of nine.

75
00:05:54.840 --> 00:05:55.130
Okay.

76
00:05:55.150 --> 00:05:58.890
So let me get rid of this because that's not proper code there.

77
00:05:58.960 --> 00:05:59.190
Okay.

78
00:05:59.220 --> 00:06:02.450
So this e here is for scientific notation.

79
00:06:02.440 --> 00:06:08.110
There's also other ways that you can use this general approach to formatting in Python.

80
00:06:08.110 --> 00:06:14.350
So for example you can try this with D and that's going to print out this number with commas.

81
00:06:14.440 --> 00:06:21.360
And for most humans it's a bit easier to read with commas than it is to read without the commas OK.

82
00:06:21.370 --> 00:06:27.280
So this is one way to print out in scientific notation there is another way which is actually a bit

83
00:06:27.280 --> 00:06:31.690
similar to this percent s substitution that I've taught you before.

84
00:06:31.720 --> 00:06:35.080
So I have previously taught you to do something like this.

85
00:06:35.080 --> 00:06:35.880
Percent yes.

86
00:06:35.920 --> 00:06:38.610
And then you say percent x.

87
00:06:38.680 --> 00:06:44.020
So that's just printing out the number here replacing this with a string.

88
00:06:44.020 --> 00:06:49.660
Now we can do something slightly different I can say e instead of S and that's going to print this out

89
00:06:50.260 --> 00:06:55.810
in scientific notation just like what you saw here and now I'm going to do something that I haven't

90
00:06:55.810 --> 00:06:57.450
yet introduced you to.

91
00:06:57.490 --> 00:06:59.790
I'm going to write point two.

92
00:06:59.800 --> 00:07:03.040
So decimal point and then to before the E.

93
00:07:03.580 --> 00:07:10.690
And what that is going to do is specify that this number should print out with two numbers after the

94
00:07:10.750 --> 00:07:15.210
decimal point so two degrees of precision after the decimal point.

95
00:07:15.310 --> 00:07:22.000
And if I would put four here then you guessed it we are going to get four numbers after the decimal

96
00:07:22.000 --> 00:07:22.360
point.

97
00:07:23.140 --> 00:07:23.560
All right.

98
00:07:23.560 --> 00:07:26.570
And now I would like to show you one more thing and that's it.

99
00:07:26.620 --> 00:07:34.600
You can set this expression here to be a variable so I can say X equals this thing.

100
00:07:34.600 --> 00:07:43.240
And now if I print s well that just giving back this but if I print these type of s then we see that

101
00:07:43.330 --> 00:07:45.360
S is a string.

102
00:07:45.490 --> 00:07:51.880
So that's pretty interesting because it means that we can index and slice however you like.

103
00:07:51.880 --> 00:07:59.740
So for example the first element or the 0 with index into S is going to be three and actually let me

104
00:07:59.770 --> 00:08:02.080
just make sure that this is clear.

105
00:08:02.110 --> 00:08:03.450
So here is all of us.

106
00:08:03.490 --> 00:08:10.720
And this is the index zero of S and we can also do something like let's say we wanted to get the last

107
00:08:10.720 --> 00:08:11.780
two numbers here.

108
00:08:11.830 --> 00:08:20.020
We could do that by writing minus to remember from indexing and slicing that minus to the minus 2 with

109
00:08:20.140 --> 00:08:24.370
index gives you the second to last index and then we.

110
00:08:24.400 --> 00:08:31.090
So that will give us zero and then if you want to go from there to the end you can write minus two colon

111
00:08:31.180 --> 00:08:36.370
and that will get you from the second to last element all the way up until the end.

112
00:08:36.430 --> 00:08:42.040
So that's pretty convenient because now we've just discovered a way to figure out the number corresponding

113
00:08:42.040 --> 00:08:50.500
to the order of magnitude and that is the great segway into the exercise for this video.

114
00:08:50.510 --> 00:08:57.100
So what you want to do in this exercise is print the nearest order of magnitude for a given number.

115
00:08:57.110 --> 00:09:02.960
So in other words you want to type in some number let's say in this case I picked two thousand three

116
00:09:02.960 --> 00:09:04.140
hundred and forty two.

117
00:09:04.370 --> 00:09:10.190
But of course this procedure should work for any number positive number or a negative number a number

118
00:09:10.190 --> 00:09:11.480
with a decimal point in it.

119
00:09:12.110 --> 00:09:14.600
And then you want to print out something that reads like this.

120
00:09:14.630 --> 00:09:21.640
So the number two thousand three hundred forty two is three orders of magnitude comma approximately.

121
00:09:21.650 --> 00:09:29.090
So this wiggly equals sign here means approximately two times tend to the three.

122
00:09:29.090 --> 00:09:34.790
Now obviously these numbers here and this number here is going to have to be correct for any number

123
00:09:34.790 --> 00:09:35.900
that you put in.

124
00:09:35.930 --> 00:09:42.260
So your goal is to write code that will basically get this message to print out and be accurate for

125
00:09:42.260 --> 00:09:44.300
any number you put in here.

126
00:09:44.300 --> 00:09:52.100
Now solving this exercise involves using a couple of functions and methods in Python that I have not

127
00:09:52.100 --> 00:09:54.290
yet introduced you to in this course.

128
00:09:54.470 --> 00:10:01.190
So if you would like to try to figure this out on your own then now is the time to pause the video switch

129
00:10:01.190 --> 00:10:02.870
to Python and work through it.

130
00:10:02.900 --> 00:10:08.640
I am about to give you a couple of hints the hint is use the following functions.

131
00:10:08.660 --> 00:10:11.530
So log 10 that's a num pi function.

132
00:10:11.570 --> 00:10:17.410
Now of course I've already introduced this function but this is pretty useful for solving this exercise.

133
00:10:17.480 --> 00:10:21.800
And then there is the Linux tag approx so slash slash approx.

134
00:10:21.800 --> 00:10:23.720
Which you might consider trying.

135
00:10:23.900 --> 00:10:30.620
And then there is a method on a string called Dot find and then inside the parentheses you would put

136
00:10:31.100 --> 00:10:33.830
in single quotes a letter that you are trying to find.

137
00:10:33.830 --> 00:10:37.990
So I'm not going to tell you exactly how this method works.

138
00:10:38.030 --> 00:10:38.480
All right.

139
00:10:38.480 --> 00:10:47.590
So now I will switch to Python and you can see my solution now for my solution we need num pie so important

140
00:10:47.600 --> 00:10:50.660
umpires NDP and for printing out late.

141
00:10:50.690 --> 00:10:58.120
I'm going to import from I Python that display.

142
00:10:58.460 --> 00:11:01.710
Import the display and math functions.

143
00:11:02.600 --> 00:11:05.120
Okay so first let's start off with the number.

144
00:11:05.120 --> 00:11:08.020
I'll say I'll use the example I showed in the slides.

145
00:11:08.060 --> 00:11:11.390
I was 2 3 4 2.

146
00:11:11.390 --> 00:11:11.630
All right.

147
00:11:11.650 --> 00:11:19.220
So the first thing I'm going to do is get the order of order of magnitude.

148
00:11:19.220 --> 00:11:22.570
So I'll call that variable order of magnitude.

149
00:11:22.580 --> 00:11:26.540
It's pretty handy to give your variables meaningful names.

150
00:11:26.780 --> 00:11:33.050
And let me walk you through this piecemeal and each time I set another piece of this I'm going to print

151
00:11:33.050 --> 00:11:34.430
this out so you can see what I'm doing.

152
00:11:34.430 --> 00:11:37.040
So we start just with the number.

153
00:11:37.250 --> 00:11:44.310
And then what I'm going to do is take the log base ten of this number.

154
00:11:44.510 --> 00:11:47.750
So this already tells me the order of magnitude here.

155
00:11:47.810 --> 00:11:52.390
Now three might seem confusing because how does three relate to two thousand.

156
00:11:52.640 --> 00:11:57.950
But in fact what this is telling me is that the number two thousand three hundred forty two is the same

157
00:11:57.950 --> 00:12:02.330
thing as ten to the power of this number.

158
00:12:02.330 --> 00:12:02.530
Okay.

159
00:12:02.540 --> 00:12:06.950
So there's a little bit of computer rounding error in here but for order of magnitude in scientific

160
00:12:06.950 --> 00:12:09.260
notation that's good enough.

161
00:12:09.260 --> 00:12:09.660
All right.

162
00:12:09.680 --> 00:12:17.090
But we have a problem and that is if this number were actually a negative number then all the sudden

163
00:12:17.090 --> 00:12:18.560
this wouldn't work anymore.

164
00:12:18.560 --> 00:12:26.240
So what we have to do is take the absolute value of this number and then it's always going to work regardless

165
00:12:26.240 --> 00:12:29.540
of whether this number is positive or negative.

166
00:12:29.540 --> 00:12:33.470
And it's also going to work for a number that's less than 1.

167
00:12:33.470 --> 00:12:38.990
So now we see that this number is minus two orders of magnitude.

168
00:12:39.600 --> 00:12:39.910
Okay.

169
00:12:39.940 --> 00:12:42.610
But actually this is minus one point six.

170
00:12:42.620 --> 00:12:44.560
And we need to call this minus two.

171
00:12:44.570 --> 00:12:48.410
So in fact what we want to do is round but we don't want to just round it.

172
00:12:48.410 --> 00:12:54.220
We want to make sure that we're always rounding down and rounding down means taking the floor.

173
00:12:54.230 --> 00:12:58.970
So now this number turns into minus two and that is actually the right answer.

174
00:12:59.030 --> 00:13:02.390
This is minus two orders of magnitude.

175
00:13:02.390 --> 00:13:05.680
This is plus three orders of magnitude.

176
00:13:05.750 --> 00:13:06.020
Okay.

177
00:13:06.020 --> 00:13:07.190
And then four later.

178
00:13:07.190 --> 00:13:14.030
So this isn't so apparent now but for displaying this number later it's convenient to have this variable

179
00:13:14.030 --> 00:13:18.530
order of mag as an integer not as a float.

180
00:13:18.530 --> 00:13:24.080
And that's mainly because when we're printing out this final statement we want this to say three orders

181
00:13:24.080 --> 00:13:27.930
of magnitude and not three point zero orders of magnitude.

182
00:13:27.980 --> 00:13:28.270
All right.

183
00:13:28.280 --> 00:13:30.980
So that is the order of magnitude.

184
00:13:31.010 --> 00:13:36.560
The next thing we need to do is solve for scientific notation.

185
00:13:36.560 --> 00:13:39.560
So how do we get the scientific notation.

186
00:13:39.560 --> 00:13:45.860
Well let me start by converting this number into Python's version of scientific notation.

187
00:13:45.980 --> 00:13:54.500
So that was colon comma e dot format and then NUM and I'm also gonna start printing out this stuff so

188
00:13:54.500 --> 00:13:56.760
print no string.

189
00:13:56.890 --> 00:13:57.150
Okay.

190
00:13:57.170 --> 00:14:07.070
So the idea here is that we need to convert this string into a message that says two times ten to the

191
00:14:07.070 --> 00:14:09.050
power of three.

192
00:14:09.050 --> 00:14:14.120
Now fortunately this three is exactly the same as this order of magnitude.

193
00:14:14.510 --> 00:14:18.650
So that means really what we want is to get this first number here.

194
00:14:18.650 --> 00:14:24.820
Now on the one hand you could do that with just indexing the first number like this.

195
00:14:24.980 --> 00:14:27.920
But let's see if that's always going to work.

196
00:14:27.920 --> 00:14:33.060
So how about if I do minus two thousand three hundred forty three.

197
00:14:33.170 --> 00:14:40.320
Now the first number is actually minded or the first character I should say is minus.

198
00:14:40.340 --> 00:14:43.450
So this is not going to give you the correct answer.

199
00:14:43.460 --> 00:14:50.540
So what we want to do instead is basically figure out what are all the numbers before the decimal point.

200
00:14:50.570 --> 00:14:52.690
That's the right way to solve this problem.

201
00:14:52.700 --> 00:14:56.090
So how do we find all of the numbers before the decimal point.

202
00:14:56.390 --> 00:15:00.150
That's what I'm going to use this dot find method force.

203
00:15:00.170 --> 00:15:09.150
I'm going to say where dot equals num string dot find and now what I want to find is the period.

204
00:15:09.160 --> 00:15:09.410
OK.

205
00:15:09.430 --> 00:15:14.070
So now I'm going to show you what where dot is.

206
00:15:14.120 --> 00:15:14.360
OK.

207
00:15:14.360 --> 00:15:19.650
So where dot is two and actually let me also print out no strings so this is clear.

208
00:15:19.730 --> 00:15:19.970
OK.

209
00:15:20.000 --> 00:15:25.620
So we use this find method with an input of a decimal point.

210
00:15:25.700 --> 00:15:32.020
And essentially what this is returning is the index into our indices into this variable.

211
00:15:32.030 --> 00:15:35.180
This variable that match this string.

212
00:15:35.240 --> 00:15:42.170
So the fact that this is two means that it's the third element in num string where the dot is.

213
00:15:42.170 --> 00:15:46.910
So this zero with element the first element and the second element.

214
00:15:47.610 --> 00:15:47.870
OK.

215
00:15:47.880 --> 00:15:56.610
So now our scientific notation the number before the 10 is going to be num string and then from the

216
00:15:56.610 --> 00:15:59.540
beginning up and to where dots.

217
00:15:59.540 --> 00:16:03.280
And now let me print out this side note.

218
00:16:03.710 --> 00:16:04.000
OK.

219
00:16:04.010 --> 00:16:06.680
So now what we're gonna do is a minus.

220
00:16:06.680 --> 00:16:12.760
So this number is minus two times ten to the power of three.

221
00:16:12.780 --> 00:16:13.140
All right.

222
00:16:13.170 --> 00:16:17.410
So actually this is all of the Python coding that we need to do.

223
00:16:17.460 --> 00:16:24.130
And now what we need to do is some display and latex coding so display math.

224
00:16:24.540 --> 00:16:32.310
So we say the number is and I'm using the text tag here because I want to write this out as is

225
00:16:35.630 --> 00:16:42.650
some more text text and then this is going to be orders of magnitude.

226
00:16:42.740 --> 00:16:46.780
And actually before getting too much further let's make sure that this is correct so far.

227
00:16:47.390 --> 00:16:54.890
So the first substitution is going to be the number the next substitution is going to be the order of

228
00:16:54.980 --> 00:16:55.990
magnitude.

229
00:16:56.030 --> 00:16:58.610
Order of magnitude.

230
00:16:58.610 --> 00:17:00.070
And that's it for now.

231
00:17:00.080 --> 00:17:00.320
Okay.

232
00:17:00.320 --> 00:17:01.720
So let's see.

233
00:17:01.730 --> 00:17:02.020
All right.

234
00:17:02.030 --> 00:17:07.820
So here we say minus two thousand three hundred forty two is three orders of magnitude so far.

235
00:17:07.820 --> 00:17:08.360
That's correct.

236
00:17:08.360 --> 00:17:11.000
Let's see if this also works for about 42.

237
00:17:11.000 --> 00:17:13.240
That's a particularly good number.

238
00:17:13.280 --> 00:17:15.310
That's one order of magnitude.

239
00:17:15.320 --> 00:17:17.020
How about four point two.

240
00:17:17.120 --> 00:17:19.560
That is zero orders of magnitude.

241
00:17:19.580 --> 00:17:26.790
How about zero point zero point zero for two That's minus two orders of magnitude.

242
00:17:26.810 --> 00:17:27.050
All right.

243
00:17:27.050 --> 00:17:30.260
So so far this seems to be working.

244
00:17:30.320 --> 00:17:38.970
Now I went to write that this is also approximately equal to so that's where I use this later code approx.

245
00:17:38.990 --> 00:17:49.540
So approximately equal to some number times 10 to the power of some other number.

246
00:17:49.580 --> 00:17:50.560
Okay so now we need.

247
00:17:50.570 --> 00:17:50.930
Let's see.

248
00:17:50.930 --> 00:17:57.180
So we had num an order of magnitude that was here in here and then is orders of magnitude approximately.

249
00:17:57.230 --> 00:18:04.730
Then this is gonna be the side note variable here for scientific notation and then we have 10 to the

250
00:18:04.760 --> 00:18:08.470
power of order of mag.

251
00:18:08.540 --> 00:18:08.810
Okay.

252
00:18:08.840 --> 00:18:11.940
So this is starting to get to be a bit of a long line of code.

253
00:18:12.020 --> 00:18:16.760
I'm going to put a slash here and continue this on the next line.

254
00:18:16.820 --> 00:18:18.750
So let's see how this looks.

255
00:18:18.950 --> 00:18:19.240
All right.

256
00:18:19.270 --> 00:18:27.490
So point 0 4 2 is minus 2 orders of magnitude which is approximately four times 10 to the minus 2.

257
00:18:27.500 --> 00:18:28.210
All right.

258
00:18:28.220 --> 00:18:31.550
And again it's worth trying a couple of different numbers here.

259
00:18:31.580 --> 00:18:32.300
Let's try.

260
00:18:32.360 --> 00:18:34.090
How about this number.

261
00:18:34.130 --> 00:18:34.400
All right.

262
00:18:34.400 --> 00:18:36.290
So this is eight orders of magnitude.

263
00:18:36.290 --> 00:18:38.710
It's about nine times send to the eight.

264
00:18:38.720 --> 00:18:45.380
What if we make this negative and put a decimal point there and then we see it's minus nine times tend

265
00:18:45.380 --> 00:18:50.800
to the three and now this shows a pretty interesting discussion.

266
00:18:50.800 --> 00:18:58.060
So is nine thousand let me actually just make this a little bit simpler here for the sake of discussion.

267
00:18:58.150 --> 00:19:00.520
So an action I'm going to make this even more extreme.

268
00:19:00.520 --> 00:19:04.190
So nine thousand nine hundred and ninety nine.

269
00:19:04.420 --> 00:19:10.870
Now you would probably think that nine thousand nine hundred ninety nine is closer to ten thousand than

270
00:19:10.870 --> 00:19:13.050
it is to 1000.

271
00:19:13.390 --> 00:19:19.720
But here with our code we came up with the solution and the answer that this is actually three orders

272
00:19:19.720 --> 00:19:25.240
of magnitude or approximately nine times tend to the power of three.

273
00:19:25.240 --> 00:19:30.100
Now this is actually not incorrect although it does seem a little bit strange.

274
00:19:30.160 --> 00:19:35.180
They are in fact two different ways of computing the order of magnitude.

275
00:19:35.200 --> 00:19:41.410
One is to round the number first to the nearest order of magnitude in which case this would get rounded

276
00:19:41.410 --> 00:19:42.430
up to ten thousand.

277
00:19:42.910 --> 00:19:47.470
And another method is simply to go with the number of digits.

278
00:19:47.520 --> 00:19:52.330
So depending on the application depending on the goal these two different methods can be correct in

279
00:19:52.330 --> 00:19:54.310
different contexts.

280
00:19:54.310 --> 00:20:01.060
Nonetheless I think you now have a pretty good grasp of orders of magnitude and scientific notation

281
00:20:01.420 --> 00:20:05.320
and how to print and decode scientific notation in Python.
