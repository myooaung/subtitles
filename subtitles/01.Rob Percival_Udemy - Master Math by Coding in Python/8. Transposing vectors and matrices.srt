1
00:00:03,340 --> 00:00:10,750
It's pretty likely that you have at least heard of this operation before called transposing or to transpose

2
00:00:10,780 --> 00:00:13,630
a vector or transpose a matrix.

3
00:00:13,630 --> 00:00:19,950
If you haven't heard of it then you might be disappointed to see that it's a really simple operation.

4
00:00:20,050 --> 00:00:22,210
And if you have heard of it then.

5
00:00:22,210 --> 00:00:24,700
Well I hope you enjoy this video anyway.

6
00:00:24,700 --> 00:00:31,330
But the good news is that at the end you are going to see how the transpose operation relates to one

7
00:00:31,330 --> 00:00:38,920
of the most important applications of the transpose and matrix multiplication which is creating a square

8
00:00:38,920 --> 00:00:44,080
symmetric matrix squares symmetric matrices are really important.

9
00:00:44,080 --> 00:00:45,850
They have a lot of great properties.

10
00:00:45,860 --> 00:00:50,320
They're important for statistics and machine learning and deep learning.

11
00:00:50,380 --> 00:00:55,440
Square symmetric matrices are all over the place in Applied linear algebra.

12
00:00:55,930 --> 00:00:58,950
So let's get started here I have a vector.

13
00:00:58,960 --> 00:01:05,500
This is a five dimensional column vector and I'm going to transpose this vector.

14
00:01:05,500 --> 00:01:13,480
So first of all transposing a vector or matrix is indicated using a capital T in these superscript like

15
00:01:13,480 --> 00:01:14,170
this.

16
00:01:14,170 --> 00:01:17,500
So what does it mean to transpose this column vector.

17
00:01:17,500 --> 00:01:19,150
Well it's pretty straightforward.

18
00:01:19,150 --> 00:01:23,440
It really just means to convert this into a row vector.

19
00:01:23,440 --> 00:01:25,930
So it was a column vector we transpose it.

20
00:01:25,930 --> 00:01:31,390
We get the row vector notice that the values haven't changed their order hasn't changed.

21
00:01:31,390 --> 00:01:35,400
All we've done is taken the column and turn it into a row.

22
00:01:35,410 --> 00:01:41,500
Now of course you can take this row vector and transpose it again and you're going to get back to a

23
00:01:41,500 --> 00:01:44,710
column vector which of course is the original vector.

24
00:01:44,770 --> 00:01:51,550
So that leads to an interesting property of the transpose operation which is that if you take some vector

25
00:01:51,580 --> 00:01:55,870
and then transpose it twice you get back the original vector.

26
00:01:55,870 --> 00:02:02,260
So this is for transposing a vector for a matrix it's basically the same thing you really just convert

27
00:02:02,620 --> 00:02:08,110
all the columns into rows which is the same thing as converting the rows into columns.

28
00:02:08,110 --> 00:02:12,640
So this matrix transposed becomes this matrix.

29
00:02:12,640 --> 00:02:18,250
So the first column becomes the first row the second column becomes the second row.

30
00:02:18,250 --> 00:02:24,070
Or another way to think about it is that the first row becomes the first column the second row becomes

31
00:02:24,070 --> 00:02:26,170
the second column and so on.

32
00:02:26,170 --> 00:02:33,360
And no surprise if you transpose this matrix you will get back to the original matrix.

33
00:02:33,550 --> 00:02:40,810
So again that leads to this property that a matrix transpose transpose gives you back the original Matrix

34
00:02:42,270 --> 00:02:49,260
what I'm going to do is illustrate a few different ways of transposing vectors and matrices.

35
00:02:49,260 --> 00:02:56,310
So let's start by creating a row vector so set this to be known pied at random that Rand and and this

36
00:02:56,310 --> 00:03:01,080
is going to be a random matrix of size 1 by 10.

37
00:03:01,110 --> 00:03:09,180
So this is definitely a row vector we can type and P the shape of R and you see that it is a one by

38
00:03:09,180 --> 00:03:12,570
ten matrix so this is a row vector.

39
00:03:12,570 --> 00:03:19,350
And now what I'm gonna do is transpose this I'll call this R T for transpose and then a one because

40
00:03:19,350 --> 00:03:27,090
I'm gonna show you two different methods of transposing so none pi dot transpose so using a function

41
00:03:27,090 --> 00:03:35,750
called transpose and then another method is gonna be r t two equals R dot capital T.

42
00:03:35,940 --> 00:03:42,090
So it's even shorter notice here I'm calling a function and that's in the NUM pi module and providing

43
00:03:42,090 --> 00:03:49,050
an input into that function which is the variable R and here what I'm doing is calling a method directly

44
00:03:49,050 --> 00:03:55,050
on R and that method is Dot T which is for the transpose okay.

45
00:03:55,050 --> 00:03:56,940
And so now let's see.

46
00:03:56,970 --> 00:04:09,030
So I will print this and then I'm going to print out two more things so r t 1 and R T 2.

47
00:04:09,180 --> 00:04:10,400
So here you go.

48
00:04:10,470 --> 00:04:16,950
We have the size of the original matrix was a row vector so one by 10 and then both of these methods

49
00:04:16,980 --> 00:04:23,370
basically converted this row vector into a column vector so now it's 10 by one.

50
00:04:23,460 --> 00:04:25,330
So that's four vectors.

51
00:04:25,410 --> 00:04:32,130
Now what I'm going to do is transpose a matrix and then show you the matrix as an image before and after

52
00:04:32,130 --> 00:04:33,450
being transposed.

53
00:04:33,600 --> 00:04:41,280
So let's say maths equals num Pi the random round and let's make this how about like an eight by four

54
00:04:41,280 --> 00:04:42,390
matrix.

55
00:04:42,390 --> 00:04:46,680
So then I will say Matt t equals Matt Dot T.

56
00:04:46,710 --> 00:04:49,650
So that's the transpose of the matrix.

57
00:04:49,650 --> 00:04:51,240
So this is eight by four.

58
00:04:51,240 --> 00:04:54,440
This is going to be a four by eight matrix.

59
00:04:54,790 --> 00:04:59,540
And now I'm gonna plot both of these in two different subplots of the same figure.

60
00:04:59,550 --> 00:05:06,930
And that's going to allow me to illustrate also a different property of working with axes that I think

61
00:05:06,930 --> 00:05:09,860
I haven't yet introduced to you in this course.

62
00:05:09,870 --> 00:05:10,140
OK.

63
00:05:10,160 --> 00:05:14,480
So fig comma X equals BLT subplot.

64
00:05:14,490 --> 00:05:22,260
So this method I've shown you before for creating subplots so I'm gonna create a subplot geometry that's

65
00:05:22,260 --> 00:05:28,790
going to be one row and two columns so there's gonna be an image here and an image over here.

66
00:05:28,810 --> 00:05:29,080
Okay.

67
00:05:29,130 --> 00:05:39,030
So now I'm going to draw into the first axis I am show Matt and then x zero dots.

68
00:05:39,340 --> 00:05:45,510
Let's see set the title going to be M and let's already have a quick look at this.

69
00:05:45,510 --> 00:05:47,880
Just to make sure I haven't made any mistakes.

70
00:05:47,970 --> 00:05:56,790
And of course I have made a mistake if this is an error of omission I forgot to import import the Met

71
00:05:56,940 --> 00:06:03,000
plot lib dot pie plot library as P L T.

72
00:06:03,000 --> 00:06:03,890
All right.

73
00:06:04,050 --> 00:06:05,700
Hopefully we don't get any errors.

74
00:06:05,730 --> 00:06:06,350
Okay.

75
00:06:06,510 --> 00:06:15,650
And now we see our friendly little image and then here I will write X one that I am show Matt T.

76
00:06:15,960 --> 00:06:19,790
And then the title is going to be set title.

77
00:06:19,840 --> 00:06:27,600
Now I'm gonna make this m transpose however I want this transposed to be in the superscript.

78
00:06:27,600 --> 00:06:34,800
So I'm going to use some dollar signs here to make this look more like what you would expect for math

79
00:06:34,800 --> 00:06:36,090
notation.

80
00:06:36,230 --> 00:06:36,510
All right.

81
00:06:36,540 --> 00:06:38,010
So this is looking pretty good.

82
00:06:38,010 --> 00:06:43,730
However let's say you don't like all these tick marks here on the y axis and on the x axis.

83
00:06:43,740 --> 00:06:45,970
So I would like to get rid of them.

84
00:06:46,020 --> 00:06:57,270
So one thing I can do is write a x 0 that sets X ticks and then I set it to be empty.

85
00:06:57,270 --> 00:06:59,810
So that removes the X ticks here.

86
00:06:59,830 --> 00:07:05,400
Now notice the matrices also changed because I'm you know they get randomly generated each time I run

87
00:07:05,400 --> 00:07:07,160
this code.

88
00:07:07,240 --> 00:07:08,340
So this is fine.

89
00:07:08,350 --> 00:07:15,370
And then I would have to repeat this for y ticks and then for the first axis X axis zero and also axis

90
00:07:15,370 --> 00:07:16,440
one.

91
00:07:16,540 --> 00:07:19,500
But you know this isn't really a scalable method.

92
00:07:19,510 --> 00:07:25,150
Let's say you're plotting like 20 different axes and you have to write this out 20 times that's a little

93
00:07:25,150 --> 00:07:26,640
bit tedious.

94
00:07:26,650 --> 00:07:29,510
So what I'm going to do is put this in a loop.

95
00:07:29,530 --> 00:07:38,410
So I'm going to write for i in X and then I can just write I got set X sticks.

96
00:07:38,420 --> 00:07:45,440
Now each iteration inside this for loop I is going to correspond to a different axis which is gonna

97
00:07:45,460 --> 00:07:47,660
be this one and then this one.

98
00:07:47,680 --> 00:07:53,530
So this is for the X ticks and then also for the Y ticks of course.

99
00:07:53,530 --> 00:07:54,010
All right.

100
00:07:54,100 --> 00:07:58,540
So then this gets applied to both of these subplots.

101
00:07:58,540 --> 00:08:04,180
And the idea when you're looking at these images is you can see that the first row here becomes the

102
00:08:04,180 --> 00:08:06,150
first column here.

103
00:08:06,450 --> 00:08:14,850
And likewise the first column becomes the first row so I used this term symmetric in the beginning of

104
00:08:14,850 --> 00:08:17,670
this video to refer to a matrix.

105
00:08:17,670 --> 00:08:20,040
So what is a symmetric matrix.

106
00:08:20,040 --> 00:08:26,730
Well if you think of a square matrix like this then you can draw a line going through the diagonal like

107
00:08:26,730 --> 00:08:34,410
this or the diagonal going from top left to bottom right now this matrix is symmetric because all of

108
00:08:34,410 --> 00:08:39,580
the corresponding elements are mirrored across the diagonal.

109
00:08:39,660 --> 00:08:41,700
So this is the same as this.

110
00:08:41,700 --> 00:08:43,710
This is the same as this and so on.

111
00:08:43,710 --> 00:08:50,220
It's like if you would take this matrix and fold it across the diagonal so imagine a crease going here

112
00:08:50,220 --> 00:08:56,700
on the diagonal and you fold this upper right triangle down to this lower right triangle then all the

113
00:08:56,700 --> 00:08:59,100
elements would be exactly identical.

114
00:08:59,460 --> 00:09:02,850
And that is the definition of a symmetric matrix.

115
00:09:02,850 --> 00:09:08,300
Now there's a formal mathematical definition which is a equals a transpose.

116
00:09:08,340 --> 00:09:13,410
So why is this the correct definition of a symmetric matrix.

117
00:09:13,410 --> 00:09:21,120
Well think of it this way the first column of this matrix is the same thing as the first row and the

118
00:09:21,120 --> 00:09:24,200
second column is the same thing as the second row.

119
00:09:24,210 --> 00:09:24,860
And so on.

120
00:09:25,170 --> 00:09:33,090
So each corresponding column is the same thing is the same values in the same order as the corresponding

121
00:09:33,150 --> 00:09:34,130
row.

122
00:09:34,140 --> 00:09:39,480
So that means you could transpose this matrix and you would get exactly the same result.

123
00:09:39,510 --> 00:09:41,730
So a equals a transpose.

124
00:09:41,730 --> 00:09:45,190
This is the definition of a symmetric matrix.

125
00:09:45,330 --> 00:09:52,620
And so with that in mind what I would like you to do in this exercise is show that a matrix which can

126
00:09:52,620 --> 00:09:58,270
be square or it can be non square times its transpose is square and symmetric.

127
00:09:58,500 --> 00:10:05,640
So write some code in Python that will show that when you take a matrix and multiply it by its own transpose

128
00:10:06,000 --> 00:10:10,730
the resulting matrix is going to be square and it's going to be symmetric.

129
00:10:10,770 --> 00:10:18,360
Now I'm about to give a little bit of a hint for how to figure out whether a matrix is symmetric if

130
00:10:18,360 --> 00:10:24,990
you don't want to hint then now is the time to pause the video and switch to Python and figure out how

131
00:10:24,990 --> 00:10:28,000
to to solve this exercise.

132
00:10:28,020 --> 00:10:35,640
So the hint is nothing super fancy it's basically just looking at this little equation here and thinking

133
00:10:35,640 --> 00:10:41,040
about what would happen if you subtract a transpose from both sides of the equation so you would get

134
00:10:41,430 --> 00:10:49,320
a minus a transpose equals zero which in this case would be the matrix of all zeros at the zeros matrix.

135
00:10:49,590 --> 00:10:50,010
All right.

136
00:10:50,040 --> 00:10:57,500
So now you should pause the video switch to Python and now I am going to switch to Python.

137
00:10:57,700 --> 00:11:08,890
I'm gonna start by generating some variables for Matrix sizes so let's see m is 14 and and is 19 all

138
00:11:08,890 --> 00:11:09,240
right.

139
00:11:09,250 --> 00:11:17,830
And now what I'm gonna do is create a matrix so a matrix a matte of random numbers.

140
00:11:17,830 --> 00:11:24,540
It's going to be m by n and then I'm going to compute the matrix times it's transpose.

141
00:11:24,550 --> 00:11:34,220
So I'm gonna call this a mat and then how about Emma so this is a match forwards and backwards is called

142
00:11:34,220 --> 00:11:35,300
a palindrome.

143
00:11:35,310 --> 00:11:42,590
And we write that up palindrome a palindrome is a word that spelled the same forwards and backwards

144
00:11:42,590 --> 00:11:48,130
like mom and dad and my ma how are you pronounced.

145
00:11:48,490 --> 00:11:49,990
Amanda Ma all right.

146
00:11:50,000 --> 00:11:54,940
So that's going to be aim at times aim at DOT T.

147
00:11:54,970 --> 00:11:57,800
So the matrix times it's transpose.

148
00:11:57,800 --> 00:12:02,450
So the first thing I want to do is show that this is square.

149
00:12:02,480 --> 00:12:09,080
So even though this is a non square matrix this is a rectangular shaped matrix.

150
00:12:09,080 --> 00:12:10,750
The resulting matrix times.

151
00:12:10,760 --> 00:12:13,840
So the matrix times is transpose is going to be squares.

152
00:12:13,850 --> 00:12:20,240
I'm gonna print out the shape of my Tama and let's already see what that is.

153
00:12:20,290 --> 00:12:22,930
Okay so that ends up being 14 by 14.

154
00:12:22,970 --> 00:12:25,190
So this is a square matrix.

155
00:12:25,190 --> 00:12:33,560
And how about if I make this Let's say I don't know how about if this is like four and this is maybe

156
00:12:34,030 --> 00:12:35,880
I but also 19.

157
00:12:35,930 --> 00:12:40,600
Okay so now it's four by four and forty by nineteen forty by forty.

158
00:12:40,700 --> 00:12:46,190
So you can see no matter how much you change these sizes the result is always going to be symmetric.

159
00:12:46,190 --> 00:12:47,810
So I'm gonna make this a little bit smaller.

160
00:12:47,810 --> 00:12:53,130
How about four by nine matrix that's gonna give us a four by four matrix.

161
00:12:53,180 --> 00:13:03,370
So now I'm going to show that this is symmetric so the way that I'm going to do this here is by printing

162
00:13:03,370 --> 00:13:14,050
out the matrix minus the X it's not the matrix not the original Matrix it's the matrix times it's transpose

163
00:13:14,650 --> 00:13:19,540
minus the matrix times it's transpose and then transpose.

164
00:13:19,540 --> 00:13:20,470
Okay let's see.

165
00:13:20,470 --> 00:13:27,520
So that is a matrix of zeros gets a little bit tricky if you actually try this with the matrix times

166
00:13:27,520 --> 00:13:34,720
it's transpose that's not even a valid operation it's not possible to subtract which would be the same

167
00:13:34,720 --> 00:13:39,690
thing as addition it's not possible to subtract two matrices that are different size.

168
00:13:39,700 --> 00:13:45,840
So the idea is that even though this matrix is not equal to its transpose this is not symmetric.

169
00:13:46,030 --> 00:13:48,760
This matrix actually is symmetric.

170
00:13:49,000 --> 00:13:59,350
So this matrix minus is transpose gives us the zeros matrix in this video you learned about the transpose

171
00:13:59,380 --> 00:14:06,550
operation and a few different ways of implementing the transpose operation in Python and you also learned

172
00:14:06,550 --> 00:14:11,880
about square symmetric matrices which are pretty important in applied linear algebra.

173
00:14:11,890 --> 00:14:18,130
As I mentioned in the beginning of this video square symmetric matrices come up in multivariate signal

174
00:14:18,130 --> 00:14:19,690
processing statistics.

175
00:14:19,690 --> 00:14:22,900
Machine learning all kinds of applied applications.
