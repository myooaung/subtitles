0
1
00:00:03,450 --> 00:00:07,140
Now that you are familiar with using sympy,
1

2
00:00:07,770 --> 00:00:14,370
I'm going to show you an example of how to use sympy and Python more generally to understand important
2

3
00:00:14,370 --> 00:00:16,790
concepts in mathematics.
3

4
00:00:16,860 --> 00:00:23,730
In this particular example in this video we are going to discuss the law of exponents and we are going
4

5
00:00:23,730 --> 00:00:29,940
to see how to understand the law of exponents by using coding in Python.
5

6
00:00:29,940 --> 00:00:35,520
So if you're not familiar with the law of exponents, it sounds really fancy, it sounds really exciting...
6

7
00:00:36,090 --> 00:00:39,210
but it's actually not such a big deal.
7

8
00:00:39,240 --> 00:00:45,540
So the law of exponents basically says that if you have two terms that are multiplying each other and
8

9
00:00:45,540 --> 00:00:53,130
they both have exponentials, they both have something in the exponents up here, then if those bases
9

10
00:00:53,160 --> 00:00:56,850
are the same then you can add the exponential.
10

11
00:00:56,850 --> 00:01:06,330
So X to the power of y times X to the power of Z can be simplified to X to the power of y plus Z.
11

12
00:01:06,480 --> 00:01:11,340
And this is valid only when these two terms are multiplying each other.
12

13
00:01:11,490 --> 00:01:17,290
And only when the bases are the same. It also works for division.
13

14
00:01:17,400 --> 00:01:24,750
And that's because X to the Z or I should say 1 over X to the Z, is the same thing as X to the minus
14

15
00:01:24,780 --> 00:01:26,060
Z.
15

16
00:01:26,190 --> 00:01:33,300
So then X to the power of y divided by X to the power of Z is the same thing -- we can rewrite this term
16

17
00:01:33,390 --> 00:01:40,710
as X to the power of y times X to the power of minus Z, which means we can rewrite this expression
17

18
00:01:40,800 --> 00:01:45,220
as X to the power of y minus Z.
18

19
00:01:45,270 --> 00:01:49,730
This third line down here is just highlighting that this procedure,
19

20
00:01:49,830 --> 00:01:53,700
this simplification, works only when the bases are the same.
20

21
00:01:53,730 --> 00:01:59,820
So if you have X to the power of y and y to the power of Z these bases are not the same.
21

22
00:01:59,820 --> 00:02:02,720
So it's not possible to simplify this.
22

23
00:02:02,730 --> 00:02:06,810
This is actually as simplified already as it possibly can be.
23

24
00:02:06,840 --> 00:02:13,260
All right so with this in mind we are now going to switch to Python and illustrate some of these concepts
24

25
00:02:13,320 --> 00:02:15,040
using sympy.
25

26
00:02:16,320 --> 00:02:20,020
So let's start off by creating some symbolic variables.
26

27
00:02:20,030 --> 00:02:28,410
We'll need X and Y and Z and then say sym dot symbols and then X comma Y comma Z.
27

28
00:02:28,440 --> 00:02:31,380
So now I can create an expression.
28

29
00:02:31,380 --> 00:02:39,980
So let's call this X for expression X to the power of y times X to the power of Z.
29

30
00:02:39,990 --> 00:02:47,190
Now you might be wondering how I can be so sure that the X side of the Y is associated with x and z
30

31
00:02:47,190 --> 00:02:48,820
is associated with X.
31

32
00:02:48,930 --> 00:02:53,490
And how do I know that I'm not writing some weird expression that looks like this.
32

33
00:02:53,850 --> 00:02:58,940
And that has to do with the order of operations, which you learned about in the previous section.
33

34
00:02:58,980 --> 00:03:07,410
So essentially, the order of operations tells us that powers have higher priority than multiplication.
34

35
00:03:07,410 --> 00:03:07,670
All right.
35

36
00:03:07,700 --> 00:03:12,980
So I can write this out now to say display and then x.
36

37
00:03:13,150 --> 00:03:16,140
So this just displays with the asterisks.
37

38
00:03:16,230 --> 00:03:20,490
That's no more readable than this is already.
38

39
00:03:20,490 --> 00:03:23,670
So if I want this to look nice, I basically have two options.
39

40
00:03:23,670 --> 00:03:35,250
One is I can use display math and then sympy latex. So convert this sympy expression to latex. Or I
40

41
00:03:35,250 --> 00:03:39,790
can set up the sym dot init.
41

42
00:03:39,810 --> 00:03:49,460
printing. And then I can just use the display function, just like this.
42

43
00:03:49,480 --> 00:03:56,560
Now sometimes it's advantageous to have the init printing and just the display, and sometimes it's advantageous
43

44
00:03:56,560 --> 00:04:02,790
to do what I previously did, which is have the math function and the sym dot latex.
44

45
00:04:02,820 --> 00:04:05,770
It really depends on how much you are going to show.
45

46
00:04:05,770 --> 00:04:11,830
In this case I'm only going to show these simple expressions, without adding anything special or having
46

47
00:04:11,830 --> 00:04:13,540
any string replacements.
47

48
00:04:13,540 --> 00:04:17,100
So for now this is sufficient.
48

49
00:04:17,260 --> 00:04:27,190
Now I'm going to use another sympy function, and that is called simplify. So sym dot simplify.
49

50
00:04:27,210 --> 00:04:34,270
And essentially, that's going to simplify whatever is the input expression, so I input this expression
50

51
00:04:34,300 --> 00:04:35,760
which is this expression.
51

52
00:04:35,770 --> 00:04:39,320
So X to the Y and X times X Z.
52

53
00:04:39,470 --> 00:04:46,390
And basically python is going to analyze this mathematical expression here and determine whether it's
53

54
00:04:46,390 --> 00:04:52,010
possible to simplify this expression. And if it is, then it will return
54

55
00:04:52,030 --> 00:04:53,560
that expression simplified.
55

56
00:04:53,740 --> 00:04:58,150
If it cannot be simplified, then it will just return the same thing.
56

57
00:04:58,180 --> 00:04:59,020
So now I run this.
57

58
00:04:59,050 --> 00:05:06,850
You can see that Python simplified X to the Y times X to the Z, with X to the Y plus zed. And now,
58

59
00:05:06,850 --> 00:05:14,890
out of curiosity, we can change this X to a y here, run this cell again, and now you see that both of these
59

60
00:05:15,130 --> 00:05:17,590
expressions both these lines are the same.
60

61
00:05:17,690 --> 00:05:23,820
And that's because this expression is already simplified as much as it possibly can be.
61

62
00:05:23,900 --> 00:05:24,170
All right.
62

63
00:05:24,190 --> 00:05:26,070
So let's change this back.
63

64
00:05:26,200 --> 00:05:26,470
Great.
64

65
00:05:26,500 --> 00:05:29,280
So now I'm gonna set up a couple of different expressions.
65

66
00:05:29,290 --> 00:05:34,870
I'm going to say x 1 equals this guy again.
66

67
00:05:34,890 --> 00:05:42,030
Essentially I'm going to write out the three expressions that I showed in these slides. x 2 equals x
67

68
00:05:42,030 --> 00:05:50,280
to the power of y divided by X to the power of Z and then expression 3 is going to be equal X to the
68

69
00:05:50,280 --> 00:05:54,840
power of y times Y to the power of Z.
69

70
00:05:55,170 --> 00:06:01,470
So again, these are the three expressions or I should say the Python implementation of the three expressions
70

71
00:06:01,470 --> 00:06:03,400
that I wrote out in these slides.
71

72
00:06:03,750 --> 00:06:09,940
And essentially what I want to do is say that this expression equals it's simplified version.
72

73
00:06:09,960 --> 00:06:15,720
I'm going to write display and now here I need to write a little bit more involved text.
73

74
00:06:15,780 --> 00:06:18,970
So I'm going to need to incorporate math.
74

75
00:06:19,020 --> 00:06:22,420
This math function and latex coding.
75

76
00:06:22,530 --> 00:06:28,760
So this is going to say basically expression 1 equals the simplified version of expression 1.
76

77
00:06:28,830 --> 00:06:36,120
So there's going to be percent x equals percent x and then I'm going to replace percent s -- these strings --
77

78
00:06:36,870 --> 00:06:48,460
with x 1 and sym dot simplify x 1.
78

79
00:06:48,740 --> 00:06:49,020
Okay.
79

80
00:06:49,040 --> 00:06:56,070
So you can see what I'm doing: I'm saying the expression as I wrote it here equals the simplified version
80

81
00:06:56,160 --> 00:06:57,710
of the expression.
81

82
00:06:57,720 --> 00:07:01,820
So now I'm going to run this code and let's see what it looks like.
82

83
00:07:02,100 --> 00:07:02,490
All right.
83

84
00:07:02,490 --> 00:07:04,770
So this doesn't really look that nice.
84

85
00:07:04,770 --> 00:07:12,150
It doesn't look like easily readable math notation, although you can see it did simplify the expression
85

86
00:07:12,150 --> 00:07:20,980
to Y plus z in the exponent here. So the problem here is that I'm simply inputting a string into the
86

87
00:07:20,980 --> 00:07:26,320
math function. But what I want to input is latex code into the math function.
87

88
00:07:26,320 --> 00:07:34,000
So now you will remember from a previous video, that we can convert this sympy expression into
88

89
00:07:34,000 --> 00:07:37,200
latex with the function sym dot latex.
89

90
00:07:38,860 --> 00:07:42,190
So now we have half of this expression looking good.
90

91
00:07:42,190 --> 00:07:48,890
And then we have seen that latex and now both sides look good.
91

92
00:07:48,940 --> 00:07:53,860
Now there's something I would like to point out here, which is that this is a pretty long and pretty
92

93
00:07:53,860 --> 00:07:57,490
difficult to read line of code.
93

94
00:07:57,490 --> 00:08:00,290
There is a lot of sym dot going on here.
94

95
00:08:00,310 --> 00:08:03,880
So there's one two three sym dot functions.
95

96
00:08:03,880 --> 00:08:12,040
Now if you like, you could create separate variables for this, so you could say something like x 1 simplify
96

97
00:08:12,980 --> 00:08:16,520
or simple equals simple simplify x 1.
97

98
00:08:16,960 --> 00:08:23,740
If you prefer making additional variables to simplify this line of code then go for it but you can also
98

99
00:08:23,740 --> 00:08:26,920
see the importance of building up your code
99

100
00:08:26,920 --> 00:08:34,690
one simple straightforward piece at a time, and slowly adding more complexity to it as necessary.
100

101
00:08:34,690 --> 00:08:34,900
All right.
101

102
00:08:34,930 --> 00:08:42,400
Fortunately, once we have confirmed that this line is correct, then it's really easy to do this for everything
102

103
00:08:42,400 --> 00:08:42,640
else.
103

104
00:08:42,640 --> 00:08:46,320
I just need to replace the one with the two.
104

105
00:08:46,690 --> 00:08:49,460
And here the one with the three.
105

106
00:08:49,480 --> 00:08:56,110
So now we see the law of exponents in action. Here, the exponent simplified because the base term is the
106

107
00:08:56,110 --> 00:08:57,150
same.
107

108
00:08:57,160 --> 00:09:03,200
This also simplified and this does not simplify because here at the base term is different.
108

109
00:09:03,350 --> 00:09:10,860
So this is one way to use Python and sympy as tools for understanding the law of exponents.
109

110
00:09:11,020 --> 00:09:16,130
And of course this is just an example of how you can use this to understand concepts in mathematics.
110

111
00:09:16,270 --> 00:09:23,920
I'm going to insert a new cell below and I'm going to show you another way to understand math concepts and
111

112
00:09:23,920 --> 00:09:28,960
that's going to be using something called sym dot eq and this stands for equal.
112

113
00:09:29,050 --> 00:09:37,090
And the way that sym dot eq, or equal, works is you give one or two inputs. So you can give one input,
113

114
00:09:37,690 --> 00:09:40,800
corresponding to the left hand side of the equation.
114

115
00:09:40,810 --> 00:09:48,120
So let's say for and then you can give a second input, which would correspond to these -- the right hand
115

116
00:09:48,120 --> 00:09:50,100
side of the equation.
116

117
00:09:50,130 --> 00:09:58,770
So what I'm writing out here this is equivalent to saying 4 equals two plus two, four equals two plus
117

118
00:09:58,770 --> 00:09:59,630
two.
118

119
00:09:59,670 --> 00:10:04,090
So the first input here corresponds to the left hand side of the equation.
119

120
00:10:04,260 --> 00:10:08,920
And the second input corresponds to the right hand side of the equation.
120

121
00:10:08,980 --> 00:10:14,760
And now what sympy is going to return is a boolean saying whether this is true or false.
121

122
00:10:14,760 --> 00:10:20,550
Now in this case it's true because the left hand side of this equation does indeed equal the right hand
122

123
00:10:20,550 --> 00:10:21,960
side of this equation.
123

124
00:10:21,960 --> 00:10:26,880
I can make this two point one, and now of course it's false.
124

125
00:10:26,880 --> 00:10:28,830
So that's just inputting numbers.
125

126
00:10:28,830 --> 00:10:35,840
I can also use variables, so let's say l h s this is for the left hand side of the equation.
126

127
00:10:36,030 --> 00:10:45,630
Let's say that equals 4, and then the right hand side equals let's say 6 minus
127

128
00:10:45,630 --> 00:10:46,220
2.
128

129
00:10:46,320 --> 00:10:51,920
And now we're going to write left hand side comma right hand side.
129

130
00:10:52,260 --> 00:10:52,530
Okay.
130

131
00:10:52,530 --> 00:10:53,640
And this is true.
131

132
00:10:53,640 --> 00:10:56,870
So far nothing spectacularly novel.
132

133
00:10:56,940 --> 00:11:02,280
The main thing that I want to show you is that you can also set up this equation with this function
133

134
00:11:02,280 --> 00:11:08,100
with only one input and they're essentially what you're doing is converting this equation.
134

135
00:11:08,100 --> 00:11:16,080
So just to show you before we had four equals two plus two so I can subtract two plus two from both
135

136
00:11:16,080 --> 00:11:23,190
sides of this equation and write, for example, four minus two plus two equals zero.
136

137
00:11:23,310 --> 00:11:29,340
Notice I've just taken this from... so I've taken the right hand side of the equation, and moved it over
137

138
00:11:29,340 --> 00:11:33,570
to the left hand side of the equation with a subtraction of course, because really what I'm doing is
138

139
00:11:33,570 --> 00:11:36,950
subtracting two plus two from both sides of the equation.
139

140
00:11:36,960 --> 00:11:40,060
And then you get zero on the right hand side.
140

141
00:11:40,080 --> 00:11:46,410
Now sometimes this can be a little bit more handy and when you don't provide a second input then you're
141

142
00:11:46,410 --> 00:11:48,750
actually implicitly setting
142

143
00:11:48,750 --> 00:11:50,850
the second input to be zero.
143

144
00:11:50,940 --> 00:11:57,990
And by putting the cursor inside the parentheses here and then pressing shift tab to see the help function,
144

145
00:11:58,110 --> 00:12:01,950
we can also see that the first input is the left hand side.
145

146
00:12:01,980 --> 00:12:05,790
The second input says right hand side equals zero.
146

147
00:12:05,790 --> 00:12:12,120
When you see this equals zero here, that means that the default for Python, if you don't provide a second
147

148
00:12:12,120 --> 00:12:15,550
input, is to set the second input to be zero.
148

149
00:12:18,870 --> 00:12:19,240
All right.
149

150
00:12:19,270 --> 00:12:21,830
So let me get rid of these
150

151
00:12:24,520 --> 00:12:33,520
and so what you might think of doing is saying something like e x 1, so expression 1, equals the simplified
151

152
00:12:33,940 --> 00:12:34,510
version.
152

153
00:12:34,510 --> 00:12:43,640
So simplify ex1. Now you might have expected this to return true.
153

154
00:12:43,740 --> 00:12:51,420
However, in a strict theoretical sense it is difficult to prove unequivocally in the general case that
154

155
00:12:51,420 --> 00:12:56,340
these two are equal for all symbolic variables.
155

156
00:12:56,340 --> 00:13:02,750
Similarly, if I would subtract these two and set them equal to zero then I just get the expression printed
156

157
00:13:02,760 --> 00:13:10,110
out essentially simply as telling me that there isn't enough information in this input to determine
157

158
00:13:10,200 --> 00:13:15,960
unequivocally whether this expression is true or whether it's not true.
158

159
00:13:15,990 --> 00:13:19,940
So therefore Python is just printing out the expression.
159

160
00:13:20,040 --> 00:13:26,190
So if you're in a situation like this what you can do is expand everything, so you can say sympy dot
160

161
00:13:26,250 --> 00:13:31,940
expand, which essentially undoes all of these simplifications.
161

162
00:13:32,250 --> 00:13:35,220
And now we get an answer of true.
162

163
00:13:35,250 --> 00:13:40,800
So here I've shown you a couple of different ways for showing simplifications of expressions.
163

164
00:13:40,800 --> 00:13:45,040
In this case with an application for the law of exponents.
164

165
00:13:45,090 --> 00:13:51,180
Now in this particular example, because we are dealing with exponents and powers, there is another function
165

166
00:13:51,300 --> 00:13:57,270
which you could have used which is called sym dot powsimp.
166

167
00:13:57,470 --> 00:13:57,930
.
167

168
00:13:57,930 --> 00:14:00,540
So this is power simplification.
168

169
00:14:00,540 --> 00:14:07,170
And then I can type e x 1 and the result is going to be X to the power of Y minus.
169

170
00:14:08,190 --> 00:14:13,200
So you can see that there are many many functions in the sympy module.
170

171
00:14:13,200 --> 00:14:16,380
You don't really need to worry about memorizing all of them.
171

172
00:14:16,380 --> 00:14:23,490
Some expressions are more useful, you'll use them often; some expressions are a little bit more specific
172

173
00:14:23,520 --> 00:14:25,270
and you won't use them so often.
173

174
00:14:25,350 --> 00:14:31,350
But as you continue going through in this course and the rest of your career in mathematics and data
174

175
00:14:31,350 --> 00:14:37,950
science and quantitative things in general, you will become more familiar with the many functions in
175

176
00:14:38,130 --> 00:14:43,310
Python and in sympy. So I hope you enjoyed this lecture.
176

177
00:14:43,340 --> 00:14:50,450
Essentially we took some of the knowledge gained in a previous few videos about simplify and latex to
177

178
00:14:50,450 --> 00:14:55,370
understand an important mathematical concept which is the law of exponents.
