WEBVTT
0
1
00:00:02.660 --> 00:00:08.270
In this video I'm going to show you how to test for inequalities in Python.
1

2
00:00:08.270 --> 00:00:13.730
And I will also introduce you to the boolean data type. The boolean data type,
2

3
00:00:13.730 --> 00:00:16.670
Also sometimes called a logical data type.
3

4
00:00:16.820 --> 00:00:23.290
is one of the most important data types in computing, in particular in scientific computing.
4

5
00:00:23.300 --> 00:00:28.160
Now if you're not familiar or maybe you've forgotten about inequalities and you have never heard of
5

6
00:00:28.160 --> 00:00:30.460
booleans before, then don't worry.
6

7
00:00:30.500 --> 00:00:35.410
It's actually a really simple concept as you will see in a moment.
7

8
00:00:35.420 --> 00:00:42.030
So first a quick reminder about inequalities and inequality is kind of like an equals sign.
8

9
00:00:42.030 --> 00:00:43.960
But it's a little bit less certain.
9

10
00:00:44.160 --> 00:00:45.900
It's a bit more open ended.
10

11
00:00:45.900 --> 00:00:53.310
So this statement here reads "four is greater than three" and that is obviously a true statement -- four is
11

12
00:00:53.310 --> 00:00:54.800
greater than three.
12

13
00:00:54.810 --> 00:00:59.020
So this bracket sign here is opening up towards the larger number.
13

14
00:00:59.040 --> 00:01:02.160
So here you would say four is less than five.
14

15
00:01:02.160 --> 00:01:06.420
So these are the first two symbols for inequalities.
15

16
00:01:06.420 --> 00:01:08.520
Then there's two other symbols that are worth knowing.
16

17
00:01:08.520 --> 00:01:11.730
And that is four is greater than or equal to.
17

18
00:01:11.730 --> 00:01:13.800
That's how you pronounce this symbol here.
18

19
00:01:13.800 --> 00:01:17.310
So greater than or equal to two plus two.
19

20
00:01:17.310 --> 00:01:22.620
Now that's obviously true: four is not greater than two plus two Because two plus two equals four.
20

21
00:01:22.620 --> 00:01:25.470
So four is equal to two plus two.
21

22
00:01:25.650 --> 00:01:30.990
Here we say four is less than or equal to three plus two and again that's also true.
22

23
00:01:30.990 --> 00:01:37.890
This side is five this side is four that's four is not equal to five but four is less than or equal
23

24
00:01:37.890 --> 00:01:39.580
to five.
24

25
00:01:39.600 --> 00:01:39.890
OK.
25

26
00:01:39.920 --> 00:01:45.990
So you will see in a moment how to implement these four expressions in Python.
26

27
00:01:45.990 --> 00:01:51.870
And before I switch to Python I'm going to introduce you to a data type that's called boolean, sometimes
27

28
00:01:51.870 --> 00:01:54.470
it's also called logical.
28

29
00:01:54.510 --> 00:01:59.160
Now in this data type there are only two values: true and false.
29

30
00:01:59.160 --> 00:02:04.460
So this is just a binary data type something can be true or it can be false.
30

31
00:02:04.470 --> 00:02:10.290
Now python and different programming languages will sometimes print out the words true and false and
31

32
00:02:10.290 --> 00:02:18.840
sometimes they represent these as 0 and 1 where one is equivalent to true and zero is equivalent to
32

33
00:02:18.840 --> 00:02:19.670
false.
33

34
00:02:19.680 --> 00:02:27.090
So if you see one and zero, and they are a boolean or logical type, then this is not the number one.
34

35
00:02:27.100 --> 00:02:28.230
And this is not the number zero.
35

36
00:02:28.230 --> 00:02:32.550
This would be equivalent to trues, it's just a different way of representing true.
36

37
00:02:32.550 --> 00:02:37.980
And this is a different way of representing false. That said, Python always prints
37

38
00:02:37.980 --> 00:02:41.960
out the words true and false so it's even easier to remember.
38

39
00:02:41.970 --> 00:02:42.780
All right.
39

40
00:02:42.780 --> 00:02:47.270
Let's switch to Python and see how this stuff gets implemented.
40

41
00:02:47.460 --> 00:02:49.580
So let's start off with a simple example.
41

42
00:02:49.590 --> 00:02:53.160
I will say four greater than five.
42

43
00:02:53.310 --> 00:02:57.860
So this is how you implement the greater than sign.
43

44
00:02:57.870 --> 00:03:02.620
So now I'm going to press control enter on my keyboard and it says false.
44

45
00:03:02.760 --> 00:03:07.500
And this is actually the correct result because four is not greater than five.
45

46
00:03:07.530 --> 00:03:11.850
So it is incorrect -- it's false that four is greater than five.
46

47
00:03:11.860 --> 00:03:17.400
Now if I want to see what true looks like I could write four less than five like this and that prints
47

48
00:03:17.400 --> 00:03:18.720
out true.
48

49
00:03:18.840 --> 00:03:22.080
Now I can also set a variable to be a boolean.
49

50
00:03:22.110 --> 00:03:29.910
So let's say be the very I'm going to create this variable B equals let's say 10 less then and I'm going
50

51
00:03:29.910 --> 00:03:37.140
to say three times three to show you that you can put an arithmetic expression on one side of this.
51

52
00:03:37.140 --> 00:03:41.250
So B equals 10 greater than three times three.
52

53
00:03:41.250 --> 00:03:47.070
This is a kind of weird looking expression if you're not familiar with boolean data types.
53

54
00:03:47.070 --> 00:03:53.100
But the thing to keep in mind is that this whole expression here is going to give one output -- it's either
54

55
00:03:53.100 --> 00:03:54.240
going to be true or false.
55

56
00:03:54.240 --> 00:03:59.010
Now we know in this case this is going to be true because three times three is nine and ten is greater
56

57
00:03:59.010 --> 00:04:00.190
than nine.
57

58
00:04:00.210 --> 00:04:01.660
So this is going to be true.
58

59
00:04:01.680 --> 00:04:05.760
And therefore I expect the value of b to be true.
59

60
00:04:05.760 --> 00:04:06.600
Now that's not this true,
60

61
00:04:06.600 --> 00:04:09.360
That was from the previous code that I ran.
61

62
00:04:09.390 --> 00:04:09.620
OK.
62

63
00:04:09.630 --> 00:04:11.340
So now I run this code again.
63

64
00:04:11.520 --> 00:04:13.790
There's no output because we didn't request any output.
64

65
00:04:13.800 --> 00:04:20.760
So I'm going to say print B and I can see that the value of B is true.
65

66
00:04:20.850 --> 00:04:26.480
Now to prove to you that B is a boolean variable and not a string.
66

67
00:04:26.490 --> 00:04:32.820
So it's not the word true, it's not the set of characters t r u e, it's actually the Boolean true.
67

68
00:04:33.060 --> 00:04:35.710
I'm going to print out the type of this variable.
68

69
00:04:35.800 --> 00:04:38.180
Now there's a special function in Python.
69

70
00:04:38.190 --> 00:04:40.200
It's a built in function.
70

71
00:04:40.200 --> 00:04:43.760
You can see it's a built in function because it's green when I typed it.
71

72
00:04:43.860 --> 00:04:46.230
And that is called type.
72

73
00:04:46.230 --> 00:04:54.630
So now what I'm requesting Python to do is print out not the variable itself but the type of the variable.
73

74
00:04:54.630 --> 00:05:01.170
Now when I run this code you'll see this says class bool and this is shorthand for boolean.
74

75
00:05:01.200 --> 00:05:04.560
So this is the data type or the class boolean.
75

76
00:05:05.570 --> 00:05:05.920
OK.
76

77
00:05:05.970 --> 00:05:08.510
Now let's see if I can set this to be false.
77

78
00:05:08.520 --> 00:05:11.850
I'm going to say three point three three three.
78

79
00:05:11.850 --> 00:05:13.490
Well this is still going to be ....
79

80
00:05:13.500 --> 00:05:18.570
I wanted to get this to print the value of B.
80

81
00:05:18.720 --> 00:05:23.370
This is still true because now three times three three three actually I can even show you what this
81

82
00:05:23.370 --> 00:05:24.350
is.
82

83
00:05:25.020 --> 00:05:26.560
So we're still at nine nine nine.
83

84
00:05:26.820 --> 00:05:28.790
And in fact, the more threes they get here.
84

85
00:05:28.860 --> 00:05:32.250
Basically this is just going to be closer and closer to 10.
85

86
00:05:32.310 --> 00:05:35.860
I have to... let's say at a four over there.
86

87
00:05:36.210 --> 00:05:43.790
And now this becomes false and this becomes false because three times 3 3 3 3 and then a 4 at the
87

88
00:05:43.790 --> 00:05:47.980
end we'd get just a tiny tiny little bit over 10.
88

89
00:05:48.110 --> 00:05:48.520
Okay.
89

90
00:05:48.530 --> 00:05:54.980
So far I've showed you the strict inequalities: greater than and less than. What I'm going to
90

91
00:05:54.980 --> 00:05:58.850
introduce you to now is greater than or equal to.
91

92
00:05:58.940 --> 00:06:01.790
So let's start with that example that I showed in the slide.
92

93
00:06:01.790 --> 00:06:08.960
So that was four is greater than or equal to two plus two.
93

94
00:06:08.960 --> 00:06:12.560
So now I can press control enter and I get the answer true.
94

95
00:06:12.560 --> 00:06:15.210
So that's true because four equals two plus two.
95

96
00:06:15.230 --> 00:06:20.620
Now if I write two plus two plus one and I run it again and now I get false.
96

97
00:06:20.660 --> 00:06:29.520
And that's because four is not greater than five and of course I could make this a minus sign and set
97

98
00:06:29.520 --> 00:06:35.660
this to be true or I can set the right hand side of this inequality to be five.
98

99
00:06:35.670 --> 00:06:43.410
And now I'm going to change this to be less than, so I was going to say four is less than or equal to five.
99

100
00:06:43.660 --> 00:06:45.990
And now the answer is true.
100

101
00:06:46.080 --> 00:06:53.580
The last thing that I want to introduce you to in this video before getting to the exercises is testing
101

102
00:06:53.580 --> 00:06:59.700
for equality so now you know how to test for inequality if something is greater than or less than.
102

103
00:07:00.210 --> 00:07:05.810
But how do you test if something is equal to? You might think it should be something like this.
103

104
00:07:05.820 --> 00:07:10.980
And if you would just read this out like a mathematical expression this does seem like the right thing
104

105
00:07:10.980 --> 00:07:14.700
to do: four equals two plus two and that is definitely true.
105

106
00:07:14.700 --> 00:07:21.330
However in python a single equals sign like this is not used for equality.
106

107
00:07:21.340 --> 00:07:24.860
It's used for variable assignment and that's like what you see up here.
107

108
00:07:24.900 --> 00:07:30.660
So I'm setting the variable to be equal to the result of this expression.
108

109
00:07:31.980 --> 00:07:37.140
So instead in Python you have to use a double equals sign like this.
109

110
00:07:37.140 --> 00:07:40.550
So you say four equals equals two plus two.
110

111
00:07:40.550 --> 00:07:47.130
It's kind of funny looking if you're new to programming, it looks a little weird but it is the right
111

112
00:07:47.130 --> 00:07:47.810
thing to do.
112

113
00:07:47.820 --> 00:07:49.480
Python outputs true.
113

114
00:07:49.650 --> 00:07:54.510
And that's because 4 really is equal to two plus two.
114

115
00:07:54.510 --> 00:08:02.850
And now if we wanted to store this outcome so the outcome true in a variable we could say create a new
115

116
00:08:02.850 --> 00:08:10.110
variables like theTest equals the result of four equals equals two plus two.
116

117
00:08:10.470 --> 00:08:16.430
So this is a funny looking expression because you have multiple equals signs floating around here.
117

118
00:08:16.530 --> 00:08:24.270
But keep in mind that in Python a single equals sign is used to assign some output to some variable.
118

119
00:08:24.270 --> 00:08:30.050
And here the variable is called the test and the double equals sign is used to test for equality.
119

120
00:08:30.060 --> 00:08:33.750
So whether 4 is the same thing as two plus two.
120

121
00:08:34.550 --> 00:08:34.840
OK.
121

122
00:08:34.860 --> 00:08:41.610
So now I run this code and then I will print out the value of the test and we know that that's going
122

123
00:08:41.610 --> 00:08:49.800
to be true. Double equals signs here are really important for using python as a tool for understanding
123

124
00:08:50.250 --> 00:08:52.100
and learning mathematics.
124

125
00:08:52.200 --> 00:08:57.390
And that's because if you try to work out some really complicated equation and you want to see if it's
125

126
00:08:57.390 --> 00:09:04.110
equal to some simpler form of what you think is the same equation then testing for equality is the best
126

127
00:09:04.110 --> 00:09:11.800
way to do that. Here is the exercise for this video.
127

128
00:09:11.870 --> 00:09:15.530
What I have printed here is two inequalities.
128

129
00:09:15.530 --> 00:09:24.830
four x plus three is less than 17 minus X squared and the second one is eight x minus two is less
129

130
00:09:24.830 --> 00:09:33.440
than or equal to minus three times x plus forty two. And up here I have three different options for x.
130

131
00:09:33.470 --> 00:09:37.660
So x can equal 2, X can equal three and X can equal four.
131

132
00:09:37.670 --> 00:09:45.470
So what you have to do in this assignment is implement these two inequalities in Python and then test
132

133
00:09:45.470 --> 00:09:53.030
for these three different values of X, and what you want to do is figure out which values of x will make
133

134
00:09:53.120 --> 00:09:55.840
these expressions true.
134

135
00:09:55.850 --> 00:10:00.980
So just to make sure this is clear, I'm going to give a simple example where X equals zero.
135

136
00:10:01.010 --> 00:10:02.290
So that's not one of these options.
136

137
00:10:02.300 --> 00:10:10.610
But imagine if X were equal to zero then this first expression here would be zero plus three is less
137

138
00:10:10.610 --> 00:10:12.290
than 17 minus zero.
138

139
00:10:12.290 --> 00:10:15.060
So basically three is less than 17.
139

140
00:10:15.080 --> 00:10:16.990
That statement is true.
140

141
00:10:17.030 --> 00:10:19.510
So therefore when x equals zero
141

142
00:10:19.640 --> 00:10:22.320
this entire statement is true.
142

143
00:10:22.340 --> 00:10:22.630
All right.
143

144
00:10:22.640 --> 00:10:25.490
So pause the video, implement this in Python.
144

145
00:10:25.490 --> 00:10:31.940
And check for these two expressions which values have X from this set of three values will make these
145

146
00:10:31.940 --> 00:10:35.700
two expressions be true.
146

147
00:10:35.920 --> 00:10:44.800
Okay so the way that I'm going to implement this is by setting all of these variables so x equals two
147

148
00:10:44.830 --> 00:10:47.420
X equals three and x equals four.
148

149
00:10:47.740 --> 00:10:54.550
And then I'm going to basically uncomment these out one at a time and check whether they make the expression
149

150
00:10:54.550 --> 00:10:54.850
true.
150

151
00:10:54.880 --> 00:10:58.240
So let's start with the first one that was I'm going to print this out.
151

152
00:10:58.240 --> 00:11:07.220
That was four times x plus three is less than 17 minus X.
152

153
00:11:07.300 --> 00:11:15.970
Remember X squared is not the caret symbol but it is the two asterisks, two multiplication signs.
153

154
00:11:16.060 --> 00:11:16.290
Okay.
154

155
00:11:16.300 --> 00:11:23.020
So what I'm going to do now is comment out these two options for X and I'm doing that by selecting the
155

156
00:11:23.020 --> 00:11:27.220
code and pressing control slash on my keyboard.
156

157
00:11:28.230 --> 00:11:28.470
Okay.
157

158
00:11:28.480 --> 00:11:31.430
So now this is going to run for x equals two.
158

159
00:11:31.490 --> 00:11:36.790
Okay so that's true and now I'm going to uncomment this line. Notice I'm not commenting this
159

160
00:11:36.790 --> 00:11:37.550
line.
160

161
00:11:37.630 --> 00:11:41.940
So when Python reads this line of code it says X equals three.
161

162
00:11:42.130 --> 00:11:47.860
But then it gets the next line of code and it overrides X to be three instead of two.
162

163
00:11:47.860 --> 00:11:50.100
I think I said three up here I meant two.
163

164
00:11:51.010 --> 00:11:51.230
Okay.
164

165
00:11:51.250 --> 00:11:52.950
So now this is false.
165

166
00:11:53.100 --> 00:11:54.920
And now we can check here.
166

167
00:11:55.180 --> 00:11:58.510
But if it's false for three It's certainly going to be false for four.
167

168
00:11:59.040 --> 00:11:59.290
Okay.
168

169
00:11:59.320 --> 00:12:05.920
So we've discovered that for this first equation, this first expression here, this is true only when x
169

170
00:12:05.920 --> 00:12:08.890
equals two out of this set of three numbers.
170

171
00:12:08.890 --> 00:12:09.140
OK.
171

172
00:12:09.160 --> 00:12:15.300
So now I'm going to repeat this procedure for the second inequality.
172

173
00:12:15.310 --> 00:12:20.440
So let's say print and that one was eight times X.
173

174
00:12:20.470 --> 00:12:25.870
You might think that I have an amazing memory but I actually wrote down these equations on a different
174

175
00:12:25.870 --> 00:12:28.150
monitor on my computer.
175

176
00:12:28.150 --> 00:12:31.540
So I'm not just calling this all back from memory.
176

177
00:12:31.630 --> 00:12:31.930
OK.
177

178
00:12:31.960 --> 00:12:41.080
So that was eight times X minus two is less than or equal to minus three x plus forty two.
178

179
00:12:41.110 --> 00:12:47.050
And again you have to be careful with this three X because if you're writing this out on paper you would
179

180
00:12:47.050 --> 00:12:51.080
write just the three in the X immediately next to each other like this.
180

181
00:12:51.100 --> 00:12:56.900
However in Python you have to explicitly put an asterisk here.
181

182
00:12:56.920 --> 00:12:57.150
Okay.
182

183
00:12:57.160 --> 00:12:58.190
So let's try this again.
183

184
00:12:58.200 --> 00:13:01.170
I'll go starting from x equals two.
184

185
00:13:01.180 --> 00:13:04.690
Now this says true true because it's also printing out this one.
185

186
00:13:04.690 --> 00:13:08.280
So I think just to make things a little easier to comment on this line as well.
186

187
00:13:08.830 --> 00:13:13.750
So x equals two makes this expression true X equals three.
187

188
00:13:13.750 --> 00:13:18.760
Still makes this expression true an x equals four is also true.
188

189
00:13:18.760 --> 00:13:26.890
So the second equation is true for all three of these values of x. In this video,
189

190
00:13:26.890 --> 00:13:34.930
you learned about inequalities and the boolean data type. As you saw, the boolean data type is not so difficult.
190

191
00:13:34.930 --> 00:13:40.150
It just has kind of a weird name but once you get used to it, these logical operators, then they become
191

192
00:13:40.150 --> 00:13:41.120
really useful.
192

193
00:13:41.260 --> 00:13:48.460
And in the next video you will see how to use these boolean or logical operators for a really important
193

194
00:13:48.460 --> 00:13:51.490
command control statement called the if statement.
