WEBVTT
0
1
00:00:03.440 --> 00:00:11.340
In this lesson you are going to learn about the modulus, which is also called the remainder after division.
1

2
00:00:11.390 --> 00:00:18.170
Now if you're not really sure what the Modulus of a division is or what the modulo operator means then
2

3
00:00:18.170 --> 00:00:18.860
don't worry.
3

4
00:00:18.860 --> 00:00:20.220
It's a simple concept.
4

5
00:00:20.240 --> 00:00:22.870
I'm going to explain it in the next slide.
5

6
00:00:22.940 --> 00:00:30.080
Also in this video you are going to learn one of the main applications of the modulus, which is to determine
6

7
00:00:30.410 --> 00:00:33.290
whether a number is odd or even.
7

8
00:00:33.410 --> 00:00:37.550
So of course the odd numbers are like 1 3 5 7.
8

9
00:00:37.700 --> 00:00:41.400
And even numbers are like 2 4 6 and 8.
9

10
00:00:41.570 --> 00:00:41.960
All right.
10

11
00:00:41.960 --> 00:00:49.490
So if you would divide ten by three then you might get an answer that looks something like this.
11

12
00:00:49.520 --> 00:00:53.300
It's 3 with a remainder of 1.
12

13
00:00:53.300 --> 00:00:55.560
So 3 is for...
13

14
00:00:55.640 --> 00:00:57.740
we could call this integer division.
14

15
00:00:57.740 --> 00:01:05.870
So 3 goes into 10 3 times -- not exactly three times, but that is the integer number of times that 3 goes
15

16
00:01:05.870 --> 00:01:07.320
into 10.
16

17
00:01:07.700 --> 00:01:14.900
But because 3 doesn't go into 10 exactly 3 times then we have a little bit left over and that is called
17

18
00:01:14.960 --> 00:01:23.030
the remainder, which is also called the modulus. So the modulo operator in python I will show it to you
18

19
00:01:23.030 --> 00:01:29.780
in a moment but basically the modulus in Python is going to be this number here -- not this number,
19

20
00:01:29.810 --> 00:01:36.500
this is the integer division -- but instead we will get this number out of Python All right.
20

21
00:01:36.500 --> 00:01:44.210
So let's switch to Python and I'll show you how to compute the modulus so I'm going to begin by creating
21

22
00:01:44.210 --> 00:01:44.770
some numbers.
22

23
00:01:44.780 --> 00:01:48.640
So a equals 10 and b equals 3.
23

24
00:01:48.650 --> 00:01:55.160
These are of course the same numbers that I just showed in the slide so I can do regular division by
24

25
00:01:55.160 --> 00:01:58.700
saying a divided by B.
25

26
00:01:58.730 --> 00:02:03.920
Now in this case Python is not going to return 3 remainder 1.
26

27
00:02:03.950 --> 00:02:11.640
Python is going to show this in decimal format up to whatever precision it has for the output.
27

28
00:02:11.780 --> 00:02:16.500
So 3 goes into 10 3 point 3 3 3 3 3 3 3 3 3.
28

29
00:02:16.520 --> 00:02:19.670
Now in theory this this these 3 is go on forever.
29

30
00:02:19.670 --> 00:02:23.770
But here python is truncating and rounding this off to 5.
30

31
00:02:23.820 --> 00:02:29.680
Okay so this shows division and now I'm going to show you integer division. So integer division,
31

32
00:02:30.530 --> 00:02:38.060
and here we just use the function int so the function int is going to extract an integer out of whatever
32

33
00:02:38.060 --> 00:02:38.770
is the input.
33

34
00:02:38.780 --> 00:02:45.850
So the input into this int function is three and one third approximately so three point three three
34

35
00:02:45.860 --> 00:02:46.230
three.
35

36
00:02:46.850 --> 00:02:50.410
And what Python is going to return is the number three.
36

37
00:02:50.410 --> 00:02:52.790
So that's the integer.
37

38
00:02:52.820 --> 00:02:58.250
Now I want to show you something else, which is how to get more information about a function.
38

39
00:02:58.250 --> 00:03:04.790
So if you're not totally sure how this function int works, then of course you could open up a web browser
39

40
00:03:04.880 --> 00:03:07.310
and search in Google for this function.
40

41
00:03:07.490 --> 00:03:12.620
But there's also an easier way to do it, which is to get the help file for this function.
41

42
00:03:12.740 --> 00:03:15.710
And the easiest way to do that is to click
42

43
00:03:15.710 --> 00:03:21.110
so you're inside the function, so inside the parentheses here, and then you press on your keyboard shift
43

44
00:03:21.260 --> 00:03:27.290
and then tab. And that's going to open up this little window here that tells you a little bit about the
44

45
00:03:27.290 --> 00:03:32.210
function and you can press the plus sign and that will give you more information about it.
45

46
00:03:32.210 --> 00:03:39.030
Sometimes you also see some examples. Now, when looking through these help files, you will often see
46

47
00:03:39.450 --> 00:03:45.070
that there is more information than what you probably need for whatever you're looking for.
47

48
00:03:45.090 --> 00:03:50.400
So you have to have a little bit of patience to be able to look through these help files and figure
48

49
00:03:50.400 --> 00:03:52.120
out something that you're looking for.
49

50
00:03:52.860 --> 00:03:53.310
All right.
50

51
00:03:53.310 --> 00:03:58.140
So now we know how to get integer division and now what we want is the remainder.
51

52
00:03:58.150 --> 00:04:05.570
And I'm going to open up a new cell for this. So the remainder, the modulus operator, is the percent sign.
52

53
00:04:05.580 --> 00:04:08.420
So I'm going to type a percent B.
53

54
00:04:08.610 --> 00:04:19.620
And now the answer is 1 and this answer is 1 because 3 goes into 10 3 times with the remainder of 1.
54

55
00:04:19.680 --> 00:04:21.930
And that's what this is telling us.
55

56
00:04:21.990 --> 00:04:27.300
So now I'd like to spend a moment showing you a little bit more code, which is actually mostly a review
56

57
00:04:27.690 --> 00:04:31.390
of integrating this into some nicer printing.
57

58
00:04:31.470 --> 00:04:41.010
So let's say... I'm going to say the division is the int of a divided by B, and then we have the remainder
58

59
00:04:41.160 --> 00:04:46.500
and that is going to be a percent B or a modulus B.
59

60
00:04:46.500 --> 00:04:50.640
Now I want to say print... and now basically I just want to print out this information.
60

61
00:04:50.640 --> 00:05:01.230
I want to say three goes into 10 three times with a remainder of 1.
61

62
00:05:01.320 --> 00:05:01.530
Okay.
62

63
00:05:01.530 --> 00:05:07.320
Now of course this is all hard-coded for the numbers 3 and 10, which is generally not a good idea.
63

64
00:05:07.320 --> 00:05:09.080
This is not a scalable solution.
64

65
00:05:09.090 --> 00:05:14.940
As soon as I change one of these numbers this is going to be incorrect, but as I've mentioned before
65

66
00:05:15.000 --> 00:05:20.820
when printing out like this I generally find it useful to print out what I want first and then I go
66

67
00:05:20.820 --> 00:05:22.560
back and start editing.
67

68
00:05:22.560 --> 00:05:26.960
So now I'm going to replace all these numbers with percent G.
68

69
00:05:26.970 --> 00:05:28.850
So percent G.
69

70
00:05:29.160 --> 00:05:30.060
Percent G.
70

71
00:05:30.060 --> 00:05:37.710
And then another percent G here. And now percent and then parentheses and now we can figure out what
71

72
00:05:37.710 --> 00:05:44.670
we need to replace these percent g's with. The first one is going to be B and then a.
72

73
00:05:44.670 --> 00:05:53.430
So it's not a and then B because of the way I've written this so it's 3 is going into 10 not 10 is going
73

74
00:05:53.430 --> 00:05:54.530
into 3.
74

75
00:05:54.720 --> 00:05:56.230
So b comma a.
75

76
00:05:56.460 --> 00:06:00.680
And then we have to say the number of times the integer number of times that's this variable.
76

77
00:06:00.720 --> 00:06:06.610
divis. And then finally the remainder of the variable remainder.
77

78
00:06:06.630 --> 00:06:07.620
So let's try this.
78

79
00:06:07.620 --> 00:06:08.370
All right.
79

80
00:06:08.640 --> 00:06:09.900
Three goes into 10.
80

81
00:06:10.050 --> 00:06:12.600
Three times with the remainder of 1.
81

82
00:06:12.610 --> 00:06:15.140
Now I'd like to test this a few more times.
82

83
00:06:15.150 --> 00:06:17.850
I'm going to paste in these variables here.
83

84
00:06:17.850 --> 00:06:23.000
So let's try... you know, a good idea I think is also to try three.
84

85
00:06:23.040 --> 00:06:24.570
oops, I mean nine.
85

86
00:06:24.570 --> 00:06:27.710
So now we should get a remainder of zero which we do.
86

87
00:06:27.710 --> 00:06:29.210
So three goes into nine
87

88
00:06:29.400 --> 00:06:36.540
three times with the remainder of zero. We can try, you know eleven maybe so then we get three times with
88

89
00:06:36.540 --> 00:06:38.540
the remainder of two.
89

90
00:06:38.860 --> 00:06:44.930
And now let's try something you know some really large number, I have no idea what this is going to be
90

91
00:06:45.390 --> 00:06:51.720
but it turns out that this number goes into this number three hundred and eighteen times with a remainder
91

92
00:06:51.720 --> 00:06:57.830
of thirty three thousand and twenty six. So whatever that means.
92

93
00:06:58.030 --> 00:07:05.830
Now for the exercise of this video. This is actually a really important exercise because this shows you
93

94
00:07:05.860 --> 00:07:12.850
what is, I think in my experience, the most important and commonly used application of the modulus operator,
94

95
00:07:13.360 --> 00:07:18.760
which is to determine whether a number whether an integer is odd or even.
95

96
00:07:18.760 --> 00:07:26.080
So what you want to do in this exercise is loop through integers from minus five to plus five and report
96

97
00:07:26.140 --> 00:07:33.130
whether each number is an odd number or an even number. By the way, in case you never noticed the word
97

98
00:07:33.190 --> 00:07:38.770
even has an even number of letters and the word odd has an odd number of letters. I'm not sure if that's
98

99
00:07:39.130 --> 00:07:41.250
coincidence or by design.
99

100
00:07:41.320 --> 00:07:48.040
And once you finish programming this exercise, if you like there are two optional little bonus additions
100

101
00:07:48.040 --> 00:07:50.140
that you can do.
101

102
00:07:50.140 --> 00:07:57.430
One is to make sure that the word number here is perfectly vertically aligned, so you can see even though
102

103
00:07:57.450 --> 00:07:59.640
there is an extra space in here.
103

104
00:07:59.650 --> 00:08:02.530
But I wanted that number to be aligned here.
104

105
00:08:02.530 --> 00:08:04.480
A second optional bonus.
105

106
00:08:04.480 --> 00:08:05.470
This one is pretty easy.
106

107
00:08:05.470 --> 00:08:11.590
The second optional bonus which is a little bit more challenging is to figure out a way to get these
107

108
00:08:11.680 --> 00:08:18.670
integers aligned here, independent of the minus sign. So you can see these numbers are all aligned and
108

109
00:08:18.670 --> 00:08:21.430
the minus sign comes to the left of these numbers.
109

110
00:08:21.460 --> 00:08:22.990
All right but this part is optional.
110

111
00:08:22.990 --> 00:08:25.660
This is just visualization formatting.
111

112
00:08:25.840 --> 00:08:26.710
That's not so important.
112

113
00:08:26.710 --> 00:08:33.850
The important part is to make sure you know how to test whether a number is odd or even. So, pause the
113

114
00:08:33.850 --> 00:08:37.620
video, switch to Python, work through this problem on your own.
114

115
00:08:37.660 --> 00:08:43.260
And then when you're finished you can come back and watch me work through a solution.
115

116
00:08:43.440 --> 00:08:43.720
All right.
116

117
00:08:43.750 --> 00:08:51.590
So let's give ourselves a new cell down here. First I'm going to define a range of numbers let's call
117

118
00:08:51.600 --> 00:08:52.600
this num.
118

119
00:08:52.630 --> 00:09:00.880
And I'm going to say range minus five to plus six and I've mentioned this before but I'll say it again
119

120
00:09:01.290 --> 00:09:07.540
that it can be a little bit confusing because the number that you want Python to stop counting is actually
120

121
00:09:07.540 --> 00:09:12.100
one less than the second input into the range function.
121

122
00:09:12.100 --> 00:09:18.220
So now we need a for loop to loop over all of these numbers. So say four and I'll just call this I for
122

123
00:09:18.220 --> 00:09:20.890
simplicity for nums.
123

124
00:09:20.920 --> 00:09:30.920
Don't forget the all important colon here. And then basically we want to immediately test and report.
124

125
00:09:30.940 --> 00:09:35.780
So I'm going to say if I know how do we set this up.
125

126
00:09:35.780 --> 00:09:38.190
So I is going to be this number in here.
126

127
00:09:38.300 --> 00:09:41.580
We can use a division by 2.
127

128
00:09:41.780 --> 00:09:50.610
And now the idea is that if a number is divisible by 2 with 0 remainder, then it must be an even number.
128

129
00:09:50.660 --> 00:09:57.260
And if you divide a number by two and there is a remainder then it's going to be an odd number.
129

130
00:09:57.260 --> 00:10:07.890
So I'm going to say if I modulo two or percent two equals zero then I have to print and then this is going
130

131
00:10:07.890 --> 00:10:17.540
to say let's say you know three is an even number then of course I need to replace three with percent
131

132
00:10:17.570 --> 00:10:22.030
G and then I need to say percent i.
132

133
00:10:22.830 --> 00:10:23.070
Okay.
133

134
00:10:23.090 --> 00:10:25.880
Now I am not yet finished with this exercise.
134

135
00:10:25.880 --> 00:10:31.700
However, I think it's a good idea to run through this already just to check that the code works so far.
135

136
00:10:31.730 --> 00:10:36.800
So what we should see is minus 4 2 0 2 and 4.
136

137
00:10:36.860 --> 00:10:38.080
These are all even numbers now.
137

138
00:10:38.090 --> 00:10:43.940
I suppose it's debatable whether 0 is an even or an odd number. It's a bit of a weird exception, but let's
138

139
00:10:43.940 --> 00:10:45.410
ignore that for the moment.
139

140
00:10:45.680 --> 00:10:53.090
Technically, it does fit into our criteria here, which is that 2 goes into 0 0 times with the remainder
140

141
00:10:53.090 --> 00:10:54.580
of 0.
141

142
00:10:54.590 --> 00:10:54.830
All right.
142

143
00:10:54.860 --> 00:10:57.830
So so far this part is accurate.
143

144
00:10:57.830 --> 00:11:05.090
And now we need to print out that the number is odd if it doesn't fit this criteria and so I'm going to say, else
144

145
00:11:06.330 --> 00:11:11.120
again a colon here and then we print and then this is basically going to be really similar.
145

146
00:11:11.130 --> 00:11:19.790
So I'm going to say percent G is an odd number and then percent I.
146

147
00:11:19.820 --> 00:11:23.590
So we are getting that -- in fact this is now finished
147

148
00:11:24.020 --> 00:11:29.230
the like mandatory part of the exercise. But there's still a few more things I would like to add.
148

149
00:11:29.240 --> 00:11:34.610
So one thing is that the number doesn't line up here and that part is easy to fix.
149

150
00:11:34.610 --> 00:11:36.880
I'm just going to add another space in here.
150

151
00:11:37.930 --> 00:11:38.110
OK.
151

152
00:11:38.150 --> 00:11:39.370
So now we see the number.
152

153
00:11:39.380 --> 00:11:42.540
The word number lines up here, the word number lines up here.
153

154
00:11:42.590 --> 00:11:48.350
And what we're missing is the alignment on the numbers over here.
154

155
00:11:48.350 --> 00:11:53.800
Now this isn't really wrong the way that it's printed out, because python is aligning everything to the
155

156
00:11:53.800 --> 00:11:56.440
first character, which is a minus sign here.
156

157
00:11:56.440 --> 00:11:57.780
And the actual number here.
157

158
00:11:58.450 --> 00:12:03.650
But I think it would look nicer if we could align this according to the integer.
158

159
00:12:03.760 --> 00:12:09.580
And so basically what we need to do is add a space onto these positive numbers or at least these non
159

160
00:12:09.580 --> 00:12:11.470
negative numbers.
160

161
00:12:11.480 --> 00:12:17.500
Now there's a couple of ways you could have solved that. The way that I'm going to solve this is by creating
161

162
00:12:17.500 --> 00:12:18.920
something called firstchar.
162

163
00:12:18.970 --> 00:12:25.600
Let's create a new variable called firstchar and I'll set it equal to a space.
163

164
00:12:25.600 --> 00:12:28.180
So it's just going to be a space in here like this.
164

165
00:12:28.180 --> 00:12:32.410
And now I want to add this firstchar in here before this number.
165

166
00:12:32.410 --> 00:12:33.720
Now this is a string.
166

167
00:12:33.730 --> 00:12:34.960
This is not an integer.
167

168
00:12:34.960 --> 00:12:36.520
This is not a number.
168

169
00:12:36.520 --> 00:12:40.870
So when I add firstchar in here that's actually not going to be percent G,
169

170
00:12:40.870 --> 00:12:45.880
It's going to be percent s. So percent G is for printing out numbers present.
170

171
00:12:45.880 --> 00:12:48.060
S is for printing out strings.
171

172
00:12:48.190 --> 00:12:49.660
And so I'll put that here as well.
172

173
00:12:49.950 --> 00:12:57.340
And now we need to have two options in here, two replacements. So I need to add parentheses here so it
173

174
00:12:57.340 --> 00:13:03.190
is going to say firstchar and then I add another closing parenthesis here.
174

175
00:13:03.280 --> 00:13:03.530
Okay.
175

176
00:13:03.550 --> 00:13:09.040
Now without replacing that here, I'm just going to run this and see what the error is. Sometimes
176

177
00:13:09.040 --> 00:13:14.410
it's interesting, when you know that there is a problem with the code, just to run it anyway and see what
177

178
00:13:14.410 --> 00:13:16.150
the error message looks like.
178

179
00:13:16.150 --> 00:13:20.610
So this error message says not enough arguments for a format string.
179

180
00:13:20.620 --> 00:13:25.270
So here we say we want a string format and there are not enough arguments.
180

181
00:13:25.270 --> 00:13:29.540
That's referring to this fact here we're missing something here.
181

182
00:13:29.550 --> 00:13:32.900
So now I'm also going to try firstchar.
182

183
00:13:32.900 --> 00:13:35.970
So it looks like this but there's no parentheses around it.
183

184
00:13:36.410 --> 00:13:43.430
And we still get an error so we need to add parentheses in here like this.
184

185
00:13:44.760 --> 00:13:45.000
OK.
185

186
00:13:45.030 --> 00:13:47.560
But in fact we haven't really solve the problem.
186

187
00:13:47.580 --> 00:13:50.540
All we've done is put a space in front of everything.
187

188
00:13:50.580 --> 00:13:57.900
So what we need to do is say that the first character should be a space only if the number is greater
188

189
00:13:57.930 --> 00:13:59.310
than zero.
189

190
00:13:59.310 --> 00:14:10.770
So now I'm going to say if I is greater than zero then we say that firstchar gets replaced with empty.
190

191
00:14:10.770 --> 00:14:11.010
OK.
191

192
00:14:11.040 --> 00:14:13.110
So let's see how this looks.
192

193
00:14:13.120 --> 00:14:13.670
Mm hmm.
193

194
00:14:13.680 --> 00:14:15.870
And now it actually got worse.
194

195
00:14:15.870 --> 00:14:20.390
Now these negative numbers are offset even further to the right.
195

196
00:14:20.400 --> 00:14:23.260
So let's think about what I did wrong here.
196

197
00:14:23.430 --> 00:14:24.710
I hope you guessed it.
197

198
00:14:24.810 --> 00:14:29.850
I actually should have said less than zero and not greater than zero.
198

199
00:14:29.880 --> 00:14:36.360
So by default in the beginning of each iteration inside this loop, this variable firstchar gets
199

200
00:14:36.360 --> 00:14:37.900
set to a space.
200

201
00:14:38.010 --> 00:14:44.910
And then if this number in this range is less than zero, then I replace this variable firstchar with
201

202
00:14:45.300 --> 00:14:48.730
empty. You can see there's nothing in between these single quotes here.
202

203
00:14:48.750 --> 00:14:49.130
All right.
203

204
00:14:49.140 --> 00:14:57.850
And now we have completely solved this exercise. So I hope you enjoyed this video. You learned about the
204

205
00:14:57.850 --> 00:15:04.270
modulus, which is the remainder after division, you learned how to test whether a number is odd or even
205

206
00:15:04.330 --> 00:15:06.420
using the modulo operator,
206

207
00:15:06.520 --> 00:15:14.020
and I also walked you through a little bit of kind of real time programming and problem solving, that
207

208
00:15:14.020 --> 00:15:19.780
is to say I made some errors while programming and then I figured out how to debug those errors and
208

209
00:15:19.780 --> 00:15:20.920
how to fix them.
