WEBVTT
0
1
00:00:04.410 --> 00:00:11.580
When working with arithmetic operations in particular multiplication and addition, you often come across
1

2
00:00:11.580 --> 00:00:18.810
these three properties in algebra: the associative property the commutative property and the distributive
2

3
00:00:18.810 --> 00:00:20.070
property.
3

4
00:00:20.070 --> 00:00:26.490
In this video I'm going to give you a quick reminder of what these three properties mean and then when
4

5
00:00:26.490 --> 00:00:33.480
we switch to Python you will see how to use python as a tool to understand these properties.
5

6
00:00:33.480 --> 00:00:39.480
So let's begin with associative, not because it's the most important principle, but because it starts
6

7
00:00:39.480 --> 00:00:42.910
with an A and that's alphabetically the first in this list.
7

8
00:00:43.050 --> 00:00:48.200
So the associative rule basically says that you can move parentheses around wherever you want.
8

9
00:00:48.240 --> 00:00:53.250
It probably would be easier to remember if they would have called this the parentheses rule instead
9

10
00:00:53.250 --> 00:00:54.870
of the associative rule.
10

11
00:00:54.870 --> 00:01:01.980
But essentially this means that if we have two times the quantity three times four, I can move these
11

12
00:01:01.980 --> 00:01:08.910
parentheses around and put the parentheses around two times three and put four outside the parentheses.
12

13
00:01:08.910 --> 00:01:14.820
So these two expressions are the same and that you can see by evaluating them piecewise.
13

14
00:01:14.850 --> 00:01:18.160
So three times four is 12 two times three and six.
14

15
00:01:18.300 --> 00:01:23.790
And then you do this multiplication and this multiplication and you get twenty four in both ways.
15

16
00:01:23.790 --> 00:01:31.200
Now when you're working through principles in mathematics I find it useful to start with concrete examples,
16

17
00:01:31.200 --> 00:01:33.360
with actual numbers like this.
17

18
00:01:33.390 --> 00:01:39.210
However, it's always good to demonstrate these principles using more abstract mathematical approaches
18

19
00:01:39.600 --> 00:01:42.730
for example using variables, symbolic variables.
19

20
00:01:42.810 --> 00:01:49.410
And that's because when you have actual numbers like this you might run into some weird special cases
20

21
00:01:49.410 --> 00:01:51.810
that don't actually generalize.
21

22
00:01:51.810 --> 00:01:58.150
For example, if one of these numbers was a zero then the result is going to be zero equals zero.
22

23
00:01:58.440 --> 00:02:01.560
Even if the associative rule weren't true.
23

24
00:02:01.560 --> 00:02:06.540
So we want to make sure that this associative rule works and other principles in mathematics will work
24

25
00:02:07.080 --> 00:02:11.500
not just for these particular numbers but for any numbers in general.
25

26
00:02:11.520 --> 00:02:11.750
Okay.
26

27
00:02:11.760 --> 00:02:14.310
So therefore you replace the numbers with letters.
27

28
00:02:14.490 --> 00:02:17.690
And of course in this case you arrive at the same conclusion.
28

29
00:02:17.700 --> 00:02:25.830
So the associative rule is valid for algebra when these letters are corresponding to individual numbers.
29

30
00:02:26.450 --> 00:02:26.730
Okay.
30

31
00:02:26.760 --> 00:02:28.350
So that was the associative rule.
31

32
00:02:28.360 --> 00:02:31.720
It probably should be called the parentheses rule but whatever.
32

33
00:02:31.740 --> 00:02:38.190
Now we get to the commutative rule, and this basically means that you can swap the order of multiplication.
33

34
00:02:38.220 --> 00:02:45.630
So A times B is the same thing as B times A. The way that I remember the commutative rule or the commutative
34

35
00:02:45.630 --> 00:02:48.650
property is like you're going to a commute to work.
35

36
00:02:48.660 --> 00:02:53.580
So here you are at home and then you commute to work, and then you're at work and you can be home.
36

37
00:02:53.580 --> 00:02:58.180
I don't know if that's a good way to remember this property but that's what I use.
37

38
00:02:58.180 --> 00:03:05.790
And this also applies to more than two individual numbers so for example A times B times C equals
38

39
00:03:05.910 --> 00:03:11.460
B times A time C equals C times A times B. Basically you can swap around the order and as long as you're
39

40
00:03:11.460 --> 00:03:17.910
still doing multiplication, as long as these letters correspond to individual numbers, it's no problem
40

41
00:03:18.030 --> 00:03:19.350
whatsoever.
41

42
00:03:19.350 --> 00:03:25.620
Finally, we get to the distributive rule and that's where if you have some number that's multiplying
42

43
00:03:25.950 --> 00:03:32.460
the sum or the difference of two numbers in parentheses then you can distribute what's outside the parenthesis
43

44
00:03:32.460 --> 00:03:35.880
to what's to each of the terms inside the parentheses.
44

45
00:03:35.910 --> 00:03:43.890
So here x times the quantity y plus z equals X times Y plus X times z.
45

46
00:03:43.890 --> 00:03:50.250
So now let's switch to Python and I'm going to show you how to use the sympy toolbox to illustrate
46

47
00:03:50.310 --> 00:03:57.460
these principles. So we are certainly going to need the sympy module, so I'm going to start by importing
47

48
00:03:57.550 --> 00:03:59.140
this module here.
48

49
00:03:59.140 --> 00:03:59.340
All right.
49

50
00:03:59.350 --> 00:04:02.740
So let's start with the associative rule.
50

51
00:04:03.310 --> 00:04:13.270
So I'm going to create two expressions so expression 1 will be equal to how about X times four times
51

52
00:04:13.360 --> 00:04:22.600
Y and then I'm going to make expression to be the same letters and numbers but I'm going to move the parentheses
52

53
00:04:22.600 --> 00:04:29.460
around, so now it's going to be x times four in parentheses and then all of this business times Y.
53

54
00:04:29.530 --> 00:04:32.190
Now obviously that should be expression two.
54

55
00:04:32.230 --> 00:04:38.650
Now obviously when I run this code it's not going to work immediately and that's because I haven't defined
55

56
00:04:38.770 --> 00:04:40.720
X and I haven't defined y.
56

57
00:04:41.710 --> 00:04:45.780
So let's write from sympify dot
57

58
00:04:45.940 --> 00:04:49.440
A B C import X comma Y.
58

59
00:04:50.160 --> 00:04:50.380
Okay.
59

60
00:04:50.410 --> 00:04:52.750
So now we get these two expressions.
60

61
00:04:52.750 --> 00:04:56.710
And now how can we show that these two expressions are equal to each other?
61

62
00:04:56.710 --> 00:04:59.260
How can we show that these are the same thing?
62

63
00:04:59.260 --> 00:05:06.040
Well the idea here, which comes up often when trying to show equality in Python, is to assume,
63

64
00:05:06.070 --> 00:05:12.010
so we're going to start from an equation that looks like this: now this is actually not a piece of code
64

65
00:05:12.010 --> 00:05:16.660
that I want to run that's just going to overwrite expression one with expression two.
65

66
00:05:16.780 --> 00:05:19.170
I'm just illustrating a math expression.
66

67
00:05:19.180 --> 00:05:25.690
So if I want to show that these two expressions, these two sides of the equation, are equal to each other,
67

68
00:05:25.750 --> 00:05:32.440
one thing I can do is subtract them and then essentially I want to see that when I subtract them.
68

69
00:05:32.440 --> 00:05:35.170
The answer is zero.
69

70
00:05:35.170 --> 00:05:36.440
So let's do that.
70

71
00:05:36.460 --> 00:05:36.700
OK.
71

72
00:05:36.700 --> 00:05:40.010
So here I say expression 1 minus expression 2.
72

73
00:05:40.150 --> 00:05:45.620
And if the answer is zero then that means that these two are equal to each other.
73

74
00:05:45.640 --> 00:05:45.880
All right.
74

75
00:05:45.910 --> 00:05:47.590
So that was for associative.
75

76
00:05:47.770 --> 00:05:53.680
Let's go to commutative and here what I'm going to do is create three expressions.
76

77
00:05:53.890 --> 00:06:00.010
Also using x y and four I don't know why I'm having the number four here. It feels like a four day doesn't
77

78
00:06:00.010 --> 00:06:00.530
it?
78

79
00:06:00.650 --> 00:06:04.190
Actually I'm recording this on a Thursday and I think that is the fourth day of the week ;)
79

80
00:06:04.210 --> 00:06:15.370
So let's say e1 equals four times x times y. e2 equals, Let's go for X times four times Y and
80

81
00:06:15.370 --> 00:06:17.830
then E3 is what do we have here.
81

82
00:06:17.830 --> 00:06:20.090
So we haven't had Y in the first place.
82

83
00:06:20.090 --> 00:06:24.160
Yes let's do Y times x times four.
83

84
00:06:24.970 --> 00:06:25.270
Okay.
84

85
00:06:25.300 --> 00:06:29.660
So that also looks nice because you get the four is going down the diagonal like this.
85

86
00:06:29.680 --> 00:06:38.320
So what I want to do here is basically substitute for x and y, some different numbers and show that these
86

87
00:06:38.320 --> 00:06:42.880
three expressions all evaluate to the same number.
87

88
00:06:42.910 --> 00:06:46.850
So just a quick reminder about substitutions in sympy.
88

89
00:06:46.870 --> 00:06:50.350
So I can substitute e1 dot subs.
89

90
00:06:50.440 --> 00:06:56.460
That's the function that I'm calling -- a method inside this or associated with this e1 object, this
90

91
00:06:56.460 --> 00:07:02.770
sympy object. And then let's say I want to replace X with how about three.
91

92
00:07:02.770 --> 00:07:09.490
So now the answer is or the output is 12 y and that's because when you substitute X for three you get
92

93
00:07:09.490 --> 00:07:11.320
four times three is 12.
93

94
00:07:11.470 --> 00:07:16.790
And we still have a Y here because I haven't told sympy what to replace the Y with.
94

95
00:07:16.790 --> 00:07:23.240
Now if I want to replace both the x and the Y then I have to use what's called a dictionary.
95

96
00:07:23.530 --> 00:07:32.680
And the way that works here, the proper syntax, is to say X colon 3 and then Y colon whatever we want
96

97
00:07:32.680 --> 00:07:34.680
to substitute y with... how about 2.
97

98
00:07:35.210 --> 00:07:35.550
Okay.
98

99
00:07:35.560 --> 00:07:38.410
And now we get 24 and that also makes sense.
99

100
00:07:38.410 --> 00:07:45.850
We already saw that this was twelve when I substituted three for X and then 12 times two is twenty four.
100

101
00:07:45.850 --> 00:07:46.100
Okay.
101

102
00:07:46.120 --> 00:07:53.800
So now what I'm going to do is essentially print out all three of these equations with these numbers,
102

103
00:07:56.670 --> 00:08:04.320
and if these three expressions are equal to each other, then the three outputs resulting from these three
103

104
00:08:04.320 --> 00:08:09.240
different substitutions should also be equal to each other, which they are.
104

105
00:08:09.240 --> 00:08:16.560
Again, the idea is that I want to show you a few different ways of exploring mathematical concepts using
105

106
00:08:16.560 --> 00:08:17.230
Python.
106

107
00:08:17.250 --> 00:08:20.460
And in this case the sympy toolbox.
107

108
00:08:20.460 --> 00:08:22.120
All right so let's move on.
108

109
00:08:22.230 --> 00:08:27.990
We next have the distributive rule. So the distributive property actually.
109

110
00:08:28.050 --> 00:08:38.490
So here is what I want to do is create an expression that is A plus B times C plus D.
110

111
00:08:38.490 --> 00:08:42.890
Now of course I haven't created any of these variables yet, and I want these to be symbolic variables.
111

112
00:08:42.900 --> 00:08:47.970
So let's say A B C D equals sym
112

113
00:08:47.980 --> 00:08:52.550
dot symbols a comma B comma C comma D.
113

114
00:08:52.710 --> 00:08:58.470
So you can see that sometimes I use this syntax for creating symbolic variables and sometimes I use
114

115
00:08:58.590 --> 00:08:59.860
this syntax.
115

116
00:08:59.910 --> 00:09:07.320
In truth, I actually prefer using this syntax because this is also useful for creating longer named variables,
116

117
00:09:07.320 --> 00:09:14.280
let's say if I wanted to create a symbolic variable called Mike. But it's good to be familiar with various
117

118
00:09:14.520 --> 00:09:17.420
syntaxes and formatting in Python anyway.
118

119
00:09:17.430 --> 00:09:20.150
So here we have our expression.
119

120
00:09:20.150 --> 00:09:23.760
Now let's see what this expression looks like.
120

121
00:09:23.760 --> 00:09:26.320
So in fact this is literally just exactly what I wrote.
121

122
00:09:26.550 --> 00:09:28.850
But what I want to try now is expanding this.
122

123
00:09:28.880 --> 00:09:39.540
So sympy dot expand expression, and now the sympy module is expanding this so it does the a times
123

124
00:09:39.540 --> 00:09:44.960
C and the a times D and then B times C and B times D.
124

125
00:09:45.870 --> 00:09:51.090
Okay so this highlights the distributive rule, and actually the way that I showed it in these slides
125

126
00:09:51.150 --> 00:09:52.490
was slightly simpler.
126

127
00:09:52.550 --> 00:09:59.190
I had it just with one term over here on the left and here you can see that when sympy expands this
127

128
00:09:59.250 --> 00:10:09.920
expression, he writes out a times C plus a times D. So here is the exercise for this video.
128

129
00:10:09.920 --> 00:10:16.910
Here you see two equations, two expressions: F one equals this thing and F two equals this thing.
129

130
00:10:16.910 --> 00:10:19.010
Now what is x and y and z.
130

131
00:10:19.040 --> 00:10:29.300
So the idea here is that y and z are variables and X is itself a function of some other variable w.
131

132
00:10:29.300 --> 00:10:35.780
So what you want to do in this exercise is implement these expressions in Python and then you want to
132

133
00:10:35.780 --> 00:10:38.930
display and simplify f1 times F2.
133

134
00:10:38.930 --> 00:10:43.010
So basically multiply these two equations by each other.
134

135
00:10:43.010 --> 00:10:47.390
And when you're finished with that, then you can show that the commutative property holds.
135

136
00:10:47.390 --> 00:10:53.720
In this case and you can use some of the tools that I showed you how to use in this video.
136

137
00:10:53.720 --> 00:10:54.010
All right.
137

138
00:10:54.020 --> 00:10:57.170
So I hope you've paused the video and had a go at this.
138

139
00:10:57.170 --> 00:11:04.290
I'm now going to switch to Python and show you how I would approach solving a problem like this.
139

140
00:11:04.330 --> 00:11:07.360
Okay so let's start by creating the variables that we need.
140

141
00:11:07.360 --> 00:11:13.490
So we need X Y and Z and X was a function of W so we also need that.
141

142
00:11:13.490 --> 00:11:22.310
So let's say sym dot symbols, and then we need X Y Z W and here I'm even using another slightly different
142

143
00:11:22.310 --> 00:11:25.940
notation compared to how I created these symbolic variables here.
143

144
00:11:26.060 --> 00:11:29.960
Just showing you that you don't actually need these commas in here.
144

145
00:11:30.110 --> 00:11:30.340
Okay.
145

146
00:11:30.380 --> 00:11:35.140
So I'm going to start by writing out X. So x equals...
146

147
00:11:35.390 --> 00:11:47.260
this was w times four minus W plus one over w squared times one plus W.
147

148
00:11:47.540 --> 00:11:58.250
Okay so that was X and then we had f1, and that was equal to x times Y plus z. By the way,
148

149
00:11:58.250 --> 00:12:01.440
notice an interesting programming concept here.
149

150
00:12:01.580 --> 00:12:08.300
So I created one variable X to be a function of W and now I'm using that variable X to create this other
150

151
00:12:08.300 --> 00:12:10.040
expression f1.
151

152
00:12:10.160 --> 00:12:17.840
So python is going to know that when he's there when it runs across X here then this one letter here
152

153
00:12:17.880 --> 00:12:22.530
needs to be replaced by this entire expression here.
153

154
00:12:22.530 --> 00:12:30.400
Okay so that was f1 and then f2 was 3 divided by X plus X squared.
154

155
00:12:31.100 --> 00:12:33.780
So run this cell make sure we don't get any errors.
155

156
00:12:33.860 --> 00:12:35.410
So this is all fine.
156

157
00:12:35.630 --> 00:12:41.360
And now what I want to do is display some of these things, so the first thing we had to do was display
157

158
00:12:41.440 --> 00:12:44.210
F1 times F2.
158

159
00:12:44.210 --> 00:12:48.050
And this is just a lot of letters and symbols.
159

160
00:12:48.050 --> 00:12:50.550
This is really hard to visually interpret.
160

161
00:12:50.840 --> 00:12:56.840
So what I'm going to do is activate the display and math functions.
161

162
00:12:57.290 --> 00:13:06.450
So that was from IPython dot display import display and math.
162

163
00:13:06.640 --> 00:13:15.020
OK so now I need to say display and then math and then since that latex to convert this expression from
163

164
00:13:15.080 --> 00:13:21.740
a sympy object into latex code, and that goes into the math function and that goes into the display
164

165
00:13:21.740 --> 00:13:24.160
function and then we get this.
165

166
00:13:24.170 --> 00:13:27.530
Now this is still quite a quite an eyeful.
166

167
00:13:27.530 --> 00:13:29.870
This is quite a long expression.
167

168
00:13:29.990 --> 00:13:33.830
I wonder if we can simplify this expression. Let's see.
168

169
00:13:33.830 --> 00:13:42.440
I'm going to copy and then paste this code. And now before putting this sympy object into latex.
169

170
00:13:42.440 --> 00:13:45.230
I'm going to see if I can simplify it at all.
170

171
00:13:46.130 --> 00:13:50.870
Well actually what I'm going to see is whether Python can simplify this.
171

172
00:13:51.740 --> 00:13:52.070
All right.
172

173
00:13:52.100 --> 00:13:54.730
So we get a slightly different answer.
173

174
00:13:54.740 --> 00:14:00.080
Well, it's the same answer of course; it's the same expression, but it is a little bit simplified it still
174

175
00:14:00.500 --> 00:14:07.840
is quite a lot going on here. But at least it's easier to look at than this really long expression.
175

176
00:14:07.850 --> 00:14:13.280
Okay so what we want to do now is show that the commutative property holds and the commutative property
176

177
00:14:14.300 --> 00:14:21.220
is that f1 times F2 equals F2 times F1.
177

178
00:14:21.230 --> 00:14:23.000
So how can we go about doing this?
178

179
00:14:23.000 --> 00:14:35.150
I think the way that I'm going to implement this is by writing out F1 times F2 minus F2 times
179

180
00:14:35.270 --> 00:14:36.740
F1.
180

181
00:14:36.740 --> 00:14:44.150
And again, the idea is that if these two expressions are equal to each other, then when I subtract them
181

182
00:14:44.240 --> 00:14:46.770
I should get a result of zero.
182

183
00:14:46.790 --> 00:14:49.480
And so that's the idea here.
183

184
00:14:49.520 --> 00:14:49.920
All right.
184

185
00:14:49.940 --> 00:14:52.130
And we do in fact get zero.
185

186
00:14:52.310 --> 00:15:00.720
And that means that Python is telling us that f1 times F2 is the same thing as F2 times F1.
186

187
00:15:00.740 --> 00:15:09.370
So in this video you got a review or reminder of the these three important properties in algebra and
187

188
00:15:09.370 --> 00:15:15.580
you saw a little bit more detail in Python about how to check for equality of expressions.
