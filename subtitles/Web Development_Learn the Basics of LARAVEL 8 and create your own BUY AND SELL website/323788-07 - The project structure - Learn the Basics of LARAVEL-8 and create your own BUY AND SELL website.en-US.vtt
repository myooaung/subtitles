WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.780
So the weight is finally over all the boring SATA,

00:00:03.780 --> 00:00:08.745
but it is states are complete and we are all set to start writing code.

00:00:08.745 --> 00:00:11.940
But before we start writing our own code,

00:00:11.940 --> 00:00:16.545
I'll walk you through the important components of a larval project.

00:00:16.545 --> 00:00:19.290
Here inside the project directory,

00:00:19.290 --> 00:00:22.050
we have multiple folders and files.

00:00:22.050 --> 00:00:23.415
And first of all,

00:00:23.415 --> 00:00:28.545
I would want you to take a look at this file named dot ENV.

00:00:28.545 --> 00:00:33.900
This file is used to define some common configurations for the project.

00:00:33.900 --> 00:00:38.190
We define configuration related values here in this file,

00:00:38.190 --> 00:00:41.335
like the information related to database connection.

00:00:41.335 --> 00:00:48.600
These values are accessed from the configuration files that are inside the config folder.

00:00:49.690 --> 00:00:52.580
All of the configuration files of

00:00:52.580 --> 00:00:57.380
the larval framework are stored inside this config folder.

00:00:57.380 --> 00:01:02.975
You will find some general configurations like the website name and URL, etc.

00:01:02.975 --> 00:01:05.435
In this file, App.js PHP.

00:01:05.435 --> 00:01:12.080
Similarly, the database dot PHP file contains data was related configuration values.

00:01:12.080 --> 00:01:18.140
In this files, you will find calls to a function called ENV.

00:01:18.140 --> 00:01:23.795
These are made to access the values of the dot PNG file.

00:01:23.795 --> 00:01:30.380
The first argument corresponds to the name of the configuration of the dot ENV file.

00:01:30.380 --> 00:01:34.250
And the second argument is a default value.

00:01:34.250 --> 00:01:40.520
If you remove this ENV function calls and air actual values here itself,

00:01:40.520 --> 00:01:42.095
then also it will work,

00:01:42.095 --> 00:01:44.795
but it is much more convenient to have

00:01:44.795 --> 00:01:49.565
a single place for specifying all the configuration values.

00:01:49.565 --> 00:01:52.760
Thus, we have the dot ENV file and we sell make changes to

00:01:52.760 --> 00:01:57.540
the configuration values of the file as and when we need.

00:02:02.020 --> 00:02:07.655
Now let us talk about the layouts or the user interface of the website.

00:02:07.655 --> 00:02:10.820
Defiles responsible for the layouts of

00:02:10.820 --> 00:02:14.870
the pages have to be kept inside this folder views,

00:02:14.870 --> 00:02:17.510
which is inside the folder Resources.

00:02:17.510 --> 00:02:20.750
And currently we have only one view here

00:02:20.750 --> 00:02:25.010
as the default wave set has only one symbol page.

00:02:25.010 --> 00:02:26.585
Notice the filename.

00:02:26.585 --> 00:02:29.540
It is welcomed blade dot PHP.

00:02:29.540 --> 00:02:35.525
They extensive blade dot PHP is used to indicate debt.

00:02:35.525 --> 00:02:38.195
Blade templating has been used.

00:02:38.195 --> 00:02:43.805
We shall learn more about Blade templates where we start creating the layers of our own.

00:02:43.805 --> 00:02:49.790
Inside this file, you will find some HTML and some CSS use for creating the homepage.

00:02:49.790 --> 00:02:55.460
We say that right, our CSS styles inside this folder called CSS inside

00:02:55.460 --> 00:03:01.910
the resources and the js inside the resources less JS folder.

00:03:01.910 --> 00:03:05.795
This Resources folder also has a folder

00:03:05.795 --> 00:03:10.370
called lang to contain all the language related files.

00:03:10.370 --> 00:03:14.630
But we are not concerned about them at this moment.

00:03:14.630 --> 00:03:20.060
For this project, the files

00:03:20.060 --> 00:03:25.639
inside the folder resources less views are the views or the layouts.

00:03:25.639 --> 00:03:29.660
These files are responsible only for the user-interface.

00:03:29.660 --> 00:03:32.270
They know nothing about the business logic.

00:03:32.270 --> 00:03:35.630
They don't know where to get data from.

00:03:35.630 --> 00:03:40.475
They are unaware of the database and the other backend related stuff.

00:03:40.475 --> 00:03:45.050
The data to be displayed is simply passed to these views.

00:03:45.050 --> 00:03:49.190
But how do we get the data from the database?

00:03:49.190 --> 00:03:53.060
For debt we have models and larval by

00:03:53.060 --> 00:03:57.065
default includes an object relational mapper called eloquent.

00:03:57.065 --> 00:03:59.810
Eloquent models have magical powers.

00:03:59.810 --> 00:04:04.700
Let us take a look at one that comes inbuilt with the project.

00:04:04.700 --> 00:04:06.920
Go to this directory app,

00:04:06.920 --> 00:04:10.820
then models and open the file user dot PHP.

00:04:10.820 --> 00:04:18.815
This is a model that is responsible for interacting with the users table of our database.

00:04:18.815 --> 00:04:22.910
You won't see much code inside such a class,

00:04:22.910 --> 00:04:26.915
but you will be surprised to know the capabilities of these models.

00:04:26.915 --> 00:04:31.790
Using a model, we can read the data from the corresponding table of the database.

00:04:31.790 --> 00:04:33.755
Add a new items are date,

00:04:33.755 --> 00:04:36.980
add existing items, and also delete items from the table.

00:04:36.980 --> 00:04:43.020
We shall explore more about the models when we create our own.

00:04:49.770 --> 00:04:52.570
Now we have the mothers to interact with

00:04:52.570 --> 00:04:56.410
the database and views to interact with the users.

00:04:56.410 --> 00:05:00.430
We can call the function all on a model

00:05:00.430 --> 00:05:05.120
to get all the items from the corresponding table of the database.

00:05:05.130 --> 00:05:09.460
But we don't write this model related codes inside

00:05:09.460 --> 00:05:14.410
a few data to be displayed should be passed directly to the view.

00:05:14.410 --> 00:05:16.090
Now the question comes,

00:05:16.090 --> 00:05:19.675
where to write the code for database requests?

00:05:19.675 --> 00:05:22.870
And the answer is, inside a controller.

00:05:22.870 --> 00:05:27.130
A controller sits in-between a model and view.

00:05:27.130 --> 00:05:33.950
It fetches data from the database using immoral and passes it to the concern for you.

00:05:34.060 --> 00:05:39.260
If you interacts with the user and passes the user inputs to

00:05:39.260 --> 00:05:44.570
the controller and the controller takes the action as party request.

00:05:44.570 --> 00:05:50.135
And this access often involve a model to interact with the database.

00:05:50.135 --> 00:05:54.590
And there is a folder named controllers inside App.

00:05:54.590 --> 00:06:01.680
Then default STDP, where we have to keep all our controllers.

00:06:06.520 --> 00:06:10.219
Now we have diffused for user interactions,

00:06:10.219 --> 00:06:13.355
model for the interactions with the database,

00:06:13.355 --> 00:06:19.280
and then the controllers for the interaction between the views and the models.

00:06:19.280 --> 00:06:23.945
We write functions for different tasks inside a controller.

00:06:23.945 --> 00:06:26.630
For example, we will have a function to retrieve

00:06:26.630 --> 00:06:29.780
the list of products and other to retrieve

00:06:29.780 --> 00:06:31.985
the details of a particular product by

00:06:31.985 --> 00:06:37.400
ID and functions for deleting or updating a product, etc.

00:06:37.400 --> 00:06:38.990
Now the question is,

00:06:38.990 --> 00:06:41.870
how do we invoke this function?

00:06:41.870 --> 00:06:45.140
For example, on clicking an item on the list of products

00:06:45.140 --> 00:06:49.955
we sell called the controller function for product details.

00:06:49.955 --> 00:06:51.545
And we do that,

00:06:51.545 --> 00:06:53.480
we'd help of roots.

00:06:53.480 --> 00:07:02.000
Roots are used to route the ACDP requests to the code that handles them.

00:07:03.480 --> 00:07:08.530
You will find a folder named routes to keep all the root files.

00:07:08.530 --> 00:07:10.540
Currently there are four files,

00:07:10.540 --> 00:07:12.460
but for this project,

00:07:12.460 --> 00:07:17.185
we are concerned only with the root file named web dot PHP.

00:07:17.185 --> 00:07:22.090
This is where we have to define all the routes for our website.

00:07:22.090 --> 00:07:27.760
If you open the file web dot PHP will find that one root is already defined in the file.

00:07:27.760 --> 00:07:31.255
This is what the homepage of the website.

00:07:31.255 --> 00:07:35.500
When we enter the URL DNS dot go on the browser.

00:07:35.500 --> 00:07:41.330
This roots comes into action and loads the view named welcome.

00:07:41.330 --> 00:07:46.250
But you may notice that no controller is accessed here.

00:07:46.250 --> 00:07:47.510
Confused.

00:07:47.510 --> 00:07:52.920
Don't worry, I will clear all your confusion in the upcoming videos.

00:07:54.310 --> 00:07:59.434
There are a few more directories in the project that we sell access

00:07:59.434 --> 00:08:04.430
during the course and I'll explain their purpose when we use them.

00:08:04.430 --> 00:08:08.615
For example, in the next video itself, while implementing authentication,

00:08:08.615 --> 00:08:14.610
I will introduce you to the Migrations folder that is inside the database folder.
