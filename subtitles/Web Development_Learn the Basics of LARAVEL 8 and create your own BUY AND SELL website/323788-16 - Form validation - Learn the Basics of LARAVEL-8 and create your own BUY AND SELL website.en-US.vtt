WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:04.490 --> 00:00:09.780
As we have created the table for storing the information of the products on

00:00:09.780 --> 00:00:14.820
our database and also created the model to interact with this table.

00:00:14.820 --> 00:00:18.180
Now we have to create the controller to

00:00:18.180 --> 00:00:22.350
handle the request of adding a product to the database.

00:00:22.350 --> 00:00:29.070
And this request will be made when a user submits the form for adding a product.

00:00:29.070 --> 00:00:31.500
To add a product to the database.

00:00:31.500 --> 00:00:34.185
First we have to validate the user inputs.

00:00:34.185 --> 00:00:37.450
Then we have to upload the image of the product.

00:00:37.450 --> 00:00:43.640
And finally, we have to store the information of the product on the products table.

00:00:43.640 --> 00:00:47.000
In this video, I'll show you how to

00:00:47.000 --> 00:00:50.675
complete the first task of validating the user inputs.

00:00:50.675 --> 00:00:53.645
And this involves four main steps.

00:00:53.645 --> 00:00:57.240
First, creating a controller,

00:00:57.310 --> 00:01:01.970
then creating a function store inside the controller,

00:01:01.970 --> 00:01:06.230
then creating a route to handle the form submission request.

00:01:06.230 --> 00:01:13.950
And finally, adding the validation rules inside the store function of the controller.

00:01:22.920 --> 00:01:26.860
So first of all, let us create a controller with

00:01:26.860 --> 00:01:31.060
the command PHP artisan make column controller,

00:01:31.060 --> 00:01:34.539
and then the name of the controller,

00:01:34.539 --> 00:01:38.754
let us call our controller products controller.

00:01:38.754 --> 00:01:43.120
This creates a new file named products controller dot

00:01:43.120 --> 00:01:49.010
PHP inside the folder apps less HTTP controllers.

00:01:54.390 --> 00:01:56.590
Now open this file.

00:01:56.590 --> 00:01:59.095
Currently, it does not have much code.

00:01:59.095 --> 00:02:02.910
There is a class named products controller debt extents.

00:02:02.910 --> 00:02:04.550
The class controller.

00:02:04.550 --> 00:02:09.150
All the controllers extends this class controller.

00:02:13.630 --> 00:02:18.260
Let us add a function here, name it store.

00:02:18.260 --> 00:02:21.365
We shall add a parameter of type request.

00:02:21.365 --> 00:02:27.305
This request class is used to interact with the current HTTP request.

00:02:27.305 --> 00:02:32.450
We can retrieve the input values from the instance of this class.

00:02:32.450 --> 00:02:36.860
So whatever information the user enters through the form,

00:02:36.860 --> 00:02:42.300
we can get those from the instance of this class request.

00:02:43.060 --> 00:02:49.325
Inside this function, we sell access the input from the request object and validate them.

00:02:49.325 --> 00:02:50.990
Then we sell, upload the image.

00:02:50.990 --> 00:02:56.130
And finally we sell, insert the information of the product into the products table.

00:03:00.600 --> 00:03:03.160
But before doing that,

00:03:03.160 --> 00:03:08.035
let us add a route for making the form submission request. For that.

00:03:08.035 --> 00:03:12.955
First, open the file web dot PHP inside the routes folder.

00:03:12.955 --> 00:03:15.175
Create a route using the class root,

00:03:15.175 --> 00:03:16.420
the way we did before,

00:03:16.420 --> 00:03:21.490
but this time we have to use the function post instead of gate.

00:03:21.490 --> 00:03:26.210
As we sell, make a post request to submit the data.

00:03:28.110 --> 00:03:32.380
Add the name of the route to the first parameter.

00:03:32.380 --> 00:03:35.140
Let's name it less product.

00:03:35.140 --> 00:03:38.230
Now, if you're thinking about whether it will

00:03:38.230 --> 00:03:41.485
work as we have already used the name product.

00:03:41.485 --> 00:03:48.320
Then I'll say that you don't need to worry as the functions used are different.

00:03:48.320 --> 00:03:51.680
They represent two different routes.

00:03:51.680 --> 00:03:54.110
And to the second parameter,

00:03:54.110 --> 00:03:56.600
instead of this anonymous function,

00:03:56.600 --> 00:04:03.660
we shall pass the store function of the controller class that we have created just now.

00:04:08.560 --> 00:04:15.275
Now append these view the file slave sale dot plate dot PHP.

00:04:15.275 --> 00:04:20.820
Pass the root name to the attribute action of the form.

00:04:28.480 --> 00:04:32.915
Now if you reload the page and submit the form,

00:04:32.915 --> 00:04:38.375
you'll get an error like Target class controller does not exist.

00:04:38.375 --> 00:04:41.825
This is because we forgot to include

00:04:41.825 --> 00:04:47.210
the products controller class inside the web dot PHP file.

00:04:47.210 --> 00:04:54.425
Let's fix this. At this line at the top of the root file.

00:04:54.425 --> 00:04:56.615
Use App.

00:04:56.615 --> 00:05:01.230
Http controller's products controller.

00:05:02.650 --> 00:05:05.585
Now if you try to submit the form,

00:05:05.585 --> 00:05:07.520
you won't get any errors.

00:05:07.520 --> 00:05:11.240
Now to verify that the store method of

00:05:11.240 --> 00:05:16.730
the products controller is getting called inside the function.

00:05:16.730 --> 00:05:18.965
Add an eco statement.

00:05:18.965 --> 00:05:24.150
I'll add a string inside products controller store.

00:05:28.000 --> 00:05:31.670
Now reload the product ad form,

00:05:31.670 --> 00:05:34.040
enter some data and submit it.

00:05:34.040 --> 00:05:36.920
You will see the string is getting printed.

00:05:36.920 --> 00:05:39.620
And it verifies that the functions tour of

00:05:39.620 --> 00:05:44.670
the products controller is being called on submitting the form.

00:05:55.260 --> 00:05:59.860
Now we can start writing the code inside the store function.

00:05:59.860 --> 00:06:02.500
Let us start with the validation logic.

00:06:02.500 --> 00:06:04.195
To validate the fields,

00:06:04.195 --> 00:06:06.490
we shall call the function validate of

00:06:06.490 --> 00:06:12.820
the request object and pass an array of validation rules to it.

00:06:12.820 --> 00:06:17.620
I sell add a few extremely simple villi decision rules.

00:06:17.620 --> 00:06:19.270
Notice the syntax.

00:06:19.270 --> 00:06:24.340
Add the name of the field as part of the form. Inside quote.

00:06:24.340 --> 00:06:28.630
I'll open the sale view side-by-side for reference and

00:06:28.630 --> 00:06:33.765
then add the fat arrow and after debt at the rule inside the code,

00:06:33.765 --> 00:06:40.290
you will find all the available validation rules on the larval documentation.

00:06:42.040 --> 00:06:48.695
Go to the Basic click on validation and on this page,

00:06:48.695 --> 00:06:52.230
click on Available validation rules.

00:06:55.600 --> 00:07:02.820
So here basically let us make all the fields compulsory by adding the rule required.

00:07:05.590 --> 00:07:08.600
And for the field price,

00:07:08.600 --> 00:07:15.800
we sell add one more rule named numeric to ensure the price entered is a number.

00:07:15.800 --> 00:07:17.480
To add multiple rules,

00:07:17.480 --> 00:07:20.910
we have to use this pipe symbol.

00:07:32.620 --> 00:07:38.195
If no error occurs during validation, then execution continues.

00:07:38.195 --> 00:07:40.340
But if some error occurs,

00:07:40.340 --> 00:07:42.365
it will stop executing

00:07:42.365 --> 00:07:46.445
the controller function and redirect the user to the previous location.

00:07:46.445 --> 00:07:50.090
In our case, the product upload form.

00:07:50.090 --> 00:07:56.375
And the errors can be accessed using the variable error inside the views.

00:07:56.375 --> 00:08:00.200
The variable error available to all the views by default.

00:08:00.200 --> 00:08:01.760
So to display the errors,

00:08:01.760 --> 00:08:06.620
we can simply check if there are any errors using the function,

00:08:06.620 --> 00:08:08.705
any, any blood directive.

00:08:08.705 --> 00:08:10.110
If.

00:08:16.810 --> 00:08:22.955
So, if there are errors then using the for each loop we can iterate through

00:08:22.955 --> 00:08:30.900
the errors contained inside this variable error and print all layers.

00:08:32.260 --> 00:08:40.709
We can get all the errors by calling this function all on this error instance.

00:08:52.770 --> 00:08:56.380
Now reload the page and submit the form without

00:08:56.380 --> 00:09:00.830
entering all the inputs and you will see the errors.

00:09:04.290 --> 00:09:08.650
Now if you need to validate some complex scenarios and

00:09:08.650 --> 00:09:12.205
need more flexibility in defining the villages and logic,

00:09:12.205 --> 00:09:15.685
then you can create a custom form requests class.

00:09:15.685 --> 00:09:18.325
But we are not going Dad deep now,

00:09:18.325 --> 00:09:21.430
we shall try to replace the field names in

00:09:21.430 --> 00:09:26.090
the error messages with some nicer names in a very simple way.

00:09:26.090 --> 00:09:32.400
Add two empty areas as the second third argument to the validate function.

00:09:32.410 --> 00:09:37.055
Keep the airway of the second argument is empty for now and

00:09:37.055 --> 00:09:41.675
adds the mappings of the names in the area of the tide argument.

00:09:41.675 --> 00:09:44.900
This syntax is similar to that of the rules.

00:09:44.900 --> 00:09:47.060
Add the name of the input field,

00:09:47.060 --> 00:09:50.300
then the arrow and to the right of the arrow add didn't

00:09:50.300 --> 00:09:55.079
name that you want to display on the message.

00:09:56.200 --> 00:10:01.889
Reload the page, and submit the form to notice the changes.

00:10:10.980 --> 00:10:16.525
Now you might be already getting curious about this second argument.

00:10:16.525 --> 00:10:22.210
Using this array, you can customize the complete message to be displayed.

00:10:22.210 --> 00:10:24.445
Following this similar syntax,

00:10:24.445 --> 00:10:27.340
add a dot next to the name of the field,

00:10:27.340 --> 00:10:35.120
and then add the rule and to the right of the arrow at the message to be displayed.

00:10:36.900 --> 00:10:41.395
So 41st rule titled dot required.

00:10:41.395 --> 00:10:44.395
I'll add, please enter it either.

00:10:44.395 --> 00:10:48.765
If the user does not enter a short description,

00:10:48.765 --> 00:10:53.580
then we shall display Please enter a short description.

00:10:54.130 --> 00:10:57.470
If the complete description is missing,

00:10:57.470 --> 00:10:59.030
the full description is missing,

00:10:59.030 --> 00:11:00.770
then we sell Display.

00:11:00.770 --> 00:11:03.540
Please enter in full description.

00:11:04.930 --> 00:11:10.260
For the price. Please enter the product price.

00:11:10.330 --> 00:11:17.825
And we sell add another masses for the other rule, price dot numeric.

00:11:17.825 --> 00:11:22.280
If the user enters a non-numeric price, then we sell display.

00:11:22.280 --> 00:11:24.395
The price should be a number.

00:11:24.395 --> 00:11:28.130
And finally, foreign missing image we sell display the messages.

00:11:28.130 --> 00:11:30.990
Please upload an image.

00:11:31.060 --> 00:11:34.850
Now submit the form without any input hand,

00:11:34.850 --> 00:11:37.475
you will see something like this one.

00:11:37.475 --> 00:11:43.520
Some beautiful messages. Now fill up,

00:11:43.520 --> 00:11:48.785
deform completely, correctly which numeric prize and submit,

00:11:48.785 --> 00:11:50.870
and you will get no errors.

00:11:50.870 --> 00:11:53.375
So we listen is successful.

00:11:53.375 --> 00:11:57.630
Now let's proceed to upload the product image.
