WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.140 --> 00:00:03.420
We have created the view to display a product list,

00:00:03.420 --> 00:00:05.610
but it displays some static content.

00:00:05.610 --> 00:00:08.805
We have created the view for the details of your product,

00:00:08.805 --> 00:00:11.730
but this to display some dummy content as we

00:00:11.730 --> 00:00:14.880
have not added any product to the database yet.

00:00:14.880 --> 00:00:18.780
We have created the form to submit an ad for a product,

00:00:18.780 --> 00:00:22.155
but we have not written the code to insert a product into data,

00:00:22.155 --> 00:00:25.840
the database, which I'll do that now.

00:00:26.630 --> 00:00:32.880
First we sell create a migration to create a table for the product ads,

00:00:32.880 --> 00:00:36.164
which will create a model to interact with the database.

00:00:36.164 --> 00:00:39.990
Then we said create a controller to handle the HTTP request.

00:00:39.990 --> 00:00:44.090
And finally we sell create a route to make the request,

00:00:44.090 --> 00:00:47.120
to submit the data to the database.

00:00:47.120 --> 00:00:50.120
In this video, I'll show you the first two steps,

00:00:50.120 --> 00:00:52.790
creating the database migration and creating the model.

00:00:52.790 --> 00:00:56.075
And we shall run the migration after writing it.

00:00:56.075 --> 00:00:57.800
So by the end of this video,

00:00:57.800 --> 00:01:02.670
we'll have a new table name products in our database.

00:01:04.240 --> 00:01:08.720
We can create a migration with help of this artisan command,

00:01:08.720 --> 00:01:11.675
PHP artisan make migration.

00:01:11.675 --> 00:01:13.415
And then the name,

00:01:13.415 --> 00:01:15.620
a descriptive name, has to be given.

00:01:15.620 --> 00:01:24.180
This will add a migration file named the given name in the folder Database Migration.

00:01:27.480 --> 00:01:32.050
We can also create a migration while creating a model.

00:01:32.050 --> 00:01:36.685
The command for creating a model is PSP ART SYM-Q model,

00:01:36.685 --> 00:01:38.770
then the name of the model.

00:01:38.770 --> 00:01:43.030
If we add dash m to this command,

00:01:43.030 --> 00:01:45.460
it will create a migration element of the model.

00:01:45.460 --> 00:01:47.170
Let's try this.

00:01:47.170 --> 00:01:52.030
We are going to create a model to represent an ad for a product.

00:01:52.030 --> 00:01:55.360
Or we can say to represent a product itself.

00:01:55.360 --> 00:01:57.835
So let's name it product.

00:01:57.835 --> 00:02:00.040
Let's run the command PHP,

00:02:00.040 --> 00:02:03.190
artisan make model product,

00:02:03.190 --> 00:02:08.995
and then add deaths M to create the corresponding migration.

00:02:08.995 --> 00:02:12.730
Now we can see that a new file named product dot

00:02:12.730 --> 00:02:17.605
PHP has been added to the folder apps less models.

00:02:17.605 --> 00:02:21.609
We shall explore this file later, but now,

00:02:21.609 --> 00:02:26.829
let's focus on the other file added inside the folder database.

00:02:26.829 --> 00:02:30.475
Migrations. Notice the name of the file.

00:02:30.475 --> 00:02:36.500
This automatically created name2 explains the purpose of the file.

00:02:39.420 --> 00:02:44.620
Now we have to define the schema for the table products where we sell,

00:02:44.620 --> 00:02:47.920
we storing the information of the products.

00:02:47.920 --> 00:02:52.819
A class for a migration extends the class migration.

00:02:52.819 --> 00:02:54.980
And as we have explored earlier,

00:02:54.980 --> 00:02:59.390
a migration contains two functions up and down.

00:02:59.390 --> 00:03:02.600
We shall write this schema inside the function and we

00:03:02.600 --> 00:03:06.185
sell drop the table inside the down function.

00:03:06.185 --> 00:03:10.010
To define the schema for the products table,

00:03:10.010 --> 00:03:13.589
we shall use this schema builder schema.

00:03:13.690 --> 00:03:15.860
To create a table,

00:03:15.860 --> 00:03:20.225
we have to use the function create of the schema builder.

00:03:20.225 --> 00:03:22.235
And to drop a table,

00:03:22.235 --> 00:03:25.565
we have to call drop if Xist,

00:03:25.565 --> 00:03:29.370
as we can see in the default code,

00:03:33.750 --> 00:03:38.230
we have to pass two arguments to this create function.

00:03:38.230 --> 00:03:40.750
First is the name of the table here as

00:03:40.750 --> 00:03:44.215
the migration God created along with the model product.

00:03:44.215 --> 00:03:51.470
By convention, the plural form of the model name is added as the name of the table.

00:03:55.200 --> 00:03:59.530
And the second parameter is a function depth gates.

00:03:59.530 --> 00:04:06.715
An instance of the class blueprint debt can be used to define the fields of the table.

00:04:06.715 --> 00:04:11.050
Two fields are defined by default in the existing code.

00:04:11.050 --> 00:04:16.190
Now let us add other fields for the products table.

00:04:17.190 --> 00:04:23.500
This Blueprint Class has different functions corresponding to the different types.

00:04:23.500 --> 00:04:25.299
For the columns.

00:04:25.299 --> 00:04:28.960
We sell add a column of type string for the product title.

00:04:28.960 --> 00:04:33.100
So let's call the function string on the instance

00:04:33.100 --> 00:04:38.390
of Blueprint and pass the name of the column to it.

00:04:42.030 --> 00:04:45.265
We have to create a few more columns.

00:04:45.265 --> 00:04:50.620
One of type string for the SWOT description, 140 long description.

00:04:50.620 --> 00:04:52.570
The description may get a little longer.

00:04:52.570 --> 00:04:54.475
So let's call long text.

00:04:54.475 --> 00:04:56.530
Instead of the function string.

00:04:56.530 --> 00:05:00.550
One more string type column 40, product, price.

00:05:00.550 --> 00:05:05.890
And finally, let's add a column to hold the user ID of this sailor.

00:05:05.890 --> 00:05:12.564
We sell, make it big in desert and name the column UserID.

00:05:12.564 --> 00:05:17.720
There is a reason behind this mean that I'll tell you later.

00:05:20.220 --> 00:05:24.130
Now let us run the migrations. For that.

00:05:24.130 --> 00:05:28.430
We have to run the command PSP, artisan migrate.

00:05:32.220 --> 00:05:37.345
And if you take a look at the database on PHP, my admin page,

00:05:37.345 --> 00:05:44.030
we can see the new table named products with the columns as we defined in the schema.

00:05:45.310 --> 00:05:49.805
But just now I have realized that we forgot to

00:05:49.805 --> 00:05:53.930
add a column for storing the product image.

00:05:53.930 --> 00:05:55.775
So let's add it.

00:05:55.775 --> 00:06:00.470
Now if you're thinking that we can add a column easily from the PHP,

00:06:00.470 --> 00:06:03.380
my admin page, then you are right.

00:06:03.380 --> 00:06:06.710
But there is a problem with this approach.

00:06:06.710 --> 00:06:10.100
Let's consider that you are working on a team.

00:06:10.100 --> 00:06:12.710
And if you make changes to the database structure,

00:06:12.710 --> 00:06:16.520
you have to convey that information to your teammates so that

00:06:16.520 --> 00:06:21.065
they can update the structure of their local databases.

00:06:21.065 --> 00:06:25.265
The better way to do this is to use a migration.

00:06:25.265 --> 00:06:27.980
Once you see or decode with your teammates,

00:06:27.980 --> 00:06:31.100
year say simply needs to run the migrations once to

00:06:31.100 --> 00:06:34.790
update the database structure on their systems.

00:06:34.790 --> 00:06:40.985
So let me show you how to add a column to a database table using a migration.

00:06:40.985 --> 00:06:43.820
The first step is to create a migration by running

00:06:43.820 --> 00:06:47.675
the command PHP artisan make migration.

00:06:47.675 --> 00:06:52.010
And let us add a super descriptive name,

00:06:52.010 --> 00:06:56.490
Add Column image URL to products table.

00:06:57.700 --> 00:07:03.080
A new migration gets created inside the folder database.

00:07:03.080 --> 00:07:05.900
Less migrations open the file.

00:07:05.900 --> 00:07:09.350
It is similar to the earlier migration file,

00:07:09.350 --> 00:07:14.315
but the functions called Insight up and down are different.

00:07:14.315 --> 00:07:16.100
To create a new table,

00:07:16.100 --> 00:07:19.805
we call the function create this schema builder.

00:07:19.805 --> 00:07:21.260
And to update a table,

00:07:21.260 --> 00:07:23.645
we have to call the function table.

00:07:23.645 --> 00:07:25.970
The syntax is similar though.

00:07:25.970 --> 00:07:28.445
The first parameter is the name of the table,

00:07:28.445 --> 00:07:34.710
and the second is the function inside which we have to define the schema.

00:07:34.780 --> 00:07:36.860
To add a column,

00:07:36.860 --> 00:07:39.980
we have to call one of the main functions available for creating

00:07:39.980 --> 00:07:45.020
the columns of different datatypes the way we did while creating the table.

00:07:45.020 --> 00:07:48.695
Here we sell create a column to store the image URL,

00:07:48.695 --> 00:07:52.879
which is string, so-called the function string.

00:07:52.879 --> 00:07:55.950
On the instance of blueprint.

00:07:56.170 --> 00:08:00.365
Inside the down function call the function drop column.

00:08:00.365 --> 00:08:02.645
To remove this column from the table,

00:08:02.645 --> 00:08:06.110
we have to pass the column name to this function.

00:08:06.110 --> 00:08:11.400
Now finally learn the migration, PHP artisan migrate.

00:08:12.340 --> 00:08:17.375
And take a look at the table on PHP, my admin.

00:08:17.375 --> 00:08:22.715
We can see that a new column has been added to the table products.

00:08:22.715 --> 00:08:25.925
With this destructure of our data, this is complete.

00:08:25.925 --> 00:08:29.150
Next, we have to create a controller to store the information of

00:08:29.150 --> 00:08:33.780
a product into this products table using the product model.
