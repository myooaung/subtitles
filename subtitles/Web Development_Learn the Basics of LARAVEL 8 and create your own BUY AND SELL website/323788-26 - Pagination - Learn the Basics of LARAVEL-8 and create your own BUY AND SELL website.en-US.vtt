WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.245
We are going to make one more change in the product list page.

00:00:04.245 --> 00:00:08.190
We are going to implement pagination so that we don't attempt

00:00:08.190 --> 00:00:12.285
to fetch thousands of items at once to display on the home screen.

00:00:12.285 --> 00:00:15.570
And as of now, as we don't have many items on the database,

00:00:15.570 --> 00:00:18.660
we are going to display 15 items per page.

00:00:18.660 --> 00:00:23.670
Whenever the user clicks on the next page button, then only we sell,

00:00:23.670 --> 00:00:28.935
retrieve the next 15 items from the database and display on the screen.

00:00:28.935 --> 00:00:33.705
Now it may sound a little difficult and it would have been read out loud.

00:00:33.705 --> 00:00:38.495
But again, law has made this extremely easy for us.

00:00:38.495 --> 00:00:44.340
First open the file products controller dot PHP.

00:00:45.640 --> 00:00:48.410
Inside the index function,

00:00:48.410 --> 00:00:50.165
replace d function gate,

00:00:50.165 --> 00:00:56.150
which paginate and pass the number of items to be displayed on each page.

00:00:56.150 --> 00:00:59.280
I'll pass 15 here.

00:00:59.950 --> 00:01:05.030
Now save this and reload the product list page.

00:01:05.030 --> 00:01:10.205
You will notice that we have only 15 items on this page.

00:01:10.205 --> 00:01:11.270
Not all.

00:01:11.270 --> 00:01:14.795
But how do we access the next page of items?

00:01:14.795 --> 00:01:21.715
Let me show you how open the file products dot dot, dot PHP.

00:01:21.715 --> 00:01:25.900
At the bottom called the function named links on

00:01:25.900 --> 00:01:33.400
the product's collection and printed using the blade directive for equal.

00:01:33.400 --> 00:01:41.330
I will also wrap this by a div and the class P6 to make it look a little better.

00:01:41.880 --> 00:01:50.245
Now reload the page and you will notice the page number as clickable links at the bottom.

00:01:50.245 --> 00:01:53.030
Cool, isn't it?

00:01:54.090 --> 00:01:59.990
It is hard to believe death haziness and can be implemented so easily.

00:02:05.760 --> 00:02:12.805
Now, if you want to display only a Previous and Next button instead of displays numbers,

00:02:12.805 --> 00:02:15.400
then simply replace the call to

00:02:15.400 --> 00:02:19.220
the function paginate by a call to the function simple peasant.

00:02:19.220 --> 00:02:28.180
It saved the changes

00:02:28.180 --> 00:02:33.200
and reload the page and you will notice the buttons at the bottom.

00:02:35.910 --> 00:02:38.725
Now before we move on,

00:02:38.725 --> 00:02:44.450
let me show you another magical directive of blade templating engine.

00:02:46.330 --> 00:02:53.090
First, create a new file inside the views folder.

00:02:53.090 --> 00:02:57.890
Let's name it. Each product on list,

00:02:57.890 --> 00:02:59.735
dot blade, dot PHP.

00:02:59.735 --> 00:03:02.060
Can you guess from the name,

00:03:02.060 --> 00:03:04.290
what I'm going to do?

00:03:05.530 --> 00:03:09.380
From the products dot blade dot PHP file,

00:03:09.380 --> 00:03:14.240
copy the code inside the forage directives.

00:03:14.240 --> 00:03:19.505
This is the code for each item of the product list, right?

00:03:19.505 --> 00:03:23.585
Paste this code inside the newly created file.

00:03:23.585 --> 00:03:26.790
Each product on list.

00:03:27.670 --> 00:03:34.520
Now in place of the for-each loop at the blade directive named each.

00:03:34.520 --> 00:03:38.210
And we shall pass three arguments to this.

00:03:38.210 --> 00:03:43.740
First is the name of the view that contains the code for each item of the list.

00:03:44.320 --> 00:03:49.310
So pass the name of the view that we have created just now.

00:03:49.310 --> 00:03:54.755
The second argument is the collection of items.

00:03:54.755 --> 00:03:57.575
So here it is the variable products.

00:03:57.575 --> 00:04:00.500
And it tired is the name of the variable

00:04:00.500 --> 00:04:04.760
representing each item of the product's collection.

00:04:04.760 --> 00:04:08.790
So we have been using P4 it, right?

00:04:09.190 --> 00:04:12.260
The code of the products,

00:04:12.260 --> 00:04:16.140
you look so clean and simple now, right?

00:04:16.780 --> 00:04:23.180
So we have transport decode representing each item of the list to a separate file.

00:04:23.180 --> 00:04:26.419
And now iterating through the product's collection.

00:04:26.419 --> 00:04:30.590
And for each iteration's bringing in the code from this desk

00:04:30.590 --> 00:04:36.440
separate file is as easy as this single line of code that we have written just now.

00:04:36.440 --> 00:04:40.880
This does not add any visual changes to the page.

00:04:40.880 --> 00:04:43.160
Reload the page and see yourself.

00:04:43.160 --> 00:04:47.880
But our code is more organized and more readable now.

00:04:49.720 --> 00:04:53.700
So let's proceed to the next task.
