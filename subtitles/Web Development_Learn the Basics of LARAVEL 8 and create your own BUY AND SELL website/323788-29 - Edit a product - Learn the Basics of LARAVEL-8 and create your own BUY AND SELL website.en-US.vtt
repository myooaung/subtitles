WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.140 --> 00:00:05.370
In the last video, we have added the Edit button on the product details page

00:00:05.370 --> 00:00:10.740
to allow this seller of the product to edit the details of the product ad.

00:00:10.740 --> 00:00:12.975
But on clicking the button, nothing happens.

00:00:12.975 --> 00:00:14.220
It does not work it.

00:00:14.220 --> 00:00:17.230
And in this video we'll make it work.

00:00:17.660 --> 00:00:23.535
First of all, we sell create a view to display the form for editing the details

00:00:23.535 --> 00:00:29.520
which will pre-fill this form with the existing information of the product.

00:00:29.520 --> 00:00:32.100
So let us create a new file.

00:00:32.100 --> 00:00:37.360
Let's name it, edit dot blade dot PHP.

00:00:41.550 --> 00:00:47.050
Now copy all the code from the file sale dot blade dot PHP,

00:00:47.050 --> 00:00:49.765
as we shall use this same form.

00:00:49.765 --> 00:00:52.480
The only change will be pre-filing of

00:00:52.480 --> 00:00:56.665
the input boxes with the existing information of the product.

00:00:56.665 --> 00:00:58.630
To this view, we shall pass

00:00:58.630 --> 00:01:03.160
a variable named product containing the information of the product.

00:01:03.160 --> 00:01:06.910
So let us provide the existing information from

00:01:06.910 --> 00:01:12.190
this variable to the attribute value of the input boxes.

00:01:12.190 --> 00:01:15.560
Product title for the title,

00:01:18.600 --> 00:01:24.320
product, short description for the short description.

00:01:27.370 --> 00:01:31.535
Product, long description for the long description,

00:01:31.535 --> 00:01:35.850
add product, price, 40 price.

00:01:40.180 --> 00:01:43.880
If the user does not provide a new value,

00:01:43.880 --> 00:01:46.085
the existing information will be stored.

00:01:46.085 --> 00:01:51.245
Again. If the user clears a field and keeps it empty,

00:01:51.245 --> 00:01:53.915
we only update the veil for that field.

00:01:53.915 --> 00:01:59.630
Latest also change the masses to enter the new details of

00:01:59.630 --> 00:02:07.349
the product and the taste of the Submit button to update the product information.

00:02:08.670 --> 00:02:15.680
Now open the file web dot PHP and add a route to load this view.

00:02:16.770 --> 00:02:23.425
This is going to be GET requests will call the get function of the root class,

00:02:23.425 --> 00:02:27.190
pass the URI AAD ID to the first parameter.

00:02:27.190 --> 00:02:31.600
You can verify ones that we are passing the same your eye to the Edit buttons,

00:02:31.600 --> 00:02:34.210
HREF, attribute 2 and 2,

00:02:34.210 --> 00:02:36.820
the second parameter, pass the reference to

00:02:36.820 --> 00:02:41.545
a function named edit of the product controller class.

00:02:41.545 --> 00:02:43.930
But we have not created that function yet,

00:02:43.930 --> 00:02:45.970
which I'll create it now.

00:02:45.970 --> 00:02:52.100
But before that, let us add the middleware or to this route.

00:02:56.230 --> 00:03:02.165
Next, open the products controller and create a function named edit.

00:03:02.165 --> 00:03:06.060
Which one parameter for the product ID.

00:03:12.760 --> 00:03:16.790
Inside this function fetch the product by ID,

00:03:16.790 --> 00:03:25.110
the way we did inside the so function by calling the find function of the model.

00:03:25.720 --> 00:03:28.340
Finally returned to view,

00:03:28.340 --> 00:03:31.385
edit and pass the variable product.

00:03:31.385 --> 00:03:37.340
The name product of the first parameter of the width function is important

00:03:37.340 --> 00:03:39.140
here as we are accessing

00:03:39.140 --> 00:03:44.730
the existing information by this variable name inside the edit view.

00:03:48.400 --> 00:03:51.275
Now if you click on the Edit button,

00:03:51.275 --> 00:03:55.025
you will get the edit page that looks like this.

00:03:55.025 --> 00:04:00.305
Now let us complete the remaining steps to make this whole thing work.

00:04:00.305 --> 00:04:04.430
Open the products controller again and add a new function.

00:04:04.430 --> 00:04:06.035
Let's name it update.

00:04:06.035 --> 00:04:09.110
We shall add two parameters to this function.

00:04:09.110 --> 00:04:13.370
The first is an instance of the class request,

00:04:13.370 --> 00:04:16.100
using which we will be able to access

00:04:16.100 --> 00:04:21.785
the values entered by the user through the HTML form.

00:04:21.785 --> 00:04:24.800
And the second is the idea of the product.

00:04:24.800 --> 00:04:27.830
The request object will hold various information of

00:04:27.830 --> 00:04:32.120
the HTTP request along with the data submitted by the form.

00:04:32.120 --> 00:04:37.685
And the second parameter gets the product ID passed to the URL as ISIL.

00:04:37.685 --> 00:04:42.260
Inside this function, we sell add only one validation rule to

00:04:42.260 --> 00:04:46.880
ensure that the price entered is still a number.

00:04:46.880 --> 00:04:49.985
We want validate other fields.

00:04:49.985 --> 00:04:54.560
If the user clears any of the fields and submits them.

00:04:54.560 --> 00:05:00.830
Amt, then we want to update the corresponding value on the database.

00:05:00.840 --> 00:05:04.760
Now get the product by ID.

00:05:07.350 --> 00:05:10.660
Check if an image has been uploaded.

00:05:10.660 --> 00:05:15.085
If we pass the input name to the function has high,

00:05:15.085 --> 00:05:17.905
it returns true if there is a file in the request,

00:05:17.905 --> 00:05:20.140
otherwise it returns false.

00:05:20.140 --> 00:05:25.840
Here if request has high returns true when we pass IMC,

00:05:25.840 --> 00:05:31.195
which is the name of the input field for file in our form.

00:05:31.195 --> 00:05:37.550
Wizard, upload the image and add the path to the instance of product model.

00:05:54.810 --> 00:06:01.880
Now we will check if the title is empty using the function empty.

00:06:04.320 --> 00:06:07.120
If it is not empty, then we sell.

00:06:07.120 --> 00:06:11.695
Add this to the instance of product model who sell used the negation operator in front of

00:06:11.695 --> 00:06:17.780
Mt to ensure that the value is not empty.

00:06:18.900 --> 00:06:23.270
Now let us do the same for the other first two.

00:06:38.440 --> 00:06:43.400
And finally call the function of

00:06:43.400 --> 00:06:48.350
the product model to insert the new values into the database.

00:06:48.350 --> 00:06:52.670
And don't forget to return the product view at

00:06:52.670 --> 00:06:57.390
the end so that we can see the changes immediately on the details page.

00:07:09.130 --> 00:07:13.880
The last tape lift is to create a route to invoke

00:07:13.880 --> 00:07:18.065
this function when the user submits the product Edit Form.

00:07:18.065 --> 00:07:21.740
So append the root file web dot PHP and add a route,

00:07:21.740 --> 00:07:25.130
which I'll call the post function of the root class,

00:07:25.130 --> 00:07:30.815
as this will be a post request at the URI to the first parameter.

00:07:30.815 --> 00:07:34.535
Let's add slash updates less ID.

00:07:34.535 --> 00:07:38.220
This ideal we passed from the ADFS form.

00:07:39.400 --> 00:07:46.350
So let's make it a root parameter using these curly brackets.

00:07:46.360 --> 00:07:52.715
To the second parameter passed the update function of the products controller.

00:07:52.715 --> 00:07:56.380
Also add the middleware.

00:07:59.110 --> 00:08:03.455
Now come back to the file a dot, dot, dot PHP.

00:08:03.455 --> 00:08:09.170
And here we have to update the value of the attribute action of the form.

00:08:09.170 --> 00:08:11.810
Because all clicking the Submit button we want

00:08:11.810 --> 00:08:14.450
to call the route that we have created just now.

00:08:14.450 --> 00:08:19.190
Because debt root invokes the function update of the products controller

00:08:19.190 --> 00:08:24.245
which handles the updation of the product.

00:08:24.245 --> 00:08:26.885
So here we have to provide the proper URI.

00:08:26.885 --> 00:08:29.165
Let's add less updates, less.

00:08:29.165 --> 00:08:36.390
The idea of the product which we can get from the product is test passed to this file.

00:08:37.120 --> 00:08:40.670
Now take a look at the update function once again,

00:08:40.670 --> 00:08:42.470
it has two parameters.

00:08:42.470 --> 00:08:47.300
The first is the request object and second is the ID of the product.

00:08:47.300 --> 00:08:49.820
This may confuse you a little.

00:08:49.820 --> 00:08:52.355
How does this funds AND gates this arguments?

00:08:52.355 --> 00:08:54.575
But again, you don't have to worry.

00:08:54.575 --> 00:08:57.450
Larval takes care of it.

00:08:59.860 --> 00:09:06.090
Now save the changes and try making some changes to the product.

00:09:10.570 --> 00:09:16.650
And we can see the changes immediately on the product details page.

00:09:16.990 --> 00:09:20.300
Let me once summarize all the states that we

00:09:20.300 --> 00:09:22.730
have performed as we are going to implement it,

00:09:22.730 --> 00:09:25.115
delete functionality in a similar way.

00:09:25.115 --> 00:09:29.630
So first we created the view for the AD product page.

00:09:29.630 --> 00:09:35.405
Then we created a root and a controller function to load the EditView.

00:09:35.405 --> 00:09:39.050
We have created another route and another function inside

00:09:39.050 --> 00:09:43.355
the products controller to handle the form submission.

00:09:43.355 --> 00:09:45.875
Now let us move to the next task.

00:09:45.875 --> 00:09:48.150
Deleting a product.
