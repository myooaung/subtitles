WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.205
Things are getting excitatory, right?

00:00:02.205 --> 00:00:04.335
We have started the limit actual data.

00:00:04.335 --> 00:00:06.720
Now we are storing products in our database,

00:00:06.720 --> 00:00:09.420
and now it is time to retrieve the products from

00:00:09.420 --> 00:00:12.885
the database and display them on the website,

00:00:12.885 --> 00:00:15.435
which will remove all the static content

00:00:15.435 --> 00:00:18.225
that are currently being displayed on the website.

00:00:18.225 --> 00:00:22.035
So let's start retrieving products from the database.

00:00:22.035 --> 00:00:26.175
I'll break down the complete process into four main steps.

00:00:26.175 --> 00:00:29.670
Create a function inside the products controller,

00:00:29.670 --> 00:00:32.940
retrieve all the items of the products table,

00:00:32.940 --> 00:00:36.750
update the route to invoke dysfunction,

00:00:36.750 --> 00:00:41.980
and display the fetched items in the products to you.

00:00:44.470 --> 00:00:48.545
First opened the products controller file.

00:00:48.545 --> 00:00:50.375
Create a new function.

00:00:50.375 --> 00:00:52.710
Let's name it index.

00:00:58.510 --> 00:01:04.490
Inside this function we sell call the function r of t model product.

00:01:04.490 --> 00:01:06.800
This returns a collection.

00:01:06.800 --> 00:01:09.185
So we sell creative who are able to hold it.

00:01:09.185 --> 00:01:12.120
Let's name it products.

00:01:15.400 --> 00:01:18.890
Now we have to pass this collection products to

00:01:18.890 --> 00:01:24.930
the products view as it holds all the items of the products table.

00:01:24.930 --> 00:01:28.720
And we're going to display those in the products for you, right?

00:01:28.720 --> 00:01:33.010
So for debt at a return statement called the function,

00:01:33.010 --> 00:01:36.830
if you pass the name of the view.

00:01:36.930 --> 00:01:44.635
It is products in our case called the function wheat.

00:01:44.635 --> 00:01:47.290
The first parameter of this function,

00:01:47.290 --> 00:01:53.995
which is the name of the variable by which we sell access the data inside the view.

00:01:53.995 --> 00:01:57.500
And the second parameter is the data itself.

00:01:58.200 --> 00:02:02.545
So let us pass products to the first parameter

00:02:02.545 --> 00:02:08.420
and the variable products to the second parameter.

00:02:13.060 --> 00:02:16.040
Now we have to update this route.

00:02:16.040 --> 00:02:21.470
Until now we have been returning the products view from the root file itself.

00:02:21.470 --> 00:02:23.630
And technically there is nothing wrong.

00:02:23.630 --> 00:02:28.790
In fact, we can handle all the HTTP requests inside the root file itself.

00:02:28.790 --> 00:02:31.220
We dealt creating the controllers,

00:02:31.220 --> 00:02:35.150
but we still end up with some unorganized code.

00:02:35.150 --> 00:02:39.365
Using controllers helps us organize better.

00:02:39.365 --> 00:02:41.960
It helps us write more maintainable code.

00:02:41.960 --> 00:02:46.714
So let us replace the closer of the second parameter,

00:02:46.714 --> 00:02:52.580
which I call to the function index of the products controller.

00:02:52.580 --> 00:02:54.590
Notice this syntax here,

00:02:54.590 --> 00:03:00.485
we have to pass an array and we have to pass the name of the class,

00:03:00.485 --> 00:03:03.650
the controller class, and then the name of

00:03:03.650 --> 00:03:08.310
the function inside the controller class that we want to invoke.

00:03:11.170 --> 00:03:14.660
Now try to reload the website and

00:03:14.660 --> 00:03:18.785
the product list page is getting loaded without any errors.

00:03:18.785 --> 00:03:24.380
This means that all we have done till now is working properly.

00:03:24.380 --> 00:03:29.435
We now have to display the items of the product's collection inside the view,

00:03:29.435 --> 00:03:31.445
replacing this steady content.

00:03:31.445 --> 00:03:36.690
So open the file products dot PHP.

00:03:38.410 --> 00:03:44.090
Here we can access the data pass to eat by the name debt we have provided while

00:03:44.090 --> 00:03:50.645
returning this view from the index function of the products controller.

00:03:50.645 --> 00:03:56.195
And until now we have been using a simple for loop to print 10 items,

00:03:56.195 --> 00:03:59.870
but to iterate through a collection and then print

00:03:59.870 --> 00:04:02.930
the content of each of the items

00:04:02.930 --> 00:04:07.020
of the collection if for each loop will be more convenient.

00:04:07.030 --> 00:04:11.090
So let's replace this for loop with a for each loop.

00:04:11.090 --> 00:04:14.765
Notice the syntax of the for each loop.

00:04:14.765 --> 00:04:16.835
Inside these brackets.

00:04:16.835 --> 00:04:20.495
First we have to specify the collection to iterate through.

00:04:20.495 --> 00:04:22.490
And then after the keyword,

00:04:22.490 --> 00:04:27.830
as we have to add the variable to hold the individual items of the collection.

00:04:27.830 --> 00:04:35.480
Let's name it p. Now replace this static

00:04:35.480 --> 00:04:39.080
takes which the data from the variable p on

00:04:39.080 --> 00:04:43.325
the URL of the HREF attribute replace the static ID,

00:04:43.325 --> 00:04:50.540
which the value of the ID from the variable p. Don't miss this curly brackets,

00:04:50.540 --> 00:04:52.460
these are required to print.

00:04:52.460 --> 00:04:59.900
Variables in law will replace the static takes to headphone with the actual title.

00:04:59.900 --> 00:05:02.675
Use P short description.

00:05:02.675 --> 00:05:04.264
For the short description,

00:05:04.264 --> 00:05:12.575
it lists the number 20 by the value of the prize from the variable p.

00:05:12.575 --> 00:05:15.480
And keep the dollar sign.

00:05:18.550 --> 00:05:25.260
And also provide the actual image URL to the IMG element.

00:05:32.910 --> 00:05:36.865
Now, if you reload the website,

00:05:36.865 --> 00:05:40.240
our products will looks like this.

00:05:40.240 --> 00:05:42.805
So here we can see the actual data,

00:05:42.805 --> 00:05:45.055
the name of the product,

00:05:45.055 --> 00:05:46.555
the description, and the price.

00:05:46.555 --> 00:05:49.705
But still this is not what we expected, right?

00:05:49.705 --> 00:05:53.260
The links to the image seems to be broken.

00:05:53.260 --> 00:05:56.920
This has happened because the location of our images

00:05:56.920 --> 00:06:00.985
is not publicly accessible from the browser.

00:06:00.985 --> 00:06:02.710
And to make it accessible,

00:06:02.710 --> 00:06:08.935
we have to create a symbolic link from the public folder to the one where we have

00:06:08.935 --> 00:06:12.190
kept the images is symbolic link is

00:06:12.190 --> 00:06:16.730
a file that contains a reference to another file or folder.

00:06:18.550 --> 00:06:22.850
We can create a symbolic link from this public folder

00:06:22.850 --> 00:06:26.510
to the store is less air folder with this artisan command,

00:06:26.510 --> 00:06:30.455
PHP artisan stories column link.

00:06:30.455 --> 00:06:32.870
If you run this command,

00:06:32.870 --> 00:06:35.030
you will notice that a special type of

00:06:35.030 --> 00:06:39.440
folder names storage with a logo that looks a little different,

00:06:39.440 --> 00:06:42.140
gets created inside the public folder.

00:06:42.140 --> 00:06:46.129
This is a link to the folder stories.

00:06:46.129 --> 00:06:48.365
Celeste public.

00:06:48.365 --> 00:06:54.185
But we have kept the images inside a different folder named product images.

00:06:54.185 --> 00:06:57.570
So let us define a new link.

00:06:58.600 --> 00:07:04.325
Open the file, File System dot PHP debt is inside the folder comfy.

00:07:04.325 --> 00:07:08.015
This file contains the file system related configurations.

00:07:08.015 --> 00:07:09.665
As the name suggests.

00:07:09.665 --> 00:07:11.390
To the bottom of this file,

00:07:11.390 --> 00:07:15.995
you will find an EDI or symbolic links called lnx.

00:07:15.995 --> 00:07:22.565
Notice how the default link is defined here to the left of this fat arrow.

00:07:22.565 --> 00:07:25.670
The function called public first is called.

00:07:25.670 --> 00:07:28.670
And today write stories.

00:07:28.670 --> 00:07:31.175
Underscore path is called.

00:07:31.175 --> 00:07:34.940
The argument of the function.

00:07:34.940 --> 00:07:38.795
Public park is the name with which we want to create a link

00:07:38.795 --> 00:07:42.850
on the public folder and the argument of the function stories,

00:07:42.850 --> 00:07:47.710
but it is the folder to which we want to create the link.

00:07:47.710 --> 00:07:50.950
We will add another symbolic link here.

00:07:50.950 --> 00:07:54.490
So copy this line and paste it once.

00:07:54.490 --> 00:07:58.540
Past product images to the function public park.

00:07:58.540 --> 00:08:02.170
And apps less product images

00:08:02.170 --> 00:08:06.860
to the function on the right-hand side of the federal storage path.

00:08:09.630 --> 00:08:14.755
And now run the command PHP artisan stories, colon link.

00:08:14.755 --> 00:08:16.250
Again.

00:08:17.280 --> 00:08:21.160
Now we have a new folder named product images.

00:08:21.160 --> 00:08:23.720
Inside this public folder.

00:08:27.430 --> 00:08:31.400
Now reload the page and we have the images.

00:08:31.400 --> 00:08:34.380
And it looks beautiful, isn't it?
