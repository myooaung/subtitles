WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.445
We are going to display the products on the first screen itself on loading the website,

00:00:05.445 --> 00:00:09.285
the users will be able to view the products without even logging in.

00:00:09.285 --> 00:00:13.440
We will ask the user to login only when he or she tries to

00:00:13.440 --> 00:00:17.895
view the content details of the sailor of a particular product.

00:00:17.895 --> 00:00:22.065
Or your C tries to post an ad for selling something.

00:00:22.065 --> 00:00:27.195
We have discussed the components of a larval project, right?

00:00:27.195 --> 00:00:30.180
The views are there for user interactions,

00:00:30.180 --> 00:00:33.855
the models are for database interactions and controllers

00:00:33.855 --> 00:00:38.705
facilitate the communication between these views and the models.

00:00:38.705 --> 00:00:42.275
The views know nothing about the application logic.

00:00:42.275 --> 00:00:43.820
They simply present the data,

00:00:43.820 --> 00:00:47.765
pass to them to the user in a beautiful way.

00:00:47.765 --> 00:00:50.840
Now is I'll create the views 40 pages of

00:00:50.840 --> 00:00:54.589
our website using dummy content and we sell replace

00:00:54.589 --> 00:00:58.370
this dummy content with actual data when we create

00:00:58.370 --> 00:01:03.360
the models and the controllers and we start interacting with the database.

00:01:04.960 --> 00:01:11.675
The views are kept inside this folder views inside resources.

00:01:11.675 --> 00:01:14.060
Currently we have only one view here,

00:01:14.060 --> 00:01:19.055
which is responsible for the default welcome screen of the project.

00:01:19.055 --> 00:01:24.200
I'll replace its code with our own to display a list of products.

00:01:24.200 --> 00:01:31.220
But before that, notice the file name once it is welcomed or blade dot PHP,

00:01:31.220 --> 00:01:35.150
the dot blade dot PHP extension is added to

00:01:35.150 --> 00:01:40.070
inform the framework that the file contains a blade template.

00:01:40.070 --> 00:01:42.980
Now, what is a bleed template?

00:01:42.980 --> 00:01:47.885
A blade template or the blade templating engine as a whole,

00:01:47.885 --> 00:01:52.985
helps us in putting data inside HTML while creating the layout.

00:01:52.985 --> 00:01:55.460
Let me show you how.

00:01:55.460 --> 00:01:59.255
Open the file. Welcome, dot-dot-dot PHP.

00:01:59.255 --> 00:02:01.685
Let me show you the simplest thing first,

00:02:01.685 --> 00:02:05.900
scroll down to the bottom and you will find the line for displaying the law

00:02:05.900 --> 00:02:11.010
they'll version and the PSP version at the bottom of the page.

00:02:11.410 --> 00:02:15.740
Here, this one and this one are global variables.

00:02:15.740 --> 00:02:18.110
And blades eco statement,

00:02:18.110 --> 00:02:23.375
this double curly brackets are used to print developers of these variables.

00:02:23.375 --> 00:02:29.780
Now, if we replace the bits in texts with raw PHP to print the variables,

00:02:29.780 --> 00:02:33.900
it would look like this.

00:02:34.510 --> 00:02:37.790
And now you may be thinking this looks so simple.

00:02:37.790 --> 00:02:41.880
Why do we even need to use a templating engine?

00:02:42.130 --> 00:02:45.950
Let us scroll up a little hand find out why.

00:02:45.950 --> 00:02:49.280
At the beginning of the body will find the code for

00:02:49.280 --> 00:02:52.490
displaying the login and raised recent buttons.

00:02:52.490 --> 00:02:54.785
There are some interesting stuff here.

00:02:54.785 --> 00:02:56.735
Notice the if statement.

00:02:56.735 --> 00:03:00.770
This is a blade reactive for adding an if condition.

00:03:00.770 --> 00:03:06.049
Here, this code is checking if a route named login Xist,

00:03:06.049 --> 00:03:09.725
which is an indication that authentic isn't has been implemented.

00:03:09.725 --> 00:03:15.275
If it exist, then only it will display the buttons, otherwise, nothing.

00:03:15.275 --> 00:03:16.490
Next.

00:03:16.490 --> 00:03:24.620
The other it off directive is used to determine whether the user is logged in or not.

00:03:24.620 --> 00:03:28.850
A link to the dashboard pages displayed if the user is logged in.

00:03:28.850 --> 00:03:32.690
Otherwise, the login and registration links.

00:03:32.690 --> 00:03:38.330
Now, if we replace the blades index with the raw PHP code,

00:03:38.330 --> 00:03:42.600
it will look a little different. Let me show you.

00:03:51.790 --> 00:03:57.740
Now the importance of using a templating engine is getting clear, right?

00:03:57.740 --> 00:04:00.530
But this is not all that blade has to offer.

00:04:00.530 --> 00:04:05.010
Asl X-rays more of blades magic soon.

00:04:15.730 --> 00:04:21.530
Now let me quickly summarize this tapes that we are going to take in this video.

00:04:21.530 --> 00:04:24.575
First of all, we'll create a simple view.

00:04:24.575 --> 00:04:28.205
We sell, add some simple HTML there.

00:04:28.205 --> 00:04:31.520
And then we sell, tried to load it on the browser.

00:04:31.520 --> 00:04:33.635
For that we have to create a route.

00:04:33.635 --> 00:04:35.480
And then we sell,

00:04:35.480 --> 00:04:42.110
use the for loop directive of blade to print a list of items.

00:04:42.110 --> 00:04:45.150
So let's get started.

00:04:52.330 --> 00:04:55.820
Create a new file inside the views directory.

00:04:55.820 --> 00:04:59.420
Latest name IT products dot blade dot PHP.

00:04:59.420 --> 00:05:03.170
We sell remove the welcome dot dot dot PHP later,

00:05:03.170 --> 00:05:05.450
keeping it for now as we may need it,

00:05:05.450 --> 00:05:07.130
need to refer to it.

00:05:07.130 --> 00:05:12.630
Now let's create a simple HTML layout in our products view.

00:05:19.270 --> 00:05:23.945
At the HTML tags then a head and body.

00:05:23.945 --> 00:05:27.720
And I'll add a title inside the head hand.

00:05:30.640 --> 00:05:34.235
Let us print a string.

00:05:34.235 --> 00:05:36.960
We'll come to be NS.

00:05:37.510 --> 00:05:42.425
Now let us try to load this page on the browser.

00:05:42.425 --> 00:05:45.290
But how to do that? Got any clues?

00:05:45.290 --> 00:05:46.340
Yes, you are right.

00:05:46.340 --> 00:05:48.140
We have to define a root.

00:05:48.140 --> 00:05:53.045
So open the web dot PHP file of the routes folder.

00:05:53.045 --> 00:05:57.125
Initially the arrows only one route defined in this file.

00:05:57.125 --> 00:06:02.405
After implementing authentication, a new route has been added, 40 dashboard view.

00:06:02.405 --> 00:06:08.570
So if you append slash dashboard to the URL on the address bar and hit Enter.

00:06:08.570 --> 00:06:10.880
Your dashboard page gets loaded,

00:06:10.880 --> 00:06:14.195
provided you are already logged in.

00:06:14.195 --> 00:06:18.185
Now let us add a route for the products for you.

00:06:18.185 --> 00:06:20.000
To create a route,

00:06:20.000 --> 00:06:24.005
we have to call one of the different router methods.

00:06:24.005 --> 00:06:27.440
This matters corresponds to the HTTP verbs,

00:06:27.440 --> 00:06:30.740
gate, post, delete, and patch.

00:06:30.740 --> 00:06:34.190
Here, in this case we sell make a gate requests.

00:06:34.190 --> 00:06:38.550
So call root gate.

00:06:38.860 --> 00:06:41.960
We have to pass two parameters.

00:06:41.960 --> 00:06:44.045
The first one is the URI.

00:06:44.045 --> 00:06:46.400
Let's pass products here.

00:06:46.400 --> 00:06:49.175
And this second parameter is a function.

00:06:49.175 --> 00:06:52.355
We have to return the HTML code from this function.

00:06:52.355 --> 00:06:57.935
And as our HTML code is inside the views so we can return the view itself.

00:06:57.935 --> 00:07:01.700
Laura Val has provided a helper function called view.

00:07:01.700 --> 00:07:05.600
To access a view, we have to pass the name of the view to this function.

00:07:05.600 --> 00:07:08.195
It will search the directory for views,

00:07:08.195 --> 00:07:14.580
the directory called views inside the Resources folder for the view with this name.

00:07:15.970 --> 00:07:25.190
Now type HTTP colon slash lesbian is to grow less products on the browser and hit enter.

00:07:25.190 --> 00:07:29.430
And it loads the pace that we have just created.

00:07:30.700 --> 00:07:33.680
Now let us come to the heart stiff.

00:07:33.680 --> 00:07:39.350
We are going to display a list of items using the four blade directive.

00:07:39.350 --> 00:07:43.130
As we are going to display a list of items on this page,

00:07:43.130 --> 00:07:47.210
we will need to use a loop once we start working with actual data,

00:07:47.210 --> 00:07:52.805
which will pass the array of products from the database to this view.

00:07:52.805 --> 00:07:56.315
And here we sell iterate through the items of the list.

00:07:56.315 --> 00:08:02.180
But for now we'll focus only on creating the layout using the Blade templates.

00:08:02.180 --> 00:08:05.510
So we still use some dummy content.

00:08:05.510 --> 00:08:10.595
Here. We still use the blade reactive for, for a for loop.

00:08:10.595 --> 00:08:16.500
And don't forget to add the aimed for directive here.

00:08:17.800 --> 00:08:23.090
So this loop will print this string hello world 10

00:08:23.090 --> 00:08:29.510
times latest reload the page and see how does it look.

00:08:29.510 --> 00:08:34.500
And here we have the string printed ten times.

00:08:34.840 --> 00:08:38.300
In the next video we said create a card like component

00:08:38.300 --> 00:08:41.150
to display the information of a product.

00:08:41.150 --> 00:08:45.930
And we sell, replace this string with the cards.
