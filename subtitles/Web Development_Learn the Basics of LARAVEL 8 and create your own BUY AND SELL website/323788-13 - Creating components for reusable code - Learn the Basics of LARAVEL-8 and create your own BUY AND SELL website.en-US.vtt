WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:06.140 --> 00:00:08.865
We have talked about this,

00:00:08.865 --> 00:00:12.000
about the maintainability of our application.

00:00:12.000 --> 00:00:15.840
Currently we are duplicating a lot of code.

00:00:15.840 --> 00:00:18.300
Let me put the quotes of the product list space

00:00:18.300 --> 00:00:20.880
and the product details pages side-by-side.

00:00:20.880 --> 00:00:26.290
I am also collapsing this the 40 ease of viewing.

00:00:28.280 --> 00:00:29.805
Here.

00:00:29.805 --> 00:00:34.785
You will notice that only the portion named main content is the friend Forty two pages,

00:00:34.785 --> 00:00:37.660
the rest of the code is the same.

00:00:37.660 --> 00:00:42.740
Duplication of code is bad and code reuse is good.

00:00:42.740 --> 00:00:46.340
So in this video, we shall find a way to reuse the common code.

00:00:46.340 --> 00:00:50.915
We sell create something like a template for this structure, 40,

00:00:50.915 --> 00:00:57.035
common structure of the individual pages of the app containing the header and footer,

00:00:57.035 --> 00:00:59.884
basically the non changing portions.

00:00:59.884 --> 00:01:05.190
And we shall define a container 40 based specific content.

00:01:08.320 --> 00:01:13.835
Let us take a look at the file dashboard dot dot PHP.

00:01:13.835 --> 00:01:20.315
Now you may be wondering what is this tag at the root acts at layout.

00:01:20.315 --> 00:01:23.540
And what is X slot?

00:01:23.540 --> 00:01:29.420
You will find similar elements inside the authentication relative refused to,

00:01:29.420 --> 00:01:33.290
which are added by larval breeze inside the OS directory.

00:01:33.290 --> 00:01:36.500
I'll clear your doubts in this video itself.

00:01:36.500 --> 00:01:40.550
We sell displayed this type of tags in our views to.

00:01:40.550 --> 00:01:42.725
So by the end of this video,

00:01:42.725 --> 00:01:47.240
there'll be no PGA or changes in the pages of our website.

00:01:47.240 --> 00:01:50.840
But the underlying code for D views will look

00:01:50.840 --> 00:01:55.500
somewhat similar to the code of the dashboard view.

00:01:59.620 --> 00:02:02.285
Now back to the question,

00:02:02.285 --> 00:02:05.315
what is this tag x at layout?

00:02:05.315 --> 00:02:09.720
This tech corresponds to a component.

00:02:09.790 --> 00:02:12.350
So what is the component?

00:02:12.350 --> 00:02:14.030
Well, as the name says,

00:02:14.030 --> 00:02:17.930
it's a component is a portion of the view.

00:02:17.930 --> 00:02:22.280
You may have already noticed that the dashboard dot dot

00:02:22.280 --> 00:02:27.155
PHP file does not contain the code for the header and the footer.

00:02:27.155 --> 00:02:31.290
It only contains the code for the main content.

00:02:32.260 --> 00:02:36.635
The common structure of the layout of the page is defined

00:02:36.635 --> 00:02:40.400
in a separate file that you can find inside this folder.

00:02:40.400 --> 00:02:46.700
Resources less views, less layout named app.py blade dot PHP.

00:02:46.700 --> 00:02:49.160
Open this file and you will find the code

00:02:49.160 --> 00:02:51.560
that seems to be missing from the dashboard view,

00:02:51.560 --> 00:02:55.100
the HTML tag, the head, the body, etc.

00:02:55.100 --> 00:03:01.085
Here you will find that the navigation bar has been included two from a different file.

00:03:01.085 --> 00:03:09.900
And there is a portion named main content where a variable named slot is being printed.

00:03:14.650 --> 00:03:19.355
This variable slot gates the content of the view

00:03:19.355 --> 00:03:24.200
that we defined inside the tag corresponding to this component.

00:03:24.200 --> 00:03:26.795
Let's come back to the dashboard view.

00:03:26.795 --> 00:03:34.370
Here, this deck is responsible for rendering the component that we have seen just now.

00:03:34.370 --> 00:03:38.765
And the content that we are adding inside these tags,

00:03:38.765 --> 00:03:45.275
XML layout, gets injected to the variable slot of the component.

00:03:45.275 --> 00:03:50.480
And this whole magic is far from by blade templating engine.

00:03:50.480 --> 00:03:54.150
We don't need to worry about the internals.

00:03:57.550 --> 00:04:03.815
We have one more unknown tag inside the dashboard view x slot.

00:04:03.815 --> 00:04:06.665
To understand the purpose of this tag,

00:04:06.665 --> 00:04:09.185
go back to the app layout component.

00:04:09.185 --> 00:04:13.340
Again, the variables slot is the default one.

00:04:13.340 --> 00:04:15.035
We don't need to define it.

00:04:15.035 --> 00:04:19.235
We can simply use it and the content of the view gets injected to eat.

00:04:19.235 --> 00:04:24.290
But often we need to define other additional variables to.

00:04:24.290 --> 00:04:30.560
For example, here, an additional variable called header is used.

00:04:30.560 --> 00:04:32.810
And this makes sense.

00:04:32.810 --> 00:04:35.870
The header should look the same in all the pages,

00:04:35.870 --> 00:04:39.750
but the value of the header will vary, right?

00:04:40.090 --> 00:04:42.305
In such a case,

00:04:42.305 --> 00:04:47.960
we have to use the tag acts lot to define custom variables.

00:04:47.960 --> 00:04:50.240
Inside the dashboard view,

00:04:50.240 --> 00:04:53.930
the variable name has been passed to the attribute name of D,

00:04:53.930 --> 00:04:56.990
acts lot tech, and the content to be injected to

00:04:56.990 --> 00:05:01.050
this variable is written inside the tags.

00:05:06.490 --> 00:05:10.850
Now the next question that may come to your mind is,

00:05:10.850 --> 00:05:14.540
why this name acts at layout for the tag.

00:05:14.540 --> 00:05:16.940
Do we need to use this name always welding,

00:05:16.940 --> 00:05:20.165
finding a component for a page layout.

00:05:20.165 --> 00:05:25.760
Do we have more similar types of texts for different types of components?

00:05:25.760 --> 00:05:30.545
We don't need to use the same name always.

00:05:30.545 --> 00:05:33.620
There are no predefined tags for different components.

00:05:33.620 --> 00:05:37.910
These names are derived from the name of the component.

00:05:37.910 --> 00:05:41.090
They start with the string x dash,

00:05:41.090 --> 00:05:45.155
followed by the kebab case name of the component class.

00:05:45.155 --> 00:05:53.220
In kebab case, the words are separated by hyphens and written in small letters.

00:05:53.260 --> 00:05:59.120
So if you create a component named product card,

00:05:59.120 --> 00:06:02.165
then to render the components inside your view,

00:06:02.165 --> 00:06:08.460
you have to use the tag x ds product desk tag.

00:06:08.530 --> 00:06:12.995
And the tag x lot is predefined in Blade.

00:06:12.995 --> 00:06:18.349
We have to use it to define custom variables for a component.

00:06:18.349 --> 00:06:21.185
Now some more confusions.

00:06:21.185 --> 00:06:26.375
As the tag used inside the dashboard view is AX app layout.

00:06:26.375 --> 00:06:30.950
There should have been a component named app layout, right?

00:06:30.950 --> 00:06:36.005
But the file we're looking at is f dot blade dot PHP.

00:06:36.005 --> 00:06:39.180
So is there any exception?

00:06:39.430 --> 00:06:41.810
Well, not an actual option.

00:06:41.810 --> 00:06:43.955
There are basically two types of components.

00:06:43.955 --> 00:06:48.035
One is a class-based component and the other is anonymous component.

00:06:48.035 --> 00:06:49.970
To create an anonymous component,

00:06:49.970 --> 00:06:55.144
we simply have to keep the blade template for the component

00:06:55.144 --> 00:07:02.000
inside this folder named component inside the views folder of the resources folder.

00:07:02.000 --> 00:07:08.330
And we can start using it tag with the same naming convention as mentioned before.

00:07:08.330 --> 00:07:10.530
To render this component.

00:07:11.860 --> 00:07:14.360
Take a look inside this folder.

00:07:14.360 --> 00:07:18.050
Components in number of anonymous components have been

00:07:18.050 --> 00:07:22.700
kept here by larval breeze while implementing authentication.

00:07:22.700 --> 00:07:28.025
Here the first one is named application logo dot blade dot PHP.

00:07:28.025 --> 00:07:33.140
This is a symbol component containing the SVC 40 larval logo,

00:07:33.140 --> 00:07:37.680
which is being used by the authentication related views.

00:07:37.810 --> 00:07:42.575
And inside the file navigation dot blade dot PHP.

00:07:42.575 --> 00:07:46.715
Inside resources less views, less Layouts folder.

00:07:46.715 --> 00:07:49.055
You will find the uses of

00:07:49.055 --> 00:07:55.950
the tag application X application load that is responsible for entering this component.

00:07:56.730 --> 00:07:59.260
Now you may ask,

00:07:59.260 --> 00:08:03.955
how do I know that application logo is an anonymous component?

00:08:03.955 --> 00:08:05.890
I'll tell you first,

00:08:05.890 --> 00:08:07.960
let me tell you about the first type.

00:08:07.960 --> 00:08:10.670
Class-based components.

00:08:12.570 --> 00:08:18.430
Class-based components have an associated class that gates placed inside the folder named

00:08:18.430 --> 00:08:24.340
components inside view insight app folder.

00:08:24.340 --> 00:08:31.900
A class-based component can be created by running the command PHP artisan make Component,

00:08:31.900 --> 00:08:36.350
and then providing the component name on the terminal.

00:08:39.600 --> 00:08:44.140
This will place a component in the apps list,

00:08:44.140 --> 00:08:46.300
fuse less components directory.

00:08:46.300 --> 00:08:51.055
And it will also create a view template for this component

00:08:51.055 --> 00:08:57.550
and place it inside the resources less fuse, less components directory.

00:08:57.550 --> 00:09:03.595
Now, if you take a look inside this component folder inside apps less views,

00:09:03.595 --> 00:09:07.720
you will find two files containing the classes for

00:09:07.720 --> 00:09:12.025
the corresponding components and the views for these components.

00:09:12.025 --> 00:09:17.019
Our app.py dot PHP and guest dot blade dot PHP.

00:09:17.019 --> 00:09:22.260
Data inside resources less views, less layout folder.

00:09:22.260 --> 00:09:25.145
By default, the views that are created by

00:09:25.145 --> 00:09:30.020
the make Component Command are kept inside the components folder.

00:09:30.020 --> 00:09:32.840
But here these views are kept inside the layout folder

00:09:32.840 --> 00:09:37.130
by explicitly specifying this inside the classes.

00:09:37.130 --> 00:09:40.310
So currently we have two class-based components,

00:09:40.310 --> 00:09:42.380
app layout and gaze layout.

00:09:42.380 --> 00:09:46.820
And the other components that are inside the folder resources,

00:09:46.820 --> 00:09:51.240
less views, less component are anonymous components.

00:09:51.370 --> 00:09:54.800
So you have got the answer to the question,

00:09:54.800 --> 00:09:59.045
how do I know that application logo isn't anonymous component, right?

00:09:59.045 --> 00:10:03.425
Because it does not have the corresponding class for it.

00:10:03.425 --> 00:10:06.605
Now with all the knowledge that we have got,

00:10:06.605 --> 00:10:09.245
let us try to create our own component.

00:10:09.245 --> 00:10:13.440
Now, can you decide the states that we have to take now?

00:10:16.180 --> 00:10:19.070
First we will create a component.

00:10:19.070 --> 00:10:22.340
Then we add the code for the header and footer inside

00:10:22.340 --> 00:10:26.465
this component and we will remove them from our views.

00:10:26.465 --> 00:10:33.420
And we shall wrap the remaining code of our views inside the components tags.

00:10:36.610 --> 00:10:44.600
So first, let's run the command PHP artisan make component and specify a name.

00:10:44.600 --> 00:10:46.145
Let's name it based layout.

00:10:46.145 --> 00:10:49.529
To create a class-based component.

00:10:55.030 --> 00:11:00.430
Now notice that a new file has been added inside the folder apps less views,

00:11:00.430 --> 00:11:05.495
less components for the component class and the corresponding Xiu

00:11:05.495 --> 00:11:10.925
named base layout dot blade dot PHP inside the folder,

00:11:10.925 --> 00:11:14.369
resources less useless component.

00:11:18.100 --> 00:11:22.880
Let us move this new view to the layers folder to maintain

00:11:22.880 --> 00:11:26.990
a similar structure to the one created by larval breeds.

00:11:26.990 --> 00:11:30.140
We also have to update the view reference

00:11:30.140 --> 00:11:34.590
inside the render function of the component class.

00:11:36.400 --> 00:11:42.200
Now copy the code from the view products dot blade dot PHP or from

00:11:42.200 --> 00:11:50.580
the view product dot dot PHP and paste it inside this base layout component.

00:11:54.100 --> 00:12:00.050
Remove the main content portion of the code and eco the variables slot.

00:12:00.050 --> 00:12:06.480
Now the main content for the individual pieces will be insect it to this variable.

00:12:06.520 --> 00:12:10.700
Now, come back to the product's few and remove

00:12:10.700 --> 00:12:14.645
all the code except the code for the main content portion.

00:12:14.645 --> 00:12:23.850
And wrap this quote by the tag for rendering the component x dash base desk layout.

00:12:26.260 --> 00:12:29.990
If we reload the website on the browser,

00:12:29.990 --> 00:12:33.860
we will see that it looks and behaves the same as before.

00:12:33.860 --> 00:12:38.420
Now try removing the texts x base layout ones,

00:12:38.420 --> 00:12:40.010
and reload the page again.

00:12:40.010 --> 00:12:42.770
This time you will notice that the header and footer disappeared and

00:12:42.770 --> 00:12:46.220
the styles applied to the elements of the product guard

00:12:46.220 --> 00:12:49.400
are also not working as the link to

00:12:49.400 --> 00:12:53.850
the CSS file is there inside the base layout component.

00:12:55.720 --> 00:13:03.770
Let's make it work again by adding the tag and also do the same 40 product details page.

00:13:03.770 --> 00:13:06.230
Inside the product view.

00:13:06.230 --> 00:13:10.790
Remove all the code other than the main component version and enclosed

00:13:10.790 --> 00:13:16.680
the remaining code inside the tags x base layout.

00:13:19.660 --> 00:13:22.130
Now along with the UI,

00:13:22.130 --> 00:13:24.545
our CO2 looks good.

00:13:24.545 --> 00:13:26.810
We'd help a blade superpowers.

00:13:26.810 --> 00:13:31.710
We have made our code more maintainable and more scalable.

00:13:33.310 --> 00:13:37.280
The next thing that we have to do is to create

00:13:37.280 --> 00:13:43.740
the sale product view to allow the user to post a new ad to sell a product.
