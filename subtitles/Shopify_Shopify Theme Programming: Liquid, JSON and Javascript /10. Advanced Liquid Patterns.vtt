WEBVTT
ï»¿1
00:00:00.000 --> 00:00:04.305
In this lesson we're going to turn our attention back to Shopify liquid,and

2
00:00:04.305 --> 00:00:06.780
we're going to talk about some of the limitations and

3
00:00:06.780 --> 00:00:09.780
quirks within the templating language.

4
00:00:09.780 --> 00:00:12.030
I'm going to go back to my new theme,

5
00:00:12.030 --> 00:00:17.685
going to the code, and I'm going to open up the index template.

6
00:00:17.685 --> 00:00:20.715
I'll go over here, click Index.

7
00:00:20.715 --> 00:00:23.600
What I'm going to do for this lesson is I'm going to copy and

8
00:00:23.600 --> 00:00:27.020
paste examples and then we're going to work through them.

9
00:00:27.020 --> 00:00:30.695
What I've done is I've gone through the language and picked out

10
00:00:30.695 --> 00:00:35.350
a bunch of limitation quirks and the ways around them.

11
00:00:35.350 --> 00:00:37.460
I've got this initial paragraph here.

12
00:00:37.460 --> 00:00:38.600
This is just a comment,

13
00:00:38.600 --> 00:00:39.830
something for us to read,

14
00:00:39.830 --> 00:00:42.670
and then I'm going to bring in the specific examples.

15
00:00:42.670 --> 00:00:47.300
What I've written here is that while you can think of liquid as a programming language,

16
00:00:47.300 --> 00:00:49.580
it's actually just a templating language.

17
00:00:49.580 --> 00:00:53.990
Certain things that should be a given like being able to cycle through a global list of

18
00:00:53.990 --> 00:00:58.415
articles or products are simply not possible in Shopify liquid.

19
00:00:58.415 --> 00:01:03.035
Very frustrating when you're looking for that consistency and convention.

20
00:01:03.035 --> 00:01:06.285
This is Shopify's templating language.

21
00:01:06.285 --> 00:01:11.695
They take a lot of liberties and defy convention in multiple areas.

22
00:01:11.695 --> 00:01:16.399
Also, the only data types you can create and liquid are primitives and arrays,

23
00:01:16.399 --> 00:01:18.935
including arrays of arrays and primitives,

24
00:01:18.935 --> 00:01:23.170
and what I mean by primitives are basically just strings and numbers.

25
00:01:23.170 --> 00:01:26.005
Strings of course are just bits of text,

26
00:01:26.005 --> 00:01:27.905
if you're not familiar with that term.

27
00:01:27.905 --> 00:01:30.650
Another thing I should just mention up front,

28
00:01:30.650 --> 00:01:33.455
I'm going to be using a lot of programming terminology.

29
00:01:33.455 --> 00:01:38.060
I'm going to basically be taking a program is approach to liquid and

30
00:01:38.060 --> 00:01:42.980
showing how we can do more of the advanced programming stuff in this templating language,

31
00:01:42.980 --> 00:01:45.500
which is a highly limited language.

32
00:01:45.500 --> 00:01:47.315
Here's some of the limitations.

33
00:01:47.315 --> 00:01:50.615
As I just mentioned, you can't create an object in liquid.

34
00:01:50.615 --> 00:01:52.460
You will see that in just a second,

35
00:01:52.460 --> 00:01:55.580
you can loop through certain array-like objects.

36
00:01:55.580 --> 00:01:58.250
It's very frustrating, but you can't actually loop

37
00:01:58.250 --> 00:02:00.970
through all the articles in your Shopify site,

38
00:02:00.970 --> 00:02:05.230
and you can't look through all the products in your Shopify site either.

39
00:02:05.230 --> 00:02:09.080
The only way you can do that is through the all Collection,

40
00:02:09.080 --> 00:02:10.670
which shows all products.

41
00:02:10.670 --> 00:02:15.440
There's no way for us to actually look through products ourselves using liquid.

42
00:02:15.440 --> 00:02:19.330
Very weird. But maybe they have a reason behind it.

43
00:02:19.330 --> 00:02:21.960
You also can't create your own functions.

44
00:02:21.960 --> 00:02:24.500
This is something you would do in any programming language,

45
00:02:24.500 --> 00:02:27.890
but you can't create functions in liquid.

46
00:02:27.890 --> 00:02:29.435
There is a workaround for this.

47
00:02:29.435 --> 00:02:34.040
Say for instance, if you wanted to use a function in order to reuse code,

48
00:02:34.040 --> 00:02:39.475
and you had some code that just took an input variable and did the same thing every time,

49
00:02:39.475 --> 00:02:44.090
you can still achieve something like a function by using a snippet, and with snippets,

50
00:02:44.090 --> 00:02:45.970
you can actually pass parameters in,

51
00:02:45.970 --> 00:02:48.920
and that's one way you could mimic

52
00:02:48.920 --> 00:02:52.775
certain functions that you would find in other programming languages.

53
00:02:52.775 --> 00:02:56.300
The final thing that I have noted here is you

54
00:02:56.300 --> 00:03:00.255
can create a boolean which is a true or false value.

55
00:03:00.255 --> 00:03:05.540
But you can't assign the result of a comparison to a variable and then cool that boolean.

56
00:03:05.540 --> 00:03:08.770
You'll see what I mean in just a second.

57
00:03:08.770 --> 00:03:11.599
Let's talk about the first example,

58
00:03:11.599 --> 00:03:13.700
which is string concatenation.

59
00:03:13.700 --> 00:03:20.105
I'm going to copy and paste in a comment here for string concatenation and a heading,

60
00:03:20.105 --> 00:03:21.605
so we can see it in our front end.

61
00:03:21.605 --> 00:03:25.445
What I've done here is I've made two variables.

62
00:03:25.445 --> 00:03:29.380
One is my first_ name and the other is my last_ name.

63
00:03:29.380 --> 00:03:34.655
Now maybe I wanted to create a new variable with my full name.

64
00:03:34.655 --> 00:03:37.580
In JavaScript or other programming languages,

65
00:03:37.580 --> 00:03:40.310
you could do this all in one line.

66
00:03:40.310 --> 00:03:42.470
If I open up my console,

67
00:03:42.470 --> 00:03:46.400
clear it, create a firstName,

68
00:03:46.400 --> 00:03:53.725
create a lastName,and then in order to create the fullName,

69
00:03:53.725 --> 00:03:57.155
I could just use what's called string concatenation.

70
00:03:57.155 --> 00:04:02.460
I can add strings to each other like this.

71
00:04:02.460 --> 00:04:07.620
I would use the variable instead of the explicit Christopher.

72
00:04:07.780 --> 00:04:15.435
FirstName plus a space in-between plus the lastName,

73
00:04:15.435 --> 00:04:20.445
and now when I call for a fullName,

74
00:04:20.445 --> 00:04:25.250
I've got the firstName plus a space plus the lastName.

75
00:04:25.250 --> 00:04:29.810
I guess I can just use plus and minuses to add together strings.

76
00:04:29.810 --> 00:04:32.120
In Shopify, it doesn't work like that.

77
00:04:32.120 --> 00:04:34.370
Let's have a look at how we would do that.

78
00:04:34.370 --> 00:04:39.250
The way we do that in Shopify is through the capture tag.

79
00:04:39.250 --> 00:04:48.305
What capture does is it will capture basically everything inside the capture tags.

80
00:04:48.305 --> 00:04:50.240
We can run a loop inside here.

81
00:04:50.240 --> 00:04:52.040
We can do all sorts of things.

82
00:04:52.040 --> 00:04:55.265
All I'm going to do is a very simple example.

83
00:04:55.265 --> 00:04:59.845
I'm going to output the first_name,

84
00:04:59.845 --> 00:05:05.120
then a space, then output last_name.

85
00:05:05.120 --> 00:05:08.710
Now we've created a variable called fullName.

86
00:05:08.710 --> 00:05:13.460
What I can just do is output that variable, full_Name,

87
00:05:13.460 --> 00:05:17.135
and just so we know where it's coming up on the front end,

88
00:05:17.135 --> 00:05:21.330
I'm going to put full_name in front of it as well.

89
00:05:21.330 --> 00:05:27.405
Now, let's open up our preview in a new tab and we'll see I've got a heading,

90
00:05:27.405 --> 00:05:31.230
String Concatenation, Full Name, Christopher Dodd.

91
00:05:31.230 --> 00:05:33.770
Unfortunately, I've got my footer here as well,

92
00:05:33.770 --> 00:05:35.585
which makes it look ugly.

93
00:05:35.585 --> 00:05:39.950
Let me just remove that from

94
00:05:39.950 --> 00:05:44.885
the footer briefly because this will be the last lesson we do on liquid.

95
00:05:44.885 --> 00:05:47.340
If I go back to here,

96
00:05:47.340 --> 00:05:49.550
we don't have that footer text anymore.

97
00:05:49.550 --> 00:05:55.620
Now you can see the results of fullName has come out.

98
00:05:55.620 --> 00:05:58.955
Now this is a very basic example,

99
00:05:58.955 --> 00:06:01.165
but you can imagine what you could do here.

100
00:06:01.165 --> 00:06:03.710
You could put all sorts of operations in here.

101
00:06:03.710 --> 00:06:08.290
You can create a full loop and we'll actually see in a later example in

102
00:06:08.290 --> 00:06:15.065
this video how we're putting a full loop inside a capture in order to make an array.

103
00:06:15.065 --> 00:06:17.425
Let's look at the next example.

104
00:06:17.425 --> 00:06:20.560
For the next example, I'm going to copy and paste the code directly in

105
00:06:20.560 --> 00:06:25.240
because there's quite a bit here and I don't want to rewrite it.

106
00:06:25.240 --> 00:06:28.980
Basically, this example is on sub-strings.

107
00:06:28.980 --> 00:06:31.490
Sub-strings, like the name suggests,

108
00:06:31.490 --> 00:06:33.800
a part of a string.

109
00:06:33.800 --> 00:06:41.985
Say for instance, we wanted to grab the actual video ID part of a YouTube video URL.

110
00:06:41.985 --> 00:06:45.935
In other programming languages like JavaScript,

111
00:06:45.935 --> 00:06:48.424
we could use a function called substring,

112
00:06:48.424 --> 00:06:52.930
and we could select where we want the substring to start and end,

113
00:06:52.930 --> 00:06:55.765
and then we could assign that to a new variable.

114
00:06:55.765 --> 00:06:59.540
Well, it's a bit different in Shopify liquid because there's

115
00:06:59.540 --> 00:07:03.965
no substring function or method within Shopify liquid.

116
00:07:03.965 --> 00:07:08.270
What we need to do is actually create an array from the string,

117
00:07:08.270 --> 00:07:11.240
and then we're going to find the part that we're looking

118
00:07:11.240 --> 00:07:15.385
for by taking one of the items of the array.

119
00:07:15.385 --> 00:07:20.165
We've got this YouTube video URL stored in this variable,

120
00:07:20.165 --> 00:07:25.100
and first of all, we're going to check if it contains youtube.com slash watch.

121
00:07:25.100 --> 00:07:26.410
This is an optional step.

122
00:07:26.410 --> 00:07:28.700
It's not necessarily relevant to the example,

123
00:07:28.700 --> 00:07:30.290
but this is what you'd want to do.

124
00:07:30.290 --> 00:07:34.285
You'd want to check if it actually does have this in the URL,

125
00:07:34.285 --> 00:07:35.610
and then if it does,

126
00:07:35.610 --> 00:07:40.235
what we're going to do is we're going to split the string around

127
00:07:40.235 --> 00:07:45.595
the v equals and then we have access to what's on either side of it.

128
00:07:45.595 --> 00:07:50.375
Now this is where it gets confusing because we have to do this in multiple steps,

129
00:07:50.375 --> 00:07:54.230
and it makes it hard to label your variables correctly.

130
00:07:54.230 --> 00:07:57.620
This example, we've got video_id here,

131
00:07:57.620 --> 00:08:01.715
and then we're reassigning it to something completely different down here.

132
00:08:01.715 --> 00:08:06.290
Here video_id doesn't necessarily make sense as a variable name.

133
00:08:06.290 --> 00:08:11.980
But what we're doing here is just creating an array in order to access our video id.

134
00:08:11.980 --> 00:08:14.000
If I can talk through it a little bit,

135
00:08:14.000 --> 00:08:17.660
what we're doing is we're creating a variable where we're taking

136
00:08:17.660 --> 00:08:21.720
the URL and we're going to split it by v equals.

137
00:08:21.720 --> 00:08:23.495
If we remember what split does,

138
00:08:23.495 --> 00:08:25.625
it creates an array.

139
00:08:25.625 --> 00:08:30.825
Now we've got this video_id array and it's got two items.

140
00:08:30.825 --> 00:08:33.650
It's got everything before the v equals,

141
00:08:33.650 --> 00:08:36.265
and after the v equals.

142
00:08:36.265 --> 00:08:37.945
We're going put in an extra check here.

143
00:08:37.945 --> 00:08:39.485
Again, it is not compulsory,

144
00:08:39.485 --> 00:08:42.455
but if you have a second argument in your YouTube URL,

145
00:08:42.455 --> 00:08:43.780
you're going to want to check for that.

146
00:08:43.780 --> 00:08:45.155
If that's the case,

147
00:08:45.155 --> 00:08:49.640
we're going to split again because we don't want the part after the end.

148
00:08:49.640 --> 00:08:55.100
Say for instance, I went over here and maybe I put in a time,

149
00:08:55.100 --> 00:08:59.630
I think the code is t in YouTube, t or s,

150
00:08:59.630 --> 00:09:02.240
I think let me just save that because we're

151
00:09:02.240 --> 00:09:05.630
filtering here and taking out the part after the end,

152
00:09:05.630 --> 00:09:07.205
we should be fine anyway.

153
00:09:07.205 --> 00:09:10.250
Now what I'm doing is taking that array up here,

154
00:09:10.250 --> 00:09:13.085
finding the second value in that array,

155
00:09:13.085 --> 00:09:16.390
which will be the part after v equals,

156
00:09:16.390 --> 00:09:19.080
and then I'm going to split it again by this end.

157
00:09:19.080 --> 00:09:20.730
I'm going to split it again,

158
00:09:20.730 --> 00:09:21.995
and on the same line,

159
00:09:21.995 --> 00:09:25.910
I'm going to take the first item in the resulting array.

160
00:09:25.910 --> 00:09:29.050
I've got this string which we're going to turn into an array.

161
00:09:29.050 --> 00:09:33.080
Then we're splitting it up with this as the first item of the array,

162
00:09:33.080 --> 00:09:35.990
and then this as the second item of the array.

163
00:09:35.990 --> 00:09:39.500
Then what we have to do is do the exact same thing on this section.

164
00:09:39.500 --> 00:09:45.155
This is going to be the first item of the array,and this on the other side of the end,

165
00:09:45.155 --> 00:09:47.405
which is this split character,

166
00:09:47.405 --> 00:09:52.140
is what's going to be the second item in the array.

167
00:09:52.140 --> 00:09:53.939
Then we just call first,

168
00:09:53.939 --> 00:09:56.015
to get the first item in the array,

169
00:09:56.015 --> 00:09:57.995
we don't care about the second.

170
00:09:57.995 --> 00:10:01.370
What happens is we get our final video_id and

171
00:10:01.370 --> 00:10:04.715
then we can insert that directly into an Embed link.

172
00:10:04.715 --> 00:10:06.500
Let's check if that works.

173
00:10:06.500 --> 00:10:09.530
We're going to go over here and refresh the page.

174
00:10:09.530 --> 00:10:14.140
Now we can see that we have my video link here.

175
00:10:14.140 --> 00:10:21.665
What we just did was we converted this YouTube URL into a YouTube embed URL,

176
00:10:21.665 --> 00:10:24.580
which takes the same id from here.

177
00:10:24.580 --> 00:10:27.470
Now I know this is a lot of lines, and as I said,

178
00:10:27.470 --> 00:10:32.630
the variable names are confusing because we have to take it multiple steps.

179
00:10:32.630 --> 00:10:34.865
You might want to name this something else.

180
00:10:34.865 --> 00:10:43.110
Maybe you want to call this a video URL_parts and then reference it as video_ parts here.

181
00:10:43.110 --> 00:10:46.700
Let's just do that for an example to make it easier.

182
00:10:46.700 --> 00:10:51.315
We've got video parts and then call it video_parts here.

183
00:10:51.315 --> 00:10:54.295
Save that it should still work,

184
00:10:54.295 --> 00:10:57.140
and turns out it does.

185
00:10:57.140 --> 00:10:59.690
That's just a tip if you want to make it more

186
00:10:59.690 --> 00:11:02.375
readable for yourself and it does sound confusing,

187
00:11:02.375 --> 00:11:05.720
you can label the variable something else,

188
00:11:05.720 --> 00:11:09.675
but a lot of times you're going to see it like this way.

189
00:11:09.675 --> 00:11:12.105
You just recycled a variable name.

190
00:11:12.105 --> 00:11:15.785
The next example is probably the most complicated

191
00:11:15.785 --> 00:11:19.610
of the examples I'm going to talk about in this advanced liquid lesson,

192
00:11:19.610 --> 00:11:22.895
and that's creating arrays of objects.

193
00:11:22.895 --> 00:11:29.225
I put objects in double quotation marks here because as we mentioned before,

194
00:11:29.225 --> 00:11:32.720
we can't create objects and liquid and we can't

195
00:11:32.720 --> 00:11:36.250
create our own arrays of objects as we saw before.

196
00:11:36.250 --> 00:11:38.660
The only way we can create an array is by taking

197
00:11:38.660 --> 00:11:43.110
a string and splitting it based on some delimiting value.

198
00:11:43.110 --> 00:11:47.210
Then we have an item for each of the parts

199
00:11:47.210 --> 00:11:51.620
of the string that are between those splitting values.

200
00:11:51.620 --> 00:11:56.160
So that means that we can't actually create arrays of objects.

201
00:11:56.160 --> 00:11:59.175
So as I wrote here, Shopify liquid does not allow for making

202
00:11:59.175 --> 00:12:02.345
objects and neither can you create arrays of objects.

203
00:12:02.345 --> 00:12:05.715
You can, however, make arrays of strings and numbers,

204
00:12:05.715 --> 00:12:09.780
as well as arrays of arrays using Capture and split.

205
00:12:09.780 --> 00:12:11.475
So how do I want to explain this,

206
00:12:11.475 --> 00:12:14.435
for those of you who maybe don't fully get what I'm saying here

207
00:12:14.435 --> 00:12:17.590
is show you an example in JavaScript first.

208
00:12:17.590 --> 00:12:20.790
So in JavaScript, I could create two objects.

209
00:12:20.790 --> 00:12:25.390
Let's create two person objects I'm going to have person1,

210
00:12:26.000 --> 00:12:31.195
which is going to have a first name and last name of Christopher Dodd.

211
00:12:31.195 --> 00:12:35.400
Then I came up with a random person name for person2,

212
00:12:35.400 --> 00:12:38.750
which is going to be Michael Jordan.

213
00:12:38.750 --> 00:12:41.030
I don't know why I chose Michael Jordan.

214
00:12:41.030 --> 00:12:44.610
His name just came to me not making any comparisons there at all.

215
00:12:44.610 --> 00:12:49.150
So then what I could do is create a person array.

216
00:12:49.150 --> 00:12:52.285
I could store both of those objects in this array.

217
00:12:52.285 --> 00:12:55.755
The way you create an array in JavaScript,

218
00:12:55.755 --> 00:12:57.845
open up a square bracket,

219
00:12:57.845 --> 00:12:59.470
put in your first object,

220
00:12:59.470 --> 00:13:01.575
putting your second object or value.

221
00:13:01.575 --> 00:13:06.590
Then now if I output person array,

222
00:13:06.590 --> 00:13:11.970
you can see I've got this list of objects.

223
00:13:11.970 --> 00:13:13.900
What this allows me to do,

224
00:13:13.900 --> 00:13:16.955
like we've done with looping through products in a collection,

225
00:13:16.955 --> 00:13:23.385
is I can loop through this array and grab the first name of every person, for instance.

226
00:13:23.385 --> 00:13:29.325
Now unfortunately, we can't do that ourselves in Shopify liquid.

227
00:13:29.325 --> 00:13:33.860
The equivalent of what I just did if it existed in Shopify liquid,

228
00:13:33.860 --> 00:13:37.645
would be to create an array called,

229
00:13:37.645 --> 00:13:43.560
let's just call it collections I don't think we're using that already.

230
00:13:43.560 --> 00:13:48.180
I could just can't use square brackets in liquid,

231
00:13:48.180 --> 00:13:52.035
but it'd be nice if you could create something like this collection,

232
00:13:52.035 --> 00:13:55.965
collection2 and then we end it like that.

233
00:13:55.965 --> 00:13:59.250
So now we've created this array of collections.

234
00:13:59.250 --> 00:14:00.800
So if I save that,

235
00:14:00.800 --> 00:14:03.615
we're going to get a liquid error up here.

236
00:14:03.615 --> 00:14:11.390
Liquid syntax error expected end of string but found comma in collection, collection2.

237
00:14:11.390 --> 00:14:15.125
So it's telling us we can't do it and indeed,

238
00:14:15.125 --> 00:14:19.715
if we try and reference the first item in this.

239
00:14:19.715 --> 00:14:23.810
So if I tried to do collections,

240
00:14:23.810 --> 00:14:27.545
take the first item in the array and say title,

241
00:14:27.545 --> 00:14:31.540
if I output that nothing's going to come up on the screen.

242
00:14:31.540 --> 00:14:34.310
We've just got the heading for this section.

243
00:14:34.310 --> 00:14:37.075
But we don't actually have the title

244
00:14:37.075 --> 00:14:40.200
of the first collection because we can't actually do this.

245
00:14:40.200 --> 00:14:43.760
So that can be frustrating at times in liquid,

246
00:14:43.760 --> 00:14:48.895
there are times where we might want to create our own collections, I guess.

247
00:14:48.895 --> 00:14:51.900
But the obvious way around it is to actually create

248
00:14:51.900 --> 00:14:56.610
your collection in Shopify and then you can loop through it like normal.

249
00:14:56.610 --> 00:15:00.660
In Shopify, you can't create objects in liquid,

250
00:15:00.660 --> 00:15:01.865
but you can of course,

251
00:15:01.865 --> 00:15:04.280
create collections in your store and that

252
00:15:04.280 --> 00:15:08.105
is an object with an array of products in there.

253
00:15:08.105 --> 00:15:10.290
There are some workarounds to this.

254
00:15:10.290 --> 00:15:13.800
I'm just going to copy and paste in some more code to go through if you guys now.

255
00:15:13.800 --> 00:15:17.540
This first example is a bit tricky,

256
00:15:17.540 --> 00:15:20.085
but once you get your head around it, it should make sense.

257
00:15:20.085 --> 00:15:23.040
What we're going to do is we're going to use

258
00:15:23.040 --> 00:15:27.670
that capture tag before to create a list of products.

259
00:15:27.670 --> 00:15:31.410
How we're going to limit each of these different attributes?

260
00:15:31.410 --> 00:15:34.260
Is we're going to use a pipe symbol,

261
00:15:34.260 --> 00:15:39.705
and then at the end of that product we're going to put in a double colon.

262
00:15:39.705 --> 00:15:42.380
Let's walk through what's going on here.

263
00:15:42.380 --> 00:15:47.250
So we are capturing the result of this into a variable.

264
00:15:47.250 --> 00:15:52.895
So what we're going to do is loop through a array of products in

265
00:15:52.895 --> 00:15:59.145
a collection and then we're going to grab the pots that we want to have access to.

266
00:15:59.145 --> 00:16:01.395
So we've got product title.

267
00:16:01.395 --> 00:16:05.975
Then we put in a character for us to split that with the next value,

268
00:16:05.975 --> 00:16:07.765
which is product URL,

269
00:16:07.765 --> 00:16:13.760
split again and split again using these values that we've pulled off the product object.

270
00:16:13.760 --> 00:16:19.650
Then this one puts in a delimiter to end the product as long as it's not the last one.

271
00:16:19.650 --> 00:16:22.770
Because we don't want to confuse our split filter

272
00:16:22.770 --> 00:16:26.500
here to think that there is another item after that.

273
00:16:26.500 --> 00:16:28.270
So if it's the last one, that's it.

274
00:16:28.270 --> 00:16:30.275
No more splitting required.

275
00:16:30.275 --> 00:16:33.290
At the end of this, what we're going to have is

276
00:16:33.290 --> 00:16:39.229
a string with all of this information split up by pipes,

277
00:16:39.229 --> 00:16:41.640
and at the end of the product, these two columns.

278
00:16:41.640 --> 00:16:44.990
I think it's going to make the most sense if I just outputted on the page.

279
00:16:44.990 --> 00:16:48.055
So if I just output products,

280
00:16:48.055 --> 00:16:53.390
list, save, and we'll look at the results in our preview.

281
00:16:53.390 --> 00:16:56.220
So if we look down, we've got the title,

282
00:16:56.220 --> 00:17:00.440
then we've got a pipe to separate it from the URL of

283
00:17:00.440 --> 00:17:02.710
that product and we've got another pipe

284
00:17:02.710 --> 00:17:05.665
to separate it from the description of that product.

285
00:17:05.665 --> 00:17:11.175
Then we've got another pipe to separate it from the image URL,

286
00:17:11.175 --> 00:17:16.695
and then we can see here we've got the two colons to separate it from the next product,

287
00:17:16.695 --> 00:17:18.675
and then we've got the same thing again.

288
00:17:18.675 --> 00:17:22.750
So this is not too useful because this is all just one string,

289
00:17:22.750 --> 00:17:26.675
but because we've got those characters in there to indicate when to split,

290
00:17:26.675 --> 00:17:32.025
we can now use the split filter to actually make this into an array.

291
00:17:32.025 --> 00:17:35.320
So now I'm going to create a product's array from

292
00:17:35.320 --> 00:17:38.955
that products list and splitting it by this delimiter.

293
00:17:38.955 --> 00:17:42.395
So now I'm going to have just this part.

294
00:17:42.395 --> 00:17:46.680
I'm going to have an array with items that just have this part.

295
00:17:46.680 --> 00:17:49.295
But again, I want to split that further once I'm

296
00:17:49.295 --> 00:17:52.315
inside it and I want to split by this pipe.

297
00:17:52.315 --> 00:17:54.510
So now I'm going to loop through all of

298
00:17:54.510 --> 00:17:57.390
the products and the products array and then create

299
00:17:57.390 --> 00:18:04.730
another array calledproduct_vals and we're going to split by this now.

300
00:18:04.730 --> 00:18:12.980
Now, I can reference the values inside this array by their position.

301
00:18:12.980 --> 00:18:16.130
So unfortunately, course we're not creating an object here.

302
00:18:16.130 --> 00:18:17.300
I can't actually say,

303
00:18:17.300 --> 00:18:18.840
give me the product title.

304
00:18:18.840 --> 00:18:22.835
So it's not very readable code but again, it's a workaround.

305
00:18:22.835 --> 00:18:25.250
So I can actually use this to find

306
00:18:25.250 --> 00:18:29.550
the first value and if I know the first value is always going to be product title,

307
00:18:29.550 --> 00:18:31.810
then this will give me the product title.

308
00:18:31.810 --> 00:18:33.995
This is going to give me the third value.

309
00:18:33.995 --> 00:18:39.995
So if I look at this one and then I go over here to number three,

310
00:18:39.995 --> 00:18:42.490
it's going to give me the product description.

311
00:18:42.490 --> 00:18:43.745
So if I save that,

312
00:18:43.745 --> 00:18:46.400
I think the code was running before anyway,

313
00:18:46.400 --> 00:18:48.075
we refresh the page.

314
00:18:48.075 --> 00:18:51.520
You'll see that we have the title and

315
00:18:51.520 --> 00:18:55.760
the description of all of these products within that array.

316
00:18:55.760 --> 00:18:58.580
So this isn't a very practical example,

317
00:18:58.580 --> 00:19:01.630
but it's showing you a way that you can actually do

318
00:19:01.630 --> 00:19:04.880
things that you would use an object for,

319
00:19:04.880 --> 00:19:09.045
but do it in Shopify liquid where you can't create objects.

320
00:19:09.045 --> 00:19:11.795
I'm going to do one more example and then we're going to move on.

321
00:19:11.795 --> 00:19:15.080
This example might actually make more sense for you.

322
00:19:15.080 --> 00:19:19.000
So this example I took from raisedbyturtles.org,

323
00:19:19.000 --> 00:19:21.865
definitely check them out and give them a shout out for me.

324
00:19:21.865 --> 00:19:25.150
So what we're doing here is we're creating multiple arrays.

325
00:19:25.150 --> 00:19:29.740
The first array is going to describe what this object is and then

326
00:19:29.740 --> 00:19:34.730
the second array and arrays after that will have values,

327
00:19:34.730 --> 00:19:37.505
attributes basically within that array.

328
00:19:37.505 --> 00:19:40.060
So if you can see what I'm doing here or what

329
00:19:40.060 --> 00:19:42.915
the author at raised by turtles.org has done.

330
00:19:42.915 --> 00:19:48.755
We've created this items array and we splitting by this hash symbol.

331
00:19:48.755 --> 00:19:53.310
So we're going to have in our items array two items, item1 and item2.

332
00:19:53.310 --> 00:19:54.875
Then in that colors array,

333
00:19:54.875 --> 00:19:57.050
we're going to have blue and green.

334
00:19:57.050 --> 00:20:02.615
So the way we can link these together is by their position in the array.

335
00:20:02.615 --> 00:20:06.300
So as long as we write the first item in our colors

336
00:20:06.300 --> 00:20:10.065
array to match up with the first item in our items array,

337
00:20:10.065 --> 00:20:14.405
then we can reference them by the same index and that's what we're doing here.

338
00:20:14.405 --> 00:20:15.800
So what we're doing here,

339
00:20:15.800 --> 00:20:18.120
and ignore these lines here.

340
00:20:18.120 --> 00:20:22.835
That's just to reduce white space it does the exact same thing as that.

341
00:20:22.835 --> 00:20:25.115
But basically what we're doing here is we're

342
00:20:25.115 --> 00:20:27.590
running through every item in the items array,

343
00:20:27.590 --> 00:20:29.745
and if it's the first item,

344
00:20:29.745 --> 00:20:36.010
we're going to get the color attribute by referencing the index of the loop.

345
00:20:36.010 --> 00:20:40.760
So let's just remove this conditional and what we'll get

346
00:20:40.760 --> 00:20:48.035
is we'll get an array of items outputting the color that belongs to it.

347
00:20:48.035 --> 00:20:50.660
So if I hit save,

348
00:20:51.170 --> 00:20:56.220
refresh the page, and I scroll down,

349
00:20:56.220 --> 00:20:59.220
we'll get blue and green.

350
00:20:59.220 --> 00:21:06.170
We can even come here and if we wanted to add the item name associated with that color,

351
00:21:06.170 --> 00:21:10.910
what we could do is because we're already inside the item and the item array,

352
00:21:10.910 --> 00:21:18.030
we can just output item and then I'm going to put a break tag to break these up.

353
00:21:18.030 --> 00:21:22.970
We should see item one blue item to green.

354
00:21:22.970 --> 00:21:29.735
Refresh the page and you'll see item one blue item to green.

355
00:21:29.735 --> 00:21:34.305
Now, I feel like I need to say something here and that's if you don't

356
00:21:34.305 --> 00:21:39.150
fully understand the practical application of this right now, don't worry.

357
00:21:39.150 --> 00:21:41.620
This is advanced liquid stuff.

358
00:21:41.620 --> 00:21:45.165
That's why I called it the Advanced liquid lesson.

359
00:21:45.165 --> 00:21:48.485
Essentially what I'm trying to do here is once you get

360
00:21:48.485 --> 00:21:52.825
deeper into your Shopify liquid programming journey,

361
00:21:52.825 --> 00:21:55.005
and start to master the language more.

362
00:21:55.005 --> 00:21:57.640
You're going to need to know how to do things at

363
00:21:57.640 --> 00:22:00.645
the fringes and so that's what this lesson is about.

364
00:22:00.645 --> 00:22:03.585
Using the references that I've shown you already,

365
00:22:03.585 --> 00:22:07.069
using your arm practice with Shopify theme programming,

366
00:22:07.069 --> 00:22:09.670
and then coming to a point where there's

367
00:22:09.670 --> 00:22:12.455
certain stuff I want to do in the programming language.

368
00:22:12.455 --> 00:22:15.120
What am I limitations and how do I get around that?

369
00:22:15.120 --> 00:22:17.540
So if you're not at that stage yet,

370
00:22:17.540 --> 00:22:18.845
don't worry too much,

371
00:22:18.845 --> 00:22:20.910
I just thought I'd mention that right now

372
00:22:20.910 --> 00:22:23.930
because this is an area where you might be thinking,

373
00:22:23.930 --> 00:22:26.620
okay, Chris, why do I need to do this stuff?

374
00:22:26.620 --> 00:22:29.345
Well, if you don't need to do it yet, don't worry.

375
00:22:29.345 --> 00:22:31.865
But this is stuff once you get real deep into

376
00:22:31.865 --> 00:22:35.560
Shopify liquid that you're going to want to be aware of.

377
00:22:35.560 --> 00:22:37.340
Okay, as program is,

378
00:22:37.340 --> 00:22:40.125
we'd like to think that there's a consistent,

379
00:22:40.125 --> 00:22:41.955
conventional way of doing things.

380
00:22:41.955 --> 00:22:44.285
But the frustrating thing with Shopify liquid

381
00:22:44.285 --> 00:22:47.045
is that it's a templating language developed by Shopify,

382
00:22:47.045 --> 00:22:49.205
and there's a lot of quirks and differences in there.

383
00:22:49.205 --> 00:22:51.635
It defies convention in a lot of ways.

384
00:22:51.635 --> 00:22:55.700
So this lesson is like the antidote to that.

385
00:22:55.700 --> 00:22:59.695
So again, this is some advanced stuff. Don't worry too much.

386
00:22:59.695 --> 00:23:02.285
If this is not something you can use straight away.

387
00:23:02.285 --> 00:23:05.650
But maybe it's something to come back to at a later date.

388
00:23:05.650 --> 00:23:09.285
That being said, let's move on to our final examples.

389
00:23:09.285 --> 00:23:13.650
The next example is about storing Boolean values.

390
00:23:13.650 --> 00:23:16.595
So as I mentioned up above,

391
00:23:16.595 --> 00:23:20.080
let me split this up.

392
00:23:20.120 --> 00:23:23.970
Call this creating Booleans.

393
00:23:23.970 --> 00:23:26.762
As I mentioned up above here.

394
00:23:26.762 --> 00:23:28.950
We can create a Boolean,

395
00:23:28.950 --> 00:23:34.585
but only by assigning it explicitly true or false.

396
00:23:34.585 --> 00:23:38.605
We can actually assign the result of a comparison to a variable.

397
00:23:38.605 --> 00:23:40.825
What I mean by that is, again,

398
00:23:40.825 --> 00:23:44.345
I'm going to show you an example in JavaScript.

