WEBVTT
ï»¿1
00:00:00.000 --> 00:00:02.190
Welcome back guys. In this lesson we're going to be

2
00:00:02.190 --> 00:00:05.324
talking all about the Shopify ajax API.

3
00:00:05.324 --> 00:00:08.610
I'm currently on the official Shopify documentation,

4
00:00:08.610 --> 00:00:15.510
I found this page just by searching for a Shopify ajax API and Google should be

5
00:00:15.510 --> 00:00:18.900
the first result or one of the first results and this is

6
00:00:18.900 --> 00:00:23.700
the page on the documentation for the Shopify ajax API.

7
00:00:23.700 --> 00:00:28.815
It's pretty good, covers almost everything you can do with the ajax API.

8
00:00:28.815 --> 00:00:31.665
There are a few hidden gems within Shopify.

9
00:00:31.665 --> 00:00:38.745
Basically, the Shopify ajax API is mainly for adding items to the cart,

10
00:00:38.745 --> 00:00:40.710
updating quantities in the cart,

11
00:00:40.710 --> 00:00:45.370
basically doing anything with the cart without a page refresh,

12
00:00:45.370 --> 00:00:52.520
as it says here, I've got an example here of a Shopify store running the impulse theme.

13
00:00:52.520 --> 00:00:58.345
Impulse is a premium Shopify theme that is pretty modern.

14
00:00:58.345 --> 00:01:03.890
I want you to have a look at what happens when I'm on this product page,

15
00:01:03.890 --> 00:01:07.980
I select a variance and I click "Add to cart".

16
00:01:08.540 --> 00:01:15.590
Here you can see that there's this side cart or side drawer that comes out with the cart,

17
00:01:15.590 --> 00:01:21.300
and I can actually increase the quantity here and the price updates,

18
00:01:21.300 --> 00:01:28.510
and I can decrease the quantity and I can set it to zero and now the cart is empty.

19
00:01:28.510 --> 00:01:30.095
The whole time I'm doing this,

20
00:01:30.095 --> 00:01:31.730
I'm not reloading the page.

21
00:01:31.730 --> 00:01:33.470
As you can see from up here,

22
00:01:33.470 --> 00:01:35.970
there is no new page being loaded,

23
00:01:35.970 --> 00:01:40.885
it is simply opening up this drawer which is already on the page.

24
00:01:40.885 --> 00:01:46.310
How is it doing this? It is doing this through the Shopify ajax API,

25
00:01:46.310 --> 00:01:49.540
and I can prove it by opening up my developer tools,

26
00:01:49.540 --> 00:01:52.160
over here in the Network tab,

27
00:01:52.160 --> 00:01:55.025
I can see all the network requests.

28
00:01:55.025 --> 00:02:03.480
Let's add an item to the cart and you'll see the first one that came up, add.js,

29
00:02:03.480 --> 00:02:10.535
and you can see here the endpoint that is going to is cart/add.js,

30
00:02:10.535 --> 00:02:12.250
and it's sending through,

31
00:02:12.250 --> 00:02:13.950
a bunch of information.

32
00:02:13.950 --> 00:02:15.855
Now you can see the response,

33
00:02:15.855 --> 00:02:20.765
it's a bunch of cut information for this particular product variant.

34
00:02:20.765 --> 00:02:27.275
You'll see here that we also have a get request to cart.js,

35
00:02:27.275 --> 00:02:32.060
and you can see here that we've got the full cart here in this object.

36
00:02:32.060 --> 00:02:34.145
We've got an array for items,

37
00:02:34.145 --> 00:02:37.625
and you can go in and see that item that we just added,

38
00:02:37.625 --> 00:02:41.885
so this is the Shopify ajax API in action.

39
00:02:41.885 --> 00:02:46.055
This right here, is a Shopify ajax API endpoint,

40
00:02:46.055 --> 00:02:50.700
and the reason I know that is because you can find it right here.

41
00:02:50.700 --> 00:02:53.075
Here are the different end points,

42
00:02:53.075 --> 00:02:55.190
and as you can see here,

43
00:02:55.190 --> 00:02:59.705
if I make a get request to this path within a Shopify store,

44
00:02:59.705 --> 00:03:06.315
I can use this to get the cart and it comes back in JSON format again.

45
00:03:06.315 --> 00:03:07.905
Just a heads up,

46
00:03:07.905 --> 00:03:14.050
this might be a little bit advanced for some viewers using APIs and what JSON is,

47
00:03:14.050 --> 00:03:17.120
we did learn about JSON in a previous video,

48
00:03:17.120 --> 00:03:21.200
but here we're actually sending requests to a server and returning

49
00:03:21.200 --> 00:03:25.685
back objects in JSON form if we want to actually use them in our project,

50
00:03:25.685 --> 00:03:28.985
we're going to have to parse these JSON objects.

51
00:03:28.985 --> 00:03:32.390
This can be quite a long topic and you probably

52
00:03:32.390 --> 00:03:36.040
need a bit of knowledge of JavaScript to get your head around this.

53
00:03:36.040 --> 00:03:38.150
Again, this is not a JavaScript course,

54
00:03:38.150 --> 00:03:39.550
this is all about Shopify,

55
00:03:39.550 --> 00:03:45.240
so you should have some fundamentals in HTML, CSS, and JavaScript.

56
00:03:45.240 --> 00:03:49.595
If not, I do have a class here on skillshed.com on JavaScript.

57
00:03:49.595 --> 00:03:53.390
If you want to check that out or any other place you want to learn about it.

58
00:03:53.390 --> 00:03:55.755
But this is what we're going to be doing,

59
00:03:55.755 --> 00:04:02.130
we're going to be querying these endpoints and doing what is going on here.

60
00:04:02.130 --> 00:04:05.630
Now unfortunately, I don't have the time to build

61
00:04:05.630 --> 00:04:11.260
a side cart and all of this user interface in this one lesson,

62
00:04:11.260 --> 00:04:16.775
what we're going to want to do is I'm going to show you the requests just in JavaScript,

63
00:04:16.775 --> 00:04:19.310
and then I'm going to show you an example that I've

64
00:04:19.310 --> 00:04:21.955
done up that I'll give you guys as well,

65
00:04:21.955 --> 00:04:27.110
where I have rented a cart to the page and I'm able to update it,

66
00:04:27.110 --> 00:04:31.385
take away items, update quantities right on the page.

67
00:04:31.385 --> 00:04:35.300
I'll show an example of how you could actually implement

68
00:04:35.300 --> 00:04:40.390
the UI and what's called the event listeners in the end of this video.

69
00:04:40.390 --> 00:04:45.855
But first of all, what I want to do is I'm going to close this down,

70
00:04:45.855 --> 00:04:48.645
I'm going to go back to my testing shop,

71
00:04:48.645 --> 00:04:52.580
and I'm going to go into the new theme that we're working on.

72
00:04:52.580 --> 00:04:55.820
Because we're going to be retrieving data purely through JavaScript,

73
00:04:55.820 --> 00:04:58.790
I don't actually need to open my code editor,

74
00:04:58.790 --> 00:05:00.980
I can actually just do it all through the console,

75
00:05:00.980 --> 00:05:04.125
what I'm going to do is open up a product

76
00:05:04.125 --> 00:05:07.715
that way we can actually add this product to the cart and then I'm going to

77
00:05:07.715 --> 00:05:11.870
open up my Developer Tools and go to the Console

78
00:05:11.870 --> 00:05:17.580
tab.Theme is going to be nicer to look at if we go down here,

79
00:05:17.580 --> 00:05:20.630
and let's write our first request,

80
00:05:20.630 --> 00:05:22.340
which is a basic one,

81
00:05:22.340 --> 00:05:26.370
which is going to get the cart,

82
00:05:26.370 --> 00:05:29.135
if you're starting on a blank project,

83
00:05:29.135 --> 00:05:30.965
you should have an empty cart,

84
00:05:30.965 --> 00:05:34.640
but you'll still get a cart object before we get started though,

85
00:05:34.640 --> 00:05:39.110
it's going to make it a lot easier if we have something called jQuery installed,

86
00:05:39.110 --> 00:05:42.200
if you don't know if jQuery is in your theme,

87
00:05:42.200 --> 00:05:43.700
it's in a lot of themes,

88
00:05:43.700 --> 00:05:50.795
you can write a basic jQuery command and see if it comes up undefined,

89
00:05:50.795 --> 00:05:59.310
I've got undefined for the $ sign version of jQuery and I've got jQuery is not defined.

90
00:05:59.310 --> 00:06:03.680
What I'm going to have to do is include jQuery in

91
00:06:03.680 --> 00:06:08.650
my project.I will have to make one code modification just to bring in jQuery.

92
00:06:08.650 --> 00:06:11.465
JQuery is a library that is just going to make it

93
00:06:11.465 --> 00:06:16.300
easier for us to do these Ajax requests.

94
00:06:16.300 --> 00:06:24.730
I'm going to type in jQuery into google and find a link to the CDN,

95
00:06:24.730 --> 00:06:32.330
right here, and I can just grab the minified version of the latest version.

96
00:06:32.330 --> 00:06:36.040
I'm going to copy that script tag,

97
00:06:36.040 --> 00:06:40.020
go into my layout file,

98
00:06:40.020 --> 00:06:42.065
and I'm just going to paste that in.

99
00:06:42.065 --> 00:06:47.485
Hit "Save". Now if I refresh the page,

100
00:06:47.485 --> 00:06:52.540
I can check if I have jQuery installed by doing the same command,

101
00:06:52.540 --> 00:06:55.715
and now you can see I get a function back.

102
00:06:55.715 --> 00:07:00.925
I can try the same thing with the jQuery keyword itself,

103
00:07:00.925 --> 00:07:02.335
and I get the same thing.

104
00:07:02.335 --> 00:07:05.230
There's no error saying what is jQuery,

105
00:07:05.230 --> 00:07:08.560
so we know now we've got jQuery and now we have

106
00:07:08.560 --> 00:07:12.110
a few nicer functions to do to get requests with.

107
00:07:12.110 --> 00:07:18.175
The first one is a request to cut JS to get the cart,

108
00:07:18.175 --> 00:07:19.870
so this is a very simple one.

109
00:07:19.870 --> 00:07:24.870
I'm going to use the get function in jQuery,

110
00:07:24.870 --> 00:07:28.630
and I'm going to put in as the first parameter, the end points,

111
00:07:28.630 --> 00:07:32.080
which is simply /cart.js,

112
00:07:32.080 --> 00:07:35.975
and then I'm going to put in my callback function.

113
00:07:35.975 --> 00:07:40.210
What's going to happen here is I'm going to make a request to

114
00:07:40.210 --> 00:07:45.670
this end point and then I'm going to access the data that comes back,

115
00:07:45.670 --> 00:07:48.955
so what I'm going to do is console log

116
00:07:48.955 --> 00:07:53.480
the data so we can see it right here in our console.

117
00:07:53.990 --> 00:07:56.965
I'm not sure why I get this error here,

118
00:07:56.965 --> 00:07:58.300
but as you can see,

119
00:07:58.300 --> 00:08:00.500
I've got the data back.

120
00:08:00.500 --> 00:08:01.930
The issue with it, however,

121
00:08:01.930 --> 00:08:04.255
is that it's in one giant string,

122
00:08:04.255 --> 00:08:07.345
so what I'm going to have to do is parse this,

123
00:08:07.345 --> 00:08:09.505
because this is just a JSON string,

124
00:08:09.505 --> 00:08:13.070
but we're easily able to what's called parse this,

125
00:08:13.070 --> 00:08:17.140
and we'll get back a JavaScript object that we can work with.

126
00:08:17.140 --> 00:08:20.570
Instead of just putting in data,

127
00:08:20.570 --> 00:08:24.200
I'm going to wrap that in a parse,

128
00:08:24.200 --> 00:08:26.405
and now you can see we get

129
00:08:26.405 --> 00:08:30.670
a JavaScript object back that we can actually navigate and look inside.

130
00:08:30.670 --> 00:08:33.470
Now it looks like I've already got an item in my cart,

131
00:08:33.470 --> 00:08:36.800
and to verify that that's the correct information,

132
00:08:36.800 --> 00:08:39.085
I'm actually just going to go to my cart page,

133
00:08:39.085 --> 00:08:40.970
and I see, yes,

134
00:08:40.970 --> 00:08:44.180
I've got three of these awesome sneakers in my cart.

135
00:08:44.180 --> 00:08:47.345
Let's remove that product from my cart.

136
00:08:47.345 --> 00:08:49.085
Cart is now empty,

137
00:08:49.085 --> 00:08:51.485
let's go back to that product page,

138
00:08:51.485 --> 00:08:56.810
any product page, and I'm going to rerun that "Command".

139
00:08:56.810 --> 00:08:59.860
Now, you can see in our cart,

140
00:08:59.860 --> 00:09:05.320
we've got item cart zero and we've got the array of items which is currently empty,

141
00:09:05.320 --> 00:09:07.210
just as we would expect.

142
00:09:07.210 --> 00:09:12.355
What's happening here is without having to go into our back-end code,

143
00:09:12.355 --> 00:09:19.630
I'm able to retrieve the cart from our Shopify store all in the browser.

144
00:09:19.630 --> 00:09:21.715
From a practical perspective,

145
00:09:21.715 --> 00:09:26.590
this is what allows us to do things purely on the front end and in

146
00:09:26.590 --> 00:09:28.165
Shopify the place where it makes

147
00:09:28.165 --> 00:09:31.780
the most sense to have this functionality is with the cart.

148
00:09:31.780 --> 00:09:37.495
Because the cart is the main point of interaction with your Shopify store.

149
00:09:37.495 --> 00:09:40.840
People are browsing products most of the time,

150
00:09:40.840 --> 00:09:42.310
they're looking at content.

151
00:09:42.310 --> 00:09:45.715
The main interaction happens when the person is ready to purchase.

152
00:09:45.715 --> 00:09:48.970
They put the item in the cart and then they turn

153
00:09:48.970 --> 00:09:52.645
that cart into a checkout and complete their checkout.

154
00:09:52.645 --> 00:09:54.970
It's no wonder that Shopify provides

155
00:09:54.970 --> 00:09:59.815
this API for you to actually do stuff like this with your cart.

156
00:09:59.815 --> 00:10:02.110
Let's run through the next one.

157
00:10:02.110 --> 00:10:05.335
Let's actually, add an item to our cart.

158
00:10:05.335 --> 00:10:10.240
I'm going to scroll up to the top and this is the one I'm looking for.

159
00:10:10.240 --> 00:10:13.600
Use this to add a variant to the cart.

160
00:10:13.600 --> 00:10:18.130
Remember, it's a variant that gets added to the cart, not the product.

161
00:10:18.130 --> 00:10:23.080
What we're going to need to do is grab the variant selection from

162
00:10:23.080 --> 00:10:28.315
this form and then submit it to the cart using this post request.

163
00:10:28.315 --> 00:10:30.040
We can do this in two ways.

164
00:10:30.040 --> 00:10:36.310
We can specify the variant ID and the quantity that we want to add to the cart.

165
00:10:36.310 --> 00:10:41.259
But the problem with this is we don't yet know the variant until

166
00:10:41.259 --> 00:10:47.110
a person puts in their selection and the variant is determined from this selection.

167
00:10:47.110 --> 00:10:52.690
What we can do is instead serialize the form and what that's going to do is

168
00:10:52.690 --> 00:10:58.690
take all the data of the form and it's going to come out as an object here for us.

169
00:10:58.690 --> 00:11:01.915
Let's use that example right here.

170
00:11:01.915 --> 00:11:05.020
I'm going to go back in here.

171
00:11:05.020 --> 00:11:08.650
As long as we have a form on our page with

172
00:11:08.650 --> 00:11:12.490
the action of cart slash add, this is going to work.

173
00:11:12.490 --> 00:11:15.520
I'm going to hit "Enter" on that.

174
00:11:15.520 --> 00:11:19.705
Now let's load the cart again, and see what happened.

175
00:11:19.705 --> 00:11:23.845
If we open up our cart, we can now see the item count is one.

176
00:11:23.845 --> 00:11:27.920
In our array we have an item,

177
00:11:27.920 --> 00:11:32.895
and the item is the variance of our selection here.

178
00:11:32.895 --> 00:11:36.060
I'm going to click this to clean this up a bit.

179
00:11:36.060 --> 00:11:40.110
I want to run the add to cart Ajax requests

180
00:11:40.110 --> 00:11:42.760
one more time and I want to have a look in

181
00:11:42.760 --> 00:11:45.895
a network tab at what's actually happening here.

182
00:11:45.895 --> 00:11:49.000
Remember, we serialized our form and we

183
00:11:49.000 --> 00:11:52.315
send that data off to Shopify and you can see here,

184
00:11:52.315 --> 00:11:55.570
what that's done is given us an object with

185
00:11:55.570 --> 00:12:00.610
the ID of the variant we want to add and how many of them we want to add.

186
00:12:00.610 --> 00:12:05.185
We don't necessarily need a product form if we're able to find

187
00:12:05.185 --> 00:12:10.045
the variant through other means just as a FYI there.

188
00:12:10.045 --> 00:12:14.965
We could actually, instead of serializing the form,

189
00:12:14.965 --> 00:12:18.265
if we knew the variant ID for some other means,

190
00:12:18.265 --> 00:12:23.604
we can just put in an object here with the variant ID,

191
00:12:23.604 --> 00:12:25.345
copy it from here,

192
00:12:25.345 --> 00:12:31.345
and then the quantity and then that will do the exact same thing.

193
00:12:31.345 --> 00:12:38.050
If I clear the console and I run the get cart again,

194
00:12:38.050 --> 00:12:44.470
you'll now see that we have three of these shoes now in our cart.

195
00:12:44.470 --> 00:12:48.445
Just a few more things you can do with the Ajax API.

196
00:12:48.445 --> 00:12:50.860
We can clear the cart.

197
00:12:50.860 --> 00:12:55.855
We can make a post request to /cart /clear.js,

198
00:12:55.855 --> 00:12:59.320
sets all quantities of all line items to zero,

199
00:12:59.320 --> 00:13:01.585
so clears your cart.

200
00:13:01.585 --> 00:13:05.170
Let's go back in here,

201
00:13:05.170 --> 00:13:09.850
make a post request using jQuery and the endpoints

202
00:13:09.850 --> 00:13:17.170
was cart clear and we don't need to send any more data with it,

203
00:13:17.170 --> 00:13:20.095
so we can just write it like that.

204
00:13:20.095 --> 00:13:24.055
Now, if we run get cart again,

205
00:13:24.055 --> 00:13:26.920
you'll see our cart is completely empty.

206
00:13:26.920 --> 00:13:31.090
The last thing you'll probably want to do with your cart using

207
00:13:31.090 --> 00:13:36.475
the Ajax API is to update the quantity.

208
00:13:36.475 --> 00:13:42.655
Here you can use the post request to the cart slash change endpoint,

209
00:13:42.655 --> 00:13:47.260
and you can change the quantity of an item already in the cart.

210
00:13:47.260 --> 00:13:52.070
What we're going to do is add a variant to the cart again.

211
00:13:52.710 --> 00:13:57.070
Just copying and doing the same request again.

212
00:13:57.070 --> 00:14:02.350
Now, I can create a post request to

213
00:14:02.350 --> 00:14:10.060
this endpoint and put in an object just like I had before.

214
00:14:10.060 --> 00:14:16.930
I can strip it off here and maybe I want to update the quantity to five.

215
00:14:16.930 --> 00:14:21.805
Now, I can send that post request.

216
00:14:21.805 --> 00:14:26.665
Let's clear the console and let's open up the cart.

217
00:14:26.665 --> 00:14:29.605
I just added another one. Now, we should have

218
00:14:29.605 --> 00:14:34.000
six is the one I'm looking for and as you can see,

219
00:14:34.000 --> 00:14:36.010
we have six of this item.

220
00:14:36.010 --> 00:14:39.730
We have just one line item because it's all the same variant,

221
00:14:39.730 --> 00:14:41.950
but the quantity is six.

222
00:14:41.950 --> 00:14:45.385
It's got all the information here about the variant.

223
00:14:45.385 --> 00:14:47.530
Now, in line item form,

224
00:14:47.530 --> 00:14:49.075
as you'll see on the cart.

225
00:14:49.075 --> 00:14:52.750
Alright, cool. Those are the main things you would want to do with your cart.

226
00:14:52.750 --> 00:14:55.990
In the example, we saw and the example,

227
00:14:55.990 --> 00:14:57.565
I'll show you in a sec.

228
00:14:57.565 --> 00:15:02.260
That's what we're using the Ajax API for.

229
00:15:02.260 --> 00:15:06.850
The Shopify Ajax API makes it really easy using

230
00:15:06.850 --> 00:15:11.515
these endpoints to retrieve data about your cart and modify your cart.

231
00:15:11.515 --> 00:15:14.620
The real challenge comes from sending up

232
00:15:14.620 --> 00:15:19.810
event listeners and handling that response to update your UI.

233
00:15:19.810 --> 00:15:24.310
Unfortunately, that is a very JavaScript heavy lesson

234
00:15:24.310 --> 00:15:27.535
and not particularly specific to Shopify.

235
00:15:27.535 --> 00:15:29.920
That's why I'm just going to show you an example,

236
00:15:29.920 --> 00:15:31.750
now and run through it,

237
00:15:31.750 --> 00:15:34.825
but we're not going to code it from scratch in this lesson.

238
00:15:34.825 --> 00:15:36.340
The reason why is,

239
00:15:36.340 --> 00:15:39.775
it is general JavaScript knowledge of how to do this.

240
00:15:39.775 --> 00:15:42.700
If you want to learn more about JavaScript, again,

241
00:15:42.700 --> 00:15:44.755
I have a class on skill share,

242
00:15:44.755 --> 00:15:47.545
or you can learn about JavaScript somewhere else.

243
00:15:47.545 --> 00:15:49.720
This is just concerned with Shopify,

244
00:15:49.720 --> 00:15:54.100
but I do want to give you an example of, what it would look like.

245
00:15:54.100 --> 00:15:57.970
If I close down this preview and we head back into the store,

246
00:15:57.970 --> 00:16:04.180
I've actually set up a theme with an example of a reactive cart.

247
00:16:04.180 --> 00:16:08.125
Right here, I've got this theme called Ajax API Demo,

248
00:16:08.125 --> 00:16:10.090
and its based off the new theme.

249
00:16:10.090 --> 00:16:14.140
Basically, the only thing I've changed is I've added Bootstrap,

250
00:16:14.140 --> 00:16:16.210
which is a CSS framework.

251
00:16:16.210 --> 00:16:20.770
You'll see the styles are a little bit different and we've got these buttons,

252
00:16:20.770 --> 00:16:22.465
styles right out the gate.

253
00:16:22.465 --> 00:16:25.360
If I go into a product,

254
00:16:25.360 --> 00:16:29.665
you can see that the cart is sitting right next to the product,

255
00:16:29.665 --> 00:16:32.605
and if I add an item to the cart,

256
00:16:32.605 --> 00:16:36.415
I don't need to go to the cart page to see my cart updating.

257
00:16:36.415 --> 00:16:42.265
I can even change quantities and all the different parts of my cart will update.

258
00:16:42.265 --> 00:16:46.630
As I said, usually you would have to go to the cart page and view it there.

259
00:16:46.630 --> 00:16:47.860
But even from here,

260
00:16:47.860 --> 00:16:51.895
you can't update quantities without having to reload the page.

261
00:16:51.895 --> 00:16:55.750
In order to make a cart like the one we just saw,

262
00:16:55.750 --> 00:16:58.450
so going back to the product template,

263
00:16:58.450 --> 00:17:02.650
we must use JavaScript and the Ajax API.

264
00:17:02.650 --> 00:17:05.860
Just to prove to you that this is using the Ajax API,

265
00:17:05.860 --> 00:17:12.175
I'm going to open up my Developer Tools and I'm going to have a look in the Network tab.

266
00:17:12.175 --> 00:17:19.270
The first thing I want to do is actually before we look in the Network tab,

267
00:17:19.270 --> 00:17:21.805
I just want to clear the cart completely.

268
00:17:21.805 --> 00:17:24.805
I'm going to clear this console as well.

269
00:17:24.805 --> 00:17:27.910
Now, let's add an item to the cart.

270
00:17:27.910 --> 00:17:32.305
As you can see, we've got a request to add.js.

271
00:17:32.305 --> 00:17:34.255
If I look inside there,

272
00:17:34.255 --> 00:17:39.790
we can see what we're sending is an ID and a quantity.

273
00:17:39.790 --> 00:17:41.620
This is the data from the form.

274
00:17:41.620 --> 00:17:44.785
What it's doing is actually serializing the form,

275
00:17:44.785 --> 00:17:49.540
grabbing this data and then it's sending it to the Ajax API.

276
00:17:49.540 --> 00:17:53.005
Actually before this, before we even add an item to the cut,

277
00:17:53.005 --> 00:17:55.670
if I just refresh the page.

278
00:17:55.740 --> 00:18:00.055
You'll see we're getting the cut from the Ajax API.

279
00:18:00.055 --> 00:18:04.000
The reason why you can tell that is if we look in here,

280
00:18:04.000 --> 00:18:07.555
we can see a get request to cart.js.

281
00:18:07.555 --> 00:18:08.815
If I open that up,

282
00:18:08.815 --> 00:18:13.120
I'm just going to have to move this across a little bit.You can see we

283
00:18:13.120 --> 00:18:17.575
haven't sent anything because we're just asking to get to the cart,

284
00:18:17.575 --> 00:18:19.360
we're not posting anything.

285
00:18:19.360 --> 00:18:24.175
You'll see the response we get back is the whole cart as an object.

286
00:18:24.175 --> 00:18:28.135
Remember we saw this before when we were just working in our console.

287
00:18:28.135 --> 00:18:33.685
But the difference now is the page loading is actually triggering this.

288
00:18:33.685 --> 00:18:39.610
Then what's happening is we're taking this data and we're representing it on the page.

289
00:18:39.610 --> 00:18:43.945
Let's have a look at what happens when I add another item to the cart.

290
00:18:43.945 --> 00:18:47.410
We make a request to add.js.

291
00:18:47.410 --> 00:18:52.030
You can see here what we get back is a line item.

292
00:18:52.030 --> 00:18:53.710
We don't get back the whole cart,

293
00:18:53.710 --> 00:18:55.480
but we get back a line item,

294
00:18:55.480 --> 00:18:59.605
and that gives us the necessary information to update our cart.

295
00:18:59.605 --> 00:19:01.945
Now, if I increase the quantity,

296
00:19:01.945 --> 00:19:05.410
you can see we're making a request to change.js,

297
00:19:05.410 --> 00:19:06.835
which is another end point.

298
00:19:06.835 --> 00:19:10.150
You can see here that change.js.

299
00:19:10.150 --> 00:19:12.115
What we're doing is we're sending

300
00:19:12.115 --> 00:19:16.885
the ID and we're sending through the quantity that we needed to change to.

301
00:19:16.885 --> 00:19:22.255
What that will do is it'll take the data and then it will return the whole cart again.

302
00:19:22.255 --> 00:19:25.480
You can see here, if we go look inside the item,

303
00:19:25.480 --> 00:19:28.300
we can see quantity somewhere here.

304
00:19:28.300 --> 00:19:29.980
There we go, it's three,

305
00:19:29.980 --> 00:19:33.025
and then the total item count is three there.

306
00:19:33.025 --> 00:19:35.650
If we added another line item,

307
00:19:35.650 --> 00:19:37.735
so we just need to select a different variant,

308
00:19:37.735 --> 00:19:39.580
add that to the cart.

309
00:19:39.580 --> 00:19:45.565
Now you can see we add that line item and now we have all of its data here.

310
00:19:45.565 --> 00:19:48.835
If I was to change the quantity on that,

311
00:19:48.835 --> 00:19:50.785
look at the next request.

312
00:19:50.785 --> 00:19:54.775
You'll see we have five items spread across two lines.

313
00:19:54.775 --> 00:20:00.985
The first line has a quantity of two and the second line has a quantity of three,

314
00:20:00.985 --> 00:20:02.575
for a total of five.

315
00:20:02.575 --> 00:20:05.875
Then, you can see we've got the total price and everything.

316
00:20:05.875 --> 00:20:10.060
I wanted to show you how the Ajax API is

317
00:20:10.060 --> 00:20:14.140
working as well updating the user interface on the page.

318
00:20:14.140 --> 00:20:15.370
Now, as I said before,

319
00:20:15.370 --> 00:20:17.365
there are a few parts to this.

320
00:20:17.365 --> 00:20:19.660
First of all, the event listeners.

321
00:20:19.660 --> 00:20:23.170
Certain things happen on the page called events.

322
00:20:23.170 --> 00:20:27.370
Then those events are set to trigger requests to the Ajax API.

323
00:20:27.370 --> 00:20:29.590
Now, of course, when the data comes back,

324
00:20:29.590 --> 00:20:35.395
we need to actually do something and then that something is updating our user interface.

325
00:20:35.395 --> 00:20:38.545
Let's have a look at the code right now.

326
00:20:38.545 --> 00:20:43.840
If I go back into this theme and I click Edit code,

327
00:20:43.840 --> 00:20:45.925
there is quite a bit of code here,

328
00:20:45.925 --> 00:20:48.160
and I'm not going to explain line by line.

329
00:20:48.160 --> 00:20:54.640
But what I've done here is I've used a templating library code mustache, right her.

330
00:20:54.640 --> 00:20:59.005
What that allows me to do is create these templates.

331
00:20:59.005 --> 00:21:02.575
So this is the template for the whole cart.

332
00:21:02.575 --> 00:21:05.830
This is the template for the line item.

333
00:21:05.830 --> 00:21:07.990
If you want to learn more about mustache,

334
00:21:07.990 --> 00:21:14.725
mustache.js is where you can learn more about it.

335
00:21:14.725 --> 00:21:19.045
Logic list templates, you can read the manual here.

336
00:21:19.045 --> 00:21:22.375
It's not the most sophisticated documentation,

337
00:21:22.375 --> 00:21:27.370
but essentially you can think of mustache like a JavaScript version of liquid.

338
00:21:27.370 --> 00:21:30.295
It actually uses the same delimiters,

339
00:21:30.295 --> 00:21:32.830
which is why we need to actually change the delimiters

340
00:21:32.830 --> 00:21:35.755
to custom ones so that they don't actually conflict.

341
00:21:35.755 --> 00:21:40.255
So as you can see here in this template,

342
00:21:40.255 --> 00:21:42.025
just like we would in liquid,

343
00:21:42.025 --> 00:21:45.680
we would insert a URL like this.

344
00:21:45.680 --> 00:21:48.810
But, of course, because we are in liquid and

345
00:21:48.810 --> 00:21:51.765
the liquid engine is going to interpret that as liquid,

346
00:21:51.765 --> 00:21:54.420
we need to use custom delimiters to

347
00:21:54.420 --> 00:21:59.600
differentiate these template variables from the ones in liquid.

348
00:21:59.600 --> 00:22:04.870
We've got the two templates right here and we've got a whole bunch of

349
00:22:04.870 --> 00:22:10.934
JavaScript that includes our event listeners and then now Ajax API requests,

350
00:22:10.934 --> 00:22:13.200
and then we handle the response.

351
00:22:13.200 --> 00:22:17.075
We've also got some styles in here to style the cart.

352
00:22:17.075 --> 00:22:20.230
As I said, I'm not gonna go through line

353
00:22:20.230 --> 00:22:23.515
by line of this document because there's a lot going on here.

354
00:22:23.515 --> 00:22:28.885
I have written extensive comments on all the different functions.

355
00:22:28.885 --> 00:22:31.960
I would definitely have a read of this file,

356
00:22:31.960 --> 00:22:34.390
and if you have any questions, let me know.

357
00:22:34.390 --> 00:22:38.830
You can access this file through my GitHub page,

358
00:22:38.830 --> 00:22:41.770
I have a repository called skillshare where you can

359
00:22:41.770 --> 00:22:45.025
access resources for all my classes on skillshare.

360
00:22:45.025 --> 00:22:50.155
Right here you can see product.liquid is one of those resources.

361
00:22:50.155 --> 00:22:53.335
This one's actually a little bit nicer to look at because it

362
00:22:53.335 --> 00:22:56.665
does syntax highlighting on these JavaScript templates.

363
00:22:56.665 --> 00:23:01.270
But you'll need to actually move this into your theme in order

364
00:23:01.270 --> 00:23:06.680
to actually interact with this code and see what it's doing.

365
00:23:06.960 --> 00:23:11.965
One more thing before I step through the code a little bit,

366
00:23:11.965 --> 00:23:15.040
is that you will need jQuery installed on your theme.

367
00:23:15.040 --> 00:23:16.615
So if you don't have it already,

368
00:23:16.615 --> 00:23:20.170
you'll need to either install it

369
00:23:20.170 --> 00:23:24.355
by downloading it and including it in your assets folder.

370
00:23:24.355 --> 00:23:30.280
Or the simple way is just to include a link via a script tag to the CDN.

371
00:23:30.280 --> 00:23:32.860
So you can just, how I got this link,

372
00:23:32.860 --> 00:23:35.875
was I went to jQuery,

373
00:23:35.875 --> 00:23:41.710
jQuery CDN, and I found the URL.

374
00:23:41.710 --> 00:23:47.470
So just like we did before when we were doing our requests in the console,

375
00:23:47.470 --> 00:23:52.120
we need to actually include that script in our theme.liquid.

376
00:23:52.120 --> 00:23:54.820
Or if it already exists, that's cool.

377
00:23:54.820 --> 00:23:59.890
But there is some parts in here where we're using jQuery.

378
00:23:59.890 --> 00:24:03.880
As I mentioned, we've got our two templates here.

379
00:24:03.880 --> 00:24:08.185
Before that. We've got the product page as it normally appears.

380
00:24:08.185 --> 00:24:12.460
So here's where our normal product template code is,

381
00:24:12.460 --> 00:24:14.185
which I have over here.

382
00:24:14.185 --> 00:24:18.250
We have a div here for the side cart.

383
00:24:18.250 --> 00:24:22.765
Right here we've got this div with an ID of cart goes here.

384
00:24:22.765 --> 00:24:25.420
The div of the cart goes here,

385
00:24:25.420 --> 00:24:30.100
ID is what we use to tell mustache where to put the template.

386
00:24:30.100 --> 00:24:31.795
When the page loads,

387
00:24:31.795 --> 00:24:36.790
is going to load this template right here into this div.

388
00:24:36.790 --> 00:24:41.635
Now, this other one line item is for when we add a new line item to the cart.

389
00:24:41.635 --> 00:24:43.960
So it's a section of the cart.

390
00:24:43.960 --> 00:24:50.140
What that's going do is it's going to append to a specific part of this template.

391
00:24:50.140 --> 00:24:52.690
This is basically all just mockup with

392
00:24:52.690 --> 00:24:57.490
the appropriate data placed in different parts of this mockup.

393
00:24:57.490 --> 00:24:59.920
The real magic is right here.

394
00:24:59.920 --> 00:25:05.095
So to go through this code in a similar fashion to what I showed you here.

395
00:25:05.095 --> 00:25:08.710
Remember we had, so I'll just put that back to one,

396
00:25:08.710 --> 00:25:12.580
refresh the page and you'll see that cart gets generated.

397
00:25:12.580 --> 00:25:15.175
Now, if I refresh the page again,

398
00:25:15.175 --> 00:25:18.625
you can see that this renders first and then this renders,

399
00:25:18.625 --> 00:25:21.415
that's because this is rendered by liquid.

400
00:25:21.415 --> 00:25:24.220
This is coming from the back-end and this is

401
00:25:24.220 --> 00:25:27.760
actually being rendered on the front end using mustache.

402
00:25:27.760 --> 00:25:33.985
So what does that is this function here, run get cart.

403
00:25:33.985 --> 00:25:36.505
When the page loads,

404
00:25:36.505 --> 00:25:41.335
that's when we run this get cart function/ if we look up here,

405
00:25:41.335 --> 00:25:47.950
what get cart does is it sends a request to the AJax API to get the cart,

406
00:25:47.950 --> 00:25:50.185
it passes that data,

407
00:25:50.185 --> 00:25:54.565
and then it sends it to this function which handles the data.

408
00:25:54.565 --> 00:25:58.165
I've done this handling of the data in a few different places,

409
00:25:58.165 --> 00:26:00.880
which is why I moved that into a different function.

410
00:26:00.880 --> 00:26:03.850
Then you can see the function up here.

411
00:26:03.850 --> 00:26:06.324
What this does is it updates

412
00:26:06.324 --> 00:26:10.435
the cart total and the items based on what comes back from the API,

413
00:26:10.435 --> 00:26:13.720
the API has all the prices in sense,

414
00:26:13.720 --> 00:26:19.000
what we need to do is divide them all by 100 in order to get the price in $,

415
00:26:19.000 --> 00:26:23.005
and then we render the cart with mustache.

416
00:26:23.005 --> 00:26:27.340
This is the mustache method in order to take our template,

417
00:26:27.340 --> 00:26:31.795
take our data, and combine them together to create our output.

418
00:26:31.795 --> 00:26:33.700
Then, as you can see here,

419
00:26:33.700 --> 00:26:37.075
we're taking the element that has the ID of cart goes here,

420
00:26:37.075 --> 00:26:41.170
and we're putting that mustache output right in there.

421
00:26:41.170 --> 00:26:47.110
Okay, so that is what's happening when I first load the page.

422
00:26:47.110 --> 00:26:54.650
It is making that Ajax request and then rendering that template using Mustache.

423
00:26:55.020 --> 00:26:58.480
What about when I add a product to the cart?

424
00:26:58.480 --> 00:27:03.040
So let's just choose this size nine variant and I click Add to cart.

425
00:27:03.040 --> 00:27:04.540
Oh, we already have size nine,

426
00:27:04.540 --> 00:27:07.465
so that's just going to increase the quantity.

427
00:27:07.465 --> 00:27:14.845
If I go into here and I look at the submit Event Listener for add to cart,

428
00:27:14.845 --> 00:27:17.830
we're doing a bunch of different things here where

429
00:27:17.830 --> 00:27:20.710
preventing the form from doing a standard form submit,

430
00:27:20.710 --> 00:27:23.425
so we can handle the form using JavaScript.

431
00:27:23.425 --> 00:27:25.255
We're doing like we did before.

432
00:27:25.255 --> 00:27:28.135
We're serializing the form so we can get its data.

433
00:27:28.135 --> 00:27:33.505
Then we're passing it to the Ajax API for a post request.

434
00:27:33.505 --> 00:27:35.630
We're going pass the response,

435
00:27:35.630 --> 00:27:37.320
update the cart total.

436
00:27:37.320 --> 00:27:40.665
Then we're going to get the response back from the server and handle that.

437
00:27:40.665 --> 00:27:47.145
Remember the response for adding an item to the cart in the Ajax API is the item.

438
00:27:47.145 --> 00:27:56.485
So it's not the whole cart like with cart.js or this one, cart/change.js.

439
00:27:56.485 --> 00:27:59.110
The responses for those are the whole cart,

440
00:27:59.110 --> 00:28:04.480
but the response for this particular request is the line item.

441
00:28:04.480 --> 00:28:06.880
Because of that, the cart total,

442
00:28:06.880 --> 00:28:10.210
we have to figure out ourselves because it's not coming back in the data.

443
00:28:10.210 --> 00:28:11.545
So that's what I've done here.

444
00:28:11.545 --> 00:28:12.955
It's pretty easy to figure out,

445
00:28:12.955 --> 00:28:19.045
is this going to be the previous cart total plus whatever the price of that item is.

446
00:28:19.045 --> 00:28:23.305
Then we actually need to go find it in the UI and update it,

447
00:28:23.305 --> 00:28:28.060
dividing it by 100 in order to get it i $.

448
00:28:28.060 --> 00:28:33.010
This right here, we'll check if the item already exists in the cut.

449
00:28:33.010 --> 00:28:38.785
Remember we added another item of the same variant.

450
00:28:38.785 --> 00:28:41.425
That means that we don't need a new line item,

451
00:28:41.425 --> 00:28:44.455
we just need to update the quantity of that line item.

452
00:28:44.455 --> 00:28:47.080
If I go in here and choose a different variant,

453
00:28:47.080 --> 00:28:50.020
you'll see that we get a new line item.

454
00:28:50.020 --> 00:28:51.940
That's what this conditional does.

455
00:28:51.940 --> 00:28:55.165
It checks if a variant already exists.

456
00:28:55.165 --> 00:28:58.840
You can see the function up here.

457
00:28:58.840 --> 00:29:04.475
We return an array based on whether a match has been found.

458
00:29:04.475 --> 00:29:07.350
If there is a match already,

459
00:29:07.350 --> 00:29:12.240
then instead of running mustache to render a whole new line item,

460
00:29:12.240 --> 00:29:15.435
we just have to update some things on the existing line item.

461
00:29:15.435 --> 00:29:19.120
We just grab the item from the DOM using

462
00:29:19.120 --> 00:29:23.650
this and then we update the quantity and the price.

463
00:29:23.650 --> 00:29:26.680
Here you can see if I add another one,

464
00:29:26.680 --> 00:29:30.040
the things that change are the quantity and the price here,

465
00:29:30.040 --> 00:29:32.095
and of course, the total,

466
00:29:32.095 --> 00:29:34.870
which we already have handled up here.

467
00:29:34.870 --> 00:29:37.120
But if it's a whole new item,

468
00:29:37.120 --> 00:29:42.275
what we're going to do is push that item into our items array.

469
00:29:42.275 --> 00:29:44.460
We're going to take the data,

470
00:29:44.460 --> 00:29:48.675
the prices and we're going to divide them by 100 again to get dollar values.

471
00:29:48.675 --> 00:29:51.965
Then we're going to render the line item template.

472
00:29:51.965 --> 00:29:55.900
Anytime we're rendering a whole new piece of HTML,

473
00:29:55.900 --> 00:29:59.980
I've opted with going with mustache rather than doing jQuery.

474
00:29:59.980 --> 00:30:01.900
If you're writing a whole lot of mark-up,

475
00:30:01.900 --> 00:30:04.375
it helps to have a templating language.

476
00:30:04.375 --> 00:30:09.280
But if you're only updating a few little things like a number here,

477
00:30:09.280 --> 00:30:12.160
then you don't need to really worry.

478
00:30:12.160 --> 00:30:14.845
The last one, which is the one I just did,

479
00:30:14.845 --> 00:30:17.695
is updating the quantity.

480
00:30:17.695 --> 00:30:21.355
If I go on any of these and I update the quantity,

481
00:30:21.355 --> 00:30:23.605
if I set it back to zero,

482
00:30:23.605 --> 00:30:25.930
as you can see here,

483
00:30:25.930 --> 00:30:29.215
if the new quantity is less than one,

484
00:30:29.215 --> 00:30:33.865
what I'm going to do is just hide that item right after the post request.

485
00:30:33.865 --> 00:30:35.365
Stepping back a little bit,

486
00:30:35.365 --> 00:30:41.995
what I'm going to do is set up event listeners here on these quantity adjustment buttons.

487
00:30:41.995 --> 00:30:45.985
The "Plus" one is going to adjust the quantity by positive one.

488
00:30:45.985 --> 00:30:50.485
The "Minus" button is going to adjust the quantity by negative one.

489
00:30:50.485 --> 00:30:54.025
That's going to get passed into here along with the event,

490
00:30:54.025 --> 00:31:00.250
and we are going to find the current quantity and variant ID of the item,

491
00:31:00.250 --> 00:31:04.645
apply the adjustment to the current quantity to get a new quantity,

492
00:31:04.645 --> 00:31:07.060
and then here we send the post request.

493
00:31:07.060 --> 00:31:10.390
The reason why we need to find the quantity and

494
00:31:10.390 --> 00:31:15.040
the variant ID is because these are what's required to send the API.

495
00:31:15.040 --> 00:31:17.920
Then the response we get back is the whole cart,

496
00:31:17.920 --> 00:31:24.205
so we can pause that and then if we are removing an item from the cart,

497
00:31:24.205 --> 00:31:25.585
then we're just going to hide it,

498
00:31:25.585 --> 00:31:28.315
and then we're going to update those variables.

499
00:31:28.315 --> 00:31:31.975
If not, we're going to handle a completely new cart object.

500
00:31:31.975 --> 00:31:36.415
It just makes it easier seeming we are getting the whole cart back from the API.

501
00:31:36.415 --> 00:31:39.790
All we need to do is pass that data back into

502
00:31:39.790 --> 00:31:45.400
this handle cart response and then it'll re-render the whole cart.

503
00:31:45.400 --> 00:31:51.040
If I press this, we're re-rendering the whole cart with all the data.

504
00:31:51.040 --> 00:31:57.490
As you can see, this amount is updating and this total is updating as well.

505
00:31:57.490 --> 00:32:01.945
That's a lot of code and I'm using ES6 a lot here.

506
00:32:01.945 --> 00:32:03.670
This is some advanced level stuff.

507
00:32:03.670 --> 00:32:05.410
This is definitely not beginner stuff.

508
00:32:05.410 --> 00:32:09.010
Definitely, don't worry if you don't fully understand this.

509
00:32:09.010 --> 00:32:12.610
This requires quite a bit of JavaScript knowledge and

510
00:32:12.610 --> 00:32:16.900
you'll need to know about ES6 syntax as well.

511
00:32:16.900 --> 00:32:20.260
For instance, what I've done here with the arrow function,

512
00:32:20.260 --> 00:32:23.470
the equivalent in traditional JavaScript is like that.

513
00:32:23.470 --> 00:32:26.800
I'm using ES6 just because I think it looks nicer,

514
00:32:26.800 --> 00:32:28.780
but maybe it's confusing to you.

515
00:32:28.780 --> 00:32:31.675
Again, this is a bit of an advanced levels lesson.

516
00:32:31.675 --> 00:32:34.030
The main thing I want you to take away from

517
00:32:34.030 --> 00:32:37.750
this is what we learned here with the Ajax API.

518
00:32:37.750 --> 00:32:41.680
I want you to understand that if we're creating carts that

519
00:32:41.680 --> 00:32:45.745
do not require page reloads in order to update them,

520
00:32:45.745 --> 00:32:48.355
then we're using the Ajax API.

521
00:32:48.355 --> 00:32:53.710
Remember, anything that stays on the client side and involves programming,

522
00:32:53.710 --> 00:32:56.575
gaining access to data from back ends,

523
00:32:56.575 --> 00:33:00.385
if we're not reloading the page and making a new server request that way,

524
00:33:00.385 --> 00:33:02.140
then we're using Ajax,

525
00:33:02.140 --> 00:33:07.420
and the Ajax API and Shopify is how we're able to access that data.

526
00:33:07.420 --> 00:33:10.480
That's the main thing I want to get across in this video.

527
00:33:10.480 --> 00:33:15.075
This should open you up to new possibilities with Shopify,

528
00:33:15.075 --> 00:33:19.500
but you may not be ready just yet in order to fully leverage this.

529
00:33:19.500 --> 00:33:24.205
There is a lot of depth to JavaScript and the API.

530
00:33:24.205 --> 00:33:27.925
But right here, I think is an example that really sums it up.

531
00:33:27.925 --> 00:33:30.025
If you go, again,

532
00:33:30.025 --> 00:33:31.540
check out the cart,

533
00:33:31.540 --> 00:33:33.190
spend some time looking at it,

534
00:33:33.190 --> 00:33:34.705
see if you can figure it out.

535
00:33:34.705 --> 00:33:37.480
If not, work on your JavaScript skills.

536
00:33:37.480 --> 00:33:40.240
If it's all too, don't worry.

537
00:33:40.240 --> 00:33:43.720
You've always got your standard cart page.

538
00:33:43.720 --> 00:33:46.224
Actually a lot of Shopify stores,

539
00:33:46.224 --> 00:33:47.920
even some really big ones,

540
00:33:47.920 --> 00:33:50.515
don't have a fully client-side cart.

541
00:33:50.515 --> 00:33:52.720
There was one store I saw,

542
00:33:52.720 --> 00:33:55.510
I was actually surprised that they didn't have

543
00:33:55.510 --> 00:33:58.615
this when I was doing research for this class.

544
00:33:58.615 --> 00:34:03.010
Luxy Hair is a really big Shopify store.

545
00:34:03.010 --> 00:34:09.565
If we actually go to a product, here we are.

546
00:34:09.565 --> 00:34:11.125
We've got this product here.

547
00:34:11.125 --> 00:34:13.540
If I click "Add to Bag",

548
00:34:13.540 --> 00:34:16.180
which is the equivalent of add to cart,

549
00:34:16.180 --> 00:34:19.075
we get redirected to the cart page,

550
00:34:19.075 --> 00:34:21.535
and if I remove an item,

551
00:34:21.535 --> 00:34:23.590
the whole page reloads as well.

552
00:34:23.590 --> 00:34:26.455
Even on a major Shopify website,

553
00:34:26.455 --> 00:34:29.980
they aren't using a fully client-side cart.

554
00:34:29.980 --> 00:34:34.840
It's not a huge deal if you're not ready to implement that yet.

555
00:34:34.840 --> 00:34:37.570
A lot of themes already have that.

556
00:34:37.570 --> 00:34:41.170
In terms of your Shopify theme programming knowledge,

557
00:34:41.170 --> 00:34:43.195
it depends on how far you want to go with it.

558
00:34:43.195 --> 00:34:46.945
But if you want to code your own client-side cart,

559
00:34:46.945 --> 00:34:52.030
or you want to be able to manipulate a current theme with that feature within it,

560
00:34:52.030 --> 00:34:57.040
then you'll need to know about this Ajax API and know JavaScript.

561
00:34:57.040 --> 00:35:01.315
But it's not essential to create a successful store.

562
00:35:01.315 --> 00:35:04.330
You can always use your cart page.

563
00:35:04.330 --> 00:35:10.390
You don't have to necessarily have a client-side cart or a side cart that comes out.

564
00:35:10.390 --> 00:35:12.925
This lesson, I think was a really big one,

565
00:35:12.925 --> 00:35:14.755
but it is quite a big topic.

566
00:35:14.755 --> 00:35:17.275
It's not a compulsory topic.

567
00:35:17.275 --> 00:35:19.990
I don't think you can create a course on

568
00:35:19.990 --> 00:35:26.650
Shopify theme programming without talking about this awesome feature and this API.

569
00:35:26.650 --> 00:35:32.110
If you're interested, here's the documentation on the official website.

570
00:35:32.110 --> 00:35:35.665
Check out my example code if you want to see my implementation.

571
00:35:35.665 --> 00:35:39.400
But that is where I'll leave you on the Shopify Ajax API.

572
00:35:39.400 --> 00:35:40.915
In the next lesson,

573
00:35:40.915 --> 00:35:44.065
we're going to go back into Shopify liquid and

574
00:35:44.065 --> 00:35:47.845
learn some more advanced patents within Shopify.

575
00:35:47.845 --> 00:35:50.540
I'll see you on that one.

