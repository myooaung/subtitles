1
00:00:00,000 --> 00:00:05,490
All right everyone, welcome to this bonus lesson on the storefront API.

2
00:00:05,490 --> 00:00:11,880
Until now, we've been working just with the online store sales channel.

3
00:00:11,880 --> 00:00:14,115
If I look in my Shopify store,

4
00:00:14,115 --> 00:00:17,520
you can see a list of sales channel and online store is

5
00:00:17,520 --> 00:00:20,850
the one that comes pre-installed with your Shopify account.

6
00:00:20,850 --> 00:00:27,285
Of course, the way to customize your online store sales channel is through themes.

7
00:00:27,285 --> 00:00:30,605
We've been doing everything from within a theme.

8
00:00:30,605 --> 00:00:33,620
Well, the storefront API actually allows us to

9
00:00:33,620 --> 00:00:37,170
access our store data from anywhere on the web.

10
00:00:37,170 --> 00:00:40,175
I thought about how best to explain this and I think

11
00:00:40,175 --> 00:00:43,985
probably the best way is for you guys to see it straight away.

12
00:00:43,985 --> 00:00:47,150
What I'm going to do is show you an app that I created.

13
00:00:47,150 --> 00:00:52,580
I call this app the Shopify customer storefront app.

14
00:00:52,580 --> 00:00:56,210
I've hosted on a free app host called Heroku app.

15
00:00:56,210 --> 00:00:57,515
In order to use this app,

16
00:00:57,515 --> 00:01:00,275
I'm going to have to insert some Store details.

17
00:01:00,275 --> 00:01:04,260
I've got the access token that I've created already

18
00:01:04,260 --> 00:01:09,235
ready to go and the store domain is right here.

19
00:01:09,235 --> 00:01:11,415
If I hit submit,

20
00:01:11,415 --> 00:01:15,410
it's going to connect to my store and then suddenly you're seeing

21
00:01:15,410 --> 00:01:21,705
a custom storefront that I've built on a completely different address to Shopify.

22
00:01:21,705 --> 00:01:27,785
Right here, this app is made with a JavaScript framework called view JS,

23
00:01:27,785 --> 00:01:33,530
which I recently learned and it's really cool for making interactive client-side apps.

24
00:01:33,530 --> 00:01:39,020
What you can do with this app is you can browse collections within a particular store,

25
00:01:39,020 --> 00:01:40,520
in this case my store,

26
00:01:40,520 --> 00:01:42,860
the Chris testing shop.

27
00:01:42,860 --> 00:01:46,730
You can browse the different pages of content,

28
00:01:46,730 --> 00:01:48,805
you can click on a particular item,

29
00:01:48,805 --> 00:01:51,795
you can select a variant,

30
00:01:51,795 --> 00:01:54,050
you can add the variant to the cart,

31
00:01:54,050 --> 00:01:56,820
and this is all done on the client side.

32
00:01:56,820 --> 00:02:00,350
As you can see, there's no page refreshes at all because I've

33
00:02:00,350 --> 00:02:05,000
made this completely with a JavaScript framework called view JS.

34
00:02:05,000 --> 00:02:09,590
You could also use this API to create apps in angular or react,

35
00:02:09,590 --> 00:02:16,420
it's a great way for you to use your store data in a completely client-side way.

36
00:02:16,420 --> 00:02:18,410
Now if I click checkout here,

37
00:02:18,410 --> 00:02:20,795
it goes to the actual checkout of my store,

38
00:02:20,795 --> 00:02:22,714
and so it goes back to Shopify,

39
00:02:22,714 --> 00:02:26,570
but this whole shopping experience here including looking at blogs,

40
00:02:26,570 --> 00:02:30,405
is all on this third-party hosting platform.

41
00:02:30,405 --> 00:02:33,200
Each time I click on something and load data,

42
00:02:33,200 --> 00:02:36,715
it's coming through via the storefront API.

43
00:02:36,715 --> 00:02:41,510
Let's open up my network tab and we can actually see these requests coming through.

44
00:02:41,510 --> 00:02:48,305
I'm going to go to my Network tab and click the tab for XHR.

45
00:02:48,305 --> 00:02:50,695
Let's refresh my app.

46
00:02:50,695 --> 00:02:54,290
You can see we've made three requests here.

47
00:02:54,290 --> 00:02:58,130
The storefront API uses something called GraphQL,

48
00:02:58,130 --> 00:03:00,740
which is a whole topic in itself.

49
00:03:00,740 --> 00:03:05,910
If you haven't been familiar with the GraphQL way of doing APIs,

50
00:03:05,910 --> 00:03:07,730
but essentially we've GraphQL,

51
00:03:07,730 --> 00:03:11,164
there's a single endpoint rather than multiple endpoints,

52
00:03:11,164 --> 00:03:13,850
and you send a query to that endpoint

53
00:03:13,850 --> 00:03:17,435
and it gives you back the exact data that you're looking for.

54
00:03:17,435 --> 00:03:19,880
If you've used rest APIs before,

55
00:03:19,880 --> 00:03:24,245
maybe there's an API endpoint where you request all of,

56
00:03:24,245 --> 00:03:26,315
let's say the collections in your store,

57
00:03:26,315 --> 00:03:28,880
but in this case I only want the image,

58
00:03:28,880 --> 00:03:31,325
I want the title and I want the link to the collection.

59
00:03:31,325 --> 00:03:33,275
Well, in a rest API,

60
00:03:33,275 --> 00:03:36,120
you might not be able to select only that data,

61
00:03:36,120 --> 00:03:41,705
and so what you would do is you would request all of the information about collections.

62
00:03:41,705 --> 00:03:45,065
That means that you might have to make multiple API requests

63
00:03:45,065 --> 00:03:49,445
or just make requests that are bigger than they need to be.

64
00:03:49,445 --> 00:03:52,895
Again, this is a little bit more of an advanced topic,

65
00:03:52,895 --> 00:03:56,720
but I just wanted you to get the concept and perhaps maybe you

66
00:03:56,720 --> 00:04:00,990
can use the storefront API for your own purposes down the track.

67
00:04:00,990 --> 00:04:03,530
Going back to this network tab here,

68
00:04:03,530 --> 00:04:08,780
if I click on the first request, if I go into header,

69
00:04:08,780 --> 00:04:12,965
you can see the query that I send through to

70
00:04:12,965 --> 00:04:17,795
the API and this query right here is a GraphQL query.

71
00:04:17,795 --> 00:04:20,195
It basically says that I want

72
00:04:20,195 --> 00:04:25,145
the shop object and I want these attributes on the shop object.

73
00:04:25,145 --> 00:04:28,160
That's just some GraphQL syntax.

74
00:04:28,160 --> 00:04:32,325
Here you can see what we get back from the API.

75
00:04:32,325 --> 00:04:37,145
We get the shop data and we get things like currency code,

76
00:04:37,145 --> 00:04:38,300
the name of the store,

77
00:04:38,300 --> 00:04:42,275
primary domain and the reason why this request

78
00:04:42,275 --> 00:04:46,880
exists is because I'm using the name of the store right here.

79
00:04:46,880 --> 00:04:48,895
Let's look at the next one.

80
00:04:48,895 --> 00:04:52,870
It looks like this one is accessing the collections.

81
00:04:52,870 --> 00:04:56,090
As you can see here, this is the GraphQL query.

82
00:04:56,090 --> 00:04:57,335
I know it's quite big,

83
00:04:57,335 --> 00:04:59,480
if you don't understand GraphQL, don't worry,

84
00:04:59,480 --> 00:05:00,620
you're not going to understand this,

85
00:05:00,620 --> 00:05:05,390
but the point I'm making is you get something back from the storefront API.

86
00:05:05,390 --> 00:05:07,895
It is all the collection data,

87
00:05:07,895 --> 00:05:10,100
but no more than what you requested.

88
00:05:10,100 --> 00:05:13,220
In my case, what I've done is I've

89
00:05:13,220 --> 00:05:17,300
requested each collection and I want to know its handle,

90
00:05:17,300 --> 00:05:20,420
it's ID, and I want the first product of

91
00:05:20,420 --> 00:05:24,530
every collection and the first image of every product in that collection.

92
00:05:24,530 --> 00:05:28,430
The reason why is if the image is null,

93
00:05:28,430 --> 00:05:33,860
I want to be able to access the first image of the first product instead,

94
00:05:33,860 --> 00:05:37,954
so that's why I've accessed deep into this collection.

95
00:05:37,954 --> 00:05:40,765
Then you've got the third request.

96
00:05:40,765 --> 00:05:43,265
The third request as you can see here,

97
00:05:43,265 --> 00:05:46,130
is accessing the pages with in my store.

98
00:05:46,130 --> 00:05:52,025
Where I use this is right down here to provide some links to different pages.

99
00:05:52,025 --> 00:05:56,270
I'm using the name of the page and then I'm using

100
00:05:56,270 --> 00:06:01,090
the handle to create a unique link to that page as well.

101
00:06:01,090 --> 00:06:02,855
If I click on about us,

102
00:06:02,855 --> 00:06:06,290
you can see this pulls the data from the about us page.

103
00:06:06,290 --> 00:06:08,255
If we click here,

104
00:06:08,255 --> 00:06:14,420
we can see another request to get more information which in fact is the same information.

105
00:06:14,420 --> 00:06:16,310
If we do some more clicking around,

106
00:06:16,310 --> 00:06:17,405
if I click on blog,

107
00:06:17,405 --> 00:06:21,395
you can see we make another storefront API request.

108
00:06:21,395 --> 00:06:25,415
If I dig in here, you can see we've got a list of articles.

109
00:06:25,415 --> 00:06:31,320
Then of course this data is being represented on the page using view JS.

110
00:06:31,320 --> 00:06:34,870
So to give you a little bit of a look into the app if you're interested,

111
00:06:34,870 --> 00:06:36,070
I've got it right here,

112
00:06:36,070 --> 00:06:40,980
the services folder is where I make all my API requests.

113
00:06:40,980 --> 00:06:42,595
In my base service,

114
00:06:42,595 --> 00:06:46,780
I've got the settings for the storefront API request.

115
00:06:46,780 --> 00:06:50,155
Then I create this API call function,

116
00:06:50,155 --> 00:06:56,770
which uses a library code axis to actually query the storefront API and I expose

117
00:06:56,770 --> 00:07:04,410
that function to the product service and here's all my GraphQL queries.

118
00:07:04,410 --> 00:07:09,100
Now again, this is going deep into a lot of different concepts like view JS,

119
00:07:09,100 --> 00:07:10,480
which you might not be familiar with,

120
00:07:10,480 --> 00:07:12,775
GraphQL, which you might not be familiar with

121
00:07:12,775 --> 00:07:15,545
and maybe you don't even have much experience with APIs,

122
00:07:15,545 --> 00:07:18,275
so don't get overwhelmed right here.

123
00:07:18,275 --> 00:07:21,470
We're not going to spend a lot of time going through this,

124
00:07:21,470 --> 00:07:24,980
but what I want to do in this lesson is show you an example

125
00:07:24,980 --> 00:07:28,500
of how we can use this data in our theme.

126
00:07:28,500 --> 00:07:32,390
This class of course, is about Shopify theme programming and it is

127
00:07:32,390 --> 00:07:36,795
possible to use the storefront API in your theme if you so choose.

128
00:07:36,795 --> 00:07:40,040
So that's what we're going to focus on in this lesson,

129
00:07:40,040 --> 00:07:41,600
but for most people,

130
00:07:41,600 --> 00:07:44,765
the storefront API is going to be most useful when

131
00:07:44,765 --> 00:07:48,245
you need to access the data of your Shopify store.

132
00:07:48,245 --> 00:07:51,950
But you want to be able to do that in a completely custom way, for instance,

133
00:07:51,950 --> 00:07:58,010
creating a custom storefront or perhaps a phone app that uses the data of your store.

134
00:07:58,010 --> 00:08:03,920
The store for an API is all about accessing data that the customer sees.

135
00:08:03,920 --> 00:08:08,750
So none of this has to do with accessing things like adding products,

136
00:08:08,750 --> 00:08:11,510
adding customers, creating discounts.

137
00:08:11,510 --> 00:08:14,375
That is all through the admin API,

138
00:08:14,375 --> 00:08:22,845
which is what you use to build apps that go right here in your apps section.

139
00:08:22,845 --> 00:08:26,810
Again, I don't want to talk too much about all of that because that is

140
00:08:26,810 --> 00:08:30,580
outside the context of Shopify theme programming,

141
00:08:30,580 --> 00:08:35,240
but what I want to do in this lesson is show you an example of how we can

142
00:08:35,240 --> 00:08:40,545
actually use the storefront API in a theme on our own store.

143
00:08:40,545 --> 00:08:43,850
What we're going to need to do is if I go back to

144
00:08:43,850 --> 00:08:47,930
my app and I've sent an option here to disconnect.

145
00:08:47,930 --> 00:08:54,835
We can see that I need a sharp domain and I need a store for an access token.

146
00:08:54,835 --> 00:08:58,540
As you saw before, I already had a token and I put it inside,

147
00:08:58,540 --> 00:09:01,190
but let's go and recreate a token so

148
00:09:01,190 --> 00:09:04,265
that you guys can see how you would do this yourselves,

149
00:09:04,265 --> 00:09:05,975
so if I go into apps,

150
00:09:05,975 --> 00:09:08,540
then I go into manage private apps.

151
00:09:08,540 --> 00:09:13,100
You should be familiar with this process if you've configured theme kit before,

152
00:09:13,100 --> 00:09:14,945
because as you can see here,

153
00:09:14,945 --> 00:09:19,360
we had to create a private app in order to use theme kit.

154
00:09:19,360 --> 00:09:23,030
As you can see down here, I've got this storefront API app.

155
00:09:23,030 --> 00:09:27,350
I'm going to delete that and recreate it for you guys so we can

156
00:09:27,350 --> 00:09:32,435
see how we can create a storefront API app ourselves.

157
00:09:32,435 --> 00:09:36,170
Up here there's a button for Create a new private app,

158
00:09:36,170 --> 00:09:39,620
I'm going to click that and name this app something appropriate.

159
00:09:39,620 --> 00:09:43,190
I'm just going to call it storefront API app.

160
00:09:43,190 --> 00:09:48,935
This is basically the interface that will allow you to connect to the storefront API.

161
00:09:48,935 --> 00:09:52,920
We're going to put in the emergency developer e-mail.

162
00:09:53,690 --> 00:09:55,785
As you can see here,

163
00:09:55,785 --> 00:09:58,410
we can set some admin API permissions.

164
00:09:58,410 --> 00:10:03,180
We don't need that. What we need is some storefront API permissions.

165
00:10:03,180 --> 00:10:07,080
Right here, all we need to do is check this check box and then we can

166
00:10:07,080 --> 00:10:11,395
customize what permissions we're going to enable this API.

167
00:10:11,395 --> 00:10:13,970
The ones that it's checked already should be good

168
00:10:13,970 --> 00:10:17,450
enough but let's just check everything just in case.

169
00:10:17,450 --> 00:10:19,190
If we hit "Save",

170
00:10:19,190 --> 00:10:24,060
it's going to warn us that anyone who has these credentials can make

171
00:10:24,060 --> 00:10:29,520
requests to the API so be careful about who you share this API with.

172
00:10:29,520 --> 00:10:31,995
I'm going to click "I understand, create the app".

173
00:10:31,995 --> 00:10:35,640
Now you can see that the app is created and if I scroll down,

174
00:10:35,640 --> 00:10:38,985
it gives me the storefront access token.

175
00:10:38,985 --> 00:10:44,760
I'm going to leave this page open so we can access that token later,

176
00:10:44,760 --> 00:10:50,790
and I'm going to open up my online store sales channel in a new tab.

177
00:10:50,790 --> 00:10:57,990
What I'm going to do is head back into our new theme and let's edit the index template.

178
00:10:57,990 --> 00:11:02,550
We've got all of this code here from our advanced liquid lesson,

179
00:11:02,550 --> 00:11:04,290
going to remove that.

180
00:11:04,290 --> 00:11:10,395
What I'm going to do instead is put one div that's going to hold our content.

181
00:11:10,395 --> 00:11:12,870
Actually I'm going to give it an ID because there's only going to be

182
00:11:12,870 --> 00:11:17,550
one and I'm going to open up some script tags.

183
00:11:17,550 --> 00:11:23,610
Because we are using an API that can access data from wherever on the Internet,

184
00:11:23,610 --> 00:11:25,620
we could do this in any template.

185
00:11:25,620 --> 00:11:28,140
It doesn't have to be in the index.liquid template,

186
00:11:28,140 --> 00:11:30,000
could be literally anywhere.

187
00:11:30,000 --> 00:11:32,340
For this video, for demonstration purposes,

188
00:11:32,340 --> 00:11:35,700
it just makes sense to do it in the index.liquid template.

189
00:11:35,700 --> 00:11:40,950
What I'm going to do is grab some data using the storefront API and then represent

190
00:11:40,950 --> 00:11:46,845
it on the page via jQuery inserting that content into this div.

191
00:11:46,845 --> 00:11:53,280
I'm going to copy and paste the API code because it does take some configuration.

192
00:11:53,280 --> 00:11:57,015
This is a function that I created earlier, obviously.

193
00:11:57,015 --> 00:12:02,460
What it does is it takes a query and then sends that query to the Ajax API.

194
00:12:02,460 --> 00:12:04,875
Then with that response,

195
00:12:04,875 --> 00:12:08,130
we can actually access the data that comes back.

196
00:12:08,130 --> 00:12:10,545
Let's step through this really quickly.

197
00:12:10,545 --> 00:12:13,620
We're using the inbuilt fetch function within

198
00:12:13,620 --> 00:12:18,415
JavaScript to make a request to the storefront API endpoint,

199
00:12:18,415 --> 00:12:21,850
which is just your storefront name/api/graphql.json.

200
00:12:23,780 --> 00:12:26,910
If we were making this request off of Shopify,

201
00:12:26,910 --> 00:12:29,880
we would of course have to include the store name.

202
00:12:29,880 --> 00:12:37,560
If I switch over to my app and I go to the settings in my apiCall here,

203
00:12:37,560 --> 00:12:41,130
you see that we've had to set the store name here.

204
00:12:41,130 --> 00:12:44,805
But because we're already on the store itself right here,

205
00:12:44,805 --> 00:12:54,210
we can just use the relative URL and send a request to /api/graphql.json.

206
00:12:54,210 --> 00:12:56,310
Then we open up this object here.

207
00:12:56,310 --> 00:13:00,270
We make sure that the method is post and we have to send these headers.

208
00:13:00,270 --> 00:13:03,420
We have to make sure the content type is GraphQL,

209
00:13:03,420 --> 00:13:07,230
we have to allow control origin and of course,

210
00:13:07,230 --> 00:13:09,945
we need our access token.

211
00:13:09,945 --> 00:13:13,095
This is what we generated before.

212
00:13:13,095 --> 00:13:14,940
If I go back to my private app,

213
00:13:14,940 --> 00:13:16,845
remember I wanted to keep this open,

214
00:13:16,845 --> 00:13:18,870
I'm going to have to go down here,

215
00:13:18,870 --> 00:13:20,985
copy that access token,

216
00:13:20,985 --> 00:13:25,590
and replace the access token here with my own.

217
00:13:25,590 --> 00:13:28,950
Next we're setting the body of the request to

218
00:13:28,950 --> 00:13:32,355
the query which is going to be passed in to here.

219
00:13:32,355 --> 00:13:33,780
Then with the response,

220
00:13:33,780 --> 00:13:35,820
we are going to encode it with json.

221
00:13:35,820 --> 00:13:39,675
We need to do this in order for us to actually read the data.

222
00:13:39,675 --> 00:13:44,175
The two things that we're going to need is we're going to need an actual query.

223
00:13:44,175 --> 00:13:46,680
Just going to set up a blank query up here.

224
00:13:46,680 --> 00:13:50,160
Then we have to actually call the API.

225
00:13:50,160 --> 00:13:52,845
I'm going to set them up now,

226
00:13:52,845 --> 00:13:55,950
going to API query,

227
00:13:55,950 --> 00:13:59,505
and then I'm going to use that promise.

228
00:13:59,505 --> 00:14:04,140
I'm going to say response, console, log response.

229
00:14:04,140 --> 00:14:06,885
All this is going to do, once we send the query

230
00:14:06,885 --> 00:14:11,520
is console log what we get back from the server.

231
00:14:11,520 --> 00:14:14,070
In order to create this query,

232
00:14:14,070 --> 00:14:18,660
a handy tool is on the storefront API documentation.

233
00:14:18,660 --> 00:14:26,200
I believe it's on getting started or the first page of API reference.

234
00:14:26,480 --> 00:14:30,030
Just to note, there is a lot of information here if you want to do

235
00:14:30,030 --> 00:14:32,910
your own research into the storefront API.

236
00:14:32,910 --> 00:14:38,835
This is more of a practical little show and tell of how you can actually use the API.

237
00:14:38,835 --> 00:14:40,590
But if you go to this page,

238
00:14:40,590 --> 00:14:44,280
the API reference page for the storefront API,

239
00:14:44,280 --> 00:14:49,035
you can scroll down and you get this interactive GraphQL Explorer.

240
00:14:49,035 --> 00:14:52,245
This helps you to create GraphQL queries.

241
00:14:52,245 --> 00:14:55,410
As you can see here, we've got a very basic one which

242
00:14:55,410 --> 00:14:58,890
grabs the sharp object and then gets the name from it.

243
00:14:58,890 --> 00:15:03,555
If I run that, you can see what we'll get back is something like this.

244
00:15:03,555 --> 00:15:08,760
Let's just use this to test whether our API call is set up correctly.

245
00:15:08,760 --> 00:15:15,015
In this query, I'm going to send through this GraphQL query.

246
00:15:15,015 --> 00:15:17,295
If I hit "Save" on that,

247
00:15:17,295 --> 00:15:20,445
and then I preview the theme,

248
00:15:20,445 --> 00:15:23,775
we should see nothing come up on the page apart from the header.

249
00:15:23,775 --> 00:15:26,175
But if I open up my console,

250
00:15:26,175 --> 00:15:29,250
we will see we've got an error,

251
00:15:29,250 --> 00:15:34,275
we've got a missing bracket after an argument list.

252
00:15:34,275 --> 00:15:39,120
Let's just go back. Maybe there was a mistake somewhere here.

253
00:15:39,120 --> 00:15:44,670
Yes, I have forgotten to put an extra bracket there.

254
00:15:44,670 --> 00:15:46,800
Let's refresh this page.

255
00:15:46,800 --> 00:15:49,005
Now that we've got this console open,

256
00:15:49,005 --> 00:15:54,675
we can see that we've got an object that comes back from the storefront API.

257
00:15:54,675 --> 00:15:59,100
We can verify this is from the storefront API by going over to our network tab,

258
00:15:59,100 --> 00:16:03,090
and you can see here is a response from the API.

259
00:16:03,090 --> 00:16:09,940
We can see the query that we sent through and we can see the response.

260
00:16:11,060 --> 00:16:15,615
Since we console logged that object,

261
00:16:15,615 --> 00:16:20,020
we now have it available in our console as well.

262
00:16:20,060 --> 00:16:22,590
We've got our store name,

263
00:16:22,590 --> 00:16:25,590
which is something we could easily do within a theme anyway.

264
00:16:25,590 --> 00:16:29,295
Let's do something a little bit more involved.

265
00:16:29,295 --> 00:16:32,355
What I'm going to do, head back over to here,

266
00:16:32,355 --> 00:16:38,640
and I'm going to copy across a GraphQL query that I had in my custom storefront app.

267
00:16:38,640 --> 00:16:41,265
If I go over to my project code,

268
00:16:41,265 --> 00:16:45,990
I'm just going to grab the API code here for grabbing

269
00:16:45,990 --> 00:16:52,980
the first 20 products of the store and I'm going to update our query here.

270
00:16:52,980 --> 00:16:59,770
Let's save that and let's see if that works.

271
00:17:00,650 --> 00:17:07,079
Going into here, we have got an object coming back with all these products.

272
00:17:07,079 --> 00:17:09,585
So if we open all of this up,

273
00:17:09,585 --> 00:17:13,125
we can see we have got all the data that we asked for.

274
00:17:13,125 --> 00:17:16,665
If we go into the Network tab, everything's still good.

275
00:17:16,665 --> 00:17:21,450
We've got what we sent through in our GraphQL query,

276
00:17:21,450 --> 00:17:24,075
and we've got the result back.

277
00:17:24,075 --> 00:17:27,360
Again, I'm not going to spend a whole lot of time teaching you

278
00:17:27,360 --> 00:17:30,765
GraphQL because that is a whole topic in itself.

279
00:17:30,765 --> 00:17:34,455
But I just want to show you what we're able to do here.

280
00:17:34,455 --> 00:17:37,260
We've got all this data, which is lovely.

281
00:17:37,260 --> 00:17:40,560
But we want to actually use this data.

282
00:17:40,560 --> 00:17:46,290
What we can do is use jQuery to update our page.

283
00:17:46,290 --> 00:17:49,455
Most themes have jQuery already installed.

284
00:17:49,455 --> 00:17:51,360
If you're working on an existing theme,

285
00:17:51,360 --> 00:17:53,985
definitely check if you already have jQuery

286
00:17:53,985 --> 00:17:57,225
because this is the new theme and it's very basic.

287
00:17:57,225 --> 00:18:01,440
I'm going to have to actually import jQuery from the CDN.

288
00:18:01,440 --> 00:18:05,715
If I just look up jQuery on Google,

289
00:18:05,715 --> 00:18:09,375
there should be a link here to the jQuery CDN,

290
00:18:09,375 --> 00:18:14,235
and this gives us a link to a minified version of jQuery.

291
00:18:14,235 --> 00:18:16,630
I can grab that,

292
00:18:16,940 --> 00:18:21,315
and using my knowledge of liquid tags,

293
00:18:21,315 --> 00:18:24,900
can put in that as a string and then use

294
00:18:24,900 --> 00:18:30,330
the script tag filter to actually create a script tag out of that.

295
00:18:30,330 --> 00:18:34,005
What I'm going to do in order to test whether jQuery is working,

296
00:18:34,005 --> 00:18:42,575
is use a jQuery function which shouldn't work if jQuery isn't installed,

297
00:18:42,575 --> 00:18:45,785
but should work if jQuery is installed.

298
00:18:45,785 --> 00:18:53,860
What I'm going to do, this just console log ready when the document is ready.

299
00:18:54,290 --> 00:18:57,075
If I hit "Save" on that,

300
00:18:57,075 --> 00:18:58,770
I refresh the page,

301
00:18:58,770 --> 00:19:00,930
open up the console first rather,

302
00:19:00,930 --> 00:19:03,585
and then refresh the page,

303
00:19:03,585 --> 00:19:06,615
you'll see we've got ready and then data.

304
00:19:06,615 --> 00:19:11,470
We know that we've definitely got jQuery installed now.

305
00:19:11,720 --> 00:19:17,355
I'm going to get rid of that ready function.

306
00:19:17,355 --> 00:19:21,015
Now what we need to do is handle our response differently.

307
00:19:21,015 --> 00:19:25,705
What I'm going to do is put in some curly brackets here,

308
00:19:25,705 --> 00:19:30,080
and I'm going to keep the console log response because I'm going to reference it.

309
00:19:30,080 --> 00:19:33,320
But what we're going to do is actually loop through

310
00:19:33,320 --> 00:19:38,985
the products here and have something come out on the screen.

311
00:19:38,985 --> 00:19:44,850
I'm using what's in the console log to figure out how to navigate these objects.

312
00:19:44,850 --> 00:19:46,625
We've got a data object,

313
00:19:46,625 --> 00:19:47,825
then we've got products,

314
00:19:47,825 --> 00:19:50,180
then we've got edges inside of that.

315
00:19:50,180 --> 00:19:51,965
Edges is an array.

316
00:19:51,965 --> 00:19:53,630
Then we're going to loop through that array,

317
00:19:53,630 --> 00:19:57,560
find the node of each of these array items,

318
00:19:57,560 --> 00:20:02,390
and then that is the data for each of our products.

319
00:20:02,510 --> 00:20:04,860
I'll go back into here,

320
00:20:04,860 --> 00:20:07,530
and I'm going to take the response,

321
00:20:07,530 --> 00:20:10,125
then I'm going to navigate into data,

322
00:20:10,125 --> 00:20:15,020
then I'm going to navigate into products, then edges.

323
00:20:15,020 --> 00:20:17,600
I know there's a lot of dots here.

324
00:20:17,600 --> 00:20:19,595
Then this is where we start our loop.

325
00:20:19,595 --> 00:20:25,760
So I can say for each and I can grab the product,

326
00:20:25,760 --> 00:20:29,480
and then what we're going to do for each product

327
00:20:29,480 --> 00:20:34,450
is I just want to make sure that we're looking at the right thing.

328
00:20:34,450 --> 00:20:40,675
I'm going to actually just console log product.node.

329
00:20:40,675 --> 00:20:44,060
Let's have a look if that works.

330
00:20:44,060 --> 00:20:49,535
I'll hit "Save', refresh the page over here with the console open.

331
00:20:49,535 --> 00:20:51,230
As you can see,

332
00:20:51,230 --> 00:20:53,690
we've got the initial console log,

333
00:20:53,690 --> 00:20:56,420
which has the entire response that we got back.

334
00:20:56,420 --> 00:21:00,710
Then you can see an individual console log for each of

335
00:21:00,710 --> 00:21:05,660
the products with their attributes that we got back in that data object.

336
00:21:05,660 --> 00:21:07,535
Now we're inside this loop,

337
00:21:07,535 --> 00:21:11,770
we can actually translate this data into content on the actual page.

338
00:21:11,770 --> 00:21:17,055
What I'm going to do is create a template.

339
00:21:17,055 --> 00:21:21,055
I'm going to call this const template,

340
00:21:21,055 --> 00:21:22,240
and in this template,

341
00:21:22,240 --> 00:21:24,610
I'm going to construct some HTML.

342
00:21:24,610 --> 00:21:28,150
Let's say div class, product.

343
00:21:28,150 --> 00:21:35,425
Let's break this up into another line so that we have some nice spacing,

344
00:21:35,425 --> 00:21:37,150
makes it a bit more readable,

345
00:21:37,150 --> 00:21:41,755
and then I'm going to do a heading for each.

346
00:21:41,755 --> 00:21:48,085
Using string interpolation, I'm going to navigate into that product node,

347
00:21:48,085 --> 00:21:56,065
so product.node, and the attribute I'm looking for is title.

348
00:21:56,065 --> 00:22:00,265
I'm going to grab the title of the product,

349
00:22:00,265 --> 00:22:03,505
then underneath, what should we show?

350
00:22:03,505 --> 00:22:07,550
Maybe the product description,

351
00:22:13,080 --> 00:22:21,400
product.node.description, one more thing, maybe the image.

352
00:22:21,400 --> 00:22:25,810
There's going to be multiple images for a particular product.

353
00:22:25,810 --> 00:22:29,395
Well, the possibility at least for a multiple images for a particular product,

354
00:22:29,395 --> 00:22:32,995
so this one is going to be a little bit more complicated, but we'll get there.

355
00:22:32,995 --> 00:22:38,245
What I'm going to do is open up an HTML image tag,

356
00:22:38,245 --> 00:22:41,020
and in order to get the src,

357
00:22:41,020 --> 00:22:43,015
the actual address to the image.

358
00:22:43,015 --> 00:22:48,040
What I'm going to have to do is navigate into our product node,

359
00:22:48,040 --> 00:22:49,780
and then from within our node,

360
00:22:49,780 --> 00:22:52,045
I need to access this images,

361
00:22:52,045 --> 00:22:54,595
object, and then inside the edges.

362
00:22:54,595 --> 00:22:59,350
I am going to do this little bit step-by-step, so images,

363
00:22:59,350 --> 00:23:05,515
edges, and I want the first image of the list of images available in this product.

364
00:23:05,515 --> 00:23:09,055
I'm going to select that using it's zero index.

365
00:23:09,055 --> 00:23:11,050
Now, we're going to be inside this one,

366
00:23:11,050 --> 00:23:13,150
and we want to get the node,

367
00:23:13,150 --> 00:23:20,875
and then within node, the transformedSrc, node.transformedSrc.

368
00:23:20,875 --> 00:23:23,710
If you're wondering what transformedSrc is,

369
00:23:23,710 --> 00:23:27,310
we can actually in our graph QL request,

370
00:23:27,310 --> 00:23:32,605
specify what we want the maxWidth and maxHeight of the image to be,

371
00:23:32,605 --> 00:23:39,385
like what we did with image URL tags or filters in Liquid.

372
00:23:39,385 --> 00:23:43,555
Hopefully, we have navigated our objects correctly,

373
00:23:43,555 --> 00:23:46,840
I've missed out one final step here, and that is,

374
00:23:46,840 --> 00:23:52,075
I have to actually append the template to this div up here.

375
00:23:52,075 --> 00:23:56,335
I'm going to open up a jQuery selector,

376
00:23:56,335 --> 00:24:03,415
target that div, and then I'm going to append the template.

377
00:24:03,415 --> 00:24:09,880
This is going to be added for every product in the loop to this content div up here,

378
00:24:09,880 --> 00:24:13,570
so I'm going to hit ''Save'' on that, refresh the page.

379
00:24:13,570 --> 00:24:17,530
Now you'll see we have the data that we got from

380
00:24:17,530 --> 00:24:21,625
here in our Storefront API represented on our page.

381
00:24:21,625 --> 00:24:23,605
We've got the title, we've got the image,

382
00:24:23,605 --> 00:24:25,029
we've got the description,

383
00:24:25,029 --> 00:24:26,500
and you can see it,

384
00:24:26,500 --> 00:24:30,160
all the first 20 products in our store are coming out.

385
00:24:30,160 --> 00:24:32,590
Now, this is all through JavaScript,

386
00:24:32,590 --> 00:24:34,180
we're not using any Liquid here,

387
00:24:34,180 --> 00:24:35,905
this is all client side.

388
00:24:35,905 --> 00:24:40,690
You can maybe see this on a slower connection or maybe if I just refresh the page,

389
00:24:40,690 --> 00:24:44,215
you'll see there's a slight delay before everything loads,

390
00:24:44,215 --> 00:24:46,090
and then the products,

391
00:24:46,090 --> 00:24:48,325
and their names, and images loads.

392
00:24:48,325 --> 00:24:49,945
Basically what's happening is,

393
00:24:49,945 --> 00:24:53,035
the server side code gets generated first,

394
00:24:53,035 --> 00:24:54,535
you get the page back,

395
00:24:54,535 --> 00:24:56,230
the page finishes loading,

396
00:24:56,230 --> 00:24:57,775
and then shortly after,

397
00:24:57,775 --> 00:25:01,765
we get the asynchronous load in JavaScript.

398
00:25:01,765 --> 00:25:07,120
Again, it's not entirely clear perhaps why we

399
00:25:07,120 --> 00:25:12,475
would use the Storefront API to access this data when we can already access it in Liquid.

400
00:25:12,475 --> 00:25:18,834
But this is an example of how you could actually use the Storefront API in your themes.

401
00:25:18,834 --> 00:25:22,000
Again, the best use of the Storefront API is if you

402
00:25:22,000 --> 00:25:26,050
want to create a fully client-side application.

403
00:25:26,050 --> 00:25:33,950
If I just throw in my store for an access token into this app again,

404
00:25:34,410 --> 00:25:39,700
this right here is a perfect example of a purely client-side app,

405
00:25:39,700 --> 00:25:45,115
and it makes sense that we would use the data using a JSON API,

406
00:25:45,115 --> 00:25:48,325
which doesn't make us reload the page every time.

407
00:25:48,325 --> 00:25:52,000
You can see here that this is all done in the client side,

408
00:25:52,000 --> 00:25:55,585
meaning that we don't ever have to reload the page.

409
00:25:55,585 --> 00:26:00,385
I guess that would be a major benefit of using the Storefront API.

410
00:26:00,385 --> 00:26:02,845
Again, this is why this is a bonus lesson,

411
00:26:02,845 --> 00:26:07,880
and it's a bonus lesson because you're probably not going to use the Storefront API,

412
00:26:07,880 --> 00:26:14,655
but I wanted to leave you with a short lesson on this API to show you what's possible.

413
00:26:14,655 --> 00:26:18,070
Maybe you actually want to create a custom Storefront,

414
00:26:18,070 --> 00:26:21,430
or maybe you actually need to access some data that's

415
00:26:21,430 --> 00:26:24,970
available in the API that is not available in Liquid.

416
00:26:24,970 --> 00:26:28,210
I actually know of a few examples where

417
00:26:28,210 --> 00:26:31,690
the Storefront API gives you data that Liquid does not,

418
00:26:31,690 --> 00:26:35,500
so maybe you want to use it for those fringe cases.

419
00:26:35,500 --> 00:26:40,314
If you want to learn all about the different objects in the Storefront API,

420
00:26:40,314 --> 00:26:42,355
here's where you can do so.

421
00:26:42,355 --> 00:26:46,270
Just like we saw in the Shopify Liquid documentation,

422
00:26:46,270 --> 00:26:51,895
we can look at the objects available in the Storefront API through this menu here.

423
00:26:51,895 --> 00:26:55,705
It did take me a while to figure out how to actually read this correctly,

424
00:26:55,705 --> 00:27:01,000
but if we have a look at what we did for today's lesson with products,

425
00:27:01,000 --> 00:27:06,280
you can see here that this shows you all of the, what's called connections.

426
00:27:06,280 --> 00:27:11,080
This is other resources that you can access from a product as an entry point,

427
00:27:11,080 --> 00:27:12,460
and then down here,

428
00:27:12,460 --> 00:27:13,720
is all the attributes.

429
00:27:13,720 --> 00:27:19,060
For instance, if I wanted to access the product handle, this is how you would do it.

430
00:27:19,060 --> 00:27:21,415
The description in HTML,

431
00:27:21,415 --> 00:27:23,980
the createdAt date right here,

432
00:27:23,980 --> 00:27:27,715
and metafield stored on that product.

433
00:27:27,715 --> 00:27:31,780
Finally, right here is what's called a QueryRoute,

434
00:27:31,780 --> 00:27:34,390
which is the entry point for queries,

435
00:27:34,390 --> 00:27:37,330
this is what we used to access all the products.

436
00:27:37,330 --> 00:27:39,745
As you can see from the QueryRoute,

437
00:27:39,745 --> 00:27:41,470
we can access articles,

438
00:27:41,470 --> 00:27:46,360
blogs, collections, pages, and products as we did.

439
00:27:46,360 --> 00:27:49,060
Then once you're inside the product,

440
00:27:49,060 --> 00:27:56,230
you can click here to learn about the product connection and you navigate

441
00:27:56,230 --> 00:28:03,670
this API documentation as if you were navigating a graph QL response.

442
00:28:03,670 --> 00:28:11,545
This mimics what we saw here in the sense that right here we're at the QueryRoute.

443
00:28:11,545 --> 00:28:13,600
So we go back to QueryRoute,

444
00:28:13,600 --> 00:28:16,645
and in our QueryRoute,

445
00:28:16,645 --> 00:28:19,105
we're going into products,

446
00:28:19,105 --> 00:28:22,135
so down here, products.

447
00:28:22,135 --> 00:28:24,070
If I click on products connection,

448
00:28:24,070 --> 00:28:29,290
you'll now see we can do edges or page infur, here we go.

449
00:28:29,290 --> 00:28:32,935
Edges. If I go into edges,

450
00:28:32,935 --> 00:28:38,860
each edge is going to have a node and cursor if we ask for it.

451
00:28:38,860 --> 00:28:42,520
As you can see, each has a node,

452
00:28:42,520 --> 00:28:44,725
and then if we click on ''Node'',

453
00:28:44,725 --> 00:28:47,510
it gives us a product,

454
00:28:47,760 --> 00:28:54,445
and then you can see the connections on that object and the fields available.

455
00:28:54,445 --> 00:28:59,334
As you can see, we accessed some of those fields, we accessed description,

456
00:28:59,334 --> 00:29:05,980
handle ID, and we accessed connections to the images and tags as well.

457
00:29:05,980 --> 00:29:09,655
This is definitely a more advanced a lesson,

458
00:29:09,655 --> 00:29:14,305
and it took me a while to figure out how to use the Storefront API myself.

459
00:29:14,305 --> 00:29:17,470
It's definitely not something you can learn in a 20 minute lesson,

460
00:29:17,470 --> 00:29:19,390
but this is why it's a bonus lesson.

461
00:29:19,390 --> 00:29:22,345
It's a bit of an eye-opener to show you

462
00:29:22,345 --> 00:29:26,380
another way that you can represent your store data in a custom Storefront,

463
00:29:26,380 --> 00:29:30,535
or perhaps in a unique way on your online theme.

464
00:29:30,535 --> 00:29:33,895
There is, of course, one more API which I mentioned before,

465
00:29:33,895 --> 00:29:36,625
which is the Admin API,

466
00:29:36,625 --> 00:29:40,705
and if you want to go into Shopify App Development,

467
00:29:40,705 --> 00:29:44,020
this is the API that you're going to need to learn.

468
00:29:44,020 --> 00:29:49,029
I have actually created a Shopify App myself using this API,

469
00:29:49,029 --> 00:29:50,815
it was a pretty cool experience,

470
00:29:50,815 --> 00:29:54,550
but definitely not something I could cover in a 20 minute video ever.

471
00:29:54,550 --> 00:29:57,955
That's perhaps a topic for another class.

472
00:29:57,955 --> 00:30:00,175
But that's pretty much it guys,

473
00:30:00,175 --> 00:30:03,400
that should cover a pretty good overview

474
00:30:03,400 --> 00:30:06,535
of everything to do with Shopify Theme Programming.

475
00:30:06,535 --> 00:30:07,825
If you've made it this far,

476
00:30:07,825 --> 00:30:11,260
I want to thank you and congratulate you on sticking with it.

477
00:30:11,260 --> 00:30:13,929
There is a lot to Shopify Theme Programming,

478
00:30:13,929 --> 00:30:16,900
and if you want to learn more about it,

479
00:30:16,900 --> 00:30:24,640
the blog post is out on my website, christhefreelancer.com/Shopify-Liquid-guide/.

480
00:30:24,640 --> 00:30:27,504
It's over 10,000 words on Shopify,

481
00:30:27,504 --> 00:30:31,150
so if you're feeling bored or adventurous and want

482
00:30:31,150 --> 00:30:35,245
to have a long read about everything, Shopify Liquid,

483
00:30:35,245 --> 00:30:42,310
obviously we can't cover 10,000 words of content in a single skill share class,

484
00:30:42,310 --> 00:30:46,420
but this is where I would go to learn more about the different pots.

485
00:30:46,420 --> 00:30:48,265
If you have any questions,

486
00:30:48,265 --> 00:30:51,220
as always, leave them in discussion box below.

487
00:30:51,220 --> 00:30:55,250
Thanks a lot guys, and I'll see you in the next one.

