1
00:00:02,040 --> 00:00:04,750
Now that we built a lot of components

2
00:00:04,750 --> 00:00:07,680
that dealt with outputting Todos,

3
00:00:07,680 --> 00:00:09,760
let's make sure our actual Todos

4
00:00:09,760 --> 00:00:13,570
no longer have to be hard-coded, dummy Todos,

5
00:00:13,570 --> 00:00:17,153
but that we instead let the user enter new Todos.

6
00:00:18,210 --> 00:00:20,500
And for this I'll add yet another component here,

7
00:00:20,500 --> 00:00:22,540
the NewTodo component,

8
00:00:22,540 --> 00:00:26,590
which should display a form that handles user input

9
00:00:26,590 --> 00:00:30,660
where we get the, well, Todo as a user add it.

10
00:00:30,660 --> 00:00:33,880
For this header, I'll again, create a functional component

11
00:00:33,880 --> 00:00:37,650
by using const and then the arrow function syntax.

12
00:00:37,650 --> 00:00:42,280
And I'll export this NewTodo component here,

13
00:00:42,280 --> 00:00:44,680
NewTodo like this.

14
00:00:44,680 --> 00:00:48,140
And here, I now wanna return my form.

15
00:00:48,140 --> 00:00:50,020
I wanna render a form

16
00:00:50,020 --> 00:00:52,770
that allows the user to enter a NewTodo.

17
00:00:54,270 --> 00:00:57,570
Now this will be a very simple form, which I build here.

18
00:00:57,570 --> 00:01:01,700
I wanna have a label, where I say Todo text.

19
00:01:01,700 --> 00:01:03,910
Below that I input of type text,

20
00:01:03,910 --> 00:01:06,513
where the user should enter the concrete Todo.

21
00:01:07,670 --> 00:01:10,350
And below that a button for

22
00:01:10,350 --> 00:01:13,500
adding that Todo for submitting that form.

23
00:01:13,500 --> 00:01:16,460
That's the JSX code I want here.

24
00:01:16,460 --> 00:01:19,240
We can refine the styling a little bit later.

25
00:01:19,240 --> 00:01:21,410
For the moment, let's just add it like this.

26
00:01:21,410 --> 00:01:24,663
And let's focus just on React and TypeScript.

27
00:01:25,850 --> 00:01:28,283
Now on that label I'll add the htmlFor,

28
00:01:29,250 --> 00:01:32,090
attribute so to say, this prop here

29
00:01:32,090 --> 00:01:33,490
to point at the

30
00:01:34,430 --> 00:01:35,593
text

31
00:01:35,593 --> 00:01:38,450
input which is this one here.

32
00:01:38,450 --> 00:01:41,930
So I added id text here to connect the label to it

33
00:01:41,930 --> 00:01:44,750
for accessibility. But now with that,

34
00:01:44,750 --> 00:01:48,930
that's the finished JSX code. And what I wanna do now

35
00:01:48,930 --> 00:01:51,240
is I wanna handle the form submission

36
00:01:51,240 --> 00:01:53,870
and prevent the browser default,

37
00:01:53,870 --> 00:01:56,030
as we learned it in this course.

38
00:01:56,030 --> 00:02:01,030
And in addition, I wanna of course then get the user input.

39
00:02:01,120 --> 00:02:02,900
And for getting the user input,

40
00:02:02,900 --> 00:02:06,690
we of course learned about two main approaches.

41
00:02:06,690 --> 00:02:11,630
We can either listen to every keystroke with useState,

42
00:02:11,630 --> 00:02:15,550
or we use a Ref to then get the user input

43
00:02:15,550 --> 00:02:17,620
once the form is submitted.

44
00:02:17,620 --> 00:02:19,650
And it depends on what you wanna do.

45
00:02:19,650 --> 00:02:22,830
If you wanna validate with every keystroke or not,

46
00:02:22,830 --> 00:02:25,170
which approach you wanna use.

47
00:02:25,170 --> 00:02:27,620
And here I'll go for the Ref approach,

48
00:02:27,620 --> 00:02:32,620
because we're going to see useState in action later anyways.

49
00:02:33,290 --> 00:02:36,730
Now let's start with the form submission function.

50
00:02:36,730 --> 00:02:38,690
For this, I'll add a new function

51
00:02:38,690 --> 00:02:42,090
in this component function. And that will be the

52
00:02:43,006 --> 00:02:46,203
submitHandler function, though the name is up to you.

53
00:02:47,360 --> 00:02:50,810
In there, I expect an event argument so that I can call

54
00:02:50,810 --> 00:02:54,640
event.prevent default. But we can already see

55
00:02:54,640 --> 00:02:56,890
that I'm not getting any auto completion

56
00:02:56,890 --> 00:03:00,020
and that we got the red squiggly lines here.

57
00:03:00,020 --> 00:03:03,780
Now we're getting red squiggly lines, because

58
00:03:03,780 --> 00:03:06,420
TypeScript has no idea which type of data

59
00:03:06,420 --> 00:03:09,000
this event thing will be.

60
00:03:09,000 --> 00:03:10,550
We as a developer know

61
00:03:10,550 --> 00:03:13,670
that it will actually be such an event object

62
00:03:13,670 --> 00:03:17,280
which is emitted and passed automatically

63
00:03:17,280 --> 00:03:19,210
when we connect this function

64
00:03:19,210 --> 00:03:21,640
to the appropriate event listener.

65
00:03:21,640 --> 00:03:24,653
But that's not something TypeScript can know.

66
00:03:25,670 --> 00:03:28,860
So we have to add a type annotation here.

67
00:03:28,860 --> 00:03:33,450
And here, since we'll add this function to the submit event

68
00:03:33,450 --> 00:03:38,349
through React. So with help of React. With help of React's

69
00:03:38,349 --> 00:03:41,810
onSubmit property later.

70
00:03:41,810 --> 00:03:44,450
Since we'll do that, the type here will be

71
00:03:44,450 --> 00:03:45,543
the React.

72
00:03:46,942 --> 00:03:47,775
formEvent.

73
00:03:48,790 --> 00:03:51,783
And you can actually omit this import as you learned.

74
00:03:52,720 --> 00:03:53,930
That's a special type

75
00:03:53,930 --> 00:03:56,510
provided by our React package in the end,

76
00:03:56,510 --> 00:04:00,690
which is this event object type,

77
00:04:00,690 --> 00:04:02,210
which we'll get automatically

78
00:04:02,210 --> 00:04:04,163
when listening to the form submission.

79
00:04:05,030 --> 00:04:07,290
There also is a MouseEvent, for example,

80
00:04:07,290 --> 00:04:10,600
which you would get if you add onClick listener.

81
00:04:10,600 --> 00:04:12,700
That's then the event object you get.

82
00:04:12,700 --> 00:04:15,870
But for the form submission, it's the FormEvent.

83
00:04:15,870 --> 00:04:19,100
And then here we can call preventDefault.

84
00:04:19,100 --> 00:04:22,160
You now see I get all the completion, because now

85
00:04:22,160 --> 00:04:25,573
I'm clearly describing which type of data we'll get here.

86
00:04:26,810 --> 00:04:29,370
Now we can connect this here

87
00:04:29,370 --> 00:04:32,483
and pass the submitHandler to onSubmit.

88
00:04:33,500 --> 00:04:36,150
By the way, if I would be using MouseEvent here,

89
00:04:36,150 --> 00:04:39,220
you see I'm now getting an error down there

90
00:04:39,220 --> 00:04:42,700
with a very long message basically telling me

91
00:04:42,700 --> 00:04:46,630
that the type of function I'm pointing at it here

92
00:04:46,630 --> 00:04:51,200
for onSubmit is not the type of function React is expecting.

93
00:04:51,200 --> 00:04:53,640
Because for the onSubmit prop,

94
00:04:53,640 --> 00:04:57,380
React is expecting a pointer and a function

95
00:04:57,380 --> 00:05:00,150
that actually gets the argument of type FormEvent,

96
00:05:00,150 --> 00:05:02,380
not of type MouseEvent.

97
00:05:02,380 --> 00:05:05,190
So that's an extra little check, which we get here,

98
00:05:05,190 --> 00:05:06,600
which is great.

99
00:05:06,600 --> 00:05:09,500
And now with that turn back to FormEvent,

100
00:05:09,500 --> 00:05:10,943
everything is working again.

101
00:05:13,280 --> 00:05:16,450
Now we wanna extract the entered input.

102
00:05:16,450 --> 00:05:19,203
And we'll do that with help of Refs here.

