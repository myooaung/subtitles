1
00:00:02,050 --> 00:00:03,310
Now we got started

2
00:00:03,310 --> 00:00:08,310
with our own components, with props, now let's refine this.

3
00:00:09,340 --> 00:00:11,810
At the moment, a Todo is simply a string,

4
00:00:11,810 --> 00:00:15,010
and hence a list of Todos is an array of strings.

5
00:00:15,010 --> 00:00:16,750
That could be what you need,

6
00:00:16,750 --> 00:00:19,340
but it would also not be unrealistic

7
00:00:19,340 --> 00:00:21,350
that every Todo is an object.

8
00:00:21,350 --> 00:00:25,350
An object with an ID maybe, with a Todo text,

9
00:00:25,350 --> 00:00:27,460
maybe a title and a subtitle,

10
00:00:27,460 --> 00:00:30,050
and then maybe then also more metadata

11
00:00:30,050 --> 00:00:33,080
that is attached to a Todo, like the author,

12
00:00:33,080 --> 00:00:35,230
the time when it was created,

13
00:00:35,230 --> 00:00:37,830
if it's currently active or not active?

14
00:00:37,830 --> 00:00:40,943
There are endless ways of describing a Todo.

15
00:00:41,840 --> 00:00:44,770
I don't wanna incorporate all those ways right now,

16
00:00:44,770 --> 00:00:48,180
but I definitely do want to refine it a little bit.

17
00:00:48,180 --> 00:00:49,013
And therefore,

18
00:00:49,013 --> 00:00:51,810
I'll add a new sub-folder in my source folder here,

19
00:00:51,810 --> 00:00:54,240
which I'll name, models.

20
00:00:54,240 --> 00:00:55,900
You don't have to name it models,

21
00:00:55,900 --> 00:00:57,380
you can name it however you want,

22
00:00:57,380 --> 00:00:59,880
but I name it models because I want to describe

23
00:00:59,880 --> 00:01:02,060
my different data models,

24
00:01:02,060 --> 00:01:06,280
my different kinds of data I'm working with in this project.

25
00:01:06,280 --> 00:01:11,280
And in there, I'll add a todo.ts file, not .tsx, but .ts

26
00:01:12,160 --> 00:01:14,650
because I'm not creating a component in there.

27
00:01:14,650 --> 00:01:17,760
It's also not in the components folder.

28
00:01:17,760 --> 00:01:20,100
And in this todo.ts file,

29
00:01:20,100 --> 00:01:23,540
I want to describe how a Todo looks like.

30
00:01:23,540 --> 00:01:26,300
And for this, I wanna create my own Todo type.

31
00:01:26,300 --> 00:01:29,060
Now, we can do this with the type keyword,

32
00:01:29,060 --> 00:01:31,690
there also would be the interface keyword,

33
00:01:31,690 --> 00:01:34,480
which we can used as an alternative.

34
00:01:34,480 --> 00:01:38,443
Or we create a class, which we then even could instantiate.

35
00:01:39,370 --> 00:01:42,803
And I'll do the latter here, but either approach would work.

36
00:01:43,790 --> 00:01:48,320
With that, I create a class Todo, and we create this class

37
00:01:48,320 --> 00:01:52,610
basically just as we would do it in vanilla JavaScript.

38
00:01:52,610 --> 00:01:55,480
Modern JavaScript has classes built in,

39
00:01:55,480 --> 00:01:57,670
and I'm just using that feature here.

40
00:01:57,670 --> 00:02:00,560
It's also supported in TypeScript.

41
00:02:00,560 --> 00:02:04,280
And now here we can describe how our class should look like.

42
00:02:04,280 --> 00:02:06,750
And here we now got some slight differences

43
00:02:06,750 --> 00:02:11,440
compared to how we do this in just JavaScript.

44
00:02:11,440 --> 00:02:14,460
Because when working with TypeScript in classes,

45
00:02:14,460 --> 00:02:17,010
if your class has different properties,

46
00:02:17,010 --> 00:02:19,800
different attributes, which you want to add,

47
00:02:19,800 --> 00:02:22,530
then you don't have to do this in the constructor,

48
00:02:22,530 --> 00:02:25,180
as you do it in vanilla JavaScript.

49
00:02:25,180 --> 00:02:29,070
But instead you can add them directly here in the class

50
00:02:29,070 --> 00:02:32,460
between the curly braces, as you're used to

51
00:02:32,460 --> 00:02:34,600
from some other programming languages,

52
00:02:34,600 --> 00:02:36,893
like C# for example.

53
00:02:37,930 --> 00:02:40,690
And here, I wanna make sure that a Todo object

54
00:02:40,690 --> 00:02:44,350
will always have an id and a text field for now.

55
00:02:44,350 --> 00:02:47,030
And for this here, I'll add my id field

56
00:02:47,030 --> 00:02:48,550
and then assign the type for that,

57
00:02:48,550 --> 00:02:50,700
which will be string here.

58
00:02:50,700 --> 00:02:52,210
And then I'll add my text field,

59
00:02:52,210 --> 00:02:54,460
which also will hold a string.

60
00:02:54,460 --> 00:02:59,070
And then I'll export this Todo class.

61
00:02:59,070 --> 00:03:01,030
And we're now getting some errors here

62
00:03:01,030 --> 00:03:03,430
regarding id and text.

63
00:03:03,430 --> 00:03:06,558
And we're seeing that the property text has no initializer

64
00:03:06,558 --> 00:03:10,380
and is not definitely assigned in the constructor.

65
00:03:10,380 --> 00:03:12,260
What this warning is telling us

66
00:03:12,260 --> 00:03:14,440
is that I'm defining a class here,

67
00:03:14,440 --> 00:03:16,870
which is meant to be instantiated,

68
00:03:16,870 --> 00:03:20,320
that's the main idea behind classes in general,

69
00:03:20,320 --> 00:03:22,190
but that those properties,

70
00:03:22,190 --> 00:03:26,500
which I set up and describe in there where I set the types,

71
00:03:26,500 --> 00:03:30,350
never receive a value, and we can make sure

72
00:03:30,350 --> 00:03:33,513
that they do receive a value by adding a constructor.

73
00:03:34,480 --> 00:03:39,480
This constructor could then also want some arguments

74
00:03:41,190 --> 00:03:45,590
and here I want to get the todoText as an argument

75
00:03:45,590 --> 00:03:48,280
because I'll generate the ID dynamically

76
00:03:48,280 --> 00:03:50,070
in the constructor then.

77
00:03:50,070 --> 00:03:53,080
And the todoText will also be of type string,

78
00:03:53,080 --> 00:03:55,760
hence the type annotation here.

79
00:03:55,760 --> 00:03:59,730
So now we've got type annotations on the properties

80
00:03:59,730 --> 00:04:03,370
and then here also on the constructor on the argument

81
00:04:03,370 --> 00:04:05,700
And inside of the constructor,

82
00:04:05,700 --> 00:04:09,220
I'll then set this.text = todoText.

83
00:04:09,220 --> 00:04:11,550
Whoops, todoText here.

84
00:04:11,550 --> 00:04:16,550
And I'll set this.id = an id which I want to generate here.

85
00:04:16,700 --> 00:04:19,230
And I'll just use a Date() here

86
00:04:19,230 --> 00:04:22,100
and convert this to a string.

87
00:04:22,100 --> 00:04:25,750
That's not a perfect unique ID, but it's good enough.

88
00:04:25,750 --> 00:04:28,830
So now whenever we create a new Todo,

89
00:04:28,830 --> 00:04:31,963
this ID gets created automatically.

90
00:04:33,360 --> 00:04:37,020
And now we have this Todo object definition,

91
00:04:37,020 --> 00:04:41,350
this class definition here in this TypeScript file.

92
00:04:41,350 --> 00:04:44,050
And that's very close to how this would look like

93
00:04:44,050 --> 00:04:45,970
in just JavaScript.

94
00:04:45,970 --> 00:04:48,450
In just JavaScript, we would basically

95
00:04:48,450 --> 00:04:51,110
not have these two property descriptions

96
00:04:51,110 --> 00:04:53,080
and we would just have this code,

97
00:04:53,080 --> 00:04:56,910
which would work in just JavaScript, but in TypeScript,

98
00:04:56,910 --> 00:04:58,410
when using TypeScript,

99
00:04:58,410 --> 00:05:02,280
you also have to define those properties ahead of time

100
00:05:02,280 --> 00:05:04,660
to make it clear which types of values

101
00:05:04,660 --> 00:05:06,800
will be stored in there.

102
00:05:06,800 --> 00:05:10,977
And with that, we can now use this Todo class.

103
00:05:10,977 --> 00:05:14,430
And we can use it in app.tsx, for example

104
00:05:14,430 --> 00:05:16,243
to create some dummy Todos.

105
00:05:17,240 --> 00:05:22,100
Here, we can have our Todos and that is an array

106
00:05:22,100 --> 00:05:24,990
and in that array, I want to now instantiate my Todos

107
00:05:24,990 --> 00:05:27,500
based on this Todo class.

108
00:05:27,500 --> 00:05:32,500
For this I'll import to do from ./models/todo.

109
00:05:34,000 --> 00:05:37,120
Again, you can omit the file extension here.

110
00:05:37,120 --> 00:05:40,010
And then we instantiate and create those objects

111
00:05:40,010 --> 00:05:41,750
based on the Todo class,

112
00:05:41,750 --> 00:05:44,473
just as we do it in vanilla JavaScript.

113
00:05:45,330 --> 00:05:50,330
We can use new Todo() here, twice to create two Todos.

114
00:05:51,900 --> 00:05:54,520
And then we need to pass in that todoText,

115
00:05:54,520 --> 00:05:59,520
like Learn React and Learn TypeScript.

116
00:06:00,680 --> 00:06:02,900
And now our Todos, this here,

117
00:06:02,900 --> 00:06:05,800
is no longer an array of strings,

118
00:06:05,800 --> 00:06:08,603
but instead an array of Todo objects.

119
00:06:09,900 --> 00:06:12,570
Now I want to pass that as a value

120
00:06:12,570 --> 00:06:15,000
for the items prop into Todos.

121
00:06:15,000 --> 00:06:18,880
And to accept this array of Todo objects

122
00:06:18,880 --> 00:06:20,760
instead of array of strings

123
00:06:20,760 --> 00:06:23,460
we have to change the type annotation here

124
00:06:23,460 --> 00:06:25,863
in the Todos component,

125
00:06:26,700 --> 00:06:29,683
because there I currently want an array of strings.

126
00:06:31,060 --> 00:06:35,640
Now, the great thing is that if you are defining a class,

127
00:06:35,640 --> 00:06:40,640
this class also acts not just as a constructor function

128
00:06:41,000 --> 00:06:44,370
which you can call to create new objects

129
00:06:44,370 --> 00:06:46,440
but also as a type.

130
00:06:46,440 --> 00:06:50,430
You can use your class name as a type.

131
00:06:50,430 --> 00:06:52,870
And therefore in the Todos component,

132
00:06:52,870 --> 00:06:57,780
I can import Todo from going up one level,

133
00:06:57,780 --> 00:06:59,723
diving into models/todo,

134
00:07:01,228 --> 00:07:02,480
and we can make it clear

135
00:07:02,480 --> 00:07:04,760
that items will be an array of Todos

136
00:07:06,140 --> 00:07:09,760
based on that Todo class, which means items

137
00:07:09,760 --> 00:07:12,860
will be an array full of objects

138
00:07:12,860 --> 00:07:15,870
that fulfill the description

139
00:07:15,870 --> 00:07:18,820
the definition of this Todo class.

140
00:07:18,820 --> 00:07:22,390
So full of objects that have an id property,

141
00:07:22,390 --> 00:07:25,180
which is of type string, and the text property,

142
00:07:25,180 --> 00:07:28,980
which is of type string or to be precise,

143
00:07:28,980 --> 00:07:33,630
objects created with this class as a constructor function.

144
00:07:33,630 --> 00:07:36,410
That's what we now want as an array here

145
00:07:36,410 --> 00:07:37,913
for this items prop.

146
00:07:39,020 --> 00:07:40,410
And that of course also means

147
00:07:40,410 --> 00:07:42,480
that if we map through the items,

148
00:07:42,480 --> 00:07:45,700
we no longer wanna set the key equal to this object,

149
00:07:45,700 --> 00:07:48,350
but instead probably to item.id

150
00:07:49,280 --> 00:07:51,993
and the text equal to item.text.

151
00:07:54,460 --> 00:07:58,630
And with this now, we updated todos.tsx.

152
00:07:58,630 --> 00:08:02,550
Now in app.tsx, we just need to use our Todos array

153
00:08:02,550 --> 00:08:05,690
as a value for this items prop.

154
00:08:05,690 --> 00:08:08,820
So here I'll now pass Todos as a value

155
00:08:08,820 --> 00:08:12,190
to the items prop to the Todos component.

156
00:08:12,190 --> 00:08:16,330
And if we do that, again the visual output does not change,

157
00:08:16,330 --> 00:08:19,380
but our code definitely changed.

158
00:08:19,380 --> 00:08:22,730
And please note that with all those type annotations,

159
00:08:22,730 --> 00:08:25,090
and all those classes we're using here,

160
00:08:25,090 --> 00:08:27,310
we are making it very clear

161
00:08:27,310 --> 00:08:29,760
which shape our data should have

162
00:08:29,760 --> 00:08:32,419
which shape our components should have.

163
00:08:32,419 --> 00:08:36,530
And that simply allows us as a developer to ensure

164
00:08:36,530 --> 00:08:41,309
that this code is clean, that it has a clear structure,

165
00:08:41,309 --> 00:08:45,570
and that's it's way harder to misuse our components

166
00:08:45,570 --> 00:08:46,710
or our data.

167
00:08:46,710 --> 00:08:51,130
And that errors can be prevented during development

168
00:08:51,130 --> 00:08:55,010
instead of at runtime, when we test the app.

169
00:08:55,010 --> 00:08:57,910
Because if we pass in incorrect Todos here,

170
00:08:57,910 --> 00:09:01,940
we get a warning right in the editor instead of an error,

171
00:09:01,940 --> 00:09:05,950
which we would then get at some point in the running app.

172
00:09:05,950 --> 00:09:08,053
And that's the benefit of TypeScript.

