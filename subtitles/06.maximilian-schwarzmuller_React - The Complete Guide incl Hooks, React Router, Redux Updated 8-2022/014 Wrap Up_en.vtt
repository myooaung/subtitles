WEBVTT
1
00:00:02.320 --> 00:00:09.480
So this was a really advanced module, you saw this project with redacts, with the context API and

2
00:00:09.490 --> 00:00:11.900
with this custom hoax story thing.

3
00:00:12.400 --> 00:00:13.660
Now, what should you use?

4
00:00:14.320 --> 00:00:21.640
You can definitely stick to redacts the overhead of having an extra library is probably not that bad,

5
00:00:21.640 --> 00:00:23.200
especially in bigger projects.

6
00:00:23.710 --> 00:00:28.660
And if you learned how you use it, well, then using it is, of course, pretty straightforward and

7
00:00:28.660 --> 00:00:30.400
all the heavy lifting is done for you.

8
00:00:31.420 --> 00:00:37.090
Now you can still switch away if you want to try something new or if you really want to save every bytes

9
00:00:37.090 --> 00:00:38.110
you possibly can.

10
00:00:38.120 --> 00:00:43.390
So you don't want to add that extra third party dependency or maybe you don't want that dependency to

11
00:00:43.390 --> 00:00:49.370
be, well, independent from the development of that package, then you can use the context API for

12
00:00:49.390 --> 00:00:55.570
low frequency updates so you can use that for things like authentication or themes, but probably not

13
00:00:55.570 --> 00:00:58.030
for despuÃ©s case with products and favorites.

14
00:00:58.480 --> 00:01:03.910
But there you could look into a solution like this and attached you actually find the NPM package,

15
00:01:03.910 --> 00:01:10.180
which basically follows a similar idea which you could simply import into your project so that you can

16
00:01:10.180 --> 00:01:15.090
have a third party dependency, of course, but one which Dennington only uses react and react hooks

17
00:01:15.250 --> 00:01:20.500
to basically give you that code out of the box so that you don't have to write it on your own.

18
00:01:20.590 --> 00:01:21.970
You'll find that attached.

19
00:01:21.970 --> 00:01:22.930
In case you're interested.

20
00:01:22.930 --> 00:01:27.280
You can also check out the source code of that package to learn how this package implemented.

21
00:01:27.280 --> 00:01:27.840
All of that.

22
00:01:28.720 --> 00:01:31.450
I find it very interesting to see this approach.

23
00:01:31.450 --> 00:01:36.850
I find it very interesting to see how you can manage your data with only reactant, JavaScript, and

24
00:01:36.850 --> 00:01:38.790
therefore I definitely want to share this with you.

25
00:01:38.950 --> 00:01:41.920
Maybe this is the future of state management in React.

26
00:01:42.190 --> 00:01:45.430
It's it's an early concept, an early idea.

27
00:01:45.580 --> 00:01:47.470
It works is absolutely works.

28
00:01:47.470 --> 00:01:52.510
You can optimize its performance as you see here, as we did with should listen and therefore does is

29
00:01:52.510 --> 00:01:57.520
definitely something you should be aware of and you might want to try out in your project.

