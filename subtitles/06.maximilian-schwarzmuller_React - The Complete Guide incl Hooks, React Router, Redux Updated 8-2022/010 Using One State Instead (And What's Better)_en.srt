1
00:00:02,210 --> 00:00:03,490
So in the last lecture

2
00:00:03,490 --> 00:00:04,491
we added these

3
00:00:04,491 --> 00:00:06,160
handler functions

4
00:00:06,160 --> 00:00:07,010
and we added

5
00:00:07,010 --> 00:00:08,440
multiple state slices.

6
00:00:08,440 --> 00:00:09,334
Now I did

7
00:00:09,334 --> 00:00:10,308
emphasize,

8
00:00:10,308 --> 00:00:11,580
that you can have

9
00:00:11,580 --> 00:00:12,890
multiple such slices

10
00:00:12,890 --> 00:00:14,384
that this is totally normal.

11
00:00:14,384 --> 00:00:16,950
However, there also is an alternative

12
00:00:16,950 --> 00:00:20,470
and it depends basically on your personal preferences

13
00:00:20,470 --> 00:00:22,580
which approach you prefer.

14
00:00:22,580 --> 00:00:23,822
You can have multiple slices,

15
00:00:23,822 --> 00:00:25,480
but you could also argue that

16
00:00:25,480 --> 00:00:29,210
of course, all three States here are related

17
00:00:29,210 --> 00:00:30,043
to our form,

18
00:00:30,043 --> 00:00:31,480
that,

19
00:00:31,480 --> 00:00:33,070
in all three States, we just

20
00:00:33,070 --> 00:00:36,159
store some user input and that it's therefore

21
00:00:36,159 --> 00:00:39,913
basically the same concept repeated three times.

22
00:00:40,810 --> 00:00:42,860
Therefore, you could also go

23
00:00:42,860 --> 00:00:46,540
for one state instead of three states.

24
00:00:46,540 --> 00:00:47,720
How?

25
00:00:47,720 --> 00:00:51,220
simply by commenting this out.

26
00:00:51,220 --> 00:00:52,470
by calling used state

27
00:00:52,470 --> 00:00:53,740
only once

28
00:00:53,740 --> 00:00:57,400
and by passing in an object as a value

29
00:00:57,400 --> 00:00:58,550
and that's important

30
00:00:58,550 --> 00:00:59,540
not a string

31
00:00:59,540 --> 00:01:02,533
or number or anything like that, but an object.

32
00:01:02,533 --> 00:01:04,700
And of course in this object,

33
00:01:04,700 --> 00:01:07,466
you can now group together, your three States

34
00:01:07,466 --> 00:01:09,822
you could have a title key, or

35
00:01:09,822 --> 00:01:12,699
maybe alter it entered title key,

36
00:01:12,699 --> 00:01:14,704
And that holds an empty string initially.

37
00:01:14,704 --> 00:01:17,500
And you have an entered amount key as well

38
00:01:17,500 --> 00:01:20,029
with an empty string and an answer to date.

39
00:01:20,029 --> 00:01:21,340
So,

40
00:01:21,340 --> 00:01:22,483
the logic is kind of the same

41
00:01:22,483 --> 00:01:24,562
but now it's in one state object

42
00:01:24,562 --> 00:01:26,531
managed as one piece of state

43
00:01:26,531 --> 00:01:30,360
instead of three separate slices.

44
00:01:30,360 --> 00:01:31,260
The difference now,

45
00:01:31,260 --> 00:01:32,093
of course is

46
00:01:32,093 --> 00:01:33,992
that whenever you update this state

47
00:01:33,992 --> 00:01:35,353
you need to update all

48
00:01:35,353 --> 00:01:38,133
three properties and not just one.

49
00:01:39,040 --> 00:01:41,290
So here you could then also extract this

50
00:01:41,290 --> 00:01:44,683
and have your user input, for example,

51
00:01:46,401 --> 00:01:47,865
and set user input.

52
00:01:47,865 --> 00:01:49,749
And now when,

53
00:01:49,749 --> 00:01:53,280
the user enters a title, you wouldn't store it

54
00:01:53,280 --> 00:01:54,113
like this,

55
00:01:54,113 --> 00:01:55,218
but you would call set user input.

56
00:01:55,218 --> 00:01:58,680
And in the end here, you then want to pass

57
00:01:58,680 --> 00:02:03,590
in a new object where you set the entered title

58
00:02:03,590 --> 00:02:06,882
in this case to event dot target dot value.

59
00:02:06,882 --> 00:02:09,919
But that's not the tricky part

60
00:02:11,067 --> 00:02:12,420
where you also ensure

61
00:02:12,420 --> 00:02:16,173
that the other two pieces of data don't get lost.

62
00:02:17,020 --> 00:02:20,200
If you would just set your new user input state

63
00:02:20,200 --> 00:02:24,930
to this object, you would basically dump the Abra keys

64
00:02:24,930 --> 00:02:26,400
because when you update your state

65
00:02:26,400 --> 00:02:28,940
react will not merge this

66
00:02:28,940 --> 00:02:30,210
with the old state.

67
00:02:30,210 --> 00:02:31,043
It will simply replace

68
00:02:31,043 --> 00:02:34,340
the old state with the new one.

69
00:02:34,340 --> 00:02:36,740
And if your new one is a object

70
00:02:36,740 --> 00:02:38,102
with one key value pair here

71
00:02:38,102 --> 00:02:40,496
the old state will be replaced and therefore

72
00:02:40,496 --> 00:02:43,540
The other are two key value pairs

73
00:02:43,540 --> 00:02:46,203
for amounted to date would be lost.

74
00:02:47,090 --> 00:02:48,249
So if you go for this

75
00:02:48,249 --> 00:02:51,878
one state approach and you manage such a object

76
00:02:51,878 --> 00:02:55,370
it's all your responsibility to make sure

77
00:02:55,370 --> 00:02:58,660
that the other data does not get lost.

78
00:02:58,660 --> 00:02:59,800
And to do that,

79
00:02:59,800 --> 00:03:00,753
you manually need to

80
00:03:00,753 --> 00:03:02,270
copy

81
00:03:02,270 --> 00:03:03,550
the other values

82
00:03:03,550 --> 00:03:05,350
which you're not updating here.

83
00:03:05,350 --> 00:03:08,047
So if you are updating the title, you also want to copy

84
00:03:08,047 --> 00:03:12,210
in the existing values for amount and date.

85
00:03:12,210 --> 00:03:13,043
And one way

86
00:03:13,043 --> 00:03:15,618
of doing this would be to use the spread operator

87
00:03:15,618 --> 00:03:19,273
which is a default JavaScript operator

88
00:03:19,273 --> 00:03:20,490
in modern JavaScript.

89
00:03:20,490 --> 00:03:23,303
And you copy in user input

90
00:03:23,303 --> 00:03:24,810
like this.

91
00:03:24,810 --> 00:03:27,440
Actually, you do this first and then you just

92
00:03:27,440 --> 00:03:29,233
override entered title.

93
00:03:30,210 --> 00:03:32,220
If you haven't seen this syntax before,

94
00:03:32,220 --> 00:03:33,080
this neon just

95
00:03:33,080 --> 00:03:34,270
takes an object,

96
00:03:34,270 --> 00:03:36,610
pulls out all the key value pairs,

97
00:03:36,610 --> 00:03:39,070
and adds them to this new object.

98
00:03:39,070 --> 00:03:41,780
And then we can still override key value pairs like

99
00:03:41,780 --> 00:03:43,940
in this case enter title.

100
00:03:43,940 --> 00:03:45,030
And by doing it like this,

101
00:03:45,030 --> 00:03:47,040
we ensure that the other values

102
00:03:47,040 --> 00:03:48,530
aren't thrown away,

103
00:03:48,530 --> 00:03:51,781
but are always a part of that new state.

104
00:03:51,781 --> 00:03:53,180
And now we could do this

105
00:03:53,180 --> 00:03:55,100
in all three places here,

106
00:03:55,100 --> 00:03:56,300
of course,

107
00:03:56,300 --> 00:03:58,139
and update the entered

108
00:03:58,139 --> 00:03:59,984
Amount here and

109
00:03:59,984 --> 00:04:01,850
do the same here,

110
00:04:01,850 --> 00:04:04,740
Just that here, we update the entered date

111
00:04:05,680 --> 00:04:07,590
and that would be an alternative

112
00:04:07,590 --> 00:04:11,080
to having the three individual state slices.

113
00:04:11,080 --> 00:04:12,509
It's up to you, what you prefer.

114
00:04:12,509 --> 00:04:15,270
And this code also, isn't perfect yet,

115
00:04:15,270 --> 00:04:16,103
by the way

116
00:04:16,103 --> 00:04:17,339
I'll come back to this in a second

117
00:04:17,339 --> 00:04:18,560
but generally,

118
00:04:18,560 --> 00:04:20,873
you can switch between these approaches.

119
00:04:20,873 --> 00:04:25,430
Now, I tend to prefer the individual state slices,

120
00:04:25,430 --> 00:04:28,870
And I would say you also see that more often out there

121
00:04:28,870 --> 00:04:31,365
in the world, in other react projects,

122
00:04:31,365 --> 00:04:35,010
but ultimately both approaches are fine.

123
00:04:35,010 --> 00:04:36,600
One thing is not fine though,

124
00:04:36,600 --> 00:04:39,930
And that is how I update my state here.

125
00:04:39,930 --> 00:04:44,930
When I also consider my oldest state for copying in values.

126
00:04:45,050 --> 00:04:47,250
And that's something we're going to take a closer look

127
00:04:47,250 --> 00:04:48,973
at in the next lecture.

