1
00:00:02,350 --> 00:00:04,820
So with the NewTodo component added

2
00:00:04,820 --> 00:00:07,320
let's go to the App component.

3
00:00:07,320 --> 00:00:11,490
There, I actually wanna use this NewTodo component.

4
00:00:11,490 --> 00:00:14,160
So here I added the import,

5
00:00:14,160 --> 00:00:17,453
and now I'm using NewTodo here in the JSX code.

6
00:00:18,290 --> 00:00:20,490
Of course the Todos array here,

7
00:00:20,490 --> 00:00:25,450
should now be managed with help of this NewTodo component.

8
00:00:25,450 --> 00:00:27,890
Whenever a NewTodo is added there,

9
00:00:27,890 --> 00:00:30,630
it should be added to this array here

10
00:00:30,630 --> 00:00:34,223
so that this array is not hard coded but dynamic.

11
00:00:35,130 --> 00:00:37,970
For this we've got a couple of steps we need to take.

12
00:00:37,970 --> 00:00:42,300
We need to use state to manage this array with state

13
00:00:42,300 --> 00:00:44,910
so that this App component will rerender

14
00:00:44,910 --> 00:00:46,580
when this array changes,

15
00:00:46,580 --> 00:00:49,833
so that the Todos component updates when it changes.

16
00:00:50,910 --> 00:00:52,630
We need a way of communicating back

17
00:00:52,630 --> 00:00:56,230
from NewTodo into this App component.

18
00:00:56,230 --> 00:00:58,390
That's what I wanna start with.

19
00:00:58,390 --> 00:01:00,533
For this and the NewTodo component,

20
00:01:01,380 --> 00:01:03,230
here in the submitHandler,

21
00:01:03,230 --> 00:01:06,180
I actually wanna call a function

22
00:01:06,180 --> 00:01:09,650
which will be stored in App component.

23
00:01:09,650 --> 00:01:12,920
That's of course, a pattern we used a lot in this course.

24
00:01:12,920 --> 00:01:16,700
We learned that we can pass pointers at functions

25
00:01:16,700 --> 00:01:19,330
as props to our components

26
00:01:19,330 --> 00:01:22,070
and that's exactly what I need here.

27
00:01:22,070 --> 00:01:25,830
In NewTodo I want to get my props object

28
00:01:25,830 --> 00:01:28,280
and then here in the submitHandler,

29
00:01:28,280 --> 00:01:33,280
I want to call props.onAddTodo for example,

30
00:01:33,700 --> 00:01:38,700
expecting that onAddTodo is getting a function as a value

31
00:01:40,040 --> 00:01:43,190
so that I can execute it as a function,

32
00:01:43,190 --> 00:01:47,070
and then two, onAddTodo, I wanna pass my enteredText

33
00:01:47,070 --> 00:01:49,320
so my string here which I extract

34
00:01:49,320 --> 00:01:51,993
from the todoTextIputRef.

35
00:01:53,120 --> 00:01:54,733
That's how I wanna write this,

36
00:01:55,820 --> 00:01:58,330
but we now get an error up here,

37
00:01:58,330 --> 00:01:59,530
and that's of course an error

38
00:01:59,530 --> 00:02:02,530
we had many times before already.

39
00:02:02,530 --> 00:02:04,790
I actually never clarified

40
00:02:04,790 --> 00:02:08,650
that NewTodo will be a functional component

41
00:02:08,650 --> 00:02:10,979
and we should absolutely do that.

42
00:02:10,979 --> 00:02:15,770
I should add React.FC here to make that clear

43
00:02:15,770 --> 00:02:20,590
and then if we need our own custom props as we do here

44
00:02:20,590 --> 00:02:25,590
I should embrace that generic nature of this FC type

45
00:02:26,000 --> 00:02:30,640
to define my concrete prop object definition

46
00:02:30,640 --> 00:02:33,210
of my own props, which I wanna add in here,

47
00:02:33,210 --> 00:02:35,923
that will be merged with the brace props.

48
00:02:37,240 --> 00:02:41,340
Here I wanna make it clear that this NewTodo component

49
00:02:41,340 --> 00:02:45,493
will actually get, onAddTodo prop,

50
00:02:46,810 --> 00:02:49,433
which will be off type what?

51
00:02:50,330 --> 00:02:53,083
Well which will actually be a function.

52
00:02:54,120 --> 00:02:56,690
For this we can define a so-called

53
00:02:56,690 --> 00:03:00,400
function type in TypeScript,

54
00:03:00,400 --> 00:03:04,060
and that is actually quite straightforward to do.

55
00:03:04,060 --> 00:03:06,800
For this you can add an Arrow function here

56
00:03:06,800 --> 00:03:10,870
but just as curly braces in this spot

57
00:03:10,870 --> 00:03:13,260
would not create an object

58
00:03:13,260 --> 00:03:15,540
using this Arrow function some texts here

59
00:03:15,540 --> 00:03:17,780
does not create an Arrow function.

60
00:03:17,780 --> 00:03:19,940
Instead, we're here in a part

61
00:03:19,940 --> 00:03:21,940
where we want a type definition,

62
00:03:21,940 --> 00:03:24,500
and this is TypeScript's syntax

63
00:03:24,500 --> 00:03:28,810
for defining the shape of a function,

64
00:03:28,810 --> 00:03:31,653
so for describing a function type.

65
00:03:32,590 --> 00:03:36,210
Here we know that onAddTodo should be of type function

66
00:03:36,210 --> 00:03:39,363
so here I'm describing how this function should look like.

67
00:03:40,200 --> 00:03:43,600
Between the brackets, we would describe the parameters

68
00:03:43,600 --> 00:03:46,690
this function will get and after the Arrow

69
00:03:46,690 --> 00:03:49,883
we describe the return type of this function.

70
00:03:51,140 --> 00:03:54,430
Now here onAddTodo shouldn't return anything

71
00:03:54,430 --> 00:03:56,670
because when we call this function,

72
00:03:56,670 --> 00:04:00,360
we're not doing anything with the return value.

73
00:04:00,360 --> 00:04:03,670
We're not storing it in a constant, we're not outputting it

74
00:04:03,670 --> 00:04:06,600
so we don't need a return value here

75
00:04:06,600 --> 00:04:10,460
hence we can set void as an expected return value

76
00:04:10,460 --> 00:04:15,017
of this function, we get as a value on onAddTodo.

77
00:04:16,649 --> 00:04:19,589
But, onAddTodo should be a function

78
00:04:19,589 --> 00:04:22,700
that gets and argument, a parameter,

79
00:04:22,700 --> 00:04:25,050
because I'm passing argument down there

80
00:04:25,050 --> 00:04:26,823
when I'm calling this function.

81
00:04:27,930 --> 00:04:30,610
Currently we're saying, that onAddTodo

82
00:04:30,610 --> 00:04:33,610
is a function that gets no parameters.

83
00:04:33,610 --> 00:04:35,580
That's my function type definition

84
00:04:35,580 --> 00:04:37,510
up there at the moment.

85
00:04:37,510 --> 00:04:40,810
That's why we're getting the red squiggly lines down there.

86
00:04:40,810 --> 00:04:45,810
This onAddTodo function currently expects zero arguments,

87
00:04:45,910 --> 00:04:50,700
but it gets one, enteredText in this case.

88
00:04:50,700 --> 00:04:52,100
Of course it should get one

89
00:04:52,100 --> 00:04:56,133
so we need to update this function type definition up there.

90
00:04:57,210 --> 00:04:59,180
We should get an argument here

91
00:04:59,180 --> 00:05:01,440
which we can give any name we want,

92
00:05:01,440 --> 00:05:04,240
in this case I'll just use text,

93
00:05:04,240 --> 00:05:06,580
which should be of type string.

94
00:05:06,580 --> 00:05:10,530
Now all the errors are gone because now I'm making it clear

95
00:05:10,530 --> 00:05:13,710
that onAddTodo will be a function,

96
00:05:13,710 --> 00:05:15,900
and that's a function that returns nothing

97
00:05:15,900 --> 00:05:18,863
but takes one parameter, which is of type string.

98
00:05:19,790 --> 00:05:23,310
So now calling it the function like this works.

99
00:05:23,310 --> 00:05:26,240
If I would set this to type number, it of course fails

100
00:05:26,240 --> 00:05:30,020
because entered text is a string and not a number.

101
00:05:30,020 --> 00:05:32,470
But that's okay because here we want a string,

102
00:05:32,470 --> 00:05:34,253
so let's switch this back.

103
00:05:35,890 --> 00:05:40,460
Well, and now with that, just as all the times before,

104
00:05:40,460 --> 00:05:43,600
in the place where we use NewTodo.

105
00:05:43,600 --> 00:05:46,500
So in the App component we now have to make sure

106
00:05:46,500 --> 00:05:50,000
that we pass in this prop which we're expecting.

107
00:05:50,000 --> 00:05:54,660
So onAddTodo should now be added as a prop here,

108
00:05:54,660 --> 00:05:56,670
and the value for that,

109
00:05:56,670 --> 00:05:59,020
that should now be such a function,

110
00:05:59,020 --> 00:06:02,530
a function that has this shape.

111
00:06:02,530 --> 00:06:04,580
Now that's a function which we now have

112
00:06:04,580 --> 00:06:06,960
to define here in App.tsx.

113
00:06:06,960 --> 00:06:09,060
So here I'll add a new constant

114
00:06:09,060 --> 00:06:12,640
and I'll name it addTodoHandler,

115
00:06:12,640 --> 00:06:15,870
and that's now an Arrow function lets say,

116
00:06:15,870 --> 00:06:19,570
and that Arrow function needs a specific shape.

117
00:06:19,570 --> 00:06:22,370
Now that's a concrete function definition here now

118
00:06:22,370 --> 00:06:25,030
not a type definition because here we got

119
00:06:25,030 --> 00:06:27,443
some regular JavaScript code in the end.

120
00:06:29,000 --> 00:06:30,600
Now the shape of this function is

121
00:06:30,600 --> 00:06:32,900
that it shouldn't return anything.

122
00:06:32,900 --> 00:06:36,140
So not having a return statement here is fine,

123
00:06:36,140 --> 00:06:39,720
but it should accept the parameter.

124
00:06:39,720 --> 00:06:43,970
It should get the actual todoText or just text,

125
00:06:43,970 --> 00:06:45,730
you can name it however you want,

126
00:06:45,730 --> 00:06:49,633
which, and that's important now, should be of type string,

127
00:06:50,570 --> 00:06:52,500
because that is the function shape

128
00:06:52,500 --> 00:06:55,970
we are expecting in the NewTodo component.

129
00:06:55,970 --> 00:06:58,230
So if we wanna pass this function

130
00:06:58,230 --> 00:07:01,690
through the onAddTodo to NewTodo,

131
00:07:01,690 --> 00:07:04,143
we have to make sure that this shape is correct.

132
00:07:06,380 --> 00:07:09,130
Here it is correct so now we can pass a pointer

133
00:07:09,130 --> 00:07:10,890
at addTodoHandler to newTodo.

134
00:07:14,610 --> 00:07:16,890
Now it's in addTodoHandler

135
00:07:16,890 --> 00:07:20,060
where we wanna manipulate this Todos array.

136
00:07:20,060 --> 00:07:24,053
So this state managed array as it soon will be.

