WEBVTT
1
00:00:02.100 --> 00:00:06.800
Now that we covered these basics of TypeScript,

2
00:00:06.800 --> 00:00:10.960
it's time to actually dive into React and TypeScript.

3
00:00:10.960 --> 00:00:14.860
And for this, we need to create a new React project

4
00:00:14.860 --> 00:00:17.330
where we get this development server

5
00:00:17.330 --> 00:00:19.730
and this build process which we can run

6
00:00:19.730 --> 00:00:22.710
if we wanna deploy our application.

7
00:00:22.710 --> 00:00:26.110
But we need a React project that is configured

8
00:00:26.110 --> 00:00:30.370
to use TypeScript instead of Vanilla JavaScript,

9
00:00:30.370 --> 00:00:32.310
which is the kind of React project

10
00:00:32.310 --> 00:00:35.300
we used up to this point in this course.

11
00:00:35.300 --> 00:00:37.670
Now the great thing is that we can still

12
00:00:37.670 --> 00:00:40.570
use Create React App for that.

13
00:00:40.570 --> 00:00:43.490
If you search for Create React App,

14
00:00:43.490 --> 00:00:47.720
you should find the Create React App Docs here

15
00:00:47.720 --> 00:00:51.090
on create-react-app.dev.

16
00:00:51.090 --> 00:00:52.340
And on this page,

17
00:00:52.340 --> 00:00:55.840
you find instructions on how to use Create React App,

18
00:00:55.840 --> 00:01:00.620
and there, you will also find instructions

19
00:01:00.620 --> 00:01:04.430
on how to integrate TypeScript for dev.

20
00:01:04.430 --> 00:01:06.960
If you click on Building your App here,

21
00:01:06.960 --> 00:01:11.810
you find the Adding TypeScript document.

22
00:01:11.810 --> 00:01:15.028
Now, this general page structure can, of course,

23
00:01:15.028 --> 00:01:16.730
change over time.

24
00:01:16.730 --> 00:01:20.730
So the way you find those instructions might change,

25
00:01:20.730 --> 00:01:25.260
but you can also google for Create React App TypeScript,

26
00:01:25.260 --> 00:01:27.380
and that should then directly lead you

27
00:01:27.380 --> 00:01:32.140
to that Adding TypeScript documentation you are looking for.

28
00:01:32.140 --> 00:01:35.090
And here you can learn how you can add typescripts

29
00:01:35.090 --> 00:01:39.850
to a React project that is using Create React App.

30
00:01:39.850 --> 00:01:41.480
And it's, of course, easiest

31
00:01:41.480 --> 00:01:44.550
if you simply start a new project

32
00:01:44.550 --> 00:01:47.330
with TypeScript integration,

33
00:01:47.330 --> 00:01:49.360
though you also get instructions

34
00:01:49.360 --> 00:01:52.883
on how you can add TypeScript to an existing project.

35
00:01:53.720 --> 00:01:57.120
Now, we will simply create a new project here though,

36
00:01:57.120 --> 00:02:01.430
and therefore, I will just grab that command here.

37
00:02:01.430 --> 00:02:06.430
npx create-react-app, then my project name, my app name,

38
00:02:06.930 --> 00:02:10.800
and then this important --template flag

39
00:02:10.800 --> 00:02:12.261
which we add on this command,

40
00:02:12.261 --> 00:02:16.480
and which we then set to typescript as a value.

41
00:02:16.480 --> 00:02:18.680
And that will use a special template

42
00:02:18.680 --> 00:02:20.610
for creating this project

43
00:02:20.610 --> 00:02:24.193
which gives us a project configured for TypeScript.

44
00:02:25.240 --> 00:02:28.320
So if you grab that, we can run this command.

45
00:02:28.320 --> 00:02:31.550
And here, what I'll do is I'll open a terminal

46
00:02:31.550 --> 00:02:34.890
in my project here and I'll run this command,

47
00:02:34.890 --> 00:02:39.890
but I'll rename this to react-ts, this project name,

48
00:02:41.480 --> 00:02:43.260
and then hit enter.

49
00:02:43.260 --> 00:02:46.800
And this will now create this new project,

50
00:02:46.800 --> 00:02:51.780
this React TypeScript project in my existing folder here.

51
00:02:51.780 --> 00:02:55.543
Now let's wait for dev to finish and then we'll continue.

52
00:02:56.466 --> 00:02:58.590
Now here, it did finish.

53
00:02:58.590 --> 00:03:03.300
And with that, I got this new react-ts sub folder.

54
00:03:03.300 --> 00:03:05.930
And what I'll do now is I'll create another folder

55
00:03:05.930 --> 00:03:07.350
in my overall project

56
00:03:07.350 --> 00:03:11.890
which I'll name ts-basics, whoops, basics.

57
00:03:11.890 --> 00:03:16.890
And then I'll just move that old configuration

58
00:03:16.970 --> 00:03:20.450
into that ts-basics folder here.

59
00:03:20.450 --> 00:03:24.279
So those files on which we worked in the previous lectures,

60
00:03:24.279 --> 00:03:28.760
and I'll delete that node_modules folder there.

61
00:03:28.760 --> 00:03:31.760
And now we have these two folders side by side

62
00:03:31.760 --> 00:03:34.241
and it's, of course, the react-ts folder

63
00:03:34.241 --> 00:03:36.630
in which we'll work now.

64
00:03:36.630 --> 00:03:39.270
And for this here, I'll first of all,

65
00:03:39.270 --> 00:03:41.874
cd into this react-ts folder.

66
00:03:41.874 --> 00:03:44.530
And then, with npm start,

67
00:03:44.530 --> 00:03:47.260
we can still bring up that development server,

68
00:03:47.260 --> 00:03:51.060
just as we do it throughout the entire rest of this course.

69
00:03:51.060 --> 00:03:52.770
But now, here,

70
00:03:52.770 --> 00:03:56.423
we actually got our React project configured for TypeScript.

71
00:03:57.800 --> 00:04:00.380
If you visit Localhost:3000,

72
00:04:00.380 --> 00:04:03.092
you should still see that starting page.

73
00:04:03.092 --> 00:04:05.922
This default app we get here out of the box,

74
00:04:05.922 --> 00:04:09.178
but if you have a look at that source folder,

75
00:04:09.178 --> 00:04:10.828
then you will notice that

76
00:04:10.828 --> 00:04:15.828
instead of .js files, we have .tsx files in there.

77
00:04:18.620 --> 00:04:21.208
And that indicates that we're using TypeScript

78
00:04:21.208 --> 00:04:25.570
and it's .tsx instead of just .ts

79
00:04:25.570 --> 00:04:28.751
because we're using this JSX syntax in there.

80
00:04:28.751 --> 00:04:30.530
And if you are doing that

81
00:04:30.530 --> 00:04:34.320
to avoid unnecessary complaints by your IDE,

82
00:04:34.320 --> 00:04:37.950
you should be using .tsx as an extension

83
00:04:37.950 --> 00:04:40.800
if you're using JSX in those files.

84
00:04:40.800 --> 00:04:42.910
And I've written that it's basically

85
00:04:42.910 --> 00:04:46.340
just the same code we saw before in this course.

86
00:04:46.340 --> 00:04:49.253
There is really nothing special about that.

87
00:04:50.440 --> 00:04:53.020
Now, one important word about that dev server,

88
00:04:53.020 --> 00:04:54.790
which we started here again,

89
00:04:54.790 --> 00:04:57.400
this works as we're used to,

90
00:04:57.400 --> 00:04:58.750
but of course keep in mind

91
00:04:58.750 --> 00:05:02.230
that it's now doing one more thing behind the scenes.

92
00:05:02.230 --> 00:05:05.870
It's actually compiling our TypeScript code

93
00:05:05.870 --> 00:05:10.758
to JavaScript code, which then is taken an optimized fervor.

94
00:05:10.758 --> 00:05:14.659
Before with just React and Vanilla JavaScript,

95
00:05:14.659 --> 00:05:16.750
we just had this dev server,

96
00:05:16.750 --> 00:05:18.209
which takes our JavaScript code,

97
00:05:18.209 --> 00:05:20.749
bundles all the files together,

98
00:05:20.749 --> 00:05:24.600
and provides certain optimization steps.

99
00:05:24.600 --> 00:05:27.268
Now we still have all of that, but in addition,

100
00:05:27.268 --> 00:05:29.921
we have that extra TypeScript

101
00:05:29.921 --> 00:05:33.200
to JavaScript compilation step,

102
00:05:33.200 --> 00:05:35.688
which also takes place behind the scenes.

103
00:05:35.688 --> 00:05:40.688
So we don't need to convert our TypeScript files manually

104
00:05:41.100 --> 00:05:42.430
to JavaScript here.

105
00:05:42.430 --> 00:05:44.650
We don't need to compile them manually

106
00:05:44.650 --> 00:05:46.558
or call the compiler manually

107
00:05:46.558 --> 00:05:48.646
that happens behind the scenes.

108
00:05:48.646 --> 00:05:52.840
It would also happen automatically if you build your code

109
00:05:52.840 --> 00:05:56.630
for production by running npm run build.

110
00:05:56.630 --> 00:05:58.450
That's just a little side note,

111
00:05:58.450 --> 00:05:59.883
which I wanted to add here.

112
00:06:01.210 --> 00:06:04.880
Now before we dive into that code and clean it up a bit,

113
00:06:04.880 --> 00:06:06.840
I wanna talk about our dependencies

114
00:06:06.840 --> 00:06:08.855
in the package.json file though.

115
00:06:08.855 --> 00:06:12.680
In there, we generally got the same dependencies

116
00:06:12.680 --> 00:06:15.795
as before react and react-dom and react-scripts,

117
00:06:15.795 --> 00:06:19.900
but we also see a couple of extra dependencies.

118
00:06:19.900 --> 00:06:22.890
Specifically, we find typescript in there

119
00:06:22.890 --> 00:06:26.133
and also these types dependencies.

120
00:06:27.030 --> 00:06:28.550
Now typescript, of course,

121
00:06:28.550 --> 00:06:32.030
is the language to compiler for TypeScript

122
00:06:32.030 --> 00:06:34.340
which is installed into this project,

123
00:06:34.340 --> 00:06:37.670
so that we can use TypeScript in this project.

124
00:06:37.670 --> 00:06:42.100
That's also what we had in this ts-basics part

125
00:06:42.100 --> 00:06:44.320
we worked on in the last lectures,

126
00:06:44.320 --> 00:06:46.983
there we also installed TypeScript.

127
00:06:48.043 --> 00:06:51.416
But we now also have these extra types packages,

128
00:06:51.416 --> 00:06:54.043
and these are important packages.

129
00:06:54.043 --> 00:06:59.043
These @types packages act as translation bridges

130
00:07:00.720 --> 00:07:04.160
between Vanilla JavaScript libraries

131
00:07:04.160 --> 00:07:07.040
and TypeScript projects.

132
00:07:07.040 --> 00:07:10.940
So for example, we're using react and react-dom

133
00:07:10.940 --> 00:07:12.970
as libraries in this project,

134
00:07:12.970 --> 00:07:15.730
and these two libraries are, of course,

135
00:07:15.730 --> 00:07:18.373
written for just JavaScript.

136
00:07:19.410 --> 00:07:22.420
After all we worked with react and react-dom

137
00:07:22.420 --> 00:07:27.135
throughout this entire course with just JavaScript.

138
00:07:27.135 --> 00:07:30.676
Now, in order to also work with them in TypeScript

139
00:07:30.676 --> 00:07:35.510
and get great TypeScript and IDE support,

140
00:07:35.510 --> 00:07:38.470
great auto completion, and so on,

141
00:07:38.470 --> 00:07:40.510
we need translations

142
00:07:40.510 --> 00:07:44.250
between these raw Vanilla JavaScript libraries,

143
00:07:44.250 --> 00:07:46.040
which are written for JavaScript,

144
00:07:46.040 --> 00:07:48.870
and the TypeScript project.

145
00:07:48.870 --> 00:07:52.740
So extra type annotations that are added

146
00:07:52.740 --> 00:07:55.950
to these JavaScript libraries, you could say.

147
00:07:55.950 --> 00:07:58.580
And that's what @types/react

148
00:07:58.580 --> 00:08:02.860
and @types/react-dom provides.

149
00:08:02.860 --> 00:08:06.670
Not all libraries need such translations

150
00:08:06.670 --> 00:08:08.113
because some libraries

151
00:08:08.113 --> 00:08:12.080
actually already have built-in type annotations,

152
00:08:12.080 --> 00:08:16.580
even if you can use them with just JavaScript as well.

153
00:08:16.580 --> 00:08:19.840
But some libraries do need these extra annotations,

154
00:08:19.840 --> 00:08:23.023
and that's why here we got some extra annotations.

155
00:08:23.920 --> 00:08:26.350
Now with that, we can leave that.

156
00:08:26.350 --> 00:08:29.260
And with that, we can now dive into writing

157
00:08:29.260 --> 00:08:32.143
some React code with TypeScript.

