1
00:00:02,190 --> 00:00:04,990
So it's time for useState because

2
00:00:04,990 --> 00:00:07,110
of course we need to manage this todos array

3
00:00:07,110 --> 00:00:09,750
with state so that when we change it,

4
00:00:09,750 --> 00:00:11,670
this component re-renders and therefore

5
00:00:11,670 --> 00:00:15,493
these todos items also re-renders and is updated.

6
00:00:16,520 --> 00:00:19,140
And for this of course we do what we learned in this course.

7
00:00:19,140 --> 00:00:22,763
We import useState from react like this.

8
00:00:24,180 --> 00:00:27,880
And then todos actually will be converted.

9
00:00:27,880 --> 00:00:30,970
I will get rid of those dummy todos here.

10
00:00:30,970 --> 00:00:34,440
And instead I will call useState here.

11
00:00:36,755 --> 00:00:39,830
And, we now don't just get back todos here,

12
00:00:39,830 --> 00:00:41,770
but we get back in array as you learned,

13
00:00:41,770 --> 00:00:45,910
which we can destructure where we get our todos

14
00:00:45,910 --> 00:00:48,363
and this state updating function.

15
00:00:49,330 --> 00:00:51,220
And thanks to TypeScript we now

16
00:00:51,220 --> 00:00:55,330
for example see that setTodos if we hover over it

17
00:00:55,330 --> 00:00:58,700
is actually of type react dispatch,

18
00:00:58,700 --> 00:01:01,480
which might not be 100% clear

19
00:01:01,480 --> 00:01:04,390
but which is actually that state updating function

20
00:01:04,390 --> 00:01:07,060
which we can call to change our state,

21
00:01:07,060 --> 00:01:10,123
to dispatch a state update so to say.

22
00:01:12,400 --> 00:01:17,320
Now useState of course can take an initial value

23
00:01:17,320 --> 00:01:19,180
and that could be an array.

24
00:01:19,180 --> 00:01:20,800
And empty array initially

25
00:01:20,800 --> 00:01:22,863
because initially we have no todos.

26
00:01:24,530 --> 00:01:28,510
But here we actually now introduced a subtle problem

27
00:01:28,510 --> 00:01:29,940
if you write it like this.

28
00:01:29,940 --> 00:01:32,443
And do you see which problem that is?

29
00:01:34,930 --> 00:01:37,150
The problem is that I'm just passing

30
00:01:37,150 --> 00:01:41,180
in an empty array as a default value here.

31
00:01:41,180 --> 00:01:45,350
But TypeScript is not able to infer which types

32
00:01:45,350 --> 00:01:49,120
of values should be accepted in that array eventually.

33
00:01:49,120 --> 00:01:54,073
That's why todos at the moment is of type, never array.

34
00:01:55,330 --> 00:01:58,780
Of which basically means it always must be an empty array.

35
00:01:58,780 --> 00:02:01,410
No values are allowed in there.

36
00:02:01,410 --> 00:02:05,290
That's what this strange never type means here.

37
00:02:05,290 --> 00:02:08,009
And that's of course not what we want.

38
00:02:08,009 --> 00:02:10,550
But TypeScript infers this type

39
00:02:10,550 --> 00:02:13,680
because it's not able to infer that this

40
00:02:13,680 --> 00:02:17,720
should be an array of todos for example, eventually.

41
00:02:17,720 --> 00:02:20,943
Because the initial value has no information about that.

42
00:02:21,870 --> 00:02:25,310
To make it clear that we initially have an empty array

43
00:02:25,310 --> 00:02:28,160
but that eventually we wanna have an array full

44
00:02:28,160 --> 00:02:29,680
of to-do items here,

45
00:02:29,680 --> 00:02:33,250
we again need to tell TypeScript somehow.

46
00:02:33,250 --> 00:02:36,984
And we can tell TypeScript because useState,

47
00:02:36,984 --> 00:02:38,260
this useState function,

48
00:02:38,260 --> 00:02:41,010
out of the box is a generic function.

49
00:02:41,010 --> 00:02:43,580
It is generic for exactly this reason

50
00:02:43,580 --> 00:02:45,880
so that we can set the type of data

51
00:02:45,880 --> 00:02:48,393
we eventually wanna store in this state.

52
00:02:49,270 --> 00:02:51,480
So we add angle brackets again

53
00:02:51,480 --> 00:02:54,560
and now we wanna make it clear that the kind

54
00:02:54,560 --> 00:02:58,050
of data managed by the state will be an array of todos.

55
00:02:58,050 --> 00:03:00,660
We do this by using our todo type

56
00:03:00,660 --> 00:03:03,853
from that models folder and then square brackets.

57
00:03:04,900 --> 00:03:08,670
That means that this state will manage an array of todos.

58
00:03:08,670 --> 00:03:10,530
Initially it's an empty array,

59
00:03:10,530 --> 00:03:11,990
because that's all define

60
00:03:13,056 --> 00:03:15,130
that does not conflict with this type definition.

61
00:03:15,130 --> 00:03:18,540
But if we do add items to this array eventually

62
00:03:18,540 --> 00:03:20,330
they have to be todo items.

63
00:03:20,330 --> 00:03:23,360
Not strings, not numbers, todo items

64
00:03:23,360 --> 00:03:25,950
which have to shape off the

65
00:03:25,950 --> 00:03:28,703
todo object clause here, we created here.

66
00:03:29,690 --> 00:03:33,373
And now that's the proper way of defining this state.

67
00:03:34,250 --> 00:03:36,250
Now in add todo handler,

68
00:03:36,250 --> 00:03:40,370
we then wanna create our newTodo

69
00:03:40,370 --> 00:03:44,350
by calling newTodo and passing in the todo text

70
00:03:46,090 --> 00:03:49,490
as a value to the constructor.

71
00:03:49,490 --> 00:03:53,803
And then we wanna call a setTodos and update our state.

72
00:03:54,960 --> 00:03:58,310
Now here, I wanna use my old todos state

73
00:03:58,310 --> 00:04:01,850
so the existing array and add this new todo

74
00:04:01,850 --> 00:04:03,940
and you learned that if you wanna update

75
00:04:03,940 --> 00:04:06,420
your state based on the previous state,

76
00:04:06,420 --> 00:04:11,220
you should use this function form of updating your state.

77
00:04:11,220 --> 00:04:15,270
And in this function you get the current state

78
00:04:15,270 --> 00:04:17,269
so to say, or to previous state

79
00:04:17,269 --> 00:04:19,660
depending on how you wanna look at it,

80
00:04:19,660 --> 00:04:22,870
and then you need to return your updated state here.

81
00:04:22,870 --> 00:04:23,703
So in this case,

82
00:04:23,703 --> 00:04:25,580
I'll return previous todos, concat, newTodo.

83
00:04:25,580 --> 00:04:29,010
Concat is a method which we can call,

84
00:04:30,730 --> 00:04:34,170
that will create a new array, which we should do.

85
00:04:34,170 --> 00:04:36,250
We should not mutate the existing array.

86
00:04:36,250 --> 00:04:38,400
We should return a new array here,

87
00:04:38,400 --> 00:04:41,870
which then will be used as a new state by react

88
00:04:41,870 --> 00:04:44,350
and this new array, thanks to concat,

89
00:04:44,350 --> 00:04:45,860
contains this newTodo.

90
00:04:47,780 --> 00:04:50,983
That's how we can properly update the state here.

91
00:04:51,980 --> 00:04:54,080
And with all that in place,

92
00:04:54,080 --> 00:04:57,330
if we now save this and I reload,

93
00:04:57,330 --> 00:04:59,480
I got this unstyled form here,

94
00:04:59,480 --> 00:05:01,770
and no todo list at the moment,

95
00:05:01,770 --> 00:05:05,970
but if I then enter a Learn React here, then this is added.

96
00:05:05,970 --> 00:05:09,490
And if I add Learn TypeScript, this also is added.

97
00:05:09,490 --> 00:05:11,163
So that is working.

