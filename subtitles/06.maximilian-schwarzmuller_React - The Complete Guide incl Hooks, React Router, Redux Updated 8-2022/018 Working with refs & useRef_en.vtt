WEBVTT
1
00:00:02.500 --> 00:00:04.530
Now, we learned how we can use refs

2
00:00:04.530 --> 00:00:06.890
in a functional component.

3
00:00:06.890 --> 00:00:11.563
We can import the useRef hook here from react.

4
00:00:12.490 --> 00:00:13.570
And once we did that,

5
00:00:13.570 --> 00:00:15.330
we can create a ref,

6
00:00:15.330 --> 00:00:20.330
like the todoTextInputRef here, for example,

7
00:00:21.280 --> 00:00:23.330
and we call useRef like this

8
00:00:23.330 --> 00:00:25.253
to create such a reference.

9
00:00:26.610 --> 00:00:29.800
Then we can go to the HTML element

10
00:00:29.800 --> 00:00:32.090
to which you wanna connect the ref,

11
00:00:32.090 --> 00:00:34.710
typically an input element or a text area

12
00:00:34.710 --> 00:00:36.360
or something like this.

13
00:00:36.360 --> 00:00:40.740
And we set the special ref property on that element

14
00:00:40.740 --> 00:00:42.640
and point at our ref.

15
00:00:42.640 --> 00:00:45.650
In this case, we point at todoTextInputRef.

16
00:00:47.950 --> 00:00:51.260
Now, if I do that, you see I get an error down there though.

17
00:00:51.260 --> 00:00:53.580
Again with a very long text

18
00:00:53.580 --> 00:00:58.403
that in the end ref is receiving the wrong type of data.

19
00:00:59.490 --> 00:01:03.120
Now, ref wants a ref created with useRef,

20
00:01:03.120 --> 00:01:06.420
that's not wrong, but we're not explicit enough

21
00:01:06.420 --> 00:01:09.330
about the ref we're creating here.

22
00:01:09.330 --> 00:01:11.080
In vanilla JavaScript,

23
00:01:11.080 --> 00:01:13.690
this code works because we don't have the concept

24
00:01:13.690 --> 00:01:15.763
of extra type annotations.

25
00:01:16.610 --> 00:01:19.010
But when working with TypeScript,

26
00:01:19.010 --> 00:01:23.110
TypeScript actually wants to know a bit more about our ref.

27
00:01:23.110 --> 00:01:25.610
When we create it here,

28
00:01:25.610 --> 00:01:27.760
TypeScript actually has no idea

29
00:01:27.760 --> 00:01:31.330
that we eventually will connect it to a input element.

30
00:01:31.330 --> 00:01:33.363
That's only clear down there.

31
00:01:34.570 --> 00:01:36.790
But since it's not clear in this line,

32
00:01:36.790 --> 00:01:39.970
we could use this ref in any possible way.

33
00:01:39.970 --> 00:01:43.770
We can connect it to any HTML element.

34
00:01:43.770 --> 00:01:46.210
And that's, in the end, the kind of error we get here.

35
00:01:46.210 --> 00:01:48.830
We're passing a ref as a ref

36
00:01:48.830 --> 00:01:52.380
to this input that is not clearly focused

37
00:01:52.380 --> 00:01:54.790
on this kind of HTML element.

38
00:01:54.790 --> 00:01:57.303
This could also be a ref that wants a button.

39
00:01:58.390 --> 00:02:01.340
So we have to be more explicit about the kind

40
00:02:01.340 --> 00:02:05.900
of data we will store in this ref eventually.

41
00:02:05.900 --> 00:02:09.340
And we do this again with a generic type.

42
00:02:09.340 --> 00:02:14.340
That's why useRef actually is a generic type out of the box.

43
00:02:14.720 --> 00:02:17.130
We can add the angled brackets here now

44
00:02:17.130 --> 00:02:21.830
to explicitly set the concrete type of ref we wanna create

45
00:02:21.830 --> 00:02:23.690
in this instance.

46
00:02:23.690 --> 00:02:27.580
So ref, useRef is able to work with all kinds

47
00:02:27.580 --> 00:02:30.810
of data we will store in this ref here,

48
00:02:30.810 --> 00:02:35.800
all kinds of HTML objects we could connect with this ref

49
00:02:35.800 --> 00:02:39.830
but we now have to specify which concrete value

50
00:02:39.830 --> 00:02:42.100
or HTML element we plan

51
00:02:42.100 --> 00:02:45.650
on storing into this specific ref object

52
00:02:45.650 --> 00:02:47.853
we are creating here.

53
00:02:48.760 --> 00:02:52.310
And here I know that I wanna store such a input element

54
00:02:52.310 --> 00:02:54.790
and that has a built-in type.

55
00:02:54.790 --> 00:02:59.010
And that's the HTMLInputElement type.

56
00:02:59.010 --> 00:03:03.200
All those DOM elements have built-in types,

57
00:03:03.200 --> 00:03:05.770
which you can use in TypeScript to refer to them

58
00:03:05.770 --> 00:03:08.740
and for the input, it's the HTMLInputElement.

59
00:03:08.740 --> 00:03:11.480
For a button, it would be the HTMLButtonElement.

60
00:03:11.480 --> 00:03:15.080
For a paragraph, it would be the HTMLParagraphElement.

61
00:03:15.080 --> 00:03:16.193
And so on.

62
00:03:17.110 --> 00:03:20.520
You can also always visit the MDN page

63
00:03:20.520 --> 00:03:23.119
of an element, like here the input element.

64
00:03:23.119 --> 00:03:25.610
And even though that, of course,

65
00:03:25.610 --> 00:03:28.185
is not focusing on TypeScript at all,

66
00:03:28.185 --> 00:03:32.440
on that page, you will find information like this.

67
00:03:32.440 --> 00:03:36.280
Like here you find that the input element is based

68
00:03:36.280 --> 00:03:40.023
on the HTMLInputElement interface.

69
00:03:41.910 --> 00:03:45.400
And that's why we use that as a type here.

70
00:03:45.400 --> 00:03:47.440
So now we are making it clear

71
00:03:47.440 --> 00:03:49.950
that the ref we're creating here

72
00:03:49.950 --> 00:03:53.310
will actually be connected to an HTMLInputElement.

73
00:03:54.190 --> 00:03:56.720
But I'm still getting an error down there.

74
00:03:56.720 --> 00:03:58.170
And we're getting this error

75
00:03:58.170 --> 00:04:01.750
because actually we have to set a default value here

76
00:04:01.750 --> 00:04:04.340
because this ref could already be a sign

77
00:04:04.340 --> 00:04:06.710
to some other element maybe,

78
00:04:06.710 --> 00:04:08.880
out of the box by default.

79
00:04:08.880 --> 00:04:11.810
And that's why we should provide a starting value here

80
00:04:11.810 --> 00:04:13.420
and at the beginning,

81
00:04:13.420 --> 00:04:14.740
we have no connection

82
00:04:14.740 --> 00:04:17.740
and therefore, the starting value is null.

83
00:04:17.740 --> 00:04:19.160
But once we add this,

84
00:04:19.160 --> 00:04:20.790
this error goes away

85
00:04:20.790 --> 00:04:23.050
because now we are creating a ref,

86
00:04:23.050 --> 00:04:26.420
which will eventually be connected to an HTMLInputElement

87
00:04:27.308 --> 00:04:29.230
but which has no initial value.

88
00:04:29.230 --> 00:04:31.610
And we have to be explicit about this

89
00:04:31.610 --> 00:04:33.550
in case of useRef.

90
00:04:33.550 --> 00:04:37.170
And that's how you then create a ref when using TypeScript

91
00:04:37.170 --> 00:04:40.570
and how you then connect it to an element.

92
00:04:40.570 --> 00:04:43.313
And that then again just works as you learned it.

93
00:04:44.230 --> 00:04:46.086
Now, inside of the submitHandler,

94
00:04:46.086 --> 00:04:50.520
we can, of course, get the enteredText

95
00:04:50.520 --> 00:04:55.520
by referring to the todoTextInputRef.current.

96
00:04:55.580 --> 00:04:57.450
That's how we always do it for refs.

97
00:04:57.450 --> 00:04:59.600
They always have this current property,

98
00:04:59.600 --> 00:05:01.813
which then holds the actual value.

99
00:05:02.720 --> 00:05:04.900
Dot, and now the great thing

100
00:05:04.900 --> 00:05:09.160
is that since we explicitly set this ref

101
00:05:09.160 --> 00:05:10.740
to hold an InputElement,

102
00:05:10.740 --> 00:05:14.940
an HTMLInputElement, we get great autocompletion here.

103
00:05:14.940 --> 00:05:19.890
And we get all those input element object properties

104
00:05:19.890 --> 00:05:21.350
as suggestions here.

105
00:05:21.350 --> 00:05:24.240
So all the properties input element objects

106
00:05:24.240 --> 00:05:26.490
can have in JavaScript.

107
00:05:26.490 --> 00:05:27.900
And hence, we, for example,

108
00:05:27.900 --> 00:05:31.333
also get this value autosuggestion.

109
00:05:32.680 --> 00:05:34.810
You will notice this question mark

110
00:05:34.810 --> 00:05:36.480
after current though,

111
00:05:36.480 --> 00:05:39.723
which in my case was added automatically by the IDE.

112
00:05:41.000 --> 00:05:42.863
Where is this coming from?

113
00:05:44.100 --> 00:05:48.650
This question mark was added automatically by my IDE here

114
00:05:48.650 --> 00:05:53.650
because the ref is not necessarily set to a value yet

115
00:05:55.450 --> 00:05:56.563
when we use it.

116
00:05:57.400 --> 00:05:59.240
Of course, here as a developer,

117
00:05:59.240 --> 00:06:02.320
we know that when the submitHandler is called,

118
00:06:02.320 --> 00:06:06.900
todoTextInputRef will be connected to an element

119
00:06:06.900 --> 00:06:10.060
because this function can only be called

120
00:06:10.060 --> 00:06:11.570
when this form was submitted

121
00:06:11.570 --> 00:06:13.660
and that form can only be submitted

122
00:06:13.660 --> 00:06:16.173
after this ref was connected.

123
00:06:17.250 --> 00:06:18.710
But of course, theoretically,

124
00:06:18.710 --> 00:06:22.090
I could also try to extract a value right here

125
00:06:22.090 --> 00:06:23.590
after defining this ref

126
00:06:23.590 --> 00:06:26.980
and in that case, the ref would not be connected yet.

127
00:06:26.980 --> 00:06:30.870
And TypeScript doesn't deeply analyze our code,

128
00:06:30.870 --> 00:06:34.550
it doesn't know that this technically can't be called

129
00:06:34.550 --> 00:06:36.773
before this connection's established.

130
00:06:37.720 --> 00:06:42.170
In that case, this question mark addition here signals

131
00:06:42.170 --> 00:06:45.550
to TypeScript that it tries to access value

132
00:06:45.550 --> 00:06:47.260
and if that succeeds,

133
00:06:47.260 --> 00:06:51.210
the entered value will be stored in enteredText

134
00:06:51.210 --> 00:06:52.830
but if that fails,

135
00:06:52.830 --> 00:06:55.350
if the connection should not be established yet,

136
00:06:55.350 --> 00:06:58.816
null will be stored in enteredText.

137
00:06:58.816 --> 00:07:02.710
And that's why here the inferred type of enteredText

138
00:07:02.710 --> 00:07:06.530
actually also is string or undefined,

139
00:07:06.530 --> 00:07:08.883
which is basically the same as null here.

140
00:07:10.150 --> 00:07:13.380
So that means that TypeScript doesn't necessarily know

141
00:07:13.380 --> 00:07:16.563
that it will be able to extract this value.

142
00:07:17.750 --> 00:07:20.790
Now, if you as a developer are sure though

143
00:07:20.790 --> 00:07:22.660
that at this point of time

144
00:07:22.660 --> 00:07:25.880
there will be a non-null value,

145
00:07:25.880 --> 00:07:28.380
so here, in this case, you know that the connection

146
00:07:28.380 --> 00:07:29.970
has been established,

147
00:07:29.970 --> 00:07:34.250
you can use an exclamation mark instead of a question mark.

148
00:07:34.250 --> 00:07:37.480
This special annotation tells TypeScript

149
00:07:37.480 --> 00:07:41.840
that you know that this possibly nullish value

150
00:07:41.840 --> 00:07:45.200
will never be null in this spot.

151
00:07:45.200 --> 00:07:46.240
And therefore, of course,

152
00:07:46.240 --> 00:07:48.280
you should only use this annotation

153
00:07:48.280 --> 00:07:52.730
if you are 100% sure that this can't be null.

154
00:07:52.730 --> 00:07:53.700
So in this case,

155
00:07:53.700 --> 00:07:56.860
that this connection will have been established.

156
00:07:56.860 --> 00:07:58.810
And then the inferred type here

157
00:07:58.810 --> 00:08:02.340
is just string, not string or defined

158
00:08:02.340 --> 00:08:03.795
because you are sure

159
00:08:03.795 --> 00:08:07.370
that the connection will always be established

160
00:08:07.370 --> 00:08:11.670
and that extracting the value will therefore always succeed.

161
00:08:11.670 --> 00:08:14.270
And we can definitely do that here

162
00:08:14.270 --> 00:08:17.540
since we know that technically submitHandler,

163
00:08:17.540 --> 00:08:19.400
the way we write our code,

164
00:08:19.400 --> 00:08:22.810
can't be called before this line of code

165
00:08:22.810 --> 00:08:27.440
was parsed and this connection was therefore established.

166
00:08:27.440 --> 00:08:29.360
But that is an important concept,

167
00:08:29.360 --> 00:08:33.383
which I definitely also wanted to briefly explore here.

168
00:08:34.240 --> 00:08:36.289
Now, it is worth pointing out though

169
00:08:36.289 --> 00:08:38.419
that these question mark

170
00:08:38.419 --> 00:08:41.480
and exclamation mark operators

171
00:08:41.480 --> 00:08:45.440
are not related to refs specifically.

172
00:08:45.440 --> 00:08:48.640
This is also not a React-specific feature.

173
00:08:48.640 --> 00:08:51.260
Instead, these are regular operators,

174
00:08:51.260 --> 00:08:53.550
which you can use in TypeScript

175
00:08:53.550 --> 00:08:57.740
when you are working with values that could be null.

176
00:08:57.740 --> 00:09:01.230
With question mark, you're always saying try

177
00:09:01.230 --> 00:09:03.420
to get me that value

178
00:09:03.420 --> 00:09:07.240
and if it's null, store null in the constant

179
00:09:07.240 --> 00:09:10.070
or wherever I wanna store that value.

180
00:09:10.070 --> 00:09:11.500
With the exclamation mark,

181
00:09:11.500 --> 00:09:15.040
you're saying I'm certain that here we won't be dealing

182
00:09:15.889 --> 00:09:18.090
with null, so therefore, drill into this object,

183
00:09:18.090 --> 00:09:19.270
into this property

184
00:09:19.270 --> 00:09:23.400
and give me the actual stored non-null value

185
00:09:23.400 --> 00:09:26.160
and therefore then you will always get that value.

186
00:09:26.160 --> 00:09:27.640
But of course, as explained,

187
00:09:27.640 --> 00:09:30.220
that only works if you are certain

188
00:09:30.220 --> 00:09:32.090
that this can't be null.

189
00:09:32.090 --> 00:09:35.280
So these are two generally important operators

190
00:09:35.280 --> 00:09:38.830
in TypeScript, which here are very important

191
00:09:38.830 --> 00:09:40.460
when working with refs,

192
00:09:40.460 --> 00:09:44.180
since refs could be null or could not be connected

193
00:09:44.180 --> 00:09:46.847
to any value at this point.

194
00:09:46.847 --> 00:09:50.054
And with that, we've now got the enteredText

195
00:09:50.054 --> 00:09:52.330
and we could now validate it

196
00:09:52.330 --> 00:09:54.424
and check if enteredText,

197
00:09:54.424 --> 00:09:58.283
once we trim it maybe is empty,

198
00:09:59.170 --> 00:10:01.690
which would mean that nothing was entered in the end,

199
00:10:01.690 --> 00:10:03.293
just a bunch of blanks.

200
00:10:05.610 --> 00:10:07.660
Or anything like that.

201
00:10:07.660 --> 00:10:10.220
So here we could throw an error.

202
00:10:10.220 --> 00:10:12.083
I'll just return though.

203
00:10:13.470 --> 00:10:15.170
If we make it past this if check,

204
00:10:15.170 --> 00:10:17.570
we know that we have a valid input

205
00:10:17.570 --> 00:10:18.870
and just to make this clear,

206
00:10:18.870 --> 00:10:21.820
this is not about whether the ref is connected or not,

207
00:10:21.820 --> 00:10:25.220
this is just validating the text entered by the user,

208
00:10:25.220 --> 00:10:27.253
which has nothing to do with TypeScript.

209
00:10:28.210 --> 00:10:30.410
But once we made it past this if check,

210
00:10:30.410 --> 00:10:33.050
we now wanna add that todo

211
00:10:33.050 --> 00:10:34.800
to our list of todos.

212
00:10:34.800 --> 00:10:37.650
And we probably don't do this here

213
00:10:37.650 --> 00:10:41.456
inside of our NewTodo component function.

214
00:10:41.456 --> 00:10:44.240
Instead, we're managing the list of todos

215
00:10:44.240 --> 00:10:46.100
in the App component

216
00:10:46.100 --> 00:10:48.650
and hence, we'll need a way of communicating back

217
00:10:48.650 --> 00:10:52.300
to this App component to add the new todo there

218
00:10:52.300 --> 00:10:54.663
and we're going to do that in the next lecture.

