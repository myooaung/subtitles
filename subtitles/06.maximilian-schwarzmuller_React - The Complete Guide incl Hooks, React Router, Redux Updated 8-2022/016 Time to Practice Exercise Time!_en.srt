1
00:00:02,050 --> 00:00:04,120
So lots of TypeScript concepts

2
00:00:04,120 --> 00:00:06,180
are already at work here.

3
00:00:06,180 --> 00:00:07,500
And as mentioned before

4
00:00:07,500 --> 00:00:10,760
if you wanna learn about all those concepts in depth

5
00:00:10,760 --> 00:00:14,160
you definitely wanna check out the official TypeScript docs

6
00:00:14,160 --> 00:00:16,640
or some other types of resources.

7
00:00:16,640 --> 00:00:17,830
For example off course,

8
00:00:17,830 --> 00:00:21,113
also my complete TypeScript course which I have.

9
00:00:22,140 --> 00:00:24,310
But now let's dig a bit deeper here,

10
00:00:24,310 --> 00:00:26,760
we got this basic Todos component here

11
00:00:26,760 --> 00:00:30,130
which outputs these TodoItems here.

12
00:00:30,130 --> 00:00:32,140
Now, very often for that

13
00:00:32,140 --> 00:00:35,290
we would now have a separate Todo component

14
00:00:35,290 --> 00:00:36,980
so that this list item here

15
00:00:36,980 --> 00:00:39,230
is in a separate Todo component

16
00:00:39,230 --> 00:00:43,280
because in reality it often might be more complex

17
00:00:43,280 --> 00:00:46,210
than just li opening and closing tack

18
00:00:46,210 --> 00:00:47,700
and some texts in between

19
00:00:47,700 --> 00:00:50,410
even though that is what we have here.

20
00:00:50,410 --> 00:00:52,670
Now, I got a challenge and a little practice

21
00:00:52,670 --> 00:00:54,430
for you at this point.

22
00:00:54,430 --> 00:00:58,610
I want you to outsource this into a separate component

23
00:00:58,610 --> 00:01:01,640
and you should keep the JSX code as it is,

24
00:01:01,640 --> 00:01:03,760
don't make that more complex

25
00:01:03,760 --> 00:01:07,750
but make sure you create a new component

26
00:01:07,750 --> 00:01:11,080
and configure it correctly regarding the type,

27
00:01:11,080 --> 00:01:13,720
it needs the types it receives,

28
00:01:13,720 --> 00:01:16,030
the type of component it is.

29
00:01:16,030 --> 00:01:17,960
Make sure you do that

30
00:01:17,960 --> 00:01:21,313
such that you can continue working with that array of Todos.

31
00:01:22,480 --> 00:01:25,610
Here's a short pause for you to pause the video

32
00:01:25,610 --> 00:01:27,230
and try this on your own.

33
00:01:27,230 --> 00:01:30,080
They're all after we're going to implement this together.

34
00:01:35,241 --> 00:01:36,980
Were you successful?

35
00:01:36,980 --> 00:01:38,443
Let's build this together.

36
00:01:39,550 --> 00:01:41,970
And for this I'll create a new component,

37
00:01:41,970 --> 00:01:46,970
that Todo.tsx file or TodoItem.tsx file.

38
00:01:47,970 --> 00:01:50,040
And I'll go with TodoItem

39
00:01:50,040 --> 00:01:53,433
so that we have no confusion or a clash with the Todo,

40
00:01:54,590 --> 00:01:55,823
class we have here.

41
00:01:57,100 --> 00:02:00,650
Now, in this TodoItem component file here

42
00:02:00,650 --> 00:02:05,640
I wanna create my TodoItem functional components

43
00:02:05,640 --> 00:02:08,560
and I'll write it as an arrow function here

44
00:02:08,560 --> 00:02:13,407
and then export this oops, this TodoItem here,

45
00:02:13,407 --> 00:02:15,633
TodoItem like this.

46
00:02:17,770 --> 00:02:20,120
Now here, we'll get this prompts object

47
00:02:20,120 --> 00:02:21,180
we know that already

48
00:02:21,180 --> 00:02:25,250
because we'll ultimately return a list item

49
00:02:25,250 --> 00:02:29,763
with props.text as a content.

50
00:02:30,930 --> 00:02:33,190
The key will not be added here

51
00:02:33,190 --> 00:02:36,700
because the key should be added directly in the list

52
00:02:36,700 --> 00:02:38,370
so where you call map.

53
00:02:38,370 --> 00:02:40,120
And therefore I will add the key

54
00:02:40,120 --> 00:02:42,650
once we use the TodoItem component here,

55
00:02:42,650 --> 00:02:44,003
in the Todos component.

56
00:02:45,050 --> 00:02:48,550
But the key is not our primary problem at this point

57
00:02:48,550 --> 00:02:50,490
instead of the problem which we've got here

58
00:02:50,490 --> 00:02:53,060
is that we have those red squiggly lines

59
00:02:53,060 --> 00:02:56,143
because props is implicitly of type any.

60
00:02:57,030 --> 00:02:59,100
And it is implicitly of type any

61
00:02:59,100 --> 00:03:01,970
because we have no type annotations here.

62
00:03:01,970 --> 00:03:05,100
Now, when you create a new functional component,

63
00:03:05,100 --> 00:03:08,420
you learned that you should add this react fc,

64
00:03:08,420 --> 00:03:09,860
type annotation

65
00:03:09,860 --> 00:03:12,030
and that's what I'll do here.

66
00:03:12,030 --> 00:03:14,200
I'll make it clear that TodoItem

67
00:03:14,200 --> 00:03:16,270
is a react functional component

68
00:03:16,270 --> 00:03:18,830
by adding this type annotation.

69
00:03:18,830 --> 00:03:21,160
And for this, we can import react

70
00:03:21,160 --> 00:03:22,900
though we don't even have to do that

71
00:03:22,900 --> 00:03:25,580
in modern react project setups.

72
00:03:25,580 --> 00:03:29,943
You can still add the react import if you want to,

73
00:03:31,250 --> 00:03:33,180
but you don't have to.

74
00:03:33,180 --> 00:03:36,840
So now we make it clear that this is a functional component

75
00:03:36,840 --> 00:03:38,600
but now I get an error here

76
00:03:38,600 --> 00:03:43,280
because we now use a text property, which doesn't exist,

77
00:03:43,280 --> 00:03:46,480
because out of the box, a component gets props

78
00:03:46,480 --> 00:03:50,090
but it only has this children prop maybe

79
00:03:50,090 --> 00:03:53,913
and it definitely does not have a text prop out of the box.

80
00:03:54,890 --> 00:03:57,830
That's why we need those angle brackets here

81
00:03:57,830 --> 00:04:00,210
that allows us to merge in

82
00:04:00,210 --> 00:04:04,083
our own prop definitions with those base props.

83
00:04:05,170 --> 00:04:08,270
And here, we now wanna set up an object type

84
00:04:08,270 --> 00:04:10,370
because props is always an object

85
00:04:10,370 --> 00:04:13,853
and we always merge an object with those base props.

86
00:04:14,780 --> 00:04:17,490
And we now wanna make it clear,

87
00:04:17,490 --> 00:04:20,579
which kind of prop can expect here.

88
00:04:20,579 --> 00:04:22,460
And here it's not really up to you

89
00:04:22,460 --> 00:04:25,621
you could expect the entire Todo as a prop

90
00:04:25,621 --> 00:04:28,980
so the full TodoItem including the ID.

91
00:04:28,980 --> 00:04:31,983
So, an object based on this model,

92
00:04:32,880 --> 00:04:34,990
but that is actually redundant here

93
00:04:34,990 --> 00:04:37,750
because in this component, we're not using the ID

94
00:04:37,750 --> 00:04:40,500
we're only using the text.

95
00:04:40,500 --> 00:04:44,620
And therefore, we maybe just wanna get this text

96
00:04:44,620 --> 00:04:48,210
or the Todo text, however, you wanna name it.

97
00:04:48,210 --> 00:04:51,160
I'll go with text here, which will be a string

98
00:04:51,160 --> 00:04:53,754
because that's all we need here.

99
00:04:53,754 --> 00:04:56,220
And if I set it up like this, this error is gone

100
00:04:56,220 --> 00:04:59,210
and this component is ready to be used.

101
00:04:59,210 --> 00:05:01,590
If you came up with a solution

102
00:05:01,590 --> 00:05:05,300
where instead you expect to get the entire Todo,

103
00:05:05,300 --> 00:05:08,310
and you import Todo from your models folder,

104
00:05:08,310 --> 00:05:09,960
that's all the fine,

105
00:05:09,960 --> 00:05:12,950
but here I'll just build a very minimal component

106
00:05:12,950 --> 00:05:14,953
and just expect the text.

107
00:05:16,040 --> 00:05:19,890
And now, we can go to Todos tsx

108
00:05:20,830 --> 00:05:24,930
and here all our import TodoItem from,

109
00:05:26,500 --> 00:05:30,040
TodoItem from this TodoItem tsx file.

110
00:05:30,040 --> 00:05:35,040
And here output TodoItem for every item in this Todos,

111
00:05:36,030 --> 00:05:38,680
in this items prop here.

112
00:05:38,680 --> 00:05:41,790
And I'll set this key we can set this,

113
00:05:41,790 --> 00:05:45,720
even though we're not expecting a key prop here

114
00:05:45,720 --> 00:05:47,640
in our TodoItem component,

115
00:05:47,640 --> 00:05:51,740
because we are using this fc based type

116
00:05:51,740 --> 00:05:55,320
that does not just give us the children prop here

117
00:05:55,320 --> 00:05:57,230
it also actually makes sure that

118
00:05:57,230 --> 00:06:01,420
we can add these special props like to key prop

119
00:06:01,420 --> 00:06:03,740
on our component when we're using it.

120
00:06:03,740 --> 00:06:07,900
So we can add the key prop here to TodoItem.

121
00:06:07,900 --> 00:06:09,910
This key attributes so to say,

122
00:06:09,910 --> 00:06:12,420
and set this to item.id,

123
00:06:12,420 --> 00:06:16,530
and now very important at the text prop.

124
00:06:16,530 --> 00:06:19,010
And I'm also getting all the completion here

125
00:06:19,010 --> 00:06:21,490
if I press controlled space,

126
00:06:21,490 --> 00:06:26,490
you see that this text prop is one that it's suggested here.

127
00:06:26,730 --> 00:06:30,640
And then here, I'll set this equal to item.text

128
00:06:30,640 --> 00:06:33,980
and that's one way of building this TodpoItem component

129
00:06:33,980 --> 00:06:36,063
and using TypeScript for it.

130
00:06:37,040 --> 00:06:39,420
And with that, if I save everything again,

131
00:06:39,420 --> 00:06:41,260
we still get the same output

132
00:06:41,260 --> 00:06:43,760
as we did throughout the entire module.

133
00:06:43,760 --> 00:06:45,680
So that's not too exciting

134
00:06:45,680 --> 00:06:48,670
but now we're using yet another component

135
00:06:48,670 --> 00:06:52,740
which again, embraces TypeScript.

136
00:06:52,740 --> 00:06:55,750
And I'm really emphasizing this, because this

137
00:06:55,750 --> 00:07:00,253
is the bread and butter of using react with TypeScript.

