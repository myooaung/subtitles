WEBVTT
1
00:00:02.230 --> 00:00:03.900
So let's now have a look

2
00:00:03.900 --> 00:00:06.160
at this src folder

3
00:00:06.160 --> 00:00:09.070
because that is where we will spend the majority

4
00:00:09.070 --> 00:00:13.420
of our time, that is where we will write our React code.

5
00:00:13.420 --> 00:00:16.530
And the first thing you'll notice here

6
00:00:16.530 --> 00:00:18.170
in this starting project,

7
00:00:18.170 --> 00:00:20.670
which I provided in the last lecture

8
00:00:20.670 --> 00:00:23.990
that we have two JavaScript and one CSS file.

9
00:00:23.990 --> 00:00:26.050
And the most important takeaway here,

10
00:00:26.050 --> 00:00:28.820
which I really wanna emphasize right away

11
00:00:28.820 --> 00:00:33.630
is that React code is just JavaScript code.

12
00:00:33.630 --> 00:00:36.930
We are just going to write some JavaScript code.

13
00:00:36.930 --> 00:00:38.337
Throughout the entire course,

14
00:00:38.337 --> 00:00:40.620
we're going to use React features

15
00:00:40.620 --> 00:00:43.880
and some special syntax introduced by React,

16
00:00:43.880 --> 00:00:48.050
but ultimately, it'll all be just JavaScript.

17
00:00:48.050 --> 00:00:51.320
Now, let's start with the index.js file.

18
00:00:51.320 --> 00:00:53.830
You don't see it anywhere but I can tell you

19
00:00:53.830 --> 00:00:56.830
that this is actually the first code file,

20
00:00:56.830 --> 00:00:58.690
which will be executed

21
00:00:58.690 --> 00:01:01.260
whenever this page is loaded.

22
00:01:01.260 --> 00:01:05.209
So whenever you visit localhost:3000 here at the moment,

23
00:01:05.209 --> 00:01:08.200
this index JavaScript file holds the code,

24
00:01:08.200 --> 00:01:10.500
which is executed initially.

25
00:01:10.500 --> 00:01:12.840
Though I will also say right away

26
00:01:12.840 --> 00:01:14.990
that it's not exactly that code

27
00:01:14.990 --> 00:01:17.970
but a transformed version of that code.

28
00:01:17.970 --> 00:01:21.960
Remember when I said that our project setup here involves

29
00:01:21.960 --> 00:01:25.550
some scripts, which transform and optimize the code?

30
00:01:25.550 --> 00:01:28.400
Yeah, that is happening behind the scenes.

31
00:01:28.400 --> 00:01:31.250
Basically, we will write the code

32
00:01:31.250 --> 00:01:34.870
in a easy-to-read developer-friendly way

33
00:01:34.870 --> 00:01:37.000
with some syntactic sugar,

34
00:01:37.000 --> 00:01:40.050
which makes our life as a developer easier

35
00:01:40.050 --> 00:01:42.750
but we'll write code which wouldn't run like this

36
00:01:42.750 --> 00:01:43.950
in the browser.

37
00:01:43.950 --> 00:01:47.560
And especially not in all supported browsers.

38
00:01:47.560 --> 00:01:50.750
Therefore, the npm start process,

39
00:01:50.750 --> 00:01:51.860
which we started here,

40
00:01:51.860 --> 00:01:53.870
which started this development server,

41
00:01:53.870 --> 00:01:55.680
which is watching our code,

42
00:01:55.680 --> 00:01:58.580
this process will not just watch our code

43
00:01:58.580 --> 00:02:02.340
and then take it and deliver it to the browser,

44
00:02:02.340 --> 00:02:04.310
but before it delivers it,

45
00:02:04.310 --> 00:02:06.070
it will transform it.

46
00:02:06.070 --> 00:02:08.900
So that certain extra features work

47
00:02:08.900 --> 00:02:11.780
in the browser, even they wouldn't work

48
00:02:11.780 --> 00:02:14.280
if just this code would be taken.

49
00:02:14.280 --> 00:02:16.430
For example, this import here

50
00:02:16.430 --> 00:02:21.410
where we import a CSS file into a JavaScript file.

51
00:02:21.410 --> 00:02:25.140
That's not something which would work in regular JavaScript.

52
00:02:25.140 --> 00:02:28.370
That would be an invalid syntax.

53
00:02:28.370 --> 00:02:32.020
You can't import CSS into JavaScript.

54
00:02:32.020 --> 00:02:35.300
Well, here in this project setup, it does work.

55
00:02:35.300 --> 00:02:36.510
Here in the end,

56
00:02:36.510 --> 00:02:40.970
it tells this npm start process we could say

57
00:02:40.970 --> 00:02:45.170
that we simply want to include this index.css file

58
00:02:45.170 --> 00:02:47.810
into our overall application.

59
00:02:47.810 --> 00:02:50.720
That the CSS code in there should be considered

60
00:02:50.720 --> 00:02:53.360
and should be injected into this page,

61
00:02:53.360 --> 00:02:55.260
which is shown here on the screen.

62
00:02:55.260 --> 00:02:57.540
And that's why the styles defined in there,

63
00:02:57.540 --> 00:02:58.910
like the font family

64
00:02:58.910 --> 00:03:01.610
but also the background color of the body

65
00:03:01.610 --> 00:03:04.480
are picked up here on the screen,

66
00:03:04.480 --> 00:03:06.123
on the page that we see.

67
00:03:07.360 --> 00:03:09.580
Another example for syntax,

68
00:03:09.580 --> 00:03:12.140
which is not regular JavaScript syntax

69
00:03:12.140 --> 00:03:14.350
would be this here.

70
00:03:14.350 --> 00:03:17.400
It looks like some kind of HTML code

71
00:03:17.400 --> 00:03:19.600
inside of a JavaScript file.

72
00:03:19.600 --> 00:03:23.000
And normally, this also wouldn't work.

73
00:03:23.000 --> 00:03:26.150
Well, again, here it does work

74
00:03:26.150 --> 00:03:28.730
but only because this is transformed

75
00:03:28.730 --> 00:03:31.080
before it's delivered to the browser.

76
00:03:31.080 --> 00:03:32.460
And for the moment, you just need

77
00:03:32.460 --> 00:03:33.850
to be aware of that,

78
00:03:33.850 --> 00:03:36.260
that those transformations happen,

79
00:03:36.260 --> 00:03:38.440
and that the idea of that simply

80
00:03:38.440 --> 00:03:40.000
is that we can write code

81
00:03:40.000 --> 00:03:43.140
in a nice way, in a easy way

82
00:03:43.140 --> 00:03:45.010
and then still we have code in the end,

83
00:03:45.010 --> 00:03:46.843
which runs in all browsers.

84
00:03:47.680 --> 00:03:49.670
Now, the fact that the index.js file

85
00:03:49.670 --> 00:03:51.770
is the first file to be executed

86
00:03:51.770 --> 00:03:53.480
is just something you have to know.

87
00:03:53.480 --> 00:03:55.360
I'm telling you that this is the case

88
00:03:55.360 --> 00:03:56.550
because indeed, it is.

89
00:03:56.550 --> 00:03:59.800
And it's one of the few things you need to remember.

90
00:03:59.800 --> 00:04:03.570
Index.js here is the first file to execute.

91
00:04:03.570 --> 00:04:05.190
Now, what's that file doing though?

92
00:04:05.190 --> 00:04:07.240
What's happening here?

93
00:04:07.240 --> 00:04:11.890
Well, we are importing ReactDOM from react-dom,

94
00:04:11.890 --> 00:04:15.367
which in the end means we're importing something,

95
00:04:15.367 --> 00:04:17.529
some ReactDOM object

96
00:04:17.529 --> 00:04:20.480
from the react-dom third-party library,

97
00:04:20.480 --> 00:04:22.250
which is one of our dependencies,

98
00:04:22.250 --> 00:04:25.090
which is downloaded and installed locally.

99
00:04:25.090 --> 00:04:27.880
Now, in the package.json file,

100
00:04:27.880 --> 00:04:31.230
you actually see two React dependencies,

101
00:04:31.230 --> 00:04:33.220
react just like that

102
00:04:33.220 --> 00:04:35.990
and then this react-dom thing.

103
00:04:35.990 --> 00:04:38.910
And whilst this indeed technically

104
00:04:38.910 --> 00:04:41.360
are two separate packages,

105
00:04:41.360 --> 00:04:44.730
you can think of that as React, the library.

106
00:04:44.730 --> 00:04:47.070
It's split across two packages

107
00:04:47.070 --> 00:04:49.410
with different responsibilities

108
00:04:49.410 --> 00:04:52.050
but in the end, ReactDOM and React,

109
00:04:52.050 --> 00:04:55.730
these two dependencies together form the React library,

110
00:04:55.730 --> 00:04:59.220
which we're going to learn all about in this course.

111
00:04:59.220 --> 00:05:02.180
So whenever we import something from React,

112
00:05:02.180 --> 00:05:04.170
or from ReactDOM,

113
00:05:04.170 --> 00:05:06.540
it's basically both all about React,

114
00:05:06.540 --> 00:05:08.560
and we're using React features

115
00:05:08.560 --> 00:05:11.280
as we're doing it here in index.js

116
00:05:11.280 --> 00:05:13.953
where we are importing from ReactDOM.

117
00:05:15.100 --> 00:05:17.092
This simply makes a feature exposed

118
00:05:17.092 --> 00:05:19.320
by that library available

119
00:05:19.320 --> 00:05:22.240
inside of this index.js file

120
00:05:22.240 --> 00:05:25.730
because that's how modern JavaScript works in general.

121
00:05:25.730 --> 00:05:27.800
If you define a feature,

122
00:05:27.800 --> 00:05:31.350
let's say a function in file A,

123
00:05:31.350 --> 00:05:34.170
and you wanna use it in file B

124
00:05:34.170 --> 00:05:36.740
to split your code across multiple files

125
00:05:36.740 --> 00:05:39.880
to keep every file small and manageable,

126
00:05:39.880 --> 00:05:42.580
then you have to export the feature,

127
00:05:42.580 --> 00:05:45.950
which you wanna use in file B in file A,

128
00:05:45.950 --> 00:05:48.810
and then import it in file B.

129
00:05:48.810 --> 00:05:50.170
And that's what we're doing here.

130
00:05:50.170 --> 00:05:55.170
ReactDOM, this package, is exporting some React DOM object,

131
00:05:56.090 --> 00:05:59.570
and we're importing it here into index.js.

132
00:05:59.570 --> 00:06:03.110
And we are importing ReactDOM into index.js

133
00:06:03.110 --> 00:06:07.310
to then call a method on it, the createRoot method.

134
00:06:07.310 --> 00:06:10.830
This creates basically the main entry point,

135
00:06:10.830 --> 00:06:14.680
the main hook of the overall user interface you are

136
00:06:14.680 --> 00:06:17.080
about to build with React.

137
00:06:17.080 --> 00:06:19.200
That's the idea behind createRoot,

138
00:06:19.200 --> 00:06:20.690
and what this does in the end

139
00:06:20.690 --> 00:06:25.690
is it tells React where this React application,

140
00:06:26.930 --> 00:06:30.930
this user interface, which you build with React in the end

141
00:06:30.930 --> 00:06:35.930
should be placed in the web page that is loaded.

142
00:06:35.960 --> 00:06:38.730
And that leads us to one other file,

143
00:06:38.730 --> 00:06:43.730
the index.html file in that public folder.

144
00:06:44.020 --> 00:06:47.650
This folder is a folder in which we will rarely work

145
00:06:47.650 --> 00:06:49.930
but it holds one important file.

146
00:06:49.930 --> 00:06:52.230
This index.html file.

147
00:06:52.230 --> 00:06:55.200
This is the single HTML file,

148
00:06:55.200 --> 00:06:58.250
which is in the end loaded by the browser here.

149
00:06:58.250 --> 00:07:01.970
This is basically the only HTML file

150
00:07:01.970 --> 00:07:05.810
that is being used by this overall React application

151
00:07:05.810 --> 00:07:09.390
because it's a so-called single page application.

152
00:07:09.390 --> 00:07:12.230
It has a single HTML file

153
00:07:12.230 --> 00:07:16.500
and all subsequent changes on the user interface,

154
00:07:16.500 --> 00:07:20.040
on the web page will be handled by React.

155
00:07:20.040 --> 00:07:23.160
And it's this single HTML file

156
00:07:23.160 --> 00:07:24.970
that is the entry point,

157
00:07:24.970 --> 00:07:28.710
the place where the React-driven user interface

158
00:07:28.710 --> 00:07:32.480
should be rendered into so to say.

159
00:07:32.480 --> 00:07:34.360
And in this index.html file,

160
00:07:34.360 --> 00:07:37.340
we've got a regular HTML document structure,

161
00:07:37.340 --> 00:07:39.300
and if we have a look at the body,

162
00:07:39.300 --> 00:07:42.650
you will find a div like this in here.

163
00:07:42.650 --> 00:07:46.110
A div with the id root in this case.

164
00:07:46.110 --> 00:07:47.620
That's a regular div,

165
00:07:47.620 --> 00:07:50.970
which actually doesn't hold any content,

166
00:07:50.970 --> 00:07:53.600
but that's the div where we want

167
00:07:53.600 --> 00:07:58.600
to attach or inject our React-driven user interface.

168
00:08:00.250 --> 00:08:01.970
So the user interface,

169
00:08:01.970 --> 00:08:03.750
which we will build with React.

170
00:08:03.750 --> 00:08:05.750
And you're going to learn how that works

171
00:08:05.750 --> 00:08:07.510
throughout this course, of course.

172
00:08:07.510 --> 00:08:09.090
So it's this div

173
00:08:09.090 --> 00:08:13.270
where the React-based user interface should be rendered into

174
00:08:13.270 --> 00:08:15.580
and therefore, in index.js,

175
00:08:15.580 --> 00:08:18.380
it's this div with the id root,

176
00:08:18.380 --> 00:08:19.790
as you just saw.

177
00:08:19.790 --> 00:08:22.970
Remember, we have the id root on that div,

178
00:08:22.970 --> 00:08:27.810
which we select here with some regular JavaScript code,

179
00:08:27.810 --> 00:08:30.720
and then we use a method from the React library,

180
00:08:30.720 --> 00:08:33.280
from the ReactDOM library to be precise,

181
00:08:33.280 --> 00:08:36.070
which is part of the React library though

182
00:08:36.070 --> 00:08:38.549
to tell React that this should be the root

183
00:08:38.549 --> 00:08:40.409
of our React application,

184
00:08:40.409 --> 00:08:44.590
the main place where the React application gets rendered to

185
00:08:44.590 --> 00:08:45.980
so to say.

186
00:08:45.980 --> 00:08:48.630
That's what createRoot does.

187
00:08:48.630 --> 00:08:53.630
Then we store this root object in a constant or variable,

188
00:08:53.760 --> 00:08:57.480
and then on that object, on that root object,

189
00:08:57.480 --> 00:08:59.630
we can call the render method

190
00:08:59.630 --> 00:09:04.200
to tell React what should be rendered in that div

191
00:09:04.200 --> 00:09:06.160
that we selected here.

192
00:09:06.160 --> 00:09:07.530
And you could, by the way, of course,

193
00:09:07.530 --> 00:09:10.210
also select other elements like spans

194
00:09:10.210 --> 00:09:14.410
or paragraphs but a div is the most common root element

195
00:09:14.410 --> 00:09:16.310
that is selected.

196
00:09:16.310 --> 00:09:18.607
And we're in the end telling ReactDOM

197
00:09:18.607 --> 00:09:21.200
that we wanna render something,

198
00:09:21.200 --> 00:09:24.550
we'll have a look at that in a second in this place

199
00:09:24.550 --> 00:09:29.020
so that basically, the content of this div

200
00:09:29.020 --> 00:09:30.950
and as you can tell, there is no content,

201
00:09:30.950 --> 00:09:32.910
so what's inside of this div

202
00:09:32.910 --> 00:09:36.690
should be replaced with that.

203
00:09:36.690 --> 00:09:39.210
So, of course, that brings up another question.

204
00:09:39.210 --> 00:09:42.453
What is that app thing here?

205
00:09:43.310 --> 00:09:44.370
Well, first of all,

206
00:09:44.370 --> 00:09:46.780
it's also something which we're importing.

207
00:09:46.780 --> 00:09:50.020
We're importing App from the App file,

208
00:09:50.020 --> 00:09:51.890
and that's this App.js file.

209
00:09:51.890 --> 00:09:56.540
You just may omit and you should omit .js

210
00:09:56.540 --> 00:09:59.040
as the extension in your imports here.

211
00:09:59.040 --> 00:10:01.130
If it's another file, like a CSS file,

212
00:10:01.130 --> 00:10:02.290
you have to add it

213
00:10:02.290 --> 00:10:04.280
but if it's a third-party library

214
00:10:04.280 --> 00:10:08.733
or one of your JS files, you omit the .js.

215
00:10:10.010 --> 00:10:11.870
Now, we can tell that it's one of our files

216
00:10:11.870 --> 00:10:14.290
because we have a relative import path here,

217
00:10:14.290 --> 00:10:16.000
starting with ./

218
00:10:16.000 --> 00:10:18.500
which means please look in the same folder

219
00:10:18.500 --> 00:10:20.910
as this index.js file is in.

220
00:10:20.910 --> 00:10:23.580
And then use the App.js file.

221
00:10:23.580 --> 00:10:25.460
So this file here.

222
00:10:25.460 --> 00:10:28.600
And from that file, we import App.

223
00:10:28.600 --> 00:10:30.450
And then we do something with it

224
00:10:30.450 --> 00:10:35.450
but that is definitely not regular JavaScript syntax here.

225
00:10:35.760 --> 00:10:37.220
Indeed, it isn't.

226
00:10:37.220 --> 00:10:39.630
This is a syntax called JSX

227
00:10:39.630 --> 00:10:41.570
and I'll come back to it in a second.

228
00:10:41.570 --> 00:10:43.650
But before I come back to that,

229
00:10:43.650 --> 00:10:46.180
there's one key thing you've gotta know about App.

230
00:10:46.180 --> 00:10:49.120
App, in the end, is a component,

231
00:10:49.120 --> 00:10:50.310
and you might remember,

232
00:10:50.310 --> 00:10:52.610
components are important.

233
00:10:52.610 --> 00:10:56.700
Here we see our first component in action.

234
00:10:56.700 --> 00:10:58.710
It's this App component,

235
00:10:58.710 --> 00:11:01.490
which we, in the end, render in the place

236
00:11:01.490 --> 00:11:04.520
of that element with an id of root.

237
00:11:04.520 --> 00:11:06.580
So in place of that div

238
00:11:06.580 --> 00:11:09.313
or inside of that div to be precise.

239
00:11:10.170 --> 00:11:13.470
So therefore, let's now have a look at this App.js file.

240
00:11:13.470 --> 00:11:16.660
And this is a fairly trivial file.

241
00:11:16.660 --> 00:11:19.240
It holds a function named App

242
00:11:19.240 --> 00:11:22.270
and we then export this function

243
00:11:22.270 --> 00:11:23.850
because as I mentioned,

244
00:11:23.850 --> 00:11:27.230
in modern JavaScript, if you have something,

245
00:11:27.230 --> 00:11:28.930
like a function or a class

246
00:11:28.930 --> 00:11:31.960
or an object defined in one file

247
00:11:31.960 --> 00:11:34.310
and you wanna use it in another file,

248
00:11:34.310 --> 00:11:37.010
you have to export and import it.

249
00:11:37.010 --> 00:11:39.780
So here in App.js where this function is defined,

250
00:11:39.780 --> 00:11:44.120
we export it, and then we import it in index.js,

251
00:11:44.120 --> 00:11:47.190
and that's how these two files are connected

252
00:11:47.190 --> 00:11:49.290
and how we can use a feature,

253
00:11:49.290 --> 00:11:52.670
in this case, a function defined in App.js

254
00:11:52.670 --> 00:11:54.363
inside of index.js.

255
00:11:55.430 --> 00:11:58.860
Now, what's this App.js function doing though?

256
00:11:58.860 --> 00:12:00.800
Not much as you can tell.

257
00:12:00.800 --> 00:12:02.800
It's a function named App.

258
00:12:02.800 --> 00:12:04.470
Starting with a capital character

259
00:12:04.470 --> 00:12:05.690
might be a bit strange

260
00:12:05.690 --> 00:12:08.260
but it's valid JavaScript syntax.

261
00:12:08.260 --> 00:12:11.940
And then all we do in here is we return something.

262
00:12:11.940 --> 00:12:14.960
But what we return again is strange.

263
00:12:14.960 --> 00:12:19.098
It's HTML code inside of a JavaScript file.

264
00:12:19.098 --> 00:12:23.890
And again, that's not something you regularly see.

265
00:12:23.890 --> 00:12:26.120
It's also not something we're used to.

266
00:12:26.120 --> 00:12:31.100
And it's also not valid JavaScript code normally.

267
00:12:31.100 --> 00:12:34.520
Yet here, everything seems to work.

268
00:12:34.520 --> 00:12:35.920
The reason for that

269
00:12:35.920 --> 00:12:39.430
is that this is a feature called JSX.

270
00:12:39.430 --> 00:12:42.060
It's a special syntax invented

271
00:12:42.060 --> 00:12:44.780
and introduced by the React team,

272
00:12:44.780 --> 00:12:47.550
and it works in these JavaScript files

273
00:12:47.550 --> 00:12:50.260
because of our overall project setup

274
00:12:50.260 --> 00:12:53.530
and again, because of these transformation steps,

275
00:12:53.530 --> 00:12:55.680
which are running behind the scenes.

276
00:12:55.680 --> 00:12:58.450
But let's take a closer look at JSX,

277
00:12:58.450 --> 00:13:01.483
and what it is, and how it works in the next lecture.

