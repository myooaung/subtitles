WEBVTT
1
00:00:02.150 --> 00:00:07.130
Sort of filters working, let's go back to the ingredients component, which is where we, for example,

2
00:00:07.130 --> 00:00:08.550
add new ingredients.

3
00:00:09.380 --> 00:00:12.050
We also have a logic for removing ingredients.

4
00:00:12.050 --> 00:00:13.970
But right now, we're not doing this in Firebrace.

5
00:00:13.970 --> 00:00:17.480
We're only doing it locally, which, of course, means that, yeah, it's gone here.

6
00:00:17.480 --> 00:00:18.380
But if we reload.

7
00:00:19.510 --> 00:00:24.110
It's back now to the elite ingredients on the surface.

8
00:00:24.130 --> 00:00:30.760
Well, we, of course, need to send in a request here, so let's copy that fetch request and move it

9
00:00:30.760 --> 00:00:36.610
in here and to remove ingredient handler there, we send a delete request, which is understood by Firebase

10
00:00:36.610 --> 00:00:37.630
to delete data.

11
00:00:38.200 --> 00:00:41.770
You don't add a body here, don't need to add headers.

12
00:00:42.070 --> 00:00:47.710
But what you need to do is you need to specify in the you are well which item you want to delete.

13
00:00:48.490 --> 00:00:53.680
Therefore, I'll use tactics here so that I can use storing interpolation that string, because now

14
00:00:53.680 --> 00:00:57.160
after ingredients before Dodgson, I'll add another segment.

15
00:00:57.190 --> 00:01:02.230
So another slash and then string interpolation with thylacine and curly braces.

16
00:01:02.830 --> 00:01:06.400
And here I'll simply add the ingredient ID and that's the good thing.

17
00:01:06.520 --> 00:01:13.030
The ingredient is in the end, what we get when we click on the item here anyways in ingredients on

18
00:01:13.030 --> 00:01:19.320
Firebase, if we have a look there in the ingredients, ingredient IDs are the next notes we have there.

19
00:01:19.360 --> 00:01:24.040
So we target one of these nodes with this delete request and then this entry will simply be deleted.

20
00:01:25.100 --> 00:01:29.390
So that should be all we need here in the then block, we get the response.

21
00:01:29.510 --> 00:01:34.160
I don't really care about the response here, Bill, but I only want to update my ingredients here in

22
00:01:34.160 --> 00:01:39.380
Dubai once this response is there, which is why I moved that updating logic into this then block.

23
00:01:40.360 --> 00:01:41.200
Let's give it a try.

24
00:01:42.010 --> 00:01:44.440
All the ingredients are there in firebases, let's click on apples.

25
00:01:45.190 --> 00:01:49.470
You see, it took a bit longer for them to be removed, but they're now also removed here.

26
00:01:49.480 --> 00:01:50.710
We only have bananas here.

27
00:01:50.950 --> 00:01:53.770
Therefore, if I reload, we, of course, only load the bananas.

28
00:01:54.380 --> 00:01:56.770
Obviously, I can add my apples.

29
00:01:57.900 --> 00:02:02.550
And they're back here as well, but now the leading works the way it should, but that's, of course,

30
00:02:02.550 --> 00:02:04.110
nothing too fancy or new.

31
00:02:04.110 --> 00:02:05.850
It's also not using react hooks.

32
00:02:06.420 --> 00:02:12.840
But what we can handle with hooks now is whenever we wait for something on to complete, whenever we

33
00:02:12.840 --> 00:02:18.630
wait for data to be added or due to be deleted, we could show a little loading spinner.

34
00:02:18.900 --> 00:02:25.050
And on the same hand, if we have an error, we might show that error model, which I prepared, that

35
00:02:25.080 --> 00:02:26.760
these are the next things will tackle.

