WEBVTT
1
00:00:02.200 --> 00:00:04.450
Now, adding Todos is great,

2
00:00:04.450 --> 00:00:05.510
I also wanna make sure

3
00:00:05.510 --> 00:00:09.310
that we can remove Todos by simply clicking on them.

4
00:00:09.310 --> 00:00:12.640
And that's again another challenge I got for you.

5
00:00:12.640 --> 00:00:15.500
Add the code to this little demo app

6
00:00:15.500 --> 00:00:17.680
that ensures that if we click on a Todo

7
00:00:17.680 --> 00:00:19.463
we remove that Todo.

8
00:00:20.320 --> 00:00:23.470
You will only need things you'll learn up to this point

9
00:00:23.470 --> 00:00:25.430
after a couple of seconds

10
00:00:25.430 --> 00:00:27.270
which you can take to pause the video

11
00:00:27.270 --> 00:00:28.810
to try it on your own.

12
00:00:28.810 --> 00:00:30.273
We will do that together.

13
00:00:33.530 --> 00:00:36.340
So, where are you successful?

14
00:00:36.340 --> 00:00:39.200
Let's know make sure we can remove Todos.

15
00:00:39.200 --> 00:00:41.230
For that I wanna go to the TodoItem

16
00:00:41.230 --> 00:00:43.140
and make sure that we can click that.

17
00:00:43.140 --> 00:00:45.093
And when we click it, we remove a Todo.

18
00:00:46.420 --> 00:00:50.210
For that on this list item here, or TodoItem,

19
00:00:50.210 --> 00:00:52.730
I wanna add the onClick prop,

20
00:00:52.730 --> 00:00:56.530
this built in onClick prop to trigger some code

21
00:00:56.530 --> 00:00:58.730
when that is clicked.

22
00:00:58.730 --> 00:01:03.240
And then here in the end, I wanna point at a function

23
00:01:03.240 --> 00:01:05.740
which I expect to get through props

24
00:01:05.740 --> 00:01:08.961
because that is how we typically do this and how we did that

25
00:01:08.961 --> 00:01:12.783
up to this point, and of course in most demos.

26
00:01:14.510 --> 00:01:17.460
So therefore here, upon a click,

27
00:01:17.460 --> 00:01:19.050
I wanna trigger some function

28
00:01:19.050 --> 00:01:21.590
which is received through props

29
00:01:21.590 --> 00:01:23.380
and hence here we could, for example

30
00:01:23.380 --> 00:01:27.107
expect a prop named onRemoveTodo.

31
00:01:30.200 --> 00:01:33.093
The name is up to you because it's your Component.

32
00:01:34.090 --> 00:01:37.100
But of course, I'm getting some red squiggly lines here,

33
00:01:37.100 --> 00:01:39.640
and why am I getting this?

34
00:01:39.640 --> 00:01:43.840
Because I'm using a prop here, I'm referring to a prop

35
00:01:43.840 --> 00:01:45.870
which I'm not describing here

36
00:01:45.870 --> 00:01:49.940
in my type definition for this Functional Component.

37
00:01:49.940 --> 00:01:52.290
Here, I'm clearly just saying

38
00:01:52.290 --> 00:01:56.560
that this Component function will receive a props object

39
00:01:56.560 --> 00:02:00.090
which has these base props, the children prop

40
00:02:00.090 --> 00:02:03.700
and then my own props here merged into that.

41
00:02:03.700 --> 00:02:07.240
But there, I only have a text prop, nothing else,

42
00:02:07.240 --> 00:02:10.360
no onRemoveTodo prop.

43
00:02:10.360 --> 00:02:13.840
Now, since I wanna accept such an onRemoveTodo prop

44
00:02:13.840 --> 00:02:16.270
we should also describe it here.

45
00:02:16.270 --> 00:02:17.450
So we should make it clear

46
00:02:17.450 --> 00:02:21.970
that we will get an onRemovedTodo prop here as well,

47
00:02:21.970 --> 00:02:25.540
and then set the type of that prop value.

48
00:02:25.540 --> 00:02:27.360
And here that should be a function.

49
00:02:27.360 --> 00:02:29.543
A function which I'm binding to onClick.

50
00:02:30.570 --> 00:02:33.900
So, therefore we can describe a function type here.

51
00:02:33.900 --> 00:02:36.500
We are not interested in the return values.

52
00:02:36.500 --> 00:02:38.320
So here that can be void.

53
00:02:38.320 --> 00:02:41.160
So the function doesn't return anything.

54
00:02:41.160 --> 00:02:44.310
And regarding the argument, the parameter,

55
00:02:44.310 --> 00:02:46.860
we actually also don't need one.

56
00:02:46.860 --> 00:02:48.780
Now in case of onClick.

57
00:02:48.780 --> 00:02:52.300
So since we're passing this function on to onClick

58
00:02:52.300 --> 00:02:55.370
we could actually expect an event argument here

59
00:02:55.370 --> 00:02:58.213
which would be of type React.MouseEvent.

60
00:02:59.360 --> 00:03:01.910
That would be a type we could set here.

61
00:03:01.910 --> 00:03:05.230
This would describe the kind of function

62
00:03:05.230 --> 00:03:08.143
we can pass to onClick accurately.

63
00:03:09.010 --> 00:03:14.010
But actually describing this argument type is optional,

64
00:03:14.320 --> 00:03:17.040
because we might not be using it here

65
00:03:17.040 --> 00:03:19.960
and therefore, thankfully, we can also omit it

66
00:03:19.960 --> 00:03:22.250
and just shorten this function definition

67
00:03:22.250 --> 00:03:24.343
to just this definition.

68
00:03:25.190 --> 00:03:27.670
So now, we're passing this function,

69
00:03:27.670 --> 00:03:30.410
which we'll receive on onRemoveTodo,

70
00:03:30.410 --> 00:03:32.903
which has this shape to onClick.

71
00:03:34.110 --> 00:03:38.420
Now, we need to go to the place where we use TodoItem

72
00:03:38.420 --> 00:03:40.650
and make sure that this prop

73
00:03:40.650 --> 00:03:44.110
with such a kind of value is set.

74
00:03:44.110 --> 00:03:48.000
And that's the Todos.tsx file of course.

75
00:03:48.000 --> 00:03:51.520
Here, we're currently only passing in the text prop

76
00:03:51.520 --> 00:03:55.430
and we should now also pass in the onRemoveTodo prop.

77
00:03:55.430 --> 00:03:59.130
And thankfully, because we use TypeScript here,

78
00:03:59.130 --> 00:04:01.283
we get this auto completion again.

79
00:04:02.670 --> 00:04:06.690
So, now we wanna set onRemoveTodo to such a function

80
00:04:06.690 --> 00:04:08.400
which we're expecting.

81
00:04:08.400 --> 00:04:09.930
Now in the Todos Component,

82
00:04:09.930 --> 00:04:13.070
I actually don't wanna define that function though,

83
00:04:13.070 --> 00:04:17.730
because the Todos are being managed in App.tsx.

84
00:04:17.730 --> 00:04:20.670
So here again, I just, in the end wanna forward

85
00:04:20.670 --> 00:04:24.510
some prop value, which I get in this Component.

86
00:04:24.510 --> 00:04:26.623
So, we're building such a prop chain.

87
00:04:28.400 --> 00:04:32.130
So therefore here we can also accept another prop

88
00:04:32.130 --> 00:04:33.660
in this Todos Component

89
00:04:34.810 --> 00:04:38.440
which is maybe also called onRemoveTodo

90
00:04:38.440 --> 00:04:40.250
but that name is up to you,

91
00:04:40.250 --> 00:04:42.790
but which then also will be a function

92
00:04:42.790 --> 00:04:45.050
that has no parameters

93
00:04:45.050 --> 00:04:49.810
and that then actually also doesn't return anything.

94
00:04:49.810 --> 00:04:52.500
And here we then pass props.onRemoveTodo

95
00:04:54.110 --> 00:04:58.333
as a value to the onRemoveTodo prop of TodoItem.

96
00:04:59.750 --> 00:05:03.370
And that's again, all just what we learned in this course

97
00:05:03.370 --> 00:05:06.380
about passing functions to different Components

98
00:05:06.380 --> 00:05:08.880
and about building these prop chains

99
00:05:08.880 --> 00:05:13.193
for forwarding props through multiple layers of Components.

100
00:05:14.460 --> 00:05:18.710
And then here in App.txs, ultimately, we have to add

101
00:05:18.710 --> 00:05:22.010
onRemoveTodo here on Todos as well.

102
00:05:22.010 --> 00:05:24.760
And now here, I wanna define the function

103
00:05:24.760 --> 00:05:26.930
that should eventually be called,

104
00:05:26.930 --> 00:05:31.930
the removeTodoHandler function, which has a function.

105
00:05:32.560 --> 00:05:33.440
It looks like this.

106
00:05:33.440 --> 00:05:36.290
No arguments and doesn't return anything.

107
00:05:36.290 --> 00:05:38.600
And now it's just removeTodoHandler,

108
00:05:38.600 --> 00:05:41.787
which we pass as a value to onRemoveTodo.

109
00:05:43.252 --> 00:05:46.570
But this function definition is actually not correct.

110
00:05:46.570 --> 00:05:49.550
How would we know which Todo to remove?

111
00:05:49.550 --> 00:05:50.850
In the end here,

112
00:05:50.850 --> 00:05:53.920
I need some identification criteria.

113
00:05:53.920 --> 00:05:57.760
And for Todos since average Todo has a unique id,

114
00:05:57.760 --> 00:06:00.423
getting that id would make a lot of sense.

115
00:06:01.480 --> 00:06:04.110
So in App.tsx does removeTodoHandler,

116
00:06:04.110 --> 00:06:06.370
should actually get the id off that Todo

117
00:06:06.370 --> 00:06:08.080
that has to be removed.

118
00:06:08.080 --> 00:06:11.140
This TodoId which will be of type string.

119
00:06:11.140 --> 00:06:13.850
It will be of type string because that's the type we use

120
00:06:13.850 --> 00:06:16.853
for our ids in this Todos object.

121
00:06:17.850 --> 00:06:19.600
And then was when we get that,

122
00:06:19.600 --> 00:06:24.600
we can actually call set setTodos and use this function form

123
00:06:24.780 --> 00:06:28.810
since we're updating the state based on the previous state.

124
00:06:28.810 --> 00:06:32.960
And then there, we could return prevTodos.filter

125
00:06:32.960 --> 00:06:35.680
to filter out the Todo what we wanna remove

126
00:06:36.910 --> 00:06:38.194
and go through all the Todos

127
00:06:38.194 --> 00:06:43.194
and remove the todo where the id is equal to todoId

128
00:06:44.180 --> 00:06:47.180
and not filter out the other todos.

129
00:06:47.180 --> 00:06:48.633
That's how we can do that.

130
00:06:49.820 --> 00:06:51.680
So, that's how we can remove a Todo

131
00:06:51.680 --> 00:06:55.230
from this list of Todos and how we remove the todo

132
00:06:55.230 --> 00:06:58.450
with that id which we're getting here.

133
00:06:58.450 --> 00:07:00.860
We are checking for an equality here

134
00:07:00.860 --> 00:07:03.400
because we wanna keep all the todos

135
00:07:03.400 --> 00:07:05.440
where the ids do not match

136
00:07:05.440 --> 00:07:08.060
and that's the way we have to look at this.

137
00:07:08.060 --> 00:07:09.600
But we now have a problem.

138
00:07:09.600 --> 00:07:14.600
RemoveTodoHandler now wants this todoId of type string,

139
00:07:14.610 --> 00:07:17.208
but that's not the type of function

140
00:07:17.208 --> 00:07:20.040
onRemoveTodo is giving us here.

141
00:07:20.040 --> 00:07:22.130
In this Todos Component after all,

142
00:07:22.130 --> 00:07:26.070
I said that the function we get here takes no parameters,

143
00:07:26.070 --> 00:07:28.140
and that's simply incorrect.

144
00:07:28.140 --> 00:07:31.070
Indeed, here, we should expect that id

145
00:07:31.070 --> 00:07:32.293
which is of type string,

146
00:07:33.310 --> 00:07:36.300
but now onRemoveTodo on the TodoItem

147
00:07:36.300 --> 00:07:38.220
is having the wrong definition

148
00:07:38.220 --> 00:07:42.220
because there, I'm still saying that we have no parameters.

149
00:07:42.220 --> 00:07:44.940
And again, that's simply incorrect here,

150
00:07:44.940 --> 00:07:47.230
and we can now either update that here

151
00:07:47.230 --> 00:07:51.040
and make sure that we do set the correct Id here,

152
00:07:51.040 --> 00:07:55.160
though, for that we also need to accept it here as a prop

153
00:07:55.160 --> 00:08:00.160
or we go to Todos.tsx and we actually bind onRemoveTodo.

154
00:08:01.610 --> 00:08:04.770
Bind is a default method in JavaScript

155
00:08:04.770 --> 00:08:07.510
which allows us to pre-configure a function

156
00:08:07.510 --> 00:08:09.730
for future execution.

157
00:08:09.730 --> 00:08:13.150
We also saw that a couple of times in this course.

158
00:08:13.150 --> 00:08:15.150
And here, we, first of all set

159
00:08:15.150 --> 00:08:17.820
what this keyword will refer to

160
00:08:17.820 --> 00:08:20.090
in this to be called function,

161
00:08:20.090 --> 00:08:21.210
and we don't care about that here

162
00:08:21.210 --> 00:08:23.183
so, I'll set that to null.

163
00:08:24.040 --> 00:08:26.740
And then we set the first argument

164
00:08:26.740 --> 00:08:29.670
onRemoveTodo will then receive later.

165
00:08:29.670 --> 00:08:31.620
And that should be that id here.

166
00:08:31.620 --> 00:08:33.253
So item.id.

167
00:08:34.090 --> 00:08:36.470
And with that, all the errors are cleared

168
00:08:36.470 --> 00:08:40.880
because now onRemoveTodo will indeed receive that id here

169
00:08:40.880 --> 00:08:42.570
when it's being called.

170
00:08:42.570 --> 00:08:45.353
And that then allows us to properly remove a Todo.

171
00:08:46.750 --> 00:08:48.490
If we now save everything,

172
00:08:48.490 --> 00:08:51.770
if I click on a Todo it is removed.

173
00:08:51.770 --> 00:08:56.770
So, if I add all my Todos here I can delete them

174
00:08:56.860 --> 00:08:58.390
by clicking on them.

175
00:08:58.390 --> 00:09:01.700
And that's now working as we see in the console

176
00:09:01.700 --> 00:09:05.460
also without any errors or warnings.

177
00:09:05.460 --> 00:09:08.940
And that's how we can use the React with TypeScript.

178
00:09:08.940 --> 00:09:11.520
Now to finish this module,

179
00:09:11.520 --> 00:09:13.510
this introductory module here,

180
00:09:13.510 --> 00:09:17.330
I also wanna show you how you can use the context API

181
00:09:17.330 --> 00:09:20.310
with TypeScript, and then we'll wrap this up

182
00:09:20.310 --> 00:09:22.350
and I'll show you which other resources

183
00:09:22.350 --> 00:09:25.853
you can check out to learn more about React in TypeScript.

