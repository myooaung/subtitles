WEBVTT
1
00:00:02.100 --> 00:00:05.350
So let's delete those hard-coded Todos here.

2
00:00:05.350 --> 00:00:07.780
And now let's say we get some props here.

3
00:00:07.780 --> 00:00:12.380
And now my goal is that the props should have items

4
00:00:14.010 --> 00:00:17.010
or Todos prop, where I can then map

5
00:00:17.010 --> 00:00:21.580
through all those items to then output the list items.

6
00:00:21.580 --> 00:00:23.150
And you can already see here

7
00:00:23.150 --> 00:00:26.740
that now I'm getting those red squiggly lines here.

8
00:00:26.740 --> 00:00:30.480
And if we hover over that, we see that prompts is declared

9
00:00:30.480 --> 00:00:32.729
but it's value is never read.

10
00:00:32.729 --> 00:00:35.700
So we're getting a warning that we're not using props

11
00:00:35.700 --> 00:00:38.300
and that's a little extra help

12
00:00:38.300 --> 00:00:40.370
we get into TypeScript project

13
00:00:40.370 --> 00:00:42.150
which we don't necessarily get

14
00:00:42.150 --> 00:00:44.730
in a vanilla JavaScript project.

15
00:00:44.730 --> 00:00:48.380
We are warned if we have some unnecessary code,

16
00:00:48.380 --> 00:00:50.300
code that we're not using.

17
00:00:50.300 --> 00:00:52.940
And we also get this warning

18
00:00:52.940 --> 00:00:57.383
that the parameter props is implicitly of` type any.

19
00:00:58.350 --> 00:01:01.750
And that means that we did not assign a type here.

20
00:01:01.750 --> 00:01:05.000
We're not making it clear which kind of type disease

21
00:01:05.000 --> 00:01:07.110
and therefore we're basically not getting

22
00:01:07.110 --> 00:01:09.460
any TypeScript support.

23
00:01:09.460 --> 00:01:11.950
And that's why you can configure TypeScript

24
00:01:11.950 --> 00:01:16.470
such that it warns you if you are implicitly using any.

25
00:01:16.470 --> 00:01:20.770
If I now explicitly set this to type any, it would be okay.

26
00:01:20.770 --> 00:01:23.940
I'm now explicitly saying I don't have any more

27
00:01:23.940 --> 00:01:27.080
specific information about this props argument;

28
00:01:27.080 --> 00:01:28.490
it is of type any.

29
00:01:28.490 --> 00:01:31.700
It could be anything and that's then fine.

30
00:01:31.700 --> 00:01:34.210
But if you don't set this type explicitly,

31
00:01:34.210 --> 00:01:36.400
you are implicitly assuming

32
00:01:36.400 --> 00:01:38.790
that you don't know anything about that type

33
00:01:38.790 --> 00:01:41.230
and that's why TypeScript is warning us here.

34
00:01:41.230 --> 00:01:44.250
We shouldn't make this implicit assumption.

35
00:01:44.250 --> 00:01:46.470
By the way you can configure the strictness

36
00:01:46.470 --> 00:01:49.920
of TypeScript here in the tsconfig.json file.

37
00:01:49.920 --> 00:01:52.220
But I'll come back to that a little bit later.

38
00:01:53.130 --> 00:01:55.030
For the moment what we need to do here

39
00:01:55.030 --> 00:01:56.750
is we need to make it clear

40
00:01:56.750 --> 00:01:59.470
which kind of props we're getting here,

41
00:01:59.470 --> 00:02:03.250
what the type of props in this function should be.

42
00:02:03.250 --> 00:02:06.500
And of course, we can do this with a type assignment here.

43
00:02:06.500 --> 00:02:11.500
And now we could actually say that props is an object type.

44
00:02:12.080 --> 00:02:15.010
So we add those curly braces.

45
00:02:15.010 --> 00:02:17.140
And again, that's not a value here,

46
00:02:17.140 --> 00:02:19.320
that's a type definition.

47
00:02:19.320 --> 00:02:20.940
It's an object type

48
00:02:20.940 --> 00:02:25.680
and we know that props in React will always be an object

49
00:02:25.680 --> 00:02:30.680
with all the attributes we added on our own element here

50
00:02:30.770 --> 00:02:35.090
in App.tsx as key value pairs.

51
00:02:35.090 --> 00:02:35.940
So here we could say

52
00:02:35.940 --> 00:02:40.490
that we expect to get some Todos or some items

53
00:02:40.490 --> 00:02:43.300
and then in turn could be an array of strings,

54
00:02:43.300 --> 00:02:45.300
let's say like this.

55
00:02:45.300 --> 00:02:48.230
That's how we could say that props is an object

56
00:02:48.230 --> 00:02:49.750
with the items key,

57
00:02:49.750 --> 00:02:53.323
which then itself holds an array of strings as a value.

58
00:02:55.060 --> 00:02:59.120
But that would actually not be 100% correct.

59
00:02:59.120 --> 00:03:03.050
Props does not just have the key value pairs.

60
00:03:03.050 --> 00:03:07.960
we added on our component when we use it in JSX.

61
00:03:07.960 --> 00:03:10.330
Instead, props is an object

62
00:03:10.330 --> 00:03:13.260
which does have those key value pairs.

63
00:03:13.260 --> 00:03:18.190
But remember that they're also always as a special prop,

64
00:03:18.190 --> 00:03:20.550
the children prop

65
00:03:20.550 --> 00:03:23.940
and we don't even know the type of that yet.

66
00:03:23.940 --> 00:03:26.180
Now we could find out which type that should be

67
00:03:26.180 --> 00:03:27.830
and then added like this

68
00:03:27.830 --> 00:03:30.570
but it would quickly become cumbersome

69
00:03:30.570 --> 00:03:33.340
if for every component that we're defining

70
00:03:33.340 --> 00:03:35.010
that is using props,

71
00:03:35.010 --> 00:03:39.800
we have to always add those built-in props to that object

72
00:03:39.800 --> 00:03:42.600
and then also our custom props.

73
00:03:42.600 --> 00:03:44.590
And because that's cumbersome,

74
00:03:44.590 --> 00:03:48.690
and because we have that base prop object

75
00:03:48.690 --> 00:03:50.530
which we get an every component,

76
00:03:50.530 --> 00:03:53.430
which for example includes this children prop,

77
00:03:53.430 --> 00:03:55.570
React gives us a different way here

78
00:03:55.570 --> 00:03:59.540
or React and TypeScript gives us a different way here.

79
00:03:59.540 --> 00:04:03.593
We can use such a generic type, which you might remember.

80
00:04:04.720 --> 00:04:08.300
We can use such a generic type or to be precise,

81
00:04:08.300 --> 00:04:11.910
a functional component out of the box

82
00:04:11.910 --> 00:04:16.910
can be turned, can be converted into a generic function.

83
00:04:18.240 --> 00:04:20.860
Which then simply means that in the end

84
00:04:20.860 --> 00:04:23.320
our functional component will be configured

85
00:04:23.320 --> 00:04:25.060
such that we make it clear

86
00:04:25.060 --> 00:04:27.800
that it will be our React component function

87
00:04:27.800 --> 00:04:32.040
and that it will have all those base props like children.

88
00:04:32.040 --> 00:04:35.640
And we can then define explicitly our own props

89
00:04:35.640 --> 00:04:38.500
like the items prop, for example, here

90
00:04:38.500 --> 00:04:42.360
that should be combined into the props object.

91
00:04:42.360 --> 00:04:45.070
And if that's not 100% clear yet,

92
00:04:45.070 --> 00:04:46.960
I'll show you how it works.

93
00:04:46.960 --> 00:04:50.430
We can actually write this a little bit differently

94
00:04:50.430 --> 00:04:53.310
and use this arrow function syntax

95
00:04:53.310 --> 00:04:56.650
which we used throughout this course all the time.

96
00:04:56.650 --> 00:04:58.640
So that our Todos constant here

97
00:04:58.640 --> 00:05:01.590
holds this React component function.

98
00:05:01.590 --> 00:05:06.150
And now we can assign a type here to this Todos constant.

99
00:05:06.150 --> 00:05:09.010
And the type here should actually be React

100
00:05:09.010 --> 00:05:11.130
for which we need to import React

101
00:05:11.130 --> 00:05:15.793
from React like this, dot FC.

102
00:05:17.920 --> 00:05:21.700
Now that's a type defined in this React package

103
00:05:21.700 --> 00:05:25.530
or to be precise by this typesreact package

104
00:05:25.530 --> 00:05:28.110
but we can just import React from React

105
00:05:28.110 --> 00:05:30.570
and the rest will be done behind the scenes.

106
00:05:30.570 --> 00:05:33.350
So this is a type definition here.

107
00:05:33.350 --> 00:05:36.020
Now, if I hold Cmd and click on this

108
00:05:36.020 --> 00:05:40.030
or Ctrl and click on this, I see the type definition here.

109
00:05:40.030 --> 00:05:42.060
And I see that it's a function component

110
00:05:42.060 --> 00:05:44.510
which is yet another type definition built

111
00:05:44.510 --> 00:05:46.113
into this React package.

112
00:05:47.600 --> 00:05:51.330
Now what React.FC in the end does as a type definition

113
00:05:51.330 --> 00:05:55.610
is it makes it clear that this here is a function

114
00:05:55.610 --> 00:05:58.300
that acts as a functional component.

115
00:05:58.300 --> 00:06:02.650
That's what FC stands for functional component.

116
00:06:02.650 --> 00:06:05.790
And you see that now the red squiggly lines for props

117
00:06:05.790 --> 00:06:07.340
are gone.

118
00:06:07.340 --> 00:06:11.050
And if I now try to use props here in my JSX code

119
00:06:11.050 --> 00:06:15.210
and I add a dot, I see that I now get this auto-completion

120
00:06:15.210 --> 00:06:17.990
for the children props.

121
00:06:17.990 --> 00:06:21.330
So now, simply by adding this type annotation

122
00:06:21.330 --> 00:06:24.550
in TypeScript and my IDE therefore,

123
00:06:24.550 --> 00:06:26.880
which is very smart about that,

124
00:06:26.880 --> 00:06:29.700
understands that this is a function

125
00:06:29.700 --> 00:06:32.230
that receives a props object

126
00:06:32.230 --> 00:06:34.420
as an argument, as a first argument,

127
00:06:34.420 --> 00:06:39.050
which will be an object that always has a children property,

128
00:06:39.050 --> 00:06:41.580
a children field.

129
00:06:41.580 --> 00:06:44.230
And it understands does it knows this

130
00:06:44.230 --> 00:06:46.283
because of this type assignment here.

131
00:06:47.180 --> 00:06:49.960
Now I mentioned that generic types would be important

132
00:06:49.960 --> 00:06:53.290
because this is actually a generic type

133
00:06:53.290 --> 00:06:56.370
and we can now merge our own type definition

134
00:06:56.370 --> 00:06:57.760
for it as props object.

135
00:06:57.760 --> 00:07:01.670
So our own props, this functional component we'll get

136
00:07:01.670 --> 00:07:05.810
with those built-in based props like the children prop.

137
00:07:05.810 --> 00:07:09.670
And for this, we add angled brackets or after FC here.

138
00:07:09.670 --> 00:07:11.750
And then between those angle brackets

139
00:07:11.750 --> 00:07:14.890
we define our own props.

140
00:07:14.890 --> 00:07:17.300
Now, when we use angle brackets here,

141
00:07:17.300 --> 00:07:19.530
we actually use them slightly differently

142
00:07:19.530 --> 00:07:24.050
than we did before when I introduced you to generic types.

143
00:07:24.050 --> 00:07:26.070
There we used angle brackets

144
00:07:26.070 --> 00:07:29.100
to create our own generic function

145
00:07:29.100 --> 00:07:32.420
that has this generic type parameter

146
00:07:32.420 --> 00:07:33.700
if you want to call it like this,

147
00:07:33.700 --> 00:07:36.120
this generic type T here,

148
00:07:36.120 --> 00:07:39.380
which then could be used inside of the function,

149
00:07:39.380 --> 00:07:43.340
and which in the example I gave you then was inferred

150
00:07:43.340 --> 00:07:47.183
by TypeScript when we used that generic function.

151
00:07:48.050 --> 00:07:50.470
Here we're using it slightly differently.

152
00:07:50.470 --> 00:07:55.470
Here, React.FC already is a generic type.

153
00:07:56.030 --> 00:08:01.030
It describes a type defined by the React package

154
00:08:01.560 --> 00:08:04.020
that is actually generic.

155
00:08:04.020 --> 00:08:06.980
So that's type internally is also defined

156
00:08:06.980 --> 00:08:08.840
with those angle brackets.

157
00:08:08.840 --> 00:08:13.120
And here, when I also add angled brackets in our code,

158
00:08:13.120 --> 00:08:15.530
I'm not setting up a new generic type

159
00:08:15.530 --> 00:08:18.290
with some placeholder type T,

160
00:08:18.290 --> 00:08:20.880
but I'm plugging in a concrete value

161
00:08:20.880 --> 00:08:24.920
for that internally used generic type

162
00:08:24.920 --> 00:08:29.843
before that type T defined by that React.FC type.

163
00:08:30.760 --> 00:08:32.822
And I'm doing that here because here

164
00:08:32.822 --> 00:08:36.860
we can't let TypeScript infer that generic type

165
00:08:36.860 --> 00:08:40.440
as it did it in the example I showed you before.

166
00:08:40.440 --> 00:08:44.320
We can't let TypeScript infer the type here

167
00:08:44.320 --> 00:08:47.740
because here we're not calling some generic function

168
00:08:47.740 --> 00:08:51.030
with some parameters where the values then could be used

169
00:08:51.030 --> 00:08:52.680
for the inference,

170
00:08:52.680 --> 00:08:55.620
but instead we're defining a function

171
00:08:55.620 --> 00:08:57.650
and we want to let TypeScript know

172
00:08:57.650 --> 00:09:01.020
how it should then treat this function internally

173
00:09:01.020 --> 00:09:03.920
that it should get some props to find by us

174
00:09:03.920 --> 00:09:08.110
and merge those with some base props like the children prop

175
00:09:08.110 --> 00:09:10.720
which all functional components have.

176
00:09:10.720 --> 00:09:13.200
And what you see here, therefore, is the other side

177
00:09:13.200 --> 00:09:16.790
of generic types that you use a generic type

178
00:09:16.790 --> 00:09:21.570
and you explicitly set the concrete type that should be used

179
00:09:21.570 --> 00:09:26.100
for this usage of this generic FC type.

180
00:09:26.100 --> 00:09:29.270
Here, I'm saying this FC type is generic

181
00:09:29.270 --> 00:09:31.640
and the concrete value I'm plugging in now

182
00:09:31.640 --> 00:09:36.270
is my own props object where I describe my own props

183
00:09:36.270 --> 00:09:39.560
for this specific functional component.

184
00:09:39.560 --> 00:09:43.330
And it's generic because different functional components

185
00:09:43.330 --> 00:09:46.190
have different props definitions.

186
00:09:46.190 --> 00:09:50.030
And that's how we do that with React and TypeScript here,

187
00:09:50.030 --> 00:09:54.350
how we can also use this generic types feature.

188
00:09:54.350 --> 00:09:56.450
Now this angle brackets index

189
00:09:56.450 --> 00:09:59.150
is the generic type syntax here,

190
00:09:59.150 --> 00:10:03.290
and by adding it here, we actually unlock a feature

191
00:10:03.290 --> 00:10:06.610
built into this FC type, which we're using here,

192
00:10:06.610 --> 00:10:10.860
which we'll merge, whichever object type we're defining here

193
00:10:10.860 --> 00:10:15.030
with that base object type, with the children property.

194
00:10:15.030 --> 00:10:16.310
And here we could then say

195
00:10:16.310 --> 00:10:20.050
that we want to have items which has an array of strings.

196
00:10:20.050 --> 00:10:22.610
And what this does now is that here, if I, again

197
00:10:22.610 --> 00:10:25.510
type props dot, it still knows

198
00:10:25.510 --> 00:10:27.990
that there will be a children property

199
00:10:27.990 --> 00:10:31.440
at least that there could be a children property.

200
00:10:31.440 --> 00:10:34.490
But that we now also have this items property

201
00:10:34.490 --> 00:10:36.670
which will be a string array.

202
00:10:36.670 --> 00:10:38.740
And it knows that because we now merge

203
00:10:38.740 --> 00:10:40.950
our own prop object definition

204
00:10:40.950 --> 00:10:44.730
with that base prop object definition.

205
00:10:44.730 --> 00:10:47.880
And that might all sound super complex

206
00:10:47.880 --> 00:10:50.610
but it's just sounding like this because I'm explaining

207
00:10:50.610 --> 00:10:52.720
that behind the scenes stuff here.

208
00:10:52.720 --> 00:10:56.060
In the end, using it as super simple,

209
00:10:56.060 --> 00:11:00.080
you build functional components with React and TypeScript

210
00:11:00.080 --> 00:11:03.050
by using this React.FC type here

211
00:11:03.050 --> 00:11:06.390
on your functional component constant here,

212
00:11:06.390 --> 00:11:08.530
and then you use those angle brackets.

213
00:11:08.530 --> 00:11:10.470
And between those angle brackets,

214
00:11:10.470 --> 00:11:12.730
you define your own props

215
00:11:12.730 --> 00:11:14.530
your own prop object type

216
00:11:14.530 --> 00:11:17.900
if your component gets some custom props

217
00:11:17.900 --> 00:11:22.110
and then in the component, you can use those custom props.

218
00:11:22.110 --> 00:11:26.530
And here we can then use props items, use map,

219
00:11:26.530 --> 00:11:29.960
and we get auto-completion here for this array method

220
00:11:29.960 --> 00:11:33.570
because TypeScript knows that items will be an array

221
00:11:33.570 --> 00:11:36.570
because here we defined that it will be an array.

222
00:11:36.570 --> 00:11:40.610
And we can then map all our items and turn every item

223
00:11:40.610 --> 00:11:44.420
into a list item here where I output item

224
00:11:44.420 --> 00:11:47.560
and where I set the key equal to item.

225
00:11:47.560 --> 00:11:51.000
So for the moment my key will just be the string

226
00:11:51.000 --> 00:11:53.133
inside of this items array.

227
00:11:54.550 --> 00:11:57.740
And now I'll reformat that, and that's not as finished

228
00:11:57.740 --> 00:12:02.530
Todos component with proper type notation.

229
00:12:02.530 --> 00:12:06.100
Now, the great thing about using TypeScript with React

230
00:12:06.100 --> 00:12:09.440
is now not just that this is now more descriptive

231
00:12:09.440 --> 00:12:11.910
and we get the auto-completion here

232
00:12:11.910 --> 00:12:14.660
when we work inside of this component,

233
00:12:14.660 --> 00:12:17.200
though that's already pretty good.

234
00:12:17.200 --> 00:12:21.820
But then now you also see we have an error in App.tsx

235
00:12:21.820 --> 00:12:24.560
Because of our type annotations,

236
00:12:24.560 --> 00:12:26.540
React now understands

237
00:12:26.540 --> 00:12:29.640
or this project set up to be precise,

238
00:12:29.640 --> 00:12:33.170
now understands that we're using this Todos component

239
00:12:33.170 --> 00:12:35.300
in an incorrect way.

240
00:12:35.300 --> 00:12:37.890
Because I making it clear here,

241
00:12:37.890 --> 00:12:40.820
in this type definition of the Todos component

242
00:12:40.820 --> 00:12:45.360
that this component will have an items prop

243
00:12:45.360 --> 00:12:48.200
and this is not an optional prop.

244
00:12:48.200 --> 00:12:51.200
We could make it optional by adding a question mark here

245
00:12:51.200 --> 00:12:53.120
but then here, we need to handle the case

246
00:12:53.120 --> 00:12:56.060
that we don't necessarily have items.

247
00:12:56.060 --> 00:12:58.280
But here it's also not optional at all,

248
00:12:58.280 --> 00:13:01.390
and therefore we have to add it here.

249
00:13:01.390 --> 00:13:05.520
And that's another strong reason for using TypeScript.

250
00:13:05.520 --> 00:13:10.070
We can now really describe the shape of our components

251
00:13:10.070 --> 00:13:12.200
and which props they need

252
00:13:12.200 --> 00:13:15.850
and therefore using our components incorrectly.

253
00:13:15.850 --> 00:13:18.550
And for example, not passing in all the props

254
00:13:18.550 --> 00:13:21.780
that component needs is pretty much impossible

255
00:13:21.780 --> 00:13:25.913
because we get errors like this directly in the IDE now.

256
00:13:26.750 --> 00:13:31.300
So here I can now add my items and for the moment,

257
00:13:31.300 --> 00:13:34.800
just add some dummy Todos here,

258
00:13:34.800 --> 00:13:37.860
like learn React and learn TypeScript,

259
00:13:37.860 --> 00:13:39.320
we format this,

260
00:13:39.320 --> 00:13:42.100
and now all errors are gone.

261
00:13:42.100 --> 00:13:43.870
And we now see that output again,

262
00:13:43.870 --> 00:13:46.620
but now thanks to our props

263
00:13:46.620 --> 00:13:49.430
and those props now work properly.

264
00:13:49.430 --> 00:13:52.210
Thanks to our type annotations.

265
00:13:52.210 --> 00:13:54.240
And I did spend a lot of times

266
00:13:54.240 --> 00:13:56.160
talking about this type annotation,

267
00:13:56.160 --> 00:13:58.570
but I hope it's clear how it works

268
00:13:58.570 --> 00:14:00.280
and even more importantly,

269
00:14:00.280 --> 00:14:02.050
it's clear how you use it.

270
00:14:02.050 --> 00:14:04.700
And as you see using it is super simple.

271
00:14:04.700 --> 00:14:07.680
It's this type annotation, which you want to add

272
00:14:07.680 --> 00:14:10.140
to every custom component you're building.

273
00:14:10.140 --> 00:14:12.760
And then if you are using your own props,

274
00:14:12.760 --> 00:14:14.520
you add this generic type

275
00:14:14.520 --> 00:14:16.250
and you describe your props

276
00:14:16.250 --> 00:14:18.153
between those angle brackets.

