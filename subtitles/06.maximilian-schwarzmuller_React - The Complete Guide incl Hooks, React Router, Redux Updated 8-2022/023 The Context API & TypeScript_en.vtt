WEBVTT
1
00:00:02.180 --> 00:00:04.290
So let's now wrap up this module

2
00:00:04.290 --> 00:00:09.140
by also exploring the context API with TypeScript.

3
00:00:09.140 --> 00:00:11.760
For this, I'll add a new folder, store,

4
00:00:11.760 --> 00:00:12.960
which is not a must have,

5
00:00:12.960 --> 00:00:16.059
but the convention we used typically in this course,

6
00:00:16.059 --> 00:00:21.060
and there I'll add my todo stash context.tsx file.

7
00:00:21.590 --> 00:00:24.983
A TSX because I'll write some JSX code in there.

8
00:00:25.940 --> 00:00:28.830
Now, in there, we can start by creating the todos context

9
00:00:28.830 --> 00:00:31.973
by calling react, create context.

10
00:00:33.090 --> 00:00:36.310
And for this, even though it's technically not required,

11
00:00:36.310 --> 00:00:38.800
it's not a bad idea to import react

12
00:00:38.800 --> 00:00:40.280
to make it a bit more transparent

13
00:00:40.280 --> 00:00:42.513
where react is coming from here.

14
00:00:43.460 --> 00:00:45.950
Now, I'm calling create context here,

15
00:00:45.950 --> 00:00:49.330
and create context actually wants a default value,

16
00:00:49.330 --> 00:00:51.540
it wants one argument.

17
00:00:51.540 --> 00:00:55.150
And here it can be an object where we describe the shape

18
00:00:55.150 --> 00:00:58.160
of this todos context.

19
00:00:58.160 --> 00:01:01.290
And there we'll have our items, let's say,

20
00:01:01.290 --> 00:01:03.790
which will initially be an empty array.

21
00:01:03.790 --> 00:01:08.790
And then we also have the add todo function,

22
00:01:09.070 --> 00:01:12.240
which will be a function that does nothing here,

23
00:01:12.240 --> 00:01:14.350
and the remove todo function,

24
00:01:14.350 --> 00:01:18.073
which gets the idea of type string, and then does nothing.

25
00:01:19.760 --> 00:01:24.080
Now, at this point already, we can add more TypeScript logic

26
00:01:24.080 --> 00:01:27.590
because for example, items is an empty array here,

27
00:01:27.590 --> 00:01:30.580
and we again would have the problem that it's not clear

28
00:01:30.580 --> 00:01:35.580
which kind of values should eventually end up in this array.

29
00:01:35.730 --> 00:01:39.330
For that reason, create context also is a generic type.

30
00:01:39.330 --> 00:01:41.570
So we can add those angle brackets here

31
00:01:41.570 --> 00:01:45.160
after create context in front of the parameter list

32
00:01:45.160 --> 00:01:48.800
to better describe our context object.

33
00:01:48.800 --> 00:01:51.060
Because here between the brackets,

34
00:01:51.060 --> 00:01:53.480
we're not setting up some type definition.

35
00:01:53.480 --> 00:01:56.650
This here is some concrete JavaScript code

36
00:01:56.650 --> 00:02:00.680
where we create a JavaScript object with some properties.

37
00:02:00.680 --> 00:02:03.350
So here we're not setting up some type.

38
00:02:03.350 --> 00:02:06.340
The only type we're setting up here is this argument type,

39
00:02:06.340 --> 00:02:08.703
because I'm creating a concrete function here.

40
00:02:09.860 --> 00:02:13.110
To define the overall type of this object here,

41
00:02:13.110 --> 00:02:16.730
we need to use this generic type feature

42
00:02:16.730 --> 00:02:18.020
between the angle brackets,

43
00:02:18.020 --> 00:02:21.483
and then describe our context object type here.

44
00:02:22.340 --> 00:02:24.090
And here, we can now make it clear

45
00:02:24.090 --> 00:02:27.690
that items will now be a todo array.

46
00:02:27.690 --> 00:02:30.940
For that we import todo from the models folder

47
00:02:30.940 --> 00:02:32.870
and the todo file there.

48
00:02:32.870 --> 00:02:35.430
And now here we have a pure type definition.

49
00:02:35.430 --> 00:02:36.610
So here I'm making it clear

50
00:02:36.610 --> 00:02:39.610
that items will be of type todo array.

51
00:02:39.610 --> 00:02:42.060
And then I'm making it clear that add todo

52
00:02:42.060 --> 00:02:45.450
will be a function type that returns nothing.

53
00:02:45.450 --> 00:02:47.470
So that's the difference to down there,

54
00:02:47.470 --> 00:02:49.900
that's a concrete function definition

55
00:02:49.900 --> 00:02:52.040
with a empty function body.

56
00:02:52.040 --> 00:02:54.160
That's a function type definition

57
00:02:54.160 --> 00:02:56.190
where I'm just defining the return type

58
00:02:56.190 --> 00:02:59.950
of that function here, void, and no parameters.

59
00:02:59.950 --> 00:03:01.153
And then remove todo,

60
00:03:02.280 --> 00:03:04.380
which is also a function that returns nothing

61
00:03:04.380 --> 00:03:08.433
but that gets an argument of type string.

62
00:03:09.520 --> 00:03:11.893
And that's now my to do's context.

63
00:03:13.360 --> 00:03:16.700
Now I'll create such a context provider component

64
00:03:16.700 --> 00:03:19.510
as I also did it multiple times in this course,

65
00:03:19.510 --> 00:03:23.613
which will be responsible for managing that context state.

66
00:03:24.900 --> 00:03:29.900
So here I'll add the todos context provider,

67
00:03:30.160 --> 00:03:34.300
todos context provider component here.

68
00:03:34.300 --> 00:03:36.730
And that will be a functional component,

69
00:03:36.730 --> 00:03:39.850
so we should set this to react.fc

70
00:03:39.850 --> 00:03:41.780
as a type to make it clear

71
00:03:41.780 --> 00:03:44.423
that we'll store a functional component in there.

72
00:03:45.990 --> 00:03:49.280
Therefore we need to return some renderable content here,

73
00:03:49.280 --> 00:03:52.130
because that makes up a functional component.

74
00:03:52.130 --> 00:03:54.630
And hence here I'll return some JSX code.

75
00:03:54.630 --> 00:03:59.123
To be precise, I'll return todos context.provider.

76
00:04:01.290 --> 00:04:06.290
And then between that, I wanna output props children.

77
00:04:08.680 --> 00:04:10.370
And children is a default prop,

78
00:04:10.370 --> 00:04:14.373
so we don't need to describe this shape of props for that.

79
00:04:15.370 --> 00:04:16.202
Like this.

80
00:04:17.140 --> 00:04:20.000
Now, of course, here, in the todos context provider,

81
00:04:20.000 --> 00:04:23.503
I wanna manage my state for this context.

82
00:04:24.430 --> 00:04:28.070
So therefore in there, we wanna call use state.

83
00:04:28.070 --> 00:04:32.050
And for that, make sure you import use state from react,

84
00:04:32.050 --> 00:04:34.110
and manage the todos state here

85
00:04:34.110 --> 00:04:37.100
as we did it in app tsx before.

86
00:04:37.100 --> 00:04:40.980
And therefore I'll actually copy or cut all that code

87
00:04:40.980 --> 00:04:44.390
from the app component, this state management code

88
00:04:44.390 --> 00:04:47.840
and the functions there, and add that here

89
00:04:47.840 --> 00:04:51.113
into this traduced context provider component like this.

90
00:04:52.910 --> 00:04:55.080
Because that code is still valid

91
00:04:55.080 --> 00:04:57.520
and still fine to be used like this.

92
00:04:57.520 --> 00:04:59.110
And now that I added this here,

93
00:04:59.110 --> 00:05:04.110
we can construct our context value here,

94
00:05:04.490 --> 00:05:07.860
which is an object, of that shape here.

95
00:05:07.860 --> 00:05:10.923
So of these types and values,

96
00:05:11.810 --> 00:05:14.790
and therefore here I can add my items

97
00:05:14.790 --> 00:05:16.533
and set this equal to todos,

98
00:05:17.670 --> 00:05:20.893
which is this todos state I'm getting here.

99
00:05:22.580 --> 00:05:27.580
And I set add todo equal to add todo handler,

100
00:05:28.510 --> 00:05:33.510
and remove todo equal to remove todo handler.

101
00:05:34.740 --> 00:05:39.510
And now I can set the value here equal to context value.

102
00:05:39.510 --> 00:05:42.650
And if I do that, I get red squiggly lines here.

103
00:05:42.650 --> 00:05:44.100
I'm getting red squiggly lines

104
00:05:44.100 --> 00:05:47.770
because actually my context value object here

105
00:05:47.770 --> 00:05:50.890
does not have exactly the shape I describe up here

106
00:05:50.890 --> 00:05:53.310
when I create my context.

107
00:05:53.310 --> 00:05:55.200
Now, what's the difference?

108
00:05:55.200 --> 00:05:56.940
The difference is add todo,

109
00:05:56.940 --> 00:05:59.940
and I introduced this on purpose.

110
00:05:59.940 --> 00:06:03.160
I define here when I create my context,

111
00:06:03.160 --> 00:06:07.070
that add todo does not take any parameters,

112
00:06:07.070 --> 00:06:09.020
but clearly it takes a parameter

113
00:06:09.020 --> 00:06:14.020
when I then create the concrete function for this object.

114
00:06:14.620 --> 00:06:17.560
Here, I'm expecting the todo text.

115
00:06:17.560 --> 00:06:20.330
And then I'm setting this add todo handler function

116
00:06:20.330 --> 00:06:21.723
as a value for add todo.

117
00:06:23.830 --> 00:06:26.070
That's why I'm getting this error down here.

118
00:06:26.070 --> 00:06:27.790
Now, I'm getting this error down here

119
00:06:27.790 --> 00:06:31.210
because here when I create this context value object,

120
00:06:31.210 --> 00:06:33.200
I'm not saying anything about the type

121
00:06:33.200 --> 00:06:36.800
of data that's expected in this context value object.

122
00:06:36.800 --> 00:06:38.300
We might wanna do that

123
00:06:38.300 --> 00:06:41.170
to already catch the error here though.

124
00:06:41.170 --> 00:06:45.220
And for that, we can add a type assignment here as well

125
00:06:45.220 --> 00:06:48.230
to be clear about the type we wanna have in there,

126
00:06:48.230 --> 00:06:50.330
instead of inferring it.

127
00:06:50.330 --> 00:06:53.840
That's a scenario where setting the type explicitly

128
00:06:53.840 --> 00:06:57.260
could make sense so that we're not inferring a type

129
00:06:57.260 --> 00:07:00.380
that's incorrect as we're currently doing it.

130
00:07:00.380 --> 00:07:02.030
And the type I wanna set here

131
00:07:02.030 --> 00:07:04.520
is of course the same type as up there.

132
00:07:04.520 --> 00:07:08.210
So I can copy that and add that down there.

133
00:07:08.210 --> 00:07:11.870
Now we see that we catch the error here already.

134
00:07:11.870 --> 00:07:13.770
Now, before we fix it though,

135
00:07:13.770 --> 00:07:17.240
copy and pasting is always not ideal.

136
00:07:17.240 --> 00:07:20.440
So instead of copy and pasting this type definition,

137
00:07:20.440 --> 00:07:23.760
I'd rather set up this type definition only once,

138
00:07:23.760 --> 00:07:27.340
to then use it in all the places where we need it.

139
00:07:27.340 --> 00:07:29.730
And to implement that feature,

140
00:07:29.730 --> 00:07:33.250
we can, of course create such a type alias again.

141
00:07:33.250 --> 00:07:37.740
We can create our todos context object here, for example,

142
00:07:37.740 --> 00:07:39.210
this name is up to you,

143
00:07:39.210 --> 00:07:43.340
and store this type definition in this type alias.

144
00:07:43.340 --> 00:07:47.453
Now we can use this alias here between the angle brackets,

145
00:07:48.830 --> 00:07:51.680
and use that same type down there

146
00:07:51.680 --> 00:07:54.660
to avoid this copy and pasting.

147
00:07:54.660 --> 00:07:57.610
So here I'll now also use this alias.

148
00:07:57.610 --> 00:08:00.530
And now we also, of course, should fix this error.

149
00:08:00.530 --> 00:08:03.940
And we fix this error by updating our type definition

150
00:08:03.940 --> 00:08:07.140
which we now, because we're not copy and pasting,

151
00:08:07.140 --> 00:08:09.390
only have to do in one place.

152
00:08:09.390 --> 00:08:12.500
And here, add todo is actually a function

153
00:08:12.500 --> 00:08:16.650
that should get some text instead of no parameters.

154
00:08:16.650 --> 00:08:18.373
So that's an important fix.

155
00:08:19.600 --> 00:08:22.880
And a with that, we're setting up the correct context value

156
00:08:22.880 --> 00:08:24.880
and we're setting this as a value

157
00:08:24.880 --> 00:08:28.763
for this value prop on this provider component then.

158
00:08:29.740 --> 00:08:33.320
Now we're setting up this todos context provider.

159
00:08:33.320 --> 00:08:35.809
Hence we can now export this here,

160
00:08:35.809 --> 00:08:38.880
export this as a default maybe,

161
00:08:38.880 --> 00:08:42.940
and also export the context itself,

162
00:08:42.940 --> 00:08:45.520
not the type definition, but the context,

163
00:08:45.520 --> 00:08:49.163
because we'll need that for the use context hook later.

164
00:08:50.100 --> 00:08:53.220
And actually, not later, but now.

165
00:08:53.220 --> 00:08:56.670
Now I wanna connect my created context here

166
00:08:56.670 --> 00:08:58.333
to the different components.

167
00:08:59.170 --> 00:09:02.390
And for this, first of all, we don't need to manage todos

168
00:09:02.390 --> 00:09:04.840
in the app TSX file anymore.

169
00:09:04.840 --> 00:09:07.650
Here we can get rid of on add todo

170
00:09:07.650 --> 00:09:10.450
on the new todo component.

171
00:09:10.450 --> 00:09:13.120
And we can get rid of these props here

172
00:09:13.120 --> 00:09:15.480
on the todos component.

173
00:09:15.480 --> 00:09:18.740
We can get rid of the todo import from the models folder,

174
00:09:18.740 --> 00:09:20.960
and of the use state import.

175
00:09:20.960 --> 00:09:23.713
This app component can be way leaner now.

176
00:09:25.230 --> 00:09:28.973
Because now in those components, we can use the context.

177
00:09:30.500 --> 00:09:32.970
For example, in the todos component.

178
00:09:32.970 --> 00:09:37.970
Here, we can now import use context from react,

179
00:09:38.670 --> 00:09:42.380
and also import our todos context,

180
00:09:42.380 --> 00:09:46.040
actually as a named import between curly braces

181
00:09:46.040 --> 00:09:50.900
from going up one level, store todos context.

182
00:09:52.020 --> 00:09:54.100
And I'm importing the context here,

183
00:09:54.100 --> 00:09:59.100
not the provider so that I can tap into that context here,

184
00:09:59.140 --> 00:10:03.210
so that we can call use context as we learned in this course

185
00:10:03.210 --> 00:10:06.550
and tap into this todos context here,

186
00:10:06.550 --> 00:10:10.343
and that will give us access to the todos context like this.

187
00:10:11.320 --> 00:10:12.990
And if you hover over this constant,

188
00:10:12.990 --> 00:10:17.030
you now see that it automatically knows the type of value

189
00:10:17.030 --> 00:10:19.770
that's managed by our context

190
00:10:19.770 --> 00:10:23.993
thanks to TypeScript and us linking everything correctly.

191
00:10:25.520 --> 00:10:28.120
And now here we can use todos context

192
00:10:28.120 --> 00:10:32.930
to go through all todos context.items,

193
00:10:32.930 --> 00:10:35.000
which are my todos now.

194
00:10:35.000 --> 00:10:38.433
And instead of props on remove todo,

195
00:10:39.410 --> 00:10:43.070
I now wanna call todo's context, remove todo.

196
00:10:43.070 --> 00:10:45.320
And I'll still call bind though,

197
00:10:45.320 --> 00:10:47.400
because I still wanna pre-configure it

198
00:10:47.400 --> 00:10:50.263
as function to get the right ID eventually.

199
00:10:51.520 --> 00:10:54.870
Now, of course, we can get rid of the props argument here,

200
00:10:54.870 --> 00:10:56.810
and therefore we should also get rid

201
00:10:56.810 --> 00:11:00.670
of our own props type definition here on react FC

202
00:11:01.760 --> 00:11:05.760
because this todos component doesn't use props anymore.

203
00:11:05.760 --> 00:11:07.890
Instead it now uses context.

204
00:11:07.890 --> 00:11:09.250
So we should simplify that

205
00:11:09.250 --> 00:11:12.960
and remove that unnecessary type definition.

206
00:11:12.960 --> 00:11:15.560
That of course, also means that we can get rid

207
00:11:15.560 --> 00:11:19.463
of that todo type import from the models folder.

208
00:11:20.920 --> 00:11:23.440
That's now the cleaned up todos component

209
00:11:23.440 --> 00:11:25.733
using the context API.

210
00:11:27.310 --> 00:11:30.910
Now, we also, of course, wanna use the context API

211
00:11:30.910 --> 00:11:33.840
in the new todo component.

212
00:11:33.840 --> 00:11:35.360
There we add a todo,

213
00:11:35.360 --> 00:11:39.510
and now we also don't wanna leverage props anymore for that

214
00:11:39.510 --> 00:11:42.490
since we're not using the parent component

215
00:11:42.490 --> 00:11:46.650
for managing todos anymore, but we wanna use context.

216
00:11:46.650 --> 00:11:49.680
So from react, we import use context,

217
00:11:49.680 --> 00:11:53.970
and then here I'll import todos context

218
00:11:53.970 --> 00:11:58.970
from going up one level store todos context.

219
00:11:58.970 --> 00:12:01.090
And just as in the other component,

220
00:12:01.090 --> 00:12:03.750
and just as in this entire course,

221
00:12:03.750 --> 00:12:08.160
we now call use context and point at todos context.

222
00:12:08.160 --> 00:12:10.893
And that gives us our todos context.

223
00:12:12.397 --> 00:12:17.160
And with that here, instead of calling props on add todo,

224
00:12:17.160 --> 00:12:20.430
I now call todos context add todo,

225
00:12:20.430 --> 00:12:23.310
and pass in my entered text.

226
00:12:23.310 --> 00:12:25.270
And that's the change we need to make here.

227
00:12:25.270 --> 00:12:27.890
The rest of this component internal code

228
00:12:27.890 --> 00:12:30.070
stays the way it is.

229
00:12:30.070 --> 00:12:32.190
Now, what does not stay the way it is,

230
00:12:32.190 --> 00:12:34.830
is the component definition though.

231
00:12:34.830 --> 00:12:36.720
We don't get props anymore,

232
00:12:36.720 --> 00:12:38.850
so we should remove that parameter.

233
00:12:38.850 --> 00:12:40.850
And therefore we should also remove

234
00:12:40.850 --> 00:12:45.820
that prop description here for this functional component

235
00:12:45.820 --> 00:12:48.430
because we don't have any special props anymore.

236
00:12:48.430 --> 00:12:50.160
Hence we should remove that here

237
00:12:50.160 --> 00:12:51.913
and clean up that component.

238
00:12:53.510 --> 00:12:56.240
And now there's only one missing thing,

239
00:12:56.240 --> 00:12:57.890
and that's the usage of our

240
00:12:57.890 --> 00:13:00.640
todos context provider component

241
00:13:00.640 --> 00:13:04.600
because using use context is fine, but it only works

242
00:13:04.600 --> 00:13:09.400
if we somehow wrap these components that use the context

243
00:13:09.400 --> 00:13:12.180
with that context provider.

244
00:13:12.180 --> 00:13:15.140
And we can do that in the app tsx file,

245
00:13:15.140 --> 00:13:17.390
and for example, replace that div

246
00:13:17.390 --> 00:13:21.280
with the todos context provider

247
00:13:21.280 --> 00:13:25.570
which you need to import from store todos context.

248
00:13:25.570 --> 00:13:29.840
That's super important, without that it would not work.

249
00:13:29.840 --> 00:13:32.530
But with that, if you add this,

250
00:13:32.530 --> 00:13:37.530
I can again learn react and TypeScript and more,

251
00:13:39.980 --> 00:13:42.910
and I can of course, also still remove things

252
00:13:42.910 --> 00:13:46.120
without any errors in the console here.

253
00:13:46.120 --> 00:13:47.833
So that is working.

254
00:13:49.040 --> 00:13:51.540
And that's how we can use the context API

255
00:13:51.540 --> 00:13:53.793
with react and TypeScript.

