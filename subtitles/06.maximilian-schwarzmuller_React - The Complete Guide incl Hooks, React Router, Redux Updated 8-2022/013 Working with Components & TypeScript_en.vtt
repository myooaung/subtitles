WEBVTT
1
00:00:02.200 --> 00:00:04.540
Now, let's write some TypeScript code.

2
00:00:04.540 --> 00:00:06.010
And for this you find

3
00:00:06.010 --> 00:00:09.740
my created react TypeScript project attached,

4
00:00:09.740 --> 00:00:12.360
so that we all have the same starting point

5
00:00:12.360 --> 00:00:15.080
even if that default app, which is created

6
00:00:15.080 --> 00:00:18.263
by create react app should change over time.

7
00:00:19.280 --> 00:00:21.580
Now, I didn't change anything here yet.

8
00:00:21.580 --> 00:00:24.150
At the moment, I have all these starting files,

9
00:00:24.150 --> 00:00:25.810
and therefore, I'll first of all,

10
00:00:25.810 --> 00:00:27.800
clean them up a little bit.

11
00:00:27.800 --> 00:00:31.910
I'll delete the app test file, the logo file,

12
00:00:31.910 --> 00:00:34.912
the report web vitals and set up tests file here.

13
00:00:34.912 --> 00:00:37.543
I'll delete all these files,

14
00:00:38.410 --> 00:00:41.430
the React app env. file here, that's the file

15
00:00:41.430 --> 00:00:44.700
we should keep around to have a TypeScript linked

16
00:00:44.700 --> 00:00:46.815
into our project, so to say

17
00:00:46.815 --> 00:00:48.457
But an index

18
00:00:48.457 --> 00:00:49.450
.tsx

19
00:00:49.450 --> 00:00:53.450
I now wanna remove that web vitals import

20
00:00:53.450 --> 00:00:56.540
and I'll actually also get rid of strict mode here.

21
00:00:56.540 --> 00:00:58.680
We don't need that here,

22
00:00:58.680 --> 00:01:01.143
and get rid of that part down there.

23
00:01:02.020 --> 00:01:04.890
And then here in app TSX,

24
00:01:04.890 --> 00:01:07.250
I want to get rid of that logo import.

25
00:01:07.250 --> 00:01:11.576
We can get rid of the react import in modern react projects.

26
00:01:11.576 --> 00:01:15.100
Um you'll learn that you can omit this

27
00:01:15.100 --> 00:01:18.910
and TypeScript projects are no exception here

28
00:01:18.910 --> 00:01:22.620
and we can get rid of all that JSX content,

29
00:01:22.620 --> 00:01:26.090
except for the div for the moment here

30
00:01:26.090 --> 00:01:28.189
and then app CSS all now also,

31
00:01:28.189 --> 00:01:32.350
delete all that code here

32
00:01:32.350 --> 00:01:33.980
and then index CSS sub.

33
00:01:33.980 --> 00:01:37.438
will actually keep um that default set up here.

34
00:01:37.438 --> 00:01:39.920
I'll just get rid of the code selector,

35
00:01:39.920 --> 00:01:41.960
but I'll keep the body selector here

36
00:01:41.960 --> 00:01:45.270
and keep that default font family which is assigned

37
00:01:45.270 --> 00:01:47.483
that is actually fine from my side.

38
00:01:48.810 --> 00:01:51.140
And with that, we cleaned up this project.

39
00:01:51.140 --> 00:01:53.078
We can save all these files now,

40
00:01:53.078 --> 00:01:55.380
and now that it is cleaned up.

41
00:01:55.380 --> 00:01:58.840
Let's write some react TypeScript Code

42
00:01:59.930 --> 00:02:01.700
and the most important part here,

43
00:02:01.700 --> 00:02:04.189
and the good news is that generally,

44
00:02:04.189 --> 00:02:06.860
you still write the same code as you did it

45
00:02:06.860 --> 00:02:09.699
throughout the rest of this course.

46
00:02:09.699 --> 00:02:13.350
It's not like everything changes all of a sudden.

47
00:02:13.350 --> 00:02:15.890
And that hopefully makes a lot of sense.

48
00:02:15.890 --> 00:02:19.420
If you have a look at this app.TSX file

49
00:02:19.420 --> 00:02:22.120
or the index.TSX file,

50
00:02:22.120 --> 00:02:26.350
that code here, is exactly the same code as you saw it

51
00:02:26.350 --> 00:02:28.500
throughout this course. There's no difference here.

52
00:02:28.500 --> 00:02:30.868
No special type annotations,

53
00:02:30.868 --> 00:02:33.960
because we don't need them here.

54
00:02:33.960 --> 00:02:35.630
We're generally using

55
00:02:35.630 --> 00:02:38.747
Typescripts built in type inference feature here,

56
00:02:38.747 --> 00:02:41.350
but in general, this code here

57
00:02:41.350 --> 00:02:43.993
simply doesn't use a lot of Types.

58
00:02:44.920 --> 00:02:47.600
But that's something we're going to change through out

59
00:02:47.600 --> 00:02:50.980
this module now, and you are going to see

60
00:02:50.980 --> 00:02:53.212
where you can use TypeScript

61
00:02:53.212 --> 00:02:56.683
to actually enhance your react code.

62
00:02:57.550 --> 00:03:00.350
Now to dive into react and TypeScript.

63
00:03:00.350 --> 00:03:03.110
I want to keep it fairly simple and we'll simply

64
00:03:03.110 --> 00:03:07.480
build a basic to do app, a basic to do app where

65
00:03:07.480 --> 00:03:10.231
we can add to do's, and delete to do's.

66
00:03:10.231 --> 00:03:13.698
That will not be a super complex or fancy app

67
00:03:13.698 --> 00:03:17.370
but it will allow me to show you all these core

68
00:03:17.370 --> 00:03:19.513
TypeScript features you should know,

69
00:03:20.370 --> 00:03:23.380
and for this, I'll start by adding a new components folder

70
00:03:23.380 --> 00:03:25.520
in the source folder. And in there,

71
00:03:25.520 --> 00:03:28.968
let's add a to do's .TSX file.

72
00:03:28.968 --> 00:03:31.760
And that will simply be a file that should hold

73
00:03:31.760 --> 00:03:34.020
a new react component.

74
00:03:34.020 --> 00:03:38.364
Now, a react component still is a function or a clause

75
00:03:38.364 --> 00:03:40.813
but as we did it in the rest of this course,

76
00:03:40.813 --> 00:03:44.023
we'll focus on functional components here.

77
00:03:45.200 --> 00:03:46.870
So here, we can add this

78
00:03:46.870 --> 00:03:48.196
to do's function.

79
00:03:48.196 --> 00:03:50.890
And then of course also export it to

80
00:03:50.890 --> 00:03:53.213
make it available outside of this file.

81
00:03:54.620 --> 00:03:57.622
Now, just like all the react components we built thus far

82
00:03:57.622 --> 00:04:01.050
we need to return some renderable content

83
00:04:01.050 --> 00:04:03.990
and that will typically be JSX.

84
00:04:03.990 --> 00:04:06.423
And that again does not change at all.

85
00:04:07.530 --> 00:04:09.240
So in here, let's say we wanna have

86
00:04:09.240 --> 00:04:12.760
an ordered list because we have a couple of to-dos here.

87
00:04:12.760 --> 00:04:16.190
And in there we have a couple of lists items, of course

88
00:04:16.190 --> 00:04:18.440
with our different to do's,

89
00:04:18.440 --> 00:04:23.170
like learn react or learn TypeScript.

90
00:04:23.170 --> 00:04:25.711
And we'll later make those to do's dynamic.

91
00:04:25.711 --> 00:04:28.286
And we'll make sure that a user can enter them.

92
00:04:28.286 --> 00:04:29.119
But for the moment, I'll just create this

93
00:04:29.119 --> 00:04:34.119
functional component like that with the hard-coded JSX code.

94
00:04:36.170 --> 00:04:39.760
And now, we can use this to do's component here in app

95
00:04:39.760 --> 00:04:40.716
in the app component,

96
00:04:40.716 --> 00:04:44.200
simply, as we always did it by importing

97
00:04:44.200 --> 00:04:46.943
to do's from components

98
00:04:46.943 --> 00:04:51.133
To do's, you can omit the file extension here.

99
00:04:51.133 --> 00:04:53.981
And then, here in that div,

100
00:04:53.981 --> 00:04:57.030
or even without the div, doesn't matter,

101
00:04:57.030 --> 00:04:59.193
you can output to do's.

102
00:05:00.750 --> 00:05:03.510
And we can actually also get rid of app CSS here,

103
00:05:03.510 --> 00:05:04.800
now that I think about it

104
00:05:04.800 --> 00:05:06.273
since it's empty anyways.

105
00:05:07.330 --> 00:05:09.240
But with that, if we save everything,

106
00:05:09.240 --> 00:05:12.184
and we go back and reload this page,

107
00:05:12.184 --> 00:05:15.720
we see our to do's here.

108
00:05:15.720 --> 00:05:18.080
And that shouldn't be too exciting, of course

109
00:05:18.080 --> 00:05:21.660
because that's a very basic react component, but it shows us

110
00:05:21.660 --> 00:05:23.580
that we build react components

111
00:05:23.580 --> 00:05:25.763
generally, as we learned it.

112
00:05:26.810 --> 00:05:28.740
But it gets a bit more interesting,

113
00:05:28.740 --> 00:05:30.503
if this to do's component actually

114
00:05:30.503 --> 00:05:33.510
does not have hard-coded to do's

115
00:05:33.510 --> 00:05:34.850
which we output here.

116
00:05:34.850 --> 00:05:38.090
But if it instead receives to do's, through props

117
00:05:38.090 --> 00:05:39.340
which you want to output.

