1
00:00:01,000 --> 00:00:05,350
In this demo, we will discover what working with OpsCenter is like,

2
00:00:05,350 --> 00:00:12,010
from configuring a new CloudWatch event rule to resolving an OpsCenter OpsItem.

3
00:00:12,010 --> 00:00:12,690
As always,

4
00:00:12,690 --> 00:00:18,840
we start in the Systems Manager console and make our way over to OpsCenter.

5
00:00:18,840 --> 00:00:22,340
Right now, the summary isn't showing us anything,

6
00:00:22,340 --> 00:00:27,640
which is expected as our account doesn't have much activity at the moment.

7
00:00:27,640 --> 00:00:33,740
Over on the OpsItems tab, we can configure the sources,

8
00:00:33,740 --> 00:00:36,840
which really means we can configure the CloudWatch event

9
00:00:36,840 --> 00:00:41,810
rules and what they mean in our company's context when it

10
00:00:41,810 --> 00:00:46,940
comes to how we categorize them, their severity,

11
00:00:46,940 --> 00:00:51,390
and if you want them enabled or disabled.

12
00:00:51,390 --> 00:00:59,340
Here we can see all the default rules that we created in our first demo.

13
00:00:59,340 --> 00:01:03,340
Now let's go to CloudWatch to configure a new rule.

14
00:01:03,340 --> 00:01:08,340
Here in the CloudWatch console, we have to go to Events and Rules.

15
00:01:08,340 --> 00:01:11,290
We can see all the same rules here that we just saw

16
00:01:11,290 --> 00:01:15,040
over on the OpsCenter console.

17
00:01:15,040 --> 00:01:22,540
The only difference here is we can click on Create rule to create a new one.

18
00:01:22,540 --> 00:01:25,440
We want to make sure that we get alerted whenever

19
00:01:25,440 --> 00:01:30,940
something or someone stops an EC2 instance.

20
00:01:30,940 --> 00:01:34,330
This shouldn't happen without the operations team knowing about it.

21
00:01:34,330 --> 00:01:36,290
So that's a good scenario.

22
00:01:36,290 --> 00:01:41,020
First off, all we need to configure is the event source.

23
00:01:41,020 --> 00:01:44,580
In the Service Name drop‑down list,

24
00:01:44,580 --> 00:01:52,090
we can see this very extensive list of services we can hook events up to.

25
00:01:52,090 --> 00:01:57,610
For our use case, we search for EC2 and select this one.

26
00:01:57,610 --> 00:02:00,650
In the Event Type drop‑down,

27
00:02:00,650 --> 00:02:04,870
we can now see a list of events that we can be notified on.

28
00:02:04,870 --> 00:02:11,640
The EC2 instance state‑change notification event sounds like the one we need.

29
00:02:11,640 --> 00:02:17,440
We can be notified on any state changes, but that could get very noisy.

30
00:02:17,440 --> 00:02:20,940
So we filter the state for the stopped state.

31
00:02:20,940 --> 00:02:24,440
This means that whenever an EC2 instance's state

32
00:02:24,440 --> 00:02:26,700
changes from whatever it was to stopped,

33
00:02:26,700 --> 00:02:27,940
this rule gets triggered.

34
00:02:27,940 --> 00:02:34,130
Also, for this rule, we want this to be applied to all our EC2 instances.

35
00:02:34,130 --> 00:02:35,320
Down here,

36
00:02:35,320 --> 00:02:39,070
we can see an example of the actual rule to verify that what we

37
00:02:39,070 --> 00:02:42,640
have configured was what we expected to see.

38
00:02:42,640 --> 00:02:45,590
We now have configured what we want to be notified on.

39
00:02:45,590 --> 00:02:50,740
Next, we need to configure what should happen if an event like this occurs.

40
00:02:50,740 --> 00:02:55,920
A very common use case is to invoke a Lambda function to do

41
00:02:55,920 --> 00:03:01,040
certain tasks or to send an event to an SNS topic.

42
00:03:01,040 --> 00:03:04,300
But we want it to create a OpsItem.

43
00:03:04,300 --> 00:03:06,070
There isn't too much to configure now,

44
00:03:06,070 --> 00:03:09,790
apart from which IAM rule we want CloudWatch events

45
00:03:09,790 --> 00:03:12,340
to use to create this OpsItem.

46
00:03:12,340 --> 00:03:14,970
We can have this process create a new role,

47
00:03:14,970 --> 00:03:18,370
or we use the existing rule from the first demo,

48
00:03:18,370 --> 00:03:22,440
which is exactly what we're going to do.

49
00:03:22,440 --> 00:03:27,260
Next step, we configure the rule name and give it a description.

50
00:03:27,260 --> 00:03:30,190
We'll click on Create rule.

51
00:03:30,190 --> 00:03:38,340
Once that is done, we can see our rule now in the list of rules.

52
00:03:38,340 --> 00:03:44,790
Let's now go ahead on get an OpsItem created by forcing this scenario.

53
00:03:44,790 --> 00:03:52,420
We browse over to the EC2 console, check our running instances,

54
00:03:52,420 --> 00:04:01,480
and we're going to select this (there is only one) instance and stop it.

55
00:04:01,480 --> 00:04:04,940
Once the instance is stopped,

56
00:04:04,940 --> 00:04:07,580
we expect this event to trigger the CloudWatch event

57
00:04:07,580 --> 00:04:10,780
rule that we just created and that, in turn,

58
00:04:10,780 --> 00:04:15,440
to create a Systems Manager OpsCenter OpsItem.

59
00:04:15,440 --> 00:04:21,720
Now that the EC2 instance is stopped, let's head back over to OpsCenter.

60
00:04:21,720 --> 00:04:29,490
As expected, we can now see that there's one open or in progress OpsItem.

61
00:04:29,490 --> 00:04:36,140
We can click on it on already see some high‑level information about it.

62
00:04:36,140 --> 00:04:37,000
For example,

63
00:04:37,000 --> 00:04:41,370
we see that the OpsItem is related to the EC2 servers and

64
00:04:41,370 --> 00:04:46,640
the EC2 instance state‑change event, when it was created,

65
00:04:46,640 --> 00:04:51,640
and when it was last updated.

66
00:04:51,640 --> 00:04:55,530
We can click on the event ID to get even more information.

67
00:04:55,530 --> 00:05:02,640
The OpsItem shows us exactly which AWS resource is related to this OpsItem by

68
00:05:02,640 --> 00:05:08,150
displaying the resource ARN and of what type this resource is.

69
00:05:08,150 --> 00:05:13,280
Clicking on the resource, we get even more insights into the resource,

70
00:05:13,280 --> 00:05:17,430
like the instance ID, its IP, DNS name,

71
00:05:17,430 --> 00:05:24,740
and many other details that can help and simplify troubleshooting.

72
00:05:24,740 --> 00:05:26,720
We can also see the instance tags,

73
00:05:26,720 --> 00:05:29,840
which can help further identify what the resource is

74
00:05:29,840 --> 00:05:34,280
being used for or who the owner is.

75
00:05:34,280 --> 00:05:39,120
The CloudTrail logs can also be super helpful in understanding what

76
00:05:39,120 --> 00:05:45,240
APIs were called in relation to the impacted resource.

77
00:05:45,240 --> 00:05:51,140
Here we can see that our user Bob called the StopInstances API.

78
00:05:51,140 --> 00:05:54,400
We can now have a conversation with this user to

79
00:05:54,400 --> 00:05:58,060
understand why they stopped the instance.

80
00:05:58,060 --> 00:06:04,550
Back on the overview, we can see the similar OpsItem menu,

81
00:06:04,550 --> 00:06:09,400
which over time will probably show more OpsItems and will make it

82
00:06:09,400 --> 00:06:14,470
even easier for operations teams to troubleshoot issues based on

83
00:06:14,470 --> 00:06:18,000
past OpsItems and their resolutions.

84
00:06:18,000 --> 00:06:19,280
Under Runbooks,

85
00:06:19,280 --> 00:06:24,630
we can see Systems Manager automation runbooks that can potentially be used

86
00:06:24,630 --> 00:06:29,140
by the service to remediate any of the issues we find.

87
00:06:29,140 --> 00:06:34,540
There's one runbook called AWS‑RestartEC2Instance that we

88
00:06:34,540 --> 00:06:37,640
could use to restart the impacted instance.

89
00:06:37,640 --> 00:06:39,570
This could be an easy fix.

90
00:06:39,570 --> 00:06:44,890
If something stopped an instance, let's just first try to restart it.

91
00:06:44,890 --> 00:06:45,680
For this, however,

92
00:06:45,680 --> 00:06:49,610
we need to go back to the instance and get the instance ID

93
00:06:49,610 --> 00:06:53,240
as that will be an input to the runbook.

94
00:06:53,240 --> 00:06:58,040
Let's search for the runbook again and execute it,

95
00:06:58,040 --> 00:07:02,380
paste the instance ID in here, and say Execute.

96
00:07:02,380 --> 00:07:07,040
The status shows that this runbook is now in progress,

97
00:07:07,040 --> 00:07:12,440
and it is also now associated with this OpsItem.

98
00:07:12,440 --> 00:07:16,550
Future OpsItems that are based on this event will automatically

99
00:07:16,550 --> 00:07:20,340
show this runbook as a recommendation to the user.

100
00:07:20,340 --> 00:07:25,840
Let's refresh this page and skip ahead to the completion of the runbook.

101
00:07:25,840 --> 00:07:30,540
It's now successful, and we can click on the output here.

102
00:07:30,540 --> 00:07:33,670
We can also save the output of the runbook to the

103
00:07:33,670 --> 00:07:37,240
operational data of this OpsItem.

104
00:07:37,240 --> 00:07:42,010
This means that for auditing and also future similar troubleshooting,

105
00:07:42,010 --> 00:07:48,040
administrators can go back and check what was done.

106
00:07:48,040 --> 00:07:52,990
We can easily see the runbook output in the operational data now.

107
00:07:52,990 --> 00:07:57,380
Now that the instance rebooted and is running again,

108
00:07:57,380 --> 00:08:01,660
we can set the OpsItem status to Resolved and can continue

109
00:08:01,660 --> 00:08:10,000
working on our next items resting assured that future events like this will be resolved even faster.

