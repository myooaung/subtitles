WEBVTT
1
00:00:02.140 --> 00:00:03.150
In this demo,

2
00:00:03.150 --> 00:00:06.720
we will use the AWS command line to create parameters

3
00:00:06.720 --> 00:00:09.680
in Systems Manager Parameter Store.

4
00:00:09.680 --> 00:00:15.310
In our AWS console, we find ourselves back in the Systems Manager service,

5
00:00:15.310 --> 00:00:21.020
and to start it off, browse to the Parameter Store. As we're setting

6
00:00:21.020 --> 00:00:25.120
things up for Globomantics, and no parameters have been created

7
00:00:25.120 --> 00:00:29.340
previously, there's currently not much to see here.

8
00:00:29.340 --> 00:00:35.350
We could go and use the console and use Create parameter to do our job, but this

9
00:00:35.350 --> 00:00:40.690
task will be one that system administrators will execute many times a day to put

10
00:00:40.690 --> 00:00:45.840
and retrieve parameters, so it was decided to use the command line for this

11
00:00:45.840 --> 00:00:51.650
demonstration. We're on Windows, so the best way to interact with AWS from

12
00:00:51.650 --> 00:00:55.740
Windows is the AWS PowerShell module.

13
00:00:55.740 --> 00:01:01.240
I assume here that the AWS PowerShell is already set up.

14
00:01:01.240 --> 00:01:05.230
If this is skipping a few too many steps for you, then please check out

15
00:01:05.230 --> 00:01:09.520
one of Pluralsight's other courses on the AWS tools for Windows

16
00:01:09.520 --> 00:01:15.100
Powershell or head over to the AWS documentation on using AWS

17
00:01:15.100 --> 00:01:21.950
credentials with the Powershell module. We can start interacting with

18
00:01:21.950 --> 00:01:28.360
Parameter Store by calling Get‑SSMParameterList. As expected and as

19
00:01:28.360 --> 00:01:30.640
we've seen in the console,

20
00:01:30.640 --> 00:01:36.140
this doesn't return anything because we don't have any parameters created yet.

21
00:01:36.140 --> 00:01:41.480
Let's change this. Write‑SSMParameter is used to create new

22
00:01:41.480 --> 00:01:47.880
parameters. The ‑Name parameter will make up the key of our

23
00:01:47.880 --> 00:01:52.000
key‑value pair, and by using a format like this with the forward

24
00:01:52.000 --> 00:01:56.140
slashes, similar to a forest structure,

25
00:01:56.140 --> 00:02:01.840
we do create something like a logical structure of parameters.

26
00:02:01.840 --> 00:02:03.550
Globomantics would, in this case,

27
00:02:03.550 --> 00:02:09.820
be a logical container of other parameters. In more advanced scenarios, we can

28
00:02:09.820 --> 00:02:14.440
then apply permissions based on these logical containers.

29
00:02:14.440 --> 00:02:16.040
Unfortunately, though,

30
00:02:16.040 --> 00:02:23.710
the AWS console does not reflect these in the UI. So to clarify, we would

31
00:02:23.710 --> 00:02:29.580
create the super‑admin‑name parameter in this logical path underneath

32
00:02:29.580 --> 00:02:38.350
Globomantics. As a value, we add the username, and as type, we select

33
00:02:38.350 --> 00:02:44.140
String. This means it is just a plain text value.

34
00:02:44.140 --> 00:02:49.060
The return value, 1, that we're getting here is returned by the API with

35
00:02:49.060 --> 00:02:52.940
the version number of the parameter we just created.

36
00:02:52.940 --> 00:02:54.350
So if we did this again,

37
00:02:54.350 --> 00:03:01.210
we would get a 2. Calling Get‑SSMParameterList now, we see the parameter we

38
00:03:01.210 --> 00:03:07.340
just created. And back to the console, if we refreshed here,

39
00:03:07.340 --> 00:03:11.110
we can also now see our new parameter and check its

40
00:03:11.110 --> 00:03:15.040
content. As it's not a SecureString,

41
00:03:15.040 --> 00:03:22.120
but just a String type, we can see the value here in clear text.

42
00:03:22.120 --> 00:03:26.600
Back in PowerShell, we can create this same information and

43
00:03:26.600 --> 00:03:33.140
also see the value using Get‑SSMParameter.

44
00:03:33.140 --> 00:03:39.510
Let's now create a SecureString. Write‑SSMParameter just

45
00:03:39.510 --> 00:03:42.940
like before in the same logical path.

46
00:03:42.940 --> 00:03:49.180
But now, instead of type String, we use SecureString.

47
00:03:49.180 --> 00:03:52.940
Let's check this parameter on the command line.

48
00:03:52.940 --> 00:04:00.440
Interesting, the value's now encrypted and not in clear text anymore.

49
00:04:00.440 --> 00:04:02.050
In the console,

50
00:04:02.050 --> 00:04:07.030
we can see the new parameter and check what we can see there. The

51
00:04:07.030 --> 00:04:10.640
value is now hidden behind these asterisks.

52
00:04:10.640 --> 00:04:13.840
But as we have permissions to read the parameter,

53
00:04:13.840 --> 00:04:24.000
we can click Show to see the clear text value. If we didn't have any permissions, we wouldn't be able to do this.

