WEBVTT
1
00:00:01.040 --> 00:00:04.220
We've now heard about CloudWatch a few times and

2
00:00:04.220 --> 00:00:07.140
how it integrates with OpsCenter.

3
00:00:07.140 --> 00:00:11.000
But how does it actually create new OpsItems?

4
00:00:11.000 --> 00:00:15.630
CloudWatch events actually create these new OpsItems based on something

5
00:00:15.630 --> 00:00:20.740
that happened on the AWS account or in our application.

6
00:00:20.740 --> 00:00:23.860
Whenever a service does something, for example,

7
00:00:23.860 --> 00:00:28.440
an EC2 instance changes its state from running to stopped,

8
00:00:28.440 --> 00:00:33.740
an RDS database fails to start, a Lambda function fails to execute,

9
00:00:33.740 --> 00:00:39.110
or maybe an autoâ€‘scaling group tried to create a new EC2 instance,

10
00:00:39.110 --> 00:00:42.140
and that failed, all of these events, and many,

11
00:00:42.140 --> 00:00:43.100
many more,

12
00:00:43.100 --> 00:00:49.340
are sent to CloudWatch events and can be used to create CloudWatch event rules.

13
00:00:49.340 --> 00:00:55.080
The default rules we created in the first demo mainly focused on the EC2,

14
00:00:55.080 --> 00:01:00.120
RDS, and System Manager services. Automation, obviously,

15
00:01:00.120 --> 00:01:04.420
it's always great, but we humans are always good at spotting issues.

16
00:01:04.420 --> 00:01:12.000
Don't forget about that. And for those instances, it is also possible to manually create OpsItems.

