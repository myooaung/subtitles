WEBVTT
1
00:00:00.980 --> 00:00:04.410
Let's glue this all together in this upcoming demo where we

2
00:00:04.410 --> 00:00:09.300
will create a custom patch baseline and group and apply

3
00:00:09.300 --> 00:00:12.640
these to our Windows instance.

4
00:00:12.640 --> 00:00:16.300
We'll return to the Systems Manager console and browse

5
00:00:16.300 --> 00:00:19.560
down here to the Patch Manager tab.

6
00:00:19.560 --> 00:00:26.430
This tab is more of a place to jump on from to either the predefined patch

7
00:00:26.430 --> 00:00:33.040
baselines or straight to the configuration of a patching process.

8
00:00:33.040 --> 00:00:37.890
Let's first go to see the predefined baselines, shall we?

9
00:00:37.890 --> 00:00:42.600
In here, we find AWS predefined baselines for every operating

10
00:00:42.600 --> 00:00:47.240
system Patch Manager currently supports.

11
00:00:47.240 --> 00:00:51.640
Most of those baselines are marked as default baselines.

12
00:00:51.640 --> 00:00:56.810
This means that they will apply to this operating system whenever no

13
00:00:56.810 --> 00:01:01.040
other patch group is configured on an instance.

14
00:01:01.040 --> 00:01:06.640
Really, if nothing else applies, these apply.

15
00:01:06.640 --> 00:01:10.640
Let's take the default patch baseline for Windows here.

16
00:01:10.640 --> 00:01:15.540
It's called AWS default patch baseline.

17
00:01:15.540 --> 00:01:18.560
We can see that it is the default baseline for all

18
00:01:18.560 --> 00:01:20.990
Windows Server operating systems.

19
00:01:20.990 --> 00:01:22.110
And further down,

20
00:01:22.110 --> 00:01:27.140
we can also see what updates this baseline installs

21
00:01:27.140 --> 00:01:33.240
based on classification and severity.

22
00:01:33.240 --> 00:01:39.990
It also auto approves updates 7 days after they have become available.

23
00:01:39.990 --> 00:01:43.070
That's definitely a sensible setting that we are going

24
00:01:43.070 --> 00:01:48.140
to make use of in our next step.

25
00:01:48.140 --> 00:01:56.340
We browse back to the start page and then back into the patch baselines.

26
00:01:56.340 --> 00:01:59.840
From here, we can check out the Patches tab,

27
00:01:59.840 --> 00:02:03.790
which has all patches available at a single glance,

28
00:02:03.790 --> 00:02:07.040
and we can even filter these patches,

29
00:02:07.040 --> 00:02:13.140
which makes sense because obviously there are a lot of them.

30
00:02:13.140 --> 00:02:18.540
At Globomantics, we're only interested in Windows Server 2019.

31
00:02:18.540 --> 00:02:21.090
And If we want to see these patches,

32
00:02:21.090 --> 00:02:27.340
we can filter these patches here by product and the product string

33
00:02:27.340 --> 00:02:36.340
WindowsServer2019 to only view those patches The Patch Groups tab

34
00:02:36.340 --> 00:02:41.230
will show any associations between patch groups and baselines that

35
00:02:41.230 --> 00:02:44.130
have been configured in this region.

36
00:02:44.130 --> 00:02:47.790
We've not talked about patch groups yet,

37
00:02:47.790 --> 00:02:53.540
so a patch group is a way off grouping instances,

38
00:02:53.540 --> 00:03:01.140
managed or EC2, into groups that should have the same patches applied.

39
00:03:01.140 --> 00:03:06.440
A patch group is created through the use of a specific EC2 tag,

40
00:03:06.440 --> 00:03:09.840
so let's go ahead and create a patch group.

41
00:03:09.840 --> 00:03:14.940
For this, we will browse to the Managed Instances tab.

42
00:03:14.940 --> 00:03:20.940
This is one place where we can apply tags to our instances.

43
00:03:20.940 --> 00:03:24.850
There are many others, but we'll just stick to this one for this demo.

44
00:03:24.850 --> 00:03:31.240
We select our Windows EC2 instance, and inside the Tags tab,

45
00:03:31.240 --> 00:03:36.180
we can add tags to the instance.

46
00:03:36.180 --> 00:03:41.140
Patch group is created by applying a tag with the special key,

47
00:03:41.140 --> 00:03:44.940
Patch Group, to an EC2.

48
00:03:44.940 --> 00:03:48.090
It's important that it's spelled exactly like this.

49
00:03:48.090 --> 00:03:50.440
Otherwise, it's not going to work.

50
00:03:50.440 --> 00:03:54.440
The tag value, however, can be any string.

51
00:03:54.440 --> 00:03:57.020
This string is what we will use going forward to

52
00:03:57.020 --> 00:04:00.470
apply patches to this patch group.

53
00:04:00.470 --> 00:04:04.290
An instance can only be a member of one patch group,

54
00:04:04.290 --> 00:04:08.460
and this instance here is supposed to get patch baselines applied that

55
00:04:08.460 --> 00:04:14.370
are associated with the WindowsServer2019base baseline.

56
00:04:14.370 --> 00:04:22.340
Save the tag, and we'll head back to Patch Manager to create a custom baseline.

57
00:04:22.340 --> 00:04:27.240
We should give our baseline a good name that we can easily identify,

58
00:04:27.240 --> 00:04:36.640
for example globomantics‑windowsserver2019‑base.

59
00:04:36.640 --> 00:04:38.480
We'll just skip the description for now,

60
00:04:38.480 --> 00:04:46.040
but make sure that Windows is selected as the OS this applies to.

61
00:04:46.040 --> 00:04:52.340
We also set this as the default baseline for all Windows instances.

62
00:04:52.340 --> 00:04:53.100
Because of that,

63
00:04:53.100 --> 00:04:57.070
we're going to get this warning here telling us that this actually applies to

64
00:04:57.070 --> 00:05:03.710
all Windows instances and not just Windows Server 2019.

65
00:05:03.710 --> 00:05:06.190
As Globomantics is only going to be managing Windows

66
00:05:06.190 --> 00:05:11.180
Server 2019, it's good to know, and it's an important callout,

67
00:05:11.180 --> 00:05:14.940
but for us, this is going to be fine.

68
00:05:14.940 --> 00:05:19.790
We now have to configure the product this baseline applies to. As mentioned,

69
00:05:19.790 --> 00:05:26.160
this is Server 2019. And we want to cover all our bases,

70
00:05:26.160 --> 00:05:33.940
so we select that all severities and classifications have to be installed.

71
00:05:33.940 --> 00:05:37.540
However, as progressive as we are,

72
00:05:37.540 --> 00:05:40.150
we do like to wait a few days and see what the internet

73
00:05:40.150 --> 00:05:43.640
has to say about the quality of patches.

74
00:05:43.640 --> 00:05:50.080
So we're going to wait 7 days until we auto approve the updates.

75
00:05:50.080 --> 00:05:57.240
In addition to Windows, we can also apply patches to applications,

76
00:05:57.240 --> 00:06:02.740
for example to Office or SQL Server.

77
00:06:02.740 --> 00:06:03.960
But in this baseline,

78
00:06:03.960 --> 00:06:10.240
we don't. We just want to cover Windows Server 2019. So

79
00:06:10.240 --> 00:06:15.490
we'll head back out and create the baseline.

80
00:06:15.490 --> 00:06:17.270
Now that this is created,

81
00:06:17.270 --> 00:06:23.140
we need to go back into the newly created baseline and do one more thing.

82
00:06:23.140 --> 00:06:26.310
You can see that there's no patch group associated with this

83
00:06:26.310 --> 00:06:33.740
baseline. But under Actions, we can exactly do that.

84
00:06:33.740 --> 00:06:38.140
Remember the tag value that we used on our instance?

85
00:06:38.140 --> 00:06:43.590
That string now goes in here. A baseline can actually be

86
00:06:43.590 --> 00:06:50.690
associated with many patch groups, 25 to be precise.

87
00:06:50.690 --> 00:06:52.360
Once we added the string here,

88
00:06:52.360 --> 00:06:57.280
we can add it, we close out, and we can now finally

89
00:06:57.280 --> 00:07:03.240
configure the patching process. First of all,

90
00:07:03.240 --> 00:07:09.440
we need to configure how this process will identify the instances to patch.

91
00:07:09.440 --> 00:07:15.740
We will use the most reliable way by instance tags.

92
00:07:15.740 --> 00:07:19.580
The instance tag here can actually be any instance tag,

93
00:07:19.580 --> 00:07:22.170
but we're going to use the patch group tag from

94
00:07:22.170 --> 00:07:26.940
before as that makes the most sense.

95
00:07:26.940 --> 00:07:31.240
Next, the patching schedule needs to be configured,

96
00:07:31.240 --> 00:07:34.590
and this is the maintenance window schedule.

97
00:07:34.590 --> 00:07:40.090
The first step, we will configure the maintenance window's targets. As we

98
00:07:40.090 --> 00:07:45.910
don't have an existing maintenance window yet, we have to create a new one.

99
00:07:45.910 --> 00:07:51.930
In here, we can now choose from a few options to create the schedule's CRON

100
00:07:51.930 --> 00:07:55.660
or rate expression. As an example here,

101
00:07:55.660 --> 00:08:00.200
we can say that this window is valid every Sunday at

102
00:08:00.200 --> 00:08:04.840
1:00 a.m, and its duration is 5 hours.

103
00:08:04.840 --> 00:08:08.930
This should be plenty of time for every required update

104
00:08:08.930 --> 00:08:12.180
to be installed across all instances.

105
00:08:12.180 --> 00:08:13.640
For this demo though,

106
00:08:13.640 --> 00:08:17.260
we can skip the scheduling and type Patch Manager to patch

107
00:08:17.260 --> 00:08:21.320
the instances right away. This way, we don't have to wait

108
00:08:21.320 --> 00:08:25.240
here until next Sunday morning.

109
00:08:25.240 --> 00:08:32.940
The default patching operation is to scan and straightaway install the updates.

110
00:08:32.940 --> 00:08:37.040
We could, however, also set it to scan only,

111
00:08:37.040 --> 00:08:42.750
and then later on, we tell it to scan and install after we've reviewed. The

112
00:08:42.750 --> 00:08:47.440
additional settings inform us that the patch baselines and groups that are

113
00:08:47.440 --> 00:08:52.500
applicable to the instances will be executed. And if none are configured for the

114
00:08:52.500 --> 00:08:56.440
instances, the default baselines will be used.

115
00:08:56.440 --> 00:09:00.510
We already mentioned that, so that's okay with us. One

116
00:09:00.510 --> 00:09:03.840
click, and we've configured the patching.

117
00:09:03.840 --> 00:09:08.240
A new instance like ours will hopefully not have too many patches pending,

118
00:09:08.240 --> 00:09:11.340
so this process should be fairly quick.

119
00:09:11.340 --> 00:09:15.510
Let's head over to the managed instances again and have a look at

120
00:09:15.510 --> 00:09:20.140
our Windows instance. Here in the Patch tab,

121
00:09:20.140 --> 00:09:22.840
we can see what has happened.

122
00:09:22.840 --> 00:09:23.560
Indeed,

123
00:09:23.560 --> 00:09:29.060
it says that 15 updates were installed, and the timestamp of

124
00:09:29.060 --> 00:09:34.740
the last update also matches our expectation.

125
00:09:34.740 --> 00:09:37.410
So this is great for a single instance where you can

126
00:09:37.410 --> 00:09:40.240
click around and check every single one.

127
00:09:40.240 --> 00:09:46.090
But for a large fleet, we want to get more of a high‑level overview,

128
00:09:46.090 --> 00:09:51.040
and we can get exactly that from the Compliance tab here.

129
00:09:51.040 --> 00:09:53.800
This is where we can find all the compliant and

130
00:09:53.800 --> 00:09:57.140
noncompliant instances in our environment,

131
00:09:57.140 --> 00:10:04.000
and it's a very handy view to have for any environment with more than a handful of resources.

