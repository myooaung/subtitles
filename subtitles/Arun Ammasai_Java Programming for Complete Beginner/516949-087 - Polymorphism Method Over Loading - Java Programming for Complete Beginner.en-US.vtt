WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.550
Hello everyone, Welcome back.

00:00:02.550 --> 00:00:04.050
So the another topic,

00:00:04.050 --> 00:00:06.585
the next topic, polymorphisms.

00:00:06.585 --> 00:00:09.225
So what is polymorphism means?

00:00:09.225 --> 00:00:12.210
One operation, different ways.

00:00:12.210 --> 00:00:15.720
If you want to put it in a simple words,

00:00:15.720 --> 00:00:20.025
one method will work in a different way.

00:00:20.025 --> 00:00:24.090
So that is called polymorphism.

00:00:24.090 --> 00:00:25.350
Right?

00:00:25.350 --> 00:00:27.510
So when you call the method,

00:00:27.510 --> 00:00:30.090
the same method work in a different way.

00:00:30.090 --> 00:00:32.385
When I call the method,

00:00:32.385 --> 00:00:34.380
that will work in a different way,

00:00:34.380 --> 00:00:37.410
Somebody else is calling the method that will work in a different way

00:00:37.410 --> 00:00:41.590
so that it's called method over loading.

00:00:41.590 --> 00:00:42.755
Okay?

00:00:42.755 --> 00:00:44.690
So what is polymorphism?

00:00:44.690 --> 00:00:47.225
Polymorphism is atomic, just came from a Greek word,

00:00:47.225 --> 00:00:49.940
athletes towards actually poly means many,

00:00:49.940 --> 00:00:51.530
morph means firms morphing.

00:00:51.530 --> 00:00:54.125
Alright, so many formations,

00:00:54.125 --> 00:00:56.970
many fonts, something like that.

00:00:56.980 --> 00:01:01.550
And also there are two types of polymorphism on

00:01:01.550 --> 00:01:05.690
is static and another one is that dynamic and static,

00:01:05.690 --> 00:01:12.485
it's a method overloading and the dynamics becomes the overriding.

00:01:12.485 --> 00:01:20.010
And you can call them as dynamic is at runtime and static is what do they compile time.

00:01:20.530 --> 00:01:24.020
So as I mentioned,

00:01:24.020 --> 00:01:26.225
two types of polymorphisms, static polymorphism.

00:01:26.225 --> 00:01:30.620
So first unit, I mean identify what is the static polynomial.

00:01:30.620 --> 00:01:34.310
As I mentioned, static is compiled time.

00:01:34.310 --> 00:01:39.095
And method overloading can be considered as a static polymorphism.

00:01:39.095 --> 00:01:43.640
So wherever you can see it doesn't matter what happened, which means,

00:01:43.640 --> 00:01:49.625
that is method overloading static polymorphism.

00:01:49.625 --> 00:01:53.675
Okay, so how it is looks like method overloading.

00:01:53.675 --> 00:01:55.970
So the method will be named,

00:01:55.970 --> 00:01:58.640
will be the same, but it has a different parameter in it.

00:01:58.640 --> 00:02:01.565
For example, I have a method called add.

00:02:01.565 --> 00:02:05.690
I have to add that which contains different parameters.

00:02:05.690 --> 00:02:06.710
First, the add method,

00:02:06.710 --> 00:02:09.005
which will contain in x,

00:02:09.005 --> 00:02:12.935
and second ad, which contains int x comma into a.

00:02:12.935 --> 00:02:16.355
So the same name but different parameters.

00:02:16.355 --> 00:02:17.780
Right?

00:02:17.780 --> 00:02:20.030
So, and the dynamic polymer,

00:02:20.030 --> 00:02:23.735
it's slightly opposite to static polymorphism.

00:02:23.735 --> 00:02:29.855
So we'll have the same method name and same parameter type.

00:02:29.855 --> 00:02:34.535
But it will be available in the child class.

00:02:34.535 --> 00:02:37.415
So the baton, whether they have the same method,

00:02:37.415 --> 00:02:40.040
tells us have the same matter to

00:02:40.040 --> 00:02:44.120
the child class will be override the method from the pattern class.

00:02:44.120 --> 00:02:45.845
I can turn a simple example though,

00:02:45.845 --> 00:02:49.530
pretty easy to understand when you're looking at the code.

00:02:49.570 --> 00:02:54.065
So let me create a new class.

00:02:54.065 --> 00:02:59.120
Like let's see, let's talk about static polymorphism.

00:02:59.120 --> 00:03:01.805
It is nothing but a matter of our learning rate.

00:03:01.805 --> 00:03:07.760
So my third over loading.

00:03:07.760 --> 00:03:11.090
So what I'm gonna do is first thing,

00:03:11.090 --> 00:03:12.440
let me create a class.

00:03:12.440 --> 00:03:16.265
I can test it in sedimentary or leg so I can create a class here.

00:03:16.265 --> 00:03:26.820
So plus I'm creating a class called overloading.

00:03:28.060 --> 00:03:30.575
So here I'm going to write down.

00:03:30.575 --> 00:03:32.045
So what is the overloading means?

00:03:32.045 --> 00:03:34.880
Same or different parameters? Correct.

00:03:34.880 --> 00:03:40.625
Okay, so wide display.

00:03:40.625 --> 00:03:48.410
So it will accept into x and it will simply print

00:03:48.410 --> 00:03:57.155
the Cisco value x, x.

00:03:57.155 --> 00:04:01.215
And again, the same method name,

00:04:01.215 --> 00:04:05.065
display, but two parameters,

00:04:05.065 --> 00:04:08.690
int x comma y.

00:04:17.880 --> 00:04:25.315
So what I'm gonna do is go to list X plus Y, X plus Y.

00:04:25.315 --> 00:04:28.615
So this is called overloading.

00:04:28.615 --> 00:04:33.610
Method name is same but the parameter is different.

00:04:33.610 --> 00:04:40.030
That is example for lower lowly or you can call them as static polymorphism.

00:04:40.030 --> 00:04:44.400
That tick mark.

00:04:44.400 --> 00:04:47.435
Okay, So let's call them.

00:04:47.435 --> 00:04:49.520
Let's try to execute the code.

00:04:49.520 --> 00:04:50.854
So I have a microRNA,

00:04:50.854 --> 00:04:53.435
so I'm going to create a main method here.

00:04:53.435 --> 00:04:55.775
So what basically happened?

00:04:55.775 --> 00:05:00.830
So I'm going to create objects for overloading class.

00:05:00.830 --> 00:05:01.700
Okay?

00:05:01.700 --> 00:05:07.235
So OBJ overloading.

00:05:07.235 --> 00:05:10.340
So based on the parameter the method will be called.

00:05:10.340 --> 00:05:14.270
So OBJ dot display.

00:05:14.270 --> 00:05:16.145
If I pass one parameter,

00:05:16.145 --> 00:05:18.380
the first material be called, certainly run it.

00:05:18.380 --> 00:05:20.915
So it will simply say value x is equal to 20.

00:05:20.915 --> 00:05:22.895
In other words, if I pass,

00:05:22.895 --> 00:05:26.975
don't take my 30, which we'll call the second method.

00:05:26.975 --> 00:05:30.140
The metonym is same but functional that is different,

00:05:30.140 --> 00:05:32.255
that is called method overloading.

00:05:32.255 --> 00:05:33.110
Okay?

00:05:33.110 --> 00:05:37.625
So as you can do something like we can call both of them in a separate way.

00:05:37.625 --> 00:05:42.725
So display, display or negative or something like that.

00:05:42.725 --> 00:05:44.180
So now you can run the code.

00:05:44.180 --> 00:05:45.890
You should be able to see both of them.

00:05:45.890 --> 00:05:46.610
Okay?

00:05:46.610 --> 00:05:50.630
So whenever the bottom of the concepts comes into place,

00:05:50.630 --> 00:05:52.130
keep one thing in mind.

00:05:52.130 --> 00:05:54.725
That overloading, which means I have

00:05:54.725 --> 00:05:58.340
two method which has the same name but parameters is different.

00:05:58.340 --> 00:06:03.290
That is called method overloading or static polymorphism.

00:06:03.290 --> 00:06:05.010
Thank you.
