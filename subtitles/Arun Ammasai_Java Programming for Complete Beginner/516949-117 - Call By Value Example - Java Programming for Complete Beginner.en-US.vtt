WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.430
Hello everyone. Welcome back.

00:00:02.430 --> 00:00:04.560
As I mentioned in the last video,

00:00:04.560 --> 00:00:07.410
we are going to talk about call by value.

00:00:07.410 --> 00:00:10.200
So what do you mean be called by value?

00:00:10.200 --> 00:00:12.495
I'm going to call some method.

00:00:12.495 --> 00:00:13.320
Okay?

00:00:13.320 --> 00:00:15.690
So I want to pass some data to it.

00:00:15.690 --> 00:00:17.940
So that is called call by value.

00:00:17.940 --> 00:00:21.680
So basically, hello only supports call-by-value because

00:00:21.680 --> 00:00:25.550
it will not support call beta friends because that is a different language.

00:00:25.550 --> 00:00:29.120
If you go for the C, C or C plus plus,

00:00:29.120 --> 00:00:30.860
you can see call by reference,

00:00:30.860 --> 00:00:34.580
but in Java, we have only call-by-value,

00:00:34.580 --> 00:00:37.910
for example, is the column method passing a value.

00:00:37.910 --> 00:00:41.330
For example, you have a method which you'll do a addition,

00:00:41.330 --> 00:00:42.770
ten plus ten is equal to 180,

00:00:42.770 --> 00:00:44.900
so you're passing into x and into a.

00:00:44.900 --> 00:00:45.725
Correct.

00:00:45.725 --> 00:00:49.160
So this, but that particular matter,

00:00:49.160 --> 00:00:52.625
if you want to call it, you need to call the method and passing two parameters.

00:00:52.625 --> 00:00:54.830
So that then come at one day.

00:00:54.830 --> 00:00:59.555
Those are values and you are calling a function that is called as a call-by-value,

00:00:59.555 --> 00:01:04.760
calling your function with some value,

00:01:04.760 --> 00:01:07.760
which value means the input data for the midterm

00:01:07.760 --> 00:01:11.915
that implementing changes being done in column a door,

00:01:11.915 --> 00:01:16.115
which will not alpha there in the calling method. Calling method.

00:01:16.115 --> 00:01:20.180
It will always call and pass some data to it.

00:01:20.180 --> 00:01:24.470
Okay? The data manipulation only happened in the method itself, right?

00:01:24.470 --> 00:01:27.200
Even though it does, is it waits call-by-value.

00:01:27.200 --> 00:01:30.125
I'm just, I have a map that I'm just passing some input to it.

00:01:30.125 --> 00:01:33.710
That's all right. Yeah, we have done lot of examples with that,

00:01:33.710 --> 00:01:35.600
but we need to know what we tried.

00:01:35.600 --> 00:01:37.340
So whenever we call him at third,

00:01:37.340 --> 00:01:39.455
whenever we pass them input to the method,

00:01:39.455 --> 00:01:43.355
we are following call-by-value functionality.

00:01:43.355 --> 00:01:44.525
Got it.

00:01:44.525 --> 00:01:46.385
So what I'm gonna do right now,

00:01:46.385 --> 00:01:50.975
I'm going to create a simple example to show you how the call by value and book.

00:01:50.975 --> 00:01:54.530
We already know that. But what does the importance,

00:01:54.530 --> 00:01:56.585
how the data will be impacted?

00:01:56.585 --> 00:01:58.220
So we're going to talk about that.

00:01:58.220 --> 00:02:01.760
So I'm going to create a new example here.

00:02:01.760 --> 00:02:07.550
So I'm going to get a new class, call-by-value example.

00:02:07.550 --> 00:02:08.750
Okay?

00:02:08.750 --> 00:02:11.240
So I have a class.

00:02:11.240 --> 00:02:21.380
They said I have an input called D or in x is equal to.

00:02:21.380 --> 00:02:27.605
So what I'm gonna do, I have modifier.

00:02:27.605 --> 00:02:32.270
So basically this motto is trying to modify something.

00:02:32.270 --> 00:02:34.560
Sorry.

00:02:37.270 --> 00:02:44.630
So this will accept an integer value.

00:02:44.630 --> 00:02:51.380
So what I'm doing into the more efficient that I'm basically doing, increment x.

00:02:51.380 --> 00:02:54.065
If I got some value for x or something,

00:02:54.065 --> 00:02:56.420
I'm going to add into them my data,

00:02:56.420 --> 00:02:58.490
for example, values contained 20.

00:02:58.490 --> 00:03:04.475
So I want, I'm gonna do x is equal to x plus and now has some random data 50.

00:03:04.475 --> 00:03:07.130
So in that case,

00:03:07.130 --> 00:03:08.140
whatever, well, it's partially,

00:03:08.140 --> 00:03:11.615
it is going to be a saint here.

00:03:11.615 --> 00:03:14.360
And then this value,

00:03:14.360 --> 00:03:15.815
okay, sorry, that's my bad.

00:03:15.815 --> 00:03:20.900
So value here is how you need to do.

00:03:20.900 --> 00:03:24.425
Okay, So I'm just modifying the value at it.

00:03:24.425 --> 00:03:26.390
So the next thing, we have to create

00:03:26.390 --> 00:03:29.195
a main method because we're gonna call him at the right.

00:03:29.195 --> 00:03:30.470
So main method.

00:03:30.470 --> 00:03:38.070
So what is our classmates call-by-value example Rights region is equal to class name.

00:03:39.100 --> 00:03:45.800
So now we're going to call the method which returns the modified method.

00:03:45.800 --> 00:03:51.050
So the method we are going to call object dot modifying.

00:03:51.050 --> 00:03:53.240
So ordered data we are going to pass, for example,

00:03:53.240 --> 00:03:56.735
I'm going to pass from here.

00:03:56.735 --> 00:03:57.560
Okay?

00:03:57.560 --> 00:04:00.935
So, but before that I'm going to print something.

00:04:00.935 --> 00:04:05.975
I want to print the value of data

00:04:05.975 --> 00:04:13.580
correct or wrong actually size report, elegant mechanism.

00:04:13.580 --> 00:04:20.250
So there, okay. So I want to print the data here before.

00:04:21.100 --> 00:04:28.500
So here OBJ dot value,

00:04:29.170 --> 00:04:35.150
and do the same after some after.

00:04:35.150 --> 00:04:36.875
So basically what happened?

00:04:36.875 --> 00:04:41.825
I'm calling a method and then passing a value. Okay?

00:04:41.825 --> 00:04:46.010
So this particular logic is one lean donor to this method which will

00:04:46.010 --> 00:04:50.345
not impact my original data.

00:04:50.345 --> 00:04:52.265
Let's verify that.

00:04:52.265 --> 00:04:57.200
Just run it now. So what are the different eye valleys?

00:04:57.200 --> 00:04:58.130
Ten, right?

00:04:58.130 --> 00:05:00.810
But even though I did something,

00:05:01.330 --> 00:05:05.960
the value is not changed in case if you want, you can print it here.

00:05:05.960 --> 00:05:14.465
So this value, so this will date this modified value.

00:05:14.465 --> 00:05:21.050
So first we'll have 10 and we had also in fire 50 because I'm passing 1000 to dismantle.

00:05:21.050 --> 00:05:23.735
So 1000 plus 50 is equal to 1000 15.

00:05:23.735 --> 00:05:26.165
But the valley's not changed.

00:05:26.165 --> 00:05:27.800
So this is the impact.

00:05:27.800 --> 00:05:30.755
So calling a method with HDL values.

00:05:30.755 --> 00:05:33.125
So this is the value and this is the metadata.

00:05:33.125 --> 00:05:38.910
So we are calling him a television proper data that is called call by value example.
