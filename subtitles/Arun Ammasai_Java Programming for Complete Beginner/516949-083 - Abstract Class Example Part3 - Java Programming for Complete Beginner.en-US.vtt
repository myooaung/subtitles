WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.735
Hello everyone.

00:00:01.735 --> 00:00:09.745
Welcome back. So what was the thing which we discussed before, this particular video?

00:00:09.745 --> 00:00:11.770
The thing is, I haven't normal method,

00:00:11.770 --> 00:00:15.985
I have a static method that both are doing the same kind of a bug.

00:00:15.985 --> 00:00:18.640
But what exactly the div I can do that in an hour withdrawal.

00:00:18.640 --> 00:00:21.040
So why do I need to have a static method?

00:00:21.040 --> 00:00:23.080
So that is a difference here.

00:00:23.080 --> 00:00:24.580
So what we tried,

00:00:24.580 --> 00:00:27.880
show we override on here.

00:00:27.880 --> 00:00:30.790
But when you create a static method,

00:00:30.790 --> 00:00:36.505
you can use the method you cannot override providing this diction to the user.

00:00:36.505 --> 00:00:39.970
Okay, let's try to do what I did here.

00:00:39.970 --> 00:00:41.815
So what are the medallion static model, right?

00:00:41.815 --> 00:00:46.350
So wide static.

00:00:46.390 --> 00:00:51.875
See what happened now. The moment I create a matter here, it shows an error.

00:00:51.875 --> 00:00:56.630
This instance metadata cannot override that static method from Michigan.

00:00:56.630 --> 00:00:59.090
Because in the static mission,

00:00:59.090 --> 00:01:02.930
that static method is static.

00:01:02.930 --> 00:01:08.010
So which means static method cannot be overridden anywhere.

00:01:08.950 --> 00:01:13.940
Okay, so that's the difference between these two.

00:01:13.940 --> 00:01:16.715
Okay, so let me come back one more time.

00:01:16.715 --> 00:01:18.920
So static method, I mean abstract.

00:01:18.920 --> 00:01:20.915
You can create a income didn't matter,

00:01:20.915 --> 00:01:29.830
and you can provide implementation whoever is extending class and y is a normal matter.

00:01:29.830 --> 00:01:32.320
They can use it or if they wanted,

00:01:32.320 --> 00:01:34.465
they can override also.

00:01:34.465 --> 00:01:36.640
And we have a static method.

00:01:36.640 --> 00:01:44.095
They can only use and they cannot override reason.

00:01:44.095 --> 00:01:46.855
And what are the next year?

00:01:46.855 --> 00:01:49.360
We can have a final Medan.

00:01:49.360 --> 00:01:52.360
Okay, so what are the final model like a static method.

00:01:52.360 --> 00:02:00.140
We have a final, final, final part.

00:02:01.410 --> 00:02:09.680
So here I'm going to print another message.

00:02:13.140 --> 00:02:15.680
Sorry.

00:02:16.560 --> 00:02:22.990
Final meter. Okay?

00:02:22.990 --> 00:02:26.995
So this is part of machine, right?

00:02:26.995 --> 00:02:28.540
I mean the machine class,

00:02:28.540 --> 00:02:30.955
so I should be able to access B here.

00:02:30.955 --> 00:02:41.920
We see that our object dot final metal and we can run it now.

00:02:41.920 --> 00:02:45.310
So this is from normal matter.

00:02:45.310 --> 00:02:48.265
I mean, each one.

00:02:48.265 --> 00:02:51.535
Yeah, this is matter and this is an automaton,

00:02:51.535 --> 00:02:54.695
which is why our air here.

00:02:54.695 --> 00:02:56.315
And this is on static method,

00:02:56.315 --> 00:02:58.130
which is this one.

00:02:58.130 --> 00:02:59.840
And this is going on finally matter.

00:02:59.840 --> 00:03:00.695
Okay?

00:03:00.695 --> 00:03:04.235
You might ask, what are the difference between static and final?

00:03:04.235 --> 00:03:05.900
Final?

00:03:05.900 --> 00:03:08.570
So what do you mean by final? Final means?

00:03:08.570 --> 00:03:11.120
It's finally, you cannot do anything else.

00:03:11.120 --> 00:03:14.030
If you declare a variable in final,

00:03:14.030 --> 00:03:19.400
you cannot change the value the same time.

00:03:19.400 --> 00:03:21.800
If you declare a medallion final,

00:03:21.800 --> 00:03:25.250
the same thing, you cannot modify it. You cannot override.

00:03:25.250 --> 00:03:27.510
Pretty much similar like static.

00:03:27.610 --> 00:03:30.920
Static there are ways to modify the data,

00:03:30.920 --> 00:03:34.580
but in final, that is no air or can we try that?

00:03:34.580 --> 00:03:35.945
Okay.

00:03:35.945 --> 00:03:38.555
So I'm going to try to

00:03:38.555 --> 00:03:45.320
override a

00:03:45.320 --> 00:03:50.930
method and

00:03:50.930 --> 00:03:52.250
see what happen here.

00:03:52.250 --> 00:03:57.050
Since data message remove final modifier of machine,

00:03:57.050 --> 00:04:02.210
not final midterm because the method defined as a final one,

00:04:02.210 --> 00:04:04.520
something is defined as a final.

00:04:04.520 --> 00:04:09.470
You cannot modify or change whatever static method also,

00:04:09.470 --> 00:04:10.655
you cannot do override,

00:04:10.655 --> 00:04:17.300
but there are possibility you can overwrite the data inside the static.

00:04:17.300 --> 00:04:20.735
All right, So, but finally,

00:04:20.735 --> 00:04:23.630
there is no such thing you cannot operate,

00:04:23.630 --> 00:04:26.270
cannot modify any data.

00:04:26.270 --> 00:04:28.070
I think I'll leave it as final.

00:04:28.070 --> 00:04:33.050
That means that's all you cannot do anything else under particular matter, right?

00:04:33.050 --> 00:04:36.965
So abstraction is a big thing, okay?

00:04:36.965 --> 00:04:44.570
So my advice is practice more on abstract route.

00:04:44.570 --> 00:04:46.895
This is going to be cool for a lot of things

00:04:46.895 --> 00:04:49.700
when you're learning descent pattern also off-site,

00:04:49.700 --> 00:04:52.310
it's playing a big role over there.

00:04:52.310 --> 00:04:54.020
Okay, This is good.

00:04:54.020 --> 00:04:57.870
Some example and let me know if you have any clarifications thing.
