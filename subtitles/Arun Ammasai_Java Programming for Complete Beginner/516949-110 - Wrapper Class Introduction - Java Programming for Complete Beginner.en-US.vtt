WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.440 --> 00:00:02.280
Hello everyone.

00:00:02.280 --> 00:00:03.390
Welcome back.

00:00:03.390 --> 00:00:09.150
So the another important topic which each and every Java developers should have heard of,

00:00:09.150 --> 00:00:11.310
which is nothing but the wrapper classes.

00:00:11.310 --> 00:00:14.160
So do you remember the data types which we have used?

00:00:14.160 --> 00:00:22.345
So for integer by w along all of them are primitive, correct?

00:00:22.345 --> 00:00:25.415
So we cannot use them as

00:00:25.415 --> 00:00:30.900
opposites because they are not belongs to any class data primitive.

00:00:30.940 --> 00:00:35.630
So to achieve that, wrapper,

00:00:35.630 --> 00:00:41.555
data types comes into programming language

00:00:41.555 --> 00:00:47.855
because we all know that it's basically we put out a lot of programming stuff, right?

00:00:47.855 --> 00:00:50.570
Okay, so we have a lot of our data types,

00:00:50.570 --> 00:00:55.730
but we cannot convert them into an object because they're not classes actually.

00:00:55.730 --> 00:00:58.460
They are not plants, they cannot create an object out of it.

00:00:58.460 --> 00:01:00.140
Okay, so wrapper classes,

00:01:00.140 --> 00:01:03.170
the one thing which will help us to convert the primitive type

00:01:03.170 --> 00:01:08.450
into appropriate wrapper class.

00:01:08.450 --> 00:01:14.675
For example, if we have an integer or convert into an integer, we'll talk about that.

00:01:14.675 --> 00:01:20.164
So as I mentioned, wrapper class our user to convert primitive data type to an object.

00:01:20.164 --> 00:01:22.085
Exactly index is equal to 0,

00:01:22.085 --> 00:01:24.950
that is just a primitive number, right?

00:01:24.950 --> 00:01:28.980
I'm converting that into an object with the help of primitive.

00:01:29.020 --> 00:01:32.495
And not only dad.

00:01:32.495 --> 00:01:35.120
So when you're creating is a wrapper class object which will

00:01:35.120 --> 00:01:38.105
hold much more memory than the primitive type,

00:01:38.105 --> 00:01:39.965
because primitive data has a limit,

00:01:39.965 --> 00:01:41.975
because they're using limited memory.

00:01:41.975 --> 00:01:47.400
Like if you're using BioGRID to Luxor only 128 to minus 12 and 8.

00:01:47.400 --> 00:01:49.780
Similar to weigh all the primitive as a limit,

00:01:49.780 --> 00:01:51.610
but how quickly it doesn't.

00:01:51.610 --> 00:01:54.250
So here is a simple thing.

00:01:54.250 --> 00:01:55.524
If you know the efficiency,

00:01:55.524 --> 00:01:57.415
you can simply go for primitive,

00:01:57.415 --> 00:02:00.340
like in our primitive data types.

00:02:00.340 --> 00:02:02.380
But in case when you're working at the albedo and the

00:02:02.380 --> 00:02:06.860
programming and you're dealing with the object, you need to go for a rapper.

00:02:07.350 --> 00:02:09.790
And as I mentioned earlier,

00:02:09.790 --> 00:02:14.530
primitive types are not an object so they wouldn't belong to any glass.

00:02:14.530 --> 00:02:18.205
So that is a reason that upper-class comes into place.

00:02:18.205 --> 00:02:20.485
And another important thing,

00:02:20.485 --> 00:02:22.705
can you store index is equal to null.

00:02:22.705 --> 00:02:25.825
You can't because those are primitive and lower allow null values,

00:02:25.825 --> 00:02:29.030
but can allow null values.

00:02:29.910 --> 00:02:35.260
So another thing which we need to know when you're talking

00:02:35.260 --> 00:02:37.390
about wrapper classes that are upper-class comes

00:02:37.390 --> 00:02:40.195
into place where we need to do boxing and unboxing.

00:02:40.195 --> 00:02:42.340
Okay, what is boxing?

00:02:42.340 --> 00:02:44.440
So the conversion of

00:02:44.440 --> 00:02:47.290
a primitive data type into a corresponding wrapper class, for example,

00:02:47.290 --> 00:02:50.005
we have an int I wanted cannot enter into object,

00:02:50.005 --> 00:02:52.555
so you cannot directly convert into an object.

00:02:52.555 --> 00:02:56.595
You need to convert it into a wrapper class, which is Integer.

00:02:56.595 --> 00:03:00.055
Unboxing. It is directly opposite to boxing.

00:03:00.055 --> 00:03:03.385
So boxing we convert primitive wrapper class.

00:03:03.385 --> 00:03:08.020
In unboxing, we convert a wrapper to primitive data type.

00:03:08.020 --> 00:03:08.830
Okay?

00:03:08.830 --> 00:03:13.010
So we all know that how many types of primitive, right?

00:03:13.010 --> 00:03:14.840
We have our own aid,

00:03:14.840 --> 00:03:18.725
not exactly eight number of primitive data types.

00:03:18.725 --> 00:03:22.760
So each and every individual data type has its own wrapper class, Boolean,

00:03:22.760 --> 00:03:24.470
we have a Boolean class, God,

00:03:24.470 --> 00:03:25.775
we have a character class,

00:03:25.775 --> 00:03:27.560
byte, we have a base class.

00:03:27.560 --> 00:03:34.190
The similar way in long float double all of them have its own wrapper classes, right?

00:03:34.190 --> 00:03:36.080
So in the next example,

00:03:36.080 --> 00:03:37.789
what we are going to discuss,

00:03:37.789 --> 00:03:42.470
we're going to create a simple example which will tell you how do boxing.

00:03:42.470 --> 00:03:44.930
So boxing means primitive wrapper.

00:03:44.930 --> 00:03:47.495
Unboxing means wrapper to primitive.

00:03:47.495 --> 00:03:50.885
Okay, the next example we'll talk about primitive wrapper class.

00:03:50.885 --> 00:03:52.380
Thank you.
