WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.130
Hello everyone, Welcome back.

00:00:02.130 --> 00:00:07.660
So let's create an array, for example.

00:00:09.020 --> 00:00:10.575
Okay?

00:00:10.575 --> 00:00:12.585
So when you're talking about the array,

00:00:12.585 --> 00:00:14.115
there are few things you need to know.

00:00:14.115 --> 00:00:19.600
Okay, so there are advantages for a release code optimization.

00:00:19.730 --> 00:00:28.140
You can retrieve data in a quick manner and efficiently also.

00:00:28.140 --> 00:00:32.850
Okay, the first one, code optimization.

00:00:34.810 --> 00:00:42.020
For example, if Vichy and the second one

00:00:42.020 --> 00:00:50.585
is random access using index.

00:00:50.585 --> 00:00:53.880
But that will be a disadvantage also.

00:00:58.420 --> 00:01:02.970
So that this advantage is size limit.

00:01:06.040 --> 00:01:09.620
Because when you're creating an array, right,

00:01:09.620 --> 00:01:14.224
the size is not fixed.

00:01:14.224 --> 00:01:16.295
I mean, a site is actually is fixed.

00:01:16.295 --> 00:01:19.310
So that's ICUs will not dynamically increase.

00:01:19.310 --> 00:01:21.140
It does not grow itself.

00:01:21.140 --> 00:01:24.020
So that is a recent to resolve this particular problem,

00:01:24.020 --> 00:01:26.465
we moved to collection framework.

00:01:26.465 --> 00:01:28.160
Let's talk about the array here.

00:01:28.160 --> 00:01:30.560
So in the array itself we have two different types and

00:01:30.560 --> 00:01:34.325
single-dimensional array and multi-dimensional array.

00:01:34.325 --> 00:01:36.155
Let's try single-dimensional.

00:01:36.155 --> 00:01:38.195
So let's create a main method here.

00:01:38.195 --> 00:01:40.910
So let's create a simple array.

00:01:40.910 --> 00:01:42.410
So what are we discussing?

00:01:42.410 --> 00:01:43.820
The example delta, for example,

00:01:43.820 --> 00:01:50.310
I have a string and cars.

00:01:51.190 --> 00:01:55.295
So here in order to provide cars,

00:01:55.295 --> 00:01:56.660
all of them string, right?

00:01:56.660 --> 00:01:58.920
So it provided him.

00:02:02.770 --> 00:02:06.485
So we can provide different kinds of moral here.

00:02:06.485 --> 00:02:13.655
We haven't done for February. Okay?

00:02:13.655 --> 00:02:16.230
So you can simply print them.

00:02:18.040 --> 00:02:21.620
So you can print them just like that.

00:02:21.620 --> 00:02:24.690
And you can run them.

00:02:25.810 --> 00:02:29.570
But what happened here? I don't think anybody here,

00:02:29.570 --> 00:02:33.695
because the array can be accessed through the index, that means it is 0.

00:02:33.695 --> 00:02:38.170
The indexes start at 0, so 0, 12.

00:02:38.170 --> 00:02:41.770
So what you can do is cast that, get off.

00:02:41.770 --> 00:02:42.910
Sorry.

00:02:42.910 --> 00:02:47.005
Dot index is 0, right? 0 here.

00:02:47.005 --> 00:02:49.360
Now let me run this.

00:02:49.360 --> 00:02:53.470
So now we've got hone down correctly.

00:02:53.470 --> 00:02:55.120
So I have a problem.

00:02:55.120 --> 00:02:58.210
It's supposed to be honed a rate so that there is an error in their spelling.

00:02:58.210 --> 00:03:02.470
So you can directly modify or we can simply be something that we can override it also,

00:03:02.470 --> 00:03:04.075
based on the index control,

00:03:04.075 --> 00:03:07.555
cars of 0 is equal to MR if in the Honda,

00:03:07.555 --> 00:03:09.950
Honda us into Honda.

00:03:10.890 --> 00:03:13.510
So now let's run it again.

00:03:13.510 --> 00:03:15.505
We'll see what's going to happen.

00:03:15.505 --> 00:03:18.520
So the data has been modified.

00:03:18.520 --> 00:03:22.360
Using the ordered operation.

00:03:22.360 --> 00:03:29.005
Can still do that. So we're going to talk about the ways how we can declare an array.

00:03:29.005 --> 00:03:31.690
But here, this is again, it's a fixed.

00:03:31.690 --> 00:03:33.115
See, what'll happen.

00:03:33.115 --> 00:03:36.250
0123 here,

00:03:36.250 --> 00:03:38.710
three is not existing, right?

00:03:38.710 --> 00:03:40.960
So we'll end up with an array index of

00:03:40.960 --> 00:03:45.865
bone exception because three is not a valid index, correct.

00:03:45.865 --> 00:03:48.445
So the size is fixed here.

00:03:48.445 --> 00:03:52.120
So there are other ways to create arrays also, for example,

00:03:52.120 --> 00:04:01.600
like int is equal to new int.

00:04:01.600 --> 00:04:08.815
And you can mention how many number of elements you're going to create a new file.

00:04:08.815 --> 00:04:18.890
And then what you're gonna do, a similar vehicle to that.

00:04:19.080 --> 00:04:32.680
So 1234,

00:04:32.680 --> 00:04:37.345
as you can see,

00:04:37.345 --> 00:04:41.410
I have five elements here.

00:04:41.410 --> 00:04:44.085
I this printer, everything here.

00:04:44.085 --> 00:04:44.930
Okay?

00:04:44.930 --> 00:04:48.395
So let me print the data using for loop, okay?

00:04:48.395 --> 00:04:51.230
Because anyway, the next, the reason why I took r is right

00:04:51.230 --> 00:04:54.005
now because the next exam we're going to talk about arrays.

00:04:54.005 --> 00:04:56.995
I mean, sorry, follow bright so we can use it so far now,

00:04:56.995 --> 00:04:59.130
I'm going to use a for loop here.

00:04:59.260 --> 00:05:03.270
So far.

00:05:04.390 --> 00:05:08.374
So I read length, so yes.

00:05:08.374 --> 00:05:11.360
So what is the length of a is five, right?

00:05:11.360 --> 00:05:13.770
So we'll print.

00:05:16.720 --> 00:05:20.660
So am I.

00:05:20.660 --> 00:05:22.980
So now we can run them.

00:05:24.730 --> 00:05:27.455
We can see all the numbers here.

00:05:27.455 --> 00:05:31.550
We can do the same thing for cars also.

00:05:31.550 --> 00:05:34.620
You can do the course also called startling.

00:05:34.840 --> 00:05:37.790
Okay, so here I am five.

00:05:37.790 --> 00:05:40.910
We're going to use cars of I.

00:05:40.910 --> 00:05:42.560
So now let's run it.

00:05:42.560 --> 00:05:46.610
You should be able to see all the costs correctly.

00:05:46.610 --> 00:05:55.265
So not only dad and dad are multiple with JSX engine, it's correct.

00:05:55.265 --> 00:06:00.440
So we can create a multi-dimensional array are those that are complicated concept.

00:06:00.440 --> 00:06:05.360
But anyway, I'm going to show you a slightly simpler example.

00:06:05.360 --> 00:06:13.235
So, so here I'm going to get another interrupt cars for I'm going to use,

00:06:13.235 --> 00:06:16.760
I'm going to use names.

00:06:16.760 --> 00:06:18.950
So string names.

00:06:18.950 --> 00:06:22.820
And it is going to be a two-dimensional array.

00:06:22.820 --> 00:06:24.215
Okay?

00:06:24.215 --> 00:06:28.865
So now it's going to be,

00:06:28.865 --> 00:06:32.000
so now we have a two-dimensional array,

00:06:32.000 --> 00:06:33.680
so we have one-dimensional.

00:06:33.680 --> 00:06:34.610
Okay?

00:06:34.610 --> 00:06:38.045
So we're going to create another dimension here.

00:06:38.045 --> 00:06:41.430
Let's copy paste the same thing here.

00:06:41.740 --> 00:06:44.449
So now we have a two-dimensional,

00:06:44.449 --> 00:06:47.270
but not exactly because I had one-dimension given one dimension here.

00:06:47.270 --> 00:06:52.520
So we need to provide the entire into a single curly braces.

00:06:52.520 --> 00:06:54.215
That means this is a,

00:06:54.215 --> 00:06:56.540
this is my entire two-dimensional array,

00:06:56.540 --> 00:06:58.865
and this is the first one and the second one.

00:06:58.865 --> 00:06:59.720
Okay?

00:06:59.720 --> 00:07:06.155
So this is even it can create the two-dimensional arrays like this.

00:07:06.155 --> 00:07:10.880
Okay, so here we can have something called interrupt names, again, a, B, C.

00:07:10.880 --> 00:07:17.000
And we can see the end, something like that.

00:07:17.000 --> 00:07:20.330
So how we're going to print the data from dimensional array,

00:07:20.330 --> 00:07:22.325
we'll talk about in the for loop.

00:07:22.325 --> 00:07:28.170
That is the reason I covered the RAs example before the far loop thing.
