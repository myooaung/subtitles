WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.905
Hello everyone, Welcome back.

00:00:01.905 --> 00:00:08.760
So we know that the interface can have default method from Java 8 with the body.

00:00:08.760 --> 00:00:09.900
Right.

00:00:09.900 --> 00:00:13.840
Now on a default method we can have static method also.

00:00:13.840 --> 00:00:19.745
So let's create a static method, static void.

00:00:19.745 --> 00:00:21.485
And we can name it

00:00:21.485 --> 00:00:32.190
like subtraction or multiplication.

00:00:34.900 --> 00:00:36.890
Simple method is fine, right?

00:00:36.890 --> 00:00:41.480
So I don't know,

00:00:41.480 --> 00:00:43.340
I had a hurry names.

00:00:43.340 --> 00:00:47.220
So audience, I'm going to provide metastatic.

00:00:49.420 --> 00:00:50.975
Got it.

00:00:50.975 --> 00:00:54.890
So this method is going to return something random,

00:00:54.890 --> 00:00:58.380
like message from static.

00:01:03.190 --> 00:01:07.520
Okay, So now just take a look at the entire class, a piece.

00:01:07.520 --> 00:01:10.475
And now I have an interface which contains a default method,

00:01:10.475 --> 00:01:13.980
static method, and also upset mentored.

00:01:13.990 --> 00:01:16.760
So you need to provide implementation whoever is

00:01:16.760 --> 00:01:20.120
implementing this particular industries and this ad,

00:01:20.120 --> 00:01:21.950
we can access them, or if you want,

00:01:21.950 --> 00:01:25.115
you can write them also.

00:01:25.115 --> 00:01:26.045
Got it.

00:01:26.045 --> 00:01:27.710
So now what you're gonna do.

00:01:27.710 --> 00:01:29.990
So now it's method static.

00:01:29.990 --> 00:01:34.320
So let's try to access Fn dot.

00:01:37.780 --> 00:01:43.475
So what is happening here when you're trying to looking for the method's metastatic.

00:01:43.475 --> 00:01:46.010
But here you won't you won't be able to see,

00:01:46.010 --> 00:01:48.305
I don't see any either, for instance, for that matter,

00:01:48.305 --> 00:01:52.700
which means that particular method is not visibility and it's not because of the public,

00:01:52.700 --> 00:01:54.470
static and dynamic, okay?

00:01:54.470 --> 00:01:56.120
Static method.

00:01:56.120 --> 00:02:01.205
Static method can be accessed through the class name,

00:02:01.205 --> 00:02:03.830
or you need to create the object for the class.

00:02:03.830 --> 00:02:06.800
And using that object you need to call it correct.

00:02:06.800 --> 00:02:09.140
Since Forest animal is an interface,

00:02:09.140 --> 00:02:10.955
we cannot create the object for that.

00:02:10.955 --> 00:02:19.010
So the only way we need to access using the interface name like Farge animals.me.

00:02:19.010 --> 00:02:21.600
So this is how you'd access.

00:02:22.060 --> 00:02:25.140
No, we can run it.

00:02:25.450 --> 00:02:30.935
So I love message from my love method and message non-static method.

00:02:30.935 --> 00:02:34.790
Okay, you might ask, why do we need to have a static method?

00:02:34.790 --> 00:02:37.190
There is a difference between the standard default anesthetic.

00:02:37.190 --> 00:02:38.780
That is a reason why we have it.

00:02:38.780 --> 00:02:41.930
Default method. You can override your own implementation.

00:02:41.930 --> 00:02:44.495
You can use the previous, I mean,

00:02:44.495 --> 00:02:47.270
the default implementation in guess I don't want that implement it.

00:02:47.270 --> 00:02:50.075
I don't, I want to write my warm core for that matter.

00:02:50.075 --> 00:02:52.055
You can still override them here.

00:02:52.055 --> 00:02:54.890
But static method, it can be accessed through only

00:02:54.890 --> 00:02:57.665
do is one is through object and second,

00:02:57.665 --> 00:03:00.755
using class names are interface names.

00:03:00.755 --> 00:03:03.034
Since it's an interface,

00:03:03.034 --> 00:03:05.240
you can not create the object for the interface, right?

00:03:05.240 --> 00:03:06.830
So since you're not able to create an object,

00:03:06.830 --> 00:03:09.800
you cannot call the method using the object name.

00:03:09.800 --> 00:03:14.030
So I can access using directly the interface name and unmuting,

00:03:14.030 --> 00:03:16.354
you cannot override the metastatic.

00:03:16.354 --> 00:03:17.135
Okay?

00:03:17.135 --> 00:03:20.555
So this can be done and this cannot be over and that is a difference.

00:03:20.555 --> 00:03:21.140
Okay?

00:03:21.140 --> 00:03:25.370
So if you're providing some interfaces to someone and you can giving you,

00:03:25.370 --> 00:03:27.770
you're, you're providing some additional privileges to them.

00:03:27.770 --> 00:03:29.750
I'm giving two methods for you, Okay?

00:03:29.750 --> 00:03:31.610
One, but you can still use it,

00:03:31.610 --> 00:03:33.515
but you are not allowed to modify.

00:03:33.515 --> 00:03:36.665
And one method I'm giving you grandeur lead.

00:03:36.665 --> 00:03:38.750
You can modify, we're going to update,

00:03:38.750 --> 00:03:42.200
or you can use the same implementation of whatever I have written.

00:03:42.200 --> 00:03:48.845
So those kind of scenarios you need to make use of default and static methods.

00:03:48.845 --> 00:03:53.180
So this is the changes in the Java eight, right?

00:03:53.180 --> 00:03:58.745
So in the next video we'll talk about what is the difference in Java.

00:03:58.745 --> 00:04:01.460
Java, and then if you want, you can skip it.

00:04:01.460 --> 00:04:03.350
The reason is the installation process,

00:04:03.350 --> 00:04:05.600
we have done it for Java 8 on the right.

00:04:05.600 --> 00:04:07.640
So if you know how to install Java and n,

00:04:07.640 --> 00:04:13.385
you can still go ahead and insert the D-alanine and then you can explore that.

00:04:13.385 --> 00:04:15.240
Thank you.
