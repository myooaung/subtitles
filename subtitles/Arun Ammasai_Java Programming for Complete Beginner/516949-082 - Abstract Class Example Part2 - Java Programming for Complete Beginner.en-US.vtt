WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.250
Hello everyone, Welcome back.

00:00:02.250 --> 00:00:07.350
So we implement our simple abstraction, abstraction, right?

00:00:07.350 --> 00:00:09.660
So what are the rules which we discussed here?

00:00:09.660 --> 00:00:12.480
So must be declared as abstract class.

00:00:12.480 --> 00:00:14.655
So before the class and deployed,

00:00:14.655 --> 00:00:19.155
the abstract keyword can have abstract and the non-abstract method.

00:00:19.155 --> 00:00:20.490
So we tried abstract,

00:00:20.490 --> 00:00:23.505
abstract Mintz in completed Matata.

00:00:23.505 --> 00:00:27.840
And non-abstract means normal methods not on a test you

00:00:27.840 --> 00:00:35.850
cannot provide without implementation like wide show.

00:00:35.850 --> 00:00:42.070
You cannot provide something like this because this is a normal.

00:00:42.070 --> 00:00:46.940
My third, and you cannot declare it like this.

00:00:46.940 --> 00:00:48.995
Maybe you can use abstract.

00:00:48.995 --> 00:00:53.090
So it becomes subject matter and it's an incomplete mutter the moment I

00:00:53.090 --> 00:00:58.535
modified the word that is an editor here because abstract example extends mission.

00:00:58.535 --> 00:01:00.740
So it is usually missions property.

00:01:00.740 --> 00:01:02.795
So again, the link that is 11,

00:01:02.795 --> 00:01:07.880
and it doesn't have any implementation in you if you are the person using the machine.

00:01:07.880 --> 00:01:09.680
So unicode implementation.

00:01:09.680 --> 00:01:11.825
So we don't need the object now.

00:01:11.825 --> 00:01:15.365
Okay, so here is a normal matter.

00:01:15.365 --> 00:01:18.335
So you're going to provide a message here.

00:01:18.335 --> 00:01:23.820
So the message from my daughter.

00:01:25.900 --> 00:01:29.300
All right, so the first tool,

00:01:29.300 --> 00:01:31.565
it can have abstract method,

00:01:31.565 --> 00:01:33.995
it can have show method.

00:01:33.995 --> 00:01:36.485
So here it extends mission rate.

00:01:36.485 --> 00:01:38.075
So using the same object,

00:01:38.075 --> 00:01:42.240
you can call the show method also.

00:01:42.430 --> 00:01:46.580
So now we can simply call it.

00:01:46.580 --> 00:01:50.720
So this is at Madonna and message from shore matter.

00:01:50.720 --> 00:01:52.610
Okay, Pretty cool, right?

00:01:52.610 --> 00:01:55.520
But you might think,

00:01:55.520 --> 00:02:00.410
I don't want to print this particular message.

00:02:00.410 --> 00:02:03.125
Since it's a normal matter,

00:02:03.125 --> 00:02:04.955
you can override it.

00:02:04.955 --> 00:02:09.335
You can either your own implementation like wide show.

00:02:09.335 --> 00:02:11.675
And here instead of this,

00:02:11.675 --> 00:02:13.920
you can provide something else.

00:02:15.370 --> 00:02:22.290
So message from abstract example shown matter.

00:02:23.050 --> 00:02:27.335
So normally what happen when I call the object dot show method?

00:02:27.335 --> 00:02:32.100
This will be called, but since I will override the method here,

00:02:32.290 --> 00:02:37.775
only this much, this particular statement will print.

00:02:37.775 --> 00:02:39.245
Okay, let me run it.

00:02:39.245 --> 00:02:44.060
See, this is the ad motor and message from upside, the example shown.

00:02:44.060 --> 00:02:46.040
So basically what happened?

00:02:46.040 --> 00:02:48.725
You can have and methods,

00:02:48.725 --> 00:02:50.630
you can directly use them.

00:02:50.630 --> 00:02:55.325
Or in case if you want to update our override the method,

00:02:55.325 --> 00:02:57.950
you can do that.

00:02:57.950 --> 00:02:59.420
Right?

00:02:59.420 --> 00:03:06.170
And next thing, so you can't initialize abstract class,

00:03:06.170 --> 00:03:08.085
we know that and contract out

00:03:08.085 --> 00:03:11.540
that this just simple example we discussed before this section, right?

00:03:11.540 --> 00:03:12.845
So we can go to the next one.

00:03:12.845 --> 00:03:15.065
So can have static method.

00:03:15.065 --> 00:03:19.085
Okay? So we tried abstract method,

00:03:19.085 --> 00:03:22.190
we tried normal method.

00:03:22.190 --> 00:03:25.940
Let's try abstract method, also, static modality.

00:03:25.940 --> 00:03:28.730
So create a static method, static,

00:03:28.730 --> 00:03:34.450
wide static method, name and the matter as a static method.

00:03:34.450 --> 00:03:36.835
And here I'm going to provide

00:03:36.835 --> 00:03:47.570
a message from static midterm.

00:03:48.210 --> 00:03:50.020
Okay?

00:03:50.020 --> 00:03:54.430
So since the abstract example extense machine,

00:03:54.430 --> 00:03:56.050
it can share all the properties.

00:03:56.050 --> 00:03:58.525
I think this is a part of inheritance.

00:03:58.525 --> 00:04:04.630
So we could have finished inheritance and then we came back to section.

00:04:04.630 --> 00:04:06.460
But anyway, it's okay.

00:04:06.460 --> 00:04:08.500
Just try to understand it right now.

00:04:08.500 --> 00:04:11.835
So we're going to want the inheritance in the next topic.

00:04:11.835 --> 00:04:14.390
Okay, So I have a static method,

00:04:14.390 --> 00:04:16.280
so you can directly use it.

00:04:16.280 --> 00:04:21.005
How we're going to do that OBJ dot static method.

00:04:21.005 --> 00:04:23.930
And now we can run the core here.

00:04:23.930 --> 00:04:27.080
So I can see this.tab mater, the start.

00:04:27.080 --> 00:04:30.890
I mean message from abstract example show matter which is overwritten here.

00:04:30.890 --> 00:04:33.485
And message from static method.

00:04:33.485 --> 00:04:34.670
Got it.

00:04:34.670 --> 00:04:36.320
So everything is clear.

00:04:36.320 --> 00:04:39.110
But you might observe what is the problem.

00:04:39.110 --> 00:04:41.885
The white shoe static method,

00:04:41.885 --> 00:04:44.930
both are doing the same thing, sprinting some statements.

00:04:44.930 --> 00:04:48.660
But what exactly is the difference between these two?

00:04:49.150 --> 00:04:51.440
You might ask, right?

00:04:51.440 --> 00:04:52.175
Okay.

00:04:52.175 --> 00:04:55.560
And I'm going to tell you that in the next video. Thank you.
