WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.875
Hello everyone. Welcome back.

00:00:01.875 --> 00:00:05.115
As we discussed, we're going to talk about the boxing operation here.

00:00:05.115 --> 00:00:09.840
So boxing means primitive wrapper class object.

00:00:09.840 --> 00:00:10.395
Okay?

00:00:10.395 --> 00:00:12.750
So let me create a new class.

00:00:12.750 --> 00:00:20.715
Okay, so here is wearing boxing example x2.

00:00:20.715 --> 00:00:25.330
And I'm going to create a main method.

00:00:26.440 --> 00:00:32.000
So our logic is primitive.

00:00:32.000 --> 00:00:38.465
For example, primitive wrapper.

00:00:38.465 --> 00:00:42.560
The first thing, I'll have primitive value, for example,

00:00:42.560 --> 00:00:49.625
int x is equal to, okay?

00:00:49.625 --> 00:00:50.675
We are good to go.

00:00:50.675 --> 00:00:55.790
So how we can convert this x into m integer wrapper class,

00:00:55.790 --> 00:00:57.020
which means an object.

00:00:57.020 --> 00:00:58.715
This is not an object.

00:00:58.715 --> 00:01:02.405
Datatype, integer datatype.

00:01:02.405 --> 00:01:04.130
So the way we need to convert,

00:01:04.130 --> 00:01:07.760
so what is the corresponding wrapper class?

00:01:07.760 --> 00:01:13.770
It is integer, integer a.

00:01:15.190 --> 00:01:19.310
So what we can do, we need to use the method inside

00:01:19.310 --> 00:01:27.420
the wrapper class integer dot value of and you can provide the X here.

00:01:30.190 --> 00:01:35.250
So what happen now? So here what will happen?

00:01:35.470 --> 00:01:44.210
Converting to that is what happening here.

00:01:44.210 --> 00:01:47.179
But this is actually,

00:01:47.179 --> 00:01:49.100
you don't need to follow this pattern

00:01:49.100 --> 00:01:52.070
anymore because we have a different way of handling it.

00:01:52.070 --> 00:01:55.280
For example, you could add something like this, right?

00:01:55.280 --> 00:02:00.890
So now what you can do use integer b is equal to.

00:02:00.890 --> 00:02:02.750
So what does it mean?

00:02:02.750 --> 00:02:05.675
The conversion, the boxing, auto-boxing.

00:02:05.675 --> 00:02:06.740
Okay.

00:02:06.740 --> 00:02:15.545
The compiler, compiler will do dot value of,

00:02:15.545 --> 00:02:17.375
I mean, still it is happening,

00:02:17.375 --> 00:02:18.680
but we don't have to do it.

00:02:18.680 --> 00:02:21.920
The compiler itself, it's automatically do the job for us.

00:02:21.920 --> 00:02:22.505
Okay?

00:02:22.505 --> 00:02:24.335
Let me print each and everything.

00:02:24.335 --> 00:02:30.300
So let me print the first one is a primitive.

00:02:32.650 --> 00:02:39.800
And the value is going to be X-rayed and then paste it on more time and more time.

00:02:39.800 --> 00:02:44.490
And second is rapper

00:02:48.490 --> 00:02:53.285
and wrapper integer.

00:02:53.285 --> 00:02:55.010
Second, third, both are same,

00:02:55.010 --> 00:02:57.950
but the way how we are converting that is a different way.

00:02:57.950 --> 00:03:04.850
So a and a,

00:03:04.850 --> 00:03:07.820
and here it's going to be b.

00:03:07.820 --> 00:03:13.230
So now I'm going to run the code to show you what is the outcome of it.

00:03:17.110 --> 00:03:22.470
See the primitive is 10 and the rapper value.

00:03:22.900 --> 00:03:26.510
So the wrapper value is 10,

00:03:26.510 --> 00:03:28.175
and the representation also dead.

00:03:28.175 --> 00:03:30.980
So the second and the a and B,

00:03:30.980 --> 00:03:33.300
both of them are object.

00:03:33.880 --> 00:03:37.220
But this is an integer, it's not the object.

00:03:37.220 --> 00:03:42.125
Okay? The other point primitive cannot hold any.

00:03:42.125 --> 00:03:47.855
Nonetheless, right here, let me try that into y is equal to null.

00:03:47.855 --> 00:03:55.100
What happened? We got an error because it's just not possible in primitive type.

00:03:55.100 --> 00:03:56.780
Okay, so what I'm gonna do,

00:03:56.780 --> 00:04:00.275
I'm going to use a wrapper class. In here.

00:04:00.275 --> 00:04:03.860
Y is equal to null.

00:04:03.860 --> 00:04:06.770
Because I have homes,

00:04:06.770 --> 00:04:08.540
it can hold the null value.

00:04:08.540 --> 00:04:12.930
That is the advantage of using wrapper classes.

00:04:13.120 --> 00:04:17.240
Sudden the next video we're going to talk about the unboxing here,

00:04:17.240 --> 00:04:23.075
what we did primitive integer wrapper class.

00:04:23.075 --> 00:04:25.070
Okay? So if you want to give it a try,

00:04:25.070 --> 00:04:27.245
you can try something else also.

00:04:27.245 --> 00:04:31.805
Like double isn't primitive type.

00:04:31.805 --> 00:04:39.140
A1 is equal 10.5 and d here.

00:04:39.140 --> 00:04:48.065
So I want to convert this into a hybrid class or what is the appropriate,

00:04:48.065 --> 00:04:49.340
the upper-class, it's double,

00:04:49.340 --> 00:04:51.830
double a2 is equal.

00:04:51.830 --> 00:04:58.040
You can directly provide A1 or else you can use double-dot value of that is also working.

00:04:58.040 --> 00:04:58.685
Okay.

00:04:58.685 --> 00:05:04.980
So let's see next. In the next video we'll talk about the unboxing example thing.
