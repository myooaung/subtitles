WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.675
Hello everyone. Welcome back.

00:00:03.675 --> 00:00:06.315
So here we're going to talk about the another operator.

00:00:06.315 --> 00:00:11.980
You can call them as a comparison operator because which will check the combat mission.

00:00:12.590 --> 00:00:16.005
Or you can call them as a relational operator.

00:00:16.005 --> 00:00:18.180
So what is compassion means?

00:00:18.180 --> 00:00:20.520
For example, you, how a and b.

00:00:20.520 --> 00:00:22.890
You can check whether a is equal to b.

00:00:22.890 --> 00:00:24.930
So a and B both are same.

00:00:24.930 --> 00:00:29.250
You can check that under the same time you can check not equal to

00:00:29.250 --> 00:00:34.125
also that there are six operators available and their comparison or relational operator.

00:00:34.125 --> 00:00:40.760
So let me create another Java file which will check

00:00:40.760 --> 00:00:48.720
combat is our relational relational operator example.

00:00:49.180 --> 00:00:52.040
So let me save it in the first place,

00:00:52.040 --> 00:00:54.245
Control S and save it.

00:00:54.245 --> 00:00:56.510
Collation of re-examined our Java.

00:00:56.510 --> 00:01:00.814
Okay, so now we have the main method ready so we can start the implementation.

00:01:00.814 --> 00:01:02.960
Okay, So what are the six operator?

00:01:02.960 --> 00:01:05.750
First, we can check whether both are equal.

00:01:05.750 --> 00:01:11.460
And second, whether or not equal or greater than

00:01:11.770 --> 00:01:21.215
or less than or greater than or equal to 0, less than or equal.

00:01:21.215 --> 00:01:24.275
This is all auto, used for mathematical purpose.

00:01:24.275 --> 00:01:26.885
Right? So what equal we'll do?

00:01:26.885 --> 00:01:32.810
Equal will condense true if both the left and right side are equal.

00:01:32.810 --> 00:01:35.495
Guard when you're using if condition.

00:01:35.495 --> 00:01:37.820
I mean, when you're using the equal,

00:01:37.820 --> 00:01:42.605
which will take one left side argument and one writes that argument.

00:01:42.605 --> 00:01:44.645
If both are same,

00:01:44.645 --> 00:01:47.780
which will return a true and not equal, we will do the opposite.

00:01:47.780 --> 00:01:50.900
It will check whether both are not equal and greater

00:01:50.900 --> 00:01:54.845
than if I have a 10 and 15 silage obtaining greater than 15,

00:01:54.845 --> 00:01:56.945
which will return a false.

00:01:56.945 --> 00:01:59.270
The similar way we can use all of them.

00:01:59.270 --> 00:02:02.385
So instead of talking about H and everything,

00:02:02.385 --> 00:02:04.510
Let's talk about it in a simple example.

00:02:04.510 --> 00:02:14.545
Basically all of them are used in control treatments like if l scenarios, right?

00:02:14.545 --> 00:02:17.230
So let's have two numbers to check that.

00:02:17.230 --> 00:02:22.420
So int num one is equal to 10,

00:02:22.420 --> 00:02:28.720
and let's have int num two is equal to like. Got it.

00:02:28.720 --> 00:02:30.145
So now what we're going to do,

00:02:30.145 --> 00:02:32.440
I'm going to print the data first.

00:02:32.440 --> 00:02:37.990
Let me go to system dot out, dot print LN.

00:02:37.990 --> 00:02:39.850
So here I'm just checking,

00:02:39.850 --> 00:02:41.050
let me put the conditioning here.

00:02:41.050 --> 00:02:44.250
So i'm, I'm gonna check num one.

00:02:44.250 --> 00:02:52.475
Now to use the plus to concatenate and open the brackets to check the condition.

00:02:52.475 --> 00:02:56.450
So num one and you reduce

00:02:56.450 --> 00:03:00.320
w equal because it's not a single equal to when you're using single equality,

00:03:00.320 --> 00:03:02.150
this becomes the assignment operator.

00:03:02.150 --> 00:03:03.470
I'm not doing the ASMM integration,

00:03:03.470 --> 00:03:05.270
am seeking the condition.

00:03:05.270 --> 00:03:08.105
Okay, so let's run it and see.

00:03:08.105 --> 00:03:10.595
So relational operator, right?

00:03:10.595 --> 00:03:14.945
See space, relational greater example, the Java.

00:03:14.945 --> 00:03:18.635
It's compile them. I compiled,

00:03:18.635 --> 00:03:20.300
so I'm going to run it right now.

00:03:20.300 --> 00:03:22.850
So what's happening here is returning false, okay?

00:03:22.850 --> 00:03:25.620
And, and to provide some indications,

00:03:26.300 --> 00:03:30.630
if you save it again and go back and recompile it again.

00:03:31.300 --> 00:03:34.910
So c num one,

00:03:34.910 --> 00:03:36.650
num two is a false.

00:03:36.650 --> 00:03:39.605
Why it is false because pneumonia is 10.

00:03:39.605 --> 00:03:41.720
So 10 equal to 50,

00:03:41.720 --> 00:03:45.410
which is wrong. It is not false.

00:03:45.410 --> 00:03:49.580
Okay, so let's talk about not equal to,

00:03:49.580 --> 00:03:52.110
I can do the same thing for not equal.

00:03:53.110 --> 00:03:58.050
Okay, so here I'm going to use non-tech would,

00:03:58.060 --> 00:04:02.285
of course, which will return a true because both are not equal.

00:04:02.285 --> 00:04:07.440
Okay, Let's compare them and see whether the outcome is what we expect.

00:04:08.800 --> 00:04:10.535
True.

00:04:10.535 --> 00:04:14.330
Because I'm taking, I'm asking whether both numbers are not equal.

00:04:14.330 --> 00:04:15.785
Yes, both are not equal.

00:04:15.785 --> 00:04:19.745
So it will return a true. Correct.

00:04:19.745 --> 00:04:22.175
So next thing, kinda check it a greater than,

00:04:22.175 --> 00:04:23.795
okay, I can do that.

00:04:23.795 --> 00:04:27.230
Just copy the entire code and paste it again.

00:04:27.230 --> 00:04:32.825
So num one greater than num two.

00:04:32.825 --> 00:04:35.165
So what does the operator greater than?

00:04:35.165 --> 00:04:38.225
So I'm checking whether number 1 is greater than number 2.

00:04:38.225 --> 00:04:40.955
So 10 greater than 50.

00:04:40.955 --> 00:04:42.320
It is not true, right?

00:04:42.320 --> 00:04:47.060
It is fast because these num to use greater than num one.

00:04:47.060 --> 00:04:48.980
So which will return a false?

00:04:48.980 --> 00:04:49.910
Correct.

00:04:49.910 --> 00:04:51.950
So let's go back and compare,

00:04:51.950 --> 00:04:55.010
I mean, compile them underneath it again.

00:04:55.010 --> 00:04:56.495
Right?

00:04:56.495 --> 00:05:03.200
Yeah, it is a false where the condition is false because 5710 is not greater than 50,

00:05:03.200 --> 00:05:06.125
right? So let's copy.

00:05:06.125 --> 00:05:10.190
And now we're going to do the list then check now.

00:05:10.190 --> 00:05:14.015
So what happened now? Can you guess?

00:05:14.015 --> 00:05:16.205
Now it will check.

00:05:16.205 --> 00:05:17.930
Now I'm one less than 50,

00:05:17.930 --> 00:05:19.940
I'm in 10 less than two? Yes, exactly.

00:05:19.940 --> 00:05:22.445
It is true because 10 is less than 50.

00:05:22.445 --> 00:05:25.250
So let's go back and combine them.

00:05:25.250 --> 00:05:28.700
And then it again, we are expecting true.

00:05:28.700 --> 00:05:32.435
Of course we got to true. So what else we can check?

00:05:32.435 --> 00:05:37.955
So why do we need to use greater than or equal to or less than or equal to.

00:05:37.955 --> 00:05:38.960
Okay?

00:05:38.960 --> 00:05:44.150
So I'm gonna do something like let me copy this and paste it here.

00:05:44.150 --> 00:05:47.855
So I'm taking number 1,

00:05:47.855 --> 00:05:51.395
less than or equal to 10.

00:05:51.395 --> 00:05:56.990
So less than, I'm telling them around less than 10.

00:05:56.990 --> 00:05:58.940
So what happens, so 10,

00:05:58.940 --> 00:06:01.350
less than 10, what will happen?

00:06:01.950 --> 00:06:04.700
Will it return true or false?

00:06:04.700 --> 00:06:07.640
It will return a false. Let's see why.

00:06:07.640 --> 00:06:11.375
So let me compile it again and I'm gonna run it now.

00:06:11.375 --> 00:06:13.085
We should too now false.

00:06:13.085 --> 00:06:15.395
The reason is I'm taking less than 10.

00:06:15.395 --> 00:06:19.355
10 is not less than ten because it is equal to ten.

00:06:19.355 --> 00:06:20.750
So in those kind of scenarios,

00:06:20.750 --> 00:06:22.445
we need to use equal.

00:06:22.445 --> 00:06:24.245
So now what will happen?

00:06:24.245 --> 00:06:27.410
So 10 less than or equal to 10.

00:06:27.410 --> 00:06:30.125
I'm taking you by that 10 is less than or equal than one,

00:06:30.125 --> 00:06:32.120
or equal to one.

00:06:32.120 --> 00:06:33.335
So let's go back.

00:06:33.335 --> 00:06:35.360
Now. We'd have heard anna true,

00:06:35.360 --> 00:06:39.980
because it is equal to 10. See this true?

00:06:39.980 --> 00:06:43.700
So this is how you need to use the operators.

00:06:43.700 --> 00:06:48.695
And these are the six operators available under relational.

00:06:48.695 --> 00:06:52.290
Okay, So let's see to the next video. Thank you.
