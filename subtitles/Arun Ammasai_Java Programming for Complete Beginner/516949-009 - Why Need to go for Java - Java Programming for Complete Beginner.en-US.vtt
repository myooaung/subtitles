WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.240
Hello everyone, Welcome back.

00:00:03.240 --> 00:00:06.240
So why did they need to go for Java?

00:00:06.240 --> 00:00:08.580
So what are the main features which we discussed you a

00:00:08.580 --> 00:00:11.145
few points in the earlier videos, right?

00:00:11.145 --> 00:00:16.840
So now we talk about some important topics why people need to go for.

00:00:18.470 --> 00:00:22.229
The first robust.

00:00:22.229 --> 00:00:23.820
So robust means.

00:00:23.820 --> 00:00:24.840
What does it robust?

00:00:24.840 --> 00:00:30.495
See, it is very reliable programming language, right?

00:00:30.495 --> 00:00:35.560
The reason is, if you're writing a program before you executing the program,

00:00:35.560 --> 00:00:38.285
we'll do lot of breaches.

00:00:38.285 --> 00:00:41.690
So if you code contains some compilation issues,

00:00:41.690 --> 00:00:45.680
it will not allowed to run correctly.

00:00:45.680 --> 00:00:47.840
So that is an example for a competitor.

00:00:47.840 --> 00:00:51.035
Okay, So you are writing a code and you have some errors in it.

00:00:51.035 --> 00:00:52.850
Believe able to run the code.

00:00:52.850 --> 00:00:57.240
We should not, we should not allow the code to execute.

00:00:57.670 --> 00:01:01.340
The comparable takes the responsibility of

00:01:01.340 --> 00:01:04.715
checking whether the program has any errors or not.

00:01:04.715 --> 00:01:08.480
It's a kind of preaching runtime exception is different but compare them.

00:01:08.480 --> 00:01:10.670
Exception, it's different, right?

00:01:10.670 --> 00:01:12.440
We'll talk about them later.

00:01:12.440 --> 00:01:14.960
And what are the other important things?

00:01:14.960 --> 00:01:17.870
Java has-a, garbage collection,

00:01:17.870 --> 00:01:21.710
an exception, and exception handling and memory allocation.

00:01:21.710 --> 00:01:23.735
So what is the garbage collections?

00:01:23.735 --> 00:01:27.140
So you're working with a lot of objects in Java, okay?

00:01:27.140 --> 00:01:29.945
So once the job is done for a particular object,

00:01:29.945 --> 00:01:31.655
what happened to the object?

00:01:31.655 --> 00:01:34.190
Someone has to be there to take care of the object, right?

00:01:34.190 --> 00:01:39.020
So your job is done. You can terminate yourself or your work is done.

00:01:39.020 --> 00:01:42.680
I will dominate the virtual object set garbage collector will take

00:01:42.680 --> 00:01:47.765
that particular responsibility of destroying the US to objects.

00:01:47.765 --> 00:01:50.180
At the same time, unused objects also.

00:01:50.180 --> 00:01:52.775
And exception.

00:01:52.775 --> 00:01:55.760
The way how we are handling the exception whenever we

00:01:55.760 --> 00:01:58.520
write a program that it's always a possibility,

00:01:58.520 --> 00:02:01.384
we might end up with an exception.

00:02:01.384 --> 00:02:03.620
In case if there's an exception,

00:02:03.620 --> 00:02:05.600
how do I want to handle that?

00:02:05.600 --> 00:02:09.995
So that is the another important thing and memory allocation.

00:02:09.995 --> 00:02:13.520
So we are working with a lot of variables and we are working with a lot of objects.

00:02:13.520 --> 00:02:16.895
So each and everything has been stored in a separate memory location, right?

00:02:16.895 --> 00:02:21.450
So how would the memory has been allocated to each and every type?

00:02:21.550 --> 00:02:24.920
And the next one, secure.

00:02:24.920 --> 00:02:27.035
Of course it has to be secure.

00:02:27.035 --> 00:02:29.405
So one important thing about Java.

00:02:29.405 --> 00:02:34.535
So like see, in Java we don't have pointers.

00:02:34.535 --> 00:02:39.260
Okay, the point is leads to exception at runtime. Great.

00:02:39.260 --> 00:02:45.035
And also the C language which will run under direct operating system.

00:02:45.035 --> 00:02:47.480
If you're, if you see new automation,

00:02:47.480 --> 00:02:49.490
it will darker and into your mission.

00:02:49.490 --> 00:02:51.530
But Java is not like that.

00:02:51.530 --> 00:02:54.065
You'll install JDK and JRE.

00:02:54.065 --> 00:03:01.220
Jre needs to be pleased to execute the program because the content,

00:03:01.220 --> 00:03:04.480
the JVM, JVM is a Virtual Machine, not a direct measure.

00:03:04.480 --> 00:03:10.460
So you are running inside an operating system and you have another virtual machine.

00:03:10.460 --> 00:03:12.065
You need to execute your programs.

00:03:12.065 --> 00:03:13.460
But it's not like that.

00:03:13.460 --> 00:03:19.070
It little darker and against your hardware operating system and the distributor.

00:03:19.070 --> 00:03:20.900
So what is distributed means?

00:03:20.900 --> 00:03:26.300
Distributed among sharing along with a lot of different people or different network.

00:03:26.300 --> 00:03:28.400
Writing a code and keeping it with yourself,

00:03:28.400 --> 00:03:30.410
It's not going to help to anybody.

00:03:30.410 --> 00:03:35.285
So write a code and it has to be shared with the people who are all the same network.

00:03:35.285 --> 00:03:37.715
Or you can simply say the Internet.

00:03:37.715 --> 00:03:40.775
So autonomies that one of the important example,

00:03:40.775 --> 00:03:43.535
remote method invocation, okay,

00:03:43.535 --> 00:03:49.610
using sockets and AGB application developers service and deploy it in somewhere.

00:03:49.610 --> 00:03:53.360
So whoever has access or who were

00:03:53.360 --> 00:03:58.610
available on the same network or whoever connector into the internet,

00:03:58.610 --> 00:04:01.084
they can access those services.

00:04:01.084 --> 00:04:03.809
For example, you have humility.

00:04:03.809 --> 00:04:06.580
You, when you're accessing from your laptop,

00:04:06.580 --> 00:04:10.330
you are accessing from your mobile, your personal desktop.

00:04:10.330 --> 00:04:16.254
But everywhere you are able to access because that is centralized and it is distributor.

00:04:16.254 --> 00:04:23.815
So wherever you can simply access that and multi-track.

00:04:23.815 --> 00:04:27.220
Okay, so Java is the major concept in Java.

00:04:27.220 --> 00:04:28.765
It's multithreading. Okay.

00:04:28.765 --> 00:04:33.925
So it'll allow us to do multiple processes at the same time, correct?

00:04:33.925 --> 00:04:34.330
Yes.

00:04:34.330 --> 00:04:38.230
Simple work done by one person is different,

00:04:38.230 --> 00:04:43.810
the same what ten by 10% is different because one person takes ten minutes, right?

00:04:43.810 --> 00:04:46.470
But if the same job then poisonous,

00:04:46.470 --> 00:04:52.715
contributing to gooder, that task will finish in one minute grid.

00:04:52.715 --> 00:04:55.250
So the parallel execution, multi-threaded execution.

00:04:55.250 --> 00:04:58.505
So running in a single code is running in multi record is different.

00:04:58.505 --> 00:05:02.675
Of course, the CPU, memory utilization.

00:05:02.675 --> 00:05:06.095
And portable. As we already discussed,

00:05:06.095 --> 00:05:11.540
portable, you can write once and you can execute anywhere in the world.

00:05:11.540 --> 00:05:14.450
All we need is a platform and

00:05:14.450 --> 00:05:19.085
GRE in a place that is a concept called platform independent.

00:05:19.085 --> 00:05:20.855
Right?

00:05:20.855 --> 00:05:24.600
Let's see each other next video with the another topic.
