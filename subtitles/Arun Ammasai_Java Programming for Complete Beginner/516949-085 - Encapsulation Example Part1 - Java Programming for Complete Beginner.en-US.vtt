WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.430
Hello everyone, Welcome back.

00:00:02.430 --> 00:00:04.995
So let me create a simple example here.

00:00:04.995 --> 00:00:07.110
So I'm going to create a new class,

00:00:07.110 --> 00:00:14.910
so encapsulation example exam.

00:00:14.910 --> 00:00:17.190
Oh, okay.

00:00:17.190 --> 00:00:20.985
So first thing, as I mentioned,

00:00:20.985 --> 00:00:23.370
the encapsulation is nothing but it contains

00:00:23.370 --> 00:00:26.280
the data members and the medicine binding data together, right?

00:00:26.280 --> 00:00:28.390
So what is it mean?

00:00:29.330 --> 00:00:31.950
Just take a look at this particular data.

00:00:31.950 --> 00:00:37.725
So I have int x

00:00:37.725 --> 00:00:43.490
and string name, and I have a metal.

00:00:43.490 --> 00:00:45.630
So wide.

00:00:46.690 --> 00:00:49.475
Statistic. Look at this particular code.

00:00:49.475 --> 00:00:51.620
This is a simple example for encapsulation.

00:00:51.620 --> 00:00:55.310
See I have a class which contains data members.

00:00:55.310 --> 00:00:57.665
The members means variables.

00:00:57.665 --> 00:00:59.150
Keep that in mind. I keep telling that,

00:00:59.150 --> 00:01:00.935
but keep it in mind.

00:01:00.935 --> 00:01:05.930
And void add recent reading but that metadata,

00:01:05.930 --> 00:01:08.810
metadata, So contain all of them.

00:01:08.810 --> 00:01:13.220
Binder together inside a class, which Catherine example.

00:01:13.220 --> 00:01:16.115
This entire stuff is called as the encapsulation.

00:01:16.115 --> 00:01:18.560
So now you know that the total encapsulation,

00:01:18.560 --> 00:01:25.925
we cannot write any what we're going to any program, right?

00:01:25.925 --> 00:01:28.880
So what I'm gonna do, I'm gonna delete this.

00:01:28.880 --> 00:01:29.660
The first thing.

00:01:29.660 --> 00:01:35.255
I'm going to create a new class which contains some, some information.

00:01:35.255 --> 00:01:40.595
So like employee class here,

00:01:40.595 --> 00:01:51.200
employee so which contains string name.

00:01:51.200 --> 00:01:54.860
And I don't want to modify a probability data to here, okay?

00:01:54.860 --> 00:02:00.695
But the one thing that you mentioned that data members as private.

00:02:00.695 --> 00:02:04.040
So when you create something as a private,

00:02:04.040 --> 00:02:07.820
it cannot be accessed outside of the class.

00:02:07.820 --> 00:02:10.595
Okay, so let me show you that what I meant.

00:02:10.595 --> 00:02:12.710
So here is the encapsulation, okay,

00:02:12.710 --> 00:02:18.980
once again, so here's an example, right?

00:02:18.980 --> 00:02:21.995
So let me write a main method, sorry.

00:02:21.995 --> 00:02:32.750
Main mater here, sorry, employee, employee, employee.

00:02:32.750 --> 00:02:35.585
So I create an object here for the employee.

00:02:35.585 --> 00:02:39.740
It's tried to access D, E.

00:02:39.740 --> 00:02:43.895
What is the name here? So I have a name here, rate.

00:02:43.895 --> 00:02:48.440
So what will happen when I try to access the name here?

00:02:48.440 --> 00:02:51.635
I got an adder because it's a private.

00:02:51.635 --> 00:02:55.115
It is not visible to the other classes.

00:02:55.115 --> 00:02:56.360
Since it's a private,

00:02:56.360 --> 00:02:57.560
it can access it.

00:02:57.560 --> 00:03:05.480
For example, if I have a material world wide AED.

00:03:05.480 --> 00:03:09.860
So here you can access system name.

00:03:09.860 --> 00:03:12.530
So internally you can access the private members.

00:03:12.530 --> 00:03:15.245
It's not accessible outside of the class.

00:03:15.245 --> 00:03:16.100
Okay?

00:03:16.100 --> 00:03:20.040
So what will happen if I removed or private?

00:03:20.170 --> 00:03:27.020
This adder will be gone happening here.

00:03:27.020 --> 00:03:33.980
Okay, So I need to provide that does area syntax error.

00:03:33.980 --> 00:03:36.690
So in order to provide,

00:03:39.130 --> 00:03:44.915
so this is how we provide RLC can shrink rate.

00:03:44.915 --> 00:03:48.755
So a string S is equal to epsilon.

00:03:48.755 --> 00:03:53.540
So when you remove the private, you should be able to access.

00:03:53.540 --> 00:04:00.545
But the encapsulation is some way of giving some restrictions, right?

00:04:00.545 --> 00:04:04.140
So I want to create,

00:04:06.130 --> 00:04:12.065
sorry, I said private, right?

00:04:12.065 --> 00:04:14.900
And I want to create a setter and getter matter.

00:04:14.900 --> 00:04:18.860
And you can type manually or else if you're using Eclipse ID,

00:04:18.860 --> 00:04:22.280
you can go to source and you can create getters and setters.

00:04:22.280 --> 00:04:26.450
And you can choose name and you can generate it automatically generate and get us, etc.

00:04:26.450 --> 00:04:28.430
Just take a look at the code.

00:04:28.430 --> 00:04:31.205
My name is a private member,

00:04:31.205 --> 00:04:34.475
but inside I created two methods. It is a public.

00:04:34.475 --> 00:04:36.350
They can access the name.

00:04:36.350 --> 00:04:42.725
So one is for receiving the name and address for setting the name.

00:04:42.725 --> 00:04:43.520
Correct.

00:04:43.520 --> 00:04:45.470
So I cannot directly access this one,

00:04:45.470 --> 00:04:48.320
but I can access through these names, right?

00:04:48.320 --> 00:04:50.735
So let's go back to our example here.

00:04:50.735 --> 00:04:54.660
So let's try to get him.

00:04:54.660 --> 00:04:57.550
So let me print it. So what do you get?

00:04:57.550 --> 00:05:00.205
Name is written. It, return a string, write string.

00:05:00.205 --> 00:05:02.845
Name is equal t.

00:05:02.845 --> 00:05:06.530
So now I can print the name.

00:05:08.790 --> 00:05:11.320
So name.

00:05:11.320 --> 00:05:16.430
So let's save it and I'm going to run it now.

00:05:16.440 --> 00:05:18.400
Okay, So what happened?

00:05:18.400 --> 00:05:22.400
Why it is why it is null?

00:05:22.710 --> 00:05:26.260
The reason I just received the data,

00:05:26.260 --> 00:05:29.965
but I did not say that data because by default the data is empty.

00:05:29.965 --> 00:05:32.125
If you want to receive the data.

00:05:32.125 --> 00:05:34.330
You can receive using GET method,

00:05:34.330 --> 00:05:37.290
but we need to send the data first.

00:05:37.290 --> 00:05:39.170
I can modify the data. So for example,

00:05:39.170 --> 00:05:41.600
I'm going to eat that setName.

00:05:41.600 --> 00:05:45.840
So here I'm going to pass something like John.

00:05:46.030 --> 00:05:51.090
So now what will happen when you run this particular piece of code?

00:05:51.370 --> 00:05:53.525
You will get John no,

00:05:53.525 --> 00:05:56.270
because before retrieving them,

00:05:56.270 --> 00:05:58.610
I just sit the name.

00:05:58.610 --> 00:06:00.200
I mean, add the data,

00:06:00.200 --> 00:06:01.595
then retrieving it initially,

00:06:01.595 --> 00:06:05.975
I received the data without data, manipulate the data.

00:06:05.975 --> 00:06:06.650
Okay?

00:06:06.650 --> 00:06:08.765
So this is an example for here,

00:06:08.765 --> 00:06:11.180
we can read and also we can write.

00:06:11.180 --> 00:06:14.015
So this is an example for encapsulation with the read and write.

00:06:14.015 --> 00:06:18.570
Okay, so next example we will talk about read-only and write only.
