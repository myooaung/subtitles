WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.740
Hello everyone. Welcome back.

00:00:01.740 --> 00:00:06.420
Let's jump into our Eclipse ID and then we'll start.

00:00:06.420 --> 00:00:12.735
God, how do see an example of simple constructor?

00:00:12.735 --> 00:00:17.385
Okay, so I'm going to create a new class inside my folder.

00:00:17.385 --> 00:00:20.085
I mean package glass.

00:00:20.085 --> 00:00:25.540
So what we're going to discuss simple constructor.

00:00:26.480 --> 00:00:30.310
Okay. So let's finish,

00:00:30.310 --> 00:00:36.305
I guess and now we got let me close the previous ones. Okay.

00:00:36.305 --> 00:00:38.585
Just take a look at the code.

00:00:38.585 --> 00:00:39.980
Correct?

00:00:39.980 --> 00:00:41.690
So the first rule,

00:00:41.690 --> 00:00:43.835
if you're writing a constructor,

00:00:43.835 --> 00:00:50.570
it must be same as your class name and it does not have any return type.

00:00:50.570 --> 00:00:52.550
Okay, let me write a simple example,

00:00:52.550 --> 00:00:53.795
I simpler method, okay?

00:00:53.795 --> 00:00:56.735
So wide ad and it contains,

00:00:56.735 --> 00:00:58.820
this is a simple example for a method.

00:00:58.820 --> 00:01:00.590
And as I mentioned, the concept of

00:01:00.590 --> 00:01:04.685
pretty much similar Laika matter, but small difference.

00:01:04.685 --> 00:01:07.355
As I mentioned, there is no return type.

00:01:07.355 --> 00:01:09.230
And what is the name?

00:01:09.230 --> 00:01:12.660
It must be same as class name, okay, replace that.

00:01:14.650 --> 00:01:16.790
That's all.

00:01:16.790 --> 00:01:19.490
This is our first constructor.

00:01:19.490 --> 00:01:22.669
This is, this is a default constructor.

00:01:22.669 --> 00:01:24.350
Got it.

00:01:24.350 --> 00:01:28.910
So, you know, you don't need to specifically mention

00:01:28.910 --> 00:01:31.370
this particular piece of code because even though if you are

00:01:31.370 --> 00:01:33.860
not providing this particular piece of code by default,

00:01:33.860 --> 00:01:40.760
every class contents is one default constructor. Okay?

00:01:40.760 --> 00:01:46.385
So let's create a main method to see how the matter is working.

00:01:46.385 --> 00:01:49.880
Okay, so what I'm gonna do is I'm going to create a main method here.

00:01:49.880 --> 00:01:51.860
So what is the rule,

00:01:51.860 --> 00:01:57.440
the concept or will be called while creating new object for the class, right?

00:01:57.440 --> 00:02:02.760
So what I'm gonna do, I'm gonna create six will be here like construct our color.

00:02:03.610 --> 00:02:06.200
Just to see a simple example. Okay?

00:02:06.200 --> 00:02:10.475
So normally how we will create an object for a class,

00:02:10.475 --> 00:02:11.990
okay, that is a rule, right?

00:02:11.990 --> 00:02:13.175
So your class name,

00:02:13.175 --> 00:02:16.025
which is nothing but simple constructor,

00:02:16.025 --> 00:02:17.675
and that is the object name.

00:02:17.675 --> 00:02:26.705
So OBJ is a simple constructor that is a syntax for creating a new object.

00:02:26.705 --> 00:02:28.850
Okay, So as I mentioned,

00:02:28.850 --> 00:02:33.260
the PPD when you initiate a new provide the new keyword,

00:02:33.260 --> 00:02:37.415
which will define which will actually create a new object.

00:02:37.415 --> 00:02:40.160
So when the contractor will be called,

00:02:40.160 --> 00:02:43.205
whenever the new keyword is used, right?

00:02:43.205 --> 00:02:47.780
So we are not going to do any logical things here because I just created a new object.

00:02:47.780 --> 00:02:50.705
That's all, I'm not even using it correctly.

00:02:50.705 --> 00:02:57.150
So let me run this and I'll show you what will happen.

00:02:57.940 --> 00:03:00.350
Have you seen what happened here?

00:03:00.350 --> 00:03:02.660
The concept that is called I'm not doing anything at all.

00:03:02.660 --> 00:03:07.370
For example, maybe I might have a method called add here,

00:03:07.370 --> 00:03:12.740
which will return hello

00:03:12.740 --> 00:03:19.830
message from Mitre and so on.

00:03:20.890 --> 00:03:27.815
Got it. So I have an army if I want to call this particular method INET, use this object.

00:03:27.815 --> 00:03:30.815
And then I can call the method.

00:03:30.815 --> 00:03:32.750
But here it's a kind of set data.

00:03:32.750 --> 00:03:36.905
I'm not, um, I'm not even calling the constructor because when you're,

00:03:36.905 --> 00:03:39.770
when you're using the new keyword,

00:03:39.770 --> 00:03:44.105
by default, it will create object for the class.

00:03:44.105 --> 00:03:46.850
So whatever the class you are providing after the New,

00:03:46.850 --> 00:03:49.655
this will automatically created. Do I need this?

00:03:49.655 --> 00:03:51.050
Not exactly.

00:03:51.050 --> 00:03:52.940
Basically we need a object.

00:03:52.940 --> 00:03:54.770
So neon simple constructor.

00:03:54.770 --> 00:03:57.920
Still it, it look at Maryland again.

00:03:57.920 --> 00:04:00.545
See contact that is called now.

00:04:00.545 --> 00:04:04.340
Okay? Or if you want to call the add method,

00:04:04.340 --> 00:04:09.185
that is a pretty much we know how to call that. So add method.

00:04:09.185 --> 00:04:11.675
And now we can call the method.

00:04:11.675 --> 00:04:13.655
I mean, we can run the code.

00:04:13.655 --> 00:04:17.990
So constructor is the first thing is called and then message commandment that.

00:04:17.990 --> 00:04:20.510
So basically why it is happening like that.

00:04:20.510 --> 00:04:23.075
You are doing some operation, okay?

00:04:23.075 --> 00:04:25.610
You want, you're initializing a class on,

00:04:25.610 --> 00:04:29.330
you're running a class, and you have multiple methods in it.

00:04:29.330 --> 00:04:33.500
Each and every method needs some data from the background.

00:04:33.500 --> 00:04:37.070
Okay, so there's a simple contract or what we'll do if we want to load

00:04:37.070 --> 00:04:41.150
something before you execute the methods you can use inside the constructor.

00:04:41.150 --> 00:04:43.685
So basically the contractor will load the data.

00:04:43.685 --> 00:04:48.725
All right, So that concept or we'll load the data and it will be ready state.

00:04:48.725 --> 00:04:50.705
So the next, the method will be called.

00:04:50.705 --> 00:04:52.220
So what the method will do,

00:04:52.220 --> 00:04:55.595
they will take the data from the constraint darker.

00:04:55.595 --> 00:04:57.995
Okay, so Canterbury is created the data right?

00:04:57.995 --> 00:04:59.870
When we create a new object.

00:04:59.870 --> 00:05:01.910
So obviously the additional methods,

00:05:01.910 --> 00:05:05.405
they can use that data to proceed further.

00:05:05.405 --> 00:05:09.754
All right, so in the next video we're going to talk about constructor.

00:05:09.754 --> 00:05:12.365
But again, it's a different kind of control because we just

00:05:12.365 --> 00:05:15.665
see now a default constructor work, right?

00:05:15.665 --> 00:05:18.320
So let's see now another example how

00:05:18.320 --> 00:05:21.455
it's exactly working when we have some data members in it.

00:05:21.455 --> 00:05:23.160
Thank you.
