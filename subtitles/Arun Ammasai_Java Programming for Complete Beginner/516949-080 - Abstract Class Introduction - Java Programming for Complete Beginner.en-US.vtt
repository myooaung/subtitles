WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.460
Hey everyone, welcome back.

00:00:04.130 --> 00:00:06.780
So buckle up.

00:00:06.780 --> 00:00:09.480
Because we are going to talk a bit abstract.

00:00:09.480 --> 00:00:12.465
So one of the key member of OBS concept.

00:00:12.465 --> 00:00:16.260
So first thing you need to know what is an upset.

00:00:16.260 --> 00:00:20.355
So you might have heard about the abstract drawings, right?

00:00:20.355 --> 00:00:23.925
You will not have that real implementation inside the drawing.

00:00:23.925 --> 00:00:27.570
You need to go deeper to understand abstract drawing.

00:00:27.570 --> 00:00:30.210
The similar way the abstraction is nothing

00:00:30.210 --> 00:00:33.555
but this is the process of hiding the implementation.

00:00:33.555 --> 00:00:35.490
Take an example.

00:00:35.490 --> 00:00:39.300
You are going to login into a Gmail, right?

00:00:39.300 --> 00:00:41.080
And you have a username and password,

00:00:41.080 --> 00:00:44.135
and you are providing us an impact on your click.

00:00:44.135 --> 00:00:47.405
You're clicking that the login button.

00:00:47.405 --> 00:00:48.740
What happened?

00:00:48.740 --> 00:00:51.530
Your e-mail inboxes have opening right?

00:00:51.530 --> 00:00:55.115
But when you click that login button,

00:00:55.115 --> 00:00:58.235
there is some plot is happening in the background.

00:00:58.235 --> 00:01:00.815
So it is taking your username and password

00:01:00.815 --> 00:01:03.710
and it will verify against the Google database.

00:01:03.710 --> 00:01:06.920
And if it is a valid user ID to ensure the inbox Adolphe,

00:01:06.920 --> 00:01:10.460
it will throw an error saying lake invalid username or password.

00:01:10.460 --> 00:01:13.760
That is called hiding the implementations to the user because these,

00:01:13.760 --> 00:01:15.680
it doesn't need to know the implementation.

00:01:15.680 --> 00:01:18.440
They need the end-product, right?

00:01:18.440 --> 00:01:21.050
But it doesn't mean it will not provide all the details,

00:01:21.050 --> 00:01:25.130
but still it section will provide the essential details to the user.

00:01:25.130 --> 00:01:26.795
And as I mentioned,

00:01:26.795 --> 00:01:29.150
the fundamental concept in Osaka, an abstract,

00:01:29.150 --> 00:01:31.520
okay, And the example scenario,

00:01:31.520 --> 00:01:34.085
login it on Gmail.

00:01:34.085 --> 00:01:37.550
And do abstract. I mean,

00:01:37.550 --> 00:01:40.460
do I achieve that abstraction? There are two ways to do that.

00:01:40.460 --> 00:01:42.320
One is upset less than secondly, the introverts.

00:01:42.320 --> 00:01:43.730
Introverts, we get a separate video.

00:01:43.730 --> 00:01:46.790
We'll talk about that. Here. We're going to talk about abstract class.

00:01:46.790 --> 00:01:49.505
Abstraction is a way of hiding the infant limitation.

00:01:49.505 --> 00:01:54.540
So I tearing abstraction to waste interface or object.

00:01:56.470 --> 00:02:00.485
So okay, I want to create abstract classes.

00:02:00.485 --> 00:02:04.935
So what are the rules and what are the points which I need to remember?

00:02:04.935 --> 00:02:09.040
Each and everything is a syntax in Java.

00:02:09.040 --> 00:02:11.335
You need to keep all this in depth in your mind.

00:02:11.335 --> 00:02:13.840
Okay, So everything has a rules. Similar way.

00:02:13.840 --> 00:02:16.525
Abstract rules. It must,

00:02:16.525 --> 00:02:19.165
must be declared as abstract class, where nuclei,

00:02:19.165 --> 00:02:23.110
when you creating class and the test, That's a normal class.

00:02:23.110 --> 00:02:25.090
But if you want to create an abstract class,

00:02:25.090 --> 00:02:28.990
an abstract class and the class name.

00:02:28.990 --> 00:02:35.125
And then it can have an abstract method and non abstract methods also.

00:02:35.125 --> 00:02:39.955
And you can initialize abstract class, which is wrong.

00:02:39.955 --> 00:02:42.640
Actually that was my mistake, is supposed to be.

00:02:42.640 --> 00:02:44.270
You can't.

00:02:51.190 --> 00:02:55.310
So you cannot initialize an abstract class,

00:02:55.310 --> 00:02:59.390
which means you cannot create an object for upset laughs,

00:02:59.390 --> 00:03:01.820
wow, what is this item?

00:03:01.820 --> 00:03:03.890
If I'm not able to create the object for my class,

00:03:03.890 --> 00:03:06.155
all I'm going to access my members and matters.

00:03:06.155 --> 00:03:08.330
That is the trickiest point enough sites,

00:03:08.330 --> 00:03:11.460
and we'll talk about that in a real-time example.

00:03:11.620 --> 00:03:13.970
You can have a constructor.

00:03:13.970 --> 00:03:15.170
We know what is the concept,

00:03:15.170 --> 00:03:17.420
that is what we discussed in the previous videos, right?

00:03:17.420 --> 00:03:19.880
And it can have static methods.

00:03:19.880 --> 00:03:22.495
And it can have final meant that.

00:03:22.495 --> 00:03:25.955
So basically I've shared class pretty much like a normal glass,

00:03:25.955 --> 00:03:28.865
but it must be declared as abstract.

00:03:28.865 --> 00:03:31.680
Lastly, the keyword abstract.

00:03:32.350 --> 00:03:36.770
Right? And one.

00:03:36.770 --> 00:03:38.210
Now another important thing,

00:03:38.210 --> 00:03:40.415
when you creating an abstract class,

00:03:40.415 --> 00:03:43.250
you cannot create an object for that,

00:03:43.250 --> 00:03:52.190
because you can call the up flat glass has an incomplete class.

00:03:52.190 --> 00:03:55.415
Basically an abstract, abstract method.

00:03:55.415 --> 00:03:57.905
I mean absurd class has contents abstract methods,

00:03:57.905 --> 00:04:00.725
abstract method, Mindy St. completed method.

00:04:00.725 --> 00:04:06.035
So who were, whoever is providing implementations to the abstract method?

00:04:06.035 --> 00:04:08.120
To that particular class on labor,

00:04:08.120 --> 00:04:11.370
we should be able to create a object.

00:04:11.370 --> 00:04:13.180
Great.

00:04:13.180 --> 00:04:17.800
So for example, I have a class which contains add method,

00:04:17.800 --> 00:04:20.155
and it doesn't have any implementation.

00:04:20.155 --> 00:04:21.805
It's just a method signature.

00:04:21.805 --> 00:04:23.830
So it is incomplete method.

00:04:23.830 --> 00:04:27.625
So I cannot create the object for a mean computed method.

00:04:27.625 --> 00:04:35.035
So we need to write implementation to the abstract method.

00:04:35.035 --> 00:04:36.610
So whoever is writing the implementation,

00:04:36.610 --> 00:04:38.035
they can create object for them.

00:04:38.035 --> 00:04:42.580
Okay? It might little bit of confusion here.

00:04:42.580 --> 00:04:44.620
But when I'm showing the example,

00:04:44.620 --> 00:04:47.035
I'll go through each and every steps,

00:04:47.035 --> 00:04:53.335
the rules, and then you'll be able to understand how abstract classes working.

00:04:53.335 --> 00:04:54.920
Thank you.
