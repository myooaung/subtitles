WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.725
Hello everyone.

00:00:01.725 --> 00:00:02.715
Welcome back.

00:00:02.715 --> 00:00:06.285
So let's verify the non-access modifier because we need to

00:00:06.285 --> 00:00:10.245
see for ourselves how the final is going to work.

00:00:10.245 --> 00:00:11.910
Let's go back to Eclipse.

00:00:11.910 --> 00:00:17.535
And here we already inherited IRA glass grade class three extents class one.

00:00:17.535 --> 00:00:21.945
So I don't have any issues here because my class on it's not a final.

00:00:21.945 --> 00:00:24.060
Let's try something like this.

00:00:24.060 --> 00:00:28.680
I created my class as a public, but it's the final.

00:00:28.680 --> 00:00:32.215
What happened immediately dataset over here.

00:00:32.215 --> 00:00:35.180
Class 3 cannot subclass from the final glass.

00:00:35.180 --> 00:00:40.490
And because Class 1 is a final which just telling the people you cannot be override,

00:00:40.490 --> 00:00:43.010
which means you cannot be inherited my property.

00:00:43.010 --> 00:00:44.405
You're not belongs to me.

00:00:44.405 --> 00:00:46.550
I don't want you to inherit my property.

00:00:46.550 --> 00:00:52.430
So either you need to remove the extents are you don't use my class at all.

00:00:52.430 --> 00:00:55.850
So that is the important thing about the final.

00:00:55.850 --> 00:00:58.190
So but the moment due to provide final here,

00:00:58.190 --> 00:01:04.160
this cannot be extended by anybody else contract that as I mentioned earlier,

00:01:04.160 --> 00:01:06.470
we're going to talk about in a separate session.

00:01:06.470 --> 00:01:08.675
Now we'll talk over the methods and variables.

00:01:08.675 --> 00:01:13.550
So how the final will work against them at our variables.

00:01:13.550 --> 00:01:16.520
Okay, Let's go back to,

00:01:16.520 --> 00:01:20.690
let's go back to our Eclipse.

00:01:20.690 --> 00:01:29.390
Let me create some variable called final int.

00:01:29.390 --> 00:01:31.680
Is that.

00:01:32.260 --> 00:01:34.415
So in the main Madonna,

00:01:34.415 --> 00:01:40.805
I'm trying to access the is it value, which is pretty good.

00:01:40.805 --> 00:01:43.355
But before that what I'm trying to do,

00:01:43.355 --> 00:01:45.245
I'm trying to modify the data.

00:01:45.245 --> 00:01:48.080
I don't want my zed value to be a 100.

00:01:48.080 --> 00:01:50.465
I want them to be a sub-50.

00:01:50.465 --> 00:01:55.100
The moment you are trying to modify the data is showing an adder.

00:01:55.100 --> 00:01:58.940
The final field is it cannot be assigned.

00:01:58.940 --> 00:02:00.560
The reason it isn't final field,

00:02:00.560 --> 00:02:02.630
you cannot motivate, say, when you are using equal,

00:02:02.630 --> 00:02:04.760
what does it mean you're trying to assign something

00:02:04.760 --> 00:02:07.850
because it is already assigned some value in the lane number six,

00:02:07.850 --> 00:02:11.735
you cannot assign them a value or you cannot modify did gain.

00:02:11.735 --> 00:02:14.420
So that is an important thing about the final.

00:02:14.420 --> 00:02:15.380
Okay?

00:02:15.380 --> 00:02:21.440
So then you might think about how my final will walk against these methods.

00:02:21.440 --> 00:02:22.130
Okay?

00:02:22.130 --> 00:02:26.450
So let's create here.

00:02:26.450 --> 00:02:40.880
So final public, final class 13.

00:02:40.880 --> 00:02:42.770
Okay.

00:02:42.770 --> 00:02:46.280
So now let's put some message over it.

00:02:46.280 --> 00:02:52.430
So message from class 1,

00:02:52.430 --> 00:02:54.800
3, Let's see how it is going to work.

00:02:54.800 --> 00:02:57.650
So can we access the class limiter here?

00:02:57.650 --> 00:03:04.985
Of course we can OBJ dot class it because it's available the same class I can access it.

00:03:04.985 --> 00:03:10.595
No issues at all. The message from class 1 metadata, which is pretty cool.

00:03:10.595 --> 00:03:14.760
Can you try to access from some other classes? Like last time?

00:03:16.360 --> 00:03:20.330
Have you seen emitters know that is known as,

00:03:20.330 --> 00:03:24.660
okay, let's try the same thing in clustering.

00:03:25.720 --> 00:03:30.500
So basically I don't have any issues whether I'm accessing from the same package,

00:03:30.500 --> 00:03:34.475
had different package then what is the need of final against him method.

00:03:34.475 --> 00:03:37.385
So then you're using vinyl egg instrument that

00:03:37.385 --> 00:03:40.400
if the variable you cannot modify, if it is a method,

00:03:40.400 --> 00:03:43.730
you cannot override when you, when you do override,

00:03:43.730 --> 00:03:48.035
when you do the inheritance, are doing extensive.

00:03:48.035 --> 00:03:49.310
See now I'm Class 3,

00:03:49.310 --> 00:03:51.020
extensive, Class 1, right?

00:03:51.020 --> 00:03:58.560
So now what I'm gonna do is let me try to lower this particular my dad here.

00:03:59.350 --> 00:04:02.300
The moment you tried it,

00:04:02.300 --> 00:04:05.570
throw an error cannot reduce the disability of the inherited matter.

00:04:05.570 --> 00:04:10.355
Okay, Well, let me add the public here looking for a public accessibility.

00:04:10.355 --> 00:04:12.710
But still we have an error.

00:04:12.710 --> 00:04:18.245
Because the removal final module of the class one, jot plasma d'etre.

00:04:18.245 --> 00:04:20.210
It is asking us to modify the class

00:04:20.210 --> 00:04:23.465
one method from the class and because that is a final,

00:04:23.465 --> 00:04:27.365
so when you have a mother as a final, you cannot override.

00:04:27.365 --> 00:04:30.380
Let me try to remove the final year.

00:04:30.380 --> 00:04:35.015
The moment I remove the final battle is gone.

00:04:35.015 --> 00:04:38.615
So that is a important thing about the final.

00:04:38.615 --> 00:04:41.375
When you create a method as final,

00:04:41.375 --> 00:04:44.210
that is a condition you cannot override the method.

00:04:44.210 --> 00:04:49.610
If it is a variable, you cannot modify that data.

00:04:49.610 --> 00:04:51.800
Okay, so what else?

00:04:51.800 --> 00:04:56.760
Let's go back to Notepad and we'll see what the thing that is available.

00:04:57.820 --> 00:05:03.515
Okay, so we know final and so what is the static?

00:05:03.515 --> 00:05:06.350
Let's talk about static here.

00:05:06.350 --> 00:05:08.945
Okay, let's go to class 1.

00:05:08.945 --> 00:05:10.955
So let's create them at them.

00:05:10.955 --> 00:05:14.585
Let's create a variable, it's just static.

00:05:14.585 --> 00:05:15.575
Okay?

00:05:15.575 --> 00:05:18.890
So I'm going to create a variable here.

00:05:18.890 --> 00:05:21.200
Static.

00:05:21.200 --> 00:05:28.940
Int X1 or a 10, 20.

00:05:28.940 --> 00:05:31.040
So I have a static variable.

00:05:31.040 --> 00:05:33.979
We all know that if it is a static,

00:05:33.979 --> 00:05:35.990
it is belongs to a class.

00:05:35.990 --> 00:05:37.640
So I have an object here.

00:05:37.640 --> 00:05:39.575
So can I access using the object?

00:05:39.575 --> 00:05:45.030
Okay, let's try that Cisco OBJ dot a,

00:05:45.910 --> 00:05:49.265
which is pretty much working.

00:05:49.265 --> 00:05:51.590
I can see the outcome here,

00:05:51.590 --> 00:05:53.705
but there are other ways to do that.

00:05:53.705 --> 00:05:58.700
What I'm gonna do is instead of using objects,

00:05:58.700 --> 00:06:01.490
I can directly refer the a here,

00:06:01.490 --> 00:06:03.425
which will still work.

00:06:03.425 --> 00:06:07.670
You might ask, you're not creating any object and even you're not using any glasses,

00:06:07.670 --> 00:06:09.515
but how the IAEA is accessible.

00:06:09.515 --> 00:06:14.210
The reason is Yj is a static variable which is available in the global level.

00:06:14.210 --> 00:06:17.075
I'm trying to access the static inside my static,

00:06:17.075 --> 00:06:18.440
which means you're human,

00:06:18.440 --> 00:06:21.545
can communicate to a human without telling I'm a human.

00:06:21.545 --> 00:06:24.170
The similar way, the monkey can talk to

00:06:24.170 --> 00:06:26.420
another monkey without telling I'm a monkey there.

00:06:26.420 --> 00:06:30.680
Similarly, static and w1 at the static without telling I am from this particular class.

00:06:30.680 --> 00:06:34.355
Okay, If for the different class you need to use the last name.

00:06:34.355 --> 00:06:37.025
So what is other ways to do that?

00:06:37.025 --> 00:06:43.115
So the next way is you can directly use the class name dot a.

00:06:43.115 --> 00:06:44.990
So everything will works.

00:06:44.990 --> 00:06:48.980
So to access static members that are two ways you can access

00:06:48.980 --> 00:06:53.390
through the class name or you can access through object.

00:06:53.390 --> 00:06:56.510
If it is the same class, you can directly access the members.

00:06:56.510 --> 00:07:02.270
Now I'm trying to access the same a INSEAD the other classes and that kind of scenario.

00:07:02.270 --> 00:07:04.490
Let's copy these two.

00:07:04.490 --> 00:07:06.860
I'm going to provide it here.

00:07:06.860 --> 00:07:08.840
See the a is not available good,

00:07:08.840 --> 00:07:10.055
even though it's a static.

00:07:10.055 --> 00:07:13.490
This is from a different class, which is class one.

00:07:13.490 --> 00:07:15.245
So I cannot do the e here.

00:07:15.245 --> 00:07:20.990
So I can use Class 1 or I can use object.

00:07:20.990 --> 00:07:28.280
So I can use object dot a.

00:07:28.280 --> 00:07:31.700
So there are other ways to access the static members.

00:07:31.700 --> 00:07:34.640
So that is why the static members and methods are belongs

00:07:34.640 --> 00:07:38.270
to what class they are not belongs to an object.

00:07:38.270 --> 00:07:39.380
Got it.

00:07:39.380 --> 00:07:41.150
Okay, Let's move on to an odd power.

00:07:41.150 --> 00:07:43.010
We'll see what else is there.

00:07:43.010 --> 00:07:45.890
So abstract and Tanzania and synchronous volume,

00:07:45.890 --> 00:07:48.260
those are pretty much advanced concept.

00:07:48.260 --> 00:07:53.135
But just know what is the difference between synchronous transient, transient.

00:07:53.135 --> 00:07:55.940
You cannot say relays. If you create any variable,

00:07:55.940 --> 00:07:57.530
remember or metadata.

00:07:57.530 --> 00:08:00.400
Transient method, synchronize.

00:08:00.400 --> 00:08:04.330
It isn't restrict for the process where we're reducing the threat.

00:08:04.330 --> 00:08:06.910
So one thread is crossing that particular member.

00:08:06.910 --> 00:08:09.730
You need to wait until the thread finished the work.

00:08:09.730 --> 00:08:12.730
So then only the next thread will allow to modify watertight.

00:08:12.730 --> 00:08:17.485
It always reads the data from the main memory and shut off your local cache memory.

00:08:17.485 --> 00:08:21.715
So these are the major importance are things that you need to know

00:08:21.715 --> 00:08:25.435
about access modifiers and non access modifiers.

00:08:25.435 --> 00:08:25.915
Okay?

00:08:25.915 --> 00:08:29.290
So it might, you might think that a lot of things which we discussed,

00:08:29.290 --> 00:08:33.550
but you will not get familiar with this until unless you try on your own.

00:08:33.550 --> 00:08:35.380
Because when I do the code,

00:08:35.380 --> 00:08:37.150
it might feel like it's simple.

00:08:37.150 --> 00:08:41.715
Okay, I'm just adding some public-private and some stat again, then that's all.

00:08:41.715 --> 00:08:44.465
But when you try on your own,

00:08:44.465 --> 00:08:46.190
you will face lots of difficulties.

00:08:46.190 --> 00:08:49.430
And that is something you feel like it's similar, man,

00:08:49.430 --> 00:08:53.555
because of the default ended the protected both.

00:08:53.555 --> 00:08:57.920
Similarly. So how do you differentiate that?

00:08:57.920 --> 00:09:00.950
So when you try with a load of examples,

00:09:00.950 --> 00:09:03.500
you will realize the power of the access modifiers.

00:09:03.500 --> 00:09:04.145
Okay?

00:09:04.145 --> 00:09:06.830
So just try and let me know if you need any clarification.

00:09:06.830 --> 00:09:08.430
Thank you.
