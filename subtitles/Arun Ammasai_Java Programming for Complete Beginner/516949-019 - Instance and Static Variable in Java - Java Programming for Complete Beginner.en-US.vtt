WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.100
Hello everyone, Welcome back.

00:00:02.100 --> 00:00:04.425
We discuss about local variable.

00:00:04.425 --> 00:00:07.005
The next one, the instance variables,

00:00:07.005 --> 00:00:09.075
what is called as ancient variable.

00:00:09.075 --> 00:00:15.520
The variable declared outside of a method or inside a class.

00:00:15.950 --> 00:00:19.680
Those variables are called instance

00:00:19.680 --> 00:00:23.985
variables and you cannot declare the instance variables as a static.

00:00:23.985 --> 00:00:26.865
If you declared as static that it's not a static vary,

00:00:26.865 --> 00:00:29.010
that's not an instance variable.

00:00:29.010 --> 00:00:30.280
Right?

00:00:30.280 --> 00:00:34.940
So let me show you in a simple example how it is look like.

00:00:34.940 --> 00:00:37.910
For example, here you have a class, right?

00:00:37.910 --> 00:00:42.710
So if you provide something inside this particular method,

00:00:42.710 --> 00:00:45.410
because it's a method, whatever you prefer.

00:00:45.410 --> 00:00:47.480
Instead the method that is called local.

00:00:47.480 --> 00:00:51.590
So if you define a variable here, it is a local variable.

00:00:51.590 --> 00:00:55.880
But I'm defining a variable here like int x is equal to 10.

00:00:55.880 --> 00:01:03.680
So which is your instance variable because I declared a variable inside my class,

00:01:03.680 --> 00:01:05.690
not inside any method's.

00:01:05.690 --> 00:01:10.145
Okay, So this can be accessed through all the methods.

00:01:10.145 --> 00:01:11.480
Okay?

00:01:11.480 --> 00:01:15.595
So what is the advantage of instance variables?

00:01:15.595 --> 00:01:16.825
So you might ask, right?

00:01:16.825 --> 00:01:18.490
For example, if you have a class,

00:01:18.490 --> 00:01:21.430
java is basically it's the object will reenter.

00:01:21.430 --> 00:01:27.190
So you have a variable and you are creating multiple objects to your class.

00:01:27.190 --> 00:01:30.475
For example, you have a class called x, y is it.

00:01:30.475 --> 00:01:33.805
And you're creating a new three objects.

00:01:33.805 --> 00:01:35.455
X y is at 1, 2, 3.

00:01:35.455 --> 00:01:39.400
Okay, let's talk about how to create a object under when we're talking about the classes.

00:01:39.400 --> 00:01:41.440
So for now, just try to understand.

00:01:41.440 --> 00:01:44.500
So I'm creating three instance for your class.

00:01:44.500 --> 00:01:46.570
This Keep that is as simple.

00:01:46.570 --> 00:01:51.310
You have a classical x-rays that I'm creating three instance for the same class, okay?

00:01:51.310 --> 00:01:58.085
So H and every instance holds a copy of the variable.

00:01:58.085 --> 00:02:03.275
For example, instance one holds a value called x.

00:02:03.275 --> 00:02:06.785
It holds 10, and all of them has the same.

00:02:06.785 --> 00:02:09.740
But when you modify one of the instance from ten to 20,

00:02:09.740 --> 00:02:11.765
because variable can be changed at any time, right?

00:02:11.765 --> 00:02:18.335
So if you update one instance value 225 or something else,

00:02:18.335 --> 00:02:23.240
the rest of the instance will not be impacted because each and

00:02:23.240 --> 00:02:28.850
everything won't separate copy of instance, right?

00:02:28.850 --> 00:02:33.335
And there is one more. So static.

00:02:33.335 --> 00:02:35.750
So what is static actually?

00:02:35.750 --> 00:02:37.085
Alright.

00:02:37.085 --> 00:02:40.850
So static, it can be accessed through the class.

00:02:40.850 --> 00:02:42.800
You don't need an object for that.

00:02:42.800 --> 00:02:46.385
You can access through the class. We'll talk about that.

00:02:46.385 --> 00:02:50.735
So variable declared inside a class.

00:02:50.735 --> 00:02:54.410
So that is a slightly different between instance and static.

00:02:54.410 --> 00:02:57.665
Both of them declare under the class level.

00:02:57.665 --> 00:02:59.960
But if that isn't no static keyword,

00:02:59.960 --> 00:03:01.715
that is the instant variable.

00:03:01.715 --> 00:03:03.950
Okay, if you provide a static,

00:03:03.950 --> 00:03:05.570
that's the static variable.

00:03:05.570 --> 00:03:10.160
And another thing, when you're talking about a local variable, we discussed,

00:03:10.160 --> 00:03:13.610
we cannot define or declare a variable in zeta,

00:03:13.610 --> 00:03:15.725
local matter acid static.

00:03:15.725 --> 00:03:20.495
The similar way. When you're talking about a static variable.

00:03:20.495 --> 00:03:23.585
The static variable cannot be a local.

00:03:23.585 --> 00:03:24.830
Okay?

00:03:24.830 --> 00:03:27.770
And at that point, so it will create

00:03:27.770 --> 00:03:31.055
a single copy and share along with the all the instance.

00:03:31.055 --> 00:03:32.870
Okay, so in the previous example we

00:03:32.870 --> 00:03:35.975
discussed for the same class I created three instance,

00:03:35.975 --> 00:03:38.180
correct in static variables also,

00:03:38.180 --> 00:03:40.490
even though if you create tree instance,

00:03:40.490 --> 00:03:43.430
all of them share the same memory location,

00:03:43.430 --> 00:03:45.155
it is not the individual copy.

00:03:45.155 --> 00:03:47.540
It is holding the same copy.

00:03:47.540 --> 00:03:51.050
For example, X-rays that you have a three instance 1, 2, 3.

00:03:51.050 --> 00:03:54.455
If you're updating one instance to 10 to 25,

00:03:54.455 --> 00:03:56.975
for example, your x has 25.

00:03:56.975 --> 00:03:57.755
Correct?

00:03:57.755 --> 00:04:00.725
So you could do three inch into all of them holding 20 for now.

00:04:00.725 --> 00:04:04.865
And you're going and you're changing only one of the instance to 30.

00:04:04.865 --> 00:04:06.050
So what will happen?

00:04:06.050 --> 00:04:08.390
It will update all the variables.

00:04:08.390 --> 00:04:10.115
But if it is a instance,

00:04:10.115 --> 00:04:13.280
it will update only that particular variable alone.

00:04:13.280 --> 00:04:17.375
Because in the instance we're trying to update the separate copy.

00:04:17.375 --> 00:04:18.800
And if it is a static,

00:04:18.800 --> 00:04:20.960
it will just share the memory location.

00:04:20.960 --> 00:04:22.970
If you update one memory location,

00:04:22.970 --> 00:04:25.460
it will impact wherever it is referred.

00:04:25.460 --> 00:04:26.645
Right?

00:04:26.645 --> 00:04:31.445
So let's create a simple example and discover what

00:04:31.445 --> 00:04:37.440
we discussed so far so that it'll be even more better understanding. Thank you.
