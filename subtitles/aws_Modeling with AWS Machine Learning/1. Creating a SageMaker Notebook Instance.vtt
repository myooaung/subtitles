WEBVTT
1
00:00:02.540 --> 00:00:05.200
[Autogenerated] Welcome to this module on preparing data

2
00:00:05.200 --> 00:00:08.620
to train Emel models in this module.

3
00:00:08.620 --> 00:00:12.140
We're going to log in to AWS sage Maker,

4
00:00:12.140 --> 00:00:17.800
start a notebook instance, and train a model right from scratch.

5
00:00:17.800 --> 00:00:21.530
They're going to use extra boost algorithm to predict if a customer

6
00:00:21.530 --> 00:00:25.250
will open a term deposit or not using bank marketing.

7
00:00:25.250 --> 00:00:28.640
Campaign dataset.

8
00:00:28.640 --> 00:00:32.100
This is the same dataset that I used in my other course on

9
00:00:32.100 --> 00:00:37.700
developing models using Microsoft Azure AWS Sage maker has

10
00:00:37.700 --> 00:00:40.720
published plenty off working examples and error,

11
00:00:40.720 --> 00:00:43.480
going to leverage one off the examples provided by

12
00:00:43.480 --> 00:00:47.640
them as a foundation on dive Deeper.

13
00:00:47.640 --> 00:00:52.430
Then we're going to download the banking data from the source and

14
00:00:52.430 --> 00:00:55.340
check the data before and after processing.

15
00:00:55.340 --> 00:00:58.930
And finally, we will upload the data to S3 buckets on.

16
00:00:58.930 --> 00:01:03.440
Keep it ready for the training process.

17
00:01:03.440 --> 00:01:09.940
Let's take a quick look at some off the features offered by Sage Maker Notebook.

18
00:01:09.940 --> 00:01:14.340
It leverages ably a single sign on for authentication purposes,

19
00:01:14.340 --> 00:01:18.740
which makes it easy to use your organization credentials.

20
00:01:18.740 --> 00:01:21.920
You can start your notebook instantiate without having to

21
00:01:21.920 --> 00:01:25.040
launch additional computing resources,

22
00:01:25.040 --> 00:01:28.190
and at the same time it also gives you the flexibility

23
00:01:28.190 --> 00:01:30.710
to scale up Azure modeling process.

24
00:01:30.710 --> 00:01:37.040
Increases in complexity on this makes it a highly cost effective option.

25
00:01:37.040 --> 00:01:41.810
Sage maker performs periodic checks on automatically installs

26
00:01:41.810 --> 00:01:46.440
latest updates to colonel security patches.

27
00:01:46.440 --> 00:01:53.200
AWS is Dicky updates on sage maker python S3 Key updates The notebook

28
00:01:53.200 --> 00:01:58.050
instantiate can also be associate ID with external get repositories that lets

29
00:01:58.050 --> 00:02:03.100
you collaborate with others on increased productivity.

30
00:02:03.100 --> 00:02:08.240
I just logged into Amazon Sage Maker under a dash book.

31
00:02:08.240 --> 00:02:11.540
Click on notebook Instances.

32
00:02:11.540 --> 00:02:14.930
Sage Maker helps us create a managed notebook.

33
00:02:14.930 --> 00:02:16.340
Instance.

34
00:02:16.340 --> 00:02:20.640
I would like to place a heavy emphasis on the word managed,

35
00:02:20.640 --> 00:02:22.070
and we'll see shortly.

36
00:02:22.070 --> 00:02:24.740
What does it mean?

37
00:02:24.740 --> 00:02:28.240
Click on create notebook instantiate.

38
00:02:28.240 --> 00:02:29.090
Give you a notebook.

39
00:02:29.090 --> 00:02:31.840
Instantiate error Name.

40
00:02:31.840 --> 00:02:36.440
Click on Notebook Instant SSHD type.

41
00:02:36.440 --> 00:02:39.700
This is a size and family off your easy to instantiate

42
00:02:39.700 --> 00:02:43.440
where the training is going to take place.

43
00:02:43.440 --> 00:02:46.840
The instance Type Format has plenty of details.

44
00:02:46.840 --> 00:02:48.950
Package in its name.

45
00:02:48.950 --> 00:02:50.230
There are four different,

46
00:02:50.230 --> 00:02:57.550
easy to instantiate families that error perfect with letter T MM see,

47
00:02:57.550 --> 00:03:01.140
and these for tiny.

48
00:03:01.140 --> 00:03:06.140
This is the smallest possible easy to instantiate that's available.

49
00:03:06.140 --> 00:03:14.770
MM is for medium C is for compute optimized and is for accelerated

50
00:03:14.770 --> 00:03:22.910
computer Next to the family size is a version number higher the number

51
00:03:22.910 --> 00:03:28.240
later the version is and error optimized for cost.

52
00:03:28.240 --> 00:03:32.740
There are multiple size options starting from medium large,

53
00:03:32.740 --> 00:03:37.440
extra large all the way up to 18 extra large.

54
00:03:37.440 --> 00:03:41.140
I'm going to choose the 3D medium.

55
00:03:41.140 --> 00:03:44.150
This can always be changed after launching your notebook.

56
00:03:44.150 --> 00:03:50.840
Instantiate XAML Next one is elastic inference.

57
00:03:50.840 --> 00:03:56.340
Elastic inference on GPU acceleration to any easy to instance,

58
00:03:56.340 --> 00:04:02.040
and it boosts the performance significantly in a cost effective way.

59
00:04:02.040 --> 00:04:06.860
Lifecycle conflict is typically a bash script that you would like

60
00:04:06.860 --> 00:04:10.010
to run any time you create our started notebook.

61
00:04:10.010 --> 00:04:11.740
Instance.

62
00:04:11.740 --> 00:04:15.330
Sage maker such as that this conflict should not exceed more

63
00:04:15.330 --> 00:04:19.460
than 15 minutes as there is an explicit time out period that's

64
00:04:19.460 --> 00:04:23.180
enforced by sage maker volume.

65
00:04:23.180 --> 00:04:29.340
Size tells a doubly is how big off EBS you need for the training process,

66
00:04:29.340 --> 00:04:33.640
and it starts with five gig as default.

67
00:04:33.640 --> 00:04:36.090
This is dictated by size off your data,

68
00:04:36.090 --> 00:04:41.120
and you need to keep a little buffer to include any processing code that you may

69
00:04:41.120 --> 00:04:47.230
use because all these will be persisted in this data store.

70
00:04:47.230 --> 00:04:49.740
Under permissions on encryption,

71
00:04:49.740 --> 00:04:53.910
you can either select or create a new I am room to

72
00:04:53.910 --> 00:04:58.040
access the search maker on S3 buckets.

73
00:04:58.040 --> 00:05:02.440
You have the option to choose any specific S3 buckets.

74
00:05:02.440 --> 00:05:11.840
Are all the buckets enable our disabled users root access to the notebook?

75
00:05:11.840 --> 00:05:13.920
You can turn on the encryption sitting.

76
00:05:13.920 --> 00:05:19.930
If you are working with a highly sensitive data under network settings,

77
00:05:19.930 --> 00:05:23.640
you can select an optional VPC.

78
00:05:23.640 --> 00:05:27.520
You also have an option to choose a git repository to push

79
00:05:27.520 --> 00:05:31.270
your code directly to so that it can be shared with other

80
00:05:31.270 --> 00:05:36.740
users easily add an optional tack.

81
00:05:36.740 --> 00:05:44.040
I'm going to add attack with environment as name on development as value.

82
00:05:44.040 --> 00:05:45.570
Click on Create Notebook.

83
00:05:45.570 --> 00:05:47.640
Instance.

84
00:05:47.640 --> 00:05:51.400
Current status is in pending state on this may take a while

85
00:05:51.400 --> 00:05:56.240
before the status changes to in service.

86
00:05:56.240 --> 00:06:01.140
Once the state has changes, you can open the Jupyter notebook.

87
00:06:01.140 --> 00:06:03.400
There are currently no files,

88
00:06:03.400 --> 00:06:08.340
but you can see a tab called Sage Maker examples where sage

89
00:06:08.340 --> 00:06:13.420
maker has bundled more than 200 examples covering many sage

90
00:06:13.420 --> 00:06:15.400
maker built in algorithms on.

91
00:06:15.400 --> 00:06:22.440
We did see quite a few of them in the last couple of models under Kanda.

92
00:06:22.440 --> 00:06:28.640
It lists all the environments on the packages that were installed on them.

93
00:06:28.640 --> 00:06:34.910
Switch to file step and click new and from the drop-down,

94
00:06:34.910 --> 00:06:38.510
select the terminal option.

95
00:06:38.510 --> 00:06:40.390
In a typical development environment,

96
00:06:40.390 --> 00:06:44.220
you will have an option to SSH to the server where

97
00:06:44.220 --> 00:06:46.320
you will be running your code.

98
00:06:46.320 --> 00:06:47.720
In sage maker.

99
00:06:47.720 --> 00:06:51.900
The terminal option gives you the equivalent.

100
00:06:51.900 --> 00:06:56.810
Most of the required libraries are already pre in stone and error ready to go,

101
00:06:56.810 --> 00:07:01.120
which makes it even more convenient for you.

102
00:07:01.120 --> 00:07:04.470
The bucket that you will create as part of your notebook

103
00:07:04.470 --> 00:07:08.340
will be mapped under Sage Maker directory.

104
00:07:08.340 --> 00:07:15.010
You can see a notebook instantiate being stored there under sample load books.

105
00:07:15.010 --> 00:07:21.240
You can see all the example load books provided by the sage maker.

106
00:07:21.240 --> 00:07:24.370
I'm going to switch to easy to console to check a couple of

107
00:07:24.370 --> 00:07:28.340
things as part off launching notebook.

108
00:07:28.340 --> 00:07:33.710
Instance were it launch 83 medium instance on an E.

109
00:07:33.710 --> 00:07:38.640
B s are fighting, but under running instances,

110
00:07:38.640 --> 00:07:45.240
it still say's zero and it shows I don't have any running instance.

111
00:07:45.240 --> 00:07:47.670
Similarly, if I look under EBS,

112
00:07:47.670 --> 00:07:53.300
it says that I don't have any obvious volume in this region.

113
00:07:53.300 --> 00:07:56.490
This is because the notebook instantiate is a managed

114
00:07:56.490 --> 00:08:00.520
instantiate as a highlighted before on sage maker

115
00:08:00.520 --> 00:08:04.640
internally manages both the easy to and Bs,

116
00:08:04.640 --> 00:08:08.720
and we don't have explicit access to SSH!

117
00:08:08.720 --> 00:08:10.640
To these instance.

118
00:08:10.640 --> 00:08:12.240
As we saw before,

119
00:08:12.240 --> 00:08:18.000
Sage Maker provides a nice terminal feature that lets you access the storage volume.

