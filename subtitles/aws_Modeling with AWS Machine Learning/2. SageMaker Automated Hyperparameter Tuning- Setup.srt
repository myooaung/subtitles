1
00:00:01,340 --> 00:00:04,540
[Autogenerated] let me log in back to sage maker console

2
00:00:04,540 --> 00:00:10,440
and see a live demo off automated, hyper parameter tuning.

3
00:00:10,440 --> 00:00:12,460
Before we start the tuning process,

4
00:00:12,460 --> 00:00:17,740
let's quickly review what we accomplished so far.

5
00:00:17,740 --> 00:00:21,140
We started with downloading the data,

6
00:00:21,140 --> 00:00:26,000
split the data into training on validation data sets and

7
00:00:26,000 --> 00:00:30,740
uploaded them to their corresponding S3 buckets.

8
00:00:30,740 --> 00:00:35,940
We created a sage maker estimator object on set hyper parameters,

9
00:00:35,940 --> 00:00:39,160
and ran a training job that we saw in the previous

10
00:00:39,160 --> 00:00:43,540
module on calculated the training error.

11
00:00:43,540 --> 00:00:48,140
Before we start the tuning process, let's configure the tuning job.

12
00:00:48,140 --> 00:00:54,140
Let's understand what a parameter ranges on how to define one.

13
00:00:54,140 --> 00:01:00,360
A tuning job finds the best possible hyper parameter value by searching over

14
00:01:00,360 --> 00:01:05,440
the range off hyper parameters values that you define.

15
00:01:05,440 --> 00:01:10,240
There are three different ways you can define the hyper parameter ranges.

16
00:01:10,240 --> 00:01:14,940
First one is categorical parameter range.

17
00:01:14,940 --> 00:01:19,500
You define the different categories off hyper parameter values that you want.

18
00:01:19,500 --> 00:01:26,140
The touring job to sell it next is continuous parameter range.

19
00:01:26,140 --> 00:01:29,700
You specify the minimum on maximum value up.

20
00:01:29,700 --> 00:01:33,900
The hyper parameter range on the tuning job will select a value

21
00:01:33,900 --> 00:01:38,540
between this strange during the tuning process.

22
00:01:38,540 --> 00:01:41,940
Next one is integral parameter range.

23
00:01:41,940 --> 00:01:47,540
You specify the minimum on maxim hyper parameter range value as well,

24
00:01:47,540 --> 00:01:51,640
but the values need to be an integer.

25
00:01:51,640 --> 00:01:55,650
There are four different scaling options that the tuning job

26
00:01:55,650 --> 00:02:00,040
uses while searching the range off values.

27
00:02:00,040 --> 00:02:04,870
First one is auto scaling, as the name indicates.

28
00:02:04,870 --> 00:02:09,750
Sage maker hyper parameter tuning two says the best scale for

29
00:02:09,750 --> 00:02:15,340
the hyper parameter tuning next is linear.

30
00:02:15,340 --> 00:02:19,540
The tuning job selects the value in a linear fashion,

31
00:02:19,540 --> 00:02:26,640
starting from the lowest to the highest implementing in smaller intervals.

32
00:02:26,640 --> 00:02:30,140
Next is log rhythmic scaling.

33
00:02:30,140 --> 00:02:34,340
This killing works only for positive values.

34
00:02:34,340 --> 00:02:37,030
Use logarithmic scaling when you're searching.

35
00:02:37,030 --> 00:02:38,780
Arrange that spans.

36
00:02:38,780 --> 00:02:45,740
A several order off magnitude on the last one is reverse blog Adamik.

37
00:02:45,740 --> 00:02:49,010
This is supported only in continuous parameter range.

38
00:02:49,010 --> 00:02:53,540
Only are not an integer parameter range.

39
00:02:53,540 --> 00:02:58,440
It works only for ranges that are between zero and one,

40
00:02:58,440 --> 00:03:01,540
and you need to choose this scaling when you're searching for a

41
00:03:01,540 --> 00:03:07,620
range that is highly sensitive to small changes.

42
00:03:07,620 --> 00:03:12,440
Let's switch our attention back to our example.

43
00:03:12,440 --> 00:03:19,540
We're defining three continuous parameter range for E T Alfa

44
00:03:19,540 --> 00:03:24,800
on minimum child way on one IntelliJ parameter range for max

45
00:03:24,800 --> 00:03:28,940
depth under resource limits,

46
00:03:28,940 --> 00:03:33,670
we set the maximum number of training jobs to 10 on maximum

47
00:03:33,670 --> 00:03:38,490
concurrent training jobs to to this is the maximum number of

48
00:03:38,490 --> 00:03:42,940
jobs that can be run simultaneously.

49
00:03:42,940 --> 00:03:47,440
We're going to use Beijing search strategy in our example,

50
00:03:47,440 --> 00:03:53,240
and our objective is to maximize the error you symmetric.

51
00:03:53,240 --> 00:03:56,960
Let me run this code on the prints statement at the end

52
00:03:56,960 --> 00:04:01,740
confirms that the cell has run successfully.

53
00:04:01,740 --> 00:04:05,630
Our next step is to configure the training job and it

54
00:04:05,630 --> 00:04:08,740
takes the following attributes.

55
00:04:08,740 --> 00:04:13,130
First one is algorithm specification where you specify

56
00:04:13,130 --> 00:04:17,140
the training image on the input more.

57
00:04:17,140 --> 00:04:22,560
Next one is input data conflict where you specify the input on validation.

58
00:04:22,560 --> 00:04:28,460
S3 bucket name on the content type in the output data conflict.

59
00:04:28,460 --> 00:04:33,140
You need to specify the output path off your S3 bucket

60
00:04:33,140 --> 00:04:35,400
under resource conflict mentioned.

61
00:04:35,400 --> 00:04:41,640
The instance Count and type on the volume size.

62
00:04:41,640 --> 00:04:46,600
Next section is static hyper parameters where you mentioned the values off

63
00:04:46,600 --> 00:04:51,280
hyper parameters that has static values and finally,

64
00:04:51,280 --> 00:04:54,510
the stopping condition where you specify the maximum

65
00:04:54,510 --> 00:04:58,640
duration for each training job.

66
00:04:58,640 --> 00:05:02,330
Another attribute that is occasionally used that you don't see

67
00:05:02,330 --> 00:05:08,070
here is warm start conflict as we saw before.

68
00:05:08,070 --> 00:05:13,740
One starting is the process where the tuning process used The results from

69
00:05:13,740 --> 00:05:18,840
one are more previous tuning jobs as a starting point.

70
00:05:18,840 --> 00:05:21,750
Let me run this job on we can.

71
00:05:21,750 --> 00:05:26,240
See, the statement is printed successfully.

72
00:05:26,240 --> 00:05:30,650
Let's start the hyper parameter tuning by passing both the tuning job

73
00:05:30,650 --> 00:05:36,300
conflict on the training job definition to create hyper parameter tuning

74
00:05:36,300 --> 00:05:44,000
job method on the first parameter off this app, a call is the name off the tuning job.

