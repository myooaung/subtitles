WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.520
We have our Director
Server running,

00:00:02.520 --> 00:00:05.250
but we don't have any
instances registered with it.

00:00:05.250 --> 00:00:07.590
The next thing we're
going to do is to do

00:00:07.590 --> 00:00:09.810
something that will
help our client

00:00:09.810 --> 00:00:11.550
applications or the other

00:00:11.550 --> 00:00:14.730
micro-services register
with the oracle server.

00:00:14.730 --> 00:00:16.230
And to accomplish that,

00:00:16.230 --> 00:00:17.370
all we have to do is to add

00:00:17.370 --> 00:00:19.905
one dependency and
we're good to go.

00:00:19.905 --> 00:00:21.510
I'm going to copy
this dependency

00:00:21.510 --> 00:00:24.375
from the Utica server project.

00:00:24.375 --> 00:00:26.610
I'm going to first
make those edits

00:00:26.610 --> 00:00:29.025
inside the product service.

00:00:29.025 --> 00:00:32.400
Inside it's Gradle
file, the XML file.

00:00:32.400 --> 00:00:35.740
If you're using Maven, I'm
going to add the dependency.

00:00:35.740 --> 00:00:38.600
Except of course this is
not going to be a solver,

00:00:38.600 --> 00:00:40.775
but rather a client.

00:00:40.775 --> 00:00:43.310
And believe it or not,

00:00:43.310 --> 00:00:45.395
that's all there is to it.

00:00:45.395 --> 00:00:50.870
To let this microservice
register with the oracle server.

00:00:50.870 --> 00:00:54.380
This client library right
here will actually make

00:00:54.380 --> 00:00:58.100
a rest API call to the
endpoint that the uric us,

00:00:58.100 --> 00:01:01.730
our exposes in order to
perform crud operations,

00:01:01.730 --> 00:01:06.665
basically to register itself
or deregister itself, etc.

00:01:06.665 --> 00:01:10.979
Let's quickly
refresh the project

00:01:12.970 --> 00:01:15.515
and do make sure
that you include

00:01:15.515 --> 00:01:17.780
Spring Cloud
dependencies as well.

00:01:17.780 --> 00:01:19.400
I already have this in place

00:01:19.400 --> 00:01:22.865
because earlier I
had used open fig,

00:01:22.865 --> 00:01:26.090
which required sprint
Cloud dependencies.

00:01:26.090 --> 00:01:31.110
Let's also launch our service.

00:01:38.080 --> 00:01:40.940
And if you go to the dashboard

00:01:40.940 --> 00:01:44.450
or uric and monitor
as we call it,

00:01:44.450 --> 00:01:46.670
if you refresh the page,

00:01:46.670 --> 00:01:48.845
you're going to see
it getting populated.

00:01:48.845 --> 00:01:52.190
We have an instance
running, but at the moment,

00:01:52.190 --> 00:01:53.780
the server is not aware of

00:01:53.780 --> 00:01:56.495
its name because we
didn't give one.

00:01:56.495 --> 00:01:59.340
So let's quickly do that.

00:02:02.310 --> 00:02:05.995
Inside its application
dot properties file.

00:02:05.995 --> 00:02:14.020
I'm going to say spring
dot application dot name.

00:02:14.020 --> 00:02:17.215
And I'm going to
give this a name.

00:02:17.215 --> 00:02:22.345
Product, service said the file.

00:02:22.345 --> 00:02:25.550
And let's relaunch
our application.

00:02:26.940 --> 00:02:30.280
I'm pretty sure that you
might be wondering how

00:02:30.280 --> 00:02:33.430
our client application
is able to

00:02:33.430 --> 00:02:37.285
locate the Utica server
and Registry itself.

00:02:37.285 --> 00:02:39.760
Bell, if you remember how
you record sound is actually

00:02:39.760 --> 00:02:43.285
running on default
port, which is 861.

00:02:43.285 --> 00:02:45.070
And by default,

00:02:45.070 --> 00:02:47.320
the client application
would try to register

00:02:47.320 --> 00:02:51.730
itself with the Utica server
running on its default port.

00:02:51.730 --> 00:02:54.640
However, in production,
in all likelihood,

00:02:54.640 --> 00:02:56.530
you may not be running
the Eureka server

00:02:56.530 --> 00:02:58.285
on its default port.

00:02:58.285 --> 00:02:59.590
It would keep changing,

00:02:59.590 --> 00:03:02.485
especially if you spin up
multiple instances of it.

00:03:02.485 --> 00:03:05.575
So it's always better
idea to actually include

00:03:05.575 --> 00:03:07.540
a key-value pair that's going

00:03:07.540 --> 00:03:10.580
to look at that
you record server.

00:03:10.950 --> 00:03:22.909
That's your'e card
dot Client dot URL.

00:03:24.030 --> 00:03:33.640
Default zone equals the URL

00:03:33.640 --> 00:03:41.530
is going to be this one.

00:03:41.530 --> 00:03:44.170
This is where the UDK
server would expose

00:03:44.170 --> 00:03:46.510
all those endpoints to

00:03:46.510 --> 00:03:50.005
let the client applications
make rest API calls.

00:03:50.005 --> 00:03:52.970
To register themselves.

00:03:53.400 --> 00:03:57.730
Actually found the
link that gives

00:03:57.730 --> 00:04:03.080
some information about that
rest API. And here it is.

00:04:05.220 --> 00:04:08.650
Here's the GitHub
link for the same.

00:04:08.650 --> 00:04:10.390
The client application make

00:04:10.390 --> 00:04:14.365
a post request along
with that app ID.

00:04:14.365 --> 00:04:18.430
That would help register
itself with the Eureka Server.

00:04:18.430 --> 00:04:22.300
Delete would mean it
wanted to de-register.

00:04:22.300 --> 00:04:25.975
We have a variety
of such operations.

00:04:25.975 --> 00:04:27.910
And down the line,
we're also going to

00:04:27.910 --> 00:04:30.010
fetch the location of

00:04:30.010 --> 00:04:31.390
a specific service and that's

00:04:31.390 --> 00:04:34.820
when it's going to
send a get request.

00:04:35.340 --> 00:04:38.410
Now if you reload the page,

00:04:38.410 --> 00:04:41.929
see the name as product service.

00:04:44.490 --> 00:04:47.845
Let us do similar changes

00:04:47.845 --> 00:04:51.710
for other two
microservices as well.

00:04:54.720 --> 00:05:03.920
This is going to be
pricing service.

00:05:06.240 --> 00:05:16.165
This is going to
be interservice.

00:05:16.165 --> 00:05:23.120
Let's also add Utica
client dependency.

00:05:41.020 --> 00:05:44.780
The file. Let's quickly

00:05:44.780 --> 00:05:48.960
do a refresh of
these two projects.

00:05:52.900 --> 00:06:04.595
Once done, let's launch
applications, micro-services.

00:06:04.595 --> 00:06:07.070
Now, they all should register

00:06:07.070 --> 00:06:10.230
themselves with
the Utica silver.

00:06:15.220 --> 00:06:24.785
Let's go to the recommended
if you refresh the page,

00:06:24.785 --> 00:06:29.100
you're going to see
the services listed.

00:06:29.800 --> 00:06:34.880
The next thing we're
going to do is to

00:06:34.880 --> 00:06:37.775
replace all these
hard-coded IP addresses

00:06:37.775 --> 00:06:39.590
with their names.

00:06:39.590 --> 00:06:41.990
Let me show you what I mean.

00:06:41.990 --> 00:06:44.180
From inside the product service,

00:06:44.180 --> 00:06:45.710
we are sending a request to

00:06:45.710 --> 00:06:48.230
pricing service as well
as the inventory service.

00:06:48.230 --> 00:06:50.790
Using Fee client.

00:06:51.130 --> 00:06:57.750
We have price client as well
as the inventory client.

00:06:59.790 --> 00:07:02.290
We no longer have to hardcode

00:07:02.290 --> 00:07:04.435
the IP addresses in this manner.

00:07:04.435 --> 00:07:06.250
We can just simply replace this

00:07:06.250 --> 00:07:11.720
with name equals inventory

00:07:14.580 --> 00:07:21.010
plus whatever the
name the UDK service

00:07:21.010 --> 00:07:27.745
identifies that service went
to copy this name from here.

00:07:27.745 --> 00:07:30.920
Ks doesn't matter.

00:07:31.740 --> 00:07:38.739
Went to say name equals
pricing service.

00:07:38.739 --> 00:07:41.690
This could be lowercase as well.

00:07:41.730 --> 00:07:45.830
Let's relaunch our
products service.

00:07:49.830 --> 00:07:52.960
Once it's done, Let's go to

00:07:52.960 --> 00:08:00.020
Postman and let us send the
request and see if it works.

00:08:01.050 --> 00:08:04.210
We got narrower.

00:08:04.210 --> 00:08:08.060
Maybe we'll have to wait a bit.

00:08:08.130 --> 00:08:11.570
We seem to be getting adders.

00:08:13.200 --> 00:08:18.430
Load balance does not have
available servers for pliant.

00:08:18.430 --> 00:08:22.060
When three. Okay, we
got the name wrong.

00:08:22.060 --> 00:08:25.400
Supposed to be.

00:08:32.400 --> 00:08:35.800
Let us relaunch the
application and

00:08:35.800 --> 00:08:39.500
hopefully this time
it should walk,

00:08:52.170 --> 00:08:56.920
go to Postman and
send the request.

00:08:56.920 --> 00:09:00.220
And it worked just as previous.

00:09:00.220 --> 00:09:01.960
We've pretty much
gotten rid off.

00:09:01.960 --> 00:09:05.395
All those problems are
the drawbacks associated.

00:09:05.395 --> 00:09:07.390
Having to hard-code the IP

00:09:07.390 --> 00:09:10.190
addresses along with
the port number.
