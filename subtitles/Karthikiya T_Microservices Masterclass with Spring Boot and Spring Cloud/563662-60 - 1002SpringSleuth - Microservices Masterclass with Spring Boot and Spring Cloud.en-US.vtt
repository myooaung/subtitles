WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.060
The real problem
with microservices

00:00:03.060 --> 00:00:04.530
when it comes to identifying

00:00:04.530 --> 00:00:05.820
the problem and pinpoint in

00:00:05.820 --> 00:00:08.940
the problem is it's
lack of traceability.

00:00:08.940 --> 00:00:10.665
Let me explain you what I mean

00:00:10.665 --> 00:00:14.339
by focusing on this section
of this architecture.

00:00:14.339 --> 00:00:16.080
Now imagine that we have

00:00:16.080 --> 00:00:17.970
a request coming in
from the client.

00:00:17.970 --> 00:00:20.965
And these are all the
participating microservices

00:00:20.965 --> 00:00:23.165
that would handle that request.

00:00:23.165 --> 00:00:25.385
Now, in case of a problem,

00:00:25.385 --> 00:00:28.460
you can actually go through
the log files of each and

00:00:28.460 --> 00:00:30.740
every individual
microservice and

00:00:30.740 --> 00:00:32.480
try to figure out the problem.

00:00:32.480 --> 00:00:35.060
But obviously,
this is not at all

00:00:35.060 --> 00:00:37.280
feasible because you don't

00:00:37.280 --> 00:00:38.720
know which log
message belongs to,

00:00:38.720 --> 00:00:41.480
which requests or
which transaction.

00:00:41.480 --> 00:00:43.805
In order to solve this problem,

00:00:43.805 --> 00:00:46.760
how about we introduce
a unique identifier

00:00:46.760 --> 00:00:49.265
that is unique to a
particular request flow

00:00:49.265 --> 00:00:50.735
or a transaction.

00:00:50.735 --> 00:00:52.460
And it gets printed along with

00:00:52.460 --> 00:00:53.990
all the log messages across

00:00:53.990 --> 00:00:55.280
all the services involved in

00:00:55.280 --> 00:00:57.920
the request or the transaction.

00:00:57.920 --> 00:01:01.340
You'd still need to dig
through each service log file.

00:01:01.340 --> 00:01:03.590
But at least this time in

00:01:03.590 --> 00:01:06.320
which log message belonged
to which requests flow,

00:01:06.320 --> 00:01:07.805
you can aggregate them.

00:01:07.805 --> 00:01:10.190
And unless the
problem, for example,

00:01:10.190 --> 00:01:12.140
you could write a
script that would go to

00:01:12.140 --> 00:01:13.970
each service and extract

00:01:13.970 --> 00:01:16.340
the logs pertaining
to that identifier.

00:01:16.340 --> 00:01:19.865
Let's call it trace ID
and store it in a file

00:01:19.865 --> 00:01:21.170
so that you can take a look at

00:01:21.170 --> 00:01:24.275
that file and analyze
what's going wrong.

00:01:24.275 --> 00:01:27.110
Now, of course, writing a
script that would extract

00:01:27.110 --> 00:01:28.820
the log messages from

00:01:28.820 --> 00:01:31.550
multiple microservices
is a tedious job.

00:01:31.550 --> 00:01:33.980
That's why we have
a tool-like zip kn,

00:01:33.980 --> 00:01:36.680
which we'll talk about
in coming lectures.

00:01:36.680 --> 00:01:38.540
But how do we really generate

00:01:38.540 --> 00:01:42.770
this unique identifier or what
we're calling a trace ID.

00:01:42.770 --> 00:01:44.810
Well, here are the steps.

00:01:44.810 --> 00:01:47.180
You generate a
random unique string

00:01:47.180 --> 00:01:48.815
at the start of the transaction.

00:01:48.815 --> 00:01:51.770
The moment we receive
requests from the client,

00:01:51.770 --> 00:01:54.890
you inject the trace ID in HTTP

00:01:54.890 --> 00:01:57.560
headers for each
subsequent service call.

00:01:57.560 --> 00:01:59.450
So for each hop, we're going to

00:01:59.450 --> 00:02:01.250
carry the trace ID so that

00:02:01.250 --> 00:02:05.285
we can print them all
the service log files

00:02:05.285 --> 00:02:07.550
and use something like MDC

00:02:07.550 --> 00:02:09.740
are mapped diagnostic context of

00:02:09.740 --> 00:02:12.620
spring to insert trace ID in

00:02:12.620 --> 00:02:16.085
each of the log messages
in each of the service.

00:02:16.085 --> 00:02:19.520
This obviously sounds
like a lot of work to do.

00:02:19.520 --> 00:02:21.200
And in fact it is.

00:02:21.200 --> 00:02:26.720
And that's where we
need spring sleep,

00:02:26.720 --> 00:02:28.475
which does the job.

00:02:28.475 --> 00:02:31.280
Once we add the dependency
or springs loop,

00:02:31.280 --> 00:02:34.175
it will do all the work for you.

00:02:34.175 --> 00:02:36.755
It will generate
a unique trace ID

00:02:36.755 --> 00:02:38.465
when the request is made.

00:02:38.465 --> 00:02:40.640
And trace ID is something
that will remain

00:02:40.640 --> 00:02:43.355
unique throughout the
entire transaction.

00:02:43.355 --> 00:02:45.650
It's a unique number
that represents

00:02:45.650 --> 00:02:48.605
the entire transaction or
the anti request flow.

00:02:48.605 --> 00:02:51.020
It will assign a new span ID for

00:02:51.020 --> 00:02:53.750
each individual hop
between service.

00:02:53.750 --> 00:02:56.420
Span ID is a unique ID that

00:02:56.420 --> 00:02:59.285
represents part of
overall transaction.

00:02:59.285 --> 00:03:01.160
Heat service
participating within

00:03:01.160 --> 00:03:03.845
the transaction will
have its own span ID.

00:03:03.845 --> 00:03:05.330
You will know what I mean once

00:03:05.330 --> 00:03:07.040
we take a look at an example.

00:03:07.040 --> 00:03:10.040
It would also add
tracing information to

00:03:10.040 --> 00:03:12.260
spring MDC to log

00:03:12.260 --> 00:03:14.930
tracing information along
with the log messages.

00:03:14.930 --> 00:03:16.640
And it will also inject tracing

00:03:16.640 --> 00:03:19.820
information for every
outbound HTTP call or

00:03:19.820 --> 00:03:22.040
messaging in case if you're
using something like

00:03:22.040 --> 00:03:26.675
RabbitMQ or if you're using
a rest template call.

00:03:26.675 --> 00:03:30.515
If we were to visualize how
the log messages would look.

00:03:30.515 --> 00:03:32.510
This is how it might look.

00:03:32.510 --> 00:03:33.920
We have service a and

00:03:33.920 --> 00:03:36.889
service B and the
corresponding log messages.

00:03:36.889 --> 00:03:38.450
In service a log message,

00:03:38.450 --> 00:03:41.480
you'll see the name of the
service which is service.

00:03:41.480 --> 00:03:43.940
Then the trace ID,

00:03:43.940 --> 00:03:46.310
which would remain common across

00:03:46.310 --> 00:03:48.500
all the log messages
pertaining to

00:03:48.500 --> 00:03:51.605
that transaction in
each of the service.

00:03:51.605 --> 00:03:53.720
Then we have a unique span

00:03:53.720 --> 00:03:56.869
ID that is unique
to that service.

00:03:56.869 --> 00:03:58.880
So we see then we

00:03:58.880 --> 00:04:01.280
have a flag that is
relevant to zip Ken.

00:04:01.280 --> 00:04:03.830
We'll talk about it
in coming lectures.

00:04:03.830 --> 00:04:08.840
Similarly, we have a log
message from service B with

00:04:08.840 --> 00:04:11.060
the exact same trace ID as it

00:04:11.060 --> 00:04:12.500
falls in the same transaction

00:04:12.500 --> 00:04:14.015
or in the same request flow,

00:04:14.015 --> 00:04:17.435
but with its own unique span ID.

00:04:17.435 --> 00:04:20.280
I'll see you in next lecture.
