WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.420
Now that you have some
idea on Log Stash,

00:00:03.420 --> 00:00:05.970
let us continue with our
example and bringing

00:00:05.970 --> 00:00:07.965
all the necessary configurations

00:00:07.965 --> 00:00:10.275
to see everything in action.

00:00:10.275 --> 00:00:13.740
But for this video, I've
actually disabled are turned off

00:00:13.740 --> 00:00:15.810
both Elasticsearch and
Kibana because they're

00:00:15.810 --> 00:00:18.375
occupying too much
off resources.

00:00:18.375 --> 00:00:22.005
We're going to start them
again in next video.

00:00:22.005 --> 00:00:24.060
But this video is
focused on understanding

00:00:24.060 --> 00:00:26.894
Log Stash with a quick example.

00:00:26.894 --> 00:00:29.230
Before we configure Log Stash

00:00:29.230 --> 00:00:32.060
it to have some source of input.

00:00:32.060 --> 00:00:34.760
In our case, the
source is going to be

00:00:34.760 --> 00:00:38.270
all the microservices
log messages.

00:00:38.270 --> 00:00:40.909
There are multiple ways you
can handle that scenario.

00:00:40.909 --> 00:00:43.580
But the way I'm handling it is

00:00:43.580 --> 00:00:46.580
by specifying the log file

00:00:46.580 --> 00:00:48.290
in each and every microservice.

00:00:48.290 --> 00:00:50.600
And this is the log file where

00:00:50.600 --> 00:00:54.290
the microservices would
dump all the logs tool.

00:00:54.290 --> 00:00:56.540
This is a property
and easy to use.

00:00:56.540 --> 00:00:59.674
That's logging filename equals.

00:00:59.674 --> 00:01:02.420
You'd specify the file

00:01:02.420 --> 00:01:04.505
where you want to
dump all the locks.

00:01:04.505 --> 00:01:07.085
I've done this for
all the microservices

00:01:07.085 --> 00:01:08.930
and all the logs from

00:01:08.930 --> 00:01:11.270
all the microservices
would now be

00:01:11.270 --> 00:01:14.555
dumped into this
particular log file.

00:01:14.555 --> 00:01:16.970
This is a fine which
is going to be

00:01:16.970 --> 00:01:19.820
the source of Log Stash.

00:01:19.820 --> 00:01:24.455
Stash would now pick the
logs from this file.

00:01:24.455 --> 00:01:26.495
We can do something with it,

00:01:26.495 --> 00:01:29.250
which we'll take
a look in awhile.

00:01:29.410 --> 00:01:32.810
Let us bring in the
configurations inside

00:01:32.810 --> 00:01:35.975
Log Stash for which
I need to go inside.

00:01:35.975 --> 00:01:38.390
Bin directory doesn't
really matter where you go,

00:01:38.390 --> 00:01:40.740
just need to create a file.

00:01:42.130 --> 00:01:45.905
It doesn't really matter what
name you go to this file.

00:01:45.905 --> 00:01:52.740
I'm just simply going to
call it as Log Stash.com.

00:01:55.660 --> 00:01:57.995
Let's open it with

00:01:57.995 --> 00:02:01.850
Notepad Plus Plus so that we
can bring in the changes.

00:02:01.850 --> 00:02:05.420
Let us specify all
the plugins required.

00:02:05.420 --> 00:02:07.715
I'm going to have

00:02:07.715 --> 00:02:15.810
input section as well
as output section.

00:02:16.570 --> 00:02:19.370
As I mentioned before.

00:02:19.370 --> 00:02:22.805
The input is going
to be the log file,

00:02:22.805 --> 00:02:24.950
where we have all the logs,

00:02:24.950 --> 00:02:27.380
all the microservices logs.

00:02:27.380 --> 00:02:32.810
For this purpose, I'm actually
going to use file plugin.

00:02:32.810 --> 00:02:39.355
Then I'm going to
specify the file path.

00:02:39.355 --> 00:02:41.840
Like so.

00:02:41.940 --> 00:02:45.230
Let me pick it from here.

00:02:45.870 --> 00:02:50.600
This is the file where
we have all the logs.

00:02:54.360 --> 00:02:59.420
Logs, log.

00:03:00.180 --> 00:03:04.760
Let us reverse all
these slashes.

00:03:11.670 --> 00:03:14.710
Same as the case with output.

00:03:14.710 --> 00:03:18.330
Well, we could have output
as the Elastic Search.

00:03:18.330 --> 00:03:21.380
In this example, I'm just simply

00:03:21.380 --> 00:03:24.920
going to dump
everything to fight.

00:03:24.920 --> 00:03:27.125
The destination is also a file.

00:03:27.125 --> 00:03:29.240
For now, in this example,

00:03:29.240 --> 00:03:36.270
I'm going to name it
as output dot log.

00:03:37.540 --> 00:03:40.190
Let's save the file.

00:03:40.190 --> 00:03:44.255
Now let's launch the Log Stash.

00:03:44.255 --> 00:03:47.250
From the command line.

00:03:49.300 --> 00:03:52.475
We're going to specify
the conflict file,

00:03:52.475 --> 00:03:54.830
which we've just introduced.

00:03:54.830 --> 00:03:57.950
Window open up the PowerShell.

00:03:57.950 --> 00:04:00.690
This folder.

00:04:02.730 --> 00:04:07.480
Log Stash is a script
we want to run.

00:04:07.480 --> 00:04:10.780
And we're going to send
one parameter hyphen Neff

00:04:10.780 --> 00:04:13.750
to specify the config file.

00:04:13.750 --> 00:04:18.505
In my case, it's named
as Log Stash.com.

00:04:18.505 --> 00:04:20.590
By the way, I already

00:04:20.590 --> 00:04:25.040
have all the services
up and running.

00:04:25.800 --> 00:04:28.940
It's going to take awhile.

00:04:30.990 --> 00:04:34.370
Let's go back here.

00:04:39.630 --> 00:04:43.725
Log session has created
the file for us.

00:04:43.725 --> 00:04:45.950
And it is just
simply essentially

00:04:45.950 --> 00:04:48.020
copying all the logs from yield

00:04:48.020 --> 00:04:49.895
the lungs or from
the input source

00:04:49.895 --> 00:04:53.340
straight to the output long.

00:04:53.470 --> 00:04:58.650
But let's explore what's
happening in these files.

00:05:01.060 --> 00:05:05.130
Let me just copy one
of the statements.

00:05:08.710 --> 00:05:12.270
This is from the input source.

00:05:13.300 --> 00:05:16.865
Let's copy one event from

00:05:16.865 --> 00:05:21.660
the resulting output
from the destination.

00:05:25.180 --> 00:05:35.240
Here, read this. If you

00:05:35.240 --> 00:05:38.360
notice all the log message
looks something like this.

00:05:38.360 --> 00:05:41.750
And the input source,
Log Stash has

00:05:41.750 --> 00:05:45.770
added some additional stuff
in the resulting output.

00:05:45.770 --> 00:05:49.250
Basically, this
data right here is

00:05:49.250 --> 00:05:51.920
unstructured and Log Stash

00:05:51.920 --> 00:05:54.815
try their best to
make it structured.

00:05:54.815 --> 00:05:59.420
We have multiple fields
here, like horsemen,

00:05:59.420 --> 00:06:02.750
hosts from there, that
event has occurred,

00:06:02.750 --> 00:06:06.079
the path or the input source.

00:06:06.079 --> 00:06:08.375
And then finally the message,

00:06:08.375 --> 00:06:11.945
which is exactly this.

00:06:11.945 --> 00:06:15.170
In the next video we're going
to see how we can use grok

00:06:15.170 --> 00:06:20.255
plug-in for the partition
this message into fields.

00:06:20.255 --> 00:06:22.700
For example, we
could have this in

00:06:22.700 --> 00:06:26.840
date field and this
and timestamp field,

00:06:26.840 --> 00:06:32.460
this in logging level
field, so on and so forth.

00:06:32.800 --> 00:06:35.990
Let us also try
another input source,

00:06:35.990 --> 00:06:43.805
maybe standard input
using STD IN plugin.

00:06:43.805 --> 00:06:51.330
Let's save the file and
relaunch Log Stash.

00:07:02.170 --> 00:07:07.320
Let's clear everything
inside output dot log file.

00:07:10.450 --> 00:07:13.620
It's going to take awhile.

00:07:18.430 --> 00:07:21.659
Let us type something.

00:07:22.420 --> 00:07:33.140
We got an error. It was

00:07:33.140 --> 00:07:35.975
supposed to have curly braces.

00:07:35.975 --> 00:07:43.890
Save the file and try
to relaunch Log Stash.

00:07:54.520 --> 00:07:56.885
I see the problem.

00:07:56.885 --> 00:07:59.450
I tried to follow Java's syntax,

00:07:59.450 --> 00:08:01.115
which I'm not supposed to.

00:08:01.115 --> 00:08:04.530
Let us save the file and
this should work now.

00:08:08.350 --> 00:08:13.620
Meanwhile, let us go to
the output log file.

00:08:15.910 --> 00:08:18.680
This time the input
source is going to

00:08:18.680 --> 00:08:21.080
be a standard input.

00:08:21.080 --> 00:08:23.540
I'm going to type in
this command line

00:08:23.540 --> 00:08:25.670
would be sent to
the destination,

00:08:25.670 --> 00:08:29.100
which in this case is
output dot log file.

00:08:35.020 --> 00:08:43.350
Let us type in
something, some message.

00:08:44.260 --> 00:08:51.210
If you go here, you get that.

00:08:51.640 --> 00:08:57.300
The output. I'll
see you next one.
