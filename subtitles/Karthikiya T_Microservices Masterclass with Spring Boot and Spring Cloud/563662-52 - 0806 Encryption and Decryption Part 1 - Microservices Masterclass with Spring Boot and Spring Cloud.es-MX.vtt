WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.560 --> 00:00:03.330
Hasta ahora tenemos los archivos de
conflicto

00:00:03.330 --> 00:00:05.250
residen en GitHub y luego


00:00:05.250 --> 00:00:06.630
tenemos el servidor de conflicto
los vio

00:00:06.630 --> 00:00:09.210
a los servicios,
lo cual es genial. 

00:00:09.210 --> 00:00:11.895
Pero esto viene con algunos desafíos
adicionales. 

00:00:11.895 --> 00:00:14.460
Ya que ahora nos trasladamos
todos los archivos de conflicto de

00:00:14.460 --> 00:00:17.250
microservicios
individuales
a una ubicación común,


00:00:17.250 --> 00:00:19.125
como en este caso, GitHub. 

00:00:19.125 --> 00:00:20.910
Esto también significa
que todo


00:00:20.910 --> 00:00:23.490
aquí puede ser visto
por todos los demás. 

00:00:23.490 --> 00:00:24.810
Y si se trata de alguien con

00:00:24.810 --> 00:00:28.130
intención
maliciosa Quien está echando
un vistazo a este contenido,


00:00:28.130 --> 00:00:30.200
obviamente,
existe la posibilidad

00:00:30.200 --> 00:00:32.390
que puedan hacer mal uso de
esta información. 

00:00:32.390 --> 00:00:34.910
Lo que esto significa es que no
queremos tener algún sentido a

00:00:34.910 --> 00:00:39.695
información como una
contraseña de base de datos o claves API, etc.


00:00:39.695 --> 00:00:41.480
¿Cómo las protegemos? 

00:00:41.480 --> 00:00:45.335
Bueno, la respuesta es
encriptación y descifrado. 

00:00:45.335 --> 00:00:47.135
Lo que eso significa es

00:00:47.135 --> 00:00:50.075
cada vez que estamos
tratando de almacenar la contraseña,

00:00:50.075 --> 00:00:53.390
vamos a cifrar para que se vea en


00:00:53.390 --> 00:00:54.980
un formato que nadie pueda


00:00:54.980 --> 00:00:57.440
entender excepto
los conflictos terminados.
 

00:00:57.440 --> 00:00:59.300
Y cuando los conflictos son ricos,


00:00:59.300 --> 00:01:01.730
esa propiedad,
que está encriptada,


00:01:01.730 --> 00:01:03.410
va a descifrar eso,


00:01:03.410 --> 00:01:05.825
extraer el texto real


00:01:05.825 --> 00:01:08.284
y luego enviarlo a la
solicitud y servicio. 

00:01:08.284 --> 00:01:10.835
Ya sabrás a lo que me
refiero en poco tiempo. 

00:01:10.835 --> 00:01:12.740
Pero lo primero que
tenemos que hacer
para

00:01:12.740 --> 00:01:14.180
habilitar el
cifrado y

00:01:14.180 --> 00:01:17.030
descifrado es introducir


00:01:17.030 --> 00:01:20.345
Spring Security en nuestros
conflictos por proyecto. 

00:01:20.345 --> 00:01:25.655
Y voy a hacer justo eso
dentro del archivo POM XML. 

00:01:25.655 --> 00:01:29.870
Cuándo introducir una dependencia
adicional. 

00:01:29.870 --> 00:01:39.230
Y esto va a ser
Spring Boot Starter seguridad. 

00:01:39.230 --> 00:01:45.840
El expediente. 
Actualicemos el proyecto. 

00:01:50.320 --> 00:01:53.045
Una vez hecho. 

00:01:53.045 --> 00:01:58.475
Vamos a introducir pocas configuraciones
específicas de seguridad. 

00:01:58.475 --> 00:02:01.684
Quisiera primero establecer
el nombre de usuario y contraseña. 

00:02:01.684 --> 00:02:04.820
En realidad no
lo necesitamos porque voy a


00:02:04.820 --> 00:02:08.015
permitir todos los puntos finales
sin ninguna autenticación. 

00:02:08.015 --> 00:02:10.325
Así que lo voy a ignorar por ahora. 

00:02:10.325 --> 00:02:14.090
Por defecto, siempre que añada
la dependencia de seguridad,


00:02:14.090 --> 00:02:16.430
habilitará automáticamente
la autenticación con

00:02:16.430 --> 00:02:19.639
usuario
predeterminado y contraseña
generada automáticamente. 

00:02:19.639 --> 00:02:21.470
Por lo que en realidad podríamos cambiar


00:02:21.470 --> 00:02:24.500
estas contraseña mínima a
algo que desee. 

00:02:24.500 --> 00:02:27.200
Alternativamente, podemos
dejar que todos accedan a


00:02:27.200 --> 00:02:30.530
todos los puntos finales
sin restricciones. 

00:02:30.530 --> 00:02:32.480
Para eso. 

00:02:32.480 --> 00:02:36.150
Voy a crear nuevo archivo de conflicto de
seguridad. 

00:02:36.250 --> 00:02:43.530
Yo lo llamaré seguridad web. 

00:02:43.690 --> 00:02:46.865
Aquí vamos
a crear una regla


00:02:46.865 --> 00:02:51.395
que permitiría
a todos acceder a un enrutamiento. 

00:02:51.395 --> 00:02:56.310
Voy a decir
habilitar la seguridad web. 

00:03:00.250 --> 00:03:03.720
Voy a
anular el método. 

00:03:03.880 --> 00:03:06.830
Pero antes de eso
esta clase necesita
ampliar

00:03:06.830 --> 00:03:11.000
la seguridad web
configure adopter. 

00:03:11.000 --> 00:03:15.360
Todo esto está cubierto ya en el capítulo de
seguridad. 

00:03:16.000 --> 00:03:23.220
Seguridad configurada adoptante. 

00:03:23.530 --> 00:03:26.825
Vamos a anular el método. 

00:03:26.825 --> 00:03:31.340
Protegido amplia configurar. 

00:03:31.340 --> 00:03:34.850
Y fuimos a pasar
en un argumento


00:03:34.850 --> 00:03:40.320
p seguridad


00:03:42.700 --> 00:03:47.700
lanza excepción. 

00:03:47.860 --> 00:03:50.780
Y dentro de aquí,
voy a usar


00:03:50.780 --> 00:03:54.815
ese objeto para
configurar nuestra seguridad. 

00:03:54.815 --> 00:04:03.300
Voy a decir que autorizadas
solicita asuntos. 

00:04:04.240 --> 00:04:09.350
Cuándo proporcionar reg ex. 

00:04:09.350 --> 00:04:12.995
Me gustaría permitir
literalmente todas las URLs. 

00:04:12.995 --> 00:04:15.900
Voy a decir permiso. 

00:04:17.290 --> 00:04:20.945
Esta declaración permitirá a
todos acceder a todo


00:04:20.945 --> 00:04:22.710
sin restricciones
o sin tener que


00:04:22.710 --> 00:04:24.709
introducir nombre de usuario y contraseña. 

00:04:24.709 --> 00:04:26.060
Si no haces esto,


00:04:26.060 --> 00:04:28.100
entonces cada vez que
envías la solicitud,

00:04:28.100 --> 00:04:30.575
te pedirá que ingreses
el nombre de usuario y contraseña,


00:04:30.575 --> 00:04:32.495
lo cual podría ser molesto. 

00:04:32.495 --> 00:04:37.040
Una cosa adicional que tenemos que
hacer es desactivar CSRF. 

00:04:37.040 --> 00:04:39.450
Se habilita por defecto. 

00:04:40.000 --> 00:04:43.745
Ya hemos hablado de CSRF,


00:04:43.745 --> 00:04:46.205
Cross-Sitio Solicita ataques de
falsificación


00:04:46.205 --> 00:04:48.815
en nuestros cursos anteriores. 

00:04:48.815 --> 00:04:52.260
Vamos a desactivarlo por ahora. 

00:04:52.840 --> 00:04:55.790
Eso es todo lo que hay a ella. 

00:04:55.790 --> 00:04:59.315
Ahora tenemos todas las características de
seguridad de Spring en su lugar. 

00:04:59.315 --> 00:05:01.490
Lo siguiente que
tenemos que hacer es
habilitar

00:05:01.490 --> 00:05:03.755
el cifrado
y el descifrado. 

00:05:03.755 --> 00:05:05.090
Y eso es lo que
vamos a echar


00:05:05.090 --> 00:05:07.500
un vistazo en nuestro próximo video. 
