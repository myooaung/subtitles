WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.030 --> 00:00:03.070
How can let us take a look
at one more example of

00:00:03.070 --> 00:00:06.550
Log Stash to get a better
sense of what it has

00:00:06.550 --> 00:00:09.130
to offer and the amount of

00:00:09.130 --> 00:00:12.805
flexibility that Log
Stash provides to us.

00:00:12.805 --> 00:00:14.380
In our previous example,

00:00:14.380 --> 00:00:17.515
we have dumped all or log
information to a file.

00:00:17.515 --> 00:00:19.975
Then from Log Stash,

00:00:19.975 --> 00:00:22.060
we're having a file as

00:00:22.060 --> 00:00:25.765
an input to read all the
events from that file.

00:00:25.765 --> 00:00:28.480
This time, we're going to let

00:00:28.480 --> 00:00:31.945
all our services definitely
communicate with Log Stash,

00:00:31.945 --> 00:00:35.005
sharing the log information
in JSON format.

00:00:35.005 --> 00:00:38.095
I've already done all the
necessarily configurations.

00:00:38.095 --> 00:00:39.400
I'm just going to walk you

00:00:39.400 --> 00:00:43.280
through that just
to save your time.

00:00:43.320 --> 00:00:48.010
So we need an entity from
our services that would

00:00:48.010 --> 00:00:49.765
take care of sending the data

00:00:49.765 --> 00:00:52.570
to Log Stash in JSON format.

00:00:52.570 --> 00:00:55.975
That entity is the Log Stash,

00:00:55.975 --> 00:00:57.865
log back and quarter.

00:00:57.865 --> 00:01:00.190
With this, we can
come AND gate with

00:01:00.190 --> 00:01:03.250
Log Stash or a TCP socket.

00:01:03.250 --> 00:01:06.805
Using encoder will
be able to encode

00:01:06.805 --> 00:01:11.605
the log messages which are in
plaintext into JSON format.

00:01:11.605 --> 00:01:13.960
After adding this dependency,

00:01:13.960 --> 00:01:17.125
we have to create
a conflict file.

00:01:17.125 --> 00:01:20.515
It has to be with
this exact name,

00:01:20.515 --> 00:01:23.740
and this has to go inside
the Resources folder.

00:01:23.740 --> 00:01:28.565
It can also be with the
name log back dot XML.

00:01:28.565 --> 00:01:30.620
But log back community documents

00:01:30.620 --> 00:01:32.840
us to use this name instead.

00:01:32.840 --> 00:01:35.120
Whatever I'm having here is

00:01:35.120 --> 00:01:37.295
a typical log back
configuration.

00:01:37.295 --> 00:01:40.580
But the key thing to note
here is this section

00:01:40.580 --> 00:01:44.675
of code we have
introduced and append,

00:01:44.675 --> 00:01:46.910
which is Log Stash.

00:01:46.910 --> 00:01:50.210
Tcp socket depends,
which will elegance to

00:01:50.210 --> 00:01:54.020
communicate with Log
Stash or a TCP socket.

00:01:54.020 --> 00:01:57.875
Here's where we have
provided the destination.

00:01:57.875 --> 00:02:00.890
That's the host where your
Log Stash is running,

00:02:00.890 --> 00:02:02.645
and the port number.

00:02:02.645 --> 00:02:04.295
In addition to that,

00:02:04.295 --> 00:02:07.400
we've also specified
Log Stash encoder,

00:02:07.400 --> 00:02:10.280
convert on log
messages which were

00:02:10.280 --> 00:02:13.430
in plain text to JSON format.

00:02:13.430 --> 00:02:17.810
You can also do that conversion
in Log Stash or here,

00:02:17.810 --> 00:02:20.310
like we're doing in this case.

00:02:21.130 --> 00:02:24.020
You need to have
similar configurations

00:02:24.020 --> 00:02:26.165
across all the microservices.

00:02:26.165 --> 00:02:29.420
I've already done that
to save your time.

00:02:29.420 --> 00:02:31.130
Once you add this simple motion,

00:02:31.130 --> 00:02:34.580
makes sure that you do Gradle
refresh of the project.

00:02:34.580 --> 00:02:37.160
You'll have all those
dependencies in place.

00:02:37.160 --> 00:02:39.140
And you don't have any
surprises when you run

00:02:39.140 --> 00:02:43.145
your application from Log Stash.

00:02:43.145 --> 00:02:46.595
This time, instead of
having file as an input,

00:02:46.595 --> 00:02:50.355
we're going to have
TCP as an input.

00:02:50.355 --> 00:02:53.140
So we're going to use
this TCP plug-in.

00:02:53.140 --> 00:02:55.270
We had specified the port

00:02:55.270 --> 00:02:58.105
from where it needs to
read the events from.

00:02:58.105 --> 00:03:02.530
The codec is going to
be the format of JSON.

00:03:02.530 --> 00:03:05.860
Because that's what we're
sending from source,

00:03:05.860 --> 00:03:08.530
which are the micro-services.

00:03:08.530 --> 00:03:11.770
Once you have these
in place and run

00:03:11.770 --> 00:03:14.290
all your applications,
everything works.

00:03:14.290 --> 00:03:16.090
Just as before.

00:03:16.090 --> 00:03:20.029
I had send a request
over Postman.

00:03:21.930 --> 00:03:26.439
Log messages are
propagated and Kibana,

00:03:26.439 --> 00:03:28.780
I'm able to search using

00:03:28.780 --> 00:03:32.240
the trace ID. Here's
what I've got.
