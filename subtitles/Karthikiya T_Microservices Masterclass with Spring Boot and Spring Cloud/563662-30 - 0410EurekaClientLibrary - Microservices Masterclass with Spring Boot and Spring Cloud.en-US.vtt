WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.420
So far we've seen how you'd
make our clients can register

00:00:03.420 --> 00:00:06.660
themselves and even
perform service discovery.

00:00:06.660 --> 00:00:08.400
But if you really notice,

00:00:08.400 --> 00:00:11.595
as a developer, I've done
pretty much nothing.

00:00:11.595 --> 00:00:14.430
All I've done is added a
couple of dependencies,

00:00:14.430 --> 00:00:16.470
couple of annotations, and

00:00:16.470 --> 00:00:19.275
maybe a couple of
properties, and we're done.

00:00:19.275 --> 00:00:20.910
Everything else is taken care by

00:00:20.910 --> 00:00:23.370
the UDK client and
server libraries.

00:00:23.370 --> 00:00:26.130
However, there might be
instances where you want to

00:00:26.130 --> 00:00:29.730
get fine-grained control
on what's happening.

00:00:29.730 --> 00:00:32.820
For example, maybe you'd like
to retrieve all the list of

00:00:32.820 --> 00:00:35.880
connected clients and
do something with them.

00:00:35.880 --> 00:00:38.145
You're going to get them
in the form of a stream,

00:00:38.145 --> 00:00:40.050
put lambda expression
or something,

00:00:40.050 --> 00:00:41.845
and do something with it.

00:00:41.845 --> 00:00:44.855
Maybe you'd like to
retrieve all the list of

00:00:44.855 --> 00:00:47.000
available servers and pick

00:00:47.000 --> 00:00:49.280
the one which is
closer to the client,

00:00:49.280 --> 00:00:51.200
something of that sort.

00:00:51.200 --> 00:00:54.020
In order to do that, we can

00:00:54.020 --> 00:00:56.915
actually dependency
inject the Utica client.

00:00:56.915 --> 00:00:59.195
Now I'm going to
show you just that

00:00:59.195 --> 00:01:02.315
went to open the controller
of product service.

00:01:02.315 --> 00:01:05.510
And I went to auto wire.

00:01:05.510 --> 00:01:08.850
Eureka client real quick.

00:01:16.600 --> 00:01:22.805
Now we can use this to leverage
all its functionality.

00:01:22.805 --> 00:01:28.470
There are bunch of methods
which we can utilize.

00:01:30.340 --> 00:01:33.920
Get applications would get

00:01:33.920 --> 00:01:36.630
us all the list of applications.

00:01:38.620 --> 00:01:42.215
Similarly, we got a
bunch of other methods.

00:01:42.215 --> 00:01:44.645
If you have the instance ID,

00:01:44.645 --> 00:01:46.910
then you can retrieve
the information about

00:01:46.910 --> 00:01:50.540
and stands by its ID.

00:01:50.540 --> 00:01:53.870
You can do similar
stuff by its name,

00:01:53.870 --> 00:01:57.150
get application, by its name.

00:01:58.630 --> 00:02:01.580
Suggest, explore all
these methods along with

00:02:01.580 --> 00:02:04.055
the description
and get a sense of

00:02:04.055 --> 00:02:09.770
what their purposes can
retrieve all the known regions.

00:02:09.770 --> 00:02:11.660
That might be helpful
if you want to

00:02:11.660 --> 00:02:13.430
connect with something called an

00:02:13.430 --> 00:02:17.655
instance which is closer
to your application,

00:02:17.655 --> 00:02:20.580
something of that sort.

00:02:22.690 --> 00:02:26.750
Let me just demonstrate,
get applications.

00:02:26.750 --> 00:02:30.860
Went to set, get to
distort applications.

00:02:30.860 --> 00:02:35.370
I'm going to wrap this
inside as a salt statement.

00:02:35.470 --> 00:02:39.410
Let me have a string in
here just so that we can

00:02:39.410 --> 00:02:43.950
locate this inside the logs.

00:02:47.470 --> 00:02:52.220
Maybe whatever. Doesn't matter.

00:02:52.220 --> 00:02:56.550
Let me relaunch our
product service.

00:03:11.260 --> 00:03:14.820
Let's go to Postman.

00:03:18.370 --> 00:03:22.715
Let me just copy
everything in here.

00:03:22.715 --> 00:03:24.710
Open up Notepad Plus,

00:03:24.710 --> 00:03:27.365
Plus or some editor.

00:03:27.365 --> 00:03:32.480
Let's search for apps list.

00:03:32.480 --> 00:03:37.760
And there you have
it. We're able to

00:03:37.760 --> 00:03:43.235
locate the pricing service
and under service unknown,

00:03:43.235 --> 00:03:46.830
that actually points
to the Eureka silver.

00:03:48.370 --> 00:03:51.800
Even the product service

00:03:51.800 --> 00:03:56.000
were able to take a look
at all its information,

00:03:56.000 --> 00:03:59.195
like port on which
it is running.

00:03:59.195 --> 00:04:06.990
Then stands ID, host name
or IP address and whatnot.

00:04:09.130 --> 00:04:12.300
Let's go back.

00:04:13.750 --> 00:04:17.675
Now I want you to take
this as an assignment.

00:04:17.675 --> 00:04:20.150
Try to explore all
the other methods

00:04:20.150 --> 00:04:22.085
that are part of
the record client.

00:04:22.085 --> 00:04:25.980
Get creative and try to
do something with it.

00:04:27.460 --> 00:04:30.350
Just explore all the
methods and try to

00:04:30.350 --> 00:04:34.110
understand what their
purpose could be.
