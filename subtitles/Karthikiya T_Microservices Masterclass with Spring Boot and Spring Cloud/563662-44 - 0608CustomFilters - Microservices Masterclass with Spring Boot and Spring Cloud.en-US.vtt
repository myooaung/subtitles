WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.800
In this video, we're
going to take a look at

00:00:01.800 --> 00:00:04.095
how to create custom filters.

00:00:04.095 --> 00:00:06.510
And I must say that
this is one of

00:00:06.510 --> 00:00:09.840
the important concepts
of gateway because this

00:00:09.840 --> 00:00:10.860
is what would allow us to

00:00:10.860 --> 00:00:13.620
implement cross-cutting
concerns inside

00:00:13.620 --> 00:00:15.540
the gateway so
that we don't have

00:00:15.540 --> 00:00:19.150
to have the macros,
all the microservices.

00:00:19.190 --> 00:00:23.475
To benefit the time I've
actually created the code.

00:00:23.475 --> 00:00:26.440
I'm just going to walk
you through this.

00:00:26.440 --> 00:00:29.675
All I've done is
I've created a class

00:00:29.675 --> 00:00:33.365
that extends abstract
gateway FilterFactory.

00:00:33.365 --> 00:00:36.185
And this is going to accept
one generic parameter,

00:00:36.185 --> 00:00:39.245
which is actually the class.

00:00:39.245 --> 00:00:41.750
We're going to talk about
this in just a bit.

00:00:41.750 --> 00:00:46.340
But the key method here
is the apply method,

00:00:46.340 --> 00:00:48.169
which we need to override,

00:00:48.169 --> 00:00:50.060
ignore all the other methods.

00:00:50.060 --> 00:00:52.310
Those are just private methods

00:00:52.310 --> 00:00:54.860
which we're using inside here.

00:00:54.860 --> 00:00:57.485
This method is going to return

00:00:57.485 --> 00:01:00.725
a lambda expression with
a couple of arguments.

00:01:00.725 --> 00:01:03.185
Exchange and chain.

00:01:03.185 --> 00:01:05.870
Exchange would
allow us to access

00:01:05.870 --> 00:01:09.215
the request so that we
can do something with it.

00:01:09.215 --> 00:01:14.195
We use a chain object in order
to send back the response.

00:01:14.195 --> 00:01:17.450
What I'm trying to do here
is I'm trying to simulate

00:01:17.450 --> 00:01:20.825
the behavior of
authorizing a user.

00:01:20.825 --> 00:01:23.570
Initial am checking to see if

00:01:23.570 --> 00:01:26.555
the request has the
authorization header.

00:01:26.555 --> 00:01:30.200
If it's not, I'm just
calling on error method,

00:01:30.200 --> 00:01:32.630
which is just simply Abby

00:01:32.630 --> 00:01:34.850
send back error as a
response or whatever.

00:01:34.850 --> 00:01:38.490
You can literally do
anything inside here.

00:01:39.040 --> 00:01:41.990
If this is if

00:01:41.990 --> 00:01:45.260
this condition is not
met, then we are good.

00:01:45.260 --> 00:01:48.770
We went to proceed and
actually fetch the value of

00:01:48.770 --> 00:01:53.250
the header and pass
it to this method.

00:01:53.650 --> 00:01:58.100
Inside here, we'll
have some code that

00:01:58.100 --> 00:01:59.930
will actually validate whether

00:01:59.930 --> 00:02:01.880
the user is authorized or not.

00:02:01.880 --> 00:02:05.060
And based on that, some Boolean
value would be sent back.

00:02:05.060 --> 00:02:08.780
In this case, I'm just
hard-coding the value to be true.

00:02:08.780 --> 00:02:11.840
But of course, in
real-world applications,

00:02:11.840 --> 00:02:14.435
you might be having
the actual code.

00:02:14.435 --> 00:02:15.950
In fact, we're going to explore

00:02:15.950 --> 00:02:18.140
Spring Security for
Microsoft says,

00:02:18.140 --> 00:02:23.540
and we actually
talked about this.

00:02:23.540 --> 00:02:27.185
Once the user is authorized,

00:02:27.185 --> 00:02:29.510
we went to just
simply do something.

00:02:29.510 --> 00:02:30.710
And again, in this case,

00:02:30.710 --> 00:02:33.035
I'm just trying to do
something really random.

00:02:33.035 --> 00:02:39.170
I'm just trying to change the
path of the request to 103.

00:02:39.170 --> 00:02:41.510
Obviously, this may not
make complete sense,

00:02:41.510 --> 00:02:43.640
but you can literally do

00:02:43.640 --> 00:02:47.180
anything in here
with that request.

00:02:47.180 --> 00:02:51.425
Finally, I'm using
the chain object

00:02:51.425 --> 00:02:56.075
in order to return
the gateway filter.

00:02:56.075 --> 00:03:00.020
Now this is pre filter
meaning that we're changing

00:03:00.020 --> 00:03:05.675
the request before it's sent
to the downstream node.

00:03:05.675 --> 00:03:08.885
And once we have this in place,

00:03:08.885 --> 00:03:13.355
we're just simply going
to let the Spring

00:03:13.355 --> 00:03:16.235
inject the instance of

00:03:16.235 --> 00:03:19.130
my custom filter that
we just created.

00:03:19.130 --> 00:03:23.510
And that's possible because
this is a component.

00:03:23.510 --> 00:03:27.380
This would be auto scanned
and spring will create

00:03:27.380 --> 00:03:31.295
an instance using
dependency injection.

00:03:31.295 --> 00:03:33.590
This would be
injected and that's

00:03:33.590 --> 00:03:37.115
exactly what I'm
using inside here.

00:03:37.115 --> 00:03:39.995
How created the filters.

00:03:39.995 --> 00:03:43.160
In this case, we just
have one filter though,

00:03:43.160 --> 00:03:49.790
and this accepts a lambda
expression filter.

00:03:49.790 --> 00:03:51.500
My customFilter dot apply,

00:03:51.500 --> 00:03:53.015
I'm just calling that method.

00:03:53.015 --> 00:03:56.285
I'm passing the config object,

00:03:56.285 --> 00:03:59.990
which is actually
the inner class.

00:03:59.990 --> 00:04:03.485
If you want to send
some data in here,

00:04:03.485 --> 00:04:06.980
you can actually set
some properties and

00:04:06.980 --> 00:04:08.630
read them inside this
method because you

00:04:08.630 --> 00:04:11.375
have access to that object.

00:04:11.375 --> 00:04:13.970
But at the moment,

00:04:13.970 --> 00:04:16.520
there is no need for that.

00:04:16.520 --> 00:04:19.985
But you can do it if you wish.

00:04:19.985 --> 00:04:25.580
I also have the
application running.

00:04:25.580 --> 00:04:28.205
Let's test our application.

00:04:28.205 --> 00:04:33.775
Some sending requests to 102.

00:04:33.775 --> 00:04:35.830
We're trying to
retrieve the price

00:04:35.830 --> 00:04:40.270
of a product with ID 102.

00:04:40.270 --> 00:04:43.100
When I send the request,

00:04:43.500 --> 00:04:45.670
we're actually going to get back

00:04:45.670 --> 00:04:48.790
the response of product 103.

00:04:48.790 --> 00:04:53.320
That's because we have
changed the request,

00:04:53.320 --> 00:04:55.870
manipulated the request before

00:04:55.870 --> 00:04:58.610
sending it to the
downstream node.

00:04:58.710 --> 00:05:03.130
Talking about post
filters in Shroff

00:05:03.130 --> 00:05:07.060
returning like this way

00:05:07.060 --> 00:05:10.990
to actually pass a
lambda expression.

00:05:10.990 --> 00:05:16.330
Like so. So you would say
mono dot from runnable,

00:05:16.330 --> 00:05:18.580
pass the lambda expression
and do whatever you

00:05:18.580 --> 00:05:20.755
want to do inside here.

00:05:20.755 --> 00:05:23.425
And typically we would
add the display error

00:05:23.425 --> 00:05:27.865
or we would perform
logging, stuff like that.

00:05:27.865 --> 00:05:30.010
This would work as well.

00:05:30.010 --> 00:05:32.450
I've already tested it.

00:05:32.670 --> 00:05:36.020
We're just simply going to

00:05:36.810 --> 00:05:42.069
say the statement getting
printed on the console.

00:05:42.069 --> 00:05:45.230
When we send the request.

00:05:57.480 --> 00:06:02.930
Let's go to Postman
and send the request.

00:06:03.810 --> 00:06:11.185
And here's the message.

00:06:11.185 --> 00:06:15.250
We have one more type of
filter to talk about,

00:06:15.250 --> 00:06:18.370
and that's why you're
seeing this message.

00:06:18.370 --> 00:06:21.310
And it is global filter.

00:06:21.310 --> 00:06:24.385
You just have to create
a class that implements

00:06:24.385 --> 00:06:26.710
global filter and provide

00:06:26.710 --> 00:06:29.540
implementation for
the filter method.

00:06:29.910 --> 00:06:33.534
Guess what? The name suggests.

00:06:33.534 --> 00:06:35.680
This is a global filter,

00:06:35.680 --> 00:06:39.315
meaning applicable
for all the requests.

00:06:39.315 --> 00:06:45.450
And in here I'm just trying
to simply display message.

00:06:47.350 --> 00:06:55.230
Our custom filter is only
applicable for this route.

00:06:56.500 --> 00:06:59.780
While the global filter is

00:06:59.780 --> 00:07:03.510
literally applicable
for all the requests.
