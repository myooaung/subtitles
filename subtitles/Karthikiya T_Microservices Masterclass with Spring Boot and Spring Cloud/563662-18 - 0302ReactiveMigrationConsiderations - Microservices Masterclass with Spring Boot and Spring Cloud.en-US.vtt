WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.285
Given all that one day, just
with React to programming,

00:00:03.285 --> 00:00:05.295
should you be
migrating your project

00:00:05.295 --> 00:00:07.335
to start using
React to libraries?

00:00:07.335 --> 00:00:11.580
Well, the answer may not
be so simple because you

00:00:11.580 --> 00:00:13.170
need to consider a
lot of things very

00:00:13.170 --> 00:00:16.245
seriously before trying
to migrate your project.

00:00:16.245 --> 00:00:18.090
Here are some of them.

00:00:18.090 --> 00:00:19.920
One blocking call can actually

00:00:19.920 --> 00:00:22.050
block the entire application.

00:00:22.050 --> 00:00:24.150
Well, what does this mean?

00:00:24.150 --> 00:00:26.820
That you have a very
large application with

00:00:26.820 --> 00:00:29.715
maybe hundreds of
micro-services.

00:00:29.715 --> 00:00:33.750
Let's say that a new developer
who just joined your team

00:00:33.750 --> 00:00:36.120
introduced a piece of code

00:00:36.120 --> 00:00:39.400
which is actually causing
blocking operation.

00:00:39.400 --> 00:00:42.230
Let's call it node
a or Microsoft is a

00:00:42.230 --> 00:00:45.305
where this is happening.
Now guess what?

00:00:45.305 --> 00:00:47.285
In an instance of high traffic,

00:00:47.285 --> 00:00:50.030
node a is limited with number of

00:00:50.030 --> 00:00:53.315
available threads to deal
with incoming requests.

00:00:53.315 --> 00:00:55.190
If the thread pool is full,

00:00:55.190 --> 00:00:57.950
all the other requests would
have to wait until one

00:00:57.950 --> 00:01:01.145
of the threads is
available for processing.

00:01:01.145 --> 00:01:03.530
Because all the existing
threats are waiting for

00:01:03.530 --> 00:01:06.260
the response from all
the downstream nodes.

00:01:06.260 --> 00:01:07.670
Now guess what?

00:01:07.670 --> 00:01:09.770
All the downstream nodes which

00:01:09.770 --> 00:01:12.320
are receiving calls from node a,

00:01:12.320 --> 00:01:14.600
essentially blocked as well.

00:01:14.600 --> 00:01:18.005
Because threads are
getting blocked in node a,

00:01:18.005 --> 00:01:19.670
which makes the request

00:01:19.670 --> 00:01:22.100
unavailable for all
the downstream nodes.

00:01:22.100 --> 00:01:24.650
So just because of one line of

00:01:24.650 --> 00:01:27.425
code which might be causing
blocking operation,

00:01:27.425 --> 00:01:29.450
it might actually defeat

00:01:29.450 --> 00:01:31.685
the purpose of react
to programming.

00:01:31.685 --> 00:01:33.320
If you're migrating
your project,

00:01:33.320 --> 00:01:36.350
you do have to be extra careful
to not leave any piece of

00:01:36.350 --> 00:01:39.770
code that might cause
blocking operation.

00:01:39.770 --> 00:01:42.455
However, practically
speaking from experience,

00:01:42.455 --> 00:01:43.985
it's really hard to have

00:01:43.985 --> 00:01:47.390
a project which has completely
reacted with nature.

00:01:47.390 --> 00:01:48.680
Because you might be having

00:01:48.680 --> 00:01:50.270
certain microservices
which might

00:01:50.270 --> 00:01:52.175
be using some legacy
technologies.

00:01:52.175 --> 00:01:53.750
They might be using

00:01:53.750 --> 00:01:56.060
some non-reactive libraries for

00:01:56.060 --> 00:01:59.285
which there are no react
to libraries available.

00:01:59.285 --> 00:02:01.580
They could also be using

00:02:01.580 --> 00:02:05.135
certain databases which
doesn't have react to support.

00:02:05.135 --> 00:02:07.265
It's really hard to have

00:02:07.265 --> 00:02:09.995
100% implementation of
react to programming.

00:02:09.995 --> 00:02:12.650
But you have to try
your level best to make

00:02:12.650 --> 00:02:15.425
as much code as
possible. React to.

00:02:15.425 --> 00:02:19.100
We do have certain tools like
block horn for instance,

00:02:19.100 --> 00:02:22.460
which should help you find all
those blocking operations.

00:02:22.460 --> 00:02:24.410
But still it's quite a task for

00:02:24.410 --> 00:02:26.720
a dollar per identify them.

00:02:26.720 --> 00:02:28.280
Let me switch over to Eclipse.

00:02:28.280 --> 00:02:33.240
We're a bit right now we
have price controller.

00:02:33.250 --> 00:02:38.735
We have kept the statement
to wait for ten seconds.

00:02:38.735 --> 00:02:41.915
This is to simulate
something being performed.

00:02:41.915 --> 00:02:44.470
It takes about ten seconds.

00:02:44.470 --> 00:02:47.090
We've already seen
we're able to print

00:02:47.090 --> 00:02:50.720
these two statements without
waiting for ten seconds.

00:02:50.720 --> 00:02:53.300
But let's say we

00:02:53.300 --> 00:02:56.330
have a blocking operation
somewhere in the middle.

00:02:56.330 --> 00:02:58.730
Let's call it block.

00:02:58.730 --> 00:03:00.920
I call this method block,

00:03:00.920 --> 00:03:03.575
which makes it a
blocking operation.

00:03:03.575 --> 00:03:08.430
Now the thread would wait
for ten seconds or so.

00:03:08.530 --> 00:03:13.310
Only then will it proceed
to other instructions.

00:03:13.310 --> 00:03:18.065
We do have to make
changes here as well.

00:03:18.065 --> 00:03:24.180
Now let's just simply
hardcode the value.

00:03:25.030 --> 00:03:28.350
Whatever it doesn't matter.

00:03:30.100 --> 00:03:35.075
Get it off this no
longer than mono.

00:03:35.075 --> 00:03:37.740
This supposed to be.

00:03:38.590 --> 00:03:41.670
Let's save the file,

00:03:41.830 --> 00:03:47.030
relaunch our application, or
rather the product service.

00:03:47.030 --> 00:03:50.070
Let's go to Postman outlined.

00:03:57.970 --> 00:04:01.710
Let's keep the console open.

00:04:02.980 --> 00:04:05.855
Send the request.

00:04:05.855 --> 00:04:10.019
The first statement is printed.

00:04:10.210 --> 00:04:13.920
Going to take ten seconds.

00:04:14.560 --> 00:04:18.770
Before we see how the
statement getting printed.

00:04:18.770 --> 00:04:24.380
That means the thread
was blocked just

00:04:24.380 --> 00:04:25.550
because of one line of

00:04:25.550 --> 00:04:30.305
code which is causing
blocking operation.

00:04:30.305 --> 00:04:32.765
I hope you are able to
get what I mean to say.

00:04:32.765 --> 00:04:35.490
Let's undo those changes.

00:04:39.190 --> 00:04:42.170
Another point to note when
it comes to implementing

00:04:42.170 --> 00:04:44.930
reactive programming is that one

00:04:44.930 --> 00:04:46.430
should realize that

00:04:46.430 --> 00:04:48.320
reactive programming
doesn't contribute

00:04:48.320 --> 00:04:50.180
much in terms of

00:04:50.180 --> 00:04:52.880
resource utilization
or the response time.

00:04:52.880 --> 00:04:54.620
If it takes about ten seconds

00:04:54.620 --> 00:04:56.344
for a user to see the response,

00:04:56.344 --> 00:04:59.030
it would take pretty much
the same amount of time.

00:04:59.030 --> 00:05:01.475
Even in case of
reactive programming.

00:05:01.475 --> 00:05:03.320
Even though
utilization of RAM and

00:05:03.320 --> 00:05:06.185
CPU would pretty
much remains same.

00:05:06.185 --> 00:05:07.970
If not, it might actually

00:05:07.970 --> 00:05:09.920
increase the utilization
of those resources

00:05:09.920 --> 00:05:12.035
because of the
additional overhead

00:05:12.035 --> 00:05:14.820
of dealing with
reactive programming.

00:05:15.040 --> 00:05:17.780
One must realize that react to

00:05:17.780 --> 00:05:20.450
programming is just
there to make the most

00:05:20.450 --> 00:05:22.520
out of existing threads or

00:05:22.520 --> 00:05:25.160
rather efficient usage
of existing threats,

00:05:25.160 --> 00:05:27.245
rather than trying to improve

00:05:27.245 --> 00:05:30.720
the resource utilization
or the response time.

00:05:31.180 --> 00:05:33.800
If you have a team who are

00:05:33.800 --> 00:05:36.170
used to non-reactive
way of programming.

00:05:36.170 --> 00:05:39.350
And now they want to jump
into react to programming.

00:05:39.350 --> 00:05:41.105
That is quite a task.

00:05:41.105 --> 00:05:44.600
And I believe you yourself
might have experienced this.

00:05:44.600 --> 00:05:47.930
It's really challenging to
understand the stream API,

00:05:47.930 --> 00:05:52.505
lambda expressions, how react
to programming works, etc.

00:05:52.505 --> 00:05:55.100
Imagine for large projects,

00:05:55.100 --> 00:05:56.840
it's really quite
a task to train

00:05:56.840 --> 00:05:59.810
the team to make them
deliver on time.

00:05:59.810 --> 00:06:02.180
In fact, this is one of
the challenging task

00:06:02.180 --> 00:06:05.220
which I experienced
myself in the past.
