WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.720
Let us try to understand the
concept of load balancing.

00:00:03.720 --> 00:00:05.670
Say that you're
running a restaurant

00:00:05.670 --> 00:00:07.020
where you deliver pizzas to

00:00:07.020 --> 00:00:11.325
your customers and say that
you have three delivery boys.

00:00:11.325 --> 00:00:15.330
Now assume that there are
ten orders right now,

00:00:15.330 --> 00:00:17.040
which needs to be processed.

00:00:17.040 --> 00:00:18.600
Now, would it be nice to assign

00:00:18.600 --> 00:00:21.225
all those ten orders
to one delivery boy,

00:00:21.225 --> 00:00:22.830
or would it be nice to assign

00:00:22.830 --> 00:00:25.620
them across all these
three delivery boys?

00:00:25.620 --> 00:00:27.420
Let's say that
you've assigned all

00:00:27.420 --> 00:00:29.365
of them to one delivery boy.

00:00:29.365 --> 00:00:31.280
What's the downside of it?

00:00:31.280 --> 00:00:33.695
One obvious downside is that

00:00:33.695 --> 00:00:36.170
you're going to owe
button one delivery boy,

00:00:36.170 --> 00:00:39.545
while others are just
sitting idle to nothing.

00:00:39.545 --> 00:00:43.910
It would be wise to utilize
all your resources.

00:00:43.910 --> 00:00:46.370
Another downside is, of course,

00:00:46.370 --> 00:00:48.964
it's going to impact
the overall throughput.

00:00:48.964 --> 00:00:52.505
Meaning the amount
of orders processed,

00:00:52.505 --> 00:00:55.760
our amount of pizzas
delivered in a given time.

00:00:55.760 --> 00:00:58.100
So obviously, a better way to

00:00:58.100 --> 00:01:00.440
deal with this situation is to

00:01:00.440 --> 00:01:03.260
distribute the
responsibility across

00:01:03.260 --> 00:01:05.360
all these delivery boys so

00:01:05.360 --> 00:01:08.075
that none of them
would be overloaded.

00:01:08.075 --> 00:01:11.550
That's exactly what
is load balancing.

00:01:11.550 --> 00:01:13.494
Same principle is applicable

00:01:13.494 --> 00:01:15.340
even in case of microservices.

00:01:15.340 --> 00:01:17.650
You have a service
client which might send

00:01:17.650 --> 00:01:20.335
request to multiple
other micro-services.

00:01:20.335 --> 00:01:22.720
Now let's let your having
an e-commerce website

00:01:22.720 --> 00:01:23.935
and you're running sales,

00:01:23.935 --> 00:01:26.785
obviously wanted to scale
up certain microservices,

00:01:26.785 --> 00:01:28.660
maybe something like orders,

00:01:28.660 --> 00:01:30.550
because during sales
you're going to

00:01:30.550 --> 00:01:33.670
have a lot of customer orders.

00:01:33.670 --> 00:01:36.280
You might end up creating
multiple instances

00:01:36.280 --> 00:01:37.990
of a particular service.

00:01:37.990 --> 00:01:39.954
In fact, in most cases,

00:01:39.954 --> 00:01:40.600
you're going to have

00:01:40.600 --> 00:01:42.190
multiple instances
for each and every

00:01:42.190 --> 00:01:45.025
micro-service out
there on the Cloud.

00:01:45.025 --> 00:01:47.905
But when you have
multiple instances,

00:01:47.905 --> 00:01:50.620
it's always better to load

00:01:50.620 --> 00:01:54.610
balance the requests amongst
all these instances.

00:01:54.610 --> 00:01:59.035
And the advantages that comes
with it are quite obvious.

00:01:59.035 --> 00:02:01.660
It's going to increase the
overall response time.

00:02:01.660 --> 00:02:05.305
You don't end up overloading
one particular instance.

00:02:05.305 --> 00:02:07.045
And at the same time,

00:02:07.045 --> 00:02:09.190
this is going to help
us optimal utilize

00:02:09.190 --> 00:02:11.740
the given resources
and will also

00:02:11.740 --> 00:02:14.620
help us maximize the
overall throughput.

00:02:14.620 --> 00:02:16.330
In fact, one of the
reasons why you

00:02:16.330 --> 00:02:17.890
might move to Microsoft is

00:02:17.890 --> 00:02:21.970
architecture is because of
horizontal scalability.

00:02:21.970 --> 00:02:23.590
Meaning when the demand

00:02:23.590 --> 00:02:25.600
increases event to
increase the number of

00:02:25.600 --> 00:02:30.040
instances rather than adding
up extra hardware resources.

00:02:30.040 --> 00:02:32.815
If you don't have load
balancer in place,

00:02:32.815 --> 00:02:35.590
you might actually end up
destroying the very purpose

00:02:35.590 --> 00:02:39.330
of why you have a
horizontal scaling.

00:02:39.460 --> 00:02:43.625
That's what is load
balancing is all about.

00:02:43.625 --> 00:02:46.205
Now there are a couple of
types of load balancing.

00:02:46.205 --> 00:02:48.020
One is done from
the client side,

00:02:48.020 --> 00:02:52.069
The other is so-called a
server-side load balancing.

00:02:52.069 --> 00:02:54.110
We're going to talk about
the difference between those

00:02:54.110 --> 00:02:56.044
two in future lectures.

00:02:56.044 --> 00:02:57.590
But for now, let us just

00:02:57.590 --> 00:02:59.854
focus on client-side
load balancing.

00:02:59.854 --> 00:03:02.945
And the library that's
going to help us accomplish

00:03:02.945 --> 00:03:07.160
client side load balancing
is Netflix ribbon.

00:03:07.160 --> 00:03:08.840
In our next lecture,
we're going to

00:03:08.840 --> 00:03:09.920
take a look at how this is

00:03:09.920 --> 00:03:13.829
all going to walk
with a good example.
