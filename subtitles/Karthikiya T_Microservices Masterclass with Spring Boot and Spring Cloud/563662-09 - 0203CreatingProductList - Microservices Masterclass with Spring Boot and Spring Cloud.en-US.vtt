WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.255
So far we are
trying to hard-code

00:00:02.255 --> 00:00:04.110
all the product details and

00:00:04.110 --> 00:00:06.195
then sending it
back as a response.

00:00:06.195 --> 00:00:09.090
But what ideally supposed
to happen way to

00:00:09.090 --> 00:00:12.495
get all this information
from multiple microservices.

00:00:12.495 --> 00:00:15.450
For example, went to get
the product name and

00:00:15.450 --> 00:00:20.639
description from a table
residing in the product service.

00:00:20.639 --> 00:00:24.090
The price of the product
from the price and service,

00:00:24.090 --> 00:00:25.770
and then stock availability

00:00:25.770 --> 00:00:28.650
details from the
inventory service.

00:00:28.650 --> 00:00:31.245
Let me jot down
everything in here.

00:00:31.245 --> 00:00:34.800
Get name and description.

00:00:34.800 --> 00:00:41.814
Some product service, get
the price from rising.

00:00:41.814 --> 00:00:47.825
This get stock availability
from inventory.

00:00:47.825 --> 00:00:49.535
Service.

00:00:49.535 --> 00:00:52.520
Since we don't have
these two microservices,

00:00:52.520 --> 00:00:54.215
we'll ignore them for now.

00:00:54.215 --> 00:00:56.300
But let's take care
of the first step.

00:00:56.300 --> 00:00:58.670
Imagine that you
have a database.

00:00:58.670 --> 00:01:01.430
Then you could be having
a table that will

00:01:01.430 --> 00:01:05.135
have list of products with
the name and description.

00:01:05.135 --> 00:01:07.250
Since we don't have a database,

00:01:07.250 --> 00:01:10.460
will try to replicate the
same behavior by just

00:01:10.460 --> 00:01:14.270
populating the product
information inside an error list.

00:01:14.270 --> 00:01:16.820
Then we'll try to fetch

00:01:16.820 --> 00:01:19.610
an individual product
details using

00:01:19.610 --> 00:01:24.315
its identifier that we get
from the client application.

00:01:24.315 --> 00:01:27.445
So I'm going to introduce
a list in here.

00:01:27.445 --> 00:01:33.190
This is going to hold
product info objects.

00:01:33.190 --> 00:01:35.050
We don't have this class yet.

00:01:35.050 --> 00:01:37.240
We'll create it in awhile.

00:01:37.240 --> 00:01:39.700
The product object is

00:01:39.700 --> 00:01:42.730
used just to hold information
so that we can send

00:01:42.730 --> 00:01:45.550
back the response while
product info will

00:01:45.550 --> 00:01:48.100
hold the name and description

00:01:48.100 --> 00:01:51.024
of the product product list,

00:01:51.024 --> 00:01:57.580
new list of product
info objects.

00:01:57.580 --> 00:02:00.340
I'll do come door shift

00:02:00.340 --> 00:02:04.300
to import the required
classes and interfaces.

00:02:04.300 --> 00:02:05.620
And if you hover your mouse on

00:02:05.620 --> 00:02:08.850
this era and get to
create the class.

00:02:09.550 --> 00:02:12.950
This is going to be
our model object.

00:02:12.950 --> 00:02:18.120
And this would hold
these three information,

00:02:18.610 --> 00:02:22.100
product ID, name,
and description.

00:02:22.100 --> 00:02:25.940
You're also going to put
the lumbar connotations.

00:02:25.940 --> 00:02:29.570
And you know why we're doing so.

00:02:29.570 --> 00:02:35.900
Inside here will retrieve

00:02:35.900 --> 00:02:46.100
the product information of a
specific product, get info.

00:02:46.100 --> 00:02:49.260
And we'll pass the identifier.

00:02:49.950 --> 00:02:54.655
We're going to populate this
list with list of products.

00:02:54.655 --> 00:02:56.530
And then we'll try to find

00:02:56.530 --> 00:02:59.605
a specific product based
on its identifier.

00:02:59.605 --> 00:03:01.840
Let's change this name to

00:03:01.840 --> 00:03:05.080
get product details that
might be confusing.

00:03:05.080 --> 00:03:08.065
That's introduced this method.

00:03:08.065 --> 00:03:11.155
Here we'll introduce some logic

00:03:11.155 --> 00:03:14.365
to search for a
product is div's ID.

00:03:14.365 --> 00:03:18.080
But before that, let's
populate the product list.

00:03:18.660 --> 00:03:20.890
Let's introduce this method.

00:03:20.890 --> 00:03:22.435
Imagine that we are populating

00:03:22.435 --> 00:03:26.350
all these product details
inside a database table.

00:03:26.350 --> 00:03:28.540
Since we don't have a database,

00:03:28.540 --> 00:03:33.260
I'm just doing it
manually in this manner.

00:03:33.270 --> 00:03:39.295
Would take this list and keep
on adding a few elements,

00:03:39.295 --> 00:03:44.170
add new product in

00:03:44.170 --> 00:03:55.370
full. Like so.

00:03:57.690 --> 00:04:01.360
Went to add a couple
of more products.

00:04:01.360 --> 00:04:04.600
Of course, we need to
change the identifier.

00:04:04.600 --> 00:04:08.270
This is going to
be maybe a book.

00:04:08.850 --> 00:04:12.910
Book is great or whatever.

00:04:12.910 --> 00:04:15.339
And this is going to be say,

00:04:15.339 --> 00:04:18.500
washing machine,

00:04:25.680 --> 00:04:30.320
necessarily, whatever.

00:04:30.450 --> 00:04:35.080
Then here we'll try to use the

00:04:35.080 --> 00:04:40.310
for-each construct for
each product of type.

00:04:43.110 --> 00:04:53.780
Product info inside the list.

00:04:54.420 --> 00:05:01.795
Check to see if the product ID

00:05:01.795 --> 00:05:06.925
equals p dot get ID.

00:05:06.925 --> 00:05:13.520
If so, then would just would
like to return that object.

00:05:19.110 --> 00:05:23.080
We no longer need to
hard-code these values,

00:05:23.080 --> 00:05:26.200
but we're going to
use this instead.

00:05:26.200 --> 00:05:28.960
Get product ID.

00:05:28.960 --> 00:05:34.250
And this needs to be replaced
with get product name.

00:05:34.860 --> 00:05:41.380
This right here with
product description.

00:05:41.380 --> 00:05:43.330
Soon down the line,

00:05:43.330 --> 00:05:45.910
will also retrieve
this information

00:05:45.910 --> 00:05:49.135
from other micro-services.

00:05:49.135 --> 00:05:50.770
But for now, let's run

00:05:50.770 --> 00:05:53.570
our application and
see if it's working.

00:06:01.440 --> 00:06:11.060
Let's end the statement
springboard app.

00:06:14.100 --> 00:06:18.475
Let's go to Postman client
and send the request.

00:06:18.475 --> 00:06:22.730
This has worked. Let's
change that into fire.

00:06:23.650 --> 00:06:28.009
And this has retrieved
information about the book.

00:06:28.009 --> 00:06:29.750
Of course, we need to work on

00:06:29.750 --> 00:06:32.765
the price and stock
availability,

00:06:32.765 --> 00:06:36.359
which will do it in
coming lectures.
