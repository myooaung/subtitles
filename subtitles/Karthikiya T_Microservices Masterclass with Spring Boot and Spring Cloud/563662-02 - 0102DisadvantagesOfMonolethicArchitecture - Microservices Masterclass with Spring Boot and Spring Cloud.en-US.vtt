WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.560
There are a lot of disadvantages

00:00:01.560 --> 00:00:03.420
with monolithic architecture.

00:00:03.420 --> 00:00:05.400
I want you to just
pause the video for

00:00:05.400 --> 00:00:07.770
a minute or two and
try to make a guess on

00:00:07.770 --> 00:00:10.500
at least a couple of
disadvantages that you see

00:00:10.500 --> 00:00:14.370
with monolithic architecture
and then continue watching.

00:00:14.370 --> 00:00:16.965
Let's talk about a few of them.

00:00:16.965 --> 00:00:19.545
Even if you were to
make a small change,

00:00:19.545 --> 00:00:22.680
you'd be required to test
the entire application.

00:00:22.680 --> 00:00:25.290
Going back to our
flight example,

00:00:25.290 --> 00:00:27.960
even if you are to make
small changes in jet engine,

00:00:27.960 --> 00:00:29.790
for instance, you'd have to test

00:00:29.790 --> 00:00:32.050
the entire plane, the flight.

00:00:32.050 --> 00:00:34.895
You cannot just test
the jet engine alone

00:00:34.895 --> 00:00:38.240
and be with an assumption
that flight will work.

00:00:38.240 --> 00:00:40.985
It just won't. You have to
test the entire flight.

00:00:40.985 --> 00:00:42.695
Make sure it runs well,

00:00:42.695 --> 00:00:44.780
even if you make
a small change in

00:00:44.780 --> 00:00:47.375
the jet engine in
the similar fashion,

00:00:47.375 --> 00:00:49.609
even if you were to
make a small change

00:00:49.609 --> 00:00:51.350
in any of these modules,

00:00:51.350 --> 00:00:53.570
you'd have to test the
entire application

00:00:53.570 --> 00:00:55.685
because you never know
what might break,

00:00:55.685 --> 00:00:58.985
because these modules are
dependent on each other.

00:00:58.985 --> 00:01:01.400
Another disadvantage is

00:01:01.400 --> 00:01:04.580
you cannot independently
scale is single module.

00:01:04.580 --> 00:01:07.100
The entire application
needs to be scaled.

00:01:07.100 --> 00:01:09.380
What this means is, for example,

00:01:09.380 --> 00:01:12.320
let's say you have
Amazon like application,

00:01:12.320 --> 00:01:14.360
and let's say that
you're running sales,

00:01:14.360 --> 00:01:16.730
maybe due to Black
Friday on whatever

00:01:16.730 --> 00:01:19.700
is there is going to be
increasing the traffic.

00:01:19.700 --> 00:01:22.730
You'd obviously have to
scale up the resources.

00:01:22.730 --> 00:01:24.695
But if you really do observe,

00:01:24.695 --> 00:01:27.800
you only need to scale
the order management.

00:01:27.800 --> 00:01:29.495
There's no point in Scaling

00:01:29.495 --> 00:01:31.100
product management or

00:01:31.100 --> 00:01:33.710
product recommendation
or admin module.

00:01:33.710 --> 00:01:34.790
You have to add the scale,

00:01:34.790 --> 00:01:37.685
the entire application
or not scale at all.

00:01:37.685 --> 00:01:40.460
With monolithic architecture,
you'd have to scale

00:01:40.460 --> 00:01:42.050
the entire application by

00:01:42.050 --> 00:01:44.330
making multiple copies
of your server,

00:01:44.330 --> 00:01:46.385
thereby reaching the demand.

00:01:46.385 --> 00:01:47.855
You can't just scale

00:01:47.855 --> 00:01:49.550
one single module because of

00:01:49.550 --> 00:01:51.320
the fact that all
these modules are

00:01:51.320 --> 00:01:53.795
combined and deployed together

00:01:53.795 --> 00:01:56.420
as a single unit
onto the server.

00:01:56.420 --> 00:01:57.980
Going back to fwrite example,

00:01:57.980 --> 00:02:00.410
for instance, if you
were to accommodate,

00:02:00.410 --> 00:02:03.890
say ten more seats to
accommodate and more people,

00:02:03.890 --> 00:02:05.420
you can't just cut the plane in

00:02:05.420 --> 00:02:07.700
half and add additional seats.

00:02:07.700 --> 00:02:10.070
That requires a lot
of re-engineering.

00:02:10.070 --> 00:02:12.530
We have to purchase
multiple planes

00:02:12.530 --> 00:02:14.270
in order to reach the demand,

00:02:14.270 --> 00:02:17.630
which is definitely not
cost-effective at all.

00:02:17.630 --> 00:02:20.510
That's another problem.
Another problem,

00:02:20.510 --> 00:02:23.645
reliance in handling the
complexity of the data.

00:02:23.645 --> 00:02:24.920
Let's say that you scaled up

00:02:24.920 --> 00:02:27.470
your application to
reach the demands.

00:02:27.470 --> 00:02:28.910
Now, are you going to have

00:02:28.910 --> 00:02:31.474
a single database for
all those servers?

00:02:31.474 --> 00:02:34.565
If so, how are you going
to overload that database?

00:02:34.565 --> 00:02:37.775
Or how are you going to have
a database for each server?

00:02:37.775 --> 00:02:40.130
If so, how do you
handle the complexity?

00:02:40.130 --> 00:02:41.600
Are you going to replicate

00:02:41.600 --> 00:02:44.600
the same data across
all the databases?

00:02:44.600 --> 00:02:46.460
What would happen if
somebody tries to

00:02:46.460 --> 00:02:49.610
transact while the replication
is still in progress.

00:02:49.610 --> 00:02:50.810
How do you handle that?

00:02:50.810 --> 00:02:52.880
So there's a lot
of complexity in

00:02:52.880 --> 00:02:55.790
handling data with
monolithic application.

00:02:55.790 --> 00:03:00.260
Another disadvantage is
if one module goes down,

00:03:00.260 --> 00:03:03.154
then the entire
application would crash.

00:03:03.154 --> 00:03:04.505
That's where it true.

00:03:04.505 --> 00:03:06.859
Going back to our
example, for instance,

00:03:06.859 --> 00:03:10.685
jet engine fails, then the
entire plane would crash,

00:03:10.685 --> 00:03:12.320
not only the jet engine.

00:03:12.320 --> 00:03:14.720
That's unfortunate
in similar fashion,

00:03:14.720 --> 00:03:16.789
if there is a bug in
one of the module,

00:03:16.789 --> 00:03:18.845
the entire application
would crash.

00:03:18.845 --> 00:03:21.470
Nobody can access the
website because of

00:03:21.470 --> 00:03:25.250
a small little problem or a
bug in one of the modules.

00:03:25.250 --> 00:03:27.875
Imagine an application
like Amazon.

00:03:27.875 --> 00:03:31.040
It can have tens or even
hundreds of modules.

00:03:31.040 --> 00:03:34.190
Even if there is a small bug
in one of those modules,

00:03:34.190 --> 00:03:36.365
then their application
would crash.

00:03:36.365 --> 00:03:38.910
How bad would it be?

00:03:38.980 --> 00:03:41.990
Yet another disadvantage, but

00:03:41.990 --> 00:03:44.900
monolithic application is
it's very difficult to

00:03:44.900 --> 00:03:47.960
adopt to new
technologies because

00:03:47.960 --> 00:03:50.090
all the modules must have

00:03:50.090 --> 00:03:52.655
been built using the
same technology.

00:03:52.655 --> 00:03:55.070
But monolithic
architecture, you have

00:03:55.070 --> 00:03:56.900
very least control on

00:03:56.900 --> 00:03:59.045
the technology that
you want to use.

00:03:59.045 --> 00:04:02.060
For example, when it comes
to product recommendation,

00:04:02.060 --> 00:04:04.730
you might want to use
color in order to

00:04:04.730 --> 00:04:07.910
perform data analytics, etc.

00:04:07.910 --> 00:04:09.470
But because of the fact

00:04:09.470 --> 00:04:11.360
that all these
modules are tightly

00:04:11.360 --> 00:04:15.185
coupled to each other and are
using the same technology.

00:04:15.185 --> 00:04:19.550
You're forced use the same
technology in all the modules.

00:04:19.550 --> 00:04:21.125
Using Java.

00:04:21.125 --> 00:04:23.630
In other modules,
you're forced to use

00:04:23.630 --> 00:04:26.690
same technology even for
product recommendation,

00:04:26.690 --> 00:04:28.880
you do not have
the flexibility to

00:04:28.880 --> 00:04:31.190
choose another language
or the technology.

00:04:31.190 --> 00:04:34.700
Because again, in the
end, all these modules,

00:04:34.700 --> 00:04:37.220
it would be combined
and deployed as

00:04:37.220 --> 00:04:39.935
one binary under
the remote server.

00:04:39.935 --> 00:04:42.725
By now, I hope you
are convinced that

00:04:42.725 --> 00:04:44.480
monolithic architecture
may not be

00:04:44.480 --> 00:04:47.915
the best choice given
all these disadvantages.

00:04:47.915 --> 00:04:49.805
So once the solution,

00:04:49.805 --> 00:04:54.240
the obvious solution is
microservice architecture.
