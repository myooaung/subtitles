WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.010
Okay, Let's talk about

00:00:02.010 --> 00:00:04.575
log aggregation
with the ELK Stack.

00:00:04.575 --> 00:00:07.260
Spring slowed, did
the job of improving

00:00:07.260 --> 00:00:09.120
the traceability by adding

00:00:09.120 --> 00:00:12.660
the tracing information in
the logs using Spring MVC.

00:00:12.660 --> 00:00:15.870
With zip kin were able
to visualize the flow,

00:00:15.870 --> 00:00:17.550
look at the dependencies,

00:00:17.550 --> 00:00:20.010
and analyze the problem.

00:00:20.010 --> 00:00:23.310
However, these tools
doesn't really help

00:00:23.310 --> 00:00:26.925
you or allow you to see the
logs and aggregated manner,

00:00:26.925 --> 00:00:28.800
which is very important.

00:00:28.800 --> 00:00:30.300
If there are multiple services

00:00:30.300 --> 00:00:33.225
involved that might be
creating the problem.

00:00:33.225 --> 00:00:36.630
That's where log aggregation
would come into picture.

00:00:36.630 --> 00:00:40.990
And that can be accomplished
with ELK Stack.

00:00:41.470 --> 00:00:43.910
Once again, assume that we have

00:00:43.910 --> 00:00:48.200
multiple microservices and
their corresponding logs.

00:00:48.200 --> 00:00:52.340
We needed tool that will
sort of read the logs from

00:00:52.340 --> 00:00:56.435
multiple microservices and
then send it to destination.

00:00:56.435 --> 00:00:59.495
One such tool is Log Stash.

00:00:59.495 --> 00:01:02.360
Log Stash is log
pipeline tool that

00:01:02.360 --> 00:01:05.825
accepts input from various
sources simultaneously,

00:01:05.825 --> 00:01:08.225
like TCP standard output.

00:01:08.225 --> 00:01:10.580
Or it can also be a file.

00:01:10.580 --> 00:01:12.065
You will know what I mean.

00:01:12.065 --> 00:01:14.074
Incoming lectures.

00:01:14.074 --> 00:01:16.370
Then transform them in a manner

00:01:16.370 --> 00:01:18.455
that can be sent
to a destination.

00:01:18.455 --> 00:01:21.395
Something like Elastic Search.

00:01:21.395 --> 00:01:24.770
Elastic Search as a
distributed analytics engine,

00:01:24.770 --> 00:01:26.150
which has stored the data in

00:01:26.150 --> 00:01:28.460
searchable format
in a manner that

00:01:28.460 --> 00:01:32.270
it can be queried and retrieved
by a visualization tool.

00:01:32.270 --> 00:01:34.529
Like Kibana.

00:01:34.529 --> 00:01:37.220
Kibana is a visualization layer

00:01:37.220 --> 00:01:39.800
that works on top
of elastic search,

00:01:39.800 --> 00:01:42.410
will provide an
interface to interact

00:01:42.410 --> 00:01:44.960
with Elastic Search
and help you search,

00:01:44.960 --> 00:01:47.795
analyze, or visualize the data

00:01:47.795 --> 00:01:49.310
to ultimately help you debug

00:01:49.310 --> 00:01:51.800
the ongoing problem
in the system.

00:01:51.800 --> 00:01:55.115
All these tools
together is called

00:01:55.115 --> 00:01:57.905
ELK Stack for Elastic Search,

00:01:57.905 --> 00:02:01.355
Alpha Lock stash,
and K for Kibana.

00:02:01.355 --> 00:02:04.940
Well, we also have
alternatives for this.

00:02:04.940 --> 00:02:07.700
We also have other tools
that will do this job.

00:02:07.700 --> 00:02:11.915
For example, we have gray log
or Sumo Logic for instance.

00:02:11.915 --> 00:02:15.319
But ELK Stack is one of
the popular choices.

00:02:15.319 --> 00:02:16.640
But that being said,

00:02:16.640 --> 00:02:18.920
it actually depends
on your requirements.

00:02:18.920 --> 00:02:22.070
Some requires you to
purchase their license and

00:02:22.070 --> 00:02:23.630
some requests you
to register with

00:02:23.630 --> 00:02:25.550
them in order to use them.

00:02:25.550 --> 00:02:27.680
But these tools right here,

00:02:27.680 --> 00:02:30.140
I'll open source, free to use

00:02:30.140 --> 00:02:32.900
without having to
register or whatsoever.

00:02:32.900 --> 00:02:35.310
I'll see you next one.
