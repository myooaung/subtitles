WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.880
Let us start by creating
the product service,

00:00:02.880 --> 00:00:05.354
which will just simply
display the product details.

00:00:05.354 --> 00:00:07.710
And of course, we're not
going to make API calls to

00:00:07.710 --> 00:00:10.200
other micro-services
because guess what?

00:00:10.200 --> 00:00:11.790
They're not existing yet.

00:00:11.790 --> 00:00:14.775
We're just simply going to
hardcode things for now.

00:00:14.775 --> 00:00:17.385
Let's go to file menu, new,

00:00:17.385 --> 00:00:21.579
other and choose Spring
starter project.

00:00:21.590 --> 00:00:24.150
I'm pretty happy with
this configuration

00:00:24.150 --> 00:00:27.495
except I'd like to give
a meaningful name.

00:00:27.495 --> 00:00:30.385
Let's call this
service as product.

00:00:30.385 --> 00:00:33.485
Hi phone service, all lowercase.

00:00:33.485 --> 00:00:35.285
Guess if you're using Maven,

00:00:35.285 --> 00:00:37.625
then need to choose
Maven in here.

00:00:37.625 --> 00:00:40.430
But I'd like to leave
it to the if you'd

00:00:40.430 --> 00:00:41.750
like to bring in

00:00:41.750 --> 00:00:44.270
some changes in here,
but feel free to do so.

00:00:44.270 --> 00:00:47.300
The only dependency that
I've been needing for now is

00:00:47.300 --> 00:00:51.080
Spring starter web.
Down the lane.

00:00:51.080 --> 00:00:52.700
As we progress
through the course,

00:00:52.700 --> 00:00:55.730
we will be exploring a lot
of other dependencies.

00:00:55.730 --> 00:00:59.100
But for now, let's
keep it very simple.

00:00:59.920 --> 00:01:02.810
The next thing we need to do is

00:01:02.810 --> 00:01:05.300
to install project lumbar,

00:01:05.300 --> 00:01:08.520
which is completely optional.

00:01:08.740 --> 00:01:11.210
The reason why we
want to install

00:01:11.210 --> 00:01:13.280
this is this is
going to save a lot

00:01:13.280 --> 00:01:14.900
of developers time and also

00:01:14.900 --> 00:01:17.090
make our code less error prone.

00:01:17.090 --> 00:01:18.545
What I mean by that is,

00:01:18.545 --> 00:01:20.975
whenever you do
introducing a model class,

00:01:20.975 --> 00:01:23.030
you typically tend to
introduce the getter and

00:01:23.030 --> 00:01:25.115
setter methods for
all the fields.

00:01:25.115 --> 00:01:27.260
Along with that, you'll
also need to specify

00:01:27.260 --> 00:01:29.210
a no argument constructor as

00:01:29.210 --> 00:01:31.445
well as the alar constructor.

00:01:31.445 --> 00:01:35.015
You can save all the
typing install lumbar.

00:01:35.015 --> 00:01:36.320
You don't have to introduce

00:01:36.320 --> 00:01:38.090
all those methods
and constructors.

00:01:38.090 --> 00:01:40.520
Lumbar will do it for you.

00:01:40.520 --> 00:01:43.910
The way you go about
installing it is you'd have to

00:01:43.910 --> 00:01:47.400
download the lumbar
OK, dot jar file.

00:01:47.400 --> 00:01:49.750
Just double-click
it and you'd see

00:01:49.750 --> 00:01:52.045
a prompt that looks
something like this.

00:01:52.045 --> 00:01:53.965
And it should automatically scan

00:01:53.965 --> 00:01:56.860
all the eclipse
installation directories.

00:01:56.860 --> 00:01:59.320
If it doesn't find your eclipse,

00:01:59.320 --> 00:02:01.540
then you can choose this option,

00:02:01.540 --> 00:02:02.874
specify location,

00:02:02.874 --> 00:02:05.530
look at your eclipse
installation directory,

00:02:05.530 --> 00:02:08.710
and then click on
Install or Update.

00:02:08.710 --> 00:02:11.785
And that should install lumbar.

00:02:11.785 --> 00:02:14.320
Once it's done.

00:02:14.320 --> 00:02:18.265
You also need to add the
required dependencies.

00:02:18.265 --> 00:02:21.070
Since I'm using Gradle.

00:02:21.070 --> 00:02:24.220
I'm going to add
these dependencies.

00:02:24.220 --> 00:02:25.360
If you're using Maven,

00:02:25.360 --> 00:02:27.550
then you can find the
required dependencies

00:02:27.550 --> 00:02:30.380
and Maven repository as well.

00:02:31.020 --> 00:02:33.790
I'll go inside build-up

00:02:33.790 --> 00:02:38.810
Gradle file and add
these dependencies.

00:02:41.130 --> 00:02:44.485
Let me do Gretel refresh,

00:02:44.485 --> 00:02:47.080
gives off more than
you would go to

00:02:47.080 --> 00:02:49.705
Maven and then update project.

00:02:49.705 --> 00:02:53.170
We now have all the
required dependencies.

00:02:53.170 --> 00:02:54.999
And with these dependencies,

00:02:54.999 --> 00:02:59.090
we can now actually use
all the lumbar candidate.

00:03:00.180 --> 00:03:03.925
We're going to see how they
are used in just a while.

00:03:03.925 --> 00:03:07.540
Now let's go ahead and
create the controller.

00:03:07.540 --> 00:03:10.030
Typically as good practice,

00:03:10.030 --> 00:03:12.690
we supposed to have
multiple packages,

00:03:12.690 --> 00:03:15.050
one for controller,
one for services,

00:03:15.050 --> 00:03:17.165
and the other four
repository, etc.

00:03:17.165 --> 00:03:19.520
But in order to keep
things simple for now,

00:03:19.520 --> 00:03:21.350
we're just going to
have all our files

00:03:21.350 --> 00:03:23.525
residing under the
default package,

00:03:23.525 --> 00:03:25.955
which is the demo package.

00:03:25.955 --> 00:03:28.519
I'm going to create a new class.

00:03:28.519 --> 00:03:32.285
I'll call it border controller.

00:03:32.285 --> 00:03:37.265
Let's annotate this class
with rest controller.

00:03:37.265 --> 00:03:39.770
This class can actually

00:03:39.770 --> 00:03:42.215
start intercepting all
the incoming requests.

00:03:42.215 --> 00:03:44.285
Before I introduce the method,

00:03:44.285 --> 00:03:46.340
let us create the model class,

00:03:46.340 --> 00:03:48.814
and that's going to hold
all the product details.

00:03:48.814 --> 00:03:50.420
I'm going to create a new class,

00:03:50.420 --> 00:03:53.990
let's call it product finish.

00:03:53.990 --> 00:03:57.020
And this is going to hold
the validity of data

00:03:57.020 --> 00:04:01.475
that's private, long id.

00:04:01.475 --> 00:04:02.900
Similarly, we are going to have

00:04:02.900 --> 00:04:06.845
product name of type string.

00:04:06.845 --> 00:04:11.720
Went to have product
description, Product price.

00:04:11.720 --> 00:04:16.249
Of course this is going
to be of type integer.

00:04:16.249 --> 00:04:18.260
And then finally,
we went to have

00:04:18.260 --> 00:04:22.520
products stock which
will be of type Boolean.

00:04:22.520 --> 00:04:25.235
Let's save the file
Control Shift F.

00:04:25.235 --> 00:04:29.375
Let's introduce the
lumbar candidate data.

00:04:29.375 --> 00:04:31.505
The lumbar candidate.

00:04:31.505 --> 00:04:34.880
That would essentially
introduce all the getter and

00:04:34.880 --> 00:04:36.920
setter methods for whatever

00:04:36.920 --> 00:04:38.900
the fields that we're
specifying here.

00:04:38.900 --> 00:04:43.250
And we're also going to be
needing a no arg constructor.

00:04:43.250 --> 00:04:44.990
This is necessarily
for marshaling

00:04:44.990 --> 00:04:47.375
and demarshaling of objects.

00:04:47.375 --> 00:04:50.360
Finally, all arcs constructor

00:04:50.360 --> 00:04:53.360
in order to be able to
populate all these fields.

00:04:53.360 --> 00:04:57.575
From inside the controller
would introduce a method

00:04:57.575 --> 00:05:01.400
public splintered
return product object,

00:05:01.400 --> 00:05:04.820
get product info.

00:05:04.820 --> 00:05:07.940
This is going to
accept one argument,

00:05:07.940 --> 00:05:10.535
but I'll introduce
it in just a bit.

00:05:10.535 --> 00:05:16.205
Return new product and will
populate all these fields.

00:05:16.205 --> 00:05:19.565
This method is going to
accept one pop variable.

00:05:19.565 --> 00:05:21.080
But before that, let's do

00:05:21.080 --> 00:05:23.930
the mapping annotation
gets mapping.

00:05:23.930 --> 00:05:26.585
Whenever there is a GET
request from the client,

00:05:26.585 --> 00:05:28.775
the request would reach here.

00:05:28.775 --> 00:05:33.410
We're going to specify the
URI pattern, product slash,

00:05:33.410 --> 00:05:36.515
details slash, and then
the path variable,

00:05:36.515 --> 00:05:38.720
which is the product ID.

00:05:38.720 --> 00:05:41.900
It's the same
pathway table which

00:05:41.900 --> 00:05:45.080
will accept that spot variable.

00:05:45.080 --> 00:05:47.870
And this is going
to be of type long.

00:05:47.870 --> 00:05:51.575
Let's call it as product ID.

00:05:51.575 --> 00:05:54.485
Went to populate the
same idea in here.

00:05:54.485 --> 00:05:56.690
Whatever gets sent is

00:05:56.690 --> 00:05:58.655
the same thing which
gets populated here.

00:05:58.655 --> 00:06:02.960
Name, maybe iPhone, description.

00:06:02.960 --> 00:06:07.025
Iphone is **** expensive.

00:06:07.025 --> 00:06:10.490
Price is going to be
maybe triple nine.

00:06:10.490 --> 00:06:12.500
It's probably more than that,

00:06:12.500 --> 00:06:15.320
but let's keep it at that price.

00:06:15.320 --> 00:06:18.470
Went to set the stock
availability to true.

00:06:18.470 --> 00:06:20.390
That means stock
is available out,

00:06:20.390 --> 00:06:24.200
save the file, and we're
good to run our project.

00:06:24.200 --> 00:06:26.900
But before that, since

00:06:26.900 --> 00:06:29.615
we are running multiple
microservices on the same host,

00:06:29.615 --> 00:06:31.310
it's necessarily
that we don't have

00:06:31.310 --> 00:06:33.305
them all use the same boat.

00:06:33.305 --> 00:06:35.435
So to avoid the port conflict,

00:06:35.435 --> 00:06:38.075
let us have a port

00:06:38.075 --> 00:06:40.550
dedicated for each of
the microservices.

00:06:40.550 --> 00:06:47.880
This service, we're going
to use a port to be at 001.

00:06:48.070 --> 00:06:51.980
And with this, you can launch

00:06:51.980 --> 00:06:57.065
an application as
a springboard tab.

00:06:57.065 --> 00:07:00.120
Let's copy the path.

00:07:00.400 --> 00:07:04.250
Whenever there is a GET
request from the client,

00:07:04.250 --> 00:07:08.060
which has the URL
pattern that matches

00:07:08.060 --> 00:07:11.390
with this along with
the path variable.

00:07:11.390 --> 00:07:14.570
Then this will be processed.

00:07:14.570 --> 00:07:16.684
We'll just simply returning

00:07:16.684 --> 00:07:18.500
the product details object and

00:07:18.500 --> 00:07:21.410
its values are of
course, hard-coded.

00:07:21.410 --> 00:07:23.464
Let's go to Postman.

00:07:23.464 --> 00:07:26.570
I have a brand new tab, open,

00:07:26.570 --> 00:07:32.720
localhost slash colon 8001,

00:07:32.720 --> 00:07:38.645
based upon went to
say 101 or whatever.

00:07:38.645 --> 00:07:41.610
Let's send the request.

00:07:41.740 --> 00:07:46.280
This has worked down the line.

00:07:46.280 --> 00:07:47.660
We're going to have the price

00:07:47.660 --> 00:07:50.075
retrieved from the
pricing service.

00:07:50.075 --> 00:07:52.310
And stock availability will

00:07:52.310 --> 00:07:55.259
be retrieved from the
inventory service.
