WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.280
Okay, I guess it's
now time to write

00:00:02.280 --> 00:00:04.455
or false microservice
application.

00:00:04.455 --> 00:00:06.975
I do really hope
that you're excited.

00:00:06.975 --> 00:00:08.580
And in order to demonstrate

00:00:08.580 --> 00:00:11.100
how microservices actually work,

00:00:11.100 --> 00:00:13.890
I wanted to consider a
use case where we just

00:00:13.890 --> 00:00:17.235
wanted to display
product information.

00:00:17.235 --> 00:00:20.050
Think about a
website like Amazon,

00:00:20.050 --> 00:00:22.985
and let's let your viewing
some details of the product.

00:00:22.985 --> 00:00:25.310
Some of the basic
information that we might be

00:00:25.310 --> 00:00:28.235
displaying or product
name and description,

00:00:28.235 --> 00:00:29.630
price of the product,

00:00:29.630 --> 00:00:32.915
and whether the product
stock is available or not.

00:00:32.915 --> 00:00:35.240
Traditionally, we used
to send request to

00:00:35.240 --> 00:00:37.700
the server and then the
silver used to respond

00:00:37.700 --> 00:00:39.680
back with JSON less bonds with

00:00:39.680 --> 00:00:42.350
all the product
information required for

00:00:42.350 --> 00:00:44.570
the client application
in order for it to

00:00:44.570 --> 00:00:47.465
render on the browser or
whatever the platform.

00:00:47.465 --> 00:00:51.155
However, since we now have the
microservice architecture,

00:00:51.155 --> 00:00:52.460
the responsibility would be

00:00:52.460 --> 00:00:55.010
split across multiple
microservices.

00:00:55.010 --> 00:00:57.920
For example, we could be
having product service,

00:00:57.920 --> 00:01:00.440
which will hold some
information about the product,

00:01:00.440 --> 00:01:02.090
like name and description.

00:01:02.090 --> 00:01:04.714
Then we could be having
the pricing service,

00:01:04.714 --> 00:01:06.170
which is dedicated to

00:01:06.170 --> 00:01:08.494
maintain the pricing
for all the products.

00:01:08.494 --> 00:01:10.940
Because the pricing might
change depending on

00:01:10.940 --> 00:01:12.995
the seasonal discounts or

00:01:12.995 --> 00:01:16.505
bank offers or coupons
discounts, etc.

00:01:16.505 --> 00:01:19.235
Then we might be having
the inventory service,

00:01:19.235 --> 00:01:21.755
which will maintain
the inventory records.

00:01:21.755 --> 00:01:23.990
So it will keep track
of the count of

00:01:23.990 --> 00:01:27.335
the products and whether the
product is available or not.

00:01:27.335 --> 00:01:29.180
So ultimately, in case of

00:01:29.180 --> 00:01:31.100
microservices
declined could send

00:01:31.100 --> 00:01:32.615
the request to product service.

00:01:32.615 --> 00:01:34.130
Product service will retrieve

00:01:34.130 --> 00:01:35.390
the pricing information of

00:01:35.390 --> 00:01:37.580
that product, the
pricing service.

00:01:37.580 --> 00:01:39.380
And it will also send request

00:01:39.380 --> 00:01:41.150
to the inventory
service in order

00:01:41.150 --> 00:01:42.740
to see whether the stock of

00:01:42.740 --> 00:01:45.020
that product is
available or not.

00:01:45.020 --> 00:01:47.570
And since this is our
very first example,

00:01:47.570 --> 00:01:49.490
I would like to keep
things very simple.

00:01:49.490 --> 00:01:50.750
I'm not even going to introduce

00:01:50.750 --> 00:01:53.270
databases because it
requires us to talk

00:01:53.270 --> 00:01:54.950
about some of the principles of

00:01:54.950 --> 00:01:57.260
managing data in
microservice architecture.

00:01:57.260 --> 00:01:59.420
Without you understanding
those principles,

00:01:59.420 --> 00:02:03.380
it's really a bad idea to
actually start using databases.

00:02:03.380 --> 00:02:05.375
That's going to create
a lot of confusion,

00:02:05.375 --> 00:02:07.040
will refrain from using

00:02:07.040 --> 00:02:09.380
any databases and
we'll just hard-code.

00:02:09.380 --> 00:02:10.580
Thanks.

00:02:10.580 --> 00:02:13.370
So ultimately we're
going to have

00:02:13.370 --> 00:02:16.385
product name and description
from the product service.

00:02:16.385 --> 00:02:19.220
The price would be retrieved
from the price and service.

00:02:19.220 --> 00:02:20.630
The in-stock would be

00:02:20.630 --> 00:02:22.714
retrieved from the
inventory service.

00:02:22.714 --> 00:02:25.925
But of course, we're not going
to have any user-interface

00:02:25.925 --> 00:02:29.225
which is going to send
back the JSON response,

00:02:29.225 --> 00:02:30.770
which will look
something like this,

00:02:30.770 --> 00:02:32.240
will have product ID,

00:02:32.240 --> 00:02:35.285
product name,
description, price,

00:02:35.285 --> 00:02:37.355
and product stock availability.

00:02:37.355 --> 00:02:39.665
Price would be fetched
from the pricing service.

00:02:39.665 --> 00:02:41.510
Inventory details
would be fetched

00:02:41.510 --> 00:02:43.610
from the inventory service.

00:02:43.610 --> 00:02:45.680
Next step is to start creating

00:02:45.680 --> 00:02:49.560
the projects and
see how it works.
