WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.790
Let's try to understand the
difference between clients.

00:00:02.790 --> 00:00:05.610
So I'd discovery and load
balancing and suicide.

00:00:05.610 --> 00:00:07.499
This current load balancing,

00:00:07.499 --> 00:00:10.080
whatever we had
talked about so far,

00:00:10.080 --> 00:00:13.320
is client-side discovery
and load balancing because

00:00:13.320 --> 00:00:14.790
all the services are registering

00:00:14.790 --> 00:00:17.984
themselves with the
service registry.

00:00:17.984 --> 00:00:19.980
And then the service client is

00:00:19.980 --> 00:00:22.560
actually responsible
for fetching

00:00:22.560 --> 00:00:24.180
all the instances from

00:00:24.180 --> 00:00:27.914
the service registry and then
doing the load balancing.

00:00:27.914 --> 00:00:29.700
Service client is doing

00:00:29.700 --> 00:00:31.980
the discovery as well
as a load balancing.

00:00:31.980 --> 00:00:33.765
Now, what's the downside of it?

00:00:33.765 --> 00:00:36.220
Can you try to make a guess?

00:00:36.220 --> 00:00:39.905
Well, it would tightly couple

00:00:39.905 --> 00:00:41.270
discovery and load balancing

00:00:41.270 --> 00:00:43.355
logic with this obvious client.

00:00:43.355 --> 00:00:45.710
If you have multiple
services written in

00:00:45.710 --> 00:00:48.095
multiple programming
languages and frameworks,

00:00:48.095 --> 00:00:50.090
then you also need to
take care of writing

00:00:50.090 --> 00:00:52.760
the discovery and
load bonds in logic,

00:00:52.760 --> 00:00:56.090
the respect to languages
and frameworks.

00:00:56.090 --> 00:00:59.359
Well then, how do we get
rid of this problem?

00:00:59.359 --> 00:01:01.850
The answer is decoupling.

00:01:01.850 --> 00:01:04.190
We're going to separate the
discovery and load balancing

00:01:04.190 --> 00:01:06.830
logic from the service client.

00:01:06.830 --> 00:01:08.495
We're going to have it as

00:01:08.495 --> 00:01:12.230
a separate entity
called a load balancer.

00:01:12.230 --> 00:01:13.820
It is responsible for

00:01:13.820 --> 00:01:16.715
both discovery as well
as load balancing.

00:01:16.715 --> 00:01:19.760
In this case, the
service client would

00:01:19.760 --> 00:01:23.300
just tell the load balancer
where to send requests to.

00:01:23.300 --> 00:01:25.340
If it wants to send
requests to say service

00:01:25.340 --> 00:01:28.715
a is just going to
tell load balancer.

00:01:28.715 --> 00:01:30.860
And Load Balancer is
actually responsible

00:01:30.860 --> 00:01:33.380
for fetching the locations of

00:01:33.380 --> 00:01:35.450
all the instances
of service from

00:01:35.450 --> 00:01:39.335
the service registry and
perform the load balancing.

00:01:39.335 --> 00:01:42.485
This is called server-side
load balancing,

00:01:42.485 --> 00:01:45.020
and this will help us
decouple service client

00:01:45.020 --> 00:01:48.215
from discovery and
load balancing logic.

00:01:48.215 --> 00:01:51.259
However, this also
comes with a drawback.

00:01:51.259 --> 00:01:55.130
Since all the requests are
going from the load balancer,

00:01:55.130 --> 00:01:59.270
the load balancer has to be
up and running all the time.

00:01:59.270 --> 00:02:01.189
If it is having any downtime,

00:02:01.189 --> 00:02:03.980
then it will have
a severe impact.

00:02:03.980 --> 00:02:06.410
But in most cases and
Cloud Enrollment,

00:02:06.410 --> 00:02:08.330
you would probably
never come across with

00:02:08.330 --> 00:02:11.225
a situation where
LB might go down,

00:02:11.225 --> 00:02:13.355
at least in case of AWS,

00:02:13.355 --> 00:02:14.960
I've never had any downtime with

00:02:14.960 --> 00:02:17.210
it for clients or discovery.

00:02:17.210 --> 00:02:18.725
We have uric, a ribbon,

00:02:18.725 --> 00:02:22.100
and we've already taken a look
at an example of the same.

00:02:22.100 --> 00:02:24.350
For server-side load
balancing though,

00:02:24.350 --> 00:02:26.495
you have AWS, ELB,

00:02:26.495 --> 00:02:28.520
or elastic load balancer.

00:02:28.520 --> 00:02:30.980
The ELB will fetch the instance

00:02:30.980 --> 00:02:33.695
information from this
obvious registry,

00:02:33.695 --> 00:02:35.630
would send requests to

00:02:35.630 --> 00:02:37.460
all the EC2 instances or

00:02:37.460 --> 00:02:40.220
Elastic Cloud
Compute and stances.

00:02:40.220 --> 00:02:43.025
Unfortunately, in order
to demonstrate this,

00:02:43.025 --> 00:02:45.980
you have to have some
knowledge on AWS enrollment.

00:02:45.980 --> 00:02:49.220
And it's not easy to actually
configure all these.

00:02:49.220 --> 00:02:51.860
You have to have EC2
instances running.

00:02:51.860 --> 00:02:55.385
Then you also need to
run the load balancer.

00:02:55.385 --> 00:02:57.620
And this in itself
actually deserves to

00:02:57.620 --> 00:03:00.720
be part of another
course altogether.
