WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.310
Let's talk about API gateway in

00:00:02.310 --> 00:00:04.350
the context of microservices.

00:00:04.350 --> 00:00:06.510
Imagine that you have
a service client,

00:00:06.510 --> 00:00:09.645
which ones to send requests
to multiple services.

00:00:09.645 --> 00:00:12.960
Now, obviously, service
client needs to

00:00:12.960 --> 00:00:15.945
know the locations of
all those services,

00:00:15.945 --> 00:00:17.310
or at least the names of

00:00:17.310 --> 00:00:20.370
those services that
it wants to talk to.

00:00:20.370 --> 00:00:23.040
The problem here is
client needs to put

00:00:23.040 --> 00:00:26.280
some efforts in memorizing
all the service names.

00:00:26.280 --> 00:00:29.400
This is a clear problem
because just think

00:00:29.400 --> 00:00:30.870
about an instance where one of

00:00:30.870 --> 00:00:32.715
the service name or to change,

00:00:32.715 --> 00:00:36.045
then obviously
things would break.

00:00:36.045 --> 00:00:38.700
We're not talking
about just one client,

00:00:38.700 --> 00:00:40.965
essentially all the
microservices out there,

00:00:40.965 --> 00:00:44.375
how clients to other
microservices.

00:00:44.375 --> 00:00:49.640
So things will get easily messy
if you don't manage well.

00:00:49.640 --> 00:00:53.285
We need a solution to
solve this problem.

00:00:53.285 --> 00:00:55.310
Well, how about having

00:00:55.310 --> 00:00:59.255
an entity which is
responsible for just that?

00:00:59.255 --> 00:01:02.660
It's going to take care of
memorizing all the services.

00:01:02.660 --> 00:01:05.690
And it will also have
the knowledge on how to

00:01:05.690 --> 00:01:09.334
route the call based on
a particular request.

00:01:09.334 --> 00:01:13.010
Well, we're talking
about API Gateway.

00:01:13.010 --> 00:01:15.275
Now with API Gateway,

00:01:15.275 --> 00:01:17.240
the client service
would no longer have

00:01:17.240 --> 00:01:20.060
to keep track of all
the service names.

00:01:20.060 --> 00:01:24.545
Instead, it just needs to know
the host name of Gateway.

00:01:24.545 --> 00:01:27.560
And that's where it would
send all its requests to.

00:01:27.560 --> 00:01:30.170
And gate, we would have
the knowledge on how to

00:01:30.170 --> 00:01:33.200
route the call to a
particular microservice.

00:01:33.200 --> 00:01:35.450
Of course, we have to give

00:01:35.450 --> 00:01:38.210
that intelligence to Gateway
by controlling stuff

00:01:38.210 --> 00:01:40.670
either through Java file or

00:01:40.670 --> 00:01:42.290
two properties file
we'll take a look at it

00:01:42.290 --> 00:01:44.495
once we explore an example.

00:01:44.495 --> 00:01:46.460
But Gateway is not just

00:01:46.460 --> 00:01:48.440
there to solve this
problem alone.

00:01:48.440 --> 00:01:50.420
It will solve bunch
of other problems.

00:01:50.420 --> 00:01:53.315
For example, it offers cashing

00:01:53.315 --> 00:01:57.320
where the response would be
cached at the second time,

00:01:57.320 --> 00:01:59.270
client requests for
the same information

00:01:59.270 --> 00:02:01.070
it would retrieve from the cash,

00:02:01.070 --> 00:02:03.200
thereby improving
the network latency.

00:02:03.200 --> 00:02:05.390
It also offers authentication.

00:02:05.390 --> 00:02:07.925
I'm talking about
cross-cutting concerns.

00:02:07.925 --> 00:02:09.439
If you have authentication,

00:02:09.439 --> 00:02:10.880
you don't have to scatter them

00:02:10.880 --> 00:02:12.620
across all the microservices.

00:02:12.620 --> 00:02:14.105
Since all the traffic,

00:02:14.105 --> 00:02:16.985
including external traffic
has to go through Gateway,

00:02:16.985 --> 00:02:19.970
we can have authentication
in one place.

00:02:19.970 --> 00:02:21.560
And that would definitely

00:02:21.560 --> 00:02:23.810
simplify things in
the similar manner.

00:02:23.810 --> 00:02:26.510
It would also offer
monitoring where you can

00:02:26.510 --> 00:02:29.495
keep track of how many
requests are coming in,

00:02:29.495 --> 00:02:30.965
how many of them failed,

00:02:30.965 --> 00:02:34.070
and how many of them
are successful, etc.

00:02:34.070 --> 00:02:36.230
This is especially useful if

00:02:36.230 --> 00:02:38.210
you are offering
some paid services,

00:02:38.210 --> 00:02:40.070
are paid API calls.

00:02:40.070 --> 00:02:42.635
You can track number
of API calls made.

00:02:42.635 --> 00:02:45.469
Based on that, you can
charge your customer.

00:02:45.469 --> 00:02:46.910
You can even control

00:02:46.910 --> 00:02:49.040
how many requests do
you want to process?

00:02:49.040 --> 00:02:52.385
Are, how many requests do you
want to allow per second?

00:02:52.385 --> 00:02:54.860
And that's called
the straight limit.

00:02:54.860 --> 00:02:58.190
There are a bunch of other
things which get the offers

00:02:58.190 --> 00:03:02.525
and it is almost a must
have in the architecture.

00:03:02.525 --> 00:03:04.040
In the next lecture,
we're going to

00:03:04.040 --> 00:03:05.510
take a look at how to introduce

00:03:05.510 --> 00:03:09.650
gateway in our project
and configure everything,

00:03:09.650 --> 00:03:13.470
what it takes to reap
the benefits of it.
