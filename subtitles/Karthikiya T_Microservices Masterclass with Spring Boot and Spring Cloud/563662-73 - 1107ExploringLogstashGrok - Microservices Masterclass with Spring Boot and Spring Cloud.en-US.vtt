WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.170 --> 00:00:03.120
Let us see how we can
introduce filters in

00:00:03.120 --> 00:00:07.005
our configuration by
using grok plug-in.

00:00:07.005 --> 00:00:09.750
With growth plug-in, we
can further segregate

00:00:09.750 --> 00:00:13.200
log message into
individual fields

00:00:13.200 --> 00:00:15.540
to make it more structured.

00:00:15.540 --> 00:00:19.590
But for that, you need to
visualize how exactly wanted

00:00:19.590 --> 00:00:20.760
to segregate and water

00:00:20.760 --> 00:00:23.949
all the fields that
you want to introduce.

00:00:23.990 --> 00:00:26.505
Here's the log message,

00:00:26.505 --> 00:00:28.349
which I've copied previously.

00:00:28.349 --> 00:00:31.285
This is just a
random log message.

00:00:31.285 --> 00:00:33.890
If you look at it, at this dot,

00:00:33.890 --> 00:00:37.610
we have debt and then timestamp,

00:00:37.610 --> 00:00:40.475
then what we call the cell.

00:00:40.475 --> 00:00:45.290
This could be a log level
bunch off numerical.

00:00:45.290 --> 00:00:47.870
And the rest of the
stuff is just simply

00:00:47.870 --> 00:00:51.155
assume there are
bunch of characters.

00:00:51.155 --> 00:00:54.590
Now what do you need to do is

00:00:54.590 --> 00:01:00.485
to go to the GitHub
repository of plastic.

00:01:00.485 --> 00:01:03.065
Here's a quick documentation

00:01:03.065 --> 00:01:08.640
on the syntaxes
provided by Log Stash.

00:01:08.680 --> 00:01:12.740
Then we're going
to use this grok,

00:01:12.740 --> 00:01:15.530
a debugger in order to

00:01:15.530 --> 00:01:19.580
see if our pattern matches
with our log message.

00:01:19.580 --> 00:01:22.490
What I'm going to do now is I'm

00:01:22.490 --> 00:01:26.010
going to copy our log message.

00:01:30.430 --> 00:01:33.320
Then here I'm going to introduce

00:01:33.320 --> 00:01:38.195
a pattern that might align
with my log message.

00:01:38.195 --> 00:01:42.410
This tool will help you
sort of do the trial and

00:01:42.410 --> 00:01:44.360
error and see if

00:01:44.360 --> 00:01:46.505
the pattern matches
with the log message.

00:01:46.505 --> 00:01:48.980
If you want to do the same
inside your application,

00:01:48.980 --> 00:01:52.070
then you might bring changes
and it doesn't work.

00:01:52.070 --> 00:01:53.495
You have to restart stuff,

00:01:53.495 --> 00:01:55.320
which is quite frustrating.

00:01:55.320 --> 00:01:58.330
This is quite a handy tool
that you can experiment

00:01:58.330 --> 00:02:00.460
with before you
copy that pattern

00:02:00.460 --> 00:02:03.565
inside your conflict file.

00:02:03.565 --> 00:02:06.565
First off, we have this date.

00:02:06.565 --> 00:02:09.910
Let me try to find if
there is something called

00:02:09.910 --> 00:02:13.870
debt syntax provided
by Log Stash.

00:02:13.870 --> 00:02:16.165
And turns out there are many.

00:02:16.165 --> 00:02:21.490
I'm going to take a look
at individual syntaxes.

00:02:21.490 --> 00:02:25.045
You can also see the
regular expression,

00:02:25.045 --> 00:02:28.930
the inherent meaning
of the syntax.

00:02:28.930 --> 00:02:32.815
In case if you don't find
a syntax of your choice,

00:02:32.815 --> 00:02:35.305
you can also create
one for yourself.

00:02:35.305 --> 00:02:38.660
We have that
flexibility as well.

00:02:39.100 --> 00:02:50.420
Looking at this water need
is date stamp right here,

00:02:50.420 --> 00:02:54.860
which is combination
of both date and time.

00:02:54.860 --> 00:02:58.350
Let's see if this works for us.

00:03:00.640 --> 00:03:04.714
I'm going to start off
with double quotation.

00:03:04.714 --> 00:03:07.520
And then we're going to
specify all our patterns.

00:03:07.520 --> 00:03:11.855
Each pattern would start
with percentile sign,

00:03:11.855 --> 00:03:14.660
the syntax which
I've just copied,

00:03:14.660 --> 00:03:19.055
colon and the name I want
to give to that field.

00:03:19.055 --> 00:03:23.070
Let's call it debt time.

00:03:23.620 --> 00:03:29.840
Maybe I shouldn't specify the
quotations and it worked.

00:03:29.840 --> 00:03:36.695
In this pattern, matches
with this log message.

00:03:36.695 --> 00:03:45.050
It has segregated
the date field.

00:03:45.050 --> 00:03:47.960
If you scroll down a bit,

00:03:47.960 --> 00:03:51.245
you'd find the DateTime field,

00:03:51.245 --> 00:03:55.530
which has bought
date and timestamp.

00:03:58.480 --> 00:04:01.739
Let's go further.

00:04:02.110 --> 00:04:08.450
This can be a reward log level.

00:04:08.450 --> 00:04:12.710
Let me see if we have log level.

00:04:12.710 --> 00:04:16.010
We do have log level.

00:04:16.010 --> 00:04:18.200
And here's the regular
expression for

00:04:18.200 --> 00:04:22.070
the same log message.

00:04:22.070 --> 00:04:25.115
We have info as the log level.

00:04:25.115 --> 00:04:29.630
This pattern does have Abbott.

00:04:29.630 --> 00:04:33.950
I'm going to copy this
syntax and use it.

00:04:33.950 --> 00:04:35.570
I wanted to give a space,

00:04:35.570 --> 00:04:37.790
there's a space
between these two.

00:04:37.790 --> 00:04:41.150
Then postnatal
opening and closing

00:04:41.150 --> 00:04:44.525
breaths to syntax colon.

00:04:44.525 --> 00:04:46.100
And the name that
I wanted to do,

00:04:46.100 --> 00:04:50.250
log level is what
I wanted to call.

00:04:50.620 --> 00:04:53.969
This didn't match.

00:04:54.010 --> 00:04:57.660
Let's try another
one, maybe board.

00:05:00.130 --> 00:05:04.890
Let's call it award.

00:05:07.540 --> 00:05:17.720
Those didn't match. Guys see it.

00:05:17.720 --> 00:05:21.270
We have couple of whitespaces.

00:05:21.520 --> 00:05:25.080
Let's change this to log level.

00:05:26.160 --> 00:05:29.450
Because that is more relevant.

00:05:29.520 --> 00:05:31.990
Now if you scroll down,

00:05:31.990 --> 00:05:36.040
you would see another field
called log level that

00:05:36.040 --> 00:05:38.230
corresponds to this piece

00:05:38.230 --> 00:05:41.425
of information in
our log message.

00:05:41.425 --> 00:05:45.640
Similarly, I guess
this is a number.

00:05:45.640 --> 00:05:51.470
Let's find out if
we have number.

00:05:53.430 --> 00:05:59.410
We do have it. Let me just
quickly copy this pattern.

00:05:59.410 --> 00:06:02.320
Have single-space.

00:06:02.320 --> 00:06:05.450
Let's call it number.

00:06:11.580 --> 00:06:16.419
I'm going to name
the field as bytes.

00:06:16.419 --> 00:06:19.249
Which is a science.

00:06:28.050 --> 00:06:30.610
Why is it named as, okay,

00:06:30.610 --> 00:06:38.595
Here we have it bites that
corresponds to the sides.

00:06:38.595 --> 00:06:41.840
Got printed in the log message.

00:06:42.060 --> 00:06:44.830
Rest of the message, I'm
just simply going to

00:06:44.830 --> 00:06:47.870
call it as data.

00:06:50.580 --> 00:06:54.900
We do have and data.

00:06:55.210 --> 00:07:00.005
Let's use greedy data
that looks more generic.

00:07:00.005 --> 00:07:03.660
That might accept
all the characters.

00:07:04.630 --> 00:07:08.040
Let me copy the pattern.

00:07:09.700 --> 00:07:13.685
Copy greedy data syntax.

00:07:13.685 --> 00:07:16.920
Let's call it data.

00:07:20.110 --> 00:07:23.130
It has worked.

00:07:23.680 --> 00:07:29.420
That's how you would figure
out the pattern log messages.

00:07:29.420 --> 00:07:34.200
Now let's go inside
the conflict file.

00:07:35.320 --> 00:07:43.670
Let's introduce the
filter. Filter.

00:07:43.670 --> 00:07:46.790
Then we're going to
use the grok plug-in.

00:07:46.790 --> 00:07:56.910
G are Volker to use match.

00:07:57.310 --> 00:08:00.650
Then went to specify

00:08:00.650 --> 00:08:10.175
the message that corresponds
to this particular pattern.

00:08:10.175 --> 00:08:15.540
Let us save the file,
relaunch Log Stash.

00:08:25.620 --> 00:08:29.710
We still have standard
input as the input source.

00:08:29.710 --> 00:08:31.780
We can change this to point to

00:08:31.780 --> 00:08:34.450
our log file where

00:08:34.450 --> 00:08:37.315
all the microservices
are dumping their logs.

00:08:37.315 --> 00:08:39.610
Let's try with this
first and then we

00:08:39.610 --> 00:08:42.400
can make those changes.

00:08:42.400 --> 00:08:46.480
Meanwhile, let me
copy a log message

00:08:46.480 --> 00:08:52.570
from from the log file

00:08:52.570 --> 00:08:55.675
where all the Microsoft's
are dumping the logs.

00:08:55.675 --> 00:09:01.130
I'm just going to copy
this some random message.

00:09:02.770 --> 00:09:05.615
Once this is launched.

00:09:05.615 --> 00:09:08.610
Let's see how it all works.

00:09:14.320 --> 00:09:17.670
Let's hit enter.

00:09:19.300 --> 00:09:23.040
Go to the output dot log file.

00:09:24.100 --> 00:09:26.750
If you notice.

00:09:26.750 --> 00:09:31.025
We now have all the pieces
that I had introduced.

00:09:31.025 --> 00:09:33.394
We have log level as info,

00:09:33.394 --> 00:09:40.370
we got bytes, datetime, etc.

00:09:40.370 --> 00:09:42.230
I hope you got the point.

00:09:42.230 --> 00:09:45.090
Now let us go ahead and

00:09:47.230 --> 00:09:51.540
change the input back
to the log file.

00:09:56.860 --> 00:09:59.735
Let's copy this.

00:09:59.735 --> 00:10:07.880
And let's point to logs.

00:10:07.880 --> 00:10:13.020
This should work as
well. This should work.

00:10:13.360 --> 00:10:16.295
Just try and
experiment with this

00:10:16.295 --> 00:10:19.025
and play around with filters.

00:10:19.025 --> 00:10:22.295
Just be creative and try
to experiment with this.

00:10:22.295 --> 00:10:25.770
Hope it makes sense. I'll
see you in the next one.
