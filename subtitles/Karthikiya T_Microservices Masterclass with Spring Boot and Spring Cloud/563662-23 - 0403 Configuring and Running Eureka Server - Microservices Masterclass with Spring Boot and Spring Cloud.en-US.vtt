WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.075
Let's take a look at how we
can set up the Utica server.

00:00:03.075 --> 00:00:06.000
Eureka server doesn't come
as a separate software or

00:00:06.000 --> 00:00:09.314
as an installer which it
installed on your computer,

00:00:09.314 --> 00:00:11.219
is just going to be
another microservice

00:00:11.219 --> 00:00:12.705
with added dependency.

00:00:12.705 --> 00:00:14.245
Let me show you what I mean.

00:00:14.245 --> 00:00:18.180
I'm going to create a brand
new Spring Boot application.

00:00:19.090 --> 00:00:26.610
Let's call the tiles Utica.

00:00:29.290 --> 00:00:32.915
The only dependency
which will be needing

00:00:32.915 --> 00:00:37.490
is Eureka server dependency.

00:00:37.490 --> 00:00:40.010
If this is a client
microservice,

00:00:40.010 --> 00:00:41.630
then we could have been choosing

00:00:41.630 --> 00:00:44.315
this option which says you
record discord a client.

00:00:44.315 --> 00:00:46.805
And this is the dependency
between two add

00:00:46.805 --> 00:00:49.700
inside all our
client applications.

00:00:49.700 --> 00:00:51.785
But for now this
is what we need.

00:00:51.785 --> 00:00:56.280
It finish. Going to take awhile.

00:00:56.470 --> 00:00:59.210
Once done, we're pretty

00:00:59.210 --> 00:01:00.680
much good to launch
your application,

00:01:00.680 --> 00:01:03.650
but there's one additional thing

00:01:03.650 --> 00:01:05.480
which we need to do is to

00:01:05.480 --> 00:01:11.345
add the annotation would
say enable Eureka server.

00:01:11.345 --> 00:01:12.740
This is what would bring in

00:01:12.740 --> 00:01:16.130
all those configurations
to launch our server.

00:01:16.130 --> 00:01:17.915
Now believe it or not,

00:01:17.915 --> 00:01:20.960
this is all it takes to
launch our application.

00:01:20.960 --> 00:01:22.970
The Utica server.

00:01:22.970 --> 00:01:28.535
I'm going to right-click on
this run as Spring Boot app.

00:01:28.535 --> 00:01:31.920
Let us go to the browser

00:01:34.420 --> 00:01:41.340
and try to launch it
on default port 8080.

00:01:43.120 --> 00:01:45.980
Here we're seeing the Eureka

00:01:45.980 --> 00:01:47.840
dashboard and right now we don't

00:01:47.840 --> 00:01:49.220
have any clients register with

00:01:49.220 --> 00:01:51.935
the silver and so we're
not seeing anything.

00:01:51.935 --> 00:01:53.840
Otherwise, we could have
been seeing list of

00:01:53.840 --> 00:01:57.140
lines populated in this section.

00:01:57.140 --> 00:01:59.930
Let's go back to Eclipse.

00:01:59.930 --> 00:02:02.120
If you notice inside the console

00:02:02.120 --> 00:02:05.490
we seem to be getting
few exceptions.

00:02:05.860 --> 00:02:07.940
This is happening because of

00:02:07.940 --> 00:02:10.505
the default behavior
of Utica server.

00:02:10.505 --> 00:02:12.890
Well, in production enrollment,

00:02:12.890 --> 00:02:14.990
typically we tend to
have multiple instances

00:02:14.990 --> 00:02:17.345
of your echo server,
not just one.

00:02:17.345 --> 00:02:19.940
And by default, you deca
server tries to connect with

00:02:19.940 --> 00:02:23.345
other Eureka servers in
order to replicate its data.

00:02:23.345 --> 00:02:25.730
Just so that if once I
will want to go down,

00:02:25.730 --> 00:02:27.410
we have other servers to take

00:02:27.410 --> 00:02:29.585
care of the registry
information.

00:02:29.585 --> 00:02:32.180
Right now we just
have one instance of

00:02:32.180 --> 00:02:33.920
your echo server and

00:02:33.920 --> 00:02:35.750
it is trying to
register with itself,

00:02:35.750 --> 00:02:37.220
which doesn't make sense.

00:02:37.220 --> 00:02:39.755
We need to add some
additional configurations

00:02:39.755 --> 00:02:42.840
to prevent that to happen.

00:02:43.060 --> 00:02:53.075
Eudicot dot dot register

00:02:53.075 --> 00:02:55.920
with Utica.

00:02:56.050 --> 00:02:58.775
We're going to set
this to false.

00:02:58.775 --> 00:03:01.350
This defaults to true.

00:03:05.280 --> 00:03:08.395
And when we have this,

00:03:08.395 --> 00:03:14.725
it also makes sense to add
on additional configuration.

00:03:14.725 --> 00:03:21.200
And that says Fetch registry.

00:03:21.690 --> 00:03:24.910
We don't want to fetch
any registry information

00:03:24.910 --> 00:03:28.010
of other micro-services.

00:03:28.110 --> 00:03:31.030
We're not going to
send a new request to

00:03:31.030 --> 00:03:34.495
any other servers
are microservices.

00:03:34.495 --> 00:03:37.000
We're going to set
this to false as well.

00:03:37.000 --> 00:03:40.345
If we have another instance
of your echo server running,

00:03:40.345 --> 00:03:43.090
then we could set this to true

00:03:43.090 --> 00:03:45.730
because we want to actually
fetch the information,

00:03:45.730 --> 00:03:48.585
the registry information
from that server,

00:03:48.585 --> 00:03:50.750
as well as we wanted to be able

00:03:50.750 --> 00:03:54.815
to register arousals with
that server as a client.

00:03:54.815 --> 00:03:57.770
For now, this is
going to be false.

00:03:57.770 --> 00:04:01.470
And let's relaunch
our application.

00:04:01.780 --> 00:04:04.310
This time we're not
going to see any of

00:04:04.310 --> 00:04:07.050
those exceptions flowing in.

00:04:17.920 --> 00:04:21.695
There's one last thing which
we need to take care off.

00:04:21.695 --> 00:04:23.165
Right now.

00:04:23.165 --> 00:04:26.000
If clients want to
register with the server,

00:04:26.000 --> 00:04:28.910
they're apt to make a
rest API call internally.

00:04:28.910 --> 00:04:30.410
We don't have to do it.

00:04:30.410 --> 00:04:38.375
And the URL that they're
going to use is right here.

00:04:38.375 --> 00:04:40.700
By default, uric acid would

00:04:40.700 --> 00:04:43.805
expect the server
port to be 8761.

00:04:43.805 --> 00:04:48.050
But guess what? Our server
is running on port 8080.

00:04:48.050 --> 00:04:51.170
If client would send
request to the server,

00:04:51.170 --> 00:04:54.995
the app to send request to 8080.

00:04:54.995 --> 00:04:59.225
But then we have this URL
configured pointing to 8761.

00:04:59.225 --> 00:05:03.710
Way to add the chain, this
URL pointing to 8080.

00:05:03.710 --> 00:05:07.950
All we have to change
the server port 28761.

00:05:08.650 --> 00:05:11.940
I'm going to do just that.

00:05:12.790 --> 00:05:19.790
Suburb port equals
8761, save the file.

00:05:19.790 --> 00:05:24.090
Now clients can actually
send request to the server,

00:05:24.850 --> 00:05:28.505
specifically to this URL

00:05:28.505 --> 00:05:32.735
in order to make an API
call to register itself,

00:05:32.735 --> 00:05:34.190
or to even fetch information

00:05:34.190 --> 00:05:36.845
about a specific microservice.

00:05:36.845 --> 00:05:39.830
This is where the URAC would

00:05:39.830 --> 00:05:43.140
expose all those
crowd endpoints.

00:05:43.240 --> 00:05:46.890
Let's move on to
our application.

00:05:47.470 --> 00:05:50.300
You're probably not
going to see anything

00:05:50.300 --> 00:05:56.960
different in terms of what
gets displayed, the dashboard.

00:05:56.960 --> 00:06:00.815
But here's how you would
configure the Utica server.

00:06:00.815 --> 00:06:02.120
Next, we are going to see how we

00:06:02.120 --> 00:06:04.440
can register our
clients with it.

00:06:07.420 --> 00:06:10.910
Obviously, this is going
to be running on 8761.

00:06:10.910 --> 00:06:14.850
Now, there you have it.
