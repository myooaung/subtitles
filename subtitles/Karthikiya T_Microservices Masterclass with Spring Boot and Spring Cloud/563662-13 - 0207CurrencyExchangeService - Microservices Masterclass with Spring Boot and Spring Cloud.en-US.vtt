WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.020
Right now we're displaying
all our prices in US dollars.

00:00:04.020 --> 00:00:06.570
However, let's say
that I wanted to

00:00:06.570 --> 00:00:09.420
introduce a new feature
where we want to

00:00:09.420 --> 00:00:12.165
display the prices
in the currency

00:00:12.165 --> 00:00:13.680
depending on the location from

00:00:13.680 --> 00:00:15.460
where the request
is coming from.

00:00:15.460 --> 00:00:18.140
If the request is
coming from CJ,

00:00:18.140 --> 00:00:21.500
then we wanted to show the
prices in Japanese yen.

00:00:21.500 --> 00:00:23.360
If the request is
coming from say,

00:00:23.360 --> 00:00:27.720
India, Then we wanted
to show the prices in.

00:00:27.730 --> 00:00:30.530
What I want you to do is

00:00:30.530 --> 00:00:33.065
I want you to introduce
another microservice,

00:00:33.065 --> 00:00:35.945
which is called currency
exchange service.

00:00:35.945 --> 00:00:38.015
And all it does is

00:00:38.015 --> 00:00:40.205
it will just give us
the exchange rate.

00:00:40.205 --> 00:00:43.775
For example, if you asked for
US dollars to Japanese yen,

00:00:43.775 --> 00:00:45.965
it needs to return 10 phi,

00:00:45.965 --> 00:00:49.070
which we would then multiply
it with the actual price of

00:00:49.070 --> 00:00:52.549
the product and send it back
to the product service.

00:00:52.549 --> 00:00:55.550
For instance, we could be having

00:00:55.550 --> 00:00:59.930
that microservice which
will expose an endpoint.

00:00:59.930 --> 00:01:01.580
And whenever we send

00:01:01.580 --> 00:01:04.460
this request US dollars
to Japanese Yen,

00:01:04.460 --> 00:01:07.565
we would get this JSON data.

00:01:07.565 --> 00:01:11.450
We'll use this data to
get the exchange value,

00:01:11.450 --> 00:01:14.540
multiply it with the actual
price of the product.

00:01:14.540 --> 00:01:18.349
Then we'll send the response
back to the product service.

00:01:18.349 --> 00:01:20.945
Pause the video and take
this as an assignment.

00:01:20.945 --> 00:01:23.555
And once you are done,
continue watching.

00:01:23.555 --> 00:01:25.820
Wanted to show you
how it's done to

00:01:25.820 --> 00:01:28.700
benefit the time I've
already done the job.

00:01:28.700 --> 00:01:32.390
I'm just simply going to walk
you through what I've done.

00:01:32.390 --> 00:01:34.970
First of all, I've
created the microservice,

00:01:34.970 --> 00:01:37.835
which is similar to that
of the previous ones.

00:01:37.835 --> 00:01:42.380
I won't added the
dependency to use lumbar.

00:01:42.910 --> 00:01:46.355
We also have a model object.

00:01:46.355 --> 00:01:49.805
To hold the exchange details.

00:01:49.805 --> 00:01:54.380
We have an identifier,
currencies from N2,

00:01:54.380 --> 00:01:56.150
which tells us from

00:01:56.150 --> 00:02:00.710
which currency to which
currency do we want to convert?

00:02:00.710 --> 00:02:04.400
The exchange value that
corresponds to it?

00:02:04.400 --> 00:02:07.970
Let's say from US
dollars to Japanese yen,

00:02:07.970 --> 00:02:11.000
then exchange value
should be 105.

00:02:11.000 --> 00:02:14.510
And in order to hold
the currencies,

00:02:14.510 --> 00:02:18.215
I've also created an enum
type, and here it is.

00:02:18.215 --> 00:02:21.480
And here are the list of
currencies which I'm using.

00:02:22.380 --> 00:02:25.670
Inside of our controller.

00:02:26.430 --> 00:02:30.100
We're trying to read
the path variables.

00:02:30.100 --> 00:02:31.630
And based on which we are trying

00:02:31.630 --> 00:02:35.545
to send back some
kind of response.

00:02:35.545 --> 00:02:38.515
Of course, we're not
using a database.

00:02:38.515 --> 00:02:40.345
We were using a database then

00:02:40.345 --> 00:02:42.910
our job would have
been a lot easier.

00:02:42.910 --> 00:02:45.475
We could have just introduced
the equity method.

00:02:45.475 --> 00:02:47.139
That would suffice.

00:02:47.139 --> 00:02:48.760
Since we don't have a database,

00:02:48.760 --> 00:02:52.855
I have to introduce some logic

00:02:52.855 --> 00:02:59.270
to manually retrieve
the required object.

00:02:59.460 --> 00:03:03.250
If it is US dollar to INR,

00:03:03.250 --> 00:03:05.369
then I'm returning this object

00:03:05.369 --> 00:03:07.715
with the extreme value of 60.

00:03:07.715 --> 00:03:12.840
If it is US dollars to
Japanese yen, then that's 105.

00:03:13.450 --> 00:03:21.360
From within the controller
of price micro-service.

00:03:22.990 --> 00:03:29.150
Just simply trying
to make an API call,

00:03:29.150 --> 00:03:31.595
get the exchange value.

00:03:31.595 --> 00:03:33.965
Then I'm trying to do a map,

00:03:33.965 --> 00:03:36.350
which is to multiply

00:03:36.350 --> 00:03:38.750
the exchange value with

00:03:38.750 --> 00:03:41.885
the actual price, the
discounted price.

00:03:41.885 --> 00:03:43.100
And that's what would be sent

00:03:43.100 --> 00:03:47.550
back to the product service.

00:03:49.800 --> 00:03:51.820
If you send the requests,

00:03:51.820 --> 00:03:57.250
you would see the exchange
value. Right now.

00:03:57.250 --> 00:04:02.660
We're trying to convert US
dollars to Japanese yen.

00:04:03.780 --> 00:04:07.480
The price of iPhone
is triple line,

00:04:07.480 --> 00:04:10.405
if you remember,
that's in US dollars.

00:04:10.405 --> 00:04:13.165
Multiplied by 105.

00:04:13.165 --> 00:04:16.250
Is this price right here.

00:04:17.370 --> 00:04:20.350
The book would cost this

00:04:20.350 --> 00:04:21.920
much.

00:04:28.710 --> 00:04:31.550
Alright, that's it.
