WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.160 --> 00:00:03.240
Let us try to simulate

00:00:03.240 --> 00:00:06.435
a negative case and see how
we can analyze the problem,

00:00:06.435 --> 00:00:08.595
ends up can UI?

00:00:08.595 --> 00:00:11.160
We know that this
request is working.

00:00:11.160 --> 00:00:15.270
We're able to fetch the product
information with ID 102.

00:00:15.270 --> 00:00:20.370
Now, let us make some
tweaks to make it fail.

00:00:20.370 --> 00:00:22.740
Let us send request with an ID

00:00:22.740 --> 00:00:26.115
that doesn't exist, say 1024.

00:00:26.115 --> 00:00:29.205
And if I send the request
now we get an error

00:00:29.205 --> 00:00:32.805
that says 500 internal
server error.

00:00:32.805 --> 00:00:34.380
This is a problem.

00:00:34.380 --> 00:00:36.585
Let us go ahead and
try to analyze it.

00:00:36.585 --> 00:00:38.460
And ZIP can dashboard.

00:00:38.460 --> 00:00:42.760
But before that, let
us grab the trace ID.

00:00:49.690 --> 00:00:52.700
Here we have a problem.

00:00:52.700 --> 00:00:56.420
Products service didn't even
send requests to any of

00:00:56.420 --> 00:01:01.430
its downstream nodes
because it has an error,

00:01:01.430 --> 00:01:04.025
which in this case is
NullPointerException.

00:01:04.025 --> 00:01:06.800
So by looking at this,
we can say that we

00:01:06.800 --> 00:01:09.680
have a problem to fix
in product service.

00:01:09.680 --> 00:01:13.145
And we also got it blew
off what the problem is.

00:01:13.145 --> 00:01:15.350
However, in our guess,

00:01:15.350 --> 00:01:17.825
we just have a couple of
microservices running.

00:01:17.825 --> 00:01:21.395
And it's relatively
easy to find and fix.

00:01:21.395 --> 00:01:23.255
But in real-time applications,

00:01:23.255 --> 00:01:26.045
you might be having
thousands of microservices.

00:01:26.045 --> 00:01:28.775
And that could be thousands
of instances running.

00:01:28.775 --> 00:01:30.050
In which case we need

00:01:30.050 --> 00:01:33.440
much robust solution that
will allow us to gain

00:01:33.440 --> 00:01:35.990
much deeper insights
into the logs and

00:01:35.990 --> 00:01:39.080
the data to identify
the problem.

00:01:39.080 --> 00:01:40.820
Because problem may not always

00:01:40.820 --> 00:01:42.965
reside in one single
microservice.

00:01:42.965 --> 00:01:45.845
It can be due to
multiple microservices.

00:01:45.845 --> 00:01:48.920
We need a much better way
to analyze the problem.

00:01:48.920 --> 00:01:52.955
And that's where ELK Stack
would come into picture.

00:01:52.955 --> 00:01:57.140
That's what we're going to
talk about in coming lectures.

00:01:57.140 --> 00:01:59.120
But before that, let us

00:01:59.120 --> 00:02:01.385
take a look at one
more negative case.

00:02:01.385 --> 00:02:05.040
With atleast couple of spans.

00:02:05.380 --> 00:02:09.125
This time, I'm sending
requests to Gateway.

00:02:09.125 --> 00:02:10.340
And the request would go to

00:02:10.340 --> 00:02:13.550
pricing service to
fetch the price of

00:02:13.550 --> 00:02:19.790
a particular product. Walking.

00:02:19.790 --> 00:02:23.520
Now let us make
some changes here.

00:02:25.210 --> 00:02:28.500
To make it not work.

00:02:30.070 --> 00:02:33.215
We got to find it
internal server error.

00:02:33.215 --> 00:02:35.030
Let's go to the logs.

00:02:35.030 --> 00:02:42.540
The pricing service,
the gateway.

00:02:45.340 --> 00:02:50.010
Let us catch hold
of the trace ID.

00:02:52.480 --> 00:02:56.240
Here we have a failure.

00:02:56.240 --> 00:02:59.645
We got to find it at obviously.

00:02:59.645 --> 00:03:01.640
But if you dig deep,

00:03:01.640 --> 00:03:03.680
you would notice that we

00:03:03.680 --> 00:03:05.675
have a Schubert the
pricing service.

00:03:05.675 --> 00:03:07.310
This time we have

00:03:07.310 --> 00:03:11.374
a null pointer exception
inside the pricing service.

00:03:11.374 --> 00:03:13.940
Now if you notice we
are seeing a couple of

00:03:13.940 --> 00:03:16.715
spans for gateway service.

00:03:16.715 --> 00:03:19.280
I'm sure you might be
wondering why is that?

00:03:19.280 --> 00:03:22.070
It's because getWidth
doesn't strike

00:03:22.070 --> 00:03:25.040
service and the request
to the downstream nodes.

00:03:25.040 --> 00:03:27.740
It would terminate the
request and then build

00:03:27.740 --> 00:03:29.360
a new color altogether

00:03:29.360 --> 00:03:31.505
and send it to the
targeted service,

00:03:31.505 --> 00:03:33.905
which in this case
is pricing service.

00:03:33.905 --> 00:03:37.084
That's why we're seeing
a couple of spans,

00:03:37.084 --> 00:03:41.210
two different span
ideas for gateway.

00:03:41.210 --> 00:03:43.100
Just wanted to clarify that.

00:03:43.100 --> 00:03:45.840
All right. I'll see
you in the next one.
