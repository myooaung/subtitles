WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.560 --> 00:00:03.330
Jusqu'à présent, nous avons les fichiers de
 conflit


00:00:03.330 --> 00:00:05.250
résidant dans GitHub, puis


00:00:05.250 --> 00:00:06.630
le serveur de conflits
 les a vus

00:00:06.630 --> 00:00:09.210
vers les services,
 ce qui est génial. 

00:00:09.210 --> 00:00:11.895
Mais cela s'accompagne d'
autres défis. 

00:00:11.895 --> 00:00:14.460
Puisque nous sommes maintenant déplacés
 tous les fichiers de conflit

00:00:14.460 --> 00:00:17.250
microservices
 individuels
 vers un emplacement commun,


00:00:17.250 --> 00:00:19.125
comme dans ce cas, GitHub. 

00:00:19.125 --> 00:00:20.910
Cela signifie également
 que tout ce qui est


00:00:20.910 --> 00:00:23.490
ici peut être vu
 par tous les autres. 

00:00:23.490 --> 00:00:24.810
Et si c'est quelqu'un ayant


00:00:24.810 --> 00:00:28.130
une intention
 malveillante qui regarde ce contenu,

00:00:28.130 --> 00:00:30.200
évident qu'il
 est possible
 qu'il

00:00:30.200 --> 00:00:32.390
puisse utiliser
 ces informations à mauvais escient. 

00:00:32.390 --> 00:00:34.910
Cela signifie que nous ne
 voulons pas garder le sens des


00:00:34.910 --> 00:00:39.695
informations telles qu'un mot de
 passe de base de données ou des clés API, etc.


00:00:39.695 --> 00:00:41.480
Comment les protéger ? 

00:00:41.480 --> 00:00:45.335
Eh bien, la réponse est le
 chiffrement et le déchiffrement. 

00:00:45.335 --> 00:00:47.135
Cela signifie que


00:00:47.135 --> 00:00:50.075
chaque fois que nous
 essayons de stocker le mot de passe,


00:00:50.075 --> 00:00:53.390
nous allons le chiffrer pour
 qu'il soit vu dans


00:00:53.390 --> 00:00:54.980
un format que personne ne peut


00:00:54.980 --> 00:00:57.440
comprendre, sauf
 les conflits. 

00:00:57.440 --> 00:00:59.300
Et lorsque les conflits sont riches,


00:00:59.300 --> 00:01:01.730
cette propriété,
 qui est chiffrée,


00:01:01.730 --> 00:01:03.410
elle va le déchiffrer,


00:01:03.410 --> 00:01:05.825
extraire le texte réel

00:01:05.825 --> 00:01:08.284
puis l'envoyer à la
 demande et au service. 

00:01:08.284 --> 00:01:10.835
Vous saurez ce que je
 veux dire dans un moment. 

00:01:10.835 --> 00:01:12.740
Mais la première chose que
 nous devons faire
 pour

00:01:12.740 --> 00:01:14.180
activer le
 chiffrement et

00:01:14.180 --> 00:01:17.030
déchiffrement est d'introduire


00:01:17.030 --> 00:01:20.345
Spring Security dans nos
 conflits sur le projet. 

00:01:20.345 --> 00:01:25.655
Et je vais le faire
 dans le fichier POM XML. 

00:01:25.655 --> 00:01:29.870
Quand introduire une dépendance
 supplémentaire ? 

00:01:29.870 --> 00:01:39.230
Et ce sera la sécurité
 du démarrage Spring Boot. 

00:01:39.230 --> 00:01:45.840
Le dossier. Mettons
 à jour le projet. 

00:01:50.320 --> 00:01:53.045
Une fois que c'est fait. 

00:01:53.045 --> 00:01:58.475
Nous allons présenter quelques configurations
 spécifiques à la sécurité. 

00:01:58.475 --> 00:02:01.684
J'aimerais d'abord définir
 le nom d'utilisateur et le mot de passe. 

00:02:01.684 --> 00:02:04.820
En fait, nous n'en avons pas besoin
 car je vais
 autoriser

00:02:04.820 --> 00:02:08.015
tous les points de terminaison
 sans aucune authentification. 

00:02:08.015 --> 00:02:10.325
Je vais juste l'ignorer pour l'instant. 

00:02:10.325 --> 00:02:14.090
Par défaut, chaque fois que vous ajoutez
 la dépendance de sécurité,


00:02:14.090 --> 00:02:16.430
elle active automatiquement
 l'authentification avec un

00:02:16.430 --> 00:02:19.639
utilisateur
 par défaut et un mot de passe
 généré automatiquement. 

00:02:19.639 --> 00:02:21.470
Nous pourrions donc modifier
 ce

00:02:21.470 --> 00:02:24.500
mot de passe minimum en
 quelque chose qui vous plaira. 

00:02:24.500 --> 00:02:27.200
Sinon, nous pouvons
 simplement laisser tout le monde accéder à


00:02:27.200 --> 00:02:30.530
tous les points de terminaison sans
 aucune restriction. 

00:02:30.530 --> 00:02:32.480
Pour ça. 

00:02:32.480 --> 00:02:36.150
Je vais créer un nouveau fichier
 de conflit de sécurité. 

00:02:36.250 --> 00:02:43.530
Je vais appeler ça la sécurité Web. 

00:02:43.690 --> 00:02:46.865
Ici, nous allons
 créer une règle


00:02:46.865 --> 00:02:51.395
qui permettrait
 à tout le monde d'accéder à un routage. 

00:02:51.395 --> 00:02:56.310
Je vais dire
 activer la sécurité Web. 

00:03:00.250 --> 00:03:03.720
Je vais passer
 outre la méthode. 

00:03:03.880 --> 00:03:06.830
Mais avant cela,
 cette classe doit
 étendre la

00:03:06.830 --> 00:03:11.000
sécurité Web
 configure adoptant. 

00:03:11.000 --> 00:03:15.360
Tout cela est déjà abordé dans le chapitre
 de la sécurité. 

00:03:16.000 --> 00:03:23.220
Adoptant configuré en sécurité. 

00:03:23.530 --> 00:03:26.825
Nous allons remplacer la méthode. 

00:03:26.825 --> 00:03:31.340
Configuration large protégée. 

00:03:31.340 --> 00:03:34.850
Et nous sommes allés passer
 dans un argument


00:03:34.850 --> 00:03:40.320
p sécurité


00:03:42.700 --> 00:03:47.700
lance une exception. 

00:03:47.860 --> 00:03:50.780
Et ici,
 je vais utiliser


00:03:50.780 --> 00:03:54.815
cet objet pour
 configurer notre sécurité. 

00:03:54.815 --> 00:04:03.300
Je vais dire que les
 demandes autorisées sont importantes. 

00:04:04.240 --> 00:04:09.350
Quand fournir reg ex. 

00:04:09.350 --> 00:04:12.995
J'aimerais autoriser
 littéralement toutes les URL. 

00:04:12.995 --> 00:04:15.900
Je vais dire « permis ». 

00:04:17.290 --> 00:04:20.945
Cette déclaration permettra à
 tout le monde d'accéder à tout


00:04:20.945 --> 00:04:22.710
sans restrictions
 ou sans avoir


00:04:22.710 --> 00:04:24.709
à entrer un nom d'utilisateur et un mot de passe. 

00:04:24.709 --> 00:04:26.060
Si ce n'est pas le cas,


00:04:26.060 --> 00:04:28.100
chaque fois que vous
 envoyez la demande,

00:04:28.100 --> 00:04:30.575
vous sera demandé d'entrer
 le nom d'utilisateur et le mot de passe,


00:04:30.575 --> 00:04:32.495
ce qui peut être gênant. 

00:04:32.495 --> 00:04:37.040
Une autre chose que nous devons
 faire est de désactiver CSRF. 

00:04:37.040 --> 00:04:39.450
Il est activé par défaut. 

00:04:40.000 --> 00:04:43.745
Nous avons déjà parlé des attaques CSRF,


00:04:43.745 --> 00:04:46.205
Cross-Site Request
 Forgery


00:04:46.205 --> 00:04:48.815
dans nos cours précédents. 

00:04:48.815 --> 00:04:52.260
Désactivez-le pour l'instant. 

00:04:52.840 --> 00:04:55.790
C'est tout ce qu'il y a à faire. 

00:04:55.790 --> 00:04:59.315
Nous avons maintenant toutes les fonctions
 de sécurité Spring en place. 

00:04:59.315 --> 00:05:01.490
La prochaine chose que nous
 devons faire est d'
activer le

00:05:01.490 --> 00:05:03.755
chiffrement
 et le déchiffrement. 

00:05:03.755 --> 00:05:05.090
Et c'est ce que
 nous allons
 voir

00:05:05.090 --> 00:05:07.500
dans notre prochaine vidéo. 
