WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.560 --> 00:00:02.730
So far in our examples,

00:00:02.730 --> 00:00:04.080
we've used v client,

00:00:04.080 --> 00:00:06.675
which is of course blocking.

00:00:06.675 --> 00:00:08.940
If you want to go
non-blocking way,

00:00:08.940 --> 00:00:12.255
then you'd need to do
things in React to weigh.

00:00:12.255 --> 00:00:14.025
And for that, we have

00:00:14.025 --> 00:00:17.789
a library specifically
tuned for that purpose.

00:00:17.789 --> 00:00:20.940
And that's week react to.

00:00:20.940 --> 00:00:24.375
You could just use web client
or S template. That's fine.

00:00:24.375 --> 00:00:26.040
But we've already talked about

00:00:26.040 --> 00:00:28.695
the drawbacks of using
dressed template.

00:00:28.695 --> 00:00:31.065
If you want to read
the benefits of fig,

00:00:31.065 --> 00:00:34.005
as well as the benefits
of react to programming.

00:00:34.005 --> 00:00:36.675
This is the library you
should think about.

00:00:36.675 --> 00:00:38.100
That's fig react to.

00:00:38.100 --> 00:00:41.785
And here's the GitHub
link for the same.

00:00:41.785 --> 00:00:44.360
If you scroll down a bit,

00:00:44.360 --> 00:00:47.795
they have a pretty
good documentation.

00:00:47.795 --> 00:00:50.105
It's pretty straightforward.

00:00:50.105 --> 00:00:53.810
All you have to do is
to create a client.

00:00:53.810 --> 00:00:57.005
Just as you have created
the feet client,

00:00:57.005 --> 00:01:00.110
we have to have similar
stuff here as well,

00:01:00.110 --> 00:01:03.080
except you're going to
return either mono or

00:01:03.080 --> 00:01:07.895
the flux that standard
for react to libraries.

00:01:07.895 --> 00:01:10.370
Once you have it, you're
just going to create

00:01:10.370 --> 00:01:13.460
an instance using
the builder pattern.

00:01:13.460 --> 00:01:16.460
You're going to use
the web reactor fig.

00:01:16.460 --> 00:01:18.170
And then you're going
to call the builder

00:01:18.170 --> 00:01:20.525
method to build instance.

00:01:20.525 --> 00:01:22.220
Once you have the instance,

00:01:22.220 --> 00:01:24.020
you can use that in stance just

00:01:24.020 --> 00:01:27.200
as you would use the
web plant in stance.

00:01:27.200 --> 00:01:30.290
The rest of the
code is similar to

00:01:30.290 --> 00:01:33.719
what we've looked at in
our web client example.

00:01:34.420 --> 00:01:37.610
Here is more advanced
version just in case if

00:01:37.610 --> 00:01:41.280
you're trying to connect
to a Cloud provider.

00:01:43.390 --> 00:01:46.670
They've given a couple
of more examples.

00:01:46.670 --> 00:01:48.710
And this is at end of

00:01:48.710 --> 00:01:51.620
documentation, pretty
straightforward stuff.

00:01:51.620 --> 00:01:53.390
I could actually
demonstrate this,

00:01:53.390 --> 00:01:57.360
but it might be like repetition.

00:01:59.620 --> 00:02:03.900
I don't want you to see the
same stuff again and again.

00:02:04.570 --> 00:02:07.280
This is pretty straightforward.

00:02:07.280 --> 00:02:12.560
And if your project requires
you to use reactive week,

00:02:12.560 --> 00:02:15.080
then you can certainly
explore this.

00:02:15.080 --> 00:02:17.480
We also have the
Maven dependency for

00:02:17.480 --> 00:02:22.100
the same react to

00:02:22.100 --> 00:02:28.260
core and equivalent Gradle
dependency as well.
