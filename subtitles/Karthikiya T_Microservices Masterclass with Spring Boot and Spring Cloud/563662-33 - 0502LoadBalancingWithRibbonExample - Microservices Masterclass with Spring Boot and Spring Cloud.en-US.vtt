WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.550
Right now we have
the product service

00:00:02.550 --> 00:00:03.870
from where we were able to send

00:00:03.870 --> 00:00:05.670
requests to inventory as well as

00:00:05.670 --> 00:00:07.965
pricing service
using Fee client.

00:00:07.965 --> 00:00:10.035
But this can be rest ambulate,

00:00:10.035 --> 00:00:12.120
wept line to our VGG,

00:00:12.120 --> 00:00:15.750
react to whatever it is,
ultimately sending requests.

00:00:15.750 --> 00:00:17.745
And we even have the
eureka server running

00:00:17.745 --> 00:00:20.445
for registry and
discovery purposes.

00:00:20.445 --> 00:00:24.180
Now let's try to understand
how load balancing works.

00:00:24.180 --> 00:00:27.030
Well, if you're happy
with whatever the default

00:00:27.030 --> 00:00:30.030
functionality provided
by Netflix ribbon,

00:00:30.030 --> 00:00:31.590
then you don't have to

00:00:31.590 --> 00:00:33.895
have any additional
configurations.

00:00:33.895 --> 00:00:35.390
In fact, you don't even have to

00:00:35.390 --> 00:00:38.525
include any additional
dependencies.

00:00:38.525 --> 00:00:41.240
Because when you include
Netflix, you record client.

00:00:41.240 --> 00:00:46.085
This will automatically also
import the ribbon library.

00:00:46.085 --> 00:00:48.770
If you don't believe
me, then we can

00:00:48.770 --> 00:00:52.385
actually check the same
inside the dependencies.

00:00:52.385 --> 00:00:55.190
If you scroll a bit,

00:00:55.190 --> 00:00:58.470
you would notice that we have

00:01:00.610 --> 00:01:05.150
the ribbon library here all day.

00:01:05.150 --> 00:01:07.700
We got to urban core and

00:01:07.700 --> 00:01:10.505
a bunch of other
ribbon libraries,

00:01:10.505 --> 00:01:15.575
which would help us load
balance the requests.

00:01:15.575 --> 00:01:19.340
All we're going to do now
is to test our application

00:01:19.340 --> 00:01:23.270
and see if load balancing
is indeed taking effect.

00:01:23.270 --> 00:01:26.060
However, if you want
to go beyond and get

00:01:26.060 --> 00:01:27.770
more fine-grained control on

00:01:27.770 --> 00:01:30.275
how you want to
load balance, etc.

00:01:30.275 --> 00:01:33.365
Then you have to wait
until the next lecture.

00:01:33.365 --> 00:01:36.155
That's where we'll
explore how to do that.

00:01:36.155 --> 00:01:40.175
But for now, let's see the
default functionality.

00:01:40.175 --> 00:01:43.415
I already have all
the services running.

00:01:43.415 --> 00:01:44.900
I'm now going to create

00:01:44.900 --> 00:01:47.600
another instance of
inventory service,

00:01:47.600 --> 00:01:49.700
but before that, I'm going to

00:01:49.700 --> 00:01:53.280
introduce certain
changes in the code.

00:01:53.500 --> 00:01:58.355
Just so that we can
test our application.

00:01:58.355 --> 00:02:01.580
I'm actually going to
read the port attribute,

00:02:01.580 --> 00:02:03.050
which are the port this

00:02:03.050 --> 00:02:05.060
particular instance
would be running.

00:02:05.060 --> 00:02:08.599
We're going to inject the
same into this property.

00:02:08.599 --> 00:02:14.340
So I'm going to say
private string.

00:02:14.530 --> 00:02:20.360
I'm going to use the value
annotation in order to read

00:02:20.360 --> 00:02:26.180
the port number
that this instance

00:02:26.180 --> 00:02:33.365
is running on. Port.

00:02:33.365 --> 00:02:37.080
What are the ports
that you configure?

00:02:43.060 --> 00:02:47.070
Small syntactical error here.

00:02:50.200 --> 00:02:53.840
What are the ports that
you can figure would be

00:02:53.840 --> 00:02:57.605
assigned to this variable?

00:02:57.605 --> 00:02:59.870
I'm actually going to introduce

00:02:59.870 --> 00:03:04.010
another method, get mapping.

00:03:04.010 --> 00:03:08.310
And I'm going to say
maybe get bought.

00:03:10.240 --> 00:03:16.040
Whatever. I'm just simply

00:03:16.040 --> 00:03:19.380
going to return the port number.

00:03:24.370 --> 00:03:28.415
Going to be of type string,

00:03:28.415 --> 00:03:35.280
saved the file from inside
our product controller.

00:03:36.520 --> 00:03:43.505
Went to have a method
on an endpoint

00:03:43.505 --> 00:03:45.800
that would just
simply send requests

00:03:45.800 --> 00:03:51.290
to this endpoint and
read this value.

00:03:51.290 --> 00:03:53.570
But before that, let us make

00:03:53.570 --> 00:03:57.614
necessary changes inside
the inventory client.

00:03:57.614 --> 00:04:01.320
To copy the signature
of this method.

00:04:04.390 --> 00:04:07.680
Let's have it in here.

00:04:07.720 --> 00:04:16.140
Save the file
product controller.

00:04:18.340 --> 00:04:21.485
Let me create another method.

00:04:21.485 --> 00:04:24.485
Inside product controller.

00:04:24.485 --> 00:04:28.349
I'm just simply going
to say get bought.

00:04:31.180 --> 00:04:38.880
Let's change the name
though. Get bored.

00:04:39.880 --> 00:04:42.750
Doesn't matter.

00:04:53.200 --> 00:04:55.740
Inventory.

00:05:05.530 --> 00:05:07.955
Let us now

00:05:07.955 --> 00:05:11.160
relaunch our product service.

00:05:16.930 --> 00:05:21.840
The last the inventory service.

00:05:35.740 --> 00:05:40.830
But right now, our
inventory service

00:05:43.330 --> 00:05:49.920
would actually be
running on port 8001.

00:05:50.590 --> 00:05:52.820
I'm sorry, this is supposed to

00:05:52.820 --> 00:05:58.250
be our inventory
services running

00:05:58.250 --> 00:06:01.340
on 8003 went to now

00:06:01.340 --> 00:06:02.990
launch another instance of

00:06:02.990 --> 00:06:06.095
inventory service on
a different port.

00:06:06.095 --> 00:06:10.800
For that I'm going to get
inside the run configuration.

00:06:12.460 --> 00:06:16.830
Create a duplicate off
inventory service.

00:06:19.630 --> 00:06:21.935
Inventory service.

00:06:21.935 --> 00:06:25.250
Maybe I'd like to
run it on 9006.

00:06:25.250 --> 00:06:27.770
It doesn't matter, but
this is important.

00:06:27.770 --> 00:06:30.590
You have to pass that
property in here.

00:06:30.590 --> 00:06:38.570
Dot equals nine zeros 06.

00:06:38.570 --> 00:06:42.305
What are the port number
that you provide in here?

00:06:42.305 --> 00:06:44.570
Would actually
overwrite whatever is

00:06:44.570 --> 00:06:48.080
configured inside
the properties file.

00:06:48.080 --> 00:06:51.570
I'm going to say run.

00:07:02.920 --> 00:07:07.590
Let us go to Postman and
try sending the requests.

00:07:10.990 --> 00:07:21.770
This is going to be it's 8003.

00:07:21.770 --> 00:07:25.070
Now, the second time I send it,

00:07:25.070 --> 00:07:29.160
this is going to be 9006.

00:07:32.020 --> 00:07:35.430
There are sort of alternating.

00:07:35.440 --> 00:07:37.670
By default, the way it works

00:07:37.670 --> 00:07:41.945
is the request would go
and round robin fashion.

00:07:41.945 --> 00:07:44.940
We can change it if we wish.

00:07:47.200 --> 00:07:50.150
That's load balancing for you.

00:07:50.150 --> 00:07:53.000
Requests are not going
to just one instance.

00:07:53.000 --> 00:07:55.940
They are scattered across
multiple instances.

00:07:55.940 --> 00:07:57.395
If you want to launch,

00:07:57.395 --> 00:08:00.620
say five instances than
the requests would go

00:08:00.620 --> 00:08:04.950
and round robin fashion to
all those five instances.
