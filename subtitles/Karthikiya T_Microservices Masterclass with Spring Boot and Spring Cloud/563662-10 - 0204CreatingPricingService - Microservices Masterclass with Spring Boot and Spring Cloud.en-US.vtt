WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.925
Okay, let us now introduce
the pricing service.

00:00:02.925 --> 00:00:04.964
The steps are pretty
much similar,

00:00:04.964 --> 00:00:07.320
But let's close all
these windows so

00:00:07.320 --> 00:00:10.665
that we can avoid
some confusion.

00:00:10.665 --> 00:00:14.440
I'm going to create a
new Spring Boot Project.

00:00:14.690 --> 00:00:20.145
Does give a name
pricing service.

00:00:20.145 --> 00:00:23.355
Next. And once again,

00:00:23.355 --> 00:00:24.780
we're just going to need Spring

00:00:24.780 --> 00:00:27.255
Boot starter web dependency,

00:00:27.255 --> 00:00:29.740
and that will suffice.

00:00:30.350 --> 00:00:37.750
Let's also have project
lumbar dependency added.

00:00:41.580 --> 00:00:44.620
Let's refresh the project.

00:00:44.620 --> 00:00:46.930
Well quick, if you're using

00:00:46.930 --> 00:00:50.750
Maven that's inside the
palm, that XML file.

00:00:51.540 --> 00:00:56.140
Once done, we'll introduce

00:00:56.140 --> 00:00:58.390
the controller as well as POJO.

00:00:58.390 --> 00:01:01.090
The controller logic is
going to be similar to

00:01:01.090 --> 00:01:03.700
the one that we have
in product service.

00:01:03.700 --> 00:01:08.420
So I'm just going to copy
that file from there to here.

00:01:08.880 --> 00:01:12.115
Except instead of
product in four,

00:01:12.115 --> 00:01:15.740
we're going to have
the price object.

00:01:17.340 --> 00:01:20.719
Let's create that class.

00:01:21.660 --> 00:01:24.840
Here. We're going to
have fewer fields,

00:01:24.840 --> 00:01:30.089
private, long, price ID.

00:01:35.950 --> 00:01:39.170
We're also going to
store the reference of

00:01:39.170 --> 00:01:42.420
the product with its identifier.

00:01:44.980 --> 00:01:47.600
We're going to
have product id to

00:01:47.600 --> 00:01:50.030
which this price
would correspond

00:01:50.030 --> 00:01:56.670
to integer

00:01:57.490 --> 00:02:01.680
original price of the product.

00:02:02.740 --> 00:02:12.000
Then maybe discounted price

00:02:12.460 --> 00:02:15.740
will add the lumbar
connotations data

00:02:15.740 --> 00:02:17.765
for getters and setters.

00:02:17.765 --> 00:02:23.910
Need all arcs constructor as
well as logs constructor.

00:02:28.600 --> 00:02:31.070
Once we have them in place,

00:02:31.070 --> 00:02:32.720
let's go ahead and

00:02:32.720 --> 00:02:35.945
bring in all the required
changes in here.

00:02:35.945 --> 00:02:38.480
Instead of product, we now have

00:02:38.480 --> 00:02:43.820
to retrieve the price based on

00:02:43.820 --> 00:02:52.090
the product ID and

00:02:52.090 --> 00:02:57.020
get price. For a given product.

00:02:59.520 --> 00:03:05.900
This is going to be price,

00:03:12.750 --> 00:03:15.800
priceless.

00:03:27.930 --> 00:03:31.190
Information.

00:03:34.170 --> 00:03:37.370
Nice list.

00:03:44.280 --> 00:03:46.450
Inside here.

00:03:46.450 --> 00:03:53.830
We're just going to
populate the price objects.

00:03:53.830 --> 00:03:56.750
This is the price ID.

00:03:57.630 --> 00:04:01.780
Then the product ID.

00:04:01.780 --> 00:04:03.490
The original price of

00:04:03.490 --> 00:04:06.520
iPhone is going to
be one triple nine,

00:04:06.520 --> 00:04:16.430
but the discounted prices
just triple nine. Object.

00:04:20.200 --> 00:04:29.405
Then we have book original
price is one double nine,

00:04:29.405 --> 00:04:37.295
which you're going to
get it for just $19.3.

00:04:37.295 --> 00:04:41.660
This is washing
machine, Napster,

00:04:41.660 --> 00:04:44.480
original price and the
discounted prices,

00:04:44.480 --> 00:04:49.050
just 699 or whatever.

00:04:52.960 --> 00:04:56.190
To be price list.

00:04:56.710 --> 00:05:01.710
We have populated the pricing
for each of the products.

00:05:03.790 --> 00:05:07.080
Let's change the name.

00:05:09.130 --> 00:05:11.420
Then we're trying to loop

00:05:11.420 --> 00:05:14.660
through these elements
and checking to

00:05:14.660 --> 00:05:20.550
see if product ID matches
with the product iodine here.

00:05:21.730 --> 00:05:25.910
Returning the
specific price object

00:05:25.910 --> 00:05:28.625
which gets collected here.

00:05:28.625 --> 00:05:34.230
And it's the same price
which we will return.

00:05:37.330 --> 00:05:41.175
These comments wouldn't
make sense in here.

00:05:41.175 --> 00:05:48.475
I'll get it up.
Let us re-verify.

00:05:48.475 --> 00:05:51.970
Everything is in good shape.

00:05:51.970 --> 00:05:54.190
Let's launch our application.

00:05:54.190 --> 00:05:56.260
But before that, we need to

00:05:56.260 --> 00:05:59.140
change the port to
something else.

00:05:59.140 --> 00:06:04.130
This time, I'm going to assign
this adds zeros, zeros.

00:06:04.530 --> 00:06:09.310
We already have our product
service running on 8001.

00:06:09.310 --> 00:06:12.410
So I'm using another port.

00:06:16.920 --> 00:06:22.610
We also need to change
the pop it in here.

00:06:26.980 --> 00:06:29.779
Save the file.

00:06:29.779 --> 00:06:32.880
Launchpad application.

00:06:36.610 --> 00:06:40.050
Let's go to Postman plane.

00:06:45.610 --> 00:06:57.630
Zeros 0, price, the product ID.

00:06:58.930 --> 00:07:01.805
Send the request.

00:07:01.805 --> 00:07:06.065
We got the pricing details
on that specific product.

00:07:06.065 --> 00:07:08.270
Incoming lectures,
we'll see how we can

00:07:08.270 --> 00:07:10.160
read this information
from inside

00:07:10.160 --> 00:07:12.470
the product service so
that we can populate

00:07:12.470 --> 00:07:15.840
the price field for
a specific product.
