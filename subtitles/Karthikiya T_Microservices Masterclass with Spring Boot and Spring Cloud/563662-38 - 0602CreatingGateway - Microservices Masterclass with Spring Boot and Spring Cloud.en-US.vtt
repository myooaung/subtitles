WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.925
Okay, right now we have
the product service

00:00:02.925 --> 00:00:04.350
from where we are
sending requests

00:00:04.350 --> 00:00:06.000
to both pricing as well as

00:00:06.000 --> 00:00:08.460
the notary service
using Fee client.

00:00:08.460 --> 00:00:10.950
Then we also have the
oracle server for

00:00:10.950 --> 00:00:13.740
registry and discovery purposes.

00:00:13.740 --> 00:00:14.940
What I'm going to do next

00:00:14.940 --> 00:00:17.550
is we're going to
introduce gateway in

00:00:17.550 --> 00:00:19.650
our architecture so that we can

00:00:19.650 --> 00:00:22.740
have all the requests
routed through gateway.

00:00:22.740 --> 00:00:25.110
How client would
no longer have to

00:00:25.110 --> 00:00:28.485
point to a specific
microservice.

00:00:28.485 --> 00:00:30.810
Instead, we can now point to

00:00:30.810 --> 00:00:33.675
just one entity and
that is gateway.

00:00:33.675 --> 00:00:36.570
It just needs to know the
host name of Gateway.

00:00:36.570 --> 00:00:39.510
And we're good to go
inside the gateway.

00:00:39.510 --> 00:00:41.660
We're going to provide
some intelligence to

00:00:41.660 --> 00:00:44.030
determine what
requests needs to be

00:00:44.030 --> 00:00:46.070
routed to which service

00:00:46.070 --> 00:00:49.175
you will know what I
mean in just a while.

00:00:49.175 --> 00:00:52.460
But for now let's
create the gateway.

00:00:52.460 --> 00:00:55.500
Create a new Spring
Boot Project.

00:00:58.870 --> 00:01:06.000
I'm going to name
this as gateway.

00:01:06.190 --> 00:01:12.065
Hit Next. Now we have
couple of options here.

00:01:12.065 --> 00:01:13.520
We can either use Zoom,

00:01:13.520 --> 00:01:14.900
which is from Netflix,

00:01:14.900 --> 00:01:17.315
our Spring Cloud gateway.

00:01:17.315 --> 00:01:19.655
They both offer pretty
much the same features.

00:01:19.655 --> 00:01:20.990
They work the same way,

00:01:20.990 --> 00:01:23.255
and they both are non-blocking.

00:01:23.255 --> 00:01:25.700
However, if you're using

00:01:25.700 --> 00:01:28.910
an earlier version
of Zoom, which is 1,

00:01:28.910 --> 00:01:32.930
it is blocking, meaning
that you may soon

00:01:32.930 --> 00:01:34.160
run out of number of

00:01:34.160 --> 00:01:37.475
available threats to
accept incoming requests.

00:01:37.475 --> 00:01:41.555
If you're using Zoom, do
download the latest version.

00:01:41.555 --> 00:01:46.430
But I'm going to be using
Spring Cloud gateway.

00:01:46.430 --> 00:01:49.085
We also have Zoom.

00:01:49.085 --> 00:01:52.230
If you wish to have that.

00:01:59.230 --> 00:02:01.595
In addition to that,

00:02:01.595 --> 00:02:04.580
we're also going
to be needing uric

00:02:04.580 --> 00:02:10.220
applying because get when
h is also a microservice.

00:02:10.220 --> 00:02:13.085
And so it needs to be

00:02:13.085 --> 00:02:17.930
discoverable and register
itself at the Utica silver.

00:02:17.930 --> 00:02:24.980
Hit finish. This would
actually create gateway.

00:02:24.980 --> 00:02:27.260
The next thing we're
going to do is

00:02:27.260 --> 00:02:29.420
to configure routes which will

00:02:29.420 --> 00:02:31.070
give OR gate with
some intelligence

00:02:31.070 --> 00:02:33.425
on how to read a given request.

00:02:33.425 --> 00:02:34.895
And based on that,

00:02:34.895 --> 00:02:38.280
it will understand where
to route the call to.
