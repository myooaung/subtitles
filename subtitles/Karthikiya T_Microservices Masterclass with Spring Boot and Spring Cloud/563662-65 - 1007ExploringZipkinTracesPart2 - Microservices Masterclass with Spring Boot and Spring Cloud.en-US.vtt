WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.950 --> 00:00:05.010
Let us continue. In addition
to all that information,

00:00:05.010 --> 00:00:07.500
we also have tags
which will show

00:00:07.500 --> 00:00:09.180
information like the method that

00:00:09.180 --> 00:00:11.295
is being used to
send the request,

00:00:11.295 --> 00:00:13.785
the path or the endpoint,

00:00:13.785 --> 00:00:18.315
the controller class, the
method that is being invoked,

00:00:18.315 --> 00:00:20.865
and even the client address.

00:00:20.865 --> 00:00:23.145
These are the tags I
was talking about.

00:00:23.145 --> 00:00:27.255
Based on what you can
narrow down the traces.

00:00:27.255 --> 00:00:30.390
We also have annotations

00:00:30.390 --> 00:00:33.580
for each and every
service that you choose.

00:00:33.580 --> 00:00:35.360
And annotations are used to

00:00:35.360 --> 00:00:37.370
record the occurrence in time.

00:00:37.370 --> 00:00:40.820
And we have multiple
annotations.

00:00:40.820 --> 00:00:43.055
We have clients start,

00:00:43.055 --> 00:00:46.220
which means that the client
has made the request.

00:00:46.220 --> 00:00:48.875
And this sets the
beginning of the span.

00:00:48.875 --> 00:00:51.350
Since we have chosen
an inventory service.

00:00:51.350 --> 00:00:54.320
In this case, the client
is a product service,

00:00:54.320 --> 00:00:59.310
and inventory service is a
server to product service.

00:00:59.530 --> 00:01:02.045
Clients start would mean

00:01:02.045 --> 00:01:06.180
that the product service
has made the request.

00:01:07.210 --> 00:01:10.610
Then we have silver star,

00:01:10.610 --> 00:01:13.970
which means that the inventory
service has received

00:01:13.970 --> 00:01:17.940
the request and we'll
start processing it.

00:01:18.070 --> 00:01:21.395
Then we have silver finish,

00:01:21.395 --> 00:01:23.360
which means that the silver

00:01:23.360 --> 00:01:25.040
or the inventory
service has finished

00:01:25.040 --> 00:01:27.200
processing the request and

00:01:27.200 --> 00:01:29.780
has sent the request
back to the client.

00:01:29.780 --> 00:01:33.050
Finally, we have client finish,

00:01:33.050 --> 00:01:34.880
which means that the client or

00:01:34.880 --> 00:01:36.830
the product service has

00:01:36.830 --> 00:01:39.079
received the response
from the server.

00:01:39.079 --> 00:01:42.900
And this sets the
end of the span.

00:01:43.510 --> 00:01:47.030
For each inner reserve
is that you choose.

00:01:47.030 --> 00:01:48.935
You get to take a look at

00:01:48.935 --> 00:01:51.620
their corresponding annotations.

00:01:51.620 --> 00:01:53.960
And this will reveal

00:01:53.960 --> 00:01:57.020
some really crucial
information regarding

00:01:57.020 --> 00:01:59.540
the latencies that
are happening within

00:01:59.540 --> 00:02:03.215
the service or
across the request.

00:02:03.215 --> 00:02:05.405
Zip can also offer says

00:02:05.405 --> 00:02:08.900
a graphical representation
of annotations.

00:02:08.900 --> 00:02:11.150
If you take a look at it.

00:02:11.150 --> 00:02:14.180
We have four circles in here,

00:02:14.180 --> 00:02:17.990
and each would represent
each of these annotations.

00:02:17.990 --> 00:02:20.495
The first circle is
the client start,

00:02:20.495 --> 00:02:24.905
and the second one is
service dot. Third one.

00:02:24.905 --> 00:02:26.420
Not sure if you're
able to notice

00:02:26.420 --> 00:02:27.680
because we have a couple of

00:02:27.680 --> 00:02:30.950
circles which are
overlapped on each other.

00:02:30.950 --> 00:02:35.900
But we have silver finish as
well as the client finish.

00:02:35.900 --> 00:02:38.165
If you notice in this case,

00:02:38.165 --> 00:02:40.940
There's a quite a long duration

00:02:40.940 --> 00:02:44.405
between the server start
and silver finish.

00:02:44.405 --> 00:02:49.055
In our case, it's just
for 61 milliseconds.

00:02:49.055 --> 00:02:52.505
And there really is
nothing we can fix.

00:02:52.505 --> 00:02:54.860
But in real-world
applications you might

00:02:54.860 --> 00:02:58.115
see even higher latencies.

00:02:58.115 --> 00:03:00.200
And then you know
that you need to

00:03:00.200 --> 00:03:02.825
do something to fix that.

00:03:02.825 --> 00:03:04.760
All right, we'll continue from

00:03:04.760 --> 00:03:07.520
next video where we tried
to create a couple of

00:03:07.520 --> 00:03:12.830
negative cases by
simulating an error case.

00:03:12.830 --> 00:03:15.360
I'll see you next one.
