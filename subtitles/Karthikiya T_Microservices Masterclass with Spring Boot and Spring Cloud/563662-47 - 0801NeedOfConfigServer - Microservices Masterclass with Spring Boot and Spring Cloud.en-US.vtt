WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.510
Let us talk about Spring
Cloud conflicts server.

00:00:03.510 --> 00:00:05.970
Imagine that this
is my source code.

00:00:05.970 --> 00:00:07.980
And just for the moment,

00:00:07.980 --> 00:00:09.510
imagine that I have hard-coded

00:00:09.510 --> 00:00:13.170
the config information as part
of the source file itself.

00:00:13.170 --> 00:00:15.180
When it's a config information.

00:00:15.180 --> 00:00:18.315
I mean something like database
connection parameters,

00:00:18.315 --> 00:00:21.990
j and k information
or information about

00:00:21.990 --> 00:00:23.730
an email service provider along

00:00:23.730 --> 00:00:26.085
with their credentials, etc.

00:00:26.085 --> 00:00:27.855
What's the drawback
in doing that?

00:00:27.855 --> 00:00:29.460
I mean, what's the
drawback in hard-coding

00:00:29.460 --> 00:00:32.980
the conjugate information
as part of the source file.

00:00:32.980 --> 00:00:35.645
Well, the drawback is

00:00:35.645 --> 00:00:38.705
every time we want to make
changes in the config,

00:00:38.705 --> 00:00:41.600
you need to make those changes
inside the source file,

00:00:41.600 --> 00:00:44.465
which means to
recompile the project,

00:00:44.465 --> 00:00:46.595
build the project,
and then deploy.

00:00:46.595 --> 00:00:48.710
Which is quite a task.

00:00:48.710 --> 00:00:51.829
It may not be all that off a
task if you are a developer.

00:00:51.829 --> 00:00:53.120
But if you're coming from

00:00:53.120 --> 00:00:54.905
a non-technical background or

00:00:54.905 --> 00:00:56.825
if you don't have
knowledge on programming,

00:00:56.825 --> 00:00:58.835
then this is quite a task.

00:00:58.835 --> 00:01:00.920
Moreover, you won't be using

00:01:00.920 --> 00:01:03.155
the config information
in just single file.

00:01:03.155 --> 00:01:05.900
You could be using it
in multiple files.

00:01:05.900 --> 00:01:08.660
And in an instance where
you need to make changes in

00:01:08.660 --> 00:01:10.670
the config information here to

00:01:10.670 --> 00:01:13.190
make those changes across
all the locations,

00:01:13.190 --> 00:01:15.455
which is quite impractical.

00:01:15.455 --> 00:01:17.405
So to solve this problem,

00:01:17.405 --> 00:01:20.525
way to separate the conflict
from the source file,

00:01:20.525 --> 00:01:22.280
we need to take out
the conflict from

00:01:22.280 --> 00:01:25.820
the source file and put
it in another file.

00:01:25.820 --> 00:01:28.130
Typically this goes
inside the properties or

00:01:28.130 --> 00:01:30.770
the YAML file or even XML file.

00:01:30.770 --> 00:01:33.140
This way we can get
it out the problem

00:01:33.140 --> 00:01:35.975
of having to make changes
in the source file.

00:01:35.975 --> 00:01:39.680
And since we now have all
the config in one location,

00:01:39.680 --> 00:01:41.075
if we make changes here,

00:01:41.075 --> 00:01:43.115
it would get
reflected everywhere.

00:01:43.115 --> 00:01:44.675
But this is not enough.

00:01:44.675 --> 00:01:47.390
We still have one more
problem to be addressed.

00:01:47.390 --> 00:01:50.630
In all likelihood, your
configurations will not

00:01:50.630 --> 00:01:54.275
remain same in every enrollment
you run your application.

00:01:54.275 --> 00:01:57.200
For example, if you're
on dev enrollment,

00:01:57.200 --> 00:01:58.400
you may want to point to

00:01:58.400 --> 00:02:01.445
a test database or
test e-mail server.

00:02:01.445 --> 00:02:03.964
But whereas if you're on
production enrollment,

00:02:03.964 --> 00:02:05.540
you may actually
want to point to

00:02:05.540 --> 00:02:08.855
the actual database and
the actual e-mail server.

00:02:08.855 --> 00:02:11.390
It's very impractical to
actually make changes in

00:02:11.390 --> 00:02:14.570
the conflict file every time
you switch your enrollment.

00:02:14.570 --> 00:02:15.860
So to solve this problem,

00:02:15.860 --> 00:02:17.959
we have so-called profiles.

00:02:17.959 --> 00:02:19.955
You're going to have
the dev profile,

00:02:19.955 --> 00:02:23.495
which would have dev and
Roman specific configuration.

00:02:23.495 --> 00:02:25.790
And then similarly you
could have conformation

00:02:25.790 --> 00:02:28.175
that is specific to
production enrollment.

00:02:28.175 --> 00:02:31.175
And similarly for maybe
test and Romans as well.

00:02:31.175 --> 00:02:32.810
Now every time you launch

00:02:32.810 --> 00:02:35.300
your service and stands
or the application,

00:02:35.300 --> 00:02:39.065
you can specify which profile
do you want to activate

00:02:39.065 --> 00:02:41.945
and its corresponding
configuration

00:02:41.945 --> 00:02:43.895
will come into picture.

00:02:43.895 --> 00:02:45.950
Well, this may be enough if

00:02:45.950 --> 00:02:47.660
you're having a
single application,

00:02:47.660 --> 00:02:50.030
I'm talking about
monolithic applications.

00:02:50.030 --> 00:02:52.310
But this is clearly
not enough if you're

00:02:52.310 --> 00:02:54.815
talking in the context
of microservices.

00:02:54.815 --> 00:02:56.750
Remember, we're still need to

00:02:56.750 --> 00:02:59.255
build our project and
deploy the application.

00:02:59.255 --> 00:03:01.040
Every time we introduce

00:03:01.040 --> 00:03:04.230
new change inside
the conflict file.

00:03:04.240 --> 00:03:06.395
In microservice and Roman,

00:03:06.395 --> 00:03:09.020
you could have hundreds
of microservices.

00:03:09.020 --> 00:03:12.380
And imagine that
they're all having

00:03:12.380 --> 00:03:16.415
their own specific conflict
files or even profiles.

00:03:16.415 --> 00:03:19.970
Sub-problem here,
you may ask, well,

00:03:19.970 --> 00:03:22.760
imagine that out of
all the microservices,

00:03:22.760 --> 00:03:26.749
50 of them are using a
particular e-mail provider.

00:03:26.749 --> 00:03:28.670
Let's say that I now decided to

00:03:28.670 --> 00:03:30.725
point a different
e-mail provider.

00:03:30.725 --> 00:03:33.470
Then to update the confidence

00:03:33.470 --> 00:03:35.690
I had all those
50 microservices,

00:03:35.690 --> 00:03:38.105
build them and then deploy.

00:03:38.105 --> 00:03:41.705
This requires lot of
manual intervention,

00:03:41.705 --> 00:03:43.340
which is completely against

00:03:43.340 --> 00:03:45.980
the principles of microservices.

00:03:45.980 --> 00:03:49.025
Microservices, you
should try your best

00:03:49.025 --> 00:03:52.910
to avoid manual intervention
as much as possible.

00:03:52.910 --> 00:03:55.490
Moreover, let's say that
I would like to add

00:03:55.490 --> 00:03:58.625
a new profile to support
a new enrollment

00:03:58.625 --> 00:04:01.595
that requires me to make
those changes inside

00:04:01.595 --> 00:04:04.820
all the microservices
that ever existed.

00:04:04.820 --> 00:04:06.980
And just imagine the amount of

00:04:06.980 --> 00:04:08.900
manual intervention
and therefore force

00:04:08.900 --> 00:04:11.000
required to accomplish it.

00:04:11.000 --> 00:04:14.300
This is surely a problem
went to address.

00:04:14.300 --> 00:04:16.400
Well, that's where
the conflict server

00:04:16.400 --> 00:04:17.900
would come to rescue.

00:04:17.900 --> 00:04:20.090
We solved some of the problem by

00:04:20.090 --> 00:04:22.370
separating the conflict
from the source.

00:04:22.370 --> 00:04:24.320
With conflict server, we're

00:04:24.320 --> 00:04:26.060
going to separate
the conflict from

00:04:26.060 --> 00:04:29.615
the service itself so that
every time we make changes,

00:04:29.615 --> 00:04:31.220
we do not have to bother to

00:04:31.220 --> 00:04:33.455
build the application
and deploy.

00:04:33.455 --> 00:04:35.450
With conflict server.

00:04:35.450 --> 00:04:38.450
We would be able to adhere
to the principle of Bill

00:04:38.450 --> 00:04:41.630
just once and deploy
it on any enrollment.

00:04:41.630 --> 00:04:42.905
What this means is,

00:04:42.905 --> 00:04:45.260
even if we make
changes in the config,

00:04:45.260 --> 00:04:46.910
that shouldn't
require us to build

00:04:46.910 --> 00:04:49.354
a microservice and deploy.

00:04:49.354 --> 00:04:52.025
If we are implementing
conflict server,

00:04:52.025 --> 00:04:54.410
then we should follow
these principles.

00:04:54.410 --> 00:04:56.645
First of which is separation,

00:04:56.645 --> 00:04:59.240
which means the
application conflict

00:04:59.240 --> 00:05:02.375
shouldn't be deployed with
the service instance.

00:05:02.375 --> 00:05:04.220
Since we're separating
the conflict

00:05:04.220 --> 00:05:05.884
from the service instance,

00:05:05.884 --> 00:05:08.210
every time we'll
introduce changes,

00:05:08.210 --> 00:05:09.650
we do not have to bother to

00:05:09.650 --> 00:05:12.680
rebuild the service
instance and deploy it.

00:05:12.680 --> 00:05:16.040
The second principle
is abstract way to

00:05:16.040 --> 00:05:19.190
expose the rest API to
read the configuration.

00:05:19.190 --> 00:05:21.560
Thereby, we can reap
all the benefits

00:05:21.560 --> 00:05:24.065
of what rest API has to offer.

00:05:24.065 --> 00:05:25.685
For example, we can apply

00:05:25.685 --> 00:05:28.984
security authorization
and authentication, etc.

00:05:28.984 --> 00:05:32.240
Number three is
high availability.

00:05:32.240 --> 00:05:33.590
The conflict server must be

00:05:33.590 --> 00:05:35.855
highly available and redundant.

00:05:35.855 --> 00:05:38.240
Because of the fact that
conflict server plays

00:05:38.240 --> 00:05:41.720
a crucial role in configuring
the microservice.

00:05:41.720 --> 00:05:44.330
It makes sense to make
it highly available.

00:05:44.330 --> 00:05:47.420
Otherwise, we might
run into trouble.

00:05:47.420 --> 00:05:49.325
Basically.

00:05:49.325 --> 00:05:52.640
We will now have a conflict
server which should

00:05:52.640 --> 00:05:55.595
manage the configurations
of all the microservices.

00:05:55.595 --> 00:05:58.940
And then all the microservices
would be able to make

00:05:58.940 --> 00:06:01.040
a rest API call to read

00:06:01.040 --> 00:06:04.070
the config information
when the startup.

00:06:04.070 --> 00:06:07.280
In an instance there is
change in configuration.

00:06:07.280 --> 00:06:08.780
We will also notify

00:06:08.780 --> 00:06:11.630
their corresponding
microservices regarding

00:06:11.630 --> 00:06:13.130
the change so that

00:06:13.130 --> 00:06:16.670
those changes can get
reflected on the microservice.

00:06:16.670 --> 00:06:18.500
Next, we're going to see how we

00:06:18.500 --> 00:06:21.570
can implement conflicts over.
