WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.474
Let's talk about
Gateway filters,

00:00:02.474 --> 00:00:05.895
which is one of the important
concepts of Gateway.

00:00:05.895 --> 00:00:07.860
But before that, let us try to

00:00:07.860 --> 00:00:10.200
understand what are
cross-cutting concerns.

00:00:10.200 --> 00:00:12.735
We could be having n
number of microservices,

00:00:12.735 --> 00:00:14.955
each with their own
responsibilities.

00:00:14.955 --> 00:00:17.520
But there could be certain
features which will

00:00:17.520 --> 00:00:20.020
remain common across
all the microservices.

00:00:20.020 --> 00:00:23.870
For example, security
logging and metrics.

00:00:23.870 --> 00:00:26.525
Security as an authorization
and authentication,

00:00:26.525 --> 00:00:28.220
logging would mean maybe

00:00:28.220 --> 00:00:30.949
logging the incoming
requests, etc.

00:00:30.949 --> 00:00:33.290
Matrix would mean somebody

00:00:33.290 --> 00:00:34.760
off how many requests were made,

00:00:34.760 --> 00:00:37.775
how many were failed, etc.

00:00:37.775 --> 00:00:39.380
While we can implement

00:00:39.380 --> 00:00:41.105
all these cross-cutting concerns

00:00:41.105 --> 00:00:43.070
across all the microservices.

00:00:43.070 --> 00:00:46.355
It comes with a lot
of disadvantages.

00:00:46.355 --> 00:00:49.280
Number one, it's really
difficult to implement

00:00:49.280 --> 00:00:52.295
these consistently
across all the services.

00:00:52.295 --> 00:00:53.690
Let's talk about security.

00:00:53.690 --> 00:00:57.650
For instance, if you don't
want to allow, say, X user,

00:00:57.650 --> 00:00:59.090
then it has to remain

00:00:59.090 --> 00:01:02.405
consistently across
all the microservices.

00:01:02.405 --> 00:01:04.219
If you don't implement properly,

00:01:04.219 --> 00:01:07.430
then you might end up
having security issues.

00:01:07.430 --> 00:01:10.250
Number to developer needs to

00:01:10.250 --> 00:01:13.025
focus on crosscutting
concepts as well.

00:01:13.025 --> 00:01:16.625
In addition to what
microservice is meant for.

00:01:16.625 --> 00:01:18.800
Number three, difficult to

00:01:18.800 --> 00:01:21.545
introduce an enforced
new changes.

00:01:21.545 --> 00:01:23.540
If you introduce a new change,

00:01:23.540 --> 00:01:25.250
it might take a bit of time

00:01:25.250 --> 00:01:27.875
for all the
microservices to adopt.

00:01:27.875 --> 00:01:30.170
Because most often,

00:01:30.170 --> 00:01:31.640
microservices won't be written

00:01:31.640 --> 00:01:33.215
in same programming language.

00:01:33.215 --> 00:01:34.550
They might be using a different

00:01:34.550 --> 00:01:36.320
programming language
or framework.

00:01:36.320 --> 00:01:39.245
And it still have to
manage to implement

00:01:39.245 --> 00:01:42.260
all these cross-cutting
concerns consistently,

00:01:42.260 --> 00:01:44.135
which is quite a challenge.

00:01:44.135 --> 00:01:46.235
And it takes even more effort

00:01:46.235 --> 00:01:48.920
to test the entire application.

00:01:48.920 --> 00:01:51.080
However, if we have

00:01:51.080 --> 00:01:54.845
all these cross-cutting concerns
in one single location,

00:01:54.845 --> 00:01:57.620
then we can solve
these problems.

00:01:57.620 --> 00:02:01.355
That's where get repelled
us would come into picture.

00:02:01.355 --> 00:02:04.655
Whenever there is an incoming
requests to Gateway,

00:02:04.655 --> 00:02:06.515
we have pre filters,

00:02:06.515 --> 00:02:08.420
which will come
into picture before

00:02:08.420 --> 00:02:11.555
routing the call to the
destination service.

00:02:11.555 --> 00:02:16.820
In pre filters, we can
modify the requests or

00:02:16.820 --> 00:02:19.190
impulse cross-cutting
concerns before

00:02:19.190 --> 00:02:22.070
sending the request to
the destination service.

00:02:22.070 --> 00:02:23.930
Once we get back the response

00:02:23.930 --> 00:02:25.685
from the destination service,

00:02:25.685 --> 00:02:28.805
we have both filters which
will come into picture.

00:02:28.805 --> 00:02:31.490
And in here, we can
do a variety of

00:02:31.490 --> 00:02:34.160
things like logging
the response,

00:02:34.160 --> 00:02:37.745
are handling the error,
performing the audit,

00:02:37.745 --> 00:02:39.170
which means we can analyze

00:02:39.170 --> 00:02:42.980
the response and see if it has
any sense to inflammation.

00:02:42.980 --> 00:02:45.740
Things that we're
not supposed to send

00:02:45.740 --> 00:02:48.845
back to the client, etc.

00:02:48.845 --> 00:02:53.480
Finally, responsible
descend back to the color.

00:02:53.480 --> 00:02:54.920
Next, we're going
to take a look at

00:02:54.920 --> 00:02:57.810
an example of filters.
