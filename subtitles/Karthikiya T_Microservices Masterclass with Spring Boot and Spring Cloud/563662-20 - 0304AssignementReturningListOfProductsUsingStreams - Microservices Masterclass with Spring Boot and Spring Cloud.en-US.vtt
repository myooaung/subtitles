WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.070
Right now we're
trying to retrieve

00:00:02.070 --> 00:00:05.550
the details of a specific
product depending on its ID.

00:00:05.550 --> 00:00:07.650
But now let's say that

00:00:07.650 --> 00:00:09.540
I would like to retrieve
all the list of

00:00:09.540 --> 00:00:11.250
products available along with

00:00:11.250 --> 00:00:13.785
their price as well as
the stock availability.

00:00:13.785 --> 00:00:16.980
I want you to take this as
an assignment and introduce

00:00:16.980 --> 00:00:18.810
an endpoint that will help us

00:00:18.810 --> 00:00:21.540
retrieve the list of products.

00:00:21.540 --> 00:00:25.750
Basically you're going to
have another end point.

00:00:28.310 --> 00:00:32.910
Maybe with the path slash list.

00:00:32.910 --> 00:00:35.190
Get products.

00:00:35.190 --> 00:00:38.925
We no longer be needing
the path variable.

00:00:38.925 --> 00:00:41.590
It doesn't make sense.

00:00:41.590 --> 00:00:43.865
And since we are
returning a list,

00:00:43.865 --> 00:00:48.920
this is going to be
flux. Inside here.

00:00:48.920 --> 00:00:52.355
I want you to introduce the
code that will do the job.

00:00:52.355 --> 00:00:56.940
And of course I don't want
you to just use a for-loop.

00:00:57.790 --> 00:01:00.245
Copy paste this code inside.

00:01:00.245 --> 00:01:02.615
I don't want you to
go in that approach.

00:01:02.615 --> 00:01:04.295
That's not the right way.

00:01:04.295 --> 00:01:07.715
I want you to code in
more declarative manner.

00:01:07.715 --> 00:01:09.965
I think I've already
given the glue.

00:01:09.965 --> 00:01:12.185
You need to use stream API.

00:01:12.185 --> 00:01:16.710
Pause the video right now and
try to introduce that code.

00:01:18.280 --> 00:01:21.050
I hope that you tried.

00:01:21.050 --> 00:01:23.690
What we're going to
do is we're going to

00:01:23.690 --> 00:01:26.360
create a stream out
of this product list.

00:01:26.360 --> 00:01:32.190
And then we're going to
say flux dot from stream,

00:01:32.230 --> 00:01:36.900
product list, dot stream.

00:01:37.630 --> 00:01:43.685
This is going to get a
stream of elements flatMap.

00:01:43.685 --> 00:01:47.375
And then here we will specify
the lambda expression.

00:01:47.375 --> 00:01:51.334
We're going to keep getting
the product info objects

00:01:51.334 --> 00:01:54.020
from that stream.

00:01:54.020 --> 00:01:56.810
Here would have the code,

00:01:56.810 --> 00:01:58.850
actually pretty much the similar

00:01:58.850 --> 00:02:02.135
code as to what we have in here.

00:02:02.135 --> 00:02:07.470
I'm just simply going to copy
it and have it inside here.

00:02:07.690 --> 00:02:10.625
We don't need this instruction

00:02:10.625 --> 00:02:14.670
because we already have
the product info object.

00:02:14.710 --> 00:02:18.720
Get product ID.

00:02:19.000 --> 00:02:22.355
Going to do the
same here as well.

00:02:22.355 --> 00:02:30.530
Get Product ID. This time we
want to zip only two monos.

00:02:30.530 --> 00:02:34.080
We will exclude product info.

00:02:35.950 --> 00:02:39.530
We get Daddy from
producting for object.

00:02:39.530 --> 00:02:43.650
Similarly for name
and the description.

00:02:43.810 --> 00:02:46.190
This is going to be T1,

00:02:46.190 --> 00:02:48.995
which corresponds
to the price mono,

00:02:48.995 --> 00:02:51.904
and t2 corresponds
to the inventory.

00:02:51.904 --> 00:02:53.550
Mono.

00:03:01.900 --> 00:03:04.805
Need to return this though.

00:03:04.805 --> 00:03:10.680
Let's say that the file and
launch our application.

00:03:20.440 --> 00:03:24.030
Let's go to postmen.

00:03:30.130 --> 00:03:39.335
This is going to be product
slash list. We got.

00:03:39.335 --> 00:03:46.080
Notice. Let's take a
look what's going wrong.

00:03:50.920 --> 00:03:54.750
Alright, can you
guess the problem?

00:03:56.200 --> 00:04:03.000
We're populating this
list from this method.

00:04:03.880 --> 00:04:07.730
Whenever we are saying
get producting for,

00:04:07.730 --> 00:04:10.740
that is when we are
calling this method.

00:04:11.590 --> 00:04:16.580
Let me just copy this line
of code here as well.

00:04:16.580 --> 00:04:18.830
Again, I don't think this is

00:04:18.830 --> 00:04:20.795
reliable way to
populate the list.

00:04:20.795 --> 00:04:22.100
We just wanted to replicate

00:04:22.100 --> 00:04:24.140
the behavior of
having a database.

00:04:24.140 --> 00:04:27.410
You can actually introduce
constructor if you wish,

00:04:27.410 --> 00:04:31.430
and have this method specified
over there if you wish.

00:04:31.430 --> 00:04:33.560
That should work as well.

00:04:33.560 --> 00:04:36.000
Actually I'm going to do that.

00:04:48.250 --> 00:04:51.500
Let me cut this from here.

00:04:51.500 --> 00:05:00.680
As well as from
here, straight here.

00:05:00.680 --> 00:05:05.040
We're going to do the same
for other services as well.

00:05:05.890 --> 00:05:09.329
Let me introduce
the constructor.

00:05:13.480 --> 00:05:16.505
Get rid off this from here.

00:05:16.505 --> 00:05:18.725
Let's have a tier.

00:05:18.725 --> 00:05:23.010
Then finally for inventory
service as well.

00:05:32.260 --> 00:05:35.555
Save all the services,

00:05:35.555 --> 00:05:38.640
restart everything.

00:05:40.660 --> 00:05:44.010
Pricing service.

00:05:56.160 --> 00:05:59.570
Let's go to Postman.

00:06:00.900 --> 00:06:05.180
And this time it worked well.

00:06:15.300 --> 00:06:19.100
Alright, hope it makes sense.

00:06:19.260 --> 00:06:22.075
But there's one problem though.

00:06:22.075 --> 00:06:23.620
Actually it's not a bug,

00:06:23.620 --> 00:06:26.500
but it's more of a
performance issue.

00:06:26.500 --> 00:06:32.150
Can you try to make a guess
on what they could be?

00:06:33.990 --> 00:06:37.370
Right here in this method.

00:06:38.320 --> 00:06:40.580
Well, the problem is

00:06:40.580 --> 00:06:42.380
for each and every
element in the list,

00:06:42.380 --> 00:06:45.290
we're trying to make
multiple web clients.

00:06:45.290 --> 00:06:49.625
Which means that there are
1000 elements in the list.

00:06:49.625 --> 00:06:51.425
Are there 1000 products,

00:06:51.425 --> 00:06:56.300
which means made to send
almost 2 thousand requests?

00:06:56.300 --> 00:07:00.035
The network, that's going to
cost us a lot of bandwidth.

00:07:00.035 --> 00:07:02.300
And if you're using
Cloud services,

00:07:02.300 --> 00:07:05.540
it's going to increase
your costs to

00:07:05.540 --> 00:07:09.080
try your best to optimize
the performance.

00:07:09.080 --> 00:07:12.230
How are we going to
optimize the performance?

00:07:12.230 --> 00:07:16.730
Well, one solution
could be just send

00:07:16.730 --> 00:07:19.130
one single request from

00:07:19.130 --> 00:07:21.665
our product service to
the pricing service.

00:07:21.665 --> 00:07:23.960
That single request should

00:07:23.960 --> 00:07:25.490
retrieve the list of

00:07:25.490 --> 00:07:27.530
products along with
their price tags.

00:07:27.530 --> 00:07:30.605
We can do the same for
the inventory as well.

00:07:30.605 --> 00:07:34.225
Just do request will have
everything in place.

00:07:34.225 --> 00:07:37.190
Then we'll use
that list in order

00:07:37.190 --> 00:07:40.800
to populate the product objects.

00:07:41.680 --> 00:07:44.030
If you wish, you can make

00:07:44.030 --> 00:07:48.240
necessary changes and
introduce that behavior.
