WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.370
If you're a project
manager or an architect,

00:00:02.370 --> 00:00:05.010
you're going to find a lot
of value in this lecture

00:00:05.010 --> 00:00:08.970
because I'm going to share
my personal views on how

00:00:08.970 --> 00:00:11.100
can we go about migrating

00:00:11.100 --> 00:00:13.260
the application
from blocking API

00:00:13.260 --> 00:00:15.840
calls to using React

00:00:15.840 --> 00:00:18.870
to libraries and make
it non-blocking.

00:00:18.870 --> 00:00:21.434
And since this is from
my own experience,

00:00:21.434 --> 00:00:25.005
I believe you will find
a lot of value in this.

00:00:25.005 --> 00:00:27.450
Here's the migration strategy,

00:00:27.450 --> 00:00:29.400
which I believe
we should go with

00:00:29.400 --> 00:00:33.390
understand and evaluate
potential risks in migrating.

00:00:33.390 --> 00:00:35.790
First of all, you need
to understand and try to

00:00:35.790 --> 00:00:39.090
evaluate the potential
risks and migrating,

00:00:39.090 --> 00:00:40.410
you should figure
out whether it's

00:00:40.410 --> 00:00:42.250
really worth migrating or not.

00:00:42.250 --> 00:00:43.790
Look at the pros and cons,

00:00:43.790 --> 00:00:46.880
how much time is it going to
take and whether or not Is

00:00:46.880 --> 00:00:49.925
this the right time
to start the project?

00:00:49.925 --> 00:00:51.680
If you have very short release,

00:00:51.680 --> 00:00:54.200
then I would recommend
not go with it

00:00:54.200 --> 00:00:56.510
because there are
certain challenges

00:00:56.510 --> 00:00:58.310
which cannot be foreseen.

00:00:58.310 --> 00:01:00.440
It's obviously better that

00:01:00.440 --> 00:01:02.870
you really spend a lot
of energy and trying to

00:01:02.870 --> 00:01:05.000
analyze the risks and

00:01:05.000 --> 00:01:07.190
the benefits that
you might get with

00:01:07.190 --> 00:01:10.070
Reactive Programming next year

00:01:10.070 --> 00:01:14.180
to really emphasize on
acquiring the right talent.

00:01:14.180 --> 00:01:16.310
Who are having background
on dealing with

00:01:16.310 --> 00:01:19.085
reactive projects and issued

00:01:19.085 --> 00:01:21.170
even try and your
existing team members.

00:01:21.170 --> 00:01:22.850
In fact, it's just
not enough that

00:01:22.850 --> 00:01:24.980
you train your existing members

00:01:24.980 --> 00:01:29.300
and teach them about Web Flux
and all not going to work.

00:01:29.300 --> 00:01:30.500
You also need to have

00:01:30.500 --> 00:01:32.750
the right talent in
place who can drive

00:01:32.750 --> 00:01:36.950
the project and deliver,
deliver on time.

00:01:36.950 --> 00:01:38.045
It's very crucial.

00:01:38.045 --> 00:01:39.380
Talent acquisition is one of

00:01:39.380 --> 00:01:43.235
the crucial steps
in this process.

00:01:43.235 --> 00:01:45.620
Here to choose the
ideal time frame

00:01:45.620 --> 00:01:48.080
for migration activity and

00:01:48.080 --> 00:01:50.240
try to identify the services

00:01:50.240 --> 00:01:52.610
that will have lesser impact,

00:01:52.610 --> 00:01:54.275
like I said before,

00:01:54.275 --> 00:01:57.350
year to evaluate how much
time is it going to take?

00:01:57.350 --> 00:02:00.665
The best time to have it is
at the start of the release.

00:02:00.665 --> 00:02:03.005
It don't try to push this at
the middle of the release.

00:02:03.005 --> 00:02:05.735
That's going to cost
you really bad.

00:02:05.735 --> 00:02:08.420
And at the same time here to try

00:02:08.420 --> 00:02:10.940
to identify those
services which will have

00:02:10.940 --> 00:02:13.250
lesser impact and try to migrate

00:02:13.250 --> 00:02:16.280
them so that even if
something goes wrong,

00:02:16.280 --> 00:02:18.410
you shouldn't have too
much to worry about.

00:02:18.410 --> 00:02:21.260
It shouldn't have too
much of an impact on

00:02:21.260 --> 00:02:25.670
your entire application
or the development time.

00:02:25.670 --> 00:02:29.990
Replace the blocking dependencies
with React to one's.

00:02:29.990 --> 00:02:33.710
Just try to find out all
the dependencies which

00:02:33.710 --> 00:02:37.490
are having blocking libraries
and try to replace them.

00:02:37.490 --> 00:02:40.100
Width, react to libraries and

00:02:40.100 --> 00:02:42.589
try to introduce the
react to code changes.

00:02:42.589 --> 00:02:45.665
And of course, this is one of
the time-consuming phases.

00:02:45.665 --> 00:02:48.260
And introducing code
also means you have

00:02:48.260 --> 00:02:50.855
to take care of unit tests
and integration tests,

00:02:50.855 --> 00:02:53.570
which is in fact a
mammoth of a task.

00:02:53.570 --> 00:02:54.770
In fact, there are

00:02:54.770 --> 00:02:56.960
instances in my career
where certain issues

00:02:56.960 --> 00:03:00.575
were even escalated to VP
level in the organization.

00:03:00.575 --> 00:03:04.145
And that is one of
the toughest things.

00:03:04.145 --> 00:03:06.200
And it's definitely
quite a challenge

00:03:06.200 --> 00:03:09.005
to do it very smoothly.

00:03:09.005 --> 00:03:11.300
And I believe as
much time as you

00:03:11.300 --> 00:03:13.565
would spend on bringing
the code changes,

00:03:13.565 --> 00:03:16.430
you'd have to spend same
amount of time in fixing

00:03:16.430 --> 00:03:17.840
the issues in your unit tests

00:03:17.840 --> 00:03:19.970
as well as integration tests.

00:03:19.970 --> 00:03:21.980
And definitely
this going to take

00:03:21.980 --> 00:03:23.810
about two to three months

00:03:23.810 --> 00:03:26.520
depending on the size
of your project.

00:03:27.190 --> 00:03:29.930
Next unit tests as
the performance

00:03:29.930 --> 00:03:32.315
by running traffic tests.

00:03:32.315 --> 00:03:34.385
To use a tool like Jane meter.

00:03:34.385 --> 00:03:36.680
If you find anything significant

00:03:36.680 --> 00:03:39.110
and see if it is
serving the purpose

00:03:39.110 --> 00:03:41.615
here to do that at
microservice level

00:03:41.615 --> 00:03:44.450
and at the end at
application level,

00:03:44.450 --> 00:03:47.420
of course, next year

00:03:47.420 --> 00:03:49.580
to ensure there are
no blocking calls.

00:03:49.580 --> 00:03:52.250
As such, you can use a
tool like block honed

00:03:52.250 --> 00:03:55.835
and try to identify all
those hidden blocking calls,

00:03:55.835 --> 00:03:58.430
which might actually defeat

00:03:58.430 --> 00:03:59.780
the purpose of why

00:03:59.780 --> 00:04:02.345
you're introducing the
actor programming.

00:04:02.345 --> 00:04:05.240
Finally, you will take
care of the rest of

00:04:05.240 --> 00:04:08.720
the modules as well and migrate
the entire application.

00:04:08.720 --> 00:04:11.870
This has to be one of
your major agendas for

00:04:11.870 --> 00:04:15.200
the release and you have to
have a proper plan in place.

00:04:15.200 --> 00:04:19.040
Otherwise, you went to mess
things up and it will be so

00:04:19.040 --> 00:04:23.690
messy that it's really hard
to get back to normal.

00:04:23.690 --> 00:04:26.030
You have to be
having a proper plan

00:04:26.030 --> 00:04:29.340
in place. This is helpful.
