WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.560 --> 00:00:03.330
Bisher haben wir die
 Konfliktdateien

00:00:03.330 --> 00:00:05.250
sich in GitHub befinden, und dann

00:00:05.250 --> 00:00:06.630
haben
 wir den Konfliktserver
 sie für die Dienste gesehen

00:00:06.630 --> 00:00:09.210
,
 was großartig ist. 

00:00:09.210 --> 00:00:11.895
Dies bringt jedoch einige
 zusätzliche Herausforderungen mit sich. 

00:00:11.895 --> 00:00:14.460
Da wir nun
 alle Konfliktdateien von
 einzelnen Microservices
 an einen gemeinsamen Ort verschoben

00:00:14.460 --> 00:00:17.250
werden,


00:00:17.250 --> 00:00:19.125
wie in diesem Fall GitHub. 

00:00:19.125 --> 00:00:20.910
Dies bedeutet auch
, dass alles
 hier drin


00:00:20.910 --> 00:00:23.490
von allen anderen gesehen werden kann. 

00:00:23.490 --> 00:00:24.810
Und wenn es jemand mit


00:00:24.810 --> 00:00:28.130
böswilliger Absicht ist, der sich
 diesen Inhalt anschaut,

00:00:28.130 --> 00:00:30.200
besteht

 offensichtlich die Möglichkeit,


00:00:30.200 --> 00:00:32.390
dass er
 diese Informationen missbrauchen kann. 

00:00:32.390 --> 00:00:34.910
Dies bedeutet, dass wir
 Informationen wie ein
 Datenbankkennwort oder API-Schlüssel usw. nicht sinnvoll haben
 wollen

00:00:34.910 --> 00:00:39.695
.


00:00:39.695 --> 00:00:41.480
Wie schützen wir sie? 

00:00:41.480 --> 00:00:45.335
Nun, die Antwort lautet
 Verschlüsselung und Entschlüsselung. 

00:00:45.335 --> 00:00:47.135
Was das bedeutet ist, dass

00:00:47.135 --> 00:00:50.075
wir
 jedes Mal verschlüsseln, wenn
 wir versuchen, das Passwort
 zu speichern

00:00:50.075 --> 00:00:53.390
,
 so dass es in
 einem Format angezeigt wird

00:00:53.390 --> 00:00:54.980
, das niemand außer
 den Konflikten
 verstehen kann

00:00:54.980 --> 00:00:57.440
. 

00:00:57.440 --> 00:00:59.300
Und wenn Konflikte reich sind,

00:01:01.730 --> 00:01:03.410
wird
 diese Eigenschaft,
 die verschlüsselt
 ist, diese entschlüsselt,

00:00:59.300 --> 00:01:01.730
diese Eigenschaft,
 die verschlüsselt
 ist,

00:01:03.410 --> 00:01:05.825
den tatsächlichen Text
 extrahiert


00:01:05.825 --> 00:01:08.284
und dann an die
 Anfrage und den Dienst sendet. 

00:01:08.284 --> 00:01:10.835
Du wirst schon in einer Weile wissen, was ich
 meine. 

00:01:10.835 --> 00:01:12.740
Aber das erste, was
 wir tun
 müssen, um


00:01:12.740 --> 00:01:14.180
Verschlüsselung und
 Entschlüsselung zu ermöglichen

00:01:14.180 --> 00:01:17.030
, ist die Einführung

00:01:17.030 --> 00:01:20.345
Spring Security in unsere
 Projektkonflikte. 

00:01:20.345 --> 00:01:25.655
Und genau das mache ich
 in der POM-XML-Datei. 

00:01:25.655 --> 00:01:29.870
Wann muss eine
 zusätzliche Abhängigkeit eingeführt werden. 

00:01:29.870 --> 00:01:39.230
Und das wird
 Spring Boot Starter-Sicherheit sein. 

00:01:39.230 --> 00:01:45.840
Die Akte. Lasst uns das Projekt
 aktualisieren. 

00:01:50.320 --> 00:01:53.045
Sobald es fertig ist. 

00:01:53.045 --> 00:01:58.475
Lassen Sie uns einige
 sicherheitsspezifische Konfigurationen vorstellen. 

00:01:58.475 --> 00:02:01.684
Ich möchte zuerst den Benutzernamen und
 das Passwort festlegen. 

00:02:01.684 --> 00:02:04.820
Eigentlich brauchen wir
 es nicht, weil ich

00:02:04.820 --> 00:02:08.015
alle Endpunkte
 ohne Authentifizierung
 zulassen werde. 

00:02:08.015 --> 00:02:10.325
Also ignoriere ich es vorerst einfach. 

00:02:10.325 --> 00:02:14.090
Wenn Sie
 die Sicherheitsabhängigkeit hinzufügen,
 wird standardmäßig automatisch die

00:02:14.090 --> 00:02:16.430
Authentifizierung mit
 dem


00:02:16.430 --> 00:02:19.639
Standardbenutzernamen und dem
 automatisch generierten Kennwort aktiviert. 

00:02:19.639 --> 00:02:21.470
Also könnten wir dieses Mindestpasswort tatsächlich in
 etwas ändern


00:02:21.470 --> 00:02:24.500
, das es Ihnen wünschen wird. 

00:02:24.500 --> 00:02:27.200
Alternativ können wir jedem
 einfach ohne
 Einschränkungen auf
 alle Endpunkte zugreifen

00:02:27.200 --> 00:02:30.530
lassen. 

00:02:30.530 --> 00:02:32.480
Dafür. 

00:02:32.480 --> 00:02:36.150
Ich erstelle eine neue
 Sicherheitskonfliktdatei. 

00:02:36.250 --> 00:02:43.530
Ich nenne es Web-Sicherheit. 

00:02:43.690 --> 00:02:46.865
Hier erstellen wir
 eine Regel


00:02:46.865 --> 00:02:51.395
, die es jedem ermöglicht,
 auf ein Routing zuzugreifen. 

00:02:51.395 --> 00:02:56.310
Ich sage „Websicherheit
 aktivieren“. 

00:03:00.250 --> 00:03:03.720
Ich
 überschreibe die Methode. 

00:03:03.880 --> 00:03:06.830
Zuvor muss
 diese Klasse jedoch


00:03:06.830 --> 00:03:11.000
Web-Sicherheitskonfiguration-Adopter
 erweitern. 

00:03:11.000 --> 00:03:15.360
Dies alles wird bereits im
 Sicherheitskapitel behandelt. 

00:03:16.000 --> 00:03:23.220
Sicherheit konfigurierter Adopter. 

00:03:23.530 --> 00:03:26.825
Lassen Sie uns die Methode überschreiben. 

00:03:26.825 --> 00:03:31.340
Geschützt breit konfigurieren. 

00:03:31.340 --> 00:03:34.850
Und wir gingen
 in einem Argument voran

00:03:34.850 --> 00:03:40.320
p Sicherheit


00:03:42.700 --> 00:03:47.700
wirft Ausnahme. 

00:03:47.860 --> 00:03:50.780
Und hier drinnen werde
 ich
 dieses Objekt verwenden

00:03:50.780 --> 00:03:54.815
, um unsere Sicherheit zu
 konfigurieren. 

00:03:54.815 --> 00:04:03.300
Ich werde sagen, dass autorisierte
 Anfragen wichtig sind. 

00:04:04.240 --> 00:04:09.350
Wann soll reg ex zur Verfügung gestellt werden. 

00:04:09.350 --> 00:04:12.995
Ich möchte
 buchstäblich alle URLs zulassen. 

00:04:12.995 --> 00:04:15.900
Ich sage „Erlaubnis“. 

00:04:17.290 --> 00:04:20.945
Diese Erklärung ermöglicht es
 jedem,
 ohne Einschränkungen
 oder ohne Benutzernamen und Passwort eingeben
 zu müssen, auf alles zugreifen

00:04:20.945 --> 00:04:22.710
ohne Einschränkungen
 oder ohne Benutzernamen und Passwort eingeben
 zu müssen

00:04:22.710 --> 00:04:24.709
. 

00:04:24.709 --> 00:04:26.060
Wenn Sie dies nicht tun,

00:04:26.060 --> 00:04:28.100
Sie jedes Mal, wenn Sie die Anfrage
 senden,


00:04:28.100 --> 00:04:30.575
aufgefordert,
 den Benutzernamen und das Passwort einzugeben,


00:04:30.575 --> 00:04:32.495
was möglicherweise ärgerlich sein kann. 

00:04:32.495 --> 00:04:37.040
Eine weitere Sache, die wir tun
 müssen, ist die Deaktivierung von CSRF. 

00:04:37.040 --> 00:04:39.450
Es ist standardmäßig aktiviert. 

00:04:40.000 --> 00:04:43.745
Wir haben in unseren vorherigen Kursen bereits über CSRF- und

 Cross-Site-Forgery-Angriffe
 gesprochen

00:04:43.745 --> 00:04:46.205
Cross-Site-Forgery-Angriffe


00:04:46.205 --> 00:04:48.815
. 

00:04:48.815 --> 00:04:52.260
Deaktivieren wir es vorerst. 

00:04:52.840 --> 00:04:55.790
Das ist alles, was es dazu gibt. 

00:04:55.790 --> 00:04:59.315
Wir haben jetzt alle
 Feder-Sicherheitsfunktionen eingerichtet. 

00:04:59.315 --> 00:05:01.490
Das nächste, was wir tun
 müssen, ist die Verschlüsselung
 und Entschlüsselung zu


00:05:01.490 --> 00:05:03.755
aktivieren. 

00:05:03.755 --> 00:05:05.090
Und genau das werden
 wir uns

00:05:05.090 --> 00:05:07.500
in unserem nächsten Video ansehen.
 
