WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.340 --> 00:00:05.115
Let's talk about
Spring Cloud bus.

00:00:05.115 --> 00:00:06.810
At this point in time,

00:00:06.810 --> 00:00:09.315
we have an application
with product microservice,

00:00:09.315 --> 00:00:12.510
which is displaying the
information about a product.

00:00:12.510 --> 00:00:14.835
Then we have the
conflict server,

00:00:14.835 --> 00:00:16.080
which is acting like

00:00:16.080 --> 00:00:18.495
a centralized
configuration server

00:00:18.495 --> 00:00:20.400
to so configuration details to

00:00:20.400 --> 00:00:22.710
all the microservices and

00:00:22.710 --> 00:00:24.150
our conformations
are essentially

00:00:24.150 --> 00:00:26.235
deciding and GitHub repository,

00:00:26.235 --> 00:00:28.350
that's from where
the conflict server

00:00:28.350 --> 00:00:31.500
would fetch the configurations.

00:00:31.500 --> 00:00:32.970
Now, I'm not mentioning

00:00:32.970 --> 00:00:34.440
all the other microservices

00:00:34.440 --> 00:00:35.970
which are part of
our application.

00:00:35.970 --> 00:00:37.950
For example, we have pricing,

00:00:37.950 --> 00:00:40.869
service inventory,
service gateway, etc.

00:00:40.869 --> 00:00:43.310
I'm not mentioning
them in this diagram.

00:00:43.310 --> 00:00:45.110
Just to keep things relevant and

00:00:45.110 --> 00:00:47.690
symbol to the topic
that we're discussing,

00:00:47.690 --> 00:00:50.240
which is about Cloud bus.

00:00:50.240 --> 00:00:53.090
Now imagine the scenario
that we have done

00:00:53.090 --> 00:00:57.170
some updation on
the configurations.

00:00:57.170 --> 00:01:01.505
Maybe we have updated a
particular property, let's say.

00:01:01.505 --> 00:01:04.190
Now in order for those
configurations to get

00:01:04.190 --> 00:01:06.890
reflected on our microservices,

00:01:06.890 --> 00:01:08.780
we have to restart them,

00:01:08.780 --> 00:01:10.460
which is okay in case if you are

00:01:10.460 --> 00:01:12.424
running the
micro-services locally,

00:01:12.424 --> 00:01:15.185
where you might be having
one or two instances.

00:01:15.185 --> 00:01:18.740
But in real-world scenario
would be having hundreds or

00:01:18.740 --> 00:01:21.230
even thousands of
Microsoft's instances

00:01:21.230 --> 00:01:23.225
running in Cloud and ROM men,

00:01:23.225 --> 00:01:27.200
in which case it's highly
impractical to actually restart

00:01:27.200 --> 00:01:28.595
each and everyone stands

00:01:28.595 --> 00:01:31.925
and interrupt the
flow of application.

00:01:31.925 --> 00:01:35.360
One solution to
this problem is to

00:01:35.360 --> 00:01:38.000
have actuator setup
in each one of

00:01:38.000 --> 00:01:40.430
those instances and call

00:01:40.430 --> 00:01:44.075
the refresh endpoint
of each instance,

00:01:44.075 --> 00:01:46.970
which will reload the
application configuration

00:01:46.970 --> 00:01:49.760
and will allow dynamic
configuration changes.

00:01:49.760 --> 00:01:51.260
With this, we don't have to

00:01:51.260 --> 00:01:53.105
restart each and every instance.

00:01:53.105 --> 00:01:55.205
We can just hit this endpoint.

00:01:55.205 --> 00:01:58.070
And the instance
configuration would be

00:01:58.070 --> 00:02:01.580
refreshed and it would get
the latest configuration.

00:02:01.580 --> 00:02:03.380
But the problem is,

00:02:03.380 --> 00:02:04.610
it would have to do it for each

00:02:04.610 --> 00:02:06.305
and every instance out there.

00:02:06.305 --> 00:02:08.300
Imagine there are a
hundreds or thousands

00:02:08.300 --> 00:02:09.905
of instances running.

00:02:09.905 --> 00:02:12.680
It's not practical that you call

00:02:12.680 --> 00:02:16.160
the refresh endpoint of
each and every instance.

00:02:16.160 --> 00:02:18.230
Well, you could
write a script or

00:02:18.230 --> 00:02:20.720
something that will do the job.

00:02:20.720 --> 00:02:23.660
But it's a tedious
job because by

00:02:23.660 --> 00:02:24.830
the end of the day
you have to keep

00:02:24.830 --> 00:02:26.660
track of all the instances,

00:02:26.660 --> 00:02:30.890
know that URIs and then
call the refresh endpoint.

00:02:30.890 --> 00:02:33.170
It's very impractical.

00:02:33.170 --> 00:02:35.779
The solution to this problem,

00:02:35.779 --> 00:02:37.100
as you would guess,

00:02:37.100 --> 00:02:39.800
is the Cloud bus.

00:02:39.800 --> 00:02:41.750
Cloudbursts links dynodes of

00:02:41.750 --> 00:02:45.410
distributed system with a
lightweight message broker.

00:02:45.410 --> 00:02:47.540
In our case, we're going to have

00:02:47.540 --> 00:02:50.120
RabbitMQ as a message broker.

00:02:50.120 --> 00:02:52.445
If you don't know what
is the message broker,

00:02:52.445 --> 00:02:54.995
then it's a topic on its own.

00:02:54.995 --> 00:02:57.350
But think of it as a middleman

00:02:57.350 --> 00:02:59.960
between the producer
and the consumer.

00:02:59.960 --> 00:03:02.450
Or the producer is
a conflict server,

00:03:02.450 --> 00:03:04.400
which will produce an event.

00:03:04.400 --> 00:03:06.890
The moment there is some
configuration change.

00:03:06.890 --> 00:03:08.690
The consumers or the list of

00:03:08.690 --> 00:03:11.630
microservices in stances
which wants to listen

00:03:11.630 --> 00:03:13.550
to that event and

00:03:13.550 --> 00:03:16.535
update themselves with
the latest configuration.

00:03:16.535 --> 00:03:19.325
The cloudbursts essentially
sits in-between

00:03:19.325 --> 00:03:23.045
the message broker
and the consumers.

00:03:23.045 --> 00:03:26.180
It will sort of take
the job of updating or

00:03:26.180 --> 00:03:27.785
refreshing configurations

00:03:27.785 --> 00:03:30.455
of all the microservices
and stances.

00:03:30.455 --> 00:03:33.755
First and foremost, would be
needing a message broker.

00:03:33.755 --> 00:03:35.000
And like I mentioned before,

00:03:35.000 --> 00:03:38.809
we are going to be using
RabbitMQ for this purpose.

00:03:38.809 --> 00:03:40.610
Now if you're running
the application

00:03:40.610 --> 00:03:42.140
on the Cloud Enrollment,

00:03:42.140 --> 00:03:43.550
you could easily spin off

00:03:43.550 --> 00:03:46.880
a Docker image
creating the RabbitMQ.

00:03:46.880 --> 00:03:49.354
But since we are running
the application locally,

00:03:49.354 --> 00:03:52.700
we have to manually
install RabbitMQ.

00:03:52.700 --> 00:03:54.575
And once we do that,

00:03:54.575 --> 00:03:57.695
we have to add all the
relevant dependencies

00:03:57.695 --> 00:04:00.620
which would act with
the Spring Cloud bus,

00:04:00.620 --> 00:04:04.445
which will also enable
the bus refresh endpoint.

00:04:04.445 --> 00:04:07.010
Which one hit would essentially

00:04:07.010 --> 00:04:10.280
refresh the context
of all the instances.

00:04:10.280 --> 00:04:12.305
We'll take a look
at it in a moment.

00:04:12.305 --> 00:04:15.050
And thanks to spring
auto configuration,

00:04:15.050 --> 00:04:17.480
it will do much of the
heavy lifting for us

00:04:17.480 --> 00:04:21.664
and we can get rid off
any manual intervention.

00:04:21.664 --> 00:04:23.390
Next, we're going
to make sure that

00:04:23.390 --> 00:04:26.075
the beans refresh scoped,

00:04:26.075 --> 00:04:27.710
which will allow the beans to be

00:04:27.710 --> 00:04:30.410
Refresh dynamically at runtime.

00:04:30.410 --> 00:04:32.930
And finally, we'll
update our add

00:04:32.930 --> 00:04:37.175
new properties that might
be required in the process.

00:04:37.175 --> 00:04:39.020
It's easier said than done.

00:04:39.020 --> 00:04:42.860
So let's get into practice
and see how we can do that.

00:04:42.860 --> 00:04:45.420
See you in next one.
