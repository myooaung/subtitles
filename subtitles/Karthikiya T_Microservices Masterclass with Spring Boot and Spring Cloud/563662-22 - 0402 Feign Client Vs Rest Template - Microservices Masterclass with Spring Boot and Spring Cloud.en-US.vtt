WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.290 --> 00:00:03.435
Right now we have
three microservices,

00:00:03.435 --> 00:00:04.950
product service pricing service,

00:00:04.950 --> 00:00:07.335
as well as the
inventory service.

00:00:07.335 --> 00:00:09.150
Sending because from
product service

00:00:09.150 --> 00:00:10.380
to pricing service in

00:00:10.380 --> 00:00:13.470
order to retrieve the price
of a specific product.

00:00:13.470 --> 00:00:14.970
And similarly, we
are also sending

00:00:14.970 --> 00:00:16.980
requested meant to service to

00:00:16.980 --> 00:00:19.500
retrieve the stock
availability information

00:00:19.500 --> 00:00:21.090
of specific product.

00:00:21.090 --> 00:00:23.115
Doing that using rest template

00:00:23.115 --> 00:00:25.860
from inside the
product controller.

00:00:25.860 --> 00:00:29.685
And then finally consolidating
all the results,

00:00:29.685 --> 00:00:32.550
sending back the
response to the client.

00:00:32.550 --> 00:00:37.540
That's how we get this result.

00:00:37.540 --> 00:00:40.715
Price from price and service,

00:00:40.715 --> 00:00:44.540
stock availability from
the inventory service.

00:00:44.540 --> 00:00:46.460
What I'd like to do now

00:00:46.460 --> 00:00:48.695
is instead of using
desk template,

00:00:48.695 --> 00:00:51.485
how would want to use fig plant,

00:00:51.485 --> 00:00:53.585
which was originally
from Netflix.

00:00:53.585 --> 00:00:56.840
But then they stopped
supporting that project.

00:00:56.840 --> 00:00:58.460
And so it is now an open source.

00:00:58.460 --> 00:01:01.070
It's now called open fig.

00:01:01.070 --> 00:01:03.110
If you're wondering why,

00:01:03.110 --> 00:01:06.605
then rest temperate actually
comes with one drawback

00:01:06.605 --> 00:01:08.540
is that if you really
take a look at

00:01:08.540 --> 00:01:10.670
this code as a developer,

00:01:10.670 --> 00:01:13.985
you're not only focused on
writing the business logic,

00:01:13.985 --> 00:01:15.230
but you also need to have

00:01:15.230 --> 00:01:17.240
knowledge on how to
use this template.

00:01:17.240 --> 00:01:20.135
In order to send requests
to a particular service.

00:01:20.135 --> 00:01:22.160
You have to enter
the IP address path,

00:01:22.160 --> 00:01:25.084
etc, in order to
send the request.

00:01:25.084 --> 00:01:26.780
So as a developer,
you're not only

00:01:26.780 --> 00:01:28.865
focused on writing
the business logic,

00:01:28.865 --> 00:01:31.280
but then you also have to
worry about how to send

00:01:31.280 --> 00:01:33.680
requests to a
particular service.

00:01:33.680 --> 00:01:35.540
Well, we can get
rid of this problem

00:01:35.540 --> 00:01:37.550
if you're using Fee client.

00:01:37.550 --> 00:01:39.184
If you're still confused,

00:01:39.184 --> 00:01:40.730
just hold on for a bit.

00:01:40.730 --> 00:01:42.950
Once I demonstrate everything,

00:01:42.950 --> 00:01:46.385
you might understand what
exactly I'm talking about.

00:01:46.385 --> 00:01:48.500
First things first,
we need to have

00:01:48.500 --> 00:01:50.910
all the required libraries.

00:01:51.910 --> 00:01:54.575
First of all, let
me just include

00:01:54.575 --> 00:01:57.215
the open fig dependency

00:01:57.215 --> 00:02:00.780
as part of the
build-up Gradle file.

00:02:06.940 --> 00:02:12.005
We also need Spring
Cloud dependencies.

00:02:12.005 --> 00:02:14.465
Until this point in this course,

00:02:14.465 --> 00:02:17.885
we never needed anything
from Spring Cloud.

00:02:17.885 --> 00:02:22.130
This is the first time
we're introducing it better

00:02:22.130 --> 00:02:26.390
that you included as part of
the dependency management.

00:02:26.390 --> 00:02:28.865
This is useful Justin
gets if you have

00:02:28.865 --> 00:02:32.970
multiple child projects and
they want to inherit this.

00:02:34.840 --> 00:02:44.940
Let's also add the wash for
Spring Cloud dependencies.

00:02:47.440 --> 00:02:49.550
This is the version will be

00:02:49.550 --> 00:02:53.480
using for Spring
Cloud dependencies.

00:02:53.480 --> 00:02:55.445
Let me say at the file,

00:02:55.445 --> 00:03:00.540
Let's quickly do the
refresh of this project.

00:03:05.350 --> 00:03:08.870
The next thing that
I'm going to do is to

00:03:08.870 --> 00:03:12.660
actually create an interface.

00:03:14.920 --> 00:03:22.055
I'm going to call
it as price client,

00:03:22.055 --> 00:03:23.330
which we're going to use to send

00:03:23.330 --> 00:03:26.610
requests to pricing service.

00:03:27.070 --> 00:03:30.269
I'd hit Finish.

00:03:31.120 --> 00:03:34.760
We're going to make
this as a fee client by

00:03:34.760 --> 00:03:40.115
using the annotation client,

00:03:40.115 --> 00:03:42.800
it's going to accept
couple of attributes.

00:03:42.800 --> 00:03:47.045
The first parameter
is the value.

00:03:47.045 --> 00:03:49.250
This is essentially the
name that we would like to

00:03:49.250 --> 00:03:52.415
go to this client.

00:03:52.415 --> 00:03:57.425
Price plant is what I
would like to call it.

00:03:57.425 --> 00:04:04.010
Then this is the base you
are loved that service.

00:04:04.010 --> 00:04:08.430
I'm going to copy it from
the product controller.

00:04:09.280 --> 00:04:19.380
It has to be this.
Save the file.

00:04:22.960 --> 00:04:26.840
And inside here, I'm
actually going to copy

00:04:26.840 --> 00:04:32.280
the method signature from
the price controlled itself.

00:04:32.500 --> 00:04:34.640
I'm simply going to copy

00:04:34.640 --> 00:04:39.980
this method and
paste it in here.

00:04:39.980 --> 00:04:45.740
Except that we're not going
to have any implementation.

00:04:45.740 --> 00:04:49.650
But just as in nature,
save the file.

00:04:53.470 --> 00:04:56.140
Now, we're just simply going

00:04:56.140 --> 00:04:58.690
to dependence inject this inside

00:04:58.690 --> 00:05:01.360
our product controller and

00:05:01.360 --> 00:05:01.780
use

00:05:01.780 --> 00:05:11.844
it price client.

00:05:11.844 --> 00:05:15.460
And we're going to use the
sanitation to auto added.

00:05:15.460 --> 00:05:20.620
One additional thing which
we also need to do is to

00:05:20.620 --> 00:05:30.520
enable, enable fig plant.

00:05:30.520 --> 00:05:35.890
This is what would actually
scan for all the interfaces.

00:05:35.890 --> 00:05:38.095
Which are added with

00:05:38.095 --> 00:05:43.940
the client and inject
them into our controller.

00:05:44.490 --> 00:05:46.930
We can now use

00:05:46.930 --> 00:05:50.050
the price client instruct
the rest template.

00:05:50.050 --> 00:05:53.215
Now imagine that I'm a
developer of this code.

00:05:53.215 --> 00:05:56.230
I didn't have to worry
about entering the URL.

00:05:56.230 --> 00:05:59.395
I don't even have to know how
to use the rest template.

00:05:59.395 --> 00:06:05.980
What I can do is say
price blind dot,

00:06:05.980 --> 00:06:08.665
and simply call its method

00:06:08.665 --> 00:06:11.050
bypassing the
required arguments.

00:06:11.050 --> 00:06:12.985
In this case it's product ID.

00:06:12.985 --> 00:06:14.830
And that's all there is to it.

00:06:14.830 --> 00:06:19.345
Everything else would
pretty much remains same.

00:06:19.345 --> 00:06:21.550
We're going to do
the similar stuff

00:06:21.550 --> 00:06:23.620
for inventory service as well.

00:06:23.620 --> 00:06:28.225
But for now, let's
just run our services.

00:06:28.225 --> 00:06:31.310
If everything is working.

00:06:34.350 --> 00:06:38.680
Also would start the
inventory service.

00:06:38.680 --> 00:06:45.620
Then finally, the
product service as well.

00:06:47.760 --> 00:06:50.095
Let's go to Postman.

00:06:50.095 --> 00:06:51.460
We seem to be having an editor.

00:06:51.460 --> 00:06:53.720
Let's take a look at it.

00:06:57.030 --> 00:07:00.670
Pop variable annotation
was empty or pattern.

00:07:00.670 --> 00:07:05.520
Okay. We mess something in here.

00:07:05.830 --> 00:07:09.590
One thing with free client
is that you also need to

00:07:09.590 --> 00:07:12.695
actually specify the argument,

00:07:12.695 --> 00:07:15.179
the product ID,

00:07:22.120 --> 00:07:24.305
the file.

00:07:24.305 --> 00:07:27.350
Let's relaunch our application.

00:07:27.350 --> 00:07:30.180
Product service.

00:07:34.660 --> 00:07:37.920
Let's go to Postman

00:07:37.930 --> 00:07:42.140
and try to send requests
to product service,

00:07:42.140 --> 00:07:44.105
requesting for details off

00:07:44.105 --> 00:07:46.890
a product with either T1 or T2.

00:07:47.740 --> 00:07:51.660
Got an error. Let's
take a look at it.

00:07:54.430 --> 00:08:02.910
Let's go back to Eclipse
and see what they could be.

00:08:14.860 --> 00:08:19.160
The Request going to price
slash price slash 102,

00:08:19.160 --> 00:08:24.935
it's supposed to be
just price slash 102.

00:08:24.935 --> 00:08:29.040
I got the point is supposed
to be the base URL.

00:08:29.530 --> 00:08:31.580
Sorry about that.

00:08:31.580 --> 00:08:35.570
So this is the base
URL and then would

00:08:35.570 --> 00:08:39.830
actually be picked from
here. That's a quick fix.

00:08:39.830 --> 00:08:44.610
So let's go back and
launch our service.

00:08:49.150 --> 00:08:52.320
This time it should walk,

00:08:55.720 --> 00:08:58.820
send the request and we got back

00:08:58.820 --> 00:09:01.820
the response as expected.

00:09:01.820 --> 00:09:04.730
Now I want you to
pause the video and do

00:09:04.730 --> 00:09:08.730
the similar stuff for
inventory as well.

00:09:11.700 --> 00:09:14.080
I hope that you tried.

00:09:14.080 --> 00:09:17.560
Let's also do the same
for inventory as well.

00:09:17.560 --> 00:09:19.660
I'm going to create
a new interface,

00:09:19.660 --> 00:09:26.994
call it inventory outlined.

00:09:26.994 --> 00:09:34.509
This is also going
to be 50k plant.

00:09:34.509 --> 00:09:39.085
Specify value.

00:09:39.085 --> 00:09:46.760
Going to be inventory
hyphen client.

00:09:46.800 --> 00:09:53.020
Then you is going to be,

00:09:53.020 --> 00:09:55.765
let me just copy it from here.

00:09:55.765 --> 00:09:59.299
This time I won't do
the same mistake.

00:10:00.600 --> 00:10:04.120
The base you are love
and ventral surface.

00:10:04.120 --> 00:10:08.180
And let's go to the
inventory controller.

00:10:11.370 --> 00:10:17.810
Copy this method
signature as it is.

00:10:21.120 --> 00:10:24.535
Let's have it in here.

00:10:24.535 --> 00:10:25.930
Save

00:10:25.930 --> 00:10:27.380
the file

00:10:39.660 --> 00:10:42.680
product ID.

00:10:42.780 --> 00:10:46.450
Now we'll just simply
go into dependency,

00:10:46.450 --> 00:10:50.660
inject this inside the
product controller.

00:11:06.960 --> 00:11:11.590
We can now simply just say

00:11:11.590 --> 00:11:14.995
inventory client get
inventory details

00:11:14.995 --> 00:11:18.290
of a specific product by its ID.

00:11:18.290 --> 00:11:20.540
The file. We can

00:11:20.540 --> 00:11:23.820
now get rid off rest
template altogether.

00:11:26.440 --> 00:11:36.170
Let's relaunch our
application products.

00:11:36.170 --> 00:11:42.995
So go back to Postman,

00:11:42.995 --> 00:11:47.550
send a request and
it has worked well.

00:11:49.990 --> 00:11:53.150
To summarize, Fee client is

00:11:53.150 --> 00:11:54.785
definitely a better alternative

00:11:54.785 --> 00:11:57.210
compared to rest template.
