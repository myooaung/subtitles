WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.800
So far we were trying to use

00:00:01.800 --> 00:00:04.470
rest template to
make the API calls.

00:00:04.470 --> 00:00:08.220
However, rest template would
lead to blocking operations,

00:00:08.220 --> 00:00:09.990
meaning that the thread
would have to wait

00:00:09.990 --> 00:00:12.090
until we get back the response.

00:00:12.090 --> 00:00:13.620
And sooner or later,

00:00:13.620 --> 00:00:16.410
we might run into a problem
where we may not be having

00:00:16.410 --> 00:00:19.545
enough threads to deal with
the incoming requests.

00:00:19.545 --> 00:00:21.120
A better approach, however,

00:00:21.120 --> 00:00:23.070
is to use the web client,

00:00:23.070 --> 00:00:25.900
which is from the Spring
Web Flux project.

00:00:25.900 --> 00:00:27.980
Now, I assume that
you have watched

00:00:27.980 --> 00:00:30.470
my chapter on
Reactive Programming,

00:00:30.470 --> 00:00:32.795
and I'm also assuming
that you know how to use

00:00:32.795 --> 00:00:36.139
flux mono, web client, etc.

00:00:36.139 --> 00:00:38.555
If you didn't watch
that chapter,

00:00:38.555 --> 00:00:42.530
please do that before
proceeding with this video.

00:00:42.530 --> 00:00:45.665
Now let's just go
ahead and replace

00:00:45.665 --> 00:00:47.330
all these rest template with

00:00:47.330 --> 00:00:51.499
the web client to enable
react to programming.

00:00:51.499 --> 00:00:53.060
First things first, we need to

00:00:53.060 --> 00:00:55.865
have the required dependencies.

00:00:55.865 --> 00:00:57.320
And in this case we need

00:00:57.320 --> 00:01:01.670
Spring Boot starter
web flux dependency.

00:01:01.670 --> 00:01:06.005
Let's get inside,
build-up Gradle file,

00:01:06.005 --> 00:01:09.140
add the dependency, and let's

00:01:09.140 --> 00:01:13.230
quickly do the Gradle
refresh of the project.

00:01:22.660 --> 00:01:25.890
Let's save the file.

00:01:29.500 --> 00:01:38.240
Refresh. Let's initialize the

00:01:38.240 --> 00:01:41.780
web client multiple ways to
create a web client object.

00:01:41.780 --> 00:01:43.700
But I'm just going to

00:01:43.700 --> 00:01:47.130
choose the simplest of
the simplest approach.

00:01:47.440 --> 00:01:50.700
Public web client.

00:01:50.700 --> 00:01:56.020
Web client equals
Client dot create.

00:01:56.020 --> 00:02:00.340
This would create an
instance of a web client,

00:02:00.340 --> 00:02:03.980
which we can then
use inside our code.

00:02:05.010 --> 00:02:09.535
Now, ideally, if we had a react
to database like MongoDB,

00:02:09.535 --> 00:02:13.060
we could have been getting
a mono object here.

00:02:13.060 --> 00:02:15.219
But since we don't
have a database

00:02:15.219 --> 00:02:17.680
that has just use the method

00:02:17.680 --> 00:02:23.710
mono dot just to
produce an item.

00:02:23.710 --> 00:02:27.535
In this case it's
product info object.

00:02:27.535 --> 00:02:33.345
Of course we need to
make this mono as well.

00:02:33.345 --> 00:02:36.860
We're going to bring in
similar changes here as well.

00:02:36.860 --> 00:02:38.330
In straw of rest template,

00:02:38.330 --> 00:02:40.925
we're going to be
using web client,

00:02:40.925 --> 00:02:45.260
map, Client dot get.

00:02:45.260 --> 00:02:50.990
Because I wanted to
send get request URI.

00:02:50.990 --> 00:02:58.760
You would specify the URI
should be local host.

00:02:58.760 --> 00:03:06.125
Port number is 800 to four
pricing service slash price.

00:03:06.125 --> 00:03:10.530
And then we're going to
pass in the product ID.

00:03:10.720 --> 00:03:13.890
Let me copy this,

00:03:18.510 --> 00:03:22.720
retrieve, which would actually

00:03:22.720 --> 00:03:25.915
send the request and
retrieve the results.

00:03:25.915 --> 00:03:28.780
We want to convert
the response to mono,

00:03:28.780 --> 00:03:32.270
object, body to mono.

00:03:34.320 --> 00:03:38.830
This is going to
accept one meter.

00:03:38.830 --> 00:03:44.240
In this case, this is going
to be off type price.

00:03:47.940 --> 00:03:53.260
Let's change mono.

00:03:53.260 --> 00:03:55.900
We're going to have
similar instruction

00:03:55.900 --> 00:03:58.940
in case of inventory as well.

00:04:00.060 --> 00:04:04.910
Price is going to be inventory.

00:04:07.440 --> 00:04:10.850
Going to be inventory.

00:04:11.580 --> 00:04:14.920
I believe this supposed to
be two and the supposed to

00:04:14.920 --> 00:04:18.775
be three. Chronic tidy.

00:04:18.775 --> 00:04:22.490
Supposed to be
inventory as well.

00:04:22.800 --> 00:04:26.570
Let's get it off the statement.

00:04:29.100 --> 00:04:30.745
Now.

00:04:30.745 --> 00:04:33.445
The next step is to combine

00:04:33.445 --> 00:04:37.360
all these results and
create a mono object,

00:04:37.360 --> 00:04:40.200
which is going to
be of type product.

00:04:40.200 --> 00:04:42.530
And right now, right now

00:04:42.530 --> 00:04:44.705
this method is returning
product object.

00:04:44.705 --> 00:04:48.570
This however, supposed
to be a mono object.

00:04:52.870 --> 00:04:59.729
Obviously this instruction
is no longer relevant.

00:04:59.890 --> 00:05:05.285
Went to use a method
inside mono that says zip.

00:05:05.285 --> 00:05:07.985
Now there are multiple
variants of this method,

00:05:07.985 --> 00:05:11.420
depending on number of mono
objects you want to combine.

00:05:11.420 --> 00:05:14.735
Basically, the zip
method would sort of

00:05:14.735 --> 00:05:18.785
combine all the mono
goes into a single mono.

00:05:18.785 --> 00:05:20.420
Basically, zip method would just

00:05:20.420 --> 00:05:22.830
merge all those given mono.

00:05:22.830 --> 00:05:25.315
Into a single mono.

00:05:25.315 --> 00:05:27.235
And we're going to have

00:05:27.235 --> 00:05:29.380
a method difference or
the Lambda expression,

00:05:29.380 --> 00:05:32.170
which will get executed
once we have items

00:05:32.170 --> 00:05:35.485
generated from all
those mentioned Bono's,

00:05:35.485 --> 00:05:37.255
let me show you what I mean.

00:05:37.255 --> 00:05:38.335
Zip.

00:05:38.335 --> 00:05:41.365
In our case, we need to
combine three models.

00:05:41.365 --> 00:05:45.200
So I'm going to use the
method with three parameters.

00:05:45.690 --> 00:05:48.610
It's going to be this.

00:05:48.610 --> 00:05:52.970
P1 is going to be product info,

00:05:54.060 --> 00:05:58.610
is going to be the price mono,

00:05:58.890 --> 00:06:05.630
and P3 is going to be inventory.

00:06:10.230 --> 00:06:13.880
I'm going to call
the method map.

00:06:14.310 --> 00:06:18.400
Here I could add the
Pass Method difference

00:06:18.400 --> 00:06:20.035
or the Lambda expression.

00:06:20.035 --> 00:06:22.180
I'd like to start off by sending

00:06:22.180 --> 00:06:25.375
a method difference because
speaking from my experience,

00:06:25.375 --> 00:06:27.895
whenever I introduce
a lambda expression,

00:06:27.895 --> 00:06:30.820
the next person who looks
at my code would come to

00:06:30.820 --> 00:06:34.240
me and asked me what's
happening in here.

00:06:34.240 --> 00:06:36.760
That has something
to do with lack of

00:06:36.760 --> 00:06:39.670
knowledge on Reactive
Programming,

00:06:39.670 --> 00:06:43.105
stream API, lambda
expressions, etc.

00:06:43.105 --> 00:06:45.250
But let me first start

00:06:45.250 --> 00:06:47.410
off by giving him
at the difference

00:06:47.410 --> 00:06:48.710
because I'm speaking from

00:06:48.710 --> 00:06:52.055
my experience whenever I
introduce a lambda expression,

00:06:52.055 --> 00:06:54.605
the next developer
who looks at my code,

00:06:54.605 --> 00:06:57.170
comes to me and asked me
what's happening in here.

00:06:57.170 --> 00:07:00.230
To make it look more
straightforward outflows

00:07:00.230 --> 00:07:01.985
to use a method difference.

00:07:01.985 --> 00:07:04.250
And then we'll see how
we can convert that into

00:07:04.250 --> 00:07:08.120
a lambda expression map.

00:07:08.120 --> 00:07:15.485
I'm going to say this
some method name product,

00:07:15.485 --> 00:07:19.580
or rather let's call
it built product.

00:07:19.580 --> 00:07:22.715
Obviously we don't
have this method.

00:07:22.715 --> 00:07:32.660
Let's introduce that public
product and build product.

00:07:32.660 --> 00:07:34.954
Now what is the
type of argument?

00:07:34.954 --> 00:07:41.015
This method is going
to allow tuple three.

00:07:41.015 --> 00:07:44.600
The reason we're
using tuple three is

00:07:44.600 --> 00:07:47.990
because we have three
parameters in here.

00:07:47.990 --> 00:07:51.949
If we had two monos which
needs to be combined together,

00:07:51.949 --> 00:07:54.125
this would have been tuple two.

00:07:54.125 --> 00:07:57.305
So there are multiple
variants of tuples.

00:07:57.305 --> 00:08:00.665
And depending on your
requirement, you need to use one.

00:08:00.665 --> 00:08:05.105
This has eugenic parameters.

00:08:05.105 --> 00:08:09.260
Those would correspond
to these three.

00:08:09.260 --> 00:08:15.925
So that's product info,
price, and inventory.

00:08:15.925 --> 00:08:18.130
This Jupyter right here would

00:08:18.130 --> 00:08:20.530
have the results of all
these three monitors.

00:08:20.530 --> 00:08:23.470
The only thing that is
left to do is to extract

00:08:23.470 --> 00:08:27.355
that information and
build our product object.

00:08:27.355 --> 00:08:32.650
Return new product instance.

00:08:32.650 --> 00:08:35.305
And let's populate
all the fields.

00:08:35.305 --> 00:08:37.600
I'll do Control Shift O.

00:08:37.600 --> 00:08:41.150
To import this class.

00:08:44.100 --> 00:08:51.400
Inside here, we would
say tuple dot, get T1.

00:08:51.400 --> 00:08:55.190
That corresponds to the
product info object.

00:08:55.540 --> 00:08:59.810
Get Product ID. Then again,

00:08:59.810 --> 00:09:07.265
to get T1, get product name.

00:09:07.265 --> 00:09:10.100
Similarly, we're also going

00:09:10.100 --> 00:09:14.520
to retrieve product description.

00:09:16.870 --> 00:09:19.100
Then for the next object,

00:09:19.100 --> 00:09:21.455
which is the price,

00:09:21.455 --> 00:09:23.945
we're going to say double-dot T,

00:09:23.945 --> 00:09:29.300
two dot get discounted price.

00:09:29.300 --> 00:09:32.870
Finally, triple dot t3,

00:09:32.870 --> 00:09:42.340
which corresponds to inventory
object dot get in-stock.

00:09:42.340 --> 00:09:45.830
That's pretty much
there is to it.

00:09:46.740 --> 00:09:49.880
Let's double-check.

00:09:50.250 --> 00:09:52.929
Now let's test our application.

00:09:52.929 --> 00:09:55.930
But before that, let's also make

00:09:55.930 --> 00:10:00.550
necessary changes inside
the pricing service.

00:10:00.550 --> 00:10:04.090
This class right here
needs to be replaced.

00:10:04.090 --> 00:10:06.070
It's a copy paste mistake.

00:10:06.070 --> 00:10:09.800
Let's change this
to rise controller.

00:10:09.870 --> 00:10:13.190
Same with inventory.

00:10:15.810 --> 00:10:20.480
Let's call it as
inventory controller.

00:10:22.170 --> 00:10:26.960
Let's also introduce
the dependency.

00:10:31.110 --> 00:10:37.280
The file. Refresh the project.

00:10:37.530 --> 00:10:41.630
Same goes here as well.

00:10:53.130 --> 00:10:58.640
Let's also open the
inventory controller.

00:10:58.740 --> 00:11:02.935
Here we're trying to
return inventory object.

00:11:02.935 --> 00:11:06.730
We now need to change
this to a Mono.

00:11:06.730 --> 00:11:10.220
Mono often inventory.

00:11:12.180 --> 00:11:15.805
Since we don't have
a react to database,

00:11:15.805 --> 00:11:19.840
Let's explicitly
produce an item.

00:11:19.840 --> 00:11:27.260
Node.js. Get inventory in full.

00:11:32.280 --> 00:11:36.370
Same changes needs to
go in here as well.

00:11:36.370 --> 00:11:38.710
This is going to be off pipe

00:11:38.710 --> 00:11:49.410
Mono of price Node.js.

00:11:51.700 --> 00:12:00.290
Quickly. This would
send the mono object.

00:12:00.290 --> 00:12:02.510
It's not recommended
that you have

00:12:02.510 --> 00:12:03.650
partial implementation of

00:12:03.650 --> 00:12:06.080
Reactive Programming
in your project.

00:12:06.080 --> 00:12:08.570
If you're moving towards
react to programming,

00:12:08.570 --> 00:12:10.835
try your level best to convert

00:12:10.835 --> 00:12:12.380
as many microservices as

00:12:12.380 --> 00:12:15.214
possible to use
reactive programming.

00:12:15.214 --> 00:12:16.910
Otherwise, you might actually

00:12:16.910 --> 00:12:18.200
end up destroying the purpose

00:12:18.200 --> 00:12:21.155
of the benefits you get
with reactive programming.

00:12:21.155 --> 00:12:22.430
If you're wondering how,

00:12:22.430 --> 00:12:24.455
then you need to wait
until the next lecture.

00:12:24.455 --> 00:12:25.700
Where we talked about some of

00:12:25.700 --> 00:12:27.590
the pros and cons off moving

00:12:27.590 --> 00:12:28.910
towards reactive programming in

00:12:28.910 --> 00:12:30.725
the context of micro-services.

00:12:30.725 --> 00:12:35.765
But for now, let's
launch our services,

00:12:35.765 --> 00:12:42.990
pricing service, inventory
service, and product service.

00:12:49.030 --> 00:12:54.720
Let's go to Postman
and send the request.

00:12:54.820 --> 00:12:59.760
We got the response back
without any problem.

00:13:05.530 --> 00:13:08.450
Now, let us see if

00:13:08.450 --> 00:13:12.920
Reactive Programming has
indeed taken effect.

00:13:12.920 --> 00:13:14.990
To do that, I'm just
simply going to introduce

00:13:14.990 --> 00:13:17.645
a sys out statement here.

00:13:17.645 --> 00:13:19.010
I'm just simply going to print

00:13:19.010 --> 00:13:24.060
some random text,
doesn't matter.

00:13:26.830 --> 00:13:31.080
Let's recompile the project.

00:13:31.300 --> 00:13:35.280
Inside the pricing controller.

00:13:36.490 --> 00:13:38.870
Let's assume that
this is going to take

00:13:38.870 --> 00:13:41.570
about ten seconds to process.

00:13:41.570 --> 00:13:43.040
In order to simulate that,

00:13:43.040 --> 00:13:46.560
I'm going to say red dot sleep.

00:13:49.620 --> 00:13:51.760
About ten seconds.

00:13:51.760 --> 00:13:55.700
Let's wrap the code with
try-catch block for now.

00:13:57.060 --> 00:14:01.730
Let's also re-launch
the pricing service.

00:14:04.650 --> 00:14:10.129
Now let's keep a watch on
the product service console.

00:14:12.150 --> 00:14:18.289
I go back, I go back to
Postman, send the request.

00:14:18.450 --> 00:14:21.940
Even if it's going to
take about ten seconds,

00:14:21.940 --> 00:14:23.920
we're able to print this.

00:14:23.920 --> 00:14:28.540
Before that. Let me
try to do it again.

00:14:28.540 --> 00:14:32.855
The moment I hit Send button,
you're going to see 12.

00:14:32.855 --> 00:14:35.225
There is no waiting
of ten seconds

00:14:35.225 --> 00:14:37.865
between displaying
these two messages.

00:14:37.865 --> 00:14:41.780
That means thread didn't

00:14:41.780 --> 00:14:45.120
wait until we got
back the response,

00:14:46.210 --> 00:14:50.885
which is what is reactive
programming is all about.

00:14:50.885 --> 00:14:56.885
Now let's also convert this
to a lambda expression.

00:14:56.885 --> 00:15:00.020
Would say tuple, and
you would pass it

00:15:00.020 --> 00:15:06.659
to a method inside an
anonymous inner class.

00:15:07.630 --> 00:15:11.540
Let me just, let me just
copy this entire thing.

00:15:11.540 --> 00:15:13.415
Have it in here.

00:15:13.415 --> 00:15:15.980
We can now get rid
of this function.

00:15:15.980 --> 00:15:18.185
I'll do Control Shift F,

00:15:18.185 --> 00:15:21.185
and let's relaunch
our application

00:15:21.185 --> 00:15:24.660
and see if this is working.

00:15:32.980 --> 00:15:36.450
Let's send the request.

00:15:40.210 --> 00:15:50.850
Unfortunately, it's going to
take ten seconds. It will.
