WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.285
Let's talk about
service discovery.

00:00:03.285 --> 00:00:05.580
That I wanted to send
requests from service

00:00:05.580 --> 00:00:08.355
a to service XYZ.

00:00:08.355 --> 00:00:10.890
Obviously want to use something
like rest template or

00:00:10.890 --> 00:00:15.750
free client or web client in
order to send the request.

00:00:15.750 --> 00:00:18.390
But in order to send you
would obviously need to know

00:00:18.390 --> 00:00:21.690
the location where you
want to send requests to.

00:00:21.690 --> 00:00:24.630
For example, if you are
sending requests from a to

00:00:24.630 --> 00:00:28.590
x using rest template
inside the service a,

00:00:28.590 --> 00:00:31.065
you would type in the
IP address port number,

00:00:31.065 --> 00:00:34.150
and then the path where you
want to send requests to.

00:00:34.150 --> 00:00:37.715
Now, there's a drawback
with this approach.

00:00:37.715 --> 00:00:40.880
Does a drawback in
hardcore in the

00:00:40.880 --> 00:00:44.149
IP addresses in this manner
to send the request.

00:00:44.149 --> 00:00:46.055
Can you try to make a guess,

00:00:46.055 --> 00:00:47.510
pause the video right now,

00:00:47.510 --> 00:00:49.670
and try to make a
guess on what is

00:00:49.670 --> 00:00:51.590
the drawback in hard-coding

00:00:51.590 --> 00:00:54.420
the IP addresses in this manner?

00:00:55.330 --> 00:00:58.145
Well, I hope that you tried.

00:00:58.145 --> 00:00:59.780
Typically,

00:00:59.780 --> 00:01:03.245
microservices tend to be
deployed on Cloud and Romans,

00:01:03.245 --> 00:01:07.535
where IP addresses of these
instances may not be static.

00:01:07.535 --> 00:01:09.605
They're allocated dynamically.

00:01:09.605 --> 00:01:11.300
If suppose x is holding,

00:01:11.300 --> 00:01:12.710
so entire IP address,

00:01:12.710 --> 00:01:14.450
it doesn't mean it would hold

00:01:14.450 --> 00:01:16.445
the same IP address
in just a while.

00:01:16.445 --> 00:01:19.025
That can happen due to
a variety of reasons.

00:01:19.025 --> 00:01:22.730
It could be the case that X
might have gone down due to

00:01:22.730 --> 00:01:25.010
some failure and
some other instance

00:01:25.010 --> 00:01:27.155
might have come
up to replace it.

00:01:27.155 --> 00:01:30.125
In which case the IP
address might change.

00:01:30.125 --> 00:01:32.690
Or it could be the case
that, for example,

00:01:32.690 --> 00:01:33.710
if you are talking about

00:01:33.710 --> 00:01:37.025
Amazon EC2 or Elastic
Compute Cloud,

00:01:37.025 --> 00:01:38.480
the number of instances would

00:01:38.480 --> 00:01:40.460
increase depending on the load.

00:01:40.460 --> 00:01:42.950
Obviously, IP addresses would

00:01:42.950 --> 00:01:45.425
be located dynamically
for all those instances,

00:01:45.425 --> 00:01:49.205
it's really hard to keep
track on those IP addresses.

00:01:49.205 --> 00:01:51.110
And if you're
hardcoding IP addresses

00:01:51.110 --> 00:01:53.300
in this manner, obviously,

00:01:53.300 --> 00:01:55.235
it may work for
one or two times,

00:01:55.235 --> 00:01:57.725
but it wouldn't work later on.

00:01:57.725 --> 00:01:59.270
Add it to this.

00:01:59.270 --> 00:02:02.600
We may not be just having one
or two microservices would

00:02:02.600 --> 00:02:04.160
obviously be having
a hundreds or

00:02:04.160 --> 00:02:06.260
even thousands of
instances running.

00:02:06.260 --> 00:02:08.540
And it's really
impractical to manage

00:02:08.540 --> 00:02:11.329
all those IP addresses in
each one of these services.

00:02:11.329 --> 00:02:14.255
Obviously, we need a
solution to this problem.

00:02:14.255 --> 00:02:16.985
If you're having an
on-premise solution,

00:02:16.985 --> 00:02:18.980
then you can afford to

00:02:18.980 --> 00:02:21.260
hard-code the IP
addresses in this manner.

00:02:21.260 --> 00:02:24.200
Even in an instance of
changing IP address,

00:02:24.200 --> 00:02:25.730
you can afford to make

00:02:25.730 --> 00:02:28.385
those changes inside
your services.

00:02:28.385 --> 00:02:31.520
But it doesn't work if
you're deploying on

00:02:31.520 --> 00:02:35.030
Cloud and Robbins
like AWS or Azure,

00:02:35.030 --> 00:02:37.530
we need a solution
to this problem.

00:02:37.530 --> 00:02:42.160
The analogy is similar to how
a domain name would walk.

00:02:42.160 --> 00:02:45.220
If you enter a domain name is
something like google.com.

00:02:45.220 --> 00:02:46.630
The browser would
essentially send

00:02:46.630 --> 00:02:48.550
the request to the server.

00:02:48.550 --> 00:02:49.780
So we would respond back,

00:02:49.780 --> 00:02:51.235
put some kind of response

00:02:51.235 --> 00:02:52.780
which gets rendered
on the screen.

00:02:52.780 --> 00:02:54.835
And that's why you see
that Google homepage.

00:02:54.835 --> 00:02:56.185
But behind the scenes,

00:02:56.185 --> 00:02:58.030
we have a DNS server,

00:02:58.030 --> 00:03:00.895
which is doing the translation.

00:03:00.895 --> 00:03:03.400
Whenever you enter google.com,

00:03:03.400 --> 00:03:04.780
the browser would actually send

00:03:04.780 --> 00:03:06.520
the request to DNS server.

00:03:06.520 --> 00:03:08.935
Dns server will respond back

00:03:08.935 --> 00:03:12.370
with the IP address where
the server is residing.

00:03:12.370 --> 00:03:14.830
It is then the browser
would actually

00:03:14.830 --> 00:03:17.395
send request to the
actual server location.

00:03:17.395 --> 00:03:20.085
In order to get back
some kind of response.

00:03:20.085 --> 00:03:24.260
The DNS server would
have a record of

00:03:24.260 --> 00:03:26.390
all the domain names along with

00:03:26.390 --> 00:03:30.290
their corresponding IP
addresses of those silvers.

00:03:30.290 --> 00:03:34.115
Even in an instance of
changing IP address.

00:03:34.115 --> 00:03:35.660
If Google decided to move

00:03:35.660 --> 00:03:37.520
the application to
some other server,

00:03:37.520 --> 00:03:40.460
for instance, and get
a new IP address.

00:03:40.460 --> 00:03:43.265
It would update itself
in the DNS records,

00:03:43.265 --> 00:03:45.200
but you don't have to
change the domain name.

00:03:45.200 --> 00:03:47.060
You would still enter google.com

00:03:47.060 --> 00:03:49.175
and you get back the response.

00:03:49.175 --> 00:03:50.660
The same analogy can be

00:03:50.660 --> 00:03:53.525
applied to solve our
problem as well.

00:03:53.525 --> 00:03:56.030
We need somebody in the
middle who takes care

00:03:56.030 --> 00:03:58.790
of maintaining all the records.

00:03:58.790 --> 00:04:00.590
And then if one service wants

00:04:00.590 --> 00:04:02.510
to send requests to
another service,

00:04:02.510 --> 00:04:05.795
it would take help from
the third-party entity.

00:04:05.795 --> 00:04:07.400
What is it going to be?

00:04:07.400 --> 00:04:10.355
Well, it's called
service registry.

00:04:10.355 --> 00:04:11.960
As the name suggests.

00:04:11.960 --> 00:04:14.090
Services would
register themselves

00:04:14.090 --> 00:04:16.175
inside the service registry.

00:04:16.175 --> 00:04:20.330
And then let's say a wants
to send requests to XYZ.

00:04:20.330 --> 00:04:23.600
It can just simply asked
service registry to do

00:04:23.600 --> 00:04:26.975
the IP addresses to where
it can send requests to.

00:04:26.975 --> 00:04:29.090
And so it can send request.

00:04:29.090 --> 00:04:30.740
Now, we need to be aware of

00:04:30.740 --> 00:04:32.360
certain terminologies in here.

00:04:32.360 --> 00:04:34.835
If a is sending requests to XYZ,

00:04:34.835 --> 00:04:37.760
then in this case a
is client and x, y,

00:04:37.760 --> 00:04:38.990
z are essentially servers

00:04:38.990 --> 00:04:40.895
because they're
solving the request.

00:04:40.895 --> 00:04:43.520
However, it can
also be a server.

00:04:43.520 --> 00:04:44.900
If some of the service

00:04:44.900 --> 00:04:46.730
what to send requests
to serve as a,

00:04:46.730 --> 00:04:49.070
then a is essentially a server.

00:04:49.070 --> 00:04:50.615
Each node in here,

00:04:50.615 --> 00:04:52.970
both servers and clients.

00:04:52.970 --> 00:04:55.415
And when all these services

00:04:55.415 --> 00:04:58.445
registered themselves
with service registry,

00:04:58.445 --> 00:05:00.650
then all the services
are essentially

00:05:00.650 --> 00:05:03.214
clients to that
registry service.

00:05:03.214 --> 00:05:05.930
One of the popular service
registry is available in

00:05:05.930 --> 00:05:08.990
the market or Netflix Eureka.

00:05:08.990 --> 00:05:10.550
When we talk about Netflix,

00:05:10.550 --> 00:05:13.505
we tend to think about
that movie platform.

00:05:13.505 --> 00:05:16.145
But Netflix is much
more than that.

00:05:16.145 --> 00:05:19.370
They have contributed a
lot to Cloud ecosystem.

00:05:19.370 --> 00:05:20.960
And Netflix URAC will solve

00:05:20.960 --> 00:05:22.849
the purpose of service registry.

00:05:22.849 --> 00:05:25.040
There are other competitors
out there like we

00:05:25.040 --> 00:05:27.605
have Zoom, Apache Zookeeper.

00:05:27.605 --> 00:05:29.300
But this is one of
the popular options

00:05:29.300 --> 00:05:30.560
available in the market.

00:05:30.560 --> 00:05:32.000
And that's what
we're going to see

00:05:32.000 --> 00:05:33.725
in our examples as well.

00:05:33.725 --> 00:05:35.945
Basically, service registry is

00:05:35.945 --> 00:05:39.710
just yet another service
which will expose all those

00:05:39.710 --> 00:05:42.365
crowd the APIs it would have

00:05:42.365 --> 00:05:46.295
read in order to retrieve a
specific service information.

00:05:46.295 --> 00:05:48.350
If you wanted to
send a request to x,

00:05:48.350 --> 00:05:50.330
then it would obviously send

00:05:50.330 --> 00:05:52.580
a get request to service

00:05:52.580 --> 00:05:55.910
registry in order to
fetch the location of x.

00:05:55.910 --> 00:06:00.200
And then we can have post
request in order to,

00:06:00.200 --> 00:06:02.390
in order to register,

00:06:02.390 --> 00:06:04.040
all these services will register

00:06:04.040 --> 00:06:06.905
with the Netflix
you take us over.

00:06:06.905 --> 00:06:09.950
Then obviously, they would use

00:06:09.950 --> 00:06:11.630
a post request in
order to introduce

00:06:11.630 --> 00:06:13.880
themselves and add a record.

00:06:13.880 --> 00:06:16.640
Then we can also have
put in order to update

00:06:16.640 --> 00:06:20.375
the recording in an instance
of changing IP address.

00:06:20.375 --> 00:06:23.210
Finally, we can
also have delete if

00:06:23.210 --> 00:06:26.360
Services wants to
delete themselves.

00:06:26.360 --> 00:06:29.750
Now, I know that this might
sound very complicated,

00:06:29.750 --> 00:06:31.625
but it actually isn't.

00:06:31.625 --> 00:06:33.350
All you have to do
is to add bunch of

00:06:33.350 --> 00:06:35.405
libraries and a couple
of annotations.

00:06:35.405 --> 00:06:36.800
And we're good to go.

00:06:36.800 --> 00:06:38.015
Everything is taken care of

00:06:38.015 --> 00:06:41.300
automatically, pretty
much automatically.

00:06:41.300 --> 00:06:44.720
And we'll see how it's
done in coming lectures.

00:06:44.720 --> 00:06:47.960
But what is the concept of
service discount in here?

00:06:47.960 --> 00:06:50.540
Well, essentially,
we're taking help from

00:06:50.540 --> 00:06:54.260
service registry in order
to discover service.

00:06:54.260 --> 00:06:56.810
Instead of hard-coding, the
values were taking help

00:06:56.810 --> 00:06:59.705
from service registry
to discount a service.

00:06:59.705 --> 00:07:03.510
And that's what is
service discovery.
