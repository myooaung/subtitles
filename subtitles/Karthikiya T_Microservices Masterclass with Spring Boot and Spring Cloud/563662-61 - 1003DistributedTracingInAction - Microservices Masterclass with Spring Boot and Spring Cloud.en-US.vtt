WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.170 --> 00:00:03.030
Let's take a look at
distributed tracing

00:00:03.030 --> 00:00:06.299
an action with a quick example.

00:00:06.299 --> 00:00:09.225
The changes are pretty
straightforward.

00:00:09.225 --> 00:00:11.130
All I had to do is to add

00:00:11.130 --> 00:00:13.905
the Spring Cloud
Status loop dependency

00:00:13.905 --> 00:00:16.500
inside the Gradle file.

00:00:16.500 --> 00:00:18.810
And I had done the griddle,

00:00:18.810 --> 00:00:22.845
the official the project to
have this in the class spot.

00:00:22.845 --> 00:00:25.230
I've done this for
both products service

00:00:25.230 --> 00:00:26.955
as well as pricing service.

00:00:26.955 --> 00:00:29.340
But ideally, you
have to do it for

00:00:29.340 --> 00:00:31.260
all the microservices where

00:00:31.260 --> 00:00:33.435
you want tracing to take place.

00:00:33.435 --> 00:00:35.820
But for simplicity, I've done

00:00:35.820 --> 00:00:38.380
this for these two services.

00:00:38.380 --> 00:00:43.980
In addition to that, I had
introduced a new logger.

00:00:44.260 --> 00:00:47.480
In my case, I'm using SLR for

00:00:47.480 --> 00:00:53.510
Gelug just so that we
can test things out.

00:00:53.510 --> 00:00:56.479
Whenever we print
this log message,

00:00:56.479 --> 00:01:00.245
we should have the
tracing information.

00:01:00.245 --> 00:01:03.875
I already have all these
applications rounding.

00:01:03.875 --> 00:01:08.310
Let's go to Postman
and send the request.

00:01:11.050 --> 00:01:13.910
And sure enough, we see

00:01:13.910 --> 00:01:16.985
the tracing information inside

00:01:16.985 --> 00:01:20.045
the console of product service.

00:01:20.045 --> 00:01:22.640
This is a service name.

00:01:22.640 --> 00:01:27.020
This is the tracing
ID which was created,

00:01:27.020 --> 00:01:29.855
and this is the span ID.

00:01:29.855 --> 00:01:32.540
By default, tracing
audience span ID

00:01:32.540 --> 00:01:34.790
would be same at the start.

00:01:34.790 --> 00:01:38.490
But if you take a look
at the pricing service,

00:01:40.660 --> 00:01:44.300
we have the exact
same tracing ID,

00:01:44.300 --> 00:01:49.625
but the span ID is
different as expected.

00:01:49.625 --> 00:01:52.040
Now, obviously, we can't

00:01:52.040 --> 00:01:54.545
really do much with
this information.

00:01:54.545 --> 00:01:56.870
Still a lot of
manual intervention

00:01:56.870 --> 00:01:59.315
required to figure
out the problem.

00:01:59.315 --> 00:02:02.510
And that's why we need
a tool like Zipcar.

00:02:02.510 --> 00:02:04.550
One additional thing
which I would like to

00:02:04.550 --> 00:02:08.285
mention is that in case
for using web client,

00:02:08.285 --> 00:02:10.130
make sure that
you're not creating

00:02:10.130 --> 00:02:11.825
a new instance of a plant.

00:02:11.825 --> 00:02:15.845
If you do so, it doesn't
work seamlessly with slew.

00:02:15.845 --> 00:02:19.625
You wouldn't need to use for
this spring managed beans.

00:02:19.625 --> 00:02:22.415
And that's what I've
done in this case.

00:02:22.415 --> 00:02:25.250
Have injected web
client builder.

00:02:25.250 --> 00:02:29.225
Then I got the web
client instance from it.

00:02:29.225 --> 00:02:31.490
And I'm using the same here.

00:02:31.490 --> 00:02:34.310
This works well with slowed.

00:02:34.310 --> 00:02:37.040
If you're using breast
template though,

00:02:37.040 --> 00:02:39.845
you shouldn't have any
problem or whatsoever.

00:02:39.845 --> 00:02:42.300
I'll see you next one.
