WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.230 --> 00:00:04.740
Let's talk about Log Stash
filters in more detail.

00:00:04.740 --> 00:00:08.610
Filters would basically allow
you to manipulate the data,

00:00:08.610 --> 00:00:12.030
format the data before sending
it to the destination.

00:00:12.030 --> 00:00:15.690
Logs threshold for so many
filter plug-ins using

00:00:15.690 --> 00:00:17.730
which you can do anything
you want to do with

00:00:17.730 --> 00:00:20.415
the data that you can
possibly think of.

00:00:20.415 --> 00:00:22.560
I mean, sky is the
limit as to what you

00:00:22.560 --> 00:00:24.930
can do with those plug-ins.

00:00:24.930 --> 00:00:26.340
It's kind of like a mini

00:00:26.340 --> 00:00:28.290
programming language
and you have

00:00:28.290 --> 00:00:32.460
endless possibilities as to
what she can do with filters.

00:00:32.460 --> 00:00:34.920
Let's take a look at couple
of examples and then you get

00:00:34.920 --> 00:00:38.515
a better idea as to
why we need filters.

00:00:38.515 --> 00:00:40.790
Here's the rough conflict file.

00:00:40.790 --> 00:00:42.995
We already know what
is input and output.

00:00:42.995 --> 00:00:44.330
In addition to that,

00:00:44.330 --> 00:00:47.780
we now have the
filter configuration.

00:00:47.780 --> 00:00:50.090
What I'm trying to do here is

00:00:50.090 --> 00:00:52.130
I'm trying to filter
out all the logs are

00:00:52.130 --> 00:00:54.320
events whose age is

00:00:54.320 --> 00:00:57.290
greater than 600
seconds or ten minutes.

00:00:57.290 --> 00:01:01.670
I'm doing it by using the
age plug-in and inside

00:01:01.670 --> 00:01:03.800
which I'm having
this condition to

00:01:03.800 --> 00:01:06.575
check to see the
age of the event.

00:01:06.575 --> 00:01:08.900
It would calculate
the age based on

00:01:08.900 --> 00:01:12.350
the current timestamp minus
the timestamp of the event.

00:01:12.350 --> 00:01:15.455
And what you get is the
edge of that event.

00:01:15.455 --> 00:01:18.049
If it is greater
than 600 seconds,

00:01:18.049 --> 00:01:19.955
then I would like to drop it.

00:01:19.955 --> 00:01:23.180
I'm using dropped plugin
to drop that event,

00:01:23.180 --> 00:01:25.895
meaning that I don't want
to send it to destination.

00:01:25.895 --> 00:01:29.570
Otherwise they wouldn't
would go to destination.

00:01:29.570 --> 00:01:33.904
Let's take a look at one
another example of filters.

00:01:33.904 --> 00:01:37.160
One of the popular plugins
used in filters in

00:01:37.160 --> 00:01:40.850
real-world applications
is grok plugin,

00:01:40.850 --> 00:01:44.540
which will allow us to transform
unstructured data into

00:01:44.540 --> 00:01:46.640
structured format
in a manner that

00:01:46.640 --> 00:01:49.205
it can be sent to
the destination.

00:01:49.205 --> 00:01:51.289
So we have this statement,

00:01:51.289 --> 00:01:54.575
which is actually a combination
of multiple patterns.

00:01:54.575 --> 00:01:58.160
Each pattern is starting
with percentile character.

00:01:58.160 --> 00:02:01.130
We have multiple patterns.

00:02:01.130 --> 00:02:04.910
And each pattern would
have a syntax and its

00:02:04.910 --> 00:02:09.200
corresponding semantic
separated by a colon.

00:02:09.200 --> 00:02:13.130
The syntaxes like IP reward,

00:02:13.130 --> 00:02:14.705
you are a pattern path,

00:02:14.705 --> 00:02:17.795
are all predefined and are
provided by Log Stash.

00:02:17.795 --> 00:02:20.780
We can use them.
Basically a syntax

00:02:20.780 --> 00:02:24.125
is the name of the pattern
that you want to use,

00:02:24.125 --> 00:02:27.920
and this will match
with your log message.

00:02:27.920 --> 00:02:29.450
I'll show an example in a while

00:02:29.450 --> 00:02:31.265
and then you'll
understand better.

00:02:31.265 --> 00:02:34.070
The semantic is identifying
due to that piece

00:02:34.070 --> 00:02:36.740
of text being mashed in the log.

00:02:36.740 --> 00:02:38.540
For example, assume
that you have

00:02:38.540 --> 00:02:41.480
logs that follows this
particular pattern.

00:02:41.480 --> 00:02:44.765
The first pattern
we have here is IP,

00:02:44.765 --> 00:02:47.975
and that would match with
the IP address in the log.

00:02:47.975 --> 00:02:53.375
The second is the world that
would match with this board.

00:02:53.375 --> 00:02:55.160
It is bunch of characters.

00:02:55.160 --> 00:02:58.820
And then we have URL
path patterns that

00:02:58.820 --> 00:03:02.735
would match with the
URL with parameters.

00:03:02.735 --> 00:03:06.695
And then we have number
and another number.

00:03:06.695 --> 00:03:09.140
So once after this
data passes through

00:03:09.140 --> 00:03:11.930
the filter with grok plugin,

00:03:11.930 --> 00:03:14.945
this is what the resulting
output would be,

00:03:14.945 --> 00:03:17.780
and this is what would be
sent to the destination.

00:03:17.780 --> 00:03:19.250
So we have the client,

00:03:19.250 --> 00:03:21.950
which is a name we have
given out the semantic of

00:03:21.950 --> 00:03:26.750
this pattern and whose
value is this IP address.

00:03:26.750 --> 00:03:30.860
And then we have method
that corresponds to get.

00:03:30.860 --> 00:03:34.580
We have requests
that corresponds to

00:03:34.580 --> 00:03:38.495
the URI, so on and so forth.

00:03:38.495 --> 00:03:41.990
We basically structured the
data that was previously

00:03:41.990 --> 00:03:45.185
unstructured before sending
it to the destination.

00:03:45.185 --> 00:03:47.660
In case if you
have a log message

00:03:47.660 --> 00:03:49.850
that doesn't match
with this pattern,

00:03:49.850 --> 00:03:52.715
then it would still be
sent to the destination.

00:03:52.715 --> 00:03:57.065
But with an additional tag
called grok parts failure.

00:03:57.065 --> 00:03:59.780
Using that tag, you can
do something about it

00:03:59.780 --> 00:04:02.360
in your destination
using a condition.

00:04:02.360 --> 00:04:05.120
You can also drop this
event right here inside

00:04:05.120 --> 00:04:08.300
the filter and not send
it to the destination.

00:04:08.300 --> 00:04:10.160
It is up to you.

00:04:10.160 --> 00:04:12.350
Now let me walk you
through list of

00:04:12.350 --> 00:04:16.200
plug-ins that are
part of the filter.

00:04:19.120 --> 00:04:24.170
Can quickly go through
all these plugins.

00:04:24.170 --> 00:04:26.030
Take a look at the examples.

00:04:26.030 --> 00:04:29.450
Age is what I've just shown you.

00:04:29.450 --> 00:04:34.550
Then we also have dead
plug-in for instance.

00:04:34.550 --> 00:04:38.760
And drop is something
that I've just shown you.

00:04:40.330 --> 00:04:43.385
We have dropped plugin,

00:04:43.385 --> 00:04:45.830
which will help us parse

00:04:45.830 --> 00:04:47.240
the unstructured event data

00:04:47.240 --> 00:04:51.540
into structured data or fields.

00:04:53.980 --> 00:04:56.510
Like I said, sky's the limit as

00:04:56.510 --> 00:04:59.359
to what you can do
with this plug-ins.

00:04:59.359 --> 00:05:01.910
It depends on your scenario

00:05:01.910 --> 00:05:04.280
and what you exactly want to do.

00:05:04.280 --> 00:05:07.380
I'll see you in next one.
