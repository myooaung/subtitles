WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.860
So far we were trying to use

00:00:01.860 --> 00:00:04.545
rest template to
make the API calls.

00:00:04.545 --> 00:00:08.280
However, rest template would
lead to blocking operations,

00:00:08.280 --> 00:00:10.050
meaning that the thread
would have to wait

00:00:10.050 --> 00:00:12.150
until we get back the response.

00:00:12.150 --> 00:00:13.680
And sooner or later,

00:00:13.680 --> 00:00:16.470
we might run into a problem
where we may not be having

00:00:16.470 --> 00:00:19.620
enough threads to deal with
the incoming requests.

00:00:19.620 --> 00:00:21.210
A better approach, however,

00:00:21.210 --> 00:00:23.130
is to use the web client,

00:00:23.130 --> 00:00:25.965
which is from the Spring
Web Flux project.

00:00:25.965 --> 00:00:28.050
Now, I assume that
you have watched

00:00:28.050 --> 00:00:30.540
my chapter on
Reactive Programming,

00:00:30.540 --> 00:00:32.865
and I'm also assuming
that you know how to use

00:00:32.865 --> 00:00:36.209
flux mono, web client, etc.

00:00:36.209 --> 00:00:38.610
If you didn't watch
that chapter,

00:00:38.610 --> 00:00:42.505
please do that before
proceeding with this video.

00:00:42.505 --> 00:00:45.050
So now let's just go ahead and

00:00:45.050 --> 00:00:48.500
replace all these rest
template with web client.

00:00:48.500 --> 00:00:51.559
So to enable react
to programming.

00:00:51.559 --> 00:00:53.120
First things first, we need to

00:00:53.120 --> 00:00:55.925
have the required dependencies.

00:00:55.925 --> 00:00:57.410
And in this case we need

00:00:57.410 --> 00:01:01.700
Spring Boot starter
web flux dependency.

00:01:01.700 --> 00:01:06.095
Let's get inside,
build-up Gradle file,

00:01:06.095 --> 00:01:09.230
add the dependency, and let's

00:01:09.230 --> 00:01:13.290
quickly do the Gradle
refresh of the project.

00:01:22.720 --> 00:01:25.980
Let's save the file.

00:01:29.560 --> 00:01:39.260
Refresh. Let's initialize
the web client.

00:01:39.260 --> 00:01:41.840
There are multiple ways to
create a web client object,

00:01:41.840 --> 00:01:43.760
but I'm just going to

00:01:43.760 --> 00:01:47.220
choose the simplest of
the simplest approach.

00:01:47.500 --> 00:01:50.825
Public web client.

00:01:50.825 --> 00:01:56.090
Web client equals
Client dot create.

00:01:56.090 --> 00:02:00.410
This would create an
instance of a web client,

00:02:00.410 --> 00:02:04.050
which we can then
use inside our code.

00:02:05.080 --> 00:02:09.575
Now, ideally, if we had a react
to database like MongoDB,

00:02:09.575 --> 00:02:13.115
we could have been getting
a mono object here.

00:02:13.115 --> 00:02:15.274
But since we don't
have a database

00:02:15.274 --> 00:02:17.750
that has just use the method

00:02:17.750 --> 00:02:23.855
mono dot just to
produce an item.

00:02:23.855 --> 00:02:27.500
This case it's
product info object.

00:02:27.500 --> 00:02:33.390
Of course we need to
make this mono as well.

00:02:33.400 --> 00:02:36.920
We're going to bring in
similar changes here as well.

00:02:36.920 --> 00:02:38.390
Instead of rest template,

00:02:38.390 --> 00:02:44.915
we're going to be using
web client, Client dot.

00:02:44.915 --> 00:02:51.065
Because I want to send
get request dot URI.

00:02:51.065 --> 00:02:56.070
You would specify the
URI. That's actually FDB.

00:02:56.110 --> 00:03:00.920
Local host. Port number is

00:03:00.920 --> 00:03:06.245
800 to four pricing
service slash price.

00:03:06.245 --> 00:03:10.590
Then we're going to
pass in the product ID.

00:03:10.780 --> 00:03:18.935
Let me copy this dot,

00:03:18.935 --> 00:03:22.790
retrieve, which would actually

00:03:22.790 --> 00:03:25.985
send the request and
retrieve the results.

00:03:25.985 --> 00:03:28.385
We want to convert
the response to

00:03:28.385 --> 00:03:32.340
a mono object about it to mono.

00:03:34.390 --> 00:03:38.975
This is going to
accept one meter.

00:03:38.975 --> 00:03:44.310
This case, this is going
to be off type price.

00:03:47.980 --> 00:03:53.240
Let's change mono.

00:03:53.240 --> 00:03:55.970
And we're going to have
similar instruction

00:03:55.970 --> 00:03:59.010
in case of inventory as well.

00:03:59.590 --> 00:04:04.980
Let's draw off price is
going to be inventory.

00:04:07.510 --> 00:04:10.920
Going to be inventory,

00:04:16.330 --> 00:04:22.560
product ID, and supposed
to be inventory as well.

00:04:22.840 --> 00:04:26.640
Let's get it off the statement.

00:04:29.170 --> 00:04:30.815
Now.

00:04:30.815 --> 00:04:33.515
The next step is to combine

00:04:33.515 --> 00:04:37.430
all these results and
create a mono object,

00:04:37.430 --> 00:04:40.325
which is going to
be of type product.

00:04:40.325 --> 00:04:43.415
Right now this method is
returning product object.

00:04:43.415 --> 00:04:47.190
This however, supposed
to be a mono object.

00:04:51.550 --> 00:04:58.370
Obviously this instruction
is no longer relevant.

00:04:58.560 --> 00:05:03.955
Went to use a method
inside mono that says zip.

00:05:03.955 --> 00:05:06.640
Now there are multiple
variants of this method,

00:05:06.640 --> 00:05:10.165
depending on number of mono
objects you want to combine.

00:05:10.165 --> 00:05:13.300
Basically zip method would
just merge all those

00:05:13.300 --> 00:05:16.915
given mono goes
into a single mono.

00:05:16.915 --> 00:05:18.835
And we're going to have

00:05:18.835 --> 00:05:20.995
a method difference
order lambda expression,

00:05:20.995 --> 00:05:23.350
which will get
executed once we have

00:05:23.350 --> 00:05:26.424
items generated from
all those mentioned,

00:05:26.424 --> 00:05:28.870
Bono's, let me show
you what I mean.

00:05:28.870 --> 00:05:29.935
Zip.

00:05:29.935 --> 00:05:32.965
In our case, we need to
combine three models.

00:05:32.965 --> 00:05:36.800
So I'm going to use the
method with three parameters.

00:05:37.270 --> 00:05:40.205
It's going to be this.

00:05:40.205 --> 00:05:44.550
B1 is going to be product info,

00:05:45.640 --> 00:05:50.220
is going to be the price mono,

00:05:50.500 --> 00:05:57.240
and P3 is going to be inventory.

00:06:01.840 --> 00:06:05.490
I'm going to call
the method map.

00:06:05.920 --> 00:06:09.980
Here I could add the
Pass Method difference

00:06:09.980 --> 00:06:11.645
or the Lambda expression.

00:06:11.645 --> 00:06:14.360
Let me first start
off by giving him at

00:06:14.360 --> 00:06:17.240
the difference because
speaking from my experience,

00:06:17.240 --> 00:06:19.640
whenever I introduce
a lambda expression,

00:06:19.640 --> 00:06:22.175
the next developer
who looks at my code,

00:06:22.175 --> 00:06:24.755
comes to me and asked me
what's happening in here.

00:06:24.755 --> 00:06:27.800
To make it look more
straightforward outflows

00:06:27.800 --> 00:06:29.540
to use a method difference.

00:06:29.540 --> 00:06:31.820
And then we'll see how
we can convert that into

00:06:31.820 --> 00:06:35.690
a lambda expression map.

00:06:35.690 --> 00:06:43.105
I'm going to say this
some method name product.

00:06:43.105 --> 00:06:47.165
Rather let's call
it built product.

00:06:47.165 --> 00:06:50.285
Obviously we don't
have this method.

00:06:50.285 --> 00:07:00.290
Let's introduce that public
product, il product.

00:07:00.290 --> 00:07:02.540
What is the type of argument?

00:07:02.540 --> 00:07:08.585
This method is going
to allow tuple three.

00:07:08.585 --> 00:07:12.170
There isn't my we're
using tuple three is

00:07:12.170 --> 00:07:15.575
because we have three
parameters in here.

00:07:15.575 --> 00:07:17.540
If we had two monomers

00:07:17.540 --> 00:07:19.519
which needs to be
combined together,

00:07:19.519 --> 00:07:21.695
this would have been tuple two.

00:07:21.695 --> 00:07:24.875
So there are multiple
variance of tuples.

00:07:24.875 --> 00:07:28.235
And depending on your
requirement, you need to use one.

00:07:28.235 --> 00:07:32.675
This has two generic parameters.

00:07:32.675 --> 00:07:36.905
Those would correspond
to these three.

00:07:36.905 --> 00:07:43.400
That's product in full
price and inventory.

00:07:43.400 --> 00:07:45.680
So this right here would

00:07:45.680 --> 00:07:48.095
have the results of all
these three models.

00:07:48.095 --> 00:07:51.050
The only thing that is
left to do is to extract

00:07:51.050 --> 00:07:54.920
that information and
build our product object.

00:07:54.920 --> 00:08:00.215
Return new product instance.

00:08:00.215 --> 00:08:02.854
And let's populate
all the fields.

00:08:02.854 --> 00:08:08.730
I'll do control shift
TO import this class.

00:08:11.680 --> 00:08:18.980
Inside here, we would
say tuple dot, get T1.

00:08:18.980 --> 00:08:22.560
That corresponds to the
product info object.

00:08:23.110 --> 00:08:27.395
Get Product ID. Then again,

00:08:27.395 --> 00:08:34.835
triple dot, get T1,
get product name.

00:08:34.835 --> 00:08:37.670
Similarly, we're also going

00:08:37.670 --> 00:08:42.090
to retrieve product description.

00:08:44.440 --> 00:08:46.670
Then for the next object,

00:08:46.670 --> 00:08:49.024
which is the price,

00:08:49.024 --> 00:08:51.515
we're going to say double-dot T,

00:08:51.515 --> 00:08:56.870
two dot get discounted price.

00:08:56.870 --> 00:09:00.440
Finally, tuple dot t3,

00:09:00.440 --> 00:09:09.920
which corresponds to inventory
object dot get in-stock.

00:09:09.920 --> 00:09:13.230
That's pretty much
there is to it.

00:09:14.290 --> 00:09:17.460
Let's double-check.

00:09:17.830 --> 00:09:20.479
Now let's test our application.

00:09:20.479 --> 00:09:23.510
But before that, let's also make

00:09:23.510 --> 00:09:28.130
necessary changes inside
the pricing service.

00:09:28.130 --> 00:09:31.670
This class right here
needs to be replaced.

00:09:31.670 --> 00:09:33.635
It's a copy paste mistake.

00:09:33.635 --> 00:09:37.380
Let's change this to
price controller.

00:09:37.420 --> 00:09:40.770
Same with inventory.

00:09:43.390 --> 00:09:48.030
Let's call it as
inventory controller.

00:09:49.750 --> 00:09:54.540
Let's also introduce
the dependency.

00:09:58.690 --> 00:10:05.070
The file. Refresh the project.

00:10:05.110 --> 00:10:09.210
Same goes here as well.

00:10:20.710 --> 00:10:26.160
Let's also open the
inventory controller.

00:10:26.320 --> 00:10:30.420
Here we're trying to
return inventory object.

00:10:30.420 --> 00:10:34.300
We now need to change
this to a Mono.

00:10:34.300 --> 00:10:37.760
Mono often inventory.

00:10:39.750 --> 00:10:43.375
Since we don't have
a react to database,

00:10:43.375 --> 00:10:49.850
Let's explicitly produce
an item. Node.js.

00:10:51.270 --> 00:10:54.800
Get inventory in full.

00:10:59.850 --> 00:11:03.940
Same changes needs to
go in here as well.

00:11:03.940 --> 00:11:09.230
This is going to be off
type Mono of price.

00:11:13.780 --> 00:11:22.200
10 dot just quickly.

00:11:24.430 --> 00:11:27.860
This would send the mono object.

00:11:27.860 --> 00:11:30.080
It's not recommended
that you have

00:11:30.080 --> 00:11:31.220
partial implementation of

00:11:31.220 --> 00:11:33.680
Reactive Programming
in your project.

00:11:33.680 --> 00:11:36.110
If you're moving towards
react to programming,

00:11:36.110 --> 00:11:38.405
try your level best to convert

00:11:38.405 --> 00:11:39.950
as many microservices as

00:11:39.950 --> 00:11:42.770
possible to use
reactive programming.

00:11:42.770 --> 00:11:44.480
Otherwise, you might actually

00:11:44.480 --> 00:11:45.770
end up destroying the purpose

00:11:45.770 --> 00:11:48.725
of the benefits you get
with reactive programming.

00:11:48.725 --> 00:11:50.000
If you're wondering how,

00:11:50.000 --> 00:11:52.010
then you need to wait
until the next lecture.

00:11:52.010 --> 00:11:53.270
Where we talked about some of

00:11:53.270 --> 00:11:55.160
the pros and cons off moving

00:11:55.160 --> 00:11:56.480
towards reactive programming in

00:11:56.480 --> 00:11:58.295
the context of micro-services.

00:11:58.295 --> 00:12:03.335
But for now, let's
launch our services,

00:12:03.335 --> 00:12:10.560
pricing service, inventory
service, and product service.

00:12:16.600 --> 00:12:22.290
Let's go to Postman
and send the request.

00:12:22.390 --> 00:12:27.330
We got the response back
without any problem.

00:12:33.100 --> 00:12:36.020
Now, let us see if

00:12:36.020 --> 00:12:40.490
Reactive Programming has
indeed taken effect.

00:12:40.490 --> 00:12:42.560
To do that, I'm just
simply going to introduce

00:12:42.560 --> 00:12:45.215
a sys out statement here.

00:12:45.215 --> 00:12:46.580
I'm just simply going to print

00:12:46.580 --> 00:12:51.630
some random text,
doesn't matter.

00:12:54.400 --> 00:12:58.650
Let's recompile the project.

00:12:58.870 --> 00:13:02.850
Inside the pricing controller.

00:13:04.030 --> 00:13:06.440
Let's assume that
this is going to take

00:13:06.440 --> 00:13:09.140
about ten seconds to process.

00:13:09.140 --> 00:13:10.610
In order to simulate that,

00:13:10.610 --> 00:13:14.130
I'm going to say red dot sleep.

00:13:17.190 --> 00:13:19.330
About ten seconds.

00:13:19.330 --> 00:13:23.270
Let's wrap the code with
try-catch block for now.

00:13:24.630 --> 00:13:29.300
Let's also relaunch
the pricing service.

00:13:32.220 --> 00:13:37.700
Now let's keep a watch on
the product service console.

00:13:40.800 --> 00:13:45.859
I go back to Postman,
send the request.

00:13:46.020 --> 00:13:49.510
Even if it's going to
take about ten seconds,

00:13:49.510 --> 00:13:51.490
we're able to print this.

00:13:51.490 --> 00:13:56.110
Before that. Let me
try to do it again.

00:13:56.110 --> 00:14:00.425
The moment I hit Send button,
you're going to see 12.

00:14:00.425 --> 00:14:02.795
There is no waiting
of ten seconds

00:14:02.795 --> 00:14:05.435
between displaying
these two messages.

00:14:05.435 --> 00:14:09.350
That means thread didn't

00:14:09.350 --> 00:14:12.690
wait until we got
back the response,

00:14:13.780 --> 00:14:18.455
which is what is react to
programming is all about.

00:14:18.455 --> 00:14:24.455
Now let's also convert this
to a lambda expression.

00:14:24.455 --> 00:14:27.590
Would say tuple, and
you would pass it

00:14:27.590 --> 00:14:34.200
to a method inside
anonymous inner class.

00:14:35.200 --> 00:14:39.110
Let me just, let me just
copy this entire thing.

00:14:39.110 --> 00:14:43.550
Have it in here. We can now
get rid of this function.

00:14:43.550 --> 00:14:45.755
I'll do Control Shift F,

00:14:45.755 --> 00:14:48.755
and let's relaunch
our application

00:14:48.755 --> 00:14:52.230
and see if this is working.

00:15:00.550 --> 00:15:04.020
Let's send the request.

00:15:07.780 --> 00:15:12.000
Unfortunately, it's going
to take ten seconds.
