WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.560 --> 00:00:03.330
Até agora, temos os arquivos de
 conflito


00:00:03.330 --> 00:00:05.250
residentes no GitHub e, em seguida,


00:00:05.250 --> 00:00:06.630
temos o servidor de conflito que
 os viu

00:00:06.630 --> 00:00:09.210
nos serviços, o
 que é ótimo. 

00:00:09.210 --> 00:00:11.895
Mas isso vem com alguns desafios
 adicionais. 

00:00:11.895 --> 00:00:14.460
Como agora somos movidos
 todos os arquivos de conflito de

00:00:14.460 --> 00:00:17.250
microsserviços
 individuais
 para um local comum,


00:00:17.250 --> 00:00:19.125
como neste caso, o GitHub. 

00:00:19.125 --> 00:00:20.910
Isso também significa
 que tudo


00:00:20.910 --> 00:00:23.490
aqui pode ser visto
 por todos os outros. 

00:00:23.490 --> 00:00:24.810
E se é alguém com

00:00:24.810 --> 00:00:28.130
intenção
 maliciosa Quem está dando
 uma olhada nesse conteúdo,
 obviamente,


00:00:28.130 --> 00:00:30.200
existe a possibilidade de


00:00:30.200 --> 00:00:32.390
que eles possam usar indevidamente
 essas informações. 

00:00:32.390 --> 00:00:34.910
O que isso significa é que não
 queremos manter algum sentido

00:00:34.910 --> 00:00:39.695
informações como uma
 senha de banco de dados ou chaves de API, etc.


00:00:39.695 --> 00:00:41.480
Como as protegemos? 

00:00:41.480 --> 00:00:45.335
Bem, a resposta é
 criptografia e descriptografia. 

00:00:45.335 --> 00:00:47.135
O que isso significa é


00:00:47.135 --> 00:00:50.075
que sempre que estamos
 tentando armazenar a senha,


00:00:50.075 --> 00:00:53.390
vamos criptografá-la
 para que ela seja vista em


00:00:53.390 --> 00:00:54.980
um formato que ninguém possa


00:00:54.980 --> 00:00:57.440
entender, exceto
 os conflitos acabados. 

00:00:57.440 --> 00:00:59.300
E quando os conflitos são ricos,


00:00:59.300 --> 00:01:01.730
essa propriedade,
 que é criptografada,


00:01:01.730 --> 00:01:03.410
ela irá descriptografar isso,


00:01:03.410 --> 00:01:05.825
extrair o texto real


00:01:05.825 --> 00:01:08.284
e enviá-lo para a
 solicitação e serviço. 

00:01:08.284 --> 00:01:10.835
Você saberá o que quero
 dizer em apenas um tempo. 

00:01:10.835 --> 00:01:12.740
Mas a primeira coisa que
 precisamos fazer
 para

00:01:12.740 --> 00:01:14.180
habilitar a
 criptografia e

00:01:14.180 --> 00:01:17.030
descriptografia é introduzir o


00:01:17.030 --> 00:01:20.345
Spring Security em nossos
 conflitos sobre o projeto. 

00:01:20.345 --> 00:01:25.655
E vou fazer exatamente isso
 dentro do arquivo POM XML. 

00:01:25.655 --> 00:01:29.870
Quando introduzir uma dependência
 adicional. 

00:01:29.870 --> 00:01:39.230
E isso vai ser a segurança inicial do
 Spring Boot. 

00:01:39.230 --> 00:01:45.840
O arquivo. Vamos
 atualizar o projeto. 

00:01:50.320 --> 00:01:53.045
Uma vez feito. 

00:01:53.045 --> 00:01:58.475
Vamos apresentar algumas configurações
 específicas de segurança. 

00:01:58.475 --> 00:02:01.684
Gostaria de primeiro definir
 o nome de usuário e a senha. 

00:02:01.684 --> 00:02:04.820
Na verdade, não precisamos
 disso porque vou
 permitir

00:02:04.820 --> 00:02:08.015
todos os endpoints
 sem qualquer autenticação. 

00:02:08.015 --> 00:02:10.325
Então, vou ignorá-lo por enquanto. 

00:02:10.325 --> 00:02:14.090
Por padrão, sempre que você adicionar
 a dependência de segurança,


00:02:14.090 --> 00:02:16.430
ela ativará automaticamente
 a autenticação com

00:02:16.430 --> 00:02:19.639
usuário
 padrão e senha
 gerada automaticamente. 

00:02:19.639 --> 00:02:21.470
Então, poderíamos alterar


00:02:21.470 --> 00:02:24.500
essa senha mínima para
 algo que desejará. 

00:02:24.500 --> 00:02:27.200
Como alternativa, podemos permitir
 que todos acessem


00:02:27.200 --> 00:02:30.530
todos os endpoints
 sem restrições. 

00:02:30.530 --> 00:02:32.480
Para isso. 

00:02:32.480 --> 00:02:36.150
Vou criar um novo arquivo de conflito
 de segurança. 

00:02:36.250 --> 00:02:43.530
Vou chamá-lo de segurança na web. 

00:02:43.690 --> 00:02:46.865
Aqui vamos
 criar uma regra


00:02:46.865 --> 00:02:51.395
que permita que todos
 acessem um roteamento. 

00:02:51.395 --> 00:02:56.310
Vou dizer que
 habilite a segurança na web. 

00:03:00.250 --> 00:03:03.720
Vou
 substituir o método. 

00:03:03.880 --> 00:03:06.830
Mas antes disso,
 essa classe precisa
 estender o

00:03:06.830 --> 00:03:11.000
adotante de
 configuração de segurança da Web. 

00:03:11.000 --> 00:03:15.360
Tudo isso já está coberto no capítulo de
 segurança. 

00:03:16.000 --> 00:03:23.220
Adotante configurado de segurança. 

00:03:23.530 --> 00:03:26.825
Vamos substituir o método. 

00:03:26.825 --> 00:03:31.340
Configuração ampla protegida. 

00:03:31.340 --> 00:03:34.850
E fomos passar
 em um argumento


00:03:34.850 --> 00:03:40.320
p segurança


00:03:42.700 --> 00:03:47.700
lança exceção. 

00:03:47.860 --> 00:03:50.780
E aqui dentro,
 vou usar


00:03:50.780 --> 00:03:54.815
esse objeto para
 configurar nossa segurança. 

00:03:54.815 --> 00:04:03.300
Vou dizer que as
 solicitações autorizadas são importantes. 

00:04:04.240 --> 00:04:09.350
Quando fornecer reg ex. 

00:04:09.350 --> 00:04:12.995
Eu gostaria de permitir
 literalmente todos os URLs. 

00:04:12.995 --> 00:04:15.900
Vou dizer permissão. 

00:04:17.290 --> 00:04:20.945
Esta declaração permitirá que
 todos acessem tudo


00:04:20.945 --> 00:04:22.710
sem restrições
 ou sem precisar


00:04:22.710 --> 00:04:24.709
digitar nome de usuário e senha. 

00:04:24.709 --> 00:04:26.060
Se você não fizer isso,


00:04:26.060 --> 00:04:28.100
toda vez que
 enviar a solicitação,
 você

00:04:28.100 --> 00:04:30.575
será solicitado a digitar
 o nome de usuário e a senha,

00:04:30.575 --> 00:04:32.495
que pode ser irritante. 

00:04:32.495 --> 00:04:37.040
Uma coisa adicional que precisamos
 fazer é desativar o CSRF. 

00:04:37.040 --> 00:04:39.450
Ele está ativado por padrão. 

00:04:40.000 --> 00:04:43.745
Já falamos sobre ataques de
 falsificação de solicitação de CSRF,


00:04:43.745 --> 00:04:46.205
entre sites


00:04:46.205 --> 00:04:48.815
em nossos cursos anteriores. 

00:04:48.815 --> 00:04:52.260
Vamos desativá-lo por enquanto. 

00:04:52.840 --> 00:04:55.790
Isso é tudo o que há para isso. 

00:04:55.790 --> 00:04:59.315
Agora temos todos os recursos de
 segurança Spring em vigor. 

00:04:59.315 --> 00:05:01.490
A próxima coisa que
 precisamos fazer é
 habilitar a

00:05:01.490 --> 00:05:03.755
criptografia
 e a descriptografia. 

00:05:03.755 --> 00:05:05.090
E é isso que
 vamos dar


00:05:05.090 --> 00:05:07.500
uma olhada em nosso próximo vídeo. 
