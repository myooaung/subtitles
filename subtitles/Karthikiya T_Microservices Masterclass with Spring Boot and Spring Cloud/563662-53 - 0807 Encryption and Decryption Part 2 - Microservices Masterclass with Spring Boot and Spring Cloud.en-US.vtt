WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.890 --> 00:00:04.080
Let's take a look at how we
can enable encryption and

00:00:04.080 --> 00:00:07.335
decryption inside
the conflict server.

00:00:07.335 --> 00:00:11.760
All we have to do to
enable it is to just add

00:00:11.760 --> 00:00:17.295
one property and that's
encrypt dot key.

00:00:17.295 --> 00:00:20.775
It is going to specify
the key for encryption,

00:00:20.775 --> 00:00:23.460
secret key,

00:00:23.460 --> 00:00:26.880
and everything will be taken
care of automatically.

00:00:26.880 --> 00:00:29.490
This would enable
certain endpoints which

00:00:29.490 --> 00:00:33.445
will help us encrypt
and decrypt the data.

00:00:33.445 --> 00:00:35.750
And this wouldn't be
working unless we add

00:00:35.750 --> 00:00:38.330
the spring security dependency.

00:00:38.330 --> 00:00:41.520
Let's relaunch your
convict silver.

00:00:45.490 --> 00:00:48.840
Let's go to Postman.

00:00:51.700 --> 00:00:56.180
I wanted to send
request to an endpoint.

00:00:56.180 --> 00:01:01.760
Actually a post request
wanted to say localhost.

00:01:01.760 --> 00:01:04.040
Colon lines are 0

00:01:04.040 --> 00:01:06.665
to wherever the conflict
solid is running.

00:01:06.665 --> 00:01:11.825
Slash, encrypt the endpoint.

00:01:11.825 --> 00:01:15.089
Inside the request body.

00:01:15.160 --> 00:01:19.369
We can specify the data
that would like to encrypt

00:01:19.369 --> 00:01:21.440
using the key that you

00:01:21.440 --> 00:01:24.680
specified in the
bootstrap dot properties.

00:01:24.680 --> 00:01:30.660
I went to say maybe my password,

00:01:31.150 --> 00:01:35.779
send the request and you
get the encrypted value.

00:01:35.779 --> 00:01:37.985
I'm going to copy that.

00:01:37.985 --> 00:01:40.880
Go to get up. And I can now

00:01:40.880 --> 00:01:44.130
paste that information in here.

00:01:46.900 --> 00:01:54.949
I wanted to set password
equals the encrypted password.

00:01:54.949 --> 00:01:57.425
If it is somebody with
malicious intent,

00:01:57.425 --> 00:02:00.094
it takes a look at this string,

00:02:00.094 --> 00:02:02.690
is probably not going
to understand anything.

00:02:02.690 --> 00:02:05.195
And it tries to do
something with it.

00:02:05.195 --> 00:02:08.119
He doesn't have the
key to decrypt.

00:02:08.119 --> 00:02:10.535
It doesn't know this key.

00:02:10.535 --> 00:02:12.900
In order to decrypt it.

00:02:14.500 --> 00:02:18.230
There's one additional
thing to do is to prepend

00:02:18.230 --> 00:02:24.800
the string, the word cipher.

00:02:24.800 --> 00:02:27.950
By doing so, the conflicts

00:02:27.950 --> 00:02:29.570
of what would know
that it needs to

00:02:29.570 --> 00:02:34.680
decrypt the string before
sending it out to the service.

00:02:35.500 --> 00:02:38.940
To commit those changes.

00:02:39.820 --> 00:02:43.985
The spring configured
automatically decrypt

00:02:43.985 --> 00:02:50.794
this value because we have
prepended with cipher.

00:02:50.794 --> 00:02:54.425
The Zener, the endpoint
for decryption as well.

00:02:54.425 --> 00:02:56.670
Let me just copy this.

00:02:59.560 --> 00:03:10.385
Decrypt copy and let's paste
it in the request body.

00:03:10.385 --> 00:03:17.759
The request supposed to
send the post request.

00:03:18.070 --> 00:03:22.950
You've got the decrypted value.

00:03:24.540 --> 00:03:28.360
Let's relaunch the
conflict service.

00:03:28.360 --> 00:03:32.260
The server. Let's get inside

00:03:32.260 --> 00:03:37.435
the product service controller
and make your changes.

00:03:37.435 --> 00:03:42.260
And soft message, I
wanted to say password.

00:03:44.520 --> 00:03:47.870
I will do the same everywhere.

00:03:50.970 --> 00:03:55.430
I went to relaunch the
product service as well.

00:04:01.590 --> 00:04:07.739
Let's go to Postman and
try sending the request.

00:04:11.890 --> 00:04:15.920
We're able to see the password.

00:04:15.920 --> 00:04:18.545
We're not seeing the
encrypted string

00:04:18.545 --> 00:04:20.150
because the conflict Silva

00:04:20.150 --> 00:04:21.800
has decrypted it before

00:04:21.800 --> 00:04:24.720
sending it to the
product service.
