WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.560 --> 00:00:03.330
So far we have the
conflict files

00:00:03.330 --> 00:00:05.250
residing in GitHub and then

00:00:05.250 --> 00:00:06.630
we have the conflict server saw

00:00:06.630 --> 00:00:09.210
them to the services,
which is great.

00:00:09.210 --> 00:00:11.895
But this comes with some
additional challenges.

00:00:11.895 --> 00:00:14.460
Since we are now moved out
all the conflict files from

00:00:14.460 --> 00:00:17.250
individual microservices
to a common location,

00:00:17.250 --> 00:00:19.125
like in this case, GitHub.

00:00:19.125 --> 00:00:20.910
This also means
that everything in

00:00:20.910 --> 00:00:23.490
here can be seen
by everybody else.

00:00:23.490 --> 00:00:24.810
And if it is somebody with

00:00:24.810 --> 00:00:28.130
malicious intent Who's taking
a look at this content,

00:00:28.130 --> 00:00:30.200
obviously, there
is a possibility

00:00:30.200 --> 00:00:32.390
that they can misuse
this information.

00:00:32.390 --> 00:00:34.910
What this means is we don't
want to keep some sense to

00:00:34.910 --> 00:00:39.695
information like a database
password or API keys, etc.

00:00:39.695 --> 00:00:41.480
How do we protect them?

00:00:41.480 --> 00:00:45.335
Well, the answer is
encryption and decryption.

00:00:45.335 --> 00:00:47.135
What that means is

00:00:47.135 --> 00:00:50.075
whenever we are trying
to store the password,

00:00:50.075 --> 00:00:53.390
we're going to encrypt it
so that it will be seen in

00:00:53.390 --> 00:00:54.980
a format that nobody can

00:00:54.980 --> 00:00:57.440
understand except
the conflicts over.

00:00:57.440 --> 00:00:59.300
And when conflicts are rich,

00:00:59.300 --> 00:01:01.730
that property,
which is encrypted,

00:01:01.730 --> 00:01:03.410
it's going to decrypt that,

00:01:03.410 --> 00:01:05.825
extract the actual text

00:01:05.825 --> 00:01:08.284
and then send it to the
request and service.

00:01:08.284 --> 00:01:10.835
You will know what I
mean in just a while.

00:01:10.835 --> 00:01:12.740
But the first thing
we need to do

00:01:12.740 --> 00:01:14.180
in order to enable
encryption and

00:01:14.180 --> 00:01:17.030
decryption is to introduce

00:01:17.030 --> 00:01:20.345
Spring Security in our
conflicts over project.

00:01:20.345 --> 00:01:25.655
And I'm going to do just that
inside the POM XML file.

00:01:25.655 --> 00:01:29.870
When to introduce one
additional dependency.

00:01:29.870 --> 00:01:39.230
And this is going to be
Spring Boot starter security.

00:01:39.230 --> 00:01:45.840
The file. Let's
update the project.

00:01:50.320 --> 00:01:53.045
Once it's done.

00:01:53.045 --> 00:01:58.475
Let's introduce few security
specific configurations.

00:01:58.475 --> 00:02:01.684
I would like to first set
the username and password.

00:02:01.684 --> 00:02:04.820
Actually we don't need
it because I'm going to

00:02:04.820 --> 00:02:08.015
allow all the endpoints
without any authentication.

00:02:08.015 --> 00:02:10.325
So I'll just ignore it for now.

00:02:10.325 --> 00:02:14.090
By default, whenever you add
the security dependency,

00:02:14.090 --> 00:02:16.430
it will automatically enable
the authentication with

00:02:16.430 --> 00:02:19.639
default username and
auto-generated password.

00:02:19.639 --> 00:02:21.470
So we could actually change

00:02:21.470 --> 00:02:24.500
these minimum password to
something that will wish.

00:02:24.500 --> 00:02:27.200
Alternatively, we can
just let everyone access

00:02:27.200 --> 00:02:30.530
all the endpoints without
any restrictions.

00:02:30.530 --> 00:02:32.480
For that.

00:02:32.480 --> 00:02:36.150
I'm going to create new
security conflict file.

00:02:36.250 --> 00:02:43.530
I'll call it web security.

00:02:43.690 --> 00:02:46.865
Here we're going
to create a rule

00:02:46.865 --> 00:02:51.395
that would let everyone
to access a routing.

00:02:51.395 --> 00:02:56.310
I'm going to say
enable web security.

00:03:00.250 --> 00:03:03.720
I'm going to
override the method.

00:03:03.880 --> 00:03:06.830
But before that
this class needs to

00:03:06.830 --> 00:03:11.000
extend web security
configure adopter.

00:03:11.000 --> 00:03:15.360
This is all covered in
security chapter already.

00:03:16.000 --> 00:03:23.220
Security configured adopter.

00:03:23.530 --> 00:03:26.825
Let's override the method.

00:03:26.825 --> 00:03:31.340
Protected wide configure.

00:03:31.340 --> 00:03:34.850
And we went to pass
in one argument

00:03:34.850 --> 00:03:40.320
p security

00:03:42.700 --> 00:03:47.700
throws exception.

00:03:47.860 --> 00:03:50.780
And inside here,
I'm going to use

00:03:50.780 --> 00:03:54.815
that object to
configure our security.

00:03:54.815 --> 00:04:03.300
I'm going to say authorized
requests matters.

00:04:04.240 --> 00:04:09.350
When to provide reg ex.

00:04:09.350 --> 00:04:12.995
I'd like to allow
literally all the URLs.

00:04:12.995 --> 00:04:15.900
I'm going to say permit.

00:04:17.290 --> 00:04:20.945
This statement will allow
everyone to access everything

00:04:20.945 --> 00:04:22.710
without restrictions
or without having

00:04:22.710 --> 00:04:24.709
to enter username and password.

00:04:24.709 --> 00:04:26.060
If you don't do this,

00:04:26.060 --> 00:04:28.100
then every time you
send the request,

00:04:28.100 --> 00:04:30.575
you'll be asked to enter
the username and password,

00:04:30.575 --> 00:04:32.495
which might be annoying.

00:04:32.495 --> 00:04:37.040
One additional thing we need
to do is to disable CSRF.

00:04:37.040 --> 00:04:39.450
It is enabled by default.

00:04:40.000 --> 00:04:43.745
We've already talked about CSRF,

00:04:43.745 --> 00:04:46.205
Cross-Site Request
Forgery attacks

00:04:46.205 --> 00:04:48.815
in our previous courses.

00:04:48.815 --> 00:04:52.260
Let's disable it for now.

00:04:52.840 --> 00:04:55.790
That's all there is to it.

00:04:55.790 --> 00:04:59.315
We now have all the Spring
security features in place.

00:04:59.315 --> 00:05:01.490
The next thing we
need to do is to

00:05:01.490 --> 00:05:03.755
enable encryption
and decryption.

00:05:03.755 --> 00:05:05.090
And that's what
we're going to take

00:05:05.090 --> 00:05:07.500
a look at in our next video.
