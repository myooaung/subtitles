1
00:00:05,460 --> 00:00:12,570
Hi, guys, in this lesson, we will create user service in spring, there is a cycle in model service

2
00:00:12,570 --> 00:00:13,660
controller structure.

3
00:00:13,860 --> 00:00:17,490
First of all, this great model can assess these model classes.

4
00:00:17,490 --> 00:00:22,710
Are entities later create repositories for these classes?

5
00:00:23,010 --> 00:00:31,140
These replacer classes are persistance classes later called these repositories from services.

6
00:00:31,410 --> 00:00:40,230
These services will be our business logic finally called services from controllers and these controllers

7
00:00:40,470 --> 00:00:42,270
will be our access point.

8
00:00:42,900 --> 00:00:48,600
So in the previous lesson, we described our user repository in this lesson.

9
00:00:48,600 --> 00:00:50,700
We will call it from Serb's.

10
00:00:51,330 --> 00:01:00,930
Our service class will include basic krot methods about user like save user delete, user finta, user

11
00:01:00,930 --> 00:01:07,800
change, user roll, etc. Let's implement them one by one to do it.

12
00:01:07,800 --> 00:01:10,800
First of all, we will create a service class.

13
00:01:11,520 --> 00:01:14,790
First of all, let's create a new package under our main package.

14
00:01:14,790 --> 00:01:16,350
Our name will be service.

15
00:01:16,770 --> 00:01:23,670
Under the service package, we will create a user service interface and under the service package we

16
00:01:23,670 --> 00:01:26,340
will create a user service implementation class.

17
00:01:28,740 --> 00:01:37,020
And these user service implementation will implement user service to define user service as a service

18
00:01:37,020 --> 00:01:38,730
class, we will add service.

19
00:01:38,730 --> 00:01:46,380
In addition to it, the Martine's with their service in addition to indicate that it's holding the business

20
00:01:46,380 --> 00:01:47,810
logic or service layer.

21
00:01:47,940 --> 00:01:53,680
So user service will keep business logic operations for the user later.

22
00:01:53,700 --> 00:01:58,200
We will call user repository for dependency injection.

23
00:01:58,200 --> 00:02:00,420
We can use autopilot insipient.

24
00:02:00,660 --> 00:02:03,000
OK, now we can create our methods.

25
00:02:03,570 --> 00:02:08,680
Our first method will be save users to save users.

26
00:02:08,760 --> 00:02:11,690
We can call user repository dot save method.

27
00:02:12,480 --> 00:02:17,150
But here, first of all, let's describe the default properties of the user.

28
00:02:17,460 --> 00:02:19,650
Then we can save the users.

29
00:02:20,700 --> 00:02:27,480
First of all, we should encode passwords to store passwords with clear text anyway.

30
00:02:27,480 --> 00:02:29,460
That is not a secure way.

31
00:02:29,760 --> 00:02:31,920
So how can we handle it?

32
00:02:32,550 --> 00:02:37,230
We can store it with harshing sibling security presence.

33
00:02:37,250 --> 00:02:41,700
A lot of encoding or hashing algorithms here.

34
00:02:41,700 --> 00:02:45,420
We can use any encoding algorithm that we want.

35
00:02:46,350 --> 00:02:54,900
For example, here we can use decrypt password encoded it uses to decrypt strong caching function.

36
00:02:55,170 --> 00:03:04,050
It also uses salt video to generate encoding passwords and it produces passwords that are hard to crack.

37
00:03:04,980 --> 00:03:10,050
In Sprink, we can describe Beanz under the configuration classes.

38
00:03:10,650 --> 00:03:18,360
For now we have the main class as a configuration class so we can describe it under the main class.

39
00:03:27,930 --> 00:03:37,440
Done from the user service, we can inject it with autosite annotation and we can encode the user password.

40
00:03:45,880 --> 00:03:55,300
Later, we will set our password with password encoder, that anchored user that get passwords as a

41
00:03:55,300 --> 00:03:55,870
parameter.

42
00:04:02,600 --> 00:04:08,180
Then we will set the default roll of the users, default roll will be users.

43
00:04:14,150 --> 00:04:24,650
Then we can set Crede state of the user data and we can call the user repository save Matt.

44
00:04:38,240 --> 00:04:43,040
OK, that's all about the same at our second method.

45
00:04:43,060 --> 00:04:45,830
We'll be fine, too, user by username.

46
00:04:46,550 --> 00:04:53,060
We can directly call it from user repository because we describe it before.

47
00:05:10,680 --> 00:05:20,670
Our last method will be to change the default user role, to admit we will expect a user I.D. as a parameter.

48
00:05:21,360 --> 00:05:25,140
Then we can directly call it from the repository.

49
00:05:28,890 --> 00:05:32,520
Here, we will update the U.S. role as admin.

50
00:05:39,940 --> 00:05:49,540
In Sprink, transaction is required when executing an update or delete query, so here we should add

51
00:05:49,540 --> 00:05:53,710
transactional annotation also on method level.

52
00:05:57,690 --> 00:06:01,780
OK, that's all about user service implementation.

53
00:06:02,310 --> 00:06:02,790
Thank you.
