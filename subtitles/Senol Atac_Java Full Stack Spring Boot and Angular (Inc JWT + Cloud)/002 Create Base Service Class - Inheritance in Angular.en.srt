1
00:00:05,620 --> 00:00:14,230
Hi, guys, in this lesson, we will implement the request based service, we will use JWT for authorization

2
00:00:14,410 --> 00:00:21,610
and we need to send this authorization for most of the requests that need authorization.

3
00:00:22,100 --> 00:00:31,000
OK, we didn't use it for login and register endpoints because they are public end points, but Facebook

4
00:00:31,000 --> 00:00:33,790
and points and purchase at points.

5
00:00:34,180 --> 00:00:42,610
We should send JWT authorization with the HTTP request, so we're sending authorization in.

6
00:00:42,610 --> 00:00:50,620
The request will be a common case so we can create a base class and we can describe such kinds of common

7
00:00:50,620 --> 00:00:52,090
methods in this class.

8
00:00:52,390 --> 00:00:55,800
Then I can extend it from the other classes.

9
00:00:57,160 --> 00:01:06,460
I say that extension and base class because in Angler we can use abstract classes and inheritance.

10
00:01:07,000 --> 00:01:13,260
Actually we will benefit from these concepts and we will implement our classes.

11
00:01:13,600 --> 00:01:16,600
Now let's implement our basic request class.

12
00:01:18,010 --> 00:01:21,690
We can create a service class with the and generate comment.

13
00:01:22,330 --> 00:01:28,600
Our comments will be engy generate service and service need.

14
00:01:29,080 --> 00:01:39,400
Our service name will be request based, but I'll create it under the services folder so I'll specify

15
00:01:39,400 --> 00:01:46,800
it like services request base and it will create our service class.

16
00:01:48,130 --> 00:01:49,600
Now I'll open it.

17
00:01:50,980 --> 00:01:57,040
First of all, it will be an abstract class so I don't create instances from it.

18
00:01:57,580 --> 00:02:00,760
I just use it as a base class.

19
00:02:01,000 --> 00:02:09,340
Then we need a current user object because we need the JWT token value of the user and we can reach

20
00:02:09,340 --> 00:02:11,350
it from the user object.

21
00:02:14,490 --> 00:02:21,180
By the way, we can use protected as access modified because this object can be accessible from other

22
00:02:21,180 --> 00:02:27,400
extended classes, then we can inject our services on the constructor.

23
00:02:27,720 --> 00:02:31,890
First of all, we will use authentication service to get the current user.

24
00:02:38,880 --> 00:02:44,970
Secondly, we will need HDB Clines because we will use it to send Gests.

25
00:02:48,960 --> 00:02:55,380
In this constructor, we will set the current user from the authentication service and we should get

26
00:02:55,380 --> 00:03:02,040
the current user from the authentication service as an observable because whenever it's value chains

27
00:03:02,340 --> 00:03:05,460
on the request based service, we want to catch it.

28
00:03:06,140 --> 00:03:11,580
It is Auxerre also to get it, we should listen to it with the subscribe function.

29
00:03:12,180 --> 00:03:19,680
And this function will be triggered when there is a change on the current user inside it.

30
00:03:19,740 --> 00:03:23,870
We will set the common data to our current user variable.

31
00:03:25,170 --> 00:03:27,600
Then we will create our HTP header.

32
00:03:28,050 --> 00:03:34,940
It has a get modified and it will be a HTP Hadass instance.

33
00:03:35,370 --> 00:03:43,470
So as a return value we will create an HDD beheaders object in the HDD beheaders object.

34
00:03:43,800 --> 00:03:47,610
We can send different properties in T value format.

35
00:03:48,150 --> 00:03:51,330
Here we need two basic properties.

36
00:03:51,700 --> 00:03:59,010
Our first property will be authorization and we will send it with the beta prefix.

37
00:03:59,880 --> 00:04:04,020
We will send the token very of the user in the authorization header.

38
00:04:04,980 --> 00:04:07,770
It is a JWT token here.

39
00:04:07,890 --> 00:04:13,090
We can also add another check before getting the token value from current users.

40
00:04:13,860 --> 00:04:17,070
Our second property will be content type.

41
00:04:17,640 --> 00:04:19,680
We will send it as Jayton.

42
00:04:31,830 --> 00:04:33,310
OK, that's all.

43
00:04:33,360 --> 00:04:33,840
Thank you.
