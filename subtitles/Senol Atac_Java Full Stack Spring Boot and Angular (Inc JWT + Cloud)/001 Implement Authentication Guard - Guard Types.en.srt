1
00:00:05,840 --> 00:00:13,970
Hi, guys, in this lesson, we will implement an authentication route guard class, route guards help

2
00:00:13,970 --> 00:00:19,610
us to prevent users from accessing a certain part of the application without proper authorization.

3
00:00:20,030 --> 00:00:24,230
In addition, route cards are used to secure the routes.

4
00:00:24,740 --> 00:00:27,490
We can think of it on an easy example.

5
00:00:27,680 --> 00:00:34,040
For example, if we want to show some pates for some users that has some specific rules.

6
00:00:34,340 --> 00:00:36,920
For example, we have an admin page.

7
00:00:37,280 --> 00:00:45,560
We want to show this page for only admin users to provide it, we will benefit from angular guard.

8
00:00:46,010 --> 00:00:54,650
There are several types of cards so we can implement it in different ways, can activate checks to see

9
00:00:54,650 --> 00:01:01,580
if a user can visit a route, which means, for example, we have an admin page, we can add admin role

10
00:01:01,580 --> 00:01:04,880
restrictions on this path with can activate.

11
00:01:05,390 --> 00:01:10,730
And only if the user has admin role, these path can be activated.

12
00:01:11,120 --> 00:01:20,390
Second guard type is canActivateChild,  canActivateChild checks if the user can access the route's children

13
00:01:20,900 --> 00:01:23,840
a pad can have multiple segments.

14
00:01:24,110 --> 00:01:31,070
For example, we can think of a path like user's idea of user details.

15
00:01:31,460 --> 00:01:36,680
For this example, we can create access restriction for main path.

16
00:01:36,800 --> 00:01:41,570
So I mean, for our example, it is users also.

17
00:01:41,570 --> 00:01:44,990
We can create access restriction for us children.

18
00:01:45,260 --> 00:01:55,520
So I mean, for our example, it can users select idea of users or users, select idea of users details

19
00:01:55,880 --> 00:01:58,110
to restrict these routes.

20
00:01:58,160 --> 00:02:01,580
Children we can use can activate child guard.

21
00:02:01,910 --> 00:02:12,080
So if we need to run a guard, then only the child round changes we need to use can activate child. Third gurad

22
00:02:12,100 --> 00:02:14,690
type is canLoad.

23
00:02:15,200 --> 00:02:21,290
It is directly related with lazy loading, so actually the name of it comes from there.

24
00:02:21,500 --> 00:02:29,210
So we can protect a lot of components with the can load ga type canLoad protects the route completely.

25
00:02:29,420 --> 00:02:32,800
If you are going on with lazy load you can use it.

26
00:02:33,110 --> 00:02:35,840
Another guard type is canDeactivate.

27
00:02:36,290 --> 00:02:40,670
It is related to the activity of the page so canDeactivate.

28
00:02:40,910 --> 00:02:46,280
Makes sure that I use it is really sure that he is exiting the route.

29
00:02:46,580 --> 00:02:55,160
For example, I assume that we have a page like EDIT and the user made some changes on the page that

30
00:02:55,160 --> 00:03:00,530
he tried to leave from the page or he tried to get away from the lot.

31
00:03:01,040 --> 00:03:08,960
In this case, we can stop or warn the user with an alert and prompt thanks to can deactivate guard.

32
00:03:09,920 --> 00:03:18,130
And we can say that, hey, are you sure you want to leave this particular out so I can deactivate provides

33
00:03:18,140 --> 00:03:19,940
this kind of guard for us.

34
00:03:20,390 --> 00:03:24,830
OK, now we can implement it and let's see an example of it.

35
00:03:24,830 --> 00:03:30,470
In our case, we can create cards with the end comment to create a card component.

36
00:03:30,620 --> 00:03:35,390
We will use ng generate guard and guard-name.

37
00:03:35,780 --> 00:03:38,150
Our guard name can be authentication.

38
00:03:39,600 --> 00:03:48,840
And we can create it under the guards folder when we try to create it, ng presents guard types, which

39
00:03:48,840 --> 00:03:52,530
interfaces would you like to implement here?

40
00:03:52,530 --> 00:03:54,700
We can implement, can activate.

41
00:03:55,200 --> 00:03:56,820
We don't have a child, right.

42
00:03:57,150 --> 00:03:58,580
So we don't need it.

43
00:03:58,980 --> 00:04:03,680
We don't have editing or similar pages, so we don't need constructor.

44
00:04:03,690 --> 00:04:07,770
It also can load is related to laser loading.

45
00:04:07,860 --> 00:04:10,230
We don't have it lazy loading guard also.

46
00:04:10,650 --> 00:04:12,180
Then I'll hit.

47
00:04:12,480 --> 00:04:20,730
enter the authentication guard is an angular route guard that's used to prevent unauthorized users from accessing

48
00:04:20,730 --> 00:04:21,780
restricted routes.

49
00:04:22,320 --> 00:04:26,190
In our case, we will implement one type of it.

50
00:04:27,150 --> 00:04:36,510
It is can activate to implement it, we will use the authentication card, plus when we look at the

51
00:04:36,510 --> 00:04:41,960
credit card class, we will see an important decorator's that is injectable.

52
00:04:42,300 --> 00:04:49,920
The injectable decorator specifies that angular can use this glass in the dependency injection system.

53
00:04:50,490 --> 00:04:57,420
The metadata provided in the root means that the authentication guuard is visible throughout the application.

54
00:04:58,140 --> 00:05:05,820
First of all, we need the current user object because I want to restrict paths according to user rules.

55
00:05:05,970 --> 00:05:09,000
So we need to reach the role of user.

56
00:05:09,570 --> 00:05:13,470
Then we can inject our services on the constructor.

57
00:05:13,980 --> 00:05:18,040
First of all, we will use authentication service to get the current user.

58
00:05:18,510 --> 00:05:24,660
Secondly, we need ratas service because according to restriction, we will need to navigate to not

59
00:05:24,660 --> 00:05:27,360
phonte or unauthorized or login page.

60
00:05:28,110 --> 00:05:34,520
In this constructor, we will set the current user from the authentication service and we should get

61
00:05:34,530 --> 00:05:41,280
current user from the authentication service as observable, because whenever it's really a change on

62
00:05:41,280 --> 00:05:43,800
the old guard, we want to catch it.

63
00:05:44,550 --> 00:05:45,620
It is observable.

64
00:05:45,630 --> 00:05:50,220
So to get it, we should listen to it with the subscribe function.

65
00:05:50,850 --> 00:05:59,700
And this subscribe function will be triggered when there is a change on the current user inside it,

66
00:05:59,790 --> 00:06:07,810
we will set the common data to our current user variable, then we will overwrite the ten activate method.

67
00:06:07,830 --> 00:06:11,490
But first of all, let's talk about how we can implement it.

68
00:06:11,970 --> 00:06:17,710
First of all, can activate card will work for users that are signed in.

69
00:06:18,150 --> 00:06:25,470
So if the result has can activate restriction and not sign in, then he will be redirected.

70
00:06:25,740 --> 00:06:26,470
Login page.

71
00:06:26,880 --> 00:06:35,370
Secondly, the user can be signed in, but the result is special to some rules and the user might not

72
00:06:35,370 --> 00:06:37,170
have this specific role.

73
00:06:37,680 --> 00:06:45,120
In that case, we will display the unauthorized page because the user tries to access the unauthorized

74
00:06:45,120 --> 00:06:45,620
page.

75
00:06:45,930 --> 00:06:47,910
So the architecture will be like that.

76
00:06:48,270 --> 00:06:55,610
Each year old will have a role attribute that describes which rules can access the road and can activate

77
00:06:55,610 --> 00:07:03,930
it, will work under the hood and catch tense, then checks the access rights of the route and checks

78
00:07:03,930 --> 00:07:06,560
the current user role with the route role.

79
00:07:07,020 --> 00:07:14,720
If the rules match for current user and role, this may not otherwise show the unauthorized page.

80
00:07:15,420 --> 00:07:17,280
OK, now we can implement it.

81
00:07:17,850 --> 00:07:20,190
First of all, let's check current user.

82
00:07:20,520 --> 00:07:27,000
If the user is available, there are ten to activate it, otherwise it cannot be displayed.

83
00:07:27,480 --> 00:07:36,060
So if the road has connectivity restriction and not signed in, then he will be redirected to the login

84
00:07:36,060 --> 00:07:36,360
page.

85
00:07:37,560 --> 00:07:39,660
Then I'll check the roll restriction.

86
00:07:39,660 --> 00:07:43,800
But first of all, I should add rule restrictions on routes.

87
00:07:44,340 --> 00:07:48,860
So first of all, we need to know which page can be seen by each role.

88
00:07:49,380 --> 00:07:55,350
So first of all, we should describe them on the approaching module for each brought.

89
00:07:55,800 --> 00:08:03,780
Let's open the app routing module, then we can describe roles for each relative login register and

90
00:08:03,810 --> 00:08:07,770
home rotters will be public so everybody can reach them.

91
00:08:07,950 --> 00:08:10,020
So we don't need the guard.

92
00:08:10,170 --> 00:08:18,300
Then the provider can be accessible by authenticated users that have admin or user roles.

93
00:08:18,660 --> 00:08:24,420
So to describe it, we should add, can activate property as authentication.

94
00:08:24,420 --> 00:08:30,510
guard also we should describe rules with data rules property.

95
00:08:31,290 --> 00:08:35,490
By the way, the rules field will be an error like we see in our case.

96
00:08:42,300 --> 00:08:49,440
The admin roles should be accessible by authenticated users that have the admin role, so to describe

97
00:08:49,440 --> 00:08:53,850
it, we should add, can activate property as authentication guard.

98
00:08:59,500 --> 00:09:06,790
Also, we should describe rules with data rules, property here, we describe the data format like this,

99
00:09:07,180 --> 00:09:10,360
then we will reach it from the authentication guard glass.

100
00:09:10,360 --> 00:09:18,910
Also like this error, our public pates so everybody can reach them so we don't need to guard that them.

101
00:09:19,510 --> 00:09:25,660
OK, now we can return to authentication, but then we can hook up with these routes.

102
00:09:26,380 --> 00:09:27,910
In the can activate method.

103
00:09:28,210 --> 00:09:35,650
We will check the role of the current user according to route roles, if the user is not authorized

104
00:09:35,650 --> 00:09:41,400
to display the route, then redirect it to unauthorized for hundreds.

105
00:09:41,470 --> 00:09:42,190
One page.

106
00:09:50,020 --> 00:09:58,480
And return as unauthorized force, which means this user has no access to see this page, otherwise

107
00:09:58,660 --> 00:09:59,650
return to the.

108
00:10:16,990 --> 00:10:24,630
OK, that's all about what you've got now let's reload the changes on the browser, then we can test

109
00:10:24,640 --> 00:10:24,820
it.

110
00:10:34,720 --> 00:10:42,340
First of all, when we try to access the admin or profile page with the not signing user, we shall

111
00:10:42,350 --> 00:10:43,720
see the login page.

112
00:10:44,320 --> 00:10:51,850
Secondly, if they log in the application with the user at all, then then accessed the admin that we

113
00:10:51,850 --> 00:10:54,040
should get an unauthorized error.

114
00:10:58,500 --> 00:11:04,440
Thirdly, we can check it for the admin role, it can access all rot's.

115
00:11:16,130 --> 00:11:18,120
OK, everything looks perfect.

116
00:11:18,440 --> 00:11:19,280
That's all.

117
00:11:19,460 --> 00:11:19,970
Thank you.
