WEBVTT
1

00:00:05.790 --> 00:00:12.190

Hi, guys, in this lesson, we will test our API at points with postmen.



2

00:00:13.200 --> 00:00:17.750

Actually, we have completed our server side project.



3

00:00:18.330 --> 00:00:22.090

Now we will test application at points one by one.



4

00:00:22.650 --> 00:00:27.210

First of all, we will start our application from the main class.



5

00:00:28.500 --> 00:00:33.190

Then we will open horstmann if it is not yet done.



6

00:00:33.210 --> 00:00:41.640

Firstly, we can test, sign up and sign in and points for HTTP request debugging.



7

00:00:41.790 --> 00:00:44.310

Faustman is a really great tool.



8

00:00:44.730 --> 00:00:49.710

We can set methods easily, we can set authorisation easily.



9

00:00:49.980 --> 00:00:59.790

We can create custom headers easily, we can set request by the easily, etc. We can create two different



10

00:00:59.790 --> 00:01:04.890

users for different roles because we will have two basic roles.



11

00:01:05.520 --> 00:01:08.850

These are user and admin.



12

00:01:16.420 --> 00:01:22.330

After sign in operation, we will have a JWT token.



13

00:01:35.280 --> 00:01:39.720

And these Tolkan will be used by other requests.



14

00:01:42.450 --> 00:01:49.650

Now we can test internal API and point, actually, we will have a single answer point for internal



15

00:01:49.650 --> 00:01:53.350

API that is made at any point.



16

00:01:54.240 --> 00:01:59.970

We will send that port request with user name and authorization.



17

00:01:59.970 --> 00:02:06.810

Valid authorization video can be found from under the application properties.



18

00:02:13.550 --> 00:02:25.100

Now our test users are ready, we have two different users, one of them is users and another one is



19

00:02:25.250 --> 00:02:25.760

Esmie.



20

00:02:26.720 --> 00:02:37.610

Now we can test the book and points for book and points save and the lead operations can only be performed



21

00:02:37.610 --> 00:02:38.720

by admins.



22

00:02:39.140 --> 00:02:45.090

So if they called them with the user role, they won't be triggered.



23

00:02:45.680 --> 00:02:48.460

We will get forbidden error.



24

00:02:49.910 --> 00:02:53.560

We should send the form data in JSON format.



25

00:02:54.260 --> 00:03:03.680

We can create random content and we can write something in here because our purpose is to test the endpoints.



26

00:04:44.340 --> 00:04:52.650

Getting all Worx and Point is accessible by everyone, so we don't need to send an authorization header



27

00:04:52.650 --> 00:04:53.010

for it.



28

00:05:02.810 --> 00:05:13.400

Now we can test purchase history and points our first and point beilby save purchase history, we will



29

00:05:13.400 --> 00:05:20.720

Santore post request and the API part will be API purchase history.



30

00:05:26.980 --> 00:05:39.520

Then we will stand firm data as Jason content, we can find the user I.D. and book ideas from premise



31

00:05:39.820 --> 00:05:44.980

and points because we have created books and users.



32

00:06:34.520 --> 00:06:44.540

Then we will test the getting all purchases of the user and point this will be I get test here, the



33

00:06:44.540 --> 00:06:48.680

result will be changed according to the authorized user.



34

00:06:55.410 --> 00:07:04.170

OK, are all and points are working like we want, finally, we can create a read me file and we can



35

00:07:04.170 --> 00:07:13.980

not example and points on these red MiFi because if we need end points later, we can find them easily.



36

00:07:14.970 --> 00:07:23.700

Also, Posman provides code snippets for requests so we can find the example requests from Horstmann



37

00:07:23.700 --> 00:07:24.170

easily.



38

00:07:25.350 --> 00:07:29.340

Then we will create and point examples one by one.



39

00:07:29.880 --> 00:07:35.010

The Read Me files supports code blocks and different header sites.



40

00:07:35.400 --> 00:07:37.230

We can easily customize that.



41

00:07:38.190 --> 00:07:41.370

We can use different court styles on post none.



42

00:07:41.610 --> 00:07:47.930

But for us the HTTP request will be the best option for us.



43

00:08:36.820 --> 00:08:37.640

That's all.



44

00:08:38.230 --> 00:08:38.800

Thank you.

