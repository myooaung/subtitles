WEBVTT
1

00:00:05.030 --> 00:00:12.320

Hi, guys, in this lesson, we will build and create a server to serve our application on the production,



2

00:00:12.680 --> 00:00:22.420

we can serve our application on the localhost with and serve, but this is not effective on the production.



3

00:00:22.820 --> 00:00:25.270

In that case, there are a couple of problems.



4

00:00:25.550 --> 00:00:30.850

First problem is that here we have a quite large number of files.



5

00:00:30.860 --> 00:00:41.170

For example, we have a node module folder and this folder includes more than a thousand files and and



6

00:00:41.240 --> 00:00:46.100

the total size of this folder is more than 200 megabytes.



7

00:00:47.270 --> 00:00:49.670

Secondly, we have large bundles.



8

00:00:49.850 --> 00:00:57.620

When the Iran and server comment on the terminal, we can see the bundle sizes and they look so big,



9

00:00:57.950 --> 00:01:00.820

especially Vandervoort James.



10

00:01:01.730 --> 00:01:06.710

So in the production, we should get rid of such kind of problems.



11

00:01:07.010 --> 00:01:12.230

Actually, ANGULAR provides it for us when we build the application.



12

00:01:12.350 --> 00:01:18.340

Angular uses that peek under the hood and creates compact bundles.



13

00:01:19.370 --> 00:01:22.370

But here there are a lot of unknown things.



14

00:01:22.910 --> 00:01:25.010

Let's get deep into them.



15

00:01:25.340 --> 00:01:33.770

First of all, we have lots of JavaScript, HTML and CeaseFire's in our application here.



16

00:01:33.980 --> 00:01:35.060

Angular modes.



17

00:01:35.270 --> 00:01:44.930

All the scripts into a single script file magnifies the files and removes the components and removes



18

00:01:44.930 --> 00:01:48.890

the commands and removes the spaces, etc..



19

00:01:49.850 --> 00:01:54.970

So these are typical bundling and magnification techniques.



20

00:01:55.790 --> 00:02:01.490

When I say bundle, each bundle is a combination of multiple Josephites.



21

00:02:01.640 --> 00:02:09.500

Without these bundles, if we want to serve our application, the client should send the launch requests



22

00:02:09.710 --> 00:02:10.850

for each file.



23

00:02:10.850 --> 00:02:13.820

And this is very inefficient.



24

00:02:14.240 --> 00:02:22.760

With bundles, the client can get a large portion of application code using one HTTP request.



25

00:02:23.100 --> 00:02:32.810

So if we summarize it, Angular complies, merge and clears the courts and creates bundles from them.



26

00:02:33.110 --> 00:02:36.920

Of course, to do it, Anjelah uses Bebek under the hood.



27

00:02:37.280 --> 00:02:46.760

So we're back pex these sources at the end of it, we have efficient sources and this will have a significant



28

00:02:47.000 --> 00:02:49.970

improvement in the performance of our application.



29

00:02:50.300 --> 00:02:57.820

We can apply all these techniques and performance improvements using a single comment with Angular Saili.



30

00:02:58.010 --> 00:03:05.840

So when we build our application using angular Saili in a production mode, angular Haylie will produce



31

00:03:05.930 --> 00:03:14.600

highly optimized bundles and then we can simply deploy these files to a non development mission.



32

00:03:14.990 --> 00:03:23.870

Only we need not Jass now we can build it easily from our application to build it.



33

00:03:24.020 --> 00:03:35.180

We can directly call it from the console like Engy Beeld plus configuration production or we can create



34

00:03:35.180 --> 00:03:42.560

a script for it under the package JSON, then we can run it with the NPM comment here.



35

00:03:42.560 --> 00:03:45.520

We will call this comment later on the cloud.



36

00:03:45.830 --> 00:03:50.660

So we need a script so we can write a script for it.



37

00:03:51.620 --> 00:03:56.570

Let's open the package JSON and I'll create a new script.



38

00:03:56.570 --> 00:04:01.610

As Beeld Dash brought here.



39

00:04:01.730 --> 00:04:11.300

We can call Engy comment or we can call it from the node modules because Engy Command is a local command.



40

00:04:11.300 --> 00:04:20.180

So when we deploy it to the cloud, maybe the cloud mission might not have any comment by default.



41

00:04:20.420 --> 00:04:24.800

So the best way is to call it from under the node modules.



42

00:04:25.100 --> 00:04:31.640

We can do it with the NPM being prefix, then build configuration production.



43

00:04:39.260 --> 00:04:50.690

OK, our script is ready now, we can call it like AMPM Run built this plot and it will take care of



44

00:04:50.690 --> 00:04:50.990

it.



45

00:04:54.270 --> 00:05:02.970

It can take a couple of seconds when it is completed, we will have at least folder under the application.



46

00:05:09.320 --> 00:05:17.120

When it is completed, we will have a least folder under the application when we check it, we can see



47

00:05:17.120 --> 00:05:28.220

some bundles and indexed that HTML and specify and that's all actually they need only D.



48

00:05:28.580 --> 00:05:32.120

D folder to serve our application.



49

00:05:32.360 --> 00:05:35.090

But now we have another problem.



50

00:05:35.570 --> 00:05:42.970

How can we serve these this folder if we check the index at HDMI?



51

00:05:43.730 --> 00:05:49.100

So when we try to open it on the browser index, that e-mail doesn't work.



52

00:05:49.560 --> 00:05:52.580

So to serve it, we need the server.



53

00:05:53.600 --> 00:05:58.070

Why doesn't it work like a typical HTML page?



54

00:05:58.340 --> 00:06:01.700

Because this is not a typical HDMI form.



55

00:06:01.970 --> 00:06:03.830

This is a node project.



56

00:06:04.070 --> 00:06:08.330

And to serve another project, we need a server.



57

00:06:08.810 --> 00:06:16.370

This server will be server that these folders and handle bundle scripts under the application.



58

00:06:16.820 --> 00:06:25.580

We can handle it with several servers like Server that JSC, express that G.S., etc..



59

00:06:26.060 --> 00:06:34.490

Most common one is expressed that just so we can use it here once we are going to use is the server,



60

00:06:34.640 --> 00:06:38.300

which is a lightweight server to help us serve our application.



61

00:06:39.050 --> 00:06:40.370

Let's install it.



62

00:06:42.420 --> 00:06:46.470

We can install it like NPM, install, xpress.



63

00:06:50.350 --> 00:06:58.990

Now we need a script in jazz format to tell us what to do, let's create a file in our projects root



64

00:06:58.990 --> 00:07:05.910

directory are created like server that yes, it will be in JavaScript format.



65

00:07:11.120 --> 00:07:19.070

In server, that is, yes, we will basically say in the server that they just file what we are doing



66

00:07:19.070 --> 00:07:20.830

is using the express server.



67

00:07:22.040 --> 00:07:25.010

First of all, I'd import the express clause.



68

00:07:25.520 --> 00:07:32.560

Then I'll create an instance from the express clause and I'll call it as at.



69

00:07:37.330 --> 00:07:41.420

Then I create a variable for the root directory for my application.



70

00:07:42.760 --> 00:07:46.330

It will be the first application me.



71

00:07:55.950 --> 00:08:01.560

Then this app will serve all static files under this folder.



72

00:08:01.800 --> 00:08:10.500

So we have JavaScript bundles and CSI style files under that this folder, these all files will be served



73

00:08:10.590 --> 00:08:11.220

like that.



74

00:08:14.280 --> 00:08:23.120

Then wait for a request to any pet and redirect all of the requests to the index that estimate the Angler



75

00:08:23.120 --> 00:08:30.060

Rorter will handle which component should be shown to the user according to the pet they requested.



76

00:08:48.980 --> 00:08:57.860

Finally, some four richest at the port specified by system variables or the default port, which is



77

00:08:58.130 --> 00:08:59.480

80 81.



78

00:09:07.380 --> 00:09:14.430

OK, now we can test it, like I said before, this is not a jazz application anymore.



79

00:09:14.880 --> 00:09:16.710

Now we can test it.



80

00:09:17.100 --> 00:09:26.220

Like I said before, this is not jazz application, so we can run it within not let's go ahead and create



81

00:09:26.220 --> 00:09:32.850

a script for it in the package that Jason actually we have a script for it.



82

00:09:33.240 --> 00:09:44.910

We will just updated our script name is START, it looks like and serve in default, but we will change



83

00:09:44.910 --> 00:09:48.810

it like not so were that jazz.



84

00:09:50.820 --> 00:09:54.960

Did not, sir, were that George's comment with Ron?



85

00:09:55.260 --> 00:10:04.920

What is inside the server that just fine and we can check if there are any problems with our file before



86

00:10:04.920 --> 00:10:06.570

we deployed on the.



87

00:10:11.660 --> 00:10:18.950

For now, we don't specify the port number on system so we can reach it from the default port, so it



88

00:10:18.950 --> 00:10:26.120

is 80, 81 when we check it, the application looks like it is working.



89

00:10:26.670 --> 00:10:32.410

OK, now that we are sure the file is working correctly.



90

00:10:34.040 --> 00:10:39.290

OK, now we are ready for deployment, that's all.



91

00:10:39.500 --> 00:10:40.010

Thank you.

