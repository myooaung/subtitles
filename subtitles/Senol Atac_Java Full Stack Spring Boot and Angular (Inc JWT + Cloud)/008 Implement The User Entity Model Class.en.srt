1
00:00:05,860 --> 00:00:15,190
Hi, guys, in this lesson, we will create our model class for user user class, we will be a typical

2
00:00:15,340 --> 00:00:16,860
basic user class.

3
00:00:17,440 --> 00:00:23,690
It will store the user name, password, name and role of the user.

4
00:00:24,610 --> 00:00:31,900
We will use it for sign in and sign up operations to do it.

5
00:00:32,170 --> 00:00:38,740
First of all, let's create a new package under our main package or package.

6
00:00:38,740 --> 00:00:40,300
Name will be model.

7
00:00:42,360 --> 00:00:49,060
Under the model package, we will create the user class, user class.

8
00:00:49,080 --> 00:00:59,540
We'll have a database table relation and the user will be an to the class table name will be users.

9
00:01:00,270 --> 00:01:10,170
By the way, it cannot be user because user is a reserved that isn't covered by the PostgreSQL configuration

10
00:01:10,170 --> 00:01:10,800
tables.

11
00:01:11,670 --> 00:01:17,560
So we cannot use it in here when we say entity.

12
00:01:17,670 --> 00:01:21,150
This class will be a Zhuo persistance API entity.

13
00:01:21,570 --> 00:01:29,040
So Hibernate or JPA, we all know that this class is an entity here.

14
00:01:29,340 --> 00:01:31,040
Then we say table.

15
00:01:31,290 --> 00:01:41,670
This class is related to a database table and the name of the table is name property on the table annotation,

16
00:01:42,960 --> 00:01:43,770
for example.

17
00:01:44,250 --> 00:01:47,400
And the annotation also has name property.

18
00:01:48,030 --> 00:01:53,430
If we don't describe it, it will be the class name here.

19
00:01:53,460 --> 00:02:02,190
My point is we can represent our class with these entered name on JPA queries.

20
00:02:02,760 --> 00:02:10,370
On the other hand, in the database native queries, we represent it using table name.

21
00:02:10,620 --> 00:02:16,480
Actually, the difference between Arnst and table annotation is exactly this.

22
00:02:17,870 --> 00:02:22,280
OK, now we can return to the our class again.

23
00:02:23,250 --> 00:02:24,780
We will have an idea.

24
00:02:24,780 --> 00:02:34,160
Fields and idee will be the primary key and it will be an auto incremented generated value.

25
00:02:36,420 --> 00:02:45,900
The GPA specification supports for different primary key generation strategies which generate the primary

26
00:02:45,900 --> 00:02:53,310
key values programmatically, or use data base features like auto incremented columns or sequences.

27
00:02:54,720 --> 00:02:59,160
The generation type auto is the default generation type.

28
00:02:59,700 --> 00:03:05,930
It selects a generation strategy based on the database specific dialect.

29
00:03:06,540 --> 00:03:14,910
For example, my Eskil choose a second strategy, but if we use another database, it can be an identity

30
00:03:14,910 --> 00:03:15,570
strategy.

31
00:03:15,840 --> 00:03:19,350
So it totally depends on the database.

32
00:03:20,400 --> 00:03:23,900
Our second idea generator is identity.

33
00:03:24,690 --> 00:03:33,180
It relies on an auto incremented database column and lets the database generate a new value with each

34
00:03:33,180 --> 00:03:37,500
insert operation from a database point of view.

35
00:03:38,100 --> 00:03:47,670
This is very effective because the auto increment columns are highly optimized and it doesn't require

36
00:03:47,880 --> 00:03:49,530
any additional statements.

37
00:03:50,490 --> 00:03:53,500
Our third idea generator is second.

38
00:03:54,060 --> 00:03:58,190
It uses a database sequence to generate the primary key.

39
00:03:58,470 --> 00:04:05,010
It requires additional select statements to get the next venue from a database sitcom's.

40
00:04:05,670 --> 00:04:10,680
But this has no performance impact for most applications.

41
00:04:11,610 --> 00:04:15,030
Our last idea generator is table.

42
00:04:15,540 --> 00:04:23,970
It simulates a sequence by storing and updating its current video in a database table, which requires

43
00:04:23,970 --> 00:04:29,930
the use of pessimistic locks which put all transactions into sequential order.

44
00:04:30,630 --> 00:04:35,670
The slows down our application so it is not a preferrable generates.

45
00:04:36,660 --> 00:04:41,700
We need to implement it with you so we can use identity here.

46
00:04:44,240 --> 00:04:52,580
We will have a username, Velt, we can also relate this feel to be at the table column directly using

47
00:04:52,580 --> 00:05:00,080
Collomb annotation, for example, username should be unique so we can directly say that we are Collum

48
00:05:00,080 --> 00:05:00,640
annotation.

49
00:05:01,520 --> 00:05:06,350
Also, we can set the nullable feature and length of the column.

50
00:05:14,630 --> 00:05:23,330
We will have a password fields, password fields will be not nullable fields, and also we can set the

51
00:05:23,330 --> 00:05:24,320
length of that.

52
00:05:32,650 --> 00:05:41,710
We will have a name field and name fields will be not nullable field, and also we can set the length

53
00:05:41,710 --> 00:05:42,340
of it.

54
00:05:48,600 --> 00:05:55,060
We will have a great time, fields, actually, we will store this field for logging purposes.

55
00:05:56,070 --> 00:05:58,410
It will also be not nullable field.

56
00:06:08,570 --> 00:06:15,440
Finally, we will have a role field, but the role field will be an immigration.

57
00:06:15,830 --> 00:06:22,100
So first of all, let's create it as an enumeration class under the model package.

58
00:06:24,310 --> 00:06:26,720
We will have three basic rules.

59
00:06:27,280 --> 00:06:31,690
These are user admin and system manager.

60
00:06:34,240 --> 00:06:41,800
User will be a basic default role, admin will be used for card operations, so if a user has admin

61
00:06:41,800 --> 00:06:46,020
role, the user can access the management of the book operations.

62
00:06:46,630 --> 00:06:49,810
And finally, we will have a system manager role.

63
00:06:50,140 --> 00:06:53,970
This role will be used for internal API operations.

64
00:06:54,460 --> 00:07:00,220
For example, if we want to change the user at all, we can do it with this role.

65
00:07:02,420 --> 00:07:05,150
Now we can call it from the user class.

66
00:07:06,550 --> 00:07:13,840
We will store the information on the database as a string, we can store the enumeration value on the

67
00:07:13,840 --> 00:07:15,520
database in two ways.

68
00:07:15,550 --> 00:07:17,070
One way is to store it.

69
00:07:17,260 --> 00:07:21,700
We are ordinal numbers or to store it, we are string value.

70
00:07:22,240 --> 00:07:24,070
The default type is Ordnung.

71
00:07:31,400 --> 00:07:38,280
Now our fields are ready, but they are private to access them.

72
00:07:38,600 --> 00:07:43,310
We shall describe the getter and setter for all of them.

73
00:07:44,540 --> 00:07:52,120
At this point, we will use Lumberg data annotation together, Setar equals and Hedgcock methods.

74
00:07:52,310 --> 00:07:56,300
We will use Lumberg data annotation, linework, data annotation.

75
00:07:56,480 --> 00:08:01,940
We'll handle Geter Setar equals and Hedgcock methods automatically.

76
00:08:03,200 --> 00:08:07,440
OK, we have just created our user model class.

77
00:08:07,850 --> 00:08:08,390
Thank you.
