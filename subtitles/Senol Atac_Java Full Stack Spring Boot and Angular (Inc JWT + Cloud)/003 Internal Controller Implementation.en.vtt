WEBVTT
1

00:00:05.680 --> 00:00:10.810

Hi, guys, in this lesson, we will implement internal API and.



2

00:00:12.730 --> 00:00:15.050

We will have only one end point.



3

00:00:15.370 --> 00:00:19.180

This will be made admin to do it.



4

00:00:19.550 --> 00:00:21.610

We will carry that controller class.



5

00:00:22.150 --> 00:00:28.920

Like we said in previous lessons in spring, there is a cycle in model view, controller structure.



6

00:00:29.380 --> 00:00:35.050

First of all, describe masterclasses later called model classes from Soroses.



7

00:00:35.410 --> 00:00:42.040

Finally, call services from controllers and controllers will return model classes.



8

00:00:42.640 --> 00:00:49.150

So in the previous lessons we described service methods to change admin.



9

00:00:49.780 --> 00:00:57.520

In this lesson we will call it from the controller and we will not rest API requests to do it.



10

00:00:57.670 --> 00:01:02.470

First of all, we will create a controller class under the controller package.



11

00:01:02.650 --> 00:01:12.430

We will create an internal API controller class to describe internal API controller as a controller



12

00:01:12.430 --> 00:01:13.000

class.



13

00:01:13.300 --> 00:01:16.600

We will add rest controller annotation to it.



14

00:01:17.290 --> 00:01:24.520

Rest controller annotation specifies the class as a restful web service, so the internal API controller



15

00:01:24.520 --> 00:01:28.600

class will have accessible endpoints with the rest API.



16

00:01:29.950 --> 00:01:38.530

Then we can add request mapping in addition to add prepared for all methods on internal API controllers.



17

00:01:39.160 --> 00:01:43.900

Actually, we have already described it in the security config class.



18

00:01:44.140 --> 00:01:47.590

It will be API slash internal.



19

00:01:49.360 --> 00:01:54.100

Later we will call user service for dependency injection.



20

00:01:54.340 --> 00:01:56.440

We can use authorized insipient.



21

00:01:57.100 --> 00:02:02.830

We need user service because we describe the make admin method in this service.



22

00:02:03.260 --> 00:02:06.670

OK, now we can create our API method.



23

00:02:07.240 --> 00:02:12.310

Our method will be the make admin method as a parameter.



24

00:02:12.370 --> 00:02:15.760

We will expect a user ID as a variable.



25

00:02:23.050 --> 00:02:31.390

It will be a put mapping and the API part will be API internal make Esmie.



26

00:02:40.880 --> 00:02:46.720

Then we will call the user service method and return it.



27

00:02:46.970 --> 00:02:48.770

OK, htp statis.



28

00:02:57.170 --> 00:03:02.340

OK, that's all about internal API controller implementation.



29

00:03:02.990 --> 00:03:08.030

Now we can test make admin methods from Postman.



30

00:03:08.750 --> 00:03:15.900

First of all, we should start our application from the main class, then we will open the postman.



31

00:03:17.030 --> 00:03:23.210

We can start our spring application in many ways, but the easiest way is to start from the main class.



32

00:03:23.420 --> 00:03:25.700

First of all, let's create the default user.



33

00:03:25.700 --> 00:03:35.480

For example, we can create a user as admin and the API part for our sign up method will be API authentication.



34

00:03:35.480 --> 00:03:44.930

Sign up actually be created already in previous lessons so we can use these sign up templates, then



35

00:03:44.930 --> 00:03:47.120

we can change the form data.



36

00:03:47.120 --> 00:03:54.500

Only in here we will change the name as admin, username as admin and password as admin.



37

00:03:55.310 --> 00:03:57.980

Then we will call the sign up method.



38

00:04:00.830 --> 00:04:03.160

Sign up result will be a user object.



39

00:04:03.860 --> 00:04:08.030

Then we can test the make admin endpoint.



40

00:04:13.230 --> 00:04:28.410

The API pads for make admin methods will be API internal, make admin plus user name, we can find it



41

00:04:28.410 --> 00:04:29.910

from the previous request.



42

00:04:31.260 --> 00:04:35.010

Our user name will be admin request.



43

00:04:35.010 --> 00:04:39.960

Nattered will be put mappings, then we call it.



44

00:04:39.960 --> 00:04:43.420

Without authorization, we will get an additional.



45

00:04:45.570 --> 00:04:54.390

Then if we sent our authorization with internal API key, our request will be handled successfully.



46

00:04:56.870 --> 00:05:00.480

Now we have an admin user, OK?



47

00:05:00.530 --> 00:05:02.470

Everything looks perfect.



48

00:05:04.760 --> 00:05:12.860

And finally, we can add the ETP called template of faith in the red meat fight for accessibility.



49

00:05:24.600 --> 00:05:26.550

OK, everything looks perfect.



50

00:05:26.580 --> 00:05:27.000

Thank you.

