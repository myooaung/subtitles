WEBVTT
1

00:00:05.730 --> 00:00:13.320

Hi, guys, in this lesson, we will implement the logging component and leave before we implement it.



2

00:00:13.680 --> 00:00:16.390

Let's talk about how we will handle it.



3

00:00:17.070 --> 00:00:20.370

First of all, the logging component will be a page.



4

00:00:20.580 --> 00:00:22.850

So we will carry the HDMI Leviev.



5

00:00:23.340 --> 00:00:28.310

We will carry that page like this to create this page.



6

00:00:28.500 --> 00:00:36.210

We will call authentication service methods and we will assign these service methods with HTML form



7

00:00:36.210 --> 00:00:36.620

data.



8

00:00:37.110 --> 00:00:40.110

So we describe the logging service methods.



9

00:00:40.110 --> 00:00:46.980

In one of the previous lessons in this lesson, we will use that method and we will assign it to the



10

00:00:47.190 --> 00:00:50.320

logging component in our login page.



11

00:00:50.610 --> 00:00:54.420

We will also use a user icon that comes from font.



12

00:00:54.420 --> 00:00:55.010

Awesome.



13

00:00:55.260 --> 00:00:57.900

So we will see the usage of font.



14

00:00:57.900 --> 00:00:58.580

Awesome.



15

00:00:58.800 --> 00:01:04.220

Also, like you see, it will be so similar to the register page.



16

00:01:04.410 --> 00:01:09.330

So to implement it we will benefit from the register page also.



17

00:01:09.780 --> 00:01:11.900

OK, now we can implement it.



18

00:01:12.240 --> 00:01:19.200

First of all, on the login page, we need a user object that will be used on the login form.



19

00:01:19.530 --> 00:01:27.000

Then we need an error message to display the errors that come from the login and point on server connection.



20

00:01:27.150 --> 00:01:30.960

And we need a font awesome icon for the user icon.



21

00:01:31.230 --> 00:01:38.310

We have described these three things on the register page before so we can directly copy and paste them



22

00:01:38.430 --> 00:01:39.110

from that.



23

00:01:40.700 --> 00:01:48.650

Then constructive and engy on inmates also will be the same with the register page, because we will



24

00:01:48.650 --> 00:01:56.750

use authentication service as dependency injection and we need our alter after successful login on the



25

00:01:56.750 --> 00:02:00.080

end on init method, we will check the session user.



26

00:02:00.170 --> 00:02:07.310

If there is an available session user, we will take direct to the profile page so we can copy and paste



27

00:02:07.310 --> 00:02:09.110

them also from the register page.



28

00:02:10.070 --> 00:02:12.650

Now we can create our login method.



29

00:02:12.980 --> 00:02:13.790

In this method.



30

00:02:13.790 --> 00:02:19.310

We will call the authentication service login method and we will handle response.



31

00:02:19.850 --> 00:02:23.440

We will send the user object as a perimeter.



32

00:02:23.720 --> 00:02:29.390

Of course, first of all, we will describe the user object we are looking for.



33

00:02:30.350 --> 00:02:32.930

We will handle it on the HDMI part.



34

00:02:34.640 --> 00:02:42.230

Then we will subscribe to the login function, because the login function is an observable item, if



35

00:02:42.230 --> 00:02:47.260

the login operation is completed successfully, we will get a response as data.



36

00:02:47.690 --> 00:02:53.530

If the mission is successfully completed, we can redirected to the profile page.



37

00:02:54.740 --> 00:02:57.590

Then I will implement the end of the block.



38

00:02:58.070 --> 00:03:01.640

If there is an error, we should set the error message.



39

00:03:01.910 --> 00:03:06.170

We can set it like username or password is incorrect.



40

00:03:12.400 --> 00:03:16.540

To debunk it, we can also write the error on the console.



41

00:03:17.990 --> 00:03:22.910

OK, that's all about Logan component controller implementation.



42

00:03:23.390 --> 00:03:29.420

Now they can implement HDMI content off the login page, on the login page.



43

00:03:29.660 --> 00:03:37.550

We will create a forum to get username and password from the input and we will submit this form with



44

00:03:37.550 --> 00:03:38.530

the login method.



45

00:03:39.050 --> 00:03:43.850

Actually, it will be similar to the registered page also.



46

00:03:44.210 --> 00:03:52.190

So we can copy and paste it from the register page, then we can edit the content that will make our



47

00:03:52.190 --> 00:03:52.970

job easy.



48

00:03:54.400 --> 00:04:02.020

After copying the contents here, our submit function will be looking on this page and we don't need



49

00:04:02.020 --> 00:04:04.880

the full name input field and the login page.



50

00:04:05.350 --> 00:04:08.260

We only need username and password.



51

00:04:08.620 --> 00:04:17.830

Our submit button name will be signed in on the login page and we will use the Subba linked to redirect



52

00:04:17.830 --> 00:04:19.860

to the registration page.



53

00:04:20.830 --> 00:04:25.870

We can change the text of the link as Crede and Nieve account.



54

00:04:26.950 --> 00:04:30.820

OK, now we can check the login page on the browser.



55

00:04:37.840 --> 00:04:44.230

When we take it, we have some missing style functions, other than that, it looks good.



56

00:04:47.370 --> 00:04:53.170

We should also copy the protesters style functions for the login page here.



57

00:04:53.280 --> 00:04:56.330

We can use these glasses in two ways.



58

00:04:56.550 --> 00:05:05.220

First one is we can duplicate it on the register that satisfied or we can describe these style functions



59

00:05:05.250 --> 00:05:08.450

in the global style fight in ANGULAR.



60

00:05:08.610 --> 00:05:16.890

If they describe style functions on the ties that satisfied we can reach down from all components.



61

00:05:17.340 --> 00:05:23.790

But the host or content style function is only related to the component.



62

00:05:24.150 --> 00:05:28.650

If we describe them in the global style fight, it doesn't work.



63

00:05:29.190 --> 00:05:33.080

OK, now let's check the result from the Brosset.



64

00:05:37.020 --> 00:05:38.310

It looks nice.



65

00:05:38.520 --> 00:05:46.140

We can test it with the user that we created on the registered test, if the logging operation is successfully



66

00:05:46.320 --> 00:05:50.370

completed, the profile page will be displayed as a result.



67

00:05:51.030 --> 00:05:51.700

OK.



68

00:05:51.750 --> 00:05:54.400

Everything looks perfect, that's all.



69

00:05:54.570 --> 00:05:55.110

Thank you.

