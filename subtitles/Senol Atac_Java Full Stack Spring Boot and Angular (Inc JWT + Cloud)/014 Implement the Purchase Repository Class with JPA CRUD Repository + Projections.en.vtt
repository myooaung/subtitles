WEBVTT
1

00:00:05.530 --> 00:00:13.900

Hi, guys, in this lesson, we will create our poster class for purchase history to do it under the



2

00:00:13.900 --> 00:00:18.430

repository package, we will create a purchase history repository interface.



3

00:00:22.200 --> 00:00:29.490

Purchase History Repository will extend G.P.A. repository J-P repositories and abstract laws implemented



4

00:00:29.490 --> 00:00:36.840

by skippering JPA repository with G.P.A. repository, SPRINK will handle basic database operations automatically



5

00:00:36.840 --> 00:00:40.680

like, say, updates, find biodegraded by idea, etc..



6

00:00:40.680 --> 00:00:48.690

We know already know these details because from the previous lessons also reports, it automatically



7

00:00:48.690 --> 00:00:50.940

generates queries from the method names.



8

00:00:51.630 --> 00:00:57.930

GBE repository has to generate parameters, first parameters for the middle class and the second parameter



9

00:00:57.930 --> 00:01:00.010

is for the idea of the middle class.



10

00:01:00.270 --> 00:01:06.260

So our middle class will be purchase history and our idea class will be long.



11

00:01:08.490 --> 00:01:14.620

Now we can create our custom queries if we want to find the purchase of the user.



12

00:01:15.000 --> 00:01:24.180

We can't find it directly with defined by user I.D. method, but this is only user I.D. and boogity.



13

00:01:24.630 --> 00:01:28.860

We want to find book titles also on results.



14

00:01:29.220 --> 00:01:34.340

So we want to also find a custom result in J-P repository.



15

00:01:34.350 --> 00:01:42.690

We can write custom queries and these queries can include table joints and the result of these queries



16

00:01:42.690 --> 00:01:45.790

can be custom objects to handle them.



17

00:01:46.110 --> 00:01:49.130

We can use projections on spring.



18

00:01:49.740 --> 00:01:56.350

We can create projection and spring directly map query results with a license.



19

00:01:57.380 --> 00:02:00.390

Now let's create our projection class.



20

00:02:00.810 --> 00:02:06.550

First of all, we will create a projection package under the repository package.



21

00:02:13.600 --> 00:02:23.560

Then I'll carry the purchase item projection interface in Sebring, we can describe projections with



22

00:02:23.560 --> 00:02:33.730

interfaces because for projections we only need GETER methods so we can easily handle it with an interface



23

00:02:35.170 --> 00:02:41.620

than our projection fields will be title price and purchase time.



24

00:02:42.580 --> 00:02:48.430

We will describe the GETER methods for each of them in our query.



25

00:02:48.640 --> 00:02:52.840

We should describe them one by one with ElÃ­as.



26

00:02:54.700 --> 00:02:57.340

Now we can create our query.



27

00:02:58.090 --> 00:03:02.380

We can create a method like find all purchases of use it.



28

00:03:03.100 --> 00:03:13.060

As a result, we will return a list of purchase item projections and we will expect use ridi as a parameter.



29

00:03:27.960 --> 00:03:38.040

On our equity, we will run the basic joint clearing our joint equity will be between Wuk and purchase



30

00:03:38.040 --> 00:03:38.560

history.



31

00:03:39.540 --> 00:03:44.460

We can use left join, then we will join them on book idee.



32

00:03:52.300 --> 00:03:59.370

Our weather condition will be on user ID and we will take it from the perimeter.



33

00:04:00.880 --> 00:04:09.790

Finally, we will return fields like we describe in the projection glass to match the field so we can



34

00:04:09.790 --> 00:04:10.600

use alias.



35

00:04:27.100 --> 00:04:36.100

Here, we will also need save purchase and delayed purchase, but the basic operations that are provided



36

00:04:36.100 --> 00:04:40.030

by JP reports are in default will be enough for us.



37

00:04:40.960 --> 00:04:44.200

OK, that's all about purchase history.



38

00:04:44.200 --> 00:04:45.380

Pusser implementation.



39

00:04:45.850 --> 00:04:46.360

Thank you.

