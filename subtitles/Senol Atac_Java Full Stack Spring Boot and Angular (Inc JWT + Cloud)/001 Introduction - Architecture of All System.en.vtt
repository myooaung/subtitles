WEBVTT
1

00:00:00.540 --> 00:00:07.440

Hi, guys, in this lesson, we will talk about the architecture of our project in this course, we



2

00:00:07.440 --> 00:00:11.900

will create a new project like online book shopping application.



3

00:00:12.300 --> 00:00:17.960

When I say online book shopping application, we can think of it like that.



4

00:00:17.970 --> 00:00:20.160

We will have a booklist page.



5

00:00:20.430 --> 00:00:27.930

Somehow users or customers will see these book lists and they can buy one of them.



6

00:00:28.350 --> 00:00:35.120

Of course, at the end of it, these purchase will be stored and displayed later.



7

00:00:35.730 --> 00:00:43.140

And we will implement this project using Spring-boot, Angular and PostgreSQL.



8

00:00:43.920 --> 00:00:47.700

In our project, we will implement CRUD operations.



9

00:00:48.240 --> 00:00:53.670

These CRUD operations will be for users and books.



10

00:00:54.180 --> 00:01:04.770

We will use users for user sign in, sign up and authorization operations, and we will use the books



11

00:01:04.920 --> 00:01:09.870

for creating editing, deleting books, operations.



12

00:01:11.460 --> 00:01:20.160

These CRUD operations will be requested from Angular, so on the back, we will create an infrastructure



13

00:01:20.160 --> 00:01:27.430

for these CRUUD operations and on the front end we will serve them with the user interface.



14

00:01:28.260 --> 00:01:33.120

Our project goes on with user and book operations.



15

00:01:33.630 --> 00:01:42.570

Our main operations will be user login, register, booklist, create book, deleting book, etc..



16

00:01:43.290 --> 00:01:51.900

Also, we will go along with the role based application so we will use different roles like admin users,



17

00:01:52.200 --> 00:02:03.930

etc. Then we will provide different authorizations to these users according to the roles, and these all



18

00:02:03.930 --> 00:02:09.690

things will be provided with a secure way in both Angular and Spring.



19

00:02:09.690 --> 00:02:15.250

But we will have two main components to implement our project.



20

00:02:15.840 --> 00:02:21.530

These are server side and client site in server side.



21

00:02:22.110 --> 00:02:30.180

Of course, here our main library will be Spring, but we will implement the whole infrastructure on



22

00:02:30.180 --> 00:02:32.100

the backend with this spring.



23

00:02:32.100 --> 00:02:37.640

But it will provide easy and fast configuration to us.



24

00:02:38.430 --> 00:02:43.380

We will implement the module, will control the architecture on our project.



25

00:02:44.700 --> 00:02:49.810

Spring security will be one of the main topics in our application.



26

00:02:50.560 --> 00:02:57.900

Also, we will use JWT to provide security in Spring-boot.



27

00:02:58.140 --> 00:03:02.430

Data will be presented to the client as an API call.



28

00:03:02.550 --> 00:03:07.050

So Spring rest controller will be used to handle it.



29

00:03:08.070 --> 00:03:11.070

We will use PostgreSQL as database.



30

00:03:11.550 --> 00:03:13.980

We can use other databases also.



31

00:03:14.340 --> 00:03:20.280

But at the end of it, we will deploy our course to Heroku.



32

00:03:20.670 --> 00:03:25.920

PostgreSQL can be used on Heroku for free, so we chose that.



33

00:03:26.880 --> 00:03:34.110

We will also use object relational mapping with Java Persistance API and hibernate.



34

00:03:35.190 --> 00:03:39.480

You know, we can map our database tables to objects with hibernate.



35

00:03:40.200 --> 00:03:46.650

We will use JPA repository and CRUD repository in spring put.



36

00:03:47.160 --> 00:03:55.110

So these repository templates will handle common database operations like save update, find by idea,



37

00:03:55.110 --> 00:03:56.520

delete by Id, etc..



38

00:03:57.120 --> 00:04:02.580

We simply put, we will also use Lombok Library to clear code.



39

00:04:03.060 --> 00:04:12.480

You know that we don't want to implement GetSet of equals and hash quote so we can escape it using Lombok



40

00:04:12.480 --> 00:04:15.930

data or really annotations or other annotations.



41

00:04:15.930 --> 00:04:27.870

In Lombok, we will use Gradle to handle all dependencies on the server side for all services.



42

00:04:28.650 --> 00:04:32.040

We will create cloud deployment with Heroku.



43

00:04:32.400 --> 00:04:35.130

It is an amazing free framework.



44

00:04:35.520 --> 00:04:41.990

We can deploy our spring-boot projects with some configuration or GitHub easily.



45

00:04:42.960 --> 00:04:50.040

So at the end of the course we will have an application on production and we will have a code on GitHub



46

00:04:50.340 --> 00:04:52.140

that is accessible by everyone.



47

00:04:53.490 --> 00:04:56.070

That's all about server side.



48

00:04:56.670 --> 00:04:58.890

Let's talk about client side.



49

00:04:59.700 --> 00:05:06.180

We will create an angular application on the client site and it will provide a cool user interface.



50

00:05:06.600 --> 00:05:14.100

So we will create some page like homepage, admin, dashboard, login page and register page, etc.



51

00:05:14.820 --> 00:05:24.240

Then we will assign the server APIs to these pages and we will consume and produce the data from the



52

00:05:24.240 --> 00:05:27.660

user interface easily and user friendly.



53

00:05:28.800 --> 00:05:35.220

On angular, he will also implement the model we've controlled the architecture, we will use the cool



54

00:05:35.220 --> 00:05:44.760

features of TypeScript, etc. At the end of it, we will build it and we will serve it to Heroku also.



55

00:05:44.880 --> 00:05:50.380

So at the end of the course, we will have a live application on production.



56

00:05:51.300 --> 00:05:57.920

Last but not least, we will implement security and authorization on angular.



57

00:05:57.930 --> 00:06:06.450

Also, we will work with different roles and according to the these roles, we will implement an and



58

00:06:06.450 --> 00:06:09.490

not found pages on the user interface.



59

00:06:09.510 --> 00:06:16.870

Also, we will see the details of them one by one. For now, that's all.



60

00:06:17.220 --> 00:06:17.790

Thank you.

