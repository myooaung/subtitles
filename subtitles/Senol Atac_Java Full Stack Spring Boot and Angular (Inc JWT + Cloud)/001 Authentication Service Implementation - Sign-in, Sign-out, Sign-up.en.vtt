WEBVTT
1

00:00:05.620 --> 00:00:13.030

Hi, guys, in this lesson, we will implement the automatic service, like we said before, in spring



2

00:00:13.030 --> 00:00:16.630

server side, we can also say it in angular.



3

00:00:17.050 --> 00:00:18.820

There is a cycle in model.



4

00:00:18.820 --> 00:00:20.290

We have control structure.



5

00:00:20.560 --> 00:00:27.850

First of all, this model classes, these classes will be are classes to describe data and to serve



6

00:00:28.090 --> 00:00:32.140

the data later called model classes from services.



7

00:00:32.470 --> 00:00:34.320

This will be our business logic.



8

00:00:34.330 --> 00:00:39.160

Layer finally calls services from components and components.



9

00:00:39.370 --> 00:00:41.130

We'll display model classes.



10

00:00:41.560 --> 00:00:46.300

So in the previous lessons we describe our model classes.



11

00:00:46.540 --> 00:00:54.220

In this lesson we will call them from service and we will relate them with our server side with rest



12

00:00:54.220 --> 00:01:01.570

API requests as service is basically a class which can be used by multiple components.



13

00:01:01.900 --> 00:01:08.560

We can use a service for multiple purposes, for example, to outsource some code which you want to



14

00:01:08.560 --> 00:01:10.330

use in multiple components.



15

00:01:10.570 --> 00:01:20.260

Or we will do here to manage our data in one global place where than multiple pieces or spots in our



16

00:01:20.260 --> 00:01:21.900

application have access to it.



17

00:01:22.690 --> 00:01:25.780

So this is how we can use such a service.



18

00:01:26.110 --> 00:01:33.640

Now I will create our first service class for authentication methods like login, register and logout.



19

00:01:34.000 --> 00:01:43.140

We can create service class with the ng, generate comment or comment, will be ng, generate



20

00:01:43.150 --> 00:01:45.820

service and service name.



21

00:01:46.390 --> 00:01:54.700

Our service name will be authentication, but I'll create it under the service folder so I'll specify



22

00:01:54.700 --> 00:02:00.730

it like services slash authentication and it will create our service class.



23

00:02:05.720 --> 00:02:13.750

When we look at the created service class, we will see an important decorator that is injectable,



24

00:02:14.240 --> 00:02:22.690

the injectable decorator's specifies that angular can use this class in the dependency injection system.



25

00:02:23.270 --> 00:02:31.950

The metadata provided in the root means that the authentication service is visible throughout the application.



26

00:02:32.600 --> 00:02:39.800

So to use it from a component, we only need to inject it from the components constructor.



27

00:02:40.160 --> 00:02:42.320

Then we can use it like we want.



28

00:02:43.070 --> 00:02:49.390

OK, now our authentication service template is ready for an authentication service.



29

00:02:50.030 --> 00:02:55.820

We will connect to the backend and then we can send login or register requests.



30

00:02:56.270 --> 00:03:01.310

But first of all, to connect the server, we need the servers.



31

00:03:01.360 --> 00:03:06.010

URL So first of all, we should describe the URL of the server.



32

00:03:06.620 --> 00:03:09.980

We can describe it in the service class directly.



33

00:03:10.130 --> 00:03:18.140

But this won't be a good choice because in that case, for each service we should repeat the URL again



34

00:03:18.140 --> 00:03:25.070

and again to describe it, ANGULAR provides environments in environments.



35

00:03:25.200 --> 00:03:30.440

We can describe such kind of variables, then we can use them globally.



36

00:03:31.250 --> 00:03:38.990

Also, we can use environments separately for development environments and production environments so



37

00:03:38.990 --> 00:03:45.920

we can go with localhost as eurorail on development mode and in production mode.



38

00:03:46.130 --> 00:03:48.220

We can go with cloud URL.



39

00:03:48.920 --> 00:03:52.640

These angular environments provides these for us.



40

00:03:53.270 --> 00:04:01.400

Now let's create our base yuren under the environment that yes, we can set it for production also,



41

00:04:01.400 --> 00:04:06.080

but for now we can set it as null, then we can hook up with it.



42

00:04:06.620 --> 00:04:13.520

By the way, in default, angular works with environment dot ts file to go with environment.



43

00:04:13.520 --> 00:04:18.560

dot prod dot ts we should configure our project in production.



44

00:04:18.560 --> 00:04:22.190

What we will see the details in the next lessons.



45

00:04:23.330 --> 00:04:30.440

OK, now we can call the environment variable from the authentication service and we can describe our



46

00:04:30.440 --> 00:04:33.180

authentication service and point as a variable.



47

00:04:33.980 --> 00:04:40.340

By the way, this end point will be the same with the purpose of authentication controller in the server



48

00:04:40.340 --> 00:04:46.130

side, because in this service, we want to implement authentication endpoints.



49

00:04:53.190 --> 00:05:01.110

OK, now we can implement the register and login pages, but before implementing them, I should mention



50

00:05:01.110 --> 00:05:02.640

some important things.



51

00:05:03.270 --> 00:05:09.770

First one is I want to store user credentials on cache after login operation.



52

00:05:10.020 --> 00:05:12.510

So how can we handle this process?



53

00:05:12.990 --> 00:05:14.550

I want to talk about this.



54

00:05:15.150 --> 00:05:17.760

Second one is after login operation.



55

00:05:18.030 --> 00:05:20.510

The whole application should be aware of it.



56

00:05:20.970 --> 00:05:24.670

So somehow I should notify the whole application.



57

00:05:24.840 --> 00:05:27.040

So how can we handle this process?



58

00:05:27.060 --> 00:05:31.440

Also, I want to talk about it also third one is



59

00:05:31.680 --> 00:05:39.720

I also need a logout operation to clear the user from cache and for logout operation.



60

00:05:39.720 --> 00:05:42.390

I should also notify the whole application.



61

00:05:43.350 --> 00:05:51.810

Now, let's start with the first problem to store this sign in user, we can use local storage, local



62

00:05:51.810 --> 00:05:53.970

storage works on browsers.



63

00:05:54.540 --> 00:06:03.660

We can store it value or an object as string, then we can read it easily when we store in the browser.



64

00:06:03.990 --> 00:06:11.820

If me refresh the page, data will still be accessible because browser stores in application stores,



65

00:06:12.300 --> 00:06:20.430

if we close the current session, it doesn't effect from the session because it is based on application



66

00:06:20.640 --> 00:06:24.570

so we can handle our cash problem with local storage.



67

00:06:25.410 --> 00:06:33.330

Our second problem is somehow we should notify the whole application after logging operation to handle



68

00:06:33.330 --> 00:06:33.680

it.



69

00:06:33.840 --> 00:06:44.040

We can use observable in angular observable comes with the RXJS library by default in angular with



70

00:06:44.040 --> 00:06:45.060

observables.



71

00:06:45.480 --> 00:06:53.550

Listeners can subscribe to the event and then are notified since the event, these listeners catch the



72

00:06:53.550 --> 00:06:54.850

event easily.



73

00:06:55.380 --> 00:06:57.900

Now let's check it for our case.



74

00:06:58.200 --> 00:07:02.340

For our case, first of all, we will register the application.



75

00:07:02.780 --> 00:07:05.130

Then we will have a user account.



76

00:07:05.460 --> 00:07:11.880

Then with this user account, we will sign in the application, then we sign in.



77

00:07:12.090 --> 00:07:17.670

We will start the login result as an event to other listeners.



78

00:07:18.240 --> 00:07:28.680

We will say that hey there, I sign in the application and I notify you with these parameters so we can



79

00:07:28.680 --> 00:07:32.740

solve our modification problem with observable.



80

00:07:34.110 --> 00:07:42.420

Our third problem is somehow we should look out from the application and the application should know



81

00:07:42.420 --> 00:07:42.630

it.



82

00:07:43.260 --> 00:07:48.660

Actually, it will be the same with the second step in this set up.



83

00:07:48.840 --> 00:07:53.580

We will send the notification as null parameter with observable.



84

00:07:54.270 --> 00:08:03.390

We will say that hey listeners, I am not valid anymore so we can solve our second problem with observable



85

00:08:03.390 --> 00:08:03.810

also.



86

00:08:04.320 --> 00:08:07.880

No, we can implement them one by one.



87

00:08:08.280 --> 00:08:16.440

First of all, I will create a public accessible current user variable as observable, like I said before,



88

00:08:16.800 --> 00:08:24.870

because I will call it from other components and I will use it to reactively update when a user log



89

00:08:24.870 --> 00:08:29.460

in or and secondly, I'll create current user subject.



90

00:08:29.970 --> 00:08:32.700

It will be an emitter for current user.



91

00:08:33.210 --> 00:08:40.620

What I mean here, somehow I should omit the current user value over an emitter so that emitter will



92

00:08:40.620 --> 00:08:48.830

be behavior subject the behavior subject host to value that needs to be shared with other components.



93

00:08:49.440 --> 00:08:52.200

Now we can implement the constructor.



94

00:08:52.770 --> 00:08:57.090

First of all, we will call rest and points from the server side.



95

00:08:57.210 --> 00:09:01.650

So we need the HTTP module, HTTP module.



96

00:09:01.890 --> 00:09:12.780

We'll handle, get post put and delete HTTP requests, but to use HTTP module we should import it on the



97

00:09:12.780 --> 00:09:13.080

app.



98

00:09:13.080 --> 00:09:20.220

That module, the module of the HTTP client is HTTP client module.



99

00:09:20.880 --> 00:09:26.490

We will import it to the app module typescript class, then we will provide it.



100

00:09:27.480 --> 00:09:30.660

Now we can return back to the authentication service.



101

00:09:31.830 --> 00:09:36.870

Then, like I said before, we will store the current user in the cache.



102

00:09:37.170 --> 00:09:45.390

So to store it, we will benefit from the local storage level storage after login operation and and



103

00:09:45.390 --> 00:09:47.610

we will read it on initial.



104

00:09:48.510 --> 00:09:52.500

If it exists, we will set it to the current user object.



105

00:09:52.770 --> 00:09:56.090

And we will notify the application on the initial case.



106

00:10:08.050 --> 00:10:14.770

So we will check the current user in the local storage, and if it does exist, we will send it to the



107

00:10:14.770 --> 00:10:22.720

emitter, we can take the object from the emitter with as observable function behavior subject can be



108

00:10:22.720 --> 00:10:27.170

easily listened to or subscribed by other components.



109

00:10:27.400 --> 00:10:33.190

So if there is any update on Behaviour's subject, others will be notified immediately.



110

00:10:38.390 --> 00:10:45.020

Now, our first method will be to get the current user value from behavior subject asynchronous.



111

00:10:45.710 --> 00:10:52.920

This will be a public accessible function before we created the current user variable to get it as observable.



112

00:10:53.180 --> 00:10:55.760

That will provide asynchronous access.



113

00:10:56.000 --> 00:10:59.780

Now we are going to create a function to get it synchronously.



114

00:11:01.830 --> 00:11:05.710

Our second method will be the login method in this function.



115

00:11:05.820 --> 00:11:13.530

We will send the sign in request with the user credentials, we can reach the user credentials from



116

00:11:13.530 --> 00:11:19.800

user object because the user object has password and username fields.



117

00:11:20.370 --> 00:11:24.780

By the way, all our HTTP request will be observable



118

00:11:27.300 --> 00:11:34.860

because we will send the request and we will wait for the response tanks to observe, but then we will



119

00:11:34.860 --> 00:11:41.580

send a post request and the API endpoint will be API authentication.



120

00:11:42.120 --> 00:11:47.310

Sign in and we will send the user object as form data.



121

00:11:47.880 --> 00:11:50.010

After the login request.



122

00:11:50.010 --> 00:11:57.510

We shall intercept the response because we should set the current user observable object to intercept



123

00:11:57.510 --> 00:11:58.430

the request.



124

00:11:58.710 --> 00:12:02.520

We can use the pipe function of HTTP request.



125

00:12:03.340 --> 00:12:07.980

Then we will map the response to map the response.



126

00:12:08.250 --> 00:12:12.530

Our access provides the map function so we can use it easily.



127

00:12:13.020 --> 00:12:14.550

Why RXJS?



128

00:12:14.730 --> 00:12:20.930

Because it is an observable result and observable comes from RXJS.



129

00:12:22.020 --> 00:12:29.610

If there is a response that comes from login operation, we will set it to local storage, so we will



130

00:12:29.610 --> 00:12:34.750

store it in the cash to store it in the local storage.



131

00:12:35.040 --> 00:12:42.500

We should trap it with this string because in the local storage we can store data in string format.



132

00:12:43.080 --> 00:12:51.340

Then we will notify the emitter so we can do it by assigning the response to behavior subject.



133

00:12:51.930 --> 00:12:55.230

So this will provide the caching and notification.



134

00:12:55.980 --> 00:12:58.720

OK, now our logging function is ready.



135

00:12:59.340 --> 00:13:03.330

Our other methods will be registered to register.



136

00:13:03.510 --> 00:13:09.430

We will send post requests to the server site with a predefined rest API.



137

00:13:09.960 --> 00:13:13.260

We will send a user object as a parameter.



138

00:13:14.190 --> 00:13:19.940

Our registration based API part is API authentication.



139

00:13:20.520 --> 00:13:21.420

Sign up.



140

00:13:22.380 --> 00:13:26.820

And we will send the user object as a form data.



141

00:13:39.010 --> 00:13:43.150

Our last method will be logout in this function.



142

00:13:43.360 --> 00:13:49.930

We will clear the storage and we will notify the application as a cleared user.



143

00:13:51.110 --> 00:13:54.500

We don't need to send a request to the server side.



144

00:13:55.520 --> 00:14:05.260

Because we don't use sessions on the server side to log out, we remove the user from the local storage



145

00:14:05.630 --> 00:14:10.070

and we notify the emitter with the empty user.



146

00:14:10.900 --> 00:14:15.830

OK, that's all about the authentication service implementation.



147

00:14:16.160 --> 00:14:16.670

Thank you.

