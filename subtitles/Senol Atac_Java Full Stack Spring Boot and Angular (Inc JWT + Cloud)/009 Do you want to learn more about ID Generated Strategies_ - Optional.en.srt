1
00:00:02,530 --> 00:00:10,650
Hey, guys, in this lesson, we will see how we can generate simple ideas with using JPA and hibernate,

2
00:00:11,080 --> 00:00:20,830
you know that we use I.D. to identify our table records and this allows us to reach the records effectively.

3
00:00:21,520 --> 00:00:30,070
The GPA specification supports for different primary key generation strategies would generate the primary

4
00:00:30,070 --> 00:00:38,840
key values programmatically or use database features like other incremented columns or sequencers.

5
00:00:39,940 --> 00:00:44,690
Now we will see all of these strategies with examples.

6
00:00:45,040 --> 00:00:47,380
Let's start with the default strategy.

7
00:00:47,680 --> 00:00:48,660
Could do it.

8
00:00:48,910 --> 00:00:52,810
First of all, we will create an example model class.

9
00:01:29,950 --> 00:01:39,250
First of all, it will have zero persistence, table annotation, because we describe it as a database

10
00:01:39,250 --> 00:01:39,610
table.

11
00:01:52,330 --> 00:01:58,450
Then we should add and the invitation to describe it as an art class,

12
00:02:01,810 --> 00:02:10,240
then we will add Lumberg in addition to generate getter and setter methods of our class fields'.

13
00:02:36,410 --> 00:02:43,100
Our first field will be Idy could describe it as an idea.

14
00:02:43,940 --> 00:02:46,580
We will add the annotation.

15
00:02:50,480 --> 00:02:59,750
To generate ID field automatically, we will add generated value annotation in here or generate a strategy

16
00:02:59,980 --> 00:03:01,340
will be default.

17
00:03:02,150 --> 00:03:06,760
The generated type auto is the pull generation type.

18
00:03:07,760 --> 00:03:13,730
It selects a generation strategy based on the database specific dialect.

19
00:03:14,540 --> 00:03:23,480
For example, in our example, we will use my skill and my skill will choose second strategy.

20
00:03:23,900 --> 00:03:31,540
But if we use another database, it can be an identity strategy or second strategy.

21
00:03:34,350 --> 00:03:40,560
OK, let's Creadon and other fields for it, like main stream name.

22
00:03:44,780 --> 00:03:49,070
Now to say that we will carry the JPA riposted Occulus.

23
00:04:10,770 --> 00:04:16,980
JP Repository is an abstract class implemented by sweeping G.P.A. repository,

24
00:04:20,070 --> 00:04:28,440
which with G.P.A. repository Ciprian will handle basic croute database operations automatically like,

25
00:04:28,890 --> 00:04:33,210
say, update, find by Idy, etc..

26
00:04:35,280 --> 00:04:38,430
JP Repository has two genetic parameters.

27
00:04:39,060 --> 00:04:41,660
First parameter is for the middle class.

28
00:04:42,240 --> 00:04:46,290
The second parameter is for the idea class of the model class.

29
00:04:46,450 --> 00:04:53,320
So our model class will be default one and our idea class will be long.

30
00:04:54,480 --> 00:04:57,650
OK, now we can test it, could test it.

31
00:04:57,840 --> 00:05:02,000
We can create unit tests for each case.

32
00:05:02,520 --> 00:05:08,310
Of course we will use superimposed book test under the test source.

33
00:05:08,850 --> 00:05:14,760
We can create our package and our test scores.

34
00:05:17,870 --> 00:05:27,300
Then we will inject our reporter class, we can inject it with using autobahns innovation in spring,

35
00:05:29,570 --> 00:05:32,000
then we can carry the test methods.

36
00:05:32,300 --> 00:05:37,630
Our test methods will be so save and to with test name.

37
00:06:18,120 --> 00:06:19,860
Now we can run it.

38
00:06:36,860 --> 00:06:47,200
After running it, we can see the Esker looks on the council to show it, our property is Ciprian JPA

39
00:06:47,360 --> 00:06:56,240
show ESCA will be thorough when we check out our strategy uses Hibernates second table to generate it.

40
00:07:16,870 --> 00:07:18,940
They can also check database.

41
00:07:41,350 --> 00:07:46,080
OK, let's check our second idea generator to check it.

42
00:07:46,270 --> 00:07:51,070
We will create another and the glass like the Volkman.

43
00:07:55,950 --> 00:08:04,470
Actually, we can take a copy and paste it from default, but then we can change the table name and

44
00:08:04,770 --> 00:08:05,220
last name.

45
00:08:14,150 --> 00:08:24,050
Our second idea, generator is identity, it relies on an auto increment database color and lets the

46
00:08:24,050 --> 00:08:28,640
database generate new value with each user operation.

47
00:08:29,600 --> 00:08:37,310
This is very efficient because the auto incremented columns are highly optimized and it doesn't require

48
00:08:37,340 --> 00:08:39,300
any additional statements.

49
00:08:43,970 --> 00:08:48,500
Now we can create a repository for it to test it.

50
00:09:04,040 --> 00:09:12,830
JP sort has to generate Parramatta's first parameterize for the model class, and the second parameter

51
00:09:12,830 --> 00:09:16,660
is that for the idea of model class.

52
00:09:18,330 --> 00:09:28,410
Now, let's test it, first of all, we will inject our repository class with OTTAVI,

53
00:09:31,500 --> 00:09:42,150
then we can create a test methods like the false alarm or test method we'll be to save and with test

54
00:09:42,150 --> 00:09:42,600
name.

55
00:10:00,960 --> 00:10:02,340
Now we can run it.

56
00:10:22,390 --> 00:10:32,790
After running it, we can see the Esker locks on the console when we check the locks, we couldn't see

57
00:10:32,790 --> 00:10:41,900
the I.T. field on insert query because it will be provided as default video on database table.

58
00:10:44,880 --> 00:10:53,610
We can see it on the table and also we can check the check it from database.

59
00:10:56,780 --> 00:11:02,030
When we checked the database, we will see the ID field as auto insurance.

60
00:11:11,310 --> 00:11:16,620
OK, let's check our third generator to check it.

61
00:11:16,650 --> 00:11:20,070
We will create another and the glass like defaults on.

62
00:11:33,500 --> 00:11:41,620
Actually, we can take the copy and paste it from Prairie's default one class, then we can edit it,

63
00:11:42,080 --> 00:11:45,170
we can change the table name and last name of it.

64
00:11:51,090 --> 00:11:54,490
Our third idea generator is second.

65
00:11:55,800 --> 00:12:00,190
It uses databased seconds to generate primary key.

66
00:12:00,780 --> 00:12:07,180
It requires additional select statement to get the next value from its database sequence.

67
00:12:07,650 --> 00:12:16,350
But this has no performance effect for most applications, so it is optimized.

68
00:12:19,340 --> 00:12:27,770
Then we don't specify the generator name, however, he uses default sequence generator, or we can

69
00:12:27,770 --> 00:12:32,870
use specific signals generated with using sitcom's generator annotation.

70
00:12:33,800 --> 00:12:39,540
The second generator annotation lets us define the name of the generator.

71
00:12:40,820 --> 00:12:46,390
The name of the database seconds and the location size of the seconds.

72
00:12:58,670 --> 00:13:02,400
In here, default allocation size is 50.

73
00:13:03,020 --> 00:13:12,980
We can think it like Sation increments value if we use badge in certain that can be meaningful, but

74
00:13:12,980 --> 00:13:16,370
I suggest to use it as long.

75
00:13:19,490 --> 00:13:25,530
By the way, my Israel does not have a second strike, it behaves like a cable generator.

76
00:13:27,680 --> 00:13:30,470
Now we can create a repository.

77
00:13:41,520 --> 00:13:48,720
JPA repository has to generate parameters first the is there for the IE, the first parameter is the

78
00:13:48,720 --> 00:13:53,980
model class and second parameter is the idea plus of course.

79
00:13:56,910 --> 00:13:59,610
Now let's test its.

80
00:14:01,340 --> 00:14:04,880
First of all, we will inject it with using autobio.

81
00:14:10,890 --> 00:14:16,040
Then we can create it, then we can create that premise.

82
00:14:17,590 --> 00:14:23,250
OK, that's my that's really the same entity with test name.

83
00:14:39,910 --> 00:14:41,410
Norwegian runit.

84
00:15:08,510 --> 00:15:13,010
After running it, we can see the locks on the console.

85
00:15:20,400 --> 00:15:27,180
When we check the looks, we can see that our second table update created to get next value.

86
00:15:28,260 --> 00:15:32,170
Like I said before, my scan does not have a second type.

87
00:15:32,580 --> 00:15:36,100
It creates a table star sequence values.

88
00:15:36,630 --> 00:15:42,210
Of course, it is not effective because sitcom's like is optimized for the generation.

89
00:15:46,090 --> 00:15:48,310
We can check it also from database.

90
00:15:56,620 --> 00:16:01,140
OK, let's check our last idee generator to check it.

91
00:16:01,420 --> 00:16:04,540
We will create another end of the glass like the full time.

92
00:16:11,190 --> 00:16:17,100
Actually, we can directly copy and paste it from default form, then we can change the table name.

93
00:16:24,200 --> 00:16:32,820
Our last idea generator is cable, it simulates a second space storing and updating its current value

94
00:16:32,930 --> 00:16:40,340
in a database table, which requires the use of pessimistic locks which put all transactions into a

95
00:16:40,340 --> 00:16:41,360
sequential order.

96
00:16:42,680 --> 00:16:47,870
This slows down our application, so it is not preferable to generate such.

97
00:16:51,630 --> 00:17:00,630
Then we don't specify the generator name Hibernate uses before cable generator, or we can use specific

98
00:17:00,900 --> 00:17:01,970
cable generator.

99
00:17:04,500 --> 00:17:08,760
The table generator, in addition, lets us define the name of the generator.

100
00:17:10,290 --> 00:17:15,410
The name of the database table and the location size of the table.

101
00:17:38,450 --> 00:17:42,710
Now we can create a proposal for it, but test it.

102
00:17:52,690 --> 00:17:58,440
J.P. Adipocere has two genetic parameters, first, parliamentary as part of the middle class, and

103
00:17:58,440 --> 00:18:02,610
the second parameter is for the idea of the middle class.

104
00:18:10,110 --> 00:18:12,300
Now, let's test it

105
00:18:16,760 --> 00:18:26,250
with using the generator test glass, we can copy and paste that from previous test methods

106
00:18:29,910 --> 00:18:36,540
we will save and they will test name for God to inject the to us.

107
00:18:37,500 --> 00:18:41,130
That's injected with using Altovise.

108
00:18:48,010 --> 00:18:50,980
Then we'll save it with a test name.

109
00:18:55,510 --> 00:18:57,130
OK, now we can run it.

110
00:19:15,770 --> 00:19:20,450
After running and we can see the locks on the console,

111
00:19:24,290 --> 00:19:31,340
let me check the looks, we can see that our table generator updates credit cards next value.

112
00:19:38,590 --> 00:19:42,550
We can check it from the database also, of course.

113
00:20:00,100 --> 00:20:08,130
OK, now we learned idea generator types, you can ask me which strategy is best for me.

114
00:20:09,370 --> 00:20:18,610
I definitely say that if your data base support systems generator directly use its second generator

115
00:20:19,150 --> 00:20:26,610
because it's very efficient and it supports battery research and updates.

116
00:20:27,040 --> 00:20:31,200
Otherwise you can use identity generator.

117
00:20:32,110 --> 00:20:33,280
That's all from me.

118
00:20:33,670 --> 00:20:34,180
Thank you.
