WEBVTT
1

00:00:00.300 --> 00:00:08.610

Hey, guys, in this lesson, we will talk about git and github, first of all, we will talk about what



2

00:00:08.610 --> 00:00:09.580

the git is.



3

00:00:09.630 --> 00:00:12.810

Secondly, we will compare it with github.



4

00:00:13.230 --> 00:00:16.080

Fine, and we will get an example about it.



5

00:00:16.620 --> 00:00:18.690

Let's start with git definition.



6

00:00:19.290 --> 00:00:19.700

Git.



7

00:00:19.890 --> 00:00:24.780

Is it version control system in tracks, changes on file.



8

00:00:25.260 --> 00:00:28.170

It supports any type of file.



9

00:00:28.680 --> 00:00:33.270

On the other hand, GitHub is that repository.



10

00:00:33.810 --> 00:00:45.480

We can push our getData to github and GitHub serves as a hosting service for Git. Git and GitHub also



11

00:00:45.480 --> 00:00:52.590

provide collaboration so we can create a project that we can work with as a team.



12

00:00:53.160 --> 00:00:56.370

Let's talk about git basic keywords.



13

00:00:56.820 --> 00:01:02.720

We can say repository for all good content and get historias.



14

00:01:03.150 --> 00:01:07.230

Git repository is constructed from branches.



15

00:01:07.920 --> 00:01:11.820

We can describe multiple branches on git repository.



16

00:01:12.300 --> 00:01:18.090

These branches can trace different historic paths for different files.



17

00:01:18.390 --> 00:01:23.250

And finally, a branch is constructed from Commins.



18

00:01:23.820 --> 00:01:29.720

Each commit has a unique idea and we can revert commits.



19

00:01:30.610 --> 00:01:33.210

OK, now we can see it.



20

00:01:33.210 --> 00:01:35.910

basics on that example.



21

00:01:36.780 --> 00:01:45.480

First of all, we should download and install git according to our operating system.



22

00:01:46.680 --> 00:01:54.500

After we don't want it, we can install it with clicking next and next buttons.



23

00:01:55.650 --> 00:01:59.250

So there is no specific thing on these steps.



24

00:01:59.940 --> 00:02:09.540

After installation we should describe our git username and email because git should know commit assignee



25

00:02:10.410 --> 00:02:16.050

git assigns each commit to collaborate to set it.



26

00:02:16.320 --> 00:02:21.090

We can use git config global settings.



27

00:02:22.920 --> 00:02:30.900

If you have a GitHub account, please describe your credentials according to that information.



28

00:02:52.840 --> 00:03:02.320

Then we can create that new project and we can see all git processes, let's create a new project like



29

00:03:02.530 --> 00:03:03.390

git demo.



30

00:03:21.430 --> 00:03:30.970

Then we can open this project with an editor in here, we can use lots of different editors according



31

00:03:30.970 --> 00:03:32.240

to our desires.



32

00:03:32.650 --> 00:03:44.350

But in this lesson, as a programmer, I will use Intellij and let's open our project on Intellij.



33

00:03:46.260 --> 00:03:54.410

OK, we are ready to start coding now, first of all, we should check git status when we check it.



34

00:03:54.780 --> 00:03:58.500

It says This project is not a git Project.



35

00:04:03.950 --> 00:04:06.410

First of all, let's create a test file,



36

00:04:10.130 --> 00:04:13.580

we can write some random things as context.



37

00:04:27.770 --> 00:04:36.780

Now, let's assume that our first feature is ready and we want to commit our project to get and get.



38

00:04:40.430 --> 00:04:53.800

So we should specify, as this project is a good project, we can do it via git in it connects, OK.



39

00:04:55.370 --> 00:04:59.000

Now, our project is a git project, good project.



40

00:04:59.120 --> 00:05:01.580

Stores files with two steps.



41

00:05:02.120 --> 00:05:12.580

These steps are staged and commits so we can add or remove fires on stage label that we can commit



42

00:05:12.620 --> 00:05:18.160

our stage files to commit level, to add files to git stage.



43

00:05:18.590 --> 00:05:27.950

We can use it at commits, we can add all fires or we can add files.



44

00:05:27.950 --> 00:05:38.780

But I want to add all files we can use get at that or to add files one by one.



45

00:05:39.170 --> 00:05:43.160

We can use git add filename.



46

00:06:03.620 --> 00:06:15.050

After adding files, files will be on stage level on git any more than we should commit our changes and



47

00:06:15.200 --> 00:06:29.780

send them to the git tree. git-commit command is git commit, plus commit message.



48

00:06:39.610 --> 00:06:50.050

When we commit it commit log will be seen on git history, logs on git each commit will have a unique



49

00:06:50.050 --> 00:06:50.610

id.



50

00:06:50.830 --> 00:06:56.500

We can see log details on intellij detaily and clearly.



51

00:07:13.910 --> 00:07:18.650

Then when we create a new commitment, logs will be updated.



52

00:07:38.880 --> 00:07:46.440

Of course, we can revert back commits when we change the name of the file.



53

00:07:46.780 --> 00:07:57.150

git also tracks the previous file because git doesn't care with file name git interest with file hash.



54

00:08:21.580 --> 00:08:30.340

Now, let's create a new file and we will check the log change on all the files, we can add new



55

00:08:30.340 --> 00:08:32.890

random content to the new file.



56

00:08:40.350 --> 00:08:49.320

Done when we commit our file, our previous file doesn't be affected by the new commitments because



57

00:08:50.040 --> 00:08:59.090

the text only modified files and get stores, only these changes on local history.



58

00:09:00.240 --> 00:09:07.950

Otherwise, each commitment will shrink our git repository and will not be effective.



59

00:09:10.190 --> 00:09:19.490

OK, now our local get commitment is really we want to work collaboratively on the same project to do



60

00:09:19.490 --> 00:09:22.720

it, we can work on different projects.



61

00:09:23.240 --> 00:09:31.430

For example, I can work on master branch and my partner can work on dev brach.



62

00:09:32.090 --> 00:09:37.250

Then we can merge our courts to New branch to do it.



63

00:09:37.490 --> 00:09:44.750

We can create branchs and we can switch branchs easily to create a new branch.



64

00:09:45.030 --> 00:09:49.990

Our command is each branch plus branch name.



65

00:09:50.360 --> 00:09:52.550

Then we can check out branchs



66

00:09:55.340 --> 00:10:02.250

or we can create and check out new branchs with a single commit like git.



67

00:10:02.330 --> 00:10:09.110

Check out the branch name on those branchs.



68

00:10:09.440 --> 00:10:14.600

Let's create a new file and let's commit it to their branch.



69

00:10:40.870 --> 00:10:43.790

When we switch our branch to master.



70

00:10:43.900 --> 00:10:53.380

We couldn't see the new file because each branch has its own size and its own file historiy.



71

00:10:59.490 --> 00:11:07.350

And we couldn't see their files and master without merging them to the master branch when we switched



72

00:11:07.350 --> 00:11:10.580

to the dev branch, we can see the new file again.



73

00:11:13.260 --> 00:11:17.220

OK, now we saw the base commands about git.



74

00:11:17.880 --> 00:11:22.830

Now we want to push our code to github to do it.



75

00:11:23.160 --> 00:11:26.220

First of all, we will open our github dashboard,



76

00:11:30.630 --> 00:11:33.120

then we will click the new repository button.



77

00:11:36.060 --> 00:11:39.630

Then we will specfy our repository name.



78

00:11:40.050 --> 00:11:43.440

Our repositoryy name will be git-demo.



79

00:11:44.790 --> 00:11:48.240

Then we can set access rights in here.



80

00:11:48.390 --> 00:11:50.310

We will set it as public.



81

00:11:50.550 --> 00:11:58.680

But of course you can go on with private mode when we said as public, everybody can see our codes.



82

00:11:59.070 --> 00:12:03.660

But of course to collaborate we should give access to them.



83

00:12:04.650 --> 00:12:05.830

Then we can create.



84

00:12:13.650 --> 00:12:22.800

Actually, GitHub says what we do to import our codes here, first of all, we will initialize git on



85

00:12:22.800 --> 00:12:31.470

our project, then we will add all items together, then we will relate our remote repository with the



86

00:12:31.470 --> 00:12:32.190

project.



87

00:12:32.700 --> 00:12:36.300

Then we will commit our codes with a commit message.



88

00:12:36.750 --> 00:12:39.600

Finally, we will push it to get.



89

00:12:40.920 --> 00:12:44.460

Actually, we did lots of them on our project.



90

00:12:44.730 --> 00:12:49.380

Now we will relate our project with this GitHub repository.



91

00:12:49.860 --> 00:12:54.320

Then we will push commits in here.



92

00:12:54.330 --> 00:12:58.020

We have two branches we will push them one by one.



93

00:13:33.080 --> 00:13:38.180

OK, now our code is reachable from GitHub as public.



94

00:13:43.550 --> 00:13:52.460

In here that are redundant codes, like the idea folder with git, we can ignore them to ignore



95

00:13:52.460 --> 00:13:52.740

them.



96

00:13:52.970 --> 00:13:58.220

We can use it, gitignore file on the gitignore file.



97

00:13:58.460 --> 00:14:00.520

We will specify the folder name.



98

00:14:00.980 --> 00:14:06.280

Then we should remove idea of files because we pushed back.



99

00:14:36.340 --> 00:14:42.840

If he didn't commit it, we don't need to remove them, but in here he committed them.



100

00:14:43.120 --> 00:14:45.550

So first of all, we should remove the.



101

00:14:57.200 --> 00:15:01.690

OK, now we can commit and push them again.



102

00:15:07.660 --> 00:15:17.820

When we checked the repository again, we wont see the idea folder anymore yet, and it's up



103

00:15:17.830 --> 00:15:21.550

have lots of different features in this lesson.



104

00:15:21.550 --> 00:15:29.740

We couldn't give all the details, but I want to give an example about pull requests, because pull-request



105

00:15:30.160 --> 00:15:33.550

is important for teams on teams.



106

00:15:33.790 --> 00:15:42.550

We can create different branchees, then we can create pull requests from these branches and we can send



107

00:15:42.700 --> 00:15:45.370

these pull requests to review.



108

00:15:46.210 --> 00:15:52.060

Finally, if pull request is confirmed, we merge our branches.



109

00:15:53.050 --> 00:15:59.020

Now, we will illustrate these steps, first of all, from pull request.



110

00:15:59.620 --> 00:16:05.070

We want to merge our dev branch to Master branc.



111

00:16:05.650 --> 00:16:16.360

We should give a name for our PR, then we can create it done from the review section.



112

00:16:17.140 --> 00:16:20.660

We should choose a reviewer in here.



113

00:16:20.680 --> 00:16:23.500

Your teammates will be listed.



114

00:16:24.280 --> 00:16:29.580

If your code is approved, then we can merge our.



115

00:16:48.560 --> 00:16:53.000

If we advance, we can also delete our feature brances.



116

00:16:54.920 --> 00:16:56.760

OK, that's OK.



117

00:16:57.110 --> 00:16:57.740

Thank you.

