WEBVTT
1

00:00:05.620 --> 00:00:13.480

Hi, guys, in this lesson, we will configure our annual project when I say configuration, we want



2

00:00:13.480 --> 00:00:20.920

to use extra frameworks, libraries on our project like bootstrap and font.



3

00:00:20.920 --> 00:00:21.620

Awesome.



4

00:00:22.090 --> 00:00:27.310

So now we will configure these libraries one by one.



5

00:00:28.840 --> 00:00:31.510

First configuration will be bootstrap.



6

00:00:32.410 --> 00:00:43.330

Bootstrap is the most popular cyesis framework for developing responsive and mobile first websites.



7

00:00:43.960 --> 00:00:47.570

For our case, we will use the latest bootstrap version.



8

00:00:47.860 --> 00:00:49.930

I think that here is important.



9

00:00:50.590 --> 00:00:53.980

Bootstrap doesn't provide components.



10

00:00:54.340 --> 00:00:58.120

Bootstrap provides predefined sets classes.



11

00:00:58.720 --> 00:01:06.430

For example, a line middle, a set of utility classes that are equivalent to writing the Cyesis property



12

00:01:06.670 --> 00:01:17.290

vertical align equals middle, for example, big dark or big light background, color, utility classes,



13

00:01:17.650 --> 00:01:23.800

etc. So Bootstrap provides, Radisich says, classes.



14

00:01:24.040 --> 00:01:29.800

Then we create HDMI components from d.c.'s classes.



15

00:01:30.280 --> 00:01:38.350

Bootstrap also uses GE Query and Pupper for several actionable or informational events.



16

00:01:38.500 --> 00:01:45.770

So we can also say that bootstrap benefits from various libraries to provide better infrastructure.



17

00:01:46.600 --> 00:01:48.490

Now let's install it.



18

00:01:48.580 --> 00:01:51.070

We are then ampm comment.



19

00:01:51.790 --> 00:01:56.140

Now we will open the terminal in this project folder.



20

00:01:57.310 --> 00:01:58.450

That's important.



21

00:01:58.460 --> 00:02:02.950

We should open the terminal from the project folder.



22

00:02:03.610 --> 00:02:15.220

We should open in the project directory npm install bootstrap yechury g query is Helford Library for



23

00:02:15.220 --> 00:02:22.390

Bootstrap because Bootstrap also uses JavaScript libraries for animations and actionable items.



24

00:02:24.660 --> 00:02:32.220

This will now, though, long it and put it into this project folder, and we can easily imported that.



25

00:02:33.380 --> 00:02:43.610

How can we imported that to use bootstrap, we should describe it in style Cyesis or in English?



26

00:02:43.640 --> 00:02:52.120

Jason Undersize Stalls Success is used to describe global success classes.



27

00:02:52.610 --> 00:02:59.590

So when the import style classes here, we can use them on the whole application.



28

00:03:00.530 --> 00:03:07.880

Here we can import bootstrap from the undershot, not modules we can describe.



29

00:03:07.880 --> 00:03:14.720

They're not modules FALDER as relatively or we can describe it with Tilda.



30

00:03:16.870 --> 00:03:24.370

Also, we can describe it from the angle of Jason configuration file, this file configures our project



31

00:03:25.060 --> 00:03:34.690

behind the scenes, these configuration file bundles, all our JavaScript and CSS files and add them



32

00:03:34.690 --> 00:03:37.120

to indexed that estimate file.



33

00:03:37.540 --> 00:03:46.810

Engelhard that adjacent at the root level of an angular workspace provides workspace vids and project



34

00:03:46.810 --> 00:03:53.920

specific configuration defaults for build and development tools provided by the angular saola.



35

00:03:54.760 --> 00:03:59.230

We can also describe style clusters in this file.



36

00:03:59.350 --> 00:04:06.370

Under the tiles block we can import bootstrap from the under node modules.



37

00:04:07.150 --> 00:04:10.810

We can describe the node modules folder as relatively.



38

00:04:11.650 --> 00:04:17.140

By the way, this is optional because we already import it on cases.



39

00:04:17.500 --> 00:04:19.330

We can ignore one of them.



40

00:04:39.670 --> 00:04:49.660

Then with the same day, we will import straps, skip dependencies under strips, block bootstrap dependencies



41

00:04:49.810 --> 00:04:51.430

will be Jaquie.



42

00:04:53.290 --> 00:05:02.200

We can find the spare parts under the not module's, we should specify parts according to not module's



43

00:05:02.200 --> 00:05:03.160

as relatively.



44

00:05:03.730 --> 00:05:11.410

By the way, when we see these not modules, we wonder that Angular really uses these modules.



45

00:05:11.410 --> 00:05:12.640

One by one.



46

00:05:13.030 --> 00:05:19.180

Engelhard uses these node modules on development and building on production.



47

00:05:19.390 --> 00:05:26.110

Engler's does not use these not modules, so we don't need to worry about not modules.



48

00:05:27.760 --> 00:05:31.930

The other configuration will be about font awesome icons.



49

00:05:32.320 --> 00:05:39.760

Font Awesome provides a scalable Wiktor icons that can instantly be customized with size, color, drop



50

00:05:39.760 --> 00:05:45.010

shadow and anything that can be done with the power of this font.



51

00:05:45.010 --> 00:05:46.060

Awesome source.



52

00:05:46.060 --> 00:05:47.890

A lot of icon sets.



53

00:05:48.250 --> 00:05:56.410

Some of them are free and some of them need a license, but most of the time free versions are enough.



54

00:05:57.370 --> 00:05:59.080

Now let's install it.



55

00:05:59.200 --> 00:06:00.910

We are the AMPM comments.



56

00:06:01.630 --> 00:06:04.270

We will install SPG for months.



57

00:06:04.540 --> 00:06:10.360

For now we can install Sulit icons, regular icons and great icons.



58

00:06:10.970 --> 00:06:14.740

Of course, these icons should be our needs.



59

00:06:15.250 --> 00:06:18.390

For example, we want to use the user icon.



60

00:06:18.550 --> 00:06:24.580

So we need Reglan icons or we need the angular print icon.



61

00:06:24.580 --> 00:06:28.000

So we need Birand icons, etc..



62

00:06:56.460 --> 00:07:05.280

Font awesome module should be described in the app module module is the bootstrap module for the end



63

00:07:05.440 --> 00:07:05.980

project.



64

00:07:06.570 --> 00:07:15.540

This module basically test the English to which parts does my application, how and which parts, I



65

00:07:15.540 --> 00:07:20.820

mean, which components, which directive's, which pipes or which services might I use.



66

00:07:21.840 --> 00:07:29.280

So this is how you structure your application and this is why we load this file when we start the application,



67

00:07:29.280 --> 00:07:34.320

because we have to tell ANGULAR to which part does my application actually have.



68

00:07:34.680 --> 00:07:36.450

So this is the root module.



69

00:07:36.660 --> 00:07:39.200

This is the description of my application.



70

00:07:39.600 --> 00:07:44.590

So we will use font awesome on our application to use it.



71

00:07:44.610 --> 00:07:49.970

We should describe it on app module before to edit.



72

00:07:50.190 --> 00:08:00.120

Let's talk about engie module structure declaration, Hulce, all directive's components and types of



73

00:08:00.120 --> 00:08:00.870

application.



74

00:08:02.130 --> 00:08:11.070

The imports array's imports are module's not just said we are only going to use one module, but there



75

00:08:11.070 --> 00:08:13.290

are a couple of built-In ones.



76

00:08:13.290 --> 00:08:24.060

For example, we can use Brasseur module for module, etc., provides the services we want to have in



77

00:08:24.060 --> 00:08:25.080

our application.



78

00:08:25.860 --> 00:08:30.970

Bootstrap is the last array here and this is the important one.



79

00:08:31.110 --> 00:08:39.240

It specifies most of the time only one component which actually gets law that first Engelhard does not



80

00:08:39.240 --> 00:08:43.380

scan all components for the selectors automatically.



81

00:08:43.740 --> 00:08:51.600

It scans components that we add the declarations, but it will still not find the selector we use in



82

00:08:51.600 --> 00:08:53.230

the index that estimate.



83

00:08:53.880 --> 00:09:02.460

This is one part where we have to be explicit and tell Angerer to hey, when you start the application



84

00:09:02.640 --> 00:09:05.460

first, have a look at the app component.



85

00:09:05.730 --> 00:09:11.970

It is the root component of our application and this is an important take away.



86

00:09:12.420 --> 00:09:21.000

Our anger application will have a root component which will hold all other components that you may as



87

00:09:21.000 --> 00:09:30.030

nested as you want, but you have the one single root component which is added here to the bootstrap



88

00:09:30.030 --> 00:09:30.240

area.



89

00:09:31.170 --> 00:09:34.380

Now let's add the font awesome module.



90

00:09:35.100 --> 00:09:36.750

It will be a module.



91

00:09:37.260 --> 00:09:39.600

We will use the functionalities of it.



92

00:09:40.440 --> 00:09:45.360

We can describe modules under the imports at a.



93

00:09:46.950 --> 00:09:49.720

OK, that's all about configuration.



94

00:09:50.070 --> 00:09:50.610

Thank you.

