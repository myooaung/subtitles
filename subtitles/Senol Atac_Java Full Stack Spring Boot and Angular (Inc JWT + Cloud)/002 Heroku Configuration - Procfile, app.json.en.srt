1
00:00:05,690 --> 00:00:14,000
Hi, guys, in this lesson, we will create a configuration on our project, Hiroku needs three different

2
00:00:14,000 --> 00:00:17,870
configuration files for a Supreme Court project.

3
00:00:19,040 --> 00:00:28,190
These are F.J., some profiles and system properties on APJ Sun.

4
00:00:28,520 --> 00:00:38,690
We can describe the Hiroku properties like name of app resources, of AB Delt package, etc..

5
00:00:39,260 --> 00:00:45,970
Actually, we describe how our app will be built in the profile.

6
00:00:46,730 --> 00:00:49,100
We declare process types.

7
00:00:49,820 --> 00:01:02,210
We can have multiple processes, multiple modules like Worker WAP, etc. in the system properties.

8
00:01:02,750 --> 00:01:08,030
We declared the basic system settings like our Java version.

9
00:01:09,270 --> 00:01:13,100
Okay, now let's start with the APJ.

10
00:01:13,100 --> 00:01:23,780
Sonthi Hiroku has some basic configuration settings like name BEEL type environmental variables, etc.

11
00:01:24,140 --> 00:01:28,940
We can describe them under the JSON on our project.

12
00:01:30,890 --> 00:01:41,090
First of all, let's create an adjacent file under the project APJ, some will be JSON object and here

13
00:01:41,120 --> 00:01:43,610
we can customize properties.

14
00:01:44,240 --> 00:01:48,500
We can find all properties from the heroic page easily.

15
00:01:49,940 --> 00:01:55,190
We can find it like a page on schema on the Google.

16
00:01:57,320 --> 00:02:02,840
We can see all properties in here and the example format for it.

17
00:02:07,600 --> 00:02:13,840
Now we can describe our properties, our first property will be the name.

18
00:02:18,250 --> 00:02:24,010
Then we will describe the attack, we will use Gradle as it built back.

19
00:02:33,890 --> 00:02:38,270
OK, these properties will be enough for beginning here.

20
00:02:38,290 --> 00:02:46,160
We can give more details about it, but we can handle all properties from the Heroku interface is the

21
00:02:46,160 --> 00:02:46,570
author.

22
00:02:48,440 --> 00:02:52,750
Now we will create a profile for Hiroku Hiroku.

23
00:02:52,760 --> 00:03:00,980
Apps include a profile that specifies the comments that are executed by the app on Stata.

24
00:03:01,760 --> 00:03:06,230
We can use that profile to declare a very of process types.

25
00:03:06,800 --> 00:03:09,160
We can describe our apps web service.

26
00:03:09,890 --> 00:03:13,840
We can create only a single web server for our project.

27
00:03:14,570 --> 00:03:22,820
For example, if our project has a multi module and we want to create a web server for all modules,

28
00:03:23,240 --> 00:03:24,730
we could do it.

29
00:03:24,920 --> 00:03:30,490
We're here because Hiroku provides a single Web server for a project.

30
00:03:31,220 --> 00:03:34,750
Of course we can scale them with load balancers.

31
00:03:35,750 --> 00:03:40,430
Secondly, we can describe multiple types of work, reprocesses.

32
00:03:41,090 --> 00:03:44,210
Also, we can set environment variables.

33
00:03:44,210 --> 00:03:47,030
We are tasks now.

34
00:03:47,030 --> 00:03:49,580
We can create it under the project.

35
00:03:50,090 --> 00:03:54,830
We will have only a web resource here.

36
00:03:54,980 --> 00:03:57,560
We will call Java exec comments.

37
00:03:58,550 --> 00:04:04,340
Our first environment will be Cypriote, that Actifed, that profile.

38
00:04:05,330 --> 00:04:06,950
It will be for production mode.

39
00:04:09,080 --> 00:04:12,070
So we will use production configuration properties.

40
00:04:13,520 --> 00:04:18,620
Secondly, we will use the port number generated by Hiroko.

41
00:04:20,470 --> 00:04:28,750
He has a specific environment key for ports, so we can use it directly.

42
00:04:29,620 --> 00:04:36,420
Thirdly, we will specify the build your pet to find it.

43
00:04:36,760 --> 00:04:39,760
We can assemble the project.

44
00:04:42,950 --> 00:04:46,790
We can assemble the project from the gradle top.

45
00:04:48,950 --> 00:04:59,240
When we assemble the project in spring two point five or later, we will see two fires.

46
00:04:59,930 --> 00:05:07,320
One of them is plain George and the other one is an executables GFI plane.

47
00:05:07,430 --> 00:05:17,520
Zha is a the legal standard file that contains only the modules, classes and resources executable.

48
00:05:17,580 --> 00:05:26,480
Jafarzadeh is a springboard for Hadija that contains all of the modules, dependencies as well as its

49
00:05:26,480 --> 00:05:28,280
classes and resources.

50
00:05:29,360 --> 00:05:36,860
So we don't need that plane jash so we can disable it from the build Credle.

51
00:05:38,990 --> 00:05:41,750
Then we can refresh the greater.

52
00:05:44,560 --> 00:05:48,460
Then we can clean and assemble the project again.

53
00:06:19,810 --> 00:06:26,660
Finally, we should describe the job aversion for Hiroko to describe it.

54
00:06:26,950 --> 00:06:29,260
We will use system properties.

55
00:06:29,980 --> 00:06:31,870
First of all, let's create it.

56
00:06:36,290 --> 00:06:41,220
Then we will specify our original version as Jawa 11.

57
00:06:43,460 --> 00:06:44,040
OK.

58
00:06:44,210 --> 00:06:48,420
Our Hiroku configuration is red, that's all.

59
00:06:48,740 --> 00:06:49,280
Thank you.
