WEBVTT
1

00:00:05.590 --> 00:00:11.800

Hi, guys, in this lesson, we will implement the purchase service, we will use the purchase service



2

00:00:11.950 --> 00:00:19.120

to fetch purchase and points that we created on the server side, we created endpoints like to save,



3

00:00:19.120 --> 00:00:24.340

purchase and list all purchases of user on the server side.



4

00:00:24.670 --> 00:00:31.760

In this lesson, we will create functions to fetch these and points with the Anglet HDTV Glines.



5

00:00:32.650 --> 00:00:35.620

Let's implement them one by one.



6

00:00:36.010 --> 00:00:43.210

We can create a service class with the energy generate comment our comments, feel the energy, generate



7

00:00:43.480 --> 00:00:45.610

service and service.



8

00:00:46.300 --> 00:00:52.660

Our service name will be purchased but are created under the services folder.



9

00:00:53.200 --> 00:01:01.060

So I specify it like services select purchase and it will create our service class.



10

00:01:06.520 --> 00:01:14.800

I'll open it, first of all, I need to describe Baz urine for purchase, and once they can find the



11

00:01:14.800 --> 00:01:23.770

server you it from the environments, then I'll add the purchase history postfix because each request



12

00:01:23.770 --> 00:01:29.050

for the purchase and coins start with API purchase history.



13

00:01:30.280 --> 00:01:32.380

We can check it also from the server side.



14

00:01:41.470 --> 00:01:48.700

Then I'll extend the request based service because I use the base methods that were described there.



15

00:01:52.220 --> 00:01:58.610

Then we can inject our services under construct, first of all, we will use authentication service



16

00:01:58.610 --> 00:01:59.930

to get the current users.



17

00:02:00.800 --> 00:02:05.900

Secondly, we need HTP client because we will use it to send two requests.



18

00:02:06.560 --> 00:02:10.490

Actually, both of them will be used by this superclass.



19

00:02:10.490 --> 00:02:17.030

Also, the class which implements an obstacle must call in the constructor.



20

00:02:17.240 --> 00:02:21.380

So we will call the function here with the parameters.



21

00:02:22.100 --> 00:02:25.250

OK, now we can create our HTTP requests.



22

00:02:25.760 --> 00:02:28.610

Our first method is save purchase.



23

00:02:29.070 --> 00:02:36.740

We will take a purchase object as a parameter and of course the result of it will be observable because



24

00:02:37.070 --> 00:02:40.570

the result of the HTTP request is observable.



25

00:02:41.360 --> 00:02:46.040

Oreste method will be our posterized API.



26

00:02:46.040 --> 00:02:53.720

That is API purchase history and we will send the purchase object as a form data.



27

00:02:54.410 --> 00:02:59.270

Finally, we will send the HTP headers in the auction block.



28

00:02:59.930 --> 00:03:07.580

With the auction block, we can send a lot of different properties like HTP header, HTTP content,



29

00:03:07.760 --> 00:03:09.680

HTP parameter, etc..



30

00:03:09.920 --> 00:03:17.030

Our last method will be get all purchased items to get purchase items.



31

00:03:17.210 --> 00:03:22.880

We will santur get request to the server site to get all purchases.



32

00:03:23.090 --> 00:03:28.070

Our rest API, that is API purchase history.



33

00:03:31.730 --> 00:03:35.800

Finally, we will send the Hadass as property of the oceans.



34

00:03:37.040 --> 00:03:41.420

OK, that's all about purchase service implementation.



35

00:03:41.720 --> 00:03:42.200

Thank you.

