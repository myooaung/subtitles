1
00:00:05,600 --> 00:00:12,200
Hi, guys, in this lesson, we will configures environmental variables for the production, so from

2
00:00:12,200 --> 00:00:15,980
now on we will start to prepare our application for production.

3
00:00:16,340 --> 00:00:20,870
We can create environmental variables in England with different profiles.

4
00:00:21,200 --> 00:00:24,530
But these variables are hard coded variables.

5
00:00:24,890 --> 00:00:33,200
With Anglet, we can store those information in an environment that testifies, but we need to commit

6
00:00:33,200 --> 00:00:34,600
them in the repository.

7
00:00:35,030 --> 00:00:44,300
And again, this is not what we want because if there are variables are sensitive data, we could not

8
00:00:44,300 --> 00:00:50,680
push them to the repository or these items can be changeable items over time.

9
00:00:51,050 --> 00:00:56,360
So we need to supply them with custom environmental variables.

10
00:00:56,930 --> 00:01:03,890
On Hiroku A.W. s or other platforms, we can describe custom environmental variables easily.

11
00:01:04,460 --> 00:01:10,760
These custom variables are generally sensitive variables or volatile variables.

12
00:01:10,940 --> 00:01:16,400
So I mean, we couldn't push them in hardcoded format on our repositories.

13
00:01:16,820 --> 00:01:17,720
At this point.

14
00:01:17,990 --> 00:01:25,340
We can access these environmental variables with process, start and prefix.

15
00:01:26,030 --> 00:01:35,840
What does that mean if we are using clode systems like Hiroku, A.W., etc. to build our application,

16
00:01:36,440 --> 00:01:42,590
we can usually set those environments information directly in the system settings.

17
00:01:43,070 --> 00:01:49,010
We can access the system variables from that end config files.

18
00:01:49,010 --> 00:01:54,620
So process that env is used to reach the system variables.

19
00:01:55,100 --> 00:02:02,450
Engelhard is built with Engler's Cianni, which is a node application, but we are not able to access

20
00:02:02,450 --> 00:02:11,600
process that n directly from within the application during that delts process as it is not processed

21
00:02:11,600 --> 00:02:13,370
as a node application.

22
00:02:13,700 --> 00:02:20,390
We won't have access to process environment at compile time of the angular code.

23
00:02:20,600 --> 00:02:31,070
So to do it, we should treat that end file somehow and we should override our environment variables

24
00:02:31,070 --> 00:02:33,320
on the of time to do it.

25
00:02:33,470 --> 00:02:36,560
We have two important ANTM packets.

26
00:02:36,920 --> 00:02:40,550
One is the dart and the library.

27
00:02:41,720 --> 00:02:44,420
It is used to create environmental variables.

28
00:02:44,700 --> 00:02:46,370
The other one is F.

29
00:02:46,390 --> 00:02:46,850
S.

30
00:02:46,880 --> 00:02:49,100
It has used to write the five.

31
00:02:49,610 --> 00:02:51,560
Our steps will go on like that.

32
00:02:51,560 --> 00:02:55,100
First of all, we will read the system and environment variables.

33
00:02:55,430 --> 00:03:00,790
Then we will set them according to our profile, development or production.

34
00:03:01,160 --> 00:03:05,510
Finally, we will write them to our angular environment files.

35
00:03:06,140 --> 00:03:07,400
Now we can implement it.

36
00:03:07,820 --> 00:03:15,800
First of all, I'll install the dart and library because I'll read environmental variables from the

37
00:03:15,800 --> 00:03:20,860
dart end file or system variables with dots and package.

38
00:03:23,710 --> 00:03:27,670
Then I hit enter and my parents will be installed.

39
00:03:36,910 --> 00:03:43,990
Then I'll carry the fire to set the environment variables from system variables, I can create a fire

40
00:03:44,000 --> 00:03:50,800
like set the ash and not just under the project.

41
00:03:50,950 --> 00:03:51,960
This will be your.

42
00:03:53,620 --> 00:04:02,650
First of all, I'll import the file system, plus I'll use it to write my environmental variables to

43
00:04:02,650 --> 00:04:05,500
angular environment that specifies.

44
00:04:11,050 --> 00:04:20,230
Secondly, I'd import the dust and glass, I'll use it to rate environment variables from the dust and

45
00:04:20,230 --> 00:04:29,710
fly or system variables with that end to read environments variables I should call the conflict methods

46
00:04:29,860 --> 00:04:31,860
of the dot and class.

47
00:04:32,740 --> 00:04:35,670
From now on, I can reach environmental variables.

48
00:04:36,130 --> 00:04:40,270
Now I'll check the node environment, whether it is production or not.

49
00:04:40,840 --> 00:04:46,240
I assume that the not environment will be served as a system variable.

50
00:04:51,380 --> 00:05:00,830
Then if the not environment is in production mode, I'll change the environment, that product under

51
00:05:00,830 --> 00:05:02,090
the environment's focus.

52
00:05:02,750 --> 00:05:11,000
Otherwise, I'll update the environment, satisfied to describe the pad and use the relative pat.

53
00:05:35,510 --> 00:05:44,030
And we will access our environment variables in the process, that environment object thanks to that

54
00:05:44,030 --> 00:05:53,810
and and we will all the content of the environment, that tesfai here we have only two variables.

55
00:05:54,650 --> 00:05:55,880
One is production.

56
00:05:56,580 --> 00:05:58,340
Other one is bais.

57
00:05:58,340 --> 00:06:05,510
You are production variable will be a billion radio and we have already found it.

58
00:06:06,470 --> 00:06:13,910
Secondly, we will get the base water from the system variables so we can reach it with the process

59
00:06:13,910 --> 00:06:16,310
that an object.

60
00:06:31,960 --> 00:06:41,890
Finally, we will overwrite the environment, that tesfai to write it, we have right file function

61
00:06:41,890 --> 00:06:48,930
that comes from filesystem class, right file function expects three arguments.

62
00:06:49,420 --> 00:06:54,450
One is Target Patts, the other one is Cantante of the file.

63
00:06:54,820 --> 00:06:58,350
The last one is the callback function.

64
00:06:59,260 --> 00:07:04,870
If we get an error, we can throw the exception and we can write it to the council.

65
00:07:13,500 --> 00:07:22,370
OK, now our script is ready, now we can create a script comment for it to call it effectively in real

66
00:07:22,410 --> 00:07:29,780
time to create a script comment, we can use the package that Jason Suntai here.

67
00:07:29,940 --> 00:07:31,320
We have scripts.

68
00:07:31,920 --> 00:07:37,950
These scripts are predefined commands for the NPM package, for example.

69
00:07:37,950 --> 00:07:44,370
Then the Cold and TPIMs third comment, it will trigger the end user comment.

70
00:07:44,640 --> 00:07:50,610
Or when we call the NPM Beeld comment, it will trigger the MGB comment.

71
00:07:50,940 --> 00:07:54,450
For example, let's see the AMPM start comment.

72
00:07:55,080 --> 00:07:58,890
First of all, I stop my application, then I'll call it.

73
00:08:08,720 --> 00:08:15,670
When I call it and comment will be called and we can access the application from the Bronx.

74
00:08:25,270 --> 00:08:33,300
So we can describe AMPM comments on package that Jason like this now I'll create a comment for setting

75
00:08:33,310 --> 00:08:34,660
the environmental variables.

76
00:08:35,200 --> 00:08:41,500
For example, we can create a comment like Quantic in context comment.

77
00:08:41,650 --> 00:08:49,540
I'll call my comment, but not just so our comment will be not set.

78
00:08:49,720 --> 00:08:53,060
That environment that Jess.

79
00:08:54,280 --> 00:09:03,970
OK, now our comment is really I can call it like ampm config, but first of all, I should create some

80
00:09:03,970 --> 00:09:05,260
system variables.

81
00:09:05,260 --> 00:09:11,260
I can create it from the console like export, not environment equals production.

82
00:09:11,260 --> 00:09:13,030
So value cheapish.

83
00:09:13,450 --> 00:09:18,220
So I can describe it like export variable name ECLSS variable value.

84
00:09:22,030 --> 00:09:26,830
Or I can create that environment file under the project.

85
00:09:32,920 --> 00:09:36,260
Then I can create my variables line by line.

86
00:09:36,460 --> 00:09:44,130
For example, we need a variable like base urate so I can describe it in that environment.

87
00:09:44,160 --> 00:09:49,270
FYI, if I have other variable like that, I can describe it also.

88
00:09:50,650 --> 00:09:55,600
OK, now I can call the AMPM config comment, this comment.

89
00:09:56,020 --> 00:09:56,710
All right.

90
00:09:56,710 --> 00:10:05,050
The environment that brought that tesfai with system variables because I set the not environment as

91
00:10:05,050 --> 00:10:05,710
production.

92
00:10:12,150 --> 00:10:13,870
OK, it looks perfect.

93
00:10:14,310 --> 00:10:21,300
That's all for this lesson in next lessons I included into the build process.

94
00:10:21,900 --> 00:10:22,640
That's all.

95
00:10:22,920 --> 00:10:23,430
Thank you.
