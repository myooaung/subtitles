WEBVTT
1

00:00:05.440 --> 00:00:12.010

Hi, guys, in this lesson, we will customize Web security configuration, shipping security mean it



2

00:00:12.010 --> 00:00:22.580

provides to US security features, ID and authorization and handles both of them or authentication messages.



3

00:00:23.410 --> 00:00:27.830

Actually, we talk about it in our previous lesson.



4

00:00:28.480 --> 00:00:37.330

The important thing is how can we reach the authentication manager in Sibling Sibling Security provides



5

00:00:37.330 --> 00:00:44.400

the Web security Conficker adapter class to arrange the authentication manage these GOLOS provides a



6

00:00:44.410 --> 00:00:50.980

way to override and customize the security configuration according to our application requirements.



7

00:00:51.820 --> 00:00:59.800

With using these golos, we can also configure HTP security so we can set restrictions so different



8

00:00:59.800 --> 00:01:06.150

parts by using math chains to set different parts and a lot rules.



9

00:01:06.970 --> 00:01:10.990

Now we can start to implement it to do it.



10

00:01:11.080 --> 00:01:14.950

First of all, let's create a new class under the security package.



11

00:01:15.640 --> 00:01:18.460

Our class name will be security config.



12

00:01:20.800 --> 00:01:28.210

To customize our security configuration, we will extend Web security to configure adductor in our class



13

00:01:29.020 --> 00:01:34.470

and we will add the enable their security annotation on top of the class.



14

00:01:35.920 --> 00:01:43.330

This annotation test to the sprint security that this class is the Web security configuration class.



15

00:01:44.230 --> 00:01:52.500

And we will add configuration annotation because we will describe some beans in this class.



16

00:01:52.510 --> 00:01:57.590

So to describe beans in spring, we need configuration annotation.



17

00:01:59.530 --> 00:02:06.550

First of all, let's configure alternate station manager, build it, installing security authentication



18

00:02:06.550 --> 00:02:10.230

manager builder is in charge for authentication.



19

00:02:10.660 --> 00:02:20.320

So we need to override Method Configure, which receives authentication manager builders as espera and



20

00:02:21.070 --> 00:02:24.280

use it to set type of authentication.



21

00:02:25.030 --> 00:02:32.540

They can implement user data service to specify how users should be retrieved from the system.



22

00:02:33.070 --> 00:02:38.590

Also, we can specify the password encoder on authentication manager able to.



23

00:02:39.070 --> 00:02:46.690

Actually, we have already described our custom user data service and custom password encoder.



24

00:02:47.260 --> 00:02:53.080

We can assign both of them to the authentication manager, by the way.



25

00:02:53.380 --> 00:03:00.560

We can move the password encoder being from the main class to security config because security config



26

00:03:00.580 --> 00:03:02.230

will be meaningful for it.



27

00:03:02.620 --> 00:03:10.750

And security config is a separate configuration class so we can describe beings in this class after



28

00:03:10.750 --> 00:03:12.110

injecting them.



29

00:03:12.490 --> 00:03:16.210

We will assign them to authentication manager to be able to.



30

00:03:27.870 --> 00:03:36.300

OK, our authentication manager builder is ready now we can configure HTP security, we can configure



31

00:03:36.300 --> 00:03:44.520

authorization using the HTP security object by overriding the method configure of class, the security



32

00:03:44.520 --> 00:03:49.070

configure adapter, which receives HTP security as a parameter.



33

00:03:49.860 --> 00:03:59.010

Here we can set restrictions to different parts by using Mattachine to set different parts and load



34

00:03:59.100 --> 00:03:59.640

roles.



35

00:04:00.480 --> 00:04:09.150

With this configuration, we will all write the configure method in security once we add the security



36

00:04:09.150 --> 00:04:11.160

dependency in our application.



37

00:04:11.400 --> 00:04:15.200

By default, all the orders need authentication.



38

00:04:15.780 --> 00:04:21.560

What if we want to provide different areas that have different access requirements?



39

00:04:22.200 --> 00:04:23.220

Exactly.



40

00:04:23.400 --> 00:04:28.050

We should overwrite this configuration method in this configure method.



41

00:04:28.440 --> 00:04:36.300

First of all, we will enable cross origin resource sharing access because we will use different origins



42

00:04:36.570 --> 00:04:38.490

on the backend and front end.



43

00:04:38.610 --> 00:04:39.840

So we needed.



44

00:04:42.410 --> 00:04:50.600

Secondly, we will disable cross site request forgery, crosseyed request forgery, also known as One-Click



45

00:04:50.600 --> 00:04:58.430

attack or session writing, attackers can use session really or Kukerin you and use it as a web security



46

00:04:58.430 --> 00:04:59.240

vulnerability.



47

00:04:59.900 --> 00:05:02.750

But they don't use session authentication.



48

00:05:03.470 --> 00:05:05.150

We will use JWT.



49

00:05:05.570 --> 00:05:09.890

JWT is also not constant, not predictable.



50

00:05:10.010 --> 00:05:19.430

So attackers cannot reach it if we don't store it on cookies on the front and we will store the JWT



51

00:05:19.430 --> 00:05:30.950

in local storage and send it in an authorization header, then our site is protected against cross site



52

00:05:30.950 --> 00:05:31.760

request forgery.



53

00:05:32.990 --> 00:05:36.080

To sum up, cookies are vulnerable.



54

00:05:36.620 --> 00:05:42.830

If we don't use random headers on cookies, attackers can handle them easily.



55

00:05:42.830 --> 00:05:53.090

So crosseyed exposure is generated randomly for each guest or JWT is used on local stores in spring



56

00:05:53.090 --> 00:05:53.710

security.



57

00:05:54.230 --> 00:06:04.790

We also handle HTP sessions when we say session after the user is often authenticated, other requests



58

00:06:05.060 --> 00:06:09.980

will require any authentication or how long the session will Sawai.



59

00:06:11.270 --> 00:06:16.910

Actually, the station manager, solves these kinds of problems.



60

00:06:17.420 --> 00:06:21.380

In our case, we want to use this paintless session.



61

00:06:21.620 --> 00:06:27.260

It is a guaranteed way that the application will not create any session at all.



62

00:06:27.650 --> 00:06:38.660

So each and every request needs to be authenticated because we will use JWT as authentication, then



63

00:06:38.660 --> 00:06:40.790

we can authorize requests.



64

00:06:42.580 --> 00:06:46.460

In default, we will authorize all requests except log in and register.



65

00:06:46.480 --> 00:06:55.140

But for now, we can plan our logon and register end points that will start with API authentication.



66

00:06:55.960 --> 00:06:59.050

So according to it, we can permit our requests.



67

00:07:12.620 --> 00:07:22.610

OK, now our HTP secret is also ready now time to create an automatism many will be actually executed.



68

00:07:22.640 --> 00:07:30.770

A Conficker adapter also provides that we will just override it, then we will specify it as a bin with



69

00:07:30.770 --> 00:07:31.910

bin annotation.



70

00:07:38.610 --> 00:07:47.190

Actually, the alternate station manager has been idee on Sprink, but we can reach it from being I.D.



71

00:07:47.580 --> 00:07:55.500

easily being idee is unidentified for being so DPN will be the same as an override and be.



72

00:07:57.470 --> 00:08:00.750

OK, that's all about sibling security configuration.



73

00:08:01.310 --> 00:08:09.260

Finally, this class is a configuration class, so we can describe a new thing or we can customize other



74

00:08:09.260 --> 00:08:10.550

sibling configurations.



75

00:08:11.380 --> 00:08:18.740

Should define looing origins for cross origin resource sharing so we can describe it here.



76

00:08:18.740 --> 00:08:27.440

Also with cross origin resource sharing, we can specify a lot of origins, a lot methods and a lot.



77

00:08:27.440 --> 00:08:35.690

That's, for example, if our application has only post requests, then we can restrict a lot methods



78

00:08:35.690 --> 00:08:37.100

with post methods.



79

00:08:37.340 --> 00:08:43.700

Or if they have a specific domain like example dot com, then we can allow it.



80

00:08:43.730 --> 00:08:51.830

Only if a request is not allowed by cross origin resource sharing, then the request will be blocked.



81

00:08:52.790 --> 00:08:54.800

Now let's implement it.



82

00:08:55.370 --> 00:08:58.700

We can do it with that NBC configuration.



83

00:09:00.170 --> 00:09:05.780

This is a specific class for cross origin resource sharing.



84

00:09:07.570 --> 00:09:19.270

Configuration, let's create a method like cause configuration and this method will be a sprint, B



85

00:09:20.230 --> 00:09:25.720

sibling ping is used to create nine instances and default instances are Singleton.



86

00:09:26.860 --> 00:09:31.270

So this will be created one time and we can reach it throughout the application.



87

00:09:33.650 --> 00:09:37.820

And this matter to people, all right, the ad calls mapping smattered.



88

00:09:39.180 --> 00:09:42.540

We will allow all origins for testing's.



89

00:09:52.900 --> 00:10:01.080

And ellos methods and and law, all methods and allow all parts also.



90

00:10:05.450 --> 00:10:06.900

OK, that's all.



91

00:10:07.130 --> 00:10:07.700

Thank you.

