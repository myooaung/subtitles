1
00:00:05,700 --> 00:00:13,530
Hi, guys, in this lesson, we will examine the project structure that is created by Angler Kelley

2
00:00:14,280 --> 00:00:23,010
and we will see how Engler's first application, we will try to understand these steps in the steps

3
00:00:23,700 --> 00:00:24,630
in this project.

4
00:00:24,910 --> 00:00:32,460
We can see a couple of folders and files were created that might look intimidating at the beginning,

5
00:00:32,820 --> 00:00:41,400
but most of the files you see under the main folder are only required for configuring the project.

6
00:00:41,940 --> 00:00:49,570
And the default configuration should be absolutely fine and in the source folder.

7
00:00:49,890 --> 00:00:52,620
That is where you create your project.

8
00:00:53,380 --> 00:00:55,320
Now, here we are.

9
00:00:55,320 --> 00:01:04,660
Find even more files, but we don't really need to touch all these files here.

10
00:01:04,890 --> 00:01:15,630
The most important file is index that estimate our application will have a single page and everything

11
00:01:15,630 --> 00:01:17,560
goes on with this page.

12
00:01:18,120 --> 00:01:21,170
We don't need to change anything here.

13
00:01:22,020 --> 00:01:26,850
We are going to write all are caught in the Web folder.

14
00:01:27,930 --> 00:01:38,190
Here we also have an assets folder, asset folder could be used for some static assets in our application,

15
00:01:38,340 --> 00:01:48,870
like emotes, etc. And we also have an environment folder environments folder can be used for environment

16
00:01:48,870 --> 00:01:56,230
variables if they need different profiles and we need different variables for these profiles.

17
00:01:56,670 --> 00:02:03,890
For example, we can have two different profiles like development and production on production.

18
00:02:04,200 --> 00:02:13,860
We can go in with Clojure, but on development we can go on with localhost so we can customize these

19
00:02:13,860 --> 00:02:16,910
kinds of things with environments.

20
00:02:17,700 --> 00:02:22,380
OK, we saw the file and folder structure of English.

21
00:02:22,890 --> 00:02:29,660
Now we will examine how browsers or how servers host our application.

22
00:02:30,510 --> 00:02:35,580
First of all, let's serve our application with Engy serve.

23
00:02:36,630 --> 00:02:42,820
The important thing here, we should serve it from the project folder.

24
00:02:43,440 --> 00:02:53,610
We can run the server comment and this comment will compile and serve our application from for thousands

25
00:02:53,790 --> 00:02:56,720
to hundreds powered by default.

26
00:02:57,540 --> 00:03:01,620
Of course we can change the port number with some customization.

27
00:03:01,620 --> 00:03:06,330
Is it then we can reach it from our browser.

28
00:03:07,590 --> 00:03:15,820
When we run it, we can see some dummy content that was created by Angela Saili by default.

29
00:03:16,320 --> 00:03:25,620
The important question is, what is this dummy data and where is this dummy data on your application?

30
00:03:27,320 --> 00:03:34,820
Engelhardt is a single page application and our pages indexed that estimate.

31
00:03:35,860 --> 00:03:45,790
When we check index that HDMI, this is a normal e-mail side that has a title and the body of the fight

32
00:03:46,480 --> 00:03:54,650
on body index, that e-mail doesn't have any content, but it includes and other components.

33
00:03:55,390 --> 00:03:57,520
It is at root.

34
00:03:58,570 --> 00:04:08,260
Then we dive into the app route, it redirects to app that component that, yes, here we can see the

35
00:04:08,260 --> 00:04:09,870
app component decorator's.

36
00:04:10,960 --> 00:04:19,750
This seems to be important, but more important right now, you see that we have this Selecter property,

37
00:04:19,930 --> 00:04:25,570
which assigns Citilink as a value and this stream calls app route.

38
00:04:26,470 --> 00:04:36,130
This is clearly the same text as in the index that HDMI, and this actually is the information that

39
00:04:36,130 --> 00:04:43,540
Angerer needed to be able to replace this part here in the index, that e-mail file with the template

40
00:04:43,540 --> 00:04:45,580
of the component.

41
00:04:47,810 --> 00:04:53,660
And this actually is the information that Angela needed to be able to replace this part here in the

42
00:04:53,660 --> 00:04:57,500
next e-mail file with the template of these companies.

43
00:04:58,840 --> 00:05:02,590
Now we understand where the dummer data comes from.

44
00:05:03,960 --> 00:05:12,480
But we need one more thing, how angler serves these components, actually, how Angular compiles these

45
00:05:12,480 --> 00:05:15,610
F components on index that estimate.

46
00:05:16,320 --> 00:05:21,900
Let's dive deeper into how to create components and how to configure that.

47
00:05:22,650 --> 00:05:30,150
We try to figure out how angular is triggered, how is it kicked off to actually run over our body in

48
00:05:30,150 --> 00:05:32,160
the index that HTML5?

49
00:05:32,790 --> 00:05:41,370
The answer is in the final index that ASML file getting served in the browser and we can verify this

50
00:05:41,370 --> 00:05:45,350
by inspecting the source code here.

51
00:05:45,570 --> 00:05:49,200
We get a couple of split imports at the end.

52
00:05:50,360 --> 00:05:59,470
These are injected by Engler's Clie automatically, so that is why we don't see it here in the raw index

53
00:05:59,480 --> 00:06:09,080
that they might find here, we don't have any script imports, but whenever it is NDR, a process rebuilds

54
00:06:09,080 --> 00:06:09,920
our project.

55
00:06:10,040 --> 00:06:19,980
It will create bundles of strip secret bundles and automatically add imports in the index that HDMI

56
00:06:20,010 --> 00:06:20,260
fine.

57
00:06:20,540 --> 00:06:31,370
So in the final five, these secret imports here are present and these secret imports will contain our

58
00:06:31,400 --> 00:06:34,430
own code to sew.

59
00:06:34,580 --> 00:06:37,880
These secret plants are therefore executed.

60
00:06:39,430 --> 00:06:47,950
Our second missing point is here, we don't have any scarified on index that estimate, but somehow

61
00:06:48,070 --> 00:06:50,940
Engelhard generates these secrets.

62
00:06:50,950 --> 00:06:56,860
But we know that to generate this kind of scripts we need, that means cryptid.

63
00:06:57,250 --> 00:06:58,650
Engelhard handles it.

64
00:06:58,780 --> 00:07:01,350
We are may that tesfai.

65
00:07:02,290 --> 00:07:05,890
Let's have a closer look at it here.

66
00:07:05,950 --> 00:07:14,160
You can see that we get a couple of imports that we check if we are in production mode or not.

67
00:07:14,620 --> 00:07:17,300
You basically turn off some warning message.

68
00:07:17,710 --> 00:07:19,030
I can tell you that.

69
00:07:19,030 --> 00:07:22,810
But most importantly, here is D-line.

70
00:07:23,370 --> 00:07:29,820
These boot straps starts our angular application by passing an app module.

71
00:07:30,790 --> 00:07:31,750
Let's look at it.

72
00:07:32,230 --> 00:07:37,720
If we look at it, we can see some services and some components.

73
00:07:38,080 --> 00:07:48,850
But most importantly, for now here we get these bootstrap array, which basically lists all the components

74
00:07:49,090 --> 00:07:52,650
which should be known to ANGULAR at the point of time.

75
00:07:52,930 --> 00:08:03,130
It analyzes our index that HDMI light and hear the circle us because here we reference our app component.

76
00:08:03,250 --> 00:08:05,650
So angular get started.

77
00:08:05,890 --> 00:08:16,180
These men, that tesfai just started that the bootstrap and angular application and we passed this module

78
00:08:16,330 --> 00:08:17,470
as an argument.

79
00:08:17,650 --> 00:08:26,020
In this module, we tell Angerer there is these app component, which you should know when you try to

80
00:08:26,020 --> 00:08:33,880
start your S and angular now analysers the app component and reach the set up we pass here.

81
00:08:33,880 --> 00:08:39,460
And now Engelhard is able to handle Applewood in the index that HDMI Alfi.

82
00:08:40,030 --> 00:08:43,990
Actually this is how the angular application starts.

83
00:08:44,380 --> 00:08:44,920
It is.

84
00:08:44,920 --> 00:08:45,760
Summarize it.

85
00:08:46,000 --> 00:08:49,050
We have two main components in our project.

86
00:08:49,570 --> 00:08:58,360
These are men that Tierce and indexed that HDMI angular configuration works with that index.

87
00:08:58,360 --> 00:09:07,150
That estimate is responsible for serving the application and main Tierce is responsible for generating

88
00:09:07,150 --> 00:09:11,340
the bundles and assigning the components, etc..

89
00:09:12,100 --> 00:09:13,990
Main that T.

90
00:09:14,010 --> 00:09:20,950
S configures, components, services providers, pipes, cetera.

91
00:09:20,950 --> 00:09:24,160
With the app module ID module bootstraps.

92
00:09:24,160 --> 00:09:30,880
The app component and app component serves the content from the index that estimate.

93
00:09:31,590 --> 00:09:38,260
OK, now let's edit our app component and see the change on the browser.

94
00:09:38,890 --> 00:09:43,420
First of all, let's clear the content except the angular icon.

95
00:09:44,890 --> 00:09:47,740
And corrida, Hallowell text.

96
00:09:49,240 --> 00:09:55,720
By the way, this is a typical e-mail form, so we can use basic HDMI components easily.

97
00:09:59,780 --> 00:10:07,310
When we created Andy Serwer will detect the change and automatically deploy chains for us.

98
00:10:12,540 --> 00:10:20,430
There is also one more important thing here, when we check the source code, we can see changes on

99
00:10:20,430 --> 00:10:26,010
the source code because angular compliance code on runtime with scripts.

100
00:10:26,160 --> 00:10:29,010
So it doesn't affect the source code.

101
00:10:30,510 --> 00:10:32,270
OK, that's all for today.

102
00:10:33,060 --> 00:10:33,570
Thank you.
