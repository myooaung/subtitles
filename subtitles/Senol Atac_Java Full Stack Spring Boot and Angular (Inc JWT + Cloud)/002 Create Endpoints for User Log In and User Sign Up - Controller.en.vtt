WEBVTT
1

00:00:05.740 --> 00:00:14.620

Hi, guys, in this lesson, we will implement authentication and points we will have to and points



2

00:00:15.280 --> 00:00:20.920

these will be signed in and signed up to do it.



3

00:00:21.160 --> 00:00:23.140

We will carry the control class.



4

00:00:23.740 --> 00:00:30.050

Like we said in previous lessons in cybering, there is a cycle in model.



5

00:00:30.050 --> 00:00:31.800

We control the structure.



6

00:00:32.680 --> 00:00:38.740

First of all, describe model causus later call model classes from services.



7

00:00:39.040 --> 00:00:45.730

Finally, call services from controllers and controllers will return model classes.



8

00:00:46.330 --> 00:00:54.490

So in the previous lesson we described our authentication service in this lesson we will call it from



9

00:00:54.490 --> 00:01:00.580

the controller and we will map our rest API requests to do it.



10

00:01:00.580 --> 00:01:04.690

First of all, we will carry that controller class to do it.



11

00:01:04.690 --> 00:01:09.430

First of all, let's create a new package under our main package, our package.



12

00:01:09.430 --> 00:01:11.080

Name the controller.



13

00:01:12.880 --> 00:01:18.640

Under the controller package, we will create an authentication controller class.



14

00:01:20.330 --> 00:01:28.670

To describe authentication controllers, SRS controller Closs, we will add rest controller and attrition



15

00:01:28.670 --> 00:01:37.190

to it rest controller notation specifies the glass is a restful Web service, so the authentication



16

00:01:37.190 --> 00:01:41.840

controller class will have accessible and points with the rest API.



17

00:01:43.740 --> 00:01:52.860

Then we can add the mapping in addition to add prayer parts for all matters on authentication control.



18

00:01:53.530 --> 00:01:59.030

Actually, we have already described it in the security conflict glass.



19

00:01:59.820 --> 00:02:02.610

It will be API authentication.



20

00:02:03.270 --> 00:02:08.680

So these and points will be accessible by everybody.



21

00:02:08.700 --> 00:02:11.910

So they will be none authorized tat's.



22

00:02:14.290 --> 00:02:21.610

Later, they will call authentication service for dependency injection, and we can use autopilot in



23

00:02:21.610 --> 00:02:22.100

spring.



24

00:02:23.540 --> 00:02:29.680

And we also need to use our service to save use it for the registration methods.



25

00:02:36.810 --> 00:02:45.730

OK, now we can create our API methods, our first method will be signed up in the rest controller.



26

00:02:45.750 --> 00:02:53.820

We can describe every method with response and the copulation response entity is a copulation that contains



27

00:02:54.000 --> 00:02:58.350

HTP Haddish, HTP status and response body.



28

00:02:59.130 --> 00:03:07.990

For our sign up method, we will reach form letter of request with request, by the annotation, with



29

00:03:08.010 --> 00:03:12.510

using request, by the annotation we can reach form data.



30

00:03:13.080 --> 00:03:20.730

Similarly, we have request and paid variable annotations to reach and point variables.



31

00:03:21.480 --> 00:03:25.170

At this point, sprinklered API provides many utilities.



32

00:03:30.470 --> 00:03:41.540

Our mapping request method will be post mapping and the API part will be like API authentication plus



33

00:03:41.720 --> 00:03:44.270

sign up for.

