1
00:00:05,800 --> 00:00:14,650
Hi, guys, in this lesson, we will implement the authentication service in lessons we prepared our

2
00:00:14,650 --> 00:00:16,360
authentication backbone.

3
00:00:17,230 --> 00:00:23,620
From now on, we will use this backbone and we will use it for our signing operations.

4
00:00:24,320 --> 00:00:31,860
Actually, in this lesson, we will implement this in method to sign in.

5
00:00:32,350 --> 00:00:35,380
We will have that username and password.

6
00:00:35,710 --> 00:00:41,530
Then using these credentials, we will carry that JWT token.

7
00:00:42,160 --> 00:00:43,300
Let's implement it.

8
00:00:44,140 --> 00:00:51,910
First of all, we will create an identification service interface class and authentication service implementation

9
00:00:51,910 --> 00:00:55,090
class under the service package.

10
00:00:59,180 --> 00:01:04,190
Authentication service will implement the authentication service interface class.

11
00:01:06,150 --> 00:01:12,420
Authentication service will be a sibling service class, so it will be a business logic class.

12
00:01:15,420 --> 00:01:25,350
Then we have this sign in Madrid, it will take the user as a parameter and they turn JWT token as a

13
00:01:25,350 --> 00:01:29,020
response here is important.

14
00:01:30,090 --> 00:01:42,060
We want to convert from user info to the authentication object also then the automated ID Sebring security

15
00:01:42,210 --> 00:01:46,990
should also be avail of it to handle it.

16
00:01:47,220 --> 00:01:50,370
We will use the authentication manager.

17
00:01:51,420 --> 00:01:57,930
Authentication manager is the bridge between user and sibling security.

18
00:01:59,380 --> 00:02:09,110
Now we can implement it, first of all, we will inject authentication, Manege We can use Ultralight

19
00:02:09,130 --> 00:02:10,210
to inject it.

20
00:02:13,020 --> 00:02:22,950
Then we have this sign in Madrid, it will take the user as a parameter and they turn JWT token as a

21
00:02:22,950 --> 00:02:23,480
response.

22
00:02:29,020 --> 00:02:33,850
Then we will authenticate the user with username and password.

23
00:02:36,010 --> 00:02:37,610
Here is important.

24
00:02:38,680 --> 00:02:49,040
We want to convert from user info to the authentication object also then be accommodated.

25
00:02:49,330 --> 00:02:54,810
Sibling security should also be avail of its sibling.

26
00:02:54,820 --> 00:02:59,320
Security has a specific provider class for credentials.

27
00:03:00,520 --> 00:03:05,680
That is username password authentication token here.

28
00:03:05,950 --> 00:03:11,170
When we authenticate it, we will handle an automatically object.

29
00:03:12,110 --> 00:03:20,320
Actually, the authentication manager will call the load by username method from user data service.

30
00:03:21,010 --> 00:03:27,220
If you remember it, we implemented it on custom user data service.

31
00:03:28,120 --> 00:03:34,150
So our authentication object will contain the user principle object.

32
00:03:35,080 --> 00:03:41,860
To reach this user principle object, we can use the authentication principle method.

33
00:03:43,490 --> 00:03:49,140
Finally, we will return JWT from the use of principle object.

34
00:03:49,580 --> 00:03:56,820
Actually, we already have this method on JWT provider, so we can call it easily.

35
00:03:57,800 --> 00:04:00,080
Firstly, we will inject it.

36
00:04:01,220 --> 00:04:04,310
Then we will call the General Tolkan Matt.

37
00:04:07,100 --> 00:04:18,530
OK, now JWT token is really we will serve it with the user object to do it, we can add a field to

38
00:04:18,530 --> 00:04:22,800
the user class, then we can serve it from the user.

39
00:04:23,530 --> 00:04:28,760
Let's open the user class and let's add a token field.

40
00:04:29,690 --> 00:04:36,470
Token field should be transient so it won't be a persistent field.

41
00:04:37,760 --> 00:04:41,100
So it won't be stored on the database.

42
00:04:42,080 --> 00:04:45,390
It will be used only as on the floor instances.

43
00:04:46,910 --> 00:04:51,370
Now we can call it from authentication service as a result.

44
00:04:52,580 --> 00:05:00,650
Like I said before, we describe the user instance on user principle, not to call it twice from the

45
00:05:00,650 --> 00:05:01,300
database.

46
00:05:01,670 --> 00:05:04,010
So now it still makes sense.

47
00:05:06,190 --> 00:05:11,950
Then they will set the token venue for the user and we will return it.

48
00:05:26,230 --> 00:05:28,450
OK, that's OK, thank you.
