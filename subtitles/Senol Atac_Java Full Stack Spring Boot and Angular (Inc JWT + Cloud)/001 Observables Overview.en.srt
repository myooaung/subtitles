1
00:00:00,990 --> 00:00:07,030
Hi, guys, in this lesson, we will talk about HTTP and observables in angular.

2
00:00:07,470 --> 00:00:14,790
You know that we have a server side or backend code and it provides the data with API and points.

3
00:00:15,240 --> 00:00:21,520
So somehow we should reach these Web server API and we should fetch these API data.

4
00:00:22,350 --> 00:00:29,400
Now we will try to figure it out so we have our application that runs on the browser.

5
00:00:29,520 --> 00:00:38,060
In our application, we display some content like product lists or booklist to find and fill these lists.

6
00:00:38,400 --> 00:00:40,250
We need an extra layer.

7
00:00:40,770 --> 00:00:43,110
This extra layer is services.

8
00:00:43,560 --> 00:00:47,100
Services are injectable components in angular.

9
00:00:47,310 --> 00:00:56,100
So Angular can use these glasses in the dependency injection system under the hood as service is basically

10
00:00:56,490 --> 00:01:00,150
a class which can be used by multiple components.

11
00:01:00,540 --> 00:01:06,990
We can use a service for multiple purposes, for example, to outsource some court which you want to

12
00:01:06,990 --> 00:01:08,700
use in multiple components.

13
00:01:08,700 --> 00:01:17,220
Or we will do here to manage our data in one global place where than multiple pieces or spots in our

14
00:01:17,220 --> 00:01:18,840
application have access to it.

15
00:01:19,200 --> 00:01:21,870
So this is how we can use such a service.

16
00:01:22,410 --> 00:01:26,630
But here we want to use it to fetch data from server.

17
00:01:27,030 --> 00:01:29,360
We can do it with HTTP calls.

18
00:01:29,760 --> 00:01:38,430
First of all, to use HTTP in angular, angular provides http client module with using this module.

19
00:01:38,790 --> 00:01:48,600
We can use HTTP methods, headers, contents programs so we can use HTTP requests to fetch data from the

20
00:01:48,600 --> 00:01:52,510
server and we can use the different methods to fetch data.

21
00:01:52,770 --> 00:02:00,900
For example, we can use post to get requests, put requests, delete requests, etc. We can write our

22
00:02:00,900 --> 00:02:09,420
HTTP requests and these requests hit the Web server API and points on the server side when I say end

23
00:02:09,420 --> 00:02:09,720
point.

24
00:02:09,930 --> 00:02:16,170
Of course we will have an API, URL and API method to reach the Web server API.

25
00:02:16,560 --> 00:02:25,200
Then these requests will be processed on the server server can fetch the data from the database or it

26
00:02:25,200 --> 00:02:31,260
can provide it as hardcode and send it back as an HTTP response.

27
00:02:32,370 --> 00:02:41,700
The response we get back from the HTTP call is observable and these observable objects are listened to

28
00:02:41,700 --> 00:02:43,530
by the service injectors.

29
00:02:43,560 --> 00:02:45,780
And this process goes on like that.

30
00:02:46,410 --> 00:02:49,430
The important thing here is observable.

31
00:02:50,010 --> 00:02:52,050
Let's see what the observable is.

32
00:02:52,680 --> 00:03:00,210
Observable is a wrapper around some data source and data source typically means a stream of values because

33
00:03:00,220 --> 00:03:06,420
observable are a concept that we use for asynchronous data observables.

34
00:03:06,420 --> 00:03:11,430
We have asynchronized data and these data is processed over time.

35
00:03:12,000 --> 00:03:16,260
Observables can be listened to by the observers.

36
00:03:16,590 --> 00:03:19,980
These observers can be one or multiple.

37
00:03:20,280 --> 00:03:23,820
These observers subscribe to the observables.

38
00:03:24,430 --> 00:03:29,210
Observers can catch three states of the observables.

39
00:03:29,850 --> 00:03:34,880
These are next, errors and complete functions.

40
00:03:35,310 --> 00:03:42,150
Next function is fired whenever we receive any value error event is triggered.

41
00:03:42,150 --> 00:03:50,880
If an error occurs in observable and if the observer reports that it is done, then we can catch the

42
00:03:50,880 --> 00:03:51,810
complete state.

43
00:03:52,410 --> 00:04:00,690
If we think about the API and points, it will take a while to complete the data and there can be errors

44
00:04:00,690 --> 00:04:02,970
while fetching the data from the server side.

45
00:04:03,480 --> 00:04:10,140
But at the end of it, we need that done state because for example, we can show a loading part while

46
00:04:10,140 --> 00:04:14,610
fetching, then the down state we can dismiss it.

47
00:04:15,510 --> 00:04:19,840
So observables going like that, that's all for the beginning.

48
00:04:20,130 --> 00:04:20,610
Thank you.
