1
00:00:05,690 --> 00:00:13,070
Hi, guys, in this lesson, we will implement the book service, we will use the book service to fetch

2
00:00:13,070 --> 00:00:22,070
book and points that we created on the server side we created and points like the same book to the lead

3
00:00:22,230 --> 00:00:25,760
book and list all books on the server side.

4
00:00:26,300 --> 00:00:34,900
In this lesson, we will create functions to fetch these and points with the Engler's HDTV client.

5
00:00:35,480 --> 00:00:38,420
Let's implement them one by one.

6
00:00:39,320 --> 00:00:43,400
We can create a service class with the engine generate comment.

7
00:00:43,970 --> 00:00:50,980
Our comments will be engy generate service and service name.

8
00:00:51,500 --> 00:00:58,900
Our service name will be book, but I'll create it under the services folder.

9
00:00:59,750 --> 00:01:07,460
So I specified like services slash book and it will create our service class.

10
00:01:13,130 --> 00:01:21,940
I open it, first of all, I need to describe Bay Zero for book and points, we can find the server.

11
00:01:21,940 --> 00:01:24,010
You are from the environment.

12
00:01:24,440 --> 00:01:35,120
Then I'll read the book Postfix because each exists for the book and points start with a book API book.

13
00:01:35,570 --> 00:01:38,810
We can check it also from the server side.

14
00:01:50,210 --> 00:01:58,640
Then I'll extend it with the request based service class, because I used the base methods that were

15
00:01:58,640 --> 00:01:59,720
described at.

16
00:02:04,910 --> 00:02:12,170
Then we can inject our services on the constructor's first of all, we will use authentication service

17
00:02:12,200 --> 00:02:13,730
to get the current user.

18
00:02:14,030 --> 00:02:20,540
Secondly, we need HTP client because we will use it to send requests.

19
00:02:21,050 --> 00:02:25,180
Actually, both of them will be used by the superclass.

20
00:02:25,190 --> 00:02:32,780
Also, the class which implements and obstruct class must call super in the constructor.

21
00:02:32,990 --> 00:02:36,830
So we will call the function here with the parameters.

22
00:02:37,090 --> 00:02:39,890
OK, now we can create our HTP requests.

23
00:02:40,670 --> 00:02:42,890
Our first method is save book.

24
00:02:43,670 --> 00:02:52,430
We will take a book object as a parameter and of course the result of it will be observable because

25
00:02:52,580 --> 00:02:56,060
the result of the HTP request is observable.

26
00:02:56,990 --> 00:03:08,540
Our method will be post our Posterized API Pettys API book and we will send the book object as a form

27
00:03:08,540 --> 00:03:08,900
data.

28
00:03:09,680 --> 00:03:16,450
Finally, we will send the HTP headers in the options below with the Options blog.

29
00:03:16,580 --> 00:03:24,140
We can send a lot of different properties like HDTV header, HTP content, HTP parameters, etc..

30
00:03:25,760 --> 00:03:28,090
Our second method is BILLETT book.

31
00:03:28,730 --> 00:03:32,900
We can take a book object or book idea as a parameter.

32
00:03:33,380 --> 00:03:36,080
The result of it will be observable.

33
00:03:36,860 --> 00:03:48,260
Our method will be delete our deletes rest API Pattie's API book plus book idee.

34
00:04:10,520 --> 00:04:14,900
Finally, we will send the headers as property of the options.

35
00:04:26,240 --> 00:04:35,720
Our last method, will we get all books, to get all books, we will send a get request to the server

36
00:04:35,720 --> 00:04:38,430
side to get all books.

37
00:04:38,660 --> 00:04:41,930
Rest API is API book.

38
00:04:45,800 --> 00:04:51,080
Here, we don't need to send headers because it is a public transport.

39
00:04:51,920 --> 00:04:55,760
OK, that's all about work service implementation.

40
00:04:55,940 --> 00:04:56,420
Thank you.
