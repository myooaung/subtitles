WEBVTT
1

00:00:05.360 --> 00:00:10.790

Hi, guys, in this lesson, we will create our repost articles for users.



2

00:00:11.510 --> 00:00:16.330

Sprint has many utilities about repository or data management.



3

00:00:16.910 --> 00:00:19.490

It is provided we are Cypriote data.



4

00:00:20.090 --> 00:00:25.970

Shipping data is familiar of projects that aims to create a repository leaf.



5

00:00:26.510 --> 00:00:35.600

The idea is to have an abstract layer where all the dependencies will point to and different implementations



6

00:00:35.600 --> 00:00:37.190

with all kinds of data.



7

00:00:37.190 --> 00:00:45.470

Repositories such as Esker and Nice get similar to what the B.C. did for scale databases.



8

00:00:46.400 --> 00:00:53.410

Sibling data G.P.A. makes it easy to easily implement GPA based repositories.



9

00:00:54.230 --> 00:01:00.650

These module deals with enhanced support for GPA based data access leaves.



10

00:01:01.280 --> 00:01:07.940

It makes it easier to build Sprink powered applications that use data access technologies.



11

00:01:09.140 --> 00:01:16.820

Sibling data provides sophisticated queries and UTIs, for example, pagination sorting custom queries,



12

00:01:16.820 --> 00:01:18.890

customer queries, etc..



13

00:01:19.850 --> 00:01:29.860

Sifting data works with Jawa Persistance API GPA is a bridge between Object Model Sojo, a program and



14

00:01:29.870 --> 00:01:31.310

relational model.



15

00:01:31.310 --> 00:01:33.140

So database program.



16

00:01:33.800 --> 00:01:39.650

The database connection is provided by JDBC JDBC.



17

00:01:39.650 --> 00:01:46.370

Establish a connection with the database and it can send Ezekial statements.



18

00:01:47.730 --> 00:01:54.200

Now let's implement it on our project and see the details to do it.



19

00:01:54.380 --> 00:01:58.070

First of all, let's create a new package under our main package.



20

00:01:58.460 --> 00:02:01.130

Our package name will be the poster.



21

00:02:03.500 --> 00:02:07.880

Under the repository package, we will create a user repository interface.



22

00:02:10.960 --> 00:02:20.140

User repository will extend G.P.A. repository G.P.A. Repository is an abstract class implemented by



23

00:02:20.320 --> 00:02:29.170

Ziprin G.P.A. repository with J-P Repository, Ciprian will handle basic KROT database operations automatically



24

00:02:29.470 --> 00:02:33.610

like save update, find by the delete by idea, etc..



25

00:02:34.630 --> 00:02:40.320

Also, G.P.A. repository automatically generates queries from the method names.



26

00:02:40.720 --> 00:02:49.540

For example, if they want to find the user by name, we can directly write a method like fine by plus



27

00:02:49.540 --> 00:02:52.020

field name or field name, deal by name.



28

00:02:52.420 --> 00:02:55.380

So our method name, bill by name.



29

00:02:55.690 --> 00:03:01.900

And this will automatically produce a query like select start from user.



30

00:03:02.020 --> 00:03:05.010

Their name equals parameter name.



31

00:03:06.520 --> 00:03:10.930

Or we can write advanced queries using query annotation.



32

00:03:11.830 --> 00:03:17.410

We can write custom queries with HPN with query annotation.



33

00:03:18.070 --> 00:03:23.410

So J-P repository is a cool solution for database operations.



34

00:03:24.520 --> 00:03:27.760

DGB repository has to generate parameters.



35

00:03:28.450 --> 00:03:36.370

First parameter is for the middle class and the second parameter is for the ideal class of the middle



36

00:03:36.370 --> 00:03:36.810

class.



37

00:03:37.570 --> 00:03:44.380

So our model class will be users and our idea class will be long.



38

00:03:46.620 --> 00:03:57.660

Here we can ride example method queries like find by name or fine by name, not snarl, etc., or we



39

00:03:57.660 --> 00:04:01.820

can create some queries with query, annotation, etc..



40

00:04:02.700 --> 00:04:08.160

For example, let's create a method like find by username.



41

00:04:09.210 --> 00:04:16.770

We can create method queries with fine by plus field name on JPA Repository.



42

00:04:29.930 --> 00:04:34.580

Also, we should specify the parameter in these methods, of course.



43

00:04:38.320 --> 00:04:47.260

Secondly, let's create a custom update query, we want to create a query to update the user at all.



44

00:04:48.070 --> 00:04:59.290

According to username, we will expect a user name and roll we'll use as parameters on custom queries.



45

00:04:59.440 --> 00:05:03.610

We should send them with parum annotation.



46

00:05:12.640 --> 00:05:17.170

Then we can describe our HPL query with query annotation.



47

00:05:21.620 --> 00:05:31.550

On the annotation, we will write an and update query each girl is so similar to ask it so we will use



48

00:05:31.550 --> 00:05:34.160

the same syntax with České.



49

00:05:34.740 --> 00:05:38.690

We can also specify the parameters with two dots.



50

00:05:39.830 --> 00:05:44.990

There is an important thing here we should specify.



51

00:05:44.990 --> 00:05:54.440

This query is m modifying executable query, so the result of this query will change the database table.



52

00:05:55.250 --> 00:05:59.960

So to describe it, we will use modifying annotation.



53

00:06:01.160 --> 00:06:06.710

Otherwise, if we have a select ClearOne, we don't need modifying annotation.



54

00:06:08.790 --> 00:06:18.210

We will also need save user find user by ID methods, but the basic CRUD operations that are provided



55

00:06:18.210 --> 00:06:23.480

by the JPA repository in default will be enough for us.



56

00:06:24.330 --> 00:06:30.510

It will provide these all methods for us for the beginning.



57

00:06:31.380 --> 00:06:36.330

OK, that's all about the user repository implementation.



58

00:06:36.840 --> 00:06:37.350

Thank you.

