WEBVTT
1

00:00:05.670 --> 00:00:13.620

OK, now we can start to implement the register form, but first of all, let's talk about how angular



2

00:00:13.620 --> 00:00:16.640

form items work in English.



3

00:00:16.950 --> 00:00:24.720

We have a class called Form Control for each input field in our form, we need to create an instance



4

00:00:24.720 --> 00:00:25.920

of the control class.



5

00:00:25.920 --> 00:00:31.680

And with this control class, we can check the current value stored in an input field.



6

00:00:32.310 --> 00:00:36.990

We can see if the input field has been touched or untouched.



7

00:00:37.860 --> 00:00:46.440

We can see it is dirty, which means its value is changed or pristine, which means its value is not



8

00:00:46.440 --> 00:00:50.250

changed, whether it's valid or not.



9

00:00:50.580 --> 00:00:55.750

And if it's not valid, what are the validation errors?



10

00:00:56.340 --> 00:01:04.020

So for each input field in the form, we need a control object similar to the control class.



11

00:01:04.020 --> 00:01:12.120

We have another class called Form Group, which represents a group of controls in a form.



12

00:01:13.290 --> 00:01:20.680

Each form essentially is a control group because it contains at least one control.



13

00:01:20.820 --> 00:01:27.380

So for overall form, we can use the same validation methods with the foreign control.



14

00:01:27.440 --> 00:01:36.360

Also, let us see it in an example for for example, if we have a form that contains inputs like username



15

00:01:36.360 --> 00:01:43.530

and password, to add the validation to this form, we need to create a form group object for the form



16

00:01:43.950 --> 00:01:48.650

and a form control object for each input field in the form.



17

00:01:49.140 --> 00:01:54.290

With this way, we can track each input field and the entire form as a whole.



18

00:01:54.900 --> 00:01:59.280

There are two ways to create these control objects.



19

00:01:59.820 --> 00:02:08.430

One B is applying some directives in our template and ANGULAR will create these control objects for



20

00:02:08.430 --> 00:02:10.920

us implicitly under the hood.



21

00:02:11.430 --> 00:02:20.810

We call forms that are built with these very template driven forms, so we built them using their template.



22

00:02:21.300 --> 00:02:27.900

Another approach involves explicitly creating these control objects.



23

00:02:28.110 --> 00:02:36.330

So in our components we should write code to create new instances of the control group and to control



24

00:02:36.330 --> 00:02:42.810

objects we call forms that are built this way as reactive forms.



25

00:02:43.230 --> 00:02:49.650

If we need more control over foreign objects, we can prefer reactive forms.



26

00:02:49.920 --> 00:02:58.920

If we need a simple and easy validation and easy configuration, we prefer to go with template deriving



27

00:02:58.920 --> 00:03:00.750

forms in our project.



28

00:03:00.930 --> 00:03:07.770

I will go with template derived forms because I don't want to make my code more complex.

