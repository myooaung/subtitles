WEBVTT
1

00:00:00.490 --> 00:00:07.090

Hi, guys, in this lesson, we will talk about becan, service, architecture and over overview.



2

00:00:08.020 --> 00:00:13.500

If you think about our application as a whole, we will have three main components.



3

00:00:14.140 --> 00:00:15.950

First one is the database.



4

00:00:16.180 --> 00:00:20.370

Second one is the second and third one is the front end.



5

00:00:21.280 --> 00:00:26.110

In this course, we will implement all of them one by one.



6

00:00:26.830 --> 00:00:36.720

And on the server side, we will cover database and they can technologies to get on the server side.



7

00:00:36.820 --> 00:00:40.410

We will handle book operations and user operations.



8

00:00:40.930 --> 00:00:44.560

For example, let's think of an online shopping system.



9

00:00:45.070 --> 00:00:48.820

You know that shopping systems contain different products.



10

00:00:49.330 --> 00:00:55.210

And of course, these products have some basic features like price, name, etc..



11

00:00:55.690 --> 00:01:02.140

Actually, our basic items are basic classes will be these items.



12

00:01:02.800 --> 00:01:12.300

These products can be listed, deleted or edited, etc. So our products will be books here.



13

00:01:12.760 --> 00:01:17.740

Actually, we can think of our server side as a book service.



14

00:01:18.250 --> 00:01:23.230

So book service will provide the book Corot operations.



15

00:01:23.620 --> 00:01:31.630

Actually, we can describe the book service as the implementation service for the book KROT Operations.



16

00:01:32.380 --> 00:01:38.890

On the server side, we will also handle users sign up and signing operations.



17

00:01:39.280 --> 00:01:47.840

So we will create an infrastructure for user authorization on the server side to implement these services.



18

00:01:47.860 --> 00:01:50.080

Firstly, we will use Springboard.



19

00:01:50.620 --> 00:01:58.570

It will provide a simpler and faster way to set up configure and run rest API applications.



20

00:01:59.320 --> 00:02:04.600

With Springboard module we will control the structure will be implemented.



21

00:02:05.140 --> 00:02:08.350

Our MVC structure will work like that.



22

00:02:08.770 --> 00:02:15.250

First of all, the and the classes will be created under the model package later.



23

00:02:15.430 --> 00:02:23.020

If module class is permanent, create a repository for it called the repository from services.



24

00:02:23.560 --> 00:02:32.500

Finally, call services from the controller's data will be presented to the client as an API call,



25

00:02:32.500 --> 00:02:37.270

so SPRINK controllers will be used to handle them.



26

00:02:38.830 --> 00:02:42.420

The other thing will be skippering security.



27

00:02:43.180 --> 00:02:51.850

We will provide secure sign up and signing operations with Supreme Security and API redirections will



28

00:02:51.850 --> 00:02:55.630

be provided in a secure way to do it.



29

00:02:56.050 --> 00:02:58.450

We will implement that configuration.



30

00:02:59.170 --> 00:03:03.400

The other thing will be JWT, JSON.



31

00:03:03.400 --> 00:03:07.840

That token after the logging operation is provided by the user.



32

00:03:08.470 --> 00:03:11.370

We don't need logging operations anymore.



33

00:03:11.740 --> 00:03:18.490

Then we will provide authentication with the Jason that token in our project.



34

00:03:18.580 --> 00:03:22.960

We will use PostgreSQL as database here.



35

00:03:23.170 --> 00:03:25.720

You can ask why PostgreSQL.



36

00:03:26.650 --> 00:03:31.990

Of course it is not necessary or it is not only option for us.



37

00:03:33.070 --> 00:03:40.870

We can use any databases on our project like my Mongo DB, H2 database, etc..



38

00:03:41.500 --> 00:03:51.250

We chose Postgres good because we want to deploy our services to Hiroku at the end of the course and



39

00:03:51.550 --> 00:03:56.620

PostgreSQL can be used for Fihri in Hiroku.



40

00:03:57.040 --> 00:04:01.290

So to test it for free, we chose PostgreSQL.



41

00:04:01.720 --> 00:04:11.680

We will map our database tables to objects with G.P.A., Jawa Persistance API and hibernate.



42

00:04:12.100 --> 00:04:16.570

So we will provide object relational mapping with hibernate.



43

00:04:17.840 --> 00:04:21.390

For clean court, we will use the Lombok Library.



44

00:04:22.070 --> 00:04:31.910

We don't want to implement getter setter equals and hedgcock methods so we can escape them using Lomborg



45

00:04:32.150 --> 00:04:33.830

data or video annotation.



46

00:04:35.140 --> 00:04:42.720

To handle all dependencies of our service, we will use greater here.



47

00:04:42.940 --> 00:04:47.380

You can ask, why don't we go along with no one?



48

00:04:48.190 --> 00:04:56.020

We will use Gradle because Gradle has a configuration and better performance than most.



49

00:04:57.190 --> 00:05:00.190

That's all about the server structure.



50

00:05:00.850 --> 00:05:01.360

Thank you.

