1
00:00:05,570 --> 00:00:12,680
Hi, guys, in this lesson, we will create the Jason laptop and provider class in this class, we will

2
00:00:12,680 --> 00:00:22,290
create JWT util methods like Tolkan Generator or creating authentication from HTTP requests to do it.

3
00:00:22,520 --> 00:00:27,740
We will create a new package as JWT under the security package.

4
00:00:29,240 --> 00:00:38,660
Then we will create a JWT provider interface class and a JWT provider implementation class under the

5
00:00:38,660 --> 00:00:40,250
JWT package.

6
00:00:51,630 --> 00:01:03,340
JWT provider will be a Sprink component, then we will call JWT report from application properties with

7
00:01:03,340 --> 00:01:04,290
value annotation.

8
00:01:09,230 --> 00:01:11,840
Exploration and JWT secret.

9
00:01:35,970 --> 00:01:43,590
No, we need three important util methods, first of all, we need a method to generate a token.

10
00:01:43,980 --> 00:01:51,570
We will have a user name for like username, password, etc. We will use this information and we will

11
00:01:51,570 --> 00:01:54,640
create a JWT token from this information.

12
00:01:55,620 --> 00:02:01,290
Secondly, we need a method to authenticate that requests after Loganathan petition.

13
00:02:01,500 --> 00:02:04,290
Each request should send authorization.

14
00:02:04,290 --> 00:02:09,570
Haddish and this header should be generate generated token for the user.

15
00:02:10,290 --> 00:02:16,140
In this method we will pass JWT and we will create an authentication object.

16
00:02:17,640 --> 00:02:23,220
Finally, we need a method to validate a token like me described before.

17
00:02:23,490 --> 00:02:26,850
Each JWT token should have expiration time.

18
00:02:27,420 --> 00:02:31,770
So with this method, we will check whether the token is expired or not.

19
00:02:33,810 --> 00:02:35,760
Now we can create our methods.

20
00:02:36,390 --> 00:02:38,970
Our first method will be generate token.

21
00:02:39,930 --> 00:02:44,400
In this method we will expect user principal objects as a parameter.

22
00:02:45,630 --> 00:02:49,560
If you remember, user principle is created after logging operation.

23
00:03:02,620 --> 00:03:13,300
Authentication clause keeps the credentials and rules of authenticate users in our JWT object, we can

24
00:03:13,300 --> 00:03:16,960
store everything related with user and session.

25
00:03:17,560 --> 00:03:22,360
JWT has a builder method and we can build it using these methods.

26
00:03:23,290 --> 00:03:28,000
In this method, we will create a JSON token that contains first.

27
00:03:28,000 --> 00:03:30,880
One is the user name of authentication.

28
00:03:32,380 --> 00:03:34,720
We can get it from authentication directly.

29
00:03:38,720 --> 00:03:46,040
Username will be the main identifier of the JWT object, so it will be a subject.

30
00:03:47,600 --> 00:03:51,830
Secondly, it will contain rules of authentication.

31
00:03:52,340 --> 00:03:54,820
We can get them from authentication.

32
00:03:54,830 --> 00:04:00,680
Also, we can add extra parameters to JWT with the claim method.

33
00:04:02,510 --> 00:04:05,300
Thirdly, we can add user ID.

34
00:04:13,240 --> 00:04:20,260
Then it will contain the expiration time of the token, we don't find it from the current time plus

35
00:04:20,540 --> 00:04:21,780
default expiration time.

36
00:04:35,170 --> 00:04:45,910
Finally, we will sign it with an Alberta Jason Babytalk concerns different signature algorithms, the

37
00:04:45,940 --> 00:04:53,810
will we can use one of the longest and safest harsh match algorithms here.

38
00:04:54,430 --> 00:04:59,530
We will encoded with this secret key and our algorithm will be hashmark.

39
00:04:59,770 --> 00:05:01,540
Sha five montre.

40
00:05:14,860 --> 00:05:19,960
Our second smattered Beilby yet authentication in this matter.

41
00:05:20,110 --> 00:05:24,520
First of all, we will get the authorization from the HTP Haddish.

42
00:05:25,480 --> 00:05:31,780
Actually, this extracting header from the authorization will be a generic and common method.

43
00:05:32,050 --> 00:05:34,840
So we can describe it as Utne method.

44
00:05:35,650 --> 00:05:38,330
Let's create created under the security.

45
00:05:38,330 --> 00:05:39,010
You don't call us.

46
00:05:42,600 --> 00:05:46,680
We will reach it from the authorization haddish with the beer token.

47
00:05:46,830 --> 00:05:50,880
So first of all, let's get it done as constant variables.

48
00:05:55,710 --> 00:06:03,510
We can create with a public access modifier because this is a YouTube class, so these videos can be

49
00:06:03,510 --> 00:06:10,710
also reachable by other causes than we can create the authentication token prefix variable.

50
00:06:12,220 --> 00:06:16,770
Actually, it will be concatenation of tokens plus space.

51
00:06:21,990 --> 00:06:24,490
Now we can create are you still mad?

52
00:06:25,200 --> 00:06:30,990
Are you still mad at Beilby extract authentication token from the guest.

53
00:06:31,800 --> 00:06:41,100
So we will expect the HTTP request as a parameter and we will return the BEERA token value as strict

54
00:06:43,350 --> 00:06:47,940
authorization will be provided as a HTTP request header.

55
00:06:49,880 --> 00:07:01,640
And we will expect it as a beer token, so it will start with a beta key word so we can reach our token

56
00:07:01,640 --> 00:07:02,960
after the beta key.

57
00:07:03,470 --> 00:07:07,190
So it is after seven letters later.

58
00:07:08,450 --> 00:07:12,910
If it is not provided, we can return now as a result.

59
00:07:33,200 --> 00:07:37,790
OK, now we can return the JWT provided class again.

60
00:07:39,230 --> 00:07:43,100
Now we can extract token value with the security util method.

61
00:07:44,600 --> 00:07:49,010
If the token is not, we can return null as authentication.

62
00:07:51,880 --> 00:07:54,580
We can pass the talk on using the secret key.

63
00:08:00,350 --> 00:08:10,860
JWT provides Pospisil that we can use it easily and we can pass it easily after passing it.

64
00:08:11,060 --> 00:08:21,920
We can reach fields of it with claims Odjick, then we will pass the token value and we will get users

65
00:08:21,920 --> 00:08:26,090
details from the talk here.

66
00:08:26,300 --> 00:08:32,090
We can reach data like we sent it on JWT generates.

67
00:08:33,560 --> 00:08:42,290
So we will have a user name as subject and we will have roles and user idy as extra parameters.

68
00:09:03,340 --> 00:09:12,580
There is an important thing here, role where you should be the start role prefix for spring security

69
00:09:12,580 --> 00:09:20,110
and Jason Token, so we should add the role prefix to authentication if it does not exist.

70
00:09:20,710 --> 00:09:26,980
Actually, we will implement this logic before on security first class so we can directly call it.

71
00:09:58,670 --> 00:10:06,920
Finally, we will create a security user details object from user info to create it, we can use the

72
00:10:07,040 --> 00:10:14,060
build it and we will provide an authentication object here.

73
00:10:14,070 --> 00:10:18,790
We already have a user principle class to create user details object.

74
00:10:36,690 --> 00:10:44,640
To create an authentication object, we can use username, password authentication, token sibling security

75
00:10:44,640 --> 00:10:51,000
provides it also to implement an authentication object username.

76
00:10:51,000 --> 00:10:57,780
Password authentication token is a provider to describe authentication object in separate security.

77
00:11:21,160 --> 00:11:26,290
Our last methods will be validated in this method.

78
00:11:26,440 --> 00:11:34,180
We will check the expiration date of the token if the expiration date of the token is before then.

79
00:11:34,200 --> 00:11:36,080
Now we will return false.

80
00:11:36,520 --> 00:11:44,410
Otherwise, we will return to actually we can use similar processes to create authentication object

81
00:11:44,950 --> 00:11:48,360
so we can copy and past partial code from the previous method.

82
00:11:49,810 --> 00:11:51,760
Then we will check the expiration date.

83
00:12:12,890 --> 00:12:20,810
Then we will check the expiration date if the expiration date of the token is before then.

84
00:12:20,840 --> 00:12:22,730
Now we will return false.

85
00:12:23,170 --> 00:12:25,230
Otherwise we will return to.

86
00:12:32,250 --> 00:12:36,580
OK, that's all about the JWT provider.

87
00:12:37,260 --> 00:12:37,770
Thank you.
