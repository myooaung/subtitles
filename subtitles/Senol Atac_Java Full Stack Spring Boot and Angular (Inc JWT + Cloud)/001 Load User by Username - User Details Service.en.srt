1
00:00:05,740 --> 00:00:12,480
Hi, guys, in this lesson, we will start to implement the spring security late spring.

2
00:00:12,520 --> 00:00:17,450
Security is a framework used for securing spring applications.

3
00:00:18,100 --> 00:00:26,590
It stands between client and application and gives the possibility of configuring what data and functionalities

4
00:00:26,590 --> 00:00:28,620
are exposed to which users.

5
00:00:29,470 --> 00:00:33,350
Also, it handles common vulnerabilities.

6
00:00:34,030 --> 00:00:35,380
It's a huge topic.

7
00:00:35,560 --> 00:00:42,340
And in this lesson we are going to explain the process of basic authentication in sibling security.

8
00:00:43,060 --> 00:00:46,450
Sibling security works with HTP filters.

9
00:00:47,020 --> 00:00:55,690
These filters catch the coming requests and extract the credentials from HTTP headers.

10
00:00:56,410 --> 00:01:06,280
We we can say the authentication filter for these HTP filters authentication filter creates an ID object

11
00:01:06,670 --> 00:01:10,120
that contains credentials from request.

12
00:01:10,540 --> 00:01:18,650
Then it sends that object to the authentication manager to choose the appropriate authentication provider.

13
00:01:19,540 --> 00:01:26,350
There are different authentication strategies and for each strategy there is an appropriate authentication

14
00:01:26,350 --> 00:01:26,920
provider.

15
00:01:28,030 --> 00:01:37,090
Each provider needs to get user from the system and to check its credentials like as it expired or is

16
00:01:37,090 --> 00:01:39,190
password, Carex, etc..

17
00:01:40,240 --> 00:01:47,770
We can use different types of authentication providers in separate security or we can combine them.

18
00:01:48,640 --> 00:01:56,160
Only part that is different between providers is how it finds users.

19
00:01:57,040 --> 00:02:06,520
That part is extracted in class user details, service in load by username, load by username method

20
00:02:06,530 --> 00:02:08,610
which returns to user details.

21
00:02:08,620 --> 00:02:10,810
Object user details.

22
00:02:10,810 --> 00:02:14,680
Object contains data about user and account.

23
00:02:15,940 --> 00:02:25,240
Abboud's like is account expired, logged or enabled, are credentials nonexperts, etc..

24
00:02:25,450 --> 00:02:33,280
It takes like these methods the account which authentication provider needs for authentication.

25
00:02:33,670 --> 00:02:41,560
If authentication is successful, the authentication object with the principle is returned to the authentication

26
00:02:41,560 --> 00:02:46,600
filter, which will set principle to security context.

27
00:02:47,050 --> 00:02:55,960
Security context is associated with the current threat, and it provides principle for further authorization

28
00:02:55,960 --> 00:03:05,200
of requests in the case that authentication fails, court rules and authentication exception, which

29
00:03:05,200 --> 00:03:11,670
goes back to the filter so it can be caj or shown to the users.

30
00:03:12,820 --> 00:03:18,220
One of the previous lessons we described the password encoded in this lesson.

31
00:03:18,220 --> 00:03:26,170
We will describe user details service to LAUT Users by username in spring security default.

32
00:03:26,170 --> 00:03:28,720
User service is user data service.

33
00:03:29,050 --> 00:03:32,260
These user service, these users details.

34
00:03:32,260 --> 00:03:36,640
Service is an obstacle class so we can override it to do it.

35
00:03:36,640 --> 00:03:39,970
First of all, let's create a new package like security.

36
00:03:40,390 --> 00:03:44,740
Then we will create a new class under the security package.

37
00:03:45,490 --> 00:03:50,050
Our class name will be Custom User Details Service.

38
00:03:51,870 --> 00:04:01,560
Custom user details service will implement user details, service and custom user details service will

39
00:04:01,560 --> 00:04:03,060
be a spring service.

40
00:04:07,570 --> 00:04:11,830
We have an override method for user data service.

41
00:04:15,690 --> 00:04:24,630
This matter is law, the user by user name in this method, we will find our user according to the user

42
00:04:24,630 --> 00:04:26,970
name from our user service.

43
00:04:28,020 --> 00:04:35,120
So we will need the user service injection in the service later.

44
00:04:35,310 --> 00:04:42,030
We will authorize these user according to user role in the method.

45
00:04:42,510 --> 00:04:48,090
First of all, we will call the find by username method from our user service.

46
00:04:48,570 --> 00:04:56,340
If the user is no return user username, not found exception or otherwise authorized user according

47
00:04:56,340 --> 00:04:57,520
to user or.

48
00:05:18,820 --> 00:05:27,310
Sibling security provides specific clauses to describe authority, these are granted authority and simple

49
00:05:27,310 --> 00:05:28,750
granted authority clauses.

50
00:05:29,170 --> 00:05:33,880
Granted, authority is an abstract class, so it's an interface and simple.

51
00:05:33,880 --> 00:05:38,440
Granted authority is an implementation class for granted authority.

52
00:05:39,430 --> 00:05:48,430
Now we will create our authority according to the user at all, but we will use this conversion in different

53
00:05:48,430 --> 00:05:53,880
methods also so we can create it as a util method to do it.

54
00:05:54,070 --> 00:05:56,590
Let's create a new package as it will.

55
00:05:58,030 --> 00:06:03,130
Under the new tool package, we will create a class like security utils.

56
00:06:05,080 --> 00:06:11,500
In this class, we will create util methods to use on security classes and methods.

57
00:06:13,570 --> 00:06:21,990
Now we will create a method to convert from use user role to authority, but there is an important thing

58
00:06:22,000 --> 00:06:22,360
here.

59
00:06:23,230 --> 00:06:29,310
Role religion should be the start role prefix for sibling security.

60
00:06:29,800 --> 00:06:37,330
So we should add the role prefix to authority if it does not exist to do it.

61
00:06:37,330 --> 00:06:42,760
First of all, let's create and role constant, then we will create our formatted role.

62
00:06:48,980 --> 00:06:54,500
Finally, we will Creedon authority object from the pharmacist's wrath.

63
00:07:05,180 --> 00:07:14,740
OK, now we can call it from custom user details, service users can have multiple roles, so supreme

64
00:07:14,750 --> 00:07:16,640
security is designed for that.

65
00:07:17,630 --> 00:07:20,690
So here we will have a set of authorities.

66
00:07:40,130 --> 00:07:46,580
Then they will return it bit security, user encapsulation with username, password and authorities

67
00:07:47,330 --> 00:07:56,330
here, user details, service, it turns the user details object user details object contains details

68
00:07:56,330 --> 00:08:03,200
of the user like username password, but that is also an abstract class.

69
00:08:03,410 --> 00:08:10,610
Separate also provides a security user object to handle this problem.

70
00:08:11,210 --> 00:08:15,140
Or they can create custom user details object.

71
00:08:15,560 --> 00:08:17,210
Let's create a custom user.

72
00:08:17,210 --> 00:08:18,940
Details object to the Girardet.

73
00:08:19,760 --> 00:08:23,720
Clearly our class name can be user principal.

74
00:08:29,180 --> 00:08:32,510
User principle will implement user details.

75
00:08:41,890 --> 00:08:46,570
Let's implement all of the methods that come from the user details class.

76
00:08:59,720 --> 00:09:09,200
Then we want to store the idea of user username, transend username and password on user class, but

77
00:09:09,440 --> 00:09:12,410
the user and password should be transient.

78
00:09:13,070 --> 00:09:18,140
When they set it as transient, it doesn't show up on centralized places.

79
00:09:23,580 --> 00:09:30,870
Here to start the user object is not the best practice, but I want to show some example practices,

80
00:09:31,020 --> 00:09:36,040
what kind of data we can keep on, we can store on user details.

81
00:09:36,630 --> 00:09:44,450
Also, we will use these user object on login operation so we don't want to call the user find method

82
00:09:44,450 --> 00:09:45,240
device.

83
00:09:45,750 --> 00:09:50,040
So we will figure out that more clearly in the next listener's.

84
00:09:51,830 --> 00:09:59,040
Then we can complete our missing methods with our fields in the user details class.

85
00:09:59,060 --> 00:10:07,440
We can also set the expired state or lock state of the user, but we will use JWT to handle them.

86
00:10:07,490 --> 00:10:12,400
So for now, we can set them as thoroughly by default.

87
00:10:13,580 --> 00:10:18,620
Then we need geter methods and constructors for our class.

88
00:10:19,910 --> 00:10:23,240
We can provide it with Lomborg Library.

89
00:10:23,990 --> 00:10:30,800
The loan book library provides greater annotation to provide better methods of fields automatically.

90
00:10:31,280 --> 00:10:37,160
If we describe it on class level, get methods of all fields will be created.

91
00:10:37,580 --> 00:10:42,870
If we describe it on field level, just that field will be affected.

92
00:10:45,230 --> 00:10:54,410
The loan book library also provides constructor's to create with no arguments and all arguments.

93
00:11:00,230 --> 00:11:11,000
And the Lombok Library also provides builder incitation, lone local builder annotation, produces the

94
00:11:11,000 --> 00:11:14,460
quote, automatically using the builder pattern.

95
00:11:16,970 --> 00:11:21,570
OK, now our user class for security is ready.

96
00:11:22,040 --> 00:11:25,900
Finally, we can call it from user details service.

97
00:11:26,600 --> 00:11:32,770
We can return as a result because it's all, say, user details, implementation class.

98
00:11:33,710 --> 00:11:39,180
Let's use the builder method of user principle to return the user object.

99
00:11:40,040 --> 00:11:50,660
So our method format will be user principle, that builder plus user principal fields plus built.

100
00:11:51,830 --> 00:11:54,650
So this is a typical builder pattern.

101
00:11:56,560 --> 00:12:04,210
OK, that's all about user details, service in the next listen, we will configure it with Web security.

102
00:12:04,870 --> 00:12:05,410
Thank you.
