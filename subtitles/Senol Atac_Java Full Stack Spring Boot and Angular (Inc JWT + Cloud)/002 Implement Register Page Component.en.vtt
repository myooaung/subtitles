WEBVTT
1

00:00:05.750 --> 00:00:11.900

Hi, guys, in this lesson, we will implement the registered component before we implement it.



2

00:00:12.170 --> 00:00:14.610

Let's talk about how we will handle it.



3

00:00:15.170 --> 00:00:18.800

First of all, the registered component will be a page.



4

00:00:19.130 --> 00:00:21.560

So we will create the HDMI Ollivier.



5

00:00:22.040 --> 00:00:26.450

We will create a page like this to create this page.



6

00:00:26.720 --> 00:00:35.360

We will call authentication service methods and we will assign these service methods with HDMI to form



7

00:00:35.370 --> 00:00:35.770

data.



8

00:00:36.200 --> 00:00:40.790

So we describe the register service method in the previous lesson.



9

00:00:41.180 --> 00:00:48.410

In this lesson, we will use that method and we will assign it to the registered component with doing



10

00:00:48.410 --> 00:00:48.800

this.



11

00:00:48.890 --> 00:00:56.990

We will also see the dependency injection example in our register page and we will also use a user icon



12

00:00:57.140 --> 00:00:59.120

that comes from font.



13

00:00:59.120 --> 00:00:59.750

Awesome.



14

00:01:00.020 --> 00:01:02.750

So we will see the usage of font.



15

00:01:02.750 --> 00:01:04.170

Awesome also.



16

00:01:05.190 --> 00:01:07.310

OK, now we can implement it.



17

00:01:07.760 --> 00:01:12.080

First of all, we will create a forum for the user object.



18

00:01:12.320 --> 00:01:18.680

So we should create a user object as a variable and type of it will be user.



19

00:01:24.880 --> 00:01:35.830

Secondly, we use font awesome in font awesome five, each icon is described as a pre installed predefined



20

00:01:35.830 --> 00:01:43.990

object so we can call down from the component as an object, we will use the user icon.



21

00:01:44.080 --> 00:01:55.090

So our icon will be if a user circle, by the way, we can find all the icon names and shapes from the



22

00:01:55.090 --> 00:01:56.910

font awesome page easily.



23

00:01:57.370 --> 00:01:59.950

Then we check the font awesome page.



24

00:01:59.980 --> 00:02:08.410

We can find the icons with search and then we can describe our icon according to our needs and we can



25

00:02:08.410 --> 00:02:09.700

use it in our code.



26

00:02:10.930 --> 00:02:16.900

Our last variable will be error message and type of it will be strange.



27

00:02:17.540 --> 00:02:21.990

We will use it to show error message if it occurs.



28

00:02:22.990 --> 00:02:26.710

For example, we will send the register request.



29

00:02:26.710 --> 00:02:31.600

If there appears an error, we will show it with error message.



30

00:02:32.980 --> 00:02:41.410

Then we can inject our services on the constructor, first of all, we will use authentication service



31

00:02:41.740 --> 00:02:43.570

to call the register and point.



32

00:02:44.140 --> 00:02:52.690

Secondly, we need rorter service because if the current user is available, the register page should



33

00:02:52.690 --> 00:02:59.070

not be displayed because it is a redundant page for Sessions users.



34

00:02:59.530 --> 00:03:02.680

Then we can implement the NGO in it mattered.



35

00:03:02.980 --> 00:03:10.450

Engy on init method is a callback method that is invoked immediately after the default change detector



36

00:03:10.660 --> 00:03:18.910

has checked the directive's data bound properties for the first time and before any of the weave or



37

00:03:18.910 --> 00:03:21.400

content children have been checked.



38

00:03:21.820 --> 00:03:29.950

It is invoked only once when the directive is instantiated in this method, we will check the session



39

00:03:29.950 --> 00:03:30.420

musician.



40

00:03:30.730 --> 00:03:36.300

If there is an available session user, we will redirect it to the profile page.



41

00:03:37.060 --> 00:03:39.340

Why is it a profile page?



42

00:03:39.730 --> 00:03:48.340

Because we should say, hey, you have already signed and most probably you want to visit the profile



43

00:03:48.340 --> 00:03:48.670

page.



44

00:03:50.440 --> 00:03:59.110

Here we can find and check this session user from the user service, if the current user is available



45

00:03:59.110 --> 00:04:05.470

or the idea of the current user is available, we can show the profile page with the.



46

00:04:06.700 --> 00:04:14.200

By the way, a question mark that comes from a variable in JavaScript is used for null check.



47

00:04:14.920 --> 00:04:24.600

Here it means current user value is not undefined or idea of current user value is not undefined.



48

00:04:25.570 --> 00:04:28.690

Then we will navigate to the profile page.



49

00:04:29.050 --> 00:04:34.870

Navigate gets an array because it expects an array of parts.



50

00:04:36.460 --> 00:04:40.060

Now we can create our register method in this method.



51

00:04:40.060 --> 00:04:47.500

We will call the authentication service register method and we will handle the response we will send.



52

00:04:47.500 --> 00:04:51.520

The user object is a parameter, of course.



53

00:04:51.520 --> 00:04:55.920

First of all, we will describe the user object we are registered for.



54

00:04:56.770 --> 00:04:59.680

We will handle it on the HDMI part.



55

00:05:00.640 --> 00:05:08.260

Then we will subscribe to the register function because the register function is an observable item.



56

00:05:08.710 --> 00:05:12.450

Then we subscribe to the observable item on our.



57

00:05:12.870 --> 00:05:16.270

Yes, we can expect to read parts.



58

00:05:16.690 --> 00:05:23.070

First part is the successful response part that handles the coming response.



59

00:05:23.500 --> 00:05:32.860

The second part is the error that occurs on request execution and it creates the exceptions.



60

00:05:33.810 --> 00:05:43.350

And the final part completes the part that works after the catch and response part, like finally block.



61

00:05:44.850 --> 00:05:49.040

First of all, let's implement the successful response part.



62

00:05:49.500 --> 00:05:51.680

We will get a response as data.



63

00:05:52.140 --> 00:05:57.870

If the mission is successfully completed, we can redirect it to the log in page.



64

00:05:58.780 --> 00:06:03.690

Then I will implement the editable block on the ED Block.



65

00:06:04.350 --> 00:06:08.370

We can check the error studies if you remember it.



66

00:06:08.700 --> 00:06:15.120

We described that user should be unique for registered operation on server site.



67

00:06:15.660 --> 00:06:21.690

Then if there is the same username request, we return the conflict.



68

00:06:21.690 --> 00:06:28.230

HTP status cornflake HTP status code is four hundred and nine.



69

00:06:28.950 --> 00:06:38.460

Actually we will implement these status on the ED block if there is an error and the status of it is



70

00:06:38.580 --> 00:06:45.510

four hundred and nine, we will send the error message as username.



71

00:06:46.650 --> 00:06:54.110

Already exists, as we don't expect any other specific areas.



72

00:06:54.270 --> 00:07:01.470

So it should be unexpected error and the error is that comes from error, that error message.



73

00:07:11.480 --> 00:07:15.350

To the market, we can also write the error on the console.



74

00:07:20.280 --> 00:07:27.450

OK, that's all about registered component controller implementation, we can implement the register



75

00:07:27.450 --> 00:07:31.090

page on the next lesson, that's all.



76

00:07:31.260 --> 00:07:31.740

Thank you.

