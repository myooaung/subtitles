WEBVTT
1

00:00:05.690 --> 00:00:15.700

Hi, guys, in this lesson, we will create an internal API tocome from HTTP requests in previous lessons



2

00:00:15.830 --> 00:00:20.810

we have implemented, sign in and sign up methods.



3

00:00:20.990 --> 00:00:27.570

But these methods will work for only guests and default users.



4

00:00:29.360 --> 00:00:32.920

What if we need a spare user, for example?



5

00:00:32.930 --> 00:00:37.330

We can create a user, but the role of the user is user.



6

00:00:37.430 --> 00:00:46.200

But we also want to change the user role to admin because our system also has this functionality.



7

00:00:47.120 --> 00:00:49.100

So how can we provide it?



8

00:00:49.760 --> 00:00:55.780

We can directly change it from the database or we can create a super user.



9

00:00:55.790 --> 00:00:58.460

And with this user we can handle it.



10

00:00:59.180 --> 00:01:06.640

You order to change it from the database is not user friendly so we can implement it.



11

00:01:06.740 --> 00:01:08.270

We are super users.



12

00:01:08.960 --> 00:01:11.000

How will our spare user work?



13

00:01:12.100 --> 00:01:16.130

We will describe a specific secret key for super users.



14

00:01:16.790 --> 00:01:24.830

If we sent the secret key as an authorization header, our system will be authorized.



15

00:01:25.250 --> 00:01:31.070

So we will use a predefined JWT token for super users.



16

00:01:31.850 --> 00:01:33.710

Now let's implement it.



17

00:01:35.360 --> 00:01:42.290

To do it, we will create the internal API authentication filter class under the security package.



18

00:01:47.310 --> 00:01:56.370

To handle requests or to filter request on JOA or sibling sibling presents, lots of HTP filters, and



19

00:01:56.670 --> 00:01:59.990

these HTP filters work in change.



20

00:02:00.780 --> 00:02:03.460

Of course, lots of chains can work together.



21

00:02:03.840 --> 00:02:10.350

We should use one spiritualised filter vosbury kerstetter guarantees to be just executed.



22

00:02:10.350 --> 00:02:19.800

It purchased the two filter implementations elitist attribute for already filtered proceeding without



23

00:02:19.800 --> 00:02:20.760

filtering again.



24

00:02:20.760 --> 00:02:29.100

If the attribute is already that actually we talk about it before in the previous lessons, then we



25

00:02:29.100 --> 00:02:35.100

will extend once, just filter vosbury, just filter presents.



26

00:02:35.100 --> 00:02:38.730

Lots of methods, but especially Malmesbury.



27

00:02:38.730 --> 00:02:43.890

Koskela describes defiance and obstruct the filter internal.



28

00:02:45.930 --> 00:02:50.810

Its implementations will contain the code to execute by a given filter.



29

00:02:50.970 --> 00:02:59.940

If the filter hasn't been applied in filter methods, we can access HTTP request and responses and we



30

00:02:59.940 --> 00:03:02.100

can also filter change as a parameter.



31

00:03:03.840 --> 00:03:07.320

Then we will override the do filter internal method.



32

00:03:08.070 --> 00:03:12.870

In this method we will generate authentication from ETP request.



33

00:03:13.440 --> 00:03:18.390

But first of all, we need to describe an access key force per user.



34

00:03:19.290 --> 00:03:25.250

We will have an access key and authorization will be provided with this key.



35

00:03:26.340 --> 00:03:29.820

Let's describe it in application properties.



36

00:03:31.020 --> 00:03:35.960

We can describe it as an authentic internal appetite.



37

00:03:36.750 --> 00:03:37.350

For now.



38

00:03:37.350 --> 00:03:40.620

We can assign some random secular content.



39

00:03:41.910 --> 00:03:51.360

Then we will call it from authentication filters, but we can send it externally from being creation.



40

00:03:54.860 --> 00:03:58.860

Now, first of all, let's create a constructor for it.



41

00:03:59.660 --> 00:04:04.220

This constructor will expect excessed key as a parameter.



42

00:04:18.320 --> 00:04:23.850

Our field of class will be a sprint component, so we should create a beam for it.



43

00:04:24.710 --> 00:04:26.720

We can handle it from security.



44

00:04:26.720 --> 00:04:27.220

Contiki.



45

00:04:32.300 --> 00:04:39.980

We will create a new bin for internal authentication filters and as a parameter, we will send an access



46

00:04:39.980 --> 00:04:42.110

key from application properties.



47

00:04:42.410 --> 00:04:48.230

So first of all, let's call the access key variable from the application properties with value annotation.



48

00:04:50.240 --> 00:04:52.790

Then we can create our filter be.



49

00:05:20.710 --> 00:05:28.510

OK, now we can pass the authorization, Heather, and we can create an authentication object, first



50

00:05:28.510 --> 00:05:34.870

of all, we will extract the authentication key from the header to handle it.



51

00:05:35.020 --> 00:05:37.230

We already have a method on security.



52

00:05:37.230 --> 00:05:39.670

You talk so directly, we can call it.



53

00:05:44.980 --> 00:05:51.280

Then this Heather really should be the same with access key, if it is not the same with the internal



54

00:05:51.280 --> 00:05:54.610

security, we will return exception for it.



55

00:06:00.800 --> 00:06:10.940

Also here, we can create some logs, Lombok Library also provides lodging with a set of fauji annotation



56

00:06:11.060 --> 00:06:12.790

so we can use it directly.



57

00:06:26.390 --> 00:06:35.090

Then we will create a special user for security, our security user is user principle, the only way



58

00:06:35.090 --> 00:06:37.260

to describe it in previous lessons.



59

00:06:38.480 --> 00:06:43.850

Now we will create a method on it for better use of our method.



60

00:06:43.850 --> 00:06:45.980

Name can be created per user.



61

00:06:47.180 --> 00:06:50.270

As a result, we will return to user principle.



62

00:06:51.800 --> 00:07:00.590

The role of super user will be system manager so we can handle it, be against authority provider.



63

00:07:02.870 --> 00:07:06.110

Then we will be able to use in principle object.



64

00:07:07.040 --> 00:07:10.900

Here we can create a random user idea and user name.



65

00:07:11.990 --> 00:07:16.600

Those will be only for placeholders here.



66

00:07:16.610 --> 00:07:21.440

The most important thing is the role of the user.



67

00:07:27.020 --> 00:07:29.720

Then we will call it from internal field.



68

00:07:33.730 --> 00:07:42.640

Now our user principle is ready, finally, sibling should know the authenticated user, so to handle



69

00:07:42.640 --> 00:07:45.940

it, we should inform the security context.



70

00:07:46.990 --> 00:07:51.860

But the security context expects an authentication token.



71

00:07:52.360 --> 00:07:56.830

So first of all, we should convert user principle to authentication.



72

00:07:57.640 --> 00:08:02.710

Spring security provides username password authentication token to handle it.



73

00:08:03.580 --> 00:08:09.520

Username password authentication token is a provider for authentication objects.



74

00:08:11.080 --> 00:08:15.220

Then we will set skippering security context authentication.



75

00:08:15.220 --> 00:08:22.630

Really, after finding the authentication, we will specify the user in the security context.



76

00:08:24.340 --> 00:08:27.010

And so we will say to security.



77

00:08:27.250 --> 00:08:30.430

OK, the user is authenticated successfully.



78

00:08:46.110 --> 00:08:50.220

Finally, we will return to filter requests and response.



79

00:08:53.740 --> 00:09:01.410

OK, now we have created our filter, but we should also include it in the authentication filter, Jane.



80

00:09:01.910 --> 00:09:04.460

Let's do it in the next lesson.



81

00:09:05.050 --> 00:09:06.850

That's all for this lesson.



82

00:09:07.510 --> 00:09:08.020

Thank you.

