1
00:00:05,650 --> 00:00:14,320
Hi, guys, in this lesson, we will create our page templates in English, we can create a component

2
00:00:14,320 --> 00:00:22,210
service, pipe, guard, etc. from the command line to create a component.

3
00:00:22,390 --> 00:00:29,380
We can use energy, generate component type and component name.

4
00:00:30,920 --> 00:00:38,130
When I say component, we can think of it as a page or reusable component.

5
00:00:38,570 --> 00:00:46,270
When I say service, we can think of it as a business component or a helper for components.

6
00:00:47,210 --> 00:00:57,380
When I say directive, it is used to extend the power of the estimate by giving it new Centex, for

7
00:00:57,380 --> 00:00:58,150
example.

8
00:00:58,490 --> 00:01:03,290
We can carry that directive like color converter, etc..

9
00:01:04,310 --> 00:01:11,990
When I say pipe, it is a simple way to transform values in an angular template.

10
00:01:12,320 --> 00:01:23,100
For example, they pipe currency, pipe it, transform they to formating string or it transforms decimal

11
00:01:23,630 --> 00:01:25,950
number to formatted currency.

12
00:01:26,720 --> 00:01:36,230
When I say God, it is specific to rotters and the rod gods are interfaces provided by ANGULAR, which

13
00:01:36,230 --> 00:01:45,440
when implemented, allow us to control the accessibility of hÃ©rault based on condition provided in class

14
00:01:45,470 --> 00:01:51,440
implementation of that interface and goes on like that.

15
00:01:52,910 --> 00:01:57,530
In this lesson, we will consider only components.

16
00:01:58,130 --> 00:02:04,690
First of all, let's look at our system and our requirements in our application.

17
00:02:04,940 --> 00:02:07,630
We need three kinds of pets.

18
00:02:08,480 --> 00:02:14,810
These are guest pates, user page and admin pates.

19
00:02:15,800 --> 00:02:18,110
Yes, pets are simple.

20
00:02:18,290 --> 00:02:24,480
Yes, can visit our application and can see the books to buy them.

21
00:02:25,940 --> 00:02:29,280
So our first page should be the home page.

22
00:02:29,450 --> 00:02:32,450
This page will include a list of books.

23
00:02:33,020 --> 00:02:39,950
Guests can see the books, but to purchase them, they should sign in the application.

24
00:02:40,190 --> 00:02:45,200
So we also need to register and login page.

25
00:02:45,770 --> 00:02:50,310
OK, those pages will be enough for guests.

26
00:02:51,270 --> 00:03:02,090
Our second page type will be for users after users visit the home page and sign into the application

27
00:03:02,540 --> 00:03:06,020
user page will be reachable anymore.

28
00:03:06,590 --> 00:03:09,860
Users also see all guests.

29
00:03:09,860 --> 00:03:17,620
Page and user also can have a profile page to see the previous purchases.

30
00:03:17,930 --> 00:03:22,310
So our order page will be a profile page.

31
00:03:23,660 --> 00:03:28,280
Our other page type will be for admins.

32
00:03:28,970 --> 00:03:33,230
User role can be the default user or admin.

33
00:03:33,740 --> 00:03:44,180
If the user role is admin, the user can have the ability to add or delete the books so specific to

34
00:03:44,210 --> 00:03:48,080
admins we should create an admin dashboard.

35
00:03:48,200 --> 00:03:52,450
So our other page will be an admin page.

36
00:03:53,270 --> 00:04:03,410
OK, these pages will be our main components, but we should also have typical error updates for not

37
00:04:03,410 --> 00:04:05,630
fonts and unauthorized.

38
00:04:06,290 --> 00:04:13,550
If they get an unknown page request, we will redirect to the not font page.

39
00:04:13,940 --> 00:04:21,020
If they get an unauthorized user request, we will redirect to the unauthorized page.

40
00:04:21,800 --> 00:04:25,330
OK, now our page requirements are ready.

41
00:04:26,510 --> 00:04:30,620
Now let's create them one by one with engy comment.

42
00:04:31,310 --> 00:04:41,870
We can directly use and generate components plus component name or we can use it with a short format

43
00:04:41,870 --> 00:04:47,060
like Engie G, C plus component NE.

44
00:04:47,720 --> 00:04:51,350
Both of them will produce the same result.

45
00:04:52,520 --> 00:04:57,090
We can create our components in the folder structure.

46
00:04:57,530 --> 00:05:07,760
I mean, we can create a guest page under the guest folder, user page under the user pates admin page,

47
00:05:07,910 --> 00:05:12,950
under the admin folder and error page under the edit folder.

48
00:05:13,580 --> 00:05:17,140
This will provide a better structure and readability.

49
00:05:18,170 --> 00:05:23,770
We have a home login and registered components for the guest.

50
00:05:24,830 --> 00:05:28,420
We can specify their component name with the folder.

51
00:05:29,030 --> 00:05:36,140
These comments will create folders and components for us under the source.

52
00:05:55,170 --> 00:06:02,310
We have a profile page for the users, we can specify the folder name as the user.

53
00:06:12,340 --> 00:06:20,510
We have an admin page for the admins, we can specify the folder name as the admin.

54
00:06:21,130 --> 00:06:24,580
This will be an admin page under the admin folder.

55
00:06:25,120 --> 00:06:25,920
No problem.

56
00:06:26,200 --> 00:06:29,140
Our file structure will be the same it others.

57
00:06:30,460 --> 00:06:38,620
Finally, we will accrete error page four, not font exceptions and authorized exceptions.

58
00:06:39,190 --> 00:06:41,980
We can use the error folder for the.

59
00:06:56,490 --> 00:06:59,760
OK, now our page templates are ready.

60
00:07:00,550 --> 00:07:04,720
Now let's check what happens after the component creation.

61
00:07:05,940 --> 00:07:14,370
For example, we can check the log in page angular command line interface created for different types

62
00:07:14,370 --> 00:07:16,740
of files for the login page.

63
00:07:18,000 --> 00:07:30,540
These are successful HTML5 spec file and typescript five cases file for the components style e-mail

64
00:07:30,540 --> 00:07:42,570
file for the component rendering specified for the component unit testing and typescript file for the

65
00:07:42,930 --> 00:07:43,800
business logic.

66
00:07:44,700 --> 00:07:51,130
But somehow all these items should be connected to each other.

67
00:07:51,960 --> 00:08:02,400
We can find it from the component typescript when we look at it and go and provide set component declaration.

68
00:08:02,970 --> 00:08:14,220
This declaration provides the connection with other items so we can say that these components is a controller

69
00:08:14,430 --> 00:08:16,620
for the other FEIS.

70
00:08:18,600 --> 00:08:27,960
FirstLine is The Selecter, this means that we can reach this component with this tack so we can say

71
00:08:27,960 --> 00:08:32,190
that it is a string identifier for this component.

72
00:08:32,760 --> 00:08:41,610
This means that we can reach these component with this tag so we can say that it is a string identifier

73
00:08:41,970 --> 00:08:43,320
for this component.

74
00:08:44,190 --> 00:08:51,690
For example, if we want to reach the logging component from the app component, we can use these selecter

75
00:08:52,020 --> 00:08:56,220
when we implement it, we can directly see it on dobros.

76
00:09:04,410 --> 00:09:06,840
Second line is template you.

77
00:09:07,620 --> 00:09:14,810
It is CircuLite, this means these components will render this template here.

78
00:09:14,820 --> 00:09:20,560
We can specify the HDMI page or content of the estimated page.

79
00:09:21,000 --> 00:09:26,580
So if these specify the e-mail content like Hello World, it will also work.

80
00:09:27,480 --> 00:09:32,040
When we implement it, we can directly see it on liberalisers.

81
00:09:34,990 --> 00:09:44,530
Last line is Steinglass, this means this component will use these tile clauses for styling here.

82
00:09:44,560 --> 00:09:50,260
We can also specify the style, class or content of the style class like template.

83
00:09:52,570 --> 00:09:55,270
OK, components work like that.

84
00:09:55,540 --> 00:09:58,140
But there is one missing point here.

85
00:09:58,750 --> 00:10:03,030
How Angular knows these NEE components.

86
00:10:03,460 --> 00:10:10,980
So I mean that angular somehow shoot no logging component is the main component for Logan items.

87
00:10:11,290 --> 00:10:19,330
So if someone or some page tries to reach Logan component, they should use the Logan component.

88
00:10:19,780 --> 00:10:20,130
Yes.

89
00:10:20,770 --> 00:10:25,380
Answer is that Angular handles it with the module.

90
00:10:26,320 --> 00:10:31,820
If they check the module, we can see the Logan component.

91
00:10:31,840 --> 00:10:33,190
Is it decoration?

92
00:10:33,520 --> 00:10:39,430
Angular Cianni generation's handle it automatically also on behalf of us.

93
00:10:40,620 --> 00:10:49,570
OK, if we summarize it angular Saili generates components and informs the angular we are at module

94
00:10:50,560 --> 00:10:52,030
to access the component.

95
00:10:52,030 --> 00:11:00,760
It provides the main typescript and creates spirits with other items like cost, estimate, etc. All

96
00:11:00,760 --> 00:11:04,960
other components will have the same direction and logic.

97
00:11:05,170 --> 00:11:08,010
So this will be enough for us for the beginning.

98
00:11:08,590 --> 00:11:16,480
OK, that's all about component templates in the next lessons, we will see the details about that.

99
00:11:16,990 --> 00:11:17,500
Thank you.
