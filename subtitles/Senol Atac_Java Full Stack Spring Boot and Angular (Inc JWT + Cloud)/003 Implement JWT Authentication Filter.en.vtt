WEBVTT
1

00:00:05.740 --> 00:00:12.700

Hi, guys, in this lesson, we will create a custom JWT token from HTTP requests.



2

00:00:13.210 --> 00:00:22.630

Also, we will validate the token to handle requests or to filter requests on JOA or Sprink sibling



3

00:00:22.630 --> 00:00:30.040

presents, lots of HTTP filters and these HTTP filters work enchained.



4

00:00:30.040 --> 00:00:41.770

Not of course, lots of chains can work together, but here we need a specific filter for supreme security.



5

00:00:42.460 --> 00:00:51.490

We should use mass-produced filters since we are doing a database call to retrieve the principal or



6

00:00:51.490 --> 00:00:52.910

the authenticated user.



7

00:00:53.350 --> 00:00:56.830

There is no point in doing this more than once.



8

00:00:57.430 --> 00:01:03.430

After that, we set the principle to the security context.



9

00:01:04.630 --> 00:01:14.640

Once per request, filter guarantees to be just executed was purchased the dual filter implementation



10

00:01:14.800 --> 00:01:23.170

towards a request attribute for already filtered proceeding without filtering again if the attribute



11

00:01:23.170 --> 00:01:24.220

is already there.



12

00:01:25.000 --> 00:01:28.180

Now let's implement it on our court.



13

00:01:28.660 --> 00:01:36.130

To do it, we will create that JWT authorization filter golos under the JWT package.



14

00:01:38.350 --> 00:01:42.130

Then we will extend once per request filter.



15

00:01:47.620 --> 00:01:55.330

Once per request, filter presents lots of matters, but especially ones purchase filter, defiance



16

00:01:55.480 --> 00:02:00.010

and obstruction to filter internal matters.



17

00:02:01.280 --> 00:02:07.250

Implementations will contain the court to execute by a given filter.



18

00:02:07.420 --> 00:02:16.360

If the filter has not been applied in filter methods, we can access HDTV request and responses.



19

00:02:16.510 --> 00:02:20.980

We can also access the filter chain as a parameter.



20

00:02:22.390 --> 00:02:27.670

Then we will all right to do fields of internal matters in this matter.



21

00:02:28.030 --> 00:02:36.130

We will generate authentication from HTTP requests, if you remember that we have already implemented



22

00:02:36.130 --> 00:02:38.740

it in the JWT provider.



23

00:02:39.550 --> 00:02:48.640

So first of all, we should inject the JWT provider Klus we can use Wired to inject it.



24

00:02:50.190 --> 00:02:54.860

By the way, you can think that this filter isn't a supreme being.



25

00:02:55.290 --> 00:03:00.720

So how can use and what's a white non-speaking component?



26

00:03:01.260 --> 00:03:02.720

Yes, absolutely.



27

00:03:03.090 --> 00:03:06.240

We need to create Deanne's for it.



28

00:03:06.240 --> 00:03:09.680

Otherwise, we couldn't use Sprink features.



29

00:03:11.430 --> 00:03:16.140

Let's create a bin for it in the sibling security configuration class.



30

00:03:24.250 --> 00:03:27.850

Now we can return to the filter again.



31

00:03:38.260 --> 00:03:44.990

In the do are matters, we will generate authentication from HTTP requests.



32

00:03:45.670 --> 00:03:49.870

We will call the JWT provider method directly.



33

00:03:52.400 --> 00:04:00.280

Then we will check the token value and we will validated the already have a method for validation checks



34

00:04:00.290 --> 00:04:00.740

also.



35

00:04:09.790 --> 00:04:17.040

Then we will, said spring security, context, authentication, really after finding the authentication,



36

00:04:17.050 --> 00:04:25.630

we will specify the user in the security context and we will say to sibling security, okay, the user



37

00:04:25.630 --> 00:04:27.460

is authenticated successfully.



38

00:04:29.210 --> 00:04:34.610

Finally, we will return the filtered request and response.



39

00:04:35.620 --> 00:04:40.440

OK, that's all about the JWT authorization Fields of Glass.



40

00:04:40.840 --> 00:04:44.510

Now we will call it from security config.



41

00:04:45.200 --> 00:04:50.680

To do it, we can add our filter to discipling security filter chain.



42

00:04:51.200 --> 00:04:55.940

But the important thing is the order of filters.



43

00:04:56.570 --> 00:05:05.150

Here, our filter should be handled before username and password authentication filter because suppling



44

00:05:05.150 --> 00:05:14.270

security expects username and password or authentication on this filter if they use the username and



45

00:05:14.270 --> 00:05:17.330

password authentication filter before our filter.



46

00:05:17.660 --> 00:05:19.460

Our filter Bontrager.



47

00:05:20.940 --> 00:05:25.290

So we should maintain our auditing in this audit.



48

00:05:26.700 --> 00:05:34.080

Let's implement it, HTP Security already has a method for Feltl Auditing and Feltl Addition.



49

00:05:34.740 --> 00:05:39.600

We can directly use that as filter before method here.



50

00:05:39.930 --> 00:05:48.500

Our first filter will be our JWT filter, then username and password authentication filter.



51

00:05:50.160 --> 00:05:52.260

OK, that's all, thank you.

