1
00:00:05,570 --> 00:00:13,010
Now we can create our form, first of all, we should add forms module because template, the rival

2
00:00:13,010 --> 00:00:17,790
forms rely on directive's defined in the forms module.

3
00:00:18,380 --> 00:00:27,270
We should add it to that module that, yes, it is a module, so we should describe it under the imports

4
00:00:27,290 --> 00:00:27,740
block.

5
00:00:28,610 --> 00:00:32,350
Then I can go on with the register HDMI.

6
00:00:36,310 --> 00:00:38,200
Here, I'll add for.

7
00:00:42,540 --> 00:00:47,490
We don't need these ction attribute inside this forum.

8
00:00:47,640 --> 00:00:50,090
We need three different inputs.

9
00:00:50,250 --> 00:00:58,940
We should wrap our form inputs with form the Suguru because it is a requirement for bootstrap.

10
00:00:59,340 --> 00:01:04,430
So I will start with a class for Kurup inside it.

11
00:01:04,650 --> 00:01:12,540
I'll create a label and these label should have an attribute called for name or fullName.

12
00:01:17,330 --> 00:01:24,410
Next to this label, I'll need an input with an idea attribute set to name.

13
00:01:27,050 --> 00:01:36,780
And this input should also have a clause called form control next to this input and validation error

14
00:01:37,040 --> 00:01:46,610
division to show these validation blook, I should also have a class called Alert Danger, which puts

15
00:01:46,610 --> 00:01:48,800
the content in a red box.

16
00:01:49,850 --> 00:01:56,870
Then I'll hit to the tab and the Emmott's plugin will complete HDMI content for me.

17
00:01:57,200 --> 00:01:59,140
OK, here is our markup.

18
00:01:59,510 --> 00:02:01,090
Here is our division.

19
00:02:01,460 --> 00:02:04,880
We have a label input and editable block inside it.

20
00:02:05,720 --> 00:02:14,090
I have created this form group Elements for fullName, so the label name should be full name and I want

21
00:02:14,090 --> 00:02:16,340
to describe it as required.

22
00:02:16,460 --> 00:02:19,430
So input should have the required attribute.

23
00:02:20,030 --> 00:02:21,890
If the input is not valid.

24
00:02:22,040 --> 00:02:25,700
I show an error message like full name is required.

25
00:02:32,630 --> 00:02:41,570
I do the same thing for username and password so I can copy and paste the name field and then I can

26
00:02:41,570 --> 00:02:43,490
edit it for other fields.

27
00:02:45,730 --> 00:02:52,270
Label attribute Phoenixville, the user name and the label name will be the user name also.

28
00:02:56,210 --> 00:03:02,090
Idea of input will be username also I'll edit the error message.

29
00:03:06,510 --> 00:03:15,780
I'll do the same thing for Pettiford also lable, attribute and value will be password e-mail provides

30
00:03:15,780 --> 00:03:19,390
password input for sekret display.

31
00:03:19,560 --> 00:03:22,440
So I should use it as input time.

32
00:03:23,820 --> 00:03:26,400
Idea of input will be password.

33
00:03:27,060 --> 00:03:29,880
Also, I'll edit the error message.

34
00:03:32,840 --> 00:03:41,420
Finally, we need a button to submit the form, this button should have three classes, one is Betty

35
00:03:41,420 --> 00:03:53,060
and the other is between success and the last one is W a hundredth, which is the style for which Hanlon's

36
00:03:53,060 --> 00:03:53,600
percent.

37
00:03:58,470 --> 00:04:04,020
And we will use this button for our sign up so we can call it as sign up.

38
00:04:15,030 --> 00:04:19,290
Now, let's check it, let's reload the register page and check it.

39
00:04:24,290 --> 00:04:25,790
OK, it looks nice.

40
00:04:26,000 --> 00:04:33,050
I'll register form template is ready now we will bind this form with the angular object.

41
00:04:33,860 --> 00:04:41,870
First of all, for the form element, I can export the directive into a local template variable using

42
00:04:42,110 --> 00:04:44,270
energy for as the key.

43
00:04:44,720 --> 00:04:48,710
For example, here I can export it with the F.T..

44
00:04:53,560 --> 00:05:01,900
Now I can access the phone controls and foreign relations with using these F key, for example, we

45
00:05:01,900 --> 00:05:08,560
can submit this and submit property before we submit it.

46
00:05:08,560 --> 00:05:11,790
We can validate the form after validation.

47
00:05:12,010 --> 00:05:15,760
We can call the register method from register.com point.

48
00:05:15,820 --> 00:05:25,540
That is, by the way, the submit button at the bottom of the form does nothing on its own, but it

49
00:05:25,540 --> 00:05:30,150
does trigger a form submit event because of its type.

50
00:05:30,670 --> 00:05:35,130
So we should describe the submit method on the form element.

51
00:05:36,400 --> 00:05:40,950
No, we will bind the input fields with the form control.

52
00:05:41,350 --> 00:05:45,550
Like I said before, we will use template driven approach.

53
00:05:46,030 --> 00:05:53,410
We apply a directive to our input field and ANGULAR will create a control object associated with that

54
00:05:53,410 --> 00:05:55,280
input field under the hood.

55
00:05:55,750 --> 00:05:58,090
This directive is engine model.

56
00:05:58,660 --> 00:06:07,090
We use it for Toovey data binding so we can read the value from the object or we can edit it.

57
00:06:07,540 --> 00:06:10,090
Our first input is the name input.

58
00:06:10,360 --> 00:06:13,750
I'm going to apply the engine model directive.

59
00:06:14,290 --> 00:06:22,990
We can use it like Engy Model Directive and bonte it to a property or a field in our component level.

60
00:06:22,990 --> 00:06:26,800
Bind it to name fields of the user object.

61
00:06:27,310 --> 00:06:29,800
We already describe it on the component.

62
00:06:30,010 --> 00:06:38,440
If we use the engine model directive, we should set the name attribute of input field, so I should

63
00:06:38,440 --> 00:06:40,150
set the name attribute.

64
00:06:41,340 --> 00:06:44,920
I am going to use the same value with the ID.

65
00:06:45,880 --> 00:06:47,830
Final thing about this input.

66
00:06:48,010 --> 00:06:56,410
I should give reference to these Engy Noddle directive because I want to validate this input field and

67
00:06:56,470 --> 00:07:01,180
I can handle it with this reference for that.

68
00:07:01,600 --> 00:07:10,180
We are going to create a template variable so hectic, let's call it template variable as name and as

69
00:07:10,180 --> 00:07:13,410
the video I am going to use Engie Model.

70
00:07:13,570 --> 00:07:21,070
So when Engler's sees this, it is going to set this template variable to the engine model directive.

71
00:07:21,100 --> 00:07:24,000
It is applied on this input field.

72
00:07:25,210 --> 00:07:31,570
OK, now we can use this variable on the editable to validate this input field.

73
00:07:31,930 --> 00:07:36,250
We don't want to display error block at all times.

74
00:07:36,640 --> 00:07:41,890
We wanna display this only if the input field is not valid.

75
00:07:42,070 --> 00:07:47,680
So we use the NGF directive, which is used for condition check on English.

76
00:07:48,490 --> 00:07:52,300
But how can we know the valid state of the input field?

77
00:07:52,570 --> 00:08:01,870
It is so easy because we have a reference for the input field and this reference provides foreign control

78
00:08:01,870 --> 00:08:09,580
validation methods so we can use varied state title, state, dot, state, etc. with this reference.

79
00:08:10,870 --> 00:08:16,600
So we will render this error block only the name field is not valid.

80
00:08:20,650 --> 00:08:25,810
Now, let's check the results, let's reload the register page and check it.

81
00:08:31,810 --> 00:08:38,380
When I type something to the name field, the error is gone, when I delete it, the error is back.

82
00:08:38,560 --> 00:08:44,620
So the validation is working, but in the initial case, it looks like it has a problem.

83
00:08:45,520 --> 00:08:46,540
We don't fix it.

84
00:08:46,540 --> 00:08:51,560
Like if there is no submission on the phone, don't show any message.

85
00:08:52,810 --> 00:09:00,100
We have a reference for the form and this reference provides the information whether the form is submitted

86
00:09:00,100 --> 00:09:04,040
or not, so we can directly use it on the ED block.

87
00:09:06,790 --> 00:09:12,400
Now, let's check the result, let's reload the register page and check it.

88
00:09:23,160 --> 00:09:24,810
OK, it looks nice.

89
00:09:28,040 --> 00:09:35,660
OK, now I do the same things in other fields, first of all, I play the energy model directive on

90
00:09:35,660 --> 00:09:42,890
the user name input, then I add a reference for energy model and I'll render this error.

91
00:09:42,920 --> 00:09:48,170
Look, only the username field is not valid and the form is submitted.

92
00:10:09,300 --> 00:10:16,800
And finally, I do the same thing on the passport field, I'll apply the engine model directive on the

93
00:10:16,800 --> 00:10:24,900
password field, then I'll add a reference for Engy model and I'll render this error block.

94
00:10:25,020 --> 00:10:30,390
Only the passport field is not valid and the form is submitted.

95
00:10:52,010 --> 00:10:57,800
Now, let's check the result, let's reload the register page and check it.

96
00:11:08,360 --> 00:11:10,910
OK, it looks nice.
