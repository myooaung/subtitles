WEBVTT
1
00:00:00.380 --> 00:00:04.550
In the last section we learn the basics behind a market and seek.

2
00:00:04.770 --> 00:00:10.970
It's time to start applying these basics to make really cool apps in the end of the section you're going

3
00:00:10.970 --> 00:00:15.940
to build an app where you can manually draw in the real world.

4
00:00:16.130 --> 00:00:24.880
So you're going to start a new X code project open up X code create a new project and a single application.

5
00:00:25.040 --> 00:00:31.390
Call the project A are trime press next and create the project.

6
00:00:31.550 --> 00:00:38.270
So to start setting up the user interface of the app go to the main storyboard and to the initial the

7
00:00:38.270 --> 00:00:41.870
controller add an arcade scene kids you

8
00:00:44.530 --> 00:00:49.230
expand the cricket scene preview such that it fits the views dimensions.

9
00:00:49.540 --> 00:00:55.480
So you learn in the previous section that the archaic view gives a camera a view of the real world that

10
00:00:55.480 --> 00:01:04.060
can display three dimensional content pinned to the top bottom leading and trailing space.

11
00:01:04.060 --> 00:01:09.130
Now add a button to the Harkat seeing you right close to the bottom.

12
00:01:09.170 --> 00:01:14.850
So I started horizontally centered called the bottom drawer

13
00:01:18.060 --> 00:01:21.280
and pinned the button to the bottom by 20 pixels.

14
00:01:21.360 --> 00:01:26.870
Give it a width of 65 pixels as well as the height of 45.

15
00:01:27.070 --> 00:01:32.290
The three constraints and give people a background color of your choice.

16
00:01:32.330 --> 00:01:38.730
I'm just going to give a background color of snow which is a fancy word for what's open up the assistant

17
00:01:38.730 --> 00:01:46.110
editor and connect the same view to The View Controller with an I.V. outlet connect the outlet and import

18
00:01:46.290 --> 00:01:53.370
market so that we can use the market framework close the assistant editor and back to the controller

19
00:01:53.970 --> 00:02:03.050
declare a constant in figuration configuration is equal to our world tracking session configuration.

20
00:02:03.510 --> 00:02:09.360
As previously discussed world tracking is used to track the position and orientation of the device at

21
00:02:09.360 --> 00:02:10.830
all times.

22
00:02:10.950 --> 00:02:17.840
Make sure the scene view runs per session with the configuration by writing self Darcy view does session

23
00:02:18.120 --> 00:02:21.650
does run configuration.

24
00:02:23.190 --> 00:02:27.030
Debug options to the scene view by writing self does seem.

25
00:02:27.030 --> 00:02:32.620
View does debug options is equal to an array type of debug options.

26
00:02:32.780 --> 00:02:41.760
A R S and evil options does show world origin and they are s.c and debug options does show feature points.

27
00:02:41.820 --> 00:02:49.920
We've done this before but this time also makes sure the scene view shows statistics self does scene

28
00:02:49.920 --> 00:02:53.830
view does show statistics is equal to true.

29
00:02:54.210 --> 00:02:59.940
So if this is set to true then the same view will show information like frames per second and seen rendering

30
00:02:59.940 --> 00:03:01.540
performance.

31
00:03:01.620 --> 00:03:05.960
Now before running app there is one more step which is a step you've done before.

32
00:03:06.040 --> 00:03:10.940
Go to the end for the up list and add the property privacy.

33
00:03:11.130 --> 00:03:13.470
Cameron uses description.

34
00:03:13.470 --> 00:03:20.450
This displays an alert prompting the user to allow the app to use the camera give the clerk a message

35
00:03:20.450 --> 00:03:29.870
by reading Please enable the camera for a cool a market experience and I seem to have misspelled camera.

36
00:03:30.200 --> 00:03:32.480
Now you can run the app.

37
00:03:32.510 --> 00:03:38.510
Notice the alert prompting the user to enable the camera allow the app to use the camera and give the

38
00:03:38.510 --> 00:03:41.720
device time to recognize its surroundings.

39
00:03:41.720 --> 00:03:43.160
Right here is the world origin.

40
00:03:43.160 --> 00:03:50.180
So the starting position relative to the scene view and here are the feature points which are tracking

41
00:03:50.180 --> 00:03:56.520
points for the device that provide the device information about its relative position to the real world.

42
00:03:56.540 --> 00:04:01.910
This is nothing new we've done these before on the bottom however are your statistics.

43
00:04:01.910 --> 00:04:06.030
Statistics show the rendering performance to be 60 frames per second.

44
00:04:06.110 --> 00:04:10.800
So scenes are constantly being rendered at 60 frames per second.

45
00:04:10.820 --> 00:04:12.350
Why is this important.

46
00:04:12.350 --> 00:04:19.250
Well you'll find out in a minute about 2 x code inherit from eight our SDN if you delegate

47
00:04:22.860 --> 00:04:30.840
by doing so you can access the renderer delegate will render seen this as the delegate function that's

48
00:04:30.840 --> 00:04:36.600
going to help us make the drawing up this delegate function gets called every time the view is about

49
00:04:36.600 --> 00:04:37.950
to render a scene.

50
00:04:38.070 --> 00:04:44.190
Essentially it's like a never ending loop since as you saw from before seen a rendering is occurring

51
00:04:44.190 --> 00:04:46.160
at 60 frames per second.

52
00:04:46.410 --> 00:04:51.550
So as long as something is being rendered this function keeps getting triggered.

53
00:04:51.630 --> 00:04:59.640
So put a print statement of rendering and for the delegate function to be called when a scene is rendered

54
00:04:59.880 --> 00:05:04.710
you need to declare the scene to use delegate to be self by writing self does seem.

55
00:05:04.730 --> 00:05:15.010
View delegate is equal to self run the up as the app is running scenes are constantly being rendered

56
00:05:15.100 --> 00:05:17.210
and seems are constantly being rendered.

57
00:05:17.230 --> 00:05:22.600
This print statement keeps getting triggered instead of a print statement in another lecture.

58
00:05:22.600 --> 00:05:29.490
We're going to draw in every frame of the rendered scene however to do that we're going to need the

59
00:05:29.530 --> 00:05:38.060
current position and orientation of the camera and each render scene we'll do that in the next video.
