1
00:00:01,490 --> 00:00:07,350
In the last video you saw how there were never seen delegate worked in this video we're going to pinpoint

2
00:00:07,350 --> 00:00:10,780
the current position of the camera relative to the real world.

3
00:00:10,800 --> 00:00:16,800
Every time the renderer delegate gets called so every time the delegate gets called you need the current

4
00:00:16,800 --> 00:00:22,420
position of the camera since it is at that point in the scene that you will be drawing.

5
00:00:22,710 --> 00:00:28,470
So we need to extract the current location and orientation of the camera every time the delegate gets

6
00:00:28,470 --> 00:00:29,270
called.

7
00:00:29,640 --> 00:00:36,890
So inside the delegate function you need the point of view of the scene view to get that guard let the

8
00:00:36,900 --> 00:00:48,860
point of view is equal to seeing a view point of view or else return.

9
00:00:48,900 --> 00:00:52,710
So we just unwrapped it safely using a guard statement.

10
00:00:52,890 --> 00:00:59,190
And the point of view contains the current location and orientation of the camera view.

11
00:01:07,570 --> 00:01:15,070
However the location and orientation are encoded inside of the point of view any transform matrix to

12
00:01:15,070 --> 00:01:16,920
get the transform matrix.

13
00:01:16,930 --> 00:01:26,810
You need to write let transform is equal to the point of view transform.

14
00:01:27,050 --> 00:01:34,850
Now from the transform extract the current orientation of your camera by writing left orientation is

15
00:01:34,850 --> 00:01:39,720
equal to SDN vector 3 0 0 and 0.

16
00:01:39,980 --> 00:01:47,730
I remember from before as vector 3 represents a three dimensional vector with x y and Zed fields.

17
00:01:47,750 --> 00:01:55,160
The orientation is always encoded in the transform matrix such that it's in the third column.

18
00:01:55,610 --> 00:02:07,060
So for the field X right transform and three this takes us to the third column in The Matrix then right

19
00:02:07,090 --> 00:02:08,880
the number one.

20
00:02:08,920 --> 00:02:13,660
Now you're in the third column of The Matrix the transform matrix row 1.

21
00:02:13,660 --> 00:02:20,830
So what you should get from this is that the orientation of the x value of the camera the horizontal

22
00:02:20,830 --> 00:02:26,570
orientation is located in the third column of the transform matrix.

23
00:02:26,590 --> 00:02:31,010
Row 1 now the Y field of the orientation is located in the row.

24
00:02:31,000 --> 00:02:37,500
Number two of column 3 and the Zad field is in column 3 row 3.

25
00:02:37,510 --> 00:02:45,300
So for the Y field right transform dot and three to column three wrote.

26
00:02:45,610 --> 00:02:53,020
And for the that field right transform dot and 3:03 column three row three.

27
00:02:53,080 --> 00:03:01,090
Now you need the current location of the camera so the location just like orientation is a three dimensional

28
00:03:01,090 --> 00:03:02,200
vector.

29
00:03:02,200 --> 00:03:04,930
It has an X Y and Z field.

30
00:03:05,320 --> 00:03:14,520
So right let location is equal to CN vector 3 0 0 and 0.

31
00:03:14,530 --> 00:03:21,190
Now the location for the X field is located in column 4 row one of the transform matrix.

32
00:03:21,190 --> 00:03:31,440
So transform M for one the location for the Y field is located in column 4 wrote 2 and the Xat field

33
00:03:31,440 --> 00:03:33,140
column for row 3.

34
00:03:33,150 --> 00:03:36,100
So you should have gone the following transform

35
00:03:38,870 --> 00:03:42,800
it and for you and transform it.

36
00:03:42,850 --> 00:03:57,530
M. 4:03 column for wrote two in column for 03.

37
00:03:57,730 --> 00:04:11,090
So right let current position of camera is equal to orientation plus location.

38
00:04:11,120 --> 00:04:12,180
This doesn't work.

39
00:04:12,200 --> 00:04:13,550
It gives an error.

40
00:04:13,700 --> 00:04:22,240
The error is that the binary operator plus cannot be applied between two C and vector or three values.

41
00:04:22,240 --> 00:04:29,440
You need to modify this binary operator such diets able to add these to C and vector or three types.

42
00:04:29,480 --> 00:04:38,900
So outside of the class write a function plus to modify the plus operator that takes in two three dimensional

43
00:04:38,900 --> 00:04:40,010
vectors.

44
00:04:40,070 --> 00:04:47,180
The first one the left hand side of type C and vector are three and another one of type A C undoctored

45
00:04:47,300 --> 00:04:54,380
3 with a return value of a three dimensional actor as well.

46
00:04:54,760 --> 00:05:01,570
So now the binary operator is able to take in to see an vector of three types.

47
00:05:01,570 --> 00:05:04,330
Notice that the error here goes away.

48
00:05:04,330 --> 00:05:10,490
Now we need a return value such that when these two are added it gives us their combined value.

49
00:05:10,750 --> 00:05:16,190
So return I see n vector 3 make.

50
00:05:16,240 --> 00:05:19,670
So we're basically making a new 3D vector.

51
00:05:19,790 --> 00:05:26,710
The x field of that new vector will be the combination of the X fields of the orientation and location.

52
00:05:26,980 --> 00:05:32,150
So right left X plus or right dot x.

53
00:05:32,480 --> 00:05:39,230
So you're adding the X field of your orientation plus the X field of your location the Y field of our

54
00:05:39,230 --> 00:05:44,590
new vector will be the combination of the y fields of your orientation and location.

55
00:05:44,840 --> 00:05:50,380
So once again left out y plus right why the same thing will happen first.

56
00:05:50,420 --> 00:05:52,780
So left does Zad plus right.

57
00:05:52,780 --> 00:05:59,180
Does your combining Zad value orientation plus the Zad value of your location.

58
00:05:59,180 --> 00:06:00,850
However before we proceed.

59
00:06:00,860 --> 00:06:05,400
Print the X Y and Z fields of the orientation variable.

60
00:06:05,630 --> 00:06:18,370
So print orientation X orientation dot Y and orientation dot set and run the app.

61
00:06:18,470 --> 00:06:26,240
The rule of thumb is if I orient my phone to the right so if I rotated to the right the X orientation

62
00:06:26,270 --> 00:06:28,040
should be positive.

63
00:06:28,040 --> 00:06:31,400
Notice in the debugger it's continuously negative.

64
00:06:31,490 --> 00:06:36,380
If I orient my phone up the Y orientation should be positive.

65
00:06:36,380 --> 00:06:39,680
Notice in the debugger it's continuously negative.

66
00:06:40,100 --> 00:06:48,440
So the orientation is reversed and reverse by making everything in the orientation negative.

67
00:06:48,680 --> 00:06:53,270
So what's continuously negative will now be continuously positive.

68
00:06:53,300 --> 00:06:54,190
Run the up.

69
00:06:54,200 --> 00:06:57,700
Make sure to look at the debugger as I test this.

70
00:06:57,980 --> 00:07:00,620
Wait for the world origin to load.

71
00:07:00,620 --> 00:07:07,820
Go to the right the x value increases in the positive direction go up the y axis and the y value grows

72
00:07:07,820 --> 00:07:10,070
in the positive direction as well.

73
00:07:10,070 --> 00:07:13,340
Now you're finally ready to draw it in 3D.

74
00:07:13,340 --> 00:07:15,080
You'll do that in the next video.
