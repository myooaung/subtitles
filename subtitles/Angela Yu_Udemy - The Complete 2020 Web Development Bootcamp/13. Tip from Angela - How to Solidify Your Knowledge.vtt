WEBVTT
0
1
00:00:00.840 --> 00:00:04.470
Hey, good job, you've done another module.
1

2
00:00:04.470 --> 00:00:06.160
This is awesome.
2

3
00:00:06.160 --> 00:00:12.540
I hope you'll keep continuing this momentum, and just continue along the course.
3

4
00:00:12.540 --> 00:00:19.530
Now I want to talk to you about what you can do to really consolidate your knowledge and make it your
4

5
00:00:19.530 --> 00:00:20.670
own.
5

6
00:00:20.700 --> 00:00:28.670
One of the things that is really helpful that I've found is, since I started teaching programming, I've
6

7
00:00:28.680 --> 00:00:36.840
had a much better grasp of a lot of the programming concepts. Because often when you're just doing things,
7

8
00:00:36.840 --> 00:00:40.930
when you're just coding along, you know, as long as it works, it's fine, right?
8

9
00:00:41.100 --> 00:00:47.850
But if somebody actually asked me like, “Well, how does that code actually work, or why is this code better
9

10
00:00:47.850 --> 00:00:50.930
than this other solution that you could have done?”,
10

11
00:00:51.680 --> 00:01:00.900
now if I actually had to explain it, that whole process helps me really (a) realize like maybe I actually
11

12
00:01:00.900 --> 00:01:01.590
don't know,
12

13
00:01:01.620 --> 00:01:07.260
maybe I actually have to find out and read around the topic, hunt around on Google to get a bit more
13

14
00:01:07.260 --> 00:01:08.400
background knowledge,
14

15
00:01:08.400 --> 00:01:16.410
(b) the other thing is if I did know, and I could verbalize it and explain it so that somebody else, another
15

16
00:01:16.410 --> 00:01:24.630
human, actually understands, then I have to pull that knowledge out of my brain and into like a text format,
16

17
00:01:24.720 --> 00:01:31.830
or like a verbal format, then it really really becomes solidified in my own memory, right?
17

18
00:01:32.400 --> 00:01:40.490
So what I recommend people always to do is try to, while you're learning, come up with your own analogies,
18

19
00:01:40.500 --> 00:01:40.970
right?
19

20
00:01:40.980 --> 00:01:50.310
I'll often give you a lot of analogies like, you know, an object is a bit like a car, and a class is a
20

21
00:01:50.310 --> 00:01:51.380
bit like a blueprint.
21

22
00:01:51.720 --> 00:01:52.870
But once you understand...
22

23
00:01:53.100 --> 00:01:57.510
But once you've understood those concepts, then you're very much
23

24
00:01:57.510 --> 00:02:00.620
welcome to come up with your own analogies, right?
24

25
00:02:00.900 --> 00:02:08.160
And try teaching those analogies to other students on the course. Head into the Q and A and say, “Hey, this
25

26
00:02:08.160 --> 00:02:14.880
is something that I came up with.” And maybe, you know, like it will help somebody, because my way is often
26

27
00:02:14.880 --> 00:02:17.300
like not the only way, right?
27

28
00:02:17.310 --> 00:02:22.870
And maybe you'll come up with a better explanation that other students will be able to relate to best.
28

29
00:02:22.950 --> 00:02:32.340
So I recommend teaching others and also sort of piecing the data, or the information, together in your
29

30
00:02:32.340 --> 00:02:39.390
own head, so that you can explain it to somebody else. And more often than not, it really really helps
30

31
00:02:39.390 --> 00:02:48.360
people learn the topics, that's especially in programming. So keep going and try explaining some of the
31

32
00:02:48.360 --> 00:02:53.760
things that you've understood to other people, and getting other people to understand it, and I'm sure you're
32

33
00:02:53.760 --> 00:02:55.040
going to do even better.
