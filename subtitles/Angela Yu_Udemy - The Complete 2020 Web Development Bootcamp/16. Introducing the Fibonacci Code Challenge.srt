1
00:00:00,600 --> 00:00:04,830
Jetzt in der nächsten Lektion habe ich eine weitere Herausforderung beim Codieren für Sie.

2
00:00:04,830 --> 00:00:10,860
Die Idee der Codierungsherausforderung besteht darin, dass Sie die Fibonacci-Sequenz replizieren können, sodass

3
00:00:10,860 --> 00:00:13,480
die Fibonacci-Sequenz sehr einfach ist.

4
00:00:13,650 --> 00:00:19,860
Nehmen wir im Wesentlichen an, dass die ersten beiden Ziffern mit Null und Eins beginnen. Jede nachfolgende Nummer

5
00:00:19,860 --> 00:00:23,910
in dieser Sequenz wird durch Hinzufügen der beiden vorherigen Nummern erstellt.

6
00:00:23,910 --> 00:00:27,230
So ist zum Beispiel drei von eins plus zwei.

7
00:00:27,390 --> 00:00:29,790
Fünf kommt von zwei plus drei.

8
00:00:29,880 --> 00:00:32,180
31 kommt von 13 plus 21.

9
00:00:32,610 --> 00:00:35,750
Es ist also eine wirklich sehr einfache Sequenz.

10
00:00:35,820 --> 00:00:44,490
Jetzt ist es Ihr Ziel, eine Funktion zu erstellen, die Sie durch einfaches Schreiben von Fibonacci-Generator-Klammern aufrufen können. Anschließend

11
00:00:44,760 --> 00:00:52,320
setzen Sie ein Innen und n ist die Anzahl der Elemente in der Sequenz, die Sie

12
00:00:52,320 --> 00:00:53,310
erstellen möchten.

13
00:00:53,310 --> 00:00:59,340
Wenn Sie beispielsweise die ersten drei Elemente in der Sieben-R2-Sequenz erhalten möchten,

14
00:00:59,340 --> 00:01:07,760
sollten Sie den Fibonacci-Generator-Pass in der Nummer drei aufrufen und 0 1 1 als Array als Ausgabe erhalten.

15
00:01:07,770 --> 00:01:11,640
Jetzt gibt es ein paar Dinge zu beachten, bevor Sie sich der Herausforderung stellen.

16
00:01:11,640 --> 00:01:18,330
Erstens erwartet der Lösungsprüfer ein Array als Ausgabe mit eckigen Klammern und Kommas,

17
00:01:18,330 --> 00:01:20,930
die jede Zahl trennen.

18
00:01:20,970 --> 00:01:24,560
Als nächstes ändern Sie keinen der vorhandenen Codes.

19
00:01:24,570 --> 00:01:30,330
Der Lösungsprüfer wird nach dieser Funktion Fibonacci-Generator suchen und eine Zahl übergeben.

20
00:01:30,360 --> 00:01:35,430
Wenn Sie also einen der vorhandenen Codes ändern, funktioniert dieser möglicherweise nicht und es wird angenommen, dass

21
00:01:35,430 --> 00:01:37,680
Sie den Code stattdessen falsch geschrieben haben.

22
00:01:37,680 --> 00:01:44,550
Als nächstes benötigen Sie keine Warnungen oder Eingabeaufforderungen, und das Ergebnis sollte tatsächlich als nächstes von dieser Funktion

23
00:01:45,000 --> 00:01:46,750
als Ausgabe zurückgegeben werden.

24
00:01:46,860 --> 00:01:51,540
Die ersten beiden Zahlen in der Sequenz müssen 0 und 1 sein.

25
00:01:51,540 --> 00:01:54,520
Es gibt viele Versionen der Fibonacci-Sequenz.

26
00:01:54,600 --> 00:02:01,050
Einige beginnen bei eins, andere bei null, aber in unserer Version wird es bei null beginnen und dann

27
00:02:01,050 --> 00:02:03,050
wird die nächste 1 sein.

28
00:02:03,060 --> 00:02:09,320
Wenn Sie also eine Sequenz generieren, müssen die ersten beiden Zahlen 0 und 1 sein.

29
00:02:09,360 --> 00:02:15,570
Das Letzte, was Sie sagen müssen, ist, dass Sie, wenn Sie eine for-Schleife in Ihrem Code verwenden, sicherstellen, dass

30
00:02:15,570 --> 00:02:17,230
Sie diese so schreiben.

31
00:02:17,250 --> 00:02:25,110
Sie erstellen also AI als explizite Variablen. Verwenden Sie eine Variable i gleich Null als ersten Teil der for-Schleife,

32
00:02:25,530 --> 00:02:28,530
anstatt einfach I gleich Null zu schreiben.

33
00:02:28,530 --> 00:02:34,560
Dies liegt nur daran, dass die Version von JavaScript, mit der der Code überprüft wird, diese

34
00:02:34,560 --> 00:02:35,880
spezielle Anforderung hat.

35
00:02:36,060 --> 00:02:37,920
Jetzt müssen Sie keine for-Schleife mehr verwenden.

36
00:02:37,920 --> 00:02:42,000
Sie können eine while-Schleife verwenden, mit der Sie alles verwenden können, mit dem Sie vertraut sind.

37
00:02:42,060 --> 00:02:45,460
Jetzt habe ich endlich diesen Replikspielplatz hier.

38
00:02:45,630 --> 00:02:51,900
Und wenn Sie darauf klicken, werden Sie zu einer Sandbox auf Rappler weitergeleitet, in der Sie mit Ihrem

39
00:02:51,900 --> 00:02:56,790
Code herumspielen und sehen können, ob er tatsächlich das tut, was er erwartet.

40
00:02:56,790 --> 00:03:01,350
Wenn jetzt alles gut geht und ich nach unten scrolle, um meinen Lösungscode hier zu verbergen.

41
00:03:01,380 --> 00:03:06,960
Wenn Sie es jedoch schaffen, den Code korrekt zu schreiben, sollten Sie in der Lage sein,

42
00:03:06,960 --> 00:03:12,690
eine variable Code-Ausgabe zu erstellen, in der die Ausgabe gespeichert wird, die von Ihrem Funktions-Fibonacci-Generator zurückgegeben wird.

43
00:03:12,810 --> 00:03:20,220
Und wenn wir eine Zahl übergeben, sagen wir 5, und wir unseren Code ausführen, sollte es uns ein Array geben,

44
00:03:20,220 --> 00:03:26,280
das 5 Elemente enthält, und die 5 Elemente sind die ersten 5 Zahlen in der Sequenz.

45
00:03:26,280 --> 00:03:31,950
Wie gesagt, es muss bei Null beginnen und dann bei 1 und dann kommt der nächste von 0 plus 1.

46
00:03:32,010 --> 00:03:41,070
Der nächste kommt von eins plus eins usw. etc. und dies sollte funktionieren, selbst wenn diese Zahl 1

47
00:03:41,070 --> 00:03:45,300
ist oder wenn es 2 ist oder wenn es eine verrückte große Zahl ist.

48
00:03:45,300 --> 00:03:48,090
Wie 245.

49
00:03:48,090 --> 00:03:55,020
Der schwierigste Teil dieser Herausforderung besteht darin, die Logik festzunageln, und Sie müssen sich wirklich genau

50
00:03:55,020 --> 00:03:58,160
überlegen, was all diese Regeln bedeuten.

51
00:03:58,320 --> 00:04:05,820
Eine der besten Möglichkeiten, die Logik zu entwirren, bevor Sie mit dem Schreiben von Code beginnen, besteht darin, einfach ein Flussdiagramm zu

52
00:04:06,240 --> 00:04:13,260
erstellen, damit Sie auf einfache Weise ein Flussdiagramm erstellen können, indem Sie zu einer Website wie Draw IO gehen und

53
00:04:13,500 --> 00:04:15,730
herausfinden, wie die Logik aussehen muss.

54
00:04:15,810 --> 00:04:20,300
Und sobald Sie das Flussdiagramm haben, können Sie damit Ihren Code erstellen.

55
00:04:20,310 --> 00:04:27,840
Jetzt habe ich ein Flussdiagramm für Sie erstellt, wenn Sie über die Logik nachdenken und die Herausforderung selbst lösen möchten. Halten

56
00:04:27,840 --> 00:04:34,940
Sie das Video jetzt an und fahren Sie mit der nächsten Lektion fort und starten Sie die Herausforderung.

57
00:04:35,040 --> 00:04:42,420
Aber wenn Sie ein paar Hinweise wünschen, werde ich Sie durch die Logik in meinem Flussdiagramm führen.

58
00:04:42,450 --> 00:04:43,530
Also wenn du noch hier bist.

59
00:04:43,530 --> 00:04:45,060
Lassen Sie uns durch dieses Flussdiagramm gehen.

60
00:04:45,420 --> 00:04:51,330
Nehmen wir an, wir werden die Funktion Fibonacci-Generator aufrufen und in fünf als Wert von n

61
00:04:51,380 --> 00:04:52,010
analysieren.

62
00:04:52,230 --> 00:04:56,790
Wir beginnen also mit unserem Flussdiagramm und prüfen zuerst, ob n 1 ist.

63
00:04:57,330 --> 00:05:03,060
Wenn ja, geben wir nur ein Array mit der ersten Zahl aus, die Null ist.

64
00:05:03,810 --> 00:05:10,260
Wenn dies nicht der Fall ist, überprüfen wir weiter is und 2. In diesem Fall geben wir die Ausgabe als

65
00:05:10,260 --> 00:05:12,320
Array mit 0 und 1 an.

66
00:05:12,360 --> 00:05:15,260
Diese beiden können wir nicht berechnen.

67
00:05:15,300 --> 00:05:19,520
Sie sind die ersten beiden Elemente des Arrays und nur vordefiniert.

68
00:05:19,530 --> 00:05:26,380
Wenn diese Frage uns auch ein Nein gibt, weil in unserem Fall N tatsächlich gleich 5 ist.

69
00:05:26,430 --> 00:05:29,490
Nun, in diesem Fall müssen wir die letzten beiden Werte summieren.

70
00:05:29,490 --> 00:05:33,210
Null plus Eins wird also Eins sein.

71
00:05:33,570 --> 00:05:37,080
Jetzt haben wir also ein Array, das so aussieht.

72
00:05:37,290 --> 00:05:42,690
Jetzt müssen wir uns fragen, ob die Anzahl der Elemente in der Ausgabe gleich ist.

73
00:05:42,690 --> 00:05:49,160
Die Anzahl der Elemente in unserer Ausgabe beträgt also 1 2 3, während N gleich 5 ist.

74
00:05:49,170 --> 00:05:50,170
Also nein.

75
00:05:50,190 --> 00:05:54,510
Also kehren wir hierher zurück und addieren die letzten beiden Werte erneut.

76
00:05:54,510 --> 00:05:57,910
In diesem Fall sind die letzten beiden Werte 1 und 1.

77
00:05:57,960 --> 00:06:06,990
Also bekommen wir jetzt zwei und setzen dann diesen Kreis der Logik fort, bis wir zu dem Punkt kommen, an

78
00:06:07,020 --> 00:06:16,080
dem wir die gleiche Anzahl von Elementen in unserem Array fünf haben wie die Anzahl und fünf an diesem Punkt, dann

79
00:06:16,260 --> 00:06:20,470
wird diese Ausgabe gesendet und von der Funktion zurückgegeben.

80
00:06:20,490 --> 00:06:24,760
Das ist also die Logik des Codes, den wir schreiben müssen.

81
00:06:24,780 --> 00:06:30,540
Jetzt denke ich darüber nach und habe einen Link zu diesem Flussdiagramm in den Kursressourcen, wenn Sie

82
00:06:30,540 --> 00:06:36,210
darauf verweisen müssen, aber gut darüber nachdenken und dann zur nächsten Lektion übergehen und versuchen, die

83
00:06:36,210 --> 00:06:37,320
Herausforderung anzugehen .
