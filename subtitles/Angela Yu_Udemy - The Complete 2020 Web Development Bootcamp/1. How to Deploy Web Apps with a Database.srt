0
1
00:00:00,180 --> 00:00:07,410
Now that we've created our ToDo list up and we've learned all about how we can persist data using databases
1

2
00:00:07,530 --> 00:00:14,700
and more specifically using MongoDB a NoSQL database, then the next step is learning how we
2

3
00:00:14,700 --> 00:00:20,990
can actually deploy these apps which have a database associated with it out there onto the worldwide
3

4
00:00:21,000 --> 00:00:21,610
web.
4

5
00:00:22,300 --> 00:00:31,150
Currently, in order to access our website we go to localhost:3000 and that means that we're using our
5

6
00:00:31,150 --> 00:00:38,920
local computer as the server to serve up the information and data in our website. And that backed
6

7
00:00:38,920 --> 00:00:42,790
of course relies on Node.js. Now in the last module
7

8
00:00:42,790 --> 00:00:50,410
we also learned how to persist our data to save it to a database using MongoDB.
8

9
00:00:50,410 --> 00:00:59,770
Now the MongoDB database is also served up from our local computer and the URLs that we use to access be it
9

10
00:01:00,220 --> 00:01:05,880
our server or MongoDB all have the word localhost in it.
10

11
00:01:05,890 --> 00:01:07,800
So if you take a look up here, when
11

12
00:01:08,050 --> 00:01:14,950
we've been accessing app we've been using the hypertext transfer protocol. We've been going to a port
12

13
00:01:15,040 --> 00:01:22,780
3000 on the localhost and we needed to access our database, we've been accessing it at port 2701
13

14
00:01:22,780 --> 00:01:23,710
7
14

15
00:01:23,710 --> 00:01:30,610
also on our localhost. Now the part before the colon differ because here we're using the hypertext transfer
15

16
00:01:30,640 --> 00:01:31,500
protocol,
16

17
00:01:31,570 --> 00:01:37,850
so a set of rules that govern how we transfer data across the Internet to access web pages.
17

18
00:01:37,960 --> 00:01:45,430
But here we're using the MongoDB rules which determines how you can access data in a MongoDB database.
18

19
00:01:45,430 --> 00:01:51,890
But essentially everything is all hosted on the same laptop that we're using for development.
19

20
00:01:52,180 --> 00:01:58,000
And this is great for testing while you're developing your apps but currently nobody other than ourselves
20

21
00:01:58,030 --> 00:02:02,680
can actually access our website which kind of defeats the purpose of it being a website
21

22
00:02:02,670 --> 00:02:02,920
right?
22

23
00:02:02,950 --> 00:02:04,780
If it's just made for us.
23

24
00:02:05,140 --> 00:02:06,360
So what can we do?
24

25
00:02:06,520 --> 00:02:13,900
Well we know from previous lessons that we can use a data server that's online 24/7 and attached to
25

26
00:02:13,900 --> 00:02:20,070
the Internet backbone which will be able to host our Node.js server and be able to deliver our web
26

27
00:02:20,070 --> 00:02:23,430
site wherever it's requested across the Internet.
27

28
00:02:24,410 --> 00:02:30,680
And we've been using Heroku to do this which means that instead of using localhost:3000 we can use
28

29
00:02:30,770 --> 00:02:37,760
some sort of app name .herokuapp.com and anybody no matter where they live or how they're accessing
29

30
00:02:37,760 --> 00:02:43,730
the internet they can all access this web page through this address on the World Wide Web.
30

31
00:02:44,000 --> 00:02:51,260
Now that's all very well and good for an app that doesn't have a database, but our app does. In our 
31

32
00:02:51,300 --> 00:02:59,060
case our todo list app actually needs to talk to the database to be able to create, read, update and
32

33
00:02:59,060 --> 00:03:01,940
delete data from our database.
33

34
00:03:02,300 --> 00:03:08,690
And if it's trying to do that from Heroku servers to the Mongo database that's hosted locally on our
34

35
00:03:08,690 --> 00:03:12,200
computer then that's not really going to work.
35

36
00:03:12,200 --> 00:03:16,960
So there's a few differences between a server and a workstation.
36

37
00:03:17,090 --> 00:03:24,500
For example the server pretty much has to be online 24/7 so that anybody who requests data from it can
37

38
00:03:24,500 --> 00:03:31,250
access it no matter what hour of the day. Also depending on what ISP or Internet service provider you're
38

39
00:03:31,250 --> 00:03:37,010
going with they have strict rules regarding whether you can set up a server using your home Internet
39

40
00:03:37,010 --> 00:03:37,600
plan.
40

41
00:03:37,820 --> 00:03:45,320
So what we have currently is a workstation and we need to move our database to a server for it to be
41

42
00:03:45,320 --> 00:03:48,920
served up 24/7 and across the internet.
42

43
00:03:49,400 --> 00:03:56,150
What we need to do is we need to set up another server which is capable of hosting MongoDB databases.
43

44
00:03:56,750 --> 00:04:03,380
And the service that we're going to use is MongoDB's own cloud service which is called Atlas. And
44

45
00:04:03,470 --> 00:04:11,000
this is going to allow us to have a web based address. MongoDB Atlas is going to host our database
45

46
00:04:11,360 --> 00:04:14,140
and serve up the data whenever it's needed.
46

47
00:04:14,150 --> 00:04:20,570
So that means that our Node.js app on Heroku will be able to make the necessary requests to our database
47

48
00:04:20,660 --> 00:04:28,010
that's hosted on the MongoDB Atlas cloud service and we'll be able to delete or update and be able
48

49
00:04:28,010 --> 00:04:35,510
to get data back from that database and that will all happen behind the scenes. Any users who needs to
49

50
00:04:35,510 --> 00:04:40,220
access your website will be going through your app.herokuapp.com
50

51
00:04:40,430 --> 00:04:45,900
and then your backed will liaise with MongoDB Atlas in order to talk to the database.
51

52
00:04:46,950 --> 00:04:53,330
So we no longer have any need for hosting our server or our database locally
52

53
00:04:53,490 --> 00:05:00,150
and that frees up our app and liberates it and puts it onto the Internet so that anybody can access
53

54
00:05:00,150 --> 00:05:00,480
it.
