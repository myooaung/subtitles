WEBVTT
0
1
00:00:00.540 --> 00:00:07.260
So now that we've gone through all of the various different types of increasing security for our users
1

2
00:00:07.740 --> 00:00:16.400
we've looked at encryption, hashing, salting, using OAuth and other services to login our users.
2

3
00:00:16.410 --> 00:00:22.530
There's just one thing that our website needs, some actual functionality. Because at the moment when you
3

4
00:00:22.530 --> 00:00:29.880
log into the service, it takes you to a static page that just shows one secret which is the one that
4

5
00:00:29.880 --> 00:00:32.330
we've hardcoded on our secrets.
5

6
00:00:32.340 --> 00:00:34.290
ejs page.
6

7
00:00:34.290 --> 00:00:37.980
Now that's probably not what we want right?
7

8
00:00:37.980 --> 00:00:44.550
Instead we'd want the user to be able to submit a secret and see all of the secrets that other users
8

9
00:00:44.550 --> 00:00:46.000
have submitted.
9

10
00:00:46.050 --> 00:00:48.070
So we need to fix this.
10

11
00:00:48.120 --> 00:00:56.130
So let's go into our app.js and firstly set up a get route for going to /submit.
11

12
00:00:56.130 --> 00:01:04.540
So let's put a app.get for the /submit route and here we should check to see if the
12

13
00:01:04.540 --> 00:01:09.730
user is logged in i.e. see if req.isAuthenticated is true.
13

14
00:01:10.030 --> 00:01:16.360
And if they are then they should be taken to the submit page over here and we should render it so that
14

15
00:01:16.360 --> 00:01:18.340
the user can submit a secret.
15

16
00:01:18.940 --> 00:01:27.010
So I'm simply going to copy this and paste it inside here and change the render to submit.
16

17
00:01:27.250 --> 00:01:32.890
Now it's the same if they were not logged in we would also redirect them to log in.
17

18
00:01:33.370 --> 00:01:42.370
So now if we check out what it looks like when we go to submit a secret and log in as our local user
18

19
00:01:42.460 --> 00:01:45.050
with their password 123456,
19

20
00:01:45.190 --> 00:01:49.060
at the moment it still redirects to the secrets page after we log in.
20

21
00:01:49.180 --> 00:01:55.030
But if we click on submit a secret now because we have our login session saved, then it takes us to
21

22
00:01:55.030 --> 00:01:56.410
the submit page.
22

23
00:01:56.410 --> 00:01:59.240
So here we're supposed to write a secret,
23

24
00:01:59.320 --> 00:02:00.330
I don't know,
24

25
00:02:00.760 --> 00:02:04.260
"My favorite color is blue."
25

26
00:02:04.290 --> 00:02:06.310
It's not much of a secret but here we go.
26

27
00:02:06.310 --> 00:02:13.270
And always click submit it will post to the /submit route where we can pick up the secret
27

28
00:02:13.270 --> 00:02:19.920
that the user typed in, save that into their account and then take them back to the secrets page.
28

29
00:02:20.020 --> 00:02:23.660
So the next thing we should do is to set up that app.post route.
29

30
00:02:23.800 --> 00:02:30.880
And the reason why the submit page is making an app.post to this route is because we have a submit
30

31
00:02:30.880 --> 00:02:37.320
button here that completes the form, makes a post request to the /submit route.
31

32
00:02:37.540 --> 00:02:39.670
And now we're going to handle that right here.
32

33
00:02:41.110 --> 00:02:46.220
So inside here is where we're going to save the secret that the user typed in.
33

34
00:02:46.330 --> 00:02:50.340
So let's create a new concconst ept called submittedSecret
34

35
00:02:50.340 --> 00:02:58.540
and let's set this to equal req.body.secret because when we look in here the input that
35

36
00:02:58.540 --> 00:03:03.670
has a type of text for the users secret has the name of secret.
36

37
00:03:03.820 --> 00:03:08.160
So that means we can happen to it when this form gets submitted through req.
37

38
00:03:08.180 --> 00:03:15.010
.body.secret. And that is what we're going to save into this new constant right here.
38

39
00:03:15.860 --> 00:03:22.790
So the next thing we want to do is to find the current user in our database and then save the secret
39

40
00:03:23.090 --> 00:03:24.930
into their file.
40

41
00:03:24.950 --> 00:03:28.510
So how do we know who the current user is?
41

42
00:03:28.520 --> 00:03:36.650
Well, passport very handily actually saves the users details because when we initiate a new login session
42

43
00:03:36.800 --> 00:03:41.840
it will say that users details into the request variable.
43

44
00:03:41.840 --> 00:03:49.640
So that means if I go ahead and console.log req.user, I'll actually be able to see what's
44

45
00:03:49.640 --> 00:03:52.300
saved for my current session.
45

46
00:03:52.370 --> 00:03:55.920
So let's hit save and let's go back to our home page,
46

47
00:03:56.090 --> 00:04:03.000
let's log in our user through our local strategy, hit login and we now get to the secrets page.
47

48
00:04:03.020 --> 00:04:08.870
So if I go ahead and click on submit a secret and type the same thing as before, click submit,
48

49
00:04:08.900 --> 00:04:15.680
now that should trigger my console log and you can see it now posts everything that we have saved about
49

50
00:04:15.680 --> 00:04:17.150
this current user.
50

51
00:04:17.150 --> 00:04:20.770
We can access their id and also their username,
51

52
00:04:21.170 --> 00:04:26.180
so basically everything that exists inside here other than their salt and hash.
52

53
00:04:26.180 --> 00:04:32.930
So that means we can now find this user using their id in the database and save the secret that they
53

54
00:04:32.930 --> 00:04:35.780
created to this document.
54

55
00:04:35.780 --> 00:04:39.350
But in order to do that, we first have to amend our schema.
55

56
00:04:39.740 --> 00:04:45.620
So in addition to everything else that's inside the schema, I'm going to add one more field and this
56

57
00:04:45.620 --> 00:04:48.140
is going to be their secret.
57

58
00:04:48.170 --> 00:04:50.630
So it's also going to be a string.
58

59
00:04:50.690 --> 00:05:00.350
And now when the user makes that post request, I'm going to find the user using that req.user.
59

60
00:05:00.830 --> 00:05:06.950
because that refers to the id that we have for them in our database.id
60

61
00:05:06.950 --> 00:05:13.370
And then I'm going to add that secret that they submitted to that secret field that I created in the
61

62
00:05:13.370 --> 00:05:14.340
schema.
62

63
00:05:14.420 --> 00:05:17.520
So let's go ahead and tap into the user model.
63

64
00:05:17.540 --> 00:05:26.810
I'm going to findById where the id is req.user.id. And once that's completed, we might
64

65
00:05:26.900 --> 00:05:34.880
either get an error or we might get a foundUser if they do indeed exist. And if there were any errors
65

66
00:05:35.540 --> 00:05:37.900
we're simply going to console log it
66

67
00:05:39.080 --> 00:05:48.170
but if there were no errors and if the foundUser did indeed exist then we're going to set the found
67

68
00:05:48.170 --> 00:05:53.210
user's secret field to equal the submittedSecret.
68

69
00:05:54.320 --> 00:05:59.820
And then we're going to save this found user with their newly updated secret.
69

70
00:06:00.050 --> 00:06:08.720
And once that save has completed, then we can res.redirect them to the secrets page so that they can
70

71
00:06:08.720 --> 00:06:11.660
see their own secret alongside everybody else's.
71

72
00:06:12.320 --> 00:06:20.960
So let's close off these lines of code and let's hit save and let's go back to our home page, login
72

73
00:06:21.020 --> 00:06:26.690
our user so remember because every time our server restarts our sessions and cookies gets wiped out.
73

74
00:06:27.200 --> 00:06:29.540
So now we're ready to submit a secret.
74

75
00:06:29.900 --> 00:06:35.740
And I'm going to add the same secret here to that user which is the local mongoose user.
75

76
00:06:36.170 --> 00:06:43.040
And now if I go into my Robo 3T, update my database, I should be able to see a secret field that's
76

77
00:06:43.040 --> 00:06:44.960
filled in for this user.
77

78
00:06:45.830 --> 00:06:52.100
So now that we've added in the secret, it's time to be able to render it on the secret page
78

79
00:06:52.100 --> 00:06:52.420
right?
79

80
00:06:52.430 --> 00:06:58.850
I want to be able to find all the users that have a secret posted and be able to render them on the secrets
80

81
00:06:58.850 --> 00:06:59.380
page.
81

82
00:06:59.510 --> 00:07:04.390
So that way it's no longer just a static page with only a single secret.
82

83
00:07:04.430 --> 00:07:09.880
So to do that we have to update the app.get for our secrets route.
83

84
00:07:10.070 --> 00:07:15.530
We're no longer just going to check to see if they're authenticated or if they're not, redirect them
84

85
00:07:15.530 --> 00:07:20.030
to login, because this is no longer going to be a privileged page.
85

86
00:07:20.030 --> 00:07:25.070
Anybody with a logged in or not logged in should be able to see the secrets that have been submitted
86

87
00:07:25.160 --> 00:07:25.990
anonymously.
87

88
00:07:26.390 --> 00:07:31.760
So we don't need to check to see if they're authenticated but instead we're going to trawl through our
88

89
00:07:31.760 --> 00:07:37.250
database and find all of the secret that have been submitted on the database.
89

90
00:07:37.910 --> 00:07:45.650
So to do that we're going to use our model of users and we're going to use find and we're going to look
90

91
00:07:45.650 --> 00:07:54.270
through this collection and find all the places where the field secret actually has a value.
91

92
00:07:54.320 --> 00:08:03.620
Now how do we do this? If we were to search Google for say MongoDB field not null i.e. it contains some
92

93
00:08:03.680 --> 00:08:09.800
data, then we can see that other people already asked about this. And there's several ways that you can
93

94
00:08:09.800 --> 00:08:14.870
do this. You can either do it through checking whether if it exists
94

95
00:08:14.870 --> 00:08:23.630
so this means that there is a field called IMAGE URL but you can also check to see that it's not
95

96
00:08:23.690 --> 00:08:25.400
equal to null.
96

97
00:08:25.400 --> 00:08:32.340
So it means it actually has a value so in this case there actually is an image URL in this collection.
97

98
00:08:32.360 --> 00:08:33.620
So this is what we want.
98

99
00:08:33.680 --> 00:08:39.920
So in our case we're going to check through our collection of users and look through the secret field
99

100
00:08:40.340 --> 00:08:48.800
and then let's add in this not equal to null part that's enclosed in curly braces into this find condition.
100

101
00:08:48.800 --> 00:08:50.650
So we're going to put it inside here.
101

102
00:08:50.870 --> 00:08:54.690
So we're going to make sure that we open up a set of curly braces.
102

103
00:08:54.800 --> 00:08:58.130
So notice how this is one set of curly braces
103

104
00:08:58.130 --> 00:09:01.910
and this defines the condition that we're going to look through our database with.
104

105
00:09:01.910 --> 00:09:07.820
And then this is another set of curly braces which is going to be the condition for actually which documents
105

106
00:09:07.820 --> 00:09:10.580
to pick out based on the secret field.
106

107
00:09:10.610 --> 00:09:18.890
And here we're going to type in what we saw over here which is a $ not equals to or 'ne' 
107

108
00:09:18.890 --> 00:09:19.810
:
108

109
00:09:19.820 --> 00:09:25.820
so this code should now look through all of our users in our users collection,
109

110
00:09:25.820 --> 00:09:33.710
look through the secret fields and pick out the users where the secret field is not equal to null.
110

111
00:09:33.860 --> 00:09:36.720
So all of these conditions end right here
111

112
00:09:36.740 --> 00:09:42.590
so make sure that you add the comma there and all of these curly braces are one set of here.
112

113
00:09:42.590 --> 00:09:45.170
It's really really easy to mess this part up
113

114
00:09:45.170 --> 00:09:51.350
and I do it very often because there's so many curly braces. So here after all of those curly braces
114

115
00:09:51.350 --> 00:09:58.580
and after the colon and after the comma, we're going to add our callback function with our error or any
115

116
00:09:58.580 --> 00:10:00.820
of the foundUsers.
116

117
00:10:01.210 --> 00:10:06.160
So if there were any errors then we're going to simply log it
117

118
00:10:07.600 --> 00:10:15.970
but otherwise if indeed we actually did find some users, so foundUsers is not equal to nil, then we're
118

119
00:10:15.970 --> 00:10:24.700
going to res.render our secrets.ejs page and we're going to pass in a variable. Let's call
119

120
00:10:24.700 --> 00:10:25.330
that variable
120

121
00:10:25.330 --> 00:10:29.680
usersWithSecrets because that's essentially what we're searching for
121

122
00:10:29.680 --> 00:10:29.990
right?
122

123
00:10:30.010 --> 00:10:37.090
We're trying to find all the users which have a filled secret field. And we're going to pass in these
123

124
00:10:37.180 --> 00:10:41.760
foundUsers as the value for this variable.
124

125
00:10:41.800 --> 00:10:48.840
So let's go ahead and close off these lines of code and we can now pick this up inside our secret.
125

126
00:10:48.980 --> 00:10:49.930
ejs.
126

127
00:10:50.020 --> 00:10:56.680
So at the moment the secret text is a single hard coded value, it's "Jack Bauer is my hero."
127

128
00:10:56.680 --> 00:11:03.550
So let's go ahead and delete that secret text and instead replace it using the secrets that we actually
128

129
00:11:03.550 --> 00:11:05.230
have in our database.
129

130
00:11:05.230 --> 00:11:11.860
So we know that we get access inside secrets.ejs to a variable called usersWithSecrets.
130

131
00:11:11.860 --> 00:11:21.400
So inside here we can run a forEach loop. So we can happen to usersWithSecrets and we can call for
131

132
00:11:21.400 --> 00:11:28.900
each on this variable to loop through that array and then we're going to add in a callback function
132

133
00:11:28.900 --> 00:11:34.500
in here to pick up all of those users inside the usersWithSecrets array.
133

134
00:11:35.080 --> 00:11:43.630
And for each of those users, we're going to render the value of the user.secrets field inside a paragraph
134

135
00:11:43.690 --> 00:11:44.770
element.
135

136
00:11:44.770 --> 00:11:51.130
So inside here between the two p tags is where we're going to add our special EJS tag, so angle
136

137
00:11:51.130 --> 00:11:53.440
bracket percentage sign equals
137

138
00:11:53.440 --> 00:11:59.980
and then it ends with percentage sign closing angle bracket. And in between right here just after the
138

139
00:11:59.980 --> 00:12:03.820
equals sign is where we're going to tap into user.secret.
139

140
00:12:04.960 --> 00:12:11.190
So this will loop through all the users with secrets. For each user that has a secret
140

141
00:12:11.200 --> 00:12:18.040
we're going to render it inside a paragraph tag and all we need to do now is to mark out the part of
141

142
00:12:18.040 --> 00:12:21.760
this file that is actually Javascript rather than HTML.
142

143
00:12:22.150 --> 00:12:27.110
And we do that of course using this angle and percentage signs, percentage sign angle.
143

144
00:12:27.550 --> 00:12:32.140
So now let's save everything and let's go ahead and test it out.
144

145
00:12:32.140 --> 00:12:34.030
I'm going to go and register.
145

146
00:12:34.060 --> 00:12:39.850
Let's say that I sign up with Google again. And you can see that I get taken to the secrets page and
146

147
00:12:39.850 --> 00:12:45.070
it shows that previous secret that I submitted as the other user.
147

148
00:12:45.130 --> 00:12:49.030
So let's say that I submit a secret under this other account as well.
148

149
00:12:49.030 --> 00:12:58.020
Let's add that "Jack Bauer is my hero." again and let's click submit. And you can see we now have two secrets.
149

150
00:12:58.030 --> 00:13:04.520
So the more users we have, the more secrets they submit the more that gets shown up over here.
150

151
00:13:04.540 --> 00:13:13.120
So this is a very very basic and minimalist version of the Whisper app because the users usernames or
151

152
00:13:13.120 --> 00:13:17.440
passwords or emails, none of that is associated with their secret.
152

153
00:13:17.440 --> 00:13:24.010
So users can sign up, submit their secrets for all the world to see but they don't have to tell the world
153

154
00:13:24.040 --> 00:13:25.040
who they are.
154

155
00:13:25.120 --> 00:13:30.970
And we keep their secret secret using all of our advanced authentication methods.
155

156
00:13:31.240 --> 00:13:36.220
So I hope you had fun learning all of the aspects of authentication.
156

157
00:13:36.220 --> 00:13:37.720
So until next time.
157

158
00:13:37.720 --> 00:13:39.910
That's all from me, Angela at the App brewery.
