WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.420 --> 00:00:05.685
Before we look at containers and rows,

00:00:05.685 --> 00:00:09.420
I want to make sure you have a grasp on breakpoints and

00:00:09.420 --> 00:00:13.950
how they can change the layout and styling for different size devices.

00:00:13.950 --> 00:00:17.789
This is not only going to be important for learning Bootstrap,

00:00:17.789 --> 00:00:22.495
but also to understand the containers we're going to look at to.

00:00:22.495 --> 00:00:26.040
See them in action, we can go over to the bootstrap homepage,

00:00:26.040 --> 00:00:27.750
which we have open here,

00:00:27.750 --> 00:00:30.915
and then reduce the browser down to a small width.

00:00:30.915 --> 00:00:36.135
Simulate how the website would look on a small mobile device.

00:00:36.135 --> 00:00:40.665
As we see here, the content is generally stacked vertically.

00:00:40.665 --> 00:00:44.520
Only sections take up the full width for the screen.

00:00:44.520 --> 00:00:52.025
If we go ahead though and make the browser a little bit wider and so the content changes,

00:00:52.025 --> 00:00:53.645
just like we have them there,

00:00:53.645 --> 00:00:57.650
this sudden jump in the content is called a break points.

00:00:57.650 --> 00:01:01.580
Some of the content which we see is now side-by-side.

00:01:01.580 --> 00:01:03.800
We have the text on the left-hand side,

00:01:03.800 --> 00:01:05.420
on the icon on the right,

00:01:05.420 --> 00:01:08.255
now have more available screen space.

00:01:08.255 --> 00:01:11.090
If we stretch the browser even further,

00:01:11.090 --> 00:01:13.385
simulate a desktop view.

00:01:13.385 --> 00:01:17.435
Every now and again, we'll see a jump in the contents and this breakpoints

00:01:17.435 --> 00:01:22.450
allows us to apply different styling and layout to different screen devices.

00:01:22.450 --> 00:01:27.485
Breakpoints are created in CSS using a media query.

00:01:27.485 --> 00:01:32.575
A media query is basically a way of grouping together CSS rules.

00:01:32.575 --> 00:01:37.805
Bootstrap will then apply this styling rules when the browser is a certain width.

00:01:37.805 --> 00:01:41.435
Bootstrap also takes a mobile first approach,

00:01:41.435 --> 00:01:45.515
meaning it is generally designed for small screen first.

00:01:45.515 --> 00:01:50.830
We can then change the CSS rules as the device width increases.

00:01:50.830 --> 00:01:54.415
Bootstrap also has oversizes to which it uses as

00:01:54.415 --> 00:02:00.820
breakpoints and it these default breakpoints make bootstrap responsive out of the box.

00:02:00.820 --> 00:02:05.270
As we can see here, Bootstrap will apply CSS rules for

00:02:05.270 --> 00:02:11.169
different devices as they become a minimum width of 576 pixels,

00:02:11.169 --> 00:02:18.210
768, 992 and 1200 pixels and above.

00:02:18.210 --> 00:02:24.115
We also free to antodies or create our own breakpoints sizes to.

00:02:24.115 --> 00:02:32.345
Notice so that there is no media query for the device sizes from zero to 576 pixels.

00:02:32.345 --> 00:02:36.050
This size is not required since this is the Bootstraps default

00:02:36.050 --> 00:02:41.045
anyway and then we can build upon it with any larger media queries,

00:02:41.045 --> 00:02:43.910
hence the name mobile first.

00:02:43.910 --> 00:02:49.595
Understanding these breakpoints will also help us understand that the grid system,

00:02:49.595 --> 00:02:53.335
which we're going to use, starting with containers.

00:02:53.335 --> 00:02:56.150
As a requirements when used with grids,

00:02:56.150 --> 00:02:59.195
we add of a content inside of a container.

00:02:59.195 --> 00:03:03.934
A container can be any HTML element such as a div or a section,

00:03:03.934 --> 00:03:06.425
but would name it container class.

00:03:06.425 --> 00:03:09.350
We can use this container as a main wrapper,

00:03:09.350 --> 00:03:15.355
so we can control the content inside by adding things such as padding and alignment.

00:03:15.355 --> 00:03:18.225
When working with Bootstrap version four,

00:03:18.225 --> 00:03:22.015
there is three different types of containers which we can make use of.

00:03:22.015 --> 00:03:25.280
We can add a container as a class name to

00:03:25.280 --> 00:03:31.055
any HTML element such as a surrounding div or a section tag.

00:03:31.055 --> 00:03:36.010
The first class name, which we're going to look at is simply container,

00:03:36.010 --> 00:03:42.835
and a container is used to add a fixed width wrapper to our content.

00:03:42.835 --> 00:03:47.150
For example, if we have a web page which looks like this,

00:03:47.150 --> 00:03:52.309
we would generally want to split up our webpage into multiple sections,

00:03:52.309 --> 00:04:00.070
so we may want a header section at the top and then some contents actions just below.

00:04:00.700 --> 00:04:06.635
We use the container class to add a fixed width proper to all content,

00:04:06.635 --> 00:04:08.215
just like we see here.

00:04:08.215 --> 00:04:11.975
On this fixed width is dependent on the current breakpoints,

00:04:11.975 --> 00:04:16.100
leaving some white space on the left and right-hand side.

00:04:16.100 --> 00:04:21.920
However, now if we wanted to add a container which is the full width of the page,

00:04:21.920 --> 00:04:27.090
we would then make use of a class called container-fluid,

00:04:27.900 --> 00:04:31.070
so this is a container-fluids.

00:04:33.080 --> 00:04:36.440
Then regardless of the screen size,

00:04:36.440 --> 00:04:40.775
if this was a mobile device or a desktop or a tablet,

00:04:40.775 --> 00:04:45.665
the container would always be the full width of the screen,

00:04:45.665 --> 00:04:50.430
stretching to be a 100 percentage on all green sizes.

00:04:50.590 --> 00:04:56.000
There is also a third type of container we can use in Bootstrap too,

00:04:56.000 --> 00:04:59.210
and this is a mixture between these two.

00:04:59.210 --> 00:05:04.610
We can do this by adding a container class combined with a breakpoint,

00:05:04.610 --> 00:05:07.880
so we'd have container and then dash,

00:05:07.880 --> 00:05:13.160
and then we're going to add a breakpoint such as sm or md.

00:05:13.240 --> 00:05:21.110
For example, with container-md would have a webpage just like before.

00:05:21.110 --> 00:05:23.870
For the smallest screen size available,

00:05:23.870 --> 00:05:29.270
which is access, the container would be a 100 percent of the total width.

00:05:29.270 --> 00:05:31.565
Basically, to begin with,

00:05:31.565 --> 00:05:33.775
it would look like this one just here,

00:05:33.775 --> 00:05:35.880
it would be the full width.

00:05:35.880 --> 00:05:40.655
Then once the screen hit the medium size device breakpoints,

00:05:40.655 --> 00:05:44.300
it would then change to have some space in on both sides,

00:05:44.300 --> 00:05:47.730
so it would look like the regular container.

00:05:47.840 --> 00:05:51.300
This is how containers work in theory,

00:05:51.300 --> 00:05:55.890
and now we'll take a look at how we can add these to our projects.

00:05:56.000 --> 00:06:01.025
If we go back into our text editor where we set up our index page,

00:06:01.025 --> 00:06:04.220
I'm going to delete the level one heading of hello,

00:06:04.220 --> 00:06:08.090
world and then add some initial content to work with.

00:06:08.090 --> 00:06:11.150
I'm going to add a section as our wrapper.

00:06:11.150 --> 00:06:14.330
Inside here we can add a level one heading and I'm

00:06:14.330 --> 00:06:18.160
going to tell the list to be the content for my final version.

00:06:18.160 --> 00:06:26.280
The text I'm going to add the all-round productivity solution and,

00:06:26.280 --> 00:06:29.690
of course, you can change it to suit your particular projects.

00:06:29.690 --> 00:06:37.860
Then underneath I'm going to add some text of regain control with our effective tools,

00:06:38.380 --> 00:06:44.220
in a simple to use, customizable UI.

00:06:44.450 --> 00:06:50.370
Finally, we can finish off this section with a link to a Get started button.

00:06:52.090 --> 00:06:56.570
If we now give this file a save and go over to the project in the browser,

00:06:56.570 --> 00:07:01.230
if we reload, we can now see the content we can just add it.

00:07:01.670 --> 00:07:05.690
The first thing I'm going to do is to add a container to

00:07:05.690 --> 00:07:10.150
our wrapper section and we can do this by adding a regular class.

00:07:10.150 --> 00:07:14.195
The class name is a warm which links to our Bootstrap CSS,

00:07:14.195 --> 00:07:17.225
and this is the class name of container.

00:07:17.225 --> 00:07:22.405
If we give this file a save and now check this out in the browser by reloading,

00:07:22.405 --> 00:07:25.150
we still have the text which were added before,

00:07:25.150 --> 00:07:29.674
but it is difficult to see exactly what effect the container has at the moment,

00:07:29.674 --> 00:07:32.725
so I'm going to add a temporary background color.

00:07:32.725 --> 00:07:38.470
We can do this again with a Bootstrap class of bg-dark,

00:07:38.470 --> 00:07:41.060
and this will give us a dark background color.

00:07:41.060 --> 00:07:43.960
This dark background gives us the opportunity to

00:07:43.960 --> 00:07:46.765
see the background container in more detail.

00:07:46.765 --> 00:07:49.705
We see on the left and right we have this whites pace,

00:07:49.705 --> 00:07:52.385
so this container is a fixed width.

00:07:52.385 --> 00:07:54.310
If we shrink the browser down,

00:07:54.310 --> 00:07:56.200
we'll see that the breakpoints will make

00:07:56.200 --> 00:08:00.620
the container size change to fit the available space.

00:08:01.290 --> 00:08:06.620
We can also add the container-fluid and see how this looks in practice too.

00:08:06.620 --> 00:08:10.704
Reload the browser, and as we've seen before on the whiteboard,

00:08:10.704 --> 00:08:16.125
this will stretch to the full available width regardless of the screen size.

00:08:16.125 --> 00:08:21.440
The third type of container which we looked at is a one link to breakpoints.

00:08:21.440 --> 00:08:23.885
If we have a container-md,

00:08:23.885 --> 00:08:27.170
this will change our container type on medium devices,

00:08:27.170 --> 00:08:31.045
which is 768 pixels and above.

00:08:31.045 --> 00:08:34.100
Sludge shrink the browser to the small size.

00:08:34.100 --> 00:08:36.880
We can see we have a full width container,

00:08:36.880 --> 00:08:39.395
and once we get to the medium sized devices,

00:08:39.395 --> 00:08:42.935
this will let it change to be a regular container.

00:08:42.935 --> 00:08:45.050
I'm going to reinstate this to be

00:08:45.050 --> 00:08:48.440
a container-fluid since this is one I'm going to be using on

00:08:48.440 --> 00:08:54.095
my project but you can choose whichever container to suits your project best.

00:08:54.095 --> 00:08:57.440
Also, now we understand what the container is doing.

00:08:57.440 --> 00:09:00.680
I'm also going to change the background colors to be light.

00:09:00.680 --> 00:09:03.990
All we need to do is to change it to be bg-light,

00:09:04.180 --> 00:09:08.305
leaving us with a light background color as expected.

00:09:08.305 --> 00:09:12.735
The next one to discover two more important pieces of the grid,

00:09:12.735 --> 00:09:16.169
and this is how to use rows and columns.
