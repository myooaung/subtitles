WEBVTT
1
00:00:00.050 --> 00:00:01.050
- [Instructor] I've been a professional

2
00:00:01.050 --> 00:00:04.080
software developer for, let's just say awhile,

3
00:00:04.080 --> 00:00:06.090
and there are a handful of solutions

4
00:00:06.090 --> 00:00:10.010
that have been game changers for me personally.

5
00:00:10.010 --> 00:00:12.080
Going from C&C++ to Java,

6
00:00:12.080 --> 00:00:15.050
now portable applications can be written once

7
00:00:15.050 --> 00:00:18.010
and run anywhere without rebuild.

8
00:00:18.010 --> 00:00:20.080
J2EE, to build enterprise solutions

9
00:00:20.080 --> 00:00:24.040
without needing to code the supporting infrastructure.

10
00:00:24.040 --> 00:00:27.020
Hibernate eliminated manually mapping logical

11
00:00:27.020 --> 00:00:29.070
objects to physical databases.

12
00:00:29.070 --> 00:00:33.040
Asynchronous JavaScript and XML, also known as AJAX,

13
00:00:33.040 --> 00:00:35.060
websites became truly interactive

14
00:00:35.060 --> 00:00:38.040
like desktop user interfaces.

15
00:00:38.040 --> 00:00:41.040
RESTful web services significantly reduce

16
00:00:41.040 --> 00:00:44.060
multi machine communication complexity.

17
00:00:44.060 --> 00:00:46.090
What makes them my game changers?

18
00:00:46.090 --> 00:00:49.060
Better features, less coding

19
00:00:49.060 --> 00:00:52.080
which is why I also consider Spring Data,

20
00:00:52.080 --> 00:00:55.010
and specifically Spring Data JPA,

21
00:00:55.010 --> 00:00:56.090
as a game changer.

22
00:00:56.090 --> 00:00:59.080
While JPA is great, it still requires repetitive

23
00:00:59.080 --> 00:01:03.060
boilerplate code and heavy lifting to make it bug free.

24
00:01:03.060 --> 00:01:08.030
Let's look at some coding examples using just JPA.

25
00:01:08.030 --> 00:01:11.030
This Create example is pretty straightforward.

26
00:01:11.030 --> 00:01:14.090
We inject the EntityManager, start a new transaction,

27
00:01:14.090 --> 00:01:18.010
instantiate a new student, persist it,

28
00:01:18.010 --> 00:01:21.040
commit the transaction, and call close.

29
00:01:21.040 --> 00:01:23.030
Forgetting to commit the transaction

30
00:01:23.030 --> 00:01:27.080
or close the EntityManager are common mistakes.

31
00:01:27.080 --> 00:01:30.090
Update is similar to Create except that we must look

32
00:01:30.090 --> 00:01:32.080
up the entity first.

33
00:01:32.080 --> 00:01:35.050
There are the same pitfalls as Create

34
00:01:35.050 --> 00:01:38.090
plus the find method requires the entity class type,

35
00:01:38.090 --> 00:01:42.030
student, which just looks messy.

36
00:01:42.030 --> 00:01:45.010
To delete an entity, we invoke the remove method

37
00:01:45.010 --> 00:01:46.070
on the EntityManager.

38
00:01:46.070 --> 00:01:50.070
It has the same issues as Create and Update.

39
00:01:50.070 --> 00:01:54.050
Finally let's invoke a JPQL query.

40
00:01:54.050 --> 00:01:56.060
This code is very messy.

41
00:01:56.060 --> 00:01:59.000
It's awkward passing in the entity class type

42
00:01:59.000 --> 00:02:01.020
to create a query object

43
00:02:01.020 --> 00:02:04.060
and every parameter is set one at a time

44
00:02:04.060 --> 00:02:07.070
and the query is not run until we invoke

45
00:02:07.070 --> 00:02:11.010
get result list or get single result.

46
00:02:11.010 --> 00:02:14.050
Worst of all, it's only after running this code

47
00:02:14.050 --> 00:02:16.080
that problems are detected.

48
00:02:16.080 --> 00:02:20.080
Possible problems are invalid JPQL syntax,

49
00:02:20.080 --> 00:02:23.010
incorrect parameter cardinality,

50
00:02:23.010 --> 00:02:25.000
or unmatched data types.

51
00:02:25.000 --> 00:02:26.000
There has to be a better way.

