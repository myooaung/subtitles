WEBVTT
1
00:00:00.005 --> 00:00:02.006
- [Instructor] If you are not familiar with the concept

2
00:00:02.006 --> 00:00:06.000
of paging and sorting, I'd like to give you a little demo.

3
00:00:06.000 --> 00:00:07.008
In my browser, I have Google open

4
00:00:07.008 --> 00:00:13.002
and I'm going to enter a search term, latency.

5
00:00:13.002 --> 00:00:16.004
The response is immediate, the results are sorted

6
00:00:16.004 --> 00:00:19.000
by relevance and when I scroll to the bottom

7
00:00:19.000 --> 00:00:23.003
I see that there is at least 10 screens of results.

8
00:00:23.003 --> 00:00:29.001
Each time I click Next

9
00:00:29.001 --> 00:00:35.006
or one of the number of pages,

10
00:00:35.006 --> 00:00:39.003
there is a brief pause, Why did that happen?

11
00:00:39.003 --> 00:00:41.007
Didn't Google already fetch all the results

12
00:00:41.007 --> 00:00:43.005
when I clicked Search?

13
00:00:43.005 --> 00:00:46.001
Thankfully, no.

14
00:00:46.001 --> 00:00:48.001
Google, like any smart web application,

15
00:00:48.001 --> 00:00:51.008
employs paging and sorting where application fetch chunks

16
00:00:51.008 --> 00:00:53.006
of data on demand.

17
00:00:53.006 --> 00:00:57.002
Any query method can be enhanced to support paging,

18
00:00:57.002 --> 00:00:59.005
just add a parameter of typed pageable,

19
00:00:59.005 --> 00:01:02.004
which specifies which chunk to fetch

20
00:01:02.004 --> 00:01:05.000
and return the type page.

21
00:01:05.000 --> 00:01:07.007
In this example of course repository,

22
00:01:07.007 --> 00:01:10.000
we overloaded the findByCredits method

23
00:01:10.000 --> 00:01:12.006
with a pageable parameter.

24
00:01:12.006 --> 00:01:13.008
The page request

25
00:01:13.008 --> 00:01:17.006
which implements pageable requires some parameters

26
00:01:17.006 --> 00:01:19.003
in the constructor.

27
00:01:19.003 --> 00:01:21.009
The first parameter is the page number,

28
00:01:21.009 --> 00:01:24.002
zero is the first by default.

29
00:01:24.002 --> 00:01:27.009
The second parameter is the number of entities per page.

30
00:01:27.009 --> 00:01:30.006
Next is the direction of the Sort.

31
00:01:30.006 --> 00:01:34.002
Then an ordered list of properties to sort by.

32
00:01:34.002 --> 00:01:36.009
Page holds a list of results,

33
00:01:36.009 --> 00:01:41.002
the total number of results and the number of pages.

34
00:01:41.002 --> 00:01:43.005
To add paging and or sorting

35
00:01:43.005 --> 00:01:46.000
to a repository's findAll method,

36
00:01:46.000 --> 00:01:49.001
we extended from PagingAndSortingRepository,

37
00:01:49.001 --> 00:01:51.004
instead of CrudRepository.

38
00:01:51.004 --> 00:01:53.007
Our Staff repository extends from paging

39
00:01:53.007 --> 00:01:57.000
and sorting repository which overloads findAll

40
00:01:57.000 --> 00:02:01.001
with two new decorations, one with just the sort parameter

41
00:02:01.001 --> 00:02:03.008
and other with the pageable parameter.

42
00:02:03.008 --> 00:02:06.009
So let's actually run these

43
00:02:06.009 --> 00:02:08.009
and let's first look at CourseRepository.

44
00:02:08.009 --> 00:02:12.004
Where here is our overloaded method passing in pageable

45
00:02:12.004 --> 00:02:14.005
in returning a page.

46
00:02:14.005 --> 00:02:17.007
And then our StaffRepository

47
00:02:17.007 --> 00:02:21.002
which extends PagingAndSortingRepository.

48
00:02:21.002 --> 00:02:24.000
Now let's run these paging and sorting query demos

49
00:02:24.000 --> 00:02:32.007
in the query demo file.

50
00:02:32.007 --> 00:02:34.007
So this is just a comparison, we're going

51
00:02:34.007 --> 00:02:36.000
to say findByCredits

52
00:02:36.000 --> 00:02:38.004
which is going to say return all 3-credit courses

53
00:02:38.004 --> 00:02:41.003
which is all of the courses in the system.

54
00:02:41.003 --> 00:02:42.005
So there is no paging at all.

55
00:02:42.005 --> 00:02:46.001
This is the entire repository of courses.

56
00:02:46.001 --> 00:02:49.004
I moved it up a little bit so you can see.

57
00:02:49.004 --> 00:02:52.006
And now we're going to apply paging.

58
00:02:52.006 --> 00:02:55.000
So we're going to say findByCredits.

59
00:02:55.000 --> 00:02:57.005
The number of credits is three and we're going to say

60
00:02:57.005 --> 00:03:00.009
for PageRequest we want the first page

61
00:03:00.009 --> 00:03:03.002
and have only four elements per page

62
00:03:03.002 --> 00:03:07.002
and sort ascending by credits and then

63
00:03:07.002 --> 00:03:12.008
by the name of the course.

64
00:03:12.008 --> 00:03:14.002
So it's a long way of saying,

65
00:03:14.002 --> 00:03:16.004
find the first three credit courses sort

66
00:03:16.004 --> 00:03:18.009
by credit then course names so anthropology,

67
00:03:18.009 --> 00:03:22.005
C programming, chemistry in English are the results.

68
00:03:22.005 --> 00:03:24.008
Next we're going to find all staff members

69
00:03:24.008 --> 00:03:29.006
and sort them alphabetically by last name.

70
00:03:29.006 --> 00:03:34.004
And there is our staff members, alphabetized

71
00:03:34.004 --> 00:03:39.001
and now we're going to get a page of staff

72
00:03:39.001 --> 00:03:44.008
where we want the first five and then sorted by last name.

73
00:03:44.008 --> 00:03:49.003
So this is our page object, members and

74
00:03:49.003 --> 00:03:53.002
from this member's object, we can not just get the list

75
00:03:53.002 --> 00:03:56.003
of members, we can actually get some other metadata

76
00:03:56.003 --> 00:03:57.002
about that.

77
00:03:57.002 --> 00:04:00.002
We want the members total number of elements.

78
00:04:00.002 --> 00:04:04.005
What's the total number of staff members?

79
00:04:04.005 --> 00:04:06.004
And there is 11 of them

80
00:04:06.004 --> 00:04:09.003
and the total number of five element pages,

81
00:04:09.003 --> 00:04:13.009
so how many pages are there in the members.

82
00:04:13.009 --> 00:04:19.004
It says there is three pages and now we want the first five

83
00:04:19.004 --> 00:04:24.000
of them which are Black, Brown, Davis, green and Jones.

