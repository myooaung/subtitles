WEBVTT
1
00:00:00.005 --> 00:00:04.006
- [Instructor] Some folks might be fans of Query by Example.

2
00:00:04.006 --> 00:00:08.002
It's a popular mechanism with visual querying facilities

3
00:00:08.002 --> 00:00:12.000
like Microsoft Access database user interface.

4
00:00:12.000 --> 00:00:14.003
Advantages of Query by Example?

5
00:00:14.003 --> 00:00:17.005
It's a user-friendly alternative to SQL,

6
00:00:17.005 --> 00:00:21.001
lookup objects similar to other objects,

7
00:00:21.001 --> 00:00:24.005
it's independent of an underlying datastore.

8
00:00:24.005 --> 00:00:25.006
You might want to use it,

9
00:00:25.006 --> 00:00:28.001
if you have frequently refactored code,

10
00:00:28.001 --> 00:00:32.001
but there are limitations around nested property constraints

11
00:00:32.001 --> 00:00:34.009
and string matching.

12
00:00:34.009 --> 00:00:37.005
Spring Data supports Query by Example

13
00:00:37.005 --> 00:00:40.006
with the QueryByExampleExecutor.

14
00:00:40.006 --> 00:00:43.008
In our exercise files, DepartmentRepository extends

15
00:00:43.008 --> 00:00:47.006
from JpaRepository which also extends

16
00:00:47.006 --> 00:00:50.009
from QueryByExampleExecutor.

17
00:00:50.009 --> 00:00:53.005
QueryByExampleExecutor repositories declare

18
00:00:53.005 --> 00:00:57.009
all these methods which take an example attribute.

19
00:00:57.009 --> 00:01:02.004
So how do we instantiate an example class?

20
00:01:02.004 --> 00:01:05.002
One way to instantiate an example class is

21
00:01:05.002 --> 00:01:08.003
with just a probe attribute.

22
00:01:08.003 --> 00:01:12.001
Probe is an object of type of entity we are looking up,

23
00:01:12.001 --> 00:01:14.003
in this case department.

24
00:01:14.003 --> 00:01:18.003
We set the attributes in department that we need to match.

25
00:01:18.003 --> 00:01:21.006
So to find the department with the name humanities,

26
00:01:21.006 --> 00:01:23.004
we constructed a department object

27
00:01:23.004 --> 00:01:25.009
with only the department name set.

28
00:01:25.009 --> 00:01:28.003
The rest of the attributes are null.

29
00:01:28.003 --> 00:01:31.003
To find all departments whose chair has the first name

30
00:01:31.003 --> 00:01:34.002
of John, we constructed a department object

31
00:01:34.002 --> 00:01:38.006
where the name is null, set the first name attribute

32
00:01:38.006 --> 00:01:43.003
of the chairperson to John and the last name attribute

33
00:01:43.003 --> 00:01:45.009
of the chairperson to null.

34
00:01:45.009 --> 00:01:48.002
The other way to instantiate an example is

35
00:01:48.002 --> 00:01:51.001
to provide an ExampleMatcher with the probe

36
00:01:51.001 --> 00:01:53.006
to further refine the search.

37
00:01:53.006 --> 00:01:56.008
In this example we have case-insensitive of search

38
00:01:56.008 --> 00:02:00.008
on all departments ending with a name sciences.

39
00:02:00.008 --> 00:02:04.005
ExampleMatcher methods follow the builder pattern

40
00:02:04.005 --> 00:02:07.005
so you can just keep adding as many restrictions as needed.

41
00:02:07.005 --> 00:02:11.001
The restrictions here are withIgnoreCase

42
00:02:11.001 --> 00:02:13.004
and withStringMathcer.ending.

43
00:02:13.004 --> 00:02:18.000
So let's run these queryByExample examples.

44
00:02:18.000 --> 00:02:22.002
So I have my queryByExample method in the QueryDemos class.

45
00:02:22.002 --> 00:02:31.007
And we'll step through these queries.

46
00:02:31.007 --> 00:02:34.004
So first we're going to find all the department

47
00:02:34.004 --> 00:02:37.005
with the name humanities and here is our probe.

48
00:02:37.005 --> 00:02:45.001
And this is the example of,

49
00:02:45.001 --> 00:02:49.004
so there is our department with the name humanities.

50
00:02:49.004 --> 00:02:51.009
Now find department with the first name

51
00:02:51.009 --> 00:02:54.004
of the chair is John.

52
00:02:54.004 --> 00:02:56.005
So we're constructing a new department.

53
00:02:56.005 --> 00:03:00.003
So we have the name as null, construct a new staff object

54
00:03:00.003 --> 00:03:04.004
which contains a new person object and have the first name

55
00:03:04.004 --> 00:03:10.000
as John the last name as null.

56
00:03:10.000 --> 00:03:12.009
There are two departments whose has a chair

57
00:03:12.009 --> 00:03:14.009
with the first name of John.

58
00:03:14.009 --> 00:03:17.008
And it happens to be the same guy.

59
00:03:17.008 --> 00:03:20.009
John Jones as the chair of humanities and social sciences.

60
00:03:20.009 --> 00:03:22.007
Now we're going to find all departments

61
00:03:22.007 --> 00:03:26.001
with the name ending in lower case sciences

62
00:03:26.001 --> 00:03:29.004
and have that search be case-insensitive.

63
00:03:29.004 --> 00:03:32.000
So we have a new department.

64
00:03:32.000 --> 00:03:36.007
The name is sciences with the lower case S

65
00:03:36.007 --> 00:03:39.002
and the chair part is null and

66
00:03:39.002 --> 00:03:45.003
then we have these restrictions added onto it.

67
00:03:45.003 --> 00:03:48.007
And then print those out to the screen.

68
00:03:48.007 --> 00:03:52.005
And so we get back department natural sciences

69
00:03:52.005 --> 00:03:54.000
and social sciences.

