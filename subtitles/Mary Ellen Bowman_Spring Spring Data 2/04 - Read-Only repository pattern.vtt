WEBVTT
1
00:00:00.006 --> 00:00:02.003
- [Instructor] Something not well documented

2
00:00:02.003 --> 00:00:04.001
in the Spring Data website

3
00:00:04.001 --> 00:00:06.001
but well followed in the community

4
00:00:06.001 --> 00:00:09.000
is the read-only repository pattern.

5
00:00:09.000 --> 00:00:11.005
It is a conceivable scenario where you want to

6
00:00:11.005 --> 00:00:13.008
restrict the repository from invoking

7
00:00:13.008 --> 00:00:16.006
certain default Crud repository methods.

8
00:00:16.006 --> 00:00:18.004
We can accomplish this by creating

9
00:00:18.004 --> 00:00:21.000
a no-repository bean interface.

10
00:00:21.000 --> 00:00:22.005
So how do we do that?

11
00:00:22.005 --> 00:00:26.000
First, we create a new interface and name it appropriately

12
00:00:26.000 --> 00:00:29.009
read-only repository or write-only repository for example

13
00:00:29.009 --> 00:00:33.005
and extend it from repository, not Crud repository.

14
00:00:33.005 --> 00:00:37.007
Next we annotate the interface with @NoRepositoryBean.

15
00:00:37.007 --> 00:00:40.002
This tells the Spring repository scanner

16
00:00:40.002 --> 00:00:43.002
not to instantiate a class for this interface.

17
00:00:43.002 --> 00:00:46.003
It's purely an interface and will remain so.

18
00:00:46.003 --> 00:00:50.000
Lastly we add the signatures of the allowed methods.

19
00:00:50.000 --> 00:00:53.000
The signature must exactly match the signature

20
00:00:53.000 --> 00:00:56.002
of the permitted Crud repository method.

21
00:00:56.002 --> 00:01:00.008
Now we are ready to extend from this repository.

22
00:01:00.008 --> 00:01:04.000
In this example, we are restricting repository methods

23
00:01:04.000 --> 00:01:07.006
to just read methods of a Crud repository.

24
00:01:07.006 --> 00:01:10.002
I've named it ReadOnlyRespository,

25
00:01:10.002 --> 00:01:12.005
extended it from repository

26
00:01:12.005 --> 00:01:16.007
and matches the same signatures and bounded types.

27
00:01:16.007 --> 00:01:19.003
If we already knew the ID types for the entities,

28
00:01:19.003 --> 00:01:20.007
for example integer,

29
00:01:20.007 --> 00:01:24.002
we could put that in instead of the ID parameter.

30
00:01:24.002 --> 00:01:27.002
Take a moment to read the methods.

31
00:01:27.002 --> 00:01:29.005
Notice that the save and delete methods

32
00:01:29.005 --> 00:01:33.003
from Crud repository are admitted.

33
00:01:33.003 --> 00:01:36.006
Now we are ready to extend from Crud repository,

34
00:01:36.006 --> 00:01:39.006
normally called query repositories.

35
00:01:39.006 --> 00:01:42.006
So I have a course query repository

36
00:01:42.006 --> 00:01:45.007
that extends from read-only repository.

37
00:01:45.007 --> 00:01:49.009
The entity is course, the ID type is integer

38
00:01:49.009 --> 00:01:54.002
and of course you have the original course repository,

39
00:01:54.002 --> 00:01:57.000
which extends from Crud repository

40
00:01:57.000 --> 00:01:58.009
that can do anything.

41
00:01:58.009 --> 00:02:02.009
Although we can put query methods in either repository,

42
00:02:02.009 --> 00:02:05.009
it is best to put them in course query repository

43
00:02:05.009 --> 00:02:08.000
to properly follow the pattern.

