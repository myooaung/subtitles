WEBVTT
1
00:00:00.050 --> 00:00:02.010
- [Instructor] We've seen some pretty cool ways

2
00:00:02.010 --> 00:00:04.040
to make query methods using property expressions

3
00:00:04.040 --> 00:00:07.030
in clauses with the method signature.

4
00:00:07.030 --> 00:00:09.000
Another way to declare a query method

5
00:00:09.000 --> 00:00:12.000
is by applying the @Query annotation.

6
00:00:12.000 --> 00:00:14.030
The contents of the the @Query annotation

7
00:00:14.030 --> 00:00:16.080
can be a source specific query language,

8
00:00:16.080 --> 00:00:18.060
like JPQL,

9
00:00:18.060 --> 00:00:20.030
or a query language

10
00:00:20.030 --> 00:00:23.020
native to the actual data source management system

11
00:00:23.020 --> 00:00:26.000
like MySQL SQL.

12
00:00:26.000 --> 00:00:28.070
When declaring a query method with @Query

13
00:00:28.070 --> 00:00:31.060
the method signature can be anything you like.

14
00:00:31.060 --> 00:00:32.080
It does not have to follow

15
00:00:32.080 --> 00:00:35.000
the property expression rules.

16
00:00:35.000 --> 00:00:36.030
The course repository

17
00:00:36.030 --> 00:00:39.020
will hold our @Query examples.

18
00:00:39.020 --> 00:00:40.050
Let's look at some reasons

19
00:00:40.050 --> 00:00:44.000
where using @Query is the better choice.

20
00:00:44.000 --> 00:00:45.090
Method simplification.

21
00:00:45.090 --> 00:00:47.050
Sometimes property expressions

22
00:00:47.050 --> 00:00:49.060
can get too long and awkward.

23
00:00:49.060 --> 00:00:51.040
Doesn't find by chair last name

24
00:00:51.040 --> 00:00:53.010
seem more natural than,

25
00:00:53.010 --> 00:00:56.020
find by department chair member last name?

26
00:00:56.020 --> 00:00:57.050
Parameter substitution

27
00:00:57.050 --> 00:01:00.060
is possible with the @Param annotation.

28
00:01:00.060 --> 00:01:02.050
If I didn't supply @Param

29
00:01:02.050 --> 00:01:07.000
then the @?, in a number works just as well.

30
00:01:07.000 --> 00:01:09.020
Another reason to use @Query

31
00:01:09.020 --> 00:01:10.090
is that the query is too complex

32
00:01:10.090 --> 00:01:12.080
for property expressions.

33
00:01:12.080 --> 00:01:14.030
In the first query,

34
00:01:14.030 --> 00:01:15.060
we need to make

35
00:01:15.060 --> 00:01:18.020
a JPQL join of course,

36
00:01:18.020 --> 00:01:20.050
to prerequisite courses.

37
00:01:20.050 --> 00:01:23.010
The second query has a JPL select new,

38
00:01:23.010 --> 00:01:24.070
which returns a whole new object

39
00:01:24.070 --> 00:01:27.070
that's not even a JPA entity.

40
00:01:27.070 --> 00:01:29.090
There are times when you need to go native.

41
00:01:29.090 --> 00:01:31.020
Meaning, actually make a call

42
00:01:31.020 --> 00:01:33.070
to the native data management system.

43
00:01:33.070 --> 00:01:35.010
You can do this by setting

44
00:01:35.010 --> 00:01:37.040
the native query attribute to, true.

45
00:01:37.040 --> 00:01:38.090
Even for a native query,

46
00:01:38.090 --> 00:01:41.010
the resulting rows are still mapped back

47
00:01:41.010 --> 00:01:43.030
to the JPA entity.

48
00:01:43.030 --> 00:01:45.000
In this example, I am making a call

49
00:01:45.000 --> 00:01:49.050
out to MySQL SQL to find the three youngest students.

50
00:01:49.050 --> 00:01:52.070
It may sound strange but as of Java EE 6

51
00:01:52.070 --> 00:01:54.090
JPQL does not have the ability

52
00:01:54.090 --> 00:01:57.030
to limit the results of a query.

53
00:01:57.030 --> 00:01:58.060
Something which is possible

54
00:01:58.060 --> 00:02:01.080
with property expressions.

55
00:02:01.080 --> 00:02:03.060
So, let's look at our

56
00:02:03.060 --> 00:02:04.090
course repository

57
00:02:04.090 --> 00:02:06.040
and here's where we have

58
00:02:06.040 --> 00:02:09.010
the usage of the @Query.

59
00:02:09.010 --> 00:02:10.010
And

60
00:02:10.010 --> 00:02:12.010
I'm going to go into query demos

61
00:02:12.010 --> 00:02:14.070
the JPQL queries method

62
00:02:14.070 --> 00:02:16.020
and as we step through these,

63
00:02:16.020 --> 00:02:18.010
I've actually put in the comment,

64
00:02:18.010 --> 00:02:20.010
the JPQL associated with it

65
00:02:20.010 --> 00:02:21.000
so we don't have to

66
00:02:21.000 --> 00:02:27.030
go back and forth to the repository.

67
00:02:27.030 --> 00:02:30.010
So, first I'm gonna show how method simplification

68
00:02:30.010 --> 00:02:31.070
is better with @Query

69
00:02:31.070 --> 00:02:33.070
so this is the long signature

70
00:02:33.070 --> 00:02:35.000
just to look up

71
00:02:35.000 --> 00:02:38.060
department by the member last name.

72
00:02:38.060 --> 00:02:43.000
So find by chair last name, is Jones.

73
00:02:43.000 --> 00:02:44.000
See the console.

74
00:02:44.000 --> 00:02:44.080
So this is going to find

75
00:02:44.080 --> 00:02:46.020
all the courses

76
00:02:46.020 --> 00:02:47.090
that are in a department

77
00:02:47.090 --> 00:02:49.080
where the department's head

78
00:02:49.080 --> 00:02:50.070
or chair,

79
00:02:50.070 --> 00:02:51.080
has a last name of Jones.

80
00:02:51.080 --> 00:02:53.010
So, if you remember

81
00:02:53.010 --> 00:02:54.090
Dean Jones was the department chair

82
00:02:54.090 --> 00:02:57.030
for both Humanities and Social Sciences.

83
00:02:57.030 --> 00:03:00.000
So that's why we see all those courses.

84
00:03:00.000 --> 00:03:01.070
So now we're gonna do some complex queries.

85
00:03:01.070 --> 00:03:04.040
First I'm looking up the English 101 course.

86
00:03:04.040 --> 00:03:05.030
And it's gonna help us

87
00:03:05.030 --> 00:03:07.030
as parameters to our query.

88
00:03:07.030 --> 00:03:08.020
So,

89
00:03:08.020 --> 00:03:09.010
we want to

90
00:03:09.010 --> 00:03:10.080
look up all the courses

91
00:03:10.080 --> 00:03:15.000
where English 101 is the prerequisite.

92
00:03:15.000 --> 00:03:16.070
Find course by prerequisite,

93
00:03:16.070 --> 00:03:19.080
passing in the english 101 ID.

94
00:03:19.080 --> 00:03:21.050
So, here's all the courses

95
00:03:21.050 --> 00:03:23.010
where you have to take English 101

96
00:03:23.010 --> 00:03:26.000
before moving on.

97
00:03:26.000 --> 00:03:29.040
And now we're going to use the JPQL Select New

98
00:03:29.040 --> 00:03:31.070
where it allows us to actually

99
00:03:31.070 --> 00:03:33.030
instantiate a new object

100
00:03:33.030 --> 00:03:34.060
that's not necessarily

101
00:03:34.060 --> 00:03:36.050
a JPA entity.

102
00:03:36.050 --> 00:03:39.040
And so we're passing in English 101

103
00:03:39.040 --> 00:03:44.080
and the ID of that.

104
00:03:44.080 --> 00:03:46.030
Here is our course view.

105
00:03:46.030 --> 00:03:47.020
Where we don't want all

106
00:03:47.020 --> 00:03:49.000
of the other attributes like the ID.

107
00:03:49.000 --> 00:03:51.030
We just wanna know the name of the course,

108
00:03:51.030 --> 00:03:52.060
the instructor's last name

109
00:03:52.060 --> 00:03:55.000
and the name of the department it's in.

