WEBVTT
1
00:00:00.005 --> 00:00:02.005
- [Instructor] Some applications must track

2
00:00:02.005 --> 00:00:05.005
when an entity was created or modified

3
00:00:05.005 --> 00:00:07.006
and which user did it.

4
00:00:07.006 --> 00:00:10.008
This is called auditing, which is a common requirement,

5
00:00:10.008 --> 00:00:14.001
especially with large-scale applications.

6
00:00:14.001 --> 00:00:16.009
Spring Data recognizes this and provides features

7
00:00:16.009 --> 00:00:20.001
to automatically do that tracking for you.

8
00:00:20.001 --> 00:00:23.000
There are two ways to wire up Spring Data auditing.

9
00:00:23.000 --> 00:00:26.002
One way is to decorate your own entity attributes

10
00:00:26.002 --> 00:00:28.007
with predefined annotations.

11
00:00:28.007 --> 00:00:31.009
The CreatedDate annotation injects the time stamp

12
00:00:31.009 --> 00:00:35.000
of when the entity is first persisted.

13
00:00:35.000 --> 00:00:38.001
The LastModifiedDate annotation injects

14
00:00:38.001 --> 00:00:42.006
the time that the entity's update was last persisted.

15
00:00:42.006 --> 00:00:46.003
The data time can be either long,

16
00:00:46.003 --> 00:00:51.004
Joda-Time DateTime, pre-Java 8 Date and Calendar,

17
00:00:51.004 --> 00:00:54.005
or Java 8 Date-Time.

18
00:00:54.005 --> 00:00:57.004
The CreatedBy annotation injects the user

19
00:00:57.004 --> 00:00:59.008
that created the record.

20
00:00:59.008 --> 00:01:02.008
LastModifiedBy annotation injects the user

21
00:01:02.008 --> 00:01:05.006
that last modified it.

22
00:01:05.006 --> 00:01:08.009
The other way is to not touch the entity attributes.

23
00:01:08.009 --> 00:01:13.000
Instead, implement the Auditable interface

24
00:01:13.000 --> 00:01:17.005
and extend from AbstractAuditable base class.

25
00:01:17.005 --> 00:01:20.006
AbstractAuditable provides the implementation

26
00:01:20.006 --> 00:01:23.006
of the CreatedDate, LastModifiedDate,

27
00:01:23.006 --> 00:01:27.007
CreatedBy, and LastModifiedBy attributes.

28
00:01:27.007 --> 00:01:30.000
Either way, you need to pull the user

29
00:01:30.000 --> 00:01:34.000
off of the session principle and inject it into the entity.

30
00:01:34.000 --> 00:01:35.005
This is done by implementing

31
00:01:35.005 --> 00:01:39.003
the AuditorAware service provider interface.

32
00:01:39.003 --> 00:01:43.000
In this example, the class SpringSecurityAuditorAware

33
00:01:43.000 --> 00:01:46.000
implements AuditorAware and leverages

34
00:01:46.000 --> 00:01:48.006
Spring Security's Authentication object

35
00:01:48.006 --> 00:01:51.002
to fetch the current user information.

36
00:01:51.002 --> 00:01:53.001
Once these features are wired up,

37
00:01:53.001 --> 00:01:55.005
you don't need to manage those attributes at all.

38
00:01:55.005 --> 00:01:57.000
Spring does it all for you.

