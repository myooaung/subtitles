WEBVTT
1
00:00:00.005 --> 00:00:03.000
- [Instructor] So let's get into some real code.

2
00:00:03.000 --> 00:00:04.003
In the exercise files,

3
00:00:04.003 --> 00:00:06.008
there is Spring Boot Maven project that I created

4
00:00:06.008 --> 00:00:08.007
with Spring Initializr.

5
00:00:08.007 --> 00:00:11.002
If you are not familiar with Spring Boot

6
00:00:11.002 --> 00:00:13.000
or Spring Initializr,

7
00:00:13.000 --> 00:00:15.000
I encourage you to watch the first chapter

8
00:00:15.000 --> 00:00:18.001
of Learning Spring with Spring Boot.

9
00:00:18.001 --> 00:00:20.004
The project's called university.

10
00:00:20.004 --> 00:00:23.003
It incorporates in H two in memory database

11
00:00:23.003 --> 00:00:25.006
so you can download and run the project

12
00:00:25.006 --> 00:00:30.000
without any setup other than Java, Maven, and an IDE.

13
00:00:30.000 --> 00:00:34.007
The base package is com dot example dot university.

14
00:00:34.007 --> 00:00:37.003
There are three Java entities,

15
00:00:37.003 --> 00:00:42.000
student, course, and department in the domain package.

16
00:00:42.000 --> 00:00:44.001
Student

17
00:00:44.001 --> 00:00:44.009
is an entity.

18
00:00:44.009 --> 00:00:47.006
It has a student ID

19
00:00:47.006 --> 00:00:51.000
that is automatically generated upon construction,

20
00:00:51.000 --> 00:00:53.005
there's a full-time status attribute,

21
00:00:53.005 --> 00:00:56.000
an age attribute,

22
00:00:56.000 --> 00:01:00.000
and attendee, which is embeddable

23
00:01:00.000 --> 00:01:01.005
as the person class

24
00:01:01.005 --> 00:01:04.008
that has the first and last name of the student.

25
00:01:04.008 --> 00:01:07.002
So person is embeddable.

26
00:01:07.002 --> 00:01:08.008
It's not an entity in itself.

27
00:01:08.008 --> 00:01:10.009
It's part of the student entity

28
00:01:10.009 --> 00:01:14.002
and there's the first and last name attribute.

29
00:01:14.002 --> 00:01:15.006
Back to student.

30
00:01:15.006 --> 00:01:18.000
There is a one to many relationship

31
00:01:18.000 --> 00:01:20.005
between student and courses.

32
00:01:20.005 --> 00:01:23.002
So this is the list of courses that the student

33
00:01:23.002 --> 00:01:24.009
is enrolled in.

34
00:01:24.009 --> 00:01:27.006
Let's open course,

35
00:01:27.006 --> 00:01:29.006
course is an entity.

36
00:01:29.006 --> 00:01:32.003
It also has a generated ID,

37
00:01:32.003 --> 00:01:35.006
a name, and a department

38
00:01:35.006 --> 00:01:38.000
that the course is in.

39
00:01:38.000 --> 00:01:40.006
So let's open department,

40
00:01:40.006 --> 00:01:41.009
department is an entity.

41
00:01:41.009 --> 00:01:44.006
It has a generated ID, as well,

42
00:01:44.006 --> 00:01:45.009
a name,

43
00:01:45.009 --> 00:01:50.003
and then a list of courses that are in the department.

44
00:01:50.003 --> 00:01:55.004
So there's a one to many relationship back to courses.

45
00:01:55.004 --> 00:01:56.009
And we have a fetch type eager

46
00:01:56.009 --> 00:01:59.007
and cascade all.

47
00:01:59.007 --> 00:02:01.005
Now in the repo package,

48
00:02:01.005 --> 00:02:04.006
let's open student repository.

49
00:02:04.006 --> 00:02:07.001
The student repository interface extends

50
00:02:07.001 --> 00:02:09.002
from the spring data cred repository

51
00:02:09.002 --> 00:02:14.004
where the bounded type parameters are student and integer.

52
00:02:14.004 --> 00:02:18.009
Integer is the type of the student ID attribute.

53
00:02:18.009 --> 00:02:21.005
Student repository inherits the create,

54
00:02:21.005 --> 00:02:29.004
read, and update, and delete methods from cred repository.

55
00:02:29.004 --> 00:02:31.004
I'm going to use JUnit

56
00:02:31.004 --> 00:02:34.003
to exercise the repository.

57
00:02:34.003 --> 00:02:37.002
It is in the source slash test folder

58
00:02:37.002 --> 00:02:41.008
and the file is called crud repository demo.

59
00:02:41.008 --> 00:02:45.003
This test leverages the JUnit Spring runner

60
00:02:45.003 --> 00:02:50.002
to auto wire and instance of the student repository

61
00:02:50.002 --> 00:02:52.007
and Spring Boot test,

62
00:02:52.007 --> 00:02:55.007
which starts up the Spring Boot university application

63
00:02:55.007 --> 00:02:59.000
within the JUnit JVM.

64
00:02:59.000 --> 00:03:00.004
So in this example,

65
00:03:00.004 --> 00:03:03.002
I'm going to run this method,

66
00:03:03.002 --> 00:03:05.003
this JUnit test,

67
00:03:05.003 --> 00:03:09.002
and I'm going to create some students

68
00:03:09.002 --> 00:03:11.005
and persist them to the respository,

69
00:03:11.005 --> 00:03:13.005
which is an in-memory database,

70
00:03:13.005 --> 00:03:15.008
going to look them up and print them out

71
00:03:15.008 --> 00:03:18.000
and I'm going to iterate through them

72
00:03:18.000 --> 00:03:20.004
and age up each one of the students.

73
00:03:20.004 --> 00:03:22.006
Add a year to each of their ages,

74
00:03:22.006 --> 00:03:24.007
look them up again and print them out again

75
00:03:24.007 --> 00:03:27.001
and then remove them.

76
00:03:27.001 --> 00:03:30.008
I'm leveraging Java eight streams and lambdas

77
00:03:30.008 --> 00:03:34.004
to print these students all in one line of code.

78
00:03:34.004 --> 00:03:36.000
If this is new to you,

79
00:03:36.000 --> 00:03:39.003
you should check out Learning Java Lambda Expressions.

80
00:03:39.003 --> 00:03:46.002
So I'm going to debug this method

81
00:03:46.002 --> 00:03:50.003
and run through these.

82
00:03:50.003 --> 00:03:51.006
But wait, you might be asking.

83
00:03:51.006 --> 00:03:53.004
Mary Ellen, you forgot something.

84
00:03:53.004 --> 00:03:56.004
Where did you implement the repository methods?

85
00:03:56.004 --> 00:03:57.006
Well, you're right.

86
00:03:57.006 --> 00:03:58.009
I didn't, and what's better,

87
00:03:58.009 --> 00:04:00.005
I don't have to.

88
00:04:00.005 --> 00:04:02.003
At runtime during bootstrap,

89
00:04:02.003 --> 00:04:05.002
Spring data scans the code for any interface

90
00:04:05.002 --> 00:04:08.002
that extends the repository interface.

91
00:04:08.002 --> 00:04:11.008
The implementation is inferred by the declaration.

92
00:04:11.008 --> 00:04:13.007
So we see in the debugger,

93
00:04:13.007 --> 00:04:17.008
this object that's reference of student repository

94
00:04:17.008 --> 00:04:21.009
that actually references an object of the class,

95
00:04:21.009 --> 00:04:25.002
simple JPA repository.

96
00:04:25.002 --> 00:04:26.002
So let's step through these.

97
00:04:26.002 --> 00:04:27.007
I have my status as full time

98
00:04:27.007 --> 00:04:29.008
and let's create student Jane Doe,

99
00:04:29.008 --> 00:04:31.009
who's full time and 20 years old.

100
00:04:31.009 --> 00:04:35.005
We have student John Doe, who's full time and 22.

101
00:04:35.005 --> 00:04:38.006
Mike Smith is full time and 18,

102
00:04:38.006 --> 00:04:42.007
and Ally Kim is not full time and 19.

103
00:04:42.007 --> 00:04:44.003
And show the console

104
00:04:44.003 --> 00:04:47.006
and we'll

105
00:04:47.006 --> 00:04:49.003
print out all those students

106
00:04:49.003 --> 00:04:52.005
and so they're in our persistent store,

107
00:04:52.005 --> 00:04:55.009
and now we're going to iterate through all those

108
00:04:55.009 --> 00:04:59.009
and age them up and print them out.

109
00:04:59.009 --> 00:05:03.004
Now they're definitely a year older

110
00:05:03.004 --> 00:05:06.001
and now we're going to delete them all in one method

111
00:05:06.001 --> 00:05:09.008
and verify that they are gone.

112
00:05:09.008 --> 00:05:14.000
Much cleaner and better code than regular JPA.

