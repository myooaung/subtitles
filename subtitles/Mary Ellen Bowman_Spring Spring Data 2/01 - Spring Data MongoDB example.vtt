WEBVTT
1
00:00:00.006 --> 00:00:02.007
- [Instructor] Spring Data supports many types

2
00:00:02.007 --> 00:00:07.001
of data sources via the Commons CrudRepository.

3
00:00:07.001 --> 00:00:10.009
We've already seen it in action with Spring Data JPA,

4
00:00:10.009 --> 00:00:15.000
let's leverage what we've learned and apply it MongoDB.

5
00:00:15.000 --> 00:00:18.007
Instead of JPA entities, MongoDB persists

6
00:00:18.007 --> 00:00:21.000
what it calls documents.

7
00:00:21.000 --> 00:00:23.009
We have a new Spring Boot university project

8
00:00:23.009 --> 00:00:30.002
in the 501 folder, and in the pom.xml configuration file,

9
00:00:30.002 --> 00:00:36.000
we have from Maven to dependencies,

10
00:00:36.000 --> 00:00:39.005
MongoDB, and Flapdoodle,

11
00:00:39.005 --> 00:00:42.008
which is an in-memory MongoDB repository

12
00:00:42.008 --> 00:00:45.008
that requires no configuration.

13
00:00:45.008 --> 00:00:51.003
In the domain folder, we have three domain model objects,

14
00:00:51.003 --> 00:00:54.009
Department, Person and Staff.

15
00:00:54.009 --> 00:00:58.008
Staff is a MongoDB document

16
00:00:58.008 --> 00:01:03.000
which encapsulates Person as a member,

17
00:01:03.000 --> 00:01:06.005
Person is a plain old Java object

18
00:01:06.005 --> 00:01:10.009
that has the first and last name of the person,

19
00:01:10.009 --> 00:01:14.003
Department is the other MongoDB document,

20
00:01:14.003 --> 00:01:21.008
it has an ID, and a name, and a DBRef to staff called chair.

21
00:01:21.008 --> 00:01:24.008
For each document there is a repository

22
00:01:24.008 --> 00:01:30.001
so in the repo folder we have DepartmentRepository

23
00:01:30.001 --> 00:01:32.009
and StaffRepository.

24
00:01:32.009 --> 00:01:35.007
StaffRepository is a Spring Data paging

25
00:01:35.007 --> 00:01:40.003
and sorting repository, it also implements CrudRepository,

26
00:01:40.003 --> 00:01:44.002
similar to JPA StaffRepository in chapter four.

27
00:01:44.002 --> 00:01:49.003
There are two query methods, findByMemberLastName,

28
00:01:49.003 --> 00:01:51.005
and is a property expression,

29
00:01:51.005 --> 00:01:54.009
findByFirstName issues a JSON query

30
00:01:54.009 --> 00:01:58.006
via the @Query annotation.

31
00:01:58.006 --> 00:02:02.006
Now let's look at the DepartmentRepository.

32
00:02:02.006 --> 00:02:06.009
DepartmentRepository is a MongoRepository

33
00:02:06.009 --> 00:02:10.007
which extends paging and storing repository,

34
00:02:10.007 --> 00:02:15.000
query by example executer, and CrudRepository.

35
00:02:15.000 --> 00:02:17.000
We have three query methods,

36
00:02:17.000 --> 00:02:21.005
findByName is a simple property expression,

37
00:02:21.005 --> 00:02:24.004
findNameByPattern issues a JSON query

38
00:02:24.004 --> 00:02:26.005
which performs a regular expression search

39
00:02:26.005 --> 00:02:28.007
in the department name,

40
00:02:28.007 --> 00:02:33.000
and findByChairLastName is a property expression

41
00:02:33.000 --> 00:02:35.002
which fails when invoked.

42
00:02:35.002 --> 00:02:38.009
At bootstrap, Spring Data believes the method is valid

43
00:02:38.009 --> 00:02:41.006
because it will pass property expression rules,

44
00:02:41.006 --> 00:02:44.003
however it is invalid because

45
00:02:44.003 --> 00:02:47.007
we're pointing to a MongoDB data source.

46
00:02:47.007 --> 00:02:50.008
The department attribute chair is a DBRef

47
00:02:50.008 --> 00:02:54.009
and crosses into a different document staff.

48
00:02:54.009 --> 00:03:00.003
Unlike JPA, MongoDB does not permit joined queries.

49
00:03:00.003 --> 00:03:03.007
Let's go to the MongoDBApplication main.

50
00:03:03.007 --> 00:03:05.008
MongoDBApplication is our main

51
00:03:05.008 --> 00:03:08.003
Spring Boot application class.

52
00:03:08.003 --> 00:03:13.000
Just like the JPA example, the Flapdoodle in-memory database

53
00:03:13.000 --> 00:03:17.000
starts up automatically and requires no initialization.

54
00:03:17.000 --> 00:03:19.006
We inject the repositories into the class

55
00:03:19.006 --> 00:03:24.006
and create 11 staff members and three departments,

56
00:03:24.006 --> 00:03:26.004
and persist them.

57
00:03:26.004 --> 00:03:32.000
Now let's run the methods in our MongoDB test file.

58
00:03:32.000 --> 00:03:34.008
I'll run this in debug, and we'll have methods

59
00:03:34.008 --> 00:03:37.009
to exercise these.

60
00:03:37.009 --> 00:03:39.008
So first we're going to step through

61
00:03:39.008 --> 00:03:43.007
our paging and sorting queries on the StaffRepository,

62
00:03:43.007 --> 00:03:45.006
we're going to sort by last name,

63
00:03:45.006 --> 00:03:49.005
so find all and then apply this sort,

64
00:03:49.005 --> 00:03:55.002
and see, and so all the staff are sorted by last name.

65
00:03:55.002 --> 00:03:58.000
Now we're going to find the first staff members

66
00:03:58.000 --> 00:04:02.005
and sort them alphabetically by last name.

67
00:04:02.005 --> 00:04:06.001
And then we have sorted them by last name,

68
00:04:06.001 --> 00:04:12.008
now we're going to do, find members by last name of King.

69
00:04:12.008 --> 00:04:17.004
We have one staff member with the last name of King,

70
00:04:17.004 --> 00:04:19.009
and now we're going to find all staff members

71
00:04:19.009 --> 00:04:25.007
with the first name John, and we have one, John Jones.

72
00:04:25.007 --> 00:04:27.006
Now we're going to apply the paging

73
00:04:27.006 --> 00:04:31.004
and sorting repository by alphabetical last name,

74
00:04:31.004 --> 00:04:35.007
from the department, and now the property expression

75
00:04:35.007 --> 00:04:39.001
find department by name Humanities,

76
00:04:39.001 --> 00:04:41.003
and there's the Humanities.

77
00:04:41.003 --> 00:04:43.000
Now we're going to apply the rejects

78
00:04:43.000 --> 00:04:49.001
to find all departments where you have Sciences in the name

79
00:04:49.001 --> 00:04:52.006
of the department, so S, it can be a capital S

80
00:04:52.006 --> 00:04:56.001
or a lowercase S, and anything before that,

81
00:04:56.001 --> 00:04:59.004
and then lowercase iences.

82
00:04:59.004 --> 00:05:02.008
And so there's, we have Natural Science and Social Science,

83
00:05:02.008 --> 00:05:08.001
and now here's the method that will fail when we run it.

84
00:05:08.001 --> 00:05:11.001
So let's actually see the error we got,

85
00:05:11.001 --> 00:05:14.002
MappingException, Invalid path reference

86
00:05:14.002 --> 00:05:15.009
chair.member.lastname,

87
00:05:15.009 --> 00:05:18.005
Associations can only be pointed to directly

88
00:05:18.005 --> 00:05:22.002
via their property id, so we're crossing DBRefs.

89
00:05:22.002 --> 00:05:26.003
So, while we can use Spring Data to generically code

90
00:05:26.003 --> 00:05:29.001
to many data sources, we must remain mindful

91
00:05:29.001 --> 00:05:33.000
of each data source's unique characteristics.

