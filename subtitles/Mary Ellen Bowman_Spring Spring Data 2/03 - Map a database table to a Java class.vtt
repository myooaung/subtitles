WEBVTT
1
00:00:00.050 --> 00:00:03.070
- [Instructor] So let's actually see JPA entity.

2
00:00:03.070 --> 00:00:05.040
We'll start with a simple example

3
00:00:05.040 --> 00:00:09.080
where we map one database table to one JPA entity.

4
00:00:09.080 --> 00:00:12.080
On the left side is an ER diagram component

5
00:00:12.080 --> 00:00:15.040
representing a table called student.

6
00:00:15.040 --> 00:00:17.040
Student has four columns.

7
00:00:17.040 --> 00:00:23.000
Student_id, student_name, student_fulltime,

8
00:00:23.000 --> 00:00:26.010
and student_age.

9
00:00:26.010 --> 00:00:28.040
On the right side is a Java class called

10
00:00:28.040 --> 00:00:31.030
student with four attributes.

11
00:00:31.030 --> 00:00:34.050
Student_id of type integer,

12
00:00:34.050 --> 00:00:37.070
name, that's a string,

13
00:00:37.070 --> 00:00:40.080
fulltime, which is a boolean,

14
00:00:40.080 --> 00:00:44.010
and age, which is an integer.

15
00:00:44.010 --> 00:00:47.050
The class must be annotated with @Entity.

16
00:00:47.050 --> 00:00:51.070
@Table is where we specify the database table name.

17
00:00:51.070 --> 00:00:54.070
Entities must have a unique identifier attribute

18
00:00:54.070 --> 00:00:57.020
with @Id.

19
00:00:57.020 --> 00:01:00.050
If desired, @Generatedvalue

20
00:01:00.050 --> 00:01:05.000
tells JPA to generate the id when persisted.

21
00:01:05.000 --> 00:01:06.030
For this reason,

22
00:01:06.030 --> 00:01:10.000
we don't include student id in the constructor.

23
00:01:10.000 --> 00:01:14.070
@Column maps the class attributes to table columns.

24
00:01:14.070 --> 00:01:16.000
Now that we have identified

25
00:01:16.000 --> 00:01:18.070
the object to relational mapping metadata,

26
00:01:18.070 --> 00:01:20.040
all of our database related coding

27
00:01:20.040 --> 00:01:22.040
can stay in the logical world

28
00:01:22.040 --> 00:01:26.000
because JPA will take care of the physical world for us.

