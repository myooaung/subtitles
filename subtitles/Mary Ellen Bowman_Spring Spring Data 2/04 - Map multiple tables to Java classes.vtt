WEBVTT
1
00:00:00.060 --> 00:00:02.040
- [Instructor] Now let's look at an ER diagram

2
00:00:02.040 --> 00:00:04.060
with multiple tables.

3
00:00:04.060 --> 00:00:06.000
The lines between the component

4
00:00:06.000 --> 00:00:08.050
show foreign key relationships.

5
00:00:08.050 --> 00:00:12.000
There are three new tables in our University database.

6
00:00:12.000 --> 00:00:15.080
Department, course, and enrollment.

7
00:00:15.080 --> 00:00:19.000
Department is the academic division of a university

8
00:00:19.000 --> 00:00:22.020
and has an ID and a name.

9
00:00:22.020 --> 00:00:25.090
Course is a particular class offered at the university.

10
00:00:25.090 --> 00:00:28.000
It also has an ID and a name

11
00:00:28.000 --> 00:00:31.020
as well as an ID of its department.

12
00:00:31.020 --> 00:00:33.060
Students are enrolled in courses,

13
00:00:33.060 --> 00:00:36.030
so we have a join table called enrollment

14
00:00:36.030 --> 00:00:40.000
that has a course ID and a student ID.

15
00:00:40.000 --> 00:00:42.070
Now let's see how to map the updated physical model

16
00:00:42.070 --> 00:00:45.030
to our logical model.

17
00:00:45.030 --> 00:00:47.030
We have two new entities,

18
00:00:47.030 --> 00:00:49.010
course and department,

19
00:00:49.010 --> 00:00:52.080
which contain @table, @entity, @ID,

20
00:00:52.080 --> 00:00:55.010
and @column annotations,

21
00:00:55.010 --> 00:00:56.090
just like the student.

22
00:00:56.090 --> 00:00:59.010
But how do we handle a foreign key?

23
00:00:59.010 --> 00:01:01.050
We need to think object orientedly,

24
00:01:01.050 --> 00:01:03.020
if that's a word.

25
00:01:03.020 --> 00:01:04.070
The course table has

26
00:01:04.070 --> 00:01:09.000
a course underscore department underscore ID column.

27
00:01:09.000 --> 00:01:10.090
The @join annotation

28
00:01:10.090 --> 00:01:13.010
declares this physical mapping

29
00:01:13.010 --> 00:01:15.020
enabling a logical relationship

30
00:01:15.020 --> 00:01:18.090
between the course entity and the department entity.

31
00:01:18.090 --> 00:01:23.060
The @many to one annotation shows cardinality.

32
00:01:23.060 --> 00:01:26.090
Many courses are mapped to one department.

33
00:01:26.090 --> 00:01:29.060
Now let's look at the other side of the relationship.

34
00:01:29.060 --> 00:01:32.000
Department to courses.

35
00:01:32.000 --> 00:01:34.090
The department entity has a list of courses

36
00:01:34.090 --> 00:01:39.040
that annotates with @one to many.

37
00:01:39.040 --> 00:01:42.030
One department has many courses.

38
00:01:42.030 --> 00:01:44.080
The mapped by equals department parameter

39
00:01:44.080 --> 00:01:50.020
refers to the department attribute back in the course class.

40
00:01:50.020 --> 00:01:53.060
We also see fetch and cascade parameters

41
00:01:53.060 --> 00:01:57.010
in the one to many annotations.

42
00:01:57.010 --> 00:01:59.030
By default, one to many attributes

43
00:01:59.030 --> 00:02:02.040
are not automatically fetched from the database.

44
00:02:02.040 --> 00:02:04.040
This is called lazy loading,

45
00:02:04.040 --> 00:02:09.010
but we can override that with the fetchtype.eager setting.

46
00:02:09.010 --> 00:02:11.090
So when a department is read from the database,

47
00:02:11.090 --> 00:02:16.040
JPA also populates the associated courses.

48
00:02:16.040 --> 00:02:20.010
Finally, there is a cascades parameter.

49
00:02:20.010 --> 00:02:23.040
Cascade controls the state of the collection attributes

50
00:02:23.040 --> 00:02:25.000
for an entity.

51
00:02:25.000 --> 00:02:27.000
With cascade set to all,

52
00:02:27.000 --> 00:02:29.080
any state changes that are made in the department

53
00:02:29.080 --> 00:02:32.090
should apply to its courses as well.

54
00:02:32.090 --> 00:02:36.030
Finally, let's look at the enrollment table.

55
00:02:36.030 --> 00:02:38.040
Enrollment is a join table

56
00:02:38.040 --> 00:02:42.010
with a student ID and course ID.

57
00:02:42.010 --> 00:02:44.060
The @join column annotation

58
00:02:44.060 --> 00:02:47.000
declares this physical mapping,

59
00:02:47.000 --> 00:02:49.000
enabling a logical relationship

60
00:02:49.000 --> 00:02:50.070
between the student entity

61
00:02:50.070 --> 00:02:52.060
and the course entity.

62
00:02:52.060 --> 00:02:55.000
@join requires the table name,

63
00:02:55.000 --> 00:02:56.070
which is enrollment,

64
00:02:56.070 --> 00:02:58.010
the join column,

65
00:02:58.010 --> 00:03:00.010
which is the student ID,

66
00:03:00.010 --> 00:03:02.010
and the inverse join column,

67
00:03:02.010 --> 00:03:04.000
which is the course ID.

