WEBVTT
1
00:00:00.005 --> 00:00:02.004
- [Instructor] A relatively new addition

2
00:00:02.004 --> 00:00:04.002
to the Spring Data umbrella project

3
00:00:04.002 --> 00:00:08.005
is the Spring Data JDBC Repository.

4
00:00:08.005 --> 00:00:10.006
Like Spring Data JPA repositories,

5
00:00:10.006 --> 00:00:15.009
JDBC repositories interact with relational databases.

6
00:00:15.009 --> 00:00:19.005
However, it does not rely on JPA.

7
00:00:19.005 --> 00:00:22.001
JPA offers such features as lazy loading,

8
00:00:22.001 --> 00:00:24.006
caching, and dirty tracking.

9
00:00:24.006 --> 00:00:28.001
While useful, JPA can make an application

10
00:00:28.001 --> 00:00:30.008
more complex than necessary.

11
00:00:30.008 --> 00:00:33.004
Lazy loading may trigger expensive SQL statements

12
00:00:33.004 --> 00:00:35.004
or unexpected exceptions,

13
00:00:35.004 --> 00:00:39.007
caching hides recent updates to the database,

14
00:00:39.007 --> 00:00:42.002
and dirty entity makes it difficult

15
00:00:42.002 --> 00:00:46.008
to locate the point of operation persistence.

16
00:00:46.008 --> 00:00:50.003
Spring Data JDBC bypasses lazy loading,

17
00:00:50.003 --> 00:00:54.004
caching, and dirty tracking in favor of a simpler model.

18
00:00:54.004 --> 00:00:57.009
SQL statements are issued when and only when

19
00:00:57.009 --> 00:00:59.009
you invoke a repository method

20
00:00:59.009 --> 00:01:01.006
and return a fully-loaded object,

21
00:01:01.006 --> 00:01:04.004
but there are drawbacks.

22
00:01:04.004 --> 00:01:06.004
Spring Data JDBC does not support

23
00:01:06.004 --> 00:01:10.002
many-to-many or many-to-one mappings.

24
00:01:10.002 --> 00:01:12.009
It must also be understood that the lifecycle

25
00:01:12.009 --> 00:01:15.008
of a child object is coupled with the parent.

26
00:01:15.008 --> 00:01:17.009
This is not necessarily a drawback

27
00:01:17.009 --> 00:01:22.008
because it follows the principles of domain-driven design.

28
00:01:22.008 --> 00:01:27.006
Let's look at a very simple coding example now.

29
00:01:27.006 --> 00:01:29.009
In the pom.xml of our project,

30
00:01:29.009 --> 00:01:35.002
we have a spring boot starter data JDBC dependency,

31
00:01:35.002 --> 00:01:38.009
and the H2 in-memory database.

32
00:01:38.009 --> 00:01:41.009
In our Domain folder, we have two entities:

33
00:01:41.009 --> 00:01:44.007
Department and Chair.

34
00:01:44.007 --> 00:01:47.003
Department is a parent entity

35
00:01:47.003 --> 00:01:52.001
which has a one-to-one mapping to chair, the child entity.

36
00:01:52.001 --> 00:01:56.009
Department has an ID, a name, and a chair.

37
00:01:56.009 --> 00:01:59.006
And a chair as a name and

38
00:01:59.006 --> 00:02:02.006
a back reference to department ID.

39
00:02:02.006 --> 00:02:05.006
Unlike JPA, we must manually create

40
00:02:05.006 --> 00:02:07.009
the physical database tables.

41
00:02:07.009 --> 00:02:10.003
In a normal production environment,

42
00:02:10.003 --> 00:02:12.004
external scripts would create the tables,

43
00:02:12.004 --> 00:02:16.006
but for this demo, we'll use schema.sql scripts

44
00:02:16.006 --> 00:02:19.008
to run at application startup.

45
00:02:19.008 --> 00:02:23.001
Here we create the department table and the chair table.

46
00:02:23.001 --> 00:02:25.005
Unlike other examples in this course,

47
00:02:25.005 --> 00:02:29.008
each chair maps to one and only one department

48
00:02:29.008 --> 00:02:32.006
because many-to-one is prohibited.

49
00:02:32.006 --> 00:02:35.004
There is one department repository

50
00:02:35.004 --> 00:02:38.004
which extends from CrudRepository.

51
00:02:38.004 --> 00:02:43.002
And now let's run some demos of the repository.

52
00:02:43.002 --> 00:02:44.006
We're in JBDC demos,

53
00:02:44.006 --> 00:02:47.004
and we're going to start out by creating some chairs.

54
00:02:47.004 --> 00:02:54.006
This will not affect the database yet.

55
00:02:54.006 --> 00:02:57.004
So we create the chairs,

56
00:02:57.004 --> 00:03:00.004
and now we're going to create the Humanities Department

57
00:03:00.004 --> 00:03:04.004
with Dean Jones as a chair.

58
00:03:04.004 --> 00:03:06.005
So I have a logging setup

59
00:03:06.005 --> 00:03:11.001
so that we actually see, in the console window,

60
00:03:11.001 --> 00:03:14.008
the SQL that's interacting with the database.

61
00:03:14.008 --> 00:03:17.001
So from saving the Humanities,

62
00:03:17.001 --> 00:03:19.009
it's that time we do an insert into department,

63
00:03:19.009 --> 00:03:22.008
an insert into chair.

64
00:03:22.008 --> 00:03:26.001
Now we'll create Natural Sciences

65
00:03:26.001 --> 00:03:29.001
and so we see with Natural Sciences,

66
00:03:29.001 --> 00:03:32.000
we have Dean Martin as the chair.

67
00:03:32.000 --> 00:03:37.003
So we do an insert into department and an insert into chair.

68
00:03:37.003 --> 00:03:40.005
Now for Social Sciences, Dean Jones, again,

69
00:03:40.005 --> 00:03:43.003
is the department of Social Sciences

70
00:03:43.003 --> 00:03:45.001
and there's an insert into department

71
00:03:45.001 --> 00:03:47.006
and a new insert into chair.

72
00:03:47.006 --> 00:03:50.005
So there will be two rows in the chair table

73
00:03:50.005 --> 00:03:56.001
that have Dean Jones as entries.

74
00:03:56.001 --> 00:04:01.006
Now we're going to do a find all to fetch all the departments

75
00:04:01.006 --> 00:04:06.009
and here's all the departments and the chairs.

76
00:04:06.009 --> 00:04:10.007
So you see that Dean Jones is twice.

77
00:04:10.007 --> 00:04:14.001
And here's the SQL that's called for the find all

78
00:04:14.001 --> 00:04:18.000
to map that to department.

79
00:04:18.000 --> 00:04:21.008
Now we're going to look up the department by name.

80
00:04:21.008 --> 00:04:26.002
We have a departmentRepository query method, find by name.

81
00:04:26.002 --> 00:04:29.000
As of this recording, automatic property based queries

82
00:04:29.000 --> 00:04:33.005
are not yet possible with JDBC Repositories.

83
00:04:33.005 --> 00:04:36.009
So they must be implemented manually in SQL

84
00:04:36.009 --> 00:04:40.003
with the at query annotation.

85
00:04:40.003 --> 00:04:43.001
Here is the SQL query statement

86
00:04:43.001 --> 00:04:46.005
to find a department by name.

87
00:04:46.005 --> 00:04:48.006
It selects the department table fields

88
00:04:48.006 --> 00:04:51.001
and joins them to the chair table field

89
00:04:51.001 --> 00:04:56.008
and maps them to the Java object.

90
00:04:56.008 --> 00:04:59.003
So we're going to find the Humanities department

91
00:04:59.003 --> 00:05:03.002
by name and that works, and we're inside this lambda.

92
00:05:03.002 --> 00:05:08.000
So there was that my select statement that we showed before.

93
00:05:08.000 --> 00:05:09.008
Now we're going to update the department

94
00:05:09.008 --> 00:05:12.006
by changing who the chair is.

95
00:05:12.006 --> 00:05:15.002
So we have the entity of the department,

96
00:05:15.002 --> 00:05:18.001
we're going to set the chair,

97
00:05:18.001 --> 00:05:22.008
now we're going to save the department

98
00:05:22.008 --> 00:05:28.004
and we'll look at the SQL that's generated there.

99
00:05:28.004 --> 00:05:33.007
So first it deletes the chair that was there before,

100
00:05:33.007 --> 00:05:38.006
updates the department, and how it knows that this

101
00:05:38.006 --> 00:05:40.005
is an update and not an insert

102
00:05:40.005 --> 00:05:44.005
is because the department ID is not null,

103
00:05:44.005 --> 00:05:48.002
inserts a new chair, and then it's done.

104
00:05:48.002 --> 00:05:50.003
If this topic interests you,

105
00:05:50.003 --> 00:05:53.006
I encourage you to visit the spring.io website

106
00:05:53.006 --> 00:05:59.000
for references and blogs, as well as code samples on GetHub.

