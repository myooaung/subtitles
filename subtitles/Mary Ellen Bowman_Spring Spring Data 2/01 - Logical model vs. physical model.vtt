WEBVTT
1
00:00:00.060 --> 00:00:02.080
- [Instructor] Before we dive into Spring Data,

2
00:00:02.080 --> 00:00:06.020
let's look at the concept of object to relational mapping,

3
00:00:06.020 --> 00:00:09.070
and how it relates to Java Persistence API.

4
00:00:09.070 --> 00:00:12.070
If you've already used ORM frameworks like Hibernate,

5
00:00:12.070 --> 00:00:14.040
you can skip this chapter altogether

6
00:00:14.040 --> 00:00:16.040
and move on to the next.

7
00:00:16.040 --> 00:00:18.090
A classic problem in programming is mapping

8
00:00:18.090 --> 00:00:21.060
the physical model to the logical model.

9
00:00:21.060 --> 00:00:25.060
Typical physical models are relational database repository,

10
00:00:25.060 --> 00:00:29.070
and a logical model is are the Java domain objects.

11
00:00:29.070 --> 00:00:32.090
It's possible to do ORM in plain vanilla Java,

12
00:00:32.090 --> 00:00:34.080
but it's nasty.

13
00:00:34.080 --> 00:00:37.030
First you must open a transaction,

14
00:00:37.030 --> 00:00:40.020
query the database which returns the records,

15
00:00:40.020 --> 00:00:43.010
for each record iterate through the fields,

16
00:00:43.010 --> 00:00:45.080
for each field extract the data invoking

17
00:00:45.080 --> 00:00:48.010
the proper type conversion,

18
00:00:48.010 --> 00:00:51.070
map the data to the Java object or object attribute,

19
00:00:51.070 --> 00:00:53.090
and close the transaction.

20
00:00:53.090 --> 00:00:56.000
Queries that modify the database require

21
00:00:56.000 --> 00:00:57.070
committing the transaction or rolling

22
00:00:57.070 --> 00:01:01.020
it back if an error occurs.

23
00:01:01.020 --> 00:01:03.060
Programming this way is tedious.

24
00:01:03.060 --> 00:01:06.070
The code is difficult to refactor and maintain.

25
00:01:06.070 --> 00:01:08.030
Who wants to do this?

26
00:01:08.030 --> 00:01:10.040
Not me.

27
00:01:10.040 --> 00:01:12.030
Object to relational mapping frameworks

28
00:01:12.030 --> 00:01:13.090
solve this problem.

29
00:01:13.090 --> 00:01:16.020
With an ORM framework a developer declares

30
00:01:16.020 --> 00:01:19.010
metadata to associate Java classes and attributes

31
00:01:19.010 --> 00:01:22.040
to database tables and columns.

32
00:01:22.040 --> 00:01:26.000
The framework then handles the actual database interactions.

33
00:01:26.000 --> 00:01:29.050
So the code is abstracted away from the database.

34
00:01:29.050 --> 00:01:32.000
This makes it lighter and easier to maintain.

