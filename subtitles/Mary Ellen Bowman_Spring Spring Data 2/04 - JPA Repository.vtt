WEBVTT
1
00:00:00.050 --> 00:00:02.020
- [Instructor] The crowd repository we've seen

2
00:00:02.020 --> 00:00:04.060
is a general interface that is used

3
00:00:04.060 --> 00:00:07.080
across most Spring Data data sources.

4
00:00:07.080 --> 00:00:10.020
However Spring Data modules usually

5
00:00:10.020 --> 00:00:12.080
provide a means to tap into the specific

6
00:00:12.080 --> 00:00:15.070
features of the data source.

7
00:00:15.070 --> 00:00:19.050
The JpaRepository interface is an example of this.

8
00:00:19.050 --> 00:00:23.090
JpaRepository provides the methods of CrudRepository

9
00:00:23.090 --> 00:00:26.070
because it extends from CrudRepository

10
00:00:26.070 --> 00:00:30.060
but it also provides Jpa specific methods.

11
00:00:30.060 --> 00:00:32.030
You may have noticed in the last video

12
00:00:32.030 --> 00:00:34.080
that there is a DepartmentRepository.

13
00:00:34.080 --> 00:00:36.060
If we had opened it you would see

14
00:00:36.060 --> 00:00:41.060
that the DepartmentRepository extends from JpaRepository.

15
00:00:41.060 --> 00:00:44.040
DepartmentRepository can invoke methods

16
00:00:44.040 --> 00:00:47.050
we typically see in the Jpa entity manager

17
00:00:47.050 --> 00:00:50.040
like flush and save and flush.

18
00:00:50.040 --> 00:00:53.080
It can also execute Jpa batch delete functions

19
00:00:53.080 --> 00:00:56.090
which leverages the Jpas ability

20
00:00:56.090 --> 00:01:00.050
to delete several entities in one atomic method

21
00:01:00.050 --> 00:01:05.020
more efficiently than CrudRepository.delete.

22
00:01:05.020 --> 00:01:08.080
So why would you want to have a JpaRepository.

23
00:01:08.080 --> 00:01:10.070
Most times there's no need but there

24
00:01:10.070 --> 00:01:13.060
are cases where it is beneficial.

25
00:01:13.060 --> 00:01:16.020
First if you really need to flush the data

26
00:01:16.020 --> 00:01:18.070
from the database you can just call

27
00:01:18.070 --> 00:01:21.060
the repository method rather than injecting

28
00:01:21.060 --> 00:01:23.030
the entity manager factory to get

29
00:01:23.030 --> 00:01:25.070
the entity manager instance.

30
00:01:25.070 --> 00:01:27.080
Second it helps applications

31
00:01:27.080 --> 00:01:30.080
to access many types of data stores.

32
00:01:30.080 --> 00:01:33.060
Extending from a store specific repository

33
00:01:33.060 --> 00:01:36.050
might be necessary for programmatic reasons

34
00:01:36.050 --> 00:01:40.040
or it may help developers understand the code.

35
00:01:40.040 --> 00:01:42.090
So let's try it out.

36
00:01:42.090 --> 00:01:45.060
So here is my DepartmentRepository

37
00:01:45.060 --> 00:01:48.090
and extends from JpaRepository.

38
00:01:48.090 --> 00:01:50.070
And we will exercise this with

39
00:01:50.070 --> 00:01:55.040
the JpaRepository demo again with Spring Runner

40
00:01:55.040 --> 00:01:57.040
and Spring Boot tests we're injecting

41
00:01:57.040 --> 00:01:59.030
the DepartmentRepository.

42
00:01:59.030 --> 00:02:01.050
Here's our break point.

43
00:02:01.050 --> 00:02:08.040
Let's run it in Diva mode.

44
00:02:08.040 --> 00:02:11.000
So first we're going to create

45
00:02:11.000 --> 00:02:13.090
a new department called humanities,

46
00:02:13.090 --> 00:02:18.000
save it and then manually do a flush.

47
00:02:18.000 --> 00:02:21.030
Now we're going to create a department called fine arts

48
00:02:21.030 --> 00:02:26.020
and invoke the save and flush method at the same time.

49
00:02:26.020 --> 00:02:28.060
And then lastly we're going to create

50
00:02:28.060 --> 00:02:31.080
a department social science and

51
00:02:31.080 --> 00:02:35.010
we're going to save it just with the save method.

52
00:02:35.010 --> 00:02:36.090
Now the end result is all of these

53
00:02:36.090 --> 00:02:39.040
are persisted to the store but just

54
00:02:39.040 --> 00:02:41.090
good to know you have these hooks if it's necessary.

55
00:02:41.090 --> 00:02:46.010
So let's do a find all on all departments.

56
00:02:46.010 --> 00:02:48.090
So we have all departments, humanities, fine arts,

57
00:02:48.090 --> 00:02:50.070
and social sciences each with their

58
00:02:50.070 --> 00:02:53.000
own unique generated ID.

59
00:02:53.000 --> 00:02:56.030
Now I'm gonna call delete and in batch

60
00:02:56.030 --> 00:02:59.010
and just use the first department

61
00:02:59.010 --> 00:03:05.030
that's in the repository which will be humanities.

62
00:03:05.030 --> 00:03:06.030
And now we're gonna print out

63
00:03:06.030 --> 00:03:09.040
that there's one less department.

64
00:03:09.040 --> 00:03:12.050
We only have fine arts and social sciences now

65
00:03:12.050 --> 00:03:16.080
and lastly we're going to just say delete all in batch.

66
00:03:16.080 --> 00:03:18.080
Delete all of the departments in

67
00:03:18.080 --> 00:03:25.050
the repository in an efficient atomic method.

68
00:03:25.050 --> 00:03:27.000
And there's no departments left.

