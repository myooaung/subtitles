WEBVTT
1
00:00:00.006 --> 00:00:04.000
- [Instructor] Spring Boot 2.0 introduced an upgrade

2
00:00:04.000 --> 00:00:06.004
to Spring data Repositories,

3
00:00:06.004 --> 00:00:10.001
which was the ability to leverage optional return types

4
00:00:10.001 --> 00:00:12.001
in the find by methods.

5
00:00:12.001 --> 00:00:14.003
Optional is simply awesome.

6
00:00:14.003 --> 00:00:17.002
It was introduced to us in Java version eight.

7
00:00:17.002 --> 00:00:21.000
A type leveled solution for representing optional values

8
00:00:21.000 --> 00:00:23.003
instead of null references.

9
00:00:23.003 --> 00:00:27.004
Basically, if you aren't already using optional, you should.

10
00:00:27.004 --> 00:00:31.000
So let's update some of our find by queries

11
00:00:31.000 --> 00:00:34.003
in the course repository that returned one course

12
00:00:34.003 --> 00:00:37.005
to return optional of course.

13
00:00:37.005 --> 00:00:40.009
So in course, getCourseViewByName

14
00:00:40.009 --> 00:00:45.004
I'm going to change the signature.

15
00:00:45.004 --> 00:00:50.003
So getCourseViewByCourseName now returns an optional value.

16
00:00:50.003 --> 00:00:51.008
We're going to the debugging demos

17
00:00:51.008 --> 00:00:54.001
and we see this causes a compilation error,

18
00:00:54.001 --> 00:00:57.004
as it should 'cause we're no longer returning

19
00:00:57.004 --> 00:00:58.004
the actual course view.

20
00:00:58.004 --> 00:01:00.001
We're returning an optional.

21
00:01:00.001 --> 00:01:05.001
So if I say .get

22
00:01:05.001 --> 00:01:09.006
after it that will actually get the course view of it.

23
00:01:09.006 --> 00:01:15.001
I'm actually going to try some other calls on that optional.

24
00:01:15.001 --> 00:01:19.006
So I can say getCourseViewByName English 101,

25
00:01:19.006 --> 00:01:21.008
orElseThrow an exception.

26
00:01:21.008 --> 00:01:24.009
So if it does not find that English 101

27
00:01:24.009 --> 00:01:27.004
then an exception will be thrown.

28
00:01:27.004 --> 00:01:29.007
And just to show you what happens,

29
00:01:29.007 --> 00:01:33.001
I'm going to put in a course that

30
00:01:33.001 --> 00:01:35.008
doesn't exist called English 100.

31
00:01:35.008 --> 00:01:38.006
And I'm going to call get on it.

32
00:01:38.006 --> 00:01:43.003
And then let's run this.

33
00:01:43.003 --> 00:01:45.008
Okay, we've hit our breakpoint,

34
00:01:45.008 --> 00:01:49.002
so let's call the first one getCourseViewByName

35
00:01:49.002 --> 00:01:51.003
and then the get.

36
00:01:51.003 --> 00:01:53.001
And here we have our views.

37
00:01:53.001 --> 00:01:56.006
They've returned English 101 back.

38
00:01:56.006 --> 00:02:00.001
Next well try it in orElseThrow.

39
00:02:00.001 --> 00:02:01.003
It did not throw an exception

40
00:02:01.003 --> 00:02:04.004
so we got the view back as English 101 again.

41
00:02:04.004 --> 00:02:09.001
Now let's try it with English 100, rather,

42
00:02:09.001 --> 00:02:12.005
and call get.

43
00:02:12.005 --> 00:02:15.004
And we see that an exception is thrown.

44
00:02:15.004 --> 00:02:19.001
And it says, NoSuchElementException No value present.

45
00:02:19.001 --> 00:02:21.001
So let's handle that better.

46
00:02:21.001 --> 00:02:26.006
We'll get rid of the class that was invoked there.

47
00:02:26.006 --> 00:02:31.004
And instead, we're going to say

48
00:02:31.004 --> 00:02:36.003
get English 100 and if that doesn't exist

49
00:02:36.003 --> 00:02:41.000
then we're going to return a new CourseView.

50
00:02:41.000 --> 00:02:44.000
We'll call alt orElse.

51
00:02:44.000 --> 00:02:44.009
So what happens here?

52
00:02:44.009 --> 00:02:48.004
It's going to look up English 100 which doesn't exist.

53
00:02:48.004 --> 00:02:52.006
So it's going to run this code orElse

54
00:02:52.006 --> 00:02:56.000
and construct a new temporary courseView,

55
00:02:56.000 --> 00:02:58.002
and that's what view will be assigned to it.

56
00:02:58.002 --> 00:03:03.002
So let's run that in debugger.

57
00:03:03.002 --> 00:03:04.001
Oops, we got to compile.

58
00:03:04.001 --> 00:03:08.008
Compilation there, that's, you need.

59
00:03:08.008 --> 00:03:10.002
There.

60
00:03:10.002 --> 00:03:15.006
So here we get the regular English 101 CourseView,

61
00:03:15.006 --> 00:03:20.003
English 101 did not throw an exception.

62
00:03:20.003 --> 00:03:25.003
And now we're going to step over this method,

63
00:03:25.003 --> 00:03:32.001
and now the CourseView is the dummyCourse that we created.

64
00:03:32.001 --> 00:03:34.003
Now let's go back to the CourseRepository

65
00:03:34.003 --> 00:03:36.007
and we see we have a findByName method

66
00:03:36.007 --> 00:03:37.009
that returns a course.

67
00:03:37.009 --> 00:03:39.009
And I just want to show you a little bit of

68
00:03:39.009 --> 00:03:41.007
if we did not have optionals

69
00:03:41.007 --> 00:03:43.007
and a null value was returned

70
00:03:43.007 --> 00:03:45.009
at how we would handle that.

71
00:03:45.009 --> 00:03:51.002
So here we have that method called findByName English 101.

72
00:03:51.002 --> 00:03:53.001
And if it did return a null then we

73
00:03:53.001 --> 00:03:55.009
would get a null pointer exception here

74
00:03:55.009 --> 00:03:57.004
when we call getId on it.

75
00:03:57.004 --> 00:04:06.002
So we want to say if english101 is not equal to null,

76
00:04:06.002 --> 00:04:12.003
then invoke this code.

77
00:04:12.003 --> 00:04:14.000
So now I'm going to run that.

78
00:04:14.000 --> 00:04:15.009
And of course english101 is not null

79
00:04:15.009 --> 00:04:22.009
so we actually go and call methods on the english101 course.

80
00:04:22.009 --> 00:04:26.004
So let's now have it return an optional instead

81
00:04:26.004 --> 00:04:31.008
and see how more slick the code can become

82
00:04:31.008 --> 00:04:36.005
without the ugly null checks.

83
00:04:36.005 --> 00:04:40.003
Now let's take a way the declaration of english101

84
00:04:40.003 --> 00:04:44.005
and we're going to actually leverage using a lambda here.

85
00:04:44.005 --> 00:04:52.001
We say .ifPresent

86
00:04:52.001 --> 00:04:55.009
take out the null check.

87
00:04:55.009 --> 00:04:58.005
And then run that code.

88
00:04:58.005 --> 00:05:03.000
And then here is the end of the lambda.

89
00:05:03.000 --> 00:05:04.004
So let's run this now.

90
00:05:04.004 --> 00:05:07.001
So what this is happening is the optional

91
00:05:07.001 --> 00:05:10.006
now allows us to use a lambda with ifPresent.

92
00:05:10.006 --> 00:05:15.002
Here is our english101 and it actually runs in there.

93
00:05:15.002 --> 00:05:17.008
So let's

94
00:05:17.008 --> 00:05:23.002
run that in the debugger again.

95
00:05:23.002 --> 00:05:27.004
So I'm just going to hit go because it's difficult in debuggers

96
00:05:27.004 --> 00:05:29.008
to step into a lambda.

97
00:05:29.008 --> 00:05:31.005
So we just want to make sure that we hit that breakpoint,

98
00:05:31.005 --> 00:05:35.000
and we do hit that breakpoint for english101.

99
00:05:35.000 --> 00:05:41.001
Let's see what happens if we change this to English 100.

100
00:05:41.001 --> 00:05:43.001
So now I'm going to resume my program,

101
00:05:43.001 --> 00:05:48.000
and we should not hit that breakpoint inside the lambda.

102
00:05:48.000 --> 00:05:50.002
And we don't.

103
00:05:50.002 --> 00:05:53.006
I love optionals and having optional return types

104
00:05:53.006 --> 00:05:56.003
on Spring Data Repository creator methods

105
00:05:56.003 --> 00:05:59.000
has made me a happy developer.

