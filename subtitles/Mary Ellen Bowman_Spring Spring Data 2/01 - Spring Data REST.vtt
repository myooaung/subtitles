WEBVTT
1
00:00:00.050 --> 00:00:01.070
- [Narrator] Spring Data rest

2
00:00:01.070 --> 00:00:05.010
is a module for exposing Spring Data repositories

3
00:00:05.010 --> 00:00:07.090
as hypermedia-driven restful web services.

4
00:00:07.090 --> 00:00:09.080
And it's actually pretty amazing.

5
00:00:09.080 --> 00:00:11.090
Similar to Spring Data commons,

6
00:00:11.090 --> 00:00:14.040
which extrapolates the underlying backend

7
00:00:14.040 --> 00:00:17.040
data store services from a CrudRepository,

8
00:00:17.040 --> 00:00:20.090
Spring Data REST exposes those same repositories

9
00:00:20.090 --> 00:00:22.070
as web services with no coding

10
00:00:22.070 --> 00:00:25.010
or extra configuration.

11
00:00:25.010 --> 00:00:26.020
At application startup,

12
00:00:26.020 --> 00:00:28.080
Spring Data REST finds all the available

13
00:00:28.080 --> 00:00:30.050
Spring Data repositories,

14
00:00:30.050 --> 00:00:33.070
creates an endpoint that matches that entity name,

15
00:00:33.070 --> 00:00:35.090
appends an s to the endpoint,

16
00:00:35.090 --> 00:00:37.090
and exposes the operations

17
00:00:37.090 --> 00:00:43.000
as RESTful Resource APIs over HTTP.

18
00:00:43.000 --> 00:00:46.030
So what is the mapping between a RESTful API

19
00:00:46.030 --> 00:00:48.090
and its CrudRepository method.

20
00:00:48.090 --> 00:00:53.040
HTTP GET of the resource maps to CrudRepository findAll.

21
00:00:53.040 --> 00:00:57.040
The resource is what we call the endpoint

22
00:00:57.040 --> 00:01:00.050
and it usually has the same name as the entity.

23
00:01:00.050 --> 00:01:07.080
HTTP GET of the resource/&lt;id&gt; maps to find one.

24
00:01:07.080 --> 00:01:12.050
HTTP GET of the resource/search/querymethod

25
00:01:12.050 --> 00:01:15.020
maps to the query method.

26
00:01:15.020 --> 00:01:17.070
HTTP POST of the resource,

27
00:01:17.070 --> 00:01:19.080
which creates a new object,

28
00:01:19.080 --> 00:01:24.020
maps the CrudRepository save method.

29
00:01:24.020 --> 00:01:27.090
HTTP PUT or PATCH to the resource &lt;id&gt;,

30
00:01:27.090 --> 00:01:29.030
which updates the object,

31
00:01:29.030 --> 00:01:33.000
also maps to CrudRepository.save.

32
00:01:33.000 --> 00:01:36.000
HTTP DELETE of the resource &lt;id&gt;

33
00:01:36.000 --> 00:01:40.000
maps to CrudRepository.delete.

34
00:01:40.000 --> 00:01:44.030
In Chapter 601, Exercise Files,

35
00:01:44.030 --> 00:01:47.030
there is the University Application.

36
00:01:47.030 --> 00:01:51.070
It is exactly the same as Chapter 4's University Project,

37
00:01:51.070 --> 00:01:56.010
except I added the Spring Boot startup dependency

38
00:01:56.010 --> 00:02:01.050
and the pom.xml and then rebuilt the project.

39
00:02:01.050 --> 00:02:04.030
So selecting University Application,

40
00:02:04.030 --> 00:02:05.080
that's the main application.

41
00:02:05.080 --> 00:02:11.000
I run that and then I'll expand the console

42
00:02:11.000 --> 00:02:14.030
so we can see the messages that come up.

43
00:02:14.030 --> 00:02:16.060
Notice that we see new startup messages

44
00:02:16.060 --> 00:02:18.030
including resource mapping

45
00:02:18.030 --> 00:02:22.060
and Tomcat started on port(s) 8080.

46
00:02:22.060 --> 00:02:26.050
University is now a Tomcat-enabled web application

47
00:02:26.050 --> 00:02:30.030
ready to receive requests on port 8080.

48
00:02:30.030 --> 00:02:32.000
And now I'm gonna use postman

49
00:02:32.000 --> 00:02:36.060
to invoke the APIs of this application.

50
00:02:36.060 --> 00:02:38.060
So I'm going to use postman

51
00:02:38.060 --> 00:02:43.060
and then, as a helper, I'm going to import

52
00:02:43.060 --> 00:02:54.040
from 601 Exercise Files, REST.postman_collection.json.

53
00:02:54.040 --> 00:02:57.040
And this is going to help me exercise the APIs.

54
00:02:57.040 --> 00:03:02.090
First, we have a GET from local host 8080

55
00:03:02.090 --> 00:03:05.040
and Send that.

56
00:03:05.040 --> 00:03:10.020
And we see links to Department, Course, Staff

57
00:03:10.020 --> 00:03:14.000
and Student Resources, followed by a profile

58
00:03:14.000 --> 00:03:18.090
which is auto-generated API documentation.

59
00:03:18.090 --> 00:03:22.010
Now let's dig into the students endpoint

60
00:03:22.010 --> 00:03:25.010
and do a GET on students

61
00:03:25.010 --> 00:03:31.000
and we see we have Jane Doe, and her ID is 1.

62
00:03:31.000 --> 00:03:33.060
John Doe, ID of 2.

63
00:03:33.060 --> 00:03:36.090
Mike Smith and Ally Kim.

64
00:03:36.090 --> 00:03:38.050
Four students in the database

65
00:03:38.050 --> 00:03:42.030
and the ID is appended to the endpoint URL.

66
00:03:42.030 --> 00:03:46.010
Now let's say we want to create a new student.

67
00:03:46.010 --> 00:03:49.070
We'll use HTTP POST to the student's resource

68
00:03:49.070 --> 00:03:53.090
and the pay load of the POST has the json format

69
00:03:53.090 --> 00:03:55.090
of the student data.

70
00:03:55.090 --> 00:03:57.070
So we have a new student.

71
00:03:57.070 --> 00:03:59.030
The first name is Patrick.

72
00:03:59.030 --> 00:04:00.070
The last name is Joseph.

73
00:04:00.070 --> 00:04:02.080
He is full-time and he's 20.

74
00:04:02.080 --> 00:04:04.070
So we send that

75
00:04:04.070 --> 00:04:10.050
and we get a created HTTP 201 status code back.

76
00:04:10.050 --> 00:04:14.070
And let's just look at the body of the response.

77
00:04:14.070 --> 00:04:16.030
Just make that a little bigger.

78
00:04:16.030 --> 00:04:19.060
And we see that now Student / 5

79
00:04:19.060 --> 00:04:22.080
is the endpoint URL for Patrick Joseph.

80
00:04:22.080 --> 00:04:26.040
So let's get that, Student / 5.

81
00:04:26.040 --> 00:04:30.060
Doing a search on /5 gets Patrick Joseph back.

82
00:04:30.060 --> 00:04:32.090
Now, using PATCH,

83
00:04:32.090 --> 00:04:38.030
let's say we want to change his age to 22, so HTTP PATCH.

84
00:04:38.030 --> 00:04:44.040
Send that, and we see his age is 22 in the response.

85
00:04:44.040 --> 00:04:46.040
And even doing a GET on that response,

86
00:04:46.040 --> 00:04:50.030
we'll see that he is now 22.

87
00:04:50.030 --> 00:04:53.060
And now let's say we want to delete him altogether.

88
00:04:53.060 --> 00:04:57.090
So HTTP DELETE of Student 5.

89
00:04:57.090 --> 00:04:59.070
That's okay response back.

90
00:04:59.070 --> 00:05:03.080
There was no package body but it's still an okay status.

91
00:05:03.080 --> 00:05:04.060
And just to make sure,

92
00:05:04.060 --> 00:05:07.090
let's go back and try to get Student 5 again.

93
00:05:07.090 --> 00:05:09.060
And we get a 404 Not Found,

94
00:05:09.060 --> 00:05:11.090
which is what we expected.

95
00:05:11.090 --> 00:05:14.030
Now, there is the search resource

96
00:05:14.030 --> 00:05:18.010
off of the student resource endpoint.

97
00:05:18.010 --> 00:05:21.030
So here we see all of our methods,

98
00:05:21.030 --> 00:05:26.050
our query methods off of the search resource for student.

99
00:05:26.050 --> 00:05:33.080
So, if I do a search/find Top 3 by Order by Age descending,

100
00:05:33.080 --> 00:05:36.020
that will invoke that query method

101
00:05:36.020 --> 00:05:38.080
on the student repository,

102
00:05:38.080 --> 00:05:41.040
and we get that back.

103
00:05:41.040 --> 00:05:43.050
It's pretty cool, huh?

104
00:05:43.050 --> 00:05:47.040
So this is not perfect out of the box.

105
00:05:47.040 --> 00:05:51.040
We see that if I would try to invoke

106
00:05:51.040 --> 00:05:53.060
Find By Age Less Than,

107
00:05:53.060 --> 00:05:59.080
that would have a query parameter, but let's try it.

108
00:05:59.080 --> 00:06:03.050
And we cannot execute that without some configuration

109
00:06:03.050 --> 00:06:05.090
because there is no automatic mapping

110
00:06:05.090 --> 00:06:11.000
between the parameters of a URL search resource

111
00:06:11.000 --> 00:06:14.020
and a query method parameter.

112
00:06:14.020 --> 00:06:17.060
So either we would have to code that to annotate the method

113
00:06:17.060 --> 00:06:21.000
or whenever we run the application

114
00:06:21.000 --> 00:06:23.020
we have to say at parameters,

115
00:06:23.020 --> 00:06:27.030
and then we could say at the parameter on the URL.

116
00:06:27.030 --> 00:06:33.000
Another problem is with the name generated from the endpoint

117
00:06:33.000 --> 00:06:35.000
is not always the best.

118
00:06:35.000 --> 00:06:37.050
So, for example, the staff repository

119
00:06:37.050 --> 00:06:39.090
it creates an endpoint called Staffs,

120
00:06:39.090 --> 00:06:40.090
which is not proper English.

121
00:06:40.090 --> 00:06:42.090
There's no such word as Staffs.

122
00:06:42.090 --> 00:06:47.030
But that is configurable and we can change that.

123
00:06:47.030 --> 00:06:49.070
And, finally, this one looks really bad.

124
00:06:49.070 --> 00:06:53.010
Whenever I send Courses, it gives back an error message.

125
00:06:53.010 --> 00:06:55.030
Spring Data is complaining

126
00:06:55.030 --> 00:06:59.040
between the two different overloaded Find by Credits method

127
00:06:59.040 --> 00:07:01.070
and so since Spring Data REST doesn't know

128
00:07:01.070 --> 00:07:04.000
how to resolve these overloaded methods

129
00:07:04.000 --> 00:07:06.060
we get an error and so we'd have to do

130
00:07:06.060 --> 00:07:09.090
some annotation or code change to resolve that.

131
00:07:09.090 --> 00:07:13.080
This has been a super quick overview of Spring Data REST.

132
00:07:13.080 --> 00:07:15.070
A whole chapter of Spring Data REST

133
00:07:15.070 --> 00:07:17.020
can be found in my course

134
00:07:17.020 --> 00:07:21.000
Creating your First Spring Boot Microservice with JPA.

135
00:07:21.000 --> 00:07:22.000
And that will give you

136
00:07:22.000 --> 00:07:24.070
a little more in depth information on this.

137
00:07:24.070 --> 00:07:27.040
And, by the way, you want to come back

138
00:07:27.040 --> 00:07:29.070
and stop the application

139
00:07:29.070 --> 00:07:31.060
because otherwise it will run forever

140
00:07:31.060 --> 00:07:34.000
because it's a Tomcat web request.

