WEBVTT
1
00:00:00.005 --> 00:00:02.004
- [Instructor] Let's take a look at other data sources

2
00:00:02.004 --> 00:00:03.008
that are supported by Pivotal

3
00:00:03.008 --> 00:00:06.004
under the Spring Data umbrella project.

4
00:00:06.004 --> 00:00:09.006
They all support the repository abstraction

5
00:00:09.006 --> 00:00:13.002
and property expression queries found in Spring Data Commons

6
00:00:13.002 --> 00:00:17.002
as well as methods specific to the data source.

7
00:00:17.002 --> 00:00:19.007
First there is Spring Data GemFire.

8
00:00:19.007 --> 00:00:22.008
Spring Data GemFire is a project that makes it easier

9
00:00:22.008 --> 00:00:25.007
to build scalable Spring-enabled distributed

10
00:00:25.007 --> 00:00:28.009
data management applications that use GemFire.

11
00:00:28.009 --> 00:00:31.009
To learn more about GemFire, an in-memory data grid

12
00:00:31.009 --> 00:00:34.005
for real-time high performant applications,

13
00:00:34.005 --> 00:00:39.001
see the GemFire website under pivotal.io.

14
00:00:39.001 --> 00:00:41.006
Next is Spring Data Key Value.

15
00:00:41.006 --> 00:00:43.006
Spring Data Key Value is a project

16
00:00:43.006 --> 00:00:44.008
that provides infrastructure

17
00:00:44.008 --> 00:00:47.002
that implements Spring Data repositories

18
00:00:47.002 --> 00:00:51.002
on top of a key-value-based in-memory data store.

19
00:00:51.002 --> 00:00:53.001
It abstracts away from a particular

20
00:00:53.001 --> 00:00:56.000
key-value data source such as Redis.

21
00:00:56.000 --> 00:01:00.000
However if you need to tap into more of the Redis features

22
00:01:00.000 --> 00:01:02.003
Spring Data Redis is available.

23
00:01:02.003 --> 00:01:04.009
It provides high-end low-level abstractions

24
00:01:04.009 --> 00:01:08.002
to easily tap into Redis features.

25
00:01:08.002 --> 00:01:11.005
Redis is an in-memory data structure store

26
00:01:11.005 --> 00:01:15.001
that can be used as a database, cache, and message broker.

27
00:01:15.001 --> 00:01:18.008
Their website is under redis.io.

28
00:01:18.008 --> 00:01:21.005
And there is a Spring Data LDAP.

29
00:01:21.005 --> 00:01:24.008
Applications use the Lightweight Directory Access Protocol

30
00:01:24.008 --> 00:01:28.004
to access object directory mapping data sources.

31
00:01:28.004 --> 00:01:31.008
The data source could be Microsoft Active Directory,

32
00:01:31.008 --> 00:01:35.001
or Linux LDAP for example.

33
00:01:35.001 --> 00:01:39.000
The next module supports the Cassandra NoSQL database.

34
00:01:39.000 --> 00:01:41.002
Spring Data for Apache Cassandra

35
00:01:41.002 --> 00:01:43.007
offers Spring Data JPA developers

36
00:01:43.007 --> 00:01:46.003
an easier entry into the paradigm shift

37
00:01:46.003 --> 00:01:48.009
away from relational databases.

38
00:01:48.009 --> 00:01:52.002
Cassandra is a distributed database management system

39
00:01:52.002 --> 00:01:54.007
designed to handle large amounts of data

40
00:01:54.007 --> 00:01:56.006
across many servers.

41
00:01:56.006 --> 00:01:59.001
It supports data center spanning clusters

42
00:01:59.001 --> 00:02:01.004
with asynchronous replication.

43
00:02:01.004 --> 00:02:06.007
More can be found at the cassandra.apache.org site.

44
00:02:06.007 --> 00:02:09.006
Spring Data for Apache Solr provides easy configuration

45
00:02:09.006 --> 00:02:13.008
and access to the Apache Solr search server.

46
00:02:13.008 --> 00:02:16.005
Solr is a full-text search server

47
00:02:16.005 --> 00:02:19.003
that uses Lucene search library as its core

48
00:02:19.003 --> 00:02:24.003
for full-text indexing and search via RESTful JSON APIs.

49
00:02:24.003 --> 00:02:27.000
It provides distributed search and index replication

50
00:02:27.000 --> 00:02:31.002
that is designed to be scalable and fault tolerant.

51
00:02:31.002 --> 00:02:32.004
The list of data sources

52
00:02:32.004 --> 00:02:35.002
that leverage Spring Data continues to grow.

53
00:02:35.002 --> 00:02:39.005
On the projects.spring.io/spring-data page

54
00:02:39.005 --> 00:02:42.002
there is even a section called community modules.

55
00:02:42.002 --> 00:02:45.004
There are Spring Data solutions implemented by developers

56
00:02:45.004 --> 00:02:47.005
and industries in the community.

57
00:02:47.005 --> 00:02:49.008
The source and documentation for each module

58
00:02:49.008 --> 00:02:54.001
is hosted on GitHub, like Spring Data Aerospike.

59
00:02:54.001 --> 00:02:56.006
Others like Spring Data Couchbase

60
00:02:56.006 --> 00:03:00.007
have their own Spring Data page that links out to GitHub.

61
00:03:00.007 --> 00:03:02.006
Have you ever used Spring's

62
00:03:02.006 --> 00:03:05.006
JDBC template for relational databases?

63
00:03:05.006 --> 00:03:08.002
This convenient abstraction from JDBC

64
00:03:08.002 --> 00:03:10.001
lost some popularity over the years

65
00:03:10.001 --> 00:03:13.001
after the advent of ORM frameworks,

66
00:03:13.001 --> 00:03:15.006
but it is still available and has upgrades.

67
00:03:15.006 --> 00:03:19.007
It is now part of the Spring Data JDBC Extensions module,

68
00:03:19.007 --> 00:03:23.000
which includes advanced access to Oracle databases

69
00:03:23.000 --> 00:03:26.008
and even supports Querydsl search criteria.

70
00:03:26.008 --> 00:03:31.002
And finally there is deep support for Apache Hadoop.

71
00:03:31.002 --> 00:03:34.005
While not based on repository abstractions in Commons,

72
00:03:34.005 --> 00:03:36.005
Spring Data for Apache Hadoop

73
00:03:36.005 --> 00:03:39.005
does provide a rich set of features to interact with Hadoop

74
00:03:39.005 --> 00:03:41.004
as well as the Spring Integration

75
00:03:41.004 --> 00:03:43.002
and Spring Batch frameworks

76
00:03:43.002 --> 00:03:46.000
to address a wide range of use cases.

