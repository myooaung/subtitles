WEBVTT
1
00:00:00.050 --> 00:00:02.050
- [Instructor] The final topic I want to introduce

2
00:00:02.050 --> 00:00:05.000
before jumping into Spring Data JPA

3
00:00:05.000 --> 00:00:08.000
is the Java Persistence Query Language.

4
00:00:08.000 --> 00:00:11.020
We use JPQL to interact with entities

5
00:00:11.020 --> 00:00:13.070
and their persistent state.

6
00:00:13.070 --> 00:00:15.070
The queries are portable to any relational

7
00:00:15.070 --> 00:00:17.080
database management system.

8
00:00:17.080 --> 00:00:20.050
The syntax is similar to SQL,

9
00:00:20.050 --> 00:00:23.000
but it references entities and attributes

10
00:00:23.000 --> 00:00:25.040
instead of tables and columns.

11
00:00:25.040 --> 00:00:28.080
Let's compare them in a real world example.

12
00:00:28.080 --> 00:00:30.050
First in SQL.

13
00:00:30.050 --> 00:00:34.020
This SQL query looks up all the students in the database.

14
00:00:34.020 --> 00:00:35.090
We see that there are three students,

15
00:00:35.090 --> 00:00:39.020
Jane, Bob, and Patrick.

16
00:00:39.020 --> 00:00:42.020
This SQL query fetches Jane's details

17
00:00:42.020 --> 00:00:45.000
as well as the courses she's taking.

18
00:00:45.000 --> 00:00:47.000
It accesses all four tables

19
00:00:47.000 --> 00:00:50.010
to pull in seven columns of information.

20
00:00:50.010 --> 00:00:52.090
The first four are from the student table.

21
00:00:52.090 --> 00:00:55.060
Course_id is from the enrollment table.

22
00:00:55.060 --> 00:00:57.090
Course-name is from the course table

23
00:00:57.090 --> 00:01:00.090
and dept_name is from the department table.

24
00:01:00.090 --> 00:01:04.010
This query is pretty messy and difficult to maintain

25
00:01:04.010 --> 00:01:05.040
and we still need a lot of coding

26
00:01:05.040 --> 00:01:09.090
to map it from the physical model to the logical model.

27
00:01:09.090 --> 00:01:12.050
Now let's try that again in the logical world

28
00:01:12.050 --> 00:01:16.020
using the EntityManager and JPQL.

29
00:01:16.020 --> 00:01:18.010
I have a method called print jane

30
00:01:18.010 --> 00:01:21.090
which invokes entityManager.createQuery

31
00:01:21.090 --> 00:01:24.080
passing in the JPQL query,

32
00:01:24.080 --> 00:01:29.020
Select s from Student where s.name=jane.

33
00:01:29.020 --> 00:01:31.020
Get single result invokes the query

34
00:01:31.020 --> 00:01:33.090
and returns a student object,

35
00:01:33.090 --> 00:01:37.010
then we print out the student to the console.

36
00:01:37.010 --> 00:01:39.000
Much better don't you think?

37
00:01:39.000 --> 00:01:42.010
Not only does the query pull the student object,

38
00:01:42.010 --> 00:01:44.010
it also grabs all the courses

39
00:01:44.010 --> 00:01:47.020
because we set the fetch type equals eager.

40
00:01:47.020 --> 00:01:48.040
On top of that,

41
00:01:48.040 --> 00:01:52.060
each course eagerly fetches the department by default.

42
00:01:52.060 --> 00:01:55.040
A common mistake when running JPQL queries

43
00:01:55.040 --> 00:01:59.030
is accessing a collection which has not been loaded.

44
00:01:59.030 --> 00:02:03.010
So if I remove the fetch equals fetch type dot eager

45
00:02:03.010 --> 00:02:05.090
from the at many to one annotation

46
00:02:05.090 --> 00:02:08.080
and call two string on the jane object,

47
00:02:08.080 --> 00:02:13.020
I would get a lazy initialization exception.

48
00:02:13.020 --> 00:02:16.050
This has been a very quick introduction to JPQL.

49
00:02:16.050 --> 00:02:17.080
You can learn more about it

50
00:02:17.080 --> 00:02:20.050
in the Java Persistence Query Language section

51
00:02:20.050 --> 00:02:24.000
of the Oracle hosted Java EE 6 tutorial.

