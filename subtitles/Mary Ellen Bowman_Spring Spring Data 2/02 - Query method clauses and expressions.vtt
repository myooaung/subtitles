WEBVTT
1
00:00:00.050 --> 00:00:02.000
- [Narrator] Now that we've run some simple

2
00:00:02.000 --> 00:00:03.080
spring data query methods,

3
00:00:03.080 --> 00:00:06.020
let's kick it up a notch and look at some samples

4
00:00:06.020 --> 00:00:08.010
of query methods containing clauses

5
00:00:08.010 --> 00:00:11.030
and more complex property expressions.

6
00:00:11.030 --> 00:00:12.090
So we have in this view here

7
00:00:12.090 --> 00:00:16.070
using conditional expressions within a query method.

8
00:00:16.070 --> 00:00:22.000
findByFullTimeOrAgeLessThan and the parameters are

9
00:00:22.000 --> 00:00:23.080
passing in whether they're full or time or not

10
00:00:23.080 --> 00:00:25.080
and the maximum age.

11
00:00:25.080 --> 00:00:30.040
findByAttendeeFirstNameAndAttendeeLastName

12
00:00:30.040 --> 00:00:32.070
so the parameters are first named passed in

13
00:00:32.070 --> 00:00:35.040
and last name passed in.

14
00:00:35.040 --> 00:00:38.090
And it's also good to know that findByAttendee

15
00:00:38.090 --> 00:00:40.040
passing in the person object

16
00:00:40.040 --> 00:00:44.010
yields the same list of students.

17
00:00:44.010 --> 00:00:48.050
Next we have query methods using expressions with operators.

18
00:00:48.050 --> 00:00:52.060
Let's look at findByAgeGreaterThan minimumAge.

19
00:00:52.060 --> 00:00:56.030
So we want to find students older than a certain age.

20
00:00:56.030 --> 00:01:01.020
findByFullTimeOrAgeLessThan so we pass in

21
00:01:01.020 --> 00:01:04.070
the fullTime status and the maximum age.

22
00:01:04.070 --> 00:01:09.080
findByAttendeeLastNameIgnoreCase so we're passing in

23
00:01:09.080 --> 00:01:13.010
the last name and it's not case sensitive.

24
00:01:13.010 --> 00:01:18.030
And then a wild card search findByAttendeeLastNameLike

25
00:01:18.030 --> 00:01:20.070
and so we'll pass in a likeString.

26
00:01:20.070 --> 00:01:23.030
And we'll look at that in an example.

27
00:01:23.030 --> 00:01:25.010
Now these are getting a little more complicated

28
00:01:25.010 --> 00:01:27.010
so I put a comment above each method

29
00:01:27.010 --> 00:01:29.060
to understand what it's trying to accomplish.

30
00:01:29.060 --> 00:01:33.080
To actually apply limiting and ordering of results.

31
00:01:33.080 --> 00:01:36.060
Find highest student in the alphabet.

32
00:01:36.060 --> 00:01:44.090
So findFirstByOrderByAttendeeLastNameAsc().

33
00:01:44.090 --> 00:01:46.080
Find the oldest student.

34
00:01:46.080 --> 00:01:52.090
findTopByOrderByAgeDec().

35
00:01:52.090 --> 00:01:56.000
And then find the 3 oldest students.

36
00:01:56.000 --> 00:02:02.080
findTop3ByOrderByAgeDesc().

37
00:02:02.080 --> 00:02:05.050
There are many more options for you to choose from.

38
00:02:05.050 --> 00:02:08.040
Refer to the spring data reference Appendix C:

39
00:02:08.040 --> 00:02:11.090
Repository query keywords to form even more

40
00:02:11.090 --> 00:02:15.040
query combinations.

41
00:02:15.040 --> 00:02:18.060
Many things to choose from there.

42
00:02:18.060 --> 00:02:20.010
Let's run these.

43
00:02:20.010 --> 00:02:23.060
I'm back in my QueryDemo class and I'm going to

44
00:02:23.060 --> 00:02:31.010
invoke the intermediateQueryExamples method.

45
00:02:31.010 --> 00:02:35.040
So first I'm going to find the student by last name

46
00:02:35.040 --> 00:02:37.070
and traverse the entities.

47
00:02:37.070 --> 00:02:41.050
In this case I'm passing the first and the last name.

48
00:02:41.050 --> 00:02:44.040
As separate parameters.

49
00:02:44.040 --> 00:02:48.060
So I have Jane and Doe being passed in.

50
00:02:48.060 --> 00:02:52.050
And here it found Jane Doe.

51
00:02:52.050 --> 00:02:54.050
And I just wanted to show you how if you

52
00:02:54.050 --> 00:02:58.040
instantiate a person object and construct Jane and Doe

53
00:02:58.040 --> 00:03:01.070
that way it will yield the same result.

54
00:03:01.070 --> 00:03:04.010
We still get studentId 1.

55
00:03:04.010 --> 00:03:07.020
Now we want to find students older than 19.

56
00:03:07.020 --> 00:03:10.040
findByAgeGreaterThan(19).

57
00:03:10.040 --> 00:03:13.030
And we have John Doe and Jane Doe.

58
00:03:13.030 --> 00:03:16.090
Now we want to find students that are under 19.

59
00:03:16.090 --> 00:03:20.030
findByAgeLessThan(19).

60
00:03:20.030 --> 00:03:23.040
And we have Mike Smith.

61
00:03:23.040 --> 00:03:26.060
Now we want to find students with last name Doe

62
00:03:26.060 --> 00:03:29.080
and it's not case sensitive so I'm actually passing

63
00:03:29.080 --> 00:03:31.050
a capital D on Doe,

64
00:03:31.050 --> 00:03:37.070
even though we know in the database it's a lowercase D.

65
00:03:37.070 --> 00:03:40.080
And so we find Jane and John Doe.

66
00:03:40.080 --> 00:03:44.050
Now we want to find students with I in the last name.

67
00:03:44.050 --> 00:03:46.070
Let me scroll up a little bit.

68
00:03:46.070 --> 00:03:52.030
Wildcards are a % so I have %i%.

69
00:03:52.030 --> 00:03:55.030
So if anybody has the letter i in their last name

70
00:03:55.030 --> 00:03:58.040
we'll find it.

71
00:03:58.040 --> 00:04:02.080
And it found Mike Smith and Ally Kim.

72
00:04:02.080 --> 00:04:06.000
Now let's find the first student in the alphabet.

73
00:04:06.000 --> 00:04:08.010
With this really long method signature

74
00:04:08.010 --> 00:04:14.070
findFirstByOrderByAttendeeLastNameAsc().

75
00:04:14.070 --> 00:04:17.000
We find that that's Jane Doe.

76
00:04:17.000 --> 00:04:19.020
And find the oldest student.

77
00:04:19.020 --> 00:04:25.020
findTopByOrderByAgeDesc().

78
00:04:25.020 --> 00:04:29.000
And lastly find the three oldest students.

79
00:04:29.000 --> 00:04:34.010
findTop3ByOrderByAgeDesc().

80
00:04:34.010 --> 00:04:37.000
And that's John, Jane and Ally.

