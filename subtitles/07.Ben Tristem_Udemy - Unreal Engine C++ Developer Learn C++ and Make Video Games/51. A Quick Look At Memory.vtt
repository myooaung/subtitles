WEBVTT
1
00:00:04.170 --> 00:00:06.030
Hello everybody and welcome back.

2
00:00:06.030 --> 00:00:09.800
In this lecture I'd like to have a quick look at memory now do forgive me.

3
00:00:09.830 --> 00:00:13.290
Because we are going to have to gloss over quite a bit.

4
00:00:13.290 --> 00:00:18.750
However just to give you a base understanding that we can improve on in time and then you will start

5
00:00:18.750 --> 00:00:21.640
to understand why things are done in a certain way.

6
00:00:21.750 --> 00:00:26.550
When we get to talking about the stack in the heap those sorts of things will start to become much more

7
00:00:26.550 --> 00:00:27.550
clear.

8
00:00:27.570 --> 00:00:32.060
So in this lecture we're going to talk about some primitive types here on a typical machine that you're

9
00:00:32.070 --> 00:00:33.660
likely to work on.

10
00:00:33.840 --> 00:00:40.020
So we'll start within 32 now in 32 will be a 32 bit integer whatever type of machine it's on and we'll

11
00:00:40.020 --> 00:00:43.530
take up the equivalent of four points of memory.

12
00:00:43.530 --> 00:00:49.730
Now this is because 32 bits Well there are eight bits in one byte therefore four bytes.

13
00:00:49.860 --> 00:00:52.080
Now memory itself has to be addressed.

14
00:00:52.080 --> 00:00:59.340
One bytes at a time which is why with a boolean even though it only takes up one bit it actually takes

15
00:00:59.340 --> 00:01:01.280
up a whole bytes of memory.

16
00:01:01.290 --> 00:01:06.240
Now there are some more advanced things you can do later on to store multiple balls in there but that's

17
00:01:06.240 --> 00:01:11.050
a bit more advanced than this course is going to get into the next one.

18
00:01:11.070 --> 00:01:17.010
Again something we've already played with is a character and a character is 1 bytes per character in

19
00:01:17.010 --> 00:01:17.430
general.

20
00:01:18.090 --> 00:01:23.130
Now when you make characters into a string and there are multiple ways that you can do that been the

21
00:01:23.130 --> 00:01:30.420
way that we've learnt so far we basically have a string that is a series of characters with a null terminator

22
00:01:30.420 --> 00:01:31.560
at the end.

23
00:01:31.590 --> 00:01:38.190
So if you have the word high that would be H I and the null terminator so it would be three bytes in

24
00:01:38.190 --> 00:01:39.060
total.

25
00:01:39.060 --> 00:01:43.680
And when you create a string like that it needs continuous memory space to do it.

26
00:01:43.680 --> 00:01:47.970
You can't dot it all over the place and that will become a little clearer when we look at a table in

27
00:01:47.970 --> 00:01:49.800
a few moments a floats.

28
00:01:49.800 --> 00:01:51.950
Now we haven't done floats yet.

29
00:01:51.990 --> 00:01:56.030
Now they are a way of representing scientific notation decimal places.

30
00:01:56.160 --> 00:02:03.060
A floats will be 32 bits and therefore again taking up four bytes of memory Okay so let's have a look

31
00:02:03.060 --> 00:02:04.200
at examples here.

32
00:02:04.560 --> 00:02:06.110
So we have memory example.

33
00:02:06.120 --> 00:02:12.990
This whole table here represents bytes of memory and we can see here it counts up from zero and then

34
00:02:12.990 --> 00:02:14.360
it doesn't get to 10.

35
00:02:14.400 --> 00:02:23.640
It goes zero a zero b c the E F this is called hexadecimal counting its base 16 and it's very useful

36
00:02:23.850 --> 00:02:26.710
and that's how memory addresses are typically displayed.

37
00:02:26.730 --> 00:02:31.620
You've probably had a blue screen of death in the past which has a memory address in it.

38
00:02:31.620 --> 00:02:33.530
Now here we see one F..

39
00:02:33.660 --> 00:02:37.200
That's what this area down at the bottom right represents.

40
00:02:37.200 --> 00:02:41.250
So this is an example of that bottom right area.

41
00:02:41.340 --> 00:02:41.660
Okay.

42
00:02:41.690 --> 00:02:45.260
So what do we have in our first four bytes of memory.

43
00:02:45.270 --> 00:02:50.760
Well we have an integer the number eight but it isn't quite as simple as that what we're using here

44
00:02:50.760 --> 00:02:56.550
is something called a little Indian or little Indian ness and it's a way of representing the contents

45
00:02:56.550 --> 00:03:02.460
of memory if it was little Indian it would be with the eights at the other end and it would fill up

46
00:03:02.520 --> 00:03:05.120
this way instead of going the other way.

47
00:03:05.130 --> 00:03:09.690
Now I think it's just easier to read this way and I've linked an article in the resources so you can

48
00:03:09.690 --> 00:03:14.910
read a bit more about Indian this it won't really matter in this course but it's something that you

49
00:03:14.910 --> 00:03:21.510
might want to look at in more depth then we've got a boolean here is taking out one bytes of memory

50
00:03:21.840 --> 00:03:26.100
and it's set to TRUE AND THEN WE GOT ANOTHER integer down here.

51
00:03:26.110 --> 00:03:26.690
Mm hmm.

52
00:03:26.900 --> 00:03:28.640
I wonder what that is.

53
00:03:28.640 --> 00:03:34.620
Now I'm not gonna tell you what that is right now because that's gonna be a bonus question in our challenge.

54
00:03:34.670 --> 00:03:39.950
So looking at this table in front of us here what I'd like you to do is decide where would we put our

55
00:03:39.950 --> 00:03:42.070
string cakes.

56
00:03:42.170 --> 00:03:43.520
Where could we fit it in.

57
00:03:43.520 --> 00:03:47.420
Remember that strings require a continuous space of memory.

58
00:03:47.630 --> 00:03:51.680
And for our bonus question What is this integer.

59
00:03:51.710 --> 00:03:53.960
Remember this is big Indian.

60
00:03:53.960 --> 00:03:57.310
So we're mainly focused on these two here.

61
00:03:57.400 --> 00:03:59.200
Pause video now and give us a go

62
00:04:02.380 --> 00:04:03.910
Okay everybody Welcome back.

63
00:04:03.910 --> 00:04:05.970
So where do we put the word cakes.

64
00:04:05.980 --> 00:04:09.780
Now some of you may have thought C A K E S.

65
00:04:09.910 --> 00:04:14.170
Unfortunately we don't have any space for on null terminator.

66
00:04:14.170 --> 00:04:17.720
Others might have put it here where 14 is or somewhere else.

67
00:04:17.770 --> 00:04:22.870
Now typically the memory would be filled up from where there is a continuous space that it would fit.

68
00:04:22.900 --> 00:04:29.740
So here we have CSKA s and our null terminator remembering it taking up 6 bytes of memory because of

69
00:04:29.740 --> 00:04:30.910
that null terminator.

70
00:04:31.690 --> 00:04:34.000
Okay so what about this number here.

71
00:04:34.000 --> 00:04:37.660
Well the answer's kind of in front of you anyway with this table.

72
00:04:37.690 --> 00:04:46.250
So if we count from zero and we get to zero f here and then go over to ten and ten represents sixteen.

73
00:04:46.450 --> 00:04:51.370
Well when we get to 1 F and go to 20 we're talking about 32.

74
00:04:51.370 --> 00:04:55.670
So this here is the integer 32.

75
00:04:55.690 --> 00:05:00.340
How many if you go that please share whether you got that over in the discussions and I'll see you all

76
00:05:00.610 --> 00:05:01.630
in the next lecture.
