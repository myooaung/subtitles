WEBVTT
1
00:00:05.130 --> 00:00:05.350
OK.

2
00:00:05.530 --> 00:00:10.820
So let's start with the first couple of functions that we can call we can call the ADD function and

3
00:00:10.820 --> 00:00:16.280
the in-place function that will both add elements to the end of our array, which is exactly what we

4
00:00:16.280 --> 00:00:16.700
want.

5
00:00:17.300 --> 00:00:23.480
Now, in terms of F strings themselves, we will use emplace because as it states here, when we're

6
00:00:23.480 --> 00:00:29.990
creating and filling array, this is the T arrays, part of the unreal engine for Dock's when we're

7
00:00:29.990 --> 00:00:31.370
using F strings.

8
00:00:31.730 --> 00:00:34.010
It's better to use in place.

9
00:00:34.070 --> 00:00:34.480
Here we go.

10
00:00:34.490 --> 00:00:41.600
In general, in place is preferable to add, but for other types, data adding would be absolutely fine.

11
00:00:42.110 --> 00:00:45.020
A couple more that you could use in this situation.

12
00:00:45.020 --> 00:00:47.900
We've got the remove which will remove matching elements.

13
00:00:47.900 --> 00:00:54.020
So if we pass a word into there like cakes and cakes existed in that array, it would remove it from

14
00:00:54.020 --> 00:00:54.470
the array.

15
00:00:54.860 --> 00:00:58.130
In fact, it would remove all instances of cakes.

16
00:00:58.200 --> 00:01:00.620
So who was in that array multiple times?

17
00:01:00.980 --> 00:01:03.110
Then it would remove multiple entries.

18
00:01:03.680 --> 00:01:08.840
Now, the issue with removing anything from our array and why we're not going to approach it in this

19
00:01:08.840 --> 00:01:14.930
particular section, you'd have to make sure you decrement after you remove something from the array.

20
00:01:15.350 --> 00:01:20.570
And of course, if you remove more than one thing, like in the example given before, if there were

21
00:01:20.570 --> 00:01:24.470
multiple cakes in the array, you wouldn't know what's decrement by.

22
00:01:24.470 --> 00:01:26.090
You'd have to run additional checks.

23
00:01:26.330 --> 00:01:32.960
It can get very messy very quickly and you can just taste the off by one error or even off by more than

24
00:01:32.960 --> 00:01:33.260
one.

25
00:01:34.280 --> 00:01:36.290
There's also another option with remove.

26
00:01:36.320 --> 00:01:43.220
We can remove an element at a particular index if we place that particular index within those parentheses.

27
00:01:43.610 --> 00:01:46.230
Now, there are many more functions we can call on a T array.

28
00:01:46.430 --> 00:01:49.490
And you can look at that and the Unreal Engine four documents.

29
00:01:49.760 --> 00:01:51.830
And I've linked those in the resources.

30
00:01:53.130 --> 00:02:01.350
OK, so over in Veer's code, we can start adding these words that pass this test to a new array.

31
00:02:01.560 --> 00:02:03.000
So we need to do a couple of things here.

32
00:02:03.000 --> 00:02:05.070
We need to create a new array.

33
00:02:05.340 --> 00:02:08.550
I'm going to do that above the for loop that we've got here.

34
00:02:08.580 --> 00:02:10.020
So couple of spaces.

35
00:02:10.410 --> 00:02:12.610
Let's go ahead and make Turei.

36
00:02:13.840 --> 00:02:17.800
There's going to have F strings, and it's just like the ones we've made so far.

37
00:02:18.220 --> 00:02:19.300
And what shall we call it?

38
00:02:19.350 --> 00:02:20.980
Let's call it valid words.

39
00:02:21.010 --> 00:02:24.070
That's going to be what's going to be returned from it.

40
00:02:24.730 --> 00:02:26.380
And, of course, we need our semicolon.

41
00:02:27.070 --> 00:02:28.030
A couple of things here.

42
00:02:28.480 --> 00:02:34.240
It would probably be best if this was less than this is more of a safeguard to make sure that if we're

43
00:02:34.240 --> 00:02:39.640
passing something else into how many times we're incrementing it or indeed we incrementing it more than

44
00:02:39.640 --> 00:02:41.440
once, we don't get caught out.

45
00:02:41.880 --> 00:02:44.080
A couple of white spacing issues here.

46
00:02:44.080 --> 00:02:46.390
So let's make sure that this is a bit more readable.

47
00:02:46.860 --> 00:02:49.030
And let's go into the statement itself.

48
00:02:49.060 --> 00:02:49.780
I'm going to comment.

49
00:02:49.840 --> 00:02:53.260
Ounce, that's printing of the words themselves.

50
00:02:53.590 --> 00:03:00.430
But what we can to do this time is we're going to add each individual word to this new valid words list

51
00:03:00.430 --> 00:03:01.300
that we've created.

52
00:03:01.900 --> 00:03:04.260
So we need to do something to the valid words lists.

53
00:03:04.290 --> 00:03:05.600
So we bring up the valid words.

54
00:03:05.620 --> 00:03:08.430
We go dots and you may reach for add.

55
00:03:08.650 --> 00:03:09.490
It would work.

56
00:03:09.610 --> 00:03:11.470
But remember what we were talking about earlier.

57
00:03:11.470 --> 00:03:12.670
We got it in place.

58
00:03:13.180 --> 00:03:15.130
And then we need to pass something into that.

59
00:03:15.700 --> 00:03:19.180
And what we're currently looking at is the words array.

60
00:03:19.780 --> 00:03:23.230
And we're currently only focused on the index of that particular array.

61
00:03:23.740 --> 00:03:28.900
So what we will find this will do is we create a new valid words array, which is currently empty at

62
00:03:28.900 --> 00:03:29.530
this point.

63
00:03:29.830 --> 00:03:32.920
And then it's going to go through the first 10 elements of the words array.

64
00:03:33.390 --> 00:03:36.040
And it's the length of the word being tested.

65
00:03:36.070 --> 00:03:41.380
The one at whichever index we're currently at is greater than or equal to four characters.

66
00:03:41.390 --> 00:03:47.770
The length or less than or equal to eighth is going to add that word to our new valid words array.

67
00:03:48.250 --> 00:03:50.320
Now, we're not actually doing anything at the moment.

68
00:03:50.360 --> 00:03:56.980
So what we could do after this is just print out that list of words again just to make sure it's working.

69
00:03:57.370 --> 00:04:02.550
So we can simply do that by going for 32.

70
00:04:02.950 --> 00:04:05.680
And once again, this is going to be an index will be going through.

71
00:04:05.890 --> 00:04:10.060
But this time we'll be going through the valid words that we've just created.

72
00:04:10.840 --> 00:04:16.840
And remember, when we're talking about the size of this particular array, we're going to use the NUM

73
00:04:16.840 --> 00:04:17.800
function on it.

74
00:04:18.700 --> 00:04:20.590
And now for what we're actually going to do?

75
00:04:20.590 --> 00:04:28.480
Well, we're going to print line, text macro and then we're going to use the format specified percentage.

76
00:04:28.630 --> 00:04:30.680
S I'm going to put a full stop on the end of that.

77
00:04:31.300 --> 00:04:32.590
And then a comma.

78
00:04:33.130 --> 00:04:35.110
What what are we going to print out here?

79
00:04:35.140 --> 00:04:36.790
Well, we need the asterisk.

80
00:04:37.030 --> 00:04:42.190
As we've learned before, and then we're going to do valid words and whatevers at the particular index

81
00:04:42.190 --> 00:04:42.850
we're at.

82
00:04:43.480 --> 00:04:44.920
That should be all good to go.

83
00:04:44.950 --> 00:04:46.240
Let's make sure it's saved.

84
00:04:47.040 --> 00:04:47.330
Really?

85
00:04:48.220 --> 00:04:50.950
And over in the bowl cal game that's compile.

86
00:04:52.660 --> 00:04:55.100
And we've compiled complete letterhead and play our game.

87
00:04:55.700 --> 00:04:59.840
Excellent, so what we have here is one, two, three, four, five, six, seven.

88
00:05:00.260 --> 00:05:05.630
And what we can do is go ahead and open up our list of words and see what it has stripped.

89
00:05:05.900 --> 00:05:08.990
Obviously, it hasn't stripped anything to do with Icer grams at the moment.

90
00:05:09.200 --> 00:05:10.790
There's going to be parts of your challenge.

91
00:05:12.860 --> 00:05:18.470
If we have a look at the hit and words list, we'll find that the first 10, which I think is that many

92
00:05:18.470 --> 00:05:21.850
one, two, three, four, five, six, seven, eight, nine, 10.

93
00:05:22.190 --> 00:05:22.490
Brilliant.

94
00:05:22.910 --> 00:05:25.940
So we've got the letter A, which has been stripped.

95
00:05:25.970 --> 00:05:27.530
We've got act which has been stripped.

96
00:05:27.560 --> 00:05:32.930
And I think a cording that's those nine characters, plus the null Terminator, if you remember that

97
00:05:32.930 --> 00:05:34.160
the backslash zero.

98
00:05:34.490 --> 00:05:36.500
We talked about much earlier in the section.

99
00:05:37.150 --> 00:05:40.740
OK, so before we go ahead and do our challenge, what have we done here?

100
00:05:40.760 --> 00:05:48.290
Well, we've created a new array and then we've iterated through our words array, picking out words

101
00:05:48.290 --> 00:05:49.490
of a certain length.

102
00:05:49.850 --> 00:05:56.300
If they match those conditions, we add each individual word to our new valid words list and it will

103
00:05:56.300 --> 00:05:57.380
increase in size.

104
00:05:58.160 --> 00:06:01.250
And then afterwards down here, this is just really checking code.

105
00:06:01.580 --> 00:06:06.750
And we're printing out each word that we've picked from our words array.

106
00:06:07.220 --> 00:06:08.780
In this case, we know it matches.

107
00:06:08.840 --> 00:06:10.820
We've manually checked it as well.

108
00:06:11.410 --> 00:06:14.000
And armed with that knowledge, it's time for your challenge.

109
00:06:15.020 --> 00:06:19.060
OK, so your challenge is to go ahead and create a valid, hidden wordlist.

110
00:06:19.430 --> 00:06:24.200
So create a new function called Get Valid Words, muffing as a good name for this function.

111
00:06:24.440 --> 00:06:26.780
It's going to take in the words array.

112
00:06:27.170 --> 00:06:29.510
Now put all of our checking code in there.

113
00:06:29.840 --> 00:06:37.520
So in addition to the right length, which is between four and eight characters, check for Icer Grams

114
00:06:37.580 --> 00:06:38.150
as well.

115
00:06:38.810 --> 00:06:40.460
Now, you can do this in a couple of ways.

116
00:06:40.460 --> 00:06:49.400
You could use a nested if or you could use the and logical operator that we've recently covered and

117
00:06:49.400 --> 00:06:52.180
do remember the function needs to return something.

118
00:06:52.940 --> 00:06:55.430
So pulls the video now and give Vassago.

119
00:06:57.800 --> 00:06:59.180
OK, everybody, welcome back.

120
00:06:59.240 --> 00:07:02.810
Let's go ahead now and create a valid hided words list.

121
00:07:03.970 --> 00:07:05.410
Okay, everybody, welcome back.

122
00:07:05.440 --> 00:07:06.640
Let's go ahead, first of all.

123
00:07:06.670 --> 00:07:11.560
I'm going to go to my head to file and declare my new function.

124
00:07:11.980 --> 00:07:14.470
OK, so let's think about, first of all, what it's going to return.

125
00:07:14.480 --> 00:07:19.000
It's going to return a tier array of F strings for the moment.

126
00:07:20.800 --> 00:07:22.120
What are we going to call it?

127
00:07:22.150 --> 00:07:27.010
Well, we already know it's going to be called get valid words.

128
00:07:28.050 --> 00:07:33.700
Now, we already know as well that we're going to pass into a two tier raid that's gone and TANF strings.

129
00:07:35.310 --> 00:07:40.980
And before we go any further, we also know that this is going to be a concert function, even though

130
00:07:40.980 --> 00:07:43.680
it's going to influence the hidden world later on.

131
00:07:43.920 --> 00:07:49.380
It's not going to change the hit and word itself so we can live it as a concert function.

132
00:07:49.680 --> 00:07:53.250
And that protects us from changing any of those three as well.

133
00:07:53.830 --> 00:07:57.180
Hey, let's save that file and go into the implementation.

134
00:07:57.750 --> 00:08:02.100
Now, we're basically going to use this chunk of code here further down.

135
00:08:02.430 --> 00:08:06.480
I'm going to cut some paste in and just comment it out for the moment.

136
00:08:06.870 --> 00:08:07.740
Lower down.

137
00:08:08.220 --> 00:08:09.660
Then I've got it for reference.

138
00:08:09.720 --> 00:08:16.750
And if I need to go back to it for ever reason, I can do now here I can also highlights everything.

139
00:08:16.770 --> 00:08:18.930
Control and forward slash to comment.

140
00:08:19.020 --> 00:08:20.010
All of that out.

141
00:08:21.150 --> 00:08:24.170
Okay, so first of all, we need to say what it's returning wishes.

142
00:08:24.180 --> 00:08:25.010
It's here, Ray.

143
00:08:25.350 --> 00:08:26.950
It's going to be F strings.

144
00:08:26.970 --> 00:08:27.630
There we go.

145
00:08:28.050 --> 00:08:30.080
And this is where we need.

146
00:08:30.090 --> 00:08:30.900
Are you.

147
00:08:30.990 --> 00:08:37.560
Ball kow cartridge followed by our get valid words.

148
00:08:38.070 --> 00:08:42.210
Another T array containing F strings.

149
00:08:42.840 --> 00:08:47.430
Now, the name that we give, the variable that we're going to use in here does not have to be the same

150
00:08:47.430 --> 00:08:48.330
as everything else.

151
00:08:48.420 --> 00:08:50.790
And I've been thinking about what to call it.

152
00:08:51.120 --> 00:08:57.840
And I think calling it a word list is ideal, because then when we're in the gubbins itself, we definitely

153
00:08:57.840 --> 00:09:00.180
know we're dealing with the list of words.

154
00:09:01.170 --> 00:09:06.300
Now, the other thing to think about here and why it's complaining at the moment is we haven't set it

155
00:09:06.300 --> 00:09:07.230
as a contest.

156
00:09:07.890 --> 00:09:10.200
And then we need our curly braces.

157
00:09:10.200 --> 00:09:12.180
So let's go ahead and put those in as well.

158
00:09:12.780 --> 00:09:16.230
Now, for some of this, I think we can just pick it up and put it straight in.

159
00:09:16.560 --> 00:09:18.090
We've got all valid words.

160
00:09:18.270 --> 00:09:18.690
Yes.

161
00:09:19.110 --> 00:09:21.580
All of this here is absolutely fine.

162
00:09:21.600 --> 00:09:24.840
So let's go ahead and grab that and move it up and in.

163
00:09:25.140 --> 00:09:28.590
Now, there is another way that you can do this other than just cutting and pasting.

164
00:09:28.860 --> 00:09:32.430
We can hold down Olt and the up or down arrows.

165
00:09:32.490 --> 00:09:35.640
That's really useful for moving big blocks of code around.

166
00:09:36.120 --> 00:09:37.340
Just a small amount might.

167
00:09:37.450 --> 00:09:38.670
That's if we need to.

168
00:09:39.180 --> 00:09:41.160
And I shall remove the common thing from there.

169
00:09:41.190 --> 00:09:42.780
I'm also going to remove this line.

170
00:09:42.780 --> 00:09:43.020
Will we.

171
00:09:43.020 --> 00:09:44.880
Just printing the words out.

172
00:09:44.910 --> 00:09:46.230
That makes no sense.

173
00:09:46.800 --> 00:09:51.840
And the other thing we need to change here, and this is one of the dangerous things about copying and

174
00:09:51.840 --> 00:09:52.560
pasting code.

175
00:09:52.960 --> 00:09:54.090
It's very tense in salvors.

176
00:09:54.090 --> 00:09:56.340
Just one more thing to change is another thing to change.

177
00:09:57.060 --> 00:10:02.880
In general, if we hadn't just been handling this, I would have just typed it out again.

178
00:10:03.300 --> 00:10:04.890
We're not going to the number 10.

179
00:10:04.990 --> 00:10:09.330
We go into the end of the words list of words array.

180
00:10:09.330 --> 00:10:12.980
So we're going to go words dot num for the size of that.

181
00:10:13.050 --> 00:10:13.410
Right.

182
00:10:14.000 --> 00:10:14.450
Okay.

183
00:10:15.270 --> 00:10:17.310
Now, I've not spotted it just yet.

184
00:10:17.340 --> 00:10:24.420
While some deep in the code, I've just focused on the word words rather than the word, lest I do correct

185
00:10:24.420 --> 00:10:25.560
this at the end.

186
00:10:25.830 --> 00:10:27.930
For those of you who have already spotted it.

187
00:10:28.890 --> 00:10:30.930
So we're going to go through the entire array.

188
00:10:30.960 --> 00:10:32.730
We can to add it to valid words.

189
00:10:32.790 --> 00:10:33.990
Sounds good to me.

190
00:10:34.320 --> 00:10:38.790
And of course, before we do anything else, we're going to have to make sure we output something here.

191
00:10:39.160 --> 00:10:41.430
We've got a bit of an indentation problems.

192
00:10:41.490 --> 00:10:41.850
There we go.

193
00:10:41.880 --> 00:10:43.410
So we've started valid words.

194
00:10:43.770 --> 00:10:44.810
Also, we're going to return.

195
00:10:44.840 --> 00:10:47.860
Well, we're going to return lowercase r.

196
00:10:47.910 --> 00:10:50.700
Return valid words.

197
00:10:52.310 --> 00:10:52.790
Excellent.

198
00:10:53.300 --> 00:10:58.880
The only thing we haven't done yet is we haven't called that at all, so let's delete the comments at

199
00:10:58.880 --> 00:10:59.450
the bottom.

200
00:10:59.600 --> 00:11:01.490
They're no longer useful.

201
00:11:02.330 --> 00:11:06.860
And let's go ahead and call, get valid words and pass the words into it.

202
00:11:07.250 --> 00:11:08.870
Now, where are we going to do this?

203
00:11:08.900 --> 00:11:14.240
I think at the very beginning makes a lot of sense before we even set up the game.

204
00:11:14.450 --> 00:11:15.540
I think that's important.

205
00:11:15.710 --> 00:11:21.170
So let's call gets a valid word and pass into it the words.

206
00:11:21.500 --> 00:11:22.310
Now, remember.

207
00:11:23.320 --> 00:11:28.300
Our code is fully aware of words because we've included it in the header file at the very top.

208
00:11:28.840 --> 00:11:30.050
Remember our semicolon?

209
00:11:30.100 --> 00:11:31.810
So if past words into there.

210
00:11:32.350 --> 00:11:33.070
Now what?

211
00:11:33.100 --> 00:11:34.690
We will get out of this.

212
00:11:34.720 --> 00:11:37.420
So it will be words will be passed into here.

213
00:11:37.720 --> 00:11:44.410
And what gets valid words essentially becomes is our new word list.

214
00:11:44.830 --> 00:11:48.250
So immediately underneath we've got the number of possible words.

215
00:11:48.340 --> 00:11:49.120
Is this.

216
00:11:49.480 --> 00:11:52.320
And I'm going to say the number of valid words.

217
00:11:52.330 --> 00:11:55.240
I think it's great to have these checks in place.

218
00:11:55.690 --> 00:12:05.950
So text number of valid words is and then the format specify a full stop at the end.

219
00:12:06.700 --> 00:12:11.320
And then we come up to a stumbling block because we can't just type in here.

220
00:12:11.950 --> 00:12:14.470
Valid words that would be out of scope.

221
00:12:14.710 --> 00:12:20.140
We could create yet another tier array here if we wanted to, or we can go ahead and grab this because

222
00:12:20.140 --> 00:12:25.720
it is essentially a a c a right and proper in here with dot num on the end.

223
00:12:26.020 --> 00:12:27.310
That would also work.

224
00:12:27.370 --> 00:12:30.920
Now it depends what we want to do with it later on.

225
00:12:30.940 --> 00:12:34.450
But since we just want to output it, this would be absolutely fine.

226
00:12:35.020 --> 00:12:40.480
Later on I can see us running it up here and then assigning it to the hidden web.

227
00:12:40.510 --> 00:12:45.580
But just to get those valid number of words out and we need our semicolon at the end.

228
00:12:45.880 --> 00:12:46.540
Let's go and check.

229
00:12:46.570 --> 00:12:47.680
Make sure that works.

230
00:12:48.550 --> 00:12:49.830
Let's compile our code.

231
00:12:52.280 --> 00:13:00.170
And what I'm expecting from this is, well, I think it's going to be 400 something after we've removed

232
00:13:00.170 --> 00:13:03.980
all the words that are not Ice Grahame's, and that's got to be lots and lots of those.

233
00:13:04.310 --> 00:13:07.280
We should find we have a much smaller number.

234
00:13:08.730 --> 00:13:14.970
And I have just realized that I haven't actually implemented is Icer grams, so let's see.

235
00:13:15.000 --> 00:13:17.910
Yes, our code is work and we still at 788.

236
00:13:18.750 --> 00:13:20.850
I'm just getting too far ahead of myself.

237
00:13:22.940 --> 00:13:28.810
OK, so we've called it, and I think I forgot sern, too.

238
00:13:28.930 --> 00:13:29.380
Yes.

239
00:13:29.740 --> 00:13:31.810
We haven't actually checked for Icer grams here.

240
00:13:31.840 --> 00:13:34.300
So there are a couple of things we could do.

241
00:13:34.310 --> 00:13:36.870
We could have another if statement here.

242
00:13:37.210 --> 00:13:38.830
This is perfectly valid, by the way.

243
00:13:38.830 --> 00:13:48.990
We could say if and then is icer gram and into that function pass in the word that we're looking at

244
00:13:49.000 --> 00:13:50.380
in the words index.

245
00:13:50.740 --> 00:13:53.500
And of course the index parts of it as well.

246
00:13:53.980 --> 00:13:55.450
That will check for that condition.

247
00:13:55.900 --> 00:13:58.720
And then we can have our valid words coming out.

248
00:13:59.850 --> 00:14:04.770
Of course, instead of cutting and pasting that, I could have highlighted the line and used ult and

249
00:14:04.770 --> 00:14:07.020
the up arrow to bring that line up.

250
00:14:07.710 --> 00:14:10.950
The other option is that we pop it on the end of here.

251
00:14:11.280 --> 00:14:14.340
So this is absolutely fine if you've typed out like this.

252
00:14:15.030 --> 00:14:15.630
Great.

253
00:14:16.750 --> 00:14:19.180
And I will just test to make sure that works.

254
00:14:19.900 --> 00:14:21.460
Okay, let's go ahead and press play.

255
00:14:22.300 --> 00:14:22.900
Here we go.

256
00:14:22.900 --> 00:14:23.840
452.

257
00:14:23.890 --> 00:14:24.400
Brilliant.

258
00:14:24.730 --> 00:14:26.650
So the other way that we could have written that.

259
00:14:27.790 --> 00:14:32.800
Is by adding this line here onto the end of the two checks who are currently doing so, I can add space

260
00:14:32.800 --> 00:14:39.700
in here and say and is Icer Graham and pass into the words.

261
00:14:40.690 --> 00:14:42.690
Have the index we're currently looking.

262
00:14:44.580 --> 00:14:51.540
Because then we know that this length has to be true, this length has to be true, and it has to be

263
00:14:51.540 --> 00:14:52.860
an icy ground as well.

264
00:14:53.190 --> 00:14:56.070
And then it can run this area here.

265
00:14:56.070 --> 00:14:58.870
We don't need this extra if statement anymore.

266
00:14:59.930 --> 00:15:01.550
And the extra curly braces.

267
00:15:03.560 --> 00:15:09.860
And before we finish up, you may have noticed a mistake here, but it still word because the word list

268
00:15:09.860 --> 00:15:11.750
and the words are exactly the same.

269
00:15:12.150 --> 00:15:19.130
What they should have read here, where it says words, words, words and hear words should have been

270
00:15:19.130 --> 00:15:20.150
word lists.

271
00:15:20.630 --> 00:15:25.730
Now, I'm not going to use find a replace for this because the word word appears so often.

272
00:15:25.730 --> 00:15:29.120
So I'm going to go through and use the multi cursor.

273
00:15:29.480 --> 00:15:33.380
Incidentally, if you're on a Linux machine, you hold down alt.

274
00:15:33.410 --> 00:15:40.700
To do that rather than rather than control and delete that s there and then just type in list.

275
00:15:40.730 --> 00:15:43.280
And that should have sorted all of that out.

276
00:15:43.670 --> 00:15:45.350
Very silly of me to include that.

277
00:15:45.370 --> 00:15:46.820
But here we go.

278
00:15:47.090 --> 00:15:48.710
Now that was quite fortuitous.

279
00:15:48.770 --> 00:15:54.620
It just happens to be that wordlist is a copy of words and therefore the code worked, but otherwise

280
00:15:54.650 --> 00:15:55.730
it would have failed.

281
00:15:56.630 --> 00:15:58.160
Let's go over into Unreal.

282
00:15:59.140 --> 00:16:02.740
As press day and yes, we get exactly the same result.

283
00:16:03.280 --> 00:16:03.670
Brilliant.

284
00:16:03.910 --> 00:16:05.230
How did you guys get on?

285
00:16:05.710 --> 00:16:07.750
Which way did you end up approaching this?

286
00:16:07.770 --> 00:16:09.520
Did you use the nested if statements?

287
00:16:09.850 --> 00:16:13.240
Or did you just add it to the end of our current conditions?

288
00:16:13.800 --> 00:16:18.220
Appreciate your work over in the discussions and I'll see you all in the next lecture.
