1
00:00:04,230 --> 00:00:08,310
In this lecture, we'll be seeing how these child classes will implement the functions that we've already

2
00:00:08,320 --> 00:00:10,120
defined in the parent class.

3
00:00:10,390 --> 00:00:13,360
So let's start with a function we can actually test.

4
00:00:13,450 --> 00:00:15,160
And that's the rotate starts.

5
00:00:15,580 --> 00:00:19,570
We already have pretty much everything we need in the game to track a target.

6
00:00:19,840 --> 00:00:23,110
And remember, we'll be implementing this function in the base class.

7
00:00:23,680 --> 00:00:27,820
So in the rotate target function, we can start working with some of the variables we're ready have

8
00:00:27,820 --> 00:00:30,520
available and we need a few to go along with these.

9
00:00:31,420 --> 00:00:37,150
The first device will be a new effort later named TAAT rotation, which will be the value that we need

10
00:00:37,150 --> 00:00:43,990
to pass into the set world rotation function to make the target match rotate towards the target to fill

11
00:00:43,990 --> 00:00:44,500
this volume.

12
00:00:44,530 --> 00:00:50,860
We'll use another function find in the result of a vector calculation called rotation, which returns

13
00:00:50,920 --> 00:00:53,580
an effort to value together rotation.

14
00:00:53,620 --> 00:00:57,220
We're just going to take two vectors away from each other.

15
00:00:57,430 --> 00:01:02,320
And we already have those available, which will be the look at target, which is ready being passed

16
00:01:02,320 --> 00:01:02,500
in.

17
00:01:02,770 --> 00:01:08,140
However, we will want to make some alterations to this value to avoid weird kind of taat rotation behaviors.

18
00:01:08,390 --> 00:01:12,760
And make sure that we're only rotating around the turret and not up or down.

19
00:01:13,150 --> 00:01:20,710
So we can do this by creating a new F vector and filling it with the X and the Y of the look at target

20
00:01:20,710 --> 00:01:21,280
axis.

21
00:01:21,370 --> 00:01:23,400
So that's gonna be look at Target X.

22
00:01:23,650 --> 00:01:24,950
And look at Target Y.

23
00:01:25,000 --> 00:01:28,150
Which is just extracting those flight values from the vector.

24
00:01:28,150 --> 00:01:32,410
We already have them because it's going to be the Z axis that we want to keep in place.

25
00:01:32,590 --> 00:01:38,620
We're just going to use the turret mesh, get component, get location Z, because that's something

26
00:01:38,680 --> 00:01:43,490
which will not be changing on either the tanks or the turret classes.

27
00:01:43,840 --> 00:01:48,790
We don't want to take this away from a second vector location and that, of course, will be our own

28
00:01:48,790 --> 00:01:49,420
location.

29
00:01:49,600 --> 00:01:54,670
So to ensure that we get these same Z location as used in the first part of the equation, we want to

30
00:01:54,670 --> 00:02:00,200
use the TARP mash, get component location as our second vector, because remember, we're getting the

31
00:02:00,200 --> 00:02:06,640
Z axis of the component location in the first part of the calculation, which is the Z axis height of

32
00:02:06,640 --> 00:02:08,770
the turret MASH component specifically.

33
00:02:08,950 --> 00:02:14,020
So if we get the entire same thing for our second part of the calculation, we're still using the same

34
00:02:14,110 --> 00:02:15,130
Z axis there as well.

35
00:02:15,460 --> 00:02:16,840
So we now have our calculation.

36
00:02:16,900 --> 00:02:20,300
However, this is getting a little bit long and cumbersome to look at.

37
00:02:20,350 --> 00:02:25,450
So if we just jump back up a couple of lines and we can improve the readability here, we'll do this

38
00:02:25,450 --> 00:02:27,760
by creating two new effectors.

39
00:02:27,850 --> 00:02:28,610
The first one.

40
00:02:28,720 --> 00:02:29,050
Our name.

41
00:02:29,140 --> 00:02:33,880
Look at Target cleaned because we're essentially just taking the look at Target, which is we're being

42
00:02:33,880 --> 00:02:38,740
passed in and we're cleaning this to kind of account for the weird rotation things that I mentioned

43
00:02:38,740 --> 00:02:43,990
could happen if we allow it to rotate around the the roll in that we don't want as we just want it to

44
00:02:44,020 --> 00:02:46,630
go around and follow horizontally only.

45
00:02:46,870 --> 00:02:48,850
So this will be equal to a new effector.

46
00:02:49,120 --> 00:02:54,040
And for this, we can just cut and paste our first part of the calculation and we'll paste that just

47
00:02:54,040 --> 00:02:54,220
here.

48
00:02:54,430 --> 00:02:59,290
So that's our cleaned up version of the look at target value to ensure that we're only going to be looking

49
00:02:59,290 --> 00:03:05,020
at the X and Y values on the plane whilst using the turret mesh components application for these Z here.

50
00:03:05,650 --> 00:03:10,960
Then for our second vector, we'll name this one start location and this will be the second part of

51
00:03:10,960 --> 00:03:11,800
the calculation.

52
00:03:12,160 --> 00:03:15,100
So again, I'll just grab the target match, get component location.

53
00:03:16,960 --> 00:03:22,360
With our two new effectors, we can fill in the f vector argument we had previously with the same values,

54
00:03:22,390 --> 00:03:26,170
but just taking up much less space and this will be much easier to read.

55
00:03:26,320 --> 00:03:29,500
What's happening when we come back to see the rotation details.

56
00:03:29,650 --> 00:03:35,340
So here we're getting the look at target cleaned minus the start location of the turret.

57
00:03:35,720 --> 00:03:39,940
So at the moment, of course, we're just getting the direction to look at as a value.

58
00:03:40,030 --> 00:03:44,980
We don't need to actually use this value and apply this to drive the rotation of the turret match.

59
00:03:45,100 --> 00:03:50,080
So to finish this off, we're just going to say that the TARP match set world rotation and passing the

60
00:03:50,140 --> 00:03:52,110
turret to rotation value and that's it.

61
00:03:52,150 --> 00:03:57,220
So actually, quite easy once you have the math and the calculations them and we have our turrets now

62
00:03:57,220 --> 00:03:58,720
ready to rotate around.

63
00:03:59,590 --> 00:04:02,750
So let's start them by using this in our turret class.

64
00:04:03,020 --> 00:04:08,360
We'll use a similar check to what we've done previously to ensure that we have a valid reference to

65
00:04:08,360 --> 00:04:09,270
the play A Pawn.

66
00:04:10,870 --> 00:04:12,400
And also that we're in range.

67
00:04:17,360 --> 00:04:20,040
This is what we'll be doing in the tech function, we can then return out of this.

68
00:04:20,060 --> 00:04:26,380
If those requirements are not met, then we can use our function to rotate and look at the players location.

69
00:04:26,530 --> 00:04:27,880
So here's a quick challenge for you.

70
00:04:28,060 --> 00:04:35,050
Call the rotate turret function in the tech event and provide the location of the player as the argument

71
00:04:35,520 --> 00:04:37,600
suppose video here and give this one to go.

72
00:04:38,950 --> 00:04:39,110
Okay.

73
00:04:39,240 --> 00:04:44,340
So this is no different than calling any other function that we have before than we already have our

74
00:04:44,340 --> 00:04:47,110
reference to the plane as well, which is our play, a pawn.

75
00:04:47,400 --> 00:04:51,930
And all we want to do is use a function again that we've seen before, and that is the get active location.

76
00:04:54,310 --> 00:04:56,470
That's gonna be the value that we want to look at.

77
00:04:57,100 --> 00:04:58,530
We can also make another quick change here.

78
00:04:58,720 --> 00:05:05,260
What I'm going to do is cut the unroll, log from the fire, check in the if statement here, and then

79
00:05:05,260 --> 00:05:09,700
we'll just replace that with the fire function from the pawn base class.

80
00:05:10,450 --> 00:05:15,040
So, again, this is just cooling the base class fire function, which at the moment won't be doing

81
00:05:15,040 --> 00:05:17,060
anything, which is why we have our log.

82
00:05:17,190 --> 00:05:23,470
So we go back over to the base class and I will paste this into the fire function so that we don't have

83
00:05:23,470 --> 00:05:23,920
our projectile.

84
00:05:23,980 --> 00:05:26,950
We can at least check if this function is being cooled correctly.

85
00:05:27,430 --> 00:05:32,680
With that done, we can compile and start checking if the target class is working correctly.

86
00:05:33,010 --> 00:05:37,390
Now, I've just run my compiler and come back with an R, and that is that I must have just been typing

87
00:05:37,450 --> 00:05:38,110
what I was saying.

88
00:05:38,260 --> 00:05:44,740
And I've typed and implemented a function named rotate taat function, so I'll just go and change that

89
00:05:44,740 --> 00:05:47,660
to rotate turrets in the header file.

90
00:05:47,770 --> 00:05:49,660
And also the code file implementation.

91
00:05:49,990 --> 00:05:54,670
And I've also missed the brackets on the get to component location function.

92
00:05:54,820 --> 00:05:57,640
This is just the function code inside of the rotate turret function.

93
00:05:57,760 --> 00:05:58,720
As you can see just here.

94
00:05:58,750 --> 00:06:00,020
So I'll add those in as well.

95
00:06:02,560 --> 00:06:04,940
With that corrected and the game compiled.

96
00:06:07,000 --> 00:06:10,910
We can now see that the fire function is still working as we we'd have hoped.

97
00:06:11,390 --> 00:06:17,010
Even though we've moved that log over to the base class and of course, the PWN tart's is tracking to

98
00:06:17,010 --> 00:06:20,870
play a movement, as long as we're in range, you can see that moving and rotating around.

99
00:06:21,200 --> 00:06:24,080
And then when I leave the range, I'll stop back in the hour ahead.

100
00:06:24,440 --> 00:06:28,940
We're also going to see how to declare the final function and override it.

101
00:06:29,390 --> 00:06:35,210
So to begin, we're going to use the virtual void again before creating the handle destruction function

102
00:06:35,210 --> 00:06:35,420
name.

103
00:06:35,960 --> 00:06:40,550
This time, no rules are going to add our override, specify to the end of this to confirm that this

104
00:06:40,550 --> 00:06:44,600
will be a function expecting to override a function from the base class.

105
00:06:44,870 --> 00:06:48,550
We don't need to implement this or use the C++ helper shortcuts again.

106
00:06:49,100 --> 00:06:55,610
We then call the super function on the handle destruction function in the taht code file, which will

107
00:06:55,610 --> 00:07:01,250
ensure that we enter the parent function, call first, run through the effects logic before returning

108
00:07:01,250 --> 00:07:06,920
to the child class and performing the overridden logic, which in this case will just be to cool the

109
00:07:06,950 --> 00:07:08,180
destroy function for now.

110
00:07:08,930 --> 00:07:12,590
So we won't be able to see our handle destruction for a little while.

111
00:07:12,740 --> 00:07:18,560
So let's go back over to the tank class and make our implementations for the functions that two.

112
00:07:20,360 --> 00:07:22,880
First, we can implement the handle destruction function.

113
00:07:31,740 --> 00:07:36,280
I'm just going to leave a small comment here as we don't have anything at all that we can do right now.

114
00:07:36,720 --> 00:07:40,650
But we should probably drop the hiding logic into its own functions.

115
00:07:40,650 --> 00:07:44,550
So I'll make a comment to that effect to remind us to do that a little bit later.

116
00:07:45,150 --> 00:07:50,850
And, of course, remembering to include the supercooled to the parent function class as well, because

117
00:07:50,970 --> 00:07:56,700
like I've said before, we want to make sure that our tank also plays the destruction effects, such

118
00:07:56,700 --> 00:07:58,230
as the signs and particles.

119
00:07:58,650 --> 00:08:04,710
So for the platform, we'll start this time by implementing the fire function in the set up a player

120
00:08:04,740 --> 00:08:05,880
input component function.

121
00:08:05,910 --> 00:08:09,370
We want to create a new player input component binding.

122
00:08:09,690 --> 00:08:12,290
But this time is going to be of type BINDE action.

123
00:08:12,540 --> 00:08:17,760
So the axis bindings that we've used before, we run constantly and used for things that can provide

124
00:08:17,760 --> 00:08:22,260
at different values between a range of zero and one or minus one.

125
00:08:22,440 --> 00:08:27,750
Usually this would be things for accounting for incremental changes that might be held over time, such

126
00:08:27,750 --> 00:08:34,500
as movement input actions are just single press events or inputs returning a state of either being pressed

127
00:08:34,590 --> 00:08:35,270
or released.

128
00:08:35,850 --> 00:08:42,330
And they usually use for situations such as interaction, presses jumping and in a situation firing.

129
00:08:42,900 --> 00:08:48,410
So we're going to be binding this to the fire input in the same way that we did with the axis bindings

130
00:08:48,420 --> 00:08:52,050
by providing the name of the button referenced in the project settings.

131
00:08:52,530 --> 00:08:55,870
And this is where it gets a little bit different in the next pot as well.

132
00:08:55,890 --> 00:09:02,370
So assigning this to happen when the button is pressed using the IHI underscore, pressed for the input

133
00:09:02,460 --> 00:09:04,620
event whether we won't be using it.

134
00:09:04,630 --> 00:09:11,370
Just to note that we can also get other events such as IEEE Unreleased, which is when the button is

135
00:09:11,370 --> 00:09:11,910
released.

136
00:09:12,090 --> 00:09:18,090
And a common scenario for using both of these would be for control schemes where you might hold C to

137
00:09:18,090 --> 00:09:18,730
crunch.

138
00:09:19,350 --> 00:09:25,320
You'd then bind one of the functionalities to the I'I underscore press event for the crouching down

139
00:09:25,320 --> 00:09:26,880
portion of the logic.

140
00:09:27,150 --> 00:09:33,780
And then you'd assign another set of logic to be called when the I'I underscore released has been called

141
00:09:34,200 --> 00:09:36,360
to return the player from the crouching position.

142
00:09:36,780 --> 00:09:42,030
So you can see in this quick example I've just presented, both are still assigned to our imaginary

143
00:09:42,270 --> 00:09:45,240
cracked binding, which would be the one that you'd see in the project's settings.

144
00:09:45,570 --> 00:09:47,190
So this is the button assignment.

145
00:09:47,460 --> 00:09:52,710
But two different functions would then be called to handle the crouching state changes depending on

146
00:09:52,710 --> 00:09:53,700
the button state.

147
00:09:54,210 --> 00:09:55,010
That's just an example.

148
00:09:55,010 --> 00:09:57,720
As I just say, that you're aware of how this can be used.

149
00:09:57,720 --> 00:10:01,890
But again, this the classes that we have don't really have a need for such thing.

150
00:10:01,950 --> 00:10:06,630
So I'm just going to remove that example as I can't see much use for a crouching tank right now.

151
00:10:07,020 --> 00:10:08,850
So back to our fire binding.

152
00:10:09,030 --> 00:10:12,750
We then need a reference to the context class, which is this.

153
00:10:13,110 --> 00:10:18,360
And finally, we're going to use the address of the AP and tank and call the fire function when the

154
00:10:18,360 --> 00:10:19,830
fire input is pressed.

155
00:10:20,070 --> 00:10:26,400
So for the tank turret rotation, we want to use the hit result under cursor on the player controller

156
00:10:26,700 --> 00:10:30,150
as this is something else that we're going to want to do on the tick event.

157
00:10:30,180 --> 00:10:35,370
We'll head over to the head of file and declare a player control controller reference, making this

158
00:10:35,370 --> 00:10:40,350
a method variable so that we can access this anywhere throughout the class to allow us to store and

159
00:10:40,350 --> 00:10:44,670
save this reference rather than repeatedly finding it in the event take later.

160
00:10:45,090 --> 00:10:50,400
So this is going to be a pointer to the A play a controller class and we'll name this one player controller

161
00:10:50,400 --> 00:10:50,850
ref.

162
00:10:52,570 --> 00:10:55,270
Then in the code, fall on the begin play.

163
00:10:57,350 --> 00:11:00,680
We just saw a reference here by casting to the A play a controller.

164
00:11:04,370 --> 00:11:06,320
And using the get control to function.

165
00:11:09,280 --> 00:11:13,820
This is very similar to the cast functionality that we've seen before, but this time we're doing it

166
00:11:13,820 --> 00:11:19,610
to find the active player controller that's been created by the world to handle the play porn and storing

167
00:11:19,610 --> 00:11:21,500
that as our player controller RF.

168
00:11:21,680 --> 00:11:26,240
We'll be looking more at the play a controller class in its own topic a little bit later as this is

169
00:11:26,240 --> 00:11:27,650
kind of a topic unto itself.

170
00:11:27,800 --> 00:11:35,170
But just know that this kind of controls the general possession, the status of the player porn, how

171
00:11:35,180 --> 00:11:40,070
the class is possessed and things based around that sort of functionality in the tech function.

172
00:11:40,100 --> 00:11:43,730
We'll want to check to ensure that we have a valid player controller reference.

173
00:11:45,410 --> 00:11:50,690
If we do, then we can call the get hit result under Curser from the player control class.

174
00:11:54,990 --> 00:12:00,660
This is just going to essentially trace from the location on the screen where the cursor is currently

175
00:12:00,660 --> 00:12:06,710
detected into the WorldSpace and find the resulting location that that casts would happen.

176
00:12:06,720 --> 00:12:11,970
So it's just kind of beaming into the world and giving us some real world space coordinates, which

177
00:12:11,970 --> 00:12:16,110
we're going to use as the location of where we want the target to face towards.

178
00:12:16,230 --> 00:12:18,720
So for this, we have a few different arguments.

179
00:12:18,750 --> 00:12:21,530
The first thing is the trace channels.

180
00:12:21,710 --> 00:12:24,390
And for this one, we'll be using the visibility channel to trace on.

181
00:12:24,900 --> 00:12:27,330
The next thing is the type of collision checks it should be doing.

182
00:12:27,750 --> 00:12:34,050
We've got the option between complex and simple collisions is asking if we want this to do complex tracing,

183
00:12:34,080 --> 00:12:35,050
which we won't need for this.

184
00:12:35,070 --> 00:12:41,670
So we can set this to folks as complex tracing is more for things like specific limbs or sub meshes

185
00:12:41,730 --> 00:12:47,950
on the classes that we want to check against for collision, which might wrap cleanly around a mesh

186
00:12:48,330 --> 00:12:53,490
we're using of a simple collision set up, specifically using our capsule component.

187
00:12:53,760 --> 00:12:55,860
So we won't need that complex tracing.

188
00:12:56,100 --> 00:12:59,670
And then finally, we're going to need an F hit result two years later.

189
00:12:59,700 --> 00:13:04,410
And this is what I was kind of describing a moment ago, where the trace that we're doing into the world

190
00:13:04,410 --> 00:13:06,630
will return a lot of different variables.

191
00:13:06,720 --> 00:13:09,660
So it's going to jump up a line and create this one night.

192
00:13:09,870 --> 00:13:12,270
So, as I said, it's a type of F hit result.

193
00:13:12,420 --> 00:13:14,660
And we'll just name ours trace hit result.

194
00:13:15,540 --> 00:13:19,680
This is going to store information about where the cursor has traced in the world, such as the hit

195
00:13:19,680 --> 00:13:23,310
location, the normal's the rotation, the actor that is hit.

196
00:13:23,460 --> 00:13:24,270
And much more.

197
00:13:25,340 --> 00:13:28,310
We can bypass this in as the final argument for the function.

198
00:13:30,240 --> 00:13:36,090
We don't need a new F vector named hit location, which we'll find from any trace hit results that we've

199
00:13:36,090 --> 00:13:40,740
just filled from our function that we want to find at the impact point.

200
00:13:40,950 --> 00:13:44,310
So this will be the location in the world that the trace has hit.

201
00:13:44,460 --> 00:13:48,510
And that is going to be the end location that we want our tank target to look at.

202
00:13:49,730 --> 00:13:55,580
Finally, like we did with the porn tarts, we can call the rotate taat function and just fill in the

203
00:13:55,610 --> 00:13:58,550
vector parameter with how a calculated hit result.

204
00:13:58,730 --> 00:14:02,420
And again, because the apparent class is accounting for the vertical rotation.

205
00:14:02,510 --> 00:14:06,680
We don't need to worry about anything here just providing the effective results and we're good to go.

206
00:14:07,280 --> 00:14:11,540
Otherwise, if you think about what's happening, the net result is going to be looking at things like

207
00:14:11,630 --> 00:14:12,080
the.

208
00:14:12,750 --> 00:14:15,380
It will possibly be tracing underneath where the tank is.

209
00:14:15,680 --> 00:14:19,010
If you're tracing to the floor, if you hit a wall, then it might be higher than the tank.

210
00:14:19,220 --> 00:14:24,620
And again, if we weren't making that Z offset in our calculation, then we'd have the tank turret trying

211
00:14:24,620 --> 00:14:31,130
to look up and down to either face the floor or the wall or anything that might be in the way in the

212
00:14:31,130 --> 00:14:32,530
world around that.

213
00:14:33,170 --> 00:14:38,360
So if we head over to the editor and compile, we should now have the tank top rotation and the fire

214
00:14:38,360 --> 00:14:39,320
functionality work.

215
00:14:40,770 --> 00:14:45,740
And we can see here they are just press play, and every time I click, I'm getting the fire function

216
00:14:45,740 --> 00:14:49,460
being called and we can see that the rotation is working almost as intended.

217
00:14:49,700 --> 00:14:52,190
So the tank, it does rotate to find the mice.

218
00:14:52,280 --> 00:14:56,750
The current rotation, though, does feel a little bit off, but we're going to be addressing that with

219
00:14:56,750 --> 00:14:59,900
some tweaks to the player control class later in the section.

220
00:15:00,720 --> 00:15:01,280
So is that done?

221
00:15:01,460 --> 00:15:07,550
That is the PWN class is mostly implemented by the technical parts of the functions that are working,

222
00:15:07,670 --> 00:15:11,530
and we just need to create some extra classes for the more visual aspects of the game.
