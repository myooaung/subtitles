WEBVTT
1
00:00:04.610 --> 00:00:06.290
Hello everybody and welcome back.

2
00:00:06.290 --> 00:00:11.450
So by the end of this lecture we'll be able to finish off our well position component because we're

3
00:00:11.450 --> 00:00:16.720
going to go and get the location and print that out and we can use that location later on as well.

4
00:00:16.790 --> 00:00:21.400
So we're going to finish the world position component and then we're going to be using the DOS operate

5
00:00:21.410 --> 00:00:25.300
in the arrow to access members depending on whether it's a pointer or not.

6
00:00:25.370 --> 00:00:28.280
And we'll also be introducing F vector.

7
00:00:28.280 --> 00:00:33.520
This is simply going to return as three values are X Y and Z.

8
00:00:33.530 --> 00:00:39.610
Let's go over to V as code and then we'll have a look at effector Okay everybody Welcome back.

9
00:00:39.640 --> 00:00:45.790
Now I'm going to uncommon this string at the top here that our object name that we created before.

10
00:00:45.790 --> 00:00:51.810
And we've got the ghetto now get name and when we hover over the get named C. that it returns an F string.

11
00:00:51.820 --> 00:00:57.070
This is important we've talked about it in the past but whatever this is going off and getting has to

12
00:00:57.070 --> 00:01:00.280
be the same type on the left hand side as well other.

13
00:01:00.520 --> 00:01:02.040
Otherwise it just won't match.

14
00:01:02.050 --> 00:01:08.490
So where are we going get this struct this F vector that will be returning three values.

15
00:01:08.500 --> 00:01:14.620
We need to make sure they come back not just as a F vector but they need to come back as a string.

16
00:01:14.620 --> 00:01:19.270
So the first thing we're going to do here is just create ourselves a new F string and we're going to

17
00:01:19.270 --> 00:01:21.460
call it object's position.

18
00:01:21.460 --> 00:01:22.690
And what are we going to set it to.

19
00:01:22.960 --> 00:01:27.750
Well it's going to be gets owner again and that's where we run a bit dry.

20
00:01:27.790 --> 00:01:33.730
Now we can finish off those brackets and if you have intel you sense that is working we can once again

21
00:01:33.730 --> 00:01:38.980
use the arrow operator remember if we hover over this we see it's an actor star so it's a pointer to

22
00:01:38.980 --> 00:01:40.150
the actor.

23
00:01:40.150 --> 00:01:46.000
Now we can go and have it go ahead and have a look at the other functions of the other member functions

24
00:01:46.000 --> 00:01:47.880
that we can go ahead and call.

25
00:01:47.980 --> 00:01:52.260
Now the issue is just scrolling through here is there not really documented.

26
00:01:52.270 --> 00:01:57.940
I mean we can hover over some of these and they give a few extra bits of information occasionally but

27
00:01:57.940 --> 00:02:00.800
that's not really a great way of searching for things.

28
00:02:00.850 --> 00:02:05.400
So let's go over to the unreal documentation and take a better look at these things.

29
00:02:06.960 --> 00:02:08.180
And here we go.

30
00:02:08.190 --> 00:02:13.380
So we have here an effector we we're going to start with this so we get an idea of what's coming back.

31
00:02:13.390 --> 00:02:19.820
It's a vector in 3D space composed of coordinates basically with floating point precision.

32
00:02:19.860 --> 00:02:25.800
So it's going to be a struggle to re scroll down we'll see that and that contains the X Y and Z and

33
00:02:25.800 --> 00:02:26.820
they're all floats.

34
00:02:26.820 --> 00:02:30.990
So they're all going to be decimal places which makes sense when you move things around in the editor

35
00:02:30.990 --> 00:02:31.410
window.

36
00:02:31.410 --> 00:02:35.970
They certainly don't move by whole numbers unless you've got snapping turned on and we scroll down here.

37
00:02:35.970 --> 00:02:40.740
This is this is similar to what we've looked at before and then we can see all of these functions that

38
00:02:40.740 --> 00:02:49.230
we can call on me F vector so I'm going to go and search this documentation and look for string.

39
00:02:49.230 --> 00:02:51.160
Is there something on here that we can.

40
00:02:51.180 --> 00:02:52.420
Yes there is brilliant.

41
00:02:52.440 --> 00:02:59.130
So there is a function we can call on this F vector that will return a textual representation of the

42
00:02:59.130 --> 00:02:59.460
vector.

43
00:02:59.460 --> 00:03:00.170
So this is great.

44
00:03:00.180 --> 00:03:05.570
This gives us a bit more context as to what these functions actually do and we can see up the top here

45
00:03:05.580 --> 00:03:09.280
there's two compact string as well that may actually be useful.

46
00:03:09.420 --> 00:03:14.940
And one of the things that we'll see as we go through this particular lecture is that you can do things

47
00:03:14.940 --> 00:03:15.740
in multiple ways.

48
00:03:15.740 --> 00:03:19.350
So the answer that I come up with at the end will work.

49
00:03:19.380 --> 00:03:23.910
But you could have potentially got to it's a different way as well because part of the challenge coming

50
00:03:23.910 --> 00:03:30.510
up will be to search through this documentation and try and find the right thing to use really increasing

51
00:03:30.510 --> 00:03:35.020
your skill level being able to read these documents and understand what you might use.

52
00:03:35.100 --> 00:03:39.650
And also that there might not be one correct answer.

53
00:03:39.720 --> 00:03:44.450
So now that we've done that what we need to do is find the objects transform.

54
00:03:44.460 --> 00:03:48.720
So in order to do that we're going to go right up to the top of the UAE for documentation.

55
00:03:48.780 --> 00:03:55.480
So if you go to the Unreal Engine website Unreal Engine dot com we go to learn and documentation.

56
00:03:55.500 --> 00:03:56.970
This is the slow way of getting here.

57
00:03:56.970 --> 00:04:02.310
You could also use a Google search to find these things as well.

58
00:04:02.400 --> 00:04:06.240
And then we can go in and go scroll down here it used to be tabs along the top.

59
00:04:06.240 --> 00:04:12.620
They've moved it to a bar down the side here and we have Unreal Engine c++ api reference.

60
00:04:13.310 --> 00:04:17.100
And what we want to look for in here is the a acting class.

61
00:04:17.130 --> 00:04:19.470
Because that's what we're drilling deeper into.

62
00:04:19.520 --> 00:04:22.470
And let's go ahead and click on the top on here at.

63
00:04:22.510 --> 00:04:24.270
Unreal documentation.

64
00:04:24.300 --> 00:04:29.390
Now this will give us the include which you've already got which is why we can use the auto complete

65
00:04:29.400 --> 00:04:30.400
that is important.

66
00:04:30.400 --> 00:04:35.490
I bring that up again include what you use if you find something is not also filling it might be that

67
00:04:35.490 --> 00:04:41.400
you've not included it or if you get compile errors as well every scroll down here we get a list of

68
00:04:41.400 --> 00:04:45.120
once again functions that we can end up calling.

69
00:04:45.120 --> 00:04:50.100
Now we're going to be getting a object's location or maybe transform.

70
00:04:50.130 --> 00:04:52.860
There are lots of different ways that we could search for it.

71
00:04:52.890 --> 00:04:59.640
So let's search for position because there are several words that you can obviously interchange position

72
00:04:59.970 --> 00:05:05.010
location so it doesn't look like positions is going to bring up what we want.

73
00:05:05.070 --> 00:05:11.700
I know for a fact location is going to work and if we have a look through all of the various locations

74
00:05:11.730 --> 00:05:13.730
now there will be lots to search for here.

75
00:05:13.740 --> 00:05:18.870
But when it's got to get at the beginning if you're trying to get something back it's going to be a

76
00:05:18.870 --> 00:05:19.350
good start.

77
00:05:19.350 --> 00:05:25.260
So we can get the actor location and look it returns an F vector which we can then put to string in

78
00:05:25.320 --> 00:05:33.140
order to return a String and set our variable that gets position the object position sorry and look

79
00:05:33.150 --> 00:05:38.520
all of this is documented as well so you can just verify returns the location of the root component

80
00:05:38.580 --> 00:05:39.500
of this actor.

81
00:05:39.600 --> 00:05:44.340
That's important because if you've got a component that's offset perhaps you want to return the position

82
00:05:44.400 --> 00:05:46.000
of that component.

83
00:05:46.020 --> 00:05:50.070
So we've looked at location another name for this is the transform.

84
00:05:50.070 --> 00:05:56.130
So if we have a look under transform and we go this returns that gets the act it's a world transformed

85
00:05:56.130 --> 00:06:00.320
so its location in the world which is exactly what we want as well.

86
00:06:00.420 --> 00:06:03.910
And we've got f transform let's have a look and see what we've got under here.

87
00:06:03.990 --> 00:06:08.860
Now another thing if you know what you're trying to return in this case an effector factor.

88
00:06:08.970 --> 00:06:09.390
Here we go.

89
00:06:09.400 --> 00:06:11.940
At translation that's not going to be what we want.

90
00:06:11.970 --> 00:06:15.480
So sometimes it takes a bit of reading as you go through these documents I'm sure there's going to be

91
00:06:15.480 --> 00:06:21.030
a get position or get location as we scroll down there's a get location right here.

92
00:06:21.150 --> 00:06:28.290
And once we go in to get location is returning an F vector which we know we can do dot to string in

93
00:06:28.290 --> 00:06:30.500
order to convert it to a string.

94
00:06:30.690 --> 00:06:35.940
And of course you can continue searching through here to get a good I remember it's important that you

95
00:06:35.940 --> 00:06:41.400
don't try and memorize all of this that you have the skills to go and find what you need when you need

96
00:06:41.400 --> 00:06:48.360
it and just think logically and try and also remember that there are multiple ways of doing something

97
00:06:48.620 --> 00:06:54.600
and that's sometimes something maybe a book called position in one instance transform in another location

98
00:06:54.600 --> 00:06:59.610
in another order these words are interchangeable so you may end up with something that's a slightly

99
00:06:59.610 --> 00:07:02.280
different word to how you might have described it.

100
00:07:02.280 --> 00:07:03.070
Okay.

101
00:07:03.180 --> 00:07:07.490
So now that we've done that I'd like you to do this little challenge.

102
00:07:07.710 --> 00:07:10.710
Take your time read through the documents.

103
00:07:10.710 --> 00:07:17.610
And when I go through my answer it may be different from yours but if you have successfully printed

104
00:07:17.700 --> 00:07:25.560
out the x y and z coordinates of the object then we're spot on your code is in fact functioning exactly

105
00:07:25.560 --> 00:07:32.750
how we intend it to see your challenge is to finish off our f string opposite position equals get owner

106
00:07:33.090 --> 00:07:36.420
and then the arrow operator what else do we need on the end of that.

107
00:07:36.450 --> 00:07:42.030
And remember my answer may be different to yours as long as at the end your print into the log that

108
00:07:42.030 --> 00:07:48.150
the object names that will vary depending on what objects our component is placed upon is at position

109
00:07:48.810 --> 00:07:50.880
x y and z.

110
00:07:50.880 --> 00:07:58.200
So those should have values that match the transform in the ed. window possibly now and give that a

111
00:07:58.200 --> 00:08:02.260
go Okay everybody Welcome back.

112
00:08:02.260 --> 00:08:08.200
Let's dive on over and create some code that is going to go and get the objects world position

113
00:08:10.830 --> 00:08:20.350
Okay so we're at this point here and let's go ahead and I will do get location get active location.

114
00:08:20.350 --> 00:08:20.950
There we go.

115
00:08:21.640 --> 00:08:28.990
And if we hover over that we will see that it is returning an effector and there's no star there.

116
00:08:29.050 --> 00:08:31.380
So we're going to go and do dot.

117
00:08:31.780 --> 00:08:36.200
And obviously this knows that I wants to use to stream because I've used it before.

118
00:08:36.280 --> 00:08:40.070
And so we can see to string is the next function that I'm going to call on it.

119
00:08:40.180 --> 00:08:45.700
And that's the end because this will now be returning an F string which matches everything over on the

120
00:08:45.700 --> 00:08:54.360
left hand side which means I can now repurpose this Yui log down here to save the object.

121
00:08:54.370 --> 00:09:00.850
Well we're not gonna say objects anymore we're going to do the format specify a string so then we can

122
00:09:00.850 --> 00:09:08.150
say that the object name so star here object name

123
00:09:13.130 --> 00:09:23.760
and we don't need the name afterwards we can say position in world is then another percentage.

124
00:09:23.760 --> 00:09:30.990
S and then what we should get back here will be once again star object position.

125
00:09:30.980 --> 00:09:32.340
There we go.

126
00:09:32.490 --> 00:09:34.270
Let's test that and see if it works.

127
00:09:34.270 --> 00:09:43.190
So save our work go over into unreal click on compile excellent I'm going to open up my output log that's

128
00:09:43.190 --> 00:09:44.210
been shut down.

129
00:09:44.270 --> 00:09:50.450
Now when I press play we should have the cube position in the world is so we've got some values that

130
00:09:50.450 --> 00:09:51.020
brilliant.

131
00:09:51.020 --> 00:09:51.820
Well let's go check them.

132
00:09:51.830 --> 00:09:59.180
If we go ahead and exit the play and select the cube we can see this position in the world is minus

133
00:09:59.930 --> 00:10:03.850
220 200 130 220 200 130.

134
00:10:03.860 --> 00:10:04.770
Brilliant.

135
00:10:04.820 --> 00:10:07.080
That's exactly what I was hoping to see.

136
00:10:07.130 --> 00:10:08.740
How did you guys get on.

137
00:10:08.780 --> 00:10:13.240
Now you might approach this slightly differently in which case that's absolutely fine as well.

138
00:10:13.550 --> 00:10:15.730
So what else could you have written.

139
00:10:15.740 --> 00:10:21.680
Well instead of get actor location here you could quite easily gone down the transformer.

140
00:10:21.680 --> 00:10:27.920
Now I can use fuzzy search here to get the access transform include my brackets here.

141
00:10:27.920 --> 00:10:28.530
Have a look.

142
00:10:28.530 --> 00:10:33.930
It's going to return an F transform so I can use the dots because there's no string there.

143
00:10:33.980 --> 00:10:38.510
Now just sending the transform to string.

144
00:10:38.550 --> 00:10:40.320
Let's see what we get if we do that.

145
00:10:40.320 --> 00:10:41.250
This may not work.

146
00:10:41.250 --> 00:10:46.950
This is this is part of the learning journey part of understanding what does work and what doesn't.

147
00:10:46.950 --> 00:10:53.450
And if that gives you the values back that you would expect so you can do a bit of exploring with intelligence.

148
00:10:53.550 --> 00:10:58.800
I know the X code can be a bit rough around the edges when it comes to that and certainly doesn't include

149
00:10:58.800 --> 00:11:02.960
quite the length of fuzziness that you might otherwise want.

150
00:11:02.970 --> 00:11:07.410
So this is returning what we want which is really good.

151
00:11:07.650 --> 00:11:14.880
And it is also returning the rotation and scale so we didn't want all of the extra information but this

152
00:11:14.880 --> 00:11:20.160
would have been a pass as well because you've got back to the object information that you wanted to

153
00:11:20.160 --> 00:11:20.960
get.

154
00:11:21.030 --> 00:11:29.360
However from the get to access transform we could also pull from that its location get location.

155
00:11:29.360 --> 00:11:30.080
Here we go.

156
00:11:30.120 --> 00:11:34.960
So get location and that we can probably do dot to string.

157
00:11:34.960 --> 00:11:41.310
You can see how this is quite a long winded way of writing what we had in the first place but now we're

158
00:11:41.310 --> 00:11:46.680
just getting the location from the actors transform and then putting that to a string.

159
00:11:46.700 --> 00:11:47.750
So let's see what happens here

160
00:11:51.310 --> 00:11:55.720
oh I've forgotten something that yes I forgot my parentheses at the end.

161
00:11:55.870 --> 00:12:02.360
Let's save that and there we go we get the same results again as the first way round.

162
00:12:02.380 --> 00:12:04.450
Now there was no right or wrong with that.

163
00:12:04.450 --> 00:12:09.160
That's the important thing to remember that is very easy to go down an avenue of there's only one way

164
00:12:09.160 --> 00:12:12.930
of doing things and that's true in some circumstances.

165
00:12:13.060 --> 00:12:18.760
But in this particular way No you can go about two distinctly different ways that in order to get the

166
00:12:18.760 --> 00:12:22.260
right code working now I don't like this.

167
00:12:22.450 --> 00:12:31.670
I am going to go ahead and go back to get location gets actor location and then do the DOT to string

168
00:12:31.670 --> 00:12:32.150
on there.

169
00:12:32.150 --> 00:12:38.040
Remember your parentheses and I won't just know that that is working I'm going to compile it anyway

170
00:12:38.040 --> 00:12:44.010
and make sure that I haven't accidentally deleted anything else and there we go we've got the results

171
00:12:44.070 --> 00:12:45.280
that I wanted to see.

172
00:12:45.300 --> 00:12:46.060
Perfect.

173
00:12:46.100 --> 00:12:49.180
How do you guys get on which route did you end up taking.

174
00:12:49.290 --> 00:12:55.260
Both are correct and both give us the result that we want lets us know over in the discussions which

175
00:12:55.260 --> 00:12:58.290
routes you took and I'll see you all in the next lecture.
