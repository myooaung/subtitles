1
00:00:04,500 --> 00:00:09,300
Hello and welcome and this lecture, we're going to be dealing damage to this actor here.

2
00:00:09,360 --> 00:00:13,440
We're going to do that by overriding a virtual method called take damage on the actor.

3
00:00:13,800 --> 00:00:18,390
And you can see in the log here, we've got the health decreasing as I shoot this character all the

4
00:00:18,390 --> 00:00:21,860
way down to zero and then it stops zero, not going into negative numbers.

5
00:00:21,870 --> 00:00:23,610
So let's dive in and see how that's done.

6
00:00:26,580 --> 00:00:32,880
So while we are currently being able to do damage to the actors that we hit here, such as this guy,

7
00:00:33,570 --> 00:00:36,570
we are not actually receiving that damage.

8
00:00:36,600 --> 00:00:42,900
So this is where virtual methods of the last lecture come in, because just like begin play or tech,

9
00:00:43,050 --> 00:00:46,050
we want to be able to receive damage on an actor.

10
00:00:46,170 --> 00:00:50,700
Now, fortunately, if you go to the actor Don H and have a little look in here, you can see that there

11
00:00:50,700 --> 00:00:53,010
is this take damage virtual method.

12
00:00:53,400 --> 00:01:00,320
Now, this can be done also with events and you will possibly have seen it done that way before where

13
00:01:00,400 --> 00:01:01,500
you register for events.

14
00:01:01,620 --> 00:01:06,990
Now, what I'm going to do is just a different way of doing damage where we actually have damage stored

15
00:01:06,990 --> 00:01:09,480
against the actor rather than in a component.

16
00:01:10,350 --> 00:01:15,660
And one easy way of receiving that damage is through a virtual method here.

17
00:01:16,200 --> 00:01:18,480
And this is the virtual myth that we're going to override.

18
00:01:18,810 --> 00:01:24,890
So I'm going to go ahead and copy this and go over to our particular actor, which is the shooter.

19
00:01:24,900 --> 00:01:25,970
Carrots can be crickets.

20
00:01:26,080 --> 00:01:28,600
It's just go search for the shooter's character, Dot H.

21
00:01:29,250 --> 00:01:34,260
And the one thing that I wants to check is where this comes in.

22
00:01:34,260 --> 00:01:34,650
The actor.

23
00:01:34,890 --> 00:01:35,310
H.

24
00:01:35,970 --> 00:01:41,490
So if we scroll up, we should be able to see which section we are in here.

25
00:01:42,270 --> 00:01:49,470
So I'm just going to scroll right up until I find that what whether we're in public or what.

26
00:01:49,800 --> 00:01:51,210
They go we're in the public section.

27
00:01:51,210 --> 00:01:54,510
So this ought to be in the public section here as well.

28
00:01:54,630 --> 00:01:59,280
So I'm just gonna stick it underneath our tech and set up play input component.

29
00:01:59,310 --> 00:02:00,900
Over in the shooter dot h.

30
00:02:01,410 --> 00:02:03,000
And we'd just paste it in.

31
00:02:03,450 --> 00:02:10,710
And as I said, in the last nature, you can use override to make sure that you're indeed overriding

32
00:02:10,710 --> 00:02:12,540
a virtual method from the parents.

33
00:02:12,600 --> 00:02:17,010
And it's not necessary to have virtual in front here, but we'll keep it anyway.

34
00:02:17,370 --> 00:02:21,570
And he can see all of the data that's coming in to take damage.

35
00:02:21,600 --> 00:02:23,990
We have got a damage amount.

36
00:02:24,480 --> 00:02:30,540
The damage events and the controller that is causing the damage, the instigator and the damage caused

37
00:02:30,540 --> 00:02:34,250
all that stuff that we'd passed in from the gun is cropping up here as well.

38
00:02:34,260 --> 00:02:34,980
So that's great.

39
00:02:35,370 --> 00:02:41,040
Now, if we go ahead and do a control shift, P creates implementation or copy and paste, then we can

40
00:02:41,040 --> 00:02:43,680
go and make the implementation for take damage.

41
00:02:43,950 --> 00:02:49,230
But the first thing to be wary of is that whenever we we're overriding something we want to think about

42
00:02:49,230 --> 00:02:56,490
calling the O the parents class version of take damage because there may be some implementation in there

43
00:02:56,880 --> 00:02:58,410
that needs to run.

44
00:02:59,040 --> 00:03:00,150
So that's what we're going to do.

45
00:03:00,150 --> 00:03:01,060
We do this always.

46
00:03:01,080 --> 00:03:02,190
We've done it with tech.

47
00:03:02,250 --> 00:03:03,710
We've done it with begin play.

48
00:03:03,720 --> 00:03:05,790
You can see we've always got this supercool at the beginning.

49
00:03:06,060 --> 00:03:09,210
And that's because when we override a method, we override it completely.

50
00:03:09,210 --> 00:03:11,010
We completely remove that behavior.

51
00:03:11,310 --> 00:03:16,980
So if we do want that behavior, which we typically do, then we should always start with a call to

52
00:03:16,980 --> 00:03:17,610
super.

53
00:03:17,700 --> 00:03:19,830
So we're going to do a call, take damage.

54
00:03:21,520 --> 00:03:23,560
That's going to take the damage amount.

55
00:03:23,650 --> 00:03:27,880
So this is where it gets a little bit tedious, sadly, my alter complete tool doesn't do this for us

56
00:03:27,880 --> 00:03:29,050
damage event.

57
00:03:30,700 --> 00:03:34,810
Then what was the next one we had the control.

58
00:03:35,200 --> 00:03:42,190
So the event instigator, it's just copy and then we've got the damage causer, which is the actor.

59
00:03:43,360 --> 00:03:48,160
So all of that gets called up to the parents implementation of take damage.

60
00:03:48,790 --> 00:03:52,210
And the one other thing is that this has a return type.

61
00:03:52,300 --> 00:03:54,370
So the actual damage applied.

62
00:03:54,490 --> 00:03:55,690
So we're going to float.

63
00:03:56,830 --> 00:04:01,450
Damage applied is the return value from take damage.

64
00:04:01,480 --> 00:04:06,820
So we're just going to keep hold of that damage applied there and realistically, that's going to be

65
00:04:06,820 --> 00:04:10,870
the same as the damage amount in our particular use case.

66
00:04:11,200 --> 00:04:12,170
But not necessarily.

67
00:04:12,190 --> 00:04:14,370
So we're going to use the damage applied.

68
00:04:14,890 --> 00:04:20,800
The next thing I want to do is keep hold of the information about how much health we've actually got.

69
00:04:21,250 --> 00:04:24,850
Now, the way I'm going to do this is with two variables here.

70
00:04:25,210 --> 00:04:30,250
The first one is I'm going to make both them you properties because I want to make the health visible

71
00:04:30,310 --> 00:04:31,930
in the inspector, at least for now.

72
00:04:32,620 --> 00:04:37,210
And we're going to have the first you property be the max health.

73
00:04:37,240 --> 00:04:39,460
That's what we initialize the health to initially.

74
00:04:39,790 --> 00:04:48,010
So you property, it's going to be an edit defaults only because it's going to be used in Biggin play.

75
00:04:48,370 --> 00:04:53,140
And so changing that value of Mac's health after the fact, it's not going to have any impact.

76
00:04:53,160 --> 00:05:00,940
So, Max, health, I'm going to set the max health to 100 here, and then we're going to have one other

77
00:05:00,940 --> 00:05:05,800
property here, which, as I said, is going to be a new property just for us to be able to inspect

78
00:05:05,800 --> 00:05:06,010
it.

79
00:05:06,490 --> 00:05:09,580
And I'm going to have that as visible anywhere.

80
00:05:10,710 --> 00:05:15,090
But not editable, because we don't want to be able to change that health, at least not at the moment.

81
00:05:15,690 --> 00:05:18,780
He might want that for debugging purposes, but I don't.

82
00:05:19,200 --> 00:05:27,060
So we're gonna have health here and in begin play, we're going to set it up so that that health.

83
00:05:28,160 --> 00:05:30,830
Is equal to the max health.

84
00:05:31,220 --> 00:05:35,720
So we start off with Sporn, we have our maximum health and then we can start decreasing.

85
00:05:35,720 --> 00:05:41,570
It says time for a challenge for you to decrease the health of the character.

86
00:05:41,990 --> 00:05:48,470
So you're going to use the damage applied here rather than the other option here.

87
00:05:48,500 --> 00:05:52,750
So we've got to shoot character CVP, take damage.

88
00:05:52,760 --> 00:05:57,460
We've got a damage amount, but we actually want the damage applied that comes back from take damage

89
00:05:57,470 --> 00:06:01,880
cause that could have been reduced by some process in the parents.

90
00:06:02,750 --> 00:06:03,440
So we do that.

91
00:06:03,440 --> 00:06:10,430
Then we reduce the value of health and log the results just for simplicity's sake so that you can check

92
00:06:10,430 --> 00:06:16,070
that when you're shooting at that A.I. that his health is going down and then test it out.

93
00:06:16,130 --> 00:06:17,600
So pause video and have a go.

94
00:06:18,140 --> 00:06:19,160
Okay, welcome back.

95
00:06:19,220 --> 00:06:20,360
So let's give it a shot.

96
00:06:20,750 --> 00:06:27,710
So health, we basically wants to decrease that by the damage applied.

97
00:06:29,370 --> 00:06:30,660
But is that enough?

98
00:06:31,050 --> 00:06:36,930
Well, what if and damage applied is greater than the amount of health we have got left?

99
00:06:37,560 --> 00:06:43,650
Well, in that case, we probably want the damage applied to be that amount of health.

100
00:06:44,100 --> 00:06:47,610
So the way we can do this is we can say that the damage applied.

101
00:06:48,910 --> 00:06:54,430
Should be equal to the F math dalts, men of the health.

102
00:06:55,790 --> 00:06:57,610
And the damage applied.

103
00:06:58,070 --> 00:07:00,830
So this is the damage that we basically want to apply.

104
00:07:01,340 --> 00:07:06,050
So we're going to I'm actually gonna go ahead and rename that instead of calling it damage applied.

105
00:07:06,560 --> 00:07:09,830
I'm going to call it the damage to apply.

106
00:07:10,920 --> 00:07:19,530
Damage to apply like Soga, rename that throughout here and then the damage to apply against health,

107
00:07:19,560 --> 00:07:21,420
minus the damage to apply.

108
00:07:21,480 --> 00:07:25,310
That makes sense and that basically at worst, that's going to be the health.

109
00:07:25,310 --> 00:07:28,080
So that's going to set our health down to zero.

110
00:07:29,070 --> 00:07:32,970
And remember, we're supposed to return the damage that we actually applied.

111
00:07:33,150 --> 00:07:37,950
So to return damage to apply, which has now been applied.

112
00:07:38,340 --> 00:07:44,700
And we finally once a year, we log at the end here, which is just going to be a warning so we can

113
00:07:44,700 --> 00:07:45,240
see it.

114
00:07:46,320 --> 00:07:50,340
And I want this to be the health left here.

115
00:07:50,370 --> 00:07:55,830
And that's going to be a percent F two percent lowercase F to show a float.

116
00:07:56,490 --> 00:08:02,340
And then we can pop in the health right there and go ahead and hit.

117
00:08:02,340 --> 00:08:02,880
Build.

118
00:08:05,060 --> 00:08:08,720
Now, mine's compiled after fixing a missing semicolon here.

119
00:08:08,750 --> 00:08:11,960
Let's go and make sure that we have a window.

120
00:08:12,460 --> 00:08:17,840
Developer tools and we want the output log here so that we can see that log message.

121
00:08:18,320 --> 00:08:24,860
And I'm going to go ahead and hit play and go and try and shoot at this character.

122
00:08:24,980 --> 00:08:26,160
If I shoot him, they go.

123
00:08:26,180 --> 00:08:30,200
Health left 90, 70, 60, blah, blah, all the way down to zero.

124
00:08:30,230 --> 00:08:35,280
And if I keep shooting, we don't go below zero because of that F math dot min.

125
00:08:35,720 --> 00:08:40,940
So that tells me that we've got our health setup correctly, just another way of doing it, as opposed

126
00:08:40,940 --> 00:08:42,150
to doing it within a compound.

127
00:08:42,200 --> 00:08:46,430
You can do it within the actor as well as some pros and cons of that approach.

128
00:08:46,850 --> 00:08:51,800
Eventually, you may want to strip this out into a separate components so that you can reuse it on different

129
00:08:51,830 --> 00:08:52,250
elements.

130
00:08:52,580 --> 00:08:58,010
But this is just another way, as I say now, because this character isn't looking particularly dead

131
00:08:58,010 --> 00:09:00,020
after we shot him down to zero health.

132
00:09:00,290 --> 00:09:02,900
We need to fix up the animations to support that.

133
00:09:02,990 --> 00:09:04,970
So we'll see that in the next lecture.

134
00:09:05,060 --> 00:09:05,960
And I'll see you there.
