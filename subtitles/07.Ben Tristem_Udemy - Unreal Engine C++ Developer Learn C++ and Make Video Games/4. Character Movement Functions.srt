1
00:00:04,420 --> 00:00:09,100
Hello and welcome and this lecture, we're gonna be looking at hooking up our character movement so

2
00:00:09,100 --> 00:00:16,240
that we can move forward, strafe and look around our world, the classics of moving around in a first

3
00:00:16,240 --> 00:00:17,920
person or third person shooter.

4
00:00:17,980 --> 00:00:19,210
Let's dive in and see how it's done.

5
00:00:20,560 --> 00:00:26,290
So continuing along in the vein of trying to get our character movement working, we are, first of

6
00:00:26,290 --> 00:00:28,680
all, going to want to bind some input.

7
00:00:28,720 --> 00:00:32,560
But we're also going to know want to know what to bind that input to.

8
00:00:33,100 --> 00:00:38,440
Fortunately, when it comes to characters, there's a lot of simplifying stuff going on for us, after

9
00:00:38,440 --> 00:00:38,620
all.

10
00:00:38,680 --> 00:00:44,200
Unreal really is an engine that's optimized for making things like shooter games, character games.

11
00:00:44,650 --> 00:00:51,970
And let's have a look at some of the movement functions are already provided for us by the character

12
00:00:52,210 --> 00:00:57,670
actor class, not just the character movement component, but also the character actor class provides

13
00:00:57,670 --> 00:01:01,980
these and often passes a lot of this onto the character movement component and on Cirilli.

14
00:01:02,440 --> 00:01:04,930
So let's see what movement functions we're gonna be dealing with.

15
00:01:04,930 --> 00:01:10,840
First of all, there is going to be add movement input, add movement input basically takes a vector

16
00:01:11,170 --> 00:01:12,850
and tells you which direction you gonna move in.

17
00:01:12,850 --> 00:01:14,680
So if it's a forward vector, you move forward.

18
00:01:14,680 --> 00:01:18,460
If it's a backwards vector, you move backwards, if it right vct move right and so on.

19
00:01:18,830 --> 00:01:22,420
And the size of the vector is going to determine how fast you move in that direction.

20
00:01:23,110 --> 00:01:27,310
The next thing is we've got ad controller pitch in input.

21
00:01:27,700 --> 00:01:32,080
So that's about looking up and down, which is obviously very useful.

22
00:01:32,080 --> 00:01:35,320
When you've got your mouse, you want to be looking up and down by moving your mouse up and down.

23
00:01:36,130 --> 00:01:39,820
Then there's ad controller, your input, which is going left and right.

24
00:01:40,540 --> 00:01:44,890
And finally there is a jump function, which is just that maybe you hit the spacebar and you jump.

25
00:01:45,520 --> 00:01:52,060
So with these things in mind, what we want to go ahead and do is create some bindings in our character

26
00:01:52,360 --> 00:02:00,640
actor class that's bind some input or some inputs on your keyboard, your mouse, your controller to

27
00:02:00,700 --> 00:02:05,320
these functions so we can do a few and then we're gonna do a challenge to do the rest.

28
00:02:05,980 --> 00:02:11,920
So let's go over to Visual Studio Code, and I'm in my shooter character Dot H.

29
00:02:12,520 --> 00:02:18,510
And we noticed that we've got already here the set up a player input component function.

30
00:02:18,580 --> 00:02:20,700
This is where we need to bind our inputs.

31
00:02:21,070 --> 00:02:27,090
I'm gonna hit alt o to go over to the C++ and find where we've got that set up.

32
00:02:27,100 --> 00:02:31,760
So the first thing is it gives us this play input component that we want to bind with.

33
00:02:31,780 --> 00:02:33,580
If you remember, this is the way we do it.

34
00:02:33,580 --> 00:02:35,690
We have a player input component.

35
00:02:36,440 --> 00:02:40,690
Here's the Arrow operator and we then do a bind function here.

36
00:02:40,690 --> 00:02:48,790
So it's either a bind access or it's going to be a bind action depending on whether it's a discrete

37
00:02:48,820 --> 00:02:56,260
actions such as jump or whether it is an action as a value, such as looking up and down or moving.

38
00:02:56,620 --> 00:03:01,060
Moving doesn't with a key, but moving does when you have something like a controller.

39
00:03:03,240 --> 00:03:10,440
So really, to take a step even further back, we need to go ahead and set up these actions and axes

40
00:03:10,890 --> 00:03:12,130
in our project setting.

41
00:03:12,180 --> 00:03:18,510
So let's go back over into one real go to settings, project settings, and then I'm going to dock this

42
00:03:18,510 --> 00:03:24,180
down so we can see it very clearly and we're going to go to the input section.

43
00:03:24,240 --> 00:03:30,750
So engine input and set up some axes, mappings and some action mappings.

44
00:03:32,960 --> 00:03:38,990
So the ones I'm going to deal with right off the bat are the axes mappings for we're going to have,

45
00:03:38,990 --> 00:03:41,270
first of all, a move forward.

46
00:03:42,630 --> 00:03:47,270
And we're going to have also a look up, Nahrawan.

47
00:03:47,310 --> 00:03:53,640
We don't have a move forward and a move backwards because we can just do that with negative scale.

48
00:03:54,180 --> 00:03:59,130
So, for example, I want to set up my W key to be my move forward.

49
00:03:59,460 --> 00:04:00,660
So that is scale one.

50
00:04:01,050 --> 00:04:07,830
But if I want my esky to be my move back, I can still use move forward, but give it the scale of minus

51
00:04:07,830 --> 00:04:08,130
one.

52
00:04:08,190 --> 00:04:09,420
Just a quick reminder for you.

53
00:04:09,450 --> 00:04:10,650
Same with look up.

54
00:04:10,680 --> 00:04:12,240
I'm going to be using the mouse for this.

55
00:04:12,240 --> 00:04:15,120
Will can cover controller input in the next lecture.

56
00:04:15,630 --> 00:04:17,130
We're going to use the mouse.

57
00:04:17,190 --> 00:04:17,790
Why?

58
00:04:17,850 --> 00:04:18,510
Now remember.

59
00:04:18,540 --> 00:04:21,810
Why is the one that goes up and down rather than left and right?

60
00:04:22,200 --> 00:04:24,240
Because it's kind of a bit taller, isn't it?

61
00:04:24,300 --> 00:04:26,610
A Y is a little bit of a taller letter than an X.

62
00:04:26,940 --> 00:04:28,100
That's how I remember it anyway.

63
00:04:28,160 --> 00:04:29,640
So Mouse Y is up and down.

64
00:04:30,390 --> 00:04:35,130
And then we'll have to tweak with the scale, see whether it's going in the right direction.

65
00:04:35,460 --> 00:04:39,810
But basically, this will give us negative values if we're going down and positive values if we're going

66
00:04:39,810 --> 00:04:40,080
up.

67
00:04:40,470 --> 00:04:45,150
So we may need to tweak we'll look up to see whether this is going to go in the right direction.

68
00:04:45,180 --> 00:04:51,420
But you get the idea we can either invert the scale or not, depending on the type of input that's coming

69
00:04:51,420 --> 00:04:51,810
in here.

70
00:04:53,310 --> 00:04:56,330
So once we've got the axis name, we can go back into the C++.

71
00:04:56,810 --> 00:05:01,620
We're going to bind it using the text macro and the text of the axis name.

72
00:05:02,160 --> 00:05:07,260
Then we need to say who we're going to call the function on and what function we're going to call.

73
00:05:07,590 --> 00:05:10,260
We currently don't have a function that we want to call.

74
00:05:10,320 --> 00:05:17,190
So I'm going to go and create a new private function over in my C++ header file.

75
00:05:17,760 --> 00:05:23,190
And it is going to be a void function that is going to be called move forward.

76
00:05:24,680 --> 00:05:28,140
And it's going to take the float, which is going to be the axis value.

77
00:05:31,630 --> 00:05:37,150
Finish off with a semicolon and go little tricky little extension here that helps me implement these

78
00:05:37,150 --> 00:05:40,360
things a little bit quicker by doing control shift P and.

79
00:05:42,800 --> 00:05:48,860
If I type in create implementation, it goes ahead and create site implementation for me in the C++

80
00:05:48,860 --> 00:05:49,130
file.

81
00:05:49,160 --> 00:05:50,090
Really nice and easy.

82
00:05:50,450 --> 00:05:52,500
The name of that extension if I go over.

83
00:05:52,700 --> 00:05:57,020
I always forget the names of my extensions, so I'll go and have a look for what it might be.

84
00:05:58,010 --> 00:05:59,270
Yes, it's this little doozy here.

85
00:05:59,300 --> 00:06:05,270
The C++ helper, if you go ahead and install this one for your Vyas code, it just allows you to do

86
00:06:05,390 --> 00:06:07,310
that sort of thing, which is very nice.

87
00:06:07,310 --> 00:06:07,850
Very handy.

88
00:06:09,860 --> 00:06:12,290
So this is the function that we want to set it up to call.

89
00:06:12,350 --> 00:06:15,050
So, first of all, we say this, this is the target.

90
00:06:15,080 --> 00:06:18,380
The current object is the target for this function.

91
00:06:18,800 --> 00:06:23,450
Then we go ahead and put in the issue to the fully qualified function.

92
00:06:23,500 --> 00:06:26,270
H's character, Chalong Kolon, move forward.

93
00:06:26,630 --> 00:06:29,030
And that should bind us to this function.

94
00:06:29,780 --> 00:06:36,350
And then finally, what we want to do is pass that access value on to the function that we actually

95
00:06:36,350 --> 00:06:39,650
want to call, which is a parent function.

96
00:06:39,680 --> 00:06:40,820
So we don't have to do anything.

97
00:06:40,830 --> 00:06:43,640
We can just do add movement.

98
00:06:45,910 --> 00:06:46,210
Input.

99
00:06:46,270 --> 00:06:46,780
Like so.

100
00:06:47,830 --> 00:06:53,800
So because this is the move forward method, we want to have the forward vector of the actor.

101
00:06:54,160 --> 00:06:59,310
So the way we do that is we can do a get actor forward vector like so.

102
00:07:00,190 --> 00:07:06,190
And then we want it to be forwards in the amount that our axis value gives us so we can multiply by

103
00:07:06,190 --> 00:07:07,210
the axis value.

104
00:07:07,930 --> 00:07:09,520
And that's going to give us the right result.

105
00:07:09,760 --> 00:07:12,160
So we're going to have the forward vector multiplied by the axis.

106
00:07:12,160 --> 00:07:13,340
Value his one.

107
00:07:13,480 --> 00:07:13,950
Go forward.

108
00:07:13,960 --> 00:07:16,720
If it's minus one, a forward vector becomes a backwards vector.

109
00:07:17,050 --> 00:07:19,450
And we're going backwards with just this one function.

110
00:07:19,690 --> 00:07:21,300
So that's set us up with at.

111
00:07:21,400 --> 00:07:22,270
Move forward.

112
00:07:22,300 --> 00:07:22,660
Great.

113
00:07:23,020 --> 00:07:26,650
The next thing is to bind for our look up.

114
00:07:26,920 --> 00:07:27,550
So let's go.

115
00:07:27,580 --> 00:07:32,740
And Koppio, we'd like to copy these string references so that I don't make a mistake and do a look

116
00:07:32,740 --> 00:07:33,010
up.

117
00:07:33,070 --> 00:07:36,400
And instead of binding to move forward, let's go back to the head of file and create something new.

118
00:07:36,520 --> 00:07:38,320
It's going to be look up.

119
00:07:38,830 --> 00:07:41,050
And again, a float axis value.

120
00:07:42,490 --> 00:07:42,880
Like, say.

121
00:07:44,060 --> 00:07:48,680
And if I do control Sheriff P and do create implementation, goes ahead and saves me a little bit of

122
00:07:48,680 --> 00:07:54,200
time, and this time, instead of doing ad movement inputs, we want to use one of those other functions

123
00:07:54,200 --> 00:07:55,460
that we had at our disposal.

124
00:08:00,530 --> 00:08:05,720
Namely, the ad controller pitch input because want to pitch up basically.

125
00:08:06,260 --> 00:08:10,160
So this time we can do ad controller.

126
00:08:12,230 --> 00:08:15,680
Pitch input and pass indirectly the access value.

127
00:08:16,130 --> 00:08:22,040
Now the a bit more experienced C++ programmers among you might say, hey, this function basically does

128
00:08:22,040 --> 00:08:22,430
nothing.

129
00:08:22,550 --> 00:08:26,120
It is just calling some other function with the same parameter.

130
00:08:26,150 --> 00:08:27,950
So it's not really doing very much.

131
00:08:28,190 --> 00:08:29,150
And you would be right.

132
00:08:29,210 --> 00:08:33,890
So what we could do is we could do the a shooter character look up.

133
00:08:34,130 --> 00:08:37,910
So we could call the function that was defined on this class.

134
00:08:37,940 --> 00:08:39,020
The a shooter character.

135
00:08:39,950 --> 00:08:42,990
Or we could say, well, there's ad control.

136
00:08:43,040 --> 00:08:46,520
Pitch inputs that we could just call that are readily, couldn't we?

137
00:08:46,910 --> 00:08:54,350
So if we use at 12 to find out where that's defined and you go and navigate to it, you can see that

138
00:08:54,350 --> 00:08:56,580
it is being defined in actually porn.

139
00:08:56,630 --> 00:08:57,320
Dot h.

140
00:08:57,350 --> 00:09:00,410
So if you scroll up, you can see here all the way up here somewhere.

141
00:09:00,860 --> 00:09:02,930
We're going to find a class.

142
00:09:03,050 --> 00:09:06,980
This could even just search for class space, something like that.

143
00:09:08,100 --> 00:09:10,920
And here we've got a porn is the class.

144
00:09:11,100 --> 00:09:17,100
So let's go back to the shooter character and what we can try and just make this a little bit shorter

145
00:09:17,550 --> 00:09:26,700
by saying instead, let's do a porn Kolon Kolon ad controller pitch input so that it automatically just

146
00:09:26,700 --> 00:09:31,560
directly calls that parent function rather than having to go via our own function.

147
00:09:31,620 --> 00:09:35,160
This is a valid way to do as well, but it's just not necessary.

148
00:09:35,190 --> 00:09:40,380
So I'm going to comment it out so that you can refer to it and see it if you wants to do it that way.

149
00:09:40,890 --> 00:09:44,400
But I would recommend doing it slightly shorter routes like so.

150
00:09:45,360 --> 00:09:46,580
Oh, and trying to compile it.

151
00:09:46,640 --> 00:09:51,980
I noticed that instead of calling BINDE Access, as I had been wanting to do, I've been doing binde

152
00:09:52,070 --> 00:09:52,700
action.

153
00:09:53,000 --> 00:09:55,580
So you've probably been screaming at your screen the whole time.

154
00:09:55,610 --> 00:09:57,160
Let's go ahead and build that again.

155
00:09:57,170 --> 00:10:01,190
By the way, I'm doing that with a control shift B and selecting the build option.

156
00:10:01,190 --> 00:10:03,200
That is the simple shooter.

157
00:10:03,320 --> 00:10:10,340
Ed Wynn, 64 development build just a quicker way for me than going over and hitting the compile button.

158
00:10:11,830 --> 00:10:17,530
I'll look and I can't get my syntax right today, of course, we need to use the ampersand in front

159
00:10:17,920 --> 00:10:22,930
of this function to say basically that we want to get the pointer.

160
00:10:24,460 --> 00:10:29,020
We want to use the ampersand in front of these functions to actually have the correct syntax here.

161
00:10:36,520 --> 00:10:36,650
OK.

162
00:10:36,780 --> 00:10:43,020
So after I corrected those two very common errors, one being that I'd got the wrong function call and

163
00:10:43,020 --> 00:10:47,430
the other being that I had gone ampersand in front the functions I'm trying to use.

164
00:10:47,820 --> 00:10:51,700
Let's go over into one real and see whether this is actually working.

165
00:10:51,700 --> 00:10:56,550
If I go ahead and hit play and use a W key in the ASCII, you can see I can move forward and backwards.

166
00:10:56,550 --> 00:10:57,180
It's amazing.

167
00:10:57,610 --> 00:11:03,570
And with the mouse I can look up and down but is feeling inverted at the moment to my movements.

168
00:11:03,660 --> 00:11:09,690
So I'm just gonna go over to the product settings and hit minus one in there and go ahead and hit play.

169
00:11:11,330 --> 00:11:13,730
And now if I go up and down, it feels correct.

170
00:11:13,800 --> 00:11:16,600
Notice that I'm actually spawning in two different locations.

171
00:11:16,610 --> 00:11:18,280
That's because I have to play a starts.

172
00:11:18,290 --> 00:11:21,970
When I put the second one in, I didn't realize there was already one in the level, which is why I'm

173
00:11:21,980 --> 00:11:24,770
sometimes spawning here, sometimes spawning in a different location.

174
00:11:24,770 --> 00:11:25,910
You might find the same thing.

175
00:11:27,910 --> 00:11:29,530
So it is challenge time.

176
00:11:29,560 --> 00:11:32,120
Let's get you guys binding your move.

177
00:11:32,140 --> 00:11:37,570
My rights and your look rights so that we've got full control of our movements.

178
00:11:37,570 --> 00:11:40,120
So repeats the process that I've just done in the lecture.

179
00:11:40,450 --> 00:11:45,160
For both of these two and you've probably been following along, if not, you can go in and watch to

180
00:11:45,160 --> 00:11:45,730
revise.

181
00:11:46,150 --> 00:11:49,750
And also, I'd like you to attempt the jump function as well.

182
00:11:50,290 --> 00:11:52,540
If you're feeling brave, pause video and have a go.

183
00:11:53,580 --> 00:11:54,290
Kay, welcome back.

184
00:11:54,320 --> 00:11:55,920
So let's give this a shot.

185
00:11:55,940 --> 00:11:58,740
First of all, we're repeating the above steps forward.

186
00:11:58,790 --> 00:12:01,240
Move forward and look up.

187
00:12:01,290 --> 00:12:04,500
So we're gonna be having move, right?

188
00:12:05,300 --> 00:12:06,680
And we're gonna be having a sort of look up.

189
00:12:06,680 --> 00:12:07,760
We're gonna be have a look.

190
00:12:07,850 --> 00:12:08,510
Right.

191
00:12:09,290 --> 00:12:13,880
And we can go ahead and copy these to set up our axes in the project's settings.

192
00:12:14,360 --> 00:12:16,760
So add another couple of axes mappings.

193
00:12:16,760 --> 00:12:18,050
The first one gonna be move.

194
00:12:18,050 --> 00:12:18,410
Right.

195
00:12:18,440 --> 00:12:22,550
Which I'm going to map to the key, a four left.

196
00:12:22,940 --> 00:12:28,630
So that's going to be the minus one is going to be minus one because we've actually left the opposite.

197
00:12:28,640 --> 00:12:28,990
Right.

198
00:12:29,690 --> 00:12:33,580
And D is going to be four going right now.

199
00:12:33,590 --> 00:12:35,840
Obviously, you can add in the Arrow Keys here as well.

200
00:12:35,840 --> 00:12:37,640
I'm just not doing that save time.

201
00:12:37,970 --> 00:12:39,770
But you can go ahead and do the same thing.

202
00:12:39,800 --> 00:12:44,720
You can just add more keys here, as many keys as you like to map to that single axis.

203
00:12:45,560 --> 00:12:46,100
Look, right.

204
00:12:46,460 --> 00:12:49,940
We're going to use the mouse x.

205
00:12:51,040 --> 00:12:54,630
And I think one should be sufficient rather than minus one, we.

206
00:12:54,830 --> 00:12:56,150
I don't think we have to invert this one.

207
00:12:57,350 --> 00:13:00,220
And then what we're gonna do is we're gonna bind this slightly differently.

208
00:13:00,230 --> 00:13:05,300
So I'm going to go out o to go and create ourselves a move.

209
00:13:05,450 --> 00:13:05,950
Right.

210
00:13:05,960 --> 00:13:06,710
Function here.

211
00:13:08,060 --> 00:13:13,240
Now, you might be wondering, why are we doing this differently, why is move right?

212
00:13:13,280 --> 00:13:15,290
Why we're not just calling straight add movement input.

213
00:13:15,770 --> 00:13:17,600
The difference is here we're doing a bit of calculation.

214
00:13:17,600 --> 00:13:22,430
We're adding in this multiplication by a vector, which is adding a bit of information and justifying

215
00:13:22,430 --> 00:13:24,020
the existence for this function.

216
00:13:24,500 --> 00:13:30,320
So this time, instead of getting the act of forward, we want to get the actor right vector like.

217
00:13:30,320 --> 00:13:32,180
So multiply it by the axis value.

218
00:13:32,720 --> 00:13:35,430
And then we want to be calling instead of move forward.

219
00:13:35,450 --> 00:13:36,050
Want to be calling.

220
00:13:36,050 --> 00:13:39,380
Move right now for look.

221
00:13:41,490 --> 00:13:41,860
Right.

222
00:13:42,350 --> 00:13:44,290
Instead of adding the controller pitch.

223
00:13:44,350 --> 00:13:44,870
Input.

224
00:13:45,290 --> 00:13:48,920
We want to be doing the your inputs.

225
00:13:48,980 --> 00:13:50,980
Remember, roll pitch and you're from airplanes.

226
00:13:51,020 --> 00:13:52,130
You can look it up on Wikipedia.

227
00:13:52,430 --> 00:13:53,900
If you're not sure which one is which.

228
00:13:54,420 --> 00:13:55,720
And go ahead and build that one.

229
00:13:55,730 --> 00:13:57,620
Hopefully this time I haven't got the syntax wrong.

230
00:13:58,230 --> 00:14:01,400
Let's dive over to the editor and hit play.

231
00:14:02,730 --> 00:14:06,060
And they go, I can look all the way around me, that's looking good.

232
00:14:06,180 --> 00:14:07,740
I can strafe left and right.

233
00:14:07,760 --> 00:14:09,420
I can go forward and backwards.

234
00:14:09,840 --> 00:14:16,470
So the thing left for us is jump just gonna be an action mapping rather than an axis because it's a

235
00:14:16,470 --> 00:14:17,490
discrete action.

236
00:14:17,730 --> 00:14:19,440
Kind, I call it jump and copy it.

237
00:14:19,920 --> 00:14:20,540
Go over.

238
00:14:20,550 --> 00:14:22,020
It's a visual studio code.

239
00:14:23,190 --> 00:14:27,780
And just close down my compile window and here I'm going to instead of binding an axis.

240
00:14:27,870 --> 00:14:28,470
You've got it.

241
00:14:28,500 --> 00:14:32,550
I'm going to be binding a action bind.

242
00:14:32,850 --> 00:14:33,180
Action.

243
00:14:33,420 --> 00:14:34,040
Simple as that.

244
00:14:34,340 --> 00:14:36,330
I'm going to start off still with the text here.

245
00:14:37,530 --> 00:14:38,120
Of jump.

246
00:14:38,930 --> 00:14:43,220
But the thing that is different with axes, as you probably remember.

247
00:14:45,290 --> 00:14:46,860
Is we need to use this syntax.

248
00:14:46,920 --> 00:14:54,630
I inputs events, which just an enum, which means that it basically can take a number of these different

249
00:14:54,660 --> 00:14:57,730
options, double click, press release, et cetera.

250
00:14:58,320 --> 00:15:01,650
We're going to want to jump on press like.

251
00:15:01,650 --> 00:15:01,980
So.

252
00:15:02,070 --> 00:15:02,490
So.

253
00:15:10,420 --> 00:15:12,170
So that's i.e. underscore prest.

254
00:15:13,110 --> 00:15:18,630
And then once we know that, we can go ahead and do the same this and then we want to be calling to

255
00:15:18,690 --> 00:15:19,350
jump.

256
00:15:20,070 --> 00:15:22,290
Now, where is jump defined?

257
00:15:22,350 --> 00:15:23,040
Is it in the pool?

258
00:15:23,080 --> 00:15:23,730
Let's have a look.

259
00:15:25,050 --> 00:15:25,310
No.

260
00:15:25,710 --> 00:15:27,990
But it might be in the character.

261
00:15:28,040 --> 00:15:32,010
So I'm going to do a control P and look for character dot h.

262
00:15:34,400 --> 00:15:36,270
Open that up and just have a look through here.

263
00:15:36,290 --> 00:15:41,720
See if they have a jump function defined in here, jump and then open brackets often is a good way to

264
00:15:41,720 --> 00:15:43,310
look for functions within the header files.

265
00:15:43,640 --> 00:15:45,370
Sure enough, we have got that function.

266
00:15:45,380 --> 00:15:46,520
You can see the documentation.

267
00:15:46,520 --> 00:15:50,480
I often like to use that source code directly rather than looking at any documentation files.

268
00:15:50,900 --> 00:15:56,300
I just find it sometimes a lot quicker to access, especially when you have access to control P in visual

269
00:15:56,300 --> 00:15:57,050
studio code.

270
00:15:58,130 --> 00:16:02,770
So what we need to do is instead of going pawn Kolon, Kolon, we need to do a character, Carol, on

271
00:16:02,770 --> 00:16:03,140
Kolon.

272
00:16:03,140 --> 00:16:09,300
So it is going to be ampersand, a character Kolon color on this is because that's the class is defined

273
00:16:09,300 --> 00:16:09,530
on.

274
00:16:09,830 --> 00:16:15,620
We can't go looking at the hierarchy when we're doing this Kolon Kolon operator and then this guy is

275
00:16:15,650 --> 00:16:16,330
just going to jump.

276
00:16:16,370 --> 00:16:18,100
So character Kalanchoe on Jump.

277
00:16:18,530 --> 00:16:21,020
And don't forget that I need a semicolon on the other line.

278
00:16:21,050 --> 00:16:24,090
Go ahead and build and see where the raible to jump now.

279
00:16:28,060 --> 00:16:30,280
Well, the build worked out correctly.

280
00:16:30,310 --> 00:16:34,990
Let's go over to the sandbox level, hit play and try and jump.

281
00:16:35,290 --> 00:16:42,100
I don't have any key bound, so that might hamper me at the space in as the key that I want for jump.

282
00:16:42,550 --> 00:16:45,490
And go ahead and hit play.

283
00:16:45,820 --> 00:16:46,380
Yay!

284
00:16:46,420 --> 00:16:49,990
I'm able to jump up and down and move through the air and move around.

285
00:16:50,440 --> 00:16:51,040
Fantastic.

286
00:16:51,070 --> 00:16:55,240
So we've learned how to bind our axes and actions where we haven't learnt it.

287
00:16:55,270 --> 00:17:01,600
We have revised it, but we've seen what we want to bind to in a character in order to get that classic

288
00:17:01,900 --> 00:17:09,400
character jumping, strafing, moving and looking with your camera that we all know and love from our

289
00:17:09,400 --> 00:17:10,000
shooters.

290
00:17:11,330 --> 00:17:18,070
The next lecture will look at the nuances required for moving with a controller as well as a keyboard

291
00:17:18,070 --> 00:17:18,670
and a mouse.
