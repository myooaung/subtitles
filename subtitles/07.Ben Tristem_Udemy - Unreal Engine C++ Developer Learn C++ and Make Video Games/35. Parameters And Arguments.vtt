WEBVTT
1
00:00:04.200 --> 00:00:06.140
Hello everybody and welcome back in this lecture.

2
00:00:06.140 --> 00:00:09.860
We're going to be talking about parameters and arguments.

3
00:00:09.900 --> 00:00:12.240
Now there is some common confusion here.

4
00:00:12.240 --> 00:00:17.280
They are often used interchangeably and you can understand why when you start looking at it.

5
00:00:17.310 --> 00:00:25.290
But strictly speaking parameters are used when defining a function like place holders which then when

6
00:00:25.290 --> 00:00:31.170
we get to the arguments that the actual values used when we call a function.

7
00:00:31.170 --> 00:00:39.030
Now let's implement a new guest checking function which we can use to demonstrate this Okay so let's

8
00:00:39.030 --> 00:00:43.830
have a look at our code make sure we've got everything running as we would expect to see.

9
00:00:43.830 --> 00:00:46.220
So setting up a game that's fine.

10
00:00:46.410 --> 00:00:48.510
And then we set up the game here if the game's over.

11
00:00:48.510 --> 00:00:49.650
That's fine.

12
00:00:49.650 --> 00:00:50.640
And then.

13
00:00:50.640 --> 00:00:53.920
So this is the bit that we're going to be focusing on else.

14
00:00:53.970 --> 00:01:00.030
And then we've got all of this checking and what it would be much better to do here is instead of all

15
00:01:00.030 --> 00:01:05.660
of this code we could move that out into processing the guess itself.

16
00:01:06.420 --> 00:01:13.620
So we can call that function there but it's not going to be happy a it's not declared and it's not defined

17
00:01:13.620 --> 00:01:14.390
anywhere even.

18
00:01:14.450 --> 00:01:20.670
So we're just calling it at the moment as a place holder and then in a bit we can move all of this into

19
00:01:20.670 --> 00:01:22.480
that new function.

20
00:01:22.560 --> 00:01:26.500
Let's go ahead and start writing that function itself.

21
00:01:26.520 --> 00:01:29.810
So at this point it's not going to return anything.

22
00:01:29.890 --> 00:01:37.750
Then we've got the you bulk how cartridge and then process the yes curly brackets.

23
00:01:37.770 --> 00:01:38.790
And there we go.

24
00:01:39.090 --> 00:01:42.830
So it's not going to be happy at the moment because it's not declared anywhere.

25
00:01:42.870 --> 00:01:48.910
So let's go over into the header file and declare our function and then we'll be able to start talking

26
00:01:48.910 --> 00:01:53.930
about parameters and arguments okay.

27
00:01:53.950 --> 00:02:00.570
Save my head a file over into the implementation and we should find now that it's absolutely happy I

28
00:02:00.570 --> 00:02:03.140
mean process guest doesn't do anything.

29
00:02:03.140 --> 00:02:04.850
So we've got no red squiggles everywhere.

30
00:02:05.300 --> 00:02:05.670
Okay.

31
00:02:05.690 --> 00:02:11.690
So looking at the declaration process guess what we need to put inside here is a parameter.

32
00:02:11.860 --> 00:02:15.520
It's not going to be an argument until we actually have some values to fill.

33
00:02:15.540 --> 00:02:19.380
Want to jump into the implementation quickly and have a look here.

34
00:02:19.400 --> 00:02:26.180
So during all of this time that we have been checking the gas we've been using and checking the inputs

35
00:02:26.300 --> 00:02:28.330
against the hidden word.

36
00:02:28.430 --> 00:02:35.590
So when we go and process our gas we need to pass in something for that function to use.

37
00:02:35.590 --> 00:02:42.700
Let's go ahead and move all of this out of the way so it's not cluttering our view and place it within

38
00:02:42.830 --> 00:02:43.820
our function.

39
00:02:44.450 --> 00:02:49.220
So that's looking good to me I'm going to save my work as it is there and this starts to demonstrate

40
00:02:49.220 --> 00:02:57.080
the issues we're comparing it to inputs so we get a read script line because inputs now out of scope

41
00:02:58.060 --> 00:03:06.730
so what we could do here is we could pass an input as an argument we get how red squiggle because in

42
00:03:06.730 --> 00:03:10.600
our head of file we have not said input.

43
00:03:10.630 --> 00:03:17.470
Now if we just leave it as inputs it won't work it won't work because we haven't given it a type.

44
00:03:17.470 --> 00:03:19.470
Here we go is undefined.

45
00:03:19.510 --> 00:03:20.690
It is an F string.

46
00:03:20.710 --> 00:03:26.000
However that's not a really good name at this particular point in time.

47
00:03:26.020 --> 00:03:35.110
However even though we are passing in the input then using inputs again no we won't do that.

48
00:03:35.110 --> 00:03:40.090
That starting to get very confusing if you're using multiple variables or with the same name.

49
00:03:40.120 --> 00:03:42.000
What what else could we call this.

50
00:03:42.000 --> 00:03:44.160
Well guess would be appropriate.

51
00:03:44.170 --> 00:03:49.420
So what we're doing here is we're defining a new variable a place holder variable in this case of type

52
00:03:49.450 --> 00:03:51.970
f string ready to use.

53
00:03:51.970 --> 00:03:56.710
And it's worth mentioning at this point that you don't actually have to name parameters we could just

54
00:03:56.710 --> 00:04:01.060
have two different types in here and you'll see in a moment we've got an F string and we can also have

55
00:04:01.060 --> 00:04:06.460
an integer but it's a good idea to name them at this point in time.

56
00:04:06.580 --> 00:04:12.340
It helps you with auto completion and it also helps when someone else is looking at your code or your

57
00:04:12.340 --> 00:04:14.250
looking at your code later Ron.

58
00:04:14.410 --> 00:04:19.380
It's much better to read it in here rather than just your passing in some types.

59
00:04:19.600 --> 00:04:23.490
It gives you much better readability of your code.

60
00:04:23.720 --> 00:04:28.220
Now we could also at this point have more than one parameter.

61
00:04:28.220 --> 00:04:30.500
I will remove this later on as well.

62
00:04:30.560 --> 00:04:34.400
Let's say we had a counter and a counter Well that's likely to be an integer.

63
00:04:34.460 --> 00:04:35.120
So that's fine.

64
00:04:35.120 --> 00:04:38.590
We could pass in two parameters but watch this.

65
00:04:38.600 --> 00:04:42.770
These parameters they are positional.

66
00:04:42.770 --> 00:04:45.590
So at this point in time we're going to have a red squiggle here.

67
00:04:45.680 --> 00:04:48.040
We've got too few arguments.

68
00:04:48.050 --> 00:04:50.140
So this is an argument the impasse then.

69
00:04:50.630 --> 00:04:57.470
So let's say we've got input and for argument's sake let's pass in lives as well that will take the

70
00:04:57.470 --> 00:04:59.280
value of lives and puts it.

71
00:04:59.300 --> 00:05:02.000
We don't have any other integer for the moment.

72
00:05:02.000 --> 00:05:08.510
So let's go ahead and pass in lives and then down here where we start processing the gas if we hover

73
00:05:08.510 --> 00:05:11.250
over is incompatible.

74
00:05:11.250 --> 00:05:12.560
Well what does all this mean.

75
00:05:13.040 --> 00:05:17.240
Well it simply means that we don't actually have any parameters here.

76
00:05:17.780 --> 00:05:19.340
So let's think what we have.

77
00:05:19.340 --> 00:05:20.810
We had our f string.

78
00:05:20.810 --> 00:05:27.590
Now it might seem a bit onerous to have to type it again but this is what we need to do we need to define

79
00:05:27.620 --> 00:05:30.640
a new variable guess that we're going to use.

80
00:05:30.740 --> 00:05:35.420
Now we could call it to anything at this point but it will have to match what we've got before.

81
00:05:35.420 --> 00:05:40.750
And then we have an int 32 which was our counter and then we've got this issue here.

82
00:05:40.780 --> 00:05:47.270
So we can go ahead here and correct that's now because we're evaluating a new is copied.

83
00:05:47.270 --> 00:05:52.790
The value is past the value into this function and it is now being used as guests.

84
00:05:52.910 --> 00:05:56.260
Now what we cannot do is just use these arbitrarily.

85
00:05:56.260 --> 00:06:03.800
So with the in 30 to counter and then an F string guess that won't work.

86
00:06:03.800 --> 00:06:08.360
And the reason why this is now not working is quite straightforward.

87
00:06:08.390 --> 00:06:10.150
You think it might do but no.

88
00:06:10.160 --> 00:06:13.520
If we have a look at where we declared it this is an absolute.

89
00:06:13.520 --> 00:06:18.330
Here we are saying that the process s function is going to taken an F string.

90
00:06:18.410 --> 00:06:20.010
In this case we have named it.

91
00:06:20.120 --> 00:06:25.220
Incidentally what I was talking about earlier is you could have these like this.

92
00:06:25.250 --> 00:06:31.050
Now you may run across code that does do that perhaps it does multiple things takes in different values.

93
00:06:31.130 --> 00:06:35.960
But for our game it is far better if these things are named at this point.

94
00:06:36.680 --> 00:06:42.530
So we have a declaration that takes in an F string and then an integer.

95
00:06:42.530 --> 00:06:43.730
That's important.

96
00:06:43.730 --> 00:06:46.680
The names here that's for Iowa benefits.

97
00:06:46.790 --> 00:06:50.630
Let's say for head to file for the moment go back over to the implementation.

98
00:06:50.750 --> 00:06:57.470
So when it's around this away in this particular case on line 61 we are defining a function that has

99
00:06:57.470 --> 00:06:58.850
not been declared yet.

100
00:06:59.030 --> 00:07:00.700
That is literally the problem.

101
00:07:00.770 --> 00:07:03.840
The problem further up here.

102
00:07:03.980 --> 00:07:11.480
This would also be a problem as if we scroll down you will see that we've not defined an F string and

103
00:07:11.480 --> 00:07:12.520
an integer.

104
00:07:12.560 --> 00:07:19.850
Currently we have defined an integer and an F string so it will fail because this function call hasn't

105
00:07:19.850 --> 00:07:21.440
been defined anywhere.

106
00:07:21.470 --> 00:07:25.900
So we need to do some tidying up here to make our code better again.

107
00:07:25.910 --> 00:07:28.730
So we're going to set this back to just the input.

108
00:07:28.820 --> 00:07:33.500
That's fine because that's what we're passing in it's going to complain at this point that there's not

109
00:07:33.590 --> 00:07:35.790
enough arguments.

110
00:07:35.810 --> 00:07:39.870
That's because here we've declared there are going to be two parameters.

111
00:07:40.010 --> 00:07:46.310
So it's expecting two arguments to be placed in there we go the red squiggle has gone down here we've

112
00:07:46.310 --> 00:07:51.560
got a problem and it's the order with finding something that has not been declared so he can go ahead

113
00:07:51.590 --> 00:07:58.010
and say that and then the final one is we use inputs again down here so let's go ahead and change that

114
00:07:58.010 --> 00:08:02.290
to guess make sure that we save our work.

115
00:08:02.300 --> 00:08:02.940
Excellent.

116
00:08:02.960 --> 00:08:10.270
And then let's go and test it over ingame sets go ahead compile our code remembering that at this point

117
00:08:10.270 --> 00:08:18.450
because we have modified the header Fala is gonna take longer let's play our game seems to work so far.

118
00:08:18.450 --> 00:08:21.740
Let's check the losing.

119
00:08:21.810 --> 00:08:23.400
Yep that's fine.

120
00:08:23.400 --> 00:08:25.610
And of course winning.

121
00:08:25.920 --> 00:08:26.270
Brilliant.

122
00:08:26.280 --> 00:08:27.340
You have one.

123
00:08:27.390 --> 00:08:27.930
Excellent.

124
00:08:28.230 --> 00:08:31.500
So that is working absolutely fine which is expected.

125
00:08:31.500 --> 00:08:39.120
Now we've done quite a quite a big refactor of the code we've moved everything into its own function

126
00:08:39.150 --> 00:08:43.820
and it's still working absolutely fine and our code is much more readable.

127
00:08:43.830 --> 00:08:48.380
And speaking of readability we're going to be focusing more on that in the next lecture.

128
00:08:48.390 --> 00:08:49.010
See you there.
