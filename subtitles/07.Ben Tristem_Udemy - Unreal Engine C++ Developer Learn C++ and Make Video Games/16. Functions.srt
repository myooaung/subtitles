0
1
00:00:00,360 --> 00:00:03,710
Hey and welcome to this lesson where we are going to learn about functions.
1

2
00:00:03,720 --> 00:00:09,960
But before we dive into functions let's just review the code we've been writing over the previous lessons.
2

3
00:00:10,110 --> 00:00:14,730
We start off our program by printing our intro messages to the terminal.
3

4
00:00:14,730 --> 00:00:18,390
We then move on and declare the code that the player will have to guess.
4

5
00:00:18,420 --> 00:00:23,070
It's hard coded for now but we will be looking into randomize in this soon.
5

6
00:00:23,070 --> 00:00:27,960
We print hints to the terminal for the player we print the sum and the product of the code that they
6

7
00:00:27,960 --> 00:00:29,360
have to guess.
7

8
00:00:29,700 --> 00:00:34,400
And then we move on to declare the variables that will be used for storing the player's guess.
8

9
00:00:34,470 --> 00:00:40,080
And we do this just below by using cin, this allows the player to enter their guess as to what they
9

10
00:00:40,080 --> 00:00:41,660
think the code is.
10

11
00:00:41,730 --> 00:00:48,360
Now we haven't commented this code here so let's do that now let's comment this code as store player
11

12
00:00:48,470 --> 00:00:52,320
gas or something really simple and we can also clean this code up here.
12

13
00:00:52,320 --> 00:00:55,410
We didn't have to have cin on three separate lines.
13

14
00:00:55,410 --> 00:01:00,720
We can remove these two lines here where we call cin on GuessB and GuessC and we can use this line
14

15
00:01:00,720 --> 00:01:06,270
where we just call cin on GuessA we can use the extraction operator again I call that on GuessB
15

16
00:01:06,600 --> 00:01:10,370
and then the extraction operate again to call cin on GuessC.
16

17
00:01:10,440 --> 00:01:17,040
Okay, so from here we move on and declare the sum and the products of the guess the player has made.
17

18
00:01:17,100 --> 00:01:21,130
Then we check to see if the player has made the correct guess or not.
18

19
00:01:21,180 --> 00:01:25,160
And we could add a comment here to something simple that summarizes this code.
19

20
00:01:25,170 --> 00:01:32,730
We can just comment this as check if the player's guess is correct and then we print win or lose messages
20

21
00:01:32,880 --> 00:01:33,990
depending on that.
21

22
00:01:33,990 --> 00:01:34,890
Okay great.
22

23
00:01:34,890 --> 00:01:40,010
Now we've been using end line from the standard namespace to print our strings on new lines.
23

24
00:01:40,080 --> 00:01:42,530
But there's different ways that we can do this.
24

25
00:01:42,660 --> 00:01:46,770
We can use some special characters within our string to help us do this.
25

26
00:01:46,770 --> 00:01:53,430
These special characters are known as escape sequences. Escape sequences are used to represent different
26

27
00:01:53,430 --> 00:01:59,450
characters within a string and they allow us to modify the format of a string.
27

28
00:01:59,460 --> 00:02:00,950
Let's look at an example.
28

29
00:02:00,990 --> 00:02:03,680
Imagine we want to print to the terminal "he said."
29

30
00:02:03,720 --> 00:02:09,810
And then within some quotation marks "Hello, World!". You might try to write this in your code like this
30

31
00:02:10,140 --> 00:02:14,370
but there's an issue here because strings are wrapped in quotation marks.
31

32
00:02:14,370 --> 00:02:17,220
Our string would end before "Hello, World!"
32

33
00:02:17,280 --> 00:02:21,240
We finished the string here and this would cause an error.
33

34
00:02:21,240 --> 00:02:24,990
So an example of how an escape sequence would work here would be like this.
34

35
00:02:24,990 --> 00:02:28,560
The backslash double quote represents the escape sequence.
35

36
00:02:28,560 --> 00:02:33,410
This is how we would form a string to have a quotation mark inserted here.
36

37
00:02:33,640 --> 00:02:37,500
Okay so how can we use an escape sequence for feeding a new line.
37

38
00:02:37,500 --> 00:02:41,070
So we don't have to use end line from the standard namespace.
38

39
00:02:41,100 --> 00:02:42,420
Well it's very simple.
39

40
00:02:42,480 --> 00:02:47,020
We would use the backslash an escape sequence for a new line.
40

41
00:02:47,190 --> 00:02:54,630
And now I want you to modify your strings so you use the new line escape sequence instead of using end
41

42
00:02:54,720 --> 00:02:57,110
line from the standard namespace.
42

43
00:02:57,180 --> 00:03:02,880
So pause here and modify your strings and then we can move on into taking our first look at creating
43

44
00:03:03,030 --> 00:03:04,240
some functions.
44

45
00:03:07,040 --> 00:03:12,650
Okay so I've removed end line from the standard namespace everywhere in my code and I've used the backslash
45

46
00:03:12,710 --> 00:03:16,670
'\n' escape sequence instead for feeding a new line.
46

47
00:03:16,670 --> 00:03:22,850
I've used two of them next to each other at the end of my intro messages to print two blank lines before
47

48
00:03:22,850 --> 00:03:25,400
we move on to print the hints.
48

49
00:03:25,400 --> 00:03:30,860
Now we need to be aware that we can't use the '\n' escape sequence on the end of a variable name
49

50
00:03:30,860 --> 00:03:31,330
.
50

51
00:03:31,370 --> 00:03:34,070
We can only use it within a string.
51

52
00:03:34,100 --> 00:03:39,230
So just note that you can use these escape sequences at the start of your strings for starting new lines
52

53
00:03:39,230 --> 00:03:39,920
as well.
53

54
00:03:39,930 --> 00:03:42,740
I'm making use of this here and where we print the strings.
54

55
00:03:42,800 --> 00:03:45,650
If the player has worked or lost the game.
55

56
00:03:45,680 --> 00:03:46,370
Okay great.
56

57
00:03:46,370 --> 00:03:50,850
Now let's move on and take our first look at creating our own function.
57

58
00:03:50,900 --> 00:03:57,290
A function is simply a group of statements that together perform a task and is given a name.
58

59
00:03:57,320 --> 00:04:04,130
So one thing we already know is that every C++ program must have at least one function which is the
59

60
00:04:04,130 --> 00:04:11,240
main function and we can use the main function as an example to help us understand the syntax of a C++
60

61
00:04:11,240 --> 00:04:12,360
function.
61

62
00:04:12,380 --> 00:04:14,400
Functions can return a value.
62

63
00:04:14,400 --> 00:04:19,420
So when we implement a function in our code we must specify a return type.
63

64
00:04:19,430 --> 00:04:21,300
We can also specify the function to return it.
64

65
00:04:21,320 --> 00:04:24,020
No data that will be taking a look at shortly.
65

66
00:04:24,050 --> 00:04:29,750
In this lesson though the main function we can see that it returns an integer by looking at its return
66

67
00:04:29,750 --> 00:04:30,290
type.
67

68
00:04:30,290 --> 00:04:32,750
And we also see this in its code.
68

69
00:04:32,750 --> 00:04:34,970
Next we have the function name.
69

70
00:04:34,970 --> 00:04:35,610
So remember.
70

71
00:04:35,630 --> 00:04:37,250
Naming is really important.
71

72
00:04:37,250 --> 00:04:40,410
The name is used to describe what the function does.
72

73
00:04:40,430 --> 00:04:46,580
So we always want to be clear with our naming. Functions can have parameters that we can pass arguments
73

74
00:04:46,580 --> 00:04:51,200
into by using these parentheses to affect the functions operation.
74

75
00:04:51,230 --> 00:04:56,030
Now the main function isn't a good example of this but we will be taking a look at how we can create
75

76
00:04:56,030 --> 00:05:01,040
parameters in the upcoming lessons for this section and it'll become much clearer by then.
76

77
00:05:01,040 --> 00:05:06,030
But these parentheses are a part of the syntax so it's really important that we include them.
77

78
00:05:06,170 --> 00:05:12,050
Then we have the function body that makes up the individual statements of our function so we must follow
78

79
00:05:12,050 --> 00:05:14,570
these guidelines when we write our own function.
79

80
00:05:14,570 --> 00:05:19,310
Now we're going to write our own function that will handle playing our game and we're going to move
80

81
00:05:19,340 --> 00:05:23,280
our code we've been writing so far into this function.
81

82
00:05:23,450 --> 00:05:30,080
Our function will return no data type the name of our function is going to be PlayGame and we want
82

83
00:05:30,080 --> 00:05:36,950
to make use of Unreal's naming convention here which is UpperCamelCase also known as PascalCase is going
83

84
00:05:36,950 --> 00:05:43,340
to have no parameters and the function body is simply going to contain the code for playing our game.
84

85
00:05:43,340 --> 00:05:47,790
So let's switch back to Visual Studio Code and start writing this function together.
85

86
00:05:47,870 --> 00:05:51,090
I'm going to add a couple of new lines at the start of my file.
86

87
00:05:51,110 --> 00:05:56,480
Now we need to start with the return type but we don't need this function to return any type of data
87

88
00:05:56,480 --> 00:06:00,710
yet so to do this we just need to use void as the return type.
88

89
00:06:00,710 --> 00:06:06,410
Next we want to name the function we're going to name it PlayGame and we're not going to create any
89

90
00:06:06,410 --> 00:06:10,110
parameters for it but we still need to add the parentheses.
90

91
00:06:10,250 --> 00:06:13,760
We don't need a semicolon on the end of the line either.
91

92
00:06:13,760 --> 00:06:19,700
We can start a new line and open our curly braces to start writing the function's body but we're not
92

93
00:06:19,700 --> 00:06:21,140
going to write any code into this.
93

94
00:06:21,140 --> 00:06:25,610
We're going to select all of our code we've written in the main function and paste it into our play
94

95
00:06:25,610 --> 00:06:26,830
game function.
95

96
00:06:26,990 --> 00:06:31,580
So to do this we can select the start of the first line in the main function and then we can scroll
96

97
00:06:31,610 --> 00:06:37,700
all the way down and then hold left shift and left click into our code just before we return 0 at the
97

98
00:06:37,700 --> 00:06:38,960
end of the main function.
98

99
00:06:38,960 --> 00:06:44,990
Now we can hold "Control + X" to cut it and we can scroll up and paste it into the play game function.
99

100
00:06:44,990 --> 00:06:49,220
Remember if you make a mistake you can press "Control + Z" that to undo as well.
100

101
00:06:49,220 --> 00:06:55,190
So we don't need to type "return 0" at the end of our play game function like we do in main because our
101

102
00:06:55,190 --> 00:06:58,220
play game function doesn't return any data.
102

103
00:06:58,280 --> 00:07:05,570
That's why we use the keyword void as its data type void means that this function will return no data.
103

104
00:07:05,600 --> 00:07:07,130
So let's see what happens now.
104

105
00:07:07,340 --> 00:07:16,330
If we save our work compile our code and then run our program we can see now that nothing has happened.
105

106
00:07:16,340 --> 00:07:22,240
It's like our program isn't working but this is because the entry point of our program is main.
106

107
00:07:22,280 --> 00:07:27,080
main runs and it simply returns zero and then the program exits.
107

108
00:07:27,080 --> 00:07:32,480
We haven't told main to execute our PlayGame function. To do this
108

109
00:07:32,480 --> 00:07:39,320
we simply type the name of the function inside the function body of main followed by the parentheses
109

110
00:07:39,530 --> 00:07:44,170
and a semicolon and we can remove any blank lines we have here as well.
110

111
00:07:44,170 --> 00:07:49,730
We can also remove the blank line between the if and else statement at the end of our PlayGame function
111

112
00:07:49,730 --> 00:07:54,110
because we traditionally wouldn't have a blank line between the if and else statements.
112

113
00:07:54,110 --> 00:08:02,120
So now if we save our work and compile our code and then run TripleX again we can see now that it runs
113

114
00:08:02,180 --> 00:08:04,660
our program but I've got an issue here.
114

115
00:08:04,670 --> 00:08:06,340
Notice that I'm now entering numbers.
115

116
00:08:06,430 --> 00:08:08,890
On the same line my text is on.
116

117
00:08:08,980 --> 00:08:13,710
This is because I'm not specifying a new line at the end of my hints.
117

118
00:08:13,750 --> 00:08:19,840
So if I scroll up to where my hints are I can actually make use of and line from the standard namespace
118

119
00:08:19,840 --> 00:08:25,300
here because we can't use our escape sequence that starts a new line on the end of our variable name
119

120
00:08:25,600 --> 00:08:28,000
so we can use end line to output a new line.
120

121
00:08:28,000 --> 00:08:32,120
But we could use backslash and we're in quotes here to have the same effect.
121

122
00:08:32,140 --> 00:08:36,770
We just can't use the escape sequence on the end of the variable name.
122

123
00:08:36,820 --> 00:08:42,640
So now if I save my work and compile my code and run my program again we can see that it's now being
123

124
00:08:42,640 --> 00:08:44,530
displayed properly.
124

125
00:08:44,530 --> 00:08:50,590
So if I entered the wrong answer it says I lose if I run the program again and entered the correct answer
125

126
00:08:51,010 --> 00:08:52,670
it says I win.
126

127
00:08:52,840 --> 00:08:58,040
Awesome so our program is now working and our code is in our own function.
127

128
00:08:58,210 --> 00:09:01,040
So now I want you to create your own function.
128

129
00:09:01,120 --> 00:09:07,420
Make the return type void and I should stress that void is all lowercase and then go ahead and name
129

130
00:09:07,420 --> 00:09:12,850
the function PrintIntroduction because I want you to move your code where you print your introduction
130

131
00:09:12,850 --> 00:09:19,600
message into this function and then call print introduction at the start of play game and for a real
131

132
00:09:19,600 --> 00:09:24,280
challenge why not modify your introduction message to include some ASCII art.
132

133
00:09:24,280 --> 00:09:28,970
Have a look around of Google Images for some cool ASCII art and see if you can come up with some yourself.
133

134
00:09:29,080 --> 00:09:34,570
Then post your results in our community forum so pause here to create your first function and then we
134

135
00:09:34,570 --> 00:09:35,500
can wrap this lesson
135

136
00:09:39,350 --> 00:09:45,320
Okay so I've implemented a function called PrintIntroduction into my code and I've moved my introduction
136

137
00:09:45,320 --> 00:09:48,400
messages from the PlayGame function into this.
137

138
00:09:48,440 --> 00:09:53,190
Then at the start of my PlayGame function I execute PrintIntroduction.
138

139
00:09:53,450 --> 00:10:00,200
I want to point out that my PrintIntroduction function is above main but it's below play game.
139

140
00:10:00,200 --> 00:10:04,700
So let's take a look at what happens if we try compiling our code.
140

141
00:10:04,700 --> 00:10:09,130
We can see that the compiler tells us that it doesn't know what PrintIntroduction is.
141

142
00:10:09,140 --> 00:10:15,410
This is because as the compiler goes through and compiles each line of our code it sees that PrintIntroduction
142

143
00:10:15,500 --> 00:10:20,210
is called in PlayGame but it doesn't know what it is yet because it's declared.
143

144
00:10:20,210 --> 00:10:26,120
Further down our code there's different ways that we can fix this which we will see where we move over
144

145
00:10:26,120 --> 00:10:27,060
into Unreal.
145

146
00:10:27,080 --> 00:10:33,900
But for now we're just going to move PrintIntroduction above our PlayGame function.
146

147
00:10:34,490 --> 00:10:34,780
Okay.
147

148
00:10:34,790 --> 00:10:35,200
Awesome.
148

149
00:10:35,200 --> 00:10:39,670
So we've now created our first two functions in C++ in the next lesson.
149

150
00:10:39,770 --> 00:10:44,330
We're going to take a look at making our PlayGame function return some data.
150

151
00:10:44,330 --> 00:10:46,870
So when you're ready I'll see you in the next lesson.
