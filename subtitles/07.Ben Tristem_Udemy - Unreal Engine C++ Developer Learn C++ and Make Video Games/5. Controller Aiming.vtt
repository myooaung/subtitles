WEBVTT
1
00:00:04.520 --> 00:00:08.000
Hello and welcome in this lecture, we're going to be adding in controller movements so that we can

2
00:00:08.000 --> 00:00:09.660
move around using a controller.

3
00:00:09.710 --> 00:00:14.970
Which is what you're seeing going on right here, going to do this using a different set of axes for

4
00:00:15.110 --> 00:00:15.560
look up.

5
00:00:15.560 --> 00:00:16.700
Right and look.

6
00:00:16.700 --> 00:00:17.340
Right, right.

7
00:00:17.870 --> 00:00:19.490
And we'll see why that is necessary.

8
00:00:19.520 --> 00:00:21.110
Let's dive in and find out why.

9
00:00:23.280 --> 00:00:29.520
So I want to be able to move around our scene using the control, I can already do this when I am not

10
00:00:29.580 --> 00:00:30.330
in play mode.

11
00:00:30.930 --> 00:00:36.650
So we won't be able to do the same sort of movement as this with panning with the right stick and with

12
00:00:36.660 --> 00:00:40.650
moving around left and right with our left stick.

13
00:00:41.310 --> 00:00:43.030
And we can also go up and down with.

14
00:00:43.140 --> 00:00:47.190
But that's not something the app horn is gonna be able to do because it's not a flying pawn.

15
00:00:47.550 --> 00:00:53.190
So what we are going to want to do is, first of all, it's easy to map the movement.

16
00:00:53.460 --> 00:00:59.550
Well, we have to do is go to our project settings, go down to wherever input is, engine inputs,

17
00:00:59.760 --> 00:01:01.440
and we've got and move forward access.

18
00:01:01.650 --> 00:01:03.660
And we've also got our move right axis.

19
00:01:03.690 --> 00:01:10.650
And that's pretty straightforward to add in yet another mapping as well as W and S we can add in our

20
00:01:10.680 --> 00:01:11.390
gamepad.

21
00:01:11.940 --> 00:01:14.380
If we look on the game pad, you can see the left thumb stick.

22
00:01:14.400 --> 00:01:19.080
We want the Y axis for moving forward, for the moving right.

23
00:01:19.170 --> 00:01:24.180
We're going to add the again, the game pants and it's the game pad, still the left stick.

24
00:01:24.210 --> 00:01:29.150
But this time we're doing X and Y axis and we can see whether that is the right sort of movement.

25
00:01:29.160 --> 00:01:31.170
So go ahead and hit play.

26
00:01:31.400 --> 00:01:34.210
I use ULP as my shortcut for that, then left and right.

27
00:01:34.230 --> 00:01:35.970
Works forward and backwards.

28
00:01:35.970 --> 00:01:37.530
Works as we would expect.

29
00:01:37.700 --> 00:01:41.670
But obviously turning doesn't work because we haven't mapped that yet.

30
00:01:41.850 --> 00:01:42.960
So let's give that a shot.

31
00:01:43.020 --> 00:01:48.120
If we go to settings, project settings and inputs again, let's have a look.

32
00:01:48.180 --> 00:01:48.780
Look up.

33
00:01:48.840 --> 00:01:50.120
We are currently using the mouse y.

34
00:01:50.550 --> 00:01:53.340
What would be wrong with just adding in here?

35
00:01:53.490 --> 00:01:55.430
For example, the game pad.

36
00:01:55.560 --> 00:01:56.380
The right stick.

37
00:01:56.430 --> 00:01:58.140
And this time the Y axis.

38
00:01:58.800 --> 00:02:02.280
Well, on first attempt we can go and have a little plank.

39
00:02:02.580 --> 00:02:04.860
This might actually seem to be okay.

40
00:02:04.980 --> 00:02:07.500
So we go in and you can see we can move around.

41
00:02:07.510 --> 00:02:07.980
Yeah, sure.

42
00:02:07.980 --> 00:02:10.410
It's a little bit fast, but it's kind of okay, isn't it.

43
00:02:10.830 --> 00:02:11.670
Isn't that okay?

44
00:02:12.150 --> 00:02:13.470
Well, not really.

45
00:02:15.400 --> 00:02:20.590
And the reason ultimately boils down to frame rates and how these axes work.

46
00:02:21.580 --> 00:02:26.230
So what happens with a mouse when we're running a game at 30 frames per second?

47
00:02:26.590 --> 00:02:32.500
When we move our mouse from left to right across the screen, a kind of even speed, we might see that

48
00:02:32.500 --> 00:02:36.580
the axes values are something like 10, then 10, then 10.

49
00:02:36.610 --> 00:02:43.030
And this is telling us that each time the mouse is moved by 10 units to the right and it's done at the

50
00:02:43.030 --> 00:02:44.200
same every frame.

51
00:02:45.280 --> 00:02:47.680
What happens if we double our frame rate?

52
00:02:48.080 --> 00:02:52.690
Well, suddenly the mouse is still moving at the same rate because the player is still moving their

53
00:02:52.690 --> 00:02:53.980
hand at the same speed.

54
00:02:54.370 --> 00:02:58.180
But because we're showing frames more often, we're having tics more often.

55
00:02:58.630 --> 00:03:03.830
Then what's gonna happen is the input from the axes is actually going to be halved each time we're going

56
00:03:03.830 --> 00:03:06.100
to get a five or five five five five.

57
00:03:06.820 --> 00:03:12.700
So great, that's fine, because that means that we're still going to be panning across our screen at

58
00:03:12.700 --> 00:03:14.350
the same rate.

59
00:03:14.740 --> 00:03:21.010
No matter whether we have a fast computer or a slow computer, if we move our mouse by a certain amount,

60
00:03:21.390 --> 00:03:25.390
you're going to notice the same amount of movement, which is what we want.

61
00:03:25.810 --> 00:03:31.870
Now, things change a little bit when we look at the controller, say we go full throttle to the right

62
00:03:32.020 --> 00:03:36.370
with our analog controller and it's at 30 frames a second.

63
00:03:36.460 --> 00:03:37.960
We get one, then one.

64
00:03:37.990 --> 00:03:39.760
Then one makes sense, right?

65
00:03:40.480 --> 00:03:44.740
What about if it's at 60 frames per second, we still get one, then one, then one, then one.

66
00:03:44.750 --> 00:03:47.170
But we get more of them because we're getting more frames.

67
00:03:47.740 --> 00:03:55.390
If you use that directly to effect the movement of your pawn, you're gonna see that it moves at twice

68
00:03:55.390 --> 00:03:57.640
the speed, at twice the frame rate.

69
00:03:57.730 --> 00:03:59.200
Not what we want.

70
00:03:59.620 --> 00:04:03.550
So we want to do is introduce some frame rate independents here.

71
00:04:04.180 --> 00:04:09.610
So to do this, we need to be able to multiply by the DLC to time.

72
00:04:09.730 --> 00:04:15.340
We kind of want to use the input axis to help us modulate the rotation speed.

73
00:04:16.300 --> 00:04:18.370
So that's a little bit to take in there.

74
00:04:18.430 --> 00:04:24.400
But what I mean is that we need to have something like a rotation rate variable to create a new property

75
00:04:24.400 --> 00:04:27.610
for that, which is going to be an edit anywhere.

76
00:04:28.000 --> 00:04:34.830
And we are going to have it be a float and it's going to be the rotation rate.

77
00:04:34.900 --> 00:04:40.150
Now, I'm going to use the same rotation rate for both up and left and right.

78
00:04:40.210 --> 00:04:43.150
You can go ahead and have a separate variable for both of those.

79
00:04:43.150 --> 00:04:46.450
And I don't really know what a good rotation rate is going to be here.

80
00:04:46.540 --> 00:04:48.430
Just going to give a flying gas hakes.

81
00:04:48.430 --> 00:04:51.160
I'm not sure what the units involved are here at all.

82
00:04:51.520 --> 00:04:53.140
So I'm just gonna go ahead and say 10.

83
00:04:53.470 --> 00:04:54.010
But we'll see.

84
00:04:54.040 --> 00:04:55.630
Maybe that's way too fast.

85
00:04:55.630 --> 00:04:56.620
Maybe that's way too slow.

86
00:04:56.920 --> 00:05:01.810
We can adjust that in our blueprint so we can go ahead and save that.

87
00:05:01.840 --> 00:05:07.360
I'm gonna go over to the C++ old O to switch the C++, by the way, and we're going to want to have

88
00:05:07.420 --> 00:05:11.320
a new type of access so that we can distinguish between the move.

89
00:05:11.320 --> 00:05:11.560
Right.

90
00:05:11.560 --> 00:05:15.010
Which is the mouse and direct movement versus the move.

91
00:05:15.070 --> 00:05:15.460
Right.

92
00:05:15.460 --> 00:05:16.060
Or rather sorry.

93
00:05:16.060 --> 00:05:16.570
The look.

94
00:05:16.570 --> 00:05:16.960
Right.

95
00:05:17.290 --> 00:05:18.700
Which is the rate.

96
00:05:19.490 --> 00:05:26.080
So I'm gonna do that by going over to our project settings and instead of having this gamepad left thumb

97
00:05:26.080 --> 00:05:27.730
stick mapped to the move.

98
00:05:27.790 --> 00:05:28.390
Right.

99
00:05:29.020 --> 00:05:29.260
So right.

100
00:05:29.410 --> 00:05:30.850
Not the left something to the right one.

101
00:05:30.940 --> 00:05:31.920
Maps to look up.

102
00:05:31.930 --> 00:05:32.830
I keep making that mistake.

103
00:05:33.340 --> 00:05:38.650
Remove that from the axis and add a new axis, which is going to be the look.

104
00:05:39.990 --> 00:05:40.320
Up.

105
00:05:41.160 --> 00:05:41.550
Right.

106
00:05:42.330 --> 00:05:45.120
And this is going to take in game pad.

107
00:05:45.240 --> 00:05:45.690
Right.

108
00:05:45.750 --> 00:05:46.550
So game pad.

109
00:05:46.620 --> 00:05:47.220
Right.

110
00:05:47.920 --> 00:05:48.660
Why access?

111
00:05:48.660 --> 00:05:49.650
Because it's a look up.

112
00:05:49.890 --> 00:05:53.580
And we're saying that positive one should be the one that we're using.

113
00:05:54.360 --> 00:06:00.190
So then what we can do is we need to map this and we don't want to map it directly to the ad controller.

114
00:06:00.210 --> 00:06:05.130
Your because we need to do a little bit of maths to calculate the rates and make those rates frame rate

115
00:06:05.130 --> 00:06:05.700
independent.

116
00:06:06.090 --> 00:06:12.150
So what we're going to do is go over to old oh and create ourselves a look up which handly we've already

117
00:06:12.150 --> 00:06:12.810
got here.

118
00:06:13.140 --> 00:06:15.180
And I'm going to create it as look up.

119
00:06:15.230 --> 00:06:15.620
Right.

120
00:06:16.770 --> 00:06:21.970
And go ahead and create this control shift p and I'm using my correct implementation plugin.

121
00:06:22.440 --> 00:06:25.590
Go ahead and do a look up rate implementation.

122
00:06:26.730 --> 00:06:27.960
Got an axis value coming in.

123
00:06:27.960 --> 00:06:28.650
That's great.

124
00:06:28.740 --> 00:06:34.110
We then wants to make sure that's what we're calling in setup player input components.

125
00:06:34.120 --> 00:06:35.840
So let's create a new line here.

126
00:06:35.880 --> 00:06:36.990
Duplicate the look.

127
00:06:37.020 --> 00:06:37.470
Right.

128
00:06:37.530 --> 00:06:38.640
I'm gonna call it look up.

129
00:06:38.920 --> 00:06:39.360
Right.

130
00:06:39.820 --> 00:06:40.560
Like so.

131
00:06:40.620 --> 00:06:42.720
And then copy and paste the.

132
00:06:43.720 --> 00:06:50.230
Fully qualified reference to the function to call, I look up right then.

133
00:06:50.590 --> 00:06:57.000
Essentially, what we want to be calling at the end of the day is add controller input, pitch controller

134
00:06:57.010 --> 00:06:57.790
pitch input.

135
00:06:58.570 --> 00:07:00.670
But we want to multiply this by a couple of things.

136
00:07:01.060 --> 00:07:04.420
So access value comes in as a value between zero and one.

137
00:07:05.080 --> 00:07:11.800
If we multiply that, so access value multiplied by the rate rotation rate.

138
00:07:13.010 --> 00:07:15.170
Then what we're going to get is a speed.

139
00:07:15.500 --> 00:07:19.940
But what we want is actually a distance, like when we moved our mouse, we moved at a certain distance,

140
00:07:19.940 --> 00:07:20.600
every frame.

141
00:07:20.840 --> 00:07:21.890
That's what was coming in.

142
00:07:22.250 --> 00:07:24.670
We want to convert this speed to distance.

143
00:07:24.680 --> 00:07:31.550
And if you remember some way back in some hazy math class to get from speed distance, we need to multiply

144
00:07:31.610 --> 00:07:32.870
by the amounts of time.

145
00:07:32.930 --> 00:07:37.430
So we do that by getting our delta seconds from the world.

146
00:07:37.850 --> 00:07:39.530
Now, what is Delta seconds?

147
00:07:39.530 --> 00:07:42.920
That is the amount of time that it took for the last frame.

148
00:07:43.220 --> 00:07:45.590
So it's kind of the opposite of the frame rate.

149
00:07:45.620 --> 00:07:50.450
It's telling us how long a frame takes, which is great because that is the amount of time that we need

150
00:07:50.450 --> 00:07:51.770
to apply this movement over.

151
00:07:52.070 --> 00:07:54.730
So if you think about it, we've got speed.

152
00:07:54.770 --> 00:07:57.590
We've got an amount of time that we need to apply that speed over.

153
00:07:57.950 --> 00:08:03.920
It gives us an amount of movement that we essentially want to apply to our controller pitch input.

154
00:08:04.100 --> 00:08:04.830
So that's what we want.

155
00:08:05.240 --> 00:08:11.150
Get world, first of all, because we want to get the level, we'll get the world around us.

156
00:08:11.210 --> 00:08:20.210
And then from that, we use the arrow function to do get Delta seconds, which tells us that we want

157
00:08:20.210 --> 00:08:25.580
to get the amount of time that elapsed in the last frame, which gives us, again, this approximation

158
00:08:25.610 --> 00:08:28.340
of our frame rate at the current moment in time.

159
00:08:28.610 --> 00:08:32.880
Now, you might be wondering why we're not doing the same with the movement inputs.

160
00:08:33.320 --> 00:08:38.330
And the reason is that the movement input, when you do an add input there, it's already supposing

161
00:08:38.360 --> 00:08:42.800
that that's a rate, not an actual amount of movement.

162
00:08:43.100 --> 00:08:49.190
So it's already doing this calculation for us, essentially under the hood, save up the files, go

163
00:08:49.190 --> 00:08:53.390
over into unreal and compile and see whether any of this is worth it.

164
00:08:55.560 --> 00:09:01.350
So let's head on into play and I'm going to try and use my controller input.

165
00:09:01.530 --> 00:09:02.010
There we go.

166
00:09:02.070 --> 00:09:09.060
We're going up and down rather slowly, but hopefully this will be completely frame rate independent

167
00:09:09.060 --> 00:09:10.730
because we've used that Delta time.

168
00:09:11.760 --> 00:09:17.130
So what I want you to do is to go ahead and implement the look.

169
00:09:17.220 --> 00:09:17.730
Right.

170
00:09:17.820 --> 00:09:18.330
Right.

171
00:09:18.780 --> 00:09:24.900
So repeat the same methods set up for looking right as he did for looking up and tweak the speed so

172
00:09:24.900 --> 00:09:30.240
that it doesn't go really slow and you can actually use it to move around the level, pause the video

173
00:09:30.240 --> 00:09:30.690
and have a go.

174
00:09:32.490 --> 00:09:33.580
Okay, welcome back.

175
00:09:33.730 --> 00:09:39.490
So first step was we went and created a new axis mapping in a project settings, we're gonna have to

176
00:09:39.490 --> 00:09:43.310
do that again this time for the look, right?

177
00:09:43.640 --> 00:09:44.120
Right.

178
00:09:44.590 --> 00:09:49.420
So, Matthew, then we're going to go and get the game pad.

179
00:09:50.380 --> 00:09:54.740
The right this time and the x axis, that's when we're going to be mapping to.

180
00:09:55.510 --> 00:10:01.750
And then we're going to go over to shoot her head off all this time, I'm going to duplicate the look

181
00:10:01.840 --> 00:10:02.050
up.

182
00:10:02.110 --> 00:10:02.620
Right.

183
00:10:03.290 --> 00:10:06.070
Let me just show you the files that so you can see where I am.

184
00:10:06.100 --> 00:10:07.210
Over on the left hand side.

185
00:10:07.660 --> 00:10:09.070
So, again, it's a have instead of a look up.

186
00:10:09.070 --> 00:10:09.340
Right.

187
00:10:09.370 --> 00:10:10.240
It's going to be the look.

188
00:10:10.320 --> 00:10:10.760
Right.

189
00:10:10.880 --> 00:10:11.350
Right.

190
00:10:11.470 --> 00:10:12.550
Control shift p.

191
00:10:12.670 --> 00:10:13.840
Great implementation.

192
00:10:14.440 --> 00:10:20.440
And we're going to have pretty much exactly the same code with the same multiplication that is getting

193
00:10:20.440 --> 00:10:25.950
us from, again, a speed to a amount of distance moved.

194
00:10:26.830 --> 00:10:27.310
That's the look.

195
00:10:27.320 --> 00:10:27.660
Right.

196
00:10:27.660 --> 00:10:27.940
Right.

197
00:10:27.970 --> 00:10:33.130
So instead of doing the ADD controller pitch, we need to do the your input this time.

198
00:10:33.850 --> 00:10:34.930
And they look right.

199
00:10:34.930 --> 00:10:41.350
Rate is going to need to be called from our set player input component or need to be called when the

200
00:10:41.350 --> 00:10:43.870
axis is actually being manipulated.

201
00:10:44.140 --> 00:10:46.810
So we're going to add another axis in hands that will look up.

202
00:10:47.020 --> 00:10:47.430
Right.

203
00:10:47.710 --> 00:10:48.310
It's gonna be the look.

204
00:10:48.520 --> 00:10:48.990
Right.

205
00:10:49.260 --> 00:10:49.710
Right.

206
00:10:50.470 --> 00:10:50.980
And then.

207
00:10:51.070 --> 00:10:57.150
So we're going to want to copy that reference to the function and bring the ampersand before.

208
00:10:57.460 --> 00:10:59.500
And then the fully qualified issued character, Colon.

209
00:10:59.510 --> 00:11:00.550
Colon, look.

210
00:11:00.650 --> 00:11:00.970
Right.

211
00:11:01.070 --> 00:11:01.480
Right.

212
00:11:01.690 --> 00:11:04.090
Let's go ahead and save both that and the head of file.

213
00:11:04.100 --> 00:11:08.290
Go back into the project and exit play, which are left going.

214
00:11:08.420 --> 00:11:08.590
Hit.

215
00:11:08.620 --> 00:11:09.610
Compile here.

216
00:11:10.300 --> 00:11:10.810
And then.

217
00:11:11.980 --> 00:11:19.360
We should be able to dive in and have a play around, so up and down is working slowly left and right.

218
00:11:20.200 --> 00:11:22.900
Not quite working out how I would expect.

219
00:11:23.380 --> 00:11:26.060
Let's check our project settings so I look right.

220
00:11:26.070 --> 00:11:26.390
Right.

221
00:11:26.440 --> 00:11:27.190
Seems okay.

222
00:11:27.880 --> 00:11:28.540
Thumb stick, right.

223
00:11:28.540 --> 00:11:28.910
Thumb stick.

224
00:11:28.910 --> 00:11:29.650
Hack access.

225
00:11:29.710 --> 00:11:30.830
Let's check that.

226
00:11:30.830 --> 00:11:34.950
That's all going through into the C++ correctly by an axis look.

227
00:11:35.330 --> 00:11:35.700
Right.

228
00:11:35.810 --> 00:11:36.280
Right.

229
00:11:36.380 --> 00:11:37.390
Is calling the look.

230
00:11:37.390 --> 00:11:37.830
Right.

231
00:11:37.900 --> 00:11:38.130
Right.

232
00:11:38.390 --> 00:11:40.660
Function all seems in order.

233
00:11:40.660 --> 00:11:42.820
Calling the your input as it should be.

234
00:11:44.760 --> 00:11:45.810
Dana, what happened there?

235
00:11:45.870 --> 00:11:51.240
I just hit Recompile again and then hit play again, sometimes we have to do this, but now the looking

236
00:11:51.240 --> 00:11:56.190
left and right is working up and down, is working, albeit it's a very, very slow pace.

237
00:11:56.580 --> 00:11:59.910
So we're going to tweak around with our character blueprint.

238
00:11:59.910 --> 00:12:00.960
Let's go and find out.

239
00:12:00.960 --> 00:12:03.630
BP, shoot a character, open up his blueprints.

240
00:12:04.700 --> 00:12:11.050
And then let's scroll on down and find the rotation rate on gains just multiplied by 10.

241
00:12:11.540 --> 00:12:14.060
Try and go 10 times faster than will find a value.

242
00:12:14.390 --> 00:12:16.080
That makes sense somewhere in between.

243
00:12:16.100 --> 00:12:20.480
This is always one way that you can try and find values is just by going and changing the order of magnitude

244
00:12:20.480 --> 00:12:20.960
first.

245
00:12:21.470 --> 00:12:24.020
Well, that's much more closely in the right ballpark.

246
00:12:24.060 --> 00:12:25.760
It's maybe a little too sensitive.

247
00:12:26.270 --> 00:12:33.530
So maybe I just slam that down by a half, try about 50 this time not 500, but 50.

248
00:12:34.040 --> 00:12:34.970
Try that out.

249
00:12:35.090 --> 00:12:38.960
Hit play and move my stick around.

250
00:12:39.000 --> 00:12:39.180
Okay.

251
00:12:39.380 --> 00:12:40.970
That's feeling much more natural.

252
00:12:41.330 --> 00:12:44.190
You might want to go somewhere just a little bit in between those two.

253
00:12:44.210 --> 00:12:46.190
So go in between the two again.

254
00:12:46.190 --> 00:12:50.900
I'd say about 70 this time, rather than going all the way to one hundred seventy.

255
00:12:50.900 --> 00:12:51.700
Might be the right ray.

256
00:12:51.750 --> 00:12:53.690
Let's see if we've hit gold.

257
00:12:53.780 --> 00:12:54.620
Yes, I think so.

258
00:12:54.980 --> 00:12:57.740
I think 70 is going to be the right rate for me to move around, obviously.

259
00:12:58.040 --> 00:13:04.340
This is the kind of thing that's often games allow you to tweak our allow the player to tweak in the

260
00:13:04.340 --> 00:13:04.700
settings.

261
00:13:04.700 --> 00:13:06.200
We're not going to look into that.

262
00:13:06.220 --> 00:13:08.630
That's beyond the scope of this section.

263
00:13:08.980 --> 00:13:13.850
But it is something that you might potentially want to expose to users in your own games.

264
00:13:15.100 --> 00:13:19.430
Also in that lecture, we have seen the difference between controller input and mouse input and how

265
00:13:19.430 --> 00:13:22.580
we have to deal with rates instead of absolute movements.

266
00:13:23.120 --> 00:13:28.760
So in the next lecture, we're gonna look at that third person camera that I kept hinting at.

267
00:13:29.060 --> 00:13:29.540
See that?
