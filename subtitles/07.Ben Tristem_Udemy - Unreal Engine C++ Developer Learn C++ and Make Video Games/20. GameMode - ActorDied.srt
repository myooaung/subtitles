1
00:00:04,230 --> 00:00:08,480
Welcome back to this lecture where we'll be fleshing out some more of the game mode class.

2
00:00:08,910 --> 00:00:10,380
So we have a lot to do in this class.

3
00:00:10,410 --> 00:00:15,900
So we're going to begin by setting up what the goal of the game is and the actors relating to that.

4
00:00:16,380 --> 00:00:20,850
The first two things that we need to reference are going to be the number of targets in the level for

5
00:00:20,850 --> 00:00:26,460
the player to destroy and the player class itself to check against when an actor is destroyed.

6
00:00:26,850 --> 00:00:32,540
So if we start off in the head headphone, we can forward declare our a apen turrets and a pawn that

7
00:00:32,550 --> 00:00:33,450
tank class.

8
00:00:34,640 --> 00:00:39,920
Then in the private section will create a pointer of type A porn tank named Plier Tank.

9
00:00:42,050 --> 00:00:47,240
As we also know that we need to know how many tyrants the player will need to destroy for the when condition

10
00:00:47,410 --> 00:00:51,900
will create a new variable of Type 32 named Target Turrets.

11
00:00:52,100 --> 00:00:58,040
So we'll just be using this a little bit later to find and then keep track of the number of remaining

12
00:00:58,040 --> 00:00:59,090
turrets in the level.

13
00:00:59,420 --> 00:01:02,090
This will also be managed in the C++ code.

14
00:01:02,420 --> 00:01:08,240
So I'll place these new variables at the top of the private section where any of our variables without

15
00:01:08,240 --> 00:01:08,500
the U.

16
00:01:08,540 --> 00:01:10,550
Properties can be stored going forward.

17
00:01:11,030 --> 00:01:13,240
So that should be everything that we need in the head of file for.

18
00:01:13,260 --> 00:01:18,830
And I say back in the code file, we already know that we will be needing to reference the two porn

19
00:01:18,830 --> 00:01:19,460
classes.

20
00:01:19,660 --> 00:01:23,440
So at the top of this class, we can go straight ahead and include the tune.

21
00:01:23,450 --> 00:01:24,050
Thanks.

22
00:01:24,410 --> 00:01:27,820
Forward Slash Poons, forward slash pawn tank Deitsch.

23
00:01:29,250 --> 00:01:34,260
And then we'll also need the team tanks for slash pawns forward slash pawn turret.

24
00:01:34,480 --> 00:01:35,130
Dot h.

25
00:01:36,060 --> 00:01:40,630
And whilst we have I know that we're going to need the game play static's functionality.

26
00:01:40,720 --> 00:01:46,360
So, again, we can include this from the Kismet Library forward slash game play static's dot h.

27
00:01:47,680 --> 00:01:53,230
Just noticed as well when we created the begin play function, we haven't called the parents begin play,

28
00:01:53,240 --> 00:01:56,320
so we'll just do that now by using the super beginning play.

29
00:01:56,770 --> 00:02:01,750
After this, we can then start by finding out how many tart's there are in the world for the player

30
00:02:01,750 --> 00:02:02,440
to destroy.

31
00:02:02,530 --> 00:02:05,710
To do this will use the new game play static's.

32
00:02:07,320 --> 00:02:10,640
And the function within this could get all actors of class.

33
00:02:10,940 --> 00:02:16,370
So if we're going to take a dive into our get all actors of class function here and we can see what

34
00:02:16,370 --> 00:02:19,210
the arguments required to complete the function.

35
00:02:19,370 --> 00:02:21,830
And also kind of get an idea of how the function works.

36
00:02:21,890 --> 00:02:25,760
So this will find all of the actors in the world of a specific class.

37
00:02:25,910 --> 00:02:29,420
It takes in a world context object, as we've seen before.

38
00:02:29,720 --> 00:02:35,810
And the two important requirements for our use of this is the actor class, which is the type of actor

39
00:02:36,020 --> 00:02:36,980
we're looking to find.

40
00:02:37,220 --> 00:02:42,770
And then this tea array of act actors, which is an array of actor types.

41
00:02:43,040 --> 00:02:45,910
And this will be filled for us as the return of the function.

42
00:02:45,950 --> 00:02:49,470
So this will be our list of the turrets which exist in the world.

43
00:02:49,580 --> 00:02:51,350
When we've implemented this function.

44
00:02:51,620 --> 00:02:53,450
So this will be nice and easy to validate.

45
00:02:53,570 --> 00:02:57,830
We'll use the get word function to return the world context object.

46
00:02:58,070 --> 00:03:02,390
Then we can find our taat class in the level by passing in a pawn turret.

47
00:03:02,510 --> 00:03:07,910
Static class and the static class function that we're using here just means we're not requiring an object

48
00:03:07,910 --> 00:03:08,480
instance.

49
00:03:08,600 --> 00:03:12,940
And this will return the UCLASS of the act type that we're calling from.

50
00:03:12,950 --> 00:03:15,680
So here that will be returning the A pawn taat.

51
00:03:15,980 --> 00:03:19,310
And then this is just making use of the unreal reflection system.

52
00:03:21,170 --> 00:03:27,020
Which leaves the final argument that we can just jump back up a line and we'll create a new theory of

53
00:03:27,020 --> 00:03:34,160
type actor to match the argument type one tameness taht actors with that ready we can now pass in our

54
00:03:34,160 --> 00:03:36,500
final argument as the target actors.

55
00:03:36,590 --> 00:03:41,840
We won't need to worry about casting or checking specifically against the porn star, classier as we're

56
00:03:41,840 --> 00:03:47,570
not going to be referencing any of the class specific properties from the array, simply getting and

57
00:03:47,660 --> 00:03:53,720
tracking the number of that type of actor in the level so that when I fill our tier right with that

58
00:03:53,720 --> 00:03:54,420
variable stored.

59
00:03:54,470 --> 00:03:56,970
We can use that to say that our target target.

60
00:03:57,030 --> 00:04:04,010
So our INT 32 made earlier is equal to the target actors Donham, which is simply getting the number

61
00:04:04,010 --> 00:04:08,120
of elements in the array, or first, that will be the number of targets in the level.

62
00:04:09,350 --> 00:04:13,010
For the play, a reference, we just go and use the get to play a porn function.

63
00:04:13,100 --> 00:04:20,660
So this is achieved by creating a cast to the type to check against the A porn tank, using the new

64
00:04:20,700 --> 00:04:21,860
game gameplay static's.

65
00:04:22,100 --> 00:04:27,890
So that'll be your game play static's get play upon passing in this and the player controller index

66
00:04:27,950 --> 00:04:29,120
of Player Zero.

67
00:04:29,150 --> 00:04:33,410
Again, we're using a single player game, so that's going to be the first and the only player in the

68
00:04:33,410 --> 00:04:35,150
game will be Controller zero.

69
00:04:35,660 --> 00:04:40,400
So that when I give us all of the values and references that we need to complete, the actor died function

70
00:04:40,430 --> 00:04:43,730
so we can jump down to that function whilst we're still in the game mode.

71
00:04:45,330 --> 00:04:49,110
So if we handle the player, check first, we'll do this using an F statement.

72
00:04:49,140 --> 00:04:56,460
So if the actor is equal to our play a tank reference, then we're gonna want to call a function in

73
00:04:56,460 --> 00:05:00,780
the porn class to notify the porn to handle its death functionality.

74
00:05:02,540 --> 00:05:07,100
So if we go back to the porn based class, we can look here to see how we've set this up and we've actually

75
00:05:07,100 --> 00:05:12,950
created our 100 destruction function and place this in the protected section, meaning that this wouldn't

76
00:05:12,950 --> 00:05:15,230
be available outside of the porn class.

77
00:05:15,320 --> 00:05:16,880
And it's child classes.

78
00:05:17,330 --> 00:05:22,250
So I'll begin by cutting and pasting this back above into the public section.

79
00:05:24,000 --> 00:05:26,610
We've likely done this in the child classes as well.

80
00:05:26,730 --> 00:05:32,820
So let's just return to the tart and the tank class and we'll move our override functions into their

81
00:05:32,820 --> 00:05:33,960
public sections as well.

82
00:05:34,140 --> 00:05:38,730
This will then ensure that these are all available outside of the class as we'll be needing that in

83
00:05:38,730 --> 00:05:39,600
just a moment.

84
00:05:48,240 --> 00:05:53,110
With that done, just ensure that you've saved all of those changes and then we can return back to our

85
00:05:53,110 --> 00:05:59,590
game mode code file and we can finish the call from the player tank to the handle destruction function.

86
00:06:01,490 --> 00:06:07,220
Well, then also cool our handle Gameover function in the game mode, passing in a false boolean to

87
00:06:07,220 --> 00:06:09,770
indicate that the player didn't win at this stage.

88
00:06:10,160 --> 00:06:12,800
So that is the kind of first condition checked for.

89
00:06:13,070 --> 00:06:16,550
If that's not the case, then we'll use an if statement.

90
00:06:16,880 --> 00:06:21,710
So if the actor that was destroyed wasn't the player, then we'll check and store a temporary pointer

91
00:06:21,980 --> 00:06:25,880
to the a pawn turret class named Destroyed at Target.

92
00:06:26,120 --> 00:06:32,090
So using this, we'll use a cast to the AP and class referencing the dead actor.

93
00:06:32,300 --> 00:06:33,080
So if that is true.

94
00:06:33,110 --> 00:06:38,990
So if this cast is successful and the thing being destroyed is a target, then this will also store

95
00:06:39,020 --> 00:06:41,630
a variable first reference in the moment as well.

96
00:06:41,930 --> 00:06:48,140
So your challenge here is to complete this out check by notifying the destroyed heart that it has been

97
00:06:48,140 --> 00:06:48,560
destroyed.

98
00:06:48,920 --> 00:06:52,400
Then go ahead and update how many turrets are left in the game.

99
00:06:52,610 --> 00:06:58,910
And if the target target value is now equal to zero, then call the handle game over and pass in the

100
00:06:58,940 --> 00:07:00,410
correct win lose state.

101
00:07:02,760 --> 00:07:07,620
OK, so let's go through this to check the first step is pretty much what we've done with our planet

102
00:07:07,630 --> 00:07:08,040
tank.

103
00:07:08,200 --> 00:07:11,800
But this is going to be cooling the handle destruction on the destroyed tarte.

104
00:07:14,490 --> 00:07:19,710
Next, we can revisit a topic from the previous section, which is something you've looked at, the

105
00:07:19,770 --> 00:07:22,950
pre increment of the value or how to pray increment of value.

106
00:07:23,070 --> 00:07:25,750
So it's collapse everything into a secondary F statement.

107
00:07:25,890 --> 00:07:31,680
This time, of course, we'll be using the predicament operation so we can say F minus, minus target

108
00:07:31,680 --> 00:07:33,120
tart's is equal to zero.

109
00:07:33,330 --> 00:07:37,110
So this is taking away from that value that we want to handle the game over.

110
00:07:37,260 --> 00:07:42,630
And this time will pass in the true value for the player winning because they've removed all of the

111
00:07:42,630 --> 00:07:44,280
titles from the level and that's it.

112
00:07:44,310 --> 00:07:50,460
So we can now start at least kind of visualizing some of the Gamefly pretty soon with the help of some

113
00:07:50,460 --> 00:07:55,080
start and end game widgets as these are all handled in blueprints, we want to make sure that those

114
00:07:55,080 --> 00:07:58,340
functions are being cooled in that C++ handle counterparts.

115
00:07:58,440 --> 00:08:03,090
So in the handle game, start function, call the game, start function, which remember is going to

116
00:08:03,090 --> 00:08:05,340
be our blueprint implemented function.

117
00:08:05,610 --> 00:08:08,520
And in the handle game over function, call the game over.

118
00:08:08,730 --> 00:08:11,550
And remember to pass in the player one that boolean.

119
00:08:14,060 --> 00:08:19,400
We just want to make sure that the handle GameSpot is being cooled and we should do that on the begin

120
00:08:19,400 --> 00:08:23,450
play just after storing all of our variables and references.

121
00:08:23,720 --> 00:08:28,700
And then one thing I'm noticing back in the game play is that our functionality to get the number of

122
00:08:28,700 --> 00:08:30,410
target targets is a little bit long.

123
00:08:30,440 --> 00:08:33,140
So this might be better suited in its own function.

124
00:08:33,230 --> 00:08:36,860
So we'll go ahead and do that quickly before finishing up with the class.

125
00:08:37,070 --> 00:08:43,400
So back in the header, let's create a new private function of type in 32 named Gett Target, Target

126
00:08:43,450 --> 00:08:43,950
Count.

127
00:08:44,300 --> 00:08:46,440
Then we need to implement this in the code form.

128
00:08:46,800 --> 00:08:49,910
I'll be doing that using these C++ helper as usual.

129
00:08:50,300 --> 00:08:56,570
And for the implementation, I'm just going to grab everything apart from the target tart's equals.

130
00:08:56,720 --> 00:09:00,980
And then I'll cut this and paste this into the get target Tarakan function.

131
00:09:02,540 --> 00:09:05,210
Then in front of the turret, actors don't come.

132
00:09:05,570 --> 00:09:11,790
We just need to include our return as this is a type based function and it will be returning and thirty

133
00:09:11,790 --> 00:09:14,090
to value, which will still be our target.

134
00:09:14,160 --> 00:09:15,040
Actors count.

135
00:09:15,470 --> 00:09:17,510
But what we now call this from the begin play.

136
00:09:17,570 --> 00:09:23,660
We can I just say that target targets equals to get target to count and everything is just a little

137
00:09:23,660 --> 00:09:25,100
bit more readable at a glance.

138
00:09:25,310 --> 00:09:27,110
Using it this way was tidying up.

139
00:09:27,140 --> 00:09:33,500
We could also drop the target targets and the player tank initialization in to the handle GameStop function

140
00:09:33,770 --> 00:09:38,990
just before the blueprint game start function is called to make sure that we have all of those variables

141
00:09:39,170 --> 00:09:45,590
ready to go before the game is initialized, essentially, unlike with a lot of the large implementations

142
00:09:45,590 --> 00:09:45,980
we've made.

143
00:09:46,040 --> 00:09:50,960
There's not really anything we can look at right now that would have changed in the game mode or if

144
00:09:50,960 --> 00:09:52,840
we were to press play in the editor.

145
00:09:53,000 --> 00:09:55,090
But be sure to save and compile this.

146
00:09:55,100 --> 00:10:00,170
So you're ready for the next lecture where we can start creating our widgets to highlight the Gamefly

147
00:10:00,680 --> 00:10:03,160
using a lot of the stuff that we've just implemented here.
