WEBVTT
0
1
00:00:00.550 --> 00:00:05.110
Hey and welcome back to this lesson where we're going to take a look at adding a limit on how many levels
1

2
00:00:05.110 --> 00:00:06.150
are in our game.
2

3
00:00:06.490 --> 00:00:10.720
And then we're going to move onto randomizing the code that the player has to guess.
3

4
00:00:10.780 --> 00:00:12.870
So we have our main function.
4

5
00:00:12.880 --> 00:00:19.810
We declare our variable LevelDifficulty and initialize it with the value of one when the program starts.
5

6
00:00:19.810 --> 00:00:24.550
And then we have our while loop that has its condition hardcoded as true.
6

7
00:00:24.610 --> 00:00:28.840
I'm going to add a blank line just above the while loop just to improve our code readability.
7

8
00:00:28.960 --> 00:00:32.440
And I also want to be more consistent with my IF statements.
8

9
00:00:32.440 --> 00:00:38.770
And while loops I have a space before the condition for my if statement but I don't have a space before
9

10
00:00:38.770 --> 00:00:40.730
the condition in my while loop.
10

11
00:00:40.780 --> 00:00:45.040
So I'm going to add a space here just before the condition just so I can be consistent with the rest
11

12
00:00:45.040 --> 00:00:46.600
of the code in my file.
12

13
00:00:46.600 --> 00:00:51.310
Now remember the compiler ignores whitespace so it doesn't really matter that there's a space here.
13

14
00:00:51.310 --> 00:00:54.250
But we want to stick with writing our code one way.
14

15
00:00:54.250 --> 00:00:56.240
We want to be consistent.
15

16
00:00:56.260 --> 00:00:59.340
Let's also add a comment on the end of this line here.
16

17
00:00:59.470 --> 00:01:04.580
Our while loop is going to loop the game until all levels are completed.
17

18
00:01:04.900 --> 00:01:08.590
And your challenge right now is to help us get started here.
18

19
00:01:08.590 --> 00:01:14.200
I want you to declare any variable that we would use for storing the maximum difficulty or the maximum
19

20
00:01:14.380 --> 00:01:16.100
level your game will have.
20

21
00:01:16.240 --> 00:01:21.730
So you can name this either MaxLevel or MaxDifficulty just something that describes what is going
21

22
00:01:21.730 --> 00:01:22.870
to be used for.
22

23
00:01:23.080 --> 00:01:29.440
And then I want you to make it a constant by declaring it with the keyword const and initialize it with
23

24
00:01:29.440 --> 00:01:32.710
the amount of levels you want in your game.
24

25
00:01:32.710 --> 00:01:36.940
And I want you to make sure that it has scope within our main function.
25

26
00:01:36.940 --> 00:01:39.560
Try declaring it above our while loop
26

27
00:01:43.830 --> 00:01:44.220
okay.
27

28
00:01:44.230 --> 00:01:48.670
So I've declared an int that is constant and I've named it MaxDifficulty.
28

29
00:01:48.670 --> 00:01:51.620
I've also initialized it with the value of five.
29

30
00:01:51.670 --> 00:01:55.290
I'm not going to have more than 5 difficulty levels in my game.
30

31
00:01:55.360 --> 00:01:58.750
So our while loop is hardcoded as true.
31

32
00:01:58.850 --> 00:02:03.880
But let's take a look at how we can create a condition that takes into account our difficulty variables
32

33
00:02:04.960 --> 00:02:10.690
our LevelDifficulty value should never become larger than our MaxDifficulty value.
33

34
00:02:10.690 --> 00:02:16.690
So the condition of our while loop should check to see if the value of LevelDifficulty is less or equal
34

35
00:02:16.690 --> 00:02:18.880
to MaxDifficulty.
35

36
00:02:18.880 --> 00:02:20.430
Now how can we do this.
36

37
00:02:20.440 --> 00:02:23.260
Well we can make use of the comparison operators.
37

38
00:02:23.260 --> 00:02:29.050
We already used equal to == when we check to see if the code product and sum is equal to the guest product
38

39
00:02:29.050 --> 00:02:29.990
and sum.
39

40
00:02:30.010 --> 00:02:34.720
And as you can see there's different comparison operators here that we can make use of.
40

41
00:02:34.720 --> 00:02:40.630
So to check to see if the value of LevelDifficulty is less than or equal to MaxDifficulty we should
41

42
00:02:40.630 --> 00:02:45.190
make use of the less than or equal to <= comparison operator.
42

43
00:02:45.190 --> 00:02:54.160
So let's change the condition of our while loop from true to LevelDifficulty <= MaxDifficulty
43

44
00:02:54.280 --> 00:03:02.470
so if LevelDifficulty is below or equal to 5 my while loop will continue executing this
44

45
00:03:02.470 --> 00:03:05.480
code block but as soon as the condition is not met.
45

46
00:03:05.500 --> 00:03:11.950
Meaning when the level difficulty goes above 5 the while loop would end and the rest of the code of our program
46

47
00:03:12.130 --> 00:03:16.420
will execute which is just the return statement for our main function here.
47

48
00:03:16.420 --> 00:03:20.680
So when all levels are completed the program will exit.
48

49
00:03:20.710 --> 00:03:27.970
So in C++ we can create conditions for while loops and if statements that compare values by using comparison
49

50
00:03:28.000 --> 00:03:34.460
operators also now let's save our work let's compile our code and let's run our program.
50

51
00:03:35.590 --> 00:03:41.170
So we have to enter the correct code to complete the level and move on to the next difficulty level in my
51

52
00:03:41.170 --> 00:03:41.710
game.
52

53
00:03:41.710 --> 00:03:47.520
If the player enters the wrong code you lose gets printed to the terminal and we have to retry.
53

54
00:03:47.740 --> 00:03:52.420
And if the player enters the correct code we can see that you win gets printed to the terminal and the
54

55
00:03:52.420 --> 00:03:57.370
level difficulty increases and the maximum difficulty level is set to 5.
55

56
00:03:57.370 --> 00:04:05.410
So once I get to level 5 and enter the correct code you win gets printed to the terminal and the program
56

57
00:04:05.650 --> 00:04:06.490
exits.
57

58
00:04:06.670 --> 00:04:13.630
So we print our win and lose messages from our play game function where we return true or false from
58

59
00:04:13.630 --> 00:04:15.790
our if else statements here.
59

60
00:04:15.790 --> 00:04:21.910
Now I want you to update the strings we print so they reflect completing the level and moving onto the
60

61
00:04:21.910 --> 00:04:22.540
next level.
61

62
00:04:22.750 --> 00:04:28.180
If the player enters the correct code and we also want to update the string where we return false in
62

63
00:04:28.180 --> 00:04:34.000
our play game function to reflect retrying the level if the player enters the wrong code then we want
63

64
00:04:34.000 --> 00:04:39.640
to have a final message printed to the terminal that congratulates the player on winning the game before
64

65
00:04:39.640 --> 00:04:45.490
the program exits so before the return statement in the main function print a string that congratulates
65

66
00:04:45.490 --> 00:04:48.010
the player on completing your game.
66

67
00:04:48.010 --> 00:04:52.750
And again remember to head over to our community forum if you haven't done so already to post the results
67

68
00:04:52.750 --> 00:04:57.700
of your work so far in this course it'll be great to see how you've tied all of this in the theme of
68

69
00:04:57.700 --> 00:05:02.130
your game and maybe you can get a few ideas from other students here too if you get stuck.
69

70
00:05:02.140 --> 00:05:05.800
So pause here to fix up your strings and then when you're ready we can continue
70

71
00:05:09.300 --> 00:05:12.060
Okay so I've updated the strings in my play game function.
71

72
00:05:12.060 --> 00:05:12.860
They get printed.
72

73
00:05:12.870 --> 00:05:18.630
If the player completes or fails to level then at the end of my main function I prints my game winning
73

74
00:05:18.690 --> 00:05:19.240
message.
74

75
00:05:19.590 --> 00:05:19.980
Awesome.
75

76
00:05:19.980 --> 00:05:24.930
So the theme of my tripleX game is about a secret agent breaking into server rooms to extract some
76

77
00:05:24.930 --> 00:05:25.770
files.
77

78
00:05:25.770 --> 00:05:32.010
So as a player if I enter the incorrect code we get a message that says you entered the wrong code.
78

79
00:05:32.010 --> 00:05:32.860
Careful agent.
79

80
00:05:32.880 --> 00:05:33.930
Try again.
80

81
00:05:33.930 --> 00:05:39.880
So as a player I'm encouraged to retry the level when I completely level by entering the correct answer.
81

82
00:05:39.990 --> 00:05:42.910
We get a message that says well done agent you extracted the file.
82

83
00:05:42.930 --> 00:05:45.240
Keep going and it moves on to the next level.
83

84
00:05:45.270 --> 00:05:52.260
But now if I go ahead and complete every single level we get a message that says great work Agent you
84

85
00:05:52.260 --> 00:05:53.360
got all the files.
85

86
00:05:53.370 --> 00:05:54.570
Now get out of there.
86

87
00:05:54.600 --> 00:05:56.470
So that's my game winning message.
87

88
00:05:56.580 --> 00:06:01.050
So I hope you updated your strings to reflect the gameplay while incorporating the theme of your own
88

89
00:06:01.110 --> 00:06:01.890
game.
89

90
00:06:01.890 --> 00:06:06.150
But now we want to work on the missing ingredient for our game which is randomized in the code that
90

91
00:06:06.150 --> 00:06:13.620
the player has to guess instead of hard coding codeA codeB and codeC we want our program to generate
91

92
00:06:13.620 --> 00:06:16.550
some numbers for us that the player has to guess.
92

93
00:06:16.590 --> 00:06:21.660
So instead of initializing these variables with a value that we've chosen we're going to initialize
93

94
00:06:21.660 --> 00:06:24.880
them by calling a function that is named rand()
94

95
00:06:24.930 --> 00:06:29.960
This function simply returns a random number so let's do this now.
95

96
00:06:29.970 --> 00:06:33.550
Let's initialize our variables here by calling rand() to do this for code.
96

97
00:06:33.580 --> 00:06:38.330
A will do the same for codeB and we'll do the same for codeC
97

98
00:06:38.370 --> 00:06:39.450
Now let's save our work.
98

99
00:06:39.480 --> 00:06:45.580
Let's compile our code and let's see what happens when we run our program now.
99

100
00:06:45.660 --> 00:06:46.250
Wow okay.
100

101
00:06:46.320 --> 00:06:49.880
So when we do this we're getting some pretty crazy numbers coming out here.
101

102
00:06:49.950 --> 00:06:51.540
So why is this happening.
102

103
00:06:51.540 --> 00:06:57.270
Well this is because the rand function returns a random number anywhere between zero and a value that
103

104
00:06:57.270 --> 00:07:02.910
is guaranteed to be at least thirty two thousand seven hundred and sixty seven.
104

105
00:07:02.940 --> 00:07:05.870
So there's a huge range of numbers here that we are working with.
105

106
00:07:05.880 --> 00:07:10.800
So while we are getting some random numbers now we can see that we can't just work with random numbers
106

107
00:07:10.800 --> 00:07:11.510
recklessly.
107

108
00:07:11.590 --> 00:07:16.970
It will make our game impossible to play and remember we have our level difficulty.
108

109
00:07:16.970 --> 00:07:21.690
We want our game to start off easier and then get harder as we keep playing.
109

110
00:07:22.110 --> 00:07:25.800
So we're going to want to do some play tuning to get a difficulty of our game right.
110

111
00:07:25.840 --> 00:07:30.460
We want to have control over the range of the random numbers that are generated.
111

112
00:07:30.510 --> 00:07:33.080
So we need to figure out how we're going to approach this.
112

113
00:07:33.090 --> 00:07:35.760
Then our triplex game is pretty much there.
113

114
00:07:35.760 --> 00:07:41.150
This is really the last remaining step for our game so well done for making it this far into the section
114

115
00:07:41.160 --> 00:07:44.760
we're nearly there and then we'll be switching over to Unreal Engine 4.
115

116
00:07:44.820 --> 00:07:46.610
So before moving into the next lesson.
116

117
00:07:46.620 --> 00:07:52.200
Make sure to head over to our community forum and post the progress you've made so far in the course.
117

118
00:07:52.200 --> 00:07:56.750
And then when you're ready we'll be working with these random numbers in the next lesson.
