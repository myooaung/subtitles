WEBVTT
1
00:00:04.300 --> 00:00:06.240
Hello everybody and welcome back in this lecture.

2
00:00:06.240 --> 00:00:11.050
We're going to have a look at how logical operators we've already played with one of them several times

3
00:00:11.350 --> 00:00:16.360
and that's the not so whenever we include an exclamation mark we're saying something along the lines

4
00:00:16.360 --> 00:00:22.510
of not equal to or in the case of when we're checking the is I say gram we actually in the if statement

5
00:00:22.510 --> 00:00:24.610
say if not ice a gram.

6
00:00:24.610 --> 00:00:28.020
So that's an example of that operator we've used it quite a bit.

7
00:00:28.030 --> 00:00:32.130
Now there are a couple of additional ones the and an all operator.

8
00:00:32.230 --> 00:00:40.000
So if we take the and which is to Ampersand next to one another we can evaluate two things at the same

9
00:00:40.000 --> 00:00:46.270
time if we can evaluate more than two things if we want to the end means that it has to meet all of

10
00:00:46.270 --> 00:00:50.290
these criteria for the output to be true to the output to be one.

11
00:00:50.350 --> 00:00:57.080
Otherwise it will fail that check and the or operator it has to pass.

12
00:00:57.130 --> 00:01:03.630
In the case of there being two options it would have to pass one of those two checks if it was three

13
00:01:03.640 --> 00:01:06.540
then it would be one of those three checks etc..

14
00:01:06.550 --> 00:01:11.260
Now one thing to bear in mind is there is really no limits when it comes to this.

15
00:01:11.380 --> 00:01:15.790
Just the same as Next thing you can continue nesting things over and over.

16
00:01:15.790 --> 00:01:22.090
In fact before we learnt about these you may have just nested in If statement and if you pass that check

17
00:01:22.330 --> 00:01:27.490
let's say with the length of a word which we're about to do we would just check it again against the

18
00:01:27.490 --> 00:01:32.370
new criteria with the nested IF statement and then if it passed would be able to use that word.

19
00:01:33.160 --> 00:01:39.190
So you can nest loops indefinitely you can use these logical operators indefinitely as well.

20
00:01:39.190 --> 00:01:42.890
But the most important thing here is the readability of your code.

21
00:01:42.970 --> 00:01:49.990
If you nest too deep or have too many logical operations going on in one place it is going to be difficult

22
00:01:49.990 --> 00:01:53.590
for anybody reading your code to really grasp what you're trying to do.

23
00:01:54.130 --> 00:01:59.620
So in this particular case do bear that in mind as you start developing your code and I would like to

24
00:01:59.620 --> 00:02:01.650
jump straight into a challenge.

25
00:02:01.660 --> 00:02:06.640
We already know about statements so using the for loop we've already got I'd like you to create an if

26
00:02:06.640 --> 00:02:12.430
statement that checks words from the tea array and I'd like you to check the first 10 words at the moment

27
00:02:12.430 --> 00:02:13.390
we're doing the first five.

28
00:02:13.390 --> 00:02:18.250
In this case I'd like you to check the first 10 and what I'd like you to do is if the word is greater

29
00:02:18.250 --> 00:02:23.990
than or equal to four characters and less than or equal to eight characters print them out.

30
00:02:24.060 --> 00:02:25.330
Now if you know how to do that.

31
00:02:25.330 --> 00:02:27.120
Go ahead dive in and do it now.

32
00:02:27.150 --> 00:02:30.850
But there is a hint coming up for those who need a little bit more help

33
00:02:34.470 --> 00:02:34.770
OK.

34
00:02:34.800 --> 00:02:40.110
So let's have a look at our hints here so we can have a look at all three logical operators here.

35
00:02:40.200 --> 00:02:47.370
One that you're familiar with by now is the if not condition we use that if they're not icy Graham and

36
00:02:47.370 --> 00:02:49.920
then we execute some code so we can do something there.

37
00:02:50.100 --> 00:02:56.790
We could say if this condition and this condition are met we're going to execute this code underneath.

38
00:02:56.790 --> 00:03:02.580
That's the one that we're probably going to be using in the challenge and then we have the if this condition

39
00:03:02.790 --> 00:03:08.220
or the other condition then we execute the code we need to make sure that we understand that if either

40
00:03:08.220 --> 00:03:15.180
of those conditions are true it will execute the code underneath suppose video now and give us a go

41
00:03:17.880 --> 00:03:19.170
Okay everybody Welcome back.

42
00:03:19.380 --> 00:03:23.460
Okay so let's hop over to our implementation and work out what we're doing.

43
00:03:23.520 --> 00:03:27.720
First of all printing out a particular word at an index.

44
00:03:27.840 --> 00:03:32.310
That's absolutely fine but we need to have a check to make sure we're not printing the short words if

45
00:03:32.310 --> 00:03:38.640
we have a look at my particular index of highlights the first 10 here we hopefully going to be down

46
00:03:38.640 --> 00:03:44.820
to seven in total so we're going to have the A will be gone the according will be gone and if I hover

47
00:03:44.820 --> 00:03:49.440
over it you can see here the number of indices that we have is 10 that includes the quotation marks.

48
00:03:49.440 --> 00:03:53.370
This one's nine in length so that one will also go and act will be gone as well.

49
00:03:53.370 --> 00:03:59.430
So those ten items will be reduced hopefully down to seven.

50
00:03:59.460 --> 00:04:00.270
So let's go over.

51
00:04:00.270 --> 00:04:02.060
Back to our implementation.

52
00:04:02.130 --> 00:04:04.050
So what are we going to write here.

53
00:04:04.100 --> 00:04:10.440
We are going to say if and then a certain condition and another condition.

54
00:04:10.440 --> 00:04:17.220
So we're going to say if when we have a look at the words array at a certain point in the array.

55
00:04:17.220 --> 00:04:24.610
So this is going to be the index we're looking at individual word dot L E and now just to break that

56
00:04:24.610 --> 00:04:26.530
down on why we can do that.

57
00:04:26.590 --> 00:04:31.580
We're basically saying this is going to return a short f string at that position.

58
00:04:31.630 --> 00:04:38.230
So then we can use the function dot length from it and we're going to say is greater than or equal to

59
00:04:38.290 --> 00:04:41.740
4 and then we need our double ampersand.

60
00:04:42.220 --> 00:04:45.930
And so it has to be greater than 4 and less than 8.

61
00:04:46.090 --> 00:04:52.770
Not greater than 4 or less than 8 because that's going to include everything in that particular case.

62
00:04:52.810 --> 00:05:01.010
So we can use the same one again the words and we're talking about a specific index in the words and

63
00:05:01.010 --> 00:05:08.610
again the DOT link function is less than or equal to eight.

64
00:05:08.750 --> 00:05:12.130
So if it meets this criteria we are going to print it out.

65
00:05:13.370 --> 00:05:14.620
There we go.

66
00:05:14.630 --> 00:05:16.790
Otherwise we're not gonna do anything.

67
00:05:16.790 --> 00:05:18.860
We don't have to have an Ellis here.

68
00:05:18.890 --> 00:05:19.730
Let's save that.

69
00:05:19.790 --> 00:05:21.290
And check our work.

70
00:05:21.610 --> 00:05:25.250
Click compile okay with the compile complete that's press play.

71
00:05:26.150 --> 00:05:29.360
Okay so we've got ability able abouts and above.

72
00:05:29.360 --> 00:05:31.620
That's only four of our array.

73
00:05:31.640 --> 00:05:32.930
Did I make a mistake here.

74
00:05:33.020 --> 00:05:36.680
Yes I did not increase the size that we were counting to.

75
00:05:36.710 --> 00:05:37.710
My mistake.

76
00:05:37.730 --> 00:05:40.330
We're doing the first 10 of the array not the first five.

77
00:05:40.340 --> 00:05:43.460
So that's a good sign there because we were doing the first five.

78
00:05:43.460 --> 00:05:48.200
If we have a look then it's printed out these four that work.

79
00:05:48.200 --> 00:05:54.830
So let's see if it only prints out seven when we increase the size that we're looking at.

80
00:05:54.830 --> 00:06:01.640
Save our code had over stopped the game and recompile OK with the compiler completes let's check it

81
00:06:01.640 --> 00:06:03.090
this time.

82
00:06:03.100 --> 00:06:03.520
OK.

83
00:06:03.530 --> 00:06:07.780
I'm real done one of those funny things where you have to click compile twice.

84
00:06:07.780 --> 00:06:08.040
OK.

85
00:06:08.060 --> 00:06:09.050
It's complete again.

86
00:06:09.050 --> 00:06:09.910
And here we go.

87
00:06:09.910 --> 00:06:13.760
One two three four five six seven high five.

88
00:06:13.760 --> 00:06:14.960
Brilliant work.

89
00:06:14.960 --> 00:06:20.900
How are you guys getting on I think one of the most challenging things here is figuring this bit out

90
00:06:20.990 --> 00:06:28.730
itself that you're able to cool the length function on something that's not obviously an F string but

91
00:06:28.730 --> 00:06:33.640
you can do that because that's what this part here evaluates to starting to move things around.

92
00:06:33.640 --> 00:06:34.230
Here we go.

93
00:06:34.310 --> 00:06:39.500
This is what this part actually evaluates to more on that in the upcoming lecture and I'll see you over

94
00:06:39.500 --> 00:06:40.550
there real soon.
