WEBVTT
1
00:00:04.220 --> 00:00:09.120
In this lecture, we'll be creating our second widget for the project to display when the game over

2
00:00:09.130 --> 00:00:10.600
criteria has been met.

3
00:00:10.750 --> 00:00:14.950
So visually, this will be exactly the same as our widget blueprint.

4
00:00:15.070 --> 00:00:21.310
Underscore GameStop so we can just duplicate this and rename it to WPP underscore game and.

5
00:00:22.740 --> 00:00:28.800
Inside of the designer section, the only thing I want to change is the name of the text from text count

6
00:00:28.800 --> 00:00:31.080
down to a text game result.

7
00:00:32.550 --> 00:00:39.150
Then in the graft section, I'm going to swap the interview to be a boolean and just agree to the pop

8
00:00:39.150 --> 00:00:43.380
up as we'll be going through and fixing the sections that this will break.

9
00:00:45.260 --> 00:00:48.020
So I'll also rename this to be player one.

10
00:00:48.350 --> 00:00:52.680
And that is the value changed and ready to use for the functions we're still going to want.

11
00:00:52.760 --> 00:00:59.690
The initialise text function, but I'll remove the timer here and change how the text is displayed and

12
00:00:59.690 --> 00:01:00.380
initialized.

13
00:01:00.620 --> 00:01:06.710
So if we drag from the text pane and search for a select tonight the index, which is the option which

14
00:01:06.710 --> 00:01:11.870
will decide which text to be displayed here, this will be our player one boolean.

15
00:01:12.170 --> 00:01:13.460
And if this is false.

16
00:01:13.520 --> 00:01:18.560
So if the player has lost, then we'll leave a message to that effect.

17
00:01:18.860 --> 00:01:22.220
And if it's true, then we'll leave a message saying that they've won.

18
00:01:22.610 --> 00:01:29.330
We can also remove the count down and the remove UI function as we won't be using those in this class.

19
00:01:29.630 --> 00:01:31.580
This isn't going to need to do anything over time.

20
00:01:31.580 --> 00:01:37.250
This will just be changing the text dynamically, depending on whether the game has been won or lost

21
00:01:37.250 --> 00:01:37.940
by the player.

22
00:01:38.270 --> 00:01:43.160
And then finally, if we compile this class, we can see that we have one error left, which is the

23
00:01:43.220 --> 00:01:46.730
set start delay function is still using an integer.

24
00:01:46.970 --> 00:01:52.280
So I'll give you a small challenge here, and that is to fix the existing function so that we can reuse

25
00:01:52.370 --> 00:01:53.990
the function we already have.

26
00:01:54.020 --> 00:01:56.960
But this time to update the player one boolean.

27
00:01:57.140 --> 00:01:58.920
So this is still going to be a setter function.

28
00:01:59.000 --> 00:02:00.020
But just for a different type.

29
00:02:00.320 --> 00:02:04.430
So I renamed this function to something suitable, such as set to play player one.

30
00:02:04.730 --> 00:02:08.220
Remember to also update the input variable and the type name.

31
00:02:08.450 --> 00:02:12.410
So as ever, the Hensel on screen pause video here and see how you get some.

32
00:02:13.550 --> 00:02:13.690
OK.

33
00:02:13.880 --> 00:02:15.250
So to fix this first.

34
00:02:15.290 --> 00:02:18.020
Change the name of the function to set player one.

35
00:02:20.490 --> 00:02:26.310
Change the type input from an ant to a boolean and just rename the input to play a one.

36
00:02:28.330 --> 00:02:35.200
You can then drag the pin from the function to the variable input and click the existing pin to remove

37
00:02:35.200 --> 00:02:35.560
that one.

38
00:02:35.800 --> 00:02:40.780
So if you compile this night, you still actually get one final error because the note itself hasn't

39
00:02:40.780 --> 00:02:41.350
updated.

40
00:02:41.620 --> 00:02:46.900
We can fix this real easy without making any additional changes or creating new notes by simply.

41
00:02:46.900 --> 00:02:47.140
Right.

42
00:02:47.140 --> 00:02:50.230
Clicking the variable note and selecting refresh.

43
00:02:50.530 --> 00:02:55.000
And this will change it from the industry variable to our new boolean variable.

44
00:02:55.300 --> 00:02:59.470
We can see that the name was still kind of out of sync and that's now being refreshed and updated.

45
00:02:59.830 --> 00:03:04.570
So this final function is very similar to what we did previously in the start widget.

46
00:03:04.830 --> 00:03:10.060
And that is going to allow us to update the widget with whether the player has won or lost.

47
00:03:10.270 --> 00:03:16.600
But keep the variable secure in the class using a set of function to update the variable from either

48
00:03:16.690 --> 00:03:18.760
a C++ or blueprint class.

49
00:03:19.020 --> 00:03:24.160
This will be created him because we'd previously set the industry value to be private and all we've

50
00:03:24.160 --> 00:03:25.990
done is updated the variable type.

51
00:03:26.020 --> 00:03:27.330
It would keep information like this.

52
00:03:27.340 --> 00:03:31.600
So that would still be a private value and this was a much less involved step.

53
00:03:31.840 --> 00:03:35.920
But we don't have both of our widgets ready to get into the game so that we can start visualizing the

54
00:03:35.920 --> 00:03:39.160
start on the end of the game, as well as checking the win.

55
00:03:39.220 --> 00:03:43.960
Lose conditions are actually being processed correctly in our C++ class.
