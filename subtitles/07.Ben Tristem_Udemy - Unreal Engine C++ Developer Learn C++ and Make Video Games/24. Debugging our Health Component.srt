1
00:00:04,160 --> 00:00:08,800
This lecture is a kind of additional topic that I wanted to cover on debugging.

2
00:00:08,990 --> 00:00:13,960
And at this stage, you won't actually be experiencing the same error that I'm going to be showing,

3
00:00:14,090 --> 00:00:15,140
which is in my code.

4
00:00:15,260 --> 00:00:20,630
But hopefully this will prove as a useful kind of insight to debugging an issue when you've made what

5
00:00:20,630 --> 00:00:25,340
is quite a simple layer to make in the code that doesn't actually cause any errors or warnings.

6
00:00:25,370 --> 00:00:31,370
But it does stop the project from running or responding as you had intended or expected.

7
00:00:31,850 --> 00:00:38,030
This was the result of me making a really simple mistake in my prototype project and just not noticing

8
00:00:38,030 --> 00:00:43,640
it as I went through and continued expanding whilst annoying small issues like this one that we're about

9
00:00:43,640 --> 00:00:49,400
to discover can be really useful for learning how to track down weird, unexpected behavior as we're

10
00:00:49,400 --> 00:00:53,000
not getting a fatal crash or pretty much any response at all.

11
00:00:53,120 --> 00:00:57,290
So let's go ahead, find out what I did and see if you can spot this along the way.

12
00:00:57,620 --> 00:01:03,890
So the problem that I had was that regardless of what I set the health to in the tank class, and I

13
00:01:03,890 --> 00:01:09,050
think it was for the entire class as well, I always seemed to be getting destroyed almost as soon as

14
00:01:09,050 --> 00:01:10,190
I was pressing play.

15
00:01:10,280 --> 00:01:11,750
I have some recordings of this as well.

16
00:01:11,870 --> 00:01:14,150
And I had an idea of what this might have been.

17
00:01:14,430 --> 00:01:19,280
I'm not going to show you is the kind of process that I took to debug through this, because this is

18
00:01:19,280 --> 00:01:23,420
one of those things where I'd look to the code for quite so long that what could have been quite an

19
00:01:23,450 --> 00:01:25,340
obvious mistake didn't really stand right to me.

20
00:01:25,670 --> 00:01:29,360
Because you get to a stage when when you're just reading through code, you kind of skim things almost

21
00:01:29,360 --> 00:01:29,870
like a book.

22
00:01:29,900 --> 00:01:35,240
I suppose what you're looking for most serious errors, then what was the actual problem at the end?

23
00:01:35,450 --> 00:01:37,790
So back in the code file, you can kind of follow along.

24
00:01:37,790 --> 00:01:40,400
Like I said, your code is going to be slightly different here, which is fine.

25
00:01:40,550 --> 00:01:46,310
I have a challenge for you right off the bat here, and that is to place an unreal log in the take damage

26
00:01:46,310 --> 00:01:50,690
function and print out a message, including the amount of health remaining.

27
00:01:50,810 --> 00:01:52,550
So this was the first step that I took.

28
00:01:52,640 --> 00:01:55,980
So I'm just gonna get you to do that as your challenge for this lecture.

29
00:01:56,180 --> 00:02:01,430
And what you should be doing before you post video is just considering the best place to insert the

30
00:02:01,430 --> 00:02:03,470
log as well as the log type.

31
00:02:03,560 --> 00:02:08,330
And remembering how to display the health value is kind of appended to that log.

32
00:02:08,680 --> 00:02:10,790
So post video now and give that one to go.

33
00:02:11,980 --> 00:02:17,210
Okay, so we already know how to log values to the output using the UEE underscore log.

34
00:02:17,420 --> 00:02:20,990
The main thing that we want to consider is the place in which we want to put this.

35
00:02:21,170 --> 00:02:25,460
And in this case, we know that the health, as I've described, was being successfully updated.

36
00:02:25,460 --> 00:02:30,290
At least it was always being taken away and the tank and the tarps were being destroyed.

37
00:02:30,470 --> 00:02:33,440
So the most useful place we're not checking whether this is taking Healthway.

38
00:02:33,440 --> 00:02:34,560
We're checking high.

39
00:02:34,640 --> 00:02:35,840
The health is being taken away.

40
00:02:36,050 --> 00:02:41,210
So I think the most useful place for this is going to be just after the health value is being updated

41
00:02:41,450 --> 00:02:44,930
so we can see what value is being changed each time we're hit.

42
00:02:45,380 --> 00:02:50,480
I'm going to make this a log temp and of type warning, and then I'm just going to add a string.

43
00:02:50,570 --> 00:02:55,670
How followed by Double Kerlan and then a percentage F, which is our indicator that we're expecting

44
00:02:55,700 --> 00:02:59,630
a flight value to be passed in as part of the final thing to print.

45
00:02:59,860 --> 00:03:01,040
Then finally, outside of this.

46
00:03:01,100 --> 00:03:03,890
Followed by a comma will pass in our health value.

47
00:03:04,130 --> 00:03:09,920
So let's go back to the editor and compile this and I'll see what's happening in my original kind of

48
00:03:10,030 --> 00:03:11,120
prototype project.

49
00:03:11,210 --> 00:03:15,530
So with that compiled, this is kind of confirming part of my suspicion that we're taking damage.

50
00:03:15,710 --> 00:03:17,420
As soon as the game launches.

51
00:03:17,660 --> 00:03:22,340
And then once more to take off the final bit of health after the targets to second fire.

52
00:03:22,340 --> 00:03:22,510
Right.

53
00:03:22,520 --> 00:03:22,910
Cool down.

54
00:03:22,970 --> 00:03:28,880
So this is because way back when I was creating this, I'd set the timer controlling the turrets fire.

55
00:03:28,880 --> 00:03:29,180
Right.

56
00:03:29,180 --> 00:03:30,770
To not have an initial delay.

57
00:03:31,010 --> 00:03:31,550
And that's fine.

58
00:03:31,550 --> 00:03:33,020
That will work perfectly fine.

59
00:03:33,260 --> 00:03:38,540
It's just that I also expected the plan to start just slight side of the detection radius.

60
00:03:38,690 --> 00:03:42,900
So this issue would have been fixed by moving the player away from the turret, which is something that

61
00:03:42,900 --> 00:03:43,670
I was going to do in the.

62
00:03:43,700 --> 00:03:45,050
Kind of level pass anyway.

63
00:03:45,290 --> 00:03:49,430
But that does confirm, at the very least, that we are taking two hits before being destroyed.

64
00:03:49,460 --> 00:03:52,970
So the calculation, the math and everything like that seems to be working fine.

65
00:03:53,450 --> 00:03:58,670
So let's go back into the health component code and see why the health isn't being updated.

66
00:03:58,850 --> 00:04:01,220
In the adisa, which seems to be the main problem we have here.

67
00:04:01,700 --> 00:04:06,110
So we can cut the log from the take damage function as we've solved that part already.

68
00:04:06,350 --> 00:04:09,920
And then we're gonna move up to where we're setting the P for health.

69
00:04:10,220 --> 00:04:11,900
And this is the bit which is going to look different for you.

70
00:04:12,350 --> 00:04:17,690
And some of you might have really seen this when we were brushing through the code file and have noticed

71
00:04:17,690 --> 00:04:18,280
what the issue is.

72
00:04:18,290 --> 00:04:23,150
But we'll debug this all the same so you can see firsthand what the problem was.

73
00:04:23,330 --> 00:04:26,120
And again, this should make it hopefully more readily available in memory.

74
00:04:26,390 --> 00:04:30,920
If you make a similar mistake in your project and you are not sure at the time how to fix it.

75
00:04:31,250 --> 00:04:35,480
This you might not need to follow along with because the print strings be completely different for you

76
00:04:35,480 --> 00:04:38,840
and me as when we've gone through this in the lectures.

77
00:04:39,020 --> 00:04:44,630
I've obviously put this in the correct place, but the problem here is I'm making a dynamic variable

78
00:04:44,630 --> 00:04:49,190
update in the class constructor, which is a mistake that I missed, as I said, during the initial

79
00:04:49,190 --> 00:04:50,030
implementation.

80
00:04:50,150 --> 00:04:55,730
So if I paste the UNRRA log after assessing the health value and see what's happening, if you wanted

81
00:04:55,730 --> 00:05:00,050
to, you could set yours in the beginning play and see how yours is being called differently.

82
00:05:00,200 --> 00:05:06,170
So again, back in the editor with that compiled and ready to go back in the tank, I'm going to change

83
00:05:06,170 --> 00:05:10,130
the health to something much higher so that we know that we should be expecting to take way more than

84
00:05:10,130 --> 00:05:10,610
two hits.

85
00:05:10,640 --> 00:05:14,420
I've gone for 1000 points of health and then back in the output log.

86
00:05:14,450 --> 00:05:18,410
We can see that each time that we've made a change that would have called the constructor.

87
00:05:18,860 --> 00:05:20,330
This has still only been set.

88
00:05:20,360 --> 00:05:25,340
It's been called, but it's only being set to one hundred, which is the value that offsets the default

89
00:05:25,340 --> 00:05:30,950
health to be when declaring it to avoid a no value in the header then because we've now gone past the

90
00:05:30,980 --> 00:05:32,060
construction stage.

91
00:05:32,120 --> 00:05:34,580
Even if I press play, this isn't going to be updated.

92
00:05:34,700 --> 00:05:38,930
And you can see that we'll take two hits and we'll lose our one hundred health and die.

93
00:05:39,080 --> 00:05:44,320
So back in the code fall, as I said, you should have if you following along with your unrelaxed,

94
00:05:44,450 --> 00:05:48,290
then you'll see that you have different results to what's being printed.

95
00:05:48,500 --> 00:05:54,080
And back in the code for the fix to this and the correct approach whenever setting a variable in this

96
00:05:54,080 --> 00:05:58,640
way is just to make sure that we put that in the beginning play function.

97
00:05:58,730 --> 00:06:03,020
So all variable initialization like this should be done outside of the constructor.

98
00:06:03,110 --> 00:06:03,260
No.

99
00:06:03,260 --> 00:06:07,250
One to make a point of this, it can be very easy, especially when you're making a lot of components

100
00:06:07,580 --> 00:06:11,590
and you using the create default sub object of function as we have so many times.

101
00:06:11,600 --> 00:06:17,010
You must, I suppose, get a little bit and go on like an auto programmer mode where you just start

102
00:06:17,010 --> 00:06:19,810
putting everything that you're initializing into the construct.

103
00:06:19,820 --> 00:06:20,840
And I think that's what I did here.

104
00:06:21,130 --> 00:06:25,490
And I think that's also was very easy to overlook because at a glance, you know, that you've initialized

105
00:06:25,490 --> 00:06:29,720
so many things in the constructor that doesn't jump at you as an arrow straight away.

106
00:06:29,840 --> 00:06:32,870
And that's why I kind of had to debug back through things like this to find the arrow.

107
00:06:33,110 --> 00:06:34,730
So just to show the different results.

108
00:06:34,730 --> 00:06:38,690
So with my code and I'm in the correct place, I won't need the log any longer.

109
00:06:38,690 --> 00:06:40,100
So I'm going to remove that.

110
00:06:40,490 --> 00:06:42,020
Just recompile this one last time.

111
00:06:44,370 --> 00:06:47,990
No Pressplay to show the final results, which is really going to be what you have anyway.

112
00:06:48,140 --> 00:06:53,720
So as you can see here, I can leave the tank where it is and take a lot more hits as the health is

113
00:06:53,720 --> 00:06:59,240
not being correctly updated from the default health value because that is now on the Biggin place.

114
00:06:59,240 --> 00:07:03,860
So all of these are being initialized properly, which means that we can easily change and update this

115
00:07:03,860 --> 00:07:08,510
in the editor to get the to try different values and things for our health values.

116
00:07:08,870 --> 00:07:14,690
So this was just a quick aside from the project that was just a little bit more in debugging.

117
00:07:14,720 --> 00:07:19,580
And I thought that was quite useful because it's a very kind of realistic scenario actually happens

118
00:07:19,580 --> 00:07:23,630
to me, rather than trying to make up a debugging scenario just for a lecture.

119
00:07:23,820 --> 00:07:24,940
So I wanted to keep that one here.

120
00:07:25,250 --> 00:07:30,890
But with that fixed in my existing project, when I'm ready to move on to the next topics and start

121
00:07:30,890 --> 00:07:32,540
finalizing our game.
