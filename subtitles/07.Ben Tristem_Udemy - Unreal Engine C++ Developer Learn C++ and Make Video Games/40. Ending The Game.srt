1
00:00:04,570 --> 00:00:05,260
Hello and welcome.

2
00:00:05,290 --> 00:00:10,450
In this lecture, we're gonna be creating a killer all game mode, which is going to be just one of

3
00:00:10,450 --> 00:00:17,380
the possible game modes that we can create due to having a virtual pawn killed method that could be

4
00:00:17,380 --> 00:00:19,810
called on any of the game modes that we want.

5
00:00:20,110 --> 00:00:24,370
Let's dive in and see how we're going to implement this virtual method.

6
00:00:25,700 --> 00:00:28,670
So we would like our game to be able to end.

7
00:00:28,700 --> 00:00:29,780
What does it mean for a game to end?

8
00:00:29,780 --> 00:00:34,790
It means that we go into some sort of state where we are the one or we've lost.

9
00:00:35,180 --> 00:00:37,280
We inform the player using some UI.

10
00:00:37,280 --> 00:00:42,950
We give them the option to maybe restart and play again, something along those lines.

11
00:00:43,160 --> 00:00:46,880
Now, the classes involved with this typically are a game mode.

12
00:00:46,940 --> 00:00:52,250
The game mode is responsible for deciding rules about the game, such as who won and who lost.

13
00:00:52,970 --> 00:00:58,340
And for that, we're going to need to know who is being killed so we can have this virtual method here

14
00:00:58,790 --> 00:01:05,510
called Pawn Killed, which will be called from our shooter pawn when it dies, whether or not it is

15
00:01:05,510 --> 00:01:09,200
the A.I. or is the player that is doing the dying.

16
00:01:10,550 --> 00:01:15,320
And furthermore, I want to add a little complication here, which is that we'll have different game

17
00:01:15,320 --> 00:01:18,380
modes derived from our main shooter game mode.

18
00:01:18,710 --> 00:01:20,330
They will implement that game mode.

19
00:01:20,360 --> 00:01:21,590
That's what the arrow means here.

20
00:01:21,590 --> 00:01:27,950
It's often a little bit counterintuitive the way the arrow goes, but KMEL game mode inherits from the

21
00:01:27,950 --> 00:01:35,060
shooter game mode and it overrides pawn killed in order to count up and decide differently on the rules

22
00:01:35,120 --> 00:01:35,780
of the game.

23
00:01:35,790 --> 00:01:41,780
So that's why I want to put a virtual pawn killed method over in the parent shooter game mode and then

24
00:01:42,250 --> 00:01:48,680
implement or override it again in the kill or game mode, which is going to be the game that we're implementing

25
00:01:48,740 --> 00:01:49,400
for ourselves.

26
00:01:49,790 --> 00:01:54,470
And you might choose to do different game modes where maybe you just want to kill a certain amount of

27
00:01:54,470 --> 00:01:58,460
the enemies in the level rather than all of them or something along those lines.

28
00:01:58,460 --> 00:02:00,500
Maybe a capture the flag, something different.

29
00:02:02,040 --> 00:02:07,080
But basically, what's going to happen is the shooter porn is going to find the game mode.

30
00:02:07,230 --> 00:02:12,930
That's got the type shooter gay mode and is going to call it's porn killed.

31
00:02:13,260 --> 00:02:19,020
And then depending on whatever implementation there's actually there, it's going to go through to the

32
00:02:19,050 --> 00:02:21,030
implementation via the override.

33
00:02:22,110 --> 00:02:28,380
Now, another complication here is that our UI logic and restarting logic is really something that should

34
00:02:28,380 --> 00:02:35,190
happen in the player controller UI generally being the purview of the player rather than something global

35
00:02:35,190 --> 00:02:36,120
like the game mode.

36
00:02:36,450 --> 00:02:42,870
This is especially true in games that are multiplayer because the game mode doesn't actually exist on

37
00:02:42,870 --> 00:02:43,730
the players machine.

38
00:02:43,830 --> 00:02:45,140
Only exists on the server.

39
00:02:45,180 --> 00:02:49,080
So any UI stuff should be going on in the player controller.

40
00:02:49,710 --> 00:02:52,650
That's a complication we don't need to worry about because this is not a multiplayer game, but it's

41
00:02:52,650 --> 00:02:57,270
still good to use the classes for what they're expected to be used for in general.

42
00:02:58,020 --> 00:03:05,040
So the player controller at the actual root play controller class has a virtual method called game has

43
00:03:05,040 --> 00:03:07,500
ended specifically for this purpose.

44
00:03:07,590 --> 00:03:14,780
So that's the game mode can call this method and we can implement it in our own shooter play controller

45
00:03:14,790 --> 00:03:21,120
to do UI, restarting all that sort of stuff, but will need to be calling it from our game mode when

46
00:03:21,120 --> 00:03:23,580
we have decided that the game is over.

47
00:03:23,610 --> 00:03:30,020
So we'll call the virtual game has ended on the root player controller and then because that root player

48
00:03:30,030 --> 00:03:35,250
controller is actually a shooter, player controller will end up diverting back and calling.

49
00:03:35,310 --> 00:03:36,140
This game has ended.

50
00:03:36,150 --> 00:03:38,460
So it seems like a circuitous route.

51
00:03:38,490 --> 00:03:44,250
We're gonna be calling from our shooter pawn via the shooter game mode to the KMEL game mode, to the

52
00:03:44,250 --> 00:03:46,380
player controller, to the shooter player controller.

53
00:03:46,740 --> 00:03:52,350
But this allows us lots of flexibility in terms of saying, well, we can mix and match different play

54
00:03:52,350 --> 00:03:53,100
controllers.

55
00:03:53,370 --> 00:03:57,450
That will show you why in different ways and different levels, we can mix and match different game

56
00:03:57,450 --> 00:03:59,580
modes that are going to work in different ways.

57
00:03:59,700 --> 00:04:02,250
And that's the reason for me architecting it in this way.

58
00:04:02,250 --> 00:04:07,770
It's a little bit overkill for our project, but it shows you how this could extend to other projects

59
00:04:07,770 --> 00:04:11,780
with capture the flag game modes and different sorts of play controller.

60
00:04:12,180 --> 00:04:14,250
So let's have a go at implementing it.

61
00:04:14,760 --> 00:04:18,060
We're gonna go and first of all, find a route in game mode.

62
00:04:18,090 --> 00:04:22,110
There's already one created because I started from a C++ project.

63
00:04:22,560 --> 00:04:24,840
We've got this simple shooter game mode base.

64
00:04:25,260 --> 00:04:32,220
And what I want to do here is create a public function which is going to return void and it's going

65
00:04:32,220 --> 00:04:37,460
to be porn killed and we're gonna have to pass in the porn that was killed here.

66
00:04:37,490 --> 00:04:42,330
So it's going to be a porn star called porn killed like so.

67
00:04:42,540 --> 00:04:47,160
And then at the beginning, we're gonna make this a virtual method and we're gonna go ahead and create

68
00:04:47,250 --> 00:04:50,700
a basic implementation, essentially does nothing in here.

69
00:04:50,820 --> 00:04:57,270
Then we're going to create a subclass so new C++ class going to show all classes and we're going to

70
00:04:57,270 --> 00:05:02,190
look for at shooter, simple shooter game mode base as our base class.

71
00:05:02,340 --> 00:05:11,910
And we're gonna call this the kill em all game mode like so and go ahead and create that class.

72
00:05:12,120 --> 00:05:17,970
Then when that has compiled, I want to just switch over for a second and go to our shooter character

73
00:05:18,180 --> 00:05:18,840
C.p.

74
00:05:19,440 --> 00:05:23,400
And you can see in here we've got our is dead in the take damage method.

75
00:05:24,030 --> 00:05:30,510
Now if this is dead, well I want to be doing is getting hold of our game mode and calling the pawn

76
00:05:30,510 --> 00:05:30,960
killed.

77
00:05:31,350 --> 00:05:37,740
So the way we do this is we start with calling to get world in order to get the game mode.

78
00:05:38,040 --> 00:05:40,590
Then it gets off game mode.

79
00:05:40,890 --> 00:05:46,740
And then what we want to do is for this game mode to be of the correct type, which is the simple,

80
00:05:46,770 --> 00:05:47,570
the root one.

81
00:05:47,610 --> 00:05:52,740
The simple shooter game mode that allows us to then switch out this character, use it with different

82
00:05:52,740 --> 00:05:54,750
game modes such as capture the flag game modes.

83
00:05:55,290 --> 00:06:01,410
So the way we can do this, we can use the angle brackets right in the get auth game mode right here.

84
00:06:01,620 --> 00:06:07,650
And we're gonna do a simple shooter game mode and we're going to need to include that top.

85
00:06:08,520 --> 00:06:14,440
So hash include simple shooter game mode base.

86
00:06:14,920 --> 00:06:15,180
Go.

87
00:06:15,790 --> 00:06:18,110
So I didn't quite get the whole class name right?

88
00:06:18,120 --> 00:06:18,720
I think so.

89
00:06:18,720 --> 00:06:21,950
It's going to be a simple shooter game mode base.

90
00:06:22,420 --> 00:06:23,490
That's why we're trying to get.

91
00:06:24,320 --> 00:06:28,020
And we can go ahead and store that in a variable pointer.

92
00:06:28,260 --> 00:06:29,310
Call it the game mode.

93
00:06:29,430 --> 00:06:35,880
And then what we want to do is on this new line, we probably want to check that we have got this and

94
00:06:35,880 --> 00:06:36,780
it's not a null pointer.

95
00:06:36,780 --> 00:06:40,590
So game mode is not equal to a null pointer.

96
00:06:40,770 --> 00:06:47,610
And then if it is not equal to an all points, that is where when a call game mode arrow pawn killed

97
00:06:47,820 --> 00:06:48,840
and the pawn killed.

98
00:06:48,930 --> 00:06:50,520
Is this like so?

99
00:06:50,700 --> 00:06:54,990
So now the game mode is aware of a pawn having been killed.

100
00:06:55,290 --> 00:07:02,010
Little mini challenge for you to override the kill them all game mode so that you can log out when the

101
00:07:02,010 --> 00:07:06,780
pawn is killed and set that as the default game mode in your map.

102
00:07:06,960 --> 00:07:07,210
Okay.

103
00:07:07,260 --> 00:07:09,540
So hopefully had a go at that little mini challenge.

104
00:07:09,870 --> 00:07:11,820
We're going to go ahead and implement.

105
00:07:11,850 --> 00:07:17,310
So I'm going to do this by copying the public section of our simple shooter game mode base.

106
00:07:17,580 --> 00:07:19,290
That's hard to keep track of all these things.

107
00:07:19,770 --> 00:07:23,880
Then we're going to go over to our kill them all game mode base, which inherits from it.

108
00:07:24,570 --> 00:07:31,350
And we're going to paste in the virtual method and we're gonna add the override keyword to make sure

109
00:07:31,350 --> 00:07:33,660
that we're overriding this method correctly.

110
00:07:34,900 --> 00:07:39,420
Then I'm going to create an implementation over in the C++ for our KMEL game mode base.

111
00:07:40,270 --> 00:07:42,970
This is where we should be getting that log message.

112
00:07:43,030 --> 00:07:48,390
And just to be super careful, we know there's nothing in the implementation, but you never know.

113
00:07:48,460 --> 00:07:52,120
Things might change later on and we might get bit in the bomb.

114
00:07:52,150 --> 00:07:55,030
So we want to do a porn killed.

115
00:07:56,420 --> 00:07:58,910
Super porn killed with the porn killed.

116
00:07:59,390 --> 00:07:59,900
Makes sense.

117
00:08:00,530 --> 00:08:09,620
And then we want to do a you log in here basically saying that a porn was killed and we can see if that

118
00:08:09,620 --> 00:08:17,960
works by going over into and real and compiling, then going to the blueprints item on the toolbar and

119
00:08:17,960 --> 00:08:22,310
selecting in the projects settings that our default game mode.

120
00:08:22,400 --> 00:08:29,570
We want to be if we select game mode based class, we want it to be the KMEL based game mode, basically

121
00:08:29,990 --> 00:08:31,760
go ahead and do that.

122
00:08:31,760 --> 00:08:35,450
In fact, that's not quite what we want to do if we go and select.

123
00:08:35,840 --> 00:08:40,480
We wanted it actually to be a blueprint child of that.

124
00:08:41,300 --> 00:08:45,050
And we've already got a blueprint child that has a lot of things set up.

125
00:08:45,080 --> 00:08:47,270
So let's do a reparenting job.

126
00:08:47,330 --> 00:08:49,730
Then we'll go to the roots.

127
00:08:49,790 --> 00:08:53,900
We'll find the BP shooter game mode, which we've got here.

128
00:08:54,500 --> 00:09:01,670
We're gonna rename this BP Kill or game mode, and then we can open that up.

129
00:09:01,940 --> 00:09:03,800
Dock the window, open the full blueprint.

130
00:09:03,810 --> 00:09:11,710
Ed, go to the class settings and change the parent to the KMEL game mode, C++, basically.

131
00:09:12,290 --> 00:09:18,380
And that way we should be running the correct code if we go to our message to output log and hit play

132
00:09:18,470 --> 00:09:20,840
and then kill off a character.

133
00:09:21,770 --> 00:09:22,520
We have a problem.

134
00:09:22,940 --> 00:09:25,700
Does not appear to have the right set up.

135
00:09:25,790 --> 00:09:34,970
So if we go back to class defaults and change up the default porn class to being the BP shooter, a

136
00:09:34,970 --> 00:09:36,860
character that should be correct.

137
00:09:37,010 --> 00:09:39,290
Save and compile just in case it got that wrong.

138
00:09:39,440 --> 00:09:41,910
And then check my blueprints dropdown here.

139
00:09:42,080 --> 00:09:43,650
It's still it's the KMEL game mode.

140
00:09:43,740 --> 00:09:44,740
The C++ one.

141
00:09:44,740 --> 00:09:49,520
So actually want to choose the blueprint one in here and go ahead and hit play.

142
00:09:49,580 --> 00:09:50,870
Now we've got our porn.

143
00:09:50,870 --> 00:09:57,140
We can go ahead and kill this guy and you can see that a porn was killed is printed log message.

144
00:09:57,500 --> 00:09:59,870
So that is working fantastically.

145
00:10:00,540 --> 00:10:05,900
And the next lecture we're gonna be looking at, the second part of this, which is calling game has

146
00:10:05,960 --> 00:10:09,050
ended when we actually do want to end the game.

147
00:10:09,440 --> 00:10:12,680
And to be able to restart from there on.

148
00:10:13,200 --> 00:10:15,760
So I will see you in that lecture.
