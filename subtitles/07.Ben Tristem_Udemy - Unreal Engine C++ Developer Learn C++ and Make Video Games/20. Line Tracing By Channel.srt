1
00:00:04,420 --> 00:00:10,360
Hello and welcome to this lecture, we're going to be getting some line tracing set up so that we can

2
00:00:10,450 --> 00:00:14,080
shoot at the walls and see these debug points appearing.

3
00:00:14,500 --> 00:00:18,090
And we're gonna be doing this using a new function line traced by channeler.

4
00:00:18,100 --> 00:00:22,360
We're gonna see why we're using that overline traced by object type, which is what we've used before.

5
00:00:22,660 --> 00:00:24,130
Let's dive in and see how it's done.

6
00:00:25,560 --> 00:00:31,020
So back in our building escape, we used line traces and we use this function here, the line trace

7
00:00:31,590 --> 00:00:32,700
by object type.

8
00:00:33,090 --> 00:00:36,150
And is this what we want to be using?

9
00:00:36,640 --> 00:00:39,450
Well, what is the difference between line traced by object type?

10
00:00:39,480 --> 00:00:44,280
And it's very close sibling, which is a line trace by channel.

11
00:00:45,280 --> 00:00:53,110
Well, object type says, I'm want to search through this line and see if I find an object that matches

12
00:00:53,110 --> 00:00:53,530
this type.

13
00:00:53,560 --> 00:01:00,760
So in I believe what we used in building escape was something like the physics body object type.

14
00:01:01,240 --> 00:01:02,500
And that's great.

15
00:01:02,620 --> 00:01:04,090
It will hit physics bodies.

16
00:01:04,420 --> 00:01:10,030
But if you decide something that you want something else to be hit a ball, it doesn't leave much room

17
00:01:10,030 --> 00:01:10,540
for options.

18
00:01:10,570 --> 00:01:16,510
So Channel is better for that because it allows us to define our own custom channels and then define

19
00:01:16,510 --> 00:01:21,940
what sorts of objects are transparent to that channel and which ones block it.

20
00:01:22,300 --> 00:01:29,170
So that's great, because what we want to be able to do is say, okay, maybe a Bush type of thing is

21
00:01:29,730 --> 00:01:36,490
can't can't block a bullet where as a wall will block a bullet, but it won't be taking any damage but

22
00:01:36,490 --> 00:01:37,840
that we can deal with later on.

23
00:01:38,380 --> 00:01:40,210
So channels all the route.

24
00:01:40,210 --> 00:01:45,640
We're going to go down and we can find the correct method here by doing control P.

25
00:01:45,640 --> 00:01:50,980
And by the way, there's this little extra cool bit that I only recently just learned is if you use

26
00:01:50,980 --> 00:01:58,180
the at symbol, you can search for symbols within this file and or even other files.

27
00:01:58,210 --> 00:02:03,880
But if you have the file open, it's much quicker than you could do something like line that trace and

28
00:02:03,880 --> 00:02:10,030
you can see there's giving us the list of all the symbols which are functions or classes or variables.

29
00:02:10,870 --> 00:02:15,920
And we can find a line trace test line trace single by channel by object type.

30
00:02:15,940 --> 00:02:21,400
We want this first one line trace, single by channel, which is going to have an outer parameter for

31
00:02:21,400 --> 00:02:23,620
what we hit the starting points.

32
00:02:23,710 --> 00:02:29,170
The ending point, the collision trace channel will come to that in just a little bit and then some

33
00:02:29,170 --> 00:02:31,570
query parameters which are have got some default.

34
00:02:31,600 --> 00:02:33,130
So we actually don't have to worry about.

35
00:02:33,520 --> 00:02:39,190
So just those first few things, the out hit start and and trace channel are what we want to worry about.

36
00:02:39,850 --> 00:02:41,590
Let's set up a trace channel.

37
00:02:41,890 --> 00:02:45,250
We're gonna go to settings and project settings for this.

38
00:02:45,490 --> 00:02:48,940
And then we're looking under engine for the collisions area.

39
00:02:49,120 --> 00:02:53,230
And under here you can see we've got object channels and trace channels.

40
00:02:53,380 --> 00:02:57,550
Object channels is actually just another way of saying different types of object.

41
00:02:57,610 --> 00:03:02,140
So if you wanted to have as well as the default sets of objects like pawns and stuff like that, if

42
00:03:02,140 --> 00:03:05,950
you wanted a new category of object, you could go down the object channel route.

43
00:03:06,310 --> 00:03:12,310
But the Trace's allow you to define the opposite end of the spectrum, which is like, you know, I've

44
00:03:12,310 --> 00:03:13,170
got a bullet.

45
00:03:13,630 --> 00:03:15,550
What objects can it hit?

46
00:03:15,940 --> 00:03:21,670
So we're gonna go down this route, add a new trace channel and we're going to call this bullet.

47
00:03:22,820 --> 00:03:29,570
And the default response is going to be block, which basically means that all object types gonna block

48
00:03:29,570 --> 00:03:36,680
unless we now specify otherwise, can go ahead and accept this and we can look at our presets down here.

49
00:03:37,310 --> 00:03:42,530
If we just expand that out, The Presets are going to show you that we have a bunch of different things

50
00:03:42,530 --> 00:03:44,240
that we can apply to, things we can say.

51
00:03:44,570 --> 00:03:46,700
We want this to be a physics actor.

52
00:03:46,910 --> 00:03:52,130
In which case it's object type, which is going to be what is a predefined object channel will be physics

53
00:03:52,130 --> 00:03:52,670
body.

54
00:03:53,030 --> 00:04:00,510
But if we expand this out, you can see what its reaction is to the different types of Trace's here.

55
00:04:00,560 --> 00:04:04,100
So we've got outrace types who camera our own bullets, visibility.

56
00:04:04,460 --> 00:04:05,630
It blocks all of these.

57
00:04:06,040 --> 00:04:07,060
And that's got object types.

58
00:04:07,060 --> 00:04:12,530
So that's how it interacts physics wise with other objects, such as pawns and vehicles, et cetera.

59
00:04:13,200 --> 00:04:16,670
And that's not how it interacts with line traced by object.

60
00:04:16,820 --> 00:04:19,220
That's slightly confusing and it's confused me before.

61
00:04:19,880 --> 00:04:22,040
So the trace type is what's interesting.

62
00:04:22,220 --> 00:04:28,990
And we can just go and have a look through here and see no collision should be set up to not collide.

63
00:04:29,000 --> 00:04:31,910
So let's make Bullet not collide with that as well.

64
00:04:31,970 --> 00:04:39,170
So just overriding some of the presets such that our bullet works as we would expect, overlap all,

65
00:04:39,170 --> 00:04:44,090
for example, should basically overlap with the bullet and probably invisible wall.

66
00:04:44,090 --> 00:04:50,420
An invisible wall dynamic should also be ignored for the purposes of our bullet.

67
00:04:50,990 --> 00:04:51,950
Same with dynamic here.

68
00:04:51,980 --> 00:04:55,100
You can see the work basically ending up with some it's quite similar to a visibility trace.

69
00:04:55,490 --> 00:05:00,830
But the reason for keeping it separate is that we might want to make slight distinctions, such as you

70
00:05:00,830 --> 00:05:04,520
can see you can't see through this Bush, but you can shoot through it.

71
00:05:04,790 --> 00:05:08,960
Those kinds of things mean that having our own traced channel is really, really handy.

72
00:05:09,260 --> 00:05:13,280
Now, we'd like to be able to use this trace channel in code.

73
00:05:13,310 --> 00:05:17,930
And it's a bit funky how we have to do this, because there's an enum here and a collision channel.

74
00:05:17,930 --> 00:05:24,980
And if we go F 12 to its definition, you can see there's a bunch for the predefined ones, world static

75
00:05:24,980 --> 00:05:26,780
pawn, his ability, et cetera, down here.

76
00:05:27,380 --> 00:05:33,320
But then there's a bunch more engine trace channels, one, two, and game trace channel one, two,

77
00:05:33,320 --> 00:05:34,100
three, et cetera.

78
00:05:34,310 --> 00:05:34,860
Predefined.

79
00:05:35,660 --> 00:05:37,580
Which one of ours is this?

80
00:05:37,610 --> 00:05:39,770
You know, it's we don't have a bullet in here.

81
00:05:40,430 --> 00:05:42,800
We actually have to use one of these game trace channels one.

82
00:05:42,800 --> 00:05:44,390
So it's really a little bit confusing.

83
00:05:44,870 --> 00:05:45,560
Which one is it?

84
00:05:46,100 --> 00:05:50,750
So the way you do this is by going to your project folder and go into config.

85
00:05:51,410 --> 00:05:56,580
And what we want is the default engine any and we want to open that in a text that say you could do

86
00:05:56,590 --> 00:05:58,310
that in any text that you like.

87
00:05:58,340 --> 00:06:03,140
I like to drank it into visual studio code so that visual studio code is the one opening it.

88
00:06:04,010 --> 00:06:10,970
And in here, we want to essentially look for our bullet and see what it has been assigned to.

89
00:06:11,000 --> 00:06:17,000
And I think this first line here tells us that the channel it's been given is the game trace Channel

90
00:06:17,000 --> 00:06:17,450
One.

91
00:06:17,900 --> 00:06:18,420
Fantastic.

92
00:06:18,440 --> 00:06:21,740
So that's what we are going to use when we're doing our line trace.

93
00:06:22,400 --> 00:06:26,930
So let's start to get the structure of this line trace in place.

94
00:06:27,950 --> 00:06:32,300
The first thing we're going to need is a start point, we already have that that's the location of our

95
00:06:32,300 --> 00:06:32,810
viewport.

96
00:06:33,320 --> 00:06:35,900
We also need an endpoint for our line trace.

97
00:06:35,930 --> 00:06:37,700
That's slightly harder to calculate.

98
00:06:38,210 --> 00:06:45,710
So let's create an F vector for our end and we're going to calculate this by using our start points,

99
00:06:46,490 --> 00:06:53,600
plus the rotation multiplied by the amount, the distance that we want to go away or not.

100
00:06:53,600 --> 00:06:54,120
The rotation.

101
00:06:54,190 --> 00:06:58,070
But the vector that points in the direction of the rotation for slightly confusing.

102
00:06:58,280 --> 00:07:04,610
But actually, if you do rotation dot vector, this gives you a vector that points in the direction

103
00:07:04,640 --> 00:07:10,520
of this rotation is kind of doing the opposite of what we were doing in the animation blueprint to get

104
00:07:10,520 --> 00:07:11,690
a rotation from the vector.

105
00:07:11,960 --> 00:07:12,950
This goes the other way.

106
00:07:13,430 --> 00:07:18,230
So we're gonna do location plus this rotation vector.

107
00:07:18,560 --> 00:07:20,870
And then we want essentially a max range.

108
00:07:20,960 --> 00:07:24,710
So I'm going to introduce a new You property here, make it add it anywhere.

109
00:07:24,770 --> 00:07:28,060
And it's gonna be a float called Max Range like so.

110
00:07:28,070 --> 00:07:33,980
And we can set it to a default of something like 10000 or a thousand max range.

111
00:07:34,010 --> 00:07:36,860
That's gonna be about 100 meters sorry, about 10 meters.

112
00:07:37,400 --> 00:07:42,830
And we're gonna go over to do a rotation dot vector multiplied by the max range.

113
00:07:42,860 --> 00:07:46,550
So that's gonna be the vector that we get from that rotation is gonna be a size one.

114
00:07:46,970 --> 00:07:49,850
Multiplying it by the max range will make it a vector of size.

115
00:07:49,970 --> 00:07:51,050
Whatever the max range is.

116
00:07:51,050 --> 00:07:54,650
And then we add that on top of the location to get as the end point.

117
00:07:54,920 --> 00:07:57,560
Don't worry if you don't follow that math 100 percent.

118
00:07:58,130 --> 00:08:01,300
The important thing is that this is how we want to get to our end point.

119
00:08:01,670 --> 00:08:07,580
Then who's going to do line in here to add in some line tracing and are gonna remove this draw debug

120
00:08:07,580 --> 00:08:08,150
camera?

121
00:08:08,690 --> 00:08:12,750
Because I want to do a different draw debug helper here.

122
00:08:13,220 --> 00:08:19,220
I want to draw a debug point, which you can find here, takes in the world, takes in a position and

123
00:08:19,220 --> 00:08:20,470
a size and a color.

124
00:08:20,870 --> 00:08:24,440
And whether it's persistent or not, we probably do want it to be persistent, to be visible.

125
00:08:24,890 --> 00:08:31,730
So we should be able to do something along these lines that say draw debug points and we're going to

126
00:08:31,820 --> 00:08:33,980
do a get world right off the bat here.

127
00:08:34,430 --> 00:08:38,300
And then we'll start off with the location of our viewport instead.

128
00:08:38,300 --> 00:08:44,990
Just as a test to see this, Drew, how this draw debug point works, give it size to give it an F color

129
00:08:45,110 --> 00:08:48,430
of red and make its persistent ness true.

130
00:08:48,530 --> 00:08:53,330
And then we are going to capital for the semicolon and see whether this is working as hit compile ever

131
00:08:53,330 --> 00:08:53,900
in the engine.

132
00:08:54,420 --> 00:08:55,190
And that's hit play.

133
00:08:56,020 --> 00:08:59,450
So now if I shoot and move slightly back, you can see there's a point there.

134
00:08:59,840 --> 00:09:02,360
However, it's really, really tiny and hard to see.

135
00:09:02,420 --> 00:09:06,880
So they're going to increase this to 20 instead.

136
00:09:07,100 --> 00:09:09,380
And let's see if that's better compile and play.

137
00:09:09,620 --> 00:09:09,790
Yep.

138
00:09:09,790 --> 00:09:10,130
Sure enough.

139
00:09:10,220 --> 00:09:12,830
Now I can see a very, very clear point.

140
00:09:13,490 --> 00:09:16,730
So time for your challenge to do a line trace by channel.

141
00:09:17,030 --> 00:09:22,550
We've done it with object types before, so hopefully we can extrapolate that to doing it by channel.

142
00:09:22,850 --> 00:09:28,100
So use the location and end that we have defined already as the start and end.

143
00:09:28,730 --> 00:09:34,400
Check the success of the result, making an if statement so only getting the out parameter.

144
00:09:34,590 --> 00:09:34,750
Okay.

145
00:09:34,840 --> 00:09:38,930
In the outer parameter of the hit result and only drawing a debug point.

146
00:09:38,990 --> 00:09:44,960
If we successfully hit the point and remember that we're using that channel that we found in the dot

147
00:09:45,020 --> 00:09:46,070
any file as well.

148
00:09:46,100 --> 00:09:50,890
So pause the video and see if you can sort out all of those parameters and arguments into the line trace

149
00:09:51,290 --> 00:09:56,040
and get that debug point drawing where we hit with our line trace.

150
00:09:56,390 --> 00:09:56,850
Pause video.

151
00:09:56,880 --> 00:09:57,190
Have a good.

152
00:09:58,930 --> 00:09:59,680
Okay, welcome back.

153
00:10:00,010 --> 00:10:06,670
So let's dive right in, we're going to get the world, first of all, and do an arrow set that we're

154
00:10:06,670 --> 00:10:11,140
going to go to do a line trace single by channel.

155
00:10:12,340 --> 00:10:14,030
Then we're going to need a hit result.

156
00:10:14,060 --> 00:10:20,770
So OUTFRONT, we need to first declare our hit results struct to pass in as an out parameter.

157
00:10:21,280 --> 00:10:25,690
It's going to call it hit and they're going to pass it in as the first argument here.

158
00:10:26,230 --> 00:10:27,610
Then we need the location.

159
00:10:28,730 --> 00:10:29,900
And we need the end.

160
00:10:30,470 --> 00:10:31,600
And then what?

161
00:10:31,690 --> 00:10:35,420
What comes up next, the e collision, a collision channel.

162
00:10:35,810 --> 00:10:38,540
So that's gonna be an E collision channel, Kolon, Kolon.

163
00:10:38,750 --> 00:10:40,880
And then it should be E.C.

164
00:10:41,090 --> 00:10:41,750
What did we say?

165
00:10:41,750 --> 00:10:42,500
Let's go and have a look.

166
00:10:42,500 --> 00:10:49,010
In the default engine, any ECAC game trace channel one is the one that the default any has configured.

167
00:10:49,440 --> 00:10:51,490
Are there any more arguments here that we need?

168
00:10:51,500 --> 00:10:52,700
Let's go along.

169
00:10:53,080 --> 00:10:55,030
We've got the collision parameters which are defaulted outside.

170
00:10:55,060 --> 00:10:58,070
No, we do not need anything in here.

171
00:10:58,610 --> 00:11:02,300
And then what we can do is we need a boolean result for this.

172
00:11:02,390 --> 00:11:04,040
So be success.

173
00:11:05,250 --> 00:11:07,410
And it sounds very helpful, isn't it?

174
00:11:07,430 --> 00:11:09,930
B, success, let's say an F.

175
00:11:10,080 --> 00:11:11,280
B, success.

176
00:11:12,400 --> 00:11:14,840
We are going to want to draw that debug point.

177
00:11:14,860 --> 00:11:17,570
So, again, to move this down, I can do this with OLT.

178
00:11:17,770 --> 00:11:20,110
And then the arrow moves the line around like this.

179
00:11:20,800 --> 00:11:26,920
And then I can indent it with a control and the right square brackets on your keyboard.

180
00:11:27,410 --> 00:11:29,520
And that gets it to look like so.

181
00:11:29,530 --> 00:11:34,630
And now instead of the location, which is the start point, we she wants the hit location.

182
00:11:34,690 --> 00:11:37,890
So that's going to be hit dot location like.

183
00:11:38,160 --> 00:11:42,670
So it looks like I'm missing a semicolon on the end of this line here.

184
00:11:42,910 --> 00:11:44,800
Let's build that and give it a go.

185
00:11:45,160 --> 00:11:50,680
Once that's compile, that's hit play, go into the world and try and shoot at our walls.

186
00:11:51,340 --> 00:11:51,770
There you go.

187
00:11:51,790 --> 00:11:55,600
You can see we got a point showing up on the wall just where I shot.

188
00:11:55,660 --> 00:11:56,950
I can do this multiple times.

189
00:11:57,370 --> 00:11:58,380
It seems to hit.

190
00:11:58,420 --> 00:12:04,630
If I go too far from a wall, it doesn't hit at all because of our max range being quite short.

191
00:12:05,110 --> 00:12:06,910
And you can see once I get within the max range.

192
00:12:06,940 --> 00:12:09,190
It does hit and it does draw a point.

193
00:12:09,550 --> 00:12:12,070
So that is a challenge successfully completed.

194
00:12:12,100 --> 00:12:17,260
We are now able to show and line trace to a particular point.

195
00:12:17,590 --> 00:12:23,590
The next step is going to be getting that to actually show some particle effects, which will be much

196
00:12:23,650 --> 00:12:26,770
cooler than just drawing a debug point for that.

197
00:12:26,800 --> 00:12:28,070
I'll see you in the next lecture.
