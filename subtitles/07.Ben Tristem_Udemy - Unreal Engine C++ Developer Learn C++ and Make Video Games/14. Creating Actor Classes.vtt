WEBVTT
1
00:00:04.160 --> 00:00:07.510
In this lecture, we'll be creating our first acting class for the project.

2
00:00:07.600 --> 00:00:10.780
I know in the past that you've seen how to create active components.

3
00:00:10.810 --> 00:00:15.460
So we're not going to see how we can create actors specifically for use within the world to begin.

4
00:00:15.490 --> 00:00:21.820
You just need to follow the usual process of creating a new C++ class will select the type of actor.

5
00:00:24.010 --> 00:00:25.720
Name this one projectile base.

6
00:00:27.510 --> 00:00:32.880
And place this in a folder named Actors with that done select create class and wait for the new class

7
00:00:32.880 --> 00:00:33.600
to compile.

8
00:00:33.750 --> 00:00:36.960
And thankfully, this isn't a child of another class.

9
00:00:37.020 --> 00:00:38.730
In the folder structure.

10
00:00:38.820 --> 00:00:43.800
So we should be able to just compile and use this class immediately when this new class is ready.

11
00:00:43.950 --> 00:00:47.610
We can start by taking the usual steps to tidy the class a little bit here.

12
00:00:47.820 --> 00:00:50.520
So to begin, I just know that we won't be using the tick function.

13
00:00:50.670 --> 00:00:51.450
So we can delete that.

14
00:00:51.450 --> 00:00:57.810
Now, as one is the second public section with an out in a private section for our components and variables.

15
00:00:58.020 --> 00:01:02.910
And this class will be implementing a super useful component named the projectile movement component.

16
00:01:03.360 --> 00:01:05.970
So this will take control of things like driving the movement for us.

17
00:01:06.000 --> 00:01:10.920
When the class is spawned into the world, it has a huge range of other pre-built C++ functionality,

18
00:01:10.920 --> 00:01:15.210
such as bouncing collisions and loads of other fancy things that we can look at.

19
00:01:15.330 --> 00:01:20.070
When we've exposed this in our blueprint properties to use this class, they will first need to forward

20
00:01:20.070 --> 00:01:20.730
declare this.

21
00:01:20.970 --> 00:01:23.610
So this will be a class you project.

22
00:01:23.670 --> 00:01:24.600
Move on components.

23
00:01:24.900 --> 00:01:27.190
And of course, replacing this just above the U.

24
00:01:27.260 --> 00:01:28.020
Class section.

25
00:01:28.200 --> 00:01:30.830
And then for the components, we've done this a couple of times already.

26
00:01:31.050 --> 00:01:34.860
So I won't spend too much time explaining what's happening here as we'll be doing the same thing as

27
00:01:34.860 --> 00:01:35.340
before.

28
00:01:35.490 --> 00:01:38.370
And we'll probably be barring the new property specified, too.

29
00:01:38.490 --> 00:01:41.220
So we're going to want a pointer to our U.

30
00:01:41.280 --> 00:01:42.730
Projectile movement component.

31
00:01:42.840 --> 00:01:44.820
And or name this one projectile movement.

32
00:01:46.350 --> 00:01:53.080
The Muluzi need a new static mesh component pointer named Projectile MASH to act as our visual representation

33
00:01:53.230 --> 00:01:54.100
of our projectile.

34
00:01:54.880 --> 00:01:57.970
This class will also need a concept of dealing damage.

35
00:01:58.270 --> 00:02:03.250
And again, like many other things, Unreal kind of has a class structure already completely set up

36
00:02:03.250 --> 00:02:04.240
to handle this.

37
00:02:04.600 --> 00:02:06.640
And that is the damage type of class.

38
00:02:06.790 --> 00:02:13.900
So to assign this, we're going to implement a template class using the T subclass of then some angled

39
00:02:13.900 --> 00:02:15.120
brackets for the class.

40
00:02:15.160 --> 00:02:16.240
Defining the U.

41
00:02:16.300 --> 00:02:17.020
Damage type.

42
00:02:17.260 --> 00:02:18.760
And just naming this damage type.

43
00:02:20.090 --> 00:02:23.510
So let's take a look at this new tea subclass of thing that we've just created.

44
00:02:23.900 --> 00:02:26.960
So this is basically just a way to store a type as a value.

45
00:02:27.170 --> 00:02:31.670
And specifically from you objects in a variable instead of a value.

46
00:02:31.880 --> 00:02:34.310
We specify the base type it can hold.

47
00:02:34.520 --> 00:02:36.920
And in this case, that's where you damage type.

48
00:02:37.190 --> 00:02:42.680
So this is just a type safe way to provide access to specific class pointers in the editor.

49
00:02:42.890 --> 00:02:50.720
And in our case, this will provide anything that is a subclass of the you damage type and to finish

50
00:02:50.720 --> 00:02:52.430
off the variable declarations.

51
00:02:52.880 --> 00:02:58.010
We'll also need two other things, which is to control how fast the projectile moves and also the amount

52
00:02:58.010 --> 00:02:59.780
of damage the projectile will do.

53
00:03:00.380 --> 00:03:05.840
So we'll create a float named Movement Speed and I'll prefill this with a value of thirteen hundred

54
00:03:06.170 --> 00:03:10.800
and then another float named Damage and I'll prefill this with a value of 50.

55
00:03:11.240 --> 00:03:13.010
Next, we'll go through and add our U.

56
00:03:13.010 --> 00:03:13.520
Properties.

57
00:03:13.610 --> 00:03:18.710
So for our components, I'm going to head over to the base class and grab the U.

58
00:03:18.740 --> 00:03:19.910
Properties from here.

59
00:03:21.800 --> 00:03:24.590
And then just pace that back into our projectile base.

60
00:03:28.930 --> 00:03:32.350
So these are pretty much exactly as we want them, including the category name.

61
00:03:33.310 --> 00:03:36.790
We will need to make some changes to our damage type specify.

62
00:03:36.940 --> 00:03:42.170
First, I'll make this edit defaults only and remove the blueprints specify entirely.

63
00:03:42.220 --> 00:03:46.390
We won't be using that, which means we can also get rid of the private access specify.

64
00:03:46.600 --> 00:03:51.010
And I'll just change the category name to damage for the two flight variables.

65
00:03:51.100 --> 00:03:55.810
The specifiers, again, will need to change a little bit here, so I'll change the specifiers to edit

66
00:03:55.870 --> 00:04:03.100
anywhere on both of them and I'll change the first one the for the move speed to a category named move

67
00:04:03.310 --> 00:04:07.900
or movement or change the damage values category to damage.

68
00:04:09.380 --> 00:04:14.600
Then over in the coat farm, we're just going to follow our usual process for creating the components

69
00:04:14.690 --> 00:04:19.430
so we can remove the tick function and set the can ever tick equal to folks.

70
00:04:19.730 --> 00:04:25.190
Then we also need to include our components forward slash static mesh component dot h.

71
00:04:26.860 --> 00:04:31.410
And also the game framework, forward slash projectile movement component deitsch.

72
00:04:33.800 --> 00:04:39.380
If we start by implementing a projectile MASH components, so this would be projectile mash equals to

73
00:04:39.380 --> 00:04:41.090
create default sub objects.

74
00:04:43.080 --> 00:04:45.330
Of type, you static mesh component.

75
00:04:48.360 --> 00:04:51.000
And for the tax, so just that this to be projectile mash.

76
00:04:53.430 --> 00:04:54.940
We'll set this to be the root components.

77
00:04:54.970 --> 00:04:58.060
So, again, every component equals to projectile match.

78
00:05:01.230 --> 00:05:03.510
And then next for the projectile movement component.

79
00:05:03.540 --> 00:05:07.210
This will be, again, equal to the create default sub object.

80
00:05:07.410 --> 00:05:10.170
This time, all of it you projectile movement component.

81
00:05:17.670 --> 00:05:19.500
And the text will be projectile movement.

82
00:05:19.730 --> 00:05:24.490
Now, this one's slightly different because these don't belong in the seen hierarchy or inherit any

83
00:05:24.490 --> 00:05:25.090
transform.

84
00:05:25.300 --> 00:05:26.860
We don't need to attach it to anything.

85
00:05:27.100 --> 00:05:29.980
So we don't need to use these set up attachment that we've seen before.

86
00:05:30.490 --> 00:05:36.340
We can, however, set the initial speed and the maximum speed to be the movement speed variable that

87
00:05:36.340 --> 00:05:37.300
we've already created.

88
00:05:37.510 --> 00:05:40.330
And we just do that by using our projectile movement.

89
00:05:41.410 --> 00:05:43.960
Initial speed and max speed.

90
00:05:48.580 --> 00:05:52.960
If you did when a projectile that gained velocity over time or reduced in velocity over time, then

91
00:05:52.960 --> 00:05:56.020
you could change these variables to be something different, of course.

92
00:05:56.450 --> 00:06:00.730
I'm also going to set the class to have an initial lifespan of three seconds.

93
00:06:01.000 --> 00:06:04.120
And this would just stop us from having a bunch of projectiles laying around forever.

94
00:06:04.210 --> 00:06:05.330
When we start spawning them.

95
00:06:05.620 --> 00:06:08.400
So after three seconds, this just means it will destroy itself.

96
00:06:08.420 --> 00:06:12.070
It could destroy function and remove itself from the world.

97
00:06:13.520 --> 00:06:18.870
And finally, we just want to move over to the engine and compile this so that we can see our progress.

98
00:06:20.150 --> 00:06:24.770
When that's finished compiling, let's just quickly create a blueprint class and we'll drop this in

99
00:06:24.770 --> 00:06:28.970
to a U folder in the blueprint section called Actors.

100
00:06:32.520 --> 00:06:35.460
Name the new class, BP underscore projectile bass.

101
00:06:38.420 --> 00:06:42.500
And then inside of the blueprint, we can begin to take a look and confirm that everything is exposed

102
00:06:42.560 --> 00:06:43.790
and set up as we'd like.

103
00:06:43.970 --> 00:06:49.580
So I can really see in the details panel that the damage and the movement speed are as expected and

104
00:06:49.580 --> 00:06:52.370
taking the the predefined values that we've given those.

105
00:06:52.580 --> 00:06:54.710
And then the damage type is currently empty.

106
00:06:54.890 --> 00:06:56.570
So let's take a look at that damage type again.

107
00:06:56.660 --> 00:06:57.950
And this is nice and simple here.

108
00:06:57.980 --> 00:07:04.400
So we can make a damage type from either the environmental damage or just the standard damage type.

109
00:07:04.550 --> 00:07:05.600
So we can't go wrong here.

110
00:07:05.660 --> 00:07:11.480
This is why we're using the T subclass of as it limits the class types available, making it, again,

111
00:07:11.490 --> 00:07:17.390
the type safe declaration here, as we know that we only want certain classes which are relevant to

112
00:07:17.390 --> 00:07:18.260
causing damage.

113
00:07:18.620 --> 00:07:22.200
And I'll just use that the default damage type provider.

114
00:07:22.670 --> 00:07:25.880
Finally, we can also make the amendments to our components.

115
00:07:25.940 --> 00:07:30.340
So let's start by filling in these static mesh with s.m underscore projecto.

116
00:07:30.580 --> 00:07:32.830
We'll come back to this a little bit later when the setting things up.

117
00:07:32.870 --> 00:07:35.930
But just to check a few things in the projectile movement component.

118
00:07:36.260 --> 00:07:38.480
So we have gravity enabled, which is going to be useful.

119
00:07:38.600 --> 00:07:42.050
And that's done by setting this to a value of one and everything else.

120
00:07:42.080 --> 00:07:43.900
We can leave out the defaults by now.

121
00:07:43.950 --> 00:07:47.930
Has this all looks fine and we'll come back and improve a few things a little bit later when we can

122
00:07:47.930 --> 00:07:52.970
actually see the firing and action so that we can see what doesn't work to begin and how to improve

123
00:07:52.970 --> 00:07:54.680
that using this component.

124
00:07:54.890 --> 00:08:00.380
For now, though, we have the basics of our projecto class implemented so we can compile and save this.

125
00:08:00.470 --> 00:08:01.970
Ready for use a little bit later.
