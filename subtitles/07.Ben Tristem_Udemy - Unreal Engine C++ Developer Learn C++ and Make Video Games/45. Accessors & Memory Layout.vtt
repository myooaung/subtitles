WEBVTT
1
00:00:04.190 --> 00:00:08.260
Hello everybody and welcome to excesses and memory layout in this video.

2
00:00:08.330 --> 00:00:15.020
We're going to have a look at the arrow the dots and the two semicolons the scope excesses all work

3
00:00:15.050 --> 00:00:17.960
and how they relate into memory.

4
00:00:17.960 --> 00:00:24.110
Who will be introducing virtual memory introducing permanent storage stack and heap two things that

5
00:00:24.110 --> 00:00:29.570
you would have heard lots about if you've ever read anything about C++ is this stack in the heap.

6
00:00:29.570 --> 00:00:35.840
And being able to understand how things get allocated in memory is going to help you remember how and

7
00:00:35.840 --> 00:00:37.910
when to use these accesses as well.

8
00:00:37.910 --> 00:00:44.690
Now the heap is also known as the Free Store and we'll also go over how excess operators relate to the

9
00:00:44.690 --> 00:00:45.110
memory.

10
00:00:45.830 --> 00:00:48.890
So this is what we're aiming for at the end of this lecture.

11
00:00:48.890 --> 00:00:54.030
So just like before when we press our grab button we end up with Grandma pressed.

12
00:00:54.050 --> 00:00:55.190
But when we let go.

13
00:00:55.430 --> 00:00:57.470
We end up with grabber released.

14
00:00:57.470 --> 00:00:57.990
Brilliant.

15
00:00:58.010 --> 00:00:58.690
Let's find out more.

16
00:00:59.240 --> 00:01:03.620
So we've managed to get I'll grab key working and what I'd like to do is spend a few moments looking

17
00:01:03.620 --> 00:01:07.040
at the syntax of what is going on here.

18
00:01:07.040 --> 00:01:13.410
Now we've used the ampersand before in this case it means that it is the address of the grab function.

19
00:01:13.430 --> 00:01:15.480
That's part of the you grab a class.

20
00:01:15.590 --> 00:01:22.760
We have full qualification of where we're going and grab itself doesn't have these double parentheses

21
00:01:22.760 --> 00:01:27.560
on like we used to putting on that would make no sense because we're not actually calling the function

22
00:01:27.590 --> 00:01:35.690
at this point but we are telling it where to go in order to call it when we press our button.

23
00:01:35.690 --> 00:01:40.250
And of course one of the things that's kind of hidden away at the moment is how does it know where to

24
00:01:40.250 --> 00:01:42.590
go in order to get this function.

25
00:01:43.280 --> 00:01:45.380
So hopefully this should bring it all together.

26
00:01:45.590 --> 00:01:46.710
Let's go take a look.

27
00:01:46.790 --> 00:01:50.630
Now you mentioned the white block here is a block of memory on your computer.

28
00:01:50.630 --> 00:01:56.210
Now strictly speaking it is virtual memory the operating system itself will decide where that memory

29
00:01:56.210 --> 00:02:01.320
actually happens to reside whether it's in the RAM or on your hard drive etc..

30
00:02:01.400 --> 00:02:08.330
So we are allocated a lump of memory for our program and we can request more if the program requires

31
00:02:08.330 --> 00:02:13.510
it but it turns out that the memory is essentially split into two.

32
00:02:13.520 --> 00:02:19.090
Now bear with me here because this is a massive over simplification but it helps get the point across

33
00:02:19.100 --> 00:02:21.200
and how things are stored.

34
00:02:21.200 --> 00:02:22.660
You have permanent storage.

35
00:02:22.700 --> 00:02:24.070
The blue stuff at the bottom.

36
00:02:24.230 --> 00:02:31.700
And this is where you put known quantities stuff that we know at compile time get stored down here things

37
00:02:31.700 --> 00:02:37.130
like half functions would end up in the permanent storage and basically any other data that remains

38
00:02:37.160 --> 00:02:40.920
unchanged will end up in our permanent storage.

39
00:02:41.120 --> 00:02:45.230
On the other side we have these stack and free store otherwise known as heap.

40
00:02:45.230 --> 00:02:49.910
Now we're not going to dive into the great big details here about how they grow in size and shrink and

41
00:02:49.910 --> 00:02:52.370
whether they start at the top of the memory and go down.

42
00:02:52.400 --> 00:02:55.230
This is all something for another time.

43
00:02:55.340 --> 00:03:01.430
The basics here is there's part of your memory that remains unchanged and is known at compile time and

44
00:03:01.460 --> 00:03:07.520
there's your more dynamic area your stacking your heap that is the part of memory that's at runtime

45
00:03:07.730 --> 00:03:08.960
will change.

46
00:03:08.960 --> 00:03:11.990
Now this does tie in to our accessory operators.

47
00:03:12.110 --> 00:03:18.830
So here we have things like classes in MS namespace and we've already used the code on coal on the scope

48
00:03:18.830 --> 00:03:19.660
operator.

49
00:03:19.720 --> 00:03:25.170
Now plenty of times so far now we have a look at this top one here the YOU GRAB A on her leg and grab.

50
00:03:25.340 --> 00:03:27.220
That's this area here.

51
00:03:27.320 --> 00:03:31.660
It is known at compile time where this function will be.

52
00:03:31.700 --> 00:03:37.610
And so therefore it is stored in the permanent storage and we access anything that's in the permanent

53
00:03:37.610 --> 00:03:40.360
storage using the scope operator.

54
00:03:40.790 --> 00:03:47.480
And because it's an address it tells the bind action function where to go in memory in order to get

55
00:03:47.540 --> 00:03:49.340
the grab function.

56
00:03:49.340 --> 00:03:54.890
Now the other two accesses are the instance or reference which is the dot operator and of course the

57
00:03:54.890 --> 00:03:59.180
one we've been using a lot recently the pointer which is the arrow operator there.

58
00:03:59.510 --> 00:04:00.590
So let's start with mine.

59
00:04:00.620 --> 00:04:08.390
Grab a dot grab now my grab is an instance and then we'll use the dots operator to access the grab function

60
00:04:08.720 --> 00:04:10.760
of that particular instance.

61
00:04:10.940 --> 00:04:13.010
And we use the book cow count.

62
00:04:13.040 --> 00:04:17.330
Dot bulls are back in the last section I'm sure you guys remember that.

63
00:04:17.330 --> 00:04:23.470
And then the next one my grab ref that's a reference and it's very similar to the top one at what we're

64
00:04:23.480 --> 00:04:28.580
dealing with points is of course we are pointing to an address in memory.

65
00:04:28.640 --> 00:04:34.250
So my grab pointer and then we could access any members with the arrow operator in this case we've got

66
00:04:34.250 --> 00:04:41.650
the grab and another example here being reach so hopefully that gives you a bit more context of how

67
00:04:41.650 --> 00:04:44.900
and when you should use these different types of accessories.

68
00:04:45.040 --> 00:04:49.370
And so just drill at home finally let's have another look at our code real quick.

69
00:04:49.370 --> 00:04:55.060
So let's go ahead and just get rid of that and let's say this is the first time that we've come across

70
00:04:55.060 --> 00:05:01.420
this and we've got everything in there as is we have a look back at this signature and we know because

71
00:05:01.420 --> 00:05:04.540
we're looking up a function we're going to have to fully quantify it.

72
00:05:04.570 --> 00:05:10.450
So in this case it would be the you grabber as we've done before and we know that because a function

73
00:05:10.450 --> 00:05:14.980
is going to be in the permanent storage we're going to use the scope operator to access it and then

74
00:05:14.980 --> 00:05:18.990
we can go ahead and find ourselves grab.

75
00:05:19.000 --> 00:05:24.580
Now remember you don't need the parentheses at the end there because we are not calling the function

76
00:05:25.060 --> 00:05:27.370
and of course we wouldn't be calling if at all.

77
00:05:27.400 --> 00:05:33.980
It would be the input component that would be calling the function and this is looking for the address

78
00:05:34.010 --> 00:05:35.170
of that function.

79
00:05:35.180 --> 00:05:39.620
So we do need to make sure we have the ampersand on the beginning there.

80
00:05:39.650 --> 00:05:39.950
Okay.

81
00:05:39.950 --> 00:05:45.260
That leads us nicely to your challenge unlike you who we've already got a grab method to create a release

82
00:05:45.260 --> 00:05:46.030
method.

83
00:05:46.220 --> 00:05:51.560
So follow the example of the grab a binding so we're going to have to bind another key the e num for

84
00:05:51.560 --> 00:05:53.420
the release is i.e. released.

85
00:05:53.420 --> 00:05:58.880
We've seen that before when we were creating the grab then I'd like you to log that the key has been

86
00:05:58.880 --> 00:05:59.330
released.

87
00:05:59.330 --> 00:06:03.410
So when we press it down we'll see that it's been grabbed and when we release the key we'll see that

88
00:06:03.410 --> 00:06:09.140
it's been released over in the lock and then test and jump with joy that you've nice to put all of this

89
00:06:09.140 --> 00:06:10.150
together.

90
00:06:10.190 --> 00:06:10.460
Okay.

91
00:06:10.460 --> 00:06:16.170
Pause the video now and give us a go Okay everybody Welcome back.

92
00:06:16.170 --> 00:06:18.770
Let's go ahead now and create a release method.

93
00:06:18.830 --> 00:06:19.100
OK.

94
00:06:19.110 --> 00:06:25.810
So I'm going to start over in the head file and just like the grab we're just going to void.

95
00:06:25.920 --> 00:06:27.860
We'll call it release for the moment.

96
00:06:28.170 --> 00:06:28.540
OK.

97
00:06:28.560 --> 00:06:30.420
That's everything we need to do here.

98
00:06:30.510 --> 00:06:33.300
Now like most things it doesn't matter which order you do them in.

99
00:06:33.300 --> 00:06:39.630
As long as they are all done and I have just knows a little bit of an inconsistency there or my statement

100
00:06:39.660 --> 00:06:42.140
I'm going to put the space necessary in there.

101
00:06:42.170 --> 00:06:42.730
Okay.

102
00:06:42.810 --> 00:06:44.280
So what input component.

103
00:06:44.280 --> 00:06:45.170
That's fine.

104
00:06:45.180 --> 00:06:50.670
So this is the example that we can look hats in order to create our release.

105
00:06:50.670 --> 00:06:58.680
So once because they are so similar once again I'm going to go ahead and copy my you grabber but I had

106
00:06:58.740 --> 00:07:02.320
four grab and set up release.

107
00:07:02.340 --> 00:07:06.550
And also I'm gonna go grab a release.

108
00:07:06.570 --> 00:07:09.740
I suppose released would be better impressed would be better.

109
00:07:10.240 --> 00:07:10.780
Okay.

110
00:07:10.890 --> 00:07:15.960
Now I wouldn't copy and paste like that if I wasn't changing it straightaway.

111
00:07:16.020 --> 00:07:17.500
And it's so simple.

112
00:07:17.610 --> 00:07:22.120
If we got a bigger block of code it's definitely worth going through piece by piece.

113
00:07:22.580 --> 00:07:23.040
Okay.

114
00:07:23.190 --> 00:07:31.890
So in here we already have the input component or set up here and then we're talking about it logged

115
00:07:32.430 --> 00:07:33.780
input component found.

116
00:07:33.900 --> 00:07:34.790
I'm going to delete.

117
00:07:34.800 --> 00:07:40.740
That's because we know that it will be found straight away and we'll delete the else there and just

118
00:07:40.740 --> 00:07:42.070
tidy up our code.

119
00:07:42.090 --> 00:07:44.120
It's getting quite bulky now.

120
00:07:44.310 --> 00:07:44.550
Okay.

121
00:07:44.580 --> 00:07:51.560
So we already have an example directly above of the input component and we can almost verbatim but it's

122
00:07:51.570 --> 00:07:53.110
going to change in a moment.

123
00:07:53.250 --> 00:07:59.650
And I wonder if this tripped you up when we were going through what is it called okay.

124
00:07:59.940 --> 00:08:02.860
Well it's still the grab key isn't it.

125
00:08:02.880 --> 00:08:05.090
So perhaps our naming is not quite right there.

126
00:08:05.130 --> 00:08:06.000
Or maybe it is.

127
00:08:06.000 --> 00:08:07.340
It depends.

128
00:08:07.350 --> 00:08:13.890
So it is still the grab key but this time we're talking about when it is released.

129
00:08:13.890 --> 00:08:16.490
So that's the difference between the two.

130
00:08:16.590 --> 00:08:20.310
And then of course we're talking about this particular grabber.

131
00:08:20.610 --> 00:08:24.170
And then the ampersand followed by you grabber.

132
00:08:24.230 --> 00:08:30.690
It's come up brilliant two colons and then we're talking about the release which is just there we don't

133
00:08:30.690 --> 00:08:35.550
need anything else apart from the parentheses close and our semicolon.

134
00:08:35.580 --> 00:08:36.210
OK.

135
00:08:36.300 --> 00:08:41.180
So if we go ahead and save our file and go over into unreal compiler code.

136
00:08:41.200 --> 00:08:42.970
Okay let's go ahead and press play.

137
00:08:42.990 --> 00:08:49.070
And now what we should see is look at that when we press it and hold it it still says pressed.

138
00:08:49.110 --> 00:08:52.180
However when we release it it says released.

139
00:08:52.320 --> 00:08:54.320
That's exactly what I want to see.

140
00:08:54.330 --> 00:08:56.680
Now I'm just clicking the right mouse button there.

141
00:08:56.880 --> 00:09:02.640
But you could have used any inputs that you wanted as long as it can detect when it's pressed and when

142
00:09:02.640 --> 00:09:03.600
it's released.

143
00:09:03.720 --> 00:09:04.830
And how about that.

144
00:09:04.830 --> 00:09:06.170
Congratulations guys.

145
00:09:06.170 --> 00:09:11.100
We've managed to make it so that we can toggle grabbing on and off.

146
00:09:11.380 --> 00:09:16.380
It's just not long now until we end up picking up our objects and moving them around our level and then

147
00:09:16.380 --> 00:09:19.390
we'll get to the point where we're no longer stuck in this tiny room.

148
00:09:19.470 --> 00:09:25.230
We'll branch out and create a proper level and that's it for this lecture and I'll see you all in the

149
00:09:25.230 --> 00:09:25.710
next one.
