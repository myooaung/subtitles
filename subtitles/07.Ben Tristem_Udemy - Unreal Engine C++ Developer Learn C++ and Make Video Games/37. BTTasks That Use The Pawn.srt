1
00:00:04,450 --> 00:00:08,950
Hello and welcome this lecture, we're going to be making an enemy more of a threat by implementing

2
00:00:08,980 --> 00:00:11,530
a chute node in C++.

3
00:00:11,770 --> 00:00:13,600
Let's dive in and see how to do it.

4
00:00:14,750 --> 00:00:19,790
So one piece of functionality that's clearly missing from our behavior tree is the ability to shoot.

5
00:00:20,210 --> 00:00:24,950
What I'd ideally want to do is move to the player's location and then shoot.

6
00:00:24,980 --> 00:00:28,550
But we want to change a little bit first how we do the movement.

7
00:00:28,580 --> 00:00:29,850
There's a couple of things I want to tweak.

8
00:00:29,870 --> 00:00:34,310
So if I select the move to node, one thing I want change is the radius.

9
00:00:34,370 --> 00:00:37,100
I don't want the enemy to be coming right up to me.

10
00:00:37,100 --> 00:00:42,890
So if I change the acceptable radius, then it's going to stop moving five meters away from me.

11
00:00:42,950 --> 00:00:43,670
So it's going to stop.

12
00:00:43,820 --> 00:00:45,710
Give me a nice five meter distance.

13
00:00:45,740 --> 00:00:48,170
He comes up to me, they go and he stops and stares.

14
00:00:48,260 --> 00:00:53,120
Now, the other thing I want to do is down here in the blackboard section, you can see there is an

15
00:00:53,120 --> 00:00:54,770
observe blackboard value.

16
00:00:54,860 --> 00:00:58,250
If we don't have that checked, let's see what happens as I move.

17
00:00:58,730 --> 00:01:03,650
He basically and this was a slightly more obvious when we had a smaller, acceptable radius.

18
00:01:03,680 --> 00:01:06,620
So let's just stick that down there to five for now.

19
00:01:07,220 --> 00:01:12,920
And if I hit play, then you can see that as I move, he goes to my last location and then he only then

20
00:01:12,980 --> 00:01:14,900
when he's reached that, does he come an update.

21
00:01:15,050 --> 00:01:16,160
That's not what we want.

22
00:01:16,520 --> 00:01:19,520
What we want is it to be constantly coming towards us.

23
00:01:19,640 --> 00:01:25,310
And if you check the observed blackboard value, then essentially what it's saying is that every time

24
00:01:25,340 --> 00:01:29,960
the player location changes, we're going to update where we are moving to.

25
00:01:30,410 --> 00:01:36,920
So if I go ahead and hit play and move, you can see he's continuously following me and updating his

26
00:01:36,920 --> 00:01:37,550
path.

27
00:01:37,940 --> 00:01:39,080
That's exactly what we want.

28
00:01:39,380 --> 00:01:43,850
So now we can change our accept radius to 500 and it becomes less obvious.

29
00:01:43,880 --> 00:01:47,180
But it's still good that we have our observed Blackbaud value there.

30
00:01:47,360 --> 00:01:53,030
And then the behavior that we want is that once he comes within radius of us like so he's going to stop

31
00:01:53,420 --> 00:01:54,770
and shoot at us for that.

32
00:01:54,830 --> 00:01:56,720
We need a new type of task.

33
00:01:56,780 --> 00:01:58,790
So we gonna create a new C++ task here.

34
00:01:59,180 --> 00:02:02,090
So I, I get to add new new C++ class.

35
00:02:02,180 --> 00:02:06,740
Then we're going to go and show all classes and look for the Beattie task.

36
00:02:07,220 --> 00:02:11,810
Now which one do we want, the Beattie task node or the Beattie task blackboard base.

37
00:02:12,260 --> 00:02:16,490
Well, we don't actually need to use a key because we're just going to try and shoot.

38
00:02:16,550 --> 00:02:17,470
That's all we going do.

39
00:02:17,540 --> 00:02:19,520
We're gonna pull the trigger on our gun.

40
00:02:19,850 --> 00:02:23,360
All the aiming is gonna be done elsewhere in our behaviour tree.

41
00:02:23,840 --> 00:02:26,850
So let's open up the B.T. task node.

42
00:02:26,900 --> 00:02:28,340
The base class here.

43
00:02:28,700 --> 00:02:31,460
And we're going to call this B.T. task.

44
00:02:32,550 --> 00:02:33,190
Underscore.

45
00:02:33,510 --> 00:02:33,930
Shoot.

46
00:02:34,890 --> 00:02:36,630
Let's go ahead and create that class.

47
00:02:36,840 --> 00:02:39,300
Then we end up with something just like this.

48
00:02:39,660 --> 00:02:41,950
So we want to do the same set up.

49
00:02:41,960 --> 00:02:47,670
So a little bit of a mini challenge for you to do the same sort of setup as we've got for our blackboard.

50
00:02:47,730 --> 00:02:48,930
Clear blackboard value.

51
00:02:48,930 --> 00:02:50,250
We want to have a name.

52
00:02:50,340 --> 00:02:52,230
We want to have an execute task.

53
00:02:52,320 --> 00:02:53,850
Now, suppose videos have a go at that.

54
00:02:54,120 --> 00:02:54,250
OK.

55
00:02:54,330 --> 00:02:54,900
Welcome back.

56
00:02:54,960 --> 00:02:56,520
So that was a mini task.

57
00:02:56,550 --> 00:03:02,010
I'm just going to copy over the signatures from my clear blackboard value over to shoot, including

58
00:03:02,220 --> 00:03:04,380
the public and protected sections.

59
00:03:04,800 --> 00:03:07,470
I'm going to change the name of our constructor.

60
00:03:07,830 --> 00:03:10,140
I'm gonna go ahead and implement our constructor.

61
00:03:10,260 --> 00:03:12,090
And what was it that we needed to do?

62
00:03:12,090 --> 00:03:16,260
We need to set node name equal to shoot.

63
00:03:16,500 --> 00:03:17,580
That's what we're going to call it.

64
00:03:17,790 --> 00:03:23,380
Then back to the header for the shoot task and we're going to try and implement the execute task now.

65
00:03:23,550 --> 00:03:29,460
And we just need to call up to super some kind of copy that from our Clear Blackboard Values GPP file.

66
00:03:29,700 --> 00:03:32,610
And then we are ready to start implementing.

67
00:03:32,730 --> 00:03:36,930
So the first thing we're going to need to do here and let's have a bit more space is we're going to

68
00:03:36,930 --> 00:03:39,870
need to get hold of our pawn.

69
00:03:39,930 --> 00:03:41,560
Why do we need to get hold of our pawn?

70
00:03:41,580 --> 00:03:45,030
Well, let's have a look at the shooter character, which is a pawn.

71
00:03:45,060 --> 00:03:48,870
Remember the shooter character Dot H has a shoot method.

72
00:03:48,930 --> 00:03:54,780
That's what we want to be calling essentially the same as we as the player is doing.

73
00:03:54,790 --> 00:03:58,500
He's holding down the trigger button and that's calling this shoot method.

74
00:03:58,530 --> 00:04:02,700
We want the A.I. to be able to do the same when you have the shoot task.

75
00:04:02,730 --> 00:04:07,140
It's going to hold down the trigger button or repeatedly press that trigger button.

76
00:04:07,260 --> 00:04:10,080
So the execute task is going to be the right place to do this.

77
00:04:10,110 --> 00:04:12,780
We're probably going to return what here?

78
00:04:12,870 --> 00:04:15,270
Because remember, this action is just one shot.

79
00:04:15,300 --> 00:04:16,770
It's not continuous shooting.

80
00:04:16,830 --> 00:04:17,580
What are we gonna do?

81
00:04:17,670 --> 00:04:21,180
We're going to return the EBIT node result success.

82
00:04:21,270 --> 00:04:29,220
If we succeeded, if we succeeded because we don't need to continuously call tick, we don't need this

83
00:04:29,520 --> 00:04:32,580
task to be running any longer than a single frame.

84
00:04:32,670 --> 00:04:34,170
And the other thing we need to do is get hold.

85
00:04:34,230 --> 00:04:36,990
As I said, of that pawn class.

86
00:04:37,020 --> 00:04:41,310
Well, what I'm gonna do is I'm gonna show you how you can get hold of the A.I. controller.

87
00:04:41,460 --> 00:04:47,430
And from the A.I. controller, we know that we can call get porn to get the porn that was controlled.

88
00:04:47,700 --> 00:04:53,550
And we know that we can cast that controlled porn to our shooter character implementation.

89
00:04:53,670 --> 00:04:58,740
So how do we get hold of the A.I. controller from this?

90
00:04:58,950 --> 00:05:03,570
Well, we've got our behavior tree component, which we know is on an A.I. controller.

91
00:05:03,570 --> 00:05:09,240
So maybe that has something that we can use if we go to the you behavior tree component and have a look

92
00:05:09,630 --> 00:05:12,350
in the here for any methods that might be helpful.

93
00:05:12,360 --> 00:05:13,500
There's a lot in here.

94
00:05:13,770 --> 00:05:19,380
But if we look for a controller, we aren't seeing anything but maybe somewhere in one of its base classes

95
00:05:19,380 --> 00:05:22,890
because the parent class for the EU behavior tree component is the.

96
00:05:23,280 --> 00:05:24,330
Brain component.

97
00:05:24,750 --> 00:05:27,390
We follow up to that one and look for controller in here.

98
00:05:27,390 --> 00:05:29,220
You can see there is a property for it.

99
00:05:29,670 --> 00:05:31,050
Is there a Geter?

100
00:05:31,140 --> 00:05:36,990
Yes, there is called Get a AI owner and that should return if we hover over it.

101
00:05:37,020 --> 00:05:43,050
And I control a pointer, so you should be able to use that to get hold of the porn, cast it to shoot

102
00:05:43,050 --> 00:05:46,300
a character and then call the shoot method.

103
00:05:46,500 --> 00:05:48,630
So that's going to be your challenge to cool the shoot method.

104
00:05:49,050 --> 00:05:49,860
Make it public.

105
00:05:50,220 --> 00:05:55,980
Get the porn cast the porn call shoot and then test it out in your behavior.

106
00:05:55,980 --> 00:05:57,660
Tree pulls a video and have a go.

107
00:05:58,070 --> 00:05:58,290
Okay.

108
00:05:58,290 --> 00:05:58,860
Welcome back.

109
00:05:58,920 --> 00:06:04,650
So first of all, first step is we're gonna need to make this shoot method public because it needs to

110
00:06:04,650 --> 00:06:07,170
be called from outside of this class.

111
00:06:07,470 --> 00:06:09,200
So I'll put it just under take damage.

112
00:06:09,210 --> 00:06:10,020
We'll have shoot.

113
00:06:10,110 --> 00:06:11,330
Give a little bit space to it.

114
00:06:11,350 --> 00:06:12,210
Little breathing room.

115
00:06:12,210 --> 00:06:13,020
I like whitespace.

116
00:06:13,080 --> 00:06:13,710
Helps me see.

117
00:06:13,720 --> 00:06:14,310
Help me think.

118
00:06:14,760 --> 00:06:17,070
Then we're gonna go to the Beatty task shoot.

119
00:06:17,430 --> 00:06:21,210
We're going to first of all, check that I controller is not.

120
00:06:21,210 --> 00:06:21,510
No.

121
00:06:21,540 --> 00:06:24,370
Otherwise we can't use the arrow operator on it.

122
00:06:24,390 --> 00:06:27,150
Just general good practice to do these null checks.

123
00:06:27,210 --> 00:06:33,930
So if this A.I. owner is not equal, if Sara is equal to null pointer, we're going to want to return

124
00:06:34,020 --> 00:06:35,400
early with a failure.

125
00:06:35,430 --> 00:06:38,550
So this task will fail if we don't have an A.I. controller.

126
00:06:38,580 --> 00:06:39,930
That's pretty straightforward.

127
00:06:39,960 --> 00:06:40,170
So.

128
00:06:40,410 --> 00:06:41,490
And do a return.

129
00:06:41,880 --> 00:06:43,320
IBT node results.

130
00:06:43,350 --> 00:06:45,570
Chalong Kolon failed like so.

131
00:06:45,660 --> 00:06:48,510
And then we are going to do the owner component.

132
00:06:48,510 --> 00:06:49,440
Get a own.

133
00:06:49,920 --> 00:06:52,530
We're going to get porn on it.

134
00:06:52,590 --> 00:06:54,660
In fact, we might need to include a header file here.

135
00:06:54,690 --> 00:06:57,000
So let's do a hash include.

136
00:06:57,240 --> 00:07:02,100
And it's gonna be game framework and the controller.

137
00:07:02,430 --> 00:07:05,010
And in fact, I think, yeah, any controller should do.

138
00:07:05,010 --> 00:07:11,130
But I think we need the A.I. controller because that's the type of the point of the game back.

139
00:07:11,250 --> 00:07:16,440
And then we're gonna do an arrow and we're gonna do a get pawn here complaining about something in my

140
00:07:16,440 --> 00:07:18,630
head, a file, maybe I haven't got something right.

141
00:07:18,690 --> 00:07:21,460
So forward slash A.I. looks like I got it wrong.

142
00:07:21,460 --> 00:07:25,860
And still actually in game framework, you just have a AI controller to include.

143
00:07:26,310 --> 00:07:28,650
Teach me for being so blasé about that.

144
00:07:28,680 --> 00:07:29,190
So there we go.

145
00:07:29,220 --> 00:07:31,950
We can now get the porn from the A.I. owner.

146
00:07:32,310 --> 00:07:34,290
And as I said, we also need to do a.

147
00:07:34,370 --> 00:07:34,730
Past.

148
00:07:35,030 --> 00:07:36,600
So we're going to do a cast.

149
00:07:36,670 --> 00:07:41,160
To what type we're going to need to cast to the end of the shoot.

150
00:07:41,240 --> 00:07:41,590
Character.

151
00:07:41,600 --> 00:07:43,280
So that is in its full form.

152
00:07:43,340 --> 00:07:45,740
A shoot, a character, a shoot, a character.

153
00:07:45,950 --> 00:07:48,900
And we're going to need to check the result of this as well.

154
00:07:49,070 --> 00:07:51,350
But we need to include Ashrita character.

155
00:07:51,350 --> 00:07:53,240
So hash include at the top.

156
00:07:53,930 --> 00:07:56,810
The shooter character, Don H.

157
00:07:57,680 --> 00:07:58,100
Like, so.

158
00:07:58,820 --> 00:08:02,780
And we're going to store that in a pointer type shit character star.

159
00:08:03,140 --> 00:08:04,220
Gonna be our character.

160
00:08:04,830 --> 00:08:05,420
We'll call it.

161
00:08:05,510 --> 00:08:06,320
We'll store it there.

162
00:08:07,100 --> 00:08:13,940
And basically, we need to make sure that neither the get porn return because get porn might return.

163
00:08:14,160 --> 00:08:14,480
No.

164
00:08:14,750 --> 00:08:19,920
If the A.I. is not currently controlling a porn or this cast might return.

165
00:08:19,940 --> 00:08:20,320
No.

166
00:08:20,720 --> 00:08:25,670
If the type is not an eight chute's character, if he's controlling a different type of porn.

167
00:08:26,030 --> 00:08:28,430
Fortunately, these two get down quite well together.

168
00:08:28,490 --> 00:08:30,160
So if you try and cast a null point.

169
00:08:30,200 --> 00:08:32,810
The result is just a null pointer, which is why we can do this.

170
00:08:33,290 --> 00:08:34,700
These checks all in one line.

171
00:08:35,510 --> 00:08:37,490
Then we can do an if character.

172
00:08:39,190 --> 00:08:41,050
Equals null pointer.

173
00:08:42,550 --> 00:08:44,650
Then we want to fail again.

174
00:08:44,680 --> 00:08:45,760
So return.

175
00:08:47,040 --> 00:08:50,950
IBT node results, Callon Kolon failed.

176
00:08:51,380 --> 00:08:51,780
Like so.

177
00:08:52,050 --> 00:08:56,280
And finally, after all of those checks and we know that we've got ourselves a shooter character, we

178
00:08:56,280 --> 00:09:01,470
should be able to call Chute's so character Arrow and shoot like say.

179
00:09:01,980 --> 00:09:04,800
So that will finally get us able to shoot.

180
00:09:04,830 --> 00:09:07,350
Let's go over to a behavior tree.

181
00:09:08,100 --> 00:09:15,270
And in here, we're going to want to pulldowns place new node and look for the new shoot task that we've

182
00:09:15,270 --> 00:09:16,080
got in here.

183
00:09:16,620 --> 00:09:17,580
And I'm not sure whether I.

184
00:09:17,580 --> 00:09:20,590
Comp. So I'm just gonna make sure that everything compiles again.

185
00:09:20,790 --> 00:09:23,220
And once that's done, we can go over and hit play.

186
00:09:23,280 --> 00:09:25,680
And see if this guy comes up and shoots.

187
00:09:26,280 --> 00:09:26,550
Okay.

188
00:09:26,590 --> 00:09:27,420
Yes, he does.

189
00:09:27,450 --> 00:09:32,730
Unfortunately, he's shooting repeatedly and shooting himself in the foot.

190
00:09:33,030 --> 00:09:35,940
So something is not quite right right there.

191
00:09:35,970 --> 00:09:38,370
So there's two things going wrong for a start.

192
00:09:38,400 --> 00:09:40,540
He managed to kill himself with the shots.

193
00:09:40,950 --> 00:09:46,260
And it also seems like he is shooting every single frame, which would make sense because we're getting

194
00:09:46,320 --> 00:09:47,030
to see the player.

195
00:09:47,030 --> 00:09:52,050
We move to them and then shoot is the last action we've got here, which we're going to execute repeatedly.

196
00:09:52,410 --> 00:09:56,160
So what we want to do is actually turn this into a sequence.

197
00:09:56,550 --> 00:10:00,060
So I'm going to drag off a node here, call, make a sequence node.

198
00:10:00,540 --> 00:10:04,800
And what we're gonna do is we're gonna shoot, then wait, then shoot, then wait and repeat that indefinitely.

199
00:10:04,830 --> 00:10:06,270
So shoot first.

200
00:10:06,900 --> 00:10:07,680
Wait a little bit.

201
00:10:07,710 --> 00:10:08,880
So maybe we wait.

202
00:10:08,970 --> 00:10:13,950
I don't know for one second between shots and then we're going to want to repeat this, which we can

203
00:10:13,950 --> 00:10:14,950
do with a decorator.

204
00:10:14,970 --> 00:10:15,240
So if I.

205
00:10:15,240 --> 00:10:15,480
Right.

206
00:10:15,480 --> 00:10:19,130
Click add decorator and look for the loop decorator.

207
00:10:19,470 --> 00:10:21,330
Then you can see how many times you want it to loop.

208
00:10:21,720 --> 00:10:22,560
It says three times.

209
00:10:22,590 --> 00:10:23,490
We don't want it three times.

210
00:10:23,520 --> 00:10:29,100
Wanted basically to infinitely loop until we need to move or we need we've lost sight of the and we

211
00:10:29,100 --> 00:10:30,150
need to go and investigate.

212
00:10:30,660 --> 00:10:32,970
So we're gonna go ahead and hit play and see if that works.

213
00:10:32,970 --> 00:10:35,790
Comes up to me, shoots, shoots, shoots.

214
00:10:36,030 --> 00:10:37,500
But he's not actually hitting me.

215
00:10:37,530 --> 00:10:41,700
You can see that his shots are actually landing on himself.

216
00:10:42,660 --> 00:10:46,560
And we're gonna deal with that bug in an upcoming lecture.

217
00:10:46,770 --> 00:10:47,190
See that?
