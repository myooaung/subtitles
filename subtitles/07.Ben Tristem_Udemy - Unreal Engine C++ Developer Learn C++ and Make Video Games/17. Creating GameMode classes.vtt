WEBVTT
1
00:00:04.390 --> 00:00:07.810
In this lecture, we'll be taking a look at the game mode, class type.

2
00:00:07.900 --> 00:00:13.480
We'll be implementing the basic structure of a game mode to get a better understanding of how and when

3
00:00:13.570 --> 00:00:17.050
they're generally used in the unreal engine to get started.

4
00:00:17.380 --> 00:00:22.780
We're going to want to go over to our C++ voter and create a new game mode class.

5
00:00:23.110 --> 00:00:26.500
So I'll just right click and select create C++ class.

6
00:00:26.530 --> 00:00:32.020
We can scroll down through the class options and find here our game mode base, which is what we want

7
00:00:32.020 --> 00:00:32.620
to create.

8
00:00:32.950 --> 00:00:37.810
So the description here is pretty good overall on the overview of what the class will be used for.

9
00:00:38.020 --> 00:00:42.880
It dictates the rules of game play, such as the play you control, the controller owning the player,

10
00:00:43.240 --> 00:00:45.310
the current state of the game and more.

11
00:00:45.760 --> 00:00:50.710
And these are all actually things that are already defined in the game mode class, as we'll see a little

12
00:00:50.710 --> 00:00:51.250
bit later.

13
00:00:51.640 --> 00:00:57.070
This next bit about scoring is a little bit less correct and possibly a bit misleading and more of a

14
00:00:57.070 --> 00:00:59.200
suggestion than a requirement.

15
00:00:59.410 --> 00:01:00.310
You definitely can.

16
00:01:00.430 --> 00:01:03.910
And we will be keeping track of school like values in the game.

17
00:01:03.910 --> 00:01:04.110
Right.

18
00:01:04.570 --> 00:01:11.110
However, unlike the previous examples I've just provided, there's nothing already predefined or required

19
00:01:11.320 --> 00:01:14.490
to implement the game score in a game mode class.

20
00:01:14.650 --> 00:01:19.580
So I just wanted to make some distinctions there because we will be pulling from some preset value.

21
00:01:19.590 --> 00:01:25.420
So some of those which the engine ready provides for us, whereas there's no actual concept of score

22
00:01:25.600 --> 00:01:27.400
in the game class hierarchy.

23
00:01:27.580 --> 00:01:32.920
So let's get to creating the class so that we can see what all of this means in a development scenario.

24
00:01:33.070 --> 00:01:36.530
So make sure that you have the game mode base selected and click next.

25
00:01:36.930 --> 00:01:43.320
I renamed this Class two tank game mode base and again drop this into its own folder named Game Mates.

26
00:01:43.480 --> 00:01:45.970
Then click, create and wait for it to do its thing.

27
00:01:49.160 --> 00:01:53.990
And when that's done inside of the idee, the game mode is looking pretty much like any other class.

28
00:01:54.010 --> 00:01:56.970
We'll have our header and our code for in the Head of Fire.

29
00:01:57.010 --> 00:02:01.180
We can start by declaring our private, public and protected sections.

30
00:02:01.510 --> 00:02:06.880
Then in the protected section, I'll start by declaring a B can play function as we've done before.

31
00:02:07.180 --> 00:02:12.790
We'll need this to set all of the game mode, relevant information as soon as the game starts, such

32
00:02:12.790 --> 00:02:17.800
as the number of target tarts and in this case and the more complex games, this could extend to things

33
00:02:17.800 --> 00:02:19.720
like initializing a round timer.

34
00:02:19.840 --> 00:02:21.140
The number of lives for each player.

35
00:02:21.160 --> 00:02:22.750
Target scores and things like that.

36
00:02:23.230 --> 00:02:29.740
Then in the public section, I'm going to create a void function named act dite taking in an argument

37
00:02:29.830 --> 00:02:32.470
of actor pointer named dead actor.

38
00:02:32.980 --> 00:02:39.160
This will be the function, the turrets or the player tank will call and the game mode will then later

39
00:02:39.160 --> 00:02:44.710
decide what to do, depending on whether this was a player dying or a turret pawn.

40
00:02:44.980 --> 00:02:46.450
Next, then we need two more functions.

41
00:02:46.480 --> 00:02:49.270
One named game start and one that name to game over.

42
00:02:52.320 --> 00:02:57.540
The game over function will have a boolean argument named Player one, which will check if we've hit

43
00:02:57.600 --> 00:03:03.510
a win or a loose state of move back and place these in the protected section, as these won't need to

44
00:03:03.510 --> 00:03:04.740
be called from outside.

45
00:03:04.950 --> 00:03:10.470
But if you wanted to expand the project, you may want a child game mode class that could potentially

46
00:03:10.470 --> 00:03:11.400
utilize them as well.

47
00:03:11.910 --> 00:03:14.280
And then both of these functions will have a U.

48
00:03:14.280 --> 00:03:18.120
Function property of blueprints implementable event.

49
00:03:18.300 --> 00:03:23.010
And this will allow us to handle the function implementation in the derived blueprint class.

50
00:03:23.280 --> 00:03:28.050
As certain things like setting timers and creating widgets, which is what these will be responsible

51
00:03:28.050 --> 00:03:33.540
for, is just much more time efficient and approachable in the blueprint drive classes.

52
00:03:35.350 --> 00:03:40.660
Then back in the private section will create two more void functions, this time named Handal Games

53
00:03:40.660 --> 00:03:42.960
DOT and handle Gameover Handle.

54
00:03:43.000 --> 00:03:46.990
Game Over will once again take in a boolean argument named Play a One.

55
00:03:47.110 --> 00:03:50.860
And these will be our functions to handle these C++ side of the game flow.

56
00:03:50.950 --> 00:03:53.170
So we don't need any of these specifiers here.

57
00:03:53.320 --> 00:03:57.640
And these will be calling our blueprint game starts and game over functions.

58
00:03:57.730 --> 00:04:04.090
So the logic will be handled in C++ to track the number of remaining turrets or the player being destroyed,

59
00:04:04.210 --> 00:04:08.950
and then the relevant function will be called in the blueprint derived classes to handle displaying

60
00:04:08.950 --> 00:04:09.700
those results.

61
00:04:11.140 --> 00:04:13.810
Next, then we just want to implement all of our new functions.

62
00:04:14.110 --> 00:04:16.240
This is a very familiar process by nice.

63
00:04:16.250 --> 00:04:17.710
So just a quick challenge for you.

64
00:04:17.890 --> 00:04:22.330
Go ahead and implement all of the required functions in the code file.

65
00:04:22.510 --> 00:04:26.820
Remember that some of the declared functions are meant to be implemented only in blueprints.

66
00:04:26.950 --> 00:04:29.710
So these won't need to get a C plus plus implementation.

67
00:04:30.010 --> 00:04:32.820
So go ahead and post video now and give that one to go.

68
00:04:34.350 --> 00:04:40.220
Okay, so the functions required for implementation are all of those that we have not specified to be

69
00:04:40.250 --> 00:04:44.030
a blueprint implementable event using the you function specify.

70
00:04:44.150 --> 00:04:47.570
So that was the main concept of that challenge here when we're using the specify.

71
00:04:47.710 --> 00:04:50.870
We do not include a C++ implementation.

72
00:04:51.100 --> 00:04:51.870
So have that in mind.

73
00:04:51.920 --> 00:04:58.550
Or just use the multi-line select option combined with the C++ help a shortcut again to implement all

74
00:04:58.550 --> 00:05:00.500
of the required functions.

75
00:05:00.770 --> 00:05:03.290
I'm just going to tidy up the formatting a little bit here.

76
00:05:03.440 --> 00:05:08.360
I'll paste the begin play at the top of the code file as this is where we usually find this located.

77
00:05:08.540 --> 00:05:13.520
I'll also paste the actor died function just above the handle functions so that we can leave those two

78
00:05:13.520 --> 00:05:13.940
together.

79
00:05:14.330 --> 00:05:19.160
Then we're just going to get a quick idea of the Gamefly whilst in the class by commenting out all of

80
00:05:19.160 --> 00:05:21.560
the process a little bit like we've done before.

81
00:05:21.650 --> 00:05:24.410
And then we'll be returning to this later to fill in these functions.

82
00:05:24.470 --> 00:05:26.030
So the Begin play is quite simple.

83
00:05:26.210 --> 00:05:31.640
We're just going to be getting and storing the variables and the game conditions, then calling the

84
00:05:31.640 --> 00:05:35.210
handler game start function to initialize the start of the game.

85
00:05:35.510 --> 00:05:40.190
Then in our act died function, we're going to be expecting to handle the logic to check what type of

86
00:05:40.190 --> 00:05:43.190
actor has just been killed and then respond accordingly.

87
00:05:44.480 --> 00:05:50.820
The handle start function, we can pretty much say has been outlined from the beginning play comment

88
00:05:50.820 --> 00:05:51.160
as well.

89
00:05:51.320 --> 00:05:52.530
Doing pretty much same thing here.

90
00:05:52.830 --> 00:05:58.200
And then finally, the handle game over function will manage what results to show depending on whether

91
00:05:58.200 --> 00:06:00.000
the player won or lost the right.

92
00:06:00.330 --> 00:06:05.730
Also important here is that the handle game functions will be responsible for calling the blueprint

93
00:06:05.760 --> 00:06:07.110
implement Bullivant versions.

94
00:06:07.230 --> 00:06:09.390
So quickly comment that and to just remind us.

95
00:06:09.750 --> 00:06:09.960
Okay.

96
00:06:10.020 --> 00:06:14.070
So we have our class under kind of high level overview of what it will be doing.

97
00:06:14.400 --> 00:06:19.950
Let's get the editor restarted and we'll go back in there and see what this class is really kind of

98
00:06:19.950 --> 00:06:23.910
providing us without any of the custom functionality yet implemented.

99
00:06:24.150 --> 00:06:25.860
So in the editor, I'll just compile this.

100
00:06:25.980 --> 00:06:27.570
Make sure that we have no typos.

101
00:06:27.990 --> 00:06:30.870
And with that done, we get to test out the new class.

102
00:06:30.930 --> 00:06:35.490
So what we're gonna want, first of all, is a blueprint version to use in our project settings.

103
00:06:35.870 --> 00:06:40.610
I'll start by creating a new folder in the blueprint structure named Game Moat's.

104
00:06:41.390 --> 00:06:43.500
We can go over to our game mode class.

105
00:06:43.560 --> 00:06:43.770
Right.

106
00:06:43.770 --> 00:06:47.710
Click on this and select create blueprint and place that in the new game.

107
00:06:47.710 --> 00:06:48.720
MIT's Blueprint Voter.

108
00:06:50.150 --> 00:06:52.790
Name this one, the BP underscore game mode bass.

109
00:06:56.010 --> 00:07:00.300
Inside of the new blueprint, we just want to focus on the details panel at the moment.

110
00:07:00.510 --> 00:07:04.740
And we can see that all of the things that I've mentioned earlier and a few more that the game mode

111
00:07:04.770 --> 00:07:09.450
is responsible for controlling so we can start by providing a default pool and we already have that

112
00:07:09.450 --> 00:07:14.930
available as that will be our tank class, the blueprint version of the tank class specifically.

113
00:07:15.180 --> 00:07:20.100
If you then compile and save this, we can make our way over to the project settings and then in the

114
00:07:20.100 --> 00:07:21.540
maps and mode stop.

115
00:07:21.660 --> 00:07:26.310
The way that the unreal engine works is that every game will need a game mode class to control what

116
00:07:26.310 --> 00:07:28.650
is spawned when the level is initialized.

117
00:07:28.830 --> 00:07:30.990
So this will kind of currently happening in the background.

118
00:07:31.260 --> 00:07:36.630
And if you don't provide one like we haven't in the past, then a default game mode is going to be used

119
00:07:36.630 --> 00:07:38.960
with some prefilled default classes.

120
00:07:39.150 --> 00:07:42.120
And these are all of the great options that we can see here.

121
00:07:42.210 --> 00:07:46.530
Things like the basic player controller and the default pawn, which is that grace fear that you may

122
00:07:46.530 --> 00:07:50.460
be familiar with piloting if you've ever just kind of loaded a game up and just press play.

123
00:07:50.910 --> 00:07:55.590
So what we want to do here is give our project our custom at game mode so that it will know that we

124
00:07:55.590 --> 00:07:58.410
want to specifically spawn in the tank class.

125
00:07:58.680 --> 00:08:00.250
And that will be the default play.

126
00:08:00.250 --> 00:08:05.550
A controlled pawn will also be coming back and adding motors later when we have our player controller

127
00:08:05.550 --> 00:08:06.090
class ready.

128
00:08:06.270 --> 00:08:12.270
But what this will now allow us to do is return to our level and remove the hard reference to the controllable

129
00:08:12.270 --> 00:08:12.660
pawn.

130
00:08:12.870 --> 00:08:17.200
So remember that we've been manually setting this to auto possess players zero.

131
00:08:17.550 --> 00:08:22.590
And that's kind of an override of the default pawn floating sphere that we would have had otherwise

132
00:08:22.860 --> 00:08:24.860
as we hadn't overridden anything in a game mode.

133
00:08:25.020 --> 00:08:26.670
So this isn't an ideal setup.

134
00:08:26.700 --> 00:08:30.840
So we're going to remove this pawn and ensure that we have a player start in the level.

135
00:08:30.990 --> 00:08:34.980
If you don't already have them, for whatever reason, you would have had one by default if you've gotten

136
00:08:34.980 --> 00:08:36.010
rid of that at some point.

137
00:08:36.150 --> 00:08:42.360
So you can find a new place like class over in the place, act a panel to the left and just drag one

138
00:08:42.360 --> 00:08:44.970
back in to the level to avoid any ambiguity.

139
00:08:45.000 --> 00:08:48.570
You usually only want to have a single player slot in the level.

140
00:08:48.810 --> 00:08:52.950
Otherwise, the game mode can get a little bit confused and randomly pick between them unless you're

141
00:08:52.950 --> 00:08:59.260
using them for a multiplayer setup, in which case you'd set which play index will spawn for which player?

142
00:08:59.260 --> 00:09:03.520
A controller inside of the player starts settings for our use case.

143
00:09:03.560 --> 00:09:09.480
So we only want to have the single player start and we can actually leave the auto receive input to

144
00:09:09.480 --> 00:09:11.850
disabled, which is a little bit confusing.

145
00:09:11.880 --> 00:09:17.790
But as the game mode is specifically looking for this class type and we only have one player to spawn,

146
00:09:17.970 --> 00:09:24.330
it will ignore the disabled check and it will use this as our new spawn location for the tank class.

147
00:09:24.660 --> 00:09:26.520
So let's press play and we'll give that a go.

148
00:09:26.910 --> 00:09:27.450
And there we go.

149
00:09:27.450 --> 00:09:33.000
We can see that we're automatically spawning in a new tank and we'll gain control of this, allowing

150
00:09:33.000 --> 00:09:37.620
the system to kind of automate some of that process so that we don't have to manually place the tank

151
00:09:37.620 --> 00:09:40.140
class and override this in our level.
