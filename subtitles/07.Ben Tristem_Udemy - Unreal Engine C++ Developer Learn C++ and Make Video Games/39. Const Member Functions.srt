1
00:00:04,810 --> 00:00:06,490
Hello everybody and welcome back.

2
00:00:06,490 --> 00:00:12,100
Now before we get on to actually creating our function that's going to loop through these strings.

3
00:00:12,100 --> 00:00:18,160
I want to talk about const functions because this is an ideal time to actually touch them.

4
00:00:18,160 --> 00:00:21,130
Now by using const you protect yourself.

5
00:00:21,130 --> 00:00:27,940
It means constant and it means that you're making a promise that whatever you're doing within your function

6
00:00:28,690 --> 00:00:32,330
that it will not edit or alter the member variables.

7
00:00:32,950 --> 00:00:40,660
So in general if a function doesn't change any member variables of the class make it a constant by using

8
00:00:40,660 --> 00:00:42,230
the keyword contest.

9
00:00:42,550 --> 00:00:45,190
And I'll show you where that goes in a few moments.

10
00:00:45,310 --> 00:00:49,740
And it also has the added benefit that your idea will end up with red squiggles everywhere.

11
00:00:49,900 --> 00:00:55,270
And it makes sure your functions aren't going to modify your classes when you don't intend them to.

12
00:00:55,270 --> 00:00:56,610
Now there is a get out clause.

13
00:00:56,620 --> 00:00:58,510
There's a keyword called mutable.

14
00:00:58,510 --> 00:01:00,650
We'll cover that later on in the course.

15
00:01:00,910 --> 00:01:07,840
And also as I've been saying constantly so far is also referred to as a contest function so whether

16
00:01:07,840 --> 00:01:12,800
you call a contest member function or a contest function they're both the same thing.

17
00:01:13,620 --> 00:01:14,010
OK.

18
00:01:14,020 --> 00:01:18,200
So before we go over into V.S. code a couple of things to cover with const functions.

19
00:01:18,310 --> 00:01:21,700
First of all they cannot call non const functions.

20
00:01:21,760 --> 00:01:26,350
So if you states that your function is const it's not going to alter any of the member variables of

21
00:01:26,350 --> 00:01:27,150
the class.

22
00:01:27,190 --> 00:01:35,590
You can't go ahead and call a function that would do and then const objects can only call const functions.

23
00:01:35,620 --> 00:01:39,620
This is important it adds consistency and safety to your code.

24
00:01:39,910 --> 00:01:46,420
And you'll get lots of chance to practice const as we progressed through the course okay.

25
00:01:46,430 --> 00:01:52,040
So before we actually have a look at how our functions themselves let's go all the way up and have a

26
00:01:52,040 --> 00:01:56,170
look at the first instance because const has been here since the very beginning.

27
00:01:56,600 --> 00:01:59,470
So it's time to start unraveling what this means.

28
00:01:59,570 --> 00:02:06,800
Things like this are often easier to read from right to left than they are moving forward.

29
00:02:06,800 --> 00:02:13,800
And what this literally means is that this is a reference to a string whose contents will not be changed.

30
00:02:13,880 --> 00:02:16,740
Now we have a look at how functions themselves.

31
00:02:16,910 --> 00:02:20,230
But while before we do that let's have a look at these member variables here.

32
00:02:20,240 --> 00:02:27,170
So over in the header file we've got three member variables declared which basically means that we cannot

33
00:02:27,740 --> 00:02:32,430
make any function count that is altering these.

34
00:02:32,480 --> 00:02:41,420
So we have a look at our code itself which starts with these two here that begin play and on input Well

35
00:02:41,480 --> 00:02:45,200
neither of these can be const functions for a start.

36
00:02:45,200 --> 00:02:50,400
The setup of the game if we scroll down here it alters all three of our member variables.

37
00:02:50,450 --> 00:02:52,330
So we definitely can't have that.

38
00:02:52,370 --> 00:02:59,780
This is an example here of where you cannot make a function count that then goes ahead and calls non

39
00:02:59,780 --> 00:03:01,380
const functions.

40
00:03:01,400 --> 00:03:08,080
So here the next one as well on input we definitely can't do let's carry on down the setup of the game.

41
00:03:08,080 --> 00:03:09,590
Absolutely not.

42
00:03:09,610 --> 00:03:10,570
End Game.

43
00:03:10,780 --> 00:03:12,130
No we cannot do that.

44
00:03:12,130 --> 00:03:13,120
It changes the states.

45
00:03:13,120 --> 00:03:16,240
The big game over this is an interesting one here.

46
00:03:16,240 --> 00:03:18,850
We've got the process guess function now.

47
00:03:18,910 --> 00:03:24,580
At first glance it could almost be made contact and we could indeed make it const.

48
00:03:24,640 --> 00:03:26,830
Apart from this whole lives thing here.

49
00:03:27,730 --> 00:03:33,240
So what we could do is perhaps take all of this out.

50
00:03:33,370 --> 00:03:39,880
This section of code here these first three checks before we decrement the life put that into a concept

51
00:03:39,880 --> 00:03:44,020
function because none of this alters any member variable.

52
00:03:44,020 --> 00:03:44,920
So we could do that.

53
00:03:45,310 --> 00:03:49,810
I think it's better at the moment to just leave it in line for simplicity.

54
00:03:49,810 --> 00:03:55,100
There is such a thing as over engineering your code and this is a relatively straightforward game.

55
00:03:55,180 --> 00:04:01,840
And since this is all about processing the gas and what happens during the process of the gas then I

56
00:04:01,840 --> 00:04:03,980
think keeping it all in one place is a good idea.

57
00:04:04,030 --> 00:04:10,610
But if you want the extra challenge to move that into its own function then go ahead and do that.

58
00:04:10,720 --> 00:04:14,920
Now if we go down to our final one the one that we're working on at the moment and this is why it's

59
00:04:14,920 --> 00:04:22,680
a good time to start covering contest at this time is we're not touching any of the member variables.

60
00:04:22,720 --> 00:04:29,080
We're taking a word in and we're assessing it and then we're feeding back the results straight into

61
00:04:29,500 --> 00:04:33,790
here where we go and check if it's a nice gram or not.

62
00:04:33,790 --> 00:04:36,180
So that means that we can make this concept.

63
00:04:36,250 --> 00:04:38,960
So why do we put this const keyword.

64
00:04:39,010 --> 00:04:45,030
Well simply here we put it on the end and the moment we put that keyword on there we're going to get

65
00:04:45,030 --> 00:04:46,720
a red squiggle.

66
00:04:46,800 --> 00:04:52,680
It's not declared so we've only made the definition contest at the moment and it is possible to have

67
00:04:52,890 --> 00:04:57,960
const and non const versions of your functions which can get confusing.

68
00:04:57,990 --> 00:04:59,730
But we'll leave that there for the moment.

69
00:04:59,730 --> 00:05:00,900
Go to the header file.

70
00:05:00,900 --> 00:05:03,220
So then we've got the is ice ground function here.

71
00:05:03,330 --> 00:05:08,460
We go to the end of it and also add in the keyword count there and save our file.

72
00:05:08,460 --> 00:05:15,360
We will then find that this itself the red squiggle disappears because we have declared a contest function

73
00:05:15,390 --> 00:05:19,380
is Isaac gram and then we're defining it down here.

74
00:05:19,380 --> 00:05:20,280
Perfect.

75
00:05:20,310 --> 00:05:26,640
So there's not really a challenge to go along with this lecture other than the ongoing challenge to

76
00:05:26,640 --> 00:05:32,670
make sure that when you're working with functions that do not alter your member variable make sure you

77
00:05:32,730 --> 00:05:34,470
add concept to it.

78
00:05:34,500 --> 00:05:40,700
In fact there's a very good resource that I'll add to the lecture resources that is called const correctness.

79
00:05:40,830 --> 00:05:45,150
Now as a beginner this is going to be a bit confusing.

80
00:05:45,150 --> 00:05:51,120
It's one of these things that doesn't make much sense in C you get into bigger code bases where it becomes

81
00:05:51,150 --> 00:05:56,510
almost essential to make sure that something funky isn't going to go on in the background.

82
00:05:56,580 --> 00:06:03,270
So make sure from the very beginning you practice this very good practice of protecting yourself because

83
00:06:03,270 --> 00:06:06,790
otherwise it will come back to bite you later on.

84
00:06:06,810 --> 00:06:08,340
So that's it for this lecture.

85
00:06:08,400 --> 00:06:14,040
Simple one they're adding the cons keyword to the end of our function and we're good to go and I'll

86
00:06:14,040 --> 00:06:16,050
see you all in the next lecture.
