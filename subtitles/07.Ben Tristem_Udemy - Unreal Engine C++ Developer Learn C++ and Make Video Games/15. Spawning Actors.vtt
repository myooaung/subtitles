WEBVTT
1
00:00:04.220 --> 00:00:08.860
In this lecture, we'll be implementing these Sporn Act, a function which will allow us to create actors

2
00:00:08.920 --> 00:00:10.900
and place them in the world at runtime.

3
00:00:11.140 --> 00:00:14.060
We'll be using our projecto as the actor to spawn.

4
00:00:14.170 --> 00:00:19.780
And we can do this from the pawn based class because this is where the fire functionality will be handled

5
00:00:20.410 --> 00:00:22.350
before we jump in to supporting our actor.

6
00:00:22.450 --> 00:00:28.750
We're going to want a projectile variable ready to check that the PWN class has a valid concept of what

7
00:00:28.750 --> 00:00:29.620
it's trying to spawn.

8
00:00:29.950 --> 00:00:32.950
So we're gonna be using the projectile based class that we've created.

9
00:00:33.070 --> 00:00:37.840
So in the head, a file we just first want to forward declare the a projectile based class.

10
00:00:39.220 --> 00:00:41.930
And then down below, rather than using a pointer.

11
00:00:42.100 --> 00:00:44.940
We're going to implement the T subclass of type again.

12
00:00:45.180 --> 00:00:50.440
And this means that if you were to expand different types of projectiles from our projectile based class.

13
00:00:50.540 --> 00:00:54.250
So, of course, we'll be passing in the a projectile base as the class type.

14
00:00:54.350 --> 00:00:54.610
I know.

15
00:00:54.610 --> 00:00:55.420
Just name this one.

16
00:00:55.480 --> 00:00:56.710
Projectile class.

17
00:00:58.710 --> 00:01:00.720
We'll also want to expose this to the editor.

18
00:01:00.780 --> 00:01:04.560
So I'll define you property with adits anywhere, access.

19
00:01:05.660 --> 00:01:06.980
Make it Blueprint Read-Only.

20
00:01:08.550 --> 00:01:11.270
Place it in a category named projectile type.

21
00:01:13.430 --> 00:01:15.110
Underly private access.

22
00:01:18.810 --> 00:01:20.920
Projects and I'm starting to get a little bit larger.

23
00:01:20.950 --> 00:01:23.890
So we'll start implementing some comments as we go through.

24
00:01:24.100 --> 00:01:30.190
I'm just going to highlight here that we have a private section with different category sections kind

25
00:01:30.190 --> 00:01:31.180
of housed within this.

26
00:01:31.270 --> 00:01:33.070
We have our components at the moment.

27
00:01:33.280 --> 00:01:38.020
And I have created some space below, which at the moment is for the new projecto variable and potentially

28
00:01:38.020 --> 00:01:41.740
any future variables that create in this class that ready.

29
00:01:41.740 --> 00:01:45.550
We can I go over to our code file and get to spawning this.

30
00:01:45.760 --> 00:01:49.660
So the first thing that we need to include is a link to the tune.

31
00:01:49.670 --> 00:01:50.320
Thanks.

32
00:01:51.290 --> 00:01:52.430
Forward slash actors.

33
00:01:53.710 --> 00:01:55.760
Forward slash, projectile based hedge.

34
00:01:56.010 --> 00:01:56.990
So we're getting the projectile.

35
00:01:57.120 --> 00:01:57.780
Head to class.

36
00:01:57.990 --> 00:02:02.940
Then inside of the fire function, we can finally remove our test log and replace this with a check

37
00:02:02.940 --> 00:02:05.040
for a valid projectile class reference.

38
00:02:05.280 --> 00:02:10.470
So this is done in case that we forget to fill the property and the editor with the type of projectile

39
00:02:10.500 --> 00:02:14.400
which again will lead to errors or crashes because of doing this in C++.

40
00:02:14.880 --> 00:02:18.750
So then assuming that we felt the property, we can move on to supporting the projectile.

41
00:02:18.930 --> 00:02:24.420
For this, we want to make a temporary pointer to the a projectile based class named temp projectile.

42
00:02:25.580 --> 00:02:27.590
This will be equal to the get woad.

43
00:02:28.630 --> 00:02:31.540
Spoon actor of the type a projectile bass.

44
00:02:32.610 --> 00:02:36.360
And then in the Brace's, we have three different arguments required to be filled.

45
00:02:36.850 --> 00:02:41.520
Unfortunately, this seems to be one that the U.S. code doesn't provide snippet hints for.

46
00:02:41.610 --> 00:02:45.030
But I already know that we need a class type, which we already have.

47
00:02:45.030 --> 00:02:46.980
That's going to be our projectile class.

48
00:02:47.160 --> 00:02:52.290
So the thing that we want to spoil it then needs the location and the rotation for its initial spawn

49
00:02:52.290 --> 00:02:52.830
transform.

50
00:02:53.100 --> 00:02:55.830
So this is very similar to things that we've done in the past.

51
00:02:55.890 --> 00:03:02.550
So your challenge here is to complete the function by creating an F vector location named spawn location

52
00:03:02.670 --> 00:03:05.400
and an effort later named spawn rotation.

53
00:03:05.550 --> 00:03:10.660
You can get these by using the projectile spawn point component transforms using the ghetto functions.

54
00:03:10.890 --> 00:03:15.770
And if you're unsure how to do this, then maybe revisit some of the turret rotation functions where

55
00:03:15.780 --> 00:03:18.420
we've used this and retrieved those values in the past.

56
00:03:18.870 --> 00:03:23.380
So pause the video and complete the function by creating those variables.

57
00:03:24.960 --> 00:03:28.710
OK, so the first step was to create a new effector named spawn location.

58
00:03:30.450 --> 00:03:33.630
And this will be equal to the projecto spawn point location.

59
00:03:33.960 --> 00:03:40.440
Remember to get the location from a component we use to get to component location and then for the rotation,

60
00:03:40.440 --> 00:03:41.240
this is very similar.

61
00:03:41.250 --> 00:03:46.320
So we're going to create an effort later named spawn rotation, which will be equal to the projectile

62
00:03:46.320 --> 00:03:47.070
spawn point.

63
00:03:47.160 --> 00:03:49.710
But this time using the get component rotation.

64
00:03:51.240 --> 00:03:57.210
Then finally, we just want to replace the example text that I had here with the relevant variable types,

65
00:03:57.450 --> 00:04:03.330
so the location becomes the spawn location and the rotation becomes the spawn rotation and thus it.

66
00:04:03.360 --> 00:04:05.940
So spawning an actor is as simple as that.

67
00:04:06.720 --> 00:04:10.650
One extra step that we can take is to use our new temp projecto.

68
00:04:12.460 --> 00:04:16.660
And set the owner to be this basically passing in a reference of this class.

69
00:04:16.800 --> 00:04:19.660
The one spawning it as the new parents actor.

70
00:04:19.810 --> 00:04:24.010
This is going to help us with things a little bit later, like checking to ensure the projectile isn't

71
00:04:24.010 --> 00:04:28.270
able to collide with or damage the porn that is spawning it.

72
00:04:28.510 --> 00:04:34.180
And then the final step will be to return to the editor and compile these changes so that we can provide

73
00:04:34.240 --> 00:04:37.720
a projectile class to spawn and test the results.

74
00:04:38.290 --> 00:04:44.070
With that done, if we open the BP underscore porn tank and take a look for the new projecto class slot,

75
00:04:44.120 --> 00:04:47.200
I'm all fill this with the BP underscore projectile bass.

76
00:04:50.510 --> 00:04:53.320
We can do the same thing for the porn turret class.

77
00:04:53.540 --> 00:04:58.580
And again, just noticed that we're only being given the option to select either the projectile based

78
00:04:58.580 --> 00:05:04.460
class, the C++ version or the BP version of it, which is the result that we wanted from implementing

79
00:05:04.460 --> 00:05:05.660
the T subclass of.

80
00:05:05.960 --> 00:05:11.180
Then if we want to press play to test this, our left click to fire a few times with the tank and we

81
00:05:11.180 --> 00:05:14.720
can see that this is working nicely for the tank with the turret class.

82
00:05:14.750 --> 00:05:18.890
We seem to have a little bit of a problem here with the projectiles kind of hanging in the air because

83
00:05:18.950 --> 00:05:25.070
as soon as the projectile class is being spawned, it seems to be overlapping the other projectile classes,

84
00:05:25.070 --> 00:05:27.110
which means that the projectile movement component.

85
00:05:27.170 --> 00:05:31.910
So I'm being told to stop the movement, which is why we're getting this hanging feature kind of happening.

86
00:05:32.150 --> 00:05:36.440
And we can also see some problems from the spring up component that I mentioned a little while back

87
00:05:36.440 --> 00:05:42.560
in previous lectures as they're seeing the projectiles as collisions and moving the camera, which is

88
00:05:42.560 --> 00:05:45.410
just something I said that we'd leave in so that we could see the results.

89
00:05:45.440 --> 00:05:48.350
So it kind of makes sense if you see it happening again in the future.

90
00:05:48.740 --> 00:05:51.970
And we'll fix this when we get to the Project Tidey phase.

91
00:05:52.220 --> 00:05:56.390
For now, let's just fix the projectile issue, though, because that's going to be a much bigger problem,

92
00:05:56.390 --> 00:05:57.740
trying to play the game.

93
00:05:57.740 --> 00:05:59.390
Its objectives aren't moving around properly.

94
00:05:59.780 --> 00:06:05.120
So if we go to the turret blueprint, grab the projectile spawn point and we can just move this forward.

95
00:06:05.180 --> 00:06:09.390
Several units, I think 100 units away from the end of the turret seems pretty good here.

96
00:06:09.830 --> 00:06:14.240
This will just ensure that the collisions are not overlapping with the projectile when it's first spawned.

97
00:06:14.630 --> 00:06:19.250
Even with that done for the turret class, I still have a bit of a problem here because I've given it

98
00:06:19.340 --> 00:06:20.380
a really silly fire.

99
00:06:20.380 --> 00:06:20.670
Right?

100
00:06:20.840 --> 00:06:22.670
It's just firing far too fast.

101
00:06:22.880 --> 00:06:27.700
So if you did anything similar, I'm just going to go back and return to the turret class here.

102
00:06:27.860 --> 00:06:29.270
I don't lower this to something.

103
00:06:29.330 --> 00:06:32.570
There'll be a little bit more realistic for the player to be able to stay with anyway.

104
00:06:32.870 --> 00:06:34.700
And we can see that that's gonna be much better.

105
00:06:34.730 --> 00:06:40.400
So that's stopped the spawning over each other and all of the projectiles and firing the last few things

106
00:06:40.400 --> 00:06:44.020
would be things like addressing the projecto class, still just hanging around in the level.

107
00:06:44.300 --> 00:06:45.680
And we'll be doing that in the next lecture.

108
00:06:45.740 --> 00:06:51.260
When we look at assigning delegates to existing functions, which give us a trigger point so that we

109
00:06:51.260 --> 00:06:54.770
know when to destroy the projectile class.
