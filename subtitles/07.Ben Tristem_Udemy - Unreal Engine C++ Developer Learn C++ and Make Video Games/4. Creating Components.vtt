WEBVTT
1
00:00:04.360 --> 00:00:04.750
Everyone.

2
00:00:04.810 --> 00:00:05.770
And welcome back.

3
00:00:05.890 --> 00:00:10.840
In this lecture, we'll be looking at how we can add scene components to any class and how we can expose

4
00:00:10.840 --> 00:00:13.480
these back in the ED before getting started.

5
00:00:13.540 --> 00:00:19.900
I'm just going to organize our head a class little and drop all of the existing public content into

6
00:00:19.900 --> 00:00:21.510
a single public section.

7
00:00:21.610 --> 00:00:26.740
So I'm just copying and pasting this above and then removing the unused public section.

8
00:00:27.190 --> 00:00:32.290
First thing I want to do before adding all of the possible components to the bass classes is to really

9
00:00:32.290 --> 00:00:38.890
consider which will be universal and which will be specific to the tank or the TAAT A.I. classes.

10
00:00:39.220 --> 00:00:44.950
This will then allow us to define the child class specific components in the derived classes a little

11
00:00:44.950 --> 00:00:51.790
bit later and keep the hierarchy as clean as possible and the references and includes per class to a

12
00:00:51.790 --> 00:00:52.240
minimum.

13
00:00:52.780 --> 00:00:57.550
So to get started, we'll be placing all of our components inside of a private section.

14
00:00:57.580 --> 00:00:58.660
So go ahead and declare that.

15
00:00:58.660 --> 00:00:58.900
No.

16
00:00:59.500 --> 00:01:03.130
And the first thing we're going to need in both of the classes will be a U.

17
00:01:03.190 --> 00:01:09.730
Capsule component, which will act as the root components or the very top component in the hierarchy.

18
00:01:10.120 --> 00:01:16.180
And this is going to just be our general collision for the porn's and this is going to be a pointer

19
00:01:16.240 --> 00:01:17.590
named capsule comp.

20
00:01:18.050 --> 00:01:20.290
So capsule components suggest a simple collision.

21
00:01:20.680 --> 00:01:27.490
And this will act, as I said, the collision information for both of our PWN classes for this component

22
00:01:27.490 --> 00:01:30.140
type will also need to forward declare.

23
00:01:30.280 --> 00:01:33.610
So I'm going to do this just above the main class declaration.

24
00:01:34.150 --> 00:01:39.550
And in the previous section, I know that you've covered the includes and how to get the library locations.

25
00:01:39.790 --> 00:01:42.850
So for declarations are something you haven't come across before, though.

26
00:01:42.850 --> 00:01:48.250
These are just a way to keep the number of includes per class to a minimum, which will help us reduce

27
00:01:48.250 --> 00:01:49.360
the compiler times.

28
00:01:49.990 --> 00:01:55.360
The main difference between using an include and a forward declaration is that the include will allow

29
00:01:55.360 --> 00:02:01.390
access to the class that you're referencing to allow you to retrieve things like variables and cool

30
00:02:01.390 --> 00:02:03.340
functions within the other class.

31
00:02:03.670 --> 00:02:08.320
Whilst the four declaration will just make this class aware of the reference.

32
00:02:08.650 --> 00:02:13.960
So in general you tend to use the four declarations in the head of file for external classes just to

33
00:02:13.960 --> 00:02:18.820
let the compiler know that it doesn't need to freak out when it sees an unknown class reference.

34
00:02:19.000 --> 00:02:25.030
And you'll use the includes in the code file as this is where you'll be accessing the details of the

35
00:02:25.030 --> 00:02:25.870
other classes.

36
00:02:26.290 --> 00:02:32.530
Next then in our game, both of the turret and the tank classes will need to use static mesh components,

37
00:02:32.680 --> 00:02:35.800
one for the base match and one for the turret match.

38
00:02:35.920 --> 00:02:39.600
So this is going to be for the tank, the base that moves around for the turret.

39
00:02:39.670 --> 00:02:42.700
That will be the resting base mesh that it would just set on.

40
00:02:43.000 --> 00:02:44.890
And then both of them will have their own turret measures.

41
00:02:44.890 --> 00:02:51.260
That will be the one rotating around and acting as the location for the projectiles spawn from both

42
00:02:51.260 --> 00:02:52.780
of these, again, will be a pointer.

43
00:02:53.140 --> 00:02:57.700
One will be named the base mesh and the second will be our turrets match.

44
00:02:57.970 --> 00:03:02.650
Unlike the capsule component, the actor class will already have an understanding of what these static

45
00:03:02.650 --> 00:03:03.640
mesh component is.

46
00:03:03.970 --> 00:03:06.010
So we won't need to forward declare these.

47
00:03:06.610 --> 00:03:13.150
And finally, to act as an easily editable visual representation of where you want the projectile to

48
00:03:13.150 --> 00:03:16.720
be spawned from when fired, we'll be using a pointer to the U.

49
00:03:16.750 --> 00:03:17.670
Scene component.

50
00:03:18.070 --> 00:03:23.470
And the second component is just a collection of data, essentially, which also includes a transformer

51
00:03:23.470 --> 00:03:27.910
so that we have somewhere to visually represent the exporting location in the world.

52
00:03:28.360 --> 00:03:31.420
And we just named this one to projectile spawn point.

53
00:03:31.960 --> 00:03:35.170
And again, we shouldn't need to forward declare the same components here.

54
00:03:35.620 --> 00:03:40.570
Now, as you'll be familiar with from the previous section, all of the properties with the EU prefix

55
00:03:40.570 --> 00:03:46.030
like we have on all of our properties here, need to have a new property defined above them just as

56
00:03:46.030 --> 00:03:48.790
part of the unreal kind of syntax and workflow.

57
00:03:49.240 --> 00:03:50.320
Just to speed things up here.

58
00:03:50.560 --> 00:03:56.620
I'm going to use the Visual Studio code shortcut of holding the key and clicking on all of the lines

59
00:03:56.620 --> 00:03:59.840
where I want a new property and then just typing that right.

60
00:04:00.010 --> 00:04:01.930
And it will apply this to all of those separate lines.

61
00:04:02.230 --> 00:04:06.580
For the moment, we're just gonna leave these out there and move over to our code file so that we can

62
00:04:06.580 --> 00:04:12.280
create all of these components in the class, because at the moment, all we have is just a bunch of

63
00:04:12.280 --> 00:04:14.770
pointers to various components.

64
00:04:15.280 --> 00:04:18.220
To do this, we need to be inside of our constructor.

65
00:04:18.460 --> 00:04:21.550
We want to cool the create default sub object function.

66
00:04:21.790 --> 00:04:26.920
And then we do this by setting the component that we want to create and we'll start with our capsule

67
00:04:26.920 --> 00:04:28.810
component and create default.

68
00:04:28.810 --> 00:04:35.860
Sub object is just the function which will actually be creating and adding the component inside of our

69
00:04:35.860 --> 00:04:37.120
existing class.

70
00:04:37.270 --> 00:04:42.940
We say that the capsule comp is equal to create default sub object, followed by the angled brackets

71
00:04:43.030 --> 00:04:48.910
as this is expecting to take a class type and the class type is gonna be the same one that we've declared

72
00:04:48.940 --> 00:04:49.720
in the header file.

73
00:04:49.870 --> 00:04:51.370
So for this one, it will be the U.

74
00:04:51.430 --> 00:04:52.480
Capsule component.

75
00:04:52.960 --> 00:04:58.180
And then to complete this in parentheses, we just to find some text for this and provide the name of

76
00:04:58.180 --> 00:05:02.800
the component that we can set inside of a second set of perent.

77
00:05:02.880 --> 00:05:04.800
Seas and double quotation marks.

78
00:05:05.100 --> 00:05:06.870
I'm going to name this one capsule collider.

79
00:05:07.280 --> 00:05:11.910
So, like I mentioned, we want this to be at the top of the hierarchy or the root component.

80
00:05:12.030 --> 00:05:17.430
And because this is the first and only component that we've declared a real world class, this by default

81
00:05:17.520 --> 00:05:18.870
as the root components anyway.

82
00:05:19.140 --> 00:05:24.660
So just for sanity and to avoid any ambiguity in the future, we're just going to set the root component

83
00:05:24.660 --> 00:05:27.030
to be equal to our capsule component.

84
00:05:27.480 --> 00:05:32.010
And that's where you need to do to create a component in your C++ class.

85
00:05:32.430 --> 00:05:34.860
So we'll be doing the same now for our base match.

86
00:05:35.250 --> 00:05:40.480
So this will be base mash equal to create default sub object of type U.

87
00:05:40.620 --> 00:05:41.850
Static mesh component.

88
00:05:43.180 --> 00:05:45.640
And set the text to be named based Meche.

89
00:05:46.740 --> 00:05:51.120
This time, we want to make sure that the base measures placed correctly in the hierarchy.

90
00:05:51.570 --> 00:05:56.100
So we want the MASH to inherit the movement and the rotation of the captured component.

91
00:05:56.710 --> 00:06:01.000
That's what we're gonna be moving around the world when we add the movement functionality to do that.

92
00:06:01.080 --> 00:06:04.680
We call it the setup attachment function in the base match.

93
00:06:04.980 --> 00:06:07.890
And as this is a pointer, we use the arrow operator.

94
00:06:08.250 --> 00:06:13.290
This takes a single argument, which is just going to be the new parent component of the base match.

95
00:06:13.680 --> 00:06:18.240
And as we've already insured, our capsule component is the root component in this class.

96
00:06:18.570 --> 00:06:21.410
We can just pass in the root component as the argument.

97
00:06:21.780 --> 00:06:27.270
Then I'll just copy the base match, create code and paste this below for the turret match as it's using

98
00:06:27.270 --> 00:06:28.380
the same component type.

99
00:06:28.670 --> 00:06:34.090
What we need to do is change any of the text that is currently saying base mesh to be turret mesh.

100
00:06:34.410 --> 00:06:40.150
And then also change the name from base to turrets in the text section as well for the attachment.

101
00:06:40.170 --> 00:06:45.750
We're not going to be attaching this directly to the root component because we want the turret to follow

102
00:06:45.750 --> 00:06:51.000
any movement that the base match may take, because remember, this is being attached to the top of

103
00:06:51.000 --> 00:06:51.830
the base match.

104
00:06:52.230 --> 00:06:57.070
So instead we're going to want to say turret mesh set up attachment to the base mesh.

105
00:06:57.510 --> 00:06:59.700
Okay, so for the final one, has a quick challenge for you.

106
00:06:59.820 --> 00:07:01.510
See if you can take these same steps.

107
00:07:01.560 --> 00:07:03.180
But for the seam component.

108
00:07:03.660 --> 00:07:06.060
So I have the exact steps that you need to take on the screen.

109
00:07:06.070 --> 00:07:08.310
So just pause the video and give this one to go.

110
00:07:10.220 --> 00:07:13.160
Okay, so let's just check the results and go through this step by step.

111
00:07:13.190 --> 00:07:18.560
So we already know that to create the components, we just want to say that our project, our spawn

112
00:07:18.560 --> 00:07:22.420
point, is equal to the create default subject object of call.

113
00:07:22.990 --> 00:07:26.410
The sub point here was to ensure that we use the correct component type.

114
00:07:26.420 --> 00:07:33.050
And that, of course, is in the header file where we've declared this to be a type of you seen component.

115
00:07:33.320 --> 00:07:37.580
And then next I said to give the component in the name projectile spawn point, and that's going to

116
00:07:37.580 --> 00:07:41.600
go in to our text argument, same as we've done before with the other components.

117
00:07:41.900 --> 00:07:46.520
Finally, I just asked you to attach the projectile spawn point to the taht match.

118
00:07:46.670 --> 00:07:52.010
So, again, we're going to take our projectile spawn point and call the set up attachment, directing

119
00:07:52.010 --> 00:07:53.440
it to the target match.

120
00:07:53.720 --> 00:07:54.260
And that's it.

121
00:07:54.320 --> 00:07:59.630
So all of the components are now declared in the header and then created and implemented in the code

122
00:07:59.630 --> 00:07:59.930
file.

123
00:08:00.260 --> 00:08:04.970
The last thing that we need to do is add the include, which in this case is going to be the components

124
00:08:04.970 --> 00:08:06.740
forward slash capsule component.

125
00:08:07.020 --> 00:08:11.540
Take out the top of the code file before moving on to the next lecture.

126
00:08:11.690 --> 00:08:14.720
Let's compile this and check for any potential spelling errors.

127
00:08:14.990 --> 00:08:17.150
Otherwise, we're gonna be good to go for the next step.

128
00:08:17.360 --> 00:08:21.980
And again, as you're likely already to be familiar with, when you were making changes in the previous

129
00:08:21.980 --> 00:08:26.920
section, when you're working with any new implementations or changes in the head, a file is gonna

130
00:08:26.930 --> 00:08:31.910
be recommended that you have the unrelated to closed or at the very least, you close it and reload

131
00:08:31.910 --> 00:08:34.940
the project before hitting the compile in the editor.

132
00:08:35.150 --> 00:08:40.190
So I'm just reloaded my project and our recomposed is just to check for any potential spelling errors

133
00:08:40.510 --> 00:08:41.900
that were coming back successful.

134
00:08:42.050 --> 00:08:47.450
Some of the more experienced among you may have spotted an issue that's going to show when we create

135
00:08:47.510 --> 00:08:50.390
our blueprint class due to how we've left our U.

136
00:08:50.390 --> 00:08:51.020
Properties.

137
00:08:51.260 --> 00:08:56.900
We'll be looking at this and why we get the results that we do and also how to correct those results

138
00:08:57.290 --> 00:08:58.700
in the future lectures.

139
00:08:59.060 --> 00:09:04.460
But I just wanted to have this visual representation to demonstrate the error and what to look out for

140
00:09:04.610 --> 00:09:07.160
when you come back, which is why for the moment, we've left our U.

141
00:09:07.160 --> 00:09:08.660
Properties completely blank.
