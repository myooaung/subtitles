1
00:00:04,580 --> 00:00:10,990
In this lecture, we are going to be putting together a player controller that will receive information

2
00:00:11,020 --> 00:00:12,840
that the game has ended.

3
00:00:12,930 --> 00:00:19,270
From the game mode and will create this restarting behavior that after five seconds reloads the level

4
00:00:19,390 --> 00:00:20,920
after the player has died.

5
00:00:21,190 --> 00:00:22,540
Let's dive in and see how it's done.

6
00:00:23,560 --> 00:00:29,020
So when the game is indeed over, we need to notify at player controller.

7
00:00:29,050 --> 00:00:35,650
And we also need to have a player controller in our C++ so that we can implement the behavior of allowing

8
00:00:35,650 --> 00:00:37,840
us to restart the level and such.

9
00:00:38,410 --> 00:00:44,200
So the first thing to do is it when this point is killed, first of all, we're just logging indiscriminantly.

10
00:00:44,530 --> 00:00:48,190
We do want to check whether or not the game is over.

11
00:00:48,280 --> 00:00:50,410
Now, there are two scenarios.

12
00:00:50,410 --> 00:00:52,570
One is where we win and one is where we lose.

13
00:00:52,930 --> 00:00:57,100
The lose is the first one I'm going to tackle because it's easiest if the pawn killed is the player

14
00:00:57,130 --> 00:00:57,670
you lose.

15
00:00:57,730 --> 00:00:58,210
That's it.

16
00:00:58,270 --> 00:01:02,950
You might choose to have multiple lives it with different iterations of this game mode.

17
00:01:03,190 --> 00:01:04,780
But I'm not going to be doing that.

18
00:01:04,930 --> 00:01:06,160
I'm just gonna have a single life.

19
00:01:06,190 --> 00:01:07,450
If you die, game over.

20
00:01:07,600 --> 00:01:08,710
You might want to restart.

21
00:01:09,460 --> 00:01:13,510
So how do we check if this pawn is a player controller?

22
00:01:13,840 --> 00:01:14,980
Well, that's pretty straightforward.

23
00:01:15,010 --> 00:01:19,720
We can just do a cast so we can do a cast to a player controller.

24
00:01:20,140 --> 00:01:22,560
And for the pawn killed.

25
00:01:22,900 --> 00:01:25,350
And then if this is not null.

26
00:01:25,360 --> 00:01:26,860
So let's take the pointer.

27
00:01:26,890 --> 00:01:28,750
A player controller pointer.

28
00:01:28,810 --> 00:01:34,300
Call it the player controller and store the results of that pointer in here.

29
00:01:34,720 --> 00:01:38,140
And we're going to say basically, if this is not.

30
00:01:38,140 --> 00:01:38,480
No.

31
00:01:39,010 --> 00:01:45,580
So if the player controller is not a null pointer, then we know that it's the player that's died.

32
00:01:45,760 --> 00:01:47,350
And that is game over for the player.

33
00:01:47,890 --> 00:01:52,090
So what we want to do is call on that player controller method.

34
00:01:52,090 --> 00:01:57,490
We've already hinted at the fact that there is a game has ended method.

35
00:01:57,550 --> 00:01:58,450
Let's have a look at this.

36
00:01:58,510 --> 00:02:02,940
If we do control P and have a look at the player controller to H.

37
00:02:03,520 --> 00:02:07,000
And we can look for a game has ended.

38
00:02:07,750 --> 00:02:10,750
You can see, sure enough, there is a virtual method here called game has ended.

39
00:02:11,380 --> 00:02:14,800
And you can see there is an end game focus.

40
00:02:14,830 --> 00:02:17,050
What actor should we focus on in the end game?

41
00:02:17,380 --> 00:02:19,810
By default, this is no point and that's probably what we're going to use.

42
00:02:20,950 --> 00:02:22,870
And then we're gonna say, is this the winner?

43
00:02:22,960 --> 00:02:28,100
Basically, you've got to let the player control and know whether or not they have won.

44
00:02:28,570 --> 00:02:31,690
And that's very straightforward, say, in this case.

45
00:02:31,870 --> 00:02:32,860
No, they haven't.

46
00:02:33,370 --> 00:02:35,230
So we're going to do a play controller.

47
00:02:35,590 --> 00:02:38,530
Arrow game has ended.

48
00:02:39,530 --> 00:02:45,080
Then I'm going to put no points for the end game focus because we don't really need that feature.

49
00:02:45,950 --> 00:02:49,280
And then is winner, it's just simply going to be false.

50
00:02:49,490 --> 00:02:53,390
This is not the winning play controller because it's the one that just died.

51
00:02:54,370 --> 00:02:56,950
So it's time for a little bit of a challenge for you to implement.

52
00:02:56,970 --> 00:02:58,960
Game has ended in a play.

53
00:02:58,980 --> 00:02:59,520
Controller.

54
00:02:59,910 --> 00:03:02,760
That means we need to create a C++ play controller.

55
00:03:03,240 --> 00:03:03,630
Great.

56
00:03:03,690 --> 00:03:09,330
It's a blueprint subclass sporn, that blueprint subclass by default from our game mode.

57
00:03:09,900 --> 00:03:12,510
And then you want to go ahead and override.

58
00:03:12,600 --> 00:03:17,970
The game has ended and put a log message in there to check that we are indeed getting that game has

59
00:03:18,030 --> 00:03:19,650
ended at the right time.

60
00:03:20,040 --> 00:03:21,000
Pause video and have a go.

61
00:03:21,350 --> 00:03:22,110
Hey, welcome back.

62
00:03:22,440 --> 00:03:29,730
So step one, create that C++ play controller, create a new C++ class, then go and look for, let's

63
00:03:29,730 --> 00:03:30,720
see, play controller.

64
00:03:30,820 --> 00:03:34,710
Next, we're gonna call this the shooter, player, controller.

65
00:03:34,770 --> 00:03:35,940
Go ahead and create that class.

66
00:03:36,120 --> 00:03:44,100
Once that's done, we want to go over to our blueprints and creates a blueprint class that is based

67
00:03:44,100 --> 00:03:44,520
off of it.

68
00:03:44,610 --> 00:03:47,880
So we want the shooter, player, controller as the base.

69
00:03:47,930 --> 00:03:48,600
It's like that.

70
00:03:48,680 --> 00:03:53,100
And we're gonna call it BP underscore shooter, player, controller.

71
00:03:53,280 --> 00:03:57,570
This is not currently really needed, but later down the line, we're going to want to hook up some

72
00:03:57,570 --> 00:03:59,220
UI assets to this play controller.

73
00:03:59,220 --> 00:04:00,330
So we'll have it there.

74
00:04:00,330 --> 00:04:00,750
Ready.

75
00:04:01,350 --> 00:04:07,910
Then we're gonna get to the BP KMEL game mode and dock that in because we want to change the default

76
00:04:07,920 --> 00:04:11,520
player controller class from the player controller to our BP.

77
00:04:11,520 --> 00:04:13,020
Underscore Chuter player controller.

78
00:04:13,530 --> 00:04:13,890
Cool.

79
00:04:14,550 --> 00:04:16,320
Then we want to override.

80
00:04:16,500 --> 00:04:18,030
Our game has ended.

81
00:04:18,690 --> 00:04:22,050
So let's see if we go to the player control or h.

82
00:04:22,110 --> 00:04:24,390
We can see that this is in the public section.

83
00:04:24,670 --> 00:04:25,380
Here's the signature.

84
00:04:25,380 --> 00:04:25,990
Let's copy it.

85
00:04:26,010 --> 00:04:28,740
Go over into Ashu to play controller dot h.

86
00:04:29,640 --> 00:04:31,200
And create public.

87
00:04:32,180 --> 00:04:35,600
To that virtual void game has ended.

88
00:04:35,720 --> 00:04:36,170
Cool.

89
00:04:36,290 --> 00:04:40,040
And we've got to override already because that was clearly being overridden from somewhere to.

90
00:04:41,330 --> 00:04:45,340
And then what we can do is we can go ahead and implement it.

91
00:04:45,380 --> 00:04:46,120
Control shift P.

92
00:04:47,030 --> 00:04:48,560
We want to call to super remember.

93
00:04:49,950 --> 00:04:52,080
And we want to game has ended.

94
00:04:52,540 --> 00:04:52,890
So.

95
00:04:53,920 --> 00:05:00,200
And we want to pass in the end game focus and the B is winner.

96
00:05:00,690 --> 00:05:01,710
And then we want to log.

97
00:05:01,890 --> 00:05:02,580
So you log.

98
00:05:03,030 --> 00:05:04,080
He's my macro there.

99
00:05:04,830 --> 00:05:07,170
We have finished.

100
00:05:07,230 --> 00:05:08,470
It's going to be the log.

101
00:05:08,500 --> 00:05:10,200
Message coming out at the end.

102
00:05:10,410 --> 00:05:12,690
So let's compile and see whether that's working.

103
00:05:12,950 --> 00:05:14,310
Going to get to the output log.

104
00:05:14,790 --> 00:05:15,330
Hit play.

105
00:05:15,600 --> 00:05:18,330
Go and get killed, basically.

106
00:05:18,490 --> 00:05:19,980
Health is slow going down.

107
00:05:20,820 --> 00:05:23,460
And then we should see a message.

108
00:05:23,550 --> 00:05:24,480
Are we getting the message?

109
00:05:24,510 --> 00:05:24,900
No.

110
00:05:24,990 --> 00:05:25,900
So let's have a look.

111
00:05:25,920 --> 00:05:27,210
What's the play controller here?

112
00:05:27,240 --> 00:05:27,810
BP.

113
00:05:27,870 --> 00:05:28,590
Underscore.

114
00:05:29,240 --> 00:05:29,660
Shoot.

115
00:05:30,470 --> 00:05:32,670
Player control appears to be the correct one.

116
00:05:33,060 --> 00:05:35,370
We've got our override game has ended.

117
00:05:35,700 --> 00:05:37,230
Now here I spot a bug.

118
00:05:37,290 --> 00:05:41,190
Now, that is something that some of you may have noticed and I've been shouting at the screen about

119
00:05:41,760 --> 00:05:46,520
is that here we have got our player controller that we are casting to.

120
00:05:46,560 --> 00:05:49,530
And I'm getting that confused with the player's actual porn.

121
00:05:50,010 --> 00:05:58,020
So what we want to do here is we want to say get the controller of the porn that was killed so porn

122
00:05:58,020 --> 00:06:02,510
killed DOT, get controller error to arrogate controller.

123
00:06:02,600 --> 00:06:06,060
And then we want to cast that to the player controller.

124
00:06:06,210 --> 00:06:08,580
And if that is now OK, that should work.

125
00:06:08,610 --> 00:06:10,710
So let's go ahead and try that out.

126
00:06:10,800 --> 00:06:12,090
Go ahead and hit play.

127
00:06:12,900 --> 00:06:13,800
Casscells killed again.

128
00:06:15,770 --> 00:06:18,820
And this time, we also don't get any message.

129
00:06:19,130 --> 00:06:21,170
And this time it's for a subtle reason.

130
00:06:21,680 --> 00:06:26,900
That is because we're detaching from the controller before we call this porn killed.

131
00:06:26,930 --> 00:06:30,160
So when it tries to get the controlling porn, that's actually null.

132
00:06:30,260 --> 00:06:32,590
There is no controlling porn anymore.

133
00:06:32,930 --> 00:06:35,870
So we need to do this notification just before we do.

134
00:06:36,020 --> 00:06:42,230
The detaching from the controller includes moving up the line that gets hold of our game mode.

135
00:06:42,260 --> 00:06:43,400
I didn't think that would matter.

136
00:06:43,880 --> 00:06:45,710
But now that I actually think about it.

137
00:06:45,740 --> 00:06:47,030
Yes, of course it does.

138
00:06:47,390 --> 00:06:49,970
So let's go over in it to our level and play.

139
00:06:50,600 --> 00:06:51,740
Let's go and get shot at.

140
00:06:52,190 --> 00:06:56,860
And once that is done, you can see that we have finished gets printed as we want.

141
00:06:56,980 --> 00:06:59,020
So we had a few hiccups along the way.

142
00:06:59,030 --> 00:07:01,460
Not your fault if he didn't get that in the challenge.

143
00:07:01,850 --> 00:07:03,740
You've done everything else right up to that point.

144
00:07:03,740 --> 00:07:04,760
That is great.

145
00:07:05,180 --> 00:07:08,780
So hopefully maybe you had a go at debugging that.

146
00:07:08,810 --> 00:07:10,850
But don't worry if you got stuck on those things.

147
00:07:11,450 --> 00:07:17,690
The final thing I wanted to do here is to actually restart the game on a timer.

148
00:07:18,230 --> 00:07:23,930
Now, the way we can do this is fairly straightforward because the player controller to H actually has

149
00:07:23,990 --> 00:07:25,940
a restart method.

150
00:07:25,970 --> 00:07:30,200
So if we go and have a look at this, it should be a restart level.

151
00:07:30,230 --> 00:07:35,570
That's the one that we want to be calling and we want to do this on a timer.

152
00:07:35,630 --> 00:07:42,530
So we've used timers before to do repeating stuff, but we can also use it just to delay an action by

153
00:07:42,530 --> 00:07:43,790
a certain amount.

154
00:07:44,270 --> 00:07:46,640
So I'm going to go to the shoot to play controller Dot H.

155
00:07:46,700 --> 00:07:50,000
And create a private U property in here.

156
00:07:50,930 --> 00:07:56,530
Private can be you property, which is edits anywhere.

157
00:07:58,670 --> 00:08:02,660
Float, there is going to be the restart delay.

158
00:08:03,180 --> 00:08:05,510
You can see why we need a blueprint base for this already.

159
00:08:05,960 --> 00:08:08,180
I'm going to give it a five second delay.

160
00:08:08,750 --> 00:08:15,100
Then I'm gonna go over into the C++ and we're going to want to do a get timer.

161
00:08:15,610 --> 00:08:16,730
Well, timer manager.

162
00:08:17,780 --> 00:08:19,700
And then we can do on that.

163
00:08:20,000 --> 00:08:21,890
Then we need to include.

164
00:08:21,920 --> 00:08:23,880
So hash include.

165
00:08:24,200 --> 00:08:27,800
And it's going to be the timer manager dot h.

166
00:08:28,560 --> 00:08:32,060
Then we should be able to use the dot operator because the return type here is a reference.

167
00:08:32,660 --> 00:08:35,270
And we're going to do a set timer.

168
00:08:35,510 --> 00:08:38,140
And in here we need to pass in a timer handle.

169
00:08:38,180 --> 00:08:40,610
So in the private section, that's going create one.

170
00:08:40,630 --> 00:08:42,820
This could be an F timer handle.

171
00:08:43,070 --> 00:08:46,460
I'll call it the restart timer like.

172
00:08:46,490 --> 00:08:51,110
So then that is going to be the handle that we pass into our set timer.

173
00:08:51,380 --> 00:08:57,830
The next thing we need on the fifth signature here is actually to have the object that we want to cool

174
00:08:57,830 --> 00:08:58,910
on, which is just gonna be this.

175
00:08:59,690 --> 00:09:05,060
And then there's going to be, I think should be just the method itself.

176
00:09:05,690 --> 00:09:08,300
So we can do that by doing ampersand.

177
00:09:08,360 --> 00:09:12,860
And then it's actually the method, the restart level method, which we want to call on.

178
00:09:12,920 --> 00:09:16,160
That was defined on the a player controller.

179
00:09:16,220 --> 00:09:17,690
So a player controller.

180
00:09:19,350 --> 00:09:26,370
Colon, colon, restart level, and then we just need to pass in the delay, which we have already defined

181
00:09:26,790 --> 00:09:27,990
as the restart delay.

182
00:09:28,800 --> 00:09:31,860
So do that, put a semicolon on the end there.

183
00:09:32,430 --> 00:09:36,600
And hopefully we should get ourselves restarting after five seconds.

184
00:09:37,020 --> 00:09:41,670
Now, got to make the testing a little bit easier by opening up our rifle and making it just a little

185
00:09:41,670 --> 00:09:42,520
bit more lethal.

186
00:09:42,540 --> 00:09:46,200
So I'm going to go to the defaults, do the damage at 50.

187
00:09:46,260 --> 00:09:49,680
So we'll get killed with two shots, go and hit play.

188
00:09:50,790 --> 00:09:52,050
Get ourselves killed quickly.

189
00:09:53,460 --> 00:10:00,150
And then after five seconds, hopefully we should restart the level we restart and we're back in the

190
00:10:00,150 --> 00:10:02,910
level, so our timer is working as we expect.

191
00:10:03,210 --> 00:10:06,060
Now, obviously, there's not much indication that the level this is going to happen.

192
00:10:06,060 --> 00:10:09,590
So we're going to look at UI in the next lecture's.

193
00:10:09,720 --> 00:10:10,270
I'll see you there.
