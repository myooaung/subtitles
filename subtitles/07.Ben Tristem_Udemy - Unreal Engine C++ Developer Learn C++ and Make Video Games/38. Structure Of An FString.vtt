WEBVTT
1
00:00:04.170 --> 00:00:05.940
Hello everybody and welcome back.

2
00:00:05.940 --> 00:00:09.610
In this lecture we're going to talk about the structure of a string.

3
00:00:09.660 --> 00:00:16.980
Now what the strings and arrays have in common with a string is a group of characters and we store those

4
00:00:16.980 --> 00:00:18.720
characters in an array.

5
00:00:18.720 --> 00:00:21.510
That group of characters will be an array.

6
00:00:21.600 --> 00:00:24.090
Now strings are varying in length.

7
00:00:24.090 --> 00:00:25.380
This is important.

8
00:00:25.380 --> 00:00:27.390
It'll become more important later on as well.

9
00:00:27.390 --> 00:00:33.120
When we start talking about memory management and how strings would take up a varying amounts of memory

10
00:00:33.120 --> 00:00:35.880
depending on how long they are.

11
00:00:36.120 --> 00:00:41.000
And as I'm alluding to here a string is simply an array of characters.

12
00:00:41.190 --> 00:00:45.290
And if string is a T array of T cha.

13
00:00:45.410 --> 00:00:51.330
Now these specifically are just the keywords that we're going to be using in unreal now let's have a

14
00:00:51.330 --> 00:00:54.480
closer look at our f string hidden word.

15
00:00:54.600 --> 00:00:57.060
We've initialized it to cakes.

16
00:00:57.060 --> 00:01:03.570
Now if we were to evaluate the length for that by go in here and word dot L E N and then our parentheses

17
00:01:03.730 --> 00:01:11.010
we will get back five because what that does is it doesn't include the null terminating character at

18
00:01:11.010 --> 00:01:12.450
the end.

19
00:01:12.450 --> 00:01:14.690
Let's have a look at how this would be.

20
00:01:14.760 --> 00:01:20.030
So it actually has six characters in it that backslash zero.

21
00:01:20.040 --> 00:01:22.370
That that is the end of that string.

22
00:01:22.380 --> 00:01:26.940
So it knows where to where that string starts and where it stops.

23
00:01:26.940 --> 00:01:30.630
Now when you're counting you actually starts counting from zero.

24
00:01:30.630 --> 00:01:32.520
Now this is an important concept.

25
00:01:32.550 --> 00:01:35.100
It's like an offset of minus one.

26
00:01:35.100 --> 00:01:42.180
So if we wanted to return the letter C from cakes we would have to access Element Zero of our character

27
00:01:42.240 --> 00:01:48.350
array or in this case Element Zero of our f string if we were to return element three of the hidden

28
00:01:48.360 --> 00:01:48.680
word.

29
00:01:48.690 --> 00:01:54.870
It wouldn't be k obviously that's the third but element 3 is in fact the fourth letter of air so it

30
00:01:54.870 --> 00:01:57.680
would return the character E.

31
00:01:57.720 --> 00:02:04.740
Now this point it's worth mentioning that if we try to access a hidden word elements of five or greater

32
00:02:05.010 --> 00:02:11.850
it will crash unreal even if it did work we would be accessing something outside the memory allocated

33
00:02:11.850 --> 00:02:14.130
to hit and words would be complete garbage.

34
00:02:14.280 --> 00:02:16.490
But it will crash on real.

35
00:02:16.500 --> 00:02:17.470
So just be careful.

36
00:02:17.490 --> 00:02:24.240
Now if we have a look at this statement here we have a concept teacher called array of characters and

37
00:02:24.240 --> 00:02:29.370
we can see this variable name has square brackets on it that indicates it is in array.

38
00:02:29.370 --> 00:02:35.410
Now we can put a number in there and declare straightaway how large this array will be.

39
00:02:35.460 --> 00:02:39.570
That's quite error prone as it is very easy to forget the normal character.

40
00:02:39.570 --> 00:02:44.190
So we're going to leave it as it is because we're immediately assigning it on the same lines as not

41
00:02:44.190 --> 00:02:48.150
a chance of any other code manipulating this to cakes.

42
00:02:48.260 --> 00:02:54.270
So is automatically going to be an array of characters that is six in length for us.

43
00:02:54.270 --> 00:03:00.120
Now you notice at the beginning here we've got something called const now const is simply a promise

44
00:03:00.150 --> 00:03:05.120
that we won't change any of the elements within our array.

45
00:03:05.220 --> 00:03:10.440
So it will now be set to cakes and element 0 will be see forever more.

46
00:03:10.500 --> 00:03:16.430
Now that can be overridden and we'll talk about const in more detail later on.

47
00:03:16.530 --> 00:03:24.240
Now whether it's a concept t char for our array or whether it's a string itself it's a promise not to

48
00:03:24.240 --> 00:03:31.930
change any of its Okay everybody let's go ahead and find where we can start typing in our code.

49
00:03:32.000 --> 00:03:36.200
I think our set up game function is going to be the place to do it.

50
00:03:36.230 --> 00:03:41.260
This is what appears immediately when we go ahead and press play over and on real.

51
00:03:41.270 --> 00:03:42.890
So stop playing with things here.

52
00:03:42.980 --> 00:03:48.710
Now before we start creating our own little array what I'd like to do is show you what happens if we

53
00:03:48.710 --> 00:03:52.580
hover overhead and word we can see that it's an F string.

54
00:03:52.580 --> 00:03:58.790
Now if we hover over cakes we can see that it's a constant character array of six in length that's been

55
00:03:58.790 --> 00:04:02.000
set to cakes and this is where you'll go.

56
00:04:02.030 --> 00:04:04.550
As I alluded to earlier in the slides.

57
00:04:04.550 --> 00:04:05.630
Well that's only five.

58
00:04:06.080 --> 00:04:06.380
OK.

59
00:04:06.410 --> 00:04:09.140
So let's start off with our keyword concept.

60
00:04:09.140 --> 00:04:13.120
We'll cover this in more detail as we start needing to use it.

61
00:04:13.140 --> 00:04:19.220
Our costs can apply to many things in this case it just means we promise not to alter the array in the

62
00:04:19.220 --> 00:04:21.560
future during its lifetime.

63
00:04:21.560 --> 00:04:23.240
So in this case is a concept.

64
00:04:23.240 --> 00:04:29.780
Now we could just use char in this point to say character but I'll do this first and then we'll change

65
00:04:29.780 --> 00:04:31.610
it to a T char in a moment.

66
00:04:31.610 --> 00:04:32.800
We need to give it a name.

67
00:04:32.800 --> 00:04:38.630
I'm going to use H W and then we need to create an a race or tell it that it's an array with the square

68
00:04:38.630 --> 00:04:39.500
brackets.

69
00:04:39.500 --> 00:04:40.910
Now we cannot leave it like this.

70
00:04:40.970 --> 00:04:42.290
It's incomplete.

71
00:04:42.290 --> 00:04:45.280
We also can't just assign a value of zero.

72
00:04:45.470 --> 00:04:52.630
So we cannot here just say equals something to fill in later on that would throw us a wobbly.

73
00:04:52.730 --> 00:04:57.630
However if we were to type in cakes here that's it's gone and set.

74
00:04:57.680 --> 00:05:08.870
If we were then to go ahead and look at h w we can see it's a constant character array that set to cake's

75
00:05:09.330 --> 00:05:10.140
really useful.

76
00:05:10.470 --> 00:05:14.010
Now let's change this out to a teacher.

77
00:05:14.010 --> 00:05:21.120
It's not going to like that because now it's expecting this to be wrapped within our text macro.

78
00:05:21.270 --> 00:05:22.110
That's important.

79
00:05:22.110 --> 00:05:24.300
Without that that will fail.

80
00:05:24.300 --> 00:05:24.960
So there we go.

81
00:05:24.960 --> 00:05:26.230
We've got everything sorted here.

82
00:05:26.310 --> 00:05:33.780
Now when we hover over h w we can see if it's a constant t chart array set to H W and we can see it

83
00:05:33.780 --> 00:05:35.410
set to l cakes.

84
00:05:35.550 --> 00:05:38.430
And you don't need to worry about that at the moment.

85
00:05:38.700 --> 00:05:43.160
So there we go we've got ourselves the array of characters sets.

86
00:05:43.180 --> 00:05:44.700
Okay so just for fun.

87
00:05:44.700 --> 00:05:52.380
What you could do in this instance add to build up an array of characters is the following as well so

88
00:05:52.380 --> 00:05:58.650
we're going to take what we've already got written here but you can literally pop in each character

89
00:05:59.070 --> 00:06:01.010
individually like so.

90
00:06:01.110 --> 00:06:05.750
But we need to tell it it's an array so we need to pop it in some squiggly brackets.

91
00:06:05.760 --> 00:06:10.200
Now we'll be dealing with creating our own array later on as well.

92
00:06:10.200 --> 00:06:13.140
But for the moment we can puppets in like this.

93
00:06:13.140 --> 00:06:17.880
And then we can keep adding more and more letters to our array.

94
00:06:17.880 --> 00:06:23.370
So here for instance normally I'd advise against copying and pasting but here for instance it's gonna

95
00:06:23.400 --> 00:06:25.110
save us quite a bit of time.

96
00:06:25.170 --> 00:06:30.420
We can go against each of these and change it out for cakes like so.

97
00:06:30.420 --> 00:06:35.760
But in this particular example providing we actually include the commas in this.

98
00:06:35.880 --> 00:06:39.360
So the danger of cutting and pasting but we need one more in here.

99
00:06:39.360 --> 00:06:42.990
We also need the null character at the end.

100
00:06:43.020 --> 00:06:45.780
Otherwise it won't be strictly true and won't work.

101
00:06:45.810 --> 00:06:49.550
So that's another example of how we can build up an array.

102
00:06:49.590 --> 00:06:55.350
Now we'll be building our own array of words that we will assess and add into the game later wrong in

103
00:06:55.350 --> 00:06:56.280
the section.

104
00:06:56.280 --> 00:06:58.620
So we get to play with arrays in a bit more detail.

105
00:06:59.040 --> 00:07:04.120
But for the moment let's dive back into how we grab elements of this array.

106
00:07:04.350 --> 00:07:07.490
So let's go ahead here and have a look.

107
00:07:07.770 --> 00:07:09.300
Let's get rid of.

108
00:07:09.300 --> 00:07:12.980
Line 40 and let's have a look at printing out.

109
00:07:13.020 --> 00:07:17.070
Let's go ahead here and print line text macro.

110
00:07:17.070 --> 00:07:25.500
Let's say here character one of the hidden word is.

111
00:07:25.500 --> 00:07:30.100
And then we're going to need a new format specified in this case percentage see.

112
00:07:30.480 --> 00:07:32.650
Now we need to assign something here.

113
00:07:32.820 --> 00:07:39.630
And I'd like you to pause for a second on the video and think what you might type in here to get character

114
00:07:39.630 --> 00:07:41.270
one of the hidden word

115
00:07:44.020 --> 00:07:44.290
okay.

116
00:07:44.290 --> 00:07:45.460
Welcome back.

117
00:07:45.460 --> 00:07:52.840
Now how many of you thought it might be in this case we will use hidden word then our square brackets

118
00:07:53.080 --> 00:07:55.110
followed by zero.

119
00:07:55.300 --> 00:08:01.990
Now all being well what this should do is print outs the first character which is a C..

120
00:08:02.050 --> 00:08:08.620
Now finally what I'm going to do here is we're also going to print out a character from r h w character

121
00:08:08.680 --> 00:08:13.540
array and let's go ahead and change this to something like plums instead.

122
00:08:13.630 --> 00:08:22.900
And then we can go ahead and print line text macro and then the let's go for the fourth.

123
00:08:22.900 --> 00:08:27.120
So we're looking for the M in this case of the fourth character.

124
00:08:28.500 --> 00:08:36.570
Of H W is that we need our format specify the new one we've learnt today percentage C and then we're

125
00:08:36.570 --> 00:08:42.920
going to do H W and then not a parentheses but in fact square brackets here.

126
00:08:43.020 --> 00:08:53.670
Now that needs to be element 3 and once we've done that this should print out the letter M and I forgot

127
00:08:53.790 --> 00:08:54.440
to comment.

128
00:08:54.450 --> 00:08:55.400
That's out.

129
00:08:55.410 --> 00:08:56.300
Okay.

130
00:08:56.310 --> 00:08:58.230
So now we've done that we've saved our work.

131
00:08:58.230 --> 00:09:05.910
Let's go over into unreal compiler code and what we should find is that it will print out the letter

132
00:09:05.910 --> 00:09:12.870
C we have a look quickly our code again prints out the letter M and then because we are printing the

133
00:09:12.870 --> 00:09:18.600
line here are debug lines saying what the hidden word is after it's printed out all those instructions

134
00:09:18.600 --> 00:09:22.100
is also going to print out the hidden word just underneath.

135
00:09:22.230 --> 00:09:24.010
So let's go ahead.

136
00:09:24.060 --> 00:09:26.400
Press play and here we go.

137
00:09:26.400 --> 00:09:29.830
The hidden word is C the fourth character is m.

138
00:09:29.880 --> 00:09:31.240
This is good.

139
00:09:31.290 --> 00:09:33.390
This is exactly what we want to be able to do.

140
00:09:33.390 --> 00:09:38.960
We can now reach into our code and pull out specific characters.

141
00:09:38.970 --> 00:09:46.200
Now whilst we do have to use values that are integers within the square brackets we can use code to

142
00:09:46.200 --> 00:09:51.390
generate those integers not just have to type them in manually which is really useful.

143
00:09:51.480 --> 00:09:55.190
And that's going to come in a lot of use in a couple of lectures time.

144
00:09:55.320 --> 00:10:02.280
But for now now that we have a rough idea of how we can assess individual characters of an F string

145
00:10:02.400 --> 00:10:11.910
or indeed an array of characters it's time for your challenge Okay so your challenge is to create the

146
00:10:12.000 --> 00:10:16.100
is Isiah Graham function that's going to start doing the checking now.

147
00:10:16.130 --> 00:10:19.650
At this stage I'd only like you to focus on the pseudo coding.

148
00:10:19.650 --> 00:10:20.790
However it's good.

149
00:10:20.790 --> 00:10:22.880
At the end to return the value.

150
00:10:22.880 --> 00:10:28.320
True because then it does mean that our code will operate even though the rest of it will probably be

151
00:10:28.320 --> 00:10:29.400
commented out.

152
00:10:29.970 --> 00:10:33.330
So create the is Isiah Graham function.

153
00:10:33.390 --> 00:10:36.820
Now what would you pass into the is Isiah Graham.

154
00:10:36.840 --> 00:10:41.550
Think about that when you go ahead and create your it's the ground function.

155
00:10:41.700 --> 00:10:48.510
Just a reminder here it will return a boolean and pseudocode the process that we will go through in

156
00:10:48.510 --> 00:10:52.560
order to check the F string characters against one another.

157
00:10:52.560 --> 00:10:57.920
Now you may find it beneficial at this point it's actually write down how you do it manually.

158
00:10:57.980 --> 00:11:03.630
Step away from the computer perhaps even write the characters down and draw some lines between them

159
00:11:03.900 --> 00:11:06.720
working out how you'd assess one against the other.

160
00:11:06.960 --> 00:11:12.630
And then of course there's another layer to this because once you've checked the first character against

161
00:11:12.630 --> 00:11:15.990
all of the others you need to check the next character.

162
00:11:15.990 --> 00:11:21.150
So when we get to creating the loop for this it will actually be a loop within a loop because we're

163
00:11:21.150 --> 00:11:26.910
going to iterate around all of the letters of either our hidden word or the guess that the player has

164
00:11:26.910 --> 00:11:28.140
made anyway.

165
00:11:28.260 --> 00:11:33.780
Go ahead now and pseudocode up your is ISO ground function and make sure you put all of the other bits

166
00:11:33.870 --> 00:11:36.660
in that are necessary for this function to work.

167
00:11:36.660 --> 00:11:38.610
Pulls the video now and give that a go

168
00:11:41.610 --> 00:11:43.010
Okay everybody Welcome back.

169
00:11:43.050 --> 00:11:48.450
Let's go ahead now hop on over into V.S. code and start pseudo coding or resize the ground function

170
00:11:51.220 --> 00:11:57.760
OK so back over MVS code I'm gonna go to my head a file first of all and pop in here a boo.

171
00:11:57.870 --> 00:12:01.930
So that's one thing to remember here is returning something.

172
00:12:01.990 --> 00:12:07.460
It's our first function that's returning and is Isiah Graham is going to be its name.

173
00:12:07.470 --> 00:12:11.070
Now I'm not sure what I'm going to be passing into it's at the moment.

174
00:12:11.340 --> 00:12:15.610
However once I've worked that's how I can give it a specific name here.

175
00:12:15.660 --> 00:12:19.500
Now it may end up being just like process gas up here.

176
00:12:19.500 --> 00:12:25.500
If I think I think it's probably going to be the case our code is eventually going to get this working

177
00:12:25.500 --> 00:12:25.860
again.

178
00:12:25.860 --> 00:12:28.070
So let's go and bring this out now.

179
00:12:28.180 --> 00:12:29.950
Here it is.

180
00:12:29.940 --> 00:12:34.550
I Graham that is not quite right yet.

181
00:12:34.590 --> 00:12:37.410
We're going to be calling a function here.

182
00:12:37.470 --> 00:12:42.150
So we're going to be passing this function into this if statement and that will basically mean that

183
00:12:42.150 --> 00:12:44.900
the function is either going to return true or false.

184
00:12:44.940 --> 00:12:52.560
So if it says if not true then we're going to say this and then we need our early return.

185
00:12:52.560 --> 00:12:54.350
We haven't put that in here.

186
00:12:54.450 --> 00:12:57.960
Otherwise it will carry on because it will be an ice a gram.

187
00:12:57.960 --> 00:13:03.240
So we've got this check coming from a function that we haven't defined yet.

188
00:13:03.260 --> 00:13:05.580
So let's go ahead and do that.

189
00:13:05.660 --> 00:13:07.670
Let's go to the bottom of our code here.

190
00:13:07.680 --> 00:13:09.660
So this is returning a boolean.

191
00:13:09.660 --> 00:13:10.790
We know that already.

192
00:13:10.860 --> 00:13:11.430
And then we need.

193
00:13:11.430 --> 00:13:13.680
Are you bool Cal cartridge.

194
00:13:13.670 --> 00:13:15.010
Caroline colon.

195
00:13:15.090 --> 00:13:15.930
And there we go.

196
00:13:15.930 --> 00:13:21.400
There it is is appeared put parentheses in and our code.

197
00:13:21.420 --> 00:13:25.780
Now this is where we can start pseudo coding what's going to be going on.

198
00:13:25.800 --> 00:13:30.990
However what I'm going to do here is just return true.

199
00:13:30.990 --> 00:13:36.270
That means that at the moment when this function is called it will just return true and carry on with

200
00:13:36.270 --> 00:13:41.760
the rest of our code which is what we wanted to do because it won't actually be functional at the moment.

201
00:13:41.760 --> 00:13:43.620
So let's do the pseudocode here.

202
00:13:43.620 --> 00:13:49.460
Now I could comment block out the entire lot but I'm just going to type it in manually to begin with.

203
00:13:49.500 --> 00:13:55.470
Now you could go to extreme lengths with this but for the moment we just need a good idea of what's

204
00:13:55.470 --> 00:13:55.860
going on.

205
00:13:55.860 --> 00:14:01.620
So I'm going to be really simple here because we're just going to save for each letter we're going to

206
00:14:01.620 --> 00:14:04.860
start at element zero.

207
00:14:05.130 --> 00:14:14.870
And we're going to compare we're going to do a comparison against the next letter until we reach.

208
00:14:14.870 --> 00:14:16.580
Now this is important.

209
00:14:16.580 --> 00:14:23.720
So if we're going through each individual letter we're going to reach a point where we know the length

210
00:14:23.840 --> 00:14:28.700
of a hidden word but if we actually do the length of the hidden word within this element.

211
00:14:28.700 --> 00:14:35.000
So if we start using code in here and we get the hidden word length which we can put in there because

212
00:14:35.000 --> 00:14:40.340
it will return a value but we actually use the hidden word like if you recall earlier we were talking

213
00:14:40.340 --> 00:14:46.570
about how if you assessed something that was out of bounds it would crash on real for example with cakes.

214
00:14:46.580 --> 00:14:48.680
The word is five letters long.

215
00:14:48.680 --> 00:14:53.510
When we return its length it is also five letters long that seems okay.

216
00:14:53.540 --> 00:15:00.500
However if we put him the fifth element it will end up out of bounds so we need to do the hit word length

217
00:15:00.800 --> 00:15:07.210
minus one to make sure we get the fifth character which is in fact the fourth element in the F string.

218
00:15:07.250 --> 00:15:15.080
So this is until we reach it I'm just gonna shorthand this here it's going to be the gas length minus

219
00:15:15.080 --> 00:15:18.520
one that's the important thing there to avoid that crash.

220
00:15:18.520 --> 00:15:20.910
Now I bet that's got some of you out.

221
00:15:20.990 --> 00:15:26.240
It would certainly get me out if I was going around for the first time it will crash will come back

222
00:15:26.240 --> 00:15:31.880
and realize it will give us an error in this case on line ninety six is out of bounds if that's what's

223
00:15:31.880 --> 00:15:39.500
happened to you this is why and if we say here if the Oh not now this is an interesting one just typing

224
00:15:39.500 --> 00:15:46.280
through this has made me think until we reach the opposite guess here but we might be assessing the

225
00:15:46.280 --> 00:15:48.830
hidden word being pulled from a list.

226
00:15:48.920 --> 00:15:51.130
So this is not just about a guess.

227
00:15:51.140 --> 00:15:54.890
This is a much more generic function that we're creating that we'll just check.

228
00:15:54.890 --> 00:15:56.930
Any word that we pass in.

229
00:15:56.960 --> 00:16:02.630
So let's let's change that to a word and that will become clear as we start creating the rest of our

230
00:16:02.630 --> 00:16:02.930
code.

231
00:16:02.930 --> 00:16:08.270
I got a bit of foresight here obviously because I've created the entire bunch of code.

232
00:16:08.270 --> 00:16:14.750
But if you're creating a new function think about it not just as how it's going to work in your particular

233
00:16:14.750 --> 00:16:20.090
game at this moment but really think about what it's doing and name things appropriately so this will

234
00:16:20.090 --> 00:16:24.380
be a local variable as part of the is Isaac Ram.

235
00:16:24.440 --> 00:16:32.400
So until we reached the word dot length if any letters are the same we're going to return false and

236
00:16:32.420 --> 00:16:34.160
then otherwise we're returning true.

237
00:16:34.370 --> 00:16:35.670
So that's enough.

238
00:16:35.690 --> 00:16:37.590
When it comes to our pseudo coding.

239
00:16:37.670 --> 00:16:41.900
Now if you happen to have typed in something that is much more detailed.

240
00:16:41.900 --> 00:16:42.520
Great.

241
00:16:42.530 --> 00:16:43.400
That's brilliant.

242
00:16:43.400 --> 00:16:45.380
It means you've gone through a lot of thoughts.

243
00:16:45.400 --> 00:16:51.470
In fact the first time I went through this I went through on pen and paper I typed much more of a mess

244
00:16:51.500 --> 00:16:56.390
and then I condensed it down to what it really is that we're doing on each thing.

245
00:16:56.390 --> 00:16:59.980
So rather than getting into the nitty gritty detail.

246
00:17:00.050 --> 00:17:03.980
So finally are we passing anything in here.

247
00:17:03.980 --> 00:17:12.650
Yes we are we're going to pass in a word whether or not that word is a player's guess or whether it's

248
00:17:12.650 --> 00:17:16.470
a word from a word list that we've grabbed from online.

249
00:17:16.760 --> 00:17:19.340
We can pass in here a word.

250
00:17:19.340 --> 00:17:21.800
Now it's not just going to be a word.

251
00:17:21.820 --> 00:17:24.730
It's going to be an F string word.

252
00:17:24.980 --> 00:17:30.530
Let's say that go over to the header file because now whereas in with the process guess who are passing

253
00:17:30.530 --> 00:17:37.240
in the F string guess now we can pass in an F string word.

254
00:17:37.330 --> 00:17:37.630
OK.

255
00:17:37.640 --> 00:17:42.860
So there's one final place here that we need to go and have a look if we go back over and into our implementation

256
00:17:43.250 --> 00:17:45.340
if we scroll up a little.

257
00:17:45.340 --> 00:17:48.440
Yes we've got a red squiggle here too few arguments.

258
00:17:48.440 --> 00:17:49.390
Yes.

259
00:17:49.490 --> 00:17:58.880
Now you may think our password in there now word is this variable that is only used down here at the

260
00:17:58.880 --> 00:18:03.080
moment it's not declared not defined anywhere else.

261
00:18:03.080 --> 00:18:06.560
So we can't use word we wouldn't want to use word either.

262
00:18:06.920 --> 00:18:13.310
What we're doing in this particular place is using this function to assess the player's inputs because

263
00:18:13.310 --> 00:18:15.320
it's part of process guess.

264
00:18:15.380 --> 00:18:18.510
So this is where we can pass in the guess.

265
00:18:18.530 --> 00:18:20.900
That's what we're passing in here.

266
00:18:20.900 --> 00:18:27.060
Now some of you might have reached for inputs instead but input is out of scope of this particular function.

267
00:18:27.200 --> 00:18:33.890
What we are using just to clarify is when we process the gas when we call that function we're passing

268
00:18:33.890 --> 00:18:38.510
in the inputs past great parts at this point.

269
00:18:38.720 --> 00:18:43.980
When we pass in the inputs we're assigning it the variable name.

270
00:18:43.990 --> 00:18:44.460
Yes.

271
00:18:44.480 --> 00:18:46.100
This is the beautiful thing here.

272
00:18:46.190 --> 00:18:53.720
We can copy the value of inputs to guess and then when we go ahead and use it it makes far better contextual

273
00:18:53.720 --> 00:18:58.610
sense as you're running through this because that's what we're doing the processing the gas.

274
00:18:58.640 --> 00:19:04.070
And at this point we're passing the gas in to make sure that the player hasn't typed in any repeating

275
00:19:04.070 --> 00:19:05.090
letters.

276
00:19:05.300 --> 00:19:08.000
And if that works we're all done.

277
00:19:08.000 --> 00:19:13.390
So let's go ahead and save our file what we should find here is that our code behaves exactly as it

278
00:19:13.390 --> 00:19:18.550
did before because this code just returns true.

279
00:19:18.550 --> 00:19:25.060
So we should jump straight on to checking whether the hidden word length is longer or shorter than the

280
00:19:25.060 --> 00:19:29.570
gas length OK so let's go ahead compile our code.

281
00:19:30.300 --> 00:19:33.880
Okay so now that it's compiled let's go ahead and play here.

282
00:19:33.970 --> 00:19:37.660
We still got that other stuff in which I will remove in a moment.

283
00:19:37.660 --> 00:19:39.970
Let's go ahead here and typing cakes

284
00:19:43.120 --> 00:19:43.540
Excellent.

285
00:19:43.540 --> 00:19:44.700
We have one.

286
00:19:44.710 --> 00:19:51.130
If we take the wrong number of characters in K brilliant let's go back over to our code and do a tiny

287
00:19:51.130 --> 00:19:57.070
bit to tidy up the first thing I want to do is just comment out these for the moment I'll probably remove

288
00:19:57.070 --> 00:19:58.910
them in the fullness of time.

289
00:19:59.090 --> 00:20:04.980
And the other thing I wanted to do is here I set your mike her challenge before.

290
00:20:05.050 --> 00:20:12.250
So at this point in time if we're going through each letter of ID of a particular word and assessing

291
00:20:12.250 --> 00:20:18.910
it against the other letters in that word that's a lot more heavy lifting then checking whether or not

292
00:20:18.910 --> 00:20:22.630
their lengths are equal or whether it's the same thing.

293
00:20:22.630 --> 00:20:29.260
So in this particular case it would make far more sense if the checking if an ice a gram comes after

294
00:20:29.260 --> 00:20:36.490
these two really quick checks to make otherwise we're doing a lot of heavy lifting when one of these

295
00:20:36.490 --> 00:20:37.770
might be true.

296
00:20:37.780 --> 00:20:42.490
Now this is obviously the first thing we need to do because we wouldn't want to assess any of these

297
00:20:42.580 --> 00:20:49.620
others first but then if the length is the same as the hidden word length then we can continue guessing.

298
00:20:49.690 --> 00:20:52.760
It's a very quick and easy comparison to do.

299
00:20:52.870 --> 00:20:58.630
Now if we had very big words or large data sets or whatever when it starts to come to comparing one

300
00:20:58.630 --> 00:21:03.670
thing against another and there may be many of them that's going to take longer to do.

301
00:21:03.730 --> 00:21:09.730
But putting it here means that these two things are assessed first and your code is that little bit

302
00:21:09.730 --> 00:21:12.090
more performance because of it.

303
00:21:12.130 --> 00:21:12.790
Excellent.

304
00:21:12.820 --> 00:21:14.280
How did you guys get on.

305
00:21:14.350 --> 00:21:18.400
Did you come across any of the gotchas that we had during this lecture.

306
00:21:18.430 --> 00:21:20.790
I hope your code is coming along really well.

307
00:21:20.890 --> 00:21:25.520
Looking forward to seeing your progress please share your work as you go and I'll see you all.

308
00:21:25.660 --> 00:21:26.680
And then next lecture.
