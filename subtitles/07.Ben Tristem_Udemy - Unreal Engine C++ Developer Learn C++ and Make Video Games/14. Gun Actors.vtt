WEBVTT
1
00:00:04.640 --> 00:00:10.220
Hello and welcome in this lecture, we're going to create a gun again to learn how we're going to be

2
00:00:10.220 --> 00:00:17.300
architecting guns for this game so that they are swappable so we can have different properties on different

3
00:00:17.300 --> 00:00:18.170
types of guns.

4
00:00:18.620 --> 00:00:23.390
And that's generally how the architectures work in shooters first person or third.

5
00:00:23.900 --> 00:00:25.720
Let's dive in and see how it's done.

6
00:00:27.140 --> 00:00:32.650
OK, so we haven't checked in on our project plan in a little while where we got to the play movement.

7
00:00:32.720 --> 00:00:33.140
It's done.

8
00:00:33.530 --> 00:00:39.230
The animation for now is done and the shooting, that is the next thing for us to focus on.

9
00:00:39.800 --> 00:00:43.760
Now, it's a little confusing here because our MASH already appears to have a gun.

10
00:00:44.300 --> 00:00:47.300
But actually, we don't want to use this gun.

11
00:00:47.300 --> 00:00:49.160
We want to use it in a different way.

12
00:00:49.760 --> 00:00:56.030
Recent being in a shooter type of game, you often want to be able to switch between weapons or at least

13
00:00:56.360 --> 00:00:59.210
be able to have different characters, have different weapons.

14
00:00:59.600 --> 00:01:05.870
And the easiest way to do that is to architect the gun as a separate thing to the character so that

15
00:01:05.870 --> 00:01:09.770
you can swap them out so that it can be responsible for how it shoots.

16
00:01:09.830 --> 00:01:14.810
If it's a rocket launcher or a shotgun or a rifle, they're going to do things in different ways.

17
00:01:15.560 --> 00:01:20.750
Now, you might say, okay, well, let's create a gun component and we can stick that gun components

18
00:01:21.140 --> 00:01:22.460
underneath our mesh.

19
00:01:22.880 --> 00:01:30.440
That would work, except that then we lose the modularity that allows us to add multiple components

20
00:01:30.440 --> 00:01:31.160
to the gun.

21
00:01:31.580 --> 00:01:38.750
So what we really want to do is go down the route of having an actor for the gun that is child ID to

22
00:01:38.750 --> 00:01:39.800
the shooter character.

23
00:01:39.890 --> 00:01:43.700
Now, this is something we haven't come across before, but it works like this.

24
00:01:44.390 --> 00:01:48.410
You can have a shooter character and a gun as its child.

25
00:01:49.190 --> 00:01:53.090
And the shooter character can have multiple components which a child to each other.

26
00:01:53.090 --> 00:01:54.200
So you got the capsule.

27
00:01:54.200 --> 00:02:00.800
We've got the mesh as a child of the capsule at the moment, and the components of the gun can be child

28
00:02:00.800 --> 00:02:01.790
ID to that.

29
00:02:02.090 --> 00:02:05.750
So the mesh gets child ID to the mesh of the character.

30
00:02:06.320 --> 00:02:11.510
And if it's got any other components, such as maybe a particle effect at the muzzle of the gun, that

31
00:02:11.510 --> 00:02:13.190
might be child ID to the mesh.

32
00:02:13.490 --> 00:02:19.640
So you can see that these hierarchy's are kind of independent, that you've got these seen components,

33
00:02:19.640 --> 00:02:22.490
the ones that have transformed over on the right.

34
00:02:23.210 --> 00:02:25.610
And they can be in a certain hierarchy.

35
00:02:26.090 --> 00:02:31.310
And then the actor hierarchy actually follows the hierarchy of the scene components.

36
00:02:31.370 --> 00:02:33.270
The actors don't have a hierarchy of their own.

37
00:02:33.290 --> 00:02:35.630
This is the bit that takes a little bit of time to get your head around.

38
00:02:35.630 --> 00:02:38.120
It was a a ha moment when it clicked for me.

39
00:02:38.630 --> 00:02:42.110
Is it in actual fact, there is no hierarchy of actors.

40
00:02:42.180 --> 00:02:44.660
There's only a hierarchy of scene components.

41
00:02:45.020 --> 00:02:47.600
There are actors that own the scene components.

42
00:02:47.660 --> 00:02:52.910
And so they end up having a hierarchy because they're seen components are related to each other, but

43
00:02:53.000 --> 00:02:56.000
they don't actually have a relationship among themselves.

44
00:02:56.780 --> 00:03:02.780
So with that sad to set the context, the first thing we want to go and do is actually create ourselves

45
00:03:02.870 --> 00:03:05.220
a C++ gun actor.

46
00:03:05.780 --> 00:03:11.780
And in this case, it's not going to be a porn or character or anything like that.

47
00:03:11.780 --> 00:03:15.500
It's just gonna be a straightforward actor because we don't need any behavior to need to possess it.

48
00:03:15.560 --> 00:03:16.360
We don't need to do anything.

49
00:03:16.370 --> 00:03:17.890
It's just as simple, simple actor.

50
00:03:18.470 --> 00:03:19.780
So let's go ahead and do that.

51
00:03:19.790 --> 00:03:21.100
In fact, little challenge for you.

52
00:03:21.110 --> 00:03:24.410
Go ahead and create that C++ act as something you should be able to do.

53
00:03:24.440 --> 00:03:26.270
Little mini challenge, attempt it.

54
00:03:26.900 --> 00:03:27.080
Okay.

55
00:03:27.140 --> 00:03:34.430
And back in, I'm gonna to do its new C++ class and we don't need to have C actor.

56
00:03:34.520 --> 00:03:35.530
That's all we want to choose.

57
00:03:36.050 --> 00:03:39.170
And we're going to go ahead and call this one gun.

58
00:03:39.770 --> 00:03:42.140
Simple as let's create that class.

59
00:03:42.400 --> 00:03:42.570
Okay.

60
00:03:42.620 --> 00:03:46.400
And once that's done, it's going to pop up in your code editor.

61
00:03:46.520 --> 00:03:52.250
And we don't need to do anything with it just yet because the first thing I want to do is create a blueprint

62
00:03:52.640 --> 00:03:53.330
subclass.

63
00:03:53.450 --> 00:03:53.750
So.

64
00:03:53.990 --> 00:04:00.600
Right, click on your class in the content browser and instead of calling it Mike A.N. and wipe automatic

65
00:04:00.600 --> 00:04:04.340
defaults that BP underscore gun, I'm going to put it the roots of concept.

66
00:04:04.340 --> 00:04:06.680
For now, we can do a bit of reorganizing once you've got more classes.

67
00:04:07.040 --> 00:04:09.800
As I've said before, we'll create the blueprint class.

68
00:04:09.830 --> 00:04:10.960
As you can see, it's completely empty.

69
00:04:10.960 --> 00:04:12.520
It's its default scene roots.

70
00:04:12.950 --> 00:04:14.390
We're gonna want to fix that up.

71
00:04:14.610 --> 00:04:20.480
All he wants to do is actually add a component in C++ because this is a C++ course.

72
00:04:20.510 --> 00:04:24.020
Let's practice the muscle of adding components in C++.

73
00:04:24.290 --> 00:04:29.750
It also means that we're going to have access to those components from within our C++ code to manipulate

74
00:04:29.750 --> 00:04:30.650
and write our code there.

75
00:04:31.040 --> 00:04:36.290
Now, the setup we're going to want is to have a seen root component, which is just going to be seen

76
00:04:36.290 --> 00:04:38.010
components and then a MASH.

77
00:04:38.140 --> 00:04:39.490
It's a child of that.

78
00:04:39.530 --> 00:04:40.310
Why do we want that?

79
00:04:40.310 --> 00:04:47.810
Because we want to be able to change the position of the MASH relative to the roots of the gun so that

80
00:04:47.810 --> 00:04:52.170
we can basically place the handle in different locations for different measures.

81
00:04:52.180 --> 00:04:55.740
So if we have different guns, we can make sure they will have the handle in the same place so that

82
00:04:55.740 --> 00:05:00.620
when we attach it to the characters hand, it's going to appear with the handle in the character's hand.

83
00:05:01.250 --> 00:05:01.400
Okay.

84
00:05:01.550 --> 00:05:02.650
So how we gonna do that?

85
00:05:02.660 --> 00:05:08.600
We're going to go over to our Visual Studio code and I'm going to create a private section down here

86
00:05:08.960 --> 00:05:10.550
where we're going to store the U.

87
00:05:10.550 --> 00:05:13.100
Properties for the different components that we're going to come up with.

88
00:05:13.670 --> 00:05:14.960
So I'm going to create a U.

89
00:05:14.960 --> 00:05:20.690
Property visible anywhere that we want our components to be visible anywhere, because their point is

90
00:05:20.690 --> 00:05:25.130
we don't want to be able to edit the pointers, but we do want to be able to see the properties of those

91
00:05:25.130 --> 00:05:26.420
pointers and be able to.

92
00:05:26.680 --> 00:05:33.250
Those and that then becomes the purview of the class that we're pointing to that then decides what gets

93
00:05:33.250 --> 00:05:34.600
shown, what is editable.

94
00:05:34.630 --> 00:05:38.170
So all you want to say here is that it's not the plane to these editable.

95
00:05:38.590 --> 00:05:40.030
So that's why go for visible anyway.

96
00:05:40.720 --> 00:05:41.530
A little bit revision.

97
00:05:42.040 --> 00:05:44.980
Now, we want this to be a you because it's a component.

98
00:05:45.040 --> 00:05:48.550
Then it's a scene components that we're wanting.

99
00:05:49.360 --> 00:05:53.470
If I can type it correctly, I think opponents and it's appointed to it.

100
00:05:53.560 --> 00:05:56.370
And this is going to be our route components.

101
00:05:57.760 --> 00:06:01.430
Like, so and then we're going to want a new property.

102
00:06:02.450 --> 00:06:05.600
Again, visible anywhere for Meche.

103
00:06:07.060 --> 00:06:09.630
The class for the MASH is going to be a U.

104
00:06:10.270 --> 00:06:16.270
Static MASH component, because this isn't a skeletal mesh.

105
00:06:16.300 --> 00:06:16.930
It's rigid.

106
00:06:16.960 --> 00:06:19.690
It doesn't have any skeleton, any bones.

107
00:06:20.110 --> 00:06:21.760
So when that's be a pointer.

108
00:06:22.000 --> 00:06:24.760
And this is just gonna cool the mesh like so.

109
00:06:25.780 --> 00:06:30.220
Fact, I think I need to be a little bit careful here, because I think root component already exists

110
00:06:30.280 --> 00:06:31.610
in the parent class act.

111
00:06:31.870 --> 00:06:34.330
So I'm just going to call this route instead.

112
00:06:35.320 --> 00:06:38.830
And then we've already got a constructor over in the C++.

113
00:06:38.890 --> 00:06:42.400
We're just going to need to include the appropriate pedophiles here.

114
00:06:42.520 --> 00:06:46.190
Now, they'll trick when you're in Visual Studio CODIS to find out where pedophile might be.

115
00:06:46.230 --> 00:06:53.110
Use control P and you're going to search for in this case, we wants to know the static mesh.

116
00:06:53.140 --> 00:06:55.950
So static mesh components.

117
00:06:56.320 --> 00:07:00.130
And we can see that the static mesh components dot h.

118
00:07:00.550 --> 00:07:07.450
If I go ahead and open it up and hover over the tab, you can see that it is under this long path.

119
00:07:07.480 --> 00:07:12.160
But the bit that's interesting is that it's under classes which then we can look up from.

120
00:07:12.160 --> 00:07:15.310
That is going to be components, static mesh components.

121
00:07:15.820 --> 00:07:21.490
So I can close that tab down and just above include, in fact, below that include for a gun.

122
00:07:21.850 --> 00:07:29.020
We're going to do a hash include for the components and then the static mesh components.

123
00:07:29.680 --> 00:07:35.260
Now, actually, I just remembered that the measures that we've got for some reason aren't actually

124
00:07:35.260 --> 00:07:35.940
static measures.

125
00:07:35.950 --> 00:07:37.930
I believe they might be Scottsville measures.

126
00:07:38.380 --> 00:07:44.620
You can find this out by going into the asset packs, shoot a game weapons and having a look at these

127
00:07:44.620 --> 00:07:45.040
measures.

128
00:07:45.040 --> 00:07:48.400
And sure enough, if you hover over them, you can see that they are skeletal measures.

129
00:07:48.850 --> 00:07:49.780
Don't ask me why.

130
00:07:49.930 --> 00:07:51.760
For some reason, that's what they are.

131
00:07:52.360 --> 00:07:56.830
So we're going to want to change the type of skeletal mesh in the head of file.

132
00:07:56.830 --> 00:07:58.400
So instead they use static mesh.

133
00:07:58.420 --> 00:08:01.360
It's gonna be you scale a little mesh instead.

134
00:08:01.780 --> 00:08:04.270
And same for the include.

135
00:08:04.300 --> 00:08:06.070
It's going to be the skeletal.

136
00:08:07.420 --> 00:08:08.660
MASH component dot h.

137
00:08:08.740 --> 00:08:11.260
That we want to remember, there's no you in the head of files.

138
00:08:12.550 --> 00:08:15.490
And I believe the same components already include the head by default.

139
00:08:15.970 --> 00:08:20.350
So it's time for a challenge to add a mesh component of your own.

140
00:08:20.380 --> 00:08:23.830
We're going to create a root scene components.

141
00:08:24.190 --> 00:08:27.460
Set it to the roots and set it to the root for the class.

142
00:08:28.000 --> 00:08:32.290
And create a mesh components and set up the attachment between the two.

143
00:08:32.290 --> 00:08:35.880
So the mesh component is a child of that root scene components.

144
00:08:35.890 --> 00:08:37.390
Pause video and have a go.

145
00:08:37.840 --> 00:08:38.800
Kay, welcome back.

146
00:08:38.860 --> 00:08:42.730
So we're going to go over and set, first of all, our roots.

147
00:08:43.000 --> 00:08:50.890
It's going to be a create default sub object of type you see in components.

148
00:08:51.190 --> 00:08:56.140
And then we are going to give it a name, which is going to be with the text macro.

149
00:08:56.170 --> 00:08:59.500
We're going to call it the root and finish up with a semicolon.

150
00:08:59.560 --> 00:09:01.590
Then we're going to set it as the root.

151
00:09:01.600 --> 00:09:06.160
So set roots components will set it as the root component for the actor.

152
00:09:06.310 --> 00:09:07.990
So set root as the root components.

153
00:09:08.440 --> 00:09:09.280
Good stuff.

154
00:09:09.700 --> 00:09:16.160
Then we're going to want to create our mesh so mesh equals create default sub object.

155
00:09:16.660 --> 00:09:22.030
And it's the EU, a skeletal mesh component that we want as the class.

156
00:09:23.050 --> 00:09:28.240
And then the text macro for just gonna call it mesh and add a semicolon on the end there.

157
00:09:28.300 --> 00:09:29.950
Then we want to set up attachment.

158
00:09:30.310 --> 00:09:34.220
So it's going to be mesh arrow set up.

159
00:09:35.290 --> 00:09:36.250
Setup attachment.

160
00:09:36.520 --> 00:09:39.350
And we're going to want to attach to the roots.

161
00:09:39.670 --> 00:09:41.920
Like, so cool stuff.

162
00:09:41.950 --> 00:09:46.630
So we can go ahead and save that and hopefully compile and build.

163
00:09:46.930 --> 00:09:48.820
And we'll go over in it, too.

164
00:09:48.820 --> 00:09:49.330
Unreal.

165
00:09:49.360 --> 00:09:51.550
And have a look at our child class.

166
00:09:52.000 --> 00:09:54.310
And sure enough, in here, we've got ourselves the roots.

167
00:09:54.370 --> 00:09:56.170
We've got the sub mesh.

168
00:09:56.530 --> 00:09:58.960
Also got this default scene route, which is hanging around, I think.

169
00:09:59.020 --> 00:10:02.320
Let's restart the editor and see if that just goes away.

170
00:10:02.890 --> 00:10:07.060
Sometimes when adding components, things can linger around like that and get cached.

171
00:10:07.510 --> 00:10:12.070
And sure enough, if we open up the BP gun blueprints again, you can see that we just got those two

172
00:10:12.070 --> 00:10:12.500
components.

173
00:10:12.520 --> 00:10:15.220
We've added the roots and the mesh.

174
00:10:15.280 --> 00:10:20.290
And we probably want to go ahead and change out the mesh for one of the skeletal measures from the asset

175
00:10:20.290 --> 00:10:21.520
packs, from the shooter game.

176
00:10:22.060 --> 00:10:22.690
We've got the rifle.

177
00:10:22.690 --> 00:10:25.780
We've got a launch and choose this one to be the rifle.

178
00:10:26.140 --> 00:10:30.250
So actually calling it a BP gun is a little bit disingenuous.

179
00:10:30.280 --> 00:10:32.860
This should probably be the BP rifle.

180
00:10:32.860 --> 00:10:39.910
So let's go ahead and rename that, go over to the content browser and rename it to BP Reifel or BP

181
00:10:39.910 --> 00:10:40.180
Gun.

182
00:10:40.210 --> 00:10:44.640
Underscore Reifel now Iglulik, BP Reifel directly Nager.

183
00:10:45.220 --> 00:10:47.620
And that has given us a gun.

184
00:10:47.710 --> 00:10:54.400
Now, obviously, now this means that we can have all sorts of properties against this actor, such

185
00:10:54.460 --> 00:11:01.000
as the strength of the weapon, its range and so on and so forth, by creating new properties in C++.

186
00:11:01.030 --> 00:11:08.080
And that is the strength of having this architecture, is that the guns can then be a little bit different.

187
00:11:08.090 --> 00:11:12.610
We can have different shooting mechanics for rifles versus snipers.

188
00:11:12.610 --> 00:11:15.640
Verse is RPG is things like that.

189
00:11:16.120 --> 00:11:17.470
So that's great.

190
00:11:17.560 --> 00:11:21.970
And we can also have different stats so we can have a strong rifle and a weak rifle depending on different

191
00:11:21.970 --> 00:11:23.530
blueprint subclasses.

192
00:11:23.890 --> 00:11:24.370
Cool stuff.

193
00:11:24.400 --> 00:11:29.800
Now, in the next lecture, we're going to look at how we're going to actually spawn this gun as a child

194
00:11:30.220 --> 00:11:32.440
of our current character.

195
00:11:32.800 --> 00:11:33.340
I'll see that.
