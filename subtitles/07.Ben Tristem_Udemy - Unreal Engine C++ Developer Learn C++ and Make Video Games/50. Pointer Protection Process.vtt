WEBVTT
1
00:00:04.210 --> 00:00:05.710
Hello everybody and welcome back.

2
00:00:05.710 --> 00:00:08.360
And welcome to protecting our pointers.

3
00:00:08.380 --> 00:00:12.430
Now we've done a little bit of this as we've gone but now we're really going to formalize it and make

4
00:00:12.430 --> 00:00:17.670
sure that any pointers that we have in our code are actually protected.

5
00:00:17.680 --> 00:00:22.990
Now I've shown you before the crashes that can occur and of course the error messages you get from them

6
00:00:23.080 --> 00:00:25.370
are usually not very helpful either.

7
00:00:25.390 --> 00:00:31.030
So that leads nicely onto our first point here that horrible crashes when we follow a null pointer we

8
00:00:31.030 --> 00:00:34.060
must always check pointers before using them as well.

9
00:00:34.090 --> 00:00:40.480
That will be a good way of making sure that we don't have these issues and when declaring always initialize

10
00:00:40.690 --> 00:00:43.030
a pointer to NULL pointer.

11
00:00:43.150 --> 00:00:45.700
Now that may sound like a bit of a contradiction.

12
00:00:45.730 --> 00:00:52.350
This will prevent it from having undefined behavior which could result in pretty much anything happening.

13
00:00:52.360 --> 00:00:55.480
So how do we go ahead and find pointers anyway.

14
00:00:55.480 --> 00:00:59.530
Well obviously as you use them would be the best time to protect them.

15
00:00:59.620 --> 00:01:02.530
But we haven't been doing that in all circumstances.

16
00:01:02.800 --> 00:01:08.740
So look for the asterisk or the star in your head of files to help find some pointers and also check

17
00:01:08.770 --> 00:01:14.020
before every use and handle with the null pointer we've already shown you a couple of ways of doing

18
00:01:14.020 --> 00:01:14.680
that as well.

19
00:01:15.100 --> 00:01:20.950
And sometimes we may not choose to for example when we're going ahead and getting an owner which does

20
00:01:20.950 --> 00:01:25.630
make sense because if you've got a component like the grabber component is not going to sit.

21
00:01:25.630 --> 00:01:27.640
They're not attached to something.

22
00:01:27.640 --> 00:01:32.890
So we don't need to protect when we go ahead and get owner and get to name for instance because the

23
00:01:32.890 --> 00:01:35.090
component can't exist without an owner.

24
00:01:35.110 --> 00:01:37.720
So let's go over into our code and have a closer look.

25
00:01:38.230 --> 00:01:38.570
OK.

26
00:01:38.590 --> 00:01:43.240
We'll start over in the grab a file because that's where we've been most of the time and we can see

27
00:01:43.240 --> 00:01:44.680
as we go down.

28
00:01:44.830 --> 00:01:46.210
We've got the two stars.

29
00:01:46.210 --> 00:01:52.180
So one of the things that you could do here is go control an F and look for the asterisk or the star

30
00:01:52.180 --> 00:01:53.980
depending on what you want to call it.

31
00:01:53.980 --> 00:01:56.350
So we've got a function up here.

32
00:01:56.620 --> 00:01:57.910
Now lets the tick component.

33
00:01:57.940 --> 00:01:59.290
We're not going to touch that.

34
00:01:59.290 --> 00:02:00.550
However we've got two more.

35
00:02:00.550 --> 00:02:07.020
In this particular file with both of them as we've initialized it we've set it to null pointer.

36
00:02:07.270 --> 00:02:08.590
So that's good.

37
00:02:08.590 --> 00:02:12.660
Let's go over into our implementation of the grabber.

38
00:02:12.710 --> 00:02:16.150
I'm going to have to open these up on time go through them again.

39
00:02:16.150 --> 00:02:16.630
Okay.

40
00:02:16.630 --> 00:02:18.970
And also is a good time as we're going through this.

41
00:02:18.970 --> 00:02:24.190
If we spot anything else because I know I've spotted something here I want to fix it as well.

42
00:02:24.190 --> 00:02:30.280
So if we go down an example I think the first example where we use pointers here input component get

43
00:02:30.280 --> 00:02:31.190
the owner.

44
00:02:31.210 --> 00:02:37.600
So we don't have to protect this one here because any component that is on an on an actor is going to

45
00:02:37.600 --> 00:02:38.870
have an owner.

46
00:02:38.890 --> 00:02:40.330
So that's absolutely fine.

47
00:02:40.330 --> 00:02:46.120
However when we go ahead and find our physics handle this is where we do need to make sure we've got

48
00:02:46.120 --> 00:02:48.300
a null point to protect ourselves.

49
00:02:48.310 --> 00:02:54.850
Now you could set it up like this or you could as we've done over in the open door implementation.

50
00:02:54.850 --> 00:02:59.620
Use this type of formatting as well so we could say if not pressure plates.

51
00:02:59.680 --> 00:03:03.750
So over here we could change this and say if not physics handle.

52
00:03:03.800 --> 00:03:04.790
That's a lot cleaner.

53
00:03:04.870 --> 00:03:06.910
And that's exactly what I'm going to do here.

54
00:03:06.910 --> 00:03:08.320
I'm just going to change that.

55
00:03:08.330 --> 00:03:12.010
So if not physics handle then there's no component found that's absolutely fine.

56
00:03:12.010 --> 00:03:17.140
And one of the best things we can do when we have this sort of issue where if something's not there

57
00:03:17.350 --> 00:03:20.110
well perhaps we can log it out at the same time.

58
00:03:20.520 --> 00:03:23.700
Let's go down a little further so we've got the you primitive component.

59
00:03:23.720 --> 00:03:28.790
It is being initialized to something else at the moment so that's absolutely fine.

60
00:03:28.870 --> 00:03:33.670
We don't have to assign it to no pointer if it's already being assigned to something else.

61
00:03:33.670 --> 00:03:40.270
So if the hit result gets actor now the weird thing about this and why would this indentation here let

62
00:03:40.270 --> 00:03:41.500
me sort that out.

63
00:03:41.590 --> 00:03:46.150
I've spotted it when I've been editing videos and I don't know why didn't spot it as I was going through

64
00:03:46.180 --> 00:03:52.150
I think it was just because it was so so almost in line with this my brain didn't recognize it.

65
00:03:52.150 --> 00:03:52.960
So what.

66
00:03:52.960 --> 00:03:54.020
Anyway okay.

67
00:03:54.090 --> 00:03:57.340
So I'm not a great fan of this bit here.

68
00:03:57.340 --> 00:04:03.160
This hit result gets actor it's gonna bring back an actor if we hover over it we can see exactly what

69
00:04:03.160 --> 00:04:03.900
it is.

70
00:04:03.910 --> 00:04:10.090
So it's kind of weird to get a result and not sign it to something.

71
00:04:10.240 --> 00:04:12.040
That's the one thing that I don't like about this.

72
00:04:12.040 --> 00:04:16.630
So what we're going to do is and to take that out and I'm going to replace it with actor hit.

73
00:04:16.650 --> 00:04:18.250
So it's going to be nice and short.

74
00:04:18.280 --> 00:04:27.190
So actor hits and what we can do is up here we can actually declare an a actor star because it's a pointer

75
00:04:27.730 --> 00:04:29.800
we can call it actor hits.

76
00:04:30.250 --> 00:04:33.130
And then we can initialize it with that value there.

77
00:04:33.310 --> 00:04:36.160
And that reads Just a little bit better.

78
00:04:36.160 --> 00:04:41.800
Now there's a question here because we're using the physics handle here and we're using a pointer to

79
00:04:41.800 --> 00:04:43.710
that you primitive component.

80
00:04:43.710 --> 00:04:50.110
So if there's not a physics handle there we may have ourselves an issue one way of getting around this

81
00:04:50.140 --> 00:04:53.720
is to have another if statement so invested in this.

82
00:04:53.770 --> 00:04:57.060
In this case but what if statement would do is it.

83
00:04:57.160 --> 00:05:06.140
It would say that if not physics handle okay and on the same line we're just going to return here.

84
00:05:06.150 --> 00:05:08.820
So we don't clutter up our code too much.

85
00:05:08.820 --> 00:05:12.720
So it's not a physics handle it's going to return and what will happen then is when it gets to this

86
00:05:12.720 --> 00:05:18.810
bit of code it'll just jump out of it it will exit this if statement is completely and it won't run

87
00:05:18.810 --> 00:05:20.170
the code underneath.

88
00:05:20.280 --> 00:05:25.440
And that's the sorts of formats you can do when you start using pointers to protect yourself.

89
00:05:25.440 --> 00:05:29.710
Now apart from the whitespace issues that are there I'm happy with that.

90
00:05:29.850 --> 00:05:35.370
We come down and again we can use this bits of code again if not a physics handle because we're using

91
00:05:35.370 --> 00:05:36.370
the same here.

92
00:05:36.390 --> 00:05:42.450
Now if for some reason you don't have a component and you're trying to release a component that could

93
00:05:42.450 --> 00:05:43.650
cause a crash.

94
00:05:43.650 --> 00:05:47.110
So this will help protect against that.

95
00:05:47.160 --> 00:05:50.850
Now if we go down a little further we'll find some other examples.

96
00:05:50.880 --> 00:05:56.350
So here we go here's another one with our tech component function and once again we can say if there's

97
00:05:56.370 --> 00:06:01.200
not a physical handle return and that will take us out of the tick function completely onto the next

98
00:06:01.200 --> 00:06:05.760
frame of it of course but that will protect us when we use the physics handle here.

99
00:06:05.850 --> 00:06:07.040
And of course down here.

100
00:06:08.160 --> 00:06:10.020
So where else do we use pointers down here.

101
00:06:10.040 --> 00:06:10.220
OK.

102
00:06:10.230 --> 00:06:12.540
So we've got another arrow operator here.

103
00:06:12.600 --> 00:06:14.790
Now get a world now much like an owner.

104
00:06:14.820 --> 00:06:17.910
There's always going to be a level that you're working in protecting.

105
00:06:17.930 --> 00:06:20.030
This is not a particular issue.

106
00:06:20.040 --> 00:06:24.840
If there's not a world them what what are we doing in the unreal Ed you're going to be staring at a

107
00:06:24.840 --> 00:06:26.230
blank screen.

108
00:06:26.450 --> 00:06:29.730
We just save it as we go further down.

109
00:06:29.790 --> 00:06:34.530
And once again we've got to get world here and get what they're okay.

110
00:06:34.560 --> 00:06:38.160
So I think that's everything within the grabber all protected.

111
00:06:38.160 --> 00:06:39.740
Now I might have missed something.

112
00:06:39.740 --> 00:06:41.880
It's very easy to do in a big block code.

113
00:06:41.880 --> 00:06:45.550
I think I've managed to go through everything there and protect it.

114
00:06:45.630 --> 00:06:49.110
And of course that leads us nicely on to your challenge.

115
00:06:49.110 --> 00:06:51.790
I would like you to go forth and protect.

116
00:06:51.810 --> 00:06:57.770
So go ahead check the open door header file and the open door implementation file log.

117
00:06:57.780 --> 00:07:03.750
A helpful error if it's no that's always useful if you've got a particular issue and you get something

118
00:07:03.780 --> 00:07:06.820
out in the log you're somewhat protected.

119
00:07:06.900 --> 00:07:08.590
Test that it works.

120
00:07:08.670 --> 00:07:13.140
Important initialize any other unfinished laser pointers.

121
00:07:13.140 --> 00:07:18.030
Now I think there are a couple on open door especially if you've been following along with exactly what

122
00:07:18.030 --> 00:07:24.720
I've typed now make sure that all point to users now do make sure that all points are usages are protected

123
00:07:24.840 --> 00:07:31.270
where necessary supposedly now and give us a go Okay everybody Welcome back.

124
00:07:31.300 --> 00:07:34.170
Let's go forth and protect okay.

125
00:07:34.190 --> 00:07:36.730
So let's start over in the open door header file.

126
00:07:37.190 --> 00:07:44.000
So the first instance of a pointer and do use the search function here because it's going to be easy

127
00:07:44.000 --> 00:07:45.080
to miss things.

128
00:07:45.110 --> 00:07:48.370
So let's go ahead and search for the asterisk.

129
00:07:48.410 --> 00:07:49.310
And here we go.

130
00:07:49.310 --> 00:07:51.020
We've got three in here.

131
00:07:51.050 --> 00:07:52.900
The F Act's component tick function.

132
00:07:52.910 --> 00:07:54.620
We're going to leave that one alone.

133
00:07:54.800 --> 00:07:56.870
And then we've got two down at the bottom here.

134
00:07:56.930 --> 00:07:59.240
Okay so we've got a pressure plate.

135
00:07:59.240 --> 00:08:07.270
Let's assign let's initialize that with Noel Pointer and then we have the active open sir.

136
00:08:07.270 --> 00:08:10.540
Hang on a minute PTA.

137
00:08:10.570 --> 00:08:13.510
I will spell that correctly one day anyway.

138
00:08:13.530 --> 00:08:17.350
So the actor that opens I'm pretty sure we're not using that anymore.

139
00:08:17.350 --> 00:08:20.930
Let's go over into the implementation and have a look.

140
00:08:20.950 --> 00:08:21.660
OK.

141
00:08:21.730 --> 00:08:23.940
So I'm still searching at the top here.

142
00:08:23.950 --> 00:08:28.700
So I'm going to remove that actor that opens.

143
00:08:28.720 --> 00:08:30.940
OK so the actor that opens.

144
00:08:30.940 --> 00:08:32.780
Do we use it anywhere.

145
00:08:32.780 --> 00:08:35.710
Well let's find actor that opens.

146
00:08:35.720 --> 00:08:37.670
There's only one instance of it.

147
00:08:37.750 --> 00:08:39.340
So we don't use it anymore.

148
00:08:39.340 --> 00:08:44.860
I believe we were using it here before we say if it is the actor that opens then we can use it.

149
00:08:44.860 --> 00:08:47.680
So I think we can get rid of that completely.

150
00:08:47.680 --> 00:08:53.170
That's going to tidy up our code let's go back here and remove that.

151
00:08:53.210 --> 00:08:53.800
Perfect.

152
00:08:53.810 --> 00:08:57.650
I missed that the first time round and this is one of the great things about going through your code

153
00:08:58.130 --> 00:09:01.060
in this methodical manner even if you have to come back again.

154
00:09:01.070 --> 00:09:04.550
You're always going to miss things on the first pass.

155
00:09:04.580 --> 00:09:08.480
Let's go through the open door implementation and see what else we can find.

156
00:09:08.480 --> 00:09:13.850
So there will be arrow operators which are a good indication that we're using pointers and there will

157
00:09:13.850 --> 00:09:16.430
also be the asterisk stars.

158
00:09:16.430 --> 00:09:22.340
So in this particular case I'm going to look for Arrow operators because that's often going to reveal

159
00:09:23.210 --> 00:09:25.040
areas where we might miss.

160
00:09:25.040 --> 00:09:31.070
So anything that's ghetto now or perhaps get world we can safely ignore if we're attaching a component

161
00:09:31.070 --> 00:09:36.420
like open door to an actor is an actor component it has to have an owner.

162
00:09:36.440 --> 00:09:41.510
It can't not have an owner and therefore a null point is never going to happen.

163
00:09:41.510 --> 00:09:44.560
I'm sure there's some convoluted way you could set that up.

164
00:09:44.630 --> 00:09:48.950
But in general it's never going to happen in just the same with get world get world is the level that

165
00:09:48.950 --> 00:09:49.370
you're in.

166
00:09:49.910 --> 00:09:52.610
So if you've got no level then nothing can exist.

167
00:09:52.640 --> 00:09:57.890
So we really don't have to worry about get world returning a null pointer.

168
00:09:57.890 --> 00:09:59.780
So that's all fine.

169
00:09:59.840 --> 00:10:07.010
And then further down we've got a similar thing going on get owner gets owner again our case so here

170
00:10:07.040 --> 00:10:11.360
the total mass of actors is probably the final place where we're going to have to have a look.

171
00:10:11.360 --> 00:10:13.300
So we've got a pressure plate being used here.

172
00:10:13.610 --> 00:10:21.170
So this is where we can say Yves not pressure plate again then we need to do something afterwards and

173
00:10:21.170 --> 00:10:26.660
we're just going to return straightaway that will prevent that from running of course whitespace here

174
00:10:27.010 --> 00:10:30.980
just makes it a little bit more readable and also consistent with our formatting.

175
00:10:31.120 --> 00:10:31.790
So pressure plate.

176
00:10:31.800 --> 00:10:34.210
I think that's that's protected there.

177
00:10:34.360 --> 00:10:34.690
Okay.

178
00:10:34.720 --> 00:10:40.750
And so one thing to bear in mind here is this is returning and it's returning nothing.

179
00:10:40.910 --> 00:10:45.550
And this is supposed to be returning a float which is the total mass.

180
00:10:45.890 --> 00:10:50.810
So I am at this point in time going to return the total mass anyway so it's just going to come back

181
00:10:50.810 --> 00:10:52.550
out at zero.

182
00:10:52.550 --> 00:10:54.670
Otherwise this function isn't returning anything.

183
00:10:54.710 --> 00:10:59.700
When we return early if this is not right.

184
00:10:59.770 --> 00:11:02.420
If there is no pressure plate set.

185
00:11:02.420 --> 00:11:09.790
Now we could also add in a warning here if you want to buy think we're covered in that particular place.

186
00:11:09.930 --> 00:11:10.430
Okay.

187
00:11:10.430 --> 00:11:17.100
And this last one here on 82 again that's a pointer to an actor that's within the tea array itself.

188
00:11:17.100 --> 00:11:21.110
So it's a tea array of pointers essentially.

189
00:11:21.230 --> 00:11:26.440
So we're absolutely fine there because it won't make it through this far if there's any null pointers

190
00:11:26.450 --> 00:11:26.990
involved.

191
00:11:27.020 --> 00:11:27.580
Okay.

192
00:11:27.590 --> 00:11:31.290
And if it's an actor is an actor so it will be available.

193
00:11:31.310 --> 00:11:32.140
Okay.

194
00:11:32.210 --> 00:11:33.440
I think we're done.

195
00:11:33.440 --> 00:11:34.770
How did you guys get on.

196
00:11:34.790 --> 00:11:39.560
Did you manage to fix any errors like I did as I was going through my code methodically.

197
00:11:39.680 --> 00:11:44.600
If you did please share what you had to fix over in the discussions and I'll see you all in the next

198
00:11:44.600 --> 00:11:45.020
lecture.
