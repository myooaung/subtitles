1
00:00:00,480 --> 00:00:01,980
Hello and welcome back.

2
00:00:02,000 --> 00:00:07,470
In this lesson, we're going to begin our C++ journey by writing the most minimal program.

3
00:00:07,750 --> 00:00:09,930
And we're going to be starting very simple here.

4
00:00:10,440 --> 00:00:13,950
So this is the code that we're going to be writing in this lesson.

5
00:00:13,980 --> 00:00:17,850
And this is known as the main function in C++.

6
00:00:18,390 --> 00:00:20,760
Now, why are we starting with this?

7
00:00:20,790 --> 00:00:24,300
Why don't we just start with one simple line of code?

8
00:00:24,750 --> 00:00:27,030
Well, there's very specific reasons for this.

9
00:00:27,540 --> 00:00:31,320
Every C++ program requires this main function.

10
00:00:31,690 --> 00:00:34,890
A C++ program can have many different functions in it.

11
00:00:35,280 --> 00:00:41,670
But the main function is very special because when you execute a C++ program, the operating system

12
00:00:41,880 --> 00:00:44,310
will look for this main function when it runs.

13
00:00:44,610 --> 00:00:47,010
It's the starting point of your program.

14
00:00:47,100 --> 00:00:51,030
And without it, your program will not even build some.

15
00:00:51,030 --> 00:00:52,470
Here with a quick tip for you.

16
00:00:52,490 --> 00:00:58,200
Just before Gavin dives in, it's going to be much easier for you if you open a folder in Visual Studio

17
00:00:58,200 --> 00:01:00,350
Code before you create any files.

18
00:01:00,360 --> 00:01:02,620
That means everything will be nicely organized together.

19
00:01:02,640 --> 00:01:05,940
Visual studio code just works better when you're working within a folder.

20
00:01:06,210 --> 00:01:08,940
So you need to do this from this button under the Star welcome tab.

21
00:01:09,000 --> 00:01:11,790
Or if that's not open, you go to file open folder.

22
00:01:12,300 --> 00:01:14,430
And then you can create yourself a new folder.

23
00:01:14,430 --> 00:01:21,060
And hey, I'm gonna cool mine triple x and then I'm gonna hit enter and go into it and then select the

24
00:01:21,060 --> 00:01:21,540
folder.

25
00:01:21,930 --> 00:01:24,290
And you can see it's just gonna open up like this.

26
00:01:24,300 --> 00:01:28,800
You can see over the left hand side there's the explorer windows gonna show all the files inside your

27
00:01:28,800 --> 00:01:32,880
folder and other things are going to just work a little bit easier.

28
00:01:33,360 --> 00:01:39,660
Now let's jump in and start writing our code inside Visual Studio Code against come up to file and then

29
00:01:39,750 --> 00:01:40,560
new file.

30
00:01:41,040 --> 00:01:48,120
Now let's immediately save this file by hitting control s or command s if you're on Mac and that Save

31
00:01:48,120 --> 00:01:58,530
the File has triple X dot c p p by saving a file as dot c p visual studio code is going to understand

32
00:01:58,560 --> 00:02:04,260
that we're working with a C++ file, as we can see down in the bottom right corner of its interface.

33
00:02:04,410 --> 00:02:08,850
And it's also going to provide some code formatting for us, as we'll see in a moment.

34
00:02:09,360 --> 00:02:10,710
Now follow along with me here.

35
00:02:10,740 --> 00:02:17,810
We're going to start by typing out I and T for NS and notice how he starts this with a lower case I.

36
00:02:18,290 --> 00:02:19,700
Okay, so it's case sensitive.

37
00:02:19,710 --> 00:02:23,610
We need to be aware of how we type our code after ends.

38
00:02:23,640 --> 00:02:29,910
We're going to add a space and spaces in our code, unknown as whitespace after our space we're gonna

39
00:02:29,940 --> 00:02:31,310
type out main.

40
00:02:31,860 --> 00:02:36,210
So this is the name of the function and this is gonna be followed by some parentheses.

41
00:02:36,630 --> 00:02:41,790
When we add the parentheses visual studio code, you put our cursor on the end of the line and when

42
00:02:41,790 --> 00:02:48,630
it does, we can hit enter to go into a new line and we can open some curly braces or curly brackets.

43
00:02:48,990 --> 00:02:53,970
If we start by putting in a left curly bracket, this whole studio code is going to help us out by filling

44
00:02:53,970 --> 00:02:58,080
in the right curly bracket and put our cursor in between these brackets.

45
00:02:58,100 --> 00:03:03,630
And we can hit enter to go onto a new line and the right curly brace goes to the fourth line here.

46
00:03:04,080 --> 00:03:08,100
And on the third line, our cursor is now slightly indented here.

47
00:03:08,580 --> 00:03:14,010
Here we can type return space zero and finish the line with a semicolon.

48
00:03:14,220 --> 00:03:16,290
So this is the int main function.

49
00:03:16,290 --> 00:03:18,840
Let's hit control s and save our work.

50
00:03:20,140 --> 00:03:22,500
Notice that our code here is all different colors.

51
00:03:22,800 --> 00:03:25,110
And this is what I mean by code formatting.

52
00:03:25,590 --> 00:03:27,690
Now let's just break down this main function.

53
00:03:27,690 --> 00:03:35,790
Why do we start with NS so into short for integer and an integer is just a whole number without any

54
00:03:35,790 --> 00:03:36,960
decimal places.

55
00:03:37,220 --> 00:03:41,850
So functions in C++ can return values to the operating system.

56
00:03:42,270 --> 00:03:49,590
And in our case Int Main is telling us that it returns an integer and we're actually doing this.

57
00:03:49,590 --> 00:03:51,900
We are returning zero here.

58
00:03:52,650 --> 00:03:54,120
We'll come back to this in a second.

59
00:03:54,450 --> 00:04:00,450
After int we have Main, which is the name of the function and then we have these parentheses here said

60
00:04:00,450 --> 00:04:04,050
the parentheses are used to pass arguments into the function.

61
00:04:04,350 --> 00:04:08,520
Now we're not doing this right now, but we will be covering this for out the section.

62
00:04:08,950 --> 00:04:12,960
And next, we have the curly braces and the code within the curly braces.

63
00:04:12,990 --> 00:04:18,960
This is known as the function body, which at the moment only has our return statement here.

64
00:04:19,410 --> 00:04:25,680
So the main function is special because its return value is used as an exit status to the operating

65
00:04:25,680 --> 00:04:26,250
system.

66
00:04:26,610 --> 00:04:30,270
So zero signals that the program has run successfully.

67
00:04:30,540 --> 00:04:33,420
While any of a value will signal an error.

68
00:04:34,050 --> 00:04:37,680
So what can we expect when we compile our code and run this program?

69
00:04:38,040 --> 00:04:38,880
Well, let's just find out.

70
00:04:38,940 --> 00:04:44,910
Remember, we always want to save our work before compiling so hit control s we can even turn on autosave

71
00:04:45,090 --> 00:04:50,020
by coming up to file and then checking autosave here to compile our work.

72
00:04:50,040 --> 00:04:51,660
We're gonna come to the Explorer here.

73
00:04:52,110 --> 00:04:56,230
We can right click triple x dot CBP and open it in the terminal.

74
00:05:00,780 --> 00:05:04,620
Notice that the terminal shows the directory of where we saved our file.

75
00:05:05,040 --> 00:05:08,380
We can compile our code on a Mackle Linux by typing G.

76
00:05:08,580 --> 00:05:16,960
Plus plus space triple X dot CBP space minus O for the output file name, which will be triple X.

77
00:05:17,490 --> 00:05:24,060
Now I'm on Windows, so if you're following on windows we can just type C L space triple x dot c.p.

78
00:05:24,570 --> 00:05:28,280
So this compiles our code and to run our program on Makela.

79
00:05:28,320 --> 00:05:33,930
Next you're gonna want to type dot forward slash triple X, but if you're following on windows we can

80
00:05:33,930 --> 00:05:35,720
just type triple X.

81
00:05:36,470 --> 00:05:38,790
And this opens and runs our program.

82
00:05:39,270 --> 00:05:44,130
Now, this doesn't look like it's done anything, but our program has just run and it's exited without

83
00:05:44,190 --> 00:05:45,030
any errors.

84
00:05:45,480 --> 00:05:48,210
And currently, this is all our program does at this stage.

85
00:05:48,250 --> 00:05:50,730
So this is totally expected behavior.

86
00:05:51,270 --> 00:05:57,870
So earlier in this lesson, I mentioned that spaces in our code are known as white space.

87
00:05:58,140 --> 00:06:03,090
And right now, I want you to do some exploring on your own to see how it affects your code.

88
00:06:03,630 --> 00:06:08,910
Try writing all of the code that makes up the int main function onto one line.

89
00:06:09,270 --> 00:06:12,900
Then compile and run your code to see what happens.

90
00:06:13,140 --> 00:06:17,370
Does it even compile support here for a few moments to try it?

91
00:06:20,450 --> 00:06:22,280
Okay, so let's take a look at this together.

92
00:06:22,520 --> 00:06:24,710
I've made my line of code a bit drastic here.

93
00:06:24,920 --> 00:06:26,690
We've lots of white spaces between it.

94
00:06:27,170 --> 00:06:29,420
Now, if I come down to the terminal and compile.

95
00:06:29,570 --> 00:06:32,780
Remember, we always want to save our work if you don't have autosave on.

96
00:06:33,410 --> 00:06:36,920
We want to compile by typing S.L triple x dot CVP.

97
00:06:36,920 --> 00:06:38,930
If you are on windows that will compile.

98
00:06:38,960 --> 00:06:41,840
Remember, we can use the arrows on the terminal as well.

99
00:06:42,080 --> 00:06:48,920
But notice we've compiled with no issue here, even if we put our code onto different lines and have

100
00:06:48,920 --> 00:06:50,450
lots of whitespace between it.

101
00:06:50,870 --> 00:06:53,900
We still don't have any issue when we compile.

102
00:06:54,110 --> 00:06:58,160
And this is because the compiler completely ignores whitespace.

103
00:06:58,730 --> 00:07:02,930
Now, this doesn't mean I want you to be unorganized and completely reckless with your code.

104
00:07:03,290 --> 00:07:09,380
I'm just making you aware that the compiler is going to completely ignore the white space in your code.

105
00:07:10,070 --> 00:07:13,190
And there's an exception here that we will see in the next lesson.

106
00:07:13,670 --> 00:07:14,910
But I'm going to leave you with this.

107
00:07:14,930 --> 00:07:21,290
Before we move onto the next lesson, I want you to reorganize your code to match my code we see here.

108
00:07:21,320 --> 00:07:25,220
And this is the exact same way we set it up at the start of the lesson.

109
00:07:25,520 --> 00:07:28,610
Then once you've done this, we can move on to the next lesson.
