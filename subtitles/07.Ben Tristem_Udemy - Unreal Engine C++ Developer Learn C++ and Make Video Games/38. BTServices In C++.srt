1
00:00:04,580 --> 00:00:08,810
Hello and welcome in this lecture, we're gonna be introducing a new thing in the behavior tree, the

2
00:00:08,870 --> 00:00:09,650
services.

3
00:00:09,980 --> 00:00:14,600
We're going to find out what services are, how they help us with persistent running behavior and how

4
00:00:14,600 --> 00:00:16,340
we can write our own in C++.

5
00:00:16,460 --> 00:00:17,210
Let's dive right in.

6
00:00:18,260 --> 00:00:23,780
Now, there are only a few pieces of logic left in our control that aren't in our behavior tree.

7
00:00:24,260 --> 00:00:27,010
One of these is setting the start location.

8
00:00:27,020 --> 00:00:34,130
This I still want to set here from the A.I. controller, but things like tick now that I would like

9
00:00:34,130 --> 00:00:35,990
to do from within a behavior tree.

10
00:00:36,470 --> 00:00:38,120
What do I want to do here?

11
00:00:38,210 --> 00:00:40,010
How do I get it to do?

12
00:00:40,020 --> 00:00:45,560
And so I play a location to update the last known player location.

13
00:00:46,340 --> 00:00:51,380
Both of these we can do with something called a blueprint service.

14
00:00:51,740 --> 00:00:56,030
So let's go over to our blueprints and see what's going on.

15
00:00:56,060 --> 00:01:03,170
So if I go to my A.I. and open up the behavior tree, dog it the main window, then I need to show you

16
00:01:03,170 --> 00:01:03,890
what services.

17
00:01:03,890 --> 00:01:05,090
We've never used one before.

18
00:01:05,600 --> 00:01:14,240
And it's essentially a way of running something every take or every so often whenever a particular path

19
00:01:14,270 --> 00:01:14,750
is active.

20
00:01:14,840 --> 00:01:22,160
So if I had a service here on the chase behavior, then something would some code would be able to run

21
00:01:22,820 --> 00:01:26,900
all the time that the chase behavior is active, whether we're moving, shooting, waiting, any of

22
00:01:26,900 --> 00:01:27,410
these things.

23
00:01:27,800 --> 00:01:28,820
It would always be running.

24
00:01:28,850 --> 00:01:31,010
But if we're an investigate, it would not be.

25
00:01:31,550 --> 00:01:35,600
So this is exactly the kind of situation that we're looking to use a service.

26
00:01:35,960 --> 00:01:38,070
Now, let's have an example service.

27
00:01:38,090 --> 00:01:44,540
One thing that we notice when we are playing is that the once the A.I. comes within range of us and

28
00:01:44,540 --> 00:01:48,110
we move around, he's not rotating to look at us.

29
00:01:48,110 --> 00:01:51,470
And we can fix that with an already built in service here.

30
00:01:51,500 --> 00:01:51,680
So.

31
00:01:51,780 --> 00:01:58,600
Right, click on this note and go to add service and look for the default focus service.

32
00:01:58,640 --> 00:01:59,470
You can see it's a different color.

33
00:01:59,470 --> 00:02:00,020
It's green.

34
00:02:00,590 --> 00:02:05,360
And if we select that default service, it also goes underneath these sequence nodes as opposed to above

35
00:02:05,360 --> 00:02:06,680
them, which is what the decorators do.

36
00:02:07,550 --> 00:02:11,930
So with the default focus selected, you can then choose what you want to focus on.

37
00:02:11,960 --> 00:02:14,720
In this case, we want to focus on the player location.

38
00:02:15,500 --> 00:02:17,270
Go ahead and hit save hit play.

39
00:02:17,720 --> 00:02:23,150
And now if we go and have a look and move around, you can see he's rotating to follow us.

40
00:02:23,930 --> 00:02:24,620
Cool stuff.

41
00:02:25,160 --> 00:02:32,150
Now we want to be able to implement a similar service in C++ that will update our player location all

42
00:02:32,150 --> 00:02:36,500
the while and update our last known player location.

43
00:02:36,950 --> 00:02:38,780
While we are chasing.

44
00:02:39,080 --> 00:02:41,720
So we're gonna do that as two separate services.

45
00:02:41,750 --> 00:02:42,930
And you can see how that all.

46
00:02:43,220 --> 00:02:48,380
So automatically services can make things a little bit more efficient than doing it in tech because

47
00:02:48,800 --> 00:02:52,100
you can only run the last known play location.

48
00:02:52,460 --> 00:02:54,740
When you're in the right part of the baby tree.

49
00:02:55,010 --> 00:02:56,630
So let's go over to the sandbox.

50
00:02:56,960 --> 00:02:58,160
Get the content browser.

51
00:02:58,190 --> 00:03:02,670
Add new new C++ class going gonna show all classes and look for what our options are here.

52
00:03:03,230 --> 00:03:04,990
We're looking for BTR service.

53
00:03:05,090 --> 00:03:11,180
And then there are a couple of options, just like we had with our B.T. task.

54
00:03:11,720 --> 00:03:16,370
We've got the blackboard base and we're actually gonna want the blackboard base because we want to know

55
00:03:16,370 --> 00:03:18,200
which key we should be updating.

56
00:03:18,200 --> 00:03:20,660
For example, should it be the player location?

57
00:03:20,720 --> 00:03:23,000
Should it be the last known player location?

58
00:03:23,540 --> 00:03:27,690
So we gonna go and hit next on this one with the blackboard base selected.

59
00:03:28,280 --> 00:03:34,180
And we're going to call this BEATTIES service underscore player location like so.

60
00:03:34,180 --> 00:03:34,690
And go ahead.

61
00:03:35,030 --> 00:03:36,320
Create that class.

62
00:03:36,860 --> 00:03:43,010
So once we're done compiling, we gonna go over into Visual Studio Code and you can see that we have

63
00:03:43,010 --> 00:03:48,360
got this BEATTIES service player location, which is inheriting from the service blackboard based court.

64
00:03:48,410 --> 00:03:49,080
That's what we wanted.

65
00:03:49,130 --> 00:03:51,710
Now, what functionality we're gonna move into this?

66
00:03:52,250 --> 00:03:59,300
Well, I'm gonna try and move the simplest functionality possible, which is just to set the value of

67
00:03:59,300 --> 00:04:06,170
the basically last known play location, though this key will be configured in the behavior tree, not

68
00:04:06,320 --> 00:04:12,410
here in a plain text, but it's going to get the play a porn location and set it to a blackboard key.

69
00:04:12,440 --> 00:04:14,090
And it's not going to do any of the line of sight.

70
00:04:14,120 --> 00:04:20,630
Checking reason being, if we are running it in our behavior tree only when we are chasing, then we

71
00:04:20,630 --> 00:04:21,930
don't need the line of sight check.

72
00:04:21,950 --> 00:04:25,310
We can see the player that's automatically we know that's the case.

73
00:04:25,670 --> 00:04:28,850
So another simplification there for doing it in a service.

74
00:04:29,720 --> 00:04:31,640
So this should be fairly straightforward.

75
00:04:31,790 --> 00:04:36,650
If we know how to get a method, call here in the B.T. service.

76
00:04:37,400 --> 00:04:39,770
So let's go and have a look at our BEATTIES service.

77
00:04:40,040 --> 00:04:41,930
H to see what is available there.

78
00:04:41,930 --> 00:04:42,950
What's the documentation?

79
00:04:42,950 --> 00:04:43,940
What can we do?

80
00:04:44,330 --> 00:04:48,620
The main methods here, you can see are on become relevant on cease relevant.

81
00:04:49,040 --> 00:04:51,140
The take note and on search start.

82
00:04:51,170 --> 00:04:51,980
On search start.

83
00:04:52,040 --> 00:04:53,210
We're not particularly interested in.

84
00:04:53,480 --> 00:04:54,230
But take note.

85
00:04:54,290 --> 00:04:54,770
Yes.

86
00:04:54,830 --> 00:05:00,680
That is where we are going to get an update all the time that this service is on an active path.

87
00:05:01,280 --> 00:05:02,780
So that's when we're going to want to implement.

88
00:05:03,140 --> 00:05:05,990
We go in, search through this files, find the full signature here.

89
00:05:06,590 --> 00:05:08,000
We can see is here.

90
00:05:08,000 --> 00:05:09,300
Let's see what section is it in?

91
00:05:09,320 --> 00:05:10,580
It's under the protected section.

92
00:05:10,970 --> 00:05:16,670
So we're gonna go to BEATTIES service that we've created and create a protected section.

93
00:05:17,700 --> 00:05:23,940
And paste in, it's automatically an override here because BEATTIES service was inheriting it itself

94
00:05:23,970 --> 00:05:24,800
from a parent class.

95
00:05:24,840 --> 00:05:27,480
But no harm in overriding it again ourselves.

96
00:05:27,900 --> 00:05:32,940
We can do a control shift P to create the implementation and then we want to call to super.

97
00:05:33,030 --> 00:05:39,270
So we want super tech node and we want to pass in our own comp and a node memory.

98
00:05:39,720 --> 00:05:41,460
And let's see, there's some other things in here.

99
00:05:41,490 --> 00:05:43,260
We have a Delta seconds as well.

100
00:05:43,280 --> 00:05:44,850
That's what we need to pass up as well.

101
00:05:45,000 --> 00:05:46,920
And finally, finish off with a semicolon.

102
00:05:47,010 --> 00:05:49,930
Should be an issue of implementation of take node.

103
00:05:50,070 --> 00:05:55,560
Now, in here, we basically want to do that behavior from the A.I. controller, S.P., the one where

104
00:05:55,560 --> 00:05:59,430
we are getting the blackboard component, then setting a value as a vector.

105
00:05:59,820 --> 00:06:03,990
Well, we know how to get Blackbaud components from ONA component references.

106
00:06:04,290 --> 00:06:05,430
So that's pretty straightforward.

107
00:06:05,460 --> 00:06:11,610
We're just going to do the owner comp dots and then we can do the get Blackbaud components, remembering

108
00:06:11,610 --> 00:06:17,790
that we need to hash include in here for the behavior tree forward slash Blackbaud component.

109
00:06:18,210 --> 00:06:20,190
Then we can use our arrow operator.

110
00:06:20,730 --> 00:06:27,360
And what we should be able to do here is just to set value as vector and then we need a key.

111
00:06:27,420 --> 00:06:30,510
Well we know how to deal with this, but let's just refresh our memory.

112
00:06:30,510 --> 00:06:33,270
If we go to our BEATTIES service, underscore Blackbaud Base.

113
00:06:33,660 --> 00:06:35,970
You can see it same as with the task.

114
00:06:36,000 --> 00:06:38,310
We've got the get selected Blackbaud Key.

115
00:06:38,460 --> 00:06:39,950
So what we're gonna use gets slightly.

116
00:06:39,960 --> 00:06:44,130
Blackbaud Key gets the key that was selected over in the behavior tree.

117
00:06:44,250 --> 00:06:48,600
And then we want our vector value where we're going to get that will exact the same as the A.I. controller.

118
00:06:48,600 --> 00:06:52,710
We're going to be getting the play a pawn first and foremost up here at the top.

119
00:06:53,200 --> 00:06:55,740
Then we need to check whether or not this is null.

120
00:06:55,770 --> 00:06:57,870
And we also need to include our game play static.

121
00:06:57,870 --> 00:07:00,180
So let's make sure we have the game play.

122
00:07:00,180 --> 00:07:05,970
Static's include from the A.I. controllers, GPP included in our player service player location.

123
00:07:06,960 --> 00:07:07,540
Then we're going to do.

124
00:07:07,560 --> 00:07:15,540
And if the player porn is equal to no pointer, then what we're going to want to do is again return

125
00:07:15,630 --> 00:07:16,150
early here.

126
00:07:16,170 --> 00:07:17,160
It returns void.

127
00:07:17,820 --> 00:07:19,830
So we can just do a quick early return.

128
00:07:20,300 --> 00:07:26,370
Then we can use our player pawn here to simply get the actor location.

129
00:07:27,000 --> 00:07:30,060
And we may need to do and include here.

130
00:07:30,060 --> 00:07:30,900
We'll see how we go.

131
00:07:31,000 --> 00:07:32,940
Well, it doesn't hurt to be safe, does it?

132
00:07:32,970 --> 00:07:34,440
And explicit about these things.

133
00:07:34,440 --> 00:07:38,870
So we're gonna do a include for the game framework and then a forward slash.

134
00:07:38,880 --> 00:07:40,620
It's going to be porn dot h.

135
00:07:40,680 --> 00:07:43,800
So that we can make sure that we've got everything in order here.

136
00:07:43,830 --> 00:07:47,370
And then we're just setting the value as back to that should be all we need.

137
00:07:47,400 --> 00:07:49,170
Let's go and compile and see if this works.

138
00:07:49,320 --> 00:07:50,340
In fact, one more thing.

139
00:07:50,370 --> 00:07:54,690
We probably want a nice pretty name, so we should have a constructor here.

140
00:07:54,780 --> 00:08:01,200
So I going to create a public section with the constructor, which is gonna be the name of the class.

141
00:08:01,380 --> 00:08:03,780
And then we go ahead and create that implementation.

142
00:08:03,810 --> 00:08:09,330
I'm gonna bring my implementation above the implementation for TEQ Node and then we're gonna have set

143
00:08:09,330 --> 00:08:17,430
the node name equal to it should be update player location and let's build and see if that works.

144
00:08:17,750 --> 00:08:19,320
Let's look at a missing semicolon.

145
00:08:19,320 --> 00:08:20,040
Let's try that again.

146
00:08:20,280 --> 00:08:25,860
Once that's compiled successfully, we can go over into our enemy A.I. And as well as the setting focus,

147
00:08:25,960 --> 00:08:31,650
we'll add a new service which we've got showing up here as the play location, which where the pretty

148
00:08:31,650 --> 00:08:34,640
name basically comes up as update player location.

149
00:08:34,650 --> 00:08:40,710
You can see that it wants to it tells you the frequency of ticking every point for two point six seconds.

150
00:08:40,740 --> 00:08:44,000
That's better than using tick because we know tick runs every frame here.

151
00:08:44,010 --> 00:08:46,650
This is running less frequently, which is a good thing.

152
00:08:46,740 --> 00:08:53,010
And we can go into the details and create a blackboard key dropdown and select that we want to update

153
00:08:53,010 --> 00:08:59,040
is not only the play location, but the last known player location, because that will happen every

154
00:08:59,040 --> 00:09:02,700
frame as long as we are chasing and that is the behavior that we want.

155
00:09:02,940 --> 00:09:08,940
So one more service node we want to go ahead and create is going to do the elite controllers behavior

156
00:09:09,060 --> 00:09:15,810
go down and to take and see what's left for us to do here is to update the player location conditional

157
00:09:16,110 --> 00:09:17,520
on whether we have line of sight.

158
00:09:17,550 --> 00:09:19,410
So we want it to update the player location.

159
00:09:19,440 --> 00:09:21,420
If we have line of sight, clear the location.

160
00:09:21,450 --> 00:09:22,290
If we don't.

161
00:09:22,630 --> 00:09:23,880
So that's gonna be a new service.

162
00:09:23,910 --> 00:09:25,530
Notice slightly different behavior.

163
00:09:25,980 --> 00:09:28,250
We're going to add new new C++ class.

164
00:09:28,320 --> 00:09:29,970
We're gonna go to show all classes.

165
00:09:29,970 --> 00:09:35,150
And again, we're gonna do BEATTIES service, underscore Blackbaud bases our base class and we're gonna

166
00:09:35,160 --> 00:09:39,660
call it B.T. Service Underscore.

167
00:09:40,690 --> 00:09:43,780
Player location if seen.

168
00:09:44,350 --> 00:09:49,240
And go ahead and create that class, because this is all stuff you've mostly seen before.

169
00:09:49,360 --> 00:09:51,760
It's gonna be your challenge to implement this service.

170
00:09:52,120 --> 00:09:58,630
So you're going to implement tech node using the code over in the A.I. controller as your guide.

171
00:09:59,140 --> 00:10:04,360
You're going to need to get hold of the A.I. controller, a pointer from within the Beatty service.

172
00:10:04,390 --> 00:10:07,670
Now, this is exactly the same as we did in the Beatty task.

173
00:10:07,730 --> 00:10:11,140
So use that as a guidance for getting hold of the AI controller pointer.

174
00:10:11,740 --> 00:10:15,280
You'll need the AI controller pointer in order to check for line of sight.

175
00:10:15,280 --> 00:10:18,410
Remember, line of sight is a method on the A.I. controller.

176
00:10:19,300 --> 00:10:25,660
And then you need to update or clear the key depending on your line of sight check and then place this

177
00:10:25,660 --> 00:10:27,280
node in the behavior tree.

178
00:10:27,280 --> 00:10:31,990
Where do you think is going to be the right level of the behavior tree for this service to run?

179
00:10:32,260 --> 00:10:33,640
Have a little think about that.

180
00:10:33,730 --> 00:10:36,900
To the weight of a chicken scratch pause video and have a go.

181
00:10:38,120 --> 00:10:38,840
Hey, welcome back.

182
00:10:38,870 --> 00:10:44,480
So this has opened up a new BEATTIES service over in Visual Studio Code.

183
00:10:44,930 --> 00:10:52,280
Now, it's pretty much gonna be identical in the header, so I'm gonna go ahead and copy that over into

184
00:10:52,280 --> 00:10:53,930
our newly generated header.

185
00:10:54,500 --> 00:11:00,080
The exception being that we need to change the name of the constructor to match.

186
00:11:00,560 --> 00:11:07,460
Now we're going to create an implementation for the constructor and give it a node name to update player

187
00:11:08,180 --> 00:11:10,170
location if seen.

188
00:11:11,090 --> 00:11:12,650
And add a semicolon on the end here.

189
00:11:12,740 --> 00:11:18,500
Let's not forget that this time, then back into the C++, going to implement TEQ node as well.

190
00:11:19,010 --> 00:11:26,360
And I'm just gonna copy across if we can find ourselves the play location CVP and just gonna copy it,

191
00:11:26,480 --> 00:11:32,620
cross the call to super and the getting of the play a porn and the checking of the null return.

192
00:11:32,630 --> 00:11:35,900
In fact I'm going to copy the whole body and we're going to modify it from there.

193
00:11:36,740 --> 00:11:38,370
So copying that across.

194
00:11:38,540 --> 00:11:44,410
And also we're going to be copying the access to the blackboard component with it in the include for

195
00:11:44,420 --> 00:11:45,530
the blackboard component.

196
00:11:45,950 --> 00:11:49,910
The gameplay static's and the porn, because we need access to all of those.

197
00:11:50,240 --> 00:11:52,990
In fact, much of the functionality is shared here.

198
00:11:53,330 --> 00:11:56,690
You could think about having them somehow share this code.

199
00:11:56,720 --> 00:12:00,200
But I think there's not so much duplication that we care enough.

200
00:12:00,980 --> 00:12:05,990
So what we're gonna have to do here is also check that we have an A.I. controller song and do it.

201
00:12:06,050 --> 00:12:16,640
If the owner components on a comp dot get a guy owner is equal to null pointer, then we're going to

202
00:12:16,640 --> 00:12:18,470
wants to go ahead and return.

203
00:12:18,560 --> 00:12:24,350
At this stage, then the next thing we're gonna want to do is check out visibility.

204
00:12:24,380 --> 00:12:32,090
So we're gonna do an if owner comp dot gets a A.I. owner and then we're gonna do an arrow here and we

205
00:12:32,090 --> 00:12:34,430
need to include AI control here.

206
00:12:34,460 --> 00:12:36,680
So it's gonna be hash include.

207
00:12:38,280 --> 00:12:47,550
And then it's going to be a high controller, so h then we want to do line and see what's the correct

208
00:12:47,580 --> 00:12:48,480
usage here.

209
00:12:48,510 --> 00:12:54,660
If we go over to the controllers, GPP, its line of sight to is what we want.

210
00:12:54,680 --> 00:13:00,140
So line of sight to then we need to do line of sight to the player porn.

211
00:13:00,390 --> 00:13:02,670
In this case, do we have line of sight to play a porn?

212
00:13:03,390 --> 00:13:04,710
Is that what we're doing over in the TPP?

213
00:13:04,860 --> 00:13:05,830
Let's just double check that.

214
00:13:05,850 --> 00:13:06,480
Yes, we are.

215
00:13:07,350 --> 00:13:11,220
Then we're going to want to go ahead and set the values differently.

216
00:13:11,760 --> 00:13:14,410
So we're setting the vector value to the player porn.

217
00:13:14,430 --> 00:13:15,780
Get actor location.

218
00:13:15,810 --> 00:13:20,730
Yes, that's if we've got line of sight or else if we do not have line of sight, we know that we need

219
00:13:20,730 --> 00:13:22,230
to be clearing that value.

220
00:13:22,680 --> 00:13:25,860
So we're going to be still getting the owner component get Blackbaud component.

221
00:13:26,160 --> 00:13:31,980
Then it's gonna be clear value and we're going to be clearing the value of the selected Blackbaud Key

222
00:13:31,980 --> 00:13:32,340
still.

223
00:13:32,730 --> 00:13:38,520
And that should pretty much cover us for the implementation of player location if seen.

224
00:13:38,990 --> 00:13:41,190
Let's go and compile and see if it works.

225
00:13:41,370 --> 00:13:42,710
Well, a compilation succeeded.

226
00:13:42,720 --> 00:13:44,580
Let's go in to the behavior tree.

227
00:13:44,670 --> 00:13:50,430
Now, at the level I want this to run, it is basically at the top level in the initial selector because

228
00:13:50,430 --> 00:13:53,310
I wanted to be updating the player location.

229
00:13:53,400 --> 00:13:57,960
Basically all the time, because we need to be able to abort any of these other behaviors based on the

230
00:13:57,960 --> 00:13:59,370
play location being set.

231
00:13:59,820 --> 00:14:02,640
So we need to be able to set an unsettled at any time.

232
00:14:03,120 --> 00:14:08,650
So I'm going to go and right click on the top level selector ad service at the player location if seen.

233
00:14:09,420 --> 00:14:13,820
And then we're gonna need to select that service node and select its Blackbaud Key, which is gonna

234
00:14:13,830 --> 00:14:15,060
be our player location.

235
00:14:15,840 --> 00:14:20,430
So that would say in the play location, the update player location, the modem one is updating the

236
00:14:20,460 --> 00:14:22,050
last known player location.

237
00:14:22,770 --> 00:14:29,250
And we should now be able to go into our A.I. controller and essentially remove all of this code in

238
00:14:29,250 --> 00:14:33,570
tick because it's been superseded by our services instead.

239
00:14:33,960 --> 00:14:36,300
And we can go ahead and compile and see if that works.

240
00:14:36,390 --> 00:14:41,040
Let's go over to the editor and play and see if we've still got an enemy coming up to us.

241
00:14:41,100 --> 00:14:46,560
He's coming running to us, loses sight, then comes back at us, starts shooting.

242
00:14:46,620 --> 00:14:46,790
Yep.

243
00:14:46,860 --> 00:14:53,010
Basically, everything is working as it was doing before, except now it's doing it entirely via services

244
00:14:53,070 --> 00:14:55,590
that we wrote for ourselves in C++.

245
00:14:55,920 --> 00:15:01,050
Next lecture, we're gonna be fixing that pesky bug where the A.I. continues to shoot and eventually

246
00:15:01,110 --> 00:15:03,090
manages to kill itself off.

247
00:15:03,420 --> 00:15:03,990
I'll see you there.
