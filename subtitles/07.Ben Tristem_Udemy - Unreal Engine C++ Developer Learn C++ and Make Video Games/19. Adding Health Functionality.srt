1
00:00:04,270 --> 00:00:09,070
In this lecture, we'll continue from where we were in the health component and implement its functionality.

2
00:00:09,250 --> 00:00:14,500
So first and the begin play, we want to set the current health value to be equal to the default health.

3
00:00:14,590 --> 00:00:17,870
That's why we've exposed the default health value to the editor.

4
00:00:17,980 --> 00:00:22,810
We can easily update this, test the values there, and it will be updated whenever we start the game

5
00:00:22,870 --> 00:00:24,040
for easy testing.

6
00:00:24,400 --> 00:00:30,310
We'll also need a reference to the tank game mode based class, as well as the use of some of the gameplay

7
00:00:30,340 --> 00:00:32,560
static's functionalities at the top of the class.

8
00:00:32,700 --> 00:00:34,840
That's going to include the tune tanks.

9
00:00:38,980 --> 00:00:42,010
Tank game mode based on age and then the kismet.

10
00:00:42,100 --> 00:00:44,470
Forward slash gameplay static's at thought age.

11
00:00:44,950 --> 00:00:46,480
Then back into Biggin play function.

12
00:00:46,540 --> 00:00:53,170
We want to fill our game mode RF variable, which will be equal to a cast of type a tank game mode base.

13
00:00:53,560 --> 00:00:55,810
And this will use the You game play static's.

14
00:01:02,760 --> 00:01:07,860
So, of course, this is getting the context of the current world and finding the current active game

15
00:01:07,860 --> 00:01:14,280
mode in that world, cast that back to our A tank game mode base just to make sure we have a valid reference.

16
00:01:14,310 --> 00:01:15,300
We can use this later.

17
00:01:15,570 --> 00:01:16,270
Then we'll be using.

18
00:01:16,290 --> 00:01:22,740
I would get ONA function to return a reference to the owning actor and we'll bind our take damage function

19
00:01:22,860 --> 00:01:23,910
to the Ontake.

20
00:01:23,970 --> 00:01:29,670
Any damage function in the same way that we did with our hit functionality previously in the projectile

21
00:01:29,670 --> 00:01:30,150
class.

22
00:01:30,240 --> 00:01:33,390
So to check the understanding of binding functions in C++.

23
00:01:33,420 --> 00:01:34,260
Here's a quick challenge.

24
00:01:34,260 --> 00:01:40,860
Will you use the Ontake any damage function in the owner reference to create a dynamic binding for our

25
00:01:40,890 --> 00:01:42,240
take damage function?

26
00:01:42,540 --> 00:01:47,790
If you get stuck here, take a look at the projectile class for a refresher as the syntax will be the

27
00:01:47,790 --> 00:01:48,120
same.

28
00:01:48,210 --> 00:01:50,420
Just swapping out the relevant functions.

29
00:01:51,880 --> 00:01:54,530
Okay, so let's check that we have this implemented as intended.

30
00:01:54,680 --> 00:02:00,260
I've already provided the first two steps, which is to use the only reference and use the on take any

31
00:02:00,260 --> 00:02:01,010
damage function.

32
00:02:01,100 --> 00:02:03,620
The next big headstart as we're using a dynamic binding.

33
00:02:03,680 --> 00:02:08,810
So we'll use the dot at dynamic and then similar to our projectile implementation.

34
00:02:08,900 --> 00:02:13,750
We're passing in the reference to this and binding the function to the address of our U.

35
00:02:13,760 --> 00:02:14,600
Health component.

36
00:02:14,750 --> 00:02:17,420
And the function take damage and that's it.

37
00:02:17,480 --> 00:02:23,750
So now whenever the on take any damage function is called on our earning actor, the function in our

38
00:02:23,750 --> 00:02:26,930
health component will also be called, which will be the take damage.

39
00:02:27,230 --> 00:02:29,090
The final steps will be to implement.

40
00:02:29,170 --> 00:02:30,620
I would take damage, functionality.

41
00:02:30,860 --> 00:02:35,870
And this is going to be very simple, but I kind of love the simple flexibility of something like this.

42
00:02:36,080 --> 00:02:41,060
And again, going back to the context of creating this for a small game injury, it will be the use

43
00:02:41,060 --> 00:02:45,200
of components like this that really help speed up the development in a short period of time.

44
00:02:45,440 --> 00:02:50,750
And that really allow you to get the most out of the time spent in the gym, as we'll see in just a

45
00:02:50,750 --> 00:02:51,260
moment.

46
00:02:51,560 --> 00:02:56,600
So the first thing that we want to do in our new function here is check the damage value being passed

47
00:02:56,600 --> 00:03:02,810
in isn't equal to zero just because if that is the result, you're guessing there's likely an era of

48
00:03:02,840 --> 00:03:05,820
input, meaning that we probably don't want to do anything here.

49
00:03:06,410 --> 00:03:11,240
I've also chosen here to check that it isn't zero, rather than checking that it's more than zero,

50
00:03:11,450 --> 00:03:17,360
as this will also allow us to extend this to use it as a kind of add health functionality rather than

51
00:03:17,360 --> 00:03:20,090
just taking health away by passing in a negative value.

52
00:03:20,420 --> 00:03:21,800
Which again, is going to be perfect.

53
00:03:21,830 --> 00:03:25,400
If you wanted to add some kind of health, pickup's to your game later.

54
00:03:25,910 --> 00:03:32,990
So the next if a non zero value is Pastan, we're going to set the health to its new value using the

55
00:03:33,020 --> 00:03:39,680
F math clump function to clump the health to B the current health, minus the damage clumped between

56
00:03:39,740 --> 00:03:43,670
zero point zero F and the default health value that we have.

57
00:03:44,120 --> 00:03:50,300
So this is just to ensure that we cannot drop below zero or cheat the system and get above the default

58
00:03:50,330 --> 00:03:51,590
or maximum health cap.

59
00:03:52,220 --> 00:03:58,370
Also note that we need to specify has the point zero f to specify this as a flight value.

60
00:03:58,640 --> 00:04:03,960
If we tried passing in an argument as just zero, we'd get an error that the F math could not deduce

61
00:04:03,980 --> 00:04:06,770
the template argument of an integer type.

62
00:04:07,370 --> 00:04:07,560
Okay.

63
00:04:07,630 --> 00:04:09,690
So we now have our updated health value.

64
00:04:09,950 --> 00:04:13,310
So all that's left to do is check if our owner is still alive.

65
00:04:13,340 --> 00:04:19,400
So if the health is less than or equal to zero, then we can check that we have a valid reference to

66
00:04:19,400 --> 00:04:20,150
our game mode.

67
00:04:22,010 --> 00:04:25,370
If we do that, we want to cool the game mode ref actor died function.

68
00:04:27,800 --> 00:04:31,160
And passing our owner as the argument that we have here.

69
00:04:32,790 --> 00:04:37,780
Then in an EL statement, if we don't have a valid gay made reference, we're just going to create a

70
00:04:37,780 --> 00:04:44,050
temporary log of type borning and print that we don't have a valid game reference in our health component.

71
00:04:47,680 --> 00:04:50,650
And just a small recap here over a little bit of what's happening.

72
00:04:50,710 --> 00:04:53,940
We're just checking that the health is less than or equal to zero.

73
00:04:54,280 --> 00:04:59,680
Even though just above we have clumped this to be a minimum of zero for the health value.

74
00:04:59,980 --> 00:05:02,580
This is partly out of kind of programming.

75
00:05:02,590 --> 00:05:07,780
How about, I suppose, but also if something changes in the code above later on in development, it

76
00:05:07,780 --> 00:05:11,770
will be nice to know just here that even F.T. Health does fall below zero.

77
00:05:11,950 --> 00:05:16,660
That scenario will also be accounted for, captured and classed as a death state.

78
00:05:17,320 --> 00:05:22,000
And this is just to account for things like other developers joining the team, maybe needing to change

79
00:05:22,000 --> 00:05:25,790
something here and not quite looking through all of the code and accounting for that clump.

80
00:05:25,930 --> 00:05:30,130
Removing it for whatever reason and then having things like that, like I said, not being captured

81
00:05:30,370 --> 00:05:31,150
in this if statement.

82
00:05:32,230 --> 00:05:36,910
Next, the keynote amongst you may have noticed we're not passing anything to our owner actor to let

83
00:05:36,910 --> 00:05:41,030
them know that they've died, and that's purely due to the complexity of our game.

84
00:05:41,080 --> 00:05:47,260
So we know we'll only be using this on two of the pawn types and both of them are kind of relevant to

85
00:05:47,260 --> 00:05:49,350
the game flow via the game mode class.

86
00:05:49,660 --> 00:05:54,670
So rather than passing off most Promesse, just once the game mode and one to the pawn classes, we

87
00:05:54,670 --> 00:05:57,480
can just use our override here of the owner.

88
00:05:57,670 --> 00:06:03,460
Let the game mode know that something has happened and one of the pawn classes was destroyed and then

89
00:06:03,520 --> 00:06:06,190
a lighter game mode to process the results accordingly.

90
00:06:06,370 --> 00:06:11,050
If you did want to expand this to things like having the props have health components, then you can

91
00:06:11,050 --> 00:06:16,880
use the same kind of implementation to cool some sort of destroy function on the prop to play act,

92
00:06:16,960 --> 00:06:20,830
the kind of effects relating to that destruction.

93
00:06:21,610 --> 00:06:27,040
And then one final thing that we could do is return to our game mode class and just copy in another

94
00:06:27,060 --> 00:06:27,700
under a log.

95
00:06:32,570 --> 00:06:36,060
And change the text to something like a porn dyed.

96
00:06:38,840 --> 00:06:42,900
If we then go back and compile this in the editor, we should be able to see all of this working.

97
00:06:42,920 --> 00:06:47,180
So we'll be returning to the game mode a little bit later to implement the full functionality.

98
00:06:47,450 --> 00:06:52,790
But this will at least now, at last, a test that things are registering damage are accounting for

99
00:06:52,790 --> 00:06:53,150
the house.

100
00:06:53,210 --> 00:06:58,160
Because if we remember back in the projecto class, we are already calling the applied damage function,

101
00:06:58,550 --> 00:07:01,400
which will fire the any damage function on our POUM.

102
00:07:01,670 --> 00:07:05,420
So the connection for applying and receiving damage is already in place.

103
00:07:06,560 --> 00:07:12,290
So back in the ed, I have that compiled and we can go and see if we are getting our expected output

104
00:07:12,290 --> 00:07:17,180
logs to make those tests, one that has finished compiling will first need to go to both of our classes,

105
00:07:17,180 --> 00:07:18,980
the tank and the turret classes.

106
00:07:24,530 --> 00:07:28,460
Navigate to the component section and add a new health component to them.

107
00:07:32,410 --> 00:07:36,010
Be sure to check that the default health has a value assigned to it.

108
00:07:36,340 --> 00:07:41,110
And with that done for both of the classes, we can then go and Pressplay and check the output log to

109
00:07:41,110 --> 00:07:45,340
see the game mode updating when a pawn has its health drop below zero.

110
00:07:45,670 --> 00:07:46,290
And that began.

111
00:07:46,330 --> 00:07:49,030
We can see this is a working and printing.

112
00:07:49,030 --> 00:07:53,500
The new log is firing a little bit more than it should because we currently don't have a check for whether

113
00:07:53,890 --> 00:07:55,060
or not the pawn is ready dead.

114
00:07:55,360 --> 00:07:57,310
So we can go back and we can pretty quickly fix this.

115
00:07:58,680 --> 00:08:04,980
So what we're going to do is just her and the statement will add and or check to the end of this f check

116
00:08:05,040 --> 00:08:10,920
to check if the health is less than or equal to zero, because, again, we can then be sure that we

117
00:08:10,920 --> 00:08:15,420
won't be calling this function on anything which would be classed as a dead actor.

118
00:08:15,810 --> 00:08:20,710
So we can compile this again and just double-Check that the message is only being called once purple.

119
00:08:21,030 --> 00:08:23,700
So we can see that is triggering as expected.

120
00:08:23,700 --> 00:08:27,040
It will stop once both of the Poons have had this function called once.

121
00:08:27,060 --> 00:08:30,210
And set the health to anything zero or or less.

122
00:08:30,510 --> 00:08:35,250
So we cannot be sure that we won't have any kind of strange things happening in the future, like pawns

123
00:08:35,250 --> 00:08:40,590
being blown up or playing the death effects more than once if multiple projectiles hit too soon before

124
00:08:40,590 --> 00:08:41,250
that removed.

125
00:08:41,370 --> 00:08:47,160
So we now have our projectiles and our health system linked up and working so we can start going back

126
00:08:47,160 --> 00:08:49,800
through and getting more of the gamefly in place.
