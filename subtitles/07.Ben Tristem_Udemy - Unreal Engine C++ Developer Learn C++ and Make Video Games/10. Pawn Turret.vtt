WEBVTT
1
00:00:04.250 --> 00:00:07.460
We now have our player pool feeling much nicer to control.

2
00:00:07.670 --> 00:00:12.410
So in this lecture, we'll be creating our pawns here at class to give this something to play around

3
00:00:12.410 --> 00:00:15.020
with, to begin creating our target class.

4
00:00:15.260 --> 00:00:19.100
We'll be deriving this from our pawn base, C++ class.

5
00:00:19.190 --> 00:00:23.120
So back inside of the Poons folder, I'm just gonna give you a very small challenge.

6
00:00:23.330 --> 00:00:29.060
This shouldn't be a problem at all, but it's just to reconfirm that the process of deriving a classroom

7
00:00:29.060 --> 00:00:30.530
C++ might make sense.

8
00:00:30.950 --> 00:00:36.020
So what I want you to do is pulls video in a moment and go ahead and just drive a new class from pwned

9
00:00:36.020 --> 00:00:38.360
base and name it POUM to it.

10
00:00:38.480 --> 00:00:43.700
So just check that you can remember the process of clicks, get that done, and also make sure that

11
00:00:43.700 --> 00:00:45.680
it is in the Palms folder.

12
00:00:45.800 --> 00:00:47.270
So go ahead and pulls the video.

13
00:00:48.650 --> 00:00:49.810
Okay, so to do this.

14
00:00:50.070 --> 00:00:56.770
Just going to right click choose create C++ class and find our porn base from these search results.

15
00:00:57.700 --> 00:00:59.170
Well, name this one a porn tart.

16
00:00:59.260 --> 00:01:02.950
And again, we'll just double check that it's correctly placed in the Poons voter.

17
00:01:03.730 --> 00:01:09.250
If we then click to create the class and like last home that we derived, a C++ class were going to

18
00:01:09.250 --> 00:01:12.160
be expecting a Foud compilation here.

19
00:01:12.490 --> 00:01:16.690
And we just need to go back over to our idee to make those same changes again.

20
00:01:17.170 --> 00:01:20.800
So if we go over and open the porn turret header and the code file.

21
00:01:22.080 --> 00:01:23.130
Course inside of the head.

22
00:01:23.310 --> 00:01:28.910
We just need to remember to remove the opponent's voter from the beginning of the include path.

23
00:01:29.070 --> 00:01:30.580
And you can recomposed this now if you'd like.

24
00:01:30.600 --> 00:01:32.370
We will be doing that at the end of the lecture.

25
00:01:32.700 --> 00:01:36.810
We did it previously just to kind of confirm that that was the issue that we were having.

26
00:01:36.960 --> 00:01:38.650
Now that we know that this is going to fix anyway.

27
00:01:38.850 --> 00:01:39.680
I'm just gonna carry on.

28
00:01:39.780 --> 00:01:42.390
I would jump straight into our implementation.

29
00:01:42.960 --> 00:01:49.290
So the way that our talk class is going to be working will be kind of very base at levels of A.I. is

30
00:01:49.320 --> 00:01:50.910
going to need to know two things.

31
00:01:51.060 --> 00:01:55.650
And it will then need to react accordingly as these times are going to be stationary.

32
00:01:55.680 --> 00:02:00.540
They'll be constantly checking to discover if the player tank is within a certain range.

33
00:02:00.900 --> 00:02:07.140
And then if it is based on a kind of fire rate restriction, the targets will then fire every so many

34
00:02:07.140 --> 00:02:07.740
seconds.

35
00:02:08.100 --> 00:02:12.930
So that's just a very high level overview of what we're gonna be looking to get working by the end of

36
00:02:12.930 --> 00:02:15.360
implementing this class in the project.

37
00:02:15.660 --> 00:02:18.540
So first, very similar to our tank class.

38
00:02:18.750 --> 00:02:21.740
We'll need our private, public and protected sections.

39
00:02:21.810 --> 00:02:22.930
So just declare those nine.

40
00:02:23.490 --> 00:02:27.330
We'll also need our begin play and our tick event function in here.

41
00:02:27.390 --> 00:02:33.450
But we won't need the input component function as this is going to be an AA class and therefore it won't

42
00:02:33.450 --> 00:02:36.630
need to receive any kind of player input.

43
00:02:37.110 --> 00:02:42.300
Next or just returned to the tank class and will copy these functions and paste the declarations into

44
00:02:42.300 --> 00:02:42.910
our header.

45
00:02:44.200 --> 00:02:45.840
This time, of course, we're using the copy.

46
00:02:45.910 --> 00:02:49.300
Not the cut function as we want to keep these in the tank class.

47
00:02:50.670 --> 00:02:54.280
And just make sure to place the tick function in the public section.

48
00:02:54.610 --> 00:02:58.640
And they begin play back in the protected section, just as a quick side note as well.

49
00:02:58.720 --> 00:03:04.510
If you've ever wondered why, when we create a new class, the tech is always located in the public

50
00:03:04.510 --> 00:03:08.110
section and the begin play is in the protected section.

51
00:03:08.320 --> 00:03:12.460
But both are available to be overridden by derived classes.

52
00:03:13.090 --> 00:03:17.270
That's just because when the actor is created, it creates a virtual void begin to play.

53
00:03:17.560 --> 00:03:19.810
And the derived classes to override.

54
00:03:20.260 --> 00:03:22.300
And this is going to be a topic kind of by itself.

55
00:03:22.360 --> 00:03:26.500
That would be diving into deeper and a little bit later in the in the section.

56
00:03:26.980 --> 00:03:31.260
But in short, though, the different sections that we've been declaring, the private protected and

57
00:03:31.270 --> 00:03:36.880
public sections act as different levels of class security for variables and functions.

58
00:03:37.090 --> 00:03:43.780
So private is the most secure when nothing outside of the class can access a property market as private

59
00:03:44.260 --> 00:03:50.680
public is the least secure, underlies any class with a valid reference to the second class.

60
00:03:50.710 --> 00:03:56.350
Then access those properties which were declared inside, including things like calling functions and

61
00:03:56.350 --> 00:04:01.540
changing variables and then protected is somewhat unique and is used for properties that need to be

62
00:04:01.540 --> 00:04:06.940
hidden from outside classes but will need to be available in a derived child classes.

63
00:04:07.150 --> 00:04:12.940
That's why the take function is made public, because this also has the availability to child classes,

64
00:04:13.330 --> 00:04:17.050
philosophy and other classes which aren't necessarily derived from the same class.

65
00:04:17.350 --> 00:04:23.230
Loser need to access the Delta time specifically in the tech functions by doing things like updating

66
00:04:23.290 --> 00:04:26.890
time dilation when altering things like slowmotion and stuff like that.

67
00:04:27.160 --> 00:04:33.010
Whereas the biggest play is only ever code internally from either the classes declared in or the child

68
00:04:33.010 --> 00:04:34.540
classes of that.

69
00:04:34.990 --> 00:04:37.590
So just a quick side note that really back on topic.

70
00:04:38.240 --> 00:04:43.830
I'm just going to copy the implementation from the tank code file as well and paste this into our turret

71
00:04:43.830 --> 00:04:44.620
to code file.

72
00:04:47.380 --> 00:04:51.920
And just remember that we need to replace any reference to a porn tank with porn turret.

73
00:04:52.420 --> 00:04:56.890
Also ensuring to delete the cool to the rotate and move in the tech.

74
00:04:57.160 --> 00:04:59.700
And then we're gonna be good to go back in the header file.

75
00:04:59.800 --> 00:05:04.060
We're also going to create a void function named check fire condition.

76
00:05:04.360 --> 00:05:08.800
This one won't be used outside of this class and we don't have any child toric classes.

77
00:05:09.040 --> 00:05:14.650
So as I've just kind of given the overview of the different sections, we know that based on those criteria,

78
00:05:14.680 --> 00:05:17.020
we can place this in our private section.

79
00:05:17.500 --> 00:05:22.750
And the way that we're going to be using this to avoid the need to calculate on the update or the tick

80
00:05:22.780 --> 00:05:26.740
event constantly to see whether the fire right condition has been met.

81
00:05:26.920 --> 00:05:32.140
We're going to take our first look at using time as time is a really useful for gameplay programming

82
00:05:32.200 --> 00:05:35.530
as they allow us to perform events based on it elapsed time.

83
00:05:35.860 --> 00:05:41.350
In this example, it will be a kind of fire rate and that's gonna be every X amount of seconds based

84
00:05:41.350 --> 00:05:45.610
on the fire rate that we give the function time to implement a timer.

85
00:05:45.610 --> 00:05:50.470
And plus plus we first need to use something called an F timer handle, which I'll name fire.

86
00:05:50.470 --> 00:05:50.790
Right.

87
00:05:50.880 --> 00:05:51.460
Timer handle.

88
00:05:51.800 --> 00:05:57.730
And this just allows us to bind and unbind our timer, which will be either looping or cooled at certain

89
00:05:57.730 --> 00:05:58.300
intervals.

90
00:05:58.570 --> 00:06:03.730
And it's the timer handle that allows us to create these bindings and control when to start them or

91
00:06:03.730 --> 00:06:09.400
stop them again will only ever be using these in our C++ code so we can drop these into the private

92
00:06:09.400 --> 00:06:17.290
section as well and not worry about any of the property specifies next to implement our check via condition

93
00:06:17.290 --> 00:06:23.320
function or just use the control shift and P shortcut and select implement to get our version of this.

94
00:06:23.530 --> 00:06:29.080
Then we're gonna want to ensure that our timer is created and bound to our check fire condition as soon

95
00:06:29.080 --> 00:06:33.850
as the game begins, because we want this class to be reacting pretty much immediately as soon as we

96
00:06:33.850 --> 00:06:34.330
start play.

97
00:06:34.540 --> 00:06:39.010
So of course, this means that we can make use of the game play function that we've brought over previously.

98
00:06:39.400 --> 00:06:42.220
Before doing that, we're going to go to the top and out of our includes.

99
00:06:42.550 --> 00:06:48.610
The timer functionality that we want is find in the kismet forward slash gameplay static dot hate library.

100
00:06:48.880 --> 00:06:50.080
So we'll include this first.

101
00:06:50.380 --> 00:06:55.390
In case the editor wanted to provide any kind of snippet hints, when we start using these, then to

102
00:06:55.390 --> 00:06:58.190
implement the timer, we want to use the get word function.

103
00:06:58.420 --> 00:07:02.950
Then the get time a manager, which is a kind of global time, a manager for the game.

104
00:07:03.220 --> 00:07:06.220
So you can add multiple timers and this will kind of handle that in the background.

105
00:07:06.570 --> 00:07:11.890
And you may also see this done using another Short-Handed version, which is get world time a manager,

106
00:07:12.280 --> 00:07:16.930
which will return the exact same thing, which is the current time a manager created for that world

107
00:07:17.260 --> 00:07:18.250
or that you object.

108
00:07:18.730 --> 00:07:22.810
Both of these are exactly the same, but you tend to fall into habit of remembering one over the other.

109
00:07:23.140 --> 00:07:28.030
And I think I've just used the get world class so many times that this one is just become my default.

110
00:07:28.600 --> 00:07:32.500
Inside of our time manager reference, we now have turned from the function call.

111
00:07:32.770 --> 00:07:35.470
We want to set the timer that we are creating.

112
00:07:35.680 --> 00:07:40.930
So this is basically telling the world at time a manager to create, a new timer to track, and we'll

113
00:07:40.930 --> 00:07:45.380
be using our timer handle to bind and control this during gameplay.

114
00:07:45.550 --> 00:07:47.960
So the set time a function has several ovulates.

115
00:07:48.160 --> 00:07:50.440
The first is going to be our timer handle that.

116
00:07:50.440 --> 00:07:53.770
We've created then a reference to our class.

117
00:07:54.070 --> 00:07:58.910
It will then need to be assigned to the function to cool, which will be our pawn at Target.

118
00:07:59.410 --> 00:08:03.100
And of course, it's going to be on the pawn target, the check fire condition.

119
00:08:03.490 --> 00:08:08.530
Also note as well that when you're assigning a function to a timer, you do not include the brackets.

120
00:08:08.860 --> 00:08:14.320
Then after this, we need to provide a flight value for the rate at which the timer should be called.

121
00:08:14.500 --> 00:08:19.210
So if we head back over to our head afar, we can create this flight variable and we'll name this one

122
00:08:19.270 --> 00:08:23.750
fire rate and our prefilled s with a value to begin of two.

123
00:08:24.340 --> 00:08:29.110
So this means that if the player is in range, when we've gone through all of our checks, we would

124
00:08:29.110 --> 00:08:32.080
expect our turrets to be firing every two seconds.

125
00:08:32.530 --> 00:08:36.940
This is also going to be another variable which would be really useful to have as an exposed variable

126
00:08:37.060 --> 00:08:39.550
in the editor, as we've seen in the previous lecture.

127
00:08:39.580 --> 00:08:44.920
And this will allow us to really quickly change and iterate through different prototypes or enemy types.

128
00:08:45.040 --> 00:08:46.930
So I will assign this a new property.

129
00:08:47.300 --> 00:08:48.520
We'll make this edit anywhere.

130
00:08:48.760 --> 00:08:51.010
Sign that the blueprint read write access.

131
00:08:52.450 --> 00:08:53.660
Place it in a category.

132
00:08:53.720 --> 00:08:54.490
Named Combat.

133
00:08:55.770 --> 00:09:00.660
And provide the ally private access that matter, specify something to note as well.

134
00:09:00.930 --> 00:09:06.120
Some of you may have noticed that we've been exposing a lot of the variables to blueprint rewrites as

135
00:09:06.120 --> 00:09:12.240
this is really just kind of planning and future proofing for potential iterations of features that you

136
00:09:12.240 --> 00:09:15.860
may want to test or project in blueprints.

137
00:09:16.380 --> 00:09:19.290
In this project, we probably won't be doing that.

138
00:09:19.380 --> 00:09:24.750
So if you did want to skip the blueprint specifiers on any of the variables that will save you from

139
00:09:24.750 --> 00:09:28.740
requiring the private matter, specify to because that's really the reason we need to use that at the

140
00:09:28.740 --> 00:09:31.240
moment is to make it visible and blueprints.

141
00:09:31.440 --> 00:09:34.230
So you could safely nest this in a private section.

142
00:09:34.440 --> 00:09:39.600
Don't make it blueprint accessible tool, and you wouldn't need the private matter specify in general.

143
00:09:39.840 --> 00:09:44.490
I just like to include these as it saves me, adding them later, needing to recompile everything if

144
00:09:44.490 --> 00:09:48.240
I do ever want to very quickly test or prototype something and blueprints.

145
00:09:48.420 --> 00:09:52.290
For example, I've mentioned a few times that side task you might want to do when you've completed the

146
00:09:52.290 --> 00:09:58.060
project would be to slow down certain tasks by reducing their fire rate within a certain range of a

147
00:09:58.060 --> 00:09:59.070
power up or something.

148
00:09:59.310 --> 00:10:01.880
And generally it's a lot easier to prototype some blueprints.

149
00:10:02.160 --> 00:10:06.810
So having these exposed now, even if we don't use them immediately, means that you can very quickly

150
00:10:06.810 --> 00:10:08.010
and easily drop in.

151
00:10:08.130 --> 00:10:08.910
Try that change.

152
00:10:08.940 --> 00:10:11.100
See if it works and then put it into C++ code.

153
00:10:11.400 --> 00:10:13.230
So I just wanted to mention that very quickly.

154
00:10:13.380 --> 00:10:18.860
We can now use our new variable in the set time, a function within going to set whether this timer

155
00:10:18.930 --> 00:10:21.060
should loop as the next argument.

156
00:10:21.250 --> 00:10:26.040
We can set this to true so that we can make sure that this updates every two seconds rather than just

157
00:10:26.040 --> 00:10:28.320
firing once and then stopping the timer.

158
00:10:28.980 --> 00:10:34.590
We also just noticed a small typo that this was meant to be fire rate, timer handle rather than just

159
00:10:34.590 --> 00:10:35.550
fire rate timer.

160
00:10:35.940 --> 00:10:38.150
So make sure to fix that if you followed along there.

161
00:10:38.730 --> 00:10:40.400
And then this puts us in a nice position.

162
00:10:40.410 --> 00:10:45.570
Just consider for the moment what the Czech fire condition should actually be doing when it's called

163
00:10:45.600 --> 00:10:47.430
every X amount of seconds.

164
00:10:47.910 --> 00:10:53.160
So we could have just created a function named Fire and had this update on the tick function.

165
00:10:53.250 --> 00:10:57.510
And then when a certain condition is met, we can fire the projectile from the turret.

166
00:10:57.870 --> 00:11:02.310
However, we already know that the tank class will also need a fire functionality.

167
00:11:02.580 --> 00:11:06.390
So this is something that we can create in the base class and then reuse later.

168
00:11:06.660 --> 00:11:09.720
So instead, I've opted to go for the Czech fire condition function here.

169
00:11:10.170 --> 00:11:16.020
This will be responsible for checking that the desired conditions would be met to allow the firing functionality

170
00:11:16.200 --> 00:11:18.360
to be called on the parent class.

171
00:11:18.750 --> 00:11:23.460
This will also help avoid having our turret look like a really kind of dummy eye, which just fires

172
00:11:23.490 --> 00:11:29.030
every Xman of seconds in a direction, regardless of whether the player is alive or in range, and it'll

173
00:11:29.050 --> 00:11:31.110
just make it look that much more reactive.

174
00:11:31.380 --> 00:11:34.980
So from that description alone, we know that for this function, we're gonna want to come back and

175
00:11:34.980 --> 00:11:39.350
check first if the play is valid and whether it's still classed as being alive.

176
00:11:39.450 --> 00:11:44.550
We haven't actually implemented that yet, but it makes sense to consider something like that as there's

177
00:11:44.580 --> 00:11:48.990
nothing that looks more amateur than having your enemies kind of continue to wail on your dead player,

178
00:11:49.230 --> 00:11:51.060
even in a small game jam injury.

179
00:11:51.630 --> 00:11:51.830
No.

180
00:11:51.840 --> 00:11:57.060
Going to add a range checking logic so that the player will have some chance to move around, get in

181
00:11:57.060 --> 00:12:02.910
and out of the tart's range of fire and add that kind of small element of tactics for the player, as

182
00:12:02.910 --> 00:12:07.800
well as just making it slightly more fair for the player as being bombarded from outside of the view

183
00:12:07.830 --> 00:12:11.010
range can be somewhat annoying in in games like this.

184
00:12:11.370 --> 00:12:15.960
So these comments are just going to remind us of what we're doing when we come back in the next lecture.

185
00:12:16.520 --> 00:12:21.180
And we can see how we can split this logic out to maintain the readability of the class.

186
00:12:21.510 --> 00:12:26.640
So for now, let's add just a standard unreal engine log inside of the check fire condition function

187
00:12:26.850 --> 00:12:28.680
so that we can see our timer in action.

188
00:12:28.800 --> 00:12:33.690
We'll make this a temporary log of time warning and we'll just make the text Scheidt Fire condition

189
00:12:33.690 --> 00:12:34.100
checked.

190
00:12:35.610 --> 00:12:38.970
So after reopening the editor, I'll just compile the project.

191
00:12:39.210 --> 00:12:44.400
Wait for the compiler to successfully complete and then be sure to drag a tart class into the level.

192
00:12:44.580 --> 00:12:46.500
Don't need to worry about the visuals or anything at the moment.

193
00:12:46.500 --> 00:12:48.840
We just need the functional agencies to take on this.

194
00:12:49.320 --> 00:12:50.600
And just a quick heads up here.

195
00:12:50.610 --> 00:12:55.740
I am using the oat and P shortcut to enter play mode without pressing the button in the editor.

196
00:12:56.130 --> 00:12:59.040
And then we can just quickly check the output logged on here.

197
00:12:59.100 --> 00:13:04.380
And we can see that every two seconds our timer is being called and the check fire condition function

198
00:13:04.380 --> 00:13:06.000
is creating our output log.
