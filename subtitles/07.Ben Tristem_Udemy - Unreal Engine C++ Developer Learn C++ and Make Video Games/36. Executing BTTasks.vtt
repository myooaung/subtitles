WEBVTT
1
00:00:04.470 --> 00:00:09.150
Hello and welcome and this lecture, we've got our A.I. that is following us around the world.

2
00:00:09.170 --> 00:00:11.570
We'll go and investigate when he loses sight of me.

3
00:00:11.580 --> 00:00:13.500
So it is quite hard to lose.

4
00:00:13.920 --> 00:00:17.610
But if I go to many corners away, he's not going to be able to keep up.

5
00:00:18.270 --> 00:00:24.960
And eventually he's going to lose interest and go back to his start location over there.

6
00:00:25.560 --> 00:00:30.870
That's what we're gonna be implementing in this lecture by finishing off our behavior tree task.

7
00:00:31.200 --> 00:00:32.750
Let's dive in and see how it's done.

8
00:00:33.690 --> 00:00:38.340
So we want to get our task to execute, to actually do something.

9
00:00:38.370 --> 00:00:42.240
And particularly we wanted to be able to clear that Blackbaud value do what it says on the tin.

10
00:00:42.960 --> 00:00:44.700
So how do we go about doing that?

11
00:00:45.000 --> 00:00:49.230
Well, for that, we need to go up to our base class and have a look at what's implemented there.

12
00:00:49.260 --> 00:00:55.140
In fact, we need to go up one level higher, which as you can see from the inheritance of The View

13
00:00:55.140 --> 00:00:56.130
Beaty task.

14
00:00:56.910 --> 00:00:57.810
Blackboard base.

15
00:00:57.930 --> 00:01:00.330
Above that, we have the UBC task node.

16
00:01:00.750 --> 00:01:05.340
So let's use F twelve to navigate to the implementation there.

17
00:01:05.340 --> 00:01:09.180
And if you scroll up to the top of the Beatty task node dot h.

18
00:01:09.510 --> 00:01:13.740
Head of file, you can see there's the information about this class.

19
00:01:13.830 --> 00:01:18.660
And the most important thing is that these are the virtual functions that we're most likely to want

20
00:01:18.660 --> 00:01:19.770
to implement.

21
00:01:20.430 --> 00:01:22.530
So the first one is execute task.

22
00:01:22.560 --> 00:01:25.860
This is called when the task starts to execute.

23
00:01:26.670 --> 00:01:32.730
We then have a Bortz task, which is when it's decided that we need to stop executing, for example,

24
00:01:32.760 --> 00:01:35.430
because a condition has become false.

25
00:01:35.490 --> 00:01:37.080
And we've got that signaling set up.

26
00:01:37.080 --> 00:01:39.960
So it aborts this task tech task.

27
00:01:40.020 --> 00:01:43.730
Happens all the time that the task is executing, but not the first take.

28
00:01:43.770 --> 00:01:49.410
So the first tick we'll call execute task thereafter will keep calling TEQ task every time.

29
00:01:50.370 --> 00:01:54.050
And that's for behaviors that might run for longer than one tick.

30
00:01:54.120 --> 00:01:57.240
Such as moving to an enemy might take multiple takes.

31
00:01:57.600 --> 00:02:00.390
So take task allows us to do something every tick.

32
00:02:00.780 --> 00:02:05.760
And on message is for other things other than aborting that might send a message to this task.

33
00:02:06.030 --> 00:02:09.290
We don't really have to worry about this particular function.

34
00:02:09.300 --> 00:02:11.930
So the first three are really the ones were more interested in.

35
00:02:12.650 --> 00:02:17.460
And seeing as our task is simply just going to clear the blackboard value.

36
00:02:17.640 --> 00:02:20.280
As soon as it is executed, then then it's going to finish.

37
00:02:20.400 --> 00:02:23.940
Straight away doesn't need to do things across multiple takes.

38
00:02:24.310 --> 00:02:26.880
We're interested in the execute task.

39
00:02:27.390 --> 00:02:32.280
So if we search in this head of file for execute task, you can see the full signature is here.

40
00:02:33.030 --> 00:02:37.230
And the return type here is this IBT node result.

41
00:02:38.310 --> 00:02:39.810
And it takes in two things.

42
00:02:39.960 --> 00:02:43.470
The owner components and the node memory.

43
00:02:43.950 --> 00:02:47.280
Now, the reason it takes in node memory is a little bit complicated.

44
00:02:47.310 --> 00:02:54.210
But the important thing to know here is that a task class ID or task class instance.

45
00:02:54.550 --> 00:02:57.340
There's only one of them Per.

46
00:02:57.780 --> 00:03:01.380
All of the blackboards, essentially, they get shared between everything.

47
00:03:01.920 --> 00:03:08.580
Which is why if you want to save some information that's related to a node in one particular behavior

48
00:03:08.580 --> 00:03:13.440
tree, then what you need to do is store it in this memory pointer.

49
00:03:13.800 --> 00:03:16.210
But we're not going to be doing anything related to that.

50
00:03:16.210 --> 00:03:18.570
It's a little bit more advanced to need to do that.

51
00:03:18.810 --> 00:03:23.880
And there are other ways to get around this, such as allowing unreal to create multiple instances for

52
00:03:23.880 --> 00:03:26.520
every behavior tree, which might be a little bit Nito or not.

53
00:03:26.790 --> 00:03:30.420
But this is a slightly more efficient way and we don't have to worry about it.

54
00:03:30.480 --> 00:03:35.640
Ultimately, what we're interested in is the fact that we can get to our own component, the behavior

55
00:03:35.640 --> 00:03:39.640
tree component, and from there we can get to other things such as the porn, et cetera.

56
00:03:40.110 --> 00:03:43.170
But that's also the subject of another lecture.

57
00:03:43.470 --> 00:03:48.840
So what's interesting and important now is just to implement and execute task.

58
00:03:49.050 --> 00:03:53.340
So I'm gonna copy the signature, go over to our clear blackboard value.

59
00:03:53.400 --> 00:03:54.270
Dot h.

60
00:03:54.720 --> 00:03:56.190
And let's just see, is this public?

61
00:03:56.400 --> 00:03:59.910
No, I think this is going to be protected because it's in the default section.

62
00:04:00.210 --> 00:04:05.700
So in a create ourselves a protected section and pasted in there and then we're gonna go ahead and create

63
00:04:05.700 --> 00:04:07.980
the imp or put an override just to make sure.

64
00:04:08.020 --> 00:04:08.490
Be safe.

65
00:04:08.580 --> 00:04:14.490
And then we're going to create an implementation over in the C++ remembering that we always want to

66
00:04:14.490 --> 00:04:21.510
be calling to super when we're overriding so super execute task with the owner components and the node

67
00:04:21.510 --> 00:04:24.390
memory being called up to our parent here.

68
00:04:24.600 --> 00:04:30.660
And then what we want to do is get hold of our blackboard so that we can clear the key.

69
00:04:30.840 --> 00:04:32.240
And there's two things that are important here.

70
00:04:32.250 --> 00:04:32.640
Fassel.

71
00:04:32.880 --> 00:04:35.130
How do we know what Key was selected?

72
00:04:35.160 --> 00:04:41.250
Well, if we go to our blackboard based on H, you can see that one of the methods there is get selected

73
00:04:41.250 --> 00:04:47.130
blackboard key so you can easily just call this ADC plus plus get selected blackboard key and that's

74
00:04:47.130 --> 00:04:48.210
going to return.

75
00:04:48.270 --> 00:04:54.030
If we hover over it, it returns an F name, the F name of the blackboard key that was selected in the

76
00:04:54.120 --> 00:04:54.750
behavior tree.

77
00:04:54.810 --> 00:04:59.430
Now the other thing we need to do is to be actually actually able to get hold of the blackboard related

78
00:04:59.430 --> 00:05:00.280
to this behavior tree.

79
00:05:00.300 --> 00:05:02.190
So for that, we've got our own comp.

80
00:05:02.610 --> 00:05:07.830
Now, notice here that the type of owner comp being passed in here is actually a reference, not a pointer.

81
00:05:08.190 --> 00:05:08.910
So it can't be.

82
00:05:08.910 --> 00:05:10.560
No, for a start, that's great.

83
00:05:10.860 --> 00:05:15.570
But it also means that we need to use the dot operator rather than the at the arrow operator because

84
00:05:15.570 --> 00:05:17.250
we're not using a pointer.

85
00:05:18.300 --> 00:05:21.870
And from here, we can simply get blackboard components.

86
00:05:22.050 --> 00:05:24.400
So that just gets the blackboard component if you hover over it.

87
00:05:24.420 --> 00:05:29.260
This one is a pointer to a blackboard component, so you will need to use arrow operators.

88
00:05:29.580 --> 00:05:32.690
So we already know how to clear keys on blackboard.

89
00:05:32.920 --> 00:05:33.270
Opponents.

90
00:05:33.310 --> 00:05:34.540
That's going to be your challenge.

91
00:05:34.630 --> 00:05:36.720
So hopefully the challenge is not too complicated.

92
00:05:36.740 --> 00:05:38.470
You want to clear the selected key.

93
00:05:38.900 --> 00:05:41.590
We you can check where we've done this before.

94
00:05:42.280 --> 00:05:44.920
Do you need any includes in order to do this?

95
00:05:44.950 --> 00:05:53.020
Maybe the blackboard needs and include use the key selected in your behavior tree as the key that we

96
00:05:53.020 --> 00:05:53.530
want to clear.

97
00:05:53.560 --> 00:05:55.360
So pause the video and have a go.

98
00:05:55.620 --> 00:05:56.500
Kay, welcome back.

99
00:05:56.890 --> 00:05:58.750
So let's give this a shot.

100
00:05:58.810 --> 00:06:01.670
So the first thing is we've got our blackboard components.

101
00:06:01.750 --> 00:06:03.040
Use the arrow operator here.

102
00:06:03.400 --> 00:06:04.390
Nothing is coming up.

103
00:06:04.690 --> 00:06:11.440
So I'm assuming that I need and indeed, there's some red squiggles I need a hash include here to do

104
00:06:11.500 --> 00:06:15.970
the behavior tree and then the blackboard component here and now.

105
00:06:15.970 --> 00:06:21.280
Hopefully my autocomplete should be working, which will allow me to have the clear.

106
00:06:21.340 --> 00:06:23.590
Let's just try and refresh our memories.

107
00:06:23.590 --> 00:06:25.210
Where have we done this before?

108
00:06:25.240 --> 00:06:30.160
If we go over to Chuter, I controller see P.P. and have a look at what we've got here.

109
00:06:30.160 --> 00:06:31.500
We've got clear value.

110
00:06:31.510 --> 00:06:32.760
That's the one we're looking for.

111
00:06:32.770 --> 00:06:35.440
So let's try that clear value.

112
00:06:35.530 --> 00:06:36.520
And what's it taken?

113
00:06:36.600 --> 00:06:39.730
It takes in either an F key or an F name.

114
00:06:39.800 --> 00:06:41.200
Great F name we can get.

115
00:06:41.620 --> 00:06:43.390
And where did we say we could get that with the.

116
00:06:43.450 --> 00:06:48.040
Get selected blackboard key that is on this class because it's in the parent class.

117
00:06:48.070 --> 00:06:50.350
So get selected blackboard key.

118
00:06:50.420 --> 00:06:51.280
And it's as simple as that.

119
00:06:51.370 --> 00:06:53.890
We're clearing the value of the selected blackboard key.

120
00:06:54.010 --> 00:06:55.570
Now, one final thing we need to do.

121
00:06:55.600 --> 00:06:59.800
This wasn't partly a challenge, so don't worry if he didn't know this is that we need to return because

122
00:06:59.800 --> 00:07:04.690
there is a return value for our clear blackboard value execute task.

123
00:07:04.750 --> 00:07:06.820
And the return value is quite interesting.

124
00:07:06.850 --> 00:07:07.390
Let's have a look.

125
00:07:07.400 --> 00:07:12.640
Let's follow it with an F 12th and see what different statuses we can return from our execute task.

126
00:07:12.700 --> 00:07:14.410
Now, the first one is succeeded.

127
00:07:14.440 --> 00:07:14.750
Great.

128
00:07:14.770 --> 00:07:19.540
That basically signals to the behavior tree that this node is finished executing and we can move on

129
00:07:19.870 --> 00:07:20.830
to the next one.

130
00:07:20.860 --> 00:07:21.880
Failed again.

131
00:07:21.970 --> 00:07:25.360
This is a finished so we can move on to the next one.

132
00:07:25.780 --> 00:07:27.460
But this time it's saying that it failed.

133
00:07:27.490 --> 00:07:34.270
So that gives the different indications to, for example, our sequence nodes or our selected nodes

134
00:07:34.360 --> 00:07:36.550
as to what those nodes should actually be doing.

135
00:07:37.420 --> 00:07:42.250
Then we have got aborted, which is basically the same as failure.

136
00:07:42.970 --> 00:07:44.650
And we have in progress.

137
00:07:45.070 --> 00:07:51.400
If you return in progress from an execute task, it's basically going to say you've got to keep calling

138
00:07:51.400 --> 00:07:55.420
tick until I tell you otherwise, until I say that I have finished.

139
00:07:55.870 --> 00:07:59.830
Now, we're not gonna be using this, but it's good to keep in mind that if you need to create a task

140
00:07:59.920 --> 00:08:06.070
that is long running, will run across multiple ticks, then we're going to have to return in progress.

141
00:08:06.100 --> 00:08:08.020
But as I said, we want succeeded.

142
00:08:08.620 --> 00:08:10.270
So let's go in and do that.

143
00:08:10.270 --> 00:08:12.510
Return EBIT node result.

144
00:08:13.570 --> 00:08:14.350
Colon, colon.

145
00:08:14.730 --> 00:08:19.210
And it is going to be succeeded because we succeeded to clear that value.

146
00:08:19.240 --> 00:08:20.350
Basically, no matter what.

147
00:08:20.950 --> 00:08:25.480
So we can go ahead and save all of this, go over into the editor and hit compile.

148
00:08:25.510 --> 00:08:31.570
And when that's complete, let's go ahead and open up our A.I. and the behavior tree.

149
00:08:31.780 --> 00:08:34.900
So where's that one BTC enemy A.I. it to the main window.

150
00:08:34.990 --> 00:08:40.780
And it's how we got our clear Blackbaud value should now be able to allow us to move to last known location,

151
00:08:40.780 --> 00:08:47.050
clear the blackboard value, wait for five and then we should see that are investigating this not last

152
00:08:47.050 --> 00:08:47.450
known place.

153
00:08:47.460 --> 00:08:48.880
Location should be unset.

154
00:08:48.940 --> 00:08:52.240
So we should move back to our start location.

155
00:08:52.240 --> 00:08:54.820
So let's see if this behavior is now working.

156
00:08:54.880 --> 00:08:56.800
Now that the task is fully implement.

157
00:08:56.820 --> 00:08:58.150
So he's coming over to me.

158
00:08:58.510 --> 00:09:00.190
He's investigating me.

159
00:09:00.730 --> 00:09:01.690
I'm gonna go and hide.

160
00:09:01.870 --> 00:09:02.940
So let's go and hide.

161
00:09:03.000 --> 00:09:04.210
Who is coming to investigate?

162
00:09:04.220 --> 00:09:05.380
Let's go and hide again.

163
00:09:05.950 --> 00:09:07.060
So go and hide.

164
00:09:07.900 --> 00:09:09.880
Let's see if we can spot him over there.

165
00:09:10.270 --> 00:09:12.040
He should be waiting at the moment.

166
00:09:12.160 --> 00:09:18.310
And then he's going back to his start location, which unfortunately makes him intersect with me.

167
00:09:18.620 --> 00:09:25.420
So let's see if this is actually working, as we expect by bringing out an enemy A.I. window and docking

168
00:09:25.420 --> 00:09:29.840
over to the right and putting our main window over on the left.

169
00:09:29.860 --> 00:09:34.900
It's a little bit cramped, but we can we can make do and then we're going to try and escape this guy

170
00:09:34.900 --> 00:09:37.800
one more time and see what happens with his behavior.

171
00:09:37.840 --> 00:09:41.710
You can see he's moving to the last known place location.

172
00:09:42.700 --> 00:09:48.190
And now he is waiting, having cleared the value and then you can see he's going to move to and you

173
00:09:48.190 --> 00:09:54.040
can see these red bars on, the decorators are telling us that neither of these two conditions are true.

174
00:09:54.040 --> 00:09:57.730
So he can't do either of those families moved to the start location.

175
00:09:58.030 --> 00:10:00.970
So it now it's flickering because basically it can't do anything.

176
00:10:01.510 --> 00:10:09.040
So that basically is that this lecture we've seen how we can get the Beattie tasks to execute code,

177
00:10:09.460 --> 00:10:14.170
understood the different statuses that you can return from execute task, how to get the black board

178
00:10:14.170 --> 00:10:20.950
from the task, and also how to get the currently selected key on a blackboard task in the next lecture.

179
00:10:21.280 --> 00:10:27.100
We're going to see how we can get hold of the world outside of the blackboard behavior tree, how we

180
00:10:27.100 --> 00:10:30.430
can get hold of the porn from within a behavior tree task.

181
00:10:30.520 --> 00:10:31.090
I'll see there.
