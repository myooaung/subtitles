1
00:00:04,310 --> 00:00:05,690
Hello everybody and welcome back.

2
00:00:05,690 --> 00:00:07,220
So what's this lecture about.

3
00:00:07,220 --> 00:00:12,670
Well we've kind of gone out of the frying pan into the fire when it comes to being performance.

4
00:00:12,740 --> 00:00:19,010
So we've used a function just for a number that seems a bit silly to me especially since that function

5
00:00:19,160 --> 00:00:23,890
has to run in order to get the details from it which is a bit of a waste.

6
00:00:23,900 --> 00:00:27,580
Just for that single number so let's go have a look at our code and see the problem.

7
00:00:27,620 --> 00:00:30,730
And then I'm going to challenge you to fix it OK.

8
00:00:30,750 --> 00:00:37,590
So if we have a look at line 31 here we are calling the get valid words function twice once absolutely

9
00:00:37,590 --> 00:00:42,690
fine because we need to do that anyway in order to get the word but then we're doing it again just to

10
00:00:42,690 --> 00:00:46,440
get this number here which is just too much.

11
00:00:46,440 --> 00:00:47,580
There is a way around this.

12
00:00:47,580 --> 00:00:51,590
In fact there are several ways that you could work your way around this problem.

13
00:00:51,720 --> 00:00:58,830
And one of the ways of doing that is to assign get valid words to a variable and then we can go ahead

14
00:00:58,860 --> 00:01:04,170
and use it more specifically a member variable and then we can use it in multiple places.

15
00:01:04,170 --> 00:01:09,870
And we're going to do that up here at Biggin play or rather you're going to do it in your challenge

16
00:01:11,250 --> 00:01:11,690
okay.

17
00:01:11,700 --> 00:01:12,910
So your challenge.

18
00:01:13,000 --> 00:01:15,600
What I'd like you to do is create a member variable.

19
00:01:15,600 --> 00:01:16,980
Call it ISO grams.

20
00:01:17,040 --> 00:01:19,860
That is the valid words t array.

21
00:01:19,980 --> 00:01:25,040
Use that instead when initializing hit and word pause a video and give that a go

22
00:01:29,600 --> 00:01:30,800
Okay everybody Welcome back.

23
00:01:30,800 --> 00:01:33,290
Let's go ahead and create our new member variable.

24
00:01:33,330 --> 00:01:35,750
I said Grams okay.

25
00:01:35,760 --> 00:01:40,530
So before we get going the first thing we need to do is go over into our header file and declare it

26
00:01:40,950 --> 00:01:42,180
as a new member variable.

27
00:01:42,480 --> 00:01:45,240
So we've got a t array.

28
00:01:45,240 --> 00:01:45,690
There we go.

29
00:01:45,690 --> 00:01:48,170
Also complete is working wonders today.

30
00:01:48,300 --> 00:01:51,920
And then it's going to contain f strings which is absolutely fine.

31
00:01:52,080 --> 00:01:56,550
And we're going to call it ISO grams.

32
00:01:56,580 --> 00:01:57,060
There we go.

33
00:01:57,090 --> 00:02:00,460
So that's all sorted and we can save that.

34
00:02:00,480 --> 00:02:09,550
Let's go over into our implementation so now we can say ISO Grams equals our gets valid words and then

35
00:02:09,550 --> 00:02:14,860
we do need to pass words into it and there we go we've now got the variable ISO grounds that we can

36
00:02:14,860 --> 00:02:21,580
use throughout our code and perhaps more importantly we only do it once and only when the game begins

37
00:02:21,670 --> 00:02:23,690
instead of every round.

38
00:02:23,710 --> 00:02:24,200
Right.

39
00:02:24,220 --> 00:02:28,870
And this is the place where we want to be able to do it so we're not calling this function unnecessarily

40
00:02:29,410 --> 00:02:36,580
get valid words we can get rid of that there and put in iso grams and the same over here.

41
00:02:36,580 --> 00:02:40,340
Now bear in mind using the auto complete here is often a good thing.

42
00:02:40,350 --> 00:02:45,880
I've in the practice runs I often typed in iso gram instead so perhaps I should a picked that is the

43
00:02:45,880 --> 00:02:46,800
word.

44
00:02:46,860 --> 00:02:47,510
OK.

45
00:02:47,530 --> 00:02:54,420
That all being good we should be able to now go to unreal click compile OK.

46
00:02:54,450 --> 00:02:57,040
So let's go ahead and press play and.

47
00:02:57,150 --> 00:02:57,810
Excellent.

48
00:02:57,810 --> 00:02:59,460
It looks like everything is working.

49
00:02:59,460 --> 00:03:04,060
Let's go into our game and yes brilliant.

50
00:03:04,350 --> 00:03:05,580
So everything is working there.

51
00:03:05,580 --> 00:03:07,170
How are you guys getting on.

52
00:03:07,520 --> 00:03:13,830
So the takeaway there is depending on how your code is constructed it may just work which is absolutely

53
00:03:13,830 --> 00:03:14,550
fine.

54
00:03:14,550 --> 00:03:20,220
We're not aiming to get code perfect here but if you spot something that's a quick weapon like that

55
00:03:20,220 --> 00:03:22,910
and you can make your code more performance because of it.

56
00:03:23,010 --> 00:03:24,860
That's always a good thing to pursue.

57
00:03:24,870 --> 00:03:31,040
And it was just a tiny refactor to get everything working again and it was also a nice circle back to

58
00:03:31,040 --> 00:03:34,760
member variables which we covered much earlier in section.

59
00:03:34,760 --> 00:03:35,860
How did you guys get on.

60
00:03:36,020 --> 00:03:40,190
Let's crack onto the next lecture and get the bull cow counts coming back to the player.
