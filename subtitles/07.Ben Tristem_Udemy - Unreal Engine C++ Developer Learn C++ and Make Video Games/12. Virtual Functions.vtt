WEBVTT
1
00:00:04.230 --> 00:00:09.430
In this lecture, we're going to be looking more into polymorphism, how inheritance works and considerations

2
00:00:09.430 --> 00:00:14.110
to take into account when reusing functions between the parent and the child classes.

3
00:00:14.380 --> 00:00:19.780
So as we still don't have things like the concept of damage or health implemented, some of this will

4
00:00:19.780 --> 00:00:24.730
be planning ahead like we've done in the past, and mostly just declaring the functions for use later

5
00:00:25.120 --> 00:00:28.690
so that we can update these if I use case changes along the way.

6
00:00:28.990 --> 00:00:33.070
So at this point, we should already be fairly familiar with the basic concepts of inheritance.

7
00:00:33.090 --> 00:00:33.880
You've seen this before.

8
00:00:33.880 --> 00:00:39.610
We've also had a look at how things like the Poons are deriving from actors and actors, from objects,

9
00:00:39.880 --> 00:00:46.060
each of which have been able to access and share variables and functionality between their parent classes.

10
00:00:46.330 --> 00:00:52.690
So we now need to consider how we can use this in our own custom classes, and we can do this by revisiting

11
00:00:52.750 --> 00:00:55.110
our end goal for our working game.

12
00:00:55.660 --> 00:01:00.310
We already know that we want our turrets and tanks to be able to fire at each other.

13
00:01:00.550 --> 00:01:06.940
And to do this, they both need to be able to look at or rotate towards that targets.

14
00:01:07.240 --> 00:01:13.570
And when these conditions are met and the damage has been provided or taken past a certain threshold,

15
00:01:13.660 --> 00:01:17.920
both of these will need a functionality to be destroyed or removed from play.

16
00:01:18.310 --> 00:01:22.840
So this is a simple game that's pretty much the entire cycle of the core gameplay loop.

17
00:01:23.020 --> 00:01:25.840
And from that, we can extract three Shadd functionalities.

18
00:01:26.060 --> 00:01:27.850
So that would be the turret rotation.

19
00:01:27.970 --> 00:01:31.930
The firing event and the destruction of the classes.

20
00:01:32.530 --> 00:01:37.150
So we can therefore safely begin declaring these in the base class, knowing that all of this will be

21
00:01:37.150 --> 00:01:39.100
required by the child classes.

22
00:01:39.550 --> 00:01:40.370
A little bit later on.

23
00:01:40.900 --> 00:01:44.770
So each of these functions then should be in their protected section.

24
00:01:44.800 --> 00:01:45.580
So we'll create that.

25
00:01:45.580 --> 00:01:49.610
First of all, I'll start with the rotate function, which will be of type void.

26
00:01:50.410 --> 00:01:55.090
And although the tank and the turret operate slightly, definitely from each other, that the tank is

27
00:01:55.090 --> 00:02:00.220
able to move around and the turret will be completely stationary, the target for the rotation will

28
00:02:00.220 --> 00:02:01.310
still be the same for both.

29
00:02:01.330 --> 00:02:05.860
And that's going to be that they're attempting to look at a certain location and locations.

30
00:02:05.860 --> 00:02:08.250
Of course, it just represented by F effectors.

31
00:02:08.710 --> 00:02:13.840
So for the tank, that will be the location of the mice in the world space, which is something that

32
00:02:13.840 --> 00:02:19.500
we'll be able to do using some clever functionality housed within the player control class.

33
00:02:19.930 --> 00:02:23.680
And for the turret, that will obviously be the location of the tank itself.

34
00:02:23.980 --> 00:02:29.440
So for this, we can pass in an argument of type F a vector named look at Target.

35
00:02:29.710 --> 00:02:34.210
This will allow us to cool this from both of the classes and then the parent function doesn't really

36
00:02:34.210 --> 00:02:36.160
care or need to know what the target is.

37
00:02:36.430 --> 00:02:40.840
It will just use that effect of this being passed in and work out the calculations and what it needs

38
00:02:40.840 --> 00:02:41.150
to do.

39
00:02:41.170 --> 00:02:45.540
Based on that argument, next, then we'll have our firing functionality.

40
00:02:45.550 --> 00:02:48.040
So again, we're going to create another void function.

41
00:02:48.100 --> 00:02:48.910
This one, our name.

42
00:02:48.940 --> 00:02:49.330
Fire.

43
00:02:49.750 --> 00:02:51.070
This is going to be very simple.

44
00:02:51.250 --> 00:02:54.070
This function will just create a projectile.

45
00:02:54.370 --> 00:02:59.470
When we have the projectile class implemented and launch that in the direction that the turret is currently

46
00:02:59.470 --> 00:02:59.980
facing.

47
00:03:00.360 --> 00:03:05.080
Whilst the implementation here is very simplistic, if you wanted to add some extra flexibility, you

48
00:03:05.080 --> 00:03:11.380
could come back and add things into the function arguments to account for things such as the type of

49
00:03:11.380 --> 00:03:16.300
projectile to fire at the number of projectiles per shot and things like that, very similar to how

50
00:03:16.300 --> 00:03:19.480
we have the override in our rotate function for this game.

51
00:03:19.480 --> 00:03:19.640
No.

52
00:03:19.690 --> 00:03:23.960
Each class would just be firing one projectile type and that's going to be the single projectile.

53
00:03:23.980 --> 00:03:26.080
Class will be creating again a little bit later.

54
00:03:26.500 --> 00:03:32.470
So the final function then we're going to aim for the base class is something to control how the PWN

55
00:03:32.470 --> 00:03:33.670
reacts when destroyed.

56
00:03:33.850 --> 00:03:37.210
So a create a void here named Handal Destruction.

57
00:03:37.540 --> 00:03:43.450
This one's going to be slightly different in that we're going to add a virtual declaration before the

58
00:03:43.450 --> 00:03:43.810
void.

59
00:03:44.050 --> 00:03:48.850
So before doing this, we're just gonna take a look at when and why we might want to do this.

60
00:03:49.090 --> 00:03:53.510
So first, I'm going to create one additional function that we won't be keeping in the project.

61
00:03:53.700 --> 00:03:58.750
Again, don't feel as though you need to follow along as I will be making some offscreen compilations

62
00:03:58.750 --> 00:04:04.120
this time as the go has to see the results and not necessarily the implementation, because we'll be

63
00:04:04.120 --> 00:04:07.660
making very similar implementation for the functions we will be keeping.

64
00:04:07.900 --> 00:04:13.840
So I'm going to create a void function named test in the base class and create the implementation.

65
00:04:14.020 --> 00:04:19.330
And then the first thing to be aware of is that to call a function from the parent class in a child

66
00:04:19.330 --> 00:04:24.640
class, the virtu and override specifies that we'll be looking at are completely optional, essentially,

67
00:04:25.210 --> 00:04:28.840
at least to a certain extent, again, which we will see through the tests.

68
00:04:28.910 --> 00:04:29.440
I'll be making.

69
00:04:29.630 --> 00:04:33.610
So to demonstrate this, I'll create a temporary log file in the base class.

70
00:04:33.880 --> 00:04:40.030
Then I'll implement these same function of the same name in the taht class with its own new and unique

71
00:04:40.270 --> 00:04:40.810
output log.

72
00:04:41.220 --> 00:04:44.860
Then do something that you've probably already seen, even if you weren't quite sure what was happening.

73
00:04:44.920 --> 00:04:47.020
And that's to override the function call.

74
00:04:47.380 --> 00:04:52.810
This means to call the base function version whilst adding additional functionality to it.

75
00:04:53.230 --> 00:04:58.270
To do this, we first include our call to super test, which is just calling the function on the base

76
00:04:58.270 --> 00:04:58.780
class.

77
00:04:59.140 --> 00:05:02.860
Then in this class, I'll add another log specifying that this was also called.

78
00:05:02.980 --> 00:05:06.550
By the tart's this time when I mentioned that you would have seen this before.

79
00:05:06.620 --> 00:05:11.860
Anytime that you've implemented a begin play or take function, as we have here, we're calling these

80
00:05:11.910 --> 00:05:17.110
supercool, which again will filter back up through the base classes, through the use of those functions

81
00:05:17.110 --> 00:05:19.870
in that porn and actor implementations.

82
00:05:20.290 --> 00:05:24.610
Olufsen need to call this function on the begin play just to make sure that this function is being fired.

83
00:05:25.060 --> 00:05:28.000
And then back in the other side, like I've mentioned, already recomposed this night.

84
00:05:28.380 --> 00:05:32.650
And we can see that when I press play, the output log is displaying both logs, confirming that we

85
00:05:32.650 --> 00:05:35.740
can indeed override a function without these specifiers.

86
00:05:35.950 --> 00:05:39.160
So now let's go back and have a look at why we might want to use them.

87
00:05:39.520 --> 00:05:45.070
So the first thing would be to go to our toric class and in the function, have to let the system know

88
00:05:45.070 --> 00:05:49.090
that this is intended to be an override function from the base class.

89
00:05:49.520 --> 00:05:54.670
You'd normally at this, as you've seen, but not for a functionality requirement, but more as to avoid

90
00:05:54.700 --> 00:05:55.480
ambiguity.

91
00:05:55.810 --> 00:06:01.990
This is more just let the system know to look for a function of the same name in the parent class rather

92
00:06:01.990 --> 00:06:05.530
than immediately trying to create a new function named test.

93
00:06:05.890 --> 00:06:11.680
So if we compile this now, this is where we start needing them to include the virtual specifiers to

94
00:06:11.680 --> 00:06:13.420
make virtual functions.

95
00:06:13.640 --> 00:06:19.300
And this is because if we have something in the child class which is classed as an overwritten function,

96
00:06:19.540 --> 00:06:25.150
we'll be met with an error stating that we're trying to override a function that can override anything

97
00:06:25.150 --> 00:06:26.080
in the base class.

98
00:06:26.150 --> 00:06:29.110
And that's because functions by default are not virtual.

99
00:06:29.380 --> 00:06:31.450
And again, this is where the virtual specify comes in.

100
00:06:31.460 --> 00:06:37.540
So when I go back over to our base class, adding the virtual specify into the base function then is

101
00:06:37.540 --> 00:06:41.020
what lets us change the functionality in our base class.

102
00:06:41.470 --> 00:06:44.710
So that change made if we compile this again, this one will be successful.

103
00:06:46.700 --> 00:06:51.530
And the results in the editor with that compilation changed is exactly the same.

104
00:06:52.140 --> 00:06:56.960
So what this is now really doing is is just saying in the base class, when I specifying that at some

105
00:06:56.960 --> 00:07:02.870
point we're expecting this function to be overridden by a child class, then in the child class with

106
00:07:02.870 --> 00:07:08.780
specifying that the test function is not intended to be a new function created at runtime, but an override

107
00:07:09.110 --> 00:07:11.540
of an existing version in the parent class.

108
00:07:11.980 --> 00:07:16.760
So as a general rule, we're also going to add a virtual specify to the front of our function in the

109
00:07:16.760 --> 00:07:18.270
taht class as well.

110
00:07:18.350 --> 00:07:20.840
We've already seen that it technically isn't required.

111
00:07:20.870 --> 00:07:26.270
This helps us avoid making silly mistakes, accidentally changing a function types or implementation

112
00:07:26.270 --> 00:07:31.580
in the base class and not accounting for it in child classes, because the compiler will now know that

113
00:07:31.580 --> 00:07:37.490
we'll be looking for a function of the same type with the same implementation in the base class, and

114
00:07:37.490 --> 00:07:39.410
it will give us completion errors and things.

115
00:07:39.650 --> 00:07:43.940
If this is changing again, mostly this is to avoid development errors.

116
00:07:44.300 --> 00:07:48.940
If you forget this in the future, if somebody else starts picking up your work and doesn't know what

117
00:07:48.940 --> 00:07:54.200
to look out for function in the child class without these specifiers, then they could just go ahead

118
00:07:54.200 --> 00:07:58.400
and completely change some functionality into base class, not accounting for it, and get again and

119
00:07:58.400 --> 00:08:01.920
get away with the errors if we don't have the specifies included.

120
00:08:02.450 --> 00:08:07.510
Meaning that the child class may stop calling the correct functionality or not have that fight a.

121
00:08:08.210 --> 00:08:12.140
So we could sit and talk theory on subjects like this for pretty much an entire section.

122
00:08:12.560 --> 00:08:16.910
This is going to be more of a high level look at this type of thing and some will be going into more

123
00:08:16.910 --> 00:08:20.450
of the system specific theory in his section.

124
00:08:20.600 --> 00:08:25.460
So we're gonna go back into implementing our logic now as this will start kind of piecing together as

125
00:08:25.460 --> 00:08:29.270
well as we flesh out our classes and start utilizing these concepts.

126
00:08:29.720 --> 00:08:33.140
So the first thing I do is quickly remove these test functions.

127
00:08:34.270 --> 00:08:39.970
Then in the base class, we should now put a virtual specify in front of our handle destruction function,

128
00:08:40.450 --> 00:08:46.120
as this will be the function that will be overwritten or added to in the child classes later for the

129
00:08:46.120 --> 00:08:47.950
fire and the rotate functions.

130
00:08:48.220 --> 00:08:54.760
These will just be called and implement the base functionality without any other additions or overrides.

131
00:08:54.970 --> 00:08:57.730
So we don't need to add these here and put this into context.

132
00:08:58.090 --> 00:09:01.070
Let's go and define these functions and kind of coincide.

133
00:09:01.120 --> 00:09:05.330
What we expect each of the functions to be doing first time for the rotate tasks.

134
00:09:05.380 --> 00:09:11.320
We're just going to be updating the rotation of the turret match to look at the look at target, which

135
00:09:11.320 --> 00:09:13.750
is being passed in from the child classes.

136
00:09:14.200 --> 00:09:19.480
This is very simple and the argument is being passed in is the function to be used by both of the child

137
00:09:19.480 --> 00:09:24.940
classes in exactly the same way without needing to override anything then for the final function?

138
00:09:24.970 --> 00:09:25.930
This is fairly similar.

139
00:09:26.140 --> 00:09:31.720
Both of the child porn classes already inherit the projectile spawn point component.

140
00:09:31.790 --> 00:09:36.250
So again, this function will already have access to the location and the rotation in the world that

141
00:09:36.250 --> 00:09:38.520
will be relevant to firing the projectile.

142
00:09:38.710 --> 00:09:44.080
And then the only other thing that it will need to do will be to create a new actor of the type of projectile

143
00:09:44.400 --> 00:09:45.490
at the given transform.

144
00:09:45.850 --> 00:09:48.580
And again, nothing here will differ between the two child classes.

145
00:09:48.640 --> 00:09:53.710
So we can just call this function as we would any other from the child classes remembering as long as

146
00:09:53.710 --> 00:09:59.200
they're in the correct access space, which is either going to be protected or public, preferably as

147
00:09:59.200 --> 00:10:03.880
we've done here, protected, as we don't need these exposed to external classes, but it will be useful

148
00:10:03.880 --> 00:10:06.910
in the child classes or necessary in the child classes.

149
00:10:06.970 --> 00:10:11.410
Then finally, we have our handle destruction function and this will be a little bit more complex.

150
00:10:11.750 --> 00:10:15.520
So first we have these things I think both classes will be likely to require.

151
00:10:15.850 --> 00:10:18.880
And that is to show you the visualization of them being destroyed.

152
00:10:19.270 --> 00:10:22.620
This be things such as the particles signed and the camera shake.

153
00:10:23.080 --> 00:10:25.330
And this is something that both of the classes will implement.

154
00:10:25.690 --> 00:10:29.950
So we've defined these in here and run these in the base class.

155
00:10:30.400 --> 00:10:34.510
However, because I know the game mode, we'll be tracking how many toric classes remain when a turret

156
00:10:34.510 --> 00:10:35.350
porn is destroyed.

157
00:10:35.680 --> 00:10:41.410
We want to cool the game mode to notify it, which is something the player class won't need to do when

158
00:10:41.470 --> 00:10:42.190
that is destroyed.

159
00:10:42.730 --> 00:10:49.210
So we can start seeing some unique logic and functionality that will be useful to override in the child

160
00:10:49.210 --> 00:10:49.630
classes.

161
00:10:50.440 --> 00:10:54.790
Another difference is that the target classes can just use the default destroy function, which will

162
00:10:54.790 --> 00:10:56.380
completely remove it from the level.

163
00:10:56.830 --> 00:10:59.590
However, the player class, we don't really want to use that.

164
00:10:59.590 --> 00:11:04.030
Instead, we want to hide all of its visual components and disable the movement.

165
00:11:04.330 --> 00:11:10.420
And this is because if we destroy the player class, we lose our camera and ends up with some pretty

166
00:11:10.420 --> 00:11:13.090
hard jumps to a default camera created in the level.

167
00:11:13.360 --> 00:11:19.420
And this is to do with the way that the play controller and the zest porn works in unroll in general.

168
00:11:19.510 --> 00:11:26.260
And again, that kind of leads us to adding some unique override logic so that the tank class will be

169
00:11:26.260 --> 00:11:28.150
hidden rather than completely removed.

170
00:11:28.180 --> 00:11:33.190
So this was quite a lot of theoretical work and planning in this lecture, but it puts us in a really

171
00:11:33.190 --> 00:11:36.340
good position to see how the child classes can use these in the next lecture.

172
00:11:36.860 --> 00:11:43.270
And we also now have the main porn functionality, at least defined and ready to come back to and implement

173
00:11:43.300 --> 00:11:44.500
as we go through the project.
