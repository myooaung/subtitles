WEBVTT
1
00:00:04.830 --> 00:00:06.670
Hello and welcome to the homework.

2
00:00:06.780 --> 00:00:11.810
First of all congratulations for those of you who took the challenge of solving the homework.

3
00:00:11.940 --> 00:00:16.860
I could never emphasize enough that the best way to learn something is to practice.

4
00:00:16.860 --> 00:00:19.180
So I hope you can practice this as much as you can.

5
00:00:19.440 --> 00:00:22.410
And the Statoil I'm going to provide the solution.

6
00:00:22.590 --> 00:00:28.960
So the homework was to make a request to check if the block chain is valid.

7
00:00:29.100 --> 00:00:33.250
So I already prepared a new code section here checking if the block is valid.

8
00:00:33.390 --> 00:00:36.140
And we're going to simply make another request.

9
00:00:36.150 --> 00:00:36.900
The good news.

10
00:00:37.020 --> 00:00:43.680
And that was the first thing to notice is that basically of course we already made a function that returns

11
00:00:43.680 --> 00:00:47.860
true or false whether respectively the chain is valid yes or no.

12
00:00:47.880 --> 00:00:52.620
So of course we're going to use that function in the request and we will return different responses

13
00:00:52.950 --> 00:00:55.710
depending on the result of this function.

14
00:00:55.740 --> 00:00:59.690
So let's do this let's start by specifying the decorator.

15
00:00:59.680 --> 00:01:07.500
So again I'm going to copy this decorator because of course it is still going to be a GET request because

16
00:01:07.500 --> 00:01:12.270
we're not posting or creating any new data structure like a transaction.

17
00:01:12.420 --> 00:01:13.870
So it's still a GET request.

18
00:01:13.920 --> 00:01:22.020
And here we need to specify a new name for this GET request and we're going to call it simply is valid

19
00:01:22.440 --> 00:01:25.540
and this request will check if the block chain is valid.

20
00:01:25.740 --> 00:01:31.630
All right so now let's define the function that will execute this request.

21
00:01:31.770 --> 00:01:39.270
So we're going to call this function is valid very simply with some parenthesis taking nothing as argument

22
00:01:39.270 --> 00:01:45.090
because we will simply get our block chain object and from this object an object will get the valid

23
00:01:45.090 --> 00:01:48.600
function which will return true or false whether our chain is valid.

24
00:01:48.780 --> 00:01:49.920
So let's do this.

25
00:01:49.920 --> 00:01:55.770
The first thing that we need to do is as we said just take our block chain object and from this collection

26
00:01:55.770 --> 00:02:04.200
object we take the is chaine valid method that we created in part 1 of this implementation.

27
00:02:04.260 --> 00:02:08.160
And so if we go back to this function isn't valid.

28
00:02:08.340 --> 00:02:14.490
Well we can see that it takes an argument just a chain of our block chain which was introduced in the

29
00:02:14.720 --> 00:02:15.670
in that method.

30
00:02:15.840 --> 00:02:21.470
So let's do this let's take this chain and to take this chance since this chain belongs to our block

31
00:02:21.470 --> 00:02:22.310
to an object.

32
00:02:22.410 --> 00:02:25.560
Well we need to get our block chain objeck first.

33
00:02:25.620 --> 00:02:28.710
And from this object we get the chain.

34
00:02:28.740 --> 00:02:29.920
All right perfect.

35
00:02:29.940 --> 00:02:35.710
So this will return true or false whether or not respectively the shame is valid.

36
00:02:35.730 --> 00:02:42.960
So since this return something I'm going to introduce a new variable that I'm going to call is valid

37
00:02:43.560 --> 00:02:45.030
and that will be this result.

38
00:02:45.030 --> 00:02:47.690
True or false and depending on this result.

39
00:02:47.700 --> 00:02:54.090
Now we're going to make an IF condition which will check if it's valid is true or false if it is true

40
00:02:54.290 --> 00:02:57.610
will return a message saying that everything's alright.

41
00:02:57.780 --> 00:03:01.630
And if it is false will return a message saying that we have a problem.

42
00:03:01.660 --> 00:03:02.520
All right.

43
00:03:02.520 --> 00:03:08.220
So let's do this let's make this if condition to make this condition the beautiful way we can just do

44
00:03:08.490 --> 00:03:17.640
if is valid Cullen which means if it's valid equals equals true because it is a boolean.

45
00:03:17.640 --> 00:03:20.880
So just if it's valid and if it is true.

46
00:03:21.060 --> 00:03:29.580
Well we want the response to be containing the following message which will be all good.

47
00:03:29.740 --> 00:03:39.100
The block chain is valid but all good the block chain is valid because is valid is equal to true.

48
00:03:39.440 --> 00:03:40.300
Perfect.

49
00:03:40.310 --> 00:03:43.290
But then if it's valid is not true.

50
00:03:43.490 --> 00:03:48.490
That is if we are in the else which is the condition that is that is false.

51
00:03:48.650 --> 00:03:52.160
Well in that case the response will be different.

52
00:03:52.160 --> 00:03:53.340
The response will be.

53
00:03:53.630 --> 00:04:01.080
Well we can put the following message saying Houston we have a problem.

54
00:04:02.260 --> 00:04:03.740
Houston we have a problem.

55
00:04:03.800 --> 00:04:09.470
The black chain is not valid.

56
00:04:09.560 --> 00:04:10.360
And here we go.

57
00:04:10.400 --> 00:04:15.570
We have our two responses based on the two possibilities that the black chain is yes or no.

58
00:04:15.650 --> 00:04:16.360
Valid.

59
00:04:16.670 --> 00:04:17.180
All right.

60
00:04:17.210 --> 00:04:25.350
And now we just need to of course return the response in the Jayson format with that two hundred.

61
00:04:25.420 --> 00:04:26.120
OK.

62
00:04:26.150 --> 00:04:28.020
HTP status code.

63
00:04:28.040 --> 00:04:29.060
There we go.

64
00:04:29.060 --> 00:04:30.620
Now everything's all right.

65
00:04:30.620 --> 00:04:32.120
The one thing just disappeared.

66
00:04:32.330 --> 00:04:33.410
Everything should be OK.

67
00:04:33.410 --> 00:04:35.710
That should be the final solution of the homework.

68
00:04:35.720 --> 00:04:37.220
But we're going to test it now.

69
00:04:37.340 --> 00:04:44.270
So as you can see I restarted my kernel which means that I stopped the execution of the code and then

70
00:04:44.270 --> 00:04:48.790
I clicked on the two button here to restart the kernel using the options.

71
00:04:48.950 --> 00:04:52.060
And I did that of course because we modify the code here.

72
00:04:52.160 --> 00:04:54.020
So we're going to run it again.

73
00:04:54.120 --> 00:04:58.800
And so let's do this now we have the code that runs the are here.

74
00:04:58.850 --> 00:04:59.730
Everything's all right.

75
00:04:59.750 --> 00:05:04.570
We are ready to select the whole code and let's execute it.

76
00:05:04.590 --> 00:05:06.500
All right no error.

77
00:05:06.500 --> 00:05:09.260
Perfect running on the flat.

78
00:05:09.360 --> 00:05:11.500
Are L on port five thousand.

79
00:05:11.490 --> 00:05:13.280
Now that's from the postman.

80
00:05:13.490 --> 00:05:19.960
Here is postman and let's make our request so we're going to do the same as before as in the final to

81
00:05:19.960 --> 00:05:26.360
toile of module one but this time we're also going to test this new request that we've just made.

82
00:05:26.360 --> 00:05:28.520
That is a valid request.

83
00:05:28.920 --> 00:05:32.710
OK so remember the address we have to enter here.

84
00:05:32.780 --> 00:05:35.010
We can take it again in the flask.

85
00:05:35.150 --> 00:05:37.240
Quickstart Guide that's this one.

86
00:05:37.670 --> 00:05:39.330
That's the address of the server.

87
00:05:39.350 --> 00:05:47.060
So let's go back to postman let's paste this u r l and let's try first with get changed but everything

88
00:05:47.060 --> 00:05:47.980
should be OK.

89
00:05:48.110 --> 00:05:50.930
We haven't modified anything in the other code sections.

90
00:05:51.170 --> 00:05:52.720
So that's the genesis block.

91
00:05:52.910 --> 00:05:53.370
Perfect.

92
00:05:53.380 --> 00:05:54.130
Now it's mine.

93
00:05:54.140 --> 00:05:57.210
A few blocks let's just mine five of them.

94
00:05:57.450 --> 00:05:58.840
Mind luck.

95
00:05:58.850 --> 00:05:59.840
There we go.

96
00:05:59.840 --> 00:06:06.530
The first block mines the second one there one and fourth one so now we have five blocks because the

97
00:06:06.530 --> 00:06:08.140
Genesis block was not mine perfect.

98
00:06:08.140 --> 00:06:13.180
So now let's get our chain again to see what it looks like.

99
00:06:13.280 --> 00:06:17.210
Jane And here is our chain with the five blocks perfect.

100
00:06:17.330 --> 00:06:25.170
And now we're going to test our new requests that we've just made which we called is valid.

101
00:06:25.280 --> 00:06:29.650
And if you're ready we are now going to check if our blood chain is OK.

102
00:06:29.690 --> 00:06:30.510
So let's do this.

103
00:06:30.530 --> 00:06:33.490
Let's press enter and there we go.

104
00:06:33.500 --> 00:06:34.250
All good.

105
00:06:34.250 --> 00:06:35.940
The black chain is valid.

106
00:06:36.230 --> 00:06:42.110
So perfect congratulations for those of you who managed to get this you could actually have written

107
00:06:42.110 --> 00:06:49.640
anything you want in the message but the idea was to make these two conditions in if and else using

108
00:06:49.700 --> 00:06:52.930
a valid function to check if it is valid.

109
00:06:53.150 --> 00:06:58.910
This is true and valid function is by the way not only going to be used for this homework it is also

110
00:06:58.910 --> 00:07:05.540
going to be used in module 2 because in module 2 we'll have to make a consensus because since we will

111
00:07:05.540 --> 00:07:12.200
decentralize our black chain Well we will need to check that the blood chain on each of the nose of

112
00:07:12.200 --> 00:07:17.420
the network you know each of the servers of the network is the same chain so that you know we check

113
00:07:17.420 --> 00:07:21.610
that all the nodes are up to date and you'll see no need to check this.

114
00:07:21.620 --> 00:07:25.330
We will do a preliminary check that the chain is valid.

115
00:07:25.490 --> 00:07:31.160
So that was not only for the homework and for you to practice this will also be very useful for us in

116
00:07:31.250 --> 00:07:32.190
Mudgal too.

117
00:07:32.570 --> 00:07:35.110
All right so now we're ready to move on to Mudgal 2.

118
00:07:35.120 --> 00:07:36.580
I can't wait to see you there.

119
00:07:36.590 --> 00:07:38.280
And until then and Joe Joe James.
