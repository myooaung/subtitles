1
1

00:00:05,400  -->  00:00:07,440
<v Sarah>So at the end of the last video</v>
2

2

00:00:07,440  -->  00:00:11,360
we learned that the way we're resizing the array
3

3

00:00:11,360  -->  00:00:13,300
won't work for a wrapped queue.
4

4

00:00:13,300  -->  00:00:16,140
That when we resize the array for a wrapped queue,
5

5

00:00:16,140  -->  00:00:18,030
we have to reset the queue,
6

6

00:00:18,030  -->  00:00:19,670
and bring all of the elements
7

7

00:00:19,670  -->  00:00:21,050
back to the front of the array.
8

8

00:00:21,050  -->  00:00:24,770
So we're going to wanna copy the elements from,
9

9

00:00:24,770  -->  00:00:26,620
if we look at this comment here,
10

10

00:00:26,620  -->  00:00:28,610
we're gonna copy the elements
11

11

00:00:28,610  -->  00:00:30,530
from the front to the end of the array.
12

12

00:00:30,530  -->  00:00:32,610
So we'll copy Mike and Bill
13

13

00:00:32,610  -->  00:00:37,100
into positions zero and one in the new resized array,
14

14

00:00:37,100  -->  00:00:39,930
and then we're gonna copy from the beginning of the array
15

15

00:00:39,930  -->  00:00:41,800
to the last element in the queue.
16

16

00:00:41,800  -->  00:00:44,610
So Mike and Bill will be followed with Jane and John,
17

17

00:00:44,610  -->  00:00:48,180
and then the back will be the next available position
18

18

00:00:48,180  -->  00:00:49,500
in the new array.
19

19

00:00:49,500  -->  00:00:52,030
So let's modify the code in here.
20

20

00:00:52,030  -->  00:00:53,560
So the first thing we're gonna do
21

21

00:00:53,560  -->  00:00:55,610
is save off the current size,
22

22

00:00:55,610  -->  00:00:57,600
because we're gonna need it later.
23

23

00:00:57,600  -->  00:01:02,600
So I'm gonna say int num items equals size.
24

24

00:01:04,093  -->  00:01:05,730
Because we're gonna have to use that later
25

25

00:01:05,730  -->  00:01:07,457
after we've resized the array,
26

26

00:01:07,457  -->  00:01:10,750
and we're gonna use this to set the back pointer.
27

27

00:01:10,750  -->  00:01:14,920
So, creating the new employee array, nothing new there.
28

28

00:01:14,920  -->  00:01:16,560
We're gonna double the length,
29

29

00:01:16,560  -->  00:01:19,930
and we're also going to, at the end of everything,
30

30

00:01:19,930  -->  00:01:21,830
assign newArray to queue,
31

31

00:01:21,830  -->  00:01:24,163
but we're gonna change what we're doing here.
32

32

00:01:26,130  -->  00:01:27,530
So, the first thing we wanna do
33

33

00:01:27,530  -->  00:01:31,740
is copy the elements from the front to the end of the array.
34

34

00:01:31,740  -->  00:01:34,203
So I'll say System.arraycopy,
35

35

00:01:35,080  -->  00:01:37,000
and we wanna copy from the queue.
36

36

00:01:37,000  -->  00:01:39,650
We wanna start at front,
37

37

00:01:39,650  -->  00:01:41,060
because what we wanna be doing
38

38

00:01:41,060  -->  00:01:43,410
is copying starting at Mike.
39

39

00:01:43,410  -->  00:01:46,700
We're gonna copy into newArray, into position zero,
40

40

00:01:46,700  -->  00:01:50,070
because in the new array we're gonna be copying
41

41

00:01:50,070  -->  00:01:52,653
the front of the queue back to position zero.
42

42

00:01:54,050  -->  00:01:59,050
And we want to copy queue.length minus front items.
43

43

00:02:00,700  -->  00:02:05,220
So, if we take a look here, Mike is at front,
44

44

00:02:05,220  -->  00:02:07,290
and the length of the queue is five.
45

45

00:02:07,290  -->  00:02:10,510
So, we're gonna copy five minus three,
46

46

00:02:10,510  -->  00:02:13,730
because front is three, which equals two items.
47

47

00:02:13,730  -->  00:02:15,710
And that's how many items we have here.
48

48

00:02:15,710  -->  00:02:18,650
And so this array copy is gonna take Mike and Bill,
49

49

00:02:18,650  -->  00:02:21,690
and copy them into the front of the new array.
50

50

00:02:21,690  -->  00:02:24,660
So, that's resetting the queue to the front.
51

51

00:02:24,660  -->  00:02:27,010
And then, the second part of this is,
52

52

00:02:27,010  -->  00:02:31,220
we have to copy Jane and John behind Mike and Bill.
53

53

00:02:31,220  -->  00:02:34,523
So we're gonna say System.arraycopy.
54

54

00:02:35,580  -->  00:02:37,180
We're gonna copy from the queue again,
55

55

00:02:37,180  -->  00:02:39,450
but this time we're gonna start at position zero,
56

56

00:02:39,450  -->  00:02:41,000
at the front of the array.
57

57

00:02:41,000  -->  00:02:43,350
We're gonna copy into the new array,
58

58

00:02:43,350  -->  00:02:46,300
but we don't wanna copy into position zero.
59

59

00:02:46,300  -->  00:02:50,010
We're gonna copy into queue.length minus front.
60

60

00:02:50,010  -->  00:02:52,580
Now, these two calculations are the same.
61

61

00:02:52,580  -->  00:02:55,620
We saw here that we figured out we had two items,
62

62

00:02:55,620  -->  00:02:59,560
and so we've copied those two items into the new array,
63

63

00:02:59,560  -->  00:03:01,840
and so we wanna start copying
64

64

00:03:01,840  -->  00:03:04,180
at position the number of items,
65

65

00:03:04,180  -->  00:03:06,800
because that position will be two.
66

66

00:03:06,800  -->  00:03:09,590
If we have two items from the front of the queue
67

67

00:03:09,590  -->  00:03:12,460
to the end of the array in the original queue,
68

68

00:03:12,460  -->  00:03:15,270
then we'll have copied those two items into zero and one.
69

69

00:03:15,270  -->  00:03:17,320
If we have three items, they'll have been copied
70

70

00:03:17,320  -->  00:03:19,580
into zero, one, two, et cetera.
71

71

00:03:19,580  -->  00:03:21,800
And then, how many items do we wanna copy?
72

72

00:03:21,800  -->  00:03:24,330
Well, back items, right?
73

73

00:03:24,330  -->  00:03:27,320
Because the queue is wrapped at the front,
74

74

00:03:27,320  -->  00:03:30,390
back points to the first available position.
75

75

00:03:30,390  -->  00:03:33,440
Back basically always equals the number of items
76

76

00:03:33,440  -->  00:03:35,030
that have been wrapped to the front.
77

77

00:03:35,030  -->  00:03:37,410
And that's our two array copies.
78

78

00:03:37,410  -->  00:03:42,410
So, the array copies are taking this, and producing this.
79

79

00:03:43,480  -->  00:03:45,680
So, they're unwrapping the queue,
80

80

00:03:45,680  -->  00:03:48,470
and resetting the front of the queue to zero.
81

81

00:03:48,470  -->  00:03:50,460
So, we have two things left to do.
82

82

00:03:50,460  -->  00:03:52,580
After we've assigned the new array to queue,
83

83

00:03:52,580  -->  00:03:54,330
we need to set the front and the back field.
84

84

00:03:54,330  -->  00:03:56,500
So the front will now be zero,
85

85

00:03:56,500  -->  00:03:59,500
and the back will be the number of items.
86

86

00:03:59,500  -->  00:04:01,160
We can't just call size here,
87

87

00:04:01,160  -->  00:04:03,830
because back is still set to the old back.
88

88

00:04:03,830  -->  00:04:06,540
So, you know, we've set front to zero,
89

89

00:04:06,540  -->  00:04:09,400
and back would still be sitting at two.
90

90

00:04:09,400  -->  00:04:12,570
So, our back position is no longer valid.
91

91

00:04:12,570  -->  00:04:15,510
And that's why we had to save off the size here
92

92

00:04:15,510  -->  00:04:17,120
and use it to assign back.
93

93

00:04:17,120  -->  00:04:19,580
So, when we come out of this code,
94

94

00:04:19,580  -->  00:04:23,710
front and back are now valid, they've been updated,
95

95

00:04:23,710  -->  00:04:26,743
and this queue would now look like this.
96

96

00:04:27,670  -->  00:04:30,290
So, if the queue has been wrapped, it's been reset.
97

97

00:04:30,290  -->  00:04:32,750
Now, if the queue has not been wrapped,
98

98

00:04:32,750  -->  00:04:35,080
and we're resizing it, this still works,
99

99

00:04:35,080  -->  00:04:38,390
but we'll be doing a redundant copy here.
100

100

00:04:38,390  -->  00:04:40,290
So, it's an unnecessary copy,
101

101

00:04:40,290  -->  00:04:42,890
and if we wanted to we could check for that.
102

102

00:04:42,890  -->  00:04:46,120
We could put an if here, and try to figure out
103

103

00:04:46,120  -->  00:04:47,830
if the queue has been wrapped or not.
104

104

00:04:47,830  -->  00:04:49,540
But I'm just gonna leave it here,
105

105

00:04:49,540  -->  00:04:52,440
because when you're using a circular queue,
106

106

00:04:52,440  -->  00:04:55,480
unless you're only ever adding stuff,
107

107

00:04:55,480  -->  00:04:58,470
and you add a whole tonne of stuff before you remove it,
108

108

00:04:58,470  -->  00:05:01,170
most of the time the queue's gonna wrap at some point.
109

109

00:05:02,270  -->  00:05:06,650
Okay, so, now that we've properly resized our queue,
110

110

00:05:06,650  -->  00:05:10,093
and we've updated this code, that's the updated add method.
111

111

00:05:11,570  -->  00:05:14,330
So, let's take a look at the remove method.
112

112

00:05:14,330  -->  00:05:16,090
This isn't as complicated.
113

113

00:05:16,090  -->  00:05:18,810
The add method is actually the method
114

114

00:05:18,810  -->  00:05:21,500
that's probably the most difficult to understand.
115

115

00:05:21,500  -->  00:05:24,160
Remove, we don't have to make that many changes.
116

116

00:05:24,160  -->  00:05:26,440
We're still going to throw an exception
117

117

00:05:26,440  -->  00:05:28,130
if the queue is empty.
118

118

00:05:28,130  -->  00:05:31,810
We're still going to return the employee at queue front,
119

119

00:05:31,810  -->  00:05:34,190
and we're still gonna clean up queue front.
120

120

00:05:34,190  -->  00:05:36,600
We're still going to reset the queue,
121

121

00:05:36,600  -->  00:05:38,000
if the size is zero.
122

122

00:05:38,000  -->  00:05:40,900
So, if we've pulled off the only employee in the queue,
123

123

00:05:40,900  -->  00:05:43,100
it's safe for us to just set front and back
124

124

00:05:43,100  -->  00:05:44,270
back to zero.
125

125

00:05:44,270  -->  00:05:48,000
But, now we have to worry about wrapping front.
126

126

00:05:48,000  -->  00:05:50,570
Because if we go back to this situation here,
127

127

00:05:50,570  -->  00:05:52,550
let's say we pull off Mike.
128

128

00:05:52,550  -->  00:05:54,950
And so, front gets incremented to four,
129

129

00:05:54,950  -->  00:05:57,140
and then we pull off Bill.
130

130

00:05:57,140  -->  00:05:59,370
Well, at this point, we want front to wrap around
131

131

00:05:59,370  -->  00:06:00,980
to zero, to Jane.
132

132

00:06:00,980  -->  00:06:03,170
And so, we have to check for that case.
133

133

00:06:03,170  -->  00:06:06,580
And so, we're gonna have an else here, and we're gonna say,
134

134

00:06:06,580  -->  00:06:08,623
if there are still items on the queue,
135

135

00:06:09,900  -->  00:06:13,703
then if front equals queue.length,
136

136

00:06:17,690  -->  00:06:19,570
and that should be a double equals there.
137

137

00:06:19,570  -->  00:06:22,490
That's why the compiler's squawking at me.
138

138

00:06:22,490  -->  00:06:25,310
Then, we wanna wrap front to the beginning.
139

139

00:06:25,310  -->  00:06:27,120
Now remember, when we're doing this test,
140

140

00:06:27,120  -->  00:06:29,900
we already incremented front.
141

141

00:06:29,900  -->  00:06:31,951
So, if we pulled Mike off, we'll increment front to four.
142

142

00:06:31,951  -->  00:06:36,951
And then we pull Bill off, we'll increment front to five,
143

143

00:06:37,340  -->  00:06:39,660
and then we're gonna do this test.
144

144

00:06:39,660  -->  00:06:40,493
And we're gonna say,
145

145

00:06:40,493  -->  00:06:43,030
is front equal to the length of the queue?
146

146

00:06:43,030  -->  00:06:44,606
Yes, it is, in this case,
147

147

00:06:44,606  -->  00:06:46,990
because the length of the queue is five.
148

148

00:06:46,990  -->  00:06:50,190
And so, we're gonna wrap front back to zero.
149

149

00:06:50,190  -->  00:06:52,720
If front was less than the length of the queue,
150

150

00:06:52,720  -->  00:06:55,990
then that means there's more space beyond here.
151

151

00:06:55,990  -->  00:06:58,420
So, it's safe to have front sitting here,
152

152

00:06:58,420  -->  00:07:01,630
it's not going to be an index out of bounds exception.
153

153

00:07:01,630  -->  00:07:03,350
And that's it, that's it for remove.
154

154

00:07:03,350  -->  00:07:05,990
Told you it would be easier, a lot more easier than add.
155

155

00:07:05,990  -->  00:07:07,410
Add is actually, as I said,
156

156

00:07:07,410  -->  00:07:10,590
the method that's probably gonna be the most difficult
157

157

00:07:10,590  -->  00:07:13,610
to understand, and required the most changes.
158

158

00:07:13,610  -->  00:07:16,120
We don't have to change the peek method at all.
159

159

00:07:16,120  -->  00:07:17,590
We're still gonna throw an exception
160

160

00:07:17,590  -->  00:07:18,700
if the queue is empty.
161

161

00:07:18,700  -->  00:07:21,050
Otherwise we just want to return the employee
162

162

00:07:21,050  -->  00:07:22,810
at the front of the queue.
163

163

00:07:22,810  -->  00:07:25,470
Now, our size method is gonna have to change,
164

164

00:07:25,470  -->  00:07:28,870
because subtracting back from front won't work anymore.
165

165

00:07:28,870  -->  00:07:31,830
It's possible that front will be larger than back.
166

166

00:07:31,830  -->  00:07:32,780
And, if that's the case,
167

167

00:07:32,780  -->  00:07:34,530
we'll end up with a negative number.
168

168

00:07:34,530  -->  00:07:36,250
And so we're gonna have to test here
169

169

00:07:36,250  -->  00:07:37,377
whether the queue has wrapped.
170

170

00:07:37,377  -->  00:07:38,950
And the way that we can do that,
171

171

00:07:38,950  -->  00:07:43,800
is we can say if front is less than or equal to back,
172

172

00:07:43,800  -->  00:07:45,700
then we know the queue hasn't wrapped,
173

173

00:07:45,700  -->  00:07:48,240
because back is still greater than front.
174

174

00:07:48,240  -->  00:07:51,800
And so front is more towards the front of the array
175

175

00:07:51,800  -->  00:07:52,870
than back is.
176

176

00:07:52,870  -->  00:07:54,790
So we don't have the situation where we have
177

177

00:07:54,790  -->  00:07:56,930
front towards the back of the array,
178

178

00:07:56,930  -->  00:07:59,270
and back towards the front of the array.
179

179

00:07:59,270  -->  00:08:01,720
And so, if front is less than or equal to back,
180

180

00:08:01,720  -->  00:08:03,000
the queue has not wrapped.
181

181

00:08:03,000  -->  00:08:03,920
And so in that case,
182

182

00:08:03,920  -->  00:08:06,530
we can just do what we were doing before.
183

183

00:08:06,530  -->  00:08:09,173
So I'll just copy that, and put it in here.
184

184

00:08:10,190  -->  00:08:11,820
If that's not the case,
185

185

00:08:11,820  -->  00:08:16,550
then we need to return back minus front,
186

186

00:08:16,550  -->  00:08:19,640
plus queue.length.
187

187

00:08:19,640  -->  00:08:21,010
So, what's that doing here?
188

188

00:08:21,010  -->  00:08:23,260
Well, let's take a look at our two situations
189

189

00:08:23,260  -->  00:08:24,110
back up here.
190

190

00:08:24,110  -->  00:08:25,610
So, if the queue hasn't wrapped,
191

191

00:08:25,610  -->  00:08:27,900
so if the queue hasn't wrapped, we have this situation,
192

192

00:08:27,900  -->  00:08:31,110
and then we can just say four minus zero equals four.
193

193

00:08:31,110  -->  00:08:32,940
We have four items on the queue.
194

194

00:08:32,940  -->  00:08:37,120
But if the queue has wrapped, in this case front is three,
195

195

00:08:37,120  -->  00:08:40,170
and back is two, and the length of the queue is five.
196

196

00:08:40,170  -->  00:08:43,840
We're gonna still say back minus front.
197

197

00:08:43,840  -->  00:08:45,700
So, that's gonna be two minus three,
198

198

00:08:45,700  -->  00:08:47,540
that gives us minus one.
199

199

00:08:47,540  -->  00:08:49,240
And then we're gonna add the length of the queue,
200

200

00:08:49,240  -->  00:08:52,050
which is five, and that'll give us four.
201

201

00:08:52,050  -->  00:08:55,130
And indeed, we have four elements on the queue.
202

202

00:08:55,130  -->  00:08:57,690
So, that's how this calculation will work.
203

203

00:08:57,690  -->  00:08:59,360
By adding the length of the queue,
204

204

00:08:59,360  -->  00:09:01,560
we can adjust the negative number
205

205

00:09:01,560  -->  00:09:03,970
to the actual number of items on the queue.
206

206

00:09:03,970  -->  00:09:06,000
And that's all we have to do for the size method,
207

207

00:09:06,000  -->  00:09:07,550
nothing too complicated.
208

208

00:09:07,550  -->  00:09:11,190
Now, the last method we have to change is our printQueue,
209

209

00:09:11,190  -->  00:09:13,250
because, obviously, printing the queue
210

210

00:09:13,250  -->  00:09:15,990
from front to back now isn't going to work,
211

211

00:09:15,990  -->  00:09:18,060
because back could be less than front.
212

212

00:09:18,060  -->  00:09:20,070
And so, we're gonna do something similar
213

213

00:09:20,070  -->  00:09:21,210
to what we did for size.
214

214

00:09:21,210  -->  00:09:22,490
We're gonna check whether front
215

215

00:09:22,490  -->  00:09:24,960
is less than or equal to back, because if that's the case,
216

216

00:09:24,960  -->  00:09:26,690
the queue is not wrapped.
217

217

00:09:26,690  -->  00:09:27,940
And so, if that's the case,
218

218

00:09:27,940  -->  00:09:30,000
we'll just do what we were doing before.
219

219

00:09:30,000  -->  00:09:31,680
If the queue has wrapped,
220

220

00:09:31,680  -->  00:09:33,903
then we'll print the queue in two pieces.
221

221

00:09:34,940  -->  00:09:37,230
First, we'll print this piece.
222

222

00:09:37,230  -->  00:09:39,800
So, we'll print from front to the end of the queue,
223

223

00:09:39,800  -->  00:09:41,270
and then we'll print this piece.
224

224

00:09:41,270  -->  00:09:44,693
So, we'll print from the beginning of the queue to back.
225

225

00:09:46,530  -->  00:09:49,260
And so, I'm gonna copy this here,
226

226

00:09:49,260  -->  00:09:51,490
and plunk it into our printQueue method.
227

227

00:09:51,490  -->  00:09:55,260
So, if front is less than or equal to back,
228

228

00:09:55,260  -->  00:09:59,680
and if it is, we're gonna do what we were doing before,
229

229

00:09:59,680  -->  00:10:01,510
because the queue hasn't wrapped.
230

230

00:10:01,510  -->  00:10:06,510
Otherwise, we're gonna say for int i equals front,
231

231

00:10:08,130  -->  00:10:11,577
i less than queue.length, i plus plus,
232

232

00:10:15,590  -->  00:10:20,030
and we'll just print whatever is at position i.
233

233

00:10:20,030  -->  00:10:22,380
So, I'll just copy and paste this line in here.
234

234

00:10:22,380  -->  00:10:26,520
So, this code here will print
235

235

00:10:26,520  -->  00:10:28,370
whatever's at the front of the queue
236

236

00:10:28,370  -->  00:10:29,663
to the end of the array.
237

237

00:10:31,210  -->  00:10:32,907
And then after we've done that,
238

238

00:10:32,907  -->  00:10:37,907
you wanna say for int i equals zero, i less than back,
239

239

00:10:38,830  -->  00:10:43,830
i plus plus, and we'll print what's at queue[i].
240

240

00:10:46,960  -->  00:10:50,940
And so, this code will be printing Jane and John.
241

241

00:10:50,940  -->  00:10:54,610
And that's it, we have now updated our array queue class
242

242

00:10:54,610  -->  00:10:56,940
so that it's a circular queue.
243

243

00:10:56,940  -->  00:10:58,390
I think probably the add
244

244

00:10:58,390  -->  00:11:00,660
is the most difficult one to understand,
245

245

00:11:00,660  -->  00:11:03,340
so if you're kinda struggling with the code,
246

246

00:11:03,340  -->  00:11:06,690
go through these cases with pen and paper.
247

247

00:11:06,690  -->  00:11:08,760
I think it'll make the code clearer.
248

248

00:11:08,760  -->  00:11:10,990
Okay, so now that we've updated to a circular queue,
249

249

00:11:10,990  -->  00:11:12,347
let's go back to the main method,
250

250

00:11:12,347  -->  00:11:14,990
and we have this adding two employees,
251

251

00:11:14,990  -->  00:11:16,900
and then removing, adding, removing, adding.
252

252

00:11:16,900  -->  00:11:19,500
Now, we saw with the non-circular queue
253

253

00:11:19,500  -->  00:11:23,780
that when we came to add Jane Jones, we resize the array.
254

254

00:11:23,780  -->  00:11:26,030
We hit the break point that was resizing the array,
255

255

00:11:26,030  -->  00:11:29,560
because we'd already added five employees,
256

256

00:11:29,560  -->  00:11:32,120
and so, when we came in to add the sixth employee,
257

257

00:11:32,120  -->  00:11:34,560
the back pointer was equal to queue.length,
258

258

00:11:34,560  -->  00:11:36,570
and so we resized the array.
259

259

00:11:36,570  -->  00:11:39,100
But this time, we're gonna check
260

260

00:11:39,100  -->  00:11:40,980
for queue.length minus one.
261

261

00:11:40,980  -->  00:11:43,760
So, this should never happen now,
262

262

00:11:43,760  -->  00:11:46,190
because we're checking the size.
263

263

00:11:46,190  -->  00:11:49,080
And the size is never going to be greater than two, right?
264

264

00:11:49,080  -->  00:11:52,600
Because we only ever have two employees on the array.
265

265

00:11:52,600  -->  00:11:55,010
And so I'm gonna put a break point in here.
266

266

00:11:55,010  -->  00:11:59,300
And so, if we hit this, we're trying to resize the array.
267

267

00:11:59,300  -->  00:12:00,930
And I just wanna make sure all the other code
268

268

00:12:00,930  -->  00:12:01,970
is commented out.
269

269

00:12:01,970  -->  00:12:03,900
And so, this time, we do not expect
270

270

00:12:03,900  -->  00:12:05,470
the array to be resized.
271

271

00:12:05,470  -->  00:12:08,090
We don't expect this break point to be hit.
272

272

00:12:08,090  -->  00:12:12,470
So, let me run the debugger, and sure enough,
273

273

00:12:12,470  -->  00:12:13,850
the break point was not hit.
274

274

00:12:13,850  -->  00:12:15,280
We finished the process.
275

275

00:12:15,280  -->  00:12:17,650
We have Bill and Jane on the queue,
276

276

00:12:17,650  -->  00:12:18,900
which is what we expect.
277

277

00:12:18,900  -->  00:12:21,800
And we did not try to resize the array.
278

278

00:12:21,800  -->  00:12:24,290
And so, we've improved our implementation,
279

279

00:12:24,290  -->  00:12:26,350
because with the previous implementation,
280

280

00:12:26,350  -->  00:12:29,140
80% of the array was empty.
281

281

00:12:29,140  -->  00:12:31,340
We came in and we were resizing it.
282

282

00:12:31,340  -->  00:12:34,360
All right, let's go back to our main method,
283

283

00:12:34,360  -->  00:12:37,150
and I'm going to comment out this code,
284

284

00:12:37,150  -->  00:12:39,080
and let's run the code that we ran
285

285

00:12:39,080  -->  00:12:42,010
to test our non-circular implementation.
286

286

00:12:42,010  -->  00:12:45,840
So, the first thing we'll do is add five employees.
287

287

00:12:45,840  -->  00:12:47,173
And then print the queue.
288

288

00:12:48,660  -->  00:12:49,793
So, let's run.
289

289

00:12:51,980  -->  00:12:53,730
And we have our five employees
290

290

00:12:53,730  -->  00:12:55,560
in the order they were added.
291

291

00:12:55,560  -->  00:12:57,970
Now, if I were to put a break point here,
292

292

00:12:57,970  -->  00:12:59,190
which I've already done,
293

293

00:12:59,190  -->  00:13:01,200
if I run this in the debugger,
294

294

00:13:01,200  -->  00:13:03,720
we expect the array to be resized.
295

295

00:13:03,720  -->  00:13:06,250
Because remember that now we're checking the size
296

296

00:13:06,250  -->  00:13:09,200
against queue.length minus one.
297

297

00:13:09,200  -->  00:13:13,340
And so, when we've added Jane, John, Mary, and Mike,
298

298

00:13:13,340  -->  00:13:15,910
we'll have four employees on the queue.
299

299

00:13:15,910  -->  00:13:18,010
When we come in to add Bill,
300

300

00:13:18,010  -->  00:13:20,950
four will equal queue.length minus one,
301

301

00:13:20,950  -->  00:13:22,450
and then we have to resize.
302

302

00:13:22,450  -->  00:13:24,940
And we went through why we have to do that.
303

303

00:13:24,940  -->  00:13:27,380
We have to do it at that point because
304

304

00:13:27,380  -->  00:13:30,360
we can't wrap back to zero,
305

305

00:13:30,360  -->  00:13:32,750
because zero is occupied by Jane.
306

306

00:13:32,750  -->  00:13:34,760
And so, if you've forgotten that,
307

307

00:13:34,760  -->  00:13:37,330
maybe you watched the last video a while ago,
308

308

00:13:37,330  -->  00:13:39,150
go back and watch the last video
309

309

00:13:39,150  -->  00:13:43,070
if you're unsure as to why we're resizing
310

310

00:13:43,070  -->  00:13:45,450
when we only have four employees on the queue.
311

311

00:13:45,450  -->  00:13:47,900
So, we are resizing when we still have
312

312

00:13:47,900  -->  00:13:49,270
an empty space in the array,
313

313

00:13:49,270  -->  00:13:51,760
but it's a lot better than resizing
314

314

00:13:51,760  -->  00:13:54,260
when 80% of the array is empty.
315

315

00:13:54,260  -->  00:13:55,680
With this implementation,
316

316

00:13:55,680  -->  00:13:59,540
we'll only ever resize when we only have one space left.
317

317

00:13:59,540  -->  00:14:01,940
So let me run the debugger now.
318

318

00:14:01,940  -->  00:14:04,707
And, as we expected, we're resizing the array.
319

319

00:14:04,707  -->  00:14:07,830
And we can see that the queue.length is five,
320

320

00:14:07,830  -->  00:14:10,220
and back is four.
321

321

00:14:10,220  -->  00:14:12,920
Queue.length is five, and if I look at where we are
322

322

00:14:12,920  -->  00:14:15,250
in the main method, sure enough,
323

323

00:14:15,250  -->  00:14:18,260
we're coming in and we're trying to add Bill.
324

324

00:14:18,260  -->  00:14:20,620
And so that's all working as we expected.
325

325

00:14:20,620  -->  00:14:24,060
I'll just tell the debugger to finish the run,
326

326

00:14:24,060  -->  00:14:26,040
and then I'm gonna shut this down.
327

327

00:14:26,040  -->  00:14:30,710
All right, so let's remove two employees,
328

328

00:14:30,710  -->  00:14:32,010
and then we'll print the queue again.
329

329

00:14:32,010  -->  00:14:36,290
I'll comment out this printQueue, and do this one.
330

330

00:14:36,290  -->  00:14:39,440
And so we expect to see Mary, Mike, and Bill
331

331

00:14:39,440  -->  00:14:40,803
remaining on the queue.
332

332

00:14:42,220  -->  00:14:44,650
And sure enough, there's Mary, Mike, and Bill.
333

333

00:14:44,650  -->  00:14:49,440
Okay, so let's peek at Mary, I think that's what we did,
334

334

00:14:49,440  -->  00:14:51,400
in the other video.
335

335

00:14:51,400  -->  00:14:56,230
So I'll just uncomment this System.out.println peek.
336

336

00:14:56,230  -->  00:14:57,063
Let's run.
337

337

00:14:59,340  -->  00:15:03,390
And, this is the print out from this printQueue,
338

338

00:15:03,390  -->  00:15:04,740
and then we peek at Mary,
339

339

00:15:04,740  -->  00:15:06,670
so that's all still working great.
340

340

00:15:06,670  -->  00:15:09,240
Okay, so I'm gonna comment these out,
341

341

00:15:09,240  -->  00:15:10,780
and then we're gonna remove
342

342

00:15:12,350  -->  00:15:14,803
the remaining three employees on the queue.
343

343

00:15:17,030  -->  00:15:19,240
And, I'm gonna uncomment this printQueue down here,
344

344

00:15:19,240  -->  00:15:21,460
because we wanna see that there's nothing on the queue.
345

345

00:15:21,460  -->  00:15:24,410
So, let's run, and we don't expect to see anything printed.
346

346

00:15:26,100  -->  00:15:28,220
That's good, and nothing nasty happened.
347

347

00:15:28,220  -->  00:15:29,620
We didn't get any exceptions.
348

348

00:15:29,620  -->  00:15:32,313
So now let's try removing the sixth employee.
349

349

00:15:34,870  -->  00:15:35,930
Let's see what happens there.
350

350

00:15:35,930  -->  00:15:38,453
We should get a no such element exception now.
351

351

00:15:40,370  -->  00:15:43,580
And we do, at line 43,
352

352

00:15:43,580  -->  00:15:45,880
so everything's working as we're expecting.
353

353

00:15:45,880  -->  00:15:47,500
Let's comment that out,
354

354

00:15:47,500  -->  00:15:50,700
and now let's add Mike onto the queue.
355

355

00:15:50,700  -->  00:15:53,040
And, that'll just show that when we took
356

356

00:15:53,040  -->  00:15:54,630
the last employee off the queue,
357

357

00:15:54,630  -->  00:15:56,630
our front and back was set correctly.
358

358

00:15:56,630  -->  00:15:59,781
So let's go ahead, and there's Mike on our queue.
359

359

00:15:59,781  -->  00:16:04,781
So, our circular queue implementation is working.
360

360

00:16:04,980  -->  00:16:07,950
So now that we know that our implementation is working,
361

361

00:16:07,950  -->  00:16:12,350
lemme just uncomment, rather, comment all this code again,
362

362

00:16:12,350  -->  00:16:14,860
and let me uncomment the first code we ran,
363

363

00:16:14,860  -->  00:16:16,950
because this is the case
364

364

00:16:16,950  -->  00:16:19,160
where we're actually gonna wrap the queue.
365

365

00:16:19,160  -->  00:16:20,920
We don't actually wrap the queue here,
366

366

00:16:20,920  -->  00:16:23,360
because we're adding five employees in a row,
367

367

00:16:23,360  -->  00:16:25,860
and so we end up resizing the queue,
368

368

00:16:25,860  -->  00:16:26,960
rather than wrapping it.
369

369

00:16:26,960  -->  00:16:29,110
As we saw when we ran the debugger.
370

370

00:16:29,110  -->  00:16:31,630
But let's what happens when we wrap the queue, here.
371

371

00:16:31,630  -->  00:16:33,630
And I think we're gonna wrap it,
372

372

00:16:33,630  -->  00:16:35,350
I'm not actually sure where.
373

373

00:16:35,350  -->  00:16:38,850
So, let's put two break points in here,
374

374

00:16:38,850  -->  00:16:41,310
and then I'm gonna remove this break point.
375

375

00:16:41,310  -->  00:16:44,960
And, we'll run in the debugger, and we'll see where we wrap.
376

376

00:16:44,960  -->  00:16:47,650
I would expect it to wrap on one of these employees,
377

377

00:16:47,650  -->  00:16:49,903
probably Jane, but let's run.
378

378

00:16:51,410  -->  00:16:54,290
At this point, we've added Jane and John,
379

379

00:16:54,290  -->  00:16:57,800
and then we've removed Jane, we added Mary,
380

380

00:16:57,800  -->  00:16:59,560
we removed John, we've added Mike.
381

381

00:16:59,560  -->  00:17:01,370
We step into this method,
382

382

00:17:01,370  -->  00:17:03,810
so I'm going to step into it.
383

383

00:17:03,810  -->  00:17:05,530
So, now we're in our add method,
384

384

00:17:05,530  -->  00:17:08,300
so we can take a look at what our queue looks like.
385

385

00:17:08,300  -->  00:17:10,600
So here's our queue.
386

386

00:17:10,600  -->  00:17:11,900
And you'll see that we only
387

387

00:17:11,900  -->  00:17:15,020
have one employee on the queue at this point.
388

388

00:17:15,020  -->  00:17:19,280
Because back here, we've added Jane and John,
389

389

00:17:19,280  -->  00:17:23,670
we removed Jane, we added Mary, we removed John,
390

390

00:17:23,670  -->  00:17:26,330
we've added Mike, we remove Mary.
391

391

00:17:26,330  -->  00:17:28,060
So by the time we're at the call now
392

392

00:17:28,060  -->  00:17:29,600
where we're adding Bill,
393

393

00:17:29,600  -->  00:17:32,053
and at this point only Mike is on the queue.
394

394

00:17:33,330  -->  00:17:34,930
So we shouldn't resize,
395

395

00:17:34,930  -->  00:17:39,570
so I'm going to step over that line,
396

396

00:17:39,570  -->  00:17:41,220
and if we were going to resize,
397

397

00:17:41,220  -->  00:17:42,960
it would have stepped into here.
398

398

00:17:42,960  -->  00:17:46,700
And so all we do here is assign the employee
399

399

00:17:46,700  -->  00:17:48,070
into the back of the queue.
400

400

00:17:48,070  -->  00:17:51,944
And, if I go ahead and keep going through the code,
401

401

00:17:51,944  -->  00:17:54,810
line by line, we'll test whether back
402

402

00:17:54,810  -->  00:17:57,090
is less than queue.length minus one.
403

403

00:17:57,090  -->  00:17:59,330
At this point, back is four,
404

404

00:17:59,330  -->  00:18:02,570
and queue.length minus one is four,
405

405

00:18:02,570  -->  00:18:04,360
and so this test should fail.
406

406

00:18:04,360  -->  00:18:06,730
And so at this point we're gonna wrap the queue.
407

407

00:18:06,730  -->  00:18:09,070
So, let's look at our queue before we do that.
408

408

00:18:09,070  -->  00:18:10,910
The first three elements are empty,
409

409

00:18:10,910  -->  00:18:13,630
and then at position three we have Mike.
410

410

00:18:13,630  -->  00:18:16,130
And at position four we have Bill.
411

411

00:18:16,130  -->  00:18:17,720
So, what we're gonna do at this point,
412

412

00:18:17,720  -->  00:18:19,970
because we have empty room at the front of the array,
413

413

00:18:19,970  -->  00:18:22,330
is we're gonna wrap back to zero.
414

414

00:18:22,330  -->  00:18:24,890
And so, we're doing that because back,
415

415

00:18:24,890  -->  00:18:28,270
which is four, is not less than queue.length minus one,
416

416

00:18:28,270  -->  00:18:29,800
which is also four.
417

417

00:18:29,800  -->  00:18:32,100
And so if I step over this,
418

418

00:18:32,100  -->  00:18:34,100
we should see back reset to zero.
419

419

00:18:34,100  -->  00:18:35,230
And we do.
420

420

00:18:35,230  -->  00:18:37,480
And so we have just wrapped the queue.
421

421

00:18:37,480  -->  00:18:39,660
I mean, the elements in the queue aren't wrapped yet,
422

422

00:18:39,660  -->  00:18:41,140
because there's nothing at zero,
423

423

00:18:41,140  -->  00:18:44,330
but we'll take a look at what happens when we add Jane.
424

424

00:18:44,330  -->  00:18:46,780
So, I'm gonna just hit run here.
425

425

00:18:46,780  -->  00:18:49,300
All right, so we finished the call to adding Bill,
426

426

00:18:49,300  -->  00:18:51,010
and then we remove Mike.
427

427

00:18:51,010  -->  00:18:52,500
And now we're going to add Jane.
428

428

00:18:52,500  -->  00:18:54,900
So, let's do the same thing we did before.
429

429

00:18:54,900  -->  00:18:58,030
Let's step into our add method.
430

430

00:18:58,030  -->  00:18:59,920
We don't expect to resize,
431

431

00:18:59,920  -->  00:19:01,870
because we've wrapped the queue.
432

432

00:19:01,870  -->  00:19:05,540
We've only got one employee, Bill, on the queue.
433

433

00:19:05,540  -->  00:19:08,880
So, there's no need for us to resize the queue.
434

434

00:19:08,880  -->  00:19:10,650
So let's keep going.
435

435

00:19:10,650  -->  00:19:13,260
We're going to assign Jane into queue[back],
436

436

00:19:13,260  -->  00:19:16,120
and back is zero, because we wrapped the queue.
437

437

00:19:16,120  -->  00:19:19,550
So after we've done this, if you look at our queue now,
438

438

00:19:19,550  -->  00:19:22,740
we'll see that we have employees at position zero,
439

439

00:19:22,740  -->  00:19:25,830
that's Jane, and at position four, which is Bill.
440

440

00:19:25,830  -->  00:19:30,810
And we'll see that the front of the queue is four,
441

441

00:19:30,810  -->  00:19:32,680
because Bill's at the front of the queue.
442

442

00:19:32,680  -->  00:19:35,130
And the back of the queue is currently zero,
443

443

00:19:35,130  -->  00:19:36,570
because we haven't incremented it.
444

444

00:19:36,570  -->  00:19:38,300
So now we're gonna do that test again,
445

445

00:19:38,300  -->  00:19:40,700
is back less than queue.length minus one?
446

446

00:19:40,700  -->  00:19:42,640
Well, yes, it is, because back is zero,
447

447

00:19:42,640  -->  00:19:45,330
and so this time, we're just gonna increment back.
448

448

00:19:45,330  -->  00:19:46,493
And there we go.
449

449

00:19:47,380  -->  00:19:49,130
And so, when we leave this method,
450

450

00:19:49,130  -->  00:19:51,540
front is four, back is one.
451

451

00:19:51,540  -->  00:19:54,030
That's the next available position in the queue.
452

452

00:19:54,030  -->  00:19:57,120
And we have Bill at position four,
453

453

00:19:57,120  -->  00:19:58,570
and Jane at position zero.
454

454

00:19:58,570  -->  00:19:59,910
So, we have wrapped our queue.
455

455

00:19:59,910  -->  00:20:01,773
And because we're wrapping the queue,
456

456

00:20:02,690  -->  00:20:05,690
we never come in here and resize the queue.
457

457

00:20:05,690  -->  00:20:07,890
So because we're doing those alternate
458

458

00:20:07,890  -->  00:20:10,110
adding, removing, adding, removing,
459

459

00:20:10,110  -->  00:20:12,030
our array never gets full.
460

460

00:20:12,030  -->  00:20:15,100
I'll just run the debugger now, to completion.
461

461

00:20:15,100  -->  00:20:17,660
Okay, so that's the circular queue.
462

462

00:20:17,660  -->  00:20:19,450
It's definitely an improvement
463

463

00:20:19,450  -->  00:20:21,730
over a queue that does not wrap.
464

464

00:20:21,730  -->  00:20:23,970
And that's all for implementing queues.
465

465

00:20:23,970  -->  00:20:25,810
In the next video, we're going to take a look
466

466

00:20:25,810  -->  00:20:28,610
at what's available in the JDK for queues.
467

467

00:20:28,610  -->  00:20:29,713
So, I'll see ya there.
