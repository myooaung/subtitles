WEBVTT
1
00:00:00.240 --> 00:00:00.660
All right.

2
00:00:00.660 --> 00:00:02.130
Here we go for that final step.

3
00:00:02.130 --> 00:00:05.990
Predicting the salary of the position level six point five.

4
00:00:05.990 --> 00:00:09.450
With both linear regression and pulling them in regression.

5
00:00:09.450 --> 00:00:12.040
So we're going to start with linear regression first.

6
00:00:12.180 --> 00:00:14.580
Therefore creating a new codicil here.

7
00:00:14.580 --> 00:00:20.490
And so now while I asked you to figure out how to predict a single observation you know the dependent

8
00:00:20.490 --> 00:00:24.660
viable for a single observation meaning the position level six point five.

9
00:00:25.050 --> 00:00:26.810
Well let's do it step by step.

10
00:00:26.820 --> 00:00:32.400
Of course the first step you had to do here was to take your linear regression object you know from

11
00:00:32.400 --> 00:00:42.620
the simple in our regression model and this object was named Lin rag this one and then very simply from

12
00:00:42.620 --> 00:00:50.300
this object you're going to call the predict method to predict the salary of the position level six

13
00:00:50.300 --> 00:00:50.910
point five.

14
00:00:51.740 --> 00:00:52.100
All right.

15
00:00:52.130 --> 00:00:57.860
So what exactly do you need to input here in this brick method to get such a predicted salary.

16
00:00:57.860 --> 00:01:04.490
Well I'm sure some of you tried to directly input six point five but unfortunately this is not that

17
00:01:04.490 --> 00:01:05.390
simple.

18
00:01:05.390 --> 00:01:11.300
Because indeed you always have to input your observations in an array.

19
00:01:11.300 --> 00:01:11.740
Right.

20
00:01:11.750 --> 00:01:17.570
That's what is specified here in the parameters the input of the brick method should be an array like

21
00:01:17.570 --> 00:01:23.570
or sparse matrix so an array like is for example a number array or a simple array with double pair of

22
00:01:23.570 --> 00:01:24.360
square brackets.

23
00:01:24.710 --> 00:01:26.330
Well you know I said it.

24
00:01:26.330 --> 00:01:33.470
That's exactly how you need to input an array because generally in Python an array is built with pairs

25
00:01:33.470 --> 00:01:34.670
of square brackets.

26
00:01:34.730 --> 00:01:38.960
If you add just a single pair of square brackets here.

27
00:01:38.990 --> 00:01:44.060
Well that actually creates a list or you can also see it as a vector.

28
00:01:44.060 --> 00:01:49.160
But in order to create an array Well you know an array contains several dimensions like two dimensions

29
00:01:49.160 --> 00:01:54.170
in our case here and therefore need add a double pair of square brackets.

30
00:01:54.170 --> 00:01:56.720
What does this double pair of square brackets mean.

31
00:01:56.720 --> 00:02:03.110
Well the first pair of square brackets here corresponds to the first dimension and the second pair of

32
00:02:03.110 --> 00:02:05.600
square brackets here correspond to the second dimension.

33
00:02:05.600 --> 00:02:09.800
So the first dimension is actually corresponding to the rows in your array.

34
00:02:09.800 --> 00:02:12.970
And the second dimension is corresponding to your column.

35
00:02:12.980 --> 00:02:16.970
So for example if I add just to show you if I add for example five here.

36
00:02:17.090 --> 00:02:21.770
That would create actually an array of one row and two columns.

37
00:02:21.770 --> 00:02:28.070
And if I add here a comma and then another pair of square brackets and then for example 2 and 3.

38
00:02:28.310 --> 00:02:34.130
Well this would create indeed an array of two rows and two columns in the first row you would have six

39
00:02:34.130 --> 00:02:37.500
point five and five and in second row you would have two and three.

40
00:02:37.730 --> 00:02:41.320
So you see the first square bracket here corresponds to the rows.

41
00:02:41.420 --> 00:02:43.760
And the second one correspond to the columns.

42
00:02:43.760 --> 00:02:43.970
All right.

43
00:02:43.990 --> 00:02:46.340
So let's go back to where we were.

44
00:02:46.340 --> 00:02:47.210
Exactly this.

45
00:02:47.450 --> 00:02:53.840
So this indeed is exactly the format expected by this brick method an array of two dimensions even if

46
00:02:53.840 --> 00:02:56.980
this only contains one cell you know one value.

47
00:02:57.020 --> 00:02:58.720
Well it has to be in this format.

48
00:02:58.760 --> 00:03:01.790
And now while you're ready to get that prediction.

49
00:03:01.790 --> 00:03:10.940
So before we execute this let's remember that this person asked for a 160 K salary and this is justified

50
00:03:10.940 --> 00:03:16.760
by the fact that this person earned a one hundred sixty K salary in the previous company which is what

51
00:03:16.760 --> 00:03:22.240
we have to check right now and we're going to check that first with the linear regression model which

52
00:03:22.250 --> 00:03:27.700
returns indeed a salary of three hundred and thirty thousand dollars per year.

53
00:03:27.740 --> 00:03:34.900
So if we actually use this model to negotiate with that person we would actually find it super weird

54
00:03:34.910 --> 00:03:35.170
right.

55
00:03:35.180 --> 00:03:42.340
Because this predicted salary is way over the real salary that this person had in its previous company.

56
00:03:42.380 --> 00:03:44.720
So clearly the prediction here is wrong.

57
00:03:44.720 --> 00:03:47.320
And you know that's what we can clearly see on the graph.

58
00:03:47.330 --> 00:03:53.150
You know the graph above showing the results of the linear regression model six point five is somewhere

59
00:03:53.150 --> 00:03:54.490
around here.

60
00:03:54.530 --> 00:03:59.690
And indeed if we want to get a prediction we have to projected to that blue regression line and then

61
00:03:59.690 --> 00:04:03.220
projected again to the vertical axis which is around here.

62
00:04:03.230 --> 00:04:04.760
And indeed that's what we get.

63
00:04:04.760 --> 00:04:07.420
You know this is multiplied by 10 and the bar is 6.

64
00:04:07.430 --> 00:04:11.670
So indeed we get something around three hundred and thirty.

65
00:04:11.690 --> 00:04:11.960
All right.

66
00:04:11.990 --> 00:04:13.970
So anyway that's a really bad prediction.

67
00:04:13.970 --> 00:04:18.360
So now we're gonna get the good prediction which we can clearly see here.

68
00:04:18.380 --> 00:04:23.510
You know that six point five and we'll get a prediction around here which will correspond indeed to

69
00:04:23.510 --> 00:04:25.970
the salary that this person mentioned.

70
00:04:25.970 --> 00:04:26.930
So let's do this.

71
00:04:27.020 --> 00:04:33.500
Let's create a new coattail here and to get that prediction we're going to do it efficiently.

72
00:04:33.500 --> 00:04:37.740
I'm going to copy this and paste here.

73
00:04:37.880 --> 00:04:43.220
And now once again I would like you to press buzz on this video and figure out what we have to replace

74
00:04:43.220 --> 00:04:49.850
here to indeed get the predicted salary resulting off our polynomial regression model.

75
00:04:49.870 --> 00:04:55.860
So please press pause and then I'll tell you the solution right away OK let's do this.

76
00:04:55.860 --> 00:04:56.060
All right.

77
00:04:56.070 --> 00:05:00.530
So first the obvious thing you had to change is of course the name of your aggressor because for polynomial

78
00:05:00.540 --> 00:05:04.590
regression we named our regressive Lynn rag too.

79
00:05:04.680 --> 00:05:05.220
And then.

80
00:05:05.220 --> 00:05:07.140
Exactly the same thing as before.

81
00:05:07.140 --> 00:05:10.880
Here we can't input that single position level.

82
00:05:10.880 --> 00:05:14.790
You know coming from the matrix of single feature but instead.

83
00:05:14.790 --> 00:05:21.690
Well we have to exactly input you know the features of this equation where X1 is equal to six point

84
00:05:21.690 --> 00:05:22.010
five.

85
00:05:22.020 --> 00:05:29.100
And therefore what we need to input as features is this array composed of the following features values

86
00:05:29.310 --> 00:05:35.010
six point five four X1 then six point five squared four X one squared then six point five at the bar

87
00:05:35.010 --> 00:05:37.740
of three and six on five at the power of four.

88
00:05:37.770 --> 00:05:42.020
Because now we have built a polynomial regression more with the reform.

89
00:05:42.030 --> 00:05:42.490
All right.

90
00:05:42.510 --> 00:05:49.290
So here the exact thing that we have to predict and we can actually input that efficiently by you know

91
00:05:49.530 --> 00:05:56.610
taking exactly what we input here in the predict method that poorly read object from which we call the

92
00:05:56.610 --> 00:06:04.410
fit transform method to transform this matrix of single feature X into this matrix composed of the several

93
00:06:04.500 --> 00:06:06.650
features that the different powers in here.

94
00:06:06.690 --> 00:06:14.970
Well of course the feature value that we will input inside this fit transfer method will not be X but

95
00:06:15.450 --> 00:06:17.780
not six point five directly.

96
00:06:17.850 --> 00:06:19.130
Like you know before.

97
00:06:19.260 --> 00:06:25.420
But once again add to the array containing the value of six point five the cell of six point five.

98
00:06:25.440 --> 00:06:31.490
And so that's exactly the same as before we need to enter this six point five value inside an array.

99
00:06:31.590 --> 00:06:37.140
You know just before we had X here X is an array and now we have to input six point five in it to the

100
00:06:37.140 --> 00:06:38.590
array just like that.

101
00:06:38.670 --> 00:06:40.140
And now there you go.

102
00:06:40.140 --> 00:06:45.370
We're ready to get our predicted salary resulting from the polynomial regression model.

103
00:06:45.450 --> 00:06:47.480
So let's find out right away.

104
00:06:47.520 --> 00:06:54.690
What is that predicted salary and wonderful the predicted salary is one hundred and fifty eight.

105
00:06:54.690 --> 00:07:02.190
Well actually one hundred fifty nine thousand dollars which is super close to the salary mentioned by

106
00:07:02.190 --> 00:07:02.790
this person.

107
00:07:02.790 --> 00:07:05.840
You know as the previous salary earned in the previous company.

108
00:07:06.180 --> 00:07:12.270
So now we can be a hundred percent confident to hire this person because not only it is a good fit for

109
00:07:12.270 --> 00:07:19.060
the job but also it is a very harnessed person and we figured that out with polynomial regression.

110
00:07:19.110 --> 00:07:20.410
So congratulations.

111
00:07:20.460 --> 00:07:25.920
We also have this case study not only we solve this case study but you now know how to build a polynomial

112
00:07:25.920 --> 00:07:26.870
regression model.

113
00:07:26.910 --> 00:07:31.560
And you added that in your toolkit This is your first nonlinear regression model.

114
00:07:31.710 --> 00:07:33.150
Congratulations for that.

115
00:07:33.150 --> 00:07:38.340
Now we're going to build three other ones starting with the as we are a support factor for regression

116
00:07:38.640 --> 00:07:41.400
and that's what we'll do in the next section.

117
00:07:41.400 --> 00:07:47.040
Now for those of you who also want to study our well you'll find that same implementation but in our

118
00:07:47.040 --> 00:07:48.740
of course in the next section.

119
00:07:48.750 --> 00:07:53.340
And for those of you who only want to learn python will join me in the section after that to first learn

120
00:07:53.340 --> 00:07:59.100
about as we are with Carol and then implement the SB amo with me which will be by the way on the same

121
00:07:59.310 --> 00:08:04.670
dataset with the same case study so that we can actually compare the different results of our non-linear

122
00:08:04.680 --> 00:08:05.840
regression models.

123
00:08:05.970 --> 00:08:08.250
So I can't wait to see you in these next sections.

124
00:08:08.400 --> 00:08:10.170
And until then enjoy machine learning.
