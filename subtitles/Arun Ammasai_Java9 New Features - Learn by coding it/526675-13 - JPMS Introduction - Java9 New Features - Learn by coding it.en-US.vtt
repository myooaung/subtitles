WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.680
Hello everyone.

00:00:01.680 --> 00:00:02.655
Welcome back.

00:00:02.655 --> 00:00:04.710
So in this video we are going to talk about

00:00:04.710 --> 00:00:08.700
the another important feature which is related and John and GPM S,

00:00:08.700 --> 00:00:11.475
which is nothing but Java Plateau module system.

00:00:11.475 --> 00:00:16.365
Before we start talking about what is JVM and how it is going to work,

00:00:16.365 --> 00:00:20.354
and how we are going to implement the code with the help of JPS.

00:00:20.354 --> 00:00:24.465
We'll talk about when it was planned and how it is released.

00:00:24.465 --> 00:00:29.745
Okay, So basically the JVM is the plan has been started and the year of 2005.

00:00:29.745 --> 00:00:31.480
So back in 2005,

00:00:31.480 --> 00:00:33.465
it does the discussion charter.

00:00:33.465 --> 00:00:39.200
So they're going to introduce JP MS modulating programming, programming system.

00:00:39.200 --> 00:00:43.085
But that development has been shattered and 25 to 50.

00:00:43.085 --> 00:00:45.620
And then it was planned to release and Java 7,

00:00:45.620 --> 00:00:47.330
which is on 2011.

00:00:47.330 --> 00:00:51.964
But again, it dropped because of the development is not completed.

00:00:51.964 --> 00:00:53.855
The functionality was fully implemented,

00:00:53.855 --> 00:00:56.780
then it was planned on 2014 as a part of Java it,

00:00:56.780 --> 00:00:59.750
and again, it dropped since I get the same reason.

00:00:59.750 --> 00:01:07.520
And finally, the JP MS has been implemented and released as part of Java 9.

00:01:07.520 --> 00:01:10.410
So next thing is,

00:01:10.570 --> 00:01:13.970
it's almost more than two alleles.

00:01:13.970 --> 00:01:18.510
We took to release a JVM as functionality.

00:01:19.980 --> 00:01:25.825
So what is the BMS and what are the functionalities?

00:01:25.825 --> 00:01:28.090
Okay, before that, let me tell you what

00:01:28.090 --> 00:01:30.400
are the things which are going to cover in this particular session.

00:01:30.400 --> 00:01:32.305
The first thing, what is this module?

00:01:32.305 --> 00:01:37.075
And then what is called dependencies and therapies and module graphs.

00:01:37.075 --> 00:01:42.220
We'll talk about lot about O grabs and then modular

00:01:42.220 --> 00:01:47.530
jar and some sample example and how to create a customer and diamond on Monday.

00:01:47.530 --> 00:01:50.260
Okay, So the one now the imagined important thing in Java,

00:01:50.260 --> 00:01:54.325
then you can create your own Java and Tammy environment.

00:01:54.325 --> 00:02:04.025
Okay? And then, so where do we need to move to modular in programming system?

00:02:04.025 --> 00:02:13.805
So what is the problem with the existing way of code like the modular,

00:02:13.805 --> 00:02:16.010
we have a jar, okay,

00:02:16.010 --> 00:02:18.995
so job-based and model-based.

00:02:18.995 --> 00:02:23.810
So job-based is going to be replaced by modular programming.

00:02:23.810 --> 00:02:26.375
Ok, so what is the problem with that?

00:02:26.375 --> 00:02:28.010
So basically what happened?

00:02:28.010 --> 00:02:31.820
Finding charge dependencies, it is impossible.

00:02:31.820 --> 00:02:33.320
Okay, So when you have a class,

00:02:33.320 --> 00:02:34.490
but in your class,

00:02:34.490 --> 00:02:36.980
but you might have a hundreds of JAR files.

00:02:36.980 --> 00:02:39.320
For example, when you have one jar file,

00:02:39.320 --> 00:02:40.700
it depends on another jar file.

00:02:40.700 --> 00:02:45.500
You will not know until unless executes or the service starts.

00:02:45.500 --> 00:02:47.150
So when the runtime is happening,

00:02:47.150 --> 00:02:48.545
when the package is called,

00:02:48.545 --> 00:02:49.895
then only we came to know,

00:02:49.895 --> 00:02:52.190
will you end up with a no class definition folder saying

00:02:52.190 --> 00:02:55.100
like there is some other classifier which is neither,

00:02:55.100 --> 00:02:57.575
which is not available in the class PPAD.

00:02:57.575 --> 00:03:00.290
So finding JAR dependencies a major challenge.

00:03:00.290 --> 00:03:04.310
And then multiple versions of jar in the same class,

00:03:04.310 --> 00:03:07.370
but we have a multiple versions of the same jar file.

00:03:07.370 --> 00:03:09.590
For example, male 1 pint,

00:03:09.590 --> 00:03:11.855
there are 2.03 or there is a possibility of

00:03:11.855 --> 00:03:14.605
duplication and we'll end up with official language.

00:03:14.605 --> 00:03:19.415
Jarrett's going to bind it out and then add our own runtime.

00:03:19.415 --> 00:03:20.630
So there is no way,

00:03:20.630 --> 00:03:21.785
as I said in the earlier,

00:03:21.785 --> 00:03:25.625
there is no way to find out the dependency while in a compile time.

00:03:25.625 --> 00:03:27.935
Because the class definition,

00:03:27.935 --> 00:03:31.670
the glass former classmate found issue will come only on the runtime.

00:03:31.670 --> 00:03:33.980
And then du must judge in the class.

00:03:33.980 --> 00:03:37.610
But if you're running a very big enterprise application in your class,

00:03:37.610 --> 00:03:40.430
but you'll have a lot of jar felt.

00:03:40.430 --> 00:03:44.105
Sometimes it's more than a 100 and sometimes it's even more than a 100.

00:03:44.105 --> 00:03:49.100
So it's pretty hard to maintain the JAR files.

00:03:49.100 --> 00:03:52.955
And then, so when you maintain lot of JAR file,

00:03:52.955 --> 00:03:54.995
there is a possibility you can go,

00:03:54.995 --> 00:03:56.930
you'll end up with a jar health issue.

00:03:56.930 --> 00:03:57.500
Okay.

00:03:57.500 --> 00:03:58.850
It can be anything.

00:03:58.850 --> 00:04:02.795
It might be a dependency issue or a multiple version jar issue.

00:04:02.795 --> 00:04:05.600
I see less an issue, whatever it is.

00:04:05.600 --> 00:04:06.155
Okay.

00:04:06.155 --> 00:04:10.820
You can call them as a jar held our class, but hell.

00:04:10.820 --> 00:04:13.760
And another important thing,

00:04:13.760 --> 00:04:16.355
GAD case getting huge, okay,

00:04:16.355 --> 00:04:17.480
each and every list,

00:04:17.480 --> 00:04:19.775
they're implementing new things.

00:04:19.775 --> 00:04:22.610
So when new things comes into place,

00:04:22.610 --> 00:04:25.670
what happened obviously Algeria size will be getting

00:04:25.670 --> 00:04:31.370
increased and scaling and compact problem.

00:04:31.370 --> 00:04:36.320
So when you are using the traditional way of coding,

00:04:36.320 --> 00:04:41.750
it is impossible or it is very hard to maintain the scaling.

00:04:41.750 --> 00:04:46.445
When you're running a Java application into a system or in a mission,

00:04:46.445 --> 00:04:47.960
it is okay to run.

00:04:47.960 --> 00:04:55.985
But when you're comparing the small systems like microservices are IoT devices,

00:04:55.985 --> 00:04:57.590
are some portable devices.

00:04:57.590 --> 00:05:00.680
So they're all having very less memory sides.

00:05:00.680 --> 00:05:06.930
So it's impossible to run a Java application in that applications are platforms.

00:05:08.290 --> 00:05:13.745
So what are the advantageous when I'm using the modulating system?

00:05:13.745 --> 00:05:16.940
Okay, So then you're using modular system.

00:05:16.940 --> 00:05:20.630
You have modules specific configuration.

00:05:20.630 --> 00:05:23.885
So we'll talk about it. What is Module specific configuration?

00:05:23.885 --> 00:05:30.635
And then you can use the entire power of encapsulation.

00:05:30.635 --> 00:05:34.070
And then it is scalable and compact.

00:05:34.070 --> 00:05:36.590
And how it is scalable and ours is going to be compact.

00:05:36.590 --> 00:05:37.985
We're going to talk about it.

00:05:37.985 --> 00:05:44.345
And then integrated platform and also performance and security.

00:05:44.345 --> 00:05:46.745
We'll talk about each and everything.

00:05:46.745 --> 00:05:52.840
The first thing, let's compare our previous model and vessels.

00:05:52.840 --> 00:05:54.325
Modular model.

00:05:54.325 --> 00:05:55.255
Okay?

00:05:55.255 --> 00:06:00.235
Here is a difference. So what is GR when you're maintaining a lot of JAR file,

00:06:00.235 --> 00:06:03.655
we always end up butter jar heal our class petition,

00:06:03.655 --> 00:06:06.220
I mean SRA class, but hell.

00:06:06.220 --> 00:06:08.335
So what is the major difference between these two?

00:06:08.335 --> 00:06:11.290
In the first find, jar and model, both are same.

00:06:11.290 --> 00:06:15.010
Okay, so Jairus nothing but it's a collection of packages.

00:06:15.010 --> 00:06:17.425
And collection of packages.

00:06:17.425 --> 00:06:22.285
Each and every package contains several class files.

00:06:22.285 --> 00:06:25.720
Or you can say collection of class fails module,

00:06:25.720 --> 00:06:27.550
pretty much the same thing.

00:06:27.550 --> 00:06:32.050
And then there is no way identify the dependency in the class,

00:06:32.050 --> 00:06:35.600
but when you are running the application,

00:06:35.600 --> 00:06:37.340
then only we will be able to identify,

00:06:37.340 --> 00:06:38.825
okay, That is some issue.

00:06:38.825 --> 00:06:43.850
But module programming comes with a configuration file while compiling itself,

00:06:43.850 --> 00:06:46.980
it will validate what are the dependencies needed.

00:06:47.470 --> 00:06:51.605
110 will able to get the dependency issue and modular.

00:06:51.605 --> 00:06:54.125
We can do it in a compiled time itself.

00:06:54.125 --> 00:06:57.185
In the next video, we're gonna talk about

00:06:57.185 --> 00:07:02.010
how exactly the jar system and the moral strength is going to walk.
