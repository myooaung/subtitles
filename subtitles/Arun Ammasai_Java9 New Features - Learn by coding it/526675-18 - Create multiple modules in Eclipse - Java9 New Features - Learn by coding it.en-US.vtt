WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.400
Hello everyone, Welcome back.

00:00:02.400 --> 00:00:06.240
So we discussed about what is a module graph and how Java itself,

00:00:06.240 --> 00:00:08.445
it becomes a module programming system.

00:00:08.445 --> 00:00:11.880
And what are the important things which we need to know

00:00:11.880 --> 00:00:15.165
about the graphs and what are the modules is there.

00:00:15.165 --> 00:00:18.945
And we discuss our Java dot ac and our AT base, right?

00:00:18.945 --> 00:00:20.955
Just take a look at the simple diagram.

00:00:20.955 --> 00:00:22.770
We have a module 1, module 2.

00:00:22.770 --> 00:00:24.660
Module 2 depends on Module 1,

00:00:24.660 --> 00:00:27.270
and the both of them are depends on the hour at base,

00:00:27.270 --> 00:00:33.840
which is nothing but a which is a basic default model for everything.

00:00:33.840 --> 00:00:38.940
So you don't have to provide required Java at base because by default it,

00:00:38.940 --> 00:00:43.895
it, it will be available to all the packages or I mean to say all the modules.

00:00:43.895 --> 00:00:45.965
So what we're gonna do it,

00:00:45.965 --> 00:00:50.255
I'm going to create a simple example now, creating two modules.

00:00:50.255 --> 00:00:56.450
One module 4, welcome an animal model from user and put them into the class.

00:00:56.450 --> 00:01:00.200
But then we'll execute them and we'll see how it is going to walk.

00:01:00.200 --> 00:01:01.490
Right?

00:01:01.490 --> 00:01:03.260
Let me go to Eclipse.

00:01:03.260 --> 00:01:06.230
I'm creating a new employee ID here.

00:01:06.230 --> 00:01:11.615
And I'm going to call them as our welcome module.

00:01:11.615 --> 00:01:17.420
And Next and Finish it will pop-up modeling in four you want to provide,

00:01:17.420 --> 00:01:21.560
I'm going to call them as a model a here and create.

00:01:21.560 --> 00:01:26.030
And I need to have some class felt here which will expose.

00:01:26.030 --> 00:01:29.960
Some methods are export, something.

00:01:29.960 --> 00:01:34.115
Welcome class here, or I can keep them as a welcome.

00:01:34.115 --> 00:01:35.300
In my back.

00:01:35.300 --> 00:01:38.900
I just calm down, keep it as a pack on and just for testing purpose, right?

00:01:38.900 --> 00:01:42.260
So instead of welcome class,

00:01:42.260 --> 00:01:47.285
I have a method called public wide range of KM,

00:01:47.285 --> 00:01:50.190
which will simply print something.

00:01:52.210 --> 00:01:56.195
So it will say, Well come to JP. Yes.

00:01:56.195 --> 00:01:57.200
Okay, good.

00:01:57.200 --> 00:01:59.600
Now let's create a second project.

00:01:59.600 --> 00:02:04.250
I'm not creating this multiple modules in the same program.

00:02:04.250 --> 00:02:05.660
I'm creating different project,

00:02:05.660 --> 00:02:10.265
how it's going to communicate through the modular programming style.

00:02:10.265 --> 00:02:13.415
So here I'm going to call them as a user.

00:02:13.415 --> 00:02:21.380
What do you finish?

00:02:21.380 --> 00:02:24.860
And you can call them as a module B here.

00:02:24.860 --> 00:02:29.190
And create.

00:02:29.560 --> 00:02:32.750
Okay, and I need a class here,

00:02:32.750 --> 00:02:36.230
welcome module to call them, sorry, user,

00:02:36.230 --> 00:02:37.895
more likely to have a class file,

00:02:37.895 --> 00:02:43.040
which we'll call Welcome matter from the other module.

00:02:43.040 --> 00:02:44.810
So I can keep the name is.

00:02:44.810 --> 00:02:46.685
Come back to here,

00:02:46.685 --> 00:02:49.355
create a main method in it and finish.

00:02:49.355 --> 00:02:52.445
Okay, Before we are jumping into implementation.

00:02:52.445 --> 00:02:58.340
So UserModel, looking some information from welcome module, right?

00:02:58.340 --> 00:03:02.180
So first, we need to add the dependency here.

00:03:02.180 --> 00:03:05.090
So this modulus, which is nothing but we'll come model.

00:03:05.090 --> 00:03:06.650
I don't want to add anything here.

00:03:06.650 --> 00:03:09.875
And here. What a lot intro chow.

00:03:09.875 --> 00:03:15.815
Here i requires modelling model.

00:03:15.815 --> 00:03:18.800
But it will end up with an issue.

00:03:18.800 --> 00:03:22.460
It is saying like model a cannot be resolved a module.

00:03:22.460 --> 00:03:24.470
So basically what the same molecule, yeah,

00:03:24.470 --> 00:03:26.810
you probably are desert required here,

00:03:26.810 --> 00:03:29.135
but I don't able to find required,

00:03:29.135 --> 00:03:31.835
I mean the module a because it is there a different project.

00:03:31.835 --> 00:03:33.245
So what do you need to do?

00:03:33.245 --> 00:03:36.560
You do set up the projects that appear good.

00:03:36.560 --> 00:03:39.965
Right-click and go to Build Path, configure Build Path.

00:03:39.965 --> 00:03:41.720
And under the Project tab,

00:03:41.720 --> 00:03:45.290
you need to add that acquired a project part here.

00:03:45.290 --> 00:03:47.660
So click Add here under the module.

00:03:47.660 --> 00:03:50.150
Choose a welcome. So now the welcome module,

00:03:50.150 --> 00:03:54.095
it will do user module and click Okay.

00:03:54.095 --> 00:03:57.320
Bye, See now the error is gone.

00:03:57.320 --> 00:04:00.215
Okay, let's called user class.

00:04:00.215 --> 00:04:03.240
And now we'll radar.

00:04:06.040 --> 00:04:08.570
Welcome class.

00:04:08.570 --> 00:04:11.280
So welcome.

00:04:12.430 --> 00:04:15.150
Welcome.

00:04:17.740 --> 00:04:28.680
So simple it already input congruent.

00:04:29.320 --> 00:04:37.080
Okay, So now what I'm going to call him,

00:04:38.140 --> 00:04:46.680
okay, so now we can call the insula. So let's run it.

00:04:48.840 --> 00:04:52.990
See now we got the information from welcome to TPM

00:04:52.990 --> 00:04:56.170
is normally we basically just take a look over here.

00:04:56.170 --> 00:04:58.000
I have a user modern welcome module.

00:04:58.000 --> 00:05:00.760
So if you want to access some information from welcome module,

00:05:00.760 --> 00:05:02.185
normally what we usually do,

00:05:02.185 --> 00:05:05.680
we're converting out will come modelling into a jar and then

00:05:05.680 --> 00:05:09.775
adding a jar into a user module has a jar dependency,

00:05:09.775 --> 00:05:12.295
but now we are not adding as a dependency.

00:05:12.295 --> 00:05:15.400
We are adding as a module dependency.

00:05:15.400 --> 00:05:18.565
If you want to know that, just right-click and go to project,

00:05:18.565 --> 00:05:21.160
confusion will pad that you can find out what is the market.

00:05:21.160 --> 00:05:25.420
But in case if l multiple projects are multiple modules,

00:05:25.420 --> 00:05:27.550
for example, you have another project here.

00:05:27.550 --> 00:05:29.205
So you can go down to the project.

00:05:29.205 --> 00:05:32.030
And if you want to access those information again from user model,

00:05:32.030 --> 00:05:35.820
you can add one more.

00:05:36.370 --> 00:05:40.280
Here, you can add one more, modular two.

00:05:40.280 --> 00:05:43.985
So this is a one which we added, right?

00:05:43.985 --> 00:05:46.550
So just try it a different grid,

00:05:46.550 --> 00:05:48.455
another Moreland from it.

00:05:48.455 --> 00:05:55.550
And this is what DO thing which we need to know about the CAPM.

00:05:55.550 --> 00:05:59.915
And then there is another important thing which is related to JVMs,

00:05:59.915 --> 00:06:05.059
I Jaylynn concept, so bad we can create our own GRE,

00:06:05.059 --> 00:06:06.680
our own run-time environment.

00:06:06.680 --> 00:06:11.310
Okay, So let's talk about in the next session. Thank you.
