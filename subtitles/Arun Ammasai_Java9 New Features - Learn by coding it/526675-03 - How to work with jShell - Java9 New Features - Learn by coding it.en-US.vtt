WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.505
Hello, developers, welcome back.

00:00:02.505 --> 00:00:06.120
So now let's jump into Java shell.

00:00:06.120 --> 00:00:09.165
Okay, So how are you need to open a Java shall, okay,

00:00:09.165 --> 00:00:10.590
So basically as I mentioned,

00:00:10.590 --> 00:00:11.970
it's a common prompt tool,

00:00:11.970 --> 00:00:14.025
okay, so B, what do you need to do?

00:00:14.025 --> 00:00:16.245
Open the command prompt. That's the first thing to do.

00:00:16.245 --> 00:00:16.980
Okay?

00:00:16.980 --> 00:00:20.340
And we know how to open a ratio, right?

00:00:20.340 --> 00:00:24.795
We don't know. The syntax is going to be just type J.

00:00:24.795 --> 00:00:26.040
Sharon.

00:00:26.040 --> 00:00:26.775
That's all.

00:00:26.775 --> 00:00:29.085
It might take a seconds, few seconds,

00:00:29.085 --> 00:00:33.765
and then it will bring you the welcome message.

00:00:33.765 --> 00:00:35.800
Okay?

00:00:36.730 --> 00:00:40.955
Before that, let's talk about what is the ripple.

00:00:40.955 --> 00:00:43.430
And as I mentioned in other languages,

00:00:43.430 --> 00:00:45.170
C to skim along back.

00:00:45.170 --> 00:00:47.825
Okay, Let me show you the Python idle.

00:00:47.825 --> 00:00:50.810
Okay, this is a Python idle where we do Python coding.

00:00:50.810 --> 00:00:53.045
So let me show you how it is going to work.

00:00:53.045 --> 00:00:54.995
It is not Java, it is a Python ID.

00:00:54.995 --> 00:00:58.040
Okay? I'm gonna do something like 1 plus 1.

00:00:58.040 --> 00:00:59.810
What is happening here?

00:00:59.810 --> 00:01:03.860
I did not provide any variable type or what I need to do.

00:01:03.860 --> 00:01:07.430
Nothing. I just provided one plus one because the Python comm,

00:01:07.430 --> 00:01:09.890
the Python interpreter, it's smart

00:01:09.890 --> 00:01:12.815
enough to identify what are the processes we are trying to make it.

00:01:12.815 --> 00:01:16.055
Okay. For example, I let me try something like that.

00:01:16.055 --> 00:01:18.095
Is 10 less than 20?

00:01:18.095 --> 00:01:20.250
Yeah, it is true.

00:01:20.250 --> 00:01:21.505
Okay.

00:01:21.505 --> 00:01:30.100
For example, let's say like hello, world.

00:01:30.100 --> 00:01:32.365
How come it is happening?

00:01:32.365 --> 00:01:35.290
I just provided to worth it automatically can coordinate

00:01:35.290 --> 00:01:38.650
those two and it is giving that data.

00:01:38.650 --> 00:01:40.195
So how it is happening.

00:01:40.195 --> 00:01:43.465
So this is called the REPL read.

00:01:43.465 --> 00:01:45.535
I always print and loop.

00:01:45.535 --> 00:01:46.435
Okay?

00:01:46.435 --> 00:01:48.820
So the same functionality.

00:01:48.820 --> 00:01:51.625
Now, it came in Java, mine.

00:01:51.625 --> 00:01:54.430
Okay, let's minimize this. Let's try that.

00:01:54.430 --> 00:01:56.500
So now we've got Java Shell in place.

00:01:56.500 --> 00:01:58.090
Okay, let's try the same here.

00:01:58.090 --> 00:02:02.565
1 plus to see and hear.

00:02:02.565 --> 00:02:04.595
This is called scratching variable.

00:02:04.595 --> 00:02:06.605
So whenever you are doing something,

00:02:06.605 --> 00:02:08.915
that data is returned something, right?

00:02:08.915 --> 00:02:11.885
So you will be stored into a different variable name.

00:02:11.885 --> 00:02:13.520
Right?

00:02:13.520 --> 00:02:15.890
Let's try this thing.

00:02:15.890 --> 00:02:18.080
10 less than 25.

00:02:18.080 --> 00:02:22.790
True and true will be stored in another variable.

00:02:22.790 --> 00:02:25.610
We can call them assess scratch variables.

00:02:25.610 --> 00:02:28.445
Okay, let me try it to some concurrent from data.

00:02:28.445 --> 00:02:29.135
Okay?

00:02:29.135 --> 00:02:37.200
It means try hello, world.

00:02:37.990 --> 00:02:41.075
And there is another variable, create a Dollar Tree.

00:02:41.075 --> 00:02:44.570
And it is, it contains HelloWorld.

00:02:44.570 --> 00:02:47.660
Okay, Can we try this isn't a dot-dot-dot and telomere.

00:02:47.660 --> 00:02:53.640
Yeah, Have we can system dot out dot, print LN.

00:02:53.770 --> 00:02:58.880
And here I'm gonna provide hello world.

00:02:58.880 --> 00:03:00.770
And that is not necessary.

00:03:00.770 --> 00:03:02.809
You need to provide the semicolon.

00:03:02.809 --> 00:03:05.390
If you want to go back to the previous command which you enter and

00:03:05.390 --> 00:03:08.780
just use the most up the arrow key up,

00:03:08.780 --> 00:03:12.035
down two more to the previous or the next.

00:03:12.035 --> 00:03:12.665
Okay.

00:03:12.665 --> 00:03:14.135
You can probably the core nozzle,

00:03:14.135 --> 00:03:16.235
which will not go into be an issue.

00:03:16.235 --> 00:03:17.720
But here the Hello World,

00:03:17.720 --> 00:03:21.380
it is not stored in any variables because it's just a predicted manner, right?

00:03:21.380 --> 00:03:24.305
So it will not create a variable to store that.

00:03:24.305 --> 00:03:26.375
Okay?

00:03:26.375 --> 00:03:32.345
So now what I'm gonna do x plus c, What does error here?

00:03:32.345 --> 00:03:36.890
I'm going to add like cannot find symbol x because I haven't used to x anywhere.

00:03:36.890 --> 00:03:42.560
Okay? So int x equals 10.

00:03:42.560 --> 00:03:46.340
So now we have a variable called x, right?

00:03:46.340 --> 00:03:49.490
So now what we can do 5 plus x.

00:03:49.490 --> 00:03:53.915
Now it'll work because every time when you're doing some operation,

00:03:53.915 --> 00:03:55.760
it will store it in a new variable.

00:03:55.760 --> 00:04:00.060
If you want to know what is $1.7, just provide.

00:04:00.250 --> 00:04:03.305
See, you've got the data right,

00:04:03.305 --> 00:04:05.615
or else if you want to know what is the data in x?

00:04:05.615 --> 00:04:06.920
X?

00:04:06.920 --> 00:04:10.040
Because this is very smarter way of coding.

00:04:10.040 --> 00:04:14.690
Okay, so what is the exact difference between the normal coding and the J shell coding?

00:04:14.690 --> 00:04:18.380
Okay, let me create a program.

00:04:18.380 --> 00:04:20.645
Okay, let me create a new class here.

00:04:20.645 --> 00:04:24.240
Like we can call the MSSA hello world.

00:04:24.970 --> 00:04:29.070
Hello world.

00:04:29.230 --> 00:04:32.525
So this is going to be my new Java class.

00:04:32.525 --> 00:04:34.100
So I want to print the hello world here.

00:04:34.100 --> 00:04:38.690
So what I need to do, I need to have a main method here which will

00:04:38.690 --> 00:04:43.610
run main method and which will

00:04:43.610 --> 00:04:50.010
contain system.out.print Ireland and Hello world.

00:04:50.110 --> 00:04:55.445
Okay, so now I created a new class file and they created a new method.

00:04:55.445 --> 00:04:59.900
Now I'm going to compile and run the code just right-click and Rennes

00:04:59.900 --> 00:05:05.615
demo application now it is compiling Java C and then Java dot Filename.

00:05:05.615 --> 00:05:07.520
See what's happening it HelloWorld,

00:05:07.520 --> 00:05:11.240
see for just simply printing a HelloWorld, see what I need to do.

00:05:11.240 --> 00:05:13.310
I need to create a class and integrate a method.

00:05:13.310 --> 00:05:15.665
And I need to call the method,

00:05:15.665 --> 00:05:17.510
and I need to compile it and run it.

00:05:17.510 --> 00:05:19.325
There are too many operations needs to be done.

00:05:19.325 --> 00:05:22.340
Part here, I did the same HelloWorld.

00:05:22.340 --> 00:05:24.020
You know what I ran.

00:05:24.020 --> 00:05:32.490
Simply provided Hello, World.

00:05:32.530 --> 00:05:35.675
That's I got the data back.

00:05:35.675 --> 00:05:42.320
So basically in j shall whatever you are providing that there is no visibility here.

00:05:42.320 --> 00:05:43.700
You don't have to provide public,

00:05:43.700 --> 00:05:47.135
private or something like that because everything is here, it's a public.

00:05:47.135 --> 00:05:54.455
Ok, so, so I created a integer variable or some string variables and I printed some data,

00:05:54.455 --> 00:05:56.910
can create some collections here.

00:05:57.070 --> 00:06:01.715
Kind of saying, I want to print our list of integers here still we can do that.

00:06:01.715 --> 00:06:05.975
We can create a list of integers.

00:06:05.975 --> 00:06:13.145
Integer can call them as Ally is a call to arrays, dot as list.

00:06:13.145 --> 00:06:14.630
And we can provide some data.

00:06:14.630 --> 00:06:17.255
Get on, come on, come on, come on four comma five.

00:06:17.255 --> 00:06:19.280
And that's all.

00:06:19.280 --> 00:06:21.770
Now we have a language content phi numbers.

00:06:21.770 --> 00:06:23.810
Okay, How do I need to print the data?

00:06:23.810 --> 00:06:25.235
Okay, I have a limiter.

00:06:25.235 --> 00:06:28.130
I'm gonna use the forEach method here for you,

00:06:28.130 --> 00:06:35.585
which is January think for each and mental reference here, system.out.

00:06:35.585 --> 00:06:38.195
Print Allen.

00:06:38.195 --> 00:06:40.610
See now we've got the data.

00:06:40.610 --> 00:06:42.530
Okay, So now I tried collection.

00:06:42.530 --> 00:06:44.735
Can we try? And for some follow-up here?

00:06:44.735 --> 00:06:53.630
Still it is possible we can do that for int I equals 0,

00:06:53.630 --> 00:06:56.060
I less than or equal to, for example,

00:06:56.060 --> 00:06:59.430
it's 75 and then I plus, plus.

00:06:59.890 --> 00:07:08.000
And then just print the data system dot out dot,

00:07:08.000 --> 00:07:11.105
print LN line here,

00:07:11.105 --> 00:07:13.500
and just print the data.

00:07:14.710 --> 00:07:16.880
Okay, So what's happening here?

00:07:16.880 --> 00:07:20.120
Okay, so, so now I made a mistake and may follow Bread.

00:07:20.120 --> 00:07:22.280
So what, how we can modify the code?

00:07:22.280 --> 00:07:23.780
Just press the up arrow.

00:07:23.780 --> 00:07:26.210
It will bring, it will bring you the last statement.

00:07:26.210 --> 00:07:26.945
Okay?

00:07:26.945 --> 00:07:34.145
So you can use a left and right navigation keys to move going back.

00:07:34.145 --> 00:07:38.660
So now I'm putting plus hero section and open done now.

00:07:38.660 --> 00:07:42.365
See now it's pretty simple right to you and my father was working here.

00:07:42.365 --> 00:07:43.250
Okay.

00:07:43.250 --> 00:07:48.080
So whatever the process,

00:07:48.080 --> 00:07:52.955
whatever the method which we are trying in normal Java IDE, the same thing.

00:07:52.955 --> 00:07:55.580
We can do it in the Java shall also.

00:07:55.580 --> 00:07:56.990
But have you noticed something?

00:07:56.990 --> 00:08:00.860
I created a list, but I did not import any list.

00:08:00.860 --> 00:08:03.590
Which is strange, right?

00:08:03.590 --> 00:08:08.600
Because normally integrator list we need to implement util dot list, right?

00:08:08.600 --> 00:08:12.065
But I'm not provided anything yet because the shell,

00:08:12.065 --> 00:08:13.714
when it is startup,

00:08:13.714 --> 00:08:17.360
it automatically comes with some predefined packages inputs, okay?

00:08:17.360 --> 00:08:19.505
If you want to know that,

00:08:19.505 --> 00:08:23.945
you can simply use the backslash.

00:08:23.945 --> 00:08:30.020
And you can use the keyword call inputs, right?

00:08:30.020 --> 00:08:31.655
Just using ports here.

00:08:31.655 --> 00:08:36.650
It will show you what are the default inputs.

00:08:36.650 --> 00:08:39.920
Okay, so that is another separate video where we

00:08:39.920 --> 00:08:43.970
can get the hill from the JCL documentation itself.

00:08:43.970 --> 00:08:47.630
What are the keywords and how to retrieve a specific method

00:08:47.630 --> 00:08:51.325
or a specific variable and what are the new way?

00:08:51.325 --> 00:08:57.040
What are the ways to input a new class which is air and some different JAR file.

00:08:57.040 --> 00:09:00.235
And everything going to talk about in the next video.

00:09:00.235 --> 00:09:02.485
Okay, Just give it a try.

00:09:02.485 --> 00:09:04.630
And because you need to get practice on these things,

00:09:04.630 --> 00:09:09.115
orders, it won't be a lot of hands on into it.

00:09:09.115 --> 00:09:13.330
So it will be particularly here for you to the understanding.

00:09:13.330 --> 00:09:16.030
Okay, So not only that,

00:09:16.030 --> 00:09:19.405
there are some other additional operations also here,

00:09:19.405 --> 00:09:21.670
because let me show you something here.

00:09:21.670 --> 00:09:24.145
For example, let's consider I have a file.

00:09:24.145 --> 00:09:26.305
I want to try to open the file.

00:09:26.305 --> 00:09:28.900
All right, so we're going to that.

00:09:28.900 --> 00:09:33.710
So I'm going to use the buffer reader.

00:09:33.710 --> 00:09:37.979
Nber is the quarter WHO new BufferedReader.

00:09:38.560 --> 00:09:42.275
Buffered reader.

00:09:42.275 --> 00:09:45.710
Inside the buffer that I'm going to use a file later,

00:09:45.710 --> 00:09:49.385
which will accept some test.txt.

00:09:49.385 --> 00:09:59.600
I don't know a file, but anyway, what happened?

00:09:59.600 --> 00:10:04.025
So class file and I cannot find symbol, okay?

00:10:04.025 --> 00:10:07.760
That is a problem into the file and name.

00:10:07.760 --> 00:10:09.710
It has to be in a capitalist.

00:10:09.710 --> 00:10:16.760
Alright. So now I'm getting a FileNotFoundException, which is good.

00:10:16.760 --> 00:10:17.840
Okay?

00:10:17.840 --> 00:10:21.200
But normally when you are using some file concept,

00:10:21.200 --> 00:10:23.165
we always get an exception saying like,

00:10:23.165 --> 00:10:26.959
when you're trying to use some files or IO operations,

00:10:26.959 --> 00:10:29.975
you need to write the code inside the try catch,

00:10:29.975 --> 00:10:32.555
or you need to add the exception in the method level.

00:10:32.555 --> 00:10:35.045
But here I didn't provide anything yet.

00:10:35.045 --> 00:10:40.265
Let's try the same thing in our ID and you can see the difference here. Okay?

00:10:40.265 --> 00:10:44.360
So I'm going to use a buffer reader.

00:10:44.360 --> 00:10:52.860
We r is equal to new buffer reader and I'm going to use a new file here,

00:10:53.110 --> 00:10:59.370
which is exerting on test dot TXT.

00:10:59.890 --> 00:11:02.360
Say this is the same thing I did there,

00:11:02.360 --> 00:11:03.680
but I'm getting an error here.

00:11:03.680 --> 00:11:07.384
See the error messages.

00:11:07.384 --> 00:11:09.950
You're using.

00:11:09.950 --> 00:11:12.380
Unhandled exception.

00:11:12.380 --> 00:11:13.265
Okay?

00:11:13.265 --> 00:11:17.150
So when are using some IO operations, it is,

00:11:17.150 --> 00:11:21.455
it is a monetary which we need to use a try-catch block orders going to do,

00:11:21.455 --> 00:11:24.440
add a throws in the declarations.

00:11:24.440 --> 00:11:29.525
So now the issue has been resolved and if you run it now,

00:11:29.525 --> 00:11:32.150
we will get the FileNotFoundException also.

00:11:32.150 --> 00:11:33.965
See the same thing.

00:11:33.965 --> 00:11:40.655
But the reason why I showed you that the set difference, okay, because Shell,

00:11:40.655 --> 00:11:48.050
Java Shell is smart enough to load of operations without giving lot of inputs and edit.

00:11:48.050 --> 00:11:52.010
Because if you want to write a letter to one plus two,

00:11:52.010 --> 00:11:55.325
you don't have to provide a lighter material and write a class something like that.

00:11:55.325 --> 00:11:59.510
All you need is just one and

00:11:59.510 --> 00:12:04.400
plus and 28 will tell you what is the addition operation result for that.

00:12:04.400 --> 00:12:04.940
Okay.

00:12:04.940 --> 00:12:07.400
There are a lot of things there. Ingestion. Okay. I will

00:12:07.400 --> 00:12:09.840
talk about in the next video. Thank you.
