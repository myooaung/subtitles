WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.850
Hello everyone. Welcome back.

00:00:02.850 --> 00:00:06.405
So far we discuss a boat to what is

00:00:06.405 --> 00:00:10.740
take while and drop while and vehicles in some examples also, right?

00:00:10.740 --> 00:00:15.990
So how we can use the TakeWhile and how we can use a job while.

00:00:15.990 --> 00:00:19.845
Okay, so let's try with some real-time example. Okay?

00:00:19.845 --> 00:00:23.220
So what I'm gonna do is I have a pause and repository.

00:00:23.220 --> 00:00:26.895
We can consider this as offline database.

00:00:26.895 --> 00:00:30.420
So I have a Poisson DDO which contains

00:00:30.420 --> 00:00:34.330
the name hide salad and gender and other information.

00:00:34.330 --> 00:00:38.675
Here I have a method which will return a list of person.

00:00:38.675 --> 00:00:40.700
So what I'm trying to achieve here,

00:00:40.700 --> 00:00:43.160
I'm going to use that take while and drop

00:00:43.160 --> 00:00:46.880
while to filter some data in this particular list.

00:00:46.880 --> 00:00:50.330
For example, I have a height here and I have a gender, right?

00:00:50.330 --> 00:00:52.745
So I'm going to use these two as a condition.

00:00:52.745 --> 00:00:57.965
And I want to take while and drop while.

00:00:57.965 --> 00:01:00.305
So I could add a new class here.

00:01:00.305 --> 00:01:04.280
Let me create a main method here so I can implement.

00:01:04.280 --> 00:01:06.140
Okay, so now what I'm gonna do,

00:01:06.140 --> 00:01:09.330
let's call the list of persons,

00:01:10.450 --> 00:01:14.790
this stuff Posen list.

00:01:14.890 --> 00:01:21.710
So input the double-dot lensed and then we have a matter in-person repository.

00:01:21.710 --> 00:01:23.720
Don't get all persons.

00:01:23.720 --> 00:01:26.795
So now we have a list of persons, right?

00:01:26.795 --> 00:01:30.440
So for now what I'm gonna do is I'm just printing the data with

00:01:30.440 --> 00:01:34.100
the help of filter using the stream.

00:01:34.100 --> 00:01:35.255
Okay.

00:01:35.255 --> 00:01:38.760
So what are the condition I'm going to use ISI them,

00:01:38.760 --> 00:01:40.220
that is a two condition I'm going to use.

00:01:40.220 --> 00:01:42.095
The first one is high CEC,

00:01:42.095 --> 00:01:44.330
and the second one is going to be gender check.

00:01:44.330 --> 00:01:51.770
So I'm going to open the stream and add the filter and filter.

00:01:51.770 --> 00:01:53.180
We know that it's a pretty good right?

00:01:53.180 --> 00:01:55.130
So we had to provide some condition.

00:01:55.130 --> 00:01:59.075
We will return a Boolean, right?

00:01:59.075 --> 00:02:01.205
So person is my DTL.

00:02:01.205 --> 00:02:09.980
And here getHeight greater than or equal to 140.

00:02:09.980 --> 00:02:12.650
And I'm going to check another condition here.

00:02:12.650 --> 00:02:19.710
Plus m dot gender dot equals.

00:02:22.060 --> 00:02:25.310
Okay, let me fill from the male.

00:02:25.310 --> 00:02:29.040
And then I'm collecting them as a list.

00:02:29.890 --> 00:02:32.960
Using collect us.

00:02:32.960 --> 00:02:35.880
Don't do list.

00:02:37.560 --> 00:02:39.610
So what I'm gonna do,

00:02:39.610 --> 00:02:42.770
I'm gonna print the data with the help of four h.

00:02:53.520 --> 00:02:56.905
So I'm going to run a tight known.

00:02:56.905 --> 00:02:58.405
Just run it.

00:02:58.405 --> 00:03:06.430
So we should be able to see the person which is nothing but the filtered list.

00:03:06.430 --> 00:03:08.350
So initially in positive A3,

00:03:08.350 --> 00:03:12.010
we have 1234567 person details.

00:03:12.010 --> 00:03:13.450
So it's a positive 7.

00:03:13.450 --> 00:03:15.325
Simply filter some data.

00:03:15.325 --> 00:03:19.360
It will learn it and only 3%,

00:03:19.360 --> 00:03:23.660
which contains the height is greater than 140 and male.

00:03:23.660 --> 00:03:26.720
So I'm going to do the same thing with the help

00:03:26.720 --> 00:03:31.475
of take while we know that what TakeWhile will do, right?

00:03:31.475 --> 00:03:39.260
So TakeWhile, which will return the data once the predicate files.

00:03:39.260 --> 00:03:42.395
So what I'm saying is this is a pretty good right?

00:03:42.395 --> 00:03:44.735
So we can use a predicate.

00:03:44.735 --> 00:03:47.960
So instead of coding like that, right,

00:03:47.960 --> 00:03:52.880
the predicate in a separate place and use it here so that it's a much better approach.

00:03:52.880 --> 00:03:57.470
So what I'm saying is create a predicate again, static predicate,

00:03:57.470 --> 00:04:03.420
and which will take a person as an input and predicate one is equal to.

00:04:03.420 --> 00:04:05.890
And I'm taking this condition,

00:04:05.890 --> 00:04:08.350
we can use the same thing.

00:04:08.350 --> 00:04:13.150
And we'll see an x here.

00:04:13.150 --> 00:04:16.345
So this is pretty good, which I'm going to use the inside the filter.

00:04:16.345 --> 00:04:18.490
We can use the predicate,

00:04:18.490 --> 00:04:20.035
which is the same for now,

00:04:20.035 --> 00:04:21.640
the code looks even simpler, right?

00:04:21.640 --> 00:04:23.665
So that is how we would write a code.

00:04:23.665 --> 00:04:26.600
So let's try to use them.

00:04:27.060 --> 00:04:33.650
Take while. So open the list and I'll create the stream out of it.

00:04:33.840 --> 00:04:38.230
And then now you're going to use TakeWhile,

00:04:38.230 --> 00:04:41.170
TakeWhile, which will accept a pretty good, pretty good, right?

00:04:41.170 --> 00:04:47.965
Which we created P1, which will check the height and the gender check,

00:04:47.965 --> 00:04:49.960
and rest will be the same.

00:04:49.960 --> 00:04:58.010
And then I'm collecting the data and data collector and one and print them.

00:05:00.120 --> 00:05:01.690
Right?

00:05:01.690 --> 00:05:03.910
So stream opened and take while.

00:05:03.910 --> 00:05:05.710
So what will happen on using take?

00:05:05.710 --> 00:05:07.645
Well, once this condition is false,

00:05:07.645 --> 00:05:08.995
it will return the data.

00:05:08.995 --> 00:05:13.510
So whatever they, the process up to that condition, it will be processed.

00:05:13.510 --> 00:05:15.130
For example, if you had n elements,

00:05:15.130 --> 00:05:17.710
it process for dilemma and the fifth element,

00:05:17.710 --> 00:05:22.885
the condition as far as it will run the process to four elements, right?

00:05:22.885 --> 00:05:25.825
Okay, so what I'm gonna do is we got three, right?

00:05:25.825 --> 00:05:30.950
But what happens if you use it to equal once this condition is false?

00:05:30.950 --> 00:05:33.350
I mean, once this condition is false,

00:05:33.350 --> 00:05:36.635
it will return only the specific data.

00:05:36.635 --> 00:05:38.389
So for processed.

00:05:38.389 --> 00:05:41.750
So let me put some here,

00:05:41.750 --> 00:05:44.490
some line breaks, something like that.

00:05:44.890 --> 00:05:47.570
Okay, Now we can call it.

00:05:47.570 --> 00:05:49.340
We can run it now.

00:05:49.340 --> 00:05:50.810
See initially it was three,

00:05:50.810 --> 00:05:52.820
now it is 11.

00:05:52.820 --> 00:05:55.040
The thing is, once the condition is false,

00:05:55.040 --> 00:05:58.175
it's not going for the second one.

00:05:58.175 --> 00:05:59.915
Go to the polls and repository.

00:05:59.915 --> 00:06:03.590
We have 165. It is true and then true,

00:06:03.590 --> 00:06:05.255
and then this files.

00:06:05.255 --> 00:06:08.345
So it is not greater than or equal to 140, right?

00:06:08.345 --> 00:06:11.060
So if you're using link list,

00:06:11.060 --> 00:06:14.405
it will come in the insertion order.

00:06:14.405 --> 00:06:16.760
So now I'm not using a linked list,

00:06:16.760 --> 00:06:19.895
so it will come randomly since I'm using ArrayList.

00:06:19.895 --> 00:06:28.145
So we got to only one person has outcome. Okay?

00:06:28.145 --> 00:06:30.515
Let's use the same thing for dropout.

00:06:30.515 --> 00:06:32.645
We know what properly we'll do right?

00:06:32.645 --> 00:06:37.700
Trump while we'll only do this pretty much same operation like TakeWhile,

00:06:37.700 --> 00:06:40.280
but it will return the rest of the elements.

00:06:40.280 --> 00:06:41.750
It will check all the elements.

00:06:41.750 --> 00:06:43.235
Once the condition is false,

00:06:43.235 --> 00:06:47.750
it will ignore the process of data and it will return the rest of the data.

00:06:47.750 --> 00:06:51.170
Select trump.

00:06:51.170 --> 00:06:55.920
Well, and I'm going to run it right now.

00:06:55.930 --> 00:06:59.630
Let's maximize it and see that difference.

00:06:59.630 --> 00:07:09.290
What is happening in, say, can change this.

00:07:09.290 --> 00:07:15.110
Let me copy, paste and directing and create a new list here.

00:07:15.110 --> 00:07:17.700
So I'm gonna use a drop here.

00:07:18.040 --> 00:07:22.159
So now let's run it and we'll see the difference.

00:07:22.159 --> 00:07:23.930
It's maximize it.

00:07:23.930 --> 00:07:27.455
Okay, So this is the first one which I'm containing Norman filter.

00:07:27.455 --> 00:07:30.200
And this is the one takeaway 179 is false.

00:07:30.200 --> 00:07:32.420
It will return the data so forth processed.

00:07:32.420 --> 00:07:37.070
And here, see, once the data is coming in,

00:07:37.070 --> 00:07:38.270
once the condition is false,

00:07:38.270 --> 00:07:42.560
it will dilation of the data. Right?

00:07:42.560 --> 00:07:45.155
Can you see Campbell here and John here?

00:07:45.155 --> 00:07:47.645
Because John is the one is process here, but here,

00:07:47.645 --> 00:07:51.905
John is notable because John is processed and then the condition is false.

00:07:51.905 --> 00:07:54.650
So the water would later process that has

00:07:54.650 --> 00:07:57.665
been dropped and the restaurant that data has been returned.

00:07:57.665 --> 00:08:02.104
So it won't check the other elements whether those are meeting that criteria.

00:08:02.104 --> 00:08:06.330
So that is how the TakeWhile and the child by little walk.
