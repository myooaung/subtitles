WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.560
Hello everyone.

00:00:01.560 --> 00:00:05.490
Welcome back. Let's continue the highest GDP to client.

00:00:05.490 --> 00:00:12.870
So in John and what is a module and what is a package which contain our new enhancements.

00:00:12.870 --> 00:00:15.255
So let's talk about that.

00:00:15.255 --> 00:00:20.775
So the module, the first thing we need to know which model contains the packages, right?

00:00:20.775 --> 00:00:28.810
So the model is going to be JDK incubator, jot HTTP client.

00:00:29.720 --> 00:00:32.519
Then what is the package?

00:00:32.519 --> 00:00:34.620
We need to know what is a baggage, right?

00:00:34.620 --> 00:00:45.480
So the packet is going to be JDK lot incubator dot HTTP.

00:00:45.880 --> 00:00:51.080
Okay, we might think why is the name polis Incubator?

00:00:51.080 --> 00:00:55.640
Incubator is you all know that when small kids are born

00:00:55.640 --> 00:01:01.129
prematurely will keep them into a incubator.

00:01:01.129 --> 00:01:04.130
That means not fully grown babies.

00:01:04.130 --> 00:01:07.895
The similar way, the highest YouTube client in Java, nine months.

00:01:07.895 --> 00:01:09.785
It is not fully developed.

00:01:09.785 --> 00:01:13.610
It is still that a lot of development is going on.

00:01:13.610 --> 00:01:17.089
So that is the reason it comes under incubator.

00:01:17.089 --> 00:01:18.305
I should have declined.

00:01:18.305 --> 00:01:21.395
So since it is still not fully completed.

00:01:21.395 --> 00:01:26.030
So if you want to use the high strategic client and has to TP,

00:01:26.030 --> 00:01:29.660
you need to manually provide a newer model life an infant,

00:01:29.660 --> 00:01:35.120
a Java requires these modules or is like the hour at basic weren't visible,

00:01:35.120 --> 00:01:38.075
do as to use.

00:01:38.075 --> 00:01:40.100
Okay, when we talk about high,

00:01:40.100 --> 00:01:43.190
typically there are few things which we need to comes into mind.

00:01:43.190 --> 00:01:46.070
What are the major classes we are going to use?

00:01:46.070 --> 00:01:49.010
The first thing is client.

00:01:49.010 --> 00:01:54.750
So for a client, we're using a class called HTTP client.

00:01:56.140 --> 00:01:59.165
All right, I have because we need a client right,

00:01:59.165 --> 00:02:00.830
to initiate a request.

00:02:00.830 --> 00:02:02.435
And then what do you say?

00:02:02.435 --> 00:02:04.250
Okay, I have a client, so what else I need?

00:02:04.250 --> 00:02:06.245
I need the liquids to pass.

00:02:06.245 --> 00:02:15.095
So how we are going to pass the request with the help of AI HTTP request. Good.

00:02:15.095 --> 00:02:18.800
So I have a client and I have a equals. What else do we need?

00:02:18.800 --> 00:02:19.955
So we need to.

00:02:19.955 --> 00:02:21.380
So once you have the client,

00:02:21.380 --> 00:02:23.180
you will have a request and you will pass to

00:02:23.180 --> 00:02:26.840
the sum API or some web services calls eight will return the response.

00:02:26.840 --> 00:02:29.255
So we need to receive the response, right?

00:02:29.255 --> 00:02:34.280
So we need to have another class bladder to handle the HDB response.

00:02:34.280 --> 00:02:38.669
So that last whichever induce HTTP response.

00:02:40.900 --> 00:02:42.350
Right?

00:02:42.350 --> 00:02:47.550
So these are the three major things which we need to know when you're talking about.

00:02:47.920 --> 00:02:54.965
Yeah, Web Services called let me create a simple example.

00:02:54.965 --> 00:03:01.205
Let me probably some steps how we are going to create a request and a client,

00:03:01.205 --> 00:03:03.635
and how we are going to process with the data.

00:03:03.635 --> 00:03:07.220
So let me see, Let us see how to.

00:03:07.220 --> 00:03:10.700
So the first thing, we need a client,

00:03:10.700 --> 00:03:13.055
So for how you're going to get the client,

00:03:13.055 --> 00:03:17.600
you need to require the JDK that incubated at high statistic lined module.

00:03:17.600 --> 00:03:20.240
In your module I have an info that Java file.

00:03:20.240 --> 00:03:22.115
Okay, The first job is done.

00:03:22.115 --> 00:03:26.870
The next thing, Let's create a high HTTP client.

00:03:26.870 --> 00:03:30.770
Http client, and I'm going to call them a sec line.

00:03:30.770 --> 00:03:33.140
So what I'm gonna do is it's going to

00:03:33.140 --> 00:03:34.760
be factoring method because it is going to be written

00:03:34.760 --> 00:03:39.755
the client dot new HTTP client.

00:03:39.755 --> 00:03:41.660
So this is the first matter.

00:03:41.660 --> 00:03:45.110
So the first process we need to create a client where it

00:03:45.110 --> 00:03:49.310
can get request and pass it to somewhere else.

00:03:49.310 --> 00:03:51.635
And what are the next thing which we need to do?

00:03:51.635 --> 00:03:53.840
Request, right?

00:03:53.840 --> 00:03:56.240
But just in quantity, okay?

00:03:56.240 --> 00:03:57.440
You have a request on,

00:03:57.440 --> 00:03:59.405
you're going to somewhere.

00:03:59.405 --> 00:04:01.430
So where you are going to send,

00:04:01.430 --> 00:04:02.780
that means that the part,

00:04:02.780 --> 00:04:06.635
the URL, you need some URL to heat, right?

00:04:06.635 --> 00:04:10.505
So we need to have a URL string, URL.

00:04:10.505 --> 00:04:13.325
And this provides some random URL here.

00:04:13.325 --> 00:04:20.015
And then we can use the HTTP request to using that URL to call the method.

00:04:20.015 --> 00:04:22.955
So now we need to use it request.

00:04:22.955 --> 00:04:24.680
So once the request is ready,

00:04:24.680 --> 00:04:33.185
then we can pass a request to the method or any API services request.

00:04:33.185 --> 00:04:36.570
And it is going to be interest expense is equal to.

00:04:36.790 --> 00:04:39.125
So I'm going to use,

00:04:39.125 --> 00:04:44.160
so the high sugar aqueous dot that is a method called new builder.

00:04:44.980 --> 00:04:49.205
So new builder, it is going to be accepting new URI.

00:04:49.205 --> 00:04:52.040
So you are a back-end network connection.

00:04:52.040 --> 00:04:55.130
I'm in janitor package.

00:04:55.130 --> 00:04:57.020
So what we're gonna do,

00:04:57.020 --> 00:04:59.480
just open the brackets,

00:04:59.480 --> 00:05:02.825
then we are going to pass the new you are

00:05:02.825 --> 00:05:07.640
I need or I matter will accept a string parameter in this case,

00:05:07.640 --> 00:05:09.695
which is nothing but it's an URL,

00:05:09.695 --> 00:05:12.575
which you are going to be hit.

00:05:12.575 --> 00:05:15.635
And then we're going to call the get method.

00:05:15.635 --> 00:05:18.810
And then we're going to call the belt.

00:05:19.480 --> 00:05:27.720
So this is a simplest way to create a request.

00:05:31.110 --> 00:05:33.955
So new builder and new array,

00:05:33.955 --> 00:05:35.635
okay, Now we have everything in place.

00:05:35.635 --> 00:05:36.850
What else do we need?

00:05:36.850 --> 00:05:42.115
So how we are going to call the send the request,

00:05:42.115 --> 00:05:43.780
because we have a client,

00:05:43.780 --> 00:05:46.345
client will help us to send the request, right?

00:05:46.345 --> 00:05:48.775
But there are two things we need to keep in mind.

00:05:48.775 --> 00:05:53.709
We can send asynchronous and also we can send synchronous.

00:05:53.709 --> 00:06:00.535
For now, we're going to use client to send a synchronous call.

00:06:00.535 --> 00:06:02.470
So I'm going to use client.stop.

00:06:02.470 --> 00:06:09.025
And so the sentiment that which will help us do use synchronized operation.

00:06:09.025 --> 00:06:10.900
But what happened if you want asynchronous,

00:06:10.900 --> 00:06:15.380
you can use send a sync.

00:06:16.770 --> 00:06:20.110
So you need to use sends a sync method.

00:06:20.110 --> 00:06:28.990
So just open since it's going to be a sink column.

00:06:28.990 --> 00:06:33.100
So these are the major important thing which you need to keep it in mind when

00:06:33.100 --> 00:06:36.460
you're creating your request,

00:06:36.460 --> 00:06:39.400
or you're trying to make a call to an API,

00:06:39.400 --> 00:06:42.400
or every baby or you can call them.

00:06:42.400 --> 00:06:44.170
And in the next example,

00:06:44.170 --> 00:06:47.845
we're going to see how they are going to retrieve the response back.

00:06:47.845 --> 00:06:51.265
That is another important name because then it returns the response

00:06:51.265 --> 00:06:54.645
will have a different kind of status codes.

00:06:54.645 --> 00:06:58.950
Let's talk about each and every ACT score isn't next video.
