WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.205
Hello everyone, Welcome back.

00:00:02.205 --> 00:00:05.190
So we discussed that originary of our try-catch block.

00:00:05.190 --> 00:00:09.165
We haven't we haven't Jumpin.

00:00:09.165 --> 00:00:11.730
Deep dive. We just look at the how

00:00:11.730 --> 00:00:13.740
the traditional try-catch block looks like

00:00:13.740 --> 00:00:16.620
because since yesterday in Java 7 makes my hair assumption.

00:00:16.620 --> 00:00:19.530
We know what is the basic that try-catch and or.

00:00:19.530 --> 00:00:23.760
So and we tried how the resource looks like in Java.

00:00:23.760 --> 00:00:27.180
So now it is introduced and how we can use it.

00:00:27.180 --> 00:00:35.055
So let's create a new example to see how does a change in Chapter 9.

00:00:35.055 --> 00:00:39.855
So try with two-thirds example.

00:00:39.855 --> 00:00:41.950
Try with resource.

00:00:41.950 --> 00:00:44.105
In Java.

00:00:44.105 --> 00:00:48.380
Example. Right?

00:00:48.380 --> 00:00:51.450
Let me create a main method.

00:00:53.920 --> 00:00:59.030
So what are I tried in before the hour seven in Java 7,

00:00:59.030 --> 00:01:01.625
I'm going to do the same thing in Java, Man also.

00:01:01.625 --> 00:01:05.195
So the first thing, create the resource.

00:01:05.195 --> 00:01:08.345
So to another important thing which we are using,

00:01:08.345 --> 00:01:13.445
Java nine, we can use the resource which already opened. Let's take an example.

00:01:13.445 --> 00:01:17.615
I have a resource opened here, right?

00:01:17.615 --> 00:01:21.305
And I want to use try-catch block here.

00:01:21.305 --> 00:01:26.850
So I can use my resource like this.

00:01:28.060 --> 00:01:30.200
So since it's the file literary,

00:01:30.200 --> 00:01:35.930
introduce a try catch block or we need to use a throws declaration, right?

00:01:35.930 --> 00:01:40.700
Okay, so here I have this also,

00:01:40.700 --> 00:01:43.970
which is nothing but buffering or in my case,

00:01:43.970 --> 00:01:46.820
I'm using inside the try block.

00:01:46.820 --> 00:01:49.490
So it says like,

00:01:49.490 --> 00:01:55.070
I have a resource that is opened already somewhere and I can use it inside the try block.

00:01:55.070 --> 00:01:56.900
And it is going to be final,

00:01:56.900 --> 00:02:00.545
RFLP the final, because if you're trying to change it,

00:02:00.545 --> 00:02:05.300
I'll compiler will throw an error because it has to be final RFQ finite and

00:02:05.300 --> 00:02:10.370
you're trying to modify something which is the final or effortless final.

00:02:10.370 --> 00:02:15.020
Okay, so this is pretty much same like our traditional way of,

00:02:15.020 --> 00:02:17.615
I mean, try with resource example on the right.

00:02:17.615 --> 00:02:24.545
But here we initiated at its source before the try block here.

00:02:24.545 --> 00:02:27.455
So normally we used to do inside the try block.

00:02:27.455 --> 00:02:30.035
I mean, try block me and said My dad bandages.

00:02:30.035 --> 00:02:32.165
Okay, there is another scenario.

00:02:32.165 --> 00:02:34.505
I have a multiple resources.

00:02:34.505 --> 00:02:42.060
For example, b are 1234.

00:02:42.250 --> 00:02:44.330
So how would a hashtable,

00:02:44.330 --> 00:02:46.085
how we can do that?

00:02:46.085 --> 00:02:50.850
We can do something similar like that. It's very simple.

00:02:53.050 --> 00:02:56.480
See, it is very simple.

00:02:56.480 --> 00:02:57.890
Just think about the scenario,

00:02:57.890 --> 00:03:01.040
how we are going to handle this in Java before the hour

00:03:01.040 --> 00:03:05.690
seven unit rate for let me create a same thing here.

00:03:05.690 --> 00:03:10.265
Let me try to put some mitotic here or some SOP here,

00:03:10.265 --> 00:03:17.460
or just print the stack, trace some code.

00:03:20.740 --> 00:03:25.160
And I used all of them inside my try.

00:03:25.160 --> 00:03:30.890
And I don't need to explicitly close each and every resources here.

00:03:30.890 --> 00:03:32.780
So it doesn't matter whether

00:03:32.780 --> 00:03:36.845
the developer is forward to close a particular resource or not.

00:03:36.845 --> 00:03:42.230
Because the code itself to automatically handled with the help of R2 plus.

00:03:42.230 --> 00:03:45.650
Okay, so what will happen if we want to achieve

00:03:45.650 --> 00:03:49.985
the same thing in Java six or before Java 7.

00:03:49.985 --> 00:03:52.440
So basically what we are going to do,

00:03:52.900 --> 00:04:01.475
so I had to do 1234.

00:04:01.475 --> 00:04:03.695
And let's start with the VR1.

00:04:03.695 --> 00:04:06.060
And here what I need to do,

00:04:06.790 --> 00:04:13.320
we are OneNote close and then this computation step.

00:04:14.680 --> 00:04:19.980
And B are two BOT form.

00:04:22.930 --> 00:04:25.040
Just look at the code,

00:04:25.040 --> 00:04:27.170
how simple the code is in Java,

00:04:27.170 --> 00:04:32.150
and just, just, just four lines of code that's an unresponsive to separate.

00:04:32.150 --> 00:04:36.410
But in here, just initializing value,

00:04:36.410 --> 00:04:38.495
we increasingly source before the Java,

00:04:38.495 --> 00:04:43.370
I mean the try-block and then assign some value like this,

00:04:43.370 --> 00:04:45.500
and then handled some exception.

00:04:45.500 --> 00:04:48.140
Because when you're talking about the exception,

00:04:48.140 --> 00:04:50.960
we may not sure whether the exceptions comes from VR1,

00:04:50.960 --> 00:04:52.100
VR2 be a TB or four,

00:04:52.100 --> 00:04:56.825
it can be anything and we have to close everything here.

00:04:56.825 --> 00:04:59.825
So in other scenarios,

00:04:59.825 --> 00:05:02.390
we may need to write something like if you want to

00:05:02.390 --> 00:05:06.590
have a handle each and every session I separately, what do you need to do?

00:05:06.590 --> 00:05:09.305
You have to write a separate try-block here?

00:05:09.305 --> 00:05:14.760
So like like this one.

00:05:16.240 --> 00:05:19.680
And it doesn't make any sense for me.

00:05:21.850 --> 00:05:25.355
If I'm a developer and I don't know,

00:05:25.355 --> 00:05:26.540
like any collided in

00:05:26.540 --> 00:05:29.690
the finally block I3 try-catch blocks to handle each and every dissociates,

00:05:29.690 --> 00:05:33.575
which is not a pretty good way to handle a chord.

00:05:33.575 --> 00:05:35.165
Right?

00:05:35.165 --> 00:05:39.110
So before our sun,

00:05:39.110 --> 00:05:43.520
we had some issues and it has been addressed in Java 7 and we have

00:05:43.520 --> 00:05:45.710
some announcement is possible in

00:05:45.710 --> 00:05:48.920
private resources than it has been handled and Java name.

00:05:48.920 --> 00:05:51.800
Okay, started in the try with resources

00:05:51.800 --> 00:05:55.535
and let me know if you guys have any clarification.

00:05:55.535 --> 00:05:57.120
Thank you.
