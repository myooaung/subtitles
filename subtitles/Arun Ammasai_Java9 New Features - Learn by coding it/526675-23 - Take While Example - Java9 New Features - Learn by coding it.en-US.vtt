WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.040
Hello everyone, Welcome back.

00:00:02.040 --> 00:00:05.400
So we discussed about how filters working.

00:00:05.400 --> 00:00:07.875
Let's talk about map, how the map is going to work.

00:00:07.875 --> 00:00:10.350
So MAP is basically, I start converting,

00:00:10.350 --> 00:00:12.870
it's transforming one kind of data to another kind of data.

00:00:12.870 --> 00:00:15.195
Okay, let me open the stream here.

00:00:15.195 --> 00:00:19.140
Names dot, stream, dot.

00:00:19.140 --> 00:00:25.060
I'm not going to use a filter here and I'm going to use the map.

00:00:25.640 --> 00:00:30.270
So map and map is going to accept as a function, right?

00:00:30.270 --> 00:00:32.265
So what is the function I'm going to use?

00:00:32.265 --> 00:00:34.410
I'm getting some input here.

00:00:34.410 --> 00:00:37.680
I'm converting them into uppercase,

00:00:37.680 --> 00:00:41.270
and then I'm returning back, right?

00:00:41.270 --> 00:00:48.005
And then I'm collecting the data as a list like this to see can copy pasted.

00:00:48.005 --> 00:00:52.175
So you can retrieve it too down on the list are,

00:00:52.175 --> 00:00:54.935
you can simply do the same thing what we have tried here.

00:00:54.935 --> 00:00:57.000
You can simply print it.

00:00:57.850 --> 00:01:00.560
So now let's run the code.

00:01:00.560 --> 00:01:05.840
We'll see now it's a PAL and Nancy,

00:01:05.840 --> 00:01:07.370
which is coming from the first.

00:01:07.370 --> 00:01:11.900
And then we have a name Sweden,

00:01:11.900 --> 00:01:13.735
transformed into a uppercases.

00:01:13.735 --> 00:01:18.275
That is a major use of Twitter and map method.

00:01:18.275 --> 00:01:19.310
Right?

00:01:19.310 --> 00:01:22.610
Okay, Let's talk about our nine enhancements.

00:01:22.610 --> 00:01:27.815
So what are the new things comes into place in Java name, right?

00:01:27.815 --> 00:01:29.540
Let me open here.

00:01:29.540 --> 00:01:31.580
Okay, so what are the two to doing with that?

00:01:31.580 --> 00:01:38.315
Let me open an old per year so we can see it's clearly all right.

00:01:38.315 --> 00:01:42.845
So Java name on it.

00:01:42.845 --> 00:01:44.420
So there are two new methods.

00:01:44.420 --> 00:01:53.150
One is take while and drop while.

00:01:53.150 --> 00:01:56.570
And these are default methods.

00:01:56.570 --> 00:01:57.860
So you can use against

00:01:57.860 --> 00:02:03.080
a collection and open a stream and you're going to use the take while and drop while.

00:02:03.080 --> 00:02:06.530
And there are few other method has we needed ds dt which is

00:02:06.530 --> 00:02:15.140
nothing by I iterate and of nullable bad,

00:02:15.140 --> 00:02:17.770
those are all static methods,

00:02:17.770 --> 00:02:26.255
so you have to use the interface and then you want to call them, right?

00:02:26.255 --> 00:02:29.720
So what does it take y and so what it is going to do,

00:02:29.720 --> 00:02:34.800
it will work like a filter.

00:02:35.470 --> 00:02:42.690
It will break or

00:02:42.700 --> 00:02:53.015
return the data once the condition is false.

00:02:53.015 --> 00:02:55.310
So what does that mean?

00:02:55.310 --> 00:02:57.425
Just go back to Eclipse.

00:02:57.425 --> 00:02:59.750
So just take at this particular code as an example.

00:02:59.750 --> 00:03:00.560
Okay?

00:03:00.560 --> 00:03:03.980
So I have a list of names and I'm taking some conditions here.

00:03:03.980 --> 00:03:06.875
Filter if the condition is greater than or equal to three,

00:03:06.875 --> 00:03:10.295
then print all the data.

00:03:10.295 --> 00:03:12.815
Right? So it will print all of them.

00:03:12.815 --> 00:03:15.680
So in this particular situation into the filter,

00:03:15.680 --> 00:03:18.830
when you're going for take awhile.

00:03:18.830 --> 00:03:22.445
Whenever this particular condition is false,

00:03:22.445 --> 00:03:25.340
it will break it immediately and it'll kinda data.

00:03:25.340 --> 00:03:29.450
So our data so far covered and process that will be returned.

00:03:29.450 --> 00:03:31.145
So in this scenario,

00:03:31.145 --> 00:03:34.280
it will not get anything because the first condition itself, it's failed.

00:03:34.280 --> 00:03:39.240
So what I'm gonna do is let me put the sum in the middle.

00:03:39.400 --> 00:03:42.080
Let me show you the difference.

00:03:42.080 --> 00:03:44.270
Okay? So what I'm going to do,

00:03:44.270 --> 00:03:52.110
I'm going to come on this thing and copy this.

00:03:55.090 --> 00:03:56.870
Right?

00:03:56.870 --> 00:04:00.920
So names that scream and filter,

00:04:00.920 --> 00:04:09.050
I'm going to use TakeWhile filter.

00:04:09.050 --> 00:04:10.280
So what basically happened?

00:04:10.280 --> 00:04:13.070
So once this condition is false,

00:04:13.070 --> 00:04:16.220
it will return the data in this example.

00:04:16.220 --> 00:04:17.990
So power rule is true, right?

00:04:17.990 --> 00:04:20.600
Length is greater than three and sum,

00:04:20.600 --> 00:04:22.895
it is false, so it will want it on the poll.

00:04:22.895 --> 00:04:25.100
Okay, let's run it and see.

00:04:25.100 --> 00:04:27.320
So now we have the data.

00:04:27.320 --> 00:04:30.515
So we got de Paul, right?

00:04:30.515 --> 00:04:39.305
So, so what else we can do with TakeWhile?

00:04:39.305 --> 00:04:41.765
Let's try another example.

00:04:41.765 --> 00:04:49.025
So I'll have a list of integer and a lie.

00:04:49.025 --> 00:04:59.735
And it's going to contain a list of and it has to come up for command six comma 89,

00:04:59.735 --> 00:05:03.050
and 10, and 11 and 12.

00:05:03.050 --> 00:05:05.780
So this is my list.

00:05:05.780 --> 00:05:12.320
So I have even numbers 24668 and in the MLA have an even number.

00:05:12.320 --> 00:05:14.030
So I mean I'm the odd number.

00:05:14.030 --> 00:05:17.090
So 2, 4, 6, 8, it's even number. 9 is odd.

00:05:17.090 --> 00:05:22.415
And then again I have an even number and then I have odd and even.

00:05:22.415 --> 00:05:23.720
So basically what I'm trying to do,

00:05:23.720 --> 00:05:25.895
I'm trying to print only the even numbers.

00:05:25.895 --> 00:05:28.895
So what would happen if I use the TakeWhile?

00:05:28.895 --> 00:05:30.035
Great.

00:05:30.035 --> 00:05:31.445
I like me.

00:05:31.445 --> 00:05:33.665
Come on this also.

00:05:33.665 --> 00:05:38.825
So what I'm gonna do a les dot screen,

00:05:38.825 --> 00:05:43.865
Let's try with the stream firsthand stream dot filter.

00:05:43.865 --> 00:05:46.070
Filter will accept a predicate, right?

00:05:46.070 --> 00:05:48.300
So condition we need to provide.

00:05:49.060 --> 00:05:53.105
So how we can check whether it's odd number or even number,

00:05:53.105 --> 00:05:55.190
we have to check a condition, right?

00:05:55.190 --> 00:05:59.010
X mod 2 equal to 0.

00:05:59.320 --> 00:06:02.210
So there is a condition that we are going to use and I'm

00:06:02.210 --> 00:06:05.240
going to collect the result as a list.

00:06:05.240 --> 00:06:09.620
So we're done and then we can print it.

00:06:09.620 --> 00:06:14.210
So I'm just copy paste items so we don't have to write it again.

00:06:14.210 --> 00:06:16.655
So, got it.

00:06:16.655 --> 00:06:19.250
So now we have a list which will contain some data.

00:06:19.250 --> 00:06:20.435
So I'm using the filter.

00:06:20.435 --> 00:06:22.400
Now I'm going to run them.

00:06:22.400 --> 00:06:24.650
So we've got all the data printer 2,

00:06:24.650 --> 00:06:25.820
4, 6, 8, 10,

00:06:25.820 --> 00:06:30.545
12, 11, and 9 is Mr. because those are odd numbers.

00:06:30.545 --> 00:06:35.600
Okay, Let me use TakeWhile insert of filter.

00:06:35.600 --> 00:06:37.445
So what is a predication here?

00:06:37.445 --> 00:06:39.140
What is outcome here?

00:06:39.140 --> 00:06:40.730
So 2, 4, 6, 8,

00:06:40.730 --> 00:06:42.635
until this point, the condition is true,

00:06:42.635 --> 00:06:44.210
but here it is getting files.

00:06:44.210 --> 00:06:47.420
So obviously it will return the 2, 4, 6, 8.

00:06:47.420 --> 00:06:49.830
Let's run it and see.

00:06:50.590 --> 00:06:53.270
So we got 2, 4, 6,

00:06:53.270 --> 00:06:55.850
and 8 as outcome.

00:06:55.850 --> 00:06:57.830
But after that everything has been dropped

00:06:57.830 --> 00:07:02.960
and the reason is the condition has been fault here.

00:07:02.960 --> 00:07:06.230
So that is the reason we need to use a TakeWhile.

00:07:06.230 --> 00:07:07.760
Okay, In the next example,

00:07:07.760 --> 00:07:10.350
we will talk about drop while.
