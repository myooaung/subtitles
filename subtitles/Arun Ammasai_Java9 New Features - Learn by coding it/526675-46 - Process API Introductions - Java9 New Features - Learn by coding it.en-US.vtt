WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.820
Hello everyone, Welcome back.

00:00:02.820 --> 00:00:07.335
So that is another important announcement which just came in Java nine,

00:00:07.335 --> 00:00:11.009
the enhancement in the process APIs.

00:00:11.009 --> 00:00:16.739
So before Java 9 to handling the process,

00:00:16.739 --> 00:00:19.500
it's really a headache, right?

00:00:19.500 --> 00:00:21.345
If you're creating a notepad,

00:00:21.345 --> 00:00:25.710
if you are opening a notepad on your writing something and through your Java code,

00:00:25.710 --> 00:00:27.300
you're trying to open a Notepad REO,

00:00:27.300 --> 00:00:29.010
trying to open some process,

00:00:29.010 --> 00:00:31.755
it is going to be really a big task.

00:00:31.755 --> 00:00:33.870
So even though, for example,

00:00:33.870 --> 00:00:37.410
you have a scenario where you need to create a text file and

00:00:37.410 --> 00:00:41.060
you need to write into a particular location.

00:00:41.060 --> 00:00:43.955
And then you'd be used Java comments.

00:00:43.955 --> 00:00:50.480
Java comments to open the file with the help of mode pan.

00:00:50.480 --> 00:00:52.850
To solve this particular scenario,

00:00:52.850 --> 00:00:55.040
we had to raise tons and tons of code.

00:00:55.040 --> 00:01:00.680
And also the how to depend on a lot of third party JAR files.

00:01:00.680 --> 00:01:02.570
But after Java nine,

00:01:02.570 --> 00:01:06.920
it has been an answer as an art and that a new method

00:01:06.920 --> 00:01:11.090
has been introduced to taken care of some other processes.

00:01:11.090 --> 00:01:12.380
I mean in the process and mins.

00:01:12.380 --> 00:01:14.075
But example, if I have a process,

00:01:14.075 --> 00:01:16.040
I want to know what is the ID for

00:01:16.040 --> 00:01:19.850
the process and who's the owner of the process and when it started.

00:01:19.850 --> 00:01:21.485
So how long it's been running?

00:01:21.485 --> 00:01:23.450
What is the CP duration?

00:01:23.450 --> 00:01:24.935
Memory utilization?

00:01:24.935 --> 00:01:26.360
So you can, you can,

00:01:26.360 --> 00:01:32.585
you can control everything through your Java code in a simple way.

00:01:32.585 --> 00:01:34.610
Okay, Let's talk about Jon M.

00:01:34.610 --> 00:01:37.040
So what do you what came in G11, okay,

00:01:37.040 --> 00:01:39.335
the process APIs, the first thing,

00:01:39.335 --> 00:01:41.210
as I mentioned till Java 8,

00:01:41.210 --> 00:01:43.670
communication with the process or operating system

00:01:43.670 --> 00:01:46.565
and mentioned is different because Java is a,

00:01:46.565 --> 00:01:49.820
it's not a friendly language for the process.

00:01:49.820 --> 00:01:52.250
Our missions be how to write tons of coding.

00:01:52.250 --> 00:01:54.470
If you're trying to read a process or if

00:01:54.470 --> 00:01:56.780
you're trying to come and get you an operating system, for example,

00:01:56.780 --> 00:01:59.210
if you're trying to retrieve your file from Windows,

00:01:59.210 --> 00:02:01.865
that is different, but in a Linux that is different.

00:02:01.865 --> 00:02:03.110
But we are trying in Mac,

00:02:03.110 --> 00:02:04.550
the thing is different.

00:02:04.550 --> 00:02:08.150
So based on the operating system be how to write a different kind of courts.

00:02:08.150 --> 00:02:10.715
And it is really, really difficult to do that.

00:02:10.715 --> 00:02:13.190
And also, as I mentioned,

00:02:13.190 --> 00:02:16.650
we have to write code based on the operating system.

00:02:16.930 --> 00:02:20.480
To overcome these two things,

00:02:20.480 --> 00:02:24.095
Zhao and end game at a lot of process API and then spins.

00:02:24.095 --> 00:02:28.310
So, okay, what we can do with Java nine, right?

00:02:28.310 --> 00:02:31.040
For example, there's a process is running.

00:02:31.040 --> 00:02:34.775
So I want to know what does the ID for the process are?

00:02:34.775 --> 00:02:37.440
What is the current process?

00:02:37.660 --> 00:02:41.420
And not only the ID,

00:02:41.420 --> 00:02:43.400
you can create your own process.

00:02:43.400 --> 00:02:45.335
Process means some operation.

00:02:45.335 --> 00:02:50.405
Cindy, the things that you're doing manually you can do eat through the Java code.

00:02:50.405 --> 00:02:53.630
You can create a Java class and you learn

00:02:53.630 --> 00:02:56.675
how to run and compile them and compile and run them.

00:02:56.675 --> 00:02:58.625
You can either enter the Java program,

00:02:58.625 --> 00:03:04.145
which will take care of compiling and running into another data fail.

00:03:04.145 --> 00:03:09.935
So similarly, you can write your own process with the help of person builder.

00:03:09.935 --> 00:03:12.770
And this showing you an in-process.

00:03:12.770 --> 00:03:16.895
Then we have all controller control with the process.

00:03:16.895 --> 00:03:21.930
We can replace them with process ID and we can destroy them.

00:03:22.990 --> 00:03:27.170
Also, if steady some processes going on,

00:03:27.170 --> 00:03:30.470
we can find out what is the baton process and

00:03:30.470 --> 00:03:34.070
what are the steps has been done and what is the child process?

00:03:34.070 --> 00:03:37.624
You can retrieve all doing all those information.

00:03:37.624 --> 00:03:40.280
As I mentioned, all the information,

00:03:40.280 --> 00:03:44.270
the process details like Warner and permission and what is the common to use and what is

00:03:44.270 --> 00:03:49.655
the time that process has been shattered and the durations.

00:03:49.655 --> 00:03:51.785
So what did the update comes into?

00:03:51.785 --> 00:03:58.190
Java nine API updates because the process handling and the process,

00:03:58.190 --> 00:03:59.540
it's already existing in Java.

00:03:59.540 --> 00:04:01.835
But what is the object in Java nine.

00:04:01.835 --> 00:04:07.085
So the process is the class which already there in Java.

00:04:07.085 --> 00:04:11.045
But there are new methods added in the process,

00:04:11.045 --> 00:04:15.785
like BID and the intermetallic processing ID and the NFO.

00:04:15.785 --> 00:04:18.770
And closes.

00:04:18.770 --> 00:04:23.240
It is again an existing class which is already existing.

00:04:23.240 --> 00:04:27.155
So the process builder to create or build your own process.

00:04:27.155 --> 00:04:30.320
You, how certain conditions I want to do this operation.

00:04:30.320 --> 00:04:33.215
You can do it the help of process builder.

00:04:33.215 --> 00:04:36.200
And we can access the cutting process,

00:04:36.200 --> 00:04:38.225
parent-child and etc, all this.

00:04:38.225 --> 00:04:40.250
Whatever you wanted to access, whatever you're trying to do,

00:04:40.250 --> 00:04:42.935
you can do that with the help of process handle.

00:04:42.935 --> 00:04:45.695
And process Hamlet was not available earlier.

00:04:45.695 --> 00:04:48.545
It has been introduced in Java nine.

00:04:48.545 --> 00:04:53.240
Similarly, we have another interface

00:04:53.240 --> 00:04:56.900
because process handle it's an interface and insert the placental interface.

00:04:56.900 --> 00:05:01.280
We have a 100 25th call info which will provide the details of the process, you know,

00:05:01.280 --> 00:05:03.500
one process and you are passing the process into

00:05:03.500 --> 00:05:06.290
that process handled that will give you the info,

00:05:06.290 --> 00:05:07.820
all all the information.

00:05:07.820 --> 00:05:09.680
So I bought the particular process.

00:05:09.680 --> 00:05:12.395
So in simpler, if you want to put it in a simple way,

00:05:12.395 --> 00:05:14.195
we have a task manager, right?

00:05:14.195 --> 00:05:15.935
Dass man that handles everything.

00:05:15.935 --> 00:05:18.270
I'll show you in the next video.
