WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.620 --> 00:00:02.790
Hello everyone, Welcome back.

00:00:02.790 --> 00:00:06.075
So we discuss about the intercept changes in

00:00:06.075 --> 00:00:10.605
before Java 8 and what is a genuine happen in Java 8?

00:00:10.605 --> 00:00:13.980
And now we're going to talk about what is the change happened in

00:00:13.980 --> 00:00:19.420
Java because it's already a lot of changes in interest rates and what else they can add.

00:00:19.700 --> 00:00:28.530
In Jonathan began add private methods and prey.

00:00:28.530 --> 00:00:31.080
Which static mat that's any interfaces.

00:00:31.080 --> 00:00:33.165
But why do I need that?

00:00:33.165 --> 00:00:35.125
Okay, If an example,

00:00:35.125 --> 00:00:39.290
the private methods will improve the code reusability inside the interface.

00:00:39.290 --> 00:00:43.085
It's like if you have a multiple methods inside the interface.

00:00:43.085 --> 00:00:48.335
And one mattered, it wants to share the quarter to another method.

00:00:48.335 --> 00:00:52.820
We can use the methods and without

00:00:52.820 --> 00:00:59.045
exposing that private metadata implementing classes, right?

00:00:59.045 --> 00:01:01.895
But there are some restrictions when you're using the private matter.

00:01:01.895 --> 00:01:03.200
There are some restriction. Let's see.

00:01:03.200 --> 00:01:04.415
What is that?

00:01:04.415 --> 00:01:08.315
Okay, so when you're using a private matter, so what will happen now?

00:01:08.315 --> 00:01:10.774
Obviously it cannot be abstract

00:01:10.774 --> 00:01:14.750
and it can be used only inside the interface as if you're creating a method,

00:01:14.750 --> 00:01:19.700
insert an interface which is private one only belongs to that particular interfaces.

00:01:19.700 --> 00:01:22.610
So what are the interface meant that inside only they can

00:01:22.610 --> 00:01:28.325
access and can be used inside either static or non-static interface methods.

00:01:28.325 --> 00:01:30.140
So if you're, if you're creating a method,

00:01:30.140 --> 00:01:32.510
it can be used because for example, you have,

00:01:32.510 --> 00:01:34.880
I'm a Pepsi, you are getting a method to the method,

00:01:34.880 --> 00:01:37.145
real method forgone, use it.

00:01:37.145 --> 00:01:39.140
And now another important thing,

00:01:39.140 --> 00:01:41.060
play with non-static methods.

00:01:41.060 --> 00:01:43.730
For example, private non-static methods

00:01:43.730 --> 00:01:46.115
cannot be used instead of the private static method.

00:01:46.115 --> 00:01:47.450
That is the traditional way.

00:01:47.450 --> 00:01:53.045
Like non-static cannot be used inside static metadata.

00:01:53.045 --> 00:01:54.800
So similar thing.

00:01:54.800 --> 00:01:58.070
So what we're gonna do right now we're going to create a simple example and

00:01:58.070 --> 00:02:02.030
we'll export how the private method can be implemented.

00:02:02.030 --> 00:02:04.985
Let me create a new example here.

00:02:04.985 --> 00:02:14.580
So I'm gonna create a new class Rate Interface example.

00:02:15.460 --> 00:02:17.690
It has a private matter examined,

00:02:17.690 --> 00:02:19.160
but I'm giving you the platelet example.

00:02:19.160 --> 00:02:19.775
Okay?

00:02:19.775 --> 00:02:22.775
So first thing, let's create an interface.

00:02:22.775 --> 00:02:24.920
I'm going to create an interface.

00:02:24.920 --> 00:02:33.095
Interface. I'm going to name them as some basic interface Testing tourists, right?

00:02:33.095 --> 00:02:35.720
Okay, let's create a few meters here.

00:02:35.720 --> 00:02:40.835
The first thing, white one.

00:02:40.835 --> 00:02:42.695
So I didn't provide anything here.

00:02:42.695 --> 00:02:44.675
That means it's abstract matter.

00:02:44.675 --> 00:02:46.760
So I'm going to introduce everything,

00:02:46.760 --> 00:02:47.780
whatever we learn so far,

00:02:47.780 --> 00:02:51.515
I'm gonna create a new default method.

00:02:51.515 --> 00:02:53.090
So let's copy something here.

00:02:53.090 --> 00:02:54.710
So this is my default metabolite.

00:02:54.710 --> 00:02:58.970
Okay, copy this matter too. Good, right?

00:02:58.970 --> 00:03:00.875
So we can have a method3, ASA,

00:03:00.875 --> 00:03:04.160
the static, okay, you can copy that too.

00:03:04.160 --> 00:03:08.300
So we covered everything so far has an interface,

00:03:08.300 --> 00:03:09.515
we can have abstract method,

00:03:09.515 --> 00:03:10.670
we can have a default method,

00:03:10.670 --> 00:03:13.040
we can have a static method, right?

00:03:13.040 --> 00:03:14.900
So what is the need of private method here?

00:03:14.900 --> 00:03:16.490
What it's gonna do?

00:03:16.490 --> 00:03:19.985
So what I'm gonna do is I'm gonna create a private matter here.

00:03:19.985 --> 00:03:29.930
So private ward, and I'm going to call them as three.

00:03:29.930 --> 00:03:31.740
Sorry.

00:03:31.780 --> 00:03:34.115
My third three.

00:03:34.115 --> 00:03:41.255
So message from my three here.

00:03:41.255 --> 00:03:46.160
And what I'm gonna do is I'm going to create another private matter.

00:03:46.160 --> 00:03:48.860
And so we know that private method and

00:03:48.860 --> 00:03:53.790
private static method can be created as part of interface.

00:03:53.860 --> 00:03:58.490
Okay, so here I'm going to name them ESA, message from metaphor.

00:03:58.490 --> 00:04:01.025
Okay, so how would we going to be used?

00:04:01.025 --> 00:04:03.965
So I have a static method here.

00:04:03.965 --> 00:04:06.035
So if we did the static method,

00:04:06.035 --> 00:04:09.290
I can use the methods here.

00:04:09.290 --> 00:04:14.120
I can use a method for inside this burrito static manner.

00:04:14.120 --> 00:04:16.775
I cannot use it because it's not a static.

00:04:16.775 --> 00:04:19.115
And it's a default matter here.

00:04:19.115 --> 00:04:20.900
So if there is a default method,

00:04:20.900 --> 00:04:22.070
I can use the static,

00:04:22.070 --> 00:04:26.180
non-static method red, so I can use my 33 and metaphors.

00:04:26.180 --> 00:04:28.160
We need to do that so far.

00:04:28.160 --> 00:04:31.145
Now what I'm gonna do is I'm going to use a static method for now.

00:04:31.145 --> 00:04:33.770
So this is a chatting with the right metaphor.

00:04:33.770 --> 00:04:36.605
I'm going to call the static method for inside.

00:04:36.605 --> 00:04:39.230
Or you can add some operation and then

00:04:39.230 --> 00:04:41.510
you can call them better for or you can call the method for,

00:04:41.510 --> 00:04:44.015
and then you can do some other operations.

00:04:44.015 --> 00:04:48.740
So what I'm gonna do now, So we know, okay,

00:04:48.740 --> 00:04:50.840
let's implement this.

00:04:50.840 --> 00:04:54.230
Implements test interface.

00:04:54.230 --> 00:04:58.760
Okay, So we have implemented, okay,

00:04:58.760 --> 00:05:08.135
So I already did that one abstract method which needs to be extended as well.

00:05:08.135 --> 00:05:10.970
So here is the message,

00:05:10.970 --> 00:05:16.460
Sorry, message from my third one.

00:05:16.460 --> 00:05:19.250
So I showed them are not necessary.

00:05:19.250 --> 00:05:20.375
So the thing is,

00:05:20.375 --> 00:05:22.475
rest of them are static method or static man,

00:05:22.475 --> 00:05:23.735
I'm in default methods.

00:05:23.735 --> 00:05:25.010
So it may, well,

00:05:25.010 --> 00:05:28.850
we're at an arc minute and chatting with that. We know that we cannot do.

00:05:28.850 --> 00:05:33.620
All right? Okay, so what is the next thing?

00:05:33.620 --> 00:05:42.980
I'm going to create a main method here so that I can create with Jim,

00:05:42.980 --> 00:05:47.135
say continue Montana example.

00:05:47.135 --> 00:05:49.925
So now what I can do.

00:05:49.925 --> 00:05:52.970
So I have object reference again,

00:05:52.970 --> 00:05:54.965
so I can call the method.

00:05:54.965 --> 00:05:57.605
Let me call the method one fast.

00:05:57.605 --> 00:05:59.535
Let's see what is the outcome.

00:05:59.535 --> 00:06:04.150
So it has to be MSA from methadone, right?

00:06:04.150 --> 00:06:06.070
Let's call it and we'll see one by one.

00:06:06.070 --> 00:06:07.945
So I got down on my site from at that one.

00:06:07.945 --> 00:06:09.745
Okay, which is pretty cool.

00:06:09.745 --> 00:06:11.110
Got it.

00:06:11.110 --> 00:06:17.170
So now I'm going to call them Method 2,

00:06:17.170 --> 00:06:20.530
which is possible because I have an object offense here, right?

00:06:20.530 --> 00:06:26.455
So OBJ.me to now run it again,

00:06:26.455 --> 00:06:30.090
we should be able to see the message from the method two.

00:06:31.050 --> 00:06:33.790
Method two, which will return something.

00:06:33.790 --> 00:06:36.290
Okay, so I need to print the data.

00:06:39.060 --> 00:06:43.865
And here is a, Let's run it.

00:06:43.865 --> 00:06:48.665
Cool, we got a message from the default method also. Here is the deal.

00:06:48.665 --> 00:06:51.635
Now I have a static method.

00:06:51.635 --> 00:06:54.860
So static method, we know that static method can be

00:06:54.860 --> 00:06:58.400
called from the interface name, right?

00:06:58.400 --> 00:07:06.515
So copy the interface name and come to your matter interface name dot static method.

00:07:06.515 --> 00:07:07.565
Pretty cool.

00:07:07.565 --> 00:07:09.830
Okay, Now let's run it.

00:07:09.830 --> 00:07:13.760
So we have a message from a third one and default method and message for

00:07:13.760 --> 00:07:17.120
a metal for and message from static method,

00:07:17.120 --> 00:07:19.100
the method for which is nothing but I

00:07:19.100 --> 00:07:22.010
called the static method which will initially column

00:07:22.010 --> 00:07:27.070
and therefore then it will print message for matter for,

00:07:27.070 --> 00:07:30.415
and then it will print a message from static methods.

00:07:30.415 --> 00:07:31.510
Right?

00:07:31.510 --> 00:07:33.130
So I have a default matter, right?

00:07:33.130 --> 00:07:36.550
So I can access than static method on non-genetic matters here.

00:07:36.550 --> 00:07:39.445
So what I'm gonna do is I'm going to call them at 33 and

00:07:39.445 --> 00:07:44.305
also my third for let's see how it went about.

00:07:44.305 --> 00:07:47.230
It pretty much off the straightforward.

00:07:47.230 --> 00:07:49.450
That means what I'm trying to show you here,

00:07:49.450 --> 00:07:51.235
you are able to access here.

00:07:51.235 --> 00:07:54.025
Now, let's run it.

00:07:54.025 --> 00:07:57.625
So the ones the first model is calling method where I'm calling the method two.

00:07:57.625 --> 00:07:59.815
So this is the place that I'm calling methadone.

00:07:59.815 --> 00:08:02.230
So when I call him a third dot,

00:08:02.230 --> 00:08:03.370
the method three will be called.

00:08:03.370 --> 00:08:05.200
So I gotta mete out,

00:08:05.200 --> 00:08:08.225
come here and metaphor come here,

00:08:08.225 --> 00:08:11.045
and then the default matter.

00:08:11.045 --> 00:08:14.270
So this is how the private method will be used

00:08:14.270 --> 00:08:17.975
because the interface has been announced, its keep going.

00:08:17.975 --> 00:08:21.935
Okay, so now we don't have any mother implementation earlier.

00:08:21.935 --> 00:08:25.040
And then we have mattered implementation with the default and static.

00:08:25.040 --> 00:08:28.110
And now we have a private methods.

00:08:28.150 --> 00:08:33.395
So since try out some examples and get familiar with interfaces,

00:08:33.395 --> 00:08:35.820
and we'll talk about in the next session.
