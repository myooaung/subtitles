WEBVTT

00:03.170 --> 00:09.230
Now in our application, we have this shared folder and we have the alert and the button components.

00:09.260 --> 00:17.210
We may have multiple applications and we may use same set of components or same set of services in different

00:17.210 --> 00:17.930
applications.

00:17.930 --> 00:25.850
And for those kind of use cases, Engler has this module functionality, which makes it easier to gather

00:26.060 --> 00:33.920
shared components in a single module so that module can be imported by other projects.

00:33.920 --> 00:40.880
And the components or the services provided in that module can be accessible easily with this module

00:40.880 --> 00:41.750
functionality.

00:42.170 --> 00:46.130
So far we have used different modules in our application.

00:46.130 --> 00:55.430
Like here we imported the HTP client module and later we will import different modules as well.

00:55.700 --> 01:01.460
And the modules are a great way to organize an application and extend it with the capabilities from

01:01.460 --> 01:03.260
external libraries.

01:03.710 --> 01:09.140
Just like using different modules, we can create our own modules as well.

01:09.800 --> 01:18.530
Like here under a shared directory we have this alert and button and basically we are declaring them

01:18.530 --> 01:24.980
right here in this the app module and also we do the same thing in the test modules as well.

01:24.980 --> 01:31.670
But instead of dealing the each element of this shared directory, we can gather all the things in a

01:31.670 --> 01:34.820
module and we can just import that module.

01:34.820 --> 01:41.210
Then all the exported functionality from that module will be accessible to our application.

01:41.600 --> 01:43.190
So let's do that here.

01:43.430 --> 01:52.060
Now we are going to create a module and again I'm going to use Angular CLI and this time running g,

01:52.100 --> 02:01.040
g generate and this is going to be generating a module, g g module and the module name is shared.

02:01.070 --> 02:04.070
This is the name of the shared directory.

02:04.160 --> 02:06.290
So just hitting enter.

02:07.950 --> 02:12.060
So it just created this shared module file.

02:14.210 --> 02:16.940
So here we have this file.

02:17.600 --> 02:24.440
And in this file let's use these declarations to take the alert and button component.

02:24.450 --> 02:28.250
So alert and button.

02:29.260 --> 02:38.650
Now this module is declaring these components and instead of declaring these in other modules, we are

02:38.650 --> 02:41.260
just going to import this shared module.

02:41.260 --> 02:47.770
And by importing the module we want to access to the components like the alert component, the button

02:47.770 --> 02:48.310
there.

02:48.520 --> 02:52.030
And to do that, we need to export.

02:52.390 --> 02:54.540
So there is this exports array.

02:54.820 --> 03:02.560
So we need to export these alert and button component from this module.

03:03.160 --> 03:12.010
So saving it and going to a module now we don't need this part like we only have this app component

03:12.010 --> 03:16.240
and sign up component and we are importing.

03:17.130 --> 03:22.770
Like browser module and initiative module, but also we will import shared module.

03:23.350 --> 03:29.230
So let's save this and we will do the same thing in the tests as well.

03:29.320 --> 03:31.510
So here in the sign up.

03:33.280 --> 03:34.750
This is the spec.

03:34.780 --> 03:40.120
Now, I'm not going to declare the alert and the button.

03:40.360 --> 03:42.760
All I do is just import the shared.

03:43.700 --> 03:44.480
More jobs.

03:47.330 --> 03:50.690
Removing unused imports, saving it.

03:52.170 --> 03:56.040
It's working and it's doing the same thing in sign up.

03:56.340 --> 03:58.200
Just as now.

03:58.200 --> 04:00.720
We don't need to declare these.

04:01.590 --> 04:04.980
All we need to do is just import shared module.

04:06.600 --> 04:07.500
Saving it.

04:09.510 --> 04:12.270
And all the tests are passing.

04:12.660 --> 04:19.770
So with this way, we are organizing our application and we can extend its capabilities and functionalities

04:19.770 --> 04:27.330
and also we can extract this shared module as a separate library and reuse it in other projects.
