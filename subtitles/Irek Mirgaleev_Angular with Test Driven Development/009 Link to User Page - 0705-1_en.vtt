WEBVTT

00:03.180 --> 00:09.900
Now we are listing the users and let's also add a link functionality to these users.

00:09.900 --> 00:16.080
So whenever we click any of them, let's open the user page for that user.

00:17.750 --> 00:23.630
Again, we are going to start with the test, but since this test is going to be having the redirection,

00:23.780 --> 00:30.440
it is better to use the app component for the testing because it is bringing every components together.

00:30.680 --> 00:35.600
So a test like redirection would be more maintainable in that one.

00:36.020 --> 00:43.850
Otherwise, if it tested in this user list, then we either need to mock the routing module or we need

00:43.850 --> 00:49.490
to add user page to the test module, which would couple these two components together.

00:49.490 --> 00:51.050
And we don't want that.

00:51.230 --> 00:55.340
So let's add the test to the app.

00:55.640 --> 01:04.970
So opening the app component spec, now let's add the test and just adding after the navigation test.

01:04.970 --> 01:09.500
So this is the end of the navigation test.

01:11.660 --> 01:25.490
So here adding the test, it navigates to user page when clicking the user name on user list.

01:28.490 --> 01:32.180
Now this test is going to be similar to this one.

01:32.390 --> 01:40.790
The previous test for the navigation, if you remember, we were clicking to the link elements and for

01:40.790 --> 01:49.340
this test we were wrapping our test with the fake sync and we were in control of the async works and

01:49.340 --> 01:55.670
we could just move to the next one by calling the tick and we will do the same thing here.

01:56.640 --> 02:03.270
So this is going to be like this again, fake async.

02:03.750 --> 02:09.000
This is a function and we are passing our test function to this.

02:09.390 --> 02:12.600
And this test function is also going to be async.

02:13.890 --> 02:21.450
And let's have the test now we are going to open the home page.

02:21.450 --> 02:25.500
So let's call the router navigate to.

02:27.340 --> 02:28.760
The root URL.

02:28.900 --> 02:29.780
Like this one.

02:29.800 --> 02:36.160
Then we are going to make a request to get the users.

02:36.160 --> 02:42.190
So we need to have the HTP testing controller here in the compound.

02:42.190 --> 02:44.470
We didn't use it, but now we need it.

02:44.920 --> 02:49.490
So we have the client testing module, but we don't have the issue.

02:49.510 --> 02:50.410
TB testing control.

02:50.410 --> 02:54.220
So let's have a variable of it here.

02:54.320 --> 03:06.040
HTTP testing controller and it is this type of variable and we are going to inject it just like we did

03:06.040 --> 03:07.180
for the router.

03:07.540 --> 03:18.610
We are going to get this TB testing controller by calling test, but inject the TB testing controller.

03:19.690 --> 03:22.330
So we are going to.

03:23.670 --> 03:27.810
Handle the request coming for the user list.

03:28.410 --> 03:38.880
So let's have it like this stupid testing controller and we can go with expect one bypassing this function.

03:38.880 --> 03:44.430
So we would be handling all the requests coming to this testing controller.

03:45.090 --> 03:56.250
We know that it's going to be just the load users, so in the request we can return that response accordingly.

03:56.250 --> 04:03.390
So as a response we will return request flush.

04:05.760 --> 04:06.690
And.

04:08.430 --> 04:16.740
We will return content three and for this case we can return just a single element, single user like

04:16.740 --> 04:31.050
this id one user name is user one and email is user one at gmail.com and page is going to be zero.

04:31.050 --> 04:37.680
Size is, let's say three and total pages is one.

04:38.720 --> 04:41.570
So we have only one user in the application.

04:42.050 --> 04:53.150
So after the response to let's force UI to update the exchanges, now we are going to get the element

04:53.150 --> 04:54.040
list item.

04:54.050 --> 05:02.060
But since we are going to have the navigation for the navigation, we can use the anchor.

05:02.180 --> 05:08.600
So let's say we will have anchor element wrapping this user name here.

05:09.230 --> 05:11.360
So the query will be like this.

05:11.540 --> 05:17.180
We will get query selector.

05:17.210 --> 05:19.820
We will get this list item.

05:19.820 --> 05:22.280
And the list item is.

05:23.240 --> 05:24.680
Opening the component here.

05:25.130 --> 05:26.840
This item is this one.

05:27.470 --> 05:35.390
We can use these classes like this group item to query that list element.

05:37.100 --> 05:42.620
And like this the class we are looking for an element having this class.

05:42.860 --> 05:46.610
And in that one, there will be an anchor.

05:46.790 --> 05:49.790
So we can access to the anchor element like this.

05:49.790 --> 05:52.790
So anchor will be child of the this element.

05:52.800 --> 06:01.520
So in the end, we will get the let's say this is the link to user page.

06:03.510 --> 06:06.840
So this is the link and we are going to click to this one.

06:07.440 --> 06:15.180
And previously we did this here we were calling the clicked on calling tick then fixture detect changes.

06:16.470 --> 06:21.120
So I'm just copying these lines here.

06:22.130 --> 06:24.260
Because we will do the same things.

06:24.260 --> 06:34.250
But the difference is we are just going to click, click to the link to user page, click and running

06:34.280 --> 06:40.220
take and calling fixture changes to complete the navigation.

06:40.220 --> 06:46.580
Then in the end we will see the the user page so we can query like this user page.

06:46.580 --> 06:48.410
This is the taste ID for user.

06:48.590 --> 06:50.900
So we will be seeing the user page.

06:51.140 --> 06:56.180
We can also do one more assertion here which is highly correlated with this one.

06:56.810 --> 07:05.000
We have the navigation like let's open the browser module, we have the parts like this user and ID

07:05.450 --> 07:09.050
so we can check this one as well.

07:09.050 --> 07:18.890
So for this case, we will see the path to be user forward slash one and we can do that by accessing

07:18.920 --> 07:22.940
to the location and we can access the location like this.

07:22.940 --> 07:35.630
Let's have the variable first location, location and this is the location from Angular Common and we

07:35.630 --> 07:38.450
are going to inject it right here.

07:38.900 --> 07:43.580
Location, testbed inject location.

07:45.260 --> 07:51.590
Now in the test we can check the pad like this.

07:51.590 --> 08:04.130
We expect location pad to be two equal to this one.

08:04.400 --> 08:07.820
It's going to be user one.

08:08.810 --> 08:11.060
So the test is ready.

08:11.060 --> 08:14.360
Let's open the karma saving this one.

08:20.230 --> 08:26.260
So the test is failing, but the test failure is happening at this line.

08:27.910 --> 08:31.870
So we have the TB testing controller.

08:31.990 --> 08:35.750
It is saying there is no request matching to the criteria.

08:35.770 --> 08:43.180
The criteria is we capture all the requests, but there is no request and that's because we forget to

08:43.300 --> 08:44.540
call the fixture.

08:44.560 --> 08:45.490
The deck changes.

08:45.490 --> 08:54.370
So after the navigation is completed, we, we want home page to be rendered and we achieve that by

08:54.400 --> 08:55.780
calling the fixture data exchange.

08:55.840 --> 08:57.580
So saving this one again.

09:00.440 --> 09:09.500
Now we have different failure, and that's because the link to user pages does not have any link functionality

09:09.500 --> 09:18.500
yet because we are trying to get the anchor and that fails so we cannot click to anything.

09:18.830 --> 09:20.180
Now let's fix this.

09:20.180 --> 09:28.400
So opening the user list component for a solution, we can do something like this.

09:28.400 --> 09:29.810
We can have an anchor.

09:31.290 --> 09:35.130
Opening and closing and moving this user username into that anchor.

09:35.430 --> 09:40.230
Now we are going to use the router link.

09:40.410 --> 09:47.070
If you remember, we have used that one in the navigation bar for setting the link, but this time we

09:47.070 --> 09:48.270
will have a dynamic link.

09:48.270 --> 09:53.970
So the the value we will set will be dynamic.

09:53.970 --> 10:03.390
So we can achieve that dynamic assignment by using the property binding here and we can do like this.

10:04.350 --> 10:14.130
This is going to be a URL like this user and we are going to end user ID.

10:14.160 --> 10:25.530
So in in child of the anchor, we are displaying user username and in the link word in the ref, we

10:25.530 --> 10:31.680
are using this user's ID and we are having this string concatenation.

10:31.950 --> 10:33.360
So let's say this one.

10:37.060 --> 10:39.820
And the test is passing.

10:40.300 --> 10:42.710
And let's test this one on browser.

10:42.730 --> 10:49.810
Now the the user list is visible like this since we are wrapping the username with anchor.

10:49.900 --> 10:51.760
The anchor style is applied.

10:51.790 --> 10:58.870
So if you hover on these users in the below, you will see the links.

10:58.870 --> 11:02.650
So if I click to this one, it goes to user one.

11:02.950 --> 11:11.200
And if I click to this one, it goes to user three for the router link.

11:11.200 --> 11:18.490
Instead of going like this, we could assign an error and it would be like this.

11:18.490 --> 11:26.620
Just having an array here and we are separating the pad parts with the comma.

11:26.620 --> 11:30.730
So there is this user section, then there is this user ID.

11:30.760 --> 11:32.950
So this would also work.

11:36.430 --> 11:37.960
And the tests are passing.

11:39.100 --> 11:43.030
Now we can go with an alternative solution as well.

11:44.770 --> 11:52.150
We can use dynamic routing functionality or we can call it programmatic redirection.

11:52.150 --> 11:57.280
And so in the user list component.

11:57.990 --> 11:59.640
We can have a function.

11:59.760 --> 12:08.940
Let's say it's going to be navigate and we are going to pass the users ID to this one and it's going

12:08.940 --> 12:09.810
to be number.

12:10.980 --> 12:17.160
Now we are going to use the angular router to handle the navigation.

12:17.160 --> 12:20.730
And to do that we are going to inject.

12:22.530 --> 12:23.550
Rooter.

12:25.620 --> 12:27.270
This is coming from angle router.

12:28.120 --> 12:29.320
And here.

12:30.160 --> 12:36.370
We will call this router and it has this navigate function.

12:37.300 --> 12:39.520
And we will pass an array.

12:40.120 --> 12:44.400
And this is similar to the the navigation we are doing in the test.

12:44.410 --> 12:55.900
We are facing an array and just like we do here, we will add the parts of the path to that area.

12:55.930 --> 13:03.280
Like in the area we will have the user and we will have this ID.

13:03.910 --> 13:07.930
Now we can call this navigate function in the template.

13:08.050 --> 13:13.900
So let's remove the anchor and let's add this functionality to the list item.

13:15.270 --> 13:26.100
So let's add a click event binding and we are just going to call the navigate and we will pass the idea

13:26.100 --> 13:30.000
of this user user ID.

13:30.330 --> 13:32.250
So let's say these changes.

13:35.840 --> 13:38.420
Now we have a couple of failures.

13:38.540 --> 13:39.470
We will fix that.

13:39.470 --> 13:46.010
But first, let's test it on browser and now the style is back to the way it was.

13:46.550 --> 13:50.840
It's not clear at the moment, but we are able to click these.

13:50.840 --> 13:56.090
So I'm just clicking to this user one and here we are navigated to the user one page.

13:56.090 --> 14:00.980
And if I click to user three, we are going to these user three page.

14:01.490 --> 14:08.060
At first, let's fix our tests so we have failures, like we have ten failures.

14:08.060 --> 14:10.460
And those are the tests.

14:11.150 --> 14:18.110
The last one, the last test for the navigation and the user is component tests are failing.

14:18.770 --> 14:24.500
The user list component is are failing because now in the user list we are using a new dependency this

14:24.500 --> 14:25.340
router.

14:25.340 --> 14:36.320
But in user this component, we don't have anything about the routing that that router dependency is

14:36.320 --> 14:46.610
coming from angular router and we didn't import that routing module in the user list component.

14:46.610 --> 14:49.310
So let's import that.

14:49.430 --> 14:54.710
And in the test we are importing the router testing module.

14:54.950 --> 14:55.850
So that's it.

14:55.850 --> 14:56.930
Let's save this one.

15:01.030 --> 15:06.400
Now we have only one failure and let's see the list.

15:07.000 --> 15:11.620
Here we see the user list components are passing and the failing test is this one.

15:12.070 --> 15:20.110
The the navigation test we have added for the user list navigation this test.

15:20.590 --> 15:21.910
And the reason is now.

15:23.180 --> 15:24.230
We don't have the anchor.

15:24.230 --> 15:29.450
Therefore, this is not returning the elements we are looking for.

15:29.540 --> 15:30.740
Therefore there is no click.

15:30.740 --> 15:37.850
So I'm just removing the anchor from this query selector and I'm just querying the list group item and

15:37.940 --> 15:38.420
that's it.

15:38.420 --> 15:40.460
Let's save this one.

15:42.860 --> 15:45.050
And here we see the tests are passing.

15:45.790 --> 15:54.820
So as an implementation sample, I would like to keep this one, this dynamic or programmatic navigation

15:55.240 --> 15:59.320
in the repo so that you can take a look in the future.

15:59.950 --> 16:07.990
And I would like to have a different kind of implementation to be existing in this course project.

16:08.690 --> 16:14.390
And so I will go like this, but you can go whichever way you like.

16:14.840 --> 16:24.140
One more thing for this implementation is I'm just going to set the styling for for the list items here

16:24.500 --> 16:27.440
to indicate that user can click to those.

16:27.440 --> 16:36.680
So at the moment, if, if we hover these, we don't see any change in the cursor, but we should give

16:36.680 --> 16:45.560
that clue to user that these are clickable and we can do that right here, opening the user list component,

16:45.590 --> 16:56.810
CSS setting style for all these items and not going any specific here, just going with the lie and

16:56.810 --> 17:01.700
the cursor will be pointer saving this one.

17:02.720 --> 17:08.450
And if I hover on these list items, now we have this pointer.

17:08.600 --> 17:11.630
So the style is scope to the element.

17:11.640 --> 17:19.370
So even we don't have any specific naming for this style, this is just specific to the user.

17:19.460 --> 17:27.080
So if you have another list item, another component, it will not be affected from this style because

17:27.440 --> 17:31.190
if we just inspect this element here.

17:33.760 --> 17:41.860
Here we have this attribute added to it, which is actually containing the style for the cursor right

17:41.860 --> 17:42.340
here.

17:43.530 --> 17:51.480
So Angular is dynamically generating the selectors, so the styles we are using here won't be affecting

17:51.510 --> 17:52.710
other components.
