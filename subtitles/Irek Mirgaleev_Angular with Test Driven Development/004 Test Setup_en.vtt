WEBVTT

00:03.500 --> 00:06.110
Dengler project comes with tests set up.

00:07.470 --> 00:15.180
In Pic Jason we will see two dependencies for testing jasmine and karma.

00:16.050 --> 00:19.740
We are using Jasmine functionalities when writing our tests.

00:20.160 --> 00:25.650
Karma is automating the running part of these tests and it runs them on browser.

00:27.390 --> 00:28.860
In the project.

00:28.860 --> 00:33.090
We already have a sample of test for the app component.

00:33.630 --> 00:35.970
Now we can run the tests.

00:37.260 --> 00:39.750
Let's open a new terminal.

00:40.890 --> 00:44.550
And all we need to do is just run in BPM test.

00:46.730 --> 00:52.280
So this is starting a browser and it runs the tests on that one.

00:52.790 --> 01:01.070
And if we focus to that one here, we see there are three tests from app component and all of them are

01:01.070 --> 01:01.850
passing.

01:02.270 --> 01:05.260
And here in the app component, we have those tests.

01:05.270 --> 01:12.320
It should create the app, it should have a title source, it should render title and here we see all

01:12.320 --> 01:13.910
of them are passing.

01:14.210 --> 01:18.050
We will apply test driven development by using these tools.

01:18.050 --> 01:22.910
But in JavaScript community there are popular alternatives.

01:22.910 --> 01:32.000
So according to the state of Jazz for the survey of 2021, the most satisfied libraries are like the

01:32.000 --> 01:33.320
testing library.

01:33.320 --> 01:39.470
And just testing library is a utility library for testing front end applications.

01:39.710 --> 01:45.650
It has variations for popular frameworks like React, Vue, Angular and svelte.

01:45.980 --> 01:52.190
The idea of this library is to write the test just like a real user uses the application.

01:52.820 --> 01:58.370
And the other popular library is just just is a test runner.

01:58.370 --> 01:59.840
It is built on Jasmine.

01:59.840 --> 02:05.750
So compared to Jasmine, it has extra functionalities to make the testing a bit easier.

02:06.800 --> 02:13.550
Since Angular is an opinionated framework and has guidelines about every aspect of the application development,

02:13.580 --> 02:16.520
I will follow the test practices coming with it.

02:16.940 --> 02:24.680
But I believe using jest and testing library for testing driven development is also a valuable experience.

02:24.890 --> 02:28.670
So I will add that alternative test environment too.

02:29.270 --> 02:36.530
In each lecture I will show how the same test would be written with just and testing library.

02:37.260 --> 02:39.690
Now let's set this environment up.

02:40.190 --> 02:45.070
By the way, you don't have to repeat each of these steps with me if you would like.

02:45.080 --> 02:49.760
You can just download the resource file which has the project with this configuration.

02:49.790 --> 02:56.810
Basically you just unzip it and run npm install in it and you will be all set.

02:57.880 --> 03:00.910
Now let's do this step manually here.

03:02.290 --> 03:08.410
Opening a new terminal here and I'm going to install testing library dependencies.

03:08.560 --> 03:21.610
So running npm, install, save dev or we can go shorter by just npm i and dash uppercase rd for development

03:21.610 --> 03:22.510
dependencies.

03:22.840 --> 03:29.470
And the first first one is testing library angular.

03:29.470 --> 03:33.240
And this is the English version for the testing library.

03:33.250 --> 03:40.180
With this library we can render angular components and use DOM queries to get the elements we are looking

03:40.180 --> 03:40.690
for.

03:40.990 --> 03:52.960
And we will have companion libraries for testing library and one of them is testing library user event.

03:53.710 --> 04:01.570
And as it names implies, this is for creating user events like clicking to button typing into input

04:01.570 --> 04:02.350
and so on.

04:02.560 --> 04:09.130
And we have one more library and that is testing library.

04:09.490 --> 04:11.050
Just don't.

04:11.980 --> 04:17.770
And this is for having human readable dome related measure functionalities for just.

04:18.040 --> 04:22.780
At this point, this may not make any sense to you, but it will when we use it.

04:22.930 --> 04:28.540
By the way, we can use the testing library with the existing angular test setup.

04:29.290 --> 04:35.560
But the ecosystem library is like the user event or just brings a bit of complexity in terms of creating

04:35.560 --> 04:37.150
the setup of the project.

04:37.300 --> 04:42.130
So I will not be using testing library in default angular tests.

04:42.580 --> 04:45.610
So just hitting enter to install these.

04:49.240 --> 04:50.800
So these are installed.

04:52.090 --> 04:57.940
Now let's install the test runner just again in PM.

04:58.120 --> 05:11.770
I de just this is the test runner and we will have types just this is for the type definitions and the

05:11.770 --> 05:15.250
last one is just preset.

05:15.930 --> 05:22.200
Angular, and this is the preset configuration of just four Angular projects.

05:22.410 --> 05:24.510
So I think enter.

05:28.050 --> 05:30.150
So these packages are installed.

05:30.420 --> 05:32.550
We are going to configure just.

05:32.550 --> 05:39.420
But before jumping to the configuration part, let's install final dependencies.

05:42.840 --> 05:49.990
And we are going to install again, this is a development dependency MSW.

05:50.010 --> 05:51.990
This is more service worker.

05:52.920 --> 05:56.790
Service worker is a library for mocking the HTTP request.

05:57.360 --> 06:03.300
As we progress, we will see the use case of it and also we will need another package.

06:03.300 --> 06:07.680
And that is what wg fetch.

06:09.130 --> 06:14.680
In our application, we will use fetch for fetching data from back end, but that will be temporary.

06:14.680 --> 06:17.980
We will replace it with the the angler solution of that.

06:18.160 --> 06:26.110
But while using that one, we will need fetch to be available in the node environment as well because

06:26.110 --> 06:31.540
just tests are running in Node and in node we don't have fetch.

06:31.540 --> 06:37.450
So that's why we are installing this library to make the fetch available in it.

06:38.420 --> 06:40.310
So hitting enter.

06:43.890 --> 06:45.700
So we are all.

06:45.720 --> 06:48.390
So the installation part is completed.

06:48.420 --> 06:52.650
Now let's set the second test environment up.

06:54.250 --> 06:56.410
So in the project.

06:58.010 --> 06:59.930
In the root folder.

07:00.470 --> 07:02.270
Let's create a file.

07:02.870 --> 07:03.640
Let's name it.

07:03.650 --> 07:07.920
Set up dash just to us.

07:09.160 --> 07:13.330
So this file will be used by just before running the tests.

07:13.750 --> 07:18.280
We can use this one to have repeating parts in our test.

07:18.550 --> 07:26.740
So the first thing is we are going to import just preset angular.

07:27.070 --> 07:37.120
And from this one, we will get set up Dash just and then we will import another library.

07:37.120 --> 07:39.100
And this is for the testing library.

07:41.770 --> 07:48.100
And instead of repeating this import in each test module we do right here and we are importing, testing,

07:48.100 --> 07:48.920
library.

07:48.940 --> 07:50.320
Just don't.

07:51.260 --> 07:54.340
So this setup just is okay.

07:54.620 --> 08:04.940
Now we are going to go into the package JSON and we will configure the chest so we can add just configuration

08:04.940 --> 08:07.100
right after the dependencies.

08:08.450 --> 08:11.180
So we have just.

08:14.660 --> 08:23.300
And first thing is we are going to set the preset and that's going to be just preset angular.

08:24.980 --> 08:32.180
And we are going to tell just to use the set up, just file we created and we do that by setting the

08:32.180 --> 08:36.290
set up files after envy.

08:37.130 --> 08:39.670
And this is looking for an error.

08:40.040 --> 08:43.070
And in this area, we are pointing to the file.

08:43.370 --> 08:46.100
It's in the root there.

08:47.530 --> 08:49.620
Set up just.

08:50.010 --> 08:50.560
Yes.

08:51.810 --> 08:58.800
Now we need to transform the files in the project and we will use again just pre-set angular for it.

08:58.920 --> 09:02.880
And we do this configuration by adding this transform.

09:05.980 --> 09:07.810
And this is looking for an object.

09:07.810 --> 09:10.720
And as a key, we will pass a regex.

09:10.870 --> 09:18.610
And in this regex we will pick all the files, all the typescript, JavaScript and HTML files, which

09:18.610 --> 09:22.930
are the base building blocks of the of the components.

09:23.020 --> 09:25.630
So there is something like this.

09:27.140 --> 09:38.030
And then we are looking for it to be ending with tears or jazz or HTML.

09:38.300 --> 09:48.260
So if any files is ending with JS or HTML, then this is going to be transformed by just preset angular.

09:50.470 --> 09:57.250
And since we have to test set up now, let's have separate test modules for each.

09:57.490 --> 10:02.740
By default, karma configuration is looking for test files.

10:03.250 --> 10:08.620
Having this that spec ts extension.

10:10.060 --> 10:13.060
And for just tests.

10:13.090 --> 10:15.790
Let's go with an unconventional naming.

10:15.880 --> 10:21.730
Let's say we will have the gest extension for the GEST test.

10:22.180 --> 10:27.100
Generally, it is either that spec test or that test test.

10:27.370 --> 10:32.500
But for this project, let's make an exception and let's go with that.

10:32.500 --> 10:46.300
Just as for just tests, so we have test match and we are looking for.

10:48.420 --> 10:49.380
And I think.

10:50.640 --> 10:51.690
Ending with.

10:52.330 --> 10:53.230
Just.

10:54.330 --> 10:54.960
Yes.

10:55.410 --> 10:59.700
And finally, we need to tell the test environment.

10:59.700 --> 11:06.020
And the test environment is just dumb.

11:06.030 --> 11:10.800
So the tests are not running in a real browser.

11:10.800 --> 11:13.290
It is running in Jazz Dome.

11:13.530 --> 11:17.970
It is basically a JavaScript dome running in the node environment.

11:17.970 --> 11:25.920
We don't have the actual browser API in it, but it is covering most of the browser functionality we

11:25.920 --> 11:26.520
need.

11:26.520 --> 11:33.330
So the configuration for the just in the package, Jason, is done before finishing this part.

11:33.330 --> 11:40.470
We need to also update the TypeScript configuration for this one.

11:40.490 --> 11:42.660
TLS config spec json.

11:43.510 --> 11:52.660
And here for the compiler options in just test output, we will see warning about s module interoperability

11:52.660 --> 12:02.620
with the type script and to resolve that warning we can set right here is module interop to be true.

12:03.700 --> 12:08.650
Then for the types we will replace Jasmine with just.

12:09.390 --> 12:17.160
And here in this include array, we will also include set up just as file we created.

12:17.160 --> 12:24.270
So it is current directory set up dash just to us.

12:24.420 --> 12:29.700
So this part is done now, just is configured.

12:29.700 --> 12:41.190
All we need is add a script to run the gist and I'm adding something like this test colon just and we

12:41.190 --> 12:45.660
can run the test by just watch.

12:46.170 --> 12:48.990
So just we'll be running in watch mode.

12:49.260 --> 12:58.110
So whenever we do any changes, the test will rerun and just will only be picking the test files ending

12:58.110 --> 13:00.120
with just us.

13:00.510 --> 13:03.660
So it's not going to be running the.

13:04.410 --> 13:05.920
This test file.

13:05.940 --> 13:12.390
This is going to be run only by the default angular test setup.

13:12.870 --> 13:14.610
So saving this one.

13:15.880 --> 13:19.060
And we can go to a terminal.

13:20.400 --> 13:22.200
And I'm going to use this one.

13:22.200 --> 13:29.580
Just clearing the terminal and running empty run test just.

13:31.400 --> 13:32.180
Just watch.

13:32.210 --> 13:41.390
Functionality is working based on the commits and it is checking if there is a change in the files.

13:41.390 --> 13:48.710
If there is a diff between the last comet and the current working directory, then it runs the tests.

13:48.920 --> 13:56.390
We can force it to run all the tests by hitting a and it is just saying this noticed found.

13:56.390 --> 14:03.440
So our second test setup is ready and we are ready to start our project.
