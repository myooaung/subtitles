WEBVTT

00:03.240 --> 00:07.230
Now let's add the just version of the user component.

00:07.860 --> 00:15.030
So when we check the gist console output here, we are seeing the same error we see in the karma window.

00:15.030 --> 00:23.220
So basically the error is occurring because in the app component, just as we didn't declare the new

00:23.220 --> 00:27.360
component we are using, which is user list component.

00:27.360 --> 00:29.310
So let's say this one.

00:31.170 --> 00:37.560
So after this change, the tests are still failing and this failure seems like a flake.

00:37.590 --> 00:45.180
Again, like it is complaining about the module cannot be found in the user list component.

00:45.180 --> 00:50.070
It's importing the user service and it's not able to find that module.

00:50.190 --> 00:59.550
But we know that the user list is able to use the this user service functionality because our karma

00:59.550 --> 01:07.920
tests are passing the the failure can be fixed like this like just is somehow cannot find this path,

01:08.280 --> 01:10.580
this, this user service here.

01:10.590 --> 01:20.850
So by replacing it with the relative relative path like this, so this is under, under a home directory

01:20.850 --> 01:28.560
and in it there's user is so we are going one directory up and one more directory to go to the the app

01:28.560 --> 01:29.490
directory.

01:29.490 --> 01:36.000
Then from the app directory we are going into core and user service, so let's save this one.

01:37.900 --> 01:45.370
Now we are seeing the the warning about the the get request being sent to this end point.

01:45.370 --> 01:56.320
And again, this is occurring because in the EP tests we are rendering the component like in this one.

01:56.440 --> 02:03.700
But now the home component has the user list which is making API call to back end.

02:03.700 --> 02:10.480
So this is saying basically there is a request going to this end point, but there is nothing in my

02:10.570 --> 02:12.620
request handler which is handling that request.

02:12.640 --> 02:14.710
So we can fix it like this.

02:14.710 --> 02:26.560
We can add a rest handler here, forget the mapping and it's going to be API one zero users and we are

02:26.560 --> 02:34.120
going to let's just return an object like page object having only one user.

02:34.120 --> 02:42.250
So we are going to return response and status will be 200.

02:42.550 --> 02:50.260
And as a response body, let's send a response like this.

02:50.260 --> 02:54.970
Let's open the user list karma test here.

02:55.570 --> 02:58.150
So just copying this thing.

02:59.270 --> 03:02.930
And pacing right here.

03:02.930 --> 03:14.150
So this is an object and let's have only one, one and three here and the page is zero, size is three

03:14.150 --> 03:16.730
and there will be only one page.

03:16.910 --> 03:18.950
So let's save this one.

03:21.480 --> 03:25.320
Now we don't see that warning and all tests are passing for the app component.

03:25.320 --> 03:28.320
And let's run all the tests by hitting a.

03:29.560 --> 03:31.660
And their results are passing.

03:32.140 --> 03:34.260
Now let's add the test for the user list.

03:34.270 --> 03:38.330
At the moment we don't have the user list just to file.

03:38.350 --> 03:41.170
So under home.

03:42.610 --> 03:44.050
And home is here.

03:44.050 --> 03:53.190
We have the user list and let's add a new file and that's going to be user list component just as.

03:55.180 --> 04:10.810
So let's have the imports for the render and screen from testing library and we are going to test the

04:10.810 --> 04:13.210
user list component.

04:13.900 --> 04:22.540
And the description described for all test is going to be user list and we are going to.

04:24.240 --> 04:26.220
There's unnecessary branches here.

04:26.220 --> 04:27.750
So like this.

04:27.990 --> 04:34.860
And our first test is going to be it displays three user in list.

04:35.760 --> 04:41.280
So the tests are async because of the testing library behavior.

04:41.280 --> 04:47.640
So we are going to await render and we are going to render the user component.

04:47.640 --> 04:51.090
But again, we are dependent on the HTP client module.

04:51.090 --> 05:03.990
So adding the options and options, we are importing the HTP client module and then we are going to

05:04.680 --> 05:09.600
wait and we use wait wait for coming from Angular.

05:10.570 --> 05:13.450
Testing library, this one testing library angler.

05:13.870 --> 05:22.030
And basically, we are going to wait for three users to appear and we are going to need a server implementation

05:22.030 --> 05:22.900
here as well.

05:22.900 --> 05:40.150
So let's get the up setup server from MSW node and we are going to import the rest from MSW.

05:42.430 --> 05:53.350
So we will have a server setup server and let's have the rest handler and it's going to be get under

05:53.350 --> 05:58.150
for the API one zero users.

05:59.290 --> 06:03.700
And basically we had that in APP just right here.

06:03.700 --> 06:05.200
So just copying this one.

06:06.200 --> 06:15.710
And pasting right here, but we are not going to return only one, but we will have multiple users.

06:15.710 --> 06:24.890
And for that one I'm just going to copy the users from user list component spec right here, just copying

06:24.890 --> 06:30.560
this page object and pasting it right here.

06:30.560 --> 06:37.550
So this is going to be returning the JSON and this JSON is going to be having this page object.

06:37.550 --> 06:51.560
So we also need before all and in this one we will call server listen and let's move it after server

06:51.590 --> 06:56.240
variable initialization part and we will have.

06:57.560 --> 07:09.170
Before each for resetting handlers, server, reset handlers and after all tests are completed.

07:09.200 --> 07:14.090
After all, we are going to call server close.

07:16.310 --> 07:20.450
So we have the server which is returning this page object back.

07:20.480 --> 07:27.050
There are three users here and in our test, as soon as this component is rendered, that request will

07:27.050 --> 07:30.340
be handled in this this handler right here.

07:30.350 --> 07:38.840
So we are going to receive a response having three users and then we can query the create the visibility

07:38.840 --> 07:40.100
of those users.

07:40.100 --> 07:44.000
And here we are going to call expect.

07:44.390 --> 07:48.950
And as a result, we are going to get users like this.

07:48.950 --> 07:52.250
We will use the functionality of screen query.

07:52.280 --> 07:59.570
This time we are looking for multiple elements, so we are going to use query all and by text we are

07:59.570 --> 08:02.600
looking at this specific text for the text.

08:02.600 --> 08:09.440
So far we go with the actual exact value, but we can pass regex here.

08:09.440 --> 08:18.890
So we are going to get our usernames and all our starting with the user for this test, this data so

08:18.890 --> 08:20.510
we can go something like this.

08:21.530 --> 08:30.500
So having having user in it, we are just creating those things and this is returning an array so we

08:30.500 --> 08:37.820
can use this one right here expecting this length to be three.

08:37.820 --> 08:44.570
So we are not querying the list item in this one, but we are just querying the text based on the visible

08:44.570 --> 08:46.010
usernames on the page.

08:46.490 --> 08:48.650
So that's it.

08:48.740 --> 08:50.360
Let's say this one.

08:53.420 --> 08:57.050
And here we see user lists are passing.
