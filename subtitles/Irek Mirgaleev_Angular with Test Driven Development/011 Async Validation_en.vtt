WEBVTT

00:03.470 --> 00:09.250
So far we have implemented validations and all of them are running on the client side.

00:09.260 --> 00:13.610
But for some of the restrictions, we are dependent onto the back end.

00:13.610 --> 00:21.980
Like for this case, we have this email and let's say email cannot be used in multiple sign up request.

00:21.980 --> 00:24.830
So we need to validate that one as well.

00:24.860 --> 00:31.700
And to do that we need to ask to the backend to verify if that email is in use or not.

00:32.060 --> 00:39.290
So far the validations we are doing on client side are synchronous, but to achieve this backend validation

00:39.290 --> 00:43.580
functionality we need to define asynchronous validators.

00:44.510 --> 00:47.300
Now let's add a test for that.

00:47.960 --> 00:53.810
I'm not going to use this repeating test for this one, but I will just create a new one.

00:53.810 --> 01:01.010
Just copying this repeating test function here and adding right here.

01:02.000 --> 01:04.460
Now, in this one, it displays.

01:07.200 --> 01:13.470
Let's say the error will be email in use when.

01:15.730 --> 01:16.690
Email.

01:19.120 --> 01:20.980
It is not unique.

01:21.870 --> 01:25.630
It's replaced this field here with the email.

01:25.660 --> 01:32.170
We are filling the email input and we are expecting this validation error to be visible in the email

01:32.170 --> 01:33.910
validation right here.

01:34.060 --> 01:38.170
And the message will be this one email in use.

01:40.530 --> 01:41.670
This is the error.

01:42.210 --> 01:47.550
We are going to feel the input with the value, but in this one we are going to make an API request

01:47.550 --> 01:55.920
and in previous test we have the validating the sign up request and we were using this HTTP testing

01:55.920 --> 01:56.370
control.

01:56.370 --> 01:58.380
So we will do the same thing here as well.

01:58.530 --> 02:02.340
So just copying this HTP testing controller.

02:03.450 --> 02:08.400
So we have this instance of the TB testing controller.

02:08.910 --> 02:20.400
Now let's say we are going to fill the form with an email like non unique email at gmail.com and we

02:20.400 --> 02:22.830
are filling the form, we are losing the focus.

02:22.830 --> 02:30.180
Then this is going to be we're making an API request to backend and we can handle that request here.

02:30.180 --> 02:35.280
We are going to expect a request to be going to a URL.

02:35.280 --> 02:42.000
But in the previous use cases like here, it disables button.

02:42.000 --> 02:48.750
When there is an ongoing API call, we are just passing a URL to this expect one.

02:49.260 --> 02:59.250
But this exact one function is not just taking a URL instead of URL, we can pass a function like a

02:59.250 --> 03:00.420
callback function.

03:01.170 --> 03:04.890
So defining that function here, having an arrow function.

03:05.460 --> 03:17.430
Basically this function will be called whenever the client is triggered and this function, this callback

03:17.430 --> 03:21.990
function will be called with the the values we are looking for.

03:22.440 --> 03:27.210
We can give the name as the variable, like the parameter is the request.

03:27.540 --> 03:36.840
And from this request we can take the the URL or the method type or we can get the body as well.

03:36.840 --> 03:46.980
So instead of like having the request here, let's use object structuring and let's take the URL method

03:46.980 --> 03:48.660
and body.

03:49.530 --> 03:53.790
So in the request we are going to make a request to this URL.

03:53.790 --> 03:58.620
So let's check first if a URL is going to be

04:01.830 --> 04:05.610
API one zero user email.

04:05.610 --> 04:15.240
So this is the URL in hpakant and we are going to send the request to this URL and the method will be

04:15.990 --> 04:16.710
post.

04:16.860 --> 04:18.570
We are going to send the post request.

04:18.570 --> 04:27.450
So if the request is going to this URL and this method, then we will check.

04:28.620 --> 04:32.400
Like if the, the body, this body.

04:34.800 --> 04:42.780
This is the request, but the JSON object and there will be email filled in it if it is equal to this.

04:44.750 --> 04:45.560
URL.

04:47.190 --> 04:50.640
And this is going to be returning true.

04:51.630 --> 04:59.160
So that means the request is handled in the sensitivity testing controller.

04:59.160 --> 05:02.460
Otherwise we will return directive false.

05:03.090 --> 05:13.380
So by defining this, expect one callback function like this, we are specifically looking for a request,

05:14.100 --> 05:22.440
a post request to this URL, having a request body containing this email and this email is the value

05:22.440 --> 05:24.990
we are entering into the input.

05:26.460 --> 05:36.300
So let's assign this to request and then we can return the response.

05:37.130 --> 05:37.920
Flush.

05:38.930 --> 05:39.180
Okay.

05:39.200 --> 05:47.960
So the back end logic is like if we send this request to back and if there is that if there is a user

05:47.960 --> 05:56.900
with the email address we are sending request, then it's returning success response, which means there

05:56.900 --> 05:57.890
is that user.

05:58.700 --> 06:06.980
So on client side, if we receive a success for this request, that means the validation is failing.

06:07.820 --> 06:14.180
So what we are doing here is like we are just returning the success like this.

06:14.690 --> 06:20.030
So then we are triggering the UI updates.

06:20.180 --> 06:28.190
Then again, we are checking the email validation to appear on this div to appear and it is going to

06:28.190 --> 06:30.380
have this text content in it.

06:31.280 --> 06:32.720
So the test is ready.

06:32.720 --> 06:33.920
Let's save this one.

06:36.840 --> 06:43.740
So this is failing because at the moment we are not sending any request to back end to this URL for

06:43.970 --> 06:45.600
the email control.

06:45.930 --> 06:50.430
Now we are going to create a new validator function.

06:50.580 --> 07:00.300
We already have one for the password match, but this one is going to be in different shape because

07:00.570 --> 07:07.020
this is just a function it doesn't depend on to any external services or anything.

07:07.020 --> 07:12.360
But for the unique image validation, we need to use the client.

07:12.930 --> 07:17.700
Or we can use our user service user service cluster right here.

07:18.630 --> 07:21.870
We can use user service to make the API request to vacant.

07:21.870 --> 07:28.230
So we need to inject this user service into our validator.

07:28.240 --> 07:35.370
And to do that, we are going to create the validator like this.

07:35.370 --> 07:37.800
Let's create a new module here.

07:38.220 --> 07:41.030
Unique email validator.

07:41.130 --> 07:41.730
Yes.

07:44.170 --> 07:52.180
Now this is going to be a class and let's name it as a unique email validator.

07:53.320 --> 07:56.290
And this is going to be async.

07:56.890 --> 08:02.980
The async validator functionality and angular forms comes with an interface for this one, and that

08:02.980 --> 08:08.770
is so this class is going to be implementing async validator.

08:12.240 --> 08:19.950
So this is going to be a class, but this is going to be something similar to this user service.

08:19.950 --> 08:27.990
So we are going to ask Angular to initialize an instance for this one.

08:27.990 --> 08:30.360
So we are adding this injectable.

08:30.690 --> 08:38.970
So whenever Angular sees, we are using this unique image validator, it's going to be initializing

08:38.970 --> 08:39.690
that one.

08:39.690 --> 08:44.520
And when it's going to be initializing it, it's going to be calling its constructor.

08:44.520 --> 08:55.980
And in the constructor then we can ask, let's also have this user service injected to this user service

08:55.980 --> 09:00.030
injected to this this class.

09:01.290 --> 09:03.810
So let's import the user service as well.

09:03.810 --> 09:11.160
By the way, there is this error highlighted under this unique image validator because there is a function

09:11.160 --> 09:14.790
coming with async validator and we didn't implement it yet.

09:14.790 --> 09:16.740
So we can do it like this.

09:16.740 --> 09:26.970
We can go to quick, quick fix and hit implement interface async validator and the the function is like

09:26.970 --> 09:31.290
this similar again it is similar to the password to match validator.

09:31.500 --> 09:39.570
It's a validator often taking and abstract control and as a response it is returning validation errors.

09:39.570 --> 09:46.950
But the difference is that this is async and so like it's taking the control, abstract control, but

09:46.950 --> 09:54.000
this time it is returning either promise or observable to achieve the async functionality.

09:55.860 --> 09:58.290
So we have the validated function.

09:58.890 --> 10:08.850
And when this validator is going to be called again, like taking the values for these password and

10:08.850 --> 10:15.630
password repeat in the password match validator, we can take the value of the the email input.

10:15.630 --> 10:18.360
But this is going to be.

10:20.130 --> 10:23.750
Edit directly to the emailed form control.

10:23.760 --> 10:31.890
So in the validator we will be able to access to the to the value of the email.

10:32.340 --> 10:36.280
Just like this control value.

10:36.300 --> 10:41.430
So this control is representing the form control element of the email.

10:41.430 --> 10:47.120
And by accessing the value we will receive the value of the email input.

10:47.130 --> 10:52.020
Now we will be taking the video like this and let's use this user service.

10:52.020 --> 10:54.540
Let's also fix the typo here.

10:54.570 --> 10:56.310
It's going to be user service.

10:57.000 --> 10:59.580
Let's have a function in the user service.

10:59.580 --> 11:02.460
That's called user service.

11:02.580 --> 11:09.510
And let's say it has is email taken.

11:09.630 --> 11:11.340
Let's say it has this function.

11:11.340 --> 11:18.810
At the moment it is not, but we will create it and we are going to call this function and let's pass

11:18.810 --> 11:23.280
just the email value to this function.

11:24.540 --> 11:29.880
Then this is going to be returning to just like for the sign up.

11:30.000 --> 11:39.630
It's going to be returning the typical and post requests back, which is returning observable.

11:40.140 --> 11:44.930
So here we can return this thing.

11:44.940 --> 11:50.940
So let's create this function in in the user service.

11:51.780 --> 11:56.160
I use the the quick fix coming with the vs code.

11:56.160 --> 12:01.020
So I declared the function here.

12:01.590 --> 12:04.950
Let's move it to here.

12:06.030 --> 12:09.600
Now we don't need this part, just removing it.

12:10.530 --> 12:13.050
So this is going to be taking the value.

12:13.200 --> 12:14.510
This is going to be string.

12:14.520 --> 12:18.650
And basically it's going to be the the email input value.

12:18.660 --> 12:23.790
And we are going to return this HTTP client.

12:24.180 --> 12:30.990
We are going to send the post request to this endpoint API one zero user email.

12:31.020 --> 12:34.080
That's the URL we are.

12:35.620 --> 12:38.410
Defining here in the spec as well.

12:38.950 --> 12:45.520
So we are sending the request to this one and the first request is looking for a second parameter,

12:45.520 --> 12:46.750
and that's the body.

12:46.930 --> 12:56.740
And basically, it's going to be a JSON, having the email field, having the value we are passing to

12:56.740 --> 12:57.160
it.

12:57.520 --> 13:00.670
So the user service is ready.

13:00.850 --> 13:08.280
Now we need to update the the behavior here as well in the password match validator.

13:08.290 --> 13:17.050
If you remember, we are returning either null or an object having the validation name.

13:17.620 --> 13:26.110
And if that validation is fail, we set it to true so we will return similar something similar to this

13:26.110 --> 13:26.320
one.

13:26.320 --> 13:32.980
But the difference is it's going to be an observable or promise type.

13:33.190 --> 13:42.730
So this is already an observable and we can use the observable functionalities here to map the the response

13:42.730 --> 13:45.550
to the thing we are looking for.

13:45.640 --> 13:55.300
And for that, we can use the pipe functionality of the observable.

13:55.480 --> 14:05.710
So far we have used only the subscribed functionality of this observed observable, which is basically

14:05.980 --> 14:15.190
we are passing a callback function and it's called whenever it is observable, receives data and the

14:15.190 --> 14:17.110
pipe is also doing similar thing.

14:17.110 --> 14:27.940
We are able to check the values in the pipe and we can also use additional exchange functionalities

14:27.940 --> 14:35.970
like we can map the response to the the value we need on the validation part.

14:35.980 --> 14:41.760
Like there is this map coming from access.

14:42.610 --> 14:47.560
So basically this is a function and it takes a callback.

14:48.840 --> 14:49.770
Like this.

14:50.670 --> 14:56.340
And as a parameter it passes as the body coming from the back end.

14:56.340 --> 15:05.790
And if you remember, the back end is returning to 100 when that that email is seen when when that email

15:05.790 --> 15:06.740
is used.

15:06.750 --> 15:10.450
So we are not going to be caring about the request, buddy.

15:10.530 --> 15:21.990
So we can just go with the underscore here and we can say if it is there, if this is the success case,

15:21.990 --> 15:32.280
if there is a success response, then that means we are going to return an object and just like password

15:32.280 --> 15:32.940
match.

15:33.210 --> 15:39.330
This time we are going to have this unique email and it's going to be true.

15:40.020 --> 15:42.420
Otherwise it's going to be null.

15:43.240 --> 15:46.780
But this is the success case of the API request.

15:46.780 --> 15:52.960
But the API requests may fail with like a timeout or server error or those kind of things.

15:53.200 --> 16:00.190
And that is going to be handled in, by the way, we can pass multiple functions into this pipe.

16:00.760 --> 16:03.690
These functions are called as operator function.

16:03.700 --> 16:09.570
The map is an operator function and we can pass multiple operator function to pipe.

16:09.580 --> 16:13.570
So this is handling the mapping for the success cases.

16:14.020 --> 16:17.910
And if there is an error, we can handle that error here.

16:17.920 --> 16:19.180
Catch error.

16:19.870 --> 16:27.100
And basically in this one, we are going to return null because we don't know the validation failure

16:27.100 --> 16:29.800
because we received an error from backend.

16:30.160 --> 16:37.210
And what we need is we need to return an observable here.

16:37.210 --> 16:44.200
So there is again callback function which is going to be returning an observable and we can create an

16:44.200 --> 16:50.470
observable by this off function of the JS.

16:51.290 --> 16:59.720
This is like a factory method which is returning an observable and we can create an observable with

16:59.750 --> 17:00.910
null value.

17:00.920 --> 17:09.950
So this part may seem a bit confusing because of the textures part, but if I summarize it once again,

17:10.220 --> 17:20.450
basically this request is being processed in this pipe and we are mapping if if we are receiving success

17:20.450 --> 17:25.550
response, we don't care about the body of the the response.

17:25.550 --> 17:32.030
So we are just dealing if we are receiving success, then let's return this back.

17:32.030 --> 17:34.550
Otherwise it's going to be null.

17:34.850 --> 17:42.500
And in any case, if we have error coming like the 500 error or anything else, then it's going to be

17:42.500 --> 17:46.880
handled in this catch block, which is going to be returning null again.

17:46.880 --> 17:51.050
So on the UI part, we are not going to show any validation error.

17:51.050 --> 17:58.460
We will only show the validation error when this request receives 200 OC from back end.

17:58.850 --> 18:06.320
And this is going to be the the message we are going to returning from this validator function.

18:06.470 --> 18:10.310
So the email validator is ready now.

18:10.310 --> 18:12.830
We are going to use it in the.

18:13.610 --> 18:14.810
Sign up component.

18:17.730 --> 18:21.810
So far we are using the validators in this area.

18:21.990 --> 18:25.350
But these are the synchronous validators.

18:25.440 --> 18:29.730
These are the the validators in the for the client side.

18:29.730 --> 18:35.850
But now we are going to use an async validator and for that we will do something like this.

18:35.850 --> 18:37.750
I'm just cutting this array.

18:40.270 --> 18:43.420
And for the form control is a second parameter.

18:43.450 --> 18:51.850
We can pass an object and in this object there is this validators and we can paste the validators I

18:51.850 --> 18:53.380
just cut here.

18:53.380 --> 19:02.110
So these are the synchronous validators and there is another option here in this object, async validators.

19:03.670 --> 19:09.310
And for the async validators we will use the function this.

19:10.270 --> 19:11.230
Function.

19:11.880 --> 19:12.660
Here.

19:12.780 --> 19:17.760
So we need to get the unique email validator first.

19:18.690 --> 19:21.210
So let's inject it here.

19:22.080 --> 19:24.320
And that's going to be private.

19:25.860 --> 19:32.250
Unique email validator and the type is a unique email validator.

19:32.970 --> 19:36.000
So we are going to again, this is an array.

19:36.030 --> 19:43.350
We are going to call this unique email validators validate function.

19:43.590 --> 19:49.200
But we need to be careful here in the validate function.

19:49.710 --> 20:00.480
We are using this keyword here, so we have to make sure this is bound to the the unique email validator

20:00.480 --> 20:01.170
instance.

20:01.170 --> 20:04.500
And we do that like this.

20:04.890 --> 20:16.410
We say this, this unique email validator of validate functions is binding this unique email validator.

20:16.410 --> 20:18.300
So when.

20:19.340 --> 20:22.040
It is going to be calling this.

20:22.070 --> 20:29.450
It's going to be referring to the instance we are using in this signup component.

20:30.050 --> 20:34.820
So to make it visible, let's move it to the next line here.

20:35.180 --> 20:36.020
Like this.

20:37.320 --> 20:47.370
So we have this this async validator associated with this email now and now whenever this validator

20:47.370 --> 20:55.890
fails, we are getting the email validation errors here, like the the required validation may fail

20:55.890 --> 20:59.400
or the email pattern validation failed.

20:59.400 --> 21:01.200
And now we have.

21:02.230 --> 21:04.600
This unique email.

21:06.130 --> 21:07.990
With the Dacian case.

21:07.990 --> 21:18.190
So adding else if I field errors as this error, then we are going to return.

21:19.390 --> 21:25.420
And the message is this one email in use.

21:29.210 --> 21:39.200
So it is going to be returning this error message and in template in the email validation we are calling

21:39.200 --> 21:40.070
this email error.

21:40.070 --> 21:51.050
So which whichever validation fails, we will be displaying that validations that validation errors

21:51.200 --> 21:52.760
message on the UI.

21:53.240 --> 21:56.000
So let's save these changes.

21:58.230 --> 22:06.330
And here we see the tests are passing and let's test it on browser as well.

22:06.810 --> 22:11.610
So here on browser, let's open the developer tools.

22:14.720 --> 22:18.410
So here is the developer tools in the network tab.

22:18.680 --> 22:22.760
Let's see the request going to the back end.

22:22.760 --> 22:34.240
So in the back end application, there are 25 users and the user emails are like user and index at mail

22:34.250 --> 22:34.490
comp.

22:34.520 --> 22:44.210
So like a user to add gmail.com or user 25 at mail, these are the users in backhand.

22:44.210 --> 22:52.370
And here in the the network tab here we can see there are requests going and this one for instance when

22:52.370 --> 23:01.340
I was typing user to it this goes out and the this goes to backhand and as a response it is returning

23:01.340 --> 23:11.960
404 and it returns this user not found message back but as I type new request going and the final one

23:11.960 --> 23:22.120
is this one user at his or to it mail and I'm receiving this this payload back and it is return to hundred

23:22.400 --> 23:28.970
which means there is that user and basically that and it's ending up with the validation error.

23:28.970 --> 23:41.570
And we displayed the message to the user by the way, like if I type anything here, like in every type

23:41.570 --> 23:50.540
we are sending a new request to back and we can reduce the, the, the request going back to the back

23:50.540 --> 23:53.660
end by doing this.

23:56.240 --> 24:10.070
So this object has the validators and validators and we have an option here update on and we can tell

24:10.490 --> 24:17.540
this validator logic to be rerun when we blur from this input.

24:18.050 --> 24:21.890
So let's save this and let's see how it's working.

24:22.250 --> 24:24.200
So just clearing the terminal.

24:25.010 --> 24:30.020
So filling with user 25 at mail.

24:30.940 --> 24:31.570
Com.

24:31.580 --> 24:35.150
So hitting tab to go to the next input.

24:35.150 --> 24:44.750
And here we are seeing a request going to the backend for this this email and it is returning this 200.

24:44.760 --> 24:45.050
Okay.

24:45.050 --> 24:47.060
Which means the validation is failing.

24:47.180 --> 24:51.400
So if I type anything here, there is no request.

24:51.410 --> 25:00.680
So basically the OAM blur is making this this validation to rerun when we are blurring from this input.

25:01.670 --> 25:11.120
Now this update on this blur thing is breaking one of our previous tests and in this one this is for

25:11.120 --> 25:17.390
the interactions sent username, email and password to back and after clicking the button and here we

25:17.390 --> 25:21.260
are seeing the email is left empty here.

25:22.130 --> 25:26.150
It is not this one user one it mail, it is empty.

25:26.600 --> 25:37.580
And if we checked the tests here and the test is this one here we are using this setup form and setup

25:37.580 --> 25:39.230
for me is basically here.

25:39.890 --> 25:51.320
Now we have this, this, this form control now is acting after we lose the focus, after we blur from

25:51.320 --> 25:52.970
this form control.

25:52.970 --> 26:01.610
But in this setup form, we are just calling this this input event, but we are not calling the blur

26:01.640 --> 26:06.290
event like we did in our validation test.

26:06.290 --> 26:14.330
So what we need to do is here for this email input only we can.

26:15.850 --> 26:29.170
Say it also to dispatch the blur event so that value we are entering to this input to be added to the

26:29.200 --> 26:35.260
to be processed in the validator logic and to be part of the whole request.

26:35.260 --> 26:38.590
But so just saving like this.

26:40.190 --> 26:43.340
And here we see all tests are passing.
