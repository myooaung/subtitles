WEBVTT

00:03.500 --> 00:10.100
Now we are sending the request via fetch, but Angular comes with a built in client.

00:10.250 --> 00:17.480
Fetch is not available in old version of browsers, so if your app would be running in one of those

00:17.480 --> 00:21.560
then it's better to use a HTTP client coming with Angular.

00:21.560 --> 00:28.220
For future reference, you can go to this page and check more information about the client.

00:28.370 --> 00:31.310
Now let's use this one in our project.

00:31.490 --> 00:36.110
First thing is we are going to import this one in app module.

00:36.260 --> 00:44.960
This HTTP client belongs to HTTP client module and right here in the modules, this energy module module

00:44.960 --> 00:46.070
imports part.

00:46.220 --> 00:49.820
We are going to import HTTP client

00:52.040 --> 00:52.790
module.

00:52.850 --> 00:54.620
So this is coming from

00:57.650 --> 01:08.930
right here, http client module from angular common http.

01:10.700 --> 01:15.920
So we import this one now in our component.

01:16.690 --> 01:20.230
We can inject this HTTP client.

01:20.560 --> 01:29.410
So Angular has a dependency injection functionality and we can ask Angular to provide us the dependencies.

01:29.410 --> 01:37.270
Like for instance, in this one we will need HTTP client and we can tell to Angular to inject this component

01:37.270 --> 01:38.800
via the constructor.

01:38.800 --> 01:45.880
And here in the constructor we are requiring this HTTP client.

01:45.880 --> 01:51.040
This is the variable name and it is going to be HTTP client type.

01:51.700 --> 01:58.120
So this one and let's make this is to private to this class.

01:58.660 --> 02:06.490
Now whenever this component is created by Angular, it's going to be injecting the HTTP client to it.

02:06.490 --> 02:11.080
Now we can use the HTTP client right here in the click sign apart.

02:11.080 --> 02:14.800
Just commenting out this fetch section.

02:14.800 --> 02:19.330
We are going to remove this one eventually, but let's keep it as commented out.

02:19.660 --> 02:22.390
So here I'm going to call.

02:22.810 --> 02:25.180
We can access to the HTTP client like this.

02:25.180 --> 02:30.400
We are going to send the post request and has this post function.

02:31.180 --> 02:39.220
And the first parameter it is looking for is the URL and the URL is API one zero users.

02:40.180 --> 02:43.290
And the second parameter is the body.

02:43.600 --> 02:45.490
We are sending.

02:46.400 --> 02:52.370
And in this body we will have a username and is this username?

02:52.940 --> 02:57.300
The second one is email email.

02:57.530 --> 03:00.800
And the third one is password.

03:02.610 --> 03:05.550
So we are generating this object.

03:05.850 --> 03:10.620
This is the request body and we are posting it to this URL.

03:11.640 --> 03:18.090
This HTP client library is using our exchanges and there is this observable pattern.

03:18.570 --> 03:29.760
This is an observable and to make this is typical, we need to subscribe to this one and it is taking

03:29.760 --> 03:31.890
a callback at the moment.

03:31.890 --> 03:38.310
We can just leave it empty like this and let's save this one.

03:40.100 --> 03:43.570
And let's test this one on browser.

03:43.580 --> 03:46.130
Just opening the console.

03:46.900 --> 03:51.520
Clearing the locks here and let's fill the form.

03:51.550 --> 03:52.210
A.

03:52.240 --> 03:53.380
B, c.

03:53.410 --> 03:53.980
C.

03:54.580 --> 04:02.590
So here, when we send the request, if we check the payload, we have the values we are entering to

04:02.590 --> 04:03.900
these fields.

04:03.910 --> 04:09.340
So basically this functionality is working as it was working with the fetch.

04:10.000 --> 04:12.940
But if we check our test console.

04:13.990 --> 04:18.090
Here we see 11 of 12 tests are failing.

04:18.100 --> 04:24.010
And if you check the list, basically all of the tests of the signup component are failing.

04:24.010 --> 04:28.690
And the reason is here it is saying now injector error and.

04:29.680 --> 04:33.610
It's saying that no provider for a client.

04:33.820 --> 04:41.920
Now our component is using this dependency HTP client and in browser we have tested this working, but

04:41.920 --> 04:48.550
the tests are failing because the test module does not know anything about where this HTTP client is

04:48.550 --> 04:49.390
coming from.

04:49.450 --> 04:56.130
In that module we have imported this HTTP client module and that is bringing the typical line.

04:56.140 --> 05:08.160
But in test, let's open that one sign up component spec ts in test we are just having this signup component.

05:08.170 --> 05:13.210
So in testing module, we don't know anything about the the typical line.

05:13.210 --> 05:19.840
So the fix is just like importing the typical line to right here.

05:20.080 --> 05:22.750
We will import it in the test as well.

05:22.750 --> 05:28.330
So first copy the import of this module.

05:28.630 --> 05:35.920
Then just like having this import array, we can also have the same thing here.

05:36.220 --> 05:41.650
So there is this import array and in this one we have the HTP client module.

05:41.830 --> 05:43.360
So saving it.

05:45.830 --> 05:54.860
Now only one test is failing and that one is the one we are checking the request body.

05:55.070 --> 05:57.050
And if you remember.

05:57.880 --> 05:58.720
In that one.

05:58.720 --> 06:01.510
We are mocking the fetch.

06:01.540 --> 06:03.250
Now there is no fetch.

06:03.340 --> 06:10.090
Therefore, this assertion is based on the SPI function we have here.

06:10.390 --> 06:15.310
And since it is never get cold, this part is failing.

06:15.460 --> 06:22.660
Now Angler comes with the testing functionality of this HTTP client module, and instead of directly

06:22.660 --> 06:33.190
using the strategic client module here, we can use the testing version of it and that is HTP client

06:34.150 --> 06:36.430
testing module.

06:36.430 --> 06:42.010
And it is coming from angular common HTTP four slash testing.

06:42.830 --> 06:48.380
So we can just replace the HTTP client module with this one.

06:48.860 --> 06:52.310
And there is one another thing.

06:52.340 --> 06:57.670
It is HTTP testing controller, TB testing control.

06:57.680 --> 06:59.180
Let's import that one as well.

06:59.450 --> 07:01.430
And in this test.

07:02.390 --> 07:03.290
In this one.

07:03.320 --> 07:08.000
Instead of having this spy, we can get the.

07:08.800 --> 07:10.330
The testing controller.

07:10.330 --> 07:16.120
And with this testing controller, we can check that request.

07:16.390 --> 07:24.610
We can access to the request details and we can get the request body or how many times that request

07:24.610 --> 07:25.310
has been made.

07:25.330 --> 07:34.330
We can do those kinds of things via this HTP testing controller and let's make sure we are able to access

07:34.330 --> 07:36.580
that instance in this test module.

07:36.580 --> 07:48.640
And we can do that by using test bed and we ask it to inject a CTP testing controller to here and let's

07:48.640 --> 07:54.550
have this as variable IP testing controller.

07:56.670 --> 08:05.160
So here after clicking the button, we can use HTTP testing controller to access the request and we

08:05.160 --> 08:08.480
can do like this HTTP testing controller.

08:08.490 --> 08:17.430
This is the variable we have here in this test and we are expecting one call to be made to this URL

08:17.580 --> 08:25.470
API one zero users and this is returning back to the request object.

08:26.660 --> 08:27.500
And.

08:28.950 --> 08:31.020
Let's say this is the request object.

08:31.890 --> 08:38.130
And from this object we can get the actual request, body request.

08:38.990 --> 08:41.540
His request.

08:41.720 --> 08:43.640
Let's change this one to something like.

08:43.910 --> 08:44.750
Rick.

08:45.180 --> 08:45.990
Rick.

08:46.040 --> 08:47.420
And from this one request.

08:47.420 --> 08:50.570
And from this request, we can access to the body.

08:52.100 --> 08:56.390
And this is assigned to a variable like this request, buddy.

08:57.470 --> 09:08.240
So we have the buddy now, and instead of using the spy thing we can have right here, we can get the

09:08.240 --> 09:09.470
request, buddy.

09:11.600 --> 09:14.810
Like we expect this request body to equal.

09:15.260 --> 09:19.730
Now, this is going to be an object, not a JSON string.

09:19.970 --> 09:28.520
So like, we can just compare this one with this object, with this object.

09:28.820 --> 09:31.310
So let's save this one.

09:33.770 --> 09:40.010
And here we can see the tests are passing, so we have replaced the fetch.

09:40.880 --> 09:47.300
Fetch usage right here with the HTTP client coming with the angular.
