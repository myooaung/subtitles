WEBVTT

00:03.210 --> 00:08.280
Now let's add activate components justice at the moment.

00:08.280 --> 00:15.060
If you check the gist console, if you run all the tests, you will see an error like this one.

00:15.630 --> 00:23.910
The error is being triggered in the component and basically it is saying a connection refused error,

00:23.910 --> 00:30.450
which means in the app component test we are rendering this activate component.

00:30.450 --> 00:36.690
So the actuate component is making an HTTP request to the backend to activate the user.

00:36.690 --> 00:42.390
But in the app component, we don't have anything about the mock service worker.

00:42.810 --> 00:50.100
So that request is actually trying to go going to a real server and then it is timing out and that's

00:50.100 --> 00:52.860
why this error is shown.

00:53.340 --> 00:54.330
We will get that.

00:54.330 --> 00:58.230
But first let's add the test for the activate component justice.

00:58.230 --> 01:02.220
Then then we will fix the error we see here.

01:03.030 --> 01:13.670
So creating a new file under activate directory and this is going to be activate component just as.

01:16.180 --> 01:20.050
So this is going to be failing because we don't have anything in this file.

01:20.050 --> 01:25.440
And here we see it is failing, by the way, to have a cleaner output right here.

01:25.450 --> 01:34.270
I'm just going to filter the test to run only activate test hitting P and typing activate component

01:34.600 --> 01:36.730
so it is running only to activate component.

01:36.760 --> 01:38.260
Others are not running.

01:38.560 --> 01:52.000
So we are going to first import the render and screen from testing library angular and let's import

01:52.000 --> 02:04.660
the activate components from this Activate component module and let's have the first describe for account

02:04.690 --> 02:06.850
activation page.

02:08.050 --> 02:14.440
And our first test is I'm just going to copy the names from the spectators.

02:14.440 --> 02:23.680
So just copying all three tests and pasting here, but just removing the content.

02:25.630 --> 02:33.280
We will also have the similar subscriber here, but for now, let's go step by step.

02:33.970 --> 02:35.710
So the first test is this one.

02:35.710 --> 02:43.690
It sends account activation request and we are going to have let's have a common set of function here

02:44.980 --> 02:46.060
set up.

02:49.510 --> 03:00.190
This is going to be async because the render is async and we are going to await render, activate component.

03:00.460 --> 03:11.620
And if we check the the setup part in the spectators, so we have this observable, we are like overwriting

03:11.620 --> 03:14.350
the activated root with this way.

03:14.350 --> 03:21.460
And in the in the testing library version, we also have this same approach.

03:21.460 --> 03:26.710
So I'm just going to copy the observable.

03:27.720 --> 03:29.700
And pasting here.

03:30.540 --> 03:32.300
We don't have this type yet.

03:32.310 --> 03:33.390
Root for arms.

03:33.780 --> 03:35.580
So it is here.

03:37.080 --> 03:47.010
Pasting here, then it's import observable and there is this subscriber which is right here.

03:47.460 --> 03:53.670
So let's have the subscriber defined here.

03:56.330 --> 04:03.320
Then we are calling this render to activate compound and then we are pressing the render options.

04:03.680 --> 04:07.760
And in these options we are going to declare the compounds.

04:07.760 --> 04:14.330
We are using this activate compound and that is the alert component.

04:15.170 --> 04:21.590
And then we have the the imports for the testing module.

04:21.590 --> 04:29.930
But in, in this just version, we don't need the test version of the HTTP client.

04:30.410 --> 04:37.270
We can go with the HTTP client module, not the testing module, because here we will be using the mock

04:37.280 --> 04:38.420
service worker.

04:38.540 --> 04:45.470
So instead of using the testing client, most service worker will be handling the the HTTP part for

04:45.470 --> 04:53.330
us and we are fine with going with the HTP client module.

04:54.080 --> 04:59.180
And the other option is the providers.

04:59.900 --> 05:04.040
And I'm just going to copy that one from this test.

05:07.160 --> 05:10.160
So the provider is exactly the same.

05:10.790 --> 05:15.860
So we have the activated root imported here.

05:17.530 --> 05:19.720
And this is the setup.

05:19.750 --> 05:22.950
Now, in this test, it sends a count activation request.

05:22.960 --> 05:25.390
So the first thing is we are going to call

05:28.330 --> 05:30.010
the wait setup.

05:30.190 --> 05:33.010
So this is rendering the component.

05:33.100 --> 05:41.980
Then we will navigate to the page and we were using this subscribe to navigate to make sure the the

05:41.980 --> 05:44.800
subscription to receive the the path.

05:46.150 --> 05:53.230
So we have the same approach here as well because we are using the same activated routing and basically

05:53.230 --> 05:55.930
we are passing our own observable.

05:55.930 --> 06:03.190
So we are calling subscriber with this, but then it's going to be making an API request to backend.

06:03.730 --> 06:13.540
And in this test we can check the the count like this in the karma version, in the jasmine karma version,

06:13.540 --> 06:19.960
we are using the step testing controller to get the length of the request, but now we are going to

06:19.960 --> 06:21.550
use mock service worker.

06:21.980 --> 06:24.580
We didn't use it yet, but we are going to add it.

06:25.360 --> 06:32.050
But we will have this wait wait for functionality coming from the.

06:34.770 --> 06:44.460
Not testing library down but from angler testing library angler.

06:44.730 --> 06:49.710
So we are going to wait for and we will add the assertion here.

06:49.710 --> 06:54.630
We are expecting we will have the counter.

06:54.660 --> 06:56.280
We don't have it yet as well.

06:56.580 --> 06:58.650
It's going to be one.

06:58.650 --> 07:03.330
So previously we have done similar things in the sign up component.

07:03.330 --> 07:04.390
Just yes.

07:04.440 --> 07:11.610
So here we have the counter and whenever we receive a request to the server, we increase that counter.

07:11.610 --> 07:16.380
And in the test we are checking that counter to be like this one.

07:16.380 --> 07:20.730
So we did that in this test previously.

07:21.270 --> 07:24.120
So we are going to do a similar thing in this one as well.

07:24.120 --> 07:28.100
So let's have the server server related pass.

07:28.120 --> 07:36.390
So just copying these things from the sign up component before each, before all and after all and let's

07:36.390 --> 07:37.830
paste it here.

07:39.150 --> 07:45.060
And then we also need a server so we don't have the counter.

07:45.060 --> 07:51.300
First let's have a counter here, counter initially zero.

07:51.330 --> 07:55.770
Then we are increasing in the test and we don't have the server yet.

07:56.190 --> 07:57.520
So let's get the

08:01.290 --> 08:15.270
setup server from MSW node and also let's get the rest from MSW.

08:16.200 --> 08:22.890
So we are going to let's have the server here server.

08:24.790 --> 08:28.660
So we have the setup server and let's pass the handler.

08:28.660 --> 08:37.540
So we have rest post handler for this endpoint API one zero users token.

08:37.540 --> 08:42.370
And there is this dynamic part in the URL and let's say this is token.

08:43.450 --> 08:49.090
And that is going to be taken the request for response and context.

08:51.340 --> 08:58.840
We are going to increase the counter here, increasing counter by one and let's return.

08:59.440 --> 09:00.040
Success.

09:00.040 --> 09:00.850
Response.

09:01.570 --> 09:02.560
Context.

09:02.950 --> 09:04.350
Status 200.

09:04.360 --> 09:05.010
Okay.

09:05.020 --> 09:08.620
And let's not send any payload back.

09:08.680 --> 09:20.110
So what we are doing is we are calling set up and before the test we have the server ready and basically

09:20.110 --> 09:27.100
we are triggering this subscription with this value and that's going to be making API call, which is

09:27.100 --> 09:31.960
going to be handled here and that's going to be increasing the counter and we are going to wait until

09:31.960 --> 09:39.610
the counter is one and that's confirmation for the component is making the API request to backend.

09:39.610 --> 09:41.740
So let's save this one.

09:44.540 --> 09:47.390
And here we see the test is passing.

09:47.780 --> 09:50.970
So the first test is done.

09:50.990 --> 09:52.640
Let's add the second test.

09:52.970 --> 09:54.740
Now it is one.

09:54.740 --> 09:58.460
We are going to display the the success message.

09:59.030 --> 10:02.840
And again, we will do the same thing here.

10:02.900 --> 10:04.660
We are going to close it up.

10:04.670 --> 10:07.820
We are going to call subscribe with the next.

10:08.750 --> 10:11.960
And let's make sure this is async.

10:12.770 --> 10:17.720
Then we are going to wait for a message to appear and let's get the message.

10:18.620 --> 10:24.260
Wait screen find by text.

10:24.260 --> 10:32.330
So we are using this one when we are looking for a text to appear after some time and the message is

10:32.570 --> 10:42.590
account is activated and we expect this message to be in the document.

10:45.080 --> 10:46.490
So let's save this.

10:48.670 --> 10:49.990
This is also a passing.

10:49.990 --> 10:52.480
And let's add the last test.

10:53.050 --> 10:55.930
And in this one again, we are going to

10:58.660 --> 10:59.680
repeat the same steps.

10:59.680 --> 11:10.360
But this time, instead of 1 to 3, you go with four, five, six, and we are going to see activation

11:10.510 --> 11:12.130
failure message.

11:12.280 --> 11:16.240
But we need to update our server here.

11:16.270 --> 11:22.390
At the moment it is just returning to 100, but let's enhance the functionality here.

11:22.390 --> 11:32.800
So basically what we can do is if request we can take this token from the request parameters and let's

11:32.800 --> 11:35.890
get the token.

11:36.280 --> 11:43.390
And if it is equal to four or five six, which is this case.

11:44.700 --> 11:48.660
Then let's return an error.

11:51.060 --> 12:07.050
So we are we are in response with the status of 400 and we can go with the empty JSON saving this one.

12:08.650 --> 12:11.200
So this is also passing.

12:11.650 --> 12:15.100
So we have the activated component, just tests.

12:15.190 --> 12:20.800
Now let's focus to the errors we have seen in the tests.

12:20.800 --> 12:24.130
So just running all tests by hitting a.

12:26.390 --> 12:29.810
And here we are seeing the error message in the console.

12:31.390 --> 12:32.650
To fix this.

12:32.680 --> 12:42.700
All we need to do is let's open the app component just as now like when we are navigating to the activate

12:42.700 --> 12:43.360
page.

12:43.690 --> 12:45.720
Those are triggering this API call.

12:45.730 --> 12:53.380
So to get rid of the errors, what we can do is we can just copy the server implementation.

12:53.560 --> 13:02.740
So just taking these lines from the activate component, coming to the app component, just pasting

13:02.740 --> 13:04.870
here and.

13:05.880 --> 13:11.850
And let's also copy the imports like the setup server and rest.

13:14.010 --> 13:18.580
So we have the server and let's just return to 100.

13:18.600 --> 13:18.830
Okay.

13:18.840 --> 13:21.900
Let's not have any logic here.

13:22.740 --> 13:26.970
So this is the server implementation in app component as well.

13:28.870 --> 13:30.610
So let's say these changes.

13:34.860 --> 13:39.990
And here we see the tests are passing and we no longer see that error message in the console.
