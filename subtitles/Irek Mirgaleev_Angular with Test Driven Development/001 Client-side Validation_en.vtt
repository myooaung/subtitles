WEBVTT

00:03.380 --> 00:07.550
Now in this section we will apply the validation to the user entries.

00:07.850 --> 00:14.690
We are able to fill this form and we need to make sure the entries are matching to the certain criterias.

00:14.810 --> 00:19.490
Angular has built in validation functionality and we are going to practice that one.

00:19.850 --> 00:22.640
Now let's start with the first requirement.

00:23.270 --> 00:31.070
And the first requirement is this username cannot be now, so the username will be required and as usual

00:31.070 --> 00:32.360
we will start with the test.

00:32.360 --> 00:40.250
So opening the sign up component spec for the validation case, I'm going to add a new described block.

00:40.250 --> 00:49.580
So we have layout, we have interactions and after the interactions I think a new one, this is for

00:49.880 --> 00:50.810
retardation

00:54.710 --> 00:58.040
and our first test is it.

00:59.070 --> 01:09.900
Displays username is required message when username is null.

01:10.980 --> 01:16.530
So when we leave the input empty we will see this message.

01:16.920 --> 01:22.770
Now we are going to interact with the username input, but we are not going to enter any value.

01:22.770 --> 01:28.200
So what we will do is let's get the input first just going.

01:28.200 --> 01:34.680
One of the previous tests just querying, just copying this query selector.

01:35.970 --> 01:38.640
And by the way, we will also need to sign up here.

01:39.150 --> 01:46.980
Sign up is the fixture native element, which is an email element.

01:47.010 --> 01:51.420
So we are getting this username input.

01:51.990 --> 01:58.080
Now in this field we will do like this, we will focus to it then and focus it.

01:58.560 --> 02:03.330
So what we will do is username input.

02:03.360 --> 02:11.400
We are going to dispatch an event and that event is new event focus.

02:13.560 --> 02:17.370
Then we will focus from this.

02:18.700 --> 02:20.050
This input.

02:21.160 --> 02:23.590
And that is like Blur.

02:23.890 --> 02:25.810
So we are going to the special Blur event.

02:25.810 --> 02:30.550
So it's like we are focusing to the input then clicking somewhere else.

02:30.550 --> 02:39.070
So what we are doing is basically similar to that one and in the end we will see an error message appeared

02:39.070 --> 02:40.780
on the screen.

02:41.440 --> 02:52.450
But since this is going to be updating the UI, first we need to call fixture detect changes, then

02:52.450 --> 02:59.110
we are going to see an element containing this text username is required.

02:59.110 --> 03:05.530
So for that element, again, we can use a test ID to get that element.

03:05.530 --> 03:08.590
So something like this would be fine.

03:08.830 --> 03:17.800
We are going to query it based on like this is going to be a div and in this div there will be this

03:17.800 --> 03:24.790
data test ID and its value will be username validation.

03:26.950 --> 03:33.550
So this is the let's say, validation element.

03:34.750 --> 03:41.080
And in this validation element, we, we are going to check the text content of it.

03:41.230 --> 03:42.880
So we expect this.

03:45.200 --> 03:58.760
Foundation element text content to contain username is required, by the way, just like to test for

03:58.760 --> 04:02.570
the visibility of the spinner or the sign up success message.

04:02.720 --> 04:09.380
This is not going to be visible before the validation failure, so we should be querying the non-existence

04:09.380 --> 04:12.910
of this element before we do anything.

04:12.920 --> 04:21.530
So here we are expecting this sign up query selector to return null.

04:23.020 --> 04:25.570
So it's not going to be in the page.

04:25.570 --> 04:30.670
But after we do this, then we will see this element.

04:31.060 --> 04:34.090
Let's open the karma window and saving this one.

04:36.410 --> 04:37.190
Tests are running.

04:37.190 --> 04:40.520
And here we see the tests for the validation is failing.

04:41.060 --> 04:42.650
Now let's fix this.

04:42.740 --> 04:47.750
We are going to fix this in the component in the form control part.

04:47.960 --> 04:54.420
Here we have this username, which is a form control and we can pass the validators in this one.

04:54.440 --> 05:02.780
We are just passing the initial value for it, but as a second parameter we can pass the validator options.

05:03.410 --> 05:13.680
So having this and we can pass the data functions in array like here, we can set the validators coming

05:13.680 --> 05:14.240
with Angular.

05:14.240 --> 05:21.860
So validators is like coming from the angular forms and in this one we have this required.

05:22.760 --> 05:30.680
So it is going to be doing the required validation for this username and we can get information about

05:30.680 --> 05:34.410
the error on the component.

05:34.430 --> 05:39.770
At the moment it's not going to fix anything, but let's, let's see what kind of message we see.

05:40.190 --> 05:49.010
And for that we can do something like this in calibrations we can access to the form for form is this

05:49.010 --> 05:49.340
one.

05:49.340 --> 05:54.860
And from this form we can get the username like this form get username.

05:56.070 --> 06:00.140
And in his username there is these errors.

06:00.150 --> 06:10.230
This is this can mean also having this optional chain and we can use the pipe operator of Angular to

06:10.230 --> 06:15.300
make sure this is going to be printed as JSON string.

06:15.660 --> 06:17.790
Opening the application on browser.

06:17.790 --> 06:19.530
Again, let's save this one.

06:20.530 --> 06:23.240
So initially the username is empty.

06:23.260 --> 06:26.910
Therefore this required validator is returning.

06:26.920 --> 06:27.160
True.

06:27.160 --> 06:30.580
But if I type anything here it is null.

06:30.580 --> 06:34.990
Which means for the username we don't have errors.

06:36.030 --> 06:44.070
So we are going to use this one right here in the template and we will check if there is errors.

06:44.070 --> 06:46.160
We will display that error.

06:46.170 --> 06:51.620
So let's do that after the input right here.

06:51.630 --> 06:55.140
We can add another div.

06:55.470 --> 06:57.570
This is the div we are querying in the test.

06:58.780 --> 07:04.300
And let's set the test ID and this is the test ID.

07:05.110 --> 07:06.940
Username visitation.

07:09.540 --> 07:13.440
So this is going to be visible conditionally and the condition is.

07:15.190 --> 07:19.690
If form get username.

07:23.770 --> 07:24.520
Errors.

07:25.960 --> 07:34.570
So if there are errors for this form control, then we will display this live and the message will be

07:35.680 --> 07:38.890
the text content of this div will be this one.

07:39.040 --> 07:40.120
Saving this one.

07:41.150 --> 07:43.990
Now we are seeing the message right here.

07:44.000 --> 07:46.670
It is visible, but it is immediately visible.

07:46.670 --> 07:52.490
We didn't do anything about like focusing or blurring from this this input.

07:52.490 --> 07:57.800
So we need to enhance this logic here.

07:58.130 --> 08:00.410
So I'm just going to do like this.

08:00.410 --> 08:07.820
So other than the errors, we have other properties coming with this form control and one of them is

08:08.450 --> 08:12.530
tracking if this, this input is touched.

08:12.530 --> 08:15.020
So like here, if I just.

08:16.940 --> 08:19.080
Type touched property here.

08:19.100 --> 08:19.970
Let's save it.

08:21.110 --> 08:23.020
So it is initially false.

08:23.030 --> 08:30.320
I am focusing to the input and focusing somewhere else and here it is returning true.

08:30.320 --> 08:41.180
So this touched is set as true when this this specific form control is focused and unfocused.

08:41.180 --> 08:44.570
So we can use that one as well here.

08:44.570 --> 08:47.690
So if we have the errors.

08:49.050 --> 08:49.830
And.

08:51.280 --> 08:52.210
Form.

08:52.950 --> 08:57.960
Form control is touched and we are going to display this message.

08:59.070 --> 09:01.680
Now the error is gone.

09:02.310 --> 09:10.610
And if we check the test console here, we see the test is passing and let's test it manually.

09:10.620 --> 09:17.240
So here focusing to username, then clicking somewhere else and here we see the username is required,

09:17.280 --> 09:19.170
message is visible.

09:19.800 --> 09:23.250
Now let's add another validation case.

09:23.580 --> 09:30.330
So other than not being now let's set some character limit for the username.

09:30.330 --> 09:46.500
So just copying this test and pasting here and it's it displays let's change the message length error

09:47.220 --> 09:52.710
when username is less than four characters.

09:54.300 --> 09:58.200
So let's say this is the requirement for this username.

09:59.340 --> 10:06.180
So we are checking again, this is an invitation not to be in the page.

10:06.360 --> 10:10.080
Then we are going to set value for this time.

10:10.080 --> 10:20.470
So we are going to say username, input and value is going to be let's say it's just going to be 1 to

10:20.470 --> 10:20.850
3.

10:21.750 --> 10:24.090
And now instead of.

10:25.260 --> 10:29.100
Dispatching this focus, we can dispatch just this input event.

10:29.490 --> 10:33.300
This is also doing the the focus as well.

10:33.300 --> 10:33.840
So.

10:34.650 --> 10:43.050
But to get this value being reflected in the form control, we use input events right here.

10:43.080 --> 10:46.320
So we are setting value for the username.

10:46.410 --> 10:49.360
It's three characters long which is invalid.

10:49.380 --> 11:01.260
Then in the end we are going to see a message saying username must be at least four characters long.

11:01.590 --> 11:03.630
So this is the message we are going to see.

11:04.620 --> 11:08.340
And switching to the test console, saving this one.

11:10.180 --> 11:14.140
So this is failing and let's fix it.

11:15.770 --> 11:18.170
First one, we are going to add another validator.

11:18.170 --> 11:20.840
So other than the required, this is an array of validator.

11:20.840 --> 11:26.670
So the second validator is again, we are going to use the validators coming with the angular forms

11:26.930 --> 11:36.950
for validators and the one we are looking for is min length and the length value will be four.

11:36.950 --> 11:41.750
So saving it again is not going to fix the issue yet.

11:41.750 --> 11:47.360
Now there are two different validations and we need to distinguish the error type here.

11:48.410 --> 11:50.840
So let's try it on browser first.

11:51.740 --> 11:57.680
So initially the username is failing with the required, but if you type anything here now the validation

11:57.680 --> 11:59.840
is failing because of the mean length.

11:59.930 --> 12:04.070
But the error we are seeing is still the username is required.

12:04.070 --> 12:06.050
But if we.

12:07.330 --> 12:08.890
Enter four characters don't.

12:08.890 --> 12:13.420
Then the politicians is passing and the message is gone.

12:13.510 --> 12:22.210
So you must be checking the failing type before showing the relevant error so we can do like this.

12:22.420 --> 12:27.890
So at the moment we are in this div, we are not paying attention.

12:27.910 --> 12:29.590
What kind of validation error this is.

12:29.590 --> 12:35.020
We only care if there is an error and if this is touched.

12:35.020 --> 12:39.970
So we can check the type of error like this.

12:39.970 --> 12:45.830
We can wrap with another div for this username is required.

12:45.830 --> 12:54.160
This is going to be visible only if form get username.

12:54.160 --> 13:02.410
So we are accessing to the form control and from this one we can get the errors of it and we can get

13:02.410 --> 13:05.020
the error type of it like this.

13:05.020 --> 13:11.140
If it is required type of validation failure, then we are going to display this one.

13:13.620 --> 13:16.830
And we can add the second validation type.

13:16.830 --> 13:26.430
So if it's failing with the mean length, then the the message will be is your name must be at least

13:27.300 --> 13:31.140
four characters long.

13:31.290 --> 13:35.460
Just checking the test to make sure I don't do any typo here.

13:40.360 --> 13:41.050
Like this.

13:41.380 --> 13:42.390
I have a typo here.

13:42.400 --> 13:44.620
This is going to be mean length like this.

13:45.100 --> 13:46.630
Let's check the test console.

13:46.630 --> 13:48.430
And here we see the tests are passing.

13:48.430 --> 13:56.590
And if we test it manually on browser, if I type anything here, we don't see anything about the validation

13:56.590 --> 13:56.890
errors.

13:56.890 --> 14:02.710
But if I unfocused this one here we see the message is visible.

14:03.070 --> 14:07.180
For the length case, we can enhance this error visibility.

14:07.180 --> 14:12.100
So the error would be visible as soon as a user types like here.

14:12.100 --> 14:18.550
If I type just a single character, that error can be visible immediately so that user knows how many

14:18.550 --> 14:20.590
characters they need to enter.

14:21.010 --> 14:25.390
And for that one, we can we can do like this.

14:25.390 --> 14:32.980
This div the error part is visible only when there is errors and also when this is touched, which means

14:32.980 --> 14:35.890
this this element must be unfocused.

14:35.980 --> 14:39.100
But we can do like this.

14:39.220 --> 14:52.060
This can be either touched or let's have this group in this parenthesis, or we can check this username.

14:54.850 --> 14:57.800
They also have this dirty.

14:58.600 --> 14:59.350
Property.

14:59.350 --> 15:04.570
So this dirty means one user changes the value in this field.

15:04.600 --> 15:12.580
The that form control is marked as dirty so this can be also be added to this logic.

15:12.580 --> 15:15.340
So let's save this one and see how it is working.

15:15.340 --> 15:18.010
So here the username is empty.

15:18.040 --> 15:22.060
We do not focus it so there is no error messages about it.

15:22.060 --> 15:30.490
But after I focus and type a single character which is failing with the validation, we are not unfocused.

15:30.490 --> 15:33.370
So this is still not passing.

15:33.370 --> 15:39.670
But because of this dirty control, we are showing the error right here.

15:39.670 --> 15:44.320
So this is a bit better feedback about the errors for the users.

15:44.320 --> 15:50.140
So we completed the validation at least initial part of the validation for the username.

15:50.530 --> 15:55.000
And we will continue to do the the validation for the other fields as well.

15:55.180 --> 15:59.620
At the moment we don't need this form properties to be printed right here.

15:59.980 --> 16:04.870
So just removing that part and if we check the.

16:05.700 --> 16:08.970
This console here we see all tests are passing.
