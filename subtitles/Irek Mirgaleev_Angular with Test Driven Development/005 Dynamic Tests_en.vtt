WEBVTT

00:03.070 --> 00:10.090
We are going to repeat the validation for email and password fields, but the tests are going to be

00:10.090 --> 00:15.100
similar, like almost identical to the ones we have at the moment.

00:15.490 --> 00:20.350
So instead of repeating ourselves, we can come up with a better solution.

00:20.350 --> 00:27.820
So like in the test, we are entering values and we are checking the specific text.

00:27.820 --> 00:30.640
We are focusing to the specific elements like this.

00:30.640 --> 00:38.410
These can be used as a parameter and we can have parametric tests for this case.

00:38.410 --> 00:48.250
So right here we can have an array of like we can gather all the, the data set in the arrays, like

00:48.250 --> 00:56.080
we can have the let's say, let's say we have the test cases and this is going to be an array.

00:56.080 --> 01:04.750
And in each of them we can have an object like one of the the property will be, let's say this is the

01:04.750 --> 01:05.260
field.

01:05.260 --> 01:10.990
And in this one we will be having the name of the field we are querying.

01:10.990 --> 01:18.100
So like this is going to be username and the next thing is we are entering value in this one.

01:18.100 --> 01:21.610
We don't do that, but we can repeat the same thing in this one as well.

01:21.610 --> 01:26.140
So like we could have entered an empty text or something like that.

01:26.140 --> 01:29.110
So we are entering a value in each test.

01:29.650 --> 01:37.510
And the last thing is we are querying this message, the error message we are querying here.

01:37.510 --> 01:40.990
So let's say this is the error we are looking for.

01:42.190 --> 01:49.120
So this is the the values for the first test and for the second one.

01:49.660 --> 01:55.600
Again, we are creating the username field and we are filling with this value 1 to 3.

01:55.600 --> 02:02.590
So the value will be this one and we are querying this message, this error message.

02:02.590 --> 02:06.910
So it's going to be like this.

02:06.910 --> 02:14.170
So we have this array and what we can do is we can loop in this area for each.

02:14.940 --> 02:30.930
And we can have a function for each item so we can structure them like this field value and error.

02:32.100 --> 02:35.580
Then we can have a single test it.

02:36.420 --> 02:40.140
Then we can also use the values in the test description as well.

02:40.170 --> 02:50.700
So like this it displays the error when.

02:53.270 --> 02:55.970
Field has.

02:58.310 --> 02:59.000
Value.

02:59.000 --> 03:05.450
So it displays username is required when username has this value.

03:07.130 --> 03:18.200
So in this test, basically we are going to just, just going to copy the, the one with the character

03:18.740 --> 03:21.020
validation, length validation.

03:22.520 --> 03:24.200
So pasting here.

03:26.150 --> 03:32.840
So we are going to query the existence of this validation dev.

03:32.840 --> 03:35.120
But this part will be dynamic.

03:35.120 --> 03:40.940
So this is for the username validation, but the email will also have the name like this email validation,

03:40.940 --> 03:42.500
password validation and so on.

03:42.500 --> 03:48.830
So let's make sure this is, this is taking.

03:51.490 --> 03:57.070
This part from the field.

03:58.830 --> 04:00.510
So like this.

04:01.890 --> 04:04.590
Then also we do the same thing here as well.

04:07.140 --> 04:13.110
This is field and this needs to be in Bektic.

04:13.560 --> 04:16.080
And let's go with the generic name.

04:16.350 --> 04:26.010
Let's say this is input and as a value we are using this value and it is dispatching this input, then

04:26.010 --> 04:26.880
blurring.

04:28.020 --> 04:30.780
Then again, we are querying this.

04:33.780 --> 04:34.680
Element.

04:37.140 --> 04:43.830
And checking its content, which is going to be the error message here.

04:44.640 --> 04:51.900
So just commenting out these two and let's save this.

04:53.580 --> 05:02.700
So here in the validation we have test it displays username is required when username has this is empty

05:02.700 --> 05:05.850
text and the second one is displays.

05:05.850 --> 05:08.640
Username must be at least four characters long.

05:08.640 --> 05:14.610
One username has this one so we can enhance this visibility part.

05:14.610 --> 05:25.440
Like we can put the value into codes like this, single codes and the output is like this.

05:26.550 --> 05:31.290
So this is how we can have a solution for repeating tests.

05:31.290 --> 05:34.020
Now we can get rid of this one.

05:36.200 --> 05:37.370
We don't need those.

05:41.040 --> 05:45.720
And let's also do the same thing for the just test.

05:47.350 --> 05:54.280
We can do the same thing, like same approach, same exact approach, or just already has built in functionality

05:54.280 --> 05:54.700
for it.

05:54.700 --> 05:58.450
And that's like this it each.

05:59.180 --> 06:10.850
And in bektic we are defining a table like like in this one, we are creating the text, we are creating

06:10.850 --> 06:14.980
the label, and again, we are having a value.

06:14.990 --> 06:19.310
So like this is a table, like a markdown table.

06:19.700 --> 06:24.770
So the, the first line will be representing the the column names.

06:24.770 --> 06:32.300
So like the first one is we can say label and the second column will be input value.

06:32.300 --> 06:36.410
And the last column, let's say it's going to be this message.

06:36.410 --> 06:42.410
Now the label by the way, remember we are typing it in Bektic.

06:42.620 --> 06:52.790
So for the label we will have the value of username and for that we need to pass it like this value

06:52.790 --> 06:54.920
in the dollar and curly braces.

06:55.760 --> 07:07.430
So this is the label username and then we will have the value as and the value will be empty.

07:08.000 --> 07:13.190
But this is going to be showing a warning to us.

07:13.190 --> 07:14.360
We will fix that.

07:14.810 --> 07:24.290
But at the moment, let's say the input value will will be empty and the message will be username is

07:24.320 --> 07:25.430
required.

07:25.760 --> 07:29.300
And the next line again this is username.

07:29.300 --> 07:37.340
Label value will be 1 to 3 and the value will be the message will be this one.

07:41.720 --> 07:43.330
So this is it.

07:43.340 --> 07:46.540
Age after the closing.

07:46.580 --> 07:50.450
We are opening and closing parentheses.

07:50.900 --> 07:54.800
And in this parentheses this is the test function.

07:54.830 --> 08:02.030
The first parameter is the test description and the second parameter is just like the other test.

08:02.030 --> 08:04.160
It's the test implementation.

08:04.310 --> 08:09.080
Now here in the test description, we can do something like this.

08:09.110 --> 08:14.090
It displays we can access to these values with dollar sign.

08:14.090 --> 08:18.050
It displays message when.

08:19.610 --> 08:31.280
Label has the value and we can type the input value in the double quotes here.

08:32.180 --> 08:34.160
Input value.

08:35.750 --> 08:41.060
So in the text description, we we are able to access to these values like this.

08:41.330 --> 08:46.400
And in the function, we also need to access to the values.

08:46.790 --> 08:53.120
And just like in our solution right here, this is passed as object.

08:53.120 --> 09:02.540
And we can use the object structuring to get the label input, value and message.

09:03.020 --> 09:06.890
So this is the parameters this function is receiving.

09:08.330 --> 09:14.690
Again, copying this test with the length validation.

09:15.860 --> 09:21.560
Now, we don't need this message variable because we are already taking the message as parameter right

09:21.560 --> 09:22.130
here.

09:23.110 --> 09:31.540
And the label will be label value will be input value.

09:31.540 --> 09:35.350
And let's rename this to input.

09:39.280 --> 09:43.360
And just commenting out the others.

09:43.690 --> 09:45.550
Let's save this one.

09:50.360 --> 09:54.860
Now one of the tests is failing and the failing one is the test.

09:55.490 --> 09:57.770
With it displays username is required.

09:57.770 --> 09:59.630
One username has the value empty.

09:59.630 --> 10:08.090
So this empty case is causing problem because when we call the user event type with empty value, it

10:08.090 --> 10:09.680
is failing.

10:09.710 --> 10:17.870
Instead of just passing an empty value, we can hitting space, we can do something like this space

10:18.590 --> 10:21.110
and then back space.

10:21.110 --> 10:23.070
So this would be like similar.

10:23.150 --> 10:29.750
What a user does, focuses to the element, hits space, then hits backspace.

10:29.750 --> 10:33.230
So in the end it's ending up with an empty input.

10:33.470 --> 10:39.740
So let's format this document and let's save this one.

10:44.290 --> 10:49.330
And it is outpacing so we can remove the command style parts now.

10:50.830 --> 10:54.280
Now when we added this, we will just add a new line.

10:54.330 --> 11:00.190
And this, for instance, it's going to be for the email and it's going to be for the required case.

11:00.190 --> 11:01.720
And that's it.
