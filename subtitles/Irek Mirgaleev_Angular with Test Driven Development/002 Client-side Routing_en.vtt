WEBVTT

00:03.150 --> 00:06.810
Now let's add the tests for the routing functionality.

00:06.960 --> 00:14.340
We are gathering all these routings in the app component and it will be responsible for changing the

00:14.340 --> 00:15.900
page based on the browser path.

00:15.900 --> 00:20.460
So let's add the test to the app component module.

00:21.800 --> 00:23.750
So opening the app component spec.

00:24.500 --> 00:29.240
Previously we cleared the tests here, but now we will add our own test.

00:29.690 --> 00:36.790
This module was created initially when we created the application and there is difference between the

00:36.800 --> 00:42.920
before each right here and before each in the sign up component.

00:42.920 --> 00:50.390
We created this sign sign component with the angular cli after we created the project and the before.

00:50.390 --> 00:52.340
Each section is like this.

00:52.340 --> 00:59.750
As you can see, there is the before each for testbed configure testing module and there is another

00:59.750 --> 01:04.430
before each which is for creating the the component we are testing.

01:04.430 --> 01:07.520
So let's use a similar approach here.

01:07.640 --> 01:12.290
We are also accusing the the variables in the test.

01:12.290 --> 01:15.350
So let's go with a similar approach.

01:15.350 --> 01:25.580
So just copying this this second before each and pasting after and the one in the app component test.

01:25.730 --> 01:32.750
So we are going to test the app component and we have the variable of fixture.

01:32.750 --> 01:35.600
Let's copy these as well.

01:36.440 --> 01:43.940
So here we have the variables for the component is going to be a component and the component fixture

01:44.780 --> 01:47.900
is going to be for app component as well.

01:48.350 --> 01:58.580
So we are here creating the component, having these variables and now we can add our first test.

01:58.850 --> 02:07.760
So just removing this one and creating a new describe look right here and this is for, let's say,

02:07.760 --> 02:08.600
routing.

02:08.630 --> 02:10.940
We will have the routing tests here.

02:11.810 --> 02:21.080
And our first test is it displays home page at this pad.

02:22.400 --> 02:32.000
So having the test function now what we are going to do is basically when the component is rendered,

02:32.000 --> 02:33.290
we will be at the home page.

02:33.350 --> 02:38.750
We are not doing anything about navigation, so we are expecting to see the home page.

02:38.750 --> 02:46.610
And at the moment in the home page we don't have anything to query and we don't know what the home page

02:46.610 --> 02:47.390
will contain.

02:47.390 --> 02:57.500
So in these kind of cases, like just like we did in the sign up components, the, the validation error

02:57.500 --> 03:06.770
sections like here we set the test ID and we query that because the text content may change.

03:06.770 --> 03:11.000
So we go with an ID that we can rely on.

03:11.000 --> 03:14.030
So we will do the same thing here.

03:14.030 --> 03:18.260
So in the fixture you get the native element.

03:18.260 --> 03:22.700
This is the returning of the app app component.

03:22.700 --> 03:31.790
And in this one we will query and we are going to query an element having the attributes of data test

03:31.790 --> 03:41.750
ID and let's say for the home page we will use the test ideas home dash page and closing the square

03:41.750 --> 03:42.620
brackets here.

03:42.620 --> 03:50.830
And let's say this is the page and we are expecting this page to be 330.

03:50.840 --> 03:57.920
So it's going to be returning value returning to the element for this one.

03:59.270 --> 04:05.660
At the moment, our test setup is not really ready, but let's go step by step.

04:05.690 --> 04:07.220
So saving this one.

04:09.610 --> 04:12.100
And here we see the test is failing.

04:12.340 --> 04:16.720
This is the the routing test it displays on page at this URL.

04:16.720 --> 04:19.390
And basically this is returning null.

04:19.810 --> 04:22.030
But we know that this is working on browser.

04:22.030 --> 04:25.660
We have seen how it is working, how the navigation is working.

04:26.500 --> 04:29.050
One of the fail reasons is in home page.

04:29.050 --> 04:31.000
We don't have this test yet.

04:31.000 --> 04:32.100
Let's add it.

04:32.110 --> 04:42.070
Just copying this this part and opening home component to HTML and let's let's say we have a div having

04:42.070 --> 04:47.590
this data test ID and the values homepage and closing this div.

04:47.590 --> 04:55.480
And let's say we have this header, it doesn't matter what we have is a content here.

04:55.480 --> 05:03.700
It's just for like when we test on browser, just add something meaningful to reflect the page.

05:04.210 --> 05:13.900
So when we save this, it's not doing anything because at the moment the, the routing is working on

05:13.900 --> 05:22.960
the browser, but in our test configuration here we are just rendering this app component.

05:22.960 --> 05:31.540
But if you remember, if you check this sign up component spec here we were rendering the component,

05:31.540 --> 05:35.530
but also we were importing the relevant modules.

05:35.530 --> 05:41.470
So just like we did in these tests, we will do the similar thing here.

05:41.470 --> 05:48.940
So if we open the app component spec, we are going to not just declare the app component, but also

05:48.940 --> 05:55.990
we are going to import the router module, but we are not going to import the router module, but we

05:55.990 --> 06:01.120
will import router testing module.

06:01.630 --> 06:03.370
So this is coming from.

06:06.590 --> 06:18.200
It's coming from router testing module from angular router testing.

06:19.940 --> 06:25.700
Again, this should be something familiar to you because in the application we are using HTP client

06:25.700 --> 06:29.960
module, but in test we are using the testing module.

06:29.960 --> 06:37.970
A testing version of that is typical in module and this is giving us the options to interact with the

06:38.010 --> 06:45.830
HTP client we are using so we can control the behavior of the HTP client in our test and we can achieve

06:45.830 --> 06:47.600
the functionalities we are looking for.

06:47.840 --> 06:51.680
And similarly, the routing has the same thing.

06:51.890 --> 07:01.520
So we have this router testing module, just like configuring the router here in the router, a router

07:01.520 --> 07:10.040
module, we will pass the routes, we can use the same routes array so we can export this one and let's

07:10.040 --> 07:11.960
import it in the.

07:13.630 --> 07:14.560
The component specs.

07:14.560 --> 07:18.970
So again, we are going to configure this throughout the router testing module.

07:18.970 --> 07:28.360
But unlike a router module, this doesn't have the four route, but it has width routes function and

07:28.360 --> 07:35.260
we are going to pass the the routes coming from our router module.

07:35.500 --> 07:41.020
So this is how we are configuring the the router functionality in our test.

07:41.870 --> 07:43.560
But this is not complete yet.

07:43.580 --> 07:48.050
In the app component, we are using the sign up component and the home component.

07:48.050 --> 07:57.650
So just like we again declared those in the app module, we have to declare them as well in the test

07:57.650 --> 07:58.250
module.

07:58.430 --> 08:04.880
So we are going to have the sign up component and we have the home component.

08:06.340 --> 08:08.620
If you save at this point, it's not going to fix.

08:08.620 --> 08:09.610
But let's see that.

08:11.760 --> 08:14.340
It's not fixing because the.

08:15.190 --> 08:20.430
The rendering is not really having to do anything about the pet at the moment.

08:20.440 --> 08:26.200
We are just rendering this component right here.

08:26.470 --> 08:27.790
We are creating the component.

08:27.790 --> 08:35.470
But this has nothing to do with the pets of the URLs or it doesn't have anything about those parts.

08:36.010 --> 08:44.440
To achieve the routing functionality we need to access to the router instance in the application and

08:44.440 --> 08:46.630
we can get that again.

08:46.630 --> 08:58.150
This is something similar in we did in the the sign up case like the HTP client testing controller here

08:58.150 --> 09:00.580
we get it like this and we interact with it.

09:00.580 --> 09:05.230
So we will do the same thing here, but this time we will access to the router.

09:05.470 --> 09:08.650
So let's have the variable first.

09:08.650 --> 09:16.060
We will have router instance and this is router, this is the angular router.

09:16.510 --> 09:23.500
So we are going to get the router from testbed.

09:24.130 --> 09:29.140
We are looking for a router to be injected here.

09:30.170 --> 09:31.780
So this is the setup part.

09:31.790 --> 09:33.570
Now we can update our test.

09:33.590 --> 09:39.530
Now we are going to make sure the router is navigated to the URL.

09:39.530 --> 09:50.570
So we will be using this router's navigate functionality and this is taking an array.

09:51.020 --> 09:56.870
And in this area we are just going to pass the path this slash.

09:57.200 --> 10:02.990
But this is async, so we need to wait here before the navigation is completed.

10:02.990 --> 10:06.800
So we must be making sure our test is async.

10:07.460 --> 10:10.010
So this is handling the navigation.

10:10.010 --> 10:13.240
So this is making sure the router is having this path.

10:13.250 --> 10:19.400
But to reflect the changes on the UI we need to call fixture detect changes here.

10:19.970 --> 10:24.890
So at this point the router is having this path.

10:25.040 --> 10:34.730
Then we are telling Angular to update the UI and based on the router configuration, we are expecting

10:34.820 --> 10:39.320
this test ID homepage to be visible.

10:39.590 --> 10:43.160
So this is the test.

10:43.460 --> 10:44.510
Let's save this.

10:46.480 --> 10:49.580
And here we see it is passing.

10:49.600 --> 10:51.490
So it is working.

10:51.520 --> 10:54.310
Now let's add the test for the sign up case.

10:54.310 --> 11:06.580
So just copying the test for the home page and now it is going to like displays sign up page at the

11:06.580 --> 11:08.530
sign up URL.

11:09.520 --> 11:13.930
So for this one, we are going to navigate to the signup URL.

11:14.650 --> 11:17.500
We are waiting for UI to be updated.

11:17.920 --> 11:25.960
Then again, we are going to query something from that page and let's have a consistent pattern here

11:26.080 --> 11:30.040
and let's use data test data as well.

11:30.040 --> 11:35.530
And for the signup page, let's say we will have the test ID like the sign up page.

11:35.530 --> 11:46.180
So in let's open the signup component and let's make sure we set to the route if it said data test.

11:47.220 --> 11:52.500
I.D. equals sign up page.

11:54.540 --> 11:59.160
So we are querying this to make sure it is there.

11:59.160 --> 12:07.170
So in app component spec, now we are querying this thing and making sure it is there saving this one.

12:09.700 --> 12:11.950
Now we have another failure.

12:11.950 --> 12:17.890
And this should be familiar to you because we have seen this one previously.

12:18.730 --> 12:23.650
Now we are basically trying to display the sign up page.

12:23.650 --> 12:30.730
But the signup component is dependent on to the to the user service and user service is dependent onto

12:30.760 --> 12:32.140
the HTP client.

12:32.140 --> 12:36.670
So we must be updating our setup here.

12:36.910 --> 12:45.700
So other than the router testing module, we are dependent onto that one as well.

12:46.090 --> 12:53.590
So just like we did in the again sign up component, that one can sign up component spec.

12:53.860 --> 13:00.970
So we were importing this HTP client testing module, so we will do the same thing.

13:02.180 --> 13:03.320
Here as well.

13:03.470 --> 13:06.780
So just copy the import part.

13:06.800 --> 13:12.740
Taking the HTP client testing module and adding it to the import array.

13:12.980 --> 13:22.610
We are doing this because the user service depends on to the client and HTP client for the test test

13:23.150 --> 13:23.960
environment.

13:24.050 --> 13:28.940
We can take that one from this HTP client testing module.

13:29.240 --> 13:31.400
So saving this one.

13:33.030 --> 13:36.300
And here we see the test is passing.

13:36.570 --> 13:42.870
Now, it's not obvious at the moment, but if we opened the console of.

13:44.190 --> 13:45.330
Karma here.

13:45.330 --> 13:51.240
Here we have the errors and we still see errors about button or form.

13:51.240 --> 13:59.910
That's happening because in sign up page we are using the app button component and also we have reactive

13:59.910 --> 14:01.170
form implementation.

14:01.170 --> 14:09.420
But in this test setup, again, if we open the test here, we didn't declare the button or we didn't

14:09.420 --> 14:11.850
import the reactive forms module.

14:12.060 --> 14:16.250
So we need to update this part as well.

14:16.260 --> 14:24.570
Basically in the module we were importing this shared module and this shared module was exporting the

14:24.990 --> 14:29.460
load and the button component so we can import the.

14:32.700 --> 14:36.330
The shared module here shared the module.

14:36.330 --> 14:45.150
So with this way we got the two button and for the form related errors, we need to import the reactive

14:45.390 --> 14:47.070
forms module.

14:48.530 --> 14:51.320
So let's save this one.

14:53.590 --> 15:01.450
And if we open the console here now, it is clear now the console does not have any error.

15:04.200 --> 15:12.120
Instead of having these declarations or imports, we could we could do something like this.

15:12.120 --> 15:23.280
So just commenting out this part and what we would do is basically we could just import the EP module,

15:23.280 --> 15:30.960
which is the root module, and that's basically doing all those imports like the the declarations or

15:31.050 --> 15:34.620
the, the others are being imported in this module.

15:34.620 --> 15:46.050
So we just import this and then we also need to do the router configuration here.

15:46.770 --> 15:54.150
So like we could go like this, let's see, let's see how it's going to work and this is working.

15:54.150 --> 16:02.160
And if you open the console, it is clear so we could go like this, but this would be adding unnecessary

16:02.160 --> 16:06.180
modules and components to the test we are running here.

16:06.180 --> 16:11.220
So this may end up with a slower process for the test.

16:11.220 --> 16:17.820
And also as a developer we wouldn't be having a clear understanding about which components or modules

16:17.820 --> 16:25.410
are necessary in our tests, so it is better to import only the necessary components and modules.

16:25.410 --> 16:29.820
So just removing that thing and incrementing this part.

16:30.120 --> 16:34.050
So let's save this.

16:36.580 --> 16:42.010
And the tests are passing and the console is clear.
