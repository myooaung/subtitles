WEBVTT

00:03.360 --> 00:08.490
Now let's add the success cases for the authentication request.

00:08.970 --> 00:17.520
The first success case requirement is let's redirect from login page to home page after the authentication

00:17.520 --> 00:18.960
is successful.

00:19.380 --> 00:26.220
We will add a test for this one, but since the test contains multiple pages assertion, let's go with

00:26.220 --> 00:27.300
the app component.

00:27.300 --> 00:31.050
So opening the app component aspects.

00:31.680 --> 00:36.320
Now so far we have this routing described look.

00:36.660 --> 00:42.060
But now I'm going to add a new one and it's going to be right here.

00:42.300 --> 00:45.840
After the routing, let's add another one.

00:45.840 --> 00:49.920
And this is for the login cases, logging success cases.

00:51.860 --> 00:56.480
Now in this test it navigates.

00:57.780 --> 01:05.880
To home after successful login and now we are going to fill the form.

01:06.120 --> 01:10.170
So we will have multiple tests in this describe.

01:10.530 --> 01:17.880
So let's have a common setup function just like we have here in the login.

01:17.880 --> 01:20.460
We were calling the setup form to fill the form.

01:20.460 --> 01:28.500
So I'm just copying this part and also taking the variables because in the setup we have those variables.

01:28.890 --> 01:30.750
So just pasting here.

01:31.050 --> 01:37.950
So this is the setup form function, it is filling the form with this credentials like the user one

01:37.950 --> 01:42.600
mail count password and it's querying the the elements.

01:42.690 --> 01:52.800
Now we are going to use this one, but first make sure this is async and this is having the routing

01:52.800 --> 01:53.280
library.

01:53.280 --> 01:58.500
So we are going to start, start navigation from the login page.

01:58.500 --> 02:04.350
And so far in the previous test in the routing ones, we were calling this router with the pad.

02:04.350 --> 02:12.690
So just copying this line and pasting to this test and the path initially will be logging, then we

02:12.690 --> 02:15.780
are calling setup form.

02:16.110 --> 02:21.840
So this is filling the input in that page.

02:22.910 --> 02:27.870
But before this one we must be calling fixture detect changes.

02:28.680 --> 02:33.810
We missed that part like we were doing in the previous test as well.

02:33.810 --> 02:37.320
So after navigation completes, let's make sure the UI is updated.

02:37.320 --> 02:38.850
So we do that here.

02:39.150 --> 02:42.210
Then we are calling the setup form, filling the form.

02:42.210 --> 02:44.370
Then we are going to click to the button.

02:45.480 --> 02:48.270
So this is going to be making the HTTP request.

02:48.390 --> 02:52.560
Then we have a reference for the HTTP testing controller.

02:53.310 --> 03:07.140
Let's, let's have a request here to be testing controller and let's capture all the requests and let's

03:07.140 --> 03:08.400
return success.

03:09.630 --> 03:14.850
And the success response is basically just empty object at the moment.

03:15.240 --> 03:20.370
Then we are going to call the fixture detect changes.

03:22.230 --> 03:24.120
To update the UI.

03:24.360 --> 03:31.260
Now we are going to check the visibility of the home page and we are using the the test ID.

03:31.590 --> 03:41.400
Let's find one of those here like this one, just copying this and pasting here.

03:41.940 --> 03:43.980
So we are going to check for.

03:45.050 --> 03:47.810
Home page to be visible.

03:47.810 --> 03:50.540
This is the test idea for home page.

03:50.540 --> 03:51.320
Home component.

03:51.320 --> 03:53.090
Here we have this home page.

03:53.540 --> 03:54.590
So we are.

03:55.940 --> 03:58.220
Checking that one to be visible.

03:58.220 --> 03:59.240
Saving this.

04:03.540 --> 04:07.710
The test is failing because we don't have the implementation at the moment.

04:08.190 --> 04:11.370
Here in the logging component, it's open.

04:11.370 --> 04:14.370
The logging component is logging components.

04:14.490 --> 04:23.730
We will be having the programmatic navigation and previously we used that in user list.

04:24.870 --> 04:27.960
We have this navigate function.

04:27.960 --> 04:32.760
We were calling this navigate from the list items and we were doing the navigation like this and we

04:32.760 --> 04:34.350
will do the same thing basically.

04:34.350 --> 04:39.750
So we need this router in the logging component.

04:39.750 --> 04:41.430
Let's have the router.

04:44.530 --> 04:54.520
And then right here, this is the login event and so far we didn't deal with the success case, but

04:54.520 --> 04:55.540
now we will.

04:55.930 --> 05:04.390
So after we receive success response to this authenticate request, we will call this router navigate

05:04.510 --> 05:06.580
and we will navigate to.

05:08.410 --> 05:09.160
Root.

05:09.610 --> 05:10.540
Root URL.

05:10.570 --> 05:11.500
Homepage.

05:12.280 --> 05:14.470
So let's save this one.

05:17.640 --> 05:22.200
Now we have a couple of failures and if we check the spec list.

05:23.650 --> 05:25.990
Like the look and taste is failing.

05:26.110 --> 05:27.160
We will get to it.

05:27.170 --> 05:30.220
But now the logging component is are broken.

05:30.340 --> 05:36.040
And that's because we are having a new dependency right here.

05:36.040 --> 05:44.800
We are using router, but in logging components back to us, we didn't import the router module, so

05:44.800 --> 05:45.940
let's import.

05:47.770 --> 05:50.080
Router testing module.

05:51.360 --> 05:53.580
Router testing module.

05:55.590 --> 05:57.480
And let's save this one.

06:00.080 --> 06:06.770
Now the components are passing, but our test for the navigation is still failing.

06:07.040 --> 06:09.190
Let's test it on browser.

06:09.200 --> 06:13.700
So here in the browser, let's fill the form with a valid user.

06:14.090 --> 06:17.010
But first, I would like to highlight this part.

06:17.030 --> 06:21.720
Here in the homepage, we are listing the user's user one user to user two.

06:21.740 --> 06:23.690
Let's log in with the user one.

06:24.080 --> 06:29.270
So filling the form with user one at mail com.

06:29.270 --> 06:32.390
And the password for these users are like this.

06:32.390 --> 06:34.700
I'm typing right here to make it visible.

06:34.880 --> 06:36.590
Pass word.

06:36.710 --> 06:41.210
So filling the form with this password.

06:41.240 --> 06:46.110
Let's make sure there is no space after the column and filling the form.

06:46.130 --> 06:54.140
Now clicking the login and here we see that the page is navigated to home and basically navigation is

06:54.140 --> 06:54.740
successful.

06:54.740 --> 07:02.060
And if we check the network logs here, here we have this authentication request going and receiving

07:02.090 --> 07:02.690
200.

07:02.690 --> 07:03.350
Okay?

07:03.350 --> 07:06.830
And the payload is like this user one and password.

07:06.830 --> 07:13.940
And as a response we are receiving success and users information like the user's ID and username later

07:13.940 --> 07:15.560
we will use those information.

07:15.560 --> 07:22.310
So we have verified this is working on browser but it is failing in the test.

07:22.730 --> 07:24.680
We are going to fix that part.

07:24.680 --> 07:27.940
But I also would like to highlight this part.

07:27.950 --> 07:37.310
Now in this list we are not seeing the user one because now the user is authenticated and when the authentication

07:37.310 --> 07:45.230
is successful, back end is returning a cookie and then we use that cookie in the next requests and

07:45.230 --> 07:52.790
back is aware who the user is and then we can exclude this user from this user list.

07:53.060 --> 07:55.610
So the authentication is working.

07:55.640 --> 07:57.650
Now let's fix this test.

07:58.920 --> 08:01.890
We are seeing this problem again because of.

08:03.350 --> 08:08.190
Because of the the nature of the async things going on here.

08:08.210 --> 08:11.990
One of the workarounds we were applying was adding.

08:13.100 --> 08:16.430
The promise resolve here.

08:18.810 --> 08:19.650
Let's save it.

08:22.380 --> 08:24.030
So this is fixing the test.

08:24.030 --> 08:29.510
But again, this is not a reliable way to resolve this.

08:29.520 --> 08:34.890
Instead of having this promise, we can wrap the test with fake.

08:35.610 --> 08:36.460
Basing.

08:37.050 --> 08:38.910
We have done that before.

08:39.270 --> 08:42.690
So just rapping all test with fake async.

08:42.750 --> 08:50.400
Then here, instead of having this promise resolve, let's have this tick.

08:50.580 --> 08:58.410
So this will be running the all wasting promises and in the end the UI will be updated.

08:58.410 --> 08:59.430
Saving this one.

09:01.890 --> 09:04.410
And the tests are passing.
