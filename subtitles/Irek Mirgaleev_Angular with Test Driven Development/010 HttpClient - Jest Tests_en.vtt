WEBVTT

00:03.710 --> 00:11.660
Now we fixed the car more tests, but just tests are failing and the failing reason is the same.

00:12.200 --> 00:20.990
This dependency we are using right now is typical and is undefined from just test module, so there

00:20.990 --> 00:22.130
is no provider for it.

00:22.130 --> 00:30.740
So it's failing to inject that typical end to this component when it is trying to initialize this one.

00:31.190 --> 00:39.740
So just like fixing it in the sign up component spec test, we are going to do the similar thing in

00:39.860 --> 00:48.710
sign up component, just us and we are going to do this in the render function.

00:48.710 --> 00:58.400
So like here in the render, we are passing the component, but it's similar to the the one in the sign

00:58.400 --> 01:00.290
up component spec.

01:00.290 --> 01:01.820
It's right here.

01:02.630 --> 01:12.470
We can also add additional imports or declarations like we do here in this render as well.

01:12.530 --> 01:15.080
So here is the second parameter.

01:15.080 --> 01:22.760
We can pass an object and in this object we have the option for the imports and in the imports we are

01:22.760 --> 01:28.310
importing HTP client testing module.

01:30.170 --> 01:34.130
And we need to repeat this in each of these tests.

01:34.190 --> 01:38.300
Instead of repeating, we can have a function.

01:40.190 --> 01:42.230
Like, let's say, set up.

01:46.070 --> 01:49.760
And we can do that in this setup.

01:50.740 --> 01:59.170
And this is async function because we are using a weight and here we are going to await setup and we

01:59.170 --> 02:00.790
will do the same thing.

02:00.820 --> 02:07.150
In the other renders render lines like in vs code.

02:07.150 --> 02:12.010
We can select this matching lines with the control dx.

02:12.160 --> 02:20.350
So just hitting control D to get the matching ones and pasting it set up.

02:20.560 --> 02:21.550
Saving it.

02:23.490 --> 02:28.710
And again, the last one is failing because we are spying on the Fed.

02:28.740 --> 02:29.370
Functionality.

02:29.370 --> 02:30.030
We will fix that.

02:30.030 --> 02:35.790
But you may be asking why we didn't do this in the Carmen test.

02:36.210 --> 02:37.500
In Carmen test.

02:37.500 --> 02:44.970
We didn't need to do this because it it is already being done in this before each function.

02:44.970 --> 02:49.290
So this is running before each of the each of these tests.

02:49.680 --> 02:57.630
So like this is repeated for each test and we can do the same thing in the in this just as well.

02:57.630 --> 03:02.550
We can have a before each here and we can put this into that one.

03:02.550 --> 03:12.960
But having a setup function has its advantages and we will see that in one of the tests in future.

03:13.350 --> 03:22.440
For the car test, I will be replaced before each with a setup function and I will call that one in

03:22.440 --> 03:26.730
each of the tests and there is a use case for that one.

03:26.730 --> 03:29.910
But until that I'm not going to do that.

03:29.910 --> 03:35.160
I'm not going to refactor this part, but we will do that when it has meaning.

03:35.430 --> 03:42.150
So we have this setup function and we are calling this one in each of these tests.

03:42.150 --> 03:51.390
And let's fix the last one now, just like we did in again in this test, we will use the.

03:53.630 --> 03:55.940
The Mississippi testing controller.

03:57.230 --> 04:03.230
So just removing the SPI pasting this one.

04:03.830 --> 04:11.060
But we need to import testbed and also we need to import HTP testing controller.

04:13.270 --> 04:14.080
And.

04:15.980 --> 04:21.440
Here we have the request and request body parts.

04:23.150 --> 04:29.360
So we have the request and that's the request.

04:29.360 --> 04:33.230
But let's copy expect part as well.

04:36.160 --> 04:38.500
So like this.

04:39.070 --> 04:47.380
So we are using the same approach here because the functionality is now dependent on the HTTP client.

04:47.380 --> 04:55.180
And in test we can have this testing controller to check how it's working in the application.

04:55.180 --> 04:56.710
So let's save this one.

04:58.470 --> 05:03.420
This is failing because the order is important for this one.

05:03.870 --> 05:12.450
In in the the calmatters we did this in the first line and that was fine because before running this

05:12.450 --> 05:19.920
line, before each was running and it was creating the module, but now we are dependent onto this setup.

05:20.430 --> 05:24.360
So like we need to do this after setup.

05:24.360 --> 05:25.860
Let's save this.

05:27.470 --> 05:30.350
And here we can see the tests are passing.
