WEBVTT

00:03.160 --> 00:08.950
Now the log in functionality is completed and we are properly displaying the plugin layout.

00:08.950 --> 00:13.420
But let's also have an option for user to log out.

00:13.420 --> 00:19.870
At the moment there is no way to log out and there is no way to revert back to the layout to the login

00:19.870 --> 00:20.380
case.

00:20.380 --> 00:27.280
So let's implement this functionality and the first thing we are going to add is the visibility of the

00:27.280 --> 00:29.830
log out link on the navigation bar.

00:29.920 --> 00:35.590
So in a component spec right here in the described for the log in.

00:36.660 --> 00:40.890
We have the control for the feasibility of the my profile link.

00:41.550 --> 00:47.580
So let's copy this test because the logout is almost similar.

00:47.580 --> 00:58.320
So we are going to check logout link on our after successful login and logout link.

00:58.320 --> 01:06.780
We are querying it, but the logout link will not be an actual anchor element because because there

01:06.780 --> 01:15.450
is no navigation in it, it's going to be visibly same with the existing links like to my profile looking

01:15.450 --> 01:16.530
or sign up.

01:16.530 --> 01:19.890
But it's not going to be anchor, it's going to be a span.

01:20.760 --> 01:29.700
And again, we will use the title here and the title will be Logout Saving this one.

01:35.930 --> 01:37.820
So this is failing.

01:38.120 --> 01:44.210
Let's add the let's add the look out span here, formatting the document first.

01:44.210 --> 01:49.880
So I'm just copying the anchor for the my profile and pasting after that.

01:49.910 --> 02:01.490
Now this is going to be span and closing the tag and span does not have the root link and the title

02:01.490 --> 02:04.820
and the text content will be log out.

02:05.360 --> 02:07.400
Let's also format this one more time.

02:07.640 --> 02:13.190
So this is going to be visible when user is logged in saving it.

02:18.520 --> 02:19.990
And the tests are passing.

02:19.990 --> 02:24.930
And here in the browser we have the lookout link on our bar.

02:24.940 --> 02:26.290
But there is a difference.

02:26.290 --> 02:35.620
Like if I hover on the my profile link, there is this pointer cursor and for the lookout we don't have

02:36.070 --> 02:43.540
let's also change the cursor for the locality as well so that user would feel this is something clickable.

02:43.540 --> 02:51.760
So here in the app now bar component let's define inline style here and this is going to be for.

02:52.520 --> 03:03.260
It's fun and it's going to be having your cursor set to pointer saving it.

03:04.560 --> 03:10.230
And now if I over on this one, it is showing the pointer.

03:10.860 --> 03:13.350
Now let's add a functionality to this one.

03:13.470 --> 03:19.980
So whenever we click to the logout, we will go back to the not logged in layout, which means we will

03:19.980 --> 03:22.570
see sign up and login links.

03:22.590 --> 03:28.780
So adding that test and adding test to to the end of this describe look.

03:28.800 --> 03:38.520
So in this test it displays login and sign up after clicking look out.

03:39.960 --> 03:46.110
So we are going to be calling setup form.

03:47.550 --> 03:49.410
Sit up, Logan.

03:51.090 --> 03:53.580
So this is here.

03:53.700 --> 03:54.120
Sit up.

03:54.120 --> 03:57.690
Logan is opening the login page.

03:57.720 --> 04:03.060
Filling the form and clicking to the button.

04:03.690 --> 04:11.650
And then in the end, it's redirected to the homepage and the UI will be reflecting the loading layout.

04:11.760 --> 04:18.710
So at this point we are going to get the logout link and we are going to click through it.

04:18.720 --> 04:23.910
So let's have Logout Link and we get it by.

04:24.210 --> 04:29.460
I'm just going to use this query here in the previous test.

04:29.670 --> 04:37.170
So we are going to query span having title of log out.

04:37.320 --> 04:45.000
Now we are going to click to this one logout link and click and the TypeScript compiler is showing us

04:45.000 --> 04:50.130
error saying this element does not have the click property.

04:51.660 --> 04:58.800
Let's cast it to HTML span element, which is the actual component.

04:58.800 --> 05:04.590
So now we have the click for this element and that error is gone.

05:06.480 --> 05:13.560
Then after clicking the logout we wait for fixture detect changes.

05:13.590 --> 05:14.970
UI will be updated.

05:15.060 --> 05:21.870
Now we can query the the elements, the links for the login and sign up.

05:22.440 --> 05:25.680
Again, I will use the queries.

05:27.260 --> 05:32.900
Here in one of the previous tests, we queried those.

05:32.900 --> 05:34.370
So just copying them.

05:35.330 --> 05:41.780
So taking the login link and sign up link, but this time they will be visible.

05:41.780 --> 05:44.050
So this is going to be treated.

05:45.050 --> 05:47.690
And same for the sign up link.

05:49.320 --> 05:55.830
So we are clicking the logo link and in the end we expect the signup and logging link to be visible

05:56.220 --> 05:57.180
saving this one.

06:03.690 --> 06:05.220
And this is failing.

06:05.730 --> 06:07.140
Let's fix it.

06:07.170 --> 06:12.090
Now we are going to click to this spam.

06:12.420 --> 06:16.410
And when we click it, let's call the lookout function in.

06:16.980 --> 06:20.910
In this component, let's add the function here.

06:23.200 --> 06:31.750
And basically all local and state is dependant onto the logged in user object here in the authentication

06:31.750 --> 06:32.080
service.

06:32.080 --> 06:41.170
So we need to update this one and let's delegate the the user object reset functionality to authentication

06:41.170 --> 06:41.530
service.

06:41.530 --> 06:47.470
So we will call authentication service and let's go look at function of it.

06:47.740 --> 06:49.480
There is no this function yet.

06:49.480 --> 06:50.500
Let's create it.

06:51.940 --> 07:01.000
So we will have a look out here and it's going to be updating this logged in user with the object like

07:01.000 --> 07:01.780
this one.

07:03.340 --> 07:10.120
So it's going to be updating log the user with a not logged in user object.

07:11.210 --> 07:13.400
So this is the whole flow.

07:13.430 --> 07:15.500
Let's save these changes.

07:21.420 --> 07:25.170
And the tests are passing, let's test it on browser.

07:25.170 --> 07:32.130
So we are logged in and let's click the log out and here we are seeing sign up and logging.

07:33.320 --> 07:40.640
But if we reload the application here, we are seeing the logged in layout once again and that's because

07:40.760 --> 07:47.870
the logged in state is kept in the local storage and when application is reloaded, the authentication

07:47.870 --> 07:54.170
service is initialized with the data coming from local storage and that is containing the log state.

07:54.170 --> 08:02.300
Therefore UI is showing the log in layout, so let's make sure we clear the storage after the user logs

08:02.300 --> 08:02.480
out.

08:02.480 --> 08:05.360
So adding it test for it.

08:05.360 --> 08:14.780
So in this one it clears storage after user logs out.

08:17.870 --> 08:20.300
So repeating the steps here.

08:23.490 --> 08:26.640
Until the UI is updated.

08:26.670 --> 08:29.160
Now we are going to check the local stories here.

08:29.670 --> 08:41.820
So let's get the value as state and local storage gets item both the authentication state is stored

08:41.820 --> 08:42.890
in this item.

08:42.900 --> 08:49.890
So we are expecting this state to be not saving this one.

08:54.530 --> 08:59.750
And this is failing because we are seeing this data in the local storage at the moment.

08:59.780 --> 09:01.580
Now let's fix this.

09:01.730 --> 09:09.620
So here in the authentication service, that's also clear the storage after we update the logged in

09:09.620 --> 09:09.860
user.

09:09.860 --> 09:15.500
So here we will call local storage remove item and we will remove the old.

09:16.250 --> 09:18.980
So let's save this one.

09:24.600 --> 09:28.500
And the tests are passing and let's test it on browser.

09:28.500 --> 09:35.700
So here clicking log out and reloading the application and we no longer see the logged in layout because

09:35.700 --> 09:37.950
the storage is clear now.

09:38.370 --> 09:40.650
But we have one more issue here.

09:40.650 --> 09:46.260
So here in this test we are not seeing the user one which was the logged in user.

09:46.440 --> 09:53.640
And like if we go back and forth in this page, the user one is excluded from the user list.

09:53.640 --> 10:00.840
And that's because when we are logging in, the backend is setting a cookie for us and that cookie is

10:00.840 --> 10:03.120
being sent in each request going to backend.

10:03.120 --> 10:09.180
We cannot clear that cookie on client site, it's an htp only cookie and the only way to clear it,

10:09.300 --> 10:13.770
we need to ask backend to remove that cookie.

10:13.770 --> 10:18.540
So we are going to send the request to backend to look out us.

10:18.900 --> 10:20.730
So let's add the test now.

10:22.230 --> 10:28.980
So in this test it sends log out request to back and

10:32.340 --> 10:34.860
again repeating the steps.

10:35.980 --> 10:39.250
We are going to click to to look out.

10:39.610 --> 10:47.200
But in this one, we are going to check the the HTTP request going to the back end.

10:47.200 --> 10:51.220
And for that, I will use this one.

10:51.790 --> 10:54.730
This is copied from the setup login.

10:56.020 --> 11:01.500
So after clicking logout, we are going to send the request to this endpoint.

11:01.510 --> 11:04.540
Let's make sure we specify the URL here.

11:04.540 --> 11:08.250
It is going to be API one zero log out.

11:09.220 --> 11:14.050
By the way, this is doing the assertion part like if we don't receive a request to this end point,

11:14.050 --> 11:15.610
it is failing.

11:15.610 --> 11:18.190
But let's have an assertion by checking.

11:18.340 --> 11:25.990
We are expecting this request not to be not saving this one.

11:30.880 --> 11:32.530
So this is failing.

11:33.490 --> 11:40.030
Now we are going to send an API request to Beacon and so far we gathered all the API requests under

11:40.030 --> 11:41.320
this user service.

11:41.320 --> 11:42.820
So let's add one more.

11:43.420 --> 11:45.190
Let's have a look out.

11:46.000 --> 11:49.990
And this is going to be returning this HTP client.

11:50.020 --> 11:59.020
Again, this is a post request and the URL is API one zero logout.

11:59.680 --> 12:03.490
And since this is a post, it is looking for an object.

12:04.240 --> 12:07.540
But we will pass an empty object for this one.

12:07.930 --> 12:13.060
So we have this function now and we are going to call it in number.

12:13.570 --> 12:18.940
So we are calling this authentication service logout, but also we are going to call this user service

12:18.940 --> 12:21.430
lookout as well to make the API call.

12:21.430 --> 12:25.690
So let's inject the user service here.

12:27.340 --> 12:35.620
User service, by the way, let's fix this import just is failing with this import.

12:35.890 --> 12:38.950
So let's make sure this is a relative import like this.

12:39.040 --> 12:45.460
So we are going to directory up and going on under the core and taking the user service.

12:46.450 --> 12:53.930
So here we will be calling authentication service logout and also we will be calling user service log

12:54.010 --> 12:54.550
out.

12:55.180 --> 13:04.570
And since this is an observable, we need to subscribe to it so that request can be sent and let's save

13:04.570 --> 13:05.560
these changes.

13:11.040 --> 13:13.080
And the tests are passing.

13:13.530 --> 13:15.990
Let's test it on browser.

13:16.140 --> 13:18.570
And let's also open the developer tools.

13:18.780 --> 13:21.480
Just switching to the network tab here.

13:22.350 --> 13:24.300
Let's clear this output.

13:24.330 --> 13:33.120
Now we are going to log in and let's log in with user to add password.

13:33.780 --> 13:39.510
So we are sending authentication request and receiving the 200.

13:39.510 --> 13:39.780
Okay.

13:39.780 --> 13:41.490
With the user data.

13:42.000 --> 13:47.280
And here in the response, it is setting a cookie like this.

13:47.280 --> 13:55.260
So this is an IP only cookie and this cookie is added to the to the request going to server like this

13:55.260 --> 13:55.700
one.

13:55.710 --> 13:58.050
This is the request and therefore getting users.

13:58.380 --> 14:03.390
And here we have the cookie added to the outgoing request.

14:03.480 --> 14:14.010
And in the response we don't see the logged in user which is user to now I'm clicking logout but before

14:14.010 --> 14:15.470
let's close this part.

14:15.480 --> 14:22.230
So clicking logout here we have sent the request to backend API one zero log out.

14:22.230 --> 14:24.240
We are receiving 200.

14:24.240 --> 14:24.540
Okay.

14:24.540 --> 14:25.680
With this message.

14:26.220 --> 14:35.820
Now if I go back and forth, by the way, this is user one, user two was missing three four.

14:35.850 --> 14:41.820
Now when we go to next page, if we would have been logged in, then on the next page, the first user

14:41.820 --> 14:43.890
on the next page would be user five.

14:43.890 --> 14:46.200
But let's see what's going to happen.

14:46.590 --> 14:52.620
And here we are seeing user four in this list because now the request is not containing the logged in

14:52.620 --> 14:53.270
user.

14:53.280 --> 15:00.990
Therefore all users are listed and based on this pagination logic for the second page user four is on

15:00.990 --> 15:02.340
the first spot.

15:02.880 --> 15:06.360
So we have completed the logout implementation.
