WEBVTT

00:03.170 --> 00:05.870
Now let's add the account activation tests.

00:06.140 --> 00:12.380
So at the moment, our tests are failing for the account activation because the component is dependent

00:12.380 --> 00:14.630
on this activated root.

00:14.630 --> 00:16.070
But in.

00:17.580 --> 00:18.600
In spec.

00:18.900 --> 00:20.590
We have nothing about it.

00:20.610 --> 00:26.940
It's coming from the router module, but here we are not importing the router module or we are not doing

00:26.940 --> 00:27.930
anything about it.

00:28.350 --> 00:30.240
So we are going to fix that part.

00:30.240 --> 00:36.210
But first, let's add our test, removing the default test.

00:36.810 --> 00:44.820
And our first test is it sends account activation request.

00:46.650 --> 00:53.250
So we are rendering the component and we are expecting a request to be going to backend.

00:53.580 --> 00:58.500
And for this one we need to import HTP client testing module.

00:58.500 --> 01:03.540
So let's update this configure test module part.

01:03.540 --> 01:10.440
So we are going to import the CTP client testing module.

01:10.980 --> 01:15.960
It's coming from angular common HTP testing module.

01:16.260 --> 01:20.880
Then we are going to interact with the HTP testing controller.

01:20.880 --> 01:26.040
So let's make sure we are injecting that one as well.

01:26.040 --> 01:29.940
We did that in the sign up component spec.

01:30.840 --> 01:36.870
Here we have the ECB testing controller and we inject it like this.

01:36.870 --> 01:42.330
So just copying this part and doing that right here.

01:42.930 --> 01:52.830
So we have first let's import this testing controller and we will have the variable with testing controller.

01:52.830 --> 01:54.480
Let's have that one here.

01:57.680 --> 02:03.890
In this one, we are going to send a request and that request is going to be including the token in

02:03.890 --> 02:04.610
the URL.

02:04.610 --> 02:09.530
So we we must be passing that token to the component.

02:09.530 --> 02:19.970
So we must be handling this subscription for the activated root params part and we can achieve that

02:20.330 --> 02:22.820
in the test like this.

02:23.720 --> 02:24.530
So.

02:25.200 --> 02:31.830
We have declarations, we have imports for the conflict testing module and we also have providers.

02:32.220 --> 02:34.590
And in this one we can.

02:35.950 --> 02:45.820
This is an array and there is objects in this array and the provider object is like this.

02:45.820 --> 02:50.830
We are going to provide activated root.

02:51.760 --> 03:02.860
So instead of the actual activate throughout, we are providing our own version here and for the the

03:02.860 --> 03:04.480
params right here.

03:05.480 --> 03:14.360
We are telling use value and for the params.

03:16.030 --> 03:19.960
Here, we will have our own observable.

03:19.990 --> 03:24.470
At the moment we don't have it, but we will create it right here.

03:24.490 --> 03:29.740
Let's say here in the B for each, let's create that observable.

03:30.510 --> 03:32.940
So we have this, let's say, observable.

03:34.590 --> 03:36.960
This is new observable.

03:38.160 --> 03:40.860
And as an object it's going to be.

03:41.190 --> 03:46.590
If you remember the the params object, this one was like this.

03:47.250 --> 03:52.050
There is ID and it has corresponding value.

03:52.050 --> 03:53.850
So this is an object.

03:53.850 --> 03:58.740
Having ID and id has the string type of value.

03:58.920 --> 04:02.790
Let's import the observable first from the JS.

04:03.730 --> 04:12.310
And in a constructor right here, we have the function for getting the subscriber.

04:13.090 --> 04:18.790
So let's have the variable of subscriber here at subscriber.

04:20.350 --> 04:24.160
And initially it's just not so to.

04:25.070 --> 04:31.970
To tell that his compiler not to complain about it adding exclamation mark here and this is subscriber

04:31.970 --> 04:32.840
type of.

04:33.750 --> 04:35.940
Object and.

04:36.890 --> 04:40.940
Again, this is generic and the type is going to be this one.

04:40.940 --> 04:49.550
It's going to be taking a payload with this type, having ID and corresponding instead of defining types

04:49.550 --> 04:49.970
like this.

04:49.970 --> 04:51.680
Let's do it here.

04:52.100 --> 04:56.420
Let's say route params.

04:57.930 --> 05:00.870
And it's having the ID string.

05:01.470 --> 05:11.430
So this is subscribing to params and the observable is basically publishing the root params.

05:11.430 --> 05:17.340
So we are going to take this sub and assign it to the subscriber here.

05:17.910 --> 05:19.830
Is up like this.

05:21.810 --> 05:30.270
So before each of these tests we have the observable this observable is taking the subscriber and assigning

05:30.270 --> 05:31.860
to the variable here.

05:31.860 --> 05:40.920
And this observable is going to be used for the activated root params property.

05:41.100 --> 05:49.950
So activated root is this one root and the params is the observable we are overriding in the test.

05:50.790 --> 05:54.120
So we have our setup ready.

05:54.120 --> 05:56.400
So let's go into the test.

05:56.400 --> 05:59.070
So it's going to be sending account activation request.

05:59.070 --> 06:00.810
So initially this.

06:01.590 --> 06:05.940
This page will be open with the specific URL.

06:05.940 --> 06:15.420
So to mimic that behavior, all we need to do is just calling subscriber with the next and is a value

06:15.570 --> 06:16.980
we can pass.

06:16.980 --> 06:20.550
Something like this ID is going to be, let's say, 1 to 3.

06:20.850 --> 06:21.600
So.

06:23.050 --> 06:28.240
This is the part right here we are calling the subscription with the value.

06:28.240 --> 06:31.030
So we will be receiving this 1 to 3 here.

06:31.330 --> 06:40.120
Then we are going to make an STP because to back end and to to handle that request in the test, we

06:40.120 --> 06:46.180
are going to be testing controller and we are expecting a request to be going to this one.

06:46.180 --> 06:58.060
We can go with the expect one or we can go with the match and the path will be API one zero users token

06:58.060 --> 07:03.220
and the token part which is 1 to 3.

07:03.640 --> 07:08.200
So this is not limiting the request count.

07:08.200 --> 07:10.180
In the end we can use this one.

07:10.180 --> 07:14.260
Let's say this is the requests, this can be multiple requests.

07:14.260 --> 07:25.390
So we are just going to do the assertion based on like this expect requests and it has length property

07:25.930 --> 07:28.330
and it's going to be one.

07:28.330 --> 07:35.470
So we expect one request to be sent to this endpoint.

07:36.070 --> 07:38.140
So our test is ready.

07:38.140 --> 07:39.730
Let's save this one.

07:41.900 --> 07:43.670
So this test is failing.

07:43.670 --> 07:49.730
But the fail reason is instead of one, we received zero for this.

07:49.730 --> 07:51.460
There is no request at the moment.

07:51.470 --> 07:59.810
The error we see previously is gone because now we are providing the activated route and the previous

07:59.810 --> 08:03.170
error was about the missing that part.

08:03.650 --> 08:05.930
So let's fix this one.

08:07.190 --> 08:15.570
We are going to make an epic because and let's let's do that in user service again.

08:15.590 --> 08:19.070
Let's have a function here like activate.

08:19.490 --> 08:23.390
And let's take the token, which is going to be a string.

08:25.400 --> 08:31.280
And we are going to this strategic alliance and the request will be posed.

08:32.300 --> 08:41.660
And the path will be API one zero users token and adding.

08:42.650 --> 08:47.820
So token to the URL and there's a payload.

08:48.330 --> 08:51.960
Let's go with an empty request, buddy.

08:52.110 --> 08:54.900
So we have the the activate function.

08:54.900 --> 08:58.170
Now we are going to use it in activate component.

08:58.170 --> 09:01.350
So let's inject that one as well.

09:01.380 --> 09:08.730
Private user service type of user service.

09:09.310 --> 09:14.140
So here now we don't need to console this one.

09:14.140 --> 09:16.630
So we are going to call this user service.

09:17.600 --> 09:25.700
Activate and we can pass the ID coming from this forum so we can take the ID like this.

09:26.360 --> 09:32.420
This is not working because the type of params does not have this property.

09:32.690 --> 09:34.910
So we can go like this.

09:35.570 --> 09:37.280
Params id.

09:38.390 --> 09:40.850
So this is going to be making the API call.

09:40.850 --> 09:44.840
But to actually make the API call, we need to call the subscriber as well.

09:44.870 --> 09:49.130
Otherwise it's not triggering the DB request.

09:49.130 --> 09:53.180
So at the moment we are not interested in the response.

09:53.180 --> 09:57.350
So just passing an empty function for the subscription.

09:57.710 --> 10:00.020
So let's save this one.

10:01.630 --> 10:05.530
It saved the changes and I'm withholding the test.

10:05.710 --> 10:13.030
Sometimes I had to manually reload the tests, so I reloaded and the test run.

10:13.030 --> 10:15.190
And here we see the tests are passing.

10:16.410 --> 10:19.080
Now let's add our next test.

10:19.080 --> 10:27.260
So we are making the API request now, but let's show a success message to a user.

10:27.270 --> 10:40.410
So adding a new test, it displays activation success message when token is valid.

10:42.000 --> 10:49.650
So we are going to let's copy from previous test and paste in here.

10:50.040 --> 10:55.860
Now instead of dealing with the multiple requests, let's make sure this is going to be expect one so

10:55.860 --> 11:04.140
we receive it, this one request and it's going to be request and we are going to return a success response

11:04.140 --> 11:08.190
with just calling flash with empty object.

11:08.940 --> 11:13.950
Then this is going to be changing the UI.

11:13.950 --> 11:19.560
So make sure that let's make sure we call the fixture detect changes here.

11:20.370 --> 11:24.300
Then we are going to look for a message.

11:25.080 --> 11:30.420
But for displaying this message, let's use our third component.

11:30.570 --> 11:38.400
We have used this one previously in the signup component right here.

11:38.640 --> 11:40.830
This is for the success signup case.

11:40.830 --> 11:45.420
And we were using alert to display this message to user.

11:45.420 --> 11:47.310
So we will do the same thing.

11:47.700 --> 11:52.020
And the let's open the third component is HTML.

11:52.560 --> 11:58.350
And for querying this element, let's go with the CSS selectors here.

11:58.800 --> 12:01.920
So query it like this.

12:02.250 --> 12:10.290
We are going to let's get the alert component and we get it by fixture, native element, query selector

12:10.500 --> 12:13.260
and we are going to get the alert.

12:13.740 --> 12:25.050
And in the end we expect this alert text content to contain account is activated.

12:25.620 --> 12:27.480
So this is the test.

12:27.600 --> 12:28.830
Let's save this one.

12:30.020 --> 12:36.030
Now this one is failing because we are not showing this component.

12:36.050 --> 12:38.120
There is no alert component at the moment.

12:38.150 --> 12:42.200
Now let's fix this in activate component.

12:42.200 --> 12:47.610
We are going to use the alert component here and we are just going to remove this each one.

12:47.860 --> 12:56.570
Instead, we are going to have app alert and the text is going to be this one account is activated.

12:58.130 --> 12:59.840
So let's say this one.

13:01.830 --> 13:04.200
And as test is still failing.

13:04.260 --> 13:08.130
But if we checked the browser, let's go to activate page.

13:08.160 --> 13:12.030
Here we are seeing this account is activated message visible.

13:12.210 --> 13:15.810
The test is failing because the alert.

13:16.640 --> 13:21.530
Component is not declared here in the app app module.

13:22.040 --> 13:27.110
The component is coming from the shared module and therefore it is declared in the application.

13:27.110 --> 13:35.390
But in the test we are just testing this component and we only have this dependent module imported here.

13:35.390 --> 13:39.290
But we didn't declare the the used other components.

13:39.290 --> 13:46.640
So let's add the alert component here and let's switch to the test console again.

13:46.640 --> 13:47.750
Let's save this one.

13:49.530 --> 13:51.450
Now the tests are passing.

13:52.110 --> 13:56.820
So we have the success case and let's add the fail condition.

13:57.270 --> 14:04.770
So just copying this test, it displays activation, success, message and pasting after that.

14:04.800 --> 14:11.970
Now it displays activation failure message when token is invalid.

14:11.970 --> 14:15.840
And let's say the token will be like this four or five six.

14:15.840 --> 14:25.410
We are not really making the API request here, but let's have like different values because like one,

14:25.410 --> 14:32.220
two, three is reflecting the success case and let's say the four, five, six is reflecting the failed

14:32.220 --> 14:32.460
case.

14:32.460 --> 14:37.170
So we are going to have the request to this endpoint four, five, six.

14:37.170 --> 14:47.010
And this time we are going to not just return an empty object, but we are going to also set the status,

14:48.570 --> 14:50.430
which is going to be 400.

14:51.730 --> 14:55.840
And the status text is bad request.

14:55.840 --> 15:01.540
So this is an error response and generally for the validation error.

15:01.540 --> 15:06.310
So like the tokens, invalid cases can be considered like validation.

15:06.310 --> 15:08.710
So returning 400.

15:09.740 --> 15:16.280
And again, we are querying the alert component, and this time we are going to see the message.

15:17.270 --> 15:19.340
Let's set the message.

15:19.790 --> 15:20.960
Activation.

15:21.140 --> 15:22.400
Failure.

15:23.060 --> 15:24.620
So saving this one.

15:26.530 --> 15:31.180
And this is failing in the space activation failure message when token is invalid.

15:31.750 --> 15:33.760
And let's fix this one.

15:35.080 --> 15:42.280
Currently we are just displaying the success message without waiting the API response.

15:43.260 --> 15:51.030
But since we have two cases at the moment, either success or fail, we must be displaying these alerts

15:51.390 --> 15:53.490
dependent on the response we are receiving.

15:53.490 --> 15:57.330
So an activate component right here.

15:57.330 --> 16:04.170
At the moment we are just having the subscription, but we are not handling the response.

16:04.170 --> 16:08.460
So we are going to handle the the success and error cases.

16:08.460 --> 16:15.450
And for those, let's pass the subscribe object and we will have this next.

16:17.220 --> 16:27.180
And in this case, we are going to update property in this class which is going to be reflecting the

16:27.180 --> 16:34.080
activation success and for the error, we are going to

16:36.630 --> 16:49.320
update the property to reflect the error and let's say we will have this activation status property

16:50.280 --> 17:02.010
which will not be null and it can have the values either success or failed.

17:03.090 --> 17:12.600
So we can use same property and in the next we can say this activation status is success and in error

17:12.600 --> 17:17.130
case this activation status will be failed.

17:18.000 --> 17:24.000
And then we can use this one in the template.

17:24.960 --> 17:27.270
Let's open the activate component template.

17:29.560 --> 17:32.710
And basically we will have two alerts.

17:32.740 --> 17:41.380
The other one is having the text for activation failure and the success case will be visible.

17:41.380 --> 17:43.460
Then like we will have engine.

17:43.560 --> 17:59.350
If and when activation status is equal to success, then we will display the account is activated.

17:59.530 --> 18:03.160
But if it is fail.

18:05.960 --> 18:11.120
We are going to display this activation failure message.

18:11.420 --> 18:16.490
So let's say these changes again, I need to reload the.

18:17.270 --> 18:21.200
Browser and tests are passing.

18:21.840 --> 18:23.940
And if we open browser.

18:24.970 --> 18:26.570
The actual request is going to be.

18:26.920 --> 18:33.430
And at the moment, like we are just going to activate one or two and one or two is not really a valid

18:33.430 --> 18:33.790
token.

18:33.790 --> 18:41.920
So Hpakant is returning this activation failure, but the current app load component is not having anything

18:41.920 --> 18:46.270
about the styling in terms of like success or fail.

18:46.960 --> 18:52.420
We only have one type and that's open the third component.

18:52.840 --> 18:55.030
It is by default success.

18:55.240 --> 19:05.410
But if we check the alert component in bootstrap, it has other styles like primary, secondary success,

19:05.410 --> 19:08.250
danger, warning for light.

19:08.260 --> 19:12.410
So like this danger fits to the error cases.

19:12.520 --> 19:16.120
So let's update the alert component.

19:18.290 --> 19:28.010
So here opening the alert component to us and let's make sure we pass a property to this one.

19:28.320 --> 19:37.490
And previously we did that in the button so we were passing this inputs disabled and API progress.

19:37.490 --> 19:48.080
So for the alert we are going to have input and this is going to be let's say the input will be type

19:48.530 --> 19:54.950
and the the type will have values like success.

19:56.640 --> 19:57.270
A danger.

19:57.270 --> 19:59.640
These are the bootstrap names, by the way.

19:59.820 --> 20:02.130
And let's also add the info as well.

20:02.520 --> 20:05.730
And initially, let's say this is going to be successful.

20:05.730 --> 20:09.780
So it has default value if we don't set for this one.

20:10.350 --> 20:22.830
And then the alert component, the class name right here will be having the type attribute used here.

20:23.520 --> 20:31.290
And one of the way we can do this is let's again open the third component and let's have a function

20:31.560 --> 20:33.510
get function, alert class.

20:34.890 --> 20:39.330
So let's have class list here.

20:40.290 --> 20:43.350
Initially, this is going to be continuing on the alert.

20:43.860 --> 20:47.850
Then we are going to push.

20:50.800 --> 21:02.380
To this array another value and that value is going to be like this alert, dash and type.

21:02.380 --> 21:10.660
So alert success this time alert danger, alert info and like that.

21:10.660 --> 21:19.990
And as a result it's going to be returning class list will be just returning a string joined with the

21:19.990 --> 21:24.760
space and here in the alert component let's have.

21:25.800 --> 21:28.410
The binding.

21:30.420 --> 21:36.870
So this class will be taking its value from this third class, saving these changes.

21:37.350 --> 21:46.770
At the moment we are not setting property in the activity component, so by default it's a success and

21:46.770 --> 21:50.880
all we need to do is just for this activation failure case.

21:50.880 --> 21:54.570
Let's say the type ill will be fail.

21:57.290 --> 21:58.810
Not fail, but danger.

21:59.530 --> 22:00.430
Danger.

22:00.590 --> 22:02.780
Let's save this one.

22:03.530 --> 22:08.000
Now, the activation failure alert is having this red color.

22:08.330 --> 22:10.490
So this looks better.

22:11.060 --> 22:22.910
So we handled the API request part and we are displaying either success or failure messages for the

22:22.910 --> 22:24.140
account activation.
