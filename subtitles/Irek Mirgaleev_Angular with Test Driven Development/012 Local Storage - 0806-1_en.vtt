WEBVTT

00:03.340 --> 00:09.400
Now we are handling the authentication and we are updating the layout, but we have one more issue left.

00:10.060 --> 00:13.930
Let's log in with a user here.

00:14.710 --> 00:23.590
Now we are seeing this navigation bar with logged in state, but if we refresh at this point, we are

00:23.590 --> 00:25.300
back to not logged in state.

00:25.300 --> 00:32.440
So let's make sure after the application is reloaded, the login state is kept.

00:32.980 --> 00:39.310
And to achieve that, we are going to use the local storage functionality of the browsers in the test.

00:39.310 --> 00:45.190
We are not able to reload the pages, so we have to split the test into two step.

00:45.430 --> 00:54.490
The first one is after the login we are going to store the the authentication state in the storage.

00:54.610 --> 01:00.010
Then in the next one, in the next test we will initialize the local storage with the log in user state.

01:00.010 --> 01:06.710
Then we are going to render our app and in the end we expect to see my profile link to be visible in

01:06.710 --> 01:07.480
the bar.

01:07.750 --> 01:10.210
So let's add the first test.

01:12.440 --> 01:20.270
So to the EB component, Specter is adding the test and this is for storing the data in local stores.

01:20.270 --> 01:26.510
So it stores logged in state in local storage.

01:29.780 --> 01:40.160
So we are calling setup look in this is handling all the login operation like filling the login form,

01:40.160 --> 01:44.450
sending the request and then redirecting to homepage.

01:45.340 --> 01:47.890
At the moment the login is completed.

01:47.890 --> 01:53.200
Therefore we can check the local storage and we can access to local storage like this.

01:53.200 --> 02:01.600
There is this local storage API and from the local storage we will get the item and we will have an

02:01.600 --> 02:02.800
item out.

02:02.980 --> 02:07.210
This is returning back a string or null.

02:07.210 --> 02:12.220
But for our test case we know that it's going to be having value.

02:12.820 --> 02:18.820
Now we are going to pass it to JSON via JSON parse functionality.

02:20.920 --> 02:27.280
But this one is complaining because the returned results for the git item, maybe not, but we know

02:27.280 --> 02:28.570
that it is not null.

02:29.200 --> 02:36.250
And this is basically going to be the the object of, let's say, state.

02:36.250 --> 02:38.230
But the type is going to be.

02:39.220 --> 02:47.740
Our authenticated user logged in user data so we can use this type logged in user type here.

02:49.470 --> 02:51.010
And we can do the casting.

02:51.030 --> 02:53.460
Logged in user.

02:53.640 --> 02:55.410
Then we can do the assertion.

02:55.830 --> 02:57.930
We can check each field.

02:58.140 --> 03:00.870
But one of them is enough.

03:00.870 --> 03:06.150
Like stage will have is logged in property which will be.

03:08.270 --> 03:08.870
True.

03:14.480 --> 03:14.810
Now.

03:14.810 --> 03:16.310
Let's save this one.

03:20.610 --> 03:25.980
The test is failing because this is the state is null.

03:27.210 --> 03:31.920
Therefore we are not able to access to this is logged in property of this null object.

03:32.370 --> 03:34.380
Now we are going to fix it.

03:34.710 --> 03:43.080
So here in the authentication service, this set logged in user function is called after the successful

03:43.080 --> 03:43.730
login.

03:43.740 --> 03:48.570
So we can update the storage with this.

03:48.780 --> 03:49.800
This object.

03:50.590 --> 04:00.690
So we can call like this local storage set item and the key is owed because we are checking out.

04:01.300 --> 04:10.630
So we are setting it here and the value will be string and we can use JSON string ify to convert this

04:10.810 --> 04:12.520
logged in user object.

04:12.520 --> 04:14.710
This one to string.

04:16.140 --> 04:18.030
So let's say this one.

04:23.210 --> 04:25.370
Now this test is passing.

04:25.370 --> 04:32.900
So after successful login we are keeping the logged in users state in the local storage of the browser.

04:33.670 --> 04:41.890
Now in the test we are using the local storage and we must be careful when using any external functionality

04:41.890 --> 04:50.140
like this one, because in the test we must have a predictable test environment and this local storage

04:50.140 --> 04:58.600
is affecting other tests at the moment because the local storage state is kept between tests like we

04:58.780 --> 05:05.980
we can confirm this like this right here before this test, like before this test executed, we can

05:06.340 --> 05:10.510
just log what we have in the local storage.

05:10.510 --> 05:13.390
So just getting this one.

05:16.200 --> 05:16.950
Let's do this.

05:16.950 --> 05:21.360
But let's also open the karma developer tools.

05:22.730 --> 05:24.110
So it will be here.

05:24.320 --> 05:26.210
At the moment, we don't have any logs.

05:26.970 --> 05:32.270
But if we save the the test, the test will rerun.

05:32.280 --> 05:36.300
And let's check the console here.

05:37.170 --> 05:45.570
Now, we see this this output and this is coming from the console log we have just added to the test.

05:45.570 --> 05:52.500
So in this test, before we do anything, the local search is already having the odd object.

05:53.190 --> 05:59.340
And that's because in the previous test we are also having the successful login.

05:59.340 --> 06:01.890
So this one is also updating the local storage.

06:01.890 --> 06:08.280
Therefore, when this test is running because of the previous one already updated, the local storage

06:08.300 --> 06:08.820
is one.

06:08.820 --> 06:11.460
We are having all this value in the local storage.

06:11.970 --> 06:15.600
So the states of the test must be predictable.

06:15.600 --> 06:24.990
Therefore we are assuming the local storage will be initially empty and we will fill it after the login.

06:25.410 --> 06:33.720
So let's make sure the local storage will always cleared after each test so we can use.

06:34.590 --> 06:35.850
Let's scroll up here.

06:35.850 --> 06:42.090
We have the lifecycle functions function selector before each and let's add after each year.

06:42.090 --> 06:49.890
So after each test we are going to clear the content of the local storage like this.

06:50.890 --> 06:51.790
Saving it.

06:52.810 --> 06:55.440
And let's open the console once again.

06:55.450 --> 06:57.310
Tests are running now.

06:57.310 --> 07:01.630
It is printing now, which means the local storage is empty.

07:03.890 --> 07:10.580
So initially the local store is empty and the local storage is filled right after a successful login.

07:10.970 --> 07:12.620
Now we don't need this one.

07:14.590 --> 07:16.870
So we have completed the first step.

07:16.870 --> 07:21.640
Now the login is updating the local search with the logged in user state.

07:22.320 --> 07:27.510
Next step is to use this local storage data when initializing authentication service.

07:27.510 --> 07:34.120
So when the application is initialized, we are going to load the authentication service.

07:34.140 --> 07:36.450
Initial data from local storage.

07:36.450 --> 07:38.910
So let's add a test for that.

07:40.130 --> 07:41.360
Now in this one.

07:42.410 --> 07:49.940
We will be displaying a display's layout of logged in user.

07:50.900 --> 07:55.220
So we are going to display the logged in user state here.

07:56.140 --> 08:03.580
But this time we are not going to call this setup login, but we will do the navigation by ourselves

08:03.580 --> 08:04.300
like this.

08:04.690 --> 08:06.550
We are not calling this one.

08:07.500 --> 08:10.800
So first, let's go to Homepage.

08:11.910 --> 08:16.190
Then we will wait for UI to be to be updated.

08:16.200 --> 08:22.140
But before we do anything we are going to update the local storage with the with the user data.

08:22.530 --> 08:24.300
So let's do that.

08:24.300 --> 08:33.420
So we are going to call local storage set item and we are filling out the key is odd and is an object.

08:33.420 --> 08:34.920
We will pass a string.

08:36.040 --> 08:41.500
And let's convert our user object to string.

08:41.500 --> 08:49.810
And in this object we have the user ID username is logged in email, but for this test it is only enough

08:49.810 --> 08:53.350
to have this is logged in.

08:54.730 --> 08:58.300
So we are initializing the local storage.

08:58.510 --> 09:06.190
So we are setting out to local storage and it has the user's information and it is saying it is logged

09:06.190 --> 09:06.580
in.

09:06.580 --> 09:09.100
Then we are opening the home page.

09:09.550 --> 09:13.090
We didn't do anything about the login page, we didn't fill the form.

09:14.110 --> 09:21.160
Basically we are opening the page for the home page and then we are expecting it to be showing the the

09:21.160 --> 09:26.200
logged in state and the logged in state means that we have this my profile link.

09:26.530 --> 09:28.990
So let's create a that one.

09:31.110 --> 09:33.870
And we don't need to cast it in anything.

09:34.170 --> 09:42.840
So we are expecting this my profile link to be to be pretty.

09:45.190 --> 09:46.690
So this is the test.

09:46.720 --> 09:48.040
Let's say this one.

09:53.670 --> 09:58.710
So this one is failing it, the space layout of the user.

09:59.550 --> 10:03.230
The things we are doing here is not having any effect at the moment.

10:03.240 --> 10:10.860
So we will use the storage, local storage in old authentication service right here.

10:10.890 --> 10:17.910
So this is the constructor and this is being called when an instance from this service is created.

10:18.120 --> 10:24.480
So right here in this constructor, we can set value for this logged in user.

10:24.630 --> 10:33.690
So first thing is we will get, let's say, stored data and we take it from local storage get item,

10:34.410 --> 10:35.460
let's get old.

10:35.580 --> 10:37.620
So this can be null.

10:38.010 --> 10:39.450
It's either string or null.

10:39.450 --> 10:41.400
So it is not null.

10:41.760 --> 10:51.120
So if you have value stored data, then let's pass it to JSON and set it to this logged in user.

10:51.840 --> 10:59.460
So this logged in user is JSON parse stored data.

11:01.110 --> 11:09.990
By the way, this pass functionality can throw error if the the text the string is not in JSON format.

11:10.350 --> 11:19.290
Therefore, we can wrap this one with ribcage right here and we just omit the error case here.

11:20.190 --> 11:21.000
So.

11:22.090 --> 11:31.360
This will be initializing the logged in user if we have a passable string for the old key.

11:32.350 --> 11:34.240
So let's say this.

11:38.670 --> 11:43.320
Now the test is still failing, but let's test this one on browser.

11:43.350 --> 11:46.530
Let's also open the developer tools.

11:46.860 --> 11:51.690
So let's clear this part and let's switch to the application.

11:52.710 --> 11:58.560
And in the application tab, in the developer tools, we have the section for the local storage.

11:58.950 --> 12:04.830
Let's go into that and let's expand this part and we have the domains here.

12:04.830 --> 12:07.590
And currently this is localhost 4200.

12:08.410 --> 12:11.170
And here we have key and values.

12:11.770 --> 12:13.720
Initially, this is empty.

12:13.750 --> 12:15.130
Let's log in.

12:15.340 --> 12:22.490
So filling the form is a one at gmail.com password.

12:22.510 --> 12:23.590
Hitting enter.

12:23.950 --> 12:26.360
Now the storage is updated.

12:26.380 --> 12:30.460
Now we have this key ode and corresponding value.

12:30.700 --> 12:35.260
And we have this user information like the user one at gmail.com.

12:35.410 --> 12:38.620
It's ID and is logged in is true.

12:39.220 --> 12:48.040
Now if we refresh the application that's reloaded here, now we are seeing the the state is preserved.

12:48.040 --> 12:56.050
So it is able to pull the the state from the local storage and the initial layout is displaying the

12:56.050 --> 12:57.010
logged in state.

12:57.670 --> 13:05.620
But the test is failing and the reason of the failure is here in the test flow.

13:06.100 --> 13:10.750
So whenever the test code is executed right here.

13:11.550 --> 13:18.900
Our component, our application is already initialized and that is being handled in here in this before

13:18.900 --> 13:19.170
each.

13:19.170 --> 13:26.940
So this is initializing whole application with all the dependencies and one of the dependencies, the

13:26.940 --> 13:28.200
authentication service.

13:28.470 --> 13:34.220
And that means the authentication service is already initialized in the before each.

13:34.230 --> 13:44.370
So the storage we are sitting right here is not have any effect because the the constructor is already

13:44.370 --> 13:46.710
called for the authentication service.

13:46.890 --> 13:54.240
And so at this point we are too late to set the local storage with the logged in user value.

13:54.510 --> 14:03.270
So for this test case, we must be able to run this one like setting authentication value to storage

14:03.270 --> 14:06.150
before even before each run.

14:06.150 --> 14:10.830
So before this is running we must be setting the local storage.

14:10.830 --> 14:19.950
But with the current setup we cannot do that because before each always run before each of the test.

14:19.960 --> 14:26.910
So when this function is executed, the before each function is already executed and completed.

14:27.720 --> 14:37.590
So in cases like this when we need to do something else before the application initialized, the before

14:37.590 --> 14:42.060
each approach we are using at the moment is not useful.

14:42.480 --> 14:46.560
So for resolution, let's do like this.

14:46.800 --> 14:53.940
Let's remove let's convert this before each to a function set of function.

14:53.940 --> 14:58.890
So here this is going to be set up.

15:00.800 --> 15:05.510
And it is async function and it is ending here.

15:05.630 --> 15:10.370
Let's also move the move the next before each content into this one.

15:14.040 --> 15:16.050
Now we have this setup.

15:16.440 --> 15:19.500
But now we have to call this setup in each of these tests.

15:19.500 --> 15:23.850
So right here, we have to call setup.

15:25.690 --> 15:27.790
So we'd sit up here.

15:28.970 --> 15:30.920
Then in the next one.

15:31.880 --> 15:35.240
We calls it up and in the next one.

15:36.100 --> 15:37.510
We are calling setup.

15:38.810 --> 15:41.690
Again repeating this on the next test.

15:43.070 --> 15:46.970
And now we are in this group for login.

15:47.090 --> 15:49.640
We are using this set up login in each of the tests.

15:49.640 --> 15:55.430
So let's make sure we are calling setup before we do the navigation.

15:55.520 --> 15:59.150
And in the in this test we are using setup login.

15:59.600 --> 16:04.580
So we don't need to call the setup because the setup login is already doing that.

16:04.820 --> 16:13.160
But in the last test we need to call the setup, but we are going to do do it after the local storage

16:13.190 --> 16:14.300
is set.

16:14.660 --> 16:20.930
So before anything is initialized we are setting value in the local storage.

16:20.930 --> 16:27.110
Then we are initializing the application, navigating to the home page and then we are checking the

16:27.110 --> 16:28.190
visible elements.

16:29.030 --> 16:36.020
By the way, there is an error here and this is because this test is not async.

16:36.800 --> 16:41.780
And let's also check if we have other errors here.

16:43.750 --> 16:45.220
And it looks fine.

16:45.670 --> 16:47.350
Let's save this one.

16:51.370 --> 16:54.160
And here we see all tests are passing.

16:54.160 --> 16:59.800
We already verify this is working on browser and now it is working in the karma test as well.
