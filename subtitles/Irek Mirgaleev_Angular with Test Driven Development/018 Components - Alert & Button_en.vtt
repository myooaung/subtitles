WEBVTT

00:03.300 --> 00:10.890
Our signup form is ready, but we have some components that can be reused in different parts of our

00:10.890 --> 00:15.740
application and let's extract those as a separate components.

00:15.750 --> 00:21.810
For instance, this alert dev here can be extracted as a separate component.

00:21.810 --> 00:29.190
And also the button we have here is not just specific to the signup case, we can use it in other places

00:29.190 --> 00:29.910
in the application.

00:29.910 --> 00:36.480
So let's create them as a separate component and let's start with this load case.

00:36.480 --> 00:44.550
So opening a terminal for this one, I'm going to use the angular CLI for creating the component and

00:45.060 --> 00:45.960
let's do that.

00:45.960 --> 00:55.170
This is the source directory of the of the project and I run g generate and we are going to create a

00:55.170 --> 01:01.320
component and I'm going to gather these components under a folder shared.

01:01.320 --> 01:06.660
So when giving a name to the component, we can also pass the pet in it.

01:06.660 --> 01:11.400
So like under shared the component will be let's say this is the alert.

01:12.860 --> 01:17.840
And for this one, we don't need any test files to be generated.

01:17.840 --> 01:21.710
So adding skip tests.

01:22.600 --> 01:26.440
As true so the tests won't be created.

01:26.440 --> 01:31.240
And also we don't need an extra CSS file to be generated.

01:31.240 --> 01:37.870
So we go with inline style through option here.

01:39.040 --> 01:41.050
There's a typo in line style.

01:43.330 --> 01:52.840
So it just generated the alert component, the HTML and alert components, and it updated the app module.

01:53.770 --> 01:59.710
So let's check the shared folder and we have the load component.

02:00.850 --> 02:03.110
H html and test files.

02:03.130 --> 02:06.220
I'm just cutting this part from the sign up.

02:08.460 --> 02:15.180
Just cutting this part and pasting here and saving this one.

02:15.540 --> 02:20.760
Now the components is this one EP alert and.

02:21.930 --> 02:27.150
And Degenerate is automatically adding it to the app module right here in the declaration.

02:27.300 --> 02:29.670
This alert component is added.

02:29.670 --> 02:35.370
So in sign up we can use app alert.

02:37.300 --> 02:40.120
So saving these changes.

02:40.420 --> 02:45.580
But this is breaking our test because now we have a new component.

02:45.580 --> 02:49.330
We are using this new component in the in the signup.

02:49.780 --> 02:55.450
We declared that one in the module, but it's not declared in the test modules.

02:55.810 --> 03:00.760
So here in the sign up component spec.

03:02.210 --> 03:09.140
Here in the the before each the test bed is having only the declarations of the sign up component,

03:09.140 --> 03:11.120
but now we have the third component.

03:11.120 --> 03:16.700
So let's make sure we have the alert component here as well.

03:17.900 --> 03:23.960
Now the tests are passing, but we also have the same failure in the gist test.

03:24.140 --> 03:28.220
Just like we declare alert component in the karma test.

03:28.220 --> 03:32.360
We need to do the same thing in just test as well.

03:32.810 --> 03:34.910
Right here in the setup.

03:34.910 --> 03:36.920
All tests are calling the setup.

03:37.010 --> 03:46.970
So like we have imports for the typical end module and we will have the declaration declarations array.

03:46.970 --> 03:52.130
And in this one we get the alert component, saving it.

03:53.490 --> 03:59.640
And the justices are also passing now to make this component reusable.

04:00.000 --> 04:06.210
At the moment, it's just having this text, but the text will be dynamic.

04:06.210 --> 04:16.590
So to use it in different components, we can set text dynamically and for that we need to do something

04:16.590 --> 04:22.090
like this, for instance, in sign up component instead of just having this app alert.

04:22.110 --> 04:23.100
We can.

04:24.340 --> 04:30.640
Just copying the text we want for this Lord, like we can set a property for it.

04:30.640 --> 04:34.870
And let's say the property name is the text and the text will be this one.

04:34.870 --> 04:43.270
So we will be able to set the text for it dynamically in wherever we are using this component.

04:43.270 --> 04:43.690
So.

04:45.350 --> 04:48.370
This component will be taking this text input.

04:48.380 --> 04:55.340
So just opening the alert component and we need to declare this input.

04:56.150 --> 05:04.820
So the input is coming from this angular core package and the input name is the text.

05:06.100 --> 05:08.500
By the way, it's going to be like this.

05:09.320 --> 05:09.770
Text.

05:09.770 --> 05:12.380
And initially it's going to be, let's say, empty.

05:12.980 --> 05:14.870
We can set initial values to it.

05:16.190 --> 05:19.870
And right here in the alert template.

05:19.880 --> 05:24.510
Now, we can replace this one with Codebases.

05:24.530 --> 05:26.630
Text just like this.

05:27.470 --> 05:28.910
Saving all the changes.

05:29.690 --> 05:33.320
And if you open the karma, we see the tests are passing.

05:33.320 --> 05:42.200
So whatever value we are setting for the test property is added as a child to this relative and it is

05:42.200 --> 05:43.610
visible on the page.

05:44.030 --> 05:50.030
For this one, another approach would be instead of setting a property, we can pass the text as a child

05:50.030 --> 05:50.660
element.

05:50.660 --> 05:57.950
So just like having like we had the div and we had the text here.

05:57.950 --> 06:03.140
So this is the child element and we can do the same thing for our custom elements as well.

06:03.140 --> 06:07.160
So like here, just cutting the text and.

06:08.530 --> 06:11.290
Adding it as a child element here.

06:11.350 --> 06:12.970
Now we can use this one.

06:12.970 --> 06:17.290
So at this point, if I save it, it's going to be failing.

06:17.290 --> 06:24.430
Like the tests are failing because this component is not processing the child element.

06:24.430 --> 06:30.910
We are passing through it to be able to use this child element in this component, all we need to do

06:30.910 --> 06:40.510
is just like we no longer need to have this text property, but we will have energy content here.

06:40.750 --> 06:48.220
So this is a place holder for the representation of the child elements passed to this component.

06:48.550 --> 06:50.530
So let's save this one.

06:52.100 --> 06:53.390
Now the tests are passing.

06:53.390 --> 06:59.860
So this value we are passing as a child element is inserted into this content.

06:59.870 --> 07:07.760
Now we don't need the text input and removing unused import.

07:09.900 --> 07:17.610
Now we extracted this pilot as a separate component and we can re-use in other places.

07:18.000 --> 07:23.550
This will have different styles, so we will enhance the functionality of this one.

07:25.140 --> 07:33.360
But from use using point of view from signup page, we will not be dealing about the internals of it.

07:33.450 --> 07:41.040
So from sign up page point of view, we won't be dealing with the details about the implementation,

07:41.040 --> 07:42.720
details about the third component.

07:42.750 --> 07:45.540
We will just pass the relevant data to it.

07:45.570 --> 07:49.950
Now, let's also extract this button as a separate component.

07:50.250 --> 07:55.500
Again, opening the terminal, creating another component and g generate.

07:55.500 --> 07:58.080
By the way, we can go shorter like this in G.

07:58.110 --> 08:04.020
G is also representing the generate and we are going to create component.

08:04.290 --> 08:14.370
And again, this one is going to be under shared folder and the company will be button and we will skip

08:15.180 --> 08:24.780
tests for this one and also we will go with the inline style for this one as well.

08:27.380 --> 08:35.960
So it is creating potent compound animal button components and adding the declaration of the button

08:35.960 --> 08:38.600
component into this app module.

08:39.980 --> 08:43.340
Now just copying this button markup.

08:45.000 --> 08:50.430
And going to button component is HTML pasting here.

08:50.940 --> 08:58.150
Now this one requires more properties like we need to update the disabled.

08:58.170 --> 09:03.390
We also need this API progress and we have this text.

09:04.260 --> 09:09.090
So let's define these inputs in the component.

09:09.090 --> 09:10.800
So opening the bottom component.

09:10.800 --> 09:11.370
Yes.

09:11.940 --> 09:21.600
So we will have an input for let's say this is for the disabled and initially it's going to be false.

09:22.700 --> 09:26.180
So this is going to be disabled.

09:27.280 --> 09:29.680
And the next one is API progress.

09:29.680 --> 09:32.170
So just like disabled it's going to be.

09:32.980 --> 09:37.240
The Boolean API progress and its initially false.

09:38.430 --> 09:40.860
So we got these inputs.

09:41.370 --> 09:43.920
And again, we will have.

09:45.350 --> 09:47.300
Energy content here.

09:47.480 --> 09:52.310
So we will pass the text as child element for this.

09:53.750 --> 09:54.770
Tap button.

09:55.520 --> 09:57.120
So that's it.

09:57.140 --> 10:03.050
Now we will be using this component in sign up component.

10:04.860 --> 10:13.800
So our component is app button and the the text will be this one sign up.

10:15.120 --> 10:24.990
And it looks for the properties of for the disabled and the disabled is this one.

10:27.690 --> 10:28.590
And.

10:29.880 --> 10:31.110
DPI progress.

10:32.220 --> 10:37.650
And it's the API progress property in this sign up component.

10:37.920 --> 10:40.050
Now, we don't need this.

10:42.710 --> 10:45.320
And saving this one.

10:46.920 --> 10:54.660
The tests are failing because the button is not declared in the test modules.

10:56.800 --> 10:58.540
So we will declare it.

10:59.380 --> 11:02.500
Button component, saving it.

11:04.410 --> 11:11.310
Now the tests are pressing and we also need to declare this one in the gest test.

11:12.880 --> 11:17.830
So we will have a button component saving it.

11:19.030 --> 11:23.410
And here in the just output we see all tests are passing.

11:23.980 --> 11:32.380
So with this way we extracted the parts as separate components and all we do is just pass the properties

11:32.560 --> 11:34.240
that components is requiring.

11:34.240 --> 11:45.580
And in the component implementation, it does the all necessary things like showing the spinner disabling

11:45.580 --> 11:51.130
itself based on the disabled property or API progress and so on.

11:51.130 --> 11:58.660
So with this way, the sign up won't be dealing with the buttons behavior, so the buttons will be more

11:58.660 --> 12:01.030
generic in the application.

12:01.120 --> 12:04.420
And if we check the angular.

12:05.540 --> 12:07.400
They have tools in the chrome.

12:07.430 --> 12:09.060
Here we have the app.

12:09.080 --> 12:12.140
Sign up in it, we have this app button.

12:12.140 --> 12:15.950
So this is just listing all of our custom components.

12:16.280 --> 12:23.090
So like we have the app button and here we see it has the properties of the API progress and disabled.

12:23.090 --> 12:30.380
And if we set values for them like this, if the API progress is true, then there is spinner.

12:31.680 --> 12:35.160
And even we said disabled to false.

12:35.160 --> 12:41.100
Since the API progress is true, button is disabled and the spinner is visible.

12:41.220 --> 12:47.400
So like this way we can create reusable components for our application.
