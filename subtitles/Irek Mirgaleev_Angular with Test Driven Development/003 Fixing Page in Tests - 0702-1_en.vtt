WEBVTT

00:03.210 --> 00:04.260
In our tests.

00:04.260 --> 00:10.860
We are returning three users and we are checking that there will be three users on the page.

00:10.860 --> 00:16.650
But when we check the client on browser here we are seeing five users.

00:16.920 --> 00:22.590
Picanto is pagination functionality for listing users and it is default behaviours.

00:22.590 --> 00:30.000
Like if you don't specify any page or size parameters, it is returning the first page and it is returning

00:30.000 --> 00:31.740
only five users.

00:32.130 --> 00:35.040
Let's see the pagination functionality in detail.

00:36.480 --> 00:43.500
So in this bigger screen we are just making direct API requests to the backend API users and we are

00:43.500 --> 00:45.090
seeing this response.

00:45.090 --> 00:55.860
So this is returning five users and we can set the size parameter and we can say just return three users.

00:55.860 --> 01:02.640
So it is returning three users in this case and the total pages is calculated based on that.

01:02.640 --> 01:10.320
So that's why we have nine pages and we can navigate to the next page by setting the page parameter

01:10.320 --> 01:13.380
and page navigation is started from the index zero.

01:13.380 --> 01:15.120
So zero is the first page.

01:15.240 --> 01:19.320
And if you go to the next page, the second page is the index one.

01:19.320 --> 01:26.850
So it is displaying the user for five, six and for the last page we have total pages and nine, but

01:26.970 --> 01:29.910
for the page index we go to the eight.

01:30.210 --> 01:31.710
So this is the last page.

01:31.710 --> 01:37.650
And in that page we only have one user and that's the last user in the application.

01:37.980 --> 01:44.070
So let's have the similar implementation in our tests and also let's make sure we are passing the size

01:44.070 --> 01:45.390
parameter in the request.

01:45.390 --> 01:49.920
So we will be receiving three users in each page.

01:51.030 --> 01:55.830
So for this one, I'm adding a test to the spectators here.

01:55.830 --> 02:04.770
So the test is going to be eight sense size four is three.

02:06.750 --> 02:12.210
So we are going to handle the request.

02:13.570 --> 02:21.250
And this request will contain parameters or the URL will be like this API once your users and there

02:21.250 --> 02:24.580
will be size and the size will be three.

02:25.000 --> 02:27.970
So then we will run the assertion.

02:28.180 --> 02:30.970
Basically, this is asserting the request.

02:31.060 --> 02:36.530
If the request does not have this parameter, the this request will fail.

02:36.580 --> 02:39.870
But let's have an explicit assertion here.

02:39.880 --> 02:47.980
So we are expecting that we can access to the size parameters like this request.

02:48.640 --> 02:51.760
And from the request we can access to the request object.

02:52.150 --> 02:55.420
And from this one, we can get the parameters.

02:56.200 --> 03:03.310
And in the params we have the get function and we are looking for the size parameter.

03:04.420 --> 03:09.640
And we are expecting this size to be three.

03:10.150 --> 03:12.100
Moving the karma to the front.

03:12.610 --> 03:14.350
Let's save this one.

03:17.550 --> 03:22.740
Now this one is failing because this this part is basically failing.

03:22.770 --> 03:31.170
We are not sending the size parameter in the request and we can fix it here in the user service.

03:31.320 --> 03:33.510
We have this load user's function.

03:34.580 --> 03:41.300
And when we are calling the client gate, we can pass options.

03:42.350 --> 03:45.320
And one of the options is for the premiums.

03:45.740 --> 03:52.400
And we are going to set size and it's going to be three saving this one.

03:55.150 --> 03:57.220
Now we have a failure.

03:57.220 --> 03:59.440
But this time another test is failing.

03:59.440 --> 04:04.240
The failing one is basically the first test in this user list.

04:04.270 --> 04:06.490
It displays three users in list.

04:06.970 --> 04:14.410
And the failing reason is because now in each request we are adding this size.

04:14.950 --> 04:20.170
But in this test, as the error indicates.

04:20.170 --> 04:22.450
So we are receiving this request.

04:22.810 --> 04:26.470
But our expert is basically looking this one.

04:26.650 --> 04:28.660
It's not looking for the size attribute.

04:28.660 --> 04:32.170
So we can fix it like this.

04:32.170 --> 04:35.440
We can add size to this one as well.

04:35.440 --> 04:36.400
Let's save it.

04:38.610 --> 04:40.830
And you see the tests are passing.

04:41.040 --> 04:45.270
And if he switched to the browser, here we are seeing three users.

04:45.270 --> 04:54.330
If we open the console for the Chrome, let's clear the console, let's go to the signup page and let's

04:54.540 --> 04:56.310
go back to homepage.

04:56.310 --> 05:03.930
And here we are seeing we are sending a request to this end point with the size having the value three.

05:04.350 --> 05:07.740
So as a result we are receiving three users from back end.

05:08.580 --> 05:13.770
Now in the tests we are having this size in the URLs as well.

05:13.770 --> 05:20.520
But this is a bit of fragile implementation because in future, if we change our implementation by sending

05:20.520 --> 05:27.720
additional parameters in the request which we will do, then we need to come back to these tests and

05:27.720 --> 05:29.190
update the URLs here.

05:29.640 --> 05:37.800
Instead of having this specific path matching, we can go something like this, we can pass a function.

05:38.010 --> 05:43.320
We did this before and we can just return.

05:44.340 --> 05:45.630
We can just return true.

05:45.630 --> 05:46.290
Like this.

05:46.290 --> 05:50.520
So this would indicate don't care about the URLs, don't care about anything.

05:50.520 --> 05:59.580
Just take the request and then we will continue our test and do whatever needs based on that request.

06:00.000 --> 06:07.560
Since we are just testing the user list and it doesn't have any other API request, it is safe to have

06:07.560 --> 06:10.470
this have it like this.

06:11.010 --> 06:13.950
So let's do the same thing here as well.

06:16.020 --> 06:17.910
And saving this.

06:18.330 --> 06:21.810
And if you switch to karma here we see the tests are passing.

06:22.500 --> 06:29.490
Let's also take one step further and let's implement the pagination functionality in the test as well.

06:30.000 --> 06:37.080
So in the next part, we are going to have the navigations from one page to another and we need similar

06:37.080 --> 06:40.410
pagination implementation for the testing here.

06:40.770 --> 06:43.410
So for this one, I will have something like this.

06:43.860 --> 06:50.280
At the moment we are having these three users, but I will go like this.

06:51.600 --> 06:55.350
Here in the API records in this browser.

06:55.350 --> 06:57.390
Let's get seven users.

06:59.270 --> 07:03.470
And so we have users from 1 to 7.

07:03.860 --> 07:07.250
And I'm just going to copy the raw version of this one.

07:08.910 --> 07:19.830
And here removing this page, pasting the thing I copied and just keeping the the array here content

07:19.840 --> 07:27.450
array this is the array having the users and let's have this in a variable called as users.

07:27.870 --> 07:30.450
And I'm just formatting this document here.

07:30.450 --> 07:32.610
So we have seven users.

07:33.510 --> 07:34.770
Why seven?

07:34.860 --> 07:38.580
Because in each page we are displaying three users.

07:38.580 --> 07:45.540
So this is going to be the first page and we are going to navigate to the next page and we will see

07:45.540 --> 07:48.150
four or five, six users.

07:48.150 --> 07:53.760
And we also have one more page and the last page will only have one user.

07:53.910 --> 07:58.560
So we are going to display next and previous buttons.

07:58.560 --> 08:03.540
So we will need to navigate between these pages for those assertions.

08:03.540 --> 08:07.290
So that's why I'm having three pages of user here.

08:07.470 --> 08:10.110
And also we will have a function here.

08:10.500 --> 08:12.390
It's called this one is Get Page.

08:12.480 --> 08:20.790
So this is going to be basically generating the page object based on the page and size parameters we

08:20.790 --> 08:22.260
are passing.

08:23.760 --> 08:26.850
So like we can say page is zero and the size is three.

08:26.850 --> 08:30.660
Then it's going to be returning these three users.

08:30.660 --> 08:37.740
And when we set the page one and the size is three is going to be returning these three users.

08:38.400 --> 08:41.610
So this is going to be the implementation for that logic.

08:41.610 --> 08:45.950
So first we are going to slice the this users area.

08:45.960 --> 08:48.870
So we are we need a starting point.

08:48.870 --> 08:53.790
And basically the starting point is multiplication of the page and size.

08:53.800 --> 09:01.800
So when the page index is zero and size is three, then the starting point will be zero.

09:02.040 --> 09:09.270
And when the page is one and the size is three, then in this user area we will start from the three

09:09.270 --> 09:12.270
index three, which means we will start from this one.

09:13.070 --> 09:23.690
So to start is page times size and we also need an end and it is basically start plus size.

09:24.350 --> 09:27.950
So we have the beginning and end of the the users.

09:28.040 --> 09:30.590
We are going to return the page response.

09:30.590 --> 09:33.350
So let's return the the response.

09:33.350 --> 09:40.970
So we will have a content array which is going to be basically this user's arrays sliced version.

09:41.240 --> 09:45.020
We will take the start end and here.

09:46.440 --> 09:54.810
Then we have the page and size properties in this response, which are basically going to be the parameters

09:54.810 --> 09:59.730
we are sending, and the last one is the total pages.

10:01.110 --> 10:05.820
So this is indicating how many pages we have in the user list.

10:06.480 --> 10:11.460
And this is going to be the calculation of math.

10:12.480 --> 10:22.560
We will round the number up of this calculation, which is user's length, which is seven divided to

10:22.590 --> 10:23.550
size.

10:23.550 --> 10:29.910
So it's going to be 2.3, but we will round it up, which means it's going to be three pages.

10:30.180 --> 10:36.780
So we are going to call this get page here so we can do something like this.

10:36.780 --> 10:44.460
We can say get page and we can ask for page zero and a size three or since.

10:44.460 --> 10:48.810
Now we are going to send parameters in these requests like this one.

10:48.810 --> 10:53.390
We are taking the size and also we are going to take the page as well.

10:53.400 --> 10:55.530
We can use those as well.

10:55.530 --> 11:05.340
So for taking those values, let's have a helper function here and let's name it as parse page forums.

11:05.700 --> 11:09.690
So this is going to be taking this request object.

11:09.690 --> 11:13.140
We will pass that request as a parameter to this one.

11:13.650 --> 11:14.520
Let's pass it.

11:14.520 --> 11:18.240
And this the type of this one is test request.

11:19.170 --> 11:25.890
And here we are going to take the the parameters like the size, just copying this one.

11:28.240 --> 11:32.380
And we will also have another parameter which is going to be the page.

11:33.550 --> 11:37.930
So these are the parameters we will receive.

11:38.320 --> 11:41.650
Let's have them as variable, let's size and.

11:44.010 --> 11:50.310
Page and we will just return it as object like this.

11:53.970 --> 12:04.980
So for instance, in this one, we can, let's say called parse page params and pass this request.

12:05.580 --> 12:09.720
And this is going to be returning the size and page back to us.

12:09.870 --> 12:16.170
And these are typical request parameters, and they are going to be in string format.

12:16.170 --> 12:24.570
So we must be parsing them to number because we are using number in the get page function so we can

12:24.570 --> 12:25.830
do something like this.

12:25.980 --> 12:32.820
Let's change this to let because we are going to override the values of these variables.

12:32.820 --> 12:38.280
So we are going to try this number parse int.

12:38.610 --> 12:41.940
So we are just going to parse the value coming from this one.

12:41.940 --> 12:48.570
But this is complaining because this can be null, but let's say this is never going to be null by adding

12:48.570 --> 12:51.780
exclamation mark and same thing for the.

12:54.530 --> 12:55.250
Page.

12:56.180 --> 13:00.080
So we have the values for these.

13:00.560 --> 13:05.560
But in case these are not going to be number, we can do something like this.

13:05.570 --> 13:13.280
We can check if the number is not a number we are doing just to be safe.

13:13.370 --> 13:15.410
We are doing this just to be safe.

13:15.920 --> 13:18.530
So the size is going to be, let's say, five.

13:18.530 --> 13:21.620
So we are receiving a parameter, but that's not a number.

13:21.620 --> 13:25.130
So let's make sure that the size has the value of five.

13:25.310 --> 13:35.240
And if similarly the page is not a number, then let's make sure page is zero.

13:36.260 --> 13:44.630
So in the end, either we get the size and page values from the request parameter or we go with the

13:44.630 --> 13:45.080
default.

13:45.080 --> 13:49.160
So in the test we can do like this.

13:49.490 --> 13:53.810
We can call, parse, page, params, and we can pass the request.

13:54.230 --> 14:03.050
And this is going to be returning the the page and size and we can get them by object structuring like

14:03.050 --> 14:03.590
this.

14:06.120 --> 14:11.580
Then we can pass them to the get page function here.

14:12.090 --> 14:12.750
Like this.

14:13.690 --> 14:15.220
So saving this one.

14:19.580 --> 14:22.220
And this is also passing.
