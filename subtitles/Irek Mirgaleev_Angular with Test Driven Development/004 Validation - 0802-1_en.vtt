WEBVTT

00:03.400 --> 00:05.620
Now let's add the validation for these fields.

00:05.620 --> 00:13.930
So we are going to change the bottom disabled behavior and we are just going to check the user to enter

00:13.930 --> 00:17.710
valid credentials into these inputs before enabling the button.

00:17.710 --> 00:19.330
So let's have the validation.

00:19.330 --> 00:22.750
And again, I'm going to use the sign of component as reference.

00:22.750 --> 00:25.690
So we have this validation logic.

00:25.930 --> 00:32.170
We are not going to implement all the validations, but we will implement some parts of it.

00:32.710 --> 00:36.820
We are not going to have the the uniqueness check, for instance, for the email.

00:37.240 --> 00:42.520
And so I'm just going to copy this part, the test cases.

00:43.740 --> 00:53.730
And here adding a new describe look to the log component spec and this is for the validation and it

00:53.730 --> 00:56.670
just pasting this test cases.

00:56.670 --> 01:03.090
Now we are not going to do anything about the username, so we are going to test the email.

01:03.420 --> 01:09.960
Email is required and email format and password password to be required.

01:10.910 --> 01:14.090
And just removing the others.

01:14.870 --> 01:16.760
And let's start with the first one.

01:16.760 --> 01:20.240
So I'm just commenting out the the others.

01:20.240 --> 01:28.040
So it displays this error when the field has this value and now it's also renamed these assign a variable

01:28.220 --> 01:32.630
to log in page here because we are testing the log in page.

01:32.660 --> 01:43.580
Now in this one, we need to change the test to async because we have to call a weight fixture when

01:43.580 --> 01:47.030
stable because this form is template driven form.

01:47.030 --> 01:53.180
So we must be waiting for that fixture to be stable before filling these inputs.

01:53.180 --> 01:58.400
And here we are checking the validation error for the field first.

01:59.090 --> 02:00.860
It shouldn't be there initially.

02:00.980 --> 02:08.240
Then after filling the form with the invalid data, we are checking the validation field once again

02:08.240 --> 02:10.550
and we expect it to be there.

02:10.580 --> 02:13.490
We expect it to have this error message.

02:13.490 --> 02:15.470
So let's save this one.

02:18.670 --> 02:21.310
And this test is failing.

02:21.730 --> 02:27.070
Now let's fix it again if we take the sign up page as reference.

02:27.220 --> 02:32.950
All the validation logic was in the component in the form controls right here.

02:32.950 --> 02:41.040
So like for the email, we use this validators array and we use the validator functionality required

02:41.050 --> 02:44.620
coming from the angular forms.

02:45.510 --> 02:53.310
But now we are using template driven form and the validation are also going to be set in the template.

02:53.310 --> 02:56.190
So let's open the login component.

02:56.520 --> 02:58.950
Now for the email case.

02:59.070 --> 03:03.930
We are going to use the validation required.

03:03.930 --> 03:07.860
So this is going to be handling the required validation for this one.

03:07.860 --> 03:14.880
But let's see how we can take the error error from this, this validation that let's see how we can

03:14.880 --> 03:21.660
access to the error we need to access to the IMG model instance for the this email input.

03:21.660 --> 03:24.270
And we can do that like this.

03:24.540 --> 03:31.950
We can have a template variable, we use it like this hash and the variable name and let's say this

03:31.950 --> 03:37.530
is email input and this is going to be N.G. model.

03:37.530 --> 03:45.690
So we are assigning the model, this energy model to email input variable.

03:45.690 --> 03:50.220
Then we can use this template variable in the template.

03:50.220 --> 03:58.740
So let's say after, after this input, let's display whatever is image input content.

03:58.740 --> 04:00.480
So let's, let's save this one.

04:01.830 --> 04:03.990
It's not fixing anything at the moment.

04:05.890 --> 04:13.180
But if we open the browser here, we see there is this object and we can use the pipe to convert it

04:13.180 --> 04:14.080
to JSON.

04:15.700 --> 04:23.890
At the moment we don't see anything, but this input has control controlled property.

04:23.890 --> 04:32.330
And here in this one it is saying the control properties form control type of object, which means like

04:32.350 --> 04:35.160
if you open the sign up component as.

04:36.160 --> 04:40.660
Like like the form controls we are using in the reactive form.

04:41.020 --> 04:48.510
So by taking the control from this engine model, we are accessing to the form control instance.

04:49.170 --> 04:50.520
So let's say this one.

04:51.840 --> 04:56.670
Now it has properties like if it is touched.

04:57.920 --> 05:02.900
Like it is error, like the status is valid.

05:03.080 --> 05:09.440
So those are coming with this form control element in this engine model and we can access to the errors

05:09.440 --> 05:10.280
like this.

05:10.490 --> 05:11.390
Let's save it.

05:12.900 --> 05:15.360
Now it is saying the required is true.

05:15.360 --> 05:20.760
So basically this is having a validation error at the moment because we have this required.

05:20.760 --> 05:22.650
So if if I remove this.

05:23.430 --> 05:24.330
Then this is not.

05:24.330 --> 05:30.750
But if I add the required so it is validating it and it has this value.

05:30.750 --> 05:34.020
And if I type anything here, as you can see, that request is gone.

05:34.110 --> 05:42.390
So basically we are going to use this information here in the template to show the error message to

05:42.540 --> 05:43.160
the user.

05:43.170 --> 05:45.330
So let's do something like this.

05:45.330 --> 05:49.380
Let's have a diff here and let's show this one conditionally.

05:51.670 --> 05:58.060
Dingy if and the condition is again we are going to use the properties coming with the control and if

05:58.060 --> 06:01.330
you also check the signup component once again.

06:03.250 --> 06:04.180
Right here.

06:04.360 --> 06:12.460
We were showing the error errors for for these fields by checking again this was accessing to the form

06:12.460 --> 06:12.910
control.

06:12.910 --> 06:18.730
And from that one we were taking the errors and we were checking if it is touched or if it is dirty,

06:18.730 --> 06:21.790
which means a user is still entering value.

06:21.850 --> 06:27.310
And then we were taking the corresponding error message and returning that.

06:27.910 --> 06:34.750
So we will do the same checks as well to make the same user experience.

06:34.750 --> 06:44.160
So before showing an error, we are going to check I'm just copying this email input control and it

06:44.260 --> 06:47.530
if it is invalid and.

06:49.360 --> 07:00.400
I'm going to next line if it is dirty or it is touched.

07:00.970 --> 07:01.870
So.

07:03.250 --> 07:12.220
If this condition matches like this, then we are going to display the error message to user and error

07:12.220 --> 07:13.180
messages.

07:13.450 --> 07:19.900
Again, there can be multiple validation cases like the required, like the size.

07:20.830 --> 07:27.040
Later we will have email, so we must be checking the validation error type as well.

07:27.040 --> 07:34.180
So again, adding another diff here and this time we will check if email.

07:35.240 --> 07:39.110
Input errors and this is an array.

07:39.560 --> 07:43.670
And from this array we will get the required.

07:45.630 --> 07:50.730
So if you have required type of error, by the way, it is optional.

07:52.470 --> 08:00.690
If you have required type error, then let's display the error message to use it saying email is required.

08:00.960 --> 08:04.560
So saving this one, this one visible as well.

08:04.560 --> 08:12.840
So if I lose the focus here like I didn't type anything and move to the next one and here the the message

08:12.840 --> 08:13.290
is visible.

08:13.290 --> 08:16.740
But if I type anything and jump to the next one, that message is gone.

08:16.740 --> 08:21.630
Let's, let's remove this part to make it cleaner.

08:21.960 --> 08:23.520
Now we have this email input.

08:23.520 --> 08:28.110
And if I focus to the next one, here it is printing this error.

08:28.590 --> 08:35.310
So the implementation for the validation is working, but the test is failing because in test.

08:37.800 --> 08:46.380
We are querying the visibility of this this element, having this data tested and it is having the field

08:46.740 --> 08:47.910
dash validation.

08:47.910 --> 08:49.890
So it's going to be like this.

08:51.790 --> 08:57.010
Let's have the day to decide for the day of wrapping the errors.

08:57.010 --> 08:58.900
Data test ID.

08:59.170 --> 09:01.120
Email validation.

09:01.570 --> 09:02.740
Saving this one.

09:05.570 --> 09:09.830
And it tests are passing and we also verify that it's working on the browser.

09:10.250 --> 09:13.970
The validation is working, but the styling is not there yet.

09:14.210 --> 09:20.630
Like if I clear it then the text is black and there is no red border around the input.

09:20.630 --> 09:22.790
So let's fix that part as well.

09:22.880 --> 09:29.930
And again, we are using the same logic, like if basically this is saying if we have error, then we

09:29.930 --> 09:33.470
are going to set this size and just copying this one.

09:33.740 --> 09:42.230
And again, if we open the signup component here, we were conditionally assigning, this is invalid

09:42.320 --> 09:50.180
and the logic was coming from this username error and this was returning the error message back by doing

09:50.180 --> 09:51.170
these controls.

09:51.380 --> 09:57.890
So when we check this one, it is more simpler to read what's going on here.

09:57.890 --> 10:01.240
So if you have username error, the class is going to be this one.

10:01.250 --> 10:07.750
And also here, if you have this username error, then this will be visible and we will display the

10:07.820 --> 10:08.360
error message.

10:08.360 --> 10:17.300
But in the template driven form, since all the the form related components are within the template,

10:17.660 --> 10:21.760
we are using that template to have the logical parts as well.

10:21.770 --> 10:27.290
So again, just copying this part, but we will replace this username error.

10:27.740 --> 10:38.180
So here there is this IMG class, but instead of username error, again, we are going to use this logic.

10:38.300 --> 10:46.130
If there is if this is invalid, if this is dirty or touched, then assign.

10:46.130 --> 10:47.300
This is invalid.

10:48.910 --> 11:01.330
And for the the the rapping the error text is also having the class of this one invalid feedback like

11:01.330 --> 11:03.310
this saving it.

11:04.480 --> 11:13.840
So if I focus the other now we have the border around input and the text is red for the the validation

11:13.840 --> 11:14.350
error.

11:14.860 --> 11:18.520
If I fail the input, then the error is gone.

11:18.790 --> 11:26.830
Now the styling is also working, but the template is getting more complex and it is harder to process

11:26.830 --> 11:29.890
this in terms of like understanding what's going on here.

11:30.460 --> 11:39.190
To make this a bit simpler, we can extract this logical part out here and delegate it to the component.

11:39.200 --> 11:45.400
So in let's open the log in component and let's have a function here.

11:45.400 --> 11:54.640
Let's say this is checking for is in valid and it's going to be taking the field as a property and the

11:54.640 --> 12:06.070
field type is form control and this will do the checking like it will be taking invalid, dirty and

12:06.070 --> 12:16.750
touched from the field and it's going to be returning if this is invalid and dirty or touched.

12:18.210 --> 12:21.420
So this is the case for it.

12:21.450 --> 12:27.570
So we have this function now and here in the component we can call that function.

12:29.170 --> 12:37.120
Like this is invalid and we can pass the con control by taking it from this email input, email input

12:37.360 --> 12:38.830
control like this.

12:39.820 --> 12:45.010
And let's do the same thing here as well.

12:46.340 --> 12:47.300
Saving it.

12:48.460 --> 12:53.650
And here the validation is working and tests are working.

12:54.160 --> 12:58.930
So with this way, template is more cleaner and it is easier to read.

12:59.290 --> 13:05.170
Now let's add the next test and that is for again email input.

13:05.170 --> 13:08.170
But this time we will check the format of the email.

13:08.200 --> 13:09.760
So let's save this one.

13:13.360 --> 13:15.520
So this is failing.

13:16.270 --> 13:17.350
We don't have this message.

13:17.620 --> 13:19.240
Invalid email address.

13:19.450 --> 13:21.700
Just copying the message here.

13:22.100 --> 13:24.610
We'll use it in the template.

13:24.940 --> 13:30.940
Now, other than required, we will have the validation control for email.

13:30.970 --> 13:39.730
This is like referencing to the email validator and then we will have another div here.

13:40.840 --> 13:44.050
And in this one we will display this message.

13:44.770 --> 13:51.130
But this will be visible when email type of failure occurs.

13:51.610 --> 13:53.890
So let's save this one.

13:56.560 --> 13:57.970
And the days are passing.

13:57.970 --> 14:02.230
And here, if I type this, it is showing invalid.

14:02.470 --> 14:08.620
But if I add something like this now it is showing valid.

14:09.490 --> 14:12.400
If I leave it empty, it is showing image required.

14:12.400 --> 14:17.170
So basically both validations are working for this input.

14:17.560 --> 14:22.000
Now let's add the validation for the the password.

14:23.020 --> 14:26.560
For this one, we are not going to go into the password pattern.

14:26.830 --> 14:31.660
Just just let's require password to be entered.

14:31.660 --> 14:36.280
We don't care about the type entered by user, so let's save this.

14:40.310 --> 14:42.410
And the fix is simple.

14:42.410 --> 14:50.540
We already have a sample here for the email case and we will do the same thing in the password.

14:50.540 --> 14:58.010
So the password is required and we need to access to the IMG model.

14:58.010 --> 14:59.690
Let's have a template variable.

14:59.690 --> 15:04.610
It's called the password input IMG model.

15:05.030 --> 15:14.840
Then we are going to assign this class when password input control is invalid.

15:15.230 --> 15:22.820
Then I'm just going to copy the error section here from the email and pasting after the input for the

15:22.820 --> 15:23.540
password.

15:23.540 --> 15:33.500
This is for password validation, for password input control and when password input has errors.

15:34.870 --> 15:36.220
For the required.

15:36.310 --> 15:39.070
We don't need this next one.

15:39.430 --> 15:41.740
We will show this message.

15:42.820 --> 15:43.990
Let's get it from.

15:44.020 --> 15:46.720
Test password is required.

15:47.980 --> 15:53.320
Just going to paste here, saving this one.

15:57.120 --> 15:58.550
And is this our passing?

15:58.560 --> 16:05.370
And here, if I focus out of password, we see the password is required.

16:05.730 --> 16:09.590
Now let's also update this login buttons visibility.

16:09.600 --> 16:16.080
At the moment, if I type something like this, the button is enabled, but the email is invalid at

16:16.080 --> 16:16.470
the moment.

16:16.470 --> 16:23.730
So let's make sure the login buttons enabled functionality is tied with the validation logic.

16:24.690 --> 16:32.010
And for this one I'm going to add a new test, but this test is going to be in the interactions block

16:32.730 --> 16:34.890
because we have the.

16:36.040 --> 16:38.560
That enabled logic right here.

16:38.830 --> 16:41.920
So I'm going to add the test right after this one.

16:42.190 --> 16:53.110
Let's say it does not enable enable button when fields are invalid.

16:54.070 --> 17:02.980
So we are calling this setup form, but we need to update the fields here.

17:03.190 --> 17:07.830
So let's let's change the implementation for the setup form here.

17:07.840 --> 17:15.870
Let's make sure it takes parameters and let's have the email and let's say it is going to be a user

17:15.880 --> 17:18.110
one at Malcolm.

17:18.130 --> 17:25.090
In the test we are not passing any params, so just making sure we take the default default parameter

17:25.750 --> 17:26.530
and.

17:28.660 --> 17:32.800
We could also add the password, but I'm just keeping it simple at this point.

17:32.800 --> 17:38.110
Just going with the email and here for the email input.

17:38.800 --> 17:42.820
Answering this value coming from the palm here.

17:43.060 --> 17:46.510
So in these tests, we are not passing that palm.

17:46.510 --> 17:48.070
So it is taking this default value.

17:48.070 --> 17:57.490
But now I'm just going to call the setup form with a value like let's say letter A and this is invalid

17:57.490 --> 17:59.650
because of the email validation.

18:00.540 --> 18:10.590
And then we are expecting this button to be disabled, which means disabled property to be treated,

18:11.490 --> 18:12.510
saving this one.

18:16.610 --> 18:19.790
So this is failing for fixing this one.

18:20.030 --> 18:22.370
We have a couple of solutions.

18:22.610 --> 18:27.530
One of them is in the logging component right here.

18:27.860 --> 18:32.180
The disabled logic is like checking this disabled function.

18:33.470 --> 18:38.720
By the way, we have this API progress, but this is not necessary anymore because the API progress

18:38.720 --> 18:45.380
we are passing to button is already disabling the button and that is internal the implementation of

18:45.380 --> 18:46.510
this component.

18:46.520 --> 18:53.750
So we don't have to pass this one just saving like this to make sure it's not breaking anything.

18:54.770 --> 18:58.520
At the moment we have failure, but that's just for the test.

18:58.520 --> 19:01.820
For the button does not to be enabled when the fields are invalid.

19:01.820 --> 19:04.520
So that's the the last test we have added.

19:04.880 --> 19:15.770
So we can enhance this, this part by calling this is invalid right here.

19:15.770 --> 19:26.960
So like we can say if it's disabled or if is invalid for the password input or is invalid for the email

19:26.990 --> 19:27.710
input.

19:28.340 --> 19:34.010
So this is one of the way to fix it, saving it.

19:36.910 --> 19:39.930
And this passing and let's test it on browser.

19:39.940 --> 19:49.060
So failing the password we have value and failing email we have value but it is still invalid.

19:49.060 --> 19:56.890
So the button is disabled and as soon as that entry is valid, the button is enabled.

19:56.890 --> 19:58.590
So it is working.

19:58.600 --> 20:03.670
We have another solution here as well and that would make the template a bit simpler.

20:04.210 --> 20:09.880
So we would be moving the this logical part out of this template.

20:10.840 --> 20:12.010
So let's say this.

20:12.280 --> 20:14.320
So we are back to the failing case.

20:14.410 --> 20:18.940
Let's see the test result and let's fix it.

20:18.940 --> 20:27.700
And the fix is now going to be handled within the component class and in reactive form.

20:27.700 --> 20:33.880
If we check the signup component once again here we have a reference in the class, we have reference

20:33.880 --> 20:35.590
to the form control instances.

20:36.160 --> 20:40.360
We can have a reference in the the logging component as well.

20:40.360 --> 20:42.000
Even we are having a.

20:43.160 --> 20:51.740
Template driven form, we can have a reference to the form control instances of these, the email input,

20:52.550 --> 20:57.980
password input and email inputs like we can have a reference to those.

20:58.100 --> 21:07.940
And to do that, we can use another functionality of Angular and that is View Child.

21:08.540 --> 21:17.090
So we can access to the child object in the component by using the template variables of them.

21:17.420 --> 21:20.450
So we are going to get to the.

21:21.870 --> 21:23.250
You may have input right here.

21:23.250 --> 21:24.270
This is the name.

21:26.120 --> 21:30.800
And we use it here and we are assigning it to.

21:32.590 --> 21:33.580
Variable.

21:33.610 --> 21:36.110
And it's going to be it's not going to be null.

21:36.130 --> 21:44.260
So just adding this exclamation mark for that and it's going to be form control.

21:45.840 --> 21:52.050
And just like that, we can access to the password input as well.

21:53.250 --> 21:55.350
Password input.

21:58.100 --> 21:58.850
Now.

21:59.870 --> 22:02.960
Here in this disabled light we can enhance.

22:02.960 --> 22:13.820
This is disabled logic by checking if email is empty or password is empty or this is invalid.

22:15.720 --> 22:18.840
And this email input.

22:18.870 --> 22:28.350
If the email input is invalid or this is invalid, it is password input.

22:30.160 --> 22:32.620
So we can use childs.

22:32.620 --> 22:42.760
We are taking like this and we can take their invalid status and we can use it in the is disabled attribute.

22:42.790 --> 22:44.320
So let's save this one.

22:48.400 --> 22:51.250
And as are passing.

22:52.490 --> 22:58.340
So since this is making the template a bit simpler, I'm going with this approach.
