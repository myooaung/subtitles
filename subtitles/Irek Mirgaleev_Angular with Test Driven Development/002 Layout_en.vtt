WEBVTT

00:03.100 --> 00:06.490
So we implemented our first requirement.

00:06.520 --> 00:09.040
Now let's turn this into a form.

00:09.520 --> 00:12.910
We will continue to check the elements we are looking for.

00:13.090 --> 00:15.780
Consider these tests as form up.

00:15.790 --> 00:23.710
Real value of TDD will show itself when we go into the interactions part before adding our next test.

00:23.920 --> 00:28.360
First, let's wrap this test with describe.

00:28.360 --> 00:30.670
Look, we already have one here.

00:31.500 --> 00:37.590
We have this describe basically this describe is for grouping the test and this is grouping all the

00:37.590 --> 00:39.390
sign up component related tests.

00:39.510 --> 00:46.920
And here in this describe, we will be having the layout tests.

00:48.510 --> 00:53.620
So just moving this test into this describe look.

00:53.640 --> 01:01.470
And if I save at this point, then if I open the karma window here we have this first described block

01:01.470 --> 01:03.240
sign up component, this one.

01:03.510 --> 01:06.390
And we have layout.

01:06.390 --> 01:08.480
And under layout we have this.

01:08.490 --> 01:09.090
It has.

01:09.090 --> 01:10.250
Sign up, Heather.

01:10.260 --> 01:12.750
Now let's add our next test.

01:13.420 --> 01:22.150
This is similar to the one for the Heather, but in this one it has username input.

01:22.390 --> 01:29.650
So this is going to be a form and in this form we will have an input for collecting user's username.

01:29.920 --> 01:40.810
So just like having the sign up element, we get the HTML element, then we are going to use query selector

01:40.810 --> 01:43.330
to get the input element.

01:43.950 --> 01:45.930
And let's say this is the input.

01:45.930 --> 01:50.670
And basically we are looking for this input to be.

01:52.010 --> 01:52.760
30.

01:52.790 --> 01:53.840
It has value.

01:53.840 --> 02:01.270
So if the query finds that one, that means it won't be undefined.

02:01.280 --> 02:04.780
Therefore this is going to be having a true value.

02:04.790 --> 02:07.070
So let's save this one.

02:07.370 --> 02:09.020
Now we see the test is failing.

02:09.020 --> 02:10.790
Sign up component layout.

02:10.910 --> 02:14.810
It has username, input is failing because this is returning.

02:14.810 --> 02:18.640
Now we don't have that input and the fix is simple.

02:18.650 --> 02:22.550
All we need to do is just add input right after this.

02:22.640 --> 02:30.500
Heather Now the test is passing and if we switch to the browser, we see there is input right here.

02:30.980 --> 02:33.410
Now let's add our next test.

02:33.440 --> 02:42.230
Again, switching back to the karma and this one, we are going to look for another input and this is

02:42.230 --> 02:43.820
going to be for email.

02:43.910 --> 02:49.550
I'm just copying this test for the username because this one is almost identical.

02:50.000 --> 02:53.480
All we need is just this is going to be an email input.

02:54.270 --> 03:01.980
And we are going to again query the input element and we will check the existence of that input.

03:01.980 --> 03:09.270
But if we save at this point, the test is going to pass because it is just querying the existence of

03:09.270 --> 03:11.430
input, but we already have one.

03:11.430 --> 03:14.970
So this is not a good way to write our test.

03:14.970 --> 03:23.250
So we cannot rely onto this query to assert that both inputs are there.

03:23.640 --> 03:27.060
So like if I save it, let's see the outcome here.

03:27.060 --> 03:31.560
We can see it as email input is also passing, but it shouldn't be.

03:32.160 --> 03:35.250
So we know that there will be multiple inputs.

03:35.250 --> 03:42.330
And one of the ways, uh, to enhance this query is maybe we can go like this instead of creating single

03:42.330 --> 03:46.650
element, we can query multiple by using query selector all.

03:46.650 --> 03:51.960
So this would be returning all the inputs, all the input elements.

03:52.320 --> 04:01.350
And let's say this is inputs, this is array now and we can check this inputs length this array length

04:01.920 --> 04:04.020
to be to.

04:04.900 --> 04:07.150
So let's save this.

04:07.790 --> 04:12.710
So now this test is failing because the screen returns just one input.

04:12.800 --> 04:18.410
This area only has one item and we don't have the second input.

04:19.660 --> 04:24.700
So again, we can fix it by adding another input.

04:26.250 --> 04:31.290
And this is passing, but these are not very trustworthy tests.

04:31.320 --> 04:34.000
The queries are not specific to the fields.

04:34.020 --> 04:37.470
We don't have anything about username or email.

04:37.770 --> 04:41.160
Also, we will add another input for password.

04:41.160 --> 04:50.130
And in that case, our email input test is going to fail because there won't be just two inputs.

04:50.130 --> 04:51.330
There will be more.

04:51.930 --> 04:55.260
Also, in browser we see to inputs.

04:55.260 --> 05:00.330
But how would a real user knows what are these inputs for?

05:00.600 --> 05:04.800
For a better solution, we can use placeholders in these inputs.

05:04.800 --> 05:09.750
So like we can just set placeholder for each of them.

05:09.750 --> 05:11.780
And for this one this is username.

05:11.790 --> 05:13.530
And the other one is.

05:14.320 --> 05:18.700
Let's go with, like, a male that saved us.

05:18.940 --> 05:26.770
Now it is looking better, and we can also enhance our test to consider these placeholders.

05:27.100 --> 05:34.420
Like we can update it as like we are looking for input, but we are specifically looking for this place

05:34.570 --> 05:37.360
holder attribute to have.

05:38.370 --> 05:40.620
Username value in it.

05:40.860 --> 05:43.020
And similarly in this one.

05:43.440 --> 05:52.350
Let's turn it back to query selector and we are looking for input having this place holder attribute

05:52.680 --> 05:56.680
having this e dash mail value.

05:56.760 --> 06:03.030
And again, this is going to be input and we expect this input to be pretty.

06:04.200 --> 06:08.580
Saving it and going back to the karma output.

06:08.580 --> 06:16.560
The tests are passing and now the UI is better in terms of clarifying what these inputs are.

06:16.560 --> 06:22.240
But placeholder is not always the best way to inform the user about what is this input for.

06:22.260 --> 06:27.390
Because as soon as the user types, something here that plays older is gone.

06:27.900 --> 06:36.450
And if user enters incorrect value, like if I just type an email address into this one, I wouldn't

06:36.450 --> 06:43.770
be able to catch that since I already lost the information about what this input was for.

06:44.430 --> 06:52.320
So that's why there is a label element and we can use that to show the user what is this input for.

06:52.320 --> 06:56.880
So right here we can have this label.

06:57.600 --> 06:59.580
And this is going to be username.

06:59.730 --> 07:09.690
And this label is for, let's say, username, and we are going to have that ID for this input.

07:09.690 --> 07:13.260
So this is associated with this input.

07:13.260 --> 07:23.730
This is for the username, an element which has this ID and we will have a label here and let's say

07:23.730 --> 07:24.720
this is for.

07:25.920 --> 07:36.570
Email and the label text is email and let's use ID for this input and that ID will be let's go with

07:36.570 --> 07:40.080
email, not e mail for that.

07:40.110 --> 07:41.910
So just like this.

07:42.870 --> 07:43.980
Let's see this one.

07:45.180 --> 07:56.280
Now we have labeled and email and if we just click to the username label, it focuses to the input associated

07:56.280 --> 07:56.900
with it.

07:56.910 --> 08:04.110
But at this point, if we go back to the test output, we have failures and let's see the list of them.

08:04.110 --> 08:11.310
So the username, input and email inputs tests are failing because we no longer have placeholder and

08:11.310 --> 08:15.420
the queries are returning null in the end.

08:15.990 --> 08:23.220
So for this solution, we have more things to test and we can enhance our test like this.

08:23.370 --> 08:30.510
So first thing is we query the label, so let's get the label first.

08:31.020 --> 08:33.360
So we are going to get the label.

08:34.720 --> 08:37.060
Query selector.

08:37.240 --> 08:38.620
And this is.

08:39.650 --> 08:49.850
The and this is the label and again, let's use attribute of it and this label is going to be for username.

08:51.150 --> 08:56.160
So like we are just adding this to the query.

08:57.890 --> 09:04.690
And then we are querying the input with the username.

09:04.700 --> 09:08.720
So these are the associated elements.

09:10.790 --> 09:15.860
Then we can make sure this input is there and also the label is there.

09:18.630 --> 09:22.550
And also we can query the text content of it.

09:22.560 --> 09:30.930
So like we can expect label to have the text content and it's going to contain.

09:32.120 --> 09:33.710
User name.

09:33.950 --> 09:38.240
So in this test, we are checking three things.

09:39.170 --> 09:46.910
Checking the label, checking the input, and making sure that label content text content is this one.

09:47.270 --> 09:54.410
The best practice for testing is to have single assertion in a test, but these are highly coupled assertions.

09:54.500 --> 10:02.480
As a matter of fact, we are just checking the existence of an input that indicates this is for username.

10:03.300 --> 10:11.250
These three assertion is actually doing one thing, which is we have an input with the label text we

10:11.250 --> 10:12.180
are looking for.

10:12.690 --> 10:21.210
So this is the test and let's copy the same thing for the email.

10:22.850 --> 10:25.640
So we have email.

10:26.930 --> 10:31.190
For email ID and the text with the e mail.

10:32.240 --> 10:34.640
So let's save this one.

10:35.150 --> 10:37.850
And here we see the tests are passing.

10:38.730 --> 10:47.520
So now the tests are more reliable and also we are providing better user experience on the UI part.

10:47.880 --> 10:50.880
Now we are going to add the next input element.

10:50.880 --> 10:54.330
Like in any register form, we will have password.

10:55.050 --> 11:05.820
So just copying this test, the one for the email input and this one we will have password input.

11:06.210 --> 11:10.830
And similarly, we are going to check the password label.

11:11.750 --> 11:20.360
Associated with this password input and the actual content of that label to have passwords with uppercase

11:20.360 --> 11:22.760
P that saved us.

11:23.300 --> 11:25.430
So this one is failing.

11:25.430 --> 11:28.220
It has password, input is failing.

11:28.250 --> 11:30.050
The fix is simple.

11:30.050 --> 11:37.670
We will just add another label and input pair and this is for the password.

11:39.130 --> 11:43.660
And the label text is password.

11:44.570 --> 11:45.680
Saving it.

11:46.340 --> 11:55.370
The tests are passing and if we check the browser here we have third field and we have corresponding

11:55.760 --> 11:56.720
input here.

11:56.720 --> 12:02.150
But if I don't pay attention to the style of this page yet, we will fix it.

12:02.780 --> 12:09.110
We can just make sure all the elements are associated with it by just clicking the the label and it

12:09.110 --> 12:11.150
is focusing to the input.

12:11.150 --> 12:16.220
And here we can see it's working for each of these labels.

12:16.520 --> 12:24.650
So now we have the password input, but if we type anything here, it's shown in clear text so it is

12:24.650 --> 12:28.430
visible and for the password field we shouldn't be doing that.

12:28.910 --> 12:30.860
So this input must be masked.

12:31.480 --> 12:33.010
Let's add a test for it.

12:34.230 --> 12:42.150
So just creating new one, it has password type for password input.

12:44.550 --> 12:45.960
So we are.

12:46.920 --> 12:50.400
Going to just copying the sign up and input.

12:50.850 --> 12:54.060
I'm just going to remove the label from this one.

12:54.450 --> 13:01.200
So we get the input element and basically we are going to check the attribute of it.

13:01.350 --> 13:08.550
And that attribute is we are expecting this input type attribute to be.

13:10.160 --> 13:11.090
Password.

13:12.770 --> 13:21.110
By the way, this is showing error because this query result is not specifically returning the HTML

13:21.110 --> 13:22.250
input element.

13:22.970 --> 13:25.940
The type is associated with the input element.

13:25.940 --> 13:28.220
So we can do the casting here.

13:28.220 --> 13:36.680
We can say that the square result going to be HTML input element.

13:37.560 --> 13:42.030
So input has the type attribute now.

13:43.230 --> 13:45.780
So let's save this one.

13:46.830 --> 13:50.970
And switching back to the test output here.

13:50.970 --> 13:58.500
It is failing because actual value is text and it's not password.

13:59.070 --> 14:09.450
So this input, we don't have type set for this one and by default it is text and we can set type here

14:10.110 --> 14:12.120
to change it to.

14:13.140 --> 14:14.010
Password.

14:15.050 --> 14:16.610
So saving it.

14:17.450 --> 14:26.450
The test is passing and if I switch to a browser and type anything here, now it is masked.

14:26.720 --> 14:33.920
Now, since we are masking the password to make sure user enters the password they want, let's add

14:33.920 --> 14:37.220
another input for confirming the password.

14:37.820 --> 14:46.070
So we will have second password related input and we will do the similar controls like it's to have

14:46.070 --> 14:47.930
the password type as well.

14:48.020 --> 14:49.190
So it must be masked.

14:49.190 --> 14:57.320
So just copying last two tests which are related for the password input existence and the type of it.

14:58.190 --> 15:05.090
Now this one is for let's say it has password, repeat input.

15:05.360 --> 15:09.650
And in this one, we are going to look for label of.

15:10.670 --> 15:17.040
Like password, repeat and visible text is going to be like this password space.

15:17.060 --> 15:20.270
Repeat P and R in uppercase.

15:20.960 --> 15:23.600
Then for the type test.

15:24.250 --> 15:28.330
It has password, type for password, repeat input.

15:28.330 --> 15:31.000
And we are going to query the password.

15:31.060 --> 15:35.530
Repeat input and we will check its type attribute.

15:35.860 --> 15:42.160
Normally, we shouldn't be adding multiple failing tests, but again, we are doing repeating things

15:42.190 --> 15:45.850
here and we know how we are going to fix those.

15:45.850 --> 15:52.780
So it is okay for this kind of scenario to add multiple failing tests at a time.

15:52.780 --> 16:01.300
So saving this one and switching to the test console and here we have two failures and in the spec list

16:01.300 --> 16:04.680
we see the password type for password.

16:04.690 --> 16:06.250
Repeat input and password.

16:06.250 --> 16:07.840
Repeat input are failing.

16:07.840 --> 16:09.300
Let's fix it.

16:09.310 --> 16:10.960
The fix is again.

16:12.640 --> 16:14.450
We do buy, copy and paste.

16:14.450 --> 16:16.700
So we have this password.

16:17.180 --> 16:18.140
Repeat.

16:19.050 --> 16:23.520
For this one and password repeat.

16:23.520 --> 16:25.500
The type will be password.

16:25.500 --> 16:26.850
Let's save it.

16:27.680 --> 16:34.460
The test is passing and if we check the browser, we have the password repeat as well.

16:34.910 --> 16:38.110
Now let's add our final form element.

16:38.120 --> 16:41.420
We will have a button to submit the request.

16:42.170 --> 16:44.660
So let's create a new test.

16:44.660 --> 16:49.160
But this is almost identical with the the first test.

16:49.190 --> 16:55.460
We were checking the header, but we are going to check button this time.

16:55.460 --> 17:02.600
So just copying that test and pasting pasting here it has sign up button.

17:02.690 --> 17:05.480
Now we are going to look for button.

17:06.720 --> 17:09.390
And let's change this one to button.

17:10.750 --> 17:17.590
So this is button and we are looking for a button text content to be sign up saving it.

17:18.740 --> 17:23.210
And the test is failing because we don't have this button.

17:24.170 --> 17:26.660
And the fix is simple.

17:26.660 --> 17:30.440
We will have a button here and it will have this text.

17:31.980 --> 17:34.740
Now the test is passing.

17:35.470 --> 17:38.890
And on browser we can see the button is here.

17:39.280 --> 17:43.740
Now let's add one final test for this part.

17:43.750 --> 17:47.230
Let's make sure the button is disabled initially.

17:47.230 --> 17:53.500
Later, we will activate the button when we enter values for these inputs.

17:53.710 --> 17:56.050
So adding a new test.

17:56.870 --> 18:02.870
And in this one, it disables the button initially.

18:06.470 --> 18:09.620
So we will be again getting the button.

18:11.910 --> 18:16.410
And we expect this button.

18:17.160 --> 18:21.810
And this is going to be having the disabled attribute and this can be now.

18:21.810 --> 18:28.620
So we are adding this optional chain and we check this to be through the.

18:29.370 --> 18:35.670
So we expect this disabled attribute to be set for this one, saving it.

18:36.060 --> 18:39.540
And in this console, we can see it is failing.

18:39.840 --> 18:41.330
And let's fix it.

18:41.340 --> 18:42.960
Basically, we will add the.

18:43.930 --> 18:45.970
Disabled attribute here.

18:46.030 --> 18:53.230
Saving it now the tests are passing and if we switch to the browser we can see it is in disabled mode.

18:53.530 --> 18:57.550
So we have all the elements we need for the sign up request.

18:57.580 --> 19:03.040
Currently don't pay attention to the style part we will update those parts to.

19:03.940 --> 19:09.970
By the way, before finishing this part, let's do a minor change in our test setup.

19:10.240 --> 19:14.350
As you can see here, the tests are running in random order.

19:14.890 --> 19:19.420
When a test fails, this output makes it harder to find that test.

19:19.420 --> 19:30.040
So I'm going to change the test run order and we can do this configuration right here in the karma configs.

19:30.910 --> 19:38.830
Here in this section there is this jasmine and it also has the command about it.

19:38.830 --> 19:45.670
Like we can set jasmine configuration here and one of them is added right here.

19:46.060 --> 19:50.200
At the moment this random is true.

19:50.200 --> 20:00.730
So the test order, like the tests are running in random order and we can just change it to right here

20:00.730 --> 20:03.760
and we can say random to false.

20:04.000 --> 20:06.130
So let's save this one.

20:06.220 --> 20:14.530
And unlike the other changes we do in the source, this change does not automatically re runs the test.

20:14.530 --> 20:16.720
And if we just refresh it.

20:18.240 --> 20:26.460
We won't be seeing it in effect because this configuration initially loaded and during runtime it never

20:26.790 --> 20:27.450
checked.

20:27.450 --> 20:31.410
So we need to stop and start the test console.

20:33.500 --> 20:40.190
So here in my test terminal, I'm just killing this one.

20:41.350 --> 20:44.200
And running it once again and PM test.

20:45.540 --> 20:54.480
And if I open the test console here we are seeing the tests are running in the order we add to the test

20:54.480 --> 20:54.900
module.

20:54.900 --> 21:03.210
So the first test was it has signed up Heather and the last test was disables the button and before

21:03.210 --> 21:05.730
that we have this it has sign up button.

21:05.730 --> 21:09.360
So now this is running in this order.
