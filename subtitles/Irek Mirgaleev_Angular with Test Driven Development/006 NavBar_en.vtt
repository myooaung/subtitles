WEBVTT

00:03.260 --> 00:09.680
Now we have multiple pages and to make the navigation easier, let's have navigation bar in our page.

00:10.040 --> 00:15.830
We are going to start with the test again and opening the app component because we are adding the navigation

00:15.830 --> 00:17.150
tests into this one.

00:17.570 --> 00:21.470
So we will have again a repeating test.

00:21.470 --> 00:31.100
And just like for the routing right here, we will be having another let's say we in this time we are

00:31.100 --> 00:31.880
going to check the link.

00:31.880 --> 00:40.730
So let's say links, link tests and we will have an array this time we are going to look for the path

00:40.730 --> 00:47.690
and also we are going to query the the title of the anchors pointing to that path.

00:47.690 --> 00:58.280
So we will have the pad and for the home pad, the route URL, we are going to check for the title of

00:58.370 --> 00:59.030
home.

00:59.780 --> 01:13.190
So let's have the test link test for each and let's take the path and title and let's have the test

01:13.190 --> 01:27.620
now it and again using vertex here, let's say it has a link with title and using the title variables

01:27.980 --> 01:30.260
to path.

01:30.260 --> 01:34.820
So it's going to be like it has link with title home to forward slash.

01:35.450 --> 01:41.570
So here we are going to add the test, but in this one, we are not going to deal with navigation or

01:41.570 --> 01:41.930
anything.

01:41.930 --> 01:44.390
We are just querying the app component.

01:44.390 --> 01:47.330
It's going to be the root component.

01:47.330 --> 01:54.050
We don't need navigation to be in this one to check these anchor elements.

01:55.100 --> 01:59.270
So let's get to the anchor again.

01:59.270 --> 02:06.080
We are going to use the query selector, by the way, let's make this a bit simpler.

02:06.080 --> 02:07.520
So let's have the.

02:08.840 --> 02:13.160
The variable, let's call this one is let's say app component.

02:14.490 --> 02:16.710
And it's going to be.

02:18.950 --> 02:20.060
Component.

02:20.480 --> 02:21.650
Fixture.

02:22.760 --> 02:24.280
Native element.

02:24.290 --> 02:27.380
So then here.

02:28.520 --> 02:31.110
Let's use that component.

02:32.330 --> 02:38.180
By the way, we need to set the type for it because this is returning an HTML element.

02:38.180 --> 02:42.740
So this is going to be a HTML element.

02:42.890 --> 02:44.120
And just like this.

02:44.450 --> 02:54.830
So here we are going to get the, let's say link element and we will get it by component query selector.

02:54.830 --> 03:03.860
And we are going to get the the anchor and we specifically look for the title attribute of it, which

03:03.860 --> 03:04.850
will have.

03:05.910 --> 03:11.760
The value of a title like this.

03:13.090 --> 03:18.220
And for the assertion part, we are expecting this link element.

03:19.600 --> 03:28.250
It will have a path name and we are expecting it to equal to Pat.

03:29.140 --> 03:41.490
By the way, we are having this error because this is a HTML element and the path name is for the external

03:42.250 --> 03:44.380
anchor element right here.

03:45.280 --> 03:52.780
So we are casting the return return object as the anchor element and we are able to access to the name

03:52.780 --> 03:53.470
attributes of it.

03:53.470 --> 03:57.670
And the TypeScript compiler is not complaining at this point.

03:57.670 --> 03:59.350
So let's say this one.

04:00.090 --> 04:01.830
And the test is failing.

04:01.830 --> 04:04.830
It has linked with title home to slash.

04:05.970 --> 04:08.270
So let's fix this.

04:08.280 --> 04:20.030
We are going to have the link in the app component so we can add a div above the the container.

04:20.040 --> 04:27.930
Let's consider this container as the page content and above that one we will have this navigation bar

04:27.930 --> 04:28.200
thing.

04:28.200 --> 04:31.770
So let's have another div to gather all these anchor.

04:31.770 --> 04:42.810
So the anchor is going to have the link to this pad h ref and the title is this is the, the attribute

04:42.810 --> 04:50.160
we are querying, it's going to be home and it's a text, let's say let's say it's going to be Oxford.

04:50.190 --> 04:52.290
This is my application name.

04:52.410 --> 04:59.790
And basically I'm thinking it more like people are registering to this one and sharing the hoaxes.

05:00.330 --> 05:02.430
So let's say this one.

05:05.490 --> 05:07.770
And here we see the tests are passing.

05:08.700 --> 05:11.310
And here the test is right here.

05:12.120 --> 05:16.710
And if you open the browser here we have the link right here.

05:16.710 --> 05:23.760
So if you go to let's say sign up, then if we click to the Oxford, we are back to homepage.

05:24.060 --> 05:30.480
By the way, since we added this about the root, root it even we go to the other pages, we are seeing

05:30.480 --> 05:33.030
this link on top of the page.

05:33.480 --> 05:37.100
So we have the link for the the homepage.

05:37.110 --> 05:42.930
Let's add the next link and that's for the signup page.

05:42.930 --> 05:49.440
So we will have a link for sign up having the title of sign up, saving it.

05:49.680 --> 05:52.440
Let's show the test console and the test is failing.

05:52.470 --> 05:55.050
It has link with title sign up to sign up.

05:55.050 --> 06:04.140
So let's fix this one and we have just another anchor and it's going to be having the link to the signup

06:04.290 --> 06:12.750
and the title of this one is going to be signed up and is a text that's display sign up as well.

06:13.680 --> 06:14.670
Saving it.

06:16.650 --> 06:21.590
And the tests are passing and here we are seeing the sign uplink as well.

06:21.600 --> 06:26.520
So if I click on Sci-Fi, it's going to homepage and if I click sign up, it's going to sign a page.

06:27.690 --> 06:33.180
But the current navigation is not actually what we are looking for in the final application.

06:33.750 --> 06:39.270
So whenever we click to the links, it is basically reloading whole application.

06:39.270 --> 06:43.470
So let's show that one as well, opening the terminal and let's switch to the network tab.

06:43.500 --> 06:47.940
Let's clear this thing and let's go to the home page.

06:47.970 --> 06:55.890
Here we are seeing we are loading the JavaScript files, CSS file and basically we are loading everything

06:55.890 --> 07:01.590
and after clicking the sign up, we are loading same set of data again.

07:01.980 --> 07:07.680
So basically we are starting the application when we are navigating from one page to another, our application

07:07.680 --> 07:13.830
is actually bundled in a JavaScript file and we don't want to load the same JavaScript files again just

07:13.830 --> 07:17.960
because we are showing different component based on the new pad.

07:17.970 --> 07:24.780
And another downside of this approach is other than loading the same files from backend, we are losing

07:24.780 --> 07:26.280
the application state.

07:26.610 --> 07:30.540
We don't have the state at the moment, but we can do something like this.

07:31.980 --> 07:39.600
So here in the app component, let's say let's open the web component, CSS file as well.

07:43.090 --> 07:53.020
So here in the app component, let's have right here above the container again, let's have a button

07:54.760 --> 07:57.580
and this is going to be count button.

07:57.580 --> 08:05.380
And whenever we click this one, it's going to be increasing the counter.

08:05.380 --> 08:07.840
At the moment we don't have that one, but we will add it.

08:08.380 --> 08:11.980
So it's increasing the counter one counter by one.

08:11.980 --> 08:16.120
So here in the app component, we will have that counter.

08:16.570 --> 08:19.000
Let's say it is initially zero.

08:19.690 --> 08:25.660
So we are increasing after clicking the button in the the app component.

08:25.660 --> 08:29.770
And let's also print the count value here.

08:30.640 --> 08:32.970
So counter is right here.

08:32.980 --> 08:33.940
Let's say this one.

08:36.200 --> 08:41.450
Now we are seeing the count like here is zero and the count button.

08:41.690 --> 08:44.870
And let's go to homepage first.

08:44.870 --> 08:46.610
So I'm just clicking the count.

08:46.610 --> 08:54.140
As you can see, it is increasing and like if I click to the sign up now we are back to zero.

08:54.590 --> 08:58.910
So we are losing the application state after the navigation.

08:58.910 --> 09:01.970
So we don't want to load everything.

09:02.150 --> 09:07.880
When we are navigating, we just want our layout to be updated after the path is changed.

09:08.120 --> 09:11.600
But we are going to fix this implementation.

09:11.600 --> 09:15.290
But first, let's add a test for the navigation.

09:15.440 --> 09:19.760
At the moment we don't have the test for the navigation, but let's edit now.

09:20.150 --> 09:26.550
So again, we have a multiple test and this time let's have the error.

09:26.600 --> 09:28.880
Let's call this one navigation test.

09:29.900 --> 09:36.320
And in this one, we will have a three property.

09:36.890 --> 09:40.070
First, we need to render specific page.

09:40.400 --> 09:43.970
Then we are going to click to the specific link.

09:44.000 --> 09:48.040
Then in the end, we are going to query the visible page.

09:48.050 --> 09:51.350
So let's have the variables for each.

09:51.470 --> 09:54.020
So we will have initial path.

09:54.290 --> 09:57.860
And for this case we will be rendering the home page first.

09:58.190 --> 10:05.330
Then we are going to clicking to to the sign up link.

10:05.660 --> 10:13.370
Then in the end, we will be seeing this visible page and that's going to be sign up page.

10:14.360 --> 10:20.000
So let's add the test for this one for each.

10:20.870 --> 10:22.190
So we have.

10:23.660 --> 10:29.840
Initial pad clicking to and visible page.

10:31.650 --> 10:34.050
So the test is going to be it.

10:36.770 --> 10:38.150
It displays.

10:40.870 --> 10:42.040
Visible page

10:44.530 --> 10:49.330
after clicking clicking.

10:49.660 --> 10:56.380
So Link now we are going to have the navigation like this one.

10:56.380 --> 11:00.100
We have initial path so we will use the the route to navigate.

11:00.100 --> 11:03.250
So this test is going to be async.

11:04.810 --> 11:12.550
So the first thing we are going to do is we are going to await router navigate to the by the way, I

11:12.550 --> 11:21.520
have typo here, navigate to the initial pad, then we are going to get the link.

11:22.180 --> 11:31.320
So I'm going to use this query right here, copying this one pasting here and we are going to use the

11:31.840 --> 11:33.700
a clicking tool this time.

11:37.480 --> 11:40.780
And we are going to click to this link.

11:40.780 --> 11:48.460
But for clicking we are going to do like this in in sign up component, we are clicking the button and

11:49.270 --> 11:54.880
we were just let's find that first we were just calling the button click.

11:54.880 --> 11:59.800
But for the link element we are going to call the click again.

11:59.800 --> 12:02.890
But this time we will wait here.

12:02.890 --> 12:08.980
I will show an alternative to this one later, but at the moment it's saying that the weight has no

12:08.980 --> 12:10.660
effect, but it actually has.

12:10.690 --> 12:14.620
It's not the best approach at the moment, but we will get to that.

12:14.980 --> 12:22.780
So we are clicking to the link and this is going to be handling the navigation and we will be seeing

12:22.780 --> 12:24.010
the changes on the UI.

12:24.040 --> 12:30.010
So first make sure fixture detect changes so the UI is updated.

12:31.430 --> 12:34.740
Then we are going to query the visible page.

12:34.880 --> 12:37.340
So we expect the signup page to be visible again.

12:37.340 --> 12:45.200
I'm going to use the query right here, just copying the page query and the assertion part.

12:45.410 --> 12:50.150
So we are going to check for the visible page.

12:50.630 --> 12:58.490
So this is the the test and let's open the test console as well, saving this.

13:00.230 --> 13:02.000
Now we have failure like this.

13:02.000 --> 13:08.870
The test console is not displaying the errors because the navigation is not working as it's supposed

13:08.870 --> 13:09.170
to do.

13:09.170 --> 13:16.370
So like the navigation is basically reloading the application and that's what is causing this issue

13:16.370 --> 13:19.340
on the the karma test window as well.

13:19.850 --> 13:26.390
So in browser we are manually testing and the scenario is working there because the application is restarted.

13:26.390 --> 13:34.490
But in the test it is failing because the browser, the karma window is redirected to the to the pages,

13:34.580 --> 13:39.080
but that redirection is ending up with the not found error.

13:39.410 --> 13:44.570
So it's not able to update the UI and the test is failing.

13:44.780 --> 13:52.910
So instead of directly using the anchor element with the ref attribute, we are going to use the directive

13:52.910 --> 14:03.050
coming from the angular router and all we will do is just replace this ref with router link.

14:03.690 --> 14:07.920
So let's save this one and just.

14:10.870 --> 14:12.100
Reloading this one.

14:13.650 --> 14:16.020
And here we see the tests are passing.

14:16.020 --> 14:24.900
By the way, I just cleared the path after the port part in the car window and just hit enter to reload

14:24.900 --> 14:25.530
the test.

14:26.040 --> 14:31.170
So the test is passing so it displays sign up page after clicking sign uplink.

14:32.000 --> 14:38.870
And if we test it on browser at the moment the link is rather link is only used in the signup.

14:38.870 --> 14:43.520
So just going to the the homepage and let's click the count.

14:43.520 --> 14:49.490
So the count is increased to six and if I click to sign up here it is navigated to the signup and the

14:49.490 --> 14:52.010
count is still at six.

14:52.010 --> 15:00.080
But if we clicked to the ify the home link which doesn't have the router link attribute, let's see

15:00.080 --> 15:01.670
what's going to happen here.

15:01.670 --> 15:03.980
We see the count is back to zero.

15:04.340 --> 15:11.300
The signup link at the moment is not causing any reload and it is working as we expect it to work.

15:11.810 --> 15:15.050
So let's fix this behavior for the home link as well.

15:15.050 --> 15:24.980
So we are going to add the test to to the navigation test here and just copying the first test I'm pasting

15:24.980 --> 15:27.860
here initially this time let's open the signup page.

15:27.860 --> 15:35.300
Then we are going to click to the home and we are going to see the home page, let's say this one.

15:36.440 --> 15:41.390
And again, the karma is not able to show the result.

15:41.390 --> 15:48.200
It is not working and let's fix it by just replacing it.

15:48.440 --> 15:50.480
Rather link saving it.

15:52.130 --> 15:57.440
Now the test is running and it's properly working, then sampling the application.

15:57.440 --> 16:00.470
So let's test this one on browser as well.

16:01.730 --> 16:04.070
So we are in a home page.

16:04.070 --> 16:05.360
Let's see the count.

16:05.510 --> 16:06.260
It is five.

16:06.260 --> 16:07.510
Let's go to sign up.

16:07.520 --> 16:08.440
It is still five.

16:08.450 --> 16:12.770
Let's click count a couple of more time and let's go back to home.

16:12.860 --> 16:14.780
And Count is still not changed.

16:15.170 --> 16:20.660
So the tests are passing and the implementation is working as as we expected.

16:21.590 --> 16:23.810
Let's switch back to the karma window.

16:23.960 --> 16:35.360
Now, I mentioned about this this weight thing here, which has effect, but here you see a warning

16:35.360 --> 16:38.720
saying a weight has no effect on type of this expression.

16:38.900 --> 16:40.970
So let's see what's going to happen.

16:40.970 --> 16:42.650
If you notice, let's say this.

16:45.130 --> 16:48.160
Now we are seeing these tests are failing.

16:48.160 --> 16:49.360
These two tests are failing.

16:49.360 --> 16:54.730
And if we check the spec list right here, we will see these are failing.

16:55.060 --> 16:58.630
This wait might be a flag here.

16:58.960 --> 17:07.390
It may be fixing the things unintentionally, but to have better control, we have another option here.

17:07.390 --> 17:12.040
Basically, we are going to do something like this.

17:12.160 --> 17:22.210
So this is our test function, just cutting this one, this async and the curly braces for the function.

17:22.210 --> 17:23.320
Just cutting this.

17:23.470 --> 17:33.010
Now for handling async operations like this, Angular has the fake async utility function.

17:33.010 --> 17:36.790
So this is basically going to wrap our test function.

17:36.790 --> 17:42.250
So this is a function and we are passing our function to it.

17:42.520 --> 17:51.790
So with this way we are in control of the async operations and right here after the link element click,

17:51.790 --> 17:54.490
we can call TEQ.

17:54.490 --> 17:59.500
So basically this is simulating the async passage of time for the timers.

17:59.500 --> 18:00.910
So we are.

18:01.690 --> 18:10.290
They're moving the things forward and then this would end up the navigation to be completed.

18:10.300 --> 18:11.620
So let's say this one.

18:14.240 --> 18:17.100
And here we see the tests are passing.

18:17.120 --> 18:22.450
So having this one is more solid, more robust approach.

18:22.460 --> 18:24.920
So I will use this one.

18:25.640 --> 18:32.630
Now, at the moment we have links for the home and sign up, but let's add one more link.

18:32.750 --> 18:34.660
We have the login page as well.

18:34.670 --> 18:43.490
First, I didn't get test for the link tests and just copying this one and pasting right after the sign

18:43.490 --> 18:43.640
up.

18:43.640 --> 18:50.840
So this is going to be for login and the title is going to be login.

18:50.840 --> 18:52.190
Let's save this.

18:54.340 --> 18:59.890
So this test is failing because we don't have the that link opening the app component.

19:01.090 --> 19:11.680
So right after this signup, let's just copy the signup link and paste after the signup.

19:11.680 --> 19:13.690
And it's going to be for login.

19:15.100 --> 19:15.570
Login.

19:15.580 --> 19:16.570
Let's see this.

19:19.550 --> 19:21.430
And the test is passing.

19:21.440 --> 19:26.900
And let's also add the test for the navigation.

19:27.790 --> 19:33.860
And by the way, I just copied the sign up so I have the router link thing here.

19:33.880 --> 19:37.000
So this test is also going to pass.

19:37.940 --> 19:43.780
So initial path is sign up or we can go with the route page.

19:43.990 --> 19:45.340
Other than logging is fine.

19:45.340 --> 19:52.120
So we are going to click to the login link and in the end we will see the login page saving it.

19:54.710 --> 19:57.020
And this one is also passing.

19:57.020 --> 20:00.650
And if we test it on browser, here we are in login page.

20:00.650 --> 20:07.850
The counter is still working and if we navigate to the other pages we are not losing the state.

20:07.880 --> 20:15.590
Now we completed the navigation part, at least for the initial implementation for the navigation bar.

20:16.760 --> 20:26.900
We can remove this counter now and we can also remove the relevant button and the count from component.

20:28.540 --> 20:35.650
We are going to change the styling of the navigation bar in the next part and we are not going to have

20:35.650 --> 20:39.020
a link for the user in the navigation bar.

20:39.040 --> 20:42.190
We will only have the links for the sign up looking and homepage.

20:42.400 --> 20:49.870
Later we will have a list of users in the homepage and they will be having links to the user page.
