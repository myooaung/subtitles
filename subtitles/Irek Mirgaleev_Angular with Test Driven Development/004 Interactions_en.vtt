WEBVTT

00:03.530 --> 00:09.950
In this section, we are going to interact with the inputs and those interactions feel change buttons

00:09.950 --> 00:11.870
enabled disabled state.

00:12.950 --> 00:13.760
In this form.

00:13.760 --> 00:21.980
The button is disabled initially and let's make sure it is enabled after a user enters same values for

00:21.980 --> 00:24.170
password and password.

00:24.200 --> 00:25.190
Repeat inputs.

00:25.790 --> 00:28.550
Now let's add a test for this one.

00:28.670 --> 00:33.380
So in sign up component spec, I'm going to add the new test.

00:33.380 --> 00:37.970
But before adding new one, I'm going to add a new describe log.

00:38.060 --> 00:46.220
So the existing tests were about the layout just collapsing this one and after that adding a new one.

00:46.850 --> 00:49.910
And this is for interactions.

00:52.830 --> 01:08.340
And our first test is it enables the button when the password and password repeat fields have same value.

01:12.580 --> 01:21.610
So we will be querying the elements and then we will set values for them and we can use our previous

01:21.610 --> 01:22.300
tests.

01:22.300 --> 01:30.130
Like in each test we have this sign up like we are getting the native element and then we are querying

01:30.130 --> 01:30.550
the.

01:31.860 --> 01:34.530
Elements from the sign up.

01:34.980 --> 01:36.480
So we will do the same thing.

01:36.480 --> 01:44.910
First is this is for let's say this is for password input and we will get.

01:45.660 --> 01:51.900
Passwords, repeat input which has the ID password repeat.

01:52.110 --> 02:01.050
Now we are going to set values for these inputs and we can do it like this password input value.

02:01.080 --> 02:08.250
It has this value attribute and let's say this is going to be password.

02:08.460 --> 02:15.870
By the way, this is showing an error because at the moment it doesn't know the type of this element.

02:17.000 --> 02:18.380
To resolve this.

02:18.380 --> 02:28.040
We can cast this one to HDMI input element and we will do the same thing for password repeat input as

02:28.040 --> 02:28.520
well.

02:29.320 --> 02:31.600
So we are setting value.

02:31.630 --> 02:36.100
Then we are going to dispatch an event so that we can listen.

02:36.100 --> 02:45.790
Something is changed in this input and we can get the value from it and we will do a password input

02:45.910 --> 02:51.250
dispatch event and we will dispatch a new event.

02:51.490 --> 02:55.450
And this event is going to be input.

02:56.550 --> 03:03.150
So this is the events being triggered by the input elements whenever a user types anything.

03:03.240 --> 03:09.780
It is actually dispatching this event and in the test we are mimicking that behavior.

03:09.810 --> 03:13.140
We do those step in programmatically.

03:14.100 --> 03:18.020
And we will repeat the same thing for password repeat input.

03:18.030 --> 03:22.860
So just copying this, the password input steps and.

03:24.550 --> 03:26.230
Changing it for the passwords.

03:26.230 --> 03:26.560
Repeat.

03:26.890 --> 03:28.840
So we set.

03:29.530 --> 03:37.810
Same value for both of these inputs, then we are going to check the the button disabled attribute.

03:38.020 --> 03:39.580
Basically, we can get the button.

03:40.490 --> 03:41.390
Like this.

03:43.370 --> 03:48.470
So we get the button, then we check if the button disabled attribute.

03:48.470 --> 03:50.750
But this time we expect this to be.

03:52.030 --> 03:52.840
Falsey.

03:52.840 --> 03:59.500
So initially, this is the initial case where we don't have any value set for these inputs.

03:59.650 --> 04:05.620
We expect this button to be disabled, this disabled attribute to be having the security value.

04:05.620 --> 04:12.760
But in this test we are feeling these inputs and we are expecting this disabled to be false.

04:12.760 --> 04:14.590
So it shouldn't be disabled.

04:14.830 --> 04:21.010
By the way, in this test, we have a missing step right here.

04:21.010 --> 04:27.670
We will add a step in between the changes and querying the button.

04:28.600 --> 04:29.950
We will get to that.

04:29.950 --> 04:33.220
But let's assume the test is okay.

04:33.430 --> 04:39.790
So before saving the change here, switching to the karma window and saving the changes.

04:40.720 --> 04:42.670
Tests are executed again.

04:42.670 --> 04:52.420
And if we check the spec list here, we see our test is failing and the failure is basically we are

04:52.420 --> 04:57.520
expecting this value to be false, but it is true.

04:57.670 --> 04:59.650
Now let's fix this.

05:00.070 --> 05:06.340
Now we need to get the values of these inputs, the password and the password repeat.

05:06.400 --> 05:13.950
And we will act based on the values and we will update this buttons disabled status.

05:13.960 --> 05:18.910
First of all, we must be able to dynamically set this disabled attribute.

05:19.060 --> 05:26.920
By the way, switching back to the application, because our change will have effect right here.

05:27.070 --> 05:35.230
So to have dynamic value for this disabled attribute of the button, we need to keep track of the state

05:35.230 --> 05:36.310
in the component.

05:36.310 --> 05:42.040
And basically in component we can have let's open the component, sign up.

05:43.460 --> 05:51.920
The Yes, right here in the component, we can have properties and let's say we will have property named

05:51.920 --> 05:53.420
as disabled.

05:53.420 --> 05:56.840
And initially let's say this is going to be true.

05:57.290 --> 06:07.340
So this property can be used for tracking the buttons disabled state and we can use this property in

06:07.340 --> 06:08.780
the template.

06:09.020 --> 06:16.850
And right here we can tell this disabled value must be coming from this property and this is called

06:16.850 --> 06:19.010
this property binding.

06:19.160 --> 06:25.580
So we are saying that this buttons disabled attribute.

06:26.560 --> 06:33.310
Is going to be taking value from disabled property in the class.

06:34.020 --> 06:36.150
So the syntax is like this.

06:36.150 --> 06:44.130
This is called this property binding and the disabled attribute of the button will have the value of

06:44.130 --> 06:47.580
the disabled property in the class.

06:48.270 --> 06:50.430
So if we save these changes.

06:51.410 --> 06:57.860
We don't see any change right here because this is, I think, the true values or the button is disabled.

06:57.860 --> 07:00.440
But if we change it to false.

07:01.610 --> 07:04.350
Now we see the button is enabled.

07:04.370 --> 07:09.920
So basically we will use this one, we will update this value.

07:09.920 --> 07:15.560
Then it's going to be updating corresponding elements state.

07:16.360 --> 07:24.220
Now we need to make sure that user enters same values for password and password repeat before changing

07:24.220 --> 07:25.990
this value to false.

07:26.560 --> 07:36.310
And one way to do this is to listen the events triggered in these inputs, and we can have event listener

07:36.310 --> 07:38.170
functions in the component.

07:38.170 --> 07:39.000
Let's have one.

07:39.010 --> 07:42.700
Let's say we have a function on change password.

07:45.140 --> 07:53.990
And we can call this function when whenever, for instance, this input has changed.

07:54.500 --> 08:01.880
Remember in the test we are dispatching this input event, which is actually the event is triggered

08:01.880 --> 08:04.980
from the component in browser too.

08:05.000 --> 08:07.010
So here in the.

08:08.510 --> 08:09.500
The template.

08:09.530 --> 08:16.790
We can associate the events with our functions right here.

08:16.790 --> 08:18.650
And this is called this event binding.

08:18.650 --> 08:20.390
So we are.

08:21.500 --> 08:24.320
Event binding syntax is in parentheses.

08:24.320 --> 08:33.470
We give the event name we are looking for and we are going to get the input events and then we assign

08:33.470 --> 08:38.330
the event listener and that event listener is on change password.

08:38.330 --> 08:46.430
So whenever this input has any input events, our function will be called.

08:46.850 --> 08:55.730
But we need to know the details of this component so that we can access its value attribute to get the

08:55.730 --> 08:57.320
value user entered.

08:57.590 --> 09:02.720
And to do that, we can call this function by passing.

09:03.910 --> 09:05.860
Actual event object.

09:05.860 --> 09:11.440
So this is the event generated by this input element.

09:11.440 --> 09:15.010
So whenever we type something here, it's generating an event.

09:15.010 --> 09:21.640
This is the input event and it is calling this own change password with that event object.

09:21.640 --> 09:27.220
And here in Don't Change Password, we can take the event.

09:30.290 --> 09:35.620
Then from this event we can get the target.

09:35.630 --> 09:39.040
The target is the input element.

09:39.050 --> 09:43.220
So let's have the casting as HTML.

09:44.680 --> 09:45.760
Important event.

09:46.570 --> 09:51.340
And from this one we can get the value.

09:51.340 --> 09:55.450
So this is the value in the password input.

09:56.260 --> 10:04.600
And we can use again a class property and let's say we have the password and initially it is empty and

10:05.200 --> 10:16.690
after the events coming from the password input, we will just update the password with the value of

10:17.030 --> 10:23.770
that element and we can do the same thing for the one change password.

10:23.770 --> 10:24.580
Repeat.

10:25.990 --> 10:33.700
So let's say password repeat and we are going to update the password repeat field we have here.

10:38.120 --> 10:39.080
And.

10:39.900 --> 10:40.710
We will.

10:42.090 --> 10:50.220
Again bind the input event here and we are going to call on change password repeat because this is the

10:50.310 --> 10:53.010
password repeat input.

10:53.520 --> 10:58.350
So with this way, we will be able to get the values of these inputs.

10:58.860 --> 11:05.010
Then we can use these functions again and update this disabled.

11:05.010 --> 11:14.340
So we can say this disabled is the expression, this password.

11:15.110 --> 11:24.410
If it is not equal to this password repeat, then this is going to be true, which will make the button

11:24.410 --> 11:25.280
disabled.

11:26.100 --> 11:29.220
And we will do the same thing here as well.

11:30.210 --> 11:34.470
So it's not just updating the password, but also updating this disabled.

11:34.860 --> 11:43.140
And since disabled is updated, that is going to be changed the disabled status of the button.

11:43.140 --> 11:46.690
But let's correct this part.

11:46.710 --> 11:54.180
Initially, the button will be disabled, so let's set it back to true and let's save these changes.

11:55.680 --> 12:04.440
Now in browser the button is disabled and if I type anything here, let's say this is a and I type same

12:04.440 --> 12:05.610
thing to the password repeat.

12:05.610 --> 12:12.960
Now we see the button is enabled but if I type anything else the there's a mismatch and the button is

12:12.960 --> 12:14.040
disabled.

12:14.040 --> 12:16.470
So this is working.

12:16.470 --> 12:23.910
But let's check the karma window here we see the interactions test is failing.

12:24.420 --> 12:30.960
We have verified that it is working in browser but this one is failing.

12:31.320 --> 12:38.370
So if you remember I mentioned about the missing part in the test and that part is.

12:39.100 --> 12:49.300
Actually in in the before each here we see that one this fixture that changes is the one we need to

12:49.300 --> 12:50.860
do here as well.

12:51.280 --> 12:56.530
So Angular is by default not applying the UI changes immediately in the test.

12:56.620 --> 13:04.990
So it allows us a delayed change detection and this is intentional and it gives us the opportunity to

13:04.990 --> 13:12.400
inspect the state of the component before Angular initiates that are binding or the lifecycle hooks

13:12.400 --> 13:12.910
those things.

13:12.910 --> 13:21.760
So here we are going to tell Angular to update the UI and we do that by calling fixture detect changes.

13:22.780 --> 13:25.000
So let's save this one.

13:26.260 --> 13:28.630
Now the test is passing.

13:28.930 --> 13:36.430
So in cases like where our events trigger UI changes, then we should be calling this fixture detect

13:36.430 --> 13:38.590
changes to update the UI.

13:39.550 --> 13:41.860
So we fixed the test.

13:42.160 --> 13:45.760
But we can do better with the implementation.

13:45.760 --> 13:47.980
We are repeating ourselves here.

13:48.130 --> 13:53.590
Now the disabled property is not necessary anymore.

13:53.890 --> 13:58.840
Instead of having disabled here, let's remove this.

13:59.890 --> 14:09.010
And here in the template, we can use the the password and password to repeat equality.

14:09.010 --> 14:16.060
So we, we can have an expression here and we can basically say if password is not equal to password,

14:16.480 --> 14:17.350
repeat.

14:19.180 --> 14:20.980
So saving these changes.

14:21.670 --> 14:28.300
Now we have a failure and that one is our layout test.

14:28.300 --> 14:30.550
It disables the button initially.

14:30.670 --> 14:38.110
So this one is failing because initially the password and password repeat are same.

14:38.200 --> 14:41.380
So when they are same, the button is not disabled.

14:41.380 --> 14:50.100
So let's enhance this expression instead of directly checking their equality, let's make sure at least

14:50.100 --> 14:54.970
the password or password repeat has a value so we can do something like this.

14:54.970 --> 14:59.380
If password has value, then let's do this.

15:01.740 --> 15:02.730
Expiration.

15:02.850 --> 15:06.780
Otherwise, let's make sure this button is disabled.

15:07.050 --> 15:13.800
So if we don't set any value for a password and let's say the button will be disabled, let's save this

15:13.800 --> 15:14.310
one.

15:15.890 --> 15:18.190
And this is working.

15:18.200 --> 15:24.650
But having this expression right here makes this code a bit harder to read.

15:24.950 --> 15:33.410
So let's apply the style guides of the Angular, and let's put the presentation logic into components.

15:33.410 --> 15:37.460
So what I will do is I'm just cutting this part.

15:38.300 --> 15:44.930
And here in the component, I will have a function that's called this one is disabled.

15:46.570 --> 15:55.770
And basically this is going to be a returning this expression, but we need to refer to the variables

15:55.780 --> 15:59.410
with this here, this password.

16:00.400 --> 16:05.080
This password and this password repeat.

16:05.260 --> 16:12.910
Now in the template we can just call is disabled and let's say these changes.

16:14.450 --> 16:17.420
And the tests are passing, by the way.

16:17.450 --> 16:22.910
Angular has built in form solutions, template driven and reactive forms.

16:23.000 --> 16:25.260
At the moment we are not using any of them.

16:25.280 --> 16:33.200
Currently, what we are doing is almost similar to what we would do in react or view projects, but

16:33.200 --> 16:37.190
we will refactor our form to angular forms later.

16:37.250 --> 16:40.100
At that moment we won't be updating our tests.

16:40.190 --> 16:46.580
In fact, our tests will verify that our refactor is not breaking anything.
