WEBVTT

00:03.190 --> 00:06.760
Now we have this form and we are able to send the request to vacant.

00:06.760 --> 00:12.580
And when we send a request we are just having this URL right here.

00:12.580 --> 00:15.850
We don't have the host part in this request.

00:16.360 --> 00:24.700
So the development server of the application is running on this port localhost 4200 But the back end

00:24.700 --> 00:31.060
application you find in the resources of this course is running on localhost, 80, 80 and make sure

00:31.060 --> 00:33.730
you run that back, end the application.

00:33.730 --> 00:34.810
We are going to use it.

00:34.810 --> 00:39.100
But before let me show what's going on at the moment.

00:39.100 --> 00:43.780
So opening the developer tools, let's clear the console.

00:43.900 --> 00:48.910
Let's send the requests to this post.

00:48.910 --> 00:49.900
End Point.

00:55.560 --> 01:01.620
At the moment we are sending this request and we don't specify any anything about the host part and

01:01.620 --> 01:06.150
the request is going to this local 4200 and is a response.

01:06.150 --> 01:12.270
We are receiving this 404 not fund because again, this is being handled on the angular development

01:12.270 --> 01:16.020
server and it is it doesn't know anything about this end point.

01:16.110 --> 01:19.380
So it is returning this 404 not found.

01:19.380 --> 01:25.110
So let's send this request to our back end and we can do it like this.

01:25.110 --> 01:28.020
Just adding the host part to this URL.

01:28.080 --> 01:30.450
It's a htp localhost.

01:31.390 --> 01:34.750
And Port is 88 saving it.

01:35.970 --> 01:40.020
Now the client is restarted, opening the developer tools once again.

01:40.590 --> 01:44.430
The actual backend server has the validation and there are existing users.

01:44.430 --> 01:51.750
So let's send a request and let's make sure we send a valid request and we send the request for a non-existing

01:51.750 --> 01:52.050
user.

01:52.050 --> 01:55.080
So first let's clear the logs here.

01:55.560 --> 02:01.920
There are 25 users in backend and a username must be at least four characters.

02:02.040 --> 02:10.290
Email is also must be an email correct email formatted and the password must be having eight characters,

02:10.470 --> 02:15.780
one uppercase letter, one lowercase letter, and one number.

02:15.780 --> 02:18.090
So we have to obey these rules.

02:18.090 --> 02:29.790
So like filling the form for user 30 zero 30 and mail com and password is containing all the.

02:31.470 --> 02:33.150
Required characters.

02:33.270 --> 02:39.480
Now let's send the request now in the network tab we see to request.

02:39.570 --> 02:42.130
One is for the post.

02:42.150 --> 02:44.430
The other one is for the options.

02:44.460 --> 02:49.060
This option is sent because we are sending requests to localhost 88.

02:49.080 --> 02:52.890
But the application is running, running on localhost 4200.

02:53.100 --> 03:00.240
So the hosts are not matching and browser is trying to figure out if backend is allowing such requests.

03:00.240 --> 03:05.280
So that's why it is sending these options and it returns success for that one.

03:05.280 --> 03:13.710
The backend is returning success, so it's able to send this post request to the backend and backend

03:13.710 --> 03:21.060
is returning the response with the user's ID and all the other fields of that user.

03:21.870 --> 03:26.910
Now this is working in browser, but if you check the test console here, we can see the tests are failing

03:26.910 --> 03:32.010
because in the tests we are not defining the host part.

03:32.400 --> 03:37.380
Like we only look for the request to going to this API one zero users.

03:37.380 --> 03:42.240
But now we updated the request in the application.

03:42.240 --> 03:46.620
So the test is receiving whole URL.

03:46.620 --> 03:52.230
Therefore it is saying there is no match here and the test is failing.

03:52.890 --> 03:58.860
And the other thing is like we shouldn't be adding this host part to our application code because if

03:58.860 --> 04:04.230
we do, then when we deploy the application, we must be updating these URLs accordingly.

04:04.230 --> 04:09.570
So instead of having these values in the code, let's do something like this.

04:09.570 --> 04:12.780
Let's, let's make sure we remove this host part again.

04:12.780 --> 04:19.770
So we are back to the way it was and let's change the English Development Server behavior.

04:20.760 --> 04:24.630
It has the proxy configuration and we are going to use that.

04:25.020 --> 04:29.970
So in project folder, root folder.

04:30.800 --> 04:36.290
Create a new file and let's call this one as proxy conf json.

04:37.070 --> 04:41.810
And in this one, this is a json we will have.

04:43.790 --> 04:50.510
Pat that this development server will be checking and that path will be starting with forward slash

04:50.510 --> 04:50.910
API.

04:50.930 --> 04:53.510
So whenever any request goes to this.

04:54.380 --> 04:54.970
URL.

04:55.100 --> 05:00.500
So like here we are sending API one zero users API and so on.

05:00.650 --> 05:09.950
So this is going to be applied for all the URLs starting with this API and we are setting an object

05:09.950 --> 05:13.010
for it and whenever we see this request.

05:14.520 --> 05:18.330
They will be targeted to our backhand.

05:19.130 --> 05:20.790
You should be local.

05:20.810 --> 05:22.640
Host 88.

05:23.730 --> 05:27.940
And your pecans may support HTTPS or HTP.

05:27.960 --> 05:31.920
So like in those cases, we can set the additional configurations.

05:31.920 --> 05:38.790
Like we can say this is a secure connection as true or false.

05:38.910 --> 05:46.980
So this is not just for setting the target, but we can also set additional configuration for this one

05:46.980 --> 05:47.280
as well.

05:47.280 --> 05:56.220
So saving this configuration and we are going to update the START script right here in scripts.

05:56.220 --> 06:05.520
We are calling this start with the end serve, but we are going to now tell it to use this proxy configuration

06:05.520 --> 06:17.460
and we do that by adding two dashes, proxy dash config and the proxy config file which is proxy convert

06:17.850 --> 06:18.750
JSON.

06:19.990 --> 06:20.910
Saving it.

06:20.920 --> 06:23.170
Now we need to stop and start the application.

06:23.170 --> 06:31.600
And this is my terminal for the application, just killing this one and running in start once again.

06:31.690 --> 06:38.320
Now we see it is running with this proxy configuration and just reloading the browser.

06:38.320 --> 06:40.330
Here the application is opened.

06:40.360 --> 06:42.040
Let's open the developer tools.

06:44.470 --> 06:46.810
Now sending another request.

06:46.810 --> 06:49.240
User 32.

06:49.840 --> 06:52.960
User 22 ID Vehicle.

06:53.530 --> 06:54.610
Password.

06:55.270 --> 06:56.920
Password.

06:58.430 --> 07:07.310
Now sending the request here we see only one request going and that is going to this local host, 4200.

07:08.040 --> 07:14.210
But now we have the proxy configuration, which is proxy that requests to the back end.

07:14.220 --> 07:16.260
And as a result we are receiving 200.

07:16.270 --> 07:16.550
Okay.

07:16.560 --> 07:19.200
With this new user's ID.

07:19.560 --> 07:24.960
So with this way in the code, we don't have anything about the host URL.

07:25.440 --> 07:31.620
We just configured the development server to proxy the request to the backend.

07:31.650 --> 07:34.130
Now let's demonstrate this one once again.

07:34.140 --> 07:39.010
So here in the browser, we are sending the request to this endpoint API.

07:39.030 --> 07:47.400
Once users before the configuration, this request was going to this localhost 4200 and since it doesn't

07:47.400 --> 07:51.660
know anything about this URL, it was turning back four or four not found.

07:51.810 --> 07:55.830
But then we add this proxy configuration to it.

07:55.830 --> 08:04.050
So after we send the request to this endpoint, again, the development server proxy that requests to

08:04.050 --> 08:09.480
the backend running at localhost 8080 then the backend is returning 200.

08:09.490 --> 08:10.150
Okay.

08:10.170 --> 08:15.180
Then the angular server is processing that 200 OC back to us.

08:15.450 --> 08:18.330
So that's how the proxy functionality is working.
