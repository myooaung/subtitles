WEBVTT

00:03.210 --> 00:09.720
Now we are able to send our requests, but from user point of view it's not visible if anything is done

00:09.720 --> 00:10.530
about it.

00:11.100 --> 00:13.890
So let's show it like this.

00:14.580 --> 00:21.450
Just clearing the console and let's change the network speed right here to the slow 3G, just filling

00:21.450 --> 00:22.320
the form.

00:22.770 --> 00:25.680
User one This is an invalid request, by the way.

00:32.530 --> 00:38.230
So if I click sign up here, the API call is in progress.

00:38.230 --> 00:43.360
But during that progress we don't see anything about on the UI part.

00:43.390 --> 00:51.130
User is not aware if there is an action going on after that click or here I can click multiple times

00:51.130 --> 00:54.460
and each of them are triggering an API call to back.

00:54.460 --> 00:58.830
And so these are not something that we should be allowing user to do.

00:58.840 --> 01:05.380
First of all, we need to provide a feedback to user about their interaction is actually having an ongoing

01:05.380 --> 01:10.750
action so that user would be waiting that ongoing process to be finished.

01:10.750 --> 01:12.850
So for this one.

01:13.920 --> 01:20.580
Let's add disabled functionality so the user won't be able to click multiple times when there is an

01:20.580 --> 01:21.570
ongoing action.

01:21.900 --> 01:27.930
So, so we are going to disable this button and also we are going to display some kind of indicator

01:27.960 --> 01:30.360
about there is an ongoing action.

01:30.840 --> 01:33.600
So let's start with the test once again.

01:34.590 --> 01:36.960
So we are going to add our test to the sign up.

01:37.680 --> 01:39.360
Spec us.

01:40.290 --> 01:44.880
But the tests are going to be quite repeating.

01:45.270 --> 01:49.860
Like the others, we are going to fill the form, then we are going to click the button, then we will

01:49.860 --> 01:54.150
check the buttons, state and the the the layout we are looking for.

01:54.150 --> 02:01.380
So instead of repeating each in these tests, we are going to have a setup function and in that setup

02:01.380 --> 02:06.450
we will do the repeating part and we will just call the setup in each test.

02:06.450 --> 02:13.290
So the the functionality we are going to repeat is basically this one in this test, we were querying

02:13.290 --> 02:19.350
the input elements, then we were filling the form, then we were clicking the button.

02:19.350 --> 02:25.530
So until this line, the querying the button, we are going to repeat those.

02:25.530 --> 02:29.850
So just cutting this part, just cut it.

02:30.330 --> 02:38.070
Then here in the interactions described, look, let's create a function, let's call this one is setup

02:38.070 --> 02:38.880
form.

02:39.540 --> 02:47.850
So we will do that in this function just pasting the the content I cut from this test.

02:47.940 --> 02:52.800
But in this one we are using the button and also we are using the HTTP testing controller.

02:52.800 --> 02:56.070
So let's make sure we have those variables here.

02:56.070 --> 03:04.170
We will have the button and let's say this is initially any and we will have a CTP testing controller

03:04.560 --> 03:10.110
which is going to be a HTTP testing controller type of variable.

03:10.770 --> 03:12.870
And we are going to.

03:13.820 --> 03:19.190
Assign them in this setup form and for the button as well.

03:20.110 --> 03:25.000
And we will also use this fixture, native element, the sign up in the test.

03:25.000 --> 03:29.440
So let's make sure we have the sign up as.

03:30.570 --> 03:32.370
Variable here as well.

03:35.140 --> 03:39.190
First of all, let's say the type will be extremely relevant.

03:40.930 --> 03:45.910
Now in this test, we are going to just call the setup form.

03:47.180 --> 03:50.390
And we can do the same thing in this one as well.

03:50.420 --> 03:56.210
For this test, we were checking buttons to be enabled and we were filling the password and password

03:56.210 --> 03:57.560
repeat fields.

03:58.400 --> 04:00.080
Now we can call this setup form.

04:00.080 --> 04:08.030
This is also filling the user and email fields, but that's not affecting this one.

04:08.030 --> 04:13.100
So we can use the same function setup form here.

04:13.100 --> 04:16.970
So just deleting these lines.

04:16.970 --> 04:23.690
So in this one we were creating the elements, filling the field input and a password and password repeat

04:23.690 --> 04:24.260
inputs.

04:24.260 --> 04:30.620
Then we are creating the button and these are already being done in this setup form.

04:31.310 --> 04:39.680
So before saving this one, let's move the karma to the front, saving it and the tests are still passing.

04:40.870 --> 04:43.530
Now let's add our next test.

04:43.540 --> 04:46.990
We are going to disable the button when there is an ongoing API call.

04:46.990 --> 04:49.570
So the test is it.

04:50.640 --> 05:01.170
Disables a button when there is an ongoing API call, so we will call the setup form.

05:02.460 --> 05:04.920
Then we are going to click the button.

05:07.650 --> 05:10.380
So this click will disable the button.

05:10.380 --> 05:19.830
So we we must be calling fixture detect changes so that if this is going to disable the button, then

05:19.830 --> 05:23.490
this needs to be reflected to the UI.

05:23.910 --> 05:26.370
So we call fixture detect changes.

05:27.200 --> 05:30.650
Then we try to click the button the second time.

05:32.420 --> 05:40.220
And for the assertion part, we are going to receive a request to this one and we only expect one request.

05:40.220 --> 05:45.080
We don't expect multiple, so we can use this one here.

05:46.250 --> 05:56.630
And we also expect button buttons disabled property to be.

05:57.320 --> 05:58.130
30.

05:59.900 --> 06:01.610
So we are clicking the button.

06:02.690 --> 06:05.340
We make sure the UI is updated.

06:05.360 --> 06:12.740
Then we try to click once more and this is going to be making API call to this endpoint and we expect

06:12.740 --> 06:14.470
this button to be disabled.

06:14.510 --> 06:16.220
So let's save this.

06:17.850 --> 06:22.560
So the test output is actually helping us about current behavior.

06:22.560 --> 06:30.510
Here in the testing control controller, we say we are expecting only one call to this end point, but

06:30.510 --> 06:31.980
we clicked twice.

06:32.340 --> 06:39.300
So here expected one matching request for criteria but found two requests.

06:39.300 --> 06:43.050
So basically this is saying the button is not disabled.

06:43.050 --> 06:49.380
We are able to click it second time and that's why this is receiving second request.

06:49.380 --> 06:54.270
And also since this is failing at this line, it's not checking if it's disabled or not.

06:54.510 --> 06:58.230
So let's fix this one for this one.

06:58.230 --> 07:01.140
Let's open the sign up component test first.

07:01.260 --> 07:09.120
For this one, we can track the progress of the API request and let's have a properties here in this

07:09.120 --> 07:12.000
class and let's call this one is API progress.

07:12.780 --> 07:18.600
And initially let's say it's going to be false because the very beginning of the component initialization,

07:18.600 --> 07:19.980
there is no API progress.

07:20.190 --> 07:23.550
So as soon as user clicks the sign up.

07:24.320 --> 07:26.210
It's going to be calling this function.

07:26.210 --> 07:30.830
Then we can say this API progress to be true.

07:31.400 --> 07:34.640
So we are updating that value.

07:34.670 --> 07:45.680
Then we can use this API progress in sign up component html for this button so we can disable the button

07:45.680 --> 07:52.250
based on this disabled function which is checking the equality of the password and password.

07:52.250 --> 07:53.390
Repeat, but also.

07:54.760 --> 07:56.170
So like here.

07:57.020 --> 08:00.200
Is disabled or API progress.

08:00.200 --> 08:07.130
So if API progress is also set, then the button will be disabled saving these changes.

08:08.090 --> 08:13.460
Now the test is passing and let's try this one on browser.

08:14.810 --> 08:20.060
Right here, changing the network to slow.

08:20.970 --> 08:22.830
Let's fill the form.

08:29.690 --> 08:33.320
Now clicking the sign up and here we see the button is disabled.

08:33.320 --> 08:36.230
And if I try to click that one, it's not working.

08:36.790 --> 08:42.650
And current implementation is not reverting the state back to not disabled.

08:42.650 --> 08:45.560
So the button is remaining as disabled.

08:45.560 --> 08:50.330
We are going to fix that part, but at the moment we achieved what we are looking for.

08:50.330 --> 08:58.340
So as soon as we click the button it is disabled and it's not allowing second click to go through.

08:58.820 --> 09:05.630
Now, other than just disabling the button, it's better to display an indicator like a spinner here

09:05.630 --> 09:06.500
in the bootstrap.

09:06.500 --> 09:08.000
Let's find that spinner.

09:09.900 --> 09:13.050
And here for the buttons section.

09:13.050 --> 09:20.790
Here we have this Spinner Progress Indicator and we can use this one in our component.

09:20.880 --> 09:26.580
So the one I'm going to use is the second option here, this one.

09:26.580 --> 09:30.840
So there is this button and there is this span.

09:31.050 --> 09:33.030
And that's the one.

09:33.030 --> 09:34.230
This is the rotating thing.

09:34.230 --> 09:36.000
And there is this loading text.

09:36.000 --> 09:43.440
So we will have this spinner and then we will have this signup text for our case.

09:43.950 --> 09:55.170
So we will add this one and we are going to check the existence of this element and we can use like

09:55.170 --> 09:57.390
the role right here.

09:57.690 --> 10:03.570
So we are going to add the test for this one at the moment and we are going to query it based on this

10:03.570 --> 10:04.200
role.

10:04.380 --> 10:10.440
So just keep in mind that we are going to look for a span having this role status.

10:10.440 --> 10:12.630
So let's add our test first.

10:15.030 --> 10:18.030
So in this one it.

10:18.930 --> 10:23.490
Display's spinner while the API request.

10:24.990 --> 10:27.210
Is in progress.

10:28.740 --> 10:31.270
So we call setup form.

10:32.790 --> 10:34.680
We click the button.

10:36.890 --> 10:42.350
Then we make sure the UI is updated.

10:42.530 --> 10:53.100
Then we are going to get the spinner and the spinner is like we have the sign up query selector.

10:53.120 --> 10:54.410
We are looking for.

10:55.400 --> 10:59.210
For spin and that Ben has this.

11:00.340 --> 11:03.760
Role attributes and the role is status.

11:05.860 --> 11:08.170
So we expect this.

11:09.170 --> 11:10.130
To be.

11:11.460 --> 11:12.180
30.

11:14.260 --> 11:15.820
So this is the test.

11:16.300 --> 11:17.230
Saving it.

11:19.020 --> 11:20.640
So this is failing.

11:23.080 --> 11:23.590
Here.

11:23.590 --> 11:27.370
This test is failing and the fix is going to be simple.

11:27.370 --> 11:28.810
We will just add.

11:30.280 --> 11:31.870
This span.

11:34.210 --> 11:35.350
Right here.

11:36.180 --> 11:38.310
Before the sign up text.

11:38.310 --> 11:41.130
This is a child element to the button.

11:41.700 --> 11:43.170
So we have this span.

11:43.560 --> 11:45.690
Then after that span, we have the.

11:46.800 --> 11:49.050
Text just saving this one.

11:50.800 --> 11:53.260
Now one of our previous tests is failing.

11:53.260 --> 11:54.370
We will get to it.

11:55.240 --> 12:02.920
But if we check the the test, the display spinner, while the API request is in progress, it is working.

12:02.920 --> 12:08.050
And if we open the browser, we see the spinner is visible.

12:08.050 --> 12:10.300
But it is always visible.

12:10.330 --> 12:14.710
It's not shown conditionally like for button disabled case.

12:14.740 --> 12:20.440
We update that disabled status during the API progress, but the spinner visibility is not dependent

12:20.440 --> 12:23.350
onto the the API progress at the moment.

12:24.690 --> 12:33.780
So we are going to add a new test to make sure the spinner will only be visible during the API call.

12:34.260 --> 12:38.190
But first, let's focus to the failing test.

12:39.650 --> 12:41.120
So this it has sign.

12:41.120 --> 12:43.280
A button is failing.

12:43.580 --> 12:45.440
Let's find that test.

12:46.410 --> 12:48.390
It has.

12:49.970 --> 12:51.080
Sign up button.

12:51.650 --> 13:01.520
So this one is failing because this is looking for the the button text content to be exactly to this

13:01.520 --> 13:02.030
one.

13:02.900 --> 13:13.910
But as we change the markup like we add entered here so it adds spacing around this signup text and

13:13.910 --> 13:22.520
instead of having the exact equality check like to be instead of looking for it to be something we can

13:22.520 --> 13:25.610
use to contain here.

13:26.380 --> 13:32.200
So like we are looking for this button text to contain this signup text.

13:32.290 --> 13:40.600
So this would make our tests more robust in terms of like the format of our HTML documents.

13:40.840 --> 13:45.940
Like if we change the format of the documents, our test wouldn't be affected from that one.

13:45.940 --> 13:52.030
So let's say this, and if the test is not automatically running, make sure you reload it.

13:53.190 --> 13:57.510
Now the tests are passing, all tests are passing.

13:57.510 --> 14:00.950
Now we can focus to the functionality we are looking for.

14:00.960 --> 14:06.180
So the spinner visibility must be dependent onto the API request.

14:06.180 --> 14:11.250
So if there is no API request, then there shouldn't be spinner on the page.

14:11.550 --> 14:21.480
So for this one we can add a new test and we can say it does not display spinner when there is no API

14:21.480 --> 14:22.230
request.

14:26.740 --> 14:29.170
And for this one we can do like this.

14:29.170 --> 14:33.040
We just call the setup form and we just.

14:33.920 --> 14:34.880
Query the.

14:35.730 --> 14:39.240
This this element without clicking the button.

14:39.240 --> 14:45.510
We just queried the span with this role of status and we expect this to be.

14:47.250 --> 14:48.000
Falsey.

14:49.030 --> 14:49.960
Saving it.

14:51.240 --> 14:56.790
Now this one is failing because we have that spinner in the component.

14:57.120 --> 15:00.030
Now we are going to display the spinner conditionally.

15:01.250 --> 15:05.030
So here in the sign up component is HTML.

15:05.060 --> 15:10.400
This part will only be visible based on this API progress.

15:10.400 --> 15:13.880
So we are going to use the engine.

15:13.910 --> 15:23.570
If directive and the implementation is like this, we will have star and G if and.

15:24.560 --> 15:27.320
The condition is this API progress.

15:27.320 --> 15:32.660
So if this API progress is true, then this span will be visible.

15:32.780 --> 15:38.180
And if this API progress is false, then the span will not be visible.

15:38.510 --> 15:39.680
Saving this one.

15:41.910 --> 15:44.070
And the tests are passing.

15:44.070 --> 15:50.430
By the way, instead of having two separate test cases for the spin or visibility, we could have fit

15:50.430 --> 15:52.200
these into a single test.

15:52.620 --> 15:56.610
So like here, let's update this test.

15:56.610 --> 15:58.650
So it displays spinner.

15:59.340 --> 16:05.790
And let's update the description after clicking the submit.

16:06.540 --> 16:09.720
So just removing rest.

16:10.020 --> 16:16.950
Now the test description is telling us what to query and when to query those things.

16:16.950 --> 16:27.300
So after setup form before clicking the button, we are checking this status span to be false.

16:27.330 --> 16:31.380
Then after clicking the button we are looking for it to be treated.

16:31.380 --> 16:35.250
Now we don't need this second test saving this one.

16:37.300 --> 16:39.160
So this is working.

16:39.490 --> 16:43.910
I have to mention that we shouldn't be doing multiple assertions in a test.

16:43.930 --> 16:48.120
The intention is to make the failing test easy to debug.

16:48.130 --> 16:54.520
But for this case, these two assertions are highly correlated and it fits to the test description.

16:54.520 --> 17:01.360
So whenever we see a failure in this test case, it will not be taking too much time to figure out which

17:01.360 --> 17:02.950
expect is failing.

17:02.950 --> 17:08.410
So we verify the implementation is working, but we didn't test it on browser yet.

17:08.830 --> 17:09.910
Let's do that.

17:10.890 --> 17:13.500
Just changing the network to slow.

17:13.530 --> 17:15.060
Let's clear the logs.

17:16.480 --> 17:19.120
Filling the form with user one.

17:24.390 --> 17:27.810
So like here, sending a sign up request.

17:27.810 --> 17:30.780
We have the spinner and the button is disabled.

17:30.810 --> 17:32.670
At the moment we are not doing anything.

17:32.670 --> 17:39.660
After we receive the response, we are going to handle that part in the future lessons.
