WEBVTT

00:03.310 --> 00:08.110
Now let's implement the login page and the login functionality.

00:08.320 --> 00:12.610
Now the login page is going to be something similar to the signup page.

00:12.880 --> 00:17.650
Like we will have the inputs, email and password inputs only.

00:17.650 --> 00:20.710
We will not have the username or password repeat.

00:20.980 --> 00:24.160
So generally it will be same.

00:24.640 --> 00:26.410
Other than these two inputs.

00:26.410 --> 00:33.400
So we will be doing the same tests like checking the existence of these inputs.

00:33.970 --> 00:39.160
And also again, we will start with the button to be disabled.

00:39.160 --> 00:45.970
Then it will be enabled after the user of the user enters values into the inputs.

00:46.630 --> 00:51.940
So we will take the sign up page as a reference for this one.

00:52.150 --> 01:02.800
First, let's open the login component spec and at the moment we have this default test, but we will

01:02.800 --> 01:09.880
start the test layout test and we can use the sign up test as a reference.

01:09.880 --> 01:13.990
So we have the described block for layout.

01:13.990 --> 01:19.900
So here I'm just going to copy all the content of this, describe layout.

01:19.900 --> 01:26.080
And here I just removing the default test and pasting to this one.

01:26.980 --> 01:35.770
Now we are going to go over these tests and we will update their descriptions and the query text or

01:35.920 --> 01:37.630
the variables we have here.

01:38.170 --> 01:43.180
But let's also make sure the car window is visible at this point.

01:43.630 --> 01:46.660
I didn't save the test yet, so we don't see the result.

01:46.660 --> 01:51.940
But at the moment they are going to fail because we have nothing in the login page.

01:51.940 --> 01:54.430
So let's start with this one.

01:54.610 --> 01:56.650
It is saying it is sign up.

01:57.130 --> 02:00.850
We can just rename all the sign ups with log in here.

02:00.850 --> 02:09.940
So hitting command shift or control shift in windows L Command shift L or control shift l to select

02:09.940 --> 02:15.480
all the occurrences of this sign up text and just typing login.

02:15.490 --> 02:17.980
So this is replacing all the sign ups with the login.

02:18.400 --> 02:22.210
And also I would like to rename the the variable we are using in the test.

02:22.210 --> 02:30.580
So again, command shift L or control shift L and this is going to be, let's say, login page.

02:33.220 --> 02:34.630
So this is the first test.

02:34.660 --> 02:36.970
This is checking the visibility of the log in header.

02:36.970 --> 02:38.980
So we are going to have an H one.

02:39.160 --> 02:41.890
Then the next one is for the username.

02:41.920 --> 02:48.490
You are not going to have a username, just removing that one and the other one is for the email input.

02:48.520 --> 02:54.190
We will have email input and we will have password input and password input.

02:54.190 --> 02:55.660
We'll have the password type.

02:56.170 --> 03:05.500
So keeping this test as well, but removing the password, repeat input test and password type check

03:05.500 --> 03:06.220
for the password.

03:06.220 --> 03:07.120
Repeat input.

03:08.780 --> 03:12.020
And then we are checking the login button.

03:13.100 --> 03:19.550
And the last one is he disables the button initially so we are checking this buttons disabled attribute.

03:20.520 --> 03:22.200
So these are the tests.

03:22.710 --> 03:33.420
We can either go one by one, like we can focus to a single one of them by adding F to the test it.

03:33.780 --> 03:35.490
So just saving like this.

03:35.880 --> 03:40.890
So the first test has f a focus to it.

03:41.220 --> 03:42.480
Saving like this.

03:46.840 --> 03:52.210
So here in the output we see only one test run.

03:52.210 --> 03:54.520
The others are skipped.

03:54.760 --> 04:04.690
And if we check the spec list here, the tests are grayed out because Sharma didn't run those and in

04:04.690 --> 04:07.240
this one we are checking the header to have the login.

04:07.240 --> 04:13.960
But in log in component the template, we have this header.

04:13.960 --> 04:20.260
So this query is basically returning the element, but the text is not the text we are looking for.

04:20.260 --> 04:27.940
It is login page so like we can fix it by having the login text.

04:27.940 --> 04:29.560
Only now the test is pressing.

04:29.560 --> 04:35.650
But again we are going to apply the same styling just like we did for the signup component.

04:35.650 --> 04:39.040
So opening that template file.

04:39.040 --> 04:44.560
So in a route we have this diff and it has the style.

04:46.270 --> 04:52.060
This is putting the main content into center of the page.

04:53.020 --> 04:58.920
And also we have this test ID, we are not going to have a case to show the content conditionally.

04:58.930 --> 05:02.890
We will just display the the login form in this one.

05:03.610 --> 05:12.660
And here we have another div and this is the component wrapping the form and this is CART.

05:12.880 --> 05:23.170
So we're just going to copy this route and the other two divs which are for cart and cart header.

05:23.170 --> 05:24.670
So just copying those.

05:27.140 --> 05:28.340
Based in here.

05:28.640 --> 05:32.630
Let's make sure we properly close all these elements.

05:33.560 --> 05:35.640
So this is the road.

05:35.660 --> 05:37.330
This is the cart.

05:37.340 --> 05:38.750
And this is the header.

05:38.960 --> 05:43.090
Now, we are not going to have this one to take the test.

05:43.100 --> 05:45.880
It will be a login page.

05:45.890 --> 05:55.790
We are using this one in the routing test in the component spec RTS and the header will be logging.

05:56.090 --> 05:58.760
So now we don't need this one.

05:58.820 --> 05:59.870
Let's save it.

06:01.920 --> 06:03.690
And the test is still passing.

06:03.690 --> 06:07.800
And if you check the browser here we have this login header.

06:07.800 --> 06:14.520
So similar to the signup like there is this card header containing the header of this form.

06:15.930 --> 06:17.750
Now let's fix the next test.

06:17.760 --> 06:25.290
So let's focus to the it a male input test, saving it.

06:27.590 --> 06:29.240
So this is failing.

06:29.240 --> 06:32.150
So we are going to have an input.

06:32.160 --> 06:35.330
Again, I'm just going to use the sign up.

06:35.570 --> 06:42.200
So this was for the the the email input, but there is this form right here.

06:42.200 --> 06:48.620
So just I'm just going to copy form and the input, including the email.

06:48.830 --> 06:51.410
I will clear the content later.

06:51.410 --> 06:57.020
So we are going to put those after the card header.

06:57.620 --> 07:03.950
This is the card header and pasting after that and this is the the form.

07:04.730 --> 07:10.610
We are not going to do this at the moment and we don't need the username input.

07:11.420 --> 07:21.470
So we have this div, this is for email and let's not go into the error cases and let's not have anything

07:21.470 --> 07:23.210
about the form control thing.

07:24.710 --> 07:28.070
And this is the error, the validation error part.

07:28.070 --> 07:29.750
So let's remove that one as well.

07:29.750 --> 07:33.320
And this is showing error because the form is not closed.

07:33.320 --> 07:35.510
So just closing form here.

07:36.230 --> 07:41.300
So we have email label and corresponding email input, let's say this one.

07:42.020 --> 07:46.910
So it is also passing and here we see the email input.

07:47.360 --> 07:49.580
Let's go to the next test.

07:49.580 --> 07:52.910
So focusing to the password input.

07:54.410 --> 07:56.660
And we will add a new.

07:57.640 --> 07:58.330
Dev.

07:59.440 --> 08:04.720
This is for password and label.

08:04.720 --> 08:07.270
Text will be password.

08:08.430 --> 08:11.460
And this is passing and here we have the password.

08:11.460 --> 08:14.250
But this is having clear text.

08:14.250 --> 08:22.050
So let's have the next test focusing to it has password type for password input.

08:24.230 --> 08:26.810
So mask the the password.

08:26.810 --> 08:31.550
So for this input, we will set the type to password.

08:32.760 --> 08:42.930
So this is passing and here we see it is mask now and the next test is for button and this button will

08:42.930 --> 08:45.210
be disabled initially.

08:45.210 --> 08:48.480
So I'm just removing the F.

08:48.480 --> 08:52.530
So this will be running all the tests.

08:52.560 --> 08:56.700
The button test will fail, but we will fix those.

08:58.720 --> 09:04.480
So we have two failures and those are the logging component layout has log in button and disables the

09:04.480 --> 09:07.810
button initially is so these two tests are failing.

09:07.810 --> 09:18.130
So after the the the inputs we will have let's go again let's check the signup component.

09:18.460 --> 09:25.720
So we have this app button, but we also wrap it with this div to make it in the center.

09:26.230 --> 09:31.480
So I'm just going to do the same thing, just copying this one and pasting here.

09:31.900 --> 09:37.540
And so we have two tests running to this failing.

09:37.630 --> 09:45.130
The other one is for the disabled check so we can just assign value through to make this one disabled.

09:45.130 --> 09:49.450
And at the moment we don't have the API progress of just removing it.

09:49.750 --> 09:54.730
And this is going to be log in button saving this one.

09:56.760 --> 09:58.920
So the test is still failing.

09:58.920 --> 10:03.900
But if you check the browser, we see the button is there and it is disabled.

10:04.050 --> 10:11.760
Tests are failing because if you check the console of the karma here we are seeing an error about not

10:11.760 --> 10:14.010
a unknown element for this button.

10:14.010 --> 10:18.780
And this is something we should be familiar with at this point.

10:19.200 --> 10:24.510
So in this test, we are not declaring the the button.

10:24.690 --> 10:28.500
And if we check the sign up component spec.

10:29.370 --> 10:37.770
Basically we were using this shared module which was exporting the alert and the button and we are going

10:37.770 --> 10:41.610
to use the same module in the login as well.

10:42.060 --> 10:46.770
So we are going to import shared module.

10:48.360 --> 10:49.560
Saving this one.

10:53.130 --> 10:56.010
And now the tests are passing.

10:56.220 --> 11:01.830
So we have completed the layout part and now we are going to handle the interactions.

11:02.590 --> 11:07.330
Again, I'm just going to take the sign up compound as reference.

11:08.570 --> 11:12.320
So in this one, we were filling the form.

11:12.410 --> 11:19.280
We had this common functions that are form, and we were using this one to to fill the form.

11:19.280 --> 11:22.610
And then we were clicking the button to make the API request.

11:22.610 --> 11:25.040
So we will do the same thing in this one as well.

11:26.450 --> 11:30.830
So let's start with the first interactions test.

11:30.830 --> 11:38.300
So I'm not going to copy all of them, but I will just copy the setup form and the first test.

11:38.540 --> 11:45.380
So just copying these and let's have a describe look here.

11:46.610 --> 11:54.350
This is interactions and pasting this one.

11:54.560 --> 11:58.100
At the moment we are not using the activities in control, but later we will.

11:58.280 --> 12:00.590
So that's imported.

12:03.140 --> 12:06.770
But also you must be updating configuration part here as well.

12:07.220 --> 12:16.340
Since we are injecting this testing controller, let's make sure we are importing the HTTP client module.

12:17.380 --> 12:19.820
It is the blind tasting module.

12:21.020 --> 12:21.920
So.

12:23.260 --> 12:24.070
Here.

12:24.310 --> 12:26.650
We are going to use this later.

12:27.400 --> 12:32.770
And in this one we don't have the username removing that line.

12:32.770 --> 12:35.200
We don't need password repeat.

12:35.200 --> 12:47.290
So we have email input and password input and we are filling the form with these values and we have

12:47.290 --> 12:48.070
the button.

12:48.970 --> 12:53.740
So in this one it enables the button when all the fields have valid input.

12:53.740 --> 12:59.380
So these are the valid input and let's save this one.

13:02.590 --> 13:08.890
This is failing enables the button when all fields have valid input and let's open the component.

13:09.760 --> 13:13.510
The logging component is now like disabled is by default.

13:13.510 --> 13:15.550
True, there is no logic for this one.

13:15.550 --> 13:22.240
But let's open the component class and let's add the is disabled logic here.

13:22.240 --> 13:30.250
So first thing is we need to have the values of the email and password.

13:30.670 --> 13:39.580
Let's say they are going to be initially empty and this is going to be like this is disabled control

13:39.580 --> 13:43.360
is basically be checking the values of those.

13:43.360 --> 13:50.320
So if we have value for email and password, then the button will not be disabled.

13:50.470 --> 13:58.600
Otherwise if we don't have value for this email or this password.

13:58.600 --> 14:08.920
So if you don't have a value for email or password, then we will be setting the button to be disabled.

14:08.920 --> 14:11.380
So it's going to be like this.

14:11.380 --> 14:12.580
Let's say this changes.

14:15.150 --> 14:22.860
So at the moment we have the logic to update the buttons disabled property, but we are not taking the

14:22.860 --> 14:27.750
values of the email and password in sign up component.

14:28.170 --> 14:33.570
So in a combination email we use the the reactive forms approach.

14:34.020 --> 14:42.090
Like here we have the, the form element in the sign up component is right here we have the form and

14:42.090 --> 14:45.840
in it we have the form controls like the username email.

14:46.110 --> 14:53.040
And we were associating these inputs with these names like the form form control name username is pointing

14:53.040 --> 14:56.640
to the username form control we have here.

14:56.820 --> 15:00.900
But in log in page, let's go with the template driven form.

15:00.900 --> 15:08.280
We have practiced this one previously, but let's say if these two forms sign up and log in to include

15:08.280 --> 15:12.150
like different type of form approaches in Angular.

15:12.150 --> 15:19.020
So we keep this example in the course repo for the template driven form.

15:19.080 --> 15:26.910
We are associating the inputs with the, the properties in the class via the.

15:28.790 --> 15:32.480
We are using two way, two way binding with this energy model.

15:33.230 --> 15:39.080
And this energy model is basically associating this input with the property.

15:39.080 --> 15:42.320
And for this one, this is the email.

15:42.350 --> 15:43.730
The property is email.

15:43.820 --> 15:50.750
But here we are seeing an error because energy model is not a known property at the moment.

15:50.900 --> 15:56.920
This is coming with the let's open the app module and import for the template.

15:56.990 --> 16:01.610
Even forms we import form forms module.

16:01.820 --> 16:06.380
So let's save this one and now that error is gone.

16:06.530 --> 16:12.260
But this is not enough to associate the the input with the.

16:13.600 --> 16:17.380
The property in the Logan component is one.

16:17.380 --> 16:26.740
We also need to define the name property for the for this input and the name is again going to be this

16:26.740 --> 16:28.300
name email.

16:30.040 --> 16:38.530
So it is very we are taking the values from this email to this property and let's do the same thing

16:38.530 --> 16:40.960
for passwords input as well.

16:41.770 --> 16:43.330
So this is.

16:44.550 --> 16:52.930
I'm going to be having Angie model for password and name will be password.

16:53.080 --> 16:59.020
So whenever we type to these inputs, those values will be stored here, here.

16:59.020 --> 17:03.940
And when this is disabled code, basically it will be checking their values and.

17:04.910 --> 17:07.910
Updating these buttons disabled status.

17:07.910 --> 17:10.250
So let's say the changes.

17:13.990 --> 17:16.330
Now we have a couple of failures.

17:16.660 --> 17:22.120
One of them is because now we are dependent onto this firm's model.

17:22.210 --> 17:26.260
But in the EV component, we didn't import those.

17:26.890 --> 17:33.940
But if you run only the test, this login component test, let's focus to this one.

17:36.060 --> 17:37.950
So this one is also failing.

17:37.950 --> 17:45.780
And that's because, again, if we open the console here, we are seeing this engine model is not a

17:45.780 --> 17:47.610
known property for this input.

17:47.790 --> 17:55.410
So just like importing the forms module in the app, we need to import it here as well from this module.

17:55.740 --> 17:57.090
So let's say this one.

18:00.040 --> 18:02.200
So the test is passing now.

18:02.200 --> 18:07.510
So this is fixed and let's fix the others.

18:10.320 --> 18:16.530
So if you check the spec list here, the one failing is in the app component.

18:18.950 --> 18:19.690
And that's it.

18:19.700 --> 18:21.800
So we have two failures in the app component.

18:21.800 --> 18:33.260
So just opening the app component spec TS and here in the imports, let's also import the forms module

18:34.070 --> 18:35.120
saving this one.

18:39.160 --> 18:41.530
And now all the tests are passing.

18:42.280 --> 18:46.720
So we fixed the first test for the interaction.

18:46.780 --> 18:50.440
By the way, I forget to refactor these.

18:50.710 --> 18:54.340
Like, let's have a proper naming here.

18:54.520 --> 18:59.410
So selecting the sign up and it's going to be look in page.

19:00.220 --> 19:01.120
Let's save this.

19:04.850 --> 19:06.830
By the way, there is a detail here.

19:07.700 --> 19:20.300
We have this fixture when stable call and we just copied it from the sign up component spec right here

19:20.300 --> 19:21.590
in the interactions.

19:22.420 --> 19:30.110
Now basically we have added this one when we were implementing the signup page in template driven form.

19:30.380 --> 19:33.610
So this is needed for template driven form.

19:33.620 --> 19:37.250
It is not actually needed for the reactive forms.

19:37.250 --> 19:39.860
So we don't need this line anymore.

19:40.070 --> 19:45.590
Like we should have removed it right after we switch from template driven form to a reactive form.

19:45.590 --> 19:51.260
So let's, let's remove that to see it's not causing any problem.

19:51.290 --> 19:51.840
Problem.

19:52.070 --> 19:53.030
Let's say this.

19:56.680 --> 19:58.390
And here we see the Death Star passing.

19:58.390 --> 20:04.600
But if we remove it from the component spec, let's comment this out.

20:08.200 --> 20:16.450
Now we have failure and the failure is this one interactions enables button because now the the form

20:16.540 --> 20:20.500
like we are updating the form input but the form is not stable at that point.

20:20.500 --> 20:26.560
So we, we must be waiting for that template driven form to be stable before interacting with it.

20:26.560 --> 20:28.690
So that's why we need this thing.

20:28.690 --> 20:32.620
So saving this one once again to make sure it is working.

20:33.700 --> 20:35.770
And the tests are passing.

20:36.010 --> 20:42.550
Now we are going to make the API request and again, I'm going to copy the test from.

20:43.780 --> 20:46.210
And sign up component.

20:46.660 --> 20:51.340
So we are enabling the button, then we are making the HTTP request.

20:51.340 --> 20:54.280
So just copying this one and.

20:57.330 --> 21:00.270
Pasting after this enabled test.

21:00.270 --> 21:07.290
So in this one, we are going to send email and password only because we, we only have those inputs.

21:07.800 --> 21:13.170
So we are feeling the form clicking the button.

21:13.170 --> 21:21.360
Now the end point is like this API one zero both and the request body will be like this.

21:21.360 --> 21:23.190
There will be email and password.

21:24.160 --> 21:27.190
So let's say this one.

21:29.560 --> 21:29.830
Okay.

21:30.010 --> 21:32.080
So this is failing.

21:32.080 --> 21:38.650
So we are going to have an HTP request and so far we gathered all of them in the user service right

21:38.650 --> 21:39.190
here.

21:39.280 --> 21:42.970
And let's add another one here.

21:43.540 --> 21:43.900
Let's go.

21:43.900 --> 21:54.910
This one is authenticate and we are going to be passing email and password to this function and we are

21:54.910 --> 21:58.180
going to return this HTTP client.

21:58.210 --> 22:09.280
We are going to send a post request to this endpoint API one zero old and the request body will be containing

22:09.280 --> 22:12.670
the email and password.

22:12.760 --> 22:15.970
So that's what we are asserting here.

22:16.870 --> 22:22.510
So we have the function now we are going to use this one in, in the log in page.

22:22.990 --> 22:24.820
So opening the log in component.

22:24.820 --> 22:30.280
Yes, let's inject user service here.

22:33.010 --> 22:34.930
And let's have a function.

22:35.440 --> 22:43.570
On Click Login we will call this one after clicking the button and we are going to call user service

22:43.780 --> 22:48.580
authenticate bypassing the email this email.

22:49.700 --> 22:55.310
And this password and this is observable.

22:55.310 --> 23:00.290
So to trick the the certificates, we need to subscribe to it even.

23:00.290 --> 23:05.270
We don't need to we don't need the response at the moment.

23:05.480 --> 23:08.150
We have to subscribe to it.

23:08.960 --> 23:17.720
Now we have the function and we are going to call this one in log in component and in again let's open

23:17.720 --> 23:18.860
the sign of component.

23:19.400 --> 23:24.890
We have the submit and submit assignment for the form.

23:24.890 --> 23:27.860
We didn't associate the click event of the button.

23:27.950 --> 23:30.650
Let's go like this, like this approach again.

23:30.650 --> 23:40.250
So in logging component for the form, let's have the IMG submit.

23:40.340 --> 23:47.390
Let's bind to this event and whenever we are submitting the form we will call on Click Login.

23:47.600 --> 23:49.400
Let's say the changes.

23:52.660 --> 23:58.630
And tests are passing and let's add the next test.

23:59.370 --> 24:04.920
So again in sign up, we are checking button to be disabled when there is an ongoing API call.

24:04.920 --> 24:12.360
So copying this and pasting after our last test.

24:13.280 --> 24:17.000
So we don't have anything specific to sign up in this test.

24:17.010 --> 24:24.290
We are just filling the form clicking button twice and we are expecting the request to be going to this

24:24.290 --> 24:30.830
one, but we are expecting only one request to be sent and we also expect this button to be disabled

24:30.980 --> 24:32.090
saving this one.

24:36.350 --> 24:41.480
So the test is failing because there are two requests going to this end.

24:42.200 --> 24:48.440
Basically, each click is processed and that means we are not disabling the button.

24:48.800 --> 24:51.050
So let's fix it.

24:51.670 --> 24:58.240
So in logging component, we need to keep track of the API progress.

24:58.240 --> 25:05.320
So let's have a proper API progress and let's say initially it's going to be false, but after we click

25:05.320 --> 25:16.450
to the button, let's set it to true and let's use it in the component button here so that it is disabled

25:16.450 --> 25:20.290
based on this is disabled logic or.

25:22.930 --> 25:24.670
API progress.

25:25.810 --> 25:31.400
We can also use the API progress here in this part as well, but it's basically up to you how you would

25:31.450 --> 25:35.410
want to implement the things saving the changes.

25:38.820 --> 25:47.730
And the tests are passing and let's add the next test and we have the test for the spinner.

25:48.060 --> 25:53.880
So just copying this spinner to test it is placement or after clicking the submit

25:56.340 --> 26:01.210
here, pasting it in display spinner after clicking something.

26:01.230 --> 26:05.040
So this is the looking page.

26:06.260 --> 26:12.590
So we are filling the form before we click the button, we are checking the spinner visibility.

26:12.590 --> 26:14.360
It should be false.

26:14.360 --> 26:15.650
It shouldn't be there.

26:15.650 --> 26:23.450
Then after clicking we after clicking the button, we expect to see the spinner saving this one.

26:27.300 --> 26:34.350
And for this one, we are going to set the property for the app button.

26:34.500 --> 26:38.310
It has it has this API progress.

26:38.490 --> 26:44.520
And basically we are going to assign our class API progress property to it.

26:44.520 --> 26:53.250
So whenever we click the button, we are changing the API progress to through right here and it's going

26:53.250 --> 26:56.940
to be making this app button to show the spinner as well.

26:56.940 --> 26:58.170
So saving this one.

27:01.610 --> 27:03.470
And the tests are pressing.

27:04.100 --> 27:09.710
Now, before finishing this part, let's handle the error cases of the authentication.

27:10.250 --> 27:13.880
So I'm just going to add the next test.

27:14.820 --> 27:22.140
So in the sign up case we have the cases like the sign of success or we were displaying a message to

27:22.170 --> 27:25.290
user, but in logging we will not have that one.

27:25.650 --> 27:28.440
Instead, we are going to have the error case.

27:29.010 --> 27:30.360
We will only have the error case.

27:30.360 --> 27:38.160
So like in this test for the sign up, we are showing the validation errors, but we are not going to

27:38.160 --> 27:40.950
have a backhand validation for the login.

27:42.180 --> 27:46.680
We will have a client side validation, but we will do that in the next part.

27:47.430 --> 27:52.110
But we can receive authentication failures from the can.

27:52.110 --> 27:57.150
So we are going to handle that case in this in this implementation.

27:57.150 --> 28:06.090
So just copying this validation error case from the sign up component and pasting here, we will change

28:06.090 --> 28:09.330
the description and the details a bit.

28:09.330 --> 28:11.910
So it displays, let's say,

28:15.210 --> 28:15.930
error.

28:17.200 --> 28:18.790
After summit failure.

28:18.790 --> 28:25.330
So this is the test and the request will be going to this endpoint one zero odd.

28:26.260 --> 28:31.540
Then as a response this time we are not going to receive a validation errors, but let's say we will

28:31.540 --> 28:32.560
just return.

28:34.320 --> 28:45.240
Object, having a message saying incorrect credentials and this kind of errors for the authentication

28:45.240 --> 28:49.950
errors, we should be having the status code of 401.

28:50.430 --> 28:55.260
And the type of this and the text is authorized.

28:57.480 --> 29:03.030
So we are updating the UI and let's query login page.

29:03.870 --> 29:11.700
We are going to look for an alert component this time because we will show an error to user in the alert

29:11.700 --> 29:12.510
component.

29:13.770 --> 29:23.550
And let's query it like this and let's say this is error and it takes content will be the content we

29:23.550 --> 29:28.830
are receiving in this message in the API response.

29:28.890 --> 29:30.540
So saving this one.

29:33.560 --> 29:38.520
So this is failing now in the logging component.

29:38.540 --> 29:42.860
We need to handle the subscription here.

29:43.760 --> 29:49.880
At the moment we don't care about the success or error responses, but now we need to.

29:49.910 --> 29:57.380
So for a subscription passing an object having next this is for success case.

29:57.380 --> 29:58.970
At the moment we do nothing about it.

29:58.970 --> 30:06.440
So having an empty object here, having an empty function here, and for the error cases we will have

30:06.440 --> 30:16.550
this error error property which is a function, let's say it's going to be taking the error response.

30:17.900 --> 30:27.200
And in this function we are going to take the error from response body, but we need to keep it in the

30:27.200 --> 30:27.890
components.

30:27.890 --> 30:33.470
So let's say we have this error type string and we don't need to define type.

30:33.680 --> 30:35.630
Let's go with initial value like this.

30:35.780 --> 30:38.030
So this is already a string.

30:38.030 --> 30:46.430
So we are going to take the error message coming from this error and we do that by taking error error

30:47.390 --> 30:50.660
and then we can access to the message.

30:50.660 --> 30:55.370
So this is the response we are receiving.

30:55.370 --> 30:59.690
And in the response body we have the message like this.

30:59.690 --> 31:04.430
So this is the response body and we are accessing to the message property in it.

31:04.910 --> 31:09.620
So let's assign it to this error like this.

31:11.150 --> 31:16.640
Now we have the error and let's display the error conditionally in the template.

31:18.320 --> 31:30.550
So right after these inputs, let's have, let's use our app load component and let's display this conditionally.

31:31.640 --> 31:39.140
If there is a value for the error, then we are going to display that error.

31:39.680 --> 31:46.670
And let's also make sure the type will be danger for indicating the error cases.

31:47.090 --> 31:53.240
So in double card braces, let's pass the error.

31:53.240 --> 31:58.880
So the error text we are receiving from back end will be visible in this component.

31:59.360 --> 32:01.040
So let's say these changes.

32:04.610 --> 32:06.590
And the tests are passing.

32:06.890 --> 32:09.380
Let's test this one on browser.

32:09.650 --> 32:12.740
So let's fill the form with random credentials.

32:12.740 --> 32:15.080
Like feeling like this.

32:15.080 --> 32:16.370
The button is enabled.

32:16.610 --> 32:19.010
Like if I clear it.

32:19.160 --> 32:22.590
Like if one of them is not filled, then the button is disabled.

32:22.610 --> 32:25.670
So as soon as I feel this, it is enabled.

32:25.670 --> 32:30.050
And when I click to login here we are seeing the invalid credentials.

32:30.050 --> 32:36.860
It is really sending the request to backend and Hpakant is running and it is returning the the invalid

32:36.860 --> 32:37.410
credentials.

32:37.430 --> 32:43.640
Also we have the spinner visibility, but we didn't hide the spinner after we received the response

32:43.640 --> 32:46.010
from back and we don't implement that case yet.

32:46.250 --> 32:49.940
So basically the button is disabled as soon as we click it.

32:50.180 --> 32:56.980
The spinner is visible and we are receiving error, then we are showing the error to user.

32:56.990 --> 33:04.340
So let's add the last test and that's for the the visibility of the spinner.

33:04.760 --> 33:09.150
And we also have the same test in the signup component as well.

33:09.170 --> 33:15.920
So just copying the test from sign up component and pasting.

33:16.860 --> 33:17.640
Here.

33:18.420 --> 33:21.630
This is for both ends point.

33:23.070 --> 33:27.390
And I'm just going to copy request flash from the previous test.

33:29.430 --> 33:32.340
And this is login page.

33:33.090 --> 33:41.130
So we are handling the response, updating the UI and India and we are expecting this status spinner

33:41.130 --> 33:43.170
to be gone saving.

33:46.480 --> 33:47.920
So this is failing.

33:48.010 --> 33:52.030
We also see it on the browser test or manual test.

33:52.030 --> 33:59.080
So we are showing the spinner based on this API progress and we are not updating the API progress after

33:59.080 --> 34:00.160
we received the error.

34:00.160 --> 34:09.100
So the solution is here, we are going to just set this API progress to false because the progress is

34:09.100 --> 34:12.370
completed saving this one.

34:16.170 --> 34:23.070
And the tests are passing and if we test it one more time on browser filling the form.

34:24.850 --> 34:30.790
And here we see the spinner is gone after we received the response.
