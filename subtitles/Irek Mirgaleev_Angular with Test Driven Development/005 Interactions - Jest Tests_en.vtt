WEBVTT

00:03.330 --> 00:07.230
Now let's add the same test for the chest setup.

00:07.950 --> 00:13.350
So just opening the sign up component, just as.

00:14.250 --> 00:22.140
And just like we did here, I'm going to have a describe look for the interactions.

00:22.590 --> 00:26.190
So here adding interactions describe look.

00:27.370 --> 00:29.590
And adding the test.

00:29.590 --> 00:32.140
By the way, I'm just going to copy the test.

00:33.190 --> 00:34.330
Description.

00:35.230 --> 00:37.270
So here it.

00:38.720 --> 00:44.630
Enables the button when the password and password repeat fields have same value.

00:45.110 --> 00:51.350
So this one is going to be async because the render functionality is async.

00:52.890 --> 00:56.290
So let's let's do this part.

00:56.310 --> 00:58.320
We will render the component.

00:58.650 --> 01:01.470
Then we will get the password and password.

01:01.500 --> 01:02.460
Repeat inputs.

01:02.460 --> 01:05.880
I'm just copying those from the previous tests.

01:07.660 --> 01:15.460
So this is the password input and let's get the password repeat.

01:17.390 --> 01:19.730
Passwords repeat.

01:20.180 --> 01:28.010
Now we are going to type values into these inputs and for this one we will use the library we installed

01:28.010 --> 01:35.660
and that is user event and it's coming from the testing library user event.

01:35.900 --> 01:37.400
So we will use this.

01:38.430 --> 01:40.050
And we will.

01:42.030 --> 01:44.680
Again, this is amazing user event.

01:44.700 --> 01:55.140
This has the functions like like the clearing, the input clicking button or double click or we have

01:55.170 --> 01:57.510
type here, so we will use this one.

01:57.510 --> 02:04.800
We are going to type into password input and the value we are typing is password.

02:06.100 --> 02:10.000
And let's repeat the same thing for password.

02:10.360 --> 02:11.200
Repeat.

02:12.870 --> 02:20.310
Now in this setup, we don't need to manually trigger UI updates like we do here in the default tests.

02:20.310 --> 02:25.380
We were calling this fixture detect changes, but we don't need that one here.

02:26.250 --> 02:34.500
All we will do is just get the button and we will create the button and we will check this time.

02:34.500 --> 02:35.460
This button.

02:35.880 --> 02:41.670
Either we can go with not to be disabled or to be enabled.

02:42.720 --> 02:44.370
We already have the implementation.

02:44.370 --> 02:48.510
So let's save this one and let's see the result.

02:49.940 --> 02:52.430
So the test is passing.

02:52.460 --> 03:00.240
So compared to the the karma and Jasmine set up the there are less steps in this test.

03:00.260 --> 03:04.090
We just rendered the component and get the elements we are looking for.

03:04.100 --> 03:05.720
Then we interact with it.

03:06.380 --> 03:12.810
But the default test setup, we go more into details about the internals.

03:12.830 --> 03:14.450
So that's the main difference.

03:14.450 --> 03:22.850
And that's why this testing library is becoming more and more popular because it is easing the test

03:22.850 --> 03:23.990
creation part.

03:24.140 --> 03:29.120
So that's how the test is shaping up in the just version.
