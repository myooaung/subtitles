WEBVTT

00:03.160 --> 00:06.910
Now we have this format, we are validating user entries.

00:06.940 --> 00:16.270
We also validate the uniqueness of the email by asking to be scanned, but even we had a valid form

00:16.420 --> 00:18.700
before we submit to backend.

00:18.700 --> 00:22.410
That doesn't mean this request can pass the validation site.

00:22.930 --> 00:25.660
Now let's think about this scenario.

00:27.100 --> 00:36.760
So we have two window here and let's fill the first form with a non-existing user like user 30, user

00:36.760 --> 00:39.400
30 at mail com.

00:39.700 --> 00:46.240
And this is being validated at backend and there is no user with this email and entering the password.

00:47.100 --> 00:48.510
And password.

00:48.720 --> 00:55.170
Repeat now the form is ready, but I'm not clicking the sign up in another window.

00:55.200 --> 01:00.180
I fill the form and I'm using the same email.

01:03.140 --> 01:04.220
At the moment.

01:04.220 --> 01:06.020
This is not.

01:06.320 --> 01:07.720
This email is not in use.

01:07.730 --> 01:12.440
Therefore, both of these forms are showing this email is valid.

01:12.620 --> 01:23.210
So revealing the password and password repeat now sending a signup request to backend and this one is

01:23.210 --> 01:27.920
receiving success and showing the the success message to user.

01:28.790 --> 01:32.780
But let's try this one on the second form.

01:32.780 --> 01:35.750
But before that, let's open the developer tools.

01:35.750 --> 01:43.580
So I'm just clicking sign up here and the request is rejected from back end.

01:44.030 --> 01:52.790
The request is receiving 400 bad request and in the response body we are receiving this validation errors

01:52.790 --> 01:57.890
and it has this email field and the message is use another email.

01:58.190 --> 02:01.760
So even the validation is passes on the client side.

02:01.760 --> 02:06.320
That doesn't mean that request will not fail with the validation in the back end.

02:06.350 --> 02:13.700
This request still can be failing with the validation at hand, and we should be reflecting the error

02:13.700 --> 02:21.050
messages coming from back end to user so that user can fix it and then sends the form once again.

02:22.010 --> 02:24.920
So we need to cover these kind of cases.

02:24.950 --> 02:30.800
Our client must be capable to handle the validation failure responses coming from back end and show

02:30.800 --> 02:33.500
the corresponding messages to user.

02:35.010 --> 02:38.220
Now let's handle the validation errors coming from Beckett.

02:38.640 --> 02:46.980
First, we are going to add a test, but I'm going to add the test to the not this described look but

02:46.980 --> 02:50.640
into these interactions described block.

02:51.090 --> 02:59.220
So after this test it hides sign up form after successful sign because I'm adding this new test.

02:59.760 --> 03:10.650
And in this one, it displays a validation error coming from back end after submit failure.

03:15.320 --> 03:19.340
We will be repeating similar steps we have done in previous ones.

03:19.340 --> 03:26.510
So just copying all the all the function and pasting here.

03:26.780 --> 03:29.690
So we are filling the form.

03:30.410 --> 03:34.310
And we are going to click to the button.

03:34.550 --> 03:40.310
Then with this HTP testing controller, we are going to handle the request coming to this end point.

03:40.910 --> 03:46.670
But this time, instead of returning to 100, we are going to return an error message and we can do

03:46.670 --> 03:47.660
that like this.

03:47.660 --> 03:55.220
The flash is taking and not only the this is the response body, not only the response body, but also

03:55.460 --> 04:04.280
we can set the status code or additional headers, those kinds of things we can set here as well.

04:04.280 --> 04:08.210
So the first one is the the request response body.

04:08.450 --> 04:12.350
And in the response body, it's going to be similar to this one.

04:12.350 --> 04:15.200
There will be validation errors and there will be email in it.

04:15.920 --> 04:19.550
So like here, validation errors.

04:19.550 --> 04:24.890
And in it we will have the email and let's say this is for testing purposes.

04:24.890 --> 04:27.110
We can set any message we like.

04:27.290 --> 04:29.840
It doesn't matter what we are setting here.

04:29.870 --> 04:31.910
Email in use.

04:33.350 --> 04:35.210
So this is the response body.

04:35.210 --> 04:46.700
And the second parameter we can set the options of like the status will be 400 and the status text will

04:46.700 --> 04:49.730
be bad request.

04:50.300 --> 04:53.990
So the testing controller is returning this error message back.

04:54.200 --> 04:56.240
We are updating the UI.

04:56.270 --> 05:03.320
Then we will check the the email validation error like here, just copying this one.

05:05.270 --> 05:08.420
And pasting here.

05:08.420 --> 05:17.420
So we are querying the email validation, the element having this email validation test ID and in it

05:17.750 --> 05:22.350
the text will be emailed in use which is coming from backend.

05:22.940 --> 05:25.730
Now switching to the karma window.

05:26.570 --> 05:27.770
Let's save this one.

05:30.310 --> 05:32.830
So this test is failing.

05:33.100 --> 05:34.270
Let's fix this.

05:35.370 --> 05:44.370
We are going to fix this in the sign up component class so far in the quick signup up, we are we are

05:44.370 --> 05:50.100
signing the sign up request, but we are only handling the success response which is in the end setting

05:50.100 --> 05:52.290
the signup success to true.

05:52.410 --> 05:59.700
But now we are receiving an error and to handle the error cases instead of passing just this function

06:00.510 --> 06:01.230
as a.

06:01.500 --> 06:05.010
For this subscribe we will pass an object.

06:05.580 --> 06:06.450
So this.

06:06.450 --> 06:10.470
This subscribe is basically taking the subscription.

06:10.800 --> 06:12.780
So just cutting this part.

06:15.310 --> 06:16.150
And.

06:16.920 --> 06:24.900
If you go into this subscribe we were using this one, we were passing just a callback function, which

06:24.900 --> 06:29.520
is this one, but now we are going to pass an observer.

06:30.300 --> 06:33.360
So the observer is an object.

06:35.190 --> 06:37.620
It has three properties.

06:38.960 --> 06:42.340
Next complete and error.

06:42.350 --> 06:46.490
So the next is the previous function we were passing.

06:46.610 --> 06:51.680
So this is called when the Observer is returning a success response.

06:52.820 --> 07:01.880
And when there is an error for this case, the HTTP error, it is being handled in this error function

07:01.880 --> 07:03.380
we are defining here.

07:05.090 --> 07:07.850
So there is this function.

07:07.850 --> 07:12.210
So this error is being called with the active error response.

07:12.230 --> 07:13.490
Let's get that parameter.

07:13.520 --> 07:16.100
Let's call this one HTTP error.

07:16.100 --> 07:21.950
And the type of this this object is HTP error response.

07:23.800 --> 07:33.850
And we can access to the validation errors like this is it error has the error and this is basically

07:33.850 --> 07:37.270
the response body coming from backend.

07:37.360 --> 07:45.580
And in it we have the validation errors like we are setting here, validation errors.

07:47.460 --> 07:53.290
And in it we have the the the email field.

07:53.700 --> 07:54.480
This one.

07:55.530 --> 07:57.750
So we are taking validation errors.

07:57.750 --> 08:00.360
And from validation errors we are taking email.

08:00.720 --> 08:10.560
So this is the, the, the text message returned back from, from the back, let's say this is the email

08:10.770 --> 08:13.770
validation error message.

08:14.580 --> 08:19.290
Now we are going to display this message on UI.

08:19.470 --> 08:25.080
And to do that, we can use the form element here.

08:25.770 --> 08:32.220
Like here we are getting the errors of the the email field from form.

08:32.460 --> 08:35.490
So we take the email field.

08:35.490 --> 08:43.290
Then from that field we are taking the, the, the validation failures so we can do something like this.

08:43.290 --> 08:52.500
We can add an error for this email and we can set whatever we want and we can also inject the message

08:52.500 --> 08:53.190
into it.

08:53.280 --> 09:01.110
So like we can say this form, we get the email.

09:02.880 --> 09:07.260
Then we can set errors for it.

09:09.120 --> 09:12.790
And as an error, this is looking for an object.

09:12.810 --> 09:17.520
It's like the validation error object, which is basically a key and value.

09:17.550 --> 09:19.320
The key is up to us.

09:19.530 --> 09:23.720
Like we we had the key like unique email.

09:23.730 --> 09:28.830
And for this one we can set and the key like let's say this is the back end failure.

09:30.060 --> 09:34.410
And as a message we can pass this email validation error message.

09:35.950 --> 09:46.710
So we are taking the the message from API response then setting into the errors object of these forms,

09:46.720 --> 09:49.420
email form, control element.

09:49.750 --> 09:59.080
Then here in the email error, we are just checking the required email or unique email errors.

09:59.080 --> 10:08.890
But now we have another error type which is backend so we can say ls if filled errors as this backend.

10:09.830 --> 10:10.520
Ever.

10:11.480 --> 10:15.140
Then let's return the message coming with it.

10:16.040 --> 10:18.650
Basically, the message coming with it is.

10:19.570 --> 10:20.200
This.

10:20.710 --> 10:23.290
This one like this.

10:24.420 --> 10:27.270
The others are returning true false values.

10:27.630 --> 10:31.410
But we are having our custom messages right here.

10:31.560 --> 10:41.610
But for the back end case, we we didn't set it to true or false, but we just passed the value, the

10:41.610 --> 10:43.990
message value to it.

10:44.010 --> 10:47.130
So here we can take that value.

10:47.670 --> 10:55.200
And whenever this email error is called in the template right here, this is the input for the email.

10:56.040 --> 11:00.500
This email error will be having the message coming from back end.

11:00.810 --> 11:02.940
So the implementation is done.

11:02.940 --> 11:06.150
Let's save it to see if it is working.

11:08.630 --> 11:15.020
And here we see the tests are passing and the test was here in the space validation error coming from

11:15.020 --> 11:17.450
back end after summit failure.

11:17.690 --> 11:27.470
Now to test this one easily, I made a minor change on back end site for making sure the user one at

11:27.470 --> 11:30.080
gmail.com to be unique.

11:30.130 --> 11:39.680
There is a user one with user one at gmail.com, but in this validation part it will be considered as

11:39.680 --> 11:44.510
valid even there is that in the back end just to test this behavior.

11:44.510 --> 11:52.640
So here filling the form with like user 100 and email addresses, this one and the password is this

11:52.640 --> 11:53.240
one.

11:54.350 --> 12:02.030
Now also let's open the console here, clearing the console in network tablets.

12:02.030 --> 12:03.440
Click the sign up.

12:04.280 --> 12:08.900
And here we are receiving this 400 bed request, which is returning.

12:08.900 --> 12:17.030
Use another email for this email validation and we are displaying that message for the email input.

12:17.450 --> 12:24.380
So with this implementation, we are able to handle the validation errors coming from back end and we

12:24.380 --> 12:27.170
are displaying that validation to user.
