WEBVTT

00:03.490 --> 00:06.910
Now let's implement the user page functionality.

00:07.060 --> 00:13.060
So this user page will be loading user from back and then displaying that user user's information.

00:14.020 --> 00:20.260
And again, we will start with the test, but this is almost going to be identical with the Activate

00:20.260 --> 00:20.440
page.

00:20.450 --> 00:23.020
So I will do something like this.

00:23.020 --> 00:30.700
I will just copy all the tests and activate component and we will refactor for the user page.

00:30.970 --> 00:38.920
So let's display the karma window first and opening the user component spec.

00:39.820 --> 00:48.910
This is the the the test file automatically generated by the client, but I'm going to copy activate

00:48.910 --> 00:50.860
component specters.

00:51.130 --> 00:57.910
Here in this one, we have the tests like sending the request to BEC.

00:57.910 --> 01:04.450
And as soon as the component is mounted, we are making an API request backend and in this user base

01:04.450 --> 01:05.710
we will do the same thing.

01:05.830 --> 01:12.880
We will get the user's data from backend and we have cases like the success case and fail cases, so

01:12.880 --> 01:14.920
there can be that user or not.

01:15.130 --> 01:20.880
And based on that, we will show info on the page and also we will display spinner.

01:20.890 --> 01:28.870
And again, since we are dependent on the routing functionality, we will be set the routing through

01:28.960 --> 01:34.360
the the our custom activated root observable here.

01:35.110 --> 01:45.580
So we have the same thing just copying everything in this activate component and and just pasting right

01:45.580 --> 01:46.120
here.

01:48.100 --> 01:58.420
So the target component is not the activate component, but but it's going to be a user component and

01:58.420 --> 02:03.760
let's replace activate component with the user component.

02:05.620 --> 02:14.890
Now the errors are gone and let's also update the describe here and let's go one by one.

02:14.980 --> 02:22.000
So just commenting out to the other three tests and let's start with the first one it sends.

02:22.150 --> 02:23.890
Let's change the description here.

02:24.070 --> 02:29.440
It sends a request to get user data.

02:29.770 --> 02:41.890
So for the the URL, we are going to go like let's say the user one idea of that user user one and we

02:41.890 --> 02:46.210
are going to make a request to backend and that URL will be like this.

02:46.480 --> 02:56.950
We will send a guest request to API one zero users and user ID and we are capturing all the requests

02:56.950 --> 02:57.970
going to this endpoint.

02:57.970 --> 03:02.680
And here we are just counting that that must be one request going.

03:03.100 --> 03:06.250
So this is the first test, let's say this one.

03:09.920 --> 03:13.730
And this is failing because at the moment there is no subscription.

03:14.030 --> 03:19.050
We are calling this subscriber, but the user component is not subscribing to anything at the moment.

03:19.070 --> 03:25.490
Therefore, we don't have any reference to the subscription function coming from the component.

03:25.700 --> 03:34.580
We have this observable, but again, we didn't call the the params to subscribe it.

03:34.670 --> 03:36.410
Therefore there is no subscription.

03:36.410 --> 03:41.750
And when we try to call the next of this function, it is failing.

03:42.080 --> 03:43.970
So let's fix it again.

03:44.120 --> 03:47.090
We will use the activate component as reference.

03:47.360 --> 03:57.260
So here in the init part, we were subscribing to the params and we were calling the user service to

03:57.260 --> 03:59.030
activate the user.

03:59.030 --> 04:05.690
But this time we will have separate function for loading the users data and we will call it.

04:06.110 --> 04:09.710
So let's open the user component.

04:09.710 --> 04:16.520
And so we need the we will need both user service and activate to draft here.

04:16.940 --> 04:18.560
So just copying this.

04:20.490 --> 04:23.100
And pasting into this constructor.

04:23.400 --> 04:27.930
Let's import them importing the user service as well.

04:28.590 --> 04:37.440
Moving this to the next line like this and just copying the in its path here.

04:38.240 --> 04:39.950
Pacing in this one.

04:40.460 --> 04:49.570
At the moment we don't have the the tracking for the the API request, but we will.

04:49.580 --> 04:54.620
So just commenting out this part now we are going to take it again.

04:54.620 --> 05:02.450
This is going to be ID because if you check the browser module here and just like to activate, we name

05:02.450 --> 05:05.270
the dynamic part we set the name for.

05:05.270 --> 05:11.570
The dynamic part is ID and we do that in user part as well.

05:11.810 --> 05:18.170
So we are taking the ID and we will pass it to a function if we don't have that function yet.

05:18.170 --> 05:20.120
But it will be something like this.

05:20.180 --> 05:30.620
Let's say get user buy ID and let's open the user service so we will have a function, get user buy

05:30.620 --> 05:35.960
ID here which will be taking the ideas parameter which is string.

05:36.980 --> 05:41.960
Then we are going to call patient IP client.

05:41.960 --> 05:48.440
This time we will send the get request back and is looking for a get request to this end point API one

05:48.440 --> 05:53.240
zero users then adding the ID.

05:54.230 --> 06:04.130
So this is the the function for loading user and this is the component using this function for loading

06:04.130 --> 06:06.920
that user saving all the changes.

06:09.500 --> 06:11.510
And the tests are passing.

06:11.870 --> 06:15.380
And if we scroll down here, we will see the user component.

06:15.920 --> 06:18.020
And it sends requests to get user data.

06:18.020 --> 06:21.250
So we are sending the request at the moment.

06:21.260 --> 06:24.350
Now let's add the next test.

06:25.070 --> 06:32.030
In this one eight space, we were displaying the activation success alert.

06:32.030 --> 06:41.000
But this time, instead of showing an alert, we will display the user user object user data.

06:41.390 --> 06:45.020
So again, let's firstly update the description.

06:45.020 --> 06:52.000
So it displays user name on page one user is found.

06:52.010 --> 06:54.020
So we are.

06:55.000 --> 06:55.240
Again.

06:55.270 --> 06:57.820
Let's go with the ID one.

06:58.270 --> 07:00.760
And we are making requests to the.

07:02.070 --> 07:04.200
And point this one.

07:05.400 --> 07:10.710
And then from back we are expecting a payload like this one.

07:10.710 --> 07:22.110
We are looking for a user object and user has the ID username which will be user one and emailed fields

07:22.140 --> 07:28.890
user one it's mail call so this API will return this data back.

07:29.160 --> 07:38.880
Then we are updating the UI and then we will check the visibility of this username and and we will display

07:39.060 --> 07:49.440
this, this username in a component in the next amendment like H three, let's name it as header.

07:49.620 --> 07:57.540
So this header text content will be containing user one.

07:58.790 --> 08:00.590
So let's save this one.

08:00.590 --> 08:01.610
This is the test.

08:04.160 --> 08:11.000
So this one is failing because at the moment we we don't have this header and we are not doing anything

08:11.000 --> 08:15.110
about the response we are receiving from back end.

08:16.310 --> 08:24.620
So in this response now we are going to get the the return data and we will take the data.

08:24.950 --> 08:30.710
And this data is a user object we are looking for.

08:31.640 --> 08:33.980
So let's have a variable for this.

08:34.160 --> 08:42.590
We have a user object here and the type of that user is this one, the type we defined, it has the

08:42.590 --> 08:49.790
ID, username and email and the TypeScript compiler is showing this error because it's not initialized.

08:50.420 --> 08:51.980
Let's say this is optional.

08:52.250 --> 08:59.870
So we either load the user or if we don't have the user then it means we have a failure.

09:00.320 --> 09:02.930
We will display an alert based on the results.

09:02.930 --> 09:13.220
So the user is going to be the data for the user will be received from this this API request we will

09:13.670 --> 09:24.260
assign this body is assigned this data to this user like this, but there is this error because we have

09:24.260 --> 09:32.240
the type for the user, but the data type is any so we can cast it to user right here.

09:32.420 --> 09:44.780
So we have the user now and for displaying username, we can update the user user component and we can

09:44.780 --> 09:47.350
display the H three.

09:47.360 --> 09:57.200
This is the element we are going to add the user data and we can show this conditionally by using the

09:57.210 --> 09:57.430
engine.

09:57.530 --> 10:07.040
If if we have user, then this is going to be having the info of users username.

10:08.180 --> 10:10.010
So let's save these changes.

10:12.760 --> 10:14.950
And the test is passing.

10:15.940 --> 10:18.100
And let's see it on browser.

10:18.370 --> 10:23.530
Now we are seeing this user one, but let's go back to home and click to a user three and we are seeing

10:23.530 --> 10:33.670
user three and if I click user two, we are seeing user two and if I go to like a page user 23 we are

10:33.670 --> 10:40.810
having this user 23 But if we have a case like this one, there is 25 users in the application, but

10:40.810 --> 10:51.340
if you go like 230, so we have nothing and this is bringing our next requirement and in the next test

10:51.910 --> 10:55.030
we will show failure.

10:55.030 --> 10:59.350
Like we will show an alert message saying there is no that user.

10:59.350 --> 11:02.590
So let's update the test description here.

11:03.310 --> 11:08.800
It displays error when user not found.

11:08.800 --> 11:14.050
So let's go with different ID for this one.

11:14.050 --> 11:19.090
Let's say this is going to be two and the path will be

11:22.000 --> 11:22.750
this one.

11:24.010 --> 11:30.250
To now is a response to Beck and will be returning a message like this.

11:30.250 --> 11:38.050
So the responsibility is not important, but we can hear a message saying user not found, we are not

11:38.050 --> 11:47.920
going to use it and the status is 404 and the status text will be not found.

11:48.940 --> 11:56.080
And then we are waiting for UI to be updated and then we will check an alert component to be visible

11:56.080 --> 11:56.410
again.

11:56.410 --> 12:04.030
We will use the alert with the danger style to indicate there is a failure and as a message let's display

12:04.300 --> 12:04.780
this thing.

12:04.810 --> 12:07.630
User not found.

12:08.260 --> 12:09.340
So saving this.

12:12.300 --> 12:16.270
So this one is failing and let's fix it.

12:16.290 --> 12:27.150
Now we need to keep track of the overall status so we can have the same activation status variable property

12:27.150 --> 12:27.360
here.

12:27.360 --> 12:39.540
So we can say it's not activation status, but let's say status so it can be success, fail or in progress.

12:39.960 --> 12:44.880
At the moment we are using this user user's data.

12:45.540 --> 12:52.560
Like if we have the data that means it is success, but we can have a more generic overall approach

12:52.950 --> 12:59.280
and we can say this will never be null, so we wouldn't be checking this thing.

12:59.280 --> 13:11.130
So right here we can say the let's say this status is going to be success in this case and for this

13:11.130 --> 13:15.150
one, it is going to be failed.

13:17.190 --> 13:20.400
So we have this status now.

13:20.400 --> 13:22.380
Let's update the template.

13:24.250 --> 13:33.980
So now we don't need to check the user, but we can check if status is equal to sexes.

13:34.870 --> 13:44.800
And if it is not sexist and we will display an alert and let's open the activate component template

13:45.220 --> 13:45.820
right here.

13:45.820 --> 13:47.890
We were displaying the activation failure.

13:47.890 --> 13:51.070
But now we are going to display.

13:52.460 --> 13:53.270
Status.

13:53.300 --> 13:59.180
If status is failed, we will display this one and the message will be and we are creating it in the

13:59.180 --> 14:01.130
test user not found this one.

14:04.660 --> 14:06.100
Saving all the changes.

14:08.550 --> 14:10.380
And the tests are passing.

14:10.650 --> 14:13.560
And in browser we can see there is error.

14:13.590 --> 14:17.800
So like if we go to user one, we see the user one.

14:17.820 --> 14:23.640
But if you go like user 100, which doesn't exist, we are seeing this error.

14:23.820 --> 14:28.650
Now let's add the final test, which is displaying the spinner during the API.

14:28.740 --> 14:34.170
Also it displays during user get request.

14:34.170 --> 14:39.900
So we will go to user one and let's update the URL.

14:40.290 --> 14:41.400
It's going to be

14:44.730 --> 14:52.930
user one and we are querying the status element to be visible.

14:52.950 --> 14:55.110
Then we are returning the response back.

14:55.110 --> 14:59.610
Let's return the success body.

15:01.200 --> 15:01.920
Like this.

15:03.310 --> 15:04.390
Then we are.

15:05.200 --> 15:09.760
Looking for the status to be falsely saving it.

15:09.970 --> 15:13.960
And in test console, we see this test is failing.

15:14.440 --> 15:20.320
Now we are going to keep track of the API status like in progress as well.

15:20.320 --> 15:25.690
So here we will set the status to in progress.

15:26.950 --> 15:31.330
And when it is in progress, we will display Spinnaker.

15:31.330 --> 15:42.100
So again, opening the Activate component and just copying the span from this one and pasting here.

15:42.580 --> 15:47.740
So when the status is in progress, then we will display the spinner saving it.

15:50.440 --> 15:58.870
And tests are passing and if we test it on browser, once again, let's open the developer tools and

15:58.870 --> 16:00.340
let's go to network tab.

16:00.670 --> 16:02.710
Just clearing the console.

16:03.670 --> 16:10.510
And let's go to homepage and let's load the network and let's click to user.

16:10.510 --> 16:16.590
And here we see the spinner is visible before the request received a response.

16:16.600 --> 16:20.020
So we completed the implementation.

16:20.020 --> 16:23.290
But let's display this user a bit better.

16:23.740 --> 16:30.610
We will do similar thing, like we will display the user with a default profile image.

16:30.610 --> 16:36.760
So we will have a new component to do this and it will be similar to this user list item, but the styling

16:36.760 --> 16:41.440
is going to be a bit different and let's do that.

16:42.010 --> 16:45.010
So for that, I'm just going to create a new component.

16:46.310 --> 16:51.140
Energy generated component, and this component will be used in the user.

16:51.140 --> 16:57.350
So under the user folder and the component name will be profile card.

16:57.350 --> 17:00.710
And we don't need test for this one.

17:03.440 --> 17:05.740
So the component is created.

17:05.750 --> 17:07.220
Let's use it.

17:07.460 --> 17:11.390
Component is profile card selector.

17:11.390 --> 17:12.770
Is this one a profile card?

17:12.770 --> 17:16.910
And we are going to use it right here in the user component.

17:16.910 --> 17:21.080
So let's say we have app profile card.

17:21.810 --> 17:28.320
Here at the moment we don't have anything in it, but we will pass the props.

17:28.800 --> 17:34.920
The user object is a prop twist to it, just like for the user list item component.

17:34.920 --> 17:37.500
So it's going to be taking the user.

17:39.730 --> 17:41.650
And pacing here.

17:43.960 --> 17:48.280
This is the user type and this is the input for this component.

17:48.280 --> 17:56.620
And in the profile card component, HTML, we will have the markup and it's going to be like this.

17:56.650 --> 18:01.780
We will have a diff, this is going to be a card.

18:03.820 --> 18:06.430
And so let's say these first.

18:06.580 --> 18:13.390
So at the moment we only have a card, but the content is empty, therefore it is visible like a line

18:13.960 --> 18:22.630
and we will have another div in this one and it's going to be a card card header.

18:24.900 --> 18:39.270
And in it we can display the image and the image will be the source will be as its profile PNG saving

18:39.270 --> 18:39.720
it.

18:40.020 --> 18:45.600
The sizes are going to be let's set the width and height is 200.

18:48.450 --> 18:51.330
Like this and also move the content to the center.

18:51.330 --> 19:02.250
And we can do that for the whole cart by setting it in the relative text center so it moves the image

19:02.250 --> 19:03.040
to center.

19:03.060 --> 19:04.830
Let's also style this one.

19:05.070 --> 19:13.470
We will use class of bootstraps, which are a rounded circle.

19:15.900 --> 19:18.420
And let's also add shadow.

19:20.910 --> 19:26.730
So the image is visible, but also we need to display the username.

19:26.880 --> 19:33.350
So let's have another card component here, which is card.

19:33.360 --> 19:43.230
So we have card header, but we also have card body and in it we will display the user username.

19:43.950 --> 19:49.230
At the moment we don't we don't have the the property.

19:49.230 --> 19:52.350
We are not passing the property to the profile card.

19:52.350 --> 19:58.440
If we check the user component here, we are not passing any props.

19:58.440 --> 20:00.570
So let's pass the props.

20:01.530 --> 20:10.170
We are going to set the user prop and it's going to be the user property in user components.

20:10.170 --> 20:14.160
So basically we are passing this one is a prop to the profile card.

20:15.320 --> 20:16.490
Like this.

20:18.170 --> 20:18.860
Let's save it.

20:18.860 --> 20:30.410
And in profile component, now we have the user and we can just display this user's username saving

20:30.410 --> 20:35.660
it and the user username is visible right here.

20:36.110 --> 20:37.910
Now we don't need this.

20:39.110 --> 20:39.800
H three.

20:39.830 --> 20:46.760
Here we are using this a profile card for showing the user info and we will be conditionally showing

20:46.760 --> 20:49.340
this profile card.

20:49.790 --> 20:59.240
If the status is success, then we are going to show the profile card and let's save this one.

21:00.030 --> 21:06.830
Now we have added a new component and when we add the new component, let's make sure the tests are

21:06.830 --> 21:11.450
not failing because of we didn't declare that component in the test yet.

21:11.780 --> 21:21.230
So opening the karma first here we see it is failing because we don't have the the component declaration.

21:21.380 --> 21:27.470
So opening the user component and let's declare.

21:28.710 --> 21:32.850
Profile cards component saving it.

21:35.550 --> 21:38.490
And here we see the tests are passing.

21:39.990 --> 21:47.870
So we completed the implementation of the user page and we completed the flow.

21:47.880 --> 21:55.620
So from the user list we are able to click end user and corresponding users page is opened.
