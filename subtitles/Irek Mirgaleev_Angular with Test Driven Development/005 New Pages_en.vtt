WEBVTT

00:03.200 --> 00:09.310
So far we have the pages for the sign up and homepage, but let's add two more pages.

00:09.320 --> 00:12.200
We will have login and user page.

00:12.680 --> 00:18.200
Login page will be just like sign up, but the user page will have dynamic path.

00:18.210 --> 00:23.480
So there is a difference when we are going to define the routing for the user page.

00:24.110 --> 00:29.300
Again, we are going to start with the testing, but before adding the test for these new pages, let's

00:29.300 --> 00:31.160
refactor the test in the app component.

00:31.160 --> 00:40.580
So we are having a repeating test at the moment and in the the gist version, we go with it each just

00:40.580 --> 00:44.240
like this and let's do the same thing here as well.

00:44.510 --> 00:54.590
But this Jasmine test is not supporting the dynamic test and we come up with the solution like here

00:54.590 --> 01:02.360
in the sign up component, we had this solution like we have the array of the, the variables of our

01:02.360 --> 01:08.090
tests and we were basically looping in that area and passing those to the test function.

01:08.090 --> 01:11.030
So let's do something like that one.

01:11.030 --> 01:20.120
So we will have, let's say, the test cases and it's going to be an array and we will have the path.

01:21.350 --> 01:22.790
We are using the path here.

01:22.790 --> 01:26.810
These are the changing paths and we also have the the test ID part.

01:26.810 --> 01:37.700
So we have the PED and and we will have page ID and for root path we have the home page and for.

01:39.580 --> 01:40.390
Sign up.

01:40.870 --> 01:46.090
We are querying the sign up page and let's.

01:47.240 --> 01:56.300
A loop in this array cases for each and

01:59.090 --> 02:08.870
we are going to let's move this one of this test into this this for each function so we will take the

02:09.260 --> 02:12.560
values like we can use object structuring.

02:12.560 --> 02:19.040
So we take the pattern page ID then here we are going to use those in the test.

02:19.040 --> 02:28.910
Like we are going to navigate to this pad and we are going to query this test ID, but we are going

02:28.910 --> 02:29.480
to.

02:32.130 --> 02:44.110
Used the back Texas strength drills so just moving it into tactics and the page ID, so we are creating

02:44.110 --> 02:46.980
the page ID and we are navigating to this part.

02:46.990 --> 02:50.350
Let's also update the test description here.

02:50.350 --> 03:05.650
So we will again having back takes it displays the see the page ID when pat is.

03:07.870 --> 03:08.500
Pat.

03:09.280 --> 03:11.530
So we don't need this one anymore.

03:11.860 --> 03:19.750
So just do the thing and let's move the karma to the front and let's save this one to make sure nothing

03:19.750 --> 03:20.500
is broken.

03:20.920 --> 03:23.140
And here we see the tests are passing.

03:23.530 --> 03:28.540
Now we are going to add the pages and let's start with the login page.

03:28.540 --> 03:39.760
So the test will be like this login and the URL will be looking and the test ID will be login page.

03:39.760 --> 03:41.950
So saving this one.

03:43.870 --> 03:50.170
So this is failing because at the moment we don't have any routing path for this URL and also we don't

03:50.170 --> 03:56.500
have this test ID, we don't have any components having this test ID, so let's create the component

03:56.500 --> 03:57.150
first.

03:57.160 --> 04:00.970
So here in the terminal, creating the component with the angular CLI again.

04:00.970 --> 04:06.640
So we're running in G, G for generate and C for component.

04:06.880 --> 04:14.560
And the component name is going to be log in and let's, let's again exclude the CSS file by adding

04:14.560 --> 04:16.870
this inline style command.

04:16.870 --> 04:18.100
So hitting enter.

04:19.960 --> 04:25.150
So this is creating the looking compound, the external looking compound, spectators and looking compound.

04:25.150 --> 04:25.390
Yes.

04:25.390 --> 04:31.510
And also it is updating the app module to include the the logging component in the declarations.

04:31.960 --> 04:34.210
Now let's open the logging component.

04:34.480 --> 04:39.360
So this is the template part and we are going to update this one to include the test IDs.

04:39.400 --> 04:43.090
So we can just copy the content of the home component here.

04:43.480 --> 04:49.270
And let's change this to the login page and let's also update the header.

04:49.270 --> 04:58.840
So this is the log in page and we need to use this component in the the app router module here.

04:59.080 --> 05:04.120
So we, we need to set the pattern relevant component for that path.

05:05.080 --> 05:12.730
So here the path is going to be logging in this, this path definitions, we don't need to add the forward

05:12.730 --> 05:20.320
slash, so we are just going to log in and as a component it's going to be displaying log in component.

05:20.320 --> 05:25.210
So when the path is logging, it's going to be showing the logging component, saving this one.

05:28.570 --> 05:31.690
And he received the test is passing.

05:32.350 --> 05:36.170
By the way, you may be wondering why the test is passing.

05:36.190 --> 05:44.560
Even we didn't declare the the component like here in the test module, we didn't declare the log in

05:44.560 --> 05:49.300
component, but we had declared the sign up component and the home component.

05:49.900 --> 05:54.370
The the difference is like we can also just remove the component from here.

05:54.370 --> 05:55.600
So let's save this one.

05:57.550 --> 06:01.510
So the test case is for displaying the home page is working.

06:02.050 --> 06:04.390
But if we remove the sign up component.

06:07.520 --> 06:16.400
That test is failing because the the sign up component is dependant onto the different modules and that

06:16.400 --> 06:19.730
is basically causing the failure we are seeing here.

06:19.730 --> 06:31.250
So just adding each response into the declarations so we know what we are dependent on the on in this

06:32.060 --> 06:39.530
test setup later, if we have dependencies in the log in component, then the tests are right here.

06:39.530 --> 06:44.930
The component tests will be failing because we didn't declare the logging component here.

06:44.930 --> 06:47.540
So just saving like this.

06:49.420 --> 06:51.720
And here we see the tests are passing.

06:51.730 --> 07:01.680
Now let's add the second page and again opening the console and this one is going to be in g, g generate

07:01.720 --> 07:05.890
C component and the component name will be user.

07:05.890 --> 07:08.530
And again, going with the inline style.

07:11.400 --> 07:14.070
So the component is created.

07:14.550 --> 07:20.610
And again, let's have a test before before doing anything here.

07:20.610 --> 07:30.810
So at this time we will have a dynamic URL's like we will have a path like user one to be showing user

07:30.810 --> 07:38.880
page and we will also have a value like this user to solve the, the, this part is dynamic.

07:39.940 --> 07:43.240
And basically this is the idea of each user.

07:43.240 --> 07:49.230
So we will be using this ID in the user page to load that user's data from back end.

07:49.240 --> 07:54.070
So that's why we we need an identifier in this URL.

07:54.430 --> 07:58.480
So we have this, this path.

07:58.480 --> 08:00.340
So let's say this one.

08:03.100 --> 08:08.170
And let's open the user component again.

08:08.860 --> 08:13.540
Lets copy the content of either login or home.

08:14.170 --> 08:20.260
Basically this is going to be having this test ID and this is going to be the user page content and

08:20.260 --> 08:21.040
we will.

08:22.470 --> 08:29.250
Added This is a component to the app router and the definition for the path.

08:29.250 --> 08:32.280
Having the dynamic attribute is going to be like this.

08:32.280 --> 08:38.820
So we have pad and the path is starting with the user.

08:39.060 --> 08:44.700
Then for Slash, then we have the dynamic part and the dynamic part is like this.

08:45.090 --> 08:50.130
We can give whatever name we want, but it must be starting with Colon.

08:53.460 --> 08:55.650
So this is the.

08:56.790 --> 08:58.290
Configuration, let's say this one.

09:02.150 --> 09:03.770
So this is the routing configuration.

09:03.770 --> 09:09.620
And here we see the tests are passing so we can test this one on browser as well.

09:09.620 --> 09:12.860
So here going to log in page.

09:13.610 --> 09:20.360
Here we have here we see the log in page and if we go to the user, let's say one, this is user one

09:20.390 --> 09:21.230
user page.

09:21.230 --> 09:24.590
And if you go to user two, this is also displaying the user page.

09:25.220 --> 09:33.140
And normally I add the just test in different lectures, but let's do that in this one as well.

09:33.860 --> 09:38.480
So the terminal is here, let's open the app component.

09:38.480 --> 09:39.410
Just yes.

09:39.410 --> 09:57.710
So adding the the path for this is the login login page and we have user one since user page and we

09:57.710 --> 09:59.750
have user two.

09:59.750 --> 10:07.070
And this is also user page that saved us since the implementation is there, we are expecting this test

10:07.070 --> 10:07.700
to pass.

10:09.770 --> 10:13.100
And here we see the tests are passing.
