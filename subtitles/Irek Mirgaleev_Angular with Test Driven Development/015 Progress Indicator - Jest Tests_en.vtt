WEBVTT

00:03.250 --> 00:09.550
Now let's add the just version of the spin artists opening the sign up.

00:09.760 --> 00:19.540
Just toss again, just like we did in the karma tests, we are going to extract this repeating part

00:19.540 --> 00:21.400
into a set of function.

00:21.400 --> 00:30.820
So here in this described we will have a function, let's say this is setup form and in this one we

00:30.820 --> 00:35.060
are using async await because the libraries we are using are using a thing.

00:35.150 --> 00:46.060
Wait, so in this one just cutting this the the one from the sent username test until this part just

00:46.060 --> 00:48.430
cutting it pasting.

00:48.430 --> 00:50.950
Here we are using the button in the test.

00:50.950 --> 00:54.820
So let's have the button here.

00:57.280 --> 01:00.460
And let's call it wait.

01:01.210 --> 01:06.100
Sit up form and we are clicking the button.

01:06.100 --> 01:09.790
And in this one let's also call.

01:11.420 --> 01:12.800
Set up form.

01:14.860 --> 01:16.030
Let's save this.

01:17.990 --> 01:19.620
And the tests are passing.

01:19.640 --> 01:24.130
Now we are going to add the test for the button disabled case.

01:24.140 --> 01:27.500
So just copying this test description.

01:29.230 --> 01:32.890
And in this one it.

01:34.410 --> 01:40.350
Disables button when there is an ongoing API call and this is async.

01:41.700 --> 01:45.270
We call setup form.

01:45.600 --> 01:50.430
Now we are going to click the button and we are going to click it multiple times.

01:52.070 --> 02:00.080
In the karma test, we are using the HTTP type testing controller to to have the expectation from the

02:00.080 --> 02:04.130
server point of view about how many requests are expected.

02:04.580 --> 02:12.620
But in this one, we are using the mock service worker right here so we we can do similar thing right

02:12.620 --> 02:12.800
here.

02:12.800 --> 02:17.660
We can count how many times this endpoint is being called.

02:17.660 --> 02:22.820
So like we can have a counter right here, let's say let's counter.

02:23.060 --> 02:25.670
And this is going to be initially zero.

02:26.360 --> 02:33.290
And as it receives a request to this endpoint, we are going to increase the counter by one.

02:35.220 --> 02:41.220
But we are calling this like we are clicking this button multiple tests.

02:41.220 --> 02:47.790
So before each test let's make sure the counter is reset back to the zero.

02:48.240 --> 02:55.230
Otherwise, for instance, this test is also sending the request.

02:55.560 --> 03:00.540
So this would be affecting the overall count in the server.

03:01.720 --> 03:12.580
So like here we can add before each, before each, and before each test we can say the counter to be

03:13.150 --> 03:13.810
zero.

03:15.750 --> 03:20.470
So in this test it disables button when there is an ongoing API call.

03:20.490 --> 03:25.890
We can check like we checked the request, but we can check.

03:26.550 --> 03:28.470
Wait, wait for.

03:32.160 --> 03:34.200
And we expect this counter.

03:35.270 --> 03:36.050
To be.

03:38.270 --> 03:38.900
One.

03:40.110 --> 03:47.670
So saving this one, we already have the implementation, so we expect this to pass.

03:49.070 --> 03:50.510
So it's is passing.

03:50.810 --> 03:52.970
Now let's add the next test.

03:52.970 --> 03:56.810
And in this one, we are displaying the spinner.

04:00.320 --> 04:04.520
It displays spinner after clicking submit.

04:07.230 --> 04:11.190
Now we are going to call setup form.

04:11.490 --> 04:18.780
We are going to click the button, but we are going to check this spinner before clicking the button

04:18.780 --> 04:20.580
and after clicking the button.

04:20.880 --> 04:24.480
So we will get, we expect.

04:25.760 --> 04:26.570
Screen.

04:27.320 --> 04:31.310
We are going to get the let's check the sign up component.

04:31.310 --> 04:38.780
Once again, we are going to query this this element and we are using the the role functionality so

04:38.780 --> 04:49.340
far, like for querying the button, we were using this get by roll or we were using in the header part,

04:49.340 --> 04:55.970
we were using get by roll as well and we were using this heading roll for getting the the element we

04:55.970 --> 04:56.990
are looking for.

04:57.260 --> 05:02.840
So for this spinner we can use this roll assigned to IT status.

05:03.680 --> 05:08.960
So here we are going to get that by roll.

05:09.110 --> 05:14.540
And since we are looking for a non-existing element at this moment, it's not going to be there.

05:14.540 --> 05:22.220
So we are going to use the functionality of query by roll, not get by roll.

05:22.220 --> 05:30.110
So get by functionality, are expecting that element to be there, otherwise it fails.

05:30.710 --> 05:38.750
But when we are going to query an element which is not going to be there for that moment, we need to

05:38.750 --> 05:41.480
use the functionality of query by.

05:42.340 --> 05:45.190
So we are looking for this element not to be exist.

05:45.200 --> 05:52.930
So we are using this query by functionality and we are going to get by the role status.

05:53.870 --> 05:59.120
And we expect this not to be in the document.

06:00.380 --> 06:02.930
But after clicking the button we expect.

06:02.930 --> 06:09.500
So this query returns null if it doesn't find the element, but if it finds the element, it returns

06:09.500 --> 06:09.980
that element.

06:09.980 --> 06:12.470
So we can use the same one here.

06:12.470 --> 06:18.410
So before clicking the button, the element will not be there, but after clicking the button, it's

06:18.410 --> 06:21.080
going to be there saving it.

06:23.560 --> 06:26.320
This test is failing, but we know that it's working.

06:26.320 --> 06:32.800
We have verified it on process and also we verified with the tests for the karma.

06:33.520 --> 06:35.260
The thing is this.

06:35.410 --> 06:36.640
Query by role.

06:36.640 --> 06:43.990
This role queries are caring about all the accessibility functionality associated with the element.

06:43.990 --> 06:49.570
So right here, let's move each of these into their own line.

06:50.590 --> 06:54.580
So other than having this roll, we have this area.

06:54.580 --> 07:02.560
So this is accessibility related parameter and basically it is setting this element to be not accessible

07:02.560 --> 07:04.750
from the accessibility point of view.

07:04.960 --> 07:10.060
So that's why our queries are not finding the element.

07:10.060 --> 07:13.480
So both are actually not finding the element.

07:14.660 --> 07:16.230
Even the element is there.

07:16.250 --> 07:17.090
It's not finding.

07:17.090 --> 07:18.970
Therefore the query is failing.

07:18.980 --> 07:23.630
So one of the options is we can either say like.

07:24.920 --> 07:30.730
We can pass an options saying hidden to be true.

07:30.740 --> 07:37.010
So this is going to be querying the element if even there they are hidden from the accessibility point

07:37.010 --> 07:37.580
of view.

07:38.090 --> 07:41.840
So we can do like this and adding the same to this one.

07:41.840 --> 07:42.710
Let's save it.

07:43.690 --> 07:52.090
Now this is passing so it's not caring about this parameter to be set or we can remove this.

07:53.640 --> 07:56.820
And we can also remove this one from.

07:57.690 --> 07:58.660
This element.

07:58.680 --> 08:02.160
So either option is fine.

08:02.160 --> 08:04.800
It's up to your implementation details.

08:04.800 --> 08:09.540
So we know this element will only be visible based on this API progress.

08:09.540 --> 08:16.920
So from accessibility point of view, it doesn't really matter like it to be hidden or anything.

08:17.280 --> 08:25.290
We are in control of this element to visibility and is visible just during the API progress.

08:25.290 --> 08:35.550
So like for this specific case, it is fine to remove the accessibility hidden and we can just go like

08:35.550 --> 08:40.320
this query by role and the role of the element we are looking for.

08:40.470 --> 08:44.610
So this is how we will test this one in jest.

08:44.610 --> 08:46.860
And the all tests are passing.
