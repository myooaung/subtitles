WEBVTT

00:03.720 --> 00:10.350
Now in this application we have the login functionality, but so far after the successful login we don't

00:10.350 --> 00:15.690
see any visual reference on UI that lets us know that we are logged in.

00:16.350 --> 00:21.480
The logged in state is an application wide state and a couple of components will be dependent onto that

00:21.480 --> 00:21.960
one.

00:22.560 --> 00:25.650
Let's start with the first visual case.

00:25.650 --> 00:33.660
Let's make sure when we log in, the navigation bar will not be showing the sign up and logging links

00:33.660 --> 00:34.320
anymore.

00:35.520 --> 00:38.220
So let's edit test for this one again.

00:38.220 --> 00:44.340
This scenario will be interacting with different components and parent of those components is the app.

00:44.340 --> 00:47.940
So having the test in the app component as well.

00:49.080 --> 00:56.970
So in the app component, we have the the login block here log described part and we are going to add

00:56.970 --> 00:59.280
the new test to here as well.

00:59.640 --> 01:04.470
But before adding a test, let's refactor the existing part.

01:04.470 --> 01:09.270
So we will be repeating the navigation in each of these tests.

01:09.270 --> 01:15.840
So let's move this let's move this part into the, the setup form here.

01:16.230 --> 01:17.940
So just.

01:19.810 --> 01:25.900
Cutting this and pasting to the first line of the setup form.

01:25.900 --> 01:31.180
So we are navigating to the login page waiting for UI update.

01:31.480 --> 01:34.240
Then we have this testing controller.

01:34.240 --> 01:42.140
Then we are waiting for for a fixture to be stable, which means the login form will be ready.

01:42.160 --> 01:47.860
Then we are filling the form, then we are querying the button.

01:48.760 --> 01:52.900
Now we are not going to do this, but we are going to click to the button.

01:52.930 --> 02:04.420
We will handle the rest in the setup as well, and we will also cut the tick into this one as well.

02:04.870 --> 02:11.290
So this is handling all the and the login success part here.

02:11.470 --> 02:21.970
So instead of having the function name as the setup form, let's say setup setup login and now we are

02:21.970 --> 02:31.420
using the stick here so we can wrap this setup log in with fake async and.

02:32.500 --> 02:33.670
Closing here.

02:36.630 --> 02:39.570
And we don't need this email assignment.

02:39.600 --> 02:43.310
We are not going to have different values for email.

02:43.320 --> 02:49.680
So just removing this forum and going with user one at gmail.com.

02:50.340 --> 02:56.170
And in this test, all we will do is just call a wait, set up, log in.

02:57.060 --> 03:00.690
Now we are not going to wrap the test with fake.

03:01.050 --> 03:07.020
We don't need that anymore because the setup login is already wrapped with it.

03:07.440 --> 03:16.060
So it's going to be handling all the the async thing related to the navigation and the login success.

03:16.080 --> 03:20.970
Then in the end, we will see the home page in this test.

03:21.330 --> 03:25.140
Let's save this one to make sure nothing is broken after this refactor.

03:29.950 --> 03:31.510
And tests are passing.

03:31.510 --> 03:34.600
So let's add our test.

03:34.600 --> 03:46.900
And this is for the the visibility of the looking and sign up so it hides login and sign up from Navarre

03:47.830 --> 03:51.040
after successful login.

03:53.230 --> 03:57.850
So the successful login is this one.

03:58.380 --> 04:00.400
Does it send a good login?

04:00.490 --> 04:06.100
Now we are going to query the visibility of the login and sign up links.

04:06.960 --> 04:08.820
And previously we have done that.

04:09.890 --> 04:10.820
Here.

04:11.820 --> 04:12.570
Like this.

04:12.570 --> 04:17.390
We were querying the the anchors with the title we are looking for.

04:17.400 --> 04:19.980
So I'm just going to copy this one.

04:22.490 --> 04:25.280
And pasting here.

04:25.640 --> 04:31.310
The first thing we are querying is the visibility of log in.

04:31.880 --> 04:35.390
So this is the, let's say log in link.

04:35.930 --> 04:37.850
And the next one is.

04:42.820 --> 04:55.750
Sign up link, which is having the text of title sign up and we expect this login link to be false.

04:55.780 --> 05:03.310
It's not going to be on the page and also signup link won't be visible as well.

05:04.090 --> 05:05.740
So let's save this one.

05:09.470 --> 05:11.960
And this test is failing.

05:12.140 --> 05:14.690
It's login and sign up from our.

05:16.050 --> 05:22.980
So far we are conditionally shoving and hiding some parts in our application, but all happens within

05:22.980 --> 05:23.970
the component.

05:24.480 --> 05:27.900
So the implementation is limited to that component.

05:28.140 --> 05:36.360
But now the login state is not only related to login page, but also whole app needs to know about it.

05:36.360 --> 05:43.500
And also we need to know that information in number so we can show proper links on the navigation bar.

05:43.500 --> 05:49.110
So the links here will be visible conditionally and if a user is logged in, then we are not going to

05:49.110 --> 05:51.090
show the sign up and log in.

05:51.600 --> 05:56.850
So we must be storing this logged in state somewhere in our application.

05:56.850 --> 06:00.600
And the best place to do this is a service class.

06:00.930 --> 06:03.930
So let's create a service class.

06:05.190 --> 06:10.950
Internal using English, Clai and g g generate service.

06:11.550 --> 06:19.740
And we are going to generate a service for authentication and it's going to be under core directory

06:19.770 --> 06:21.690
just like the user service is.

06:21.690 --> 06:29.940
So under core directory there will be authentication and again skipping test for this component as well,

06:29.940 --> 06:32.130
skip tests.

06:34.080 --> 06:36.390
Now the service is created.

06:36.420 --> 06:37.380
Let's open it.

06:38.170 --> 06:39.450
Authentication service.

06:39.750 --> 06:48.510
Now, in the service, we will have a property and let's name it like this logged in user and this will

06:48.510 --> 06:58.440
have the information like ID of user and let's set defaults at the moment and there will be username.

06:59.430 --> 07:02.310
Initially it is empty and email.

07:03.210 --> 07:04.290
This is empty as well.

07:04.290 --> 07:12.360
And also let's have a billion is logged in, which is going to be false initially.

07:12.480 --> 07:20.480
Now when the login is success, let's open the login component here in the on click login.

07:20.490 --> 07:27.810
In this case we are not taking the responsibility, but if we take the responsibility we will see the

07:27.810 --> 07:31.590
username, user ID and email is returned in that one.

07:31.590 --> 07:38.610
So we are going to take that data and pass it to the authentication service.

07:39.270 --> 07:47.670
So let's have a function here and let's, let's name it like this said logged in user.

07:48.030 --> 07:51.690
By the way, we have a type for the the user object.

07:51.840 --> 07:57.230
So if we check the types here, this is the user object type is.

07:57.300 --> 08:07.950
So let's also have a type for for the logged in user as well and we can use the types for this one again.

08:07.950 --> 08:13.770
So let's have a type of logged in user.

08:13.830 --> 08:22.620
And basically this is similar to user object, but also it will have the the the is logged in boolean

08:22.620 --> 08:33.150
so we can define the type like this it is user and and is logged in which is boolean.

08:33.150 --> 08:41.280
So this is the type for for this logged in state and let's use it here.

08:41.280 --> 08:46.800
So the type of this logged in user will be logged in user.

08:47.810 --> 08:55.040
And when we are calling this said logged in user in log in component, we will pass the body which will

08:55.040 --> 08:58.360
contain ID, username and email.

08:58.370 --> 09:00.710
So in.

09:02.000 --> 09:10.070
It's an education service this will be taking, let's say user object type is user and we will update

09:10.070 --> 09:11.420
this logged in user.

09:12.620 --> 09:21.620
And to do that, we can do the assignment like this and we can take everything from user object.

09:21.920 --> 09:25.190
But we also need to set is logged in here.

09:25.190 --> 09:29.030
So is logged in is going to be true.

09:29.180 --> 09:38.510
So the user data is coming from the login component HTTP response and we are adding this is logged in

09:38.510 --> 09:40.340
in this authentication service.

09:40.880 --> 09:47.180
So the function is here, let's use it in login component.

09:47.850 --> 09:52.200
So we need to inject that component that serves here.

09:52.740 --> 09:57.900
So let's have private authentication.

09:58.680 --> 10:04.770
Service type is an education service.

10:06.210 --> 10:10.050
So it is coming from this core folder.

10:11.750 --> 10:16.880
Now here in this on click login we will take the.

10:17.860 --> 10:21.860
The body and there is no type for it.

10:21.880 --> 10:24.340
It is any type.

10:24.700 --> 10:32.530
Now we are going to call this authentication service said logged in user with this body.

10:34.630 --> 10:44.110
But the the typescript is complaining because the type of body is not matching to log the user's parameter

10:44.110 --> 10:45.760
user type.

10:46.000 --> 10:50.710
So we can do casting like this but the as user.

10:51.460 --> 10:55.180
So this is processed like a user object.

10:55.240 --> 11:03.250
So after logging is successful, we are updating the authentication service with the logged in user

11:03.280 --> 11:03.970
data.

11:04.000 --> 11:07.360
Now we are going to use this in a navigation bar.

11:07.360 --> 11:10.150
So let's open the now bar component.

11:11.590 --> 11:14.230
Now we need to inject the authentication service.

11:16.250 --> 11:22.130
Authentication, service authentication.

11:26.600 --> 11:34.190
Let's make sure we import with relative PED because the just tests are failing.

11:34.370 --> 11:41.450
If we have the previous PED, now we have the authentication service and in this authentication service

11:41.450 --> 11:45.860
we have the property of logged in user and we can use that in template.

11:45.890 --> 11:47.810
Let's open the now bar template.

11:48.020 --> 11:54.890
So here we can conditionally display this and basically we will check.

11:55.310 --> 11:57.290
I'm just moving this to the next line.

11:57.290 --> 12:08.960
So N.G., if now we can access to the authentication service and in it we have the logged in user.

12:09.620 --> 12:11.330
Let's open the authentication service.

12:12.110 --> 12:21.170
There is this logged in user and in it there is this is logged in boolean and we can use that is logged

12:21.560 --> 12:22.220
in.

12:22.640 --> 12:31.550
By the way, we are not able to access to the authentication service properties like this because this

12:31.550 --> 12:42.260
is private to the component and we can use it within the component class to use this service.

12:42.620 --> 12:52.790
The injected service in the template, we need to change this private to read only so we will be able

12:52.790 --> 12:54.230
to access to this information.

12:54.230 --> 13:01.670
But this is going to be visible when the user is not logged in.

13:03.140 --> 13:06.260
So I think not here.

13:06.320 --> 13:10.610
And the same thing is also applied for the login.

13:11.570 --> 13:17.390
Just formatting the document here and let's save all these changes.

13:20.210 --> 13:22.460
Now the tests are passing.

13:22.820 --> 13:25.730
So let's verify this one on browser as well.

13:25.760 --> 13:32.360
So let's click to login and let's fill the form user wrong mail.

13:32.540 --> 13:34.580
Com password.

13:35.630 --> 13:41.150
Now the layout is updated and we no longer see the signup and login links.

13:41.570 --> 13:43.790
So we are hiding the links.

13:43.790 --> 13:46.640
But let's add another link here.

13:46.670 --> 13:52.130
Let's display a link for my profile, for a link for the logged in user.

13:52.880 --> 13:59.000
So adding a new test to a component spec.

14:00.950 --> 14:03.230
So in this one it.

14:04.720 --> 14:13.830
Displays my profile link on now bar after successful login.

14:16.930 --> 14:20.730
So we are calling this one set up plugin.

14:21.340 --> 14:23.110
Now we are going to query

14:26.470 --> 14:27.250
a link.

14:28.900 --> 14:34.960
And that link is going to be having the title of my profile.

14:35.320 --> 14:38.020
Let's see my profile link.

14:38.380 --> 14:41.440
And we expect this link to be pretty.

14:43.030 --> 14:45.190
So this is the test.

14:45.280 --> 14:48.040
Let's display the karma first and let's save this one.

14:51.540 --> 14:52.590
The test is passing.

14:52.590 --> 14:58.230
But because I just copied the previous test, I have a typo here.

14:58.470 --> 15:02.190
We expect this my profile link to be true.

15:03.660 --> 15:04.440
Saving it.

15:07.430 --> 15:09.710
Now the test is failing.

15:09.800 --> 15:10.910
And let's fix it.

15:10.910 --> 15:13.280
Let's open the number component.

15:13.310 --> 15:20.200
We are going to display a new link and let's just copy the anchor here.

15:20.210 --> 15:27.770
And this time this will be visible when the authentication state is having this is logged in.

15:27.770 --> 15:36.440
True and title will be my profile and the text will be my profile as well.

15:38.000 --> 15:42.610
By the way, I'm not paying attention to this link at the moment.

15:42.620 --> 15:47.230
I just copied the anchor of login and keeping the router link is this.

15:47.330 --> 15:49.190
We will add a test for that one as well.

15:49.190 --> 15:50.210
Saving it.

15:53.940 --> 15:55.890
So this is passing.

15:56.550 --> 15:58.060
And let's add one more test.

15:58.080 --> 16:06.360
Now we will add a functionality to this link, and whenever we click to that one, we will be seeing

16:06.360 --> 16:07.830
the user page.

16:07.830 --> 16:23.940
So just copying this one, it displays a user page with logged in user ID in URL after clicking my profile

16:23.940 --> 16:25.050
link on our.

16:26.760 --> 16:32.190
So we are logging in querying the link.

16:33.070 --> 16:38.650
And we are going to click to this link, my profile link.

16:38.680 --> 16:39.460
Click.

16:41.740 --> 16:45.790
Then we are going to query the visibility of the user page.

16:46.630 --> 16:49.810
And I'm just coping that part from here.

16:52.580 --> 17:02.390
And pasting here and the visible page will be user page and we also need a short URL.

17:02.390 --> 17:07.160
And previously we did that in in the test.

17:07.400 --> 17:09.530
Let's find that one location.

17:09.530 --> 17:13.010
We were using the location right here and.

17:14.920 --> 17:19.030
Here in this test, it navigates to user page when clicking the username on user list.

17:19.030 --> 17:29.500
So this was checking the ped, so just copying this one and pasting here.

17:30.990 --> 17:40.260
And also let's make sure the response we are receiving like the we are returning a response to this

17:40.680 --> 17:42.240
this logging request.

17:42.900 --> 17:44.970
But it doesn't have anything in the payload.

17:44.970 --> 17:50.610
So let's make sure we update it to have the user ID and so ID will be one.

17:50.970 --> 17:58.670
Username is user one and email is user one at mail comm.

17:58.680 --> 18:02.340
So this information is used in the authentication service.

18:02.340 --> 18:09.480
So when the user is logged in, we are taking that user information from that authentication request

18:09.930 --> 18:12.240
response body and.

18:13.710 --> 18:16.830
We are going to use this ID in the URL.

18:17.190 --> 18:21.230
So in the test we should be returning that value.

18:21.240 --> 18:29.530
Otherwise those information will be undefined and we wouldn't be inserting the URL in this test.

18:29.550 --> 18:32.130
So let's save this one.

18:38.550 --> 18:40.380
So this is failing.

18:40.590 --> 18:42.090
At the moment it is failing.

18:42.840 --> 18:44.220
Let's fix it.

18:44.850 --> 18:51.150
Now we are going to update the link in an hour.

18:51.150 --> 19:00.120
So this was a link to the login, but now it's going to be a link to a user.

19:01.520 --> 19:10.100
And then we are going to append authentication service logged in user ID.

19:11.450 --> 19:15.890
So user slash logged in user ID saving this.

19:21.750 --> 19:23.280
I made a typo here.

19:23.430 --> 19:24.420
I need to.

19:26.360 --> 19:29.270
Raptors with a single court.

19:29.720 --> 19:34.520
So single court then adding the next part, saving it.

19:39.660 --> 19:44.250
Now the tests are passing and let's test it on browser.

19:44.340 --> 19:47.340
This is another issue we will fix later.

19:47.940 --> 19:52.030
So in each restart we are losing the logged in state.

19:52.050 --> 19:55.560
So here let's log in with user one once again.

19:58.980 --> 20:06.270
So now we have this my profile link and when we click to this one, we are navigated to this user's

20:06.840 --> 20:11.730
page user one and the navigation is working.

20:12.530 --> 20:21.140
In the next part we will fix the issue like the the reload will retain the state, the logged in state

20:21.140 --> 20:24.320
and we will implement that part in the next lecture.
