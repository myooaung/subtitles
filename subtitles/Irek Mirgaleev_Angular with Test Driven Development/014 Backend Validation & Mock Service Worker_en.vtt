WEBVTT

00:03.250 --> 00:06.160
Now let's add the same test for the chest part.

00:06.160 --> 00:12.820
So opening the chest ts again adding test to the interactions right here.

00:13.660 --> 00:14.920
So.

00:15.870 --> 00:21.690
Just copying the same test name here.

00:23.840 --> 00:29.270
The test is it displays validation error coming from back end after submit failure.

00:33.220 --> 00:36.010
And we are filling the form.

00:38.440 --> 00:40.990
We are clicking the button and.

00:42.680 --> 00:51.770
In the end, we are going to see the error message and the error message will be email in use.

00:52.850 --> 01:00.380
And let's say this is the error message and error message.

01:00.470 --> 01:03.320
We are expecting error message to be in the document.

01:03.320 --> 01:11.120
But before before this test, we must be having the server to return the error response we are looking

01:11.120 --> 01:11.520
for.

01:11.540 --> 01:16.430
So far we are using this server right here.

01:16.430 --> 01:21.770
This is the post handler for the sign up request and it is always returning 200.

01:22.850 --> 01:35.240
We can override this behavior in the test so here we can have a server, we can access to the same server

01:35.240 --> 01:38.780
instance and we can tell it to use this.

01:39.980 --> 01:42.320
Arrest post handler.

01:42.680 --> 01:52.250
And we are basically defining another rest post handler with this same same URL.

01:52.850 --> 01:56.900
So this is going to be overriding the one we defined above.

01:58.040 --> 02:04.310
And this is taking the request, response and context.

02:04.670 --> 02:12.980
And basically we are going to return an error status of 400.

02:13.750 --> 02:15.160
And there will be this.

02:15.160 --> 02:16.210
Jason, buddy.

02:17.600 --> 02:20.390
Which is having this validation errors.

02:21.500 --> 02:27.550
And in it, we have the e mail and the message is e mail in heels.

02:28.130 --> 02:36.410
So we are defining this new response time, which is returning 400 with this error message.

02:36.410 --> 02:42.980
So when we click to the button after filling this form, we are going to receive this error and we will

02:43.430 --> 02:45.860
see this message on UI.

02:47.000 --> 02:49.280
So let's save this one.

02:51.170 --> 02:56.340
And here we see the tests are passing and if we check the interactions last test.

02:56.340 --> 03:00.140
This one is this place validation error coming from backhand after summit failure.

03:00.140 --> 03:02.780
So this test is passing.

03:02.780 --> 03:12.050
But I would like to show you an issue with the with this approach like here we are overriding the the

03:12.050 --> 03:20.960
rest post handler for this URL and this has an impact in the in our test at the moment we don't see

03:20.960 --> 03:29.630
it but let's let's practice it how we can see the effect of this one just cutting this last test and

03:29.630 --> 03:33.800
just pasting the test before like this.

03:33.800 --> 03:42.630
So the test I pasted before is this one it hides sign up form of the successful sign up request.

03:42.680 --> 03:49.790
So this test is depend on the rest handler the server to return success response.

03:50.060 --> 03:57.260
But in this test, the test before this one is overriding the rest post handler.

03:57.710 --> 04:04.370
It seems like it is overridden within this test, but it is actually affecting the overall behavior

04:04.370 --> 04:06.710
of the the server here.

04:06.710 --> 04:09.830
So let's see the issue first, just saving this one.

04:12.550 --> 04:15.460
And we have a failure this time.

04:15.490 --> 04:17.290
And if we scroll up.

04:18.710 --> 04:22.080
Let's see the name of the failing test.

04:22.100 --> 04:28.370
The failing test is this one in interactions heights sign up form after successful sign up because basically

04:28.370 --> 04:33.730
the test right after this one it displays validation error coming from back end.

04:33.740 --> 04:36.110
So this one is failing.

04:36.590 --> 04:44.780
And again, the fail reason is because now the server in this test which is looking for a successful

04:44.780 --> 04:52.860
response coming from back and now the server is returning 400 because the previous test overwrite the

04:52.880 --> 04:55.100
the server behavior.

04:55.100 --> 05:05.120
So to fix this we have an option like we can use the just life cycle functions like this one is before

05:05.120 --> 05:11.660
each before each test we can use server's reset handlers function.

05:11.900 --> 05:17.240
So this is going to be resetting the handlers back to the to the original values.

05:17.240 --> 05:24.380
So the original one was this one and we override it in this test.

05:25.050 --> 05:33.330
When the next test is going to be running this before each going to be executed, and it's going to

05:33.330 --> 05:39.540
be resetting the handlers, which means we will go back to the the handler, which is returning the

05:39.540 --> 05:39.990
200.

05:40.000 --> 05:40.230
Okay.

05:40.230 --> 05:40.860
Back to client.

05:40.860 --> 05:43.020
So let's save this one.

05:45.420 --> 05:48.450
And here we see all tests are passing.

05:49.170 --> 05:55.110
Now we can move the order of these tests back to the way it was.

05:55.110 --> 06:02.220
So just cutting the the one with the validation error coming from back end to the last test in this

06:02.220 --> 06:03.310
interactions block.

06:04.050 --> 06:08.160
So when using MSW, just pay attention to this part.

06:08.160 --> 06:14.580
When you are overriding the server behavior, make sure it's not going to be affecting other tests.

06:15.180 --> 06:25.050
So make sure you use the reset handlers in the before each or after each life cycle hook of the gist

06:25.680 --> 06:26.790
test functions.

06:27.390 --> 06:32.100
Or alternatively, we can enhance the capability of this server right here.

06:32.310 --> 06:42.630
So our tests are using this rest post handler right here and we can enhance its functionality like we

06:42.630 --> 06:47.460
can set we can send some specific request payload.

06:47.460 --> 06:54.660
And based on that payload, this rest handler can return either 400 requests or 200 and so on.

06:54.840 --> 06:57.210
So let's practice that one as well.

06:57.690 --> 07:07.410
So here in the rest handler, let's say we are going to check the request body, the email field coming

07:07.410 --> 07:07.950
in the request.

07:08.190 --> 07:16.770
And if request body email has the value of, let's say, not unique.

07:17.720 --> 07:18.680
Malcolm.

07:19.010 --> 07:20.660
Then we are going to return.

07:22.060 --> 07:25.840
Return this response of.

07:26.730 --> 07:27.750
400.

07:29.520 --> 07:42.540
But the the validation errors, validation errors, having the email and it's going to be e mailed in

07:42.540 --> 07:43.140
use.

07:44.800 --> 07:52.570
So this handler will be returning 400 requests when the request buddy has this email.

07:53.170 --> 07:55.040
Otherwise it's going to be returning 200.

07:55.060 --> 07:55.460
Okay.

07:57.040 --> 08:07.330
Now, if we have this race handler now, instead of defining a new one in in the in this test, we don't

08:07.330 --> 08:10.930
need to override the race handler.

08:12.220 --> 08:16.030
But this time we need to make sure this set of form.

08:16.930 --> 08:22.760
Is filling the form with the the values we are looking for.

08:22.780 --> 08:28.180
So for the email field, the setup form is filling with this user one at gmail.com.

08:28.180 --> 08:33.620
But for the failed case, this value must be not unique.

08:33.640 --> 08:35.050
At mail go.

08:35.380 --> 08:38.890
And to do that we can enhance the functionality here.

08:39.220 --> 08:46.810
We can say the setup form is taking a parameter like let's say values.

08:47.140 --> 08:55.120
And this is going to be optional because otherwise we had we have to update each of the the functions

08:55.120 --> 08:55.780
here.

08:55.780 --> 08:56.860
It has functions here.

08:56.860 --> 08:58.630
So this is optional.

08:59.200 --> 09:06.640
We don't need to refactor all of the other tests and the values is for this case.

09:06.640 --> 09:10.990
We will have email in it and the type of email will be string.

09:11.320 --> 09:16.240
And we can do something like this for the user user event type for the email input.

09:16.240 --> 09:20.500
We can either type the values for the email.

09:22.620 --> 09:23.250
Or.

09:24.980 --> 09:26.300
User one it may come.

09:26.300 --> 09:35.450
So if we are passing the email value, it's going to be filled to the email input and then in this test.

09:36.520 --> 09:45.970
In this one we can call the setup form with the the object having email and the value will be not unique.

09:47.720 --> 09:49.520
It may come.

09:50.300 --> 09:55.010
Just checking here not to make any typo here.

09:55.310 --> 09:58.670
So this is the email and.

10:00.310 --> 10:00.580
Yeah.

10:00.580 --> 10:03.730
This is the one we are setting here as well.

10:03.910 --> 10:07.480
So just saving this one.

10:11.490 --> 10:14.580
And this test is also passing.

10:15.560 --> 10:18.370
So you have options here.

10:18.380 --> 10:26.630
You can either override the rest handlers in each test or you can go with a common one and add logic

10:26.630 --> 10:27.140
into it.

10:27.140 --> 10:35.900
But this approach is a bit fragile if you are adding too much logic into this one, maybe getting harder

10:35.900 --> 10:39.620
to control the expected behavior in each of the tests.

10:39.830 --> 10:48.200
So try to keep this one as small as possible and go with the rest handler.

10:48.200 --> 10:51.590
Override approach if it gets complicated.
