WEBVTT

00:03.540 --> 00:11.790
Now we implemented the functionality for submitting the request and it is time to add the test for this

00:11.790 --> 00:12.720
requirement.

00:13.050 --> 00:24.860
So opening the sign up component spec is so just copying the previous test and pasting here.

00:24.870 --> 00:27.210
The steps are similar.

00:27.420 --> 00:41.850
So in this one we say it sends username, email and password to backend after clicking the button.

00:42.360 --> 00:47.700
So we will be filling the form for all of these fields.

00:47.700 --> 00:54.030
So like in this one we are filling only the password and password repeat.

00:54.030 --> 00:59.010
But we will also do the same thing for the other fields.

00:59.010 --> 01:05.310
And this is username input and its username.

01:06.210 --> 01:10.170
And the other one is email input, IDs, email.

01:10.620 --> 01:12.900
Then we will fill those as well.

01:12.990 --> 01:14.310
So just copying.

01:15.040 --> 01:16.900
The one for the password input.

01:16.920 --> 01:19.000
So this is going to be for.

01:21.250 --> 01:32.620
Username input and let's say the value will be user one and for email input it's going to be user one

01:32.620 --> 01:34.590
at Malcolm.

01:35.710 --> 01:45.040
So at this point we filled the form, then the button is enabled, then we are going to click to this

01:45.040 --> 01:52.420
button and for clicking we can do this we call button click.

01:53.080 --> 02:00.220
So in the application after clicking the button, we are making API call and that is triggering an HTTP

02:00.220 --> 02:02.950
request to be sent to our backend.

02:03.070 --> 02:08.560
But in tests we cannot rely on to a real HTTP request going to backend.

02:08.560 --> 02:12.910
If we forget to start the back end, then the test will fail.

02:13.450 --> 02:17.740
But that doesn't mean we have problems with our application implementation.

02:17.740 --> 02:26.110
So to get consistent test results, instead of relying to an external service like this back end for

02:26.110 --> 02:31.270
this case, we will mark the behavior of the HTTP client we are using.

02:31.270 --> 02:36.910
So we are using fetch and we will mock its behavior.

02:36.910 --> 02:46.630
So we are going to replace the fetch with a mock function so we can do it right here, like before we

02:46.630 --> 02:56.470
do anything else else we call spy on this is a function coming with Jasmine and we are going to spy

02:56.470 --> 02:59.560
on the function coming from the window.

02:59.650 --> 03:06.790
So the fetch is part of the browser and it is in window and the functionality is fetch.

03:08.180 --> 03:10.640
And we can assign this to a variable.

03:10.640 --> 03:12.170
Let's call this one a spy.

03:13.210 --> 03:22.870
Now after clicking the button, we can get the values from the SPI so we can access to the cold history

03:22.870 --> 03:27.070
like spy spies the variable.

03:27.070 --> 03:29.450
And from this one we can get the calls.

03:29.470 --> 03:34.450
This is the cold history of the that spy function.

03:34.450 --> 03:42.490
And from this one we can access to the arguments that's being passed to that function call and we can

03:42.490 --> 03:47.020
access to those via this all args function.

03:47.020 --> 03:49.600
But we are going to click the button one time.

03:49.600 --> 03:55.810
So we will get the first arguments of this call history.

03:55.900 --> 04:00.490
So let's get the first one from this array and let's call this one as arcs.

04:01.930 --> 04:08.980
And from this arcs, these, these are the representation of the arguments we are passing to the fetch.

04:08.980 --> 04:15.820
So the first one is the, the URL, the second one is the request in IT object.

04:15.820 --> 04:20.200
And basically we are going to check this one, the body object.

04:20.680 --> 04:28.990
We are going to check the content of the body object so we can get the, let's say, second parameter

04:29.560 --> 04:33.010
and the arcs array is having.

04:33.010 --> 04:35.740
First one is this one and the second one is this object.

04:36.070 --> 04:41.080
So let's get the second one like this.

04:41.080 --> 04:48.280
And again, this is request in it type of object.

04:49.310 --> 04:53.390
And from this one, we can get second perm.

04:53.990 --> 04:55.640
Here we see the body.

04:56.940 --> 05:03.120
So this body is containing this thing, but this is going to be a string.

05:03.780 --> 05:08.580
So, like, we need to do something like this.

05:09.060 --> 05:20.310
We expect this second body, the second parent body to equal or equal to an object.

05:20.460 --> 05:25.080
But again, we will compare with the string version of the object.

05:25.080 --> 05:32.850
So let's say it's going to be JSON string ify and let's create the object we are looking for.

05:32.910 --> 05:34.950
By the way, we can remove this one.

05:35.130 --> 05:39.270
So in the object we will have username and that's going to be this one.

05:39.270 --> 05:41.130
We type user one.

05:41.130 --> 05:51.400
So it's going to be user one and the email field, it's going to be user one at Macomb.

05:52.050 --> 05:54.060
And the last one is password.

05:55.310 --> 05:58.680
It's going to be pass word.

05:59.190 --> 06:01.110
So this is the test.

06:01.320 --> 06:05.040
And let's switch to the karma window and saving this one.

06:07.250 --> 06:08.690
This is failing.

06:08.990 --> 06:10.760
I made a mistake here.

06:10.940 --> 06:13.220
It's not the first one.

06:13.390 --> 06:15.060
We are looking for the second.

06:15.080 --> 06:17.660
And the first one is the the URL.

06:18.050 --> 06:21.310
And the second one is the actual object we are looking for.

06:21.320 --> 06:26.330
So it is going to be ARX one and let's save this.

06:27.050 --> 06:33.320
Now this one is again failing because we created the string like this.

06:33.470 --> 06:39.800
The first one is the username, second one is the password and the last one is email and we need to

06:40.340 --> 06:43.610
do the same ordering here like this.

06:44.470 --> 06:46.000
Let's save it.

06:47.500 --> 06:49.930
Now the test is passing.

06:50.260 --> 06:56.590
So that's how we would test the scenario in default test setup.
