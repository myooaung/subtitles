WEBVTT

00:03.060 --> 00:09.510
So we have this form and we are taking the user inputs, updating the state, sending the request to

00:09.510 --> 00:09.960
Pecan.

00:09.960 --> 00:17.520
But Angular provides two different approaches for handling user input through forms, reactive and template

00:17.520 --> 00:18.120
driven.

00:18.510 --> 00:21.950
Both captures user input events from the view.

00:21.990 --> 00:30.690
Validate the user input, create a form model and data model to update and provide a way to track changes.

00:30.810 --> 00:35.010
So we are not going to go with our own implementation.

00:35.130 --> 00:42.120
Now in this one, we will be refactoring the implementation to use the template driven form.

00:42.120 --> 00:48.090
And the next one we will see how the reactive form is working.

00:48.630 --> 00:52.860
So in this one, we are going to use template driven form.

00:52.860 --> 00:59.790
And the first thing we need to do is let's open the app module and we are going to import a new module

00:59.790 --> 01:02.570
and that's forms module.

01:02.580 --> 01:06.480
So we are importing forms module from angular forms.

01:06.480 --> 01:14.040
And since we are importing a new module, we also need to import this one in the test modules as well.

01:14.040 --> 01:15.870
So in spec.

01:17.380 --> 01:25.420
So just like importing shared module, we will import forms module and we will also do that in just

01:25.460 --> 01:35.560
these as well right here from module saving all these changes and opening the karma window.

01:35.590 --> 01:37.780
All these are passing at the moment.

01:37.780 --> 01:45.130
We will be refactoring the implementation and the test will verify that the refactoring is working properly.

01:45.310 --> 01:53.380
So we are using the template driven form and as it name implies, the implementation is form.

01:53.380 --> 01:57.610
Implementation is based on the things we do in the template.

01:57.670 --> 02:03.240
We were taking the user inputs with this input handlers right here.

02:03.250 --> 02:04.990
We no longer need those.

02:04.990 --> 02:08.770
So just removing H.

02:10.540 --> 02:13.330
So removing input.

02:14.910 --> 02:23.220
From these, then also we don't need to have the corresponding functions in the component, so we will

02:23.220 --> 02:27.210
not need to change username on change email and change password.

02:28.800 --> 02:30.460
So that's it.

02:30.480 --> 02:33.130
So we have these properties in the class.

02:33.150 --> 02:35.790
Username, email, password, password, repeat.

02:35.790 --> 02:45.780
And we are going to update these from the, the, the fields right here and we will do that by using

02:45.810 --> 02:48.230
IMG model attribute.

02:48.240 --> 02:54.390
So this is this new model is coming with the, the forms module we just imported.

02:55.080 --> 03:01.800
So right here, first thing is we need to set a name attribute for the input because the engine model

03:01.800 --> 03:04.050
we are going to use requires that.

03:04.050 --> 03:10.200
So like here, let's move this to New Line, this one as well.

03:10.200 --> 03:15.660
So setting a name and name is going to be the the name in the component.

03:15.660 --> 03:18.690
So this is for this field username.

03:19.440 --> 03:21.240
So name is this one.

03:21.240 --> 03:34.200
And also we will have IMG model, but the syntax is like this in parentheses and also in square brackets.

03:34.200 --> 03:41.700
So this is two way binding and we are binding it to the username.

03:41.700 --> 03:46.410
So again, we are using the same name we have here.

03:47.070 --> 03:57.210
So the input value is associated with this class, this component class, username property.

03:58.520 --> 04:02.060
So we will do this for the other fields as well.

04:02.060 --> 04:09.290
So we will have name as email and energy model.

04:11.640 --> 04:12.420
Email.

04:13.420 --> 04:15.550
Let's do the same thing for a password.

04:16.690 --> 04:17.230
Name?

04:17.800 --> 04:18.880
Password.

04:22.340 --> 04:23.570
N.G. model.

04:25.930 --> 04:26.890
Password.

04:28.160 --> 04:32.630
And the last one is name pass.

04:33.710 --> 04:35.690
Words repeat.

04:37.400 --> 04:42.920
Dingy model password repeat.

04:43.310 --> 04:47.060
So with this IMG model, we have this two way data binding.

04:47.060 --> 04:55.400
So whenever we change the username, the other fields, the field in the component is updated.

04:55.400 --> 05:03.890
So the value for this input is automatically reflected to the property in this component.

05:03.890 --> 05:10.610
And when we click to the sign up, since these are having the latest values, we will be sending the

05:10.730 --> 05:12.200
data to backend.

05:12.200 --> 05:15.740
So let's save these changes.

05:19.540 --> 05:22.960
Now we see failure in the tests.

05:23.050 --> 05:29.560
The JAZMIN tests are failing, but if you check the just tests they are passing.

05:30.350 --> 05:32.360
Let's test this one on browser.

05:33.910 --> 05:35.260
Let's open the network.

05:35.260 --> 05:36.220
Tap here.

05:37.310 --> 05:39.410
Now let's fill the form.

05:39.560 --> 05:40.490
User.

05:40.910 --> 05:41.840
60.

05:41.870 --> 05:42.740
User.

05:42.770 --> 05:43.850
68.

05:45.440 --> 05:46.610
Password.

05:47.390 --> 05:48.790
Password.

05:48.920 --> 05:50.600
Now hitting enter.

05:51.140 --> 05:57.590
And here we see the request is going and receiving success.

05:57.890 --> 06:04.790
So basically what we feel is sent to backend in the payload and it is working.

06:04.910 --> 06:11.630
Now let's fix this karma test and if you check the failures, basically all the interactions tests are

06:11.630 --> 06:14.120
broken and that's because.

06:15.110 --> 06:25.490
Forms module is asynchronous and we need to wait for this fixture to be stable before filling the input.

06:25.490 --> 06:35.090
So here in this setup form, we are directly interacting with the inputs and updating them, but at

06:35.150 --> 06:44.210
the moment the forms module is not ready yet, so we must be waiting for it to be stable before typing

06:44.210 --> 06:47.570
values into those and to do that.

06:48.220 --> 06:58.450
We need to refactor this function to async and right here before like filling these.

06:58.690 --> 07:00.100
Let's do this.

07:00.100 --> 07:05.500
We will await fixture and it has this one stable.

07:07.230 --> 07:12.690
So when the fixture is stable, we will be filling these inputs.

07:12.690 --> 07:19.740
So the forms module will be ready and the values we are entering here will be passed to the component

07:19.740 --> 07:20.610
properties.

07:21.060 --> 07:26.760
Then the button will be enabled and we will be able to send the request to backend.

07:26.760 --> 07:35.010
And so now since this function, this setup form is async, now we need to update both the test functions

07:35.010 --> 07:39.240
to be async and we will wait here for the top form.

07:39.570 --> 07:41.970
So we will do that here as well.

07:43.860 --> 07:45.080
A async.

07:47.430 --> 07:51.120
And let's repeat them here.

07:52.670 --> 07:57.920
Just copying this one pasting here, I think.

08:06.860 --> 08:09.110
And we are done saving this one.

08:11.550 --> 08:14.430
And here we see the tests are passing.

08:16.030 --> 08:22.960
So with the template driven form, we don't need to do anything in the component in terms of listening

08:22.960 --> 08:24.990
for the changes in these inputs.

08:25.000 --> 08:33.310
All we do is just we have these properties and we are associating these properties with the corresponding

08:33.310 --> 08:36.150
inputs with the energy model like this.

08:36.160 --> 08:42.220
So whenever we type anything into this one, that values is automatically reflected to the corresponding

08:42.220 --> 08:43.060
property.

08:43.270 --> 08:52.240
And since these properties are changing this disabled like here in the is disabled, we are checking

08:52.240 --> 08:56.200
the equality of these and this is updating the button state.

08:56.230 --> 08:57.540
The button is enabled.

08:57.550 --> 09:03.970
Then when we click to the button, we are taking the values from these properties once again and sending

09:03.970 --> 09:09.580
it to back end, which are containing what we entered in the inputs.

09:09.880 --> 09:13.540
So this is how the template driven form is working.
