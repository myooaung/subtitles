WEBVTT

00:03.090 --> 00:06.300
Now let's modify our button enabled functionality.

00:06.720 --> 00:12.960
So far, the enable logic is dependent onto the equality of password and password repeat fields.

00:13.290 --> 00:20.310
But now we have the validation logic and let's enable the button when all the fields have valid values

00:20.310 --> 00:21.120
for this one.

00:21.120 --> 00:22.830
We don't need a new test.

00:22.980 --> 00:30.420
We have this test right here in the interactions, the first test in interactions block this one.

00:30.420 --> 00:31.470
It enables the button.

00:31.470 --> 00:35.460
When the password and password repeat, the fields have same value.

00:35.490 --> 00:42.510
Now in this test, we are not just updating the password and password repeat, but we are calling setup

00:42.510 --> 00:46.920
form to field all the inputs with the valid values.

00:46.920 --> 00:52.470
So all we need to do here is just change the test description.

00:52.590 --> 00:55.440
So it's going to be something like this.

00:55.440 --> 00:58.380
It enables the button when.

00:59.840 --> 01:11.360
All the fields have valid input and the test implementation is reflecting this test description.

01:11.810 --> 01:14.090
So just saving this one.

01:15.540 --> 01:18.540
So we don't see any difference in the test output.

01:18.570 --> 01:23.760
Now let's refactor our implementation right here in the sign up component we have.

01:23.760 --> 01:26.370
This is disabled function.

01:26.370 --> 01:34.350
And basically we were just checking the password and password repeat fields and returning a boolean

01:34.350 --> 01:36.810
based on the based on this logic.

01:37.020 --> 01:41.070
Now we are going to change the behavior here.

01:41.880 --> 01:44.460
Now we are going to control two things.

01:45.090 --> 01:51.540
The first thing is we will need to make sure the all the fields have the values.

01:51.540 --> 01:55.770
And we can do that like like this.

01:55.770 --> 02:01.290
So we can check the, let's say, form field that set this variable and it's going to be a boolean.

02:01.290 --> 02:11.700
And basically we will look for each of the form elements to have the value like this form get username.

02:13.420 --> 02:15.940
And we will take the value of it.

02:16.180 --> 02:18.130
So this is optional.

02:19.090 --> 02:30.430
And we will get values for the other inputs as well, like this value of email.

02:32.750 --> 02:40.040
And password and password repeat.

02:40.580 --> 02:49.900
So this is going to be having having the the final value in this chain.

02:49.910 --> 02:59.810
So if each of these inputs has the value, then this form field will basically have the value, which

02:59.810 --> 03:01.940
means it's going to be 30.

03:03.250 --> 03:11.590
And the next thing is we will check if there is any validation error and we have these get properties

03:11.590 --> 03:13.450
right here and we will.

03:14.670 --> 03:15.570
Use those.

03:15.590 --> 03:21.980
So let's say we have another variable that is validation error.

03:21.980 --> 03:25.370
And this time we will get this username error.

03:25.910 --> 03:38.280
But unlike checking the the value for all of the fields now we don't need all of them has the validation

03:38.330 --> 03:43.040
error, but only one of them is enough to say we have a validation error.

03:43.040 --> 03:53.420
So like we will use the OR operation this time if there is username error or if there is email error

03:54.110 --> 04:01.070
or password error or password repeat error.

04:02.370 --> 04:07.560
So if just a single one of them has the validation error, then we have the validation error basically.

04:08.700 --> 04:15.120
Then we can return a boolean back based on these two variables.

04:15.240 --> 04:22.950
So like we can say a return if form is not filled.

04:23.740 --> 04:28.390
Or if there is validation error then return true.

04:28.600 --> 04:37.120
Which means button is disabled otherwise return false which means button will not be disabled.

04:37.780 --> 04:38.830
Saving this one.

04:41.400 --> 04:48.270
And tests are pressing here the first interactions this enables the button when all the fields have

04:48.270 --> 04:50.680
valid input and and is passing.

04:50.700 --> 04:56.670
Now let's test this one on browser so the form is empty and the button is initially disabled.

04:57.090 --> 05:09.780
Just filling the form with the valid values of user one user one at gmail.com, password and password.

05:09.900 --> 05:16.830
And as you can see, the errors are gone, the button is enabled, but as soon as we have the validation

05:16.830 --> 05:23.730
error, the button is disabled and we also have this just test.

05:23.730 --> 05:27.210
And for that one we don't also need to do anything.

05:27.240 --> 05:32.700
All we need to do is just update the test description just like we did for the the karma test.

05:32.700 --> 05:41.790
Just copying the test description and opening just test and going to the first interactions test this

05:41.790 --> 05:42.360
one.

05:43.830 --> 05:46.650
And we were doing the same thing in this one as well.

05:46.860 --> 05:52.470
We have this setup form function and we are filling all the fields there.

05:53.400 --> 05:57.300
And what we need to do is just update the test description here.

05:58.380 --> 05:59.250
Saving it.

06:01.230 --> 06:02.640
And all tests are passing.

06:02.640 --> 06:10.620
And if we scroll up here in the interactions we have, this enables the button when all the fields have

06:10.620 --> 06:11.610
valid input.

06:11.640 --> 06:12.870
By the way, I.

06:12.990 --> 06:14.520
I have a typo here.

06:14.760 --> 06:16.170
Let's fix that one as well.

06:16.830 --> 06:20.190
So it's going to be enables like this.

06:23.430 --> 06:25.650
And the tests are passing.
