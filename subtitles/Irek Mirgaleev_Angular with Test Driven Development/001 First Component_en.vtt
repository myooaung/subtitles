WEBVTT

00:03.210 --> 00:08.430
Now we are starting our implementation and we will start with the signup page.

00:09.450 --> 00:13.440
At the moment I have these terminals opened.

00:14.390 --> 00:18.470
The first one is for AMPM Start.

00:18.470 --> 00:20.480
So this is running the application.

00:20.540 --> 00:28.460
The second one is the NPM test and that is for the default angular test, the one with the jasmine and

00:28.460 --> 00:29.260
karma.

00:29.270 --> 00:38.000
And the last tab is for the just NPM run test, just so all of them are running and.

00:38.900 --> 00:44.690
Here we got the browser, the application is running and I also have another window.

00:44.690 --> 00:48.500
And in this one we see the karma test results.

00:48.710 --> 00:55.760
Now we are going to create the sign up page and for that we are going to use Angular CLI.

00:55.790 --> 01:03.410
So having another terminal right here, I don't want to use the VTS code embedded terminal because it

01:03.410 --> 01:07.040
is leaving very small space for the VTS code.

01:07.040 --> 01:09.980
So I have this separate terminal here.

01:10.220 --> 01:17.900
So we are in the root directory of the project and for creating a component I will be using angular

01:17.900 --> 01:25.910
cli and we can create a component by and g generate component.

01:26.780 --> 01:33.710
Then we give the name for our component and for this one I name it sine dash up.

01:36.900 --> 01:39.780
So this one creates a couple of files.

01:39.990 --> 01:45.420
First, it creates the sign up folder, and in it we have the sign up component CSIS.

01:45.420 --> 01:49.400
Sign up component HTML, sign up component spec.

01:49.980 --> 01:58.560
This is the default test file and the last one is this sign up component and also it is updating.

01:59.350 --> 02:00.730
The App module.

02:00.760 --> 02:03.310
Now let's check the project in verse code.

02:04.260 --> 02:12.060
So here in the source folder under EP, we have this sign up.

02:12.970 --> 02:21.540
And in it we have the sign up component file CSS, HTML aspects and the typescript file of the component

02:21.550 --> 02:23.410
and here in the module.

02:24.730 --> 02:31.960
Right here in the declarations part, we see the sign up component is being imported in this module

02:31.960 --> 02:40.270
and added into the declarations area and here in the karma test output, other than the AB component,

02:40.270 --> 02:49.390
we have the sign up component test now and this is auto generated test and let's see how that test looks

02:49.390 --> 02:49.990
like.

02:53.000 --> 02:55.910
So this is similar to the app component test.

02:56.090 --> 02:58.340
We have this section.

02:58.340 --> 02:59.420
We are.

03:00.500 --> 03:10.010
Configuring the test module and we are declaring this sign up component and this is creating the component

03:10.010 --> 03:17.240
right here and the auto generated test is basically checking this component to be generated in the end.

03:17.240 --> 03:25.220
Now let's see our application in browser and let's display this component in the application.

03:25.700 --> 03:31.970
So let's open the sign up component components right here.

03:32.000 --> 03:38.210
We have this component information and here we see our components selector.

03:38.210 --> 03:40.970
Basically, we can use this one in EBP.

03:41.450 --> 03:44.180
So just opening EBP component.

03:45.120 --> 03:47.690
This is the visible patch at the moment.

03:47.700 --> 03:50.280
I'm just clearing all the content in it.

03:50.980 --> 03:55.510
And just adding EP sign up.

03:56.320 --> 03:58.450
So let's save this one.

03:59.180 --> 04:05.240
And here we see this sign up works and this is coming from this signup component template.

04:05.240 --> 04:08.740
Let's open that one, sign up component HTML.

04:08.780 --> 04:12.890
And here we see this paragraph.

04:12.890 --> 04:19.820
Now we have changed the content of the component and if we check the test console for the karma here

04:19.820 --> 04:25.640
we see a failure and the failing test is this one should render title.

04:25.640 --> 04:28.610
Let's open the app component spec.

04:28.940 --> 04:38.570
So the failing one is this one because it is checking the content of the HTML and it is failing at the

04:38.570 --> 04:39.260
moment.

04:39.470 --> 04:43.820
But we are not going to do any testing for the app component yet.

04:44.450 --> 04:50.270
We will add tests for the app component later, but for now we are not going to use it.

04:50.270 --> 04:52.370
So I'm just going to do like this.

04:52.370 --> 05:03.020
I'm just clearing the these tests and adding a test which is always be passing so it passes and this

05:03.020 --> 05:08.390
is just a test expect through to be.

05:09.200 --> 05:09.740
True.

05:10.520 --> 05:12.680
So this is always passing.

05:12.710 --> 05:14.960
We cannot clear the content.

05:14.960 --> 05:17.810
Otherwise the jasmine is complaining.

05:18.230 --> 05:21.230
If the test module is empty, it's complaining.

05:21.290 --> 05:24.680
But later we will attest to the app component as well.

05:24.770 --> 05:29.720
Now let's jump into the requirements for the sign up component.

05:29.900 --> 05:35.000
At the moment in the signup component, we have this signup works, but this is not what we are going

05:35.000 --> 05:36.380
to have here.

05:36.500 --> 05:39.890
And first, let's have the test for it.

05:39.890 --> 05:47.180
So opening the sign up component spec and just removing this one, it should create.

05:47.180 --> 05:54.170
We don't need this test and we are going to create our own and our first requirement is it.

05:54.990 --> 05:58.950
Has signed up, Heather.

06:00.480 --> 06:06.780
So in this signup page we are looking for a header having this sign up text in it.

06:07.020 --> 06:16.950
So we will get the native element, let's call this one is sign up and we get it by fixture, native

06:16.950 --> 06:17.580
element.

06:17.580 --> 06:22.680
And from this one we can use the query selector.

06:23.530 --> 06:28.210
To query the elements we are looking for and we are looking for an H one.

06:29.210 --> 06:32.570
And let's say this is h one.

06:33.650 --> 06:36.770
And we expect this one.

06:37.650 --> 06:40.350
To have text content.

06:41.890 --> 06:43.660
And it's going to be.

06:45.820 --> 06:47.620
Sign up.

06:48.250 --> 06:50.230
So this is our test.

06:50.320 --> 06:55.180
By the way, we should be using the types here for having a type safety.

06:55.180 --> 07:00.370
So this is basically an HTML element.

07:02.260 --> 07:08.770
And this is again an HTML element from this result.

07:08.950 --> 07:12.400
Now the text content is optional.

07:12.610 --> 07:14.560
It can be null.

07:14.590 --> 07:22.120
Therefore, we use this optional here and let's save this one.

07:23.760 --> 07:25.920
So this test is failing.

07:25.950 --> 07:27.930
It has sign up, addresses failing.

07:27.930 --> 07:33.720
And if we go to the spec list, we can see the failing test here as well.

07:33.960 --> 07:43.110
Now we are going to fix this and basically we are going to just add h one here and the content is signed

07:43.140 --> 07:43.740
up.

07:44.630 --> 07:53.920
And test is passing and if we switch to the browser here we are seeing the header is right here.

07:53.930 --> 07:56.560
So we have completed the first requirement.

07:56.570 --> 08:01.190
Now let's also create the same test with just version.

08:01.550 --> 08:11.810
And for that, I'm just going to create a new file and this is sign up component and is an extension

08:11.810 --> 08:15.950
for the just tests we are using just as.

08:19.860 --> 08:26.970
So in this one, we are going to use the testing library and we import that one.

08:28.310 --> 08:34.580
So we are going to import a couple of functions testing, library, angular and those are.

08:35.260 --> 08:38.320
The render and screen.

08:38.320 --> 08:42.250
And also we need our component because we are testing that component.

08:42.610 --> 08:51.130
So like from sign up components, we are importing the sign up component.

08:52.660 --> 08:54.670
And the test is same.

08:54.670 --> 08:58.420
It has signed up.

08:58.510 --> 08:59.320
Heather.

09:04.140 --> 09:11.160
In the testing library version we call render and we pass the component as a parameter.

09:11.160 --> 09:13.140
So we pass sign up component.

09:13.140 --> 09:18.780
But this render is async, so we need to wait here before doing any query.

09:18.780 --> 09:24.240
So since we are using a weight, we must be making sure our test function is async.

09:25.850 --> 09:28.220
Now the component is rendered.

09:28.980 --> 09:34.830
And in this component, we will be querying the the sign up, Heather.

09:35.780 --> 09:37.670
And we will do it like this.

09:37.880 --> 09:47.120
We get the queries from screen and the query we are going to use is get by role.

09:47.450 --> 09:55.100
So we are querying the elements based on their accessibility roles and the role we are looking for is

09:55.190 --> 09:56.080
heading.

09:56.090 --> 10:00.200
So we don't care about if this is H one, h two or anything.

10:00.200 --> 10:05.660
We just want and heading element, heading role element to have.

10:07.290 --> 10:10.020
This text sign up.

10:11.900 --> 10:15.170
So this is the header we are looking for.

10:16.390 --> 10:19.810
And we expect this, Heather.

10:21.290 --> 10:26.880
And this part is coming from the chest dome matcher.

10:26.900 --> 10:34.490
If you remember, we created this setup test and we are importing this testing library system.

10:34.490 --> 10:41.120
And here we use just on functionality and we expect this header.

10:41.810 --> 10:44.690
To be in the document.

10:45.780 --> 10:55.800
So this is doing the assertion that the Heather is in Heather is part of the the document of the HTML.

10:55.950 --> 10:57.930
So this one is ready.

10:57.930 --> 10:58.620
Let's.

10:59.340 --> 11:06.660
Save this one and well, we already have the implementation so the test will pass.

11:06.750 --> 11:09.450
Just switching to the terminal for the just.

11:10.630 --> 11:13.360
And here we see the test is passing.

11:13.980 --> 11:18.060
We can run the test once again by just hitting enter.

11:18.570 --> 11:20.190
So the test is running.

11:21.510 --> 11:23.370
And it is passing.

11:24.680 --> 11:36.500
So compared to the default test approach, the testing library has less set apart or less interaction

11:36.500 --> 11:38.930
with the underlying elements.

11:39.500 --> 11:43.780
Like here in the default test.

11:43.790 --> 11:49.130
We have this before each part which is running before each of the tests.

11:49.130 --> 11:58.010
So before this line is executed, these are running and this is configuring the module, running this

11:58.010 --> 12:02.150
fixture detect changes done and we get the specific element.

12:02.180 --> 12:09.740
We check that element's attributes to make sure it is having the the value we are looking for.

12:09.740 --> 12:16.250
But in testing library version, we just render the component.

12:16.460 --> 12:22.850
Then we use this query function and we don't care about the elements.

12:23.000 --> 12:27.500
All we care is about the roles and the text.

12:27.500 --> 12:31.820
And this is just like a real user is doing is a user.

12:31.820 --> 12:40.760
We don't know if this is H one, h two or anything, but we know this is a header in this page and what

12:40.760 --> 12:42.800
we are seeing is just the text.

12:42.800 --> 12:45.170
So we are just querying it like that.

12:45.170 --> 12:52.010
We are looking for a header, having this text and we are asserting that part here.

12:52.010 --> 13:01.070
By the way, we can use testing library in karma as well, so I can just copy this one.

13:01.850 --> 13:02.690
And.

13:03.680 --> 13:08.060
I'm just going to select all these changes and comment them out.

13:09.120 --> 13:13.970
And pasting the test I copied from just part.

13:13.980 --> 13:17.100
So I have this exact same test.

13:17.100 --> 13:20.390
But the different part is going to be this line.

13:20.400 --> 13:29.160
This was coming from the Gest Dome, which is specific to just but in default test setup karma is using

13:29.160 --> 13:31.560
jasmine just like gemstone.

13:31.590 --> 13:37.410
There is jasmine dome as well, but let's not go into that and make things complicated.

13:37.410 --> 13:40.740
Therefore we must be going with another matcher.

13:40.740 --> 13:43.620
Like to be pretty.

13:44.840 --> 13:47.520
So we expect this to have value.

13:47.540 --> 13:51.830
So switching to the karma window and.

13:52.750 --> 13:54.550
Just saving this one.

13:55.680 --> 14:01.440
And here we are seeing it has a up heather test is passing.

14:02.260 --> 14:04.180
So this is also working.

14:04.180 --> 14:10.600
But at the default test for the angler, I will continue with the default approach.

14:11.620 --> 14:17.890
I would like to demonstrate both options because you may need to know either one during your daily work.

14:18.010 --> 14:23.500
You can use one of them in your own personal project and the other one in your professional work.

14:24.040 --> 14:30.220
Again, I feel having popular test set up option adds value to this course.

14:30.870 --> 14:38.700
So this was just to demonstrate that the this library is not specific to the setup, but we can also

14:38.700 --> 14:42.140
use in the jasmine and karma test as well.

14:42.150 --> 14:51.840
But I'm just removing it and I will continue with the default here, just saving it to make sure everything

14:51.840 --> 14:52.920
is working.

14:53.550 --> 14:57.180
So we completed our first requirement.

14:57.180 --> 15:00.870
At the moment page does not look like as sign up form.

15:00.900 --> 15:07.860
Consider this one as a warm up requirement to get familiar with the test tools we are using in this

15:07.860 --> 15:08.460
course.
