WEBVTT

00:03.130 --> 00:06.910
Now we are signing up and we are able to activate our user.

00:07.510 --> 00:10.780
Now let's add a user listing functionality.

00:11.140 --> 00:19.540
We are going to add a component to home page to list the user's back end is having an endpoint for listing

00:19.540 --> 00:23.230
the users and we can pull the users like this.

00:24.570 --> 00:25.890
Here in browser.

00:26.460 --> 00:33.270
If we send the get request to this end point, we will be returning and response like this one.

00:33.270 --> 00:40.730
There is object and there is this content array and there is page and size and how many pages are there?

00:40.740 --> 00:46.920
We have these informations and in the content array we have the user information like the user one,

00:46.920 --> 00:49.020
user two and the others.

00:49.800 --> 00:54.450
By the way, I'm using an extension in Chrome to format this JSON.

00:55.170 --> 01:00.210
If you don't have that extension, then you will see the output like this one.

01:01.440 --> 01:09.150
So we are going to get the users from backend and we will display these users on the home page.

01:12.110 --> 01:15.470
For this one, we are going to create a new component.

01:16.010 --> 01:25.280
So here in the terminal, let's create a new one and angular cly and g, g, c and g generate component.

01:25.280 --> 01:31.940
And this component will be user list and it's going to be used in the home home page.

01:31.940 --> 01:35.840
So I'm setting the relative pet as home.

01:36.440 --> 01:41.360
So it's going to be created on the home directory and the component name will be user list.

01:41.510 --> 01:46.250
And for this one we are going to have the test and let's go with the default.

01:46.250 --> 01:47.450
So hitting enter.

01:48.820 --> 01:52.690
So the component is created under home folder.

01:53.570 --> 01:58.370
And that module is also updated with the declarations of this component.

01:58.580 --> 02:02.960
So basically this component will be responsible for loading the users from backend.

02:03.530 --> 02:09.830
In the backend, the user list is paginated, which means we will display next and previous page options

02:09.830 --> 02:11.210
on this component as well.

02:11.690 --> 02:14.470
Now let's open the home component.

02:14.480 --> 02:21.320
We are going to display the the user list and also let's check the user list components.

02:21.470 --> 02:26.570
So this is our selector, so let's use it right here.

02:27.380 --> 02:30.770
So we will have app user list right here.

02:30.770 --> 02:31.880
Let's say this one.

02:32.330 --> 02:40.040
So this is the user list works a paragraph coming with the user list component is HTML right here.

02:40.070 --> 02:44.420
Let's start the implementation by adding a header for this component.

02:44.810 --> 02:50.510
If you remember for the signup page, our first test was about checking the existence of the header,

02:50.510 --> 02:54.050
but that was more about warming up to those tests.

02:54.260 --> 03:00.380
The most important part to test is the interactions and functionalities, so existence of the elements

03:00.380 --> 03:04.010
are already part of those interactions tests.

03:04.010 --> 03:13.130
So for the header part, I'm not going to add the test, but let's add the the template here.

03:13.130 --> 03:18.950
So this there will be an H3 and it's going to have the text of this user.

03:18.950 --> 03:28.430
So the user is like this, but I'm going to use the bootstrap style and I'm going to use a bootstrap

03:29.270 --> 03:30.500
card style.

03:32.460 --> 03:40.650
And basically this H three is going to be card car theater.

03:42.200 --> 03:47.030
And we will move that to the center of this this day.

03:47.090 --> 03:51.680
So just moving the H three into the cart header, saving this one.

03:52.160 --> 03:54.130
Now it is looking like this.

03:54.140 --> 03:58.340
And after this header we are going to list the users.

03:58.430 --> 04:00.490
Now let's implement the functionality.

04:00.500 --> 04:05.600
So this component will be loading users from back and as soon as it is added to the page.

04:05.870 --> 04:11.480
In the tests for the this component, we will handle the rest request.

04:12.440 --> 04:15.530
So let's open the user list spec.

04:15.620 --> 04:16.550
Yes, first.

04:17.330 --> 04:25.820
Now we are going to interact with the HTP client because we are going to use it for loading the user.

04:25.820 --> 04:28.520
And here in the test module we will import.

04:29.840 --> 04:30.950
That's it right here.

04:30.950 --> 04:36.800
Import importing the HTTP client testing module.

04:37.780 --> 04:48.280
So this is the last module and we are going to have the HTP testing controller which is having the type

04:48.280 --> 04:53.020
of HTTP testing controller and we are going to.

04:54.790 --> 04:56.620
Inject it right here.

04:57.360 --> 05:03.690
Test bed inject http testing controller.

05:04.410 --> 05:11.790
And we will assign it to the HTP testing controller we have right here.

05:12.360 --> 05:14.370
So let's add our first test.

05:15.000 --> 05:17.010
Just removing the default one.

05:17.010 --> 05:23.520
And the test is it displays three users in list.

05:23.520 --> 05:28.680
So by default we will pull only three users in each page.

05:29.220 --> 05:31.530
So in this test we will verify that.

05:33.300 --> 05:42.840
So we are going to make the request to this endpoint API one zero users.

05:43.020 --> 05:48.780
If you remember, we are sending signup requests to the same end point, but there is a difference in

05:48.780 --> 05:55.650
the signup request we are sending post and when we are going to get the users, we will use the HTP

05:55.830 --> 05:56.130
method.

05:56.130 --> 06:00.300
So that's the difference between these requests.

06:00.930 --> 06:07.200
So we are going to handle request coming to this endpoint and we handle it like this.

06:07.200 --> 06:14.580
We are expecting one request to be sent to this API one zero users.

06:15.600 --> 06:21.120
We can fine tune the assertion here like we can also check the the method.

06:21.210 --> 06:26.010
We have done that in the signup spec previously.

06:27.940 --> 06:30.160
And we did that in this test.

06:30.160 --> 06:33.590
It is based email in use of an email is not unique.

06:33.610 --> 06:40.120
So here we have the HTTP testing controller and we pass a function to it.

06:40.120 --> 06:45.790
And in this function we are taking the URL method and body and we are doing these controls here.

06:45.790 --> 06:49.510
Then we are handling the request accordingly.

06:49.900 --> 06:53.890
We could do that fine tuning in this one as well.

06:53.890 --> 07:00.400
But since this test is just focusing to the single component and we are not going to be sending any

07:00.400 --> 07:08.080
signup request to this end point, then there is no case that this endpoint to be called for another

07:08.170 --> 07:08.890
request.

07:09.040 --> 07:12.970
So we know that it's going to be always for loading the user.

07:12.980 --> 07:21.190
So this is the let's say this is the request, then we are going to return the response.

07:21.190 --> 07:27.400
And in the response we will send the the payload like we see here.

07:27.400 --> 07:30.070
So let's just copy this one.

07:32.840 --> 07:42.470
And I'm adding it as a variable here and I'm naming it like, let's say this is the page and pasting

07:42.470 --> 07:51.650
the value I copied and to format this better, I'm using the vs code format functionality and here the

07:51.650 --> 07:53.750
page is looking like this.

07:53.750 --> 08:00.620
So we have the users, but we are going to limit the the visible element to three.

08:00.620 --> 08:04.070
So just removing the others.

08:04.070 --> 08:06.620
So only having three users in this list.

08:07.310 --> 08:12.770
And the size indicates the number of elements in that page.

08:12.770 --> 08:16.340
So let's have a consistent behavior here.

08:16.640 --> 08:22.700
So it's going to be three and the total of pages is not relevant at this point.

08:24.150 --> 08:24.930
So.

08:25.750 --> 08:32.110
When we send a request to this end point, we are going to return a response to the client.

08:33.220 --> 08:40.570
And basically we are going to return the response by calling request flesh and is a body.

08:40.570 --> 08:46.420
We will be passing this page object and that page object is this one.

08:48.120 --> 08:54.960
Then in the end the UI will be updated and it's going to be updated like this fixture, the deck changes

08:55.470 --> 09:01.140
and now we can check the, the elements having the user's info.

09:01.470 --> 09:10.200
So there are three users and we are going to show these users in an an ally list item element.

09:10.620 --> 09:21.570
So we are going to query list item here and we will do that by fixture, native element, query selector.

09:22.740 --> 09:25.430
But we are not going to just query single element.

09:25.440 --> 09:35.070
We are going to have multiple matching element and we are looking for three list items to be there.

09:35.310 --> 09:39.150
And so let's have this variable list items.

09:40.200 --> 09:46.020
And we are expecting this list items at length.

09:48.390 --> 09:50.280
To be three.

09:50.310 --> 09:51.930
So this is the test.

09:51.930 --> 09:57.330
And if we go over one more time, we have this rest handler.

09:57.690 --> 10:02.670
It is going to handle the request coming to this end point and as a result, it's going to be returning

10:02.670 --> 10:04.800
this payload.

10:05.040 --> 10:11.040
And in that list we have three users and we are going to show those users in a list item.

10:11.040 --> 10:17.040
And basically we are querying how many list items are there in the in the page.

10:17.040 --> 10:19.710
By the way, there is a typo here length.

10:20.560 --> 10:24.100
So switching to calm window and let's save this one.

10:26.610 --> 10:28.320
So this test is failing.

10:28.350 --> 10:30.660
It displays three users in the list.

10:31.080 --> 10:32.970
And let's fix this one.

10:33.090 --> 10:36.300
First thing is we need an API called Function.

10:36.300 --> 10:41.160
And so far we gathered all the API related functionalities in this user service.

10:41.160 --> 10:50.910
So let's have another function here and let's call this one is load users and we are going to return

10:50.910 --> 10:52.740
this HTP client.

10:52.770 --> 10:59.610
This time we will call get this is get method and the end point is API one zero.

11:00.440 --> 11:01.190
Users.

11:01.580 --> 11:10.220
So we have our endpoint and in the user list component, we are going to use this function.

11:10.700 --> 11:16.050
So first, we are going to inject the user service here.

11:17.840 --> 11:19.040
User service.

11:20.960 --> 11:28.550
Then we are going to use the the init function here because as soon as this component is mounted to

11:28.550 --> 11:36.680
the screen, we want to load the users from backend and the engine is basically for that.

11:36.860 --> 11:43.070
So we are going to call this user service load users.

11:43.070 --> 11:50.480
So this is observable, we are subscribing to it and it a response body.

11:51.860 --> 11:54.080
Let's say this is the response body.

11:55.130 --> 11:58.160
We will get the page object from backend.

11:58.460 --> 12:02.630
So let's assign it to a variable here.

12:02.840 --> 12:07.190
So we will have an object like page.

12:07.340 --> 12:17.030
Let's say this is Page and we are going to assign this response body to this page.

12:19.750 --> 12:23.830
By the way, this is complaining about the type definitions.

12:23.850 --> 12:25.430
We don't set any type.

12:25.450 --> 12:27.370
Let's define the types here.

12:27.370 --> 12:30.460
So we will have the types.

12:31.400 --> 12:39.350
Like if you go over this one, we will have the types for the, the, the response by the overall response

12:39.350 --> 12:45.440
body like the there will be page and it is having the type of number and the others as well.

12:45.440 --> 12:52.520
And there will be a content array and this content array is going to be having an object type which

12:52.520 --> 12:54.380
is let's call this one is user.

12:54.380 --> 12:57.800
So it will have ID, username, email.

12:57.800 --> 13:00.140
So we are going to define those.

13:00.140 --> 13:07.430
And for those definitions we can do something like this under the shared folder.

13:07.430 --> 13:11.150
Let's create a new folder.

13:11.150 --> 13:16.160
Let's call this one as types and under that one let's have index tags.

13:16.820 --> 13:19.640
So we have types folder and in it we have the index.

13:19.700 --> 13:20.220
Yes.

13:20.330 --> 13:26.030
And here we can define the types like we are going to use these types in the other components.

13:26.030 --> 13:30.980
So we are going to export those and the first type is user.

13:31.430 --> 13:41.030
And in user we have the ID and it has the type of number and we have username type of string and email

13:41.270 --> 13:43.250
and it is going to be string as well.

13:43.580 --> 13:47.900
Then let's export another type which is let's call this one is user page.

13:49.970 --> 13:57.500
And in the user page we have content and this content is an array of user and we define it like this.

13:58.290 --> 13:59.490
It's a new era.

13:59.970 --> 14:04.770
Then there will be page, which is number, then there will be size.

14:05.250 --> 14:06.570
That's number as well.

14:06.600 --> 14:09.420
And the last one is the total pages.

14:09.720 --> 14:11.520
That's also number.

14:12.240 --> 14:16.880
So now we have the types and let's use the types in our component here.

14:16.890 --> 14:25.350
So the first thing is the the page here is basically a type of user page.

14:26.010 --> 14:35.220
So it has the content, the page size and total pages fields and let's have initial value for this one.

14:35.220 --> 14:41.970
So before even we load the data from back and let's make sure we have some initial data for this and

14:41.970 --> 14:44.550
we can assign a default value like this.

14:44.550 --> 14:53.700
So we will have content and the content can be empty and let's add page, it's going to be zero and

14:53.700 --> 14:54.960
let's have the size.

14:54.960 --> 14:59.310
And for the size, size is indicating the size of elements in each page.

14:59.850 --> 15:04.710
Let's go with three because we are going to have three users in each page.

15:05.670 --> 15:06.990
And for total wages.

15:06.990 --> 15:09.000
Again, we can go with zero.

15:09.300 --> 15:15.870
So this is the initial value for the page, but we are going to update the page after we receive a response

15:15.870 --> 15:16.770
from back end.

15:17.610 --> 15:22.700
And this one is not working because the response body has no type.

15:22.710 --> 15:29.700
What we can do here is we can cost the response body to user page like this.

15:30.960 --> 15:38.130
So we are taking the response body, which is actually a user page type of object and we are assigning

15:38.130 --> 15:41.550
the response body to the page property in this class.

15:41.730 --> 15:48.090
So this is how we are loading the data, but still we are not using on the component.

15:48.090 --> 15:52.620
So let's open user list component HTML.

15:53.580 --> 16:00.660
So here after the header, let's add an unordered list UL.

16:01.170 --> 16:04.550
And in this ul, we are going to have list items.

16:04.560 --> 16:05.430
Liz.

16:06.250 --> 16:17.770
And in each of the allies we will have that user's username for for this one we are going to iterate

16:17.770 --> 16:21.520
over the let's open the user this component again.

16:23.120 --> 16:29.990
We are going to iterate over this page content, so we are going to take each item in this from this

16:29.990 --> 16:33.590
array which which is going to be the user object.

16:33.620 --> 16:37.300
Then we are going to take that user's object username.

16:37.310 --> 16:39.380
So here.

16:40.760 --> 16:43.130
To loop in that area.

16:43.160 --> 16:49.190
We are going to use another directive of Angular and that is n g for.

16:51.130 --> 17:01.300
And in G4 is working like this, we are going to take user of page content.

17:01.300 --> 17:02.980
So page content is the array.

17:03.490 --> 17:11.470
We are iterating over it and we are taking each item as this user variable.

17:11.770 --> 17:14.620
Then here is a child.

17:14.620 --> 17:19.930
For each of these lies we can pass, user is the user object.

17:19.930 --> 17:26.530
And here, because of the type definition, we are able to see the the properties it has and we are

17:26.530 --> 17:30.940
going to use the the user's username in this list item.

17:32.200 --> 17:34.210
So let's save all these changes.

17:35.680 --> 17:39.490
We have lots of changes and here we see it is working.

17:39.490 --> 17:46.600
And if you open the browser here we see it is working in this one as well.

17:46.690 --> 17:49.980
So it is basically loading the user from the can.

17:49.990 --> 17:55.870
If you go to the login page and come back to the home page here, see it is loading the users from backend.

17:56.470 --> 17:58.900
We will enhance the the behavior here.

17:58.900 --> 18:03.340
But before going to the next steps, let's change the style here.

18:03.640 --> 18:05.500
Let's, let's go like this.

18:05.770 --> 18:19.060
So this user list is going to be having the class of a list group and a list group flush.

18:19.240 --> 18:21.970
Basically these are the bootstrap classes again.

18:21.970 --> 18:29.410
So this is the unordered list, the parent component for the allies having the style and for the the

18:29.410 --> 18:30.280
list items.

18:30.280 --> 18:33.220
Let's have the adding a new line here.

18:33.220 --> 18:35.710
Let's add the classes of list.

18:35.710 --> 18:38.530
Group item and list.

18:38.530 --> 18:41.410
Group item action.

18:42.280 --> 18:44.680
So let's save this one.

18:46.330 --> 18:52.060
Now the list is visible like this, and now it's looking a bit better.

18:53.170 --> 18:55.240
And the tests are passing.

18:55.240 --> 19:00.550
So we completed the initial implementation and at the moment we have a component which is loading the

19:00.550 --> 19:02.130
users from back end.

19:02.140 --> 19:09.100
By the way, we don't see any errors in our tests, but if we open and check the karma, the console

19:09.100 --> 19:13.420
here, here we see a user list is not a known element.

19:14.140 --> 19:20.620
Error message is visible and that's because a component is also rendering the the home component, which

19:20.620 --> 19:24.610
means there is this app user list in the home component now.

19:24.610 --> 19:30.310
But the the new component is not declared in, in the test modules.

19:30.310 --> 19:32.950
So let's fix that part as well.

19:32.950 --> 19:37.010
So here in the component spec, yes.

19:37.720 --> 19:45.820
So we have the the declarations and let's add user list component to this one as well.

19:45.820 --> 19:47.230
So let's say this one.

19:49.790 --> 19:51.980
And let's check the console once again.

19:51.980 --> 19:54.020
Now it is cleared.
