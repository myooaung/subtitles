WEBVTT

00:03.440 --> 00:08.810
Now we have the validations for the username, email and password fields.

00:10.200 --> 00:14.610
In this one, let's implement the validation for the password equality.

00:14.610 --> 00:21.000
So when the passwords are not matching, let's display a validation error after the password.

00:21.000 --> 00:22.560
Repeat input.

00:24.180 --> 00:25.290
Let's start with the test.

00:25.290 --> 00:32.160
So adding a test to the sign up component spec and copying the previous one.

00:33.150 --> 00:36.090
In this one we will be filling the password.

00:36.240 --> 00:41.010
Repeat input and let's say the value will be this one.

00:41.760 --> 00:47.850
And as a result we will see this error password mismatch.

00:48.810 --> 00:50.340
Moving karma to front end.

00:50.340 --> 00:51.510
Let's save this one.

00:53.700 --> 00:54.870
That's our running gun here.

00:54.870 --> 00:56.550
We see the test is failing.

00:56.590 --> 00:57.810
Displays password mismatch.

00:57.810 --> 01:00.990
One password repeat has this past value.

01:02.070 --> 01:03.660
Now let's fix this.

01:04.740 --> 01:08.850
We are going to fix this in the sign component.

01:09.000 --> 01:14.550
So far we have been using the validators coming from the angular forms.

01:15.430 --> 01:22.180
But this time we are going to create our custom validation functionality because it's all dependent

01:22.180 --> 01:24.520
onto our requirement here.

01:24.700 --> 01:30.040
We are going to check two different input fields and their equality.

01:30.760 --> 01:34.870
So we are going to implement custom validation function here.

01:35.080 --> 01:38.440
And one more difference is here.

01:38.740 --> 01:47.470
So far, the validator functions were assigned to the specific forum controls, but now we are dependent

01:47.470 --> 01:50.650
on two inputs, like the password and password repeat here.

01:50.740 --> 02:00.040
So instead of associating the validation functionality with a specific field, we will use whole form

02:00.040 --> 02:04.960
group here so that we can access to both password and the password.

02:05.080 --> 02:06.430
Repeat inputs.

02:06.460 --> 02:10.180
So this is going to be a cross field validator.

02:10.540 --> 02:15.310
And basically, we can define a function some somewhere here.

02:15.730 --> 02:22.720
Let's say it's here and it's name it as password, match validator.

02:24.700 --> 02:29.050
And this function type will be validator.

02:29.950 --> 02:34.570
If an this is coming from the angular forms package.

02:35.420 --> 02:36.410
And

02:39.350 --> 02:42.560
it's going to be a function.

02:43.010 --> 02:45.710
This function will be taking a parameter of

02:48.590 --> 02:49.220
control.

02:49.220 --> 02:53.330
And the type of this control is abstract control.

02:53.720 --> 03:07.130
And as a result, this is going to be returning either validator validation errors or null.

03:07.130 --> 03:11.410
So if the validation is passing, then it's going to be returning null.

03:11.420 --> 03:16.340
But if validation fails, it's going to be returning this validation errors back.

03:17.270 --> 03:24.330
So here in this function now we are going to get the the values from this password and password repeat.

03:24.410 --> 03:25.700
And we will take it.

03:25.730 --> 03:28.370
We will take those values from this control.

03:28.370 --> 03:36.920
So like here we will get the password and we get it from control gate and we are going to get the password

03:38.450 --> 03:44.660
and similarly we will get the password repeat.

03:46.130 --> 03:49.700
Now we have the values of these form controls.

03:50.450 --> 03:52.910
Now we can compare their values.

03:53.420 --> 03:56.210
Like we can say if password.

03:59.140 --> 04:00.340
As this value.

04:01.030 --> 04:02.650
This is an optional value.

04:02.680 --> 04:03.490
This can be null.

04:03.490 --> 04:06.010
So adding this optional chain here.

04:06.580 --> 04:07.720
So if.

04:08.200 --> 04:09.610
It's value

04:11.740 --> 04:23.290
equals to password repeat value, so the values are equal so we can return null.

04:24.100 --> 04:27.790
Otherwise we are going to return the error object.

04:27.790 --> 04:34.420
And the error object is basically any key value we are.

04:34.430 --> 04:35.860
We are going to add.

04:35.890 --> 04:38.590
So the the key can be like this.

04:38.590 --> 04:50.530
Let's say return an object having a key and let's say the key will be a password match and the value

04:50.530 --> 04:52.180
is true.

04:52.180 --> 05:00.760
So by returning this response we are saying this password match validator is failed.

05:01.570 --> 05:08.560
Basically we are saying that and if you remember when we were having this required, this was this was

05:08.560 --> 05:12.910
returning and a response like this one required through.

05:12.910 --> 05:16.960
So we are doing same same thing here.

05:16.960 --> 05:20.880
So we have the password match validator.

05:20.890 --> 05:23.950
Now we are going to use it in this form group.

05:23.950 --> 05:31.090
So here the form group is taking the first parameter which is the, the form controls.

05:31.450 --> 05:39.880
Then like if you can focus to this part here we have the validator or options part.

05:39.880 --> 05:46.780
So after the first parameter is a second parameter, we can set the options for the validator and here

05:46.780 --> 05:53.710
we can set the validators and the validator is this password match validator.

05:54.550 --> 06:03.520
So it is password match validator will be called and when the the password and password repeats are

06:03.520 --> 06:07.540
same, we are not going to have any validation error.

06:07.810 --> 06:10.920
Otherwise we will have this password match error.

06:10.930 --> 06:18.970
Now to display a message on UI, let's have an error get function like this.

06:18.970 --> 06:23.620
And here let's get password.

06:24.010 --> 06:25.810
Repeat error.

06:28.540 --> 06:36.040
So like we do here, we were getting the the field, then we were checking if it was touched.

06:36.220 --> 06:43.060
Then based on the the errors, we are returning the corresponding message.

06:43.060 --> 06:44.020
We will do the same thing.

06:44.020 --> 06:51.910
But this time, instead of accessing to the specific form control, we will just access to the form.

06:52.510 --> 06:58.150
So we will do like this if this.

06:59.150 --> 06:59.960
Form.

07:01.230 --> 07:02.760
Has errors.

07:02.940 --> 07:09.270
Basically we are doing these things, but we were taking the field as a reference here.

07:09.270 --> 07:16.950
We were checking field errors, but now we are going to have error for the form because this.

07:18.090 --> 07:26.430
This validator is basically setting the error for the form group, not the form controls right here.

07:26.520 --> 07:30.480
So we are checking the form if it has error.

07:30.930 --> 07:32.880
And we will do the.

07:33.770 --> 07:35.000
The other controls as well.

07:35.000 --> 07:37.220
So just copying this part from here.

07:38.110 --> 07:41.740
And add in care.

07:41.740 --> 07:45.160
So this this form.

07:45.790 --> 07:53.740
So if this form has errors and if this form is touched and if this form is dirty means the user is still

07:53.770 --> 07:59.590
having entering values, then we checked the error type here.

07:59.590 --> 08:00.790
So if.

08:01.970 --> 08:06.020
We have this form errors.

08:06.050 --> 08:06.650
Error.

08:06.680 --> 08:09.450
Has the errors error?

08:09.500 --> 08:12.420
Has this password match.

08:12.440 --> 08:16.420
This is the name we set for the key.

08:16.430 --> 08:17.180
This one.

08:19.330 --> 08:29.770
So if we have this one, then we are going to return the message and the message will be password mismatch.

08:30.920 --> 08:32.240
This message.

08:33.960 --> 08:37.290
So we have this password repeat error now.

08:37.750 --> 08:48.840
And just like using these these error get functions, we will use this one password.

08:48.840 --> 08:51.150
Repeat error on the template.

08:51.960 --> 08:54.630
So right here.

08:55.480 --> 08:58.030
Let's move this to the new line.

09:00.140 --> 09:12.230
So first thing is we are going to add the style when we have the password repeat error and we will have

09:12.230 --> 09:21.440
this div after the input and this is for password repeat validation and this is what we are querying

09:21.440 --> 09:23.810
in the test.

09:24.830 --> 09:29.870
Right here we are taking the field name dash validation.

09:29.870 --> 09:36.260
So we are looking for this div to be there and then we are going to check the text in that div.

09:36.980 --> 09:44.330
So this is the password repeat validation and it's going to be visible when we have password, repeat

09:44.330 --> 09:47.210
error and we are going to display the password.

09:47.300 --> 09:48.860
Repeat error.

09:49.550 --> 09:55.520
By the way, we have this warning because this is only returning in this case, but let's make sure

09:55.520 --> 09:58.220
we return anyway.

09:58.340 --> 10:03.920
So it's going to be returning undefined when it doesn't match to these if conditions.

10:04.190 --> 10:06.080
Now let's save all these changes.

10:07.740 --> 10:13.590
And here we see the tests are running and the tests are passing here.

10:13.890 --> 10:19.920
The last test is this way is password mismatch when password repeat has this pass value.

10:21.180 --> 10:23.850
Let's try this one on browser.

10:24.030 --> 10:29.190
So here, let's type anything to the password.

10:29.430 --> 10:31.050
So if I type this.

10:31.320 --> 10:33.030
So we have two failures.

10:33.030 --> 10:37.600
One is because the thing I entered here is not matching to this pattern.

10:37.620 --> 10:43.530
The other failure is now we have this value which is not matching to the password.

10:43.530 --> 10:44.520
Repeat here.

10:44.730 --> 10:48.570
If I type something here, that error is gone.

10:48.780 --> 10:52.680
So we have implemented this cross field validation.

10:53.010 --> 10:58.290
But let's extract this out of this component.

10:58.500 --> 11:05.370
Again, switching to the karma, because we are going to refactor the implementation here.

11:05.460 --> 11:14.910
So here in the project, under this sign up, I'm just going to create a new file and I'm going to name

11:14.910 --> 11:16.710
it as password.

11:17.370 --> 11:22.020
Match Validator is.

11:23.080 --> 11:27.760
And I'm going to cut these.

11:28.840 --> 11:34.630
Lines, cutting the password match validator.

11:35.020 --> 11:37.780
Then we are going to, of course, import the.

11:38.840 --> 11:43.250
The Later FM abstract control.

11:43.730 --> 11:52.370
These are coming from the anchor firms and the validation errors and we need to export this function

11:52.370 --> 11:55.670
from here, saving this one.

11:56.240 --> 12:02.420
And now we can just import this password match validator from this.

12:03.230 --> 12:03.950
Module.

12:04.250 --> 12:06.440
Now, we don't need these imports.

12:07.550 --> 12:13.280
So just cleaning up this part and let's save all these changes.

12:13.550 --> 12:17.000
Tests are running and all this are passing.

12:17.660 --> 12:24.650
So we have implemented the Cross-field validator for the password and password repeat inputs.
