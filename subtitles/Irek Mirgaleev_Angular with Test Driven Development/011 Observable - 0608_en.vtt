WEBVTT

00:03.090 --> 00:06.860
Now we see the usage of the observable here.

00:06.900 --> 00:15.300
We are subscribing to it and we are getting the parameters of the URL or in sign up component.

00:15.600 --> 00:22.710
We have this signup function in user service, which is basically returning the HTP client post.

00:22.860 --> 00:28.110
And in this one, we are subscribing to the the to the response.

00:28.590 --> 00:33.720
Like we take the success response or we take the error response like this.

00:33.810 --> 00:41.250
Now let's practice a bit more and let's get a better understanding about the observable in Angular.

00:41.970 --> 00:49.470
So Angular is using the observables as an interface to handle a variety of common async operations.

00:49.560 --> 00:59.880
Like the module uses the observable to handle requests and responses, or the router or the forms modules

00:59.880 --> 01:05.460
use observables to listen for and response to the user input events.

01:06.420 --> 01:09.000
So the observable is basically whole.

01:09.000 --> 01:12.570
Another topic, but let's see how it is working.

01:12.870 --> 01:17.070
For this demonstration, I will have a dummy implementation.

01:17.070 --> 01:24.720
I'm not going to commit to the course project and let's do that in home component.

01:24.870 --> 01:26.820
So opening the home component.

01:26.820 --> 01:27.510
Yes.

01:27.750 --> 01:28.980
Closing other.

01:30.700 --> 01:31.420
File's here.

01:31.420 --> 01:36.880
So the home component is and home component is HTML opening both of these files.

01:37.090 --> 01:41.080
And here in this component we will practice the observable.

01:41.200 --> 01:49.780
The first thing is let's have buttons in this page so that we can trigger the observable behavior or

01:49.780 --> 01:52.600
we can subscribe to an observable.

01:52.720 --> 01:54.970
And let's start with that.

01:54.970 --> 02:05.170
So first I will have let's say this is a live I will be having the the subscriber part that say this

02:05.170 --> 02:16.450
is the subscriber section and I will have another Dave and this is going to be for the I'm just going

02:16.450 --> 02:18.070
to name it as publisher.

02:18.340 --> 02:27.580
So basically the the the observer and subscriber is like pub sub pattern publish and subscribe.

02:28.420 --> 02:36.640
So we are subscribing to an observable and observable is publishing the data and our subscriber is receiving

02:36.640 --> 02:37.420
those data.

02:37.420 --> 02:41.620
So here let's have a button.

02:42.640 --> 02:48.430
Let's say this is going to be subscribe to observable.

02:50.570 --> 02:56.510
And when we click to this one, we will have a function.

02:56.510 --> 02:59.000
Let's call this what is subscribe?

02:59.210 --> 03:04.490
And that function is here in the home component.

03:06.410 --> 03:12.350
So when we click to this subscribe to Observable, we are going to call subscribe and we will have a

03:13.160 --> 03:14.120
publish button.

03:15.410 --> 03:17.090
So let's say this is publish.

03:18.020 --> 03:22.400
So whenever we click to this one, it's going to be publishing data.

03:23.080 --> 03:25.960
And our subscription will receive that data.

03:26.560 --> 03:28.960
And let's have a click this there.

03:28.960 --> 03:36.100
And this is going to be calling the publish function, which is right here.

03:38.300 --> 03:41.780
Now let's start with the the simplest approach.

03:42.080 --> 03:53.510
So here in this component, we will have the observable, which is basically like this observable.

03:54.320 --> 04:06.440
This is coming from ARGs and it is requiring a type and the type is basically the payload which is going

04:06.440 --> 04:08.780
to be be delivered to the subscribers.

04:08.780 --> 04:18.860
So let's go with a string and the observable constructor is taking the subscriber and we can define

04:18.860 --> 04:27.290
a function here and we can take the let's call this one is sub.

04:27.990 --> 04:34.800
And let's have a variable here subscriber, which is going to be subscriber.

04:35.010 --> 04:37.410
This is again coming from Alex Jazz.

04:38.120 --> 04:42.560
And the subscriber is also a generic type.

04:42.560 --> 04:48.110
And just like the observable, we are going to have the same type of object here.

04:48.110 --> 04:54.020
So the subscriber will be subscribing to the string type of values.

04:54.860 --> 05:02.120
The compiler is complaining that this is not initialized, but we will assign value to it.

05:02.330 --> 05:09.770
So let's add the question mark right here to indicate that we are going to handle this one, to have

05:09.770 --> 05:10.460
the value.

05:10.910 --> 05:15.410
And here in the Observer was a callback right here.

05:15.860 --> 05:23.030
So whenever we we subscribe to this observable, the subscription function will be passed like this

05:23.030 --> 05:28.790
and we can basically set this subscriber to be this sub.

05:28.940 --> 05:32.210
So we are having a reference to the subscriber at this point.

05:32.210 --> 05:34.670
So here in the subscribe function.

05:34.670 --> 05:39.590
So whenever we click to the subscribe button in right here.

05:40.450 --> 05:45.190
We are going to call this one and then we can do like this.

05:45.580 --> 05:56.800
We are going to subscribe to this observable and as a subscription function we can do something like

05:56.800 --> 05:57.370
this.

05:58.690 --> 06:04.240
This is our subscription function and we will get the details of this function.

06:04.630 --> 06:06.310
And let's do like this.

06:06.310 --> 06:12.430
Let's take the data and let's let's let's do like this.

06:12.430 --> 06:14.290
Let's have a variable here.

06:14.290 --> 06:16.000
Let's say it is message.

06:16.300 --> 06:24.850
And initially, let's say there is no message and we are going to update this message with the data

06:24.850 --> 06:27.490
coming from the observable.

06:27.490 --> 06:30.490
So this message is going to be data.

06:31.360 --> 06:38.680
So we are subscribing to this observable and whenever we are receiving a data from that observable,

06:38.680 --> 06:42.250
we are updating this message with that data.

06:42.400 --> 06:52.810
And if we implement a publish, the publisher is going to be interacting with the subscriber and basically

06:53.140 --> 07:04.750
it's going to be calling this subscriber and it has next function and we are going to pass a value to

07:04.750 --> 07:04.840
it.

07:04.870 --> 07:08.680
And the value can be random string like this.

07:08.680 --> 07:15.820
So it's going to be math random and it's multiplied to 100.

07:15.820 --> 07:20.560
So it's going to be string in between zero and 100.

07:20.800 --> 07:26.470
So this is going to be a publishing this value to the subscriber.

07:26.470 --> 07:30.190
So the subscriber is defined right here.

07:30.190 --> 07:35.290
So we have the reference to it, but it's actually defined right here.

07:35.290 --> 07:42.910
And whenever it is called, we are updating the value of the message with the value of data.

07:43.360 --> 07:45.400
So let's save all these changes.

07:46.980 --> 07:48.840
Now we have two buttons.

07:49.320 --> 07:51.480
And let's do one more thing here.

07:51.630 --> 07:54.450
Let's make that message visible.

07:54.450 --> 08:07.110
So right after button, let's have the message here and let's also have a line here, a horizontal line.

08:07.800 --> 08:11.270
So we have the subscribe to observable.

08:11.280 --> 08:18.090
We have this no message and there is this separator line between the subscriber and publish.

08:18.270 --> 08:23.160
These can be separate components, but for simplicity, I'm just doing all the implementation in single

08:23.160 --> 08:23.580
component.

08:23.580 --> 08:29.050
So first thing is we are going to subscribe to Observable.

08:29.670 --> 08:34.920
Then I'm just going to click to publish and here we see the value.

08:34.920 --> 08:36.960
And if I click publish once again.

08:37.680 --> 08:41.920
I see different value because each time I click to the publish.

08:41.970 --> 08:48.780
It is calling this subscriptions next function with a random value.

08:48.780 --> 08:53.510
So I can just click to the publish and generate new value.

08:53.520 --> 08:59.340
So this can be considered like the the let's open the activate component.

08:59.580 --> 09:06.870
So right here we are receiving the params, the URL params and the pages are changing.

09:06.870 --> 09:18.480
And like the the root router module is just calling the next function of our subscription to send the

09:18.480 --> 09:21.930
data to our subscription right here.

09:23.160 --> 09:33.400
So when we are subscribing and observable, we, we basically pass a function which is by default the

09:33.420 --> 09:36.180
next function of the subscription.

09:36.480 --> 09:40.320
But if you remember in sign up component.

09:41.690 --> 09:46.580
Here we are handling the subscription like this.

09:46.580 --> 09:51.830
We were not passing the function, but we were passing an object.

09:52.070 --> 09:55.070
And this object has properties like next.

09:55.070 --> 09:59.030
So this is like the, the, this one.

09:59.850 --> 10:01.560
And it also has this error.

10:01.560 --> 10:08.550
So when we were having success response from this API call, we were handling that part in this next

10:08.550 --> 10:09.300
function.

10:09.660 --> 10:12.120
That's the implementation of the HTP client.

10:12.120 --> 10:19.920
And when the the request is failing with the errors, we are handling that part in the error section

10:20.040 --> 10:23.940
so we can go with similar thing here.

10:24.540 --> 10:36.780
So instead of parsing function like this, we can pass an object and this object can have these three

10:36.780 --> 10:40.170
properties next complete and error.

10:40.620 --> 10:47.190
So the next is next is the one for the success cases.

10:47.190 --> 10:53.570
So we are going to take the data and update the data and let's add the.

10:55.630 --> 10:58.150
That's the complete function.

10:58.420 --> 10:59.380
So.

11:01.330 --> 11:03.610
In this one, we can do something like this.

11:03.610 --> 11:08.200
Let's say we will update the message it is completed.

11:08.800 --> 11:13.750
So let's have another button and let's have complete function here.

11:13.900 --> 11:17.020
Basically, this one is going to call the subscriber

11:19.600 --> 11:22.630
and it's complete function.

11:22.930 --> 11:25.870
And let's have another button here.

11:26.920 --> 11:32.380
This is complete, complete saving all these changes.

11:33.400 --> 11:43.780
So hitting subscribe now the subscription is ready and when I click publish here I am receiving the

11:43.780 --> 11:44.800
random values.

11:44.800 --> 11:48.910
As I click publish, I receive a new one and if I click complete.

11:49.980 --> 11:56.700
Now I see this completed because this complete is being run.

11:57.120 --> 12:05.870
And after this point, if I click publish, I receive nothing because that subscription is completed.

12:05.880 --> 12:09.390
So this is one of the options in the subscription.

12:09.390 --> 12:13.470
And the other one is, let's add that error.

12:14.430 --> 12:17.970
And in this one we are going to receive the error.

12:18.240 --> 12:26.310
And basically let's update the message with the error message and.

12:27.940 --> 12:28.600
Here.

12:28.600 --> 12:30.640
Let's have the error function.

12:31.120 --> 12:32.810
We will let the error button as well.

12:32.830 --> 12:41.980
So we are going to call the subscriber and error and we can pass a new error object.

12:42.520 --> 12:48.100
Let's say this is dummy error and let's add corresponding button.

12:49.840 --> 12:59.980
So having this error button, calling the error function, saving these changes and we have the error

12:59.980 --> 13:01.720
button, let's subscribe.

13:02.080 --> 13:12.430
Clicking publish we are receiving data and if I click the error now we are seeing this dummy error.

13:12.430 --> 13:20.230
So that's the, the third property of the subscription and it's working like this.

13:20.230 --> 13:26.920
And if I click the publish after this one, it's also ending up with the complete case because the subscription

13:26.920 --> 13:31.570
is either completes with the complete or error case.

13:32.050 --> 13:36.370
Otherwise let's reload this and let's subscribe once again.

13:37.090 --> 13:45.340
If it's not complete or error, it will be always in subscription mode and it will always be receiving

13:45.370 --> 13:49.180
the messages from the the publish part.

13:49.920 --> 13:58.290
So like the subscription is working like this, but we may sometimes need only one data to be pulled

13:58.290 --> 13:59.700
from this subscription.

14:00.030 --> 14:03.210
So like, let's show that one as well.

14:03.510 --> 14:09.180
So instead of calling the subscriber immediately, we can do something like this, this observable,

14:09.330 --> 14:12.390
and we can use the pipe function.

14:12.570 --> 14:17.490
So pipe is basically going to take the data whenever we receive one.

14:17.790 --> 14:21.510
And in this pipe, we can do different things.

14:21.510 --> 14:27.420
And previously, we have seen one of the users in this unique email with the data right here.

14:27.450 --> 14:30.120
So here we are calling this user service.

14:30.120 --> 14:31.520
Is email taken?

14:31.530 --> 14:41.100
And then this is an API because using the typical end and we are subscribing to it and here we are using

14:41.100 --> 14:41.910
the pipe.

14:42.000 --> 14:45.360
And in the pipe we do two things.

14:45.690 --> 14:54.120
We either like handle the, the success case and map the the response actual data to something else

14:54.120 --> 14:54.870
like this.

14:55.200 --> 14:59.220
We don't care about the response data coming from backend.

14:59.430 --> 15:02.040
All we do is just return this thing.

15:02.040 --> 15:05.210
If if this is the success case, then we are fine.

15:05.220 --> 15:08.300
That means the unique email is failing.

15:08.310 --> 15:11.910
Then we should be showing unique email validation error.

15:12.180 --> 15:20.400
But if that is a failed case, which means we receive an error, then we handle that error right here.

15:20.610 --> 15:27.890
And then we are just returning another observable by this of a factory method.

15:27.900 --> 15:33.240
And basically we are just returning now back to the to the validator.

15:33.450 --> 15:36.810
And that is just saying there is no validation error.

15:38.470 --> 15:44.680
So we can use pipe here and we can use another one like first.

15:45.190 --> 15:47.590
And the first is it's coming from the.

15:49.150 --> 15:52.040
First is just taking the first.

15:52.060 --> 15:56.830
And then we can subscribe to this and we can do like this.

15:56.980 --> 16:02.290
Take the data and update this message with the data.

16:02.620 --> 16:05.560
So let's save this one and let's try this one.

16:05.950 --> 16:14.500
So subscribing to the observable and clicking publish, we receive data clicking publish again and again.

16:14.500 --> 16:23.710
But we are not receiving any more data because we are just taking only the first data and the subscription

16:23.710 --> 16:25.210
is ending after that one.

16:25.600 --> 16:27.670
Or we can do something like this.

16:27.670 --> 16:34.810
We can use the map and take the value and return a value like this.

16:34.840 --> 16:40.540
Let's add maybe we can add something like this to the value.

16:44.490 --> 16:46.320
I'm just going to import the map.

16:47.640 --> 16:54.660
So it's going to be opening this dashes and it's also add those after that as well.

16:56.580 --> 16:57.540
Let's save this.

16:59.240 --> 17:01.350
So subscribing.

17:01.370 --> 17:02.300
Publish.

17:02.330 --> 17:06.950
And here we can see there are dashes before and after the data.

17:07.400 --> 17:13.060
So the pipe functionality is allowing us to intercept the data.

17:13.070 --> 17:16.610
Then we can have more control on our subscription.

17:17.800 --> 17:21.490
So this is how the observable is working.

17:22.090 --> 17:27.220
Again, I'm not going to go into too much details and this is just for the demonstration.

17:27.220 --> 17:30.280
And this would be making more sense about the.

17:32.050 --> 17:34.750
The subscription we are using right here.

17:34.750 --> 17:42.880
So whenever the URL is changing, our subscription is receiving the data and the underlying behavior

17:42.880 --> 17:44.080
is like this.

17:44.080 --> 17:52.240
There is an observable and we are passing a subscriber and the service having that observable is basically

17:52.480 --> 18:01.420
accessing to the subscription subscriber and passes data to it whenever it's inner logic requires that

18:01.420 --> 18:03.550
new data to be published.

18:04.060 --> 18:10.390
So I'm leaving it at this point and I'm just going to undo these changes, so I'm not going to commit

18:10.390 --> 18:10.930
those.

18:11.410 --> 18:16.900
And in the next one we are going to add the test for the activation.

18:17.110 --> 18:22.600
And at the moment we have a failure in the test and we are going to fix that one as well.

18:22.780 --> 18:30.640
And we will interact with the observable behavior in those tests to have the navigation like changes

18:30.640 --> 18:32.470
in the activation component.
