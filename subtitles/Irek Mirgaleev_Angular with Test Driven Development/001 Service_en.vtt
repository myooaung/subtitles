WEBVTT

00:03.300 --> 00:09.930
Our sign up form is working now, but let's refactor our implementation and let's do it more.

00:09.930 --> 00:11.640
Angular way in.

00:11.640 --> 00:16.710
Angular components shouldn't be fetching or saving data directly.

00:16.950 --> 00:23.940
They should be just focusing on presenting the data and delegating all the data access to the services.

00:24.510 --> 00:32.610
So here in this one click signup, we are directly interacting with the client and we are posting the

00:32.610 --> 00:33.510
data to back end.

00:33.510 --> 00:40.230
But let's extract this functionality from this component and move into a service.

00:41.070 --> 00:48.450
So we are going to create a service class and for that one we can use Angular CLI once again.

00:49.170 --> 00:55.770
So we will use Angular Clai and G and we called G Generate.

00:55.860 --> 01:03.300
And this time we are not going to create a component, but we are going to create a service and this

01:03.510 --> 01:09.480
service will be under core folder and the service name will be user.

01:09.480 --> 01:12.300
And again for this one, I'm not going to add the test.

01:12.300 --> 01:18.000
So adding skip tests as true.

01:20.340 --> 01:26.460
So this is just generating a user service to us under this core directory.

01:27.800 --> 01:35.960
So if you check the project structure right here, we have the core folder and in it we have this user

01:35.960 --> 01:40.190
service to define a class as a service in Angular.

01:40.520 --> 01:48.830
We are using this injectable decorator and with it we provide the metadata that allows Angular to inject

01:48.830 --> 01:51.620
it into a component as a dependency.

01:52.010 --> 01:59.750
So in this injectable, we have this provided in and the value is root, which means this service becomes

01:59.750 --> 02:01.200
part of the root module.

02:01.220 --> 02:06.940
This means this service is provided in the root module of the application.

02:06.950 --> 02:11.690
Therefore, it's going to be available in every component.

02:13.080 --> 02:18.000
Now we are going to move the HTTP related parts into this one.

02:18.000 --> 02:18.900
So.

02:20.300 --> 02:25.190
First, let's inject the client

02:28.220 --> 02:35.060
right here and here we will have a, let's say, the function of sign up.

02:38.180 --> 02:43.490
And basically the sign up will do this thing, just copying this one.

02:44.330 --> 02:45.530
Pasting here.

02:45.530 --> 02:50.360
So it's going to be calling this HTTP client post and.

02:51.180 --> 02:53.730
This part is the request, buddy.

02:54.270 --> 03:00.480
So let's say we will have the body and we can define the body type here.

03:00.690 --> 03:12.930
So like username, which is string, then email, string and password, that's also string.

03:12.930 --> 03:20.040
So we will just pass this body and in this one we are not going to subscribe it.

03:20.190 --> 03:24.600
This is just going to be delegating this post request.

03:24.690 --> 03:30.330
Basically we will call this user service sign up function and we will pass the body to it.

03:31.580 --> 03:37.520
And as a result is calling this a typical end post and it is returning back.

03:37.520 --> 03:46.070
So the subscription will still remain here in this on click signup so that we can wait for the answer

03:46.250 --> 03:49.220
and update the signup six success accordingly.

03:50.000 --> 03:57.950
Now we have this functionality in user service and we are going to use user service in sign up component.

03:58.340 --> 04:01.010
So we no longer need a HTTP client.

04:01.040 --> 04:04.220
We need user service.

04:04.550 --> 04:06.230
User Service.

04:06.740 --> 04:14.630
Since the user service is part of the root module, angler will be able to inject it to the to the signup

04:14.630 --> 04:15.650
component here.

04:16.380 --> 04:22.080
And here we will be calling this user service.

04:22.080 --> 04:25.470
Sign up with the object.

04:25.980 --> 04:26.820
This one.

04:29.180 --> 04:33.350
And then we have this subscribe here.

04:34.330 --> 04:37.240
So we don't need this type of client in the.

04:38.050 --> 04:39.610
Sign them component anymore.

04:40.300 --> 04:41.260
Let's say this.

04:42.760 --> 04:45.310
And here we can see the tests are passing.

04:45.700 --> 04:53.110
The tests are not failing this time because the service because again, the service is part of the root

04:53.110 --> 04:53.860
module.

04:54.640 --> 05:02.850
When we were creating components, we need to like go to the test modules and declare them as well.

05:02.860 --> 05:10.060
But the service is part of the route module, so it's being accessible from the test module as well.

05:10.270 --> 05:14.260
So the tests are not affected with this refactoring.

05:14.530 --> 05:18.670
So that's how we are extracting the functionalities to the services.

05:18.700 --> 05:24.580
Another advantage of the service is other than separating the concerns, it's also making it easier

05:24.580 --> 05:26.350
for testing the components.

05:26.980 --> 05:36.490
If you remember, we have directly interacted with the HTP client and also we interacted with the Fetch

05:36.490 --> 05:39.250
when testing the API functionality.

05:39.910 --> 05:46.180
Now when we are using a service instead of thinking about the implementation details in this service

05:46.180 --> 05:55.750
like we are using HTP client, or we can go and use fetch or Axios or anything in future.

05:56.140 --> 06:03.130
So in the test for the sign up component, we can just mock the functionality of the user service and

06:03.130 --> 06:08.080
then we shouldn't be caring about what the user service is actually making the HTTP request.

06:08.080 --> 06:14.590
So here the karma output is passing and also the just tests are passing.
