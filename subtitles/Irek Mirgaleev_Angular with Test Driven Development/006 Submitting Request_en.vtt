WEBVTT

00:03.230 --> 00:06.200
Now we are going to send a request to back and.

00:06.950 --> 00:12.830
And it may be a bit of complicated to start with the test code for this one.

00:13.190 --> 00:19.070
So let's make things a bit easier at this step and let's practice what we are going to implement first.

00:20.570 --> 00:26.320
So in this signup form, we will get all the values from these inputs.

00:26.330 --> 00:30.620
Then after clicking the button, we will send that request to back end.

00:30.620 --> 00:36.950
So we will do the same implementation we have done so far for the password and password.

00:36.950 --> 00:40.250
Repeat, we will do the same thing for the username and email.

00:40.250 --> 00:47.120
So let's open the signup compound, HTML and signup component to us.

00:47.120 --> 00:52.610
So this approach is almost similar to what we would do in react view or svelte.

00:52.610 --> 00:57.050
But later we will see how we can do this in angular way.

00:57.050 --> 00:58.970
But let's not focus to that part.

00:58.970 --> 01:03.020
Let's just focus to what we are doing at the moment, what's the requirement?

01:03.020 --> 01:08.120
So we are going to have event listeners for username.

01:11.770 --> 01:12.640
Email.

01:13.180 --> 01:14.590
And we already have.

01:15.690 --> 01:17.190
Password and password.

01:17.610 --> 01:19.140
Just copying this one.

01:20.110 --> 01:21.970
And pasting here.

01:21.970 --> 01:23.260
This is for.

01:24.700 --> 01:25.660
Username.

01:27.480 --> 01:30.300
And we will update the username property.

01:30.750 --> 01:36.330
And this is for email and we will update the email property, by the way.

01:36.510 --> 01:38.270
I keep making this mistake.

01:38.280 --> 01:39.930
It must be semicolon, not comma.

01:40.320 --> 01:46.650
And in the template we will add the event listeners for these inputs.

01:47.490 --> 01:57.930
So input and this is going to be calling on change username and we pass the event to it.

01:58.820 --> 02:06.030
Then we will have same thing for the email input and we will call on change email.

02:06.050 --> 02:13.100
So with this way, we will be able to take all the values in these inputs and keep in the corresponding

02:13.100 --> 02:14.990
properties in the component.

02:14.990 --> 02:23.120
And we are going to click this button and after that we are going to send a request to back and having

02:23.120 --> 02:24.530
this information.

02:25.580 --> 02:32.720
So just like reacting to the input events, we can listen the.

02:34.980 --> 02:35.480
Click.

02:35.730 --> 02:38.250
Events being triggered in the button.

02:38.340 --> 02:45.540
And let's say at the moment we don't have what let's say this is going to be handled in on a click sign

02:45.570 --> 02:48.540
up function and let's create that function.

02:49.870 --> 02:52.990
So here adding on click sign up.

02:54.790 --> 03:03.700
And in this one, we can just look that this is working like this, let's say clicked.

03:04.270 --> 03:11.110
Let's have all these changes and opening the console of the browser.

03:11.230 --> 03:12.700
Let's switch the console.

03:13.740 --> 03:18.270
And if I type the same thing for the password and password, repeat.

03:18.270 --> 03:22.740
And if I click the sign up here we can see this console log is printed.

03:22.800 --> 03:24.540
So let's go back to the code.

03:24.780 --> 03:31.140
Now we are going to send the request to vacant and we need an HTP client for it.

03:31.560 --> 03:39.180
Again, Angular comes with a client, but other than that one there is a built in client in all browsers.

03:39.420 --> 03:41.700
It is fetch and let's use it.

03:42.240 --> 03:45.210
So we are going to call fetch.

03:46.630 --> 03:53.170
And we are going to send the request to this endpoint API one zero users.

03:53.960 --> 03:57.470
And the request data is.

03:58.230 --> 04:00.960
Like the method is going to be post.

04:02.330 --> 04:10.260
Then the body of our request is going to be we will be sending the username, email and password.

04:10.280 --> 04:12.470
We are not going to send the password to repeat.

04:13.430 --> 04:23.480
So we are going to create an object of username taking the value of this username, password, this

04:23.480 --> 04:25.820
password and email.

04:26.180 --> 04:27.230
This email.

04:27.230 --> 04:36.080
By the way, we need to set a string for the value value for the body and we can convert this object

04:36.080 --> 04:41.690
to a string via json string ify and wrapping this one.

04:42.890 --> 04:43.490
With.

04:44.960 --> 04:45.680
Like this.

04:46.950 --> 04:50.250
And let's at the Heather's.

04:52.380 --> 04:58.350
We specifically tell that this is content type of this request is

05:00.570 --> 05:03.510
application JSON.

05:04.110 --> 05:06.120
By the way, we need to add a comma here.

05:06.180 --> 05:07.320
So that's it.

05:07.650 --> 05:13.200
Let's save this one and let's open the console once again.

05:13.200 --> 05:14.850
Let's switch to the network tab.

05:14.850 --> 05:16.830
We will see an outgoing request.

05:17.540 --> 05:24.410
So clearing the existing locks, then let's say this is A, this is B, this is C and repeating the

05:24.410 --> 05:26.510
password clicking sign up.

05:26.630 --> 05:28.820
And here we are seeing the request.

05:29.180 --> 05:34.010
And in the payload section we see the, the values we entered.

05:34.920 --> 05:38.370
And at the moment this is failing with 404.

05:38.370 --> 05:40.690
But let's not focus to that part.

05:40.710 --> 05:43.860
We will interact with our back end later.

05:44.950 --> 05:47.350
Now our form is working.

05:47.530 --> 05:54.160
But let's wrap all this form with the form element.

05:54.160 --> 06:00.190
So just wrapping the label to the button with the form.

06:01.540 --> 06:05.470
And let's move this into a form like this.

06:06.070 --> 06:10.430
So with this way we can use our keyboard to submit the request.

06:10.450 --> 06:14.410
We don't have to use our mouse to click to the signup.

06:14.410 --> 06:20.350
So we are submitting the form and we are using this form element functionality.

06:20.470 --> 06:22.480
So let's try this one.

06:22.840 --> 06:31.090
So here, let's make sure you hit this preserve log for this case because we will see a behavior in

06:31.090 --> 06:34.330
this test like here, let's fill the form.

06:34.360 --> 06:36.610
A, b, c, c.

06:36.760 --> 06:40.900
Now instead of clicking to the signup, I'm just hitting enter.

06:41.470 --> 06:51.640
Now here we see the request is sent, but also we see these files to be fetched once again because the

06:51.940 --> 06:57.520
the page is reloaded actually and this is occurring because browser is detecting.

06:57.520 --> 07:04.240
There is this form submission and it is processing this event and in the end it is closing this page

07:04.240 --> 07:04.930
reload.

07:04.930 --> 07:08.280
But we don't need browser to handle this event.

07:08.290 --> 07:11.350
We are already taking all the necessary actions in our.

07:12.480 --> 07:14.730
Event handler right here.

07:16.190 --> 07:23.030
So to stop this reloading, we need to prevent the default behavior of the event.

07:23.030 --> 07:26.180
And we can do it right here.

07:26.270 --> 07:27.020
Let's.

07:28.780 --> 07:30.550
Move this to a new line.

07:30.550 --> 07:36.840
So we have this on click, sign up and adding semicolon.

07:36.850 --> 07:45.940
Then we can access to the actual event and we can call it this events prevent default function so the

07:45.940 --> 07:51.640
event won't be processed by the browser and it's not going to be ending up with the reload.

07:52.880 --> 07:55.970
So let's save it and let's try it once again.

07:56.840 --> 08:00.020
So clearing the console.

08:00.200 --> 08:01.340
Let's fill the form.

08:01.370 --> 08:03.170
A, b, c, c.

08:03.200 --> 08:04.880
Hitting enter.

08:04.910 --> 08:07.970
Now we only see this request.

08:09.060 --> 08:16.980
Alternatively, instead of binding to this click event of the button, we can achieve this same functionality

08:16.980 --> 08:22.860
for forms, submit events so we can do something like this.

08:22.980 --> 08:33.140
We are going to bind to the submit event coming from the form and basically we will again use our sign

08:33.150 --> 08:40.020
up on click sign up event listener and also we will again prevent the default behavior of this event

08:40.020 --> 08:43.590
so that the result will not happen.

08:44.340 --> 08:48.810
So just removing the click listener and let's save this.

08:50.620 --> 08:52.390
Let's try it one more time.

08:53.580 --> 08:58.360
Clearing the terminal a, b, c, c, enter.

08:58.380 --> 09:01.440
And here we see the request is going.

09:02.250 --> 09:05.520
So this was a bit complicated to demonstrate.

09:05.520 --> 09:12.060
We did test first, so that's why I choose to implement the requirement directly.

09:12.360 --> 09:18.060
Now, in this practice, we have seen the requirement and we implemented the functionality we are looking

09:18.060 --> 09:18.600
for.

09:18.720 --> 09:22.230
Next, we will add a test for this one.
