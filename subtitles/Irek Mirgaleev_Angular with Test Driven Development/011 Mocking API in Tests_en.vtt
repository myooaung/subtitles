WEBVTT

00:03.680 --> 00:08.840
Now I would like to show another way about testing API request.

00:09.380 --> 00:13.460
This lecture is focusing to digest version of our test.

00:14.930 --> 00:16.790
At the test sit up lecture.

00:16.910 --> 00:19.020
We installed the package.

00:19.040 --> 00:19.980
Let's open the package.

00:20.310 --> 00:26.060
And the package was this MSW and it is time to use it.

00:26.360 --> 00:34.490
Unfortunately, this is not working stable in car test, so we are going to use it only in the just

00:34.490 --> 00:35.090
test.

00:35.790 --> 00:36.150
Now.

00:36.150 --> 00:36.540
Let's see.

00:36.570 --> 00:38.760
What is this MSW for?

00:38.880 --> 00:44.160
So the mocking is useful technique to make our test to run in a predictable environment.

00:44.160 --> 00:49.590
But as we can see here, it is directly related to our implementation.

00:50.070 --> 00:56.790
Like here, we switch from fetch to HTP client and our tests failed.

00:56.790 --> 01:02.370
But on the other hand, from user point of view in browser, nothing has changed.

01:02.490 --> 01:05.220
The scenario is working exactly the same.

01:05.520 --> 01:12.660
MSW can be used to intercept the actual requests and return the responses we are setting.

01:12.660 --> 01:18.180
So with this way we wouldn't be paying attention about what we are using as a client.

01:18.390 --> 01:20.070
Let's do that now.

01:20.070 --> 01:27.270
We are going to update the signup just test and we will use MSW here.

01:27.450 --> 01:33.360
Previously we marked the fetch, then we had this test module for HTTP client.

01:33.390 --> 01:44.910
Now instead of those we are going to have mock service worker and for that we are going to import rest

01:45.120 --> 02:00.390
from MSW and we are going to import setup server from MSW node package.

02:02.480 --> 02:10.200
Now in this just test module, we no longer need this client testing module, but we can go with the

02:10.220 --> 02:13.640
HTTP client module.

02:14.510 --> 02:19.340
So the one coming from the angler common is the package.

02:19.790 --> 02:25.100
So we are not going to use the client testing module and just removing this line.

02:25.100 --> 02:27.800
We are not going to use the Tibetan string controller as well.

02:29.010 --> 02:32.670
So we have this rest and set up server.

02:33.500 --> 02:37.370
And we replaced the client testing module with this client module.

02:37.490 --> 02:40.310
Now let's go to the test.

02:40.310 --> 02:45.530
We need server and in this one we were using the testing controller.

02:45.530 --> 02:52.420
But now instead of that we will do like this before rendering the component.

02:52.430 --> 02:54.440
We will create a server.

02:54.590 --> 03:00.530
So we will have a server here and we call setup server to create one.

03:00.890 --> 03:10.250
And this function is taking request handlers and we can create request handler right here.

03:10.250 --> 03:20.030
We can use rest the one we imported from the MSW and it has the functionalities of all the rest functions

03:20.030 --> 03:28.790
like post, get delete and we can use post here because we are sending post request and we are setting

03:28.790 --> 03:29.630
the path.

03:29.660 --> 03:40.790
The path is API one zero users and then the second parameter is the the one we have the handler function.

03:40.790 --> 03:47.180
So we have the request is a param for this one response and context.

03:48.390 --> 03:50.610
And let's define a narrow function here.

03:52.090 --> 03:55.960
So in this function we will receive the request.

03:56.140 --> 03:58.960
And from this request we can take the request body.

03:58.960 --> 04:08.770
So like this request, but it is here and we can assign it to a variable here, request body and let's

04:08.770 --> 04:17.410
say this is going to be like this, but the typescript is complaining because we defined request.

04:17.410 --> 04:20.410
But later now we are not going to use this part.

04:20.410 --> 04:26.860
We are not going to be using the controller or we are not going to take the request from that one.

04:26.860 --> 04:29.950
So just removing that, so we have this request.

04:29.950 --> 04:34.360
But here, by the way, that's remove the testing controller from here as well.

04:34.840 --> 04:43.360
So we are going to take the request from this request object and this is an actual server like environment

04:43.360 --> 04:43.990
for us.

04:44.200 --> 04:47.770
And as a result we can return a response.

04:48.310 --> 04:59.110
And in this response we can set the status like this context status 200 and we can set response body

04:59.260 --> 05:00.460
whatever we want.

05:00.760 --> 05:02.950
At the moment I'm just returning empty object.

05:03.100 --> 05:11.860
So this is the server and this is the handler and we need to run this server in listening mode.

05:12.490 --> 05:16.330
So we have this mock service worker ready.

05:16.360 --> 05:19.990
Then our application is rendered.

05:20.470 --> 05:22.900
Then we are clicking the button.

05:23.580 --> 05:30.690
Now after clicking the button request is not immediately hits to this one and assigns the request,

05:30.690 --> 05:31.200
but it to.

05:31.200 --> 05:40.950
Here this is running in async, so we must be waiting, waiting to make sure this request body is assigned.

05:40.980 --> 05:42.780
It's not remaining undefined.

05:42.780 --> 05:46.740
It's going to be assigned to this value.

05:47.550 --> 05:55.500
And for that, the testing library has a functionality and that functionality is wait for.

05:55.890 --> 05:59.460
So it's coming from this one testing library, angular.

06:00.540 --> 06:10.680
And this is async functionality, so it's taking a callback and also it has a weight here.

06:10.980 --> 06:16.770
Then we can move this expect into this weight for callback.

06:16.950 --> 06:17.820
Like this.

06:18.180 --> 06:24.020
But now the typescript is complaining about this request for it to be implicitly any.

06:24.040 --> 06:28.260
We can say it is any.

06:28.770 --> 06:30.570
And this is gone.

06:31.110 --> 06:33.120
Now let's save this one.

06:34.130 --> 06:36.650
And here we can see the test is passing.

06:36.800 --> 06:45.980
So with this way, we don't we don't know anything about the client we are using and we can verify this

06:45.980 --> 06:47.660
one like this.

06:47.660 --> 06:53.390
We can go back to sign up component and just comment out this HTP client and.

06:54.080 --> 06:55.660
Use the fetch again.

06:55.670 --> 06:57.740
Let's save this.

06:59.380 --> 07:01.660
And this one is also passing.

07:01.660 --> 07:06.190
So our test is not affected from that change.

07:06.640 --> 07:13.630
In the course, I will be using the topic line so it's time to remove the fetch part and.

07:15.610 --> 07:25.210
And I think the HTP client Bec and let's save this and let's also refactor our tests.

07:25.390 --> 07:29.320
This server can be used in multiple tests.

07:29.470 --> 07:36.490
We don't need to repeat the steps in each of the tests like we can just cut this part from this test.

07:37.260 --> 07:40.590
And let's go top and define the.

07:41.430 --> 07:56.760
The server here and let's make sure before all test this server lesson will be running like this.

07:56.910 --> 08:00.210
So before all test, this one is going to be called.

08:00.900 --> 08:01.710
Then.

08:02.580 --> 08:07.170
The server will be available for each of these tests.

08:07.170 --> 08:14.550
And after all of the rollout is completed, we can call server close.

08:18.120 --> 08:19.290
So just like that.

08:19.440 --> 08:26.040
And since we are not using the test bed anymore, we can remove this and we are not using the fetch

08:26.040 --> 08:29.580
in the application so we can remove this one as well.

08:29.850 --> 08:32.490
And let's save again.

08:34.270 --> 08:42.520
And the tests are passing and now we have server ready for each of these tests and we can use that one

08:43.390 --> 08:44.560
whenever we need.
