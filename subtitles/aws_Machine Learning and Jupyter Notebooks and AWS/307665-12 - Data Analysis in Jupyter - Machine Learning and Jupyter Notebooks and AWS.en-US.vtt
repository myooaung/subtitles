WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.350
Hi,

00:00:00.350 --> 00:00:00.830
everybody.

00:00:00.830 --> 00:00:01.930
And welcome to this lesson.

00:00:01.930 --> 00:00:05.460
I'm looking at how we can analyze some data using the Jupiter notebooks.

00:00:05.460 --> 00:00:08.080
So now that we've looked at what jubilant book is,

00:00:08.080 --> 00:00:10.730
it's time to look at how they're used in practice.

00:00:10.730 --> 00:00:15.280
Which could you give you a clear understanding of why they're so popular and why they're

00:00:15.280 --> 00:00:16.110
used so much.

00:00:16.110 --> 00:00:17.670
So let's get started.

00:00:17.670 --> 00:00:23.290
We're going to use a data from a Fortune 500 company that I mentioned earlier in terms of

00:00:23.290 --> 00:00:24.590
the banking information.

00:00:24.590 --> 00:00:26.410
So remember,

00:00:26.410 --> 00:00:30.260
our goal is to find out how the profits of the largest companies in the U.

00:00:30.260 --> 00:00:30.810
S.

00:00:30.810 --> 00:00:32.270
Has changed historically.

00:00:32.270 --> 00:00:35.630
So it's worth noting that everyone will develop their own preferences and styles.

00:00:35.630 --> 00:00:37.780
But the general principles will still apply,

00:00:37.780 --> 00:00:38.960
and you can also follow,

00:00:38.960 --> 00:00:40.790
along with the section in your own notebook.

00:00:40.790 --> 00:00:44.510
If you wish to give you guys some good hands on practice before we start,

00:00:44.510 --> 00:00:47.270
let's go ahead and give our notebook a name,

00:00:47.270 --> 00:00:49.650
and it's always good practice to go ahead and do that.

00:00:49.650 --> 00:00:50.780
Especially,

00:00:50.780 --> 00:00:53.150
we're going to be working with multiple notebooks at the same time,

00:00:53.150 --> 00:00:58.140
so it's common to start off with a code cells specifically for imports and set up so that

00:00:58.140 --> 00:00:59.970
if you choose to add or change anything,

00:00:59.970 --> 00:01:03.630
you can simply add it and we run the cell without causing any side effects.

00:01:03.630 --> 00:01:04.770
So that's what we're gonna do.

00:01:04.770 --> 00:01:07.260
We import pandas to work with our data,

00:01:07.260 --> 00:01:12.510
the mat pot lid to plot the charts and see born to make our charts look a little bit

00:01:12.510 --> 00:01:13.050
prettier.

00:01:13.050 --> 00:01:16.380
And it's also common to import the num pie,

00:01:16.380 --> 00:01:17.050
which.

00:01:17.050 --> 00:01:18.140
But in this case,

00:01:18.140 --> 00:01:20.710
although we use it via pandas,

00:01:20.710 --> 00:01:22.720
we don't need it explicitly.

00:01:22.720 --> 00:01:27.670
And the first line isn't a python command but uses something called line Magic,

00:01:27.670 --> 00:01:33.240
then struck Jupiter to capture the Met plot lib plots and render them in a cell output.

00:01:33.240 --> 00:01:38.210
This is one off the range of advanced features that are out of the scope of this course

00:01:38.210 --> 00:01:42.270
that will look at a little bit later in some of the other courses that are coming ahead in

00:01:42.270 --> 00:01:42.900
the pipeline.

00:01:42.900 --> 00:01:46.320
So let's go ahead and a load our data,

00:01:46.320 --> 00:01:47.970
and just to keep in mind,

00:01:47.970 --> 00:01:50.240
it's sensible also to do this in a single cells.

00:01:50.240 --> 00:01:50.840
In this case,

00:01:50.840 --> 00:01:53.110
we need to reload it in any point,

00:01:53.110 --> 00:01:58.520
so we're going to load the data in a cell all by itself and the end.

00:01:58.520 --> 00:02:01.360
We're grabbing that Fortune 500 CSP file,

00:02:01.360 --> 00:02:05.330
which I have included as part of the Donald section so you guys can download it right from

00:02:05.330 --> 00:02:11.370
there from the course section and use that if you're going to be walking through this on

00:02:11.370 --> 00:02:14.250
your own PC's after that slaughter.

00:02:14.250 --> 00:02:19.080
That this keep in mind is always a good practice to regularly save the notebook side,

00:02:19.080 --> 00:02:22.950
since it is as simple as doing the control asked or if you're going to file,

00:02:22.950 --> 00:02:24.050
you can also say that there.

00:02:24.050 --> 00:02:30.280
But it's always good practice to save your notebooks as a regular practice,

00:02:30.280 --> 00:02:34.250
and I want them keep mine Every time you create a notebook,

00:02:34.250 --> 00:02:37.770
a checkpoint file is created as well as your notebook filed by default,

00:02:37.770 --> 00:02:42.940
Jupiter will auto save your notebook every 120 seconds to this checkpoint file without all

00:02:42.940 --> 00:02:44.550
drinker primary notebook.

00:02:44.550 --> 00:02:49.590
So when you save and Checkpoint who bought the notebook and checkpoint files are updated,

00:02:49.590 --> 00:02:50.010
hence,

00:02:50.010 --> 00:02:55.740
the checkpoint enabled you to recover your unsaved work in the event of an unexpected issue

00:02:55.740 --> 00:02:55.740
,

00:02:55.740 --> 00:02:58.700
and you could also revert to the checkpoint from the menu,

00:02:58.700 --> 00:03:02.550
which we just saw in terms of going on file and revert to checkpoint.

00:03:02.550 --> 00:03:04.600
All right,

00:03:04.600 --> 00:03:05.370
now let's get going.

00:03:05.370 --> 00:03:05.790
Arnold,

00:03:05.790 --> 00:03:07.640
book is us fully saved.

00:03:07.640 --> 00:03:08.800
We loaded our data.

00:03:08.800 --> 00:03:11.470
Set the DF into the most used pandas data structure,

00:03:11.470 --> 00:03:12.890
which is called data frame.

00:03:12.890 --> 00:03:20.530
And it basically looks like a table of what you guys see on your screen and and the head of

00:03:20.530 --> 00:03:24.160
the table and also the tail off the table meeting the end of the table,

00:03:24.160 --> 00:03:27.520
which concludes the 545 100 companies they were looking at.

00:03:27.520 --> 00:03:29.600
So now we have the columns we need,

00:03:29.600 --> 00:03:33.360
and each year old corresponds to a single company in a single year.

00:03:33.360 --> 00:03:35.040
Unless this renamed those columns,

00:03:35.040 --> 00:03:36.500
we can refer to them later.

00:03:36.500 --> 00:03:40.680
So we're gonna name those columns year rank,

00:03:40.680 --> 00:03:44.130
company revenue and profit respectively.

00:03:44.130 --> 00:03:48.410
Just we can refer to them by the respective names later on in the coat.

00:03:48.410 --> 00:03:49.580
Next,

00:03:49.580 --> 00:03:51.580
we need to explore our data set.

00:03:51.580 --> 00:03:55.330
Look to see if it's complete that pandas read it as expected.

00:03:55.330 --> 00:03:57.750
Are there any values that are missing?

00:03:57.750 --> 00:04:00.580
So we run a Lenin DF command,

00:04:00.580 --> 00:04:01.460
so that looks good.

00:04:01.460 --> 00:04:06.150
That's 500 rose for every year from 1955 to 2005.

00:04:06.150 --> 00:04:09.200
So let's check whether our data has been imported.

00:04:09.200 --> 00:04:10.350
As we would expect,

00:04:10.350 --> 00:04:16.240
a simple check is to see if the data types or the D types have been correctly interpreted.

00:04:16.240 --> 00:04:16.950
Well,

00:04:16.950 --> 00:04:18.980
you guys can see there is a bit of a problem.

00:04:18.980 --> 00:04:21.210
It looks like there's something wrong with the profits column.

00:04:21.210 --> 00:04:24.490
We would expect it to be a float 64 like the Reverend column,

00:04:24.490 --> 00:04:25.350
since it's a number.

00:04:25.350 --> 00:04:29.120
So this indicates that it probably contains some non integer values.

00:04:29.120 --> 00:04:35.950
So let's take a closer look at that to see what the issue is and the reason I've sort of

00:04:35.950 --> 00:04:37.790
shoulders to you on purpose.

00:04:37.790 --> 00:04:40.890
And just so you guys know or can know what to do.

00:04:40.890 --> 00:04:44.610
Want issues such as these arise when you're working with your own data set?

00:04:44.610 --> 00:04:47.650
So it looks like some of the values,

00:04:47.650 --> 00:04:48.240
our strengths,

00:04:48.240 --> 00:04:51.120
which have been used to indicate missing data.

00:04:51.120 --> 00:04:55.990
So let's see if there's any other values that have crept in well,

00:04:55.990 --> 00:04:57.840
that makes it a little bit easy to interpret,

00:04:57.840 --> 00:04:59.730
and so let's see what we should do.

00:04:59.730 --> 00:05:02.810
That also depends on how many values air missing.

00:05:02.810 --> 00:05:03.080
For less,

00:05:03.080 --> 00:05:08.650
check to see how Maney values there are that are missing out off the 55,000 odd those that

00:05:08.650 --> 00:05:09.950
we have for this data.

00:05:09.950 --> 00:05:11.080
So as you can see,

00:05:11.080 --> 00:05:13.430
there's 369 values that are missing.

00:05:13.430 --> 00:05:13.830
Well,

00:05:13.830 --> 00:05:16.400
that's a small fraction off our data said so no,

00:05:16.400 --> 00:05:20.700
not completely inconsequential as it's still around 1.5%.

00:05:20.700 --> 00:05:25.280
So if the rows containing and they are roughly uniformly distributed over the years,

00:05:25.280 --> 00:05:28.510
the easiest solution would be to remove them so less is,

00:05:28.510 --> 00:05:32.570
go ahead and take a quick look at the distribution to see where it is.

00:05:32.570 --> 00:05:40.770
So as we can see that the most of the invalid values are in a single year is fewer than 25

00:05:40.770 --> 00:05:43.550
there are 500 data points per year.

00:05:43.550 --> 00:05:48.590
So removing those values with Akon for less than 4% of the data off for the worst years.

00:05:48.590 --> 00:05:54.130
So other than the third round the nineties most most years have fewer than half the missing

00:05:54.130 --> 00:05:55.170
values of the peak.

00:05:55.170 --> 00:05:57.670
So for our purposes and for the purposes of the demo,

00:05:57.670 --> 00:05:59.850
let's say that this is acceptable and go ahead.

00:05:59.850 --> 00:06:01.900
And so after that lesson,

00:06:01.900 --> 00:06:03.500
see if that works,

00:06:03.500 --> 00:06:10.090
we're gonna do a land deaf to see if it worked and then do the DF types to see I'm under

00:06:10.090 --> 00:06:15.550
the D of types to see if that profit has actually changed back to a full 64 as it should be

00:06:15.550 --> 00:06:15.550
.

00:06:15.550 --> 00:06:18.030
So great Small.

00:06:18.030 --> 00:06:20.920
Our data set set up its finish Your notebook as a report,

00:06:20.920 --> 00:06:25.550
you could get rid of it if you can get rid of investor gory cells as we created,

00:06:25.550 --> 00:06:30.220
which are included here as a demonstration of the flow of working with notebooks and merge

00:06:30.220 --> 00:06:34.780
relevant cells to create a single A data set up sell.

00:06:34.780 --> 00:06:35.300
Now,

00:06:35.300 --> 00:06:38.690
this would mean that if we ever mess up our data set elsewhere,

00:06:38.690 --> 00:06:41.400
we could just rerun the set up sell to restore it.

