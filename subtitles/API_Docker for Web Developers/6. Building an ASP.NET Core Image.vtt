WEBVTT
1
00:00:00.940 --> 00:00:04.210
Now that we have some Docker files available for ASP.NET Core,

2
00:00:04.210 --> 00:00:06.300
let's take a look at how we could build those.

3
00:00:06.300 --> 00:00:08.620
The normal command you're going to use to convert a

4
00:00:08.620 --> 00:00:11.460
Docker file into a image is Docker build.

5
00:00:11.460 --> 00:00:14.420
Now what you're going to do, though, is tag it,

6
00:00:14.420 --> 00:00:17.450
and the tag is going to contain a couple things normally.

7
00:00:17.450 --> 00:00:18.240
Number one,

8
00:00:18.240 --> 00:00:22.840
if you're going to publish this up to a registry such as Docker Hub or

9
00:00:22.840 --> 00:00:25.380
Azure Container Registry or something like that,

10
00:00:25.380 --> 00:00:27.400
you're going to have a username, typically. It could be

11
00:00:27.400 --> 00:00:30.520
your team's name, maybe it's you, for instance,

12
00:00:30.520 --> 00:00:34.890
on Docker Hub. I use danwahlin, that's my username, and that's going to be the

13
00:00:34.890 --> 00:00:39.200
first part. Now that is technically optional if you're just working locally,

14
00:00:39.200 --> 00:00:42.270
but as you start to work with registries out there,

15
00:00:42.270 --> 00:00:43.940
you'll want a username.

16
00:00:43.940 --> 00:00:47.750
Then we can put a slash, and then we can put the name of the

17
00:00:47.750 --> 00:00:50.220
actual image, and then we can even put a version, and I'll

18
00:00:50.220 --> 00:00:52.140
show you some of that coming up.

19
00:00:52.140 --> 00:00:58.710
So this tag that you see here, this ‑t, that's shortcut for ‑‑tag. Then

20
00:00:58.710 --> 00:01:02.770
you have the tag name, and then you have to tell it where is the actual

21
00:01:02.770 --> 00:01:06.980
Dockerfile you're going to be building from. You might have to use a ‑f

22
00:01:06.980 --> 00:01:11.240
switch; ‑f would be the file name, and give it a path, but if it's just

23
00:01:11.240 --> 00:01:15.290
called Dockerfile, you could just put the dot that you have right here.

24
00:01:15.290 --> 00:01:19.440
But if it's not, then you have to give it, where is the Dockerfile?

25
00:01:19.440 --> 00:01:22.840
What's the path to it, if it's named differently?

26
00:01:22.840 --> 00:01:26.940
So that's what we can do to actually build an image; it's very, very simple.

27
00:01:26.940 --> 00:01:29.040
So let's take a look at that.

28
00:01:29.040 --> 00:01:30.210
So coming back in,

29
00:01:30.210 --> 00:01:33.760
we have our dev version where we can hook this up to the

30
00:01:33.760 --> 00:01:35.940
local source code through a volume,

31
00:01:35.940 --> 00:01:40.080
and this has everything I kind of need to run the SDK in a container.

32
00:01:40.080 --> 00:01:44.110
We saw something like this earlier. So I could come in and do this.

33
00:01:44.110 --> 00:01:46.740
We could copy that.

34
00:01:46.740 --> 00:01:52.140
Let's go ahead and open a terminal. Now we could copy that in and run it,

35
00:01:52.140 --> 00:01:56.340
but that's going to run the Dockerfile, because we didn't give it another name.

36
00:01:56.340 --> 00:01:58.500
Now, before I do all this,

37
00:01:58.500 --> 00:02:01.630
let me go ahead and let's just get rid of this for now, and

38
00:02:01.630 --> 00:02:07.940
let's do docker build help, ‑‑help here.

39
00:02:07.940 --> 00:02:09.400
Alright, now if we scroll on up,

40
00:02:09.400 --> 00:02:13.290
you're going to notice that we can use a ‑f. We can give it the name of the

41
00:02:13.290 --> 00:02:18.140
Docker file, because the default path is Docker file.

42
00:02:18.140 --> 00:02:19.880
So we'll paste that back in,

43
00:02:19.880 --> 00:02:22.070
and we'll come on in, and we'll add a ‑f, and we'll

44
00:02:22.070 --> 00:02:24.040
update the image name as well.

45
00:02:24.040 --> 00:02:27.320
But we'll give this dev.docker file, or whatever your file

46
00:02:27.320 --> 00:02:31.840
name is, and let's put an image name in.

47
00:02:31.840 --> 00:02:36.340
And I'm just going to call this aspnetcore‑dev.

48
00:02:36.340 --> 00:02:36.650
Now,

49
00:02:36.650 --> 00:02:39.100
I don't have a username in that case, notice,

50
00:02:39.100 --> 00:02:40.650
because I'm not going to publish this.

51
00:02:40.650 --> 00:02:46.740
But if I was, like to Docker Hub, it would be danwahlin/ like that, and

52
00:02:46.740 --> 00:02:49.000
that way it would be whatever your username is. Now,

53
00:02:49.000 --> 00:02:51.710
I can also tag it with a version.

54
00:02:51.710 --> 00:02:56.040
We can say this is version 1.0 or 2.0 or whatever it is.

55
00:02:56.040 --> 00:02:57.160
If you don't tag it,

56
00:02:57.160 --> 00:03:01.050
it becomes what's called latest. Latest is it doesn't really have a

57
00:03:01.050 --> 00:03:03.910
version per se, it's just when somebody pulls it,

58
00:03:03.910 --> 00:03:06.740
they get whatever the latest version is. That can actually

59
00:03:06.740 --> 00:03:08.800
be a little bit dangerous, so I would recommend that you

60
00:03:08.800 --> 00:03:13.340
do tag them with versions, but we'll keep it pretty simple here.

61
00:03:13.340 --> 00:03:16.550
Alright, so I'll hit Enter and there we go.

62
00:03:16.550 --> 00:03:18.140
It just did the build.

63
00:03:18.140 --> 00:03:21.930
Let's clear. Let's go to docker images. And there we go.

64
00:03:21.930 --> 00:03:26.290
There's our aspnetcore‑dev latest, it looks like it's

65
00:03:26.290 --> 00:03:30.060
about 705MB, because it's the SDK,

66
00:03:30.060 --> 00:03:33.490
so it's going to be a little bit bigger. Now another way we

67
00:03:33.490 --> 00:03:37.880
could have done this is instead of first off, looking there for

68
00:03:37.880 --> 00:03:41.840
the images, if we come on in here, we could also find it.

69
00:03:41.840 --> 00:03:47.620
There's aspnetcore‑dev, latest. So aspnetcore‑dev, let's remember. Now.

70
00:03:47.620 --> 00:03:50.780
I could have done this, though, and I showed you a little bit of this earlier.

71
00:03:50.780 --> 00:03:56.150
We could actually right‑click and build, and then give it a name,

72
00:03:56.150 --> 00:04:01.900
aspnetcore‑dev, and then I could give it a version if I wanted, but let's

73
00:04:01.900 --> 00:04:05.830
just hit that. Now this will do the same exact thing,

74
00:04:05.830 --> 00:04:11.240
but notice if I scroll back up, it actually wrote out the Docker build.

75
00:04:11.240 --> 00:04:12.270
It did some other things,

76
00:04:12.270 --> 00:04:16.050
but the big one is it did ‑f dev.dockerfile, and it tagged

77
00:04:16.050 --> 00:04:18.640
it, and then it gave it the local folder.

78
00:04:18.640 --> 00:04:19.560
So there we go.

79
00:04:19.560 --> 00:04:21.400
It just built it.

80
00:04:21.400 --> 00:04:25.040
Now we could use what's in this file. So we could

81
00:04:25.040 --> 00:04:30.710
come on down, and let's copy this, paste it in,

82
00:04:30.710 --> 00:04:34.480
and then we'll get rid of this, and we'll put the name of our image,

83
00:04:34.480 --> 00:04:37.440
which is aspnetcore‑dev.

84
00:04:37.440 --> 00:04:39.910
Now notice we have the app folder linking back

85
00:04:39.910 --> 00:04:43.140
volume wise to my local code again.

86
00:04:43.140 --> 00:04:47.520
And just as a reminder, what you put there depends on the console you use.

87
00:04:47.520 --> 00:04:52.940
So this will work with Linux or Mac or Bash or SH‑type shells.

88
00:04:52.940 --> 00:04:54.640
But if you're on Windows, it depends.

89
00:04:54.640 --> 00:04:57.740
So I showed that a little bit earlier.

90
00:04:57.740 --> 00:05:03.100
Alright, so let's hit Enter there, and this should now fire up the container.

91
00:05:03.100 --> 00:05:06.790
Now this kind of locked it up, because I didn't do ‑d for

92
00:05:06.790 --> 00:05:10.160
detached, but that's okay. Now if we scroll on up,

93
00:05:10.160 --> 00:05:15.100
it's listening on port 5000. We said to go to 8080 to 5000.

94
00:05:15.100 --> 00:05:17.640
So let's pull up the browser.

95
00:05:17.640 --> 00:05:22.450
Alright, so we'll go to localhost 8080, and there we go.

96
00:05:22.450 --> 00:05:27.300
It's working. Now if that didn't work, remember that I talked about

97
00:05:27.300 --> 00:05:32.320
that through a properties folder and through the launch settings, you

98
00:05:32.320 --> 00:05:34.680
can also control the port that it runs on.

99
00:05:34.680 --> 00:05:36.940
So if that's in your project,

100
00:05:36.940 --> 00:05:42.340
it may be overriding what was actually included here in the Dockerfile.

101
00:05:42.340 --> 00:05:44.340
Last one kind of wins,

102
00:05:44.340 --> 00:05:47.920
so just kind of be careful. If you go to that and it's not working,

103
00:05:47.920 --> 00:05:50.140
it's probably because your port is wrong.

104
00:05:50.140 --> 00:05:53.830
Because maybe you have a properties with the launch settings, and you

105
00:05:53.830 --> 00:05:57.740
need to actually change that port, potentially.

106
00:05:57.740 --> 00:05:58.140
Alright,

107
00:05:58.140 --> 00:06:02.930
now let's do a docker ps ‑a, and you'll notice that we

108
00:06:02.930 --> 00:06:05.360
have a status of up two minutes ago.

109
00:06:05.360 --> 00:06:06.540
It's been up for two minutes.

110
00:06:06.540 --> 00:06:08.440
Let's go ahead and stop this one.

111
00:06:08.440 --> 00:06:14.140
So we'll do docker stop b8, and docker remove b8.

112
00:06:14.140 --> 00:06:19.040
Alright, and then docker ps ‑a. You can see it's all gone.

113
00:06:19.040 --> 00:06:21.940
Alright, now for the production one, to get that one running,

114
00:06:21.940 --> 00:06:25.940
I could use the one they generated. Now I'll give you a little gotcha on this.

115
00:06:25.940 --> 00:06:30.000
They didn't say the actual port for Kestrel to run on.

116
00:06:30.000 --> 00:06:35.090
They did expose port 5000, but if you look in the other prod.dockerfile

117
00:06:35.090 --> 00:06:39.040
I have here, notice I have an environment variable.

118
00:06:39.040 --> 00:06:40.830
Alright, if you don't put that,

119
00:06:40.830 --> 00:06:44.490
then it just is going to default, and the default is 80, and that's fine.

120
00:06:44.490 --> 00:06:46.240
You could leave 80 if you'd like,

121
00:06:46.240 --> 00:06:49.160
but I just want to point out that again, sometimes you'll bring

122
00:06:49.160 --> 00:06:52.400
these up, and you'll just get not found, and you sit there and

123
00:06:52.400 --> 00:06:54.440
struggle going, why isn't this working?

124
00:06:54.440 --> 00:06:57.430
Probably a port issue. So you'll have to kind of figure out if

125
00:06:57.430 --> 00:07:01.740
you're using the right port. Now for this one, I'm going to go

126
00:07:01.740 --> 00:07:04.000
ahead and use the Dockerfile they generated,

127
00:07:04.000 --> 00:07:06.240
but I could do this one as well.

128
00:07:06.240 --> 00:07:09.930
So if I right‑click on this, notice I could build it again.

129
00:07:09.930 --> 00:07:12.420
So let's go ahead and do that. Now, for this one,

130
00:07:12.420 --> 00:07:18.740
it's actually going to name it, kind of based on what the project is.

131
00:07:18.740 --> 00:07:19.120
Alright,

132
00:07:19.120 --> 00:07:23.230
so notice it's aspnetcoredocker31, because that's

133
00:07:23.230 --> 00:07:25.240
what the project name up here was.

134
00:07:25.240 --> 00:07:26.120
And that's fine.

135
00:07:26.120 --> 00:07:31.170
We'll go ahead and leave that. now if I come into the Docker icon, and

136
00:07:31.170 --> 00:07:34.970
let's refresh this. There we go, there's our image, latest. Now I can

137
00:07:34.970 --> 00:07:39.640
right‑click on that, and I can actually run from here.

138
00:07:39.640 --> 00:07:44.730
Now when I do run, notice it's going to start it up, and you'll see that it

139
00:07:44.730 --> 00:07:49.940
did this 5000 to 5000, and it looks like it started up.

140
00:07:49.940 --> 00:07:54.540
So let's go ahead and do docker ps ‑a, and it's been up for 11

141
00:07:54.540 --> 00:07:58.940
seconds, but it did 5000, you'll notice.

142
00:07:58.940 --> 00:08:03.310
Okay, and then because we exposed 5000, it did 5000 there as well.

143
00:08:03.310 --> 00:08:05.240
So let's go back to the browser.

144
00:08:05.240 --> 00:08:11.640
So let's come on into :5000 here, and notice it didn't work.

145
00:08:11.640 --> 00:08:17.140
Kestrel never ran on 5000; it actually ran on port 80.

146
00:08:17.140 --> 00:08:20.240
So let's go back to VS Code and see if we can fix this.

147
00:08:20.240 --> 00:08:21.780
Alright, so I'm going to go ahead and stop it.

148
00:08:21.780 --> 00:08:28.140
We'll say, docker stop f0. And then if I hit the up arrow here,

149
00:08:28.140 --> 00:08:31.960
there's the docker run that it did, but the 5000 on the left

150
00:08:31.960 --> 00:08:35.160
is fine, because maybe that's what we want.

151
00:08:35.160 --> 00:08:36.510
We did 8080 before,

152
00:08:36.510 --> 00:08:40.140
but doesn't really matter, but the problem is this 5000 right here.

153
00:08:40.140 --> 00:08:45.160
We never told Kestrel to run on 5000. We don't have a launch settings.

154
00:08:45.160 --> 00:08:47.310
We didn't put the environment variable that I showed

155
00:08:47.310 --> 00:08:50.940
earlier. So it's kind of defaulting to 80.

156
00:08:50.940 --> 00:08:54.930
Let's go ahead and try this again now. Alright, so it's up and running.

157
00:08:54.930 --> 00:08:58.040
You can notice right here that it shows us it's running.

158
00:08:58.040 --> 00:09:02.090
And from here we can even do things. I can right‑click and view logs.

159
00:09:02.090 --> 00:09:07.520
Let's go ahead and do that real quick. And notice it's on port 80

160
00:09:07.520 --> 00:09:11.600
inside. And again, this is one of the big challenges you'll run into is

161
00:09:11.600 --> 00:09:13.640
sometimes it doesn't work because of the ports.

162
00:09:13.640 --> 00:09:16.340
So let's go back to the browser to wrap up.

163
00:09:16.340 --> 00:09:21.340
We'll go to 5000, which now forwards to 80, and now it works.

164
00:09:21.340 --> 00:09:24.380
So kind of be careful if you use the Docker extension.

165
00:09:24.380 --> 00:09:30.220
Sometimes it will assume the port internally is 5000 in this case,

166
00:09:30.220 --> 00:09:33.160
but it was actually 80. So you might have to tweak

167
00:09:33.160 --> 00:09:36.240
that a little bit in some cases.

168
00:09:36.240 --> 00:09:39.870
So that's an example of different ways we can build images.

169
00:09:39.870 --> 00:09:44.580
We did a dev image with a volume, and then we did a production image,

170
00:09:44.580 --> 00:09:49.000
and I showed how you can do it through the command line or using the Docker extension.

