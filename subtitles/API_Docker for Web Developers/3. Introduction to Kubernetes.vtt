WEBVTT
1
00:00:00.940 --> 00:00:03.140
So what is Kubernetes?

2
00:00:03.140 --> 00:00:06.050
Well, that's actually a very large question to answer,

3
00:00:06.050 --> 00:00:10.900
and that's why there's multiple courses on Pluralsight about Kubernetes.

4
00:00:10.900 --> 00:00:15.400
The goal of this section is to gently introduce you to the basics of

5
00:00:15.400 --> 00:00:18.710
Kubernetes and some of the key features that it offers.

6
00:00:18.710 --> 00:00:20.720
And then through the rest of this module,

7
00:00:20.720 --> 00:00:26.840
I'll walk through how we can move from Docker Compose into Kubernetes.

8
00:00:26.840 --> 00:00:31.840
So if you go to kubernetes.io, you'll see this on the website.

9
00:00:31.840 --> 00:00:35.140
"Kubernetes is an open‑source system for automating deployment,

10
00:00:35.140 --> 00:00:40.870
scaling, and management of containerized applications." Now the way I

11
00:00:40.870 --> 00:00:44.540
like to think of it is from the perspective of teams.

12
00:00:44.540 --> 00:00:45.700
If you're into sports,

13
00:00:45.700 --> 00:00:49.440
then you could think of each player on the team as a container,

14
00:00:49.440 --> 00:00:53.840
and Kubernetes would then be the coach of the container team.

15
00:00:53.840 --> 00:00:57.450
Or if you're not really into that, and let's say you like orchestras,

16
00:00:57.450 --> 00:01:05.240
well, Kubernetes would be the conductor of a container orchestra as you see here.

17
00:01:05.240 --> 00:01:06.980
You may look at that and go, well,

18
00:01:06.980 --> 00:01:10.280
isn't that really what Docker Compose does? And yes,

19
00:01:10.280 --> 00:01:15.120
but you're going to see Kubernetes offers a lot more than just being the

20
00:01:15.120 --> 00:01:20.840
conductor. So here's a quick overview of Kubernetes.

21
00:01:20.840 --> 00:01:25.380
First off, it's designed for container and cluster management.

22
00:01:25.380 --> 00:01:29.140
Now we'll talk more about clusters in just a moment.

23
00:01:29.140 --> 00:01:32.960
It's also supported by all the major cloud platforms out there,

24
00:01:32.960 --> 00:01:35.650
and that's a big deal if you want something that's very

25
00:01:35.650 --> 00:01:40.540
standardized and also very popular to work with.

26
00:01:40.540 --> 00:01:45.830
It provides a declarative way to define a cluster state using YAML files,

27
00:01:45.830 --> 00:01:47.170
manifest files they call them.

28
00:01:47.170 --> 00:01:52.540
So it's very similar to Docker Compose in that regard.

29
00:01:52.540 --> 00:01:53.170
And then, finally,

30
00:01:53.170 --> 00:01:56.420
it provides a command line tool that you can use to interact

31
00:01:56.420 --> 00:02:00.280
with the Kubernetes API called kube c‑t‑l,

32
00:02:00.280 --> 00:02:03.480
kube cuddle, however you'd like to say it.

33
00:02:03.480 --> 00:02:06.040
I've always learned it as kube cuddle,

34
00:02:06.040 --> 00:02:09.100
but if you prefer kube c‑t‑l that works as well,

35
00:02:09.100 --> 00:02:12.440
and we'll be talking about this command as we move forward.

36
00:02:12.440 --> 00:02:12.650
Now,

37
00:02:12.650 --> 00:02:16.460
some of the key features then of Kubernetes that really set it apart from

38
00:02:16.460 --> 00:02:20.140
something like Docker Compose would be the following.

39
00:02:20.140 --> 00:02:24.250
First off, it has load balancing and discovery of different services.

40
00:02:24.250 --> 00:02:28.030
And we'll be talking about what a service is a little bit later.

41
00:02:28.030 --> 00:02:31.240
It can orchestrate your storage,

42
00:02:31.240 --> 00:02:37.640
handle automatic rollouts and rollbacks, and manage different workloads.

43
00:02:37.640 --> 00:02:41.720
Really, in a nutshell, what it does is you give it a final

44
00:02:41.720 --> 00:02:43.820
destination that you'd like to get to,

45
00:02:43.820 --> 00:02:46.960
and it's kind of like the mapping software that shows you how to

46
00:02:46.960 --> 00:02:50.440
actually reach that destination you'll see.

47
00:02:50.440 --> 00:02:51.600
Now it has a few other things,

48
00:02:51.600 --> 00:02:55.890
like self‑healing of containers. It can manage secrets and

49
00:02:55.890 --> 00:02:59.570
other configuration data. Horizontal scaling.

50
00:02:59.570 --> 00:03:03.220
And this is not just of containers, but you can also have multiple nodes,

51
00:03:03.220 --> 00:03:07.930
they call them, which is your virtual machines. And then we could go even deeper.

52
00:03:07.930 --> 00:03:12.740
It has a lot of other features with networking and more.

53
00:03:12.740 --> 00:03:18.140
So from a high level or big picture view, this is what Kubernetes looks like.

54
00:03:18.140 --> 00:03:20.850
It's going to have a master node,

55
00:03:20.850 --> 00:03:25.310
and the master is in charge of keeping all the children in line,

56
00:03:25.310 --> 00:03:29.120
if you will, and we call these the worker nodes.

57
00:03:29.120 --> 00:03:34.840
Now, the worker nodes would have something called Pods inside of them.

58
00:03:34.840 --> 00:03:41.040
Now a node is like a VM, and a Pod is a container for containers.

59
00:03:41.040 --> 00:03:45.220
So think of one of those shipping containers you might see on a boat,

60
00:03:45.220 --> 00:03:47.820
or maybe you've even had one delivered to your house,

61
00:03:47.820 --> 00:03:49.740
and you use it to move.

62
00:03:49.740 --> 00:03:51.740
Well, you can think of that as a Pod,

63
00:03:51.740 --> 00:03:55.440
and then you can put multiple things inside of that Pod,

64
00:03:55.440 --> 00:03:59.940
and multiple Pods could even run on a different node.

65
00:03:59.940 --> 00:04:06.140
Now, with multiple nodes being managed by a master, we call that a cluster.

66
00:04:06.140 --> 00:04:09.470
So we can have a cluster of virtual machines. We can scale out. We can

67
00:04:09.470 --> 00:04:13.380
scale in. We can scale the individual containers out,

68
00:04:13.380 --> 00:04:17.470
the nodes out, and even control that based on different scenarios,

69
00:04:17.470 --> 00:04:20.990
such as, maybe the CPU load is too high; therefore,

70
00:04:20.990 --> 00:04:24.750
we want to automate a new node being created or maybe just

71
00:04:24.750 --> 00:04:28.240
different containers being started or stopped.

72
00:04:28.240 --> 00:04:31.320
So now that you've learned about the fundamentals of Kubernetes,

73
00:04:31.320 --> 00:04:34.540
learned a little bit about the master, the worker nodes,

74
00:04:34.540 --> 00:04:42.000
Pods, and how containers can run in Pods, let's take a look at how we can get Kubernetes running locally on your machine.

