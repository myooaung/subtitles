1
00:00:00,840 --> 00:00:02,610
Now let's take a look at how we can work with

2
00:00:02,610 --> 00:00:06,440
volumes in an ASP.NET Core container.

3
00:00:06,440 --> 00:00:10,860
So I've already created an MVC project using the dotnet new command.

4
00:00:10,860 --> 00:00:13,200
And I'll show you that real quick in case you're new to it.

5
00:00:13,200 --> 00:00:15,790
But this is just and out‑of‑the‑box project.

6
00:00:15,790 --> 00:00:17,320
It's an MVC project,

7
00:00:17,320 --> 00:00:22,340
and what we're going to do is get this running inside of a container.

8
00:00:22,340 --> 00:00:25,890
So the first thing I'm going to do is run off to the command line.

9
00:00:25,890 --> 00:00:29,510
So let's come on back to the command with Open in Terminal.

10
00:00:29,510 --> 00:00:35,450
And then inside of here, what I'd like to do first off is get a container going.

11
00:00:35,450 --> 00:00:38,880
Now before I show you that, if you're new to .NET Core at all,

12
00:00:38,880 --> 00:00:44,110
you'd have to go to dot.net, and then you can download the SDK it's called,

13
00:00:44,110 --> 00:00:46,020
and I have that installed on this machine.

14
00:00:46,020 --> 00:00:50,090
And then I could do this, dotnet new, and then we can give it the project type.

15
00:00:50,090 --> 00:00:51,340
I did MVC.

16
00:00:51,340 --> 00:00:55,340
That actually generated the project that you see right here.

17
00:00:55,340 --> 00:00:58,150
What we're going to do, though, is we're going to get this code running,

18
00:00:58,150 --> 00:00:59,440
but not locally.

19
00:00:59,440 --> 00:01:02,900
We're going to get it running in a container running on my machine.

20
00:01:02,900 --> 00:01:05,240
And it's going to be a Linux container.

21
00:01:05,240 --> 00:01:06,380
So to do that,

22
00:01:06,380 --> 00:01:10,740
the first thing we need is the actual image that we want to work with.

23
00:01:10,740 --> 00:01:11,550
And in this case,

24
00:01:11,550 --> 00:01:15,250
Microsoft publishes an image that we can actually use

25
00:01:15,250 --> 00:01:17,540
to work with this type of thing.

26
00:01:17,540 --> 00:01:20,060
So I'm going to go ahead and pull this image onto my machine.

27
00:01:20,060 --> 00:01:22,680
I actually already have it, but I'll show you the command.

28
00:01:22,680 --> 00:01:26,400
So we could say docker pull, and instead of going to Docker Hub,

29
00:01:26,400 --> 00:01:29,130
we're going to go to the Microsoft Container Registry,

30
00:01:29,130 --> 00:01:30,490
mcr.microsoft.com.

31
00:01:30,490 --> 00:01:34,240
So that's the domain of the registry.

32
00:01:34,240 --> 00:01:37,830
Now we're going to give it a path to what we want from an image standpoint,

33
00:01:37,830 --> 00:01:42,240
and we want the dotnet/core/sdk image.

34
00:01:42,240 --> 00:01:45,140
And if I hit Enter, this will now pull it down.

35
00:01:45,140 --> 00:01:47,820
Now the first time it pulls, you'll get the different layers.

36
00:01:47,820 --> 00:01:49,740
It will probably take you a minute or two to get

37
00:01:49,740 --> 00:01:51,540
those depending on your bandwidth.

38
00:01:51,540 --> 00:01:56,440
And we've already seen how it pulls layers and kind of shows you that output.

39
00:01:56,440 --> 00:02:00,130
So now that we have the image, the next thing I want to do is I want to run this,

40
00:02:00,130 --> 00:02:04,240
but I want to link it through a volume back to this source code here.

41
00:02:04,240 --> 00:02:06,410
So what we're going to do is kind of an interesting

42
00:02:06,410 --> 00:02:08,110
take on running the container,

43
00:02:08,110 --> 00:02:12,940
link it back to this source code on the left here that's on my local machine.

44
00:02:12,940 --> 00:02:15,570
But then I'm going to interact with the running container

45
00:02:15,570 --> 00:02:17,150
right through this command prompt here.

46
00:02:17,150 --> 00:02:21,140
And the way we're going to do that is with a ‑it command.

47
00:02:21,140 --> 00:02:24,210
This is an interactive, and it stands for TTY,

48
00:02:24,210 --> 00:02:28,810
kind of an older term, but, in essence, it's going to allow my terminal window,

49
00:02:28,810 --> 00:02:32,640
my terminal shell, to link into the container.

50
00:02:32,640 --> 00:02:34,640
And I'll show you that in just a moment.

51
00:02:34,640 --> 00:02:37,380
Now the next thing I'm going to do is we're going to say the volume

52
00:02:37,380 --> 00:02:39,980
that we want is to our current working directory,

53
00:02:39,980 --> 00:02:42,640
print working directory (pwd).

54
00:02:42,640 --> 00:02:45,210
Now the next thing I'm going to do is put the name of the folder.

55
00:02:45,210 --> 00:02:46,560
I'm going to call it /app.

56
00:02:46,560 --> 00:02:47,680
But I could call this anything.

57
00:02:47,680 --> 00:02:50,970
It could be foo, foe, fum, whatever your folder is.

58
00:02:50,970 --> 00:02:52,600
But we'll just do app in this case.

59
00:02:52,600 --> 00:02:54,840
And then I'm going to make that the working directory,

60
00:02:54,840 --> 00:02:57,890
the startup directory, so that when the container starts up,

61
00:02:57,890 --> 00:03:00,340
it jumps right to the app folder.

62
00:03:00,340 --> 00:03:03,840
Then we're going to say the name of the image,

63
00:03:03,840 --> 00:03:06,500
and we, again, do dotnet/core/sdk.

64
00:03:06,500 --> 00:03:07,870
But then I'm going to say, Hey,

65
00:03:07,870 --> 00:03:13,040
I'm going to shell into a bash shell in this container.

66
00:03:13,040 --> 00:03:15,570
Now one thing I want to point out really quick here

67
00:03:15,570 --> 00:03:17,960
is what port should we run on?

68
00:03:17,960 --> 00:03:20,040
Okay, we haven't defined that yet.

69
00:03:20,040 --> 00:03:22,130
And also that pwd syntax.

70
00:03:22,130 --> 00:03:25,740
So let's briefly talk about that really quickly before we move on.

71
00:03:25,740 --> 00:03:30,040
So I kind of purposely left out the port because we do need that.

72
00:03:30,040 --> 00:03:31,470
We can put it anywhere in here.

73
00:03:31,470 --> 00:03:33,510
I'll put it right after this, let's say.

74
00:03:33,510 --> 00:03:36,140
And what do we want to run this on?

75
00:03:36,140 --> 00:03:38,610
Well, let's say externally that we're good with 8080,

76
00:03:38,610 --> 00:03:40,940
but what's the internal port?

77
00:03:40,940 --> 00:03:43,550
Well, it depends on your project actually.

78
00:03:43,550 --> 00:03:48,240
We have a launchSettings.json file that they included by default,

79
00:03:48,240 --> 00:03:51,630
and this will become the two ports that we look for.

80
00:03:51,630 --> 00:03:55,630
Now we're not going to have a Development certificate, though, available.

81
00:03:55,630 --> 00:03:58,840
We could do that but not in this particular demo.

82
00:03:58,840 --> 00:04:02,140
So I'm going to take out the HTTPS one,

83
00:04:02,140 --> 00:04:05,090
and then I don't necessarily just want localhost to work.

84
00:04:05,090 --> 00:04:08,540
I want any IP address, so we're going to put a + right there.

85
00:04:08,540 --> 00:04:12,120
Now there are many ways you can override the default port where your code

86
00:04:12,120 --> 00:04:15,300
runs in the container or even on your local machine.

87
00:04:15,300 --> 00:04:19,360
You could update this launchSettings, you could set environment variables,

88
00:04:19,360 --> 00:04:20,880
or you could even go to the Program.cs,

89
00:04:20,880 --> 00:04:23,340
and there's some syntax you could use there.

90
00:04:23,340 --> 00:04:26,540
But this is kind of the easier way based on what they give us.

91
00:04:26,540 --> 00:04:31,150
Okay, so now that we know that, we can do 5000 right there.

92
00:04:31,150 --> 00:04:33,040
Okay, so that looks good.

93
00:04:33,040 --> 00:04:35,270
Now what about this syntax right here though?

94
00:04:35,270 --> 00:04:39,150
Well, this is only going to work on Mac or Linux.

95
00:04:39,150 --> 00:04:41,840
Okay, so let me show you just real quick.

96
00:04:41,840 --> 00:04:46,440
If you had PowerShell, then it would look like this.

97
00:04:46,440 --> 00:04:47,690
And that'd be kind of PowerShell.

98
00:04:47,690 --> 00:04:54,360
If you are on, let's say, just regular DOS, then you could do this, %cd.

99
00:04:54,360 --> 00:04:59,480
So the syntax that you put right here really depends on what

100
00:04:59,480 --> 00:05:02,740
command shell or command window you're using.

101
00:05:02,740 --> 00:05:07,700
Because I'm on Mac in this demo, I'm going to put the Mac or Linux‑type syntax.

102
00:05:07,700 --> 00:05:09,440
They're both the same in this case.

103
00:05:09,440 --> 00:05:12,850
But be aware that you need to kind of look into that,

104
00:05:12,850 --> 00:05:15,500
and you can see from the link down below here,

105
00:05:15,500 --> 00:05:19,570
there's a blog post you can go to to learn more about that different syntax

106
00:05:19,570 --> 00:05:23,140
across the different operating system command line prompts.

107
00:05:23,140 --> 00:05:27,250
Okay, so now we've done that, we have docker run in interactive mode.

108
00:05:27,250 --> 00:05:29,740
We know the external and internal ports.

109
00:05:29,740 --> 00:05:33,420
We're going to have the volume link from a folder in the container called

110
00:05:33,420 --> 00:05:37,330
app back to the code that is in our working directory.

111
00:05:37,330 --> 00:05:38,280
That's our DEMOS.

112
00:05:38,280 --> 00:05:40,440
You'll see right up top here.

113
00:05:40,440 --> 00:05:43,540
The startup directory's app, that's our working directory.

114
00:05:43,540 --> 00:05:44,760
We have our image,

115
00:05:44,760 --> 00:05:48,310
and then we're going to fire up an interactive, kind of bash terminal modes.

116
00:05:48,310 --> 00:05:50,800
So let's hit Enter. And there we go.

117
00:05:50,800 --> 00:05:53,740
So now we are in the container actually,

118
00:05:53,740 --> 00:05:56,810
and I can actually do things like ls, and you see how it

119
00:05:56,810 --> 00:05:59,840
linked back to my local source code.

120
00:05:59,840 --> 00:06:02,260
This code was never in Microsoft's image.

121
00:06:02,260 --> 00:06:05,340
How would they know to obviously put this code? They wouldn't.

122
00:06:05,340 --> 00:06:08,630
So, instead, that volume linked the app folder,

123
00:06:08,630 --> 00:06:11,800
which is our working directory, back to this local source code.

124
00:06:11,800 --> 00:06:15,640
So just think of it as you have a container kind of like in a bubble.

125
00:06:15,640 --> 00:06:18,040
Somebody poked a hole in the bubble and put a hose in there,

126
00:06:18,040 --> 00:06:21,340
and that hose kind of flows back to the directory on your machine.

127
00:06:21,340 --> 00:06:23,740
Now we can kind of talk between the two.

128
00:06:23,740 --> 00:06:28,550
So now I can do dotnet run, dotnet build. In fact, let's just do a build

129
00:06:28,550 --> 00:06:32,540
real quick. Dotnet restore, all those type of commands.

130
00:06:32,540 --> 00:06:33,840
There we do.

131
00:06:33,840 --> 00:06:37,400
I could do dotnet run, or I can even do dotnet watch run.

132
00:06:37,400 --> 00:06:40,260
Let's do a watch run if you're not familiar with that. That

133
00:06:40,260 --> 00:06:42,870
will make it so if any files change over here,

134
00:06:42,870 --> 00:06:47,140
it will automatically restart the server that's running in the container.

135
00:06:47,140 --> 00:06:50,040
Super cool! So let's hit Enter.

136
00:06:50,040 --> 00:06:52,840
All right, we'll let this fire up, and then we'll run off to the browser.

137
00:06:52,840 --> 00:06:57,240
So notice it's listening on any IP 5000.

138
00:06:57,240 --> 00:07:01,940
Okay, and then we just saw we did 8080 to 5000, so we're good there.

139
00:07:01,940 --> 00:07:04,640
So let's go ahead and go to the browser.

140
00:07:04,640 --> 00:07:10,740
Okay, so let me go from localhost to localhost 8080, and notice it works.

141
00:07:10,740 --> 00:07:12,650
This is now running the server,

142
00:07:12,650 --> 00:07:17,950
though, in the container even though our source code is local. Now here's

143
00:07:17,950 --> 00:07:22,740
what's kind of cool about that. Let me go back to VS Code.

144
00:07:22,740 --> 00:07:27,850
Let's go to our index, our home. Instead of just Welcome, let's say

145
00:07:27,850 --> 00:07:32,750
Welcome to Docker Volumes or something like that. And let's save. Now

146
00:07:32,750 --> 00:07:36,360
watch down below. See how File changed, Index.cshtml.

147
00:07:36,360 --> 00:07:38,420
Now it's doing the rebuild, and it restarted the

148
00:07:38,420 --> 00:07:40,740
Kestrel server in the container.

149
00:07:40,740 --> 00:07:41,780
Pretty cool.

150
00:07:41,780 --> 00:07:46,740
So let's go back to the browser. And there we go, Welcome to Docker Volumes.

151
00:07:46,740 --> 00:07:48,770
Now, are you going to develop this way?

152
00:07:48,770 --> 00:07:53,250
Probably not because, normally, if you already have the .NET tools local,

153
00:07:53,250 --> 00:07:55,640
you'll just run dotnet run local.

154
00:07:55,640 --> 00:07:59,800
But what this shows is how you literally could link this

155
00:07:59,800 --> 00:08:04,040
container or any container to local code.

156
00:08:04,040 --> 00:08:07,840
And if you didn't want to install something for whatever reason,

157
00:08:07,840 --> 00:08:09,640
you literally wouldn't have to.

158
00:08:09,640 --> 00:08:12,090
You could run the container that has your framework,

159
00:08:12,090 --> 00:08:17,940
your server, whatever it is, and just have it link back just like we did here.

160
00:08:17,940 --> 00:08:19,900
Now coming on back, let's clear.

161
00:08:19,900 --> 00:08:24,040
We'll exit. Let's do docker ps ‑a, and there we go.

162
00:08:24,040 --> 00:08:28,430
We have an exited container, you'll notice, f5b, so let's do docker

163
00:08:28,430 --> 00:08:33,290
rm f5b. Now I could do this to remove volumes,

164
00:08:33,290 --> 00:08:38,400
but because we created the volume, it wasn't a Docker kind of allocated volume.

165
00:08:38,400 --> 00:08:39,100
We did it.

166
00:08:39,100 --> 00:08:41,600
We said pwd, for example.

167
00:08:41,600 --> 00:08:45,840
Then this ‑v won't have any effect because we created the volume, not Docker.

168
00:08:45,840 --> 00:08:48,810
I'll talk about this a little bit later as well. But in this case,

169
00:08:48,810 --> 00:08:50,840
I'll just do f5b.

170
00:08:50,840 --> 00:08:51,740
There we go.

171
00:08:51,740 --> 00:08:55,540
Let's run docker ps ‑a again, and it's gone.

172
00:08:55,540 --> 00:08:58,590
And so imagine that I didn't actually create this code.

173
00:08:58,590 --> 00:09:00,430
I checked it out from somewhere,

174
00:09:00,430 --> 00:09:03,540
but I don't have the SDK installed on my machine.

175
00:09:03,540 --> 00:09:06,630
I could just get this image going and literally do live

176
00:09:06,630 --> 00:09:09,020
development against it without ever installing it.

177
00:09:09,020 --> 00:09:09,520
Now, again,

178
00:09:09,520 --> 00:09:12,880
that's not what I'd do in the real world because I already have

179
00:09:12,880 --> 00:09:15,640
.NET and the tools installed on my machine.

180
00:09:15,640 --> 00:09:17,970
But there are a lot of powerful techniques here that

181
00:09:17,970 --> 00:09:20,240
you can use in various scenarios.

182
00:09:20,240 --> 00:09:20,850
Keep in mind,

183
00:09:20,850 --> 00:09:27,000
volumes could also be just to store log files the server writes out. There are all kinds of reasons you might use volumes.

