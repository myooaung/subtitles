WEBVTT
1
00:00:03.140 --> 00:00:06.310
You've seen how we can link up containers using the name of a

2
00:00:06.310 --> 00:00:09.560
container and how that allows us to communicate between,

3
00:00:09.560 --> 00:00:12.630
for instance, a web server and a database server.

4
00:00:12.630 --> 00:00:15.910
But Docker does provide a different technique that can be used

5
00:00:15.910 --> 00:00:18.870
that also provides additional functionality, and that's what

6
00:00:18.870 --> 00:00:20.740
we're going to talk about here.

7
00:00:20.740 --> 00:00:22.600
So what we're going to cover is something called

8
00:00:22.600 --> 00:00:26.440
container networks or bridge networks.

9
00:00:26.440 --> 00:00:29.210
Now to understand this, think of a Docker host.

10
00:00:29.210 --> 00:00:31.400
Now, this could be a Linux box up in the cloud,

11
00:00:31.400 --> 00:00:35.940
it could be VirtualBox running locally with that Linux box in it,

12
00:00:35.940 --> 00:00:37.740
wherever it may be.

13
00:00:37.740 --> 00:00:41.240
And then in that Linux box, you have these different

14
00:00:41.240 --> 00:00:43.740
containers that need to talk with each other.

15
00:00:43.740 --> 00:00:46.220
And so to do that, we could use naming,

16
00:00:46.220 --> 00:00:49.660
but anything that knows the name could automatically

17
00:00:49.660 --> 00:00:52.340
get to that container by the name.

18
00:00:52.340 --> 00:00:53.600
And while that's a good thing,

19
00:00:53.600 --> 00:00:55.940
especially I think in the development environment, it's very

20
00:00:55.940 --> 00:01:00.940
easy to get started with and to use, once you start having a

21
00:01:00.940 --> 00:01:02.910
whole bunch of containers running,

22
00:01:02.910 --> 00:01:06.640
you might want to start to isolate those containers so

23
00:01:06.640 --> 00:01:09.840
that you have to be in the same group, if you will.

24
00:01:09.840 --> 00:01:13.180
Well, we don't call it a group, but we do call it a network,

25
00:01:13.180 --> 00:01:18.440
or a bridge network is the official term you'll see in the Docker documentation.

26
00:01:18.440 --> 00:01:22.340
And the way it works is you can, through Docker client,

27
00:01:22.340 --> 00:01:25.310
create an isolated network, and you just give it a name.

28
00:01:25.310 --> 00:01:29.540
It's a very simple command that I'll show you coming up here in a moment.

29
00:01:29.540 --> 00:01:35.000
Any container that's run in that isolated network can communicate

30
00:01:35.000 --> 00:01:38.300
with other containers in that same isolated network,

31
00:01:38.300 --> 00:01:40.200
and they do so by name.

32
00:01:40.200 --> 00:01:43.250
That's why we took a look at the legacy linking type of

33
00:01:43.250 --> 00:01:46.340
container naming and linking earlier.

34
00:01:46.340 --> 00:01:49.670
That means I could have one set up here, maybe this is a

35
00:01:49.670 --> 00:01:53.510
Node.js server talking to MongoDB, whereas I might have a separate,

36
00:01:53.510 --> 00:01:56.980
isolated network with Postgres,

37
00:01:56.980 --> 00:02:02.740
ASP.NET Core, and some other type of infrastructure set up there for containers.

38
00:02:02.740 --> 00:02:06.390
So this is nice because I can actually now group the

39
00:02:06.390 --> 00:02:09.710
containers into their own isolated network,

40
00:02:09.710 --> 00:02:14.360
and that allows me to isolate them much more in who they're allowed to

41
00:02:14.360 --> 00:02:17.590
communicate with as far as their container friends,

42
00:02:17.590 --> 00:02:19.440
if you will.

43
00:02:19.440 --> 00:02:21.890
The steps to follow to create a container network

44
00:02:21.890 --> 00:02:23.170
are actually very straightforward,

45
00:02:23.170 --> 00:02:27.240
and the commands you're going to run with Docker client are also very easy.

46
00:02:27.240 --> 00:02:30.890
So the first thing we'll do is we need to create a custom bridge network,

47
00:02:30.890 --> 00:02:33.640
and we'll give that a name.

48
00:02:33.640 --> 00:02:38.240
Now, once you've set up your custom bridge network and given it a name,

49
00:02:38.240 --> 00:02:42.160
then you can start the containers up using the standard docker run,

50
00:02:42.160 --> 00:02:46.840
but we can specify what isolated network to run in.

51
00:02:46.840 --> 00:02:50.630
Now it is possible for a container to run in more than one network,

52
00:02:50.630 --> 00:02:53.500
and that would allow it to communicate with multiple

53
00:02:53.500 --> 00:02:55.680
containers that might be kind of cross group,

54
00:02:55.680 --> 00:02:58.740
if you will, cross isolated network.

55
00:02:58.740 --> 00:03:01.750
Now we're going to focus just on one isolated network in this

56
00:03:01.750 --> 00:03:04.900
particular example and the examples that follow,

57
00:03:04.900 --> 00:03:08.740
but you can definitely do some more advanced things if you'd like there.

58
00:03:08.740 --> 00:03:11.840
So let's walk through the steps here real quick.

59
00:03:11.840 --> 00:03:15.940
So step one involves creating a custom bridge network.

60
00:03:15.940 --> 00:03:19.640
And the way we do that is we use the Docker client,

61
00:03:19.640 --> 00:03:21.730
and we use the network command.

62
00:03:21.730 --> 00:03:25.440
And we could say, hey Docker, I'd like to create a new network.

63
00:03:25.440 --> 00:03:28.460
I'd like to use the bridge as the driver,

64
00:03:28.460 --> 00:03:30.990
and there's a bunch of different drivers you can do as mentioned,

65
00:03:30.990 --> 00:03:34.840
even cross host is possible, and more.

66
00:03:34.840 --> 00:03:37.270
And then I'm going to name the custom network.

67
00:03:37.270 --> 00:03:40.230
Now, I gave it a real basic name of isolated_network,

68
00:03:40.230 --> 00:03:42.160
but it could literally be whatever you want.

69
00:03:42.160 --> 00:03:47.450
This is just like naming an image or naming a container when you run it,

70
00:03:47.450 --> 00:03:50.340
you can come up with whatever name you want here.

71
00:03:50.340 --> 00:03:51.620
Now, that's it.

72
00:03:51.620 --> 00:03:51.840
Now,

73
00:03:51.840 --> 00:03:54.770
what that will do out of the box is not a whole lot because

74
00:03:54.770 --> 00:03:58.090
it just creates this isolated network, but at this point,

75
00:03:58.090 --> 00:04:00.140
nothing's in it.

76
00:04:00.140 --> 00:04:04.350
So step two involves then running your containers,

77
00:04:04.350 --> 00:04:09.140
but specifying that I'd like to run that container in a specific network,

78
00:04:09.140 --> 00:04:13.090
and notice that I'm now saying I'm going to run it in isolated_network,

79
00:04:13.090 --> 00:04:15.940
which of course is what we just saw that was created.

80
00:04:15.940 --> 00:04:19.160
Now we've said what network we want this container to run in,

81
00:04:19.160 --> 00:04:24.740
but how would another container in the same network call into this container?

82
00:04:24.740 --> 00:04:27.550
And the answer there is we do just like we did earlier with

83
00:04:27.550 --> 00:04:30.280
the legacy linking and we give it a name.

84
00:04:30.280 --> 00:04:34.440
So every container that you want to link up will have a name.

85
00:04:34.440 --> 00:04:38.440
So in this case, I named it just plain old mongodb.

86
00:04:38.440 --> 00:04:43.300
Now, the connection string for a web container that's also in the

87
00:04:43.300 --> 00:04:49.200
isolated_network could then call into MongoDB by using a server name of

88
00:04:49.200 --> 00:04:52.140
mongodb because that's what the container name is.

89
00:04:52.140 --> 00:04:56.920
So I won't have to use the ‑‑link that we saw earlier with the legacy linking,

90
00:04:56.920 --> 00:04:59.840
and you're going to see all this coming up with an example in just a moment,

91
00:04:59.840 --> 00:05:04.840
but all I have to do is just give every container that I want to link to a name.

92
00:05:04.840 --> 00:05:08.250
As long as they're in the same isolated network in this case,

93
00:05:08.250 --> 00:05:11.030
I can now reference that name just like we saw earlier,

94
00:05:11.030 --> 00:05:13.440
and then I'm off and running. I can hit a database,

95
00:05:13.440 --> 00:05:16.540
a caching server, or whatever it may be.

96
00:05:16.540 --> 00:05:19.530
Now it's important to note that the Docker documentation

97
00:05:19.530 --> 00:05:22.510
doesn't actually refer to this technique with the bridge and

98
00:05:22.510 --> 00:05:25.440
the container networking as linking.

99
00:05:25.440 --> 00:05:27.860
That's a term I like to use because it just makes sense.

100
00:05:27.860 --> 00:05:30.390
We want to link one container to another,

101
00:05:30.390 --> 00:05:32.030
but in this world, really,

102
00:05:32.030 --> 00:05:37.240
we would just call it communicate between one container and another container.

103
00:05:37.240 --> 00:05:40.440
Now to wrap this up, I also want to mention that linking,

104
00:05:40.440 --> 00:05:44.450
as far as the legacy linking, is actually not supported in this world.

105
00:05:44.450 --> 00:05:45.850
We don't need it of course.

106
00:05:45.850 --> 00:05:50.040
We have our isolated network and we can just use that directly.

107
00:05:50.040 --> 00:05:53.780
So now that you've seen an example of what this bridge

108
00:05:53.780 --> 00:05:56.830
network or container networking looks like,

109
00:05:56.830 --> 00:06:00.160
let's jump into the samples that we already saw earlier with

110
00:06:00.160 --> 00:06:10.000
Node and Mongo and ASP.NET Core and Postgres. Let's see how we can change those up to use this technique.

