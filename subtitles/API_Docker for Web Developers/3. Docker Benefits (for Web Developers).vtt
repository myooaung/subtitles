WEBVTT
1
00:00:03.140 --> 00:00:06.460
Docker offers several different benefits to us as web developers,

2
00:00:06.460 --> 00:00:07.410
and in this section,

3
00:00:07.410 --> 00:00:09.920
we're going to walk through some of the key benefits

4
00:00:09.920 --> 00:00:13.540
that we can get by leveraging it.

5
00:00:13.540 --> 00:00:17.380
So whether you work on a team of one or many, Docker can help set up a

6
00:00:17.380 --> 00:00:21.750
development environment very quickly, and that's really one of the key aspects

7
00:00:21.750 --> 00:00:24.240
that we're going to focus on throughout this course.

8
00:00:24.240 --> 00:00:26.670
Although that's just a very minor benefit,

9
00:00:26.670 --> 00:00:30.890
it's definitely a big benefit as a web developer. Docker

10
00:00:30.890 --> 00:00:33.270
can also help eliminate app conflicts.

11
00:00:33.270 --> 00:00:37.010
If you have versions of framework saying you can't move to the latest version,

12
00:00:37.010 --> 00:00:40.240
isolated containers can help out there.

13
00:00:40.240 --> 00:00:43.550
It also provides a way to move your code and the entire

14
00:00:43.550 --> 00:00:46.190
environment of the code between your different environments,

15
00:00:46.190 --> 00:00:51.040
so between things like development, staging, and production.

16
00:00:51.040 --> 00:00:52.460
And if we can do all of that,

17
00:00:52.460 --> 00:00:55.960
we can more than likely ship software faster, and that's a good thing,

18
00:00:55.960 --> 00:00:56.380
of course.

19
00:00:56.380 --> 00:01:00.140
So let's dive into each of these four areas really quickly.

20
00:01:00.140 --> 00:01:03.440
So when it comes to accelerating developer onboarding,

21
00:01:03.440 --> 00:01:05.630
oftentimes we have multiple team members,

22
00:01:05.630 --> 00:01:08.510
of course, and we might have some developers,

23
00:01:08.510 --> 00:01:12.230
maybe a mix of designers or people that kind of do both of those things,

24
00:01:12.230 --> 00:01:17.250
and oftentimes we want people working with the actual version of the app

25
00:01:17.250 --> 00:01:20.240
versus just a prototype that's separate.

26
00:01:20.240 --> 00:01:24.160
And so we might have a web server, we might have a database server,

27
00:01:24.160 --> 00:01:27.730
caching server, and those types of things, and setting all

28
00:01:27.730 --> 00:01:30.160
that up on an individual developer machine,

29
00:01:30.160 --> 00:01:34.040
especially for people that work remotely in different scenarios,

30
00:01:34.040 --> 00:01:37.550
can be challenging because you have to get the security right, you have to

31
00:01:37.550 --> 00:01:41.190
get the configuration settings right, make sure the right versions are on

32
00:01:41.190 --> 00:01:45.730
there, and so getting that right and not having surprises after the fact

33
00:01:45.730 --> 00:01:46.980
can be a little bit challenging.

34
00:01:46.980 --> 00:01:52.270
So Docker can help there because we can make one or more images that can then

35
00:01:52.270 --> 00:01:56.610
be converted into running containers, and those containers can run on our

36
00:01:56.610 --> 00:01:59.620
different developer and even designer machines.

37
00:01:59.620 --> 00:02:03.110
You'll see in just a little bit to get this up and running, you can

38
00:02:03.110 --> 00:02:05.600
just run a simple command from the command prompt,

39
00:02:05.600 --> 00:02:09.890
so you really don't even have to be a developer per se to get some of

40
00:02:09.890 --> 00:02:13.610
the benefits out of what Docker can offer here.

41
00:02:13.610 --> 00:02:16.560
Now the next thing we'll talk about that Docker can help us with is

42
00:02:16.560 --> 00:02:20.140
eliminating app conflicts and version conflicts.

43
00:02:20.140 --> 00:02:24.240
Oftentimes you have an app running on a specific version of a framework,

44
00:02:24.240 --> 00:02:27.220
and you'd like to move to the next version of the framework, but

45
00:02:27.220 --> 00:02:30.900
you're told you can't because that'll impact other applications

46
00:02:30.900 --> 00:02:33.340
running on the production servers.

47
00:02:33.340 --> 00:02:38.480
And so what Docker can offer is isolated containers, and each container that

48
00:02:38.480 --> 00:02:43.390
actually contains the framework that's having this versioning can actually be

49
00:02:43.390 --> 00:02:46.260
isolated, as we've talked about. And as a result,

50
00:02:46.260 --> 00:02:50.760
we can have V1, and App1, 2, and 3 that are targeting V1 will run

51
00:02:50.760 --> 00:02:54.830
fine in their own containers, and then App1, 2, and 3 targeting

52
00:02:54.830 --> 00:02:57.760
V2 can run in their own containers.

53
00:02:57.760 --> 00:03:00.700
And now we can have different versions of whether

54
00:03:00.700 --> 00:03:04.570
it's Node or PHP or ASP.NET running.

55
00:03:04.570 --> 00:03:09.730
This makes a lot easier now to work with versioning and app conflicts.

56
00:03:09.730 --> 00:03:11.940
Now some of the frameworks out there obviously have

57
00:03:11.940 --> 00:03:15.720
some of this versioning built in, but with this,

58
00:03:15.720 --> 00:03:18.440
you really won't have to worry about it. Even if your framework

59
00:03:18.440 --> 00:03:22.640
doesn't have a good versioning story as you move between versions,

60
00:03:22.640 --> 00:03:26.740
Docker can help out in those scenarios.

61
00:03:26.740 --> 00:03:30.350
Now it can also help, as mentioned, with consistency between environments.

62
00:03:30.350 --> 00:03:32.890
And this is one of those things that I know I personally

63
00:03:32.890 --> 00:03:34.430
have been burnt by over the years.

64
00:03:34.430 --> 00:03:38.350
Going way back around the year 2000,

65
00:03:38.350 --> 00:03:42.890
we had a particular project I was working on at a consulting company, and

66
00:03:42.890 --> 00:03:45.980
our development environment was set up by the company.

67
00:03:45.980 --> 00:03:47.850
We didn't actually do it ourselves,

68
00:03:47.850 --> 00:03:51.780
so we had to work on remote machines. And the staging environment

69
00:03:51.780 --> 00:03:55.410
was also set up by them, and everything was working great on dev and

70
00:03:55.410 --> 00:03:56.940
was supposed to be the same a staging,

71
00:03:56.940 --> 00:04:01.560
but turns out it was not, and so we had a nice surprise and had to do

72
00:04:01.560 --> 00:04:07.270
some rewrites of things as we moved our first code over to staging. With

73
00:04:07.270 --> 00:04:10.950
Docker, we can eliminate a lot of these surprises because we'll simply

74
00:04:10.950 --> 00:04:13.780
move the different images that we're going to be building throughout

75
00:04:13.780 --> 00:04:17.400
this course over to the different environments and get the containers up

76
00:04:17.400 --> 00:04:18.540
and running.

77
00:04:18.540 --> 00:04:20.440
And that way, if it runs on dev,

78
00:04:20.440 --> 00:04:24.140
it definitely should run the same on staging and production,

79
00:04:24.140 --> 00:04:29.300
and we'll talk about how to get all that set up. Now, when doing that,

80
00:04:29.300 --> 00:04:32.390
that just means obviously we can leverage all of

81
00:04:32.390 --> 00:04:34.480
these benefits to ship code faster.

82
00:04:34.480 --> 00:04:38.700
And that's really what software is all about is productivity, high quality,

83
00:04:38.700 --> 00:04:39.580
predictability,

84
00:04:39.580 --> 00:04:43.240
consistency, you know, all these different words we can throw out.

85
00:04:43.240 --> 00:04:47.760
But as we do move our images between dev and staging and production and

86
00:04:47.760 --> 00:04:51.400
get those containers going, we can leverage these benefits that Docker

87
00:04:51.400 --> 00:04:54.140
offers of the isolation of the containers.

88
00:04:54.140 --> 00:04:57.700
We can have a consistent development environment and all the other

89
00:04:57.700 --> 00:05:00.740
benefits with versioning and things that we've talked about.

90
00:05:00.740 --> 00:05:11.000
So there really is a lot of good things that Docker brings to the table for us as web developers, and now you've seen a few of those.

