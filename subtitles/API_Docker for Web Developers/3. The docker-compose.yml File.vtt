WEBVTT
1
00:00:01.240 --> 00:00:06.270
So let's jump into how this YAML file is used and some of the key aspects and

2
00:00:06.270 --> 00:00:11.040
instructions that you're going to find in the YAML file.

3
00:00:11.040 --> 00:00:11.970
So first off,

4
00:00:11.970 --> 00:00:16.110
the docker‑compose.yml file defines, as mentioned, all of our services.

5
00:00:16.110 --> 00:00:17.730
And so this would be things like,

6
00:00:17.730 --> 00:00:20.430
what's the instances of different web servers you might have

7
00:00:20.430 --> 00:00:24.290
running, the different frameworks there, Node, PHP, Java,

8
00:00:24.290 --> 00:00:27.640
whatever it may be; your database services,

9
00:00:27.640 --> 00:00:30.270
caching services, you might have some application server

10
00:00:30.270 --> 00:00:33.240
services, and so on, and so forth.

11
00:00:33.240 --> 00:00:38.070
And so this will just be a normal text file that on its own is not that useful,

12
00:00:38.070 --> 00:00:43.140
but we can run it through a docker‑compose build process.

13
00:00:43.140 --> 00:00:47.580
And this build process can actually generate images that we can

14
00:00:47.580 --> 00:00:51.540
then use to create containers as we run this.

15
00:00:51.540 --> 00:00:53.520
Now the docker‑compose build process you're going to

16
00:00:53.520 --> 00:00:55.570
see is extremely simple, in fact,

17
00:00:55.570 --> 00:01:00.040
it's probably the simplest command we've run throughout the entire course.

18
00:01:00.040 --> 00:01:02.240
That's why I'm a big fan of Docker Compose.

19
00:01:02.240 --> 00:01:05.060
It provides a lot of functionality with just a little bit of

20
00:01:05.060 --> 00:01:07.930
work on your part, so we'll be looking at these commands in a

21
00:01:07.930 --> 00:01:11.170
moment. Now, that's going to generate, as mentioned,

22
00:01:11.170 --> 00:01:13.390
the images. We're going to call these services,

23
00:01:13.390 --> 00:01:16.370
though, once they get up and running. And then on a development

24
00:01:16.370 --> 00:01:19.840
machine just with one little command I can then build out my

25
00:01:19.840 --> 00:01:24.390
services, and then with one other very small command I can then

26
00:01:24.390 --> 00:01:27.440
get those services up and running.

27
00:01:27.440 --> 00:01:30.490
And so it's very, very nice in the development world,

28
00:01:30.490 --> 00:01:36.450
because if I just was given a YAML file with just a few basic commands,

29
00:01:36.450 --> 00:01:40.360
I can actually have all my images ready, and then actually convert

30
00:01:40.360 --> 00:01:43.030
those into running containers and have these services,

31
00:01:43.030 --> 00:01:43.920
if you will,

32
00:01:43.920 --> 00:01:46.020
that are actually up and running. Then I can start

33
00:01:46.020 --> 00:01:50.240
building my code against those services.

34
00:01:50.240 --> 00:01:55.050
So what goes in this docker‑compose.yml file? Well, the first

35
00:01:55.050 --> 00:01:57.420
thing you'll always see at the top is a version.

36
00:01:57.420 --> 00:02:00.560
Now, if you do see a docker‑compose file out there,

37
00:02:00.560 --> 00:02:03.900
just out on GitHub or out on the web somewhere, and if it

38
00:02:03.900 --> 00:02:07.540
doesn't have a version at the very top, then it's probably an old version.

39
00:02:07.540 --> 00:02:10.550
The initial versions of docker‑compose didn't have a version,

40
00:02:10.550 --> 00:02:13.270
but everything moving forward is supposed to have that

41
00:02:13.270 --> 00:02:15.840
as the very first thing at the top.

42
00:02:15.840 --> 00:02:18.590
Now under the version, you can have different options.

43
00:02:18.590 --> 00:02:21.530
You can have things like services, which we'll be talking about,

44
00:02:21.530 --> 00:02:25.340
but you can define other things like volumes and networks as well.

45
00:02:25.340 --> 00:02:26.500
Now for our services,

46
00:02:26.500 --> 00:02:31.680
this is where we're going to define what is it we want to be running once we

47
00:02:31.680 --> 00:02:36.070
build this docker‑compose.yml file, and then get all those images up and

48
00:02:36.070 --> 00:02:39.230
running as containers. So this is where we define,

49
00:02:39.230 --> 00:02:44.640
for instance, Node.js or ASP.NET or Java or PHP.

50
00:02:44.640 --> 00:02:49.840
Our databases, our caching servers, and so on, and so forth would go in here.

51
00:02:49.840 --> 00:02:54.040
Now, there are a lot of different options for defining these.

52
00:02:54.040 --> 00:02:55.640
So, for example,

53
00:02:55.640 --> 00:02:58.720
some of the configuration options you can supply

54
00:02:58.720 --> 00:03:01.870
include things like the build context.

55
00:03:01.870 --> 00:03:05.620
This would be things like what folder do we kind of build from as the

56
00:03:05.620 --> 00:03:09.690
context and what Docker file do you want to use to build that

57
00:03:09.690 --> 00:03:13.040
particular service, and you'll see this coming up.

58
00:03:13.040 --> 00:03:15.910
We can define environment variables, and these environment

59
00:03:15.910 --> 00:03:18.710
variables then can be automatically put into that running

60
00:03:18.710 --> 00:03:21.400
service, that container, at runtime.

61
00:03:21.400 --> 00:03:23.890
So that makes it really nice to swap, for instance,

62
00:03:23.890 --> 00:03:28.450
between an app environment of maybe development, to production, and see how

63
00:03:28.450 --> 00:03:32.950
your app responds to that. We can also define just an image.

64
00:03:32.950 --> 00:03:35.900
Maybe you're not going to build an image, you already have one either local or

65
00:03:35.900 --> 00:03:40.840
up in Docker Hub, you just want to use that as the service.

66
00:03:40.840 --> 00:03:44.400
We can also associate a given service with a network that's

67
00:03:44.400 --> 00:03:47.340
been defined. Now if you'll recall earlier in the course we

68
00:03:47.340 --> 00:03:49.560
talked about ways of linking up,

69
00:03:49.560 --> 00:03:53.020
if you will, Docker containers at runtime, so for instance

70
00:03:53.020 --> 00:03:58.140
linking up a Node.js to MongoDB database. Well,

71
00:03:58.140 --> 00:03:59.840
the recommended way to do that, of course,

72
00:03:59.840 --> 00:04:01.210
is through networks,

73
00:04:01.210 --> 00:04:04.320
and we talked about something called a bridge network and how that can be

74
00:04:04.320 --> 00:04:08.440
used to allow these containers to communicate with each other, and we can

75
00:04:08.440 --> 00:04:12.320
define those networks and then reference them to link things up in our

76
00:04:12.320 --> 00:04:17.710
docker‑compose.yml file. We can also expose different ports and define

77
00:04:17.710 --> 00:04:20.890
those, and we can even define volumes,

78
00:04:20.890 --> 00:04:23.760
including pointing to source code on your local dev

79
00:04:23.760 --> 00:04:25.750
machine volumes, and so it makes it really,

80
00:04:25.750 --> 00:04:32.740
really easy to hook up a volume into a container at runtime.

81
00:04:32.740 --> 00:04:35.080
So let's look at an example that dives a little bit deeper

82
00:04:35.080 --> 00:04:37.540
into some of these different options.

83
00:04:37.540 --> 00:04:39.740
So, as mentioned, we'll have the version at the top,

84
00:04:39.740 --> 00:04:42.960
and then we'll have our services. Now under the services

85
00:04:42.960 --> 00:04:45.520
you then name the different services.

86
00:04:45.520 --> 00:04:47.920
So I have one here just called node.

87
00:04:47.920 --> 00:04:51.240
Now that becomes the name of the service.

88
00:04:51.240 --> 00:04:52.680
Now under that, in this case,

89
00:04:52.680 --> 00:04:57.470
I say I'm going to have a custom build for a dockerfile called

90
00:04:57.470 --> 00:05:01.780
node.dockerfile, and the context is the current folder.

91
00:05:01.780 --> 00:05:05.530
So when it builds, use the current folder as kind of starting point,

92
00:05:05.530 --> 00:05:10.640
the folder context, of how to reference sub‑paths and things.

93
00:05:10.640 --> 00:05:14.910
Now I'm also saying that this node service needs to be associated

94
00:05:14.910 --> 00:05:18.680
with a ‑nodeapp network, and this is a bridge network. And that

95
00:05:18.680 --> 00:05:21.830
will allow me to put this in a specialized network and then

96
00:05:21.830 --> 00:05:26.740
communicate with other services, other containers in that network.

97
00:05:26.740 --> 00:05:29.640
Now, here's another service called MongoDB.

98
00:05:29.640 --> 00:05:33.020
Now in this case I'm not building from a custom Docker file, I'm going

99
00:05:33.020 --> 00:05:36.110
to be using the Mongo image that's up on Docker Hub.

100
00:05:36.110 --> 00:05:40.000
So this will cause it to pull it down and then use that image, and

101
00:05:40.000 --> 00:05:44.600
then notice I'm adding it to the same network, nodeapp‑network. And

102
00:05:44.600 --> 00:05:47.140
then you can even define multiple networks.

103
00:05:47.140 --> 00:05:50.670
In this case, I define a single network called nodeapp‑network,

104
00:05:50.670 --> 00:05:54.640
and then it has a driver, which is our bridge type of network.

105
00:05:54.640 --> 00:05:54.840
Now,

106
00:05:54.840 --> 00:05:58.840
if you're new to the YAML format and you're coming from maybe an

107
00:05:58.840 --> 00:06:01.680
XML background or JSON or something like that,

108
00:06:01.680 --> 00:06:03.960
then this is definitely very different. You'll notice that there's a

109
00:06:03.960 --> 00:06:07.240
little bit of an indentation kind of going on here.

110
00:06:07.240 --> 00:06:09.770
And what's nice about this is, number one, you don't

111
00:06:09.770 --> 00:06:12.770
have to worry about closing tags, so it's very simple that way.

112
00:06:12.770 --> 00:06:15.600
And you also don't have to worry about closing brackets and things,

113
00:06:15.600 --> 00:06:18.880
as with JSON. It's just a different way to do it.

114
00:06:18.880 --> 00:06:22.590
So you can see it's just a simple file. On its own it's not that useful,

115
00:06:22.590 --> 00:06:26.070
but as I teach you and we walk through the different Docker Compose

116
00:06:26.070 --> 00:06:32.280
commands, we can take this and convert it into a node service, a mongodb

117
00:06:32.280 --> 00:06:36.100
service, and then a network that both of those services are in so they can

118
00:06:36.100 --> 00:06:38.040
communicate with each other.

119
00:06:38.040 --> 00:06:42.840
So that's a simple example of what could be in a docker‑compose.yml file.

120
00:06:42.840 --> 00:06:45.370
Now let's look at how we can work with some of the commands

121
00:06:45.370 --> 00:06:51.000
that can take this and convert it into images, containers, and services.

