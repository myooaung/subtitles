WEBVTT
1
00:00:01.040 --> 00:00:03.430
Docker Compose provides a great way to get multiple

2
00:00:03.430 --> 00:00:05.440
containers up and running on your system,

3
00:00:05.440 --> 00:00:09.340
but what do we do as we're ready to move to a different environment?

4
00:00:09.340 --> 00:00:12.630
For example, you might have a staging or production environment,

5
00:00:12.630 --> 00:00:17.140
and now we want a very robust way to run our containers.

6
00:00:17.140 --> 00:00:18.160
Well, up to this point,

7
00:00:18.160 --> 00:00:21.510
we've seen how we could just run Docker Compose up

8
00:00:21.510 --> 00:00:25.130
and get different containers going, such as nginx,

9
00:00:25.130 --> 00:00:28.840
different APIs, even databases if we wanted,

10
00:00:28.840 --> 00:00:32.340
and something like Redis if we were using that for caching.

11
00:00:32.340 --> 00:00:35.460
But as we move between the different environments,

12
00:00:35.460 --> 00:00:39.120
how are we going to manage our containers? Because with Docker Compose

13
00:00:39.120 --> 00:00:43.020
it's going to be more manual, somebody has to run those commands or

14
00:00:43.020 --> 00:00:47.100
program something to run those commands, and what we do is we want to

15
00:00:47.100 --> 00:00:49.940
scale and do other types of things.

16
00:00:49.940 --> 00:00:53.940
Well, Docker Compose actually does have a scaling feature,

17
00:00:53.940 --> 00:00:57.740
but it's not designed for things like load balancing.

18
00:00:57.740 --> 00:01:02.140
Docker Compose has a policy where you can restart containers if they fail,

19
00:01:02.140 --> 00:01:04.050
but that's about it.

20
00:01:04.050 --> 00:01:09.840
Anything you want that's more robust for production, you're kind of on your own.

21
00:01:09.840 --> 00:01:13.810
In addition to gracefully handling containers that may fail, what if you

22
00:01:13.810 --> 00:01:18.340
want to scale and load balance your different containers?

23
00:01:18.340 --> 00:01:21.200
Well, Docker Compose does provide some scaling features,

24
00:01:21.200 --> 00:01:23.940
but it doesn't provide any load balancing features.

25
00:01:23.940 --> 00:01:27.870
So if you want to run your containers on multiple VMs and

26
00:01:27.870 --> 00:01:31.240
then load balance between those nodes, if you will,

27
00:01:31.240 --> 00:01:34.570
then Docker Compose isn't going to help you there, and that might be a

28
00:01:34.570 --> 00:01:38.740
big deal depending on what your production needs are.

29
00:01:38.740 --> 00:01:40.880
So wouldn't it be nice if we could do the following

30
00:01:40.880 --> 00:01:44.240
things across our different environments?

31
00:01:44.240 --> 00:01:45.270
First off,

32
00:01:45.270 --> 00:01:49.300
package up an app, provide a manifest, and let some other tool manage that

33
00:01:49.300 --> 00:01:54.530
for us; not worry about the management of containers; eliminate single

34
00:01:54.530 --> 00:01:59.140
points of failure, and even selfâ€‘heal containers if they have a problem;

35
00:01:59.140 --> 00:02:04.560
have a really robust way to scale, but not only scale, also load balance

36
00:02:04.560 --> 00:02:07.340
across our different containers.

37
00:02:07.340 --> 00:02:10.290
What if we could update containers without bringing down

38
00:02:10.290 --> 00:02:14.170
the application and even have some robust networking and

39
00:02:14.170 --> 00:02:16.340
persistent storage options?

40
00:02:16.340 --> 00:02:18.830
Well, all of these are obviously good things to have,

41
00:02:18.830 --> 00:02:22.540
and Docker Compose does quite a bit, but again,

42
00:02:22.540 --> 00:02:25.820
it was never really intended to be the production environment,

43
00:02:25.820 --> 00:02:29.740
even though you absolutely could use it if somebody had set up the

44
00:02:29.740 --> 00:02:33.540
commands to run across your different environments.

45
00:02:33.540 --> 00:02:36.790
So what if we could define containers we want, hand it off to a

46
00:02:36.790 --> 00:02:39.590
system, and basically tell that system, hey,

47
00:02:39.590 --> 00:02:44.340
here's what I need, now make it happen, you manage it.

48
00:02:44.340 --> 00:02:45.740
Well, welcome to Kubernetes.

49
00:02:45.740 --> 00:02:50.000
That's what it can do for us, and that's what we're going to start looking at next.

