WEBVTT
1
00:00:02.440 --> 00:00:06.300
Let's jump into an example of creating a custom container network

2
00:00:06.300 --> 00:00:10.220
using the bridge driver and then adding some containers into that

3
00:00:10.220 --> 00:00:12.740
network so they can communicate.

4
00:00:12.740 --> 00:00:15.340
So what I'm going to do is the same exact demonstration I

5
00:00:15.340 --> 00:00:18.060
showed earlier with the legacy linking,

6
00:00:18.060 --> 00:00:21.940
but we're going to do this with our own custom bridge network.

7
00:00:21.940 --> 00:00:24.980
Now I've updated the comments here and added two options.

8
00:00:24.980 --> 00:00:27.030
So Option 1 is what we looked at earlier,

9
00:00:27.030 --> 00:00:30.040
and this is the legacy linking that I showed.

10
00:00:30.040 --> 00:00:34.730
But Option 2, which is the new one, is we're going to create our own network.

11
00:00:34.730 --> 00:00:36.390
I'm going to call it again isolated_network,

12
00:00:36.390 --> 00:00:39.100
but you would normally give it a more specific name,

13
00:00:39.100 --> 00:00:42.140
probably based on the containers that are going to be in that network.

14
00:00:42.140 --> 00:00:46.760
Before I run this though, let me come back to the command prompt here,

15
00:00:46.760 --> 00:00:49.440
and I'll show you another Docker client command,

16
00:00:49.440 --> 00:00:53.430
and it's called network, and we can do ls,

17
00:00:53.430 --> 00:00:54.620
and we can list the networks.

18
00:00:54.620 --> 00:00:57.310
And you'll notice currently that I have none,

19
00:00:57.310 --> 00:01:00.260
host, and bridge, and it shows these different drivers.

20
00:01:00.260 --> 00:01:01.140
Well,

21
00:01:01.140 --> 00:01:04.610
we're going to be creating some containers in a custom bridge

22
00:01:04.610 --> 00:01:08.840
network so we can communicate locally on this host.

23
00:01:08.840 --> 00:01:12.360
And so to do that, we first need to create the network.

24
00:01:12.360 --> 00:01:18.190
So I'm just going to grab this command here, and we'll run this.

25
00:01:18.190 --> 00:01:22.580
And it gives an ID, and now I can run the same commander earlier,

26
00:01:22.580 --> 00:01:25.990
docker network ls, and there we go.

27
00:01:25.990 --> 00:01:30.440
You can see my isolated_network, and it's the bridge driver.

28
00:01:30.440 --> 00:01:34.110
Now what's interesting about this is I can inspect the network is well.

29
00:01:34.110 --> 00:01:38.340
So I can say docker network inspect,

30
00:01:38.340 --> 00:01:42.410
and I can give it the name of isolated_network.

31
00:01:42.410 --> 00:01:44.790
And this gives me some information,

32
00:01:44.790 --> 00:01:47.930
but I want to point out currently there's no containers in there.

33
00:01:47.930 --> 00:01:50.820
So it does have some information about the subnet and the

34
00:01:50.820 --> 00:01:53.190
gateway and some other info up here on the ID,

35
00:01:53.190 --> 00:01:56.940
but it's really not very useful at this point.

36
00:01:56.940 --> 00:02:00.460
All right, so we need to run some containers in that network,

37
00:02:00.460 --> 00:02:04.270
and we're going to do that using the ‑‑net switch

38
00:02:04.270 --> 00:02:05.470
that I showed a little bit earlier.

39
00:02:05.470 --> 00:02:11.740
So the first one I'm going to start is the MongoDB container.

40
00:02:11.740 --> 00:02:14.290
So we'll paste that in, and that's going to fire that up.

41
00:02:14.290 --> 00:02:15.560
Now that's in the network.

42
00:02:15.560 --> 00:02:20.260
So we should build a now do a docker network inspect on our network,

43
00:02:20.260 --> 00:02:22.140
isolated_network.

44
00:02:22.140 --> 00:02:27.040
And now you'll notice in the containers that we have mongodb listed.

45
00:02:27.040 --> 00:02:31.650
And only the items that show up in here are going to be available.

46
00:02:31.650 --> 00:02:35.540
So this is actually pretty cool to work with.

47
00:02:35.540 --> 00:02:42.440
Now we'll come back and we'll start up our Node container.

48
00:02:42.440 --> 00:02:43.830
All right, same thing.

49
00:02:43.830 --> 00:02:44.940
This will now add it.

50
00:02:44.940 --> 00:02:48.840
And when we do our docker ps, we should see those both running.

51
00:02:48.840 --> 00:02:52.030
All right, now I can go to the browser, and I didn't load the sample data here,

52
00:02:52.030 --> 00:02:54.040
but let's just refresh.

53
00:02:54.040 --> 00:02:58.740
And we should see this Docker Commands show up once it loads up here.

54
00:02:58.740 --> 00:03:00.400
All right, and there we go.

55
00:03:00.400 --> 00:03:03.870
Now I've already shown earlier in a previous demo that if we want,

56
00:03:03.870 --> 00:03:06.340
we can do this docker exec,

57
00:03:06.340 --> 00:03:11.340
and this will run against the name that you see here of the container.

58
00:03:11.340 --> 00:03:12.660
So it made it a little bit easier.

59
00:03:12.660 --> 00:03:15.840
You don't have to know the container ID now.

60
00:03:15.840 --> 00:03:18.080
Go ahead and run that, and that starts it up,

61
00:03:18.080 --> 00:03:20.640
and then I can just stop to get out.

62
00:03:20.640 --> 00:03:24.630
Now the MongoDB database should have some data, and there we go.

63
00:03:24.630 --> 00:03:27.040
We're now able to run that.

64
00:03:27.040 --> 00:03:30.820
So that's an example of how we can use our container

65
00:03:30.820 --> 00:03:32.810
networking or bridge networking.

66
00:03:32.810 --> 00:03:34.870
It really depends on how you want to look at it,

67
00:03:34.870 --> 00:03:39.440
but the official term is container networking with a bridge driver.

68
00:03:39.440 --> 00:03:42.710
And that's how we can have multiple containers communicate

69
00:03:42.710 --> 00:03:47.140
with each other in a way that isolates them to this custom

70
00:03:47.140 --> 00:03:48.720
network container that we created.

71
00:03:48.720 --> 00:03:52.840
Pretty cool stuff.

72
00:03:52.840 --> 00:03:54.190
Now that you've seen that,

73
00:03:54.190 --> 00:03:59.240
let's do the same thing with the ASP.NET Core and PostgreSQL.

74
00:03:59.240 --> 00:04:01.130
So I'm going to run through this want to little more

75
00:04:01.130 --> 00:04:03.540
quickly because we've already seen it.

76
00:04:03.540 --> 00:04:07.880
But if I run in and say docker network ls,

77
00:04:07.880 --> 00:04:10.850
you'll notice I have kind of the standard items here,

78
00:04:10.850 --> 00:04:14.450
and now I'm on the Mac side versus the last one was on the Windows side.

79
00:04:14.450 --> 00:04:20.640
So we can again create our custom network.

80
00:04:20.640 --> 00:04:21.850
We'll paste that in.

81
00:04:21.850 --> 00:04:22.740
There we go.

82
00:04:22.740 --> 00:04:27.110
So now we can run our docker network ls, and there we go.

83
00:04:27.110 --> 00:04:27.750
It's in there.

84
00:04:27.750 --> 00:04:29.560
But if I ran the inspect, it would be empty,

85
00:04:29.560 --> 00:04:33.140
of course, as far as the containers.

86
00:04:33.140 --> 00:04:34.500
All right, so from here,

87
00:04:34.500 --> 00:04:38.740
we'll go ahead and now we'll start up our database container,

88
00:04:38.740 --> 00:04:41.440
and then we'll go ahead and start up our web server

89
00:04:41.440 --> 00:04:46.140
container that wants to communicate with that.

90
00:04:46.140 --> 00:04:48.980
All right, we're off and running, so let's make sure they're started.

91
00:04:48.980 --> 00:04:51.640
All right, both are up it looks like over here.

92
00:04:51.640 --> 00:04:56.670
So we can come back over and let me refresh this particular IP and port,

93
00:04:56.670 --> 00:05:00.360
and we should see the same type of page on this particular browser.

94
00:05:00.360 --> 00:05:01.360
All right, there we go.

95
00:05:01.360 --> 00:05:04.340
So there's ASP.NET Core again with Postgres.

96
00:05:04.340 --> 00:05:07.470
But again, this time they're running inside of their own network,

97
00:05:07.470 --> 00:05:12.940
so let's just prove that one more time by doing docker network inspect.

98
00:05:12.940 --> 00:05:19.280
And then the name of the network was isolated_network All right,

99
00:05:19.280 --> 00:05:20.830
and you can see we have two containers.

100
00:05:20.830 --> 00:05:24.500
There's aspnetcoreapp, and there's our postgres.

101
00:05:24.500 --> 00:05:28.210
So the name is actually the name that was used in

102
00:05:28.210 --> 00:05:30.340
the connection string up in here.

103
00:05:30.340 --> 00:05:33.350
And likewise on the MongoDB side, the name of that container,

104
00:05:33.350 --> 00:05:35.940
of course, was used in the connection string.

105
00:05:35.940 --> 00:05:40.560
So this is the preferred route moving forward with Docker as you

106
00:05:40.560 --> 00:05:43.840
are definitely moving to staging and production.

107
00:05:43.840 --> 00:05:45.700
Now I'd say in development,

108
00:05:45.700 --> 00:05:47.690
I don't know that it matters quite as much because

109
00:05:47.690 --> 00:05:49.120
you may not even need a network,

110
00:05:49.120 --> 00:05:52.250
but it's just as easy I think to set up a network as it

111
00:05:52.250 --> 00:05:55.120
is to link with the legacy linking.

112
00:05:55.120 --> 00:05:57.540
So I'll let you kind of debate the merits there.

113
00:05:57.540 --> 00:06:04.000
Either one works. But that's an example of how we can do this with container networks.

