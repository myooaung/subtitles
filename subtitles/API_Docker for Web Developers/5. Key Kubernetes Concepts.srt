1
00:00:00,840 --> 00:00:05,140
Before we officially convert between Docker Compose to Kubernetes files,

2
00:00:05,140 --> 00:00:10,040
let's talk about a few key concepts that you need to know in Kubernetes.

3
00:00:10,040 --> 00:00:12,660
Now, as I mentioned at the very beginning of this module,

4
00:00:12,660 --> 00:00:15,030
Kubernetes is actually a very big topic,

5
00:00:15,030 --> 00:00:19,140
and that's why there's full courses just on Kubernetes.

6
00:00:19,140 --> 00:00:22,470
The goal here is really just to break you in gently,

7
00:00:22,470 --> 00:00:23,570
if you will,

8
00:00:23,570 --> 00:00:26,070
to some of the different concepts that you need to know

9
00:00:26,070 --> 00:00:28,170
so you can get up and running quickly.

10
00:00:28,170 --> 00:00:31,420
But know that there's definitely going to be more research involved on your

11
00:00:31,420 --> 00:00:35,340
part if you want to use this in a realâ€‘life scenario.

12
00:00:35,340 --> 00:00:37,210
So the first thing I want to talk about that we're going to see

13
00:00:37,210 --> 00:00:39,900
coming up is something called a deployment.

14
00:00:39,900 --> 00:00:45,170
This plays a central role in Kubernetes because it allows us to describe the

15
00:00:45,170 --> 00:00:49,010
desired state we're after in one of two types of files.

16
00:00:49,010 --> 00:00:54,940
We can use a YAML file, which is the normal one, or even a JSON file.

17
00:00:54,940 --> 00:00:59,570
So what we'll be doing as we convert from Docker Compose to Kubernetes is

18
00:00:59,570 --> 00:01:04,230
one option would be to basically translate the services in our Docker

19
00:01:04,230 --> 00:01:08,940
Compose file that define the images and the containers that should run

20
00:01:08,940 --> 00:01:11,940
into a Kubernetes deployment file.

21
00:01:11,940 --> 00:01:15,340
I'm going to show you an easy way to do that to get started.

22
00:01:15,340 --> 00:01:17,580
But really, what a deployment is all about,

23
00:01:17,580 --> 00:01:20,390
in a nutshell anyway, is saying, hey,

24
00:01:20,390 --> 00:01:23,050
I need these five containers up and running,

25
00:01:23,050 --> 00:01:26,440
and I need them to be able to communicate somehow.

26
00:01:26,440 --> 00:01:30,410
Now in addition to describing the desired state in a deployment,

27
00:01:30,410 --> 00:01:32,720
you can also use it to replicate pods,

28
00:01:32,720 --> 00:01:35,360
and this allows you to scale out if you'd like,

29
00:01:35,360 --> 00:01:38,240
add more pods onto a node, for example.

30
00:01:38,240 --> 00:01:42,240
And it even supports rolling updates and rollbacks,

31
00:01:42,240 --> 00:01:47,540
which can be very important as you version your app into the future.

32
00:01:47,540 --> 00:01:49,100
Now in addition to deployments,

33
00:01:49,100 --> 00:01:51,940
we're also going to see something called a service.

34
00:01:51,940 --> 00:01:55,320
Up to this point, we've seen that containers run in pods,

35
00:01:55,320 --> 00:01:56,950
but pods can live and die.

36
00:01:56,950 --> 00:01:58,340
If a container goes down,

37
00:01:58,340 --> 00:02:02,800
that pod may be completely removed and a new pod might be brought up.

38
00:02:02,800 --> 00:02:05,590
So they could have a very short or long lifespan.

39
00:02:05,590 --> 00:02:07,540
It really depends.

40
00:02:07,540 --> 00:02:09,350
So from a consumer standpoint,

41
00:02:09,350 --> 00:02:13,090
we can't always count on the IP address of a pod and

42
00:02:13,090 --> 00:02:16,340
ultimately the container being there.

43
00:02:16,340 --> 00:02:21,240
Services allow us to abstract those pod IP addresses from the consumers,

44
00:02:21,240 --> 00:02:24,040
and I'll show you a visual of this in just a moment.

45
00:02:24,040 --> 00:02:27,230
In a nutshell, though, that's a good thing because now,

46
00:02:27,230 --> 00:02:29,800
if a pod dies and a new one's brought up,

47
00:02:29,800 --> 00:02:32,630
the consumer doesn't even know anything happened.

48
00:02:32,630 --> 00:02:36,920
Everything is good to go because the service kind of acts as the middleman,

49
00:02:36,920 --> 00:02:38,120
if you will.

50
00:02:38,120 --> 00:02:42,460
In cases where you have multiple pods that a service knows about

51
00:02:42,460 --> 00:02:45,440
it can also load balance between those pods.

52
00:02:45,440 --> 00:02:48,160
And that could be good, as we talked about, when it comes to

53
00:02:48,160 --> 00:02:52,340
scaling out and those types of scenarios.

54
00:02:52,340 --> 00:02:55,540
So here's a visual of how this all works.

55
00:02:55,540 --> 00:02:58,740
A service is going to have an IP address,

56
00:02:58,740 --> 00:03:02,740
but a pod is also going to have an IP address.

57
00:03:02,740 --> 00:03:06,950
Now ultimately, a consumer of this pod wants to get to the container,

58
00:03:06,950 --> 00:03:12,240
but if we gave them the 10.0.0.43 address,

59
00:03:12,240 --> 00:03:14,140
well, that might go away in the next few seconds,

60
00:03:14,140 --> 00:03:17,240
potentially if something happened to the pod.

61
00:03:17,240 --> 00:03:25,190
So, what we'll do is instead give the consumer the reference to the 10.0.0.1 IP,

62
00:03:25,190 --> 00:03:26,940
which is the service.

63
00:03:26,940 --> 00:03:28,740
That way, if the pod changes,

64
00:03:28,740 --> 00:03:32,180
or maybe even a new pod gets added with different containers,

65
00:03:32,180 --> 00:03:36,730
the consumer just has to remember that one IP and know about it to

66
00:03:36,730 --> 00:03:40,060
talk to the different pods. Now behind the scenes,

67
00:03:40,060 --> 00:03:44,420
the service is going to be in charge of knowing about the different pods.

68
00:03:44,420 --> 00:03:48,530
If one goes down and a new one comes up and the IP address changes,

69
00:03:48,530 --> 00:03:51,340
then the service will automatically take care of that.

70
00:03:51,340 --> 00:03:55,510
So it's a level of abstraction to allow consumers just to

71
00:03:55,510 --> 00:03:59,340
have one endpoint they need to know about.

72
00:03:59,340 --> 00:04:03,650
Now are there more files and concepts aside from just deployments and services?

73
00:04:03,650 --> 00:04:04,080
Yes,

74
00:04:04,080 --> 00:04:08,140
there are, actually. There's a whole bunch of things we could get into. But

75
00:04:08,140 --> 00:04:16,000
these are two of the key ones you're going to see in just a moment as we talk more about converting from Docker Compose to Kubernetes.

