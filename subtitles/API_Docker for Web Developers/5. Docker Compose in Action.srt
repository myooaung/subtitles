1
00:00:02,240 --> 00:00:04,900
Let's take a look at Docker Compose in action,

2
00:00:04,900 --> 00:00:07,610
and we're going to work with a custom YAML file,

3
00:00:07,610 --> 00:00:09,920
as well as use some of the different Docker Compose

4
00:00:09,920 --> 00:00:13,440
commands that we talked about earlier.

5
00:00:13,440 --> 00:00:17,750
All right, so I've already opened up a Node.js, MongoDB type of project.

6
00:00:17,750 --> 00:00:21,410
This is the same exact one that we saw earlier where we had to

7
00:00:21,410 --> 00:00:25,310
manually run some of the different commands to build our images

8
00:00:25,310 --> 00:00:27,940
and then run our different containers.

9
00:00:27,940 --> 00:00:31,310
So while that works, it's a little bit inefficient,

10
00:00:31,310 --> 00:00:32,100
I would argue,

11
00:00:32,100 --> 00:00:34,970
and definitely not something I want to have to copy and paste those

12
00:00:34,970 --> 00:00:37,360
commands in every time I want to run a container,

13
00:00:37,360 --> 00:00:40,040
rebuild an image, or whatever it may be.

14
00:00:40,040 --> 00:00:44,800
So I've already created a docker‑compose.yml YAML file,

15
00:00:44,800 --> 00:00:47,900
and the first thing we're going to do to make it easier to

16
00:00:47,900 --> 00:00:51,180
bring up our Node and our Mongo services,

17
00:00:51,180 --> 00:00:53,420
which is again, really our containers,

18
00:00:53,420 --> 00:00:58,540
is add them and define them into this particular YAML file.

19
00:00:58,540 --> 00:01:00,860
So the first thing I'm going to do is we're going to come in and mark

20
00:01:00,860 --> 00:01:04,440
the current version that I have to do as of today.

21
00:01:04,440 --> 00:01:07,990
Next thing we're going to do is we're going to add the services that we want.

22
00:01:07,990 --> 00:01:11,720
And because we're going to have two services here that sort of link up,

23
00:01:11,720 --> 00:01:14,940
if you will, we're going to do that through the bridge network.

24
00:01:14,940 --> 00:01:19,040
So I'm going to come in and I'm going to name it nodeapp‑network.

25
00:01:19,040 --> 00:01:21,980
And then we're going to have to say that the driver for this network,

26
00:01:21,980 --> 00:01:23,560
since there are different options here,

27
00:01:23,560 --> 00:01:27,940
is the bridge one that we've already talked about earlier in the course.

28
00:01:27,940 --> 00:01:28,240
All right,

29
00:01:28,240 --> 00:01:32,980
so that will take care of having a network that's named nodeapp‑network.

30
00:01:32,980 --> 00:01:34,830
So that part represents the name.

31
00:01:34,830 --> 00:01:37,990
And then the only property I had to put in this case for

32
00:01:37,990 --> 00:01:41,740
that was that it was a bridge network.

33
00:01:41,740 --> 00:01:43,770
So the next thing we're going to do is come in and

34
00:01:43,770 --> 00:01:47,540
define I'm going to call it node, and we're going to do a node service.

35
00:01:47,540 --> 00:01:52,540
And I want to build this from the custom Node Dockerfile that I already have.

36
00:01:52,540 --> 00:01:56,140
And so I'm going to come in and add a build property,

37
00:01:56,140 --> 00:01:57,930
and then it has some subproperties.

38
00:01:57,930 --> 00:02:00,840
I'm going to name the first one context.

39
00:02:00,840 --> 00:02:04,990
I want to run from the context of where this YAML file is here.

40
00:02:04,990 --> 00:02:08,180
So if there's any subfolders I had to get to in the Dockerfile,

41
00:02:08,180 --> 00:02:10,570
it would set the context of where that runs from.

42
00:02:10,570 --> 00:02:13,240
So that's actually a really important concept.

43
00:02:13,240 --> 00:02:15,230
Then the next one is what's the Dockerfile?

44
00:02:15,230 --> 00:02:18,650
Well, I'm not using the standard just Dockerfile name.

45
00:02:18,650 --> 00:02:21,940
I'm doing node.dockerfile.

46
00:02:21,940 --> 00:02:24,240
All right, and that'll take care of that.

47
00:02:24,240 --> 00:02:27,640
Now this particular one is going to run on some ports.

48
00:02:27,640 --> 00:02:30,710
We're going to do the mapping of the external to the internal.

49
00:02:30,710 --> 00:02:33,230
I'm going to do 3000 to 3000.

50
00:02:33,230 --> 00:02:38,440
Very similar to what we've done, 3000 on the external, 3000 on the internal.

51
00:02:38,440 --> 00:02:42,940
And then we're also going to need to hook this into our nodeapp‑network.

52
00:02:42,940 --> 00:02:47,240
So I can say networks and then simply put in‑‑‑ Every time you see the dash,

53
00:02:47,240 --> 00:02:51,140
it's because I could add multiple items here in the YAML file format.

54
00:02:51,140 --> 00:02:53,930
We're going to call this nodeapp‑network,

55
00:02:53,930 --> 00:02:57,840
and that just matches that name right there.

56
00:02:57,840 --> 00:03:00,940
All right, so we're kind of off and running with that particular service.

57
00:03:00,940 --> 00:03:03,740
So one more time, we're going to call it node.

58
00:03:03,740 --> 00:03:09,450
We set the build context to basically the folder where the YAML file is,

59
00:03:09,450 --> 00:03:11,440
and then we give it our Dockerfile.

60
00:03:11,440 --> 00:03:15,940
We're going to expose the ports that we want to set up and hook it into

61
00:03:15,940 --> 00:03:20,040
the network that you see here in this particular case.

62
00:03:20,040 --> 00:03:24,540
All right, now the next thing we're going to do is hook in our MongoDB,

63
00:03:24,540 --> 00:03:28,440
and this one is not going to be built from a custom image

64
00:03:28,440 --> 00:03:30,210
or a custom Dockerfile that I have.

65
00:03:30,210 --> 00:03:32,710
It's going to be based on the one that's up in Docker Hub.

66
00:03:32,710 --> 00:03:35,440
So I'm just going to list the name of the image there,

67
00:03:35,440 --> 00:03:38,500
and let me change that because it's actually just mongo.

68
00:03:38,500 --> 00:03:41,640
And then we also need to hook it into the network.

69
00:03:41,640 --> 00:03:45,240
So I can just kind of copy and paste this part right here.

70
00:03:45,240 --> 00:03:46,930
And were off and running.

71
00:03:46,930 --> 00:03:51,780
So that would be an example of creating a custom Docker Compose YAML file.

72
00:03:51,780 --> 00:03:52,970
It's not that hard.

73
00:03:52,970 --> 00:03:56,950
Really it's just a matter of going to the documentation on docker.com,

74
00:03:56,950 --> 00:04:00,360
looking up the Docker Compose YAML file documentation,

75
00:04:00,360 --> 00:04:04,170
it's pretty well documented, and then just taking the time to do it.

76
00:04:04,170 --> 00:04:06,530
And the nice thing is, once you've done this a few times,

77
00:04:06,530 --> 00:04:09,410
you can just start to copy and paste and tweak things

78
00:04:09,410 --> 00:04:12,840
between your different YAML files there.

79
00:04:12,840 --> 00:04:15,710
All right, so now we have our services defined.

80
00:04:15,710 --> 00:04:16,560
We have a node.

81
00:04:16,560 --> 00:04:18,070
We have a mongo.

82
00:04:18,070 --> 00:04:21,940
They're both in the same nodeapp‑network here.

83
00:04:21,940 --> 00:04:25,640
And that way, when we run these services and run the up command,

84
00:04:25,640 --> 00:04:27,490
then it's going to put both of them in the network

85
00:04:27,490 --> 00:04:32,140
so they can talk to each other, and we've seen that earlier again in the course.

86
00:04:32,140 --> 00:04:32,680
All right,

87
00:04:32,680 --> 00:04:36,770
so let me run off now to the terminal that I already have up for this

88
00:04:36,770 --> 00:04:41,540
particular folder and because we have a Docker Compose file,

89
00:04:41,540 --> 00:04:43,770
imagine that you just checked this source code,

90
00:04:43,770 --> 00:04:47,720
maybe out of your version control, and brought it down to your local machine,

91
00:04:47,720 --> 00:04:50,870
and now all I'd have to do to get an environment up and

92
00:04:50,870 --> 00:04:54,240
running is say docker‑compose build.

93
00:04:54,240 --> 00:04:56,940
So I first need to get the images in place.

94
00:04:56,940 --> 00:04:58,830
Now this will take just a little bit of time.

95
00:04:58,830 --> 00:05:01,450
I have some of this cached, but it should be pretty quick.

96
00:05:01,450 --> 00:05:02,970
And you can see it's now done.

97
00:05:02,970 --> 00:05:06,450
And then mongo was already there locally if I did docker images.

98
00:05:06,450 --> 00:05:08,280
So it didn't have to do anything there.

99
00:05:08,280 --> 00:05:11,140
So if we do docker images,

100
00:05:11,140 --> 00:05:12,290
you'll notice I have this

101
00:05:12,290 --> 00:05:17,300
nodeexpressmongodbdockerapp_node. It kind of named that

102
00:05:17,300 --> 00:05:17,630
part.

103
00:05:17,630 --> 00:05:21,140
And we could even name it, by the way. That's possible to do too.

104
00:05:21,140 --> 00:05:24,150
And in here is my mongo image.

105
00:05:24,150 --> 00:05:26,840
And so those are all ready to go.

106
00:05:26,840 --> 00:05:34,000
So now the next thing to try to get this going would be to do docker‑compose up.

107
00:05:34,000 --> 00:05:36,770
Now this is going to go ahead and start both of these up.

108
00:05:36,770 --> 00:05:38,240
They just did.

109
00:05:38,240 --> 00:05:40,310
And you'll notice though that when I brought it up,

110
00:05:40,310 --> 00:05:41,970
it's kind of in log mode right now.

111
00:05:41,970 --> 00:05:46,440
And so I'd have to open up a new terminal to really do anything here.

112
00:05:46,440 --> 00:05:47,790
Probably not what I want.

113
00:05:47,790 --> 00:05:54,440
So let's go ahead and go into here now. I'm going to say docker‑compose down,

114
00:05:54,440 --> 00:05:56,940
and that's going to go ahead and stop both of those.

115
00:05:56,940 --> 00:06:00,020
And it's going to go ahead and remove the containers as well,

116
00:06:00,020 --> 00:06:01,220
which is really nice.

117
00:06:01,220 --> 00:06:03,740
So we'll let this stop.

118
00:06:03,740 --> 00:06:04,080
All right,

119
00:06:04,080 --> 00:06:06,720
so that's all stopped now, and you'll notice it also removed,

120
00:06:06,720 --> 00:06:09,640
so stopped and removed all in one shot.

121
00:06:09,640 --> 00:06:13,640
Now what I didn't like about that is when I did docker‑compose up,

122
00:06:13,640 --> 00:06:17,840
it kind of blocked us from using the terminal. So let's go ahead

123
00:06:17,840 --> 00:06:20,090
and do it, but we want to run in daemon mode.

124
00:06:20,090 --> 00:06:21,800
I want to run it behind the scenes.

125
00:06:21,800 --> 00:06:24,040
Let's go ahead and try that.

126
00:06:24,040 --> 00:06:26,120
All right, now notice they should be up.

127
00:06:26,120 --> 00:06:27,940
We'll prove that in a moment.

128
00:06:27,940 --> 00:06:29,700
But I can get back to the command prompt.

129
00:06:29,700 --> 00:06:33,240
So you've seen that before when we did docker run.

130
00:06:33,240 --> 00:06:36,690
So let's go in and do another command, docker‑compose, and

131
00:06:36,690 --> 00:06:40,340
let's do ps and see what we have running here.

132
00:06:40,340 --> 00:06:42,930
And you can see we have two containers.

133
00:06:42,930 --> 00:06:48,630
So there's our mongodb. There's our node. It shows the status of the ports

134
00:06:48,630 --> 00:06:52,940
and the IPs and all that stuff we've already seen before.

135
00:06:52,940 --> 00:06:55,040
All right, so since those are both up,

136
00:06:55,040 --> 00:06:59,050
let's run off to the browser. And I already have the

137
00:06:59,050 --> 00:07:00,760
IP for the virtual machine here.

138
00:07:00,760 --> 00:07:04,720
We're going to do the port of 3000, and this should now hit it, and there we do.

139
00:07:04,720 --> 00:07:08,010
Now I'm not going to run the db seeder that we saw earlier.

140
00:07:08,010 --> 00:07:10,720
I'm not seeing any data because this was a fresh container,

141
00:07:10,720 --> 00:07:14,710
and so there's no data in the MongoDB database. But we certainly

142
00:07:14,710 --> 00:07:18,830
could also run commands against that if we wanted, and that way we

143
00:07:18,830 --> 00:07:21,740
could seed it with some data. But you can see it is up and running,

144
00:07:21,740 --> 00:07:24,540
and we didn't get any errors there.

145
00:07:24,540 --> 00:07:29,030
Now if you wanted to see that hey, there are no errors, then we could also,

146
00:07:29,030 --> 00:07:29,610
while we're here,

147
00:07:29,610 --> 00:07:34,560
do docker‑compose, and we can do logs. And what this will do is give

148
00:07:34,560 --> 00:07:38,780
us the logs for all the containers that are associated with this

149
00:07:38,780 --> 00:07:42,210
docker‑compose that we ran. All right, and there we go.

150
00:07:42,210 --> 00:07:46,770
So notice that now I have the entire kind of log infrastructure here,

151
00:07:46,770 --> 00:07:47,410
if you will.

152
00:07:47,410 --> 00:07:51,240
I'm going to go ahead and exit that out. And you'll notice I can

153
00:07:51,240 --> 00:07:53,200
get to all the details about, in this case,

154
00:07:53,200 --> 00:07:54,940
the MongoDB setup.

155
00:07:54,940 --> 00:07:59,550
Here's my npm it looks like. Here's the calls that went in as we hit the

156
00:07:59,550 --> 00:08:04,220
web page. And it looks like, other than me aborting down here, everything

157
00:08:04,220 --> 00:08:07,670
is looking pretty good. Now to bring these down,

158
00:08:07,670 --> 00:08:13,610
which you've already seen, we can do docker‑compose down. And this will

159
00:08:13,610 --> 00:08:17,020
go ahead and bring these down, and now we'll be kind of off and running,

160
00:08:17,020 --> 00:08:21,200
and we can rebuild the images or do what we want. And I can even remove

161
00:08:21,200 --> 00:08:22,960
all the images if we wanted to.

162
00:08:22,960 --> 00:08:24,140
When you do the down,

163
00:08:24,140 --> 00:08:26,990
there's a ‑‑rmi all that I showed a little bit

164
00:08:26,990 --> 00:08:29,170
earlier, and we could do that as well.

165
00:08:29,170 --> 00:08:32,140
So now let's do docker‑compose ps.

166
00:08:32,140 --> 00:08:35,710
You'll notice nothing is running there. And we could even do the normal

167
00:08:35,710 --> 00:08:40,240
docker client ps ‑a if we wanted, and there's nothing there.

168
00:08:40,240 --> 00:08:44,930
But if we go to docker images, you'll see that I still have my two images here.

169
00:08:44,930 --> 00:08:48,440
There's my mongo and there's my node image.

170
00:08:48,440 --> 00:08:52,290
So that's an example of how we can use Docker Compose to very

171
00:08:52,290 --> 00:08:57,070
easily, not only build, but also run our services and then

172
00:08:57,070 --> 00:08:59,040
take those down when we're done.

173
00:08:59,040 --> 00:09:02,280
And then if I wanted to set up volumes and all that kind of stuff,

174
00:09:02,280 --> 00:09:08,840
we certainly could. We'll see that coming up in the later demo in this module.

175
00:09:08,840 --> 00:09:10,540
Now before we wrap up this section,

176
00:09:10,540 --> 00:09:14,110
let me show you one more Docker Compose YAML file.

177
00:09:14,110 --> 00:09:18,340
Now this is for ASP.NET Core and PostgreSQL.

178
00:09:18,340 --> 00:09:19,070
Now again,

179
00:09:19,070 --> 00:09:23,950
I could come into our Dockerfile, and we could manually run the

180
00:09:23,950 --> 00:09:26,320
different commands that we looked at earlier in the course.

181
00:09:26,320 --> 00:09:29,770
But now I have my version, my services,

182
00:09:29,770 --> 00:09:33,510
and I have a web and a postgres. And you'll notice that for the

183
00:09:33,510 --> 00:09:36,500
web, it's very similar to what I just showed for node. We have a

184
00:09:36,500 --> 00:09:39,200
custom Dockerfile, we set the context,

185
00:09:39,200 --> 00:09:43,710
we give the ports, and we hook it into a bridge network. And for postgres,

186
00:09:43,710 --> 00:09:45,390
it's really close to the same thing.

187
00:09:45,390 --> 00:09:49,960
But you'll notice right here, I'm actually adding on environment variable value.

188
00:09:49,960 --> 00:09:53,640
Now this is something that the PostgreSQL image knows about.

189
00:09:53,640 --> 00:09:58,740
And so we did this manually earlier when we ran docker‑client run,

190
00:09:58,740 --> 00:10:02,850
we had to put this on the command line, And you could do that, but again,

191
00:10:02,850 --> 00:10:05,030
I don't really want to type that over and over and over or

192
00:10:05,030 --> 00:10:08,070
copy and paste over and over and over. So we just simply

193
00:10:08,070 --> 00:10:10,320
use this environment property.

194
00:10:10,320 --> 00:10:14,170
Now I can put in the different environment variables that I'd like to set,

195
00:10:14,170 --> 00:10:16,740
and you can certainly put more than one if you'd like.

196
00:10:16,740 --> 00:10:20,180
And then we link that into the same network, and we can

197
00:10:20,180 --> 00:10:23,400
call this from the ASP.NET Core container that'll be

198
00:10:23,400 --> 00:10:26,740
running based on this name right here.

199
00:10:26,740 --> 00:10:29,970
All right, so we can do the same exact thing now. If I just had grabbed this,

200
00:10:29,970 --> 00:10:30,260
which,

201
00:10:30,260 --> 00:10:32,710
actually I don't have this going as an image yet,

202
00:10:32,710 --> 00:10:35,490
then we can come into the folder, which I'm already in.

203
00:10:35,490 --> 00:10:37,840
We can say docker‑compose build.

204
00:10:37,840 --> 00:10:42,840
Now this will have to build the ASP.NET image, which will take a moment.

205
00:10:42,840 --> 00:10:46,500
And you can see there's a postgres image as well, which I already have locally.

206
00:10:46,500 --> 00:10:48,130
So now we're kind of ready to go.

207
00:10:48,130 --> 00:10:49,760
And if we do docker images,

208
00:10:49,760 --> 00:10:53,790
we should now see that we have the web one here for

209
00:10:53,790 --> 00:10:57,810
the aspnetcorepostgresqldockerapp.

210
00:10:57,810 --> 00:10:59,330
All right, so that's kind of the first step.

211
00:10:59,330 --> 00:11:06,140
Now we know we can do docker compose up. This should now start those up.

212
00:11:06,140 --> 00:11:11,840
Didn't do ‑d, But that's okay, in this case. There's all our logs for that.

213
00:11:11,840 --> 00:11:14,460
Now we can come back and hit port 5000.

214
00:11:14,460 --> 00:11:17,740
So let's go ahead and try that.

215
00:11:17,740 --> 00:11:23,060
Change that up. And we'll be off and running here, and this now hits it.

216
00:11:23,060 --> 00:11:24,930
And this one already seeded the database.

217
00:11:24,930 --> 00:11:28,400
So this one you can see is definitely working because it

218
00:11:28,400 --> 00:11:31,430
shows us the seed data that ASP.NET put in.

219
00:11:31,430 --> 00:11:32,600
And if I scroll up,

220
00:11:32,600 --> 00:11:35,220
you'll be able to see some of the SQL statements and things. Even

221
00:11:35,220 --> 00:11:38,310
the inserts for the seeding are shown here.

222
00:11:38,310 --> 00:11:45,470
So now we can break out of here, and I can say docker‑compose ps. There we go.

223
00:11:45,470 --> 00:11:46,390
They're both up.

224
00:11:46,390 --> 00:11:47,160
And then, of course,

225
00:11:47,160 --> 00:11:50,620
docker‑compose stop if I wanted. That would just stop them,

226
00:11:50,620 --> 00:11:54,050
but we're going to do down, and that'll actually stop them and

227
00:11:54,050 --> 00:11:55,940
remove them as we talked about.

228
00:11:55,940 --> 00:12:06,000
So that's an example of how you can get started with Docker Compose, with Node and Mongo and a YAML file and then ASP.NET Core and Postgres.

