WEBVTT
1
00:00:01.340 --> 00:00:01.840
In this section,

2
00:00:01.840 --> 00:00:04.480
we're going to take a look at how we can link a Node.js

3
00:00:04.480 --> 00:00:08.890
container to a MongoDB container and the Docker technology

4
00:00:08.890 --> 00:00:13.140
that makes this linking possible.

5
00:00:13.140 --> 00:00:16.990
So I've already loaded up a Node.js project that hits MongoDB.

6
00:00:16.990 --> 00:00:19.650
I'm just going to walk you through the fundamentals of what happens

7
00:00:19.650 --> 00:00:23.360
here to show you that we are, indeed, going to be inserting data into

8
00:00:23.360 --> 00:00:26.340
Mongo and then pulling that data back out.

9
00:00:26.340 --> 00:00:28.380
So first off, I have a config folder,

10
00:00:28.380 --> 00:00:32.720
and this just stores the connection string type of info, so I have the host

11
00:00:32.720 --> 00:00:36.650
and the database. And you'll notice this name, mongodb.

12
00:00:36.650 --> 00:00:38.630
Now, I didn't pull that out of thin air.

13
00:00:38.630 --> 00:00:42.210
That's actually what we're going to be naming the MongoDB container.

14
00:00:42.210 --> 00:00:45.040
So we'll come back to that in just a bit.

15
00:00:45.040 --> 00:00:47.950
Now, we're also going to be calling a dbSeeder,

16
00:00:47.950 --> 00:00:52.980
and that calls up into this dataSeeder, and you'll notice

17
00:00:52.980 --> 00:00:55.130
that we have some Docker commands here.

18
00:00:55.130 --> 00:00:55.260
Now,

19
00:00:55.260 --> 00:00:59.730
this is just a custom object I made in Node.js. It just has some custom

20
00:00:59.730 --> 00:01:02.840
properties that I'm going to insert. Could've picked anything.

21
00:01:02.840 --> 00:01:06.750
But I'm going to insert a Docker command, a description, and then some

22
00:01:06.750 --> 00:01:10.670
examples of using that command so we could kind of pretend this is like

23
00:01:10.670 --> 00:01:13.040
a help database or something like that.

24
00:01:13.040 --> 00:01:15.040
And then I'm going to save it here.

25
00:01:15.040 --> 00:01:18.160
And then I'll also create a Docker command, this time ps,

26
00:01:18.160 --> 00:01:20.300
and we'll run some examples of that.

27
00:01:20.300 --> 00:01:23.790
So it's just some basic sample data that we're going to insert into

28
00:01:23.790 --> 00:01:28.040
Mongo using the Node application that you see here.

29
00:01:28.040 --> 00:01:30.670
Alright, so that's kind of the fundamentals of the app itself,

30
00:01:30.670 --> 00:01:34.740
and it'll just write out those commands to the home page.

31
00:01:34.740 --> 00:01:38.640
Now, the next thing I'm going to show you is this node.dockerfile.

32
00:01:38.640 --> 00:01:42.130
The actual set of instructions that you see here shouldn't

33
00:01:42.130 --> 00:01:45.990
surprise you. We're going to copy the source code into a folder on

34
00:01:45.990 --> 00:01:50.670
the container, set that as the working directory, run npm install,

35
00:01:50.670 --> 00:01:52.540
and then start up the server.

36
00:01:52.540 --> 00:01:55.620
But you'll notice at the top here I have some instructions on

37
00:01:55.620 --> 00:01:59.800
how to link everything up, because we want to link again Node.js

38
00:01:59.800 --> 00:02:04.140
as a separate container to Mongo, which is its own container.

39
00:02:04.140 --> 00:02:06.900
So the first thing we're going to do is we need to convert this

40
00:02:06.900 --> 00:02:09.930
into an image, and so let's go ahead and do that.

41
00:02:09.930 --> 00:02:13.710
I'm just going to copy this down. And we'll pull this up and

42
00:02:13.710 --> 00:02:15.760
just paste that right in there and build it.

43
00:02:15.760 --> 00:02:20.740
Now, this should be cached, so it should be pretty fast to do.

44
00:02:20.740 --> 00:02:22.280
All right, so we're all done there.

45
00:02:22.280 --> 00:02:25.040
And if we do docker images,

46
00:02:25.040 --> 00:02:28.600
you'll notice that I have my custom image, I already have a node image,

47
00:02:28.600 --> 00:02:29.550
and there's mongo.

48
00:02:29.550 --> 00:02:31.340
So we're ready to go there.

49
00:02:31.340 --> 00:02:35.920
Now, the next thing we're going to do is we're going to run the Mongo image,

50
00:02:35.920 --> 00:02:39.910
but you'll notice that in the run, I'm running it first off in daemon mode,

51
00:02:39.910 --> 00:02:43.670
so in a background mode, but I'm also giving it a name,

52
00:02:43.670 --> 00:02:46.050
and we really haven't done that much up to this point.

53
00:02:46.050 --> 00:02:47.300
So let's see what that does.

54
00:02:47.300 --> 00:02:53.740
So I want to paste this down, and we'll get this mongo going.

55
00:02:53.740 --> 00:02:58.290
All right, so let's run docker ps, and you'll notice that it's up and running,

56
00:02:58.290 --> 00:03:01.900
but you'll notice the name here is now the name that I

57
00:03:01.900 --> 00:03:06.540
chose, as you'll see right up here.

58
00:03:06.540 --> 00:03:10.770
So the my‑mongodb, It could be useful in this case, if you just want to start

59
00:03:10.770 --> 00:03:16.100
and stop the container and don't really want to use the ID that we have, but

60
00:03:16.100 --> 00:03:19.700
it's also very useful as we want to link containers.

61
00:03:19.700 --> 00:03:22.940
And that's where we're really going to use the name here.

62
00:03:22.940 --> 00:03:26.700
So the next thing we're going to do, then, is we need to start up node as a

63
00:03:26.700 --> 00:03:32.640
container, but we want to link it into this my‑mongodb.

64
00:03:32.640 --> 00:03:39.300
So let's go ahead and paste this command in, and before we run it,

65
00:03:39.300 --> 00:03:40.400
let's talk about it real quick.

66
00:03:40.400 --> 00:03:44.390
So we'll do the standard docker run in daemon mode, external port of

67
00:03:44.390 --> 00:03:48.440
3000, internal port of 3000 for the container.

68
00:03:48.440 --> 00:03:53.180
But here's the magic. We're going to link to my‑mongodb,

69
00:03:53.180 --> 00:03:53.840
which, of course,

70
00:03:53.840 --> 00:03:57.360
is the name that we gave Mongo that you can see here,

71
00:03:57.360 --> 00:04:03.400
and I'm going to give it an alias, though, in the node container of mongodb.

72
00:04:03.400 --> 00:04:06.980
Now, remember, when it came to the connection string,

73
00:04:06.980 --> 00:04:10.450
if you will, MongoDB was used as the host name,

74
00:04:10.450 --> 00:04:12.790
not localhost or an IP in this case,

75
00:04:12.790 --> 00:04:16.740
the actual name that was assigned to the container.

76
00:04:16.740 --> 00:04:19.130
So that name now is really, really important.

77
00:04:19.130 --> 00:04:20.720
Now we didn't have to alias it.

78
00:04:20.720 --> 00:04:23.970
We could have just used this external name as well, but we're

79
00:04:23.970 --> 00:04:25.630
going to go ahead and go with that here.

80
00:04:25.630 --> 00:04:30.430
So let's start that up. We'll run docker ps, and now you can see that we have

81
00:04:30.430 --> 00:04:34.540
two containers up and running that are hopefully linked here.

82
00:04:34.540 --> 00:04:38.490
So let's run off to the browser, and I already have the IP address for

83
00:04:38.490 --> 00:04:42.550
my Virtual Box machine and that port that you just saw, so let's hit

84
00:04:42.550 --> 00:04:45.340
it. And it looks like it's running, but,

85
00:04:45.340 --> 00:04:46.650
you know, we didn't get any data yet,

86
00:04:46.650 --> 00:04:50.740
and that's expected because I didn't run the dbSeeder.

87
00:04:50.740 --> 00:04:54.760
So I need to run this dbSeeder now in the node container because that's

88
00:04:54.760 --> 00:04:58.640
not something I set up when the server.js fired up.

89
00:04:58.640 --> 00:05:01.530
So, I kind of did that on purpose so I could show you

90
00:05:01.530 --> 00:05:03.690
another Docker command that's very useful.

91
00:05:03.690 --> 00:05:05.940
It's called docker exec.

92
00:05:05.940 --> 00:05:09.940
This allows us to execute a command in a running container.

93
00:05:09.940 --> 00:05:14.240
I need to know the container, though, so let's do docker ps.

94
00:05:14.240 --> 00:05:16.870
Let's just go with d6 here, that would be a little easier,

95
00:05:16.870 --> 00:05:20.040
so I'm going to say docker exec.

96
00:05:20.040 --> 00:05:24.600
We want to execute this command in the d6 for the ID, and then I

97
00:05:24.600 --> 00:05:30.410
want to run node dbSeeder.js, and I have that set up so that you

98
00:05:30.410 --> 00:05:33.140
can run it directly as a module.

99
00:05:33.140 --> 00:05:36.400
And that should now insert some data into this MongoDB

100
00:05:36.400 --> 00:05:40.340
database, and there is the name of the database.

101
00:05:40.340 --> 00:05:44.940
So the server is MongoDB, the database is funWithDocker.

102
00:05:44.940 --> 00:05:46.800
All right, so we should have some data in there.

103
00:05:46.800 --> 00:05:51.640
Let's run on back and refresh, and this will now hit it, and there we go.

104
00:05:51.640 --> 00:05:55.580
So it looks like we now are able to pull that data that was inserted and

105
00:05:55.580 --> 00:05:58.840
were able to render it using express in this case.

106
00:05:58.840 --> 00:06:02.050
So, that's an example of some of the different commands

107
00:06:02.050 --> 00:06:05.670
that you can actually run to, first off,

108
00:06:05.670 --> 00:06:07.540
name a container,

109
00:06:07.540 --> 00:06:12.850
then reference that name using ‑‑link in this case, give it an alias,

110
00:06:12.850 --> 00:06:21.000
and then we can use that alias in the linked container, and that makes it really easy now for Node.js to call MongoDB.

