1
00:00:02,440 --> 00:00:07,140
Once you have your Dockerfile completed and all the instructions are in place,

2
00:00:07,140 --> 00:00:11,100
you're going to need to run that through the build process using Docker client,

3
00:00:11,100 --> 00:00:12,810
and that's what we're going to look at here.

4
00:00:12,810 --> 00:00:15,960
So how do we take that Dockerfile for Node.js and

5
00:00:15,960 --> 00:00:18,500
actually make it into an image?

6
00:00:18,500 --> 00:00:20,360
Well, it's actually a very simple process.

7
00:00:20,360 --> 00:00:24,540
Docker, the client, has a build command you can run,

8
00:00:24,540 --> 00:00:27,310
and then what you can do is tag that build,

9
00:00:27,310 --> 00:00:29,020
and you'll want to tag each build.

10
00:00:29,020 --> 00:00:35,640
Now you can do ‑‑tag, or the shortcut that you see here, which is just tag.

11
00:00:35,640 --> 00:00:38,840
I prefer the ‑t, it saves you a couple keystrokes.

12
00:00:38,840 --> 00:00:39,470
Now from there,

13
00:00:39,470 --> 00:00:43,210
you're going to go in and give your image that you're going to make a tag name.

14
00:00:43,210 --> 00:00:47,210
Now, if you go up online and look at all the node images,

15
00:00:47,210 --> 00:00:48,770
there's a whole bunch out there,

16
00:00:48,770 --> 00:00:52,940
lots of different versions because they're all tagged with the version.

17
00:00:52,940 --> 00:00:57,310
Now in this case, I'm just going to say whatever my username is /node,

18
00:00:57,310 --> 00:00:59,470
we're just going to say it's good enough for our team,

19
00:00:59,470 --> 00:01:04,140
but we could put more details there with version info if we wanted.

20
00:01:04,140 --> 00:01:06,640
And then finally, I'm going to give it to build context,

21
00:01:06,640 --> 00:01:08,670
which is going to be the folder where it's actually going to

22
00:01:08,670 --> 00:01:12,610
run this from that will help find the Dockerfile and do some

23
00:01:12,610 --> 00:01:16,140
other things along the way.

24
00:01:16,140 --> 00:01:18,810
So let's go ahead and do this with the image that we have.

25
00:01:18,810 --> 00:01:19,310
Now,

26
00:01:19,310 --> 00:01:23,340
the first thing I'm going to do is I want to get rid of my node_modules here.

27
00:01:23,340 --> 00:01:28,140
So I'm going to come in and use a little npm tool I use a lot called rimraf.

28
00:01:28,140 --> 00:01:31,240
So the first thing, I'm just going to right‑click and open in Terminal,

29
00:01:31,240 --> 00:01:35,640
and I'm going to use this rimraf, which is a delete module.

30
00:01:35,640 --> 00:01:40,020
And I want to show you that if I get rid of the modules here,

31
00:01:40,020 --> 00:01:44,080
that as we build the image, that it will take care of that for us.

32
00:01:44,080 --> 00:01:45,430
From here,

33
00:01:45,430 --> 00:01:48,100
we can go ahead and build our Dockerfile into an

34
00:01:48,100 --> 00:01:51,640
image using the docker build command.

35
00:01:51,640 --> 00:01:54,940
Now, I mentioned that you can do ‑t for the tag,

36
00:01:54,940 --> 00:01:58,020
but before we do that, notice that our name,

37
00:01:58,020 --> 00:01:59,130
again, is Dockerfile.

38
00:01:59,130 --> 00:02:02,840
And that's the default name that the docker build process looks for.

39
00:02:02,840 --> 00:02:05,140
But if you do have a different name for the file,

40
00:02:05,140 --> 00:02:09,930
it could be dockerfile.dev or node.dockerfile or something like that,

41
00:02:09,930 --> 00:02:14,270
then ‑f will be for the file name, and then I can put the name.

42
00:02:14,270 --> 00:02:17,550
Now in this case it's redundant because that's what it looks for anyway,

43
00:02:17,550 --> 00:02:20,420
but that's a nice one to know as you might have

44
00:02:20,420 --> 00:02:23,440
different file names for your Dockerfiles.

45
00:02:23,440 --> 00:02:26,510
Now I can do my tag, we'll give my Docker Hub ID,

46
00:02:26,510 --> 00:02:29,040
and we'll give it the name and then the context,

47
00:02:29,040 --> 00:02:32,340
the folder in which we're going to run this is dot.

48
00:02:32,340 --> 00:02:33,350
So let's go ahead and run it.

49
00:02:33,350 --> 00:02:36,300
Now I already have the node image, just as a heads up,

50
00:02:36,300 --> 00:02:38,660
already installed locally as a Docker image,

51
00:02:38,660 --> 00:02:41,940
so I did that on purpose to speed this process up.

52
00:02:41,940 --> 00:02:44,920
So aside from the npm install, which it's doing right now,

53
00:02:44,920 --> 00:02:47,840
this should go really, really fast.

54
00:02:47,840 --> 00:02:48,910
But once this is done,

55
00:02:48,910 --> 00:02:51,920
I'm going to show a couple things here that relate to

56
00:02:51,920 --> 00:02:54,640
something called intermediate containers.

57
00:02:54,640 --> 00:02:56,060
All right, so we're all done.

58
00:02:56,060 --> 00:03:01,650
And if we do docker images, you'll see my danwahlin node,

59
00:03:01,650 --> 00:03:04,570
and then there's my node base image that it's based upon.

60
00:03:04,570 --> 00:03:08,650
But notice that every single instruction generated

61
00:03:08,650 --> 00:03:11,840
what's called an intermediate container.

62
00:03:11,840 --> 00:03:17,440
And if I go way up to the top, and let me just slide quickly back up,

63
00:03:17,440 --> 00:03:21,050
even the environment instructions each generated their

64
00:03:21,050 --> 00:03:23,160
own separate intermediate container.

65
00:03:23,160 --> 00:03:25,020
Now, what happens is these containers,

66
00:03:25,020 --> 00:03:28,440
they won't show up in your Docker images when you run that,

67
00:03:28,440 --> 00:03:33,840
but they will be cached behind the scenes so that the next time I do a build,

68
00:03:33,840 --> 00:03:36,300
if this instruction, such as the environment one,

69
00:03:36,300 --> 00:03:39,600
doesn't change, then the build process can just say,

70
00:03:39,600 --> 00:03:41,690
hey, I've already seen that before.

71
00:03:41,690 --> 00:03:45,030
Let me just go load the layered file system layer and

72
00:03:45,030 --> 00:03:46,670
just include that in the build.

73
00:03:46,670 --> 00:03:48,690
So it's very much like source control.

74
00:03:48,690 --> 00:03:51,510
Every time you check in a small little thing in source control,

75
00:03:51,510 --> 00:03:53,470
it tracks it incrementally.

76
00:03:53,470 --> 00:03:56,940
That's exactly what happens with Docker instructions.

77
00:03:56,940 --> 00:03:59,590
Now in the case of our environments, I could have put,

78
00:03:59,590 --> 00:04:03,710
because I used the equals, if we go back to here,

79
00:04:03,710 --> 00:04:07,310
I could have put the port equals 3000 right next to this one up on top,

80
00:04:07,310 --> 00:04:09,140
and I mentioned that earlier,

81
00:04:09,140 --> 00:04:12,540
and that would have just done one intermediate container,

82
00:04:12,540 --> 00:04:14,560
but because I ran them as a separate instruction,

83
00:04:14,560 --> 00:04:18,140
it has to do two lookups, and so those are very quick lookups,

84
00:04:18,140 --> 00:04:19,160
not a big deal,

85
00:04:19,160 --> 00:04:22,570
but it's important to know that every instruction leads to

86
00:04:22,570 --> 00:04:25,570
an intermediate container being created that's ultimately

87
00:04:25,570 --> 00:04:27,840
cached behind the scenes.

88
00:04:27,840 --> 00:04:29,620
All right, now that we have that done,

89
00:04:29,620 --> 00:04:33,440
let's go ahead and try to do the run process.

90
00:04:33,440 --> 00:04:35,240
I'm going to do a docker run,

91
00:04:35,240 --> 00:04:38,260
I'm going to run this in something we haven't seen much up to this point,

92
00:04:38,260 --> 00:04:39,700
in a daemon mode,

93
00:04:39,700 --> 00:04:42,630
that way the output of running the container won't

94
00:04:42,630 --> 00:04:43,890
actually show up in the console.

95
00:04:43,890 --> 00:04:45,440
It will run behind the scenes,

96
00:04:45,440 --> 00:04:48,940
and then I can do other things with the console if I want.

97
00:04:48,940 --> 00:04:54,410
So we're going to do the port, we'll do 8080:3000, and then we'll put the

98
00:04:54,410 --> 00:05:01,310
name of the image, and let's run off to the location.

99
00:05:01,310 --> 00:05:04,690
And this will be 99.100:8080.

100
00:05:04,690 --> 00:05:07,840
You see it right there. All right, and it looks good.

101
00:05:07,840 --> 00:05:11,310
This is showing that the source code we copied in that we did previously

102
00:05:11,310 --> 00:05:14,940
in the course is actually being used in the container.

103
00:05:14,940 --> 00:05:19,440
That's an example of how we can work with our Docker files,

104
00:05:19,440 --> 00:05:26,000
use some of the different instructions, and then use the Docker client commands like build and run.

