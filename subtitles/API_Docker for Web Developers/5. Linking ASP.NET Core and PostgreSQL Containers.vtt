WEBVTT
1
00:00:01.340 --> 00:00:04.580
Earlier, we saw how we can link Node.js to MongoDB.

2
00:00:04.580 --> 00:00:05.870
In this section,

3
00:00:05.870 --> 00:00:11.740
we're going to talk about how we can link up ASP.NET Core to PostgreSQL.

4
00:00:11.740 --> 00:00:14.940
So to get started, I have an ASP.NET Core application.

5
00:00:14.940 --> 00:00:18.740
It's an MVC app, and it uses Entity Framework Core.

6
00:00:18.740 --> 00:00:21.940
Now, one of the first things it has is a DbSeeder.

7
00:00:21.940 --> 00:00:23.420
And so if I come into here,

8
00:00:23.420 --> 00:00:27.190
you're going to notice that I seed it with the Docker commands, if I scroll on

9
00:00:27.190 --> 00:00:31.170
down that you saw a little bit earlier with the Node.js example. We're just

10
00:00:31.170 --> 00:00:34.240
going to use some different containers this time.

11
00:00:34.240 --> 00:00:37.700
Now, in addition to that, it has our DB context for this.

12
00:00:37.700 --> 00:00:41.540
So you'll notice we have a DockerCommandsDbContext.

13
00:00:41.540 --> 00:00:44.350
And this is pretty standard stuff, very basic.

14
00:00:44.350 --> 00:00:47.710
It just has a collection of DockerCommands that are

15
00:00:47.710 --> 00:00:51.440
going to be seeded into the database.

16
00:00:51.440 --> 00:00:54.140
And then if we go into our Startup file,

17
00:00:54.140 --> 00:00:57.460
you'll notice that we add Entity Framework support, and this is the extension

18
00:00:57.460 --> 00:01:02.080
method right here for calling into PostgreSQL. Now moving on down at the very

19
00:01:02.080 --> 00:01:06.400
bottom, you're also going to see at the very bottom of the middleware that here

20
00:01:06.400 --> 00:01:08.970
is the dockerCommandsDbSeeder, and then,

21
00:01:08.970 --> 00:01:11.080
although I'm not going to go into it much here,

22
00:01:11.080 --> 00:01:13.440
this also has a single page application,

23
00:01:13.440 --> 00:01:18.040
a spot application available as well, and it shows customers.

24
00:01:18.040 --> 00:01:22.380
So there's what we're doing the seeding, and that's the general flow of the app,

25
00:01:22.380 --> 00:01:26.130
if you will. Now to get started using it, we can go to

26
00:01:26.130 --> 00:01:30.310
aspnetcore.dockerfile. And this is pretty standard based on what we've seen.

27
00:01:30.310 --> 00:01:35.040
We have our mcr.microsoft.com/dotnet/core/sdk.

28
00:01:35.040 --> 00:01:38.760
We have the label, environment variable for the port we want to

29
00:01:38.760 --> 00:01:42.050
use, our working directory. We're going to copy all the code in,

30
00:01:42.050 --> 00:01:45.730
this is a real simple example, to the Working Directory folder.

31
00:01:45.730 --> 00:01:48.190
Expose that port, and then, in this case,

32
00:01:48.190 --> 00:01:49.970
because it's an SDK image,

33
00:01:49.970 --> 00:01:53.030
we're going to do a .NET restore and a .NET run. So

34
00:01:53.030 --> 00:01:54.880
this wouldn't be used for production, of course,

35
00:01:54.880 --> 00:01:58.930
but it's a nice and easy way to quickly build this. Now at the

36
00:01:58.930 --> 00:02:03.200
bottom, I put some comments here for running this particular demo.

37
00:02:03.200 --> 00:02:07.140
Legacy linking, just to reiterate, is, well,

38
00:02:07.140 --> 00:02:08.050
it's Legacy.

39
00:02:08.050 --> 00:02:09.980
That's why they call it Legacy linking.

40
00:02:09.980 --> 00:02:12.680
And so while it's older, you may come across it,

41
00:02:12.680 --> 00:02:13.010
though,

42
00:02:13.010 --> 00:02:15.920
and you may even have a scenario at work where you have to use it,

43
00:02:15.920 --> 00:02:18.740
potentially, because that might be how it was set up.

44
00:02:18.740 --> 00:02:20.720
That's really the reason we're covering this.

45
00:02:20.720 --> 00:02:24.070
Although what I'm going to show you here isn't necessarily

46
00:02:24.070 --> 00:02:26.700
the preferred way these days, that'll be coming up next

47
00:02:26.700 --> 00:02:30.300
when we talk about networks, it is viable,

48
00:02:30.300 --> 00:02:33.050
and it does work, and you could do it with ASP.NET Core.

49
00:02:33.050 --> 00:02:36.540
So, the first thing I'm going to do is just a standard build.

50
00:02:36.540 --> 00:02:39.740
Let's go ahead and do that right here.

51
00:02:39.740 --> 00:02:42.650
And I've already run this, so it'll be superfast, you'll see.

52
00:02:42.650 --> 00:02:46.730
Now the next thing is I'm going to start up my PostgreSQL image,

53
00:02:46.730 --> 00:02:49.320
and we're going to pull that down, which I already have,

54
00:02:49.320 --> 00:02:50.940
and then we're going to run it.

55
00:02:50.940 --> 00:02:53.760
But notice that I'm giving it a name of my‑postgres.

56
00:02:53.760 --> 00:02:56.430
Now, it could be anything again.

57
00:02:56.430 --> 00:03:00.140
We could just call it postgres, for example, if we wanted.

58
00:03:00.140 --> 00:03:03.840
But down below, you're going to see where I link to it.

59
00:03:03.840 --> 00:03:05.340
I'm going to alias that.

60
00:03:05.340 --> 00:03:05.570
Okay,

61
00:03:05.570 --> 00:03:10.670
so postgres is actually what we want to call, but my linking name is going

62
00:03:10.670 --> 00:03:14.540
to be my‑postgres because it's based on the name up here.

63
00:03:14.540 --> 00:03:16.780
Now I want to emphasize you don't have to do that,

64
00:03:16.780 --> 00:03:19.260
but you may come across this, and then you'll know why

65
00:03:19.260 --> 00:03:21.000
there's a colon between these two.

66
00:03:21.000 --> 00:03:26.440
It's really just mapping kind of an alias, a name to the actual target.

67
00:03:26.440 --> 00:03:29.200
Now the other thing we do is we add an environment variable.

68
00:03:29.200 --> 00:03:32.540
And in this case, I'm just setting the password of the database.

69
00:03:32.540 --> 00:03:35.110
Please don't use password, by the way, for real,

70
00:03:35.110 --> 00:03:39.040
but for the demo it's fine. And this will actually pass

71
00:03:39.040 --> 00:03:41.960
that to the startup of the container.

72
00:03:41.960 --> 00:03:43.600
So when the database first comes up,

73
00:03:43.600 --> 00:03:47.140
it will read this and actually use it as the password.

74
00:03:47.140 --> 00:03:48.800
Now the rest of this you've already seen,

75
00:03:48.800 --> 00:03:51.640
you'll see a docker run in detached mode, port

76
00:03:51.640 --> 00:03:54.920
external is 5000, internal is 5000.

77
00:03:54.920 --> 00:03:56.250
And then here's our linking,

78
00:03:56.250 --> 00:03:59.710
which is really the core of what we're talking about here.

79
00:03:59.710 --> 00:04:02.040
And then there's the image I just built.

80
00:04:02.040 --> 00:04:08.740
So, first thing I'll do is let's get this running, our PostgreSQL.

81
00:04:08.740 --> 00:04:11.040
All right, so that should be started up.

82
00:04:11.040 --> 00:04:15.910
Now let's get our aspnetcore, and that started up.

83
00:04:15.910 --> 00:04:19.740
Now let me clear this and we'll do a docker ps.

84
00:04:19.740 --> 00:04:22.740
All right, so you'll notice both are up.

85
00:04:22.740 --> 00:04:25.710
Here's our aspnetcore, here's our postgres.

86
00:04:25.710 --> 00:04:26.870
Now, look at the names here.

87
00:04:26.870 --> 00:04:29.730
They gave it a name because I didn't name the aspnetcore

88
00:04:29.730 --> 00:04:32.670
container, and they gave it angry_franklin.

89
00:04:32.670 --> 00:04:36.040
They come up with these really bizarre, random names.

90
00:04:36.040 --> 00:04:41.030
But here's our name, my‑postgres. Now, what's important here,

91
00:04:41.030 --> 00:04:44.870
though, is if we go into our connection string settings.

92
00:04:44.870 --> 00:04:48.240
So if I come on in to appsettings here,

93
00:04:48.240 --> 00:04:51.580
come on down to our DockerCommandsConnectionString,

94
00:04:51.580 --> 00:04:57.740
notice that the server is postgres; not my‑postgres, postgres.

95
00:04:57.740 --> 00:04:57.930
Now,

96
00:04:57.930 --> 00:05:00.220
that's why we did the alias because we named the

97
00:05:00.220 --> 00:05:03.310
container my‑postgres, but in reality,

98
00:05:03.310 --> 00:05:06.060
we want to call the postgres that's actually

99
00:05:06.060 --> 00:05:12.200
running behind the scenes here. Now, since both these are linked up and running,

100
00:05:12.200 --> 00:05:16.200
let's run off to the browser now. So I'm going to go to localhost 5000.

101
00:05:16.200 --> 00:05:16.330
Now,

102
00:05:16.330 --> 00:05:19.030
this is going to load a single page app I mentioned

103
00:05:19.030 --> 00:05:21.240
earlier that shows customers,

104
00:05:21.240 --> 00:05:24.620
but I'll leave this and go to the Docker commands. And

105
00:05:24.620 --> 00:05:27.440
there we go. So you could see it worked.

106
00:05:27.440 --> 00:05:30.220
It seeded the database with these Docker commands,

107
00:05:30.220 --> 00:05:35.210
and then it linked those two containers together so that first off,

108
00:05:35.210 --> 00:05:39.040
it knows that the PostgreSQL container needs to start first,

109
00:05:39.040 --> 00:05:40.940
then ASP.NET Core.

110
00:05:40.940 --> 00:05:43.960
Now as a heads up, it's not going to wait.

111
00:05:43.960 --> 00:05:47.790
There's no way for Docker to know when Postgres or Mongo or any of

112
00:05:47.790 --> 00:05:51.740
these especially databases are finished loading.

113
00:05:51.740 --> 00:05:54.520
So if you ever do have code that has to seed,

114
00:05:54.520 --> 00:05:58.630
maybe lookup table data, for example, you might call,

115
00:05:58.630 --> 00:06:01.490
and it fails because the database hasn't finished loading

116
00:06:01.490 --> 00:06:05.050
in the container yet. All linking does is make sure that

117
00:06:05.050 --> 00:06:06.880
they start in the proper order.

118
00:06:06.880 --> 00:06:09.540
It doesn't guarantee the database is done,

119
00:06:09.540 --> 00:06:10.340
though,

120
00:06:10.340 --> 00:06:12.620
so that's something to be aware of, and that means you might

121
00:06:12.620 --> 00:06:16.290
have to have some try catch type code and some retries if

122
00:06:16.290 --> 00:06:20.040
you're ever seeding something, especially in development.

123
00:06:20.040 --> 00:06:24.350
So that's an example of how we could do linking with ASP.NET Core and Postgres.

124
00:06:24.350 --> 00:06:29.440
You can see it's very similar to what we did earlier with Node and MongoDB.

125
00:06:29.440 --> 00:06:35.000
So from here, let's move on to the more modern way to do this, and that's going to be networks.

