WEBVTT
1
00:00:00.840 --> 00:00:03.540
Let's take a look at some of the commands we can issue.

2
00:00:03.540 --> 00:00:06.540
So the first thing I'm going to do is just type the word docker.

3
00:00:06.540 --> 00:00:09.230
And if I just hit enter or return here,

4
00:00:09.230 --> 00:00:11.620
this is going to show all the different commands.

5
00:00:11.620 --> 00:00:13.950
And you'll notice there's quite a few commands.

6
00:00:13.950 --> 00:00:15.490
Now we're only going to focus on just the

7
00:00:15.490 --> 00:00:20.550
essentials that we need to get started, but those are the command you can use.

8
00:00:20.550 --> 00:00:23.900
And there's a lot you can do with images and containers

9
00:00:23.900 --> 00:00:26.240
and a bunch of other stuff as well.

10
00:00:26.240 --> 00:00:30.840
Now from here, let's learn how we can pull an image off of Docker Hub.

11
00:00:30.840 --> 00:00:33.170
And we talked about Docker Hub a little bit earlier,

12
00:00:33.170 --> 00:00:36.560
and if you go to hub.docker.com, you can get to it.

13
00:00:36.560 --> 00:00:39.550
Now you can certainly log in and create an account and all that.

14
00:00:39.550 --> 00:00:43.840
But if we just come up to the search, I'm going to type hello‑world,

15
00:00:43.840 --> 00:00:46.840
and this'll pull up the hello‑world image.

16
00:00:46.840 --> 00:00:48.660
And we'll click on it,

17
00:00:48.660 --> 00:00:52.700
and you'll notice there's this Docker client pull command that we can issue.

18
00:00:52.700 --> 00:00:55.560
So I can actually just copy that from here,

19
00:00:55.560 --> 00:00:58.640
get information if I'd like to read up on it.

20
00:00:58.640 --> 00:01:02.030
But we'll go on back, and I can just paste this in.

21
00:01:02.030 --> 00:01:07.440
So let me clear this and we'll just paste docker pull and the name of the image.

22
00:01:07.440 --> 00:01:10.150
Now this is going to pull down the layered file system,

23
00:01:10.150 --> 00:01:12.540
it's called This is the actual image itself,

24
00:01:12.540 --> 00:01:14.440
very small, you can see.

25
00:01:14.440 --> 00:01:16.960
And so now I have this image locally.

26
00:01:16.960 --> 00:01:18.820
But how do we know if it's really there?

27
00:01:18.820 --> 00:01:19.910
Did it work?

28
00:01:19.910 --> 00:01:23.610
Well, the second command we're going to look at for Docker client is,

29
00:01:23.610 --> 00:01:26.000
we can type the Docker client tool again,

30
00:01:26.000 --> 00:01:28.440
and now I can say images.

31
00:01:28.440 --> 00:01:32.840
And what this'll do is list all the images that I have installed.

32
00:01:32.840 --> 00:01:35.300
And it looks like we now have one image.

33
00:01:35.300 --> 00:01:37.540
Let me make this just a little bit bigger.

34
00:01:37.540 --> 00:01:40.190
You can see it's hello‑world, we have the latest,

35
00:01:40.190 --> 00:01:45.970
it assigns a unique ID to it, and it looks like it was created 11 weeks ago,

36
00:01:45.970 --> 00:01:49.040
and it's very small, 960 bytes.

37
00:01:49.040 --> 00:01:53.940
Now that's how easy it is to first off pull an image off of Docker Hub

38
00:01:53.940 --> 00:01:57.940
and then actually see what images do we actually have?

39
00:01:57.940 --> 00:02:01.520
Now I mentioned a couple times, an image on its own is not

40
00:02:01.520 --> 00:02:05.850
ultimately that useful because we need to take that image and

41
00:02:05.850 --> 00:02:08.340
actually get a running container.

42
00:02:08.340 --> 00:02:10.820
And so what we can do from here is,

43
00:02:10.820 --> 00:02:15.140
we can say docker run and then we can give the name of the image.

44
00:02:15.140 --> 00:02:17.740
We're going to do hello‑world.

45
00:02:17.740 --> 00:02:21.820
And this will now run the hello‑world image as a container,

46
00:02:21.820 --> 00:02:24.280
and you can see all of this output.

47
00:02:24.280 --> 00:02:27.230
And if you see this Hello Docker, then you did good.

48
00:02:27.230 --> 00:02:28.440
It worked.

49
00:02:28.440 --> 00:02:31.520
And so we now have a hello‑world container.

50
00:02:31.520 --> 00:02:34.040
So we have an image that's sitting there.

51
00:02:34.040 --> 00:02:38.620
We've now taken that image and made an instance of the container that's now,

52
00:02:38.620 --> 00:02:41.140
it ran and then it actually stopped.

53
00:02:41.140 --> 00:02:44.480
And so how do you know what containers that you have

54
00:02:44.480 --> 00:02:47.760
available? So I can come in and type docker ps,

55
00:02:47.760 --> 00:02:49.840
but let's see what we get here.

56
00:02:49.840 --> 00:02:53.560
You'll notice nothing shows up, which I know the first time I saw this,

57
00:02:53.560 --> 00:02:57.390
was a little bit confusing because I knew I had a container because

58
00:02:57.390 --> 00:03:01.640
that's what the run command that we looked up here does.

59
00:03:01.640 --> 00:03:03.160
So what's going on?

60
00:03:03.160 --> 00:03:10.240
Well, docker ps, this command, only shows the running containers.

61
00:03:10.240 --> 00:03:11.950
So how do we see all containers?

62
00:03:11.950 --> 00:03:17.630
Well, we do ‑a, and that will tell the Docker client ps command,

63
00:03:17.630 --> 00:03:19.390
I would like to list all containers.

64
00:03:19.390 --> 00:03:20.420
And there we go.

65
00:03:20.420 --> 00:03:26.260
So now we have the container ID, we have the image that was used for it,

66
00:03:26.260 --> 00:03:28.580
we have, it's kind of wrapping here,

67
00:03:28.580 --> 00:03:31.310
this is a sort of friendly name it comes up with if

68
00:03:31.310 --> 00:03:35.620
you don't want to refer to this guy, we created about a minute ago,

69
00:03:35.620 --> 00:03:38.140
and the status is it's Exited.

70
00:03:38.140 --> 00:03:42.700
So this particular container right now is not up and running because this

71
00:03:42.700 --> 00:03:45.990
container just outputs this log data you see up here,

72
00:03:45.990 --> 00:03:48.440
and then it kind of stops.

73
00:03:48.440 --> 00:03:52.920
So that's a really important little add‑on to the ps command

74
00:03:52.920 --> 00:03:56.780
for a command line switch to do docker ps ‑a.

75
00:03:56.780 --> 00:04:01.040
Because again, if you don't do that, you're not going to see it in this case.

76
00:04:01.040 --> 00:04:04.160
Now, that's not that useful of an image or a container,

77
00:04:04.160 --> 00:04:05.950
so how do we get rid of these now?

78
00:04:05.950 --> 00:04:09.930
That's great, we see it works, but now I'll probably never, ever use it again.

79
00:04:09.930 --> 00:04:11.990
So what I'm going to do is,

80
00:04:11.990 --> 00:04:16.120
I'm going to come in and say remove and that's remove container.

81
00:04:16.120 --> 00:04:19.810
And then we have the container ID right here.

82
00:04:19.810 --> 00:04:21.300
And then we also have a little alias,

83
00:04:21.300 --> 00:04:24.600
but I just normally type the first few characters.

84
00:04:24.600 --> 00:04:30.520
So I'm going to do 59f. So we'll do 59f, I'm going to hit Enter.

85
00:04:30.520 --> 00:04:35.420
Now When I do docker ps ‑a, you'll notice I don't have any containers left,

86
00:04:35.420 --> 00:04:37.140
so we deleted it.

87
00:04:37.140 --> 00:04:38.910
Now what about the images?

88
00:04:38.910 --> 00:04:40.260
Let me get do a clear here.

89
00:04:40.260 --> 00:04:42.940
Well, let's do docker images again.

90
00:04:42.940 --> 00:04:44.240
Okay, It's still there.

91
00:04:44.240 --> 00:04:47.240
We deleted the container, but we didn't get rid of the image.

92
00:04:47.240 --> 00:04:49.590
So it's really similar to what we just did.

93
00:04:49.590 --> 00:04:52.680
Its Docker rmi, and then, again,

94
00:04:52.680 --> 00:04:55.940
we can take the image ID and just do the first few.

95
00:04:55.940 --> 00:04:57.340
So in this one sense there's only one.

96
00:04:57.340 --> 00:04:59.540
I'm just going to do 0a.

97
00:04:59.540 --> 00:05:00.750
And there we go.

98
00:05:00.750 --> 00:05:06.140
It just deleted the layered file system for that particular image.

99
00:05:06.140 --> 00:05:10.720
So that's an example of how easy it is to use the Docker client

100
00:05:10.720 --> 00:05:14.750
command line tools to get started with pulling an image,

101
00:05:14.750 --> 00:05:16.210
viewing images,

102
00:05:16.210 --> 00:05:21.840
and then taking those images and converting them into running containers.

103
00:05:21.840 --> 00:05:25.440
So now that we've seen the basic commands for Docker client,

104
00:05:25.440 --> 00:05:28.000
let's pull down the Nginx image that I showed,

105
00:05:28.000 --> 00:05:30.730
if you watched the Kitematic demo earlier in the course,

106
00:05:30.730 --> 00:05:34.140
and see how we can get that actually running as well.

107
00:05:34.140 --> 00:05:37.370
So if we go back up to Docker Hub and go to hello‑world

108
00:05:37.370 --> 00:05:39.790
and I'll just kind of research on this.

109
00:05:39.790 --> 00:05:40.680
We'll hit Enter there.

110
00:05:40.680 --> 00:05:43.820
And you'll notice that there's quite a bit of things we can do.

111
00:05:43.820 --> 00:05:45.780
There's a tutum hello‑world.

112
00:05:45.780 --> 00:05:48.030
There's also a Kitematic one down here.

113
00:05:48.030 --> 00:05:50.280
It looks like I'm not finding it immediately,

114
00:05:50.280 --> 00:05:55.140
so we could actually search for Kitematic.

115
00:05:55.140 --> 00:05:58.440
And there it is right there, so let's click on that.

116
00:05:58.440 --> 00:06:00.480
And just to save a little bit of typing,

117
00:06:00.480 --> 00:06:04.520
I'm going to go ahead and grab this pull command and just paste this

118
00:06:04.520 --> 00:06:08.640
again into my Docker client terminal that we have here.

119
00:06:08.640 --> 00:06:12.360
So we'll pace that in, and now this image will have a little bit more to it.

120
00:06:12.360 --> 00:06:13.900
It's bigger than the last one,

121
00:06:13.900 --> 00:06:16.280
so it'll take a moment to download but It's pretty quick,

122
00:06:16.280 --> 00:06:17.220
and there we go.

123
00:06:17.220 --> 00:06:18.440
We have it.

124
00:06:18.440 --> 00:06:19.940
So there's docker pull again.

125
00:06:19.940 --> 00:06:22.540
Now we can do docker images.

126
00:06:22.540 --> 00:06:23.320
There it is.

127
00:06:23.320 --> 00:06:25.790
So there's our Kitematic, it's the latest,

128
00:06:25.790 --> 00:06:29.030
there's the unique ID it gives it, and it's about 6 months old,

129
00:06:29.030 --> 00:06:30.540
it looks like.

130
00:06:30.540 --> 00:06:34.780
So now we can actually start this image up and get it running.

131
00:06:34.780 --> 00:06:36.890
And to do that we can, again,

132
00:06:36.890 --> 00:06:43.610
do docker run and then give the actual name over here that we have of the image.

133
00:06:43.610 --> 00:06:46.340
So I'm just going to copy that and paste it in.

134
00:06:46.340 --> 00:06:52.130
Now this particular image, though, has a port that we need to set.

135
00:06:52.130 --> 00:06:55.300
And so you can kind of think of it this way.

136
00:06:55.300 --> 00:06:58.320
The image is going to become a running container.

137
00:06:58.320 --> 00:07:04.840
Now ultimately what we have is a machine that hosts the container.

138
00:07:04.840 --> 00:07:06.880
Well, the machine, as a port we're going to hit,

139
00:07:06.880 --> 00:07:09.340
because you'll notice I already have an IP address

140
00:07:09.340 --> 00:07:12.040
up here typed for the machine.

141
00:07:12.040 --> 00:07:16.440
But we can also set the port the we're going to call on that machine.

142
00:07:16.440 --> 00:07:18.550
Now when that gets called,

143
00:07:18.550 --> 00:07:22.680
it's then going to call into the appropriate container, in this case,

144
00:07:22.680 --> 00:07:27.440
the Nginx container, which is a reverse proxy type of tool.

145
00:07:27.440 --> 00:07:30.940
We can also set a port inside of the Nginx.

146
00:07:30.940 --> 00:07:31.400
Now,

147
00:07:31.400 --> 00:07:36.620
normally Nginx is kind of a front‑end server that'll serve up static files and

148
00:07:36.620 --> 00:07:41.280
forward more complex requests to back‑end servers, ASP.NET,

149
00:07:41.280 --> 00:07:43.040
Node.js, and others.

150
00:07:43.040 --> 00:07:47.940
And so normally, it's on port 80, if it's a kind of a public‑facing website.

151
00:07:47.940 --> 00:07:50.450
So what I'm going to do is come into here,

152
00:07:50.450 --> 00:07:54.040
and we're going to use a command line switch on run.

153
00:07:54.040 --> 00:07:57.540
And I'm going to say that I would like to run this image but I

154
00:07:57.540 --> 00:08:02.220
want to run it on port 80 for the machine,

155
00:08:02.220 --> 00:08:09.240
and that's going to forward internally to port 80 in the container itself.

156
00:08:09.240 --> 00:08:09.570
Now,

157
00:08:09.570 --> 00:08:12.620
this is a really important one because we need to set what is

158
00:08:12.620 --> 00:08:16.250
the port we're going to call on our actual machine and then

159
00:08:16.250 --> 00:08:19.440
what's it going to call on this container that's going to get

160
00:08:19.440 --> 00:08:22.020
created based on this image?

161
00:08:22.020 --> 00:08:24.240
So let me go ahead and just hit return here,

162
00:08:24.240 --> 00:08:29.420
Enter, and you'll notice this now started up my Nginx container,

163
00:08:29.420 --> 00:08:30.440
in this case.

164
00:08:30.440 --> 00:08:33.340
It converted from the image into the container.

165
00:08:33.340 --> 00:08:38.640
So I'm going to come up here, and now if I hit the IP address for my machine,

166
00:08:38.640 --> 00:08:42.440
we should see an Nginx output here, and there we go.

167
00:08:42.440 --> 00:08:45.310
Now, this looks very, very similar to what we saw earlier,

168
00:08:45.310 --> 00:08:47.440
if you watched the Kitematic demo, again,

169
00:08:47.440 --> 00:08:49.960
because it's the same exact image.

170
00:08:49.960 --> 00:08:54.630
It's just that we're now using the terminal here to actually

171
00:08:54.630 --> 00:08:58.640
work with this particular image and container.

172
00:08:58.640 --> 00:09:00.890
What I'm going to do from here is,

173
00:09:00.890 --> 00:09:05.860
I can actually just start up a new kind of Bash tab here and I'm going to

174
00:09:05.860 --> 00:09:10.370
go into the docker ps command that I showed you earlier.

175
00:09:10.370 --> 00:09:12.810
And you'll notice that right off the bat,

176
00:09:12.810 --> 00:09:15.840
because I didn't click on a Quickstart terminal,

177
00:09:15.840 --> 00:09:18.340
I get this Cannot connect to Docker daemon.

178
00:09:18.340 --> 00:09:19.750
Now, one way around this is,

179
00:09:19.750 --> 00:09:22.010
I can close it and just open up a different Quickstart.

180
00:09:22.010 --> 00:09:24.540
But let's go ahead and use what we learned earlier.

181
00:09:24.540 --> 00:09:29.940
I'm going to do docker‑machine env, default is my machine,

182
00:09:29.940 --> 00:09:32.840
and then I'm going to run this eval command.

183
00:09:32.840 --> 00:09:36.140
Okay, so now let me try docker ps.

184
00:09:36.140 --> 00:09:37.270
All right, now it works.

185
00:09:37.270 --> 00:09:42.940
And you'll notice this command terminal is now tied to my default machine.

186
00:09:42.940 --> 00:09:44.830
And again, I didn't have to do that.

187
00:09:44.830 --> 00:09:47.670
I could've just clicked on the Docker Quickstart terminal here.

188
00:09:47.670 --> 00:09:49.000
But that's a nice little thing.

189
00:09:49.000 --> 00:09:49.990
So here we go.

190
00:09:49.990 --> 00:09:53.960
We have the container ID, here's the image it's based on,

191
00:09:53.960 --> 00:09:56.530
there's a little start.sh script that's run,

192
00:09:56.530 --> 00:10:01.430
we started about a minute ago, and it looks like the status is up.

193
00:10:01.430 --> 00:10:03.140
It's wrapping a little bit there,

194
00:10:03.140 --> 00:10:07.260
but you'll notice status is up for about a minute or so,

195
00:10:07.260 --> 00:10:08.560
it looks like.

196
00:10:08.560 --> 00:10:12.540
Now, we can come into here and we can say docker stop,

197
00:10:12.540 --> 00:10:16.740
and then we can actually list just a few of the digits here.

198
00:10:16.740 --> 00:10:21.640
So I can just say docker stop 109.

199
00:10:21.640 --> 00:10:25.870
And now this is going to go in and try to stop that particular running

200
00:10:25.870 --> 00:10:30.740
container that we have going over in this tab right here.

201
00:10:30.740 --> 00:10:32.710
And so we'll let this run just for a sec.

202
00:10:32.710 --> 00:10:34.600
Okay, there we go.

203
00:10:34.600 --> 00:10:38.700
Now let's do docker ps, and if it's stopped, it shouldn't show it.

204
00:10:38.700 --> 00:10:39.800
All right, and it's empty.

205
00:10:39.800 --> 00:10:43.440
So now we'll do docker ps ‑a, and there it is,

206
00:10:43.440 --> 00:10:46.560
but you'll notice that the status is Exited.

207
00:10:46.560 --> 00:10:48.760
So that's how easy it is to pull that down,

208
00:10:48.760 --> 00:10:51.400
and then you now know how we can get rid of this as well.

209
00:10:51.400 --> 00:10:55.250
Once it's stopped we can say docker remove and then

210
00:10:55.250 --> 00:10:57.740
give it that same container ID.

211
00:10:57.740 --> 00:11:01.340
So we'll just do 109, since that's a quick and easy way.

212
00:11:01.340 --> 00:11:04.240
Okay, so now docker psa.

213
00:11:04.240 --> 00:11:05.080
It's gone.

214
00:11:05.080 --> 00:11:08.880
Let's go to docker images, and there's the image.

215
00:11:08.880 --> 00:11:11.180
Notice the, again, image ID here.

216
00:11:11.180 --> 00:11:16.340
So we can say docker remove image 385,

217
00:11:16.340 --> 00:11:19.870
and that now deleted all the parts of the layered file system.

218
00:11:19.870 --> 00:11:20.550
And there we go.

219
00:11:20.550 --> 00:11:23.790
So now our container's gone and our images are gone.

220
00:11:23.790 --> 00:11:27.290
And from a development standpoint, this is pretty awesome,

221
00:11:27.290 --> 00:11:33.240
because now my machine is completely clean of this Nginx server.

222
00:11:33.240 --> 00:11:36.740
I don't have to worry about other files sticking around because I

223
00:11:36.740 --> 00:11:39.440
got rid of the actual image and the container.

224
00:11:39.440 --> 00:11:43.960
Now compare that to manually installing different servers

225
00:11:43.960 --> 00:11:45.680
and databases and things like that,

226
00:11:45.680 --> 00:11:48.780
and I think you'll find that that's a pretty compelling thing

227
00:11:48.780 --> 00:11:51.650
we can do in the development environment.

228
00:11:51.650 --> 00:11:56.440
Because I don't know about you, I tend to like to keep my machine pretty clean.

229
00:11:56.440 --> 00:12:04.000
So that's an example of some of these different Docker client commands that we can actually run in a Mac environment.

