1
00:00:02,900 --> 00:00:07,040
Let's start things off by answering the question, what is Docker?

2
00:00:07,040 --> 00:00:08,930
Docker does have some different terms.

3
00:00:08,930 --> 00:00:10,760
So we're going to clarify what those are,

4
00:00:10,760 --> 00:00:12,880
we're going to clarify where it can run,

5
00:00:12,880 --> 00:00:16,740
and how this all kind of works.

6
00:00:16,740 --> 00:00:20,680
So Docker itself is just a lightweight, open, secure platform.

7
00:00:20,680 --> 00:00:23,740
This is kind of the official party line, if you will.

8
00:00:23,740 --> 00:00:25,990
And the first time I heard that it didn't make maybe a

9
00:00:25,990 --> 00:00:28,210
whole lot of sense because I could think of several things

10
00:00:28,210 --> 00:00:31,420
that might fit a lightweight, open, secure platform definition.

11
00:00:31,420 --> 00:00:34,760
But really what Docker is is a way to simplify the

12
00:00:34,760 --> 00:00:38,140
process of building applications, shipping them,

13
00:00:38,140 --> 00:00:40,260
and then running them in different environments.

14
00:00:40,260 --> 00:00:42,160
Now, when I say environments, of course,

15
00:00:42,160 --> 00:00:45,260
I'm talking about development, staging, production,

16
00:00:45,260 --> 00:00:47,940
and others that you may have at work.

17
00:00:47,940 --> 00:00:50,940
Now, what actually ships with Docker then?

18
00:00:50,940 --> 00:00:54,500
Well, we're going to be talking about things called images and containers,

19
00:00:54,500 --> 00:00:56,460
and containers are really, really important.

20
00:00:56,460 --> 00:00:59,440
You'll see over at the left the Docker logo,

21
00:00:59,440 --> 00:01:02,890
and you can think of the whale there as kind of like a ship that has containers.

22
00:01:02,890 --> 00:01:04,480
And back in the old days,

23
00:01:04,480 --> 00:01:09,610
there was no standardized way to ship things on the old‑school ships.

24
00:01:09,610 --> 00:01:13,840
So it was a lot more time intensive and not very productive

25
00:01:13,840 --> 00:01:17,240
to get stuff on the ship and off the ship.

26
00:01:17,240 --> 00:01:19,910
Whereas nowadays, the major shipping companies,

27
00:01:19,910 --> 00:01:22,350
of course, have very standardized sized,

28
00:01:22,350 --> 00:01:25,360
standard height standard width, shipping containers.

29
00:01:25,360 --> 00:01:27,840
So as the crane goes over when the ship docks,

30
00:01:27,840 --> 00:01:29,460
it's very quick and efficient,

31
00:01:29,460 --> 00:01:34,440
very productive to get those containers on and off these ships.

32
00:01:34,440 --> 00:01:36,740
Well, Docker is very similar.

33
00:01:36,740 --> 00:01:39,170
If you think of the old days with ships that had no

34
00:01:39,170 --> 00:01:42,030
standards for shipping products around,

35
00:01:42,030 --> 00:01:44,800
that's kind of where development has been for many years.

36
00:01:44,800 --> 00:01:47,040
Everybody does it their own way.

37
00:01:47,040 --> 00:01:47,310
Well,

38
00:01:47,310 --> 00:01:50,930
Docker provides a consistent way to ship our code

39
00:01:50,930 --> 00:01:52,780
around to different environments,

40
00:01:52,780 --> 00:01:56,600
and so it's going to provide a lot of benefits that we'll be talking about in

41
00:01:56,600 --> 00:02:01,340
this particular section of the module for us as developers.

42
00:02:01,340 --> 00:02:03,920
Now it runs natively on Linux or Windows,

43
00:02:03,920 --> 00:02:08,200
and when I say Windows, Windows Server 2016 or higher now supports it.

44
00:02:08,200 --> 00:02:10,180
We'll talk more about that coming up.

45
00:02:10,180 --> 00:02:15,370
And as a developer, if you're on a Windows box or a Mac box or a Linux box,

46
00:02:15,370 --> 00:02:18,340
you can use Docker in your development workflow,

47
00:02:18,340 --> 00:02:20,490
and it's very easy to get up and running.

48
00:02:20,490 --> 00:02:23,850
Now if you're on Mac or Windows, you will need a virtual machine,

49
00:02:23,850 --> 00:02:29,170
because by default it's going to expect a Windows server or a Linux server.

50
00:02:29,170 --> 00:02:29,970
Now finally,

51
00:02:29,970 --> 00:02:32,370
the key buzzwords that are typically thrown around with

52
00:02:32,370 --> 00:02:35,340
Docker are images and containers.

53
00:02:35,340 --> 00:02:38,590
Let's clarify what exactly is an image and what is a

54
00:02:38,590 --> 00:02:43,340
container and how do they relate to each other?

55
00:02:43,340 --> 00:02:46,080
So when it comes to the role of images and containers,

56
00:02:46,080 --> 00:02:50,540
an image is something that's used to build a container.

57
00:02:50,540 --> 00:02:55,180
Now an image will have the necessary files to run something on

58
00:02:55,180 --> 00:02:58,390
an operating system like Ubuntu or Windows,

59
00:02:58,390 --> 00:03:01,110
and then you'll have your application framework or your

60
00:03:01,110 --> 00:03:03,940
database and then the files that support that.

61
00:03:03,940 --> 00:03:07,280
So if you're doing Node.js or ASP.NET or PHP or Python,

62
00:03:07,280 --> 00:03:10,270
then you'd have that framework built into the image

63
00:03:10,270 --> 00:03:13,840
as well as your application code, typically.

64
00:03:13,840 --> 00:03:19,250
Now the image itself is not overly useful because it just is the definition.

65
00:03:19,250 --> 00:03:22,890
Think of it as the blueprint that's used to actually

66
00:03:22,890 --> 00:03:25,340
get a running container going.

67
00:03:25,340 --> 00:03:27,600
So if you go back to the shipping analogy,

68
00:03:27,600 --> 00:03:32,420
think of some person who does some CAD drawings of what's

69
00:03:32,420 --> 00:03:34,640
going to go in the shipping container,

70
00:03:34,640 --> 00:03:37,600
maybe even how they're going to arrange it in the shipping container,

71
00:03:37,600 --> 00:03:41,040
but the blueprints aren't very useful on their own,

72
00:03:41,040 --> 00:03:44,370
but you can use those to create an actual instance of that container.

73
00:03:44,370 --> 00:03:47,490
Well, that's the same process in Docker.

74
00:03:47,490 --> 00:03:53,260
We'll have images that can be used to create a running instance of a container.

75
00:03:53,260 --> 00:03:57,470
Now containers are actually where the live application runs,

76
00:03:57,470 --> 00:04:02,070
or the database or caching server or whatever it may be that you need to

77
00:04:02,070 --> 00:04:05,840
actually run on a Linux or a Windows Server machine.

78
00:04:05,840 --> 00:04:08,980
Now let's dive into the definitions of each of these just a little bit more.

79
00:04:08,980 --> 00:04:11,260
So an image is a read‑only template.

80
00:04:11,260 --> 00:04:14,900
And what it's composed of, and we'll be building these throughout the course,

81
00:04:14,900 --> 00:04:16,580
is a layered file system.

82
00:04:16,580 --> 00:04:18,890
So you'll have some files, for instance,

83
00:04:18,890 --> 00:04:23,640
specific to your Linux operating system or your Windows operating system,

84
00:04:23,640 --> 00:04:26,700
and then you'll have your files for your framework,

85
00:04:26,700 --> 00:04:29,600
ASP.NET, or Node.js, or whatever it may be,

86
00:04:29,600 --> 00:04:35,040
and then they are all put together to make this image.

87
00:04:35,040 --> 00:04:39,170
Now once you have an image, you can use that to build this isolated container.

88
00:04:39,170 --> 00:04:40,770
And again if you go back to ships,

89
00:04:40,770 --> 00:04:45,080
every container is very isolated from the other containers.

90
00:04:45,080 --> 00:04:49,630
It makes it so you don't necessarily know what's going on in another container.

91
00:04:49,630 --> 00:04:52,660
Now there are some gotchas there that we can talk about later,

92
00:04:52,660 --> 00:04:54,210
but in a nutshell,

93
00:04:54,210 --> 00:04:58,440
the image is used to create an instance of the running container.

94
00:04:58,440 --> 00:05:00,890
And then you can start the container, you can stop it,

95
00:05:00,890 --> 00:05:05,230
you can move it, you can delete it, and it starts and stops really,

96
00:05:05,230 --> 00:05:06,540
really fast.

97
00:05:06,540 --> 00:05:09,500
And that's what's so cool about this technology is,

98
00:05:09,500 --> 00:05:13,560
it's very quick and easy to get a container on the ship and off the ship.

99
00:05:13,560 --> 00:05:16,350
And the ship, in our case, would be the development environment,

100
00:05:16,350 --> 00:05:20,540
the staging environment, the production environment.

101
00:05:20,540 --> 00:05:22,200
Now where does Docker run then?

102
00:05:22,200 --> 00:05:26,640
Well, as I've already mentioned, Docker can run on Linux or Windows servers.

103
00:05:26,640 --> 00:05:28,990
And so if you're going to be running on a development machine,

104
00:05:28,990 --> 00:05:31,930
you have to have a virtual machine, which we'll talk about.

105
00:05:31,930 --> 00:05:35,630
Now the exception would be if you're developing directly on a Linux machine,

106
00:05:35,630 --> 00:05:38,740
then you could just run Docker containers natively.

107
00:05:38,740 --> 00:05:41,440
But Docker ships with what's called a Docker client,

108
00:05:41,440 --> 00:05:45,340
and Docker client can then integrate with these different operating systems,

109
00:05:45,340 --> 00:05:49,100
such as Linux, and it integrates with a Docker Engine,

110
00:05:49,100 --> 00:05:51,140
a daemon that you'll see here.

111
00:05:51,140 --> 00:05:54,120
Now Docker itself has its roots in Linux.

112
00:05:54,120 --> 00:05:55,750
That's actually where it came out of.

113
00:05:55,750 --> 00:05:59,860
The Docker, the company, built on top of some LXC support,

114
00:05:59,860 --> 00:06:01,660
it's called Linux Container Support,

115
00:06:01,660 --> 00:06:04,950
that's already built in to the Linux operating system.

116
00:06:04,950 --> 00:06:10,740
Now likewise, Windows Server 2016 or higher also has Docker support built in,

117
00:06:10,740 --> 00:06:13,700
and so the Docker client there could be used to

118
00:06:13,700 --> 00:06:15,830
integrate with the Docker Engine,

119
00:06:15,830 --> 00:06:21,040
which can start and stop and delete and do all those things with our containers.

120
00:06:21,040 --> 00:06:25,550
So think of the Docker client as kind of the commands that are given to the

121
00:06:25,550 --> 00:06:28,550
people that load the ship or remove things off the ship,

122
00:06:28,550 --> 00:06:33,980
whereas the Docker Engine could be the cranes and the people running those that

123
00:06:33,980 --> 00:06:38,240
actually get the container on the ship and up and running.

124
00:06:38,240 --> 00:06:42,010
Now what's the difference between Docker containers then in virtual machines?

125
00:06:42,010 --> 00:06:43,580
Because this is one of those things that,

126
00:06:43,580 --> 00:06:47,150
the first time I learned about this, it didn't make a lot of sense to me.

127
00:06:47,150 --> 00:06:50,590
So virtual machines always run on top of a host operating system.

128
00:06:50,590 --> 00:06:53,470
So of course you could have a host running Linux or Windows,

129
00:06:53,470 --> 00:06:58,140
and then you can run a guest OS on top of something called a hypervisor.

130
00:06:58,140 --> 00:07:01,340
And so on the left, you might have, App 1 might be a PHP app,

131
00:07:01,340 --> 00:07:04,450
for instance, with its binaries, libraries,

132
00:07:04,450 --> 00:07:08,830
whatever it may be, or ASP.NET or Node, or whatever you have.

133
00:07:08,830 --> 00:07:12,660
And then App 2 might be running on a different guest OS.

134
00:07:12,660 --> 00:07:16,260
So let's say the guest OS on the left is maybe Windows,

135
00:07:16,260 --> 00:07:20,240
and the guest OS on the right could be Linux.

136
00:07:20,240 --> 00:07:23,980
The bottom line is you have a copy of the operating

137
00:07:23,980 --> 00:07:26,340
system for every virtual machine.

138
00:07:26,340 --> 00:07:29,500
And so, depending on the type of hard drive and things like that,

139
00:07:29,500 --> 00:07:34,220
it can be a little bit expensive to start up and stop a virtual machine.

140
00:07:34,220 --> 00:07:36,290
They run well, but they're pretty big.

141
00:07:36,290 --> 00:07:38,900
The images for a virtual machine to get it up and running

142
00:07:38,900 --> 00:07:42,740
are generally multiple gigabytes in size.

143
00:07:42,740 --> 00:07:46,340
Well, let's compare and contrast that with Docker containers.

144
00:07:46,340 --> 00:07:49,560
Now they do sit still on top of a host operating system,

145
00:07:49,560 --> 00:07:54,040
Linux and now, most recently, Windows server 2016 or higher.

146
00:07:54,040 --> 00:07:56,440
And then we have this Docker Engine,

147
00:07:56,440 --> 00:08:00,240
which can integrate the containers with the host operating system.

148
00:08:00,240 --> 00:08:03,560
And so now, as we get a container up and running,

149
00:08:03,560 --> 00:08:06,930
you can think of the host operating system as the ship and

150
00:08:06,930 --> 00:08:10,920
then the container for App 1 has everything App 1 needs

151
00:08:10,920 --> 00:08:14,940
for that particular feature, so Node.js with all the application code,

152
00:08:14,940 --> 00:08:15,860
for instance.

153
00:08:15,860 --> 00:08:19,420
Now App 2 might have a completely different container,

154
00:08:19,420 --> 00:08:22,130
and then typically applications will have multiple containers.

155
00:08:22,130 --> 00:08:24,300
You might have a container for your database,

156
00:08:24,300 --> 00:08:26,480
a container for a caching piece,

157
00:08:26,480 --> 00:08:29,540
a container for your application code and the framework,

158
00:08:29,540 --> 00:08:30,350
those type of things.

159
00:08:30,350 --> 00:08:35,740
But the bottom line is they sit right on top of the native operating system.

160
00:08:35,740 --> 00:08:39,200
So when I ship these around, I'm shipping a smaller image.

161
00:08:39,200 --> 00:08:45,140
It's very small compared to a guest OS virtual machine.

162
00:08:45,140 --> 00:08:48,560
They also start containers also start very,

163
00:08:48,560 --> 00:08:51,930
very fast, and we'll be seeing that throughout the course.

164
00:08:51,930 --> 00:08:52,850
They're great.

165
00:08:52,850 --> 00:08:55,440
They just come up in a matter of seconds.

166
00:08:55,440 --> 00:08:58,590
The difference here is very, very big.

167
00:08:58,590 --> 00:09:01,440
Containers sit on top of the host,

168
00:09:01,440 --> 00:09:05,660
whereas guest OSs and VMs sit on top of the actual host,

169
00:09:05,660 --> 00:09:08,940
but they're their own copy of all the files.

170
00:09:08,940 --> 00:09:12,510
Everything is a copy as you make a new VM.

171
00:09:12,510 --> 00:09:17,040
So that's an example of what Docker is.

172
00:09:17,040 --> 00:09:19,640
We've now talked about images and containers,

173
00:09:19,640 --> 00:09:23,010
and we'll be delving much, much more into those throughout the course.

174
00:09:23,010 --> 00:09:25,860
And then we've also done a comparison between Docker

175
00:09:25,860 --> 00:09:28,540
containers and virtual machines.

176
00:09:28,540 --> 00:09:31,510
So now that we've done that, let's start talking about,

177
00:09:31,510 --> 00:09:39,000
all right, this is great and all, but how does this actually help me as a web developer?

