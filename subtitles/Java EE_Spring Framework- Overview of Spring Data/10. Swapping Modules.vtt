WEBVTT
1
00:00:01.075 --> 00:00:04.927
So far, our application architecture looks something like this.

2
00:00:04.927 --> 00:00:08.809
Our code is making use of the Repository interface provided by Spring

3
00:00:08.809 --> 00:00:12.507
Data Commons in order to interact with the database.

4
00:00:12.507 --> 00:00:15.249
We're using Spring Data JPA so this Repository

5
00:00:15.249 --> 00:00:18.815
interface wraps JPA data access code.

6
00:00:18.815 --> 00:00:21.169
We never see or touch this code directly,

7
00:00:21.169 --> 00:00:24.046
instead only working with the repository.

8
00:00:24.046 --> 00:00:26.686
We're also using an embedded H2 database,

9
00:00:26.686 --> 00:00:29.445
the lifecycle of which is managed by our unit test.

10
00:00:29.445 --> 00:00:33.951
Now because we use Spring Data, if we wanted to migrate to a different database,

11
00:00:33.951 --> 00:00:39.341
such as MongoDB, a document database, then things wouldn't change so much at all.

12
00:00:39.341 --> 00:00:42.510
We will only need to swap string data modules.

13
00:00:42.510 --> 00:00:46.021
The Repository interface we're using should then be the same,

14
00:00:46.021 --> 00:00:49.043
the same CRUDRepository, paging and sorting abstractions,

15
00:00:49.043 --> 00:00:51.876
and even derived query method signatures.

16
00:00:51.876 --> 00:00:54.889
So there should be very little refactoring required.

17
00:00:54.889 --> 00:00:58.575
Of course, our embedded database will change to an embedded MongoDB,

18
00:00:58.575 --> 00:01:02.100
but Spring Boot will help us get started with that quickly too.

19
00:01:02.100 --> 00:01:05.433
But what we're really demonstrating here is proof of how data

20
00:01:05.433 --> 00:01:08.665
store agnostic Spring Data and the repository pattern are and

21
00:01:08.665 --> 00:01:11.041
how useful that makes things.

22
00:01:11.041 --> 00:01:14.329
This really powerful concept as previously discussed is what

23
00:01:14.329 --> 00:01:20.000
helps Spring Data modules all following the same programming model via Spring Data Commons.

