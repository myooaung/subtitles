1
00:00:01,125 --> 00:00:04,864
Okay, so let's take a look at the base Repository interface.

2
00:00:04,864 --> 00:00:08,144
It doesn't actually have any methods and is just a marker interface.

3
00:00:08,144 --> 00:00:10,554
However, it takes two arguments.

4
00:00:10,554 --> 00:00:13,086
The first is the type of entity to persist,

5
00:00:13,086 --> 00:00:16,953
in other words a Java class, which is mapped to a database table.

6
00:00:16,953 --> 00:00:19,718
All repository operations will take place on this entity.

7
00:00:19,718 --> 00:00:23,552
The second is the type of the entity's ID class.

8
00:00:23,552 --> 00:00:26,321
This might be a long, a EUID, or some other data type.

9
00:00:26,321 --> 00:00:28,915
But as it will differ between different data stores,

10
00:00:28,915 --> 00:00:32,183
it must be a generic type argument in order for the

11
00:00:32,183 --> 00:00:35,405
repository to be completely generic itself.

12
00:00:35,405 --> 00:00:39,914
Below the Repository interface, we have the most commonly used CRUDRepository.

13
00:00:39,914 --> 00:00:43,493
This provides us with CRUD methods out of the box for our entities.

14
00:00:43,493 --> 00:00:47,759
And some of the time this interface might be all our application needs.

15
00:00:47,759 --> 00:00:52,330
In our example here, we have a save method for creating or updating entities.

16
00:00:52,330 --> 00:00:55,611
We have a method for reading or finding entities by ID,

17
00:00:55,611 --> 00:00:59,747
a method for deleting entities, and there are more.

18
00:00:59,747 --> 00:01:08,000
Most of the generic CRUD operations you can think of live on this interface, making it very powerful out of the box often with little need to do much else.

