WEBVTT
1
00:00:01.477 --> 00:00:02.230
In this demo,

2
00:00:02.230 --> 00:00:04.695
we'll be creating a transactional method by making use

3
00:00:04.695 --> 00:00:07.505
of the @Transactional annotation.

4
00:00:07.505 --> 00:00:10.418
We'll then verify that the method works by stepping through the

5
00:00:10.418 --> 00:00:13.952
code and also triggering transaction rollback.

6
00:00:13.952 --> 00:00:17.344
Okay, let's get started by creating a new test.

7
00:00:17.344 --> 00:00:19.527
We'll call it TransactionalTests.

8
00:00:19.527 --> 00:00:22.680
Just like in the previous module, we'll run it with the SpringRunner,

9
00:00:22.680 --> 00:00:25.471
but this time make it a Spring Boot test as we'll be

10
00:00:25.471 --> 00:00:27.540
creating some extra non-JPA related beans.

11
00:00:27.540 --> 00:00:32.105
We can then wire in our FlightRepository and then create a new setUp method,

12
00:00:32.105 --> 00:00:36.294
which deletes everything from our table at the start of the test.

13
00:00:36.294 --> 00:00:41.387
Now let's create a test called shouldNotRollBackWhenTheresNoTransaction.

14
00:00:41.387 --> 00:00:43.894
The goal of this test will be to compare it against a

15
00:00:43.894 --> 00:00:45.975
transactional test to prove that with transactions,

16
00:00:45.975 --> 00:00:50.037
we are able to roll back in the event of an exception.

17
00:00:50.037 --> 00:00:50.436
Okay,

18
00:00:50.436 --> 00:00:55.992
let's create a package called Service and create a class called FlightsService.

19
00:00:55.992 --> 00:00:57.795
In our new class, we'll create a method,

20
00:00:57.795 --> 00:01:00.990
which saves a flight and then throws an exception.

21
00:01:00.990 --> 00:01:03.280
In a real application, in between,

22
00:01:03.280 --> 00:01:05.896
we might have some extra code that would do some more

23
00:01:05.896 --> 00:01:07.986
reads and writes to the database.

24
00:01:07.986 --> 00:01:10.221
Let's switch back to our test and wire in our

25
00:01:10.221 --> 00:01:12.657
FlightsService and then call our saveFlight method.

26
00:01:12.657 --> 00:01:14.662
As is an exception thrown,

27
00:01:14.662 --> 00:01:17.201
we can then surround the call with a try-catch block

28
00:01:17.201 --> 00:01:21.086
and then in the finally block, assert that a FlightRepository is not empty.

29
00:01:21.086 --> 00:01:24.453
It's pretty obvious this should be the case as we throw

30
00:01:24.453 --> 00:01:26.154
our exception after saving the flight.

31
00:01:26.154 --> 00:01:28.727
Let's run our test and verify it.

32
00:01:28.727 --> 00:01:31.423
Yes, it has gone green.

33
00:01:31.423 --> 00:01:33.696
Now we can move on to a more interesting test,

34
00:01:33.696 --> 00:01:36.893
which makes use of the @Transactional annotation.

35
00:01:36.893 --> 00:01:39.990
Let's copy and paste our existing one and rename it

36
00:01:39.990 --> 00:01:42.804
shouldNotRollBackWhenThereIsATransaction.

37
00:01:42.804 --> 00:01:47.307
Then let's change our assertion to check that our flights are empty.

38
00:01:47.307 --> 00:01:51.325
We'll then call a new method, saveFlightTransactional instead.

39
00:01:51.325 --> 00:01:55.803
It will be exactly the same as before, only annotated with @Transactional.

40
00:01:55.803 --> 00:01:57.894
What this means is on invoking the method,

41
00:01:57.894 --> 00:02:00.430
the transaction will start and then will be committed

42
00:02:00.430 --> 00:02:03.072
once the method completes successfully.

43
00:02:03.072 --> 00:02:06.474
As we throw an exception rather than allowing the method to complete,

44
00:02:06.474 --> 00:02:09.141
our transaction should never be successfully committed so the

45
00:02:09.141 --> 00:02:12.215
flight will not end up in the database.

46
00:02:12.215 --> 00:02:15.100
Okay, let's switch back to our test, run it,

47
00:02:15.100 --> 00:02:17.735
and confirm that the flight was not saved.

48
00:02:17.735 --> 00:02:18.652
Great, it wasn't,

49
00:02:18.652 --> 00:02:22.401
meaning that Spring successfully executed our code within a transaction when

50
00:02:22.401 --> 00:02:26.623
all we needed to do was use the @Transactional annotation.

51
00:02:26.623 --> 00:02:32.000
This proves how much easier things can be when we use Spring to reduce our boilerplate.

