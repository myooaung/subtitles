WEBVTT
1
00:00:01.392 --> 00:00:02.538
Taking a step back,

2
00:00:02.538 --> 00:00:06.516
let's think about how we would access data from Java without Spring Data.

3
00:00:06.516 --> 00:00:10.860
Here we have a Java application on the left and a database on the right.

4
00:00:10.860 --> 00:00:11.410
Now typically,

5
00:00:11.410 --> 00:00:16.075
we would use a data access library to access our data where we create code

6
00:00:16.075 --> 00:00:19.496
to do things like query execution or result mapping.

7
00:00:19.496 --> 00:00:22.954
If we were working on an SQL database and maybe we'd be

8
00:00:22.954 --> 00:00:24.777
writing some JPA or Hibernate code,

9
00:00:24.777 --> 00:00:27.924
or if we were working on a document database like MongoDB,

10
00:00:27.924 --> 00:00:30.626
we'd be working with the MongoDB driver.

11
00:00:30.626 --> 00:00:34.082
What's important to know is that our data access code would be

12
00:00:34.082 --> 00:00:36.762
completely different for these two applications.

13
00:00:36.762 --> 00:00:38.620
They'd come with different query languages,

14
00:00:38.620 --> 00:00:40.913
different libraries for executing those queries,

15
00:00:40.913 --> 00:00:44.273
and, in general, share no common interfaces.

16
00:00:44.273 --> 00:00:47.907
If we throw Spring Data into the mix, then things work differently.

17
00:00:47.907 --> 00:00:50.432
You can think of a Spring Data project as a wrapper

18
00:00:50.432 --> 00:00:52.377
around the data access library,

19
00:00:52.377 --> 00:00:56.277
always making use of the same common interfaces and abstractions.

20
00:00:56.277 --> 00:00:56.852
In other words,

21
00:00:56.852 --> 00:00:59.612
if we looked at a project using Spring Data MongoDB

22
00:00:59.612 --> 00:01:03.905
from one using Spring Data JPA, the code would be remarkably similar.

23
00:01:03.905 --> 00:01:08.806
Aside from that, Spring Data takes the approach of convention over configuration,

24
00:01:08.806 --> 00:01:11.270
removing a lot of the data access boilerplate that we

25
00:01:11.270 --> 00:01:14.244
would normally have to write ourselves.

26
00:01:14.244 --> 00:01:16.819
So what are some of the abstractions that Spring Data

27
00:01:16.819 --> 00:01:19.521
makes use of across all of its projects?

28
00:01:19.521 --> 00:01:22.410
Well we'll be looking at these in detail throughout the course.

29
00:01:22.410 --> 00:01:24.934
But for now, let's do a highâ€‘level overview.

30
00:01:24.934 --> 00:01:27.810
The lowest hanging fruit is CRUD, meaning if you create,

31
00:01:27.810 --> 00:01:30.493
read, update, or delete some data from a database,

32
00:01:30.493 --> 00:01:34.311
then you can use the same CRUDRepository interface to do so.

33
00:01:34.311 --> 00:01:37.338
Spring Data also derives queries for us.

34
00:01:37.338 --> 00:01:40.363
What this means is that we don't need to write queries ourselves because

35
00:01:40.363 --> 00:01:43.583
Spring will generate them based on the names of our methods.

36
00:01:43.583 --> 00:01:46.358
This really helps developers who could otherwise be overwhelmed by

37
00:01:46.358 --> 00:01:49.113
a query language that they're unfamiliar with.

38
00:01:49.113 --> 00:01:50.973
Whilst technically part of Core Spring,

39
00:01:50.973 --> 00:01:54.811
we also get transaction management out of the box with Spring Data.

40
00:01:54.811 --> 00:01:57.378
The benefit of this is that Spring makes transactions declarative,

41
00:01:57.378 --> 00:02:00.907
reducing a lot of boilerplate with the page and sort

42
00:02:00.907 --> 00:02:02.803
abstraction available for us to use,

43
00:02:02.803 --> 00:02:06.635
which helps us easily traverse through large amounts of data.

44
00:02:06.635 --> 00:02:07.964
We also get auditing,

45
00:02:07.964 --> 00:02:10.708
allowing us to track who created or changed an

46
00:02:10.708 --> 00:02:13.058
entity and when that change happened.

47
00:02:13.058 --> 00:02:15.740
And it's important to note that this isn't an exhaustive list,

48
00:02:15.740 --> 00:02:21.875
but gives us a glimpse of common problems Spring Data aims to solve.

49
00:02:21.875 --> 00:02:25.387
So now we understand a bit more about Spring Data and what it achieves,

50
00:02:25.387 --> 00:02:28.472
it's also worth emphasizing its benefits.

51
00:02:28.472 --> 00:02:31.192
One core benefit is its consistent programming model.

52
00:02:31.192 --> 00:02:33.739
Regardless of the underlying data store,

53
00:02:33.739 --> 00:02:36.638
whether it's Cassandra, Neo4J, or MongoDB,

54
00:02:36.638 --> 00:02:41.412
you'll still be working with the same familiar Spring Data code for all modules.

55
00:02:41.412 --> 00:02:45.323
For example, we'll always be working with the same repository interfaces.

56
00:02:45.323 --> 00:02:47.780
This helps keep things familiar for developers.

57
00:02:47.780 --> 00:02:49.169
In fact, a lot of the time,

58
00:02:49.169 --> 00:02:52.157
developers won't need to the underlying library that a

59
00:02:52.157 --> 00:02:54.303
Spring Data module wraps around at all,

60
00:02:54.303 --> 00:02:56.528
only working with the Spring Data interfaces.

61
00:02:56.528 --> 00:03:00.487
This keeps the learning curve as low as possible for a developer.

62
00:03:00.487 --> 00:03:02.958
And when they need to work with a new type of database,

63
00:03:02.958 --> 00:03:07.304
Spring Data helps smoothly transition in order for them to get started quickly.

64
00:03:07.304 --> 00:03:10.043
Another core benefit is a reduction in boilerplate.

65
00:03:10.043 --> 00:03:12.164
Basic CRUD access comes out of the box,

66
00:03:12.164 --> 00:03:14.942
and more complex queries are even generated for you.

67
00:03:14.942 --> 00:03:17.669
This means developers can focus on writing application

68
00:03:17.669 --> 00:03:19.792
code rather than data access plumbing,

69
00:03:19.792 --> 00:03:23.029
helping them deliver functional requirements faster.

70
00:03:23.029 --> 00:03:26.138
Finally, Spring Data integrates seamlessly with Spring Boot.

71
00:03:26.138 --> 00:03:29.802
You're provided with a Spring Boot starter for each Spring Data module.

72
00:03:29.802 --> 00:03:31.844
And if you include it in your application,

73
00:03:31.844 --> 00:03:34.767
then Spring Boot will takes its convention over configuration approach,

74
00:03:34.767 --> 00:03:39.151
setting up a database connection pool, creating entity managers,

75
00:03:39.151 --> 00:03:40.147
and more.

76
00:03:40.147 --> 00:03:47.000
This leaves you with a minimal amount of configuration to do yourself, again saving developers a bunch of time.

