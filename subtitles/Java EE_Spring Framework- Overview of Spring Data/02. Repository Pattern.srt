1
00:00:01,262 --> 00:00:03,916
One of the core patterns that Spring Data makes use

2
00:00:03,916 --> 00:00:05,921
of is the repository pattern.

3
00:00:05,921 --> 00:00:06,747
In a nutshell,

4
00:00:06,747 --> 00:00:11,178
the repository pattern is a persistence ignorant data access abstraction.

5
00:00:11,178 --> 00:00:14,604
What this means is that rather than querying a database directly,

6
00:00:14,604 --> 00:00:19,126
your application code will communicate with a repository interface instead.

7
00:00:19,126 --> 00:00:19,436
Internally,

8
00:00:19,436 --> 00:00:23,629
this interface will have an implementation with some data access code,

9
00:00:23,629 --> 00:00:25,703
but from your application's point of view,

10
00:00:25,703 --> 00:00:28,264
the repository that you work with will be abstract or

11
00:00:28,264 --> 00:00:30,463
hide away all of this entirely.

12
00:00:30,463 --> 00:00:32,828
Let's explain this with an example.

13
00:00:32,828 --> 00:00:35,558
Typically when our application wants to query a database,

14
00:00:35,558 --> 00:00:40,494
we do some sort of framework specific for accessing that database.

15
00:00:40,494 --> 00:00:42,858
In this example where we have an SQL database,

16
00:00:42,858 --> 00:00:46,164
we might make use of JPA to query it.

17
00:00:46,164 --> 00:00:50,340
If we introduce a Spring Data repository interface into the equation,

18
00:00:50,340 --> 00:00:53,962
it essentially wraps and abstracts our JPA access code for us.

19
00:00:53,962 --> 00:00:59,241
Now our code will only query this data store via this repository interface.

20
00:00:59,241 --> 00:01:02,448
And although not completely interoperable in all situations,

21
00:01:02,448 --> 00:01:06,766
the repository pattern more or less means we're able to completely swap our

22
00:01:06,766 --> 00:01:10,303
data store for something else without changing our code.

23
00:01:10,303 --> 00:01:12,436
In this case, we've changed to Spring Data Neo4J,

24
00:01:12,436 --> 00:01:14,790
which of course implements the same repository

25
00:01:14,790 --> 00:01:20,000
interface as all the other modules, keeping the code which uses that repository close to the same.

