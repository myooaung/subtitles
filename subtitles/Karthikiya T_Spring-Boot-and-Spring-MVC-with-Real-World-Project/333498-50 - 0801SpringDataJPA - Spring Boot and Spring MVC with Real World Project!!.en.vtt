WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.740
Okay,

00:00:00.740 --> 00:00:03.470
This chapter is about understanding spring data.

00:00:03.470 --> 00:00:07.760
So let's try to understand what a spring data from the official definition from the

00:00:07.760 --> 00:00:09.480
official website Spring drive.

00:00:09.480 --> 00:00:09.760
Oh,

00:00:09.760 --> 00:00:11.650
and here is what that to say,

00:00:11.650 --> 00:00:12.770
spring.

00:00:12.770 --> 00:00:18.850
There s mission is to provide a familiar and consistent spring this programming model for

00:00:18.850 --> 00:00:23.250
data access while still retaining the special traits off the underlying data store.

00:00:23.250 --> 00:00:27.160
It makes it easy to use their access technologies,

00:00:27.160 --> 00:00:29.760
relational and non relational databases,

00:00:29.760 --> 00:00:30.700
map ridges,

00:00:30.700 --> 00:00:33.150
frameworks and cloud based services.

00:00:33.150 --> 00:00:39.920
This is an umbrella project which contains many sub projects that are specific to the given

00:00:39.920 --> 00:00:40.700
database.

00:00:40.700 --> 00:00:43.890
The products are developed by blah,

00:00:43.890 --> 00:00:44.080
blah,

00:00:44.080 --> 00:00:44.510
blah.

00:00:44.510 --> 00:00:49.560
If you're able to understand at least 30% off this definition,

00:00:49.560 --> 00:00:50.810
that's great.

00:00:50.810 --> 00:00:53.560
Once after we take a look at a very beautiful example,

00:00:53.560 --> 00:00:56.530
offspring data will get back on this definition,

00:00:56.530 --> 00:01:00.000
and we'll see if this definition makes under person sense.

00:01:00.000 --> 00:01:02.270
But what they're trying to say is,

00:01:02.270 --> 00:01:07.880
spring data is there to simplify the data access layer often application.

00:01:07.880 --> 00:01:13.300
It's going to ease your efforts to interact with the database from the application when,

00:01:13.300 --> 00:01:14.010
as a database,

00:01:14.010 --> 00:01:17.430
it doesn't necessarily have to be a relational database.

00:01:17.430 --> 00:01:21.100
It could be a new SQL database on a cloud data service.

00:01:21.100 --> 00:01:24.400
Spring has a lot off sub projects.

00:01:24.400 --> 00:01:26.860
That's what they're trying to say spring.

00:01:26.860 --> 00:01:28.420
There is actually a number the project,

00:01:28.420 --> 00:01:30.620
which contains many sub projects.

00:01:30.620 --> 00:01:36.870
And here are day and you to choose the one there's gonna needs if you're using spring very

00:01:36.870 --> 00:01:37.440
busy.

00:01:37.440 --> 00:01:39.900
And here's a library that you need to use.

00:01:39.900 --> 00:01:43.990
And we had all the export spring Jerry busy in our previous videos.

00:01:43.990 --> 00:01:45.030
Similarly,

00:01:45.030 --> 00:01:46.920
if you're using any JP a framework,

00:01:46.920 --> 00:01:47.740
for example,

00:01:47.740 --> 00:01:48.860
we have Hibernate,

00:01:48.860 --> 00:01:51.770
which implements GPS specifications,

00:01:51.770 --> 00:01:58.180
and you can use this library to live rage the spring date of functionality and similar.

00:01:58.180 --> 00:02:02.400
We have one for no SQL database spring that among Body Be.

00:02:02.400 --> 00:02:05.330
And we also have one for Apache.

00:02:05.330 --> 00:02:09.980
How do but the one that we're going to be needing a spring data?

00:02:09.980 --> 00:02:10.170
J.

00:02:10.170 --> 00:02:10.430
P.

00:02:10.430 --> 00:02:10.660
A.

00:02:10.660 --> 00:02:14.920
Because we're going to be using Habit Net framework to interact with the database.

00:02:14.920 --> 00:02:16.150
And in our example,

00:02:16.150 --> 00:02:20.750
we're going to be using a member the database to demonstrate our example.

00:02:20.750 --> 00:02:30.440
So he wrote the list off things that were going to take care off in our first example is in

00:02:30.440 --> 00:02:32.660
spring data the first off,

00:02:32.660 --> 00:02:33.330
which is stabbed.

00:02:33.330 --> 00:02:34.820
The required dependence is,

00:02:34.820 --> 00:02:36.650
And since we're using spring boot,

00:02:36.650 --> 00:02:42.050
it's not really surprising if I say that we just need to add one single dependency and that

00:02:42.050 --> 00:02:43.180
will take it off everything.

00:02:43.180 --> 00:02:47.460
And next is to create the entity classes and this entity.

00:02:47.460 --> 00:02:52.960
Classes would correspond to the database tables and the classes that we're going to create

00:02:52.960 --> 00:02:52.960
,

00:02:52.960 --> 00:02:55.280
or student and student address,

00:02:55.280 --> 00:02:58.780
and these two are going to have 1 to 1 relation.

00:02:58.780 --> 00:03:00.970
Every student will have an address,

00:03:00.970 --> 00:03:02.720
and whenever there is an address,

00:03:02.720 --> 00:03:06.550
there has to be a student that corresponds to that address.

00:03:06.550 --> 00:03:10.050
We'll see how we can create the relation between these two.

00:03:10.050 --> 00:03:16.100
And then we'll go ahead and create the repository so that we can dependence,

00:03:16.100 --> 00:03:21.300
inject the repository into the control logic and then would be able to call the methods in

00:03:21.300 --> 00:03:21.590
it.

00:03:21.590 --> 00:03:26.050
And so we contract with the database and perform crowd operations,

00:03:26.050 --> 00:03:28.140
and ideally,

00:03:28.140 --> 00:03:31.950
we should also be having a service layer in between.

00:03:31.950 --> 00:03:35.650
But since that application is pretty simple,

00:03:35.650 --> 00:03:38.850
we are not introducing the service led yet,

00:03:38.850 --> 00:03:39.790
but yes,

00:03:39.790 --> 00:03:42.850
down the line wants to build a real time project,

00:03:42.850 --> 00:03:48.590
but would most definitely be falling all the best practices and introducing the service

00:03:48.590 --> 00:03:49.350
later as well,

00:03:49.350 --> 00:03:52.970
and finally would just try to run the application.

00:03:52.970 --> 00:03:57.310
So let's let's take a look at the Palm.

00:03:57.310 --> 00:03:59.350
The maximal file in our project,

00:03:59.350 --> 00:04:06.850
the only dependency that you need to add his springboard starter did our G p A.

00:04:06.850 --> 00:04:10.380
And this will also include the Harbin IT library,

00:04:10.380 --> 00:04:14.760
implicitly using the transitive dependency feature off maven.

00:04:14.760 --> 00:04:18.990
And since we're going to be using the embedded Hester database,

00:04:18.990 --> 00:04:22.450
we also need to add the dependency.

00:04:22.450 --> 00:04:25.160
If there isn't any other database like post DSK alarm,

00:04:25.160 --> 00:04:27.730
I ask your our mongo DB or whatever.

00:04:27.730 --> 00:04:33.300
You can just add their dependence in here next year's to configure our application or

00:04:33.300 --> 00:04:34.170
properties file.

00:04:34.170 --> 00:04:39.260
And if you're using is too embedded database and you want to leave the user name and

00:04:39.260 --> 00:04:41.040
password to the defaults,

00:04:41.040 --> 00:04:42.610
you don't have to add them.

00:04:42.610 --> 00:04:43.740
But otherwise,

00:04:43.740 --> 00:04:47.180
if you're using any external database or any other data ways,

00:04:47.180 --> 00:04:51.800
then you have to take care off providing those connection para meters.

00:04:51.800 --> 00:04:53.780
But in my case,

00:04:53.780 --> 00:04:54.960
I'm using a straight the best,

00:04:54.960 --> 00:04:56.750
so I'm good to go with this.

00:04:56.750 --> 00:05:01.150
We're gonna talk about this particular property in a while.

00:05:01.150 --> 00:05:03.790
Let's take a look at the entity classes.

00:05:03.790 --> 00:05:04.970
As I said,

00:05:04.970 --> 00:05:07.670
we're going to have a couple off entity classes the first off,

00:05:07.670 --> 00:05:10.700
which is a student and student address.

00:05:10.700 --> 00:05:13.350
But you're seeing a lot off annotations here.

00:05:13.350 --> 00:05:14.780
Well,

00:05:14.780 --> 00:05:17.590
these are all pretty much jp annotations.

00:05:17.590 --> 00:05:22.420
And when you're trying to use these annotations,

00:05:22.420 --> 00:05:26.870
do make sure that we import them from Java X library.

00:05:26.870 --> 00:05:33.070
You don't want to import them from the hibernate package that will make your application

00:05:33.070 --> 00:05:33.950
tightly coupled.

00:05:33.950 --> 00:05:35.450
The only hibernate,

00:05:35.450 --> 00:05:36.350
I mean.

00:05:36.350 --> 00:05:37.150
For instance,

00:05:37.150 --> 00:05:42.650
if you'd like to switch toe any other Orem tool that also implements the JPs specifications

00:05:42.650 --> 00:05:42.650
,

00:05:42.650 --> 00:05:45.690
then you have to make a lot of changes in your court.

00:05:45.690 --> 00:05:48.520
So as a precautionary action tried,

00:05:48.520 --> 00:05:57.550
import all the classes and interfaces from Java X package and let's bet understand what's

00:05:57.550 --> 00:06:00.050
going on in this particular class.

00:06:00.050 --> 00:06:05.470
This sanitation entity will say that this is an entity,

00:06:05.470 --> 00:06:08.210
and whenever you load this application,

00:06:08.210 --> 00:06:10.780
or whenever you're deploying this application,

00:06:10.780 --> 00:06:12.080
if you're not using spring boat,

00:06:12.080 --> 00:06:18.250
then having it will create a table in the database with this particular table name.

00:06:18.250 --> 00:06:27.750
That's because we made this as an entity and JP requires that you need to provide an empty

00:06:27.750 --> 00:06:37.540
constructor empty nor constructor and better that we make this private so that nobody would

00:06:37.540 --> 00:06:41.150
be able to create instances off this particular class.

00:06:41.150 --> 00:06:47.300
But we're going to be needing a parametric constructor because we're going to use the same

00:06:47.300 --> 00:06:54.850
entity class as our domain object so that we can populate the student object and then start

00:06:54.850 --> 00:06:55.020
off,

00:06:55.020 --> 00:06:59.150
tried to store using the depositor matters will take a look at it in a minute,

00:06:59.150 --> 00:07:02.970
and then we just have list off fields that first off,

00:07:02.970 --> 00:07:04.750
which is the ardent fire,

00:07:04.750 --> 00:07:07.790
and you would make one off the fields as I didn't fire.

00:07:07.790 --> 00:07:08.840
Typically,

00:07:08.840 --> 00:07:15.440
it would be a long type and you would admit it it with after it I d.

00:07:15.440 --> 00:07:23.000
And then we're saying hibernate that we want to auto generate the I didn't fire.

00:07:23.000 --> 00:07:29.690
We don't want to manually insert the identify because it's pretty error prone and then we

00:07:29.690 --> 00:07:30.500
have name.

00:07:30.500 --> 00:07:35.850
We're also trying to put some constraints that the name shouldn't exceed more than 65

00:07:35.850 --> 00:07:36.690
characters,

00:07:36.690 --> 00:07:45.450
and we're also saying this field shouldn't be now and this is an optional annotation.

00:07:45.450 --> 00:07:48.070
We're just trying to be you and name,

00:07:48.070 --> 00:07:51.870
and this is going to be the name that you see in the database.

00:07:51.870 --> 00:07:53.610
Same is the case,

00:07:53.610 --> 00:07:56.550
but age and the description.

00:07:56.550 --> 00:07:58.620
And here is something new.

00:07:58.620 --> 00:08:04.680
We're having a one on one mapping with student address entity.

00:08:04.680 --> 00:08:07.480
Let's take a look at what's inside here.

00:08:07.480 --> 00:08:12.990
We pretty much have the same annotations with just one field that is,

00:08:12.990 --> 00:08:16.210
address to store the student address,

00:08:16.210 --> 00:08:21.240
and we also have off course one primary key.

00:08:21.240 --> 00:08:23.350
And here's the thing.

00:08:23.350 --> 00:08:26.300
We have one on one mapping with the student.

00:08:26.300 --> 00:08:27.750
As I mentioned already,

00:08:27.750 --> 00:08:30.350
we want it's goingto have an address,

00:08:30.350 --> 00:08:32.250
and whenever there is an address,

00:08:32.250 --> 00:08:35.470
it has to be a student associate ID with that address.

00:08:35.470 --> 00:08:42.190
And this annotation would so that purpose these attributes in here fetch type and casket

00:08:42.190 --> 00:08:45.650
type or more off JP and habit concepts of all.

00:08:45.650 --> 00:08:50.280
They talked about it in detail in my Cabinet or on Prem a course.

00:08:50.280 --> 00:08:52.030
If you have gone through it,

00:08:52.030 --> 00:08:52.820
that's great.

00:08:52.820 --> 00:08:56.180
I'm pretty sure that you're pretty familiar with this attributes,

00:08:56.180 --> 00:09:02.150
and we're trying to map with the student field,

00:09:02.150 --> 00:09:07.350
which essentially means that we want to map it with the field in the student address.

00:09:07.350 --> 00:09:12.250
So here we have one on one mapping inside the student address as well,

00:09:12.250 --> 00:09:16.250
and we want to join one column.

00:09:16.250 --> 00:09:19.550
So inside the table student address,

00:09:19.550 --> 00:09:22.610
you would see this particular column getting added,

00:09:22.610 --> 00:09:24.300
which is basically the foreign key,

00:09:24.300 --> 00:09:28.690
and this would be populated with all the identifiers off the students.

00:09:28.690 --> 00:09:30.780
I mean,

00:09:30.780 --> 00:09:36.550
whoever owns a particle address that students I d would be populated here.

00:09:36.550 --> 00:09:42.850
And we made this knowable to false because we don't want this feel to be an L value.

00:09:42.850 --> 00:09:45.160
Well,

00:09:45.160 --> 00:09:47.080
these are all pretty much happen.

00:09:47.080 --> 00:09:47.590
It's stuff.

00:09:47.590 --> 00:09:48.160
And again,

00:09:48.160 --> 00:09:50.460
we've talked about 1 to 11 too many,

00:09:50.460 --> 00:09:51.540
many to many,

00:09:51.540 --> 00:09:52.760
and many to one relations,

00:09:52.760 --> 00:09:55.050
etcetera in or have a net course.

00:09:55.050 --> 00:10:02.480
And I don't think we have room to talk more on have been made because that itself deserts,

00:10:02.480 --> 00:10:03.190
of course.

00:10:03.190 --> 00:10:06.660
But even if you're not familiar with hibernate,

00:10:06.660 --> 00:10:10.610
they should look something familiar to you.

00:10:10.610 --> 00:10:17.980
We're tryingto have on on on mapping between these two enter days and in addition to that,

00:10:17.980 --> 00:10:19.350
for each in every field,

00:10:19.350 --> 00:10:24.090
we have one getter and setter to set the values,

00:10:24.090 --> 00:10:32.240
and these methods would be used by hibernate in order to perform whatever we want to

00:10:32.240 --> 00:10:39.670
perform on this entities and do they can note that we're not setting the student address

00:10:39.670 --> 00:10:41.650
field with this constructor.

00:10:41.650 --> 00:10:45.870
We're going to populate it with the matter directly from our controller.

00:10:45.870 --> 00:10:47.820
Same is the case with student address.

00:10:47.820 --> 00:10:55.080
We're not populating the student right here when to use the settle method to set the

00:10:55.080 --> 00:10:56.170
student value.

00:10:56.170 --> 00:11:00.850
Next year's the repository.

00:11:00.850 --> 00:11:02.920
Now watch your guests.

00:11:02.920 --> 00:11:04.290
We want toe right.

00:11:04.290 --> 00:11:07.890
The class that's going toe have all the crowd operations,

00:11:07.890 --> 00:11:08.830
etcetera.

00:11:08.830 --> 00:11:09.800
Well,

00:11:09.800 --> 00:11:10.850
you will be surprised.

00:11:10.850 --> 00:11:16.500
Here is the student repository and here is a student address repository.

00:11:16.500 --> 00:11:17.630
And Thies,

00:11:17.630 --> 00:11:25.750
too interfaces basically is enough for you to perform the crowd operations.

00:11:25.750 --> 00:11:28.670
It may not sound too obvious,

00:11:28.670 --> 00:11:30.400
but let me explain.

00:11:30.400 --> 00:11:37.090
This is a feature offspring data when when you introduce an interface that extends the

00:11:37.090 --> 00:11:40.070
crowd repository and by the way,

00:11:40.070 --> 00:11:42.220
this is going to take a couple of para meters,

00:11:42.220 --> 00:11:47.550
the first of which the type of the entity and its unique ardent fire.

00:11:47.550 --> 00:11:51.370
Same is the case with student address.

00:11:51.370 --> 00:11:57.930
I've created a repository for student address and once he used this particular interface to

00:11:57.930 --> 00:12:04.850
extend your interface and provide this para meters spring will create so called a proxy

00:12:04.850 --> 00:12:06.450
object on the fly,

00:12:06.450 --> 00:12:11.380
and that object will have all the behavior to perform the crowd operations.

00:12:11.380 --> 00:12:13.140
That's the magic offspring data.

00:12:13.140 --> 00:12:14.980
Once you load this application,

00:12:14.980 --> 00:12:20.910
it will also create an instance on the fly or a proxy object that would perform the crowd

00:12:20.910 --> 00:12:21.750
operations.

00:12:21.750 --> 00:12:26.560
It's not really magical because we're just providing all the information required all the

00:12:26.560 --> 00:12:30.190
basic information required to perform the crowd operations.

00:12:30.190 --> 00:12:33.480
And since we didn't create the tables on our own,

00:12:33.480 --> 00:12:39.310
and we're letting the have done a deal with the tables using the entity classes,

00:12:39.310 --> 00:12:44.380
Spring also has the knowledge and how to manipulate the data with these entities.

00:12:44.380 --> 00:12:46.800
You may not believe it,

00:12:46.800 --> 00:12:47.950
but it's going to work.

00:12:47.950 --> 00:12:51.750
So here is our controller logic.

00:12:51.750 --> 00:12:57.290
Whenever we hit the your with hello when they get this particular logic can.

00:12:57.290 --> 00:13:03.260
Also trying to do here is we're just leveraging small the methods available in this

00:13:03.260 --> 00:13:10.990
repositories and of course not to mention a lot off springboard for just happening in here

00:13:10.990 --> 00:13:10.990
.

00:13:10.990 --> 00:13:16.050
Since we annotated this interface with Repository,

00:13:16.050 --> 00:13:20.140
this is going to be auto scan and so we're able to dependence,

00:13:20.140 --> 00:13:24.850
inject indoor controller and again this is not the best practice.

00:13:24.850 --> 00:13:30.130
We would rather want to dependents injector repository into a service.

00:13:30.130 --> 00:13:33.470
And we want to make the sobers into the control of logic.

00:13:33.470 --> 00:13:35.300
But for now,

00:13:35.300 --> 00:13:36.950
we can keep patrolling.

00:13:36.950 --> 00:13:42.600
So what I'm trying to do here is I'm trying to call this method bill It all.

00:13:42.600 --> 00:13:48.040
And that would just delayed all the entities managed by this repository just so that will

00:13:48.040 --> 00:13:52.150
have a clean database before we perform any operations.

00:13:52.150 --> 00:13:55.190
And then I'm just trying to create a couple of objects.

00:13:55.190 --> 00:13:59.920
One is student and the other is student address.

00:13:59.920 --> 00:14:03.420
And inside the student entity,

00:14:03.420 --> 00:14:06.670
I'm trying to set the student address.

00:14:06.670 --> 00:14:10.170
And why Sporza inside student address.

00:14:10.170 --> 00:14:12.250
I'm trying to set the student.

00:14:12.250 --> 00:14:13.870
And then finally,

00:14:13.870 --> 00:14:19.370
I'm trying to call the same method off student that will not only save the student,

00:14:19.370 --> 00:14:23.950
but also its corresponding entity student address as well.

00:14:23.950 --> 00:14:30.350
That happens because off this 1 to 1 relation again,

00:14:30.350 --> 00:14:31.750
this is having a topic,

00:14:31.750 --> 00:14:34.550
not something to be discussed now.

00:14:34.550 --> 00:14:37.320
And finally,

00:14:37.320 --> 00:14:42.450
I'm just calling this method find all and trying to display all the objects.

00:14:42.450 --> 00:14:46.320
And you're not restricted to perform,

00:14:46.320 --> 00:14:53.250
save their host of other methods with me explore You have count,

00:14:53.250 --> 00:14:54.500
delete,

00:14:54.500 --> 00:14:56.400
delete all well,

00:14:56.400 --> 00:15:00.850
it's all entities managed by the report story and they've already used it.

00:15:00.850 --> 00:15:06.070
You can also use find all find by I D and you would send in.

00:15:06.070 --> 00:15:06.950
I didn't fire.

00:15:06.950 --> 00:15:13.080
And this is the reason why we have to provide the island to fire as a perimeter in this

00:15:13.080 --> 00:15:19.050
interfaces so that it will have knowledge on what is the identifier for the entity.

00:15:19.050 --> 00:15:20.740
And likewise,

00:15:20.740 --> 00:15:27.450
you have all the methods required to perform the crowd operations.

00:15:27.450 --> 00:15:30.240
You can write your own logic,

00:15:30.240 --> 00:15:32.420
will explore that incoming videos,

00:15:32.420 --> 00:15:32.850
for sure.

00:15:32.850 --> 00:15:34.470
But for now,

00:15:34.470 --> 00:15:36.750
believe it or not,

00:15:36.750 --> 00:15:38.110
this is all you need.

00:15:38.110 --> 00:15:40.350
That's the beauty offspring data.

00:15:40.350 --> 00:15:51.850
Let's run the application and we should be able to see the student object getting fetched

00:15:51.850 --> 00:15:53.090
from the database.

00:15:53.090 --> 00:16:02.150
And if you explore the council in here,

00:16:02.150 --> 00:16:06.550
you would see all the statements,

00:16:06.550 --> 00:16:12.650
all the log messages stating what happened after the application loads.

00:16:12.650 --> 00:16:22.520
That's it.

00:16:22.520 --> 00:16:26.250
The oral and see what's happening.

00:16:26.250 --> 00:16:32.150
And sure enough were able to retrieve the entry.

00:16:32.150 --> 00:16:37.020
This is not readable.

00:16:37.020 --> 00:16:38.370
So little straight into juice.

00:16:38.370 --> 00:16:46.850
A two string mattered and by the gold is methods are auto generated from eclipse.

00:16:46.850 --> 00:16:49.650
Just as I'm about to show you,

00:16:49.650 --> 00:16:52.990
I would select all the fields.

00:16:52.990 --> 00:16:59.520
They said the fire and same is the case here,

00:16:59.520 --> 00:17:00.060
too.

00:17:00.060 --> 00:17:02.360
Get her and said,

00:17:02.360 --> 00:17:02.850
Uh,

00:17:02.850 --> 00:17:10.520
select all lips generate.

00:17:10.520 --> 00:17:14.690
Save the file and read on the application.

00:17:14.690 --> 00:17:25.530
Let's go ahead and hit the you'll.

00:17:25.530 --> 00:17:26.860
Okay,

00:17:26.860 --> 00:17:28.250
we seem to be getting some editors.

00:17:28.250 --> 00:17:31.660
Let's take a look at what's going wrong.

00:17:31.660 --> 00:17:34.830
Okay?

00:17:34.830 --> 00:17:38.050
We have to go all the way to the top to see the exception,

00:17:38.050 --> 00:17:44.530
and it's a it's a stack.

00:17:44.530 --> 00:17:45.360
ALS rather.

00:17:45.360 --> 00:17:46.410
Why did this happen?

00:17:46.410 --> 00:17:52.460
Oh,

00:17:52.460 --> 00:17:53.090
I see.

00:17:53.090 --> 00:17:56.000
Can you guess what the problem is?

00:17:56.000 --> 00:18:00.850
It has something to do with the toasting method.

00:18:00.850 --> 00:18:05.250
Alicia is we're trying to print student address,

00:18:05.250 --> 00:18:10.380
and this is going to call the to string method off student address.

00:18:10.380 --> 00:18:12.360
And inside this method,

00:18:12.360 --> 00:18:14.310
we're trying to print the student object,

00:18:14.310 --> 00:18:19.700
which will then again call back the two string matter of student and just goes back and

00:18:19.700 --> 00:18:20.050
forth,

00:18:20.050 --> 00:18:23.890
and eventually it's a stack awards ladder.

00:18:23.890 --> 00:18:25.990
So to get it off this,

00:18:25.990 --> 00:18:32.350
we can we have to get it off the object details from here,

00:18:32.350 --> 00:18:34.680
and,

00:18:34.680 --> 00:18:35.050
uh,

00:18:35.050 --> 00:18:42.740
I hope this will Self Islet of the fine and relaunch our application.

00:18:42.740 --> 00:18:56.850
So let's go here and reload the application.

00:18:56.850 --> 00:19:00.760
And this time it has indeed worked.

00:19:00.760 --> 00:19:12.850
Now let's go back to the definition and see if we can understand any better.

00:19:12.850 --> 00:19:14.440
It's spring.

00:19:14.440 --> 00:19:19.070
There s mission is to provide a familiar and consistent spring based programming model what

00:19:19.070 --> 00:19:20.180
this actually means.

00:19:20.180 --> 00:19:26.620
We're trying to leverage the spring data functionality.

00:19:26.620 --> 00:19:28.890
Like,

00:19:28.890 --> 00:19:29.450
for example,

00:19:29.450 --> 00:19:33.390
we don't have to provide implementation to perform the crowd operations.

00:19:33.390 --> 00:19:39.050
And this particular interface is provided by spring framework.

00:19:39.050 --> 00:19:44.600
It is this interface that makes it possible to create the proxy objects on the fly.

00:19:44.600 --> 00:19:53.540
And so that's going to use things for us and ultimately the goal offspring data is too easy

00:19:53.540 --> 00:19:53.540
.

00:19:53.540 --> 00:19:54.660
There access layer,

00:19:54.660 --> 00:19:56.550
and we're seeing it life.

00:19:56.550 --> 00:19:59.410
I hope it makes sense.

