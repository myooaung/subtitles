WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.870
Okay,

00:00:00.870 --> 00:00:03.350
let us talk about the route application context.

00:00:03.350 --> 00:00:04.520
So far,

00:00:04.520 --> 00:00:06.770
we're able to perform the components can.

00:00:06.770 --> 00:00:11.670
Inside the following package we're in all or controllers are reciting,

00:00:11.670 --> 00:00:13.230
but down the line,

00:00:13.230 --> 00:00:16.440
we may actually have to introduce some additional components,

00:00:16.440 --> 00:00:21.410
because when we introduce some additional layers like service layer or the data access

00:00:21.410 --> 00:00:21.640
later,

00:00:21.640 --> 00:00:22.350
etcetera,

00:00:22.350 --> 00:00:26.360
we may have some additional components like this.

00:00:26.360 --> 00:00:29.140
We may have a service component,

00:00:29.140 --> 00:00:31.610
which is where our business logic would be reciting.

00:00:31.610 --> 00:00:37.120
And then we may have a repository component which will help us interact with the database,

00:00:37.120 --> 00:00:38.190
etcetera.

00:00:38.190 --> 00:00:46.130
We can actually perform competent scan on all those packages wherever these components are

00:00:46.130 --> 00:00:50.750
reciting and make them part of the dispatches all that XML file,

00:00:50.750 --> 00:00:54.950
so that when the Web application context gets created,

00:00:54.950 --> 00:00:57.670
all those instances would be created as well,

00:00:57.670 --> 00:00:59.350
which is perfectly fine.

00:00:59.350 --> 00:01:01.120
But the problem arises,

00:01:01.120 --> 00:01:03.890
especially when you have multiple dispatches.

00:01:03.890 --> 00:01:04.650
So let's,

00:01:04.650 --> 00:01:05.630
for example,

00:01:05.630 --> 00:01:07.350
inside our web dot XML file.

00:01:07.350 --> 00:01:10.400
We have a couple of dispatches,

00:01:10.400 --> 00:01:17.610
so let's and each would correspond to their own specific of application context.

00:01:17.610 --> 00:01:24.110
So performing the competent scan on service components from one conflict file will not

00:01:24.110 --> 00:01:24.750
suffice.

00:01:24.750 --> 00:01:30.200
Same has to be performed in all the conflict file for all the dispatcher Soviets,

00:01:30.200 --> 00:01:32.700
which is definitely not a good idea,

00:01:32.700 --> 00:01:36.940
because we may end up creating duplicate instances in each and every Web context.

00:01:36.940 --> 00:01:40.290
The answer to it is the route context.

00:01:40.290 --> 00:01:44.060
We're going to create yet another context called the root context,

00:01:44.060 --> 00:01:50.110
where we would keep all those common components that we want them to be accessible from all

00:01:50.110 --> 00:01:52.210
the Web application context that correspond.

00:01:52.210 --> 00:01:53.580
Each never dispatches solar.

00:01:53.580 --> 00:01:58.740
I'm going to show a diagram that would represent the scenario.

00:01:58.740 --> 00:01:59.780
But before that,

00:01:59.780 --> 00:02:03.750
let us try to understand how we can create a route application context.

00:02:03.750 --> 00:02:05.150
For that,

00:02:05.150 --> 00:02:10.280
you have to add a context Barham in this manner,

00:02:10.280 --> 00:02:14.100
along with the context loader listener.

00:02:14.100 --> 00:02:18.190
This is a class that would actually make use off this context.

00:02:18.190 --> 00:02:18.690
Batam.

00:02:18.690 --> 00:02:24.190
In order to find or locate the application context or XML,

00:02:24.190 --> 00:02:29.870
file and create the route context and inside the application context XML file,

00:02:29.870 --> 00:02:35.550
we would perform the components can off services or repositories,

00:02:35.550 --> 00:02:40.720
basically all the components that does not have that it relation with the dispatches all

00:02:40.720 --> 00:02:41.080
that.

00:02:41.080 --> 00:02:41.930
So,

00:02:41.930 --> 00:02:42.720
as a rule of thumb,

00:02:42.720 --> 00:02:47.980
you can remember that whatever goes inside the dispatches off that contact file has some

00:02:47.980 --> 00:02:50.180
kind of relation with the dispatcher,

00:02:50.180 --> 00:02:53.340
so that while inside the route application context,

00:02:53.340 --> 00:02:59.100
we would have components that will remain common for all the Web components.

00:02:59.100 --> 00:03:03.850
So let me quickly show you a diagram that represents the following scenario.

00:03:03.850 --> 00:03:07.700
So here we have a couple of dispatcher,

00:03:07.700 --> 00:03:12.460
so let's and their corresponding with the application contexts and the need to have

00:03:12.460 --> 00:03:13.780
application context,

00:03:13.780 --> 00:03:17.730
we have companies that are related to the dispatcher sold it,

00:03:17.730 --> 00:03:20.530
so we may have controllers view result,

00:03:20.530 --> 00:03:21.560
vers or handle map.

00:03:21.560 --> 00:03:22.230
Incompetent,

00:03:22.230 --> 00:03:22.950
etcetera.

00:03:22.950 --> 00:03:25.520
So here we have couple of dispatches.

00:03:25.520 --> 00:03:27.950
So let's along with their corresponding context.

00:03:27.950 --> 00:03:29.990
And inside this context,

00:03:29.990 --> 00:03:37.120
we have Singleton instance us off all the components that have a direct relation with the

00:03:37.120 --> 00:03:38.170
dispatcher sublet.

00:03:38.170 --> 00:03:44.360
So we may have things like controllers or view resolve er's our handler mappers etcetera.

00:03:44.360 --> 00:03:46.550
And then we have the route context,

00:03:46.550 --> 00:03:52.720
wherein we'll have the components that are going to remain common for all the Web component

00:03:52.720 --> 00:03:53.750
like these.

00:03:53.750 --> 00:03:59.160
So you can think off the route context as kind of like a parent context for the Web

00:03:59.160 --> 00:04:03.100
application context and whenever you need a specific competent,

00:04:03.100 --> 00:04:07.000
the continued for such inside the Web application context.

00:04:07.000 --> 00:04:08.950
If it doesn't find there,

00:04:08.950 --> 00:04:13.750
then the call would go to the root context to find irrelevant component.

00:04:13.750 --> 00:04:15.490
Hope it makes sense.

00:04:15.490 --> 00:04:16.590
Haven't see you soon.

