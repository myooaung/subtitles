WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.220
Okay,

00:00:01.220 --> 00:00:05.070
let's take a look at this magical file that is doing a lot off stuff.

00:00:05.070 --> 00:00:06.390
Let's break it down.

00:00:06.390 --> 00:00:08.310
And for stop with the sanitation.

00:00:08.310 --> 00:00:11.660
Although you're seeing single annotation in here,

00:00:11.660 --> 00:00:15.370
it is actually combination off multiple annotations.

00:00:15.370 --> 00:00:18.930
So this is one of the convenience provided by spring boot.

00:00:18.930 --> 00:00:23.050
Instead off you having to define or declare all these annotations,

00:00:23.050 --> 00:00:25.750
you can just declare one annotation.

00:00:25.750 --> 00:00:31.500
The first sanitation would just say that this particular file is the springboard conflict

00:00:31.500 --> 00:00:31.950
file.

00:00:31.950 --> 00:00:32.610
I mean,

00:00:32.610 --> 00:00:37.470
if you worked on spring projects before and when you define your contract file where he

00:00:37.470 --> 00:00:39.100
would list on all the beans,

00:00:39.100 --> 00:00:42.330
he would annotate it with advert configuration.

00:00:42.330 --> 00:00:43.290
Well,

00:00:43.290 --> 00:00:44.960
this is exact same annotation,

00:00:44.960 --> 00:00:46.200
but for spring boot.

00:00:46.200 --> 00:00:47.560
And secondly,

00:00:47.560 --> 00:00:49.970
you have this enable auto configuration,

00:00:49.970 --> 00:00:53.210
which will enable the auto configuration,

00:00:53.210 --> 00:00:56.400
meaning whatever the dependence is that you add in the palm,

00:00:56.400 --> 00:01:03.050
the XML file springboard will try to make a guess on what put with the ideal configuration

00:01:03.050 --> 00:01:06.100
so you don't have to create conflagrations.

00:01:06.100 --> 00:01:07.140
As an example,

00:01:07.140 --> 00:01:09.230
we never declare our dispatcher.

00:01:09.230 --> 00:01:14.310
So let it was all taken care by spring boot and even let's say that you're going to

00:01:14.310 --> 00:01:17.800
introduce some overtime framework like hibernate.

00:01:17.800 --> 00:01:23.270
Then you can just provide the start of dependency and spring but will take care off,

00:01:23.270 --> 00:01:24.910
creating the conflagration.

00:01:24.910 --> 00:01:28.100
And for a dependency like hibernate,

00:01:28.100 --> 00:01:29.670
he would need a data source,

00:01:29.670 --> 00:01:35.120
entity manager and the host off other conflagration details which would be taken care by

00:01:35.120 --> 00:01:36.080
the spring boat.

00:01:36.080 --> 00:01:39.420
You can also alright certain conflagrations if you wish,

00:01:39.420 --> 00:01:41.150
but more on it later.

00:01:41.150 --> 00:01:45.840
We also have this competent scan annotation,

00:01:45.840 --> 00:01:53.150
and this particular generation would enable springboard to scan all the beans in our

00:01:53.150 --> 00:01:53.850
project.

00:01:53.850 --> 00:01:58.320
I mean all the classes that are annotated with that direct controller,

00:01:58.320 --> 00:02:01.880
address service or address repository,

00:02:01.880 --> 00:02:03.050
etcetera.

00:02:03.050 --> 00:02:09.890
All those components would be discovered if you specify this particular annotation and the

00:02:09.890 --> 00:02:12.650
other annotations are not off a great significance.

00:02:12.650 --> 00:02:20.780
Once a specify the sanitation have to call this method run offspring application class.

00:02:20.780 --> 00:02:23.190
And here in the sanitation,

00:02:23.190 --> 00:02:25.670
we have actually enabled a lot off stuff,

00:02:25.670 --> 00:02:30.050
but it is in this class where the actual action will take place,

00:02:30.050 --> 00:02:36.590
so it's going to create the application context wherein you'll have all the singleton

00:02:36.590 --> 00:02:43.880
instance is and it will also register recommend line property source to expose command line

00:02:43.880 --> 00:02:48.850
arguments meaning this has something to do with externalized configurations,

00:02:48.850 --> 00:02:51.490
which will talk about that later point of time.

00:02:51.490 --> 00:02:57.430
And it would also help in refreshing the application context.

00:02:57.430 --> 00:02:57.880
Again,

00:02:57.880 --> 00:03:00.060
as we progress through the course,

00:03:00.060 --> 00:03:03.350
you will see these features being used.

00:03:03.350 --> 00:03:06.010
But ultimately,

00:03:06.010 --> 00:03:06.570
for now,

00:03:06.570 --> 00:03:11.580
you can think of this as this is going to kick start out application or bootstrap our

00:03:11.580 --> 00:03:17.660
application by combining everything that we defined and finally help us launch our

00:03:17.660 --> 00:03:18.470
application.

00:03:18.470 --> 00:03:19.140
Also,

00:03:19.140 --> 00:03:24.220
it's what mentioning that were not really creating a war are Kevin than deploying into them

00:03:24.220 --> 00:03:24.220
.

00:03:24.220 --> 00:03:25.050
But it's over.

00:03:25.050 --> 00:03:27.250
This is going to walk a little different.

00:03:27.250 --> 00:03:28.100
I mean,

00:03:28.100 --> 00:03:29.850
if you want to create a rock of,

00:03:29.850 --> 00:03:32.250
then you should be having a verb started to write.

00:03:32.250 --> 00:03:33.420
And moreover,

00:03:33.420 --> 00:03:34.800
within Builder project,

00:03:34.800 --> 00:03:44.870
we just run this file and everything is working and our application is working,

00:03:44.870 --> 00:03:45.350
gripped.

00:03:45.350 --> 00:03:49.550
So this is a John archive we're talking about.

00:03:49.550 --> 00:03:53.350
Another thing to note is for testing purposes.

00:03:53.350 --> 00:03:56.340
We developers may actually run this main method,

00:03:56.340 --> 00:03:58.100
but in production,

00:03:58.100 --> 00:04:01.220
this is not how it's going to work in production.

00:04:01.220 --> 00:04:07.450
We would actually deploy the jar file and that John file works at a standalone application

00:04:07.450 --> 00:04:07.450
,

00:04:07.450 --> 00:04:14.050
meaning you can run that jar with just a single command and we can treat their jar.

00:04:14.050 --> 00:04:15.310
If you remember,

00:04:15.310 --> 00:04:19.060
we call it a fat job that would have everything in place.

00:04:19.060 --> 00:04:20.080
It would have all them,

00:04:20.080 --> 00:04:21.770
but it's overs libraries,

00:04:21.770 --> 00:04:23.160
conflagrations and what?

00:04:23.160 --> 00:04:24.030
Not everything.

00:04:24.030 --> 00:04:25.950
To help run your application.

00:04:25.950 --> 00:04:29.450
In order to create that particular jar file,

00:04:29.450 --> 00:04:34.610
we can right click on the project Goto Maven.

00:04:34.610 --> 00:04:42.160
How rad the wrongness may have been build.

00:04:42.160 --> 00:04:57.310
It is successful,

00:04:57.310 --> 00:05:00.400
but in my case I have used an existing configuration.

00:05:00.400 --> 00:05:04.840
But you may be required to provide a goal with me.

00:05:04.840 --> 00:05:05.950
Show you what I mean.

00:05:05.950 --> 00:05:13.470
Here is where you need to mention the goal and the goal that we are focused on right now is

00:05:13.470 --> 00:05:18.330
package going to package everything as a jar archive.

00:05:18.330 --> 00:05:21.450
Because if you remember,

00:05:21.450 --> 00:05:26.490
that is artifact type we have chosen.

00:05:26.490 --> 00:05:28.840
We've done that while creating the project.

00:05:28.840 --> 00:05:29.970
Using spring initial eyes.

00:05:29.970 --> 00:05:31.460
There are spring tool suit.

00:05:31.460 --> 00:05:39.360
I believe it would default to John file and after the building successfully would see that

00:05:39.360 --> 00:05:42.830
the target directory of me just quickly refreshed.

00:05:42.830 --> 00:05:49.220
This has this artifact in place.

00:05:49.220 --> 00:05:55.050
Let's go to that directory and take a look at what's inside this file?

00:05:55.050 --> 00:05:57.460
I'm going to use the software.

00:05:57.460 --> 00:06:04.180
Seven zip to take a look at what's inside it.

00:06:04.180 --> 00:06:07.220
If you go to Mattei enough,

00:06:07.220 --> 00:06:17.210
you would notice this manifest file and it has specified our class file springboard

00:06:17.210 --> 00:06:17.900
application,

00:06:17.900 --> 00:06:19.250
which is a starting point.

00:06:19.250 --> 00:06:23.380
This is the file that were run to see our application working.

00:06:23.380 --> 00:06:28.520
And when you run this jar using a command in Windows,

00:06:28.520 --> 00:06:36.640
it's Java happened jar and the name of the jar file that would would stop everything but in

00:06:36.640 --> 00:06:37.070
generally.

00:06:37.070 --> 00:06:39.950
This is the class that gets called.

00:06:39.950 --> 00:06:45.650
Let me just show you real quick.

00:06:45.650 --> 00:06:47.650
So before you run the command,

00:06:47.650 --> 00:06:55.270
make sure that you terminate all this otherwise will have poor conflict.

00:06:55.270 --> 00:07:04.850
So I'm going to go here and location where John Farley,

00:07:04.850 --> 00:07:26.350
the deciding Java Have fun jar Hoop.

00:07:26.350 --> 00:07:31.650
Oh,

00:07:31.650 --> 00:07:32.050
God.

00:07:32.050 --> 00:07:34.150
Editor seemed to have not changed,

00:07:34.150 --> 00:07:45.950
so it's going to be slash D Still No,

00:07:45.950 --> 00:07:51.590
I guess I have to use the other slash and there you have it.

00:07:51.590 --> 00:08:05.390
Job a hyphen jar and let's run it and you're seeing the same result.

00:08:05.390 --> 00:08:08.350
Let's go to browser.

00:08:08.350 --> 00:08:13.250
You're fresh And it walked

