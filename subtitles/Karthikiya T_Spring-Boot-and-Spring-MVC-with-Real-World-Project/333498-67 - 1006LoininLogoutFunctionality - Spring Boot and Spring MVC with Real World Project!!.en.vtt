WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.430
Let's talk about the logging and lager functionality in our application and for this

00:00:05.430 --> 00:00:10.280
purpose have actually created a user account as Ola's on admin account,

00:00:10.280 --> 00:00:14.750
already going to talk about the registration process in some time.

00:00:14.750 --> 00:00:15.750
But for now,

00:00:15.750 --> 00:00:18.500
let's focus on the log and functionality.

00:00:18.500 --> 00:00:21.770
One thing that you would notice is that in this page,

00:00:21.770 --> 00:00:23.570
as well as in the registration page,

00:00:23.570 --> 00:00:26.440
we won't be needing those JSP fragments.

00:00:26.440 --> 00:00:28.200
I'm in the header footer,

00:00:28.200 --> 00:00:28.950
etcetera.

00:00:28.950 --> 00:00:33.750
So inside our just be filed for log in,

00:00:33.750 --> 00:00:35.650
I don't have them included.

00:00:35.650 --> 00:00:41.840
We also need to make sure that when authentication fails,

00:00:41.840 --> 00:00:44.650
there's an error message that gets displayed,

00:00:44.650 --> 00:00:45.650
for example,

00:00:45.650 --> 00:00:53.530
that Malaga in as a user and provide a random password which doesn't match with the user

00:00:53.530 --> 00:00:54.050
name.

00:00:54.050 --> 00:01:02.200
So we should be able to desperate this particular message and of the user does log in.

00:01:02.200 --> 00:01:08.350
The user must be seeing a dashboard in this manner,

00:01:08.350 --> 00:01:10.950
and when these alongs out,

00:01:10.950 --> 00:01:16.380
when it longer from the application and this message should be displayed,

00:01:16.380 --> 00:01:19.200
if it is admin who's trying to log in,

00:01:19.200 --> 00:01:29.990
then admin must be seeing a different page called list users to manage list off users

00:01:29.990 --> 00:01:35.780
available so let's see how we can introduced this functionality.

00:01:35.780 --> 00:01:42.150
The first and foremost in that way to do is to let spring know where our log in pages

00:01:42.150 --> 00:01:45.290
somebody for when you had this particular you are.

00:01:45.290 --> 00:01:52.860
We would instruct spring that we need to have our user authenticated with this particular

00:01:52.860 --> 00:02:01.460
resource and the way we tell spring the same is with the security configuration security

00:02:01.460 --> 00:02:02.380
configuration.

00:02:02.380 --> 00:02:03.550
As you might know,

00:02:03.550 --> 00:02:04.770
where l a was toe.

00:02:04.770 --> 00:02:05.240
All right,

00:02:05.240 --> 00:02:08.470
the default behavior provided best spring.

00:02:08.470 --> 00:02:09.440
And in this case,

00:02:09.440 --> 00:02:16.160
I'm specifying that it needs to go to this particular resource in order to have the user

00:02:16.160 --> 00:02:17.150
authentication.

00:02:17.150 --> 00:02:22.510
So it is expected that will have a log in form in this resource.

00:02:22.510 --> 00:02:28.420
What this means is the moment you try to access the application,

00:02:28.420 --> 00:02:32.110
spring will redirect to this particular resource.

00:02:32.110 --> 00:02:35.160
And inside our user controller,

00:02:35.160 --> 00:02:39.410
we do have a get mapping for that very resource.

00:02:39.410 --> 00:02:43.850
Spring is also going to send few arguments.

00:02:43.850 --> 00:02:46.280
We'll talk about it in a minute.

00:02:46.280 --> 00:02:50.150
But these conditions won't be met for the first time.

00:02:50.150 --> 00:02:54.560
And we're trying to return the name of the view that we want to render,

00:02:54.560 --> 00:02:55.980
which in this case,

00:02:55.980 --> 00:02:56.750
is log in.

00:02:56.750 --> 00:03:04.990
So it's this page we're rendering and it is expected that will have couple of feels one is

00:03:04.990 --> 00:03:07.650
user name and the other is password.

00:03:07.650 --> 00:03:11.870
And you to make sure that the name would map the water,

00:03:11.870 --> 00:03:14.140
the name that you would give inside the entity.

00:03:14.140 --> 00:03:16.960
Here's the name and the password.

00:03:16.960 --> 00:03:18.950
So there's a couple of input fields.

00:03:18.950 --> 00:03:23.850
We also have a CIA sort of talking for security reasons.

00:03:23.850 --> 00:03:27.500
We was we talked about it in our security chapter.

00:03:27.500 --> 00:03:34.920
So once up somebody enters the log in details and clicks on the submit button,

00:03:34.920 --> 00:03:36.550
we're going to submit this form.

00:03:36.550 --> 00:03:37.320
Basically,

00:03:37.320 --> 00:03:42.150
we're sending a request in the form off forced to this particular resource.

00:03:42.150 --> 00:03:48.870
But we don't have a post mapping for this for this particular log in string.

00:03:48.870 --> 00:03:56.420
That's because Spring is already going to handle the Post requests that come from the log

00:03:56.420 --> 00:03:57.150
in page,

00:03:57.150 --> 00:04:04.800
and it will make use off the method that were introduced Lord user by user name to fetch

00:04:04.800 --> 00:04:08.750
all the user details and so it can go ahead and authenticate the user.

00:04:08.750 --> 00:04:11.390
If there is some kind of an error.

00:04:11.390 --> 00:04:12.270
For example,

00:04:12.270 --> 00:04:13.800
user name and password didn't match,

00:04:13.800 --> 00:04:14.570
for instance,

00:04:14.570 --> 00:04:20.240
then it's just going to render the same page again for what we already have and get mapping

00:04:20.240 --> 00:04:20.240
.

00:04:20.240 --> 00:04:23.050
So it is this method which have been walked.

00:04:23.050 --> 00:04:26.290
But this time since user name and password didn't match,

00:04:26.290 --> 00:04:29.780
the string would be populated with some error,

00:04:29.780 --> 00:04:32.600
and here we're checking to see if it is not now.

00:04:32.600 --> 00:04:36.150
And we're trying to populate the model object,

00:04:36.150 --> 00:04:39.800
which will be sent back to the log in page.

00:04:39.800 --> 00:04:43.550
And we're trying to display that message in here.

00:04:43.550 --> 00:04:50.960
So that's what whenever somebody tries to log in with invalid credentials there seeing that

00:04:50.960 --> 00:04:51.670
message,

00:04:51.670 --> 00:04:55.690
however,

00:04:55.690 --> 00:04:56.950
the authentication is well,

00:04:56.950 --> 00:04:59.780
and good spring will by default,

00:04:59.780 --> 00:05:01.650
go to the context spot.

00:05:01.650 --> 00:05:08.850
That means the default application part without any mention of the resource.

00:05:08.850 --> 00:05:16.450
And we have a handler method to handle that very request.

00:05:16.450 --> 00:05:18.550
So whenever there is a request,

00:05:18.550 --> 00:05:23.170
get request two and no resource,

00:05:23.170 --> 00:05:29.670
then this is the method that gets called and inside here we're trying to check to see the

00:05:29.670 --> 00:05:33.150
role of the user because we want to render the page accordingly.

00:05:33.150 --> 00:05:34.590
If there's an admin,

00:05:34.590 --> 00:05:37.090
then we want to render the list user's page.

00:05:37.090 --> 00:05:39.950
If it is a normal user,

00:05:39.950 --> 00:05:43.180
then we want toe populate the dashboard.

00:05:43.180 --> 00:05:44.750
The welcome to DuPage.

00:05:44.750 --> 00:05:56.090
I'm in this page and inside this mattered get current user roles.

00:05:56.090 --> 00:06:03.300
We're trying to access the security context and thereby we're getting the user roles

00:06:03.300 --> 00:06:05.380
associated with the current logged in user.

00:06:05.380 --> 00:06:12.420
And the reason why Spring has this knowledge is because we already told spring how to

00:06:12.420 --> 00:06:13.790
access to user details.

00:06:13.790 --> 00:06:15.160
With this particular method,

00:06:15.160 --> 00:06:22.000
we will talk about how this user list is populated in a while,

00:06:22.000 --> 00:06:24.700
But let's take a look at the law.

00:06:24.700 --> 00:06:26.100
Got functionality as well.

00:06:26.100 --> 00:06:33.040
The law goat is bottled the navigation bar,

00:06:33.040 --> 00:06:38.250
and so we have it as part of the JSP file GSP fragment file.

00:06:38.250 --> 00:06:43.050
So that's inside navigation.

00:06:43.050 --> 00:06:46.550
And inside here we're trying to play a little trick.

00:06:46.550 --> 00:06:48.820
Whenever somebody clicks this link,

00:06:48.820 --> 00:06:49.570
log out,

00:06:49.570 --> 00:06:54.950
we're going to call a JavaScript method submit and we're trying to submit ahead and form.

00:06:54.950 --> 00:06:57.450
This one won't be seen by the user,

00:06:57.450 --> 00:07:06.580
but the purpose off it is is to send a request a post request to the log out resource which

00:07:06.580 --> 00:07:09.930
will be received by the spring security and it will longer.

00:07:09.930 --> 00:07:14.720
These are from the context and will render back the homepage which will,

00:07:14.720 --> 00:07:15.630
of course,

00:07:15.630 --> 00:07:23.580
be redirected to the log in the source and would ultimately end up here.

00:07:23.580 --> 00:07:27.510
But this time the string would be populated with the law.

00:07:27.510 --> 00:07:28.560
Got message,

00:07:28.560 --> 00:07:33.360
and we're checking to see if it is not now.

00:07:33.360 --> 00:07:41.110
If it is not know we want toe populate the model object with the name message.

00:07:41.110 --> 00:07:46.950
And ultimately we're asking to render this particular view,

00:07:46.950 --> 00:07:48.450
which is this.

00:07:48.450 --> 00:07:52.000
And so the message would be rendered accordingly,

00:07:52.000 --> 00:07:54.760
in case often,

00:07:54.760 --> 00:07:57.630
ever of the credential fails.

00:07:57.630 --> 00:07:59.860
We're trying to render and adder.

00:07:59.860 --> 00:08:01.470
Otherwise,

00:08:01.470 --> 00:08:02.550
it's a message.

00:08:02.550 --> 00:08:08.190
All right.

00:08:08.190 --> 00:08:10.680
I hope it makes sense.

