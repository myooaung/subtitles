WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.890
Let's talk about how user registration walks.

00:00:02.890 --> 00:00:05.750
You can make the register as a user or as an admin.

00:00:05.750 --> 00:00:09.500
We have a couple of hyperlinks as part of the log in page itself.

00:00:09.500 --> 00:00:12.740
And depending on the link that you click as best we get,

00:00:12.740 --> 00:00:13.790
records will be sent.

00:00:13.790 --> 00:00:18.350
So we have a JSP page associate ID with each one off these links.

00:00:18.350 --> 00:00:19.910
If you click on user,

00:00:19.910 --> 00:00:22.750
that's going to send requests to the server.

00:00:22.750 --> 00:00:24.850
But this popular you are.

00:00:24.850 --> 00:00:32.140
And if you click this link that's going to send request with this your whole admin

00:00:32.140 --> 00:00:32.950
registration.

00:00:32.950 --> 00:00:36.210
We have get mapping methods inside the controller toe,

00:00:36.210 --> 00:00:37.580
handle these two requests.

00:00:37.580 --> 00:00:42.890
So let's take a look at to get mapping for this.

00:00:42.890 --> 00:00:46.950
It is a mattered I was talking about.

00:00:46.950 --> 00:00:53.700
And all we're trying to do is to populate the model object with an attribute,

00:00:53.700 --> 00:00:56.860
essentially a command object.

00:00:56.860 --> 00:01:00.050
We're going to use the same entry class as the command object.

00:01:00.050 --> 00:01:01.750
But this name,

00:01:01.750 --> 00:01:03.950
we're going to use this name inside off form.

00:01:03.950 --> 00:01:09.560
So we're asking spring to render this particular view,

00:01:09.560 --> 00:01:10.450
which is this.

00:01:10.450 --> 00:01:12.890
And here we have this user form.

00:01:12.890 --> 00:01:14.010
Well,

00:01:14.010 --> 00:01:17.050
we're trying to populate all these renter data.

00:01:17.050 --> 00:01:20.070
Once the data is populated and clicked on,

00:01:20.070 --> 00:01:20.880
submit button.

00:01:20.880 --> 00:01:26.750
A request will be sent in the form off a post request to the same path,

00:01:26.750 --> 00:01:32.070
so that will ultimately end up in the post mapping matter.

00:01:32.070 --> 00:01:36.840
And here we have the use of form object,

00:01:36.840 --> 00:01:42.360
which will hold all these renter data as well as the binding result will talk about it in a

00:01:42.360 --> 00:01:44.410
minute initial.

00:01:44.410 --> 00:01:47.050
What we're trying to do is to perform validation.

00:01:47.050 --> 00:01:51.520
Let's take a look at what's inside this particular class.

00:01:51.520 --> 00:01:54.400
Validation hit a tous.

00:01:54.400 --> 00:02:00.030
It is a class that were introduced that will implement were not the interpreters of Alba

00:02:00.030 --> 00:02:02.910
last part of the spring framework by the data.

00:02:02.910 --> 00:02:09.570
It will give us a lot of convenience to provide the validation feature for our forms.

00:02:09.570 --> 00:02:12.750
So this is the matter that we're trying to call.

00:02:12.750 --> 00:02:15.510
And if you notice we're sending couple off arguments,

00:02:15.510 --> 00:02:17.260
one is the user form.

00:02:17.260 --> 00:02:19.650
Other is the binding result object,

00:02:19.650 --> 00:02:23.250
and so we're able to receive them in here.

00:02:23.250 --> 00:02:26.410
The address is an interface,

00:02:26.410 --> 00:02:32.320
and finding result is an implementation off the interface.

00:02:32.320 --> 00:02:39.390
So it's possible that we send the binding result object to here and initially were trying

00:02:39.390 --> 00:02:41.950
to convert this object in tow,

00:02:41.950 --> 00:02:43.450
the user object,

00:02:43.450 --> 00:02:50.310
and then we're liberating some of the validation framework available in spring to perform

00:02:50.310 --> 00:02:52.110
validation here.

00:02:52.110 --> 00:02:57.600
We're trying to see if the value entered in the field user name is empty or with white

00:02:57.600 --> 00:02:58.250
space.

00:02:58.250 --> 00:02:59.150
If so,

00:02:59.150 --> 00:03:00.850
then we wanted to display message.

00:03:00.850 --> 00:03:02.250
Well,

00:03:02.250 --> 00:03:04.440
this is a key that we're sending.

00:03:04.440 --> 00:03:06.350
It corresponds to a message.

00:03:06.350 --> 00:03:12.800
This is the validation or properties specifically for this purpose.

00:03:12.800 --> 00:03:14.880
So essentially,

00:03:14.880 --> 00:03:18.040
when you say no,

00:03:18.040 --> 00:03:18.750
empty,

00:03:18.750 --> 00:03:20.910
not empty,

00:03:20.910 --> 00:03:26.900
spring is actually going to take a look at this resource bundle and fresh the value this

00:03:26.900 --> 00:03:27.950
well is required.

00:03:27.950 --> 00:03:33.550
And we're also mentioning the field name.

00:03:33.550 --> 00:03:38.350
That is where the center would be displayed at later point of time.

00:03:38.350 --> 00:03:42.250
So for each and every field,

00:03:42.250 --> 00:03:46.430
we have this error object to see if we have another.

00:03:46.430 --> 00:03:46.810
If so,

00:03:46.810 --> 00:03:47.950
then we wanted to render it.

00:03:47.950 --> 00:03:53.340
Similarly,

00:03:53.340 --> 00:03:55.450
we have a few more checks.

00:03:55.450 --> 00:04:03.400
We're checking to see if the user enter data or the user name pause in between 6 to 32

00:04:03.400 --> 00:04:04.150
characters.

00:04:04.150 --> 00:04:06.450
If not again.

00:04:06.450 --> 00:04:08.950
We wanted to display particular message,

00:04:08.950 --> 00:04:20.700
which is this and it corresponds to the is the name field Likewise we have one for double

00:04:20.700 --> 00:04:26.630
Get use the name and guess if the user enters the same user name that was all that existing

00:04:26.630 --> 00:04:27.480
in the database.

00:04:27.480 --> 00:04:29.850
Then they will see another.

00:04:29.850 --> 00:04:34.050
We pretty much have the same kind of validation for password field as well.

00:04:34.050 --> 00:04:40.480
So once about addition is done,

00:04:40.480 --> 00:04:48.360
we're going to check to see this object binding result and see if it has another.

00:04:48.360 --> 00:04:52.090
So if any of these conditions are not met,

00:04:52.090 --> 00:04:58.700
Spring will populate that where the object with errors and we're checking to see if it has

00:04:58.700 --> 00:04:59.200
intercepts.

00:04:59.200 --> 00:05:02.150
So then we're trying to render the same page,

00:05:02.150 --> 00:05:04.700
which is this.

00:05:04.700 --> 00:05:05.930
And this time,

00:05:05.930 --> 00:05:09.400
since ETA has some object and the status,

00:05:09.400 --> 00:05:18.760
we're going to see the error message in case of their own lawyers.

00:05:18.760 --> 00:05:23.190
Everything is well and good will go ahead and try to save the user.

00:05:23.190 --> 00:05:24.050
Enter data.

00:05:24.050 --> 00:05:29.210
This time we're using the user service object,

00:05:29.210 --> 00:05:30.670
which is dependence injected.

00:05:30.670 --> 00:05:38.950
And we've already seen some of the methods in the world as part of the he was a service.

00:05:38.950 --> 00:05:40.250
Let's take a look.

00:05:40.250 --> 00:05:45.050
So here is the same operation we're trying to perform,

00:05:45.050 --> 00:05:53.410
and all we're trying to do here is we're trying to encode the password isn't the decrypt

00:05:53.410 --> 00:05:55.650
password and quarter We wanted a scene,

00:05:55.650 --> 00:05:58.500
an example of the same in our spring security chapter.

00:05:58.500 --> 00:06:08.750
And then we're trying to access the user role from the subject and then trying to set list

00:06:08.750 --> 00:06:15.410
off rules that this user should be associated with in this case,

00:06:15.410 --> 00:06:16.750
the one days of tohave.

00:06:16.750 --> 00:06:28.150
Only this role and not to mention that use the repository has this very method which will

00:06:28.150 --> 00:06:32.000
help us fetch the whole object from the role table here.

00:06:32.000 --> 00:06:37.850
I should also mention that have manually populated the role table with couple off roads.

00:06:37.850 --> 00:06:44.590
I'm going to show it in a while and finally I'm setting the set off roles.

00:06:44.590 --> 00:06:46.750
If you remember,

00:06:46.750 --> 00:06:48.850
we have one too many mapping.

00:06:48.850 --> 00:06:58.240
We have a set off roles inside the user entity answerable Toe said it ultimately very isn't

00:06:58.240 --> 00:07:00.100
the user repository object,

00:07:00.100 --> 00:07:01.580
which was dependence,

00:07:01.580 --> 00:07:04.030
injected and calling it smothered,

00:07:04.030 --> 00:07:07.500
save to save the user into the database.

00:07:07.500 --> 00:07:12.850
And once the user registers,

00:07:12.850 --> 00:07:16.560
we're also trying to perform an auto logon.

00:07:16.560 --> 00:07:21.730
I've only walked you through the logic off the auto log in,

00:07:21.730 --> 00:07:23.950
but let's take a look at it again.

00:07:23.950 --> 00:07:31.600
All I'm trying to do is I'm asking spring to manually attend to get with my chord in this

00:07:31.600 --> 00:07:32.150
manner.

00:07:32.150 --> 00:07:34.590
I'm trying to fetch the user details,

00:07:34.590 --> 00:07:37.600
trying to create a talking which will hold all the values.

00:07:37.600 --> 00:07:43.750
Print authenticated is in one of the spring provided methods and then ultimately,

00:07:43.750 --> 00:07:47.980
I'm checking to see if it is if it has authenticated the users successfully.

00:07:47.980 --> 00:07:55.890
And then we're telling spring that the user result indicated Finally,

00:07:55.890 --> 00:08:02.900
we're redirecting toe this part of your page so it would send a get request to welcome

00:08:02.900 --> 00:08:07.550
which will take us to this particular mattered.

00:08:07.550 --> 00:08:11.250
And based on the user role,

00:08:11.250 --> 00:08:13.410
if they use it all is admin.

00:08:13.410 --> 00:08:17.610
It has to be this page which we need to populate.

00:08:17.610 --> 00:08:26.000
Otherwise we want to populate the welcome to do so let me enter to use the name.

00:08:26.000 --> 00:08:40.450
Hold that existing hopes.

00:08:40.450 --> 00:08:53.170
So this is the page that I was talking about to go here.

00:08:53.170 --> 00:09:09.580
You should be able to look at that particular view and here it iss We have pretty much the

00:09:09.580 --> 00:09:10.650
same procedure,

00:09:10.650 --> 00:09:15.650
our same flu for admin registration as well.

00:09:15.650 --> 00:09:25.590
Except that we're sending the role as an Edmund and we're trying to redirect toe list off

00:09:25.590 --> 00:09:26.290
users,

00:09:26.290 --> 00:09:31.150
so that would send the request to this particular mattered.

00:09:31.150 --> 00:09:33.360
And inside here,

00:09:33.360 --> 00:09:39.050
we're trying to get all the available users by using the service object.

00:09:39.050 --> 00:09:52.340
And I'm using the report stir method to find all the available users populating the list

00:09:52.340 --> 00:09:52.640
off you,

00:09:52.640 --> 00:10:02.490
the SAS part of the attribute users and the mosque in spring to take us to this view,

00:10:02.490 --> 00:10:12.650
which is this We're gonna talk about this at later point of time.

00:10:12.650 --> 00:10:16.600
But here's the floor for registration.

00:10:16.600 --> 00:10:19.990
Have you also show you the SQL statements I was talking about?

00:10:19.990 --> 00:10:29.340
I populated this file data or SQL with a couple off instructions to populate couple off

00:10:29.340 --> 00:10:31.450
rules in this manner.

00:10:31.450 --> 00:10:37.850
If you're using extra database and if you name this file as Daryl or SQL,

00:10:37.850 --> 00:10:44.300
this would be picked up automatically and will be run on the database and not to mention

00:10:44.300 --> 00:10:50.850
that have been It will actually create tables on our behalf once you create those entities

00:10:50.850 --> 00:10:53.450
so we don't have to have DDO statements.

00:10:53.450 --> 00:10:57.060
All right,

00:10:57.060 --> 00:10:58.190
Told would make sense

