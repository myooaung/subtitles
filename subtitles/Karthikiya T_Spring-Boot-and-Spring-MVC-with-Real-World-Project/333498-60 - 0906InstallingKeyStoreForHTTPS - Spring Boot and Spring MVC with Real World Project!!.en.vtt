WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.570
the moment you send a request to the server all the data from the client,

00:00:04.570 --> 00:00:05.450
for example,

00:00:05.450 --> 00:00:12.060
all the data submitted with the estimable form will be sent in the form off packets and

00:00:12.060 --> 00:00:13.840
people with bad intentions I'm in.

00:00:13.840 --> 00:00:18.090
Hackers can actually sneak into your network and read those packets.

00:00:18.090 --> 00:00:19.770
And if you're using Sgtp,

00:00:19.770 --> 00:00:25.290
all the back of data would be in the text or the binary format,

00:00:25.290 --> 00:00:31.290
which can easily be translated into human readable language in order to have a secure

00:00:31.290 --> 00:00:37.450
connection went to make sure that we use or incorporate a mechanism where request can be

00:00:37.450 --> 00:00:38.640
sent through history.

00:00:38.640 --> 00:00:39.770
GPS protocol.

00:00:39.770 --> 00:00:43.950
Hester Libya stands for hypertext transfer protocol secure.

00:00:43.950 --> 00:00:46.410
It is exact same protocol,

00:00:46.410 --> 00:00:54.470
but it comes with the delis rapper Transport Layer security rapper that will ensure that

00:00:54.470 --> 00:00:58.850
the data that is being transported between these two entities client and server is

00:00:58.850 --> 00:01:05.390
encrypted using a mechanism called public and private keys so that even if the hacker

00:01:05.390 --> 00:01:07.880
somehow manages to read the data in the packet,

00:01:07.880 --> 00:01:10.350
he cannot use it in any manner.

00:01:10.350 --> 00:01:12.190
And when I say keys,

00:01:12.190 --> 00:01:13.950
they're not strings.

00:01:13.950 --> 00:01:18.050
They're actually certificates managed by the silver.

00:01:18.050 --> 00:01:18.960
I mean,

00:01:18.960 --> 00:01:20.190
it goes something like this,

00:01:20.190 --> 00:01:23.750
both find and Silver will have a handshake.

00:01:23.750 --> 00:01:24.680
I mean,

00:01:24.680 --> 00:01:27.970
the both understand that their boat are trusted parties,

00:01:27.970 --> 00:01:29.490
and once they know each other,

00:01:29.490 --> 00:01:33.650
so is going to send a public key to the client.

00:01:33.650 --> 00:01:40.100
Trend is going to use the public key in order to encrypt the data and on the silver end,

00:01:40.100 --> 00:01:45.560
once the requested received silver is going to use a private key in order to understand

00:01:45.560 --> 00:01:48.050
what's inside that encrypted data.

00:01:48.050 --> 00:01:49.800
So that way.

00:01:49.800 --> 00:01:57.250
So where is sure that the request is coming from the client and not from are not resources

00:01:57.250 --> 00:01:57.250
?

00:01:57.250 --> 00:02:03.770
And also this will ensure that the hacker will not understand anything about what's being

00:02:03.770 --> 00:02:04.550
communicated.

00:02:04.550 --> 00:02:11.050
I've already talked about this protocols in detail in one off my previous courses,

00:02:11.050 --> 00:02:16.290
and talking more about this is definitely beyond the scope of this course.

00:02:16.290 --> 00:02:23.570
But we need to have some kind of a mechanism or a tool that will manage the certificates on

00:02:23.570 --> 00:02:24.510
the seller side,

00:02:24.510 --> 00:02:28.660
and that tool is a tool offered by Oracle.

00:02:28.660 --> 00:02:30.950
That's key tool.

00:02:30.950 --> 00:02:33.160
It's a command line tool.

00:02:33.160 --> 00:02:35.220
By just running a command,

00:02:35.220 --> 00:02:37.350
we can actually create a key store,

00:02:37.350 --> 00:02:41.180
and here is the command that I had drum.

00:02:41.180 --> 00:02:50.720
It goes something like this and you would be asked to enter a password that you will

00:02:50.720 --> 00:02:57.620
remember and to the password and just leave all the rest of the questions to the defaults.

00:02:57.620 --> 00:03:00.480
And once you do that,

00:03:00.480 --> 00:03:08.490
you have to configure some para meters our attributes inside your springboard application.

00:03:08.490 --> 00:03:10.150
And here are they.

00:03:10.150 --> 00:03:20.270
So this is a location where you're GKS file would be deciding the file that you sort of

00:03:20.270 --> 00:03:27.000
created with this command line have to provide exact same location and then the password to

00:03:27.000 --> 00:03:27.950
the key store.

00:03:27.950 --> 00:03:34.050
And I'm also conferring the port number.

00:03:34.050 --> 00:03:39.650
This is typically the port that is used for Esther DPS communication.

00:03:39.650 --> 00:03:47.490
I'm ordered in the default port of the Tomcats over and now I'm starting to use this.

00:03:47.490 --> 00:03:50.770
And from this point,

00:03:50.770 --> 00:03:52.150
don't wants to do that.

00:03:52.150 --> 00:03:54.550
Go to the browser.

00:03:54.550 --> 00:03:57.550
Now you can access our send requests with us.

00:03:57.550 --> 00:04:03.550
Should EBS protocol and all the communication would take place in secure manner.

00:04:03.550 --> 00:04:07.080
Hope it makes sense

