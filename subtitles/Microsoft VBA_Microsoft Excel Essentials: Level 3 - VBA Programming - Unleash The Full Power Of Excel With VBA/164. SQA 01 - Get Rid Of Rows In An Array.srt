1
00:00:00,000 --> 00:00:02,440
Okay,

2
00:00:02,440 --> 00:00:02,790
guys.

3
00:00:02,790 --> 00:00:06,480
And welcome to this brand new section student questions answered.

4
00:00:06,480 --> 00:00:08,990
But I had this question in a few hours ago and says,

5
00:00:08,990 --> 00:00:09,210
Hi,

6
00:00:09,210 --> 00:00:09,570
Alan.

7
00:00:09,570 --> 00:00:12,400
I've created an array like you've shown us in the lecture,

8
00:00:12,400 --> 00:00:15,440
and I also have a dynamic name range in my excel sheet.

9
00:00:15,440 --> 00:00:15,730
Listen,

10
00:00:15,730 --> 00:00:21,380
all the I DS that I wish to exclude from the array e g Mireille equals on the I D to

11
00:00:21,380 --> 00:00:22,050
exclude.

12
00:00:22,050 --> 00:00:23,730
Is there a way to do this?

13
00:00:23,730 --> 00:00:26,050
While there are three ways to do this,

14
00:00:26,050 --> 00:00:30,970
the 1st 1 is horrendously complicating using preserve with the rays,

15
00:00:30,970 --> 00:00:32,790
which I never use.

16
00:00:32,790 --> 00:00:38,430
And the other two ways are either to check when you populate the array if the value to be

17
00:00:38,430 --> 00:00:40,650
excluded is in the active cell,

18
00:00:40,650 --> 00:00:42,700
in which case don't read it into the array.

19
00:00:42,700 --> 00:00:47,000
But obviously we're going to be using Excel calculations there to do it.

20
00:00:47,000 --> 00:00:48,890
And using a loop to loop through,

21
00:00:48,890 --> 00:00:52,500
which is not as efficient is doing it in code.

22
00:00:52,500 --> 00:00:53,020
So,

23
00:00:53,020 --> 00:00:57,540
by far the simplest way of doing this in the most efficient way of doing this is to

24
00:00:57,540 --> 00:01:01,770
actually capture the entire array in one shot on.

25
00:01:01,770 --> 00:01:02,740
Then literally,

26
00:01:02,740 --> 00:01:04,010
when you write the array.

27
00:01:04,010 --> 00:01:08,460
Then do the checking to see if it's of value that you want to exclude or not.

28
00:01:08,460 --> 00:01:08,850
Okay,

29
00:01:08,850 --> 00:01:10,610
so here's the code.

30
00:01:10,610 --> 00:01:11,750
I'm just going to run it through.

31
00:01:11,750 --> 00:01:13,300
There's a Chiti.

32
00:01:13,300 --> 00:01:15,040
You can already see how fast this work.

33
00:01:15,040 --> 00:01:20,710
So basically what we have is 20,000 loans of days that they have a start time stop time,

34
00:01:20,710 --> 00:01:21,390
the elapsed time.

35
00:01:21,390 --> 00:01:27,530
So let me just run the code and you will see that that takes 1.1 seconds to run.

36
00:01:27,530 --> 00:01:30,860
And that is across however many lines of day,

37
00:01:30,860 --> 00:01:31,490
Trey said,

38
00:01:31,490 --> 00:01:35,870
as 20,000 lines of data processed in one second,

39
00:01:35,870 --> 00:01:36,690
doing it this way.

40
00:01:36,690 --> 00:01:39,480
So let me just talk you through the code here.

41
00:01:39,480 --> 00:01:40,840
I've set up the variable,

42
00:01:40,840 --> 00:01:43,430
so I have my Raya's variants declaring the array.

43
00:01:43,430 --> 00:01:47,170
The road count captures the row count in here now.

44
00:01:47,170 --> 00:01:50,160
Obviously this is going to capture the maximum number,

45
00:01:50,160 --> 00:01:56,780
so it's going to capture 20,000 lines of data on because we have exclusions that's going to

46
00:01:56,780 --> 00:01:58,460
be bigger than we want it to be.

47
00:01:58,460 --> 00:02:02,560
But we also know it's never going to be bigger than the number of entries in this column,

48
00:02:02,560 --> 00:02:04,540
so that's gonna work perfectly fine.

49
00:02:04,540 --> 00:02:05,250
That is to say,

50
00:02:05,250 --> 00:02:07,040
it runs room one second anyway,

51
00:02:07,040 --> 00:02:09,300
and then we have a right loop for where?

52
00:02:09,300 --> 00:02:11,550
A loop that we're going to use to write the data.

53
00:02:11,550 --> 00:02:12,150
Now,

54
00:02:12,150 --> 00:02:15,860
here I have turned the application screen updating off.

55
00:02:15,860 --> 00:02:16,320
Obviously,

56
00:02:16,320 --> 00:02:20,710
I've tested the code before I did this aan den to make it even faster,

57
00:02:20,710 --> 00:02:25,590
I have turned off excels built in automatic calculations.

58
00:02:25,590 --> 00:02:29,630
It is critical you turn this back on at the very end of the code.

59
00:02:29,630 --> 00:02:30,930
So at the beginning,

60
00:02:30,930 --> 00:02:33,040
application screen updating equals false.

61
00:02:33,040 --> 00:02:35,750
Turn that off application dot calculation,

62
00:02:35,750 --> 00:02:39,690
Excel Calculation manual that stops Excel,

63
00:02:39,690 --> 00:02:40,040
dune.

64
00:02:40,040 --> 00:02:41,410
Any calculations?

65
00:02:41,410 --> 00:02:42,450
Okay,

66
00:02:42,450 --> 00:02:48,440
next part range de two e clear contents That's gonna wipe out what's in columns D and E,

67
00:02:48,440 --> 00:02:50,240
which is where we're writing our data.

68
00:02:50,240 --> 00:02:55,350
Then we're gonna add the start time just to clock the speed at range G one so arranged,

69
00:02:55,350 --> 00:02:57,350
you want don't value equals time,

70
00:02:57,350 --> 00:03:00,910
and then we're gonna Riedel the data in one bite.

71
00:03:00,910 --> 00:03:01,720
What we're going to say is,

72
00:03:01,720 --> 00:03:05,740
Mireille equals range a one current region dot select,

73
00:03:05,740 --> 00:03:08,020
and it's just gonna gobble all of that up there.

74
00:03:08,020 --> 00:03:09,520
There's also going to capture this,

75
00:03:09,520 --> 00:03:14,120
but we're only interested in these two elements column A and B,

76
00:03:14,120 --> 00:03:16,480
And just as we looked at earlier in the course,

77
00:03:16,480 --> 00:03:18,860
I'm going to read the upper bound of the array.

78
00:03:18,860 --> 00:03:23,850
That is how many rows off data are there into the valuable row.

79
00:03:23,850 --> 00:03:27,160
Can't and then we get down to a simple loop to write the data.

80
00:03:27,160 --> 00:03:29,210
So range D one select.

81
00:03:29,210 --> 00:03:33,370
This is where we're going to begin writing our data on a rat resume.

82
00:03:33,370 --> 00:03:33,850
Next.

83
00:03:33,850 --> 00:03:39,660
That is gonna lay this code to execute because what we're gonna do is use the match

84
00:03:39,660 --> 00:03:43,660
function the worksheet function dot match on.

85
00:03:43,660 --> 00:03:45,480
We're gonna test my array,

86
00:03:45,480 --> 00:03:46,740
right Loop one.

87
00:03:46,740 --> 00:03:51,610
So on the first pass through this is gonna be testing my array 11 that is,

88
00:03:51,610 --> 00:03:55,760
on the first situation the value in 11 comma range,

89
00:03:55,760 --> 00:03:56,910
my named range.

90
00:03:56,910 --> 00:03:59,740
And that is your dynamic named range there.

91
00:03:59,740 --> 00:04:01,940
And obviously we're gonna hit combat zero Chris,

92
00:04:01,940 --> 00:04:03,580
we want an exact match.

93
00:04:03,580 --> 00:04:05,030
So what we've said is,

94
00:04:05,030 --> 00:04:07,450
if this is an error,

95
00:04:07,450 --> 00:04:12,450
therefore the value here is not found in your exclusion list.

96
00:04:12,450 --> 00:04:16,510
Go ahead and populate the array so the active cell value equals my array.

97
00:04:16,510 --> 00:04:16,900
Right.

98
00:04:16,900 --> 00:04:20,340
Loop one on the first past three combat one,

99
00:04:20,340 --> 00:04:27,060
an active cell offset 01 column B don't value equals my array.

100
00:04:27,060 --> 00:04:28,130
Right loop,

101
00:04:28,130 --> 00:04:28,900
too.

102
00:04:28,900 --> 00:04:33,180
So it will be element one part two and then we're going to move down the cell.

103
00:04:33,180 --> 00:04:40,270
So if we do not find a match if this function here the worksheet function match looking at

104
00:04:40,270 --> 00:04:43,140
your named range returns an error,

105
00:04:43,140 --> 00:04:46,470
then we want to right what is in the array.

106
00:04:46,470 --> 00:04:48,370
Otherwise do nothing on,

107
00:04:48,370 --> 00:04:49,280
then just go through.

108
00:04:49,280 --> 00:04:51,090
So returning off the era,

109
00:04:51,090 --> 00:04:55,700
trapping here on we turn it back on once this loop is completed.

110
00:04:55,700 --> 00:04:56,180
Now,

111
00:04:56,180 --> 00:04:56,560
with the end,

112
00:04:56,560 --> 00:05:02,110
we're just gonna have to stop time to G two and we're gonna turn back on the calculations

113
00:05:02,110 --> 00:05:05,100
on we're gonna turn back on the screen updating.

114
00:05:05,100 --> 00:05:10,820
So let me just delete columns D and E or clear the contents more to the point.

115
00:05:10,820 --> 00:05:12,770
And that's exactly what this is going to do.

116
00:05:12,770 --> 00:05:15,230
So when I hit play boom,

117
00:05:15,230 --> 00:05:15,630
they go,

118
00:05:15,630 --> 00:05:18,130
it runs through in one second.

119
00:05:18,130 --> 00:05:20,610
So I don't know how big your data set is.

120
00:05:20,610 --> 00:05:21,100
Obviously,

121
00:05:21,100 --> 00:05:24,090
if it's more than 32,000 odd lines,

122
00:05:24,090 --> 00:05:27,190
you're gonna need to change these inter jizz two lungs.

123
00:05:27,190 --> 00:05:31,960
But if it's less than 35,000 Your fine with vintages and obviously integers and more

124
00:05:31,960 --> 00:05:32,480
efficient.

125
00:05:32,480 --> 00:05:34,950
They only use two bytes of memory rather than four.

126
00:05:34,950 --> 00:05:35,500
Okay,

127
00:05:35,500 --> 00:05:36,390
I hope that's helped.

128
00:05:36,390 --> 00:05:37,630
Clarify that for you.

129
00:05:37,630 --> 00:05:42,150
You can find this file is the downloadable resource from this very lecture so you can have

130
00:05:42,150 --> 00:05:43,080
a play around them.

131
00:05:43,080 --> 00:05:45,200
Hopefully that helps any more questions.

132
00:05:45,200 --> 00:05:46,000
Just let me know.

133
00:05:46,000 --> 00:05:47,110
Thanks very much.

