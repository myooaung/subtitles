WEBVTT
ï»¿1
00:00:00.000 --> 00:00:02.520
Okay,

2
00:00:02.520 --> 00:00:02.980
guys,

3
00:00:02.980 --> 00:00:03.160
Um,

4
00:00:03.160 --> 00:00:04.410
welcome back now.

5
00:00:04.410 --> 00:00:09.460
It just dropped into a new module and have created new summary of routine called in string

6
00:00:09.460 --> 00:00:10.040
demo.

7
00:00:10.040 --> 00:00:13.900
So you'll remember from the last light of the two pieces of information we needed to

8
00:00:13.900 --> 00:00:20.090
capture where what the start point of the string we're looking for is on what the length

9
00:00:20.090 --> 00:00:21.710
off that string is.

10
00:00:21.710 --> 00:00:26.500
So here I've just added a valuable called my month exactly as it's called in the project

11
00:00:26.500 --> 00:00:30.760
that we've been working up to now on have hard coded that that is going to be called

12
00:00:30.760 --> 00:00:31.640
January.

13
00:00:31.640 --> 00:00:34.950
So we have a couple of options when we use in string.

14
00:00:34.950 --> 00:00:41.120
So what we're gonna do is read the start position into the variable to begin with X and

15
00:00:41.120 --> 00:00:42.370
what we're going to say is,

16
00:00:42.370 --> 00:00:44.800
i n s t r,

17
00:00:44.800 --> 00:00:48.050
that is the VB instruction for in string.

18
00:00:48.050 --> 00:00:48.530
Now,

19
00:00:48.530 --> 00:00:50.480
the start position you can omit,

20
00:00:50.480 --> 00:00:51.600
and if you admit it,

21
00:00:51.600 --> 00:00:53.960
it will begin at position number one.

22
00:00:53.960 --> 00:00:55.160
But I like to hard code.

23
00:00:55.160 --> 00:00:57.850
It's on to say begin at position one.

24
00:00:57.850 --> 00:00:58.440
Now,

25
00:00:58.440 --> 00:01:02.290
the first string is the string that you are looking in,

26
00:01:02.290 --> 00:01:03.580
and in this instance,

27
00:01:03.580 --> 00:01:06.350
it's gonna be range a three.

28
00:01:06.350 --> 00:01:10.190
So range a $3 value.

29
00:01:10.190 --> 00:01:12.260
That is where we are looking.

30
00:01:12.260 --> 00:01:15.150
That's the where string to is.

31
00:01:15.150 --> 00:01:20.440
What are we looking for on we are looking for my month,

32
00:01:20.440 --> 00:01:23.090
which we have read into the variable up here.

33
00:01:23.090 --> 00:01:31.030
So we are looking for my month in range A $3 value comma there we have a few different

34
00:01:31.030 --> 00:01:31.790
options here.

35
00:01:31.790 --> 00:01:36.080
We're buying re compared database compare on vb text compare.

36
00:01:36.080 --> 00:01:41.140
I have absolutely never used database compared but what I want to show you is the

37
00:01:41.140 --> 00:01:44.840
difference between buying a re compare and text compare.

38
00:01:44.840 --> 00:01:48.790
So let's use binary and I'm gonna close that off.

39
00:01:48.790 --> 00:01:52.520
I'm just going to hit enter and I'm gonna copy exactly the same code there.

40
00:01:52.520 --> 00:01:55.540
Or almost exactly the same code up to that point.

41
00:01:55.540 --> 00:01:57.190
Copy paste.

42
00:01:57.190 --> 00:02:01.190
And here I'm gonna call this why on this time,

43
00:02:01.190 --> 00:02:03.150
instead of choosing the binary compare,

44
00:02:03.150 --> 00:02:05.450
I am going to choose the VB text.

45
00:02:05.450 --> 00:02:07.630
Compare now I haven't closed brackets,

46
00:02:07.630 --> 00:02:10.810
so let's just step through that code and look what happens.

47
00:02:10.810 --> 00:02:13.520
So here X in string.

48
00:02:13.520 --> 00:02:17.060
I'm beginning to position one off range a three d value.

49
00:02:17.060 --> 00:02:19.060
I am looking for my month,

50
00:02:19.060 --> 00:02:26.320
which is January in this instance and we can see that that is it a position of 22 that

51
00:02:26.320 --> 00:02:28.720
gives us our start point.

52
00:02:28.720 --> 00:02:29.560
And here,

53
00:02:29.560 --> 00:02:30.510
if I step through,

54
00:02:30.510 --> 00:02:32.430
it's also 22.

55
00:02:32.430 --> 00:02:33.230
But look,

56
00:02:33.230 --> 00:02:37.610
what happens if I change the J to lower Case J on,

57
00:02:37.610 --> 00:02:39.450
then step through that code again.

58
00:02:39.450 --> 00:02:41.330
So we're still looking for January.

59
00:02:41.330 --> 00:02:42.950
We're still looking in a three.

60
00:02:42.950 --> 00:02:44.100
But this time,

61
00:02:44.100 --> 00:02:53.130
if I hover over X because I have used a binder re compare it is case sensitive so X will

62
00:02:53.130 --> 00:02:58.850
not return any value because the lower case January is not found in this string.

63
00:02:58.850 --> 00:03:00.270
And conversely,

64
00:03:00.270 --> 00:03:00.890
why?

65
00:03:00.890 --> 00:03:02.640
Because we have used VB.

66
00:03:02.640 --> 00:03:05.120
Text compare has been found.

67
00:03:05.120 --> 00:03:06.460
So there's the difference.

68
00:03:06.460 --> 00:03:11.230
Buying re compare is case sensitive on the VB text.

69
00:03:11.230 --> 00:03:13.840
Compare is not case sensitive.

70
00:03:13.840 --> 00:03:14.600
Okay,

71
00:03:14.600 --> 00:03:17.700
so now we know one useful piece of information.

72
00:03:17.700 --> 00:03:23.810
So what we can say here is we now know that start point on what we're gonna do will change

73
00:03:23.810 --> 00:03:28.550
that back to opera Kase January because it is application January in our actual code,

74
00:03:28.550 --> 00:03:37.450
and I'm gonna take all of this copy and I'm going to drop that over the number five on that

75
00:03:37.450 --> 00:03:39.230
is where we are starting.

76
00:03:39.230 --> 00:03:39.770
In fact,

77
00:03:39.770 --> 00:03:44.980
what I'm gonna do just there on the hitter space.

78
00:03:44.980 --> 00:03:45.310
No,

79
00:03:45.310 --> 00:03:47.360
Reset the project on day.

80
00:03:47.360 --> 00:03:53.580
I am going to do that and know we are down to here and enter on Tabin.

81
00:03:53.580 --> 00:03:57.430
So this middle line of code here it's all one line of code.

82
00:03:57.430 --> 00:03:58.420
It's just separated.

83
00:03:58.420 --> 00:04:00.840
This tells us where we're going to begin.

84
00:04:00.840 --> 00:04:02.970
The next thing we need to know is,

85
00:04:02.970 --> 00:04:05.740
how long is that string?

86
00:04:05.740 --> 00:04:11.660
So what we're gonna do is we're going to use a simple from there were just a boy equals

87
00:04:11.660 --> 00:04:12.740
actually able to use why?

88
00:04:12.740 --> 00:04:21.140
Let's use that equals the lengths off my months on Let's step through that bump,

89
00:04:21.140 --> 00:04:21.320
bump,

90
00:04:21.320 --> 00:04:21.570
bump,

91
00:04:21.570 --> 00:04:26.970
bump So said We know now that the length is seven characters.

92
00:04:26.970 --> 00:04:32.710
So here we can replace the number five with Len my months.

93
00:04:32.710 --> 00:04:36.940
So copy pace that over number five on.

94
00:04:36.940 --> 00:04:38.130
There we go on.

95
00:04:38.130 --> 00:04:38.390
No,

96
00:04:38.390 --> 00:04:43.210
look what happens to the word January here with me Execute of this line of code.

97
00:04:43.210 --> 00:04:44.660
Perfect.

98
00:04:44.660 --> 00:04:50.730
So we have worked out dynamically at runtime where our particular text ring lives on.

99
00:04:50.730 --> 00:04:53.510
We've also captured exactly how long it is.

100
00:04:53.510 --> 00:04:54.200
Okay,

101
00:04:54.200 --> 00:04:57.680
I'll see when the next like the way we're going to put that into action for all of the

102
00:04:57.680 --> 00:04:59.560
strings that we want tohave folded.

103
00:04:59.560 --> 00:05:01.050
I'll see you in the next lecture.

