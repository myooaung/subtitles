WEBVTT
ï»¿1
00:00:00.000 --> 00:00:02.860
Okay,

2
00:00:02.860 --> 00:00:03.260
guys,

3
00:00:03.260 --> 00:00:03.390
um,

4
00:00:03.390 --> 00:00:04.300
welcome back.

5
00:00:04.300 --> 00:00:04.540
Now,

6
00:00:04.540 --> 00:00:08.930
in the last lecture on a raise that you're gonna come to a few lectures on now,

7
00:00:08.930 --> 00:00:11.480
we're going to go through the absolute,

8
00:00:11.480 --> 00:00:17.050
most efficient way to load data intern array on read data from in a way.

9
00:00:17.050 --> 00:00:19.340
But just for backwards compatibility,

10
00:00:19.340 --> 00:00:22.650
in case you ever come across any code that does it the old fashioned way,

11
00:00:22.650 --> 00:00:25.820
we're going to go through that in the intervening lectures.

12
00:00:25.820 --> 00:00:26.480
Okay,

13
00:00:26.480 --> 00:00:29.500
So sub raise one is a simple,

14
00:00:29.500 --> 00:00:32.930
one dimensional static array there.

15
00:00:32.930 --> 00:00:34.790
Just to explain those two terms,

16
00:00:34.790 --> 00:00:41.380
A dimension in an array is the number of elements that are held within it.

17
00:00:41.380 --> 00:00:44.690
So you can have a single dimension array,

18
00:00:44.690 --> 00:00:47.040
which would be this kind of array here,

19
00:00:47.040 --> 00:00:54.750
where we essentially have one drawer with 1234567 boxes within it.

20
00:00:54.750 --> 00:00:55.140
Now,

21
00:00:55.140 --> 00:00:57.950
a static array is just that it is static.

22
00:00:57.950 --> 00:00:59.170
You set it up,

23
00:00:59.170 --> 00:01:01.880
you say what kind of valuable it's gonna hold on?

24
00:01:01.880 --> 00:01:03.750
You say how big it's going to bay.

25
00:01:03.750 --> 00:01:05.860
Where's the dynamic array?

26
00:01:05.860 --> 00:01:08.830
You can actually change the size of the array.

27
00:01:08.830 --> 00:01:14.520
That is how many elements are going to be within it at runtime so dynamic arrays much more

28
00:01:14.520 --> 00:01:18.580
useful because unless your data is always the same size,

29
00:01:18.580 --> 00:01:21.830
so days of the week would be a perfect use for a static array,

30
00:01:21.830 --> 00:01:24.120
because there's only ever going to be seven.

31
00:01:24.120 --> 00:01:26.900
But most of the time we're going to use dynamic a race.

32
00:01:26.900 --> 00:01:27.320
Now.

33
00:01:27.320 --> 00:01:33.280
The other important thing to remember about static arrays versus dynamic arrays is even if

34
00:01:33.280 --> 00:01:37.830
you destroy or erases a static array,

35
00:01:37.830 --> 00:01:41.990
its memory is still allocated in your computer.

36
00:01:41.990 --> 00:01:45.130
So if you have a 1,000,000 things in your static array,

37
00:01:45.130 --> 00:01:47.170
even if you were raised the array,

38
00:01:47.170 --> 00:01:50.340
there is still memory being used.

39
00:01:50.340 --> 00:01:53.680
Another reason that very few people ever use static a race.

40
00:01:53.680 --> 00:01:55.490
It wears a dynamic array.

41
00:01:55.490 --> 00:01:56.410
When you destroy it,

42
00:01:56.410 --> 00:01:58.690
don't destroy a dynamic array.

43
00:01:58.690 --> 00:02:00.850
The memory is released.

44
00:02:00.850 --> 00:02:01.760
Okay,

45
00:02:01.760 --> 00:02:03.780
so let's have a look at this quick demonstration.

46
00:02:03.780 --> 00:02:06.930
I have set up an array dim my array.

47
00:02:06.930 --> 00:02:07.300
A.

48
00:02:07.300 --> 00:02:09.480
What I'm gonna do is add a watch to that.

49
00:02:09.480 --> 00:02:13.990
We know have to do that so we'll be able to see exactly what's going on down here.

50
00:02:13.990 --> 00:02:19.700
So I have dimmed my array A and you can see that I've put seven in brackets.

51
00:02:19.700 --> 00:02:26.400
Now that is not the number of elements that it holds that is the upper bound.

52
00:02:26.400 --> 00:02:30.170
That is the last number in the array.

53
00:02:30.170 --> 00:02:30.490
Now,

54
00:02:30.490 --> 00:02:33.460
you may look at that and think that's gonna hold seven things,

55
00:02:33.460 --> 00:02:36.360
but you'll see that it doesn't when we actually start to load it.

56
00:02:36.360 --> 00:02:39.100
So I am calling the Simple sheet,

57
00:02:39.100 --> 00:02:43.280
which is this one and claiming the contents from D because that's where we're going to

58
00:02:43.280 --> 00:02:43.750
write them,

59
00:02:43.750 --> 00:02:44.050
too.

60
00:02:44.050 --> 00:02:46.280
So it's just step through this and have a look.

61
00:02:46.280 --> 00:02:47.630
So here we go.

62
00:02:47.630 --> 00:02:47.990
Here,

63
00:02:47.990 --> 00:02:49.530
we into the reading,

64
00:02:49.530 --> 00:02:50.170
the array.

65
00:02:50.170 --> 00:02:54.490
So what I'm gonna say is my array a my counter,

66
00:02:54.490 --> 00:02:56.390
which is the loop we're going to go through.

67
00:02:56.390 --> 00:03:01.710
And I've gone from 1 to 7 because of dim this as an upper bound of seven.

68
00:03:01.710 --> 00:03:04.410
So my array A my cancer,

69
00:03:04.410 --> 00:03:11.240
which is gonna be one on the first pass through this loop equals sells my cancer one on the

70
00:03:11.240 --> 00:03:15.350
first pass through on Row one and column one.

71
00:03:15.350 --> 00:03:19.190
So this will be 11 which is a one value.

72
00:03:19.190 --> 00:03:25.210
So on the first pass through and you can see that we now have values in our array and you

73
00:03:25.210 --> 00:03:26.630
can see that my array.

74
00:03:26.630 --> 00:03:29.500
A one has value of red.

75
00:03:29.500 --> 00:03:34.340
So I'm just gonna f eight through that a few times and you can see that it's loading up all

76
00:03:34.340 --> 00:03:35.450
of those values.

77
00:03:35.450 --> 00:03:40.570
And now here's a strange thing you remember appear that I said that this is the upper bound

78
00:03:40.570 --> 00:03:42.270
and not the number of elements.

79
00:03:42.270 --> 00:03:44.880
That's because whenever you set up an array,

80
00:03:44.880 --> 00:03:47.760
it begins counting at zero.

81
00:03:47.760 --> 00:03:48.060
Now,

82
00:03:48.060 --> 00:03:51.390
there is something we can do at the very top of the code to stop that happening.

83
00:03:51.390 --> 00:03:53.020
So it does begin counting that one,

84
00:03:53.020 --> 00:03:55.160
which we're gonna have a look at in just a second.

85
00:03:55.160 --> 00:03:56.150
So back to the code.

86
00:03:56.150 --> 00:04:02.250
So I have successfully read through this loop all of the values in a one through a seven.

87
00:04:02.250 --> 00:04:04.840
And now I'm just gonna do that in reverse.

88
00:04:04.840 --> 00:04:05.810
And same cells,

89
00:04:05.810 --> 00:04:07.750
my counter nomen fox.

90
00:04:07.750 --> 00:04:09.000
I wanna write two column day.

91
00:04:09.000 --> 00:04:15.050
So 14 1st row fourth column equals my array A on the first pass,

92
00:04:15.050 --> 00:04:16.050
that's gonna be one,

93
00:04:16.050 --> 00:04:19.200
And we could see down here that holds the value off red.

94
00:04:19.200 --> 00:04:21.430
So there's red loop through now.

95
00:04:21.430 --> 00:04:25.290
We're going to be having a look at yellow on so and so on and so on.

96
00:04:25.290 --> 00:04:27.980
And so we have written missile and sub.

97
00:04:27.980 --> 00:04:31.550
Now I said that this is the upper bound.

98
00:04:31.550 --> 00:04:31.810
Now,

99
00:04:31.810 --> 00:04:34.470
if we go went right to the tough of our code,

100
00:04:34.470 --> 00:04:44.360
let's help Here we write option base one that will no force all of our a race to begin

101
00:04:44.360 --> 00:04:45.220
counting that one.

102
00:04:45.220 --> 00:04:48.510
So let's just go through that code one more time on this time.

103
00:04:48.510 --> 00:04:51.490
Notice what happens when we load the array.

104
00:04:51.490 --> 00:04:52.630
If I click in here,

105
00:04:52.630 --> 00:04:58.610
you can see that the Dimension zero has been removed and we're actually beginning counting

106
00:04:58.610 --> 00:04:59.050
at one.

107
00:04:59.050 --> 00:05:01.030
So we now have regular pink,

108
00:05:01.030 --> 00:05:01.350
green,

109
00:05:01.350 --> 00:05:01.800
orange,

110
00:05:01.800 --> 00:05:02.390
prayerful.

111
00:05:02.390 --> 00:05:04.370
And now when we write it back,

112
00:05:04.370 --> 00:05:06.550
there you go.

113
00:05:06.550 --> 00:05:08.450
Everything works perfectly.

114
00:05:08.450 --> 00:05:10.780
A logically as you would think it would be.

115
00:05:10.780 --> 00:05:15.910
So it's a very good practice to always right option base one at the top,

116
00:05:15.910 --> 00:05:18.730
and that will force your A raise to begin at one.

117
00:05:18.730 --> 00:05:19.170
Okay,

118
00:05:19.170 --> 00:05:19.700
so far,

119
00:05:19.700 --> 00:05:20.380
so good.

120
00:05:20.380 --> 00:05:23.320
But what happens if we have a new entry?

121
00:05:23.320 --> 00:05:28.630
So what if we had another collapse down the bottom and we executed this code where we

122
00:05:28.630 --> 00:05:29.150
conceive,

123
00:05:29.150 --> 00:05:31.750
we load my array that it's gone regular pink,

124
00:05:31.750 --> 00:05:31.980
green,

125
00:05:31.980 --> 00:05:32.330
purple,

126
00:05:32.330 --> 00:05:32.810
blue,

127
00:05:32.810 --> 00:05:39.210
but it stopped reading there because we have hard coded this seven as an upper bound.

128
00:05:39.210 --> 00:05:41.960
And that's the drawback with static arrays,

129
00:05:41.960 --> 00:05:46.200
it does not account for how dynamic your data could be.

130
00:05:46.200 --> 00:05:47.600
So in the next lecture,

131
00:05:47.600 --> 00:05:48.830
we're gonna have a look a simple,

132
00:05:48.830 --> 00:05:50.360
one dimensional array again.

133
00:05:50.360 --> 00:05:52.750
But this time we're going to make it dynamic,

134
00:05:52.750 --> 00:05:54.880
so I'll see you in the next lecture.

