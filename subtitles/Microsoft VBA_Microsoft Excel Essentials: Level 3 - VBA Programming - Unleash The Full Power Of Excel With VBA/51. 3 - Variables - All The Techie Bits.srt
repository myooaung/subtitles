1
00:00:00,000 --> 00:00:02,430
Okay,

2
00:00:02,430 --> 00:00:02,850
guys.

3
00:00:02,850 --> 00:00:04,080
And welcome back.

4
00:00:04,080 --> 00:00:04,310
Now,

5
00:00:04,310 --> 00:00:07,800
you've just seen everything you could ever need to know about variables.

6
00:00:07,800 --> 00:00:08,780
But here's a quick,

7
00:00:08,780 --> 00:00:11,000
summary variables.

8
00:00:11,000 --> 00:00:14,500
There is a naming convention with variables,

9
00:00:14,500 --> 00:00:18,050
and it follows the same naming convention as subroutines.

10
00:00:18,050 --> 00:00:18,880
That is,

11
00:00:18,880 --> 00:00:23,300
they must be less than 255 characters in length.

12
00:00:23,300 --> 00:00:30,580
They can only use letters or numbers or underscores eso question marks and hashtags and not

13
00:00:30,580 --> 00:00:31,130
allowed.

14
00:00:31,130 --> 00:00:32,800
You are not allowed spaces,

15
00:00:32,800 --> 00:00:37,860
so the use camel case or underscores on they cannot begin with a number.

16
00:00:37,860 --> 00:00:39,600
You can have a number somewhere else in them,

17
00:00:39,600 --> 00:00:44,350
but the first digit cannot be a number or the first character cannot be a number.

18
00:00:44,350 --> 00:00:46,330
Now there is a notation,

19
00:00:46,330 --> 00:00:47,970
albeit unofficial,

20
00:00:47,970 --> 00:00:50,370
called the Lisinski notation,

21
00:00:50,370 --> 00:00:57,900
or sometimes known as Hungarian notation on that suggests prefix in names of variables and

22
00:00:57,900 --> 00:01:01,270
objects with an abbreviation of what they are.

23
00:01:01,270 --> 00:01:02,580
So as an example,

24
00:01:02,580 --> 00:01:03,740
if we had accounted,

25
00:01:03,740 --> 00:01:05,250
that was an inter jet.

26
00:01:05,250 --> 00:01:12,450
We may call that variable I NT in lower case because that short for interject my counter

27
00:01:12,450 --> 00:01:19,970
camel cased if you like as integer or if it's a form we may call it FRM my form or if it's

28
00:01:19,970 --> 00:01:21,750
a module M o d.

29
00:01:21,750 --> 00:01:23,950
The May 6 We've already used that one.

30
00:01:23,950 --> 00:01:26,350
If you want some more information on it,

31
00:01:26,350 --> 00:01:30,510
you'll find in the downloadable document that can get with this lecture this link to

32
00:01:30,510 --> 00:01:32,250
Wikipedia and it gives you a load.

33
00:01:32,250 --> 00:01:33,300
More information.

34
00:01:33,300 --> 00:01:38,440
I've gotten away without using most of it my entire program in life.

35
00:01:38,440 --> 00:01:40,960
But some of the things have actually used automatically,

36
00:01:40,960 --> 00:01:42,720
like mold the basics.

37
00:01:42,720 --> 00:01:43,910
Okay,

38
00:01:43,910 --> 00:01:48,870
we also have a look at the scope of a variable on the scope of a variable,

39
00:01:48,870 --> 00:01:52,710
basically means where you can see from,

40
00:01:52,710 --> 00:01:58,980
so the scope of a variable is detect determined by when you declare it so.

41
00:01:58,980 --> 00:02:01,680
If you declare it a procedure level,

42
00:02:01,680 --> 00:02:07,750
it can only be used in the sub that it's being declared in as we saw our little area.

43
00:02:07,750 --> 00:02:08,230
I mean,

44
00:02:08,230 --> 00:02:11,000
it's declared with the dim statement,

45
00:02:11,000 --> 00:02:18,120
and then we also have module level variables on bacon views anywhere within the module in

46
00:02:18,120 --> 00:02:19,790
which they're declared on a game,

47
00:02:19,790 --> 00:02:23,810
we declare with a dim statement on the very top.

48
00:02:23,810 --> 00:02:29,170
We have the project level variables which can be used anywhere within the current project,

49
00:02:29,170 --> 00:02:32,250
and we declare those with the public statement.

50
00:02:32,250 --> 00:02:37,280
Now you'll remember that we also have a slight modification to the procedure level.

51
00:02:37,280 --> 00:02:38,010
Variable,

52
00:02:38,010 --> 00:02:46,480
inasmuch is that we can pass values to another subroutine if we name the variable in the

53
00:02:46,480 --> 00:02:51,240
called subroutines name in the brackets after the subroutines name.

54
00:02:51,240 --> 00:02:52,170
Okay,

55
00:02:52,170 --> 00:02:54,260
now the lifetime of a valuable another.

56
00:02:54,260 --> 00:02:55,350
One of the key things.

57
00:02:55,350 --> 00:02:57,960
A locally declared variable,

58
00:02:57,960 --> 00:03:05,390
a dim valuable is destroyed at N sub of the subroutine in which it was declared,

59
00:03:05,390 --> 00:03:08,050
or if you have end in your code,

60
00:03:08,050 --> 00:03:09,360
it will be destroyed.

61
00:03:09,360 --> 00:03:10,060
At that point,

62
00:03:10,060 --> 00:03:12,850
that means your computer's memory is freed again.

63
00:03:12,850 --> 00:03:18,720
And now a module level variable declared with dim is only destroyed.

64
00:03:18,720 --> 00:03:22,340
A workbook close hitting stuff in the visual basic editor.

65
00:03:22,340 --> 00:03:28,230
A new sub is added to the module or the end statement is reached on.

66
00:03:28,230 --> 00:03:28,720
Finally,

67
00:03:28,720 --> 00:03:36,110
the procedure level public variable is destroyed at the end sub in the module in which it

68
00:03:36,110 --> 00:03:36,770
was declared.

69
00:03:36,770 --> 00:03:39,560
So that's just a fault in my notes there.

70
00:03:39,560 --> 00:03:43,070
So we're just going to change that or it reaches the end statement.

71
00:03:43,070 --> 00:03:43,890
Okay,

72
00:03:43,890 --> 00:03:49,450
assigning of value to a variable unless we assign a value to a very built then not much use

73
00:03:49,450 --> 00:03:53,870
to us now There are two types of way to assign a value to a variable.

74
00:03:53,870 --> 00:03:58,210
There is either dynamically coded or hard coded hard code.

75
00:03:58,210 --> 00:04:03,030
It would be if we said str my string equals Hello world.

76
00:04:03,030 --> 00:04:08,200
We've written that in the visual basic and it it lives in code and it doesn't matter what's

77
00:04:08,200 --> 00:04:14,430
going on in excel str my string will always equal Hello whale world because we've hard

78
00:04:14,430 --> 00:04:18,610
coded it and what we've looked at in the last few elections is dynamically code.

79
00:04:18,610 --> 00:04:19,600
In analysis,

80
00:04:19,600 --> 00:04:27,140
we have populated a value into the variable str my string by looking at excel and picking

81
00:04:27,140 --> 00:04:30,580
up the value from the range A one Okay,

82
00:04:30,580 --> 00:04:33,540
let's have look at the data types up until now.

83
00:04:33,540 --> 00:04:34,950
Other than the last lecture,

84
00:04:34,950 --> 00:04:37,710
we didn't actually declare our variables.

85
00:04:37,710 --> 00:04:40,890
So when we used my first variable,

86
00:04:40,890 --> 00:04:44,620
we didn't actually declare it and say what kind of data it would hold.

87
00:04:44,620 --> 00:04:45,960
And that's all this.

88
00:04:45,960 --> 00:04:47,620
Does you tell vb a.

89
00:04:47,620 --> 00:04:52,210
What kind of data is going to be stored So we have a few different options.

90
00:04:52,210 --> 00:04:56,390
But if you do not declare them by default,

91
00:04:56,390 --> 00:05:00,360
visual basic assumes it to be a variant.

92
00:05:00,360 --> 00:05:05,870
Now is it sets it up to bearable to hold any kind of data that's passed to it.

93
00:05:05,870 --> 00:05:08,040
Now they that has uses.

94
00:05:08,040 --> 00:05:10,200
But it also has one major drawback.

95
00:05:10,200 --> 00:05:12,250
If you look at the memory allocated,

96
00:05:12,250 --> 00:05:16,010
it uses 16 bytes of data.

97
00:05:16,010 --> 00:05:20,240
Not a problem if you only have one variable in your entire projects.

98
00:05:20,240 --> 00:05:22,310
But if you have multiple variables,

99
00:05:22,310 --> 00:05:24,170
it could easily become an issue.

100
00:05:24,170 --> 00:05:26,480
So looking at the top,

101
00:05:26,480 --> 00:05:28,580
if we if we consider interject,

102
00:05:28,580 --> 00:05:30,490
introduce any hole them,

103
00:05:30,490 --> 00:05:36,650
but between minus 7 32,068 and positive for 2767.

104
00:05:36,650 --> 00:05:43,370
If you're variable was to hold an integer and you didn't declare it as an integer,

105
00:05:43,370 --> 00:05:50,350
then it would allocate 16 bytes of memory in your computer rather than too,

106
00:05:50,350 --> 00:05:53,850
so it would be eight times more inefficient.

107
00:05:53,850 --> 00:05:54,730
Okay,

108
00:05:54,730 --> 00:06:00,510
lets with through these Boolean can only answer or can only hold true or false.

109
00:06:00,510 --> 00:06:01,640
Very small,

110
00:06:01,640 --> 00:06:04,950
very memory efficient only takes two bytes of memory.

111
00:06:04,950 --> 00:06:07,810
Now you can either read a value off.

112
00:06:07,810 --> 00:06:09,860
True or value are false.

113
00:06:09,860 --> 00:06:10,680
Inter 1,000,000,000.

114
00:06:10,680 --> 00:06:14,300
I must admit I have been programming for 20 years and I've never used it.

115
00:06:14,300 --> 00:06:16,960
But if one thing to note is,

116
00:06:16,960 --> 00:06:17,930
if you try to rent,

117
00:06:17,930 --> 00:06:19,550
read a text string.

118
00:06:19,550 --> 00:06:21,710
If there is text in the cell,

119
00:06:21,710 --> 00:06:23,490
Boolean would return.

120
00:06:23,490 --> 00:06:24,160
True,

121
00:06:24,160 --> 00:06:24,520
that is,

122
00:06:24,520 --> 00:06:25,230
it isn't blank.

123
00:06:25,230 --> 00:06:25,400
So,

124
00:06:25,400 --> 00:06:26,450
therefore is true.

125
00:06:26,450 --> 00:06:27,910
But if the cell was empty,

126
00:06:27,910 --> 00:06:29,210
it would return falls.

127
00:06:29,210 --> 00:06:30,690
Very quirky as a say,

128
00:06:30,690 --> 00:06:31,670
I've never used it.

129
00:06:31,670 --> 00:06:32,580
Interject.

130
00:06:32,580 --> 00:06:34,460
I use this all the time.

131
00:06:34,460 --> 00:06:35,760
Very useful in loops,

132
00:06:35,760 --> 00:06:42,870
which will become into shortly very efficient only uses two bytes then we have long on.

133
00:06:42,870 --> 00:06:48,900
That is for numbers longer than 32,000 or smaller than minus 32,000.

134
00:06:48,900 --> 00:06:52,360
The parameters there so you can download this imprint often.

135
00:06:52,360 --> 00:06:54,140
Memorize it if you want,

136
00:06:54,140 --> 00:06:57,720
but long no takes four bytes of memory.

137
00:06:57,720 --> 00:07:04,610
So if you're definitely dealing with numbers or whole numbers that a smaller than 32,000 in

138
00:07:04,610 --> 00:07:06,170
the range here in inches,

139
00:07:06,170 --> 00:07:09,850
don't bother resigning along because she can use twice a such memory.

140
00:07:09,850 --> 00:07:13,010
Only assign it as long.

141
00:07:13,010 --> 00:07:14,810
If it is a long number.

142
00:07:14,810 --> 00:07:22,460
Now the next do single and double are short for single prison single precision variable

143
00:07:22,460 --> 00:07:23,760
interval precision.

144
00:07:23,760 --> 00:07:25,080
Variable on.

145
00:07:25,080 --> 00:07:25,600
Basically,

146
00:07:25,600 --> 00:07:26,760
that'll hangs around.

147
00:07:26,760 --> 00:07:30,570
How many numbers do you have after a decimal points?

148
00:07:30,570 --> 00:07:35,830
I have no idea what for 028535 e plus 38 means,

149
00:07:35,830 --> 00:07:43,430
but it's less than the double one s O single precision valuables hold a certain number of

150
00:07:43,430 --> 00:07:47,550
decimal places on the double holds holds even more.

151
00:07:47,550 --> 00:07:48,610
Okay,

152
00:07:48,610 --> 00:07:49,770
I do.

153
00:07:49,770 --> 00:07:52,120
You single very rarely used double.

154
00:07:52,120 --> 00:07:56,220
And I would imagine unless you're dealing with scientific calculations,

155
00:07:56,220 --> 00:07:57,990
you're probably never going to use them either.

156
00:07:57,990 --> 00:07:59,380
Currency,

157
00:07:59,380 --> 00:08:02,950
These air the ranges for this nowhere into the eight byte section.

158
00:08:02,950 --> 00:08:05,470
I have never used currency in my entire life,

159
00:08:05,470 --> 00:08:06,980
but they're the parameters.

160
00:08:06,980 --> 00:08:10,040
Should you need to date again?

161
00:08:10,040 --> 00:08:13,710
Here are the ranges for the dates came taking a bites again.

162
00:08:13,710 --> 00:08:15,430
I have absolutely never used them.

163
00:08:15,430 --> 00:08:16,490
String.

164
00:08:16,490 --> 00:08:18,890
This is what we've used in the last few lectures.

165
00:08:18,890 --> 00:08:25,750
You use string all the time either to just ripper string a text value from a cell or to

166
00:08:25,750 --> 00:08:27,750
build foul names and path names,

167
00:08:27,750 --> 00:08:29,540
which we're gonna come to later in the course.

168
00:08:29,540 --> 00:08:30,340
Andi,

169
00:08:30,340 --> 00:08:33,820
you can explicitly declare something as a variant,

170
00:08:33,820 --> 00:08:36,950
which means I have no idea what's going to be passed to it.

171
00:08:36,950 --> 00:08:38,930
But you will be able to store anything.

172
00:08:38,930 --> 00:08:40,330
The drawback bean,

173
00:08:40,330 --> 00:08:46,500
the amount of bites it takes now We've looked at this in tax for declaring variables nice

174
00:08:46,500 --> 00:08:47,210
and simple.

175
00:08:47,210 --> 00:08:47,940
Dim.

176
00:08:47,940 --> 00:08:52,770
If you are declaring it locally or marginal level on public,

177
00:08:52,770 --> 00:08:54,850
if you are declaring it's a project level.

178
00:08:54,850 --> 00:08:56,030
Okay,

179
00:08:56,030 --> 00:08:56,280
No,

180
00:08:56,280 --> 00:09:00,160
you can't declare multiple variables on the same line.

181
00:09:00,160 --> 00:09:01,830
I tend not to do it,

182
00:09:01,830 --> 00:09:07,420
but you can do that so sometimes you'll see it written as dim X as in Georgia Comma.

183
00:09:07,420 --> 00:09:11,000
Why as long or public X as Inter jet?

184
00:09:11,000 --> 00:09:11,270
Why,

185
00:09:11,270 --> 00:09:16,520
as long there's a link here which will also see on the downloadable document that gives you

186
00:09:16,520 --> 00:09:18,160
a link to the Microsoft article.

187
00:09:18,160 --> 00:09:22,060
If you want to geek out on everything to do with variables,

188
00:09:22,060 --> 00:09:22,750
okay,

189
00:09:22,750 --> 00:09:24,110
well done for keeping up,

190
00:09:24,110 --> 00:09:25,850
and I will see you in the next lecture.

