WEBVTT
1
00:00:00.000 --> 00:00:01.008
- [Instructor] There are a couple of rules

2
00:00:01.008 --> 00:00:04.000
that you must know at this point

3
00:00:04.000 --> 00:00:07.003
in order to apply or use generics in your code.

4
00:00:07.003 --> 00:00:08.002
Let's look at them.

5
00:00:08.002 --> 00:00:10.006
The first rule is that generics works only

6
00:00:10.006 --> 00:00:12.001
with reference types.

7
00:00:12.001 --> 00:00:13.004
This essentially means

8
00:00:13.004 --> 00:00:16.009
that you can never use primitives with generics.

9
00:00:16.009 --> 00:00:19.004
Let's go to the IDE and write some code for this.

10
00:00:19.004 --> 00:00:22.006
So let's create another class here

11
00:00:22.006 --> 00:00:25.001
on the same package as the previous one,

12
00:00:25.001 --> 00:00:28.008
and let's name this class as Rules.

13
00:00:28.008 --> 00:00:31.006
In this, I'll write the main method.

14
00:00:31.006 --> 00:00:34.006
And now, let's create a list of ints,

15
00:00:34.006 --> 00:00:36.000
and this would be primitive ints,

16
00:00:36.000 --> 00:00:40.002
so List, that is java.util, the angle brackets,

17
00:00:40.002 --> 00:00:43.008
and this time, the type argument is the primitive int.

18
00:00:43.008 --> 00:00:47.002
Let's name this variable as integers,

19
00:00:47.002 --> 00:00:52.007
and let's create new ArrayList.

20
00:00:52.007 --> 00:00:56.005
Similarly, let's also label the type argument as int here,

21
00:00:56.005 --> 00:00:58.008
but since now, we have the diamond operator,

22
00:00:58.008 --> 00:01:02.002
there is no need to do that, so we can eliminate this.

23
00:01:02.002 --> 00:01:03.002
Now, if you see,

24
00:01:03.002 --> 00:01:05.007
you have compilishing problem on this line,

25
00:01:05.007 --> 00:01:07.008
and it says that the type argument

26
00:01:07.008 --> 00:01:10.005
cannot be of primitive type.

27
00:01:10.005 --> 00:01:13.001
So this is what it is, when you use generics,

28
00:01:13.001 --> 00:01:16.000
you will never be able to use primitives,

29
00:01:16.000 --> 00:01:18.005
you only have to use reference types.

30
00:01:18.005 --> 00:01:20.008
So, this code now can be changed

31
00:01:20.008 --> 00:01:25.004
to the integer wrapper type that we have in Java.

32
00:01:25.004 --> 00:01:27.001
Now, let's come on the next line

33
00:01:27.001 --> 00:01:33.001
and say integers.add, let me add a number, 10.

34
00:01:33.001 --> 00:01:34.006
And then, on the next line,

35
00:01:34.006 --> 00:01:39.008
let me take a primitive int variable, int number

36
00:01:39.008 --> 00:01:43.002
and retrieve the value at the zeroth index of that list,

37
00:01:43.002 --> 00:01:48.000
so I'll say integers.get zero.

38
00:01:48.000 --> 00:01:49.000
So, a minute ago,

39
00:01:49.000 --> 00:01:51.006
we said that generics does not work with primitives,

40
00:01:51.006 --> 00:01:54.006
but then, what happened on lines number nine and 10?

41
00:01:54.006 --> 00:01:56.004
I directly added the number 10

42
00:01:56.004 --> 00:01:59.003
into the list on line number nine,

43
00:01:59.003 --> 00:02:00.007
and on line number 10,

44
00:02:00.007 --> 00:02:02.009
I retrieved the value from the list

45
00:02:02.009 --> 00:02:04.006
into a primitive variable.

46
00:02:04.006 --> 00:02:05.008
So, how is this working?

47
00:02:05.008 --> 00:02:08.005
This is because the autoboxing

48
00:02:08.005 --> 00:02:12.006
and unboxing feature in Java is in action.

49
00:02:12.006 --> 00:02:16.000
On line number nine, autoboxing is in action,

50
00:02:16.000 --> 00:02:19.008
which means the primitive number 10 will be wrapped

51
00:02:19.008 --> 00:02:22.001
inside an integer-type object,

52
00:02:22.001 --> 00:02:25.005
and then that object will be inserted into the collection.

53
00:02:25.005 --> 00:02:27.000
On line number 10,

54
00:02:27.000 --> 00:02:30.002
when we try to retrieve the value at the zeroth index,

55
00:02:30.002 --> 00:02:32.005
it actually fetched an integer object,

56
00:02:32.005 --> 00:02:36.003
but then, it unwrapped the primitive from that object

57
00:02:36.003 --> 00:02:38.002
and made it available to us.

58
00:02:38.002 --> 00:02:41.008
So, autoboxing and boxing is how you're going to deal

59
00:02:41.008 --> 00:02:45.004
with the generic objects in case of primitives.

60
00:02:45.004 --> 00:02:48.005
The second rule is generic types differ

61
00:02:48.005 --> 00:02:51.005
based on their type arguments.

62
00:02:51.005 --> 00:02:55.009
This means that if you have two references created

63
00:02:55.009 --> 00:02:59.002
by passing different type arguments

64
00:02:59.002 --> 00:03:03.003
to the same generic type, they will not be the same.

65
00:03:03.003 --> 00:03:05.009
Now, this may be a little confusing to understand,

66
00:03:05.009 --> 00:03:08.002
so let's go to the IDE, write some code,

67
00:03:08.002 --> 00:03:09.009
and understand this quickly.

68
00:03:09.009 --> 00:03:13.003
Let's say, in addition to the list of integers

69
00:03:13.003 --> 00:03:15.004
that we have created on line number eight,

70
00:03:15.004 --> 00:03:20.007
let's create a list of String as well, like that,

71
00:03:20.007 --> 00:03:25.005
and let's call this languages

72
00:03:25.005 --> 00:03:29.008
and instantiate this to an ArrayList object,

73
00:03:29.008 --> 00:03:32.007
and we'll use that diamond operator again.

74
00:03:32.007 --> 00:03:39.009
Let's add some values.

75
00:03:39.009 --> 00:03:42.006
And now, we have two references.

76
00:03:42.006 --> 00:03:46.006
One reference is integers on line number eight.

77
00:03:46.006 --> 00:03:49.000
This reference variable was created

78
00:03:49.000 --> 00:03:52.000
by invoking the list generic type,

79
00:03:52.000 --> 00:03:55.007
and the type argument passed was the integer wrapper type.

80
00:03:55.007 --> 00:04:00.004
On line number 12, we created another reference, languages,

81
00:04:00.004 --> 00:04:03.008
and this was a list of String.

82
00:04:03.008 --> 00:04:06.005
So, we passed the String argument type

83
00:04:06.005 --> 00:04:10.001
to the list generic type in order to get that variable.

84
00:04:10.001 --> 00:04:12.008
Now, the reference integers

85
00:04:12.008 --> 00:04:14.004
and the reference languages

86
00:04:14.004 --> 00:04:17.002
on line number 12 are not the same,

87
00:04:17.002 --> 00:04:21.008
even if they are born out of the same generic type,

88
00:04:21.008 --> 00:04:24.006
they are still different references.

89
00:04:24.006 --> 00:04:26.003
So, if I try to do something like this,

90
00:04:26.003 --> 00:04:31.006
integers equal to languages,

91
00:04:31.006 --> 00:04:33.008
this will not work.

92
00:04:33.008 --> 00:04:36.003
It tells me that the required type is list of Integer,

93
00:04:36.003 --> 00:04:38.002
and you're providing list of String.

94
00:04:38.002 --> 00:04:40.001
So, this is the rule,

95
00:04:40.001 --> 00:04:41.007
if you have two different references

96
00:04:41.007 --> 00:04:44.001
that were create with different type arguments,

97
00:04:44.001 --> 00:04:47.006
but you invoke the same generic type, that does not mean

98
00:04:47.006 --> 00:04:50.009
that those references can be equated with each other,

99
00:04:50.009 --> 00:04:52.000
that's the rule.

100
00:04:52.000 --> 00:04:53.003
Further to this, let's also see

101
00:04:53.003 --> 00:04:56.003
the naming conventions for type parameters.

102
00:04:56.003 --> 00:04:57.009
In most of our previous videos,

103
00:04:57.009 --> 00:05:00.008
we're already seen E as the parameter name

104
00:05:00.008 --> 00:05:03.004
on the list generic type.

105
00:05:03.004 --> 00:05:06.005
We have seen K and V as type parameters

106
00:05:06.005 --> 00:05:08.004
on the Map interface.

107
00:05:08.004 --> 00:05:09.006
So, as we said earlier,

108
00:05:09.006 --> 00:05:12.000
there is a convention that Oracle as laid out

109
00:05:12.000 --> 00:05:14.005
for naming your type parameters,

110
00:05:14.005 --> 00:05:17.006
and this is what we're talking about now.

111
00:05:17.006 --> 00:05:19.009
The first one is the alphabet E.

112
00:05:19.009 --> 00:05:22.000
So, this can be used for elements,

113
00:05:22.000 --> 00:05:26.001
and this is specifically used in all the collection classes.

114
00:05:26.001 --> 00:05:28.003
If you want to design your own collection framework,

115
00:05:28.003 --> 00:05:32.000
you can use E as the name of your type parameter.

116
00:05:32.000 --> 00:05:36.004
Next is for K and V, key and value.

117
00:05:36.004 --> 00:05:38.009
So, if you're designing a class

118
00:05:38.009 --> 00:05:41.006
or let's say an API like the Map,

119
00:05:41.006 --> 00:05:44.000
then you should use K and V

120
00:05:44.000 --> 00:05:45.009
to designate keys and values

121
00:05:45.009 --> 00:05:48.002
for your type parameter names.

122
00:05:48.002 --> 00:05:50.001
N is used for numbers.

123
00:05:50.001 --> 00:05:51.008
So, if you have a generic class

124
00:05:51.008 --> 00:05:53.009
that deals entirely with numbers,

125
00:05:53.009 --> 00:05:57.007
then you can use N as the name if your type parameter.

126
00:05:57.007 --> 00:05:59.004
Next one is T.

127
00:05:59.004 --> 00:06:02.001
So, if you're designing your own generic class,

128
00:06:02.001 --> 00:06:03.007
you can always use T.

129
00:06:03.007 --> 00:06:08.001
T can refer to any type in Java.

130
00:06:08.001 --> 00:06:11.003
Lastly, S, U and V.

131
00:06:11.003 --> 00:06:12.009
If you have a scenario

132
00:06:12.009 --> 00:06:16.006
for multiparameters in your generic types,

133
00:06:16.006 --> 00:06:20.003
then the second, third and fourth type parameters are

134
00:06:20.003 --> 00:06:24.006
named S, U and V, respectively.

135
00:06:24.006 --> 00:06:26.007
This naming convention that you see is

136
00:06:26.007 --> 00:06:29.006
very different from what Java usually recommends.

137
00:06:29.006 --> 00:06:32.003
Java recommends that you give elaborate names

138
00:06:32.003 --> 00:06:34.008
for your variable, methods, etc.,

139
00:06:34.008 --> 00:06:36.009
but this kind of a naming convention was designed

140
00:06:36.009 --> 00:06:40.000
or laid down to differentiate your type parameters

141
00:06:40.000 --> 00:06:41.008
from the rest of your Java code.

142
00:06:41.008 --> 00:06:44.004
At the end of the day, this is just a convention.

143
00:06:44.004 --> 00:06:46.005
If you choose to follow your own standard,

144
00:06:46.005 --> 00:06:49.000
you can always go ahead.

