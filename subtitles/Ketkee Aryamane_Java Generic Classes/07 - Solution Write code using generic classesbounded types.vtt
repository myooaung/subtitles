WEBVTT
1
00:00:00.000 --> 00:00:07.002
(upbeat music)

2
00:00:07.002 --> 00:00:08.005
- [Instructor] So, how did it go?

3
00:00:08.005 --> 00:00:10.005
Were you able to solve the challenge?

4
00:00:10.005 --> 00:00:12.003
Let us see one possible solution

5
00:00:12.003 --> 00:00:13.004
that I came up with

6
00:00:13.004 --> 00:00:15.007
in order to approach our problem statement.

7
00:00:15.007 --> 00:00:19.001
For that, let's create a new project.

8
00:00:19.001 --> 00:00:22.002
This project will hold only our challenge solution.

9
00:00:22.002 --> 00:00:24.005
It's a Java version 11 project.

10
00:00:24.005 --> 00:00:25.004
Let's say next

11
00:00:25.004 --> 00:00:27.001
and give it a name.

12
00:00:27.001 --> 00:00:31.007
So we will call that ChallengeSolution.

13
00:00:31.007 --> 00:00:34.002
The project opens up in a new Window

14
00:00:34.002 --> 00:00:36.000
and under the source folder,

15
00:00:36.000 --> 00:00:40.000
let's create a package first

16
00:00:40.000 --> 00:00:48.001
which is com.linkedin.generics.solution.

17
00:00:48.001 --> 00:00:50.001
Let's get started now with building the solution.

18
00:00:50.001 --> 00:00:52.008
I'll create a class on this package

19
00:00:52.008 --> 00:00:58.002
which we will call NumericalOperations.

20
00:00:58.002 --> 00:01:00.001
That was the first step, to write a class

21
00:01:00.001 --> 00:01:03.002
which handles your mathematical operations.

22
00:01:03.002 --> 00:01:04.008
And the constraint on this class

23
00:01:04.008 --> 00:01:09.001
was that it should accept number and its subtypes.

24
00:01:09.001 --> 00:01:13.006
So now I'm going to define a type parameter for this class

25
00:01:13.006 --> 00:01:16.003
and I will choose the letter N for it

26
00:01:16.003 --> 00:01:17.008
because this class is supposed

27
00:01:17.008 --> 00:01:20.000
to handle mathematical operations.

28
00:01:20.000 --> 00:01:21.002
So the convention says that

29
00:01:21.002 --> 00:01:23.002
if you are trying to deal with numbers,

30
00:01:23.002 --> 00:01:27.000
you always use the type parameter to be named as N.

31
00:01:27.000 --> 00:01:30.005
So I'll say N and then I'll define bounded types

32
00:01:30.005 --> 00:01:34.005
so that this class accepts only number and its subtypes.

33
00:01:34.005 --> 00:01:39.002
So I'll say N extends Number, like that.

34
00:01:39.002 --> 00:01:42.003
So now this class will accept anything that is a number

35
00:01:42.003 --> 00:01:44.007
or any of its subtypes.

36
00:01:44.007 --> 00:01:47.001
The next step was to add a constructor

37
00:01:47.001 --> 00:01:49.002
which will accept multiple operands

38
00:01:49.002 --> 00:01:51.009
and assign them to an instance variable.

39
00:01:51.009 --> 00:01:54.005
So let's create that instance variable first,

40
00:01:54.005 --> 00:01:57.002
let me put a command here.

41
00:01:57.002 --> 00:02:00.008
So that will be private List of N

42
00:02:00.008 --> 00:02:04.002
and let's call this operands.

43
00:02:04.002 --> 00:02:09.002
Let's also input the Java.util list interface.

44
00:02:09.002 --> 00:02:16.001
Then we add a constructor, NumericalOperations

45
00:02:16.001 --> 00:02:19.005
and this should take an argument again of the list type

46
00:02:19.005 --> 00:02:22.007
because we want multiples operands to be accepted.

47
00:02:22.007 --> 00:02:28.008
So we'll say List of N, let's call this operands as well.

48
00:02:28.008 --> 00:02:31.003
Now inside this, the incoming argument operands

49
00:02:31.003 --> 00:02:34.001
should be assigned to the instance variables operands

50
00:02:34.001 --> 00:02:36.003
that we declared on line number seven.

51
00:02:36.003 --> 00:02:39.000
So we will access the instance variable using the,

52
00:02:39.000 --> 00:02:43.007
this operator, and we'll create a fresh ArrayList

53
00:02:43.007 --> 00:02:49.001
which takes in the incoming operands argument like that.

54
00:02:49.001 --> 00:02:51.007
Now, the question is why did we create a new ArrayList

55
00:02:51.007 --> 00:02:53.009
This is because in some cases,

56
00:02:53.009 --> 00:02:59.002
if somebody tries to pass an immutable list to test a class,

57
00:02:59.002 --> 00:03:01.004
then we are trying to set a defense against it.

58
00:03:01.004 --> 00:03:03.004
So if there is an immutable list coming in,

59
00:03:03.004 --> 00:03:06.000
we are trying to make a copy of that ArrayList

60
00:03:06.000 --> 00:03:08.004
so that we can change it later

61
00:03:08.004 --> 00:03:10.003
when we try to sort the list.

62
00:03:10.003 --> 00:03:12.008
If you take in the immutable list as it is,

63
00:03:12.008 --> 00:03:14.007
then you will not be able to change the list.

64
00:03:14.007 --> 00:03:18.002
So that's why I create a new ArrayList here.

65
00:03:18.002 --> 00:03:20.007
The next step will be to add the method

66
00:03:20.007 --> 00:03:23.006
which will help us return a list of sorted numbers.

67
00:03:23.006 --> 00:03:25.002
So let's go ahead and do that.

68
00:03:25.002 --> 00:03:26.006
This will be public.

69
00:03:26.006 --> 00:03:29.004
It has to return a list of sorted numbers.

70
00:03:29.004 --> 00:03:32.008
So the return type will be List of N

71
00:03:32.008 --> 00:03:38.005
and let's call the method sortNumbers.

72
00:03:38.005 --> 00:03:39.007
Now, inside this method,

73
00:03:39.007 --> 00:03:45.000
I choose to use the Collections utility class.

74
00:03:45.000 --> 00:03:48.000
This class gives me a ready-made API sort

75
00:03:48.000 --> 00:03:49.003
which will help me sort my numbers.

76
00:03:49.003 --> 00:03:51.001
So I need not write my own logic

77
00:03:51.001 --> 00:03:52.007
to get my numbers sorted.

78
00:03:52.007 --> 00:03:57.001
To this method, I need to pass my operands, like that.

79
00:03:57.001 --> 00:03:59.009
Now, if I do this, I get a compilation problem on line 16

80
00:03:59.009 --> 00:04:02.003
which reads as, that there no instance

81
00:04:02.003 --> 00:04:04.006
of type variability that exists

82
00:04:04.006 --> 00:04:07.001
so that your N, which is your type parameter,

83
00:04:07.001 --> 00:04:09.005
conforms to comparable.

84
00:04:09.005 --> 00:04:10.004
So the reason here is

85
00:04:10.004 --> 00:04:13.002
that the Collection.sort method internally

86
00:04:13.002 --> 00:04:15.006
uses the comparable interface

87
00:04:15.006 --> 00:04:18.008
to perform a logic to sort your numbers.

88
00:04:18.008 --> 00:04:20.006
So in order to do that,

89
00:04:20.006 --> 00:04:23.005
my class NumericalOperations will also have

90
00:04:23.005 --> 00:04:26.003
to conform to that comparable interface.

91
00:04:26.003 --> 00:04:28.008
So the way to do it is on line seven,

92
00:04:28.008 --> 00:04:31.009
let me include the comparable interface

93
00:04:31.009 --> 00:04:35.000
using the and operator, like that.

94
00:04:35.000 --> 00:04:37.003
So Comparable of N.

95
00:04:37.003 --> 00:04:39.008
So this is a case of multiple bounds

96
00:04:39.008 --> 00:04:41.002
that we are trying to specify.

97
00:04:41.002 --> 00:04:42.008
The class is specified first

98
00:04:42.008 --> 00:04:45.002
and then it is followed by the interface.

99
00:04:45.002 --> 00:04:48.007
The moment I do this declaration, line number 16 error

100
00:04:48.007 --> 00:04:50.009
is gone and we are good.

101
00:04:50.009 --> 00:04:52.001
Then we'll just go ahead

102
00:04:52.001 --> 00:04:54.001
and return this list

103
00:04:54.001 --> 00:04:57.007
so that we have it on our output.

104
00:04:57.007 --> 00:05:00.000
Then we had to add yet another method

105
00:05:00.000 --> 00:05:03.002
which was to get the maximum value among the numbers.

106
00:05:03.002 --> 00:05:04.006
So let's go ahead and do that.

107
00:05:04.006 --> 00:05:07.003
Say public, it has to return a number.

108
00:05:07.003 --> 00:05:09.009
So the return type has to be N

109
00:05:09.009 --> 00:05:13.004
and let's call this, getMax.

110
00:05:13.004 --> 00:05:15.004
And I'm again, going to choose

111
00:05:15.004 --> 00:05:22.005
the Collections utility classes, getMax method.

112
00:05:22.005 --> 00:05:25.009
It's the max method, which will take in your operands

113
00:05:25.009 --> 00:05:29.003
as the argument, calculate the maximum value out of it,

114
00:05:29.003 --> 00:05:31.007
and then return it to you.

115
00:05:31.007 --> 00:05:33.004
So that is all, this is it.

116
00:05:33.004 --> 00:05:35.006
This is our NumericalOperations class.

117
00:05:35.006 --> 00:05:38.007
We have bounded types, which are multiple

118
00:05:38.007 --> 00:05:40.004
that are defined on a class.

119
00:05:40.004 --> 00:05:43.000
We have the instance variable, the constructor,

120
00:05:43.000 --> 00:05:45.004
and the two methods that we were supposed to add.

121
00:05:45.004 --> 00:05:48.004
Now, let's test this out, let's create a test class.

122
00:05:48.004 --> 00:05:54.006
Let's call it TestSolution, write the main method there.

123
00:05:54.006 --> 00:05:57.003
And the test was supposed to be run

124
00:05:57.003 --> 00:06:00.003
with the help of a list of long type of values.

125
00:06:00.003 --> 00:06:03.001
So let's create that list of long.

126
00:06:03.001 --> 00:06:07.000
No, we want the list interface, which is this one.

127
00:06:07.000 --> 00:06:11.002
So we will go and eliminate this unwanted input.

128
00:06:11.002 --> 00:06:13.004
Okay, so this will be List of Long type

129
00:06:13.004 --> 00:06:18.008
of values as we said, let's call this longList, okay.

130
00:06:18.008 --> 00:06:21.005
And then instantiate this to newer list.

131
00:06:21.005 --> 00:06:24.009
But in Java, you can actually pass a ready-made set

132
00:06:24.009 --> 00:06:30.007
of values to the list, using the List.of method.

133
00:06:30.007 --> 00:06:32.009
So you can either make a new array list

134
00:06:32.009 --> 00:06:36.007
and feed in values, one by one, using the add API

135
00:06:36.007 --> 00:06:39.001
or you can directly feed in all the numbers

136
00:06:39.001 --> 00:06:41.008
using the List.of API.

137
00:06:41.008 --> 00:06:45.005
Let's now insert a comma separated list of values

138
00:06:45.005 --> 00:06:49.001
that we wish to insert into the List of Long.

139
00:06:49.001 --> 00:06:50.004
So let's say 12,

140
00:06:50.004 --> 00:06:52.009
and I'll have to suffix the number

141
00:06:52.009 --> 00:06:56.004
with the L letter to indicate that it is a long value.

142
00:06:56.004 --> 00:06:59.007
Otherwise it'll be treated as an in integer.

143
00:06:59.007 --> 00:07:00.006
So let's go ahead

144
00:07:00.006 --> 00:07:04.000
and put in some numbers, right.

145
00:07:04.000 --> 00:07:06.000
So those are our numbers.

146
00:07:06.000 --> 00:07:09.000
Then we will create an instance of our NumericalOperations.

147
00:07:09.000 --> 00:07:12.001
So we'll invoke our generic type.

148
00:07:12.001 --> 00:07:16.009
So let's say NumericalOperations of Long

149
00:07:16.009 --> 00:07:20.001
because we want the long values to be processed.

150
00:07:20.001 --> 00:07:22.005
Let's create a variable

151
00:07:22.005 --> 00:07:27.008
and instantiate this, using the diamond operator.

152
00:07:27.008 --> 00:07:29.009
And we have to pass the list of course

153
00:07:29.009 --> 00:07:31.007
for the constructor (indistinct)

154
00:07:31.007 --> 00:07:35.001
So we do that.

155
00:07:35.001 --> 00:07:37.002
On the next line, now let's just go ahead

156
00:07:37.002 --> 00:07:38.002
and call our methods.

157
00:07:38.002 --> 00:07:43.008
So I'm going to say numericalOperations.sortNumbers

158
00:07:43.008 --> 00:07:46.000
and print it to the console.

159
00:07:46.000 --> 00:07:51.006
Similarly, I will call the numericalOperations.getMax

160
00:07:51.006 --> 00:07:54.004
and print that output to the console.

161
00:07:54.004 --> 00:07:57.002
So now let's go ahead and run this test

162
00:07:57.002 --> 00:08:01.002
and find out if it works well, there we go.

163
00:08:01.002 --> 00:08:03.005
So we have the list of sorted numbers

164
00:08:03.005 --> 00:08:04.006
that was returned to us

165
00:08:04.006 --> 00:08:06.004
and it looks perfectly sorted

166
00:08:06.004 --> 00:08:10.000
and then the max number that is calculated from that list.

