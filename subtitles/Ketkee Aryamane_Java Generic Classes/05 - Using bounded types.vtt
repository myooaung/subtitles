WEBVTT
1
00:00:00.005 --> 00:00:03.000
- [Instructor] Let us now look at bounded types.

2
00:00:03.000 --> 00:00:06.000
But before that, let's understand why we need them.

3
00:00:06.000 --> 00:00:08.002
At times in certain situations,

4
00:00:08.002 --> 00:00:10.006
it is more useful to put restrictions

5
00:00:10.006 --> 00:00:14.005
on the types that you pass to your type parameters.

6
00:00:14.005 --> 00:00:16.004
For example, in our case,

7
00:00:16.004 --> 00:00:19.000
we developed box of T generic type

8
00:00:19.000 --> 00:00:22.002
and then we invoked it to create a a box of fruits

9
00:00:22.002 --> 00:00:24.002
and a box of books.

10
00:00:24.002 --> 00:00:27.000
But since we've defined it as box of T,

11
00:00:27.000 --> 00:00:29.005
that T could refer to any type

12
00:00:29.005 --> 00:00:32.007
which means I can go ahead and create a box of integers.

13
00:00:32.007 --> 00:00:36.001
But then, this box of integers would not hold much relevance

14
00:00:36.001 --> 00:00:38.001
in our practical application.

15
00:00:38.001 --> 00:00:41.006
So now I want to put a restriction on this Box class.

16
00:00:41.006 --> 00:00:45.002
I want that this box should contain only those items

17
00:00:45.002 --> 00:00:46.009
that have a certain attribute.

18
00:00:46.009 --> 00:00:48.008
Let's call it weight for example.

19
00:00:48.008 --> 00:00:50.008
So how do you implement this?

20
00:00:50.008 --> 00:00:53.006
Java in conjunction with inheritance

21
00:00:53.006 --> 00:00:56.003
provides a very powerful and elegant solution

22
00:00:56.003 --> 00:00:58.003
to define bounded types

23
00:00:58.003 --> 00:01:00.009
in order to implement such scenarios.

24
00:01:00.009 --> 00:01:04.000
So bounded types help you to add restrictions

25
00:01:04.000 --> 00:01:06.002
and these restrictions can be specified

26
00:01:06.002 --> 00:01:09.000
using the extends keyword.

27
00:01:09.000 --> 00:01:12.005
Extends is a preexisting keyword in the Java language

28
00:01:12.005 --> 00:01:14.007
which is used for inheritance.

29
00:01:14.007 --> 00:01:17.009
This keyboard allows you to create an upper bound

30
00:01:17.009 --> 00:01:20.005
that specifies a superclass.

31
00:01:20.005 --> 00:01:22.005
And the superclass is the one

32
00:01:22.005 --> 00:01:26.005
from which all your type arguments must be derived.

33
00:01:26.005 --> 00:01:29.008
So for example, if your box definition looks like this,

34
00:01:29.008 --> 00:01:33.000
Box of T followed by the extends keyboard,

35
00:01:33.000 --> 00:01:35.002
followed by the superclass name,

36
00:01:35.002 --> 00:01:38.008
then this means that when you invoke the Box generic type,

37
00:01:38.008 --> 00:01:42.009
T can be replaced by anything that is a superclass

38
00:01:42.009 --> 00:01:45.005
or any of its subclasses.

39
00:01:45.005 --> 00:01:48.004
So you can thus create an upper limit

40
00:01:48.004 --> 00:01:51.008
and the superclass is inclusive of that limit.

41
00:01:51.008 --> 00:01:53.006
Just as it is with classes,

42
00:01:53.006 --> 00:01:57.006
you can also specify interfaces in bounded types.

43
00:01:57.006 --> 00:01:59.002
So for example let's say you have an interface

44
00:01:59.002 --> 00:02:00.009
called interface1

45
00:02:00.009 --> 00:02:04.000
and it is specified in the box definition like this;

46
00:02:04.000 --> 00:02:07.002
Box of T extends interface1.

47
00:02:07.002 --> 00:02:09.003
This means when you invoke this Box generic type,

48
00:02:09.003 --> 00:02:14.003
T can be replaced by anything that implements interface1.

49
00:02:14.003 --> 00:02:17.003
The thing to note here is that the extends keyword

50
00:02:17.003 --> 00:02:21.001
is used for both class as well as the interface

51
00:02:21.001 --> 00:02:24.005
whenever you try to define bounded types in Java.

52
00:02:24.005 --> 00:02:28.003
Furthermore, you can also specify multiple bounds.

53
00:02:28.003 --> 00:02:31.004
This is done using the & operator.

54
00:02:31.004 --> 00:02:33.002
Let's see a couple of examples.

55
00:02:33.002 --> 00:02:35.003
So let's say your box definition is like this,

56
00:02:35.003 --> 00:02:39.006
Box of T extends interface1 & interface2.

57
00:02:39.006 --> 00:02:41.007
This means when you invoke this box,

58
00:02:41.007 --> 00:02:45.001
T can be replaced by anything that implements both

59
00:02:45.001 --> 00:02:47.009
interface1 and interface2.

60
00:02:47.009 --> 00:02:50.002
So this is an example where you can specify

61
00:02:50.002 --> 00:02:54.001
multiple interfaces as bounds in your generic types.

62
00:02:54.001 --> 00:02:55.009
Let's look at another example.

63
00:02:55.009 --> 00:03:02.001
Box of T extends superclass & interface1 & interface2.

64
00:03:02.001 --> 00:03:04.002
Now this would mean that T can be replaced

65
00:03:04.002 --> 00:03:07.007
by anything that is a superclass or any of its subclasses

66
00:03:07.007 --> 00:03:12.002
and implements both interface1 and interface2.

67
00:03:12.002 --> 00:03:14.007
So this example specifies a combination

68
00:03:14.007 --> 00:03:18.006
of one class and multiple interfaces.

69
00:03:18.006 --> 00:03:20.002
Just remember one thing here.

70
00:03:20.002 --> 00:03:22.004
When you have a combination of a class

71
00:03:22.004 --> 00:03:23.009
and multiple interfaces,

72
00:03:23.009 --> 00:03:26.004
then you will have to specify the class first

73
00:03:26.004 --> 00:03:28.000
when you define those bounded types.

74
00:03:28.000 --> 00:03:28.009
If you don't do that,

75
00:03:28.009 --> 00:03:31.004
you will end up getting a compilation problem.

76
00:03:31.004 --> 00:03:35.004
Lastly, needless to say, since Java provides inheritance

77
00:03:35.004 --> 00:03:38.007
by extending only one class at a time,

78
00:03:38.007 --> 00:03:40.002
even when you define bounded types,

79
00:03:40.002 --> 00:03:42.004
you can specify only one class

80
00:03:42.004 --> 00:03:45.008
but you could use multiple interfaces.

81
00:03:45.008 --> 00:03:49.004
Now let's go ahead and extend our box demo

82
00:03:49.004 --> 00:03:51.003
to include a bounded type.

83
00:03:51.003 --> 00:03:54.000
This is the structure that we have implemented so far.

84
00:03:54.000 --> 00:03:56.004
We have the Box class, we have those three methods:

85
00:03:56.004 --> 00:04:00.005
additem, getlatestitem and getCountOfItems.

86
00:04:00.005 --> 00:04:03.007
And then you have the type argument classes: fruit and book

87
00:04:03.007 --> 00:04:05.002
and we'll pick up the same use case

88
00:04:05.002 --> 00:04:06.006
that we discussed before.

89
00:04:06.006 --> 00:04:09.009
Now, we are going to restrict our box to have items

90
00:04:09.009 --> 00:04:11.009
which have the weight attribute.

91
00:04:11.009 --> 00:04:15.003
For this, we'll create an interface called Boxable.

92
00:04:15.003 --> 00:04:18.009
Here, we'll declare a method called getWeight

93
00:04:18.009 --> 00:04:21.007
and these type arguments fruit and book

94
00:04:21.007 --> 00:04:24.006
must implement this Boxable interface.

95
00:04:24.006 --> 00:04:28.000
This will ensure that both fruit and book

96
00:04:28.000 --> 00:04:31.001
will have the weight property defined in them.

97
00:04:31.001 --> 00:04:33.002
After this, we'll change the definition

98
00:04:33.002 --> 00:04:36.003
of the Box generic type to this

99
00:04:36.003 --> 00:04:39.005
Box of T extends Boxable.

100
00:04:39.005 --> 00:04:42.003
So when we invoke the Box generic type,

101
00:04:42.003 --> 00:04:44.000
T can be replaced by anything

102
00:04:44.000 --> 00:04:46.008
that implements the Boxable interface.

103
00:04:46.008 --> 00:04:50.002
Lastly, we'll add one more method to the Box class

104
00:04:50.002 --> 00:04:52.002
which is getTotalWeight.

105
00:04:52.002 --> 00:04:53.004
And as the name suggests,

106
00:04:53.004 --> 00:04:56.009
it'll get the total weight of all the items inside the box.

107
00:04:56.009 --> 00:05:00.002
This will give us a chance to use the getWeight method

108
00:05:00.002 --> 00:05:02.002
from the Boxable interface.

109
00:05:02.002 --> 00:05:04.004
Now let's go ahead and execute the steps

110
00:05:04.004 --> 00:05:05.008
for the bounded types demo.

111
00:05:05.008 --> 00:05:09.000
The first step is to create an interface Boxable

112
00:05:09.000 --> 00:05:12.006
and declare that method that we need which is getWeight.

113
00:05:12.006 --> 00:05:15.002
So let's head back to the IDE

114
00:05:15.002 --> 00:05:18.008
and on a source folder, we'll create an interface this time.

115
00:05:18.008 --> 00:05:22.002
Let's choose the option of interface here

116
00:05:22.002 --> 00:05:24.006
and name this Boxable.

117
00:05:24.006 --> 00:05:27.000
And inside this, we'll declare a method.

118
00:05:27.000 --> 00:05:27.009
This is an interface

119
00:05:27.009 --> 00:05:30.001
so it'll be a declaration of the method.

120
00:05:30.001 --> 00:05:34.002
Let this method return a type of double

121
00:05:34.002 --> 00:05:39.001
and let's call it getWeight.

122
00:05:39.001 --> 00:05:40.005
So that's the interface.

123
00:05:40.005 --> 00:05:45.001
The next step is to add Boxable bound to the Box class.

124
00:05:45.001 --> 00:05:48.006
So let's go back and open the Box class.

125
00:05:48.006 --> 00:05:51.006
Let's go right at the top and on line number six,

126
00:05:51.006 --> 00:05:53.002
instead of Box of T,

127
00:05:53.002 --> 00:05:59.001
now we'll say Box of T extends Boxable like that.

128
00:05:59.001 --> 00:06:00.007
Now we'll have to be a little patient here

129
00:06:00.007 --> 00:06:03.000
because the moment we change the definition

130
00:06:03.000 --> 00:06:05.008
of the Box class on line number six,

131
00:06:05.008 --> 00:06:07.009
we'll get a series of related problems.

132
00:06:07.009 --> 00:06:10.005
Let's look at them one by one.

133
00:06:10.005 --> 00:06:12.005
If you click on Related Problems

134
00:06:12.005 --> 00:06:14.008
and let's see where it lands.

135
00:06:14.008 --> 00:06:17.001
So it's Box Utils that's going to have the problem.

136
00:06:17.001 --> 00:06:20.004
So let's open Box Utils class

137
00:06:20.004 --> 00:06:24.001
and we are getting a compilation error on line number five.

138
00:06:24.001 --> 00:06:28.007
It says that the type parameter T is not within its bound.

139
00:06:28.007 --> 00:06:31.005
Should implement T Boxable interface.

140
00:06:31.005 --> 00:06:32.006
Yes, that's correct.

141
00:06:32.006 --> 00:06:35.003
Now since we changed the box declaration

142
00:06:35.003 --> 00:06:37.008
to go ahead and include a bounded type,

143
00:06:37.008 --> 00:06:39.004
which means the generic method

144
00:06:39.004 --> 00:06:42.004
which is trying to access that T parameter of box

145
00:06:42.004 --> 00:06:45.005
should also have the corresponding changes made.

146
00:06:45.005 --> 00:06:47.000
So now we'll have to go ahead

147
00:06:47.000 --> 00:06:53.007
and say T extends Boxable here as well.

148
00:06:53.007 --> 00:06:55.008
So this spare of angle brackets

149
00:06:55.008 --> 00:06:58.003
in which you're mentioning the bounded type

150
00:06:58.003 --> 00:07:01.002
is the T that you're declaring for this method.

151
00:07:01.002 --> 00:07:03.002
And once this is correct,

152
00:07:03.002 --> 00:07:07.007
only then you'll be able to use the T in the parameter here.

153
00:07:07.007 --> 00:07:10.005
Now once we make this change, we have two related problems.

154
00:07:10.005 --> 00:07:12.004
So let's click that

155
00:07:12.004 --> 00:07:15.009
and it gives us problem in the TestBoxGenerics class.

156
00:07:15.009 --> 00:07:18.006
So let's go ahead and open that

157
00:07:18.006 --> 00:07:22.000
and let's see what the problems are.

158
00:07:22.000 --> 00:07:24.006
So first problem is on line number five.

159
00:07:24.006 --> 00:07:28.001
We say that the book type argument

160
00:07:28.001 --> 00:07:30.009
that is passed on line five is giving us a problem.

161
00:07:30.009 --> 00:07:32.002
So let's see what that problem is.

162
00:07:32.002 --> 00:07:33.007
Let's read the error.

163
00:07:33.007 --> 00:07:38.001
It says that type parameter book is not within its bound.

164
00:07:38.001 --> 00:07:41.001
Should implement the Boxable interface.

165
00:07:41.001 --> 00:07:42.007
That's what we want. Correct?

166
00:07:42.007 --> 00:07:44.006
We want that our type arguments

167
00:07:44.006 --> 00:07:47.005
must definitely implement the Boxable interface.

168
00:07:47.005 --> 00:07:49.007
If they do, then it'll be ensured

169
00:07:49.007 --> 00:07:52.005
that they have that property weight.

170
00:07:52.005 --> 00:07:54.002
So let's go ahead and make sure

171
00:07:54.002 --> 00:07:57.009
that the book implements the Boxable interface.

172
00:07:57.009 --> 00:08:01.008
So let's change the declaration on line number three

173
00:08:01.008 --> 00:08:06.004
and say Book implements Boxable like that.

174
00:08:06.004 --> 00:08:08.007
Now in Java, whenever you implement an interface,

175
00:08:08.007 --> 00:08:10.006
yes you will have to give an implementation

176
00:08:10.006 --> 00:08:13.009
to the method that was declared in the interface.

177
00:08:13.009 --> 00:08:17.005
Now if you look in Boxable, the method is getWeight.

178
00:08:17.005 --> 00:08:19.002
And if you come back to book,

179
00:08:19.002 --> 00:08:21.008
fortunately we already have the weight property

180
00:08:21.008 --> 00:08:23.000
on line number six

181
00:08:23.000 --> 00:08:26.005
for which we already have the getWeight method implemented.

182
00:08:26.005 --> 00:08:29.000
So if we do not really have to code any other logic here.

183
00:08:29.000 --> 00:08:30.000
We are all set.

184
00:08:30.000 --> 00:08:32.008
Let's go to the TestBoxGenerics class again

185
00:08:32.008 --> 00:08:36.008
and we see that the error on line number five is gone.

186
00:08:36.008 --> 00:08:38.006
There is another error on line number 12

187
00:08:38.006 --> 00:08:39.009
and it is as expected.

188
00:08:39.009 --> 00:08:42.006
It's the other type argument that we're talking about.

189
00:08:42.006 --> 00:08:46.004
So let's go ahead and ensure that fruit as well

190
00:08:46.004 --> 00:08:50.004
implements Boxable.

191
00:08:50.004 --> 00:08:53.008
Now here as well, since we already have the weight property,

192
00:08:53.008 --> 00:08:58.009
we have a getWeight method that's available on line 28.

193
00:08:58.009 --> 00:09:01.007
So we do not have to give any special logic to this method.

194
00:09:01.007 --> 00:09:03.006
We are good there as well.

195
00:09:03.006 --> 00:09:06.000
So now the errors are gone.

196
00:09:06.000 --> 00:09:09.008
The next step will be to add a method to the Box class

197
00:09:09.008 --> 00:09:12.002
which is the getTotalWeight

198
00:09:12.002 --> 00:09:15.000
and this should use the Boxable API.

199
00:09:15.000 --> 00:09:18.005
So we are going to add this getTotalWeight method

200
00:09:18.005 --> 00:09:21.003
to the Box class.

201
00:09:21.003 --> 00:09:23.007
Yes and if you see, now that we're inside Box class,

202
00:09:23.007 --> 00:09:28.000
all the related problems here have vanished as well.

203
00:09:28.000 --> 00:09:30.002
So let's go ahead and add that method.

204
00:09:30.002 --> 00:09:33.003
Let's say public.

205
00:09:33.003 --> 00:09:36.004
This will return a value of of the type double

206
00:09:36.004 --> 00:09:42.008
and let's call this getTotalWeight.

207
00:09:42.008 --> 00:09:44.000
What we're going to do here is

208
00:09:44.000 --> 00:09:47.001
we are going to iterate that list of items that we have

209
00:09:47.001 --> 00:09:48.004
on line Number seven,

210
00:09:48.004 --> 00:09:52.004
pick up each item, get the weight of each individual item,

211
00:09:52.004 --> 00:09:55.002
sum it up and return that as a double value.

212
00:09:55.002 --> 00:09:57.005
This is what we want to do in this method.

213
00:09:57.005 --> 00:09:59.005
Now there are two approaches to this.

214
00:09:59.005 --> 00:10:01.008
You can either use traditional Java code

215
00:10:01.008 --> 00:10:05.009
where you iterate that list of items using the for loop

216
00:10:05.009 --> 00:10:08.005
and then you grab the weight of every item

217
00:10:08.005 --> 00:10:11.003
and keep adding it to the weight property.

218
00:10:11.003 --> 00:10:14.005
But the other way is to use the stream API

219
00:10:14.005 --> 00:10:15.006
which is very exciting.

220
00:10:15.006 --> 00:10:17.008
This is the feature that is available in Java eight.

221
00:10:17.008 --> 00:10:19.007
So we will go ahead with that.

222
00:10:19.007 --> 00:10:24.003
We'll say return this start items.

223
00:10:24.003 --> 00:10:27.006
So the first part is we access the items list.

224
00:10:27.006 --> 00:10:30.003
Now we are going to run the stream method on it.

225
00:10:30.003 --> 00:10:32.009
This will give us a stream of those items.

226
00:10:32.009 --> 00:10:36.005
And every item that we get in the stream,

227
00:10:36.005 --> 00:10:39.007
we are going to map it to a double value.

228
00:10:39.007 --> 00:10:40.005
Why double value?

229
00:10:40.005 --> 00:10:43.008
Because the weight data type is double.

230
00:10:43.008 --> 00:10:44.009
And when you say map to double,

231
00:10:44.009 --> 00:10:47.003
you'll have to provide this method of function

232
00:10:47.003 --> 00:10:49.007
which will ensure that you get a double value.

233
00:10:49.007 --> 00:10:51.005
So the double value could be returned

234
00:10:51.005 --> 00:10:56.001
by the getWeight method of the Boxable class.

235
00:10:56.001 --> 00:10:59.000
So let's feed that here, Boxable.

236
00:10:59.000 --> 00:11:02.007
I'm going to use method references concept

237
00:11:02.007 --> 00:11:05.003
and access the getWeight method.

238
00:11:05.003 --> 00:11:06.009
Once you get that double value,

239
00:11:06.009 --> 00:11:09.001
you just have to invoke the sum method

240
00:11:09.001 --> 00:11:11.007
which is going to sum up all the weights

241
00:11:11.007 --> 00:11:14.008
and return that as a double value to you.

242
00:11:14.008 --> 00:11:17.004
So it is as simple as writing this one line of code

243
00:11:17.004 --> 00:11:19.002
which will give you the total weight.

244
00:11:19.002 --> 00:11:22.005
If you're not very comfortable with this Java eight

245
00:11:22.005 --> 00:11:23.008
streams API,

246
00:11:23.008 --> 00:11:27.001
you can definitely write code something like this.

247
00:11:27.001 --> 00:11:29.005
So you'll iterate the list of items.

248
00:11:29.005 --> 00:11:37.003
So we say for every T in this .items.

249
00:11:37.003 --> 00:11:39.008
You need to calculate the weight.

250
00:11:39.008 --> 00:11:43.004
And before that, just on line number 26,

251
00:11:43.004 --> 00:11:50.009
we will take a double property and set this to 0.0.

252
00:11:50.009 --> 00:11:53.001
This is a local variable

253
00:11:53.001 --> 00:11:55.001
and on line 27, we have the for loop.

254
00:11:55.001 --> 00:11:58.006
Please note that we are using the enhanced for loop here.

255
00:11:58.006 --> 00:12:01.002
And then you can just say TotalWeight

256
00:12:01.002 --> 00:12:07.006
plus equal to t.getWeight.

257
00:12:07.006 --> 00:12:09.006
That is all that you have to do.

258
00:12:09.006 --> 00:12:12.000
So this is how you'll traditionally write the code

259
00:12:12.000 --> 00:12:13.005
in order to calculate the weight

260
00:12:13.005 --> 00:12:15.001
but I'll still prefer the streams API.

261
00:12:15.001 --> 00:12:19.004
So I'm going to take this off and save the score

262
00:12:19.004 --> 00:12:22.009
which will return us the total weight.

263
00:12:22.009 --> 00:12:28.007
Let's also delete the extra line that we have

264
00:12:28.007 --> 00:12:31.001
and we are good.

265
00:12:31.001 --> 00:12:32.004
Let's go ahead and execute the last step

266
00:12:32.004 --> 00:12:34.006
which is testing the program output.

267
00:12:34.006 --> 00:12:39.007
So we will now go to the TestBoxGenerics class

268
00:12:39.007 --> 00:12:45.004
and on line number 11, we'll say sys out

269
00:12:45.004 --> 00:12:51.007
and say total weight of book box

270
00:12:51.007 --> 00:12:59.002
and then call the getTotalWeight on the bookBox variable.

271
00:12:59.002 --> 00:13:03.003
Let's copy this line and come down

272
00:13:03.003 --> 00:13:06.001
and on line number 19, I'll paste it.

273
00:13:06.001 --> 00:13:07.009
And I'll just change all the references here

274
00:13:07.009 --> 00:13:10.005
to the fruit box.

275
00:13:10.005 --> 00:13:13.005
So you'll invoke the getTotalWeight method

276
00:13:13.005 --> 00:13:16.002
on the fruit box.

277
00:13:16.002 --> 00:13:17.003
All right, so we are all set.

278
00:13:17.003 --> 00:13:18.006
Let's go ahead and run this program

279
00:13:18.006 --> 00:13:21.004
and everything should work well.

280
00:13:21.004 --> 00:13:25.003
Let's observe the output.

281
00:13:25.003 --> 00:13:26.008
Okay, so we have the output.

282
00:13:26.008 --> 00:13:29.006
I'm just going to expand this console a little bit

283
00:13:29.006 --> 00:13:31.006
so that we are able to see everything.

284
00:13:31.006 --> 00:13:34.001
Right so in the box we had two items.

285
00:13:34.001 --> 00:13:37.007
One was the Harry Potter book which weighed 0.5

286
00:13:37.007 --> 00:13:40.005
and then the Deep Work book, which weighed 0.25.

287
00:13:40.005 --> 00:13:42.009
So if you see the total weight is now 0.75

288
00:13:42.009 --> 00:13:44.002
which is correct.

289
00:13:44.002 --> 00:13:46.005
And then we had the box of fruits.

290
00:13:46.005 --> 00:13:51.000
One item was 0.5 and the other was 0.3

291
00:13:51.000 --> 00:13:54.003
and we've got a total weight of 0.8.

292
00:13:54.003 --> 00:13:55.006
Right so that's your demo.

293
00:13:55.006 --> 00:13:56.009
This is what we did.

294
00:13:56.009 --> 00:13:59.007
We implement a bounded type on a Box generic class.

295
00:13:59.007 --> 00:14:02.002
So now it's ensured that anything that you try to add

296
00:14:02.002 --> 00:14:03.000
in the box

297
00:14:03.000 --> 00:14:06.000
will always have the weight property.

