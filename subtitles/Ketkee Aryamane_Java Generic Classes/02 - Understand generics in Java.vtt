WEBVTT
1
00:00:00.000 --> 00:00:01.006
- [Instructor] Let us now understand

2
00:00:01.006 --> 00:00:04.000
what is this generics feature all about.

3
00:00:04.000 --> 00:00:06.003
Generics in Java gives you a way

4
00:00:06.003 --> 00:00:08.006
to define parameterized types.

5
00:00:08.006 --> 00:00:11.003
This means that you can have classes and interfaces

6
00:00:11.003 --> 00:00:13.007
with parameters enabled on them.

7
00:00:13.007 --> 00:00:15.005
These kind of classes and interfaces

8
00:00:15.005 --> 00:00:17.006
exist in the Java APIs Today.

9
00:00:17.006 --> 00:00:21.004
You can also write such classes and interfaces of your own.

10
00:00:21.004 --> 00:00:23.000
Let us understand this better

11
00:00:23.000 --> 00:00:25.005
by comparing pre and post generics code

12
00:00:25.005 --> 00:00:28.004
of the ArrayList class from the collections API.

13
00:00:28.004 --> 00:00:30.004
Before the advent of generics

14
00:00:30.004 --> 00:00:33.000
the ArrayList definition looked like this,

15
00:00:33.000 --> 00:00:34.007
public class ArrayList

16
00:00:34.007 --> 00:00:36.009
and it is followed by an extends clause,

17
00:00:36.009 --> 00:00:38.001
and implements clause

18
00:00:38.001 --> 00:00:40.004
which is indicated by those dots on the slide,

19
00:00:40.004 --> 00:00:42.003
and then you have the curly pair of braces

20
00:00:42.003 --> 00:00:44.000
in which you have the entire code.

21
00:00:44.000 --> 00:00:46.005
But we are not concerned about those details.

22
00:00:46.005 --> 00:00:48.000
What we are interested in

23
00:00:48.000 --> 00:00:52.000
is this part at the beginning, public class ArrayList.

24
00:00:52.000 --> 00:00:55.002
After the generics feature got introduced in the language,

25
00:00:55.002 --> 00:00:58.006
the definition of ArrayList changed to something like this,

26
00:00:58.006 --> 00:01:00.004
public class ArrayList,

27
00:01:00.004 --> 00:01:03.003
and now it is followed by a of angle brackets.

28
00:01:03.003 --> 00:01:06.002
In between those angle brackets sits E

29
00:01:06.002 --> 00:01:07.009
that is marked in bold.

30
00:01:07.009 --> 00:01:11.003
This E is called the type parameter.

31
00:01:11.003 --> 00:01:12.006
And this is the parameter

32
00:01:12.006 --> 00:01:15.002
that has now been enabled on the class.

33
00:01:15.002 --> 00:01:17.005
So if you look at the detailed code implementation

34
00:01:17.005 --> 00:01:18.008
of the ArrayList class,

35
00:01:18.008 --> 00:01:21.009
you'll find that this E will be replaced

36
00:01:21.009 --> 00:01:25.005
by any desired type argument that you pass

37
00:01:25.005 --> 00:01:29.002
when you instantiate the ArrayList class.

38
00:01:29.002 --> 00:01:30.004
Let us now understand

39
00:01:30.004 --> 00:01:34.005
how can you invoke this generic type ArrayList.

40
00:01:34.005 --> 00:01:37.000
So here we have the generic class,

41
00:01:37.000 --> 00:01:39.009
public class ArrayList of E,

42
00:01:39.009 --> 00:01:42.008
and now let's say you want to create an ArrayList

43
00:01:42.008 --> 00:01:47.002
which can hold values of integer type only.

44
00:01:47.002 --> 00:01:51.001
In this case, you will instantiate ArrayList like this,

45
00:01:51.001 --> 00:01:55.004
new ArrayList, followed by a pair of angle brackets,

46
00:01:55.004 --> 00:01:56.007
and in between those brackets

47
00:01:56.007 --> 00:01:59.000
you mention the type argument.

48
00:01:59.000 --> 00:02:00.007
In this case it'll be in integer

49
00:02:00.007 --> 00:02:03.007
because you want to create an ArrayList of integers.

50
00:02:03.007 --> 00:02:06.005
This will be followed by a pair of round brackets

51
00:02:06.005 --> 00:02:07.007
and then the semicolon.

52
00:02:07.007 --> 00:02:09.008
The round brackets is the constructor call

53
00:02:09.008 --> 00:02:12.009
which is part of the object creation process in Java.

54
00:02:12.009 --> 00:02:15.008
So now you can think of this integer type

55
00:02:15.008 --> 00:02:18.002
replacing that parameter E

56
00:02:18.002 --> 00:02:21.001
that we saw in the ArrayList definition.

57
00:02:21.001 --> 00:02:23.004
Similarly, let's say you want to create an a

58
00:02:23.004 --> 00:02:25.001
that holds string values.

59
00:02:25.001 --> 00:02:27.008
Then you will invoke that ArrayList generic type

60
00:02:27.008 --> 00:02:31.000
by instantiating the ArrayList class like this.

61
00:02:31.000 --> 00:02:33.009
New ArrayList of String

62
00:02:33.009 --> 00:02:35.009
followed by a pair of round brackets.

63
00:02:35.009 --> 00:02:38.008
So now you can think of this String type

64
00:02:38.008 --> 00:02:43.000
replacing that parameter E in the ArrayList definition.

65
00:02:43.000 --> 00:02:44.009
So you may think of this approach

66
00:02:44.009 --> 00:02:47.001
as restricting the kind of values

67
00:02:47.001 --> 00:02:49.003
that you're inserting in the ArrayList.

68
00:02:49.003 --> 00:02:52.006
Not really, in most of the typical coding scenarios

69
00:02:52.006 --> 00:02:57.004
that we have, we do not want to mix values of integer

70
00:02:57.004 --> 00:03:00.008
and string type together in the same collection.

71
00:03:00.008 --> 00:03:03.000
We always want that the collection

72
00:03:03.000 --> 00:03:04.009
or let's say a particular collection

73
00:03:04.009 --> 00:03:08.003
holds values only of a certain type.

74
00:03:08.003 --> 00:03:10.006
If you're wondering what was that E

75
00:03:10.006 --> 00:03:12.006
in the definition of the ArrayList

76
00:03:12.006 --> 00:03:14.002
and why was it named like that.

77
00:03:14.002 --> 00:03:15.008
Don't bother too much about it.

78
00:03:15.008 --> 00:03:17.008
It is a part of the naming convention

79
00:03:17.008 --> 00:03:21.000
for type parameter which we will get to later.

80
00:03:21.000 --> 00:03:23.008
This kind of a generic class can then hold

81
00:03:23.008 --> 00:03:25.007
all kinds of operations

82
00:03:25.007 --> 00:03:29.005
to be performed on a varied number of types.

83
00:03:29.005 --> 00:03:32.001
And this offers developers an opportunity

84
00:03:32.001 --> 00:03:34.005
to develop generic algorithms.

85
00:03:34.005 --> 00:03:36.003
Generics feature was introduced

86
00:03:36.003 --> 00:03:40.003
as a part of Java JDK 5.0 version,

87
00:03:40.003 --> 00:03:43.003
and it is one of the most indispensable features

88
00:03:43.003 --> 00:03:44.008
in the language today.

89
00:03:44.008 --> 00:03:48.009
All the code of the collection API is written with generics.

90
00:03:48.009 --> 00:03:51.000
Pick any framework from Java

91
00:03:51.000 --> 00:03:52.009
or the enterprise edition of Java

92
00:03:52.009 --> 00:03:55.009
and you'll see that generic is all over the place.

93
00:03:55.009 --> 00:03:58.007
It is a vital feature that every Java developer

94
00:03:58.007 --> 00:04:00.002
should know and learn.

95
00:04:00.002 --> 00:04:02.005
In order to understand generics invocation

96
00:04:02.005 --> 00:04:06.000
and the basic definition better, we can compare this

97
00:04:06.000 --> 00:04:08.006
with the method definition and invocation.

98
00:04:08.006 --> 00:04:09.005
Let's see how.

99
00:04:09.005 --> 00:04:11.005
Let's say you have a class Product

100
00:04:11.005 --> 00:04:16.001
and you have a method defined in it, public void additem,

101
00:04:16.001 --> 00:04:18.007
and it takes a parameter of the type item.

102
00:04:18.007 --> 00:04:21.007
If you want to call this a or invoke this method

103
00:04:21.007 --> 00:04:23.000
you're going to do this.

104
00:04:23.000 --> 00:04:25.003
You'll create an object of the Product class

105
00:04:25.003 --> 00:04:27.009
and after that, you'll call the method additem

106
00:04:27.009 --> 00:04:30.008
and this time you're going to pass an argument

107
00:04:30.008 --> 00:04:32.001
of the item type.

108
00:04:32.001 --> 00:04:34.008
In this case an object of the item class.

109
00:04:34.008 --> 00:04:38.006
Generic definition and invocation is very similar to this.

110
00:04:38.006 --> 00:04:39.004
Let's see how.

111
00:04:39.004 --> 00:04:42.004
If you look at the List generic type it looks like this,

112
00:04:42.004 --> 00:04:46.006
public interface List of E extends collection of E.

113
00:04:46.006 --> 00:04:48.008
If you look at the ArrayList generic type

114
00:04:48.008 --> 00:04:52.002
it looks like this, public class ArrayList of E,

115
00:04:52.002 --> 00:04:56.000
extends AbstractList of E, implements List of E, et cetera.

116
00:04:56.000 --> 00:04:58.008
If you want to invoke this generic definition

117
00:04:58.008 --> 00:05:00.006
you will write code like this.

118
00:05:00.006 --> 00:05:05.007
List of Product data equal to new ArrayList of Product.

119
00:05:05.007 --> 00:05:07.005
Let's see this piece by piece.

120
00:05:07.005 --> 00:05:09.008
When you say List of Product data

121
00:05:09.008 --> 00:05:12.007
it means you created a reference variable data

122
00:05:12.007 --> 00:05:14.002
which is of the type List.

123
00:05:14.002 --> 00:05:17.000
And this List is going to hold values

124
00:05:17.000 --> 00:05:19.002
only of the Product type.

125
00:05:19.002 --> 00:05:22.001
So the Product type that is mentioned in the angle brackets

126
00:05:22.001 --> 00:05:24.005
is going to replace the parameter E

127
00:05:24.005 --> 00:05:27.003
that we saw in the List generic type.

128
00:05:27.003 --> 00:05:29.007
Similarly, when you created an object

129
00:05:29.007 --> 00:05:33.003
of the ArrayList class, you said ArrayList of Product.

130
00:05:33.003 --> 00:05:35.005
So now the Product type

131
00:05:35.005 --> 00:05:39.003
mentioned in the angle brackets again is going to replace E

132
00:05:39.003 --> 00:05:40.008
that we saw in the declaration

133
00:05:40.008 --> 00:05:42.006
of the ArrayList generic type.

134
00:05:42.006 --> 00:05:43.004
Let's do one thing.

135
00:05:43.004 --> 00:05:46.004
Let's rewrite a previous code with the generics feature

136
00:05:46.004 --> 00:05:48.004
and see the difference that it makes.

137
00:05:48.004 --> 00:05:51.009
Let's go back to the IDE and I'll create a class.

138
00:05:51.009 --> 00:05:58.005
This time let's label this as GenericsCode.

139
00:05:58.005 --> 00:05:59.004
In this class

140
00:05:59.004 --> 00:06:01.003
we are going to write the same code more or less

141
00:06:01.003 --> 00:06:02.005
but we are going to write everything

142
00:06:02.005 --> 00:06:03.008
with the generics feature.

143
00:06:03.008 --> 00:06:08.000
So let's start and create the List type of variable.

144
00:06:08.000 --> 00:06:10.006
But this time, in addition to just writing List

145
00:06:10.006 --> 00:06:13.006
I'm going to follow it with a pair of angle brackets

146
00:06:13.006 --> 00:06:16.004
and I'm going to mention the type String,

147
00:06:16.004 --> 00:06:18.001
and then let's give a variable name to this.

148
00:06:18.001 --> 00:06:20.001
Let's say Languages.

149
00:06:20.001 --> 00:06:23.002
So what we did is we created a reference variable Languages

150
00:06:23.002 --> 00:06:24.004
which is of the List type,

151
00:06:24.004 --> 00:06:26.009
but this List is now going to hold values

152
00:06:26.009 --> 00:06:29.004
of the String type only.

153
00:06:29.004 --> 00:06:34.003
So we invoked the generic type List on line number seven.

154
00:06:34.003 --> 00:06:35.003
This is just a reference.

155
00:06:35.003 --> 00:06:36.005
Let's also create the objects.

156
00:06:36.005 --> 00:06:41.000
So we'll say new ArrayList.

157
00:06:41.000 --> 00:06:42.004
Now the word ArrayList will again

158
00:06:42.004 --> 00:06:44.007
be followed by a pair of angle brackets,

159
00:06:44.007 --> 00:06:47.004
and I'm going to mention the type here as well,

160
00:06:47.004 --> 00:06:49.000
followed by the pair of round brackets,

161
00:06:49.000 --> 00:06:50.003
the constructor call

162
00:06:50.003 --> 00:06:53.006
which is the object creation process in Java.

163
00:06:53.006 --> 00:06:57.006
And please note that the type argument String

164
00:06:57.006 --> 00:06:59.006
is exactly the same on both the sides

165
00:06:59.006 --> 00:07:01.002
of the assignment operator.

166
00:07:01.002 --> 00:07:04.000
If you give it any different, it won't work.

167
00:07:04.000 --> 00:07:08.000
Now let's come on the next line and say Languages.add.

168
00:07:08.000 --> 00:07:10.001
Now if you look at the method signature,

169
00:07:10.001 --> 00:07:13.007
you observe that it is asking you to add something

170
00:07:13.007 --> 00:07:17.001
of the type String as opposed to object

171
00:07:17.001 --> 00:07:19.003
that we saw in our previous video.

172
00:07:19.003 --> 00:07:25.007
So let's go ahead and add our languages.

173
00:07:25.007 --> 00:07:31.002
Add Swedish.

174
00:07:31.002 --> 00:07:33.007
Let's also call the method, ProcessLanguages.

175
00:07:33.007 --> 00:07:36.004
It's the same thing that we did in the previous video

176
00:07:36.004 --> 00:07:40.003
and pass that Languages list as an argument.

177
00:07:40.003 --> 00:07:42.002
Let's come out of the main method

178
00:07:42.002 --> 00:07:49.000
and write the private static void ProcessLanguages method

179
00:07:49.000 --> 00:07:53.004
and take a parameter of the type List.

180
00:07:53.004 --> 00:07:55.003
So on line number eight

181
00:07:55.003 --> 00:07:58.000
we created a list with generics.

182
00:07:58.000 --> 00:08:01.000
On line number 14, we have a parameter data

183
00:08:01.000 --> 00:08:02.005
which is of the type List.

184
00:08:02.005 --> 00:08:06.003
But if you observe on line 14 the parameter List

185
00:08:06.003 --> 00:08:09.003
is not followed by angle brackets,

186
00:08:09.003 --> 00:08:11.008
and there are no arguments mentioned for types.

187
00:08:11.008 --> 00:08:16.000
So this is still a raw type but the code compiles well,

188
00:08:16.000 --> 00:08:17.001
we are all good.

189
00:08:17.001 --> 00:08:24.002
Now let's come on line 15 and say String Language

190
00:08:24.002 --> 00:08:28.000
equal to data.get zero.

191
00:08:28.000 --> 00:08:30.009
Unfortunately this line still doesn't come by

192
00:08:30.009 --> 00:08:32.006
but we thought that we are using generics

193
00:08:32.006 --> 00:08:35.001
and now we don't have to do the casting, correct?

194
00:08:35.001 --> 00:08:36.009
But the problem here is that

195
00:08:36.009 --> 00:08:39.006
on line number 14 the parameter data,

196
00:08:39.006 --> 00:08:42.000
which is of the list type is still a raw type.

197
00:08:42.000 --> 00:08:45.000
If you want utilize the complete power of generics

198
00:08:45.000 --> 00:08:48.007
we need to invoke the generics even for this parameter.

199
00:08:48.007 --> 00:08:50.008
So I'm now going to modify,

200
00:08:50.008 --> 00:08:53.002
follow this List with a pair of angle brackets

201
00:08:53.002 --> 00:08:56.008
and mention the type here as well.

202
00:08:56.008 --> 00:08:58.003
The moment we do this,

203
00:08:58.003 --> 00:09:01.002
the compilation on line 15 is successful,

204
00:09:01.002 --> 00:09:02.004
and then you can go ahead

205
00:09:02.004 --> 00:09:08.006
and print the Language variable to the console.

206
00:09:08.006 --> 00:09:11.006
So if you run this code everything will definitely go well

207
00:09:11.006 --> 00:09:17.006
and we will have English printed on a console.

208
00:09:17.006 --> 00:09:20.001
So the first issue that we were talking about

209
00:09:20.001 --> 00:09:21.009
in the previous video is solved.

210
00:09:21.009 --> 00:09:24.008
We do not have to do any kind of explicit casting

211
00:09:24.008 --> 00:09:27.005
on line number 15, that's gone.

212
00:09:27.005 --> 00:09:30.000
So the clutter that we introduced is gone.

213
00:09:30.000 --> 00:09:32.000
The second issue was about type safety.

214
00:09:32.000 --> 00:09:34.003
Let's understand how that works with generics.

215
00:09:34.003 --> 00:09:36.009
So on line number nine let's do the same thing

216
00:09:36.009 --> 00:09:40.008
instead of the string value, let's add a number 23.

217
00:09:40.008 --> 00:09:44.008
And this time we are getting a compilation problem.

218
00:09:44.008 --> 00:09:47.002
It says that the required type is String

219
00:09:47.002 --> 00:09:49.006
but you're providing an integer.

220
00:09:49.006 --> 00:09:52.003
So this is the magic that generic spins for you.

221
00:09:52.003 --> 00:09:55.006
On line number eight, since you already declared

222
00:09:55.006 --> 00:09:58.004
that the Languages list must contain values

223
00:09:58.004 --> 00:10:00.004
only of the String type.

224
00:10:00.004 --> 00:10:03.006
The moment you try to add an integer value

225
00:10:03.006 --> 00:10:08.004
on line number nine, the compilation stage itself fails.

226
00:10:08.004 --> 00:10:11.004
The compiler says you are adding a wrong value

227
00:10:11.004 --> 00:10:14.005
into the collection, and I will not permit that.

228
00:10:14.005 --> 00:10:16.008
So now, since this code does not compile

229
00:10:16.008 --> 00:10:19.003
I will have to ensure that I add values

230
00:10:19.003 --> 00:10:22.000
only of the String type.

231
00:10:22.000 --> 00:10:26.007
So this is how the type safety is guaranteed using generics.

232
00:10:26.007 --> 00:10:27.006
Since the compilation

233
00:10:27.006 --> 00:10:31.005
does not allow us to add wrong values to the collection,

234
00:10:31.005 --> 00:10:34.008
we will never run into any kind of potential problems

235
00:10:34.008 --> 00:10:37.008
like the class cast exception at run type.

236
00:10:37.008 --> 00:10:38.008
So there we go.

237
00:10:38.008 --> 00:10:41.002
That's how generics solves those two issues

238
00:10:41.002 --> 00:10:42.004
that we talked about.

239
00:10:42.004 --> 00:10:44.005
When we wrote this generic called class

240
00:10:44.005 --> 00:10:48.000
what we actually did is generify the code.

