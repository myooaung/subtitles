WEBVTT
1
00:00:00.005 --> 00:00:01.008
- [Instructor] Let us now understand

2
00:00:01.008 --> 00:00:04.000
generic class hierarchies but before that,

3
00:00:04.000 --> 00:00:06.008
let's do a quick recap of Java inheritance.

4
00:00:06.008 --> 00:00:09.002
When you implement inheritance with Java,

5
00:00:09.002 --> 00:00:12.009
you can always assign an object of the child class

6
00:00:12.009 --> 00:00:15.009
to a reference variable of the parent class.

7
00:00:15.009 --> 00:00:18.002
So let's say you have a class called Animal.

8
00:00:18.002 --> 00:00:20.001
This is the super class, and you're going

9
00:00:20.001 --> 00:00:23.002
to have a Dog, class which is derived out of Animal.

10
00:00:23.002 --> 00:00:24.009
So Dog is the sub-class.

11
00:00:24.009 --> 00:00:26.006
When you have this kind of a relationship,

12
00:00:26.006 --> 00:00:29.004
you can write a line of code like this,

13
00:00:29.004 --> 00:00:33.009
Animal animal = new Dog, which means you have an object

14
00:00:33.009 --> 00:00:36.000
of the dog, which is the sub-class,

15
00:00:36.000 --> 00:00:38.005
and you can refer to it by a variable

16
00:00:38.005 --> 00:00:41.005
of the type Animal, which is the superclass.

17
00:00:41.005 --> 00:00:44.006
Additionally, in inheritance with Java,

18
00:00:44.006 --> 00:00:48.007
you can always pass child class as an argument

19
00:00:48.007 --> 00:00:53.003
to a method that accepts the parent class as a parameter.

20
00:00:53.003 --> 00:00:54.005
Let's understand this.

21
00:00:54.005 --> 00:00:56.009
Let's say you have a class called AnimalUtils

22
00:00:56.009 --> 00:01:00.002
and inside that, you have a static method called walk.

23
00:01:00.002 --> 00:01:04.004
This walk method accepts a parameter of the Animal type,

24
00:01:04.004 --> 00:01:06.005
which in our case is the super class.

25
00:01:06.005 --> 00:01:08.001
When you invoke this method,

26
00:01:08.001 --> 00:01:10.004
you can write code like this,

27
00:01:10.004 --> 00:01:13.004
AnimalUtils.walk and inside that,

28
00:01:13.004 --> 00:01:15.003
you're passing an argument,

29
00:01:15.003 --> 00:01:17.009
which is an object of the Dog class.

30
00:01:17.009 --> 00:01:20.001
Now, let's talk about generic class hierarchies.

31
00:01:20.001 --> 00:01:23.004
Generic classes can always be a part of any hierarchy.

32
00:01:23.004 --> 00:01:26.007
So they behave the same as non-generic classes,

33
00:01:26.007 --> 00:01:28.002
and the rules of inheritance

34
00:01:28.002 --> 00:01:30.007
that we saw a minute ago will apply

35
00:01:30.007 --> 00:01:32.009
to all generic class hierarchies as well.

36
00:01:32.009 --> 00:01:35.001
However, there are key differences

37
00:01:35.001 --> 00:01:37.009
and some rules that we need to take care of.

38
00:01:37.009 --> 00:01:39.006
Let's see them one by one.

39
00:01:39.006 --> 00:01:44.002
The first is a generic sub-class must always pass

40
00:01:44.002 --> 00:01:47.002
the type-parameters up the hierarchy.

41
00:01:47.002 --> 00:01:48.003
Let's understand this.

42
00:01:48.003 --> 00:01:51.000
We know that list of E and ArrayList

43
00:01:51.000 --> 00:01:53.002
of E are connected together

44
00:01:53.002 --> 00:01:56.002
by the inheritance relationship in the Java APIs.

45
00:01:56.002 --> 00:01:59.001
Now, let's say you choose to write your custom

46
00:01:59.001 --> 00:02:03.003
list implementation that extends the ArrayList class.

47
00:02:03.003 --> 00:02:07.006
In that case, your code should look like this, public class.

48
00:02:07.006 --> 00:02:10.004
The custom list implementation class is CustomList.

49
00:02:10.004 --> 00:02:15.006
So CustomList of E extends ArrayList of E.

50
00:02:15.006 --> 00:02:18.006
So the type-parameter, E, that we have defined

51
00:02:18.006 --> 00:02:22.001
on the CustomList class is also defined

52
00:02:22.001 --> 00:02:25.004
as the type-parameter for the super class ArrayList

53
00:02:25.004 --> 00:02:27.000
in the extends clause.

54
00:02:27.000 --> 00:02:29.009
It is perfectly all right if you do not want

55
00:02:29.009 --> 00:02:32.006
to use this E type-parameter anywhere

56
00:02:32.006 --> 00:02:34.003
in the CustomList class.

57
00:02:34.003 --> 00:02:37.006
So even if the sub-class need not be generic,

58
00:02:37.006 --> 00:02:40.002
it still has to pass the type-parameters

59
00:02:40.002 --> 00:02:42.002
to support the super class.

60
00:02:42.002 --> 00:02:45.007
If you choose not to do this, then you write code like this,

61
00:02:45.007 --> 00:02:49.008
public class CustomList extends ArrayList

62
00:02:49.008 --> 00:02:52.009
but in that case, you are making a raw use

63
00:02:52.009 --> 00:02:55.006
of the parameterized ArrayList class,

64
00:02:55.006 --> 00:02:57.008
and we've already learned in our first module,

65
00:02:57.008 --> 00:03:01.008
never use raw types when we write code with generics.

66
00:03:01.008 --> 00:03:04.007
The next rule is that a generic sub-class

67
00:03:04.007 --> 00:03:09.001
can always extend a non-generic parent class.

68
00:03:09.001 --> 00:03:11.000
So let's say you have a line of code like this,

69
00:03:11.000 --> 00:03:15.006
public class, sub-class of T extends Superclass.

70
00:03:15.006 --> 00:03:18.009
Now, the super class here is a non-generic class

71
00:03:18.009 --> 00:03:22.004
but on the sub-class, we have a type-parameter, T, defined,

72
00:03:22.004 --> 00:03:24.004
and this is perfectly fine.

73
00:03:24.004 --> 00:03:28.007
A special case is when you have a generic sub-class

74
00:03:28.007 --> 00:03:33.008
that specifies a type-argument on the super class directly

75
00:03:33.008 --> 00:03:36.006
in the extents or implements clause.

76
00:03:36.006 --> 00:03:37.006
Let's see how.

77
00:03:37.006 --> 00:03:39.009
There's a class called IntComparator,

78
00:03:39.009 --> 00:03:43.006
and this implements the comparator interface of Java.

79
00:03:43.006 --> 00:03:46.002
If you see in the implements clause,

80
00:03:46.002 --> 00:03:50.001
we have specified the type-argument of Integer.

81
00:03:50.001 --> 00:03:51.007
This is totally possible.

82
00:03:51.007 --> 00:03:56.008
This also means that IntComparator class is a generic class.

83
00:03:56.008 --> 00:04:00.004
However, these kind of situations are really rare.

84
00:04:00.004 --> 00:04:02.002
The next rule is sub-class

85
00:04:02.002 --> 00:04:05.004
can always declare more type-parameters.

86
00:04:05.004 --> 00:04:08.002
So if you have a declaration like this,

87
00:04:08.002 --> 00:04:14.003
public class CustomList of E, S extends ArrayList of E.

88
00:04:14.003 --> 00:04:17.006
In this case, we see that the E type-parameter

89
00:04:17.006 --> 00:04:20.001
is definitely declared on the custom list

90
00:04:20.001 --> 00:04:22.009
because it has to support the E type-parameter

91
00:04:22.009 --> 00:04:25.009
of the super class, but CustomList also has

92
00:04:25.009 --> 00:04:28.006
an additional type-parameter that is S,

93
00:04:28.006 --> 00:04:31.004
which it uses for its own implementation.

94
00:04:31.004 --> 00:04:33.006
Lastly, casting is permitted.

95
00:04:33.006 --> 00:04:37.002
This means that an object of a generic sub-class

96
00:04:37.002 --> 00:04:41.003
can be referred to by a variable of a generic super class.

97
00:04:41.003 --> 00:04:43.000
Let's understand that with an example.

98
00:04:43.000 --> 00:04:45.003
Let's say you have a variable data

99
00:04:45.003 --> 00:04:47.003
which is off the type List of String.

100
00:04:47.003 --> 00:04:50.004
On the next line, you write a line like this,

101
00:04:50.004 --> 00:04:51.009
ArrayList of String.

102
00:04:51.009 --> 00:04:55.001
The variable name is Languages, and that is instantiated

103
00:04:55.001 --> 00:04:58.004
to an ArrayList class that is new ArrayList of String.

104
00:04:58.004 --> 00:05:02.005
You can always then assign the Language is variable

105
00:05:02.005 --> 00:05:04.001
to the data variable.

106
00:05:04.001 --> 00:05:05.008
This is totally possible, and this is

107
00:05:05.008 --> 00:05:07.000
the same inheritance rule

108
00:05:07.000 --> 00:05:09.009
that we anyway see with Java inheritance.

109
00:05:09.009 --> 00:05:11.009
Let's do a quick and short demo

110
00:05:11.009 --> 00:05:13.008
for the generic class hierarchies.

111
00:05:13.008 --> 00:05:16.005
The first step is to create a class,

112
00:05:16.005 --> 00:05:19.000
CardboardBox, that extends Box.

113
00:05:19.000 --> 00:05:20.000
So now, we are going to create

114
00:05:20.000 --> 00:05:22.007
an inheritance relationship between our generic classes.

115
00:05:22.007 --> 00:05:26.002
For that, we'll have to create a new class, CardboardBox.

116
00:05:26.002 --> 00:05:28.001
So let's head back to the IDE

117
00:05:28.001 --> 00:05:31.003
and on a package, let's create a class.

118
00:05:31.003 --> 00:05:35.001
Let's call it CardboardBox,

119
00:05:35.001 --> 00:05:38.007
and this should extend the Box class.

120
00:05:38.007 --> 00:05:40.001
Now, observe something here.

121
00:05:40.001 --> 00:05:42.002
If I just say extends Box,

122
00:05:42.002 --> 00:05:45.002
I immediately get a warning from the compiler,

123
00:05:45.002 --> 00:05:47.002
and it says that I'm making raw use

124
00:05:47.002 --> 00:05:49.005
of the parameters-class Box.

125
00:05:49.005 --> 00:05:52.000
This is something that you do not want to do.

126
00:05:52.000 --> 00:05:54.009
We never want to use raw types in our code.

127
00:05:54.009 --> 00:05:58.005
So this has to be Box of T.

128
00:05:58.005 --> 00:06:02.001
The class that we are extending has to be Box of T

129
00:06:02.001 --> 00:06:06.001
and now, when you extend from a generic super class,

130
00:06:06.001 --> 00:06:08.000
then the rule is that the sub-class,

131
00:06:08.000 --> 00:06:10.002
which is CardboardBox in our case,

132
00:06:10.002 --> 00:06:14.004
has to specify the type-parameters up the hierarchy.

133
00:06:14.004 --> 00:06:17.004
Means it has to specify the type-parameters

134
00:06:17.004 --> 00:06:20.009
that were already defined on the super class, Box.

135
00:06:20.009 --> 00:06:22.001
So we will do that.

136
00:06:22.001 --> 00:06:28.005
So we'll say T extends Boxable

137
00:06:28.005 --> 00:06:31.001
because that was the pounded type

138
00:06:31.001 --> 00:06:34.002
that was defined on our Box class.

139
00:06:34.002 --> 00:06:35.000
So we are all set.

140
00:06:35.000 --> 00:06:37.003
This is how you create a generic sub-class.

141
00:06:37.003 --> 00:06:40.001
Remember that you always need your sub-class

142
00:06:40.001 --> 00:06:42.001
to pass those type-parameters that

143
00:06:42.001 --> 00:06:45.005
have already been defined on the super class.

144
00:06:45.005 --> 00:06:50.002
Next step is to override the getTotalWeight method.

145
00:06:50.002 --> 00:06:52.005
Now that we've created an inheritance relationship,

146
00:06:52.005 --> 00:06:56.003
we can always go and override methods in the sub-class.

147
00:06:56.003 --> 00:06:58.000
So let's go ahead and do that.

148
00:06:58.000 --> 00:07:00.007
Let's come inside this CardboardBox class,

149
00:07:00.007 --> 00:07:03.006
and I'm just going to type in the getTotalWeight words,

150
00:07:03.006 --> 00:07:06.006
and the method definition should get generated.

151
00:07:06.006 --> 00:07:09.002
So this is the overridden method.

152
00:07:09.002 --> 00:07:10.003
We are not going to implement

153
00:07:10.003 --> 00:07:12.009
any special logic in this method.

154
00:07:12.009 --> 00:07:14.009
What I can only do is.

155
00:07:14.009 --> 00:07:18.003
Let's say, return super.getTotalWeight

156
00:07:18.003 --> 00:07:22.001
and let's add 100 grams of weight to this.

157
00:07:22.001 --> 00:07:23.000
Why 100 grams?

158
00:07:23.000 --> 00:07:25.006
Because this is the weight of the cardboard box itself.

159
00:07:25.006 --> 00:07:28.001
So that gets added to the total weight.

160
00:07:28.001 --> 00:07:30.003
Right, so that's the simple logic,

161
00:07:30.003 --> 00:07:31.001
and the last step will be,

162
00:07:31.001 --> 00:07:35.004
then we'll create an instance of the cardboard box,

163
00:07:35.004 --> 00:07:38.000
and we will assign it to a Box reference.

164
00:07:38.000 --> 00:07:40.005
So this casting now, should totally work.

165
00:07:40.005 --> 00:07:42.002
Let's go ahead.

166
00:07:42.002 --> 00:07:43.006
Let's create a new test class

167
00:07:43.006 --> 00:07:45.002
because this is a separate module.

168
00:07:45.002 --> 00:07:47.000
So let's create a fresh test class now.

169
00:07:47.000 --> 00:07:53.009
Let's say TestGeneric. Let's spell that correctly.

170
00:07:53.009 --> 00:07:57.008
Hierarchies. Let's write the main method.

171
00:07:57.008 --> 00:07:59.005
Now, we are going to create two boxes.

172
00:07:59.005 --> 00:08:04.005
Let's say CardboardBox of Fruit.

173
00:08:04.005 --> 00:08:08.004
Let's call it CardboardBox, and then let's go ahead

174
00:08:08.004 --> 00:08:10.009
and say CardboardBox instantiation

175
00:08:10.009 --> 00:08:11.008
with the diamond operator.

176
00:08:11.008 --> 00:08:15.004
So you don't have to mention the type-argument again.

177
00:08:15.004 --> 00:08:19.000
Next, let's also create a box of Fruit,

178
00:08:19.000 --> 00:08:20.008
the same type-argument.

179
00:08:20.008 --> 00:08:27.008
Let's call it FruitBox and instantiate that again,

180
00:08:27.008 --> 00:08:29.005
and what we are going to try now is

181
00:08:29.005 --> 00:08:34.006
we'll say FruitBox is equal to CardboardBox.

182
00:08:34.006 --> 00:08:36.006
So what we did is we assigned

183
00:08:36.006 --> 00:08:40.003
the CardboardBox variable to the FruitBox variable,

184
00:08:40.003 --> 00:08:41.008
and this is totally possible.

185
00:08:41.008 --> 00:08:43.007
This is casting that is allowed

186
00:08:43.007 --> 00:08:45.005
in generic class hierarchies.

187
00:08:45.005 --> 00:08:48.003
You have an object of the generic sub-class

188
00:08:48.003 --> 00:08:52.007
on line number five that you are trying to refer to

189
00:08:52.007 --> 00:08:56.006
by a variable of the generic super class.

190
00:08:56.006 --> 00:08:59.000
That's what we did, and this is totally allowed.

