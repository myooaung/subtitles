WEBVTT
1
00:00:00.005 --> 00:00:03.001
- [Instructor] Let us understand the need for generics.

2
00:00:03.001 --> 00:00:04.000
But before that,

3
00:00:04.000 --> 00:00:06.004
we will have to know a couple of things well,

4
00:00:06.004 --> 00:00:09.003
the first one is recap of a few common terms

5
00:00:09.003 --> 00:00:11.003
that we use in the Java language.

6
00:00:11.003 --> 00:00:13.000
The first term is type.

7
00:00:13.000 --> 00:00:17.006
Type is any class, interface or enumerated datatype.

8
00:00:17.006 --> 00:00:19.000
And this type could be inbuilt,

9
00:00:19.000 --> 00:00:20.007
that is from the Java APIs,

10
00:00:20.007 --> 00:00:23.004
or it could be custom, that is developed by you.

11
00:00:23.004 --> 00:00:26.004
An example of an inbuilt type from the Java APIs

12
00:00:26.004 --> 00:00:29.004
is the class string, the class object,

13
00:00:29.004 --> 00:00:34.001
or even the interfaces, like list, set, map, et cetera.

14
00:00:34.001 --> 00:00:37.000
In your application, if you have a class called product,

15
00:00:37.000 --> 00:00:38.001
that is a type.

16
00:00:38.001 --> 00:00:39.006
If somewhere in your code

17
00:00:39.006 --> 00:00:42.003
you have an interface called Bounceable that you coded,

18
00:00:42.003 --> 00:00:43.008
that is also a type.

19
00:00:43.008 --> 00:00:46.008
The next term is object type reference.

20
00:00:46.008 --> 00:00:49.001
This means that you have a variable

21
00:00:49.001 --> 00:00:51.003
which is of the object type.

22
00:00:51.003 --> 00:00:53.009
Now object as we know is the super class

23
00:00:53.009 --> 00:00:55.009
of all the classes in Java.

24
00:00:55.009 --> 00:00:58.001
So if we write code like this,

25
00:00:58.001 --> 00:01:01.005
object name equal to new object,

26
00:01:01.005 --> 00:01:04.006
this means that we have a variable name

27
00:01:04.006 --> 00:01:06.006
which is of the type object,

28
00:01:06.006 --> 00:01:09.004
so name becomes object type reference.

29
00:01:09.004 --> 00:01:11.000
And then we have instance.

30
00:01:11.000 --> 00:01:14.007
In Java, whenever you create an object of any class

31
00:01:14.007 --> 00:01:16.008
using the new keyboard,

32
00:01:16.008 --> 00:01:19.009
then we say we created an instance of the class,

33
00:01:19.009 --> 00:01:23.004
or alternately, we instantiated the class.

34
00:01:23.004 --> 00:01:25.008
So for example, if you want to create an object

35
00:01:25.008 --> 00:01:27.002
of the ArrayList class,

36
00:01:27.002 --> 00:01:29.002
you would use the new keyword,

37
00:01:29.002 --> 00:01:31.001
followed by the name of the class,

38
00:01:31.001 --> 00:01:32.009
and then a pair of round brackets.

39
00:01:32.009 --> 00:01:35.004
The round bracket signify the construct of call

40
00:01:35.004 --> 00:01:38.009
responsible for object creation process in Java.

41
00:01:38.009 --> 00:01:41.001
Similarly, if you have a class called product

42
00:01:41.001 --> 00:01:43.003
and you want to create an object of that,

43
00:01:43.003 --> 00:01:45.004
you would say new product,

44
00:01:45.004 --> 00:01:47.001
followed by a pair of round brackets,

45
00:01:47.001 --> 00:01:50.004
and you would refer to it by a variable of the product type.

46
00:01:50.004 --> 00:01:52.005
Let's go ahead and understand one more concept

47
00:01:52.005 --> 00:01:54.001
of generalized code.

48
00:01:54.001 --> 00:01:57.004
In Java, one can always write generalized code

49
00:01:57.004 --> 00:02:00.002
using the object oriented programming principles

50
00:02:00.002 --> 00:02:02.008
of inheritance and polymorphism.

51
00:02:02.008 --> 00:02:04.009
This means that if you have a logic

52
00:02:04.009 --> 00:02:07.002
that is implemented for a parent class,

53
00:02:07.002 --> 00:02:10.000
it will be available to all the child classes

54
00:02:10.000 --> 00:02:11.007
extending that parent.

55
00:02:11.007 --> 00:02:14.007
So for example, if we write code like this,

56
00:02:14.007 --> 00:02:18.000
number number equal to new integer,

57
00:02:18.000 --> 00:02:20.006
and in a pair of round brackets, the value 10,

58
00:02:20.006 --> 00:02:25.000
this means that we created an object of the class integer,

59
00:02:25.000 --> 00:02:27.007
and we are referring to it by a variable

60
00:02:27.007 --> 00:02:29.003
which is of the number type.

61
00:02:29.003 --> 00:02:32.000
Now number is a class in Java,

62
00:02:32.000 --> 00:02:35.008
and it is also the parent class of the integer class.

63
00:02:35.008 --> 00:02:38.003
So we can create an object of the sub class

64
00:02:38.003 --> 00:02:42.006
and we can refer to it by a variable of the super class.

65
00:02:42.006 --> 00:02:45.000
So all the implementation that is available

66
00:02:45.000 --> 00:02:47.005
in a number class will be carried ahead

67
00:02:47.005 --> 00:02:48.009
to the integer class.

68
00:02:48.009 --> 00:02:50.006
taking a step further to this,

69
00:02:50.006 --> 00:02:53.001
since we know that object is the super class

70
00:02:53.001 --> 00:02:55.002
of all the other classes in Java,

71
00:02:55.002 --> 00:02:57.005
we can always write generalized code

72
00:02:57.005 --> 00:03:00.002
using object type references as well.

73
00:03:00.002 --> 00:03:02.009
That is because an object type reference

74
00:03:02.009 --> 00:03:06.001
can point to an instance of any class.

75
00:03:06.001 --> 00:03:08.005
So for example, if we write code like this,

76
00:03:08.005 --> 00:03:11.005
object value equal to new string,

77
00:03:11.005 --> 00:03:14.006
and in a pair of round brackets "Java,"

78
00:03:14.006 --> 00:03:17.009
this means that we created an object of the string class,

79
00:03:17.009 --> 00:03:21.000
but we are to it by a variable value,

80
00:03:21.000 --> 00:03:22.008
which is of the object type.

81
00:03:22.008 --> 00:03:24.001
So same thing again,

82
00:03:24.001 --> 00:03:27.001
you're creating instances of child classes,

83
00:03:27.001 --> 00:03:29.002
but you can definitely point to them

84
00:03:29.002 --> 00:03:31.002
by variables of the parent.

85
00:03:31.002 --> 00:03:33.001
Let's write a simple piece of code

86
00:03:33.001 --> 00:03:35.001
in order to understand this better.

87
00:03:35.001 --> 00:03:37.000
Let's go to the IDE,

88
00:03:37.000 --> 00:03:39.005
we are going to use the IntelliJ IDE,

89
00:03:39.005 --> 00:03:41.000
and let's create a fresh project.

90
00:03:41.000 --> 00:03:43.003
So click on the new project button,

91
00:03:43.003 --> 00:03:46.009
and we'll create a Java project, a simple Java project.

92
00:03:46.009 --> 00:03:50.007
We will choose Java 11 version for this course.

93
00:03:50.007 --> 00:03:53.000
We do not want to select any library,

94
00:03:53.000 --> 00:03:55.002
let's just click on next.

95
00:03:55.002 --> 00:03:57.002
We do not want to create the project

96
00:03:57.002 --> 00:03:58.007
from any kind of a template,

97
00:03:58.007 --> 00:04:02.003
so we'll skip option as well and click on next.

98
00:04:02.003 --> 00:04:03.003
And let's give it a name,

99
00:04:03.003 --> 00:04:06.000
let's call it Generics,

100
00:04:06.000 --> 00:04:08.007
and then let's click on finish.

101
00:04:08.007 --> 00:04:12.007
So now the project will open up in a window.

102
00:04:12.007 --> 00:04:15.005
Under this, you have the source folder, the SRC folder,

103
00:04:15.005 --> 00:04:18.008
let's right click on it and create a package first.

104
00:04:18.008 --> 00:04:26.006
So we'll call it com.linkedin.generics.

105
00:04:26.006 --> 00:04:29.002
And on this, I will write a class,

106
00:04:29.002 --> 00:04:35.006
let's call this NonGenericsCode.

107
00:04:35.006 --> 00:04:37.000
Let's write the main method here

108
00:04:37.000 --> 00:04:39.008
so we can test out something quickly.

109
00:04:39.008 --> 00:04:40.009
Inside this main method,

110
00:04:40.009 --> 00:04:43.003
let's create a variable of the list type.

111
00:04:43.003 --> 00:04:46.002
So list is an interface coming from the collections API,

112
00:04:46.002 --> 00:04:48.004
Java.util package.

113
00:04:48.004 --> 00:04:49.005
So let's do that.

114
00:04:49.005 --> 00:04:54.005
And let's name this variable as languages.

115
00:04:54.005 --> 00:04:59.003
Further, let's instantiate this to an ArrayList object.

116
00:04:59.003 --> 00:05:02.005
Now, the list that we created on line number eight

117
00:05:02.005 --> 00:05:05.000
is a non-generics list.

118
00:05:05.000 --> 00:05:10.003
This means, that you can add any type of data to this list.

119
00:05:10.003 --> 00:05:12.005
So you can add string values,

120
00:05:12.005 --> 00:05:14.003
you can add integer values,

121
00:05:14.003 --> 00:05:18.001
or you could even add objects of your product class.

122
00:05:18.001 --> 00:05:21.003
However, all the data that you add in this list

123
00:05:21.003 --> 00:05:24.009
will be treated as the object type.

124
00:05:24.009 --> 00:05:28.005
This list is also ultimately called as a raw list,

125
00:05:28.005 --> 00:05:30.003
or a raw type.

126
00:05:30.003 --> 00:05:34.007
Let's come on the next line and say languages.ad.

127
00:05:34.007 --> 00:05:37.005
And if you look at the method signature of the ad,

128
00:05:37.005 --> 00:05:40.004
then you see that it is asking you to add something

129
00:05:40.004 --> 00:05:43.002
of the object type.

130
00:05:43.002 --> 00:05:44.007
Let's go ahead and add languages,

131
00:05:44.007 --> 00:05:48.004
let's add English first.

132
00:05:48.004 --> 00:05:51.008
On the next line, you could also do something like this,

133
00:05:51.008 --> 00:05:56.003
create a variable of the object type, let's call it value,

134
00:05:56.003 --> 00:06:01.009
and point this to an instance of the string type,

135
00:06:01.009 --> 00:06:04.000
and let's feed in a language to it,

136
00:06:04.000 --> 00:06:07.002
let's name it Swedish.

137
00:06:07.002 --> 00:06:08.008
And then on the next line,

138
00:06:08.008 --> 00:06:12.003
you can say languages.add value.

139
00:06:12.003 --> 00:06:13.006
This is also fine.

140
00:06:13.006 --> 00:06:15.003
This is how basically you go ahead

141
00:06:15.003 --> 00:06:17.000
and write generalized code.

142
00:06:17.000 --> 00:06:20.003
However, this approach of writing generalized code

143
00:06:20.003 --> 00:06:22.004
comes in with a couple of limitations,

144
00:06:22.004 --> 00:06:23.006
and those are the problems

145
00:06:23.006 --> 00:06:26.006
that we are trying to understand without generics.

146
00:06:26.006 --> 00:06:30.008
The first one is, whenever you try to process these values

147
00:06:30.008 --> 00:06:33.004
that have been written with generalized code,

148
00:06:33.004 --> 00:06:37.000
you will need to do an explicit casting.

149
00:06:37.000 --> 00:06:38.000
What does that mean?

150
00:06:38.000 --> 00:06:39.007
Let's go back to the IDE,

151
00:06:39.007 --> 00:06:47.006
and let's write a method call here, say processLanguages,

152
00:06:47.006 --> 00:06:50.005
and let's pass that languages list to it.

153
00:06:50.005 --> 00:06:52.007
This method does not exist as of now,

154
00:06:52.007 --> 00:06:55.007
so we will come out of the main method,

155
00:06:55.007 --> 00:06:59.002
and on line 15, let's write that process language as method.

156
00:06:59.002 --> 00:07:02.006
So we'll say private static.

157
00:07:02.006 --> 00:07:05.006
This method does not need to return anything as of now,

158
00:07:05.006 --> 00:07:08.003
so we will label the written type as void,

159
00:07:08.003 --> 00:07:10.001
and the name of the method,

160
00:07:10.001 --> 00:07:13.001
and a parameter of the type list,

161
00:07:13.001 --> 00:07:15.008
let's call it data.

162
00:07:15.008 --> 00:07:17.005
So we chose a parameter of the type list

163
00:07:17.005 --> 00:07:18.008
because online number 12,

164
00:07:18.008 --> 00:07:21.005
we are passing list as an argument.

165
00:07:21.005 --> 00:07:24.002
When we come inside this method on line 16,

166
00:07:24.002 --> 00:07:28.006
let's try to retrieve the value at the zeroth index

167
00:07:28.006 --> 00:07:30.005
of that data parameter,

168
00:07:30.005 --> 00:07:33.001
and take it into a string variable.

169
00:07:33.001 --> 00:07:35.000
Now, why do we need a string variable?

170
00:07:35.000 --> 00:07:38.004
That is because on line's number nine and 10,

171
00:07:38.004 --> 00:07:40.008
we added values of this string type,

172
00:07:40.008 --> 00:07:44.000
so we know that the list contains string values.

173
00:07:44.000 --> 00:07:46.000
So let's go ahead and take a string variable

174
00:07:46.000 --> 00:07:48.007
and say, language.

175
00:07:48.007 --> 00:07:50.007
And the way you get any value

176
00:07:50.007 --> 00:07:54.007
from any index inside a list is by the get method.

177
00:07:54.007 --> 00:07:59.002
So data.get specify the index number zero in this case.

178
00:07:59.002 --> 00:08:01.009
Unfortunately, this line does not compile.

179
00:08:01.009 --> 00:08:03.007
And the error that you get is,

180
00:08:03.007 --> 00:08:08.003
the required type is string and you provided object.

181
00:08:08.003 --> 00:08:11.003
So, as we said earlier, the list on line number eight

182
00:08:11.003 --> 00:08:13.008
is a raw list,

183
00:08:13.008 --> 00:08:16.008
you can add values of any type.

184
00:08:16.008 --> 00:08:18.006
But anything that you add

185
00:08:18.006 --> 00:08:22.002
will be considered to be of the object type.

186
00:08:22.002 --> 00:08:26.001
So on line 16, when you say data.get zero,

187
00:08:26.001 --> 00:08:30.005
the value that it yields is of the object type,

188
00:08:30.005 --> 00:08:32.001
but we are trying to capture it

189
00:08:32.001 --> 00:08:34.006
into a variable of the string type.

190
00:08:34.006 --> 00:08:36.008
Now this is an incompatible operation,

191
00:08:36.008 --> 00:08:40.001
so the compiler stops you right there and doesn't allow it.

192
00:08:40.001 --> 00:08:41.003
So then what do we do?

193
00:08:41.003 --> 00:08:43.004
A simple solution to this is,

194
00:08:43.004 --> 00:08:48.000
you can cast the data.get zero value to the string type.

195
00:08:48.000 --> 00:08:51.007
And casting is as simple as doing this,

196
00:08:51.007 --> 00:08:56.003
mentioning the type name in a pair of round brackets.

197
00:08:56.003 --> 00:08:57.001
That's all.

198
00:08:57.001 --> 00:08:59.000
So you took data.get zero,

199
00:08:59.000 --> 00:09:01.002
you cast it into the string type,

200
00:09:01.002 --> 00:09:05.004
and now you're okay to capture it into a string variable.

201
00:09:05.004 --> 00:09:06.005
Let's go on the next line

202
00:09:06.005 --> 00:09:11.003
and just print that value to the console.

203
00:09:11.003 --> 00:09:14.003
And let's run this method,

204
00:09:14.003 --> 00:09:15.006
and observe the console output.

205
00:09:15.006 --> 00:09:16.006
Everything should go well,

206
00:09:16.006 --> 00:09:20.000
and we should get the data at the zeroth index,

207
00:09:20.000 --> 00:09:22.007
which is in our case, English.

208
00:09:22.007 --> 00:09:23.006
So there we go.

209
00:09:23.006 --> 00:09:26.006
We did get the English as an output on the console.

210
00:09:26.006 --> 00:09:29.009
So what we did is, whenever we tried to process the values

211
00:09:29.009 --> 00:09:33.004
from that list data, the parameter that you have on line 15,

212
00:09:33.004 --> 00:09:36.001
we had to perform an explicit casting

213
00:09:36.001 --> 00:09:38.002
to the string type on line 16.

214
00:09:38.002 --> 00:09:40.009
So if you do this everywhere in your application,

215
00:09:40.009 --> 00:09:43.002
then you're going to introduce a lot of clutter

216
00:09:43.002 --> 00:09:45.007
in your code, and that's not good.

217
00:09:45.007 --> 00:09:47.009
The second problem with this approach

218
00:09:47.009 --> 00:09:50.001
of writing object type implementation,

219
00:09:50.001 --> 00:09:53.001
is that this code lacks type safety.

220
00:09:53.001 --> 00:09:54.001
What is that?

221
00:09:54.001 --> 00:09:55.008
Let's go back to the IDE,

222
00:09:55.008 --> 00:09:57.004
and on line number nine,

223
00:09:57.004 --> 00:09:59.008
instead of this English string,

224
00:09:59.008 --> 00:10:03.005
I will add a number, let's say 23,

225
00:10:03.005 --> 00:10:06.000
and let's run this code again.

226
00:10:06.000 --> 00:10:09.005
And now let's see what we have on the console.

227
00:10:09.005 --> 00:10:12.005
This time, we get an exception,

228
00:10:12.005 --> 00:10:14.004
class cast exception,

229
00:10:14.004 --> 00:10:18.002
and it says that java.lang.integer

230
00:10:18.002 --> 00:10:21.002
cannot be cast to Java.lang.String.

231
00:10:21.002 --> 00:10:23.002
Hmm, so what happened here?

232
00:10:23.002 --> 00:10:25.009
On line number nine, you added a number,

233
00:10:25.009 --> 00:10:28.000
an in integer, 23 to this list,

234
00:10:28.000 --> 00:10:29.005
and this is totally okay.

235
00:10:29.005 --> 00:10:30.005
Because as we said earlier,

236
00:10:30.005 --> 00:10:34.002
you can add any type of values to that list.

237
00:10:34.002 --> 00:10:38.005
However, when you came inside the process languages method

238
00:10:38.005 --> 00:10:43.000
on line 16, you try to say data.get zero,

239
00:10:43.000 --> 00:10:46.002
and cast that to a string type.

240
00:10:46.002 --> 00:10:48.009
Now, the problem is, that Java detected

241
00:10:48.009 --> 00:10:52.000
that data.get zero is yielding you a number,

242
00:10:52.000 --> 00:10:56.000
and that number cannot be taken inside a string variable,

243
00:10:56.000 --> 00:10:59.005
and that is why it threw the class cast exception

244
00:10:59.005 --> 00:11:00.006
at run time.

245
00:11:00.006 --> 00:11:02.005
But the question here is,

246
00:11:02.005 --> 00:11:03.009
if this is the case,

247
00:11:03.009 --> 00:11:08.001
why was the compilation on line number 16 successful?

248
00:11:08.001 --> 00:11:11.009
That is because, when we cast data.get zero

249
00:11:11.009 --> 00:11:15.003
to a string type, the compiler trusted us.

250
00:11:15.003 --> 00:11:18.008
The compiler assumed that we know what we are doing,

251
00:11:18.008 --> 00:11:20.003
that we were confident enough

252
00:11:20.003 --> 00:11:22.005
to cast that value to a string type.

253
00:11:22.005 --> 00:11:24.006
However, when the code ran,

254
00:11:24.006 --> 00:11:26.003
Java runtime detected

255
00:11:26.003 --> 00:11:28.009
that you were trying to take the integer 23

256
00:11:28.009 --> 00:11:30.005
into a string variable,

257
00:11:30.005 --> 00:11:34.005
and that is why it went ahead and threw that exception.

258
00:11:34.005 --> 00:11:37.000
So this is the problem of type safety.

259
00:11:37.000 --> 00:11:41.003
On line number nine, I just went ahead and added the value

260
00:11:41.003 --> 00:11:42.005
23.

261
00:11:42.005 --> 00:11:45.000
There was no safety ensured

262
00:11:45.000 --> 00:11:48.007
that I'm trying to add the correct thing in that list.

263
00:11:48.007 --> 00:11:50.008
This is the type safety problem

264
00:11:50.008 --> 00:11:53.006
that comes in with the generalized code.

265
00:11:53.006 --> 00:11:56.001
And then you see that the type safety problem

266
00:11:56.001 --> 00:11:57.009
leads you to that class cast exception,

267
00:11:57.009 --> 00:11:59.003
which is a runtime issue,

268
00:11:59.003 --> 00:12:01.009
and that's even more embarrassing for your application.

269
00:12:01.009 --> 00:12:03.006
So, we have two issues:

270
00:12:03.006 --> 00:12:06.002
one is, when you try to process values

271
00:12:06.002 --> 00:12:07.001
with generalized code,

272
00:12:07.001 --> 00:12:09.004
you will need to perform explicit casting.

273
00:12:09.004 --> 00:12:11.003
Second is, when you write such code,

274
00:12:11.003 --> 00:12:14.004
you do not have any kind of type safety guarantee.

275
00:12:14.004 --> 00:12:16.000
To solve these two problems,

276
00:12:16.000 --> 00:12:20.000
we have a very powerful feature in Java which is generics.

